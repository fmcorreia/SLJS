/* Generated by JSIL v0.2 build 28582. See http://jsil.org/ for more information. */ 
var $asm06 = JSIL.DeclareAssembly("System.Net, Version=2.0.5.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e");
JSIL.DeclareNamespace("System");
JSIL.MakeClass("System.ComponentModel.DescriptionAttribute", "System.SRDescriptionAttribute", false);

JSIL.MakeClass("System.ComponentModel.CategoryAttribute", "System.SRCategoryAttribute", false);

JSIL.MakeClass("System.Object", "System.SR", false);

JSIL.DeclareNamespace("System.Net");
JSIL.MakeClass("System.Object", "System.Net.ScatterGatherBuffers", false);
JSIL.MakeClass("System.Object", "System.Net.ScatterGatherBuffers/MemoryChunk", false);


JSIL.MakeClass("System.Object", "System.Net.BufferOffsetSize", false);

JSIL.MakeClass("System.Object", "System.Net.LazyAsyncResult", false);
JSIL.MakeClass("System.Object", "System.Net.LazyAsyncResult/ThreadContext", false);


JSIL.MakeClass("System.Object", "System.Net.WebClientAsyncContext", false);

JSIL.MakeClass("System.Object", "System.Net.WebClient", true);
JSIL.MakeClass("System.Object", "System.Net.WebClient/ProgressData", false);

JSIL.MakeClass("System.Object", "System.Net.WebClient/DownloadBitsState", false);

JSIL.MakeClass("System.Object", "System.Net.WebClient/UploadBitsState", false);

JSIL.MakeClass("System.IO.Stream", "System.Net.WebClient/WebClientWriteStream", false);

JSIL.MakeClass("System.Object", "System.Net.WebClient/$l$gc__DisplayClass1", false);


JSIL.MakeDelegate("System.Net.CompletionDelegate");

JSIL.MakeDelegate("System.Net.OpenReadCompletedEventHandler");

JSIL.MakeClass("System.ComponentModel.AsyncCompletedEventArgs", "System.Net.OpenReadCompletedEventArgs", true);

JSIL.MakeDelegate("System.Net.OpenWriteCompletedEventHandler");

JSIL.MakeClass("System.ComponentModel.AsyncCompletedEventArgs", "System.Net.OpenWriteCompletedEventArgs", true);

JSIL.MakeDelegate("System.Net.DownloadStringCompletedEventHandler");

JSIL.MakeClass("System.ComponentModel.AsyncCompletedEventArgs", "System.Net.DownloadStringCompletedEventArgs", true);

JSIL.MakeDelegate("System.Net.UploadStringCompletedEventHandler");

JSIL.MakeClass("System.ComponentModel.AsyncCompletedEventArgs", "System.Net.UploadStringCompletedEventArgs", true);

JSIL.MakeDelegate("System.Net.DownloadProgressChangedEventHandler");

JSIL.MakeClass("System.ComponentModel.ProgressChangedEventArgs", "System.Net.DownloadProgressChangedEventArgs", true);

JSIL.MakeDelegate("System.Net.UploadProgressChangedEventHandler");

JSIL.MakeClass("System.ComponentModel.ProgressChangedEventArgs", "System.Net.UploadProgressChangedEventArgs", true);

JSIL.MakeDelegate("System.Net.WriteStreamClosedEventHandler");

JSIL.MakeClass("System.EventArgs", "System.Net.WriteStreamClosedEventArgs", true);

JSIL.MakeStaticClass("System.Net.WebClientExtensions", false);

JSIL.MakeClass("System.ComponentModel.ProgressChangedEventArgs", "System.Net.NetworkProgressChangedEventArgs", false);

JSIL.MakeInterface(
	"System.Net.INetworkProgress", [], {
		"add_ProgressChanged": Function, 
		"remove_ProgressChanged": Function, 
		"add_ProgressCompleted": Function, 
		"remove_ProgressCompleted": Function, 
		"add_ProgressFailed": Function, 
		"remove_ProgressFailed": Function
	});

JSIL.MakeEnum(
	"System.Net.HttpStatusCode", {
		Continue: 100, 
		SwitchingProtocols: 101, 
		OK: 200, 
		Created: 201, 
		Accepted: 202, 
		NonAuthoritativeInformation: 203, 
		NoContent: 204, 
		ResetContent: 205, 
		PartialContent: 206, 
		MultipleChoices: 300, 
		Ambiguous: 300, 
		MovedPermanently: 301, 
		Moved: 301, 
		Found: 302, 
		Redirect: 302, 
		SeeOther: 303, 
		RedirectMethod: 303, 
		NotModified: 304, 
		UseProxy: 305, 
		Unused: 306, 
		TemporaryRedirect: 307, 
		RedirectKeepVerb: 307, 
		BadRequest: 400, 
		Unauthorized: 401, 
		PaymentRequired: 402, 
		Forbidden: 403, 
		NotFound: 404, 
		MethodNotAllowed: 405, 
		NotAcceptable: 406, 
		ProxyAuthenticationRequired: 407, 
		RequestTimeout: 408, 
		Conflict: 409, 
		Gone: 410, 
		LengthRequired: 411, 
		PreconditionFailed: 412, 
		RequestEntityTooLarge: 413, 
		RequestUriTooLong: 414, 
		UnsupportedMediaType: 415, 
		RequestedRangeNotSatisfiable: 416, 
		ExpectationFailed: 417, 
		InternalServerError: 500, 
		NotImplemented: 501, 
		BadGateway: 502, 
		ServiceUnavailable: 503, 
		GatewayTimeout: 504, 
		HttpVersionNotSupported: 505
	}, false
);

JSIL.MakeInterface(
	"System.Net.ICredentials", [], {
		"GetCredential": Function
	});

JSIL.MakeEnum(
	"System.Net.HttpRequestHeader", {
		CacheControl: 0, 
		Connection: 1, 
		Date: 2, 
		KeepAlive: 3, 
		Pragma: 4, 
		Trailer: 5, 
		TransferEncoding: 6, 
		Upgrade: 7, 
		Via: 8, 
		Warning: 9, 
		Allow: 10, 
		ContentLength: 11, 
		ContentType: 12, 
		ContentEncoding: 13, 
		ContentLanguage: 14, 
		ContentLocation: 15, 
		ContentMd5: 16, 
		ContentRange: 17, 
		Expires: 18, 
		LastModified: 19, 
		Accept: 20, 
		AcceptCharset: 21, 
		AcceptEncoding: 22, 
		AcceptLanguage: 23, 
		Authorization: 24, 
		Cookie: 25, 
		Expect: 26, 
		From: 27, 
		Host: 28, 
		IfMatch: 29, 
		IfModifiedSince: 30, 
		IfNoneMatch: 31, 
		IfRange: 32, 
		IfUnmodifiedSince: 33, 
		MaxForwards: 34, 
		ProxyAuthorization: 35, 
		Referer: 36, 
		Range: 37, 
		Te: 38, 
		Translate: 39, 
		UserAgent: 40
	}, false
);

JSIL.MakeInterface(
	"System.Net.IWebRequestCreate", [], {
		"Create": Function
	});

JSIL.MakeClass("System.InvalidOperationException", "System.Net.WebException", true);

JSIL.MakeEnum(
	"System.Net.WebExceptionInternalStatus", {
		RequestFatal: 0, 
		ServicePointFatal: 1, 
		Recoverable: 2, 
		Isolated: 3
	}, false
);

JSIL.MakeClass("System.InvalidOperationException", "System.Net.ProtocolViolationException", true);

JSIL.MakeClass("System.Object", "System.Net.WebRequest", true);

JSIL.MakeClass("System.Net.WebRequest", "System.Net.HttpWebRequest", true);

JSIL.MakeClass("System.Object", "System.Net.WebResponse", true);

JSIL.MakeClass("System.Net.WebResponse", "System.Net.HttpWebResponse", true);

JSIL.MakeEnum(
	"System.Net.WebExceptionStatus", {
		Success: 0, 
		ConnectFailure: 2, 
		SendFailure: 4, 
		RequestCanceled: 6, 
		Pending: 13, 
		UnknownError: 16, 
		MessageLengthLimitExceeded: 17
	}, false
);

JSIL.MakeEnum(
	"System.Net.WebHeaderCollectionType", {
		Unknown: 0, 
		WebRequest: 1, 
		HttpWebRequest: 2
	}, false
);

JSIL.MakeClass("System.Object", "System.Net.WebHeaderCollection", true);

JSIL.MakeClass(new JSIL.TypeRef($asm06, "System.Collections.Generic.Dictionary$b2", ["System.String", new JSIL.TypeRef($asm06, "System.Collections.Generic.List$b1", ["System.String"])]), "System.Net.NameValueFromDictionary", false);

JSIL.MakeClass("System.Object", "System.Net.CaseInsensitiveAscii", false);

JSIL.MakeStaticClass("System.Net.HttpKnownHeaderNames", false);

JSIL.MakeStaticClass("System.Net.HttpHeaderToName", false);

JSIL.MakeClass("System.Object", "System.Net.HttpRequestHeaderEnumToName", false);

JSIL.MakeClass("System.Object", "System.Net.HeaderInfoTable", false);

JSIL.MakeClass("System.Object", "System.Net.HeaderInfo", false);

JSIL.MakeClass("System.Object", "System.Net.WebRequestPrefixElement", false);

JSIL.MakeClass("System.Security.SecurityState", "System.Net.NetworkSecurityState", false);

JSIL.MakeStaticClass("System.Net.NetworkSecurityOptions", false);

JSIL.DeclareNamespace("System.Net.Sockets");
JSIL.MakeStaticClass("System.Net.Sockets.MulticastPolicyManager", false);
JSIL.MakeClass("System.Object", "System.Net.Sockets.MulticastPolicyManager/MulticastPolicyApproval", false);


JSIL.MakeClass("System.Object", "System.Net.Sockets.AsyncResult", false);

JSIL.MakeClass("System.Net.Sockets.AsyncResult", "System.Net.Sockets.AsyncResult$b1", false, ["TResult"]);

JSIL.MakeClass(new JSIL.TypeRef($asm06, "System.Net.Sockets.AsyncResult$b1", ["System.Boolean"]), "System.Net.Sockets.MulticastPolicyCheckAsyncResult", false);

JSIL.MakeClass("System.Object", "System.Net.Sockets.MulticastPolicyCheckOperation", false);

JSIL.MakeEnum(
	"System.Net.Sockets.MulticastPolicyPacketType", {
		Announcement: 0, 
		Authorization: 1
	}, false
);

JSIL.MakeClass("System.Object", "System.Net.Sockets.MulticastPolicyPacket", false);

JSIL.MakeClass("System.Object", "System.Net.Sockets.SocketPolicyAsyncResult", false);

JSIL.MakeClass("System.Object", "System.Net.Sockets.ISocketPolicyManager", false);
JSIL.MakeDelegate("System.Net.Sockets.ISocketPolicyManager/SocketPolicyCheckCallback");


JSIL.MakeClass("System.Net.Sockets.SocketPolicyAsyncResult", "System.Net.Sockets.CrossDomainPolicyAsyncResult", false);

JSIL.MakeClass("System.Object", "System.Net.Sockets.IPAddressAndPolicyProtocol", false);

JSIL.MakeClass("System.Net.Sockets.ISocketPolicyManager", "System.Net.Sockets.CrossDomainSocketPolicyManager", false);

JSIL.MakeDelegate("System.Net.Sockets.SocketPolicyDownloadCallback");

JSIL.MakeClass("System.Object", "System.Net.Sockets.SocketPolicyDownloader", false);

JSIL.MakeDelegate("System.Net.Sockets.SecurityCriticalAction");

JSIL.MakeInterface(
	"System.Net.Sockets.ISocketPolicyDownloaderProtocol", [], {
		"get_Result": Function, 
		"BeginDownload": Function, 
		"Abort": Function, 
		"Result": Property
	});

JSIL.MakeInterface(
	"System.Net.IUnsafeWebRequestCreate", [], {
		"Create": Function
	});

JSIL.MakeStaticClass("System.Net.Sockets.TcpPolicyDownloaderProtocolCallbacks", false);

JSIL.MakeClass("System.Object", "System.Net.Sockets.TcpPolicyDownloaderProtocol", false);

JSIL.MakeStaticClass("System.Net.Sockets.HttpPolicyDownloaderProtocolCallbacks", false);

JSIL.MakeClass("System.Object", "System.Net.Sockets.HttpPolicyDownloaderProtocol", false);

JSIL.MakeClass("System.Object", "System.Net.Sockets.UnsafeSocketPolicyNativeMethods", false);

JSIL.MakeClass("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid", "System.Net.Sockets.SafeFreeSocketPolicy", false);

JSIL.MakeClass("System.Object", "System.Net.Sockets.SocketPolicy", false);
JSIL.MakeClass("System.Object", "System.Net.Sockets.SocketPolicy/SocketPolicyCheckArgs", false);


JSIL.MakeStaticClass("System.Net.Sockets.UnsafeRegKeyServicesNativeMethods", false);

JSIL.MakeStaticClass("System.Net.Sockets.RegKeyServices", false);

JSIL.MakeClass("System.Object", "System.Net.NetworkCredential", true);

JSIL.MakeDelegate("System.Net.Sockets.SecurityCriticalAsyncCallback");

JSIL.MakeClass("System.Object", "System.Net.Sockets.CallbackWrapper", false);

JSIL.MakeDelegate("System.Net.Sockets.SecurityCriticalTimerCallback");

JSIL.MakeClass("System.Object", "System.Net.Sockets.SecurityCriticalTimer", false);

JSIL.MakeDelegate("System.Net.Sockets.SecurityCriticalWaitCallback");

JSIL.MakeDelegate("System.Net.Sockets.SecurityCriticalWaitOrTimerCallback");

JSIL.MakeStaticClass("System.Net.Sockets.SecurityCriticalThreadPool", false);
JSIL.MakeClass("System.Object", "System.Net.Sockets.SecurityCriticalThreadPool/UserWorkItemCallbackWrapper", false);

JSIL.MakeClass("System.Object", "System.Net.Sockets.SecurityCriticalThreadPool/WaitForSingleObjectCallbackWrapper", false);


JSIL.MakeClass(new JSIL.TypeRef($asm06, "System.Net.Sockets.AsyncResult$b1", ["System.Int32"]), "System.Net.Sockets.OverlappedAsyncResult", false);

JSIL.MakeClass("System.Net.Sockets.OverlappedAsyncResult", "System.Net.Sockets.ReceiveMessageAsyncResult", false);

JSIL.MakeClass(new JSIL.TypeRef($asm06, "System.Net.Sockets.AsyncResult$b1", ["System.Int32"]), "System.Net.Sockets.FilterReceiveMessageAsyncResult", false);

JSIL.MakeEnum(
	"System.Net.Sockets.UnicastFilterKind", {
		AllowAll: 0, 
		AllowSingleSource: 1, 
		BlockAll: 2
	}, false
);

JSIL.MakeClass("System.Object", "System.Net.Sockets.UnsafeSocket", false);

JSIL.MakeDelegate("System.Net.Sockets.WSARecvMsgDelegate");

JSIL.MakeClass("System.Object", "System.Net.Sockets.DynamicWinsockMethods", false);

JSIL.MakeClass("System.Object", "System.Net.Sockets.UdpAnySourceMulticastClient", true);

JSIL.MakeClass("System.Object", "System.Net.Sockets.UdpSingleSourceMulticastClient", true);

JSIL.MakeStaticClass("System.Net.UiSynchronizationContext", false);

JSIL.DeclareNamespace("System.Internal");
JSIL.MakeStaticClass("System.Internal.ExternDLL", false);

JSIL.MakeStaticClass("System.Net.UnsafeNclNativeMethods", false);
JSIL.MakeStaticClass("System.Net.UnsafeNclNativeMethods/ErrorCodes", false);

JSIL.MakeStaticClass("System.Net.UnsafeNclNativeMethods/OSSOCK", false);
JSIL.MakeStruct("System.Net.UnsafeNclNativeMethods/OSSOCK/ControlData", false);

JSIL.MakeStruct("System.Net.UnsafeNclNativeMethods/OSSOCK/ControlDataIPv6", false);

JSIL.MakeStruct("System.Net.UnsafeNclNativeMethods/OSSOCK/WSAMsg", false);

JSIL.MakeDelegate("System.Net.UnsafeNclNativeMethods/OSSOCK/SetResetEventDelegate");


JSIL.MakeStaticClass("System.Net.UnsafeNclNativeMethods/SafeNetHandles", false);

JSIL.MakeStaticClass("System.Net.UnsafeNclNativeMethods/SafeNetHandlesXPOrLater", false);


JSIL.MakeStaticClass("System.Net.SafeNativeMethods", false);

JSIL.MakeClass("System.Object", "System.Net.AlternativeMarshaller", false);

JSIL.DeclareNamespace("Microsoft");
JSIL.DeclareNamespace("Microsoft.Win32");
JSIL.MakeStaticClass("Microsoft.Win32.NetExtras", false);

JSIL.MakeClass("System.Object", "System.Net.Sockets.Socket", true);
JSIL.MakeDelegate("System.Net.Sockets.Socket/ConnectExDelegate");

JSIL.MakeClass("System.Object", "System.Net.Sockets.Socket/StaticConnectAsyncState", false);


JSIL.MakeClass("System.Object", "System.IPv4AddressHelper", false);

JSIL.MakeClass("System.Object", "System.IPv6AddressHelper", false);

JSIL.MakeStruct("System.Net.IPMulticastRequest", false);

JSIL.MakeStruct("System.Net.Linger", false);

JSIL.MakeStruct("System.Net.WSABuffer", false);

JSIL.MakeClass("System.Object", "System.Net.TransmitFileBuffers", false);

JSIL.MakeStruct("System.Net.WSAData", false);

JSIL.MakeStruct("System.Net.AddressInfo", false);

JSIL.MakeEnum(
	"System.Net.AddressInfoHints", {
		AI_PASSIVE: 1, 
		AI_CANONNAME: 2, 
		AI_NUMERICHOST: 4
	}, true
);

JSIL.MakeEnum(
	"System.Net.NameInfoFlags", {
		NI_NOFQDN: 1, 
		NI_NUMERICHOST: 2, 
		NI_NAMEREQD: 4, 
		NI_NUMERICSERV: 8, 
		NI_DGRAM: 16
	}, true
);

JSIL.MakeStruct("System.Net.IPv6MulticastRequest", false);

JSIL.MakeStruct("System.Net.IPMulticastRequestSource", false);

JSIL.MakeStruct("System.Net.GroupSourceRequest", false);

JSIL.MakeEnum(
	"System.Net.SocketConstructorFlags", {
		WSA_FLAG_OVERLAPPED: 1, 
		WSA_FLAG_MULTIPOINT_C_ROOT: 2, 
		WSA_FLAG_MULTIPOINT_C_LEAF: 4, 
		WSA_FLAG_MULTIPOINT_D_ROOT: 8, 
		WSA_FLAG_MULTIPOINT_D_LEAF: 16
	}, true
);

JSIL.MakeClass("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid", "System.Net.SafeFreeAddrInfo", false);

JSIL.MakeClass("Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid", "System.Net.SafeCloseSocket", false);
JSIL.MakeClass("Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid", "System.Net.SafeCloseSocket/InnerSafeCloseSocket", false);


JSIL.MakeClass("System.Object", "System.Net.EndPoint", true);

JSIL.MakeClass("System.Net.EndPoint", "System.Net.ResolvedDnsEndPoint", false);

JSIL.MakeClass("System.Net.EndPoint", "System.Net.DnsEndPoint", true);

JSIL.MakeClass("System.Net.EndPoint", "System.Net.IPEndPoint", true);

JSIL.MakeClass("System.Object", "System.Net.IPAddress", true);

JSIL.MakeClass("System.Object", "System.Net.SocketAddress", true);

JSIL.MakeClass("System.Exception", "System.Net.Sockets.SocketException", true);

JSIL.MakeClass("System.Object", "System.Net.Logging", false);

JSIL.MakeClass("System.Object", "System.Net.TraceSource", false);

JSIL.MakeEnum(
	"System.Net.ThreadKinds", {
		Unknown: 0, 
		User: 1, 
		System: 2, 
		Sync: 4, 
		Async: 8, 
		Timer: 16, 
		CompletionPort: 32, 
		Worker: 64, 
		Finalization: 128, 
		Other: 256, 
		OwnerMask: 3, 
		SyncMask: 12, 
		SourceMask: 496, 
		SafeSources: 352, 
		ThreadPool: 96
	}, true
);

JSIL.MakeStaticClass("System.Net.GlobalLog", false);

JSIL.MakeStaticClass("System.Net.IntPtrHelper", false);

JSIL.MakeClass("System.SystemException", "System.Net.InternalException", false);

JSIL.MakeStaticClass("System.Net.NclUtilities", false);

JSIL.MakeStaticClass("System.Net.ComNetOS", false);

JSIL.MakeStruct("System.Net.hostent", false);

JSIL.MakeStaticClass("System.Net.ValidationHelper", false);

JSIL.MakeStaticClass("System.Net.Dns", false);

JSIL.MakeClass("System.Object", "System.Net.IPHostEntry", false);

JSIL.MakeStaticClass("System.Net.Win32", false);

JSIL.MakeStaticClass("System.Net.Sockets.NCLPALDelegates", false);

JSIL.MakeEnum(
	"System.Net.Sockets.SocketAsyncOperation", {
		None: 0, 
		Connect: 2, 
		Receive: 4, 
		Send: 7
	}, false
);

JSIL.MakeClass("System.EventArgs", "System.Net.Sockets.SocketAsyncEventArgs", true);
JSIL.MakeEnum(
	"System.Net.Sockets.SocketAsyncEventArgs/PinState", {
		None: 0, 
		NoBuffer: 1, 
		SingleBuffer: 2, 
		MultipleBuffer: 3
	}, false
);


JSIL.MakeEnum(
	"System.Net.Sockets.SocketClientAccessPolicyProtocol", {
		Tcp: 0, 
		Http: 1
	}, false
);

JSIL.MakeEnum(
	"System.Net.Sockets.AddressFamily", {
		Unknown: -1, 
		Unspecified: 0, 
		InterNetwork: 2, 
		InterNetworkV6: 23
	}, false
);

JSIL.MakeEnum(
	"System.Net.Sockets.SocketType", {
		Stream: 1, 
		Dgram: 2, 
		Unknown: -1
	}, false
);

JSIL.MakeEnum(
	"System.Net.Sockets.ProtocolType", {
		Tcp: 6, 
		Udp: 17, 
		Unspecified: 0, 
		Unknown: -1
	}, false
);

JSIL.MakeEnum(
	"System.Net.Sockets.SocketOptionLevel", {
		Socket: 65535, 
		IP: 0, 
		IPv6: 41, 
		Tcp: 6
	}, false
);

JSIL.MakeEnum(
	"System.Net.Sockets.SocketOptionName", {
		ReuseAddress: 4, 
		Linger: 128, 
		SendBuffer: 4097, 
		ReceiveBuffer: 4098, 
		ReceiveTimeout: 4102, 
		IpTimeToLive: 4, 
		MulticastLoopback: 11, 
		AddMembership: 12, 
		DropMembership: 13, 
		AddSourceMembership: 15, 
		DropSourceMembership: 16, 
		BlockSource: 17, 
		UnblockSource: 18, 
		PacketInformation: 19, 
		NoDelay: 1, 
		UpdateConnectContext: 28688
	}, false
);

JSIL.MakeEnum(
	"System.Net.Sockets.SocketShutdown", {
		Receive: 0, 
		Send: 1, 
		Both: 2
	}, false
);

JSIL.MakeEnum(
	"System.Net.Sockets.SocketError", {
		Success: 0, 
		SocketError: -1, 
		Interrupted: 10004, 
		AccessDenied: 10013, 
		Fault: 10014, 
		InvalidArgument: 10022, 
		TooManyOpenSockets: 10024, 
		WouldBlock: 10035, 
		InProgress: 10036, 
		AlreadyInProgress: 10037, 
		NotSocket: 10038, 
		DestinationAddressRequired: 10039, 
		MessageSize: 10040, 
		ProtocolType: 10041, 
		ProtocolOption: 10042, 
		ProtocolNotSupported: 10043, 
		SocketNotSupported: 10044, 
		OperationNotSupported: 10045, 
		ProtocolFamilyNotSupported: 10046, 
		AddressFamilyNotSupported: 10047, 
		AddressAlreadyInUse: 10048, 
		AddressNotAvailable: 10049, 
		NetworkDown: 10050, 
		NetworkUnreachable: 10051, 
		NetworkReset: 10052, 
		ConnectionAborted: 10053, 
		ConnectionReset: 10054, 
		NoBufferSpaceAvailable: 10055, 
		IsConnected: 10056, 
		NotConnected: 10057, 
		Shutdown: 10058, 
		TimedOut: 10060, 
		ConnectionRefused: 10061, 
		HostDown: 10064, 
		HostUnreachable: 10065, 
		ProcessLimit: 10067, 
		SystemNotReady: 10091, 
		VersionNotSupported: 10092, 
		NotInitialized: 10093, 
		Disconnecting: 10101, 
		TypeNotFound: 10109, 
		HostNotFound: 11001, 
		TryAgain: 11002, 
		NoRecovery: 11003, 
		NoData: 11004, 
		IOPending: 997, 
		OperationAborted: 995
	}, false
);

JSIL.MakeEnum(
	"System.Net.Sockets.SocketFlags", {
		None: 0
	}, true
);

JSIL.MakeStaticClass("System.Net.Sockets.IoctlSocketConstants", false);

JSIL.MakeEnum(
	"System.Net.Sockets.AsyncEventBits", {
		FdNone: 0, 
		FdRead: 1, 
		FdWrite: 2, 
		FdOob: 4, 
		FdAccept: 8, 
		FdConnect: 16, 
		FdClose: 32, 
		FdQos: 64, 
		FdGroupQos: 128, 
		FdRoutingInterfaceChange: 256, 
		FdAddressListChange: 512, 
		FdAllEvents: 1023
	}, true
);

JSIL.MakeEnum(
	"System.Net.Sockets.AsyncEventBitsPos", {
		FdReadBit: 0, 
		FdWriteBit: 1, 
		FdOobBit: 2, 
		FdAcceptBit: 3, 
		FdConnectBit: 4, 
		FdCloseBit: 5, 
		FdQosBit: 6, 
		FdGroupQosBit: 7, 
		FdRoutingInterfaceChangeBit: 8, 
		FdAddressListChangeBit: 9, 
		FdMaxEvents: 10
	}, false
);

JSIL.MakeStruct("System.Net.Sockets.NetworkEvents", false);

JSIL.MakeStruct("System.Net.Sockets.IPPacketInformation", false);

JSIL.DeclareNamespace("System.Net.NetworkInformation");
JSIL.MakeDelegate("System.Net.NetworkInformation.NetworkAddressChangedEventHandler");

JSIL.MakeClass("System.Object", "System.Net.NetworkInformation.NetworkChange", true);

JSIL.MakeDelegate("System.Net.NetworkInformation.SecurityCriticalNetworkAddressChangedEventHandler");

JSIL.MakeClass("System.Object", "System.Net.NetworkInformation.SecurityCriticalNetworkChange", false);

JSIL.MakeClass("System.Object", "System.Net.NetworkInformation.UnsafeNetworkInterfaceNativeMethods", false);

JSIL.MakeClass("System.Object", "System.Net.NetworkInformation.NetworkInterface", true);

JSIL.MakeEnum(
	"System.Net.CookieVariant", {
		Unknown: 0, 
		Plain: 1, 
		Rfc2109: 2, 
		Rfc2965: 3, 
		Default: 2
	}, false
);

JSIL.MakeClass("System.Object", "System.Net.Cookie", true);

JSIL.MakeEnum(
	"System.Net.CookieToken", {
		Nothing: 0, 
		NameValuePair: 1, 
		Attribute: 2, 
		EndToken: 3, 
		EndCookie: 4, 
		End: 5, 
		Equals: 6, 
		Comment: 7, 
		CommentUrl: 8, 
		CookieName: 9, 
		Discard: 10, 
		Domain: 11, 
		Expires: 12, 
		MaxAge: 13, 
		Path: 14, 
		Port: 15, 
		Secure: 16, 
		HttpOnly: 17, 
		Unknown: 18, 
		Version: 19
	}, false
);

JSIL.MakeClass("System.Object", "System.Net.CookieTokenizer", false);
JSIL.MakeStruct("System.Net.CookieTokenizer/RecognizedAttribute", false);


JSIL.MakeClass("System.Object", "System.Net.CookieParser", false);

JSIL.MakeClass("System.Object", "System.Net.Comparer", false);

JSIL.MakeClass("System.FormatException", "System.Net.CookieException", true);

JSIL.MakeClass("System.Object", "System.Net.CookieCollection", true);
JSIL.MakeEnum(
	"System.Net.CookieCollection/Stamp", {
		Check: 0, 
		Set: 1, 
		SetToUnused: 2, 
		SetToMaxUsed: 3
	}, false
);

JSIL.MakeClass("System.Object", "System.Net.CookieCollection/CookieCollectionEnumerator", false);


JSIL.MakeStruct("System.Net.HeaderVariantInfo", false);

JSIL.MakeClass("System.Object", "System.Net.CookieContainer", true);

JSIL.MakeClass("System.Object", "System.Net.PathList", false);
JSIL.MakeClass("System.Object", "System.Net.PathList/PathListComparer", false);


JSIL.MakeStaticClass("System.Net.HttpDateParse", false);

$asm06.System.SRDescriptionAttribute.prototype._ctor = function (description) {
	System.ComponentModel.DescriptionAttribute.prototype._ctor$1.call(this, description);
};
$asm06.System.SRDescriptionAttribute.prototype.get_Description = function () {
	if (!this.replaced) {
		this.replaced = true;
		System.ComponentModel.DescriptionAttribute.prototype.set_DescriptionValue.call(this, $asm06.System.SR.GetString$2(System.ComponentModel.DescriptionAttribute.prototype.get_Description.call(this)));
	}
	return System.ComponentModel.DescriptionAttribute.prototype.get_Description.call(this);
};
JSIL.MakeProperty($asm06.System.SRDescriptionAttribute.prototype, "Description", 
	$asm06.System.SRDescriptionAttribute.prototype.get_Description, null);
$asm06.System.SRDescriptionAttribute.prototype.replaced = false;

$asm06.System.SRCategoryAttribute.prototype._ctor = function (category) {
	System.ComponentModel.CategoryAttribute.prototype._ctor$1.call(this, category);
};
$asm06.System.SRCategoryAttribute.prototype.GetLocalizedString = function (value) {
	return $asm06.System.SR.GetString$2(value);
};

$asm06.System.SR.get_InternalSyncObject = function () {
	if ($asm06.System.SR.s_InternalSyncObject === null) {
		var value = new System.Object();
		System.Threading.Interlocked.CompareExchange$b1(System.Object)(/* ref */ new JSIL.MemberReference($asm06.System.SR, "s_InternalSyncObject"), value, null);
	}
	return $asm06.System.SR.s_InternalSyncObject;
};
$asm06.System.SR.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
	var assembly = JSIL.GetType(this).Assembly;
	this.resources = JSIL.New(System.Resources.ResourceManager, "_ctor$1", ["System.Net", assembly]);
	try {
		var assembly2 = System.Reflection.Assembly.Load$0("System.Net.debug.resources, Version=2.0.5.0, Culture=en-US, PublicKeyToken=7cec85d7bea7798e");
		this.debugResources = JSIL.New(System.Resources.ResourceManager, "_ctor$1", ["System.Net.debug", assembly2]);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.IO.FileNotFoundException)) {
		} else {
			throw $exception;
		}
	}
	this.fallbackResources = JSIL.New(System.Resources.ResourceManager, "_ctor$1", ["mscorlib", System.Object.Assembly]);
};
$asm06.System.SR.GetLoader = function () {
	var internalSyncObject = null;
	if ($asm06.System.SR.loader === null) {
		System.Threading.Monitor.Enter((internalSyncObject = System.SR.InternalSyncObject));
		try {
			if ($asm06.System.SR.loader === null) {
				$asm06.System.SR.loader = new $asm06.System.SR();
			}
		} finally {
			System.Threading.Monitor.Exit(internalSyncObject);
		}
	}
	return $asm06.System.SR.loader;
};
$asm06.System.SR.get_Culture = function () {
	return null;
};
$asm06.System.SR.GetString$0 = function (name, args) {
	var flag = new JSIL.Variable(false);
	return $asm06.System.SR.GetString$1(name, /* ref */ flag, args);
};
$asm06.System.SR.GetString$1 = function (name, /* ref */ fallbackUsed, args) {
	var sR = $asm06.System.SR.GetLoader();
	var text = null;
	fallbackUsed.value = false;
	if (sR !== null) {
		text = sR.resources.GetString$1(name, System.SR.Culture);
		if (!(text || (sR.debugResources === null))) {
			text = sR.debugResources.GetString$1(name, System.SR.Culture);
		}
		if (text !== null) {
			if (!((args === null) || (args.length <= 0))) {
			__loop0__: 
				for (var i = 0; i < args.length; ++i) {
					if (args[i]) {
						var text2 = args[i].toString();
						if (!((text2 === null) || (text2.length <= 1024))) {
							args[i] = ((text2.Substring$1(0, 1021) + "..."));
						}
					}
				}
				return System.String.Format(System.Globalization.CultureInfo.CurrentCulture, text, args);
			}
			return text;
		}
	}
	fallbackUsed.value = true;
	text = $asm06.System.SR.GetFallbackMessage(name, args);
	return text;
};
$asm06.System.SR.GetString$2 = function (name) {
	var text = $asm06.System.SR.GetStringHelper(name);
	if (text === null) {
		text = $asm06.System.SR.GetFallbackMessage(name, null);
	}
	return text;
};
$asm06.System.SR.GetString$3 = function (name, /* ref */ usedFallback) {
	var text = $asm06.System.SR.GetStringHelper(name);
	if (text === null) {
		text = $asm06.System.SR.GetFallbackMessage(name, null);
		usedFallback.value = true;
	} else {
		usedFallback.value = false;
	}
	return text;
};
$asm06.System.SR.GetObject = function (name) {
	var sR = $asm06.System.SR.GetLoader();
	var obj = null;
	if (sR !== null) {
		obj = sR.resources.GetObject$1(name, System.SR.Culture);
		if (!(obj || (sR.debugResources === null))) {
			obj = sR.debugResources.GetObject$1(name, System.SR.Culture);
		}
	}
	if (obj === null) {
		obj = $asm06.System.SR.GetFallbackMessage(name, null);
	}
	return obj;
};
$asm06.System.SR.GetStringHelper = function (name) {
	var sR = $asm06.System.SR.GetLoader();
	var text = null;
	if (sR !== null) {
		text = sR.resources.GetString$1(name, System.SR.Culture);
		if (!(text || (sR.debugResources === null))) {
			text = sR.debugResources.GetString$1(name, System.SR.Culture);
		}
	}
	return text;
};
$asm06.System.SR.GetFallbackMessage = function (name, args) {
	var sR = $asm06.System.SR.GetLoader();
	var text = null;
	if (!((sR === null) || (sR.fallbackResources === null))) {
		var string = sR.fallbackResources.GetString$1("NoDebugResources", System.SR.Culture);
		if (string !== null) {
			var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
			if (args !== null) {
			__loop0__: 
				for (var i = 0; i < args.length; ++i) {
					if (args[i]) {
						var text2 = args[i].toString();
						if (text2 !== null) {
							if (text2.length <= 1024) {
								stringBuilder.Append$2(text2);
							} else {
								stringBuilder.Append$2((text2.Substring$1(0, 1021) + "..."));
							}
							if (i < (args.length - 1)) {
								stringBuilder.Append$2(System.Globalization.CultureInfo.CurrentCulture.TextInfo.ListSeparator);
							}
						}
					}
				}
			}
			var text3 = stringBuilder.toString();
			if (text3 === null) {
				text3 = "";
			}
			text = System.String.Format(System.Globalization.CultureInfo.CurrentCulture, string, [name, text3, "4.0.60310.0", "System.Net.dll", $asm06.System.SR.UriEncode(name)]);
		}
	}
	if (text === null) {
		text = name;
	}
	return text;
};
$asm06.System.SR.UriEncode = function (url) {
	if (url === null) {
		return null;
	}
	var array = System.Text.Encoding.UTF8.GetBytes$3(url);
	var num = 0;
	var num2 = 0;
	var num3 = array.length;
__loop0__: 
	for (var i = 0; i < num3; ++i) {
		var c = array[i];
		if (c === " ") {
			++num;
		} else if (!$asm06.System.SR.IsSafe(c)) {
			++num2;
		}
	}
	if (!((num === 0) && (num2 === 0))) {
		var array2 = JSIL.Array.New(System.Byte, (num3 + (num2 * 2)));
		var num4 = 0;
	__loop1__: 
		for (var j = 0; j < num3; ++j) {
			var b = array[j];
			var c2 = String.fromCharCode(b);
			if ($asm06.System.SR.IsSafe(c2)) {
				array2[num4++] = b;
			} else if (c2 === " ") {
				array2[num4++] = 43;
			} else {
				array2[num4++] = 37;
				array2[num4++] = ($asm06.System.SR.IntToHex(((b >> 4) & 15))).charCodeAt(0);
				array2[num4++] = ($asm06.System.SR.IntToHex((b & 15))).charCodeAt(0);
			}
		}
		array = array2;
	}
	return System.Text.Encoding.UTF8.GetString$1(array, 0, array.length);
};
$asm06.System.SR.IntToHex = function (n) {
	if (n <= 9) {
		return (n + 48);
	}
	return ((n - 10) + 97);
};
$asm06.System.SR.IsSafe = function (ch) {
	if (!(!((ch >= "a") && 
				(ch <= "z")) && 
			!((ch >= "A") && 
				(ch <= "Z")) && ((ch < "0") || 
				(ch > "9")))) {
		return true;
	}
	if (ch !== "!") {
		switch (ch) {
			case "'": 
			case "(": 
			case ")": 
			case "*": 
			case "-": 
			case ".": 
				return true;
			case "+": 
			case ",": 
				break;
			default: 
				if (ch === "_") {
					return true;
				}
				break;
		}
		return false;
	}
	return true;
};
JSIL.OverloadedMethod(System.SR, "GetString", [
		["GetString$0", [System.String, System.Array.Of(System.Object)]], 
		["GetString$1", [System.String, JSIL.Reference.Of(System.Boolean), System.Array.Of(System.Object)]], 
		["GetString$2", [System.String]], 
		["GetString$3", [System.String, JSIL.Reference.Of(System.Boolean)]]
	]);
JSIL.MakeProperty($asm06.System.SR, "InternalSyncObject", 
	$asm06.System.SR.get_InternalSyncObject, null);
JSIL.MakeProperty($asm06.System.SR, "Culture", 
	$asm06.System.SR.get_Culture, null);
Object.defineProperty($asm06.System.SR, "InvalidOperation_EnumOpCantHappen", {
		"value": "InvalidOperation_EnumOpCantHappen"}
);
Object.defineProperty($asm06.System.SR, "InvalidOperation_EnumFailedVersion", {
		"value": "InvalidOperation_EnumFailedVersion"}
);
$asm06.System.SR.loader = null;
$asm06.System.SR.prototype.resources = null;
$asm06.System.SR.prototype.debugResources = null;
$asm06.System.SR.prototype.fallbackResources = null;
$asm06.System.SR.s_InternalSyncObject = null;
System.SR._cctor = function () {
	System.SR.loader = null;
};

$asm06.System.Net.ScatterGatherBuffers.prototype._ctor$0 = function () {
	this.nextChunkLength = 1024;
	System.Object.prototype._ctor.call(this);
};
$asm06.System.Net.ScatterGatherBuffers.prototype._ctor$1 = function (totalSize) {
	this.nextChunkLength = 1024;
	System.Object.prototype._ctor.call(this);
	if (totalSize > 0) {
		this.currentChunk = this.AllocateMemoryChunk((totalSize > 2147483647) ? 2147483647 : totalSize);
	}
};
$asm06.System.Net.ScatterGatherBuffers.prototype.GetBuffers = function () {
	if (this.Empty) {
		return null;
	}
	var array = JSIL.Array.New($asm06.System.Net.BufferOffsetSize, this.chunkCount);
	var num = 0;
	var next = this.headChunk;
__loop0__: 
	while (next) {
		array[num] = JSIL.New($asm06.System.Net.BufferOffsetSize, "_ctor$0", [next.Buffer, 0, next.FreeOffset, false]);
		++num;
		next = next.Next;
	}
	return array;
};
$asm06.System.Net.ScatterGatherBuffers.prototype.get_Empty = function () {
	return ((this.headChunk === null) || (this.chunkCount === 0));
};
$asm06.System.Net.ScatterGatherBuffers.prototype.get_Length = function () {
	return this.totalLength;
};
$asm06.System.Net.ScatterGatherBuffers.prototype.Write = function (buffer, offset, count) {
__loop0__: 
	while (count > 0) {
		var num = this.Empty ? 0 : (this.currentChunk.Buffer.length - this.currentChunk.FreeOffset);
		if (num === 0) {
			var next = this.AllocateMemoryChunk(count);
			if (this.currentChunk !== null) {
				this.currentChunk.Next = next;
			}
			this.currentChunk = next;
		}
		var num2 = (count < num) ? count : num;
		System.Buffer.BlockCopy(
			buffer, 
			offset, 
			this.currentChunk.Buffer, 
			this.currentChunk.FreeOffset, 
			num2
		);
		offset += num2;
		count -= num2;
		this.totalLength += num2;
		this.currentChunk.FreeOffset += num2;
	}
};
$asm06.System.Net.ScatterGatherBuffers.prototype.AllocateMemoryChunk = function (newSize) {
	if (newSize > this.nextChunkLength) {
		this.nextChunkLength = newSize;
	}
	var result = new $asm06.System.Net.ScatterGatherBuffers.MemoryChunk(this.nextChunkLength);
	if (this.Empty) {
		this.headChunk = result;
	}
	this.nextChunkLength *= 2;
	++this.chunkCount;
	return result;
};
JSIL.OverloadedMethod($asm06.System.Net.ScatterGatherBuffers.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Int64]]
	]);
JSIL.MakeProperty($asm06.System.Net.ScatterGatherBuffers.prototype, "Empty", 
	$asm06.System.Net.ScatterGatherBuffers.prototype.get_Empty, null);
JSIL.MakeProperty($asm06.System.Net.ScatterGatherBuffers.prototype, "Length", 
	$asm06.System.Net.ScatterGatherBuffers.prototype.get_Length, null);
$asm06.System.Net.ScatterGatherBuffers.prototype.headChunk = null;
$asm06.System.Net.ScatterGatherBuffers.prototype.currentChunk = null;
$asm06.System.Net.ScatterGatherBuffers.prototype.nextChunkLength = 0;
$asm06.System.Net.ScatterGatherBuffers.prototype.totalLength = 0;
$asm06.System.Net.ScatterGatherBuffers.prototype.chunkCount = 0;

$asm06.System.Net.ScatterGatherBuffers.MemoryChunk.prototype._ctor = function (bufferSize) {
	System.Object.prototype._ctor.call(this);
	this.Buffer = JSIL.Array.New(System.Byte, bufferSize);
};
$asm06.System.Net.ScatterGatherBuffers.MemoryChunk.prototype.Buffer = null;
$asm06.System.Net.ScatterGatherBuffers.MemoryChunk.prototype.FreeOffset = 0;
$asm06.System.Net.ScatterGatherBuffers.MemoryChunk.prototype.Next = null;

$asm06.System.Net.BufferOffsetSize.prototype._ctor$0 = function (buffer, offset, size, copyBuffer) {
	System.Object.prototype._ctor.call(this);
	if (copyBuffer) {
		var array = JSIL.Array.New(System.Byte, size);
		System.Buffer.BlockCopy(
			buffer, 
			offset, 
			array, 
			0, 
			size
		);
		offset = 0;
		buffer = array;
	}
	this.Buffer = buffer;
	this.Offset = offset;
	this.Size = size;
};
$asm06.System.Net.BufferOffsetSize.prototype._ctor$1 = function (buffer, copyBuffer) {
	this._ctor$0(buffer, 0, buffer.length, copyBuffer);
};
JSIL.OverloadedMethod($asm06.System.Net.BufferOffsetSize.prototype, "_ctor", [
		["_ctor$0", [System.Array.Of(System.Byte), System.Int32, System.Int32, System.Boolean]], 
		["_ctor$1", [System.Array.Of(System.Byte), System.Boolean]]
	]);
$asm06.System.Net.BufferOffsetSize.prototype.Buffer = null;
$asm06.System.Net.BufferOffsetSize.prototype.Offset = 0;
$asm06.System.Net.BufferOffsetSize.prototype.Size = 0;

$asm06.System.Net.LazyAsyncResult.get_CurrentThreadContext = function () {
	var threadContext = $asm06.System.Net.LazyAsyncResult.t_ThreadContext;
	if (threadContext === null) {
		threadContext = new $asm06.System.Net.LazyAsyncResult.ThreadContext();
		$asm06.System.Net.LazyAsyncResult.t_ThreadContext = threadContext;
	}
	return threadContext;
};
$asm06.System.Net.LazyAsyncResult.prototype._ctor$0 = function (myObject, myState, myCallBack) {
	System.Object.prototype._ctor.call(this);
	this.m_AsyncObject = myObject;
	this.m_AsyncState = myState;
	this.m_AsyncCallback = myCallBack;
	this.m_Result = System.DBNull.Value;
};
$asm06.System.Net.LazyAsyncResult.prototype._ctor$1 = function (myObject, myState, myCallBack, result) {
	System.Object.prototype._ctor.call(this);
	this.m_AsyncObject = myObject;
	this.m_AsyncState = myState;
	this.m_AsyncCallback = myCallBack;
	this.m_Result = result;
	this.m_IntCompleted = 1;
	if (this.m_AsyncCallback !== null) {
		this.m_AsyncCallback(this);
	}
};
$asm06.System.Net.LazyAsyncResult.prototype.get_AsyncObject = function () {
	return this.m_AsyncObject;
};
$asm06.System.Net.LazyAsyncResult.prototype.get_AsyncState = function () {
	return this.m_AsyncState;
};
$asm06.System.Net.LazyAsyncResult.prototype.get_AsyncCallback = function () {
	return this.m_AsyncCallback;
};
$asm06.System.Net.LazyAsyncResult.prototype.set_AsyncCallback = function (value) {
	this.m_AsyncCallback = value;
};
$asm06.System.Net.LazyAsyncResult.prototype.get_AsyncWaitHandle = function () {
	this.m_UserEvent = true;
	if (this.m_IntCompleted === 0) {
		System.Threading.Interlocked.CompareExchange(/* ref */ new JSIL.MemberReference(this, "m_IntCompleted"), -2147483648, 0);
	}
	var event = new JSIL.Variable(this.m_Event);
__loop0__: 
	while (event.value === null) {
		this.LazilyCreateEvent(/* ref */ event);
	}
	return event.value;
};
$asm06.System.Net.LazyAsyncResult.prototype.LazilyCreateEvent = function (/* ref */ waitHandle) {
	waitHandle.value = new System.Threading.ManualResetEvent(false);
	try {
		if (System.Threading.Interlocked.CompareExchange$b1(System.Threading.ManualResetEvent)(/* ref */ new JSIL.MemberReference(this, "m_Event"), waitHandle.value, null) === null) {
			if (this.InternalPeekCompleted) {
				waitHandle.value.Set();
			}
			var result = true;
		} else {
			waitHandle.value.Close();
			waitHandle.value = this.m_Event;
			result = false;
		}
	} catch ($exception) {
		this.m_Event = null;
		if (waitHandle.value !== null) {
			waitHandle.value.Close();
		}
		throw $exception;
	}
	return result;
};
$asm06.System.Net.LazyAsyncResult.prototype.DebugProtectState = function (protect) {
};
$asm06.System.Net.LazyAsyncResult.prototype.get_CompletedSynchronously = function () {
	var num = this.m_IntCompleted;
	if (num === 0) {
		num = System.Threading.Interlocked.CompareExchange(/* ref */ new JSIL.MemberReference(this, "m_IntCompleted"), -2147483648, 0);
	}
	return (num > 0);
};
$asm06.System.Net.LazyAsyncResult.prototype.get_IsCompleted = function () {
	var num = this.m_IntCompleted;
	if (num === 0) {
		num = System.Threading.Interlocked.CompareExchange(/* ref */ new JSIL.MemberReference(this, "m_IntCompleted"), -2147483648, 0);
	}
	return ((num & 2147483647) !== 0);
};
$asm06.System.Net.LazyAsyncResult.prototype.get_InternalPeekCompleted = function () {
	return ((this.m_IntCompleted & 2147483647) !== 0);
};
$asm06.System.Net.LazyAsyncResult.prototype.get_Result = function () {
	if (this.m_Result !== System.DBNull.Value) {
		return this.m_Result;
	}
	return null;
};
$asm06.System.Net.LazyAsyncResult.prototype.set_Result = function (value) {
	this.m_Result = value;
};
$asm06.System.Net.LazyAsyncResult.prototype.get_EndCalled = function () {
	return this.m_EndCalled;
};
$asm06.System.Net.LazyAsyncResult.prototype.set_EndCalled = function (value) {
	this.m_EndCalled = value;
};
$asm06.System.Net.LazyAsyncResult.prototype.get_ErrorCode = function () {
	return this.m_ErrorCode;
};
$asm06.System.Net.LazyAsyncResult.prototype.set_ErrorCode = function (value) {
	this.m_ErrorCode = value;
};
$asm06.System.Net.LazyAsyncResult.prototype.ProtectedInvokeCallback = function (result, userToken) {
	if (result === System.DBNull.Value) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["result"]);
	}
	if (!((this.m_IntCompleted & 2147483647) || ((System.Threading.Interlocked.Increment$0(/* ref */ new JSIL.MemberReference(this, "m_IntCompleted")) & 2147483647) !== 1))) {
		if (this.m_Result === System.DBNull.Value) {
			this.m_Result = result;
		}
		var event = this.m_Event;
		if (event !== null) {
			event.Set();
		}
		this.Complete(userToken);
	}
};
$asm06.System.Net.LazyAsyncResult.prototype.InvokeCallback$0 = function (result) {
	this.ProtectedInvokeCallback(result, System.IntPtr.Zero);
};
$asm06.System.Net.LazyAsyncResult.prototype.InvokeCallback$1 = function () {
	this.ProtectedInvokeCallback(null, System.IntPtr.Zero);
};
$asm06.System.Net.LazyAsyncResult.prototype.Complete = function (userToken) {
	var flag = false;
	var currentThreadContext = $asm06.System.Net.LazyAsyncResult.CurrentThreadContext;
	try {
		currentThreadContext.m_NestedIOCount += 1;
		if (this.m_AsyncCallback !== null) {
			if (currentThreadContext.m_NestedIOCount >= 50) {
				System.Threading.ThreadPool.QueueUserWorkItem$1(JSIL.Delegate.New("System.Threading.WaitCallback", this, $asm06.System.Net.LazyAsyncResult.prototype.WorkerThreadComplete));
				flag = true;
			} else {
				this.m_AsyncCallback(this);
			}
		}
	} finally {
		currentThreadContext.m_NestedIOCount -= 1;
		if (!flag) {
			this.Cleanup();
		}
	}
};
$asm06.System.Net.LazyAsyncResult.prototype.WorkerThreadComplete = function (state) {
	try {
		this.m_AsyncCallback(this);
	} finally {
		this.Cleanup();
	}
};
$asm06.System.Net.LazyAsyncResult.prototype.Cleanup = function () {
};
$asm06.System.Net.LazyAsyncResult.prototype.InternalWaitForCompletion = function () {
	return this.WaitForCompletion(true);
};
$asm06.System.Net.LazyAsyncResult.prototype.WaitForCompletion = function (snap) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				var manualResetEvent = new JSIL.Variable(null);
				var flag = false;
				if (!snap ? this.IsCompleted : this.InternalPeekCompleted) {
					manualResetEvent.value = this.m_Event;
					if (manualResetEvent.value === null) {
						flag = this.LazilyCreateEvent(/* ref */ manualResetEvent);
					}
				}
				if (manualResetEvent.value === null) {
					__label0__ = "IL_6C";
					continue __step0__;
				}
				try {
					try {
						manualResetEvent.value.WaitOne$3(-1);
					} catch ($exception) {
						if (JSIL.CheckType($exception, System.ObjectDisposedException)) {
						} else {
							throw $exception;
						}
					}
					__label0__ = "IL_6C";
					continue __step0__;
				} finally {
					if (!(!flag || this.m_UserEvent)) {
						this.m_Event = null;
						if (!this.m_UserEvent) {
							this.m_Event.Close();
						}
					}
				}
				__label0__ = "IL_66";
				continue __step0__;
				break;
			case "IL_66":
				System.Threading.Thread.SpinWait(1);
				__label0__ = "IL_6C";
				continue __step0__;
				break;
			case "IL_6C":
				if (this.m_Result !== System.DBNull.Value) {
					return this.m_Result;
				}
				__label0__ = "IL_66";
				continue __step0__;
				break __step0__;
		}
	}
};
$asm06.System.Net.LazyAsyncResult.prototype.InternalCleanup = function () {
	if (!((this.m_IntCompleted & 2147483647) || ((System.Threading.Interlocked.Increment$0(/* ref */ new JSIL.MemberReference(this, "m_IntCompleted")) & 2147483647) !== 1))) {
		this.m_Result = null;
		this.Cleanup();
	}
};
JSIL.OverloadedMethod($asm06.System.Net.LazyAsyncResult.prototype, "_ctor", [
		["_ctor$0", [System.Object, System.Object, System.AsyncCallback]], 
		["_ctor$1", [System.Object, System.Object, System.AsyncCallback, System.Object]]
	]);
JSIL.OverloadedMethod($asm06.System.Net.LazyAsyncResult.prototype, "InvokeCallback", [
		["InvokeCallback$0", [System.Object]], 
		["InvokeCallback$1", []]
	]);
JSIL.MakeProperty($asm06.System.Net.LazyAsyncResult, "CurrentThreadContext", 
	$asm06.System.Net.LazyAsyncResult.get_CurrentThreadContext, null);
JSIL.MakeProperty($asm06.System.Net.LazyAsyncResult.prototype, "AsyncObject", 
	$asm06.System.Net.LazyAsyncResult.prototype.get_AsyncObject, null);
JSIL.MakeProperty($asm06.System.Net.LazyAsyncResult.prototype, "AsyncState", 
	$asm06.System.Net.LazyAsyncResult.prototype.get_AsyncState, null);
JSIL.MakeProperty($asm06.System.Net.LazyAsyncResult.prototype, "AsyncCallback", 
	$asm06.System.Net.LazyAsyncResult.prototype.get_AsyncCallback, $asm06.System.Net.LazyAsyncResult.prototype.set_AsyncCallback);
JSIL.MakeProperty($asm06.System.Net.LazyAsyncResult.prototype, "AsyncWaitHandle", 
	$asm06.System.Net.LazyAsyncResult.prototype.get_AsyncWaitHandle, null);
JSIL.MakeProperty($asm06.System.Net.LazyAsyncResult.prototype, "CompletedSynchronously", 
	$asm06.System.Net.LazyAsyncResult.prototype.get_CompletedSynchronously, null);
JSIL.MakeProperty($asm06.System.Net.LazyAsyncResult.prototype, "IsCompleted", 
	$asm06.System.Net.LazyAsyncResult.prototype.get_IsCompleted, null);
JSIL.MakeProperty($asm06.System.Net.LazyAsyncResult.prototype, "InternalPeekCompleted", 
	$asm06.System.Net.LazyAsyncResult.prototype.get_InternalPeekCompleted, null);
JSIL.MakeProperty($asm06.System.Net.LazyAsyncResult.prototype, "Result", 
	$asm06.System.Net.LazyAsyncResult.prototype.get_Result, $asm06.System.Net.LazyAsyncResult.prototype.set_Result);
JSIL.MakeProperty($asm06.System.Net.LazyAsyncResult.prototype, "EndCalled", 
	$asm06.System.Net.LazyAsyncResult.prototype.get_EndCalled, $asm06.System.Net.LazyAsyncResult.prototype.set_EndCalled);
JSIL.MakeProperty($asm06.System.Net.LazyAsyncResult.prototype, "ErrorCode", 
	$asm06.System.Net.LazyAsyncResult.prototype.get_ErrorCode, $asm06.System.Net.LazyAsyncResult.prototype.set_ErrorCode);
Object.defineProperty($asm06.System.Net.LazyAsyncResult, "c_HighBit", {
		"value": -2147483648}
);
Object.defineProperty($asm06.System.Net.LazyAsyncResult, "c_ForceAsyncCount", {
		"value": 50}
);
$asm06.System.Net.LazyAsyncResult.t_ThreadContext = null;
$asm06.System.Net.LazyAsyncResult.prototype.m_AsyncObject = null;
$asm06.System.Net.LazyAsyncResult.prototype.m_AsyncState = null;
$asm06.System.Net.LazyAsyncResult.prototype.m_AsyncCallback = null;
$asm06.System.Net.LazyAsyncResult.prototype.m_Result = null;
$asm06.System.Net.LazyAsyncResult.prototype.m_ErrorCode = 0;
$asm06.System.Net.LazyAsyncResult.prototype.m_IntCompleted = 0;
$asm06.System.Net.LazyAsyncResult.prototype.m_EndCalled = false;
$asm06.System.Net.LazyAsyncResult.prototype.m_UserEvent = false;
$asm06.System.Net.LazyAsyncResult.prototype.m_Event = null;

$asm06.System.Net.LazyAsyncResult.ThreadContext.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm06.System.Net.LazyAsyncResult.ThreadContext.prototype.m_NestedIOCount = 0;

$asm06.System.Net.WebClientAsyncContext.prototype.get_AsyncOperation = function () {
	return this.AsyncOperation$value;
};
$asm06.System.Net.WebClientAsyncContext.prototype.set_AsyncOperation = function (value) {
	this.AsyncOperation$value = value;
};
$asm06.System.Net.WebClientAsyncContext.prototype.get_Request = function () {
	return this.Request$value;
};
$asm06.System.Net.WebClientAsyncContext.prototype.set_Request = function (value) {
	this.Request$value = value;
};
$asm06.System.Net.WebClientAsyncContext.prototype._ctor = function (asyncOp, request) {
	System.Object.prototype._ctor.call(this);
	this.AsyncOperation = asyncOp;
	this.Request = request;
};
JSIL.MakeProperty($asm06.System.Net.WebClientAsyncContext.prototype, "AsyncOperation", 
	$asm06.System.Net.WebClientAsyncContext.prototype.get_AsyncOperation, $asm06.System.Net.WebClientAsyncContext.prototype.set_AsyncOperation);
JSIL.MakeProperty($asm06.System.Net.WebClientAsyncContext.prototype, "Request", 
	$asm06.System.Net.WebClientAsyncContext.prototype.get_Request, $asm06.System.Net.WebClientAsyncContext.prototype.set_Request);
$asm06.System.Net.WebClientAsyncContext.prototype.AsyncOperation$value = null;
$asm06.System.Net.WebClientAsyncContext.prototype.Request$value = null;

System.Net.WebClient.prototype._ctor = function () {
	this.m_Encoding = System.Net.WebClient.GetDefaultEncoding();
	this.m_ContentLength = -1;
	this.m_AllowReadStreamBuffering = true;
	this.m_AllowWriteStreamBuffering = true;
	this.m_useDefaultCredentials = true;
	System.Object.prototype._ctor.call(this);
	if (!System.String.IsNullOrEmpty($asm06.System.Net.NetworkSecurityOptions.ApplicationOrigin)) {
		this.BaseAddress = $asm06.System.Net.NetworkSecurityOptions.ApplicationOrigin;
	}
};
System.Net.WebClient.prototype.InitWebClientAsync = function () {
	if (!this.m_InitWebClientAsync) {
		this.openReadOperationCompleted = JSIL.Delegate.New("System.Threading.SendOrPostCallback", this, System.Net.WebClient.prototype.OpenReadOperationCompleted);
		this.openWriteOperationCompleted = JSIL.Delegate.New("System.Threading.SendOrPostCallback", this, System.Net.WebClient.prototype.OpenWriteOperationCompleted);
		this.writeStreamClosedOperationCompleted = JSIL.Delegate.New("System.Threading.SendOrPostCallback", this, System.Net.WebClient.prototype.WriteStreamClosedOperationCompleted);
		this.downloadStringOperationCompleted = JSIL.Delegate.New("System.Threading.SendOrPostCallback", this, System.Net.WebClient.prototype.DownloadStringOperationCompleted);
		this.uploadStringOperationCompleted = JSIL.Delegate.New("System.Threading.SendOrPostCallback", this, System.Net.WebClient.prototype.UploadStringOperationCompleted);
		this.reportDownloadProgressChanged = JSIL.Delegate.New("System.Threading.SendOrPostCallback", this, System.Net.WebClient.prototype.ReportDownloadProgressChanged);
		this.reportUploadProgressChanged = JSIL.Delegate.New("System.Threading.SendOrPostCallback", this, System.Net.WebClient.prototype.ReportUploadProgressChanged);
		this.m_Progress = new $asm06.System.Net.WebClient.ProgressData();
		this.m_InitWebClientAsync = true;
	}
};
System.Net.WebClient.prototype.ClearWebClientState = function () {
	if (this.AnotherCallInProgress(System.Threading.Interlocked.Increment$0(/* ref */ new JSIL.MemberReference(this, "m_CallNesting")))) {
		this.CompleteWebClientState();
		throw JSIL.New(System.NotSupportedException, "_ctor$1", [$asm06.System.SR.GetString$2("net_webclient_no_concurrent_io_allowed")]);
	}
	this.m_ContentLength = -1;
	this.m_WebResponse = null;
	this.m_WebRequest = null;
	this.m_Method = null;
	this.m_Cancelled = false;
	if (this.m_Progress !== null) {
		this.m_Progress.Reset();
	}
};
System.Net.WebClient.prototype.CompleteWebClientState = function () {
	System.Threading.Interlocked.Decrement$0(/* ref */ new JSIL.MemberReference(this, "m_CallNesting"));
};
System.Net.WebClient.prototype.get_Encoding = function () {
	return this.m_Encoding;
};
System.Net.WebClient.prototype.set_Encoding = function (value) {
	if (value === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["Encoding"]);
	}
	this.m_Encoding = value;
};
System.Net.WebClient.prototype.get_AllowReadStreamBuffering = function () {
	return this.m_AllowReadStreamBuffering;
};
System.Net.WebClient.prototype.set_AllowReadStreamBuffering = function (value) {
	this.m_AllowReadStreamBuffering = value;
};
System.Net.WebClient.prototype.get_AllowWriteStreamBuffering = function () {
	return this.m_AllowWriteStreamBuffering;
};
System.Net.WebClient.prototype.set_AllowWriteStreamBuffering = function (value) {
	this.m_AllowWriteStreamBuffering = value;
	this.m_UserSetAllowWriteStreamBuffering = true;
};
System.Net.WebClient.prototype.get_UseDefaultCredentials = function () {
	return this.m_useDefaultCredentials;
};
System.Net.WebClient.prototype.set_UseDefaultCredentials = function (value) {
	this.m_useDefaultCredentials = value;
	this.m_userSetUseDefaultCredentials = true;
};
System.Net.WebClient.prototype.get_BaseAddress = function () {
	if (!System.Uri.op_Equality(this.m_baseAddress, null)) {
		return this.m_baseAddress.toString();
	}
	return System.String.Empty;
};
System.Net.WebClient.prototype.set_BaseAddress = function (value) {
	if (!((value !== null) && (value.length !== 0))) {
		this.m_baseAddress = null;
		return;
	}
	try {
		this.m_baseAddress = JSIL.New(System.Uri, "_ctor$0", [value]);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.UriFormatException)) {
			var arg_21_0 = $exception;
			throw JSIL.New(System.ArgumentException, "_ctor$2", [$asm06.System.SR.GetString$2("net_webclient_invalid_baseaddress"), arg_21_0]);
		} else {
			throw $exception;
		}
	}
};
System.Net.WebClient.prototype.get_Headers = function () {
	if (this.m_headers === null) {
		this.m_headers = JSIL.New(System.Net.WebHeaderCollection, "_ctor$1", [System.Net.WebHeaderCollectionType.WebRequest]);
	}
	return this.m_headers;
};
System.Net.WebClient.prototype.set_Headers = function (value) {
	this.m_headers = value;
};
System.Net.WebClient.prototype.get_IsBusy = function () {
	return (this.m_AsyncOp !== null);
};
System.Net.WebClient.prototype.GetWebRequest = function (address) {
	var webRequest = System.Net.WebRequest.Create$0(address);
	this.CopyHeadersTo(webRequest);
	var httpWebRequest = JSIL.TryCast(webRequest, System.Net.HttpWebRequest);
	if (httpWebRequest !== null) {
		httpWebRequest.AllowReadStreamBuffering = this.m_AllowReadStreamBuffering;
		if (this.m_userSetUseDefaultCredentials) {
			httpWebRequest.UseDefaultCredentials = this.m_useDefaultCredentials;
		}
		if (this.m_UserSetAllowWriteStreamBuffering) {
			httpWebRequest.AllowWriteStreamBuffering = this.m_AllowWriteStreamBuffering;
		}
	}
	if (this.m_AllowReadStreamBuffering) {
		var networkProgress = JSIL.TryCast(webRequest, $asm06.System.Net.INetworkProgress);
		if (networkProgress !== null) {
			networkProgress.INetworkProgress_add_ProgressChanged(JSIL.Delegate.New("System.EventHandler`1[System.Net.NetworkProgressChangedEventArgs]", this, System.Net.WebClient.prototype.WebRequestDownloadProgressChanged));
			networkProgress.INetworkProgress_add_ProgressCompleted(JSIL.Delegate.New("System.EventHandler`1[System.Net.NetworkProgressChangedEventArgs]", this, System.Net.WebClient.prototype.WebRequestDownloadProgressCompleted));
			networkProgress.INetworkProgress_add_ProgressFailed(JSIL.Delegate.New("System.EventHandler`1[System.Net.NetworkProgressChangedEventArgs]", this, System.Net.WebClient.prototype.WebRequestDownloadProgressFailed));
		}
	}
	if (this.Credentials !== null) {
		webRequest.Credentials = this.Credentials;
	}
	if (this.m_Method !== null) {
		webRequest.Method = this.m_Method;
	}
	if (this.m_ContentLength !== -1) {
		webRequest.ContentLength = this.m_ContentLength;
	}
	return webRequest;
};
System.Net.WebClient.prototype.GetWebResponse = function (request, result) {
	var webResponse = request.EndGetResponse(result);
	this.m_WebResponse = webResponse;
	return webResponse;
};
System.Net.WebClient.AbortRequest = function (request) {
	try {
		if (request !== null) {
			request.Abort();
		}
	} catch ($exception) {
		var exception = $exception;
		if (!((JSIL.TryCast(exception, System.OutOfMemoryException) === null) && 
				(JSIL.TryCast(exception, System.StackOverflowException) === null) && (JSIL.TryCast(exception, System.Threading.ThreadAbortException) === null))) {
			throw $exception;
		}
	}
};
System.Net.WebClient.prototype.CopyHeadersTo = function (request) {
	var httpWebRequest = JSIL.TryCast(request, System.Net.HttpWebRequest);
	if (!((this.m_headers === null) || (httpWebRequest === null))) {
		var text = this.m_headers.get_Item$0("Accept");
		var text2 = this.m_headers.get_Item$0("Content-Type");
		var text3 = this.m_headers.get_Item$0("Content-Length");
		$asm06.System.Net.WebClientExtensions.RemoveInternal(this.m_headers, "Accept");
		$asm06.System.Net.WebClientExtensions.RemoveInternal(this.m_headers, "Content-Type");
		$asm06.System.Net.WebClientExtensions.RemoveInternal(this.m_headers, "Content-Length");
		request.Headers = this.m_headers;
		if (!((text2 === null) || (text2.length <= 0))) {
			httpWebRequest.ContentType = text2;
		}
		if (!((text === null) || (text.length <= 0))) {
			httpWebRequest.Accept = text;
		}
		if (!System.String.IsNullOrEmpty(text3)) {
			httpWebRequest.ContentLength = System.Int64.Parse(text3);
		}
	}
};
System.Net.WebClient.prototype.GetUri = function (address) {
	if (System.Uri.op_Equality(address, null)) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["address"]);
	}
	var result = new JSIL.Variable(address);
	if (!(address.IsAbsoluteUri || 
			!System.Uri.op_Inequality(this.m_baseAddress, null) || System.Uri.TryCreate$2(this.m_baseAddress, address, /* ref */ result))) {
		return address;
	}
	return result.value;
};
System.Net.WebClient.DownloadBitsResponseCallback = function (result) {
	var downloadBitsState = JSIL.Cast(result.IAsyncResult_AsyncState, $asm06.System.Net.WebClient.DownloadBitsState);
	var request = downloadBitsState.Request;
	var exception = null;
	try {
		try {
			var webResponse = downloadBitsState.WebClient.GetWebResponse(request, result);
			downloadBitsState.WebClient.m_WebResponse = webResponse;
			downloadBitsState.SetResponse(webResponse);
		} catch ($exception) {
			var exception2 = $exception;
			if (!((JSIL.TryCast(exception2, System.Threading.ThreadAbortException) === null) && 
					(JSIL.TryCast(exception2, System.StackOverflowException) === null) && (JSIL.TryCast(exception2, System.OutOfMemoryException) === null))) {
				throw $exception;
			}
			exception = exception2;
			if (!(JSIL.TryCast(exception2, System.Net.WebException) || JSIL.TryCast(exception2, System.Security.SecurityException))) {
				exception = JSIL.New(System.Net.WebException, "_ctor$2", [$asm06.System.SR.GetString$2("net_webclient"), exception2]);
			}
			System.Net.WebClient.AbortRequest(request);
			if (!((downloadBitsState === null) || (downloadBitsState.WriteStream === null))) {
				downloadBitsState.WriteStream.Close();
			}
		}
	} finally {
		if (exception !== null) {
			downloadBitsState.CompletionDelegate(null, exception, downloadBitsState.AsyncOp);
		}
	}
};
System.Net.WebClient.DownloadBitsReadCallback = function (result) {
	var state = JSIL.Cast(result.IAsyncResult_AsyncState, $asm06.System.Net.WebClient.DownloadBitsState);
	System.Net.WebClient.DownloadBitsReadCallbackState(state, result);
};
System.Net.WebClient.DownloadBitsReadCallbackState = function (state, result) {
	var readStream = state.ReadStream;
	var exception = null;
	var flag = false;
	try {
		try {
			var num = new JSIL.Variable(0);
			if (!((readStream === null) || (readStream === System.IO.Stream.Null))) {
				num.value = readStream.EndRead(result);
			}
			flag = state.RetrieveBytes(/* ref */ num);
		} catch ($exception) {
			var exception2 = $exception;
			flag = true;
			if (!((JSIL.TryCast(exception2, System.Threading.ThreadAbortException) === null) && 
					(JSIL.TryCast(exception2, System.StackOverflowException) === null) && (JSIL.TryCast(exception2, System.OutOfMemoryException) === null))) {
				throw $exception;
			}
			exception = exception2;
			state.InnerBuffer = null;
			if (!(JSIL.TryCast(exception2, System.Net.WebException) || JSIL.TryCast(exception2, System.Security.SecurityException))) {
				exception = JSIL.New(System.Net.WebException, "_ctor$2", [$asm06.System.SR.GetString$2("net_webclient"), exception2]);
			}
			System.Net.WebClient.AbortRequest(state.Request);
			if (!((state === null) || (state.WriteStream === null))) {
				state.WriteStream.Close();
			}
		}
	} finally {
		if (flag) {
			if (exception === null) {
				state.Close();
			}
			state.CompletionDelegate(state.InnerBuffer, exception, state.AsyncOp);
		}
	}
};
System.Net.WebClient.prototype.DownloadBits = function (request, writeStream, completionDelegate, asyncOp) {
	var state = new $asm06.System.Net.WebClient.DownloadBitsState(request, writeStream, completionDelegate, asyncOp, this.m_Progress, this);
	request.BeginGetResponse(JSIL.Delegate.New("System.AsyncCallback", null, System.Net.WebClient.DownloadBitsResponseCallback), state);
	return null;
};
System.Net.WebClient.UploadBitsRequestCallback = function (result) {
	var uploadBitsState = JSIL.Cast(result.IAsyncResult_AsyncState, $asm06.System.Net.WebClient.UploadBitsState);
	var request = uploadBitsState.Request;
	var exception = null;
	try {
		try {
			var requestStream = request.EndGetRequestStream(result);
			uploadBitsState.SetRequestStream(requestStream);
		} catch ($exception) {
			var exception2 = $exception;
			if (!((JSIL.TryCast(exception2, System.Threading.ThreadAbortException) === null) && 
					(JSIL.TryCast(exception2, System.StackOverflowException) === null) && (JSIL.TryCast(exception2, System.OutOfMemoryException) === null))) {
				throw $exception;
			}
			exception = exception2;
			if (!(JSIL.TryCast(exception2, System.Net.WebException) || JSIL.TryCast(exception2, System.Security.SecurityException))) {
				exception = JSIL.New(System.Net.WebException, "_ctor$2", [$asm06.System.SR.GetString$2("net_webclient"), exception2]);
			}
			System.Net.WebClient.AbortRequest(request);
			if (!((uploadBitsState === null) || (uploadBitsState.ReadStream === null))) {
				uploadBitsState.ReadStream.Close();
			}
		}
	} finally {
		if (exception !== null) {
			uploadBitsState.CompletionDelegate(null, exception, uploadBitsState.AsyncOp);
		}
	}
};
System.Net.WebClient.UploadBitsWriteCallback = function (result) {
	var uploadBitsState = JSIL.Cast(result.IAsyncResult_AsyncState, $asm06.System.Net.WebClient.UploadBitsState);
	var exception = null;
	var flag = false;
	try {
		try {
			uploadBitsState.WriteStream.EndWrite(result);
			flag = uploadBitsState.WriteBytes();
		} catch ($exception) {
			var exception2 = $exception;
			flag = true;
			if (!((JSIL.TryCast(exception2, System.Threading.ThreadAbortException) === null) && 
					(JSIL.TryCast(exception2, System.StackOverflowException) === null) && (JSIL.TryCast(exception2, System.OutOfMemoryException) === null))) {
				throw $exception;
			}
			exception = exception2;
			if (!(JSIL.TryCast(exception2, System.Net.WebException) || JSIL.TryCast(exception2, System.Security.SecurityException))) {
				exception = JSIL.New(System.Net.WebException, "_ctor$2", [$asm06.System.SR.GetString$2("net_webclient"), exception2]);
			}
			System.Net.WebClient.AbortRequest(uploadBitsState.Request);
			if (!((uploadBitsState === null) || (uploadBitsState.ReadStream === null))) {
				uploadBitsState.ReadStream.Close();
			}
		}
	} finally {
		if (flag) {
			if (exception === null) {
				uploadBitsState.Close();
			}
			uploadBitsState.CompletionDelegate(null, exception, uploadBitsState.AsyncOp);
		}
	}
};
System.Net.WebClient.prototype.UploadBits = function (request, readStream, buffer, header, footer, completionDelegate, asyncOp) {
	if (request.RequestUri.Scheme == System.Uri.UriSchemeFile) {
		footer = (header = null);
	}
	var state = new $asm06.System.Net.WebClient.UploadBitsState(request, readStream, buffer, header, footer, completionDelegate, asyncOp, this.m_Progress, this);
	request.BeginGetRequestStream(JSIL.Delegate.New("System.AsyncCallback", null, System.Net.WebClient.UploadBitsRequestCallback), state);
};
System.Net.WebClient.prototype.ByteArrayHasPrefix = function (prefix, byteArray) {
	if (!((prefix !== null) && 
			(byteArray !== null) && (prefix.length <= byteArray.length))) {
		return false;
	}
__loop0__: 
	for (var i = 0; i < prefix.length; ++i) {
		if (prefix[i] !== byteArray[i]) {
			return false;
		}
	}
	return true;
};
System.Net.WebClient.prototype.GetStringUsingEncoding = function (request, data) {
	var encoding = null;
	var num = -1;
	try {
		var text = request.ContentType;
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.NotImplementedException)) {
			text = null;
		} else if (JSIL.CheckType($exception, System.NotSupportedException)) {
			text = null;
		} else {
			throw $exception;
		}
	}
	if (text !== null) {
		text = text.ToLower$1(System.Globalization.CultureInfo.InvariantCulture);
		var array = text.Split(JSIL.Array.New(System.Char, [";", "=", " "]));
		var flag = false;
		var array2 = array;
	__loop0__: 
		for (var i = 0; i < array2.length; ++i) {
			var text2 = array2[i];
			if (text2 == "charset") {
				flag = true;
			} else if (flag) {
				try {
					encoding = System.Text.Encoding.GetEncoding$1(text2);
				} catch ($exception) {
					if (JSIL.CheckType($exception, System.ArgumentException)) {
						break __loop0__;
					} else {
						throw $exception;
					}
				}
			}
		}
	}
	if (encoding === null) {
		var array3 = JSIL.Array.New(System.Text.Encoding, [System.Text.Encoding.UTF8, System.Text.Encoding.Unicode, System.Text.Encoding.BigEndianUnicode]);
	__loop1__: 
		for (var j = 0; j < array3.length; ++j) {
			var preamble = array3[j].GetPreamble();
			if (this.ByteArrayHasPrefix(preamble, data)) {
				encoding = array3[j];
				num = preamble.length;
				break __loop1__;
			}
		}
	}
	if (encoding === null) {
		encoding = this.Encoding;
	}
	if (num === -1) {
		var preamble2 = encoding.GetPreamble();
		if (this.ByteArrayHasPrefix(preamble2, data)) {
			num = preamble2.length;
		} else {
			num = 0;
		}
	}
	return encoding.GetString$1(data, num, (data.length - num));
};
System.Net.WebClient.prototype.MapToDefaultMethod = function (address) {
	if (!(address.IsAbsoluteUri || !System.Uri.op_Inequality(this.m_baseAddress, null))) {
		var uri = JSIL.New(System.Uri, "_ctor$3", [this.m_baseAddress, address]);
	} else {
		uri = address;
	}
	if (uri.Scheme.ToLower$1(System.Globalization.CultureInfo.InvariantCulture) == "ftp") {
		return "STOR";
	}
	return "POST";
};
System.Net.WebClient.prototype.InvokeOperationCompleted = function (asyncOp, callback, eventArgs) {
	if (System.Threading.Interlocked.CompareExchange$b1(System.ComponentModel.AsyncOperation)(/* ref */ new JSIL.MemberReference(this, "m_AsyncOp"), null, asyncOp) === asyncOp) {
		this.CompleteWebClientState();
		asyncOp.PostOperationCompleted(callback, eventArgs);
	}
};
System.Net.WebClient.prototype.AnotherCallInProgress = function (callNesting) {
	return (callNesting > 1);
};
System.Net.WebClient.prototype.add_OpenReadCompleted = function (value) {
	this.OpenReadCompleted = System.Delegate.Combine(this.OpenReadCompleted, value);
};
System.Net.WebClient.prototype.remove_OpenReadCompleted = function (value) {
	this.OpenReadCompleted = System.Delegate.Remove(this.OpenReadCompleted, value);
};
System.Net.WebClient.prototype.OnOpenReadCompleted = function (e) {
	if (this.OpenReadCompleted !== null) {
		this.OpenReadCompleted(this, e);
	}
};
System.Net.WebClient.prototype.OpenReadOperationCompleted = function (arg) {
	this.OnOpenReadCompleted(JSIL.Cast(arg, System.Net.OpenReadCompletedEventArgs));
};
System.Net.WebClient.prototype.OpenReadAsyncCallback = function (result) {
	var webClientAsyncContext = JSIL.Cast(result.IAsyncResult_AsyncState, $asm06.System.Net.WebClientAsyncContext);
	var asyncOperation = webClientAsyncContext.AsyncOperation;
	var request = webClientAsyncContext.Request;
	var result2 = null;
	var exception = null;
	try {
		var webResponse = (this.m_WebResponse = this.GetWebResponse(request, result));
		result2 = webResponse.GetResponseStream();
	} catch ($exception) {
		var exception2 = $exception;
		if (!((JSIL.TryCast(exception2, System.Threading.ThreadAbortException) === null) && 
				(JSIL.TryCast(exception2, System.StackOverflowException) === null) && (JSIL.TryCast(exception2, System.OutOfMemoryException) === null))) {
			throw $exception;
		}
		exception = exception2;
		if (!(JSIL.TryCast(exception2, System.Net.WebException) || JSIL.TryCast(exception2, System.Security.SecurityException))) {
			exception = JSIL.New(System.Net.WebException, "_ctor$2", [$asm06.System.SR.GetString$2("net_webclient"), exception2]);
		}
	}
	if (!(exception || 
			(this.m_ContentLength !== -1) || 
			(this.DownloadProgressChanged === null) || 
			this.m_Cancelled || !this.AllowReadStreamBuffering)) {
		asyncOperation.Post(this.reportDownloadProgressChanged, new System.Net.DownloadProgressChangedEventArgs(100, asyncOperation.UserSuppliedState, this.m_Progress.BytesReceived, this.m_Progress.BytesReceived));
	}
	var eventArgs = new System.Net.OpenReadCompletedEventArgs(result2, exception, this.m_Cancelled, asyncOperation.UserSuppliedState);
	this.InvokeOperationCompleted(asyncOperation, this.openReadOperationCompleted, eventArgs);
};
System.Net.WebClient.prototype.OpenReadAsync$0 = function (address) {
	this.OpenReadAsync$1(address, null);
};
System.Net.WebClient.prototype.OpenReadAsync$1 = function (address, userToken) {
	if ($asm06.System.Net.Logging.On) {
		$asm06.System.Net.Logging.Enter$1($asm06.System.Net.Logging.Web, this, "OpenReadAsync", address);
	}
	if (System.Uri.op_Equality(address, null)) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["address"]);
	}
	this.InitWebClientAsync();
	this.ClearWebClientState();
	var asyncOperation = System.ComponentModel.AsyncOperationManager.CreateOperation(userToken);
	this.m_AsyncOp = asyncOperation;
	try {
		var uri = this.GetUri(address);
		var webRequest = (this.m_WebRequest = this.GetWebRequest(uri));
		webRequest.BeginGetResponse(JSIL.Delegate.New("System.AsyncCallback", this, System.Net.WebClient.prototype.OpenReadAsyncCallback), new $asm06.System.Net.WebClientAsyncContext(asyncOperation, webRequest));
	} catch ($exception) {
		var exception = $exception;
		if (!((JSIL.TryCast(exception, System.Threading.ThreadAbortException) === null) && 
				(JSIL.TryCast(exception, System.StackOverflowException) === null) && (JSIL.TryCast(exception, System.OutOfMemoryException) === null))) {
			throw $exception;
		}
		if (!(JSIL.TryCast(exception, System.Net.WebException) || JSIL.TryCast(exception, System.Security.SecurityException))) {
			exception = JSIL.New(System.Net.WebException, "_ctor$2", [$asm06.System.SR.GetString$2("net_webclient"), exception]);
		}
		var eventArgs = new System.Net.OpenReadCompletedEventArgs(null, exception, this.m_Cancelled, asyncOperation.UserSuppliedState);
		this.InvokeOperationCompleted(asyncOperation, this.openReadOperationCompleted, eventArgs);
	}
	if ($asm06.System.Net.Logging.On) {
		$asm06.System.Net.Logging.Exit$2($asm06.System.Net.Logging.Web, this, "OpenReadAsync", null);
	}
};
System.Net.WebClient.prototype.add_OpenWriteCompleted = function (value) {
	this.OpenWriteCompleted = System.Delegate.Combine(this.OpenWriteCompleted, value);
};
System.Net.WebClient.prototype.remove_OpenWriteCompleted = function (value) {
	this.OpenWriteCompleted = System.Delegate.Remove(this.OpenWriteCompleted, value);
};
System.Net.WebClient.prototype.OnOpenWriteCompleted = function (e) {
	if (this.OpenWriteCompleted !== null) {
		this.OpenWriteCompleted(this, e);
	}
};
System.Net.WebClient.prototype.OpenWriteOperationCompleted = function (arg) {
	this.OnOpenWriteCompleted(JSIL.Cast(arg, System.Net.OpenWriteCompletedEventArgs));
};
System.Net.WebClient.prototype.OpenWriteAsyncCallback = function (result) {
	var webClientAsyncContext = JSIL.Cast(result.IAsyncResult_AsyncState, $asm06.System.Net.WebClientAsyncContext);
	var asyncOperation = webClientAsyncContext.AsyncOperation;
	var request = webClientAsyncContext.Request;
	var result2 = null;
	var exception = null;
	try {
		result2 = new $asm06.System.Net.WebClient.WebClientWriteStream(request.EndGetRequestStream(result), request, this);
	} catch ($exception) {
		var exception2 = $exception;
		if (!((JSIL.TryCast(exception2, System.Threading.ThreadAbortException) === null) && 
				(JSIL.TryCast(exception2, System.StackOverflowException) === null) && (JSIL.TryCast(exception2, System.OutOfMemoryException) === null))) {
			throw $exception;
		}
		exception = exception2;
		if (!(JSIL.TryCast(exception2, System.Net.WebException) || JSIL.TryCast(exception2, System.Security.SecurityException))) {
			exception = JSIL.New(System.Net.WebException, "_ctor$2", [$asm06.System.SR.GetString$2("net_webclient"), exception2]);
		}
	}
	var eventArgs = new System.Net.OpenWriteCompletedEventArgs(result2, exception, this.m_Cancelled, asyncOperation.UserSuppliedState);
	this.InvokeOperationCompleted(asyncOperation, this.openWriteOperationCompleted, eventArgs);
};
System.Net.WebClient.prototype.OpenWriteAsync$0 = function (address) {
	this.OpenWriteAsync$2(address, null, null);
};
System.Net.WebClient.prototype.OpenWriteAsync$1 = function (address, method) {
	this.OpenWriteAsync$2(address, method, null);
};
System.Net.WebClient.prototype.OpenWriteAsync$2 = function (address, method, userToken) {
	if ($asm06.System.Net.Logging.On) {
		$asm06.System.Net.Logging.Enter$0($asm06.System.Net.Logging.Web, this, "OpenWriteAsync", JSIL.ConcatString(address, ", ", method));
	}
	if (System.Uri.op_Equality(address, null)) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["address"]);
	}
	if (method === null) {
		method = this.MapToDefaultMethod(address);
	}
	this.InitWebClientAsync();
	this.ClearWebClientState();
	var asyncOperation = System.ComponentModel.AsyncOperationManager.CreateOperation(userToken);
	this.m_AsyncOp = asyncOperation;
	try {
		var uri = this.GetUri(address);
		this.m_Method = method;
		var webRequest = (this.m_WebRequest = this.GetWebRequest(uri));
		webRequest.BeginGetRequestStream(JSIL.Delegate.New("System.AsyncCallback", this, System.Net.WebClient.prototype.OpenWriteAsyncCallback), new $asm06.System.Net.WebClientAsyncContext(asyncOperation, webRequest));
	} catch ($exception) {
		var exception = $exception;
		if (!((JSIL.TryCast(exception, System.Threading.ThreadAbortException) === null) && 
				(JSIL.TryCast(exception, System.StackOverflowException) === null) && (JSIL.TryCast(exception, System.OutOfMemoryException) === null))) {
			throw $exception;
		}
		if (!(JSIL.TryCast(exception, System.Net.WebException) || JSIL.TryCast(exception, System.Security.SecurityException))) {
			exception = JSIL.New(System.Net.WebException, "_ctor$2", [$asm06.System.SR.GetString$2("net_webclient"), exception]);
		}
		var eventArgs = new System.Net.OpenWriteCompletedEventArgs(null, exception, this.m_Cancelled, asyncOperation.UserSuppliedState);
		this.InvokeOperationCompleted(asyncOperation, this.openWriteOperationCompleted, eventArgs);
	}
	if ($asm06.System.Net.Logging.On) {
		$asm06.System.Net.Logging.Exit$2($asm06.System.Net.Logging.Web, this, "OpenWriteAsync", null);
	}
};
System.Net.WebClient.prototype.add_WriteStreamClosed = function (value) {
	this.WriteStreamClosed = System.Delegate.Combine(this.WriteStreamClosed, value);
};
System.Net.WebClient.prototype.remove_WriteStreamClosed = function (value) {
	this.WriteStreamClosed = System.Delegate.Remove(this.WriteStreamClosed, value);
};
System.Net.WebClient.prototype.OnWriteStreamClosed = function (e) {
	if (this.WriteStreamClosed !== null) {
		this.WriteStreamClosed(this, e);
	}
};
System.Net.WebClient.prototype.WriteStreamClosedOperationCompleted = function (arg) {
	this.OnWriteStreamClosed(JSIL.Cast(arg, System.Net.WriteStreamClosedEventArgs));
};
System.Net.WebClient.prototype.add_DownloadStringCompleted = function (value) {
	this.DownloadStringCompleted = System.Delegate.Combine(this.DownloadStringCompleted, value);
};
System.Net.WebClient.prototype.remove_DownloadStringCompleted = function (value) {
	this.DownloadStringCompleted = System.Delegate.Remove(this.DownloadStringCompleted, value);
};
System.Net.WebClient.prototype.OnDownloadStringCompleted = function (e) {
	if (this.DownloadStringCompleted !== null) {
		this.DownloadStringCompleted(this, e);
	}
};
System.Net.WebClient.prototype.DownloadStringOperationCompleted = function (arg) {
	this.OnDownloadStringCompleted(JSIL.Cast(arg, System.Net.DownloadStringCompletedEventArgs));
};
System.Net.WebClient.prototype.DownloadStringAsyncCallback = function (returnBytes, exception, asyncOp) {
	var result = null;
	try {
		if (returnBytes !== null) {
			result = this.GetStringUsingEncoding(this.m_WebRequest, returnBytes);
		}
	} catch ($exception) {
		var exception2 = $exception;
		if (!((JSIL.TryCast(exception2, System.Threading.ThreadAbortException) === null) && 
				(JSIL.TryCast(exception2, System.StackOverflowException) === null) && (JSIL.TryCast(exception2, System.OutOfMemoryException) === null))) {
			throw $exception;
		}
		exception = exception2;
	}
	if (!(exception || 
			(this.m_ContentLength !== -1) || !((this.DownloadProgressChanged !== null) & !this.m_Cancelled))) {
		asyncOp.Post(this.reportDownloadProgressChanged, new System.Net.DownloadProgressChangedEventArgs(100, asyncOp.UserSuppliedState, this.m_Progress.BytesReceived, this.m_Progress.BytesReceived));
	}
	var eventArgs = new System.Net.DownloadStringCompletedEventArgs(result, exception, this.m_Cancelled, asyncOp.UserSuppliedState);
	this.InvokeOperationCompleted(asyncOp, this.downloadStringOperationCompleted, eventArgs);
};
System.Net.WebClient.prototype.DownloadStringAsync$0 = function (address) {
	this.DownloadStringAsync$1(address, null);
};
System.Net.WebClient.prototype.DownloadStringAsync$1 = function (address, userToken) {
	if ($asm06.System.Net.Logging.On) {
		$asm06.System.Net.Logging.Enter$1($asm06.System.Net.Logging.Web, this, "DownloadStringAsync", address);
	}
	if (System.Uri.op_Equality(address, null)) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["address"]);
	}
	this.InitWebClientAsync();
	this.ClearWebClientState();
	var asyncOp = System.ComponentModel.AsyncOperationManager.CreateOperation(userToken);
	this.m_AsyncOp = asyncOp;
	try {
		var request = (this.m_WebRequest = this.GetWebRequest(this.GetUri(address)));
		this.DownloadBits(request, null, JSIL.Delegate.New("System.Net.CompletionDelegate", this, System.Net.WebClient.prototype.DownloadStringAsyncCallback), asyncOp);
	} catch ($exception) {
		var exception = $exception;
		if (!((JSIL.TryCast(exception, System.Threading.ThreadAbortException) === null) && 
				(JSIL.TryCast(exception, System.StackOverflowException) === null) && (JSIL.TryCast(exception, System.OutOfMemoryException) === null))) {
			throw $exception;
		}
		if (!(JSIL.TryCast(exception, System.Net.WebException) || JSIL.TryCast(exception, System.Security.SecurityException))) {
			exception = JSIL.New(System.Net.WebException, "_ctor$2", [$asm06.System.SR.GetString$2("net_webclient"), exception]);
		}
		this.DownloadStringAsyncCallback(null, exception, asyncOp);
	}
	if ($asm06.System.Net.Logging.On) {
		$asm06.System.Net.Logging.Exit$2($asm06.System.Net.Logging.Web, this, "DownloadStringAsync", "");
	}
};
System.Net.WebClient.prototype.add_UploadStringCompleted = function (value) {
	this.UploadStringCompleted = System.Delegate.Combine(this.UploadStringCompleted, value);
};
System.Net.WebClient.prototype.remove_UploadStringCompleted = function (value) {
	this.UploadStringCompleted = System.Delegate.Remove(this.UploadStringCompleted, value);
};
System.Net.WebClient.prototype.OnUploadStringCompleted = function (e) {
	if (this.UploadStringCompleted !== null) {
		this.UploadStringCompleted(this, e);
	}
};
System.Net.WebClient.prototype.UploadStringOperationCompleted = function (arg) {
	this.OnUploadStringCompleted(JSIL.Cast(arg, System.Net.UploadStringCompletedEventArgs));
};
System.Net.WebClient.prototype.UploadStringAsyncWriteCallback = function (returnBytes, exception, asyncOp) {
	if (exception !== null) {
		var eventArgs = new System.Net.UploadStringCompletedEventArgs(null, exception, this.m_Cancelled, asyncOp.UserSuppliedState);
		this.InvokeOperationCompleted(asyncOp, this.uploadStringOperationCompleted, eventArgs);
	}
};
System.Net.WebClient.prototype.UploadStringAsyncReadCallback = function (returnBytes, exception, asyncOp) {
	var result = null;
	try {
		if (returnBytes !== null) {
			result = this.GetStringUsingEncoding(this.m_WebRequest, returnBytes);
		}
	} catch ($exception) {
		var exception2 = $exception;
		if (!((JSIL.TryCast(exception2, System.Threading.ThreadAbortException) === null) && 
				(JSIL.TryCast(exception2, System.StackOverflowException) === null) && (JSIL.TryCast(exception2, System.OutOfMemoryException) === null))) {
			throw $exception;
		}
		exception = exception2;
	}
	var eventArgs = new System.Net.UploadStringCompletedEventArgs(result, exception, this.m_Cancelled, asyncOp.UserSuppliedState);
	this.InvokeOperationCompleted(asyncOp, this.uploadStringOperationCompleted, eventArgs);
};
System.Net.WebClient.prototype.UploadStringAsync$0 = function (address, data) {
	this.UploadStringAsync$2(address, null, data, null);
};
System.Net.WebClient.prototype.UploadStringAsync$1 = function (address, method, data) {
	this.UploadStringAsync$2(address, method, data, null);
};
System.Net.WebClient.prototype.UploadStringAsync$2 = function (address, method, data, userToken) {
	if ($asm06.System.Net.Logging.On) {
		$asm06.System.Net.Logging.Enter$1($asm06.System.Net.Logging.Web, this, "UploadStringAsync", address);
	}
	if (System.Uri.op_Equality(address, null)) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["address"]);
	}
	if (data === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["data"]);
	}
	if (method === null) {
		method = this.MapToDefaultMethod(address);
	}
	this.InitWebClientAsync();
	this.ClearWebClientState();
	var asyncOp = System.ComponentModel.AsyncOperationManager.CreateOperation(userToken);
	this.m_AsyncOp = asyncOp;
	try {
		var bytes = this.Encoding.GetBytes$3(data);
		this.m_Method = method;
		if (!this.m_AllowWriteStreamBuffering) {
			this.m_ContentLength = bytes.length;
		}
		var request = (this.m_WebRequest = this.GetWebRequest(this.GetUri(address)));
		this.UploadDownloadBits(
			request, 
			null, 
			null, 
			bytes, 
			null, 
			null, 
			JSIL.Delegate.New("System.Net.CompletionDelegate", this, System.Net.WebClient.prototype.UploadStringAsyncWriteCallback), 
			JSIL.Delegate.New("System.Net.CompletionDelegate", this, System.Net.WebClient.prototype.UploadStringAsyncReadCallback), 
			asyncOp
		);
	} catch ($exception) {
		var exception = $exception;
		if (!((JSIL.TryCast(exception, System.Threading.ThreadAbortException) === null) && 
				(JSIL.TryCast(exception, System.StackOverflowException) === null) && (JSIL.TryCast(exception, System.OutOfMemoryException) === null))) {
			throw $exception;
		}
		if (!(JSIL.TryCast(exception, System.Net.WebException) || JSIL.TryCast(exception, System.Security.SecurityException))) {
			exception = JSIL.New(System.Net.WebException, "_ctor$2", [$asm06.System.SR.GetString$2("net_webclient"), exception]);
		}
		this.UploadStringAsyncWriteCallback(null, exception, asyncOp);
	}
	if ($asm06.System.Net.Logging.On) {
		$asm06.System.Net.Logging.Exit$2($asm06.System.Net.Logging.Web, this, "UploadStringAsync", null);
	}
};
System.Net.WebClient.prototype.UploadDownloadBits = function (request, readStream, writeStream, buffer, header, footer, upCompletionDelegate, downCompletionDelegate, asyncOp) {
	var $l$gc__DisplayClass = new $asm06.System.Net.WebClient.$l$gc__DisplayClass1();
	$l$gc__DisplayClass.request = request;
	$l$gc__DisplayClass.writeStream = writeStream;
	$l$gc__DisplayClass.upCompletionDelegate = upCompletionDelegate;
	$l$gc__DisplayClass.downCompletionDelegate = downCompletionDelegate;
	$l$gc__DisplayClass.$this = this;
	this.UploadBits(
		$l$gc__DisplayClass.request, 
		readStream, 
		buffer, 
		header, 
		footer, 
		function (returnBytes, exception, asyncOp2) {
			$l$gc__DisplayClass.upCompletionDelegate(returnBytes, exception, asyncOp2);
			$l$gc__DisplayClass.$this.DownloadBits($l$gc__DisplayClass.request, $l$gc__DisplayClass.writeStream, $l$gc__DisplayClass.downCompletionDelegate, asyncOp2);
		}, 
		asyncOp
	);
};
System.Net.WebClient.prototype.CancelAsync = function () {
	this.m_Cancelled = true;
	System.Net.WebClient.AbortRequest(this.m_WebRequest);
};
System.Net.WebClient.prototype.add_DownloadProgressChanged = function (value) {
	this.DownloadProgressChanged = System.Delegate.Combine(this.DownloadProgressChanged, value);
};
System.Net.WebClient.prototype.remove_DownloadProgressChanged = function (value) {
	this.DownloadProgressChanged = System.Delegate.Remove(this.DownloadProgressChanged, value);
};
System.Net.WebClient.prototype.add_UploadProgressChanged = function (value) {
	this.UploadProgressChanged = System.Delegate.Combine(this.UploadProgressChanged, value);
};
System.Net.WebClient.prototype.remove_UploadProgressChanged = function (value) {
	this.UploadProgressChanged = System.Delegate.Remove(this.UploadProgressChanged, value);
};
System.Net.WebClient.prototype.OnDownloadProgressChanged = function (e) {
	if (this.DownloadProgressChanged !== null) {
		this.DownloadProgressChanged(this, e);
	}
};
System.Net.WebClient.prototype.OnUploadProgressChanged = function (e) {
	if (this.UploadProgressChanged !== null) {
		this.UploadProgressChanged(this, e);
	}
};
System.Net.WebClient.prototype.ReportDownloadProgressChanged = function (arg) {
	this.OnDownloadProgressChanged(JSIL.Cast(arg, System.Net.DownloadProgressChangedEventArgs));
};
System.Net.WebClient.prototype.ReportUploadProgressChanged = function (arg) {
	this.OnUploadProgressChanged(JSIL.Cast(arg, System.Net.UploadProgressChangedEventArgs));
};
System.Net.WebClient.prototype.PostProgressChanged = function (asyncOp, progress) {
	if (!((asyncOp === null) || ((progress.BytesSent <= progress.LastBytesSent) && 
				(progress.BytesReceived <= progress.LastBytesReceived)))) {
		progress.LastBytesSent = progress.BytesSent;
		progress.LastBytesReceived = progress.BytesReceived;
		if (progress.HasUploadPhase) {
			if (!((progress.TotalBytesToReceive >= 0) || (progress.BytesReceived !== 0))) {
				var progressPercentage = (progress.TotalBytesToSend < 0) ? 0 : (progress.TotalBytesToSend === 0) ? 50 : Math.floor((50 * progress.BytesSent) / progress.TotalBytesToSend);
			} else {
				progressPercentage = (progress.TotalBytesToSend < 0) ? 50 : (progress.TotalBytesToReceive === 0) ? 100 : (Math.floor((50 * progress.BytesReceived) / progress.TotalBytesToReceive) + 50);
			}
			asyncOp.Post(this.reportUploadProgressChanged, new System.Net.UploadProgressChangedEventArgs(progressPercentage, asyncOp.UserSuppliedState, progress.BytesSent, progress.TotalBytesToSend, progress.BytesReceived, progress.TotalBytesToReceive));
			return;
		}
		progressPercentage = (progress.TotalBytesToReceive < 0) ? 0 : (progress.TotalBytesToReceive === 0) ? 100 : Math.floor((100 * progress.BytesReceived) / progress.TotalBytesToReceive);
		asyncOp.Post(this.reportDownloadProgressChanged, new System.Net.DownloadProgressChangedEventArgs(progressPercentage, asyncOp.UserSuppliedState, progress.BytesReceived, progress.TotalBytesToReceive));
	}
};
System.Net.WebClient.GetDefaultEncoding = function () {
	return System.Text.Encoding.UTF8;
};
System.Net.WebClient.prototype.WebRequestDownloadProgressChanged = function (sender, args) {
	if (!((this.m_Progress.TotalBytesToReceive !== -1) || (args.TotalBytes <= 0))) {
		this.m_Progress.TotalBytesToReceive = args.TotalBytes;
	}
	this.m_Progress.BytesReceived = args.ProcessedBytes;
	this.PostProgressChanged(this.m_AsyncOp, this.m_Progress);
};
System.Net.WebClient.prototype.WebRequestDownloadProgressCompleted = function (sender, args) {
	this.m_Progress.TotalBytesToReceive = (this.m_Progress.BytesReceived = args.ProcessedBytes);
	this.PostProgressChanged(this.m_AsyncOp, this.m_Progress);
};
System.Net.WebClient.prototype.WebRequestDownloadProgressFailed = function (sender, args) {
	this.m_Progress.BytesReceived = args.ProcessedBytes;
	this.PostProgressChanged(this.m_AsyncOp, this.m_Progress);
};
System.Net.WebClient.prototype.get_ResponseHeaders = function () {
	if (this.m_WebResponse !== null) {
		return this.m_WebResponse.Headers;
	}
	return null;
};
System.Net.WebClient.prototype.get_Credentials = function () {
	return this.m_credentials;
};
System.Net.WebClient.prototype.set_Credentials = function (value) {
	this.m_credentials = value;
};
JSIL.OverloadedMethod(System.Net.WebClient.prototype, "OpenReadAsync", [
		["OpenReadAsync$0", [System.Uri]], 
		["OpenReadAsync$1", [System.Uri, System.Object]]
	]);
JSIL.OverloadedMethod(System.Net.WebClient.prototype, "OpenWriteAsync", [
		["OpenWriteAsync$0", [System.Uri]], 
		["OpenWriteAsync$1", [System.Uri, System.String]], 
		["OpenWriteAsync$2", [System.Uri, System.String, System.Object]]
	]);
JSIL.OverloadedMethod(System.Net.WebClient.prototype, "DownloadStringAsync", [
		["DownloadStringAsync$0", [System.Uri]], 
		["DownloadStringAsync$1", [System.Uri, System.Object]]
	]);
JSIL.OverloadedMethod(System.Net.WebClient.prototype, "UploadStringAsync", [
		["UploadStringAsync$0", [System.Uri, System.String]], 
		["UploadStringAsync$1", [System.Uri, System.String, System.String]], 
		["UploadStringAsync$2", [System.Uri, System.String, System.String, System.Object]]
	]);
JSIL.MakeProperty(System.Net.WebClient.prototype, "Encoding", 
	System.Net.WebClient.prototype.get_Encoding, System.Net.WebClient.prototype.set_Encoding);
JSIL.MakeProperty(System.Net.WebClient.prototype, "AllowReadStreamBuffering", 
	System.Net.WebClient.prototype.get_AllowReadStreamBuffering, System.Net.WebClient.prototype.set_AllowReadStreamBuffering);
JSIL.MakeProperty(System.Net.WebClient.prototype, "AllowWriteStreamBuffering", 
	System.Net.WebClient.prototype.get_AllowWriteStreamBuffering, System.Net.WebClient.prototype.set_AllowWriteStreamBuffering);
JSIL.MakeProperty(System.Net.WebClient.prototype, "UseDefaultCredentials", 
	System.Net.WebClient.prototype.get_UseDefaultCredentials, System.Net.WebClient.prototype.set_UseDefaultCredentials);
JSIL.MakeProperty(System.Net.WebClient.prototype, "BaseAddress", 
	System.Net.WebClient.prototype.get_BaseAddress, System.Net.WebClient.prototype.set_BaseAddress);
JSIL.MakeProperty(System.Net.WebClient.prototype, "Headers", 
	System.Net.WebClient.prototype.get_Headers, System.Net.WebClient.prototype.set_Headers);
JSIL.MakeProperty(System.Net.WebClient.prototype, "IsBusy", 
	System.Net.WebClient.prototype.get_IsBusy, null);
JSIL.MakeProperty(System.Net.WebClient.prototype, "ResponseHeaders", 
	System.Net.WebClient.prototype.get_ResponseHeaders, null);
JSIL.MakeProperty(System.Net.WebClient.prototype, "Credentials", 
	System.Net.WebClient.prototype.get_Credentials, System.Net.WebClient.prototype.set_Credentials);
Object.defineProperty(System.Net.WebClient, "DefaultCopyBufferLength", {
		"value": 8192}
);
Object.defineProperty(System.Net.WebClient, "DefaultDownloadBufferLength", {
		"value": 65536}
);
System.Net.WebClient.prototype.m_baseAddress = null;
System.Net.WebClient.prototype.m_headers = null;
System.Net.WebClient.prototype.m_WebResponse = null;
System.Net.WebClient.prototype.m_WebRequest = null;
System.Net.WebClient.prototype.m_Encoding = null;
System.Net.WebClient.prototype.m_Method = null;
System.Net.WebClient.prototype.m_ContentLength = 0;
System.Net.WebClient.prototype.m_InitWebClientAsync = false;
System.Net.WebClient.prototype.m_Cancelled = false;
System.Net.WebClient.prototype.m_Progress = null;
System.Net.WebClient.prototype.m_AllowReadStreamBuffering = false;
System.Net.WebClient.prototype.m_AllowWriteStreamBuffering = false;
System.Net.WebClient.prototype.m_UserSetAllowWriteStreamBuffering = false;
System.Net.WebClient.prototype.m_useDefaultCredentials = false;
System.Net.WebClient.prototype.m_userSetUseDefaultCredentials = false;
System.Net.WebClient.prototype.m_CallNesting = 0;
System.Net.WebClient.prototype.m_AsyncOp = null;
System.Net.WebClient.prototype.OpenReadCompleted = null;
System.Net.WebClient.prototype.openReadOperationCompleted = null;
System.Net.WebClient.prototype.OpenWriteCompleted = null;
System.Net.WebClient.prototype.openWriteOperationCompleted = null;
System.Net.WebClient.prototype.WriteStreamClosed = null;
System.Net.WebClient.prototype.writeStreamClosedOperationCompleted = null;
System.Net.WebClient.prototype.DownloadStringCompleted = null;
System.Net.WebClient.prototype.downloadStringOperationCompleted = null;
System.Net.WebClient.prototype.UploadStringCompleted = null;
System.Net.WebClient.prototype.uploadStringOperationCompleted = null;
System.Net.WebClient.prototype.DownloadProgressChanged = null;
System.Net.WebClient.prototype.UploadProgressChanged = null;
System.Net.WebClient.prototype.reportDownloadProgressChanged = null;
System.Net.WebClient.prototype.reportUploadProgressChanged = null;
System.Net.WebClient.prototype.m_credentials = null;

$asm06.System.Net.WebClient.ProgressData.prototype.Reset = function () {
	this.BytesSent = 0;
	this.TotalBytesToSend = -1;
	this.BytesReceived = 0;
	this.TotalBytesToReceive = -1;
	this.HasUploadPhase = false;
};
$asm06.System.Net.WebClient.ProgressData.prototype._ctor = function () {
	this.TotalBytesToSend = -1;
	this.TotalBytesToReceive = -1;
	System.Object.prototype._ctor.call(this);
};
$asm06.System.Net.WebClient.ProgressData.prototype.BytesSent = 0;
$asm06.System.Net.WebClient.ProgressData.prototype.TotalBytesToSend = 0;
$asm06.System.Net.WebClient.ProgressData.prototype.BytesReceived = 0;
$asm06.System.Net.WebClient.ProgressData.prototype.TotalBytesToReceive = 0;
$asm06.System.Net.WebClient.ProgressData.prototype.HasUploadPhase = false;
$asm06.System.Net.WebClient.ProgressData.prototype.LastBytesSent = 0;
$asm06.System.Net.WebClient.ProgressData.prototype.LastBytesReceived = 0;

$asm06.System.Net.WebClient.DownloadBitsState.prototype._ctor = function (request, writeStream, completionDelegate, asyncOp, progress, webClient) {
	System.Object.prototype._ctor.call(this);
	this.WriteStream = writeStream;
	this.Request = request;
	this.AsyncOp = asyncOp;
	this.CompletionDelegate = completionDelegate;
	this.WebClient = webClient;
	this.Progress = progress;
};
$asm06.System.Net.WebClient.DownloadBitsState.prototype.get_Async = function () {
	return (this.AsyncOp !== null);
};
$asm06.System.Net.WebClient.DownloadBitsState.prototype.SetResponse = function (response) {
	this.ContentLength = response.ContentLength;
	if (!((this.ContentLength !== -1) && (this.ContentLength <= 65536))) {
		this.Length = 65536;
	} else {
		this.Length = this.ContentLength;
	}
	if (this.WriteStream === null) {
		if (this.ContentLength > 2147483647) {
			throw JSIL.New(System.Net.WebException, "_ctor$3", [$asm06.System.SR.GetString$2("net_webstatus_MessageLengthLimitExceeded"), System.Net.WebExceptionStatus.MessageLengthLimitExceeded]);
		}
		this.SgBuffers = JSIL.New($asm06.System.Net.ScatterGatherBuffers, "_ctor$1", [this.Length]);
	}
	this.InnerBuffer = JSIL.Array.New(System.Byte, this.Length);
	this.ReadStream = response.GetResponseStream();
	if (!(!this.Async || (response.ContentLength < 0))) {
		this.Progress.TotalBytesToReceive = response.ContentLength;
	}
	if (this.Async) {
		if (!((this.ReadStream !== null) && (this.ReadStream !== System.IO.Stream.Null))) {
			System.Net.WebClient.DownloadBitsReadCallbackState(this, null);
		} else {
			this.ReadStream.BeginRead(
				this.InnerBuffer, 
				this.Offset, 
				(this.Length - this.Offset), 
				JSIL.Delegate.New("System.AsyncCallback", null, System.Net.WebClient.DownloadBitsReadCallback), 
				this
			);
		}
		return -1;
	}
	if (!((this.ReadStream !== null) && (this.ReadStream !== System.IO.Stream.Null))) {
		return 0;
	}
	return this.ReadStream.Read(this.InnerBuffer, this.Offset, (this.Length - this.Offset));
};
$asm06.System.Net.WebClient.DownloadBitsState.prototype.RetrieveBytes = function (/* ref */ bytesRetrieved) {
	if (bytesRetrieved.value > 0) {
		if (this.WriteStream !== null) {
			this.WriteStream.Write(this.InnerBuffer, 0, bytesRetrieved.value);
		} else {
			this.SgBuffers.Write(this.InnerBuffer, 0, bytesRetrieved.value);
		}
		if (!(!this.Async || this.WebClient.AllowReadStreamBuffering)) {
			this.Progress.BytesReceived += bytesRetrieved.value;
		}
		if (this.Offset !== this.ContentLength) {
			if (this.Async) {
				if (!this.WebClient.AllowReadStreamBuffering) {
					this.WebClient.PostProgressChanged(this.AsyncOp, this.Progress);
				}
				this.ReadStream.BeginRead(
					this.InnerBuffer, 
					this.Offset, 
					(this.Length - this.Offset), 
					JSIL.Delegate.New("System.AsyncCallback", null, System.Net.WebClient.DownloadBitsReadCallback), 
					this
				);
			} else {
				bytesRetrieved.value = this.ReadStream.Read(this.InnerBuffer, this.Offset, (this.Length - this.Offset));
			}
			return false;
		}
	}
	if (this.Async) {
		if (this.Progress.TotalBytesToReceive < 0) {
			this.Progress.TotalBytesToReceive = this.Progress.BytesReceived;
		}
		if (!this.WebClient.AllowReadStreamBuffering) {
			this.WebClient.PostProgressChanged(this.AsyncOp, this.Progress);
		}
	}
	if (this.ReadStream !== null) {
		this.ReadStream.Close();
	}
	if (this.WriteStream !== null) {
		this.WriteStream.Close();
	} else if (this.WriteStream === null) {
		var array = JSIL.Array.New(System.Byte, this.SgBuffers.Length);
		if (this.SgBuffers.Length > 0) {
			var buffers = this.SgBuffers.GetBuffers();
			var num = 0;
		__loop0__: 
			for (var i = 0; i < buffers.length; ++i) {
				var bufferOffsetSize = buffers[i];
				System.Buffer.BlockCopy(
					bufferOffsetSize.Buffer, 
					0, 
					array, 
					num, 
					bufferOffsetSize.Size
				);
				num += bufferOffsetSize.Size;
			}
		}
		this.InnerBuffer = array;
	}
	return true;
};
$asm06.System.Net.WebClient.DownloadBitsState.prototype.Close = function () {
	if (this.WriteStream !== null) {
		this.WriteStream.Close();
	}
	if (this.ReadStream !== null) {
		this.ReadStream.Close();
	}
};
JSIL.MakeProperty($asm06.System.Net.WebClient.DownloadBitsState.prototype, "Async", 
	$asm06.System.Net.WebClient.DownloadBitsState.prototype.get_Async, null);
$asm06.System.Net.WebClient.DownloadBitsState.prototype.WebClient = null;
$asm06.System.Net.WebClient.DownloadBitsState.prototype.WriteStream = null;
$asm06.System.Net.WebClient.DownloadBitsState.prototype.InnerBuffer = null;
$asm06.System.Net.WebClient.DownloadBitsState.prototype.AsyncOp = null;
$asm06.System.Net.WebClient.DownloadBitsState.prototype.Request = null;
$asm06.System.Net.WebClient.DownloadBitsState.prototype.CompletionDelegate = null;
$asm06.System.Net.WebClient.DownloadBitsState.prototype.ReadStream = null;
$asm06.System.Net.WebClient.DownloadBitsState.prototype.SgBuffers = null;
$asm06.System.Net.WebClient.DownloadBitsState.prototype.ContentLength = 0;
$asm06.System.Net.WebClient.DownloadBitsState.prototype.Length = 0;
$asm06.System.Net.WebClient.DownloadBitsState.prototype.Offset = 0;
$asm06.System.Net.WebClient.DownloadBitsState.prototype.Progress = null;

$asm06.System.Net.WebClient.UploadBitsState.prototype._ctor = function (request, readStream, buffer, header, footer, completionDelegate, asyncOp, progress, webClient) {
	System.Object.prototype._ctor.call(this);
	this.InnerBuffer = buffer;
	this.Header = header;
	this.Footer = footer;
	this.ReadStream = readStream;
	this.Request = request;
	this.AsyncOp = asyncOp;
	this.CompletionDelegate = completionDelegate;
	if (this.AsyncOp !== null) {
		this.Progress = progress;
		this.Progress.HasUploadPhase = true;
		this.Progress.TotalBytesToSend = -1;
	}
	this.WebClient = webClient;
};
$asm06.System.Net.WebClient.UploadBitsState.prototype.get_FileUpload = function () {
	return (this.ReadStream !== null);
};
$asm06.System.Net.WebClient.UploadBitsState.prototype.get_Async = function () {
	return (this.AsyncOp !== null);
};
$asm06.System.Net.WebClient.UploadBitsState.prototype.SetRequestStream = function (writeStream) {
	this.WriteStream = writeStream;
	var array = null;
	if (this.Header !== null) {
		array = this.Header;
		this.Header = null;
	} else {
		array = JSIL.Array.New(System.Byte, 0);
	}
	if (this.Async) {
		this.Progress.BytesSent += array.length;
		this.WriteStream.BeginWrite(
			array, 
			0, 
			array.length, 
			JSIL.Delegate.New("System.AsyncCallback", null, System.Net.WebClient.UploadBitsWriteCallback), 
			this
		);
		return;
	}
	this.WriteStream.Write(array, 0, array.length);
};
$asm06.System.Net.WebClient.UploadBitsState.prototype.WriteBytes = function () {
	var buffer = null;
	var num = 0;
	if (this.Async) {
		this.WebClient.PostProgressChanged(this.AsyncOp, this.Progress);
	}
	if (this.FileUpload) {
		var num2 = 0;
		if (this.InnerBuffer !== null) {
			num2 = this.ReadStream.Read(this.InnerBuffer, 0, this.InnerBuffer.length);
			if (num2 <= 0) {
				this.ReadStream.Close();
				this.InnerBuffer = null;
			}
		}
		if (this.InnerBuffer !== null) {
			num = num2;
			buffer = this.InnerBuffer;
		} else {
			if (this.Footer === null) {
				return true;
			}
			num = this.Footer.length;
			buffer = this.Footer;
			this.Footer = null;
		}
	} else {
		if (this.InnerBuffer === null) {
			return true;
		}
		num = this.InnerBuffer.length;
		buffer = this.InnerBuffer;
		this.InnerBuffer = null;
	}
	if (this.Async) {
		this.Progress.BytesSent += num;
		this.WriteStream.BeginWrite(
			buffer, 
			0, 
			num, 
			JSIL.Delegate.New("System.AsyncCallback", null, System.Net.WebClient.UploadBitsWriteCallback), 
			this
		);
	} else {
		this.WriteStream.Write(buffer, 0, num);
	}
	return false;
};
$asm06.System.Net.WebClient.UploadBitsState.prototype.Close = function () {
	if (this.WriteStream !== null) {
		this.WriteStream.Close();
	}
	if (this.ReadStream !== null) {
		this.ReadStream.Close();
	}
};
JSIL.MakeProperty($asm06.System.Net.WebClient.UploadBitsState.prototype, "FileUpload", 
	$asm06.System.Net.WebClient.UploadBitsState.prototype.get_FileUpload, null);
JSIL.MakeProperty($asm06.System.Net.WebClient.UploadBitsState.prototype, "Async", 
	$asm06.System.Net.WebClient.UploadBitsState.prototype.get_Async, null);
$asm06.System.Net.WebClient.UploadBitsState.prototype.WebClient = null;
$asm06.System.Net.WebClient.UploadBitsState.prototype.WriteStream = null;
$asm06.System.Net.WebClient.UploadBitsState.prototype.InnerBuffer = null;
$asm06.System.Net.WebClient.UploadBitsState.prototype.Header = null;
$asm06.System.Net.WebClient.UploadBitsState.prototype.Footer = null;
$asm06.System.Net.WebClient.UploadBitsState.prototype.AsyncOp = null;
$asm06.System.Net.WebClient.UploadBitsState.prototype.Request = null;
$asm06.System.Net.WebClient.UploadBitsState.prototype.CompletionDelegate = null;
$asm06.System.Net.WebClient.UploadBitsState.prototype.ReadStream = null;
$asm06.System.Net.WebClient.UploadBitsState.prototype.Progress = null;

$asm06.System.Net.WebClient.WebClientWriteStream.prototype._ctor = function (stream, request, webClient) {
	System.IO.Stream.prototype._ctor.call(this);
	this.m_request = request;
	this.m_stream = stream;
	this.m_WebClient = webClient;
};
$asm06.System.Net.WebClient.WebClientWriteStream.prototype.get_CanRead = function () {
	return this.m_stream.CanRead;
};
$asm06.System.Net.WebClient.WebClientWriteStream.prototype.get_CanSeek = function () {
	return this.m_stream.CanSeek;
};
$asm06.System.Net.WebClient.WebClientWriteStream.prototype.get_CanWrite = function () {
	return this.m_stream.CanWrite;
};
$asm06.System.Net.WebClient.WebClientWriteStream.prototype.get_CanTimeout = function () {
	return this.m_stream.CanTimeout;
};
$asm06.System.Net.WebClient.WebClientWriteStream.prototype.get_ReadTimeout = function () {
	return this.m_stream.ReadTimeout;
};
$asm06.System.Net.WebClient.WebClientWriteStream.prototype.set_ReadTimeout = function (value) {
	this.m_stream.ReadTimeout = value;
};
$asm06.System.Net.WebClient.WebClientWriteStream.prototype.get_WriteTimeout = function () {
	return this.m_stream.WriteTimeout;
};
$asm06.System.Net.WebClient.WebClientWriteStream.prototype.set_WriteTimeout = function (value) {
	this.m_stream.WriteTimeout = value;
};
$asm06.System.Net.WebClient.WebClientWriteStream.prototype.get_Length = function () {
	return this.m_stream.Length;
};
$asm06.System.Net.WebClient.WebClientWriteStream.prototype.get_Position = function () {
	return this.m_stream.Position;
};
$asm06.System.Net.WebClient.WebClientWriteStream.prototype.set_Position = function (value) {
	this.m_stream.Position = value;
};
$asm06.System.Net.WebClient.WebClientWriteStream.prototype.BeginRead = function (buffer, offset, size, callback, state) {
	return this.m_stream.BeginRead(
		buffer, 
		offset, 
		size, 
		callback, 
		state
	);
};
$asm06.System.Net.WebClient.WebClientWriteStream.prototype.BeginWrite = function (buffer, offset, size, callback, state) {
	return this.m_stream.BeginWrite(
		buffer, 
		offset, 
		size, 
		callback, 
		state
	);
};
$asm06.System.Net.WebClient.WebClientWriteStream.prototype.Dispose = function (disposing) {
	try {
		if (!(!disposing || (System.Threading.Interlocked.Exchange$0(/* ref */ new JSIL.MemberReference(this, "m_disposed"), 1) !== 0))) {
			this.m_stream.Close();
			this.m_request.BeginGetResponse(function (ar) {
					var error = null;
					try {
						this.m_request.EndGetResponse(ar).Close();
					} catch ($exception) {
						error = $exception;
					}
					System.Net.UiSynchronizationContext.Current.Post(this.m_WebClient.writeStreamClosedOperationCompleted, new System.Net.WriteStreamClosedEventArgs(error));
				}, null);
		}
	} finally {
		System.IO.Stream.prototype.Dispose$1.call(this, disposing);
	}
};
$asm06.System.Net.WebClient.WebClientWriteStream.prototype.EndRead = function (result) {
	return this.m_stream.EndRead(result);
};
$asm06.System.Net.WebClient.WebClientWriteStream.prototype.EndWrite = function (result) {
	this.m_stream.EndWrite(result);
};
$asm06.System.Net.WebClient.WebClientWriteStream.prototype.Flush = function () {
	this.m_stream.Flush();
};
$asm06.System.Net.WebClient.WebClientWriteStream.prototype.Read = function (buffer, offset, count) {
	return this.m_stream.Read(buffer, offset, count);
};
$asm06.System.Net.WebClient.WebClientWriteStream.prototype.Seek = function (offset, origin) {
	return this.m_stream.Seek(offset, origin);
};
$asm06.System.Net.WebClient.WebClientWriteStream.prototype.SetLength = function (value) {
	this.m_stream.SetLength(value);
};
$asm06.System.Net.WebClient.WebClientWriteStream.prototype.Write = function (buffer, offset, count) {
	this.m_stream.Write(buffer, offset, count);
};
JSIL.MakeProperty($asm06.System.Net.WebClient.WebClientWriteStream.prototype, "CanRead", 
	$asm06.System.Net.WebClient.WebClientWriteStream.prototype.get_CanRead, null);
JSIL.MakeProperty($asm06.System.Net.WebClient.WebClientWriteStream.prototype, "CanSeek", 
	$asm06.System.Net.WebClient.WebClientWriteStream.prototype.get_CanSeek, null);
JSIL.MakeProperty($asm06.System.Net.WebClient.WebClientWriteStream.prototype, "CanWrite", 
	$asm06.System.Net.WebClient.WebClientWriteStream.prototype.get_CanWrite, null);
JSIL.MakeProperty($asm06.System.Net.WebClient.WebClientWriteStream.prototype, "CanTimeout", 
	$asm06.System.Net.WebClient.WebClientWriteStream.prototype.get_CanTimeout, null);
JSIL.MakeProperty($asm06.System.Net.WebClient.WebClientWriteStream.prototype, "ReadTimeout", 
	$asm06.System.Net.WebClient.WebClientWriteStream.prototype.get_ReadTimeout, $asm06.System.Net.WebClient.WebClientWriteStream.prototype.set_ReadTimeout);
JSIL.MakeProperty($asm06.System.Net.WebClient.WebClientWriteStream.prototype, "WriteTimeout", 
	$asm06.System.Net.WebClient.WebClientWriteStream.prototype.get_WriteTimeout, $asm06.System.Net.WebClient.WebClientWriteStream.prototype.set_WriteTimeout);
JSIL.MakeProperty($asm06.System.Net.WebClient.WebClientWriteStream.prototype, "Length", 
	$asm06.System.Net.WebClient.WebClientWriteStream.prototype.get_Length, null);
JSIL.MakeProperty($asm06.System.Net.WebClient.WebClientWriteStream.prototype, "Position", 
	$asm06.System.Net.WebClient.WebClientWriteStream.prototype.get_Position, $asm06.System.Net.WebClient.WebClientWriteStream.prototype.set_Position);
$asm06.System.Net.WebClient.WebClientWriteStream.prototype.m_request = null;
$asm06.System.Net.WebClient.WebClientWriteStream.prototype.m_stream = null;
$asm06.System.Net.WebClient.WebClientWriteStream.prototype.m_WebClient = null;
$asm06.System.Net.WebClient.WebClientWriteStream.prototype.m_disposed = 0;

$asm06.System.Net.WebClient.$l$gc__DisplayClass1.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm06.System.Net.WebClient.$l$gc__DisplayClass1.prototype.$this = null;
$asm06.System.Net.WebClient.$l$gc__DisplayClass1.prototype.request = null;
$asm06.System.Net.WebClient.$l$gc__DisplayClass1.prototype.writeStream = null;
$asm06.System.Net.WebClient.$l$gc__DisplayClass1.prototype.upCompletionDelegate = null;
$asm06.System.Net.WebClient.$l$gc__DisplayClass1.prototype.downCompletionDelegate = null;

System.Net.OpenReadCompletedEventArgs.prototype._ctor = function (result, exception, cancelled, userToken) {
	System.ComponentModel.AsyncCompletedEventArgs.prototype._ctor.call(this, exception, cancelled, userToken);
	this.m_Result = result;
};
System.Net.OpenReadCompletedEventArgs.prototype.get_Result = function () {
	System.ComponentModel.AsyncCompletedEventArgs.prototype.RaiseExceptionIfNecessary.call(this);
	return this.m_Result;
};
JSIL.MakeProperty(System.Net.OpenReadCompletedEventArgs.prototype, "Result", 
	System.Net.OpenReadCompletedEventArgs.prototype.get_Result, null);
System.Net.OpenReadCompletedEventArgs.prototype.m_Result = null;

System.Net.OpenWriteCompletedEventArgs.prototype._ctor = function (result, exception, cancelled, userToken) {
	System.ComponentModel.AsyncCompletedEventArgs.prototype._ctor.call(this, exception, cancelled, userToken);
	this.m_Result = result;
};
System.Net.OpenWriteCompletedEventArgs.prototype.get_Result = function () {
	System.ComponentModel.AsyncCompletedEventArgs.prototype.RaiseExceptionIfNecessary.call(this);
	return this.m_Result;
};
JSIL.MakeProperty(System.Net.OpenWriteCompletedEventArgs.prototype, "Result", 
	System.Net.OpenWriteCompletedEventArgs.prototype.get_Result, null);
System.Net.OpenWriteCompletedEventArgs.prototype.m_Result = null;

System.Net.DownloadStringCompletedEventArgs.prototype._ctor = function (result, exception, cancelled, userToken) {
	System.ComponentModel.AsyncCompletedEventArgs.prototype._ctor.call(this, exception, cancelled, userToken);
	this.m_Result = result;
};
System.Net.DownloadStringCompletedEventArgs.prototype.get_Result = function () {
	System.ComponentModel.AsyncCompletedEventArgs.prototype.RaiseExceptionIfNecessary.call(this);
	return this.m_Result;
};
JSIL.MakeProperty(System.Net.DownloadStringCompletedEventArgs.prototype, "Result", 
	System.Net.DownloadStringCompletedEventArgs.prototype.get_Result, null);
System.Net.DownloadStringCompletedEventArgs.prototype.m_Result = null;

System.Net.UploadStringCompletedEventArgs.prototype._ctor = function (result, exception, cancelled, userToken) {
	System.ComponentModel.AsyncCompletedEventArgs.prototype._ctor.call(this, exception, cancelled, userToken);
	this.m_Result = result;
};
System.Net.UploadStringCompletedEventArgs.prototype.get_Result = function () {
	System.ComponentModel.AsyncCompletedEventArgs.prototype.RaiseExceptionIfNecessary.call(this);
	return this.m_Result;
};
JSIL.MakeProperty(System.Net.UploadStringCompletedEventArgs.prototype, "Result", 
	System.Net.UploadStringCompletedEventArgs.prototype.get_Result, null);
System.Net.UploadStringCompletedEventArgs.prototype.m_Result = null;

System.Net.DownloadProgressChangedEventArgs.prototype._ctor = function (progressPercentage, userToken, bytesReceived, totalBytesToReceive) {
	System.ComponentModel.ProgressChangedEventArgs.prototype._ctor.call(this, progressPercentage, userToken);
	this.m_BytesReceived = bytesReceived;
	this.m_TotalBytesToReceive = totalBytesToReceive;
};
System.Net.DownloadProgressChangedEventArgs.prototype.get_BytesReceived = function () {
	return this.m_BytesReceived;
};
System.Net.DownloadProgressChangedEventArgs.prototype.get_TotalBytesToReceive = function () {
	return this.m_TotalBytesToReceive;
};
JSIL.MakeProperty(System.Net.DownloadProgressChangedEventArgs.prototype, "BytesReceived", 
	System.Net.DownloadProgressChangedEventArgs.prototype.get_BytesReceived, null);
JSIL.MakeProperty(System.Net.DownloadProgressChangedEventArgs.prototype, "TotalBytesToReceive", 
	System.Net.DownloadProgressChangedEventArgs.prototype.get_TotalBytesToReceive, null);
System.Net.DownloadProgressChangedEventArgs.prototype.m_BytesReceived = 0;
System.Net.DownloadProgressChangedEventArgs.prototype.m_TotalBytesToReceive = 0;

System.Net.UploadProgressChangedEventArgs.prototype._ctor = function (progressPercentage, userToken, bytesSent, totalBytesToSend, bytesReceived, totalBytesToReceive) {
	System.ComponentModel.ProgressChangedEventArgs.prototype._ctor.call(this, progressPercentage, userToken);
	this.m_BytesReceived = bytesReceived;
	this.m_TotalBytesToReceive = totalBytesToReceive;
	this.m_BytesSent = bytesSent;
	this.m_TotalBytesToSend = totalBytesToSend;
};
System.Net.UploadProgressChangedEventArgs.prototype.get_BytesReceived = function () {
	return this.m_BytesReceived;
};
System.Net.UploadProgressChangedEventArgs.prototype.get_TotalBytesToReceive = function () {
	return this.m_TotalBytesToReceive;
};
System.Net.UploadProgressChangedEventArgs.prototype.get_BytesSent = function () {
	return this.m_BytesSent;
};
System.Net.UploadProgressChangedEventArgs.prototype.get_TotalBytesToSend = function () {
	return this.m_TotalBytesToSend;
};
JSIL.MakeProperty(System.Net.UploadProgressChangedEventArgs.prototype, "BytesReceived", 
	System.Net.UploadProgressChangedEventArgs.prototype.get_BytesReceived, null);
JSIL.MakeProperty(System.Net.UploadProgressChangedEventArgs.prototype, "TotalBytesToReceive", 
	System.Net.UploadProgressChangedEventArgs.prototype.get_TotalBytesToReceive, null);
JSIL.MakeProperty(System.Net.UploadProgressChangedEventArgs.prototype, "BytesSent", 
	System.Net.UploadProgressChangedEventArgs.prototype.get_BytesSent, null);
JSIL.MakeProperty(System.Net.UploadProgressChangedEventArgs.prototype, "TotalBytesToSend", 
	System.Net.UploadProgressChangedEventArgs.prototype.get_TotalBytesToSend, null);
System.Net.UploadProgressChangedEventArgs.prototype.m_BytesReceived = 0;
System.Net.UploadProgressChangedEventArgs.prototype.m_TotalBytesToReceive = 0;
System.Net.UploadProgressChangedEventArgs.prototype.m_BytesSent = 0;
System.Net.UploadProgressChangedEventArgs.prototype.m_TotalBytesToSend = 0;

System.Net.WriteStreamClosedEventArgs.prototype._ctor = function (error) {
	System.EventArgs.prototype._ctor.call(this);
	this.m_Error = error;
};
System.Net.WriteStreamClosedEventArgs.prototype.get_Error = function () {
	return this.m_Error;
};
JSIL.MakeProperty(System.Net.WriteStreamClosedEventArgs.prototype, "Error", 
	System.Net.WriteStreamClosedEventArgs.prototype.get_Error, null);
System.Net.WriteStreamClosedEventArgs.prototype.m_Error = null;

$asm06.System.Net.WebClientExtensions.RemoveInternal = function (col, key) {
	col.Remove(key);
};
$asm06.System.Net.WebClientExtensions.GetString = function (encoding, bytes) {
	return encoding.GetString$1(bytes, 0, bytes.length);
};

$asm06.System.Net.NetworkProgressChangedEventArgs.prototype.get_TotalBytes = function () {
	return this.totalBytes;
};
$asm06.System.Net.NetworkProgressChangedEventArgs.prototype.get_ProcessedBytes = function () {
	return this.processedBytes;
};
$asm06.System.Net.NetworkProgressChangedEventArgs.prototype._ctor = function (percentage, processedBytes, totalBytes, userState) {
	System.ComponentModel.ProgressChangedEventArgs.prototype._ctor.call(this, percentage, userState);
	this.processedBytes = processedBytes;
	this.totalBytes = totalBytes;
};
JSIL.MakeProperty($asm06.System.Net.NetworkProgressChangedEventArgs.prototype, "TotalBytes", 
	$asm06.System.Net.NetworkProgressChangedEventArgs.prototype.get_TotalBytes, null);
JSIL.MakeProperty($asm06.System.Net.NetworkProgressChangedEventArgs.prototype, "ProcessedBytes", 
	$asm06.System.Net.NetworkProgressChangedEventArgs.prototype.get_ProcessedBytes, null);
$asm06.System.Net.NetworkProgressChangedEventArgs.prototype.totalBytes = 0;
$asm06.System.Net.NetworkProgressChangedEventArgs.prototype.processedBytes = 0;

System.Net.WebException.prototype._ctor$0 = function () {
	this.m_Status = System.Net.WebExceptionStatus.UnknownError;
	System.InvalidOperationException.prototype._ctor$0.call(this);
};
System.Net.WebException.prototype._ctor$1 = function (message) {
	this._ctor$2(message, null);
};
System.Net.WebException.prototype._ctor$2 = function (message, innerException) {
	this.m_Status = System.Net.WebExceptionStatus.UnknownError;
	System.InvalidOperationException.prototype._ctor$2.call(this, message, innerException);
};
System.Net.WebException.prototype._ctor$3 = function (message, status) {
	this._ctor$5(message, null, status, null);
};
System.Net.WebException.prototype._ctor$4 = function (message, status, internalStatus, innerException) {
	this._ctor$7(
		message, 
		innerException, 
		status, 
		null, 
		internalStatus
	);
};
System.Net.WebException.prototype._ctor$5 = function (message, innerException, status, response) {
	this._ctor$6(
		message, 
		null, 
		innerException, 
		status, 
		response
	);
};
System.Net.WebException.prototype._ctor$6 = function (message, data, innerException, status, response) {
	this.m_Status = System.Net.WebExceptionStatus.UnknownError;
	System.InvalidOperationException.prototype._ctor$2.call(this, (message + data ? (": '" + data + "'") : ""), innerException);
	this.m_Status = status;
	this.m_Response = response;
};
System.Net.WebException.prototype._ctor$7 = function (message, innerException, status, response, internalStatus) {
	this._ctor$8(
		message, 
		null, 
		innerException, 
		status, 
		response, 
		internalStatus
	);
};
System.Net.WebException.prototype._ctor$8 = function (message, data, innerException, status, response, internalStatus) {
	this.m_Status = System.Net.WebExceptionStatus.UnknownError;
	System.InvalidOperationException.prototype._ctor$2.call(this, (message + data ? (": '" + data + "'") : ""), innerException);
	this.m_Status = status;
	this.m_Response = response;
	this.m_InternalStatus = internalStatus;
};
System.Net.WebException.prototype.get_Status = function () {
	return this.m_Status;
};
System.Net.WebException.prototype.get_Response = function () {
	return this.m_Response;
};
System.Net.WebException.prototype.get_InternalStatus = function () {
	return this.m_InternalStatus;
};
JSIL.OverloadedMethod(System.Net.WebException.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.String]], 
		["_ctor$2", [System.String, System.Exception]], 
		["_ctor$3", [System.String, System.Net.WebExceptionStatus]], 
		["_ctor$4", [System.String, System.Net.WebExceptionStatus, System.Net.WebExceptionInternalStatus, System.Exception]], 
		["_ctor$5", [System.String, System.Exception, System.Net.WebExceptionStatus, System.Net.WebResponse]], 
		["_ctor$6", [System.String, System.String, System.Exception, System.Net.WebExceptionStatus, System.Net.WebResponse]], 
		["_ctor$7", [System.String, System.Exception, System.Net.WebExceptionStatus, System.Net.WebResponse, System.Net.WebExceptionInternalStatus]], 
		["_ctor$8", [System.String, System.String, System.Exception, System.Net.WebExceptionStatus, System.Net.WebResponse, System.Net.WebExceptionInternalStatus]]
	]);
JSIL.MakeProperty(System.Net.WebException.prototype, "Status", 
	System.Net.WebException.prototype.get_Status, null);
JSIL.MakeProperty(System.Net.WebException.prototype, "Response", 
	System.Net.WebException.prototype.get_Response, null);
JSIL.MakeProperty(System.Net.WebException.prototype, "InternalStatus", 
	System.Net.WebException.prototype.get_InternalStatus, null);
System.Net.WebException.prototype.m_Status = 0;
System.Net.WebException.prototype.m_Response = null;
System.Net.WebException.prototype.m_InternalStatus = 0;

System.Net.ProtocolViolationException.prototype._ctor$0 = function () {
	System.InvalidOperationException.prototype._ctor$0.call(this);
};
System.Net.ProtocolViolationException.prototype._ctor$1 = function (message) {
	System.InvalidOperationException.prototype._ctor$1.call(this, message);
};
JSIL.OverloadedMethod(System.Net.ProtocolViolationException.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.String]]
	]);

System.Net.WebRequest.get_InternalSyncObject = function () {
	if (System.Net.WebRequest.s_InternalSyncObject === null) {
		var value = new System.Object();
		System.Threading.Interlocked.CompareExchange(/* ref */ new JSIL.MemberReference(System.Net.WebRequest, "s_InternalSyncObject"), value, null);
	}
	return System.Net.WebRequest.s_InternalSyncObject;
};
System.Net.WebRequest.get_PrefixList = function () {
	var internalSyncObject = null;
	if (System.Net.WebRequest.s_PrefixList === null) {
		System.Threading.Monitor.Enter((internalSyncObject = System.Net.WebRequest.InternalSyncObject));
		try {
			if (System.Net.WebRequest.s_PrefixList === null) {
				System.Net.WebRequest.s_PrefixList = new (System.Collections.Generic.List$b1.Of($asm06.System.Net.WebRequestPrefixElement)) ();
			}
		} finally {
			System.Threading.Monitor.Exit(internalSyncObject);
		}
	}
	return System.Net.WebRequest.s_PrefixList;
};
System.Net.WebRequest.set_PrefixList = function (value) {
	System.Net.WebRequest.s_PrefixList = value;
};
System.Net.WebRequest.RegisterPortableWebRequestCreator = function (creator) {
	System.Net.WebRequest.portableWebRequestCreator = creator;
};
System.Net.WebRequest.RegisterPrefix = function (prefix, creator) {
	var uri = new JSIL.Variable(null), internalSyncObject = null;
	var flag = false;
	if (prefix === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["prefix"]);
	}
	if (creator === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["creator"]);
	}
	if (System.Uri.TryCreate$0(prefix, System.UriKind.Absolute, /* ref */ uri)) {
		var text = uri.value.AbsoluteUri;
		if (!(prefix.EndsWith$0("/") || !(uri.value.GetComponents((System.UriComponents.Fragment | System.UriComponents.Path | System.UriComponents.PathAndQuery | System.UriComponents.Query), System.UriFormat.UriEscaped)).Equals$1("/"))) {
			text = text.Substring$1(0, (text.length - 1));
		}
		prefix = text;
	}
	System.Threading.Monitor.Enter((internalSyncObject = System.Net.WebRequest.InternalSyncObject));
	try {
		var list = new (System.Collections.Generic.List$b1.Of($asm06.System.Net.WebRequestPrefixElement)) (JSIL.Cast(System.Net.WebRequest.PrefixList, System.Collections.Generic.IEnumerable$b1.Of($asm06.System.Net.WebRequestPrefixElement)));
	__loop0__: 
		for (var i = 0; i < list.Count; ++i) {
			var webRequestPrefixElement = list.get_Item(i);
			if (prefix.length > webRequestPrefixElement.Prefix.length) {
				break __loop0__;
			}
			if (!((prefix.length !== webRequestPrefixElement.Prefix.length) || (System.String.Compare$1(webRequestPrefixElement.Prefix, prefix, System.StringComparison.OrdinalIgnoreCase) !== 0))) {
				flag = true;
				break __loop0__;
			}
		}
		if (!flag) {
			list.Insert(i, new $asm06.System.Net.WebRequestPrefixElement(prefix, creator));
			System.Net.WebRequest.PrefixList = list;
		}
	} finally {
		System.Threading.Monitor.Exit(internalSyncObject);
	}
	return !flag;
};
System.Net.WebRequest.CreateHttp$0 = function (requestUri) {
	if (System.Uri.op_Equality(requestUri, null)) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["requestUri"]);
	}
	if (!(!(requestUri.Scheme != System.Uri.UriSchemeHttp) || !(requestUri.Scheme != System.Uri.UriSchemeHttps))) {
		throw JSIL.New(System.NotSupportedException, "_ctor$1", [$asm06.System.SR.GetString$2("net_unknown_prefix")]);
	}
	var httpWebRequest = JSIL.Cast(System.Net.WebRequest.portableWebRequestCreator.IWebRequestCreate_Create(requestUri), System.Net.HttpWebRequest);
	httpWebRequest.AllowReadStreamBuffering = false;
	return httpWebRequest;
};
System.Net.WebRequest.CreateHttp$1 = function (requestUriString) {
	if (requestUriString === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["requestUriString"]);
	}
	return System.Net.WebRequest.CreateHttp$0(JSIL.New(System.Uri, "_ctor$0", [requestUriString]));
};
System.Net.WebRequest.Create$0 = function (requestUri) {
	if (System.Uri.op_Equality(requestUri, null)) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["requestUri"]);
	}
	var webRequestPrefixElement = null;
	var flag = false;
	var absoluteUri = requestUri.AbsoluteUri;
	var length = absoluteUri.length;
	var prefixList = System.Net.WebRequest.PrefixList;
__loop0__: 
	for (var i = 0; i < prefixList.Count; ++i) {
		webRequestPrefixElement = prefixList.get_Item(i);
		if (!((length < webRequestPrefixElement.Prefix.length) || (System.String.Compare$5(
						webRequestPrefixElement.Prefix, 
						0, 
						absoluteUri, 
						0, 
						webRequestPrefixElement.Prefix.length, 
						System.StringComparison.OrdinalIgnoreCase
					) !== 0))) {
			flag = true;
			break __loop0__;
		}
	}
	if (flag) {
		return webRequestPrefixElement.Creator.IWebRequestCreate_Create(requestUri);
	}
	throw JSIL.New(System.NotSupportedException, "_ctor$1", [$asm06.System.SR.GetString$2("net_unknown_prefix")]);
};
System.Net.WebRequest.Create$1 = function (requestUriString) {
	if (requestUriString === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["requestUriString"]);
	}
	return System.Net.WebRequest.Create$0(JSIL.New(System.Uri, "_ctor$0", [requestUriString]));
};
System.Net.WebRequest.prototype.get_CreatorInstance = function () {
	return null;
};
System.Net.WebRequest.prototype.get_Credentials = function () {
	throw JSIL.New(System.NotImplementedException, "_ctor$1", [$asm06.System.SR.GetString$2("net_PropertyNotImplementedException")]);
};
System.Net.WebRequest.prototype.set_Credentials = function (value) {
	throw JSIL.New(System.NotImplementedException, "_ctor$1", [$asm06.System.SR.GetString$2("net_PropertyNotImplementedException")]);
};
System.Net.WebRequest.prototype.get_UseDefaultCredentials = function () {
	throw JSIL.New(System.NotImplementedException, "_ctor$1", [$asm06.System.SR.GetString$2("net_PropertyNotImplementedException")]);
};
System.Net.WebRequest.prototype.set_UseDefaultCredentials = function (value) {
	throw JSIL.New(System.NotImplementedException, "_ctor$1", [$asm06.System.SR.GetString$2("net_PropertyNotImplementedException")]);
};
System.Net.WebRequest.prototype.get_ContentLength = function () {
	throw JSIL.New(System.NotImplementedException, "_ctor$1", [$asm06.System.SR.GetString$2("net_PropertyNotImplementedException")]);
};
System.Net.WebRequest.prototype.set_ContentLength = function (value) {
	throw JSIL.New(System.NotImplementedException, "_ctor$1", [$asm06.System.SR.GetString$2("net_PropertyNotImplementedException")]);
};
System.Net.WebRequest.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
JSIL.OverloadedMethod(System.Net.WebRequest, "CreateHttp", [
		["CreateHttp$0", [System.Uri]], 
		["CreateHttp$1", [System.String]]
	]);
JSIL.OverloadedMethod(System.Net.WebRequest, "Create", [
		["Create$0", [System.Uri]], 
		["Create$1", [System.String]]
	]);
JSIL.MakeProperty(System.Net.WebRequest, "InternalSyncObject", 
	System.Net.WebRequest.get_InternalSyncObject, null);
JSIL.MakeProperty(System.Net.WebRequest, "PrefixList", 
	System.Net.WebRequest.get_PrefixList, System.Net.WebRequest.set_PrefixList);
JSIL.MakeProperty(System.Net.WebRequest.prototype, "CreatorInstance", 
	System.Net.WebRequest.prototype.get_CreatorInstance, null);
JSIL.MakeProperty(System.Net.WebRequest.prototype, "ContentType", 
	System.Net.WebRequest.prototype.get_ContentType, System.Net.WebRequest.prototype.set_ContentType);
JSIL.MakeProperty(System.Net.WebRequest.prototype, "Headers", 
	System.Net.WebRequest.prototype.get_Headers, System.Net.WebRequest.prototype.set_Headers);
JSIL.MakeProperty(System.Net.WebRequest.prototype, "Method", 
	System.Net.WebRequest.prototype.get_Method, System.Net.WebRequest.prototype.set_Method);
JSIL.MakeProperty(System.Net.WebRequest.prototype, "RequestUri", 
	System.Net.WebRequest.prototype.get_RequestUri, null);
JSIL.MakeProperty(System.Net.WebRequest.prototype, "Credentials", 
	System.Net.WebRequest.prototype.get_Credentials, System.Net.WebRequest.prototype.set_Credentials);
JSIL.MakeProperty(System.Net.WebRequest.prototype, "UseDefaultCredentials", 
	System.Net.WebRequest.prototype.get_UseDefaultCredentials, System.Net.WebRequest.prototype.set_UseDefaultCredentials);
JSIL.MakeProperty(System.Net.WebRequest.prototype, "ContentLength", 
	System.Net.WebRequest.prototype.get_ContentLength, System.Net.WebRequest.prototype.set_ContentLength);
System.Net.WebRequest.portableWebRequestCreator = null;
System.Net.WebRequest.s_PrefixList = null;
System.Net.WebRequest.s_InternalSyncObject = null;

System.Net.HttpWebRequest.prototype._ctor = function () {
	System.Net.WebRequest.prototype._ctor.call(this);
	this._HttpRequestHeaders = JSIL.New(System.Net.WebHeaderCollection, "_ctor$1", [System.Net.WebHeaderCollectionType.HttpWebRequest]);
};
System.Net.HttpWebRequest.prototype.get_ContentType = function () {
	return this._HttpRequestHeaders.get_Item$0("Content-Type");
};
System.Net.HttpWebRequest.prototype.set_ContentType = function (value) {
	this._HttpRequestHeaders.SetSpecialHeader("Content-Type", value);
};
System.Net.HttpWebRequest.prototype.get_Accept = function () {
	return this._HttpRequestHeaders.get_Item$0("Accept");
};
System.Net.HttpWebRequest.prototype.set_Accept = function (value) {
	this._HttpRequestHeaders.SetSpecialHeader("Accept", value);
};
System.Net.HttpWebRequest.prototype.get_HaveResponse = function () {
	throw JSIL.New(System.NotImplementedException, "_ctor$1", [$asm06.System.SR.GetString$2("net_PropertyNotImplementedException")]);
};
System.Net.HttpWebRequest.prototype.get_Headers = function () {
	return this._HttpRequestHeaders;
};
System.Net.HttpWebRequest.prototype.set_Headers = function (value) {
	var webHeaderCollection = JSIL.New(System.Net.WebHeaderCollection, "_ctor$1", [System.Net.WebHeaderCollectionType.HttpWebRequest]);
	var allKeys = value.AllKeys;
__loop0__: 
	for (var i = 0; i < allKeys.length; ++i) {
		var name = allKeys[i];
		webHeaderCollection.Add(name, value.get_Item$0(name));
	}
	this._HttpRequestHeaders = webHeaderCollection;
};
System.Net.HttpWebRequest.prototype.get_AllowReadStreamBuffering = function () {
	throw JSIL.New(System.NotImplementedException, "_ctor$1", [$asm06.System.SR.GetString$2("net_PropertyNotImplementedException")]);
};
System.Net.HttpWebRequest.prototype.set_AllowReadStreamBuffering = function (value) {
	throw JSIL.New(System.NotImplementedException, "_ctor$1", [$asm06.System.SR.GetString$2("net_PropertyNotImplementedException")]);
};
System.Net.HttpWebRequest.prototype.get_AllowWriteStreamBuffering = function () {
	throw JSIL.New(System.NotImplementedException, "_ctor$1", [$asm06.System.SR.GetString$2("net_PropertyNotImplementedException")]);
};
System.Net.HttpWebRequest.prototype.set_AllowWriteStreamBuffering = function (value) {
	throw JSIL.New(System.NotImplementedException, "_ctor$1", [$asm06.System.SR.GetString$2("net_PropertyNotImplementedException")]);
};
System.Net.HttpWebRequest.prototype.get_Method = function () {
	throw JSIL.New(System.NotImplementedException, "_ctor$1", [$asm06.System.SR.GetString$2("net_PropertyNotImplementedException")]);
};
System.Net.HttpWebRequest.prototype.set_Method = function (value) {
	throw JSIL.New(System.NotImplementedException, "_ctor$1", [$asm06.System.SR.GetString$2("net_PropertyNotImplementedException")]);
};
System.Net.HttpWebRequest.prototype.get_RequestUri = function () {
	throw JSIL.New(System.NotImplementedException, "_ctor$1", [$asm06.System.SR.GetString$2("net_PropertyNotImplementedException")]);
};
System.Net.HttpWebRequest.prototype.Abort = function () {
	throw JSIL.New(System.NotImplementedException, "_ctor$1", [$asm06.System.SR.GetString$2("net_MethodNotImplementedException")]);
};
System.Net.HttpWebRequest.prototype.BeginGetRequestStream = function (callback, state) {
	throw JSIL.New(System.NotImplementedException, "_ctor$1", [$asm06.System.SR.GetString$2("net_MethodNotImplementedException")]);
};
System.Net.HttpWebRequest.prototype.BeginGetResponse = function (callback, state) {
	throw JSIL.New(System.NotImplementedException, "_ctor$1", [$asm06.System.SR.GetString$2("net_MethodNotImplementedException")]);
};
System.Net.HttpWebRequest.prototype.EndGetRequestStream = function (asyncResult) {
	throw JSIL.New(System.NotImplementedException, "_ctor$1", [$asm06.System.SR.GetString$2("net_MethodNotImplementedException")]);
};
System.Net.HttpWebRequest.prototype.EndGetResponse = function (asyncResult) {
	throw JSIL.New(System.NotImplementedException, "_ctor$1", [$asm06.System.SR.GetString$2("net_MethodNotImplementedException")]);
};
System.Net.HttpWebRequest.prototype.get_CookieContainer = function () {
	throw JSIL.New(System.NotImplementedException, "_ctor$1", [$asm06.System.SR.GetString$2("net_PropertyNotImplementedException")]);
};
System.Net.HttpWebRequest.prototype.set_CookieContainer = function (value) {
	throw JSIL.New(System.NotImplementedException, "_ctor$1", [$asm06.System.SR.GetString$2("net_PropertyNotImplementedException")]);
};
System.Net.HttpWebRequest.prototype.get_UserAgent = function () {
	return this.GetUserAgent();
};
System.Net.HttpWebRequest.prototype.set_UserAgent = function (value) {
	this.SetUserAgent(value);
};
System.Net.HttpWebRequest.prototype.GetUserAgent = function () {
	throw JSIL.New(System.NotImplementedException, "_ctor$1", [$asm06.System.SR.GetString$2("net_PropertyNotImplementedException")]);
};
System.Net.HttpWebRequest.prototype.SetUserAgent = function (value) {
	throw JSIL.New(System.NotImplementedException, "_ctor$1", [$asm06.System.SR.GetString$2("net_PropertyNotImplementedException")]);
};
System.Net.HttpWebRequest.prototype.get_AllowAutoRedirect = function () {
	throw JSIL.New(System.NotImplementedException, "_ctor$1", [$asm06.System.SR.GetString$2("net_PropertyNotImplementedException")]);
};
System.Net.HttpWebRequest.prototype.set_AllowAutoRedirect = function (value) {
	throw JSIL.New(System.NotImplementedException, "_ctor$1", [$asm06.System.SR.GetString$2("net_PropertyNotImplementedException")]);
};
System.Net.HttpWebRequest.prototype.get_SupportsCookieContainer = function () {
	return false;
};
JSIL.MakeProperty(System.Net.HttpWebRequest.prototype, "ContentType", 
	System.Net.HttpWebRequest.prototype.get_ContentType, System.Net.HttpWebRequest.prototype.set_ContentType);
JSIL.MakeProperty(System.Net.HttpWebRequest.prototype, "Accept", 
	System.Net.HttpWebRequest.prototype.get_Accept, System.Net.HttpWebRequest.prototype.set_Accept);
JSIL.MakeProperty(System.Net.HttpWebRequest.prototype, "HaveResponse", 
	System.Net.HttpWebRequest.prototype.get_HaveResponse, null);
JSIL.MakeProperty(System.Net.HttpWebRequest.prototype, "Headers", 
	System.Net.HttpWebRequest.prototype.get_Headers, System.Net.HttpWebRequest.prototype.set_Headers);
JSIL.MakeProperty(System.Net.HttpWebRequest.prototype, "AllowReadStreamBuffering", 
	System.Net.HttpWebRequest.prototype.get_AllowReadStreamBuffering, System.Net.HttpWebRequest.prototype.set_AllowReadStreamBuffering);
JSIL.MakeProperty(System.Net.HttpWebRequest.prototype, "AllowWriteStreamBuffering", 
	System.Net.HttpWebRequest.prototype.get_AllowWriteStreamBuffering, System.Net.HttpWebRequest.prototype.set_AllowWriteStreamBuffering);
JSIL.MakeProperty(System.Net.HttpWebRequest.prototype, "Method", 
	System.Net.HttpWebRequest.prototype.get_Method, System.Net.HttpWebRequest.prototype.set_Method);
JSIL.MakeProperty(System.Net.HttpWebRequest.prototype, "RequestUri", 
	System.Net.HttpWebRequest.prototype.get_RequestUri, null);
JSIL.MakeProperty(System.Net.HttpWebRequest.prototype, "CookieContainer", 
	System.Net.HttpWebRequest.prototype.get_CookieContainer, System.Net.HttpWebRequest.prototype.set_CookieContainer);
JSIL.MakeProperty(System.Net.HttpWebRequest.prototype, "UserAgent", 
	System.Net.HttpWebRequest.prototype.get_UserAgent, System.Net.HttpWebRequest.prototype.set_UserAgent);
JSIL.MakeProperty(System.Net.HttpWebRequest.prototype, "AllowAutoRedirect", 
	System.Net.HttpWebRequest.prototype.get_AllowAutoRedirect, System.Net.HttpWebRequest.prototype.set_AllowAutoRedirect);
JSIL.MakeProperty(System.Net.HttpWebRequest.prototype, "SupportsCookieContainer", 
	System.Net.HttpWebRequest.prototype.get_SupportsCookieContainer, null);
Object.defineProperty(System.Net.HttpWebRequest, "ContinueHeader", {
		"value": "100-continue"}
);
System.Net.HttpWebRequest.prototype._HttpRequestHeaders = null;

System.Net.WebResponse.prototype.get_Headers = function () {
	throw JSIL.New(System.NotImplementedException, "_ctor$1", [$asm06.System.SR.GetString$2("net_PropertyNotImplementedException")]);
};
System.Net.WebResponse.prototype.get_SupportsHeaders = function () {
	return false;
};
System.Net.WebResponse.prototype.Close = function () {
};
System.Net.WebResponse.prototype.Dispose$0 = function () {
	this.Dispose$1(true);
	System.GC.SuppressFinalize(this);
};
System.Net.WebResponse.prototype.Dispose$1 = function (disposing) {
	if (disposing) {
		this.Close();
	}
};
System.Net.WebResponse.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
JSIL.OverloadedMethod(System.Net.WebResponse.prototype, "Dispose", [
		["Dispose$0", []], 
		["Dispose$1", [System.Boolean]]
	]);
JSIL.MakeProperty(System.Net.WebResponse.prototype, "ContentLength", 
	System.Net.WebResponse.prototype.get_ContentLength, null);
JSIL.MakeProperty(System.Net.WebResponse.prototype, "ContentType", 
	System.Net.WebResponse.prototype.get_ContentType, null);
JSIL.MakeProperty(System.Net.WebResponse.prototype, "ResponseUri", 
	System.Net.WebResponse.prototype.get_ResponseUri, null);
JSIL.MakeProperty(System.Net.WebResponse.prototype, "Headers", 
	System.Net.WebResponse.prototype.get_Headers, null);
JSIL.MakeProperty(System.Net.WebResponse.prototype, "SupportsHeaders", 
	System.Net.WebResponse.prototype.get_SupportsHeaders, null);

System.Net.HttpWebResponse.prototype.get_Method = function () {
	throw JSIL.New(System.NotImplementedException, "_ctor$1", [$asm06.System.SR.GetString$2("net_PropertyNotImplementedException")]);
};
System.Net.HttpWebResponse.prototype.get_StatusCode = function () {
	throw JSIL.New(System.NotImplementedException, "_ctor$1", [$asm06.System.SR.GetString$2("net_PropertyNotImplementedException")]);
};
System.Net.HttpWebResponse.prototype.get_StatusDescription = function () {
	throw JSIL.New(System.NotImplementedException, "_ctor$1", [$asm06.System.SR.GetString$2("net_PropertyNotImplementedException")]);
};
System.Net.HttpWebResponse.prototype.get_Cookies = function () {
	throw JSIL.New(System.NotImplementedException, "_ctor$1", [$asm06.System.SR.GetString$2("net_PropertyNotImplementedException")]);
};
System.Net.HttpWebResponse.prototype._ctor = function () {
	System.Net.WebResponse.prototype._ctor.call(this);
};
JSIL.MakeProperty(System.Net.HttpWebResponse.prototype, "Method", 
	System.Net.HttpWebResponse.prototype.get_Method, null);
JSIL.MakeProperty(System.Net.HttpWebResponse.prototype, "StatusCode", 
	System.Net.HttpWebResponse.prototype.get_StatusCode, null);
JSIL.MakeProperty(System.Net.HttpWebResponse.prototype, "StatusDescription", 
	System.Net.HttpWebResponse.prototype.get_StatusDescription, null);
JSIL.MakeProperty(System.Net.HttpWebResponse.prototype, "Cookies", 
	System.Net.HttpWebResponse.prototype.get_Cookies, null);

System.Net.WebHeaderCollection.prototype._ctor$0 = function () {
	this._ctor$1(System.Net.WebHeaderCollectionType.Unknown);
};
System.Net.WebHeaderCollection.prototype.get_Count = function () {
	return this.InnerCollection.Count;
};
System.Net.WebHeaderCollection.prototype.get_AllKeys = function () {
	var keys = JSIL.Cast(this.InnerCollection.Keys, System.Collections.Generic.Dictionary$b2.KeyCollection.Of(System.String, System.Collections.Generic.List$b1.Of(System.String)));
	var array = JSIL.Array.New(System.String, keys.Count);
	keys.CopyTo(array, 0);
	return array;
};
System.Net.WebHeaderCollection.prototype.get_Item$0 = function (name) {
	return this.InnerCollection.Get$0(name);
};
System.Net.WebHeaderCollection.prototype.set_Item$0 = function (name, value) {
	name = $asm06.System.Net.ValidationHelper.CheckBadWebHeaderChars(name, false);
	value = $asm06.System.Net.ValidationHelper.CheckBadWebHeaderChars(value, true);
	this.ThrowOnRestrictedHeader(name, value);
	this.InnerCollection.Set(name, value);
};
System.Net.WebHeaderCollection.prototype.get_Item$1 = function (header) {
	if (!this.AllowHttpRequestHeader) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm06.System.SR.GetString$2("net_headers_req")]);
	}
	return this.get_Item$0($asm06.System.Net.HttpHeaderToName.HeaderNames.get_Item(header));
};
System.Net.WebHeaderCollection.prototype.set_Item$1 = function (header, value) {
	if (!this.AllowHttpRequestHeader) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm06.System.SR.GetString$2("net_headers_req")]);
	}
	this.set_Item$0($asm06.System.Net.HttpHeaderToName.HeaderNames.get_Item(header), value);
};
System.Net.WebHeaderCollection.prototype.IEnumerable_GetEnumerator = function () {
	return JSIL.Cast(this.InnerCollection.Keys, System.Collections.Generic.Dictionary$b2.KeyCollection.Of(System.String, System.Collections.Generic.List$b1.Of(System.String))).GetEnumerator();
};
System.Net.WebHeaderCollection.prototype._ctor$1 = function (type) {
	System.Object.prototype._ctor.call(this);
	this.m_Type = type;
};
System.Net.WebHeaderCollection.prototype.Add = function (name, value) {
	name = $asm06.System.Net.ValidationHelper.CheckBadWebHeaderChars(name, false);
	value = $asm06.System.Net.ValidationHelper.CheckBadWebHeaderChars(value, true);
	this.ThrowOnRestrictedHeader(name, value);
	this.InnerCollection.Add(name, value);
};
System.Net.WebHeaderCollection.prototype.Remove = function (name) {
	this.InnerCollection.Remove(name);
};
System.Net.WebHeaderCollection.prototype.SetSpecialHeader = function (HeaderName, value) {
	value = $asm06.System.Net.ValidationHelper.CheckBadWebHeaderChars(value, true);
	this.InnerCollection.Remove(HeaderName);
	if (value.length !== 0) {
		this.InnerCollection.Add(HeaderName, value);
	}
};
System.Net.WebHeaderCollection.prototype.get_AllowHttpRequestHeader = function () {
	if (this.m_Type === 0) {
		this.m_Type = System.Net.WebHeaderCollectionType.WebRequest;
	}
	return ((this.m_Type === System.Net.WebHeaderCollectionType.WebRequest) || (this.m_Type === System.Net.WebHeaderCollectionType.HttpWebRequest));
};
System.Net.WebHeaderCollection.prototype.ThrowOnRestrictedHeader = function (name, value) {
	if (this.m_Type === System.Net.WebHeaderCollectionType.HttpWebRequest) {
		var headerInfo = System.Net.WebHeaderCollection.m_HInfo.get_Item(name);
		if (!(!headerInfo.IsRequestRestricted && !this.IsRestrictedHeader(name, value))) {
			throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm06.System.SR.GetString$0("net_headerrestrict_resp", [headerInfo.HeaderName]), "name"]);
		}
		if (headerInfo.HasRequestProperty) {
			throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm06.System.SR.GetString$2("net_headerrestrict")]);
		}
	}
};
System.Net.WebHeaderCollection.prototype.IsRestrictedHeader = function (name, value) {
	return ((name.StartsWith$1("proxy-", System.StringComparison.OrdinalIgnoreCase) && 
			!name.Equals$2("Proxy-Authorization", System.StringComparison.OrdinalIgnoreCase)) || 
		name.StartsWith$1("sec-", System.StringComparison.OrdinalIgnoreCase) || this.ContainsSoapActionUpnpVulnerability(name, value));
};
System.Net.WebHeaderCollection.prototype.ContainsSoapActionUpnpVulnerability = function (name, value) {
	if (name.Equals$2("SOAPAction", System.StringComparison.OrdinalIgnoreCase)) {
		var num = value.IndexOf$6("urn:schemas-upnp-org", System.StringComparison.OrdinalIgnoreCase);
		return ((num >= 0) && (value.IndexOf$7("#", (num + "urn:schemas-upnp-org".length), System.StringComparison.OrdinalIgnoreCase) >= 0));
	}
	return false;
};
System.Net.WebHeaderCollection.prototype.get_InnerCollection = function () {
	if (this.m_InnerCollection === null) {
		this.m_InnerCollection = JSIL.New($asm06.System.Net.NameValueFromDictionary, "_ctor$0", [16, $asm06.System.Net.CaseInsensitiveAscii.StaticInstance]);
	}
	return this.m_InnerCollection;
};
System.Net.WebHeaderCollection.prototype.SetAddVerified = function (name, value) {
	if (System.Net.WebHeaderCollection.m_HInfo.get_Item(name).AllowMultiValues) {
		this.InnerCollection.Add(name, value);
		return;
	}
	this.InnerCollection.Set(name, value);
};
JSIL.OverloadedMethod(System.Net.WebHeaderCollection.prototype, "get_Item", [
		["get_Item$0", [System.String]], 
		["get_Item$1", [System.Net.HttpRequestHeader]]
	]);
JSIL.OverloadedMethod(System.Net.WebHeaderCollection.prototype, "set_Item", [
		["set_Item$0", [System.String, System.String]], 
		["set_Item$1", [System.Net.HttpRequestHeader, System.String]]
	]);
JSIL.OverloadedMethod(System.Net.WebHeaderCollection.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Net.WebHeaderCollectionType]]
	]);
JSIL.MakeProperty(System.Net.WebHeaderCollection.prototype, "Count", 
	System.Net.WebHeaderCollection.prototype.get_Count, null);
JSIL.MakeProperty(System.Net.WebHeaderCollection.prototype, "AllKeys", 
	System.Net.WebHeaderCollection.prototype.get_AllKeys, null);
JSIL.MakeProperty(System.Net.WebHeaderCollection.prototype, "Item", 
	System.Net.WebHeaderCollection.prototype.get_Item$0, System.Net.WebHeaderCollection.prototype.set_Item$0);
JSIL.MakeProperty(System.Net.WebHeaderCollection.prototype, "Item", 
	System.Net.WebHeaderCollection.prototype.get_Item$1, System.Net.WebHeaderCollection.prototype.set_Item$1);
JSIL.MakeProperty(System.Net.WebHeaderCollection.prototype, "AllowHttpRequestHeader", 
	System.Net.WebHeaderCollection.prototype.get_AllowHttpRequestHeader, null);
JSIL.MakeProperty(System.Net.WebHeaderCollection.prototype, "InnerCollection", 
	System.Net.WebHeaderCollection.prototype.get_InnerCollection, null);
Object.defineProperty(System.Net.WebHeaderCollection, "c_ApproxHighAvgNumHeaders", {
		"value": 16}
);
System.Net.WebHeaderCollection.prototype.m_Type = 0;
System.Net.WebHeaderCollection.m_HInfo = null;
System.Net.WebHeaderCollection.prototype.m_InnerCollection = null;
System.Net.WebHeaderCollection._cctor = function () {
	System.Net.WebHeaderCollection.m_HInfo = new System.Net.HeaderInfoTable();
};

$asm06.System.Net.NameValueFromDictionary.prototype._ctor$0 = function (capacity, comparer) {
	System.Collections.Generic.Dictionary$b2.Of(System.String, System.Collections.Generic.List$b1.Of(System.String)).prototype._ctor$3.call(this, capacity, comparer);
};
$asm06.System.Net.NameValueFromDictionary.prototype._ctor$1 = function () {
	System.Collections.Generic.Dictionary$b2.Of(System.String, System.Collections.Generic.List$b1.Of(System.String)).prototype._ctor$0.call(this);
};
$asm06.System.Net.NameValueFromDictionary.prototype.Add = function (key, value) {
	if (System.Collections.Generic.Dictionary$b2.Of(System.String, System.Collections.Generic.List$b1.Of(System.String)).prototype.ContainsKey.call(this, key)) {
		var list = System.Collections.Generic.Dictionary$b2.Of(System.String, System.Collections.Generic.List$b1.Of(System.String)).prototype.get_Item.call(this, key);
	} else {
		list = new (System.Collections.Generic.List$b1.Of(System.String)) ();
	}
	list.Add(value);
	System.Collections.Generic.Dictionary$b2.Of(System.String, System.Collections.Generic.List$b1.Of(System.String)).prototype.set_Item.call(this, key, list);
};
$asm06.System.Net.NameValueFromDictionary.prototype.Set = function (key, value) {
	System.Collections.Generic.Dictionary$b2.Of(System.String, System.Collections.Generic.List$b1.Of(System.String)).prototype.set_Item.call(this, key, new (System.Collections.Generic.List$b1.Of(System.String)) ().__Initialize__([value]));
};
$asm06.System.Net.NameValueFromDictionary.prototype.GetValues$0 = function (name) {
	var array = null;
	if (System.Collections.Generic.Dictionary$b2.Of(System.String, System.Collections.Generic.List$b1.Of(System.String)).prototype.ContainsKey.call(this, name)) {
		var list = System.Collections.Generic.Dictionary$b2.Of(System.String, System.Collections.Generic.List$b1.Of(System.String)).prototype.get_Item.call(this, name);
		if (list !== null) {
			array = JSIL.Array.New(System.String, list.Count);
			list.CopyTo$0(array);
		}
	}
	return array;
};
$asm06.System.Net.NameValueFromDictionary.prototype.GetValues$1 = function (index) {
	return this.GetValues$0(this.GetKey(index));
};
$asm06.System.Net.NameValueFromDictionary.prototype.Get$0 = function (name) {
	var text = null;
	if (System.Collections.Generic.Dictionary$b2.Of(System.String, System.Collections.Generic.List$b1.Of(System.String)).prototype.ContainsKey.call(this, name)) {
		var list = System.Collections.Generic.Dictionary$b2.Of(System.String, System.Collections.Generic.List$b1.Of(System.String)).prototype.get_Item.call(this, name);
	__loop0__: 
		for (var i = 0; i < list.Count; ++i) {
			if (i === 0) {
				text = list.get_Item(i);
			} else {
				text = ((text + list.get_Item(i)));
			}
			if (i !== (list.Count - 1)) {
				text = ((text + ","));
			}
		}
	}
	return text;
};
$asm06.System.Net.NameValueFromDictionary.prototype.Get$1 = function (index) {
	return this.Get$0(this.GetKey(index));
};
$asm06.System.Net.NameValueFromDictionary.prototype.GetKey = function (index) {
	var keys = System.Collections.Generic.Dictionary$b2.Of(System.String, System.Collections.Generic.List$b1.Of(System.String)).prototype.get_Keys.call(this);
	var num = 0;
	var enumerator = keys.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current;
			if (num++ === index) {
				return current;
			}
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	return System.String.Empty;
};
JSIL.OverloadedMethod(System.Net.NameValueFromDictionary.prototype, "_ctor", [
		["_ctor$0", [System.Int32, System.Collections.Generic.IEqualityComparer$b1.Of(System.String)]], 
		["_ctor$1", []]
	]);
JSIL.OverloadedMethod(System.Net.NameValueFromDictionary.prototype, "GetValues", [
		["GetValues$0", [System.String]], 
		["GetValues$1", [System.Int32]]
	]);
JSIL.OverloadedMethod(System.Net.NameValueFromDictionary.prototype, "Get", [
		["Get$0", [System.String]], 
		["Get$1", [System.Int32]]
	]);

$asm06.System.Net.CaseInsensitiveAscii.prototype.GetHashCode = function (myString) {
	if (myString === null) {
		return 0;
	}
	var length = myString.length;
	if (length === 0) {
		return 0;
	}
	return (length ^ (($asm06.System.Net.CaseInsensitiveAscii.AsciiToLower[(myString[0]).charCodeAt(0)] << 24) ^ ($asm06.System.Net.CaseInsensitiveAscii.AsciiToLower[(myString[(length - 1)]).charCodeAt(0)] << 16)));
};
$asm06.System.Net.CaseInsensitiveAscii.prototype.FastGetHashCode = function (myString) {
	var num = myString.length;
	if (num !== 0) {
		num = (num ^ (($asm06.System.Net.CaseInsensitiveAscii.AsciiToLower[(myString[0]).charCodeAt(0)] << 24) ^ ($asm06.System.Net.CaseInsensitiveAscii.AsciiToLower[(myString[(num - 1)]).charCodeAt(0)] << 16)));
	}
	return num;
};
$asm06.System.Net.CaseInsensitiveAscii.prototype.Equals = function (firstString, secondString) {
	if (firstString === null) {
		return (secondString === null);
	}
	if (secondString !== null) {
		var i = firstString.length;
		if (!((i !== secondString.length) || (this.FastGetHashCode(firstString) !== this.FastGetHashCode(secondString)))) {
			var arg_31_0 = firstString.length;
		__loop0__: 
			while (i > 0) {
				--i;
				if ($asm06.System.Net.CaseInsensitiveAscii.AsciiToLower[firstString[i].charCodeAt(0)] !== $asm06.System.Net.CaseInsensitiveAscii.AsciiToLower[secondString[i].charCodeAt(0)]) {
					return false;
				}
			}
			return true;
		}
	}
	return false;
};
$asm06.System.Net.CaseInsensitiveAscii.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm06.System.Net.CaseInsensitiveAscii.StaticInstance = null;
$asm06.System.Net.CaseInsensitiveAscii.AsciiToLower = null;
$asm06.System.Net.CaseInsensitiveAscii._cctor = function () {
	$asm06.System.Net.CaseInsensitiveAscii.StaticInstance = new $asm06.System.Net.CaseInsensitiveAscii();
	$asm06.System.Net.CaseInsensitiveAscii.AsciiToLower = JSIL.Array.New(System.Byte, [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255]);
};

Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "CacheControl", {
		"value": "Cache-Control"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "Connection", {
		"value": "Connection"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "Date", {
		"value": "Date"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "KeepAlive", {
		"value": "Keep-Alive"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "Pragma", {
		"value": "Pragma"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "Trailer", {
		"value": "Trailer"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "TransferEncoding", {
		"value": "Transfer-Encoding"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "Upgrade", {
		"value": "Upgrade"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "Via", {
		"value": "Via"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "Warning", {
		"value": "Warning"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "Allow", {
		"value": "Allow"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "ContentEncoding", {
		"value": "Content-Encoding"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "ContentLanguage", {
		"value": "Content-Language"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "ContentLength", {
		"value": "Content-Length"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "ContentLocation", {
		"value": "Content-Location"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "ContentMD5", {
		"value": "Content-MD5"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "ContentRange", {
		"value": "Content-Range"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "ContentType", {
		"value": "Content-Type"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "Expires", {
		"value": "Expires"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "LastModified", {
		"value": "Last-Modified"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "Accept", {
		"value": "Accept"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "AcceptCharset", {
		"value": "Accept-Charset"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "AcceptEncoding", {
		"value": "Accept-Encoding"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "AcceptLanguage", {
		"value": "Accept-Language"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "Authorization", {
		"value": "Authorization"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "Cookie", {
		"value": "Cookie"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "Expect", {
		"value": "Expect"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "From", {
		"value": "From"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "Host", {
		"value": "Host"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "IfMatch", {
		"value": "If-Match"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "IfModifiedSince", {
		"value": "If-Modified-Since"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "IfNoneMatch", {
		"value": "If-None-Match"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "IfRange", {
		"value": "If-Range"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "IfUnmodifiedSince", {
		"value": "If-Unmodified-Since"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "MaxForwards", {
		"value": "Max-Forwards"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "ProxyAuthorization", {
		"value": "Proxy-Authorization"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "Range", {
		"value": "Range"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "Referer", {
		"value": "Referer"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "TE", {
		"value": "TE"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "Translate", {
		"value": "Translate"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "UserAgent", {
		"value": "User-Agent"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "Allowed", {
		"value": "Allowed"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "Connect", {
		"value": "Connect"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "ContentTransferEncoding", {
		"value": "Content-Transfer-Encoding"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "Delete", {
		"value": "Delete"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "Get", {
		"value": "Get"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "Head", {
		"value": "Head"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "Options", {
		"value": "Options"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "Post", {
		"value": "Post"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "ProxyConnection", {
		"value": "Proxy-Connection"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "Public", {
		"value": "Public"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "Put", {
		"value": "Put"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "RequestRange", {
		"value": "Request-Range"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "Trace", {
		"value": "Trace"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "Uri", {
		"value": "Uri"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "XFlashVersion", {
		"value": "X-Flash-Version"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "SoapAction", {
		"value": "SOAPAction"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "AcceptRanges", {
		"value": "Accept-Ranges"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "Age", {
		"value": "Age"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "ETag", {
		"value": "ETag"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "Location", {
		"value": "Location"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "ProxyAuthenticate", {
		"value": "Proxy-Authenticate"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "RetryAfter", {
		"value": "Retry-After"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "Server", {
		"value": "Server"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "Vary", {
		"value": "Vary"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "WWWAuthenticate", {
		"value": "WWW-Authenticate"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "SetCookie", {
		"value": "Set-Cookie"}
);
Object.defineProperty($asm06.System.Net.HttpKnownHeaderNames, "SetCookie2", {
		"value": "Set-Cookie2"}
);

$asm06.System.Net.HttpHeaderToName.get_HeaderNames = function () {
	return $asm06.System.Net.HttpHeaderToName._headerNames;
};
JSIL.MakeProperty($asm06.System.Net.HttpHeaderToName, "HeaderNames", 
	$asm06.System.Net.HttpHeaderToName.get_HeaderNames, null);
$asm06.System.Net.HttpHeaderToName._headerNames = null;
$asm06.System.Net.HttpHeaderToName._cctor = function () {
	$asm06.System.Net.HttpHeaderToName._headerNames = new $asm06.System.Net.HttpRequestHeaderEnumToName();
};

$asm06.System.Net.HttpRequestHeaderEnumToName.prototype.get_Item = function (reqHeader) {
	return $asm06.System.Net.HttpRequestHeaderEnumToName.HeaderStrings[Math.floor(reqHeader)];
};
$asm06.System.Net.HttpRequestHeaderEnumToName.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
JSIL.MakeProperty($asm06.System.Net.HttpRequestHeaderEnumToName.prototype, "Item", 
	$asm06.System.Net.HttpRequestHeaderEnumToName.prototype.get_Item, null);
$asm06.System.Net.HttpRequestHeaderEnumToName.HeaderStrings = null;
$asm06.System.Net.HttpRequestHeaderEnumToName._cctor = function () {
	$asm06.System.Net.HttpRequestHeaderEnumToName.HeaderStrings = JSIL.Array.New(System.String, ["Cache-Control", "Connection", "Date", "Keep-Alive", "Pragma", "Trailer", "Transfer-Encoding", "Upgrade", "Via", "Warning", "Allow", "Content-Length", "Content-Type", "Content-Encoding", "Content-Language", "Content-Location", "Content-MD5", "Content-Range", "Expires", "Last-Modified", "Accept", "Accept-Charset", "Accept-Encoding", "Accept-Language", "Authorization", "Cookie", "Expect", "From", "Host", "If-Match", "If-Modified-Since", "If-None-Match", "If-Range", "If-Unmodified-Since", "Max-Forwards", "Proxy-Authorization", "Referer", "Range", "TE", "Translate", "User-Agent"]);
};

$asm06.System.Net.HeaderInfoTable.prototype.get_Item = function (name) {
	var headerInfo = new JSIL.Variable(null);
	$asm06.System.Net.HeaderInfoTable.HeaderHashTable.TryGetValue(name, /* ref */ headerInfo);
	if (headerInfo.value === null) {
		return $asm06.System.Net.HeaderInfoTable.UnknownHeaderInfo;
	}
	return headerInfo.value;
};
$asm06.System.Net.HeaderInfoTable.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
JSIL.MakeProperty($asm06.System.Net.HeaderInfoTable.prototype, "Item", 
	$asm06.System.Net.HeaderInfoTable.prototype.get_Item, null);
$asm06.System.Net.HeaderInfoTable.HeaderHashTable = null;
$asm06.System.Net.HeaderInfoTable.UnknownHeaderInfo = null;
System.Net.HeaderInfoTable._cctor = function () {
	System.Net.HeaderInfoTable.UnknownHeaderInfo = new System.Net.HeaderInfo(System.String.Empty, false, false, false);
	var array = JSIL.Array.New(System.Net.HeaderInfo, [new System.Net.HeaderInfo("Accept", false, true, true), new System.Net.HeaderInfo("Accept-Charset", true, false, true), new System.Net.HeaderInfo("Accept-Encoding", true, false, true), new System.Net.HeaderInfo("Accept-Language", true, false, true), new System.Net.HeaderInfo("Accept-Ranges", true, false, false), new System.Net.HeaderInfo("Age", true, false, false), new System.Net.HeaderInfo("Allow", true, false, true), new System.Net.HeaderInfo("Allowed", true, false, false), new System.Net.HeaderInfo("Authorization", false, false, true), new System.Net.HeaderInfo("Cache-Control", false, false, true), new System.Net.HeaderInfo("Connect", true, false, false), new System.Net.HeaderInfo("Connection", true, false, true), new System.Net.HeaderInfo("Content-Encoding", false, false, true), new System.Net.HeaderInfo("Content-Language", false, false, true), new System.Net.HeaderInfo("Content-Length", true, false, false), new System.Net.HeaderInfo("Content-Location", true, false, false), new System.Net.HeaderInfo("Content-MD5", false, false, false), new System.Net.HeaderInfo("Content-Range", true, false, false), new System.Net.HeaderInfo("Content-Transfer-Encoding", true, false, false), new System.Net.HeaderInfo("Content-Type", false, true, false), new System.Net.HeaderInfo("Cookie", true, false, true), new System.Net.HeaderInfo("Date", true, false, false), new System.Net.HeaderInfo("Delete", true, false, false), new System.Net.HeaderInfo("ETag", true, false, false), new System.Net.HeaderInfo("Expect", true, false, true), new System.Net.HeaderInfo("Expires", false, false, false), new System.Net.HeaderInfo("From", false, false, false), new System.Net.HeaderInfo("Get", true, false, false), new System.Net.HeaderInfo("Head", true, false, false), new System.Net.HeaderInfo("Host", true, false, false), new System.Net.HeaderInfo("If-Match", false, false, true), new System.Net.HeaderInfo("If-Modified-Since", false, true, false), new System.Net.HeaderInfo("If-None-Match", false, false, true), new System.Net.HeaderInfo("If-Range", false, false, false), new System.Net.HeaderInfo("If-Unmodified-Since", false, false, false), new System.Net.HeaderInfo("Keep-Alive", true, false, false), new System.Net.HeaderInfo("Last-Modified", true, false, false), new System.Net.HeaderInfo("Location", true, false, false), new System.Net.HeaderInfo("Max-Forwards", true, false, false), new System.Net.HeaderInfo("Options", true, false, false), new System.Net.HeaderInfo("Post", true, false, false), new System.Net.HeaderInfo("Pragma", false, false, true), new System.Net.HeaderInfo("Proxy-Authenticate", true, false, false), new System.Net.HeaderInfo("Proxy-Authorization", false, false, true), new System.Net.HeaderInfo("Proxy-Connection", true, false, false), new System.Net.HeaderInfo("Public", true, false, false), new System.Net.HeaderInfo("Put", true, false, false), new System.Net.HeaderInfo("Range", false, false, true), new System.Net.HeaderInfo("Referer", true, false, false), new System.Net.HeaderInfo("Request-Range", true, false, false), new System.Net.HeaderInfo("Retry-After", true, false, false), new System.Net.HeaderInfo("Server", true, false, false), new System.Net.HeaderInfo("TE", true, false, true), new System.Net.HeaderInfo("Trace", true, false, false), new System.Net.HeaderInfo("Trailer", true, false, true), new System.Net.HeaderInfo("Transfer-Encoding", true, false, true), new System.Net.HeaderInfo("Translate", false, false, false), new System.Net.HeaderInfo("Upgrade", true, false, true), new System.Net.HeaderInfo("Uri", true, false, false), new System.Net.HeaderInfo("User-Agent", true, true, false), new System.Net.HeaderInfo("Vary", true, false, false), new System.Net.HeaderInfo("Via", true, false, true), new System.Net.HeaderInfo("Warning", true, false, true), new System.Net.HeaderInfo("WWW-Authenticate", true, false, false), new System.Net.HeaderInfo("X-Flash-Version", true, false, false)]);
	System.Net.HeaderInfoTable.HeaderHashTable = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.String, System.Net.HeaderInfo), "_ctor$3", [(array.length * 2), System.Net.CaseInsensitiveAscii.StaticInstance]);
__loop0__: 
	for (var num = 0; num < array.length; ++num) {
		System.Net.HeaderInfoTable.HeaderHashTable.set_Item(array[num].HeaderName, array[num]);
	}
};

$asm06.System.Net.HeaderInfo.prototype._ctor = function (name, requestRestricted, requestProperty, multi) {
	System.Object.prototype._ctor.call(this);
	this.HeaderName = name;
	this.IsRequestRestricted = requestRestricted;
	this.HasRequestProperty = requestProperty;
	this.AllowMultiValues = multi;
};
$asm06.System.Net.HeaderInfo.prototype.HeaderName = null;
$asm06.System.Net.HeaderInfo.prototype.IsRequestRestricted = false;
$asm06.System.Net.HeaderInfo.prototype.HasRequestProperty = false;
$asm06.System.Net.HeaderInfo.prototype.AllowMultiValues = false;

$asm06.System.Net.WebRequestPrefixElement.prototype._ctor = function (prefix, creator) {
	System.Object.prototype._ctor.call(this);
	this.Prefix = prefix;
	this.Creator = creator;
};
$asm06.System.Net.WebRequestPrefixElement.prototype.Prefix = null;
$asm06.System.Net.WebRequestPrefixElement.prototype.Creator = null;

$asm06.System.Net.NetworkSecurityState.prototype._ctor = function () {
	System.Security.SecurityState.prototype._ctor.call(this);
};
$asm06.System.Net.NetworkSecurityState.prototype.EnsureState = function () {
	throw JSIL.New(System.NotImplementedException, "_ctor$0", []);
};
$asm06.System.Net.NetworkSecurityState.prototype.get_SocketPolicyManager = function () {
	return this.socketPolicyManager;
};
$asm06.System.Net.NetworkSecurityState.prototype.set_SocketPolicyManager = function (value) {
	this.socketPolicyManager = value;
};
$asm06.System.Net.NetworkSecurityState.prototype.get_ApplicationOrigin = function () {
	return this.applicationOrigin;
};
$asm06.System.Net.NetworkSecurityState.prototype.set_ApplicationOrigin = function (value) {
	this.applicationOrigin = value;
};
$asm06.System.Net.NetworkSecurityState.prototype.get_NetworkingUnrestricted = function () {
	return this.networkingUnrestricted;
};
$asm06.System.Net.NetworkSecurityState.prototype.set_NetworkingUnrestricted = function (value) {
	this.networkingUnrestricted = value;
};
JSIL.MakeProperty($asm06.System.Net.NetworkSecurityState.prototype, "SocketPolicyManager", 
	$asm06.System.Net.NetworkSecurityState.prototype.get_SocketPolicyManager, $asm06.System.Net.NetworkSecurityState.prototype.set_SocketPolicyManager);
JSIL.MakeProperty($asm06.System.Net.NetworkSecurityState.prototype, "ApplicationOrigin", 
	$asm06.System.Net.NetworkSecurityState.prototype.get_ApplicationOrigin, $asm06.System.Net.NetworkSecurityState.prototype.set_ApplicationOrigin);
JSIL.MakeProperty($asm06.System.Net.NetworkSecurityState.prototype, "NetworkingUnrestricted", 
	$asm06.System.Net.NetworkSecurityState.prototype.get_NetworkingUnrestricted, $asm06.System.Net.NetworkSecurityState.prototype.set_NetworkingUnrestricted);
$asm06.System.Net.NetworkSecurityState.prototype.socketPolicyManager = null;
$asm06.System.Net.NetworkSecurityState.prototype.applicationOrigin = null;
$asm06.System.Net.NetworkSecurityState.prototype.networkingUnrestricted = false;

$asm06.System.Net.NetworkSecurityOptions.get_SocketPolicyManager = function () {
	$asm06.System.Net.NetworkSecurityOptions.Initialize();
	return $asm06.System.Net.NetworkSecurityOptions.socketPolicyManager;
};
$asm06.System.Net.NetworkSecurityOptions.get_ApplicationOrigin = function () {
	$asm06.System.Net.NetworkSecurityOptions.Initialize();
	return $asm06.System.Net.NetworkSecurityOptions.applicationOrigin;
};
$asm06.System.Net.NetworkSecurityOptions.get_NetworkingUnrestricted = function () {
	$asm06.System.Net.NetworkSecurityOptions.Initialize();
	return $asm06.System.Net.NetworkSecurityOptions.networkingUnrestricted;
};
$asm06.System.Net.NetworkSecurityOptions.Initialize = function () {
	var obj = null;
	if (!$asm06.System.Net.NetworkSecurityOptions.initialized) {
		System.Threading.Monitor.Enter((obj = $asm06.System.Net.NetworkSecurityOptions.lockObject));
		try {
			if (!$asm06.System.Net.NetworkSecurityOptions.initialized) {
				var networkSecurityState = new $asm06.System.Net.NetworkSecurityState();
				if (networkSecurityState.IsStateAvailable()) {
					$asm06.System.Net.NetworkSecurityOptions.socketPolicyManager = networkSecurityState.SocketPolicyManager;
					$asm06.System.Net.NetworkSecurityOptions.applicationOrigin = networkSecurityState.ApplicationOrigin;
					$asm06.System.Net.NetworkSecurityOptions.networkingUnrestricted = networkSecurityState.NetworkingUnrestricted;
					$asm06.System.Net.NetworkSecurityOptions.initialized = true;
				}
			}
		} finally {
			System.Threading.Monitor.Exit(obj);
		}
	}
};
JSIL.MakeProperty($asm06.System.Net.NetworkSecurityOptions, "SocketPolicyManager", 
	$asm06.System.Net.NetworkSecurityOptions.get_SocketPolicyManager, null);
JSIL.MakeProperty($asm06.System.Net.NetworkSecurityOptions, "ApplicationOrigin", 
	$asm06.System.Net.NetworkSecurityOptions.get_ApplicationOrigin, null);
JSIL.MakeProperty($asm06.System.Net.NetworkSecurityOptions, "NetworkingUnrestricted", 
	$asm06.System.Net.NetworkSecurityOptions.get_NetworkingUnrestricted, null);
$asm06.System.Net.NetworkSecurityOptions.socketPolicyManager = null;
$asm06.System.Net.NetworkSecurityOptions.applicationOrigin = null;
$asm06.System.Net.NetworkSecurityOptions.networkingUnrestricted = false;
$asm06.System.Net.NetworkSecurityOptions.initialized = false;
$asm06.System.Net.NetworkSecurityOptions.lockObject = null;
$asm06.System.Net.NetworkSecurityOptions._cctor = function () {
	$asm06.System.Net.NetworkSecurityOptions.lockObject = new System.Object();
};

$asm06.System.Net.Sockets.MulticastPolicyManager.EndPolicyCheck = function (result) {
	var multicastPolicyCheckAsyncResult = $asm06.System.Net.Sockets.AsyncResult.End$b1($asm06.System.Net.Sockets.MulticastPolicyCheckAsyncResult)(result);
	if (multicastPolicyCheckAsyncResult.OnPendingPolicyCheckList) {
		$asm06.System.Net.Sockets.MulticastPolicyManager.RemoveFromPendingPolicyChecks(multicastPolicyCheckAsyncResult);
	}
	return multicastPolicyCheckAsyncResult.Result;
};
$asm06.System.Net.Sockets.MulticastPolicyManager.AbortPolicyCheck = function (result) {
	var obj = null;
	System.Threading.Monitor.Enter((obj = $asm06.System.Net.Sockets.MulticastPolicyManager.lockObject));
	try {
		var num = $asm06.System.Net.Sockets.MulticastPolicyManager.pendingPolicyChecks.IndexOf$0(result);
		if (num > 0) {
			result.OnPendingPolicyCheckList = false;
			$asm06.System.Net.Sockets.MulticastPolicyManager.pendingPolicyChecks.RemoveAt(num);
		}
	} finally {
		System.Threading.Monitor.Exit(obj);
	}
	result.Abort();
};
$asm06.System.Net.Sockets.MulticastPolicyManager.AddToPendingPolicyChecks = function (result) {
	var obj = null;
	var flag = false;
	var flag2 = false;
	System.Threading.Monitor.Enter((obj = $asm06.System.Net.Sockets.MulticastPolicyManager.lockObject));
	try {
		if ($asm06.System.Net.Sockets.MulticastPolicyManager.AlreadyApproved(result.SourceAddress, result.GroupAddress, result.Port)) {
			flag = true;
		} else {
			if (!(($asm06.System.Net.Sockets.MulticastPolicyManager.pendingPolicyChecks.Count !== 0) || $asm06.System.Net.Sockets.MulticastPolicyManager.nextPolicyCheckAfterFailure)) {
				flag2 = true;
			}
			$asm06.System.Net.Sockets.MulticastPolicyManager.pendingPolicyChecks.Add(result);
			result.OnPendingPolicyCheckList = true;
		}
	} finally {
		System.Threading.Monitor.Exit(obj);
	}
	if (flag) {
		result.Complete(true, true);
		return;
	}
	if (flag2) {
		result.BeginPolicyCheck();
	}
};
$asm06.System.Net.Sockets.MulticastPolicyManager.RemoveFromPendingPolicyChecks = function (result) {
	var obj = null;
	System.Threading.Monitor.Enter((obj = $asm06.System.Net.Sockets.MulticastPolicyManager.lockObject));
	try {
		$asm06.System.Net.Sockets.MulticastPolicyManager.pendingPolicyChecks.RemoveAt(0);
		if (result.Result) {
			$asm06.System.Net.Sockets.MulticastPolicyManager.approvals.Add(new $asm06.System.Net.Sockets.MulticastPolicyManager.MulticastPolicyApproval(result.SourceAddress, result.GroupAddress, result.Port));
			var flag = ($asm06.System.Net.Sockets.MulticastPolicyManager.pendingPolicyChecks.Count > 0);
		} else {
			if ($asm06.System.Net.Sockets.MulticastPolicyManager.nextPolicyCheckAfterFailure === null) {
				$asm06.System.Net.Sockets.MulticastPolicyManager.nextPolicyCheckAfterFailure = new $asm06.System.Net.Sockets.SecurityCriticalTimer(JSIL.Delegate.New("System.Net.Sockets.SecurityCriticalTimerCallback", null, $asm06.System.Net.Sockets.MulticastPolicyManager.PumpPolicyCheckQueue), null, 24000, -1);
			}
			flag = false;
		}
	} finally {
		System.Threading.Monitor.Exit(obj);
	}
	if (flag) {
		$asm06.System.Net.Sockets.SecurityCriticalThreadPool.QueueUserWorkItem(JSIL.Delegate.New("System.Net.Sockets.SecurityCriticalWaitCallback", null, $asm06.System.Net.Sockets.MulticastPolicyManager.PumpPolicyCheckQueue), null);
	}
};
$asm06.System.Net.Sockets.MulticastPolicyManager.PumpPolicyCheckQueue = function (ignored) {
	var obj = null;
	var multicastPolicyCheckAsyncResult = null;
	System.Threading.Monitor.Enter((obj = $asm06.System.Net.Sockets.MulticastPolicyManager.lockObject));
	try {
		if ($asm06.System.Net.Sockets.MulticastPolicyManager.nextPolicyCheckAfterFailure !== null) {
			$asm06.System.Net.Sockets.MulticastPolicyManager.nextPolicyCheckAfterFailure.Dispose();
			$asm06.System.Net.Sockets.MulticastPolicyManager.nextPolicyCheckAfterFailure = null;
		}
		if ($asm06.System.Net.Sockets.MulticastPolicyManager.pendingPolicyChecks.Count > 0) {
			multicastPolicyCheckAsyncResult = $asm06.System.Net.Sockets.MulticastPolicyManager.pendingPolicyChecks.get_Item(0);
		}
	} finally {
		System.Threading.Monitor.Exit(obj);
	}
	if (multicastPolicyCheckAsyncResult !== null) {
		try {
			multicastPolicyCheckAsyncResult.BeginPolicyCheck();
		} catch ($exception) {
			if (JSIL.CheckType($exception, System.Net.Sockets.SocketException)) {
				multicastPolicyCheckAsyncResult.Complete(false, false);
			} else {
				throw $exception;
			}
		}
	}
};
$asm06.System.Net.Sockets.MulticastPolicyManager.AlreadyApproved = function (sourceAddress, groupAddress, port) {
	if ($asm06.System.Net.NetworkSecurityOptions.NetworkingUnrestricted) {
		return true;
	}
	var enumerator = ($asm06.System.Net.Sockets.MulticastPolicyManager.approvals.GetEnumerator());
	try {
	__loop0__: 
		while (enumerator.MoveNext()) {
			var current = enumerator.Current;
			if (!(!System.Object.Equals(sourceAddress, current.SourceAddress) || 
					!System.Object.Equals(groupAddress, current.GroupAddress) || (port !== current.Port))) {
				return true;
			}
		}
	} finally {
		enumerator.IDisposable_Dispose();
	}
	return false;
};
Object.defineProperty($asm06.System.Net.Sockets.MulticastPolicyManager, "failedPolicyCheckDelayTime", {
		"value": 24000}
);
$asm06.System.Net.Sockets.MulticastPolicyManager.pendingPolicyChecks = null;
$asm06.System.Net.Sockets.MulticastPolicyManager.approvals = null;
$asm06.System.Net.Sockets.MulticastPolicyManager.nextPolicyCheckAfterFailure = null;
$asm06.System.Net.Sockets.MulticastPolicyManager.lockObject = null;
$asm06.System.Net.Sockets.MulticastPolicyManager._cctor = function () {
	$asm06.System.Net.Sockets.MulticastPolicyManager.pendingPolicyChecks = new (System.Collections.Generic.List$b1.Of($asm06.System.Net.Sockets.MulticastPolicyCheckAsyncResult)) ();
	$asm06.System.Net.Sockets.MulticastPolicyManager.approvals = new (System.Collections.Generic.List$b1.Of($asm06.System.Net.Sockets.MulticastPolicyManager.MulticastPolicyApproval)) ();
	$asm06.System.Net.Sockets.MulticastPolicyManager.lockObject = new System.Object();
};

$asm06.System.Net.Sockets.MulticastPolicyManager.MulticastPolicyApproval.prototype._ctor = function (sourceAddress, groupAddress, port) {
	System.Object.prototype._ctor.call(this);
	this.sourceAddress = sourceAddress;
	this.groupAddress = groupAddress;
	this.port = port;
};
$asm06.System.Net.Sockets.MulticastPolicyManager.MulticastPolicyApproval.prototype.get_SourceAddress = function () {
	return this.sourceAddress;
};
$asm06.System.Net.Sockets.MulticastPolicyManager.MulticastPolicyApproval.prototype.get_GroupAddress = function () {
	return this.groupAddress;
};
$asm06.System.Net.Sockets.MulticastPolicyManager.MulticastPolicyApproval.prototype.get_Port = function () {
	return this.port;
};
JSIL.MakeProperty($asm06.System.Net.Sockets.MulticastPolicyManager.MulticastPolicyApproval.prototype, "SourceAddress", 
	$asm06.System.Net.Sockets.MulticastPolicyManager.MulticastPolicyApproval.prototype.get_SourceAddress, null);
JSIL.MakeProperty($asm06.System.Net.Sockets.MulticastPolicyManager.MulticastPolicyApproval.prototype, "GroupAddress", 
	$asm06.System.Net.Sockets.MulticastPolicyManager.MulticastPolicyApproval.prototype.get_GroupAddress, null);
JSIL.MakeProperty($asm06.System.Net.Sockets.MulticastPolicyManager.MulticastPolicyApproval.prototype, "Port", 
	$asm06.System.Net.Sockets.MulticastPolicyManager.MulticastPolicyApproval.prototype.get_Port, null);
$asm06.System.Net.Sockets.MulticastPolicyManager.MulticastPolicyApproval.prototype.sourceAddress = null;
$asm06.System.Net.Sockets.MulticastPolicyManager.MulticastPolicyApproval.prototype.groupAddress = null;
$asm06.System.Net.Sockets.MulticastPolicyManager.MulticastPolicyApproval.prototype.port = 0;

$asm06.System.Net.Sockets.AsyncResult.prototype._ctor = function (callback, state) {
	System.Object.prototype._ctor.call(this);
	this.callback = callback;
	this.state = state;
};
$asm06.System.Net.Sockets.AsyncResult.prototype.get_IsCompleted = function () {
	return this.isCompleted;
};
$asm06.System.Net.Sockets.AsyncResult.prototype.get_CompletedSynchronously = function () {
	return this.completedSynchronously;
};
$asm06.System.Net.Sockets.AsyncResult.prototype.get_AsyncWaitHandle = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm06.System.Net.Sockets.AsyncResult.prototype.get_AsyncState = function () {
	return this.state;
};
$asm06.System.Net.Sockets.AsyncResult.prototype.Complete = function (exception, completedSynchronously) {
	if (this.isCompleted) {
		return;
	}
	this.isCompleted = true;
	this.completedSynchronously = completedSynchronously;
	this.exception = exception;
	if (this.callback !== null) {
		this.callback.Invoke(this);
	}
};
$asm06.System.Net.Sockets.AsyncResult.End$b1 = JSIL.GenericMethod(
	["TAsyncResult"], 
	function (TAsyncResult, result) {
		if (result === null) {
			throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["result"]);
		}
		var tAsyncResult = JSIL.Cast(JSIL.TryCast(result, TAsyncResult), TAsyncResult);
		if (tAsyncResult === null) {
			throw JSIL.New(System.ArgumentException, "_ctor$1", ["result"]);
		}
		if (tAsyncResult.endCalled) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
		}
		if (!tAsyncResult.isCompleted) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
		}
		tAsyncResult.endCalled = true;
		if (tAsyncResult.exception !== null) {
			throw tAsyncResult.exception;
		}
		return tAsyncResult;
	}
);
JSIL.MakeProperty($asm06.System.Net.Sockets.AsyncResult.prototype, "IsCompleted", 
	$asm06.System.Net.Sockets.AsyncResult.prototype.get_IsCompleted, null);
JSIL.MakeProperty($asm06.System.Net.Sockets.AsyncResult.prototype, "CompletedSynchronously", 
	$asm06.System.Net.Sockets.AsyncResult.prototype.get_CompletedSynchronously, null);
JSIL.MakeProperty($asm06.System.Net.Sockets.AsyncResult.prototype, "AsyncWaitHandle", 
	$asm06.System.Net.Sockets.AsyncResult.prototype.get_AsyncWaitHandle, null);
JSIL.MakeProperty($asm06.System.Net.Sockets.AsyncResult.prototype, "AsyncState", 
	$asm06.System.Net.Sockets.AsyncResult.prototype.get_AsyncState, null);
$asm06.System.Net.Sockets.AsyncResult.prototype.callback = null;
$asm06.System.Net.Sockets.AsyncResult.prototype.state = null;
$asm06.System.Net.Sockets.AsyncResult.prototype.isCompleted = false;
$asm06.System.Net.Sockets.AsyncResult.prototype.completedSynchronously = false;
$asm06.System.Net.Sockets.AsyncResult.prototype.endCalled = false;
$asm06.System.Net.Sockets.AsyncResult.prototype.exception = null;

$asm06.System.Net.Sockets.AsyncResult$b1.prototype._ctor = function (callback, state) {
	$asm06.System.Net.Sockets.AsyncResult.prototype._ctor.call(this, callback, state);
};
$asm06.System.Net.Sockets.AsyncResult$b1.prototype.get_Result = function () {
	return this.result;
};
$asm06.System.Net.Sockets.AsyncResult$b1.prototype.Complete = function (result, completedSynchronously) {
	this.result = result;
	$asm06.System.Net.Sockets.AsyncResult.prototype.Complete.call(this, null, completedSynchronously);
};
JSIL.MakeProperty($asm06.System.Net.Sockets.AsyncResult$b1.prototype, "Result", 
	$asm06.System.Net.Sockets.AsyncResult$b1.prototype.get_Result, null);
$asm06.System.Net.Sockets.AsyncResult$b1.prototype.result = null;

$asm06.System.Net.Sockets.MulticastPolicyCheckAsyncResult.prototype._ctor = function (policyCheckOperation, callback, state) {
	$asm06.System.Net.Sockets.AsyncResult$b1.Of(System.Boolean).prototype._ctor.call(this, callback, state);
	this.policyCheckOperation = policyCheckOperation;
	this.lockObject = new System.Object();
};
$asm06.System.Net.Sockets.MulticastPolicyCheckAsyncResult.prototype.get_SourceAddress = function () {
	return this.policyCheckOperation.SourceAddress;
};
$asm06.System.Net.Sockets.MulticastPolicyCheckAsyncResult.prototype.get_GroupAddress = function () {
	return this.policyCheckOperation.GroupAddress;
};
$asm06.System.Net.Sockets.MulticastPolicyCheckAsyncResult.prototype.get_Port = function () {
	return this.policyCheckOperation.Port;
};
$asm06.System.Net.Sockets.MulticastPolicyCheckAsyncResult.prototype.get_OnPendingPolicyCheckList = function () {
	return this.onPendingPolicyCheckList;
};
$asm06.System.Net.Sockets.MulticastPolicyCheckAsyncResult.prototype.set_OnPendingPolicyCheckList = function (value) {
	this.onPendingPolicyCheckList = value;
};
$asm06.System.Net.Sockets.MulticastPolicyCheckAsyncResult.prototype.BeginPolicyCheck = function () {
	var obj = null;
	this.BuildAnnouncementPacket();
	if (!this.aborted) {
		System.Threading.Monitor.Enter((obj = this.lockObject));
		try {
			if (!this.aborted) {
				this.begun = true;
				this.policyCheckOperation.BeginReceiveAuthorizationPacket(JSIL.New($asm06.System.Net.Sockets.CallbackWrapper, "_ctor$1", [JSIL.Delegate.New("System.Net.Sockets.SecurityCriticalAsyncCallback", this, $asm06.System.Net.Sockets.MulticastPolicyCheckAsyncResult.prototype.AuthorizationPacketReceived)]), null);
				this.policyCheckOperation.BeginSendAnnouncementPacket(this.announcementPacket, JSIL.New($asm06.System.Net.Sockets.CallbackWrapper, "_ctor$1", [JSIL.Delegate.New("System.Net.Sockets.SecurityCriticalAsyncCallback", this, $asm06.System.Net.Sockets.MulticastPolicyCheckAsyncResult.prototype.AnnouncementPacketSent)]), null);
			}
		} finally {
			System.Threading.Monitor.Exit(obj);
		}
	}
};
$asm06.System.Net.Sockets.MulticastPolicyCheckAsyncResult.prototype.Abort = function () {
	var obj = null;
	if (!this.aborted) {
		var flag = true;
		System.Threading.Monitor.Enter((obj = this.lockObject));
		try {
			this.aborted = true;
			if (this.timeout !== null) {
				this.timeout.Dispose();
				this.timeout = null;
			}
			if (this.begun) {
				this.policyCheckOperation.Abort();
				flag = false;
			}
		} finally {
			System.Threading.Monitor.Exit(obj);
		}
		if (flag) {
			$asm06.System.Net.Sockets.AsyncResult$b1.Of(System.Boolean).prototype.Complete.call(this, false, false);
		}
	}
};
$asm06.System.Net.Sockets.MulticastPolicyCheckAsyncResult.prototype.AnnouncementPacketSent = function (result) {
	var obj = null;
	try {
		this.policyCheckOperation.EndSendAnnouncementPacket(result);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.Net.Sockets.SocketException)) {
			this.Abort();
			return;
		} else {
			throw $exception;
		}
	}
	System.Threading.Monitor.Enter((obj = this.lockObject));
	try {
		if (!this.aborted) {
			this.timeout = new $asm06.System.Net.Sockets.SecurityCriticalTimer(JSIL.Delegate.New("System.Net.Sockets.SecurityCriticalTimerCallback", this, $asm06.System.Net.Sockets.MulticastPolicyCheckAsyncResult.prototype.TimeoutCallback), null, (3000 * (1 << (this.packetsSent & 31))), -1);
			++this.packetsSent;
		}
	} finally {
		System.Threading.Monitor.Exit(obj);
	}
};
$asm06.System.Net.Sockets.MulticastPolicyCheckAsyncResult.prototype.AuthorizationPacketReceived = function (result) {
	var authorizationPacket = null;
	try {
		authorizationPacket = this.policyCheckOperation.EndReceiveAuthorizationPacket(result);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.Net.Sockets.SocketException)) {
			this.Abort();
			$asm06.System.Net.Sockets.AsyncResult$b1.Of(System.Boolean).prototype.Complete.call(this, false, false);
			return;
		} else {
			throw $exception;
		}
	}
	if (this.AuthorizationPacketMatches(authorizationPacket)) {
		this.Abort();
		$asm06.System.Net.Sockets.AsyncResult$b1.Of(System.Boolean).prototype.Complete.call(this, true, false);
		return;
	}
	try {
		this.policyCheckOperation.BeginReceiveAuthorizationPacket(JSIL.New($asm06.System.Net.Sockets.CallbackWrapper, "_ctor$1", [JSIL.Delegate.New("System.Net.Sockets.SecurityCriticalAsyncCallback", this, $asm06.System.Net.Sockets.MulticastPolicyCheckAsyncResult.prototype.AuthorizationPacketReceived)]), null);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.ObjectDisposedException)) {
			$asm06.System.Net.Sockets.AsyncResult$b1.Of(System.Boolean).prototype.Complete.call(this, false, false);
		} else if (JSIL.CheckType($exception, System.Net.Sockets.SocketException)) {
			this.Abort();
			$asm06.System.Net.Sockets.AsyncResult$b1.Of(System.Boolean).prototype.Complete.call(this, false, false);
		} else {
			throw $exception;
		}
	}
};
$asm06.System.Net.Sockets.MulticastPolicyCheckAsyncResult.prototype.TimeoutCallback = function (ignored) {
	var obj = null;
	System.Threading.Monitor.Enter((obj = this.lockObject));
	try {
		if (this.aborted) {
			return;
		}
		this.timeout.Dispose();
		this.timeout = null;
	} finally {
		System.Threading.Monitor.Exit(obj);
	}
	if (this.packetsSent < 3) {
		try {
			this.policyCheckOperation.BeginSendAnnouncementPacket(this.announcementPacket, JSIL.New($asm06.System.Net.Sockets.CallbackWrapper, "_ctor$1", [JSIL.Delegate.New("System.Net.Sockets.SecurityCriticalAsyncCallback", this, $asm06.System.Net.Sockets.MulticastPolicyCheckAsyncResult.prototype.AnnouncementPacketSent)]), null);
			return;
		} catch ($exception) {
			if (JSIL.CheckType($exception, System.ObjectDisposedException)) {
				return;
			} else if (JSIL.CheckType($exception, System.Net.Sockets.SocketException)) {
				this.Abort();
				return;
			} else {
				throw $exception;
			}
		}
	}
	this.Abort();
};
$asm06.System.Net.Sockets.MulticastPolicyCheckAsyncResult.prototype.BuildAnnouncementPacket = function () {
	var randomNumberGenerator = new System.Security.Cryptography.RNGCryptoServiceProvider();
	var array = JSIL.Array.New(System.Byte, 4);
	randomNumberGenerator.GetBytes(array);
	var applicationOrigin = $asm06.System.Net.NetworkSecurityOptions.ApplicationOrigin;
	if (System.Text.Encoding.UTF8.GetByteCount$1(applicationOrigin) > 65535) {
		throw JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [System.Net.Sockets.SocketError.MessageSize]);
	}
	this.announcementPacket = new $asm06.System.Net.Sockets.MulticastPolicyPacket();
	this.announcementPacket.Version = 1;
	this.announcementPacket.Type = $asm06.System.Net.Sockets.MulticastPolicyPacketType.Announcement;
	this.announcementPacket.MessageId = array;
	this.announcementPacket.ApplicationOrigin = applicationOrigin;
	this.announcementPacket.GroupAddress = this.policyCheckOperation.GroupAddress;
	this.announcementPacket.Port = this.policyCheckOperation.Port;
};
$asm06.System.Net.Sockets.MulticastPolicyCheckAsyncResult.prototype.AuthorizationPacketMatches = function (authorizationPacket) {
	return (authorizationPacket && 
		(authorizationPacket.Type === $asm06.System.Net.Sockets.MulticastPolicyPacketType.Authorization) && 
		(this.announcementPacket.Port === authorizationPacket.Port) && 
		(this.announcementPacket.MessageId[0] === authorizationPacket.MessageId[0]) && 
		(this.announcementPacket.MessageId[1] === authorizationPacket.MessageId[1]) && 
		(this.announcementPacket.MessageId[2] === authorizationPacket.MessageId[2]) && 
		(this.announcementPacket.MessageId[3] === authorizationPacket.MessageId[3]) && 
		System.String.Equals$1(this.announcementPacket.ApplicationOrigin, authorizationPacket.ApplicationOrigin, System.StringComparison.Ordinal) && System.Object.Equals(this.announcementPacket.GroupAddress, authorizationPacket.GroupAddress));
};
JSIL.MakeProperty($asm06.System.Net.Sockets.MulticastPolicyCheckAsyncResult.prototype, "SourceAddress", 
	$asm06.System.Net.Sockets.MulticastPolicyCheckAsyncResult.prototype.get_SourceAddress, null);
JSIL.MakeProperty($asm06.System.Net.Sockets.MulticastPolicyCheckAsyncResult.prototype, "GroupAddress", 
	$asm06.System.Net.Sockets.MulticastPolicyCheckAsyncResult.prototype.get_GroupAddress, null);
JSIL.MakeProperty($asm06.System.Net.Sockets.MulticastPolicyCheckAsyncResult.prototype, "Port", 
	$asm06.System.Net.Sockets.MulticastPolicyCheckAsyncResult.prototype.get_Port, null);
JSIL.MakeProperty($asm06.System.Net.Sockets.MulticastPolicyCheckAsyncResult.prototype, "OnPendingPolicyCheckList", 
	$asm06.System.Net.Sockets.MulticastPolicyCheckAsyncResult.prototype.get_OnPendingPolicyCheckList, $asm06.System.Net.Sockets.MulticastPolicyCheckAsyncResult.prototype.set_OnPendingPolicyCheckList);
Object.defineProperty($asm06.System.Net.Sockets.MulticastPolicyCheckAsyncResult, "announcementPacketsPerPolicyCheck", {
		"value": 3}
);
$asm06.System.Net.Sockets.MulticastPolicyCheckAsyncResult.prototype.policyCheckOperation = null;
$asm06.System.Net.Sockets.MulticastPolicyCheckAsyncResult.prototype.announcementPacket = null;
$asm06.System.Net.Sockets.MulticastPolicyCheckAsyncResult.prototype.begun = false;
$asm06.System.Net.Sockets.MulticastPolicyCheckAsyncResult.prototype.aborted = null;
$asm06.System.Net.Sockets.MulticastPolicyCheckAsyncResult.prototype.onPendingPolicyCheckList = null;
$asm06.System.Net.Sockets.MulticastPolicyCheckAsyncResult.prototype.packetsSent = 0;
$asm06.System.Net.Sockets.MulticastPolicyCheckAsyncResult.prototype.timeout = null;
$asm06.System.Net.Sockets.MulticastPolicyCheckAsyncResult.prototype.lockObject = null;

$asm06.System.Net.Sockets.MulticastPolicyCheckOperation.prototype._ctor = function (sourceAddress, groupAddress, port) {
	System.Object.prototype._ctor.call(this);
	this.sourceAddress = sourceAddress;
	this.groupAddress = groupAddress;
	this.port = port;
	this.receiveBuffer = JSIL.Array.New(System.Byte, 65535);
};
$asm06.System.Net.Sockets.MulticastPolicyCheckOperation.prototype.get_SourceAddress = function () {
	return this.sourceAddress;
};
$asm06.System.Net.Sockets.MulticastPolicyCheckOperation.prototype.get_GroupAddress = function () {
	return this.groupAddress;
};
$asm06.System.Net.Sockets.MulticastPolicyCheckOperation.prototype.get_Port = function () {
	return this.port;
};
$asm06.System.Net.Sockets.MulticastPolicyCheckOperation.prototype.BeginSendAnnouncementPacket = function (packet, callback, state) {
	this.EnsureSocket();
	var destination = JSIL.New(System.Net.IPEndPoint, "_ctor$1", [JSIL.Coalesce(this.sourceAddress, this.groupAddress), 9430]);
	var array = packet.Serialize();
	return this.socket.BeginSendTo(
		array, 
		0, 
		array.length, 
		destination, 
		callback, 
		state
	);
};
$asm06.System.Net.Sockets.MulticastPolicyCheckOperation.prototype.EndSendAnnouncementPacket = function (result) {
	this.socket.EndSendTo(result);
};
$asm06.System.Net.Sockets.MulticastPolicyCheckOperation.prototype.BeginReceiveAuthorizationPacket = function (callback, state) {
	System.Threading.Interlocked.Exchange$0(/* ref */ new JSIL.MemberReference(this, "receiveCount"), 1);
	try {
		this.EnsureSocket();
		var result = this.socket.BeginReceiveMessageFrom(
			this.receiveBuffer, 
			0, 
			this.receiveBuffer.length, 
			callback, 
			state
		);
	} catch ($exception) {
		System.Threading.Interlocked.Exchange$0(/* ref */ new JSIL.MemberReference(this, "receiveCount"), 0);
		throw $exception;
	}
	return result;
};
$asm06.System.Net.Sockets.MulticastPolicyCheckOperation.prototype.EndReceiveAuthorizationPacket = function (result) {
	var iPEndPoint = new JSIL.Variable(null), iPPacketInformation = new JSIL.Variable(new $asm06.System.Net.Sockets.IPPacketInformation());
	try {
		var count = this.socket.EndReceiveMessageFrom(result, /* ref */ iPEndPoint, /* ref */ iPPacketInformation);
		var result2 = $asm06.System.Net.Sockets.MulticastPolicyPacket.Parse(this.receiveBuffer, 0, count);
	} finally {
		System.Threading.Interlocked.Exchange$0(/* ref */ new JSIL.MemberReference(this, "receiveCount"), 0);
	}
	return result2;
};
$asm06.System.Net.Sockets.MulticastPolicyCheckOperation.prototype.Abort = function () {
	this.socket.Close(0);
};
$asm06.System.Net.Sockets.MulticastPolicyCheckOperation.prototype.EnsureSocket = function () {
	if (this.socket === null) {
		this.socket = $asm06.System.Net.Sockets.UnsafeSocket.Create(this.groupAddress.AddressFamily, System.Net.Sockets.SocketType.Dgram, System.Net.Sockets.ProtocolType.Udp);
		var address = (this.groupAddress.AddressFamily === System.Net.Sockets.AddressFamily.InterNetworkV6) ? System.Net.IPAddress.IPv6Any : System.Net.IPAddress.Any;
		if (this.sourceAddress === null) {
			this.socket.ReuseAddress = true;
			this.socket.FilterAllUnicastPackets();
			this.socket.Bind(JSIL.New(System.Net.IPEndPoint, "_ctor$1", [address, 9430]));
			this.socket.AddMembership(this.groupAddress);
			return;
		}
		this.socket.Bind(JSIL.New(System.Net.IPEndPoint, "_ctor$1", [address, 0]));
	}
};
JSIL.MakeProperty($asm06.System.Net.Sockets.MulticastPolicyCheckOperation.prototype, "SourceAddress", 
	$asm06.System.Net.Sockets.MulticastPolicyCheckOperation.prototype.get_SourceAddress, null);
JSIL.MakeProperty($asm06.System.Net.Sockets.MulticastPolicyCheckOperation.prototype, "GroupAddress", 
	$asm06.System.Net.Sockets.MulticastPolicyCheckOperation.prototype.get_GroupAddress, null);
JSIL.MakeProperty($asm06.System.Net.Sockets.MulticastPolicyCheckOperation.prototype, "Port", 
	$asm06.System.Net.Sockets.MulticastPolicyCheckOperation.prototype.get_Port, null);
Object.defineProperty($asm06.System.Net.Sockets.MulticastPolicyCheckOperation, "policyPort", {
		"value": 9430}
);
$asm06.System.Net.Sockets.MulticastPolicyCheckOperation.prototype.sourceAddress = null;
$asm06.System.Net.Sockets.MulticastPolicyCheckOperation.prototype.groupAddress = null;
$asm06.System.Net.Sockets.MulticastPolicyCheckOperation.prototype.port = 0;
$asm06.System.Net.Sockets.MulticastPolicyCheckOperation.prototype.socket = null;
$asm06.System.Net.Sockets.MulticastPolicyCheckOperation.prototype.receiveBuffer = null;
$asm06.System.Net.Sockets.MulticastPolicyCheckOperation.prototype.receiveCount = 0;

$asm06.System.Net.Sockets.MulticastPolicyPacket.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm06.System.Net.Sockets.MulticastPolicyPacket.prototype.get_Version = function () {
	return this.version;
};
$asm06.System.Net.Sockets.MulticastPolicyPacket.prototype.set_Version = function (value) {
	if (this.version !== value) {
		this.serializedForm = null;
		this.version = value;
	}
};
$asm06.System.Net.Sockets.MulticastPolicyPacket.prototype.get_Type = function () {
	return this.type;
};
$asm06.System.Net.Sockets.MulticastPolicyPacket.prototype.set_Type = function (value) {
	if (this.type !== value) {
		this.serializedForm = null;
		this.type = value;
	}
};
$asm06.System.Net.Sockets.MulticastPolicyPacket.prototype.get_MessageId = function () {
	return this.messageId;
};
$asm06.System.Net.Sockets.MulticastPolicyPacket.prototype.set_MessageId = function (value) {
	this.serializedForm = null;
	this.messageId = value;
};
$asm06.System.Net.Sockets.MulticastPolicyPacket.prototype.get_ApplicationOrigin = function () {
	return this.applicationOrigin;
};
$asm06.System.Net.Sockets.MulticastPolicyPacket.prototype.set_ApplicationOrigin = function (value) {
	var bytes = System.Text.Encoding.UTF8.GetBytes$3(value);
	this.serializedForm = null;
	this.applicationOrigin = value;
	this.applicationOriginBytes = bytes;
};
$asm06.System.Net.Sockets.MulticastPolicyPacket.prototype.get_GroupAddress = function () {
	return this.groupAddress;
};
$asm06.System.Net.Sockets.MulticastPolicyPacket.prototype.set_GroupAddress = function (value) {
	var addressBytes = value.GetAddressBytes();
	this.serializedForm = null;
	this.groupAddress = value;
	this.groupAddressBytes = addressBytes;
};
$asm06.System.Net.Sockets.MulticastPolicyPacket.prototype.get_Port = function () {
	return this.port;
};
$asm06.System.Net.Sockets.MulticastPolicyPacket.prototype.set_Port = function (value) {
	if (this.port !== value) {
		this.serializedForm = null;
		this.port = value;
	}
};
$asm06.System.Net.Sockets.MulticastPolicyPacket.prototype.Serialize = function () {
	if (this.serializedForm === null) {
		var num = this.groupAddressBytes.length;
		var num2 = this.applicationOriginBytes.length;
		this.serializedForm = JSIL.Array.New(System.Byte, ((14 + num) + num2));
		this.serializedForm[0] = $asm06.System.Net.Sockets.MulticastPolicyPacket.headerBytes[0];
		this.serializedForm[1] = $asm06.System.Net.Sockets.MulticastPolicyPacket.headerBytes[1];
		this.serializedForm[2] = $asm06.System.Net.Sockets.MulticastPolicyPacket.headerBytes[2];
		this.serializedForm[3] = this.version;
		this.serializedForm[4] = Math.floor(this.type);
		this.serializedForm[5] = this.messageId[0];
		this.serializedForm[6] = this.messageId[1];
		this.serializedForm[7] = this.messageId[2];
		this.serializedForm[8] = this.messageId[3];
		this.serializedForm[9] = (this.port & 255);
		this.serializedForm[10] = ((this.port >> 8) & 255);
		this.serializedForm[11] = (num2 & 255);
		this.serializedForm[12] = ((num2 >> 8) & 255);
		this.serializedForm[13] = num;
		System.Buffer.BlockCopy(
			this.applicationOriginBytes, 
			0, 
			this.serializedForm, 
			14, 
			num2
		);
		System.Buffer.BlockCopy(
			this.groupAddressBytes, 
			0, 
			this.serializedForm, 
			(14 + num2), 
			num
		);
	}
	return this.serializedForm;
};
$asm06.System.Net.Sockets.MulticastPolicyPacket.Parse = function (buffer, offset, count) {
	if (count < 14) {
		return null;
	}
	if (!((buffer[offset] === $asm06.System.Net.Sockets.MulticastPolicyPacket.headerBytes[0]) && 
			(buffer[(offset + 1)] === $asm06.System.Net.Sockets.MulticastPolicyPacket.headerBytes[1]) && (buffer[(offset + 2)] === $asm06.System.Net.Sockets.MulticastPolicyPacket.headerBytes[2]))) {
		return null;
	}
	var multicastPolicyPacket = new $asm06.System.Net.Sockets.MulticastPolicyPacket();
	multicastPolicyPacket.version = buffer[(offset + 3)];
	multicastPolicyPacket.type = buffer[(offset + 4)];
	multicastPolicyPacket.messageId = JSIL.Array.New(System.Byte, [buffer[(offset + 5)], buffer[(offset + 6)], buffer[(offset + 7)], buffer[(offset + 8)]]);
	multicastPolicyPacket.port = (buffer[(offset + 9)] | (buffer[(offset + 10)] << 8));
	var num = (buffer[(offset + 11)] | (buffer[(offset + 12)] << 8));
	var num2 = buffer[(offset + 13)];
	offset += 14;
	if ((offset + num) > count) {
		return null;
	}
	multicastPolicyPacket.applicationOriginBytes = JSIL.Array.New(System.Byte, num);
	System.Buffer.BlockCopy(
		buffer, 
		offset, 
		multicastPolicyPacket.applicationOriginBytes, 
		0, 
		num
	);
	try {
		var uTF8Encoding = new System.Text.UTF8Encoding(false, true);
		multicastPolicyPacket.applicationOrigin = uTF8Encoding.GetString$1(multicastPolicyPacket.applicationOriginBytes, 0, num);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.Text.DecoderFallbackException)) {
			return null;
		} else {
			throw $exception;
		}
	}
	offset += num;
	if ((offset + num2) > count) {
		return null;
	}
	if (!((num2 === 4) || (num2 === 16))) {
		return null;
	}
	multicastPolicyPacket.groupAddressBytes = JSIL.Array.New(System.Byte, num2);
	System.Buffer.BlockCopy(
		buffer, 
		offset, 
		multicastPolicyPacket.groupAddressBytes, 
		0, 
		num2
	);
	multicastPolicyPacket.groupAddress = JSIL.New(System.Net.IPAddress, "_ctor$3", [multicastPolicyPacket.groupAddressBytes]);
	return multicastPolicyPacket;
};
JSIL.MakeProperty($asm06.System.Net.Sockets.MulticastPolicyPacket.prototype, "Version", 
	$asm06.System.Net.Sockets.MulticastPolicyPacket.prototype.get_Version, $asm06.System.Net.Sockets.MulticastPolicyPacket.prototype.set_Version);
JSIL.MakeProperty($asm06.System.Net.Sockets.MulticastPolicyPacket.prototype, "Type", 
	$asm06.System.Net.Sockets.MulticastPolicyPacket.prototype.get_Type, $asm06.System.Net.Sockets.MulticastPolicyPacket.prototype.set_Type);
JSIL.MakeProperty($asm06.System.Net.Sockets.MulticastPolicyPacket.prototype, "MessageId", 
	$asm06.System.Net.Sockets.MulticastPolicyPacket.prototype.get_MessageId, $asm06.System.Net.Sockets.MulticastPolicyPacket.prototype.set_MessageId);
JSIL.MakeProperty($asm06.System.Net.Sockets.MulticastPolicyPacket.prototype, "ApplicationOrigin", 
	$asm06.System.Net.Sockets.MulticastPolicyPacket.prototype.get_ApplicationOrigin, $asm06.System.Net.Sockets.MulticastPolicyPacket.prototype.set_ApplicationOrigin);
JSIL.MakeProperty($asm06.System.Net.Sockets.MulticastPolicyPacket.prototype, "GroupAddress", 
	$asm06.System.Net.Sockets.MulticastPolicyPacket.prototype.get_GroupAddress, $asm06.System.Net.Sockets.MulticastPolicyPacket.prototype.set_GroupAddress);
JSIL.MakeProperty($asm06.System.Net.Sockets.MulticastPolicyPacket.prototype, "Port", 
	$asm06.System.Net.Sockets.MulticastPolicyPacket.prototype.get_Port, $asm06.System.Net.Sockets.MulticastPolicyPacket.prototype.set_Port);
Object.defineProperty($asm06.System.Net.Sockets.MulticastPolicyPacket, "constantLength", {
		"value": 14}
);
$asm06.System.Net.Sockets.MulticastPolicyPacket.headerBytes = null;
$asm06.System.Net.Sockets.MulticastPolicyPacket.prototype.version = 0;
$asm06.System.Net.Sockets.MulticastPolicyPacket.prototype.type = 0;
$asm06.System.Net.Sockets.MulticastPolicyPacket.prototype.messageId = null;
$asm06.System.Net.Sockets.MulticastPolicyPacket.prototype.port = 0;
$asm06.System.Net.Sockets.MulticastPolicyPacket.prototype.applicationOrigin = null;
$asm06.System.Net.Sockets.MulticastPolicyPacket.prototype.applicationOriginBytes = null;
$asm06.System.Net.Sockets.MulticastPolicyPacket.prototype.groupAddress = null;
$asm06.System.Net.Sockets.MulticastPolicyPacket.prototype.groupAddressBytes = null;
$asm06.System.Net.Sockets.MulticastPolicyPacket.prototype.serializedForm = null;
$asm06.System.Net.Sockets.MulticastPolicyPacket._cctor = function () {
	var array = JSIL.Array.New(System.Byte, 3);
	array[0] = 83;
	array[1] = 76;
	$asm06.System.Net.Sockets.MulticastPolicyPacket.headerBytes = array;
};

$asm06.System.Net.Sockets.SocketPolicyAsyncResult.prototype._ctor = function (protocol, endpoint, callback, userToken) {
	System.Object.prototype._ctor.call(this);
	this.m_Protocol = protocol;
	this.m_EndPoint = endpoint;
	this.m_Callback = callback;
	this.m_UserToken = userToken;
};
$asm06.System.Net.Sockets.SocketPolicyAsyncResult.prototype.get_Allowed = function () {
	return this.m_Allowed;
};
$asm06.System.Net.Sockets.SocketPolicyAsyncResult.prototype.set_Allowed = function (value) {
	this.m_Allowed = value;
};
$asm06.System.Net.Sockets.SocketPolicyAsyncResult.prototype.get_CompletedSynchronously = function () {
	return this.m_CompletedSynchronously;
};
$asm06.System.Net.Sockets.SocketPolicyAsyncResult.prototype.set_CompletedSynchronously = function (value) {
	this.m_CompletedSynchronously = value;
};
$asm06.System.Net.Sockets.SocketPolicyAsyncResult.prototype.get_Aborted = function () {
	return this.m_Aborted;
};
$asm06.System.Net.Sockets.SocketPolicyAsyncResult.prototype.set_Aborted = function (value) {
	this.m_Aborted = value;
};
$asm06.System.Net.Sockets.SocketPolicyAsyncResult.prototype.get_Protocol = function () {
	return this.m_Protocol;
};
$asm06.System.Net.Sockets.SocketPolicyAsyncResult.prototype.get_EndPoint = function () {
	return this.m_EndPoint;
};
$asm06.System.Net.Sockets.SocketPolicyAsyncResult.prototype.get_UserToken = function () {
	return this.m_UserToken;
};
$asm06.System.Net.Sockets.SocketPolicyAsyncResult.prototype.Complete = function () {
	this.m_Callback(this);
};
$asm06.System.Net.Sockets.SocketPolicyAsyncResult.prototype.Abort = function () {
};
JSIL.MakeProperty($asm06.System.Net.Sockets.SocketPolicyAsyncResult.prototype, "Allowed", 
	$asm06.System.Net.Sockets.SocketPolicyAsyncResult.prototype.get_Allowed, $asm06.System.Net.Sockets.SocketPolicyAsyncResult.prototype.set_Allowed);
JSIL.MakeProperty($asm06.System.Net.Sockets.SocketPolicyAsyncResult.prototype, "CompletedSynchronously", 
	$asm06.System.Net.Sockets.SocketPolicyAsyncResult.prototype.get_CompletedSynchronously, $asm06.System.Net.Sockets.SocketPolicyAsyncResult.prototype.set_CompletedSynchronously);
JSIL.MakeProperty($asm06.System.Net.Sockets.SocketPolicyAsyncResult.prototype, "Aborted", 
	$asm06.System.Net.Sockets.SocketPolicyAsyncResult.prototype.get_Aborted, $asm06.System.Net.Sockets.SocketPolicyAsyncResult.prototype.set_Aborted);
JSIL.MakeProperty($asm06.System.Net.Sockets.SocketPolicyAsyncResult.prototype, "Protocol", 
	$asm06.System.Net.Sockets.SocketPolicyAsyncResult.prototype.get_Protocol, null);
JSIL.MakeProperty($asm06.System.Net.Sockets.SocketPolicyAsyncResult.prototype, "EndPoint", 
	$asm06.System.Net.Sockets.SocketPolicyAsyncResult.prototype.get_EndPoint, null);
JSIL.MakeProperty($asm06.System.Net.Sockets.SocketPolicyAsyncResult.prototype, "UserToken", 
	$asm06.System.Net.Sockets.SocketPolicyAsyncResult.prototype.get_UserToken, null);
$asm06.System.Net.Sockets.SocketPolicyAsyncResult.prototype.m_Callback = null;
$asm06.System.Net.Sockets.SocketPolicyAsyncResult.prototype.m_UserToken = null;
$asm06.System.Net.Sockets.SocketPolicyAsyncResult.prototype.m_Protocol = 0;
$asm06.System.Net.Sockets.SocketPolicyAsyncResult.prototype.m_EndPoint = null;
$asm06.System.Net.Sockets.SocketPolicyAsyncResult.prototype.m_Allowed = false;
$asm06.System.Net.Sockets.SocketPolicyAsyncResult.prototype.m_CompletedSynchronously = false;
$asm06.System.Net.Sockets.SocketPolicyAsyncResult.prototype.m_Aborted = false;

$asm06.System.Net.Sockets.ISocketPolicyManager.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};

$asm06.System.Net.Sockets.CrossDomainPolicyAsyncResult.prototype._ctor = function (downloader, protocol, endpoint, callback, userToken) {
	$asm06.System.Net.Sockets.SocketPolicyAsyncResult.prototype._ctor.call(this, protocol, endpoint, callback, userToken);
	this.m_Downloader = downloader;
};
$asm06.System.Net.Sockets.CrossDomainPolicyAsyncResult.prototype.get_Downloader = function () {
	return this.m_Downloader;
};
$asm06.System.Net.Sockets.CrossDomainPolicyAsyncResult.prototype.Abort = function () {
	if (this.m_Downloader.Abort(this)) {
		$asm06.System.Net.Sockets.SocketPolicyAsyncResult.prototype.set_Allowed.call(this, false);
		$asm06.System.Net.Sockets.SocketPolicyAsyncResult.prototype.set_Aborted.call(this, true);
		$asm06.System.Net.Sockets.SocketPolicyAsyncResult.prototype.Complete.call(this);
	}
};
JSIL.MakeProperty($asm06.System.Net.Sockets.CrossDomainPolicyAsyncResult.prototype, "Downloader", 
	$asm06.System.Net.Sockets.CrossDomainPolicyAsyncResult.prototype.get_Downloader, null);
$asm06.System.Net.Sockets.CrossDomainPolicyAsyncResult.prototype.m_Downloader = null;

$asm06.System.Net.Sockets.IPAddressAndPolicyProtocol.prototype._ctor = function (address, protocol) {
	System.Object.prototype._ctor.call(this);
	this.address = address;
	this.protocol = protocol;
};
$asm06.System.Net.Sockets.IPAddressAndPolicyProtocol.prototype.Equals = function (obj) {
	var iPAddressAndPolicyProtocol = JSIL.TryCast(obj, $asm06.System.Net.Sockets.IPAddressAndPolicyProtocol);
	return (iPAddressAndPolicyProtocol && 
		this.address.Equals(iPAddressAndPolicyProtocol.address) && (this.protocol === iPAddressAndPolicyProtocol.protocol));
};
$asm06.System.Net.Sockets.IPAddressAndPolicyProtocol.prototype.GetHashCode = function () {
	return (this.address.GetHashCode() ^ this.protocol.GetHashCode());
};
$asm06.System.Net.Sockets.IPAddressAndPolicyProtocol.prototype.address = null;
$asm06.System.Net.Sockets.IPAddressAndPolicyProtocol.prototype.protocol = 0;

$asm06.System.Net.Sockets.CrossDomainSocketPolicyManager.prototype._ctor$0 = function () {
	$asm06.System.Net.Sockets.ISocketPolicyManager.prototype._ctor.call(this);
};
$asm06.System.Net.Sockets.CrossDomainSocketPolicyManager.prototype._ctor$1 = function (applicationUri) {
	$asm06.System.Net.Sockets.ISocketPolicyManager.prototype._ctor.call(this);
	this.m_ApplicationUri = applicationUri;
	this.m_PolicyCache = JSIL.New(System.Collections.Generic.Dictionary$b2.Of($asm06.System.Net.Sockets.IPAddressAndPolicyProtocol, $asm06.System.Net.Sockets.SocketPolicyDownloader), "_ctor$0", []);
	$asm06.System.Net.NetworkInformation.SecurityCriticalNetworkChange.RegisterForNetworkAddressChange(JSIL.Delegate.New("System.Net.NetworkInformation.SecurityCriticalNetworkAddressChangedEventHandler", this, $asm06.System.Net.Sockets.CrossDomainSocketPolicyManager.prototype.NetworkChange_NetworkAddressChanged));
};
$asm06.System.Net.Sockets.CrossDomainSocketPolicyManager.prototype.NetworkChange_NetworkAddressChanged = function (sender, e) {
	var policyCache = null;
	System.Threading.Monitor.Enter((policyCache = this.m_PolicyCache));
	try {
		this.m_PolicyCache.Clear();
	} finally {
		System.Threading.Monitor.Exit(policyCache);
	}
};
$asm06.System.Net.Sockets.CrossDomainSocketPolicyManager.prototype.BeginPolicyCheck = function (protocol, policyProtocol, endPoint, callback, userToken) {
	var policyCache = null;
	if (endPoint === null) {
		return (new $asm06.System.Net.Sockets.CrossDomainPolicyAsyncResult(null, protocol, null, null, null)).__Initialize__({
				Allowed: false, 
				CompletedSynchronously: true}
		);
	}
	var key = new $asm06.System.Net.Sockets.IPAddressAndPolicyProtocol(endPoint.Address, policyProtocol);
	if (!this.m_PolicyCache.ContainsKey(key)) {
		System.Threading.Monitor.Enter((policyCache = this.m_PolicyCache));
		try {
			if (!this.m_PolicyCache.ContainsKey(key)) {
				this.m_PolicyCache.set_Item(key, new $asm06.System.Net.Sockets.SocketPolicyDownloader(this.m_ApplicationUri, endPoint.Address, policyProtocol, JSIL.Delegate.New("System.Net.Sockets.SocketPolicyDownloadCallback", null, $asm06.System.Net.Sockets.CrossDomainSocketPolicyManager.DoPolicyCheck)));
			}
		} finally {
			System.Threading.Monitor.Exit(policyCache);
		}
	}
	var socketPolicyDownloader = this.m_PolicyCache.get_Item(key);
	var socketPolicyAsyncResult = new $asm06.System.Net.Sockets.CrossDomainPolicyAsyncResult(socketPolicyDownloader, protocol, endPoint, callback, userToken);
	if (socketPolicyDownloader.BeginDownload(socketPolicyAsyncResult)) {
		socketPolicyAsyncResult.CompletedSynchronously = true;
		$asm06.System.Net.Sockets.CrossDomainSocketPolicyManager.DoPolicyCheck(socketPolicyAsyncResult);
	}
	return socketPolicyAsyncResult;
};
$asm06.System.Net.Sockets.CrossDomainSocketPolicyManager.DoPolicyCheck = function (result) {
	var crossDomainPolicyAsyncResult = JSIL.Cast(result, $asm06.System.Net.Sockets.CrossDomainPolicyAsyncResult);
	var result2 = crossDomainPolicyAsyncResult.Downloader.Result;
	result.Allowed = ((result2 !== null) && 
		result2.ConnectAllowed(crossDomainPolicyAsyncResult.Protocol, crossDomainPolicyAsyncResult.EndPoint.Port));
	if (!result.CompletedSynchronously) {
		result.Complete();
	}
};
JSIL.OverloadedMethod(System.Net.Sockets.CrossDomainSocketPolicyManager.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Uri]]
	]);
$asm06.System.Net.Sockets.CrossDomainSocketPolicyManager.prototype.m_PolicyCache = null;
$asm06.System.Net.Sockets.CrossDomainSocketPolicyManager.prototype.m_ApplicationUri = null;

$asm06.System.Net.Sockets.SocketPolicyDownloader.prototype._ctor = function (appUri, address, policyProtocol, callback) {
	System.Object.prototype._ctor.call(this);
	this.m_Callback = callback;
	switch (Number(policyProtocol)) {
		case 0: 
			this.m_Protocol = new $asm06.System.Net.Sockets.TcpPolicyDownloaderProtocol(appUri, address);
			break;
		case 1: 
			this.m_Protocol = new $asm06.System.Net.Sockets.HttpPolicyDownloaderProtocol(appUri, address);
			break;
	}
	this.m_SyncObject = new System.Object();
	this.m_LastAttempt = System.DateTime.MinValue.MemberwiseClone();
	this.m_Backoff = 2;
};
$asm06.System.Net.Sockets.SocketPolicyDownloader.prototype.get_Result = function () {
	return this.m_Protocol.ISocketPolicyDownloaderProtocol_Result;
};
$asm06.System.Net.Sockets.SocketPolicyDownloader.prototype.Abort = function (policyCheck) {
	var syncObject = null;
	if (this.m_PendingChecks === null) {
		return false;
	}
	System.Threading.Monitor.Enter((syncObject = this.m_SyncObject));
	try {
		if (this.m_PendingChecks === null) {
			var result = false;
		} else {
			var flag = this.m_PendingChecks.Remove(policyCheck);
			if (this.m_PendingChecks.Count === 0) {
				this.m_Protocol.ISocketPolicyDownloaderProtocol_Abort();
				this.m_PendingChecks = null;
			}
			result = flag;
		}
	} finally {
		System.Threading.Monitor.Exit(syncObject);
	}
	return result;
};
$asm06.System.Net.Sockets.SocketPolicyDownloader.prototype.BeginDownload = function (policyCheck) {
	var syncObject = null;
	if (this.m_Protocol.ISocketPolicyDownloaderProtocol_Result !== null) {
		return true;
	}
	System.Threading.Monitor.Enter((syncObject = this.m_SyncObject));
	try {
		if (this.m_Protocol.ISocketPolicyDownloaderProtocol_Result !== null) {
			var result = true;
			return result;
		}
		if (this.m_PendingChecks !== null) {
			this.m_PendingChecks.Add(policyCheck);
			result = false;
			return result;
		}
		if (this.m_LastAttempt.AddSeconds(this.m_Backoff).CompareTo$1(System.DateTime.Now.MemberwiseClone()) > 0) {
			result = true;
			return result;
		}
		this.m_PendingChecks = new (System.Collections.Generic.List$b1.Of($asm06.System.Net.Sockets.SocketPolicyAsyncResult)) (2);
		this.m_PendingChecks.Add(policyCheck);
	} finally {
		System.Threading.Monitor.Exit(syncObject);
	}
	this.m_LastAttempt = System.DateTime.Now.MemberwiseClone();
	this.m_Backoff *= 5.5;
	this.m_Protocol.ISocketPolicyDownloaderProtocol_BeginDownload(JSIL.Delegate.New("System.Net.Sockets.SecurityCriticalAction", this, $asm06.System.Net.Sockets.SocketPolicyDownloader.prototype.DownloadCallback));
	return false;
};
$asm06.System.Net.Sockets.SocketPolicyDownloader.prototype.DownloadCallback = function () {
	var syncObject = null;
	if (this.m_PendingChecks === null) {
		return;
	}
	System.Threading.Monitor.Enter((syncObject = this.m_SyncObject));
	try {
		if (this.m_PendingChecks === null) {
			return;
		}
		this.m_PendingChecks = null;
	} finally {
		System.Threading.Monitor.Exit(syncObject);
	}
	var enumerator = (this.m_PendingChecks.GetEnumerator());
	try {
	__loop0__: 
		while (enumerator.MoveNext()) {
			var current = enumerator.Current;
			this.m_Callback(current);
		}
	} finally {
		enumerator.IDisposable_Dispose();
	}
};
JSIL.MakeProperty($asm06.System.Net.Sockets.SocketPolicyDownloader.prototype, "Result", 
	$asm06.System.Net.Sockets.SocketPolicyDownloader.prototype.get_Result, null);
$asm06.System.Net.Sockets.SocketPolicyDownloader.prototype.m_PendingChecks = null;
$asm06.System.Net.Sockets.SocketPolicyDownloader.prototype.m_SyncObject = null;
$asm06.System.Net.Sockets.SocketPolicyDownloader.prototype.m_Protocol = null;
$asm06.System.Net.Sockets.SocketPolicyDownloader.prototype.m_Backoff = 0;
$asm06.System.Net.Sockets.SocketPolicyDownloader.prototype.m_Callback = null;

$asm06.System.Net.Sockets.TcpPolicyDownloaderProtocolCallbacks.SocketCallback = function (sender, e) {
	$asm06.System.Net.Sockets.TcpPolicyDownloaderProtocol.SocketCallback(sender, e);
};

$asm06.System.Net.Sockets.TcpPolicyDownloaderProtocol.prototype._ctor = function (appUri, address) {
	System.Object.prototype._ctor.call(this);
	this.applicationUri = appUri;
	this.policyAddress = address;
	this.lockObject = new System.Object();
};
$asm06.System.Net.Sockets.TcpPolicyDownloaderProtocol.prototype.get_Result = function () {
	return this.result;
};
$asm06.System.Net.Sockets.TcpPolicyDownloaderProtocol.prototype.BeginDownload = function (callback) {
	var obj = null;
	this.callback = callback;
	System.Threading.Monitor.Enter((obj = this.lockObject));
	try {
		if (this.abortBeforeBeginDownload) {
			this.abortBeforeBeginDownload = false;
			this.FinishOperation();
			return;
		}
		this.policySocket = new System.Net.Sockets.Socket(this.policyAddress.AddressFamily, System.Net.Sockets.SocketType.Stream, System.Net.Sockets.ProtocolType.Tcp);
	} finally {
		System.Threading.Monitor.Exit(obj);
	}
	this.policyBuffer = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
	var iPEndPoint = JSIL.New(System.Net.IPEndPoint, "_ctor$1", [this.policyAddress, 943]);
	var socketAsyncEventArgs = new System.Net.Sockets.SocketAsyncEventArgs();
	socketAsyncEventArgs.RemoteEndPoint = iPEndPoint;
	socketAsyncEventArgs.add_Completed(JSIL.Delegate.New("System.EventHandler`1[System.Net.Sockets.SocketAsyncEventArgs]", null, $asm06.System.Net.Sockets.TcpPolicyDownloaderProtocolCallbacks.SocketCallback));
	socketAsyncEventArgs.UserToken = this;
	socketAsyncEventArgs.SetBuffer$0($asm06.System.Net.Sockets.TcpPolicyDownloaderProtocol.policyRequest, 0, $asm06.System.Net.Sockets.TcpPolicyDownloaderProtocol.policyRequest.length);
	try {
		if (!this.policySocket.UnsafeConnectAsync(socketAsyncEventArgs, iPEndPoint)) {
			socketAsyncEventArgs.Dispose();
			this.FinishOperation();
		}
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.Net.Sockets.SocketException)) {
			socketAsyncEventArgs.Dispose();
			this.FinishOperation();
		} else {
			throw $exception;
		}
	}
};
$asm06.System.Net.Sockets.TcpPolicyDownloaderProtocol.prototype.Abort = function () {
	var obj = null;
	System.Threading.Monitor.Enter((obj = this.lockObject));
	try {
		if (this.policySocket === null) {
			this.abortBeforeBeginDownload = true;
		} else {
			this.policySocket.Close$1(0);
		}
	} finally {
		System.Threading.Monitor.Exit(obj);
	}
};
$asm06.System.Net.Sockets.TcpPolicyDownloaderProtocol.SocketCallback = function (sender, args) {
	var tcpPolicyDownloaderProtocol = JSIL.Cast(args.UserToken, $asm06.System.Net.Sockets.TcpPolicyDownloaderProtocol);
	if (JSIL.Cast(args.SocketError, System.Boolean)) {
		args.Dispose();
		tcpPolicyDownloaderProtocol.FinishOperation();
		return;
	}
	if (args.LastOperation === System.Net.Sockets.SocketAsyncOperation.Connect) {
		tcpPolicyDownloaderProtocol.ConnectCallback(args);
		return;
	}
	if (args.LastOperation === System.Net.Sockets.SocketAsyncOperation.Receive) {
		tcpPolicyDownloaderProtocol.ReceiveCallback(args);
		return;
	}
	args.Dispose();
	tcpPolicyDownloaderProtocol.FinishOperation();
};
$asm06.System.Net.Sockets.TcpPolicyDownloaderProtocol.prototype.ConnectCallback = function (args) {
	args.SetBuffer$0(JSIL.Array.New(System.Byte, 1024), 0, 1024);
	this.StartReceive(args);
};
$asm06.System.Net.Sockets.TcpPolicyDownloaderProtocol.prototype.ReceiveCallback = function (args) {
	if (args.BytesTransferred === 0) {
		args.Dispose();
		this.result = new $asm06.System.Net.Sockets.SocketPolicy(this.applicationUri, this.policyBuffer.toString());
		this.FinishOperation();
		return;
	}
	this.policyBuffer.Append$2(System.Text.Encoding.UTF8.GetString$1(args.Buffer, 0, args.BytesTransferred));
	this.StartReceive(args);
};
$asm06.System.Net.Sockets.TcpPolicyDownloaderProtocol.prototype.StartReceive = function (args) {
	try {
		if (!this.policySocket.ReceiveAsync(args)) {
			args.Dispose();
			this.FinishOperation();
		}
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.Net.Sockets.SocketException)) {
			args.Dispose();
			this.FinishOperation();
		} else {
			throw $exception;
		}
	}
};
$asm06.System.Net.Sockets.TcpPolicyDownloaderProtocol.prototype.FinishOperation = function () {
	this.policySocket.Close$0();
	this.policyBuffer = null;
	if (this.callback !== null) {
		this.callback();
	}
};
JSIL.MakeProperty($asm06.System.Net.Sockets.TcpPolicyDownloaderProtocol.prototype, "Result", 
	$asm06.System.Net.Sockets.TcpPolicyDownloaderProtocol.prototype.get_Result, null);
Object.defineProperty($asm06.System.Net.Sockets.TcpPolicyDownloaderProtocol, "policyPort", {
		"value": 943}
);
$asm06.System.Net.Sockets.TcpPolicyDownloaderProtocol.policyRequest = null;
$asm06.System.Net.Sockets.TcpPolicyDownloaderProtocol.prototype.applicationUri = null;
$asm06.System.Net.Sockets.TcpPolicyDownloaderProtocol.prototype.policyAddress = null;
$asm06.System.Net.Sockets.TcpPolicyDownloaderProtocol.prototype.policySocket = null;
$asm06.System.Net.Sockets.TcpPolicyDownloaderProtocol.prototype.policyBuffer = null;
$asm06.System.Net.Sockets.TcpPolicyDownloaderProtocol.prototype.abortBeforeBeginDownload = false;
$asm06.System.Net.Sockets.TcpPolicyDownloaderProtocol.prototype.lockObject = null;
$asm06.System.Net.Sockets.TcpPolicyDownloaderProtocol.prototype.callback = null;
$asm06.System.Net.Sockets.TcpPolicyDownloaderProtocol.prototype.result = null;
$asm06.System.Net.Sockets.TcpPolicyDownloaderProtocol._cctor = function () {
	$asm06.System.Net.Sockets.TcpPolicyDownloaderProtocol.policyRequest = System.Text.Encoding.UTF8.GetBytes$3("<policy-file-request/>");
};

$asm06.System.Net.Sockets.HttpPolicyDownloaderProtocolCallbacks.DownloadCallback = function (result) {
	var httpPolicyDownloaderProtocol = JSIL.Cast(result.IAsyncResult_AsyncState, $asm06.System.Net.Sockets.HttpPolicyDownloaderProtocol);
	httpPolicyDownloaderProtocol.DownloadCallback(result);
};
$asm06.System.Net.Sockets.HttpPolicyDownloaderProtocolCallbacks.ReadCallback = function (result) {
	var httpPolicyDownloaderProtocol = JSIL.Cast(result.IAsyncResult_AsyncState, $asm06.System.Net.Sockets.HttpPolicyDownloaderProtocol);
	httpPolicyDownloaderProtocol.ReadCallback(result);
};

$asm06.System.Net.Sockets.HttpPolicyDownloaderProtocol.prototype._ctor = function (appUri, address) {
	System.Object.prototype._ctor.call(this);
	this.applicationUri = appUri;
	this.policyAddress = address;
	this.lockObject = new System.Object();
};
$asm06.System.Net.Sockets.HttpPolicyDownloaderProtocol.prototype.get_Result = function () {
	return this.result;
};
$asm06.System.Net.Sockets.HttpPolicyDownloaderProtocol.RegisterUnsafeWebRequestCreator = function (creator) {
	$asm06.System.Net.Sockets.HttpPolicyDownloaderProtocol.unsafeWebRequestCreator = creator;
};
$asm06.System.Net.Sockets.HttpPolicyDownloaderProtocol.prototype.BeginDownload = function (callback) {
	var obj = null;
	this.callback = callback;
	var uriBuilder = JSIL.New(System.UriBuilder, "_ctor$0", []);
	var text = this.policyAddress.toString();
	if (this.policyAddress.IsIPv6LinkLocal) {
		text = text.Split(JSIL.Array.New(System.Char, ["%"]))[0];
	}
	uriBuilder.Scheme = "http";
	uriBuilder.Host = text;
	uriBuilder.Path = "clientaccesspolicy.xml";
	System.Threading.Monitor.Enter((obj = this.lockObject));
	try {
		if (this.abortBeforeBeginDownload) {
			this.abortBeforeBeginDownload = false;
			this.FinishOperation();
			return;
		}
		this.policyRequest = $asm06.System.Net.Sockets.HttpPolicyDownloaderProtocol.unsafeWebRequestCreator.IUnsafeWebRequestCreate_Create(uriBuilder.Uri);
	} finally {
		System.Threading.Monitor.Exit(obj);
	}
	this.policyRequest.BeginGetResponse(JSIL.Delegate.New("System.AsyncCallback", null, $asm06.System.Net.Sockets.HttpPolicyDownloaderProtocolCallbacks.DownloadCallback), this);
};
$asm06.System.Net.Sockets.HttpPolicyDownloaderProtocol.prototype.Abort = function () {
	var obj = null;
	System.Threading.Monitor.Enter((obj = this.lockObject));
	try {
		if (this.policyRequest === null) {
			this.abortBeforeBeginDownload = true;
		} else {
			this.policyRequest.Abort();
		}
	} finally {
		System.Threading.Monitor.Exit(obj);
	}
};
$asm06.System.Net.Sockets.HttpPolicyDownloaderProtocol.prototype.DownloadCallback = function (ar) {
	try {
		this.policyResponse = this.policyRequest.EndGetResponse(ar);
		this.policyResponseStream = this.policyResponse.GetResponseStream();
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.Net.WebException)) {
			this.FinishOperation();
			return;
		} else {
			throw $exception;
		}
	}
	this.readBuffer = JSIL.Array.New(System.Byte, 1024);
	this.policyBuffer = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
	this.StartRead();
};
$asm06.System.Net.Sockets.HttpPolicyDownloaderProtocol.prototype.ReadCallback = function (ar) {
	try {
		var num = this.policyResponseStream.EndRead(ar);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.IO.IOException)) {
			this.FinishOperation();
			return;
		} else {
			throw $exception;
		}
	}
	if (num === 0) {
		this.result = new $asm06.System.Net.Sockets.SocketPolicy(this.applicationUri, this.policyBuffer.toString());
		this.FinishOperation();
		return;
	}
	this.policyBuffer.Append$2(System.Text.Encoding.UTF8.GetString$1(this.readBuffer, 0, num));
	this.StartRead();
};
$asm06.System.Net.Sockets.HttpPolicyDownloaderProtocol.prototype.StartRead = function () {
	try {
		this.policyResponseStream.BeginRead(
			this.readBuffer, 
			0, 
			this.readBuffer.length, 
			JSIL.Delegate.New("System.AsyncCallback", null, $asm06.System.Net.Sockets.HttpPolicyDownloaderProtocolCallbacks.ReadCallback), 
			this
		);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.IO.IOException)) {
			this.FinishOperation();
		} else {
			throw $exception;
		}
	}
};
$asm06.System.Net.Sockets.HttpPolicyDownloaderProtocol.prototype.FinishOperation = function () {
	if (this.policyResponse !== null) {
		this.policyResponse.Close();
		this.policyResponse = null;
	}
	if (this.policyResponseStream !== null) {
		this.policyResponseStream.Close();
		this.policyResponseStream = null;
	}
	this.readBuffer = null;
	this.policyBuffer = null;
	if (this.callback !== null) {
		this.callback();
	}
};
JSIL.MakeProperty($asm06.System.Net.Sockets.HttpPolicyDownloaderProtocol.prototype, "Result", 
	$asm06.System.Net.Sockets.HttpPolicyDownloaderProtocol.prototype.get_Result, null);
$asm06.System.Net.Sockets.HttpPolicyDownloaderProtocol.unsafeWebRequestCreator = null;
$asm06.System.Net.Sockets.HttpPolicyDownloaderProtocol.prototype.applicationUri = null;
$asm06.System.Net.Sockets.HttpPolicyDownloaderProtocol.prototype.policyAddress = null;
$asm06.System.Net.Sockets.HttpPolicyDownloaderProtocol.prototype.callback = null;
$asm06.System.Net.Sockets.HttpPolicyDownloaderProtocol.prototype.policyRequest = null;
$asm06.System.Net.Sockets.HttpPolicyDownloaderProtocol.prototype.policyResponse = null;
$asm06.System.Net.Sockets.HttpPolicyDownloaderProtocol.prototype.policyResponseStream = null;
$asm06.System.Net.Sockets.HttpPolicyDownloaderProtocol.prototype.abortBeforeBeginDownload = false;
$asm06.System.Net.Sockets.HttpPolicyDownloaderProtocol.prototype.lockObject = null;
$asm06.System.Net.Sockets.HttpPolicyDownloaderProtocol.prototype.policyBuffer = null;
$asm06.System.Net.Sockets.HttpPolicyDownloaderProtocol.prototype.readBuffer = null;
$asm06.System.Net.Sockets.HttpPolicyDownloaderProtocol.prototype.result = null;

$asm06.System.Net.Sockets.UnsafeSocketPolicyNativeMethods.ParseSocketPolicy = function (pPolicyBuffer, cPolicyBuffer, /* ref */ ppPolicy) {
	if ($asm06.System.Net.UnsafeNclNativeMethods.IsWindows) {
		return $asm06.System.Net.Sockets.UnsafeSocketPolicyNativeMethods.ParseSocketPolicyWindows(pPolicyBuffer, cPolicyBuffer, /* ref */ ppPolicy);
	}
	return $asm06.System.Net.Sockets.UnsafeSocketPolicyNativeMethods.ParseSocketPolicyUnix(pPolicyBuffer, cPolicyBuffer, /* ref */ ppPolicy);
};
$asm06.System.Net.Sockets.UnsafeSocketPolicyNativeMethods.FreeSocketPolicy = function (pPolicy) {
	if ($asm06.System.Net.UnsafeNclNativeMethods.IsWindows) {
		return $asm06.System.Net.Sockets.UnsafeSocketPolicyNativeMethods.FreeSocketPolicyWindows(pPolicy);
	}
	return $asm06.System.Net.Sockets.UnsafeSocketPolicyNativeMethods.FreeSocketPolicyUnix(pPolicy);
};
$asm06.System.Net.Sockets.UnsafeSocketPolicyNativeMethods.CheckSocketPolicy = function (pPolicy, pAppUri, cAppUri, protocol, port) {
	if ($asm06.System.Net.UnsafeNclNativeMethods.IsWindows) {
		return $asm06.System.Net.Sockets.UnsafeSocketPolicyNativeMethods.CheckSocketPolicyWindows(
			pPolicy, 
			pAppUri, 
			cAppUri, 
			protocol, 
			port
		);
	}
	return $asm06.System.Net.Sockets.UnsafeSocketPolicyNativeMethods.CheckSocketPolicyUnix(
		pPolicy, 
		pAppUri, 
		cAppUri, 
		protocol, 
		port
	);
};
$asm06.System.Net.Sockets.UnsafeSocketPolicyNativeMethods.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};

$asm06.System.Net.Sockets.SafeFreeSocketPolicy.prototype._ctor = function () {
	Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.prototype._ctor$0.call(this, true);
};
$asm06.System.Net.Sockets.SafeFreeSocketPolicy.ParseSocketPolicy = function (policyBuffer) {
	var result = new JSIL.Variable(null);
	$asm06.System.Net.Sockets.UnsafeSocketPolicyNativeMethods.ParseSocketPolicy(policyBuffer, policyBuffer.length, /* ref */ result);
	return result.value;
};
$asm06.System.Net.Sockets.SafeFreeSocketPolicy.prototype.ReleaseHandle = function () {
	$asm06.System.Net.Sockets.UnsafeSocketPolicyNativeMethods.FreeSocketPolicy(this.handle);
	return true;
};

$asm06.System.Net.Sockets.SocketPolicy.prototype._ctor = function (appUri, policy) {
	System.Object.prototype._ctor.call(this);
	this.m_AppUri = appUri.toString();
	this.m_NativeHandle = $asm06.System.Net.Sockets.SafeFreeSocketPolicy.ParseSocketPolicy(policy);
};
$asm06.System.Net.Sockets.SocketPolicy.prototype.ConnectAllowed = function (protocol, port) {
	return $asm06.System.Net.Sockets.UnsafeSocketPolicyNativeMethods.CheckSocketPolicy(
		this.m_NativeHandle, 
		this.m_AppUri, 
		this.m_AppUri.length, 
		protocol, 
		port
	);
};
$asm06.System.Net.Sockets.SocketPolicy.prototype.m_AppUri = null;
$asm06.System.Net.Sockets.SocketPolicy.prototype.m_NativeHandle = null;

$asm06.System.Net.Sockets.SocketPolicy.SocketPolicyCheckArgs.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm06.System.Net.Sockets.SocketPolicy.SocketPolicyCheckArgs.prototype.NativeHandle = null;
$asm06.System.Net.Sockets.SocketPolicy.SocketPolicyCheckArgs.prototype.AppUri = null;
$asm06.System.Net.Sockets.SocketPolicy.SocketPolicyCheckArgs.prototype.Protocol = 0;
$asm06.System.Net.Sockets.SocketPolicy.SocketPolicyCheckArgs.prototype.Port = 0;
$asm06.System.Net.Sockets.SocketPolicy.SocketPolicyCheckArgs.prototype.Allowed = false;


$asm06.System.Net.Sockets.RegKeyServices.get_AllowUdpMulticastClients = function () {
	$asm06.System.Net.Sockets.RegKeyServices.Initialize();
	return $asm06.System.Net.Sockets.RegKeyServices.allowUdpMulticastClients;
};
$asm06.System.Net.Sockets.RegKeyServices.Initialize = function () {
	var flag = new JSIL.Variable(false);
	if (!($asm06.System.Net.Sockets.RegKeyServices.initialized || ($asm06.System.Net.Sockets.UnsafeRegKeyServicesNativeMethods.GetAllowUdpMulticastClients(/* ref */ flag) !== 0))) {
		$asm06.System.Net.Sockets.RegKeyServices.allowUdpMulticastClients = flag.value;
		$asm06.System.Net.Sockets.RegKeyServices.initialized = true;
	}
};
JSIL.MakeProperty($asm06.System.Net.Sockets.RegKeyServices, "AllowUdpMulticastClients", 
	$asm06.System.Net.Sockets.RegKeyServices.get_AllowUdpMulticastClients, null);
$asm06.System.Net.Sockets.RegKeyServices.allowUdpMulticastClients = false;
$asm06.System.Net.Sockets.RegKeyServices.initialized = false;

System.Net.NetworkCredential.prototype._ctor$0 = function () {
	this.m_encrypt = true;
	System.Object.prototype._ctor.call(this);
};
System.Net.NetworkCredential.prototype._ctor$1 = function (userName, password) {
	this._ctor$2(userName, password, System.String.Empty);
};
System.Net.NetworkCredential.prototype._ctor$2 = function (userName, password, domain) {
	this._ctor$3(userName, password, domain, true);
};
System.Net.NetworkCredential.prototype._ctor$3 = function (userName, password, domain, encrypt) {
	this.m_encrypt = true;
	System.Object.prototype._ctor.call(this);
	this.m_encrypt = encrypt;
	this.UserName = userName;
	this.Password = password;
	this.Domain = domain;
};
System.Net.NetworkCredential.prototype.InitializePart2 = function () {
	var obj = null;
	if (this.m_encrypt) {
		if (System.Net.NetworkCredential.s_symmetricAlgorithm === null) {
			System.Threading.Monitor.Enter((obj = System.Net.NetworkCredential.lockingObject));
			try {
				if (System.Net.NetworkCredential.s_symmetricAlgorithm === null) {
					System.Net.NetworkCredential.s_random = new System.Security.Cryptography.RNGCryptoServiceProvider();
					var symmetricAlgorithm = new System.Security.Cryptography.RijndaelManaged();
					var array = JSIL.Array.New(System.Byte, 16);
					System.Net.NetworkCredential.s_random.GetBytes(array);
					symmetricAlgorithm.Key = array;
					System.Net.NetworkCredential.s_symmetricAlgorithm = symmetricAlgorithm;
				}
			} finally {
				System.Threading.Monitor.Exit(obj);
			}
		}
		if (this.m_encryptionIV === null) {
			var array2 = JSIL.Array.New(System.Byte, 16);
			System.Net.NetworkCredential.s_random.GetBytes(array2);
			System.Threading.Interlocked.CompareExchange$b1(System.Array.Of(System.Byte))(/* ref */ new JSIL.MemberReference(this, "m_encryptionIV"), array2, null);
		}
	}
};
System.Net.NetworkCredential.prototype.get_UserName = function () {
	return this.InternalGetUserName();
};
System.Net.NetworkCredential.prototype.set_UserName = function (value) {
	this.m_userName = this.Encrypt(value);
};
System.Net.NetworkCredential.prototype.get_Password = function () {
	return this.InternalGetPassword();
};
System.Net.NetworkCredential.prototype.set_Password = function (value) {
	this.m_password = this.Encrypt(value);
};
System.Net.NetworkCredential.prototype.get_Domain = function () {
	return this.InternalGetDomain();
};
System.Net.NetworkCredential.prototype.set_Domain = function (value) {
	this.m_domain = this.Encrypt(value);
};
System.Net.NetworkCredential.prototype.InternalGetUserName = function () {
	return this.Decrypt(this.m_userName);
};
System.Net.NetworkCredential.prototype.InternalGetPassword = function () {
	return this.Decrypt(this.m_password);
};
System.Net.NetworkCredential.prototype.InternalGetDomain = function () {
	return this.Decrypt(this.m_domain);
};
System.Net.NetworkCredential.prototype.InternalGetDomainUserName = function () {
	var text = this.InternalGetDomain();
	if (text.length !== 0) {
		text = ((text + "\\"));
	}
	text = ((text + this.InternalGetUserName()));
	return text;
};
System.Net.NetworkCredential.prototype.GetCredential = function (uri, authType) {
	return this;
};
System.Net.NetworkCredential.prototype.IsEqualTo = function (compObject) {
	if (compObject === null) {
		return false;
	}
	if (this === JSIL.Cast(compObject, System.Net.NetworkCredential)) {
		return true;
	}
	var networkCredential = JSIL.TryCast(compObject, System.Net.NetworkCredential);
	return (networkCredential && 
		!(!(this.InternalGetUserName() == networkCredential.InternalGetUserName()) || 
			!(this.InternalGetPassword() == networkCredential.InternalGetPassword())) && (this.InternalGetDomain() == networkCredential.InternalGetDomain()));
};
System.Net.NetworkCredential.prototype.Decrypt = function (ciphertext) {
	if (ciphertext === null) {
		return System.String.Empty;
	}
	if (!this.m_encrypt) {
		return $asm06.System.Net.WebClientExtensions.GetString(System.Text.Encoding.UTF8, ciphertext);
	}
	this.InitializePart2();
	var memoryStream = JSIL.New(System.IO.MemoryStream, "_ctor$0", []);
	var cryptoStream = new System.Security.Cryptography.CryptoStream(memoryStream, System.Net.NetworkCredential.s_symmetricAlgorithm.CreateDecryptor$1(System.Net.NetworkCredential.s_symmetricAlgorithm.Key, this.m_encryptionIV), System.Security.Cryptography.CryptoStreamMode.Write);
	cryptoStream.Write(ciphertext, 0, ciphertext.length);
	cryptoStream.FlushFinalBlock();
	var bytes = memoryStream.ToArray();
	cryptoStream.Close();
	return $asm06.System.Net.WebClientExtensions.GetString(System.Text.Encoding.UTF8, bytes);
};
System.Net.NetworkCredential.prototype.Encrypt = function (text) {
	if (!((text !== null) && (text.length !== 0))) {
		return null;
	}
	if (!this.m_encrypt) {
		return System.Text.Encoding.UTF8.GetBytes$3(text);
	}
	this.InitializePart2();
	var memoryStream = JSIL.New(System.IO.MemoryStream, "_ctor$0", []);
	var cryptoStream = new System.Security.Cryptography.CryptoStream(memoryStream, System.Net.NetworkCredential.s_symmetricAlgorithm.CreateEncryptor$1(System.Net.NetworkCredential.s_symmetricAlgorithm.Key, this.m_encryptionIV), System.Security.Cryptography.CryptoStreamMode.Write);
	var array = System.Text.Encoding.UTF8.GetBytes$3(text);
	cryptoStream.Write(array, 0, array.length);
	cryptoStream.FlushFinalBlock();
	array = memoryStream.ToArray();
	cryptoStream.Close();
	return array;
};
JSIL.OverloadedMethod(System.Net.NetworkCredential.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.String, System.String]], 
		["_ctor$2", [System.String, System.String, System.String]], 
		["_ctor$3", [System.String, System.String, System.String, System.Boolean]]
	]);
JSIL.MakeProperty(System.Net.NetworkCredential.prototype, "UserName", 
	System.Net.NetworkCredential.prototype.get_UserName, System.Net.NetworkCredential.prototype.set_UserName);
JSIL.MakeProperty(System.Net.NetworkCredential.prototype, "Password", 
	System.Net.NetworkCredential.prototype.get_Password, System.Net.NetworkCredential.prototype.set_Password);
JSIL.MakeProperty(System.Net.NetworkCredential.prototype, "Domain", 
	System.Net.NetworkCredential.prototype.get_Domain, System.Net.NetworkCredential.prototype.set_Domain);
System.Net.NetworkCredential.lockingObject = null;
System.Net.NetworkCredential.s_symmetricAlgorithm = null;
System.Net.NetworkCredential.s_random = null;
System.Net.NetworkCredential.prototype.m_userName = null;
System.Net.NetworkCredential.prototype.m_password = null;
System.Net.NetworkCredential.prototype.m_domain = null;
System.Net.NetworkCredential.prototype.m_encryptionIV = null;
System.Net.NetworkCredential.prototype.m_encrypt = false;
System.Net.NetworkCredential._cctor = function () {
	System.Net.NetworkCredential.lockingObject = new System.Object();
};

$asm06.System.Net.Sockets.CallbackWrapper.prototype._ctor$0 = function (callback) {
	System.Object.prototype._ctor.call(this);
	this.transparentCallback = callback;
};
$asm06.System.Net.Sockets.CallbackWrapper.prototype._ctor$1 = function (callback) {
	System.Object.prototype._ctor.call(this);
	this.criticalCallback = callback;
};
$asm06.System.Net.Sockets.CallbackWrapper.prototype.Invoke = function (result) {
	if (this.criticalCallback !== null) {
		this.criticalCallback(result);
		return;
	}
	if (this.transparentCallback !== null) {
		this.transparentCallback(result);
	}
};
JSIL.OverloadedMethod($asm06.System.Net.Sockets.CallbackWrapper.prototype, "_ctor", [
		["_ctor$0", [System.AsyncCallback]], 
		["_ctor$1", [$asm06.System.Net.Sockets.SecurityCriticalAsyncCallback]]
	]);
$asm06.System.Net.Sockets.CallbackWrapper.prototype.transparentCallback = null;
$asm06.System.Net.Sockets.CallbackWrapper.prototype.criticalCallback = null;

$asm06.System.Net.Sockets.SecurityCriticalTimer.prototype._ctor = function (callback, state, dueTime, period) {
	System.Object.prototype._ctor.call(this);
	this.callback = callback;
	this.timer = JSIL.New(System.Threading.Timer, "_ctor$0", [JSIL.Delegate.New("System.Threading.TimerCallback", this, $asm06.System.Net.Sockets.SecurityCriticalTimer.prototype.TimerCallback), state, dueTime, period]);
};
$asm06.System.Net.Sockets.SecurityCriticalTimer.prototype.Dispose = function () {
	this.timer.Dispose$1();
};
$asm06.System.Net.Sockets.SecurityCriticalTimer.prototype.TimerCallback = function (state) {
	if (this.callback !== null) {
		this.callback(state);
	}
};
$asm06.System.Net.Sockets.SecurityCriticalTimer.prototype.timer = null;
$asm06.System.Net.Sockets.SecurityCriticalTimer.prototype.callback = null;

$asm06.System.Net.Sockets.SecurityCriticalThreadPool.QueueUserWorkItem = function (callback, state) {
	var state2 = new $asm06.System.Net.Sockets.SecurityCriticalThreadPool.UserWorkItemCallbackWrapper(callback, state);
	return System.Threading.ThreadPool.QueueUserWorkItem$0(JSIL.Delegate.New("System.Threading.WaitCallback", null, $asm06.System.Net.Sockets.SecurityCriticalThreadPool.QueueUserWorkItemCallback), state2);
};
$asm06.System.Net.Sockets.SecurityCriticalThreadPool.RegisterWaitForSingleObject = function (waitObject, callback, state, millisecondsTimeOutInterval, executeOnlyOnce) {
	var state2 = new $asm06.System.Net.Sockets.SecurityCriticalThreadPool.WaitForSingleObjectCallbackWrapper(callback, state);
	return System.Threading.ThreadPool.RegisterWaitForSingleObject$2(
		waitObject, 
		JSIL.Delegate.New("System.Threading.WaitOrTimerCallback", null, $asm06.System.Net.Sockets.SecurityCriticalThreadPool.RegisterWaitForSingleObjectCallback), 
		state2, 
		millisecondsTimeOutInterval, 
		executeOnlyOnce
	);
};
$asm06.System.Net.Sockets.SecurityCriticalThreadPool.QueueUserWorkItemCallback = function (state) {
	JSIL.Cast(state, $asm06.System.Net.Sockets.SecurityCriticalThreadPool.UserWorkItemCallbackWrapper).Invoke();
};
$asm06.System.Net.Sockets.SecurityCriticalThreadPool.RegisterWaitForSingleObjectCallback = function (state, timedOut) {
	JSIL.Cast(state, $asm06.System.Net.Sockets.SecurityCriticalThreadPool.WaitForSingleObjectCallbackWrapper).Invoke(timedOut);
};

$asm06.System.Net.Sockets.SecurityCriticalThreadPool.UserWorkItemCallbackWrapper.prototype._ctor = function (callback, state) {
	System.Object.prototype._ctor.call(this);
	this.callback = callback;
	this.state = state;
};
$asm06.System.Net.Sockets.SecurityCriticalThreadPool.UserWorkItemCallbackWrapper.prototype.Invoke = function () {
	if (this.callback !== null) {
		this.callback(this.state);
	}
};
$asm06.System.Net.Sockets.SecurityCriticalThreadPool.UserWorkItemCallbackWrapper.prototype.callback = null;
$asm06.System.Net.Sockets.SecurityCriticalThreadPool.UserWorkItemCallbackWrapper.prototype.state = null;

$asm06.System.Net.Sockets.SecurityCriticalThreadPool.WaitForSingleObjectCallbackWrapper.prototype._ctor = function (callback, state) {
	System.Object.prototype._ctor.call(this);
	this.callback = callback;
	this.state = state;
};
$asm06.System.Net.Sockets.SecurityCriticalThreadPool.WaitForSingleObjectCallbackWrapper.prototype.Invoke = function (timedOut) {
	if (this.callback !== null) {
		this.callback(this.state, timedOut);
	}
};
$asm06.System.Net.Sockets.SecurityCriticalThreadPool.WaitForSingleObjectCallbackWrapper.prototype.callback = null;
$asm06.System.Net.Sockets.SecurityCriticalThreadPool.WaitForSingleObjectCallbackWrapper.prototype.state = null;

$asm06.System.Net.Sockets.OverlappedAsyncResult.prototype._ctor = function (callback, state) {
	$asm06.System.Net.Sockets.AsyncResult$b1.Of(System.Int32).prototype._ctor.call(this, callback, state);
};
$asm06.System.Net.Sockets.OverlappedAsyncResult.prototype.get_OverlappedPointer = function () {
	return this.overlappedPointer;
};
$asm06.System.Net.Sockets.OverlappedAsyncResult.prototype.get_AddressPointer = function () {
	return this.addressPointer;
};
$asm06.System.Net.Sockets.OverlappedAsyncResult.prototype.get_SocketAddress = function () {
	return this.socketAddress;
};
$asm06.System.Net.Sockets.OverlappedAsyncResult.prototype.SetUnmanagedStructures = function (buffer, socketAddress) {
	this.overlapped = new System.Threading.Overlapped();
	this.buffer = buffer;
	this.socketAddress = socketAddress;
	this.refcount = 2;
	if (buffer !== null) {
		if (socketAddress !== null) {
			var userData = [buffer, socketAddress.m_Buffer];
		} else {
			userData = buffer;
		}
	} else {
		userData = socketAddress.m_Buffer;
	}
	this.overlappedPointer = JSIL.Cast(JSIL.IgnoredMember("op_Explicit(value)"), System.IntPtr);
	if (socketAddress !== null) {
		this.addressPointer = JSIL.Cast(JSIL.IgnoredMember("op_Explicit(value)"), System.IntPtr);
	}
	if (System.Net.Sockets.Socket.UseOverlappedIO) {
		this.overlappedEvent = new System.Threading.ManualResetEvent(false);
		if (!$asm06.System.Net.UnsafeNclNativeMethods.IsWindows) {
			$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.RegisterNCLPALEventHandle(this.overlappedEvent.SafeWaitHandle, System.Net.Sockets.Socket.s_AppDomainId);
		}
		$asm06.System.Net.Sockets.SecurityCriticalThreadPool.RegisterWaitForSingleObject(
			this.overlappedEvent, 
			JSIL.Delegate.New("System.Net.Sockets.SecurityCriticalWaitOrTimerCallback", null, $asm06.System.Net.Sockets.OverlappedAsyncResult.OverlappedCallback), 
			this, 
			-1, 
			true
		);
		System.Runtime.InteropServices.Marshal.WriteIntPtr($asm06.System.Net.IntPtrHelper.Add(this.overlappedPointer, $asm06.System.Net.Win32.OverlappedhEventOffset), this.overlappedEvent.SafeWaitHandle.DangerousGetHandle());
	}
	this.overlapped.AsyncResult = this;
};
$asm06.System.Net.Sockets.OverlappedAsyncResult.prototype.Cleanup = function () {
	JSIL.IgnoredMember("Free(nativeOverlappedPtr)");
	if (this.overlappedEvent !== null) {
		if (!$asm06.System.Net.UnsafeNclNativeMethods.IsWindows) {
			$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.UnregisterNCLPALEventHandle(this.overlappedEvent.SafeWaitHandle);
		}
		this.overlappedEvent.Close();
	}
};
$asm06.System.Net.Sockets.OverlappedAsyncResult.prototype.ReleaseReference = function () {
	if (System.Threading.Interlocked.Decrement$0(/* ref */ new JSIL.MemberReference(this, "refcount")) === 0) {
		this.Cleanup();
	}
};
$asm06.System.Net.Sockets.OverlappedAsyncResult.OverlappedCallback = function (state, timedOut) {
	var overlappedAsyncResult = JSIL.Cast(state, $asm06.System.Net.Sockets.OverlappedAsyncResult);
	overlappedAsyncResult.overlapped.AsyncResult = null;
	var socketError = System.Runtime.InteropServices.Marshal.ReadInt32$1($asm06.System.Net.IntPtrHelper.Add(overlappedAsyncResult.OverlappedPointer, 0));
	var numBytes = System.Runtime.InteropServices.Marshal.ReadInt32$1($asm06.System.Net.IntPtrHelper.Add(overlappedAsyncResult.OverlappedPointer, $asm06.System.Net.Win32.OverlappedInternalHighOffset));
	overlappedAsyncResult.FinishOperation(socketError, numBytes);
};
$asm06.System.Net.Sockets.OverlappedAsyncResult.prototype.FinishOperation = function (socketError, numBytes) {
	this.OnCompletion(socketError, numBytes);
	this.ReleaseReference();
	if (!JSIL.Cast(socketError, System.Boolean)) {
		$asm06.System.Net.Sockets.AsyncResult$b1.Of(System.Int32).prototype.Complete.call(this, numBytes, false);
		return;
	}
	$asm06.System.Net.Sockets.AsyncResult.prototype.Complete.call(this, JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [socketError]), false);
};
$asm06.System.Net.Sockets.OverlappedAsyncResult.prototype.OnCompletion = function (error, bytesTransferred) {
};
JSIL.MakeProperty($asm06.System.Net.Sockets.OverlappedAsyncResult.prototype, "OverlappedPointer", 
	$asm06.System.Net.Sockets.OverlappedAsyncResult.prototype.get_OverlappedPointer, null);
JSIL.MakeProperty($asm06.System.Net.Sockets.OverlappedAsyncResult.prototype, "AddressPointer", 
	$asm06.System.Net.Sockets.OverlappedAsyncResult.prototype.get_AddressPointer, null);
JSIL.MakeProperty($asm06.System.Net.Sockets.OverlappedAsyncResult.prototype, "SocketAddress", 
	$asm06.System.Net.Sockets.OverlappedAsyncResult.prototype.get_SocketAddress, null);
$asm06.System.Net.Sockets.OverlappedAsyncResult.completionPortCallbackDelegate = null;
$asm06.System.Net.Sockets.OverlappedAsyncResult.prototype.overlapped = null;
$asm06.System.Net.Sockets.OverlappedAsyncResult.prototype.overlappedEvent = null;
$asm06.System.Net.Sockets.OverlappedAsyncResult.prototype.buffer = null;
$asm06.System.Net.Sockets.OverlappedAsyncResult.prototype.socketAddress = null;
$asm06.System.Net.Sockets.OverlappedAsyncResult.prototype.overlappedPointer = 0;
$asm06.System.Net.Sockets.OverlappedAsyncResult.prototype.addressPointer = 0;
$asm06.System.Net.Sockets.OverlappedAsyncResult.prototype.refcount = 0;
$asm06.System.Net.Sockets.OverlappedAsyncResult._cctor = function () {
	$asm06.System.Net.Sockets.OverlappedAsyncResult.completionPortCallbackDelegate = JSIL.Delegate.New("System.Threading.IOCompletionCallback", null, $asm06.System.Net.Sockets.OverlappedAsyncResult.CompletionPortCallback);
};

$asm06.System.Net.Sockets.ReceiveMessageAsyncResult.prototype._ctor = function (callback, state) {
	$asm06.System.Net.Sockets.OverlappedAsyncResult.prototype._ctor.call(this, callback, state);
};
$asm06.System.Net.Sockets.ReceiveMessageAsyncResult.prototype.get_MessagePointer = function () {
	return this.messagePointer;
};
$asm06.System.Net.Sockets.ReceiveMessageAsyncResult.prototype.get_IPPacketInformation = function () {
	return this.ipPacketInformation;
};
$asm06.System.Net.Sockets.ReceiveMessageAsyncResult.prototype.SetUnmanagedStructures = JSIL.UntranslatableFunction("System.Void System.Net.Sockets.ReceiveMessageAsyncResult::SetUnmanagedStructures(System.Byte[],System.Int32,System.Int32,System.Net.SocketAddress)");
$asm06.System.Net.Sockets.ReceiveMessageAsyncResult.prototype.Cleanup = function () {
	this.wsaMessageBufferGCHandle.Free();
	this.wsaBufferArrayGCHandle.Free();
	this.controlBufferGCHandle.Free();
	$asm06.System.Net.Sockets.OverlappedAsyncResult.prototype.Cleanup.call(this);
};
$asm06.System.Net.Sockets.ReceiveMessageAsyncResult.prototype.OnCompletion = function (error, bytesTransferred) {
	var iPAddress = null;
	if (this.controlBuffer.length === $asm06.System.Net.Sockets.ReceiveMessageAsyncResult.controlDataSize) {
		var controlData = JSIL.Cast(System.Runtime.InteropServices.Marshal.PtrToStructure$1(this.controlBufferPointer, $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.ControlData), $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.ControlData).MemberwiseClone();
		if (System.UIntPtr.op_Inequality(controlData.length, System.UIntPtr.Zero)) {
			iPAddress = JSIL.New(System.Net.IPAddress, "_ctor$0", [controlData.address]);
		}
		this.ipPacketInformation = new $asm06.System.Net.Sockets.IPPacketInformation(JSIL.Coalesce(iPAddress, System.Net.IPAddress.None), controlData.index);
		return;
	}
	if (this.controlBuffer.length === $asm06.System.Net.Sockets.ReceiveMessageAsyncResult.controlDataIPv6Size) {
		var controlDataIPv = JSIL.Cast(System.Runtime.InteropServices.Marshal.PtrToStructure$1(this.controlBufferPointer, $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.ControlDataIPv6), $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.ControlDataIPv6).MemberwiseClone();
		if (System.UIntPtr.op_Inequality(controlDataIPv.length, System.UIntPtr.Zero)) {
			iPAddress = JSIL.New(System.Net.IPAddress, "_ctor$3", [controlDataIPv.address]);
		}
		this.ipPacketInformation = new $asm06.System.Net.Sockets.IPPacketInformation(JSIL.Coalesce(iPAddress, System.Net.IPAddress.IPv6None), controlDataIPv.index);
		return;
	}
	this.ipPacketInformation = new $asm06.System.Net.Sockets.IPPacketInformation();
};
JSIL.MakeProperty($asm06.System.Net.Sockets.ReceiveMessageAsyncResult.prototype, "MessagePointer", 
	$asm06.System.Net.Sockets.ReceiveMessageAsyncResult.prototype.get_MessagePointer, null);
JSIL.MakeProperty($asm06.System.Net.Sockets.ReceiveMessageAsyncResult.prototype, "IPPacketInformation", 
	$asm06.System.Net.Sockets.ReceiveMessageAsyncResult.prototype.get_IPPacketInformation, null);
$asm06.System.Net.Sockets.ReceiveMessageAsyncResult.controlDataSize = 0;
$asm06.System.Net.Sockets.ReceiveMessageAsyncResult.controlDataIPv6Size = 0;
$asm06.System.Net.Sockets.ReceiveMessageAsyncResult.wsaBufferSize = 0;
$asm06.System.Net.Sockets.ReceiveMessageAsyncResult.wsaMsgSize = 0;
$asm06.System.Net.Sockets.ReceiveMessageAsyncResult.prototype.wsaMessageBuffer = null;
$asm06.System.Net.Sockets.ReceiveMessageAsyncResult.prototype.wsaBufferArray = null;
$asm06.System.Net.Sockets.ReceiveMessageAsyncResult.prototype.controlBuffer = null;
$asm06.System.Net.Sockets.ReceiveMessageAsyncResult.prototype.messagePointer = 0;
$asm06.System.Net.Sockets.ReceiveMessageAsyncResult.prototype.controlBufferPointer = 0;
$asm06.System.Net.Sockets.ReceiveMessageAsyncResult._cctor = function () {
	$asm06.System.Net.Sockets.ReceiveMessageAsyncResult.controlDataSize = System.Runtime.InteropServices.Marshal.SizeOf$1($asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.ControlData);
	$asm06.System.Net.Sockets.ReceiveMessageAsyncResult.controlDataIPv6Size = System.Runtime.InteropServices.Marshal.SizeOf$1($asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.ControlDataIPv6);
	$asm06.System.Net.Sockets.ReceiveMessageAsyncResult.wsaBufferSize = System.Runtime.InteropServices.Marshal.SizeOf$1($asm06.System.Net.WSABuffer);
	$asm06.System.Net.Sockets.ReceiveMessageAsyncResult.wsaMsgSize = System.Runtime.InteropServices.Marshal.SizeOf$1($asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSAMsg);
};

$asm06.System.Net.Sockets.FilterReceiveMessageAsyncResult.prototype._ctor = function (buffer, offset, count, callback, state) {
	$asm06.System.Net.Sockets.AsyncResult$b1.Of(System.Int32).prototype._ctor.call(this, callback, state);
	this.buffer = buffer;
	this.offset = offset;
	this.count = count;
};
$asm06.System.Net.Sockets.FilterReceiveMessageAsyncResult.prototype.get_Buffer = function () {
	return this.buffer;
};
$asm06.System.Net.Sockets.FilterReceiveMessageAsyncResult.prototype.get_Offset = function () {
	return this.offset;
};
$asm06.System.Net.Sockets.FilterReceiveMessageAsyncResult.prototype.get_Count = function () {
	return this.count;
};
$asm06.System.Net.Sockets.FilterReceiveMessageAsyncResult.prototype.get_Source = function () {
	return this.source;
};
$asm06.System.Net.Sockets.FilterReceiveMessageAsyncResult.prototype.set_Source = function (value) {
	this.source = value;
};
$asm06.System.Net.Sockets.FilterReceiveMessageAsyncResult.prototype.get_PacketInfo = function () {
	return this.packetInfo;
};
$asm06.System.Net.Sockets.FilterReceiveMessageAsyncResult.prototype.set_PacketInfo = function (value) {
	this.packetInfo = value;
};
JSIL.MakeProperty($asm06.System.Net.Sockets.FilterReceiveMessageAsyncResult.prototype, "Buffer", 
	$asm06.System.Net.Sockets.FilterReceiveMessageAsyncResult.prototype.get_Buffer, null);
JSIL.MakeProperty($asm06.System.Net.Sockets.FilterReceiveMessageAsyncResult.prototype, "Offset", 
	$asm06.System.Net.Sockets.FilterReceiveMessageAsyncResult.prototype.get_Offset, null);
JSIL.MakeProperty($asm06.System.Net.Sockets.FilterReceiveMessageAsyncResult.prototype, "Count", 
	$asm06.System.Net.Sockets.FilterReceiveMessageAsyncResult.prototype.get_Count, null);
JSIL.MakeProperty($asm06.System.Net.Sockets.FilterReceiveMessageAsyncResult.prototype, "Source", 
	$asm06.System.Net.Sockets.FilterReceiveMessageAsyncResult.prototype.get_Source, $asm06.System.Net.Sockets.FilterReceiveMessageAsyncResult.prototype.set_Source);
JSIL.MakeProperty($asm06.System.Net.Sockets.FilterReceiveMessageAsyncResult.prototype, "PacketInfo", 
	$asm06.System.Net.Sockets.FilterReceiveMessageAsyncResult.prototype.get_PacketInfo, $asm06.System.Net.Sockets.FilterReceiveMessageAsyncResult.prototype.set_PacketInfo);
$asm06.System.Net.Sockets.FilterReceiveMessageAsyncResult.prototype.buffer = null;
$asm06.System.Net.Sockets.FilterReceiveMessageAsyncResult.prototype.offset = 0;
$asm06.System.Net.Sockets.FilterReceiveMessageAsyncResult.prototype.count = 0;
$asm06.System.Net.Sockets.FilterReceiveMessageAsyncResult.prototype.source = null;

$asm06.System.Net.Sockets.UnsafeSocket.Create = function (addressFamily, socketType, protocolType) {
	return new $asm06.System.Net.Sockets.UnsafeSocket(addressFamily, socketType, protocolType);
};
$asm06.System.Net.Sockets.UnsafeSocket.prototype.get_AddressFamily = function () {
	return this.addressFamily;
};
$asm06.System.Net.Sockets.UnsafeSocket.prototype.get_SocketType = function () {
	return this.socketType;
};
$asm06.System.Net.Sockets.UnsafeSocket.prototype.get_ProtocolType = function () {
	return this.protocolType;
};
$asm06.System.Net.Sockets.UnsafeSocket.prototype.get_ReceiveBufferSize = function () {
	return this.GetSocketOption($asm06.System.Net.Sockets.SocketOptionLevel.Socket, $asm06.System.Net.Sockets.SocketOptionName.ReceiveBuffer);
};
$asm06.System.Net.Sockets.UnsafeSocket.prototype.set_ReceiveBufferSize = function (value) {
	this.SetSocketOption($asm06.System.Net.Sockets.SocketOptionLevel.Socket, $asm06.System.Net.Sockets.SocketOptionName.ReceiveBuffer, value);
};
$asm06.System.Net.Sockets.UnsafeSocket.prototype.get_SendBufferSize = function () {
	return this.GetSocketOption($asm06.System.Net.Sockets.SocketOptionLevel.Socket, $asm06.System.Net.Sockets.SocketOptionName.SendBuffer);
};
$asm06.System.Net.Sockets.UnsafeSocket.prototype.set_SendBufferSize = function (value) {
	this.SetSocketOption($asm06.System.Net.Sockets.SocketOptionLevel.Socket, $asm06.System.Net.Sockets.SocketOptionName.SendBuffer, value);
};
$asm06.System.Net.Sockets.UnsafeSocket.prototype.get_ReuseAddress = function () {
	return (this.GetSocketOption($asm06.System.Net.Sockets.SocketOptionLevel.Socket, $asm06.System.Net.Sockets.SocketOptionName.IpTimeToLive) !== 0);
};
$asm06.System.Net.Sockets.UnsafeSocket.prototype.set_ReuseAddress = function (value) {
	this.SetSocketOption($asm06.System.Net.Sockets.SocketOptionLevel.Socket, $asm06.System.Net.Sockets.SocketOptionName.IpTimeToLive, value ? 1 : 0);
};
$asm06.System.Net.Sockets.UnsafeSocket.prototype.get_MulticastLoopback = function () {
	return (this.GetSocketOption(this.ipSocketOptionLevel, $asm06.System.Net.Sockets.SocketOptionName.MulticastLoopback) !== 0);
};
$asm06.System.Net.Sockets.UnsafeSocket.prototype.set_MulticastLoopback = function (value) {
	this.SetSocketOption(this.ipSocketOptionLevel, $asm06.System.Net.Sockets.SocketOptionName.MulticastLoopback, value ? 1 : 0);
};
$asm06.System.Net.Sockets.UnsafeSocket.prototype.get_PacketInformation = function () {
	return (this.GetSocketOption(this.ipSocketOptionLevel, $asm06.System.Net.Sockets.SocketOptionName.PacketInformation) !== 0);
};
$asm06.System.Net.Sockets.UnsafeSocket.prototype.set_PacketInformation = function (value) {
	this.SetSocketOption(this.ipSocketOptionLevel, $asm06.System.Net.Sockets.SocketOptionName.PacketInformation, value ? 1 : 0);
};
$asm06.System.Net.Sockets.UnsafeSocket.prototype.get_Ttl = function () {
	return this.GetSocketOption(this.ipSocketOptionLevel, $asm06.System.Net.Sockets.SocketOptionName.IpTimeToLive);
};
$asm06.System.Net.Sockets.UnsafeSocket.prototype.set_Ttl = function (value) {
	this.SetSocketOption(this.ipSocketOptionLevel, $asm06.System.Net.Sockets.SocketOptionName.IpTimeToLive, value);
};
$asm06.System.Net.Sockets.UnsafeSocket.prototype.get_FilterUnicastPackets = function () {
	return (this.unicastFilterKind !== $asm06.System.Net.Sockets.UnicastFilterKind.AllowAll);
};
$asm06.System.Net.Sockets.UnsafeSocket.prototype.FilterAllUnicastPackets = function () {
	this.unicastFilterKind = $asm06.System.Net.Sockets.UnicastFilterKind.BlockAll;
	this.PacketInformation = true;
};
$asm06.System.Net.Sockets.UnsafeSocket.prototype.UnfilterUnicastPacketsFrom = function (source) {
	this.unicastAllowedSource = source;
	this.unicastFilterKind = $asm06.System.Net.Sockets.UnicastFilterKind.AllowSingleSource;
};
$asm06.System.Net.Sockets.UnsafeSocket.prototype.Bind = function (localEndpoint) {
	var lastError = new JSIL.Variable(0);
	this.CheckDisposed();
	var socketAddress = localEndpoint.Serialize();
	var returnValue = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.bind(this.handle, socketAddress.m_Buffer, socketAddress.Size, /* ref */ lastError);
	this.CheckSocketError(returnValue, lastError.value);
	this.localEndPoint = localEndpoint;
};
$asm06.System.Net.Sockets.UnsafeSocket.prototype.GetSocketOption = function (optionLevel, optionName) {
	var result = new JSIL.Variable(0), lastError = new JSIL.Variable(0);
	this.CheckDisposed();
	var num = new JSIL.Variable(4);
	var returnValue = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.getsockopt(
		this.handle, 
		optionLevel, 
		optionName, 
		/* ref */ result, 
		/* ref */ num, 
		/* ref */ lastError
	);
	this.CheckSocketError(returnValue, lastError.value);
	return result.value;
};
$asm06.System.Net.Sockets.UnsafeSocket.prototype.SetSocketOption = function (optionLevel, optionName, $optionValue) {
	var optionValue = new JSIL.Variable($optionValue);
	var lastError = new JSIL.Variable(0);
	this.CheckDisposed();
	var returnValue = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.setsockopt$0(
		this.handle, 
		optionLevel, 
		optionName, 
		/* ref */ optionValue, 
		4, 
		/* ref */ lastError
	);
	this.CheckSocketError(returnValue, lastError.value);
};
$asm06.System.Net.Sockets.UnsafeSocket.prototype.AddMembership = function (groupAddress) {
	var lastError = new JSIL.Variable(0);
	this.CheckDisposed();
	if (this.addressFamily === System.Net.Sockets.AddressFamily.InterNetwork) {
		var iPMulticastRequest = new JSIL.Variable(new $asm06.System.Net.IPMulticastRequest());
		iPMulticastRequest.value.MulticastAddress = groupAddress.m_Address;
		iPMulticastRequest.value.InterfaceAddress = 0;
		var returnValue = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.setsockopt$2(
			this.handle, 
			$asm06.System.Net.Sockets.SocketOptionLevel.IP, 
			$asm06.System.Net.Sockets.SocketOptionName.AddMembership, 
			/* ref */ iPMulticastRequest, 
			$asm06.System.Net.IPMulticastRequest.Size, 
			/* ref */ lastError
		);
	} else {
		var pv6MulticastRequest = new JSIL.Variable(new $asm06.System.Net.IPv6MulticastRequest());
		pv6MulticastRequest.value.MulticastAddress = groupAddress.GetAddressBytes();
		pv6MulticastRequest.value.InterfaceIndex = 0;
		returnValue = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.setsockopt$3(
			this.handle, 
			$asm06.System.Net.Sockets.SocketOptionLevel.IPv6, 
			$asm06.System.Net.Sockets.SocketOptionName.AddMembership, 
			/* ref */ pv6MulticastRequest, 
			$asm06.System.Net.IPv6MulticastRequest.Size, 
			/* ref */ lastError
		);
	}
	this.CheckSocketError(returnValue, lastError.value);
};
$asm06.System.Net.Sockets.UnsafeSocket.prototype.AddSourceMembership = function (sourceAddress, groupAddress) {
	this.CheckDisposed();
	if (this.addressFamily === System.Net.Sockets.AddressFamily.InterNetwork) {
		if ($asm06.System.Net.Sockets.UnsafeSocket.OSSupportsIGMPv3) {
			this.SetMulticastSourceOption($asm06.System.Net.Sockets.SocketOptionName.AddSourceMembership, sourceAddress, groupAddress);
			return;
		}
		this.EmulateAddSourceMembership(sourceAddress, groupAddress);
		return;
	} else {
		if ($asm06.System.Net.Sockets.UnsafeSocket.OSSupportsMLDv2) {
			this.SetIPv6MulticastSourceOption(45, sourceAddress, groupAddress);
			return;
		}
		this.EmulateAddSourceMembership(sourceAddress, groupAddress);
		return;
	}
};
$asm06.System.Net.Sockets.UnsafeSocket.prototype.BlockSource = function (sourceAddress, groupAddress) {
	this.CheckDisposed();
	if (this.addressFamily === System.Net.Sockets.AddressFamily.InterNetwork) {
		if ($asm06.System.Net.Sockets.UnsafeSocket.OSSupportsIGMPv3) {
			this.SetMulticastSourceOption($asm06.System.Net.Sockets.SocketOptionName.BlockSource, sourceAddress, groupAddress);
			return;
		}
		this.EmulateBlockSource(sourceAddress);
		return;
	} else {
		if ($asm06.System.Net.Sockets.UnsafeSocket.OSSupportsMLDv2) {
			this.SetIPv6MulticastSourceOption(43, sourceAddress, groupAddress);
			return;
		}
		this.EmulateBlockSource(sourceAddress);
		return;
	}
};
$asm06.System.Net.Sockets.UnsafeSocket.prototype.UnblockSource = function (sourceAddress, groupAddress) {
	this.CheckDisposed();
	if (this.addressFamily === System.Net.Sockets.AddressFamily.InterNetwork) {
		if ($asm06.System.Net.Sockets.UnsafeSocket.OSSupportsIGMPv3) {
			this.SetMulticastSourceOption($asm06.System.Net.Sockets.SocketOptionName.UnblockSource, sourceAddress, groupAddress);
			return;
		}
		this.EmulateUnblockSource(sourceAddress);
		return;
	} else {
		if ($asm06.System.Net.Sockets.UnsafeSocket.OSSupportsMLDv2) {
			this.SetIPv6MulticastSourceOption(44, sourceAddress, groupAddress);
			return;
		}
		this.EmulateUnblockSource(sourceAddress);
		return;
	}
};
$asm06.System.Net.Sockets.UnsafeSocket.prototype.Shutdown = function (how) {
	var lastError = new JSIL.Variable(0);
	this.CheckDisposed();
	var returnValue = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.shutdown(this.handle, Math.floor(how), /* ref */ lastError);
	this.CheckSocketError(returnValue, lastError.value);
};
$asm06.System.Net.Sockets.UnsafeSocket.prototype.Close = function (timeout) {
	var obj = null;
	if (this.cleanedUp) {
		return;
	}
	System.Threading.Monitor.Enter((obj = this.lockObject));
	try {
		if (this.cleanedUp) {
			return;
		}
		this.cleanedUp = true;
	} finally {
		System.Threading.Monitor.Exit(obj);
	}
	this.handle.Dispose$0();
};
$asm06.System.Net.Sockets.UnsafeSocket.prototype.BeginReceiveMessageFrom = function (buffer, offset, count, callback, state) {
	if (!(this.FilterUnicastPackets || (!((this.addressFamily === System.Net.Sockets.AddressFamily.InterNetwork) && 
					$asm06.System.Net.Sockets.UnsafeSocket.OSSupportsIGMPv3) && 
				((this.addressFamily !== System.Net.Sockets.AddressFamily.InterNetworkV6) || 
					!$asm06.System.Net.Sockets.UnsafeSocket.OSSupportsMLDv2)))) {
		return this.BeginFilterlessReceiveMessageFrom(
			buffer, 
			offset, 
			count, 
			callback, 
			state
		);
	}
	var filterReceiveMessageAsyncResult = new $asm06.System.Net.Sockets.FilterReceiveMessageAsyncResult(buffer, offset, count, callback, state);
	this.BeginFilterlessReceiveMessageFrom(
		buffer, 
		offset, 
		count, 
		JSIL.New($asm06.System.Net.Sockets.CallbackWrapper, "_ctor$1", [JSIL.Delegate.New("System.Net.Sockets.SecurityCriticalAsyncCallback", this, $asm06.System.Net.Sockets.UnsafeSocket.prototype.FilterReceiveMessageCallback)]), 
		filterReceiveMessageAsyncResult
	);
	return filterReceiveMessageAsyncResult;
};
$asm06.System.Net.Sockets.UnsafeSocket.prototype.EndReceiveMessageFrom = function (result, /* ref */ source, /* ref */ packetInformation) {
	if (JSIL.TryCast(result, $asm06.System.Net.Sockets.ReceiveMessageAsyncResult) !== null) {
		return this.EndFilterlessReceiveMessageFrom(result, /* ref */ source, /* ref */ packetInformation);
	}
	var filterReceiveMessageAsyncResult = $asm06.System.Net.Sockets.AsyncResult.End$b1($asm06.System.Net.Sockets.FilterReceiveMessageAsyncResult)(result);
	source.value = filterReceiveMessageAsyncResult.Source;
	packetInformation.value = filterReceiveMessageAsyncResult.PacketInfo.MemberwiseClone();
	return filterReceiveMessageAsyncResult.Result;
};
$asm06.System.Net.Sockets.UnsafeSocket.prototype.BeginSendTo = function (buffer, offset, count, destination, callback, state) {
	var num = new JSIL.Variable(0), socketError = new JSIL.Variable(0);
	this.CheckDisposed();
	this.BindToDefaultPort();
	this.BindToThreadPool();
	var socketAddress = destination.Serialize();
	var overlappedAsyncResult = new $asm06.System.Net.Sockets.OverlappedAsyncResult(callback, state);
	overlappedAsyncResult.SetUnmanagedStructures(buffer, socketAddress);
	var wSABuffer = new JSIL.Variable(new $asm06.System.Net.WSABuffer());
	wSABuffer.value.Length = count;
	wSABuffer.value.Pointer = JSIL.Cast(JSIL.IgnoredMember("op_Explicit(value)"), System.IntPtr);
	try {
		$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSASendTo(
			this.handle, 
			/* ref */ wSABuffer, 
			1, 
			/* ref */ num, 
			$asm06.System.Net.Sockets.SocketFlags.None, 
			overlappedAsyncResult.AddressPointer, 
			socketAddress.Size, 
			overlappedAsyncResult.OverlappedPointer, 
			System.IntPtr.Zero, 
			/* ref */ socketError
		);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.ObjectDisposedException)) {
			overlappedAsyncResult.Cleanup();
			throw $exception;
		} else {
			throw $exception;
		}
	}
	overlappedAsyncResult.ReleaseReference();
	if (!(!JSIL.Cast(socketError.value, System.Boolean) || (socketError.value === System.Net.Sockets.SocketError.IOPending))) {
		overlappedAsyncResult.ReleaseReference();
		throw JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [socketError.value]);
	}
	return overlappedAsyncResult;
};
$asm06.System.Net.Sockets.UnsafeSocket.prototype.EndSendTo = function (result) {
	$asm06.System.Net.Sockets.AsyncResult.End$b1($asm06.System.Net.Sockets.OverlappedAsyncResult)(result);
};
$asm06.System.Net.Sockets.UnsafeSocket.prototype._ctor = function (addressFamily, socketType, protocolType) {
	var socketError = new JSIL.Variable(0);
	System.Object.prototype._ctor.call(this);
	System.Net.Sockets.Socket.InitializeSockets();
	this.handle = $asm06.System.Net.SafeCloseSocket.CreateWSASocket(addressFamily, socketType, protocolType, /* ref */ socketError);
	if (this.handle.IsInvalid) {
		throw JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [socketError.value]);
	}
	this.addressFamily = addressFamily;
	this.socketType = socketType;
	this.protocolType = protocolType;
	if (addressFamily === System.Net.Sockets.AddressFamily.InterNetworkV6) {
		this.ipSocketOptionLevel = $asm06.System.Net.Sockets.SocketOptionLevel.IPv6;
	} else {
		this.ipSocketOptionLevel = $asm06.System.Net.Sockets.SocketOptionLevel.IP;
	}
	this.lockObject = new System.Object();
};
$asm06.System.Net.Sockets.UnsafeSocket.prototype.BeginFilterlessReceiveMessageFrom = function (buffer, offset, count, callback, state) {
	var num = new JSIL.Variable(0), socketError = new JSIL.Variable(0);
	this.CheckDisposed();
	this.BindToThreadPool();
	var socketAddress = this.localEndPoint.Serialize();
	socketAddress.CopyAddressSizeIntoBuffer();
	this.EnsureDynamicWinsockMethods();
	var wSARecvMsgDelegate = this.dynamicWinsockMethods.GetWSARecvMsgDelegate(this.handle);
	var receiveMessageAsyncResult = new $asm06.System.Net.Sockets.ReceiveMessageAsyncResult(callback, state);
	receiveMessageAsyncResult.SetUnmanagedStructures(buffer, offset, count, socketAddress);
	try {
		$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSARecvMsg(
			this.handle, 
			receiveMessageAsyncResult.MessagePointer, 
			/* ref */ num, 
			receiveMessageAsyncResult.OverlappedPointer, 
			System.IntPtr.Zero, 
			wSARecvMsgDelegate, 
			/* ref */ socketError
		);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.ObjectDisposedException)) {
			receiveMessageAsyncResult.Cleanup();
			throw $exception;
		} else {
			throw $exception;
		}
	}
	receiveMessageAsyncResult.ReleaseReference();
	if (!(!JSIL.Cast(socketError.value, System.Boolean) || (socketError.value === System.Net.Sockets.SocketError.IOPending))) {
		receiveMessageAsyncResult.ReleaseReference();
		throw JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [socketError.value]);
	}
	return receiveMessageAsyncResult;
};
$asm06.System.Net.Sockets.UnsafeSocket.prototype.EndFilterlessReceiveMessageFrom = function (result, /* ref */ source, /* ref */ packetInformation) {
	var receiveMessageAsyncResult = $asm06.System.Net.Sockets.AsyncResult.End$b1($asm06.System.Net.Sockets.ReceiveMessageAsyncResult)(result);
	source.value = null;
	try {
		source.value = JSIL.Cast(this.localEndPoint.Create(receiveMessageAsyncResult.SocketAddress), System.Net.IPEndPoint);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.ArgumentException)) {
		} else if (JSIL.CheckType($exception, System.IndexOutOfRangeException)) {
		} else {
			throw $exception;
		}
	}
	packetInformation.value = receiveMessageAsyncResult.IPPacketInformation.MemberwiseClone();
	return receiveMessageAsyncResult.Result;
};
$asm06.System.Net.Sockets.UnsafeSocket.prototype.FilterReceiveMessageCallback = function (result) {
	var __label0__ = null;
__step0__: 
	while (true) {
		switch (__label0__) {
			case null:
				var iPEndPoint = new JSIL.Variable(null), packetInfo = new JSIL.Variable(new $asm06.System.Net.Sockets.IPPacketInformation()), obj = null;
				__label0__ = "__entry0__";
				continue __step0__;
				break;
			case "__entry0__":
				var filterReceiveMessageAsyncResult = JSIL.Cast(result.IAsyncResult_AsyncState, $asm06.System.Net.Sockets.FilterReceiveMessageAsyncResult);
				try {
					var result2 = this.EndFilterlessReceiveMessageFrom(result, /* ref */ iPEndPoint, /* ref */ packetInfo);
				} catch ($exception) {
					if (JSIL.CheckType($exception, System.Net.Sockets.SocketException)) {
						var arg_1A_0 = $exception;
						filterReceiveMessageAsyncResult.Complete(arg_1A_0, false);
						return;
					} else if (JSIL.CheckType($exception, System.ObjectDisposedException)) {
						var arg_2A_0 = $exception;
						filterReceiveMessageAsyncResult.Complete(arg_2A_0, false);
						return;
					} else {
						throw $exception;
					}
				}
				var flag = false;
				if (!packetInfo.value.Address.IsMulticast) {
					__label0__ = "IL_AC";
					continue __step0__;
				}
				if (this.multicastAllowedSource !== null) {
					flag = !this.multicastAllowedSource.Equals(iPEndPoint.value.Address);
					__label0__ = "IL_D9";
					continue __step0__;
				}
				if (this.multicastBlockList !== null) {
					System.Threading.Monitor.Enter((obj = this.lockObject));
					try {
						if (this.multicastBlockList !== null) {
							flag = this.multicastBlockList.Contains(iPEndPoint.value.Address);
						}
						__label0__ = "IL_D9";
						continue __step0__;
					} finally {
						System.Threading.Monitor.Exit(obj);
					}
					__label0__ = "IL_AC";
					continue __step0__;
				}
				__label0__ = "IL_D9";
				continue __step0__;
				__label0__ = "IL_AC";
				continue __step0__;
				break;
			case "IL_AC":
				if (this.unicastFilterKind === $asm06.System.Net.Sockets.UnicastFilterKind.BlockAll) {
					flag = true;
				} else if (this.unicastFilterKind === $asm06.System.Net.Sockets.UnicastFilterKind.AllowSingleSource) {
					flag = !this.unicastAllowedSource.Equals(iPEndPoint.value.Address);
				}
				__label0__ = "IL_D9";
				continue __step0__;
				break;
			case "IL_D9":
				if (flag) {
					try {
						this.BeginFilterlessReceiveMessageFrom(
							filterReceiveMessageAsyncResult.Buffer, 
							filterReceiveMessageAsyncResult.Offset, 
							filterReceiveMessageAsyncResult.Count, 
							JSIL.New($asm06.System.Net.Sockets.CallbackWrapper, "_ctor$1", [JSIL.Delegate.New("System.Net.Sockets.SecurityCriticalAsyncCallback", this, $asm06.System.Net.Sockets.UnsafeSocket.prototype.FilterReceiveMessageCallback)]), 
							filterReceiveMessageAsyncResult
						);
						return;
					} catch ($exception) {
						if (JSIL.CheckType($exception, System.Net.Sockets.SocketException)) {
							var arg_10A_0 = $exception;
							filterReceiveMessageAsyncResult.Complete(arg_10A_0, false);
							return;
						} else if (JSIL.CheckType($exception, System.ObjectDisposedException)) {
							var arg_117_0 = $exception;
							filterReceiveMessageAsyncResult.Complete(arg_117_0, false);
							return;
						} else {
							throw $exception;
						}
					}
				}
				filterReceiveMessageAsyncResult.Source = iPEndPoint.value;
				(filterReceiveMessageAsyncResult.PacketInfo = packetInfo.value.MemberwiseClone());
				filterReceiveMessageAsyncResult.Complete(result2, false);
				break __step0__;
		}
	}
};
$asm06.System.Net.Sockets.UnsafeSocket.prototype.EnsureDynamicWinsockMethods = function () {
	if (this.dynamicWinsockMethods === null) {
		this.dynamicWinsockMethods = $asm06.System.Net.Sockets.DynamicWinsockMethods.GetMethods(this.addressFamily, this.socketType, this.protocolType);
	}
};
$asm06.System.Net.Sockets.UnsafeSocket.prototype.BindToThreadPool = function () {
	var obj = null;
	if (System.Net.Sockets.Socket.UseOverlappedIO) {
		return;
	}
	if (!this.boundToThreadPool) {
		System.Threading.Monitor.Enter((obj = this.lockObject));
		try {
			if (!this.boundToThreadPool) {
				System.Threading.ThreadPool.BindHandle(this.handle);
				this.boundToThreadPool = true;
			}
		} finally {
			System.Threading.Monitor.Exit(obj);
		}
	}
};
$asm06.System.Net.Sockets.UnsafeSocket.prototype.BindToDefaultPort = function () {
	if (this.localEndPoint === null) {
		if (this.addressFamily === System.Net.Sockets.AddressFamily.InterNetwork) {
			this.Bind(JSIL.New(System.Net.IPEndPoint, "_ctor$1", [System.Net.IPAddress.Any, 0]));
			return;
		}
		this.Bind(JSIL.New(System.Net.IPEndPoint, "_ctor$1", [System.Net.IPAddress.IPv6Any, 0]));
	}
};
$asm06.System.Net.Sockets.UnsafeSocket.prototype.SetIPv6MulticastSourceOption = function (optionName, sourceAddress, groupAddress) {
	var socketError2 = new JSIL.Variable(0);
	var groupSourceRequest = new JSIL.Variable(new $asm06.System.Net.GroupSourceRequest(sourceAddress, groupAddress, 0));
	var socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.setsockopt$5(
		this.handle, 
		$asm06.System.Net.Sockets.SocketOptionLevel.IPv6, 
		optionName, 
		/* ref */ groupSourceRequest, 
		$asm06.System.Net.GroupSourceRequest.Size, 
		/* ref */ socketError2
	);
	if (JSIL.Cast(socketError, System.Boolean)) {
		throw JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [socketError2.value]);
	}
};
$asm06.System.Net.Sockets.UnsafeSocket.prototype.SetMulticastSourceOption = function (optionName, sourceAddress, groupAddress) {
	var socketError2 = new JSIL.Variable(0);
	var iPMulticastRequestSource = new JSIL.Variable(new $asm06.System.Net.IPMulticastRequestSource());
	iPMulticastRequestSource.value.MulticastAddress = groupAddress.m_Address;
	iPMulticastRequestSource.value.SourceAddress = sourceAddress.m_Address;
	iPMulticastRequestSource.value.InterfaceAddress = 0;
	var socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.setsockopt$4(
		this.handle, 
		$asm06.System.Net.Sockets.SocketOptionLevel.IP, 
		optionName, 
		/* ref */ iPMulticastRequestSource, 
		$asm06.System.Net.IPMulticastRequestSource.Size, 
		/* ref */ socketError2
	);
	if (JSIL.Cast(socketError, System.Boolean)) {
		throw JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [socketError2.value]);
	}
};
$asm06.System.Net.Sockets.UnsafeSocket.prototype.EmulateBlockSource = function (sourceAddress) {
	var obj = null;
	System.Threading.Monitor.Enter((obj = this.lockObject));
	try {
		if (this.multicastBlockList === null) {
			this.multicastBlockList = new (System.Collections.Generic.List$b1.Of(System.Net.IPAddress)) (1);
		} else if (this.multicastBlockList.Contains(sourceAddress)) {
			throw JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [System.Net.Sockets.SocketError.AddressNotAvailable]);
		}
		this.multicastBlockList.Add(sourceAddress);
	} finally {
		System.Threading.Monitor.Exit(obj);
	}
};
$asm06.System.Net.Sockets.UnsafeSocket.prototype.EmulateUnblockSource = function (sourceAddress) {
	var obj = null;
	System.Threading.Monitor.Enter((obj = this.lockObject));
	try {
		if ((this.multicastBlockList === null) || !this.multicastBlockList.Remove(sourceAddress)) {
			throw JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [System.Net.Sockets.SocketError.AddressNotAvailable]);
		}
		if (this.multicastBlockList.Count === 0) {
			this.multicastBlockList = null;
		}
	} finally {
		System.Threading.Monitor.Exit(obj);
	}
};
$asm06.System.Net.Sockets.UnsafeSocket.prototype.EmulateAddSourceMembership = function (sourceAddress, groupAddress) {
	this.multicastAllowedSource = sourceAddress;
	this.AddMembership(groupAddress);
};
$asm06.System.Net.Sockets.UnsafeSocket.prototype.CheckSocketError = function (returnValue, lastError) {
	if (JSIL.Cast(returnValue, System.Boolean)) {
		throw JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [lastError]);
	}
};
$asm06.System.Net.Sockets.UnsafeSocket.prototype.CheckDisposed = function () {
	if (this.cleanedUp) {
		throw JSIL.New(System.ObjectDisposedException, "_ctor$1", [JSIL.GetType(this).FullName]);
	}
};
$asm06.System.Net.Sockets.UnsafeSocket.get_OSSupportsIGMPv3 = function () {
	return $asm06.System.Net.ComNetOS.IsPostWin2K;
};
$asm06.System.Net.Sockets.UnsafeSocket.get_OSSupportsMLDv2 = function () {
	return $asm06.System.Net.ComNetOS.IsVista;
};
JSIL.MakeProperty($asm06.System.Net.Sockets.UnsafeSocket.prototype, "AddressFamily", 
	$asm06.System.Net.Sockets.UnsafeSocket.prototype.get_AddressFamily, null);
JSIL.MakeProperty($asm06.System.Net.Sockets.UnsafeSocket.prototype, "SocketType", 
	$asm06.System.Net.Sockets.UnsafeSocket.prototype.get_SocketType, null);
JSIL.MakeProperty($asm06.System.Net.Sockets.UnsafeSocket.prototype, "ProtocolType", 
	$asm06.System.Net.Sockets.UnsafeSocket.prototype.get_ProtocolType, null);
JSIL.MakeProperty($asm06.System.Net.Sockets.UnsafeSocket.prototype, "ReceiveBufferSize", 
	$asm06.System.Net.Sockets.UnsafeSocket.prototype.get_ReceiveBufferSize, $asm06.System.Net.Sockets.UnsafeSocket.prototype.set_ReceiveBufferSize);
JSIL.MakeProperty($asm06.System.Net.Sockets.UnsafeSocket.prototype, "SendBufferSize", 
	$asm06.System.Net.Sockets.UnsafeSocket.prototype.get_SendBufferSize, $asm06.System.Net.Sockets.UnsafeSocket.prototype.set_SendBufferSize);
JSIL.MakeProperty($asm06.System.Net.Sockets.UnsafeSocket.prototype, "ReuseAddress", 
	$asm06.System.Net.Sockets.UnsafeSocket.prototype.get_ReuseAddress, $asm06.System.Net.Sockets.UnsafeSocket.prototype.set_ReuseAddress);
JSIL.MakeProperty($asm06.System.Net.Sockets.UnsafeSocket.prototype, "MulticastLoopback", 
	$asm06.System.Net.Sockets.UnsafeSocket.prototype.get_MulticastLoopback, $asm06.System.Net.Sockets.UnsafeSocket.prototype.set_MulticastLoopback);
JSIL.MakeProperty($asm06.System.Net.Sockets.UnsafeSocket.prototype, "PacketInformation", 
	$asm06.System.Net.Sockets.UnsafeSocket.prototype.get_PacketInformation, $asm06.System.Net.Sockets.UnsafeSocket.prototype.set_PacketInformation);
JSIL.MakeProperty($asm06.System.Net.Sockets.UnsafeSocket.prototype, "Ttl", 
	$asm06.System.Net.Sockets.UnsafeSocket.prototype.get_Ttl, $asm06.System.Net.Sockets.UnsafeSocket.prototype.set_Ttl);
JSIL.MakeProperty($asm06.System.Net.Sockets.UnsafeSocket.prototype, "FilterUnicastPackets", 
	$asm06.System.Net.Sockets.UnsafeSocket.prototype.get_FilterUnicastPackets, null);
JSIL.MakeProperty($asm06.System.Net.Sockets.UnsafeSocket, "OSSupportsIGMPv3", 
	$asm06.System.Net.Sockets.UnsafeSocket.get_OSSupportsIGMPv3, null);
JSIL.MakeProperty($asm06.System.Net.Sockets.UnsafeSocket, "OSSupportsMLDv2", 
	$asm06.System.Net.Sockets.UnsafeSocket.get_OSSupportsMLDv2, null);
$asm06.System.Net.Sockets.UnsafeSocket.prototype.dynamicWinsockMethods = null;
$asm06.System.Net.Sockets.UnsafeSocket.prototype.handle = null;
$asm06.System.Net.Sockets.UnsafeSocket.prototype.lockObject = null;
$asm06.System.Net.Sockets.UnsafeSocket.prototype.addressFamily = 0;
$asm06.System.Net.Sockets.UnsafeSocket.prototype.socketType = 0;
$asm06.System.Net.Sockets.UnsafeSocket.prototype.protocolType = 0;
$asm06.System.Net.Sockets.UnsafeSocket.prototype.ipSocketOptionLevel = 0;
$asm06.System.Net.Sockets.UnsafeSocket.prototype.localEndPoint = null;
$asm06.System.Net.Sockets.UnsafeSocket.prototype.cleanedUp = false;
$asm06.System.Net.Sockets.UnsafeSocket.prototype.boundToThreadPool = false;
$asm06.System.Net.Sockets.UnsafeSocket.prototype.multicastAllowedSource = null;
$asm06.System.Net.Sockets.UnsafeSocket.prototype.multicastBlockList = null;
$asm06.System.Net.Sockets.UnsafeSocket.prototype.unicastFilterKind = 0;
$asm06.System.Net.Sockets.UnsafeSocket.prototype.unicastAllowedSource = null;

$asm06.System.Net.Sockets.DynamicWinsockMethods.prototype._ctor = function (addressFamily, socketType, protocolType) {
	System.Object.prototype._ctor.call(this);
	this.addressFamily = addressFamily;
	this.socketType = socketType;
	this.protocolType = protocolType;
	this.lockObject = new System.Object();
};
$asm06.System.Net.Sockets.DynamicWinsockMethods.GetMethods = function (addressFamily, socketType, protocolType) {
	var obj = null;
	System.Threading.Monitor.Enter((obj = $asm06.System.Net.Sockets.DynamicWinsockMethods.methodTable));
	try {
	__loop0__: 
		for (var i = 0; i < $asm06.System.Net.Sockets.DynamicWinsockMethods.methodTable.Count; ++i) {
			var dynamicWinsockMethods = $asm06.System.Net.Sockets.DynamicWinsockMethods.methodTable.get_Item(i);
			if (!((dynamicWinsockMethods.addressFamily !== addressFamily) || 
					(dynamicWinsockMethods.socketType !== socketType) || (dynamicWinsockMethods.protocolType !== protocolType))) {
				var result = dynamicWinsockMethods;
				return result;
			}
		}
		dynamicWinsockMethods = new $asm06.System.Net.Sockets.DynamicWinsockMethods(addressFamily, socketType, protocolType);
		$asm06.System.Net.Sockets.DynamicWinsockMethods.methodTable.Add(dynamicWinsockMethods);
		result = dynamicWinsockMethods;
	} finally {
		System.Threading.Monitor.Exit(obj);
	}
	return result;
};
$asm06.System.Net.Sockets.DynamicWinsockMethods.prototype.GetWSARecvMsgDelegate = function (handle) {
	var obj = null;
	if (!(!$asm06.System.Net.UnsafeNclNativeMethods.IsWindows || this.wsaRecvMsg)) {
		System.Threading.Monitor.Enter((obj = this.lockObject));
		try {
			if (this.wsaRecvMsg === null) {
				var guid = new JSIL.Variable(JSIL.New(System.Guid, "_ctor$4", ["{0xf689d7c8,0x6f1f,0x436b,{0x8a,0x53,0xe5,0x4f,0xe3,0x51,0xc3,0x22}}"]));
				var ptr = this.LoadDynamicFunctionPointer(handle, /* ref */ guid);
				this.wsaRecvMsg = System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer(ptr, $asm06.System.Net.Sockets.WSARecvMsgDelegate);
			}
		} finally {
			System.Threading.Monitor.Exit(obj);
		}
	}
	return this.wsaRecvMsg;
};
$asm06.System.Net.Sockets.DynamicWinsockMethods.prototype.LoadDynamicFunctionPointer = function (handle, /* ref */ guid) {
	var result = new JSIL.Variable(0), num = new JSIL.Variable(0), socketError2 = new JSIL.Variable(0);
	var socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSAIoctl(
		handle, 
		-939524090, 
		/* ref */ guid, 
		JSIL.UntranslatableInstruction("sizeof:Int32([mscorlib]System.Guid)"), 
		/* ref */ result, 
		JSIL.UntranslatableInstruction("sizeof:Int32([mscorlib]System.IntPtr)"), 
		/* ref */ num, 
		System.IntPtr.Zero, 
		System.IntPtr.Zero, 
		/* ref */ socketError2
	);
	if (JSIL.Cast(socketError, System.Boolean)) {
		throw JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [socketError2.value]);
	}
	return result.value;
};
$asm06.System.Net.Sockets.DynamicWinsockMethods.methodTable = null;
$asm06.System.Net.Sockets.DynamicWinsockMethods.prototype.addressFamily = 0;
$asm06.System.Net.Sockets.DynamicWinsockMethods.prototype.socketType = 0;
$asm06.System.Net.Sockets.DynamicWinsockMethods.prototype.protocolType = 0;
$asm06.System.Net.Sockets.DynamicWinsockMethods.prototype.lockObject = null;
$asm06.System.Net.Sockets.DynamicWinsockMethods.prototype.wsaRecvMsg = null;
$asm06.System.Net.Sockets.DynamicWinsockMethods._cctor = function () {
	$asm06.System.Net.Sockets.DynamicWinsockMethods.methodTable = new (System.Collections.Generic.List$b1.Of($asm06.System.Net.Sockets.DynamicWinsockMethods)) ();
};

System.Net.Sockets.UdpAnySourceMulticastClient.prototype._ctor = function (groupAddress, localPort) {
	System.Object.prototype._ctor.call(this);
	if (groupAddress === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["groupAddress"]);
	}
	if (!$asm06.System.Net.ValidationHelper.ValidateTcpPort(localPort)) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["localPort"]);
	}
	if (localPort < 1024) {
		throw JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [System.Net.Sockets.SocketError.AccessDenied]);
	}
	if (!$asm06.System.Net.Sockets.RegKeyServices.AllowUdpMulticastClients) {
		throw JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [System.Net.Sockets.SocketError.AccessDenied]);
	}
	this.groupAddress = groupAddress.Snapshot();
	this.localPort = localPort;
	this.allowedSendToAddresses = new (System.Collections.Generic.List$b1.Of(System.Net.IPAddress)) ();
	this.lockObject = new System.Object();
};
System.Net.Sockets.UdpAnySourceMulticastClient.prototype.get_ReceiveBufferSize = function () {
	this.CheckJoined();
	return this.socket.ReceiveBufferSize;
};
System.Net.Sockets.UdpAnySourceMulticastClient.prototype.set_ReceiveBufferSize = function (value) {
	if (value < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["value"]);
	}
	this.CheckJoined();
	this.socket.ReceiveBufferSize = value;
};
System.Net.Sockets.UdpAnySourceMulticastClient.prototype.get_SendBufferSize = function () {
	this.CheckJoined();
	return this.socket.SendBufferSize;
};
System.Net.Sockets.UdpAnySourceMulticastClient.prototype.set_SendBufferSize = function (value) {
	if (value < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["value"]);
	}
	this.CheckJoined();
	this.socket.SendBufferSize = value;
};
System.Net.Sockets.UdpAnySourceMulticastClient.prototype.get_MulticastLoopback = function () {
	this.CheckJoined();
	return this.socket.MulticastLoopback;
};
System.Net.Sockets.UdpAnySourceMulticastClient.prototype.set_MulticastLoopback = function (value) {
	this.CheckJoined();
	this.socket.MulticastLoopback = value;
};
System.Net.Sockets.UdpAnySourceMulticastClient.prototype.BeginJoinGroup = function (callback, state) {
	var obj = null;
	System.Threading.Monitor.Enter((obj = this.lockObject));
	try {
		this.CheckDisposed();
		if (this.joined) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm06.System.SR.GetString$2("net_multicast_alreadyjoined")]);
		}
		if (this.policyCheckResult !== null) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm06.System.SR.GetString$2("net_multicast_joininprogress")]);
		}
		var policyCheckOperation = new $asm06.System.Net.Sockets.MulticastPolicyCheckOperation(null, this.groupAddress, this.localPort);
		var result = new $asm06.System.Net.Sockets.MulticastPolicyCheckAsyncResult(policyCheckOperation, JSIL.New($asm06.System.Net.Sockets.CallbackWrapper, "_ctor$0", [callback]), state);
		this.policyCheckResult = result;
	} finally {
		System.Threading.Monitor.Exit(obj);
	}
	try {
		$asm06.System.Net.Sockets.MulticastPolicyManager.AddToPendingPolicyChecks(result);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.Net.Sockets.SocketException)) {
			throw JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [System.Net.Sockets.SocketError.AccessDenied]);
		} else {
			throw $exception;
		}
	}
	return result;
};
System.Net.Sockets.UdpAnySourceMulticastClient.prototype.EndJoinGroup = function (result) {
	var obj = null;
	var flag = false;
	try {
		flag = $asm06.System.Net.Sockets.MulticastPolicyManager.EndPolicyCheck(result);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.Net.Sockets.SocketException)) {
			this.policyCheckResult = null;
			throw JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [System.Net.Sockets.SocketError.AccessDenied]);
		} else {
			throw $exception;
		}
	}
	System.Threading.Monitor.Enter((obj = this.lockObject));
	try {
		this.CheckDisposed();
		this.policyCheckResult = null;
		if (!flag) {
			throw JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [System.Net.Sockets.SocketError.AccessDenied]);
		}
		this.CreateSocketAndJoinGroup();
		this.allowedSendToAddresses.Add(this.groupAddress);
		this.joined = true;
	} finally {
		System.Threading.Monitor.Exit(obj);
	}
};
System.Net.Sockets.UdpAnySourceMulticastClient.prototype.BlockSource = function (sourceAddress) {
	this.CheckJoined();
	this.socket.BlockSource(sourceAddress.Snapshot(), this.groupAddress);
};
System.Net.Sockets.UdpAnySourceMulticastClient.prototype.UnblockSource = function (sourceAddress) {
	this.CheckJoined();
	this.socket.UnblockSource(sourceAddress.Snapshot(), this.groupAddress);
};
System.Net.Sockets.UdpAnySourceMulticastClient.prototype.BeginReceiveFromGroup = function (buffer, offset, count, callback, state) {
	if (buffer === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["buffer"]);
	}
	if (!((offset >= 0) && (offset <= buffer.length))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["offset"]);
	}
	if (!((count >= 0) && (count <= (buffer.length - offset)))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["count"]);
	}
	this.CheckJoined();
	return this.socket.BeginReceiveMessageFrom(
		buffer, 
		offset, 
		count, 
		JSIL.New($asm06.System.Net.Sockets.CallbackWrapper, "_ctor$0", [callback]), 
		state
	);
};
System.Net.Sockets.UdpAnySourceMulticastClient.prototype.EndReceiveFromGroup = function (result, /* ref */ source) {
	var iPPacketInformation = new JSIL.Variable(new $asm06.System.Net.Sockets.IPPacketInformation());
	this.CheckJoined();
	var result2 = this.socket.EndReceiveMessageFrom(result, /* ref */ source, /* ref */ iPPacketInformation);
	this.AddToValidDestinationAddresses(source.value.Address);
	return result2;
};
System.Net.Sockets.UdpAnySourceMulticastClient.prototype.BeginSendToGroup = function (buffer, offset, count, callback, state) {
	return this.BeginSendTo(
		buffer, 
		offset, 
		count, 
		JSIL.New(System.Net.IPEndPoint, "_ctor$1", [this.groupAddress, this.localPort]), 
		callback, 
		state
	);
};
System.Net.Sockets.UdpAnySourceMulticastClient.prototype.EndSendToGroup = function (result) {
	this.EndSendTo(result);
};
System.Net.Sockets.UdpAnySourceMulticastClient.prototype.BeginSendTo = function (buffer, offset, count, remoteEndPoint, callback, state) {
	if (buffer === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["buffer"]);
	}
	if (!((offset >= 0) && (offset <= buffer.length))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["offset"]);
	}
	if (!((count >= 0) && (count <= (buffer.length - offset)))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["count"]);
	}
	this.CheckJoined();
	var iPEndPoint = remoteEndPoint.Snapshot();
	if (iPEndPoint.Port < 1024) {
		throw JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [System.Net.Sockets.SocketError.AccessDenied]);
	}
	this.ValidateDestinationAddress(iPEndPoint.Address);
	return this.socket.BeginSendTo(
		buffer, 
		offset, 
		count, 
		iPEndPoint, 
		JSIL.New($asm06.System.Net.Sockets.CallbackWrapper, "_ctor$0", [callback]), 
		state
	);
};
System.Net.Sockets.UdpAnySourceMulticastClient.prototype.EndSendTo = function (result) {
	this.CheckJoined();
	this.socket.EndSendTo(result);
};
System.Net.Sockets.UdpAnySourceMulticastClient.prototype.Dispose = function () {
	var obj = null;
	if (!this.disposed) {
		System.Threading.Monitor.Enter((obj = this.lockObject));
		try {
			this.disposed = true;
			if (this.socket !== null) {
				this.socket.Close(0);
			}
			if (this.policyCheckResult !== null) {
				$asm06.System.Net.Sockets.MulticastPolicyManager.AbortPolicyCheck(this.policyCheckResult);
				this.policyCheckResult = null;
			}
		} finally {
			System.Threading.Monitor.Exit(obj);
		}
	}
};
System.Net.Sockets.UdpAnySourceMulticastClient.prototype.CreateSocketAndJoinGroup = function () {
	try {
		this.socket = $asm06.System.Net.Sockets.UnsafeSocket.Create(this.groupAddress.AddressFamily, System.Net.Sockets.SocketType.Dgram, System.Net.Sockets.ProtocolType.Udp);
		this.socket.PacketInformation = true;
		this.socket.FilterAllUnicastPackets();
		this.socket.ReuseAddress = true;
		this.socket.Bind(JSIL.New(System.Net.IPEndPoint, "_ctor$1", [(this.groupAddress.AddressFamily === System.Net.Sockets.AddressFamily.InterNetworkV6) ? System.Net.IPAddress.IPv6Any : System.Net.IPAddress.Any, this.localPort]));
		this.socket.AddMembership(this.groupAddress);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.Net.Sockets.SocketException)) {
			this.socket.Close(0);
			this.socket = null;
			throw $exception;
		} else {
			throw $exception;
		}
	}
};
System.Net.Sockets.UdpAnySourceMulticastClient.prototype.CheckDisposed = function () {
	if (this.disposed) {
		throw JSIL.New(System.ObjectDisposedException, "_ctor$1", [JSIL.GetType(this).FullName]);
	}
};
System.Net.Sockets.UdpAnySourceMulticastClient.prototype.CheckJoined = function () {
	this.CheckDisposed();
	if (!this.joined) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm06.System.SR.GetString$2("net_multicast_notjoined")]);
	}
};
System.Net.Sockets.UdpAnySourceMulticastClient.prototype.AddToValidDestinationAddresses = function (destination) {
	var obj = null;
	System.Threading.Monitor.Enter((obj = this.lockObject));
	try {
		if (!this.allowedSendToAddresses.Contains(destination)) {
			this.allowedSendToAddresses.Add(destination);
		}
	} finally {
		System.Threading.Monitor.Exit(obj);
	}
};
System.Net.Sockets.UdpAnySourceMulticastClient.prototype.ValidateDestinationAddress = function (destination) {
	var obj = null;
	System.Threading.Monitor.Enter((obj = this.lockObject));
	try {
		if (!this.allowedSendToAddresses.Contains(destination)) {
			throw JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [System.Net.Sockets.SocketError.AccessDenied]);
		}
	} finally {
		System.Threading.Monitor.Exit(obj);
	}
};
JSIL.MakeProperty(System.Net.Sockets.UdpAnySourceMulticastClient.prototype, "ReceiveBufferSize", 
	System.Net.Sockets.UdpAnySourceMulticastClient.prototype.get_ReceiveBufferSize, System.Net.Sockets.UdpAnySourceMulticastClient.prototype.set_ReceiveBufferSize);
JSIL.MakeProperty(System.Net.Sockets.UdpAnySourceMulticastClient.prototype, "SendBufferSize", 
	System.Net.Sockets.UdpAnySourceMulticastClient.prototype.get_SendBufferSize, System.Net.Sockets.UdpAnySourceMulticastClient.prototype.set_SendBufferSize);
JSIL.MakeProperty(System.Net.Sockets.UdpAnySourceMulticastClient.prototype, "MulticastLoopback", 
	System.Net.Sockets.UdpAnySourceMulticastClient.prototype.get_MulticastLoopback, System.Net.Sockets.UdpAnySourceMulticastClient.prototype.set_MulticastLoopback);
System.Net.Sockets.UdpAnySourceMulticastClient.prototype.socket = null;
System.Net.Sockets.UdpAnySourceMulticastClient.prototype.policyCheckResult = null;
System.Net.Sockets.UdpAnySourceMulticastClient.prototype.groupAddress = null;
System.Net.Sockets.UdpAnySourceMulticastClient.prototype.localPort = 0;
System.Net.Sockets.UdpAnySourceMulticastClient.prototype.disposed = null;
System.Net.Sockets.UdpAnySourceMulticastClient.prototype.joined = null;
System.Net.Sockets.UdpAnySourceMulticastClient.prototype.allowedSendToAddresses = null;
System.Net.Sockets.UdpAnySourceMulticastClient.prototype.lockObject = null;

System.Net.Sockets.UdpSingleSourceMulticastClient.prototype._ctor = function (sourceAddress, groupAddress, localPort) {
	System.Object.prototype._ctor.call(this);
	if (sourceAddress === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["sourceAddress"]);
	}
	if (groupAddress === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["groupAddress"]);
	}
	if (sourceAddress.AddressFamily !== groupAddress.AddressFamily) {
		throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm06.System.SR.GetString$2("net_invalidversion"), "sourceAddress"]);
	}
	if (!$asm06.System.Net.ValidationHelper.ValidateTcpPort(localPort)) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["localPort"]);
	}
	if (localPort < 1024) {
		throw JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [System.Net.Sockets.SocketError.AccessDenied]);
	}
	if (!$asm06.System.Net.Sockets.RegKeyServices.AllowUdpMulticastClients) {
		throw JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [System.Net.Sockets.SocketError.AccessDenied]);
	}
	this.sourceAddress = sourceAddress.Snapshot();
	this.groupAddress = groupAddress.Snapshot();
	this.localPort = localPort;
	this.lockObject = new System.Object();
};
System.Net.Sockets.UdpSingleSourceMulticastClient.prototype.get_ReceiveBufferSize = function () {
	this.CheckJoined();
	return this.socket.ReceiveBufferSize;
};
System.Net.Sockets.UdpSingleSourceMulticastClient.prototype.set_ReceiveBufferSize = function (value) {
	if (value < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["value"]);
	}
	this.CheckJoined();
	this.socket.ReceiveBufferSize = value;
};
System.Net.Sockets.UdpSingleSourceMulticastClient.prototype.get_SendBufferSize = function () {
	this.CheckJoined();
	return this.socket.SendBufferSize;
};
System.Net.Sockets.UdpSingleSourceMulticastClient.prototype.set_SendBufferSize = function (value) {
	if (value < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["value"]);
	}
	this.CheckJoined();
	this.socket.SendBufferSize = value;
};
System.Net.Sockets.UdpSingleSourceMulticastClient.prototype.BeginJoinGroup = function (callback, state) {
	var obj = null;
	System.Threading.Monitor.Enter((obj = this.lockObject));
	try {
		this.CheckDisposed();
		if (this.joined) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm06.System.SR.GetString$2("net_multicast_alreadyjoined")]);
		}
		if (this.policyCheckResult !== null) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm06.System.SR.GetString$2("net_multicast_joininprogress")]);
		}
		var policyCheckOperation = new $asm06.System.Net.Sockets.MulticastPolicyCheckOperation(this.sourceAddress, this.groupAddress, this.localPort);
		var result = new $asm06.System.Net.Sockets.MulticastPolicyCheckAsyncResult(policyCheckOperation, JSIL.New($asm06.System.Net.Sockets.CallbackWrapper, "_ctor$0", [callback]), state);
		this.policyCheckResult = result;
	} finally {
		System.Threading.Monitor.Exit(obj);
	}
	try {
		$asm06.System.Net.Sockets.MulticastPolicyManager.AddToPendingPolicyChecks(result);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.Net.Sockets.SocketException)) {
			throw JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [System.Net.Sockets.SocketError.AccessDenied]);
		} else {
			throw $exception;
		}
	}
	return result;
};
System.Net.Sockets.UdpSingleSourceMulticastClient.prototype.EndJoinGroup = function (result) {
	var obj = null;
	var flag = false;
	try {
		flag = $asm06.System.Net.Sockets.MulticastPolicyManager.EndPolicyCheck(result);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.Net.Sockets.SocketException)) {
			this.policyCheckResult = null;
			throw JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [System.Net.Sockets.SocketError.AccessDenied]);
		} else {
			throw $exception;
		}
	}
	System.Threading.Monitor.Enter((obj = this.lockObject));
	try {
		this.CheckDisposed();
		this.policyCheckResult = null;
		if (!flag) {
			throw JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [System.Net.Sockets.SocketError.AccessDenied]);
		}
		this.CreateSocketAndJoinGroup();
		this.joined = true;
	} finally {
		System.Threading.Monitor.Exit(obj);
	}
};
System.Net.Sockets.UdpSingleSourceMulticastClient.prototype.BeginReceiveFromSource = function (buffer, offset, count, callback, state) {
	if (buffer === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["buffer"]);
	}
	if (!((offset >= 0) && (offset <= buffer.length))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["offset"]);
	}
	if (!((count >= 0) && (count <= (buffer.length - offset)))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["count"]);
	}
	this.CheckJoined();
	return this.socket.BeginReceiveMessageFrom(
		buffer, 
		offset, 
		count, 
		JSIL.New($asm06.System.Net.Sockets.CallbackWrapper, "_ctor$0", [callback]), 
		state
	);
};
System.Net.Sockets.UdpSingleSourceMulticastClient.prototype.EndReceiveFromSource = function (result, /* ref */ sourcePort) {
	var iPEndPoint = new JSIL.Variable(null), iPPacketInformation = new JSIL.Variable(new $asm06.System.Net.Sockets.IPPacketInformation());
	this.CheckJoined();
	var result2 = this.socket.EndReceiveMessageFrom(result, /* ref */ iPEndPoint, /* ref */ iPPacketInformation);
	if (!this.receivedMulticastPacketFromSource) {
		this.socket.UnfilterUnicastPacketsFrom(this.sourceAddress);
		this.receivedMulticastPacketFromSource = true;
	}
	sourcePort.value = iPEndPoint.value.Port;
	return result2;
};
System.Net.Sockets.UdpSingleSourceMulticastClient.prototype.BeginSendToSource = function (buffer, offset, count, remotePort, callback, state) {
	if (buffer === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["buffer"]);
	}
	if (!((offset >= 0) && (offset <= buffer.length))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["offset"]);
	}
	if (!((count >= 0) && (count <= (buffer.length - offset)))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["count"]);
	}
	if (!$asm06.System.Net.ValidationHelper.ValidateTcpPort(remotePort)) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["remotePort"]);
	}
	if (remotePort < 1024) {
		throw JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [System.Net.Sockets.SocketError.AccessDenied]);
	}
	this.CheckJoined();
	return this.socket.BeginSendTo(
		buffer, 
		offset, 
		count, 
		JSIL.New(System.Net.IPEndPoint, "_ctor$1", [this.sourceAddress, remotePort]), 
		JSIL.New($asm06.System.Net.Sockets.CallbackWrapper, "_ctor$0", [callback]), 
		state
	);
};
System.Net.Sockets.UdpSingleSourceMulticastClient.prototype.EndSendToSource = function (result) {
	this.CheckJoined();
	this.socket.EndSendTo(result);
};
System.Net.Sockets.UdpSingleSourceMulticastClient.prototype.Dispose = function () {
	var obj = null;
	if (!this.disposed) {
		System.Threading.Monitor.Enter((obj = this.lockObject));
		try {
			this.disposed = true;
			if (this.socket !== null) {
				this.socket.Close(0);
			}
			if (this.policyCheckResult !== null) {
				$asm06.System.Net.Sockets.MulticastPolicyManager.AbortPolicyCheck(this.policyCheckResult);
			}
		} finally {
			System.Threading.Monitor.Exit(obj);
		}
	}
};
System.Net.Sockets.UdpSingleSourceMulticastClient.prototype.CreateSocketAndJoinGroup = function () {
	try {
		this.socket = $asm06.System.Net.Sockets.UnsafeSocket.Create(this.groupAddress.AddressFamily, System.Net.Sockets.SocketType.Dgram, System.Net.Sockets.ProtocolType.Udp);
		this.socket.PacketInformation = true;
		this.socket.FilterAllUnicastPackets();
		this.socket.ReuseAddress = true;
		this.socket.Bind(JSIL.New(System.Net.IPEndPoint, "_ctor$1", [(this.groupAddress.AddressFamily === System.Net.Sockets.AddressFamily.InterNetworkV6) ? System.Net.IPAddress.IPv6Any : System.Net.IPAddress.Any, this.localPort]));
		this.socket.AddSourceMembership(this.sourceAddress, this.groupAddress);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.Net.Sockets.SocketException)) {
			this.socket.Close(0);
			this.socket = null;
			throw $exception;
		} else {
			throw $exception;
		}
	}
};
System.Net.Sockets.UdpSingleSourceMulticastClient.prototype.CheckDisposed = function () {
	if (this.disposed) {
		throw JSIL.New(System.ObjectDisposedException, "_ctor$1", [JSIL.GetType(this).FullName]);
	}
};
System.Net.Sockets.UdpSingleSourceMulticastClient.prototype.CheckJoined = function () {
	this.CheckDisposed();
	if (!this.joined) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm06.System.SR.GetString$2("net_multicast_notjoined")]);
	}
};
JSIL.MakeProperty(System.Net.Sockets.UdpSingleSourceMulticastClient.prototype, "ReceiveBufferSize", 
	System.Net.Sockets.UdpSingleSourceMulticastClient.prototype.get_ReceiveBufferSize, System.Net.Sockets.UdpSingleSourceMulticastClient.prototype.set_ReceiveBufferSize);
JSIL.MakeProperty(System.Net.Sockets.UdpSingleSourceMulticastClient.prototype, "SendBufferSize", 
	System.Net.Sockets.UdpSingleSourceMulticastClient.prototype.get_SendBufferSize, System.Net.Sockets.UdpSingleSourceMulticastClient.prototype.set_SendBufferSize);
System.Net.Sockets.UdpSingleSourceMulticastClient.prototype.socket = null;
System.Net.Sockets.UdpSingleSourceMulticastClient.prototype.policyCheckResult = null;
System.Net.Sockets.UdpSingleSourceMulticastClient.prototype.sourceAddress = null;
System.Net.Sockets.UdpSingleSourceMulticastClient.prototype.groupAddress = null;
System.Net.Sockets.UdpSingleSourceMulticastClient.prototype.localPort = 0;
System.Net.Sockets.UdpSingleSourceMulticastClient.prototype.disposed = null;
System.Net.Sockets.UdpSingleSourceMulticastClient.prototype.joined = null;
System.Net.Sockets.UdpSingleSourceMulticastClient.prototype.receivedMulticastPacketFromSource = false;
System.Net.Sockets.UdpSingleSourceMulticastClient.prototype.lockObject = null;

$asm06.System.Net.UiSynchronizationContext.get_Current = function () {
	return $asm06.System.Net.UiSynchronizationContext._Current;
};
$asm06.System.Net.UiSynchronizationContext.set_Current = function (value) {
	$asm06.System.Net.UiSynchronizationContext._Current = value;
};
$asm06.System.Net.UiSynchronizationContext.get_ManagedUiThreadId = function () {
	return $asm06.System.Net.UiSynchronizationContext._Id;
};
$asm06.System.Net.UiSynchronizationContext.set_ManagedUiThreadId = function (value) {
	$asm06.System.Net.UiSynchronizationContext._Id = value;
};
JSIL.MakeProperty($asm06.System.Net.UiSynchronizationContext, "Current", 
	$asm06.System.Net.UiSynchronizationContext.get_Current, $asm06.System.Net.UiSynchronizationContext.set_Current);
JSIL.MakeProperty($asm06.System.Net.UiSynchronizationContext, "ManagedUiThreadId", 
	$asm06.System.Net.UiSynchronizationContext.get_ManagedUiThreadId, $asm06.System.Net.UiSynchronizationContext.set_ManagedUiThreadId);
$asm06.System.Net.UiSynchronizationContext._Current = null;
$asm06.System.Net.UiSynchronizationContext._Id = 0;

$asm06.System.Internal.ExternDLL.get_IsWindows = function () {
	switch (Number(System.Environment.OSVersion.Platform)) {
		case 0: 
		case 3: 
		case 5: 
			return false;
		case 1: 
		case 2: 
			return true;
		case 4: 
		case 6: 
			return false;
		default: 
			throw JSIL.New(System.PlatformNotSupportedException, "_ctor$0", []);
	}
};
JSIL.MakeProperty($asm06.System.Internal.ExternDLL, "IsWindows", 
	$asm06.System.Internal.ExternDLL.get_IsWindows, null);
Object.defineProperty($asm06.System.Internal.ExternDLL, "RotorPAL", {
		"value": "coreclr"}
);
Object.defineProperty($asm06.System.Internal.ExternDLL, "Kernel32", {
		"value": "Kernel32.dll"}
);
Object.defineProperty($asm06.System.Internal.ExternDLL, "WS2_32", {
		"value": "WS2_32.dll"}
);

Object.defineProperty($asm06.System.Net.UnsafeNclNativeMethods, "RotorPAL", {
		"value": "coreclr"}
);
Object.defineProperty($asm06.System.Net.UnsafeNclNativeMethods, "NCLPAL", {
		"value": "System.Net.Native.dll"}
);
Object.defineProperty($asm06.System.Net.UnsafeNclNativeMethods, "Kernel32", {
		"value": "Kernel32.dll"}
);
Object.defineProperty($asm06.System.Net.UnsafeNclNativeMethods, "WS2_32", {
		"value": "WS2_32.dll"}
);
$asm06.System.Net.UnsafeNclNativeMethods.IsWindows = false;
$asm06.System.Net.UnsafeNclNativeMethods._cctor = function () {
	switch (Number(System.Environment.OSVersion.Platform)) {
		case 0: 
		case 1: 
		case 2: 
		case 3: 
		case 5: 
			$asm06.System.Net.UnsafeNclNativeMethods.IsWindows = true;
			return;
		case 4: 
		case 6: 
			$asm06.System.Net.UnsafeNclNativeMethods.IsWindows = false;
			return;
		default: 
			throw JSIL.New(System.PlatformNotSupportedException, "_ctor$0", []);
	}
};

Object.defineProperty($asm06.System.Net.UnsafeNclNativeMethods.ErrorCodes, "ERROR_SUCCESS", {
		"value": 0}
);
Object.defineProperty($asm06.System.Net.UnsafeNclNativeMethods.ErrorCodes, "ERROR_HANDLE_EOF", {
		"value": 38}
);
Object.defineProperty($asm06.System.Net.UnsafeNclNativeMethods.ErrorCodes, "ERROR_NOT_SUPPORTED", {
		"value": 50}
);
Object.defineProperty($asm06.System.Net.UnsafeNclNativeMethods.ErrorCodes, "ERROR_INVALID_PARAMETER", {
		"value": 87}
);
Object.defineProperty($asm06.System.Net.UnsafeNclNativeMethods.ErrorCodes, "ERROR_ALREADY_EXISTS", {
		"value": 183}
);
Object.defineProperty($asm06.System.Net.UnsafeNclNativeMethods.ErrorCodes, "ERROR_MORE_DATA", {
		"value": 234}
);
Object.defineProperty($asm06.System.Net.UnsafeNclNativeMethods.ErrorCodes, "ERROR_OPERATION_ABORTED", {
		"value": 995}
);
Object.defineProperty($asm06.System.Net.UnsafeNclNativeMethods.ErrorCodes, "ERROR_IO_PENDING", {
		"value": 997}
);
Object.defineProperty($asm06.System.Net.UnsafeNclNativeMethods.ErrorCodes, "ERROR_NOT_FOUND", {
		"value": 1168}
);

$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSASocket = function (addressFamily, socketType, protocolType, protocolInfo, group, flags, /* ref */ lastError) {
	if (!$asm06.System.Net.UnsafeNclNativeMethods.IsWindows) {
		var innerSafeCloseSocket = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSASocketUnix(
			addressFamily, 
			socketType, 
			protocolType, 
			protocolInfo, 
			group, 
			flags
		);
		lastError.value = innerSafeCloseSocket.IsInvalid ? $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.GetLastUnixError() : System.Net.Sockets.SocketError.Success;
	} else {
		innerSafeCloseSocket = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSASocketWindows(
			addressFamily, 
			socketType, 
			protocolType, 
			protocolInfo, 
			group, 
			flags
		);
		lastError.value = innerSafeCloseSocket.IsInvalid ? System.Runtime.InteropServices.Marshal.GetLastWin32Error() : System.Net.Sockets.SocketError.Success;
	}
	return innerSafeCloseSocket;
};
$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSAStartup = function (wVersionRequested, /* ref */ lpWSAData) {
	if (!$asm06.System.Net.UnsafeNclNativeMethods.IsWindows) {
		return $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSAStartupUnix(wVersionRequested, /* ref */ lpWSAData);
	}
	return $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSAStartupWindows(wVersionRequested, /* ref */ lpWSAData);
};
$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.ioctlsocket = function (socketHandle, cmd, /* ref */ argp, /* ref */ lastError) {
	lastError.value = System.Net.Sockets.SocketError.Success;
	if (!$asm06.System.Net.UnsafeNclNativeMethods.IsWindows) {
		var socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.ioctlsocketUnix(socketHandle, cmd, /* ref */ argp);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.GetLastUnixError();
		}
	} else {
		socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.ioctlsocketWindows(socketHandle, cmd, /* ref */ argp);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = System.Runtime.InteropServices.Marshal.GetLastWin32Error();
		}
	}
	return socketError;
};
$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.gethostbyname = function (host, /* ref */ lastError) {
	var array = null;
	if (host !== null) {
		array = $asm06.System.Net.AlternativeMarshaller.StringToAnsi(host);
		if (array === null) {
			throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm06.System.SR.GetString$2("net_WebHeaderInvalidNonAsciiChars"), "host"]);
		}
	}
	lastError.value = System.Net.Sockets.SocketError.Success;
	if (!$asm06.System.Net.UnsafeNclNativeMethods.IsWindows) {
		var intPtr = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.gethostbynameUnix(array);
		if (System.IntPtr.op_Equality(intPtr, System.IntPtr.Zero)) {
			lastError.value = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.GetLastUnixError();
		}
	} else {
		intPtr = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.gethostbynameWindows(array);
		if (System.IntPtr.op_Equality(intPtr, System.IntPtr.Zero)) {
			lastError.value = System.Runtime.InteropServices.Marshal.GetLastWin32Error();
		}
	}
	return intPtr;
};
$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.gethostbyaddr = function (/* ref */ addr, len, type, /* ref */ lastError) {
	lastError.value = System.Net.Sockets.SocketError.Success;
	if (!$asm06.System.Net.UnsafeNclNativeMethods.IsWindows) {
		var intPtr = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.gethostbyaddrUnix(/* ref */ addr, len, type);
		if (System.IntPtr.op_Equality(intPtr, System.IntPtr.Zero)) {
			lastError.value = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.GetLastUnixError();
		}
	} else {
		intPtr = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.gethostbyaddrWindows(/* ref */ addr, len, type);
		if (System.IntPtr.op_Equality(intPtr, System.IntPtr.Zero)) {
			lastError.value = System.Runtime.InteropServices.Marshal.GetLastWin32Error();
		}
	}
	return intPtr;
};
$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.inet_addr = function (cp) {
	var array = null;
	if (cp !== null) {
		array = $asm06.System.Net.AlternativeMarshaller.StringToAnsi(cp);
		if (array === null) {
			throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm06.System.SR.GetString$2("net_WebHeaderInvalidNonAsciiChars"), "cp"]);
		}
	}
	if (!$asm06.System.Net.UnsafeNclNativeMethods.IsWindows) {
		return $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.inet_addrUnix(array);
	}
	return $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.inet_addrWindows(array);
};
$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.getpeername = function (socketHandle, socketAddress, /* ref */ socketAddressSize, /* ref */ lastError) {
	lastError.value = System.Net.Sockets.SocketError.Success;
	if (!$asm06.System.Net.UnsafeNclNativeMethods.IsWindows) {
		var socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.getpeernameUnix(socketHandle, socketAddress, /* ref */ socketAddressSize);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.GetLastUnixError();
		}
	} else {
		socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.getpeernameWindows(socketHandle, socketAddress, /* ref */ socketAddressSize);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = System.Runtime.InteropServices.Marshal.GetLastWin32Error();
		}
	}
	return socketError;
};
$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.getsockopt = function (socketHandle, optionLevel, optionName, /* ref */ optionValue, /* ref */ optionLength, /* ref */ lastError) {
	lastError.value = System.Net.Sockets.SocketError.Success;
	if (!$asm06.System.Net.UnsafeNclNativeMethods.IsWindows) {
		var socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.getsockoptUnix(
			socketHandle, 
			optionLevel, 
			optionName, 
			/* ref */ optionValue, 
			/* ref */ optionLength
		);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.GetLastUnixError();
		}
	} else {
		socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.getsockoptWindows(
			socketHandle, 
			optionLevel, 
			optionName, 
			/* ref */ optionValue, 
			/* ref */ optionLength
		);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = System.Runtime.InteropServices.Marshal.GetLastWin32Error();
		}
	}
	return socketError;
};
$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.setsockopt$0 = function (socketHandle, optionLevel, optionName, /* ref */ optionValue, optionLength, /* ref */ lastError) {
	lastError.value = System.Net.Sockets.SocketError.Success;
	if (!$asm06.System.Net.UnsafeNclNativeMethods.IsWindows) {
		var socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.setsockoptUnix$0(
			socketHandle, 
			optionLevel, 
			optionName, 
			/* ref */ optionValue, 
			optionLength
		);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.GetLastUnixError();
		}
	} else {
		socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.setsockoptWindows$0(
			socketHandle, 
			optionLevel, 
			optionName, 
			/* ref */ optionValue, 
			optionLength
		);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = System.Runtime.InteropServices.Marshal.GetLastWin32Error();
		}
	}
	return socketError;
};
$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.setsockopt$1 = function (socketHandle, optionLevel, optionName, optionValue, optionLength, /* ref */ lastError) {
	lastError.value = System.Net.Sockets.SocketError.Success;
	if (!$asm06.System.Net.UnsafeNclNativeMethods.IsWindows) {
		var socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.setsockoptUnix$1(
			socketHandle, 
			optionLevel, 
			optionName, 
			optionValue, 
			optionLength
		);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.GetLastUnixError();
		}
	} else {
		socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.setsockoptWindows$1(
			socketHandle, 
			optionLevel, 
			optionName, 
			optionValue, 
			optionLength
		);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = System.Runtime.InteropServices.Marshal.GetLastWin32Error();
		}
	}
	return socketError;
};
$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.setsockopt$2 = function (socketHandle, optionLevel, optionName, /* ref */ mreq, optionLength, /* ref */ lastError) {
	lastError.value = System.Net.Sockets.SocketError.Success;
	if (!$asm06.System.Net.UnsafeNclNativeMethods.IsWindows) {
		var socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.setsockoptUnix$2(
			socketHandle, 
			optionLevel, 
			optionName, 
			/* ref */ mreq, 
			optionLength
		);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.GetLastUnixError();
		}
	} else {
		socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.setsockoptWindows$2(
			socketHandle, 
			optionLevel, 
			optionName, 
			/* ref */ mreq, 
			optionLength
		);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = System.Runtime.InteropServices.Marshal.GetLastWin32Error();
		}
	}
	return socketError;
};
$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.setsockopt$3 = function (socketHandle, optionLevel, optionName, /* ref */ mreq, optionLength, /* ref */ lastError) {
	lastError.value = System.Net.Sockets.SocketError.Success;
	if (!$asm06.System.Net.UnsafeNclNativeMethods.IsWindows) {
		var socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.setsockoptUnix$3(
			socketHandle, 
			optionLevel, 
			optionName, 
			/* ref */ mreq, 
			optionLength
		);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.GetLastUnixError();
		}
	} else {
		socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.setsockoptWindows$3(
			socketHandle, 
			optionLevel, 
			optionName, 
			/* ref */ mreq, 
			optionLength
		);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = System.Runtime.InteropServices.Marshal.GetLastWin32Error();
		}
	}
	return socketError;
};
$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.setsockopt$4 = function (socketHandle, optionLevel, optionName, /* ref */ mreq, optionLength, /* ref */ lastError) {
	lastError.value = System.Net.Sockets.SocketError.Success;
	if (!$asm06.System.Net.UnsafeNclNativeMethods.IsWindows) {
		var socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.setsockoptUnix$4(
			socketHandle, 
			optionLevel, 
			optionName, 
			/* ref */ mreq, 
			optionLength
		);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.GetLastUnixError();
		}
	} else {
		socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.setsockoptWindows$4(
			socketHandle, 
			optionLevel, 
			optionName, 
			/* ref */ mreq, 
			optionLength
		);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = System.Runtime.InteropServices.Marshal.GetLastWin32Error();
		}
	}
	return socketError;
};
$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.setsockopt$5 = function (socketHandle, optionLevel, optionName, /* ref */ mreq, optionLength, /* ref */ lastError) {
	lastError.value = System.Net.Sockets.SocketError.Success;
	if (!$asm06.System.Net.UnsafeNclNativeMethods.IsWindows) {
		var socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.setsockoptUnix$5(
			socketHandle, 
			optionLevel, 
			optionName, 
			/* ref */ mreq, 
			optionLength
		);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.GetLastUnixError();
		}
	} else {
		socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.setsockoptWindows$5(
			socketHandle, 
			optionLevel, 
			optionName, 
			/* ref */ mreq, 
			optionLength
		);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = System.Runtime.InteropServices.Marshal.GetLastWin32Error();
		}
	}
	return socketError;
};
$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.bind = function (socketHandle, socketAddress, socketAddressSize, /* ref */ lastError) {
	lastError.value = System.Net.Sockets.SocketError.Success;
	if (!$asm06.System.Net.UnsafeNclNativeMethods.IsWindows) {
		var socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.bindUnix(socketHandle, socketAddress, socketAddressSize);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.GetLastUnixError();
		}
	} else {
		socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.bindWindows(socketHandle, socketAddress, socketAddressSize);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = System.Runtime.InteropServices.Marshal.GetLastWin32Error();
		}
	}
	return socketError;
};
$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.shutdown = function (socketHandle, how, /* ref */ lastError) {
	lastError.value = System.Net.Sockets.SocketError.Success;
	if (!$asm06.System.Net.UnsafeNclNativeMethods.IsWindows) {
		var socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.shutdownUnix(socketHandle, how);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.GetLastUnixError();
		}
	} else {
		socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.shutdownWindows(socketHandle, how);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = System.Runtime.InteropServices.Marshal.GetLastWin32Error();
		}
	}
	return socketError;
};
$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSAConnect = function (socketHandle, socketAddress, socketAddressSize, inBuffer, outBuffer, sQOS, gQOS, /* ref */ lastError) {
	lastError.value = System.Net.Sockets.SocketError.Success;
	if (!$asm06.System.Net.UnsafeNclNativeMethods.IsWindows) {
		var socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSAConnectUnix(
			socketHandle, 
			socketAddress, 
			socketAddressSize, 
			inBuffer, 
			outBuffer, 
			sQOS, 
			gQOS
		);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.GetLastUnixError();
		}
	} else {
		socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSAConnectWindows(
			socketHandle, 
			socketAddress, 
			socketAddressSize, 
			inBuffer, 
			outBuffer, 
			sQOS, 
			gQOS
		);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = System.Runtime.InteropServices.Marshal.GetLastWin32Error();
		}
	}
	return socketError;
};
$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSASend$0 = function (socketHandle, /* ref */ buffer, bufferCount, /* ref */ bytesTransferred, socketFlags, overlapped, completionRoutine, /* ref */ lastError) {
	lastError.value = System.Net.Sockets.SocketError.Success;
	if (!$asm06.System.Net.UnsafeNclNativeMethods.IsWindows) {
		var socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSASendUnix$0(
			socketHandle, 
			/* ref */ buffer, 
			bufferCount, 
			/* ref */ bytesTransferred, 
			socketFlags, 
			overlapped, 
			completionRoutine
		);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.GetLastUnixError();
		}
	} else {
		socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSASendWindows$0(
			socketHandle, 
			/* ref */ buffer, 
			bufferCount, 
			/* ref */ bytesTransferred, 
			socketFlags, 
			overlapped, 
			completionRoutine
		);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = System.Runtime.InteropServices.Marshal.GetLastWin32Error();
		}
	}
	return socketError;
};
$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSASend$1 = function (socketHandle, buffersArray, bufferCount, /* ref */ bytesTransferred, socketFlags, overlapped, completionRoutine, /* ref */ lastError) {
	lastError.value = System.Net.Sockets.SocketError.Success;
	if (!$asm06.System.Net.UnsafeNclNativeMethods.IsWindows) {
		var socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSASendUnix$1(
			socketHandle, 
			buffersArray, 
			bufferCount, 
			/* ref */ bytesTransferred, 
			socketFlags, 
			overlapped, 
			completionRoutine
		);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.GetLastUnixError();
		}
	} else {
		socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSASendWindows$1(
			socketHandle, 
			buffersArray, 
			bufferCount, 
			/* ref */ bytesTransferred, 
			socketFlags, 
			overlapped, 
			completionRoutine
		);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = System.Runtime.InteropServices.Marshal.GetLastWin32Error();
		}
	}
	return socketError;
};
$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSASendTo = function (socketHandle, /* ref */ buffer, bufferCount, /* ref */ bytesTransferred, socketFlags, socketAddress, socketAddressSize, overlapped, completionRoutine, /* ref */ lastError) {
	lastError.value = System.Net.Sockets.SocketError.Success;
	if (!$asm06.System.Net.UnsafeNclNativeMethods.IsWindows) {
		var socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSASendToUnix(
			socketHandle, 
			/* ref */ buffer, 
			bufferCount, 
			/* ref */ bytesTransferred, 
			socketFlags, 
			socketAddress, 
			socketAddressSize, 
			overlapped, 
			completionRoutine
		);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.GetLastUnixError();
		}
	} else {
		socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSASendToWindows(
			socketHandle, 
			/* ref */ buffer, 
			bufferCount, 
			/* ref */ bytesTransferred, 
			socketFlags, 
			socketAddress, 
			socketAddressSize, 
			overlapped, 
			completionRoutine
		);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = System.Runtime.InteropServices.Marshal.GetLastWin32Error();
		}
	}
	return socketError;
};
$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSARecv$0 = function (socketHandle, /* ref */ buffer, bufferCount, /* ref */ bytesTransferred, /* ref */ socketFlags, overlapped, completionRoutine, /* ref */ lastError) {
	lastError.value = System.Net.Sockets.SocketError.Success;
	if (!$asm06.System.Net.UnsafeNclNativeMethods.IsWindows) {
		var socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSARecvUnix$0(
			socketHandle, 
			/* ref */ buffer, 
			bufferCount, 
			/* ref */ bytesTransferred, 
			/* ref */ socketFlags, 
			overlapped, 
			completionRoutine
		);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.GetLastUnixError();
		}
	} else {
		socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSARecvWindows$0(
			socketHandle, 
			/* ref */ buffer, 
			bufferCount, 
			/* ref */ bytesTransferred, 
			/* ref */ socketFlags, 
			overlapped, 
			completionRoutine
		);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = System.Runtime.InteropServices.Marshal.GetLastWin32Error();
		}
	}
	return socketError;
};
$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSARecv$1 = function (socketHandle, buffers, bufferCount, /* ref */ bytesTransferred, /* ref */ socketFlags, overlapped, completionRoutine, /* ref */ lastError) {
	lastError.value = System.Net.Sockets.SocketError.Success;
	if (!$asm06.System.Net.UnsafeNclNativeMethods.IsWindows) {
		var socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSARecvUnix$1(
			socketHandle, 
			buffers, 
			bufferCount, 
			/* ref */ bytesTransferred, 
			/* ref */ socketFlags, 
			overlapped, 
			completionRoutine
		);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.GetLastUnixError();
		}
	} else {
		socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSARecvWindows$1(
			socketHandle, 
			buffers, 
			bufferCount, 
			/* ref */ bytesTransferred, 
			/* ref */ socketFlags, 
			overlapped, 
			completionRoutine
		);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = System.Runtime.InteropServices.Marshal.GetLastWin32Error();
		}
	}
	return socketError;
};
$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSARecvMsg = function (socketHandle, msg, /* ref */ bytesTransferred, overlapped, completionRoutine, functionPointer, /* ref */ lastError) {
	lastError.value = System.Net.Sockets.SocketError.Success;
	if (!$asm06.System.Net.UnsafeNclNativeMethods.IsWindows) {
		var socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSARecvMsgUnix(
			socketHandle, 
			msg, 
			/* ref */ bytesTransferred, 
			overlapped, 
			completionRoutine
		);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.GetLastUnixError();
		}
	} else {
		socketError = functionPointer(
			socketHandle, 
			msg, 
			/* ref */ bytesTransferred, 
			overlapped, 
			completionRoutine
		);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = System.Runtime.InteropServices.Marshal.GetLastWin32Error();
		}
	}
	return socketError;
};
$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSAEventSelect = function (socketHandle, Event, NetworkEvents, /* ref */ lastError) {
	lastError.value = System.Net.Sockets.SocketError.Success;
	if (!$asm06.System.Net.UnsafeNclNativeMethods.IsWindows) {
		var socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSAEventSelectUnix(socketHandle, Event, NetworkEvents);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.GetLastUnixError();
		}
	} else {
		socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSAEventSelectWindows(socketHandle, Event, NetworkEvents);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = System.Runtime.InteropServices.Marshal.GetLastWin32Error();
		}
	}
	return socketError;
};
$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSAIoctl = function (socketHandle, ioControlCode, /* ref */ guid, guidSize, /* ref */ funcPtr, funcPtrSize, /* ref */ bytesTransferred, shouldBeNull, shouldBeNull2, /* ref */ lastError) {
	lastError.value = System.Net.Sockets.SocketError.Success;
	if (!$asm06.System.Net.UnsafeNclNativeMethods.IsWindows) {
		var socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSAIoctlUnix(
			socketHandle, 
			ioControlCode, 
			/* ref */ guid, 
			guidSize, 
			/* ref */ funcPtr, 
			funcPtrSize, 
			/* ref */ bytesTransferred, 
			shouldBeNull, 
			shouldBeNull2
		);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.GetLastUnixError();
		}
	} else {
		socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSAIoctlWindows(
			socketHandle, 
			ioControlCode, 
			/* ref */ guid, 
			guidSize, 
			/* ref */ funcPtr, 
			funcPtrSize, 
			/* ref */ bytesTransferred, 
			shouldBeNull, 
			shouldBeNull2
		);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = System.Runtime.InteropServices.Marshal.GetLastWin32Error();
		}
	}
	return socketError;
};
$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSAEnumNetworkEvents = function (socketHandle, Event, /* ref */ networkEvents, /* ref */ lastError) {
	lastError.value = System.Net.Sockets.SocketError.Success;
	if (!$asm06.System.Net.UnsafeNclNativeMethods.IsWindows) {
		var socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSAEnumNetworkEventsUnix(socketHandle, Event, /* ref */ networkEvents);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.GetLastUnixError();
		}
	} else {
		socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSAEnumNetworkEventsWindows(socketHandle, Event, /* ref */ networkEvents);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = System.Runtime.InteropServices.Marshal.GetLastWin32Error();
		}
	}
	return socketError;
};
$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSAGetOverlappedResult = function (socketHandle, overlapped, /* ref */ bytesTransferred, wait, /* ref */ ignored, /* ref */ lastError) {
	lastError.value = System.Net.Sockets.SocketError.Success;
	if (!$asm06.System.Net.UnsafeNclNativeMethods.IsWindows) {
		var flag = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSAGetOverlappedResultUnix(
			socketHandle, 
			overlapped, 
			/* ref */ bytesTransferred, 
			wait, 
			/* ref */ ignored
		);
		if (!flag) {
			lastError.value = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.GetLastUnixError();
		}
	} else {
		flag = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSAGetOverlappedResultWindows(
			socketHandle, 
			overlapped, 
			/* ref */ bytesTransferred, 
			wait, 
			/* ref */ ignored
		);
		if (!flag) {
			lastError.value = System.Runtime.InteropServices.Marshal.GetLastWin32Error();
		}
	}
	return flag;
};
$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSAStringToAddress = function (addressString, addressFamily, lpProtocolInfo, socketAddress, /* ref */ socketAddressSize, /* ref */ lastError) {
	lastError.value = System.Net.Sockets.SocketError.Success;
	if (!$asm06.System.Net.UnsafeNclNativeMethods.IsWindows) {
		var socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSAStringToAddressUnix(
			addressString, 
			addressFamily, 
			lpProtocolInfo, 
			socketAddress, 
			/* ref */ socketAddressSize
		);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.GetLastUnixError();
		}
	} else {
		socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSAStringToAddressWindows(
			addressString, 
			addressFamily, 
			lpProtocolInfo, 
			socketAddress, 
			/* ref */ socketAddressSize
		);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = System.Runtime.InteropServices.Marshal.GetLastWin32Error();
		}
	}
	return socketError;
};
$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSAAddressToString = function (socketAddress, socketAddressSize, lpProtocolInfo, addressString, /* ref */ addressStringLength, /* ref */ lastError) {
	lastError.value = System.Net.Sockets.SocketError.Success;
	if (!$asm06.System.Net.UnsafeNclNativeMethods.IsWindows) {
		var socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSAAddressToStringUnix(
			socketAddress, 
			socketAddressSize, 
			lpProtocolInfo, 
			addressString, 
			/* ref */ addressStringLength
		);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.GetLastUnixError();
		}
	} else {
		socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSAAddressToStringWindows(
			socketAddress, 
			socketAddressSize, 
			lpProtocolInfo, 
			addressString, 
			/* ref */ addressStringLength
		);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = System.Runtime.InteropServices.Marshal.GetLastWin32Error();
		}
	}
	return socketError;
};
$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.getnameinfo = function (sa, salen, host, hostlen, serv, servlen, flags, /* ref */ lastError) {
	var array = null;
	var array2 = null;
	if (host !== null) {
		array = JSIL.Array.New(System.Byte, (hostlen + 1));
	}
	if (serv !== null) {
		array2 = JSIL.Array.New(System.Byte, (servlen + 1));
	}
	var socketError = System.Net.Sockets.SocketError.Success;
	lastError.value = System.Net.Sockets.SocketError.Success;
	if ($asm06.System.Net.UnsafeNclNativeMethods.IsWindows) {
		socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.getnameinfoWindows(
			sa, 
			salen, 
			array, 
			hostlen, 
			array2, 
			servlen, 
			flags
		);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = System.Runtime.InteropServices.Marshal.GetLastWin32Error();
		}
	} else {
		socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.getnameinfoUnix(
			sa, 
			salen, 
			array, 
			hostlen, 
			array2, 
			servlen, 
			flags
		);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.GetLastUnixError();
		}
	}
	if (!JSIL.Cast(socketError, System.Boolean)) {
		if (host !== null) {
			var value = $asm06.System.Net.AlternativeMarshaller.PtrToStringAnsiOrUtf8$0(array);
			host.Append$2(value);
		}
		if (serv !== null) {
			var value2 = $asm06.System.Net.AlternativeMarshaller.PtrToStringAnsiOrUtf8$0(array2);
			serv.Append$2(value2);
		}
	}
	return socketError;
};
JSIL.OverloadedMethod($asm06.System.Net.UnsafeNclNativeMethods.OSSOCK, "setsockopt", [
		["setsockopt$0", [$asm06.System.Net.SafeCloseSocket, $asm06.System.Net.Sockets.SocketOptionLevel, $asm06.System.Net.Sockets.SocketOptionName, JSIL.Reference.Of(System.Int32), System.Int32, JSIL.Reference.Of(System.Net.Sockets.SocketError)]], 
		["setsockopt$1", [$asm06.System.Net.SafeCloseSocket, $asm06.System.Net.Sockets.SocketOptionLevel, $asm06.System.Net.Sockets.SocketOptionName, System.Array.Of(System.Byte), System.Int32, JSIL.Reference.Of(System.Net.Sockets.SocketError)]], 
		["setsockopt$2", [$asm06.System.Net.SafeCloseSocket, $asm06.System.Net.Sockets.SocketOptionLevel, $asm06.System.Net.Sockets.SocketOptionName, JSIL.Reference.Of($asm06.System.Net.IPMulticastRequest), System.Int32, JSIL.Reference.Of(System.Net.Sockets.SocketError)]], 
		["setsockopt$3", [$asm06.System.Net.SafeCloseSocket, $asm06.System.Net.Sockets.SocketOptionLevel, $asm06.System.Net.Sockets.SocketOptionName, JSIL.Reference.Of($asm06.System.Net.IPv6MulticastRequest), System.Int32, JSIL.Reference.Of(System.Net.Sockets.SocketError)]], 
		["setsockopt$4", [$asm06.System.Net.SafeCloseSocket, $asm06.System.Net.Sockets.SocketOptionLevel, $asm06.System.Net.Sockets.SocketOptionName, JSIL.Reference.Of($asm06.System.Net.IPMulticastRequestSource), System.Int32, JSIL.Reference.Of(System.Net.Sockets.SocketError)]], 
		["setsockopt$5", [$asm06.System.Net.SafeCloseSocket, $asm06.System.Net.Sockets.SocketOptionLevel, $asm06.System.Net.Sockets.SocketOptionName, JSIL.Reference.Of($asm06.System.Net.GroupSourceRequest), System.Int32, JSIL.Reference.Of(System.Net.Sockets.SocketError)]]
	]);
JSIL.OverloadedMethod($asm06.System.Net.UnsafeNclNativeMethods.OSSOCK, "setsockoptWindows", [
		["setsockoptWindows$0", [$asm06.System.Net.SafeCloseSocket, $asm06.System.Net.Sockets.SocketOptionLevel, $asm06.System.Net.Sockets.SocketOptionName, JSIL.Reference.Of(System.Int32), System.Int32]], 
		["setsockoptWindows$1", [$asm06.System.Net.SafeCloseSocket, $asm06.System.Net.Sockets.SocketOptionLevel, $asm06.System.Net.Sockets.SocketOptionName, System.Array.Of(System.Byte), System.Int32]], 
		["setsockoptWindows$2", [$asm06.System.Net.SafeCloseSocket, $asm06.System.Net.Sockets.SocketOptionLevel, $asm06.System.Net.Sockets.SocketOptionName, JSIL.Reference.Of($asm06.System.Net.IPMulticastRequest), System.Int32]], 
		["setsockoptWindows$3", [$asm06.System.Net.SafeCloseSocket, $asm06.System.Net.Sockets.SocketOptionLevel, $asm06.System.Net.Sockets.SocketOptionName, JSIL.Reference.Of($asm06.System.Net.IPv6MulticastRequest), System.Int32]], 
		["setsockoptWindows$4", [$asm06.System.Net.SafeCloseSocket, $asm06.System.Net.Sockets.SocketOptionLevel, $asm06.System.Net.Sockets.SocketOptionName, JSIL.Reference.Of($asm06.System.Net.IPMulticastRequestSource), System.Int32]], 
		["setsockoptWindows$5", [$asm06.System.Net.SafeCloseSocket, $asm06.System.Net.Sockets.SocketOptionLevel, $asm06.System.Net.Sockets.SocketOptionName, JSIL.Reference.Of($asm06.System.Net.GroupSourceRequest), System.Int32]]
	]);
JSIL.OverloadedMethod($asm06.System.Net.UnsafeNclNativeMethods.OSSOCK, "setsockoptUnix", [
		["setsockoptUnix$0", [$asm06.System.Net.SafeCloseSocket, $asm06.System.Net.Sockets.SocketOptionLevel, $asm06.System.Net.Sockets.SocketOptionName, JSIL.Reference.Of(System.Int32), System.Int32]], 
		["setsockoptUnix$1", [$asm06.System.Net.SafeCloseSocket, $asm06.System.Net.Sockets.SocketOptionLevel, $asm06.System.Net.Sockets.SocketOptionName, System.Array.Of(System.Byte), System.Int32]], 
		["setsockoptUnix$2", [$asm06.System.Net.SafeCloseSocket, $asm06.System.Net.Sockets.SocketOptionLevel, $asm06.System.Net.Sockets.SocketOptionName, JSIL.Reference.Of($asm06.System.Net.IPMulticastRequest), System.Int32]], 
		["setsockoptUnix$3", [$asm06.System.Net.SafeCloseSocket, $asm06.System.Net.Sockets.SocketOptionLevel, $asm06.System.Net.Sockets.SocketOptionName, JSIL.Reference.Of($asm06.System.Net.IPv6MulticastRequest), System.Int32]], 
		["setsockoptUnix$4", [$asm06.System.Net.SafeCloseSocket, $asm06.System.Net.Sockets.SocketOptionLevel, $asm06.System.Net.Sockets.SocketOptionName, JSIL.Reference.Of($asm06.System.Net.IPMulticastRequestSource), System.Int32]], 
		["setsockoptUnix$5", [$asm06.System.Net.SafeCloseSocket, $asm06.System.Net.Sockets.SocketOptionLevel, $asm06.System.Net.Sockets.SocketOptionName, JSIL.Reference.Of($asm06.System.Net.GroupSourceRequest), System.Int32]]
	]);
JSIL.OverloadedMethod($asm06.System.Net.UnsafeNclNativeMethods.OSSOCK, "WSASend", [
		["WSASend$0", [$asm06.System.Net.SafeCloseSocket, JSIL.Reference.Of($asm06.System.Net.WSABuffer), System.Int32, JSIL.Reference.Of(System.Int32), $asm06.System.Net.Sockets.SocketFlags, System.IntPtr, System.IntPtr, JSIL.Reference.Of(System.Net.Sockets.SocketError)]], 
		["WSASend$1", [$asm06.System.Net.SafeCloseSocket, System.Array.Of($asm06.System.Net.WSABuffer), System.Int32, JSIL.Reference.Of(System.Int32), $asm06.System.Net.Sockets.SocketFlags, System.IntPtr, System.IntPtr, JSIL.Reference.Of(System.Net.Sockets.SocketError)]]
	]);
JSIL.OverloadedMethod($asm06.System.Net.UnsafeNclNativeMethods.OSSOCK, "WSASendWindows", [
		["WSASendWindows$0", [$asm06.System.Net.SafeCloseSocket, JSIL.Reference.Of($asm06.System.Net.WSABuffer), System.Int32, JSIL.Reference.Of(System.Int32), $asm06.System.Net.Sockets.SocketFlags, System.IntPtr, System.IntPtr]], 
		["WSASendWindows$1", [$asm06.System.Net.SafeCloseSocket, System.Array.Of($asm06.System.Net.WSABuffer), System.Int32, JSIL.Reference.Of(System.Int32), $asm06.System.Net.Sockets.SocketFlags, System.IntPtr, System.IntPtr]]
	]);
JSIL.OverloadedMethod($asm06.System.Net.UnsafeNclNativeMethods.OSSOCK, "WSASendUnix", [
		["WSASendUnix$0", [$asm06.System.Net.SafeCloseSocket, JSIL.Reference.Of($asm06.System.Net.WSABuffer), System.Int32, JSIL.Reference.Of(System.Int32), $asm06.System.Net.Sockets.SocketFlags, System.IntPtr, System.IntPtr]], 
		["WSASendUnix$1", [$asm06.System.Net.SafeCloseSocket, System.Array.Of($asm06.System.Net.WSABuffer), System.Int32, JSIL.Reference.Of(System.Int32), $asm06.System.Net.Sockets.SocketFlags, System.IntPtr, System.IntPtr]]
	]);
JSIL.OverloadedMethod($asm06.System.Net.UnsafeNclNativeMethods.OSSOCK, "WSARecv", [
		["WSARecv$0", [$asm06.System.Net.SafeCloseSocket, JSIL.Reference.Of($asm06.System.Net.WSABuffer), System.Int32, JSIL.Reference.Of(System.Int32), JSIL.Reference.Of($asm06.System.Net.Sockets.SocketFlags), System.IntPtr, System.IntPtr, JSIL.Reference.Of(System.Net.Sockets.SocketError)]], 
		["WSARecv$1", [$asm06.System.Net.SafeCloseSocket, System.Array.Of($asm06.System.Net.WSABuffer), System.Int32, JSIL.Reference.Of(System.Int32), JSIL.Reference.Of($asm06.System.Net.Sockets.SocketFlags), System.IntPtr, System.IntPtr, JSIL.Reference.Of(System.Net.Sockets.SocketError)]]
	]);
JSIL.OverloadedMethod($asm06.System.Net.UnsafeNclNativeMethods.OSSOCK, "WSARecvWindows", [
		["WSARecvWindows$0", [$asm06.System.Net.SafeCloseSocket, JSIL.Reference.Of($asm06.System.Net.WSABuffer), System.Int32, JSIL.Reference.Of(System.Int32), JSIL.Reference.Of($asm06.System.Net.Sockets.SocketFlags), System.IntPtr, System.IntPtr]], 
		["WSARecvWindows$1", [$asm06.System.Net.SafeCloseSocket, System.Array.Of($asm06.System.Net.WSABuffer), System.Int32, JSIL.Reference.Of(System.Int32), JSIL.Reference.Of($asm06.System.Net.Sockets.SocketFlags), System.IntPtr, System.IntPtr]]
	]);
JSIL.OverloadedMethod($asm06.System.Net.UnsafeNclNativeMethods.OSSOCK, "WSARecvUnix", [
		["WSARecvUnix$0", [$asm06.System.Net.SafeCloseSocket, JSIL.Reference.Of($asm06.System.Net.WSABuffer), System.Int32, JSIL.Reference.Of(System.Int32), JSIL.Reference.Of($asm06.System.Net.Sockets.SocketFlags), System.IntPtr, System.IntPtr]], 
		["WSARecvUnix$1", [$asm06.System.Net.SafeCloseSocket, System.Array.Of($asm06.System.Net.WSABuffer), System.Int32, JSIL.Reference.Of(System.Int32), JSIL.Reference.Of($asm06.System.Net.Sockets.SocketFlags), System.IntPtr, System.IntPtr]]
	]);

$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.ControlData.prototype.length = 0;
$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.ControlData.prototype.level = 0;
$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.ControlData.prototype.type = 0;
$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.ControlData.prototype.address = 0;
$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.ControlData.prototype.index = 0;

$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.ControlDataIPv6.prototype.length = 0;
$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.ControlDataIPv6.prototype.level = 0;
$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.ControlDataIPv6.prototype.type = 0;
$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.ControlDataIPv6.prototype.address = null;
$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.ControlDataIPv6.prototype.index = 0;

$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSAMsg.prototype.socketAddress = 0;
$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSAMsg.prototype.addressLength = 0;
$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSAMsg.prototype.buffers = 0;
$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSAMsg.prototype.count = 0;
$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSAMsg.prototype.flags = 0;

$asm06.System.Net.UnsafeNclNativeMethods.SafeNetHandles.closesocket = function (socketHandle, /* ref */ lastError) {
	lastError.value = System.Net.Sockets.SocketError.Success;
	if (!$asm06.System.Net.UnsafeNclNativeMethods.IsWindows) {
		var socketError = $asm06.System.Net.UnsafeNclNativeMethods.SafeNetHandles.closesocketUnix(socketHandle);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.GetLastUnixError();
		}
	} else {
		socketError = $asm06.System.Net.UnsafeNclNativeMethods.SafeNetHandles.closesocketWindows(socketHandle);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = System.Runtime.InteropServices.Marshal.GetLastWin32Error();
		}
	}
	return socketError;
};
$asm06.System.Net.UnsafeNclNativeMethods.SafeNetHandles.ioctlsocket = function (handle, cmd, /* ref */ argp, /* ref */ lastError) {
	lastError.value = System.Net.Sockets.SocketError.Success;
	if (!$asm06.System.Net.UnsafeNclNativeMethods.IsWindows) {
		var socketError = $asm06.System.Net.UnsafeNclNativeMethods.SafeNetHandles.ioctlsocketUnix(handle, cmd, /* ref */ argp);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.GetLastUnixError();
		}
	} else {
		socketError = $asm06.System.Net.UnsafeNclNativeMethods.SafeNetHandles.ioctlsocketWindows(handle, cmd, /* ref */ argp);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = System.Runtime.InteropServices.Marshal.GetLastWin32Error();
		}
	}
	return socketError;
};
$asm06.System.Net.UnsafeNclNativeMethods.SafeNetHandles.WSAEventSelect = function (handle, Event, NetworkEvents, /* ref */ lastError) {
	lastError.value = System.Net.Sockets.SocketError.Success;
	if (!$asm06.System.Net.UnsafeNclNativeMethods.IsWindows) {
		var socketError = $asm06.System.Net.UnsafeNclNativeMethods.SafeNetHandles.WSAEventSelectUnix(handle, Event, NetworkEvents);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.GetLastUnixError();
		}
	} else {
		socketError = $asm06.System.Net.UnsafeNclNativeMethods.SafeNetHandles.WSAEventSelectWindows(handle, Event, NetworkEvents);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = System.Runtime.InteropServices.Marshal.GetLastWin32Error();
		}
	}
	return socketError;
};
$asm06.System.Net.UnsafeNclNativeMethods.SafeNetHandles.setsockopt = function (handle, optionLevel, optionName, /* ref */ linger, optionLength, /* ref */ lastError) {
	lastError.value = System.Net.Sockets.SocketError.Success;
	if (!$asm06.System.Net.UnsafeNclNativeMethods.IsWindows) {
		var socketError = $asm06.System.Net.UnsafeNclNativeMethods.SafeNetHandles.setsockoptUnix(
			handle, 
			optionLevel, 
			optionName, 
			/* ref */ linger, 
			optionLength
		);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.GetLastUnixError();
		}
	} else {
		socketError = $asm06.System.Net.UnsafeNclNativeMethods.SafeNetHandles.setsockoptWindows(
			handle, 
			optionLevel, 
			optionName, 
			/* ref */ linger, 
			optionLength
		);
		if (JSIL.Cast(socketError, System.Boolean)) {
			lastError.value = System.Runtime.InteropServices.Marshal.GetLastWin32Error();
		}
	}
	return socketError;
};

$asm06.System.Net.UnsafeNclNativeMethods.SafeNetHandlesXPOrLater.getaddrinfo = function (nodename, servicename, /* ref */ hints, /* ref */ handle, /* ref */ lastError) {
	var array = null;
	var array2 = null;
	if (nodename !== null) {
		array = $asm06.System.Net.AlternativeMarshaller.StringToAnsi(nodename);
		if (array === null) {
			throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm06.System.SR.GetString$2("net_WebHeaderInvalidNonAsciiChars"), "nodename"]);
		}
	}
	if (servicename !== null) {
		array2 = $asm06.System.Net.AlternativeMarshaller.StringToAnsi(servicename);
		if (array2 === null) {
			throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm06.System.SR.GetString$2("net_WebHeaderInvalidNonAsciiChars"), "servicename"]);
		}
	}
	lastError.value = System.Net.Sockets.SocketError.Success;
	if (!$asm06.System.Net.UnsafeNclNativeMethods.IsWindows) {
		var num = $asm06.System.Net.UnsafeNclNativeMethods.SafeNetHandlesXPOrLater.getaddrinfoUnix(array, array2, /* ref */ hints, /* ref */ handle);
		if (num !== 0) {
			lastError.value = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.GetLastUnixError();
		}
	} else {
		num = $asm06.System.Net.UnsafeNclNativeMethods.SafeNetHandlesXPOrLater.getaddrinfoWindows(array, array2, /* ref */ hints, /* ref */ handle);
		if (num !== 0) {
			lastError.value = System.Runtime.InteropServices.Marshal.GetLastWin32Error();
		}
	}
	return num;
};
$asm06.System.Net.UnsafeNclNativeMethods.SafeNetHandlesXPOrLater.freeaddrinfo = function (info) {
	if (!$asm06.System.Net.UnsafeNclNativeMethods.IsWindows) {
		$asm06.System.Net.UnsafeNclNativeMethods.SafeNetHandlesXPOrLater.freeaddrinfoUnix(info);
		return;
	}
	$asm06.System.Net.UnsafeNclNativeMethods.SafeNetHandlesXPOrLater.freeaddrinfoWindows(info);
};

$asm06.System.Net.SafeNativeMethods.FormatMessage = function (dwFlags, lpSource, dwMessageId, dwLanguageId, lpBuffer, nSize, arguments) {
	if (!$asm06.System.Net.UnsafeNclNativeMethods.IsWindows) {
		return $asm06.System.Net.SafeNativeMethods.FormatMessageUnix(
			dwFlags, 
			lpSource, 
			dwMessageId, 
			dwLanguageId, 
			lpBuffer, 
			nSize, 
			arguments
		);
	}
	return $asm06.System.Net.SafeNativeMethods.FormatMessageWindows(
		dwFlags, 
		lpSource, 
		dwMessageId, 
		dwLanguageId, 
		lpBuffer, 
		nSize, 
		arguments
	);
};
Object.defineProperty($asm06.System.Net.SafeNativeMethods, "FORMAT_MESSAGE_ALLOCATE_BUFFER", {
		"value": 256}
);
Object.defineProperty($asm06.System.Net.SafeNativeMethods, "FORMAT_MESSAGE_IGNORE_INSERTS", {
		"value": 512}
);
Object.defineProperty($asm06.System.Net.SafeNativeMethods, "FORMAT_MESSAGE_FROM_STRING", {
		"value": 1024}
);
Object.defineProperty($asm06.System.Net.SafeNativeMethods, "FORMAT_MESSAGE_FROM_SYSTEM", {
		"value": 4096}
);
Object.defineProperty($asm06.System.Net.SafeNativeMethods, "FORMAT_MESSAGE_ARGUMENT_ARRAY", {
		"value": 8192}
);

$asm06.System.Net.AlternativeMarshaller.StringToAnsi = function (str) {
	var flag = new JSIL.Variable(false);
	if (str === null) {
		return null;
	}
	var array = null;
	if ($asm06.System.Net.UnsafeNclNativeMethods.IsWindows) {
		array = JSIL.Array.New(System.Byte, (str.length + 1));
		var array2 = str.ToCharArray();
		var num = $asm06.Microsoft.Win32.NetExtras.WideCharToMultiByte(
			0, 
			1024, 
			array2, 
			array2.length, 
			array, 
			array.length, 
			System.IntPtr.Zero, 
			/* ref */ flag
		);
		if (!((num !== 0) && !flag.value)) {
			return null;
		}
	} else {
		array = System.Text.Encoding.UTF8.GetBytes$3(str);
	}
	return array;
};
$asm06.System.Net.AlternativeMarshaller.PtrToStringAnsiOrUtf8$0 = JSIL.UntranslatableFunction("System.String System.Net.AlternativeMarshaller::PtrToStringAnsiOrUtf8(System.Byte[])");
$asm06.System.Net.AlternativeMarshaller.PtrToStringAnsiOrUtf8$1 = function (ptr) {
	if (System.IntPtr.op_Equality(ptr, System.IntPtr.Zero)) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["ptr"]);
	}
	var array = JSIL.Array.New(System.Char, 1);
	var array2 = array;
	var codePage = 0;
	var i = 0;
	var cchMultiByte = $asm06.Microsoft.Win32.NetExtras.lstrlenA(ptr);
__loop0__: 
	while (i < 2) {
		var num = $asm06.Microsoft.Win32.NetExtras.MultiByteToWideChar(
			codePage, 
			9, 
			ptr, 
			cchMultiByte, 
			array2, 
			0
		);
		if (num > 0) {
			array2 = JSIL.Array.New(System.Char, num);
			num = $asm06.Microsoft.Win32.NetExtras.MultiByteToWideChar(
				codePage, 
				9, 
				ptr, 
				cchMultiByte, 
				array2, 
				num
			);
			if (num > 0) {
				break __loop0__;
			}
		}
		if (num === 0) {
			var lastWin32Error = System.Runtime.InteropServices.Marshal.GetLastWin32Error();
			if (lastWin32Error !== 1113) {
				break __loop0__;
			}
			++i;
			codePage = 65001;
		}
	}
	return JSIL.New(System.String, "_ctor$1", [array2]);
};
$asm06.System.Net.AlternativeMarshaller.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
JSIL.OverloadedMethod($asm06.System.Net.AlternativeMarshaller, "PtrToStringAnsiOrUtf8", [
		["PtrToStringAnsiOrUtf8$0", [System.Array.Of(System.Byte)]], 
		["PtrToStringAnsiOrUtf8$1", [System.IntPtr]]
	]);

Object.defineProperty($asm06.Microsoft.Win32.NetExtras, "CP_ACP", {
		"value": 0}
);
Object.defineProperty($asm06.Microsoft.Win32.NetExtras, "CP_UTF8", {
		"value": 65001}
);
Object.defineProperty($asm06.Microsoft.Win32.NetExtras, "ERROR_NO_UNICODE_TRANSLATION", {
		"value": 1113}
);
Object.defineProperty($asm06.Microsoft.Win32.NetExtras, "MB_PRECOMPOSED", {
		"value": 1}
);
Object.defineProperty($asm06.Microsoft.Win32.NetExtras, "MB_ERR_INVALID_CHARS", {
		"value": 8}
);
Object.defineProperty($asm06.Microsoft.Win32.NetExtras, "WC_NO_BEST_FIT_CHARS", {
		"value": 1024}
);

System.Net.Sockets.Socket.prototype.ReceiveFromAsync = function (e) {
	return true;
};
System.Net.Sockets.Socket.prototype.SendToAsync = function (e) {
	return true;
};
System.Net.Sockets.Socket.prototype._ctor = function (addressFamily, socketType, protocolType) {
	this.m_CloseTimeout = -1;
	System.Object.prototype._ctor.call(this);
	if (System.Net.Sockets.Socket.s_LoggingEnabled) {
		$asm06.System.Net.Logging.Enter$1($asm06.System.Net.Logging.Sockets, this, "Socket", addressFamily);
	}
	if (!((addressFamily === System.Net.Sockets.AddressFamily.InterNetwork) || 
			(addressFamily === System.Net.Sockets.AddressFamily.InterNetworkV6) || (addressFamily === System.Net.Sockets.AddressFamily.Unknown))) {
		throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm06.System.SR.GetString$2("net_sockets_invalid_optionValue_all"), "addressFamily"]);
	}
	if (!((socketType === System.Net.Sockets.SocketType.Stream) || (socketType === System.Net.Sockets.SocketType.Unknown))) {
		throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm06.System.SR.GetString$2("net_sockets_invalid_optionValue_all"), "socketType"]);
	}
	if (!((protocolType === System.Net.Sockets.ProtocolType.Tcp) || 
			!JSIL.Cast(protocolType, System.Boolean) || (protocolType === System.Net.Sockets.ProtocolType.Unknown))) {
		throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm06.System.SR.GetString$2("net_sockets_invalid_optionValue_all"), "protocolType"]);
	}
	System.Net.Sockets.Socket.InitializeSockets();
	var socketError = new JSIL.Variable(System.Net.Sockets.SocketError.Success);
	this.m_Handle = $asm06.System.Net.SafeCloseSocket.CreateWSASocket(addressFamily, socketType, protocolType, /* ref */ socketError);
	if (this.m_Handle.IsInvalid) {
		throw JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [socketError.value]);
	}
	this.addressFamily = addressFamily;
	this.socketType = socketType;
	this.protocolType = protocolType;
	if (System.Net.Sockets.Socket.s_LoggingEnabled) {
		$asm06.System.Net.Logging.Exit$2($asm06.System.Net.Logging.Sockets, this, "Socket", null);
	}
};
System.Net.Sockets.Socket.get_OSSupportsIPv4 = function () {
	System.Net.Sockets.Socket.InitializeSockets();
	return System.Net.Sockets.Socket.s_SupportsIPv4;
};
System.Net.Sockets.Socket.get_OSSupportsIPv6 = function () {
	System.Net.Sockets.Socket.InitializeSockets();
	return System.Net.Sockets.Socket.s_OSSupportsIPv6;
};
System.Net.Sockets.Socket.prototype.get_RemoteEndPoint = function () {
	if (this.CleanedUp) {
		throw JSIL.New(System.ObjectDisposedException, "_ctor$1", [JSIL.GetType(this).FullName]);
	}
	if (this.m_RemoteEndPoint === null) {
		if (this.m_RightEndPoint === null) {
			return null;
		}
		var socketAddress = this.m_RightEndPoint.Serialize();
		var socketError = new JSIL.Variable(System.Net.Sockets.SocketError.Success);
		var socketError2 = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.getpeername(this.m_Handle, socketAddress.m_Buffer, /* ref */ new JSIL.MemberReference(socketAddress, "m_Size"), /* ref */ socketError);
		if (JSIL.Cast(socketError2, System.Boolean)) {
			var socketException = JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [socketError.value]);
			this.UpdateStatusAfterSocketError$0(socketException);
			if (System.Net.Sockets.Socket.s_LoggingEnabled) {
				$asm06.System.Net.Logging.Exception($asm06.System.Net.Logging.Sockets, this, "RemoteEndPoint", socketException);
			}
			throw socketException;
		}
		try {
			this.m_RemoteEndPoint = this.m_RightEndPoint.Create(socketAddress);
		} catch ($exception) {
			if (JSIL.CheckType($exception, System.ArgumentException)) {
			} else if (JSIL.CheckType($exception, System.IndexOutOfRangeException)) {
			} else {
				throw $exception;
			}
		}
	}
	return this.m_RemoteEndPoint;
};
System.Net.Sockets.Socket.prototype.get_SafeHandle = function () {
	return this.m_Handle;
};
System.Net.Sockets.Socket.prototype.get_Connected = function () {
	return this.m_IsConnected;
};
System.Net.Sockets.Socket.prototype.get_AddressFamily = function () {
	return this.addressFamily;
};
System.Net.Sockets.Socket.prototype.get_ProtocolType = function () {
	return this.protocolType;
};
System.Net.Sockets.Socket.prototype.get_ReceiveBufferSize = function () {
	return JSIL.Cast(this.GetSocketOption($asm06.System.Net.Sockets.SocketOptionLevel.Socket, $asm06.System.Net.Sockets.SocketOptionName.ReceiveBuffer), System.Int32);
};
System.Net.Sockets.Socket.prototype.set_ReceiveBufferSize = function (value) {
	if (value < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["value"]);
	}
	this.SetSocketOption$0($asm06.System.Net.Sockets.SocketOptionLevel.Socket, $asm06.System.Net.Sockets.SocketOptionName.ReceiveBuffer, value);
};
System.Net.Sockets.Socket.prototype.get_SendBufferSize = function () {
	return JSIL.Cast(this.GetSocketOption($asm06.System.Net.Sockets.SocketOptionLevel.Socket, $asm06.System.Net.Sockets.SocketOptionName.SendBuffer), System.Int32);
};
System.Net.Sockets.Socket.prototype.set_SendBufferSize = function (value) {
	if (value < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["value"]);
	}
	this.SetSocketOption$0($asm06.System.Net.Sockets.SocketOptionLevel.Socket, $asm06.System.Net.Sockets.SocketOptionName.SendBuffer, value);
};
System.Net.Sockets.Socket.prototype.get_NoDelay = function () {
	return JSIL.Cast(this.GetSocketOption($asm06.System.Net.Sockets.SocketOptionLevel.Tcp, $asm06.System.Net.Sockets.SocketOptionName.NoDelay), System.Int32);
};
System.Net.Sockets.Socket.prototype.set_NoDelay = function (value) {
	this.SetSocketOption$0($asm06.System.Net.Sockets.SocketOptionLevel.Tcp, $asm06.System.Net.Sockets.SocketOptionName.NoDelay, value ? 1 : 0);
};
System.Net.Sockets.Socket.prototype.get_Ttl = function () {
	if (this.addressFamily === System.Net.Sockets.AddressFamily.InterNetwork) {
		return JSIL.Cast(this.GetSocketOption($asm06.System.Net.Sockets.SocketOptionLevel.IP, $asm06.System.Net.Sockets.SocketOptionName.IpTimeToLive), System.Int32);
	}
	if (this.addressFamily === System.Net.Sockets.AddressFamily.InterNetworkV6) {
		return JSIL.Cast(this.GetSocketOption($asm06.System.Net.Sockets.SocketOptionLevel.IPv6, $asm06.System.Net.Sockets.SocketOptionName.IpTimeToLive), System.Int32);
	}
	throw JSIL.New(System.NotSupportedException, "_ctor$1", [$asm06.System.SR.GetString$2("net_invalidversion")]);
};
System.Net.Sockets.Socket.prototype.set_Ttl = function (value) {
	if (value <= -1) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["value"]);
	}
	if (this.addressFamily === System.Net.Sockets.AddressFamily.InterNetwork) {
		this.SetSocketOption$0($asm06.System.Net.Sockets.SocketOptionLevel.IP, $asm06.System.Net.Sockets.SocketOptionName.IpTimeToLive, value);
		return;
	}
	if (this.addressFamily === System.Net.Sockets.AddressFamily.InterNetworkV6) {
		this.SetSocketOption$0($asm06.System.Net.Sockets.SocketOptionLevel.IPv6, $asm06.System.Net.Sockets.SocketOptionName.IpTimeToLive, value);
		return;
	}
	throw JSIL.New(System.NotSupportedException, "_ctor$1", [$asm06.System.SR.GetString$2("net_invalidversion")]);
};
System.Net.Sockets.Socket.prototype.InternalBind = function (localEP) {
	if (System.Net.Sockets.Socket.s_LoggingEnabled) {
		$asm06.System.Net.Logging.Enter$1($asm06.System.Net.Logging.Sockets, this, "InternalBind", localEP);
	}
	if (this.CleanedUp) {
		throw JSIL.New(System.ObjectDisposedException, "_ctor$1", [JSIL.GetType(this).FullName]);
	}
	var endPointSnapshot = new JSIL.Variable(localEP);
	var socketAddress = this.SnapshotAndSerialize(/* ref */ endPointSnapshot);
	this.DoBind(endPointSnapshot.value, socketAddress);
	if (System.Net.Sockets.Socket.s_LoggingEnabled) {
		$asm06.System.Net.Logging.Exit$2($asm06.System.Net.Logging.Sockets, this, "InternalBind", "");
	}
};
System.Net.Sockets.Socket.prototype.DoBind = function (endPointSnapshot, socketAddress) {
	var socketError = new JSIL.Variable(System.Net.Sockets.SocketError.Success);
	var socketError2 = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.bind(this.m_Handle, socketAddress.m_Buffer, socketAddress.m_Size, /* ref */ socketError);
	if (JSIL.Cast(socketError2, System.Boolean)) {
		var socketException = JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [socketError.value]);
		this.UpdateStatusAfterSocketError$0(socketException);
		if (System.Net.Sockets.Socket.s_LoggingEnabled) {
			$asm06.System.Net.Logging.Exception($asm06.System.Net.Logging.Sockets, this, "DoBind", socketException);
		}
		throw socketException;
	}
	if (this.m_RightEndPoint === null) {
		this.m_RightEndPoint = endPointSnapshot;
	}
};
System.Net.Sockets.Socket.prototype.Close$0 = function () {
	if (System.Net.Sockets.Socket.s_LoggingEnabled) {
		$asm06.System.Net.Logging.Enter$0($asm06.System.Net.Logging.Sockets, this, "Close", null);
	}
	this.IDisposable_Dispose();
	if (System.Net.Sockets.Socket.s_LoggingEnabled) {
		$asm06.System.Net.Logging.Exit$2($asm06.System.Net.Logging.Sockets, this, "Close", null);
	}
};
System.Net.Sockets.Socket.prototype.Close$1 = function (timeout) {
	if (timeout < -1) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["timeout"]);
	}
	this.m_CloseTimeout = timeout;
	this.IDisposable_Dispose();
};
System.Net.Sockets.Socket.prototype.SetSocketOption$0 = function (optionLevel, optionName, optionValue) {
	if (this.CleanedUp) {
		throw JSIL.New(System.ObjectDisposedException, "_ctor$1", [JSIL.GetType(this).FullName]);
	}
	this.CheckSetOptionPermissions(optionLevel, optionName);
	this.SetSocketOption$1(optionLevel, optionName, optionValue, false);
};
System.Net.Sockets.Socket.prototype.GetSocketOption = function (optionLevel, optionName) {
	if (this.CleanedUp) {
		throw JSIL.New(System.ObjectDisposedException, "_ctor$1", [JSIL.GetType(this).FullName]);
	}
	if (!(((optionName === $asm06.System.Net.Sockets.SocketOptionName.IpTimeToLive) && 
				(!JSIL.Cast(optionLevel, System.Boolean) || 
					(optionLevel === $asm06.System.Net.Sockets.SocketOptionLevel.IPv6))) || 
			((optionName === $asm06.System.Net.Sockets.SocketOptionName.NoDelay) && 
				(optionLevel === $asm06.System.Net.Sockets.SocketOptionLevel.Tcp)) || (!((optionName !== $asm06.System.Net.Sockets.SocketOptionName.ReceiveBuffer) && 
					(optionName !== $asm06.System.Net.Sockets.SocketOptionName.SendBuffer)) && 
				(optionLevel === $asm06.System.Net.Sockets.SocketOptionLevel.Socket)))) {
		throw JSIL.New(System.NotSupportedException, "_ctor$1", [$asm06.System.SR.GetString$2("net_sockets_invalid_optionValue_all")]);
	}
	var num = new JSIL.Variable(0);
	var num2 = new JSIL.Variable(4);
	var socketError = new JSIL.Variable(System.Net.Sockets.SocketError.Success);
	var socketError2 = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.getsockopt(
		this.m_Handle, 
		optionLevel, 
		optionName, 
		/* ref */ num, 
		/* ref */ num2, 
		/* ref */ socketError
	);
	if (socketError2 === System.Net.Sockets.SocketError.SocketError) {
		var socketException = JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [socketError.value]);
		this.UpdateStatusAfterSocketError$0(socketException);
		if (System.Net.Sockets.Socket.s_LoggingEnabled) {
			$asm06.System.Net.Logging.Exception($asm06.System.Net.Logging.Sockets, this, "GetSocketOption", socketException);
		}
		throw socketException;
	}
	return num.value;
};
System.Net.Sockets.Socket.prototype.CanUseConnectEx = function (remoteEP) {
	return (!(!$asm06.System.Net.ComNetOS.IsPostWin2K || 
			(this.ProtocolType !== System.Net.Sockets.ProtocolType.Tcp)) && (this.m_RightEndPoint || 
			((JSIL.GetType(remoteEP)) === System.Net.IPEndPoint) || 
			((JSIL.GetType(remoteEP)) === System.Net.DnsEndPoint)));
};
System.Net.Sockets.Socket.prototype.Shutdown = function (how) {
	if (System.Net.Sockets.Socket.s_LoggingEnabled) {
		$asm06.System.Net.Logging.Enter$1($asm06.System.Net.Logging.Sockets, this, "Shutdown", how);
	}
	if (this.CleanedUp) {
		throw JSIL.New(System.ObjectDisposedException, "_ctor$1", [JSIL.GetType(this).FullName]);
	}
	var socketError = new JSIL.Variable(System.Net.Sockets.SocketError.Success);
	var socketError2 = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.shutdown(this.m_Handle, Math.floor(how), /* ref */ socketError);
	socketError2 = (socketError2 !== System.Net.Sockets.SocketError.SocketError) ? System.Net.Sockets.SocketError.Success : socketError.value;
	if (!(!JSIL.Cast(socketError2, System.Boolean) || (socketError2 === System.Net.Sockets.SocketError.NotSocket))) {
		var socketException = JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [socketError2]);
		this.UpdateStatusAfterSocketError$0(socketException);
		if (System.Net.Sockets.Socket.s_LoggingEnabled) {
			$asm06.System.Net.Logging.Exception($asm06.System.Net.Logging.Sockets, this, "Shutdown", socketException);
		}
		throw socketException;
	}
	this.SetToDisconnected();
	if (System.Net.Sockets.Socket.s_LoggingEnabled) {
		$asm06.System.Net.Logging.Exit$2($asm06.System.Net.Logging.Sockets, this, "Shutdown", "");
	}
};
System.Net.Sockets.Socket.get_InternalSyncObject = function () {
	if (System.Net.Sockets.Socket.s_InternalSyncObject === null) {
		var value = new System.Object();
		System.Threading.Interlocked.CompareExchange(/* ref */ new JSIL.MemberReference(System.Net.Sockets.Socket, "s_InternalSyncObject"), value, null);
	}
	return System.Net.Sockets.Socket.s_InternalSyncObject;
};
System.Net.Sockets.Socket.prototype.get_ConnectEx = function () {
	var internalSyncObject = null, num = new JSIL.Variable(0);
	if (this.m_ConnectEx === null) {
		System.Threading.Monitor.Enter((internalSyncObject = System.Net.Sockets.Socket.InternalSyncObject));
		try {
			if (this.m_ConnectEx === null) {
				var socketError = new JSIL.Variable(System.Net.Sockets.SocketError.Success);
				var zero = new JSIL.Variable(System.IntPtr.Zero);
				var socketError2 = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSAIoctl(
					this.m_Handle, 
					-939524090, 
					/* ref */ new JSIL.MemberReference(System.Net.Sockets.Socket, "s_ConnectExGuid"), 
					JSIL.UntranslatableInstruction("sizeof:Int32([mscorlib]System.Guid)"), 
					/* ref */ zero, 
					JSIL.UntranslatableInstruction("sizeof:Int32([mscorlib]System.IntPtr)"), 
					/* ref */ num, 
					System.IntPtr.Zero, 
					System.IntPtr.Zero, 
					/* ref */ socketError
				);
				if (JSIL.Cast(socketError2, System.Boolean)) {
					throw JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [socketError.value]);
				}
				this.m_ConnectEx = System.Runtime.InteropServices.Marshal.GetDelegateForFunctionPointer(zero.value, $asm06.System.Net.Sockets.Socket.ConnectExDelegate);
			}
		} finally {
			System.Threading.Monitor.Exit(internalSyncObject);
		}
	}
	return this.m_ConnectEx;
};
System.Net.Sockets.Socket.prototype.get_CleanedUp = function () {
	return (this.m_IntCleanedUp === 1);
};
System.Net.Sockets.Socket.prototype.CheckSetOptionPermissions = function (optionLevel, optionName) {
	if (!(((optionName === $asm06.System.Net.Sockets.SocketOptionName.IpTimeToLive) && 
				(!JSIL.Cast(optionLevel, System.Boolean) || 
					(optionLevel === $asm06.System.Net.Sockets.SocketOptionLevel.IPv6))) || 
			((optionName === $asm06.System.Net.Sockets.SocketOptionName.NoDelay) && 
				(optionLevel === $asm06.System.Net.Sockets.SocketOptionLevel.Tcp)) || (!((optionName !== $asm06.System.Net.Sockets.SocketOptionName.ReceiveBuffer) && 
					(optionName !== $asm06.System.Net.Sockets.SocketOptionName.SendBuffer)) && 
				(optionLevel === $asm06.System.Net.Sockets.SocketOptionLevel.Socket)))) {
		throw JSIL.New(System.NotSupportedException, "_ctor$1", [$asm06.System.SR.GetString$2("net_sockets_invalid_optionValue_all")]);
	}
};
System.Net.Sockets.Socket.prototype.SnapshotAndSerialize = function (/* ref */ remoteEP) {
	var iPEndPoint = JSIL.TryCast(remoteEP.value, System.Net.IPEndPoint);
	if (iPEndPoint !== null) {
		iPEndPoint = iPEndPoint.Snapshot();
		remoteEP.value = iPEndPoint;
	}
	return remoteEP.value.Serialize();
};
System.Net.Sockets.Socket.prototype.CheckCacheRemote = function (/* ref */ remoteEP, isOverwrite) {
	var iPEndPoint = JSIL.TryCast(remoteEP.value, System.Net.IPEndPoint);
	if (iPEndPoint !== null) {
		iPEndPoint = iPEndPoint.Snapshot();
		remoteEP.value = iPEndPoint;
	}
	var socketAddress = remoteEP.value.Serialize();
	var permittedRemoteAddress = this.m_PermittedRemoteAddress;
	if (!((permittedRemoteAddress === null) || !permittedRemoteAddress.Equals(socketAddress))) {
		return permittedRemoteAddress;
	}
	if (!((this.m_PermittedRemoteAddress !== null) && !isOverwrite)) {
		this.m_PermittedRemoteAddress = socketAddress;
	}
	return socketAddress;
};
System.Net.Sockets.Socket.OnAppDomainUnload = function (sender, args) {
	$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.DisableNCLPALReversePinvokes(System.Net.Sockets.Socket.s_AppDomainId);
};
System.Net.Sockets.Socket.InitializeSockets = function () {
	var internalSyncObject = null;
	if (!System.Net.Sockets.Socket.s_Initialized) {
		System.Threading.Monitor.Enter((internalSyncObject = System.Net.Sockets.Socket.InternalSyncObject));
		try {
			if (!System.Net.Sockets.Socket.s_Initialized) {
				var wSAData = new JSIL.Variable(new $asm06.System.Net.WSAData());
				var socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSAStartup(514, /* ref */ wSAData);
				if (JSIL.Cast(socketError, System.Boolean)) {
					throw JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [socketError]);
				}
				if (!$asm06.System.Net.UnsafeNclNativeMethods.IsWindows) {
					System.Net.Sockets.Socket.s_AppDomainId = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.InitializeNCLPALEvents($asm06.System.Net.Sockets.NCLPALDelegates.SetEventDelegate, $asm06.System.Net.Sockets.NCLPALDelegates.ResetEventDelegate);
					var event = System.AppDomain.GetEvent$1("DomainUnload", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic));
					var addMethod = event.GetAddMethod$0(true);
					addMethod.Invoke$1(System.AppDomain.CurrentDomain, [JSIL.Delegate.New("System.EventHandler", null, System.Net.Sockets.Socket.OnAppDomainUnload)]);
				}
				if (!$asm06.System.Net.ComNetOS.IsWinNt) {
					System.Net.Sockets.Socket.UseOverlappedIO = true;
				}
				var flag = true;
				var flag2 = true;
				var socketError2 = new JSIL.Variable(System.Net.Sockets.SocketError.Success);
				var innerSafeCloseSocket = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSASocket(
					System.Net.Sockets.AddressFamily.InterNetwork, 
					System.Net.Sockets.SocketType.Stream, 
					System.Net.Sockets.ProtocolType.Unspecified, 
					System.IntPtr.Zero, 
					0, 
					$asm06.System.Net.SocketConstructorFlags.WSA_FLAG_OVERLAPPED, 
					/* ref */ socketError2
				);
				if (!(!innerSafeCloseSocket.IsInvalid || (socketError2.value !== System.Net.Sockets.SocketError.AddressFamilyNotSupported))) {
					flag = false;
				}
				innerSafeCloseSocket.Close();
				var innerSafeCloseSocket2 = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSASocket(
					System.Net.Sockets.AddressFamily.InterNetworkV6, 
					System.Net.Sockets.SocketType.Stream, 
					System.Net.Sockets.ProtocolType.Unspecified, 
					System.IntPtr.Zero, 
					0, 
					$asm06.System.Net.SocketConstructorFlags.WSA_FLAG_OVERLAPPED, 
					/* ref */ socketError2
				);
				if (!(!innerSafeCloseSocket2.IsInvalid || (socketError2.value !== System.Net.Sockets.SocketError.AddressFamilyNotSupported))) {
					flag2 = false;
				}
				innerSafeCloseSocket2.Close();
				flag2 = (flag2 && 
					($asm06.System.Net.ComNetOS.IsPostWin2K || 
						!$asm06.System.Net.UnsafeNclNativeMethods.IsWindows));
				if (flag2) {
					System.Net.Sockets.Socket.s_OSSupportsIPv6 = true;
					flag2 = true;
				}
				System.Net.Sockets.Socket.s_SupportsIPv4 = flag;
				System.Net.Sockets.Socket.s_SupportsIPv6 = flag2;
				System.Net.Sockets.Socket.s_LoggingEnabled = $asm06.System.Net.Logging.On;
				System.Net.Sockets.Socket.s_Initialized = true;
			}
		} finally {
			System.Threading.Monitor.Exit(internalSyncObject);
		}
	}
};
System.Net.Sockets.Socket.prototype.Dispose$0 = function (disposing) {
	var num = 0;
	try {
		if (System.Net.Sockets.Socket.s_LoggingEnabled) {
			$asm06.System.Net.Logging.Enter$0($asm06.System.Net.Logging.Sockets, this, "Dispose", null);
		}
	} catch ($exception) {
		var exception = $exception;
		if ($asm06.System.Net.NclUtilities.IsFatal(exception)) {
			throw $exception;
		}
	}
	if (!disposing) {
		if (!((this.m_Handle === null) || this.m_Handle.IsInvalid)) {
			this.m_Handle.Dispose$0();
		}
		return;
	}
__loop0__: 
	while ((num = System.Threading.Interlocked.CompareExchange(/* ref */ new JSIL.MemberReference(this, "m_IntCleanedUp"), 1, 0)) === 2) {
		System.Threading.Thread.SpinWait(1);
	}
	if (num === 1) {
		try {
			if (System.Net.Sockets.Socket.s_LoggingEnabled) {
				$asm06.System.Net.Logging.Exit$2($asm06.System.Net.Logging.Sockets, this, "Dispose", null);
			}
		} catch ($exception) {
			var exception2 = $exception;
			if ($asm06.System.Net.NclUtilities.IsFatal(exception2)) {
				throw $exception;
			}
		}
		return;
	}
	this.SetToDisconnected();
	var policyCheck = this.m_PolicyCheck;
	this.m_PolicyCheck = null;
	if (policyCheck !== null) {
		policyCheck.Abort();
	}
	try {
		var closeTimeout = new JSIL.Variable(this.m_CloseTimeout);
		if (closeTimeout.value === 0) {
			this.m_Handle.Dispose$0();
		} else {
			var socketError = new JSIL.Variable(System.Net.Sockets.SocketError.Success);
			if (closeTimeout.value < 0) {
				this.m_Handle.CloseAsIs();
			} else {
				var socketError2 = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.shutdown(this.m_Handle, 1, /* ref */ socketError);
				socketError2 = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.setsockopt$0(
					this.m_Handle, 
					$asm06.System.Net.Sockets.SocketOptionLevel.Socket, 
					$asm06.System.Net.Sockets.SocketOptionName.ReceiveTimeout, 
					/* ref */ closeTimeout, 
					4, 
					/* ref */ socketError
				);
				if (JSIL.Cast(socketError2, System.Boolean)) {
					this.m_Handle.Dispose$0();
				} else {
					socketError2 = JSIL.Cast(JSIL.IgnoredMember("recv(socketHandle, pinnedBuffer, len, socketFlags, lastError)", this.m_Handle.DangerousGetHandle(), 0, $asm06.System.Net.Sockets.SocketFlags.None, /* ref */ socketError), System.Net.Sockets.SocketError);
					if (JSIL.Cast(socketError2, System.Boolean)) {
						this.m_Handle.Dispose$0();
					} else {
						var num2 = new JSIL.Variable(0);
						if (!(!JSIL.Cast($asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.ioctlsocket(this.m_Handle, 1074030207, /* ref */ num2, /* ref */ socketError), System.Boolean) && (num2.value === 0))) {
							this.m_Handle.Dispose$0();
						} else {
							this.m_Handle.CloseAsIs();
						}
					}
				}
			}
		}
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.ObjectDisposedException)) {
		} else {
			throw $exception;
		}
	}
};
System.Net.Sockets.Socket.prototype.Dispose$1 = function () {
	this.Dispose$0(true);
	System.GC.SuppressFinalize(this);
};
System.Net.Sockets.Socket.prototype.Finalize = function () {
	try {
		this.Dispose$0(false);
	} finally {
		System.Object.prototype.Finalize.call(this);
	}
};
System.Net.Sockets.Socket.prototype.InternalShutdown = function (how) {
	if (!(!this.CleanedUp && !this.m_Handle.IsInvalid)) {
		return;
	}
	try {
		var socketError = new JSIL.Variable(System.Net.Sockets.SocketError.Success);
		$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.shutdown(this.m_Handle, Math.floor(how), /* ref */ socketError);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.ObjectDisposedException)) {
		} else {
			throw $exception;
		}
	}
};
System.Net.Sockets.Socket.prototype.SetSocketOption$1 = function (optionLevel, optionName, $optionValue, silent) {
	var optionValue = new JSIL.Variable($optionValue);
	if (!(!silent || (!this.CleanedUp && 
				!this.m_Handle.IsInvalid))) {
		return;
	}
	var socketError = new JSIL.Variable(System.Net.Sockets.SocketError.Success);
	var socketError2 = System.Net.Sockets.SocketError.Success;
	try {
		socketError2 = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.setsockopt$0(
			this.m_Handle, 
			optionLevel, 
			optionName, 
			/* ref */ optionValue, 
			4, 
			/* ref */ socketError
		);
	} catch ($exception) {
		if (!(!silent || !this.m_Handle.IsInvalid)) {
			return;
		}
		throw $exception;
	}
	if (silent) {
		return;
	}
	if (socketError2 === System.Net.Sockets.SocketError.SocketError) {
		var socketException = JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [socketError.value]);
		this.UpdateStatusAfterSocketError$0(socketException);
		if (System.Net.Sockets.Socket.s_LoggingEnabled) {
			$asm06.System.Net.Logging.Exception($asm06.System.Net.Logging.Sockets, this, "SetSocketOption", socketException);
		}
		throw socketException;
	}
};
System.Net.Sockets.Socket.prototype.InternalSetBlocking = function (desired) {
	if (!this.CleanedUp) {
		var num = new JSIL.Variable(desired ? 1 : 0);
		try {
			var socketError = new JSIL.Variable(System.Net.Sockets.SocketError.Success);
			$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.ioctlsocket(this.m_Handle, -2147195266, /* ref */ num, /* ref */ socketError);
		} catch ($exception) {
			if (JSIL.CheckType($exception, System.ObjectDisposedException)) {
			} else {
				throw $exception;
			}
		}
	}
};
System.Net.Sockets.Socket.prototype.SetToConnected = function () {
	if (this.m_IsConnected) {
		return;
	}
	this.m_IsConnected = true;
};
System.Net.Sockets.Socket.prototype.SetToDisconnected = function () {
	if (!this.m_IsConnected) {
		return;
	}
	this.m_IsConnected = false;
	if (!this.CleanedUp) {
		this.UnsetAsyncEventSelect();
	}
};
System.Net.Sockets.Socket.prototype.UpdateStatusAfterSocketError$0 = function (socketException) {
	this.UpdateStatusAfterSocketError$1(socketException.SocketErrorCode);
};
System.Net.Sockets.Socket.prototype.UpdateStatusAfterSocketError$1 = function (errorCode) {
	if (!(!this.m_IsConnected || (!this.m_Handle.IsInvalid && 
				((errorCode === System.Net.Sockets.SocketError.WouldBlock) || 
					(errorCode === System.Net.Sockets.SocketError.IOPending) || 
					(errorCode === System.Net.Sockets.SocketError.NoBufferSpaceAvailable))))) {
		this.SetToDisconnected();
	}
};
System.Net.Sockets.Socket.prototype.UnsetAsyncEventSelect = function () {
	var registeredWait = this.m_RegisteredWait;
	if (registeredWait !== null) {
		this.m_RegisteredWait = null;
		registeredWait.Unregister(null);
	}
	var errorCode = new JSIL.Variable(System.Net.Sockets.SocketError.Success);
	var socketError = System.Net.Sockets.SocketError.NotSocket;
	try {
		socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSAEventSelect(this.m_Handle, JSIL.New(Microsoft.Win32.SafeHandles.SafeWaitHandle, "_ctor$1", [System.IntPtr.Zero, false]), $asm06.System.Net.Sockets.AsyncEventBits.FdNone, /* ref */ errorCode);
	} catch ($exception) {
		var exception = $exception;
		if ($asm06.System.Net.NclUtilities.IsFatal(exception)) {
			throw $exception;
		}
	}
	if (this.m_AsyncEvent !== null) {
		try {
			this.m_AsyncEvent.Reset();
		} catch ($exception) {
			if (JSIL.CheckType($exception, System.ObjectDisposedException)) {
			} else {
				throw $exception;
			}
		}
	}
	if (socketError === System.Net.Sockets.SocketError.SocketError) {
		this.UpdateStatusAfterSocketError$1(errorCode.value);
	}
};
System.Net.Sockets.Socket.prototype.BindToCompletionPort = function () {
	if (!(this.m_BoundToThreadPool || System.Net.Sockets.Socket.UseOverlappedIO)) {
		System.Threading.Monitor.Enter(this);
		try {
			if (!this.m_BoundToThreadPool) {
				try {
					System.Threading.ThreadPool.BindHandle(this.m_Handle);
					this.m_BoundToThreadPool = true;
				} catch ($exception) {
					var exception = $exception;
					if ($asm06.System.Net.NclUtilities.IsFatal(exception)) {
						throw $exception;
					}
					this.Close$1(0);
					throw $exception;
				}
			}
		} finally {
			System.Threading.Monitor.Exit(this);
		}
	}
};
System.Net.Sockets.Socket.DoResolve = function (dnsep, usersArgs) {
	var currentSocket = usersArgs.CurrentSocket;
	if (!(!((currentSocket !== null) && 
				currentSocket.CleanedUp) && !usersArgs.ConnectCancelled)) {
		usersArgs.FinishOperationAsyncFailure$1(JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [System.Net.Sockets.SocketError.OperationAborted]), 0, $asm06.System.Net.Sockets.SocketFlags.None);
		return null;
	}
	var array = null;
	try {
		array = $asm06.System.Net.Dns.InternalGetHostByName(dnsep.Host, true).AddressList;
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.Net.Sockets.SocketException)) {
			usersArgs.FinishOperationAsyncFailure$1(JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [System.Net.Sockets.SocketError.AccessDenied]), 0, $asm06.System.Net.Sockets.SocketFlags.None);
			var result = null;
			return result;
		} else {
			var arg_5B_0 = $exception;
			usersArgs.FinishOperationAsyncFailure$1(arg_5B_0, 0, $asm06.System.Net.Sockets.SocketFlags.None);
			result = null;
			return result;
		}
	}
	if (!(!((currentSocket !== null) && 
				currentSocket.CleanedUp) && !usersArgs.ConnectCancelled)) {
		usersArgs.FinishOperationAsyncFailure$1(JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [System.Net.Sockets.SocketError.OperationAborted]), 0, $asm06.System.Net.Sockets.SocketFlags.None);
		return null;
	}
	if (array === null) {
		usersArgs.FinishOperationAsyncFailure$1(JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [System.Net.Sockets.SocketError.AccessDenied]), 0, $asm06.System.Net.Sockets.SocketFlags.None);
		return null;
	}
	return array;
};
System.Net.Sockets.Socket.ResolveCallback = function (args) {
	var socketAsyncEventArgs = JSIL.Cast(args, System.Net.Sockets.SocketAsyncEventArgs);
	var currentSocket = socketAsyncEventArgs.CurrentSocket;
	var dnsEndPoint = JSIL.TryCast(socketAsyncEventArgs.RemoteEndPoint, System.Net.DnsEndPoint);
	var socketAsyncEventArgs2 = JSIL.TryCast(socketAsyncEventArgs.UserToken, System.Net.Sockets.SocketAsyncEventArgs);
	var array = System.Net.Sockets.Socket.DoResolve(dnsEndPoint, socketAsyncEventArgs2);
	if (array === null) {
		return;
	}
	var resolvedDnsEndPoint = new $asm06.System.Net.ResolvedDnsEndPoint(currentSocket.addressFamily, array, dnsEndPoint.Port);
	var nextAddress = resolvedDnsEndPoint.GetNextAddress();
	if (nextAddress === null) {
		socketAsyncEventArgs2.FinishOperationAsyncFailure$1(JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [System.Net.Sockets.SocketError.AccessDenied]), 0, $asm06.System.Net.Sockets.SocketFlags.None);
		return;
	}
	socketAsyncEventArgs.RemoteEndPoint = resolvedDnsEndPoint;
	currentSocket.DoConnectAsync(socketAsyncEventArgs, nextAddress, false);
};
System.Net.Sockets.Socket.StaticResolveCallback = function (args) {
	var staticConnectAsyncState = JSIL.Cast(args, $asm06.System.Net.Sockets.Socket.StaticConnectAsyncState);
	var dnsEndPoint = JSIL.Cast(staticConnectAsyncState.original.RemoteEndPoint, System.Net.DnsEndPoint);
	staticConnectAsyncState.addresses = System.Net.Sockets.Socket.DoResolve(dnsEndPoint, staticConnectAsyncState.original);
	if (staticConnectAsyncState.addresses === null) {
		return;
	}
	staticConnectAsyncState.index = 0;
	var iPAddress = staticConnectAsyncState.addresses[staticConnectAsyncState.index];
	var socket = null;
	try {
		socket = new System.Net.Sockets.Socket(iPAddress.AddressFamily, staticConnectAsyncState.socketType, staticConnectAsyncState.protocolType);
		staticConnectAsyncState.original.StartOperationCommon(socket);
		staticConnectAsyncState.original.StartOperationWrapperConnect();
	} catch ($exception) {
		var arg_7B_0 = $exception;
		if (socket !== null) {
			socket.Close$0();
		}
		staticConnectAsyncState.original.FinishOperationAsyncFailure$1(arg_7B_0, 0, $asm06.System.Net.Sockets.SocketFlags.None);
		return;
	}
	if (!staticConnectAsyncState.original.ConnectCancelled) {
		var socketAsyncEventArgs = null;
		try {
			socketAsyncEventArgs = new System.Net.Sockets.SocketAsyncEventArgs();
			socketAsyncEventArgs.UserToken = staticConnectAsyncState;
			socketAsyncEventArgs.add_Completed(JSIL.Delegate.New("System.EventHandler`1[System.Net.Sockets.SocketAsyncEventArgs]", null, System.Net.Sockets.Socket.StaticConnectCallback));
			socketAsyncEventArgs.RemoteEndPoint = JSIL.New(System.Net.IPEndPoint, "_ctor$1", [iPAddress, dnsEndPoint.Port]);
			socketAsyncEventArgs.SetBuffer$0(staticConnectAsyncState.original.Buffer, staticConnectAsyncState.original.Offset, staticConnectAsyncState.original.Count);
			socketAsyncEventArgs.SocketClientAccessPolicyProtocol = staticConnectAsyncState.original.SocketClientAccessPolicyProtocol;
			socketAsyncEventArgs.StartOperationCommon(socket);
		} catch ($exception) {
			var arg_13E_0 = $exception;
			socket.Close$0();
			staticConnectAsyncState.original.FinishOperationAsyncFailure$1(arg_13E_0, 0, $asm06.System.Net.Sockets.SocketFlags.None);
			return;
		}
		socket.DoConnectAsync(socketAsyncEventArgs, socketAsyncEventArgs.RemoteEndPoint, false);
		return;
	}
	socket.Close$0();
	staticConnectAsyncState.original.FinishOperationAsyncFailure$1(JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [System.Net.Sockets.SocketError.OperationAborted]), 0, $asm06.System.Net.Sockets.SocketFlags.None);
};
System.Net.Sockets.Socket.StaticConnectCallback = function (sender, e) {
	var staticConnectAsyncState = JSIL.Cast(e.UserToken, $asm06.System.Net.Sockets.Socket.StaticConnectAsyncState);
	if (!JSIL.Cast(e.SocketError, System.Boolean)) {
		var socket = JSIL.Cast(sender, System.Net.Sockets.Socket);
		socket.m_RemoteEndPoint = staticConnectAsyncState.original.RemoteEndPoint;
		staticConnectAsyncState.original.SetConnectSocket(socket);
		staticConnectAsyncState.original.FinishOperationSuccess(e.SocketError, e.BytesTransferred, e.m_SocketFlags);
		return;
	}
	staticConnectAsyncState.index += 1;
	if (staticConnectAsyncState.index >= staticConnectAsyncState.addresses.length) {
		staticConnectAsyncState.original.FinishOperationAsyncFailure$1(JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [e.SocketError]), e.BytesTransferred, e.m_SocketFlags);
		return;
	}
	var iPAddress = staticConnectAsyncState.addresses[staticConnectAsyncState.index];
	var socket2 = JSIL.Cast(sender, System.Net.Sockets.Socket);
	if (iPAddress.AddressFamily !== socket2.AddressFamily) {
		socket2.Close$0();
		socket2 = new System.Net.Sockets.Socket(iPAddress.AddressFamily, staticConnectAsyncState.socketType, staticConnectAsyncState.protocolType);
		staticConnectAsyncState.original.CurrentSocket = socket2;
		e.CurrentSocket = socket2;
	}
	if (staticConnectAsyncState.original.ConnectCancelled) {
		socket2.Close$0();
		staticConnectAsyncState.original.FinishOperationAsyncFailure$1(JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [System.Net.Sockets.SocketError.OperationAborted]), 0, $asm06.System.Net.Sockets.SocketFlags.None);
		return;
	}
	e.RemoteEndPoint = JSIL.New(System.Net.IPEndPoint, "_ctor$1", [iPAddress, JSIL.Cast(e.RemoteEndPoint, System.Net.IPEndPoint).Port]);
	socket2.DoConnectAsync(e, e.RemoteEndPoint, false);
};
System.Net.Sockets.Socket.ConnectAsync = function (socketType, protocolType, e) {
	if (e.m_BufferList !== null) {
		throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm06.System.SR.GetString$2("net_multibuffernotsupported"), "BufferList"]);
	}
	if (e.RemoteEndPoint === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["remoteEP"]);
	}
	if (!((JSIL.TryCast(e.RemoteEndPoint, System.Net.DnsEndPoint) === null) || JSIL.Cast(e.RemoteEndPoint.AddressFamily, System.Boolean))) {
		var staticConnectAsyncState = new $asm06.System.Net.Sockets.Socket.StaticConnectAsyncState();
		staticConnectAsyncState.socketType = socketType;
		staticConnectAsyncState.protocolType = protocolType;
		staticConnectAsyncState.original = e;
		System.Threading.ThreadPool.QueueUserWorkItem$0(JSIL.Delegate.New("System.Threading.WaitCallback", null, System.Net.Sockets.Socket.StaticResolveCallback), staticConnectAsyncState);
		return true;
	}
	var socket = new System.Net.Sockets.Socket(e.RemoteEndPoint.AddressFamily, socketType, protocolType);
	e.SetConnectSocket(socket);
	return socket.ConnectAsync(e);
};
System.Net.Sockets.Socket.CancelConnectAsync = function (e) {
	if (e === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["e"]);
	}
	e.CancelConnect();
};
System.Net.Sockets.Socket.ConnectAsyncCallback = function (sender, args) {
	var socket = JSIL.TryCast(sender, System.Net.Sockets.Socket);
	var resolvedDnsEndPoint = JSIL.TryCast(args.RemoteEndPoint, $asm06.System.Net.ResolvedDnsEndPoint);
	var socketAsyncEventArgs = JSIL.TryCast(args.UserToken, System.Net.Sockets.SocketAsyncEventArgs);
	if (!JSIL.Cast(args.SocketError, System.Boolean)) {
		socketAsyncEventArgs.FinishOperationSuccess(System.Net.Sockets.SocketError.Success, 0, args.m_SocketFlags);
		return;
	}
	if (!((resolvedDnsEndPoint === null) || socket.CleanedUp)) {
		var nextAddress = resolvedDnsEndPoint.GetNextAddress();
		if (nextAddress !== null) {
			socket.DoConnectAsync(args, nextAddress, false);
			return;
		}
	}
	socket.m_RemoteEndPoint = null;
	socketAsyncEventArgs.FinishOperationAsyncFailure$1(JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [args.SocketError]), args.BytesTransferred, args.m_SocketFlags);
};
System.Net.Sockets.Socket.prototype.ConnectAsync = function (e) {
	if (System.Net.Sockets.Socket.s_LoggingEnabled) {
		$asm06.System.Net.Logging.Enter$0($asm06.System.Net.Logging.Sockets, this, "ConnectAsync", "");
	}
	if (this.CleanedUp) {
		throw JSIL.New(System.ObjectDisposedException, "_ctor$1", [JSIL.GetType(this).FullName]);
	}
	if (e.m_BufferList !== null) {
		throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm06.System.SR.GetString$2("net_multibuffernotsupported"), "BufferList"]);
	}
	if (e.RemoteEndPoint === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["remoteEP"]);
	}
	var dnsEndPoint = JSIL.TryCast(e.RemoteEndPoint, System.Net.DnsEndPoint);
	var socketAsyncEventArgs = null;
	if (dnsEndPoint !== null) {
		e.StartOperationCommon(this);
		e.StartOperationWrapperConnect();
		socketAsyncEventArgs = new System.Net.Sockets.SocketAsyncEventArgs();
		socketAsyncEventArgs.UserToken = e;
		socketAsyncEventArgs.SetBuffer$0(e.Buffer, e.Offset, e.Count);
		socketAsyncEventArgs.RemoteEndPoint = e.RemoteEndPoint;
		socketAsyncEventArgs.SocketClientAccessPolicyProtocol = e.SocketClientAccessPolicyProtocol;
		socketAsyncEventArgs.add_Completed(JSIL.Delegate.New("System.EventHandler`1[System.Net.Sockets.SocketAsyncEventArgs]", null, System.Net.Sockets.Socket.ConnectAsyncCallback));
	} else {
		socketAsyncEventArgs = e;
	}
	if (!(((dnsEndPoint !== null) && 
				!JSIL.Cast(dnsEndPoint.AddressFamily, System.Boolean)) || (this.addressFamily === socketAsyncEventArgs.RemoteEndPoint.AddressFamily))) {
		throw JSIL.New(System.NotSupportedException, "_ctor$1", [$asm06.System.SR.GetString$2("net_invalidversion")]);
	}
	socketAsyncEventArgs.StartOperationCommon(this);
	socketAsyncEventArgs.StartOperationWrapperConnect();
	if (System.Net.Sockets.Socket.s_ResolveCallback === null) {
		System.Net.Sockets.Socket.s_ResolveCallback = JSIL.Delegate.New("System.Threading.WaitCallback", null, System.Net.Sockets.Socket.ResolveCallback);
	}
	var result = false;
	if (dnsEndPoint !== null) {
		this.m_RemoteEndPoint = dnsEndPoint;
		System.Threading.ThreadPool.QueueUserWorkItem$0(System.Net.Sockets.Socket.s_ResolveCallback, socketAsyncEventArgs);
		result = true;
	} else {
		result = this.DoConnectAsync(socketAsyncEventArgs, socketAsyncEventArgs.RemoteEndPoint, true);
	}
	if (System.Net.Sockets.Socket.s_LoggingEnabled) {
		$asm06.System.Net.Logging.Exit$2($asm06.System.Net.Logging.Sockets, this, "ConnectAsync", "");
	}
	return result;
};
System.Net.Sockets.Socket.prototype.DoConnectAsync = function (args, ipEndPoint, sync) {
	if ($asm06.System.Net.NetworkSecurityOptions.NetworkingUnrestricted) {
		return this.UnsafeDoConnectAsync(args, ipEndPoint, sync);
	}
	if (System.Net.Sockets.Socket.s_PolicyCheckCompleteCallback === null) {
		System.Net.Sockets.Socket.s_PolicyCheckCompleteCallback = JSIL.Delegate.New("System.Net.Sockets.ISocketPolicyManager/SocketPolicyCheckCallback", this, System.Net.Sockets.Socket.prototype.PolicyCheckCompleteCallback);
	}
	if ($asm06.System.Net.NetworkSecurityOptions.SocketPolicyManager === null) {
		System.Net.Sockets.Socket.ThrowOrFailAsync(JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [System.Net.Sockets.SocketError.AccessDenied]), args, sync);
		return false;
	}
	var socketPolicyAsyncResult = null;
	try {
		socketPolicyAsyncResult = $asm06.System.Net.NetworkSecurityOptions.SocketPolicyManager.BeginPolicyCheck(
			this.protocolType, 
			args.SocketClientAccessPolicyProtocol, 
			JSIL.TryCast(ipEndPoint, System.Net.IPEndPoint), 
			System.Net.Sockets.Socket.s_PolicyCheckCompleteCallback, 
			args
		);
	} catch ($exception) {
		System.Net.Sockets.Socket.ThrowOrFailAsync(JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [System.Net.Sockets.SocketError.AccessDenied]), args, sync);
		return false;
	}
	if (!socketPolicyAsyncResult.CompletedSynchronously) {
		this.m_PolicyCheck = socketPolicyAsyncResult;
		if (this.CleanedUp) {
			this.m_PolicyCheck = null;
			socketPolicyAsyncResult.Abort();
		}
		return true;
	}
	if (socketPolicyAsyncResult.Allowed) {
		return this.UnsafeDoConnectAsync(args, ipEndPoint, sync);
	}
	this.m_RemoteEndPoint = null;
	if (sync) {
		args.FinishConnectByNameSyncFailure(System.Net.Sockets.SocketError.AccessDenied, 0, $asm06.System.Net.Sockets.SocketFlags.None);
	} else {
		args.FinishOperationAsyncFailure$1(JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [System.Net.Sockets.SocketError.AccessDenied]), 0, $asm06.System.Net.Sockets.SocketFlags.None);
	}
	return false;
};
System.Net.Sockets.Socket.prototype.PolicyCheckCompleteCallback = function (result) {
	this.m_PolicyCheck = null;
	var socketAsyncEventArgs = JSIL.Cast(result.UserToken, System.Net.Sockets.SocketAsyncEventArgs);
	var currentSocket = socketAsyncEventArgs.CurrentSocket;
	if (result.Allowed) {
		currentSocket.UnsafeDoConnectAsync(socketAsyncEventArgs, result.EndPoint, false);
		return;
	}
	this.m_RemoteEndPoint = null;
	var socketError = result.Aborted ? System.Net.Sockets.SocketError.OperationAborted : System.Net.Sockets.SocketError.AccessDenied;
	socketAsyncEventArgs.FinishOperationAsyncFailure$1(JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [socketError]), 0, $asm06.System.Net.Sockets.SocketFlags.None);
};
System.Net.Sockets.Socket.prototype.UnsafeConnectAsync = function (args, ipEndPoint) {
	args.StartOperationCommon(this);
	args.StartOperationWrapperConnect();
	return this.UnsafeDoConnectAsync(args, ipEndPoint, true);
};
System.Net.Sockets.Socket.prototype.UnsafeDoConnectAsync = function (args, $ipEndPoint, sync) {
	var ipEndPoint = new JSIL.Variable($ipEndPoint);
	if (this.CleanedUp) {
		System.Net.Sockets.Socket.ThrowOrFailAsync(JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [System.Net.Sockets.SocketError.OperationAborted]), args, sync);
		return false;
	}
	var flag = this.CanUseConnectEx(ipEndPoint.value);
	try {
		args.m_SocketAddress = this.CheckCacheRemote(/* ref */ ipEndPoint, false);
		args.StartOperationConnect();
		args.m_UsingConnectEx = flag;
		if (this.m_RightEndPoint === null) {
			if (ipEndPoint.value.AddressFamily === System.Net.Sockets.AddressFamily.InterNetwork) {
				this.InternalBind(JSIL.New(System.Net.IPEndPoint, "_ctor$1", [System.Net.IPAddress.Any, 0]));
			} else {
				this.InternalBind(JSIL.New(System.Net.IPEndPoint, "_ctor$1", [System.Net.IPAddress.IPv6Any, 0]));
			}
		}
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.ObjectDisposedException)) {
			System.Net.Sockets.Socket.ThrowOrFailAsync(JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [System.Net.Sockets.SocketError.OperationAborted]), args, sync);
			var result = false;
			return result;
		} else {
			var arg_8C_0 = $exception;
			System.Net.Sockets.Socket.ThrowOrFailAsync(arg_8C_0, args, sync);
			result = false;
			return result;
		}
	}
	if (flag) {
		return this.CallConnectEx(args, sync);
	}
	return this.EmulateConnectEx(args, sync);
};
System.Net.Sockets.Socket.prototype.CallConnectEx = function (args, sync) {
	var socketError = System.Net.Sockets.SocketError.Success;
	var bytesTransferred = new JSIL.Variable(0);
	try {
		this.BindToCompletionPort();
		if (!this.ConnectEx(
				this.m_Handle, 
				args.m_PtrSocketAddressBuffer, 
				args.m_SocketAddress.m_Size, 
				args.m_PtrSingleBuffer, 
				args.Count, 
				/* ref */ bytesTransferred, 
				args.m_PtrNativeOverlapped
			)) {
			socketError = System.Runtime.InteropServices.Marshal.GetLastWin32Error();
		}
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.ObjectDisposedException)) {
			System.Net.Sockets.Socket.ThrowOrFailAsync(JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [System.Net.Sockets.SocketError.OperationAborted]), args, sync);
			return false;
		} else {
			throw $exception;
		}
	}
	if (!(!JSIL.Cast(socketError, System.Boolean) || (socketError === System.Net.Sockets.SocketError.IOPending))) {
		if (sync) {
			args.FinishConnectByNameSyncFailure(socketError, bytesTransferred.value, $asm06.System.Net.Sockets.SocketFlags.None);
		} else {
			args.FinishOperationAsyncFailure$1(JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [socketError]), bytesTransferred.value, $asm06.System.Net.Sockets.SocketFlags.None);
		}
		return false;
	}
	return true;
};
System.Net.Sockets.Socket.prototype.EmulateConnectEx = function (args, sync) {
	var socketError = System.Net.Sockets.SocketError.NotSocket;
	var flag = true;
	try {
		if (this.m_AsyncEvent === null) {
			System.Threading.Interlocked.CompareExchange$b1(System.Threading.ManualResetEvent)(/* ref */ new JSIL.MemberReference(this, "m_AsyncEvent"), new System.Threading.ManualResetEvent(false), null);
			if (!$asm06.System.Net.UnsafeNclNativeMethods.IsWindows) {
				$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.RegisterNCLPALEventHandle(this.m_AsyncEvent.SafeWaitHandle, System.Net.Sockets.Socket.s_AppDomainId);
			}
			if (System.Net.Sockets.Socket.s_EmulateConnectExCallback === null) {
				System.Net.Sockets.Socket.s_EmulateConnectExCallback = JSIL.Delegate.New("System.Threading.WaitOrTimerCallback", null, System.Net.Sockets.Socket.EmulateConnectExCallback);
				System.Net.Sockets.Socket.s_EmulateConnectExSendCallback = JSIL.Delegate.New("System.EventHandler`1[System.Net.Sockets.SocketAsyncEventArgs]", null, System.Net.Sockets.Socket.EmulateConnectExSendCallback);
			}
		}
		this.m_RegisteredWait = System.Threading.ThreadPool.RegisterWaitForSingleObject$2(
			this.m_AsyncEvent, 
			System.Net.Sockets.Socket.s_EmulateConnectExCallback, 
			args, 
			-1, 
			true
		);
		var socketError2 = new JSIL.Variable(System.Net.Sockets.SocketError.Success);
		socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSAEventSelect(this.m_Handle, this.m_AsyncEvent.SafeWaitHandle, $asm06.System.Net.Sockets.AsyncEventBits.FdConnect, /* ref */ socketError2);
		if (JSIL.Cast(socketError, System.Boolean)) {
			socketError = socketError2.value;
		} else {
			socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSAConnect(
				this.m_Handle.DangerousGetHandle(), 
				args.m_SocketAddress.m_Buffer, 
				args.m_SocketAddress.m_Size, 
				System.IntPtr.Zero, 
				System.IntPtr.Zero, 
				System.IntPtr.Zero, 
				System.IntPtr.Zero, 
				/* ref */ socketError2
			);
			if (JSIL.Cast(socketError, System.Boolean)) {
				socketError = socketError2.value;
			}
		}
		if (!(JSIL.Cast(socketError, System.Boolean) && (socketError !== System.Net.Sockets.SocketError.WouldBlock))) {
			var result = true;
			return result;
		}
		if (System.Threading.Interlocked.Exchange$b1(System.Threading.RegisteredWaitHandle)(/* ref */ new JSIL.MemberReference(this, "m_RegisteredWait"), null) === null) {
			flag = false;
		}
		this.UnsetAsyncEventSelect();
		this.InternalSetBlocking(true);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.ObjectDisposedException)) {
			System.Net.Sockets.Socket.ThrowOrFailAsync(JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [System.Net.Sockets.SocketError.OperationAborted]), args, sync);
			result = false;
			return result;
		} else {
			var arg_12D_0 = $exception;
			System.Net.Sockets.Socket.ThrowOrFailAsync(arg_12D_0, args, sync);
			result = false;
			return result;
		}
	}
	if (!flag) {
		return false;
	}
	if (sync) {
		args.FinishConnectByNameSyncFailure(socketError, 0, $asm06.System.Net.Sockets.SocketFlags.None);
		return false;
	}
	args.FinishOperationAsyncFailure$1(JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [socketError]), 0, $asm06.System.Net.Sockets.SocketFlags.None);
	return false;
};
System.Net.Sockets.Socket.EmulateConnectExCallback = function (state, timedOut) {
	var socketAsyncEventArgs = JSIL.TryCast(state, System.Net.Sockets.SocketAsyncEventArgs);
	var currentSocket = socketAsyncEventArgs.CurrentSocket;
	if (System.Threading.Interlocked.Exchange$b1(System.Threading.RegisteredWaitHandle)(/* ref */ new JSIL.MemberReference(currentSocket, "m_RegisteredWait"), null) === null) {
		return;
	}
	var networkEvents = new JSIL.Variable(new $asm06.System.Net.Sockets.NetworkEvents());
	networkEvents.value.Events = $asm06.System.Net.Sockets.AsyncEventBits.FdConnect;
	var socketError = System.Net.Sockets.SocketError.OperationAborted;
	if (!currentSocket.CleanedUp) {
		try {
			var socketError2 = new JSIL.Variable(System.Net.Sockets.SocketError.Success);
			socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSAEnumNetworkEvents(currentSocket.m_Handle, currentSocket.m_AsyncEvent.SafeWaitHandle, /* ref */ networkEvents, /* ref */ socketError2);
			if (JSIL.Cast(socketError, System.Boolean)) {
				socketError = socketError2.value;
			} else {
				socketError = networkEvents.value.ErrorCodes[4];
			}
			currentSocket.UnsetAsyncEventSelect();
			currentSocket.InternalSetBlocking(true);
		} catch ($exception) {
			if (JSIL.CheckType($exception, System.ObjectDisposedException)) {
				socketError = System.Net.Sockets.SocketError.OperationAborted;
			} else {
				throw $exception;
			}
		}
	}
	if (!JSIL.Cast(socketError, System.Boolean)) {
		if ((socketAsyncEventArgs.Buffer === null) || (socketAsyncEventArgs.Count <= 0)) {
			socketAsyncEventArgs.FinishOperationSuccess(System.Net.Sockets.SocketError.Success, 0, $asm06.System.Net.Sockets.SocketFlags.None);
			return;
		}
		var socketAsyncEventArgs2 = new System.Net.Sockets.SocketAsyncEventArgs();
		socketAsyncEventArgs2.add_Completed(System.Net.Sockets.Socket.s_EmulateConnectExSendCallback);
		socketAsyncEventArgs2.SetBuffer$0(socketAsyncEventArgs.Buffer, socketAsyncEventArgs.Offset, socketAsyncEventArgs.Count);
		socketAsyncEventArgs2.UserToken = socketAsyncEventArgs;
		var flag = false;
		try {
			flag = currentSocket.SendAsync(socketAsyncEventArgs2);
		} catch ($exception) {
			if (JSIL.CheckType($exception, System.ObjectDisposedException)) {
				currentSocket.Close$0();
				socketAsyncEventArgs.FinishOperationAsyncFailure$1(JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [System.Net.Sockets.SocketError.OperationAborted]), 0, $asm06.System.Net.Sockets.SocketFlags.None);
				return;
			} else {
				var arg_FF_0 = $exception;
				currentSocket.Close$0();
				socketAsyncEventArgs.FinishOperationAsyncFailure$1(arg_FF_0, 0, $asm06.System.Net.Sockets.SocketFlags.None);
				return;
			}
		}
		if (!flag) {
			currentSocket.Close$0();
			socketAsyncEventArgs.FinishOperationAsyncFailure$1(JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [socketAsyncEventArgs.SocketError]), socketAsyncEventArgs.BytesTransferred, socketAsyncEventArgs.m_SocketFlags);
			return;
		}
	} else {
		socketAsyncEventArgs.FinishOperationAsyncFailure$1(JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [socketError]), 0, $asm06.System.Net.Sockets.SocketFlags.None);
	}
};
System.Net.Sockets.Socket.EmulateConnectExSendCallback = function (sender, args) {
	var socketAsyncEventArgs = JSIL.TryCast(args.UserToken, System.Net.Sockets.SocketAsyncEventArgs);
	if (!JSIL.Cast(args.SocketError, System.Boolean)) {
		socketAsyncEventArgs.FinishOperationSuccess(System.Net.Sockets.SocketError.Success, args.BytesTransferred, args.m_SocketFlags);
		return;
	}
	socketAsyncEventArgs.FinishOperationAsyncFailure$1(JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [args.SocketError]), args.BytesTransferred, args.m_SocketFlags);
};
System.Net.Sockets.Socket.ThrowOrFailAsync = function (ex, args, throwAllowed) {
	if (throwAllowed) {
		args.Complete();
		throw ex;
	}
	args.FinishOperationAsyncFailure$1(ex, 0, $asm06.System.Net.Sockets.SocketFlags.None);
};
System.Net.Sockets.Socket.prototype.ReceiveAsync = function (e) {
	var bytesTransferred = new JSIL.Variable(0);
	if (System.Net.Sockets.Socket.s_LoggingEnabled) {
		$asm06.System.Net.Logging.Enter$0($asm06.System.Net.Logging.Sockets, this, "ReceiveAsync", "");
	}
	if (this.CleanedUp) {
		throw JSIL.New(System.ObjectDisposedException, "_ctor$1", [JSIL.GetType(this).FullName]);
	}
	if (e.m_SocketFlags !== 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["SocketFlags"]);
	}
	e.StartOperationCommon(this);
	e.StartOperationReceive();
	this.BindToCompletionPort();
	var socketFlags = new JSIL.Variable(e.m_SocketFlags);
	var socketError = new JSIL.Variable(System.Net.Sockets.SocketError.Success);
	try {
		if (e.m_Buffer !== null) {
			var socketError2 = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSARecv$0(
				this.m_Handle, 
				/* ref */ new JSIL.MemberReference(e, "m_WSABuffer"), 
				1, 
				/* ref */ bytesTransferred, 
				/* ref */ socketFlags, 
				e.m_PtrNativeOverlapped, 
				System.IntPtr.Zero, 
				/* ref */ socketError
			);
		} else {
			socketError2 = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSARecv$1(
				this.m_Handle, 
				e.m_WSABufferArray, 
				e.m_WSABufferArray.length, 
				/* ref */ bytesTransferred, 
				/* ref */ socketFlags, 
				e.m_PtrNativeOverlapped, 
				System.IntPtr.Zero, 
				/* ref */ socketError
			);
		}
	} catch ($exception) {
		e.Complete();
		throw $exception;
	}
	if (JSIL.Cast(socketError2, System.Boolean)) {
		socketError2 = socketError.value;
	}
	if (!(!JSIL.Cast(socketError2, System.Boolean) || (socketError2 === System.Net.Sockets.SocketError.IOPending))) {
		e.FinishOperationSyncFailure(socketError2, bytesTransferred.value, socketFlags.value);
		var flag = false;
	} else {
		flag = true;
	}
	if (System.Net.Sockets.Socket.s_LoggingEnabled) {
		$asm06.System.Net.Logging.Exit$0($asm06.System.Net.Logging.Sockets, this, "ReceiveAsync", flag);
	}
	return flag;
};
System.Net.Sockets.Socket.prototype.SendAsync = function (e) {
	var bytesTransferred = new JSIL.Variable(0);
	if (System.Net.Sockets.Socket.s_LoggingEnabled) {
		$asm06.System.Net.Logging.Enter$0($asm06.System.Net.Logging.Sockets, this, "SendAsync", "");
	}
	if (this.CleanedUp) {
		throw JSIL.New(System.ObjectDisposedException, "_ctor$1", [JSIL.GetType(this).FullName]);
	}
	if (e.m_SocketFlags !== 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["SocketFlags"]);
	}
	e.StartOperationCommon(this);
	e.StartOperationSend();
	this.BindToCompletionPort();
	var socketError = new JSIL.Variable(System.Net.Sockets.SocketError.Success);
	try {
		if (e.m_Buffer !== null) {
			var socketError2 = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSASend$0(
				this.m_Handle, 
				/* ref */ new JSIL.MemberReference(e, "m_WSABuffer"), 
				1, 
				/* ref */ bytesTransferred, 
				e.m_SocketFlags, 
				e.m_PtrNativeOverlapped, 
				System.IntPtr.Zero, 
				/* ref */ socketError
			);
		} else {
			socketError2 = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSASend$1(
				this.m_Handle, 
				e.m_WSABufferArray, 
				e.m_WSABufferArray.length, 
				/* ref */ bytesTransferred, 
				e.m_SocketFlags, 
				e.m_PtrNativeOverlapped, 
				System.IntPtr.Zero, 
				/* ref */ socketError
			);
		}
	} catch ($exception) {
		e.Complete();
		throw $exception;
	}
	if (JSIL.Cast(socketError2, System.Boolean)) {
		socketError2 = socketError.value;
	}
	if (!(!JSIL.Cast(socketError2, System.Boolean) || (socketError2 === System.Net.Sockets.SocketError.IOPending))) {
		e.FinishOperationSyncFailure(socketError2, bytesTransferred.value, $asm06.System.Net.Sockets.SocketFlags.None);
		var flag = false;
	} else {
		flag = true;
	}
	if (System.Net.Sockets.Socket.s_LoggingEnabled) {
		$asm06.System.Net.Logging.Enter$1($asm06.System.Net.Logging.Sockets, this, "SendAsync", flag);
	}
	return flag;
};
JSIL.OverloadedMethod(System.Net.Sockets.Socket.prototype, "Close", [
		["Close$0", []], 
		["Close$1", [System.Int32]]
	]);
JSIL.OverloadedMethod(System.Net.Sockets.Socket.prototype, "SetSocketOption", [
		["SetSocketOption$0", [$asm06.System.Net.Sockets.SocketOptionLevel, $asm06.System.Net.Sockets.SocketOptionName, System.Int32]], 
		["SetSocketOption$1", [$asm06.System.Net.Sockets.SocketOptionLevel, $asm06.System.Net.Sockets.SocketOptionName, System.Int32, System.Boolean]]
	]);
JSIL.OverloadedMethod(System.Net.Sockets.Socket.prototype, "Dispose", [
		["Dispose$0", [System.Boolean]], 
		["Dispose$1", []]
	]);
JSIL.OverloadedMethod(System.Net.Sockets.Socket.prototype, "UpdateStatusAfterSocketError", [
		["UpdateStatusAfterSocketError$0", [System.Net.Sockets.SocketException]], 
		["UpdateStatusAfterSocketError$1", [System.Net.Sockets.SocketError]]
	]);
JSIL.MakeProperty(System.Net.Sockets.Socket, "OSSupportsIPv4", 
	System.Net.Sockets.Socket.get_OSSupportsIPv4, null);
JSIL.MakeProperty(System.Net.Sockets.Socket, "OSSupportsIPv6", 
	System.Net.Sockets.Socket.get_OSSupportsIPv6, null);
JSIL.MakeProperty(System.Net.Sockets.Socket.prototype, "RemoteEndPoint", 
	System.Net.Sockets.Socket.prototype.get_RemoteEndPoint, null);
JSIL.MakeProperty(System.Net.Sockets.Socket.prototype, "SafeHandle", 
	System.Net.Sockets.Socket.prototype.get_SafeHandle, null);
JSIL.MakeProperty(System.Net.Sockets.Socket.prototype, "Connected", 
	System.Net.Sockets.Socket.prototype.get_Connected, null);
JSIL.MakeProperty(System.Net.Sockets.Socket.prototype, "AddressFamily", 
	System.Net.Sockets.Socket.prototype.get_AddressFamily, null);
JSIL.MakeProperty(System.Net.Sockets.Socket.prototype, "ProtocolType", 
	System.Net.Sockets.Socket.prototype.get_ProtocolType, null);
JSIL.MakeProperty(System.Net.Sockets.Socket.prototype, "ReceiveBufferSize", 
	System.Net.Sockets.Socket.prototype.get_ReceiveBufferSize, System.Net.Sockets.Socket.prototype.set_ReceiveBufferSize);
JSIL.MakeProperty(System.Net.Sockets.Socket.prototype, "SendBufferSize", 
	System.Net.Sockets.Socket.prototype.get_SendBufferSize, System.Net.Sockets.Socket.prototype.set_SendBufferSize);
JSIL.MakeProperty(System.Net.Sockets.Socket.prototype, "NoDelay", 
	System.Net.Sockets.Socket.prototype.get_NoDelay, System.Net.Sockets.Socket.prototype.set_NoDelay);
JSIL.MakeProperty(System.Net.Sockets.Socket.prototype, "Ttl", 
	System.Net.Sockets.Socket.prototype.get_Ttl, System.Net.Sockets.Socket.prototype.set_Ttl);
JSIL.MakeProperty(System.Net.Sockets.Socket, "InternalSyncObject", 
	System.Net.Sockets.Socket.get_InternalSyncObject, null);
JSIL.MakeProperty(System.Net.Sockets.Socket.prototype, "ConnectEx", 
	System.Net.Sockets.Socket.prototype.get_ConnectEx, null);
JSIL.MakeProperty(System.Net.Sockets.Socket.prototype, "CleanedUp", 
	System.Net.Sockets.Socket.prototype.get_CleanedUp, null);
Object.defineProperty(System.Net.Sockets.Socket, "DefaultCloseTimeout", {
		"value": -1}
);
System.Net.Sockets.Socket.prototype.m_Handle = null;
System.Net.Sockets.Socket.prototype.m_RightEndPoint = null;
System.Net.Sockets.Socket.prototype.m_RemoteEndPoint = null;
System.Net.Sockets.Socket.prototype.m_IsConnected = false;
System.Net.Sockets.Socket.prototype.addressFamily = 0;
System.Net.Sockets.Socket.prototype.socketType = 0;
System.Net.Sockets.Socket.prototype.protocolType = 0;
System.Net.Sockets.Socket.UseOverlappedIO = false;
System.Net.Sockets.Socket.prototype.m_BoundToThreadPool = false;
System.Net.Sockets.Socket.prototype.m_AsyncEvent = null;
System.Net.Sockets.Socket.prototype.m_RegisteredWait = null;
System.Net.Sockets.Socket.prototype.m_PermittedRemoteAddress = null;
System.Net.Sockets.Socket.prototype.m_ConnectEx = null;
System.Net.Sockets.Socket.s_InternalSyncObject = null;
System.Net.Sockets.Socket.prototype.m_CloseTimeout = 0;
System.Net.Sockets.Socket.prototype.m_IntCleanedUp = 0;
System.Net.Sockets.Socket.s_SupportsIPv4 = false;
System.Net.Sockets.Socket.s_SupportsIPv6 = false;
System.Net.Sockets.Socket.s_OSSupportsIPv6 = false;
System.Net.Sockets.Socket.s_Initialized = false;
System.Net.Sockets.Socket.s_AppDomainId = 0;
System.Net.Sockets.Socket.s_LoggingEnabled = false;
System.Net.Sockets.Socket.prototype.m_PolicyCheck = null;
System.Net.Sockets.Socket.s_ResolveCallback = null;
System.Net.Sockets.Socket.s_EmulateConnectExCallback = null;
System.Net.Sockets.Socket.s_EmulateConnectExSendCallback = null;
System.Net.Sockets.Socket.s_PolicyCheckCompleteCallback = null;
System.Net.Sockets.Socket._cctor = function () {
	System.Net.Sockets.Socket.s_ConnectExGuid = new System.Guid();
	System.Net.Sockets.Socket.s_ConnectExGuid = JSIL.New(System.Guid, "_ctor$4", ["{0x25a207b9,0x0ddf3,0x4660,{0x8e,0xe9,0x76,0xe5,0x8c,0x74,0x06,0x3e}}"]);
};

$asm06.System.Net.Sockets.Socket.StaticConnectAsyncState.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm06.System.Net.Sockets.Socket.StaticConnectAsyncState.prototype.socketType = 0;
$asm06.System.Net.Sockets.Socket.StaticConnectAsyncState.prototype.protocolType = 0;
$asm06.System.Net.Sockets.Socket.StaticConnectAsyncState.prototype.original = null;
$asm06.System.Net.Sockets.Socket.StaticConnectAsyncState.prototype.addresses = null;
$asm06.System.Net.Sockets.Socket.StaticConnectAsyncState.prototype.index = 0;

$asm06.System.IPv4AddressHelper.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm06.System.IPv4AddressHelper.ParseCanonicalName = JSIL.UntranslatableFunction("System.String System.IPv4AddressHelper::ParseCanonicalName(System.String,System.Int32,System.Int32,System.Boolean&)");
$asm06.System.IPv4AddressHelper.ParseHostNumber = JSIL.UntranslatableFunction("System.Int32 System.IPv4AddressHelper::ParseHostNumber(System.String,System.Int32,System.Int32)");
Object.defineProperty($asm06.System.IPv4AddressHelper, "NumberOfLabels", {
		"value": 4}
);

$asm06.System.IPv6AddressHelper.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm06.System.IPv6AddressHelper.ParseCanonicalName = JSIL.UntranslatableFunction("System.String System.IPv6AddressHelper::ParseCanonicalName(System.String,System.Int32,System.Boolean&,System.String&)");
Object.defineProperty($asm06.System.IPv6AddressHelper, "NumberOfLabels", {
		"value": 8}
);
Object.defineProperty($asm06.System.IPv6AddressHelper, "CanonicalNumberFormat", {
		"value": "{0:X4}"}
);

$asm06.System.Net.IPMulticastRequest.prototype.MulticastAddress = 0;
$asm06.System.Net.IPMulticastRequest.prototype.InterfaceAddress = 0;
$asm06.System.Net.IPMulticastRequest.Size = 0;
$asm06.System.Net.IPMulticastRequest._cctor = function () {
	$asm06.System.Net.IPMulticastRequest.Size = System.Runtime.InteropServices.Marshal.SizeOf$1($asm06.System.Net.IPMulticastRequest);
};

$asm06.System.Net.Linger.prototype.OnOff = 0;
$asm06.System.Net.Linger.prototype.Time = 0;
$asm06.System.Net.Linger.Size = 0;
$asm06.System.Net.Linger._cctor = function () {
	$asm06.System.Net.Linger.Size = System.Runtime.InteropServices.Marshal.SizeOf$1($asm06.System.Net.Linger);
};

$asm06.System.Net.WSABuffer.prototype.Length = 0;
$asm06.System.Net.WSABuffer.prototype.Pointer = 0;

$asm06.System.Net.TransmitFileBuffers.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm06.System.Net.TransmitFileBuffers.prototype.preBuffer = 0;
$asm06.System.Net.TransmitFileBuffers.prototype.preBufferLength = 0;
$asm06.System.Net.TransmitFileBuffers.prototype.postBuffer = 0;
$asm06.System.Net.TransmitFileBuffers.prototype.postBufferLength = 0;

$asm06.System.Net.WSAData.prototype.wVersion = 0;
$asm06.System.Net.WSAData.prototype.wHighVersion = 0;
$asm06.System.Net.WSAData.prototype.szDescription = null;
$asm06.System.Net.WSAData.prototype.szSystemStatus = null;
$asm06.System.Net.WSAData.prototype.iMaxSockets = 0;
$asm06.System.Net.WSAData.prototype.iMaxUdpDg = 0;
$asm06.System.Net.WSAData.prototype.lpVendorInfo = 0;

$asm06.System.Net.AddressInfo.prototype.ai_flags = 0;
$asm06.System.Net.AddressInfo.prototype.ai_family = 0;
$asm06.System.Net.AddressInfo.prototype.ai_socktype = 0;
$asm06.System.Net.AddressInfo.prototype.ai_protocol = 0;
$asm06.System.Net.AddressInfo.prototype.ai_addrlen = 0;

$asm06.System.Net.IPv6MulticastRequest.prototype.MulticastAddress = null;
$asm06.System.Net.IPv6MulticastRequest.prototype.InterfaceIndex = 0;
$asm06.System.Net.IPv6MulticastRequest.Size = 0;
$asm06.System.Net.IPv6MulticastRequest._cctor = function () {
	$asm06.System.Net.IPv6MulticastRequest.Size = System.Runtime.InteropServices.Marshal.SizeOf$1($asm06.System.Net.IPv6MulticastRequest);
};

$asm06.System.Net.IPMulticastRequestSource.prototype.MulticastAddress = 0;
$asm06.System.Net.IPMulticastRequestSource.prototype.SourceAddress = 0;
$asm06.System.Net.IPMulticastRequestSource.prototype.InterfaceAddress = 0;
$asm06.System.Net.IPMulticastRequestSource.Size = 0;
$asm06.System.Net.IPMulticastRequestSource._cctor = function () {
	$asm06.System.Net.IPMulticastRequestSource.Size = System.Runtime.InteropServices.Marshal.SizeOf$1($asm06.System.Net.IPMulticastRequestSource);
};

$asm06.System.Net.GroupSourceRequest.prototype._ctor = function (sourceAddress, groupAddress, interfaceIndex) {
	this.InterfaceIndex = interfaceIndex;
	this.Padding = 0;
	var iPEndPoint = JSIL.New(System.Net.IPEndPoint, "_ctor$1", [groupAddress, 0]);
	var socketAddress = iPEndPoint.Serialize();
	this.GroupAddress = JSIL.Array.New(System.Byte, 128);
	System.Buffer.BlockCopy(
		socketAddress.m_Buffer, 
		0, 
		this.GroupAddress, 
		0, 
		socketAddress.m_Size
	);
	iPEndPoint = JSIL.New(System.Net.IPEndPoint, "_ctor$1", [sourceAddress, 0]);
	socketAddress = iPEndPoint.Serialize();
	this.SourceAddress = JSIL.Array.New(System.Byte, 128);
	System.Buffer.BlockCopy(
		socketAddress.m_Buffer, 
		0, 
		this.SourceAddress, 
		0, 
		socketAddress.m_Size
	);
};
$asm06.System.Net.GroupSourceRequest.prototype.InterfaceIndex = 0;
$asm06.System.Net.GroupSourceRequest.prototype.Padding = 0;
$asm06.System.Net.GroupSourceRequest.prototype.GroupAddress = null;
$asm06.System.Net.GroupSourceRequest.prototype.SourceAddress = null;
$asm06.System.Net.GroupSourceRequest.Size = 0;
$asm06.System.Net.GroupSourceRequest._cctor = function () {
	$asm06.System.Net.GroupSourceRequest.Size = System.Runtime.InteropServices.Marshal.SizeOf$1($asm06.System.Net.GroupSourceRequest);
};

$asm06.System.Net.SafeFreeAddrInfo.prototype._ctor = function () {
	Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid.prototype._ctor$0.call(this, true);
};
$asm06.System.Net.SafeFreeAddrInfo.GetAddrInfo = function (nodename, servicename, /* ref */ hints, /* ref */ outAddrInfo, /* ref */ lastError) {
	return $asm06.System.Net.UnsafeNclNativeMethods.SafeNetHandlesXPOrLater.getaddrinfo(
		nodename, 
		servicename, 
		/* ref */ hints, 
		/* ref */ outAddrInfo, 
		/* ref */ lastError
	);
};
$asm06.System.Net.SafeFreeAddrInfo.prototype.ReleaseHandle = function () {
	$asm06.System.Net.UnsafeNclNativeMethods.SafeNetHandlesXPOrLater.freeaddrinfo(this.handle);
	return true;
};

$asm06.System.Net.SafeCloseSocket.prototype._ctor = function () {
	Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid.prototype._ctor$0.call(this, true);
};
$asm06.System.Net.SafeCloseSocket.prototype.get_IsInvalid = function () {
	return (System.Runtime.InteropServices.SafeHandle.prototype.get_IsClosed.call(this) || Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid.prototype.get_IsInvalid.call(this));
};
$asm06.System.Net.SafeCloseSocket.prototype.SetInnerSocket = function (socket) {
	this.m_InnerSocket = socket;
	System.Runtime.InteropServices.SafeHandle.prototype.SetHandle.call(this, socket.DangerousGetHandle());
};
$asm06.System.Net.SafeCloseSocket.CreateSocket$0 = function (socket) {
	var safeCloseSocket = new $asm06.System.Net.SafeCloseSocket();
	$asm06.System.Net.SafeCloseSocket.CreateSocket$1(socket, safeCloseSocket);
	return safeCloseSocket;
};
$asm06.System.Net.SafeCloseSocket.CreateSocket$1 = function (socket, target) {
	if (!((socket === null) || !socket.IsInvalid)) {
		target.SetHandleAsInvalid();
		return;
	}
	var flag = new JSIL.Variable(false);
	try {
		try {
			socket.DangerousAddRef(/* ref */ flag);
		} catch ($exception) {
			if (flag.value) {
				socket.DangerousRelease();
				flag.value = false;
			}
		}
	} finally {
		if (flag.value) {
			target.SetInnerSocket(socket);
			socket.Close();
		} else {
			target.SetHandleAsInvalid();
		}
	}
};
$asm06.System.Net.SafeCloseSocket.CreateWSASocket = function (addressFamily, socketType, protocolType, /* ref */ lastError) {
	return $asm06.System.Net.SafeCloseSocket.CreateSocket$0($asm06.System.Net.SafeCloseSocket.InnerSafeCloseSocket.CreateWSASocket(addressFamily, socketType, protocolType, /* ref */ lastError));
};
$asm06.System.Net.SafeCloseSocket.prototype.ReleaseHandle = function () {
	this.m_Released = true;
	var innerSafeCloseSocket = (this.m_InnerSocket === null) ? null : System.Threading.Interlocked.Exchange$b1($asm06.System.Net.SafeCloseSocket.InnerSafeCloseSocket)(/* ref */ new JSIL.MemberReference(this, "m_InnerSocket"), null);
	if (innerSafeCloseSocket !== null) {
		innerSafeCloseSocket.DangerousRelease();
	}
	return true;
};
$asm06.System.Net.SafeCloseSocket.prototype.CloseAsIs = function () {
	try {
	} finally {
		var innerSafeCloseSocket = (this.m_InnerSocket === null) ? null : System.Threading.Interlocked.Exchange$b1($asm06.System.Net.SafeCloseSocket.InnerSafeCloseSocket)(/* ref */ new JSIL.MemberReference(this, "m_InnerSocket"), null);
		System.Runtime.InteropServices.SafeHandle.prototype.Close.call(this);
		if (innerSafeCloseSocket !== null) {
		__loop0__: 
			while (!this.m_Released) {
				System.Threading.Thread.SpinWait(1);
			}
			innerSafeCloseSocket.BlockingRelease();
		}
	}
};
JSIL.OverloadedMethod($asm06.System.Net.SafeCloseSocket, "CreateSocket", [
		["CreateSocket$0", [$asm06.System.Net.SafeCloseSocket.InnerSafeCloseSocket]], 
		["CreateSocket$1", [$asm06.System.Net.SafeCloseSocket.InnerSafeCloseSocket, $asm06.System.Net.SafeCloseSocket]]
	]);
JSIL.MakeProperty($asm06.System.Net.SafeCloseSocket.prototype, "IsInvalid", 
	$asm06.System.Net.SafeCloseSocket.prototype.get_IsInvalid, null);
$asm06.System.Net.SafeCloseSocket.prototype.m_InnerSocket = null;
$asm06.System.Net.SafeCloseSocket.prototype.m_Released = null;

$asm06.System.Net.SafeCloseSocket.InnerSafeCloseSocket.prototype._ctor = function () {
	Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid.prototype._ctor$0.call(this, true);
};
$asm06.System.Net.SafeCloseSocket.InnerSafeCloseSocket.prototype.get_IsInvalid = function () {
	return (System.Runtime.InteropServices.SafeHandle.prototype.get_IsClosed.call(this) || Microsoft.Win32.SafeHandles.SafeHandleMinusOneIsInvalid.prototype.get_IsInvalid.call(this));
};
$asm06.System.Net.SafeCloseSocket.InnerSafeCloseSocket.prototype.ReleaseHandle = function () {
	var linger = new JSIL.Variable(new $asm06.System.Net.Linger());
	var socketError = new JSIL.Variable(System.Net.Sockets.SocketError.Success);
	if (this.m_Blockable) {
		var socketError2 = $asm06.System.Net.UnsafeNclNativeMethods.SafeNetHandles.closesocket(this.handle, /* ref */ socketError);
		if (socketError2 === System.Net.Sockets.SocketError.SocketError) {
			socketError2 = socketError.value;
		}
		return (socketError2 === System.Net.Sockets.SocketError.Success);
	}
	linger.value.OnOff = 1;
	linger.value.Time = 0;
	socketError2 = $asm06.System.Net.UnsafeNclNativeMethods.SafeNetHandles.setsockopt(
		this.handle, 
		$asm06.System.Net.Sockets.SocketOptionLevel.Socket, 
		$asm06.System.Net.Sockets.SocketOptionName.Linger, 
		/* ref */ linger, 
		$asm06.System.Net.Linger.Size, 
		/* ref */ socketError
	);
	if (socketError2 === System.Net.Sockets.SocketError.SocketError) {
		socketError2 = socketError.value;
	}
	if (!(!JSIL.Cast(socketError2, System.Boolean) || 
			(socketError2 === System.Net.Sockets.SocketError.InvalidArgument) || (socketError2 === System.Net.Sockets.SocketError.ProtocolOption))) {
		return false;
	}
	socketError2 = $asm06.System.Net.UnsafeNclNativeMethods.SafeNetHandles.closesocket(this.handle, /* ref */ socketError);
	return (socketError2 === System.Net.Sockets.SocketError.Success);
};
$asm06.System.Net.SafeCloseSocket.InnerSafeCloseSocket.prototype.BlockingRelease = function () {
	this.m_Blockable = true;
	System.Runtime.InteropServices.SafeHandle.prototype.DangerousRelease.call(this);
};
$asm06.System.Net.SafeCloseSocket.InnerSafeCloseSocket.CreateWSASocket = function (addressFamily, socketType, protocolType, /* ref */ lastError) {
	var innerSafeCloseSocket = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSASocket(
		addressFamily, 
		socketType, 
		protocolType, 
		System.IntPtr.Zero, 
		0, 
		$asm06.System.Net.SocketConstructorFlags.WSA_FLAG_OVERLAPPED, 
		/* ref */ lastError
	);
	if (innerSafeCloseSocket.IsInvalid) {
		innerSafeCloseSocket.SetHandleAsInvalid();
	}
	return innerSafeCloseSocket;
};
JSIL.MakeProperty($asm06.System.Net.SafeCloseSocket.InnerSafeCloseSocket.prototype, "IsInvalid", 
	$asm06.System.Net.SafeCloseSocket.InnerSafeCloseSocket.prototype.get_IsInvalid, null);
$asm06.System.Net.SafeCloseSocket.InnerSafeCloseSocket.tempBuffer = null;
$asm06.System.Net.SafeCloseSocket.InnerSafeCloseSocket.prototype.m_Blockable = false;
$asm06.System.Net.SafeCloseSocket.InnerSafeCloseSocket._cctor = function () {
	$asm06.System.Net.SafeCloseSocket.InnerSafeCloseSocket.tempBuffer = JSIL.Array.New(System.Byte, 1);
};

System.Net.EndPoint.prototype.get_AddressFamily = function () {
	throw JSIL.New(System.NotImplementedException, "_ctor$1", [$asm06.System.SR.GetString$2("net_PropertyNotImplementedException")]);
};
System.Net.EndPoint.prototype.Serialize = function () {
	throw JSIL.New(System.NotImplementedException, "_ctor$1", [$asm06.System.SR.GetString$2("net_MethodNotImplementedException")]);
};
System.Net.EndPoint.prototype.Create = function (socketAddress) {
	throw JSIL.New(System.NotImplementedException, "_ctor$1", [$asm06.System.SR.GetString$2("net_MethodNotImplementedException")]);
};
System.Net.EndPoint.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
JSIL.MakeProperty(System.Net.EndPoint.prototype, "AddressFamily", 
	System.Net.EndPoint.prototype.get_AddressFamily, null);

$asm06.System.Net.ResolvedDnsEndPoint.prototype._ctor = function (family, addrs, port) {
	System.Net.EndPoint.prototype._ctor.call(this);
	this.m_Index = -1;
	this.m_Addresses = addrs;
	this.m_Family = family;
	this.m_Port = port;
};
$asm06.System.Net.ResolvedDnsEndPoint.prototype.GetNextAddress = function () {
__loop0__: 
	while (++this.m_Index < this.m_Addresses.length) {
		if (this.m_Addresses[this.m_Index].AddressFamily === this.m_Family) {
			return JSIL.New(System.Net.IPEndPoint, "_ctor$1", [this.m_Addresses[this.m_Index], this.m_Port]);
		}
	}
	return null;
};
$asm06.System.Net.ResolvedDnsEndPoint.prototype.m_Family = 0;
$asm06.System.Net.ResolvedDnsEndPoint.prototype.m_Addresses = null;
$asm06.System.Net.ResolvedDnsEndPoint.prototype.m_Port = 0;
$asm06.System.Net.ResolvedDnsEndPoint.prototype.m_Index = 0;

System.Net.DnsEndPoint.prototype._ctor$0 = function (host, port) {
	this._ctor$1(host, port, System.Net.Sockets.AddressFamily.Unspecified);
};
System.Net.DnsEndPoint.prototype._ctor$1 = function (host, port, addressFamily) {
	System.Net.EndPoint.prototype._ctor.call(this);
	if (host === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["host"]);
	}
	if (System.String.IsNullOrEmpty(host)) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm06.System.SR.GetString$0("net_emptystringcall", ["host"])]);
	}
	if (!((port >= 0) && (port <= 65535))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["port"]);
	}
	this.m_Host = host;
	this.m_Port = port;
	this.SetAddressFamily(addressFamily);
};
System.Net.DnsEndPoint.prototype.Equals = function (comparand) {
	var dnsEndPoint = JSIL.TryCast(comparand, System.Net.DnsEndPoint);
	return (dnsEndPoint && 
		!((this.m_Family !== dnsEndPoint.m_Family) || 
			(this.m_Port !== dnsEndPoint.m_Port)) && (this.m_Host == dnsEndPoint.m_Host));
};
System.Net.DnsEndPoint.prototype.GetHashCode = function () {
	return System.StringComparer.InvariantCultureIgnoreCase.GetHashCode$1(this.toString());
};
System.Net.DnsEndPoint.prototype.SetAddressFamily = function (addressFamily) {
	if (!((addressFamily === System.Net.Sockets.AddressFamily.InterNetwork) || 
			(addressFamily === System.Net.Sockets.AddressFamily.InterNetworkV6) || !JSIL.Cast(addressFamily, System.Boolean))) {
		throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm06.System.SR.GetString$2("net_sockets_invalid_optionValue_all"), "addressFamily"]);
	}
	this.m_Family = addressFamily;
};
System.Net.DnsEndPoint.prototype.toString = function () {
	return JSIL.ConcatString.apply(null, [this.m_Family, "/", this.m_Host, ":", this.m_Port]);
};
System.Net.DnsEndPoint.prototype.get_Host = function () {
	return this.m_Host;
};
System.Net.DnsEndPoint.prototype.get_AddressFamily = function () {
	return this.m_Family;
};
System.Net.DnsEndPoint.prototype.get_Port = function () {
	return this.m_Port;
};
JSIL.OverloadedMethod(System.Net.DnsEndPoint.prototype, "_ctor", [
		["_ctor$0", [System.String, System.Int32]], 
		["_ctor$1", [System.String, System.Int32, System.Net.Sockets.AddressFamily]]
	]);
JSIL.MakeProperty(System.Net.DnsEndPoint.prototype, "Host", 
	System.Net.DnsEndPoint.prototype.get_Host, null);
JSIL.MakeProperty(System.Net.DnsEndPoint.prototype, "AddressFamily", 
	System.Net.DnsEndPoint.prototype.get_AddressFamily, null);
JSIL.MakeProperty(System.Net.DnsEndPoint.prototype, "Port", 
	System.Net.DnsEndPoint.prototype.get_Port, null);
System.Net.DnsEndPoint.prototype.m_Host = null;
System.Net.DnsEndPoint.prototype.m_Port = 0;
System.Net.DnsEndPoint.prototype.m_Family = 0;

System.Net.IPEndPoint.prototype.get_AddressFamily = function () {
	return this.m_Address.AddressFamily;
};
System.Net.IPEndPoint.prototype._ctor$0 = function (address, port) {
	System.Net.EndPoint.prototype._ctor.call(this);
	if (!$asm06.System.Net.ValidationHelper.ValidateTcpPort(port)) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["port"]);
	}
	this.m_Port = port;
	this.m_Address = JSIL.New(System.Net.IPAddress, "_ctor$0", [address]);
};
System.Net.IPEndPoint.prototype._ctor$1 = function (address, port) {
	System.Net.EndPoint.prototype._ctor.call(this);
	if (address === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["address"]);
	}
	if (!$asm06.System.Net.ValidationHelper.ValidateTcpPort(port)) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["port"]);
	}
	this.m_Port = port;
	this.m_Address = address;
};
System.Net.IPEndPoint.prototype.get_Address = function () {
	return this.m_Address;
};
System.Net.IPEndPoint.prototype.set_Address = function (value) {
	this.m_Address = value;
};
System.Net.IPEndPoint.prototype.get_Port = function () {
	return this.m_Port;
};
System.Net.IPEndPoint.prototype.set_Port = function (value) {
	if (!$asm06.System.Net.ValidationHelper.ValidateTcpPort(value)) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["value"]);
	}
	this.m_Port = value;
};
System.Net.IPEndPoint.prototype.toString = function () {
	return (this.Address.toString() + ":" + (this.Port).toString());
};
System.Net.IPEndPoint.prototype.Serialize = function () {
	if (this.m_Address.AddressFamily === System.Net.Sockets.AddressFamily.InterNetworkV6) {
		var socketAddress = JSIL.New(System.Net.SocketAddress, "_ctor$1", [this.AddressFamily, 28]);
		var port = this.Port;
		socketAddress.set_Item(2, (port >> 8));
		socketAddress.set_Item(3, port);
		socketAddress.set_Item(4, 0);
		socketAddress.set_Item(5, 0);
		socketAddress.set_Item(6, 0);
		socketAddress.set_Item(7, 0);
		var scopeId = this.Address.ScopeId;
		socketAddress.set_Item(24, scopeId);
		socketAddress.set_Item(25, (scopeId >> 8));
		socketAddress.set_Item(26, (scopeId >> 16));
		socketAddress.set_Item(27, (scopeId >> 24));
		var addressBytes = this.Address.GetAddressBytes();
	__loop0__: 
		for (var i = 0; i < addressBytes.length; ++i) {
			socketAddress.set_Item((8 + i), addressBytes[i]);
		}
		return socketAddress;
	}
	var socketAddress2 = JSIL.New(System.Net.SocketAddress, "_ctor$1", [this.m_Address.AddressFamily, 16]);
	socketAddress2.set_Item(2, (this.Port >> 8));
	socketAddress2.set_Item(3, this.Port);
	socketAddress2.set_Item(4, this.Address.m_Address);
	socketAddress2.set_Item(5, (this.Address.m_Address >> 8));
	socketAddress2.set_Item(6, (this.Address.m_Address >> 16));
	socketAddress2.set_Item(7, (this.Address.m_Address >> 24));
	return socketAddress2;
};
System.Net.IPEndPoint.prototype.Create = function (socketAddress) {
	if (socketAddress === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["socketAddress"]);
	}
	if (socketAddress.Family !== this.AddressFamily) {
		throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm06.System.SR.GetString$0("net_InvalidAddressFamily", [socketAddress.Family.toString(), JSIL.GetType(this).FullName, this.AddressFamily.toString()]), "socketAddress"]);
	}
	if (socketAddress.Size < 8) {
		throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm06.System.SR.GetString$0("net_InvalidSocketAddressSize", [JSIL.GetType(socketAddress).FullName, JSIL.GetType(this).FullName]), "socketAddress"]);
	}
	if (this.AddressFamily === System.Net.Sockets.AddressFamily.InterNetworkV6) {
		var array = JSIL.Array.New(System.Byte, 16);
	__loop0__: 
		for (var i = 0; i < array.length; ++i) {
			array[i] = socketAddress.get_Item((i + 8));
		}
		var port = (((socketAddress.get_Item(2) << 8) & 65280) | socketAddress.get_Item(3));
		var scopeid = ((((socketAddress.get_Item(27) << 24) + (socketAddress.get_Item(26) << 16)) + (socketAddress.get_Item(25) << 8)) + socketAddress.get_Item(24));
		return JSIL.New(System.Net.IPEndPoint, "_ctor$1", [JSIL.New(System.Net.IPAddress, "_ctor$1", [array, scopeid]), port]);
	}
	var port2 = (((socketAddress.get_Item(2) << 8) & 65280) | socketAddress.get_Item(3));
	var address = (((((socketAddress.get_Item(4) & 255) | ((socketAddress.get_Item(5) << 8) & 65280)) | ((socketAddress.get_Item(6) << 16) & 16711680)) | (socketAddress.get_Item(7) << 24)) & -1);
	return JSIL.New(System.Net.IPEndPoint, "_ctor$0", [address, port2]);
};
System.Net.IPEndPoint.prototype.Equals = function (comparand) {
	var iPEndPoint = JSIL.TryCast(comparand, System.Net.IPEndPoint);
	return (iPEndPoint && 
		iPEndPoint.m_Address.Equals(this.m_Address) && (iPEndPoint.m_Port === this.m_Port));
};
System.Net.IPEndPoint.prototype.GetHashCode = function () {
	return (this.m_Address.GetHashCode() ^ this.m_Port);
};
System.Net.IPEndPoint.prototype.Snapshot = function () {
	return JSIL.New(System.Net.IPEndPoint, "_ctor$1", [this.Address.Snapshot(), this.Port]);
};
JSIL.OverloadedMethod(System.Net.IPEndPoint.prototype, "_ctor", [
		["_ctor$0", [System.Int64, System.Int32]], 
		["_ctor$1", [System.Net.IPAddress, System.Int32]]
	]);
JSIL.MakeProperty(System.Net.IPEndPoint.prototype, "AddressFamily", 
	System.Net.IPEndPoint.prototype.get_AddressFamily, null);
JSIL.MakeProperty(System.Net.IPEndPoint.prototype, "Address", 
	System.Net.IPEndPoint.prototype.get_Address, System.Net.IPEndPoint.prototype.set_Address);
JSIL.MakeProperty(System.Net.IPEndPoint.prototype, "Port", 
	System.Net.IPEndPoint.prototype.get_Port, System.Net.IPEndPoint.prototype.set_Port);
Object.defineProperty(System.Net.IPEndPoint, "MinPort", {
		"value": 0}
);
Object.defineProperty(System.Net.IPEndPoint, "MaxPort", {
		"value": 65535}
);
Object.defineProperty(System.Net.IPEndPoint, "AnyPort", {
		"value": 0}
);
System.Net.IPEndPoint.prototype.m_Address = null;
System.Net.IPEndPoint.prototype.m_Port = 0;
System.Net.IPEndPoint.Any = null;
System.Net.IPEndPoint.IPv6Any = null;
System.Net.IPEndPoint._cctor = function () {
	System.Net.IPEndPoint.Any = JSIL.New(System.Net.IPEndPoint, "_ctor$1", [System.Net.IPAddress.Any, 0]);
	System.Net.IPEndPoint.IPv6Any = JSIL.New(System.Net.IPEndPoint, "_ctor$1", [System.Net.IPAddress.IPv6Any, 0]);
};

System.Net.IPAddress.prototype._ctor$0 = function (newAddress) {
	this.m_Family = System.Net.Sockets.AddressFamily.InterNetwork;
	this.m_Numbers = JSIL.Array.New(System.UInt16, 8);
	System.Object.prototype._ctor.call(this);
	if (!((newAddress >= 0) && (newAddress <= -1))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["newAddress"]);
	}
	this.m_Address = newAddress;
};
System.Net.IPAddress.prototype._ctor$1 = function (address, scopeid) {
	this.m_Family = System.Net.Sockets.AddressFamily.InterNetwork;
	this.m_Numbers = JSIL.Array.New(System.UInt16, 8);
	System.Object.prototype._ctor.call(this);
	if (address === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["address"]);
	}
	if (address.length !== 16) {
		throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm06.System.SR.GetString$2("dns_bad_ip_address"), "address"]);
	}
	this.m_Family = System.Net.Sockets.AddressFamily.InterNetworkV6;
__loop0__: 
	for (var i = 0; i < 8; ++i) {
		this.m_Numbers[i] = ((address[(i * 2)] * 256) + address[((i * 2) + 1)]);
	}
	if (!((scopeid >= 0) && (scopeid <= -1))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["scopeid"]);
	}
	this.m_ScopeId = scopeid;
};
System.Net.IPAddress.prototype._ctor$2 = function (address, scopeid) {
	this.m_Family = System.Net.Sockets.AddressFamily.InterNetwork;
	this.m_Numbers = JSIL.Array.New(System.UInt16, 8);
	System.Object.prototype._ctor.call(this);
	this.m_Family = System.Net.Sockets.AddressFamily.InterNetworkV6;
	this.m_Numbers = address;
	this.m_ScopeId = scopeid;
};
System.Net.IPAddress.prototype._ctor$3 = function (address) {
	this.m_Family = System.Net.Sockets.AddressFamily.InterNetwork;
	this.m_Numbers = JSIL.Array.New(System.UInt16, 8);
	System.Object.prototype._ctor.call(this);
	if (address === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["address"]);
	}
	if (!((address.length === 4) || (address.length === 16))) {
		throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm06.System.SR.GetString$2("dns_bad_ip_address"), "address"]);
	}
	if (address.length === 4) {
		this.m_Family = System.Net.Sockets.AddressFamily.InterNetwork;
		this.m_Address = (((((address[3] << 24) | (address[2] << 16)) | (address[1] << 8)) | address[0]) & -1);
		return;
	}
	this.m_Family = System.Net.Sockets.AddressFamily.InterNetworkV6;
__loop0__: 
	for (var i = 0; i < 8; ++i) {
		this.m_Numbers[i] = ((address[(i * 2)] * 256) + address[((i * 2) + 1)]);
	}
};
System.Net.IPAddress.prototype._ctor$4 = function (newAddress) {
	this.m_Family = System.Net.Sockets.AddressFamily.InterNetwork;
	this.m_Numbers = JSIL.Array.New(System.UInt16, 8);
	System.Object.prototype._ctor.call(this);
	this.m_Address = (newAddress & -1);
};
System.Net.IPAddress.TryParse = function (ipString, /* ref */ address) {
	address.value = System.Net.IPAddress.InternalParse(ipString, true);
	return (address.value !== null);
};
System.Net.IPAddress.Parse = function (ipString) {
	return System.Net.IPAddress.InternalParse(ipString, false);
};
System.Net.IPAddress.InternalParse = JSIL.UntranslatableFunction("System.Net.IPAddress System.Net.IPAddress::InternalParse(System.String,System.Boolean)");
System.Net.IPAddress.prototype.get_Address = function () {
	if (this.m_Family === System.Net.Sockets.AddressFamily.InterNetworkV6) {
		throw JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [System.Net.Sockets.SocketError.OperationNotSupported]);
	}
	return this.m_Address;
};
System.Net.IPAddress.prototype.set_Address = function (value) {
	if (this.m_Family === System.Net.Sockets.AddressFamily.InterNetworkV6) {
		throw JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [System.Net.Sockets.SocketError.OperationNotSupported]);
	}
	if (this.m_Address !== value) {
		this.m_ToString = null;
		this.m_Address = value;
	}
};
System.Net.IPAddress.prototype.GetAddressBytes = function () {
	if (this.m_Family === System.Net.Sockets.AddressFamily.InterNetworkV6) {
		var array = JSIL.Array.New(System.Byte, 16);
		var num = 0;
	__loop0__: 
		for (var i = 0; i < 8; ++i) {
			array[num++] = ((this.m_Numbers[i] >> 8) & 255);
			array[num++] = (this.m_Numbers[i] & 255);
		}
	} else {
		array = JSIL.Array.New(System.Byte, [this.m_Address, (this.m_Address >> 8), (this.m_Address >> 16), (this.m_Address >> 24)]);
	}
	return array;
};
System.Net.IPAddress.prototype.get_AddressFamily = function () {
	return this.m_Family;
};
System.Net.IPAddress.prototype.get_ScopeId = function () {
	if (this.m_Family === System.Net.Sockets.AddressFamily.InterNetwork) {
		throw JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [System.Net.Sockets.SocketError.OperationNotSupported]);
	}
	return this.m_ScopeId;
};
System.Net.IPAddress.prototype.set_ScopeId = function (value) {
	if (this.m_Family === System.Net.Sockets.AddressFamily.InterNetwork) {
		throw JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [System.Net.Sockets.SocketError.OperationNotSupported]);
	}
	if (!((value >= 0) && (value <= -1))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["value"]);
	}
	if (this.m_ScopeId !== value) {
		this.m_Address = value;
		this.m_ScopeId = value;
	}
};
System.Net.IPAddress.prototype.toString = JSIL.UntranslatableFunction("System.String System.Net.IPAddress::ToString()");
System.Net.IPAddress.HostToNetworkOrder$0 = function (host) {
	return (((System.Net.IPAddress.HostToNetworkOrder$1(host) & -1) << 32) | (System.Net.IPAddress.HostToNetworkOrder$1((host >> 32)) & -1));
};
System.Net.IPAddress.HostToNetworkOrder$1 = function (host) {
	return (((System.Net.IPAddress.HostToNetworkOrder$2(host) & 65535) << 16) | (System.Net.IPAddress.HostToNetworkOrder$2((host >> 16)) & 65535));
};
System.Net.IPAddress.HostToNetworkOrder$2 = function (host) {
	return (((host & 255) << 8) | ((host >> 8) & 255));
};
System.Net.IPAddress.NetworkToHostOrder$0 = function (network) {
	return System.Net.IPAddress.HostToNetworkOrder$0(network);
};
System.Net.IPAddress.NetworkToHostOrder$1 = function (network) {
	return System.Net.IPAddress.HostToNetworkOrder$1(network);
};
System.Net.IPAddress.NetworkToHostOrder$2 = function (network) {
	return System.Net.IPAddress.HostToNetworkOrder$2(network);
};
System.Net.IPAddress.IsLoopback = function (address) {
	if (address === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["address"]);
	}
	if (address.m_Family === System.Net.Sockets.AddressFamily.InterNetworkV6) {
		return address.Equals(System.Net.IPAddress.IPv6Loopback);
	}
	return ((address.m_Address & 127) === (System.Net.IPAddress.Loopback.m_Address & 127));
};
System.Net.IPAddress.prototype.get_IsBroadcast = function () {
	return ((this.m_Family !== System.Net.Sockets.AddressFamily.InterNetworkV6) && (this.m_Address === System.Net.IPAddress.Broadcast.m_Address));
};
System.Net.IPAddress.prototype.get_IsMulticast = function () {
	if (this.m_Family === System.Net.Sockets.AddressFamily.InterNetworkV6) {
		return this.IsIPv6Multicast;
	}
	return ((this.m_Address & 224) === 224);
};
System.Net.IPAddress.prototype.get_IsIPv6Multicast = function () {
	return ((this.m_Family === System.Net.Sockets.AddressFamily.InterNetworkV6) && ((this.m_Numbers[0] & 65280) === 65280));
};
System.Net.IPAddress.prototype.get_IsIPv6LinkLocal = function () {
	return ((this.m_Family === System.Net.Sockets.AddressFamily.InterNetworkV6) && ((this.m_Numbers[0] & 65472) === 65152));
};
System.Net.IPAddress.prototype.get_IsIPv6SiteLocal = function () {
	return ((this.m_Family === System.Net.Sockets.AddressFamily.InterNetworkV6) && ((this.m_Numbers[0] & 65472) === 65216));
};
System.Net.IPAddress.prototype.Equals$0 = function (comparandObj, compareScopeId) {
	var iPAddress = JSIL.TryCast(comparandObj, System.Net.IPAddress);
	if (iPAddress === null) {
		return false;
	}
	if (this.m_Family !== iPAddress.m_Family) {
		return false;
	}
	if (this.m_Family === System.Net.Sockets.AddressFamily.InterNetworkV6) {
	__loop0__: 
		for (var i = 0; i < 8; ++i) {
			if (iPAddress.m_Numbers[i] !== this.m_Numbers[i]) {
				return false;
			}
		}
		return ((iPAddress.m_ScopeId === this.m_ScopeId) || !compareScopeId);
	}
	return (iPAddress.m_Address === this.m_Address);
};
System.Net.IPAddress.prototype.Equals$1 = function (comparand) {
	return this.Equals$0(comparand, true);
};
System.Net.IPAddress.prototype.GetHashCode = function () {
	if (this.m_Family === System.Net.Sockets.AddressFamily.InterNetworkV6) {
		if (this.m_HashCode === 0) {
			this.m_HashCode = System.StringComparer.InvariantCultureIgnoreCase.GetHashCode$1(this.toString());
		}
		return this.m_HashCode;
	}
	return this.m_Address;
};
System.Net.IPAddress.prototype.Snapshot = function () {
	var family = this.m_Family;
	if (family === System.Net.Sockets.AddressFamily.InterNetwork) {
		return JSIL.New(System.Net.IPAddress, "_ctor$0", [this.m_Address]);
	}
	if (family !== System.Net.Sockets.AddressFamily.InterNetworkV6) {
		throw new $asm06.System.Net.InternalException();
	}
	return JSIL.New(System.Net.IPAddress, "_ctor$2", [this.m_Numbers, this.m_ScopeId]);
};
JSIL.OverloadedMethod(System.Net.IPAddress.prototype, "_ctor", [
		["_ctor$0", [System.Int64]], 
		["_ctor$1", [System.Array.Of(System.Byte), System.Int64]], 
		["_ctor$2", [System.Array.Of(System.UInt16), System.UInt32]], 
		["_ctor$3", [System.Array.Of(System.Byte)]], 
		["_ctor$4", [System.Int32]]
	]);
JSIL.OverloadedMethod(System.Net.IPAddress, "HostToNetworkOrder", [
		["HostToNetworkOrder$0", [System.Int64]], 
		["HostToNetworkOrder$1", [System.Int32]], 
		["HostToNetworkOrder$2", [System.Int16]]
	]);
JSIL.OverloadedMethod(System.Net.IPAddress, "NetworkToHostOrder", [
		["NetworkToHostOrder$0", [System.Int64]], 
		["NetworkToHostOrder$1", [System.Int32]], 
		["NetworkToHostOrder$2", [System.Int16]]
	]);
JSIL.OverloadedMethod(System.Net.IPAddress.prototype, "Equals", [
		["Equals$0", [System.Object, System.Boolean]], 
		["Equals$1", [System.Object]]
	]);
JSIL.MakeProperty(System.Net.IPAddress.prototype, "Address", 
	System.Net.IPAddress.prototype.get_Address, System.Net.IPAddress.prototype.set_Address);
JSIL.MakeProperty(System.Net.IPAddress.prototype, "AddressFamily", 
	System.Net.IPAddress.prototype.get_AddressFamily, null);
JSIL.MakeProperty(System.Net.IPAddress.prototype, "ScopeId", 
	System.Net.IPAddress.prototype.get_ScopeId, System.Net.IPAddress.prototype.set_ScopeId);
JSIL.MakeProperty(System.Net.IPAddress.prototype, "IsBroadcast", 
	System.Net.IPAddress.prototype.get_IsBroadcast, null);
JSIL.MakeProperty(System.Net.IPAddress.prototype, "IsMulticast", 
	System.Net.IPAddress.prototype.get_IsMulticast, null);
JSIL.MakeProperty(System.Net.IPAddress.prototype, "IsIPv6Multicast", 
	System.Net.IPAddress.prototype.get_IsIPv6Multicast, null);
JSIL.MakeProperty(System.Net.IPAddress.prototype, "IsIPv6LinkLocal", 
	System.Net.IPAddress.prototype.get_IsIPv6LinkLocal, null);
JSIL.MakeProperty(System.Net.IPAddress.prototype, "IsIPv6SiteLocal", 
	System.Net.IPAddress.prototype.get_IsIPv6SiteLocal, null);
Object.defineProperty(System.Net.IPAddress, "LoopbackMask", {
		"value": 127}
);
Object.defineProperty(System.Net.IPAddress, "InaddrNoneString", {
		"value": "255.255.255.255"}
);
Object.defineProperty(System.Net.IPAddress, "InaddrNoneStringHex", {
		"value": "0xff.0xff.0xff.0xff"}
);
Object.defineProperty(System.Net.IPAddress, "InaddrNoneStringOct", {
		"value": "0377.0377.0377.0377"}
);
Object.defineProperty(System.Net.IPAddress, "IPv4AddressBytes", {
		"value": 4}
);
Object.defineProperty(System.Net.IPAddress, "IPv6AddressBytes", {
		"value": 16}
);
Object.defineProperty(System.Net.IPAddress, "NumberOfLabels", {
		"value": 8}
);
System.Net.IPAddress.Any = null;
System.Net.IPAddress.Loopback = null;
System.Net.IPAddress.Broadcast = null;
System.Net.IPAddress.None = null;
System.Net.IPAddress.prototype.m_Address = 0;
System.Net.IPAddress.prototype.m_ToString = null;
System.Net.IPAddress.IPv6Any = null;
System.Net.IPAddress.IPv6Loopback = null;
System.Net.IPAddress.IPv6None = null;
System.Net.IPAddress.prototype.m_Family = 0;
System.Net.IPAddress.prototype.m_Numbers = null;
System.Net.IPAddress.prototype.m_ScopeId = 0;
System.Net.IPAddress.prototype.m_HashCode = 0;
System.Net.IPAddress._cctor = function () {
	System.Net.IPAddress.Any = JSIL.New(System.Net.IPAddress, "_ctor$4", [0]);
	System.Net.IPAddress.Loopback = JSIL.New(System.Net.IPAddress, "_ctor$4", [16777343]);
	System.Net.IPAddress.Broadcast = JSIL.New(System.Net.IPAddress, "_ctor$0", [-1]);
	System.Net.IPAddress.None = System.Net.IPAddress.Broadcast;
	var address = JSIL.Array.New(System.Byte, 16);
	System.Net.IPAddress.IPv6Any = JSIL.New(System.Net.IPAddress, "_ctor$1", [address, 0]);
	System.Net.IPAddress.IPv6Loopback = JSIL.New(System.Net.IPAddress, "_ctor$1", [JSIL.Array.New(System.Byte, [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]), 0]);
	var address2 = JSIL.Array.New(System.Byte, 16);
	System.Net.IPAddress.IPv6None = JSIL.New(System.Net.IPAddress, "_ctor$1", [address2, 0]);
};

System.Net.SocketAddress.prototype.get_Family = function () {
	return (this.m_Buffer[0] | (this.m_Buffer[1] << 8));
};
System.Net.SocketAddress.prototype.get_Size = function () {
	return this.m_Size;
};
System.Net.SocketAddress.prototype.get_Item = function (offset) {
	if (!((offset >= 0) && (offset < this.Size))) {
		throw JSIL.New(System.IndexOutOfRangeException, "_ctor$0", []);
	}
	return this.m_Buffer[offset];
};
System.Net.SocketAddress.prototype.set_Item = function (offset, value) {
	if (!((offset >= 0) && (offset < this.Size))) {
		throw JSIL.New(System.IndexOutOfRangeException, "_ctor$0", []);
	}
	if (this.m_Buffer[offset] !== value) {
		this.m_changed = true;
	}
	this.m_Buffer[offset] = value;
};
System.Net.SocketAddress.prototype._ctor$0 = function (family) {
	this._ctor$1(family, 32);
};
System.Net.SocketAddress.prototype._ctor$1 = function (family, size) {
	this.m_changed = true;
	System.Object.prototype._ctor.call(this);
	if (size < 2) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["size"]);
	}
	this.m_Size = size;
	this.m_Buffer = JSIL.Array.New(System.Byte, ((Math.floor(size / System.IntPtr.Size) + 2) * System.IntPtr.Size));
	this.m_Buffer[0] = Math.floor(family);
	this.m_Buffer[1] = (Math.floor(family) >> 8);
};
System.Net.SocketAddress.prototype.CopyAddressSizeIntoBuffer = function () {
	this.m_Buffer[(this.m_Buffer.length - System.IntPtr.Size)] = this.m_Size;
	this.m_Buffer[((this.m_Buffer.length - System.IntPtr.Size) + 1)] = (this.m_Size >> 8);
	this.m_Buffer[((this.m_Buffer.length - System.IntPtr.Size) + 2)] = (this.m_Size >> 16);
	this.m_Buffer[((this.m_Buffer.length - System.IntPtr.Size) + 3)] = (this.m_Size >> 24);
};
System.Net.SocketAddress.prototype.GetAddressSizeOffset = function () {
	return (this.m_Buffer.length - System.IntPtr.Size);
};
System.Net.SocketAddress.prototype.SetSize = function (ptr) {
	this.m_Size = JSIL.UntranslatableInstruction("ldobj:Int32([mscorlib]System.Int32, call:void*[exp:int32*](IntPtr::op_Explicit, ldloc:IntPtr(ptr)))");
};
System.Net.SocketAddress.prototype.Equals = function (comparand) {
	var socketAddress = JSIL.TryCast(comparand, System.Net.SocketAddress);
	if (!((socketAddress !== null) && (this.Size === socketAddress.Size))) {
		return false;
	}
__loop0__: 
	for (var i = 0; i < this.Size; ++i) {
		if (this.get_Item(i) !== socketAddress.get_Item(i)) {
			return false;
		}
	}
	return true;
};
System.Net.SocketAddress.prototype.GetHashCode = function () {
	if (this.m_changed) {
		this.m_changed = false;
		this.m_hash = 0;
		var num = (this.Size & -4);
	__loop0__: 
		for (var i = 0; i < num; i += 4) {
			this.m_hash = (this.m_hash ^ (((this.m_Buffer[i] | (this.m_Buffer[(i + 1)] << 8)) | (this.m_Buffer[(i + 2)] << 16)) | (this.m_Buffer[(i + 3)] << 24)));
		}
		if (this.Size & 3) {
			var num2 = 0;
			var num3 = 0;
		__loop1__: 
			while (i < this.Size) {
				num2 = (num2 | (this.m_Buffer[i] << (num3 & 31)));
				num3 += 8;
				++i;
			}
			this.m_hash = (this.m_hash ^ num2);
		}
	}
	return this.m_hash;
};
System.Net.SocketAddress.prototype.toString = function () {
	var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
__loop0__: 
	for (var i = 2; i < this.Size; ++i) {
		if (i > 2) {
			stringBuilder.Append$2(",");
		}
		stringBuilder.Append$2((this.get_Item(i)).toString());
	}
	return JSIL.ConcatString.apply(null, JSIL.Array.New(System.String, [this.Family.toString(), ":", (this.Size).toString(), ":{", stringBuilder.toString(), "}"]));
};
JSIL.OverloadedMethod(System.Net.SocketAddress.prototype, "_ctor", [
		["_ctor$0", [System.Net.Sockets.AddressFamily]], 
		["_ctor$1", [System.Net.Sockets.AddressFamily, System.Int32]]
	]);
JSIL.MakeProperty(System.Net.SocketAddress.prototype, "Family", 
	System.Net.SocketAddress.prototype.get_Family, null);
JSIL.MakeProperty(System.Net.SocketAddress.prototype, "Size", 
	System.Net.SocketAddress.prototype.get_Size, null);
JSIL.MakeProperty(System.Net.SocketAddress.prototype, "Item", 
	System.Net.SocketAddress.prototype.get_Item, System.Net.SocketAddress.prototype.set_Item);
Object.defineProperty(System.Net.SocketAddress, "IPv6AddressSize", {
		"value": 28}
);
Object.defineProperty(System.Net.SocketAddress, "IPv4AddressSize", {
		"value": 16}
);
Object.defineProperty(System.Net.SocketAddress, "WriteableOffset", {
		"value": 2}
);
Object.defineProperty(System.Net.SocketAddress, "MaxSize", {
		"value": 32}
);
System.Net.SocketAddress.prototype.m_Size = 0;
System.Net.SocketAddress.prototype.m_Buffer = null;
System.Net.SocketAddress.prototype.m_changed = false;
System.Net.SocketAddress.prototype.m_hash = 0;

System.Net.Sockets.SocketException.prototype._ctor$0 = function () {
	this._ctor$1($asm06.System.Net.UnsafeNclNativeMethods.IsWindows ? System.Runtime.InteropServices.Marshal.GetLastWin32Error() : Math.floor($asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.GetLastUnixError()));
};
System.Net.Sockets.SocketException.prototype._ctor$1 = function (errorCode) {
	System.Exception.prototype._ctor.call(this, System.Net.Sockets.SocketException.GetErrorMessage(errorCode));
	this.nativeErrorCode = errorCode;
};
System.Net.Sockets.SocketException.prototype._ctor$2 = function (socketError) {
	this._ctor$1(Math.floor(socketError));
};
System.Net.Sockets.SocketException.prototype.get_SocketErrorCode = function () {
	return this.ErrorCode;
};
System.Net.Sockets.SocketException.prototype.get_ErrorCode = function () {
	return this.nativeErrorCode;
};
System.Net.Sockets.SocketException.GetErrorMessage = function (error) {
	var text = $asm06.System.SR.GetString$2(("net_winsock_" + (error).toString()));
	if (text === null) {
		text = (("Unknown error (0x" + System.Convert.ToString$32(error, 16) + ")"));
	}
	return text;
};
JSIL.OverloadedMethod(System.Net.Sockets.SocketException.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Int32]], 
		["_ctor$2", [System.Net.Sockets.SocketError]]
	]);
JSIL.MakeProperty(System.Net.Sockets.SocketException.prototype, "SocketErrorCode", 
	System.Net.Sockets.SocketException.prototype.get_SocketErrorCode, null);
JSIL.MakeProperty(System.Net.Sockets.SocketException.prototype, "ErrorCode", 
	System.Net.Sockets.SocketException.prototype.get_ErrorCode, null);
System.Net.Sockets.SocketException.prototype.nativeErrorCode = 0;

$asm06.System.Net.Logging.Associate = function (traceSource, objA, objB) {
};
$asm06.System.Net.Logging.Enter$0 = function (traceSource, obj, method, param) {
};
$asm06.System.Net.Logging.Enter$1 = function (traceSource, obj, method, paramObject) {
};
$asm06.System.Net.Logging.Enter$2 = function (traceSource, obj, method, param) {
};
$asm06.System.Net.Logging.Enter$3 = function (traceSource, obj, method, paramObject) {
};
$asm06.System.Net.Logging.Enter$4 = function (traceSource, method, parameters) {
};
$asm06.System.Net.Logging.Enter$5 = function (traceSource, msg) {
};
$asm06.System.Net.Logging.Exit$0 = function (traceSource, obj, method, retObject) {
};
$asm06.System.Net.Logging.Exit$1 = function (traceSource, obj, method, retObject) {
};
$asm06.System.Net.Logging.Exit$2 = function (traceSource, obj, method, retValue) {
};
$asm06.System.Net.Logging.Exit$3 = function (traceSource, obj, method, retValue) {
};
$asm06.System.Net.Logging.Exit$4 = function (traceSource, method, parameters) {
};
$asm06.System.Net.Logging.Exit$5 = function (traceSource, msg) {
};
$asm06.System.Net.Logging.Exception = function (traceSource, obj, method, e) {
};
$asm06.System.Net.Logging.Dump$0 = function (traceSource, obj, method, bufferPtr, length) {
};
$asm06.System.Net.Logging.Dump$1 = function (traceSource, obj, method, buffer, offset, length) {
};
$asm06.System.Net.Logging.PrintInfo$0 = function (traceSource, msg) {
};
$asm06.System.Net.Logging.PrintInfo$1 = function (traceSource, obj, msg) {
};
$asm06.System.Net.Logging.PrintInfo$2 = function (traceSource, obj, method, param) {
};
$asm06.System.Net.Logging.get_Web = function () {
	return null;
};
$asm06.System.Net.Logging.get_Sockets = function () {
	return null;
};
$asm06.System.Net.Logging.get_HttpListener = function () {
	return null;
};
$asm06.System.Net.Logging.get_On = function () {
	return false;
};
$asm06.System.Net.Logging.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
JSIL.OverloadedMethod($asm06.System.Net.Logging, "Enter", [
		["Enter$0", [$asm06.System.Net.TraceSource, System.Object, System.String, System.String]], 
		["Enter$1", [$asm06.System.Net.TraceSource, System.Object, System.String, System.Object]], 
		["Enter$2", [$asm06.System.Net.TraceSource, System.String, System.String, System.String]], 
		["Enter$3", [$asm06.System.Net.TraceSource, System.String, System.String, System.Object]], 
		["Enter$4", [$asm06.System.Net.TraceSource, System.String, System.String]], 
		["Enter$5", [$asm06.System.Net.TraceSource, System.String]]
	]);
JSIL.OverloadedMethod($asm06.System.Net.Logging, "Exit", [
		["Exit$0", [$asm06.System.Net.TraceSource, System.Object, System.String, System.Object]], 
		["Exit$1", [$asm06.System.Net.TraceSource, System.String, System.String, System.Object]], 
		["Exit$2", [$asm06.System.Net.TraceSource, System.Object, System.String, System.String]], 
		["Exit$3", [$asm06.System.Net.TraceSource, System.String, System.String, System.String]], 
		["Exit$4", [$asm06.System.Net.TraceSource, System.String, System.String]], 
		["Exit$5", [$asm06.System.Net.TraceSource, System.String]]
	]);
JSIL.OverloadedMethod($asm06.System.Net.Logging, "Dump", [
		["Dump$0", [$asm06.System.Net.TraceSource, System.Object, System.String, System.IntPtr, System.Int32]], 
		["Dump$1", [$asm06.System.Net.TraceSource, System.Object, System.String, System.Array.Of(System.Byte), System.Int32, System.Int32]]
	]);
JSIL.OverloadedMethod($asm06.System.Net.Logging, "PrintInfo", [
		["PrintInfo$0", [$asm06.System.Net.TraceSource, System.String]], 
		["PrintInfo$1", [$asm06.System.Net.TraceSource, System.Object, System.String]], 
		["PrintInfo$2", [$asm06.System.Net.TraceSource, System.Object, System.String, System.String]]
	]);
JSIL.MakeProperty($asm06.System.Net.Logging, "Web", 
	$asm06.System.Net.Logging.get_Web, null);
JSIL.MakeProperty($asm06.System.Net.Logging, "Sockets", 
	$asm06.System.Net.Logging.get_Sockets, null);
JSIL.MakeProperty($asm06.System.Net.Logging, "HttpListener", 
	$asm06.System.Net.Logging.get_HttpListener, null);
JSIL.MakeProperty($asm06.System.Net.Logging, "On", 
	$asm06.System.Net.Logging.get_On, null);

$asm06.System.Net.TraceSource.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};

$asm06.System.Net.GlobalLog.get_CurrentThreadKind = function () {
	return $asm06.System.Net.ThreadKinds.Unknown;
};
$asm06.System.Net.GlobalLog.SetThreadSource = function (source) {
};
$asm06.System.Net.GlobalLog.ThreadContract$0 = function (kind, errorMsg) {
};
$asm06.System.Net.GlobalLog.ThreadContract$1 = function (kind, allowedSources, errorMsg) {
};
$asm06.System.Net.GlobalLog.AddToArray = function (msg) {
};
$asm06.System.Net.GlobalLog.Ignore = function (msg) {
};
$asm06.System.Net.GlobalLog.Print = function (msg) {
};
$asm06.System.Net.GlobalLog.PrintHex = function (msg, value) {
};
$asm06.System.Net.GlobalLog.Enter$0 = function (func) {
};
$asm06.System.Net.GlobalLog.Enter$1 = function (func, parms) {
};
$asm06.System.Net.GlobalLog.Assert$0 = function (condition, messageFormat, data) {
	if (!condition) {
		var message = System.String.Format(messageFormat, data);
		throw new System.Exception(message);
	}
};
$asm06.System.Net.GlobalLog.Assert$1 = function (message) {
};
$asm06.System.Net.GlobalLog.Assert$2 = function (message, detailMessage) {
};
$asm06.System.Net.GlobalLog.LeaveException = function (func, exception) {
};
$asm06.System.Net.GlobalLog.Leave$0 = function (func) {
};
$asm06.System.Net.GlobalLog.Leave$1 = function (func, result) {
};
$asm06.System.Net.GlobalLog.Leave$2 = function (func, returnval) {
};
$asm06.System.Net.GlobalLog.Leave$3 = function (func, returnval) {
};
JSIL.OverloadedMethod($asm06.System.Net.GlobalLog, "ThreadContract", [
		["ThreadContract$0", [$asm06.System.Net.ThreadKinds, System.String]], 
		["ThreadContract$1", [$asm06.System.Net.ThreadKinds, $asm06.System.Net.ThreadKinds, System.String]]
	]);
JSIL.OverloadedMethod($asm06.System.Net.GlobalLog, "Enter", [
		["Enter$0", [System.String]], 
		["Enter$1", [System.String, System.String]]
	]);
JSIL.OverloadedMethod($asm06.System.Net.GlobalLog, "Assert", [
		["Assert$0", [System.Boolean, System.String, System.Array.Of(System.Object)]], 
		["Assert$1", [System.String]], 
		["Assert$2", [System.String, System.String]]
	]);
JSIL.OverloadedMethod($asm06.System.Net.GlobalLog, "Leave", [
		["Leave$0", [System.String]], 
		["Leave$1", [System.String, System.String]], 
		["Leave$2", [System.String, System.Int32]], 
		["Leave$3", [System.String, System.Boolean]]
	]);
JSIL.MakeProperty($asm06.System.Net.GlobalLog, "CurrentThreadKind", 
	$asm06.System.Net.GlobalLog.get_CurrentThreadKind, null);

$asm06.System.Net.IntPtrHelper.Add = function (a, b) {
	return System.IntPtr.op_Explicit$1((System.IntPtr.op_Explicit$3(a) + b));
};

$asm06.System.Net.InternalException.prototype._ctor = function () {
	System.SystemException.prototype._ctor$0.call(this);
	$asm06.System.Net.GlobalLog.Assert$1("InternalException thrown.");
};

$asm06.System.Net.NclUtilities.get_HasShutdownStarted = function () {
	return System.Environment.HasShutdownStarted;
};
$asm06.System.Net.NclUtilities.IsFatal = function (exception) {
	return ((exception !== null) && (JSIL.TryCast(exception, System.OutOfMemoryException) || 
			JSIL.TryCast(exception, System.StackOverflowException) || 
			JSIL.CheckType(exception, System.Threading.ThreadAbortException)));
};
JSIL.MakeProperty($asm06.System.Net.NclUtilities, "HasShutdownStarted", 
	$asm06.System.Net.NclUtilities.get_HasShutdownStarted, null);

$asm06.System.Net.ComNetOS.IsWin9x = false;
$asm06.System.Net.ComNetOS.IsWinNt = false;
$asm06.System.Net.ComNetOS.IsWin2K = false;
$asm06.System.Net.ComNetOS.IsPostWin2K = false;
$asm06.System.Net.ComNetOS.IsAspNetServer = false;
$asm06.System.Net.ComNetOS.IsVista = false;
$asm06.System.Net.ComNetOS._cctor = function () {
	if (!$asm06.System.Net.UnsafeNclNativeMethods.IsWindows) {
		return;
	}
	var oSVersion = System.Environment.OSVersion;
	if (oSVersion.Platform === System.PlatformID.Win32Windows) {
		$asm06.System.Net.ComNetOS.IsWin9x = true;
		return;
	}
	$asm06.System.Net.ComNetOS.IsAspNetServer = (System.Threading.Thread.GetDomain().GetData(".appDomain") !== null);
	$asm06.System.Net.ComNetOS.IsWinNt = true;
	$asm06.System.Net.ComNetOS.IsWin2K = true;
	if (!((oSVersion.Version.Major !== 5) || (oSVersion.Version.Minor !== 0))) {
		return;
	}
	$asm06.System.Net.ComNetOS.IsPostWin2K = true;
	if (oSVersion.Version.Major >= 6) {
		$asm06.System.Net.ComNetOS.IsVista = true;
	}
};

$asm06.System.Net.hostent.prototype.h_name = 0;
$asm06.System.Net.hostent.prototype.h_aliases = 0;
$asm06.System.Net.hostent.prototype.h_addrtype = 0;
$asm06.System.Net.hostent.prototype.h_length = 0;
$asm06.System.Net.hostent.prototype.h_addr_list = 0;

$asm06.System.Net.ValidationHelper.ExceptionMessage = function (exception) {
	if (exception === null) {
		return System.String.Empty;
	}
	if (exception.InnerException === null) {
		return exception.Message;
	}
	return (exception.Message + " (" + $asm06.System.Net.ValidationHelper.ExceptionMessage(exception.InnerException) + ")");
};
$asm06.System.Net.ValidationHelper.ToString = function (objectValue) {
	if (objectValue === null) {
		return "(null)";
	}
	var text = JSIL.TryCast(objectValue, System.String);
	if (!((text === null) || (text.length !== 0))) {
		return "(string.empty)";
	}
	var exception = JSIL.TryCast(objectValue, System.Exception);
	if (exception !== null) {
		return $asm06.System.Net.ValidationHelper.ExceptionMessage(exception);
	}
	if (JSIL.TryCast(objectValue, System.IntPtr) !== 0) {
		return objectValue.toString();
	}
	return objectValue.toString();
};
$asm06.System.Net.ValidationHelper.HashString = function (objectValue) {
	if (objectValue === null) {
		return "(null)";
	}
	var text = JSIL.TryCast(objectValue, System.String);
	if (!((text === null) || !(text != System.String.Empty))) {
		return "(string.empty)";
	}
	return (objectValue.GetHashCode()).toString();
};
$asm06.System.Net.ValidationHelper.ValidateTcpPort = function (port) {
	return ((port >= 0) && (port <= 65535));
};
$asm06.System.Net.ValidationHelper.IsValidWebHeaderToken = function (token) {
	return (!((token.length <= 0) || 
			(token.IndexOfAny$0($asm06.System.Net.ValidationHelper.InvalidParamChars) !== -1)) && !$asm06.System.Net.ValidationHelper.ContainsNonAsciiChars(token));
};
$asm06.System.Net.ValidationHelper.ContainsNonAsciiChars = function (token) {
__loop0__: 
	for (var i = 0; i < token.length; ++i) {
		if (!(((token[i]) >= " ") && ((token[i]) <= "~"))) {
			return true;
		}
	}
	return false;
};
$asm06.System.Net.ValidationHelper.CheckBadWebHeaderChars = function (name, isHeaderValue) {
	if ((name !== null) && (name.Trim$1().length !== 0)) {
		if (isHeaderValue) {
			name = name.Trim$0($asm06.System.Net.ValidationHelper.HttpTrimCharacters);
			var num = 0;
		__loop0__: 
			for (var i = 0; i < name.length; ++i) {
				var c = ("\xff" & (name[i]));
				switch (num) {
					case 0: 
						if (c === "\r") {
							num = 1;
						} else {
							if (c === "\n") {
								throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm06.System.SR.GetString$2("net_WebHeaderInvalidCRLFChars"), "value"]);
							}
							if (!((c !== "") && ((c >= " ") || 
										(c === "\t")))) {
								throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm06.System.SR.GetString$2("net_WebHeaderInvalidControlChars"), "value"]);
							}
						}
						break;
					case 1: 
						if (c !== "\n") {
							throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm06.System.SR.GetString$2("net_WebHeaderInvalidCRLFChars"), "value"]);
						}
						num = 2;
						break;
					case 2: 
						if ((c !== " ") && (c !== "\t")) {
							throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm06.System.SR.GetString$2("net_WebHeaderInvalidCRLFChars"), "value"]);
						}
						num = 0;
						break;
				}
			}
			if (num !== 0) {
				throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm06.System.SR.GetString$2("net_WebHeaderInvalidCRLFChars"), "value"]);
			}
		} else {
			if (name.IndexOfAny$0($asm06.System.Net.ValidationHelper.InvalidParamChars) !== -1) {
				throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm06.System.SR.GetString$2("net_WebHeaderInvalidHeaderChars"), "name"]);
			}
			if ($asm06.System.Net.ValidationHelper.ContainsNonAsciiChars(name)) {
				throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm06.System.SR.GetString$2("net_WebHeaderInvalidNonAsciiChars"), "name"]);
			}
		}
		return name;
	}
	if (!isHeaderValue) {
		throw (name === null) ? JSIL.New(System.ArgumentNullException, "_ctor$1", ["name"]) : JSIL.New(System.ArgumentException, "_ctor$4", [$asm06.System.SR.GetString$0("net_emptystringcall", ["name"]), "name"]);
	}
	return System.String.Empty;
};
$asm06.System.Net.ValidationHelper.IsBlankString = function (stringValue) {
	return ((stringValue === null) || (stringValue.length === 0));
};
$asm06.System.Net.ValidationHelper.EmptyArray = null;
$asm06.System.Net.ValidationHelper.HttpTrimCharacters = null;
$asm06.System.Net.ValidationHelper.InvalidParamChars = null;
$asm06.System.Net.ValidationHelper._cctor = function () {
	$asm06.System.Net.ValidationHelper.EmptyArray = JSIL.Array.New(System.String, 0);
	$asm06.System.Net.ValidationHelper.HttpTrimCharacters = JSIL.Array.New(System.Char, ["\t", "\n", "\x0b", "\x0c", "\r", " "]);
	$asm06.System.Net.ValidationHelper.InvalidParamChars = JSIL.Array.New(System.Char, ["(", ")", "<", ">", "@", ",", ";", ":", "\\", '"', "'", "/", "[", "]", "?", "=", "{", "}", " ", "\t", "\r", "\n"]);
};

$asm06.System.Net.Dns.InternalGetHostByName = function (hostName, includeIPv6) {
	if ($asm06.System.Net.Logging.On) {
		$asm06.System.Net.Logging.Enter$2($asm06.System.Net.Logging.Sockets, "DNS", "GetHostByName", hostName);
	}
	var iPHostEntry = null;
	if (!((hostName.length <= 255) && ((hostName.length !== 255) || 
				((hostName[254]) === ".")))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", [$asm06.System.SR.GetString$0("net_toolong", ["hostName", (255).toString()])]);
	}
	if (!(!System.Net.Sockets.Socket.OSSupportsIPv6 && (!includeIPv6 || 
				!$asm06.System.Net.ComNetOS.IsPostWin2K))) {
		iPHostEntry = $asm06.System.Net.Dns.GetAddrInfo(hostName);
	} else {
		var socketError = new JSIL.Variable(System.Net.Sockets.SocketError.Success);
		var intPtr = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.gethostbyname(hostName, /* ref */ socketError);
		if (System.IntPtr.op_Equality(intPtr, System.IntPtr.Zero)) {
			var socketException = JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [socketError.value]);
			throw socketException;
		}
		iPHostEntry = $asm06.System.Net.Dns.NativeToHostEntry(intPtr);
	}
	if ($asm06.System.Net.Logging.On) {
		$asm06.System.Net.Logging.Exit$1($asm06.System.Net.Logging.Sockets, "DNS", "GetHostByName", iPHostEntry);
	}
	return iPHostEntry;
};
$asm06.System.Net.Dns.GetAddrInfo = JSIL.UntranslatableFunction("System.Net.IPHostEntry System.Net.Dns::GetAddrInfo(System.String)");
$asm06.System.Net.Dns.NativeToHostEntry = function (nativePointer) {
	var hostent = JSIL.Cast(System.Runtime.InteropServices.Marshal.PtrToStructure$1(nativePointer, $asm06.System.Net.hostent), $asm06.System.Net.hostent).MemberwiseClone();
	var iPHostEntry = new $asm06.System.Net.IPHostEntry();
	if (System.IntPtr.op_Inequality(hostent.h_name, System.IntPtr.Zero)) {
		iPHostEntry.HostName = System.Runtime.InteropServices.Marshal.PtrToStringAnsi$0(hostent.h_name);
	}
	var list = new (System.Collections.Generic.List$b1.Of(System.Object)) ();
	var intPtr = hostent.h_addr_list;
__loop0__: 
	for (nativePointer = System.Runtime.InteropServices.Marshal.ReadIntPtr(intPtr); System.IntPtr.op_Inequality(nativePointer, System.IntPtr.Zero); ) {
		var newAddress = System.Runtime.InteropServices.Marshal.ReadInt32$1(nativePointer);
		list.Add(JSIL.New(System.Net.IPAddress, "_ctor$4", [newAddress]));
		intPtr = $asm06.System.Net.IntPtrHelper.Add(intPtr, System.IntPtr.Size);
		nativePointer = System.Runtime.InteropServices.Marshal.ReadIntPtr(intPtr);
	}
	iPHostEntry.AddressList = JSIL.Array.New(System.Net.IPAddress, list.Count);
	list.CopyTo$2(iPHostEntry.AddressList, 0);
	list.Clear();
	intPtr = hostent.h_aliases;
__loop1__: 
	for (nativePointer = System.Runtime.InteropServices.Marshal.ReadIntPtr(intPtr); System.IntPtr.op_Inequality(nativePointer, System.IntPtr.Zero); ) {
		var item = System.Runtime.InteropServices.Marshal.PtrToStringAnsi$0(nativePointer);
		list.Add(item);
		intPtr = $asm06.System.Net.IntPtrHelper.Add(intPtr, System.IntPtr.Size);
		nativePointer = System.Runtime.InteropServices.Marshal.ReadIntPtr(intPtr);
	}
	iPHostEntry.Aliases = JSIL.Array.New(System.String, list.Count);
	list.CopyTo$2(iPHostEntry.Aliases, 0);
	return iPHostEntry;
};
$asm06.System.Net.Dns.InternalGetHostByAddress = function (address, includeIPv6, throwOnFailure) {
	var socketError2 = new JSIL.Variable(0);
	var socketError = new JSIL.Variable(System.Net.Sockets.SocketError.Success);
	var exception = null;
	if (!(!System.Net.Sockets.Socket.OSSupportsIPv6 && (!includeIPv6 || 
				!$asm06.System.Net.ComNetOS.IsPostWin2K))) {
		var name = $asm06.System.Net.Dns.TryGetNameInfo(address, /* ref */ socketError, /* ref */ socketError2);
		if (!JSIL.Cast(socketError.value, System.Boolean)) {
			return $asm06.System.Net.Dns.GetAddrInfo(name);
		}
		exception = JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [socketError2.value]);
	} else {
		if (address.AddressFamily === System.Net.Sockets.AddressFamily.InterNetworkV6) {
			throw JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [System.Net.Sockets.SocketError.ProtocolNotSupported]);
		}
		var num = new JSIL.Variable(address.m_Address);
		var socketError3 = new JSIL.Variable(System.Net.Sockets.SocketError.Success);
		var intPtr = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.gethostbyaddr(/* ref */ num, System.Runtime.InteropServices.Marshal.SizeOf$1(System.Int32), System.Net.Sockets.AddressFamily.InterNetwork, /* ref */ socketError3);
		if (System.IntPtr.op_Inequality(intPtr, System.IntPtr.Zero)) {
			return $asm06.System.Net.Dns.NativeToHostEntry(intPtr);
		}
		exception = JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [socketError3.value]);
	}
	if (throwOnFailure) {
		throw exception;
	}
	var iPHostEntry = new $asm06.System.Net.IPHostEntry();
	try {
		iPHostEntry.HostName = address.toString();
		iPHostEntry.Aliases = JSIL.Array.New(System.String, 0);
		iPHostEntry.AddressList = JSIL.Array.New(System.Net.IPAddress, [address]);
	} catch ($exception) {
		throw exception;
	}
	return iPHostEntry;
};
$asm06.System.Net.Dns.TryGetNameInfo = function (addr, /* ref */ errorCode, /* ref */ lastError) {
	if (!(!$asm06.System.Net.UnsafeNclNativeMethods.IsWindows || $asm06.System.Net.ComNetOS.IsPostWin2K)) {
		throw JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [System.Net.Sockets.SocketError.OperationNotSupported]);
	}
	var socketAddress = (JSIL.New(System.Net.IPEndPoint, "_ctor$1", [addr, 0])).Serialize();
	var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$1", [1025]);
	System.Net.Sockets.Socket.InitializeSockets();
	errorCode.value = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.getnameinfo(
		socketAddress.m_Buffer, 
		socketAddress.m_Size, 
		stringBuilder, 
		stringBuilder.Capacity, 
		null, 
		0, 
		4, 
		/* ref */ lastError
	);
	if (JSIL.UntranslatableInstruction("ldobj:Int32[exp:Boolean]([mscorlib]System.Int32, ldloc:valuetype System.Net.Sockets.SocketError&[exp:int32&](errorCode))") !== null) {
		return null;
	}
	return stringBuilder.toString();
};
Object.defineProperty($asm06.System.Net.Dns, "MaxHostName", {
		"value": 255}
);

$asm06.System.Net.IPHostEntry.prototype.get_HostName = function () {
	return this.hostName;
};
$asm06.System.Net.IPHostEntry.prototype.set_HostName = function (value) {
	this.hostName = value;
};
$asm06.System.Net.IPHostEntry.prototype.get_Aliases = function () {
	return this.aliases;
};
$asm06.System.Net.IPHostEntry.prototype.set_Aliases = function (value) {
	this.aliases = value;
};
$asm06.System.Net.IPHostEntry.prototype.get_AddressList = function () {
	return this.addressList;
};
$asm06.System.Net.IPHostEntry.prototype.set_AddressList = function (value) {
	this.addressList = value;
};
$asm06.System.Net.IPHostEntry.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
JSIL.MakeProperty($asm06.System.Net.IPHostEntry.prototype, "HostName", 
	$asm06.System.Net.IPHostEntry.prototype.get_HostName, $asm06.System.Net.IPHostEntry.prototype.set_HostName);
JSIL.MakeProperty($asm06.System.Net.IPHostEntry.prototype, "Aliases", 
	$asm06.System.Net.IPHostEntry.prototype.get_Aliases, $asm06.System.Net.IPHostEntry.prototype.set_Aliases);
JSIL.MakeProperty($asm06.System.Net.IPHostEntry.prototype, "AddressList", 
	$asm06.System.Net.IPHostEntry.prototype.get_AddressList, $asm06.System.Net.IPHostEntry.prototype.set_AddressList);
$asm06.System.Net.IPHostEntry.prototype.hostName = null;
$asm06.System.Net.IPHostEntry.prototype.aliases = null;
$asm06.System.Net.IPHostEntry.prototype.addressList = null;

Object.defineProperty($asm06.System.Net.Win32, "OverlappedInternalOffset", {
		"value": 0}
);
$asm06.System.Net.Win32.OverlappedInternalHighOffset = 0;
$asm06.System.Net.Win32.OverlappedOffsetOffset = 0;
$asm06.System.Net.Win32.OverlappedOffsetHighOffset = 0;
$asm06.System.Net.Win32.OverlappedhEventOffset = 0;
$asm06.System.Net.Win32.OverlappedSize = 0;
$asm06.System.Net.Win32._cctor = function () {
	$asm06.System.Net.Win32.OverlappedInternalHighOffset = System.IntPtr.Size;
	$asm06.System.Net.Win32.OverlappedOffsetOffset = (System.IntPtr.Size * 2);
	$asm06.System.Net.Win32.OverlappedOffsetHighOffset = ((System.IntPtr.Size * 2) + 4);
	$asm06.System.Net.Win32.OverlappedhEventOffset = ((System.IntPtr.Size * 2) + 8);
	$asm06.System.Net.Win32.OverlappedSize = ((System.IntPtr.Size * 3) + 8);
};

$asm06.System.Net.Sockets.NCLPALDelegates.get_SetEventDelegate = function () {
	if ($asm06.System.Net.Sockets.NCLPALDelegates.setEventDelegate === null) {
		$asm06.System.Net.Sockets.NCLPALDelegates.setEventDelegate = JSIL.Delegate.New("System.Net.UnsafeNclNativeMethods/OSSOCK/SetResetEventDelegate", null, $asm06.System.Net.Sockets.NCLPALDelegates.SetEventImpl);
	}
	return $asm06.System.Net.Sockets.NCLPALDelegates.setEventDelegate;
};
$asm06.System.Net.Sockets.NCLPALDelegates.get_ResetEventDelegate = function () {
	if ($asm06.System.Net.Sockets.NCLPALDelegates.resetEventDelegate === null) {
		$asm06.System.Net.Sockets.NCLPALDelegates.resetEventDelegate = JSIL.Delegate.New("System.Net.UnsafeNclNativeMethods/OSSOCK/SetResetEventDelegate", null, $asm06.System.Net.Sockets.NCLPALDelegates.ResetEventImpl);
	}
	return $asm06.System.Net.Sockets.NCLPALDelegates.resetEventDelegate;
};
$asm06.System.Net.Sockets.NCLPALDelegates.SetEventImpl = function (handle) {
	return Microsoft.Win32.Win32Native.SetEvent(JSIL.New(Microsoft.Win32.SafeHandles.SafeWaitHandle, "_ctor$1", [handle, false]));
};
$asm06.System.Net.Sockets.NCLPALDelegates.ResetEventImpl = function (handle) {
	return Microsoft.Win32.Win32Native.ResetEvent(JSIL.New(Microsoft.Win32.SafeHandles.SafeWaitHandle, "_ctor$1", [handle, false]));
};
JSIL.MakeProperty($asm06.System.Net.Sockets.NCLPALDelegates, "SetEventDelegate", 
	$asm06.System.Net.Sockets.NCLPALDelegates.get_SetEventDelegate, null);
JSIL.MakeProperty($asm06.System.Net.Sockets.NCLPALDelegates, "ResetEventDelegate", 
	$asm06.System.Net.Sockets.NCLPALDelegates.get_ResetEventDelegate, null);
$asm06.System.Net.Sockets.NCLPALDelegates.setEventDelegate = null;
$asm06.System.Net.Sockets.NCLPALDelegates.resetEventDelegate = null;

System.Net.Sockets.SocketAsyncEventArgs.prototype.add_m_Completed = function (value) {
	this.m_Completed = System.Delegate.Combine(this.m_Completed, value);
};
System.Net.Sockets.SocketAsyncEventArgs.prototype.remove_m_Completed = function (value) {
	this.m_Completed = System.Delegate.Remove(this.m_Completed, value);
};
System.Net.Sockets.SocketAsyncEventArgs.prototype._ctor = function () {
	System.EventArgs.prototype._ctor.call(this);
};
System.Net.Sockets.SocketAsyncEventArgs.prototype.get_ConnectSocket = function () {
	return this.m_ConnectSocket;
};
System.Net.Sockets.SocketAsyncEventArgs.prototype.SetConnectSocket = function (s) {
	this.m_ConnectSocket = s;
};
System.Net.Sockets.SocketAsyncEventArgs.prototype.get_ConnectCancelled = function () {
	return (this.m_ConnectState === 2);
};
System.Net.Sockets.SocketAsyncEventArgs.prototype.CancelConnect = function () {
	if (!((System.Threading.Interlocked.CompareExchange(/* ref */ new JSIL.MemberReference(this, "m_ConnectState"), 2, 1) !== 1) || (this.m_CurrentSocket === null))) {
		this.m_CurrentSocket.Close$0();
	}
};
System.Net.Sockets.SocketAsyncEventArgs.prototype.get_CurrentSocket = function () {
	return this.m_CurrentSocket;
};
System.Net.Sockets.SocketAsyncEventArgs.prototype.set_CurrentSocket = function (value) {
	this.m_CurrentSocket = value;
};
System.Net.Sockets.SocketAsyncEventArgs.prototype.get_Buffer = function () {
	return this.m_Buffer;
};
System.Net.Sockets.SocketAsyncEventArgs.prototype.get_Offset = function () {
	return this.m_Offset;
};
System.Net.Sockets.SocketAsyncEventArgs.prototype.get_Count = function () {
	return this.m_Count;
};
System.Net.Sockets.SocketAsyncEventArgs.prototype.get_BufferList = function () {
	return this.m_BufferList;
};
System.Net.Sockets.SocketAsyncEventArgs.prototype.set_BufferList = function (value) {
	if (!((value === null) || (this.m_Buffer === null))) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm06.System.SR.GetString$0("net_ambiguousbuffers", ["Buffer"])]);
	}
	this.m_BufferList = value;
	this.m_BufferListChanged = true;
	this.CheckPinMultipleBuffers();
};
System.Net.Sockets.SocketAsyncEventArgs.prototype.get_BytesTransferred = function () {
	return this.m_BytesTransferred;
};
System.Net.Sockets.SocketAsyncEventArgs.prototype.add_Completed = function (value) {
	this.m_Completed = System.Delegate.Combine(this.m_Completed, value);
};
System.Net.Sockets.SocketAsyncEventArgs.prototype.remove_Completed = function (value) {
	this.m_Completed = System.Delegate.Remove(this.m_Completed, value);
};
System.Net.Sockets.SocketAsyncEventArgs.prototype.OnCompleted = function (e) {
	var completed = this.m_Completed;
	if (completed !== null) {
		completed(e.m_CurrentSocket, e);
	}
};
System.Net.Sockets.SocketAsyncEventArgs.prototype.get_LastOperation = function () {
	return this.m_CompletedOperation;
};
System.Net.Sockets.SocketAsyncEventArgs.prototype.get_RemoteEndPoint = function () {
	return this.m_RemoteEndPoint;
};
System.Net.Sockets.SocketAsyncEventArgs.prototype.set_RemoteEndPoint = function (value) {
	this.m_RemoteEndPoint = value;
};
System.Net.Sockets.SocketAsyncEventArgs.prototype.get_SocketError = function () {
	return this.m_SocketError;
};
System.Net.Sockets.SocketAsyncEventArgs.prototype.set_SocketError = function (value) {
	this.m_SocketError = value;
};
System.Net.Sockets.SocketAsyncEventArgs.prototype.get_ConnectByNameError = function () {
	return this.m_ConnectByNameError;
};
System.Net.Sockets.SocketAsyncEventArgs.prototype.get_SocketClientAccessPolicyProtocol = function () {
	return this.m_PolicyProtocol;
};
System.Net.Sockets.SocketAsyncEventArgs.prototype.set_SocketClientAccessPolicyProtocol = function (value) {
	if (!(!JSIL.Cast(value, System.Boolean) || (value === System.Net.Sockets.SocketClientAccessPolicyProtocol.Http))) {
		throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm06.System.SR.GetString$2("net_sockets_invalid_optionValue_all"), "value"]);
	}
	this.m_PolicyProtocol = value;
};
System.Net.Sockets.SocketAsyncEventArgs.prototype.get_UserToken = function () {
	return this.m_UserToken;
};
System.Net.Sockets.SocketAsyncEventArgs.prototype.set_UserToken = function (value) {
	this.m_UserToken = value;
};
System.Net.Sockets.SocketAsyncEventArgs.prototype.SetBuffer$0 = function (buffer, offset, count) {
	this.SetBufferInternal(buffer, offset, count);
};
System.Net.Sockets.SocketAsyncEventArgs.prototype.SetBuffer$1 = function (offset, count) {
	this.SetBufferInternal(this.m_Buffer, offset, count);
};
System.Net.Sockets.SocketAsyncEventArgs.prototype.SetBufferInternal = function (buffer, offset, count) {
	if (buffer === null) {
		this.m_Buffer = null;
		this.m_Offset = 0;
		this.m_Count = 0;
	} else {
		if (this.m_BufferList !== null) {
			throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm06.System.SR.GetString$0("net_ambiguousbuffers", ["BufferList"])]);
		}
		if (!((offset >= 0) && (offset <= buffer.length))) {
			throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["offset"]);
		}
		if (!((count >= 0) && (count <= (buffer.length - offset)))) {
			throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["count"]);
		}
		this.m_Buffer = buffer;
		this.m_Offset = offset;
		this.m_Count = count;
	}
	this.CheckPinSingleBuffer(true);
};
System.Net.Sockets.SocketAsyncEventArgs.prototype.SetResults$0 = function (socketError, bytesTransferred, flags) {
	this.m_SocketError = socketError;
	this.m_ConnectByNameError = null;
	this.m_BytesTransferred = bytesTransferred;
	this.m_SocketFlags = flags;
};
System.Net.Sockets.SocketAsyncEventArgs.prototype.SetResults$1 = function (exception, bytesTransferred, flags) {
	this.m_ConnectByNameError = exception;
	this.m_BytesTransferred = bytesTransferred;
	this.m_SocketFlags = flags;
	if (exception === null) {
		this.m_SocketError = System.Net.Sockets.SocketError.Success;
		return;
	}
	var socketException = JSIL.TryCast(exception, System.Net.Sockets.SocketException);
	if (socketException !== null) {
		this.m_SocketError = socketException.SocketErrorCode;
		return;
	}
	this.m_SocketError = System.Net.Sockets.SocketError.SocketError;
};
System.Net.Sockets.SocketAsyncEventArgs.prototype.Complete = function () {
	this.m_Operating = 0;
	this.m_ConnectState = 0;
	if (this.m_DisposeCalled) {
		this.Dispose();
	}
};
System.Net.Sockets.SocketAsyncEventArgs.prototype.CloseOverlappedEvent = function () {
	if (!$asm06.System.Net.UnsafeNclNativeMethods.IsWindows) {
		$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.UnregisterNCLPALEventHandle(this.m_OverlappedEvent.SafeWaitHandle);
	}
	this.m_OverlappedEvent.Close();
};
System.Net.Sockets.SocketAsyncEventArgs.prototype.Dispose = function () {
	this.m_DisposeCalled = true;
	if (System.Threading.Interlocked.Exchange$0(/* ref */ new JSIL.MemberReference(this, "m_Operating"), 1) !== 0) {
		return;
	}
	if (this.m_OverlappedEvent !== null) {
		this.CloseOverlappedEvent();
	}
	this.FreeOverlapped(false);
	System.GC.SuppressFinalize(this);
};
System.Net.Sockets.SocketAsyncEventArgs.prototype.Finalize = function () {
	try {
		this.FreeOverlapped(true);
	} finally {
		System.Object.prototype.Finalize.call(this);
	}
};
System.Net.Sockets.SocketAsyncEventArgs.prototype.StartOperationCommon = function (socket) {
	if (System.Threading.Interlocked.Exchange$0(/* ref */ new JSIL.MemberReference(this, "m_Operating"), 1) === 0) {
		this.m_CurrentSocket = socket;
		return;
	}
	if (this.m_DisposeCalled) {
		throw JSIL.New(System.ObjectDisposedException, "_ctor$1", [JSIL.GetType(this).FullName]);
	}
	throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm06.System.SR.GetString$2("net_socketopinprogress")]);
};
System.Net.Sockets.SocketAsyncEventArgs.prototype.StartOperationConnect = function () {
	this.m_CompletedOperation = System.Net.Sockets.SocketAsyncOperation.Connect;
	this.m_IsWrapperConnect = false;
	System.Threading.Interlocked.CompareExchange(/* ref */ new JSIL.MemberReference(this, "m_ConnectState"), 1, 0);
	this.PinSocketAddressBuffer();
	this.CheckPinNoBuffer();
};
System.Net.Sockets.SocketAsyncEventArgs.prototype.StartOperationWrapperConnect = function () {
	this.m_CompletedOperation = System.Net.Sockets.SocketAsyncOperation.Connect;
	this.m_IsWrapperConnect = true;
	System.Threading.Interlocked.CompareExchange(/* ref */ new JSIL.MemberReference(this, "m_ConnectState"), 1, 0);
};
System.Net.Sockets.SocketAsyncEventArgs.prototype.StartOperationReceive = function () {
	this.m_CompletedOperation = System.Net.Sockets.SocketAsyncOperation.Receive;
	if (System.Net.Sockets.Socket.UseOverlappedIO) {
		if (this.m_OverlappedEvent === null) {
			this.m_OverlappedEvent = new System.Threading.AutoResetEvent(false);
			if (!$asm06.System.Net.UnsafeNclNativeMethods.IsWindows) {
				$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.RegisterNCLPALEventHandle(this.m_OverlappedEvent.SafeWaitHandle, System.Net.Sockets.Socket.s_AppDomainId);
			}
			if (System.Net.Sockets.SocketAsyncEventArgs.s_OverlappedCallback === null) {
				System.Net.Sockets.SocketAsyncEventArgs.s_OverlappedCallback = JSIL.Delegate.New("System.Threading.WaitOrTimerCallback", null, System.Net.Sockets.SocketAsyncEventArgs.OverlappedCallback);
			}
		}
		System.Threading.ThreadPool.RegisterWaitForSingleObject$2(
			this.m_OverlappedEvent, 
			System.Net.Sockets.SocketAsyncEventArgs.s_OverlappedCallback, 
			this, 
			-1, 
			true
		);
		System.Runtime.InteropServices.Marshal.WriteIntPtr($asm06.System.Net.IntPtrHelper.Add(this.m_PtrNativeOverlapped, $asm06.System.Net.Win32.OverlappedhEventOffset), this.m_OverlappedEvent.SafeWaitHandle.DangerousGetHandle());
	}
};
System.Net.Sockets.SocketAsyncEventArgs.prototype.StartOperationSend = function () {
	this.m_CompletedOperation = System.Net.Sockets.SocketAsyncOperation.Send;
	if (System.Net.Sockets.Socket.UseOverlappedIO) {
		if (this.m_OverlappedEvent === null) {
			this.m_OverlappedEvent = new System.Threading.AutoResetEvent(false);
			if (!$asm06.System.Net.UnsafeNclNativeMethods.IsWindows) {
				$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.RegisterNCLPALEventHandle(this.m_OverlappedEvent.SafeWaitHandle, System.Net.Sockets.Socket.s_AppDomainId);
			}
			if (System.Net.Sockets.SocketAsyncEventArgs.s_OverlappedCallback === null) {
				System.Net.Sockets.SocketAsyncEventArgs.s_OverlappedCallback = JSIL.Delegate.New("System.Threading.WaitOrTimerCallback", null, System.Net.Sockets.SocketAsyncEventArgs.OverlappedCallback);
			}
		}
		System.Threading.ThreadPool.RegisterWaitForSingleObject$2(
			this.m_OverlappedEvent, 
			System.Net.Sockets.SocketAsyncEventArgs.s_OverlappedCallback, 
			this, 
			-1, 
			true
		);
		System.Runtime.InteropServices.Marshal.WriteIntPtr($asm06.System.Net.IntPtrHelper.Add(this.m_PtrNativeOverlapped, $asm06.System.Net.Win32.OverlappedhEventOffset), this.m_OverlappedEvent.SafeWaitHandle.DangerousGetHandle());
	}
};
System.Net.Sockets.SocketAsyncEventArgs.prototype.CheckPinNoBuffer = function () {
	if (this.m_PinState === 0) {
		this.SetupOverlappedSingle(true);
	}
};
System.Net.Sockets.SocketAsyncEventArgs.prototype.CheckPinSingleBuffer = function (pinUsersBuffer) {
	if (pinUsersBuffer) {
		if (this.m_Buffer === null) {
			if (this.m_PinState === $asm06.System.Net.Sockets.SocketAsyncEventArgs.PinState.SingleBuffer) {
				this.FreeOverlapped(false);
				return;
			}
		} else {
			if ((this.m_PinState !== $asm06.System.Net.Sockets.SocketAsyncEventArgs.PinState.SingleBuffer) || (this.m_PinnedSingleBuffer !== this.m_Buffer)) {
				this.FreeOverlapped(false);
				this.SetupOverlappedSingle(true);
				return;
			}
			if (this.m_Offset !== this.m_PinnedSingleBufferOffset) {
				this.m_PinnedSingleBufferOffset = this.m_Offset;
				this.m_PtrSingleBuffer = JSIL.Cast(JSIL.IgnoredMember("op_Explicit(value)"), System.IntPtr);
				this.m_WSABuffer.Pointer = this.m_PtrSingleBuffer;
			}
			if (this.m_Count !== this.m_PinnedSingleBufferCount) {
				this.m_PinnedSingleBufferCount = this.m_Count;
				this.m_WSABuffer.Length = this.m_Count;
				return;
			}
		}
	} else {
		this.FreeOverlapped(false);
		this.SetupOverlappedSingle(false);
	}
};
System.Net.Sockets.SocketAsyncEventArgs.prototype.CheckPinMultipleBuffers = function () {
	if (this.m_BufferList === null) {
		if (this.m_PinState === $asm06.System.Net.Sockets.SocketAsyncEventArgs.PinState.MultipleBuffer) {
			this.FreeOverlapped(false);
			return;
		}
	} else if (!((this.m_PinState === $asm06.System.Net.Sockets.SocketAsyncEventArgs.PinState.MultipleBuffer) && !this.m_BufferListChanged)) {
		this.m_BufferListChanged = false;
		this.FreeOverlapped(false);
		this.SetupOverlappedMultiple();
	}
};
System.Net.Sockets.SocketAsyncEventArgs.prototype.PinSocketAddressBuffer = function () {
	if (this.m_PinnedSocketAddress === this.m_SocketAddress) {
		return;
	}
	if (this.m_SocketAddressGCHandle.IsAllocated) {
		this.m_SocketAddressGCHandle.Free();
	}
	this.m_SocketAddressGCHandle = System.Runtime.InteropServices.GCHandle.Alloc$1(this.m_SocketAddress.m_Buffer, System.Runtime.InteropServices.GCHandleType.Pinned).MemberwiseClone();
	this.m_SocketAddress.CopyAddressSizeIntoBuffer();
	this.m_PtrSocketAddressBuffer = JSIL.Cast(JSIL.IgnoredMember("op_Explicit(value)"), System.IntPtr);
	this.m_PtrSocketAddressBufferSize = JSIL.Cast(JSIL.IgnoredMember("op_Explicit(value)"), System.IntPtr);
	this.m_PinnedSocketAddress = this.m_SocketAddress;
};
System.Net.Sockets.SocketAsyncEventArgs.prototype.FreeOverlapped = function (checkForShutdown) {
	if (!(checkForShutdown && $asm06.System.Net.NclUtilities.HasShutdownStarted)) {
		if (System.IntPtr.op_Inequality(this.m_PtrNativeOverlapped, System.IntPtr.Zero)) {
			JSIL.IgnoredMember("Free(nativeOverlappedPtr)");
			this.m_PtrNativeOverlapped = System.IntPtr.Zero;
			this.m_Overlapped = null;
			this.m_PinState = $asm06.System.Net.Sockets.SocketAsyncEventArgs.PinState.None;
			this.m_PinnedSingleBuffer = null;
			this.m_PinnedSingleBufferOffset = 0;
			this.m_PinnedSingleBufferCount = 0;
		}
		if (this.m_SocketAddressGCHandle.IsAllocated) {
			this.m_SocketAddressGCHandle.Free();
		}
	}
};
System.Net.Sockets.SocketAsyncEventArgs.prototype.SetupOverlappedSingle = function (pinSingleBuffer) {
	this.m_Overlapped = new System.Threading.Overlapped();
	if (pinSingleBuffer) {
		if (this.m_Buffer !== null) {
			this.m_PtrNativeOverlapped = JSIL.Cast(JSIL.IgnoredMember("op_Explicit(value)"), System.IntPtr);
			this.m_PinnedSingleBuffer = this.m_Buffer;
			this.m_PinnedSingleBufferOffset = this.m_Offset;
			this.m_PinnedSingleBufferCount = this.m_Count;
			this.m_PtrSingleBuffer = JSIL.Cast(JSIL.IgnoredMember("op_Explicit(value)"), System.IntPtr);
			this.m_WSABuffer.Pointer = this.m_PtrSingleBuffer;
			this.m_WSABuffer.Length = this.m_Count;
			this.m_PinState = $asm06.System.Net.Sockets.SocketAsyncEventArgs.PinState.SingleBuffer;
			return;
		}
		this.m_PtrNativeOverlapped = JSIL.Cast(JSIL.IgnoredMember("op_Explicit(value)"), System.IntPtr);
		this.m_PinnedSingleBuffer = null;
		this.m_PinnedSingleBufferOffset = 0;
		this.m_PinnedSingleBufferCount = 0;
		this.m_PtrSingleBuffer = System.IntPtr.Zero;
		this.m_WSABuffer.Pointer = this.m_PtrSingleBuffer;
		this.m_WSABuffer.Length = this.m_Count;
		this.m_PinState = $asm06.System.Net.Sockets.SocketAsyncEventArgs.PinState.NoBuffer;
	}
};
System.Net.Sockets.SocketAsyncEventArgs.prototype.SetupOverlappedMultiple = function () {
	this.m_Overlapped = new System.Threading.Overlapped();
	if (!((this.m_ObjectsToPin !== null) && (this.m_ObjectsToPin.length === this.m_BufferList.ICollection$b1_Count))) {
		this.m_ObjectsToPin = JSIL.Array.New(System.Object, this.m_BufferList.ICollection$b1_Count);
	}
__loop0__: 
	for (var i = 0; i < this.m_BufferList.ICollection$b1_Count; ++i) {
		this.m_ObjectsToPin[i] = this.m_BufferList.IList$b1_get_Item(i).Array;
	}
	if (!((this.m_WSABufferArray !== null) && (this.m_WSABufferArray.length === this.m_BufferList.ICollection$b1_Count))) {
		this.m_WSABufferArray = JSIL.Array.New($asm06.System.Net.WSABuffer, this.m_BufferList.ICollection$b1_Count);
	}
	this.m_PtrNativeOverlapped = JSIL.Cast(JSIL.IgnoredMember("op_Explicit(value)"), System.IntPtr);
__loop1__: 
	for (var j = 0; j < this.m_BufferList.ICollection$b1_Count; ++j) {
		this.m_WSABufferArray[j].Pointer = JSIL.Cast(JSIL.IgnoredMember("op_Explicit(value)"), System.IntPtr);
		this.m_WSABufferArray[j].Length = this.m_BufferList.IList$b1_get_Item(j).Count;
	}
	this.m_PinState = $asm06.System.Net.Sockets.SocketAsyncEventArgs.PinState.MultipleBuffer;
};
System.Net.Sockets.SocketAsyncEventArgs.prototype.LogBuffer = function (size) {
	switch (Number(this.m_PinState)) {
		case 2: 
			$asm06.System.Net.Logging.Dump$1(
				$asm06.System.Net.Logging.Sockets, 
				this.m_CurrentSocket, 
				JSIL.ConcatString("FinishOperation(", this.m_CompletedOperation, "Async)"), 
				this.m_Buffer, 
				this.m_Offset, 
				size
			);
			return;
		case 3: 
			var wSABufferArray = this.m_WSABufferArray;
		__loop0__: 
			for (var i = 0; i < wSABufferArray.length; ++i) {
				var wSABuffer = wSABufferArray[i].MemberwiseClone();
				$asm06.System.Net.Logging.Dump$0(
					$asm06.System.Net.Logging.Sockets, 
					this.m_CurrentSocket, 
					JSIL.ConcatString("FinishOperation(", this.m_CompletedOperation, "Async)"), 
					wSABuffer.Pointer, 
					System.Math.Min(wSABuffer.Length, size)
				);
				if ((size -= wSABuffer.Length) <= 0) {
					return;
				}
			}
			return;
		default: 
			return;
	}
};
System.Net.Sockets.SocketAsyncEventArgs.prototype.UpdatePerfCounters = function (size, sendOp) {
};
System.Net.Sockets.SocketAsyncEventArgs.prototype.FinishOperationSyncFailure = function (socketError, bytesTransferred, flags) {
	if (System.Threading.Interlocked.Exchange$0(/* ref */ new JSIL.MemberReference(this, "m_ConnectState"), 0) === 2) {
		socketError = System.Net.Sockets.SocketError.OperationAborted;
	}
	this.SetResults$0(socketError, bytesTransferred, flags);
	this.m_CurrentSocket.UpdateStatusAfterSocketError$1(socketError);
	this.Complete();
};
System.Net.Sockets.SocketAsyncEventArgs.prototype.FinishConnectByNameSyncFailure = function (socketError, bytesTransferred, flags) {
	if (System.Threading.Interlocked.Exchange$0(/* ref */ new JSIL.MemberReference(this, "m_ConnectState"), 0) === 2) {
		socketError = System.Net.Sockets.SocketError.OperationAborted;
	}
	this.SetResults$1(JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [socketError]), bytesTransferred, flags);
	this.m_CurrentSocket.UpdateStatusAfterSocketError$1(socketError);
	this.Complete();
};
System.Net.Sockets.SocketAsyncEventArgs.prototype.FinishOperationAsyncFailure$0 = function (socketError, bytesTransferred, flags) {
	if (System.Threading.Interlocked.Exchange$0(/* ref */ new JSIL.MemberReference(this, "m_ConnectState"), 0) === 2) {
		socketError = System.Net.Sockets.SocketError.OperationAborted;
	}
	this.SetResults$0(socketError, bytesTransferred, flags);
	this.m_CurrentSocket.UpdateStatusAfterSocketError$1(socketError);
	this.Complete();
	this.OnCompleted(this);
};
System.Net.Sockets.SocketAsyncEventArgs.prototype.FinishOperationAsyncFailure$1 = function (exception, bytesTransferred, flags) {
	if (System.Threading.Interlocked.Exchange$0(/* ref */ new JSIL.MemberReference(this, "m_ConnectState"), 0) === 2) {
		exception = JSIL.New(System.Net.Sockets.SocketException, "_ctor$2", [System.Net.Sockets.SocketError.OperationAborted]);
	}
	this.SetResults$1(exception, bytesTransferred, flags);
	this.m_CurrentSocket.UpdateStatusAfterSocketError$1(this.m_SocketError);
	this.Complete();
	this.OnCompleted(this);
};
System.Net.Sockets.SocketAsyncEventArgs.prototype.FinishOperationSuccess = function (socketError, bytesTransferred, flags) {
	this.SetResults$0(socketError, bytesTransferred, flags);
	var completedOperation = this.m_CompletedOperation;
	switch (Number(completedOperation)) {
		case 2: 
			if (System.Threading.Interlocked.Exchange$0(/* ref */ new JSIL.MemberReference(this, "m_ConnectState"), 0) === 2) {
				socketError = System.Net.Sockets.SocketError.OperationAborted;
			} else if (!this.m_IsWrapperConnect) {
				if (!((bytesTransferred <= 0) || !System.Net.Sockets.SocketAsyncEventArgs.s_LoggingEnabled)) {
					this.LogBuffer(bytesTransferred);
				}
				if (this.m_UsingConnectEx) {
					try {
						var socketError2 = new JSIL.Variable(System.Net.Sockets.SocketError.Success);
						socketError = $asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.setsockopt$1(
							this.m_CurrentSocket.SafeHandle, 
							$asm06.System.Net.Sockets.SocketOptionLevel.Socket, 
							$asm06.System.Net.Sockets.SocketOptionName.UpdateConnectContext, 
							null, 
							0, 
							/* ref */ socketError2
						);
						if (socketError === System.Net.Sockets.SocketError.SocketError) {
							socketError = socketError2.value;
						}
					} catch ($exception) {
						if (JSIL.CheckType($exception, System.ObjectDisposedException)) {
							socketError = System.Net.Sockets.SocketError.OperationAborted;
						} else {
							throw $exception;
						}
					}
				}
				if (!JSIL.Cast(socketError, System.Boolean)) {
					this.m_CurrentSocket.SetToConnected();
				}
			}
			break;
		case 3: 
			break;
		case 4: 
			if (!((bytesTransferred <= 0) || !System.Net.Sockets.SocketAsyncEventArgs.s_LoggingEnabled)) {
				this.LogBuffer(bytesTransferred);
			}
			break;
		default: 
			if (completedOperation === System.Net.Sockets.SocketAsyncOperation.Send) {
				if (!((bytesTransferred <= 0) || !System.Net.Sockets.SocketAsyncEventArgs.s_LoggingEnabled)) {
					this.LogBuffer(bytesTransferred);
				}
			}
			break;
	}
	if (JSIL.Cast(socketError, System.Boolean)) {
		this.SetResults$0(socketError, bytesTransferred, flags);
		this.m_CurrentSocket.UpdateStatusAfterSocketError$1(socketError);
	}
	this.Complete();
	this.OnCompleted(this);
};
System.Net.Sockets.SocketAsyncEventArgs.OverlappedCallback = function (args, timedOut) {
	var socketAsyncEventArgs = JSIL.TryCast(args, System.Net.Sockets.SocketAsyncEventArgs);
	var num = System.Runtime.InteropServices.Marshal.ReadInt32$1($asm06.System.Net.IntPtrHelper.Add(socketAsyncEventArgs.m_PtrNativeOverlapped, 0));
	var bytesTransferred = new JSIL.Variable((num !== 0) ? -1 : System.Runtime.InteropServices.Marshal.ReadInt32$1($asm06.System.Net.IntPtrHelper.Add(socketAsyncEventArgs.m_PtrNativeOverlapped, $asm06.System.Net.Win32.OverlappedInternalHighOffset)));
	var socketError = new JSIL.Variable(num);
	var flags = new JSIL.Variable($asm06.System.Net.Sockets.SocketFlags.None);
	if (!JSIL.Cast(socketError.value, System.Boolean)) {
		socketAsyncEventArgs.FinishOperationSuccess(socketError.value, bytesTransferred.value, $asm06.System.Net.Sockets.SocketFlags.None);
		return;
	}
	if (socketError.value !== System.Net.Sockets.SocketError.OperationAborted) {
		if (socketAsyncEventArgs.m_CurrentSocket.CleanedUp) {
			socketError.value = System.Net.Sockets.SocketError.OperationAborted;
		} else {
			try {
				$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSAGetOverlappedResult(
					socketAsyncEventArgs.m_CurrentSocket.SafeHandle, 
					socketAsyncEventArgs.m_PtrNativeOverlapped, 
					/* ref */ bytesTransferred, 
					false, 
					/* ref */ flags, 
					/* ref */ socketError
				);
			} catch ($exception) {
				if (JSIL.CheckType($exception, System.ObjectDisposedException)) {
					socketError.value = System.Net.Sockets.SocketError.OperationAborted;
				} else {
					throw $exception;
				}
			}
		}
	}
	socketAsyncEventArgs.FinishOperationAsyncFailure$0(socketError.value, bytesTransferred.value, flags.value);
};
JSIL.OverloadedMethod(System.Net.Sockets.SocketAsyncEventArgs.prototype, "SetBuffer", [
		["SetBuffer$0", [System.Array.Of(System.Byte), System.Int32, System.Int32]], 
		["SetBuffer$1", [System.Int32, System.Int32]]
	]);
JSIL.OverloadedMethod(System.Net.Sockets.SocketAsyncEventArgs.prototype, "SetResults", [
		["SetResults$0", [System.Net.Sockets.SocketError, System.Int32, $asm06.System.Net.Sockets.SocketFlags]], 
		["SetResults$1", [System.Exception, System.Int32, $asm06.System.Net.Sockets.SocketFlags]]
	]);
JSIL.OverloadedMethod(System.Net.Sockets.SocketAsyncEventArgs.prototype, "FinishOperationAsyncFailure", [
		["FinishOperationAsyncFailure$0", [System.Net.Sockets.SocketError, System.Int32, $asm06.System.Net.Sockets.SocketFlags]], 
		["FinishOperationAsyncFailure$1", [System.Exception, System.Int32, $asm06.System.Net.Sockets.SocketFlags]]
	]);
JSIL.MakeProperty(System.Net.Sockets.SocketAsyncEventArgs.prototype, "ConnectSocket", 
	System.Net.Sockets.SocketAsyncEventArgs.prototype.get_ConnectSocket, null);
JSIL.MakeProperty(System.Net.Sockets.SocketAsyncEventArgs.prototype, "ConnectCancelled", 
	System.Net.Sockets.SocketAsyncEventArgs.prototype.get_ConnectCancelled, null);
JSIL.MakeProperty(System.Net.Sockets.SocketAsyncEventArgs.prototype, "CurrentSocket", 
	System.Net.Sockets.SocketAsyncEventArgs.prototype.get_CurrentSocket, System.Net.Sockets.SocketAsyncEventArgs.prototype.set_CurrentSocket);
JSIL.MakeProperty(System.Net.Sockets.SocketAsyncEventArgs.prototype, "Buffer", 
	System.Net.Sockets.SocketAsyncEventArgs.prototype.get_Buffer, null);
JSIL.MakeProperty(System.Net.Sockets.SocketAsyncEventArgs.prototype, "Offset", 
	System.Net.Sockets.SocketAsyncEventArgs.prototype.get_Offset, null);
JSIL.MakeProperty(System.Net.Sockets.SocketAsyncEventArgs.prototype, "Count", 
	System.Net.Sockets.SocketAsyncEventArgs.prototype.get_Count, null);
JSIL.MakeProperty(System.Net.Sockets.SocketAsyncEventArgs.prototype, "BufferList", 
	System.Net.Sockets.SocketAsyncEventArgs.prototype.get_BufferList, System.Net.Sockets.SocketAsyncEventArgs.prototype.set_BufferList);
JSIL.MakeProperty(System.Net.Sockets.SocketAsyncEventArgs.prototype, "BytesTransferred", 
	System.Net.Sockets.SocketAsyncEventArgs.prototype.get_BytesTransferred, null);
JSIL.MakeProperty(System.Net.Sockets.SocketAsyncEventArgs.prototype, "LastOperation", 
	System.Net.Sockets.SocketAsyncEventArgs.prototype.get_LastOperation, null);
JSIL.MakeProperty(System.Net.Sockets.SocketAsyncEventArgs.prototype, "RemoteEndPoint", 
	System.Net.Sockets.SocketAsyncEventArgs.prototype.get_RemoteEndPoint, System.Net.Sockets.SocketAsyncEventArgs.prototype.set_RemoteEndPoint);
JSIL.MakeProperty(System.Net.Sockets.SocketAsyncEventArgs.prototype, "SocketError", 
	System.Net.Sockets.SocketAsyncEventArgs.prototype.get_SocketError, System.Net.Sockets.SocketAsyncEventArgs.prototype.set_SocketError);
JSIL.MakeProperty(System.Net.Sockets.SocketAsyncEventArgs.prototype, "ConnectByNameError", 
	System.Net.Sockets.SocketAsyncEventArgs.prototype.get_ConnectByNameError, null);
JSIL.MakeProperty(System.Net.Sockets.SocketAsyncEventArgs.prototype, "SocketClientAccessPolicyProtocol", 
	System.Net.Sockets.SocketAsyncEventArgs.prototype.get_SocketClientAccessPolicyProtocol, System.Net.Sockets.SocketAsyncEventArgs.prototype.set_SocketClientAccessPolicyProtocol);
JSIL.MakeProperty(System.Net.Sockets.SocketAsyncEventArgs.prototype, "UserToken", 
	System.Net.Sockets.SocketAsyncEventArgs.prototype.get_UserToken, System.Net.Sockets.SocketAsyncEventArgs.prototype.set_UserToken);
System.Net.Sockets.SocketAsyncEventArgs.prototype.m_ConnectSocket = null;
System.Net.Sockets.SocketAsyncEventArgs.prototype.m_Buffer = null;
System.Net.Sockets.SocketAsyncEventArgs.prototype.m_PtrSingleBuffer = 0;
System.Net.Sockets.SocketAsyncEventArgs.prototype.m_Count = 0;
System.Net.Sockets.SocketAsyncEventArgs.prototype.m_Offset = 0;
System.Net.Sockets.SocketAsyncEventArgs.prototype.m_BufferList = null;
System.Net.Sockets.SocketAsyncEventArgs.prototype.m_BufferListChanged = false;
System.Net.Sockets.SocketAsyncEventArgs.prototype.m_WSABufferArray = null;
System.Net.Sockets.SocketAsyncEventArgs.prototype.m_BytesTransferred = 0;
System.Net.Sockets.SocketAsyncEventArgs.prototype.m_Completed = null;
System.Net.Sockets.SocketAsyncEventArgs.prototype.m_CompletedOperation = 0;
System.Net.Sockets.SocketAsyncEventArgs.prototype.m_RemoteEndPoint = null;
System.Net.Sockets.SocketAsyncEventArgs.prototype.m_SocketError = 0;
System.Net.Sockets.SocketAsyncEventArgs.prototype.m_ConnectByNameError = null;
System.Net.Sockets.SocketAsyncEventArgs.prototype.m_SocketFlags = 0;
System.Net.Sockets.SocketAsyncEventArgs.prototype.m_UserToken = null;
System.Net.Sockets.SocketAsyncEventArgs.prototype.m_SocketAddress = null;
System.Net.Sockets.SocketAsyncEventArgs.prototype.m_PinnedSocketAddress = null;
System.Net.Sockets.SocketAsyncEventArgs.prototype.m_PtrSocketAddressBuffer = 0;
System.Net.Sockets.SocketAsyncEventArgs.prototype.m_PtrSocketAddressBufferSize = 0;
System.Net.Sockets.SocketAsyncEventArgs.prototype.m_CurrentSocket = null;
System.Net.Sockets.SocketAsyncEventArgs.prototype.m_DisposeCalled = false;
System.Net.Sockets.SocketAsyncEventArgs.prototype.m_Operating = 0;
System.Net.Sockets.SocketAsyncEventArgs.prototype.m_PtrNativeOverlapped = 0;
System.Net.Sockets.SocketAsyncEventArgs.prototype.m_Overlapped = null;
System.Net.Sockets.SocketAsyncEventArgs.prototype.m_ObjectsToPin = null;
System.Net.Sockets.SocketAsyncEventArgs.prototype.m_PinState = 0;
System.Net.Sockets.SocketAsyncEventArgs.s_OverlappedCallback = null;
System.Net.Sockets.SocketAsyncEventArgs.prototype.m_OverlappedEvent = null;
System.Net.Sockets.SocketAsyncEventArgs.prototype.m_UsingConnectEx = false;
System.Net.Sockets.SocketAsyncEventArgs.prototype.m_PolicyProtocol = 0;
System.Net.Sockets.SocketAsyncEventArgs.prototype.m_IsWrapperConnect = false;
System.Net.Sockets.SocketAsyncEventArgs.prototype.m_ConnectState = 0;
System.Net.Sockets.SocketAsyncEventArgs.prototype.m_PinnedSingleBuffer = null;
System.Net.Sockets.SocketAsyncEventArgs.prototype.m_PinnedSingleBufferOffset = 0;
System.Net.Sockets.SocketAsyncEventArgs.prototype.m_PinnedSingleBufferCount = 0;
System.Net.Sockets.SocketAsyncEventArgs.s_LoggingEnabled = false;
System.Net.Sockets.SocketAsyncEventArgs._cctor = function () {
	System.Net.Sockets.SocketAsyncEventArgs.s_LoggingEnabled = $asm06.System.Net.Logging.On;
};

Object.defineProperty($asm06.System.Net.Sockets.IoctlSocketConstants, "FIONREAD", {
		"value": 1074030207}
);
Object.defineProperty($asm06.System.Net.Sockets.IoctlSocketConstants, "FIONBIO", {
		"value": -2147195266}
);
Object.defineProperty($asm06.System.Net.Sockets.IoctlSocketConstants, "FIOASYNC", {
		"value": -2147195267}
);
Object.defineProperty($asm06.System.Net.Sockets.IoctlSocketConstants, "SIOGETEXTENSIONFUNCTIONPOINTER", {
		"value": -939524090}
);

$asm06.System.Net.Sockets.NetworkEvents.prototype.Events = 0;
$asm06.System.Net.Sockets.NetworkEvents.prototype.ErrorCodes = null;

$asm06.System.Net.Sockets.IPPacketInformation.prototype._ctor = function (address, networkInterface) {
	this.address = address;
	this.networkInterface = networkInterface;
};
$asm06.System.Net.Sockets.IPPacketInformation.prototype.get_Address = function () {
	return this.address;
};
$asm06.System.Net.Sockets.IPPacketInformation.prototype.get_Interface = function () {
	return this.networkInterface;
};
$asm06.System.Net.Sockets.IPPacketInformation.op_Equality = function (packetInformation1, packetInformation2) {
	return packetInformation1.Equals(packetInformation2.MemberwiseClone());
};
$asm06.System.Net.Sockets.IPPacketInformation.op_Inequality = function (packetInformation1, packetInformation2) {
	return !packetInformation1.Equals(packetInformation2.MemberwiseClone());
};
$asm06.System.Net.Sockets.IPPacketInformation.prototype.Equals = function (comparand) {
	if (comparand === null) {
		return false;
	}
	if (JSIL.TryCast(comparand, $asm06.System.Net.Sockets.IPPacketInformation) === new $asm06.System.Net.Sockets.IPPacketInformation()) {
		return false;
	}
	var iPPacketInformation = JSIL.Cast(comparand, $asm06.System.Net.Sockets.IPPacketInformation).MemberwiseClone();
	return !(!this.address.Equals(iPPacketInformation.address) || (this.networkInterface !== iPPacketInformation.networkInterface));
};
$asm06.System.Net.Sockets.IPPacketInformation.prototype.GetHashCode = function () {
	return (this.address.GetHashCode() + this.networkInterface.GetHashCode());
};
JSIL.MakeProperty($asm06.System.Net.Sockets.IPPacketInformation.prototype, "Address", 
	$asm06.System.Net.Sockets.IPPacketInformation.prototype.get_Address, null);
JSIL.MakeProperty($asm06.System.Net.Sockets.IPPacketInformation.prototype, "Interface", 
	$asm06.System.Net.Sockets.IPPacketInformation.prototype.get_Interface, null);
$asm06.System.Net.Sockets.IPPacketInformation.prototype.address = null;
$asm06.System.Net.Sockets.IPPacketInformation.prototype.networkInterface = 0;

System.Net.NetworkInformation.NetworkChange.add_NetworkAddressChanged = function (value) {
	System.Net.NetworkInformation.NetworkChange.s_NetworkChange.AddNetworkAddressChanged(value);
};
System.Net.NetworkInformation.NetworkChange.remove_NetworkAddressChanged = function (value) {
	System.Net.NetworkInformation.NetworkChange.s_NetworkChange.RemoveNetworkAddressChanged(value);
};
System.Net.NetworkInformation.NetworkChange.RegisterNetworkChange = function (nc) {
	if (System.Net.NetworkInformation.NetworkChange.s_NetworkChange !== null) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
	}
	System.Net.NetworkInformation.NetworkChange.s_NetworkChange = nc;
};
System.Net.NetworkInformation.NetworkChange.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
System.Net.NetworkInformation.NetworkChange.s_NetworkChange = null;

$asm06.System.Net.NetworkInformation.SecurityCriticalNetworkChange.prototype._ctor = function (callback) {
	System.Object.prototype._ctor.call(this);
	this.networkAddressChangedCallback = callback;
};
$asm06.System.Net.NetworkInformation.SecurityCriticalNetworkChange.RegisterForNetworkAddressChange = function (handler) {
	var object = new $asm06.System.Net.NetworkInformation.SecurityCriticalNetworkChange(handler);
	var state = JSIL.Delegate.New("System.Net.NetworkInformation.NetworkAddressChangedEventHandler", object, $asm06.System.Net.NetworkInformation.SecurityCriticalNetworkChange.prototype.NetworkAddressChangedCallback);
	System.Net.UiSynchronizationContext.Current.Post(JSIL.Delegate.New("System.Threading.SendOrPostCallback", null, $asm06.System.Net.NetworkInformation.SecurityCriticalNetworkChange.AddNetworkAddressChanged), state);
};
$asm06.System.Net.NetworkInformation.SecurityCriticalNetworkChange.AddNetworkAddressChanged = function (obj) {
	var value = JSIL.Cast(obj, System.Net.NetworkInformation.NetworkAddressChangedEventHandler);
	System.Net.NetworkInformation.NetworkChange.add_NetworkAddressChanged(value);
};
$asm06.System.Net.NetworkInformation.SecurityCriticalNetworkChange.prototype.NetworkAddressChangedCallback = function (sender, e) {
	this.networkAddressChangedCallback(sender, e);
};
$asm06.System.Net.NetworkInformation.SecurityCriticalNetworkChange.prototype.networkAddressChangedCallback = null;

$asm06.System.Net.NetworkInformation.UnsafeNetworkInterfaceNativeMethods.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};

System.Net.NetworkInformation.NetworkInterface.GetIsNetworkAvailable = function () {
	var num = new JSIL.Variable(0);
	$asm06.System.Net.NetworkInformation.UnsafeNetworkInterfaceNativeMethods.GetIsNetworkAvailableNative(/* ref */ num);
	return (num.value !== 0);
};
System.Net.NetworkInformation.NetworkInterface.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};

System.Net.Cookie.prototype._ctor$0 = function () {
	this.m_comment = System.String.Empty;
	this.m_cookieVariant = System.Net.CookieVariant.Plain;
	this.m_domain = System.String.Empty;
	this.m_domain_implicit = true;
	this.m_expires = System.DateTime.MinValue.MemberwiseClone();
	this.m_name = System.String.Empty;
	this.m_path = System.String.Empty;
	this.m_path_implicit = true;
	this.m_port = System.String.Empty;
	this.m_port_implicit = true;
	this.m_timeStamp = System.DateTime.Now.MemberwiseClone();
	this.m_value = System.String.Empty;
	this.m_domainKey = System.String.Empty;
	System.Object.prototype._ctor.call(this);
};
System.Net.Cookie.prototype._ctor$1 = function (name, value) {
	this.m_comment = System.String.Empty;
	this.m_cookieVariant = System.Net.CookieVariant.Plain;
	this.m_domain = System.String.Empty;
	this.m_domain_implicit = true;
	this.m_expires = System.DateTime.MinValue.MemberwiseClone();
	this.m_name = System.String.Empty;
	this.m_path = System.String.Empty;
	this.m_path_implicit = true;
	this.m_port = System.String.Empty;
	this.m_port_implicit = true;
	this.m_timeStamp = System.DateTime.Now.MemberwiseClone();
	this.m_value = System.String.Empty;
	this.m_domainKey = System.String.Empty;
	System.Object.prototype._ctor.call(this);
	this.Name = name;
	this.m_value = value;
};
System.Net.Cookie.prototype._ctor$2 = function (name, value, path) {
	this._ctor$1(name, value);
	this.Path = path;
};
System.Net.Cookie.prototype._ctor$3 = function (name, value, path, domain) {
	this._ctor$2(name, value, path);
	this.Domain = domain;
};
System.Net.Cookie.prototype.get_Comment = function () {
	return this.m_comment;
};
System.Net.Cookie.prototype.set_Comment = function (value) {
	if (value === null) {
		value = System.String.Empty;
	}
	this.m_comment = value;
};
System.Net.Cookie.prototype.get_CommentUri = function () {
	return this.m_commentUri;
};
System.Net.Cookie.prototype.set_CommentUri = function (value) {
	this.m_commentUri = value;
};
System.Net.Cookie.prototype.get_HttpOnly = function () {
	return this.m_httpOnly;
};
System.Net.Cookie.prototype.set_HttpOnly = function (value) {
	this.m_httpOnly = value;
};
System.Net.Cookie.prototype.get_Discard = function () {
	return this.m_discard;
};
System.Net.Cookie.prototype.set_Discard = function (value) {
	this.m_discard = value;
};
System.Net.Cookie.prototype.get_Domain = function () {
	return this.m_domain;
};
System.Net.Cookie.prototype.set_Domain = function (value) {
	this.m_domain = (value === null) ? System.String.Empty : value;
	this.m_domain_implicit = false;
	this.m_domainKey = System.String.Empty;
};
System.Net.Cookie.prototype.get__Domain = function () {
	if (!(this.Plain || 
			this.m_domain_implicit || (this.m_domain.length === 0))) {
		return ("$Domain=" + this.IsQuotedDomain ? '"' : System.String.Empty + this.m_domain + this.IsQuotedDomain ? '"' : System.String.Empty);
	}
	return System.String.Empty;
};
System.Net.Cookie.prototype.get_Expired = function () {
	return (System.DateTime.op_LessThanOrEqual(this.m_expires.MemberwiseClone(), System.DateTime.Now.MemberwiseClone()) && System.DateTime.op_Inequality(this.m_expires.MemberwiseClone(), System.DateTime.MinValue.MemberwiseClone()));
};
System.Net.Cookie.prototype.set_Expired = function (value) {
	if (value) {
		this.m_expires = System.DateTime.Now.MemberwiseClone();
	}
};
System.Net.Cookie.prototype.get_Expires = function () {
	return this.m_expires;
};
System.Net.Cookie.prototype.set_Expires = function (value) {
	this.m_expires = value;
};
System.Net.Cookie.prototype.get_Name = function () {
	return this.m_name;
};
System.Net.Cookie.prototype.set_Name = function (value) {
	if (!(!$asm06.System.Net.ValidationHelper.IsBlankString(value) && this.InternalSetName(value))) {
		throw JSIL.New(System.Net.CookieException, "_ctor$1", [$asm06.System.SR.GetString$0("net_cookie_attribute", ["Name", (value === null) ? "<null>" : value])]);
	}
};
System.Net.Cookie.prototype.InternalSetName = function (value) {
	if (!(!$asm06.System.Net.ValidationHelper.IsBlankString(value) && 
			((value[0]) !== "$") && (value.IndexOfAny$0(System.Net.Cookie.Reserved2Name) === -1))) {
		this.m_name = System.String.Empty;
		return false;
	}
	this.m_name = value;
	return true;
};
System.Net.Cookie.prototype.get_Path = function () {
	return this.m_path;
};
System.Net.Cookie.prototype.set_Path = function (value) {
	this.m_path = (value === null) ? System.String.Empty : value;
	this.m_path_implicit = false;
};
System.Net.Cookie.prototype.get__Path = function () {
	if (!(this.Plain || 
			this.m_path_implicit || (this.m_path.length === 0))) {
		return ("$Path=" + this.m_path);
	}
	return System.String.Empty;
};
System.Net.Cookie.prototype.get_Plain = function () {
	return (this.Variant === System.Net.CookieVariant.Plain);
};
System.Net.Cookie.prototype.VerifySetDefaults = function (variant, uri, isLocalDomain, localDomain, set_default, isThrow) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				var host = uri.Host;
				var port = uri.Port;
				var absolutePath = uri.AbsolutePath;
				var flag = true;
				if (set_default) {
					if (this.Version === 0) {
						variant = System.Net.CookieVariant.Plain;
					} else if (!((this.Version !== 1) || JSIL.Cast(variant, System.Boolean))) {
						variant = System.Net.CookieVariant.Default;
					}
					this.m_cookieVariant = variant;
				}
				if (!((this.m_name !== null) && 
						(this.m_name.length !== 0) && 
						((this.m_name[0]) !== "$") && (this.m_name.IndexOfAny$0(System.Net.Cookie.Reserved2Name) === -1))) {
					if (isThrow) {
						throw JSIL.New(System.Net.CookieException, "_ctor$1", [$asm06.System.SR.GetString$0("net_cookie_attribute", ["Name", (this.m_name === null) ? "<null>" : this.m_name])]);
					}
					return false;
				} else {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								if (!((this.m_value !== null) && (((this.m_value.length > 2) && 
												((this.m_value[0]) === '"') && 
												((this.m_value[(this.m_value.length - 1)]) === '"')) || 
											(this.m_value.IndexOfAny$0(System.Net.Cookie.Reserved2Value) === -1)))) {
									if (isThrow) {
										throw JSIL.New(System.Net.CookieException, "_ctor$1", [$asm06.System.SR.GetString$0("net_cookie_attribute", ["Value", (this.m_value === null) ? "<null>" : this.m_value])]);
									}
									return false;
								} else {
									var __label2__ = "__entry2__";
								__step2__: 
									while (true) {
										switch (__label2__) {
											case "__entry2__":
												if (!((this.Comment === null) || 
														((this.Comment.length > 2) && 
															((this.Comment[0]) === '"') && 
															((this.Comment[(this.Comment.length - 1)]) === '"')) || (this.Comment.IndexOfAny$0(System.Net.Cookie.Reserved2Value) === -1))) {
													if (isThrow) {
														throw JSIL.New(System.Net.CookieException, "_ctor$1", [$asm06.System.SR.GetString$0("net_cookie_attribute", ["Comment", this.Comment])]);
													}
													return false;
												} else {
													var __label3__ = "__entry3__";
												__step3__: 
													while (true) {
														switch (__label3__) {
															case "__entry3__":
																if ((this.Path === null) || 
																	((this.Path.length > 2) && 
																		((this.Path[0]) === '"') && 
																		((this.Path[(this.Path.length - 1)]) === '"')) || (this.Path.IndexOfAny$0(System.Net.Cookie.Reserved2Value) === -1)) {
																	var __label4__ = "__entry4__";
																__step4__: 
																	while (true) {
																		switch (__label4__) {
																			case "__entry4__":
																				if (!(!set_default || !this.m_domain_implicit)) {
																					this.m_domain = host;
																				} else {
																					if (!this.m_domain_implicit) {
																						var text = this.m_domain;
																						if (!System.Net.Cookie.DomainCharsTest(text)) {
																							if (isThrow) {
																								throw JSIL.New(System.Net.CookieException, "_ctor$1", [$asm06.System.SR.GetString$0("net_cookie_attribute", ["Domain", (text === null) ? "<null>" : text])]);
																							}
																							return false;
																						} else {
																							if ((text[0]) !== ".") {
																								if (!((variant === System.Net.CookieVariant.Rfc2965) || (variant === System.Net.CookieVariant.Plain))) {
																									if (isThrow) {
																										throw JSIL.New(System.Net.CookieException, "_ctor$1", [$asm06.System.SR.GetString$0("net_cookie_attribute", ["Domain", this.m_domain])]);
																									}
																									return false;
																								} else {
																									text = (JSIL.ConcatString(".", text));
																								}
																							}
																							var num = host.IndexOf$0(".");
																							var flag2 = false;
																							if (!(!isLocalDomain || (System.String.Compare$1(localDomain, text, System.StringComparison.OrdinalIgnoreCase) !== 0))) {
																								flag = true;
																							} else if (!((text.length >= 4) && ((flag2 = (System.String.Compare$1(text, ".local", System.StringComparison.OrdinalIgnoreCase) === 0)) || 
																										(text.IndexOf$2(".", 1, (text.length - 2)) !== -1)))) {
																								flag = false;
																							} else if (!(!flag2 || !isLocalDomain)) {
																								flag = true;
																							} else if (!(!flag2 || isLocalDomain)) {
																								flag = false;
																							} else if (variant === System.Net.CookieVariant.Plain) {
																								if (!((((host.length + 1) === text.length) && 
																											(System.String.Compare$5(
																													host, 
																													0, 
																													text, 
																													1, 
																													host.length, 
																													System.StringComparison.OrdinalIgnoreCase
																												) === 0)) || ((host.length > text.length) && 
																											(System.String.Compare$5(
																													host, 
																													(host.length - text.length), 
																													text, 
																													0, 
																													text.length, 
																													System.StringComparison.OrdinalIgnoreCase
																												) === 0)))) {
																									flag = false;
																								}
																							} else if (!(flag2 || ((num !== -1) && 
																										(text.length === (host.length - num)) && 
																										(System.String.Compare$5(
																												host, 
																												num, 
																												text, 
																												0, 
																												text.length, 
																												System.StringComparison.OrdinalIgnoreCase
																											) === 0)))) {
																								flag = false;
																							}
																							if (flag) {
																								if (flag2) {
																									this.m_domainKey = localDomain.ToLower$1(System.Globalization.CultureInfo.InvariantCulture);
																								} else {
																									this.m_domainKey = text.ToLower$1(System.Globalization.CultureInfo.InvariantCulture);
																								}
																							}
																						}
																					} else if (System.String.Compare$1(host, this.m_domain, System.StringComparison.OrdinalIgnoreCase) !== 0) {
																						flag = false;
																					}
																					if (!flag) {
																						if (isThrow) {
																							throw JSIL.New(System.Net.CookieException, "_ctor$1", [$asm06.System.SR.GetString$0("net_cookie_attribute", ["Domain", this.m_domain])]);
																						}
																						return false;
																					}
																				}
																				if (!(!set_default || !this.m_path_implicit)) {
																					switch (Number(this.m_cookieVariant)) {
																						case 1: 
																							this.m_path = absolutePath;
																							__label4__ = "IL_553";
																							continue __step4__;
																						case 2: 
																							this.m_path = absolutePath.Substring$1(0, absolutePath.LastIndexOf$0("/"));
																							__label4__ = "IL_553";
																							continue __step4__;
																					}
																					this.m_path = absolutePath.Substring$1(0, (absolutePath.LastIndexOf$0("/") + 1));
																				} else if (!absolutePath.StartsWith$0($asm06.System.Net.CookieParser.CheckQuoted(this.m_path))) {
																					if (isThrow) {
																						throw JSIL.New(System.Net.CookieException, "_ctor$1", [$asm06.System.SR.GetString$0("net_cookie_attribute", ["Path", this.m_path])]);
																					}
																					return false;
																				}
																				__label4__ = "IL_553";
																				continue __step4__;
																				break;
																			case "IL_553":
																				if (!(!set_default || 
																						this.m_port_implicit || (this.m_port.length !== 0))) {
																					this.m_port_list = JSIL.Array.New(System.Int32, [port]);
																				}
																				if (!this.m_port_implicit) {
																					flag = false;
																					var port_list = this.m_port_list;
																				__loop0__: 
																					for (var i = 0; i < port_list.length; ++i) {
																						var num2 = port_list[i];
																						if (num2 === port) {
																							flag = true;
																							break __loop0__;
																						}
																					}
																					if (!flag) {
																						if (isThrow) {
																							throw JSIL.New(System.Net.CookieException, "_ctor$1", [$asm06.System.SR.GetString$0("net_cookie_attribute", ["Port", this.m_port])]);
																						}
																						return false;
																					}
																				}
																				return true;
																				break __step4__;
																		}
																	}
																}
																if (isThrow) {
																	throw JSIL.New(System.Net.CookieException, "_ctor$1", [$asm06.System.SR.GetString$0("net_cookie_attribute", ["Path", this.Path])]);
																}
																return false;
																break __step3__;
														}
													}
												}
												break __step2__;
										}
									}
								}
								break __step1__;
						}
					}
				}
				break __step0__;
		}
	}
};
System.Net.Cookie.DomainCharsTest = function (name) {
	if (!((name !== null) && (name.length !== 0))) {
		return false;
	}
__loop0__: 
	for (var i = 0; i < name.length; ++i) {
		var c = (name[i]);
		if (!(((c >= "0") && 
					(c <= "9")) || 
				(c === ".") || 
				(c === "-") || 
				((c >= "a") && 
					(c <= "z")) || 
				((c >= "A") && 
					(c <= "Z")) || (c === "_"))) {
			return false;
		}
	}
	return true;
};
System.Net.Cookie.prototype.get_Port = function () {
	return this.m_port;
};
System.Net.Cookie.prototype.set_Port = function (value) {
	this.m_port_implicit = false;
	if (!((value !== null) && (value.length !== 0))) {
		this.m_port = System.String.Empty;
		return;
	}
	this.m_port = value;
	if (!(((value[0]) === '"') && ((value[(value.length - 1)]) === '"'))) {
		throw JSIL.New(System.Net.CookieException, "_ctor$1", [$asm06.System.SR.GetString$0("net_cookie_attribute", ["Port", this.m_port])]);
	}
	var array = value.Split(System.Net.Cookie.PortSplitDelimiters);
	this.m_port_list = JSIL.Array.New(System.Int32, array.length);
__loop0__: 
	for (var i = 0; i < array.length; ++i) {
		this.m_port_list[i] = -1;
		if (!((array[i].length === 0) || System.Int32.TryParse$0(array[i], JSIL.UnmaterializedReference()))) {
			throw JSIL.New(System.Net.CookieException, "_ctor$1", [$asm06.System.SR.GetString$0("net_cookie_attribute", ["Port", this.m_port])]);
		}
	}
	this.m_version = 1;
	this.m_cookieVariant = System.Net.CookieVariant.Rfc2965;
};
System.Net.Cookie.prototype.get_PortList = function () {
	return this.m_port_list;
};
System.Net.Cookie.prototype.get__Port = function () {
	if (!this.m_port_implicit) {
		return ("$Port" + (this.m_port.length === 0) ? System.String.Empty : ("=" + this.m_port));
	}
	return System.String.Empty;
};
System.Net.Cookie.prototype.get_Secure = function () {
	return this.m_secure;
};
System.Net.Cookie.prototype.set_Secure = function (value) {
	this.m_secure = value;
};
System.Net.Cookie.prototype.get_TimeStamp = function () {
	return this.m_timeStamp;
};
System.Net.Cookie.prototype.get_Value = function () {
	return this.m_value;
};
System.Net.Cookie.prototype.set_Value = function (value) {
	this.m_value = (value === null) ? System.String.Empty : value;
};
System.Net.Cookie.prototype.get_Variant = function () {
	return this.m_cookieVariant;
};
System.Net.Cookie.prototype.set_Variant = function (value) {
	this.m_cookieVariant = value;
};
System.Net.Cookie.prototype.get_DomainKey = function () {
	if (!this.m_domain_implicit) {
		return this.m_domainKey;
	}
	return this.Domain;
};
System.Net.Cookie.prototype.get_Version = function () {
	return this.m_version;
};
System.Net.Cookie.prototype.set_Version = function (value) {
	if (value < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["value"]);
	}
	this.m_version = value;
	if (!((value <= 0) || (this.m_cookieVariant >= System.Net.CookieVariant.Default))) {
		this.m_cookieVariant = System.Net.CookieVariant.Default;
	}
};
System.Net.Cookie.prototype.get__Version = function () {
	if (this.Version !== 0) {
		return ("$Version=" + this.IsQuotedVersion ? '"' : System.String.Empty + (this.m_version).toString() + this.IsQuotedVersion ? '"' : System.String.Empty);
	}
	return System.String.Empty;
};
System.Net.Cookie.GetComparer = function () {
	return System.Net.Cookie.staticComparer;
};
System.Net.Cookie.prototype.Equals = function (comparand) {
	if (JSIL.TryCast(comparand, System.Net.Cookie) === null) {
		return false;
	}
	var cookie = JSIL.Cast(comparand, System.Net.Cookie);
	return (!((System.String.Compare$1(this.Name, cookie.Name, System.StringComparison.OrdinalIgnoreCase) !== 0) || 
			(System.String.Compare$1(this.Value, cookie.Value, System.StringComparison.Ordinal) !== 0) || 
			(System.String.Compare$1(this.Path, cookie.Path, System.StringComparison.Ordinal) !== 0) || 
			(System.String.Compare$1(this.Domain, cookie.Domain, System.StringComparison.OrdinalIgnoreCase) !== 0)) && (this.Version === cookie.Version));
};
System.Net.Cookie.prototype.GetHashCode = function () {
	return (JSIL.ConcatString.apply(null, [this.Name, "=", this.Value, ";", this.Path, "; ", this.Domain, "; ", this.Version])).GetHashCode();
};
System.Net.Cookie.prototype.toString = function () {
	var domain = this._Domain;
	var path = this._Path;
	var port = this._Port;
	var version = this._Version;
	var text = (JSIL.ConcatString.apply(null, JSIL.Array.New(System.String, [(version.length === 0) ? System.String.Empty : (version + "; "), this.Name, "=", this.Value, (path.length === 0) ? System.String.Empty : ("; " + path), (domain.length === 0) ? System.String.Empty : ("; " + domain), (port.length === 0) ? System.String.Empty : ("; " + port)])));
	if (text == "=") {
		return System.String.Empty;
	}
	return text;
};
System.Net.Cookie.prototype.ToServerString = function () {
	var text = ((this.Name + "=" + this.Value));
	if (!((this.m_comment === null) || (this.m_comment.length <= 0))) {
		text = ((text + "; Comment=" + this.m_comment));
	}
	if (System.Uri.op_Inequality(this.m_commentUri, null)) {
		text = ((text + '; CommentURL="' + this.m_commentUri.toString() + '"'));
	}
	if (this.m_discard) {
		text = ((text + "; Discard"));
	}
	if (!(this.Plain || 
			this.m_domain_implicit || 
			(this.m_domain === null) || (this.m_domain.length <= 0))) {
		text = ((text + "; Domain=" + this.m_domain));
	}
	var seconds = System.DateTime.op_Subtraction$1(this.Expires.MemberwiseClone(), System.DateTime.UtcNow.MemberwiseClone()).Seconds;
	if (seconds > 0) {
		text = ((text + "; Max-Age=" + (seconds).toString()));
	}
	if (!(this.Plain || 
			this.m_path_implicit || 
			(this.m_path === null) || (this.m_path.length <= 0))) {
		text = ((text + "; Path=" + this.m_path));
	}
	if (!(this.Plain || 
			this.m_port_implicit || 
			(this.m_port === null) || (this.m_port.length <= 0))) {
		text = ((text + "; Port=" + this.m_port));
	}
	if (this.m_version > 0) {
		text = ((text + "; Version=" + (this.m_version).toString()));
	}
	if (!(text == "=")) {
		return text;
	}
	return null;
};
JSIL.OverloadedMethod(System.Net.Cookie.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.String, System.String]], 
		["_ctor$2", [System.String, System.String, System.String]], 
		["_ctor$3", [System.String, System.String, System.String, System.String]]
	]);
JSIL.MakeProperty(System.Net.Cookie.prototype, "Comment", 
	System.Net.Cookie.prototype.get_Comment, System.Net.Cookie.prototype.set_Comment);
JSIL.MakeProperty(System.Net.Cookie.prototype, "CommentUri", 
	System.Net.Cookie.prototype.get_CommentUri, System.Net.Cookie.prototype.set_CommentUri);
JSIL.MakeProperty(System.Net.Cookie.prototype, "HttpOnly", 
	System.Net.Cookie.prototype.get_HttpOnly, System.Net.Cookie.prototype.set_HttpOnly);
JSIL.MakeProperty(System.Net.Cookie.prototype, "Discard", 
	System.Net.Cookie.prototype.get_Discard, System.Net.Cookie.prototype.set_Discard);
JSIL.MakeProperty(System.Net.Cookie.prototype, "Domain", 
	System.Net.Cookie.prototype.get_Domain, System.Net.Cookie.prototype.set_Domain);
JSIL.MakeProperty(System.Net.Cookie.prototype, "_Domain", 
	System.Net.Cookie.prototype.get__Domain, null);
JSIL.MakeProperty(System.Net.Cookie.prototype, "Expired", 
	System.Net.Cookie.prototype.get_Expired, System.Net.Cookie.prototype.set_Expired);
JSIL.MakeProperty(System.Net.Cookie.prototype, "Expires", 
	System.Net.Cookie.prototype.get_Expires, System.Net.Cookie.prototype.set_Expires);
JSIL.MakeProperty(System.Net.Cookie.prototype, "Name", 
	System.Net.Cookie.prototype.get_Name, System.Net.Cookie.prototype.set_Name);
JSIL.MakeProperty(System.Net.Cookie.prototype, "Path", 
	System.Net.Cookie.prototype.get_Path, System.Net.Cookie.prototype.set_Path);
JSIL.MakeProperty(System.Net.Cookie.prototype, "_Path", 
	System.Net.Cookie.prototype.get__Path, null);
JSIL.MakeProperty(System.Net.Cookie.prototype, "Plain", 
	System.Net.Cookie.prototype.get_Plain, null);
JSIL.MakeProperty(System.Net.Cookie.prototype, "Port", 
	System.Net.Cookie.prototype.get_Port, System.Net.Cookie.prototype.set_Port);
JSIL.MakeProperty(System.Net.Cookie.prototype, "PortList", 
	System.Net.Cookie.prototype.get_PortList, null);
JSIL.MakeProperty(System.Net.Cookie.prototype, "_Port", 
	System.Net.Cookie.prototype.get__Port, null);
JSIL.MakeProperty(System.Net.Cookie.prototype, "Secure", 
	System.Net.Cookie.prototype.get_Secure, System.Net.Cookie.prototype.set_Secure);
JSIL.MakeProperty(System.Net.Cookie.prototype, "TimeStamp", 
	System.Net.Cookie.prototype.get_TimeStamp, null);
JSIL.MakeProperty(System.Net.Cookie.prototype, "Value", 
	System.Net.Cookie.prototype.get_Value, System.Net.Cookie.prototype.set_Value);
JSIL.MakeProperty(System.Net.Cookie.prototype, "Variant", 
	System.Net.Cookie.prototype.get_Variant, System.Net.Cookie.prototype.set_Variant);
JSIL.MakeProperty(System.Net.Cookie.prototype, "DomainKey", 
	System.Net.Cookie.prototype.get_DomainKey, null);
JSIL.MakeProperty(System.Net.Cookie.prototype, "Version", 
	System.Net.Cookie.prototype.get_Version, System.Net.Cookie.prototype.set_Version);
JSIL.MakeProperty(System.Net.Cookie.prototype, "_Version", 
	System.Net.Cookie.prototype.get__Version, null);
Object.defineProperty(System.Net.Cookie, "MaxSupportedVersion", {
		"value": 1}
);
Object.defineProperty(System.Net.Cookie, "CommentAttributeName", {
		"value": "Comment"}
);
Object.defineProperty(System.Net.Cookie, "CommentUrlAttributeName", {
		"value": "CommentURL"}
);
Object.defineProperty(System.Net.Cookie, "DiscardAttributeName", {
		"value": "Discard"}
);
Object.defineProperty(System.Net.Cookie, "DomainAttributeName", {
		"value": "Domain"}
);
Object.defineProperty(System.Net.Cookie, "ExpiresAttributeName", {
		"value": "Expires"}
);
Object.defineProperty(System.Net.Cookie, "MaxAgeAttributeName", {
		"value": "Max-Age"}
);
Object.defineProperty(System.Net.Cookie, "PathAttributeName", {
		"value": "Path"}
);
Object.defineProperty(System.Net.Cookie, "PortAttributeName", {
		"value": "Port"}
);
Object.defineProperty(System.Net.Cookie, "SecureAttributeName", {
		"value": "Secure"}
);
Object.defineProperty(System.Net.Cookie, "VersionAttributeName", {
		"value": "Version"}
);
Object.defineProperty(System.Net.Cookie, "HttpOnlyAttributeName", {
		"value": "HttpOnly"}
);
Object.defineProperty(System.Net.Cookie, "SeparatorLiteral", {
		"value": "; "}
);
Object.defineProperty(System.Net.Cookie, "EqualsLiteral", {
		"value": "="}
);
Object.defineProperty(System.Net.Cookie, "QuotesLiteral", {
		"value": '"'}
);
Object.defineProperty(System.Net.Cookie, "SpecialAttributeLiteral", {
		"value": "$"}
);
System.Net.Cookie.PortSplitDelimiters = null;
System.Net.Cookie.Reserved2Name = null;
System.Net.Cookie.Reserved2Value = null;
System.Net.Cookie.staticComparer = null;
System.Net.Cookie.prototype.m_comment = null;
System.Net.Cookie.prototype.m_commentUri = null;
System.Net.Cookie.prototype.m_cookieVariant = 0;
System.Net.Cookie.prototype.m_discard = false;
System.Net.Cookie.prototype.m_domain = null;
System.Net.Cookie.prototype.m_domain_implicit = false;
System.Net.Cookie.prototype.m_name = null;
System.Net.Cookie.prototype.m_path = null;
System.Net.Cookie.prototype.m_path_implicit = false;
System.Net.Cookie.prototype.m_port = null;
System.Net.Cookie.prototype.m_port_implicit = false;
System.Net.Cookie.prototype.m_port_list = null;
System.Net.Cookie.prototype.m_secure = false;
System.Net.Cookie.prototype.m_httpOnly = false;
System.Net.Cookie.prototype.m_value = null;
System.Net.Cookie.prototype.m_version = 0;
System.Net.Cookie.prototype.m_domainKey = null;
System.Net.Cookie.prototype.IsQuotedVersion = false;
System.Net.Cookie.prototype.IsQuotedDomain = false;
System.Net.Cookie._cctor = function () {
	System.Net.Cookie.PortSplitDelimiters = JSIL.Array.New(System.Char, [" ", ",", '"']);
	System.Net.Cookie.Reserved2Name = JSIL.Array.New(System.Char, [" ", "\t", "\r", "\n", "=", ";", ","]);
	System.Net.Cookie.Reserved2Value = JSIL.Array.New(System.Char, [";", ","]);
	System.Net.Cookie.staticComparer = new System.Net.Comparer();
};

$asm06.System.Net.CookieTokenizer.prototype._ctor = function (tokenStream) {
	System.Object.prototype._ctor.call(this);
	this.m_length = tokenStream.length;
	this.m_tokenStream = tokenStream;
};
$asm06.System.Net.CookieTokenizer.prototype.get_EndOfCookie = function () {
	return this.m_eofCookie;
};
$asm06.System.Net.CookieTokenizer.prototype.set_EndOfCookie = function (value) {
	this.m_eofCookie = value;
};
$asm06.System.Net.CookieTokenizer.prototype.get_Eof = function () {
	return (this.m_index >= this.m_length);
};
$asm06.System.Net.CookieTokenizer.prototype.get_Name = function () {
	return this.m_name;
};
$asm06.System.Net.CookieTokenizer.prototype.set_Name = function (value) {
	this.m_name = value;
};
$asm06.System.Net.CookieTokenizer.prototype.get_Quoted = function () {
	return this.m_quoted;
};
$asm06.System.Net.CookieTokenizer.prototype.set_Quoted = function (value) {
	this.m_quoted = value;
};
$asm06.System.Net.CookieTokenizer.prototype.get_Token = function () {
	return this.m_token;
};
$asm06.System.Net.CookieTokenizer.prototype.set_Token = function (value) {
	this.m_token = value;
};
$asm06.System.Net.CookieTokenizer.prototype.get_Value = function () {
	return this.m_value;
};
$asm06.System.Net.CookieTokenizer.prototype.set_Value = function (value) {
	this.m_value = value;
};
$asm06.System.Net.CookieTokenizer.prototype.Extract = function () {
	var text = System.String.Empty;
	if (this.m_tokenLength !== 0) {
		text = this.m_tokenStream.Substring$1(this.m_start, this.m_tokenLength);
		if (!this.Quoted) {
			text = text.Trim$1();
		}
	}
	return text;
};
$asm06.System.Net.CookieTokenizer.prototype.FindNext = function (ignoreComma, ignoreEquals) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				this.m_tokenLength = 0;
				this.m_start = this.m_index;
			__loop0__: 
				while ((this.m_index < this.m_length) && System.Char.IsWhiteSpace$0(this.m_tokenStream[this.m_index])) {
					++this.m_index;
					++this.m_start;
				}
				var result = $asm06.System.Net.CookieToken.End;
				var num = 1;
				if (!this.Eof) {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								if ((this.m_tokenStream[this.m_index]) === '"') {
									this.Quoted = true;
									++this.m_index;
									var flag = false;
								__loop1__: 
									while (this.m_index < this.m_length) {
										var c = (this.m_tokenStream[this.m_index]);
										if (!flag && (c === '"')) {
											break __loop1__;
										}
										if (flag) {
											flag = false;
										} else if (c === "\\") {
											flag = true;
										}
										++this.m_index;
									}
									if (this.m_index < this.m_length) {
										++this.m_index;
									}
									this.m_tokenLength = (this.m_index - this.m_start);
									num = 0;
									ignoreComma = false;
								}
							__loop2__: 
								while (!((this.m_index >= this.m_length) || 
										((this.m_tokenStream[this.m_index]) === ";") || 
										(!ignoreEquals && 
											((this.m_tokenStream[this.m_index]) === "="))) && (ignoreComma || 
										((this.m_tokenStream[this.m_index]) !== ","))) {
									if ((this.m_tokenStream[this.m_index]) === ",") {
										this.m_start = (this.m_index + 1);
										this.m_tokenLength = -1;
										ignoreComma = false;
									}
									++this.m_index;
									this.m_tokenLength += num;
								}
								if (!this.Eof) {
									var __label2__ = "__entry2__";
								__step2__: 
									while (true) {
										switch (__label2__) {
											case "__entry2__":
												switch (this.m_tokenStream[this.m_index]) {
													case ";": 
														result = $asm06.System.Net.CookieToken.EndToken;
														__label2__ = "IL_1F0";
														continue __step2__;
													case "=": 
														result = $asm06.System.Net.CookieToken.Equals;
														__label2__ = "IL_1F0";
														continue __step2__;
												}
												result = $asm06.System.Net.CookieToken.EndCookie;
												__label2__ = "IL_1F0";
												continue __step2__;
												break;
											case "IL_1F0":
												++this.m_index;
												break __step2__;
										}
									}
								}
								break __step1__;
						}
					}
				}
				return result;
				break __step0__;
		}
	}
};
$asm06.System.Net.CookieTokenizer.prototype.Next = function (first, parseResponseCookies) {
	this.Reset();
	var cookieToken = this.FindNext(false, false);
	if (cookieToken === $asm06.System.Net.CookieToken.EndCookie) {
		this.EndOfCookie = true;
	}
	if (!((cookieToken !== $asm06.System.Net.CookieToken.End) && (cookieToken !== $asm06.System.Net.CookieToken.EndCookie))) {
		if ((this.Name = this.Extract()).length !== 0) {
			this.Token = this.TokenFromName(parseResponseCookies);
			return $asm06.System.Net.CookieToken.Attribute;
		}
		return cookieToken;
	} else {
		this.Name = this.Extract();
		if (first) {
			this.Token = $asm06.System.Net.CookieToken.CookieName;
		} else {
			this.Token = this.TokenFromName(parseResponseCookies);
		}
		if (cookieToken === $asm06.System.Net.CookieToken.Equals) {
			cookieToken = this.FindNext((!first && 
					(this.Token === $asm06.System.Net.CookieToken.Expires)), true);
			if (cookieToken === $asm06.System.Net.CookieToken.EndCookie) {
				this.EndOfCookie = true;
			}
			this.Value = this.Extract();
			return $asm06.System.Net.CookieToken.NameValuePair;
		}
		return $asm06.System.Net.CookieToken.Attribute;
	}
};
$asm06.System.Net.CookieTokenizer.prototype.Reset = function () {
	this.m_eofCookie = false;
	this.m_name = System.String.Empty;
	this.m_quoted = false;
	this.m_start = this.m_index;
	this.m_token = $asm06.System.Net.CookieToken.Nothing;
	this.m_tokenLength = 0;
	this.m_value = System.String.Empty;
};
$asm06.System.Net.CookieTokenizer.prototype.TokenFromName = function (parseResponseCookies) {
	if (!parseResponseCookies) {
	__loop1__: 
		for (var i = 0; i < $asm06.System.Net.CookieTokenizer.RecognizedServerAttributes.length; ++i) {
			if ($asm06.System.Net.CookieTokenizer.RecognizedServerAttributes[i].IsEqualTo(this.Name)) {
				return $asm06.System.Net.CookieTokenizer.RecognizedServerAttributes[i].Token;
			}
		}
	} else {
	__loop0__: 
		for (var j = 0; j < $asm06.System.Net.CookieTokenizer.RecognizedAttributes.length; ++j) {
			if ($asm06.System.Net.CookieTokenizer.RecognizedAttributes[j].IsEqualTo(this.Name)) {
				return $asm06.System.Net.CookieTokenizer.RecognizedAttributes[j].Token;
			}
		}
	}
	return $asm06.System.Net.CookieToken.Unknown;
};
JSIL.MakeProperty($asm06.System.Net.CookieTokenizer.prototype, "EndOfCookie", 
	$asm06.System.Net.CookieTokenizer.prototype.get_EndOfCookie, $asm06.System.Net.CookieTokenizer.prototype.set_EndOfCookie);
JSIL.MakeProperty($asm06.System.Net.CookieTokenizer.prototype, "Eof", 
	$asm06.System.Net.CookieTokenizer.prototype.get_Eof, null);
JSIL.MakeProperty($asm06.System.Net.CookieTokenizer.prototype, "Name", 
	$asm06.System.Net.CookieTokenizer.prototype.get_Name, $asm06.System.Net.CookieTokenizer.prototype.set_Name);
JSIL.MakeProperty($asm06.System.Net.CookieTokenizer.prototype, "Quoted", 
	$asm06.System.Net.CookieTokenizer.prototype.get_Quoted, $asm06.System.Net.CookieTokenizer.prototype.set_Quoted);
JSIL.MakeProperty($asm06.System.Net.CookieTokenizer.prototype, "Token", 
	$asm06.System.Net.CookieTokenizer.prototype.get_Token, $asm06.System.Net.CookieTokenizer.prototype.set_Token);
JSIL.MakeProperty($asm06.System.Net.CookieTokenizer.prototype, "Value", 
	$asm06.System.Net.CookieTokenizer.prototype.get_Value, $asm06.System.Net.CookieTokenizer.prototype.set_Value);
$asm06.System.Net.CookieTokenizer.prototype.m_eofCookie = false;
$asm06.System.Net.CookieTokenizer.prototype.m_index = 0;
$asm06.System.Net.CookieTokenizer.prototype.m_length = 0;
$asm06.System.Net.CookieTokenizer.prototype.m_name = null;
$asm06.System.Net.CookieTokenizer.prototype.m_quoted = false;
$asm06.System.Net.CookieTokenizer.prototype.m_start = 0;
$asm06.System.Net.CookieTokenizer.prototype.m_token = 0;
$asm06.System.Net.CookieTokenizer.prototype.m_tokenLength = 0;
$asm06.System.Net.CookieTokenizer.prototype.m_tokenStream = null;
$asm06.System.Net.CookieTokenizer.prototype.m_value = null;
$asm06.System.Net.CookieTokenizer.RecognizedAttributes = null;
$asm06.System.Net.CookieTokenizer.RecognizedServerAttributes = null;
$asm06.System.Net.CookieTokenizer._cctor = function () {
	$asm06.System.Net.CookieTokenizer.RecognizedAttributes = JSIL.Array.New($asm06.System.Net.CookieTokenizer.RecognizedAttribute, [new $asm06.System.Net.CookieTokenizer.RecognizedAttribute("Path", $asm06.System.Net.CookieToken.Path), new $asm06.System.Net.CookieTokenizer.RecognizedAttribute("Max-Age", $asm06.System.Net.CookieToken.MaxAge), new $asm06.System.Net.CookieTokenizer.RecognizedAttribute("Expires", $asm06.System.Net.CookieToken.Expires), new $asm06.System.Net.CookieTokenizer.RecognizedAttribute("Version", $asm06.System.Net.CookieToken.Version), new $asm06.System.Net.CookieTokenizer.RecognizedAttribute("Domain", $asm06.System.Net.CookieToken.Domain), new $asm06.System.Net.CookieTokenizer.RecognizedAttribute("Secure", $asm06.System.Net.CookieToken.Secure), new $asm06.System.Net.CookieTokenizer.RecognizedAttribute("Discard", $asm06.System.Net.CookieToken.Discard), new $asm06.System.Net.CookieTokenizer.RecognizedAttribute("Port", $asm06.System.Net.CookieToken.Port), new $asm06.System.Net.CookieTokenizer.RecognizedAttribute("Comment", $asm06.System.Net.CookieToken.Comment), new $asm06.System.Net.CookieTokenizer.RecognizedAttribute("CommentURL", $asm06.System.Net.CookieToken.CommentUrl), new $asm06.System.Net.CookieTokenizer.RecognizedAttribute("HttpOnly", $asm06.System.Net.CookieToken.HttpOnly)]);
	$asm06.System.Net.CookieTokenizer.RecognizedServerAttributes = JSIL.Array.New($asm06.System.Net.CookieTokenizer.RecognizedAttribute, [new $asm06.System.Net.CookieTokenizer.RecognizedAttribute(JSIL.ConcatString("$", "Path"), $asm06.System.Net.CookieToken.Path), new $asm06.System.Net.CookieTokenizer.RecognizedAttribute(JSIL.ConcatString("$", "Version"), $asm06.System.Net.CookieToken.Version), new $asm06.System.Net.CookieTokenizer.RecognizedAttribute(JSIL.ConcatString("$", "Domain"), $asm06.System.Net.CookieToken.Domain), new $asm06.System.Net.CookieTokenizer.RecognizedAttribute(JSIL.ConcatString("$", "Port"), $asm06.System.Net.CookieToken.Port), new $asm06.System.Net.CookieTokenizer.RecognizedAttribute(JSIL.ConcatString("$", "HttpOnly"), $asm06.System.Net.CookieToken.HttpOnly)]);
};

$asm06.System.Net.CookieTokenizer.RecognizedAttribute.prototype._ctor = function (name, token) {
	this.m_name = name;
	this.m_token = token;
};
$asm06.System.Net.CookieTokenizer.RecognizedAttribute.prototype.get_Token = function () {
	return this.m_token;
};
$asm06.System.Net.CookieTokenizer.RecognizedAttribute.prototype.IsEqualTo = function (value) {
	return (System.String.Compare$1(this.m_name, value, System.StringComparison.OrdinalIgnoreCase) === 0);
};
JSIL.MakeProperty($asm06.System.Net.CookieTokenizer.RecognizedAttribute.prototype, "Token", 
	$asm06.System.Net.CookieTokenizer.RecognizedAttribute.prototype.get_Token, null);
$asm06.System.Net.CookieTokenizer.RecognizedAttribute.prototype.m_name = null;
$asm06.System.Net.CookieTokenizer.RecognizedAttribute.prototype.m_token = 0;

$asm06.System.Net.CookieParser.prototype._ctor = function (cookieString) {
	System.Object.prototype._ctor.call(this);
	this.m_tokenizer = new $asm06.System.Net.CookieTokenizer(cookieString);
};
$asm06.System.Net.CookieParser.prototype.Get = function () {
	var __label0__ = null;
__step0__: 
	while (true) {
		switch (__label0__) {
			case null:
				var commentUri = new JSIL.Variable(null), expires = new JSIL.Variable(new System.DateTime()), num = new JSIL.Variable(0), version = new JSIL.Variable(0);
				__label0__ = "__entry0__";
				continue __step0__;
				break;
			case "__entry0__":
				var cookie = null;
				var flag = false;
				var flag2 = false;
				var flag3 = false;
				var flag4 = false;
				var flag5 = false;
				var flag6 = false;
				var flag7 = false;
				var flag8 = false;
				var flag9 = false;
			__loop0__: 
				while (true) {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								var cookieToken = this.m_tokenizer.Next((cookie === null), true);
								if (!(cookie || ((cookieToken !== $asm06.System.Net.CookieToken.NameValuePair) && 
											(cookieToken !== $asm06.System.Net.CookieToken.Attribute)))) {
									cookie = JSIL.New(System.Net.Cookie, "_ctor$0", []);
									if (!cookie.InternalSetName(this.m_tokenizer.Name)) {
										cookie.InternalSetName(System.String.Empty);
									}
									cookie.Value = this.m_tokenizer.Value;
								} else {
									switch (Number(cookieToken)) {
										case 1: 
											switch (Number(this.m_tokenizer.Token)) {
												case 7: 
													if (!flag) {
														flag = true;
														cookie.Comment = this.m_tokenizer.Value;
														__label1__ = "IL_2F6";
														continue __step1__;
													}
													__label1__ = "IL_2F6";
													continue __step1__;
												case 8: 
													if (flag2) {
														__label1__ = "IL_2F6";
														continue __step1__;
													}
													flag2 = true;
													if (System.Uri.TryCreate$0($asm06.System.Net.CookieParser.CheckQuoted(this.m_tokenizer.Value), System.UriKind.Absolute, /* ref */ commentUri)) {
														cookie.CommentUri = commentUri.value;
														__label1__ = "IL_2F6";
														continue __step1__;
													}
													__label1__ = "IL_2F6";
													continue __step1__;
												case 9: 
												case 10: 
												case 16: 
												case 17: 
												case 18: 
													__label1__ = "IL_2F6";
													continue __step1__;
												case 11: 
													if (!flag3) {
														flag3 = true;
														cookie.Domain = $asm06.System.Net.CookieParser.CheckQuoted(this.m_tokenizer.Value);
														cookie.IsQuotedDomain = this.m_tokenizer.Quoted;
														__label1__ = "IL_2F6";
														continue __step1__;
													}
													__label1__ = "IL_2F6";
													continue __step1__;
												case 12: 
													if (flag4) {
														__label1__ = "IL_2F6";
														continue __step1__;
													}
													flag4 = true;
													if ($asm06.System.Net.HttpDateParse.ParseCookieDate($asm06.System.Net.CookieParser.CheckQuoted(this.m_tokenizer.Value), /* ref */ expires)) {
														(cookie.Expires = expires.value.MemberwiseClone());
														__label1__ = "IL_2F6";
														continue __step1__;
													}
													cookie.InternalSetName(System.String.Empty);
													__label1__ = "IL_2F6";
													continue __step1__;
												case 13: 
													if (flag4) {
														__label1__ = "IL_2F6";
														continue __step1__;
													}
													flag4 = true;
													if (System.Int32.TryParse$0($asm06.System.Net.CookieParser.CheckQuoted(this.m_tokenizer.Value), /* ref */ num)) {
														(cookie.Expires = System.DateTime.Now.AddSeconds(num.value).MemberwiseClone());
														__label1__ = "IL_2F6";
														continue __step1__;
													}
													cookie.InternalSetName(System.String.Empty);
													__label1__ = "IL_2F6";
													continue __step1__;
												case 14: 
													if (!flag5) {
														flag5 = true;
														cookie.Path = this.m_tokenizer.Value;
														__label1__ = "IL_2F6";
														continue __step1__;
													}
													__label1__ = "IL_2F6";
													continue __step1__;
												case 15: 
													if (flag6) {
														__label1__ = "IL_2F6";
														continue __step1__;
													}
													flag6 = true;
													try {
														cookie.Port = this.m_tokenizer.Value;
														__label1__ = "IL_2F6";
														continue __step1__;
													} catch ($exception) {
														if (JSIL.CheckType($exception, System.Net.CookieException)) {
															cookie.InternalSetName(System.String.Empty);
															__label1__ = "IL_2F6";
															continue __step1__;
														} else {
															throw $exception;
														}
													}
													break;
												case 19: 
													break;
												default: 
													__label1__ = "IL_2F6";
													continue __step1__;
											}
											if (!flag7) {
												flag7 = true;
												if (System.Int32.TryParse$0($asm06.System.Net.CookieParser.CheckQuoted(this.m_tokenizer.Value), /* ref */ version)) {
													cookie.Version = version.value;
													cookie.IsQuotedVersion = this.m_tokenizer.Quoted;
												} else {
													cookie.InternalSetName(System.String.Empty);
												}
											}
											break;
										case 2: 
											var token = this.m_tokenizer.Token;
											if (token !== $asm06.System.Net.CookieToken.Discard) {
												switch (Number(token)) {
													case 15: 
														if (!flag6) {
															flag6 = true;
															cookie.Port = System.String.Empty;
														}
														break;
													case 16: 
														if (!flag8) {
															flag8 = true;
															cookie.Secure = true;
														}
														break;
													case 17: 
														cookie.HttpOnly = true;
														break;
												}
											} else if (!flag9) {
												flag9 = true;
												cookie.Discard = true;
											}
											break;
									}
								}
								__label1__ = "IL_2F6";
								continue __step1__;
								break;
							case "IL_2F6":
								if (!(!this.m_tokenizer.Eof && !this.m_tokenizer.EndOfCookie)) {
									break __loop0__;
								}
								break __step1__;
						}
					}
				}
				return cookie;
				break __step0__;
		}
	}
};
$asm06.System.Net.CookieParser.prototype.GetServer = function () {
	var __label0__ = null;
__step0__: 
	while (true) {
		switch (__label0__) {
			case null:
				var version = new JSIL.Variable(0);
				__label0__ = "__entry0__";
				continue __step0__;
				break;
			case "__entry0__":
				var cookie = this.m_savedCookie;
				this.m_savedCookie = null;
				var flag = false;
				var flag2 = false;
				var flag3 = false;
			__loop0__: 
				while (true) {
					var flag4 = ((cookie === null) || 
						(cookie.Name === null) || 
						(cookie.Name.length === 0));
					var cookieToken = this.m_tokenizer.Next(flag4, false);
					if (!(!flag4 || ((cookieToken !== $asm06.System.Net.CookieToken.NameValuePair) && 
								(cookieToken !== $asm06.System.Net.CookieToken.Attribute)))) {
						if (cookie === null) {
							cookie = JSIL.New(System.Net.Cookie, "_ctor$0", []);
						}
						if (!cookie.InternalSetName(this.m_tokenizer.Name)) {
							cookie.InternalSetName(System.String.Empty);
						}
						cookie.Value = this.m_tokenizer.Value;
					} else {
						switch (Number(cookieToken)) {
							case 1: 
								switch (Number(this.m_tokenizer.Token)) {
									case 11: 
										if (!flag) {
											flag = true;
											cookie.Domain = $asm06.System.Net.CookieParser.CheckQuoted(this.m_tokenizer.Value);
											cookie.IsQuotedDomain = this.m_tokenizer.Quoted;
										}
										break;
									case 14: 
										if (!flag2) {
											flag2 = true;
											cookie.Path = this.m_tokenizer.Value;
										}
										break;
									case 15: 
										if (!flag3) {
											flag3 = true;
											try {
												cookie.Port = this.m_tokenizer.Value;
												break;
											} catch ($exception) {
												if (JSIL.CheckType($exception, System.Net.CookieException)) {
													cookie.InternalSetName(System.String.Empty);
													break;
												} else {
													throw $exception;
												}
											}
											__label0__ = "IL_16A";
											continue __step0__;
										}
										break;
									case 18: 
										__label0__ = "IL_198";
										continue __step0__;
									case 19: 
										__label0__ = "IL_16A";
										continue __step0__;
								}
								break;
							case 2: 
								var token = this.m_tokenizer.Token;
								if (!((token !== $asm06.System.Net.CookieToken.Port) || flag3)) {
									flag3 = true;
									cookie.Port = System.String.Empty;
								}
								break;
						}
					}
					if (!(!this.m_tokenizer.Eof && !this.m_tokenizer.EndOfCookie)) {
						return cookie;
					}
				}
				__label0__ = "IL_16A";
				continue __step0__;
				break;
			case "IL_16A":
				this.m_savedCookie = JSIL.New(System.Net.Cookie, "_ctor$0", []);
				if (System.Int32.TryParse$0(this.m_tokenizer.Value, /* ref */ version)) {
					this.m_savedCookie.Version = version.value;
					return cookie;
				}
				return cookie;
				__label0__ = "IL_198";
				continue __step0__;
				break;
			case "IL_198":
				this.m_savedCookie = JSIL.New(System.Net.Cookie, "_ctor$0", []);
				if (!this.m_savedCookie.InternalSetName(this.m_tokenizer.Name)) {
					this.m_savedCookie.InternalSetName(System.String.Empty);
				}
				this.m_savedCookie.Value = this.m_tokenizer.Value;
				return cookie;
				break __step0__;
		}
	}
};
$asm06.System.Net.CookieParser.CheckQuoted = function (value) {
	if (!((value.length >= 2) && 
			((value[0]) === '"') && ((value[(value.length - 1)]) === '"'))) {
		return value;
	}
	if (value.length !== 2) {
		return value.Substring$1(1, (value.length - 2));
	}
	return System.String.Empty;
};
$asm06.System.Net.CookieParser.prototype.m_tokenizer = null;
$asm06.System.Net.CookieParser.prototype.m_savedCookie = null;

$asm06.System.Net.Comparer.prototype.IComparer_Compare = function (ol, or) {
	var result = 0;
	var cookie = JSIL.Cast(ol, System.Net.Cookie);
	var cookie2 = JSIL.Cast(or, System.Net.Cookie);
	if (result = (System.String.Compare$1(cookie.Name, cookie2.Name, System.StringComparison.OrdinalIgnoreCase) !== 0)) {
		return result;
	}
	if (result = (System.String.Compare$1(cookie.Domain, cookie2.Domain, System.StringComparison.OrdinalIgnoreCase) !== 0)) {
		return result;
	}
	if (result = (System.String.Compare$1(cookie.Path, cookie2.Path, System.StringComparison.Ordinal) !== 0)) {
		return result;
	}
	return 0;
};
$asm06.System.Net.Comparer.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};

System.Net.CookieException.prototype._ctor$0 = function () {
	System.FormatException.prototype._ctor$0.call(this);
};
System.Net.CookieException.prototype._ctor$1 = function (message) {
	System.FormatException.prototype._ctor$1.call(this, message);
};
System.Net.CookieException.prototype._ctor$2 = function (message, inner) {
	System.FormatException.prototype._ctor$2.call(this, message, inner);
};
JSIL.OverloadedMethod(System.Net.CookieException.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.String]], 
		["_ctor$2", [System.String, System.Exception]]
	]);

System.Net.CookieCollection.prototype._ctor$0 = function () {
	this.m_list = new (System.Collections.Generic.List$b1.Of(System.Net.Cookie)) ();
	this.m_TimeStamp = System.DateTime.MinValue.MemberwiseClone();
	System.Object.prototype._ctor.call(this);
	this.m_IsReadOnly = true;
};
System.Net.CookieCollection.prototype._ctor$1 = function (IsReadOnly) {
	this.m_list = new (System.Collections.Generic.List$b1.Of(System.Net.Cookie)) ();
	this.m_TimeStamp = System.DateTime.MinValue.MemberwiseClone();
	System.Object.prototype._ctor.call(this);
	this.m_IsReadOnly = IsReadOnly;
};
System.Net.CookieCollection.prototype.get_IsReadOnly = function () {
	return this.m_IsReadOnly;
};
System.Net.CookieCollection.prototype.get_Item$0 = function (index) {
	if (!((index >= 0) && (index < this.m_list.Count))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["index"]);
	}
	return this.m_list.get_Item(index);
};
System.Net.CookieCollection.prototype.get_Item$1 = function (name) {
	var enumerator = (this.m_list.GetEnumerator());
	try {
	__loop0__: 
		while (enumerator.MoveNext()) {
			var current = enumerator.Current;
			if (System.String.Compare$1(current.Name, name, System.StringComparison.OrdinalIgnoreCase) === 0) {
				return current;
			}
		}
	} finally {
		enumerator.IDisposable_Dispose();
	}
	return null;
};
System.Net.CookieCollection.prototype.Add$0 = function (cookie) {
	if (cookie === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["cookie"]);
	}
	++this.m_version;
	var num = this.IndexOf(cookie);
	if (num === -1) {
		this.m_list.Add(cookie);
		return;
	}
	this.m_list.set_Item(num, cookie);
};
System.Net.CookieCollection.prototype.Add$1 = function (cookies) {
	if (cookies === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["cookies"]);
	}
	var enumerator = cookies.GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var cookie = JSIL.Cast(enumerator.IEnumerator_Current, System.Net.Cookie);
			this.Add$0(cookie);
		}
	} finally {
		var disposable = JSIL.TryCast(enumerator, System.IDisposable);
		if (disposable !== null) {
			disposable.IDisposable_Dispose();
		}
	}
};
System.Net.CookieCollection.prototype.get_Count = function () {
	return this.m_list.Count;
};
System.Net.CookieCollection.prototype.get_IsSynchronized = function () {
	return false;
};
System.Net.CookieCollection.prototype.get_SyncRoot = function () {
	return this;
};
System.Net.CookieCollection.prototype.CopyTo = function (array, index) {
	if ((array.length - index) < this.m_list.Count) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", ["array"]);
	}
	var array2 = JSIL.Array.New(System.Net.Cookie, this.m_list.Count);
	this.m_list.CopyTo$1(0, array2, index, this.m_list.Count);
__loop0__: 
	for (var i = 0; i < this.m_list.Count; ++i) {
		array.SetValue(array2[i], (i + index));
	}
};
System.Net.CookieCollection.prototype.TimeStamp = function (how) {
	switch (Number(how)) {
		case 1: 
			this.m_TimeStamp = System.DateTime.Now.MemberwiseClone();
			break;
		case 2: 
			this.m_TimeStamp = System.DateTime.MinValue.MemberwiseClone();
			break;
		case 3: 
			this.m_TimeStamp = System.DateTime.MaxValue.MemberwiseClone();
			break;
	}
	return this.m_TimeStamp;
};
System.Net.CookieCollection.prototype.get_IsOtherVersionSeen = function () {
	return this.m_has_other_versions;
};
System.Net.CookieCollection.prototype.InternalAdd = function (cookie, isStrict) {
	var result = 1;
	if (isStrict) {
		var comparer = System.Net.Cookie.GetComparer();
		var num = 0;
		var enumerator = (this.m_list.GetEnumerator());
		try {
		__loop0__: 
			while (enumerator.MoveNext()) {
				var current = enumerator.Current;
				if (comparer.IComparer_Compare(cookie, current) === 0) {
					result = 0;
					if (current.Variant <= cookie.Variant) {
						this.m_list.set_Item(num, cookie);
						break __loop0__;
					}
					break __loop0__;
				} else {
					++num;
				}
			}
		} finally {
			enumerator.IDisposable_Dispose();
		}
		if (num === this.m_list.Count) {
			this.m_list.Add(cookie);
		}
	} else {
		this.m_list.Add(cookie);
	}
	if (cookie.Version !== 1) {
		this.m_has_other_versions = true;
	}
	return result;
};
System.Net.CookieCollection.prototype.IndexOf = function (cookie) {
	var comparer = System.Net.Cookie.GetComparer();
	var num = 0;
	var enumerator = (this.m_list.GetEnumerator());
	try {
	__loop0__: 
		while (enumerator.MoveNext()) {
			var current = enumerator.Current;
			if (comparer.IComparer_Compare(cookie, current) === 0) {
				return num;
			}
			++num;
		}
	} finally {
		enumerator.IDisposable_Dispose();
	}
	return -1;
};
System.Net.CookieCollection.prototype.RemoveAt = function (idx) {
	this.m_list.RemoveAt(idx);
};
System.Net.CookieCollection.prototype.GetEnumerator = function () {
	return new $asm06.System.Net.CookieCollection.CookieCollectionEnumerator(this);
};
JSIL.OverloadedMethod(System.Net.CookieCollection.prototype, "get_Item", [
		["get_Item$0", [System.Int32]], 
		["get_Item$1", [System.String]]
	]);
JSIL.OverloadedMethod(System.Net.CookieCollection.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Boolean]]
	]);
JSIL.OverloadedMethod(System.Net.CookieCollection.prototype, "Add", [
		["Add$0", [System.Net.Cookie]], 
		["Add$1", [System.Net.CookieCollection]]
	]);
JSIL.MakeProperty(System.Net.CookieCollection.prototype, "IsReadOnly", 
	System.Net.CookieCollection.prototype.get_IsReadOnly, null);
JSIL.MakeProperty(System.Net.CookieCollection.prototype, "Item", 
	System.Net.CookieCollection.prototype.get_Item$0, null);
JSIL.MakeProperty(System.Net.CookieCollection.prototype, "Item", 
	System.Net.CookieCollection.prototype.get_Item$1, null);
JSIL.MakeProperty(System.Net.CookieCollection.prototype, "Count", 
	System.Net.CookieCollection.prototype.get_Count, null);
JSIL.MakeProperty(System.Net.CookieCollection.prototype, "IsSynchronized", 
	System.Net.CookieCollection.prototype.get_IsSynchronized, null);
JSIL.MakeProperty(System.Net.CookieCollection.prototype, "SyncRoot", 
	System.Net.CookieCollection.prototype.get_SyncRoot, null);
JSIL.MakeProperty(System.Net.CookieCollection.prototype, "IsOtherVersionSeen", 
	System.Net.CookieCollection.prototype.get_IsOtherVersionSeen, null);
System.Net.CookieCollection.prototype.m_version = 0;
System.Net.CookieCollection.prototype.m_list = null;
System.Net.CookieCollection.prototype.m_has_other_versions = false;
System.Net.CookieCollection.prototype.m_IsReadOnly = false;

$asm06.System.Net.CookieCollection.CookieCollectionEnumerator.prototype._ctor = function (cookies) {
	this.m_index = -1;
	System.Object.prototype._ctor.call(this);
	this.m_cookies = cookies;
	this.m_count = cookies.Count;
	this.m_version = cookies.m_version;
};
$asm06.System.Net.CookieCollection.CookieCollectionEnumerator.prototype.IEnumerator_get_Current = function () {
	if (!((this.m_index >= 0) && (this.m_index < this.m_count))) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm06.System.SR.GetString$2("InvalidOperation_EnumOpCantHappen")]);
	}
	if (this.m_version !== this.m_cookies.m_version) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm06.System.SR.GetString$2("InvalidOperation_EnumFailedVersion")]);
	}
	return this.m_cookies.get_Item$0(this.m_index);
};
$asm06.System.Net.CookieCollection.CookieCollectionEnumerator.prototype.IEnumerator_MoveNext = function () {
	if (this.m_version !== this.m_cookies.m_version) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm06.System.SR.GetString$2("InvalidOperation_EnumFailedVersion")]);
	}
	if (++this.m_index < this.m_count) {
		return true;
	}
	this.m_index = this.m_count;
	return false;
};
$asm06.System.Net.CookieCollection.CookieCollectionEnumerator.prototype.IEnumerator_Reset = function () {
	this.m_index = -1;
};
JSIL.MakeProperty($asm06.System.Net.CookieCollection.CookieCollectionEnumerator.prototype, "IEnumerator_Current", 
	$asm06.System.Net.CookieCollection.CookieCollectionEnumerator.prototype.IEnumerator_get_Current, null);
$asm06.System.Net.CookieCollection.CookieCollectionEnumerator.prototype.m_cookies = null;
$asm06.System.Net.CookieCollection.CookieCollectionEnumerator.prototype.m_count = 0;
$asm06.System.Net.CookieCollection.CookieCollectionEnumerator.prototype.m_index = 0;
$asm06.System.Net.CookieCollection.CookieCollectionEnumerator.prototype.m_version = 0;

$asm06.System.Net.HeaderVariantInfo.prototype._ctor = function (name, variant) {
	this.m_name = name;
	this.m_variant = variant;
};
$asm06.System.Net.HeaderVariantInfo.prototype.get_Name = function () {
	return this.m_name;
};
$asm06.System.Net.HeaderVariantInfo.prototype.get_Variant = function () {
	return this.m_variant;
};
JSIL.MakeProperty($asm06.System.Net.HeaderVariantInfo.prototype, "Name", 
	$asm06.System.Net.HeaderVariantInfo.prototype.get_Name, null);
JSIL.MakeProperty($asm06.System.Net.HeaderVariantInfo.prototype, "Variant", 
	$asm06.System.Net.HeaderVariantInfo.prototype.get_Variant, null);
$asm06.System.Net.HeaderVariantInfo.prototype.m_name = null;
$asm06.System.Net.HeaderVariantInfo.prototype.m_variant = 0;

System.Net.CookieContainer.prototype._ctor = function () {
	this.m_domainTable = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.String, $asm06.System.Net.PathList), "_ctor$0", []);
	this.m_maxCookieSize = 4096;
	this.m_maxCookies = 300;
	this.m_maxCookiesPerDomain = 20;
	this.m_fqdnMyDomain = System.String.Empty;
	System.Object.prototype._ctor.call(this);
	this.m_fqdnMyDomain = System.String.Empty;
};
System.Net.CookieContainer.prototype.get_Capacity = function () {
	return this.m_maxCookies;
};
System.Net.CookieContainer.prototype.get_Count = function () {
	return this.m_count;
};
System.Net.CookieContainer.prototype.get_MaxCookieSize = function () {
	return this.m_maxCookieSize;
};
System.Net.CookieContainer.prototype.get_PerDomainCapacity = function () {
	return this.m_maxCookiesPerDomain;
};
System.Net.CookieContainer.prototype.AddRemoveDomain = function (key, value) {
	System.Threading.Monitor.Enter(this);
	try {
		if (value === null) {
			this.m_domainTable.Remove(key);
		} else {
			this.m_domainTable.set_Item(key, value);
		}
	} finally {
		System.Threading.Monitor.Exit(this);
	}
};
System.Net.CookieContainer.prototype.Add$0 = function (cookie, throwOnError) {
	var __label0__ = null;
__step0__: 
	while (true) {
		switch (__label0__) {
			case null:
				var obj = null, obj2 = null;
				__label0__ = "__entry0__";
				continue __step0__;
				break;
			case "__entry0__":
				if (cookie.Value.length <= this.m_maxCookieSize) {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								try {
									var __label2__ = "__entry2__";
								__step2__: 
									while (true) {
										switch (__label2__) {
											case "__entry2__":
												if (this.m_domainTable.ContainsKey(cookie.DomainKey)) {
													var pathList = this.m_domainTable.get_Item(cookie.DomainKey);
												} else {
													pathList = null;
												}
												if (pathList === null) {
													pathList = new $asm06.System.Net.PathList();
													this.AddRemoveDomain(cookie.DomainKey, pathList);
												}
												var cookiesCount = pathList.GetCookiesCount();
												var cookieCollection = JSIL.Cast(pathList.get_Item(cookie.Path), System.Net.CookieCollection);
												if (cookieCollection === null) {
													cookieCollection = JSIL.New(System.Net.CookieCollection, "_ctor$0", []);
													pathList.set_Item(cookie.Path, cookieCollection);
												}
												if (cookie.Expired) {
													System.Threading.Monitor.Enter((obj = cookieCollection));
													try {
														var num = cookieCollection.IndexOf(cookie);
														if (num !== -1) {
															cookieCollection.RemoveAt(num);
															--this.m_count;
														}
														__label2__ = "IL_14E";
														continue __step2__;
													} finally {
														System.Threading.Monitor.Exit(obj);
													}
												}
												if ((cookiesCount < this.m_maxCookiesPerDomain) || this.AgeCookies(cookie.DomainKey)) {
													if ((this.m_count < this.m_maxCookies) || this.AgeCookies(null)) {
														System.Threading.Monitor.Enter((obj2 = cookieCollection));
														try {
															this.m_count += cookieCollection.InternalAdd(cookie, true);
														} finally {
															System.Threading.Monitor.Exit(obj2);
														}
													}
												}
												__label2__ = "IL_14E";
												continue __step2__;
												break;
											case "IL_14E":
												break __step2__;
										}
									}
								} catch ($exception) {
									var exception = $exception;
									if (!((JSIL.TryCast(exception, System.Threading.ThreadAbortException) === null) && 
											(JSIL.TryCast(exception, System.StackOverflowException) === null) && (JSIL.TryCast(exception, System.OutOfMemoryException) === null))) {
										throw $exception;
									}
									if (throwOnError) {
										throw JSIL.New(System.Net.CookieException, "_ctor$2", [$asm06.System.SR.GetString$2("net_container_add_cookie"), exception]);
									}
								}
								return;
								break __step1__;
						}
					}
				}
				if (throwOnError) {
					throw JSIL.New(System.Net.CookieException, "_ctor$1", [$asm06.System.SR.GetString$0("net_cookie_size", [cookie.toString(), this.m_maxCookieSize])]);
				}
				break __step0__;
		}
	}
};
System.Net.CookieContainer.prototype.AgeCookies = function (domain) {
	var dateTime2 = new System.DateTime(), obj = null, obj2 = null;
	if (!((this.m_maxCookies !== 0) && this.m_maxCookiesPerDomain)) {
		this.m_domainTable = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.String, $asm06.System.Net.PathList), "_ctor$0", []);
		this.m_count = 0;
		return false;
	}
	var num = 0;
	var dateTime = System.DateTime.MaxValue.MemberwiseClone();
	var cookieCollection = null;
	var num2 = 0;
	var num3 = 0;
	var num4 = 1;
	if (this.m_count > this.m_maxCookies) {
		num4 = Math.floor(this.m_maxCookies / this.m_count);
	}
	var enumerator = this.m_domainTable.GetEnumerator().MemberwiseClone();
	try {
	__loop0__: 
		while (enumerator.MoveNext()) {
			var current = JSIL.Cast(enumerator.Current.MemberwiseClone(), System.Collections.Generic.KeyValuePair$b2.Of(System.String, $asm06.System.Net.PathList)).MemberwiseClone();
			if (domain === null) {
				var key = current.Key;
				var pathList = current.Value;
			} else if (this.m_domainTable.ContainsKey(domain)) {
				pathList = this.m_domainTable.get_Item(domain);
			} else {
				pathList = null;
			}
			num2 = 0;
			var enumerator2 = pathList.Values.IEnumerable_GetEnumerator();
			try {
			__loop1__: 
				while (enumerator2.IEnumerator_MoveNext()) {
					var cookieCollection2 = JSIL.Cast(enumerator2.IEnumerator_Current, System.Net.CookieCollection);
					num3 = this.ExpireCollection(cookieCollection2);
					num += num3;
					this.m_count -= num3;
					num2 += cookieCollection2.Count;
					if (!((cookieCollection2.Count <= 0) || !System.DateTime.op_LessThan((dateTime2 = cookieCollection2.TimeStamp(System.Net.CookieCollection.Stamp.Check).MemberwiseClone()).MemberwiseClone(), dateTime.MemberwiseClone()))) {
						cookieCollection = cookieCollection2;
						dateTime = dateTime2.MemberwiseClone();
					}
				}
			} finally {
				var disposable = JSIL.TryCast(enumerator2, System.IDisposable);
				if (disposable !== null) {
					disposable.IDisposable_Dispose();
				}
			}
			var num5 = System.Math.Min((num2 * num4), (System.Math.Min(this.m_maxCookiesPerDomain, this.m_maxCookies) - 1));
			if (num2 > num5) {
				var array = JSIL.Array.New(System.Net.CookieCollection, pathList.Count);
				var array2 = JSIL.Array.New(System.DateTime, pathList.Count);
				var enumerator3 = pathList.Values.IEnumerable_GetEnumerator();
				try {
				__loop2__: 
					while (enumerator3.IEnumerator_MoveNext()) {
						var cookieCollection3 = JSIL.Cast(enumerator3.IEnumerator_Current, System.Net.CookieCollection);
						array2.SetValue(cookieCollection3.TimeStamp(System.Net.CookieCollection.Stamp.Check), num3);
						array.SetValue(cookieCollection3, num3);
						++num3;
					}
				} finally {
					var disposable2 = JSIL.TryCast(enumerator3, System.IDisposable);
					if (disposable2 !== null) {
						disposable2.IDisposable_Dispose();
					}
				}
				System.Array.Sort$b2$0(System.DateTime, System.Net.CookieCollection)(array2, array);
				num3 = 0;
			__loop3__: 
				for (var i = 0; i < pathList.Count; ++i) {
					var cookieCollection4 = JSIL.Cast(array.GetValue(i), System.Net.CookieCollection);
					System.Threading.Monitor.Enter((obj = cookieCollection4));
					try {
					__loop4__: 
						while ((num2 > num5) && (cookieCollection4.Count > 0)) {
							cookieCollection4.RemoveAt(0);
							--num2;
							--this.m_count;
							++num;
						}
					} finally {
						System.Threading.Monitor.Exit(obj);
					}
					if (num2 <= num5) {
						break __loop3__;
					}
				}
				if (!((num2 <= num5) || (domain === null))) {
					var result = false;
					return result;
				}
			}
			if (domain !== null) {
				result = true;
				return result;
			}
		}
	} finally {
		enumerator.IDisposable_Dispose();
	}
	if (num !== 0) {
		return true;
	}
	if (System.DateTime.op_Equality(dateTime.MemberwiseClone(), System.DateTime.MaxValue.MemberwiseClone())) {
		return false;
	}
	System.Threading.Monitor.Enter((obj2 = cookieCollection));
	try {
	__loop5__: 
		while ((this.m_count >= this.m_maxCookies) && (cookieCollection.Count > 0)) {
			cookieCollection.RemoveAt(0);
			--this.m_count;
		}
	} finally {
		System.Threading.Monitor.Exit(obj2);
	}
	return true;
};
System.Net.CookieContainer.prototype.ExpireCollection = function (cc) {
	var count = cc.Count;
	var i = (count - 1);
	var now = System.DateTime.Now.MemberwiseClone();
	System.Threading.Monitor.Enter(cc);
	try {
	__loop0__: 
		for (; i >= 0; --i) {
			var cookie = cc.get_Item$0(i);
			if (!(!System.DateTime.op_LessThanOrEqual(cookie.Expires.MemberwiseClone(), now.MemberwiseClone()) || !System.DateTime.op_Inequality(cookie.Expires.MemberwiseClone(), System.DateTime.MinValue.MemberwiseClone()))) {
				cc.RemoveAt(i);
			}
		}
	} finally {
		System.Threading.Monitor.Exit(cc);
	}
	return (count - cc.Count);
};
System.Net.CookieContainer.prototype.IsLocal = function (host) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				var num = host.IndexOf$0(".");
				if (num === -1) {
					return true;
				}
				if (host == "127.0.0.1") {
					return true;
				}
				if (System.String.Compare$5(
						this.m_fqdnMyDomain, 
						0, 
						host, 
						num, 
						this.m_fqdnMyDomain.length, 
						System.StringComparison.OrdinalIgnoreCase
					) === 0) {
					return true;
				}
				var array = host.Split(JSIL.Array.New(System.Char, ["."]));
				if (!((array === null) || 
						(array.length !== 4) || !(array[0] == "127"))) {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
							__loop0__: 
								for (var i = 1; i < 4; ) {
									var __label2__ = "__entry2__";
								__step2__: 
									while (true) {
										switch (__label2__) {
											case "__entry2__":
												switch (array[i].length) {
													case 1: 
														break;
													case 2: 
														__label2__ = "IL_B0";
														continue __step2__;
													case 3: 
														if (!(((array[i][2]) < "0") || ((array[i][2]) > "9"))) {
															__label2__ = "IL_B0";
															continue __step2__;
														}
														__label1__ = "IL_EC";
														continue __step1__;
													default: 
														__label1__ = "IL_EC";
														continue __step1__;
												}
												__label2__ = "IL_CA";
												continue __step2__;
												break;
											case "IL_CA":
												if (!(((array[i][0]) < "0") || ((array[i][0]) > "9"))) {
													++i;
													continue __loop0__;
												}
												break __loop0__;
												__label2__ = "IL_B0";
												continue __step2__;
												break;
											case "IL_B0":
												if (!(((array[i][1]) < "0") || ((array[i][1]) > "9"))) {
													__label2__ = "IL_CA";
													continue __step2__;
												}
												break __loop0__;
												break __step2__;
										}
									}
								}
								__label1__ = "IL_EC";
								continue __step1__;
								break;
							case "IL_EC":
								if (i === 4) {
									return true;
								}
								break __step1__;
						}
					}
				}
				return false;
				break __step0__;
		}
	}
};
System.Net.CookieContainer.prototype.Add$1 = function (uri, cookie) {
	if (System.Uri.op_Equality(uri, null)) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["uri"]);
	}
	if (cookie === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["cookie"]);
	}
	cookie.VerifySetDefaults(
		System.Net.CookieVariant.Unknown, 
		uri, 
		this.IsLocal(uri.Host), 
		this.m_fqdnMyDomain, 
		true, 
		true
	);
	this.Add$0(cookie, true);
};
System.Net.CookieContainer.prototype.Add$2 = function (uri, cookies) {
	if (System.Uri.op_Equality(uri, null)) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["uri"]);
	}
	if (cookies === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["cookies"]);
	}
	var isLocalDomain = this.IsLocal(uri.Host);
	var enumerator = cookies.GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var cookie = JSIL.Cast(enumerator.IEnumerator_Current, System.Net.Cookie);
			cookie.VerifySetDefaults(
				System.Net.CookieVariant.Unknown, 
				uri, 
				isLocalDomain, 
				this.m_fqdnMyDomain, 
				true, 
				true
			);
			this.Add$0(cookie, true);
		}
	} finally {
		var disposable = JSIL.TryCast(enumerator, System.IDisposable);
		if (disposable !== null) {
			disposable.IDisposable_Dispose();
		}
	}
};
System.Net.CookieContainer.prototype.CookieCutter = function (uri, headerName, setCookieHeader, isThrow) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				var cookieCollection = JSIL.New(System.Net.CookieCollection, "_ctor$0", []);
				var variant = System.Net.CookieVariant.Unknown;
				if (headerName === null) {
					variant = System.Net.CookieVariant.Default;
				} else {
				__loop0__: 
					for (var i = 0; i < System.Net.CookieContainer.HeaderInfo.length; ++i) {
						if (System.String.Compare$1(headerName, System.Net.CookieContainer.HeaderInfo[i].Name, System.StringComparison.OrdinalIgnoreCase) === 0) {
							variant = System.Net.CookieContainer.HeaderInfo[i].Variant;
						}
					}
				}
				var isLocalDomain = this.IsLocal(uri.Host);
				try {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								var cookieParser = new $asm06.System.Net.CookieParser(setCookieHeader);
							__loop1__: 
								while (true) {
									var cookie = cookieParser.Get();
									if (cookie === null) {
										__label1__ = "IL_B0";
										continue __step1__;
									}
									if ($asm06.System.Net.ValidationHelper.IsBlankString(cookie.Name)) {
										if (isThrow) {
											break __loop1__;
										}
									} else if (cookie.VerifySetDefaults(
											variant, 
											uri, 
											isLocalDomain, 
											this.m_fqdnMyDomain, 
											true, 
											isThrow
										)) {
										cookieCollection.InternalAdd(cookie, true);
									}
								}
								throw JSIL.New(System.Net.CookieException, "_ctor$1", [$asm06.System.SR.GetString$2("net_cookie_format")]);
								__label1__ = "IL_B0";
								continue __step1__;
								break;
							case "IL_B0":
								break __step1__;
						}
					}
				} catch ($exception) {
					var exception = $exception;
					if (!((JSIL.TryCast(exception, System.Threading.ThreadAbortException) === null) && 
							(JSIL.TryCast(exception, System.StackOverflowException) === null) && (JSIL.TryCast(exception, System.OutOfMemoryException) === null))) {
						throw $exception;
					}
					if (isThrow) {
						throw JSIL.New(System.Net.CookieException, "_ctor$2", [$asm06.System.SR.GetString$0("net_cookie_parse_header", [uri.AbsoluteUri]), exception]);
					}
				}
				var enumerator = cookieCollection.GetEnumerator();
				try {
				__loop2__: 
					while (enumerator.IEnumerator_MoveNext()) {
						var cookie2 = JSIL.Cast(enumerator.IEnumerator_Current, System.Net.Cookie);
						this.Add$0(cookie2, isThrow);
					}
				} finally {
					var disposable = JSIL.TryCast(enumerator, System.IDisposable);
					if (disposable !== null) {
						disposable.IDisposable_Dispose();
					}
				}
				return cookieCollection;
				break __step0__;
		}
	}
};
System.Net.CookieContainer.prototype.GetCookies = function (uri) {
	if (System.Uri.op_Equality(uri, null)) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["uri"]);
	}
	return this.InternalGetCookies(uri);
};
System.Net.CookieContainer.prototype.InternalGetCookies = function (uri) {
	var isSecure = (uri.Scheme == System.Uri.UriSchemeHttps);
	var port = uri.Port;
	var cookieCollection = JSIL.New(System.Net.CookieCollection, "_ctor$0", []);
	var list = new (System.Collections.Generic.List$b1.Of(System.String)) ();
	var num = 0;
	var host = uri.Host;
	var num2 = host.IndexOf$0(".");
	if (num2 === -1) {
		list.Add(host);
		if (!((this.m_fqdnMyDomain === null) || (this.m_fqdnMyDomain.length === 0))) {
			list.Add((host + this.m_fqdnMyDomain));
			list.Add(this.m_fqdnMyDomain);
			num = 3;
		} else {
			num = 1;
		}
	} else {
		list.Add(host);
		list.Add(host.Substring$0(num2));
		num = 2;
		if (host.length > 2) {
			var num3 = host.LastIndexOf$1(".", (host.length - 2));
			if (num3 > 0) {
				num3 = host.LastIndexOf$1(".", (num3 - 1));
			}
			if (num3 !== -1) {
			__loop0__: 
				while ((num2 < num3) && ((num2 = host.IndexOf$1(".", (num2 + 1))) !== -1)) {
					list.Add(host.Substring$0(num2));
				}
			}
		}
	}
	var enumerator = (list.GetEnumerator());
	try {
	__loop1__: 
		while (enumerator.MoveNext()) {
			var current = enumerator.Current;
			var flag = false;
			var flag2 = false;
			var pathList = null;
			if (this.m_domainTable.ContainsKey(current)) {
				pathList = this.m_domainTable.get_Item(current);
			}
			--num;
			if (pathList !== null) {
				var enumerator2 = pathList.GetEnumerator();
				try {
				__loop2__: 
					while (enumerator2.IEnumerator_MoveNext()) {
						var keyValuePair = JSIL.Cast(enumerator2.IEnumerator_Current, System.Collections.Generic.KeyValuePair$b2.Of(System.String, System.Net.CookieCollection)).MemberwiseClone();
						var key = keyValuePair.Key;
						if (uri.AbsolutePath.StartsWith$0($asm06.System.Net.CookieParser.CheckQuoted(key))) {
							flag = true;
							var value = keyValuePair.Value;
							value.TimeStamp(System.Net.CookieCollection.Stamp.Set);
							this.MergeUpdateCollections(
								cookieCollection, 
								value, 
								port, 
								isSecure, 
								(num < 0)
							);
							if (key == "/") {
								flag2 = true;
							}
						} else if (flag) {
							break __loop2__;
						}
					}
				} finally {
					var disposable = JSIL.TryCast(enumerator2, System.IDisposable);
					if (disposable !== null) {
						disposable.IDisposable_Dispose();
					}
				}
				if (!flag2) {
					var cookieCollection2 = JSIL.Cast(pathList.get_Item("/"), System.Net.CookieCollection);
					if (cookieCollection2 !== null) {
						cookieCollection2.TimeStamp(System.Net.CookieCollection.Stamp.Set);
						this.MergeUpdateCollections(
							cookieCollection, 
							cookieCollection2, 
							port, 
							isSecure, 
							(num < 0)
						);
					}
				}
				if (pathList.Count === 0) {
					this.AddRemoveDomain(current, null);
				}
			}
		}
	} finally {
		enumerator.IDisposable_Dispose();
	}
	return cookieCollection;
};
System.Net.CookieContainer.prototype.MergeUpdateCollections = function (destination, source, port, isSecure, isPlainOnly) {
	System.Threading.Monitor.Enter(source);
	try {
	__loop0__: 
		for (var i = 0; i < source.Count; ++i) {
			var flag = false;
			var cookie = source.get_Item$0(i);
			if (cookie.Expired) {
				source.RemoveAt(i);
				--this.m_count;
				--i;
			} else {
				if (!(isPlainOnly && (cookie.Variant !== System.Net.CookieVariant.Plain))) {
					if (cookie.PortList !== null) {
						var portList = cookie.PortList;
					__loop1__: 
						for (var j = 0; j < portList.length; ++j) {
							var num = portList[j];
							if (num === port) {
								flag = true;
								break __loop1__;
							}
						}
					} else {
						flag = true;
					}
				}
				if (!(!cookie.Secure || isSecure)) {
					flag = false;
				}
				if (flag) {
					destination.InternalAdd(cookie, false);
				}
			}
		}
	} finally {
		System.Threading.Monitor.Exit(source);
	}
};
System.Net.CookieContainer.prototype.GetCookieHeader$0 = function (uri) {
	var text = new JSIL.Variable(null);
	if (System.Uri.op_Equality(uri, null)) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["uri"]);
	}
	return this.GetCookieHeader$1(uri, /* ref */ text);
};
System.Net.CookieContainer.prototype.GetCookieHeader$1 = function (uri, /* ref */ optCookie2) {
	var cookieCollection = this.InternalGetCookies(uri);
	var text = System.String.Empty;
	var str = System.String.Empty;
	var enumerator = cookieCollection.GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var cookie = JSIL.Cast(enumerator.IEnumerator_Current, System.Net.Cookie);
			text = ((text + str + cookie.toString()));
			str = "; ";
		}
	} finally {
		var disposable = JSIL.TryCast(enumerator, System.IDisposable);
		if (disposable !== null) {
			disposable.IDisposable_Dispose();
		}
	}
	optCookie2.value = cookieCollection.IsOtherVersionSeen ? ("$Version=" + (1).toString()) : System.String.Empty;
	return text;
};
System.Net.CookieContainer.prototype.SetCookies = function (uri, cookieHeader) {
	if (System.Uri.op_Equality(uri, null)) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["uri"]);
	}
	if (cookieHeader === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["cookieHeader"]);
	}
	this.CookieCutter(uri, null, cookieHeader, true);
};
JSIL.OverloadedMethod(System.Net.CookieContainer.prototype, "Add", [
		["Add$0", [System.Net.Cookie, System.Boolean]], 
		["Add$1", [System.Uri, System.Net.Cookie]], 
		["Add$2", [System.Uri, System.Net.CookieCollection]]
	]);
JSIL.OverloadedMethod(System.Net.CookieContainer.prototype, "GetCookieHeader", [
		["GetCookieHeader$0", [System.Uri]], 
		["GetCookieHeader$1", [System.Uri, JSIL.Reference.Of(System.String)]]
	]);
JSIL.MakeProperty(System.Net.CookieContainer.prototype, "Capacity", 
	System.Net.CookieContainer.prototype.get_Capacity, null);
JSIL.MakeProperty(System.Net.CookieContainer.prototype, "Count", 
	System.Net.CookieContainer.prototype.get_Count, null);
JSIL.MakeProperty(System.Net.CookieContainer.prototype, "MaxCookieSize", 
	System.Net.CookieContainer.prototype.get_MaxCookieSize, null);
JSIL.MakeProperty(System.Net.CookieContainer.prototype, "PerDomainCapacity", 
	System.Net.CookieContainer.prototype.get_PerDomainCapacity, null);
Object.defineProperty(System.Net.CookieContainer, "DefaultCookieLimit", {
		"value": 300}
);
Object.defineProperty(System.Net.CookieContainer, "DefaultPerDomainCookieLimit", {
		"value": 20}
);
Object.defineProperty(System.Net.CookieContainer, "DefaultCookieLengthLimit", {
		"value": 4096}
);
System.Net.CookieContainer.HeaderInfo = null;
System.Net.CookieContainer.prototype.m_domainTable = null;
System.Net.CookieContainer.prototype.m_maxCookieSize = 0;
System.Net.CookieContainer.prototype.m_maxCookies = 0;
System.Net.CookieContainer.prototype.m_maxCookiesPerDomain = 0;
System.Net.CookieContainer.prototype.m_count = 0;
System.Net.CookieContainer.prototype.m_fqdnMyDomain = null;
System.Net.CookieContainer._cctor = function () {
	System.Net.CookieContainer.HeaderInfo = JSIL.Array.New(System.Net.HeaderVariantInfo, [new System.Net.HeaderVariantInfo("Set-Cookie", System.Net.CookieVariant.Default), new System.Net.HeaderVariantInfo("Set-Cookie2", System.Net.CookieVariant.Rfc2965)]);
};

$asm06.System.Net.PathList.prototype._ctor = function () {
	this.m_list = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.String, System.Net.CookieCollection), "_ctor$0", []);
	System.Object.prototype._ctor.call(this);
};
$asm06.System.Net.PathList.prototype.get_Count = function () {
	return this.m_list.Count;
};
$asm06.System.Net.PathList.prototype.GetCookiesCount = function () {
	var num = 0;
	var enumerator = JSIL.Cast(this.m_list.Values, System.Collections.Generic.Dictionary$b2.ValueCollection.Of(System.String, System.Net.CookieCollection)).GetEnumerator().MemberwiseClone();
	try {
	__loop0__: 
		while (enumerator.MoveNext()) {
			var current = enumerator.Current;
			num += current.Count;
		}
	} finally {
		enumerator.IDisposable_Dispose();
	}
	return num;
};
$asm06.System.Net.PathList.prototype.get_Values = function () {
	return this.m_list.Values;
};
$asm06.System.Net.PathList.prototype.get_Item = function (s) {
	if (this.m_list.ContainsKey(s)) {
		return this.m_list.get_Item(s);
	}
	return null;
};
$asm06.System.Net.PathList.prototype.set_Item = function (s, value) {
	if (!((value !== null) && (JSIL.TryCast(value, System.Net.CookieCollection) === null))) {
		this.m_list.set_Item(s, JSIL.Cast(value, System.Net.CookieCollection));
		return;
	}
	throw JSIL.New(System.ArgumentException, "_ctor$1", ["value"]);
};
$asm06.System.Net.PathList.prototype.GetEnumerator = function () {
	return this.m_list.GetEnumerator();
};
JSIL.MakeProperty($asm06.System.Net.PathList.prototype, "Count", 
	$asm06.System.Net.PathList.prototype.get_Count, null);
JSIL.MakeProperty($asm06.System.Net.PathList.prototype, "Values", 
	$asm06.System.Net.PathList.prototype.get_Values, null);
JSIL.MakeProperty($asm06.System.Net.PathList.prototype, "Item", 
	$asm06.System.Net.PathList.prototype.get_Item, $asm06.System.Net.PathList.prototype.set_Item);
$asm06.System.Net.PathList.prototype.m_list = null;

$asm06.System.Net.PathList.PathListComparer.prototype.IComparer_Compare = function (ol, or) {
	var text = $asm06.System.Net.CookieParser.CheckQuoted(JSIL.Cast(ol, System.String));
	var text2 = $asm06.System.Net.CookieParser.CheckQuoted(JSIL.Cast(or, System.String));
	var length = text.length;
	var length2 = text2.length;
	var num = System.Math.Min(length, length2);
__loop0__: 
	for (var i = 0; i < num; ++i) {
		if ((text[i]) !== (text2[i])) {
			return ((text[i]) - (text2[i]));
		}
	}
	return (length2 - length);
};
$asm06.System.Net.PathList.PathListComparer.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm06.System.Net.PathList.PathListComparer.StaticInstance = null;
$asm06.System.Net.PathList.PathListComparer._cctor = function () {
	$asm06.System.Net.PathList.PathListComparer.StaticInstance = new $asm06.System.Net.PathList.PathListComparer();
};

$asm06.System.Net.HttpDateParse.MAKE_UPPER = function (c) {
	return System.Char.ToUpper$0(c, System.Globalization.CultureInfo.InvariantCulture);
};
$asm06.System.Net.HttpDateParse.MapDayMonthToDword = function (lpszDay, index) {
	switch ($asm06.System.Net.HttpDateParse.MAKE_UPPER(lpszDay[index])) {
		case "A": 
			var c = $asm06.System.Net.HttpDateParse.MAKE_UPPER(lpszDay[(index + 1)]);
			if (c === "P") {
				return 4;
			}
			if (c !== "U") {
				return -999;
			}
			return 8;
		case "D": 
			return 12;
		case "F": 
			var c2 = $asm06.System.Net.HttpDateParse.MAKE_UPPER(lpszDay[(index + 1)]);
			if (c2 === "E") {
				return 2;
			}
			if (c2 === "R") {
				return 5;
			}
			return -999;
		case "G": 
			return -1000;
		case "J": 
			var c3 = $asm06.System.Net.HttpDateParse.MAKE_UPPER(lpszDay[(index + 1)]);
			if (c3 !== "A") {
				if (c3 === "U") {
					switch ($asm06.System.Net.HttpDateParse.MAKE_UPPER(lpszDay[(index + 2)])) {
						case "L": 
							return 7;
						case "N": 
							return 6;
					}
				}
				return -999;
			}
			return 1;
		case "M": 
			var c4 = $asm06.System.Net.HttpDateParse.MAKE_UPPER(lpszDay[(index + 1)]);
			if (c4 !== "A") {
				if (c4 === "O") {
					return 1;
				}
			} else {
				var c5 = $asm06.System.Net.HttpDateParse.MAKE_UPPER(lpszDay[(index + 2)]);
				if (c5 === "R") {
					return 3;
				}
				if (c5 === "Y") {
					return 5;
				}
			}
			return -999;
		case "N": 
			return 11;
		case "O": 
			return 10;
		case "S": 
			var c6 = $asm06.System.Net.HttpDateParse.MAKE_UPPER(lpszDay[(index + 1)]);
			if (c6 === "A") {
				return 6;
			}
			if (c6 === "E") {
				return 9;
			}
			if (c6 !== "U") {
				return -999;
			}
			return 0;
		case "T": 
			var c7 = $asm06.System.Net.HttpDateParse.MAKE_UPPER(lpszDay[(index + 1)]);
			if (c7 === "H") {
				return 4;
			}
			if (c7 === "U") {
				return 2;
			}
			return -999;
		case "U": 
			return -1000;
		case "W": 
			return 3;
	}
	return -999;
};
$asm06.System.Net.HttpDateParse.ParseHttpDate = function (DateString, /* ref */ dtOut) {
	var num = 0;
	var num2 = 0;
	var num3 = -1;
	var flag = false;
	var array = JSIL.Array.New(System.Int32, 8);
	var result = true;
	var array2 = DateString.ToCharArray();
	dtOut.value = new System.DateTime();
__loop0__: 
	while ((num < DateString.length) && (num2 < 8)) {
		if (!((array2[num] < "0") || (array2[num] > "9"))) {
			array[num2] = 0;
		__loop2__: 
			do {
				array[num2] *= 10;
				array[num2] += (array2[num] - "0");
				++num;
			} while ((num < DateString.length) && 
				(array2[num] >= "0") && (array2[num] <= "9"));
			++num2;
		} else if (!(!((array2[num] >= "A") && 
					(array2[num] <= "Z")) && ((array2[num] < "a") || 
					(array2[num] > "z")))) {
			array[num2] = $asm06.System.Net.HttpDateParse.MapDayMonthToDword(array2, num);
			num3 = num2;
			if (!((array[num2] !== -999) || (flag && 
						(num2 === 6)))) {
				result = false;
				return result;
			}
			if (num2 === 1) {
				flag = true;
			}
		__loop1__: 
			do {
				++num;
			} while ((num < DateString.length) && (((array2[num] >= "A") && 
						(array2[num] <= "Z")) || 
					((array2[num] >= "a") && 
						(array2[num] <= "z"))));
			++num2;
		} else {
			++num;
		}
	}
	if (flag) {
		var num4 = array[2];
		var month = array[1];
		var num5 = array[3];
		var num6 = array[4];
		var num7 = array[5];
		if (num3 !== 6) {
			var num8 = array[6];
		} else {
			num8 = array[7];
		}
	} else {
		num4 = array[1];
		month = array[2];
		num8 = array[3];
		num5 = array[4];
		num6 = array[5];
		num7 = array[6];
	}
	if (num8 < 100) {
		num8 += (num8 < 80) ? 2000 : 1900;
	}
	if (!((num2 >= 4) && 
			(num4 <= 31) && 
			(num5 <= 23) && 
			(num6 <= 59) && (num7 <= 59))) {
		result = false;
		return result;
	}
	dtOut.value = JSIL.New(System.DateTime, "_ctor$9", [num8, month, num4, num5, num6, num7, 0]);
	if (num3 === 6) {
		dtOut.value = dtOut.value.ToUniversalTime().MemberwiseClone();
	}
	if (!((num2 <= 7) || (array[7] === -1000))) {
		dtOut.value.AddHours(array[7]);
	}
	dtOut.value = dtOut.value.ToLocalTime().MemberwiseClone();
	return result;
};
$asm06.System.Net.HttpDateParse.ParseCookieDate = function (dateString, /* ref */ dtOut) {
	var c = 0;
	dtOut.value = System.DateTime.MinValue.MemberwiseClone();
	var array = dateString.ToCharArray();
	if (array.length < 18) {
		return false;
	}
	var num = 0;
	var num2 = 0;
	if (!System.Char.IsDigit$0((c = array[num++]))) {
		return false;
	}
	num2 = (c - "0");
	if (!System.Char.IsDigit$0((c = array[num++]))) {
		--num;
	} else {
		num2 = ((num2 * 10) + (c - "0"));
	}
	if (num2 > 31) {
		return false;
	}
	++num;
	var num3 = $asm06.System.Net.HttpDateParse.MapDayMonthToDword(array, num);
	if (num3 === -999) {
		return false;
	}
	num += 4;
	var num4 = 0;
__loop0__: 
	for (var i = 0; i < 4; ) {
		if (!System.Char.IsDigit$0((c = array[(i + num)]))) {
			if (i !== 2) {
				return false;
			}
			break __loop0__;
		} else {
			num4 = ((num4 * 10) + (c - "0"));
			++i;
		}
	}
	if (i === 2) {
		num4 += (num4 < 80) ? 2000 : 1900;
	}
	i += num;
	if (array[i++] !== " ") {
		return false;
	}
	var num5 = 0;
	if (!System.Char.IsDigit$0((c = array[i++]))) {
		return false;
	}
	num5 = (c - "0");
	if (!System.Char.IsDigit$0((c = array[i++]))) {
		--i;
	} else {
		num5 = ((num5 * 10) + (c - "0"));
	}
	if (!((num5 <= 24) && (array[i++] === ":"))) {
		return false;
	}
	var num6 = 0;
	if (!System.Char.IsDigit$0((c = array[i++]))) {
		return false;
	}
	num6 = (c - "0");
	if (!System.Char.IsDigit$0((c = array[i++]))) {
		--i;
	} else {
		num6 = ((num6 * 10) + (c - "0"));
	}
	if (!((num6 <= 60) && (array[i++] === ":"))) {
		return false;
	}
	if ((array.length - i) < 5) {
		return false;
	}
	var num7 = 0;
	if (!System.Char.IsDigit$0((c = array[i++]))) {
		return false;
	}
	num7 = (c - "0");
	if (!System.Char.IsDigit$0((c = array[i++]))) {
		--i;
	} else {
		num7 = ((num7 * 10) + (c - "0"));
	}
	if (!((num7 <= 60) && (array[i++] === " "))) {
		return false;
	}
	if (!(((array.length - i) >= 3) && 
			(array[i++] === "G") && 
			(array[i++] === "M") && (array[i++] === "T"))) {
		return false;
	}
	dtOut.value = (JSIL.New(System.DateTime, "_ctor$9", [num4, num3, num2, num5, num6, num7, 0])).ToLocalTime().MemberwiseClone();
	return true;
};
Object.defineProperty($asm06.System.Net.HttpDateParse, "BASE_DEC", {
		"value": 10}
);
Object.defineProperty($asm06.System.Net.HttpDateParse, "DATE_INDEX_DAY_OF_WEEK", {
		"value": 0}
);
Object.defineProperty($asm06.System.Net.HttpDateParse, "DATE_1123_INDEX_DAY", {
		"value": 1}
);
Object.defineProperty($asm06.System.Net.HttpDateParse, "DATE_1123_INDEX_MONTH", {
		"value": 2}
);
Object.defineProperty($asm06.System.Net.HttpDateParse, "DATE_1123_INDEX_YEAR", {
		"value": 3}
);
Object.defineProperty($asm06.System.Net.HttpDateParse, "DATE_1123_INDEX_HRS", {
		"value": 4}
);
Object.defineProperty($asm06.System.Net.HttpDateParse, "DATE_1123_INDEX_MINS", {
		"value": 5}
);
Object.defineProperty($asm06.System.Net.HttpDateParse, "DATE_1123_INDEX_SECS", {
		"value": 6}
);
Object.defineProperty($asm06.System.Net.HttpDateParse, "DATE_ANSI_INDEX_MONTH", {
		"value": 1}
);
Object.defineProperty($asm06.System.Net.HttpDateParse, "DATE_ANSI_INDEX_DAY", {
		"value": 2}
);
Object.defineProperty($asm06.System.Net.HttpDateParse, "DATE_ANSI_INDEX_HRS", {
		"value": 3}
);
Object.defineProperty($asm06.System.Net.HttpDateParse, "DATE_ANSI_INDEX_MINS", {
		"value": 4}
);
Object.defineProperty($asm06.System.Net.HttpDateParse, "DATE_ANSI_INDEX_SECS", {
		"value": 5}
);
Object.defineProperty($asm06.System.Net.HttpDateParse, "DATE_ANSI_INDEX_YEAR", {
		"value": 6}
);
Object.defineProperty($asm06.System.Net.HttpDateParse, "DATE_INDEX_TZ", {
		"value": 7}
);
Object.defineProperty($asm06.System.Net.HttpDateParse, "DATE_INDEX_LAST", {
		"value": 7}
);
Object.defineProperty($asm06.System.Net.HttpDateParse, "MAX_FIELD_DATE_ENTRIES", {
		"value": 8}
);
Object.defineProperty($asm06.System.Net.HttpDateParse, "DATE_TOKEN_JANUARY", {
		"value": 1}
);
Object.defineProperty($asm06.System.Net.HttpDateParse, "DATE_TOKEN_FEBRUARY", {
		"value": 2}
);
Object.defineProperty($asm06.System.Net.HttpDateParse, "DATE_TOKEN_MARCH", {
		"value": 3}
);
Object.defineProperty($asm06.System.Net.HttpDateParse, "DATE_TOKEN_APRIL", {
		"value": 4}
);
Object.defineProperty($asm06.System.Net.HttpDateParse, "DATE_TOKEN_MAY", {
		"value": 5}
);
Object.defineProperty($asm06.System.Net.HttpDateParse, "DATE_TOKEN_JUNE", {
		"value": 6}
);
Object.defineProperty($asm06.System.Net.HttpDateParse, "DATE_TOKEN_JULY", {
		"value": 7}
);
Object.defineProperty($asm06.System.Net.HttpDateParse, "DATE_TOKEN_AUGUST", {
		"value": 8}
);
Object.defineProperty($asm06.System.Net.HttpDateParse, "DATE_TOKEN_SEPTEMBER", {
		"value": 9}
);
Object.defineProperty($asm06.System.Net.HttpDateParse, "DATE_TOKEN_OCTOBER", {
		"value": 10}
);
Object.defineProperty($asm06.System.Net.HttpDateParse, "DATE_TOKEN_NOVEMBER", {
		"value": 11}
);
Object.defineProperty($asm06.System.Net.HttpDateParse, "DATE_TOKEN_DECEMBER", {
		"value": 12}
);
Object.defineProperty($asm06.System.Net.HttpDateParse, "DATE_TOKEN_LAST_MONTH", {
		"value": 13}
);
Object.defineProperty($asm06.System.Net.HttpDateParse, "DATE_TOKEN_SUNDAY", {
		"value": 0}
);
Object.defineProperty($asm06.System.Net.HttpDateParse, "DATE_TOKEN_MONDAY", {
		"value": 1}
);
Object.defineProperty($asm06.System.Net.HttpDateParse, "DATE_TOKEN_TUESDAY", {
		"value": 2}
);
Object.defineProperty($asm06.System.Net.HttpDateParse, "DATE_TOKEN_WEDNESDAY", {
		"value": 3}
);
Object.defineProperty($asm06.System.Net.HttpDateParse, "DATE_TOKEN_THURSDAY", {
		"value": 4}
);
Object.defineProperty($asm06.System.Net.HttpDateParse, "DATE_TOKEN_FRIDAY", {
		"value": 5}
);
Object.defineProperty($asm06.System.Net.HttpDateParse, "DATE_TOKEN_SATURDAY", {
		"value": 6}
);
Object.defineProperty($asm06.System.Net.HttpDateParse, "DATE_TOKEN_LAST_DAY", {
		"value": 7}
);
Object.defineProperty($asm06.System.Net.HttpDateParse, "DATE_TOKEN_GMT", {
		"value": -1000}
);
Object.defineProperty($asm06.System.Net.HttpDateParse, "DATE_TOKEN_LAST", {
		"value": -1000}
);
Object.defineProperty($asm06.System.Net.HttpDateParse, "DATE_TOKEN_ERROR", {
		"value": -999}
);

JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm06.System.Net.LazyAsyncResult, [
				"System.IAsyncResult"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Net.WebResponse, [
				"System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Net.WebHeaderCollection, [
				"System.Collections.IEnumerable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm06.System.Net.CaseInsensitiveAscii, [
				"System.Collections.Generic.IEqualityComparer$b1"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm06.System.Net.Sockets.AsyncResult, [
				"System.IAsyncResult"
			]);
	});
JSIL.QueueInitializer(function () {
		$asm06.System.Net.Sockets.SocketPolicyDownloader.prototype.__StructFields__ = [
			["m_LastAttempt", System.DateTime]
		];
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm06.System.Net.Sockets.TcpPolicyDownloaderProtocol, [
				"System.Net.Sockets.ISocketPolicyDownloaderProtocol"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm06.System.Net.Sockets.HttpPolicyDownloaderProtocol, [
				"System.Net.Sockets.ISocketPolicyDownloaderProtocol"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ExternalMembers($asm06.System.Net.Sockets.UnsafeSocketPolicyNativeMethods, 
			"ParseSocketPolicyWindows", "FreeSocketPolicyWindows", "CheckSocketPolicyWindows", "ParseSocketPolicyUnix", "FreeSocketPolicyUnix", "CheckSocketPolicyUnix"
		);
	});
JSIL.QueueInitializer(function () {
		JSIL.ExternalMembers($asm06.System.Net.Sockets.UnsafeRegKeyServicesNativeMethods, 
			"GetAllowUdpMulticastClients"
		);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Net.NetworkCredential, [
				"System.Net.ICredentials"
			]);
	});
JSIL.QueueInitializer(function () {
		$asm06.System.Net.Sockets.ReceiveMessageAsyncResult.prototype.__StructFields__ = [
			["ipPacketInformation", $asm06.System.Net.Sockets.IPPacketInformation], 
			["wsaMessageBufferGCHandle", System.Runtime.InteropServices.GCHandle], 
			["wsaBufferArrayGCHandle", System.Runtime.InteropServices.GCHandle], 
			["controlBufferGCHandle", System.Runtime.InteropServices.GCHandle]
		];
	});
JSIL.QueueInitializer(function () {
		$asm06.System.Net.Sockets.FilterReceiveMessageAsyncResult.prototype.__StructFields__ = [
			["packetInfo", $asm06.System.Net.Sockets.IPPacketInformation]
		];
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Net.Sockets.UdpAnySourceMulticastClient, [
				"System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Net.Sockets.UdpSingleSourceMulticastClient, [
				"System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ExternalMembers($asm06.System.Net.UnsafeNclNativeMethods.OSSOCK, 
			"WSASocketWindows", "WSASocketUnix", "GetLastUnixError", "InitializeNCLPALEvents", "RegisterNCLPALEventHandle", "UnregisterNCLPALEventHandle", "DisableNCLPALReversePinvokes", "WSAStartupWindows", "WSAStartupUnix", "ioctlsocketWindows", "ioctlsocketUnix", "gethostbynameWindows", "gethostbynameUnix", "gethostbyaddrWindows", "gethostbyaddrUnix", "inet_addrWindows", "inet_addrUnix", "getpeernameWindows", "getpeernameUnix", "getsockoptWindows", "getsockoptUnix", "setsockoptWindows$0", "setsockoptUnix$0", "setsockoptWindows$1", "setsockoptUnix$1", "setsockoptWindows$2", "setsockoptUnix$2", "setsockoptWindows$3", "setsockoptUnix$3", "setsockoptWindows$4", "setsockoptUnix$4", "setsockoptWindows$5", "setsockoptUnix$5", "recvWindows", "recvUnix", "bindWindows", "bindUnix", "shutdownWindows", "shutdownUnix", "WSAConnectWindows", "WSAConnectUnix", "WSASendWindows$0", "WSASendUnix$0", "WSASendWindows$1", "WSASendUnix$1", "WSASendToWindows", "WSASendToUnix", "WSARecvWindows$0", "WSARecvUnix$0", "WSARecvWindows$1", "WSARecvUnix$1", "WSARecvMsgUnix", "WSAEventSelectWindows", "WSAEventSelectUnix", "WSAIoctlWindows", "WSAIoctlUnix", "WSAEnumNetworkEventsWindows", "WSAEnumNetworkEventsUnix", "WSAGetOverlappedResultWindows", "WSAGetOverlappedResultUnix", "WSAStringToAddressWindows", "WSAStringToAddressUnix", "WSAAddressToStringWindows", "WSAAddressToStringUnix", "getnameinfoWindows", "getnameinfoUnix"
		);
	});
JSIL.QueueInitializer(function () {
		$asm06.System.Net.UnsafeNclNativeMethods.OSSOCK.WSAMsg.prototype.__StructFields__ = [
			["controlBuffer", $asm06.System.Net.WSABuffer]
		];
	});
JSIL.QueueInitializer(function () {
		JSIL.ExternalMembers($asm06.System.Net.UnsafeNclNativeMethods.SafeNetHandles, 
			"closesocketWindows", "closesocketUnix", "ioctlsocketWindows", "ioctlsocketUnix", "WSAEventSelectWindows", "WSAEventSelectUnix", "setsockoptWindows", "setsockoptUnix"
		);
	});
JSIL.QueueInitializer(function () {
		JSIL.ExternalMembers($asm06.System.Net.UnsafeNclNativeMethods.SafeNetHandlesXPOrLater, 
			"getaddrinfoWindows", "getaddrinfoUnix", "freeaddrinfoWindows", "freeaddrinfoUnix"
		);
	});
JSIL.QueueInitializer(function () {
		JSIL.ExternalMembers($asm06.System.Net.SafeNativeMethods, 
			"FormatMessageWindows", "FormatMessageUnix"
		);
	});
JSIL.QueueInitializer(function () {
		JSIL.ExternalMembers($asm06.Microsoft.Win32.NetExtras, 
			"lstrlenA", "WideCharToMultiByte", "MultiByteToWideChar"
		);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Net.Sockets.Socket, [
				"System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Net.Sockets.SocketAsyncEventArgs, [
				"System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		System.Net.Sockets.SocketAsyncEventArgs.prototype.__StructFields__ = [
			["m_WSABuffer", $asm06.System.Net.WSABuffer], 
			["m_SocketAddressGCHandle", System.Runtime.InteropServices.GCHandle]
		];
	});
JSIL.QueueInitializer(function () {
		JSIL.ExternalMembers($asm06.System.Net.NetworkInformation.UnsafeNetworkInterfaceNativeMethods, 
			"GetIsNetworkAvailableNative"
		);
	});
JSIL.QueueInitializer(function () {
		System.Net.Cookie.prototype.__StructFields__ = [
			["m_expires", System.DateTime], 
			["m_timeStamp", System.DateTime]
		];
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm06.System.Net.Comparer, [
				"System.Collections.IComparer"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Net.CookieCollection, [
				"System.Collections.ICollection", "System.Collections.IEnumerable"
			]);
	});
JSIL.QueueInitializer(function () {
		System.Net.CookieCollection.prototype.__StructFields__ = [
			["m_TimeStamp", System.DateTime]
		];
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm06.System.Net.CookieCollection.CookieCollectionEnumerator, [
				"System.Collections.IEnumerator"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm06.System.Net.PathList.PathListComparer, [
				"System.Collections.IComparer"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.SealTypes($asm06, "System", 
			"SR"
		);
		JSIL.SealTypes($asm06, "System.Net", 
			"WebHeaderCollection", "CaseInsensitiveAscii", "HttpHeaderToName", "HttpRequestHeaderEnumToName", "HeaderInfoTable", "NetworkSecurityOptions", "NetworkCredential", "UnsafeNclNativeMethods", "IPMulticastRequest", "Linger", "IPv6MulticastRequest", "IPMulticastRequestSource", "GroupSourceRequest", "IPEndPoint", "IPAddress", "ComNetOS", "ValidationHelper", "Win32", "Cookie", "CookieTokenizer", "CookieContainer"
		);
		JSIL.SealTypes($asm06, "System.Net.Sockets", 
			"MulticastPolicyManager", "MulticastPolicyPacket", "TcpPolicyDownloaderProtocol", "OverlappedAsyncResult", "ReceiveMessageAsyncResult", "DynamicWinsockMethods", "Socket", "SocketAsyncEventArgs"
		);
		JSIL.SealTypes($asm06, "System.Net.SafeCloseSocket", 
			"InnerSafeCloseSocket"
		);
		JSIL.SealTypes($asm06, "System.Net.PathList", 
			"PathListComparer"
		);
	});
