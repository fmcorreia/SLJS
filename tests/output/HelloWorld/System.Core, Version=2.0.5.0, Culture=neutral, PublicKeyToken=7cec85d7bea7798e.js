/* Generated by JSIL v0.2 build 28582. See http://jsil.org/ for more information. */ 
var $asm08 = JSIL.DeclareAssembly("System.Core, Version=2.0.5.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e");
JSIL.DeclareNamespace("System");
JSIL.DeclareNamespace("System.Core");
JSIL.MakeClass("System.ComponentModel.DescriptionAttribute", "System.Core.SRDescriptionAttribute", false);

JSIL.MakeClass("System.ComponentModel.CategoryAttribute", "System.Core.SRCategoryAttribute", false);

JSIL.MakeClass("System.Object", "System.Core.SR", false);

JSIL.MakeStaticClass("System.Core.Strings", false);

JSIL.MakeStaticClass("System.Core.Error", false);

JSIL.MakeClass("System.Object", "System.Lazy$b1", true, ["T"]);
JSIL.MakeClass("System.Object", "System.Lazy$b1/Boxed", false, ["T"]);

JSIL.MakeClass("System.Object", "System.Lazy$b1/LazyInternalExceptionHolder", false, ["T"]);


JSIL.MakeClass("System.Object", "System.System_LazyDebugView$b1", false, ["T"]);

JSIL.DeclareNamespace("System.Globalization");
JSIL.MakeClass("System.Object", "System.Globalization.DaylightTime", false);

JSIL.DeclareNamespace("System.Threading");
JSIL.MakeEnum(
	"System.Threading.LazyThreadSafetyMode", {
		None: 0, 
		PublicationOnly: 1, 
		ExecutionAndPublication: 2
	}, false
);

JSIL.DeclareNamespace("Microsoft");
JSIL.DeclareNamespace("Microsoft.Win32");
JSIL.MakeStaticClass("Microsoft.Win32.SystemExtras", false);
JSIL.MakeStruct("Microsoft.Win32.SystemExtras/SystemTime", false);

JSIL.MakeStruct("Microsoft.Win32.SystemExtras/TimeZoneInformation", false);

JSIL.MakeStruct("Microsoft.Win32.SystemExtras/DynamicTimeZoneInformation", false);

JSIL.MakeStruct("Microsoft.Win32.SystemExtras/RegistryTimeZoneInformation", false);


JSIL.MakeStaticClass("Microsoft.Win32.UnsafeNativeMethods", false);

JSIL.MakeClass("Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid", "Microsoft.Win32.SafeLibraryHandle", false);

JSIL.DeclareNamespace("System.Collections");
JSIL.DeclareNamespace("System.Collections.Generic");
JSIL.MakeClass("System.Object", "System.Collections.Generic.BitHelper", false);

JSIL.MakeStaticClass("System.Collections.Generic.HashHelpers", false);

JSIL.MakeClass("System.Object", "System.Collections.Generic.HashSet$b1", true, ["T"]);
JSIL.MakeStruct("System.Collections.Generic.HashSet$b1/ElementCount", false, ["T"]);

JSIL.MakeStruct("System.Collections.Generic.HashSet$b1/Slot", false, ["T"]);

JSIL.MakeStruct("System.Collections.Generic.HashSet$b1/Enumerator", false, ["T"]);


JSIL.MakeClass("System.Object", "System.Collections.Generic.HashSetDebugView$b1", false, ["T"]);

JSIL.DeclareNamespace("System.Linq");
JSIL.MakeStaticClass("System.Linq.Enumerable", true);
JSIL.MakeClass("System.Object", "System.Linq.Enumerable/Iterator$b1", false, ["TSource"]);

JSIL.MakeClass(new JSIL.TypeRef($asm08, "System.Linq.Enumerable/Iterator$b1", [new JSIL.GenericParameter("TSource")]), "System.Linq.Enumerable/WhereEnumerableIterator$b1", false, ["TSource"]);

JSIL.MakeClass(new JSIL.TypeRef($asm08, "System.Linq.Enumerable/Iterator$b1", [new JSIL.GenericParameter("TSource")]), "System.Linq.Enumerable/WhereArrayIterator$b1", false, ["TSource"]);

JSIL.MakeClass(new JSIL.TypeRef($asm08, "System.Linq.Enumerable/Iterator$b1", [new JSIL.GenericParameter("TSource")]), "System.Linq.Enumerable/WhereListIterator$b1", false, ["TSource"]);

JSIL.MakeClass(new JSIL.TypeRef($asm08, "System.Linq.Enumerable/Iterator$b1", [new JSIL.GenericParameter("TResult")]), "System.Linq.Enumerable/WhereSelectEnumerableIterator$b2", false, ["TSource", "TResult"]);

JSIL.MakeClass(new JSIL.TypeRef($asm08, "System.Linq.Enumerable/Iterator$b1", [new JSIL.GenericParameter("TResult")]), "System.Linq.Enumerable/WhereSelectArrayIterator$b2", false, ["TSource", "TResult"]);

JSIL.MakeClass(new JSIL.TypeRef($asm08, "System.Linq.Enumerable/Iterator$b1", [new JSIL.GenericParameter("TResult")]), "System.Linq.Enumerable/WhereSelectListIterator$b2", false, ["TSource", "TResult"]);

JSIL.MakeClass("System.Object", "System.Linq.Enumerable/$lWhereIterator$gd__0$b1", false, ["TSource"]);

JSIL.MakeClass("System.Object", "System.Linq.Enumerable/$lSelectIterator$gd__7$b2", false, ["TSource", "TResult"]);

JSIL.MakeClass("System.Object", "System.Linq.Enumerable/$l$gc__DisplayClassf$b1", false, ["TSource"]);

JSIL.MakeClass("System.Object", "System.Linq.Enumerable/$l$gc__DisplayClass12$b3", false, ["TSource", "TMiddle", "TResult"]);

JSIL.MakeClass("System.Object", "System.Linq.Enumerable/$lSelectManyIterator$gd__14$b2", false, ["TSource", "TResult"]);

JSIL.MakeClass("System.Object", "System.Linq.Enumerable/$lSelectManyIterator$gd__1d$b2", false, ["TSource", "TResult"]);

JSIL.MakeClass("System.Object", "System.Linq.Enumerable/$lSelectManyIterator$gd__27$b3", false, ["TSource", "TCollection", "TResult"]);

JSIL.MakeClass("System.Object", "System.Linq.Enumerable/$lSelectManyIterator$gd__31$b3", false, ["TSource", "TCollection", "TResult"]);

JSIL.MakeClass("System.Object", "System.Linq.Enumerable/$lTakeIterator$gd__3a$b1", false, ["TSource"]);

JSIL.MakeClass("System.Object", "System.Linq.Enumerable/$lTakeWhileIterator$gd__40$b1", false, ["TSource"]);

JSIL.MakeClass("System.Object", "System.Linq.Enumerable/$lTakeWhileIterator$gd__46$b1", false, ["TSource"]);

JSIL.MakeClass("System.Object", "System.Linq.Enumerable/$lSkipIterator$gd__4d$b1", false, ["TSource"]);

JSIL.MakeClass("System.Object", "System.Linq.Enumerable/$lSkipWhileIterator$gd__52$b1", false, ["TSource"]);

JSIL.MakeClass("System.Object", "System.Linq.Enumerable/$lSkipWhileIterator$gd__59$b1", false, ["TSource"]);

JSIL.MakeClass("System.Object", "System.Linq.Enumerable/$lJoinIterator$gd__61$b4", false, ["TOuter", "TInner", "TKey", "TResult"]);

JSIL.MakeClass("System.Object", "System.Linq.Enumerable/$lGroupJoinIterator$gd__6a$b4", false, ["TOuter", "TInner", "TKey", "TResult"]);

JSIL.MakeClass("System.Object", "System.Linq.Enumerable/$lConcatIterator$gd__71$b1", false, ["TSource"]);

JSIL.MakeClass("System.Object", "System.Linq.Enumerable/$lZipIterator$gd__7a$b3", false, ["TFirst", "TSecond", "TResult"]);

JSIL.MakeClass("System.Object", "System.Linq.Enumerable/$lDistinctIterator$gd__81$b1", false, ["TSource"]);

JSIL.MakeClass("System.Object", "System.Linq.Enumerable/$lUnionIterator$gd__88$b1", false, ["TSource"]);

JSIL.MakeClass("System.Object", "System.Linq.Enumerable/$lIntersectIterator$gd__92$b1", false, ["TSource"]);

JSIL.MakeClass("System.Object", "System.Linq.Enumerable/$lExceptIterator$gd__99$b1", false, ["TSource"]);

JSIL.MakeClass("System.Object", "System.Linq.Enumerable/$lReverseIterator$gd__a0$b1", false, ["TSource"]);

JSIL.MakeClass("System.Object", "System.Linq.Enumerable/$lDefaultIfEmptyIterator$gd__a5$b1", false, ["TSource"]);

JSIL.MakeClass("System.Object", "System.Linq.Enumerable/$lOfTypeIterator$gd__aa$b1", false, ["TResult"]);

JSIL.MakeClass("System.Object", "System.Linq.Enumerable/$lCastIterator$gd__b1$b1", false, ["TResult"]);

JSIL.MakeClass("System.Object", "System.Linq.Enumerable/$lRangeIterator$gd__b8", false);

JSIL.MakeClass("System.Object", "System.Linq.Enumerable/$lRepeatIterator$gd__bc$b1", false, ["TResult"]);


JSIL.MakeClass("System.Object", "System.Linq.EmptyEnumerable$b1", false, ["TElement"]);

JSIL.MakeClass("System.Object", "System.Linq.IdentityFunction$b1", false, ["TElement"]);

JSIL.MakeInterface(
	"System.Linq.IOrderedEnumerable$b1", ["TElement"], {
		"CreateOrderedEnumerable": Function
	});

JSIL.MakeInterface(
	"System.Linq.IGrouping$b2", ["TKey", "TElement"], {
		"get_Key": Function, 
		"Key": Property
	});

JSIL.MakeInterface(
	"System.Linq.ILookup$b2", ["TKey", "TElement"], {
		"get_Count": Function, 
		"get_Item": Function, 
		"Contains": Function, 
		"Count": Property, 
		"Item": Property
	});

JSIL.MakeClass("System.Object", "System.Linq.Lookup$b2", true, ["TKey", "TElement"]);
JSIL.MakeClass("System.Object", "System.Linq.Lookup$b2/Grouping", false, ["TKey", "TElement"]);
JSIL.MakeClass("System.Object", "System.Linq.Lookup$b2/Grouping/$lGetEnumerator$gd__7", false, ["TKey", "TElement"]);


JSIL.MakeClass("System.Object", "System.Linq.Lookup$b2/$lGetEnumerator$gd__0", false, ["TKey", "TElement"]);

JSIL.MakeClass("System.Object", "System.Linq.Lookup$b2/$lApplyResultSelector$gd__3$b1", false, ["TKey", "TElement", "TResult"]);


JSIL.MakeClass("System.Object", "System.Linq.Set$b1", false, ["TElement"]);
JSIL.MakeStruct("System.Linq.Set$b1/Slot", false, ["TElement"]);


JSIL.MakeClass("System.Object", "System.Linq.GroupedEnumerable$b4", false, ["TSource", "TKey", "TElement", "TResult"]);

JSIL.MakeClass("System.Object", "System.Linq.GroupedEnumerable$b3", false, ["TSource", "TKey", "TElement"]);

JSIL.MakeClass("System.Object", "System.Linq.OrderedEnumerable$b1", false, ["TElement"]);
JSIL.MakeClass("System.Object", "System.Linq.OrderedEnumerable$b1/$lGetEnumerator$gd__0", false, ["TElement"]);


JSIL.MakeClass(new JSIL.TypeRef($asm08, "System.Linq.OrderedEnumerable$b1", [new JSIL.GenericParameter("TElement")]), "System.Linq.OrderedEnumerable$b2", false, ["TElement", "TKey"]);

JSIL.MakeClass("System.Object", "System.Linq.EnumerableSorter$b1", false, ["TElement"]);

JSIL.MakeClass(new JSIL.TypeRef($asm08, "System.Linq.EnumerableSorter$b1", [new JSIL.GenericParameter("TElement")]), "System.Linq.EnumerableSorter$b2", false, ["TElement", "TKey"]);

JSIL.MakeStruct("System.Linq.Buffer$b1", false, ["TElement"]);

JSIL.MakeClass("System.Object", "System.Linq.SystemCore_EnumerableDebugView$b1", false, ["T"]);

JSIL.MakeClass("System.Exception", "System.Linq.SystemCore_EnumerableDebugViewEmptyException", false);

JSIL.MakeClass("System.Object", "System.Linq.SystemCore_EnumerableDebugView", false);

JSIL.MakeInterface(
	"System.Linq.IQueryable", [], {
		"get_Expression": Function, 
		"get_ElementType": Function, 
		"get_Provider": Function, 
		"Expression": Property, 
		"ElementType": Property, 
		"Provider": Property
	});

JSIL.MakeInterface(
	"System.Linq.IQueryable$b1", ["T"], {

	});

JSIL.MakeInterface(
	"System.Linq.IQueryProvider", [], {
		"CreateQuery": Function, 
		"CreateQuery": Function, 
		"Execute": Function, 
		"Execute": Function
	});

JSIL.MakeInterface(
	"System.Linq.IOrderedQueryable", [], {

	});

JSIL.MakeInterface(
	"System.Linq.IOrderedQueryable$b1", ["T"], {

	});

JSIL.MakeStaticClass("System.Linq.Queryable", true);

JSIL.MakeClass("System.Object", "System.Linq.EnumerableQuery", true);

JSIL.MakeClass("System.Linq.EnumerableQuery", "System.Linq.EnumerableQuery$b1", true, ["T"]);

JSIL.MakeClass("System.Object", "System.Linq.EnumerableExecutor", true);

JSIL.MakeClass("System.Linq.EnumerableExecutor", "System.Linq.EnumerableExecutor$b1", true, ["T"]);

JSIL.DeclareNamespace("System.Linq.Expressions");
JSIL.MakeClass("System.Object", "System.Linq.Expressions.OldExpressionVisitor", false);

JSIL.MakeClass("System.Linq.Expressions.OldExpressionVisitor", "System.Linq.EnumerableRewriter", false);
JSIL.MakeClass("System.Object", "System.Linq.EnumerableRewriter/$l$gc__DisplayClass3", false);

JSIL.MakeClass("System.Object", "System.Linq.EnumerableRewriter/$l$gc__DisplayClass7", false);


JSIL.MakeStaticClass("System.Linq.TypeHelper", false);

JSIL.MakeStaticClass("System.Linq.Expressions.ReadOnlyCollectionExtensions", false);
JSIL.MakeStaticClass("System.Linq.Expressions.ReadOnlyCollectionExtensions/DefaultReadOnlyCollection$b1", false, ["T"]);


JSIL.DeclareNamespace("System.Security");
JSIL.DeclareNamespace("System.Security.Cryptography");
JSIL.MakeClass("System.Security.Cryptography.Aes", "System.Security.Cryptography.AesManaged", true);

JSIL.DeclareNamespace("System.Runtime");
JSIL.DeclareNamespace("System.Runtime.CompilerServices");
JSIL.MakeClass("System.Object", "System.Runtime.CompilerServices.CallSiteBinder", true);
JSIL.MakeClass("System.Object", "System.Runtime.CompilerServices.CallSiteBinder/LambdaSignature$b1", false, ["T"]);


JSIL.DeclareNamespace("System.Dynamic");
JSIL.MakeClass("System.Runtime.CompilerServices.CallSiteBinder", "System.Dynamic.DynamicMetaObjectBinder", true);

JSIL.MakeClass("System.Dynamic.DynamicMetaObjectBinder", "System.Dynamic.BinaryOperationBinder", true);

JSIL.MakeClass("System.Object", "System.Dynamic.BindingRestrictions", true);
JSIL.MakeClass("System.Object", "System.Dynamic.BindingRestrictions/TestBuilder", false);
JSIL.MakeStruct("System.Dynamic.BindingRestrictions/TestBuilder/AndNode", false);


JSIL.MakeClass("System.Dynamic.BindingRestrictions", "System.Dynamic.BindingRestrictions/MergedRestriction", false);

JSIL.MakeClass("System.Dynamic.BindingRestrictions", "System.Dynamic.BindingRestrictions/CustomRestriction", false);

JSIL.MakeClass("System.Dynamic.BindingRestrictions", "System.Dynamic.BindingRestrictions/TypeRestriction", false);

JSIL.MakeClass("System.Dynamic.BindingRestrictions", "System.Dynamic.BindingRestrictions/InstanceRestriction", false);

JSIL.MakeClass("System.Object", "System.Dynamic.BindingRestrictions/BindingRestrictionsProxy", false);


JSIL.MakeClass("System.Object", "System.Dynamic.CallInfo", true);

JSIL.MakeClass("System.Object", "System.Runtime.CompilerServices.CallSite", true);

JSIL.MakeClass("System.Runtime.CompilerServices.CallSite", "System.Runtime.CompilerServices.CallSite$b1", true, ["T"]);

JSIL.MakeStaticClass("System.Runtime.CompilerServices.CallSiteHelpers", true);

JSIL.MakeStaticClass("System.Runtime.CompilerServices.CallSiteOps", true);

JSIL.MakeClass("System.Dynamic.DynamicMetaObjectBinder", "System.Dynamic.ConvertBinder", true);

JSIL.MakeClass("System.Dynamic.DynamicMetaObjectBinder", "System.Dynamic.CreateInstanceBinder", true);

JSIL.MakeClass("System.Dynamic.DynamicMetaObjectBinder", "System.Dynamic.DeleteIndexBinder", true);

JSIL.MakeClass("System.Dynamic.DynamicMetaObjectBinder", "System.Dynamic.DeleteMemberBinder", true);

JSIL.MakeClass("System.Object", "System.Dynamic.DynamicMetaObject", true);

JSIL.MakeInterface(
	"System.Dynamic.IDynamicMetaObjectProvider", [], {
		"GetMetaObject": Function
	});

JSIL.MakeClass("System.Object", "System.Dynamic.DynamicObject", true);
JSIL.MakeClass("System.Dynamic.DynamicMetaObject", "System.Dynamic.DynamicObject/MetaDynamic", false);
JSIL.MakeDelegate("System.Dynamic.DynamicObject/MetaDynamic/Fallback");

JSIL.MakeClass("System.Dynamic.DynamicMetaObjectBinder", "System.Dynamic.GetMemberBinder", true);

JSIL.MakeClass("System.Dynamic.GetMemberBinder", "System.Dynamic.DynamicObject/MetaDynamic/GetBinderAdapter", false);

JSIL.MakeClass("System.Object", "System.Dynamic.DynamicObject/MetaDynamic/$l$gc__DisplayClass2", false);

JSIL.MakeClass("System.Object", "System.Dynamic.DynamicObject/MetaDynamic/$l$gc__DisplayClass6", false);

JSIL.MakeClass("System.Object", "System.Dynamic.DynamicObject/MetaDynamic/$l$gc__DisplayClassa", false);

JSIL.MakeClass("System.Object", "System.Dynamic.DynamicObject/MetaDynamic/$l$gc__DisplayClasse", false);

JSIL.MakeClass("System.Object", "System.Dynamic.DynamicObject/MetaDynamic/$l$gc__DisplayClass12", false);

JSIL.MakeClass("System.Object", "System.Dynamic.DynamicObject/MetaDynamic/$l$gc__DisplayClass16", false);

JSIL.MakeClass("System.Object", "System.Dynamic.DynamicObject/MetaDynamic/$l$gc__DisplayClass1a", false);

JSIL.MakeClass("System.Object", "System.Dynamic.DynamicObject/MetaDynamic/$l$gc__DisplayClass1e", false);

JSIL.MakeClass("System.Object", "System.Dynamic.DynamicObject/MetaDynamic/$l$gc__DisplayClass22", false);

JSIL.MakeClass("System.Object", "System.Dynamic.DynamicObject/MetaDynamic/$l$gc__DisplayClass26", false);

JSIL.MakeClass("System.Object", "System.Dynamic.DynamicObject/MetaDynamic/$l$gc__DisplayClass2a", false);

JSIL.MakeClass("System.Object", "System.Dynamic.DynamicObject/MetaDynamic/$l$gc__DisplayClass2e", false);



JSIL.MakeClass("System.Object", "System.Dynamic.ExpandoClass", false);

JSIL.MakeClass("System.Object", "System.Dynamic.ExpandoObject", true);
JSIL.MakeClass("System.Object", "System.Dynamic.ExpandoObject/KeyCollectionDebugView", false);

JSIL.MakeClass("System.Object", "System.Dynamic.ExpandoObject/KeyCollection", false);
JSIL.MakeClass("System.Object", "System.Dynamic.ExpandoObject/KeyCollection/$lGetEnumerator$gd__4", false);


JSIL.MakeClass("System.Object", "System.Dynamic.ExpandoObject/ValueCollectionDebugView", false);

JSIL.MakeClass("System.Object", "System.Dynamic.ExpandoObject/ValueCollection", false);
JSIL.MakeClass("System.Object", "System.Dynamic.ExpandoObject/ValueCollection/$lGetEnumerator$gd__8", false);


JSIL.MakeClass("System.Dynamic.DynamicMetaObject", "System.Dynamic.ExpandoObject/MetaExpando", false);
JSIL.MakeClass("System.Object", "System.Dynamic.ExpandoObject/MetaExpando/$l$gc__DisplayClasse", false);

JSIL.MakeClass("System.Object", "System.Dynamic.ExpandoObject/MetaExpando/$lGetDynamicMemberNames$gd__10", false);


JSIL.MakeClass("System.Object", "System.Dynamic.ExpandoObject/ExpandoData", false);

JSIL.MakeClass("System.Object", "System.Dynamic.ExpandoObject/$lGetExpandoEnumerator$gd__0", false);


JSIL.MakeStaticClass("System.Runtime.CompilerServices.RuntimeOps", true);
JSIL.MakeClass("System.Object", "System.Linq.Expressions.ExpressionVisitor", true);

JSIL.MakeClass("System.Linq.Expressions.ExpressionVisitor", "System.Runtime.CompilerServices.RuntimeOps/ExpressionQuoter", false);

JSIL.MakeClass("System.Object", "System.Runtime.CompilerServices.RuntimeOps/RuntimeVariables", false);

JSIL.MakeClass("System.Object", "System.Runtime.CompilerServices.RuntimeOps/MergedRuntimeVariables", false);

JSIL.MakeClass("System.Object", "System.Runtime.CompilerServices.RuntimeOps/EmptyRuntimeVariables", false);

JSIL.MakeClass("System.Object", "System.Runtime.CompilerServices.RuntimeOps/RuntimeVariableList", false);


JSIL.MakeInterface(
	"System.Runtime.CompilerServices.IRuntimeVariables", [], {
		"get_Count": Function, 
		"get_Item": Function, 
		"set_Item": Function, 
		"Count": Property, 
		"Item": Property
	});

JSIL.MakeClass("System.Dynamic.DynamicMetaObjectBinder", "System.Dynamic.GetIndexBinder", true);

JSIL.MakeInterface(
	"System.Dynamic.IInvokeOnGetBinder", [], {
		"get_InvokeOnGet": Function, 
		"InvokeOnGet": Property
	});

JSIL.MakeClass("System.Dynamic.DynamicMetaObjectBinder", "System.Dynamic.InvokeBinder", true);

JSIL.MakeClass("System.Dynamic.DynamicMetaObjectBinder", "System.Dynamic.InvokeMemberBinder", true);

JSIL.MakeClass("System.Object", "System.Runtime.CompilerServices.RuleCache$b1", true, ["T"]);

JSIL.MakeClass("System.Dynamic.DynamicMetaObjectBinder", "System.Dynamic.SetIndexBinder", true);

JSIL.MakeClass("System.Dynamic.DynamicMetaObjectBinder", "System.Dynamic.SetMemberBinder", true);

JSIL.MakeClass("System.Dynamic.DynamicMetaObjectBinder", "System.Dynamic.UnaryOperationBinder", true);

JSIL.MakeStaticClass("System.Dynamic.UpdateDelegates", false);

JSIL.MakeClass("System.Object", "System.Linq.Expressions.Expression", true);
JSIL.MakeDelegate("System.Linq.Expressions.Expression/LambdaFactory");

JSIL.MakeClass("System.Object", "System.Linq.Expressions.Expression/ExtensionInfo", false);


JSIL.MakeClass("System.Linq.Expressions.Expression", "System.Linq.Expressions.BinaryExpression", true);

JSIL.MakeClass("System.Linq.Expressions.BinaryExpression", "System.Linq.Expressions.LogicalBinaryExpression", false);

JSIL.MakeClass("System.Linq.Expressions.BinaryExpression", "System.Linq.Expressions.AssignBinaryExpression", false);

JSIL.MakeClass("System.Linq.Expressions.BinaryExpression", "System.Linq.Expressions.CoalesceConversionBinaryExpression", false);

JSIL.MakeClass("System.Linq.Expressions.BinaryExpression", "System.Linq.Expressions.SimpleBinaryExpression", false);

JSIL.MakeClass("System.Linq.Expressions.SimpleBinaryExpression", "System.Linq.Expressions.MethodBinaryExpression", false);

JSIL.MakeClass("System.Linq.Expressions.MethodBinaryExpression", "System.Linq.Expressions.OpAssignMethodConversionBinaryExpression", false);

JSIL.MakeClass("System.Linq.Expressions.Expression", "System.Linq.Expressions.BlockExpression", true);

JSIL.MakeClass("System.Linq.Expressions.BlockExpression", "System.Linq.Expressions.Block2", false);

JSIL.MakeClass("System.Linq.Expressions.BlockExpression", "System.Linq.Expressions.Block3", false);

JSIL.MakeClass("System.Linq.Expressions.BlockExpression", "System.Linq.Expressions.Block4", false);

JSIL.MakeClass("System.Linq.Expressions.BlockExpression", "System.Linq.Expressions.Block5", false);

JSIL.MakeClass("System.Linq.Expressions.BlockExpression", "System.Linq.Expressions.BlockN", false);

JSIL.MakeClass("System.Linq.Expressions.BlockExpression", "System.Linq.Expressions.ScopeExpression", false);

JSIL.MakeClass("System.Linq.Expressions.ScopeExpression", "System.Linq.Expressions.Scope1", false);

JSIL.MakeClass("System.Linq.Expressions.ScopeExpression", "System.Linq.Expressions.ScopeN", false);

JSIL.MakeClass("System.Linq.Expressions.ScopeN", "System.Linq.Expressions.ScopeWithType", false);

JSIL.MakeClass("System.Object", "System.Linq.Expressions.BlockExpressionList", false);
JSIL.MakeClass("System.Object", "System.Linq.Expressions.BlockExpressionList/$lGetEnumerator$gd__0", false);

JSIL.DeclareNamespace("$lSystem");
JSIL.DeclareNamespace("$lSystem.Collections");
JSIL.DeclareNamespace("$lSystem.Collections.IEnumerable");
JSIL.MakeClass("System.Object", "System.Linq.Expressions.BlockExpressionList/GetEnumerator$gd__3", false);


JSIL.MakeClass("System.Object", "System.Linq.Expressions.CatchBlock", true);

JSIL.MakeClass("System.Linq.Expressions.Expression", "System.Linq.Expressions.ConditionalExpression", true);

JSIL.MakeClass("System.Linq.Expressions.ConditionalExpression", "System.Linq.Expressions.FullConditionalExpression", false);

JSIL.MakeClass("System.Linq.Expressions.FullConditionalExpression", "System.Linq.Expressions.FullConditionalExpressionWithType", false);

JSIL.MakeClass("System.Linq.Expressions.Expression", "System.Linq.Expressions.ConstantExpression", true);

JSIL.MakeClass("System.Linq.Expressions.ConstantExpression", "System.Linq.Expressions.TypedConstantExpression", false);

JSIL.MakeClass("System.Linq.Expressions.Expression", "System.Linq.Expressions.DebugInfoExpression", true);

JSIL.MakeClass("System.Linq.Expressions.DebugInfoExpression", "System.Linq.Expressions.SpanDebugInfoExpression", false);

JSIL.MakeClass("System.Linq.Expressions.DebugInfoExpression", "System.Linq.Expressions.ClearDebugInfoExpression", false);

JSIL.MakeClass("System.Linq.Expressions.ExpressionVisitor", "System.Linq.Expressions.DebugViewWriter", false);
JSIL.MakeEnum(
	"System.Linq.Expressions.DebugViewWriter/Flow", {
		None: 0, 
		Space: 1, 
		NewLine: 2, 
		Break: 32768
	}, true
);


JSIL.MakeClass("System.Linq.Expressions.Expression", "System.Linq.Expressions.DefaultExpression", true);

JSIL.MakeInterface(
	"System.Linq.Expressions.IArgumentProvider", [], {
		"GetArgument": Function, 
		"get_ArgumentCount": Function, 
		"ArgumentCount": Property
	});

JSIL.MakeClass("System.Linq.Expressions.Expression", "System.Linq.Expressions.DynamicExpression", true);

JSIL.MakeClass("System.Linq.Expressions.DynamicExpression", "System.Linq.Expressions.DynamicExpressionN", false);

JSIL.MakeClass("System.Linq.Expressions.DynamicExpressionN", "System.Linq.Expressions.TypedDynamicExpressionN", false);

JSIL.MakeClass("System.Linq.Expressions.DynamicExpression", "System.Linq.Expressions.DynamicExpression1", false);

JSIL.MakeClass("System.Linq.Expressions.DynamicExpression1", "System.Linq.Expressions.TypedDynamicExpression1", false);

JSIL.MakeClass("System.Linq.Expressions.DynamicExpression", "System.Linq.Expressions.DynamicExpression2", false);

JSIL.MakeClass("System.Linq.Expressions.DynamicExpression2", "System.Linq.Expressions.TypedDynamicExpression2", false);

JSIL.MakeClass("System.Linq.Expressions.DynamicExpression", "System.Linq.Expressions.DynamicExpression3", false);

JSIL.MakeClass("System.Linq.Expressions.DynamicExpression3", "System.Linq.Expressions.TypedDynamicExpression3", false);

JSIL.MakeClass("System.Linq.Expressions.DynamicExpression", "System.Linq.Expressions.DynamicExpression4", false);

JSIL.MakeClass("System.Linq.Expressions.DynamicExpression4", "System.Linq.Expressions.TypedDynamicExpression4", false);

JSIL.MakeClass("System.Object", "System.Linq.Expressions.ElementInit", true);

JSIL.MakeClass("System.Linq.Expressions.ExpressionVisitor", "System.Linq.Expressions.ExpressionStringBuilder", false);

JSIL.MakeEnum(
	"System.Linq.Expressions.ExpressionType", {
		Add: 0, 
		AddChecked: 1, 
		And: 2, 
		AndAlso: 3, 
		ArrayLength: 4, 
		ArrayIndex: 5, 
		Call: 6, 
		Coalesce: 7, 
		Conditional: 8, 
		Constant: 9, 
		Convert: 10, 
		ConvertChecked: 11, 
		Divide: 12, 
		Equal: 13, 
		ExclusiveOr: 14, 
		GreaterThan: 15, 
		GreaterThanOrEqual: 16, 
		Invoke: 17, 
		Lambda: 18, 
		LeftShift: 19, 
		LessThan: 20, 
		LessThanOrEqual: 21, 
		ListInit: 22, 
		MemberAccess: 23, 
		MemberInit: 24, 
		Modulo: 25, 
		Multiply: 26, 
		MultiplyChecked: 27, 
		Negate: 28, 
		UnaryPlus: 29, 
		NegateChecked: 30, 
		New: 31, 
		NewArrayInit: 32, 
		NewArrayBounds: 33, 
		Not: 34, 
		NotEqual: 35, 
		Or: 36, 
		OrElse: 37, 
		Parameter: 38, 
		Power: 39, 
		Quote: 40, 
		RightShift: 41, 
		Subtract: 42, 
		SubtractChecked: 43, 
		TypeAs: 44, 
		TypeIs: 45, 
		Assign: 46, 
		Block: 47, 
		DebugInfo: 48, 
		Decrement: 49, 
		Dynamic: 50, 
		Default: 51, 
		Extension: 52, 
		Goto: 53, 
		Increment: 54, 
		Index: 55, 
		Label: 56, 
		RuntimeVariables: 57, 
		Loop: 58, 
		Switch: 59, 
		Throw: 60, 
		Try: 61, 
		Unbox: 62, 
		AddAssign: 63, 
		AndAssign: 64, 
		DivideAssign: 65, 
		ExclusiveOrAssign: 66, 
		LeftShiftAssign: 67, 
		ModuloAssign: 68, 
		MultiplyAssign: 69, 
		OrAssign: 70, 
		PowerAssign: 71, 
		RightShiftAssign: 72, 
		SubtractAssign: 73, 
		AddAssignChecked: 74, 
		MultiplyAssignChecked: 75, 
		SubtractAssignChecked: 76, 
		PreIncrementAssign: 77, 
		PreDecrementAssign: 78, 
		PostIncrementAssign: 79, 
		PostDecrementAssign: 80, 
		TypeEqual: 81, 
		OnesComplement: 82, 
		IsTrue: 83, 
		IsFalse: 84
	}, false
);

JSIL.MakeEnum(
	"System.Linq.Expressions.GotoExpressionKind", {
		Goto: 0, 
		Return: 1, 
		Break: 2, 
		Continue: 3
	}, false
);

JSIL.MakeClass("System.Linq.Expressions.Expression", "System.Linq.Expressions.GotoExpression", true);

JSIL.MakeStaticClass("System.Linq.Expressions.ArgumentProviderOps", false);

JSIL.MakeClass("System.Linq.Expressions.Expression", "System.Linq.Expressions.IndexExpression", true);

JSIL.MakeClass("System.Linq.Expressions.Expression", "System.Linq.Expressions.InvocationExpression", true);

JSIL.MakeClass("System.Linq.Expressions.Expression", "System.Linq.Expressions.LabelExpression", true);

JSIL.MakeClass("System.Object", "System.Linq.Expressions.LabelTarget", true);

JSIL.MakeClass("System.Linq.Expressions.Expression", "System.Linq.Expressions.LambdaExpression", true);

JSIL.MakeClass("System.Linq.Expressions.LambdaExpression", "System.Linq.Expressions.Expression$b1", true, ["TDelegate"]);

JSIL.MakeClass("System.Object", "System.Linq.Expressions.ListArgumentProvider", false);
JSIL.MakeClass("System.Object", "System.Linq.Expressions.ListArgumentProvider/$lGetEnumerator$gd__0", false);

JSIL.MakeClass("System.Object", "System.Linq.Expressions.ListArgumentProvider/GetEnumerator$gd__3", false);


JSIL.MakeClass("System.Linq.Expressions.Expression", "System.Linq.Expressions.ListInitExpression", true);

JSIL.MakeClass("System.Linq.Expressions.Expression", "System.Linq.Expressions.LoopExpression", true);

JSIL.MakeClass("System.Object", "System.Linq.Expressions.MemberBinding", true);

JSIL.MakeClass("System.Linq.Expressions.MemberBinding", "System.Linq.Expressions.MemberAssignment", true);

JSIL.MakeEnum(
	"System.Linq.Expressions.MemberBindingType", {
		Assignment: 0, 
		MemberBinding: 1, 
		ListBinding: 2
	}, false
);

JSIL.MakeClass("System.Linq.Expressions.Expression", "System.Linq.Expressions.MemberExpression", true);

JSIL.MakeClass("System.Linq.Expressions.MemberExpression", "System.Linq.Expressions.FieldExpression", false);

JSIL.MakeClass("System.Linq.Expressions.MemberExpression", "System.Linq.Expressions.PropertyExpression", false);

JSIL.MakeClass("System.Linq.Expressions.Expression", "System.Linq.Expressions.MemberInitExpression", true);

JSIL.MakeClass("System.Linq.Expressions.MemberBinding", "System.Linq.Expressions.MemberListBinding", true);

JSIL.MakeClass("System.Linq.Expressions.MemberBinding", "System.Linq.Expressions.MemberMemberBinding", true);

JSIL.MakeClass("System.Linq.Expressions.Expression", "System.Linq.Expressions.MethodCallExpression", true);

JSIL.MakeClass("System.Linq.Expressions.MethodCallExpression", "System.Linq.Expressions.MethodCallExpressionN", false);

JSIL.MakeClass("System.Linq.Expressions.MethodCallExpression", "System.Linq.Expressions.InstanceMethodCallExpressionN", false);

JSIL.MakeClass("System.Linq.Expressions.MethodCallExpression", "System.Linq.Expressions.MethodCallExpression1", false);

JSIL.MakeClass("System.Linq.Expressions.MethodCallExpression", "System.Linq.Expressions.MethodCallExpression2", false);

JSIL.MakeClass("System.Linq.Expressions.MethodCallExpression", "System.Linq.Expressions.MethodCallExpression3", false);

JSIL.MakeClass("System.Linq.Expressions.MethodCallExpression", "System.Linq.Expressions.MethodCallExpression4", false);

JSIL.MakeClass("System.Linq.Expressions.MethodCallExpression", "System.Linq.Expressions.MethodCallExpression5", false);

JSIL.MakeClass("System.Linq.Expressions.MethodCallExpression", "System.Linq.Expressions.InstanceMethodCallExpression2", false);

JSIL.MakeClass("System.Linq.Expressions.MethodCallExpression", "System.Linq.Expressions.InstanceMethodCallExpression3", false);

JSIL.MakeClass("System.Linq.Expressions.Expression", "System.Linq.Expressions.NewArrayExpression", true);

JSIL.MakeClass("System.Linq.Expressions.NewArrayExpression", "System.Linq.Expressions.NewArrayInitExpression", false);

JSIL.MakeClass("System.Linq.Expressions.NewArrayExpression", "System.Linq.Expressions.NewArrayBoundsExpression", false);

JSIL.MakeClass("System.Linq.Expressions.Expression", "System.Linq.Expressions.NewExpression", true);

JSIL.MakeClass("System.Linq.Expressions.NewExpression", "System.Linq.Expressions.NewValueTypeExpression", false);

JSIL.MakeClass("System.Linq.Expressions.Expression", "System.Linq.Expressions.ParameterExpression", true);

JSIL.MakeClass("System.Linq.Expressions.ParameterExpression", "System.Linq.Expressions.TypedParameterExpression", false);

JSIL.MakeClass("System.Linq.Expressions.TypedParameterExpression", "System.Linq.Expressions.ByRefParameterExpression", false);

JSIL.MakeClass("System.Linq.Expressions.ParameterExpression", "System.Linq.Expressions.PrimitiveParameterExpression$b1", false, ["T"]);

JSIL.MakeClass("System.Linq.Expressions.Expression", "System.Linq.Expressions.RuntimeVariablesExpression", true);

JSIL.MakeClass("System.Object", "System.Linq.Expressions.SwitchCase", true);

JSIL.MakeClass("System.Linq.Expressions.Expression", "System.Linq.Expressions.SwitchExpression", true);

JSIL.MakeClass("System.Object", "System.Linq.Expressions.SymbolDocumentInfo", true);

JSIL.MakeClass("System.Linq.Expressions.SymbolDocumentInfo", "System.Linq.Expressions.SymbolDocumentWithGuids", false);

JSIL.MakeClass("System.Linq.Expressions.Expression", "System.Linq.Expressions.TryExpression", true);

JSIL.MakeClass("System.Linq.Expressions.Expression", "System.Linq.Expressions.TypeBinaryExpression", true);

JSIL.DeclareNamespace("System.Dynamic.Utils");
JSIL.MakeStaticClass("System.Dynamic.Utils.TypeUtils", false);

JSIL.MakeClass("System.Linq.Expressions.Expression", "System.Linq.Expressions.UnaryExpression", true);

JSIL.DeclareNamespace("System.Linq.Expressions.Compiler");
JSIL.MakeClass("System.Object", "System.Linq.Expressions.Compiler.AnalyzedTree", false);

JSIL.MakeClass("System.Object", "System.Linq.Expressions.Compiler.AssemblyGen", false);

JSIL.MakeStaticClass("System.Linq.Expressions.Compiler.SymbolGuids", false);

JSIL.MakeClass("System.Object", "System.Linq.Expressions.Compiler.BoundConstants", false);
JSIL.MakeStruct("System.Linq.Expressions.Compiler.BoundConstants/TypedConstant", false);


JSIL.MakeClass("System.Object", "System.Runtime.CompilerServices.Closure", true);

JSIL.MakeEnum(
	"System.Linq.Expressions.Compiler.VariableStorageKind", {
		Local: 0, 
		Hoisted: 1
	}, false
);

JSIL.MakeClass("System.Object", "System.Linq.Expressions.Compiler.CompilerScope", false);
JSIL.MakeClass("System.Object", "System.Linq.Expressions.Compiler.CompilerScope/Storage", false);

JSIL.MakeClass("System.Linq.Expressions.Compiler.CompilerScope/Storage", "System.Linq.Expressions.Compiler.CompilerScope/LocalStorage", false);

JSIL.MakeClass("System.Linq.Expressions.Compiler.CompilerScope/Storage", "System.Linq.Expressions.Compiler.CompilerScope/ArgumentStorage", false);

JSIL.MakeClass("System.Linq.Expressions.Compiler.CompilerScope/Storage", "System.Linq.Expressions.Compiler.CompilerScope/ElementBoxStorage", false);

JSIL.MakeClass("System.Linq.Expressions.Compiler.CompilerScope/Storage", "System.Linq.Expressions.Compiler.CompilerScope/LocalBoxStorage", false);


JSIL.MakeEnum(
	"System.Linq.Expressions.AnalyzeTypeIsResult", {
		KnownFalse: 0, 
		KnownTrue: 1, 
		KnownAssignable: 2, 
		Unknown: 3
	}, false
);

JSIL.MakeStaticClass("System.Linq.Expressions.ConstantCheck", false);

JSIL.MakeClass("System.Object", "System.Runtime.CompilerServices.DebugInfoGenerator", true);

JSIL.MakeStaticClass("System.Linq.Expressions.Compiler.DelegateHelpers", false);
JSIL.MakeClass("System.Object", "System.Linq.Expressions.Compiler.DelegateHelpers/TypeInfo", false);


JSIL.MakeClass("System.Object", "System.Linq.Expressions.Compiler.HoistedLocals", false);

JSIL.MakeStaticClass("System.Linq.Expressions.Compiler.ILGen", false);

JSIL.MakeClass("System.Object", "System.Linq.Expressions.Compiler.KeyedQueue$b2", false, ["K", "V"]);

JSIL.MakeClass("System.Object", "System.Linq.Expressions.Compiler.LabelInfo", false);

JSIL.MakeEnum(
	"System.Linq.Expressions.Compiler.LabelScopeKind", {
		Statement: 0, 
		Block: 1, 
		Switch: 2, 
		Lambda: 3, 
		Try: 4, 
		Catch: 5, 
		Finally: 6, 
		Filter: 7, 
		Expression: 8
	}, false
);

JSIL.MakeClass("System.Object", "System.Linq.Expressions.Compiler.LabelScopeInfo", false);

JSIL.MakeClass("System.Object", "System.Linq.Expressions.Compiler.LambdaCompiler", false);
JSIL.MakeDelegate("System.Linq.Expressions.Compiler.LambdaCompiler/WriteBack");

JSIL.MakeEnum(
	"System.Linq.Expressions.Compiler.LambdaCompiler/CompilationFlags", {
		EmitExpressionStart: 1, 
		EmitNoExpressionStart: 2, 
		EmitAsDefaultType: 16, 
		EmitAsVoidType: 32, 
		EmitAsTail: 256, 
		EmitAsMiddle: 512, 
		EmitAsNoTail: 1024, 
		EmitExpressionStartMask: 15, 
		EmitAsTypeMask: 240, 
		EmitAsTailCallMask: 3840
	}, true
);

JSIL.MakeClass("System.Object", "System.Linq.Expressions.Compiler.LambdaCompiler/SwitchLabel", false);

JSIL.MakeClass("System.Object", "System.Linq.Expressions.Compiler.LambdaCompiler/SwitchInfo", false);

JSIL.MakeClass("System.Object", "System.Linq.Expressions.Compiler.LambdaCompiler/$l$gc__DisplayClass1", false);

JSIL.MakeClass("System.Object", "System.Linq.Expressions.Compiler.LambdaCompiler/$l$gc__DisplayClass4", false);

JSIL.MakeClass("System.Object", "System.Linq.Expressions.Compiler.LambdaCompiler/$l$gc__DisplayClassc", false);


JSIL.MakeClass("System.Object", "System.Linq.Expressions.Compiler.OffsetTrackingILGenerator", false);
JSIL.MakeEnum(
	"System.Linq.Expressions.Compiler.OffsetTrackingILGenerator/ExceptionState", {
		Try: 0, 
		Filter: 1, 
		Catch: 2, 
		Finally: 3, 
		Fault: 4
	}, false
);


JSIL.MakeClass("System.Object", "System.Linq.Expressions.Set$b1", false, ["T"]);

JSIL.MakeClass("System.Object", "System.Linq.Expressions.Compiler.StackSpiller", false);
JSIL.MakeClass("System.Object", "System.Linq.Expressions.Compiler.StackSpiller/BindingRewriter", false);

JSIL.MakeClass("System.Linq.Expressions.Compiler.StackSpiller/BindingRewriter", "System.Linq.Expressions.Compiler.StackSpiller/MemberMemberBindingRewriter", false);

JSIL.MakeClass("System.Linq.Expressions.Compiler.StackSpiller/BindingRewriter", "System.Linq.Expressions.Compiler.StackSpiller/ListBindingRewriter", false);

JSIL.MakeClass("System.Linq.Expressions.Compiler.StackSpiller/BindingRewriter", "System.Linq.Expressions.Compiler.StackSpiller/MemberAssignmentRewriter", false);

JSIL.MakeEnum(
	"System.Linq.Expressions.Compiler.StackSpiller/Stack", {
		Empty: 0, 
		NonEmpty: 1
	}, false
);

JSIL.MakeEnum(
	"System.Linq.Expressions.Compiler.StackSpiller/RewriteAction", {
		None: 0, 
		Copy: 1, 
		SpillStack: 3
	}, true
);

JSIL.MakeStruct("System.Linq.Expressions.Compiler.StackSpiller/Result", false);

JSIL.MakeClass("System.Object", "System.Linq.Expressions.Compiler.StackSpiller/TempMaker", false);

JSIL.MakeClass("System.Object", "System.Linq.Expressions.Compiler.StackSpiller/ChildRewriter", false);


JSIL.MakeClass("System.Linq.Expressions.BlockN", "System.Linq.Expressions.Compiler.SpilledExpressionBlock", false);

JSIL.MakeClass("System.Runtime.CompilerServices.DebugInfoGenerator", "System.Runtime.CompilerServices.SymbolDocumentGenerator", false);

JSIL.MakeClass("System.Linq.Expressions.ExpressionVisitor", "System.Linq.Expressions.Compiler.VariableBinder", false);

JSIL.MakeDelegate("System.Action$b2");

JSIL.MakeDelegate("System.Action$b3");

JSIL.MakeDelegate("System.Action$b4");

JSIL.MakeDelegate("System.Action$b9");

JSIL.MakeDelegate("System.Action$b10");

JSIL.MakeDelegate("System.Action$b11");

JSIL.MakeDelegate("System.Action$b12");

JSIL.MakeDelegate("System.Action$b13");

JSIL.MakeDelegate("System.Action$b14");

JSIL.MakeDelegate("System.Action$b15");

JSIL.MakeDelegate("System.Action$b16");

JSIL.MakeClass("System.Object", "System.Dynamic.Utils.CacheDict$b2", false, ["TKey", "TValue"]);
JSIL.MakeStruct("System.Dynamic.Utils.CacheDict$b2/KeyInfo", false, ["TKey", "TValue"]);


JSIL.MakeStaticClass("System.Dynamic.Utils.CollectionExtensions", false);
JSIL.MakeClass("System.Object", "System.Dynamic.Utils.CollectionExtensions/$lSelect$gd__0$b2", false, ["T", "U"]);

JSIL.MakeClass("System.Object", "System.Dynamic.Utils.CollectionExtensions/$lWhere$gd__6$b1", false, ["T"]);


JSIL.MakeStaticClass("System.Dynamic.Utils.EmptyReadOnlyCollection$b1", false, ["T"]);

JSIL.MakeStaticClass("System.Dynamic.Utils.ContractUtils", false);

JSIL.MakeClass("System.Attribute", "System.Runtime.CompilerServices.ExtensionAttribute", true);

JSIL.MakeDelegate("System.Func$b1");

JSIL.MakeDelegate("System.Func$b2");

JSIL.MakeDelegate("System.Func$b3");

JSIL.MakeDelegate("System.Func$b4");

JSIL.MakeDelegate("System.Func$b5");

JSIL.MakeDelegate("System.Func$b10");

JSIL.MakeDelegate("System.Func$b11");

JSIL.MakeDelegate("System.Func$b12");

JSIL.MakeDelegate("System.Func$b13");

JSIL.MakeDelegate("System.Func$b14");

JSIL.MakeDelegate("System.Func$b15");

JSIL.MakeDelegate("System.Func$b16");

JSIL.MakeDelegate("System.Func$b17");

JSIL.MakeStaticClass("System.Dynamic.Utils.Helpers", false);

JSIL.MakeClass("System.Object", "System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1", true, ["T"]);
JSIL.MakeClass("System.Object", "System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1/Enumerator", false, ["T"]);


JSIL.MakeClass("System.Object", "System.Dynamic.Utils.ReadOnlyDictionary$b2", false, ["K", "V"]);
JSIL.MakeClass("System.Object", "System.Dynamic.Utils.ReadOnlyDictionary$b2/ReadOnlyWrapper$b1", false, ["K", "V", "T"]);


JSIL.MakeClass("System.Object", "System.Dynamic.Utils.ReferenceEqualityComparer$b1", false, ["T"]);

JSIL.MakeInterface(
	"System.Runtime.CompilerServices.IStrongBox", [], {
		"get_Value": Function, 
		"set_Value": Function, 
		"Value": Property
	});

JSIL.MakeClass("System.Object", "System.Runtime.CompilerServices.StrongBox$b1", true, ["T"]);

JSIL.MakeClass(new JSIL.TypeRef($asm08, "System.Collections.ObjectModel.ReadOnlyCollection$b1", [new JSIL.GenericParameter("T")]), "System.Runtime.CompilerServices.TrueReadOnlyCollection$b1", false, ["T"]);

JSIL.MakeStaticClass("System.Dynamic.Utils.TypeExtensions", false);

JSIL.MakeClass("System.Attribute", "System.Runtime.CompilerServices.DynamicAttribute", true);

JSIL.MakeClass("System.Object", "System.Runtime.CompilerServices.ExecutionScope", true);

$asm08.System.Core.SRDescriptionAttribute.prototype._ctor = function (description) {
	System.ComponentModel.DescriptionAttribute.prototype._ctor$1.call(this, description);
};
$asm08.System.Core.SRDescriptionAttribute.prototype.get_Description = function () {
	if (!this.replaced) {
		this.replaced = true;
		System.ComponentModel.DescriptionAttribute.prototype.set_DescriptionValue.call(this, $asm08.System.Core.SR.GetString$2(System.ComponentModel.DescriptionAttribute.prototype.get_Description.call(this)));
	}
	return System.ComponentModel.DescriptionAttribute.prototype.get_Description.call(this);
};
JSIL.MakeProperty($asm08.System.Core.SRDescriptionAttribute.prototype, "Description", 
	$asm08.System.Core.SRDescriptionAttribute.prototype.get_Description, null);
$asm08.System.Core.SRDescriptionAttribute.prototype.replaced = false;

$asm08.System.Core.SRCategoryAttribute.prototype._ctor = function (category) {
	System.ComponentModel.CategoryAttribute.prototype._ctor$1.call(this, category);
};
$asm08.System.Core.SRCategoryAttribute.prototype.GetLocalizedString = function (value) {
	return $asm08.System.Core.SR.GetString$2(value);
};

$asm08.System.Core.SR.get_InternalSyncObject = function () {
	if ($asm08.System.Core.SR.s_InternalSyncObject === null) {
		var value = new System.Object();
		System.Threading.Interlocked.CompareExchange$b1(System.Object)(/* ref */ new JSIL.MemberReference($asm08.System.Core.SR, "s_InternalSyncObject"), value, null);
	}
	return $asm08.System.Core.SR.s_InternalSyncObject;
};
$asm08.System.Core.SR.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
	var assembly = JSIL.GetType(this).Assembly;
	this.resources = JSIL.New(System.Resources.ResourceManager, "_ctor$1", ["System.Core", assembly]);
	try {
		var assembly2 = System.Reflection.Assembly.Load$0("System.Core.debug.resources, Version=2.0.5.0, Culture=en-US, PublicKeyToken=7cec85d7bea7798e");
		this.debugResources = JSIL.New(System.Resources.ResourceManager, "_ctor$1", ["System.Core.debug", assembly2]);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.IO.FileNotFoundException)) {
		} else {
			throw $exception;
		}
	}
	this.fallbackResources = JSIL.New(System.Resources.ResourceManager, "_ctor$1", ["mscorlib", System.Object.Assembly]);
};
$asm08.System.Core.SR.GetLoader = function () {
	var internalSyncObject = null;
	if ($asm08.System.Core.SR.loader === null) {
		System.Threading.Monitor.Enter((internalSyncObject = $asm08.System.Core.SR.InternalSyncObject));
		try {
			if ($asm08.System.Core.SR.loader === null) {
				$asm08.System.Core.SR.loader = new $asm08.System.Core.SR();
			}
		} finally {
			System.Threading.Monitor.Exit(internalSyncObject);
		}
	}
	return $asm08.System.Core.SR.loader;
};
$asm08.System.Core.SR.get_Culture = function () {
	return null;
};
$asm08.System.Core.SR.GetString$0 = function (name, args) {
	var flag = new JSIL.Variable(false);
	return $asm08.System.Core.SR.GetString$1(name, /* ref */ flag, args);
};
$asm08.System.Core.SR.GetString$1 = function (name, /* ref */ fallbackUsed, args) {
	var sR = $asm08.System.Core.SR.GetLoader();
	var text = null;
	fallbackUsed.value = false;
	if (sR !== null) {
		text = sR.resources.GetString$1(name, $asm08.System.Core.SR.Culture);
		if (!(text || (sR.debugResources === null))) {
			text = sR.debugResources.GetString$1(name, $asm08.System.Core.SR.Culture);
		}
		if (text !== null) {
			if (!((args === null) || (args.length <= 0))) {
			__loop0__: 
				for (var i = 0; i < args.length; ++i) {
					if (args[i]) {
						var text2 = args[i].toString();
						if (!((text2 === null) || (text2.length <= 1024))) {
							args[i] = ((text2.Substring$1(0, 1021) + "..."));
						}
					}
				}
				return System.String.Format(System.Globalization.CultureInfo.CurrentCulture, text, args);
			}
			return text;
		}
	}
	fallbackUsed.value = true;
	text = $asm08.System.Core.SR.GetFallbackMessage(name, args);
	return text;
};
$asm08.System.Core.SR.GetString$2 = function (name) {
	var text = $asm08.System.Core.SR.GetStringHelper(name);
	if (text === null) {
		text = $asm08.System.Core.SR.GetFallbackMessage(name, null);
	}
	return text;
};
$asm08.System.Core.SR.GetString$3 = function (name, /* ref */ usedFallback) {
	var text = $asm08.System.Core.SR.GetStringHelper(name);
	if (text === null) {
		text = $asm08.System.Core.SR.GetFallbackMessage(name, null);
		usedFallback.value = true;
	} else {
		usedFallback.value = false;
	}
	return text;
};
$asm08.System.Core.SR.GetObject = function (name) {
	var sR = $asm08.System.Core.SR.GetLoader();
	var obj = null;
	if (sR !== null) {
		obj = sR.resources.GetObject$1(name, $asm08.System.Core.SR.Culture);
		if (!(obj || (sR.debugResources === null))) {
			obj = sR.debugResources.GetObject$1(name, $asm08.System.Core.SR.Culture);
		}
	}
	if (obj === null) {
		obj = $asm08.System.Core.SR.GetFallbackMessage(name, null);
	}
	return obj;
};
$asm08.System.Core.SR.GetStringHelper = function (name) {
	var sR = $asm08.System.Core.SR.GetLoader();
	var text = null;
	if (sR !== null) {
		text = sR.resources.GetString$1(name, $asm08.System.Core.SR.Culture);
		if (!(text || (sR.debugResources === null))) {
			text = sR.debugResources.GetString$1(name, $asm08.System.Core.SR.Culture);
		}
	}
	return text;
};
$asm08.System.Core.SR.GetFallbackMessage = function (name, args) {
	var sR = $asm08.System.Core.SR.GetLoader();
	var text = null;
	if (!((sR === null) || (sR.fallbackResources === null))) {
		var string = sR.fallbackResources.GetString$1("NoDebugResources", $asm08.System.Core.SR.Culture);
		if (string !== null) {
			var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
			if (args !== null) {
			__loop0__: 
				for (var i = 0; i < args.length; ++i) {
					if (args[i]) {
						var text2 = args[i].toString();
						if (text2 !== null) {
							if (text2.length <= 1024) {
								stringBuilder.Append$2(text2);
							} else {
								stringBuilder.Append$2((text2.Substring$1(0, 1021) + "..."));
							}
							if (i < (args.length - 1)) {
								stringBuilder.Append$2(System.Globalization.CultureInfo.CurrentCulture.TextInfo.ListSeparator);
							}
						}
					}
				}
			}
			var text3 = stringBuilder.toString();
			if (text3 === null) {
				text3 = "";
			}
			text = System.String.Format(System.Globalization.CultureInfo.CurrentCulture, string, [name, text3, "4.0.60310.0", "System.Core.dll", $asm08.System.Core.SR.UriEncode(name)]);
		}
	}
	if (text === null) {
		text = name;
	}
	return text;
};
$asm08.System.Core.SR.UriEncode = function (url) {
	if (url === null) {
		return null;
	}
	var array = System.Text.Encoding.UTF8.GetBytes$3(url);
	var num = 0;
	var num2 = 0;
	var num3 = array.length;
__loop0__: 
	for (var i = 0; i < num3; ++i) {
		var c = array[i];
		if (c === " ") {
			++num;
		} else if (!$asm08.System.Core.SR.IsSafe(c)) {
			++num2;
		}
	}
	if (!((num === 0) && (num2 === 0))) {
		var array2 = JSIL.Array.New(System.Byte, (num3 + (num2 * 2)));
		var num4 = 0;
	__loop1__: 
		for (var j = 0; j < num3; ++j) {
			var b = array[j];
			var c2 = String.fromCharCode(b);
			if ($asm08.System.Core.SR.IsSafe(c2)) {
				array2[num4++] = b;
			} else if (c2 === " ") {
				array2[num4++] = 43;
			} else {
				array2[num4++] = 37;
				array2[num4++] = ($asm08.System.Core.SR.IntToHex(((b >> 4) & 15))).charCodeAt(0);
				array2[num4++] = ($asm08.System.Core.SR.IntToHex((b & 15))).charCodeAt(0);
			}
		}
		array = array2;
	}
	return System.Text.Encoding.UTF8.GetString$1(array, 0, array.length);
};
$asm08.System.Core.SR.IntToHex = function (n) {
	if (n <= 9) {
		return (n + 48);
	}
	return ((n - 10) + 97);
};
$asm08.System.Core.SR.IsSafe = function (ch) {
	if (!(!((ch >= "a") && 
				(ch <= "z")) && 
			!((ch >= "A") && 
				(ch <= "Z")) && ((ch < "0") || 
				(ch > "9")))) {
		return true;
	}
	if (ch !== "!") {
		switch (ch) {
			case "'": 
			case "(": 
			case ")": 
			case "*": 
			case "-": 
			case ".": 
				return true;
			case "+": 
			case ",": 
				break;
			default: 
				if (ch === "_") {
					return true;
				}
				break;
		}
		return false;
	}
	return true;
};
JSIL.OverloadedMethod($asm08.System.Core.SR, "GetString", [
		["GetString$0", [System.String, System.Array.Of(System.Object)]], 
		["GetString$1", [System.String, JSIL.Reference.Of(System.Boolean), System.Array.Of(System.Object)]], 
		["GetString$2", [System.String]], 
		["GetString$3", [System.String, JSIL.Reference.Of(System.Boolean)]]
	]);
JSIL.MakeProperty($asm08.System.Core.SR, "InternalSyncObject", 
	$asm08.System.Core.SR.get_InternalSyncObject, null);
JSIL.MakeProperty($asm08.System.Core.SR, "Culture", 
	$asm08.System.Core.SR.get_Culture, null);
Object.defineProperty($asm08.System.Core.SR, "ArgumentNotIEnumerableGeneric", {
		"value": "ArgumentNotIEnumerableGeneric"}
);
Object.defineProperty($asm08.System.Core.SR, "ArgumentNotValid", {
		"value": "ArgumentNotValid"}
);
Object.defineProperty($asm08.System.Core.SR, "MoreThanOneElement", {
		"value": "MoreThanOneElement"}
);
Object.defineProperty($asm08.System.Core.SR, "MoreThanOneMatch", {
		"value": "MoreThanOneMatch"}
);
Object.defineProperty($asm08.System.Core.SR, "NoElements", {
		"value": "NoElements"}
);
Object.defineProperty($asm08.System.Core.SR, "NoMatch", {
		"value": "NoMatch"}
);
Object.defineProperty($asm08.System.Core.SR, "NoMethodOnType", {
		"value": "NoMethodOnType"}
);
Object.defineProperty($asm08.System.Core.SR, "NoMethodOnTypeMatchingArguments", {
		"value": "NoMethodOnTypeMatchingArguments"}
);
Object.defineProperty($asm08.System.Core.SR, "EmptyEnumerable", {
		"value": "EmptyEnumerable"}
);
Object.defineProperty($asm08.System.Core.SR, "UserDefinedOperatorMustBeStatic", {
		"value": "UserDefinedOperatorMustBeStatic"}
);
Object.defineProperty($asm08.System.Core.SR, "UserDefinedOperatorMustNotBeVoid", {
		"value": "UserDefinedOperatorMustNotBeVoid"}
);
Object.defineProperty($asm08.System.Core.SR, "CoercionOperatorNotDefined", {
		"value": "CoercionOperatorNotDefined"}
);
Object.defineProperty($asm08.System.Core.SR, "UnaryOperatorNotDefined", {
		"value": "UnaryOperatorNotDefined"}
);
Object.defineProperty($asm08.System.Core.SR, "BinaryOperatorNotDefined", {
		"value": "BinaryOperatorNotDefined"}
);
Object.defineProperty($asm08.System.Core.SR, "OperandTypesDoNotMatchParameters", {
		"value": "OperandTypesDoNotMatchParameters"}
);
Object.defineProperty($asm08.System.Core.SR, "ArgumentMustBeArray", {
		"value": "ArgumentMustBeArray"}
);
Object.defineProperty($asm08.System.Core.SR, "ArgumentMustBeBoolean", {
		"value": "ArgumentMustBeBoolean"}
);
Object.defineProperty($asm08.System.Core.SR, "ArgumentMustBeFieldInfoOrPropertInfo", {
		"value": "ArgumentMustBeFieldInfoOrPropertInfo"}
);
Object.defineProperty($asm08.System.Core.SR, "ArgumentMustBeFieldInfoOrPropertInfoOrMethod", {
		"value": "ArgumentMustBeFieldInfoOrPropertInfoOrMethod"}
);
Object.defineProperty($asm08.System.Core.SR, "ArgumentMustBeInstanceMember", {
		"value": "ArgumentMustBeInstanceMember"}
);
Object.defineProperty($asm08.System.Core.SR, "ArgumentMustBeInteger", {
		"value": "ArgumentMustBeInteger"}
);
Object.defineProperty($asm08.System.Core.SR, "ArgumentMustBeArrayIndexType", {
		"value": "ArgumentMustBeArrayIndexType"}
);
Object.defineProperty($asm08.System.Core.SR, "ArgumentMustBeSingleDimensionalArrayType", {
		"value": "ArgumentMustBeSingleDimensionalArrayType"}
);
Object.defineProperty($asm08.System.Core.SR, "ArgumentTypesMustMatch", {
		"value": "ArgumentTypesMustMatch"}
);
Object.defineProperty($asm08.System.Core.SR, "CannotAutoInitializeValueTypeElementThroughProperty", {
		"value": "CannotAutoInitializeValueTypeElementThroughProperty"}
);
Object.defineProperty($asm08.System.Core.SR, "CannotAutoInitializeValueTypeMemberThroughProperty", {
		"value": "CannotAutoInitializeValueTypeMemberThroughProperty"}
);
Object.defineProperty($asm08.System.Core.SR, "IncorrectTypeForTypeAs", {
		"value": "IncorrectTypeForTypeAs"}
);
Object.defineProperty($asm08.System.Core.SR, "CoalesceUsedOnNonNullType", {
		"value": "CoalesceUsedOnNonNullType"}
);
Object.defineProperty($asm08.System.Core.SR, "ExpressionTypeCannotInitializeArrayType", {
		"value": "ExpressionTypeCannotInitializeArrayType"}
);
Object.defineProperty($asm08.System.Core.SR, "ExpressionTypeDoesNotMatchConstructorParameter", {
		"value": "ExpressionTypeDoesNotMatchConstructorParameter"}
);
Object.defineProperty($asm08.System.Core.SR, "ArgumentTypeDoesNotMatchMember", {
		"value": "ArgumentTypeDoesNotMatchMember"}
);
Object.defineProperty($asm08.System.Core.SR, "ArgumentMemberNotDeclOnType", {
		"value": "ArgumentMemberNotDeclOnType"}
);
Object.defineProperty($asm08.System.Core.SR, "ExpressionTypeDoesNotMatchMethodParameter", {
		"value": "ExpressionTypeDoesNotMatchMethodParameter"}
);
Object.defineProperty($asm08.System.Core.SR, "ExpressionTypeDoesNotMatchParameter", {
		"value": "ExpressionTypeDoesNotMatchParameter"}
);
Object.defineProperty($asm08.System.Core.SR, "ExpressionTypeDoesNotMatchReturn", {
		"value": "ExpressionTypeDoesNotMatchReturn"}
);
Object.defineProperty($asm08.System.Core.SR, "ExpressionTypeNotInvocable", {
		"value": "ExpressionTypeNotInvocable"}
);
Object.defineProperty($asm08.System.Core.SR, "FieldNotDefinedForType", {
		"value": "FieldNotDefinedForType"}
);
Object.defineProperty($asm08.System.Core.SR, "IncorrectNumberOfIndexes", {
		"value": "IncorrectNumberOfIndexes"}
);
Object.defineProperty($asm08.System.Core.SR, "IncorrectNumberOfLambdaArguments", {
		"value": "IncorrectNumberOfLambdaArguments"}
);
Object.defineProperty($asm08.System.Core.SR, "IncorrectNumberOfLambdaDeclarationParameters", {
		"value": "IncorrectNumberOfLambdaDeclarationParameters"}
);
Object.defineProperty($asm08.System.Core.SR, "IncorrectNumberOfMethodCallArguments", {
		"value": "IncorrectNumberOfMethodCallArguments"}
);
Object.defineProperty($asm08.System.Core.SR, "IncorrectNumberOfConstructorArguments", {
		"value": "IncorrectNumberOfConstructorArguments"}
);
Object.defineProperty($asm08.System.Core.SR, "IncorrectNumberOfMembersForGivenConstructor", {
		"value": "IncorrectNumberOfMembersForGivenConstructor"}
);
Object.defineProperty($asm08.System.Core.SR, "IncorrectNumberOfArgumentsForMembers", {
		"value": "IncorrectNumberOfArgumentsForMembers"}
);
Object.defineProperty($asm08.System.Core.SR, "LambdaParameterNotInScope", {
		"value": "LambdaParameterNotInScope"}
);
Object.defineProperty($asm08.System.Core.SR, "LambdaTypeMustBeDerivedFromSystemDelegate", {
		"value": "LambdaTypeMustBeDerivedFromSystemDelegate"}
);
Object.defineProperty($asm08.System.Core.SR, "MemberNotFieldOrProperty", {
		"value": "MemberNotFieldOrProperty"}
);
Object.defineProperty($asm08.System.Core.SR, "MethodContainsGenericParameters", {
		"value": "MethodContainsGenericParameters"}
);
Object.defineProperty($asm08.System.Core.SR, "MethodIsGeneric", {
		"value": "MethodIsGeneric"}
);
Object.defineProperty($asm08.System.Core.SR, "MethodNotPropertyAccessor", {
		"value": "MethodNotPropertyAccessor"}
);
Object.defineProperty($asm08.System.Core.SR, "PropertyDoesNotHaveGetter", {
		"value": "PropertyDoesNotHaveGetter"}
);
Object.defineProperty($asm08.System.Core.SR, "PropertyDoesNotHaveSetter", {
		"value": "PropertyDoesNotHaveSetter"}
);
Object.defineProperty($asm08.System.Core.SR, "NotAMemberOfType", {
		"value": "NotAMemberOfType"}
);
Object.defineProperty($asm08.System.Core.SR, "OperatorNotImplementedForType", {
		"value": "OperatorNotImplementedForType"}
);
Object.defineProperty($asm08.System.Core.SR, "ParameterExpressionNotValidAsDelegate", {
		"value": "ParameterExpressionNotValidAsDelegate"}
);
Object.defineProperty($asm08.System.Core.SR, "PropertyNotDefinedForType", {
		"value": "PropertyNotDefinedForType"}
);
Object.defineProperty($asm08.System.Core.SR, "MethodNotDefinedForType", {
		"value": "MethodNotDefinedForType"}
);
Object.defineProperty($asm08.System.Core.SR, "TypeContainsGenericParameters", {
		"value": "TypeContainsGenericParameters"}
);
Object.defineProperty($asm08.System.Core.SR, "TypeIsGeneric", {
		"value": "TypeIsGeneric"}
);
Object.defineProperty($asm08.System.Core.SR, "TypeMissingDefaultConstructor", {
		"value": "TypeMissingDefaultConstructor"}
);
Object.defineProperty($asm08.System.Core.SR, "ListInitializerWithZeroMembers", {
		"value": "ListInitializerWithZeroMembers"}
);
Object.defineProperty($asm08.System.Core.SR, "ElementInitializerMethodNotAdd", {
		"value": "ElementInitializerMethodNotAdd"}
);
Object.defineProperty($asm08.System.Core.SR, "ElementInitializerMethodNoRefOutParam", {
		"value": "ElementInitializerMethodNoRefOutParam"}
);
Object.defineProperty($asm08.System.Core.SR, "ElementInitializerMethodWithZeroArgs", {
		"value": "ElementInitializerMethodWithZeroArgs"}
);
Object.defineProperty($asm08.System.Core.SR, "ElementInitializerMethodStatic", {
		"value": "ElementInitializerMethodStatic"}
);
Object.defineProperty($asm08.System.Core.SR, "TypeNotIEnumerable", {
		"value": "TypeNotIEnumerable"}
);
Object.defineProperty($asm08.System.Core.SR, "TypeParameterIsNotDelegate", {
		"value": "TypeParameterIsNotDelegate"}
);
Object.defineProperty($asm08.System.Core.SR, "UnexpectedCoalesceOperator", {
		"value": "UnexpectedCoalesceOperator"}
);
Object.defineProperty($asm08.System.Core.SR, "InvalidCast", {
		"value": "InvalidCast"}
);
Object.defineProperty($asm08.System.Core.SR, "UnhandledBinary", {
		"value": "UnhandledBinary"}
);
Object.defineProperty($asm08.System.Core.SR, "UnhandledBinding", {
		"value": "UnhandledBinding"}
);
Object.defineProperty($asm08.System.Core.SR, "UnhandledBindingType", {
		"value": "UnhandledBindingType"}
);
Object.defineProperty($asm08.System.Core.SR, "UnhandledConvert", {
		"value": "UnhandledConvert"}
);
Object.defineProperty($asm08.System.Core.SR, "UnhandledExpressionType", {
		"value": "UnhandledExpressionType"}
);
Object.defineProperty($asm08.System.Core.SR, "UnhandledMemberAccess", {
		"value": "UnhandledMemberAccess"}
);
Object.defineProperty($asm08.System.Core.SR, "UnhandledUnary", {
		"value": "UnhandledUnary"}
);
Object.defineProperty($asm08.System.Core.SR, "UnknownBindingType", {
		"value": "UnknownBindingType"}
);
Object.defineProperty($asm08.System.Core.SR, "LogicalOperatorMustHaveConsistentTypes", {
		"value": "LogicalOperatorMustHaveConsistentTypes"}
);
Object.defineProperty($asm08.System.Core.SR, "LogicalOperatorMustHaveBooleanOperators", {
		"value": "LogicalOperatorMustHaveBooleanOperators"}
);
Object.defineProperty($asm08.System.Core.SR, "MethodDoesNotExistOnType", {
		"value": "MethodDoesNotExistOnType"}
);
Object.defineProperty($asm08.System.Core.SR, "MethodWithArgsDoesNotExistOnType", {
		"value": "MethodWithArgsDoesNotExistOnType"}
);
Object.defineProperty($asm08.System.Core.SR, "MethodWithMoreThanOneMatch", {
		"value": "MethodWithMoreThanOneMatch"}
);
Object.defineProperty($asm08.System.Core.SR, "IncorrectNumberOfTypeArgsForFunc", {
		"value": "IncorrectNumberOfTypeArgsForFunc"}
);
Object.defineProperty($asm08.System.Core.SR, "IncorrectNumberOfTypeArgsForAction", {
		"value": "IncorrectNumberOfTypeArgsForAction"}
);
Object.defineProperty($asm08.System.Core.SR, "ExpressionMayNotContainByrefParameters", {
		"value": "ExpressionMayNotContainByrefParameters"}
);
Object.defineProperty($asm08.System.Core.SR, "ArrayElementTypeCannotBeVoid", {
		"value": "ArrayElementTypeCannotBeVoid"}
);
Object.defineProperty($asm08.System.Core.SR, "Argument_AdjustmentRulesNoNulls", {
		"value": "Argument_AdjustmentRulesNoNulls"}
);
Object.defineProperty($asm08.System.Core.SR, "Argument_AdjustmentRulesOutOfOrder", {
		"value": "Argument_AdjustmentRulesOutOfOrder"}
);
Object.defineProperty($asm08.System.Core.SR, "Argument_AdjustmentRulesAmbiguousOverlap", {
		"value": "Argument_AdjustmentRulesAmbiguousOverlap"}
);
Object.defineProperty($asm08.System.Core.SR, "Argument_AdjustmentRulesrDaylightSavingTimeOverlap", {
		"value": "Argument_AdjustmentRulesrDaylightSavingTimeOverlap"}
);
Object.defineProperty($asm08.System.Core.SR, "Argument_AdjustmentRulesrDaylightSavingTimeOverlapNonRuleRange", {
		"value": "Argument_AdjustmentRulesrDaylightSavingTimeOverlapNonRuleRange"}
);
Object.defineProperty($asm08.System.Core.SR, "Argument_AdjustmentRulesInvalidOverlap", {
		"value": "Argument_AdjustmentRulesInvalidOverlap"}
);
Object.defineProperty($asm08.System.Core.SR, "Argument_ConvertMismatch", {
		"value": "Argument_ConvertMismatch"}
);
Object.defineProperty($asm08.System.Core.SR, "Argument_DateTimeHasTimeOfDay", {
		"value": "Argument_DateTimeHasTimeOfDay"}
);
Object.defineProperty($asm08.System.Core.SR, "Argument_DateTimeIsInvalid", {
		"value": "Argument_DateTimeIsInvalid"}
);
Object.defineProperty($asm08.System.Core.SR, "Argument_DateTimeIsNotAmbiguous", {
		"value": "Argument_DateTimeIsNotAmbiguous"}
);
Object.defineProperty($asm08.System.Core.SR, "Argument_DateTimeOffsetIsNotAmbiguous", {
		"value": "Argument_DateTimeOffsetIsNotAmbiguous"}
);
Object.defineProperty($asm08.System.Core.SR, "Argument_DateTimeKindMustBeUnspecified", {
		"value": "Argument_DateTimeKindMustBeUnspecified"}
);
Object.defineProperty($asm08.System.Core.SR, "Argument_DateTimeHasTicks", {
		"value": "Argument_DateTimeHasTicks"}
);
Object.defineProperty($asm08.System.Core.SR, "Argument_InvalidId", {
		"value": "Argument_InvalidId"}
);
Object.defineProperty($asm08.System.Core.SR, "Argument_InvalidSerializedString", {
		"value": "Argument_InvalidSerializedString"}
);
Object.defineProperty($asm08.System.Core.SR, "Argument_InvalidREG_TZI_FORMAT", {
		"value": "Argument_InvalidREG_TZI_FORMAT"}
);
Object.defineProperty($asm08.System.Core.SR, "Argument_OutOfOrderDateTimes", {
		"value": "Argument_OutOfOrderDateTimes"}
);
Object.defineProperty($asm08.System.Core.SR, "Argument_TimeSpanHasSeconds", {
		"value": "Argument_TimeSpanHasSeconds"}
);
Object.defineProperty($asm08.System.Core.SR, "Argument_TimeZoneInfoBadTZif", {
		"value": "Argument_TimeZoneInfoBadTZif"}
);
Object.defineProperty($asm08.System.Core.SR, "Argument_TimeZoneInfoInvalidTZif", {
		"value": "Argument_TimeZoneInfoInvalidTZif"}
);
Object.defineProperty($asm08.System.Core.SR, "Argument_TransitionTimesAreIdentical", {
		"value": "Argument_TransitionTimesAreIdentical"}
);
Object.defineProperty($asm08.System.Core.SR, "ArgumentOutOfRange_DayParam", {
		"value": "ArgumentOutOfRange_DayParam"}
);
Object.defineProperty($asm08.System.Core.SR, "ArgumentOutOfRange_DayOfWeek", {
		"value": "ArgumentOutOfRange_DayOfWeek"}
);
Object.defineProperty($asm08.System.Core.SR, "ArgumentOutOfRange_MonthParam", {
		"value": "ArgumentOutOfRange_MonthParam"}
);
Object.defineProperty($asm08.System.Core.SR, "ArgumentOutOfRange_UtcOffset", {
		"value": "ArgumentOutOfRange_UtcOffset"}
);
Object.defineProperty($asm08.System.Core.SR, "ArgumentOutOfRange_UtcOffsetAndDaylightDelta", {
		"value": "ArgumentOutOfRange_UtcOffsetAndDaylightDelta"}
);
Object.defineProperty($asm08.System.Core.SR, "ArgumentOutOfRange_Week", {
		"value": "ArgumentOutOfRange_Week"}
);
Object.defineProperty($asm08.System.Core.SR, "InvalidTimeZone_InvalidRegistryData", {
		"value": "InvalidTimeZone_InvalidRegistryData"}
);
Object.defineProperty($asm08.System.Core.SR, "InvalidTimeZone_InvalidWin32APIData", {
		"value": "InvalidTimeZone_InvalidWin32APIData"}
);
Object.defineProperty($asm08.System.Core.SR, "Security_CannotReadRegistryData", {
		"value": "Security_CannotReadRegistryData"}
);
Object.defineProperty($asm08.System.Core.SR, "Serialization_CorruptField", {
		"value": "Serialization_CorruptField"}
);
Object.defineProperty($asm08.System.Core.SR, "Serialization_InvalidEscapeSequence", {
		"value": "Serialization_InvalidEscapeSequence"}
);
Object.defineProperty($asm08.System.Core.SR, "TimeZoneNotFound_MissingRegistryData", {
		"value": "TimeZoneNotFound_MissingRegistryData"}
);
Object.defineProperty($asm08.System.Core.SR, "ArgumentOutOfRange_DateTimeBadTicks", {
		"value": "ArgumentOutOfRange_DateTimeBadTicks"}
);
Object.defineProperty($asm08.System.Core.SR, "MethodPreconditionViolated", {
		"value": "MethodPreconditionViolated"}
);
Object.defineProperty($asm08.System.Core.SR, "InvalidArgumentValue", {
		"value": "InvalidArgumentValue"}
);
Object.defineProperty($asm08.System.Core.SR, "NonEmptyCollectionRequired", {
		"value": "NonEmptyCollectionRequired"}
);
Object.defineProperty($asm08.System.Core.SR, "OnlyStaticFieldsHaveNullInstance", {
		"value": "OnlyStaticFieldsHaveNullInstance"}
);
Object.defineProperty($asm08.System.Core.SR, "OnlyStaticPropertiesHaveNullInstance", {
		"value": "OnlyStaticPropertiesHaveNullInstance"}
);
Object.defineProperty($asm08.System.Core.SR, "ExpressionMustBeReadable", {
		"value": "ExpressionMustBeReadable"}
);
Object.defineProperty($asm08.System.Core.SR, "ExpressionMustBeWriteable", {
		"value": "ExpressionMustBeWriteable"}
);
Object.defineProperty($asm08.System.Core.SR, "AllTestValuesMustHaveSameType", {
		"value": "AllTestValuesMustHaveSameType"}
);
Object.defineProperty($asm08.System.Core.SR, "AllCaseBodiesMustHaveSameType", {
		"value": "AllCaseBodiesMustHaveSameType"}
);
Object.defineProperty($asm08.System.Core.SR, "ArrayTypeMustBeArray", {
		"value": "ArrayTypeMustBeArray"}
);
Object.defineProperty($asm08.System.Core.SR, "CountCannotBeNegative", {
		"value": "CountCannotBeNegative"}
);
Object.defineProperty($asm08.System.Core.SR, "TypeDoesNotHaveConstructorForTheSignature", {
		"value": "TypeDoesNotHaveConstructorForTheSignature"}
);
Object.defineProperty($asm08.System.Core.SR, "MethodBuilderDoesNotHaveTypeBuilder", {
		"value": "MethodBuilderDoesNotHaveTypeBuilder"}
);
Object.defineProperty($asm08.System.Core.SR, "ArgumentMustNotHaveValueType", {
		"value": "ArgumentMustNotHaveValueType"}
);
Object.defineProperty($asm08.System.Core.SR, "QuotedExpressionMustBeLambda", {
		"value": "QuotedExpressionMustBeLambda"}
);
Object.defineProperty($asm08.System.Core.SR, "InvalidUnboxType", {
		"value": "InvalidUnboxType"}
);
Object.defineProperty($asm08.System.Core.SR, "DefaultBodyMustBeSupplied", {
		"value": "DefaultBodyMustBeSupplied"}
);
Object.defineProperty($asm08.System.Core.SR, "BoundsCannotBeLessThanOne", {
		"value": "BoundsCannotBeLessThanOne"}
);
Object.defineProperty($asm08.System.Core.SR, "LabelTypeMustBeVoid", {
		"value": "LabelTypeMustBeVoid"}
);
Object.defineProperty($asm08.System.Core.SR, "TypeMustNotBeByRef", {
		"value": "TypeMustNotBeByRef"}
);
Object.defineProperty($asm08.System.Core.SR, "AccessorsCannotHaveByRefArgs", {
		"value": "AccessorsCannotHaveByRefArgs"}
);
Object.defineProperty($asm08.System.Core.SR, "OnlyStaticMethodsHaveNullInstance", {
		"value": "OnlyStaticMethodsHaveNullInstance"}
);
Object.defineProperty($asm08.System.Core.SR, "AccessorsCannotHaveVarArgs", {
		"value": "AccessorsCannotHaveVarArgs"}
);
Object.defineProperty($asm08.System.Core.SR, "IndexesOfSetGetMustMatch", {
		"value": "IndexesOfSetGetMustMatch"}
);
Object.defineProperty($asm08.System.Core.SR, "BothAccessorsMustBeStatic", {
		"value": "BothAccessorsMustBeStatic"}
);
Object.defineProperty($asm08.System.Core.SR, "PropertyTyepMustMatchSetter", {
		"value": "PropertyTyepMustMatchSetter"}
);
Object.defineProperty($asm08.System.Core.SR, "SetterMustBeVoid", {
		"value": "SetterMustBeVoid"}
);
Object.defineProperty($asm08.System.Core.SR, "SetterHasNoParams", {
		"value": "SetterHasNoParams"}
);
Object.defineProperty($asm08.System.Core.SR, "PropertyTypeCannotBeVoid", {
		"value": "PropertyTypeCannotBeVoid"}
);
Object.defineProperty($asm08.System.Core.SR, "PropertyCannotHaveRefType", {
		"value": "PropertyCannotHaveRefType"}
);
Object.defineProperty($asm08.System.Core.SR, "LabelMustBeVoidOrHaveExpression", {
		"value": "LabelMustBeVoidOrHaveExpression"}
);
Object.defineProperty($asm08.System.Core.SR, "ReducedNotCompatible", {
		"value": "ReducedNotCompatible"}
);
Object.defineProperty($asm08.System.Core.SR, "ArgCntMustBeGreaterThanNameCnt", {
		"value": "ArgCntMustBeGreaterThanNameCnt"}
);
Object.defineProperty($asm08.System.Core.SR, "TypeMustBeDerivedFromSystemDelegate", {
		"value": "TypeMustBeDerivedFromSystemDelegate"}
);
Object.defineProperty($asm08.System.Core.SR, "ArgumentTypeCannotBeVoid", {
		"value": "ArgumentTypeCannotBeVoid"}
);
Object.defineProperty($asm08.System.Core.SR, "ReducibleMustOverrideReduce", {
		"value": "ReducibleMustOverrideReduce"}
);
Object.defineProperty($asm08.System.Core.SR, "MustBeReducible", {
		"value": "MustBeReducible"}
);
Object.defineProperty($asm08.System.Core.SR, "MustReduceToDifferent", {
		"value": "MustReduceToDifferent"}
);
Object.defineProperty($asm08.System.Core.SR, "VariableMustNotBeByRef", {
		"value": "VariableMustNotBeByRef"}
);
Object.defineProperty($asm08.System.Core.SR, "DuplicateVariable", {
		"value": "DuplicateVariable"}
);
Object.defineProperty($asm08.System.Core.SR, "StartEndMustBeOrdered", {
		"value": "StartEndMustBeOrdered"}
);
Object.defineProperty($asm08.System.Core.SR, "FaultCannotHaveCatchOrFinally", {
		"value": "FaultCannotHaveCatchOrFinally"}
);
Object.defineProperty($asm08.System.Core.SR, "TryMustHaveCatchFinallyOrFault", {
		"value": "TryMustHaveCatchFinallyOrFault"}
);
Object.defineProperty($asm08.System.Core.SR, "BodyOfCatchMustHaveSameTypeAsBodyOfTry", {
		"value": "BodyOfCatchMustHaveSameTypeAsBodyOfTry"}
);
Object.defineProperty($asm08.System.Core.SR, "ExtensionNodeMustOverrideProperty", {
		"value": "ExtensionNodeMustOverrideProperty"}
);
Object.defineProperty($asm08.System.Core.SR, "DynamicBinderResultNotAssignable", {
		"value": "DynamicBinderResultNotAssignable"}
);
Object.defineProperty($asm08.System.Core.SR, "DynamicObjectResultNotAssignable", {
		"value": "DynamicObjectResultNotAssignable"}
);
Object.defineProperty($asm08.System.Core.SR, "DynamicBindingNeedsRestrictions", {
		"value": "DynamicBindingNeedsRestrictions"}
);
Object.defineProperty($asm08.System.Core.SR, "BinderNotCompatibleWithCallSite", {
		"value": "BinderNotCompatibleWithCallSite"}
);
Object.defineProperty($asm08.System.Core.SR, "ReferenceEqualityNotDefined", {
		"value": "ReferenceEqualityNotDefined"}
);
Object.defineProperty($asm08.System.Core.SR, "OverloadOperatorTypeDoesNotMatchConversionType", {
		"value": "OverloadOperatorTypeDoesNotMatchConversionType"}
);
Object.defineProperty($asm08.System.Core.SR, "ConversionIsNotSupportedForArithmeticTypes", {
		"value": "ConversionIsNotSupportedForArithmeticTypes"}
);
Object.defineProperty($asm08.System.Core.SR, "EqualityMustReturnBoolean", {
		"value": "EqualityMustReturnBoolean"}
);
Object.defineProperty($asm08.System.Core.SR, "ExpressionTypeDoesNotMatchAssignment", {
		"value": "ExpressionTypeDoesNotMatchAssignment"}
);
Object.defineProperty($asm08.System.Core.SR, "ExpressionTypeDoesNotMatchLabel", {
		"value": "ExpressionTypeDoesNotMatchLabel"}
);
Object.defineProperty($asm08.System.Core.SR, "InstanceFieldNotDefinedForType", {
		"value": "InstanceFieldNotDefinedForType"}
);
Object.defineProperty($asm08.System.Core.SR, "FieldInfoNotDefinedForType", {
		"value": "FieldInfoNotDefinedForType"}
);
Object.defineProperty($asm08.System.Core.SR, "PropertyDoesNotHaveAccessor", {
		"value": "PropertyDoesNotHaveAccessor"}
);
Object.defineProperty($asm08.System.Core.SR, "InstancePropertyNotDefinedForType", {
		"value": "InstancePropertyNotDefinedForType"}
);
Object.defineProperty($asm08.System.Core.SR, "InstancePropertyWithoutParameterNotDefinedForType", {
		"value": "InstancePropertyWithoutParameterNotDefinedForType"}
);
Object.defineProperty($asm08.System.Core.SR, "InstancePropertyWithSpecifiedParametersNotDefinedForType", {
		"value": "InstancePropertyWithSpecifiedParametersNotDefinedForType"}
);
Object.defineProperty($asm08.System.Core.SR, "InstanceAndMethodTypeMismatch", {
		"value": "InstanceAndMethodTypeMismatch"}
);
Object.defineProperty($asm08.System.Core.SR, "UserDefinedOpMustHaveConsistentTypes", {
		"value": "UserDefinedOpMustHaveConsistentTypes"}
);
Object.defineProperty($asm08.System.Core.SR, "UserDefinedOpMustHaveValidReturnType", {
		"value": "UserDefinedOpMustHaveValidReturnType"}
);
Object.defineProperty($asm08.System.Core.SR, "GenericMethodWithArgsDoesNotExistOnType", {
		"value": "GenericMethodWithArgsDoesNotExistOnType"}
);
Object.defineProperty($asm08.System.Core.SR, "PropertyWithMoreThanOneMatch", {
		"value": "PropertyWithMoreThanOneMatch"}
);
Object.defineProperty($asm08.System.Core.SR, "ArgumentCannotBeOfTypeVoid", {
		"value": "ArgumentCannotBeOfTypeVoid"}
);
Object.defineProperty($asm08.System.Core.SR, "AmbiguousMatchInExpandoObject", {
		"value": "AmbiguousMatchInExpandoObject"}
);
Object.defineProperty($asm08.System.Core.SR, "SameKeyExistsInExpando", {
		"value": "SameKeyExistsInExpando"}
);
Object.defineProperty($asm08.System.Core.SR, "KeyDoesNotExistInExpando", {
		"value": "KeyDoesNotExistInExpando"}
);
Object.defineProperty($asm08.System.Core.SR, "NoOrInvalidRuleProduced", {
		"value": "NoOrInvalidRuleProduced"}
);
Object.defineProperty($asm08.System.Core.SR, "FirstArgumentMustBeCallSite", {
		"value": "FirstArgumentMustBeCallSite"}
);
Object.defineProperty($asm08.System.Core.SR, "BindingCannotBeNull", {
		"value": "BindingCannotBeNull"}
);
Object.defineProperty($asm08.System.Core.SR, "InvalidOperation", {
		"value": "InvalidOperation"}
);
Object.defineProperty($asm08.System.Core.SR, "OutOfRange", {
		"value": "OutOfRange"}
);
Object.defineProperty($asm08.System.Core.SR, "QueueEmpty", {
		"value": "QueueEmpty"}
);
Object.defineProperty($asm08.System.Core.SR, "LabelTargetAlreadyDefined", {
		"value": "LabelTargetAlreadyDefined"}
);
Object.defineProperty($asm08.System.Core.SR, "LabelTargetUndefined", {
		"value": "LabelTargetUndefined"}
);
Object.defineProperty($asm08.System.Core.SR, "ControlCannotLeaveFinally", {
		"value": "ControlCannotLeaveFinally"}
);
Object.defineProperty($asm08.System.Core.SR, "ControlCannotLeaveFilterTest", {
		"value": "ControlCannotLeaveFilterTest"}
);
Object.defineProperty($asm08.System.Core.SR, "AmbiguousJump", {
		"value": "AmbiguousJump"}
);
Object.defineProperty($asm08.System.Core.SR, "ControlCannotEnterTry", {
		"value": "ControlCannotEnterTry"}
);
Object.defineProperty($asm08.System.Core.SR, "ControlCannotEnterExpression", {
		"value": "ControlCannotEnterExpression"}
);
Object.defineProperty($asm08.System.Core.SR, "NonLocalJumpWithValue", {
		"value": "NonLocalJumpWithValue"}
);
Object.defineProperty($asm08.System.Core.SR, "ExtensionNotReduced", {
		"value": "ExtensionNotReduced"}
);
Object.defineProperty($asm08.System.Core.SR, "CannotCompileConstant", {
		"value": "CannotCompileConstant"}
);
Object.defineProperty($asm08.System.Core.SR, "CannotCompileDynamic", {
		"value": "CannotCompileDynamic"}
);
Object.defineProperty($asm08.System.Core.SR, "InvalidLvalue", {
		"value": "InvalidLvalue"}
);
Object.defineProperty($asm08.System.Core.SR, "InvalidMemberType", {
		"value": "InvalidMemberType"}
);
Object.defineProperty($asm08.System.Core.SR, "UnknownLiftType", {
		"value": "UnknownLiftType"}
);
Object.defineProperty($asm08.System.Core.SR, "InvalidOutputDir", {
		"value": "InvalidOutputDir"}
);
Object.defineProperty($asm08.System.Core.SR, "InvalidAsmNameOrExtension", {
		"value": "InvalidAsmNameOrExtension"}
);
Object.defineProperty($asm08.System.Core.SR, "CollectionReadOnly", {
		"value": "CollectionReadOnly"}
);
Object.defineProperty($asm08.System.Core.SR, "IllegalNewGenericParams", {
		"value": "IllegalNewGenericParams"}
);
Object.defineProperty($asm08.System.Core.SR, "UndefinedVariable", {
		"value": "UndefinedVariable"}
);
Object.defineProperty($asm08.System.Core.SR, "CannotCloseOverByRef", {
		"value": "CannotCloseOverByRef"}
);
Object.defineProperty($asm08.System.Core.SR, "UnexpectedVarArgsCall", {
		"value": "UnexpectedVarArgsCall"}
);
Object.defineProperty($asm08.System.Core.SR, "RethrowRequiresCatch", {
		"value": "RethrowRequiresCatch"}
);
Object.defineProperty($asm08.System.Core.SR, "TryNotAllowedInFilter", {
		"value": "TryNotAllowedInFilter"}
);
Object.defineProperty($asm08.System.Core.SR, "MustRewriteToSameNode", {
		"value": "MustRewriteToSameNode"}
);
Object.defineProperty($asm08.System.Core.SR, "MustRewriteChildToSameType", {
		"value": "MustRewriteChildToSameType"}
);
Object.defineProperty($asm08.System.Core.SR, "MustRewriteWithoutMethod", {
		"value": "MustRewriteWithoutMethod"}
);
Object.defineProperty($asm08.System.Core.SR, "InvalidNullValue", {
		"value": "InvalidNullValue"}
);
Object.defineProperty($asm08.System.Core.SR, "InvalidObjectType", {
		"value": "InvalidObjectType"}
);
Object.defineProperty($asm08.System.Core.SR, "TryNotSupportedForMethodsWithRefArgs", {
		"value": "TryNotSupportedForMethodsWithRefArgs"}
);
Object.defineProperty($asm08.System.Core.SR, "TryNotSupportedForValueTypeInstances", {
		"value": "TryNotSupportedForValueTypeInstances"}
);
Object.defineProperty($asm08.System.Core.SR, "CollectionModifiedWhileEnumerating", {
		"value": "CollectionModifiedWhileEnumerating"}
);
Object.defineProperty($asm08.System.Core.SR, "EnumerationIsDone", {
		"value": "EnumerationIsDone"}
);
Object.defineProperty($asm08.System.Core.SR, "HomogenousAppDomainRequired", {
		"value": "HomogenousAppDomainRequired"}
);
Object.defineProperty($asm08.System.Core.SR, "TestValueTypeDoesNotMatchComparisonMethodParameter", {
		"value": "TestValueTypeDoesNotMatchComparisonMethodParameter"}
);
Object.defineProperty($asm08.System.Core.SR, "SwitchValueTypeDoesNotMatchComparisonMethodParameter", {
		"value": "SwitchValueTypeDoesNotMatchComparisonMethodParameter"}
);
Object.defineProperty($asm08.System.Core.SR, "InvalidMetaObjectCreated", {
		"value": "InvalidMetaObjectCreated"}
);
Object.defineProperty($asm08.System.Core.SR, "PdbGeneratorNeedsExpressionCompiler", {
		"value": "PdbGeneratorNeedsExpressionCompiler"}
);
Object.defineProperty($asm08.System.Core.SR, "ArgumentOutOfRange_NeedNonNegNum", {
		"value": "ArgumentOutOfRange_NeedNonNegNum"}
);
Object.defineProperty($asm08.System.Core.SR, "Arg_ArrayPlusOffTooSmall", {
		"value": "Arg_ArrayPlusOffTooSmall"}
);
Object.defineProperty($asm08.System.Core.SR, "Arg_HSCapacityOverflow", {
		"value": "Arg_HSCapacityOverflow"}
);
Object.defineProperty($asm08.System.Core.SR, "InvalidOperation_EnumFailedVersion", {
		"value": "InvalidOperation_EnumFailedVersion"}
);
Object.defineProperty($asm08.System.Core.SR, "InvalidOperation_EnumOpCantHappen", {
		"value": "InvalidOperation_EnumOpCantHappen"}
);
Object.defineProperty($asm08.System.Core.SR, "Lazy_Value_RecursiveCallsToValue", {
		"value": "Lazy_Value_RecursiveCallsToValue"}
);
Object.defineProperty($asm08.System.Core.SR, "Lazy_CreateValue_NoParameterlessCtorForT", {
		"value": "Lazy_CreateValue_NoParameterlessCtorForT"}
);
Object.defineProperty($asm08.System.Core.SR, "Lazy_ctor_ModeInvalid", {
		"value": "Lazy_ctor_ModeInvalid"}
);
Object.defineProperty($asm08.System.Core.SR, "Lazy_ToString_ValueNotCreated", {
		"value": "Lazy_ToString_ValueNotCreated"}
);
$asm08.System.Core.SR.loader = null;
$asm08.System.Core.SR.prototype.resources = null;
$asm08.System.Core.SR.prototype.debugResources = null;
$asm08.System.Core.SR.prototype.fallbackResources = null;
$asm08.System.Core.SR.s_InternalSyncObject = null;
$asm08.System.Core.SR._cctor = function () {
	$asm08.System.Core.SR.loader = null;
};

$asm08.System.Core.Strings.ArgumentNotIEnumerableGeneric = function (p0) {
	return $asm08.System.Core.SR.GetString$0("ArgumentNotIEnumerableGeneric", [p0]);
};
$asm08.System.Core.Strings.ArgumentNotValid = function (p0) {
	return $asm08.System.Core.SR.GetString$0("ArgumentNotValid", [p0]);
};
$asm08.System.Core.Strings.get_MoreThanOneElement = function () {
	return $asm08.System.Core.SR.GetString$2("MoreThanOneElement");
};
$asm08.System.Core.Strings.get_MoreThanOneMatch = function () {
	return $asm08.System.Core.SR.GetString$2("MoreThanOneMatch");
};
$asm08.System.Core.Strings.get_NoElements = function () {
	return $asm08.System.Core.SR.GetString$2("NoElements");
};
$asm08.System.Core.Strings.get_NoMatch = function () {
	return $asm08.System.Core.SR.GetString$2("NoMatch");
};
$asm08.System.Core.Strings.NoMethodOnType = function (p0, p1) {
	return $asm08.System.Core.SR.GetString$0("NoMethodOnType", [p0, p1]);
};
$asm08.System.Core.Strings.NoMethodOnTypeMatchingArguments = function (p0, p1) {
	return $asm08.System.Core.SR.GetString$0("NoMethodOnTypeMatchingArguments", [p0, p1]);
};
$asm08.System.Core.Strings.get_EmptyEnumerable = function () {
	return $asm08.System.Core.SR.GetString$2("EmptyEnumerable");
};
$asm08.System.Core.Strings.UserDefinedOperatorMustBeStatic = function (p0) {
	return $asm08.System.Core.SR.GetString$0("UserDefinedOperatorMustBeStatic", [p0]);
};
$asm08.System.Core.Strings.UserDefinedOperatorMustNotBeVoid = function (p0) {
	return $asm08.System.Core.SR.GetString$0("UserDefinedOperatorMustNotBeVoid", [p0]);
};
$asm08.System.Core.Strings.CoercionOperatorNotDefined = function (p0, p1) {
	return $asm08.System.Core.SR.GetString$0("CoercionOperatorNotDefined", [p0, p1]);
};
$asm08.System.Core.Strings.UnaryOperatorNotDefined = function (p0, p1) {
	return $asm08.System.Core.SR.GetString$0("UnaryOperatorNotDefined", [p0, p1]);
};
$asm08.System.Core.Strings.BinaryOperatorNotDefined = function (p0, p1, p2) {
	return $asm08.System.Core.SR.GetString$0("BinaryOperatorNotDefined", [p0, p1, p2]);
};
$asm08.System.Core.Strings.OperandTypesDoNotMatchParameters = function (p0, p1) {
	return $asm08.System.Core.SR.GetString$0("OperandTypesDoNotMatchParameters", [p0, p1]);
};
$asm08.System.Core.Strings.get_ArgumentMustBeArray = function () {
	return $asm08.System.Core.SR.GetString$2("ArgumentMustBeArray");
};
$asm08.System.Core.Strings.get_ArgumentMustBeBoolean = function () {
	return $asm08.System.Core.SR.GetString$2("ArgumentMustBeBoolean");
};
$asm08.System.Core.Strings.get_ArgumentMustBeFieldInfoOrPropertInfo = function () {
	return $asm08.System.Core.SR.GetString$2("ArgumentMustBeFieldInfoOrPropertInfo");
};
$asm08.System.Core.Strings.get_ArgumentMustBeFieldInfoOrPropertInfoOrMethod = function () {
	return $asm08.System.Core.SR.GetString$2("ArgumentMustBeFieldInfoOrPropertInfoOrMethod");
};
$asm08.System.Core.Strings.get_ArgumentMustBeInstanceMember = function () {
	return $asm08.System.Core.SR.GetString$2("ArgumentMustBeInstanceMember");
};
$asm08.System.Core.Strings.get_ArgumentMustBeInteger = function () {
	return $asm08.System.Core.SR.GetString$2("ArgumentMustBeInteger");
};
$asm08.System.Core.Strings.get_ArgumentMustBeArrayIndexType = function () {
	return $asm08.System.Core.SR.GetString$2("ArgumentMustBeArrayIndexType");
};
$asm08.System.Core.Strings.get_ArgumentMustBeSingleDimensionalArrayType = function () {
	return $asm08.System.Core.SR.GetString$2("ArgumentMustBeSingleDimensionalArrayType");
};
$asm08.System.Core.Strings.get_ArgumentTypesMustMatch = function () {
	return $asm08.System.Core.SR.GetString$2("ArgumentTypesMustMatch");
};
$asm08.System.Core.Strings.CannotAutoInitializeValueTypeElementThroughProperty = function (p0) {
	return $asm08.System.Core.SR.GetString$0("CannotAutoInitializeValueTypeElementThroughProperty", [p0]);
};
$asm08.System.Core.Strings.CannotAutoInitializeValueTypeMemberThroughProperty = function (p0) {
	return $asm08.System.Core.SR.GetString$0("CannotAutoInitializeValueTypeMemberThroughProperty", [p0]);
};
$asm08.System.Core.Strings.IncorrectTypeForTypeAs = function (p0) {
	return $asm08.System.Core.SR.GetString$0("IncorrectTypeForTypeAs", [p0]);
};
$asm08.System.Core.Strings.get_CoalesceUsedOnNonNullType = function () {
	return $asm08.System.Core.SR.GetString$2("CoalesceUsedOnNonNullType");
};
$asm08.System.Core.Strings.ExpressionTypeCannotInitializeArrayType = function (p0, p1) {
	return $asm08.System.Core.SR.GetString$0("ExpressionTypeCannotInitializeArrayType", [p0, p1]);
};
$asm08.System.Core.Strings.ExpressionTypeDoesNotMatchConstructorParameter = function (p0, p1) {
	return $asm08.System.Core.SR.GetString$0("ExpressionTypeDoesNotMatchConstructorParameter", [p0, p1]);
};
$asm08.System.Core.Strings.ArgumentTypeDoesNotMatchMember = function (p0, p1) {
	return $asm08.System.Core.SR.GetString$0("ArgumentTypeDoesNotMatchMember", [p0, p1]);
};
$asm08.System.Core.Strings.ArgumentMemberNotDeclOnType = function (p0, p1) {
	return $asm08.System.Core.SR.GetString$0("ArgumentMemberNotDeclOnType", [p0, p1]);
};
$asm08.System.Core.Strings.ExpressionTypeDoesNotMatchMethodParameter = function (p0, p1, p2) {
	return $asm08.System.Core.SR.GetString$0("ExpressionTypeDoesNotMatchMethodParameter", [p0, p1, p2]);
};
$asm08.System.Core.Strings.ExpressionTypeDoesNotMatchParameter = function (p0, p1) {
	return $asm08.System.Core.SR.GetString$0("ExpressionTypeDoesNotMatchParameter", [p0, p1]);
};
$asm08.System.Core.Strings.ExpressionTypeDoesNotMatchReturn = function (p0, p1) {
	return $asm08.System.Core.SR.GetString$0("ExpressionTypeDoesNotMatchReturn", [p0, p1]);
};
$asm08.System.Core.Strings.ExpressionTypeNotInvocable = function (p0) {
	return $asm08.System.Core.SR.GetString$0("ExpressionTypeNotInvocable", [p0]);
};
$asm08.System.Core.Strings.FieldNotDefinedForType = function (p0, p1) {
	return $asm08.System.Core.SR.GetString$0("FieldNotDefinedForType", [p0, p1]);
};
$asm08.System.Core.Strings.get_IncorrectNumberOfIndexes = function () {
	return $asm08.System.Core.SR.GetString$2("IncorrectNumberOfIndexes");
};
$asm08.System.Core.Strings.get_IncorrectNumberOfLambdaArguments = function () {
	return $asm08.System.Core.SR.GetString$2("IncorrectNumberOfLambdaArguments");
};
$asm08.System.Core.Strings.get_IncorrectNumberOfLambdaDeclarationParameters = function () {
	return $asm08.System.Core.SR.GetString$2("IncorrectNumberOfLambdaDeclarationParameters");
};
$asm08.System.Core.Strings.IncorrectNumberOfMethodCallArguments = function (p0) {
	return $asm08.System.Core.SR.GetString$0("IncorrectNumberOfMethodCallArguments", [p0]);
};
$asm08.System.Core.Strings.get_IncorrectNumberOfConstructorArguments = function () {
	return $asm08.System.Core.SR.GetString$2("IncorrectNumberOfConstructorArguments");
};
$asm08.System.Core.Strings.get_IncorrectNumberOfMembersForGivenConstructor = function () {
	return $asm08.System.Core.SR.GetString$2("IncorrectNumberOfMembersForGivenConstructor");
};
$asm08.System.Core.Strings.get_IncorrectNumberOfArgumentsForMembers = function () {
	return $asm08.System.Core.SR.GetString$2("IncorrectNumberOfArgumentsForMembers");
};
$asm08.System.Core.Strings.get_LambdaParameterNotInScope = function () {
	return $asm08.System.Core.SR.GetString$2("LambdaParameterNotInScope");
};
$asm08.System.Core.Strings.get_LambdaTypeMustBeDerivedFromSystemDelegate = function () {
	return $asm08.System.Core.SR.GetString$2("LambdaTypeMustBeDerivedFromSystemDelegate");
};
$asm08.System.Core.Strings.MemberNotFieldOrProperty = function (p0) {
	return $asm08.System.Core.SR.GetString$0("MemberNotFieldOrProperty", [p0]);
};
$asm08.System.Core.Strings.MethodContainsGenericParameters = function (p0) {
	return $asm08.System.Core.SR.GetString$0("MethodContainsGenericParameters", [p0]);
};
$asm08.System.Core.Strings.MethodIsGeneric = function (p0) {
	return $asm08.System.Core.SR.GetString$0("MethodIsGeneric", [p0]);
};
$asm08.System.Core.Strings.MethodNotPropertyAccessor = function (p0, p1) {
	return $asm08.System.Core.SR.GetString$0("MethodNotPropertyAccessor", [p0, p1]);
};
$asm08.System.Core.Strings.PropertyDoesNotHaveGetter = function (p0) {
	return $asm08.System.Core.SR.GetString$0("PropertyDoesNotHaveGetter", [p0]);
};
$asm08.System.Core.Strings.PropertyDoesNotHaveSetter = function (p0) {
	return $asm08.System.Core.SR.GetString$0("PropertyDoesNotHaveSetter", [p0]);
};
$asm08.System.Core.Strings.NotAMemberOfType = function (p0, p1) {
	return $asm08.System.Core.SR.GetString$0("NotAMemberOfType", [p0, p1]);
};
$asm08.System.Core.Strings.OperatorNotImplementedForType = function (p0, p1) {
	return $asm08.System.Core.SR.GetString$0("OperatorNotImplementedForType", [p0, p1]);
};
$asm08.System.Core.Strings.ParameterExpressionNotValidAsDelegate = function (p0, p1) {
	return $asm08.System.Core.SR.GetString$0("ParameterExpressionNotValidAsDelegate", [p0, p1]);
};
$asm08.System.Core.Strings.PropertyNotDefinedForType = function (p0, p1) {
	return $asm08.System.Core.SR.GetString$0("PropertyNotDefinedForType", [p0, p1]);
};
$asm08.System.Core.Strings.MethodNotDefinedForType = function (p0, p1) {
	return $asm08.System.Core.SR.GetString$0("MethodNotDefinedForType", [p0, p1]);
};
$asm08.System.Core.Strings.TypeContainsGenericParameters = function (p0) {
	return $asm08.System.Core.SR.GetString$0("TypeContainsGenericParameters", [p0]);
};
$asm08.System.Core.Strings.TypeIsGeneric = function (p0) {
	return $asm08.System.Core.SR.GetString$0("TypeIsGeneric", [p0]);
};
$asm08.System.Core.Strings.TypeMissingDefaultConstructor = function (p0) {
	return $asm08.System.Core.SR.GetString$0("TypeMissingDefaultConstructor", [p0]);
};
$asm08.System.Core.Strings.get_ListInitializerWithZeroMembers = function () {
	return $asm08.System.Core.SR.GetString$2("ListInitializerWithZeroMembers");
};
$asm08.System.Core.Strings.get_ElementInitializerMethodNotAdd = function () {
	return $asm08.System.Core.SR.GetString$2("ElementInitializerMethodNotAdd");
};
$asm08.System.Core.Strings.ElementInitializerMethodNoRefOutParam = function (p0, p1) {
	return $asm08.System.Core.SR.GetString$0("ElementInitializerMethodNoRefOutParam", [p0, p1]);
};
$asm08.System.Core.Strings.get_ElementInitializerMethodWithZeroArgs = function () {
	return $asm08.System.Core.SR.GetString$2("ElementInitializerMethodWithZeroArgs");
};
$asm08.System.Core.Strings.get_ElementInitializerMethodStatic = function () {
	return $asm08.System.Core.SR.GetString$2("ElementInitializerMethodStatic");
};
$asm08.System.Core.Strings.TypeNotIEnumerable = function (p0) {
	return $asm08.System.Core.SR.GetString$0("TypeNotIEnumerable", [p0]);
};
$asm08.System.Core.Strings.TypeParameterIsNotDelegate = function (p0) {
	return $asm08.System.Core.SR.GetString$0("TypeParameterIsNotDelegate", [p0]);
};
$asm08.System.Core.Strings.get_UnexpectedCoalesceOperator = function () {
	return $asm08.System.Core.SR.GetString$2("UnexpectedCoalesceOperator");
};
$asm08.System.Core.Strings.InvalidCast = function (p0, p1) {
	return $asm08.System.Core.SR.GetString$0("InvalidCast", [p0, p1]);
};
$asm08.System.Core.Strings.UnhandledBinary = function (p0) {
	return $asm08.System.Core.SR.GetString$0("UnhandledBinary", [p0]);
};
$asm08.System.Core.Strings.get_UnhandledBinding = function () {
	return $asm08.System.Core.SR.GetString$2("UnhandledBinding");
};
$asm08.System.Core.Strings.UnhandledBindingType = function (p0) {
	return $asm08.System.Core.SR.GetString$0("UnhandledBindingType", [p0]);
};
$asm08.System.Core.Strings.UnhandledConvert = function (p0) {
	return $asm08.System.Core.SR.GetString$0("UnhandledConvert", [p0]);
};
$asm08.System.Core.Strings.UnhandledExpressionType = function (p0) {
	return $asm08.System.Core.SR.GetString$0("UnhandledExpressionType", [p0]);
};
$asm08.System.Core.Strings.UnhandledMemberAccess = function (p0) {
	return $asm08.System.Core.SR.GetString$0("UnhandledMemberAccess", [p0]);
};
$asm08.System.Core.Strings.UnhandledUnary = function (p0) {
	return $asm08.System.Core.SR.GetString$0("UnhandledUnary", [p0]);
};
$asm08.System.Core.Strings.get_UnknownBindingType = function () {
	return $asm08.System.Core.SR.GetString$2("UnknownBindingType");
};
$asm08.System.Core.Strings.LogicalOperatorMustHaveConsistentTypes = function (p0, p1) {
	return $asm08.System.Core.SR.GetString$0("LogicalOperatorMustHaveConsistentTypes", [p0, p1]);
};
$asm08.System.Core.Strings.LogicalOperatorMustHaveBooleanOperators = function (p0, p1) {
	return $asm08.System.Core.SR.GetString$0("LogicalOperatorMustHaveBooleanOperators", [p0, p1]);
};
$asm08.System.Core.Strings.MethodDoesNotExistOnType = function (p0, p1) {
	return $asm08.System.Core.SR.GetString$0("MethodDoesNotExistOnType", [p0, p1]);
};
$asm08.System.Core.Strings.MethodWithArgsDoesNotExistOnType = function (p0, p1) {
	return $asm08.System.Core.SR.GetString$0("MethodWithArgsDoesNotExistOnType", [p0, p1]);
};
$asm08.System.Core.Strings.MethodWithMoreThanOneMatch = function (p0, p1) {
	return $asm08.System.Core.SR.GetString$0("MethodWithMoreThanOneMatch", [p0, p1]);
};
$asm08.System.Core.Strings.get_IncorrectNumberOfTypeArgsForFunc = function () {
	return $asm08.System.Core.SR.GetString$2("IncorrectNumberOfTypeArgsForFunc");
};
$asm08.System.Core.Strings.get_IncorrectNumberOfTypeArgsForAction = function () {
	return $asm08.System.Core.SR.GetString$2("IncorrectNumberOfTypeArgsForAction");
};
$asm08.System.Core.Strings.get_ExpressionMayNotContainByrefParameters = function () {
	return $asm08.System.Core.SR.GetString$2("ExpressionMayNotContainByrefParameters");
};
$asm08.System.Core.Strings.get_ArrayElementTypeCannotBeVoid = function () {
	return $asm08.System.Core.SR.GetString$2("ArrayElementTypeCannotBeVoid");
};
$asm08.System.Core.Strings.get_Argument_AdjustmentRulesNoNulls = function () {
	return $asm08.System.Core.SR.GetString$2("Argument_AdjustmentRulesNoNulls");
};
$asm08.System.Core.Strings.get_Argument_AdjustmentRulesOutOfOrder = function () {
	return $asm08.System.Core.SR.GetString$2("Argument_AdjustmentRulesOutOfOrder");
};
$asm08.System.Core.Strings.get_Argument_AdjustmentRulesAmbiguousOverlap = function () {
	return $asm08.System.Core.SR.GetString$2("Argument_AdjustmentRulesAmbiguousOverlap");
};
$asm08.System.Core.Strings.get_Argument_AdjustmentRulesrDaylightSavingTimeOverlap = function () {
	return $asm08.System.Core.SR.GetString$2("Argument_AdjustmentRulesrDaylightSavingTimeOverlap");
};
$asm08.System.Core.Strings.get_Argument_AdjustmentRulesrDaylightSavingTimeOverlapNonRuleRange = function () {
	return $asm08.System.Core.SR.GetString$2("Argument_AdjustmentRulesrDaylightSavingTimeOverlapNonRuleRange");
};
$asm08.System.Core.Strings.get_Argument_AdjustmentRulesInvalidOverlap = function () {
	return $asm08.System.Core.SR.GetString$2("Argument_AdjustmentRulesInvalidOverlap");
};
$asm08.System.Core.Strings.get_Argument_ConvertMismatch = function () {
	return $asm08.System.Core.SR.GetString$2("Argument_ConvertMismatch");
};
$asm08.System.Core.Strings.get_Argument_DateTimeHasTimeOfDay = function () {
	return $asm08.System.Core.SR.GetString$2("Argument_DateTimeHasTimeOfDay");
};
$asm08.System.Core.Strings.get_Argument_DateTimeIsInvalid = function () {
	return $asm08.System.Core.SR.GetString$2("Argument_DateTimeIsInvalid");
};
$asm08.System.Core.Strings.get_Argument_DateTimeIsNotAmbiguous = function () {
	return $asm08.System.Core.SR.GetString$2("Argument_DateTimeIsNotAmbiguous");
};
$asm08.System.Core.Strings.get_Argument_DateTimeOffsetIsNotAmbiguous = function () {
	return $asm08.System.Core.SR.GetString$2("Argument_DateTimeOffsetIsNotAmbiguous");
};
$asm08.System.Core.Strings.get_Argument_DateTimeKindMustBeUnspecified = function () {
	return $asm08.System.Core.SR.GetString$2("Argument_DateTimeKindMustBeUnspecified");
};
$asm08.System.Core.Strings.get_Argument_DateTimeHasTicks = function () {
	return $asm08.System.Core.SR.GetString$2("Argument_DateTimeHasTicks");
};
$asm08.System.Core.Strings.Argument_InvalidId = function (p0) {
	return $asm08.System.Core.SR.GetString$0("Argument_InvalidId", [p0]);
};
$asm08.System.Core.Strings.Argument_InvalidSerializedString = function (p0) {
	return $asm08.System.Core.SR.GetString$0("Argument_InvalidSerializedString", [p0]);
};
$asm08.System.Core.Strings.get_Argument_InvalidREG_TZI_FORMAT = function () {
	return $asm08.System.Core.SR.GetString$2("Argument_InvalidREG_TZI_FORMAT");
};
$asm08.System.Core.Strings.get_Argument_OutOfOrderDateTimes = function () {
	return $asm08.System.Core.SR.GetString$2("Argument_OutOfOrderDateTimes");
};
$asm08.System.Core.Strings.get_Argument_TimeSpanHasSeconds = function () {
	return $asm08.System.Core.SR.GetString$2("Argument_TimeSpanHasSeconds");
};
$asm08.System.Core.Strings.get_Argument_TimeZoneInfoBadTZif = function () {
	return $asm08.System.Core.SR.GetString$2("Argument_TimeZoneInfoBadTZif");
};
$asm08.System.Core.Strings.get_Argument_TimeZoneInfoInvalidTZif = function () {
	return $asm08.System.Core.SR.GetString$2("Argument_TimeZoneInfoInvalidTZif");
};
$asm08.System.Core.Strings.get_Argument_TransitionTimesAreIdentical = function () {
	return $asm08.System.Core.SR.GetString$2("Argument_TransitionTimesAreIdentical");
};
$asm08.System.Core.Strings.get_ArgumentOutOfRange_DayParam = function () {
	return $asm08.System.Core.SR.GetString$2("ArgumentOutOfRange_DayParam");
};
$asm08.System.Core.Strings.get_ArgumentOutOfRange_DayOfWeek = function () {
	return $asm08.System.Core.SR.GetString$2("ArgumentOutOfRange_DayOfWeek");
};
$asm08.System.Core.Strings.get_ArgumentOutOfRange_MonthParam = function () {
	return $asm08.System.Core.SR.GetString$2("ArgumentOutOfRange_MonthParam");
};
$asm08.System.Core.Strings.get_ArgumentOutOfRange_UtcOffset = function () {
	return $asm08.System.Core.SR.GetString$2("ArgumentOutOfRange_UtcOffset");
};
$asm08.System.Core.Strings.get_ArgumentOutOfRange_UtcOffsetAndDaylightDelta = function () {
	return $asm08.System.Core.SR.GetString$2("ArgumentOutOfRange_UtcOffsetAndDaylightDelta");
};
$asm08.System.Core.Strings.get_ArgumentOutOfRange_Week = function () {
	return $asm08.System.Core.SR.GetString$2("ArgumentOutOfRange_Week");
};
$asm08.System.Core.Strings.InvalidTimeZone_InvalidRegistryData = function (p0) {
	return $asm08.System.Core.SR.GetString$0("InvalidTimeZone_InvalidRegistryData", [p0]);
};
$asm08.System.Core.Strings.get_InvalidTimeZone_InvalidWin32APIData = function () {
	return $asm08.System.Core.SR.GetString$2("InvalidTimeZone_InvalidWin32APIData");
};
$asm08.System.Core.Strings.Security_CannotReadRegistryData = function (p0) {
	return $asm08.System.Core.SR.GetString$0("Security_CannotReadRegistryData", [p0]);
};
$asm08.System.Core.Strings.Serialization_CorruptField = function (p0) {
	return $asm08.System.Core.SR.GetString$0("Serialization_CorruptField", [p0]);
};
$asm08.System.Core.Strings.Serialization_InvalidEscapeSequence = function (p0) {
	return $asm08.System.Core.SR.GetString$0("Serialization_InvalidEscapeSequence", [p0]);
};
$asm08.System.Core.Strings.TimeZoneNotFound_MissingRegistryData = function (p0) {
	return $asm08.System.Core.SR.GetString$0("TimeZoneNotFound_MissingRegistryData", [p0]);
};
$asm08.System.Core.Strings.get_ArgumentOutOfRange_DateTimeBadTicks = function () {
	return $asm08.System.Core.SR.GetString$2("ArgumentOutOfRange_DateTimeBadTicks");
};
$asm08.System.Core.Strings.get_MethodPreconditionViolated = function () {
	return $asm08.System.Core.SR.GetString$2("MethodPreconditionViolated");
};
$asm08.System.Core.Strings.get_InvalidArgumentValue = function () {
	return $asm08.System.Core.SR.GetString$2("InvalidArgumentValue");
};
$asm08.System.Core.Strings.get_NonEmptyCollectionRequired = function () {
	return $asm08.System.Core.SR.GetString$2("NonEmptyCollectionRequired");
};
$asm08.System.Core.Strings.get_OnlyStaticFieldsHaveNullInstance = function () {
	return $asm08.System.Core.SR.GetString$2("OnlyStaticFieldsHaveNullInstance");
};
$asm08.System.Core.Strings.get_OnlyStaticPropertiesHaveNullInstance = function () {
	return $asm08.System.Core.SR.GetString$2("OnlyStaticPropertiesHaveNullInstance");
};
$asm08.System.Core.Strings.get_ExpressionMustBeReadable = function () {
	return $asm08.System.Core.SR.GetString$2("ExpressionMustBeReadable");
};
$asm08.System.Core.Strings.get_ExpressionMustBeWriteable = function () {
	return $asm08.System.Core.SR.GetString$2("ExpressionMustBeWriteable");
};
$asm08.System.Core.Strings.get_AllTestValuesMustHaveSameType = function () {
	return $asm08.System.Core.SR.GetString$2("AllTestValuesMustHaveSameType");
};
$asm08.System.Core.Strings.get_AllCaseBodiesMustHaveSameType = function () {
	return $asm08.System.Core.SR.GetString$2("AllCaseBodiesMustHaveSameType");
};
$asm08.System.Core.Strings.get_ArrayTypeMustBeArray = function () {
	return $asm08.System.Core.SR.GetString$2("ArrayTypeMustBeArray");
};
$asm08.System.Core.Strings.get_CountCannotBeNegative = function () {
	return $asm08.System.Core.SR.GetString$2("CountCannotBeNegative");
};
$asm08.System.Core.Strings.get_TypeDoesNotHaveConstructorForTheSignature = function () {
	return $asm08.System.Core.SR.GetString$2("TypeDoesNotHaveConstructorForTheSignature");
};
$asm08.System.Core.Strings.get_MethodBuilderDoesNotHaveTypeBuilder = function () {
	return $asm08.System.Core.SR.GetString$2("MethodBuilderDoesNotHaveTypeBuilder");
};
$asm08.System.Core.Strings.get_ArgumentMustNotHaveValueType = function () {
	return $asm08.System.Core.SR.GetString$2("ArgumentMustNotHaveValueType");
};
$asm08.System.Core.Strings.get_QuotedExpressionMustBeLambda = function () {
	return $asm08.System.Core.SR.GetString$2("QuotedExpressionMustBeLambda");
};
$asm08.System.Core.Strings.get_InvalidUnboxType = function () {
	return $asm08.System.Core.SR.GetString$2("InvalidUnboxType");
};
$asm08.System.Core.Strings.get_DefaultBodyMustBeSupplied = function () {
	return $asm08.System.Core.SR.GetString$2("DefaultBodyMustBeSupplied");
};
$asm08.System.Core.Strings.get_BoundsCannotBeLessThanOne = function () {
	return $asm08.System.Core.SR.GetString$2("BoundsCannotBeLessThanOne");
};
$asm08.System.Core.Strings.get_LabelTypeMustBeVoid = function () {
	return $asm08.System.Core.SR.GetString$2("LabelTypeMustBeVoid");
};
$asm08.System.Core.Strings.get_TypeMustNotBeByRef = function () {
	return $asm08.System.Core.SR.GetString$2("TypeMustNotBeByRef");
};
$asm08.System.Core.Strings.get_AccessorsCannotHaveByRefArgs = function () {
	return $asm08.System.Core.SR.GetString$2("AccessorsCannotHaveByRefArgs");
};
$asm08.System.Core.Strings.get_OnlyStaticMethodsHaveNullInstance = function () {
	return $asm08.System.Core.SR.GetString$2("OnlyStaticMethodsHaveNullInstance");
};
$asm08.System.Core.Strings.get_AccessorsCannotHaveVarArgs = function () {
	return $asm08.System.Core.SR.GetString$2("AccessorsCannotHaveVarArgs");
};
$asm08.System.Core.Strings.get_IndexesOfSetGetMustMatch = function () {
	return $asm08.System.Core.SR.GetString$2("IndexesOfSetGetMustMatch");
};
$asm08.System.Core.Strings.get_BothAccessorsMustBeStatic = function () {
	return $asm08.System.Core.SR.GetString$2("BothAccessorsMustBeStatic");
};
$asm08.System.Core.Strings.get_PropertyTyepMustMatchSetter = function () {
	return $asm08.System.Core.SR.GetString$2("PropertyTyepMustMatchSetter");
};
$asm08.System.Core.Strings.get_SetterMustBeVoid = function () {
	return $asm08.System.Core.SR.GetString$2("SetterMustBeVoid");
};
$asm08.System.Core.Strings.get_SetterHasNoParams = function () {
	return $asm08.System.Core.SR.GetString$2("SetterHasNoParams");
};
$asm08.System.Core.Strings.get_PropertyTypeCannotBeVoid = function () {
	return $asm08.System.Core.SR.GetString$2("PropertyTypeCannotBeVoid");
};
$asm08.System.Core.Strings.get_PropertyCannotHaveRefType = function () {
	return $asm08.System.Core.SR.GetString$2("PropertyCannotHaveRefType");
};
$asm08.System.Core.Strings.get_LabelMustBeVoidOrHaveExpression = function () {
	return $asm08.System.Core.SR.GetString$2("LabelMustBeVoidOrHaveExpression");
};
$asm08.System.Core.Strings.get_ReducedNotCompatible = function () {
	return $asm08.System.Core.SR.GetString$2("ReducedNotCompatible");
};
$asm08.System.Core.Strings.get_ArgCntMustBeGreaterThanNameCnt = function () {
	return $asm08.System.Core.SR.GetString$2("ArgCntMustBeGreaterThanNameCnt");
};
$asm08.System.Core.Strings.get_TypeMustBeDerivedFromSystemDelegate = function () {
	return $asm08.System.Core.SR.GetString$2("TypeMustBeDerivedFromSystemDelegate");
};
$asm08.System.Core.Strings.get_ArgumentTypeCannotBeVoid = function () {
	return $asm08.System.Core.SR.GetString$2("ArgumentTypeCannotBeVoid");
};
$asm08.System.Core.Strings.get_ReducibleMustOverrideReduce = function () {
	return $asm08.System.Core.SR.GetString$2("ReducibleMustOverrideReduce");
};
$asm08.System.Core.Strings.get_MustBeReducible = function () {
	return $asm08.System.Core.SR.GetString$2("MustBeReducible");
};
$asm08.System.Core.Strings.get_MustReduceToDifferent = function () {
	return $asm08.System.Core.SR.GetString$2("MustReduceToDifferent");
};
$asm08.System.Core.Strings.VariableMustNotBeByRef = function (p0, p1) {
	return $asm08.System.Core.SR.GetString$0("VariableMustNotBeByRef", [p0, p1]);
};
$asm08.System.Core.Strings.DuplicateVariable = function (p0) {
	return $asm08.System.Core.SR.GetString$0("DuplicateVariable", [p0]);
};
$asm08.System.Core.Strings.get_StartEndMustBeOrdered = function () {
	return $asm08.System.Core.SR.GetString$2("StartEndMustBeOrdered");
};
$asm08.System.Core.Strings.get_FaultCannotHaveCatchOrFinally = function () {
	return $asm08.System.Core.SR.GetString$2("FaultCannotHaveCatchOrFinally");
};
$asm08.System.Core.Strings.get_TryMustHaveCatchFinallyOrFault = function () {
	return $asm08.System.Core.SR.GetString$2("TryMustHaveCatchFinallyOrFault");
};
$asm08.System.Core.Strings.get_BodyOfCatchMustHaveSameTypeAsBodyOfTry = function () {
	return $asm08.System.Core.SR.GetString$2("BodyOfCatchMustHaveSameTypeAsBodyOfTry");
};
$asm08.System.Core.Strings.ExtensionNodeMustOverrideProperty = function (p0) {
	return $asm08.System.Core.SR.GetString$0("ExtensionNodeMustOverrideProperty", [p0]);
};
$asm08.System.Core.Strings.DynamicBinderResultNotAssignable = function (p0, p1, p2) {
	return $asm08.System.Core.SR.GetString$0("DynamicBinderResultNotAssignable", [p0, p1, p2]);
};
$asm08.System.Core.Strings.DynamicObjectResultNotAssignable = function (p0, p1, p2, p3) {
	return $asm08.System.Core.SR.GetString$0("DynamicObjectResultNotAssignable", [p0, p1, p2, p3]);
};
$asm08.System.Core.Strings.DynamicBindingNeedsRestrictions = function (p0, p1) {
	return $asm08.System.Core.SR.GetString$0("DynamicBindingNeedsRestrictions", [p0, p1]);
};
$asm08.System.Core.Strings.BinderNotCompatibleWithCallSite = function (p0, p1, p2) {
	return $asm08.System.Core.SR.GetString$0("BinderNotCompatibleWithCallSite", [p0, p1, p2]);
};
$asm08.System.Core.Strings.ReferenceEqualityNotDefined = function (p0, p1) {
	return $asm08.System.Core.SR.GetString$0("ReferenceEqualityNotDefined", [p0, p1]);
};
$asm08.System.Core.Strings.OverloadOperatorTypeDoesNotMatchConversionType = function (p0, p1) {
	return $asm08.System.Core.SR.GetString$0("OverloadOperatorTypeDoesNotMatchConversionType", [p0, p1]);
};
$asm08.System.Core.Strings.get_ConversionIsNotSupportedForArithmeticTypes = function () {
	return $asm08.System.Core.SR.GetString$2("ConversionIsNotSupportedForArithmeticTypes");
};
$asm08.System.Core.Strings.EqualityMustReturnBoolean = function (p0) {
	return $asm08.System.Core.SR.GetString$0("EqualityMustReturnBoolean", [p0]);
};
$asm08.System.Core.Strings.ExpressionTypeDoesNotMatchAssignment = function (p0, p1) {
	return $asm08.System.Core.SR.GetString$0("ExpressionTypeDoesNotMatchAssignment", [p0, p1]);
};
$asm08.System.Core.Strings.ExpressionTypeDoesNotMatchLabel = function (p0, p1) {
	return $asm08.System.Core.SR.GetString$0("ExpressionTypeDoesNotMatchLabel", [p0, p1]);
};
$asm08.System.Core.Strings.InstanceFieldNotDefinedForType = function (p0, p1) {
	return $asm08.System.Core.SR.GetString$0("InstanceFieldNotDefinedForType", [p0, p1]);
};
$asm08.System.Core.Strings.FieldInfoNotDefinedForType = function (p0, p1, p2) {
	return $asm08.System.Core.SR.GetString$0("FieldInfoNotDefinedForType", [p0, p1, p2]);
};
$asm08.System.Core.Strings.PropertyDoesNotHaveAccessor = function (p0) {
	return $asm08.System.Core.SR.GetString$0("PropertyDoesNotHaveAccessor", [p0]);
};
$asm08.System.Core.Strings.InstancePropertyNotDefinedForType = function (p0, p1) {
	return $asm08.System.Core.SR.GetString$0("InstancePropertyNotDefinedForType", [p0, p1]);
};
$asm08.System.Core.Strings.InstancePropertyWithoutParameterNotDefinedForType = function (p0, p1) {
	return $asm08.System.Core.SR.GetString$0("InstancePropertyWithoutParameterNotDefinedForType", [p0, p1]);
};
$asm08.System.Core.Strings.InstancePropertyWithSpecifiedParametersNotDefinedForType = function (p0, p1, p2) {
	return $asm08.System.Core.SR.GetString$0("InstancePropertyWithSpecifiedParametersNotDefinedForType", [p0, p1, p2]);
};
$asm08.System.Core.Strings.InstanceAndMethodTypeMismatch = function (p0, p1, p2) {
	return $asm08.System.Core.SR.GetString$0("InstanceAndMethodTypeMismatch", [p0, p1, p2]);
};
$asm08.System.Core.Strings.UserDefinedOpMustHaveConsistentTypes = function (p0, p1) {
	return $asm08.System.Core.SR.GetString$0("UserDefinedOpMustHaveConsistentTypes", [p0, p1]);
};
$asm08.System.Core.Strings.UserDefinedOpMustHaveValidReturnType = function (p0, p1) {
	return $asm08.System.Core.SR.GetString$0("UserDefinedOpMustHaveValidReturnType", [p0, p1]);
};
$asm08.System.Core.Strings.GenericMethodWithArgsDoesNotExistOnType = function (p0, p1) {
	return $asm08.System.Core.SR.GetString$0("GenericMethodWithArgsDoesNotExistOnType", [p0, p1]);
};
$asm08.System.Core.Strings.PropertyWithMoreThanOneMatch = function (p0, p1) {
	return $asm08.System.Core.SR.GetString$0("PropertyWithMoreThanOneMatch", [p0, p1]);
};
$asm08.System.Core.Strings.get_ArgumentCannotBeOfTypeVoid = function () {
	return $asm08.System.Core.SR.GetString$2("ArgumentCannotBeOfTypeVoid");
};
$asm08.System.Core.Strings.AmbiguousMatchInExpandoObject = function (p0) {
	return $asm08.System.Core.SR.GetString$0("AmbiguousMatchInExpandoObject", [p0]);
};
$asm08.System.Core.Strings.SameKeyExistsInExpando = function (p0) {
	return $asm08.System.Core.SR.GetString$0("SameKeyExistsInExpando", [p0]);
};
$asm08.System.Core.Strings.KeyDoesNotExistInExpando = function (p0) {
	return $asm08.System.Core.SR.GetString$0("KeyDoesNotExistInExpando", [p0]);
};
$asm08.System.Core.Strings.get_NoOrInvalidRuleProduced = function () {
	return $asm08.System.Core.SR.GetString$2("NoOrInvalidRuleProduced");
};
$asm08.System.Core.Strings.get_FirstArgumentMustBeCallSite = function () {
	return $asm08.System.Core.SR.GetString$2("FirstArgumentMustBeCallSite");
};
$asm08.System.Core.Strings.get_BindingCannotBeNull = function () {
	return $asm08.System.Core.SR.GetString$2("BindingCannotBeNull");
};
$asm08.System.Core.Strings.InvalidOperation = function (p0) {
	return $asm08.System.Core.SR.GetString$0("InvalidOperation", [p0]);
};
$asm08.System.Core.Strings.OutOfRange = function (p0, p1) {
	return $asm08.System.Core.SR.GetString$0("OutOfRange", [p0, p1]);
};
$asm08.System.Core.Strings.get_QueueEmpty = function () {
	return $asm08.System.Core.SR.GetString$2("QueueEmpty");
};
$asm08.System.Core.Strings.LabelTargetAlreadyDefined = function (p0) {
	return $asm08.System.Core.SR.GetString$0("LabelTargetAlreadyDefined", [p0]);
};
$asm08.System.Core.Strings.LabelTargetUndefined = function (p0) {
	return $asm08.System.Core.SR.GetString$0("LabelTargetUndefined", [p0]);
};
$asm08.System.Core.Strings.get_ControlCannotLeaveFinally = function () {
	return $asm08.System.Core.SR.GetString$2("ControlCannotLeaveFinally");
};
$asm08.System.Core.Strings.get_ControlCannotLeaveFilterTest = function () {
	return $asm08.System.Core.SR.GetString$2("ControlCannotLeaveFilterTest");
};
$asm08.System.Core.Strings.AmbiguousJump = function (p0) {
	return $asm08.System.Core.SR.GetString$0("AmbiguousJump", [p0]);
};
$asm08.System.Core.Strings.get_ControlCannotEnterTry = function () {
	return $asm08.System.Core.SR.GetString$2("ControlCannotEnterTry");
};
$asm08.System.Core.Strings.get_ControlCannotEnterExpression = function () {
	return $asm08.System.Core.SR.GetString$2("ControlCannotEnterExpression");
};
$asm08.System.Core.Strings.NonLocalJumpWithValue = function (p0) {
	return $asm08.System.Core.SR.GetString$0("NonLocalJumpWithValue", [p0]);
};
$asm08.System.Core.Strings.get_ExtensionNotReduced = function () {
	return $asm08.System.Core.SR.GetString$2("ExtensionNotReduced");
};
$asm08.System.Core.Strings.CannotCompileConstant = function (p0) {
	return $asm08.System.Core.SR.GetString$0("CannotCompileConstant", [p0]);
};
$asm08.System.Core.Strings.get_CannotCompileDynamic = function () {
	return $asm08.System.Core.SR.GetString$2("CannotCompileDynamic");
};
$asm08.System.Core.Strings.InvalidLvalue = function (p0) {
	return $asm08.System.Core.SR.GetString$0("InvalidLvalue", [p0]);
};
$asm08.System.Core.Strings.InvalidMemberType = function (p0) {
	return $asm08.System.Core.SR.GetString$0("InvalidMemberType", [p0]);
};
$asm08.System.Core.Strings.UnknownLiftType = function (p0) {
	return $asm08.System.Core.SR.GetString$0("UnknownLiftType", [p0]);
};
$asm08.System.Core.Strings.get_InvalidOutputDir = function () {
	return $asm08.System.Core.SR.GetString$2("InvalidOutputDir");
};
$asm08.System.Core.Strings.get_InvalidAsmNameOrExtension = function () {
	return $asm08.System.Core.SR.GetString$2("InvalidAsmNameOrExtension");
};
$asm08.System.Core.Strings.get_CollectionReadOnly = function () {
	return $asm08.System.Core.SR.GetString$2("CollectionReadOnly");
};
$asm08.System.Core.Strings.IllegalNewGenericParams = function (p0) {
	return $asm08.System.Core.SR.GetString$0("IllegalNewGenericParams", [p0]);
};
$asm08.System.Core.Strings.UndefinedVariable = function (p0, p1, p2) {
	return $asm08.System.Core.SR.GetString$0("UndefinedVariable", [p0, p1, p2]);
};
$asm08.System.Core.Strings.CannotCloseOverByRef = function (p0, p1) {
	return $asm08.System.Core.SR.GetString$0("CannotCloseOverByRef", [p0, p1]);
};
$asm08.System.Core.Strings.UnexpectedVarArgsCall = function (p0) {
	return $asm08.System.Core.SR.GetString$0("UnexpectedVarArgsCall", [p0]);
};
$asm08.System.Core.Strings.get_RethrowRequiresCatch = function () {
	return $asm08.System.Core.SR.GetString$2("RethrowRequiresCatch");
};
$asm08.System.Core.Strings.get_TryNotAllowedInFilter = function () {
	return $asm08.System.Core.SR.GetString$2("TryNotAllowedInFilter");
};
$asm08.System.Core.Strings.MustRewriteToSameNode = function (p0, p1, p2) {
	return $asm08.System.Core.SR.GetString$0("MustRewriteToSameNode", [p0, p1, p2]);
};
$asm08.System.Core.Strings.MustRewriteChildToSameType = function (p0, p1, p2) {
	return $asm08.System.Core.SR.GetString$0("MustRewriteChildToSameType", [p0, p1, p2]);
};
$asm08.System.Core.Strings.MustRewriteWithoutMethod = function (p0, p1) {
	return $asm08.System.Core.SR.GetString$0("MustRewriteWithoutMethod", [p0, p1]);
};
$asm08.System.Core.Strings.InvalidNullValue = function (p0) {
	return $asm08.System.Core.SR.GetString$0("InvalidNullValue", [p0]);
};
$asm08.System.Core.Strings.InvalidObjectType = function (p0, p1) {
	return $asm08.System.Core.SR.GetString$0("InvalidObjectType", [p0, p1]);
};
$asm08.System.Core.Strings.TryNotSupportedForMethodsWithRefArgs = function (p0) {
	return $asm08.System.Core.SR.GetString$0("TryNotSupportedForMethodsWithRefArgs", [p0]);
};
$asm08.System.Core.Strings.TryNotSupportedForValueTypeInstances = function (p0) {
	return $asm08.System.Core.SR.GetString$0("TryNotSupportedForValueTypeInstances", [p0]);
};
$asm08.System.Core.Strings.get_CollectionModifiedWhileEnumerating = function () {
	return $asm08.System.Core.SR.GetString$2("CollectionModifiedWhileEnumerating");
};
$asm08.System.Core.Strings.get_EnumerationIsDone = function () {
	return $asm08.System.Core.SR.GetString$2("EnumerationIsDone");
};
$asm08.System.Core.Strings.get_HomogenousAppDomainRequired = function () {
	return $asm08.System.Core.SR.GetString$2("HomogenousAppDomainRequired");
};
$asm08.System.Core.Strings.TestValueTypeDoesNotMatchComparisonMethodParameter = function (p0, p1) {
	return $asm08.System.Core.SR.GetString$0("TestValueTypeDoesNotMatchComparisonMethodParameter", [p0, p1]);
};
$asm08.System.Core.Strings.SwitchValueTypeDoesNotMatchComparisonMethodParameter = function (p0, p1) {
	return $asm08.System.Core.SR.GetString$0("SwitchValueTypeDoesNotMatchComparisonMethodParameter", [p0, p1]);
};
$asm08.System.Core.Strings.InvalidMetaObjectCreated = function (p0) {
	return $asm08.System.Core.SR.GetString$0("InvalidMetaObjectCreated", [p0]);
};
$asm08.System.Core.Strings.get_PdbGeneratorNeedsExpressionCompiler = function () {
	return $asm08.System.Core.SR.GetString$2("PdbGeneratorNeedsExpressionCompiler");
};
$asm08.System.Core.Strings.get_ArgumentOutOfRange_NeedNonNegNum = function () {
	return $asm08.System.Core.SR.GetString$2("ArgumentOutOfRange_NeedNonNegNum");
};
$asm08.System.Core.Strings.get_Arg_ArrayPlusOffTooSmall = function () {
	return $asm08.System.Core.SR.GetString$2("Arg_ArrayPlusOffTooSmall");
};
$asm08.System.Core.Strings.get_Arg_HSCapacityOverflow = function () {
	return $asm08.System.Core.SR.GetString$2("Arg_HSCapacityOverflow");
};
$asm08.System.Core.Strings.get_InvalidOperation_EnumFailedVersion = function () {
	return $asm08.System.Core.SR.GetString$2("InvalidOperation_EnumFailedVersion");
};
$asm08.System.Core.Strings.get_InvalidOperation_EnumOpCantHappen = function () {
	return $asm08.System.Core.SR.GetString$2("InvalidOperation_EnumOpCantHappen");
};
$asm08.System.Core.Strings.get_Lazy_Value_RecursiveCallsToValue = function () {
	return $asm08.System.Core.SR.GetString$2("Lazy_Value_RecursiveCallsToValue");
};
$asm08.System.Core.Strings.get_Lazy_CreateValue_NoParameterlessCtorForT = function () {
	return $asm08.System.Core.SR.GetString$2("Lazy_CreateValue_NoParameterlessCtorForT");
};
$asm08.System.Core.Strings.get_Lazy_ctor_ModeInvalid = function () {
	return $asm08.System.Core.SR.GetString$2("Lazy_ctor_ModeInvalid");
};
$asm08.System.Core.Strings.get_Lazy_ToString_ValueNotCreated = function () {
	return $asm08.System.Core.SR.GetString$2("Lazy_ToString_ValueNotCreated");
};
JSIL.MakeProperty($asm08.System.Core.Strings, "MoreThanOneElement", 
	$asm08.System.Core.Strings.get_MoreThanOneElement, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "MoreThanOneMatch", 
	$asm08.System.Core.Strings.get_MoreThanOneMatch, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "NoElements", 
	$asm08.System.Core.Strings.get_NoElements, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "NoMatch", 
	$asm08.System.Core.Strings.get_NoMatch, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "EmptyEnumerable", 
	$asm08.System.Core.Strings.get_EmptyEnumerable, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "ArgumentMustBeArray", 
	$asm08.System.Core.Strings.get_ArgumentMustBeArray, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "ArgumentMustBeBoolean", 
	$asm08.System.Core.Strings.get_ArgumentMustBeBoolean, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "ArgumentMustBeFieldInfoOrPropertInfo", 
	$asm08.System.Core.Strings.get_ArgumentMustBeFieldInfoOrPropertInfo, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "ArgumentMustBeFieldInfoOrPropertInfoOrMethod", 
	$asm08.System.Core.Strings.get_ArgumentMustBeFieldInfoOrPropertInfoOrMethod, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "ArgumentMustBeInstanceMember", 
	$asm08.System.Core.Strings.get_ArgumentMustBeInstanceMember, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "ArgumentMustBeInteger", 
	$asm08.System.Core.Strings.get_ArgumentMustBeInteger, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "ArgumentMustBeArrayIndexType", 
	$asm08.System.Core.Strings.get_ArgumentMustBeArrayIndexType, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "ArgumentMustBeSingleDimensionalArrayType", 
	$asm08.System.Core.Strings.get_ArgumentMustBeSingleDimensionalArrayType, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "ArgumentTypesMustMatch", 
	$asm08.System.Core.Strings.get_ArgumentTypesMustMatch, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "CoalesceUsedOnNonNullType", 
	$asm08.System.Core.Strings.get_CoalesceUsedOnNonNullType, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "IncorrectNumberOfIndexes", 
	$asm08.System.Core.Strings.get_IncorrectNumberOfIndexes, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "IncorrectNumberOfLambdaArguments", 
	$asm08.System.Core.Strings.get_IncorrectNumberOfLambdaArguments, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "IncorrectNumberOfLambdaDeclarationParameters", 
	$asm08.System.Core.Strings.get_IncorrectNumberOfLambdaDeclarationParameters, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "IncorrectNumberOfConstructorArguments", 
	$asm08.System.Core.Strings.get_IncorrectNumberOfConstructorArguments, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "IncorrectNumberOfMembersForGivenConstructor", 
	$asm08.System.Core.Strings.get_IncorrectNumberOfMembersForGivenConstructor, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "IncorrectNumberOfArgumentsForMembers", 
	$asm08.System.Core.Strings.get_IncorrectNumberOfArgumentsForMembers, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "LambdaParameterNotInScope", 
	$asm08.System.Core.Strings.get_LambdaParameterNotInScope, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "LambdaTypeMustBeDerivedFromSystemDelegate", 
	$asm08.System.Core.Strings.get_LambdaTypeMustBeDerivedFromSystemDelegate, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "ListInitializerWithZeroMembers", 
	$asm08.System.Core.Strings.get_ListInitializerWithZeroMembers, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "ElementInitializerMethodNotAdd", 
	$asm08.System.Core.Strings.get_ElementInitializerMethodNotAdd, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "ElementInitializerMethodWithZeroArgs", 
	$asm08.System.Core.Strings.get_ElementInitializerMethodWithZeroArgs, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "ElementInitializerMethodStatic", 
	$asm08.System.Core.Strings.get_ElementInitializerMethodStatic, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "UnexpectedCoalesceOperator", 
	$asm08.System.Core.Strings.get_UnexpectedCoalesceOperator, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "UnhandledBinding", 
	$asm08.System.Core.Strings.get_UnhandledBinding, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "UnknownBindingType", 
	$asm08.System.Core.Strings.get_UnknownBindingType, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "IncorrectNumberOfTypeArgsForFunc", 
	$asm08.System.Core.Strings.get_IncorrectNumberOfTypeArgsForFunc, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "IncorrectNumberOfTypeArgsForAction", 
	$asm08.System.Core.Strings.get_IncorrectNumberOfTypeArgsForAction, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "ExpressionMayNotContainByrefParameters", 
	$asm08.System.Core.Strings.get_ExpressionMayNotContainByrefParameters, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "ArrayElementTypeCannotBeVoid", 
	$asm08.System.Core.Strings.get_ArrayElementTypeCannotBeVoid, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "Argument_AdjustmentRulesNoNulls", 
	$asm08.System.Core.Strings.get_Argument_AdjustmentRulesNoNulls, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "Argument_AdjustmentRulesOutOfOrder", 
	$asm08.System.Core.Strings.get_Argument_AdjustmentRulesOutOfOrder, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "Argument_AdjustmentRulesAmbiguousOverlap", 
	$asm08.System.Core.Strings.get_Argument_AdjustmentRulesAmbiguousOverlap, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "Argument_AdjustmentRulesrDaylightSavingTimeOverlap", 
	$asm08.System.Core.Strings.get_Argument_AdjustmentRulesrDaylightSavingTimeOverlap, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "Argument_AdjustmentRulesrDaylightSavingTimeOverlapNonRuleRange", 
	$asm08.System.Core.Strings.get_Argument_AdjustmentRulesrDaylightSavingTimeOverlapNonRuleRange, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "Argument_AdjustmentRulesInvalidOverlap", 
	$asm08.System.Core.Strings.get_Argument_AdjustmentRulesInvalidOverlap, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "Argument_ConvertMismatch", 
	$asm08.System.Core.Strings.get_Argument_ConvertMismatch, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "Argument_DateTimeHasTimeOfDay", 
	$asm08.System.Core.Strings.get_Argument_DateTimeHasTimeOfDay, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "Argument_DateTimeIsInvalid", 
	$asm08.System.Core.Strings.get_Argument_DateTimeIsInvalid, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "Argument_DateTimeIsNotAmbiguous", 
	$asm08.System.Core.Strings.get_Argument_DateTimeIsNotAmbiguous, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "Argument_DateTimeOffsetIsNotAmbiguous", 
	$asm08.System.Core.Strings.get_Argument_DateTimeOffsetIsNotAmbiguous, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "Argument_DateTimeKindMustBeUnspecified", 
	$asm08.System.Core.Strings.get_Argument_DateTimeKindMustBeUnspecified, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "Argument_DateTimeHasTicks", 
	$asm08.System.Core.Strings.get_Argument_DateTimeHasTicks, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "Argument_InvalidREG_TZI_FORMAT", 
	$asm08.System.Core.Strings.get_Argument_InvalidREG_TZI_FORMAT, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "Argument_OutOfOrderDateTimes", 
	$asm08.System.Core.Strings.get_Argument_OutOfOrderDateTimes, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "Argument_TimeSpanHasSeconds", 
	$asm08.System.Core.Strings.get_Argument_TimeSpanHasSeconds, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "Argument_TimeZoneInfoBadTZif", 
	$asm08.System.Core.Strings.get_Argument_TimeZoneInfoBadTZif, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "Argument_TimeZoneInfoInvalidTZif", 
	$asm08.System.Core.Strings.get_Argument_TimeZoneInfoInvalidTZif, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "Argument_TransitionTimesAreIdentical", 
	$asm08.System.Core.Strings.get_Argument_TransitionTimesAreIdentical, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "ArgumentOutOfRange_DayParam", 
	$asm08.System.Core.Strings.get_ArgumentOutOfRange_DayParam, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "ArgumentOutOfRange_DayOfWeek", 
	$asm08.System.Core.Strings.get_ArgumentOutOfRange_DayOfWeek, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "ArgumentOutOfRange_MonthParam", 
	$asm08.System.Core.Strings.get_ArgumentOutOfRange_MonthParam, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "ArgumentOutOfRange_UtcOffset", 
	$asm08.System.Core.Strings.get_ArgumentOutOfRange_UtcOffset, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "ArgumentOutOfRange_UtcOffsetAndDaylightDelta", 
	$asm08.System.Core.Strings.get_ArgumentOutOfRange_UtcOffsetAndDaylightDelta, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "ArgumentOutOfRange_Week", 
	$asm08.System.Core.Strings.get_ArgumentOutOfRange_Week, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "InvalidTimeZone_InvalidWin32APIData", 
	$asm08.System.Core.Strings.get_InvalidTimeZone_InvalidWin32APIData, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "ArgumentOutOfRange_DateTimeBadTicks", 
	$asm08.System.Core.Strings.get_ArgumentOutOfRange_DateTimeBadTicks, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "MethodPreconditionViolated", 
	$asm08.System.Core.Strings.get_MethodPreconditionViolated, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "InvalidArgumentValue", 
	$asm08.System.Core.Strings.get_InvalidArgumentValue, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "NonEmptyCollectionRequired", 
	$asm08.System.Core.Strings.get_NonEmptyCollectionRequired, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "OnlyStaticFieldsHaveNullInstance", 
	$asm08.System.Core.Strings.get_OnlyStaticFieldsHaveNullInstance, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "OnlyStaticPropertiesHaveNullInstance", 
	$asm08.System.Core.Strings.get_OnlyStaticPropertiesHaveNullInstance, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "ExpressionMustBeReadable", 
	$asm08.System.Core.Strings.get_ExpressionMustBeReadable, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "ExpressionMustBeWriteable", 
	$asm08.System.Core.Strings.get_ExpressionMustBeWriteable, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "AllTestValuesMustHaveSameType", 
	$asm08.System.Core.Strings.get_AllTestValuesMustHaveSameType, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "AllCaseBodiesMustHaveSameType", 
	$asm08.System.Core.Strings.get_AllCaseBodiesMustHaveSameType, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "ArrayTypeMustBeArray", 
	$asm08.System.Core.Strings.get_ArrayTypeMustBeArray, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "CountCannotBeNegative", 
	$asm08.System.Core.Strings.get_CountCannotBeNegative, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "TypeDoesNotHaveConstructorForTheSignature", 
	$asm08.System.Core.Strings.get_TypeDoesNotHaveConstructorForTheSignature, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "MethodBuilderDoesNotHaveTypeBuilder", 
	$asm08.System.Core.Strings.get_MethodBuilderDoesNotHaveTypeBuilder, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "ArgumentMustNotHaveValueType", 
	$asm08.System.Core.Strings.get_ArgumentMustNotHaveValueType, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "QuotedExpressionMustBeLambda", 
	$asm08.System.Core.Strings.get_QuotedExpressionMustBeLambda, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "InvalidUnboxType", 
	$asm08.System.Core.Strings.get_InvalidUnboxType, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "DefaultBodyMustBeSupplied", 
	$asm08.System.Core.Strings.get_DefaultBodyMustBeSupplied, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "BoundsCannotBeLessThanOne", 
	$asm08.System.Core.Strings.get_BoundsCannotBeLessThanOne, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "LabelTypeMustBeVoid", 
	$asm08.System.Core.Strings.get_LabelTypeMustBeVoid, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "TypeMustNotBeByRef", 
	$asm08.System.Core.Strings.get_TypeMustNotBeByRef, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "AccessorsCannotHaveByRefArgs", 
	$asm08.System.Core.Strings.get_AccessorsCannotHaveByRefArgs, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "OnlyStaticMethodsHaveNullInstance", 
	$asm08.System.Core.Strings.get_OnlyStaticMethodsHaveNullInstance, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "AccessorsCannotHaveVarArgs", 
	$asm08.System.Core.Strings.get_AccessorsCannotHaveVarArgs, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "IndexesOfSetGetMustMatch", 
	$asm08.System.Core.Strings.get_IndexesOfSetGetMustMatch, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "BothAccessorsMustBeStatic", 
	$asm08.System.Core.Strings.get_BothAccessorsMustBeStatic, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "PropertyTyepMustMatchSetter", 
	$asm08.System.Core.Strings.get_PropertyTyepMustMatchSetter, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "SetterMustBeVoid", 
	$asm08.System.Core.Strings.get_SetterMustBeVoid, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "SetterHasNoParams", 
	$asm08.System.Core.Strings.get_SetterHasNoParams, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "PropertyTypeCannotBeVoid", 
	$asm08.System.Core.Strings.get_PropertyTypeCannotBeVoid, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "PropertyCannotHaveRefType", 
	$asm08.System.Core.Strings.get_PropertyCannotHaveRefType, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "LabelMustBeVoidOrHaveExpression", 
	$asm08.System.Core.Strings.get_LabelMustBeVoidOrHaveExpression, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "ReducedNotCompatible", 
	$asm08.System.Core.Strings.get_ReducedNotCompatible, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "ArgCntMustBeGreaterThanNameCnt", 
	$asm08.System.Core.Strings.get_ArgCntMustBeGreaterThanNameCnt, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "TypeMustBeDerivedFromSystemDelegate", 
	$asm08.System.Core.Strings.get_TypeMustBeDerivedFromSystemDelegate, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "ArgumentTypeCannotBeVoid", 
	$asm08.System.Core.Strings.get_ArgumentTypeCannotBeVoid, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "ReducibleMustOverrideReduce", 
	$asm08.System.Core.Strings.get_ReducibleMustOverrideReduce, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "MustBeReducible", 
	$asm08.System.Core.Strings.get_MustBeReducible, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "MustReduceToDifferent", 
	$asm08.System.Core.Strings.get_MustReduceToDifferent, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "StartEndMustBeOrdered", 
	$asm08.System.Core.Strings.get_StartEndMustBeOrdered, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "FaultCannotHaveCatchOrFinally", 
	$asm08.System.Core.Strings.get_FaultCannotHaveCatchOrFinally, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "TryMustHaveCatchFinallyOrFault", 
	$asm08.System.Core.Strings.get_TryMustHaveCatchFinallyOrFault, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "BodyOfCatchMustHaveSameTypeAsBodyOfTry", 
	$asm08.System.Core.Strings.get_BodyOfCatchMustHaveSameTypeAsBodyOfTry, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "ConversionIsNotSupportedForArithmeticTypes", 
	$asm08.System.Core.Strings.get_ConversionIsNotSupportedForArithmeticTypes, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "ArgumentCannotBeOfTypeVoid", 
	$asm08.System.Core.Strings.get_ArgumentCannotBeOfTypeVoid, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "NoOrInvalidRuleProduced", 
	$asm08.System.Core.Strings.get_NoOrInvalidRuleProduced, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "FirstArgumentMustBeCallSite", 
	$asm08.System.Core.Strings.get_FirstArgumentMustBeCallSite, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "BindingCannotBeNull", 
	$asm08.System.Core.Strings.get_BindingCannotBeNull, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "QueueEmpty", 
	$asm08.System.Core.Strings.get_QueueEmpty, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "ControlCannotLeaveFinally", 
	$asm08.System.Core.Strings.get_ControlCannotLeaveFinally, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "ControlCannotLeaveFilterTest", 
	$asm08.System.Core.Strings.get_ControlCannotLeaveFilterTest, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "ControlCannotEnterTry", 
	$asm08.System.Core.Strings.get_ControlCannotEnterTry, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "ControlCannotEnterExpression", 
	$asm08.System.Core.Strings.get_ControlCannotEnterExpression, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "ExtensionNotReduced", 
	$asm08.System.Core.Strings.get_ExtensionNotReduced, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "CannotCompileDynamic", 
	$asm08.System.Core.Strings.get_CannotCompileDynamic, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "InvalidOutputDir", 
	$asm08.System.Core.Strings.get_InvalidOutputDir, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "InvalidAsmNameOrExtension", 
	$asm08.System.Core.Strings.get_InvalidAsmNameOrExtension, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "CollectionReadOnly", 
	$asm08.System.Core.Strings.get_CollectionReadOnly, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "RethrowRequiresCatch", 
	$asm08.System.Core.Strings.get_RethrowRequiresCatch, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "TryNotAllowedInFilter", 
	$asm08.System.Core.Strings.get_TryNotAllowedInFilter, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "CollectionModifiedWhileEnumerating", 
	$asm08.System.Core.Strings.get_CollectionModifiedWhileEnumerating, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "EnumerationIsDone", 
	$asm08.System.Core.Strings.get_EnumerationIsDone, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "HomogenousAppDomainRequired", 
	$asm08.System.Core.Strings.get_HomogenousAppDomainRequired, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "PdbGeneratorNeedsExpressionCompiler", 
	$asm08.System.Core.Strings.get_PdbGeneratorNeedsExpressionCompiler, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "ArgumentOutOfRange_NeedNonNegNum", 
	$asm08.System.Core.Strings.get_ArgumentOutOfRange_NeedNonNegNum, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "Arg_ArrayPlusOffTooSmall", 
	$asm08.System.Core.Strings.get_Arg_ArrayPlusOffTooSmall, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "Arg_HSCapacityOverflow", 
	$asm08.System.Core.Strings.get_Arg_HSCapacityOverflow, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "InvalidOperation_EnumFailedVersion", 
	$asm08.System.Core.Strings.get_InvalidOperation_EnumFailedVersion, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "InvalidOperation_EnumOpCantHappen", 
	$asm08.System.Core.Strings.get_InvalidOperation_EnumOpCantHappen, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "Lazy_Value_RecursiveCallsToValue", 
	$asm08.System.Core.Strings.get_Lazy_Value_RecursiveCallsToValue, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "Lazy_CreateValue_NoParameterlessCtorForT", 
	$asm08.System.Core.Strings.get_Lazy_CreateValue_NoParameterlessCtorForT, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "Lazy_ctor_ModeInvalid", 
	$asm08.System.Core.Strings.get_Lazy_ctor_ModeInvalid, null);
JSIL.MakeProperty($asm08.System.Core.Strings, "Lazy_ToString_ValueNotCreated", 
	$asm08.System.Core.Strings.get_Lazy_ToString_ValueNotCreated, null);

$asm08.System.Core.Error.ArgumentNotIEnumerableGeneric = function (p0) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.ArgumentNotIEnumerableGeneric(p0)]);
};
$asm08.System.Core.Error.ArgumentNotValid = function (p0) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.ArgumentNotValid(p0)]);
};
$asm08.System.Core.Error.MoreThanOneElement = function () {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.MoreThanOneElement]);
};
$asm08.System.Core.Error.MoreThanOneMatch = function () {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.MoreThanOneMatch]);
};
$asm08.System.Core.Error.NoElements = function () {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.NoElements]);
};
$asm08.System.Core.Error.NoMatch = function () {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.NoMatch]);
};
$asm08.System.Core.Error.NoMethodOnType = function (p0, p1) {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.NoMethodOnType(p0, p1)]);
};
$asm08.System.Core.Error.NoMethodOnTypeMatchingArguments = function (p0, p1) {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.NoMethodOnTypeMatchingArguments(p0, p1)]);
};
$asm08.System.Core.Error.UserDefinedOperatorMustBeStatic = function (p0) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.UserDefinedOperatorMustBeStatic(p0)]);
};
$asm08.System.Core.Error.UserDefinedOperatorMustNotBeVoid = function (p0) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.UserDefinedOperatorMustNotBeVoid(p0)]);
};
$asm08.System.Core.Error.CoercionOperatorNotDefined = function (p0, p1) {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.CoercionOperatorNotDefined(p0, p1)]);
};
$asm08.System.Core.Error.UnaryOperatorNotDefined = function (p0, p1) {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.UnaryOperatorNotDefined(p0, p1)]);
};
$asm08.System.Core.Error.BinaryOperatorNotDefined = function (p0, p1, p2) {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.BinaryOperatorNotDefined(p0, p1, p2)]);
};
$asm08.System.Core.Error.OperandTypesDoNotMatchParameters = function (p0, p1) {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.OperandTypesDoNotMatchParameters(p0, p1)]);
};
$asm08.System.Core.Error.ArgumentMustBeArray = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.ArgumentMustBeArray]);
};
$asm08.System.Core.Error.ArgumentMustBeBoolean = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.ArgumentMustBeBoolean]);
};
$asm08.System.Core.Error.ArgumentMustBeFieldInfoOrPropertInfo = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.ArgumentMustBeFieldInfoOrPropertInfo]);
};
$asm08.System.Core.Error.ArgumentMustBeFieldInfoOrPropertInfoOrMethod = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.ArgumentMustBeFieldInfoOrPropertInfoOrMethod]);
};
$asm08.System.Core.Error.ArgumentMustBeInstanceMember = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.ArgumentMustBeInstanceMember]);
};
$asm08.System.Core.Error.ArgumentMustBeInteger = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.ArgumentMustBeInteger]);
};
$asm08.System.Core.Error.ArgumentMustBeArrayIndexType = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.ArgumentMustBeArrayIndexType]);
};
$asm08.System.Core.Error.ArgumentMustBeSingleDimensionalArrayType = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.ArgumentMustBeSingleDimensionalArrayType]);
};
$asm08.System.Core.Error.ArgumentTypesMustMatch = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.ArgumentTypesMustMatch]);
};
$asm08.System.Core.Error.CannotAutoInitializeValueTypeElementThroughProperty = function (p0) {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.CannotAutoInitializeValueTypeElementThroughProperty(p0)]);
};
$asm08.System.Core.Error.CannotAutoInitializeValueTypeMemberThroughProperty = function (p0) {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.CannotAutoInitializeValueTypeMemberThroughProperty(p0)]);
};
$asm08.System.Core.Error.IncorrectTypeForTypeAs = function (p0) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.IncorrectTypeForTypeAs(p0)]);
};
$asm08.System.Core.Error.CoalesceUsedOnNonNullType = function () {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.CoalesceUsedOnNonNullType]);
};
$asm08.System.Core.Error.ExpressionTypeCannotInitializeArrayType = function (p0, p1) {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.ExpressionTypeCannotInitializeArrayType(p0, p1)]);
};
$asm08.System.Core.Error.ExpressionTypeDoesNotMatchConstructorParameter = function (p0, p1) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.ExpressionTypeDoesNotMatchConstructorParameter(p0, p1)]);
};
$asm08.System.Core.Error.ArgumentTypeDoesNotMatchMember = function (p0, p1) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.ArgumentTypeDoesNotMatchMember(p0, p1)]);
};
$asm08.System.Core.Error.ArgumentMemberNotDeclOnType = function (p0, p1) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.ArgumentMemberNotDeclOnType(p0, p1)]);
};
$asm08.System.Core.Error.ExpressionTypeDoesNotMatchMethodParameter = function (p0, p1, p2) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.ExpressionTypeDoesNotMatchMethodParameter(p0, p1, p2)]);
};
$asm08.System.Core.Error.ExpressionTypeDoesNotMatchParameter = function (p0, p1) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.ExpressionTypeDoesNotMatchParameter(p0, p1)]);
};
$asm08.System.Core.Error.ExpressionTypeDoesNotMatchReturn = function (p0, p1) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.ExpressionTypeDoesNotMatchReturn(p0, p1)]);
};
$asm08.System.Core.Error.ExpressionTypeNotInvocable = function (p0) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.ExpressionTypeNotInvocable(p0)]);
};
$asm08.System.Core.Error.FieldNotDefinedForType = function (p0, p1) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.FieldNotDefinedForType(p0, p1)]);
};
$asm08.System.Core.Error.IncorrectNumberOfIndexes = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.IncorrectNumberOfIndexes]);
};
$asm08.System.Core.Error.IncorrectNumberOfLambdaArguments = function () {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.IncorrectNumberOfLambdaArguments]);
};
$asm08.System.Core.Error.IncorrectNumberOfLambdaDeclarationParameters = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.IncorrectNumberOfLambdaDeclarationParameters]);
};
$asm08.System.Core.Error.IncorrectNumberOfMethodCallArguments = function (p0) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.IncorrectNumberOfMethodCallArguments(p0)]);
};
$asm08.System.Core.Error.IncorrectNumberOfConstructorArguments = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.IncorrectNumberOfConstructorArguments]);
};
$asm08.System.Core.Error.IncorrectNumberOfMembersForGivenConstructor = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.IncorrectNumberOfMembersForGivenConstructor]);
};
$asm08.System.Core.Error.IncorrectNumberOfArgumentsForMembers = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.IncorrectNumberOfArgumentsForMembers]);
};
$asm08.System.Core.Error.LambdaParameterNotInScope = function () {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.LambdaParameterNotInScope]);
};
$asm08.System.Core.Error.LambdaTypeMustBeDerivedFromSystemDelegate = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.LambdaTypeMustBeDerivedFromSystemDelegate]);
};
$asm08.System.Core.Error.MemberNotFieldOrProperty = function (p0) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.MemberNotFieldOrProperty(p0)]);
};
$asm08.System.Core.Error.MethodContainsGenericParameters = function (p0) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.MethodContainsGenericParameters(p0)]);
};
$asm08.System.Core.Error.MethodIsGeneric = function (p0) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.MethodIsGeneric(p0)]);
};
$asm08.System.Core.Error.MethodNotPropertyAccessor = function (p0, p1) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.MethodNotPropertyAccessor(p0, p1)]);
};
$asm08.System.Core.Error.PropertyDoesNotHaveGetter = function (p0) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.PropertyDoesNotHaveGetter(p0)]);
};
$asm08.System.Core.Error.PropertyDoesNotHaveSetter = function (p0) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.PropertyDoesNotHaveSetter(p0)]);
};
$asm08.System.Core.Error.NotAMemberOfType = function (p0, p1) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.NotAMemberOfType(p0, p1)]);
};
$asm08.System.Core.Error.OperatorNotImplementedForType = function (p0, p1) {
	return JSIL.New(System.NotImplementedException, "_ctor$1", [$asm08.System.Core.Strings.OperatorNotImplementedForType(p0, p1)]);
};
$asm08.System.Core.Error.ParameterExpressionNotValidAsDelegate = function (p0, p1) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.ParameterExpressionNotValidAsDelegate(p0, p1)]);
};
$asm08.System.Core.Error.PropertyNotDefinedForType = function (p0, p1) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.PropertyNotDefinedForType(p0, p1)]);
};
$asm08.System.Core.Error.MethodNotDefinedForType = function (p0, p1) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.MethodNotDefinedForType(p0, p1)]);
};
$asm08.System.Core.Error.TypeContainsGenericParameters = function (p0) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.TypeContainsGenericParameters(p0)]);
};
$asm08.System.Core.Error.TypeIsGeneric = function (p0) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.TypeIsGeneric(p0)]);
};
$asm08.System.Core.Error.TypeMissingDefaultConstructor = function (p0) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.TypeMissingDefaultConstructor(p0)]);
};
$asm08.System.Core.Error.ListInitializerWithZeroMembers = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.ListInitializerWithZeroMembers]);
};
$asm08.System.Core.Error.ElementInitializerMethodNotAdd = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.ElementInitializerMethodNotAdd]);
};
$asm08.System.Core.Error.ElementInitializerMethodNoRefOutParam = function (p0, p1) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.ElementInitializerMethodNoRefOutParam(p0, p1)]);
};
$asm08.System.Core.Error.ElementInitializerMethodWithZeroArgs = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.ElementInitializerMethodWithZeroArgs]);
};
$asm08.System.Core.Error.ElementInitializerMethodStatic = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.ElementInitializerMethodStatic]);
};
$asm08.System.Core.Error.TypeNotIEnumerable = function (p0) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.TypeNotIEnumerable(p0)]);
};
$asm08.System.Core.Error.TypeParameterIsNotDelegate = function (p0) {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.TypeParameterIsNotDelegate(p0)]);
};
$asm08.System.Core.Error.UnexpectedCoalesceOperator = function () {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.UnexpectedCoalesceOperator]);
};
$asm08.System.Core.Error.InvalidCast = function (p0, p1) {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.InvalidCast(p0, p1)]);
};
$asm08.System.Core.Error.UnhandledBinary = function (p0) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.UnhandledBinary(p0)]);
};
$asm08.System.Core.Error.UnhandledBinding = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.UnhandledBinding]);
};
$asm08.System.Core.Error.UnhandledBindingType = function (p0) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.UnhandledBindingType(p0)]);
};
$asm08.System.Core.Error.UnhandledConvert = function (p0) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.UnhandledConvert(p0)]);
};
$asm08.System.Core.Error.UnhandledExpressionType = function (p0) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.UnhandledExpressionType(p0)]);
};
$asm08.System.Core.Error.UnhandledMemberAccess = function (p0) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.UnhandledMemberAccess(p0)]);
};
$asm08.System.Core.Error.UnhandledUnary = function (p0) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.UnhandledUnary(p0)]);
};
$asm08.System.Core.Error.UnknownBindingType = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.UnknownBindingType]);
};
$asm08.System.Core.Error.LogicalOperatorMustHaveConsistentTypes = function (p0, p1) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.LogicalOperatorMustHaveConsistentTypes(p0, p1)]);
};
$asm08.System.Core.Error.LogicalOperatorMustHaveBooleanOperators = function (p0, p1) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.LogicalOperatorMustHaveBooleanOperators(p0, p1)]);
};
$asm08.System.Core.Error.MethodDoesNotExistOnType = function (p0, p1) {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.MethodDoesNotExistOnType(p0, p1)]);
};
$asm08.System.Core.Error.MethodWithArgsDoesNotExistOnType = function (p0, p1) {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.MethodWithArgsDoesNotExistOnType(p0, p1)]);
};
$asm08.System.Core.Error.MethodWithMoreThanOneMatch = function (p0, p1) {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.MethodWithMoreThanOneMatch(p0, p1)]);
};
$asm08.System.Core.Error.IncorrectNumberOfTypeArgsForFunc = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.IncorrectNumberOfTypeArgsForFunc]);
};
$asm08.System.Core.Error.IncorrectNumberOfTypeArgsForAction = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.IncorrectNumberOfTypeArgsForAction]);
};
$asm08.System.Core.Error.ExpressionMayNotContainByrefParameters = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.ExpressionMayNotContainByrefParameters]);
};
$asm08.System.Core.Error.ArrayElementTypeCannotBeVoid = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.ArrayElementTypeCannotBeVoid]);
};
$asm08.System.Core.Error.ArrayTypeMustBeArray = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.ArrayTypeMustBeArray]);
};
$asm08.System.Core.Error.CountCannotBeNegative = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.CountCannotBeNegative]);
};
$asm08.System.Core.Error.TypeDoesNotHaveConstructorForTheSignature = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.TypeDoesNotHaveConstructorForTheSignature]);
};
$asm08.System.Core.Error.MethodBuilderDoesNotHaveTypeBuilder = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.MethodBuilderDoesNotHaveTypeBuilder]);
};
$asm08.System.Core.Error.ArgumentMustNotHaveValueType = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.ArgumentMustNotHaveValueType]);
};
$asm08.System.Core.Error.QuotedExpressionMustBeLambda = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.QuotedExpressionMustBeLambda]);
};
$asm08.System.Core.Error.InvalidUnboxType = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.InvalidUnboxType]);
};
$asm08.System.Core.Error.DefaultBodyMustBeSupplied = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.DefaultBodyMustBeSupplied]);
};
$asm08.System.Core.Error.BoundsCannotBeLessThanOne = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.BoundsCannotBeLessThanOne]);
};
$asm08.System.Core.Error.LabelTypeMustBeVoid = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.LabelTypeMustBeVoid]);
};
$asm08.System.Core.Error.TypeMustNotBeByRef = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.TypeMustNotBeByRef]);
};
$asm08.System.Core.Error.AccessorsCannotHaveByRefArgs = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.AccessorsCannotHaveByRefArgs]);
};
$asm08.System.Core.Error.OnlyStaticMethodsHaveNullInstance = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.OnlyStaticMethodsHaveNullInstance]);
};
$asm08.System.Core.Error.AccessorsCannotHaveVarArgs = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.AccessorsCannotHaveVarArgs]);
};
$asm08.System.Core.Error.IndexesOfSetGetMustMatch = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.IndexesOfSetGetMustMatch]);
};
$asm08.System.Core.Error.BothAccessorsMustBeStatic = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.BothAccessorsMustBeStatic]);
};
$asm08.System.Core.Error.PropertyTyepMustMatchSetter = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.PropertyTyepMustMatchSetter]);
};
$asm08.System.Core.Error.SetterMustBeVoid = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.SetterMustBeVoid]);
};
$asm08.System.Core.Error.SetterHasNoParams = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.SetterHasNoParams]);
};
$asm08.System.Core.Error.PropertyTypeCannotBeVoid = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.PropertyTypeCannotBeVoid]);
};
$asm08.System.Core.Error.PropertyCannotHaveRefType = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.PropertyCannotHaveRefType]);
};
$asm08.System.Core.Error.LabelMustBeVoidOrHaveExpression = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.LabelMustBeVoidOrHaveExpression]);
};
$asm08.System.Core.Error.ReducedNotCompatible = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.ReducedNotCompatible]);
};
$asm08.System.Core.Error.ArgCntMustBeGreaterThanNameCnt = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.ArgCntMustBeGreaterThanNameCnt]);
};
$asm08.System.Core.Error.TypeMustBeDerivedFromSystemDelegate = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.TypeMustBeDerivedFromSystemDelegate]);
};
$asm08.System.Core.Error.ArgumentTypeCannotBeVoid = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.ArgumentTypeCannotBeVoid]);
};
$asm08.System.Core.Error.ReducibleMustOverrideReduce = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.ReducibleMustOverrideReduce]);
};
$asm08.System.Core.Error.MustBeReducible = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.MustBeReducible]);
};
$asm08.System.Core.Error.MustReduceToDifferent = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.MustReduceToDifferent]);
};
$asm08.System.Core.Error.VariableMustNotBeByRef = function (p0, p1) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.VariableMustNotBeByRef(p0, p1)]);
};
$asm08.System.Core.Error.DuplicateVariable = function (p0) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.DuplicateVariable(p0)]);
};
$asm08.System.Core.Error.StartEndMustBeOrdered = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.StartEndMustBeOrdered]);
};
$asm08.System.Core.Error.FaultCannotHaveCatchOrFinally = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.FaultCannotHaveCatchOrFinally]);
};
$asm08.System.Core.Error.TryMustHaveCatchFinallyOrFault = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.TryMustHaveCatchFinallyOrFault]);
};
$asm08.System.Core.Error.BodyOfCatchMustHaveSameTypeAsBodyOfTry = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.BodyOfCatchMustHaveSameTypeAsBodyOfTry]);
};
$asm08.System.Core.Error.ExtensionNodeMustOverrideProperty = function (p0) {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.ExtensionNodeMustOverrideProperty(p0)]);
};
$asm08.System.Core.Error.DynamicBinderResultNotAssignable = function (p0, p1, p2) {
	return JSIL.New(System.InvalidCastException, "_ctor$1", [$asm08.System.Core.Strings.DynamicBinderResultNotAssignable(p0, p1, p2)]);
};
$asm08.System.Core.Error.DynamicObjectResultNotAssignable = function (p0, p1, p2, p3) {
	return JSIL.New(System.InvalidCastException, "_ctor$1", [$asm08.System.Core.Strings.DynamicObjectResultNotAssignable(p0, p1, p2, p3)]);
};
$asm08.System.Core.Error.DynamicBindingNeedsRestrictions = function (p0, p1) {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.DynamicBindingNeedsRestrictions(p0, p1)]);
};
$asm08.System.Core.Error.BinderNotCompatibleWithCallSite = function (p0, p1, p2) {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.BinderNotCompatibleWithCallSite(p0, p1, p2)]);
};
$asm08.System.Core.Error.ReferenceEqualityNotDefined = function (p0, p1) {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.ReferenceEqualityNotDefined(p0, p1)]);
};
$asm08.System.Core.Error.OverloadOperatorTypeDoesNotMatchConversionType = function (p0, p1) {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.OverloadOperatorTypeDoesNotMatchConversionType(p0, p1)]);
};
$asm08.System.Core.Error.ConversionIsNotSupportedForArithmeticTypes = function () {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.ConversionIsNotSupportedForArithmeticTypes]);
};
$asm08.System.Core.Error.EqualityMustReturnBoolean = function (p0) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.EqualityMustReturnBoolean(p0)]);
};
$asm08.System.Core.Error.ExpressionTypeDoesNotMatchAssignment = function (p0, p1) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.ExpressionTypeDoesNotMatchAssignment(p0, p1)]);
};
$asm08.System.Core.Error.ExpressionTypeDoesNotMatchLabel = function (p0, p1) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.ExpressionTypeDoesNotMatchLabel(p0, p1)]);
};
$asm08.System.Core.Error.InstanceFieldNotDefinedForType = function (p0, p1) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.InstanceFieldNotDefinedForType(p0, p1)]);
};
$asm08.System.Core.Error.FieldInfoNotDefinedForType = function (p0, p1, p2) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.FieldInfoNotDefinedForType(p0, p1, p2)]);
};
$asm08.System.Core.Error.PropertyDoesNotHaveAccessor = function (p0) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.PropertyDoesNotHaveAccessor(p0)]);
};
$asm08.System.Core.Error.InstancePropertyNotDefinedForType = function (p0, p1) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.InstancePropertyNotDefinedForType(p0, p1)]);
};
$asm08.System.Core.Error.InstancePropertyWithoutParameterNotDefinedForType = function (p0, p1) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.InstancePropertyWithoutParameterNotDefinedForType(p0, p1)]);
};
$asm08.System.Core.Error.InstancePropertyWithSpecifiedParametersNotDefinedForType = function (p0, p1, p2) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.InstancePropertyWithSpecifiedParametersNotDefinedForType(p0, p1, p2)]);
};
$asm08.System.Core.Error.InstanceAndMethodTypeMismatch = function (p0, p1, p2) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.InstanceAndMethodTypeMismatch(p0, p1, p2)]);
};
$asm08.System.Core.Error.UserDefinedOpMustHaveConsistentTypes = function (p0, p1) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.UserDefinedOpMustHaveConsistentTypes(p0, p1)]);
};
$asm08.System.Core.Error.UserDefinedOpMustHaveValidReturnType = function (p0, p1) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.UserDefinedOpMustHaveValidReturnType(p0, p1)]);
};
$asm08.System.Core.Error.GenericMethodWithArgsDoesNotExistOnType = function (p0, p1) {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.GenericMethodWithArgsDoesNotExistOnType(p0, p1)]);
};
$asm08.System.Core.Error.PropertyWithMoreThanOneMatch = function (p0, p1) {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.PropertyWithMoreThanOneMatch(p0, p1)]);
};
$asm08.System.Core.Error.ArgumentCannotBeOfTypeVoid = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.ArgumentCannotBeOfTypeVoid]);
};
$asm08.System.Core.Error.AmbiguousMatchInExpandoObject = function (p0) {
	return JSIL.New(System.Reflection.AmbiguousMatchException, "_ctor$1", [$asm08.System.Core.Strings.AmbiguousMatchInExpandoObject(p0)]);
};
$asm08.System.Core.Error.SameKeyExistsInExpando = function (p0) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.SameKeyExistsInExpando(p0)]);
};
$asm08.System.Core.Error.KeyDoesNotExistInExpando = function (p0) {
	return JSIL.New(System.Collections.Generic.KeyNotFoundException, "_ctor$1", [$asm08.System.Core.Strings.KeyDoesNotExistInExpando(p0)]);
};
$asm08.System.Core.Error.NoOrInvalidRuleProduced = function () {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.NoOrInvalidRuleProduced]);
};
$asm08.System.Core.Error.FirstArgumentMustBeCallSite = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.FirstArgumentMustBeCallSite]);
};
$asm08.System.Core.Error.BindingCannotBeNull = function () {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.BindingCannotBeNull]);
};
$asm08.System.Core.Error.InvalidOperation = function (p0) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.InvalidOperation(p0)]);
};
$asm08.System.Core.Error.OutOfRange = function (p0, p1) {
	return JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", [$asm08.System.Core.Strings.OutOfRange(p0, p1)]);
};
$asm08.System.Core.Error.QueueEmpty = function () {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.QueueEmpty]);
};
$asm08.System.Core.Error.LabelTargetAlreadyDefined = function (p0) {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.LabelTargetAlreadyDefined(p0)]);
};
$asm08.System.Core.Error.LabelTargetUndefined = function (p0) {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.LabelTargetUndefined(p0)]);
};
$asm08.System.Core.Error.ControlCannotLeaveFinally = function () {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.ControlCannotLeaveFinally]);
};
$asm08.System.Core.Error.ControlCannotLeaveFilterTest = function () {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.ControlCannotLeaveFilterTest]);
};
$asm08.System.Core.Error.AmbiguousJump = function (p0) {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.AmbiguousJump(p0)]);
};
$asm08.System.Core.Error.ControlCannotEnterTry = function () {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.ControlCannotEnterTry]);
};
$asm08.System.Core.Error.ControlCannotEnterExpression = function () {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.ControlCannotEnterExpression]);
};
$asm08.System.Core.Error.NonLocalJumpWithValue = function (p0) {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.NonLocalJumpWithValue(p0)]);
};
$asm08.System.Core.Error.ExtensionNotReduced = function () {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.ExtensionNotReduced]);
};
$asm08.System.Core.Error.CannotCompileConstant = function (p0) {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.CannotCompileConstant(p0)]);
};
$asm08.System.Core.Error.CannotCompileDynamic = function () {
	return JSIL.New(System.NotSupportedException, "_ctor$1", [$asm08.System.Core.Strings.CannotCompileDynamic]);
};
$asm08.System.Core.Error.InvalidLvalue = function (p0) {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.InvalidLvalue(p0)]);
};
$asm08.System.Core.Error.InvalidMemberType = function (p0) {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.InvalidMemberType(p0)]);
};
$asm08.System.Core.Error.UnknownLiftType = function (p0) {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.UnknownLiftType(p0)]);
};
$asm08.System.Core.Error.InvalidOutputDir = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.InvalidOutputDir]);
};
$asm08.System.Core.Error.InvalidAsmNameOrExtension = function () {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.InvalidAsmNameOrExtension]);
};
$asm08.System.Core.Error.CollectionReadOnly = function () {
	return JSIL.New(System.NotSupportedException, "_ctor$1", [$asm08.System.Core.Strings.CollectionReadOnly]);
};
$asm08.System.Core.Error.IllegalNewGenericParams = function (p0) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.IllegalNewGenericParams(p0)]);
};
$asm08.System.Core.Error.UndefinedVariable = function (p0, p1, p2) {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.UndefinedVariable(p0, p1, p2)]);
};
$asm08.System.Core.Error.CannotCloseOverByRef = function (p0, p1) {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.CannotCloseOverByRef(p0, p1)]);
};
$asm08.System.Core.Error.UnexpectedVarArgsCall = function (p0) {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.UnexpectedVarArgsCall(p0)]);
};
$asm08.System.Core.Error.RethrowRequiresCatch = function () {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.RethrowRequiresCatch]);
};
$asm08.System.Core.Error.TryNotAllowedInFilter = function () {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.TryNotAllowedInFilter]);
};
$asm08.System.Core.Error.MustRewriteToSameNode = function (p0, p1, p2) {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.MustRewriteToSameNode(p0, p1, p2)]);
};
$asm08.System.Core.Error.MustRewriteChildToSameType = function (p0, p1, p2) {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.MustRewriteChildToSameType(p0, p1, p2)]);
};
$asm08.System.Core.Error.MustRewriteWithoutMethod = function (p0, p1) {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.MustRewriteWithoutMethod(p0, p1)]);
};
$asm08.System.Core.Error.TryNotSupportedForMethodsWithRefArgs = function (p0) {
	return JSIL.New(System.NotSupportedException, "_ctor$1", [$asm08.System.Core.Strings.TryNotSupportedForMethodsWithRefArgs(p0)]);
};
$asm08.System.Core.Error.TryNotSupportedForValueTypeInstances = function (p0) {
	return JSIL.New(System.NotSupportedException, "_ctor$1", [$asm08.System.Core.Strings.TryNotSupportedForValueTypeInstances(p0)]);
};
$asm08.System.Core.Error.CollectionModifiedWhileEnumerating = function () {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.CollectionModifiedWhileEnumerating]);
};
$asm08.System.Core.Error.EnumerationIsDone = function () {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.EnumerationIsDone]);
};
$asm08.System.Core.Error.HomogenousAppDomainRequired = function () {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.HomogenousAppDomainRequired]);
};
$asm08.System.Core.Error.TestValueTypeDoesNotMatchComparisonMethodParameter = function (p0, p1) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.TestValueTypeDoesNotMatchComparisonMethodParameter(p0, p1)]);
};
$asm08.System.Core.Error.SwitchValueTypeDoesNotMatchComparisonMethodParameter = function (p0, p1) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.SwitchValueTypeDoesNotMatchComparisonMethodParameter(p0, p1)]);
};
$asm08.System.Core.Error.InvalidMetaObjectCreated = function (p0) {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.InvalidMetaObjectCreated(p0)]);
};
$asm08.System.Core.Error.PdbGeneratorNeedsExpressionCompiler = function () {
	return JSIL.New(System.NotSupportedException, "_ctor$1", [$asm08.System.Core.Strings.PdbGeneratorNeedsExpressionCompiler]);
};
$asm08.System.Core.Error.Lazy_Value_RecursiveCallsToValue = function () {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.Strings.Lazy_Value_RecursiveCallsToValue]);
};
$asm08.System.Core.Error.Lazy_CreateValue_NoParameterlessCtorForT = function () {
	return JSIL.New(System.MissingMemberException, "_ctor$1", [$asm08.System.Core.Strings.Lazy_CreateValue_NoParameterlessCtorForT]);
};
$asm08.System.Core.Error.Lazy_ctor_ModeInvalid = function () {
	return JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", [$asm08.System.Core.Strings.Lazy_ctor_ModeInvalid]);
};
$asm08.System.Core.Error.ArgumentNull = function (paramName) {
	return JSIL.New(System.ArgumentNullException, "_ctor$1", [paramName]);
};
$asm08.System.Core.Error.ArgumentOutOfRange = function (paramName) {
	return JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", [paramName]);
};
$asm08.System.Core.Error.NotImplemented = function () {
	return JSIL.New(System.NotImplementedException, "_ctor$0", []);
};
$asm08.System.Core.Error.NotSupported = function () {
	return JSIL.New(System.NotSupportedException, "_ctor$0", []);
};

System.Lazy$b1.prototype._ctor$0 = function () {
	this._ctor$3(System.Threading.LazyThreadSafetyMode.ExecutionAndPublication);
};
System.Lazy$b1.prototype._ctor$1 = function (valueFactory) {
	this._ctor$5(valueFactory, System.Threading.LazyThreadSafetyMode.ExecutionAndPublication);
};
System.Lazy$b1.prototype._ctor$2 = function (isThreadSafe) {
	this._ctor$3(isThreadSafe ? System.Threading.LazyThreadSafetyMode.ExecutionAndPublication : System.Threading.LazyThreadSafetyMode.None);
};
System.Lazy$b1.prototype._ctor$3 = function (mode) {
	System.Object.prototype._ctor.call(this);
	this.m_threadSafeObj = System.Lazy$b1.Of(this.T).GetObjectFromMode(mode);
};
System.Lazy$b1.prototype._ctor$4 = function (valueFactory, isThreadSafe) {
	this._ctor$5(valueFactory, isThreadSafe ? System.Threading.LazyThreadSafetyMode.ExecutionAndPublication : System.Threading.LazyThreadSafetyMode.None);
};
System.Lazy$b1.prototype._ctor$5 = function (valueFactory, mode) {
	System.Object.prototype._ctor.call(this);
	if (valueFactory === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["valueFactory"]);
	}
	this.m_threadSafeObj = System.Lazy$b1.Of(this.T).GetObjectFromMode(mode);
	this.m_valueFactory = valueFactory;
};
System.Lazy$b1.GetObjectFromMode = function (mode) {
	if (mode === System.Threading.LazyThreadSafetyMode.ExecutionAndPublication) {
		return new System.Object();
	}
	if (mode === System.Threading.LazyThreadSafetyMode.PublicationOnly) {
		return System.Lazy$b1.Of(this.T).PUBLICATION_ONLY_OR_ALREADY_INITIALIZED;
	}
	if (JSIL.Cast(mode, System.Boolean)) {
		throw $asm08.System.Core.Error.Lazy_ctor_ModeInvalid();
	}
	return null;
};
System.Lazy$b1.prototype.toString = function () {
	var flag = new JSIL.Variable(false);
	if (this.IsValueCreated) {
		var value = this.Value;
		var result = value.toString();
	} else {
		result = $asm08.System.Core.SR.GetString$3("Lazy_ToString_ValueNotCreated", /* ref */ flag);
		if (flag.value) {
			result = "?";
		}
	}
	return result;
};
System.Lazy$b1.prototype.get_ValueForDebugDisplay = function () {
	if (!this.IsValueCreated) {
		return null;
	}
	return JSIL.Cast(this.m_boxed, $asm08.System.Lazy$b1.Boxed.Of(this.T)).m_value;
};
System.Lazy$b1.prototype.get_Mode = function () {
	if (this.m_threadSafeObj === null) {
		return System.Threading.LazyThreadSafetyMode.None;
	}
	if (this.m_threadSafeObj === System.Lazy$b1.Of(this.T).PUBLICATION_ONLY_OR_ALREADY_INITIALIZED) {
		return System.Threading.LazyThreadSafetyMode.PublicationOnly;
	}
	return System.Threading.LazyThreadSafetyMode.ExecutionAndPublication;
};
System.Lazy$b1.prototype.get_IsValueFaulted = function () {
	return JSIL.CheckType(this.m_boxed, $asm08.System.Lazy$b1.LazyInternalExceptionHolder.Of(this.T));
};
System.Lazy$b1.prototype.get_IsValueCreated = function () {
	return ((this.m_boxed !== null) && JSIL.CheckType(this.m_boxed, $asm08.System.Lazy$b1.Boxed.Of(this.T)));
};
System.Lazy$b1.prototype.get_Value = function () {
	if (this.m_boxed === null) {
		return this.LazyInitValue();
	}
	var boxed = JSIL.TryCast(this.m_boxed, $asm08.System.Lazy$b1.Boxed.Of(this.T));
	if (boxed !== null) {
		return boxed.m_value;
	}
	throw JSIL.TryCast(this.m_boxed, $asm08.System.Lazy$b1.LazyInternalExceptionHolder.Of(this.T)).m_exception;
};
System.Lazy$b1.prototype.LazyInitValue = function () {
	var threadSafeObj = null;
	var boxed = null;
	var mode = this.Mode;
	if (!JSIL.Cast(mode, System.Boolean)) {
		boxed = this.CreateValue();
		this.m_boxed = boxed;
	} else if (mode === System.Threading.LazyThreadSafetyMode.PublicationOnly) {
		boxed = this.CreateValue();
		if (System.Threading.Interlocked.CompareExchange(/* ref */ new JSIL.MemberReference(this, "m_boxed"), boxed, null) !== null) {
			boxed = JSIL.Cast(this.m_boxed, $asm08.System.Lazy$b1.Boxed.Of(this.T));
		}
	} else {
		System.Threading.Monitor.Enter((threadSafeObj = this.m_threadSafeObj));
		try {
			if (this.m_boxed === null) {
				boxed = this.CreateValue();
				this.m_boxed = boxed;
			} else {
				boxed = JSIL.TryCast(this.m_boxed, $asm08.System.Lazy$b1.Boxed.Of(this.T));
				if (boxed === null) {
					throw JSIL.TryCast(this.m_boxed, $asm08.System.Lazy$b1.LazyInternalExceptionHolder.Of(this.T)).m_exception;
				}
			}
		} finally {
			System.Threading.Monitor.Exit(threadSafeObj);
		}
	}
	return boxed.m_value;
};
System.Lazy$b1.prototype.CreateValue = function () {
	var result = null;
	var mode = this.Mode;
	if (this.m_valueFactory !== null) {
		try {
			if (!((mode === System.Threading.LazyThreadSafetyMode.PublicationOnly) || !System.Delegate.op_Equality(this.m_valueFactory, System.Lazy$b1.Of(this.T).PUBLICATION_ONLY_OR_ALREADY_INITIALIZED))) {
				throw $asm08.System.Core.Error.Lazy_Value_RecursiveCallsToValue();
			}
			if (mode !== System.Threading.LazyThreadSafetyMode.PublicationOnly) {
				this.m_valueFactory = System.Lazy$b1.Of(this.T).PUBLICATION_ONLY_OR_ALREADY_INITIALIZED;
			}
			result = new ($asm08.System.Lazy$b1.Boxed.Of(this.T)) (this.m_valueFactory());
			return result;
		} catch ($exception) {
			var arg_51_0 = $exception;
			if (mode !== System.Threading.LazyThreadSafetyMode.PublicationOnly) {
				this.m_boxed = new ($asm08.System.Lazy$b1.LazyInternalExceptionHolder.Of(this.T)) (arg_51_0);
			}
			throw $exception;
		}
	}
	try {
		result = new ($asm08.System.Lazy$b1.Boxed.Of(this.T)) (JSIL.Cast(System.Activator.CreateInstance$3(this.T), this.T));
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.MissingMethodException)) {
			var exception = $asm08.System.Core.Error.Lazy_CreateValue_NoParameterlessCtorForT();
			if (mode !== System.Threading.LazyThreadSafetyMode.PublicationOnly) {
				this.m_boxed = new ($asm08.System.Lazy$b1.LazyInternalExceptionHolder.Of(this.T)) (exception);
			}
			throw exception;
		} else {
			throw $exception;
		}
	}
	return result;
};
JSIL.OverloadedMethod(System.Lazy$b1.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Func$b1.Of(JSIL.AnyType)]], 
		["_ctor$2", [System.Boolean]], 
		["_ctor$3", [System.Threading.LazyThreadSafetyMode]], 
		["_ctor$4", [System.Func$b1.Of(JSIL.AnyType), System.Boolean]], 
		["_ctor$5", [System.Func$b1.Of(JSIL.AnyType), System.Threading.LazyThreadSafetyMode]]
	]);
JSIL.MakeProperty(System.Lazy$b1.prototype, "ValueForDebugDisplay", 
	System.Lazy$b1.prototype.get_ValueForDebugDisplay, null);
JSIL.MakeProperty(System.Lazy$b1.prototype, "Mode", 
	System.Lazy$b1.prototype.get_Mode, null);
JSIL.MakeProperty(System.Lazy$b1.prototype, "IsValueFaulted", 
	System.Lazy$b1.prototype.get_IsValueFaulted, null);
JSIL.MakeProperty(System.Lazy$b1.prototype, "IsValueCreated", 
	System.Lazy$b1.prototype.get_IsValueCreated, null);
JSIL.MakeProperty(System.Lazy$b1.prototype, "Value", 
	System.Lazy$b1.prototype.get_Value, null);
System.Lazy$b1.PUBLICATION_ONLY_OR_ALREADY_INITIALIZED = null;
System.Lazy$b1.prototype.m_boxed = null;
System.Lazy$b1.prototype.m_valueFactory = null;
System.Lazy$b1.prototype.m_threadSafeObj = null;
System.Lazy$b1.$CachedAnonymousMethodDelegate1 = null;
System.Lazy$b1._cctor = function () {
	System.Lazy$b1.Of(this.T).PUBLICATION_ONLY_OR_ALREADY_INITIALIZED = function () {
		return null;
	};
};

$asm08.System.Lazy$b1.Boxed.prototype._ctor = function (value) {
	System.Object.prototype._ctor.call(this);
	this.m_value = value;
};
$asm08.System.Lazy$b1.Boxed.prototype.m_value = null;

$asm08.System.Lazy$b1.LazyInternalExceptionHolder.prototype._ctor = function (ex) {
	System.Object.prototype._ctor.call(this);
	this.m_exception = ex;
};
$asm08.System.Lazy$b1.LazyInternalExceptionHolder.prototype.m_exception = null;

$asm08.System.System_LazyDebugView$b1.prototype._ctor = function (lazy) {
	System.Object.prototype._ctor.call(this);
	this.m_lazy = lazy;
};
$asm08.System.System_LazyDebugView$b1.prototype.get_IsValueCreated = function () {
	return this.m_lazy.IsValueCreated;
};
$asm08.System.System_LazyDebugView$b1.prototype.get_Value = function () {
	return this.m_lazy.ValueForDebugDisplay;
};
$asm08.System.System_LazyDebugView$b1.prototype.get_Mode = function () {
	return this.m_lazy.Mode;
};
$asm08.System.System_LazyDebugView$b1.prototype.get_IsValueFaulted = function () {
	return this.m_lazy.IsValueFaulted;
};
JSIL.MakeProperty($asm08.System.System_LazyDebugView$b1.prototype, "IsValueCreated", 
	$asm08.System.System_LazyDebugView$b1.prototype.get_IsValueCreated, null);
JSIL.MakeProperty($asm08.System.System_LazyDebugView$b1.prototype, "Value", 
	$asm08.System.System_LazyDebugView$b1.prototype.get_Value, null);
JSIL.MakeProperty($asm08.System.System_LazyDebugView$b1.prototype, "Mode", 
	$asm08.System.System_LazyDebugView$b1.prototype.get_Mode, null);
JSIL.MakeProperty($asm08.System.System_LazyDebugView$b1.prototype, "IsValueFaulted", 
	$asm08.System.System_LazyDebugView$b1.prototype.get_IsValueFaulted, null);
$asm08.System.System_LazyDebugView$b1.prototype.m_lazy = null;

$asm08.System.Globalization.DaylightTime.prototype._ctor$0 = function () {
	System.Object.prototype._ctor.call(this);
};
$asm08.System.Globalization.DaylightTime.prototype._ctor$1 = function (start, end, delta) {
	System.Object.prototype._ctor.call(this);
	this.m_start = start;
	this.m_end = end;
	this.m_delta = delta;
};
$asm08.System.Globalization.DaylightTime.prototype.get_Start = function () {
	return this.m_start;
};
$asm08.System.Globalization.DaylightTime.prototype.get_End = function () {
	return this.m_end;
};
$asm08.System.Globalization.DaylightTime.prototype.get_Delta = function () {
	return this.m_delta;
};
JSIL.MakeClass("System.Object", "System.Object", true);

JSIL.MakeClass("System.Object", "System.ValueType", true);

JSIL.MakeStruct("System.DateTime", true);

JSIL.MakeStruct("System.TimeSpan", true);

JSIL.OverloadedMethod(System.Globalization.DaylightTime.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.DateTime, System.DateTime, System.TimeSpan]]
	]);
JSIL.MakeProperty($asm08.System.Globalization.DaylightTime.prototype, "Start", 
	$asm08.System.Globalization.DaylightTime.prototype.get_Start, null);
JSIL.MakeProperty($asm08.System.Globalization.DaylightTime.prototype, "End", 
	$asm08.System.Globalization.DaylightTime.prototype.get_End, null);
JSIL.MakeProperty($asm08.System.Globalization.DaylightTime.prototype, "Delta", 
	$asm08.System.Globalization.DaylightTime.prototype.get_Delta, null);

Object.defineProperty($asm08.Microsoft.Win32.SystemExtras, "TIME_ZONE_ID_INVALID", {
		"value": -1}
);
Object.defineProperty($asm08.Microsoft.Win32.SystemExtras, "TIME_ZONE_ID_UNKNOWN", {
		"value": 0}
);
Object.defineProperty($asm08.Microsoft.Win32.SystemExtras, "TIME_ZONE_ID_STANDARD", {
		"value": 1}
);
Object.defineProperty($asm08.Microsoft.Win32.SystemExtras, "TIME_ZONE_ID_DAYLIGHT", {
		"value": 2}
);
Object.defineProperty($asm08.Microsoft.Win32.SystemExtras, "MAX_PATH", {
		"value": 260}
);
Object.defineProperty($asm08.Microsoft.Win32.SystemExtras, "MUI_LANGUAGE_ID", {
		"value": 4}
);
Object.defineProperty($asm08.Microsoft.Win32.SystemExtras, "MUI_LANGUAGE_NAME", {
		"value": 8}
);
Object.defineProperty($asm08.Microsoft.Win32.SystemExtras, "MUI_PREFERRED_UI_LANGUAGES", {
		"value": 16}
);
Object.defineProperty($asm08.Microsoft.Win32.SystemExtras, "MUI_INSTALLED_LANGUAGES", {
		"value": 32}
);
Object.defineProperty($asm08.Microsoft.Win32.SystemExtras, "MUI_ALL_LANGUAGES", {
		"value": 64}
);
Object.defineProperty($asm08.Microsoft.Win32.SystemExtras, "MUI_LANG_NEUTRAL_PE_FILE", {
		"value": 256}
);
Object.defineProperty($asm08.Microsoft.Win32.SystemExtras, "MUI_NON_LANG_NEUTRAL_FILE", {
		"value": 512}
);
Object.defineProperty($asm08.Microsoft.Win32.SystemExtras, "LOAD_LIBRARY_AS_DATAFILE", {
		"value": 2}
);
Object.defineProperty($asm08.Microsoft.Win32.SystemExtras, "LOAD_STRING_MAX_LENGTH", {
		"value": 500}
);

$asm08.Microsoft.Win32.SystemExtras.SystemTime.prototype.Year = 0;
$asm08.Microsoft.Win32.SystemExtras.SystemTime.prototype.Month = 0;
$asm08.Microsoft.Win32.SystemExtras.SystemTime.prototype.DayOfWeek = 0;
$asm08.Microsoft.Win32.SystemExtras.SystemTime.prototype.Day = 0;
$asm08.Microsoft.Win32.SystemExtras.SystemTime.prototype.Hour = 0;
$asm08.Microsoft.Win32.SystemExtras.SystemTime.prototype.Minute = 0;
$asm08.Microsoft.Win32.SystemExtras.SystemTime.prototype.Second = 0;
$asm08.Microsoft.Win32.SystemExtras.SystemTime.prototype.Milliseconds = 0;

$asm08.Microsoft.Win32.SystemExtras.TimeZoneInformation.prototype._ctor = function (dtzi) {
	this.Bias = dtzi.Bias;
	this.StandardName = dtzi.StandardName;
	this.StandardDate = dtzi.StandardDate.MemberwiseClone();
	this.StandardBias = dtzi.StandardBias;
	this.DaylightName = dtzi.DaylightName;
	this.DaylightDate = dtzi.DaylightDate.MemberwiseClone();
	this.DaylightBias = dtzi.DaylightBias;
};
$asm08.Microsoft.Win32.SystemExtras.TimeZoneInformation.prototype.Bias = 0;
$asm08.Microsoft.Win32.SystemExtras.TimeZoneInformation.prototype.StandardName = null;
$asm08.Microsoft.Win32.SystemExtras.TimeZoneInformation.prototype.StandardBias = 0;
$asm08.Microsoft.Win32.SystemExtras.TimeZoneInformation.prototype.DaylightName = null;
$asm08.Microsoft.Win32.SystemExtras.TimeZoneInformation.prototype.DaylightBias = 0;

$asm08.Microsoft.Win32.SystemExtras.DynamicTimeZoneInformation.prototype.Bias = 0;
$asm08.Microsoft.Win32.SystemExtras.DynamicTimeZoneInformation.prototype.StandardName = null;
$asm08.Microsoft.Win32.SystemExtras.DynamicTimeZoneInformation.prototype.StandardBias = 0;
$asm08.Microsoft.Win32.SystemExtras.DynamicTimeZoneInformation.prototype.DaylightName = null;
$asm08.Microsoft.Win32.SystemExtras.DynamicTimeZoneInformation.prototype.DaylightBias = 0;
$asm08.Microsoft.Win32.SystemExtras.DynamicTimeZoneInformation.prototype.TimeZoneKeyName = null;
$asm08.Microsoft.Win32.SystemExtras.DynamicTimeZoneInformation.prototype.DynamicDaylightTimeDisabled = false;

$asm08.Microsoft.Win32.SystemExtras.RegistryTimeZoneInformation.prototype._ctor$0 = function (tzi) {
	this.Bias = tzi.Bias;
	this.StandardDate = tzi.StandardDate.MemberwiseClone();
	this.StandardBias = tzi.StandardBias;
	this.DaylightDate = tzi.DaylightDate.MemberwiseClone();
	this.DaylightBias = tzi.DaylightBias;
};
$asm08.Microsoft.Win32.SystemExtras.RegistryTimeZoneInformation.prototype._ctor$1 = function (bytes) {
	if (!((bytes !== null) && (bytes.length === 44))) {
		throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm08.System.Core.SR.GetString$2("Argument_InvalidREG_TZI_FORMAT"), "bytes"]);
	}
	this.Bias = System.BitConverter.ToInt32(bytes, 0);
	this.StandardBias = System.BitConverter.ToInt32(bytes, 4);
	this.DaylightBias = System.BitConverter.ToInt32(bytes, 8);
	this.StandardDate.Year = System.BitConverter.ToInt16(bytes, 12);
	this.StandardDate.Month = System.BitConverter.ToInt16(bytes, 14);
	this.StandardDate.DayOfWeek = System.BitConverter.ToInt16(bytes, 16);
	this.StandardDate.Day = System.BitConverter.ToInt16(bytes, 18);
	this.StandardDate.Hour = System.BitConverter.ToInt16(bytes, 20);
	this.StandardDate.Minute = System.BitConverter.ToInt16(bytes, 22);
	this.StandardDate.Second = System.BitConverter.ToInt16(bytes, 24);
	this.StandardDate.Milliseconds = System.BitConverter.ToInt16(bytes, 26);
	this.DaylightDate.Year = System.BitConverter.ToInt16(bytes, 28);
	this.DaylightDate.Month = System.BitConverter.ToInt16(bytes, 30);
	this.DaylightDate.DayOfWeek = System.BitConverter.ToInt16(bytes, 32);
	this.DaylightDate.Day = System.BitConverter.ToInt16(bytes, 34);
	this.DaylightDate.Hour = System.BitConverter.ToInt16(bytes, 36);
	this.DaylightDate.Minute = System.BitConverter.ToInt16(bytes, 38);
	this.DaylightDate.Second = System.BitConverter.ToInt16(bytes, 40);
	this.DaylightDate.Milliseconds = System.BitConverter.ToInt16(bytes, 42);
};
JSIL.OverloadedMethod($asm08.Microsoft.Win32.SystemExtras.RegistryTimeZoneInformation.prototype, "_ctor", [
		["_ctor$0", [$asm08.Microsoft.Win32.SystemExtras.TimeZoneInformation]], 
		["_ctor$1", [System.Array.Of(System.Byte)]]
	]);
$asm08.Microsoft.Win32.SystemExtras.RegistryTimeZoneInformation.prototype.Bias = 0;
$asm08.Microsoft.Win32.SystemExtras.RegistryTimeZoneInformation.prototype.StandardBias = 0;
$asm08.Microsoft.Win32.SystemExtras.RegistryTimeZoneInformation.prototype.DaylightBias = 0;


$asm08.Microsoft.Win32.SafeLibraryHandle.prototype.ReleaseHandle = function () {
	return $asm08.Microsoft.Win32.UnsafeNativeMethods.FreeLibrary(this.handle);
};

$asm08.System.Collections.Generic.BitHelper.prototype._ctor = function (bitArray, length) {
	System.Object.prototype._ctor.call(this);
	this.m_array = bitArray;
	this.m_length = length;
};
$asm08.System.Collections.Generic.BitHelper.prototype.MarkBit = function (bitPosition) {
	if (this.useStackAlloc) {
		var num = Math.floor(bitPosition / 32);
		if (!((num >= this.m_length) || (num < 0))) {
			JSIL.UntranslatableInstruction("ldobj:Int32([mscorlib]System.Int32, add:int32*(ldfld:int32*(BitHelper::m_arrayPtr, ldloc:BitHelper(this)), mul:IntPtr(conv.i:IntPtr(ldloc:Int32[exp:IntPtr](num)), ldc.i4:IntPtr(4))))") |= (1 << ((bitPosition % 32) & 31));
			return;
		}
	} else {
		var num2 = Math.floor(bitPosition / 32);
		if (!((num2 >= this.m_length) || (num2 < 0))) {
			this.m_array[num2] |= (1 << ((bitPosition % 32) & 31));
		}
	}
};
$asm08.System.Collections.Generic.BitHelper.prototype.IsMarked = function (bitPosition) {
	if (this.useStackAlloc) {
		var num = Math.floor(bitPosition / 32);
		return (!((num >= this.m_length) || 
				(num < 0)) && ((JSIL.UntranslatableInstruction("ldobj:Int32([mscorlib]System.Int32, add:int32*(ldfld:int32*(BitHelper::m_arrayPtr, ldloc:BitHelper(this)), mul:IntPtr(conv.i:IntPtr(ldloc:Int32[exp:IntPtr](num)), ldc.i4:IntPtr(4))))") & (1 << ((bitPosition % 32) & 31))) !== 0));
	}
	var num2 = Math.floor(bitPosition / 32);
	return (!((num2 >= this.m_length) || 
			(num2 < 0)) && ((this.m_array[num2] & (1 << ((bitPosition % 32) & 31))) !== 0));
};
$asm08.System.Collections.Generic.BitHelper.ToIntArrayLength = function (n) {
	if (n <= 0) {
		return 0;
	}
	return (Math.floor((n - 1) / 32) + 1);
};
Object.defineProperty($asm08.System.Collections.Generic.BitHelper, "MarkedBitFlag", {
		"value": 1}
);
Object.defineProperty($asm08.System.Collections.Generic.BitHelper, "IntSize", {
		"value": 32}
);
$asm08.System.Collections.Generic.BitHelper.prototype.m_length = 0;
$asm08.System.Collections.Generic.BitHelper.prototype.m_array = null;
$asm08.System.Collections.Generic.BitHelper.prototype.useStackAlloc = false;

$asm08.System.Collections.Generic.HashHelpers.IsPrime = function (candidate) {
	if (candidate & 1) {
		var num = Math.floor(Math.sqrt(candidate));
	__loop0__: 
		for (var i = 3; i <= num; i += 2) {
			if (!(candidate % i)) {
				return false;
			}
		}
		return true;
	}
	return (candidate === 2);
};
$asm08.System.Collections.Generic.HashHelpers.GetPrime = function (min) {
__loop0__: 
	for (var i = 0; i < $asm08.System.Collections.Generic.HashHelpers.primes.length; ++i) {
		var num = $asm08.System.Collections.Generic.HashHelpers.primes[i];
		if (num >= min) {
			return num;
		}
	}
__loop1__: 
	for (var j = (min | 1); j < 2147483647; j += 2) {
		if ($asm08.System.Collections.Generic.HashHelpers.IsPrime(j)) {
			return j;
		}
	}
	return min;
};
$asm08.System.Collections.Generic.HashHelpers.GetMinPrime = function () {
	return $asm08.System.Collections.Generic.HashHelpers.primes[0];
};
$asm08.System.Collections.Generic.HashHelpers.primes = null;
$asm08.System.Collections.Generic.HashHelpers._cctor = function () {
	$asm08.System.Collections.Generic.HashHelpers.primes = JSIL.Array.New(System.Int32, [3, 7, 11, 17, 23, 29, 37, 47, 59, 71, 89, 107, 131, 163, 197, 239, 293, 353, 431, 521, 631, 761, 919, 1103, 1327, 1597, 1931, 2333, 2801, 3371, 4049, 4861, 5839, 7013, 8419, 10103, 12143, 14591, 17519, 21023, 25229, 30293, 36353, 43627, 52361, 62851, 75431, 90523, 108631, 130363, 156437, 187751, 225307, 270371, 324449, 389357, 467237, 560689, 672827, 807403, 968897, 1162687, 1395263, 1674319, 2009191, 2411033, 2893249, 3471899, 4166287, 4999559, 5999471, 7199369]);
};

System.Collections.Generic.HashSet$b1.prototype._ctor$0 = function () {
	this._ctor$1(System.Collections.Generic.EqualityComparer$b1.Of(this.T).Default);
};
System.Collections.Generic.HashSet$b1.prototype._ctor$1 = function (comparer) {
	System.Object.prototype._ctor.call(this);
	if (comparer === null) {
		comparer = System.Collections.Generic.EqualityComparer$b1.Of(this.T).Default;
	}
	this.m_comparer = comparer;
	this.m_lastIndex = 0;
	this.m_count = 0;
	this.m_freeList = -1;
	this.m_version = 0;
};
System.Collections.Generic.HashSet$b1.prototype._ctor$2 = function (collection) {
	this._ctor$3(collection, System.Collections.Generic.EqualityComparer$b1.Of(this.T).Default);
};
System.Collections.Generic.HashSet$b1.prototype._ctor$3 = function (collection, comparer) {
	this._ctor$1(comparer);
	if (collection === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["collection"]);
	}
	var capacity = 0;
	var collection2 = JSIL.TryCast(collection, System.Collections.Generic.ICollection$b1.Of(this.T));
	if (collection2 !== null) {
		capacity = collection2.ICollection$b1_Count;
	}
	this.Initialize(capacity);
	this.UnionWith(collection);
	if (!(!((this.m_count === 0) && 
				(this.m_slots.length > $asm08.System.Collections.Generic.HashHelpers.GetMinPrime())) && ((this.m_count <= 0) || 
				(Math.floor(this.m_slots.length / this.m_count) <= 3)))) {
		this.TrimExcess();
	}
};
System.Collections.Generic.HashSet$b1.prototype.ICollection$b1_Add = function (item) {
	this.AddIfNotPresent(item);
};
System.Collections.Generic.HashSet$b1.prototype.Clear = function () {
	if (this.m_lastIndex > 0) {
		System.Array.Clear(this.m_slots, 0, this.m_lastIndex);
		System.Array.Clear(this.m_buckets, 0, this.m_buckets.length);
		this.m_lastIndex = 0;
		this.m_count = 0;
		this.m_freeList = -1;
	}
	++this.m_version;
};
System.Collections.Generic.HashSet$b1.prototype.Contains = function (item) {
	if (this.m_buckets !== null) {
		var num = this.InternalGetHashCode(item);
	__loop0__: 
		for (var i = (this.m_buckets[(num % this.m_buckets.length)] - 1); i >= 0; i = this.m_slots[i].next) {
			if (!((this.m_slots[i].hashCode !== num) || !this.m_comparer.IEqualityComparer$b1_Equals(this.m_slots[i].value, item))) {
				return true;
			}
		}
	}
	return false;
};
System.Collections.Generic.HashSet$b1.prototype.CopyTo$0 = function (array, arrayIndex) {
	this.CopyTo$2(array, arrayIndex, this.m_count);
};
System.Collections.Generic.HashSet$b1.prototype.Remove = function (item) {
	if (this.m_buckets !== null) {
		var num = this.InternalGetHashCode(item);
		var num2 = (num % this.m_buckets.length);
		var num3 = -1;
	__loop0__: 
		for (var i = (this.m_buckets[num2] - 1); i >= 0; i = this.m_slots[i].next) {
			if (!((this.m_slots[i].hashCode !== num) || !this.m_comparer.IEqualityComparer$b1_Equals(this.m_slots[i].value, item))) {
				if (num3 < 0) {
					this.m_buckets[num2] = (this.m_slots[i].next + 1);
				} else {
					this.m_slots[num3].next = this.m_slots[i].next;
				}
				this.m_slots[i].hashCode = -1;
				this.m_slots[i].value = null;
				this.m_slots[i].next = this.m_freeList;
				--this.m_count;
				++this.m_version;
				if (this.m_count === 0) {
					this.m_lastIndex = 0;
					this.m_freeList = -1;
				} else {
					this.m_freeList = i;
				}
				return true;
			}
			num3 = i;
		}
	}
	return false;
};
System.Collections.Generic.HashSet$b1.prototype.get_Count = function () {
	return this.m_count;
};
System.Collections.Generic.HashSet$b1.prototype.ICollection$b1_get_IsReadOnly = function () {
	return false;
};
System.Collections.Generic.HashSet$b1.prototype.GetEnumerator = function () {
	return new ($asm08.System.Collections.Generic.HashSet$b1.Enumerator.Of(this.T)) (this);
};
System.Collections.Generic.HashSet$b1.prototype.IEnumerable$b1_GetEnumerator = function () {
	return new ($asm08.System.Collections.Generic.HashSet$b1.Enumerator.Of(this.T)) (this);
};
System.Collections.Generic.HashSet$b1.prototype.IEnumerable_GetEnumerator = function () {
	return new ($asm08.System.Collections.Generic.HashSet$b1.Enumerator.Of(this.T)) (this);
};
System.Collections.Generic.HashSet$b1.prototype.Add = function (item) {
	return this.AddIfNotPresent(item);
};
System.Collections.Generic.HashSet$b1.prototype.UnionWith = function (other) {
	if (other === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["other"]);
	}
	var enumerator = other.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current;
			this.AddIfNotPresent(current);
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
};
System.Collections.Generic.HashSet$b1.prototype.IntersectWith = function (other) {
	if (other === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["other"]);
	}
	if (this.m_count === 0) {
		return;
	}
	var collection = JSIL.TryCast(other, System.Collections.Generic.ICollection$b1.Of(this.T));
	if (collection !== null) {
		if (collection.ICollection$b1_Count === 0) {
			this.Clear();
			return;
		}
		var hashSet = JSIL.TryCast(other, System.Collections.Generic.HashSet$b1.Of(this.T));
		if (!((hashSet === null) || !System.Collections.Generic.HashSet$b1.Of(this.T).AreEqualityComparersEqual(this, hashSet))) {
			this.IntersectWithHashSetWithSameEC(hashSet);
			return;
		}
	}
	this.IntersectWithEnumerable(other);
};
System.Collections.Generic.HashSet$b1.prototype.ExceptWith = function (other) {
	if (other === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["other"]);
	}
	if (this.m_count === 0) {
		return;
	}
	if (other === this) {
		this.Clear();
		return;
	}
	var enumerator = other.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current;
			this.Remove(current);
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
};
System.Collections.Generic.HashSet$b1.prototype.SymmetricExceptWith = function (other) {
	if (other === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["other"]);
	}
	if (this.m_count === 0) {
		this.UnionWith(other);
		return;
	}
	if (other === this) {
		this.Clear();
		return;
	}
	var hashSet = JSIL.TryCast(other, System.Collections.Generic.HashSet$b1.Of(this.T));
	if (!((hashSet === null) || !System.Collections.Generic.HashSet$b1.Of(this.T).AreEqualityComparersEqual(this, hashSet))) {
		this.SymmetricExceptWithUniqueHashSet(hashSet);
		return;
	}
	this.SymmetricExceptWithEnumerable(other);
};
System.Collections.Generic.HashSet$b1.prototype.IsSubsetOf = function (other) {
	if (other === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["other"]);
	}
	if (this.m_count === 0) {
		return true;
	}
	var hashSet = JSIL.TryCast(other, System.Collections.Generic.HashSet$b1.Of(this.T));
	if (!((hashSet === null) || !System.Collections.Generic.HashSet$b1.Of(this.T).AreEqualityComparersEqual(this, hashSet))) {
		return ((this.m_count <= hashSet.Count) && this.IsSubsetOfHashSetWithSameEC(hashSet));
	}
	var elementCount = this.CheckUniqueAndUnfoundElements(other, false).MemberwiseClone();
	return ((elementCount.uniqueCount === this.m_count) && (elementCount.unfoundCount >= 0));
};
System.Collections.Generic.HashSet$b1.prototype.IsProperSubsetOf = function (other) {
	if (other === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["other"]);
	}
	var collection = JSIL.TryCast(other, System.Collections.Generic.ICollection$b1.Of(this.T));
	if (collection !== null) {
		if (this.m_count === 0) {
			return (collection.ICollection$b1_Count > 0);
		}
		var hashSet = JSIL.TryCast(other, System.Collections.Generic.HashSet$b1.Of(this.T));
		if (!((hashSet === null) || !System.Collections.Generic.HashSet$b1.Of(this.T).AreEqualityComparersEqual(this, hashSet))) {
			return ((this.m_count < hashSet.Count) && this.IsSubsetOfHashSetWithSameEC(hashSet));
		}
	}
	var elementCount = this.CheckUniqueAndUnfoundElements(other, false).MemberwiseClone();
	return ((elementCount.uniqueCount === this.m_count) && (elementCount.unfoundCount > 0));
};
System.Collections.Generic.HashSet$b1.prototype.IsSupersetOf = function (other) {
	if (other === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["other"]);
	}
	var collection = JSIL.TryCast(other, System.Collections.Generic.ICollection$b1.Of(this.T));
	if (collection !== null) {
		if (collection.ICollection$b1_Count === 0) {
			return true;
		}
		var hashSet = JSIL.TryCast(other, System.Collections.Generic.HashSet$b1.Of(this.T));
		if (!((hashSet === null) || 
				!System.Collections.Generic.HashSet$b1.Of(this.T).AreEqualityComparersEqual(this, hashSet) || (hashSet.Count <= this.m_count))) {
			return false;
		}
	}
	return this.ContainsAllElements(other);
};
System.Collections.Generic.HashSet$b1.prototype.IsProperSupersetOf = function (other) {
	if (other === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["other"]);
	}
	if (this.m_count === 0) {
		return false;
	}
	var collection = JSIL.TryCast(other, System.Collections.Generic.ICollection$b1.Of(this.T));
	if (collection !== null) {
		if (collection.ICollection$b1_Count === 0) {
			return true;
		}
		var hashSet = JSIL.TryCast(other, System.Collections.Generic.HashSet$b1.Of(this.T));
		if (!((hashSet === null) || !System.Collections.Generic.HashSet$b1.Of(this.T).AreEqualityComparersEqual(this, hashSet))) {
			return ((hashSet.Count < this.m_count) && this.ContainsAllElements(hashSet));
		}
	}
	var elementCount = this.CheckUniqueAndUnfoundElements(other, true).MemberwiseClone();
	return ((elementCount.uniqueCount < this.m_count) && (elementCount.unfoundCount === 0));
};
System.Collections.Generic.HashSet$b1.prototype.Overlaps = function (other) {
	if (other === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["other"]);
	}
	if (this.m_count === 0) {
		return false;
	}
	var enumerator = other.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current;
			if (this.Contains(current)) {
				return true;
			}
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	return false;
};
System.Collections.Generic.HashSet$b1.prototype.SetEquals = function (other) {
	if (other === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["other"]);
	}
	var hashSet = JSIL.TryCast(other, System.Collections.Generic.HashSet$b1.Of(this.T));
	if (!((hashSet === null) || !System.Collections.Generic.HashSet$b1.Of(this.T).AreEqualityComparersEqual(this, hashSet))) {
		return ((this.m_count === hashSet.Count) && this.ContainsAllElements(hashSet));
	}
	var collection = JSIL.TryCast(other, System.Collections.Generic.ICollection$b1.Of(this.T));
	if (!((collection === null) || 
			this.m_count || (collection.ICollection$b1_Count <= 0))) {
		return false;
	}
	var elementCount = this.CheckUniqueAndUnfoundElements(other, true).MemberwiseClone();
	return ((elementCount.uniqueCount === this.m_count) && (elementCount.unfoundCount === 0));
};
System.Collections.Generic.HashSet$b1.prototype.CopyTo$1 = function (array) {
	this.CopyTo$2(array, 0, this.m_count);
};
System.Collections.Generic.HashSet$b1.prototype.CopyTo$2 = function (array, arrayIndex, count) {
	if (array === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["array"]);
	}
	if (arrayIndex < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["arrayIndex", $asm08.System.Core.SR.GetString$2("ArgumentOutOfRange_NeedNonNegNum")]);
	}
	if (count < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["count", $asm08.System.Core.SR.GetString$2("ArgumentOutOfRange_NeedNonNegNum")]);
	}
	if (!((arrayIndex <= array.length) && (count <= (array.length - arrayIndex)))) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.SR.GetString$2("Arg_ArrayPlusOffTooSmall")]);
	}
	var num = 0;
__loop0__: 
	for (var num2 = 0; (num2 < this.m_lastIndex) && (num < count); ++num2) {
		if (this.m_slots[num2].hashCode >= 0) {
			array[(arrayIndex + num)] = this.m_slots[num2].value;
			++num;
		}
	}
};
System.Collections.Generic.HashSet$b1.prototype.RemoveWhere = function (match) {
	if (match === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["match"]);
	}
	var num = 0;
__loop0__: 
	for (var i = 0; i < this.m_lastIndex; ++i) {
		if (this.m_slots[i].hashCode >= 0) {
			var value = this.m_slots[i].value;
			if (!(!match(value) || !this.Remove(value))) {
				++num;
			}
		}
	}
	return num;
};
System.Collections.Generic.HashSet$b1.prototype.get_Comparer = function () {
	return this.m_comparer;
};
System.Collections.Generic.HashSet$b1.prototype.TrimExcess = function () {
	if (this.m_count === 0) {
		this.m_buckets = null;
		this.m_slots = null;
		++this.m_version;
		return;
	}
	var prime = $asm08.System.Collections.Generic.HashHelpers.GetPrime(this.m_count);
	var array = JSIL.Array.New($asm08.System.Collections.Generic.HashSet$b1.Slot.Of(this.T), prime);
	var array2 = JSIL.Array.New(System.Int32, prime);
	var num = 0;
__loop0__: 
	for (var i = 0; i < this.m_lastIndex; ++i) {
		if (this.m_slots[i].hashCode >= 0) {
			array[num] = this.m_slots[i].MemberwiseClone();
			var num2 = (array[num].hashCode % prime);
			array[num].next = (array2[num2] - 1);
			array2[num2] = (num + 1);
			++num;
		}
	}
	this.m_lastIndex = num;
	this.m_slots = array;
	this.m_buckets = array2;
	this.m_freeList = -1;
};
System.Collections.Generic.HashSet$b1.prototype.Initialize = function (capacity) {
	var prime = $asm08.System.Collections.Generic.HashHelpers.GetPrime(capacity);
	this.m_buckets = JSIL.Array.New(System.Int32, prime);
	this.m_slots = JSIL.Array.New($asm08.System.Collections.Generic.HashSet$b1.Slot.Of(this.T), prime);
};
System.Collections.Generic.HashSet$b1.prototype.IncreaseCapacity = function () {
	var num = (this.m_count * 2);
	if (num < 0) {
		num = this.m_count;
	}
	var prime = $asm08.System.Collections.Generic.HashHelpers.GetPrime(num);
	if (prime <= this.m_count) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.SR.GetString$2("Arg_HSCapacityOverflow")]);
	}
	var array = JSIL.Array.New($asm08.System.Collections.Generic.HashSet$b1.Slot.Of(this.T), prime);
	if (this.m_slots !== null) {
		System.Array.Copy$1(
			this.m_slots, 
			0, 
			array, 
			0, 
			this.m_lastIndex
		);
	}
	var array2 = JSIL.Array.New(System.Int32, prime);
__loop0__: 
	for (var i = 0; i < this.m_lastIndex; ++i) {
		var num2 = (array[i].hashCode % prime);
		array[i].next = (array2[num2] - 1);
		array2[num2] = (i + 1);
	}
	this.m_slots = array;
	this.m_buckets = array2;
};
System.Collections.Generic.HashSet$b1.prototype.AddIfNotPresent = function (value) {
	if (this.m_buckets === null) {
		this.Initialize(0);
	}
	var num = this.InternalGetHashCode(value);
	var num2 = (num % this.m_buckets.length);
__loop0__: 
	for (var i = (this.m_buckets[(num % this.m_buckets.length)] - 1); i >= 0; i = this.m_slots[i].next) {
		if (!((this.m_slots[i].hashCode !== num) || !this.m_comparer.IEqualityComparer$b1_Equals(this.m_slots[i].value, value))) {
			return false;
		}
	}
	if (this.m_freeList >= 0) {
		var num3 = this.m_freeList;
		this.m_freeList = this.m_slots[num3].next;
	} else {
		if (this.m_lastIndex === this.m_slots.length) {
			this.IncreaseCapacity();
			num2 = (num % this.m_buckets.length);
		}
		num3 = this.m_lastIndex;
		++this.m_lastIndex;
	}
	this.m_slots[num3].hashCode = num;
	this.m_slots[num3].value = value;
	this.m_slots[num3].next = (this.m_buckets[num2] - 1);
	this.m_buckets[num2] = (num3 + 1);
	++this.m_count;
	++this.m_version;
	return true;
};
System.Collections.Generic.HashSet$b1.prototype.ContainsAllElements = function (other) {
	var enumerator = other.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current;
			if (!this.Contains(current)) {
				return false;
			}
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	return true;
};
System.Collections.Generic.HashSet$b1.prototype.IsSubsetOfHashSetWithSameEC = function (other) {
	var enumerator = this.GetEnumerator().MemberwiseClone();
	try {
	__loop0__: 
		while (enumerator.MoveNext()) {
			var current = enumerator.Current;
			if (!other.Contains(current)) {
				return false;
			}
		}
	} finally {
		enumerator.IDisposable_Dispose();
	}
	return true;
};
System.Collections.Generic.HashSet$b1.prototype.IntersectWithHashSetWithSameEC = function (other) {
__loop0__: 
	for (var i = 0; i < this.m_lastIndex; ++i) {
		if (this.m_slots[i].hashCode >= 0) {
			var value = this.m_slots[i].value;
			if (!other.Contains(value)) {
				this.Remove(value);
			}
		}
	}
};
System.Collections.Generic.HashSet$b1.prototype.IntersectWithEnumerable = JSIL.UntranslatableFunction("System.Void System.Collections.Generic.HashSet`1::IntersectWithEnumerable(System.Collections.Generic.IEnumerable`1<T>)");
System.Collections.Generic.HashSet$b1.prototype.InternalIndexOf = function (item) {
	var num = this.InternalGetHashCode(item);
__loop0__: 
	for (var i = (this.m_buckets[(num % this.m_buckets.length)] - 1); i >= 0; i = this.m_slots[i].next) {
		if (!((this.m_slots[i].hashCode !== num) || !this.m_comparer.IEqualityComparer$b1_Equals(this.m_slots[i].value, item))) {
			return i;
		}
	}
	return -1;
};
System.Collections.Generic.HashSet$b1.prototype.SymmetricExceptWithUniqueHashSet = function (other) {
	var enumerator = other.GetEnumerator().MemberwiseClone();
	try {
	__loop0__: 
		while (enumerator.MoveNext()) {
			var current = enumerator.Current;
			if (!this.Remove(current)) {
				this.AddIfNotPresent(current);
			}
		}
	} finally {
		enumerator.IDisposable_Dispose();
	}
};
System.Collections.Generic.HashSet$b1.prototype.SymmetricExceptWithEnumerable = JSIL.UntranslatableFunction("System.Void System.Collections.Generic.HashSet`1::SymmetricExceptWithEnumerable(System.Collections.Generic.IEnumerable`1<T>)");
System.Collections.Generic.HashSet$b1.prototype.AddOrGetLocation = function (value, /* ref */ location) {
	var num = this.InternalGetHashCode(value);
	var num2 = (num % this.m_buckets.length);
__loop0__: 
	for (var i = (this.m_buckets[(num % this.m_buckets.length)] - 1); i >= 0; i = this.m_slots[i].next) {
		if (!((this.m_slots[i].hashCode !== num) || !this.m_comparer.IEqualityComparer$b1_Equals(this.m_slots[i].value, value))) {
			location.value = i;
			return false;
		}
	}
	if (this.m_freeList >= 0) {
		var num3 = this.m_freeList;
		this.m_freeList = this.m_slots[num3].next;
	} else {
		if (this.m_lastIndex === this.m_slots.length) {
			this.IncreaseCapacity();
			num2 = (num % this.m_buckets.length);
		}
		num3 = this.m_lastIndex;
		++this.m_lastIndex;
	}
	this.m_slots[num3].hashCode = num;
	this.m_slots[num3].value = value;
	this.m_slots[num3].next = (this.m_buckets[num2] - 1);
	this.m_buckets[num2] = (num3 + 1);
	++this.m_count;
	++this.m_version;
	location.value = num3;
	return true;
};
System.Collections.Generic.HashSet$b1.prototype.CheckUniqueAndUnfoundElements = JSIL.UntranslatableFunction("System.Collections.Generic.HashSet`1/ElementCount<T> System.Collections.Generic.HashSet`1::CheckUniqueAndUnfoundElements(System.Collections.Generic.IEnumerable`1<T>,System.Boolean)");
System.Collections.Generic.HashSet$b1.prototype.ToArray = function () {
	var array = JSIL.Array.New(this.T, this.Count);
	this.CopyTo$1(array);
	return array;
};
System.Collections.Generic.HashSet$b1.HashSetEquals = function (set1, set2, comparer) {
	if (set1 === null) {
		return (set2 === null);
	}
	if (set2 === null) {
		return false;
	}
	if (!System.Collections.Generic.HashSet$b1.Of(this.T).AreEqualityComparersEqual(set1, set2)) {
		var enumerator = set2.GetEnumerator().MemberwiseClone();
		try {
		__loop0__: 
			while (enumerator.MoveNext()) {
				var current = enumerator.Current;
				var flag = false;
				var enumerator2 = set1.GetEnumerator().MemberwiseClone();
				try {
				__loop1__: 
					while (enumerator2.MoveNext()) {
						var current2 = enumerator2.Current;
						if (comparer.IEqualityComparer$b1_Equals(current, current2)) {
							flag = true;
							break __loop1__;
						}
					}
				} finally {
					enumerator2.IDisposable_Dispose();
				}
				if (!flag) {
					var result = false;
					return result;
				}
			}
		} finally {
			enumerator.IDisposable_Dispose();
		}
		return true;
	}
	if (set1.Count !== set2.Count) {
		return false;
	}
	var enumerator3 = set2.GetEnumerator().MemberwiseClone();
	try {
	__loop2__: 
		while (enumerator3.MoveNext()) {
			var current3 = enumerator3.Current;
			if (!set1.Contains(current3)) {
				result = false;
				return result;
			}
		}
	} finally {
		enumerator3.IDisposable_Dispose();
	}
	return true;
};
System.Collections.Generic.HashSet$b1.AreEqualityComparersEqual = function (set1, set2) {
	return set1.Comparer.Equals(set2.Comparer);
};
System.Collections.Generic.HashSet$b1.prototype.InternalGetHashCode = function (item) {
	if (item === null) {
		return 0;
	}
	return (this.m_comparer.IEqualityComparer$b1_GetHashCode(item) & 2147483647);
};
JSIL.OverloadedMethod(System.Collections.Generic.HashSet$b1.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Collections.Generic.IEqualityComparer$b1.Of(JSIL.AnyType)]], 
		["_ctor$2", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType)]], 
		["_ctor$3", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Collections.Generic.IEqualityComparer$b1.Of(JSIL.AnyType)]]
	]);
JSIL.OverloadedMethod(System.Collections.Generic.HashSet$b1.prototype, "CopyTo", [
		["CopyTo$0", [System.Array.Of(JSIL.AnyType), System.Int32]], 
		["CopyTo$1", [System.Array.Of(JSIL.AnyType)]], 
		["CopyTo$2", [System.Array.Of(JSIL.AnyType), System.Int32, System.Int32]]
	]);
JSIL.MakeProperty(System.Collections.Generic.HashSet$b1.prototype, "Count", 
	System.Collections.Generic.HashSet$b1.prototype.get_Count, null);
JSIL.MakeProperty(System.Collections.Generic.HashSet$b1.prototype, "ICollection$b1_IsReadOnly", 
	System.Collections.Generic.HashSet$b1.prototype.ICollection$b1_get_IsReadOnly, null);
JSIL.MakeProperty(System.Collections.Generic.HashSet$b1.prototype, "Comparer", 
	System.Collections.Generic.HashSet$b1.prototype.get_Comparer, null);
Object.defineProperty(System.Collections.Generic.HashSet$b1, "Lower31BitMask", {
		"value": 2147483647}
);
Object.defineProperty(System.Collections.Generic.HashSet$b1, "GrowthFactor", {
		"value": 2}
);
Object.defineProperty(System.Collections.Generic.HashSet$b1, "StackAllocThreshold", {
		"value": 100}
);
Object.defineProperty(System.Collections.Generic.HashSet$b1, "ShrinkThreshold", {
		"value": 3}
);
System.Collections.Generic.HashSet$b1.prototype.m_buckets = null;
System.Collections.Generic.HashSet$b1.prototype.m_slots = null;
System.Collections.Generic.HashSet$b1.prototype.m_count = 0;
System.Collections.Generic.HashSet$b1.prototype.m_lastIndex = 0;
System.Collections.Generic.HashSet$b1.prototype.m_freeList = 0;
System.Collections.Generic.HashSet$b1.prototype.m_comparer = null;
System.Collections.Generic.HashSet$b1.prototype.m_version = 0;

$asm08.System.Collections.Generic.HashSet$b1.ElementCount.prototype.uniqueCount = 0;
$asm08.System.Collections.Generic.HashSet$b1.ElementCount.prototype.unfoundCount = 0;

$asm08.System.Collections.Generic.HashSet$b1.Slot.prototype.hashCode = 0;
$asm08.System.Collections.Generic.HashSet$b1.Slot.prototype.value = null;
$asm08.System.Collections.Generic.HashSet$b1.Slot.prototype.next = 0;

$asm08.System.Collections.Generic.HashSet$b1.Enumerator.prototype._ctor = function (set) {
	this.set = set;
	this.index = 0;
	this.version = set.m_version;
	this.current = null;
};
$asm08.System.Collections.Generic.HashSet$b1.Enumerator.prototype.Dispose = function () {
};
$asm08.System.Collections.Generic.HashSet$b1.Enumerator.prototype.MoveNext = function () {
	if (this.version !== this.set.m_version) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.SR.GetString$2("InvalidOperation_EnumFailedVersion")]);
	}
__loop0__: 
	while (this.index < this.set.m_lastIndex) {
		if (this.set.m_slots[this.index].hashCode >= 0) {
			this.current = this.set.m_slots[this.index].value;
			++this.index;
			return true;
		}
		++this.index;
	}
	this.index = (this.set.m_lastIndex + 1);
	this.current = null;
	return false;
};
$asm08.System.Collections.Generic.HashSet$b1.Enumerator.prototype.get_Current = function () {
	return this.current;
};
$asm08.System.Collections.Generic.HashSet$b1.Enumerator.prototype.IEnumerator_get_Current = function () {
	if (!((this.index !== 0) && (this.index !== (this.set.m_lastIndex + 1)))) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.SR.GetString$2("InvalidOperation_EnumOpCantHappen")]);
	}
	return this.Current;
};
$asm08.System.Collections.Generic.HashSet$b1.Enumerator.prototype.IEnumerator_Reset = function () {
	if (this.version !== this.set.m_version) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm08.System.Core.SR.GetString$2("InvalidOperation_EnumFailedVersion")]);
	}
	this.index = 0;
	this.current = null;
};
JSIL.MakeProperty($asm08.System.Collections.Generic.HashSet$b1.Enumerator.prototype, "Current", 
	$asm08.System.Collections.Generic.HashSet$b1.Enumerator.prototype.get_Current, null);
JSIL.MakeProperty($asm08.System.Collections.Generic.HashSet$b1.Enumerator.prototype, "IEnumerator_Current", 
	$asm08.System.Collections.Generic.HashSet$b1.Enumerator.prototype.IEnumerator_get_Current, null);
$asm08.System.Collections.Generic.HashSet$b1.Enumerator.prototype.set = null;
$asm08.System.Collections.Generic.HashSet$b1.Enumerator.prototype.index = 0;
$asm08.System.Collections.Generic.HashSet$b1.Enumerator.prototype.version = 0;
$asm08.System.Collections.Generic.HashSet$b1.Enumerator.prototype.current = null;

$asm08.System.Collections.Generic.HashSetDebugView$b1.prototype._ctor = function (set) {
	System.Object.prototype._ctor.call(this);
	if (set === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["set"]);
	}
	this.set = set;
};
$asm08.System.Collections.Generic.HashSetDebugView$b1.prototype.get_Items = function () {
	return this.set.ToArray();
};
JSIL.MakeProperty($asm08.System.Collections.Generic.HashSetDebugView$b1.prototype, "Items", 
	$asm08.System.Collections.Generic.HashSetDebugView$b1.prototype.get_Items, null);
$asm08.System.Collections.Generic.HashSetDebugView$b1.prototype.set = null;

System.Linq.Enumerable.Where$b1$0 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, predicate) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (predicate === null) {
			throw $asm08.System.Core.Error.ArgumentNull("predicate");
		}
		if (JSIL.TryCast(source, $asm08.System.Linq.Enumerable.Iterator$b1.Of(TSource)) !== null) {
			return JSIL.Cast(source, $asm08.System.Linq.Enumerable.Iterator$b1.Of(TSource)).Where(predicate);
		}
		if (JSIL.TryCast(source, System.Array.Of(TSource)) !== null) {
			return new ($asm08.System.Linq.Enumerable.WhereArrayIterator$b1.Of(TSource)) (JSIL.Cast(source, System.Array.Of(TSource)), predicate);
		}
		if (JSIL.TryCast(source, System.Collections.Generic.List$b1.Of(TSource)) !== null) {
			return new ($asm08.System.Linq.Enumerable.WhereListIterator$b1.Of(TSource)) (JSIL.Cast(source, System.Collections.Generic.List$b1.Of(TSource)), predicate);
		}
		return new ($asm08.System.Linq.Enumerable.WhereEnumerableIterator$b1.Of(TSource)) (source, predicate);
	}
);
System.Linq.Enumerable.Where$b1$1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, predicate) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (predicate === null) {
			throw $asm08.System.Core.Error.ArgumentNull("predicate");
		}
		return System.Linq.Enumerable.WhereIterator$b1(TSource)(source, predicate);
	}
);
System.Linq.Enumerable.WhereIterator$b1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, predicate) {
		var $lWhereIterator$gd__ = new ($asm08.System.Linq.Enumerable.$lWhereIterator$gd__0$b1.Of(TSource)) (-2);
		$lWhereIterator$gd__.$source = source;
		$lWhereIterator$gd__.$predicate = predicate;
		return $lWhereIterator$gd__;
	}
);
System.Linq.Enumerable.Select$b2$0 = JSIL.GenericMethod(
	["TSource", "TResult"], 
	function (TSource, TResult, source, selector) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (selector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("selector");
		}
		if (JSIL.TryCast(source, $asm08.System.Linq.Enumerable.Iterator$b1.Of(TSource)) !== null) {
			return JSIL.Cast(source, $asm08.System.Linq.Enumerable.Iterator$b1.Of(TSource)).Select$b1(TResult)(selector);
		}
		if (JSIL.TryCast(source, System.Array.Of(TSource)) !== null) {
			return new ($asm08.System.Linq.Enumerable.WhereSelectArrayIterator$b2.Of(TSource, TResult)) (JSIL.Cast(source, System.Array.Of(TSource)), null, selector);
		}
		if (JSIL.TryCast(source, System.Collections.Generic.List$b1.Of(TSource)) !== null) {
			return new ($asm08.System.Linq.Enumerable.WhereSelectListIterator$b2.Of(TSource, TResult)) (JSIL.Cast(source, System.Collections.Generic.List$b1.Of(TSource)), null, selector);
		}
		return new ($asm08.System.Linq.Enumerable.WhereSelectEnumerableIterator$b2.Of(TSource, TResult)) (source, null, selector);
	}
);
System.Linq.Enumerable.Select$b2$1 = JSIL.GenericMethod(
	["TSource", "TResult"], 
	function (TSource, TResult, source, selector) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (selector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("selector");
		}
		return System.Linq.Enumerable.SelectIterator$b2(TSource, TResult)(source, selector);
	}
);
System.Linq.Enumerable.SelectIterator$b2 = JSIL.GenericMethod(
	["TSource", "TResult"], 
	function (TSource, TResult, source, selector) {
		var $lSelectIterator$gd__ = new ($asm08.System.Linq.Enumerable.$lSelectIterator$gd__7$b2.Of(TSource, TResult)) (-2);
		$lSelectIterator$gd__.$source = source;
		$lSelectIterator$gd__.$selector = selector;
		return $lSelectIterator$gd__;
	}
);
System.Linq.Enumerable.CombinePredicates$b1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, predicate1, predicate2) {
		var $l$gc__DisplayClassf = new ($asm08.System.Linq.Enumerable.$l$gc__DisplayClassf$b1.Of(TSource)) ();
		$l$gc__DisplayClassf.predicate1 = predicate1;
		$l$gc__DisplayClassf.predicate2 = predicate2;
		return function (x) {
			return ($l$gc__DisplayClassf.predicate1(x) && $l$gc__DisplayClassf.predicate2(x));
		};
	}
);
System.Linq.Enumerable.CombineSelectors$b3 = JSIL.GenericMethod(
	["TSource", "TMiddle", "TResult"], 
	function (TSource, TMiddle, TResult, selector1, selector2) {
		var $l$gc__DisplayClass = new ($asm08.System.Linq.Enumerable.$l$gc__DisplayClass12$b3.Of(TSource, TMiddle, TResult)) ();
		$l$gc__DisplayClass.selector1 = selector1;
		$l$gc__DisplayClass.selector2 = selector2;
		return function (x) {
			return $l$gc__DisplayClass.selector2($l$gc__DisplayClass.selector1(x));
		};
	}
);
System.Linq.Enumerable.SelectMany$b2$0 = JSIL.GenericMethod(
	["TSource", "TResult"], 
	function (TSource, TResult, source, selector) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (selector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("selector");
		}
		return System.Linq.Enumerable.SelectManyIterator$b2$0(TSource, TResult)(source, selector);
	}
);
System.Linq.Enumerable.SelectManyIterator$b2$0 = JSIL.GenericMethod(
	["TSource", "TResult"], 
	function (TSource, TResult, source, selector) {
		var $lSelectManyIterator$gd__ = new ($asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__14$b2.Of(TSource, TResult)) (-2);
		$lSelectManyIterator$gd__.$source = source;
		$lSelectManyIterator$gd__.$selector = selector;
		return $lSelectManyIterator$gd__;
	}
);
System.Linq.Enumerable.SelectMany$b2$1 = JSIL.GenericMethod(
	["TSource", "TResult"], 
	function (TSource, TResult, source, selector) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (selector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("selector");
		}
		return System.Linq.Enumerable.SelectManyIterator$b2$1(TSource, TResult)(source, selector);
	}
);
System.Linq.Enumerable.SelectManyIterator$b2$1 = JSIL.GenericMethod(
	["TSource", "TResult"], 
	function (TSource, TResult, source, selector) {
		var $lSelectManyIterator$gd__1d = new ($asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__1d$b2.Of(TSource, TResult)) (-2);
		$lSelectManyIterator$gd__1d.$source = source;
		$lSelectManyIterator$gd__1d.$selector = selector;
		return $lSelectManyIterator$gd__1d;
	}
);
System.Linq.Enumerable.SelectMany$b3$0 = JSIL.GenericMethod(
	["TSource", "TCollection", "TResult"], 
	function (TSource, TCollection, TResult, source, collectionSelector, resultSelector) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (collectionSelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("collectionSelector");
		}
		if (resultSelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("resultSelector");
		}
		return System.Linq.Enumerable.SelectManyIterator$b3$0(TSource, TCollection, TResult)(source, collectionSelector, resultSelector);
	}
);
System.Linq.Enumerable.SelectManyIterator$b3$0 = JSIL.GenericMethod(
	["TSource", "TCollection", "TResult"], 
	function (TSource, TCollection, TResult, source, collectionSelector, resultSelector) {
		var $lSelectManyIterator$gd__ = new ($asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__27$b3.Of(TSource, TCollection, TResult)) (-2);
		$lSelectManyIterator$gd__.$source = source;
		$lSelectManyIterator$gd__.$collectionSelector = collectionSelector;
		$lSelectManyIterator$gd__.$resultSelector = resultSelector;
		return $lSelectManyIterator$gd__;
	}
);
System.Linq.Enumerable.SelectMany$b3$1 = JSIL.GenericMethod(
	["TSource", "TCollection", "TResult"], 
	function (TSource, TCollection, TResult, source, collectionSelector, resultSelector) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (collectionSelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("collectionSelector");
		}
		if (resultSelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("resultSelector");
		}
		return System.Linq.Enumerable.SelectManyIterator$b3$1(TSource, TCollection, TResult)(source, collectionSelector, resultSelector);
	}
);
System.Linq.Enumerable.SelectManyIterator$b3$1 = JSIL.GenericMethod(
	["TSource", "TCollection", "TResult"], 
	function (TSource, TCollection, TResult, source, collectionSelector, resultSelector) {
		var $lSelectManyIterator$gd__ = new ($asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__31$b3.Of(TSource, TCollection, TResult)) (-2);
		$lSelectManyIterator$gd__.$source = source;
		$lSelectManyIterator$gd__.$collectionSelector = collectionSelector;
		$lSelectManyIterator$gd__.$resultSelector = resultSelector;
		return $lSelectManyIterator$gd__;
	}
);
System.Linq.Enumerable.Take$b1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, count) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		return System.Linq.Enumerable.TakeIterator$b1(TSource)(source, count);
	}
);
System.Linq.Enumerable.TakeIterator$b1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, count) {
		var $lTakeIterator$gd__3a = new ($asm08.System.Linq.Enumerable.$lTakeIterator$gd__3a$b1.Of(TSource)) (-2);
		$lTakeIterator$gd__3a.$source = source;
		$lTakeIterator$gd__3a.$count = count;
		return $lTakeIterator$gd__3a;
	}
);
System.Linq.Enumerable.TakeWhile$b1$0 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, predicate) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (predicate === null) {
			throw $asm08.System.Core.Error.ArgumentNull("predicate");
		}
		return System.Linq.Enumerable.TakeWhileIterator$b1$0(TSource)(source, predicate);
	}
);
System.Linq.Enumerable.TakeWhileIterator$b1$0 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, predicate) {
		var $lTakeWhileIterator$gd__ = new ($asm08.System.Linq.Enumerable.$lTakeWhileIterator$gd__40$b1.Of(TSource)) (-2);
		$lTakeWhileIterator$gd__.$source = source;
		$lTakeWhileIterator$gd__.$predicate = predicate;
		return $lTakeWhileIterator$gd__;
	}
);
System.Linq.Enumerable.TakeWhile$b1$1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, predicate) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (predicate === null) {
			throw $asm08.System.Core.Error.ArgumentNull("predicate");
		}
		return System.Linq.Enumerable.TakeWhileIterator$b1$1(TSource)(source, predicate);
	}
);
System.Linq.Enumerable.TakeWhileIterator$b1$1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, predicate) {
		var $lTakeWhileIterator$gd__ = new ($asm08.System.Linq.Enumerable.$lTakeWhileIterator$gd__46$b1.Of(TSource)) (-2);
		$lTakeWhileIterator$gd__.$source = source;
		$lTakeWhileIterator$gd__.$predicate = predicate;
		return $lTakeWhileIterator$gd__;
	}
);
System.Linq.Enumerable.Skip$b1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, count) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		return System.Linq.Enumerable.SkipIterator$b1(TSource)(source, count);
	}
);
System.Linq.Enumerable.SkipIterator$b1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, count) {
		var $lSkipIterator$gd__4d = new ($asm08.System.Linq.Enumerable.$lSkipIterator$gd__4d$b1.Of(TSource)) (-2);
		$lSkipIterator$gd__4d.$source = source;
		$lSkipIterator$gd__4d.$count = count;
		return $lSkipIterator$gd__4d;
	}
);
System.Linq.Enumerable.SkipWhile$b1$0 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, predicate) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (predicate === null) {
			throw $asm08.System.Core.Error.ArgumentNull("predicate");
		}
		return System.Linq.Enumerable.SkipWhileIterator$b1$0(TSource)(source, predicate);
	}
);
System.Linq.Enumerable.SkipWhileIterator$b1$0 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, predicate) {
		var $lSkipWhileIterator$gd__ = new ($asm08.System.Linq.Enumerable.$lSkipWhileIterator$gd__52$b1.Of(TSource)) (-2);
		$lSkipWhileIterator$gd__.$source = source;
		$lSkipWhileIterator$gd__.$predicate = predicate;
		return $lSkipWhileIterator$gd__;
	}
);
System.Linq.Enumerable.SkipWhile$b1$1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, predicate) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (predicate === null) {
			throw $asm08.System.Core.Error.ArgumentNull("predicate");
		}
		return System.Linq.Enumerable.SkipWhileIterator$b1$1(TSource)(source, predicate);
	}
);
System.Linq.Enumerable.SkipWhileIterator$b1$1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, predicate) {
		var $lSkipWhileIterator$gd__ = new ($asm08.System.Linq.Enumerable.$lSkipWhileIterator$gd__59$b1.Of(TSource)) (-2);
		$lSkipWhileIterator$gd__.$source = source;
		$lSkipWhileIterator$gd__.$predicate = predicate;
		return $lSkipWhileIterator$gd__;
	}
);
System.Linq.Enumerable.Join$b4$0 = JSIL.GenericMethod(
	["TOuter", "TInner", "TKey", "TResult"], 
	function (TOuter, TInner, TKey, TResult, outer, inner, outerKeySelector, innerKeySelector, resultSelector) {
		if (outer === null) {
			throw $asm08.System.Core.Error.ArgumentNull("outer");
		}
		if (inner === null) {
			throw $asm08.System.Core.Error.ArgumentNull("inner");
		}
		if (outerKeySelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("outerKeySelector");
		}
		if (innerKeySelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("innerKeySelector");
		}
		if (resultSelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("resultSelector");
		}
		return System.Linq.Enumerable.JoinIterator$b4(TOuter, TInner, TKey, TResult)(
			outer, 
			inner, 
			outerKeySelector, 
			innerKeySelector, 
			resultSelector, 
			null
		);
	}
);
System.Linq.Enumerable.Join$b4$1 = JSIL.GenericMethod(
	["TOuter", "TInner", "TKey", "TResult"], 
	function (TOuter, TInner, TKey, TResult, outer, inner, outerKeySelector, innerKeySelector, resultSelector, comparer) {
		if (outer === null) {
			throw $asm08.System.Core.Error.ArgumentNull("outer");
		}
		if (inner === null) {
			throw $asm08.System.Core.Error.ArgumentNull("inner");
		}
		if (outerKeySelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("outerKeySelector");
		}
		if (innerKeySelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("innerKeySelector");
		}
		if (resultSelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("resultSelector");
		}
		return System.Linq.Enumerable.JoinIterator$b4(TOuter, TInner, TKey, TResult)(
			outer, 
			inner, 
			outerKeySelector, 
			innerKeySelector, 
			resultSelector, 
			comparer
		);
	}
);
System.Linq.Enumerable.JoinIterator$b4 = JSIL.GenericMethod(
	["TOuter", "TInner", "TKey", "TResult"], 
	function (TOuter, TInner, TKey, TResult, outer, inner, outerKeySelector, innerKeySelector, resultSelector, comparer) {
		var $lJoinIterator$gd__ = new ($asm08.System.Linq.Enumerable.$lJoinIterator$gd__61$b4.Of(TOuter, TInner, TKey, TResult)) (-2);
		$lJoinIterator$gd__.$outer = outer;
		$lJoinIterator$gd__.$inner = inner;
		$lJoinIterator$gd__.$outerKeySelector = outerKeySelector;
		$lJoinIterator$gd__.$innerKeySelector = innerKeySelector;
		$lJoinIterator$gd__.$resultSelector = resultSelector;
		$lJoinIterator$gd__.$comparer = comparer;
		return $lJoinIterator$gd__;
	}
);
System.Linq.Enumerable.GroupJoin$b4$0 = JSIL.GenericMethod(
	["TOuter", "TInner", "TKey", "TResult"], 
	function (TOuter, TInner, TKey, TResult, outer, inner, outerKeySelector, innerKeySelector, resultSelector) {
		if (outer === null) {
			throw $asm08.System.Core.Error.ArgumentNull("outer");
		}
		if (inner === null) {
			throw $asm08.System.Core.Error.ArgumentNull("inner");
		}
		if (outerKeySelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("outerKeySelector");
		}
		if (innerKeySelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("innerKeySelector");
		}
		if (resultSelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("resultSelector");
		}
		return System.Linq.Enumerable.GroupJoinIterator$b4(TOuter, TInner, TKey, TResult)(
			outer, 
			inner, 
			outerKeySelector, 
			innerKeySelector, 
			resultSelector, 
			null
		);
	}
);
System.Linq.Enumerable.GroupJoin$b4$1 = JSIL.GenericMethod(
	["TOuter", "TInner", "TKey", "TResult"], 
	function (TOuter, TInner, TKey, TResult, outer, inner, outerKeySelector, innerKeySelector, resultSelector, comparer) {
		if (outer === null) {
			throw $asm08.System.Core.Error.ArgumentNull("outer");
		}
		if (inner === null) {
			throw $asm08.System.Core.Error.ArgumentNull("inner");
		}
		if (outerKeySelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("outerKeySelector");
		}
		if (innerKeySelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("innerKeySelector");
		}
		if (resultSelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("resultSelector");
		}
		return System.Linq.Enumerable.GroupJoinIterator$b4(TOuter, TInner, TKey, TResult)(
			outer, 
			inner, 
			outerKeySelector, 
			innerKeySelector, 
			resultSelector, 
			comparer
		);
	}
);
System.Linq.Enumerable.GroupJoinIterator$b4 = JSIL.GenericMethod(
	["TOuter", "TInner", "TKey", "TResult"], 
	function (TOuter, TInner, TKey, TResult, outer, inner, outerKeySelector, innerKeySelector, resultSelector, comparer) {
		var $lGroupJoinIterator$gd__6a = new ($asm08.System.Linq.Enumerable.$lGroupJoinIterator$gd__6a$b4.Of(TOuter, TInner, TKey, TResult)) (-2);
		$lGroupJoinIterator$gd__6a.$outer = outer;
		$lGroupJoinIterator$gd__6a.$inner = inner;
		$lGroupJoinIterator$gd__6a.$outerKeySelector = outerKeySelector;
		$lGroupJoinIterator$gd__6a.$innerKeySelector = innerKeySelector;
		$lGroupJoinIterator$gd__6a.$resultSelector = resultSelector;
		$lGroupJoinIterator$gd__6a.$comparer = comparer;
		return $lGroupJoinIterator$gd__6a;
	}
);
System.Linq.Enumerable.OrderBy$b2$0 = JSIL.GenericMethod(
	["TSource", "TKey"], 
	function (TSource, TKey, source, keySelector) {
		return new ($asm08.System.Linq.OrderedEnumerable$b2.Of(TSource, TKey)) (source, keySelector, null, false);
	}
);
System.Linq.Enumerable.OrderBy$b2$1 = JSIL.GenericMethod(
	["TSource", "TKey"], 
	function (TSource, TKey, source, keySelector, comparer) {
		return new ($asm08.System.Linq.OrderedEnumerable$b2.Of(TSource, TKey)) (source, keySelector, comparer, false);
	}
);
System.Linq.Enumerable.OrderByDescending$b2$0 = JSIL.GenericMethod(
	["TSource", "TKey"], 
	function (TSource, TKey, source, keySelector) {
		return new ($asm08.System.Linq.OrderedEnumerable$b2.Of(TSource, TKey)) (source, keySelector, null, true);
	}
);
System.Linq.Enumerable.OrderByDescending$b2$1 = JSIL.GenericMethod(
	["TSource", "TKey"], 
	function (TSource, TKey, source, keySelector, comparer) {
		return new ($asm08.System.Linq.OrderedEnumerable$b2.Of(TSource, TKey)) (source, keySelector, comparer, true);
	}
);
System.Linq.Enumerable.ThenBy$b2$0 = JSIL.GenericMethod(
	["TSource", "TKey"], 
	function (TSource, TKey, source, keySelector) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		return source.IOrderedEnumerable$b1_CreateOrderedEnumerable$b1(TKey)(keySelector, null, false);
	}
);
System.Linq.Enumerable.ThenBy$b2$1 = JSIL.GenericMethod(
	["TSource", "TKey"], 
	function (TSource, TKey, source, keySelector, comparer) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		return source.IOrderedEnumerable$b1_CreateOrderedEnumerable$b1(TKey)(keySelector, comparer, false);
	}
);
System.Linq.Enumerable.ThenByDescending$b2$0 = JSIL.GenericMethod(
	["TSource", "TKey"], 
	function (TSource, TKey, source, keySelector) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		return source.IOrderedEnumerable$b1_CreateOrderedEnumerable$b1(TKey)(keySelector, null, true);
	}
);
System.Linq.Enumerable.ThenByDescending$b2$1 = JSIL.GenericMethod(
	["TSource", "TKey"], 
	function (TSource, TKey, source, keySelector, comparer) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		return source.IOrderedEnumerable$b1_CreateOrderedEnumerable$b1(TKey)(keySelector, comparer, true);
	}
);
System.Linq.Enumerable.GroupBy$b2$0 = JSIL.GenericMethod(
	["TSource", "TKey"], 
	function (TSource, TKey, source, keySelector) {
		return new ($asm08.System.Linq.GroupedEnumerable$b3.Of(TSource, TKey, TSource)) (source, keySelector, $asm08.System.Linq.IdentityFunction$b1.Of(TSource).Instance, null);
	}
);
System.Linq.Enumerable.GroupBy$b2$1 = JSIL.GenericMethod(
	["TSource", "TKey"], 
	function (TSource, TKey, source, keySelector, comparer) {
		return new ($asm08.System.Linq.GroupedEnumerable$b3.Of(TSource, TKey, TSource)) (source, keySelector, $asm08.System.Linq.IdentityFunction$b1.Of(TSource).Instance, comparer);
	}
);
System.Linq.Enumerable.GroupBy$b3$0 = JSIL.GenericMethod(
	["TSource", "TKey", "TElement"], 
	function (TSource, TKey, TElement, source, keySelector, elementSelector) {
		return new ($asm08.System.Linq.GroupedEnumerable$b3.Of(TSource, TKey, TElement)) (source, keySelector, elementSelector, null);
	}
);
System.Linq.Enumerable.GroupBy$b3$1 = JSIL.GenericMethod(
	["TSource", "TKey", "TElement"], 
	function (TSource, TKey, TElement, source, keySelector, elementSelector, comparer) {
		return new ($asm08.System.Linq.GroupedEnumerable$b3.Of(TSource, TKey, TElement)) (source, keySelector, elementSelector, comparer);
	}
);
System.Linq.Enumerable.GroupBy$b3$2 = JSIL.GenericMethod(
	["TSource", "TKey", "TResult"], 
	function (TSource, TKey, TResult, source, keySelector, resultSelector) {
		return new ($asm08.System.Linq.GroupedEnumerable$b4.Of(TSource, TKey, TSource, TResult)) (source, keySelector, $asm08.System.Linq.IdentityFunction$b1.Of(TSource).Instance, resultSelector, null);
	}
);
System.Linq.Enumerable.GroupBy$b4$0 = JSIL.GenericMethod(
	["TSource", "TKey", "TElement", "TResult"], 
	function (TSource, TKey, TElement, TResult, source, keySelector, elementSelector, resultSelector) {
		return new ($asm08.System.Linq.GroupedEnumerable$b4.Of(TSource, TKey, TElement, TResult)) (source, keySelector, elementSelector, resultSelector, null);
	}
);
System.Linq.Enumerable.GroupBy$b3$3 = JSIL.GenericMethod(
	["TSource", "TKey", "TResult"], 
	function (TSource, TKey, TResult, source, keySelector, resultSelector, comparer) {
		return new ($asm08.System.Linq.GroupedEnumerable$b4.Of(TSource, TKey, TSource, TResult)) (source, keySelector, $asm08.System.Linq.IdentityFunction$b1.Of(TSource).Instance, resultSelector, comparer);
	}
);
System.Linq.Enumerable.GroupBy$b4$1 = JSIL.GenericMethod(
	["TSource", "TKey", "TElement", "TResult"], 
	function (TSource, TKey, TElement, TResult, source, keySelector, elementSelector, resultSelector, comparer) {
		return new ($asm08.System.Linq.GroupedEnumerable$b4.Of(TSource, TKey, TElement, TResult)) (source, keySelector, elementSelector, resultSelector, comparer);
	}
);
System.Linq.Enumerable.Concat$b1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, first, second) {
		if (first === null) {
			throw $asm08.System.Core.Error.ArgumentNull("first");
		}
		if (second === null) {
			throw $asm08.System.Core.Error.ArgumentNull("second");
		}
		return System.Linq.Enumerable.ConcatIterator$b1(TSource)(first, second);
	}
);
System.Linq.Enumerable.ConcatIterator$b1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, first, second) {
		var $lConcatIterator$gd__ = new ($asm08.System.Linq.Enumerable.$lConcatIterator$gd__71$b1.Of(TSource)) (-2);
		$lConcatIterator$gd__.$first = first;
		$lConcatIterator$gd__.$second = second;
		return $lConcatIterator$gd__;
	}
);
System.Linq.Enumerable.Zip$b3 = JSIL.GenericMethod(
	["TFirst", "TSecond", "TResult"], 
	function (TFirst, TSecond, TResult, first, second, resultSelector) {
		if (first === null) {
			throw $asm08.System.Core.Error.ArgumentNull("first");
		}
		if (second === null) {
			throw $asm08.System.Core.Error.ArgumentNull("second");
		}
		if (resultSelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("resultSelector");
		}
		return System.Linq.Enumerable.ZipIterator$b3(TFirst, TSecond, TResult)(first, second, resultSelector);
	}
);
System.Linq.Enumerable.ZipIterator$b3 = JSIL.GenericMethod(
	["TFirst", "TSecond", "TResult"], 
	function (TFirst, TSecond, TResult, first, second, resultSelector) {
		var $lZipIterator$gd__7a = new ($asm08.System.Linq.Enumerable.$lZipIterator$gd__7a$b3.Of(TFirst, TSecond, TResult)) (-2);
		$lZipIterator$gd__7a.$first = first;
		$lZipIterator$gd__7a.$second = second;
		$lZipIterator$gd__7a.$resultSelector = resultSelector;
		return $lZipIterator$gd__7a;
	}
);
System.Linq.Enumerable.Distinct$b1$0 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		return System.Linq.Enumerable.DistinctIterator$b1(TSource)(source, null);
	}
);
System.Linq.Enumerable.Distinct$b1$1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, comparer) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		return System.Linq.Enumerable.DistinctIterator$b1(TSource)(source, comparer);
	}
);
System.Linq.Enumerable.DistinctIterator$b1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, comparer) {
		var $lDistinctIterator$gd__ = new ($asm08.System.Linq.Enumerable.$lDistinctIterator$gd__81$b1.Of(TSource)) (-2);
		$lDistinctIterator$gd__.$source = source;
		$lDistinctIterator$gd__.$comparer = comparer;
		return $lDistinctIterator$gd__;
	}
);
System.Linq.Enumerable.Union$b1$0 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, first, second) {
		if (first === null) {
			throw $asm08.System.Core.Error.ArgumentNull("first");
		}
		if (second === null) {
			throw $asm08.System.Core.Error.ArgumentNull("second");
		}
		return System.Linq.Enumerable.UnionIterator$b1(TSource)(first, second, null);
	}
);
System.Linq.Enumerable.Union$b1$1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, first, second, comparer) {
		if (first === null) {
			throw $asm08.System.Core.Error.ArgumentNull("first");
		}
		if (second === null) {
			throw $asm08.System.Core.Error.ArgumentNull("second");
		}
		return System.Linq.Enumerable.UnionIterator$b1(TSource)(first, second, comparer);
	}
);
System.Linq.Enumerable.UnionIterator$b1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, first, second, comparer) {
		var $lUnionIterator$gd__ = new ($asm08.System.Linq.Enumerable.$lUnionIterator$gd__88$b1.Of(TSource)) (-2);
		$lUnionIterator$gd__.$first = first;
		$lUnionIterator$gd__.$second = second;
		$lUnionIterator$gd__.$comparer = comparer;
		return $lUnionIterator$gd__;
	}
);
System.Linq.Enumerable.Intersect$b1$0 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, first, second) {
		if (first === null) {
			throw $asm08.System.Core.Error.ArgumentNull("first");
		}
		if (second === null) {
			throw $asm08.System.Core.Error.ArgumentNull("second");
		}
		return System.Linq.Enumerable.IntersectIterator$b1(TSource)(first, second, null);
	}
);
System.Linq.Enumerable.Intersect$b1$1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, first, second, comparer) {
		if (first === null) {
			throw $asm08.System.Core.Error.ArgumentNull("first");
		}
		if (second === null) {
			throw $asm08.System.Core.Error.ArgumentNull("second");
		}
		return System.Linq.Enumerable.IntersectIterator$b1(TSource)(first, second, comparer);
	}
);
System.Linq.Enumerable.IntersectIterator$b1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, first, second, comparer) {
		var $lIntersectIterator$gd__ = new ($asm08.System.Linq.Enumerable.$lIntersectIterator$gd__92$b1.Of(TSource)) (-2);
		$lIntersectIterator$gd__.$first = first;
		$lIntersectIterator$gd__.$second = second;
		$lIntersectIterator$gd__.$comparer = comparer;
		return $lIntersectIterator$gd__;
	}
);
System.Linq.Enumerable.Except$b1$0 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, first, second) {
		if (first === null) {
			throw $asm08.System.Core.Error.ArgumentNull("first");
		}
		if (second === null) {
			throw $asm08.System.Core.Error.ArgumentNull("second");
		}
		return System.Linq.Enumerable.ExceptIterator$b1(TSource)(first, second, null);
	}
);
System.Linq.Enumerable.Except$b1$1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, first, second, comparer) {
		if (first === null) {
			throw $asm08.System.Core.Error.ArgumentNull("first");
		}
		if (second === null) {
			throw $asm08.System.Core.Error.ArgumentNull("second");
		}
		return System.Linq.Enumerable.ExceptIterator$b1(TSource)(first, second, comparer);
	}
);
System.Linq.Enumerable.ExceptIterator$b1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, first, second, comparer) {
		var $lExceptIterator$gd__ = new ($asm08.System.Linq.Enumerable.$lExceptIterator$gd__99$b1.Of(TSource)) (-2);
		$lExceptIterator$gd__.$first = first;
		$lExceptIterator$gd__.$second = second;
		$lExceptIterator$gd__.$comparer = comparer;
		return $lExceptIterator$gd__;
	}
);
System.Linq.Enumerable.Reverse$b1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		return System.Linq.Enumerable.ReverseIterator$b1(TSource)(source);
	}
);
System.Linq.Enumerable.ReverseIterator$b1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source) {
		var $lReverseIterator$gd__a = new ($asm08.System.Linq.Enumerable.$lReverseIterator$gd__a0$b1.Of(TSource)) (-2);
		$lReverseIterator$gd__a.$source = source;
		return $lReverseIterator$gd__a;
	}
);
System.Linq.Enumerable.SequenceEqual$b1$0 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, first, second) {
		return System.Linq.Enumerable.SequenceEqual$b1$1(TSource)(first, second, null);
	}
);
System.Linq.Enumerable.SequenceEqual$b1$1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, first, second, comparer) {
		if (comparer === null) {
			comparer = JSIL.Cast(System.Collections.Generic.EqualityComparer$b1.Of(TSource).Default, System.Collections.Generic.IEqualityComparer$b1.Of(TSource));
		}
		if (first === null) {
			throw $asm08.System.Core.Error.ArgumentNull("first");
		}
		if (second === null) {
			throw $asm08.System.Core.Error.ArgumentNull("second");
		}
		var enumerator = first.IEnumerable$b1_GetEnumerator();
		try {
			var enumerator2 = second.IEnumerable$b1_GetEnumerator();
			try {
			__loop0__: 
				while (enumerator.IEnumerator_MoveNext()) {
					if (!(enumerator2.IEnumerator_MoveNext() && comparer.IEqualityComparer$b1_Equals(enumerator.IEnumerator$b1_Current, enumerator2.IEnumerator$b1_Current))) {
						var result = false;
						return result;
					}
				}
				if (enumerator2.IEnumerator_MoveNext()) {
					result = false;
					return result;
				}
			} finally {
				if (enumerator2 !== null) {
					enumerator2.IDisposable_Dispose();
				}
			}
		} finally {
			if (enumerator !== null) {
				enumerator.IDisposable_Dispose();
			}
		}
		return true;
	}
);
System.Linq.Enumerable.AsEnumerable$b1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source) {
		return source;
	}
);
System.Linq.Enumerable.ToArray$b1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		return new ($asm08.System.Linq.Buffer$b1.Of(TSource)) (source).ToArray();
	}
);
System.Linq.Enumerable.ToList$b1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		return new (System.Collections.Generic.List$b1.Of(TSource)) (source);
	}
);
System.Linq.Enumerable.ToDictionary$b2$0 = JSIL.GenericMethod(
	["TSource", "TKey"], 
	function (TSource, TKey, source, keySelector) {
		return System.Linq.Enumerable.ToDictionary$b3$1(TSource, TKey, TSource)(source, keySelector, $asm08.System.Linq.IdentityFunction$b1.Of(TSource).Instance, null);
	}
);
System.Linq.Enumerable.ToDictionary$b2$1 = JSIL.GenericMethod(
	["TSource", "TKey"], 
	function (TSource, TKey, source, keySelector, comparer) {
		return System.Linq.Enumerable.ToDictionary$b3$1(TSource, TKey, TSource)(source, keySelector, $asm08.System.Linq.IdentityFunction$b1.Of(TSource).Instance, comparer);
	}
);
System.Linq.Enumerable.ToDictionary$b3$0 = JSIL.GenericMethod(
	["TSource", "TKey", "TElement"], 
	function (TSource, TKey, TElement, source, keySelector, elementSelector) {
		return System.Linq.Enumerable.ToDictionary$b3$1(TSource, TKey, TElement)(source, keySelector, elementSelector, null);
	}
);
System.Linq.Enumerable.ToDictionary$b3$1 = JSIL.GenericMethod(
	["TSource", "TKey", "TElement"], 
	function (TSource, TKey, TElement, source, keySelector, elementSelector, comparer) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (keySelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("keySelector");
		}
		if (elementSelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("elementSelector");
		}
		var dictionary = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(TKey, TElement), "_ctor$2", [comparer]);
		var enumerator = source.IEnumerable$b1_GetEnumerator();
		try {
		__loop0__: 
			while (enumerator.IEnumerator_MoveNext()) {
				var current = enumerator.IEnumerator$b1_Current;
				dictionary.Add(keySelector(current), elementSelector(current));
			}
		} finally {
			if (enumerator !== null) {
				enumerator.IDisposable_Dispose();
			}
		}
		return dictionary;
	}
);
System.Linq.Enumerable.ToLookup$b2$0 = JSIL.GenericMethod(
	["TSource", "TKey"], 
	function (TSource, TKey, source, keySelector) {
		return System.Linq.Lookup$b2.Of(TKey, TSource).Create$b1(TSource)(source, keySelector, $asm08.System.Linq.IdentityFunction$b1.Of(TSource).Instance, null);
	}
);
System.Linq.Enumerable.ToLookup$b2$1 = JSIL.GenericMethod(
	["TSource", "TKey"], 
	function (TSource, TKey, source, keySelector, comparer) {
		return System.Linq.Lookup$b2.Of(TKey, TSource).Create$b1(TSource)(source, keySelector, $asm08.System.Linq.IdentityFunction$b1.Of(TSource).Instance, comparer);
	}
);
System.Linq.Enumerable.ToLookup$b3$0 = JSIL.GenericMethod(
	["TSource", "TKey", "TElement"], 
	function (TSource, TKey, TElement, source, keySelector, elementSelector) {
		return System.Linq.Lookup$b2.Of(TKey, TElement).Create$b1(TSource)(source, keySelector, elementSelector, null);
	}
);
System.Linq.Enumerable.ToLookup$b3$1 = JSIL.GenericMethod(
	["TSource", "TKey", "TElement"], 
	function (TSource, TKey, TElement, source, keySelector, elementSelector, comparer) {
		return System.Linq.Lookup$b2.Of(TKey, TElement).Create$b1(TSource)(source, keySelector, elementSelector, comparer);
	}
);
System.Linq.Enumerable.DefaultIfEmpty$b1$0 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source) {
		return System.Linq.Enumerable.DefaultIfEmpty$b1$1(TSource)(source, null);
	}
);
System.Linq.Enumerable.DefaultIfEmpty$b1$1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, defaultValue) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		return System.Linq.Enumerable.DefaultIfEmptyIterator$b1(TSource)(source, defaultValue);
	}
);
System.Linq.Enumerable.DefaultIfEmptyIterator$b1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, defaultValue) {
		var $lDefaultIfEmptyIterator$gd__a = new ($asm08.System.Linq.Enumerable.$lDefaultIfEmptyIterator$gd__a5$b1.Of(TSource)) (-2);
		$lDefaultIfEmptyIterator$gd__a.$source = source;
		$lDefaultIfEmptyIterator$gd__a.$defaultValue = defaultValue;
		return $lDefaultIfEmptyIterator$gd__a;
	}
);
System.Linq.Enumerable.OfType$b1 = JSIL.GenericMethod(
	["TResult"], 
	function (TResult, source) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		return System.Linq.Enumerable.OfTypeIterator$b1(TResult)(source);
	}
);
System.Linq.Enumerable.OfTypeIterator$b1 = JSIL.GenericMethod(
	["TResult"], 
	function (TResult, source) {
		var $lOfTypeIterator$gd__aa = new ($asm08.System.Linq.Enumerable.$lOfTypeIterator$gd__aa$b1.Of(TResult)) (-2);
		$lOfTypeIterator$gd__aa.$source = source;
		return $lOfTypeIterator$gd__aa;
	}
);
System.Linq.Enumerable.Cast$b1 = JSIL.GenericMethod(
	["TResult"], 
	function (TResult, source) {
		var enumerable = JSIL.TryCast(source, System.Collections.Generic.IEnumerable$b1.Of(TResult));
		if (enumerable !== null) {
			return enumerable;
		}
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		return System.Linq.Enumerable.CastIterator$b1(TResult)(source);
	}
);
System.Linq.Enumerable.CastIterator$b1 = JSIL.GenericMethod(
	["TResult"], 
	function (TResult, source) {
		var $lCastIterator$gd__b = new ($asm08.System.Linq.Enumerable.$lCastIterator$gd__b1$b1.Of(TResult)) (-2);
		$lCastIterator$gd__b.$source = source;
		return $lCastIterator$gd__b;
	}
);
System.Linq.Enumerable.First$b1$0 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		var list = JSIL.TryCast(source, System.Collections.Generic.IList$b1.Of(TSource));
		if (list !== null) {
			if (list.ICollection$b1_Count > 0) {
				return list.IList$b1_get_Item(0);
			}
		} else {
			var enumerator = source.IEnumerable$b1_GetEnumerator();
			try {
				if (enumerator.IEnumerator_MoveNext()) {
					return enumerator.IEnumerator$b1_Current;
				}
			} finally {
				if (enumerator !== null) {
					enumerator.IDisposable_Dispose();
				}
			}
		}
		throw $asm08.System.Core.Error.NoElements();
	}
);
System.Linq.Enumerable.First$b1$1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, predicate) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (predicate === null) {
			throw $asm08.System.Core.Error.ArgumentNull("predicate");
		}
		var enumerator = source.IEnumerable$b1_GetEnumerator();
		try {
		__loop0__: 
			while (enumerator.IEnumerator_MoveNext()) {
				var current = enumerator.IEnumerator$b1_Current;
				if (predicate(current)) {
					return current;
				}
			}
		} finally {
			if (enumerator !== null) {
				enumerator.IDisposable_Dispose();
			}
		}
		throw $asm08.System.Core.Error.NoMatch();
	}
);
System.Linq.Enumerable.FirstOrDefault$b1$0 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		var list = JSIL.TryCast(source, System.Collections.Generic.IList$b1.Of(TSource));
		if (list !== null) {
			if (list.ICollection$b1_Count > 0) {
				return list.IList$b1_get_Item(0);
			}
		} else {
			var enumerator = source.IEnumerable$b1_GetEnumerator();
			try {
				if (enumerator.IEnumerator_MoveNext()) {
					return enumerator.IEnumerator$b1_Current;
				}
			} finally {
				if (enumerator !== null) {
					enumerator.IDisposable_Dispose();
				}
			}
		}
		return null;
	}
);
System.Linq.Enumerable.FirstOrDefault$b1$1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, predicate) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (predicate === null) {
			throw $asm08.System.Core.Error.ArgumentNull("predicate");
		}
		var enumerator = source.IEnumerable$b1_GetEnumerator();
		try {
		__loop0__: 
			while (enumerator.IEnumerator_MoveNext()) {
				var current = enumerator.IEnumerator$b1_Current;
				if (predicate(current)) {
					return current;
				}
			}
		} finally {
			if (enumerator !== null) {
				enumerator.IDisposable_Dispose();
			}
		}
		return null;
	}
);
System.Linq.Enumerable.Last$b1$0 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		var list = JSIL.TryCast(source, System.Collections.Generic.IList$b1.Of(TSource));
		if (list !== null) {
			var count = list.ICollection$b1_Count;
			if (count > 0) {
				return list.IList$b1_get_Item((count - 1));
			}
		} else {
			var enumerator = source.IEnumerable$b1_GetEnumerator();
			try {
				if (enumerator.IEnumerator_MoveNext()) {
				__loop0__: 
					do {
						var current = enumerator.IEnumerator$b1_Current;
					} while (enumerator.IEnumerator_MoveNext());
					return current;
				}
			} finally {
				if (enumerator !== null) {
					enumerator.IDisposable_Dispose();
				}
			}
		}
		throw $asm08.System.Core.Error.NoElements();
	}
);
System.Linq.Enumerable.Last$b1$1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, predicate) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (predicate === null) {
			throw $asm08.System.Core.Error.ArgumentNull("predicate");
		}
		var result = null;
		var flag = false;
		var enumerator = source.IEnumerable$b1_GetEnumerator();
		try {
		__loop0__: 
			while (enumerator.IEnumerator_MoveNext()) {
				var current = enumerator.IEnumerator$b1_Current;
				if (predicate(current)) {
					result = current;
					flag = true;
				}
			}
		} finally {
			if (enumerator !== null) {
				enumerator.IDisposable_Dispose();
			}
		}
		if (flag) {
			return result;
		}
		throw $asm08.System.Core.Error.NoMatch();
	}
);
System.Linq.Enumerable.LastOrDefault$b1$0 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		var list = JSIL.TryCast(source, System.Collections.Generic.IList$b1.Of(TSource));
		if (list !== null) {
			var count = list.ICollection$b1_Count;
			if (count > 0) {
				return list.IList$b1_get_Item((count - 1));
			}
		} else {
			var enumerator = source.IEnumerable$b1_GetEnumerator();
			try {
				if (enumerator.IEnumerator_MoveNext()) {
				__loop0__: 
					do {
						var current = enumerator.IEnumerator$b1_Current;
					} while (enumerator.IEnumerator_MoveNext());
					return current;
				}
			} finally {
				if (enumerator !== null) {
					enumerator.IDisposable_Dispose();
				}
			}
		}
		return null;
	}
);
System.Linq.Enumerable.LastOrDefault$b1$1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, predicate) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (predicate === null) {
			throw $asm08.System.Core.Error.ArgumentNull("predicate");
		}
		var result = null;
		var enumerator = source.IEnumerable$b1_GetEnumerator();
		try {
		__loop0__: 
			while (enumerator.IEnumerator_MoveNext()) {
				var current = enumerator.IEnumerator$b1_Current;
				if (predicate(current)) {
					result = current;
				}
			}
		} finally {
			if (enumerator !== null) {
				enumerator.IDisposable_Dispose();
			}
		}
		return result;
	}
);
System.Linq.Enumerable.Single$b1$0 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		var list = JSIL.TryCast(source, System.Collections.Generic.IList$b1.Of(TSource));
		if (list !== null) {
			switch (list.ICollection$b1_Count) {
				case 0: 
					throw $asm08.System.Core.Error.NoElements();
				case 1: 
					return list.IList$b1_get_Item(0);
			}
		} else {
			var enumerator = source.IEnumerable$b1_GetEnumerator();
			try {
				if (!enumerator.IEnumerator_MoveNext()) {
					throw $asm08.System.Core.Error.NoElements();
				}
				var current = enumerator.IEnumerator$b1_Current;
				if (!enumerator.IEnumerator_MoveNext()) {
					return current;
				}
			} finally {
				if (enumerator !== null) {
					enumerator.IDisposable_Dispose();
				}
			}
		}
		throw $asm08.System.Core.Error.MoreThanOneElement();
	}
);
System.Linq.Enumerable.Single$b1$1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, predicate) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (predicate === null) {
			throw $asm08.System.Core.Error.ArgumentNull("predicate");
		}
		var result = null;
		var num = 0;
		var enumerator = source.IEnumerable$b1_GetEnumerator();
		try {
		__loop0__: 
			while (enumerator.IEnumerator_MoveNext()) {
				var current = enumerator.IEnumerator$b1_Current;
				if (predicate(current)) {
					result = current;
					++num;
				}
			}
		} finally {
			if (enumerator !== null) {
				enumerator.IDisposable_Dispose();
			}
		}
		var num2 = num;
		if (!((num2 > 1) || (num2 < 0))) {
			switch (num2) {
				case 0: 
					throw $asm08.System.Core.Error.NoMatch();
				case 1: 
					return result;
			}
		}
		throw $asm08.System.Core.Error.MoreThanOneMatch();
	}
);
System.Linq.Enumerable.SingleOrDefault$b1$0 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		var list = JSIL.TryCast(source, System.Collections.Generic.IList$b1.Of(TSource));
		if (list !== null) {
			switch (list.ICollection$b1_Count) {
				case 0: 
					return null;
				case 1: 
					return list.IList$b1_get_Item(0);
			}
		} else {
			var enumerator = source.IEnumerable$b1_GetEnumerator();
			try {
				if (!enumerator.IEnumerator_MoveNext()) {
					var result = null;
					return result;
				}
				var current = enumerator.IEnumerator$b1_Current;
				if (!enumerator.IEnumerator_MoveNext()) {
					result = current;
					return result;
				}
			} finally {
				if (enumerator !== null) {
					enumerator.IDisposable_Dispose();
				}
			}
		}
		throw $asm08.System.Core.Error.MoreThanOneElement();
	}
);
System.Linq.Enumerable.SingleOrDefault$b1$1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, predicate) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (predicate === null) {
			throw $asm08.System.Core.Error.ArgumentNull("predicate");
		}
		var result = null;
		var num = 0;
		var enumerator = source.IEnumerable$b1_GetEnumerator();
		try {
		__loop0__: 
			while (enumerator.IEnumerator_MoveNext()) {
				var current = enumerator.IEnumerator$b1_Current;
				if (predicate(current)) {
					result = current;
					++num;
				}
			}
		} finally {
			if (enumerator !== null) {
				enumerator.IDisposable_Dispose();
			}
		}
		var num2 = num;
		if (!((num2 > 1) || (num2 < 0))) {
			switch (num2) {
				case 0: 
					return null;
				case 1: 
					return result;
			}
		}
		throw $asm08.System.Core.Error.MoreThanOneMatch();
	}
);
System.Linq.Enumerable.ElementAt$b1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, index) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		var list = JSIL.TryCast(source, System.Collections.Generic.IList$b1.Of(TSource));
		if (list !== null) {
			return list.IList$b1_get_Item(index);
		}
		if (index < 0) {
			throw $asm08.System.Core.Error.ArgumentOutOfRange("index");
		}
		var enumerator = source.IEnumerable$b1_GetEnumerator();
		try {
		__loop0__: 
			while (enumerator.IEnumerator_MoveNext()) {
				if (index === 0) {
					var current = enumerator.IEnumerator$b1_Current;
					return current;
				}
				--index;
			}
			throw $asm08.System.Core.Error.ArgumentOutOfRange("index");
		} finally {
			if (enumerator !== null) {
				enumerator.IDisposable_Dispose();
			}
		}
		return current;
	}
);
System.Linq.Enumerable.ElementAtOrDefault$b1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, index) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (index >= 0) {
			var list = JSIL.TryCast(source, System.Collections.Generic.IList$b1.Of(TSource));
			if (list !== null) {
				if (index < list.ICollection$b1_Count) {
					return list.IList$b1_get_Item(index);
				}
			} else {
				var enumerator = source.IEnumerable$b1_GetEnumerator();
				try {
				__loop0__: 
					while (enumerator.IEnumerator_MoveNext()) {
						if (index === 0) {
							return enumerator.IEnumerator$b1_Current;
						}
						--index;
					}
				} finally {
					if (enumerator !== null) {
						enumerator.IDisposable_Dispose();
					}
				}
			}
		}
		return null;
	}
);
System.Linq.Enumerable.Range = function (start, count) {
	var num = ((start + count) - 1);
	if (!((count >= 0) && (num <= 2147483647))) {
		throw $asm08.System.Core.Error.ArgumentOutOfRange("count");
	}
	return System.Linq.Enumerable.RangeIterator(start, count);
};
System.Linq.Enumerable.RangeIterator = function (start, count) {
	var $lRangeIterator$gd__b = new $asm08.System.Linq.Enumerable.$lRangeIterator$gd__b8(-2);
	$lRangeIterator$gd__b.$start = start;
	$lRangeIterator$gd__b.$count = count;
	return $lRangeIterator$gd__b;
};
System.Linq.Enumerable.Repeat$b1 = JSIL.GenericMethod(
	["TResult"], 
	function (TResult, element, count) {
		if (count < 0) {
			throw $asm08.System.Core.Error.ArgumentOutOfRange("count");
		}
		return System.Linq.Enumerable.RepeatIterator$b1(TResult)(element, count);
	}
);
System.Linq.Enumerable.RepeatIterator$b1 = JSIL.GenericMethod(
	["TResult"], 
	function (TResult, element, count) {
		var $lRepeatIterator$gd__bc = new ($asm08.System.Linq.Enumerable.$lRepeatIterator$gd__bc$b1.Of(TResult)) (-2);
		$lRepeatIterator$gd__bc.$element = element;
		$lRepeatIterator$gd__bc.$count = count;
		return $lRepeatIterator$gd__bc;
	}
);
System.Linq.Enumerable.Empty$b1 = JSIL.GenericMethod(
	["TResult"], 
	function (TResult) {
		return $asm08.System.Linq.EmptyEnumerable$b1.Of(TResult).Instance;
	}
);
System.Linq.Enumerable.Any$b1$0 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		var enumerator = source.IEnumerable$b1_GetEnumerator();
		try {
			if (enumerator.IEnumerator_MoveNext()) {
				return true;
			}
		} finally {
			if (enumerator !== null) {
				enumerator.IDisposable_Dispose();
			}
		}
		return false;
	}
);
System.Linq.Enumerable.Any$b1$1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, predicate) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (predicate === null) {
			throw $asm08.System.Core.Error.ArgumentNull("predicate");
		}
		var enumerator = source.IEnumerable$b1_GetEnumerator();
		try {
		__loop0__: 
			while (enumerator.IEnumerator_MoveNext()) {
				var current = enumerator.IEnumerator$b1_Current;
				if (predicate(current)) {
					return true;
				}
			}
		} finally {
			if (enumerator !== null) {
				enumerator.IDisposable_Dispose();
			}
		}
		return false;
	}
);
System.Linq.Enumerable.All$b1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, predicate) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (predicate === null) {
			throw $asm08.System.Core.Error.ArgumentNull("predicate");
		}
		var enumerator = source.IEnumerable$b1_GetEnumerator();
		try {
		__loop0__: 
			while (enumerator.IEnumerator_MoveNext()) {
				var current = enumerator.IEnumerator$b1_Current;
				if (!predicate(current)) {
					return false;
				}
			}
		} finally {
			if (enumerator !== null) {
				enumerator.IDisposable_Dispose();
			}
		}
		return true;
	}
);
System.Linq.Enumerable.Count$b1$0 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		var collection = JSIL.TryCast(source, System.Collections.Generic.ICollection$b1.Of(TSource));
		if (collection !== null) {
			return collection.ICollection$b1_Count;
		}
		var collection2 = JSIL.TryCast(source, System.Collections.ICollection);
		if (collection2 !== null) {
			return collection2.ICollection_Count;
		}
		var num = 0;
		var enumerator = source.IEnumerable$b1_GetEnumerator();
		try {
		__loop0__: 
			while (enumerator.IEnumerator_MoveNext()) {
				++num;
			}
		} finally {
			if (enumerator !== null) {
				enumerator.IDisposable_Dispose();
			}
		}
		return num;
	}
);
System.Linq.Enumerable.Count$b1$1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, predicate) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (predicate === null) {
			throw $asm08.System.Core.Error.ArgumentNull("predicate");
		}
		var num = 0;
		var enumerator = source.IEnumerable$b1_GetEnumerator();
		try {
		__loop0__: 
			while (enumerator.IEnumerator_MoveNext()) {
				var current = enumerator.IEnumerator$b1_Current;
				if (predicate(current)) {
					++num;
				}
			}
		} finally {
			if (enumerator !== null) {
				enumerator.IDisposable_Dispose();
			}
		}
		return num;
	}
);
System.Linq.Enumerable.LongCount$b1$0 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		var num = 0;
		var enumerator = source.IEnumerable$b1_GetEnumerator();
		try {
		__loop0__: 
			while (enumerator.IEnumerator_MoveNext()) {
				++num;
			}
		} finally {
			if (enumerator !== null) {
				enumerator.IDisposable_Dispose();
			}
		}
		return num;
	}
);
System.Linq.Enumerable.LongCount$b1$1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, predicate) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (predicate === null) {
			throw $asm08.System.Core.Error.ArgumentNull("predicate");
		}
		var num = 0;
		var enumerator = source.IEnumerable$b1_GetEnumerator();
		try {
		__loop0__: 
			while (enumerator.IEnumerator_MoveNext()) {
				var current = enumerator.IEnumerator$b1_Current;
				if (predicate(current)) {
					++num;
				}
			}
		} finally {
			if (enumerator !== null) {
				enumerator.IDisposable_Dispose();
			}
		}
		return num;
	}
);
System.Linq.Enumerable.Contains$b1$0 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, value) {
		var collection = JSIL.TryCast(source, System.Collections.Generic.ICollection$b1.Of(TSource));
		if (collection !== null) {
			return collection.ICollection$b1_Contains(value);
		}
		return System.Linq.Enumerable.Contains$b1$1(TSource)(source, value, null);
	}
);
System.Linq.Enumerable.Contains$b1$1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, value, comparer) {
		if (comparer === null) {
			comparer = JSIL.Cast(System.Collections.Generic.EqualityComparer$b1.Of(TSource).Default, System.Collections.Generic.IEqualityComparer$b1.Of(TSource));
		}
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		var enumerator = source.IEnumerable$b1_GetEnumerator();
		try {
		__loop0__: 
			while (enumerator.IEnumerator_MoveNext()) {
				var current = enumerator.IEnumerator$b1_Current;
				if (comparer.IEqualityComparer$b1_Equals(current, value)) {
					return true;
				}
			}
		} finally {
			if (enumerator !== null) {
				enumerator.IDisposable_Dispose();
			}
		}
		return false;
	}
);
System.Linq.Enumerable.Aggregate$b1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, func) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (func === null) {
			throw $asm08.System.Core.Error.ArgumentNull("func");
		}
		var enumerator = source.IEnumerable$b1_GetEnumerator();
		try {
			if (!enumerator.IEnumerator_MoveNext()) {
				throw $asm08.System.Core.Error.NoElements();
			}
			var tSource = enumerator.IEnumerator$b1_Current;
		__loop0__: 
			while (enumerator.IEnumerator_MoveNext()) {
				tSource = func(tSource, enumerator.IEnumerator$b1_Current);
			}
			var result = tSource;
		} finally {
			if (enumerator !== null) {
				enumerator.IDisposable_Dispose();
			}
		}
		return result;
	}
);
System.Linq.Enumerable.Aggregate$b2 = JSIL.GenericMethod(
	["TSource", "TAccumulate"], 
	function (TSource, TAccumulate, source, seed, func) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (func === null) {
			throw $asm08.System.Core.Error.ArgumentNull("func");
		}
		var tAccumulate = seed;
		var enumerator = source.IEnumerable$b1_GetEnumerator();
		try {
		__loop0__: 
			while (enumerator.IEnumerator_MoveNext()) {
				var current = enumerator.IEnumerator$b1_Current;
				tAccumulate = func(tAccumulate, current);
			}
		} finally {
			if (enumerator !== null) {
				enumerator.IDisposable_Dispose();
			}
		}
		return tAccumulate;
	}
);
System.Linq.Enumerable.Aggregate$b3 = JSIL.GenericMethod(
	["TSource", "TAccumulate", "TResult"], 
	function (TSource, TAccumulate, TResult, source, seed, func, resultSelector) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (func === null) {
			throw $asm08.System.Core.Error.ArgumentNull("func");
		}
		if (resultSelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("resultSelector");
		}
		var tAccumulate = seed;
		var enumerator = source.IEnumerable$b1_GetEnumerator();
		try {
		__loop0__: 
			while (enumerator.IEnumerator_MoveNext()) {
				var current = enumerator.IEnumerator$b1_Current;
				tAccumulate = func(tAccumulate, current);
			}
		} finally {
			if (enumerator !== null) {
				enumerator.IDisposable_Dispose();
			}
		}
		return resultSelector(tAccumulate);
	}
);
System.Linq.Enumerable.Sum$0 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	var num = 0;
	var enumerator = source.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current;
			num += current;
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	return num;
};
System.Linq.Enumerable.Sum$1 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	var num = 0;
	var enumerator = source.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current.MemberwiseClone();
			if (current.HasValue) {
				num += current.GetValueOrDefault$0();
			}
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	return new (System.Nullable$b1.Of(System.Int32)) (num);
};
System.Linq.Enumerable.Sum$2 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	var num = 0;
	var enumerator = source.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current;
			num += current;
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	return num;
};
System.Linq.Enumerable.Sum$3 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	var num = 0;
	var enumerator = source.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current.MemberwiseClone();
			if (current.HasValue) {
				num += current.GetValueOrDefault$0();
			}
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	return new (System.Nullable$b1.Of(System.Int64)) (num);
};
System.Linq.Enumerable.Sum$4 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	var num = 0;
	var enumerator = source.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var num2 = enumerator.IEnumerator$b1_Current;
			num += num2;
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	return num;
};
System.Linq.Enumerable.Sum$5 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	var num = 0;
	var enumerator = source.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current.MemberwiseClone();
			if (current.HasValue) {
				num += current.GetValueOrDefault$0();
			}
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	return new (System.Nullable$b1.Of(System.Single)) (num);
};
System.Linq.Enumerable.Sum$6 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	var num = 0;
	var enumerator = source.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var num2 = enumerator.IEnumerator$b1_Current;
			num += num2;
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	return num;
};
System.Linq.Enumerable.Sum$7 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	var num = 0;
	var enumerator = source.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current.MemberwiseClone();
			if (current.HasValue) {
				num += current.GetValueOrDefault$0();
			}
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	return new (System.Nullable$b1.Of(System.Double)) (num);
};
System.Linq.Enumerable.Sum$8 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	var num = 0;
	var enumerator = source.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current.MemberwiseClone();
			num = System.Decimal.op_Addition(num.MemberwiseClone(), current.MemberwiseClone()).MemberwiseClone();
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	return num;
};
System.Linq.Enumerable.Sum$9 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	var num = 0;
	var enumerator = source.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current.MemberwiseClone();
			if (current.HasValue) {
				num = System.Decimal.op_Addition(num.MemberwiseClone(), current.GetValueOrDefault$0().MemberwiseClone()).MemberwiseClone();
			}
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	return new (System.Nullable$b1.Of(System.Decimal)) (num);
};
System.Linq.Enumerable.Sum$b1$0 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		return System.Linq.Enumerable.Sum$0(System.Linq.Enumerable.Select$b2$0(TSource, System.Int32)(source, selector));
	}
);
System.Linq.Enumerable.Sum$b1$1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		return System.Linq.Enumerable.Sum$1(System.Linq.Enumerable.Select$b2$0(TSource, System.Nullable$b1.Of(System.Int32))(source, selector));
	}
);
System.Linq.Enumerable.Sum$b1$2 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		return System.Linq.Enumerable.Sum$2(System.Linq.Enumerable.Select$b2$0(TSource, System.Int64)(source, selector));
	}
);
System.Linq.Enumerable.Sum$b1$3 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		return System.Linq.Enumerable.Sum$3(System.Linq.Enumerable.Select$b2$0(TSource, System.Nullable$b1.Of(System.Int64))(source, selector));
	}
);
System.Linq.Enumerable.Sum$b1$4 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		return System.Linq.Enumerable.Sum$4(System.Linq.Enumerable.Select$b2$0(TSource, System.Single)(source, selector));
	}
);
System.Linq.Enumerable.Sum$b1$5 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		return System.Linq.Enumerable.Sum$5(System.Linq.Enumerable.Select$b2$0(TSource, System.Nullable$b1.Of(System.Single))(source, selector));
	}
);
System.Linq.Enumerable.Sum$b1$6 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		return System.Linq.Enumerable.Sum$6(System.Linq.Enumerable.Select$b2$0(TSource, System.Double)(source, selector));
	}
);
System.Linq.Enumerable.Sum$b1$7 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		return System.Linq.Enumerable.Sum$7(System.Linq.Enumerable.Select$b2$0(TSource, System.Nullable$b1.Of(System.Double))(source, selector));
	}
);
System.Linq.Enumerable.Sum$b1$8 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		return System.Linq.Enumerable.Sum$8(System.Linq.Enumerable.Select$b2$0(TSource, System.Decimal)(source, selector));
	}
);
System.Linq.Enumerable.Sum$b1$9 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		return System.Linq.Enumerable.Sum$9(System.Linq.Enumerable.Select$b2$0(TSource, System.Nullable$b1.Of(System.Decimal))(source, selector));
	}
);
System.Linq.Enumerable.Min$0 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	var num = 0;
	var flag = false;
	var enumerator = source.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current;
			if (flag) {
				if (current < num) {
					num = current;
				}
			} else {
				num = current;
				flag = true;
			}
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	if (flag) {
		return num;
	}
	throw $asm08.System.Core.Error.NoElements();
};
System.Linq.Enumerable.Min$1 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	var num = new (System.Nullable$b1.Of(System.Int32)) ();
	var enumerator = source.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current.MemberwiseClone();
			if (num.HasValue) {
				var num2 = current.MemberwiseClone();
				var num3 = num.MemberwiseClone();
				if (!((num2.GetValueOrDefault$0() < num3.GetValueOrDefault$0()) && (num2.HasValue & num3.HasValue))) {
					continue __loop0__;
				}
			}
			num = current.MemberwiseClone();
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	return num;
};
System.Linq.Enumerable.Min$2 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	var num = 0;
	var flag = false;
	var enumerator = source.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current;
			if (flag) {
				if (current < num) {
					num = current;
				}
			} else {
				num = current;
				flag = true;
			}
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	if (flag) {
		return num;
	}
	throw $asm08.System.Core.Error.NoElements();
};
System.Linq.Enumerable.Min$3 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	var num = new (System.Nullable$b1.Of(System.Int64)) ();
	var enumerator = source.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current.MemberwiseClone();
			if (num.HasValue) {
				var num2 = current.MemberwiseClone();
				var num3 = num.MemberwiseClone();
				if (!((num2.GetValueOrDefault$0() < num3.GetValueOrDefault$0()) && (num2.HasValue & num3.HasValue))) {
					continue __loop0__;
				}
			}
			num = current.MemberwiseClone();
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	return num;
};
System.Linq.Enumerable.Min$4 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	var num = 0;
	var flag = false;
	var enumerator = source.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var num2 = enumerator.IEnumerator$b1_Current;
			if (flag) {
				if (!((num2 >= num) && !System.Single.IsNaN(num2))) {
					num = num2;
				}
			} else {
				num = num2;
				flag = true;
			}
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	if (flag) {
		return num;
	}
	throw $asm08.System.Core.Error.NoElements();
};
System.Linq.Enumerable.Min$5 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	var num = new (System.Nullable$b1.Of(System.Single)) ();
	var enumerator = source.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current.MemberwiseClone();
			if (current.HasValue) {
				if (num.HasValue) {
					var num2 = current.MemberwiseClone();
					var num3 = num.MemberwiseClone();
					if (!((num2.GetValueOrDefault$0() < num3.GetValueOrDefault$0()) && 
							(num2.HasValue & num3.HasValue)) && !System.Single.IsNaN(current.Value)) {
						continue __loop0__;
					}
				}
				num = current.MemberwiseClone();
			}
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	return num;
};
System.Linq.Enumerable.Min$6 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	var num = 0;
	var flag = false;
	var enumerator = source.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var num2 = enumerator.IEnumerator$b1_Current;
			if (flag) {
				if (!((num2 >= num) && !System.Double.IsNaN(num2))) {
					num = num2;
				}
			} else {
				num = num2;
				flag = true;
			}
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	if (flag) {
		return num;
	}
	throw $asm08.System.Core.Error.NoElements();
};
System.Linq.Enumerable.Min$7 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	var num = new (System.Nullable$b1.Of(System.Double)) ();
	var enumerator = source.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current.MemberwiseClone();
			if (current.HasValue) {
				if (num.HasValue) {
					var num2 = current.MemberwiseClone();
					var num3 = num.MemberwiseClone();
					if (!((num2.GetValueOrDefault$0() < num3.GetValueOrDefault$0()) && 
							(num2.HasValue & num3.HasValue)) && !System.Double.IsNaN(current.Value)) {
						continue __loop0__;
					}
				}
				num = current.MemberwiseClone();
			}
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	return num;
};
System.Linq.Enumerable.Min$8 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	var num = 0;
	var flag = false;
	var enumerator = source.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current.MemberwiseClone();
			if (flag) {
				if (System.Decimal.op_LessThan(current.MemberwiseClone(), num.MemberwiseClone())) {
					num = current.MemberwiseClone();
				}
			} else {
				num = current.MemberwiseClone();
				flag = true;
			}
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	if (flag) {
		return num;
	}
	throw $asm08.System.Core.Error.NoElements();
};
System.Linq.Enumerable.Min$9 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	var num = new (System.Nullable$b1.Of(System.Decimal)) ();
	var enumerator = source.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current.MemberwiseClone();
			if (num.HasValue) {
				var num2 = current.MemberwiseClone();
				var num3 = num.MemberwiseClone();
				if (!(System.Decimal.op_LessThan(
							num2.GetValueOrDefault$0().MemberwiseClone(), 
							num3.GetValueOrDefault$0().MemberwiseClone()
						) && (num2.HasValue & num3.HasValue))) {
					continue __loop0__;
				}
			}
			num = current.MemberwiseClone();
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	return num;
};
System.Linq.Enumerable.Min$b1$0 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		var $default = JSIL.Cast(System.Collections.Generic.Comparer$b1.Of(TSource).Default, System.Collections.Generic.Comparer$b1.Of(TSource));
		var tSource = null;
		if (tSource === null) {
			var enumerator = source.IEnumerable$b1_GetEnumerator();
			try {
			__loop0__: 
				while (enumerator.IEnumerator_MoveNext()) {
					var current = enumerator.IEnumerator$b1_Current;
					if (!((current === null) || ((tSource !== null) && 
								($default.Compare(current, tSource) >= 0)))) {
						tSource = current;
					}
				}
			} finally {
				if (enumerator !== null) {
					enumerator.IDisposable_Dispose();
				}
			}
			return tSource;
		}
		var flag = false;
		var enumerator2 = source.IEnumerable$b1_GetEnumerator();
		try {
		__loop1__: 
			while (enumerator2.IEnumerator_MoveNext()) {
				var current2 = enumerator2.IEnumerator$b1_Current;
				if (flag) {
					if ($default.Compare(current2, tSource) < 0) {
						tSource = current2;
					}
				} else {
					tSource = current2;
					flag = true;
				}
			}
		} finally {
			if (enumerator2 !== null) {
				enumerator2.IDisposable_Dispose();
			}
		}
		if (flag) {
			return tSource;
		}
		throw $asm08.System.Core.Error.NoElements();
	}
);
System.Linq.Enumerable.Min$b1$1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		return System.Linq.Enumerable.Min$0(System.Linq.Enumerable.Select$b2$0(TSource, System.Int32)(source, selector));
	}
);
System.Linq.Enumerable.Min$b1$2 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		return System.Linq.Enumerable.Min$1(System.Linq.Enumerable.Select$b2$0(TSource, System.Nullable$b1.Of(System.Int32))(source, selector));
	}
);
System.Linq.Enumerable.Min$b1$3 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		return System.Linq.Enumerable.Min$2(System.Linq.Enumerable.Select$b2$0(TSource, System.Int64)(source, selector));
	}
);
System.Linq.Enumerable.Min$b1$4 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		return System.Linq.Enumerable.Min$3(System.Linq.Enumerable.Select$b2$0(TSource, System.Nullable$b1.Of(System.Int64))(source, selector));
	}
);
System.Linq.Enumerable.Min$b1$5 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		return System.Linq.Enumerable.Min$4(System.Linq.Enumerable.Select$b2$0(TSource, System.Single)(source, selector));
	}
);
System.Linq.Enumerable.Min$b1$6 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		return System.Linq.Enumerable.Min$5(System.Linq.Enumerable.Select$b2$0(TSource, System.Nullable$b1.Of(System.Single))(source, selector));
	}
);
System.Linq.Enumerable.Min$b1$7 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		return System.Linq.Enumerable.Min$6(System.Linq.Enumerable.Select$b2$0(TSource, System.Double)(source, selector));
	}
);
System.Linq.Enumerable.Min$b1$8 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		return System.Linq.Enumerable.Min$7(System.Linq.Enumerable.Select$b2$0(TSource, System.Nullable$b1.Of(System.Double))(source, selector));
	}
);
System.Linq.Enumerable.Min$b1$9 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		return System.Linq.Enumerable.Min$8(System.Linq.Enumerable.Select$b2$0(TSource, System.Decimal)(source, selector));
	}
);
System.Linq.Enumerable.Min$b1$10 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		return System.Linq.Enumerable.Min$9(System.Linq.Enumerable.Select$b2$0(TSource, System.Nullable$b1.Of(System.Decimal))(source, selector));
	}
);
System.Linq.Enumerable.Min$b2 = JSIL.GenericMethod(
	["TSource", "TResult"], 
	function (TSource, TResult, source, selector) {
		return System.Linq.Enumerable.Min$b1$0(TResult)(System.Linq.Enumerable.Select$b2$0(TSource, TResult)(source, selector));
	}
);
System.Linq.Enumerable.Max$0 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	var num = 0;
	var flag = false;
	var enumerator = source.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current;
			if (flag) {
				if (current > num) {
					num = current;
				}
			} else {
				num = current;
				flag = true;
			}
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	if (flag) {
		return num;
	}
	throw $asm08.System.Core.Error.NoElements();
};
System.Linq.Enumerable.Max$1 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	var num = new (System.Nullable$b1.Of(System.Int32)) ();
	var enumerator = source.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current.MemberwiseClone();
			if (num.HasValue) {
				var num2 = current.MemberwiseClone();
				var num3 = num.MemberwiseClone();
				if (!((num2.GetValueOrDefault$0() > num3.GetValueOrDefault$0()) && (num2.HasValue & num3.HasValue))) {
					continue __loop0__;
				}
			}
			num = current.MemberwiseClone();
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	return num;
};
System.Linq.Enumerable.Max$2 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	var num = 0;
	var flag = false;
	var enumerator = source.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current;
			if (flag) {
				if (current > num) {
					num = current;
				}
			} else {
				num = current;
				flag = true;
			}
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	if (flag) {
		return num;
	}
	throw $asm08.System.Core.Error.NoElements();
};
System.Linq.Enumerable.Max$3 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	var num = new (System.Nullable$b1.Of(System.Int64)) ();
	var enumerator = source.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current.MemberwiseClone();
			if (num.HasValue) {
				var num2 = current.MemberwiseClone();
				var num3 = num.MemberwiseClone();
				if (!((num2.GetValueOrDefault$0() > num3.GetValueOrDefault$0()) && (num2.HasValue & num3.HasValue))) {
					continue __loop0__;
				}
			}
			num = current.MemberwiseClone();
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	return num;
};
System.Linq.Enumerable.Max$4 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	var num = 0;
	var flag = false;
	var enumerator = source.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var num2 = enumerator.IEnumerator$b1_Current;
			if (flag) {
				if (!((num2 <= num) && !System.Double.IsNaN(num))) {
					num = num2;
				}
			} else {
				num = num2;
				flag = true;
			}
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	if (flag) {
		return num;
	}
	throw $asm08.System.Core.Error.NoElements();
};
System.Linq.Enumerable.Max$5 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	var num = new (System.Nullable$b1.Of(System.Double)) ();
	var enumerator = source.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current.MemberwiseClone();
			if (current.HasValue) {
				if (num.HasValue) {
					var num2 = current.MemberwiseClone();
					var num3 = num.MemberwiseClone();
					if (!((num2.GetValueOrDefault$0() > num3.GetValueOrDefault$0()) && 
							(num2.HasValue & num3.HasValue)) && !System.Double.IsNaN(num.Value)) {
						continue __loop0__;
					}
				}
				num = current.MemberwiseClone();
			}
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	return num;
};
System.Linq.Enumerable.Max$6 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	var num = 0;
	var flag = false;
	var enumerator = source.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var num2 = enumerator.IEnumerator$b1_Current;
			if (flag) {
				if (!((num2 <= num) && !System.Double.IsNaN(num))) {
					num = num2;
				}
			} else {
				num = num2;
				flag = true;
			}
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	if (flag) {
		return num;
	}
	throw $asm08.System.Core.Error.NoElements();
};
System.Linq.Enumerable.Max$7 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	var num = new (System.Nullable$b1.Of(System.Single)) ();
	var enumerator = source.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current.MemberwiseClone();
			if (current.HasValue) {
				if (num.HasValue) {
					var num2 = current.MemberwiseClone();
					var num3 = num.MemberwiseClone();
					if (!((num2.GetValueOrDefault$0() > num3.GetValueOrDefault$0()) && 
							(num2.HasValue & num3.HasValue)) && !System.Single.IsNaN(num.Value)) {
						continue __loop0__;
					}
				}
				num = current.MemberwiseClone();
			}
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	return num;
};
System.Linq.Enumerable.Max$8 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	var num = 0;
	var flag = false;
	var enumerator = source.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current.MemberwiseClone();
			if (flag) {
				if (System.Decimal.op_GreaterThan(current.MemberwiseClone(), num.MemberwiseClone())) {
					num = current.MemberwiseClone();
				}
			} else {
				num = current.MemberwiseClone();
				flag = true;
			}
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	if (flag) {
		return num;
	}
	throw $asm08.System.Core.Error.NoElements();
};
System.Linq.Enumerable.Max$9 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	var num = new (System.Nullable$b1.Of(System.Decimal)) ();
	var enumerator = source.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current.MemberwiseClone();
			if (num.HasValue) {
				var num2 = current.MemberwiseClone();
				var num3 = num.MemberwiseClone();
				if (!(System.Decimal.op_GreaterThan(
							num2.GetValueOrDefault$0().MemberwiseClone(), 
							num3.GetValueOrDefault$0().MemberwiseClone()
						) && (num2.HasValue & num3.HasValue))) {
					continue __loop0__;
				}
			}
			num = current.MemberwiseClone();
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	return num;
};
System.Linq.Enumerable.Max$b1$0 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		var $default = JSIL.Cast(System.Collections.Generic.Comparer$b1.Of(TSource).Default, System.Collections.Generic.Comparer$b1.Of(TSource));
		var tSource = null;
		if (tSource === null) {
			var enumerator = source.IEnumerable$b1_GetEnumerator();
			try {
			__loop0__: 
				while (enumerator.IEnumerator_MoveNext()) {
					var current = enumerator.IEnumerator$b1_Current;
					if (!((current === null) || ((tSource !== null) && 
								($default.Compare(current, tSource) <= 0)))) {
						tSource = current;
					}
				}
			} finally {
				if (enumerator !== null) {
					enumerator.IDisposable_Dispose();
				}
			}
			return tSource;
		}
		var flag = false;
		var enumerator2 = source.IEnumerable$b1_GetEnumerator();
		try {
		__loop1__: 
			while (enumerator2.IEnumerator_MoveNext()) {
				var current2 = enumerator2.IEnumerator$b1_Current;
				if (flag) {
					if ($default.Compare(current2, tSource) > 0) {
						tSource = current2;
					}
				} else {
					tSource = current2;
					flag = true;
				}
			}
		} finally {
			if (enumerator2 !== null) {
				enumerator2.IDisposable_Dispose();
			}
		}
		if (flag) {
			return tSource;
		}
		throw $asm08.System.Core.Error.NoElements();
	}
);
System.Linq.Enumerable.Max$b1$1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		return System.Linq.Enumerable.Max$0(System.Linq.Enumerable.Select$b2$0(TSource, System.Int32)(source, selector));
	}
);
System.Linq.Enumerable.Max$b1$2 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		return System.Linq.Enumerable.Max$1(System.Linq.Enumerable.Select$b2$0(TSource, System.Nullable$b1.Of(System.Int32))(source, selector));
	}
);
System.Linq.Enumerable.Max$b1$3 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		return System.Linq.Enumerable.Max$2(System.Linq.Enumerable.Select$b2$0(TSource, System.Int64)(source, selector));
	}
);
System.Linq.Enumerable.Max$b1$4 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		return System.Linq.Enumerable.Max$3(System.Linq.Enumerable.Select$b2$0(TSource, System.Nullable$b1.Of(System.Int64))(source, selector));
	}
);
System.Linq.Enumerable.Max$b1$5 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		return System.Linq.Enumerable.Max$6(System.Linq.Enumerable.Select$b2$0(TSource, System.Single)(source, selector));
	}
);
System.Linq.Enumerable.Max$b1$6 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		return System.Linq.Enumerable.Max$7(System.Linq.Enumerable.Select$b2$0(TSource, System.Nullable$b1.Of(System.Single))(source, selector));
	}
);
System.Linq.Enumerable.Max$b1$7 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		return System.Linq.Enumerable.Max$4(System.Linq.Enumerable.Select$b2$0(TSource, System.Double)(source, selector));
	}
);
System.Linq.Enumerable.Max$b1$8 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		return System.Linq.Enumerable.Max$5(System.Linq.Enumerable.Select$b2$0(TSource, System.Nullable$b1.Of(System.Double))(source, selector));
	}
);
System.Linq.Enumerable.Max$b1$9 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		return System.Linq.Enumerable.Max$8(System.Linq.Enumerable.Select$b2$0(TSource, System.Decimal)(source, selector));
	}
);
System.Linq.Enumerable.Max$b1$10 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		return System.Linq.Enumerable.Max$9(System.Linq.Enumerable.Select$b2$0(TSource, System.Nullable$b1.Of(System.Decimal))(source, selector));
	}
);
System.Linq.Enumerable.Max$b2 = JSIL.GenericMethod(
	["TSource", "TResult"], 
	function (TSource, TResult, source, selector) {
		return System.Linq.Enumerable.Max$b1$0(TResult)(System.Linq.Enumerable.Select$b2$0(TSource, TResult)(source, selector));
	}
);
System.Linq.Enumerable.Average$0 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	var num = 0;
	var num2 = 0;
	var enumerator = source.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current;
			num += current;
			++num2;
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	if (num2 > 0) {
		return Math.floor(num / num2);
	}
	throw $asm08.System.Core.Error.NoElements();
};
System.Linq.Enumerable.Average$1 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	var num = 0;
	var num2 = 0;
	var enumerator = source.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current.MemberwiseClone();
			if (current.HasValue) {
				num += current.GetValueOrDefault$0();
				++num2;
			}
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	if (num2 > 0) {
		return new (System.Nullable$b1.Of(System.Double)) (Math.floor(num / num2));
	}
	return new (System.Nullable$b1.Of(System.Double)) ();
};
System.Linq.Enumerable.Average$2 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	var num = 0;
	var num2 = 0;
	var enumerator = source.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current;
			num += current;
			++num2;
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	if (num2 > 0) {
		return Math.floor(num / num2);
	}
	throw $asm08.System.Core.Error.NoElements();
};
System.Linq.Enumerable.Average$3 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	var num = 0;
	var num2 = 0;
	var enumerator = source.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current.MemberwiseClone();
			if (current.HasValue) {
				num += current.GetValueOrDefault$0();
				++num2;
			}
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	if (num2 > 0) {
		return new (System.Nullable$b1.Of(System.Double)) (Math.floor(num / num2));
	}
	return new (System.Nullable$b1.Of(System.Double)) ();
};
System.Linq.Enumerable.Average$4 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	var num = 0;
	var num2 = 0;
	var enumerator = source.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var num3 = enumerator.IEnumerator$b1_Current;
			num += num3;
			++num2;
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	if (num2 > 0) {
		return (num / num2);
	}
	throw $asm08.System.Core.Error.NoElements();
};
System.Linq.Enumerable.Average$5 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	var num = 0;
	var num2 = 0;
	var enumerator = source.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current.MemberwiseClone();
			if (current.HasValue) {
				num += current.GetValueOrDefault$0();
				++num2;
			}
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	if (num2 > 0) {
		return new (System.Nullable$b1.Of(System.Single)) ((num / num2));
	}
	return new (System.Nullable$b1.Of(System.Single)) ();
};
System.Linq.Enumerable.Average$6 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	var num = 0;
	var num2 = 0;
	var enumerator = source.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var num3 = enumerator.IEnumerator$b1_Current;
			num += num3;
			++num2;
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	if (num2 > 0) {
		return (num / num2);
	}
	throw $asm08.System.Core.Error.NoElements();
};
System.Linq.Enumerable.Average$7 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	var num = 0;
	var num2 = 0;
	var enumerator = source.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current.MemberwiseClone();
			if (current.HasValue) {
				num += current.GetValueOrDefault$0();
				++num2;
			}
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	if (num2 > 0) {
		return new (System.Nullable$b1.Of(System.Double)) ((num / num2));
	}
	return new (System.Nullable$b1.Of(System.Double)) ();
};
System.Linq.Enumerable.Average$8 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	var d = 0;
	var num = 0;
	var enumerator = source.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current.MemberwiseClone();
			d = System.Decimal.op_Addition(d.MemberwiseClone(), current.MemberwiseClone()).MemberwiseClone();
			++num;
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	if (num > 0) {
		return System.Decimal.op_Division(d.MemberwiseClone(), System.Decimal.op_Implicit$7(num).MemberwiseClone());
	}
	throw $asm08.System.Core.Error.NoElements();
};
System.Linq.Enumerable.Average$9 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	var d = 0;
	var num = 0;
	var enumerator = source.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current.MemberwiseClone();
			if (current.HasValue) {
				d = System.Decimal.op_Addition(d.MemberwiseClone(), current.GetValueOrDefault$0().MemberwiseClone()).MemberwiseClone();
				++num;
			}
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	if (num > 0) {
		return new (System.Nullable$b1.Of(System.Decimal)) (System.Decimal.op_Division(d.MemberwiseClone(), System.Decimal.op_Implicit$7(num).MemberwiseClone()));
	}
	return new (System.Nullable$b1.Of(System.Decimal)) ();
};
System.Linq.Enumerable.Average$b1$0 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		return System.Linq.Enumerable.Average$0(System.Linq.Enumerable.Select$b2$0(TSource, System.Int32)(source, selector));
	}
);
System.Linq.Enumerable.Average$b1$1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		return System.Linq.Enumerable.Average$1(System.Linq.Enumerable.Select$b2$0(TSource, System.Nullable$b1.Of(System.Int32))(source, selector));
	}
);
System.Linq.Enumerable.Average$b1$2 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		return System.Linq.Enumerable.Average$2(System.Linq.Enumerable.Select$b2$0(TSource, System.Int64)(source, selector));
	}
);
System.Linq.Enumerable.Average$b1$3 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		return System.Linq.Enumerable.Average$3(System.Linq.Enumerable.Select$b2$0(TSource, System.Nullable$b1.Of(System.Int64))(source, selector));
	}
);
System.Linq.Enumerable.Average$b1$4 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		return System.Linq.Enumerable.Average$4(System.Linq.Enumerable.Select$b2$0(TSource, System.Single)(source, selector));
	}
);
System.Linq.Enumerable.Average$b1$5 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		return System.Linq.Enumerable.Average$5(System.Linq.Enumerable.Select$b2$0(TSource, System.Nullable$b1.Of(System.Single))(source, selector));
	}
);
System.Linq.Enumerable.Average$b1$6 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		return System.Linq.Enumerable.Average$6(System.Linq.Enumerable.Select$b2$0(TSource, System.Double)(source, selector));
	}
);
System.Linq.Enumerable.Average$b1$7 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		return System.Linq.Enumerable.Average$7(System.Linq.Enumerable.Select$b2$0(TSource, System.Nullable$b1.Of(System.Double))(source, selector));
	}
);
System.Linq.Enumerable.Average$b1$8 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		return System.Linq.Enumerable.Average$8(System.Linq.Enumerable.Select$b2$0(TSource, System.Decimal)(source, selector));
	}
);
System.Linq.Enumerable.Average$b1$9 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		return System.Linq.Enumerable.Average$9(System.Linq.Enumerable.Select$b2$0(TSource, System.Nullable$b1.Of(System.Decimal))(source, selector));
	}
);
JSIL.OverloadedGenericMethod(System.Linq.Enumerable, "Where$b1", [
		["Where$b1$0", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Boolean)]], 
		["Where$b1$1", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b3.Of(JSIL.AnyType, System.Int32, System.Boolean)]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Enumerable, "Select$b2", [
		["Select$b2$0", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType)]], 
		["Select$b2$1", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b3.Of(JSIL.AnyType, System.Int32, JSIL.AnyType)]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Enumerable, "SelectMany$b2", [
		["SelectMany$b2$0", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType))]], 
		["SelectMany$b2$1", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b3.Of(JSIL.AnyType, System.Int32, System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType))]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Enumerable, "SelectManyIterator$b2", [
		["SelectManyIterator$b2$0", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType))]], 
		["SelectManyIterator$b2$1", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b3.Of(JSIL.AnyType, System.Int32, System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType))]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Enumerable, "SelectMany$b3", [
		["SelectMany$b3$0", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b3.Of(JSIL.AnyType, System.Int32, System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType)), System.Func$b3.Of(JSIL.AnyType, JSIL.AnyType, JSIL.AnyType)]], 
		["SelectMany$b3$1", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType)), System.Func$b3.Of(JSIL.AnyType, JSIL.AnyType, JSIL.AnyType)]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Enumerable, "SelectManyIterator$b3", [
		["SelectManyIterator$b3$0", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b3.Of(JSIL.AnyType, System.Int32, System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType)), System.Func$b3.Of(JSIL.AnyType, JSIL.AnyType, JSIL.AnyType)]], 
		["SelectManyIterator$b3$1", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType)), System.Func$b3.Of(JSIL.AnyType, JSIL.AnyType, JSIL.AnyType)]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Enumerable, "TakeWhile$b1", [
		["TakeWhile$b1$0", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Boolean)]], 
		["TakeWhile$b1$1", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b3.Of(JSIL.AnyType, System.Int32, System.Boolean)]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Enumerable, "TakeWhileIterator$b1", [
		["TakeWhileIterator$b1$0", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Boolean)]], 
		["TakeWhileIterator$b1$1", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b3.Of(JSIL.AnyType, System.Int32, System.Boolean)]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Enumerable, "SkipWhile$b1", [
		["SkipWhile$b1$0", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Boolean)]], 
		["SkipWhile$b1$1", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b3.Of(JSIL.AnyType, System.Int32, System.Boolean)]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Enumerable, "SkipWhileIterator$b1", [
		["SkipWhileIterator$b1$0", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Boolean)]], 
		["SkipWhileIterator$b1$1", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b3.Of(JSIL.AnyType, System.Int32, System.Boolean)]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Enumerable, "Join$b4", [
		["Join$b4$0", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType), System.Func$b3.Of(JSIL.AnyType, JSIL.AnyType, JSIL.AnyType)]], 
		["Join$b4$1", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType), System.Func$b3.Of(JSIL.AnyType, JSIL.AnyType, JSIL.AnyType), System.Collections.Generic.IEqualityComparer$b1.Of(JSIL.AnyType)]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Enumerable, "GroupJoin$b4", [
		["GroupJoin$b4$0", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType), System.Func$b3.Of(JSIL.AnyType, System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), JSIL.AnyType)]], 
		["GroupJoin$b4$1", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType), System.Func$b3.Of(JSIL.AnyType, System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), JSIL.AnyType), System.Collections.Generic.IEqualityComparer$b1.Of(JSIL.AnyType)]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Enumerable, "OrderBy$b2", [
		["OrderBy$b2$0", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType)]], 
		["OrderBy$b2$1", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType), System.Collections.Generic.IComparer$b1.Of(JSIL.AnyType)]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Enumerable, "OrderByDescending$b2", [
		["OrderByDescending$b2$0", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType)]], 
		["OrderByDescending$b2$1", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType), System.Collections.Generic.IComparer$b1.Of(JSIL.AnyType)]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Enumerable, "ThenBy$b2", [
		["ThenBy$b2$0", [System.Linq.IOrderedEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType)]], 
		["ThenBy$b2$1", [System.Linq.IOrderedEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType), System.Collections.Generic.IComparer$b1.Of(JSIL.AnyType)]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Enumerable, "ThenByDescending$b2", [
		["ThenByDescending$b2$0", [System.Linq.IOrderedEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType)]], 
		["ThenByDescending$b2$1", [System.Linq.IOrderedEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType), System.Collections.Generic.IComparer$b1.Of(JSIL.AnyType)]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Enumerable, "GroupBy$b2", [
		["GroupBy$b2$0", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType)]], 
		["GroupBy$b2$1", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType), System.Collections.Generic.IEqualityComparer$b1.Of(JSIL.AnyType)]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Enumerable, "GroupBy$b3", [
		["GroupBy$b3$0", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType)]], 
		["GroupBy$b3$1", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType), System.Collections.Generic.IEqualityComparer$b1.Of(JSIL.AnyType)]], 
		["GroupBy$b3$2", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType), System.Func$b3.Of(JSIL.AnyType, System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), JSIL.AnyType)]], 
		["GroupBy$b3$3", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType), System.Func$b3.Of(JSIL.AnyType, System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), JSIL.AnyType), System.Collections.Generic.IEqualityComparer$b1.Of(JSIL.AnyType)]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Enumerable, "GroupBy$b4", [
		["GroupBy$b4$0", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType), System.Func$b3.Of(JSIL.AnyType, System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), JSIL.AnyType)]], 
		["GroupBy$b4$1", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType), System.Func$b3.Of(JSIL.AnyType, System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), JSIL.AnyType), System.Collections.Generic.IEqualityComparer$b1.Of(JSIL.AnyType)]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Enumerable, "Distinct$b1", [
		["Distinct$b1$0", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType)]], 
		["Distinct$b1$1", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Collections.Generic.IEqualityComparer$b1.Of(JSIL.AnyType)]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Enumerable, "Union$b1", [
		["Union$b1$0", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType)]], 
		["Union$b1$1", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Collections.Generic.IEqualityComparer$b1.Of(JSIL.AnyType)]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Enumerable, "Intersect$b1", [
		["Intersect$b1$0", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType)]], 
		["Intersect$b1$1", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Collections.Generic.IEqualityComparer$b1.Of(JSIL.AnyType)]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Enumerable, "Except$b1", [
		["Except$b1$0", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType)]], 
		["Except$b1$1", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Collections.Generic.IEqualityComparer$b1.Of(JSIL.AnyType)]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Enumerable, "SequenceEqual$b1", [
		["SequenceEqual$b1$0", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType)]], 
		["SequenceEqual$b1$1", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Collections.Generic.IEqualityComparer$b1.Of(JSIL.AnyType)]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Enumerable, "ToDictionary$b2", [
		["ToDictionary$b2$0", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType)]], 
		["ToDictionary$b2$1", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType), System.Collections.Generic.IEqualityComparer$b1.Of(JSIL.AnyType)]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Enumerable, "ToDictionary$b3", [
		["ToDictionary$b3$0", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType)]], 
		["ToDictionary$b3$1", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType), System.Collections.Generic.IEqualityComparer$b1.Of(JSIL.AnyType)]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Enumerable, "ToLookup$b2", [
		["ToLookup$b2$0", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType)]], 
		["ToLookup$b2$1", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType), System.Collections.Generic.IEqualityComparer$b1.Of(JSIL.AnyType)]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Enumerable, "ToLookup$b3", [
		["ToLookup$b3$0", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType)]], 
		["ToLookup$b3$1", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType), System.Collections.Generic.IEqualityComparer$b1.Of(JSIL.AnyType)]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Enumerable, "DefaultIfEmpty$b1", [
		["DefaultIfEmpty$b1$0", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType)]], 
		["DefaultIfEmpty$b1$1", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), JSIL.AnyType]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Enumerable, "First$b1", [
		["First$b1$0", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType)]], 
		["First$b1$1", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Boolean)]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Enumerable, "FirstOrDefault$b1", [
		["FirstOrDefault$b1$0", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType)]], 
		["FirstOrDefault$b1$1", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Boolean)]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Enumerable, "Last$b1", [
		["Last$b1$0", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType)]], 
		["Last$b1$1", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Boolean)]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Enumerable, "LastOrDefault$b1", [
		["LastOrDefault$b1$0", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType)]], 
		["LastOrDefault$b1$1", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Boolean)]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Enumerable, "Single$b1", [
		["Single$b1$0", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType)]], 
		["Single$b1$1", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Boolean)]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Enumerable, "SingleOrDefault$b1", [
		["SingleOrDefault$b1$0", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType)]], 
		["SingleOrDefault$b1$1", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Boolean)]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Enumerable, "Any$b1", [
		["Any$b1$0", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType)]], 
		["Any$b1$1", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Boolean)]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Enumerable, "Count$b1", [
		["Count$b1$0", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType)]], 
		["Count$b1$1", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Boolean)]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Enumerable, "LongCount$b1", [
		["LongCount$b1$0", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType)]], 
		["LongCount$b1$1", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Boolean)]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Enumerable, "Contains$b1", [
		["Contains$b1$0", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), JSIL.AnyType]], 
		["Contains$b1$1", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), JSIL.AnyType, System.Collections.Generic.IEqualityComparer$b1.Of(JSIL.AnyType)]]
	]);
JSIL.OverloadedMethod(System.Linq.Enumerable, "Sum", [
		["Sum$0", [System.Collections.Generic.IEnumerable$b1.Of(System.Int32)]], 
		["Sum$1", [System.Collections.Generic.IEnumerable$b1.Of(System.Nullable$b1.Of(System.Int32))]], 
		["Sum$2", [System.Collections.Generic.IEnumerable$b1.Of(System.Int64)]], 
		["Sum$3", [System.Collections.Generic.IEnumerable$b1.Of(System.Nullable$b1.Of(System.Int64))]], 
		["Sum$4", [System.Collections.Generic.IEnumerable$b1.Of(System.Single)]], 
		["Sum$5", [System.Collections.Generic.IEnumerable$b1.Of(System.Nullable$b1.Of(System.Single))]], 
		["Sum$6", [System.Collections.Generic.IEnumerable$b1.Of(System.Double)]], 
		["Sum$7", [System.Collections.Generic.IEnumerable$b1.Of(System.Nullable$b1.Of(System.Double))]], 
		["Sum$8", [System.Collections.Generic.IEnumerable$b1.Of(System.Decimal)]], 
		["Sum$9", [System.Collections.Generic.IEnumerable$b1.Of(System.Nullable$b1.Of(System.Decimal))]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Enumerable, "Sum$b1", [
		["Sum$b1$0", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Int32)]], 
		["Sum$b1$1", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Nullable$b1.Of(System.Int32))]], 
		["Sum$b1$2", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Int64)]], 
		["Sum$b1$3", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Nullable$b1.Of(System.Int64))]], 
		["Sum$b1$4", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Single)]], 
		["Sum$b1$5", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Nullable$b1.Of(System.Single))]], 
		["Sum$b1$6", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Double)]], 
		["Sum$b1$7", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Nullable$b1.Of(System.Double))]], 
		["Sum$b1$8", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Decimal)]], 
		["Sum$b1$9", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Nullable$b1.Of(System.Decimal))]]
	]);
JSIL.OverloadedMethod(System.Linq.Enumerable, "Min", [
		["Min$0", [System.Collections.Generic.IEnumerable$b1.Of(System.Int32)]], 
		["Min$1", [System.Collections.Generic.IEnumerable$b1.Of(System.Nullable$b1.Of(System.Int32))]], 
		["Min$2", [System.Collections.Generic.IEnumerable$b1.Of(System.Int64)]], 
		["Min$3", [System.Collections.Generic.IEnumerable$b1.Of(System.Nullable$b1.Of(System.Int64))]], 
		["Min$4", [System.Collections.Generic.IEnumerable$b1.Of(System.Single)]], 
		["Min$5", [System.Collections.Generic.IEnumerable$b1.Of(System.Nullable$b1.Of(System.Single))]], 
		["Min$6", [System.Collections.Generic.IEnumerable$b1.Of(System.Double)]], 
		["Min$7", [System.Collections.Generic.IEnumerable$b1.Of(System.Nullable$b1.Of(System.Double))]], 
		["Min$8", [System.Collections.Generic.IEnumerable$b1.Of(System.Decimal)]], 
		["Min$9", [System.Collections.Generic.IEnumerable$b1.Of(System.Nullable$b1.Of(System.Decimal))]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Enumerable, "Min$b1", [
		["Min$b1$0", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType)]], 
		["Min$b1$1", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Int32)]], 
		["Min$b1$2", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Nullable$b1.Of(System.Int32))]], 
		["Min$b1$3", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Int64)]], 
		["Min$b1$4", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Nullable$b1.Of(System.Int64))]], 
		["Min$b1$5", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Single)]], 
		["Min$b1$6", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Nullable$b1.Of(System.Single))]], 
		["Min$b1$7", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Double)]], 
		["Min$b1$8", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Nullable$b1.Of(System.Double))]], 
		["Min$b1$9", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Decimal)]], 
		["Min$b1$10", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Nullable$b1.Of(System.Decimal))]]
	]);
JSIL.OverloadedMethod(System.Linq.Enumerable, "Max", [
		["Max$0", [System.Collections.Generic.IEnumerable$b1.Of(System.Int32)]], 
		["Max$1", [System.Collections.Generic.IEnumerable$b1.Of(System.Nullable$b1.Of(System.Int32))]], 
		["Max$2", [System.Collections.Generic.IEnumerable$b1.Of(System.Int64)]], 
		["Max$3", [System.Collections.Generic.IEnumerable$b1.Of(System.Nullable$b1.Of(System.Int64))]], 
		["Max$4", [System.Collections.Generic.IEnumerable$b1.Of(System.Double)]], 
		["Max$5", [System.Collections.Generic.IEnumerable$b1.Of(System.Nullable$b1.Of(System.Double))]], 
		["Max$6", [System.Collections.Generic.IEnumerable$b1.Of(System.Single)]], 
		["Max$7", [System.Collections.Generic.IEnumerable$b1.Of(System.Nullable$b1.Of(System.Single))]], 
		["Max$8", [System.Collections.Generic.IEnumerable$b1.Of(System.Decimal)]], 
		["Max$9", [System.Collections.Generic.IEnumerable$b1.Of(System.Nullable$b1.Of(System.Decimal))]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Enumerable, "Max$b1", [
		["Max$b1$0", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType)]], 
		["Max$b1$1", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Int32)]], 
		["Max$b1$2", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Nullable$b1.Of(System.Int32))]], 
		["Max$b1$3", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Int64)]], 
		["Max$b1$4", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Nullable$b1.Of(System.Int64))]], 
		["Max$b1$5", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Single)]], 
		["Max$b1$6", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Nullable$b1.Of(System.Single))]], 
		["Max$b1$7", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Double)]], 
		["Max$b1$8", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Nullable$b1.Of(System.Double))]], 
		["Max$b1$9", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Decimal)]], 
		["Max$b1$10", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Nullable$b1.Of(System.Decimal))]]
	]);
JSIL.OverloadedMethod(System.Linq.Enumerable, "Average", [
		["Average$0", [System.Collections.Generic.IEnumerable$b1.Of(System.Int32)]], 
		["Average$1", [System.Collections.Generic.IEnumerable$b1.Of(System.Nullable$b1.Of(System.Int32))]], 
		["Average$2", [System.Collections.Generic.IEnumerable$b1.Of(System.Int64)]], 
		["Average$3", [System.Collections.Generic.IEnumerable$b1.Of(System.Nullable$b1.Of(System.Int64))]], 
		["Average$4", [System.Collections.Generic.IEnumerable$b1.Of(System.Single)]], 
		["Average$5", [System.Collections.Generic.IEnumerable$b1.Of(System.Nullable$b1.Of(System.Single))]], 
		["Average$6", [System.Collections.Generic.IEnumerable$b1.Of(System.Double)]], 
		["Average$7", [System.Collections.Generic.IEnumerable$b1.Of(System.Nullable$b1.Of(System.Double))]], 
		["Average$8", [System.Collections.Generic.IEnumerable$b1.Of(System.Decimal)]], 
		["Average$9", [System.Collections.Generic.IEnumerable$b1.Of(System.Nullable$b1.Of(System.Decimal))]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Enumerable, "Average$b1", [
		["Average$b1$0", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Int32)]], 
		["Average$b1$1", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Nullable$b1.Of(System.Int32))]], 
		["Average$b1$2", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Int64)]], 
		["Average$b1$3", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Nullable$b1.Of(System.Int64))]], 
		["Average$b1$4", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Single)]], 
		["Average$b1$5", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Nullable$b1.Of(System.Single))]], 
		["Average$b1$6", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Double)]], 
		["Average$b1$7", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Nullable$b1.Of(System.Double))]], 
		["Average$b1$8", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Decimal)]], 
		["Average$b1$9", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Func$b2.Of(JSIL.AnyType, System.Nullable$b1.Of(System.Decimal))]]
	]);

$asm08.System.Linq.Enumerable.Iterator$b1.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
	this.threadId = System.Threading.Thread.CurrentThread.ManagedThreadId;
};
$asm08.System.Linq.Enumerable.Iterator$b1.prototype.get_Current = function () {
	return this.current;
};
$asm08.System.Linq.Enumerable.Iterator$b1.prototype.Dispose = function () {
	this.current = null;
	this.state = -1;
};
$asm08.System.Linq.Enumerable.Iterator$b1.prototype.GetEnumerator = function () {
	if (!((this.threadId !== System.Threading.Thread.CurrentThread.ManagedThreadId) || this.state)) {
		this.state = 1;
		return this;
	}
	var iterator = this.Clone();
	iterator.state = 1;
	return iterator;
};
$asm08.System.Linq.Enumerable.Iterator$b1.prototype.IEnumerator_get_Current = function () {
	return this.Current;
};
$asm08.System.Linq.Enumerable.Iterator$b1.prototype.IEnumerable_GetEnumerator = function () {
	return this.GetEnumerator();
};
$asm08.System.Linq.Enumerable.Iterator$b1.prototype.IEnumerator_Reset = function () {
	throw JSIL.New(System.NotImplementedException, "_ctor$0", []);
};
JSIL.MakeProperty($asm08.System.Linq.Enumerable.Iterator$b1.prototype, "Current", 
	$asm08.System.Linq.Enumerable.Iterator$b1.prototype.get_Current, null);
JSIL.MakeProperty($asm08.System.Linq.Enumerable.Iterator$b1.prototype, "IEnumerator_Current", 
	$asm08.System.Linq.Enumerable.Iterator$b1.prototype.IEnumerator_get_Current, null);
$asm08.System.Linq.Enumerable.Iterator$b1.prototype.threadId = 0;
$asm08.System.Linq.Enumerable.Iterator$b1.prototype.state = 0;
$asm08.System.Linq.Enumerable.Iterator$b1.prototype.current = null;

$asm08.System.Linq.Enumerable.WhereEnumerableIterator$b1.prototype._ctor = function (source, predicate) {
	$asm08.System.Linq.Enumerable.Iterator$b1.Of(this.TSource).prototype._ctor.call(this);
	this.source = source;
	this.predicate = predicate;
};
$asm08.System.Linq.Enumerable.WhereEnumerableIterator$b1.prototype.Clone = function () {
	return new ($asm08.System.Linq.Enumerable.WhereEnumerableIterator$b1.Of(this.TSource)) (this.source, this.predicate);
};
$asm08.System.Linq.Enumerable.WhereEnumerableIterator$b1.prototype.Dispose = function () {
	if (this.enumerator !== null) {
		this.enumerator.IDisposable_Dispose();
	}
	this.enumerator = null;
	$asm08.System.Linq.Enumerable.Iterator$b1.Of(this.TSource).prototype.Dispose.call(this);
};
$asm08.System.Linq.Enumerable.WhereEnumerableIterator$b1.prototype.MoveNext = function () {
	switch (this.state) {
		case 1: 
			this.enumerator = this.source.IEnumerable$b1_GetEnumerator();
			this.state = 2;
			break;
		case 2: 
			break;
		default: 
			return false;
	}
__loop0__: 
	while (this.enumerator.IEnumerator_MoveNext()) {
		var current = this.enumerator.IEnumerator$b1_Current;
		if (this.predicate(current)) {
			this.current = current;
			return true;
		}
	}
	this.Dispose();
	return false;
};
$asm08.System.Linq.Enumerable.WhereEnumerableIterator$b1.prototype.Select$b1 = JSIL.GenericMethod(
	["TResult"], 
	function (TResult, selector) {
		return new ($asm08.System.Linq.Enumerable.WhereSelectEnumerableIterator$b2.Of(this.TSource, TResult)) (this.source, this.predicate, selector);
	}
);
$asm08.System.Linq.Enumerable.WhereEnumerableIterator$b1.prototype.Where = function (predicate) {
	return new ($asm08.System.Linq.Enumerable.WhereEnumerableIterator$b1.Of(this.TSource)) (this.source, System.Linq.Enumerable.CombinePredicates$b1(this.TSource)(this.predicate, predicate));
};
$asm08.System.Linq.Enumerable.WhereEnumerableIterator$b1.prototype.source = null;
$asm08.System.Linq.Enumerable.WhereEnumerableIterator$b1.prototype.predicate = null;
$asm08.System.Linq.Enumerable.WhereEnumerableIterator$b1.prototype.enumerator = null;

$asm08.System.Linq.Enumerable.WhereArrayIterator$b1.prototype._ctor = function (source, predicate) {
	$asm08.System.Linq.Enumerable.Iterator$b1.Of(this.TSource).prototype._ctor.call(this);
	this.source = source;
	this.predicate = predicate;
};
$asm08.System.Linq.Enumerable.WhereArrayIterator$b1.prototype.Clone = function () {
	return new ($asm08.System.Linq.Enumerable.WhereArrayIterator$b1.Of(this.TSource)) (this.source, this.predicate);
};
$asm08.System.Linq.Enumerable.WhereArrayIterator$b1.prototype.MoveNext = function () {
	if (this.state === 1) {
	__loop0__: 
		while (this.index < this.source.length) {
			var tSource = this.source[this.index];
			++this.index;
			if (this.predicate(tSource)) {
				this.current = tSource;
				return true;
			}
		}
		this.Dispose();
	}
	return false;
};
$asm08.System.Linq.Enumerable.WhereArrayIterator$b1.prototype.Select$b1 = JSIL.GenericMethod(
	["TResult"], 
	function (TResult, selector) {
		return new ($asm08.System.Linq.Enumerable.WhereSelectArrayIterator$b2.Of(this.TSource, TResult)) (this.source, this.predicate, selector);
	}
);
$asm08.System.Linq.Enumerable.WhereArrayIterator$b1.prototype.Where = function (predicate) {
	return new ($asm08.System.Linq.Enumerable.WhereArrayIterator$b1.Of(this.TSource)) (this.source, System.Linq.Enumerable.CombinePredicates$b1(this.TSource)(this.predicate, predicate));
};
$asm08.System.Linq.Enumerable.WhereArrayIterator$b1.prototype.source = null;
$asm08.System.Linq.Enumerable.WhereArrayIterator$b1.prototype.predicate = null;
$asm08.System.Linq.Enumerable.WhereArrayIterator$b1.prototype.index = 0;

$asm08.System.Linq.Enumerable.WhereListIterator$b1.prototype._ctor = function (source, predicate) {
	$asm08.System.Linq.Enumerable.Iterator$b1.Of(this.TSource).prototype._ctor.call(this);
	this.source = source;
	this.predicate = predicate;
};
$asm08.System.Linq.Enumerable.WhereListIterator$b1.prototype.Clone = function () {
	return new ($asm08.System.Linq.Enumerable.WhereListIterator$b1.Of(this.TSource)) (this.source, this.predicate);
};
$asm08.System.Linq.Enumerable.WhereListIterator$b1.prototype.MoveNext = function () {
	switch (this.state) {
		case 1: 
			this.enumerator = (this.source.GetEnumerator());
			this.state = 2;
			break;
		case 2: 
			break;
		default: 
			return false;
	}
__loop0__: 
	while (this.enumerator.MoveNext()) {
		var current = this.enumerator.Current;
		if (this.predicate(current)) {
			this.current = current;
			return true;
		}
	}
	this.Dispose();
	return false;
};
$asm08.System.Linq.Enumerable.WhereListIterator$b1.prototype.Select$b1 = JSIL.GenericMethod(
	["TResult"], 
	function (TResult, selector) {
		return new ($asm08.System.Linq.Enumerable.WhereSelectListIterator$b2.Of(this.TSource, TResult)) (this.source, this.predicate, selector);
	}
);
$asm08.System.Linq.Enumerable.WhereListIterator$b1.prototype.Where = function (predicate) {
	return new ($asm08.System.Linq.Enumerable.WhereListIterator$b1.Of(this.TSource)) (this.source, System.Linq.Enumerable.CombinePredicates$b1(this.TSource)(this.predicate, predicate));
};
$asm08.System.Linq.Enumerable.WhereListIterator$b1.prototype.source = null;
$asm08.System.Linq.Enumerable.WhereListIterator$b1.prototype.predicate = null;

$asm08.System.Linq.Enumerable.WhereSelectEnumerableIterator$b2.prototype._ctor = function (source, predicate, selector) {
	$asm08.System.Linq.Enumerable.Iterator$b1.Of(this.TResult).prototype._ctor.call(this);
	this.source = source;
	this.predicate = predicate;
	this.selector = selector;
};
$asm08.System.Linq.Enumerable.WhereSelectEnumerableIterator$b2.prototype.Clone = function () {
	return new ($asm08.System.Linq.Enumerable.WhereSelectEnumerableIterator$b2.Of(this.TSource, this.TResult)) (this.source, this.predicate, this.selector);
};
$asm08.System.Linq.Enumerable.WhereSelectEnumerableIterator$b2.prototype.Dispose = function () {
	if (this.enumerator !== null) {
		this.enumerator.IDisposable_Dispose();
	}
	this.enumerator = null;
	$asm08.System.Linq.Enumerable.Iterator$b1.Of(this.TResult).prototype.Dispose.call(this);
};
$asm08.System.Linq.Enumerable.WhereSelectEnumerableIterator$b2.prototype.MoveNext = function () {
	switch (this.state) {
		case 1: 
			this.enumerator = this.source.IEnumerable$b1_GetEnumerator();
			this.state = 2;
			break;
		case 2: 
			break;
		default: 
			return false;
	}
__loop0__: 
	while (this.enumerator.IEnumerator_MoveNext()) {
		var current = this.enumerator.IEnumerator$b1_Current;
		if (!((this.predicate !== null) && !this.predicate(current))) {
			this.current = this.selector(current);
			return true;
		}
	}
	this.Dispose();
	return false;
};
$asm08.System.Linq.Enumerable.WhereSelectEnumerableIterator$b2.prototype.Select$b1 = JSIL.GenericMethod(
	["TResult2"], 
	function (TResult2, selector) {
		return new ($asm08.System.Linq.Enumerable.WhereSelectEnumerableIterator$b2.Of(this.TSource, TResult2)) (this.source, this.predicate, System.Linq.Enumerable.CombineSelectors$b3(this.TSource, this.TResult, TResult2)(this.selector, selector));
	}
);
$asm08.System.Linq.Enumerable.WhereSelectEnumerableIterator$b2.prototype.Where = function (predicate) {
	return new ($asm08.System.Linq.Enumerable.WhereEnumerableIterator$b1.Of(this.TResult)) (this, predicate);
};
$asm08.System.Linq.Enumerable.WhereSelectEnumerableIterator$b2.prototype.source = null;
$asm08.System.Linq.Enumerable.WhereSelectEnumerableIterator$b2.prototype.predicate = null;
$asm08.System.Linq.Enumerable.WhereSelectEnumerableIterator$b2.prototype.selector = null;
$asm08.System.Linq.Enumerable.WhereSelectEnumerableIterator$b2.prototype.enumerator = null;

$asm08.System.Linq.Enumerable.WhereSelectArrayIterator$b2.prototype._ctor = function (source, predicate, selector) {
	$asm08.System.Linq.Enumerable.Iterator$b1.Of(this.TResult).prototype._ctor.call(this);
	this.source = source;
	this.predicate = predicate;
	this.selector = selector;
};
$asm08.System.Linq.Enumerable.WhereSelectArrayIterator$b2.prototype.Clone = function () {
	return new ($asm08.System.Linq.Enumerable.WhereSelectArrayIterator$b2.Of(this.TSource, this.TResult)) (this.source, this.predicate, this.selector);
};
$asm08.System.Linq.Enumerable.WhereSelectArrayIterator$b2.prototype.MoveNext = function () {
	if (this.state === 1) {
	__loop0__: 
		while (this.index < this.source.length) {
			var arg = this.source[this.index];
			++this.index;
			if (!((this.predicate !== null) && !this.predicate(arg))) {
				this.current = this.selector(arg);
				return true;
			}
		}
		this.Dispose();
	}
	return false;
};
$asm08.System.Linq.Enumerable.WhereSelectArrayIterator$b2.prototype.Select$b1 = JSIL.GenericMethod(
	["TResult2"], 
	function (TResult2, selector) {
		return new ($asm08.System.Linq.Enumerable.WhereSelectArrayIterator$b2.Of(this.TSource, TResult2)) (this.source, this.predicate, System.Linq.Enumerable.CombineSelectors$b3(this.TSource, this.TResult, TResult2)(this.selector, selector));
	}
);
$asm08.System.Linq.Enumerable.WhereSelectArrayIterator$b2.prototype.Where = function (predicate) {
	return new ($asm08.System.Linq.Enumerable.WhereEnumerableIterator$b1.Of(this.TResult)) (this, predicate);
};
$asm08.System.Linq.Enumerable.WhereSelectArrayIterator$b2.prototype.source = null;
$asm08.System.Linq.Enumerable.WhereSelectArrayIterator$b2.prototype.predicate = null;
$asm08.System.Linq.Enumerable.WhereSelectArrayIterator$b2.prototype.selector = null;
$asm08.System.Linq.Enumerable.WhereSelectArrayIterator$b2.prototype.index = 0;

$asm08.System.Linq.Enumerable.WhereSelectListIterator$b2.prototype._ctor = function (source, predicate, selector) {
	$asm08.System.Linq.Enumerable.Iterator$b1.Of(this.TResult).prototype._ctor.call(this);
	this.source = source;
	this.predicate = predicate;
	this.selector = selector;
};
$asm08.System.Linq.Enumerable.WhereSelectListIterator$b2.prototype.Clone = function () {
	return new ($asm08.System.Linq.Enumerable.WhereSelectListIterator$b2.Of(this.TSource, this.TResult)) (this.source, this.predicate, this.selector);
};
$asm08.System.Linq.Enumerable.WhereSelectListIterator$b2.prototype.MoveNext = function () {
	switch (this.state) {
		case 1: 
			this.enumerator = (this.source.GetEnumerator());
			this.state = 2;
			break;
		case 2: 
			break;
		default: 
			return false;
	}
__loop0__: 
	while (this.enumerator.MoveNext()) {
		var current = this.enumerator.Current;
		if (!((this.predicate !== null) && !this.predicate(current))) {
			this.current = this.selector(current);
			return true;
		}
	}
	this.Dispose();
	return false;
};
$asm08.System.Linq.Enumerable.WhereSelectListIterator$b2.prototype.Select$b1 = JSIL.GenericMethod(
	["TResult2"], 
	function (TResult2, selector) {
		return new ($asm08.System.Linq.Enumerable.WhereSelectListIterator$b2.Of(this.TSource, TResult2)) (this.source, this.predicate, System.Linq.Enumerable.CombineSelectors$b3(this.TSource, this.TResult, TResult2)(this.selector, selector));
	}
);
$asm08.System.Linq.Enumerable.WhereSelectListIterator$b2.prototype.Where = function (predicate) {
	return new ($asm08.System.Linq.Enumerable.WhereEnumerableIterator$b1.Of(this.TResult)) (this, predicate);
};
$asm08.System.Linq.Enumerable.WhereSelectListIterator$b2.prototype.source = null;
$asm08.System.Linq.Enumerable.WhereSelectListIterator$b2.prototype.predicate = null;
$asm08.System.Linq.Enumerable.WhereSelectListIterator$b2.prototype.selector = null;

$asm08.System.Linq.Enumerable.$lWhereIterator$gd__0$b1.prototype.IEnumerable$b1_GetEnumerator = function () {
	if (!((System.Threading.Thread.CurrentThread.ManagedThreadId !== this.$initialThreadId) || (this.$state !== -2))) {
		this.$state = 0;
		var $lWhereIterator$gd__ = this;
	} else {
		$lWhereIterator$gd__ = new ($asm08.System.Linq.Enumerable.$lWhereIterator$gd__0$b1.Of(this.TSource)) (0);
	}
	$lWhereIterator$gd__.source = this.$source;
	$lWhereIterator$gd__.predicate = this.$predicate;
	return $lWhereIterator$gd__;
};
$asm08.System.Linq.Enumerable.$lWhereIterator$gd__0$b1.prototype.IEnumerable_GetEnumerator = function () {
	return this.IEnumerable$b1_GetEnumerator();
};
$asm08.System.Linq.Enumerable.$lWhereIterator$gd__0$b1.prototype.IEnumerator_MoveNext = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				try {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								switch (this.$state) {
									case 0: 
										this.$state = -1;
										this.index = -1;
										this.$wrap3 = this.source.IEnumerable$b1_GetEnumerator();
										this.$state = 1;
										break;
									case 1: 
										__label1__ = "IL_AF";
										continue __step1__;
									case 2: 
										this.$state = 1;
										break;
									default: 
										__label1__ = "IL_AF";
										continue __step1__;
								}
							__loop0__: 
								while (this.$wrap3.IEnumerator_MoveNext()) {
									this.element = this.$wrap3.IEnumerator$b1_Current;
									++this.index;
									if (this.predicate(this.element, this.index)) {
										this.$current = this.element;
										this.$state = 2;
										var result = true;
										return result;
									}
								}
								this.$l$gm__Finally4();
								__label1__ = "IL_AF";
								continue __step1__;
								break;
							case "IL_AF":
								result = false;
								break __step1__;
						}
					}
				} catch ($exception) {
					this.IDisposable_Dispose();
					throw $exception;
				}
				return result;
				break __step0__;
		}
	}
};
$asm08.System.Linq.Enumerable.$lWhereIterator$gd__0$b1.prototype.IEnumerator$b1_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Enumerable.$lWhereIterator$gd__0$b1.prototype.IEnumerator_Reset = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm08.System.Linq.Enumerable.$lWhereIterator$gd__0$b1.prototype.IDisposable_Dispose = function () {
	switch (this.$state) {
		case 1: 
		case 2: 
			try {
			} finally {
				this.$l$gm__Finally4();
			}
			return;
		default: 
			return;
	}
};
$asm08.System.Linq.Enumerable.$lWhereIterator$gd__0$b1.prototype.IEnumerator_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Enumerable.$lWhereIterator$gd__0$b1.prototype._ctor = function ($l$g1__state) {
	System.Object.prototype._ctor.call(this);
	this.$state = $l$g1__state;
	this.$initialThreadId = System.Threading.Thread.CurrentThread.ManagedThreadId;
};
$asm08.System.Linq.Enumerable.$lWhereIterator$gd__0$b1.prototype.$l$gm__Finally4 = function () {
	this.$state = -1;
	if (this.$wrap3 !== null) {
		this.$wrap3.IDisposable_Dispose();
	}
};
JSIL.MakeProperty($asm08.System.Linq.Enumerable.$lWhereIterator$gd__0$b1.prototype, "IEnumerator$b1_Current", 
	$asm08.System.Linq.Enumerable.$lWhereIterator$gd__0$b1.prototype.IEnumerator$b1_get_Current, null);
JSIL.MakeProperty($asm08.System.Linq.Enumerable.$lWhereIterator$gd__0$b1.prototype, "IEnumerator_Current", 
	$asm08.System.Linq.Enumerable.$lWhereIterator$gd__0$b1.prototype.IEnumerator_get_Current, null);
$asm08.System.Linq.Enumerable.$lWhereIterator$gd__0$b1.prototype.$current = null;
$asm08.System.Linq.Enumerable.$lWhereIterator$gd__0$b1.prototype.$state = 0;
$asm08.System.Linq.Enumerable.$lWhereIterator$gd__0$b1.prototype.$initialThreadId = 0;
$asm08.System.Linq.Enumerable.$lWhereIterator$gd__0$b1.prototype.source = null;
$asm08.System.Linq.Enumerable.$lWhereIterator$gd__0$b1.prototype.$source = null;
$asm08.System.Linq.Enumerable.$lWhereIterator$gd__0$b1.prototype.predicate = null;
$asm08.System.Linq.Enumerable.$lWhereIterator$gd__0$b1.prototype.$predicate = null;
$asm08.System.Linq.Enumerable.$lWhereIterator$gd__0$b1.prototype.index = 0;
$asm08.System.Linq.Enumerable.$lWhereIterator$gd__0$b1.prototype.element = null;
$asm08.System.Linq.Enumerable.$lWhereIterator$gd__0$b1.prototype.$wrap3 = null;

$asm08.System.Linq.Enumerable.$lSelectIterator$gd__7$b2.prototype.IEnumerable$b1_GetEnumerator = function () {
	if (!((System.Threading.Thread.CurrentThread.ManagedThreadId !== this.$initialThreadId) || (this.$state !== -2))) {
		this.$state = 0;
		var $lSelectIterator$gd__ = this;
	} else {
		$lSelectIterator$gd__ = new ($asm08.System.Linq.Enumerable.$lSelectIterator$gd__7$b2.Of(this.TSource, this.TResult)) (0);
	}
	$lSelectIterator$gd__.source = this.$source;
	$lSelectIterator$gd__.selector = this.$selector;
	return $lSelectIterator$gd__;
};
$asm08.System.Linq.Enumerable.$lSelectIterator$gd__7$b2.prototype.IEnumerable_GetEnumerator = function () {
	return this.IEnumerable$b1_GetEnumerator();
};
$asm08.System.Linq.Enumerable.$lSelectIterator$gd__7$b2.prototype.IEnumerator_MoveNext = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				try {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								switch (this.$state) {
									case 0: 
										this.$state = -1;
										this.index = -1;
										this.$wrapa = this.source.IEnumerable$b1_GetEnumerator();
										this.$state = 1;
										break;
									case 1: 
										__label1__ = "IL_A7";
										continue __step1__;
									case 2: 
										this.$state = 1;
										break;
									default: 
										__label1__ = "IL_A7";
										continue __step1__;
								}
								if (this.$wrapa.IEnumerator_MoveNext()) {
									this.element = this.$wrapa.IEnumerator$b1_Current;
									++this.index;
									this.$current = this.selector(this.element, this.index);
									this.$state = 2;
									var result = true;
									return result;
								}
								this.$l$gm__Finallyb();
								__label1__ = "IL_A7";
								continue __step1__;
								break;
							case "IL_A7":
								result = false;
								break __step1__;
						}
					}
				} catch ($exception) {
					this.IDisposable_Dispose();
					throw $exception;
				}
				return result;
				break __step0__;
		}
	}
};
$asm08.System.Linq.Enumerable.$lSelectIterator$gd__7$b2.prototype.IEnumerator$b1_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Enumerable.$lSelectIterator$gd__7$b2.prototype.IEnumerator_Reset = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm08.System.Linq.Enumerable.$lSelectIterator$gd__7$b2.prototype.IDisposable_Dispose = function () {
	switch (this.$state) {
		case 1: 
		case 2: 
			try {
			} finally {
				this.$l$gm__Finallyb();
			}
			return;
		default: 
			return;
	}
};
$asm08.System.Linq.Enumerable.$lSelectIterator$gd__7$b2.prototype.IEnumerator_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Enumerable.$lSelectIterator$gd__7$b2.prototype._ctor = function ($l$g1__state) {
	System.Object.prototype._ctor.call(this);
	this.$state = $l$g1__state;
	this.$initialThreadId = System.Threading.Thread.CurrentThread.ManagedThreadId;
};
$asm08.System.Linq.Enumerable.$lSelectIterator$gd__7$b2.prototype.$l$gm__Finallyb = function () {
	this.$state = -1;
	if (this.$wrapa !== null) {
		this.$wrapa.IDisposable_Dispose();
	}
};
JSIL.MakeProperty($asm08.System.Linq.Enumerable.$lSelectIterator$gd__7$b2.prototype, "IEnumerator$b1_Current", 
	$asm08.System.Linq.Enumerable.$lSelectIterator$gd__7$b2.prototype.IEnumerator$b1_get_Current, null);
JSIL.MakeProperty($asm08.System.Linq.Enumerable.$lSelectIterator$gd__7$b2.prototype, "IEnumerator_Current", 
	$asm08.System.Linq.Enumerable.$lSelectIterator$gd__7$b2.prototype.IEnumerator_get_Current, null);
$asm08.System.Linq.Enumerable.$lSelectIterator$gd__7$b2.prototype.$current = null;
$asm08.System.Linq.Enumerable.$lSelectIterator$gd__7$b2.prototype.$state = 0;
$asm08.System.Linq.Enumerable.$lSelectIterator$gd__7$b2.prototype.$initialThreadId = 0;
$asm08.System.Linq.Enumerable.$lSelectIterator$gd__7$b2.prototype.source = null;
$asm08.System.Linq.Enumerable.$lSelectIterator$gd__7$b2.prototype.$source = null;
$asm08.System.Linq.Enumerable.$lSelectIterator$gd__7$b2.prototype.selector = null;
$asm08.System.Linq.Enumerable.$lSelectIterator$gd__7$b2.prototype.$selector = null;
$asm08.System.Linq.Enumerable.$lSelectIterator$gd__7$b2.prototype.index = 0;
$asm08.System.Linq.Enumerable.$lSelectIterator$gd__7$b2.prototype.element = null;
$asm08.System.Linq.Enumerable.$lSelectIterator$gd__7$b2.prototype.$wrapa = null;

$asm08.System.Linq.Enumerable.$l$gc__DisplayClassf$b1.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm08.System.Linq.Enumerable.$l$gc__DisplayClassf$b1.prototype.predicate1 = null;
$asm08.System.Linq.Enumerable.$l$gc__DisplayClassf$b1.prototype.predicate2 = null;

$asm08.System.Linq.Enumerable.$l$gc__DisplayClass12$b3.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm08.System.Linq.Enumerable.$l$gc__DisplayClass12$b3.prototype.selector1 = null;
$asm08.System.Linq.Enumerable.$l$gc__DisplayClass12$b3.prototype.selector2 = null;

$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__14$b2.prototype.IEnumerable$b1_GetEnumerator = function () {
	if (!((System.Threading.Thread.CurrentThread.ManagedThreadId !== this.$initialThreadId) || (this.$state !== -2))) {
		this.$state = 0;
		var $lSelectManyIterator$gd__ = this;
	} else {
		$lSelectManyIterator$gd__ = new ($asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__14$b2.Of(this.TSource, this.TResult)) (0);
	}
	$lSelectManyIterator$gd__.source = this.$source;
	$lSelectManyIterator$gd__.selector = this.$selector;
	return $lSelectManyIterator$gd__;
};
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__14$b2.prototype.IEnumerable_GetEnumerator = function () {
	return this.IEnumerable$b1_GetEnumerator();
};
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__14$b2.prototype.IEnumerator_MoveNext = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				try {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								var num = this.$state;
								if (num === 0) {
									this.$state = -1;
									this.$wrap17 = this.source.IEnumerable$b1_GetEnumerator();
									this.$state = 1;
									__label1__ = "IL_B0";
									continue __step1__;
								}
								if (num !== 3) {
									__label1__ = "IL_C6";
									continue __step1__;
								}
								this.$state = 2;
								__label1__ = "IL_9D";
								continue __step1__;
								break;
							case "IL_9D":
								if (this.$wrap19.IEnumerator_MoveNext()) {
									this.subElement = this.$wrap19.IEnumerator$b1_Current;
									this.$current = this.subElement;
									this.$state = 3;
									var result = true;
									return result;
								}
								this.$l$gm__Finally1a();
								__label1__ = "IL_B0";
								continue __step1__;
								break;
							case "IL_B0":
								if (this.$wrap17.IEnumerator_MoveNext()) {
									this.element = this.$wrap17.IEnumerator$b1_Current;
									this.$wrap19 = this.selector(this.element).IEnumerable$b1_GetEnumerator();
									this.$state = 2;
									__label1__ = "IL_9D";
									continue __step1__;
								}
								this.$l$gm__Finally18();
								__label1__ = "IL_C6";
								continue __step1__;
								break;
							case "IL_C6":
								result = false;
								break __step1__;
						}
					}
				} catch ($exception) {
					this.IDisposable_Dispose();
					throw $exception;
				}
				return result;
				break __step0__;
		}
	}
};
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__14$b2.prototype.IEnumerator$b1_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__14$b2.prototype.IEnumerator_Reset = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__14$b2.prototype.IDisposable_Dispose = function () {
	switch (this.$state) {
		case 1: 
		case 2: 
		case 3: 
			try {
				switch (this.$state) {
					case 2: 
					case 3: 
						try {
						} finally {
							this.$l$gm__Finally1a();
						}
						break;
				}
			} finally {
				this.$l$gm__Finally18();
			}
			return;
		default: 
			return;
	}
};
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__14$b2.prototype.IEnumerator_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__14$b2.prototype._ctor = function ($l$g1__state) {
	System.Object.prototype._ctor.call(this);
	this.$state = $l$g1__state;
	this.$initialThreadId = System.Threading.Thread.CurrentThread.ManagedThreadId;
};
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__14$b2.prototype.$l$gm__Finally18 = function () {
	this.$state = -1;
	if (this.$wrap17 !== null) {
		this.$wrap17.IDisposable_Dispose();
	}
};
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__14$b2.prototype.$l$gm__Finally1a = function () {
	this.$state = 1;
	if (this.$wrap19 !== null) {
		this.$wrap19.IDisposable_Dispose();
	}
};
JSIL.MakeProperty($asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__14$b2.prototype, "IEnumerator$b1_Current", 
	$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__14$b2.prototype.IEnumerator$b1_get_Current, null);
JSIL.MakeProperty($asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__14$b2.prototype, "IEnumerator_Current", 
	$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__14$b2.prototype.IEnumerator_get_Current, null);
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__14$b2.prototype.$current = null;
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__14$b2.prototype.$state = 0;
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__14$b2.prototype.$initialThreadId = 0;
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__14$b2.prototype.source = null;
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__14$b2.prototype.$source = null;
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__14$b2.prototype.selector = null;
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__14$b2.prototype.$selector = null;
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__14$b2.prototype.element = null;
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__14$b2.prototype.subElement = null;
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__14$b2.prototype.$wrap17 = null;
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__14$b2.prototype.$wrap19 = null;

$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__1d$b2.prototype.IEnumerable$b1_GetEnumerator = function () {
	if (!((System.Threading.Thread.CurrentThread.ManagedThreadId !== this.$initialThreadId) || (this.$state !== -2))) {
		this.$state = 0;
		var $lSelectManyIterator$gd__1d = this;
	} else {
		$lSelectManyIterator$gd__1d = new ($asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__1d$b2.Of(this.TSource, this.TResult)) (0);
	}
	$lSelectManyIterator$gd__1d.source = this.$source;
	$lSelectManyIterator$gd__1d.selector = this.$selector;
	return $lSelectManyIterator$gd__1d;
};
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__1d$b2.prototype.IEnumerable_GetEnumerator = function () {
	return this.IEnumerable$b1_GetEnumerator();
};
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__1d$b2.prototype.IEnumerator_MoveNext = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				try {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								var num = this.$state;
								if (num === 0) {
									this.$state = -1;
									this.index = -1;
									this.$wrap21 = this.source.IEnumerable$b1_GetEnumerator();
									this.$state = 1;
									__label1__ = "IL_CE";
									continue __step1__;
								}
								if (num !== 3) {
									__label1__ = "IL_E4";
									continue __step1__;
								}
								this.$state = 2;
								__label1__ = "IL_BB";
								continue __step1__;
								break;
							case "IL_BB":
								if (this.$wrap23.IEnumerator_MoveNext()) {
									this.subElement = this.$wrap23.IEnumerator$b1_Current;
									this.$current = this.subElement;
									this.$state = 3;
									var result = true;
									return result;
								}
								this.$l$gm__Finally24();
								__label1__ = "IL_CE";
								continue __step1__;
								break;
							case "IL_CE":
								if (this.$wrap21.IEnumerator_MoveNext()) {
									this.element = this.$wrap21.IEnumerator$b1_Current;
									++this.index;
									this.$wrap23 = this.selector(this.element, this.index).IEnumerable$b1_GetEnumerator();
									this.$state = 2;
									__label1__ = "IL_BB";
									continue __step1__;
								}
								this.$l$gm__Finally22();
								__label1__ = "IL_E4";
								continue __step1__;
								break;
							case "IL_E4":
								result = false;
								break __step1__;
						}
					}
				} catch ($exception) {
					this.IDisposable_Dispose();
					throw $exception;
				}
				return result;
				break __step0__;
		}
	}
};
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__1d$b2.prototype.IEnumerator$b1_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__1d$b2.prototype.IEnumerator_Reset = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__1d$b2.prototype.IDisposable_Dispose = function () {
	switch (this.$state) {
		case 1: 
		case 2: 
		case 3: 
			try {
				switch (this.$state) {
					case 2: 
					case 3: 
						try {
						} finally {
							this.$l$gm__Finally24();
						}
						break;
				}
			} finally {
				this.$l$gm__Finally22();
			}
			return;
		default: 
			return;
	}
};
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__1d$b2.prototype.IEnumerator_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__1d$b2.prototype._ctor = function ($l$g1__state) {
	System.Object.prototype._ctor.call(this);
	this.$state = $l$g1__state;
	this.$initialThreadId = System.Threading.Thread.CurrentThread.ManagedThreadId;
};
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__1d$b2.prototype.$l$gm__Finally22 = function () {
	this.$state = -1;
	if (this.$wrap21 !== null) {
		this.$wrap21.IDisposable_Dispose();
	}
};
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__1d$b2.prototype.$l$gm__Finally24 = function () {
	this.$state = 1;
	if (this.$wrap23 !== null) {
		this.$wrap23.IDisposable_Dispose();
	}
};
JSIL.MakeProperty($asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__1d$b2.prototype, "IEnumerator$b1_Current", 
	$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__1d$b2.prototype.IEnumerator$b1_get_Current, null);
JSIL.MakeProperty($asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__1d$b2.prototype, "IEnumerator_Current", 
	$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__1d$b2.prototype.IEnumerator_get_Current, null);
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__1d$b2.prototype.$current = null;
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__1d$b2.prototype.$state = 0;
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__1d$b2.prototype.$initialThreadId = 0;
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__1d$b2.prototype.source = null;
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__1d$b2.prototype.$source = null;
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__1d$b2.prototype.selector = null;
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__1d$b2.prototype.$selector = null;
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__1d$b2.prototype.index = 0;
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__1d$b2.prototype.element = null;
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__1d$b2.prototype.subElement = null;
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__1d$b2.prototype.$wrap21 = null;
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__1d$b2.prototype.$wrap23 = null;

$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__27$b3.prototype.IEnumerable$b1_GetEnumerator = function () {
	if (!((System.Threading.Thread.CurrentThread.ManagedThreadId !== this.$initialThreadId) || (this.$state !== -2))) {
		this.$state = 0;
		var $lSelectManyIterator$gd__ = this;
	} else {
		$lSelectManyIterator$gd__ = new ($asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__27$b3.Of(this.TSource, this.TCollection, this.TResult)) (0);
	}
	$lSelectManyIterator$gd__.source = this.$source;
	$lSelectManyIterator$gd__.collectionSelector = this.$collectionSelector;
	$lSelectManyIterator$gd__.resultSelector = this.$resultSelector;
	return $lSelectManyIterator$gd__;
};
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__27$b3.prototype.IEnumerable_GetEnumerator = function () {
	return this.IEnumerable$b1_GetEnumerator();
};
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__27$b3.prototype.IEnumerator_MoveNext = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				try {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								var num = this.$state;
								if (num === 0) {
									this.$state = -1;
									this.index = -1;
									this.$wrap2b = this.source.IEnumerable$b1_GetEnumerator();
									this.$state = 1;
									__label1__ = "IL_DF";
									continue __step1__;
								}
								if (num !== 3) {
									__label1__ = "IL_F5";
									continue __step1__;
								}
								this.$state = 2;
								__label1__ = "IL_CC";
								continue __step1__;
								break;
							case "IL_CC":
								if (this.$wrap2d.IEnumerator_MoveNext()) {
									this.subElement = this.$wrap2d.IEnumerator$b1_Current;
									this.$current = this.resultSelector(this.element, this.subElement);
									this.$state = 3;
									var result = true;
									return result;
								}
								this.$l$gm__Finally2e();
								__label1__ = "IL_DF";
								continue __step1__;
								break;
							case "IL_DF":
								if (this.$wrap2b.IEnumerator_MoveNext()) {
									this.element = this.$wrap2b.IEnumerator$b1_Current;
									++this.index;
									this.$wrap2d = this.collectionSelector(this.element, this.index).IEnumerable$b1_GetEnumerator();
									this.$state = 2;
									__label1__ = "IL_CC";
									continue __step1__;
								}
								this.$l$gm__Finally2c();
								__label1__ = "IL_F5";
								continue __step1__;
								break;
							case "IL_F5":
								result = false;
								break __step1__;
						}
					}
				} catch ($exception) {
					this.IDisposable_Dispose();
					throw $exception;
				}
				return result;
				break __step0__;
		}
	}
};
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__27$b3.prototype.IEnumerator$b1_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__27$b3.prototype.IEnumerator_Reset = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__27$b3.prototype.IDisposable_Dispose = function () {
	switch (this.$state) {
		case 1: 
		case 2: 
		case 3: 
			try {
				switch (this.$state) {
					case 2: 
					case 3: 
						try {
						} finally {
							this.$l$gm__Finally2e();
						}
						break;
				}
			} finally {
				this.$l$gm__Finally2c();
			}
			return;
		default: 
			return;
	}
};
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__27$b3.prototype.IEnumerator_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__27$b3.prototype._ctor = function ($l$g1__state) {
	System.Object.prototype._ctor.call(this);
	this.$state = $l$g1__state;
	this.$initialThreadId = System.Threading.Thread.CurrentThread.ManagedThreadId;
};
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__27$b3.prototype.$l$gm__Finally2c = function () {
	this.$state = -1;
	if (this.$wrap2b !== null) {
		this.$wrap2b.IDisposable_Dispose();
	}
};
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__27$b3.prototype.$l$gm__Finally2e = function () {
	this.$state = 1;
	if (this.$wrap2d !== null) {
		this.$wrap2d.IDisposable_Dispose();
	}
};
JSIL.MakeProperty($asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__27$b3.prototype, "IEnumerator$b1_Current", 
	$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__27$b3.prototype.IEnumerator$b1_get_Current, null);
JSIL.MakeProperty($asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__27$b3.prototype, "IEnumerator_Current", 
	$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__27$b3.prototype.IEnumerator_get_Current, null);
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__27$b3.prototype.$current = null;
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__27$b3.prototype.$state = 0;
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__27$b3.prototype.$initialThreadId = 0;
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__27$b3.prototype.source = null;
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__27$b3.prototype.$source = null;
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__27$b3.prototype.collectionSelector = null;
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__27$b3.prototype.$collectionSelector = null;
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__27$b3.prototype.resultSelector = null;
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__27$b3.prototype.$resultSelector = null;
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__27$b3.prototype.index = 0;
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__27$b3.prototype.element = null;
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__27$b3.prototype.subElement = null;
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__27$b3.prototype.$wrap2b = null;
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__27$b3.prototype.$wrap2d = null;

$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__31$b3.prototype.IEnumerable$b1_GetEnumerator = function () {
	if (!((System.Threading.Thread.CurrentThread.ManagedThreadId !== this.$initialThreadId) || (this.$state !== -2))) {
		this.$state = 0;
		var $lSelectManyIterator$gd__ = this;
	} else {
		$lSelectManyIterator$gd__ = new ($asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__31$b3.Of(this.TSource, this.TCollection, this.TResult)) (0);
	}
	$lSelectManyIterator$gd__.source = this.$source;
	$lSelectManyIterator$gd__.collectionSelector = this.$collectionSelector;
	$lSelectManyIterator$gd__.resultSelector = this.$resultSelector;
	return $lSelectManyIterator$gd__;
};
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__31$b3.prototype.IEnumerable_GetEnumerator = function () {
	return this.IEnumerable$b1_GetEnumerator();
};
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__31$b3.prototype.IEnumerator_MoveNext = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				try {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								var num = this.$state;
								if (num === 0) {
									this.$state = -1;
									this.$wrap34 = this.source.IEnumerable$b1_GetEnumerator();
									this.$state = 1;
									__label1__ = "IL_C4";
									continue __step1__;
								}
								if (num !== 3) {
									__label1__ = "IL_DA";
									continue __step1__;
								}
								this.$state = 2;
								__label1__ = "IL_B1";
								continue __step1__;
								break;
							case "IL_B1":
								if (this.$wrap36.IEnumerator_MoveNext()) {
									this.subElement = this.$wrap36.IEnumerator$b1_Current;
									this.$current = this.resultSelector(this.element, this.subElement);
									this.$state = 3;
									var result = true;
									return result;
								}
								this.$l$gm__Finally37();
								__label1__ = "IL_C4";
								continue __step1__;
								break;
							case "IL_C4":
								if (this.$wrap34.IEnumerator_MoveNext()) {
									this.element = this.$wrap34.IEnumerator$b1_Current;
									this.$wrap36 = this.collectionSelector(this.element).IEnumerable$b1_GetEnumerator();
									this.$state = 2;
									__label1__ = "IL_B1";
									continue __step1__;
								}
								this.$l$gm__Finally35();
								__label1__ = "IL_DA";
								continue __step1__;
								break;
							case "IL_DA":
								result = false;
								break __step1__;
						}
					}
				} catch ($exception) {
					this.IDisposable_Dispose();
					throw $exception;
				}
				return result;
				break __step0__;
		}
	}
};
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__31$b3.prototype.IEnumerator$b1_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__31$b3.prototype.IEnumerator_Reset = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__31$b3.prototype.IDisposable_Dispose = function () {
	switch (this.$state) {
		case 1: 
		case 2: 
		case 3: 
			try {
				switch (this.$state) {
					case 2: 
					case 3: 
						try {
						} finally {
							this.$l$gm__Finally37();
						}
						break;
				}
			} finally {
				this.$l$gm__Finally35();
			}
			return;
		default: 
			return;
	}
};
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__31$b3.prototype.IEnumerator_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__31$b3.prototype._ctor = function ($l$g1__state) {
	System.Object.prototype._ctor.call(this);
	this.$state = $l$g1__state;
	this.$initialThreadId = System.Threading.Thread.CurrentThread.ManagedThreadId;
};
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__31$b3.prototype.$l$gm__Finally35 = function () {
	this.$state = -1;
	if (this.$wrap34 !== null) {
		this.$wrap34.IDisposable_Dispose();
	}
};
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__31$b3.prototype.$l$gm__Finally37 = function () {
	this.$state = 1;
	if (this.$wrap36 !== null) {
		this.$wrap36.IDisposable_Dispose();
	}
};
JSIL.MakeProperty($asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__31$b3.prototype, "IEnumerator$b1_Current", 
	$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__31$b3.prototype.IEnumerator$b1_get_Current, null);
JSIL.MakeProperty($asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__31$b3.prototype, "IEnumerator_Current", 
	$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__31$b3.prototype.IEnumerator_get_Current, null);
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__31$b3.prototype.$current = null;
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__31$b3.prototype.$state = 0;
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__31$b3.prototype.$initialThreadId = 0;
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__31$b3.prototype.source = null;
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__31$b3.prototype.$source = null;
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__31$b3.prototype.collectionSelector = null;
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__31$b3.prototype.$collectionSelector = null;
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__31$b3.prototype.resultSelector = null;
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__31$b3.prototype.$resultSelector = null;
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__31$b3.prototype.element = null;
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__31$b3.prototype.subElement = null;
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__31$b3.prototype.$wrap34 = null;
$asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__31$b3.prototype.$wrap36 = null;

$asm08.System.Linq.Enumerable.$lTakeIterator$gd__3a$b1.prototype.IEnumerable$b1_GetEnumerator = function () {
	if (!((System.Threading.Thread.CurrentThread.ManagedThreadId !== this.$initialThreadId) || (this.$state !== -2))) {
		this.$state = 0;
		var $lTakeIterator$gd__3a = this;
	} else {
		$lTakeIterator$gd__3a = new ($asm08.System.Linq.Enumerable.$lTakeIterator$gd__3a$b1.Of(this.TSource)) (0);
	}
	$lTakeIterator$gd__3a.source = this.$source;
	$lTakeIterator$gd__3a.count = this.$count;
	return $lTakeIterator$gd__3a;
};
$asm08.System.Linq.Enumerable.$lTakeIterator$gd__3a$b1.prototype.IEnumerable_GetEnumerator = function () {
	return this.IEnumerable$b1_GetEnumerator();
};
$asm08.System.Linq.Enumerable.$lTakeIterator$gd__3a$b1.prototype.IEnumerator_MoveNext = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				try {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								switch (this.$state) {
									case 0: 
										this.$state = -1;
										if (this.count <= 0) {
											__label1__ = "IL_9A";
											continue __step1__;
										}
										this.$wrap3c = this.source.IEnumerable$b1_GetEnumerator();
										this.$state = 1;
										break;
									case 1: 
										__label1__ = "IL_9A";
										continue __step1__;
									case 2: 
										this.$state = 1;
										if (--this.count === 0) {
											__label1__ = "IL_94";
											continue __step1__;
										}
										break;
									default: 
										__label1__ = "IL_9A";
										continue __step1__;
								}
								if (this.$wrap3c.IEnumerator_MoveNext()) {
									this.element = this.$wrap3c.IEnumerator$b1_Current;
									this.$current = this.element;
									this.$state = 2;
									var result = true;
									return result;
								}
								__label1__ = "IL_94";
								continue __step1__;
								break;
							case "IL_94":
								this.$l$gm__Finally3d();
								__label1__ = "IL_9A";
								continue __step1__;
								break;
							case "IL_9A":
								result = false;
								break __step1__;
						}
					}
				} catch ($exception) {
					this.IDisposable_Dispose();
					throw $exception;
				}
				return result;
				break __step0__;
		}
	}
};
$asm08.System.Linq.Enumerable.$lTakeIterator$gd__3a$b1.prototype.IEnumerator$b1_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Enumerable.$lTakeIterator$gd__3a$b1.prototype.IEnumerator_Reset = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm08.System.Linq.Enumerable.$lTakeIterator$gd__3a$b1.prototype.IDisposable_Dispose = function () {
	switch (this.$state) {
		case 1: 
		case 2: 
			try {
			} finally {
				this.$l$gm__Finally3d();
			}
			return;
		default: 
			return;
	}
};
$asm08.System.Linq.Enumerable.$lTakeIterator$gd__3a$b1.prototype.IEnumerator_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Enumerable.$lTakeIterator$gd__3a$b1.prototype._ctor = function ($l$g1__state) {
	System.Object.prototype._ctor.call(this);
	this.$state = $l$g1__state;
	this.$initialThreadId = System.Threading.Thread.CurrentThread.ManagedThreadId;
};
$asm08.System.Linq.Enumerable.$lTakeIterator$gd__3a$b1.prototype.$l$gm__Finally3d = function () {
	this.$state = -1;
	if (this.$wrap3c !== null) {
		this.$wrap3c.IDisposable_Dispose();
	}
};
JSIL.MakeProperty($asm08.System.Linq.Enumerable.$lTakeIterator$gd__3a$b1.prototype, "IEnumerator$b1_Current", 
	$asm08.System.Linq.Enumerable.$lTakeIterator$gd__3a$b1.prototype.IEnumerator$b1_get_Current, null);
JSIL.MakeProperty($asm08.System.Linq.Enumerable.$lTakeIterator$gd__3a$b1.prototype, "IEnumerator_Current", 
	$asm08.System.Linq.Enumerable.$lTakeIterator$gd__3a$b1.prototype.IEnumerator_get_Current, null);
$asm08.System.Linq.Enumerable.$lTakeIterator$gd__3a$b1.prototype.$current = null;
$asm08.System.Linq.Enumerable.$lTakeIterator$gd__3a$b1.prototype.$state = 0;
$asm08.System.Linq.Enumerable.$lTakeIterator$gd__3a$b1.prototype.$initialThreadId = 0;
$asm08.System.Linq.Enumerable.$lTakeIterator$gd__3a$b1.prototype.source = null;
$asm08.System.Linq.Enumerable.$lTakeIterator$gd__3a$b1.prototype.$source = null;
$asm08.System.Linq.Enumerable.$lTakeIterator$gd__3a$b1.prototype.count = 0;
$asm08.System.Linq.Enumerable.$lTakeIterator$gd__3a$b1.prototype.$count = 0;
$asm08.System.Linq.Enumerable.$lTakeIterator$gd__3a$b1.prototype.element = null;
$asm08.System.Linq.Enumerable.$lTakeIterator$gd__3a$b1.prototype.$wrap3c = null;

$asm08.System.Linq.Enumerable.$lTakeWhileIterator$gd__40$b1.prototype.IEnumerable$b1_GetEnumerator = function () {
	if (!((System.Threading.Thread.CurrentThread.ManagedThreadId !== this.$initialThreadId) || (this.$state !== -2))) {
		this.$state = 0;
		var $lTakeWhileIterator$gd__ = this;
	} else {
		$lTakeWhileIterator$gd__ = new ($asm08.System.Linq.Enumerable.$lTakeWhileIterator$gd__40$b1.Of(this.TSource)) (0);
	}
	$lTakeWhileIterator$gd__.source = this.$source;
	$lTakeWhileIterator$gd__.predicate = this.$predicate;
	return $lTakeWhileIterator$gd__;
};
$asm08.System.Linq.Enumerable.$lTakeWhileIterator$gd__40$b1.prototype.IEnumerable_GetEnumerator = function () {
	return this.IEnumerable$b1_GetEnumerator();
};
$asm08.System.Linq.Enumerable.$lTakeWhileIterator$gd__40$b1.prototype.IEnumerator_MoveNext = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				try {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								switch (this.$state) {
									case 0: 
										this.$state = -1;
										this.$wrap42 = this.source.IEnumerable$b1_GetEnumerator();
										this.$state = 1;
										break;
									case 1: 
										__label1__ = "IL_91";
										continue __step1__;
									case 2: 
										this.$state = 1;
										break;
									default: 
										__label1__ = "IL_91";
										continue __step1__;
								}
								if (this.$wrap42.IEnumerator_MoveNext()) {
									this.element = this.$wrap42.IEnumerator$b1_Current;
									if (this.predicate(this.element)) {
										this.$current = this.element;
										this.$state = 2;
										var result = true;
										return result;
									}
								}
								this.$l$gm__Finally43();
								__label1__ = "IL_91";
								continue __step1__;
								break;
							case "IL_91":
								result = false;
								break __step1__;
						}
					}
				} catch ($exception) {
					this.IDisposable_Dispose();
					throw $exception;
				}
				return result;
				break __step0__;
		}
	}
};
$asm08.System.Linq.Enumerable.$lTakeWhileIterator$gd__40$b1.prototype.IEnumerator$b1_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Enumerable.$lTakeWhileIterator$gd__40$b1.prototype.IEnumerator_Reset = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm08.System.Linq.Enumerable.$lTakeWhileIterator$gd__40$b1.prototype.IDisposable_Dispose = function () {
	switch (this.$state) {
		case 1: 
		case 2: 
			try {
			} finally {
				this.$l$gm__Finally43();
			}
			return;
		default: 
			return;
	}
};
$asm08.System.Linq.Enumerable.$lTakeWhileIterator$gd__40$b1.prototype.IEnumerator_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Enumerable.$lTakeWhileIterator$gd__40$b1.prototype._ctor = function ($l$g1__state) {
	System.Object.prototype._ctor.call(this);
	this.$state = $l$g1__state;
	this.$initialThreadId = System.Threading.Thread.CurrentThread.ManagedThreadId;
};
$asm08.System.Linq.Enumerable.$lTakeWhileIterator$gd__40$b1.prototype.$l$gm__Finally43 = function () {
	this.$state = -1;
	if (this.$wrap42 !== null) {
		this.$wrap42.IDisposable_Dispose();
	}
};
JSIL.MakeProperty($asm08.System.Linq.Enumerable.$lTakeWhileIterator$gd__40$b1.prototype, "IEnumerator$b1_Current", 
	$asm08.System.Linq.Enumerable.$lTakeWhileIterator$gd__40$b1.prototype.IEnumerator$b1_get_Current, null);
JSIL.MakeProperty($asm08.System.Linq.Enumerable.$lTakeWhileIterator$gd__40$b1.prototype, "IEnumerator_Current", 
	$asm08.System.Linq.Enumerable.$lTakeWhileIterator$gd__40$b1.prototype.IEnumerator_get_Current, null);
$asm08.System.Linq.Enumerable.$lTakeWhileIterator$gd__40$b1.prototype.$current = null;
$asm08.System.Linq.Enumerable.$lTakeWhileIterator$gd__40$b1.prototype.$state = 0;
$asm08.System.Linq.Enumerable.$lTakeWhileIterator$gd__40$b1.prototype.$initialThreadId = 0;
$asm08.System.Linq.Enumerable.$lTakeWhileIterator$gd__40$b1.prototype.source = null;
$asm08.System.Linq.Enumerable.$lTakeWhileIterator$gd__40$b1.prototype.$source = null;
$asm08.System.Linq.Enumerable.$lTakeWhileIterator$gd__40$b1.prototype.predicate = null;
$asm08.System.Linq.Enumerable.$lTakeWhileIterator$gd__40$b1.prototype.$predicate = null;
$asm08.System.Linq.Enumerable.$lTakeWhileIterator$gd__40$b1.prototype.element = null;
$asm08.System.Linq.Enumerable.$lTakeWhileIterator$gd__40$b1.prototype.$wrap42 = null;

$asm08.System.Linq.Enumerable.$lTakeWhileIterator$gd__46$b1.prototype.IEnumerable$b1_GetEnumerator = function () {
	if (!((System.Threading.Thread.CurrentThread.ManagedThreadId !== this.$initialThreadId) || (this.$state !== -2))) {
		this.$state = 0;
		var $lTakeWhileIterator$gd__ = this;
	} else {
		$lTakeWhileIterator$gd__ = new ($asm08.System.Linq.Enumerable.$lTakeWhileIterator$gd__46$b1.Of(this.TSource)) (0);
	}
	$lTakeWhileIterator$gd__.source = this.$source;
	$lTakeWhileIterator$gd__.predicate = this.$predicate;
	return $lTakeWhileIterator$gd__;
};
$asm08.System.Linq.Enumerable.$lTakeWhileIterator$gd__46$b1.prototype.IEnumerable_GetEnumerator = function () {
	return this.IEnumerable$b1_GetEnumerator();
};
$asm08.System.Linq.Enumerable.$lTakeWhileIterator$gd__46$b1.prototype.IEnumerator_MoveNext = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				try {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								switch (this.$state) {
									case 0: 
										this.$state = -1;
										this.index = -1;
										this.$wrap49 = this.source.IEnumerable$b1_GetEnumerator();
										this.$state = 1;
										break;
									case 1: 
										__label1__ = "IL_AF";
										continue __step1__;
									case 2: 
										this.$state = 1;
										break;
									default: 
										__label1__ = "IL_AF";
										continue __step1__;
								}
								if (this.$wrap49.IEnumerator_MoveNext()) {
									this.element = this.$wrap49.IEnumerator$b1_Current;
									++this.index;
									if (this.predicate(this.element, this.index)) {
										this.$current = this.element;
										this.$state = 2;
										var result = true;
										return result;
									}
								}
								this.$l$gm__Finally4a();
								__label1__ = "IL_AF";
								continue __step1__;
								break;
							case "IL_AF":
								result = false;
								break __step1__;
						}
					}
				} catch ($exception) {
					this.IDisposable_Dispose();
					throw $exception;
				}
				return result;
				break __step0__;
		}
	}
};
$asm08.System.Linq.Enumerable.$lTakeWhileIterator$gd__46$b1.prototype.IEnumerator$b1_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Enumerable.$lTakeWhileIterator$gd__46$b1.prototype.IEnumerator_Reset = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm08.System.Linq.Enumerable.$lTakeWhileIterator$gd__46$b1.prototype.IDisposable_Dispose = function () {
	switch (this.$state) {
		case 1: 
		case 2: 
			try {
			} finally {
				this.$l$gm__Finally4a();
			}
			return;
		default: 
			return;
	}
};
$asm08.System.Linq.Enumerable.$lTakeWhileIterator$gd__46$b1.prototype.IEnumerator_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Enumerable.$lTakeWhileIterator$gd__46$b1.prototype._ctor = function ($l$g1__state) {
	System.Object.prototype._ctor.call(this);
	this.$state = $l$g1__state;
	this.$initialThreadId = System.Threading.Thread.CurrentThread.ManagedThreadId;
};
$asm08.System.Linq.Enumerable.$lTakeWhileIterator$gd__46$b1.prototype.$l$gm__Finally4a = function () {
	this.$state = -1;
	if (this.$wrap49 !== null) {
		this.$wrap49.IDisposable_Dispose();
	}
};
JSIL.MakeProperty($asm08.System.Linq.Enumerable.$lTakeWhileIterator$gd__46$b1.prototype, "IEnumerator$b1_Current", 
	$asm08.System.Linq.Enumerable.$lTakeWhileIterator$gd__46$b1.prototype.IEnumerator$b1_get_Current, null);
JSIL.MakeProperty($asm08.System.Linq.Enumerable.$lTakeWhileIterator$gd__46$b1.prototype, "IEnumerator_Current", 
	$asm08.System.Linq.Enumerable.$lTakeWhileIterator$gd__46$b1.prototype.IEnumerator_get_Current, null);
$asm08.System.Linq.Enumerable.$lTakeWhileIterator$gd__46$b1.prototype.$current = null;
$asm08.System.Linq.Enumerable.$lTakeWhileIterator$gd__46$b1.prototype.$state = 0;
$asm08.System.Linq.Enumerable.$lTakeWhileIterator$gd__46$b1.prototype.$initialThreadId = 0;
$asm08.System.Linq.Enumerable.$lTakeWhileIterator$gd__46$b1.prototype.source = null;
$asm08.System.Linq.Enumerable.$lTakeWhileIterator$gd__46$b1.prototype.$source = null;
$asm08.System.Linq.Enumerable.$lTakeWhileIterator$gd__46$b1.prototype.predicate = null;
$asm08.System.Linq.Enumerable.$lTakeWhileIterator$gd__46$b1.prototype.$predicate = null;
$asm08.System.Linq.Enumerable.$lTakeWhileIterator$gd__46$b1.prototype.index = 0;
$asm08.System.Linq.Enumerable.$lTakeWhileIterator$gd__46$b1.prototype.element = null;
$asm08.System.Linq.Enumerable.$lTakeWhileIterator$gd__46$b1.prototype.$wrap49 = null;

$asm08.System.Linq.Enumerable.$lSkipIterator$gd__4d$b1.prototype.IEnumerable$b1_GetEnumerator = function () {
	if (!((System.Threading.Thread.CurrentThread.ManagedThreadId !== this.$initialThreadId) || (this.$state !== -2))) {
		this.$state = 0;
		var $lSkipIterator$gd__4d = this;
	} else {
		$lSkipIterator$gd__4d = new ($asm08.System.Linq.Enumerable.$lSkipIterator$gd__4d$b1.Of(this.TSource)) (0);
	}
	$lSkipIterator$gd__4d.source = this.$source;
	$lSkipIterator$gd__4d.count = this.$count;
	return $lSkipIterator$gd__4d;
};
$asm08.System.Linq.Enumerable.$lSkipIterator$gd__4d$b1.prototype.IEnumerable_GetEnumerator = function () {
	return this.IEnumerable$b1_GetEnumerator();
};
$asm08.System.Linq.Enumerable.$lSkipIterator$gd__4d$b1.prototype.IEnumerator_MoveNext = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				try {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								switch (this.$state) {
									case 0: 
										this.$state = -1;
										this.e = this.source.IEnumerable$b1_GetEnumerator();
										this.$state = 1;
									__loop0__: 
										while ((this.count > 0) && this.e.IEnumerator_MoveNext()) {
											--this.count;
										}
										if (this.count > 0) {
											__label1__ = "IL_9E";
											continue __step1__;
										}
										break;
									case 1: 
										__label1__ = "IL_A4";
										continue __step1__;
									case 2: 
										this.$state = 1;
										break;
									default: 
										__label1__ = "IL_A4";
										continue __step1__;
								}
								if (this.e.IEnumerator_MoveNext()) {
									this.$current = this.e.IEnumerator$b1_Current;
									this.$state = 2;
									var result = true;
									return result;
								}
								__label1__ = "IL_9E";
								continue __step1__;
								break;
							case "IL_9E":
								this.$l$gm__Finally4f();
								__label1__ = "IL_A4";
								continue __step1__;
								break;
							case "IL_A4":
								result = false;
								break __step1__;
						}
					}
				} catch ($exception) {
					this.IDisposable_Dispose();
					throw $exception;
				}
				return result;
				break __step0__;
		}
	}
};
$asm08.System.Linq.Enumerable.$lSkipIterator$gd__4d$b1.prototype.IEnumerator$b1_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Enumerable.$lSkipIterator$gd__4d$b1.prototype.IEnumerator_Reset = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm08.System.Linq.Enumerable.$lSkipIterator$gd__4d$b1.prototype.IDisposable_Dispose = function () {
	switch (this.$state) {
		case 1: 
		case 2: 
			try {
			} finally {
				this.$l$gm__Finally4f();
			}
			return;
		default: 
			return;
	}
};
$asm08.System.Linq.Enumerable.$lSkipIterator$gd__4d$b1.prototype.IEnumerator_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Enumerable.$lSkipIterator$gd__4d$b1.prototype._ctor = function ($l$g1__state) {
	System.Object.prototype._ctor.call(this);
	this.$state = $l$g1__state;
	this.$initialThreadId = System.Threading.Thread.CurrentThread.ManagedThreadId;
};
$asm08.System.Linq.Enumerable.$lSkipIterator$gd__4d$b1.prototype.$l$gm__Finally4f = function () {
	this.$state = -1;
	if (this.e !== null) {
		this.e.IDisposable_Dispose();
	}
};
JSIL.MakeProperty($asm08.System.Linq.Enumerable.$lSkipIterator$gd__4d$b1.prototype, "IEnumerator$b1_Current", 
	$asm08.System.Linq.Enumerable.$lSkipIterator$gd__4d$b1.prototype.IEnumerator$b1_get_Current, null);
JSIL.MakeProperty($asm08.System.Linq.Enumerable.$lSkipIterator$gd__4d$b1.prototype, "IEnumerator_Current", 
	$asm08.System.Linq.Enumerable.$lSkipIterator$gd__4d$b1.prototype.IEnumerator_get_Current, null);
$asm08.System.Linq.Enumerable.$lSkipIterator$gd__4d$b1.prototype.$current = null;
$asm08.System.Linq.Enumerable.$lSkipIterator$gd__4d$b1.prototype.$state = 0;
$asm08.System.Linq.Enumerable.$lSkipIterator$gd__4d$b1.prototype.$initialThreadId = 0;
$asm08.System.Linq.Enumerable.$lSkipIterator$gd__4d$b1.prototype.source = null;
$asm08.System.Linq.Enumerable.$lSkipIterator$gd__4d$b1.prototype.$source = null;
$asm08.System.Linq.Enumerable.$lSkipIterator$gd__4d$b1.prototype.count = 0;
$asm08.System.Linq.Enumerable.$lSkipIterator$gd__4d$b1.prototype.$count = 0;
$asm08.System.Linq.Enumerable.$lSkipIterator$gd__4d$b1.prototype.e = null;

$asm08.System.Linq.Enumerable.$lSkipWhileIterator$gd__52$b1.prototype.IEnumerable$b1_GetEnumerator = function () {
	if (!((System.Threading.Thread.CurrentThread.ManagedThreadId !== this.$initialThreadId) || (this.$state !== -2))) {
		this.$state = 0;
		var $lSkipWhileIterator$gd__ = this;
	} else {
		$lSkipWhileIterator$gd__ = new ($asm08.System.Linq.Enumerable.$lSkipWhileIterator$gd__52$b1.Of(this.TSource)) (0);
	}
	$lSkipWhileIterator$gd__.source = this.$source;
	$lSkipWhileIterator$gd__.predicate = this.$predicate;
	return $lSkipWhileIterator$gd__;
};
$asm08.System.Linq.Enumerable.$lSkipWhileIterator$gd__52$b1.prototype.IEnumerable_GetEnumerator = function () {
	return this.IEnumerable$b1_GetEnumerator();
};
$asm08.System.Linq.Enumerable.$lSkipWhileIterator$gd__52$b1.prototype.IEnumerator_MoveNext = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				try {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								switch (this.$state) {
									case 0: 
										this.$state = -1;
										this.yielding = false;
										this.$wrap55 = this.source.IEnumerable$b1_GetEnumerator();
										this.$state = 1;
										break;
									case 1: 
										__label1__ = "IL_B2";
										continue __step1__;
									case 2: 
										this.$state = 1;
										break;
									default: 
										__label1__ = "IL_B2";
										continue __step1__;
								}
							__loop0__: 
								while (this.$wrap55.IEnumerator_MoveNext()) {
									this.element = this.$wrap55.IEnumerator$b1_Current;
									if (!(this.yielding || this.predicate(this.element))) {
										this.yielding = true;
									}
									if (this.yielding) {
										this.$current = this.element;
										this.$state = 2;
										var result = true;
										return result;
									}
								}
								this.$l$gm__Finally56();
								__label1__ = "IL_B2";
								continue __step1__;
								break;
							case "IL_B2":
								result = false;
								break __step1__;
						}
					}
				} catch ($exception) {
					this.IDisposable_Dispose();
					throw $exception;
				}
				return result;
				break __step0__;
		}
	}
};
$asm08.System.Linq.Enumerable.$lSkipWhileIterator$gd__52$b1.prototype.IEnumerator$b1_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Enumerable.$lSkipWhileIterator$gd__52$b1.prototype.IEnumerator_Reset = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm08.System.Linq.Enumerable.$lSkipWhileIterator$gd__52$b1.prototype.IDisposable_Dispose = function () {
	switch (this.$state) {
		case 1: 
		case 2: 
			try {
			} finally {
				this.$l$gm__Finally56();
			}
			return;
		default: 
			return;
	}
};
$asm08.System.Linq.Enumerable.$lSkipWhileIterator$gd__52$b1.prototype.IEnumerator_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Enumerable.$lSkipWhileIterator$gd__52$b1.prototype._ctor = function ($l$g1__state) {
	System.Object.prototype._ctor.call(this);
	this.$state = $l$g1__state;
	this.$initialThreadId = System.Threading.Thread.CurrentThread.ManagedThreadId;
};
$asm08.System.Linq.Enumerable.$lSkipWhileIterator$gd__52$b1.prototype.$l$gm__Finally56 = function () {
	this.$state = -1;
	if (this.$wrap55 !== null) {
		this.$wrap55.IDisposable_Dispose();
	}
};
JSIL.MakeProperty($asm08.System.Linq.Enumerable.$lSkipWhileIterator$gd__52$b1.prototype, "IEnumerator$b1_Current", 
	$asm08.System.Linq.Enumerable.$lSkipWhileIterator$gd__52$b1.prototype.IEnumerator$b1_get_Current, null);
JSIL.MakeProperty($asm08.System.Linq.Enumerable.$lSkipWhileIterator$gd__52$b1.prototype, "IEnumerator_Current", 
	$asm08.System.Linq.Enumerable.$lSkipWhileIterator$gd__52$b1.prototype.IEnumerator_get_Current, null);
$asm08.System.Linq.Enumerable.$lSkipWhileIterator$gd__52$b1.prototype.$current = null;
$asm08.System.Linq.Enumerable.$lSkipWhileIterator$gd__52$b1.prototype.$state = 0;
$asm08.System.Linq.Enumerable.$lSkipWhileIterator$gd__52$b1.prototype.$initialThreadId = 0;
$asm08.System.Linq.Enumerable.$lSkipWhileIterator$gd__52$b1.prototype.source = null;
$asm08.System.Linq.Enumerable.$lSkipWhileIterator$gd__52$b1.prototype.$source = null;
$asm08.System.Linq.Enumerable.$lSkipWhileIterator$gd__52$b1.prototype.predicate = null;
$asm08.System.Linq.Enumerable.$lSkipWhileIterator$gd__52$b1.prototype.$predicate = null;
$asm08.System.Linq.Enumerable.$lSkipWhileIterator$gd__52$b1.prototype.yielding = false;
$asm08.System.Linq.Enumerable.$lSkipWhileIterator$gd__52$b1.prototype.element = null;
$asm08.System.Linq.Enumerable.$lSkipWhileIterator$gd__52$b1.prototype.$wrap55 = null;

$asm08.System.Linq.Enumerable.$lSkipWhileIterator$gd__59$b1.prototype.IEnumerable$b1_GetEnumerator = function () {
	if (!((System.Threading.Thread.CurrentThread.ManagedThreadId !== this.$initialThreadId) || (this.$state !== -2))) {
		this.$state = 0;
		var $lSkipWhileIterator$gd__ = this;
	} else {
		$lSkipWhileIterator$gd__ = new ($asm08.System.Linq.Enumerable.$lSkipWhileIterator$gd__59$b1.Of(this.TSource)) (0);
	}
	$lSkipWhileIterator$gd__.source = this.$source;
	$lSkipWhileIterator$gd__.predicate = this.$predicate;
	return $lSkipWhileIterator$gd__;
};
$asm08.System.Linq.Enumerable.$lSkipWhileIterator$gd__59$b1.prototype.IEnumerable_GetEnumerator = function () {
	return this.IEnumerable$b1_GetEnumerator();
};
$asm08.System.Linq.Enumerable.$lSkipWhileIterator$gd__59$b1.prototype.IEnumerator_MoveNext = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				try {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								switch (this.$state) {
									case 0: 
										this.$state = -1;
										this.index = -1;
										this.yielding = false;
										this.$wrap5d = this.source.IEnumerable$b1_GetEnumerator();
										this.$state = 1;
										break;
									case 1: 
										__label1__ = "IL_CD";
										continue __step1__;
									case 2: 
										this.$state = 1;
										break;
									default: 
										__label1__ = "IL_CD";
										continue __step1__;
								}
							__loop0__: 
								while (this.$wrap5d.IEnumerator_MoveNext()) {
									this.element = this.$wrap5d.IEnumerator$b1_Current;
									++this.index;
									if (!(this.yielding || this.predicate(this.element, this.index))) {
										this.yielding = true;
									}
									if (this.yielding) {
										this.$current = this.element;
										this.$state = 2;
										var result = true;
										return result;
									}
								}
								this.$l$gm__Finally5e();
								__label1__ = "IL_CD";
								continue __step1__;
								break;
							case "IL_CD":
								result = false;
								break __step1__;
						}
					}
				} catch ($exception) {
					this.IDisposable_Dispose();
					throw $exception;
				}
				return result;
				break __step0__;
		}
	}
};
$asm08.System.Linq.Enumerable.$lSkipWhileIterator$gd__59$b1.prototype.IEnumerator$b1_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Enumerable.$lSkipWhileIterator$gd__59$b1.prototype.IEnumerator_Reset = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm08.System.Linq.Enumerable.$lSkipWhileIterator$gd__59$b1.prototype.IDisposable_Dispose = function () {
	switch (this.$state) {
		case 1: 
		case 2: 
			try {
			} finally {
				this.$l$gm__Finally5e();
			}
			return;
		default: 
			return;
	}
};
$asm08.System.Linq.Enumerable.$lSkipWhileIterator$gd__59$b1.prototype.IEnumerator_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Enumerable.$lSkipWhileIterator$gd__59$b1.prototype._ctor = function ($l$g1__state) {
	System.Object.prototype._ctor.call(this);
	this.$state = $l$g1__state;
	this.$initialThreadId = System.Threading.Thread.CurrentThread.ManagedThreadId;
};
$asm08.System.Linq.Enumerable.$lSkipWhileIterator$gd__59$b1.prototype.$l$gm__Finally5e = function () {
	this.$state = -1;
	if (this.$wrap5d !== null) {
		this.$wrap5d.IDisposable_Dispose();
	}
};
JSIL.MakeProperty($asm08.System.Linq.Enumerable.$lSkipWhileIterator$gd__59$b1.prototype, "IEnumerator$b1_Current", 
	$asm08.System.Linq.Enumerable.$lSkipWhileIterator$gd__59$b1.prototype.IEnumerator$b1_get_Current, null);
JSIL.MakeProperty($asm08.System.Linq.Enumerable.$lSkipWhileIterator$gd__59$b1.prototype, "IEnumerator_Current", 
	$asm08.System.Linq.Enumerable.$lSkipWhileIterator$gd__59$b1.prototype.IEnumerator_get_Current, null);
$asm08.System.Linq.Enumerable.$lSkipWhileIterator$gd__59$b1.prototype.$current = null;
$asm08.System.Linq.Enumerable.$lSkipWhileIterator$gd__59$b1.prototype.$state = 0;
$asm08.System.Linq.Enumerable.$lSkipWhileIterator$gd__59$b1.prototype.$initialThreadId = 0;
$asm08.System.Linq.Enumerable.$lSkipWhileIterator$gd__59$b1.prototype.source = null;
$asm08.System.Linq.Enumerable.$lSkipWhileIterator$gd__59$b1.prototype.$source = null;
$asm08.System.Linq.Enumerable.$lSkipWhileIterator$gd__59$b1.prototype.predicate = null;
$asm08.System.Linq.Enumerable.$lSkipWhileIterator$gd__59$b1.prototype.$predicate = null;
$asm08.System.Linq.Enumerable.$lSkipWhileIterator$gd__59$b1.prototype.index = 0;
$asm08.System.Linq.Enumerable.$lSkipWhileIterator$gd__59$b1.prototype.yielding = false;
$asm08.System.Linq.Enumerable.$lSkipWhileIterator$gd__59$b1.prototype.element = null;
$asm08.System.Linq.Enumerable.$lSkipWhileIterator$gd__59$b1.prototype.$wrap5d = null;

$asm08.System.Linq.Enumerable.$lJoinIterator$gd__61$b4.prototype.IEnumerable$b1_GetEnumerator = function () {
	if (!((System.Threading.Thread.CurrentThread.ManagedThreadId !== this.$initialThreadId) || (this.$state !== -2))) {
		this.$state = 0;
		var $lJoinIterator$gd__ = this;
	} else {
		$lJoinIterator$gd__ = new ($asm08.System.Linq.Enumerable.$lJoinIterator$gd__61$b4.Of(this.TOuter, this.TInner, this.TKey, this.TResult)) (0);
	}
	$lJoinIterator$gd__.outer = this.$outer;
	$lJoinIterator$gd__.inner = this.$inner;
	$lJoinIterator$gd__.outerKeySelector = this.$outerKeySelector;
	$lJoinIterator$gd__.innerKeySelector = this.$innerKeySelector;
	$lJoinIterator$gd__.resultSelector = this.$resultSelector;
	$lJoinIterator$gd__.comparer = this.$comparer;
	return $lJoinIterator$gd__;
};
$asm08.System.Linq.Enumerable.$lJoinIterator$gd__61$b4.prototype.IEnumerable_GetEnumerator = function () {
	return this.IEnumerable$b1_GetEnumerator();
};
$asm08.System.Linq.Enumerable.$lJoinIterator$gd__61$b4.prototype.IEnumerator_MoveNext = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				try {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								switch (this.$state) {
									case 0: 
										this.$state = -1;
										this.lookup = System.Linq.Lookup$b2.Of(this.TKey, this.TInner).CreateForJoin(this.inner, this.innerKeySelector, this.comparer);
										this.$wrap66 = this.outer.IEnumerable$b1_GetEnumerator();
										this.$state = 1;
										break;
									case 1: 
										__label1__ = "IL_11A";
										continue __step1__;
									case 2: 
										this.$state = 1;
										++this.i;
										__label1__ = "IL_F1";
										continue __step1__;
									default: 
										__label1__ = "IL_11A";
										continue __step1__;
								}
								__label1__ = "IL_104";
								continue __step1__;
								break;
							case "IL_104":
							__loop0__: 
								while (this.$wrap66.IEnumerator_MoveNext()) {
									this.item = this.$wrap66.IEnumerator$b1_Current;
									this.g = this.lookup.GetGrouping(this.outerKeySelector(this.item), false);
									if (this.g !== null) {
										this.i = 0;
										__label1__ = "IL_F1";
										continue __step1__;
									}
								}
								this.$l$gm__Finally67();
								__label1__ = "IL_11A";
								continue __step1__;
								__label1__ = "IL_F1";
								continue __step1__;
								break;
							case "IL_F1":
								if (this.i >= this.g.count) {
									__label1__ = "IL_104";
									continue __step1__;
								}
								this.$current = this.resultSelector(this.item, this.g.elements[this.i]);
								this.$state = 2;
								var result = true;
								return result;
								__label1__ = "IL_11A";
								continue __step1__;
								break;
							case "IL_11A":
								result = false;
								break __step1__;
						}
					}
				} catch ($exception) {
					this.IDisposable_Dispose();
					throw $exception;
				}
				return result;
				break __step0__;
		}
	}
};
$asm08.System.Linq.Enumerable.$lJoinIterator$gd__61$b4.prototype.IEnumerator$b1_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Enumerable.$lJoinIterator$gd__61$b4.prototype.IEnumerator_Reset = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm08.System.Linq.Enumerable.$lJoinIterator$gd__61$b4.prototype.IDisposable_Dispose = function () {
	switch (this.$state) {
		case 1: 
		case 2: 
			try {
			} finally {
				this.$l$gm__Finally67();
			}
			return;
		default: 
			return;
	}
};
$asm08.System.Linq.Enumerable.$lJoinIterator$gd__61$b4.prototype.IEnumerator_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Enumerable.$lJoinIterator$gd__61$b4.prototype._ctor = function ($l$g1__state) {
	System.Object.prototype._ctor.call(this);
	this.$state = $l$g1__state;
	this.$initialThreadId = System.Threading.Thread.CurrentThread.ManagedThreadId;
};
$asm08.System.Linq.Enumerable.$lJoinIterator$gd__61$b4.prototype.$l$gm__Finally67 = function () {
	this.$state = -1;
	if (this.$wrap66 !== null) {
		this.$wrap66.IDisposable_Dispose();
	}
};
JSIL.MakeProperty($asm08.System.Linq.Enumerable.$lJoinIterator$gd__61$b4.prototype, "IEnumerator$b1_Current", 
	$asm08.System.Linq.Enumerable.$lJoinIterator$gd__61$b4.prototype.IEnumerator$b1_get_Current, null);
JSIL.MakeProperty($asm08.System.Linq.Enumerable.$lJoinIterator$gd__61$b4.prototype, "IEnumerator_Current", 
	$asm08.System.Linq.Enumerable.$lJoinIterator$gd__61$b4.prototype.IEnumerator_get_Current, null);
$asm08.System.Linq.Enumerable.$lJoinIterator$gd__61$b4.prototype.$current = null;
$asm08.System.Linq.Enumerable.$lJoinIterator$gd__61$b4.prototype.$state = 0;
$asm08.System.Linq.Enumerable.$lJoinIterator$gd__61$b4.prototype.$initialThreadId = 0;
$asm08.System.Linq.Enumerable.$lJoinIterator$gd__61$b4.prototype.outer = null;
$asm08.System.Linq.Enumerable.$lJoinIterator$gd__61$b4.prototype.$outer = null;
$asm08.System.Linq.Enumerable.$lJoinIterator$gd__61$b4.prototype.inner = null;
$asm08.System.Linq.Enumerable.$lJoinIterator$gd__61$b4.prototype.$inner = null;
$asm08.System.Linq.Enumerable.$lJoinIterator$gd__61$b4.prototype.outerKeySelector = null;
$asm08.System.Linq.Enumerable.$lJoinIterator$gd__61$b4.prototype.$outerKeySelector = null;
$asm08.System.Linq.Enumerable.$lJoinIterator$gd__61$b4.prototype.innerKeySelector = null;
$asm08.System.Linq.Enumerable.$lJoinIterator$gd__61$b4.prototype.$innerKeySelector = null;
$asm08.System.Linq.Enumerable.$lJoinIterator$gd__61$b4.prototype.resultSelector = null;
$asm08.System.Linq.Enumerable.$lJoinIterator$gd__61$b4.prototype.$resultSelector = null;
$asm08.System.Linq.Enumerable.$lJoinIterator$gd__61$b4.prototype.comparer = null;
$asm08.System.Linq.Enumerable.$lJoinIterator$gd__61$b4.prototype.$comparer = null;
$asm08.System.Linq.Enumerable.$lJoinIterator$gd__61$b4.prototype.lookup = null;
$asm08.System.Linq.Enumerable.$lJoinIterator$gd__61$b4.prototype.item = null;
$asm08.System.Linq.Enumerable.$lJoinIterator$gd__61$b4.prototype.g = null;
$asm08.System.Linq.Enumerable.$lJoinIterator$gd__61$b4.prototype.i = 0;
$asm08.System.Linq.Enumerable.$lJoinIterator$gd__61$b4.prototype.$wrap66 = null;

$asm08.System.Linq.Enumerable.$lGroupJoinIterator$gd__6a$b4.prototype.IEnumerable$b1_GetEnumerator = function () {
	if (!((System.Threading.Thread.CurrentThread.ManagedThreadId !== this.$initialThreadId) || (this.$state !== -2))) {
		this.$state = 0;
		var $lGroupJoinIterator$gd__6a = this;
	} else {
		$lGroupJoinIterator$gd__6a = new ($asm08.System.Linq.Enumerable.$lGroupJoinIterator$gd__6a$b4.Of(this.TOuter, this.TInner, this.TKey, this.TResult)) (0);
	}
	$lGroupJoinIterator$gd__6a.outer = this.$outer;
	$lGroupJoinIterator$gd__6a.inner = this.$inner;
	$lGroupJoinIterator$gd__6a.outerKeySelector = this.$outerKeySelector;
	$lGroupJoinIterator$gd__6a.innerKeySelector = this.$innerKeySelector;
	$lGroupJoinIterator$gd__6a.resultSelector = this.$resultSelector;
	$lGroupJoinIterator$gd__6a.comparer = this.$comparer;
	return $lGroupJoinIterator$gd__6a;
};
$asm08.System.Linq.Enumerable.$lGroupJoinIterator$gd__6a$b4.prototype.IEnumerable_GetEnumerator = function () {
	return this.IEnumerable$b1_GetEnumerator();
};
$asm08.System.Linq.Enumerable.$lGroupJoinIterator$gd__6a$b4.prototype.IEnumerator_MoveNext = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				try {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								switch (this.$state) {
									case 0: 
										this.$state = -1;
										this.lookup = System.Linq.Lookup$b2.Of(this.TKey, this.TInner).CreateForJoin(this.inner, this.innerKeySelector, this.comparer);
										this.$wrap6d = this.outer.IEnumerable$b1_GetEnumerator();
										this.$state = 1;
										break;
									case 1: 
										__label1__ = "IL_C5";
										continue __step1__;
									case 2: 
										this.$state = 1;
										break;
									default: 
										__label1__ = "IL_C5";
										continue __step1__;
								}
								if (this.$wrap6d.IEnumerator_MoveNext()) {
									this.item = this.$wrap6d.IEnumerator$b1_Current;
									this.$current = this.resultSelector(this.item, this.lookup.get_Item(this.outerKeySelector(this.item)));
									this.$state = 2;
									var result = true;
									return result;
								}
								this.$l$gm__Finally6e();
								__label1__ = "IL_C5";
								continue __step1__;
								break;
							case "IL_C5":
								result = false;
								break __step1__;
						}
					}
				} catch ($exception) {
					this.IDisposable_Dispose();
					throw $exception;
				}
				return result;
				break __step0__;
		}
	}
};
$asm08.System.Linq.Enumerable.$lGroupJoinIterator$gd__6a$b4.prototype.IEnumerator$b1_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Enumerable.$lGroupJoinIterator$gd__6a$b4.prototype.IEnumerator_Reset = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm08.System.Linq.Enumerable.$lGroupJoinIterator$gd__6a$b4.prototype.IDisposable_Dispose = function () {
	switch (this.$state) {
		case 1: 
		case 2: 
			try {
			} finally {
				this.$l$gm__Finally6e();
			}
			return;
		default: 
			return;
	}
};
$asm08.System.Linq.Enumerable.$lGroupJoinIterator$gd__6a$b4.prototype.IEnumerator_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Enumerable.$lGroupJoinIterator$gd__6a$b4.prototype._ctor = function ($l$g1__state) {
	System.Object.prototype._ctor.call(this);
	this.$state = $l$g1__state;
	this.$initialThreadId = System.Threading.Thread.CurrentThread.ManagedThreadId;
};
$asm08.System.Linq.Enumerable.$lGroupJoinIterator$gd__6a$b4.prototype.$l$gm__Finally6e = function () {
	this.$state = -1;
	if (this.$wrap6d !== null) {
		this.$wrap6d.IDisposable_Dispose();
	}
};
JSIL.MakeProperty($asm08.System.Linq.Enumerable.$lGroupJoinIterator$gd__6a$b4.prototype, "IEnumerator$b1_Current", 
	$asm08.System.Linq.Enumerable.$lGroupJoinIterator$gd__6a$b4.prototype.IEnumerator$b1_get_Current, null);
JSIL.MakeProperty($asm08.System.Linq.Enumerable.$lGroupJoinIterator$gd__6a$b4.prototype, "IEnumerator_Current", 
	$asm08.System.Linq.Enumerable.$lGroupJoinIterator$gd__6a$b4.prototype.IEnumerator_get_Current, null);
$asm08.System.Linq.Enumerable.$lGroupJoinIterator$gd__6a$b4.prototype.$current = null;
$asm08.System.Linq.Enumerable.$lGroupJoinIterator$gd__6a$b4.prototype.$state = 0;
$asm08.System.Linq.Enumerable.$lGroupJoinIterator$gd__6a$b4.prototype.$initialThreadId = 0;
$asm08.System.Linq.Enumerable.$lGroupJoinIterator$gd__6a$b4.prototype.outer = null;
$asm08.System.Linq.Enumerable.$lGroupJoinIterator$gd__6a$b4.prototype.$outer = null;
$asm08.System.Linq.Enumerable.$lGroupJoinIterator$gd__6a$b4.prototype.inner = null;
$asm08.System.Linq.Enumerable.$lGroupJoinIterator$gd__6a$b4.prototype.$inner = null;
$asm08.System.Linq.Enumerable.$lGroupJoinIterator$gd__6a$b4.prototype.outerKeySelector = null;
$asm08.System.Linq.Enumerable.$lGroupJoinIterator$gd__6a$b4.prototype.$outerKeySelector = null;
$asm08.System.Linq.Enumerable.$lGroupJoinIterator$gd__6a$b4.prototype.innerKeySelector = null;
$asm08.System.Linq.Enumerable.$lGroupJoinIterator$gd__6a$b4.prototype.$innerKeySelector = null;
$asm08.System.Linq.Enumerable.$lGroupJoinIterator$gd__6a$b4.prototype.resultSelector = null;
$asm08.System.Linq.Enumerable.$lGroupJoinIterator$gd__6a$b4.prototype.$resultSelector = null;
$asm08.System.Linq.Enumerable.$lGroupJoinIterator$gd__6a$b4.prototype.comparer = null;
$asm08.System.Linq.Enumerable.$lGroupJoinIterator$gd__6a$b4.prototype.$comparer = null;
$asm08.System.Linq.Enumerable.$lGroupJoinIterator$gd__6a$b4.prototype.lookup = null;
$asm08.System.Linq.Enumerable.$lGroupJoinIterator$gd__6a$b4.prototype.item = null;
$asm08.System.Linq.Enumerable.$lGroupJoinIterator$gd__6a$b4.prototype.$wrap6d = null;

$asm08.System.Linq.Enumerable.$lConcatIterator$gd__71$b1.prototype.IEnumerable$b1_GetEnumerator = function () {
	if (!((System.Threading.Thread.CurrentThread.ManagedThreadId !== this.$initialThreadId) || (this.$state !== -2))) {
		this.$state = 0;
		var $lConcatIterator$gd__ = this;
	} else {
		$lConcatIterator$gd__ = new ($asm08.System.Linq.Enumerable.$lConcatIterator$gd__71$b1.Of(this.TSource)) (0);
	}
	$lConcatIterator$gd__.first = this.$first;
	$lConcatIterator$gd__.second = this.$second;
	return $lConcatIterator$gd__;
};
$asm08.System.Linq.Enumerable.$lConcatIterator$gd__71$b1.prototype.IEnumerable_GetEnumerator = function () {
	return this.IEnumerable$b1_GetEnumerator();
};
$asm08.System.Linq.Enumerable.$lConcatIterator$gd__71$b1.prototype.IEnumerator_MoveNext = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				try {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								switch (this.$state) {
									case 0: 
										this.$state = -1;
										this.$wrap74 = this.first.IEnumerable$b1_GetEnumerator();
										this.$state = 1;
										break;
									case 1: 
									case 3: 
										__label1__ = "IL_E8";
										continue __step1__;
									case 2: 
										this.$state = 1;
										break;
									case 4: 
										this.$state = 3;
										__label1__ = "IL_D5";
										continue __step1__;
									default: 
										__label1__ = "IL_E8";
										continue __step1__;
								}
								if (this.$wrap74.IEnumerator_MoveNext()) {
									this.element = this.$wrap74.IEnumerator$b1_Current;
									this.$current = this.element;
									this.$state = 2;
									var result = true;
									return result;
								}
								this.$l$gm__Finally75();
								this.$wrap76 = this.second.IEnumerable$b1_GetEnumerator();
								this.$state = 3;
								__label1__ = "IL_D5";
								continue __step1__;
								break;
							case "IL_D5":
								if (this.$wrap76.IEnumerator_MoveNext()) {
									this.element = this.$wrap76.IEnumerator$b1_Current;
									this.$current = this.element;
									this.$state = 4;
									result = true;
									return result;
								}
								this.$l$gm__Finally77();
								__label1__ = "IL_E8";
								continue __step1__;
								break;
							case "IL_E8":
								result = false;
								break __step1__;
						}
					}
				} catch ($exception) {
					this.IDisposable_Dispose();
					throw $exception;
				}
				return result;
				break __step0__;
		}
	}
};
$asm08.System.Linq.Enumerable.$lConcatIterator$gd__71$b1.prototype.IEnumerator$b1_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Enumerable.$lConcatIterator$gd__71$b1.prototype.IEnumerator_Reset = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm08.System.Linq.Enumerable.$lConcatIterator$gd__71$b1.prototype.IDisposable_Dispose = function () {
	switch (this.$state) {
		case 1: 
		case 2: 
			try {
			} finally {
				this.$l$gm__Finally75();
			}
			break;
	}
	switch (this.$state) {
		case 3: 
		case 4: 
			try {
			} finally {
				this.$l$gm__Finally77();
			}
			return;
		default: 
			return;
	}
};
$asm08.System.Linq.Enumerable.$lConcatIterator$gd__71$b1.prototype.IEnumerator_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Enumerable.$lConcatIterator$gd__71$b1.prototype._ctor = function ($l$g1__state) {
	System.Object.prototype._ctor.call(this);
	this.$state = $l$g1__state;
	this.$initialThreadId = System.Threading.Thread.CurrentThread.ManagedThreadId;
};
$asm08.System.Linq.Enumerable.$lConcatIterator$gd__71$b1.prototype.$l$gm__Finally75 = function () {
	this.$state = -1;
	if (this.$wrap74 !== null) {
		this.$wrap74.IDisposable_Dispose();
	}
};
$asm08.System.Linq.Enumerable.$lConcatIterator$gd__71$b1.prototype.$l$gm__Finally77 = function () {
	this.$state = -1;
	if (this.$wrap76 !== null) {
		this.$wrap76.IDisposable_Dispose();
	}
};
JSIL.MakeProperty($asm08.System.Linq.Enumerable.$lConcatIterator$gd__71$b1.prototype, "IEnumerator$b1_Current", 
	$asm08.System.Linq.Enumerable.$lConcatIterator$gd__71$b1.prototype.IEnumerator$b1_get_Current, null);
JSIL.MakeProperty($asm08.System.Linq.Enumerable.$lConcatIterator$gd__71$b1.prototype, "IEnumerator_Current", 
	$asm08.System.Linq.Enumerable.$lConcatIterator$gd__71$b1.prototype.IEnumerator_get_Current, null);
$asm08.System.Linq.Enumerable.$lConcatIterator$gd__71$b1.prototype.$current = null;
$asm08.System.Linq.Enumerable.$lConcatIterator$gd__71$b1.prototype.$state = 0;
$asm08.System.Linq.Enumerable.$lConcatIterator$gd__71$b1.prototype.$initialThreadId = 0;
$asm08.System.Linq.Enumerable.$lConcatIterator$gd__71$b1.prototype.first = null;
$asm08.System.Linq.Enumerable.$lConcatIterator$gd__71$b1.prototype.$first = null;
$asm08.System.Linq.Enumerable.$lConcatIterator$gd__71$b1.prototype.second = null;
$asm08.System.Linq.Enumerable.$lConcatIterator$gd__71$b1.prototype.$second = null;
$asm08.System.Linq.Enumerable.$lConcatIterator$gd__71$b1.prototype.element = null;
$asm08.System.Linq.Enumerable.$lConcatIterator$gd__71$b1.prototype.element = null;
$asm08.System.Linq.Enumerable.$lConcatIterator$gd__71$b1.prototype.$wrap74 = null;
$asm08.System.Linq.Enumerable.$lConcatIterator$gd__71$b1.prototype.$wrap76 = null;

$asm08.System.Linq.Enumerable.$lZipIterator$gd__7a$b3.prototype.IEnumerable$b1_GetEnumerator = function () {
	if (!((System.Threading.Thread.CurrentThread.ManagedThreadId !== this.$initialThreadId) || (this.$state !== -2))) {
		this.$state = 0;
		var $lZipIterator$gd__7a = this;
	} else {
		$lZipIterator$gd__7a = new ($asm08.System.Linq.Enumerable.$lZipIterator$gd__7a$b3.Of(this.TFirst, this.TSecond, this.TResult)) (0);
	}
	$lZipIterator$gd__7a.first = this.$first;
	$lZipIterator$gd__7a.second = this.$second;
	$lZipIterator$gd__7a.resultSelector = this.$resultSelector;
	return $lZipIterator$gd__7a;
};
$asm08.System.Linq.Enumerable.$lZipIterator$gd__7a$b3.prototype.IEnumerable_GetEnumerator = function () {
	return this.IEnumerable$b1_GetEnumerator();
};
$asm08.System.Linq.Enumerable.$lZipIterator$gd__7a$b3.prototype.IEnumerator_MoveNext = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				try {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								var num = this.$state;
								if (num !== 0) {
									if (num !== 3) {
										__label1__ = "IL_AC";
										continue __step1__;
									}
									this.$state = 2;
								} else {
									this.$state = -1;
									this.e1 = this.first.IEnumerable$b1_GetEnumerator();
									this.$state = 1;
									this.e2 = this.second.IEnumerable$b1_GetEnumerator();
									this.$state = 2;
								}
								if (this.e1.IEnumerator_MoveNext() && this.e2.IEnumerator_MoveNext()) {
									this.$current = this.resultSelector(this.e1.IEnumerator$b1_Current, this.e2.IEnumerator$b1_Current);
									this.$state = 3;
									var result = true;
									return result;
								}
								this.$l$gm__Finally7e();
								this.$l$gm__Finally7d();
								__label1__ = "IL_AC";
								continue __step1__;
								break;
							case "IL_AC":
								result = false;
								break __step1__;
						}
					}
				} catch ($exception) {
					this.IDisposable_Dispose();
					throw $exception;
				}
				return result;
				break __step0__;
		}
	}
};
$asm08.System.Linq.Enumerable.$lZipIterator$gd__7a$b3.prototype.IEnumerator$b1_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Enumerable.$lZipIterator$gd__7a$b3.prototype.IEnumerator_Reset = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm08.System.Linq.Enumerable.$lZipIterator$gd__7a$b3.prototype.IDisposable_Dispose = function () {
	switch (this.$state) {
		case 1: 
		case 2: 
		case 3: 
			try {
				switch (this.$state) {
					case 2: 
					case 3: 
						try {
						} finally {
							this.$l$gm__Finally7e();
						}
						break;
				}
			} finally {
				this.$l$gm__Finally7d();
			}
			return;
		default: 
			return;
	}
};
$asm08.System.Linq.Enumerable.$lZipIterator$gd__7a$b3.prototype.IEnumerator_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Enumerable.$lZipIterator$gd__7a$b3.prototype._ctor = function ($l$g1__state) {
	System.Object.prototype._ctor.call(this);
	this.$state = $l$g1__state;
	this.$initialThreadId = System.Threading.Thread.CurrentThread.ManagedThreadId;
};
$asm08.System.Linq.Enumerable.$lZipIterator$gd__7a$b3.prototype.$l$gm__Finally7d = function () {
	this.$state = -1;
	if (this.e1 !== null) {
		this.e1.IDisposable_Dispose();
	}
};
$asm08.System.Linq.Enumerable.$lZipIterator$gd__7a$b3.prototype.$l$gm__Finally7e = function () {
	this.$state = 1;
	if (this.e2 !== null) {
		this.e2.IDisposable_Dispose();
	}
};
JSIL.MakeProperty($asm08.System.Linq.Enumerable.$lZipIterator$gd__7a$b3.prototype, "IEnumerator$b1_Current", 
	$asm08.System.Linq.Enumerable.$lZipIterator$gd__7a$b3.prototype.IEnumerator$b1_get_Current, null);
JSIL.MakeProperty($asm08.System.Linq.Enumerable.$lZipIterator$gd__7a$b3.prototype, "IEnumerator_Current", 
	$asm08.System.Linq.Enumerable.$lZipIterator$gd__7a$b3.prototype.IEnumerator_get_Current, null);
$asm08.System.Linq.Enumerable.$lZipIterator$gd__7a$b3.prototype.$current = null;
$asm08.System.Linq.Enumerable.$lZipIterator$gd__7a$b3.prototype.$state = 0;
$asm08.System.Linq.Enumerable.$lZipIterator$gd__7a$b3.prototype.$initialThreadId = 0;
$asm08.System.Linq.Enumerable.$lZipIterator$gd__7a$b3.prototype.first = null;
$asm08.System.Linq.Enumerable.$lZipIterator$gd__7a$b3.prototype.$first = null;
$asm08.System.Linq.Enumerable.$lZipIterator$gd__7a$b3.prototype.second = null;
$asm08.System.Linq.Enumerable.$lZipIterator$gd__7a$b3.prototype.$second = null;
$asm08.System.Linq.Enumerable.$lZipIterator$gd__7a$b3.prototype.resultSelector = null;
$asm08.System.Linq.Enumerable.$lZipIterator$gd__7a$b3.prototype.$resultSelector = null;
$asm08.System.Linq.Enumerable.$lZipIterator$gd__7a$b3.prototype.e1 = null;
$asm08.System.Linq.Enumerable.$lZipIterator$gd__7a$b3.prototype.e2 = null;

$asm08.System.Linq.Enumerable.$lDistinctIterator$gd__81$b1.prototype.IEnumerable$b1_GetEnumerator = function () {
	if (!((System.Threading.Thread.CurrentThread.ManagedThreadId !== this.$initialThreadId) || (this.$state !== -2))) {
		this.$state = 0;
		var $lDistinctIterator$gd__ = this;
	} else {
		$lDistinctIterator$gd__ = new ($asm08.System.Linq.Enumerable.$lDistinctIterator$gd__81$b1.Of(this.TSource)) (0);
	}
	$lDistinctIterator$gd__.source = this.$source;
	$lDistinctIterator$gd__.comparer = this.$comparer;
	return $lDistinctIterator$gd__;
};
$asm08.System.Linq.Enumerable.$lDistinctIterator$gd__81$b1.prototype.IEnumerable_GetEnumerator = function () {
	return this.IEnumerable$b1_GetEnumerator();
};
$asm08.System.Linq.Enumerable.$lDistinctIterator$gd__81$b1.prototype.IEnumerator_MoveNext = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				try {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								switch (this.$state) {
									case 0: 
										this.$state = -1;
										this.set = JSIL.New($asm08.System.Linq.Set$b1.Of(this.TSource), "_ctor$1", [this.comparer]);
										this.$wrap84 = this.source.IEnumerable$b1_GetEnumerator();
										this.$state = 1;
										break;
									case 1: 
										__label1__ = "IL_A5";
										continue __step1__;
									case 2: 
										this.$state = 1;
										break;
									default: 
										__label1__ = "IL_A5";
										continue __step1__;
								}
							__loop0__: 
								while (this.$wrap84.IEnumerator_MoveNext()) {
									this.element = this.$wrap84.IEnumerator$b1_Current;
									if (this.set.Add(this.element)) {
										this.$current = this.element;
										this.$state = 2;
										var result = true;
										return result;
									}
								}
								this.$l$gm__Finally85();
								__label1__ = "IL_A5";
								continue __step1__;
								break;
							case "IL_A5":
								result = false;
								break __step1__;
						}
					}
				} catch ($exception) {
					this.IDisposable_Dispose();
					throw $exception;
				}
				return result;
				break __step0__;
		}
	}
};
$asm08.System.Linq.Enumerable.$lDistinctIterator$gd__81$b1.prototype.IEnumerator$b1_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Enumerable.$lDistinctIterator$gd__81$b1.prototype.IEnumerator_Reset = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm08.System.Linq.Enumerable.$lDistinctIterator$gd__81$b1.prototype.IDisposable_Dispose = function () {
	switch (this.$state) {
		case 1: 
		case 2: 
			try {
			} finally {
				this.$l$gm__Finally85();
			}
			return;
		default: 
			return;
	}
};
$asm08.System.Linq.Enumerable.$lDistinctIterator$gd__81$b1.prototype.IEnumerator_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Enumerable.$lDistinctIterator$gd__81$b1.prototype._ctor = function ($l$g1__state) {
	System.Object.prototype._ctor.call(this);
	this.$state = $l$g1__state;
	this.$initialThreadId = System.Threading.Thread.CurrentThread.ManagedThreadId;
};
$asm08.System.Linq.Enumerable.$lDistinctIterator$gd__81$b1.prototype.$l$gm__Finally85 = function () {
	this.$state = -1;
	if (this.$wrap84 !== null) {
		this.$wrap84.IDisposable_Dispose();
	}
};
JSIL.MakeProperty($asm08.System.Linq.Enumerable.$lDistinctIterator$gd__81$b1.prototype, "IEnumerator$b1_Current", 
	$asm08.System.Linq.Enumerable.$lDistinctIterator$gd__81$b1.prototype.IEnumerator$b1_get_Current, null);
JSIL.MakeProperty($asm08.System.Linq.Enumerable.$lDistinctIterator$gd__81$b1.prototype, "IEnumerator_Current", 
	$asm08.System.Linq.Enumerable.$lDistinctIterator$gd__81$b1.prototype.IEnumerator_get_Current, null);
$asm08.System.Linq.Enumerable.$lDistinctIterator$gd__81$b1.prototype.$current = null;
$asm08.System.Linq.Enumerable.$lDistinctIterator$gd__81$b1.prototype.$state = 0;
$asm08.System.Linq.Enumerable.$lDistinctIterator$gd__81$b1.prototype.$initialThreadId = 0;
$asm08.System.Linq.Enumerable.$lDistinctIterator$gd__81$b1.prototype.source = null;
$asm08.System.Linq.Enumerable.$lDistinctIterator$gd__81$b1.prototype.$source = null;
$asm08.System.Linq.Enumerable.$lDistinctIterator$gd__81$b1.prototype.comparer = null;
$asm08.System.Linq.Enumerable.$lDistinctIterator$gd__81$b1.prototype.$comparer = null;
$asm08.System.Linq.Enumerable.$lDistinctIterator$gd__81$b1.prototype.set = null;
$asm08.System.Linq.Enumerable.$lDistinctIterator$gd__81$b1.prototype.element = null;
$asm08.System.Linq.Enumerable.$lDistinctIterator$gd__81$b1.prototype.$wrap84 = null;

$asm08.System.Linq.Enumerable.$lUnionIterator$gd__88$b1.prototype.IEnumerable$b1_GetEnumerator = function () {
	if (!((System.Threading.Thread.CurrentThread.ManagedThreadId !== this.$initialThreadId) || (this.$state !== -2))) {
		this.$state = 0;
		var $lUnionIterator$gd__ = this;
	} else {
		$lUnionIterator$gd__ = new ($asm08.System.Linq.Enumerable.$lUnionIterator$gd__88$b1.Of(this.TSource)) (0);
	}
	$lUnionIterator$gd__.first = this.$first;
	$lUnionIterator$gd__.second = this.$second;
	$lUnionIterator$gd__.comparer = this.$comparer;
	return $lUnionIterator$gd__;
};
$asm08.System.Linq.Enumerable.$lUnionIterator$gd__88$b1.prototype.IEnumerable_GetEnumerator = function () {
	return this.IEnumerable$b1_GetEnumerator();
};
$asm08.System.Linq.Enumerable.$lUnionIterator$gd__88$b1.prototype.IEnumerator_MoveNext = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				try {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								switch (this.$state) {
									case 0: 
										this.$state = -1;
										this.set = JSIL.New($asm08.System.Linq.Set$b1.Of(this.TSource), "_ctor$1", [this.comparer]);
										this.$wrap8c = this.first.IEnumerable$b1_GetEnumerator();
										this.$state = 1;
										break;
									case 1: 
									case 3: 
										__label1__ = "IL_11F";
										continue __step1__;
									case 2: 
										this.$state = 1;
										break;
									case 4: 
										this.$state = 3;
										__label1__ = "IL_10C";
										continue __step1__;
									default: 
										__label1__ = "IL_11F";
										continue __step1__;
								}
							__loop0__: 
								while (this.$wrap8c.IEnumerator_MoveNext()) {
									this.element = this.$wrap8c.IEnumerator$b1_Current;
									if (this.set.Add(this.element)) {
										this.$current = this.element;
										this.$state = 2;
										var result = true;
										return result;
									}
								}
								this.$l$gm__Finally8d();
								this.$wrap8e = this.second.IEnumerable$b1_GetEnumerator();
								this.$state = 3;
								__label1__ = "IL_10C";
								continue __step1__;
								break;
							case "IL_10C":
							__loop1__: 
								while (this.$wrap8e.IEnumerator_MoveNext()) {
									this.element = this.$wrap8e.IEnumerator$b1_Current;
									if (this.set.Add(this.element)) {
										this.$current = this.element;
										this.$state = 4;
										result = true;
										return result;
									}
								}
								this.$l$gm__Finally8f();
								__label1__ = "IL_11F";
								continue __step1__;
								break;
							case "IL_11F":
								result = false;
								break __step1__;
						}
					}
				} catch ($exception) {
					this.IDisposable_Dispose();
					throw $exception;
				}
				return result;
				break __step0__;
		}
	}
};
$asm08.System.Linq.Enumerable.$lUnionIterator$gd__88$b1.prototype.IEnumerator$b1_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Enumerable.$lUnionIterator$gd__88$b1.prototype.IEnumerator_Reset = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm08.System.Linq.Enumerable.$lUnionIterator$gd__88$b1.prototype.IDisposable_Dispose = function () {
	switch (this.$state) {
		case 1: 
		case 2: 
			try {
			} finally {
				this.$l$gm__Finally8d();
			}
			break;
	}
	switch (this.$state) {
		case 3: 
		case 4: 
			try {
			} finally {
				this.$l$gm__Finally8f();
			}
			return;
		default: 
			return;
	}
};
$asm08.System.Linq.Enumerable.$lUnionIterator$gd__88$b1.prototype.IEnumerator_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Enumerable.$lUnionIterator$gd__88$b1.prototype._ctor = function ($l$g1__state) {
	System.Object.prototype._ctor.call(this);
	this.$state = $l$g1__state;
	this.$initialThreadId = System.Threading.Thread.CurrentThread.ManagedThreadId;
};
$asm08.System.Linq.Enumerable.$lUnionIterator$gd__88$b1.prototype.$l$gm__Finally8d = function () {
	this.$state = -1;
	if (this.$wrap8c !== null) {
		this.$wrap8c.IDisposable_Dispose();
	}
};
$asm08.System.Linq.Enumerable.$lUnionIterator$gd__88$b1.prototype.$l$gm__Finally8f = function () {
	this.$state = -1;
	if (this.$wrap8e !== null) {
		this.$wrap8e.IDisposable_Dispose();
	}
};
JSIL.MakeProperty($asm08.System.Linq.Enumerable.$lUnionIterator$gd__88$b1.prototype, "IEnumerator$b1_Current", 
	$asm08.System.Linq.Enumerable.$lUnionIterator$gd__88$b1.prototype.IEnumerator$b1_get_Current, null);
JSIL.MakeProperty($asm08.System.Linq.Enumerable.$lUnionIterator$gd__88$b1.prototype, "IEnumerator_Current", 
	$asm08.System.Linq.Enumerable.$lUnionIterator$gd__88$b1.prototype.IEnumerator_get_Current, null);
$asm08.System.Linq.Enumerable.$lUnionIterator$gd__88$b1.prototype.$current = null;
$asm08.System.Linq.Enumerable.$lUnionIterator$gd__88$b1.prototype.$state = 0;
$asm08.System.Linq.Enumerable.$lUnionIterator$gd__88$b1.prototype.$initialThreadId = 0;
$asm08.System.Linq.Enumerable.$lUnionIterator$gd__88$b1.prototype.first = null;
$asm08.System.Linq.Enumerable.$lUnionIterator$gd__88$b1.prototype.$first = null;
$asm08.System.Linq.Enumerable.$lUnionIterator$gd__88$b1.prototype.second = null;
$asm08.System.Linq.Enumerable.$lUnionIterator$gd__88$b1.prototype.$second = null;
$asm08.System.Linq.Enumerable.$lUnionIterator$gd__88$b1.prototype.comparer = null;
$asm08.System.Linq.Enumerable.$lUnionIterator$gd__88$b1.prototype.$comparer = null;
$asm08.System.Linq.Enumerable.$lUnionIterator$gd__88$b1.prototype.set = null;
$asm08.System.Linq.Enumerable.$lUnionIterator$gd__88$b1.prototype.element = null;
$asm08.System.Linq.Enumerable.$lUnionIterator$gd__88$b1.prototype.element = null;
$asm08.System.Linq.Enumerable.$lUnionIterator$gd__88$b1.prototype.$wrap8c = null;
$asm08.System.Linq.Enumerable.$lUnionIterator$gd__88$b1.prototype.$wrap8e = null;

$asm08.System.Linq.Enumerable.$lIntersectIterator$gd__92$b1.prototype.IEnumerable$b1_GetEnumerator = function () {
	if (!((System.Threading.Thread.CurrentThread.ManagedThreadId !== this.$initialThreadId) || (this.$state !== -2))) {
		this.$state = 0;
		var $lIntersectIterator$gd__ = this;
	} else {
		$lIntersectIterator$gd__ = new ($asm08.System.Linq.Enumerable.$lIntersectIterator$gd__92$b1.Of(this.TSource)) (0);
	}
	$lIntersectIterator$gd__.first = this.$first;
	$lIntersectIterator$gd__.second = this.$second;
	$lIntersectIterator$gd__.comparer = this.$comparer;
	return $lIntersectIterator$gd__;
};
$asm08.System.Linq.Enumerable.$lIntersectIterator$gd__92$b1.prototype.IEnumerable_GetEnumerator = function () {
	return this.IEnumerable$b1_GetEnumerator();
};
$asm08.System.Linq.Enumerable.$lIntersectIterator$gd__92$b1.prototype.IEnumerator_MoveNext = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				try {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								var num = this.$state;
								if (num !== 0) {
									if (num !== 3) {
										__label1__ = "IL_D4";
										continue __step1__;
									}
									this.$state = 2;
								} else {
									this.$state = -1;
									this.set = JSIL.New($asm08.System.Linq.Set$b1.Of(this.TSource), "_ctor$1", [this.comparer]);
									var enumerator = this.second.IEnumerable$b1_GetEnumerator();
									try {
									__loop0__: 
										while (enumerator.IEnumerator_MoveNext()) {
											var current = enumerator.IEnumerator$b1_Current;
											this.set.Add(current);
										}
									} finally {
										if (enumerator !== null) {
											enumerator.IDisposable_Dispose();
										}
									}
									this.$wrap95 = this.first.IEnumerable$b1_GetEnumerator();
									this.$state = 2;
								}
							__loop1__: 
								while (this.$wrap95.IEnumerator_MoveNext()) {
									this.element = this.$wrap95.IEnumerator$b1_Current;
									if (this.set.Remove(this.element)) {
										this.$current = this.element;
										this.$state = 3;
										var result = true;
										return result;
									}
								}
								this.$l$gm__Finally96();
								__label1__ = "IL_D4";
								continue __step1__;
								break;
							case "IL_D4":
								result = false;
								break __step1__;
						}
					}
				} catch ($exception) {
					this.IDisposable_Dispose();
					throw $exception;
				}
				return result;
				break __step0__;
		}
	}
};
$asm08.System.Linq.Enumerable.$lIntersectIterator$gd__92$b1.prototype.IEnumerator$b1_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Enumerable.$lIntersectIterator$gd__92$b1.prototype.IEnumerator_Reset = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm08.System.Linq.Enumerable.$lIntersectIterator$gd__92$b1.prototype.IDisposable_Dispose = function () {
	switch (this.$state) {
		case 2: 
		case 3: 
			try {
			} finally {
				this.$l$gm__Finally96();
			}
			return;
		default: 
			return;
	}
};
$asm08.System.Linq.Enumerable.$lIntersectIterator$gd__92$b1.prototype.IEnumerator_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Enumerable.$lIntersectIterator$gd__92$b1.prototype._ctor = function ($l$g1__state) {
	System.Object.prototype._ctor.call(this);
	this.$state = $l$g1__state;
	this.$initialThreadId = System.Threading.Thread.CurrentThread.ManagedThreadId;
};
$asm08.System.Linq.Enumerable.$lIntersectIterator$gd__92$b1.prototype.$l$gm__Finally96 = function () {
	this.$state = -1;
	if (this.$wrap95 !== null) {
		this.$wrap95.IDisposable_Dispose();
	}
};
JSIL.MakeProperty($asm08.System.Linq.Enumerable.$lIntersectIterator$gd__92$b1.prototype, "IEnumerator$b1_Current", 
	$asm08.System.Linq.Enumerable.$lIntersectIterator$gd__92$b1.prototype.IEnumerator$b1_get_Current, null);
JSIL.MakeProperty($asm08.System.Linq.Enumerable.$lIntersectIterator$gd__92$b1.prototype, "IEnumerator_Current", 
	$asm08.System.Linq.Enumerable.$lIntersectIterator$gd__92$b1.prototype.IEnumerator_get_Current, null);
$asm08.System.Linq.Enumerable.$lIntersectIterator$gd__92$b1.prototype.$current = null;
$asm08.System.Linq.Enumerable.$lIntersectIterator$gd__92$b1.prototype.$state = 0;
$asm08.System.Linq.Enumerable.$lIntersectIterator$gd__92$b1.prototype.$initialThreadId = 0;
$asm08.System.Linq.Enumerable.$lIntersectIterator$gd__92$b1.prototype.first = null;
$asm08.System.Linq.Enumerable.$lIntersectIterator$gd__92$b1.prototype.$first = null;
$asm08.System.Linq.Enumerable.$lIntersectIterator$gd__92$b1.prototype.second = null;
$asm08.System.Linq.Enumerable.$lIntersectIterator$gd__92$b1.prototype.$second = null;
$asm08.System.Linq.Enumerable.$lIntersectIterator$gd__92$b1.prototype.comparer = null;
$asm08.System.Linq.Enumerable.$lIntersectIterator$gd__92$b1.prototype.$comparer = null;
$asm08.System.Linq.Enumerable.$lIntersectIterator$gd__92$b1.prototype.set = null;
$asm08.System.Linq.Enumerable.$lIntersectIterator$gd__92$b1.prototype.element = null;
$asm08.System.Linq.Enumerable.$lIntersectIterator$gd__92$b1.prototype.$wrap95 = null;

$asm08.System.Linq.Enumerable.$lExceptIterator$gd__99$b1.prototype.IEnumerable$b1_GetEnumerator = function () {
	if (!((System.Threading.Thread.CurrentThread.ManagedThreadId !== this.$initialThreadId) || (this.$state !== -2))) {
		this.$state = 0;
		var $lExceptIterator$gd__ = this;
	} else {
		$lExceptIterator$gd__ = new ($asm08.System.Linq.Enumerable.$lExceptIterator$gd__99$b1.Of(this.TSource)) (0);
	}
	$lExceptIterator$gd__.first = this.$first;
	$lExceptIterator$gd__.second = this.$second;
	$lExceptIterator$gd__.comparer = this.$comparer;
	return $lExceptIterator$gd__;
};
$asm08.System.Linq.Enumerable.$lExceptIterator$gd__99$b1.prototype.IEnumerable_GetEnumerator = function () {
	return this.IEnumerable$b1_GetEnumerator();
};
$asm08.System.Linq.Enumerable.$lExceptIterator$gd__99$b1.prototype.IEnumerator_MoveNext = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				try {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								var num = this.$state;
								if (num !== 0) {
									if (num !== 3) {
										__label1__ = "IL_D4";
										continue __step1__;
									}
									this.$state = 2;
								} else {
									this.$state = -1;
									this.set = JSIL.New($asm08.System.Linq.Set$b1.Of(this.TSource), "_ctor$1", [this.comparer]);
									var enumerator = this.second.IEnumerable$b1_GetEnumerator();
									try {
									__loop0__: 
										while (enumerator.IEnumerator_MoveNext()) {
											var current = enumerator.IEnumerator$b1_Current;
											this.set.Add(current);
										}
									} finally {
										if (enumerator !== null) {
											enumerator.IDisposable_Dispose();
										}
									}
									this.$wrap9c = this.first.IEnumerable$b1_GetEnumerator();
									this.$state = 2;
								}
							__loop1__: 
								while (this.$wrap9c.IEnumerator_MoveNext()) {
									this.element = this.$wrap9c.IEnumerator$b1_Current;
									if (this.set.Add(this.element)) {
										this.$current = this.element;
										this.$state = 3;
										var result = true;
										return result;
									}
								}
								this.$l$gm__Finally9d();
								__label1__ = "IL_D4";
								continue __step1__;
								break;
							case "IL_D4":
								result = false;
								break __step1__;
						}
					}
				} catch ($exception) {
					this.IDisposable_Dispose();
					throw $exception;
				}
				return result;
				break __step0__;
		}
	}
};
$asm08.System.Linq.Enumerable.$lExceptIterator$gd__99$b1.prototype.IEnumerator$b1_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Enumerable.$lExceptIterator$gd__99$b1.prototype.IEnumerator_Reset = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm08.System.Linq.Enumerable.$lExceptIterator$gd__99$b1.prototype.IDisposable_Dispose = function () {
	switch (this.$state) {
		case 2: 
		case 3: 
			try {
			} finally {
				this.$l$gm__Finally9d();
			}
			return;
		default: 
			return;
	}
};
$asm08.System.Linq.Enumerable.$lExceptIterator$gd__99$b1.prototype.IEnumerator_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Enumerable.$lExceptIterator$gd__99$b1.prototype._ctor = function ($l$g1__state) {
	System.Object.prototype._ctor.call(this);
	this.$state = $l$g1__state;
	this.$initialThreadId = System.Threading.Thread.CurrentThread.ManagedThreadId;
};
$asm08.System.Linq.Enumerable.$lExceptIterator$gd__99$b1.prototype.$l$gm__Finally9d = function () {
	this.$state = -1;
	if (this.$wrap9c !== null) {
		this.$wrap9c.IDisposable_Dispose();
	}
};
JSIL.MakeProperty($asm08.System.Linq.Enumerable.$lExceptIterator$gd__99$b1.prototype, "IEnumerator$b1_Current", 
	$asm08.System.Linq.Enumerable.$lExceptIterator$gd__99$b1.prototype.IEnumerator$b1_get_Current, null);
JSIL.MakeProperty($asm08.System.Linq.Enumerable.$lExceptIterator$gd__99$b1.prototype, "IEnumerator_Current", 
	$asm08.System.Linq.Enumerable.$lExceptIterator$gd__99$b1.prototype.IEnumerator_get_Current, null);
$asm08.System.Linq.Enumerable.$lExceptIterator$gd__99$b1.prototype.$current = null;
$asm08.System.Linq.Enumerable.$lExceptIterator$gd__99$b1.prototype.$state = 0;
$asm08.System.Linq.Enumerable.$lExceptIterator$gd__99$b1.prototype.$initialThreadId = 0;
$asm08.System.Linq.Enumerable.$lExceptIterator$gd__99$b1.prototype.first = null;
$asm08.System.Linq.Enumerable.$lExceptIterator$gd__99$b1.prototype.$first = null;
$asm08.System.Linq.Enumerable.$lExceptIterator$gd__99$b1.prototype.second = null;
$asm08.System.Linq.Enumerable.$lExceptIterator$gd__99$b1.prototype.$second = null;
$asm08.System.Linq.Enumerable.$lExceptIterator$gd__99$b1.prototype.comparer = null;
$asm08.System.Linq.Enumerable.$lExceptIterator$gd__99$b1.prototype.$comparer = null;
$asm08.System.Linq.Enumerable.$lExceptIterator$gd__99$b1.prototype.set = null;
$asm08.System.Linq.Enumerable.$lExceptIterator$gd__99$b1.prototype.element = null;
$asm08.System.Linq.Enumerable.$lExceptIterator$gd__99$b1.prototype.$wrap9c = null;

$asm08.System.Linq.Enumerable.$lReverseIterator$gd__a0$b1.prototype.IEnumerable$b1_GetEnumerator = function () {
	if (!((System.Threading.Thread.CurrentThread.ManagedThreadId !== this.$initialThreadId) || (this.$state !== -2))) {
		this.$state = 0;
		var $lReverseIterator$gd__a = this;
	} else {
		$lReverseIterator$gd__a = new ($asm08.System.Linq.Enumerable.$lReverseIterator$gd__a0$b1.Of(this.TSource)) (0);
	}
	$lReverseIterator$gd__a.source = this.$source;
	return $lReverseIterator$gd__a;
};
$asm08.System.Linq.Enumerable.$lReverseIterator$gd__a0$b1.prototype.IEnumerable_GetEnumerator = function () {
	return this.IEnumerable$b1_GetEnumerator();
};
$asm08.System.Linq.Enumerable.$lReverseIterator$gd__a0$b1.prototype.IEnumerator_MoveNext = function () {
	switch (this.$state) {
		case 0: 
			this.$state = -1;
			this.buffer = new ($asm08.System.Linq.Buffer$b1.Of(this.TSource)) (this.source);
			this.i = (this.buffer.count - 1);
			break;
		case 1: 
			this.$state = -1;
			--this.i;
			break;
		default: 
			return false;
	}
	if (this.i < 0) {
		return false;
	}
	this.$current = this.buffer.items[this.i];
	this.$state = 1;
	return true;
};
$asm08.System.Linq.Enumerable.$lReverseIterator$gd__a0$b1.prototype.IEnumerator$b1_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Enumerable.$lReverseIterator$gd__a0$b1.prototype.IEnumerator_Reset = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm08.System.Linq.Enumerable.$lReverseIterator$gd__a0$b1.prototype.IDisposable_Dispose = function () {
};
$asm08.System.Linq.Enumerable.$lReverseIterator$gd__a0$b1.prototype.IEnumerator_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Enumerable.$lReverseIterator$gd__a0$b1.prototype._ctor = function ($l$g1__state) {
	System.Object.prototype._ctor.call(this);
	this.$state = $l$g1__state;
	this.$initialThreadId = System.Threading.Thread.CurrentThread.ManagedThreadId;
};
JSIL.MakeProperty($asm08.System.Linq.Enumerable.$lReverseIterator$gd__a0$b1.prototype, "IEnumerator$b1_Current", 
	$asm08.System.Linq.Enumerable.$lReverseIterator$gd__a0$b1.prototype.IEnumerator$b1_get_Current, null);
JSIL.MakeProperty($asm08.System.Linq.Enumerable.$lReverseIterator$gd__a0$b1.prototype, "IEnumerator_Current", 
	$asm08.System.Linq.Enumerable.$lReverseIterator$gd__a0$b1.prototype.IEnumerator_get_Current, null);
$asm08.System.Linq.Enumerable.$lReverseIterator$gd__a0$b1.prototype.$current = null;
$asm08.System.Linq.Enumerable.$lReverseIterator$gd__a0$b1.prototype.$state = 0;
$asm08.System.Linq.Enumerable.$lReverseIterator$gd__a0$b1.prototype.$initialThreadId = 0;
$asm08.System.Linq.Enumerable.$lReverseIterator$gd__a0$b1.prototype.source = null;
$asm08.System.Linq.Enumerable.$lReverseIterator$gd__a0$b1.prototype.$source = null;
$asm08.System.Linq.Enumerable.$lReverseIterator$gd__a0$b1.prototype.i = 0;

$asm08.System.Linq.Enumerable.$lDefaultIfEmptyIterator$gd__a5$b1.prototype.IEnumerable$b1_GetEnumerator = function () {
	if (!((System.Threading.Thread.CurrentThread.ManagedThreadId !== this.$initialThreadId) || (this.$state !== -2))) {
		this.$state = 0;
		var $lDefaultIfEmptyIterator$gd__a = this;
	} else {
		$lDefaultIfEmptyIterator$gd__a = new ($asm08.System.Linq.Enumerable.$lDefaultIfEmptyIterator$gd__a5$b1.Of(this.TSource)) (0);
	}
	$lDefaultIfEmptyIterator$gd__a.source = this.$source;
	$lDefaultIfEmptyIterator$gd__a.defaultValue = this.$defaultValue;
	return $lDefaultIfEmptyIterator$gd__a;
};
$asm08.System.Linq.Enumerable.$lDefaultIfEmptyIterator$gd__a5$b1.prototype.IEnumerable_GetEnumerator = function () {
	return this.IEnumerable$b1_GetEnumerator();
};
$asm08.System.Linq.Enumerable.$lDefaultIfEmptyIterator$gd__a5$b1.prototype.IEnumerator_MoveNext = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				try {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								switch (this.$state) {
									case 0: 
										this.$state = -1;
										this.e = this.source.IEnumerable$b1_GetEnumerator();
										this.$state = 1;
										if (!this.e.IEnumerator_MoveNext()) {
											this.$current = this.defaultValue;
											this.$state = 3;
											var result = true;
											return result;
										}
										break;
									case 1: 
										__label1__ = "IL_A4";
										continue __step1__;
									case 2: 
										this.$state = 1;
										if (!this.e.IEnumerator_MoveNext()) {
											__label1__ = "IL_9E";
											continue __step1__;
										}
										break;
									case 3: 
										this.$state = 1;
										__label1__ = "IL_9E";
										continue __step1__;
									default: 
										__label1__ = "IL_A4";
										continue __step1__;
								}
								this.$current = this.e.IEnumerator$b1_Current;
								this.$state = 2;
								result = true;
								return result;
								__label1__ = "IL_9E";
								continue __step1__;
								break;
							case "IL_9E":
								this.$l$gm__Finallya7();
								__label1__ = "IL_A4";
								continue __step1__;
								break;
							case "IL_A4":
								result = false;
								break __step1__;
						}
					}
				} catch ($exception) {
					this.IDisposable_Dispose();
					throw $exception;
				}
				return result;
				break __step0__;
		}
	}
};
$asm08.System.Linq.Enumerable.$lDefaultIfEmptyIterator$gd__a5$b1.prototype.IEnumerator$b1_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Enumerable.$lDefaultIfEmptyIterator$gd__a5$b1.prototype.IEnumerator_Reset = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm08.System.Linq.Enumerable.$lDefaultIfEmptyIterator$gd__a5$b1.prototype.IDisposable_Dispose = function () {
	switch (this.$state) {
		case 1: 
		case 2: 
		case 3: 
			try {
			} finally {
				this.$l$gm__Finallya7();
			}
			return;
		default: 
			return;
	}
};
$asm08.System.Linq.Enumerable.$lDefaultIfEmptyIterator$gd__a5$b1.prototype.IEnumerator_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Enumerable.$lDefaultIfEmptyIterator$gd__a5$b1.prototype._ctor = function ($l$g1__state) {
	System.Object.prototype._ctor.call(this);
	this.$state = $l$g1__state;
	this.$initialThreadId = System.Threading.Thread.CurrentThread.ManagedThreadId;
};
$asm08.System.Linq.Enumerable.$lDefaultIfEmptyIterator$gd__a5$b1.prototype.$l$gm__Finallya7 = function () {
	this.$state = -1;
	if (this.e !== null) {
		this.e.IDisposable_Dispose();
	}
};
JSIL.MakeProperty($asm08.System.Linq.Enumerable.$lDefaultIfEmptyIterator$gd__a5$b1.prototype, "IEnumerator$b1_Current", 
	$asm08.System.Linq.Enumerable.$lDefaultIfEmptyIterator$gd__a5$b1.prototype.IEnumerator$b1_get_Current, null);
JSIL.MakeProperty($asm08.System.Linq.Enumerable.$lDefaultIfEmptyIterator$gd__a5$b1.prototype, "IEnumerator_Current", 
	$asm08.System.Linq.Enumerable.$lDefaultIfEmptyIterator$gd__a5$b1.prototype.IEnumerator_get_Current, null);
$asm08.System.Linq.Enumerable.$lDefaultIfEmptyIterator$gd__a5$b1.prototype.$current = null;
$asm08.System.Linq.Enumerable.$lDefaultIfEmptyIterator$gd__a5$b1.prototype.$state = 0;
$asm08.System.Linq.Enumerable.$lDefaultIfEmptyIterator$gd__a5$b1.prototype.$initialThreadId = 0;
$asm08.System.Linq.Enumerable.$lDefaultIfEmptyIterator$gd__a5$b1.prototype.source = null;
$asm08.System.Linq.Enumerable.$lDefaultIfEmptyIterator$gd__a5$b1.prototype.$source = null;
$asm08.System.Linq.Enumerable.$lDefaultIfEmptyIterator$gd__a5$b1.prototype.defaultValue = null;
$asm08.System.Linq.Enumerable.$lDefaultIfEmptyIterator$gd__a5$b1.prototype.$defaultValue = null;
$asm08.System.Linq.Enumerable.$lDefaultIfEmptyIterator$gd__a5$b1.prototype.e = null;

$asm08.System.Linq.Enumerable.$lOfTypeIterator$gd__aa$b1.prototype.IEnumerable$b1_GetEnumerator = function () {
	if (!((System.Threading.Thread.CurrentThread.ManagedThreadId !== this.$initialThreadId) || (this.$state !== -2))) {
		this.$state = 0;
		var $lOfTypeIterator$gd__aa = this;
	} else {
		$lOfTypeIterator$gd__aa = new ($asm08.System.Linq.Enumerable.$lOfTypeIterator$gd__aa$b1.Of(this.TResult)) (0);
	}
	$lOfTypeIterator$gd__aa.source = this.$source;
	return $lOfTypeIterator$gd__aa;
};
$asm08.System.Linq.Enumerable.$lOfTypeIterator$gd__aa$b1.prototype.IEnumerable_GetEnumerator = function () {
	return this.IEnumerable$b1_GetEnumerator();
};
$asm08.System.Linq.Enumerable.$lOfTypeIterator$gd__aa$b1.prototype.IEnumerator_MoveNext = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				try {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								switch (this.$state) {
									case 0: 
										this.$state = -1;
										this.$wrapac = this.source.IEnumerable_GetEnumerator();
										this.$state = 1;
										break;
									case 1: 
										__label1__ = "IL_90";
										continue __step1__;
									case 2: 
										this.$state = 1;
										break;
									default: 
										__label1__ = "IL_90";
										continue __step1__;
								}
							__loop0__: 
								while (this.$wrapac.IEnumerator_MoveNext()) {
									this.obj = this.$wrapac.IEnumerator_Current;
									if (JSIL.TryCast(this.obj, this.TResult) !== null) {
										this.$current = JSIL.Cast(this.obj, this.TResult);
										this.$state = 2;
										var result = true;
										return result;
									}
								}
								this.$l$gm__Finallyae();
								__label1__ = "IL_90";
								continue __step1__;
								break;
							case "IL_90":
								result = false;
								break __step1__;
						}
					}
				} catch ($exception) {
					this.IDisposable_Dispose();
					throw $exception;
				}
				return result;
				break __step0__;
		}
	}
};
$asm08.System.Linq.Enumerable.$lOfTypeIterator$gd__aa$b1.prototype.IEnumerator$b1_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Enumerable.$lOfTypeIterator$gd__aa$b1.prototype.IEnumerator_Reset = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm08.System.Linq.Enumerable.$lOfTypeIterator$gd__aa$b1.prototype.IDisposable_Dispose = function () {
	switch (this.$state) {
		case 1: 
		case 2: 
			try {
			} finally {
				this.$l$gm__Finallyae();
			}
			return;
		default: 
			return;
	}
};
$asm08.System.Linq.Enumerable.$lOfTypeIterator$gd__aa$b1.prototype.IEnumerator_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Enumerable.$lOfTypeIterator$gd__aa$b1.prototype._ctor = function ($l$g1__state) {
	System.Object.prototype._ctor.call(this);
	this.$state = $l$g1__state;
	this.$initialThreadId = System.Threading.Thread.CurrentThread.ManagedThreadId;
};
$asm08.System.Linq.Enumerable.$lOfTypeIterator$gd__aa$b1.prototype.$l$gm__Finallyae = function () {
	this.$state = -1;
	this.$wrapad = JSIL.TryCast(this.$wrapac, System.IDisposable);
	if (this.$wrapad !== null) {
		this.$wrapad.IDisposable_Dispose();
	}
};
JSIL.MakeProperty($asm08.System.Linq.Enumerable.$lOfTypeIterator$gd__aa$b1.prototype, "IEnumerator$b1_Current", 
	$asm08.System.Linq.Enumerable.$lOfTypeIterator$gd__aa$b1.prototype.IEnumerator$b1_get_Current, null);
JSIL.MakeProperty($asm08.System.Linq.Enumerable.$lOfTypeIterator$gd__aa$b1.prototype, "IEnumerator_Current", 
	$asm08.System.Linq.Enumerable.$lOfTypeIterator$gd__aa$b1.prototype.IEnumerator_get_Current, null);
$asm08.System.Linq.Enumerable.$lOfTypeIterator$gd__aa$b1.prototype.$current = null;
$asm08.System.Linq.Enumerable.$lOfTypeIterator$gd__aa$b1.prototype.$state = 0;
$asm08.System.Linq.Enumerable.$lOfTypeIterator$gd__aa$b1.prototype.$initialThreadId = 0;
$asm08.System.Linq.Enumerable.$lOfTypeIterator$gd__aa$b1.prototype.source = null;
$asm08.System.Linq.Enumerable.$lOfTypeIterator$gd__aa$b1.prototype.$source = null;
$asm08.System.Linq.Enumerable.$lOfTypeIterator$gd__aa$b1.prototype.obj = null;
$asm08.System.Linq.Enumerable.$lOfTypeIterator$gd__aa$b1.prototype.$wrapac = null;
$asm08.System.Linq.Enumerable.$lOfTypeIterator$gd__aa$b1.prototype.$wrapad = null;

$asm08.System.Linq.Enumerable.$lCastIterator$gd__b1$b1.prototype.IEnumerable$b1_GetEnumerator = function () {
	if (!((System.Threading.Thread.CurrentThread.ManagedThreadId !== this.$initialThreadId) || (this.$state !== -2))) {
		this.$state = 0;
		var $lCastIterator$gd__b = this;
	} else {
		$lCastIterator$gd__b = new ($asm08.System.Linq.Enumerable.$lCastIterator$gd__b1$b1.Of(this.TResult)) (0);
	}
	$lCastIterator$gd__b.source = this.$source;
	return $lCastIterator$gd__b;
};
$asm08.System.Linq.Enumerable.$lCastIterator$gd__b1$b1.prototype.IEnumerable_GetEnumerator = function () {
	return this.IEnumerable$b1_GetEnumerator();
};
$asm08.System.Linq.Enumerable.$lCastIterator$gd__b1$b1.prototype.IEnumerator_MoveNext = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				try {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								switch (this.$state) {
									case 0: 
										this.$state = -1;
										this.$wrapb3 = this.source.IEnumerable_GetEnumerator();
										this.$state = 1;
										break;
									case 1: 
										__label1__ = "IL_83";
										continue __step1__;
									case 2: 
										this.$state = 1;
										break;
									default: 
										__label1__ = "IL_83";
										continue __step1__;
								}
								if (this.$wrapb3.IEnumerator_MoveNext()) {
									this.obj = this.$wrapb3.IEnumerator_Current;
									this.$current = JSIL.Cast(this.obj, this.TResult);
									this.$state = 2;
									var result = true;
									return result;
								}
								this.$l$gm__Finallyb5();
								__label1__ = "IL_83";
								continue __step1__;
								break;
							case "IL_83":
								result = false;
								break __step1__;
						}
					}
				} catch ($exception) {
					this.IDisposable_Dispose();
					throw $exception;
				}
				return result;
				break __step0__;
		}
	}
};
$asm08.System.Linq.Enumerable.$lCastIterator$gd__b1$b1.prototype.IEnumerator$b1_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Enumerable.$lCastIterator$gd__b1$b1.prototype.IEnumerator_Reset = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm08.System.Linq.Enumerable.$lCastIterator$gd__b1$b1.prototype.IDisposable_Dispose = function () {
	switch (this.$state) {
		case 1: 
		case 2: 
			try {
			} finally {
				this.$l$gm__Finallyb5();
			}
			return;
		default: 
			return;
	}
};
$asm08.System.Linq.Enumerable.$lCastIterator$gd__b1$b1.prototype.IEnumerator_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Enumerable.$lCastIterator$gd__b1$b1.prototype._ctor = function ($l$g1__state) {
	System.Object.prototype._ctor.call(this);
	this.$state = $l$g1__state;
	this.$initialThreadId = System.Threading.Thread.CurrentThread.ManagedThreadId;
};
$asm08.System.Linq.Enumerable.$lCastIterator$gd__b1$b1.prototype.$l$gm__Finallyb5 = function () {
	this.$state = -1;
	this.$wrapb4 = JSIL.TryCast(this.$wrapb3, System.IDisposable);
	if (this.$wrapb4 !== null) {
		this.$wrapb4.IDisposable_Dispose();
	}
};
JSIL.MakeProperty($asm08.System.Linq.Enumerable.$lCastIterator$gd__b1$b1.prototype, "IEnumerator$b1_Current", 
	$asm08.System.Linq.Enumerable.$lCastIterator$gd__b1$b1.prototype.IEnumerator$b1_get_Current, null);
JSIL.MakeProperty($asm08.System.Linq.Enumerable.$lCastIterator$gd__b1$b1.prototype, "IEnumerator_Current", 
	$asm08.System.Linq.Enumerable.$lCastIterator$gd__b1$b1.prototype.IEnumerator_get_Current, null);
$asm08.System.Linq.Enumerable.$lCastIterator$gd__b1$b1.prototype.$current = null;
$asm08.System.Linq.Enumerable.$lCastIterator$gd__b1$b1.prototype.$state = 0;
$asm08.System.Linq.Enumerable.$lCastIterator$gd__b1$b1.prototype.$initialThreadId = 0;
$asm08.System.Linq.Enumerable.$lCastIterator$gd__b1$b1.prototype.source = null;
$asm08.System.Linq.Enumerable.$lCastIterator$gd__b1$b1.prototype.$source = null;
$asm08.System.Linq.Enumerable.$lCastIterator$gd__b1$b1.prototype.obj = null;
$asm08.System.Linq.Enumerable.$lCastIterator$gd__b1$b1.prototype.$wrapb3 = null;
$asm08.System.Linq.Enumerable.$lCastIterator$gd__b1$b1.prototype.$wrapb4 = null;

$asm08.System.Linq.Enumerable.$lRangeIterator$gd__b8.prototype.IEnumerable$b1_GetEnumerator = function () {
	if (!((System.Threading.Thread.CurrentThread.ManagedThreadId !== this.$initialThreadId) || (this.$state !== -2))) {
		this.$state = 0;
		var $lRangeIterator$gd__b = this;
	} else {
		$lRangeIterator$gd__b = new $asm08.System.Linq.Enumerable.$lRangeIterator$gd__b8(0);
	}
	$lRangeIterator$gd__b.start = this.$start;
	$lRangeIterator$gd__b.count = this.$count;
	return $lRangeIterator$gd__b;
};
$asm08.System.Linq.Enumerable.$lRangeIterator$gd__b8.prototype.IEnumerable_GetEnumerator = function () {
	return this.IEnumerable$b1_GetEnumerator();
};
$asm08.System.Linq.Enumerable.$lRangeIterator$gd__b8.prototype.IEnumerator_MoveNext = function () {
	switch (this.$state) {
		case 0: 
			this.$state = -1;
			this.i = 0;
			break;
		case 1: 
			this.$state = -1;
			++this.i;
			break;
		default: 
			return false;
	}
	if (this.i >= this.count) {
		return false;
	}
	this.$current = (this.start + this.i);
	this.$state = 1;
	return true;
};
$asm08.System.Linq.Enumerable.$lRangeIterator$gd__b8.prototype.IEnumerator$b1_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Enumerable.$lRangeIterator$gd__b8.prototype.IEnumerator_Reset = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm08.System.Linq.Enumerable.$lRangeIterator$gd__b8.prototype.IDisposable_Dispose = function () {
};
$asm08.System.Linq.Enumerable.$lRangeIterator$gd__b8.prototype.IEnumerator_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Enumerable.$lRangeIterator$gd__b8.prototype._ctor = function ($l$g1__state) {
	System.Object.prototype._ctor.call(this);
	this.$state = $l$g1__state;
	this.$initialThreadId = System.Threading.Thread.CurrentThread.ManagedThreadId;
};
JSIL.MakeProperty($asm08.System.Linq.Enumerable.$lRangeIterator$gd__b8.prototype, "IEnumerator$b1_Current", 
	$asm08.System.Linq.Enumerable.$lRangeIterator$gd__b8.prototype.IEnumerator$b1_get_Current, null);
JSIL.MakeProperty($asm08.System.Linq.Enumerable.$lRangeIterator$gd__b8.prototype, "IEnumerator_Current", 
	$asm08.System.Linq.Enumerable.$lRangeIterator$gd__b8.prototype.IEnumerator_get_Current, null);
$asm08.System.Linq.Enumerable.$lRangeIterator$gd__b8.prototype.$current = 0;
$asm08.System.Linq.Enumerable.$lRangeIterator$gd__b8.prototype.$state = 0;
$asm08.System.Linq.Enumerable.$lRangeIterator$gd__b8.prototype.$initialThreadId = 0;
$asm08.System.Linq.Enumerable.$lRangeIterator$gd__b8.prototype.start = 0;
$asm08.System.Linq.Enumerable.$lRangeIterator$gd__b8.prototype.$start = 0;
$asm08.System.Linq.Enumerable.$lRangeIterator$gd__b8.prototype.count = 0;
$asm08.System.Linq.Enumerable.$lRangeIterator$gd__b8.prototype.$count = 0;
$asm08.System.Linq.Enumerable.$lRangeIterator$gd__b8.prototype.i = 0;

$asm08.System.Linq.Enumerable.$lRepeatIterator$gd__bc$b1.prototype.IEnumerable$b1_GetEnumerator = function () {
	if (!((System.Threading.Thread.CurrentThread.ManagedThreadId !== this.$initialThreadId) || (this.$state !== -2))) {
		this.$state = 0;
		var $lRepeatIterator$gd__bc = this;
	} else {
		$lRepeatIterator$gd__bc = new ($asm08.System.Linq.Enumerable.$lRepeatIterator$gd__bc$b1.Of(this.TResult)) (0);
	}
	$lRepeatIterator$gd__bc.element = this.$element;
	$lRepeatIterator$gd__bc.count = this.$count;
	return $lRepeatIterator$gd__bc;
};
$asm08.System.Linq.Enumerable.$lRepeatIterator$gd__bc$b1.prototype.IEnumerable_GetEnumerator = function () {
	return this.IEnumerable$b1_GetEnumerator();
};
$asm08.System.Linq.Enumerable.$lRepeatIterator$gd__bc$b1.prototype.IEnumerator_MoveNext = function () {
	switch (this.$state) {
		case 0: 
			this.$state = -1;
			this.i = 0;
			break;
		case 1: 
			this.$state = -1;
			++this.i;
			break;
		default: 
			return false;
	}
	if (this.i >= this.count) {
		return false;
	}
	this.$current = this.element;
	this.$state = 1;
	return true;
};
$asm08.System.Linq.Enumerable.$lRepeatIterator$gd__bc$b1.prototype.IEnumerator$b1_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Enumerable.$lRepeatIterator$gd__bc$b1.prototype.IEnumerator_Reset = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm08.System.Linq.Enumerable.$lRepeatIterator$gd__bc$b1.prototype.IDisposable_Dispose = function () {
};
$asm08.System.Linq.Enumerable.$lRepeatIterator$gd__bc$b1.prototype.IEnumerator_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Enumerable.$lRepeatIterator$gd__bc$b1.prototype._ctor = function ($l$g1__state) {
	System.Object.prototype._ctor.call(this);
	this.$state = $l$g1__state;
	this.$initialThreadId = System.Threading.Thread.CurrentThread.ManagedThreadId;
};
JSIL.MakeProperty($asm08.System.Linq.Enumerable.$lRepeatIterator$gd__bc$b1.prototype, "IEnumerator$b1_Current", 
	$asm08.System.Linq.Enumerable.$lRepeatIterator$gd__bc$b1.prototype.IEnumerator$b1_get_Current, null);
JSIL.MakeProperty($asm08.System.Linq.Enumerable.$lRepeatIterator$gd__bc$b1.prototype, "IEnumerator_Current", 
	$asm08.System.Linq.Enumerable.$lRepeatIterator$gd__bc$b1.prototype.IEnumerator_get_Current, null);
$asm08.System.Linq.Enumerable.$lRepeatIterator$gd__bc$b1.prototype.$current = null;
$asm08.System.Linq.Enumerable.$lRepeatIterator$gd__bc$b1.prototype.$state = 0;
$asm08.System.Linq.Enumerable.$lRepeatIterator$gd__bc$b1.prototype.$initialThreadId = 0;
$asm08.System.Linq.Enumerable.$lRepeatIterator$gd__bc$b1.prototype.element = null;
$asm08.System.Linq.Enumerable.$lRepeatIterator$gd__bc$b1.prototype.$element = null;
$asm08.System.Linq.Enumerable.$lRepeatIterator$gd__bc$b1.prototype.count = 0;
$asm08.System.Linq.Enumerable.$lRepeatIterator$gd__bc$b1.prototype.$count = 0;
$asm08.System.Linq.Enumerable.$lRepeatIterator$gd__bc$b1.prototype.i = 0;

$asm08.System.Linq.EmptyEnumerable$b1.get_Instance = function () {
	if ($asm08.System.Linq.EmptyEnumerable$b1.Of(this.TElement).instance === null) {
		$asm08.System.Linq.EmptyEnumerable$b1.Of(this.TElement).instance = JSIL.Array.New(this.TElement, 0);
	}
	return $asm08.System.Linq.EmptyEnumerable$b1.Of(this.TElement).instance;
};
$asm08.System.Linq.EmptyEnumerable$b1.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
JSIL.MakeGenericProperty($asm08.System.Linq.EmptyEnumerable$b1, "Instance", 
	$asm08.System.Linq.EmptyEnumerable$b1.get_Instance, null);
$asm08.System.Linq.EmptyEnumerable$b1.instance = null;

$asm08.System.Linq.IdentityFunction$b1.get_Instance = function () {
	return function (x) {
		return x;
	};
};
$asm08.System.Linq.IdentityFunction$b1.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
JSIL.MakeGenericProperty($asm08.System.Linq.IdentityFunction$b1, "Instance", 
	$asm08.System.Linq.IdentityFunction$b1.get_Instance, null);
$asm08.System.Linq.IdentityFunction$b1.$CachedAnonymousMethodDelegate1 = null;

System.Linq.Lookup$b2.Create$b1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, keySelector, elementSelector, comparer) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (keySelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("keySelector");
		}
		if (elementSelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("elementSelector");
		}
		var lookup = new (System.Linq.Lookup$b2.Of(this.TKey, this.TElement)) (comparer);
		var enumerator = source.IEnumerable$b1_GetEnumerator();
		try {
		__loop0__: 
			while (enumerator.IEnumerator_MoveNext()) {
				var current = enumerator.IEnumerator$b1_Current;
				(lookup.GetGrouping(keySelector(current), true)).Add(elementSelector(current));
			}
		} finally {
			if (enumerator !== null) {
				enumerator.IDisposable_Dispose();
			}
		}
		return lookup;
	}
);
System.Linq.Lookup$b2.CreateForJoin = function (source, keySelector, comparer) {
	var lookup = new (System.Linq.Lookup$b2.Of(this.TKey, this.TElement)) (comparer);
	var enumerator = source.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current;
			var tKey = keySelector(current);
			if (tKey !== null) {
				(lookup.GetGrouping(tKey, true)).Add(current);
			}
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	return lookup;
};
System.Linq.Lookup$b2.prototype._ctor = function (comparer) {
	System.Object.prototype._ctor.call(this);
	if (comparer === null) {
		comparer = System.Collections.Generic.EqualityComparer$b1.Of(this.TKey).Default;
	}
	this.comparer = comparer;
	this.groupings = JSIL.Array.New($asm08.System.Linq.Lookup$b2.Grouping.Of(this.TKey, this.TElement), 7);
};
System.Linq.Lookup$b2.prototype.get_Count = function () {
	return this.count;
};
System.Linq.Lookup$b2.prototype.get_Item = function (key) {
	var grouping = this.GetGrouping(key, false);
	if (grouping !== null) {
		return grouping;
	}
	return $asm08.System.Linq.EmptyEnumerable$b1.Of(this.TElement).Instance;
};
System.Linq.Lookup$b2.prototype.Contains = function (key) {
	return (this.GetGrouping(key, false) !== null);
};
System.Linq.Lookup$b2.prototype.GetEnumerator = function () {
	var $lGetEnumerator$gd__ = new ($asm08.System.Linq.Lookup$b2.$lGetEnumerator$gd__0.Of(this.TKey, this.TElement)) (0);
	$lGetEnumerator$gd__.$this = this;
	return $lGetEnumerator$gd__;
};
System.Linq.Lookup$b2.prototype.ApplyResultSelector$b1 = JSIL.GenericMethod(
	["TResult"], 
	function (TResult, resultSelector) {
		var $lApplyResultSelector$gd__ = new ($asm08.System.Linq.Lookup$b2.$lApplyResultSelector$gd__3$b1.Of(this.TKey, this.TElement, TResult)) (-2);
		$lApplyResultSelector$gd__.$this = this;
		$lApplyResultSelector$gd__.$resultSelector = resultSelector;
		return $lApplyResultSelector$gd__;
	}
);
System.Linq.Lookup$b2.prototype.IEnumerable_GetEnumerator = function () {
	return this.GetEnumerator();
};
System.Linq.Lookup$b2.prototype.InternalGetHashCode = function (key) {
	if (key !== null) {
		return (this.comparer.IEqualityComparer$b1_GetHashCode(key) & 2147483647);
	}
	return 0;
};
System.Linq.Lookup$b2.prototype.GetGrouping = function (key, create) {
	var num = this.InternalGetHashCode(key);
	var grouping = this.groupings[(num % this.groupings.length)];
__loop0__: 
	while (grouping) {
		if (!((grouping.hashCode !== num) || !this.comparer.IEqualityComparer$b1_Equals(grouping.key, key))) {
			return grouping;
		}
		grouping = grouping.hashNext;
	}
	if (create) {
		if (this.count === this.groupings.length) {
			this.Resize();
		}
		var num2 = (num % this.groupings.length);
		var grouping2 = new ($asm08.System.Linq.Lookup$b2.Grouping.Of(this.TKey, this.TElement)) ();
		grouping2.key = key;
		grouping2.hashCode = num;
		grouping2.elements = JSIL.Array.New(this.TElement, 1);
		grouping2.hashNext = this.groupings[num2];
		this.groupings[num2] = grouping2;
		if (this.lastGrouping === null) {
			grouping2.next = grouping2;
		} else {
			grouping2.next = this.lastGrouping.next;
			this.lastGrouping.next = grouping2;
		}
		this.lastGrouping = grouping2;
		++this.count;
		return grouping2;
	}
	return null;
};
System.Linq.Lookup$b2.prototype.Resize = function () {
	var num = ((this.count * 2) + 1);
	var array = JSIL.Array.New($asm08.System.Linq.Lookup$b2.Grouping.Of(this.TKey, this.TElement), num);
	var next = this.lastGrouping;
__loop0__: 
	do {
		next = next.next;
		var num2 = (next.hashCode % num);
		next.hashNext = array[num2];
		array[num2] = next;
	} while (next !== this.lastGrouping);
	this.groupings = array;
};
JSIL.MakeProperty(System.Linq.Lookup$b2.prototype, "Count", 
	System.Linq.Lookup$b2.prototype.get_Count, null);
JSIL.MakeProperty(System.Linq.Lookup$b2.prototype, "Item", 
	System.Linq.Lookup$b2.prototype.get_Item, null);
System.Linq.Lookup$b2.prototype.comparer = null;
System.Linq.Lookup$b2.prototype.groupings = null;
System.Linq.Lookup$b2.prototype.lastGrouping = null;
System.Linq.Lookup$b2.prototype.count = 0;

$asm08.System.Linq.Lookup$b2.Grouping.prototype.Add = function (element) {
	if (this.elements.length === this.count) {
		System.Array.Resize$b1(this.TElement)(/* ref */ new JSIL.MemberReference(this, "elements"), (this.count * 2));
	}
	this.elements[this.count] = element;
	++this.count;
};
$asm08.System.Linq.Lookup$b2.Grouping.prototype.GetEnumerator = function () {
	var $lGetEnumerator$gd__ = new ($asm08.System.Linq.Lookup$b2.Grouping.$lGetEnumerator$gd__7.Of(this.TKey, this.TElement)) (0);
	$lGetEnumerator$gd__.$this = this;
	return $lGetEnumerator$gd__;
};
$asm08.System.Linq.Lookup$b2.Grouping.prototype.IEnumerable_GetEnumerator = function () {
	return this.GetEnumerator();
};
$asm08.System.Linq.Lookup$b2.Grouping.prototype.get_Key = function () {
	return this.key;
};
$asm08.System.Linq.Lookup$b2.Grouping.prototype.ICollection$b1_get_Count = function () {
	return this.count;
};
$asm08.System.Linq.Lookup$b2.Grouping.prototype.ICollection$b1_get_IsReadOnly = function () {
	return true;
};
$asm08.System.Linq.Lookup$b2.Grouping.prototype.ICollection$b1_Add = function (item) {
	throw $asm08.System.Core.Error.NotSupported();
};
$asm08.System.Linq.Lookup$b2.Grouping.prototype.ICollection$b1_Clear = function () {
	throw $asm08.System.Core.Error.NotSupported();
};
$asm08.System.Linq.Lookup$b2.Grouping.prototype.ICollection$b1_Contains = function (item) {
	return (System.Array.IndexOf$b1(this.TElement)(this.elements, item, 0, this.count) >= 0);
};
$asm08.System.Linq.Lookup$b2.Grouping.prototype.ICollection$b1_CopyTo = function (array, arrayIndex) {
	System.Array.Copy$1(
		this.elements, 
		0, 
		array, 
		arrayIndex, 
		this.count
	);
};
$asm08.System.Linq.Lookup$b2.Grouping.prototype.ICollection$b1_Remove = function (item) {
	throw $asm08.System.Core.Error.NotSupported();
};
$asm08.System.Linq.Lookup$b2.Grouping.prototype.IList$b1_IndexOf = function (item) {
	return System.Array.IndexOf$b1(this.TElement)(this.elements, item, 0, this.count);
};
$asm08.System.Linq.Lookup$b2.Grouping.prototype.IList$b1_Insert = function (index, item) {
	throw $asm08.System.Core.Error.NotSupported();
};
$asm08.System.Linq.Lookup$b2.Grouping.prototype.IList$b1_RemoveAt = function (index) {
	throw $asm08.System.Core.Error.NotSupported();
};
$asm08.System.Linq.Lookup$b2.Grouping.prototype.IList$b1_get_Item = function (index) {
	if (!((index >= 0) && (index < this.count))) {
		throw $asm08.System.Core.Error.ArgumentOutOfRange("index");
	}
	return this.elements[index];
};
$asm08.System.Linq.Lookup$b2.Grouping.prototype.IList$b1_set_Item = function (index, value) {
	throw $asm08.System.Core.Error.NotSupported();
};
$asm08.System.Linq.Lookup$b2.Grouping.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
JSIL.MakeProperty($asm08.System.Linq.Lookup$b2.Grouping.prototype, "Key", 
	$asm08.System.Linq.Lookup$b2.Grouping.prototype.get_Key, null);
JSIL.MakeProperty($asm08.System.Linq.Lookup$b2.Grouping.prototype, "ICollection$b1_Count", 
	$asm08.System.Linq.Lookup$b2.Grouping.prototype.ICollection$b1_get_Count, null);
JSIL.MakeProperty($asm08.System.Linq.Lookup$b2.Grouping.prototype, "ICollection$b1_IsReadOnly", 
	$asm08.System.Linq.Lookup$b2.Grouping.prototype.ICollection$b1_get_IsReadOnly, null);
JSIL.MakeProperty($asm08.System.Linq.Lookup$b2.Grouping.prototype, "IList$b1_Item", 
	$asm08.System.Linq.Lookup$b2.Grouping.prototype.IList$b1_get_Item, $asm08.System.Linq.Lookup$b2.Grouping.prototype.IList$b1_set_Item);
$asm08.System.Linq.Lookup$b2.Grouping.prototype.key = null;
$asm08.System.Linq.Lookup$b2.Grouping.prototype.hashCode = 0;
$asm08.System.Linq.Lookup$b2.Grouping.prototype.elements = null;
$asm08.System.Linq.Lookup$b2.Grouping.prototype.count = 0;
$asm08.System.Linq.Lookup$b2.Grouping.prototype.hashNext = null;
$asm08.System.Linq.Lookup$b2.Grouping.prototype.next = null;

$asm08.System.Linq.Lookup$b2.Grouping.$lGetEnumerator$gd__7.prototype.IEnumerator_MoveNext = function () {
	switch (this.$state) {
		case 0: 
			this.$state = -1;
			this.i = 0;
			break;
		case 1: 
			this.$state = -1;
			++this.i;
			break;
		default: 
			return false;
	}
	if (this.i >= this.$this.count) {
		return false;
	}
	this.$current = this.$this.elements[this.i];
	this.$state = 1;
	return true;
};
$asm08.System.Linq.Lookup$b2.Grouping.$lGetEnumerator$gd__7.prototype.IEnumerator$b1_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Lookup$b2.Grouping.$lGetEnumerator$gd__7.prototype.IEnumerator_Reset = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm08.System.Linq.Lookup$b2.Grouping.$lGetEnumerator$gd__7.prototype.IDisposable_Dispose = function () {
};
$asm08.System.Linq.Lookup$b2.Grouping.$lGetEnumerator$gd__7.prototype.IEnumerator_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Lookup$b2.Grouping.$lGetEnumerator$gd__7.prototype._ctor = function ($l$g1__state) {
	System.Object.prototype._ctor.call(this);
	this.$state = $l$g1__state;
};
JSIL.MakeProperty($asm08.System.Linq.Lookup$b2.Grouping.$lGetEnumerator$gd__7.prototype, "IEnumerator$b1_Current", 
	$asm08.System.Linq.Lookup$b2.Grouping.$lGetEnumerator$gd__7.prototype.IEnumerator$b1_get_Current, null);
JSIL.MakeProperty($asm08.System.Linq.Lookup$b2.Grouping.$lGetEnumerator$gd__7.prototype, "IEnumerator_Current", 
	$asm08.System.Linq.Lookup$b2.Grouping.$lGetEnumerator$gd__7.prototype.IEnumerator_get_Current, null);
$asm08.System.Linq.Lookup$b2.Grouping.$lGetEnumerator$gd__7.prototype.$current = null;
$asm08.System.Linq.Lookup$b2.Grouping.$lGetEnumerator$gd__7.prototype.$state = 0;
$asm08.System.Linq.Lookup$b2.Grouping.$lGetEnumerator$gd__7.prototype.$this = null;
$asm08.System.Linq.Lookup$b2.Grouping.$lGetEnumerator$gd__7.prototype.i = 0;

$asm08.System.Linq.Lookup$b2.$lGetEnumerator$gd__0.prototype.IEnumerator_MoveNext = function () {
	switch (this.$state) {
		case 0: 
			this.$state = -1;
			this.g = this.$this.lastGrouping;
			if (this.g === null) {
				return false;
			}
			break;
		case 1: 
			this.$state = -1;
			if (this.g === this.$this.lastGrouping) {
				return false;
			}
			break;
		default: 
			return false;
	}
	this.g = this.g.next;
	this.$current = this.g;
	this.$state = 1;
	return true;
};
$asm08.System.Linq.Lookup$b2.$lGetEnumerator$gd__0.prototype.IEnumerator$b1_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Lookup$b2.$lGetEnumerator$gd__0.prototype.IEnumerator_Reset = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm08.System.Linq.Lookup$b2.$lGetEnumerator$gd__0.prototype.IDisposable_Dispose = function () {
};
$asm08.System.Linq.Lookup$b2.$lGetEnumerator$gd__0.prototype.IEnumerator_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Lookup$b2.$lGetEnumerator$gd__0.prototype._ctor = function ($l$g1__state) {
	System.Object.prototype._ctor.call(this);
	this.$state = $l$g1__state;
};
JSIL.MakeProperty($asm08.System.Linq.Lookup$b2.$lGetEnumerator$gd__0.prototype, "IEnumerator$b1_Current", 
	$asm08.System.Linq.Lookup$b2.$lGetEnumerator$gd__0.prototype.IEnumerator$b1_get_Current, null);
JSIL.MakeProperty($asm08.System.Linq.Lookup$b2.$lGetEnumerator$gd__0.prototype, "IEnumerator_Current", 
	$asm08.System.Linq.Lookup$b2.$lGetEnumerator$gd__0.prototype.IEnumerator_get_Current, null);
$asm08.System.Linq.Lookup$b2.$lGetEnumerator$gd__0.prototype.$current = null;
$asm08.System.Linq.Lookup$b2.$lGetEnumerator$gd__0.prototype.$state = 0;
$asm08.System.Linq.Lookup$b2.$lGetEnumerator$gd__0.prototype.$this = null;
$asm08.System.Linq.Lookup$b2.$lGetEnumerator$gd__0.prototype.g = null;

$asm08.System.Linq.Lookup$b2.$lApplyResultSelector$gd__3$b1.prototype.IEnumerable$b1_GetEnumerator = function () {
	if (!((System.Threading.Thread.CurrentThread.ManagedThreadId !== this.$initialThreadId) || (this.$state !== -2))) {
		this.$state = 0;
		var $lApplyResultSelector$gd__ = this;
	} else {
		$lApplyResultSelector$gd__ = new ($asm08.System.Linq.Lookup$b2.$lApplyResultSelector$gd__3$b1.Of(this.TKey, this.TElement, this.TResult)) (0);
		$lApplyResultSelector$gd__.$this = this.$this;
	}
	$lApplyResultSelector$gd__.resultSelector = this.$resultSelector;
	return $lApplyResultSelector$gd__;
};
$asm08.System.Linq.Lookup$b2.$lApplyResultSelector$gd__3$b1.prototype.IEnumerable_GetEnumerator = function () {
	return this.IEnumerable$b1_GetEnumerator();
};
$asm08.System.Linq.Lookup$b2.$lApplyResultSelector$gd__3$b1.prototype.IEnumerator_MoveNext = function () {
	switch (this.$state) {
		case 0: 
			this.$state = -1;
			this.g = this.$this.lastGrouping;
			if (this.g === null) {
				return false;
			}
			break;
		case 1: 
			this.$state = -1;
			if (this.g === this.$this.lastGrouping) {
				return false;
			}
			break;
		default: 
			return false;
	}
	this.g = this.g.next;
	if (this.g.count !== this.g.elements.length) {
		System.Array.Resize$b1(this.TElement)(/* ref */ new JSIL.MemberReference(this.g, "elements"), this.g.count);
	}
	this.$current = this.resultSelector(this.g.key, this.g.elements);
	this.$state = 1;
	return true;
};
$asm08.System.Linq.Lookup$b2.$lApplyResultSelector$gd__3$b1.prototype.IEnumerator$b1_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Lookup$b2.$lApplyResultSelector$gd__3$b1.prototype.IEnumerator_Reset = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm08.System.Linq.Lookup$b2.$lApplyResultSelector$gd__3$b1.prototype.IDisposable_Dispose = function () {
};
$asm08.System.Linq.Lookup$b2.$lApplyResultSelector$gd__3$b1.prototype.IEnumerator_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Lookup$b2.$lApplyResultSelector$gd__3$b1.prototype._ctor = function ($l$g1__state) {
	System.Object.prototype._ctor.call(this);
	this.$state = $l$g1__state;
	this.$initialThreadId = System.Threading.Thread.CurrentThread.ManagedThreadId;
};
JSIL.MakeProperty($asm08.System.Linq.Lookup$b2.$lApplyResultSelector$gd__3$b1.prototype, "IEnumerator$b1_Current", 
	$asm08.System.Linq.Lookup$b2.$lApplyResultSelector$gd__3$b1.prototype.IEnumerator$b1_get_Current, null);
JSIL.MakeProperty($asm08.System.Linq.Lookup$b2.$lApplyResultSelector$gd__3$b1.prototype, "IEnumerator_Current", 
	$asm08.System.Linq.Lookup$b2.$lApplyResultSelector$gd__3$b1.prototype.IEnumerator_get_Current, null);
$asm08.System.Linq.Lookup$b2.$lApplyResultSelector$gd__3$b1.prototype.$current = null;
$asm08.System.Linq.Lookup$b2.$lApplyResultSelector$gd__3$b1.prototype.$state = 0;
$asm08.System.Linq.Lookup$b2.$lApplyResultSelector$gd__3$b1.prototype.$initialThreadId = 0;
$asm08.System.Linq.Lookup$b2.$lApplyResultSelector$gd__3$b1.prototype.$this = null;
$asm08.System.Linq.Lookup$b2.$lApplyResultSelector$gd__3$b1.prototype.resultSelector = null;
$asm08.System.Linq.Lookup$b2.$lApplyResultSelector$gd__3$b1.prototype.$resultSelector = null;
$asm08.System.Linq.Lookup$b2.$lApplyResultSelector$gd__3$b1.prototype.g = null;

$asm08.System.Linq.Set$b1.prototype._ctor$0 = function () {
	this._ctor$1(null);
};
$asm08.System.Linq.Set$b1.prototype._ctor$1 = function (comparer) {
	System.Object.prototype._ctor.call(this);
	if (comparer === null) {
		comparer = JSIL.Cast(System.Collections.Generic.EqualityComparer$b1.Of(this.TElement).Default, System.Collections.Generic.IEqualityComparer$b1.Of(this.TElement));
	}
	this.comparer = comparer;
	this.buckets = JSIL.Array.New(System.Int32, 7);
	this.slots = JSIL.Array.New($asm08.System.Linq.Set$b1.Slot.Of(this.TElement), 7);
	this.freeList = -1;
};
$asm08.System.Linq.Set$b1.prototype.Add = function (value) {
	return !this.Find(value, true);
};
$asm08.System.Linq.Set$b1.prototype.Contains = function (value) {
	return this.Find(value, false);
};
$asm08.System.Linq.Set$b1.prototype.Remove = function (value) {
	var num = this.InternalGetHashCode(value);
	var num2 = (num % this.buckets.length);
	var num3 = -1;
__loop0__: 
	for (var i = (this.buckets[num2] - 1); i >= 0; i = this.slots[i].next) {
		if (!((this.slots[i].hashCode !== num) || !this.comparer.IEqualityComparer$b1_Equals(this.slots[i].value, value))) {
			if (num3 < 0) {
				this.buckets[num2] = (this.slots[i].next + 1);
			} else {
				this.slots[num3].next = this.slots[i].next;
			}
			this.slots[i].hashCode = -1;
			this.slots[i].value = null;
			this.slots[i].next = this.freeList;
			this.freeList = i;
			return true;
		}
		num3 = i;
	}
	return false;
};
$asm08.System.Linq.Set$b1.prototype.Find = function (value, add) {
	var num = this.InternalGetHashCode(value);
__loop0__: 
	for (var i = (this.buckets[(num % this.buckets.length)] - 1); i >= 0; i = this.slots[i].next) {
		if (!((this.slots[i].hashCode !== num) || !this.comparer.IEqualityComparer$b1_Equals(this.slots[i].value, value))) {
			return true;
		}
	}
	if (add) {
		if (this.freeList >= 0) {
			var num2 = this.freeList;
			this.freeList = this.slots[num2].next;
		} else {
			if (this.count === this.slots.length) {
				this.Resize();
			}
			num2 = this.count;
			++this.count;
		}
		var num3 = (num % this.buckets.length);
		this.slots[num2].hashCode = num;
		this.slots[num2].value = value;
		this.slots[num2].next = (this.buckets[num3] - 1);
		this.buckets[num3] = (num2 + 1);
	}
	return false;
};
$asm08.System.Linq.Set$b1.prototype.Resize = function () {
	var num = ((this.count * 2) + 1);
	var array = JSIL.Array.New(System.Int32, num);
	var array2 = JSIL.Array.New($asm08.System.Linq.Set$b1.Slot.Of(this.TElement), num);
	System.Array.Copy$1(
		this.slots, 
		0, 
		array2, 
		0, 
		this.count
	);
__loop0__: 
	for (var i = 0; i < this.count; ++i) {
		var num2 = (array2[i].hashCode % num);
		array2[i].next = (array[num2] - 1);
		array[num2] = (i + 1);
	}
	this.buckets = array;
	this.slots = array2;
};
$asm08.System.Linq.Set$b1.prototype.InternalGetHashCode = function (value) {
	if (value !== null) {
		return (this.comparer.IEqualityComparer$b1_GetHashCode(value) & 2147483647);
	}
	return 0;
};
JSIL.OverloadedMethod($asm08.System.Linq.Set$b1.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Collections.Generic.IEqualityComparer$b1.Of(JSIL.AnyType)]]
	]);
$asm08.System.Linq.Set$b1.prototype.buckets = null;
$asm08.System.Linq.Set$b1.prototype.slots = null;
$asm08.System.Linq.Set$b1.prototype.count = 0;
$asm08.System.Linq.Set$b1.prototype.freeList = 0;
$asm08.System.Linq.Set$b1.prototype.comparer = null;

$asm08.System.Linq.Set$b1.Slot.prototype.hashCode = 0;
$asm08.System.Linq.Set$b1.Slot.prototype.value = null;
$asm08.System.Linq.Set$b1.Slot.prototype.next = 0;

$asm08.System.Linq.GroupedEnumerable$b4.prototype._ctor = function (source, keySelector, elementSelector, resultSelector, comparer) {
	System.Object.prototype._ctor.call(this);
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	if (keySelector === null) {
		throw $asm08.System.Core.Error.ArgumentNull("keySelector");
	}
	if (elementSelector === null) {
		throw $asm08.System.Core.Error.ArgumentNull("elementSelector");
	}
	if (resultSelector === null) {
		throw $asm08.System.Core.Error.ArgumentNull("resultSelector");
	}
	this.source = source;
	this.keySelector = keySelector;
	this.elementSelector = elementSelector;
	this.comparer = comparer;
	this.resultSelector = resultSelector;
};
$asm08.System.Linq.GroupedEnumerable$b4.prototype.GetEnumerator = function () {
	var lookup = System.Linq.Lookup$b2.Of(this.TKey, this.TElement).Create$b1(this.TSource)(this.source, this.keySelector, this.elementSelector, this.comparer);
	return lookup.ApplyResultSelector$b1(this.TResult)(this.resultSelector).IEnumerable$b1_GetEnumerator();
};
$asm08.System.Linq.GroupedEnumerable$b4.prototype.IEnumerable_GetEnumerator = function () {
	return this.GetEnumerator();
};
$asm08.System.Linq.GroupedEnumerable$b4.prototype.source = null;
$asm08.System.Linq.GroupedEnumerable$b4.prototype.keySelector = null;
$asm08.System.Linq.GroupedEnumerable$b4.prototype.elementSelector = null;
$asm08.System.Linq.GroupedEnumerable$b4.prototype.comparer = null;
$asm08.System.Linq.GroupedEnumerable$b4.prototype.resultSelector = null;

$asm08.System.Linq.GroupedEnumerable$b3.prototype._ctor = function (source, keySelector, elementSelector, comparer) {
	System.Object.prototype._ctor.call(this);
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	if (keySelector === null) {
		throw $asm08.System.Core.Error.ArgumentNull("keySelector");
	}
	if (elementSelector === null) {
		throw $asm08.System.Core.Error.ArgumentNull("elementSelector");
	}
	this.source = source;
	this.keySelector = keySelector;
	this.elementSelector = elementSelector;
	this.comparer = comparer;
};
$asm08.System.Linq.GroupedEnumerable$b3.prototype.GetEnumerator = function () {
	return System.Linq.Lookup$b2.Of(this.TKey, this.TElement).Create$b1(this.TSource)(this.source, this.keySelector, this.elementSelector, this.comparer).GetEnumerator();
};
$asm08.System.Linq.GroupedEnumerable$b3.prototype.IEnumerable_GetEnumerator = function () {
	return this.GetEnumerator();
};
$asm08.System.Linq.GroupedEnumerable$b3.prototype.source = null;
$asm08.System.Linq.GroupedEnumerable$b3.prototype.keySelector = null;
$asm08.System.Linq.GroupedEnumerable$b3.prototype.elementSelector = null;
$asm08.System.Linq.GroupedEnumerable$b3.prototype.comparer = null;

$asm08.System.Linq.OrderedEnumerable$b1.prototype.GetEnumerator = function () {
	var $lGetEnumerator$gd__ = new ($asm08.System.Linq.OrderedEnumerable$b1.$lGetEnumerator$gd__0.Of(this.TElement)) (0);
	$lGetEnumerator$gd__.$this = this;
	return $lGetEnumerator$gd__;
};
$asm08.System.Linq.OrderedEnumerable$b1.prototype.IEnumerable_GetEnumerator = function () {
	return this.GetEnumerator();
};
$asm08.System.Linq.OrderedEnumerable$b1.prototype.IOrderedEnumerable$b1_CreateOrderedEnumerable$b1 = JSIL.GenericMethod(
	["TKey"], 
	function (TKey, keySelector, comparer, descending) {
		return new ($asm08.System.Linq.OrderedEnumerable$b2.Of(this.TElement, TKey)) (this.source, keySelector, comparer, descending).__Initialize__({
				parent: this}
		);
	}
);
$asm08.System.Linq.OrderedEnumerable$b1.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm08.System.Linq.OrderedEnumerable$b1.prototype.source = null;

$asm08.System.Linq.OrderedEnumerable$b1.$lGetEnumerator$gd__0.prototype.IEnumerator_MoveNext = function () {
	switch (this.$state) {
		case 0: 
			this.$state = -1;
			this.buffer = new ($asm08.System.Linq.Buffer$b1.Of(this.TElement)) (this.$this.source);
			if (this.buffer.count <= 0) {
				return false;
			}
			this.sorter = this.$this.GetEnumerableSorter(null);
			this.map = this.sorter.Sort(this.buffer.items, this.buffer.count);
			this.sorter = null;
			this.i = 0;
			break;
		case 1: 
			this.$state = -1;
			++this.i;
			break;
		default: 
			return false;
	}
	if (this.i >= this.buffer.count) {
		return false;
	}
	this.$current = this.buffer.items[this.map[this.i]];
	this.$state = 1;
	return true;
};
$asm08.System.Linq.OrderedEnumerable$b1.$lGetEnumerator$gd__0.prototype.IEnumerator$b1_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.OrderedEnumerable$b1.$lGetEnumerator$gd__0.prototype.IEnumerator_Reset = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm08.System.Linq.OrderedEnumerable$b1.$lGetEnumerator$gd__0.prototype.IDisposable_Dispose = function () {
};
$asm08.System.Linq.OrderedEnumerable$b1.$lGetEnumerator$gd__0.prototype.IEnumerator_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.OrderedEnumerable$b1.$lGetEnumerator$gd__0.prototype._ctor = function ($l$g1__state) {
	System.Object.prototype._ctor.call(this);
	this.$state = $l$g1__state;
};
JSIL.MakeProperty($asm08.System.Linq.OrderedEnumerable$b1.$lGetEnumerator$gd__0.prototype, "IEnumerator$b1_Current", 
	$asm08.System.Linq.OrderedEnumerable$b1.$lGetEnumerator$gd__0.prototype.IEnumerator$b1_get_Current, null);
JSIL.MakeProperty($asm08.System.Linq.OrderedEnumerable$b1.$lGetEnumerator$gd__0.prototype, "IEnumerator_Current", 
	$asm08.System.Linq.OrderedEnumerable$b1.$lGetEnumerator$gd__0.prototype.IEnumerator_get_Current, null);
$asm08.System.Linq.OrderedEnumerable$b1.$lGetEnumerator$gd__0.prototype.$current = null;
$asm08.System.Linq.OrderedEnumerable$b1.$lGetEnumerator$gd__0.prototype.$state = 0;
$asm08.System.Linq.OrderedEnumerable$b1.$lGetEnumerator$gd__0.prototype.$this = null;
$asm08.System.Linq.OrderedEnumerable$b1.$lGetEnumerator$gd__0.prototype.sorter = null;
$asm08.System.Linq.OrderedEnumerable$b1.$lGetEnumerator$gd__0.prototype.map = null;
$asm08.System.Linq.OrderedEnumerable$b1.$lGetEnumerator$gd__0.prototype.i = 0;

$asm08.System.Linq.OrderedEnumerable$b2.prototype._ctor = function (source, keySelector, comparer, descending) {
	$asm08.System.Linq.OrderedEnumerable$b1.Of(this.TElement).prototype._ctor.call(this);
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	if (keySelector === null) {
		throw $asm08.System.Core.Error.ArgumentNull("keySelector");
	}
	this.source = source;
	this.parent = null;
	this.keySelector = keySelector;
	this.comparer = comparer ? comparer : JSIL.Cast(System.Collections.Generic.Comparer$b1.Of(this.TKey).Default, System.Collections.Generic.IComparer$b1.Of(this.TKey));
	this.descending = descending;
};
$asm08.System.Linq.OrderedEnumerable$b2.prototype.GetEnumerableSorter = function (next) {
	var enumerableSorter = new ($asm08.System.Linq.EnumerableSorter$b2.Of(this.TElement, this.TKey)) (this.keySelector, this.comparer, this.descending, next);
	if (this.parent !== null) {
		enumerableSorter = this.parent.GetEnumerableSorter(enumerableSorter);
	}
	return enumerableSorter;
};
$asm08.System.Linq.OrderedEnumerable$b2.prototype.parent = null;
$asm08.System.Linq.OrderedEnumerable$b2.prototype.keySelector = null;
$asm08.System.Linq.OrderedEnumerable$b2.prototype.comparer = null;
$asm08.System.Linq.OrderedEnumerable$b2.prototype.descending = false;

$asm08.System.Linq.EnumerableSorter$b1.prototype.Sort = function (elements, count) {
	this.ComputeKeys(elements, count);
	var array = JSIL.Array.New(System.Int32, count);
__loop0__: 
	for (var i = 0; i < count; ++i) {
		array[i] = i;
	}
	this.QuickSort(array, 0, (count - 1));
	return array;
};
$asm08.System.Linq.EnumerableSorter$b1.prototype.QuickSort = function (map, left, right) {
__loop0__: 
	do {
		var num = left;
		var num2 = right;
		var index = map[(num + ((num2 - num) >> 1))];
	__loop1__: 
		do {
			if (num < map.length) {
				if (this.CompareKeys(index, map[num]) > 0) {
					++num;
					continue __loop1__;
				}
			}
		__loop2__: 
			for (; (num2 >= 0) && (this.CompareKeys(index, map[num2]) < 0); --num2) {
			}
			if (num > num2) {
				break __loop1__;
			}
			if (num < num2) {
				var num3 = map[num];
				map[num] = map[num2];
				map[num2] = num3;
			}
			++num;
			--num2;
		} while (num <= num2);
		if ((num2 - left) <= (right - num)) {
			if (left < num2) {
				this.QuickSort(map, left, num2);
			}
			left = num;
		} else {
			if (num < right) {
				this.QuickSort(map, num, right);
			}
			right = num2;
		}
	} while (left < right);
};
$asm08.System.Linq.EnumerableSorter$b1.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};

$asm08.System.Linq.EnumerableSorter$b2.prototype._ctor = function (keySelector, comparer, descending, next) {
	$asm08.System.Linq.EnumerableSorter$b1.Of(this.TElement).prototype._ctor.call(this);
	this.keySelector = keySelector;
	this.comparer = comparer;
	this.descending = descending;
	this.next = next;
};
$asm08.System.Linq.EnumerableSorter$b2.prototype.ComputeKeys = function (elements, count) {
	this.keys = JSIL.Array.New(this.TKey, count);
__loop0__: 
	for (var i = 0; i < count; ++i) {
		this.keys[i] = this.keySelector(elements[i]);
	}
	if (this.next !== null) {
		this.next.ComputeKeys(elements, count);
	}
};
$asm08.System.Linq.EnumerableSorter$b2.prototype.CompareKeys = function (index1, index2) {
	var num = this.comparer.IComparer$b1_Compare(this.keys[index1], this.keys[index2]);
	if (num === 0) {
		if (this.next === null) {
			return (index1 - index2);
		}
		return this.next.CompareKeys(index1, index2);
	} else {
		if (!this.descending) {
			return num;
		}
		return -num;
	}
};
$asm08.System.Linq.EnumerableSorter$b2.prototype.keySelector = null;
$asm08.System.Linq.EnumerableSorter$b2.prototype.comparer = null;
$asm08.System.Linq.EnumerableSorter$b2.prototype.descending = false;
$asm08.System.Linq.EnumerableSorter$b2.prototype.next = null;
$asm08.System.Linq.EnumerableSorter$b2.prototype.keys = null;

$asm08.System.Linq.Buffer$b1.prototype._ctor = function (source) {
	var array = null;
	var num = 0;
	var collection = JSIL.TryCast(source, System.Collections.Generic.ICollection$b1.Of(this.TElement));
	if (collection !== null) {
		num = collection.ICollection$b1_Count;
		if (num > 0) {
			array = JSIL.Array.New(this.TElement, num);
			collection.ICollection$b1_CopyTo(array, 0);
		}
	} else {
		var enumerator = source.IEnumerable$b1_GetEnumerator();
		try {
		__loop0__: 
			while (enumerator.IEnumerator_MoveNext()) {
				var current = enumerator.IEnumerator$b1_Current;
				if (array === null) {
					array = JSIL.Array.New(this.TElement, 4);
				} else if (array.length === num) {
					var array2 = JSIL.Array.New(this.TElement, (num * 2));
					System.Array.Copy$1(
						array, 
						0, 
						array2, 
						0, 
						num
					);
					array = array2;
				}
				array[num] = current;
				++num;
			}
		} finally {
			if (enumerator !== null) {
				enumerator.IDisposable_Dispose();
			}
		}
	}
	this.items = array;
	this.count = num;
};
$asm08.System.Linq.Buffer$b1.prototype.ToArray = function () {
	if (this.count === 0) {
		return JSIL.Array.New(this.TElement, 0);
	}
	if (this.items.length === this.count) {
		return this.items;
	}
	var array = JSIL.Array.New(this.TElement, this.count);
	System.Array.Copy$1(
		this.items, 
		0, 
		array, 
		0, 
		this.count
	);
	return array;
};
$asm08.System.Linq.Buffer$b1.prototype.items = null;
$asm08.System.Linq.Buffer$b1.prototype.count = 0;

$asm08.System.Linq.SystemCore_EnumerableDebugView$b1.prototype._ctor = function (enumerable) {
	System.Object.prototype._ctor.call(this);
	if (enumerable === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["enumerable"]);
	}
	this.enumerable = enumerable;
};
$asm08.System.Linq.SystemCore_EnumerableDebugView$b1.prototype.get_Items = function () {
	var list = new (System.Collections.Generic.List$b1.Of(this.T)) ();
	var enumerator = this.enumerable.IEnumerable$b1_GetEnumerator();
	if (enumerator !== null) {
		this.count = 0;
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			list.Add(enumerator.IEnumerator$b1_Current);
			++this.count;
		}
	}
	if (this.count === 0) {
		throw new $asm08.System.Linq.SystemCore_EnumerableDebugViewEmptyException();
	}
	this.cachedCollection = JSIL.Array.New(this.T, this.count);
	list.CopyTo$2(this.cachedCollection, 0);
	return this.cachedCollection;
};
JSIL.MakeProperty($asm08.System.Linq.SystemCore_EnumerableDebugView$b1.prototype, "Items", 
	$asm08.System.Linq.SystemCore_EnumerableDebugView$b1.prototype.get_Items, null);
$asm08.System.Linq.SystemCore_EnumerableDebugView$b1.prototype.enumerable = null;
$asm08.System.Linq.SystemCore_EnumerableDebugView$b1.prototype.cachedCollection = null;
$asm08.System.Linq.SystemCore_EnumerableDebugView$b1.prototype.count = 0;

$asm08.System.Linq.SystemCore_EnumerableDebugViewEmptyException.prototype.get_Empty = function () {
	return $asm08.System.Core.Strings.EmptyEnumerable;
};
$asm08.System.Linq.SystemCore_EnumerableDebugViewEmptyException.prototype._ctor = function () {
	System.Exception.prototype._ctor.call(this);
};
JSIL.MakeProperty($asm08.System.Linq.SystemCore_EnumerableDebugViewEmptyException.prototype, "Empty", 
	$asm08.System.Linq.SystemCore_EnumerableDebugViewEmptyException.prototype.get_Empty, null);

$asm08.System.Linq.SystemCore_EnumerableDebugView.prototype._ctor = function (enumerable) {
	System.Object.prototype._ctor.call(this);
	if (enumerable === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["enumerable"]);
	}
	this.enumerable = enumerable;
	this.count = 0;
	this.cachedCollection = null;
};
$asm08.System.Linq.SystemCore_EnumerableDebugView.prototype.get_Items = function () {
	var list = new (System.Collections.Generic.List$b1.Of(System.Object)) ();
	var enumerator = this.enumerable.IEnumerable_GetEnumerator();
	if (enumerator !== null) {
		this.count = 0;
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			list.Add(enumerator.IEnumerator_Current);
			++this.count;
		}
	}
	if (this.count === 0) {
		throw new $asm08.System.Linq.SystemCore_EnumerableDebugViewEmptyException();
	}
	this.cachedCollection = JSIL.Array.New(System.Object, this.count);
	list.CopyTo$2(this.cachedCollection, 0);
	return this.cachedCollection;
};
JSIL.MakeProperty($asm08.System.Linq.SystemCore_EnumerableDebugView.prototype, "Items", 
	$asm08.System.Linq.SystemCore_EnumerableDebugView.prototype.get_Items, null);
$asm08.System.Linq.SystemCore_EnumerableDebugView.prototype.enumerable = null;
$asm08.System.Linq.SystemCore_EnumerableDebugView.prototype.cachedCollection = null;
$asm08.System.Linq.SystemCore_EnumerableDebugView.prototype.count = 0;

System.Linq.Queryable.AsQueryable$b1 = JSIL.GenericMethod(
	["TElement"], 
	function (TElement, source) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (JSIL.TryCast(source, System.Linq.IQueryable$b1.Of(TElement)) !== null) {
			return JSIL.Cast(source, System.Linq.IQueryable$b1.Of(TElement));
		}
		return JSIL.New(System.Linq.EnumerableQuery$b1.Of(TElement), "_ctor$0", [source]);
	}
);
System.Linq.Queryable.AsQueryable = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	if (JSIL.TryCast(source, System.Linq.IQueryable) !== null) {
		return JSIL.Cast(source, System.Linq.IQueryable);
	}
	var type = $asm08.System.Linq.TypeHelper.FindGenericType(System.Collections.Generic.IEnumerable$b1, JSIL.GetType(source));
	if (type === null) {
		throw $asm08.System.Core.Error.ArgumentNotIEnumerableGeneric("source");
	}
	return System.Linq.EnumerableQuery.Create$0(type.GetGenericArguments()[0], source);
};
System.Linq.Queryable.Where$b1$0 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, predicate) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (predicate === null) {
			throw $asm08.System.Core.Error.ArgumentNull("predicate");
		}
		return source.IQueryable_Provider.IQueryProvider_CreateQuery$b1(TSource)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(predicate)])
			));
	}
);
System.Linq.Queryable.Where$b1$1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, predicate) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (predicate === null) {
			throw $asm08.System.Core.Error.ArgumentNull("predicate");
		}
		return source.IQueryable_Provider.IQueryProvider_CreateQuery$b1(TSource)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(predicate)])
			));
	}
);
System.Linq.Queryable.OfType$b1 = JSIL.GenericMethod(
	["TResult"], 
	function (TResult, source) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		return source.IQueryable_Provider.IQueryProvider_CreateQuery$b1(TResult)(System.Linq.Expressions.Expression.Call$8(null, JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TResult])), JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression])));
	}
);
System.Linq.Queryable.Cast$b1 = JSIL.GenericMethod(
	["TResult"], 
	function (TResult, source) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		return source.IQueryable_Provider.IQueryProvider_CreateQuery$b1(TResult)(System.Linq.Expressions.Expression.Call$8(null, JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TResult])), JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression])));
	}
);
System.Linq.Queryable.Select$b2$0 = JSIL.GenericMethod(
	["TSource", "TResult"], 
	function (TSource, TResult, source, selector) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (selector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("selector");
		}
		return source.IQueryable_Provider.IQueryProvider_CreateQuery$b1(TResult)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource, TResult])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(selector)])
			));
	}
);
System.Linq.Queryable.Select$b2$1 = JSIL.GenericMethod(
	["TSource", "TResult"], 
	function (TSource, TResult, source, selector) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (selector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("selector");
		}
		return source.IQueryable_Provider.IQueryProvider_CreateQuery$b1(TResult)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource, TResult])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(selector)])
			));
	}
);
System.Linq.Queryable.SelectMany$b2$0 = JSIL.GenericMethod(
	["TSource", "TResult"], 
	function (TSource, TResult, source, selector) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (selector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("selector");
		}
		return source.IQueryable_Provider.IQueryProvider_CreateQuery$b1(TResult)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource, TResult])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(selector)])
			));
	}
);
System.Linq.Queryable.SelectMany$b2$1 = JSIL.GenericMethod(
	["TSource", "TResult"], 
	function (TSource, TResult, source, selector) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (selector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("selector");
		}
		return source.IQueryable_Provider.IQueryProvider_CreateQuery$b1(TResult)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource, TResult])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(selector)])
			));
	}
);
System.Linq.Queryable.SelectMany$b3$0 = JSIL.GenericMethod(
	["TSource", "TCollection", "TResult"], 
	function (TSource, TCollection, TResult, source, collectionSelector, resultSelector) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (collectionSelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("collectionSelector");
		}
		if (resultSelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("resultSelector");
		}
		return source.IQueryable_Provider.IQueryProvider_CreateQuery$b1(TResult)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource, TCollection, TResult])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(collectionSelector), System.Linq.Expressions.Expression.Quote(resultSelector)])
			));
	}
);
System.Linq.Queryable.SelectMany$b3$1 = JSIL.GenericMethod(
	["TSource", "TCollection", "TResult"], 
	function (TSource, TCollection, TResult, source, collectionSelector, resultSelector) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (collectionSelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("collectionSelector");
		}
		if (resultSelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("resultSelector");
		}
		return source.IQueryable_Provider.IQueryProvider_CreateQuery$b1(TResult)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource, TCollection, TResult])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(collectionSelector), System.Linq.Expressions.Expression.Quote(resultSelector)])
			));
	}
);
System.Linq.Queryable.GetSourceExpression$b1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source) {
		var queryable = JSIL.TryCast(source, System.Linq.IQueryable$b1.Of(TSource));
		if (queryable !== null) {
			return queryable.IQueryable_Expression;
		}
		return System.Linq.Expressions.Expression.Constant$1(source, System.Collections.Generic.IEnumerable$b1.Of(TSource));
	}
);
System.Linq.Queryable.Join$b4$0 = JSIL.GenericMethod(
	["TOuter", "TInner", "TKey", "TResult"], 
	function (TOuter, TInner, TKey, TResult, outer, inner, outerKeySelector, innerKeySelector, resultSelector) {
		if (outer === null) {
			throw $asm08.System.Core.Error.ArgumentNull("outer");
		}
		if (inner === null) {
			throw $asm08.System.Core.Error.ArgumentNull("inner");
		}
		if (outerKeySelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("outerKeySelector");
		}
		if (innerKeySelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("innerKeySelector");
		}
		if (resultSelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("resultSelector");
		}
		return outer.IQueryable_Provider.IQueryProvider_CreateQuery$b1(TResult)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TOuter, TInner, TKey, TResult])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [outer.IQueryable_Expression, System.Linq.Queryable.GetSourceExpression$b1(TInner)(inner), System.Linq.Expressions.Expression.Quote(outerKeySelector), System.Linq.Expressions.Expression.Quote(innerKeySelector), System.Linq.Expressions.Expression.Quote(resultSelector)])
			));
	}
);
System.Linq.Queryable.Join$b4$1 = JSIL.GenericMethod(
	["TOuter", "TInner", "TKey", "TResult"], 
	function (TOuter, TInner, TKey, TResult, outer, inner, outerKeySelector, innerKeySelector, resultSelector, comparer) {
		if (outer === null) {
			throw $asm08.System.Core.Error.ArgumentNull("outer");
		}
		if (inner === null) {
			throw $asm08.System.Core.Error.ArgumentNull("inner");
		}
		if (outerKeySelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("outerKeySelector");
		}
		if (innerKeySelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("innerKeySelector");
		}
		if (resultSelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("resultSelector");
		}
		return outer.IQueryable_Provider.IQueryProvider_CreateQuery$b1(TResult)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TOuter, TInner, TKey, TResult])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [outer.IQueryable_Expression, System.Linq.Queryable.GetSourceExpression$b1(TInner)(inner), System.Linq.Expressions.Expression.Quote(outerKeySelector), System.Linq.Expressions.Expression.Quote(innerKeySelector), System.Linq.Expressions.Expression.Quote(resultSelector), System.Linq.Expressions.Expression.Constant$1(comparer, System.Collections.Generic.IEqualityComparer$b1.Of(TKey))])
			));
	}
);
System.Linq.Queryable.GroupJoin$b4$0 = JSIL.GenericMethod(
	["TOuter", "TInner", "TKey", "TResult"], 
	function (TOuter, TInner, TKey, TResult, outer, inner, outerKeySelector, innerKeySelector, resultSelector) {
		if (outer === null) {
			throw $asm08.System.Core.Error.ArgumentNull("outer");
		}
		if (inner === null) {
			throw $asm08.System.Core.Error.ArgumentNull("inner");
		}
		if (outerKeySelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("outerKeySelector");
		}
		if (innerKeySelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("innerKeySelector");
		}
		if (resultSelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("resultSelector");
		}
		return outer.IQueryable_Provider.IQueryProvider_CreateQuery$b1(TResult)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TOuter, TInner, TKey, TResult])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [outer.IQueryable_Expression, System.Linq.Queryable.GetSourceExpression$b1(TInner)(inner), System.Linq.Expressions.Expression.Quote(outerKeySelector), System.Linq.Expressions.Expression.Quote(innerKeySelector), System.Linq.Expressions.Expression.Quote(resultSelector)])
			));
	}
);
System.Linq.Queryable.GroupJoin$b4$1 = JSIL.GenericMethod(
	["TOuter", "TInner", "TKey", "TResult"], 
	function (TOuter, TInner, TKey, TResult, outer, inner, outerKeySelector, innerKeySelector, resultSelector, comparer) {
		if (outer === null) {
			throw $asm08.System.Core.Error.ArgumentNull("outer");
		}
		if (inner === null) {
			throw $asm08.System.Core.Error.ArgumentNull("inner");
		}
		if (outerKeySelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("outerKeySelector");
		}
		if (innerKeySelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("innerKeySelector");
		}
		if (resultSelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("resultSelector");
		}
		return outer.IQueryable_Provider.IQueryProvider_CreateQuery$b1(TResult)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TOuter, TInner, TKey, TResult])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [outer.IQueryable_Expression, System.Linq.Queryable.GetSourceExpression$b1(TInner)(inner), System.Linq.Expressions.Expression.Quote(outerKeySelector), System.Linq.Expressions.Expression.Quote(innerKeySelector), System.Linq.Expressions.Expression.Quote(resultSelector), System.Linq.Expressions.Expression.Constant$1(comparer, System.Collections.Generic.IEqualityComparer$b1.Of(TKey))])
			));
	}
);
System.Linq.Queryable.OrderBy$b2$0 = JSIL.GenericMethod(
	["TSource", "TKey"], 
	function (TSource, TKey, source, keySelector) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (keySelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("keySelector");
		}
		return JSIL.Cast(source.IQueryable_Provider.IQueryProvider_CreateQuery$b1(TSource)(System.Linq.Expressions.Expression.Call$8(
					null, 
					JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource, TKey])), 
					JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(keySelector)])
				)), System.Linq.IOrderedQueryable$b1.Of(TSource));
	}
);
System.Linq.Queryable.OrderBy$b2$1 = JSIL.GenericMethod(
	["TSource", "TKey"], 
	function (TSource, TKey, source, keySelector, comparer) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (keySelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("keySelector");
		}
		return JSIL.Cast(source.IQueryable_Provider.IQueryProvider_CreateQuery$b1(TSource)(System.Linq.Expressions.Expression.Call$8(
					null, 
					JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource, TKey])), 
					JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(keySelector), System.Linq.Expressions.Expression.Constant$1(comparer, System.Collections.Generic.IComparer$b1.Of(TKey))])
				)), System.Linq.IOrderedQueryable$b1.Of(TSource));
	}
);
System.Linq.Queryable.OrderByDescending$b2$0 = JSIL.GenericMethod(
	["TSource", "TKey"], 
	function (TSource, TKey, source, keySelector) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (keySelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("keySelector");
		}
		return JSIL.Cast(source.IQueryable_Provider.IQueryProvider_CreateQuery$b1(TSource)(System.Linq.Expressions.Expression.Call$8(
					null, 
					JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource, TKey])), 
					JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(keySelector)])
				)), System.Linq.IOrderedQueryable$b1.Of(TSource));
	}
);
System.Linq.Queryable.OrderByDescending$b2$1 = JSIL.GenericMethod(
	["TSource", "TKey"], 
	function (TSource, TKey, source, keySelector, comparer) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (keySelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("keySelector");
		}
		return JSIL.Cast(source.IQueryable_Provider.IQueryProvider_CreateQuery$b1(TSource)(System.Linq.Expressions.Expression.Call$8(
					null, 
					JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource, TKey])), 
					JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(keySelector), System.Linq.Expressions.Expression.Constant$1(comparer, System.Collections.Generic.IComparer$b1.Of(TKey))])
				)), System.Linq.IOrderedQueryable$b1.Of(TSource));
	}
);
System.Linq.Queryable.ThenBy$b2$0 = JSIL.GenericMethod(
	["TSource", "TKey"], 
	function (TSource, TKey, source, keySelector) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (keySelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("keySelector");
		}
		return JSIL.Cast(source.IQueryable_Provider.IQueryProvider_CreateQuery$b1(TSource)(System.Linq.Expressions.Expression.Call$8(
					null, 
					JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource, TKey])), 
					JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(keySelector)])
				)), System.Linq.IOrderedQueryable$b1.Of(TSource));
	}
);
System.Linq.Queryable.ThenBy$b2$1 = JSIL.GenericMethod(
	["TSource", "TKey"], 
	function (TSource, TKey, source, keySelector, comparer) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (keySelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("keySelector");
		}
		return JSIL.Cast(source.IQueryable_Provider.IQueryProvider_CreateQuery$b1(TSource)(System.Linq.Expressions.Expression.Call$8(
					null, 
					JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource, TKey])), 
					JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(keySelector), System.Linq.Expressions.Expression.Constant$1(comparer, System.Collections.Generic.IComparer$b1.Of(TKey))])
				)), System.Linq.IOrderedQueryable$b1.Of(TSource));
	}
);
System.Linq.Queryable.ThenByDescending$b2$0 = JSIL.GenericMethod(
	["TSource", "TKey"], 
	function (TSource, TKey, source, keySelector) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (keySelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("keySelector");
		}
		return JSIL.Cast(source.IQueryable_Provider.IQueryProvider_CreateQuery$b1(TSource)(System.Linq.Expressions.Expression.Call$8(
					null, 
					JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource, TKey])), 
					JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(keySelector)])
				)), System.Linq.IOrderedQueryable$b1.Of(TSource));
	}
);
System.Linq.Queryable.ThenByDescending$b2$1 = JSIL.GenericMethod(
	["TSource", "TKey"], 
	function (TSource, TKey, source, keySelector, comparer) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (keySelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("keySelector");
		}
		return JSIL.Cast(source.IQueryable_Provider.IQueryProvider_CreateQuery$b1(TSource)(System.Linq.Expressions.Expression.Call$8(
					null, 
					JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource, TKey])), 
					JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(keySelector), System.Linq.Expressions.Expression.Constant$1(comparer, System.Collections.Generic.IComparer$b1.Of(TKey))])
				)), System.Linq.IOrderedQueryable$b1.Of(TSource));
	}
);
System.Linq.Queryable.Take$b1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, count) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		return source.IQueryable_Provider.IQueryProvider_CreateQuery$b1(TSource)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Constant$0(count)])
			));
	}
);
System.Linq.Queryable.TakeWhile$b1$0 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, predicate) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (predicate === null) {
			throw $asm08.System.Core.Error.ArgumentNull("predicate");
		}
		return source.IQueryable_Provider.IQueryProvider_CreateQuery$b1(TSource)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(predicate)])
			));
	}
);
System.Linq.Queryable.TakeWhile$b1$1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, predicate) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (predicate === null) {
			throw $asm08.System.Core.Error.ArgumentNull("predicate");
		}
		return source.IQueryable_Provider.IQueryProvider_CreateQuery$b1(TSource)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(predicate)])
			));
	}
);
System.Linq.Queryable.Skip$b1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, count) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		return source.IQueryable_Provider.IQueryProvider_CreateQuery$b1(TSource)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Constant$0(count)])
			));
	}
);
System.Linq.Queryable.SkipWhile$b1$0 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, predicate) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (predicate === null) {
			throw $asm08.System.Core.Error.ArgumentNull("predicate");
		}
		return source.IQueryable_Provider.IQueryProvider_CreateQuery$b1(TSource)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(predicate)])
			));
	}
);
System.Linq.Queryable.SkipWhile$b1$1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, predicate) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (predicate === null) {
			throw $asm08.System.Core.Error.ArgumentNull("predicate");
		}
		return source.IQueryable_Provider.IQueryProvider_CreateQuery$b1(TSource)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(predicate)])
			));
	}
);
System.Linq.Queryable.GroupBy$b2$0 = JSIL.GenericMethod(
	["TSource", "TKey"], 
	function (TSource, TKey, source, keySelector) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (keySelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("keySelector");
		}
		return source.IQueryable_Provider.IQueryProvider_CreateQuery$b1(System.Linq.IGrouping$b2.Of(TKey, TSource))(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource, TKey])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(keySelector)])
			));
	}
);
System.Linq.Queryable.GroupBy$b3$0 = JSIL.GenericMethod(
	["TSource", "TKey", "TElement"], 
	function (TSource, TKey, TElement, source, keySelector, elementSelector) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (keySelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("keySelector");
		}
		if (elementSelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("elementSelector");
		}
		return source.IQueryable_Provider.IQueryProvider_CreateQuery$b1(System.Linq.IGrouping$b2.Of(TKey, TElement))(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource, TKey, TElement])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(keySelector), System.Linq.Expressions.Expression.Quote(elementSelector)])
			));
	}
);
System.Linq.Queryable.GroupBy$b2$1 = JSIL.GenericMethod(
	["TSource", "TKey"], 
	function (TSource, TKey, source, keySelector, comparer) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (keySelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("keySelector");
		}
		return source.IQueryable_Provider.IQueryProvider_CreateQuery$b1(System.Linq.IGrouping$b2.Of(TKey, TSource))(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource, TKey])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(keySelector), System.Linq.Expressions.Expression.Constant$1(comparer, System.Collections.Generic.IEqualityComparer$b1.Of(TKey))])
			));
	}
);
System.Linq.Queryable.GroupBy$b3$1 = JSIL.GenericMethod(
	["TSource", "TKey", "TElement"], 
	function (TSource, TKey, TElement, source, keySelector, elementSelector, comparer) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (keySelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("keySelector");
		}
		if (elementSelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("elementSelector");
		}
		return source.IQueryable_Provider.IQueryProvider_CreateQuery$b1(System.Linq.IGrouping$b2.Of(TKey, TElement))(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource, TKey, TElement])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(keySelector), System.Linq.Expressions.Expression.Quote(elementSelector), System.Linq.Expressions.Expression.Constant$1(comparer, System.Collections.Generic.IEqualityComparer$b1.Of(TKey))])
			));
	}
);
System.Linq.Queryable.GroupBy$b4$0 = JSIL.GenericMethod(
	["TSource", "TKey", "TElement", "TResult"], 
	function (TSource, TKey, TElement, TResult, source, keySelector, elementSelector, resultSelector) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (keySelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("keySelector");
		}
		if (elementSelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("elementSelector");
		}
		if (resultSelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("resultSelector");
		}
		return source.IQueryable_Provider.IQueryProvider_CreateQuery$b1(TResult)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource, TKey, TElement, TResult])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(keySelector), System.Linq.Expressions.Expression.Quote(elementSelector), System.Linq.Expressions.Expression.Quote(resultSelector)])
			));
	}
);
System.Linq.Queryable.GroupBy$b3$2 = JSIL.GenericMethod(
	["TSource", "TKey", "TResult"], 
	function (TSource, TKey, TResult, source, keySelector, resultSelector) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (keySelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("keySelector");
		}
		if (resultSelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("resultSelector");
		}
		return source.IQueryable_Provider.IQueryProvider_CreateQuery$b1(TResult)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource, TKey, TResult])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(keySelector), System.Linq.Expressions.Expression.Quote(resultSelector)])
			));
	}
);
System.Linq.Queryable.GroupBy$b3$3 = JSIL.GenericMethod(
	["TSource", "TKey", "TResult"], 
	function (TSource, TKey, TResult, source, keySelector, resultSelector, comparer) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (keySelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("keySelector");
		}
		if (resultSelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("resultSelector");
		}
		return source.IQueryable_Provider.IQueryProvider_CreateQuery$b1(TResult)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource, TKey, TResult])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(keySelector), System.Linq.Expressions.Expression.Quote(resultSelector), System.Linq.Expressions.Expression.Constant$1(comparer, System.Collections.Generic.IEqualityComparer$b1.Of(TKey))])
			));
	}
);
System.Linq.Queryable.GroupBy$b4$1 = JSIL.GenericMethod(
	["TSource", "TKey", "TElement", "TResult"], 
	function (TSource, TKey, TElement, TResult, source, keySelector, elementSelector, resultSelector, comparer) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (keySelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("keySelector");
		}
		if (elementSelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("elementSelector");
		}
		if (resultSelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("resultSelector");
		}
		return source.IQueryable_Provider.IQueryProvider_CreateQuery$b1(TResult)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource, TKey, TElement, TResult])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(keySelector), System.Linq.Expressions.Expression.Quote(elementSelector), System.Linq.Expressions.Expression.Quote(resultSelector), System.Linq.Expressions.Expression.Constant$1(comparer, System.Collections.Generic.IEqualityComparer$b1.Of(TKey))])
			));
	}
);
System.Linq.Queryable.Distinct$b1$0 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		return source.IQueryable_Provider.IQueryProvider_CreateQuery$b1(TSource)(System.Linq.Expressions.Expression.Call$8(null, JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression])));
	}
);
System.Linq.Queryable.Distinct$b1$1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, comparer) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		return source.IQueryable_Provider.IQueryProvider_CreateQuery$b1(TSource)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Constant$1(comparer, System.Collections.Generic.IEqualityComparer$b1.Of(TSource))])
			));
	}
);
System.Linq.Queryable.Concat$b1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source1, source2) {
		if (source1 === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source1");
		}
		if (source2 === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source2");
		}
		return source1.IQueryable_Provider.IQueryProvider_CreateQuery$b1(TSource)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source1.IQueryable_Expression, System.Linq.Queryable.GetSourceExpression$b1(TSource)(source2)])
			));
	}
);
System.Linq.Queryable.Zip$b3 = JSIL.GenericMethod(
	["TFirst", "TSecond", "TResult"], 
	function (TFirst, TSecond, TResult, source1, source2, resultSelector) {
		if (source1 === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source1");
		}
		if (source2 === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source2");
		}
		if (resultSelector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("resultSelector");
		}
		return source1.IQueryable_Provider.IQueryProvider_CreateQuery$b1(TResult)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TFirst, TSecond, TResult])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source1.IQueryable_Expression, System.Linq.Queryable.GetSourceExpression$b1(TSecond)(source2), System.Linq.Expressions.Expression.Quote(resultSelector)])
			));
	}
);
System.Linq.Queryable.Union$b1$0 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source1, source2) {
		if (source1 === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source1");
		}
		if (source2 === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source2");
		}
		return source1.IQueryable_Provider.IQueryProvider_CreateQuery$b1(TSource)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source1.IQueryable_Expression, System.Linq.Queryable.GetSourceExpression$b1(TSource)(source2)])
			));
	}
);
System.Linq.Queryable.Union$b1$1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source1, source2, comparer) {
		if (source1 === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source1");
		}
		if (source2 === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source2");
		}
		return source1.IQueryable_Provider.IQueryProvider_CreateQuery$b1(TSource)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source1.IQueryable_Expression, System.Linq.Queryable.GetSourceExpression$b1(TSource)(source2), System.Linq.Expressions.Expression.Constant$1(comparer, System.Collections.Generic.IEqualityComparer$b1.Of(TSource))])
			));
	}
);
System.Linq.Queryable.Intersect$b1$0 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source1, source2) {
		if (source1 === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source1");
		}
		if (source2 === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source2");
		}
		return source1.IQueryable_Provider.IQueryProvider_CreateQuery$b1(TSource)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source1.IQueryable_Expression, System.Linq.Queryable.GetSourceExpression$b1(TSource)(source2)])
			));
	}
);
System.Linq.Queryable.Intersect$b1$1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source1, source2, comparer) {
		if (source1 === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source1");
		}
		if (source2 === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source2");
		}
		return source1.IQueryable_Provider.IQueryProvider_CreateQuery$b1(TSource)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source1.IQueryable_Expression, System.Linq.Queryable.GetSourceExpression$b1(TSource)(source2), System.Linq.Expressions.Expression.Constant$1(comparer, System.Collections.Generic.IEqualityComparer$b1.Of(TSource))])
			));
	}
);
System.Linq.Queryable.Except$b1$0 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source1, source2) {
		if (source1 === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source1");
		}
		if (source2 === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source2");
		}
		return source1.IQueryable_Provider.IQueryProvider_CreateQuery$b1(TSource)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source1.IQueryable_Expression, System.Linq.Queryable.GetSourceExpression$b1(TSource)(source2)])
			));
	}
);
System.Linq.Queryable.Except$b1$1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source1, source2, comparer) {
		if (source1 === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source1");
		}
		if (source2 === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source2");
		}
		return source1.IQueryable_Provider.IQueryProvider_CreateQuery$b1(TSource)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source1.IQueryable_Expression, System.Linq.Queryable.GetSourceExpression$b1(TSource)(source2), System.Linq.Expressions.Expression.Constant$1(comparer, System.Collections.Generic.IEqualityComparer$b1.Of(TSource))])
			));
	}
);
System.Linq.Queryable.First$b1$0 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		return source.IQueryable_Provider.IQueryProvider_Execute$b1(TSource)(System.Linq.Expressions.Expression.Call$8(null, JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression])));
	}
);
System.Linq.Queryable.First$b1$1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, predicate) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (predicate === null) {
			throw $asm08.System.Core.Error.ArgumentNull("predicate");
		}
		return source.IQueryable_Provider.IQueryProvider_Execute$b1(TSource)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(predicate)])
			));
	}
);
System.Linq.Queryable.FirstOrDefault$b1$0 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		return source.IQueryable_Provider.IQueryProvider_Execute$b1(TSource)(System.Linq.Expressions.Expression.Call$8(null, JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression])));
	}
);
System.Linq.Queryable.FirstOrDefault$b1$1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, predicate) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (predicate === null) {
			throw $asm08.System.Core.Error.ArgumentNull("predicate");
		}
		return source.IQueryable_Provider.IQueryProvider_Execute$b1(TSource)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(predicate)])
			));
	}
);
System.Linq.Queryable.Last$b1$0 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		return source.IQueryable_Provider.IQueryProvider_Execute$b1(TSource)(System.Linq.Expressions.Expression.Call$8(null, JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression])));
	}
);
System.Linq.Queryable.Last$b1$1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, predicate) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (predicate === null) {
			throw $asm08.System.Core.Error.ArgumentNull("predicate");
		}
		return source.IQueryable_Provider.IQueryProvider_Execute$b1(TSource)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(predicate)])
			));
	}
);
System.Linq.Queryable.LastOrDefault$b1$0 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		return source.IQueryable_Provider.IQueryProvider_Execute$b1(TSource)(System.Linq.Expressions.Expression.Call$8(null, JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression])));
	}
);
System.Linq.Queryable.LastOrDefault$b1$1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, predicate) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (predicate === null) {
			throw $asm08.System.Core.Error.ArgumentNull("predicate");
		}
		return source.IQueryable_Provider.IQueryProvider_Execute$b1(TSource)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(predicate)])
			));
	}
);
System.Linq.Queryable.Single$b1$0 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		return source.IQueryable_Provider.IQueryProvider_Execute$b1(TSource)(System.Linq.Expressions.Expression.Call$8(null, JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression])));
	}
);
System.Linq.Queryable.Single$b1$1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, predicate) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (predicate === null) {
			throw $asm08.System.Core.Error.ArgumentNull("predicate");
		}
		return source.IQueryable_Provider.IQueryProvider_Execute$b1(TSource)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(predicate)])
			));
	}
);
System.Linq.Queryable.SingleOrDefault$b1$0 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		return source.IQueryable_Provider.IQueryProvider_Execute$b1(TSource)(System.Linq.Expressions.Expression.Call$8(null, JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression])));
	}
);
System.Linq.Queryable.SingleOrDefault$b1$1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, predicate) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (predicate === null) {
			throw $asm08.System.Core.Error.ArgumentNull("predicate");
		}
		return source.IQueryable_Provider.IQueryProvider_Execute$b1(TSource)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(predicate)])
			));
	}
);
System.Linq.Queryable.ElementAt$b1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, index) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (index < 0) {
			throw $asm08.System.Core.Error.ArgumentOutOfRange("index");
		}
		return source.IQueryable_Provider.IQueryProvider_Execute$b1(TSource)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Constant$0(index)])
			));
	}
);
System.Linq.Queryable.ElementAtOrDefault$b1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, index) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		return source.IQueryable_Provider.IQueryProvider_Execute$b1(TSource)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Constant$0(index)])
			));
	}
);
System.Linq.Queryable.DefaultIfEmpty$b1$0 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		return source.IQueryable_Provider.IQueryProvider_CreateQuery$b1(TSource)(System.Linq.Expressions.Expression.Call$8(null, JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression])));
	}
);
System.Linq.Queryable.DefaultIfEmpty$b1$1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, defaultValue) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		return source.IQueryable_Provider.IQueryProvider_CreateQuery$b1(TSource)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Constant$1(defaultValue, TSource)])
			));
	}
);
System.Linq.Queryable.Contains$b1$0 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, item) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		return source.IQueryable_Provider.IQueryProvider_Execute$b1(System.Boolean)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Constant$1(item, TSource)])
			));
	}
);
System.Linq.Queryable.Contains$b1$1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, item, comparer) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		return source.IQueryable_Provider.IQueryProvider_Execute$b1(System.Boolean)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Constant$1(item, TSource), System.Linq.Expressions.Expression.Constant$1(comparer, System.Collections.Generic.IEqualityComparer$b1.Of(TSource))])
			));
	}
);
System.Linq.Queryable.Reverse$b1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		return source.IQueryable_Provider.IQueryProvider_CreateQuery$b1(TSource)(System.Linq.Expressions.Expression.Call$8(null, JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression])));
	}
);
System.Linq.Queryable.SequenceEqual$b1$0 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source1, source2) {
		if (source1 === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source1");
		}
		if (source2 === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source2");
		}
		return source1.IQueryable_Provider.IQueryProvider_Execute$b1(System.Boolean)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source1.IQueryable_Expression, System.Linq.Queryable.GetSourceExpression$b1(TSource)(source2)])
			));
	}
);
System.Linq.Queryable.SequenceEqual$b1$1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source1, source2, comparer) {
		if (source1 === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source1");
		}
		if (source2 === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source2");
		}
		return source1.IQueryable_Provider.IQueryProvider_Execute$b1(System.Boolean)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source1.IQueryable_Expression, System.Linq.Queryable.GetSourceExpression$b1(TSource)(source2), System.Linq.Expressions.Expression.Constant$1(comparer, System.Collections.Generic.IEqualityComparer$b1.Of(TSource))])
			));
	}
);
System.Linq.Queryable.Any$b1$0 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		return source.IQueryable_Provider.IQueryProvider_Execute$b1(System.Boolean)(System.Linq.Expressions.Expression.Call$8(null, JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression])));
	}
);
System.Linq.Queryable.Any$b1$1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, predicate) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (predicate === null) {
			throw $asm08.System.Core.Error.ArgumentNull("predicate");
		}
		return source.IQueryable_Provider.IQueryProvider_Execute$b1(System.Boolean)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(predicate)])
			));
	}
);
System.Linq.Queryable.All$b1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, predicate) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (predicate === null) {
			throw $asm08.System.Core.Error.ArgumentNull("predicate");
		}
		return source.IQueryable_Provider.IQueryProvider_Execute$b1(System.Boolean)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(predicate)])
			));
	}
);
System.Linq.Queryable.Count$b1$0 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		return source.IQueryable_Provider.IQueryProvider_Execute$b1(System.Int32)(System.Linq.Expressions.Expression.Call$8(null, JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression])));
	}
);
System.Linq.Queryable.Count$b1$1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, predicate) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (predicate === null) {
			throw $asm08.System.Core.Error.ArgumentNull("predicate");
		}
		return source.IQueryable_Provider.IQueryProvider_Execute$b1(System.Int32)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(predicate)])
			));
	}
);
System.Linq.Queryable.LongCount$b1$0 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		return source.IQueryable_Provider.IQueryProvider_Execute$b1(System.Int64)(System.Linq.Expressions.Expression.Call$8(null, JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression])));
	}
);
System.Linq.Queryable.LongCount$b1$1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, predicate) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (predicate === null) {
			throw $asm08.System.Core.Error.ArgumentNull("predicate");
		}
		return source.IQueryable_Provider.IQueryProvider_Execute$b1(System.Int64)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(predicate)])
			));
	}
);
System.Linq.Queryable.Min$b1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		return source.IQueryable_Provider.IQueryProvider_Execute$b1(TSource)(System.Linq.Expressions.Expression.Call$8(null, JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression])));
	}
);
System.Linq.Queryable.Min$b2 = JSIL.GenericMethod(
	["TSource", "TResult"], 
	function (TSource, TResult, source, selector) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (selector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("selector");
		}
		return source.IQueryable_Provider.IQueryProvider_Execute$b1(TResult)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource, TResult])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(selector)])
			));
	}
);
System.Linq.Queryable.Max$b1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		return source.IQueryable_Provider.IQueryProvider_Execute$b1(TSource)(System.Linq.Expressions.Expression.Call$8(null, JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression])));
	}
);
System.Linq.Queryable.Max$b2 = JSIL.GenericMethod(
	["TSource", "TResult"], 
	function (TSource, TResult, source, selector) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (selector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("selector");
		}
		return source.IQueryable_Provider.IQueryProvider_Execute$b1(TResult)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource, TResult])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(selector)])
			));
	}
);
System.Linq.Queryable.Sum$0 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	return source.IQueryable_Provider.IQueryProvider_Execute$b1(System.Int32)(System.Linq.Expressions.Expression.Call$8(null, JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo), JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression])));
};
System.Linq.Queryable.Sum$1 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	return source.IQueryable_Provider.IQueryProvider_Execute$b1(System.Nullable$b1.Of(System.Int32))(System.Linq.Expressions.Expression.Call$8(null, JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo), JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression])));
};
System.Linq.Queryable.Sum$2 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	return source.IQueryable_Provider.IQueryProvider_Execute$b1(System.Int64)(System.Linq.Expressions.Expression.Call$8(null, JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo), JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression])));
};
System.Linq.Queryable.Sum$3 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	return source.IQueryable_Provider.IQueryProvider_Execute$b1(System.Nullable$b1.Of(System.Int64))(System.Linq.Expressions.Expression.Call$8(null, JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo), JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression])));
};
System.Linq.Queryable.Sum$4 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	return source.IQueryable_Provider.IQueryProvider_Execute$b1(System.Single)(System.Linq.Expressions.Expression.Call$8(null, JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo), JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression])));
};
System.Linq.Queryable.Sum$5 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	return source.IQueryable_Provider.IQueryProvider_Execute$b1(System.Nullable$b1.Of(System.Single))(System.Linq.Expressions.Expression.Call$8(null, JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo), JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression])));
};
System.Linq.Queryable.Sum$6 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	return source.IQueryable_Provider.IQueryProvider_Execute$b1(System.Double)(System.Linq.Expressions.Expression.Call$8(null, JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo), JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression])));
};
System.Linq.Queryable.Sum$7 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	return source.IQueryable_Provider.IQueryProvider_Execute$b1(System.Nullable$b1.Of(System.Double))(System.Linq.Expressions.Expression.Call$8(null, JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo), JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression])));
};
System.Linq.Queryable.Sum$8 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	return source.IQueryable_Provider.IQueryProvider_Execute$b1(System.Decimal)(System.Linq.Expressions.Expression.Call$8(null, JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo), JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression])));
};
System.Linq.Queryable.Sum$9 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	return source.IQueryable_Provider.IQueryProvider_Execute$b1(System.Nullable$b1.Of(System.Decimal))(System.Linq.Expressions.Expression.Call$8(null, JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo), JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression])));
};
System.Linq.Queryable.Sum$b1$0 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (selector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("selector");
		}
		return source.IQueryable_Provider.IQueryProvider_Execute$b1(System.Int32)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(selector)])
			));
	}
);
System.Linq.Queryable.Sum$b1$1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (selector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("selector");
		}
		return source.IQueryable_Provider.IQueryProvider_Execute$b1(System.Nullable$b1.Of(System.Int32))(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(selector)])
			));
	}
);
System.Linq.Queryable.Sum$b1$2 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (selector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("selector");
		}
		return source.IQueryable_Provider.IQueryProvider_Execute$b1(System.Int64)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(selector)])
			));
	}
);
System.Linq.Queryable.Sum$b1$3 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (selector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("selector");
		}
		return source.IQueryable_Provider.IQueryProvider_Execute$b1(System.Nullable$b1.Of(System.Int64))(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(selector)])
			));
	}
);
System.Linq.Queryable.Sum$b1$4 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (selector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("selector");
		}
		return source.IQueryable_Provider.IQueryProvider_Execute$b1(System.Single)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(selector)])
			));
	}
);
System.Linq.Queryable.Sum$b1$5 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (selector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("selector");
		}
		return source.IQueryable_Provider.IQueryProvider_Execute$b1(System.Nullable$b1.Of(System.Single))(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(selector)])
			));
	}
);
System.Linq.Queryable.Sum$b1$6 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (selector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("selector");
		}
		return source.IQueryable_Provider.IQueryProvider_Execute$b1(System.Double)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(selector)])
			));
	}
);
System.Linq.Queryable.Sum$b1$7 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (selector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("selector");
		}
		return source.IQueryable_Provider.IQueryProvider_Execute$b1(System.Nullable$b1.Of(System.Double))(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(selector)])
			));
	}
);
System.Linq.Queryable.Sum$b1$8 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (selector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("selector");
		}
		return source.IQueryable_Provider.IQueryProvider_Execute$b1(System.Decimal)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(selector)])
			));
	}
);
System.Linq.Queryable.Sum$b1$9 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (selector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("selector");
		}
		return source.IQueryable_Provider.IQueryProvider_Execute$b1(System.Nullable$b1.Of(System.Decimal))(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(selector)])
			));
	}
);
System.Linq.Queryable.Average$0 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	return source.IQueryable_Provider.IQueryProvider_Execute$b1(System.Double)(System.Linq.Expressions.Expression.Call$8(null, JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo), JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression])));
};
System.Linq.Queryable.Average$1 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	return source.IQueryable_Provider.IQueryProvider_Execute$b1(System.Nullable$b1.Of(System.Double))(System.Linq.Expressions.Expression.Call$8(null, JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo), JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression])));
};
System.Linq.Queryable.Average$2 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	return source.IQueryable_Provider.IQueryProvider_Execute$b1(System.Double)(System.Linq.Expressions.Expression.Call$8(null, JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo), JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression])));
};
System.Linq.Queryable.Average$3 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	return source.IQueryable_Provider.IQueryProvider_Execute$b1(System.Nullable$b1.Of(System.Double))(System.Linq.Expressions.Expression.Call$8(null, JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo), JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression])));
};
System.Linq.Queryable.Average$4 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	return source.IQueryable_Provider.IQueryProvider_Execute$b1(System.Single)(System.Linq.Expressions.Expression.Call$8(null, JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo), JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression])));
};
System.Linq.Queryable.Average$5 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	return source.IQueryable_Provider.IQueryProvider_Execute$b1(System.Nullable$b1.Of(System.Single))(System.Linq.Expressions.Expression.Call$8(null, JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo), JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression])));
};
System.Linq.Queryable.Average$6 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	return source.IQueryable_Provider.IQueryProvider_Execute$b1(System.Double)(System.Linq.Expressions.Expression.Call$8(null, JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo), JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression])));
};
System.Linq.Queryable.Average$7 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	return source.IQueryable_Provider.IQueryProvider_Execute$b1(System.Nullable$b1.Of(System.Double))(System.Linq.Expressions.Expression.Call$8(null, JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo), JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression])));
};
System.Linq.Queryable.Average$8 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	return source.IQueryable_Provider.IQueryProvider_Execute$b1(System.Decimal)(System.Linq.Expressions.Expression.Call$8(null, JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo), JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression])));
};
System.Linq.Queryable.Average$9 = function (source) {
	if (source === null) {
		throw $asm08.System.Core.Error.ArgumentNull("source");
	}
	return source.IQueryable_Provider.IQueryProvider_Execute$b1(System.Nullable$b1.Of(System.Decimal))(System.Linq.Expressions.Expression.Call$8(null, JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo), JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression])));
};
System.Linq.Queryable.Average$b1$0 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (selector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("selector");
		}
		return source.IQueryable_Provider.IQueryProvider_Execute$b1(System.Double)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(selector)])
			));
	}
);
System.Linq.Queryable.Average$b1$1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (selector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("selector");
		}
		return source.IQueryable_Provider.IQueryProvider_Execute$b1(System.Nullable$b1.Of(System.Double))(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(selector)])
			));
	}
);
System.Linq.Queryable.Average$b1$2 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (selector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("selector");
		}
		return source.IQueryable_Provider.IQueryProvider_Execute$b1(System.Single)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(selector)])
			));
	}
);
System.Linq.Queryable.Average$b1$3 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (selector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("selector");
		}
		return source.IQueryable_Provider.IQueryProvider_Execute$b1(System.Nullable$b1.Of(System.Single))(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(selector)])
			));
	}
);
System.Linq.Queryable.Average$b1$4 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (selector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("selector");
		}
		return source.IQueryable_Provider.IQueryProvider_Execute$b1(System.Double)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(selector)])
			));
	}
);
System.Linq.Queryable.Average$b1$5 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (selector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("selector");
		}
		return source.IQueryable_Provider.IQueryProvider_Execute$b1(System.Nullable$b1.Of(System.Double))(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(selector)])
			));
	}
);
System.Linq.Queryable.Average$b1$6 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (selector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("selector");
		}
		return source.IQueryable_Provider.IQueryProvider_Execute$b1(System.Double)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(selector)])
			));
	}
);
System.Linq.Queryable.Average$b1$7 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (selector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("selector");
		}
		return source.IQueryable_Provider.IQueryProvider_Execute$b1(System.Nullable$b1.Of(System.Double))(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(selector)])
			));
	}
);
System.Linq.Queryable.Average$b1$8 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (selector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("selector");
		}
		return source.IQueryable_Provider.IQueryProvider_Execute$b1(System.Decimal)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(selector)])
			));
	}
);
System.Linq.Queryable.Average$b1$9 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, selector) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (selector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("selector");
		}
		return source.IQueryable_Provider.IQueryProvider_Execute$b1(System.Nullable$b1.Of(System.Decimal))(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(selector)])
			));
	}
);
System.Linq.Queryable.Aggregate$b1 = JSIL.GenericMethod(
	["TSource"], 
	function (TSource, source, func) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (func === null) {
			throw $asm08.System.Core.Error.ArgumentNull("func");
		}
		return source.IQueryable_Provider.IQueryProvider_Execute$b1(TSource)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Quote(func)])
			));
	}
);
System.Linq.Queryable.Aggregate$b2 = JSIL.GenericMethod(
	["TSource", "TAccumulate"], 
	function (TSource, TAccumulate, source, seed, func) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (func === null) {
			throw $asm08.System.Core.Error.ArgumentNull("func");
		}
		return source.IQueryable_Provider.IQueryProvider_Execute$b1(TAccumulate)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource, TAccumulate])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Constant$0(seed), System.Linq.Expressions.Expression.Quote(func)])
			));
	}
);
System.Linq.Queryable.Aggregate$b3 = JSIL.GenericMethod(
	["TSource", "TAccumulate", "TResult"], 
	function (TSource, TAccumulate, TResult, source, seed, func, selector) {
		if (source === null) {
			throw $asm08.System.Core.Error.ArgumentNull("source");
		}
		if (func === null) {
			throw $asm08.System.Core.Error.ArgumentNull("func");
		}
		if (selector === null) {
			throw $asm08.System.Core.Error.ArgumentNull("selector");
		}
		return source.IQueryable_Provider.IQueryProvider_Execute$b1(TResult)(System.Linq.Expressions.Expression.Call$8(
				null, 
				JSIL.Cast(System.Reflection.MethodBase.GetCurrentMethod(), System.Reflection.MethodInfo).MakeGenericMethod(JSIL.Array.New(System.Type, [TSource, TAccumulate, TResult])), 
				JSIL.Array.New(System.Linq.Expressions.Expression, [source.IQueryable_Expression, System.Linq.Expressions.Expression.Constant$0(seed), System.Linq.Expressions.Expression.Quote(func), System.Linq.Expressions.Expression.Quote(selector)])
			));
	}
);
JSIL.OverloadedGenericMethod(System.Linq.Queryable, "Where$b1", [
		["Where$b1$0", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, System.Boolean))]], 
		["Where$b1$1", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b3.Of(JSIL.AnyType, System.Int32, System.Boolean))]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Queryable, "Select$b2", [
		["Select$b2$0", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType))]], 
		["Select$b2$1", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b3.Of(JSIL.AnyType, System.Int32, JSIL.AnyType))]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Queryable, "SelectMany$b2", [
		["SelectMany$b2$0", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType)))]], 
		["SelectMany$b2$1", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b3.Of(JSIL.AnyType, System.Int32, System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType)))]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Queryable, "SelectMany$b3", [
		["SelectMany$b3$0", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b3.Of(JSIL.AnyType, System.Int32, System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType))), System.Linq.Expressions.Expression$b1.Of(System.Func$b3.Of(JSIL.AnyType, JSIL.AnyType, JSIL.AnyType))]], 
		["SelectMany$b3$1", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType))), System.Linq.Expressions.Expression$b1.Of(System.Func$b3.Of(JSIL.AnyType, JSIL.AnyType, JSIL.AnyType))]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Queryable, "Join$b4", [
		["Join$b4$0", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType)), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType)), System.Linq.Expressions.Expression$b1.Of(System.Func$b3.Of(JSIL.AnyType, JSIL.AnyType, JSIL.AnyType))]], 
		["Join$b4$1", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType)), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType)), System.Linq.Expressions.Expression$b1.Of(System.Func$b3.Of(JSIL.AnyType, JSIL.AnyType, JSIL.AnyType)), System.Collections.Generic.IEqualityComparer$b1.Of(JSIL.AnyType)]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Queryable, "GroupJoin$b4", [
		["GroupJoin$b4$0", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType)), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType)), System.Linq.Expressions.Expression$b1.Of(System.Func$b3.Of(JSIL.AnyType, System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), JSIL.AnyType))]], 
		["GroupJoin$b4$1", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType)), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType)), System.Linq.Expressions.Expression$b1.Of(System.Func$b3.Of(JSIL.AnyType, System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), JSIL.AnyType)), System.Collections.Generic.IEqualityComparer$b1.Of(JSIL.AnyType)]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Queryable, "OrderBy$b2", [
		["OrderBy$b2$0", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType))]], 
		["OrderBy$b2$1", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType)), System.Collections.Generic.IComparer$b1.Of(JSIL.AnyType)]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Queryable, "OrderByDescending$b2", [
		["OrderByDescending$b2$0", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType))]], 
		["OrderByDescending$b2$1", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType)), System.Collections.Generic.IComparer$b1.Of(JSIL.AnyType)]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Queryable, "ThenBy$b2", [
		["ThenBy$b2$0", [System.Linq.IOrderedQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType))]], 
		["ThenBy$b2$1", [System.Linq.IOrderedQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType)), System.Collections.Generic.IComparer$b1.Of(JSIL.AnyType)]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Queryable, "ThenByDescending$b2", [
		["ThenByDescending$b2$0", [System.Linq.IOrderedQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType))]], 
		["ThenByDescending$b2$1", [System.Linq.IOrderedQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType)), System.Collections.Generic.IComparer$b1.Of(JSIL.AnyType)]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Queryable, "TakeWhile$b1", [
		["TakeWhile$b1$0", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, System.Boolean))]], 
		["TakeWhile$b1$1", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b3.Of(JSIL.AnyType, System.Int32, System.Boolean))]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Queryable, "SkipWhile$b1", [
		["SkipWhile$b1$0", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, System.Boolean))]], 
		["SkipWhile$b1$1", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b3.Of(JSIL.AnyType, System.Int32, System.Boolean))]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Queryable, "GroupBy$b2", [
		["GroupBy$b2$0", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType))]], 
		["GroupBy$b2$1", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType)), System.Collections.Generic.IEqualityComparer$b1.Of(JSIL.AnyType)]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Queryable, "GroupBy$b3", [
		["GroupBy$b3$0", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType)), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType))]], 
		["GroupBy$b3$1", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType)), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType)), System.Collections.Generic.IEqualityComparer$b1.Of(JSIL.AnyType)]], 
		["GroupBy$b3$2", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType)), System.Linq.Expressions.Expression$b1.Of(System.Func$b3.Of(JSIL.AnyType, System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), JSIL.AnyType))]], 
		["GroupBy$b3$3", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType)), System.Linq.Expressions.Expression$b1.Of(System.Func$b3.Of(JSIL.AnyType, System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), JSIL.AnyType)), System.Collections.Generic.IEqualityComparer$b1.Of(JSIL.AnyType)]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Queryable, "GroupBy$b4", [
		["GroupBy$b4$0", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType)), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType)), System.Linq.Expressions.Expression$b1.Of(System.Func$b3.Of(JSIL.AnyType, System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), JSIL.AnyType))]], 
		["GroupBy$b4$1", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType)), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, JSIL.AnyType)), System.Linq.Expressions.Expression$b1.Of(System.Func$b3.Of(JSIL.AnyType, System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), JSIL.AnyType)), System.Collections.Generic.IEqualityComparer$b1.Of(JSIL.AnyType)]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Queryable, "Distinct$b1", [
		["Distinct$b1$0", [System.Linq.IQueryable$b1.Of(JSIL.AnyType)]], 
		["Distinct$b1$1", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Collections.Generic.IEqualityComparer$b1.Of(JSIL.AnyType)]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Queryable, "Union$b1", [
		["Union$b1$0", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType)]], 
		["Union$b1$1", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Collections.Generic.IEqualityComparer$b1.Of(JSIL.AnyType)]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Queryable, "Intersect$b1", [
		["Intersect$b1$0", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType)]], 
		["Intersect$b1$1", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Collections.Generic.IEqualityComparer$b1.Of(JSIL.AnyType)]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Queryable, "Except$b1", [
		["Except$b1$0", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType)]], 
		["Except$b1$1", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Collections.Generic.IEqualityComparer$b1.Of(JSIL.AnyType)]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Queryable, "First$b1", [
		["First$b1$0", [System.Linq.IQueryable$b1.Of(JSIL.AnyType)]], 
		["First$b1$1", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, System.Boolean))]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Queryable, "FirstOrDefault$b1", [
		["FirstOrDefault$b1$0", [System.Linq.IQueryable$b1.Of(JSIL.AnyType)]], 
		["FirstOrDefault$b1$1", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, System.Boolean))]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Queryable, "Last$b1", [
		["Last$b1$0", [System.Linq.IQueryable$b1.Of(JSIL.AnyType)]], 
		["Last$b1$1", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, System.Boolean))]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Queryable, "LastOrDefault$b1", [
		["LastOrDefault$b1$0", [System.Linq.IQueryable$b1.Of(JSIL.AnyType)]], 
		["LastOrDefault$b1$1", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, System.Boolean))]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Queryable, "Single$b1", [
		["Single$b1$0", [System.Linq.IQueryable$b1.Of(JSIL.AnyType)]], 
		["Single$b1$1", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, System.Boolean))]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Queryable, "SingleOrDefault$b1", [
		["SingleOrDefault$b1$0", [System.Linq.IQueryable$b1.Of(JSIL.AnyType)]], 
		["SingleOrDefault$b1$1", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, System.Boolean))]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Queryable, "DefaultIfEmpty$b1", [
		["DefaultIfEmpty$b1$0", [System.Linq.IQueryable$b1.Of(JSIL.AnyType)]], 
		["DefaultIfEmpty$b1$1", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), JSIL.AnyType]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Queryable, "Contains$b1", [
		["Contains$b1$0", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), JSIL.AnyType]], 
		["Contains$b1$1", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), JSIL.AnyType, System.Collections.Generic.IEqualityComparer$b1.Of(JSIL.AnyType)]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Queryable, "SequenceEqual$b1", [
		["SequenceEqual$b1$0", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType)]], 
		["SequenceEqual$b1$1", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType), System.Collections.Generic.IEqualityComparer$b1.Of(JSIL.AnyType)]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Queryable, "Any$b1", [
		["Any$b1$0", [System.Linq.IQueryable$b1.Of(JSIL.AnyType)]], 
		["Any$b1$1", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, System.Boolean))]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Queryable, "Count$b1", [
		["Count$b1$0", [System.Linq.IQueryable$b1.Of(JSIL.AnyType)]], 
		["Count$b1$1", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, System.Boolean))]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Queryable, "LongCount$b1", [
		["LongCount$b1$0", [System.Linq.IQueryable$b1.Of(JSIL.AnyType)]], 
		["LongCount$b1$1", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, System.Boolean))]]
	]);
JSIL.OverloadedMethod(System.Linq.Queryable, "Sum", [
		["Sum$0", [System.Linq.IQueryable$b1.Of(System.Int32)]], 
		["Sum$1", [System.Linq.IQueryable$b1.Of(System.Nullable$b1.Of(System.Int32))]], 
		["Sum$2", [System.Linq.IQueryable$b1.Of(System.Int64)]], 
		["Sum$3", [System.Linq.IQueryable$b1.Of(System.Nullable$b1.Of(System.Int64))]], 
		["Sum$4", [System.Linq.IQueryable$b1.Of(System.Single)]], 
		["Sum$5", [System.Linq.IQueryable$b1.Of(System.Nullable$b1.Of(System.Single))]], 
		["Sum$6", [System.Linq.IQueryable$b1.Of(System.Double)]], 
		["Sum$7", [System.Linq.IQueryable$b1.Of(System.Nullable$b1.Of(System.Double))]], 
		["Sum$8", [System.Linq.IQueryable$b1.Of(System.Decimal)]], 
		["Sum$9", [System.Linq.IQueryable$b1.Of(System.Nullable$b1.Of(System.Decimal))]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Queryable, "Sum$b1", [
		["Sum$b1$0", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, System.Int32))]], 
		["Sum$b1$1", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, System.Nullable$b1.Of(System.Int32)))]], 
		["Sum$b1$2", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, System.Int64))]], 
		["Sum$b1$3", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, System.Nullable$b1.Of(System.Int64)))]], 
		["Sum$b1$4", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, System.Single))]], 
		["Sum$b1$5", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, System.Nullable$b1.Of(System.Single)))]], 
		["Sum$b1$6", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, System.Double))]], 
		["Sum$b1$7", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, System.Nullable$b1.Of(System.Double)))]], 
		["Sum$b1$8", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, System.Decimal))]], 
		["Sum$b1$9", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, System.Nullable$b1.Of(System.Decimal)))]]
	]);
JSIL.OverloadedMethod(System.Linq.Queryable, "Average", [
		["Average$0", [System.Linq.IQueryable$b1.Of(System.Int32)]], 
		["Average$1", [System.Linq.IQueryable$b1.Of(System.Nullable$b1.Of(System.Int32))]], 
		["Average$2", [System.Linq.IQueryable$b1.Of(System.Int64)]], 
		["Average$3", [System.Linq.IQueryable$b1.Of(System.Nullable$b1.Of(System.Int64))]], 
		["Average$4", [System.Linq.IQueryable$b1.Of(System.Single)]], 
		["Average$5", [System.Linq.IQueryable$b1.Of(System.Nullable$b1.Of(System.Single))]], 
		["Average$6", [System.Linq.IQueryable$b1.Of(System.Double)]], 
		["Average$7", [System.Linq.IQueryable$b1.Of(System.Nullable$b1.Of(System.Double))]], 
		["Average$8", [System.Linq.IQueryable$b1.Of(System.Decimal)]], 
		["Average$9", [System.Linq.IQueryable$b1.Of(System.Nullable$b1.Of(System.Decimal))]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Queryable, "Average$b1", [
		["Average$b1$0", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, System.Int32))]], 
		["Average$b1$1", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, System.Nullable$b1.Of(System.Int32)))]], 
		["Average$b1$2", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, System.Single))]], 
		["Average$b1$3", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, System.Nullable$b1.Of(System.Single)))]], 
		["Average$b1$4", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, System.Int64))]], 
		["Average$b1$5", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, System.Nullable$b1.Of(System.Int64)))]], 
		["Average$b1$6", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, System.Double))]], 
		["Average$b1$7", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, System.Nullable$b1.Of(System.Double)))]], 
		["Average$b1$8", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, System.Decimal))]], 
		["Average$b1$9", [System.Linq.IQueryable$b1.Of(JSIL.AnyType), System.Linq.Expressions.Expression$b1.Of(System.Func$b2.Of(JSIL.AnyType, System.Nullable$b1.Of(System.Decimal)))]]
	]);

System.Linq.EnumerableQuery.Create$0 = function (elementType, sequence) {
	var type = System.Linq.EnumerableQuery$b1.MakeGenericType(JSIL.Array.New(System.Type, [elementType]));
	return JSIL.Cast(System.Activator.CreateInstance$2(type, [sequence]), System.Linq.IQueryable);
};
System.Linq.EnumerableQuery.Create$1 = function (elementType, expression) {
	var type = System.Linq.EnumerableQuery$b1.MakeGenericType(JSIL.Array.New(System.Type, [elementType]));
	return JSIL.Cast(System.Activator.CreateInstance$2(type, [expression]), System.Linq.IQueryable);
};
System.Linq.EnumerableQuery.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
JSIL.OverloadedMethod(System.Linq.EnumerableQuery, "Create", [
		["Create$0", [System.Type, System.Collections.IEnumerable]], 
		["Create$1", [System.Type, System.Linq.Expressions.Expression]]
	]);
JSIL.MakeProperty(System.Linq.EnumerableQuery.prototype, "Expression", 
	System.Linq.EnumerableQuery.prototype.get_Expression, null);
JSIL.MakeProperty(System.Linq.EnumerableQuery.prototype, "Enumerable", 
	System.Linq.EnumerableQuery.prototype.get_Enumerable, null);

System.Linq.EnumerableQuery$b1.prototype.IQueryable_get_Provider = function () {
	return this;
};
System.Linq.EnumerableQuery$b1.prototype._ctor$0 = function (enumerable) {
	System.Linq.EnumerableQuery.prototype._ctor.call(this);
	this.enumerable = enumerable;
	this.expression = System.Linq.Expressions.Expression.Constant$0(this);
};
System.Linq.EnumerableQuery$b1.prototype._ctor$1 = function (expression) {
	System.Linq.EnumerableQuery.prototype._ctor.call(this);
	this.expression = expression;
};
System.Linq.EnumerableQuery$b1.prototype.get_Expression = function () {
	return this.expression;
};
System.Linq.EnumerableQuery$b1.prototype.get_Enumerable = function () {
	return this.enumerable;
};
System.Linq.EnumerableQuery$b1.prototype.IQueryable_get_Expression = function () {
	return this.expression;
};
System.Linq.EnumerableQuery$b1.prototype.IQueryable_get_ElementType = function () {
	return this.T;
};
System.Linq.EnumerableQuery$b1.prototype.IQueryProvider_CreateQuery = function (expression) {
	if (expression === null) {
		throw $asm08.System.Core.Error.ArgumentNull("expression");
	}
	var type = $asm08.System.Linq.TypeHelper.FindGenericType(System.Linq.IQueryable$b1, expression.Type);
	if (type === null) {
		throw $asm08.System.Core.Error.ArgumentNotValid("expression");
	}
	return System.Linq.EnumerableQuery.Create$1(type.GetGenericArguments()[0], expression);
};
System.Linq.EnumerableQuery$b1.prototype.IQueryProvider_CreateQuery$b1 = JSIL.GenericMethod(
	["S"], 
	function (S, expression) {
		if (expression === null) {
			throw $asm08.System.Core.Error.ArgumentNull("expression");
		}
		if (!System.Linq.IQueryable$b1.Of(S).IsAssignableFrom(expression.Type)) {
			throw $asm08.System.Core.Error.ArgumentNotValid("expression");
		}
		return JSIL.New(System.Linq.EnumerableQuery$b1.Of(S), "_ctor$1", [expression]);
	}
);
System.Linq.EnumerableQuery$b1.prototype.IQueryProvider_Execute = function (expression) {
	if (expression === null) {
		throw $asm08.System.Core.Error.ArgumentNull("expression");
	}
	System.Linq.EnumerableExecutor$b1.MakeGenericType(JSIL.Array.New(System.Type, [expression.Type]));
	return System.Linq.EnumerableExecutor.Create(expression).ExecuteBoxed();
};
System.Linq.EnumerableQuery$b1.prototype.IQueryProvider_Execute$b1 = JSIL.GenericMethod(
	["S"], 
	function (S, expression) {
		if (expression === null) {
			throw $asm08.System.Core.Error.ArgumentNull("expression");
		}
		if (!S.IsAssignableFrom(expression.Type)) {
			throw $asm08.System.Core.Error.ArgumentNotValid("expression");
		}
		return new (System.Linq.EnumerableExecutor$b1.Of(S)) (expression).Execute();
	}
);
System.Linq.EnumerableQuery$b1.prototype.IEnumerable_GetEnumerator = function () {
	return this.GetEnumerator();
};
System.Linq.EnumerableQuery$b1.prototype.IEnumerable$b1_GetEnumerator = function () {
	return this.GetEnumerator();
};
System.Linq.EnumerableQuery$b1.prototype.GetEnumerator = function () {
	if (this.enumerable === null) {
		var enumerableRewriter = new $asm08.System.Linq.EnumerableRewriter();
		var body = enumerableRewriter.Visit(this.expression);
		var expression = System.Linq.Expressions.Expression.Lambda$b1$2(System.Func$b1.Of(System.Collections.Generic.IEnumerable$b1.Of(this.T)))(body, null);
		this.enumerable = expression.Compile$0()();
	}
	return this.enumerable.IEnumerable$b1_GetEnumerator();
};
System.Linq.EnumerableQuery$b1.prototype.toString = function () {
	var constantExpression = JSIL.TryCast(this.expression, System.Linq.Expressions.ConstantExpression);
	if ((constantExpression === null) || (constantExpression.Value !== this)) {
		return this.expression.toString();
	}
	if (this.enumerable !== null) {
		return this.enumerable.toString();
	}
	return "null";
};
JSIL.OverloadedMethod(System.Linq.EnumerableQuery$b1.prototype, "_ctor", [
		["_ctor$0", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType)]], 
		["_ctor$1", [System.Linq.Expressions.Expression]]
	]);
JSIL.MakeProperty(System.Linq.EnumerableQuery$b1.prototype, "IQueryable_Provider", 
	System.Linq.EnumerableQuery$b1.prototype.IQueryable_get_Provider, null);
JSIL.MakeProperty(System.Linq.EnumerableQuery$b1.prototype, "Expression", 
	System.Linq.EnumerableQuery$b1.prototype.get_Expression, null);
JSIL.MakeProperty(System.Linq.EnumerableQuery$b1.prototype, "Enumerable", 
	System.Linq.EnumerableQuery$b1.prototype.get_Enumerable, null);
JSIL.MakeProperty(System.Linq.EnumerableQuery$b1.prototype, "IQueryable_Expression", 
	System.Linq.EnumerableQuery$b1.prototype.IQueryable_get_Expression, null);
JSIL.MakeProperty(System.Linq.EnumerableQuery$b1.prototype, "IQueryable_ElementType", 
	System.Linq.EnumerableQuery$b1.prototype.IQueryable_get_ElementType, null);
System.Linq.EnumerableQuery$b1.prototype.expression = null;
System.Linq.EnumerableQuery$b1.prototype.enumerable = null;

System.Linq.EnumerableExecutor.Create = function (expression) {
	var type = System.Linq.EnumerableExecutor$b1.MakeGenericType(JSIL.Array.New(System.Type, [expression.Type]));
	return JSIL.Cast(System.Activator.CreateInstance$2(type, [expression]), System.Linq.EnumerableExecutor);
};
System.Linq.EnumerableExecutor.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};

System.Linq.EnumerableExecutor$b1.prototype._ctor = function (expression) {
	System.Linq.EnumerableExecutor.prototype._ctor.call(this);
	this.expression = expression;
};
System.Linq.EnumerableExecutor$b1.prototype.ExecuteBoxed = function () {
	return this.Execute();
};
System.Linq.EnumerableExecutor$b1.prototype.Execute = function () {
	if (this.func === null) {
		var enumerableRewriter = new $asm08.System.Linq.EnumerableRewriter();
		var body = enumerableRewriter.Visit(this.expression);
		var expression = System.Linq.Expressions.Expression.Lambda$b1$2(System.Func$b1.Of(this.T))(body, null);
		this.func = expression.Compile$0();
	}
	return this.func();
};
System.Linq.EnumerableExecutor$b1.prototype.expression = null;
System.Linq.EnumerableExecutor$b1.prototype.func = null;

$asm08.System.Linq.Expressions.OldExpressionVisitor.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm08.System.Linq.Expressions.OldExpressionVisitor.prototype.Visit = function (exp) {
	if (exp === null) {
		return exp;
	}
	switch (Number(exp.NodeType)) {
		case 0: 
		case 1: 
		case 2: 
		case 3: 
		case 5: 
		case 7: 
		case 12: 
		case 13: 
		case 14: 
		case 15: 
		case 16: 
		case 19: 
		case 20: 
		case 21: 
		case 25: 
		case 26: 
		case 27: 
		case 35: 
		case 36: 
		case 37: 
		case 39: 
		case 41: 
		case 42: 
		case 43: 
			return this.VisitBinary(JSIL.Cast(exp, System.Linq.Expressions.BinaryExpression));
		case 4: 
		case 10: 
		case 11: 
		case 28: 
		case 29: 
		case 30: 
		case 34: 
		case 40: 
		case 44: 
			return this.VisitUnary(JSIL.Cast(exp, System.Linq.Expressions.UnaryExpression));
		case 6: 
			return this.VisitMethodCall(JSIL.Cast(exp, System.Linq.Expressions.MethodCallExpression));
		case 8: 
			return this.VisitConditional(JSIL.Cast(exp, System.Linq.Expressions.ConditionalExpression));
		case 9: 
			return this.VisitConstant(JSIL.Cast(exp, System.Linq.Expressions.ConstantExpression));
		case 17: 
			return this.VisitInvocation(JSIL.Cast(exp, System.Linq.Expressions.InvocationExpression));
		case 18: 
			return this.VisitLambda(JSIL.Cast(exp, System.Linq.Expressions.LambdaExpression));
		case 22: 
			return this.VisitListInit(JSIL.Cast(exp, System.Linq.Expressions.ListInitExpression));
		case 23: 
			return this.VisitMemberAccess(JSIL.Cast(exp, System.Linq.Expressions.MemberExpression));
		case 24: 
			return this.VisitMemberInit(JSIL.Cast(exp, System.Linq.Expressions.MemberInitExpression));
		case 31: 
			return this.VisitNew(JSIL.Cast(exp, System.Linq.Expressions.NewExpression));
		case 32: 
		case 33: 
			return this.VisitNewArray(JSIL.Cast(exp, System.Linq.Expressions.NewArrayExpression));
		case 38: 
			return this.VisitParameter(JSIL.Cast(exp, System.Linq.Expressions.ParameterExpression));
		case 45: 
			return this.VisitTypeIs(JSIL.Cast(exp, System.Linq.Expressions.TypeBinaryExpression));
		default: 
			throw $asm08.System.Core.Error.UnhandledExpressionType(exp.NodeType);
	}
};
$asm08.System.Linq.Expressions.OldExpressionVisitor.prototype.VisitBinding = function (binding) {
	switch (Number(binding.BindingType)) {
		case 0: 
			return this.VisitMemberAssignment(JSIL.Cast(binding, System.Linq.Expressions.MemberAssignment));
		case 1: 
			return this.VisitMemberMemberBinding(JSIL.Cast(binding, System.Linq.Expressions.MemberMemberBinding));
		case 2: 
			return this.VisitMemberListBinding(JSIL.Cast(binding, System.Linq.Expressions.MemberListBinding));
		default: 
			throw $asm08.System.Core.Error.UnhandledBindingType(binding.BindingType);
	}
};
$asm08.System.Linq.Expressions.OldExpressionVisitor.prototype.VisitElementInitializer = function (initializer) {
	var readOnlyCollection = this.VisitExpressionList(initializer.Arguments);
	if (readOnlyCollection !== initializer.Arguments) {
		return System.Linq.Expressions.Expression.ElementInit$1(initializer.AddMethod, readOnlyCollection);
	}
	return initializer;
};
$asm08.System.Linq.Expressions.OldExpressionVisitor.prototype.VisitUnary = function (u) {
	var expression = this.Visit(u.Operand);
	if (expression !== u.Operand) {
		return System.Linq.Expressions.Expression.MakeUnary$1(u.NodeType, expression, u.Type, u.Method);
	}
	return u;
};
$asm08.System.Linq.Expressions.OldExpressionVisitor.prototype.VisitBinary = function (b) {
	var expression = this.Visit(b.Left);
	var expression2 = this.Visit(b.Right);
	var expression3 = this.Visit(b.Conversion);
	if ((expression === b.Left) && 
		(expression2 === b.Right) && (expression3 === b.Conversion)) {
		return b;
	}
	if (!((b.NodeType !== System.Linq.Expressions.ExpressionType.Coalesce) || (b.Conversion === null))) {
		return System.Linq.Expressions.Expression.Coalesce$1(expression, expression2, JSIL.TryCast(expression3, System.Linq.Expressions.LambdaExpression));
	}
	return System.Linq.Expressions.Expression.MakeBinary$1(
		b.NodeType, 
		expression, 
		expression2, 
		b.IsLiftedToNull, 
		b.Method
	);
};
$asm08.System.Linq.Expressions.OldExpressionVisitor.prototype.VisitTypeIs = function (b) {
	var expression = this.Visit(b.Expression);
	if (expression !== b.Expression) {
		return System.Linq.Expressions.Expression.TypeIs(expression, b.TypeOperand);
	}
	return b;
};
$asm08.System.Linq.Expressions.OldExpressionVisitor.prototype.VisitConstant = function (c) {
	return c;
};
$asm08.System.Linq.Expressions.OldExpressionVisitor.prototype.VisitConditional = function (c) {
	var expression = this.Visit(c.Test);
	var expression2 = this.Visit(c.IfTrue);
	var expression3 = this.Visit(c.IfFalse);
	if (!((expression === c.Test) && 
			(expression2 === c.IfTrue) && (expression3 === c.IfFalse))) {
		return System.Linq.Expressions.Expression.Condition$0(expression, expression2, expression3);
	}
	return c;
};
$asm08.System.Linq.Expressions.OldExpressionVisitor.prototype.VisitParameter = function (p) {
	return p;
};
$asm08.System.Linq.Expressions.OldExpressionVisitor.prototype.VisitMemberAccess = function (m) {
	var expression = this.Visit(m.Expression);
	if (expression !== m.Expression) {
		return System.Linq.Expressions.Expression.MakeMemberAccess(expression, m.Member);
	}
	return m;
};
$asm08.System.Linq.Expressions.OldExpressionVisitor.prototype.VisitMethodCall = function (m) {
	var expression = this.Visit(m.Object);
	var enumerable = this.VisitExpressionList(m.Arguments);
	if (!((expression === m.Object) && (enumerable === m.Arguments))) {
		return System.Linq.Expressions.Expression.Call$13(expression, m.Method, enumerable);
	}
	return m;
};
$asm08.System.Linq.Expressions.OldExpressionVisitor.prototype.VisitExpressionList = function (original) {
	var list = null;
	var i = 0;
	var count = original.Count;
__loop0__: 
	while (i < count) {
		var expression = this.Visit(original.get_Item(i));
		if (list !== null) {
			list.Add(expression);
		} else if (expression !== original.get_Item(i)) {
			list = new (System.Collections.Generic.List$b1.Of(System.Linq.Expressions.Expression)) (count);
		__loop1__: 
			for (var j = 0; j < i; ++j) {
				list.Add(original.get_Item(j));
			}
			list.Add(expression);
		}
		++i;
	}
	if (list !== null) {
		return $asm08.System.Linq.Expressions.ReadOnlyCollectionExtensions.ToReadOnlyCollection$b1(System.Linq.Expressions.Expression)(list);
	}
	return original;
};
$asm08.System.Linq.Expressions.OldExpressionVisitor.prototype.VisitMemberAssignment = function (assignment) {
	var expression = this.Visit(assignment.Expression);
	if (expression !== assignment.Expression) {
		return System.Linq.Expressions.Expression.Bind$0(assignment.Member, expression);
	}
	return assignment;
};
$asm08.System.Linq.Expressions.OldExpressionVisitor.prototype.VisitMemberMemberBinding = function (binding) {
	var enumerable = this.VisitBindingList(binding.Bindings);
	if (enumerable !== JSIL.Cast(binding.Bindings, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.MemberBinding))) {
		return System.Linq.Expressions.Expression.MemberBind$1(binding.Member, enumerable);
	}
	return binding;
};
$asm08.System.Linq.Expressions.OldExpressionVisitor.prototype.VisitMemberListBinding = function (binding) {
	var enumerable = this.VisitElementInitializerList(binding.Initializers);
	if (enumerable !== JSIL.Cast(binding.Initializers, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.ElementInit))) {
		return System.Linq.Expressions.Expression.ListBind$1(binding.Member, enumerable);
	}
	return binding;
};
$asm08.System.Linq.Expressions.OldExpressionVisitor.prototype.VisitBindingList = function (original) {
	var list = null;
	var i = 0;
	var count = original.Count;
__loop0__: 
	while (i < count) {
		var memberBinding = this.VisitBinding(original.get_Item(i));
		if (list !== null) {
			list.Add(memberBinding);
		} else if (memberBinding !== original.get_Item(i)) {
			list = new (System.Collections.Generic.List$b1.Of(System.Linq.Expressions.MemberBinding)) (count);
		__loop1__: 
			for (var j = 0; j < i; ++j) {
				list.Add(original.get_Item(j));
			}
			list.Add(memberBinding);
		}
		++i;
	}
	if (list !== null) {
		return list;
	}
	return JSIL.Cast(original, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.MemberBinding));
};
$asm08.System.Linq.Expressions.OldExpressionVisitor.prototype.VisitElementInitializerList = function (original) {
	var list = null;
	var i = 0;
	var count = original.Count;
__loop0__: 
	while (i < count) {
		var elementInit = this.VisitElementInitializer(original.get_Item(i));
		if (list !== null) {
			list.Add(elementInit);
		} else if (elementInit !== original.get_Item(i)) {
			list = new (System.Collections.Generic.List$b1.Of(System.Linq.Expressions.ElementInit)) (count);
		__loop1__: 
			for (var j = 0; j < i; ++j) {
				list.Add(original.get_Item(j));
			}
			list.Add(elementInit);
		}
		++i;
	}
	if (list !== null) {
		return list;
	}
	return JSIL.Cast(original, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.ElementInit));
};
$asm08.System.Linq.Expressions.OldExpressionVisitor.prototype.VisitLambda = function (lambda) {
	var expression = this.Visit(lambda.Body);
	if (expression !== lambda.Body) {
		return System.Linq.Expressions.Expression.Lambda$6(lambda.Type, expression, JSIL.Cast(lambda.Parameters, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.ParameterExpression)));
	}
	return lambda;
};
$asm08.System.Linq.Expressions.OldExpressionVisitor.prototype.VisitNew = function (nex) {
	var enumerable = this.VisitExpressionList(nex.Arguments);
	if (enumerable === nex.Arguments) {
		return nex;
	}
	if (nex.Members !== null) {
		return System.Linq.Expressions.Expression.New$3(nex.Constructor, enumerable, JSIL.Cast(nex.Members, System.Collections.Generic.IEnumerable$b1.Of(System.Reflection.MemberInfo)));
	}
	return System.Linq.Expressions.Expression.New$2(nex.Constructor, enumerable);
};
$asm08.System.Linq.Expressions.OldExpressionVisitor.prototype.VisitMemberInit = function (init) {
	var newExpression = this.VisitNew(init.NewExpression);
	var enumerable = this.VisitBindingList(init.Bindings);
	if (!((newExpression === init.NewExpression) && (enumerable === JSIL.Cast(init.Bindings, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.MemberBinding))))) {
		return System.Linq.Expressions.Expression.MemberInit$1(newExpression, enumerable);
	}
	return init;
};
$asm08.System.Linq.Expressions.OldExpressionVisitor.prototype.VisitListInit = function (init) {
	var newExpression = this.VisitNew(init.NewExpression);
	var enumerable = this.VisitElementInitializerList(init.Initializers);
	if (!((newExpression === init.NewExpression) && (enumerable === JSIL.Cast(init.Initializers, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.ElementInit))))) {
		return System.Linq.Expressions.Expression.ListInit$5(newExpression, enumerable);
	}
	return init;
};
$asm08.System.Linq.Expressions.OldExpressionVisitor.prototype.VisitNewArray = function (na) {
	var enumerable = this.VisitExpressionList(na.Expressions);
	if (enumerable === na.Expressions) {
		return na;
	}
	if (na.NodeType === System.Linq.Expressions.ExpressionType.NewArrayInit) {
		return System.Linq.Expressions.Expression.NewArrayInit$1(na.Type.GetElementType(), enumerable);
	}
	return System.Linq.Expressions.Expression.NewArrayBounds$1(na.Type.GetElementType(), enumerable);
};
$asm08.System.Linq.Expressions.OldExpressionVisitor.prototype.VisitInvocation = function (iv) {
	var enumerable = this.VisitExpressionList(iv.Arguments);
	var expression = this.Visit(iv.Expression);
	if (!((enumerable === iv.Arguments) && (expression === iv.Expression))) {
		return System.Linq.Expressions.Expression.Invoke$1(expression, enumerable);
	}
	return iv;
};

$asm08.System.Linq.EnumerableRewriter.prototype._ctor = function () {
	$asm08.System.Linq.Expressions.OldExpressionVisitor.prototype._ctor.call(this);
};
$asm08.System.Linq.EnumerableRewriter.prototype.VisitMethodCall = function (m) {
	var expression = this.Visit(m.Object);
	var readOnlyCollection = this.VisitExpressionList(m.Arguments);
	if ((expression === m.Object) && (readOnlyCollection === m.Arguments)) {
		return m;
	}
	System.Linq.Enumerable.ToArray$b1(System.Linq.Expressions.Expression)(readOnlyCollection);
	var typeArgs = m.Method.IsGenericMethod ? m.Method.GetGenericArguments() : null;
	if (!((!m.Method.IsStatic && 
				!m.Method.DeclaringType.IsAssignableFrom(expression.Type)) || !$asm08.System.Linq.EnumerableRewriter.ArgsMatch(m.Method, readOnlyCollection, typeArgs))) {
		return System.Linq.Expressions.Expression.Call$13(expression, m.Method, readOnlyCollection);
	}
	if (m.Method.DeclaringType === System.Linq.Queryable) {
		var methodInfo = $asm08.System.Linq.EnumerableRewriter.FindEnumerableMethod(m.Method.Name, readOnlyCollection, typeArgs);
		readOnlyCollection = this.FixupQuotedArgs(methodInfo, readOnlyCollection);
		return System.Linq.Expressions.Expression.Call$13(expression, methodInfo, readOnlyCollection);
	}
	var flags = (System.Reflection.BindingFlags.Static | m.Method.IsPublic ? System.Reflection.BindingFlags.Public : System.Reflection.BindingFlags.NonPublic);
	var methodInfo2 = $asm08.System.Linq.EnumerableRewriter.FindMethod(
		m.Method.DeclaringType, 
		m.Method.Name, 
		readOnlyCollection, 
		typeArgs, 
		flags
	);
	readOnlyCollection = this.FixupQuotedArgs(methodInfo2, readOnlyCollection);
	return System.Linq.Expressions.Expression.Call$13(expression, methodInfo2, readOnlyCollection);
};
$asm08.System.Linq.EnumerableRewriter.prototype.FixupQuotedArgs = function (mi, argList) {
	var parameters = mi.GetParameters();
	if (parameters.length > 0) {
		var list = null;
		var i = 0;
		var num = parameters.length;
	__loop0__: 
		while (i < num) {
			var expression = argList.get_Item(i);
			expression = this.FixupQuotedExpression(parameters[i].ParameterType, expression);
			if (!(list || (expression === argList.get_Item(i)))) {
				list = new (System.Collections.Generic.List$b1.Of(System.Linq.Expressions.Expression)) (argList.Count);
			__loop1__: 
				for (var j = 0; j < i; ++j) {
					list.Add(argList.get_Item(j));
				}
			}
			if (list !== null) {
				list.Add(expression);
			}
			++i;
		}
		if (list !== null) {
			argList = $asm08.System.Linq.Expressions.ReadOnlyCollectionExtensions.ToReadOnlyCollection$b1(System.Linq.Expressions.Expression)(list);
		}
	}
	return argList;
};
$asm08.System.Linq.EnumerableRewriter.prototype.FixupQuotedExpression = function (type, expression) {
__loop0__: 
	for (var expression2 = expression; !type.IsAssignableFrom(expression2.Type); expression2 = JSIL.Cast(expression2, System.Linq.Expressions.UnaryExpression).Operand) {
		if (expression2.NodeType !== System.Linq.Expressions.ExpressionType.Quote) {
			if (!(type.IsAssignableFrom(expression2.Type) || 
					!type.IsArray || (expression2.NodeType !== System.Linq.Expressions.ExpressionType.NewArrayInit))) {
				var c = $asm08.System.Linq.EnumerableRewriter.StripExpression(expression2.Type);
				if (type.IsAssignableFrom(c)) {
					var elementType = type.GetElementType();
					var newArrayExpression = JSIL.Cast(expression2, System.Linq.Expressions.NewArrayExpression);
					var list = new (System.Collections.Generic.List$b1.Of(System.Linq.Expressions.Expression)) (newArrayExpression.Expressions.Count);
					var i = 0;
					var count = newArrayExpression.Expressions.Count;
				__loop1__: 
					while (i < count) {
						list.Add(this.FixupQuotedExpression(elementType, newArrayExpression.Expressions.get_Item(i)));
						++i;
					}
					expression = System.Linq.Expressions.Expression.NewArrayInit$1(elementType, list);
				}
			}
			return expression;
		}
	}
	return expression2;
};
$asm08.System.Linq.EnumerableRewriter.prototype.VisitLambda = function (lambda) {
	return lambda;
};
$asm08.System.Linq.EnumerableRewriter.GetPublicType = function (t) {
	if (!(!t.IsGenericType || (t.GetGenericTypeDefinition() !== $asm08.System.Linq.Lookup$b2.Grouping))) {
		return System.Linq.IGrouping$b2.MakeGenericType(t.GetGenericArguments());
	}
	if (!t.IsNestedPrivate) {
		return t;
	}
	var interfaces = t.GetInterfaces();
__loop0__: 
	for (var i = 0; i < interfaces.length; ++i) {
		var type = interfaces[i];
		if (!(!type.IsGenericType || (type.GetGenericTypeDefinition() !== System.Collections.Generic.IEnumerable$b1))) {
			return type;
		}
	}
	if (System.Collections.IEnumerable.IsAssignableFrom(t)) {
		return System.Collections.IEnumerable;
	}
	return t;
};
$asm08.System.Linq.EnumerableRewriter.prototype.VisitConstant = function (c) {
	var enumerableQuery = JSIL.TryCast(c.Value, System.Linq.EnumerableQuery);
	if (enumerableQuery === null) {
		return c;
	}
	if (enumerableQuery.Enumerable !== null) {
		var publicType = $asm08.System.Linq.EnumerableRewriter.GetPublicType(JSIL.GetType(enumerableQuery.Enumerable));
		return System.Linq.Expressions.Expression.Constant$1(enumerableQuery.Enumerable, publicType);
	}
	return this.Visit(enumerableQuery.Expression);
};
$asm08.System.Linq.EnumerableRewriter.prototype.VisitParameter = function (p) {
	return p;
};
$asm08.System.Linq.EnumerableRewriter.FindEnumerableMethod = function (name, args, typeArgs) {
	var $l$gc__DisplayClass = new $asm08.System.Linq.EnumerableRewriter.$l$gc__DisplayClass3();
	$l$gc__DisplayClass.args = args;
	$l$gc__DisplayClass.typeArgs = typeArgs;
	if ($asm08.System.Linq.EnumerableRewriter._seqMethods === null) {
		$asm08.System.Linq.EnumerableRewriter._seqMethods = System.Linq.Enumerable.ToLookup$b2$0(System.Reflection.MethodInfo, System.String)(System.Linq.Enumerable.GetMethods$1((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static)), function (m) {
				return m.Name;
			});
	}
	var methodInfo = System.Linq.Enumerable.FirstOrDefault$b1$1(System.Reflection.MethodInfo)($asm08.System.Linq.EnumerableRewriter._seqMethods.ILookup$b2_get_Item(name), function (m) {
			return $asm08.System.Linq.EnumerableRewriter.ArgsMatch(m, $l$gc__DisplayClass.args, $l$gc__DisplayClass.typeArgs);
		});
	if (methodInfo === null) {
		throw $asm08.System.Core.Error.NoMethodOnTypeMatchingArguments(name, System.Linq.Enumerable);
	}
	if ($l$gc__DisplayClass.typeArgs !== null) {
		return methodInfo.MakeGenericMethod($l$gc__DisplayClass.typeArgs);
	}
	return methodInfo;
};
$asm08.System.Linq.EnumerableRewriter.FindMethod = function (type, name, args, typeArgs, flags) {
	var $l$gc__DisplayClass = new $asm08.System.Linq.EnumerableRewriter.$l$gc__DisplayClass7();
	$l$gc__DisplayClass.name = name;
	$l$gc__DisplayClass.args = args;
	$l$gc__DisplayClass.typeArgs = typeArgs;
	var array = System.Linq.Enumerable.ToArray$b1(System.Reflection.MethodInfo)(System.Linq.Enumerable.Where$b1$0(System.Reflection.MethodInfo)(type.GetMethods$1(flags), function (m) {
				return m.Name == $l$gc__DisplayClass.name;
			}));
	if (array.length === 0) {
		throw $asm08.System.Core.Error.NoMethodOnType($l$gc__DisplayClass.name, type);
	}
	var methodInfo = System.Linq.Enumerable.FirstOrDefault$b1$1(System.Reflection.MethodInfo)(array, function (m) {
			return $asm08.System.Linq.EnumerableRewriter.ArgsMatch(m, $l$gc__DisplayClass.args, $l$gc__DisplayClass.typeArgs);
		});
	if (methodInfo === null) {
		throw $asm08.System.Core.Error.NoMethodOnTypeMatchingArguments($l$gc__DisplayClass.name, type);
	}
	if ($l$gc__DisplayClass.typeArgs !== null) {
		return methodInfo.MakeGenericMethod($l$gc__DisplayClass.typeArgs);
	}
	return methodInfo;
};
$asm08.System.Linq.EnumerableRewriter.ArgsMatch = function (m, args, typeArgs) {
	var parameters = m.GetParameters();
	if (parameters.length !== args.Count) {
		return false;
	}
	if (!(m.IsGenericMethod || 
			(typeArgs === null) || (typeArgs.length <= 0))) {
		return false;
	}
	if (!(m.IsGenericMethodDefinition || 
			!m.IsGenericMethod || !m.ContainsGenericParameters)) {
		m = m.GetGenericMethodDefinition();
	}
	if (m.IsGenericMethodDefinition) {
		if (!((typeArgs !== null) && (typeArgs.length !== 0))) {
			return false;
		}
		if (m.GetGenericArguments().length !== typeArgs.length) {
			return false;
		}
		m = m.MakeGenericMethod(typeArgs);
		parameters = m.GetParameters();
	}
	var i = 0;
	var count = args.Count;
__loop0__: 
	while (i < count) {
		var type = parameters[i].ParameterType;
		if (type === null) {
			return false;
		}
		if (type.IsByRef) {
			type = type.GetElementType();
		}
		var expression = args.get_Item(i);
		if (!type.IsAssignableFrom(expression.Type)) {
			if (expression.NodeType === System.Linq.Expressions.ExpressionType.Quote) {
				expression = JSIL.Cast(expression, System.Linq.Expressions.UnaryExpression).Operand;
			}
			if (!(type.IsAssignableFrom(expression.Type) || type.IsAssignableFrom($asm08.System.Linq.EnumerableRewriter.StripExpression(expression.Type)))) {
				return false;
			}
		}
		++i;
	}
	return true;
};
$asm08.System.Linq.EnumerableRewriter.StripExpression = function (type) {
	var isArray = type.IsArray;
	var type2 = isArray ? type.GetElementType() : type;
	var type3 = $asm08.System.Linq.TypeHelper.FindGenericType(System.Linq.Expressions.Expression$b1, type2);
	if (type3 !== null) {
		type2 = type3.GetGenericArguments()[0];
	}
	if (!isArray) {
		return type;
	}
	var arrayRank = type.GetArrayRank();
	if (arrayRank !== 1) {
		return type2.MakeArrayType$1(arrayRank);
	}
	return type2.MakeArrayType$0();
};
$asm08.System.Linq.EnumerableRewriter._seqMethods = null;
$asm08.System.Linq.EnumerableRewriter.$CachedAnonymousMethodDelegate2 = null;

$asm08.System.Linq.EnumerableRewriter.$l$gc__DisplayClass3.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm08.System.Linq.EnumerableRewriter.$l$gc__DisplayClass3.prototype.args = null;
$asm08.System.Linq.EnumerableRewriter.$l$gc__DisplayClass3.prototype.typeArgs = null;

$asm08.System.Linq.EnumerableRewriter.$l$gc__DisplayClass7.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm08.System.Linq.EnumerableRewriter.$l$gc__DisplayClass7.prototype.name = null;
$asm08.System.Linq.EnumerableRewriter.$l$gc__DisplayClass7.prototype.args = null;
$asm08.System.Linq.EnumerableRewriter.$l$gc__DisplayClass7.prototype.typeArgs = null;

$asm08.System.Linq.TypeHelper.IsEnumerableType = function (enumerableType) {
	return ($asm08.System.Linq.TypeHelper.FindGenericType(System.Collections.Generic.IEnumerable$b1, enumerableType) !== null);
};
$asm08.System.Linq.TypeHelper.IsKindOfGeneric = function (type, definition) {
	return ($asm08.System.Linq.TypeHelper.FindGenericType(definition, type) !== null);
};
$asm08.System.Linq.TypeHelper.GetElementType = function (enumerableType) {
	var type = $asm08.System.Linq.TypeHelper.FindGenericType(System.Collections.Generic.IEnumerable$b1, enumerableType);
	if (type !== null) {
		return type.GetGenericArguments()[0];
	}
	return enumerableType;
};
$asm08.System.Linq.TypeHelper.FindGenericType = function (definition, type) {
__loop0__: 
	for (; (type !== null) && (type !== System.Object); type = type.BaseType) {
		if (!(!type.IsGenericType || (type.GetGenericTypeDefinition() !== definition))) {
			return type;
		}
		if (definition.IsInterface) {
			var interfaces = type.GetInterfaces();
		__loop1__: 
			for (var i = 0; i < interfaces.length; ++i) {
				var type3 = $asm08.System.Linq.TypeHelper.FindGenericType(definition, interfaces[i]);
				if (type3 !== null) {
					return type3;
				}
			}
		}
	}
	return null;
};
$asm08.System.Linq.TypeHelper.IsNullableType = function (type) {
	return (!((type === null) || 
			!type.IsGenericType) && (type.GetGenericTypeDefinition() === System.Nullable$b1));
};
$asm08.System.Linq.TypeHelper.GetNonNullableType = function (type) {
	if ($asm08.System.Linq.TypeHelper.IsNullableType(type)) {
		return type.GetGenericArguments()[0];
	}
	return type;
};

$asm08.System.Linq.Expressions.ReadOnlyCollectionExtensions.ToReadOnlyCollection$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, sequence) {
		if (sequence === null) {
			return $asm08.System.Linq.Expressions.ReadOnlyCollectionExtensions.DefaultReadOnlyCollection$b1.Of(T).Empty;
		}
		var readOnlyCollection = JSIL.TryCast(sequence, System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(T));
		if (readOnlyCollection !== null) {
			return readOnlyCollection;
		}
		return new (System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(T)) (JSIL.Cast(System.Linq.Enumerable.ToArray$b1(T)(sequence), System.Collections.Generic.IList$b1.Of(T)));
	}
);

$asm08.System.Linq.Expressions.ReadOnlyCollectionExtensions.DefaultReadOnlyCollection$b1.get_Empty = function () {
	if ($asm08.System.Linq.Expressions.ReadOnlyCollectionExtensions.DefaultReadOnlyCollection$b1.Of(this.T)._defaultCollection === null) {
		$asm08.System.Linq.Expressions.ReadOnlyCollectionExtensions.DefaultReadOnlyCollection$b1.Of(this.T)._defaultCollection = new (System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(this.T)) (JSIL.Array.New(this.T, 0));
	}
	return $asm08.System.Linq.Expressions.ReadOnlyCollectionExtensions.DefaultReadOnlyCollection$b1.Of(this.T)._defaultCollection;
};
JSIL.MakeGenericProperty($asm08.System.Linq.Expressions.ReadOnlyCollectionExtensions.DefaultReadOnlyCollection$b1, "Empty", 
	$asm08.System.Linq.Expressions.ReadOnlyCollectionExtensions.DefaultReadOnlyCollection$b1.get_Empty, null);
$asm08.System.Linq.Expressions.ReadOnlyCollectionExtensions.DefaultReadOnlyCollection$b1._defaultCollection = null;

System.Security.Cryptography.AesManaged.prototype._ctor = function () {
	System.Security.Cryptography.Aes.prototype._ctor.call(this);
	this.m_rijndael = new System.Security.Cryptography.RijndaelManaged();
	this.m_rijndael.BlockSize = this.BlockSize;
	this.m_rijndael.KeySize = this.KeySize;
};
System.Security.Cryptography.AesManaged.prototype.get_IV = function () {
	return this.m_rijndael.IV;
};
System.Security.Cryptography.AesManaged.prototype.set_IV = function (value) {
	this.m_rijndael.IV = value;
};
System.Security.Cryptography.AesManaged.prototype.get_Key = function () {
	return this.m_rijndael.Key;
};
System.Security.Cryptography.AesManaged.prototype.set_Key = function (value) {
	this.m_rijndael.Key = value;
};
System.Security.Cryptography.AesManaged.prototype.get_KeySize = function () {
	return this.m_rijndael.KeySize;
};
System.Security.Cryptography.AesManaged.prototype.set_KeySize = function (value) {
	this.m_rijndael.KeySize = value;
};
System.Security.Cryptography.AesManaged.prototype.CreateDecryptor$0 = function () {
	return this.m_rijndael.CreateDecryptor$0();
};
System.Security.Cryptography.AesManaged.prototype.CreateDecryptor$1 = function (key, iv) {
	if (key === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["key"]);
	}
	return this.m_rijndael.CreateDecryptor$1(key, iv);
};
System.Security.Cryptography.AesManaged.prototype.CreateEncryptor$0 = function () {
	return this.m_rijndael.CreateEncryptor$0();
};
System.Security.Cryptography.AesManaged.prototype.CreateEncryptor$1 = function (key, iv) {
	if (key === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["key"]);
	}
	return this.m_rijndael.CreateEncryptor$1(key, iv);
};
System.Security.Cryptography.AesManaged.prototype.Dispose = function (disposing) {
	try {
		if (disposing) {
			this.m_rijndael.IDisposable_Dispose();
		}
	} finally {
		System.Security.Cryptography.SymmetricAlgorithm.prototype.Dispose.call(this, disposing);
	}
};
System.Security.Cryptography.AesManaged.prototype.GenerateIV = function () {
	this.m_rijndael.GenerateIV();
};
System.Security.Cryptography.AesManaged.prototype.GenerateKey = function () {
	this.m_rijndael.GenerateKey();
};
JSIL.OverloadedMethod(System.Security.Cryptography.AesManaged.prototype, "CreateDecryptor", [
		["CreateDecryptor$0", []], 
		["CreateDecryptor$1", [System.Array.Of(System.Byte), System.Array.Of(System.Byte)]]
	]);
JSIL.OverloadedMethod(System.Security.Cryptography.AesManaged.prototype, "CreateEncryptor", [
		["CreateEncryptor$0", []], 
		["CreateEncryptor$1", [System.Array.Of(System.Byte), System.Array.Of(System.Byte)]]
	]);
JSIL.MakeProperty(System.Security.Cryptography.AesManaged.prototype, "IV", 
	System.Security.Cryptography.AesManaged.prototype.get_IV, System.Security.Cryptography.AesManaged.prototype.set_IV);
JSIL.MakeProperty(System.Security.Cryptography.AesManaged.prototype, "Key", 
	System.Security.Cryptography.AesManaged.prototype.get_Key, System.Security.Cryptography.AesManaged.prototype.set_Key);
JSIL.MakeProperty(System.Security.Cryptography.AesManaged.prototype, "KeySize", 
	System.Security.Cryptography.AesManaged.prototype.get_KeySize, System.Security.Cryptography.AesManaged.prototype.set_KeySize);
System.Security.Cryptography.AesManaged.prototype.m_rijndael = null;

System.Runtime.CompilerServices.CallSiteBinder.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
System.Runtime.CompilerServices.CallSiteBinder.get_UpdateLabel = function () {
	return System.Runtime.CompilerServices.CallSiteBinder._updateLabel;
};
System.Runtime.CompilerServices.CallSiteBinder.prototype.BindDelegate$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, site, args) {
		return null;
	}
);
System.Runtime.CompilerServices.CallSiteBinder.prototype.BindCore$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, site, args) {
		var t = this.BindDelegate$b1(T)(site, args);
		if (t !== null) {
			return t;
		}
		var instance = $asm08.System.Runtime.CompilerServices.CallSiteBinder.LambdaSignature$b1.Of(T).Instance;
		var expression = this.Bind(args, instance.Parameters, instance.ReturnLabel);
		if (expression === null) {
			throw $asm08.System.Core.Error.NoOrInvalidRuleProduced();
		}
		var expression2 = System.Runtime.CompilerServices.CallSiteBinder.Stitch$b1(T)(expression, instance);
		var t2 = expression2.Compile$0();
		this.CacheTarget$b1(T)(t2);
		return t2;
	}
);
System.Runtime.CompilerServices.CallSiteBinder.prototype.CacheTarget$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, target) {
		this.GetRuleCache$b1(T)().AddRule(target);
	}
);
System.Runtime.CompilerServices.CallSiteBinder.Stitch$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, binding, signature) {
		var typeFromHandle = System.Runtime.CompilerServices.CallSite$b1.Of(T);
		var readOnlyCollectionBuilder = JSIL.New(System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.Of(System.Linq.Expressions.Expression), "_ctor$1", [3]);
		readOnlyCollectionBuilder.Add(binding);
		var parameterExpression = System.Linq.Expressions.Expression.Parameter$1(System.Runtime.CompilerServices.CallSite, "$site");
		var array = $asm08.System.Dynamic.Utils.CollectionExtensions.AddFirst$b1(System.Linq.Expressions.ParameterExpression)(signature.Parameters, parameterExpression);
		var item = System.Linq.Expressions.Expression.Label$0(System.Runtime.CompilerServices.CallSiteBinder.UpdateLabel);
		readOnlyCollectionBuilder.Add(item);
		readOnlyCollectionBuilder.Add(System.Linq.Expressions.Expression.Label$1(signature.ReturnLabel, System.Linq.Expressions.Expression.Condition$0(
					System.Linq.Expressions.Expression.Call$0(System.Runtime.CompilerServices.CallSiteOps.GetMethod$5("SetNotMatched"), $asm08.System.Dynamic.Utils.CollectionExtensions.First$b1(System.Linq.Expressions.ParameterExpression)(array)), 
					System.Linq.Expressions.Expression.Default(signature.ReturnLabel.Type), 
					System.Linq.Expressions.Expression.Invoke$1(System.Linq.Expressions.Expression.Property$5(System.Linq.Expressions.Expression.Convert$0(parameterExpression, typeFromHandle), System.Runtime.CompilerServices.CallSite$b1.Of(T).GetProperty$6("Update")), new ($asm08.System.Runtime.CompilerServices.TrueReadOnlyCollection$b1.Of(System.Linq.Expressions.Expression)) (array))
				)));
		return new (System.Linq.Expressions.Expression$b1.Of(T)) (System.Linq.Expressions.Expression.Block$5(readOnlyCollectionBuilder), "CallSite.Target", true, new ($asm08.System.Runtime.CompilerServices.TrueReadOnlyCollection$b1.Of(System.Linq.Expressions.ParameterExpression)) (array));
	}
);
System.Runtime.CompilerServices.CallSiteBinder.prototype.GetRuleCache$b1 = JSIL.GenericMethod(
	["T"], 
	function (T) {
		var obj = null;
		if (this.Cache === null) {
			System.Threading.Interlocked.CompareExchange$b1(System.Collections.Generic.Dictionary$b2.Of(System.Type, System.Object))(/* ref */ new JSIL.MemberReference(this, "Cache"), JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.Type, System.Object), "_ctor$0", []), null);
		}
		var cache = this.Cache;
		System.Threading.Monitor.Enter((obj = cache));
		try {
			if (!cache.TryGetValue(T, /* ref */ obj2)) {
				var obj2 = new JSIL.Variable(cache.set_Item(T, new (System.Runtime.CompilerServices.RuleCache$b1.Of(T)) ()));
			}
		} finally {
			System.Threading.Monitor.Exit(obj);
		}
		return JSIL.TryCast(obj2.value, System.Runtime.CompilerServices.RuleCache$b1.Of(T));
	}
);
JSIL.MakeProperty(System.Runtime.CompilerServices.CallSiteBinder, "UpdateLabel", 
	System.Runtime.CompilerServices.CallSiteBinder.get_UpdateLabel, null);
System.Runtime.CompilerServices.CallSiteBinder._updateLabel = null;
System.Runtime.CompilerServices.CallSiteBinder.prototype.Cache = null;
System.Runtime.CompilerServices.CallSiteBinder._cctor = function () {
	System.Runtime.CompilerServices.CallSiteBinder._updateLabel = System.Linq.Expressions.Expression.Label$3("CallSiteBinder.UpdateLabel");
};

$asm08.System.Runtime.CompilerServices.CallSiteBinder.LambdaSignature$b1.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
	var typeFromHandle = this.T;
	if (!System.Delegate.IsAssignableFrom(typeFromHandle)) {
		throw $asm08.System.Core.Error.TypeParameterIsNotDelegate(typeFromHandle);
	}
	var method = typeFromHandle.GetMethod$5("Invoke");
	var parametersCached = $asm08.System.Dynamic.Utils.TypeExtensions.GetParametersCached(method);
	if (parametersCached[0].ParameterType !== System.Runtime.CompilerServices.CallSite) {
		throw $asm08.System.Core.Error.FirstArgumentMustBeCallSite();
	}
	var array = JSIL.Array.New(System.Linq.Expressions.ParameterExpression, (parametersCached.length - 1));
__loop0__: 
	for (var i = 0; i < array.length; ++i) {
		array[i] = System.Linq.Expressions.Expression.Parameter$1(parametersCached[(i + 1)].ParameterType, JSIL.ConcatString("$arg", i));
	}
	this.Parameters = new ($asm08.System.Runtime.CompilerServices.TrueReadOnlyCollection$b1.Of(System.Linq.Expressions.ParameterExpression)) (array);
	this.ReturnLabel = System.Linq.Expressions.Expression.Label$4($asm08.System.Dynamic.Utils.TypeExtensions.GetReturnType(method));
};
$asm08.System.Runtime.CompilerServices.CallSiteBinder.LambdaSignature$b1.Instance = null;
$asm08.System.Runtime.CompilerServices.CallSiteBinder.LambdaSignature$b1.prototype.Parameters = null;
$asm08.System.Runtime.CompilerServices.CallSiteBinder.LambdaSignature$b1.prototype.ReturnLabel = null;
System.Runtime.CompilerServices.CallSiteBinder.LambdaSignature$b1._cctor = function () {
	System.Runtime.CompilerServices.CallSiteBinder.LambdaSignature$b1.Of(this.T).Instance = new (System.Runtime.CompilerServices.CallSiteBinder.LambdaSignature$b1.Of(this.T)) ();
};

System.Dynamic.DynamicMetaObjectBinder.prototype._ctor = function () {
	System.Runtime.CompilerServices.CallSiteBinder.prototype._ctor.call(this);
};
System.Dynamic.DynamicMetaObjectBinder.prototype.get_ReturnType = function () {
	return System.Object;
};
System.Dynamic.DynamicMetaObjectBinder.prototype.Bind$0 = function (args, parameters, returnLabel) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(args, "args");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(parameters, "parameters");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(returnLabel, "returnLabel");
	if (args.length === 0) {
		throw $asm08.System.Core.Error.OutOfRange("args.Length", 1);
	}
	if (parameters.Count === 0) {
		throw $asm08.System.Core.Error.OutOfRange("parameters.Count", 1);
	}
	if (args.length !== parameters.Count) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["args"]);
	}
	if (this.IsStandardBinder) {
		var type = this.ReturnType;
		if (!((returnLabel.Type === System.Void) || $asm08.System.Dynamic.Utils.TypeUtils.AreReferenceAssignable(returnLabel.Type, type))) {
			throw $asm08.System.Core.Error.BinderNotCompatibleWithCallSite(type, this, returnLabel.Type);
		}
	} else {
		type = returnLabel.Type;
	}
	var dynamicMetaObject = System.Dynamic.DynamicMetaObject.Create(args[0], parameters.get_Item(0));
	var args2 = System.Dynamic.DynamicMetaObjectBinder.CreateArgumentMetaObjects(args, parameters);
	var dynamicMetaObject2 = this.Bind$1(dynamicMetaObject, args2);
	if (dynamicMetaObject2 === null) {
		throw $asm08.System.Core.Error.BindingCannotBeNull();
	}
	var expression = dynamicMetaObject2.Expression;
	var bindingRestrictions = dynamicMetaObject2.Restrictions;
	if (!((type === System.Void) || $asm08.System.Dynamic.Utils.TypeUtils.AreReferenceAssignable(type, expression.Type))) {
		if (JSIL.TryCast(dynamicMetaObject.Value, System.Dynamic.IDynamicMetaObjectProvider) !== null) {
			throw $asm08.System.Core.Error.DynamicObjectResultNotAssignable(expression.Type, JSIL.GetType(dynamicMetaObject.Value), this, type);
		}
		throw $asm08.System.Core.Error.DynamicBinderResultNotAssignable(expression.Type, this, type);
	} else {
		if (!(!this.IsStandardBinder || 
				(JSIL.TryCast(args[0], System.Dynamic.IDynamicMetaObjectProvider) === null) || (bindingRestrictions !== System.Dynamic.BindingRestrictions.Empty))) {
			throw $asm08.System.Core.Error.DynamicBindingNeedsRestrictions(JSIL.GetType(dynamicMetaObject.Value), this);
		}
		bindingRestrictions = System.Dynamic.DynamicMetaObjectBinder.AddRemoteObjectRestrictions(bindingRestrictions, args, parameters);
		if (expression.NodeType !== System.Linq.Expressions.ExpressionType.Goto) {
			expression = System.Linq.Expressions.Expression.Return$2(returnLabel, expression);
		}
		if (bindingRestrictions !== System.Dynamic.BindingRestrictions.Empty) {
			expression = System.Linq.Expressions.Expression.IfThen(bindingRestrictions.ToExpression(), expression);
		}
		return expression;
	}
};
System.Dynamic.DynamicMetaObjectBinder.CreateArgumentMetaObjects = function (args, parameters) {
	if (args.length !== 1) {
		var array = JSIL.Array.New(System.Dynamic.DynamicMetaObject, (args.length - 1));
	__loop0__: 
		for (var i = 1; i < args.length; ++i) {
			array[(i - 1)] = System.Dynamic.DynamicMetaObject.Create(args[i], parameters.get_Item(i));
		}
	} else {
		array = System.Dynamic.DynamicMetaObject.EmptyMetaObjects;
	}
	return array;
};
System.Dynamic.DynamicMetaObjectBinder.AddRemoteObjectRestrictions = function (restrictions, args, parameters) {
	return restrictions;
};
System.Dynamic.DynamicMetaObjectBinder.prototype.GetUpdateExpression = function (type) {
	return System.Linq.Expressions.Expression.Goto$1(System.Runtime.CompilerServices.CallSiteBinder.UpdateLabel, type);
};
System.Dynamic.DynamicMetaObjectBinder.prototype.Defer$0 = function (target, args) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(target, "target");
	if (args === null) {
		return this.MakeDeferred(target.Restrictions, JSIL.Array.New(System.Dynamic.DynamicMetaObject, [target]));
	}
	return this.MakeDeferred(
		target.Restrictions.Merge(System.Dynamic.BindingRestrictions.Combine(JSIL.Cast(args, System.Collections.Generic.IList$b1.Of(System.Dynamic.DynamicMetaObject)))), 
		$asm08.System.Dynamic.Utils.CollectionExtensions.AddFirst$b1(System.Dynamic.DynamicMetaObject)(JSIL.Cast(args, System.Collections.Generic.IList$b1.Of(System.Dynamic.DynamicMetaObject)), target)
	);
};
System.Dynamic.DynamicMetaObjectBinder.prototype.Defer$1 = function (args) {
	return this.MakeDeferred(System.Dynamic.BindingRestrictions.Combine(JSIL.Cast(args, System.Collections.Generic.IList$b1.Of(System.Dynamic.DynamicMetaObject))), args);
};
System.Dynamic.DynamicMetaObjectBinder.prototype.MakeDeferred = function (rs, args) {
	var expressions = System.Dynamic.DynamicMetaObject.GetExpressions(args);
	var delegateType = $asm08.System.Linq.Expressions.Compiler.DelegateHelpers.MakeDeferredSiteDelegate(args, this.ReturnType);
	return JSIL.New(System.Dynamic.DynamicMetaObject, "_ctor$0", [System.Linq.Expressions.DynamicExpression.Make$0(this.ReturnType, delegateType, this, new ($asm08.System.Runtime.CompilerServices.TrueReadOnlyCollection$b1.Of(System.Linq.Expressions.Expression)) (expressions)), rs]);
};
System.Dynamic.DynamicMetaObjectBinder.prototype.get_IsStandardBinder = function () {
	return false;
};
JSIL.OverloadedMethod(System.Dynamic.DynamicMetaObjectBinder.prototype, "Bind", [
		["Bind$0", [System.Array.Of(System.Object), System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(System.Linq.Expressions.ParameterExpression), System.Linq.Expressions.LabelTarget]], 
		["Bind$1", [System.Dynamic.DynamicMetaObject, System.Array.Of(System.Dynamic.DynamicMetaObject)]]
	]);
JSIL.OverloadedMethod(System.Dynamic.DynamicMetaObjectBinder.prototype, "Defer", [
		["Defer$0", [System.Dynamic.DynamicMetaObject, System.Array.Of(System.Dynamic.DynamicMetaObject)]], 
		["Defer$1", [System.Array.Of(System.Dynamic.DynamicMetaObject)]]
	]);
JSIL.MakeProperty(System.Dynamic.DynamicMetaObjectBinder.prototype, "ReturnType", 
	System.Dynamic.DynamicMetaObjectBinder.prototype.get_ReturnType, null);
JSIL.MakeProperty(System.Dynamic.DynamicMetaObjectBinder.prototype, "IsStandardBinder", 
	System.Dynamic.DynamicMetaObjectBinder.prototype.get_IsStandardBinder, null);

System.Dynamic.BinaryOperationBinder.prototype._ctor = function (operation) {
	System.Dynamic.DynamicMetaObjectBinder.prototype._ctor.call(this);
	$asm08.System.Dynamic.Utils.ContractUtils.Requires$1(System.Dynamic.BinaryOperationBinder.OperationIsValid(operation), "operation");
	this._operation = operation;
};
System.Dynamic.BinaryOperationBinder.prototype.get_ReturnType = function () {
	return System.Object;
};
System.Dynamic.BinaryOperationBinder.prototype.get_Operation = function () {
	return this._operation;
};
System.Dynamic.BinaryOperationBinder.prototype.FallbackBinaryOperation$0 = function (target, arg) {
	return this.FallbackBinaryOperation$1(target, arg, null);
};
System.Dynamic.BinaryOperationBinder.prototype.Bind = function (target, args) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(target, "target");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(args, "args");
	$asm08.System.Dynamic.Utils.ContractUtils.Requires$1((args.length === 1), "args");
	var dynamicMetaObject = args[0];
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(dynamicMetaObject, "args");
	return target.BindBinaryOperation(this, dynamicMetaObject);
};
System.Dynamic.BinaryOperationBinder.prototype.get_IsStandardBinder = function () {
	return true;
};
System.Dynamic.BinaryOperationBinder.OperationIsValid = function (operation) {
	if (operation <= System.Linq.Expressions.ExpressionType.Multiply) {
		switch (Number(operation)) {
			case 0: 
			case 2: 
				break;
			case 1: 
				return false;
			default: 
				switch (Number(operation)) {
					case 12: 
					case 13: 
					case 14: 
					case 15: 
					case 16: 
					case 19: 
					case 20: 
					case 21: 
					case 25: 
					case 26: 
						break;
					case 17: 
					case 18: 
					case 22: 
					case 23: 
					case 24: 
						return false;
					default: 
						return false;
				}
				break;
		}
	} else {
		switch (Number(operation)) {
			case 35: 
			case 36: 
			case 39: 
			case 41: 
			case 42: 
				break;
			case 37: 
			case 38: 
			case 40: 
				return false;
			default: 
				switch (Number(operation)) {
					case 52: 
					case 63: 
					case 64: 
					case 65: 
					case 66: 
					case 67: 
					case 68: 
					case 69: 
					case 70: 
					case 71: 
					case 72: 
					case 73: 
						break;
					case 53: 
					case 54: 
					case 55: 
					case 56: 
					case 57: 
					case 58: 
					case 59: 
					case 60: 
					case 61: 
					case 62: 
						return false;
					default: 
						return false;
				}
				break;
		}
	}
	return true;
};
JSIL.OverloadedMethod(System.Dynamic.BinaryOperationBinder.prototype, "FallbackBinaryOperation", [
		["FallbackBinaryOperation$0", [System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject]], 
		["FallbackBinaryOperation$1", [System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject]]
	]);
JSIL.MakeProperty(System.Dynamic.BinaryOperationBinder.prototype, "ReturnType", 
	System.Dynamic.BinaryOperationBinder.prototype.get_ReturnType, null);
JSIL.MakeProperty(System.Dynamic.BinaryOperationBinder.prototype, "Operation", 
	System.Dynamic.BinaryOperationBinder.prototype.get_Operation, null);
JSIL.MakeProperty(System.Dynamic.BinaryOperationBinder.prototype, "IsStandardBinder", 
	System.Dynamic.BinaryOperationBinder.prototype.get_IsStandardBinder, null);
System.Dynamic.BinaryOperationBinder.prototype._operation = 0;

System.Dynamic.BindingRestrictions.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
System.Dynamic.BindingRestrictions.prototype.Merge = function (restrictions) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(restrictions, "restrictions");
	if (this === System.Dynamic.BindingRestrictions.Empty) {
		return restrictions;
	}
	if (restrictions === System.Dynamic.BindingRestrictions.Empty) {
		return this;
	}
	return new $asm08.System.Dynamic.BindingRestrictions.MergedRestriction(this, restrictions);
};
System.Dynamic.BindingRestrictions.GetTypeRestriction$0 = function (expression, type) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(expression, "expression");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(type, "type");
	return new $asm08.System.Dynamic.BindingRestrictions.TypeRestriction(expression, type);
};
System.Dynamic.BindingRestrictions.GetTypeRestriction$1 = function (obj) {
	if (!(obj.Value || !obj.HasValue)) {
		return System.Dynamic.BindingRestrictions.GetInstanceRestriction(obj.Expression, null);
	}
	return System.Dynamic.BindingRestrictions.GetTypeRestriction$0(obj.Expression, obj.LimitType);
};
System.Dynamic.BindingRestrictions.GetInstanceRestriction = function (expression, instance) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(expression, "expression");
	return new $asm08.System.Dynamic.BindingRestrictions.InstanceRestriction(expression, instance);
};
System.Dynamic.BindingRestrictions.GetExpressionRestriction = function (expression) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(expression, "expression");
	$asm08.System.Dynamic.Utils.ContractUtils.Requires$1((expression.Type === System.Boolean), "expression");
	return new $asm08.System.Dynamic.BindingRestrictions.CustomRestriction(expression);
};
System.Dynamic.BindingRestrictions.Combine = function (contributingObjects) {
	var bindingRestrictions = System.Dynamic.BindingRestrictions.Empty;
	if (contributingObjects !== null) {
		var enumerator = contributingObjects.IEnumerable$b1_GetEnumerator();
		try {
		__loop0__: 
			while (enumerator.IEnumerator_MoveNext()) {
				var current = enumerator.IEnumerator$b1_Current;
				if (current !== null) {
					bindingRestrictions = bindingRestrictions.Merge(current.Restrictions);
				}
			}
		} finally {
			if (enumerator !== null) {
				enumerator.IDisposable_Dispose();
			}
		}
	}
	return bindingRestrictions;
};
System.Dynamic.BindingRestrictions.prototype.ToExpression = function () {
	if (this === System.Dynamic.BindingRestrictions.Empty) {
		return System.Linq.Expressions.Expression.Constant$0(true);
	}
	var testBuilder = new $asm08.System.Dynamic.BindingRestrictions.TestBuilder();
	var stack = JSIL.New(System.Collections.Generic.Stack$b1.Of(System.Dynamic.BindingRestrictions), "_ctor$0", []);
	stack.Push(this);
__loop0__: 
	do {
		var bindingRestrictions = stack.Pop();
		var mergedRestriction = JSIL.TryCast(bindingRestrictions, $asm08.System.Dynamic.BindingRestrictions.MergedRestriction);
		if (mergedRestriction !== null) {
			stack.Push(mergedRestriction.Right);
			stack.Push(mergedRestriction.Left);
		} else {
			testBuilder.Append(bindingRestrictions);
		}
	} while (stack.Count > 0);
	return testBuilder.ToExpression();
};
System.Dynamic.BindingRestrictions.prototype.get_DebugView = function () {
	return this.ToExpression().toString();
};
JSIL.OverloadedMethod(System.Dynamic.BindingRestrictions, "GetTypeRestriction", [
		["GetTypeRestriction$0", [System.Linq.Expressions.Expression, System.Type]], 
		["GetTypeRestriction$1", [System.Dynamic.DynamicMetaObject]]
	]);
JSIL.MakeProperty(System.Dynamic.BindingRestrictions.prototype, "DebugView", 
	System.Dynamic.BindingRestrictions.prototype.get_DebugView, null);
Object.defineProperty(System.Dynamic.BindingRestrictions, "TypeRestrictionHash", {
		"value": 268435456}
);
Object.defineProperty(System.Dynamic.BindingRestrictions, "InstanceRestrictionHash", {
		"value": 536870912}
);
Object.defineProperty(System.Dynamic.BindingRestrictions, "CustomRestrictionHash", {
		"value": 1073741824}
);
System.Dynamic.BindingRestrictions.Empty = null;
System.Dynamic.BindingRestrictions._cctor = function () {
	System.Dynamic.BindingRestrictions.Empty = new System.Dynamic.BindingRestrictions.CustomRestriction(System.Linq.Expressions.Expression.Constant$0(true));
};

$asm08.System.Dynamic.BindingRestrictions.TestBuilder.prototype.Append = function (restrictions) {
	if (this._unique.Contains(restrictions)) {
		return;
	}
	this._unique.Add(restrictions);
	this.Push(restrictions.GetExpression(), 0);
};
$asm08.System.Dynamic.BindingRestrictions.TestBuilder.prototype.ToExpression = function () {
	var expression = this._tests.Pop().Node;
__loop0__: 
	while (this._tests.Count > 0) {
		expression = System.Linq.Expressions.Expression.AndAlso$0(this._tests.Pop().Node, expression);
	}
	return expression;
};
$asm08.System.Dynamic.BindingRestrictions.TestBuilder.prototype.Push = function (node, depth) {
__loop0__: 
	for (; (this._tests.Count > 0) && (this._tests.Peek().Depth === depth); ++depth) {
		node = System.Linq.Expressions.Expression.AndAlso$0(this._tests.Pop().Node, node);
	}
	var item = new $asm08.System.Dynamic.BindingRestrictions.TestBuilder.AndNode();
	item.Node = node;
	item.Depth = depth;
	this._tests.Push(item.MemberwiseClone());
};
$asm08.System.Dynamic.BindingRestrictions.TestBuilder.prototype._ctor = function () {
	this._unique = JSIL.New($asm08.System.Linq.Expressions.Set$b1.Of(System.Dynamic.BindingRestrictions), "_ctor$0", []);
	this._tests = JSIL.New(System.Collections.Generic.Stack$b1.Of($asm08.System.Dynamic.BindingRestrictions.TestBuilder.AndNode), "_ctor$0", []);
	System.Object.prototype._ctor.call(this);
};
$asm08.System.Dynamic.BindingRestrictions.TestBuilder.prototype._unique = null;
$asm08.System.Dynamic.BindingRestrictions.TestBuilder.prototype._tests = null;

$asm08.System.Dynamic.BindingRestrictions.TestBuilder.AndNode.prototype.Depth = 0;
$asm08.System.Dynamic.BindingRestrictions.TestBuilder.AndNode.prototype.Node = null;

$asm08.System.Dynamic.BindingRestrictions.MergedRestriction.prototype._ctor = function (left, right) {
	System.Dynamic.BindingRestrictions.prototype._ctor.call(this);
	this.Left = left;
	this.Right = right;
};
$asm08.System.Dynamic.BindingRestrictions.MergedRestriction.prototype.GetExpression = function () {
	throw $asm08.System.Dynamic.Utils.ContractUtils.Unreachable;
};
$asm08.System.Dynamic.BindingRestrictions.MergedRestriction.prototype.Left = null;
$asm08.System.Dynamic.BindingRestrictions.MergedRestriction.prototype.Right = null;

$asm08.System.Dynamic.BindingRestrictions.CustomRestriction.prototype._ctor = function (expression) {
	System.Dynamic.BindingRestrictions.prototype._ctor.call(this);
	this._expression = expression;
};
$asm08.System.Dynamic.BindingRestrictions.CustomRestriction.prototype.Equals = function (obj) {
	var customRestriction = JSIL.TryCast(obj, $asm08.System.Dynamic.BindingRestrictions.CustomRestriction);
	return ((customRestriction !== null) && (customRestriction._expression === this._expression));
};
$asm08.System.Dynamic.BindingRestrictions.CustomRestriction.prototype.GetHashCode = function () {
	return (1073741824 ^ this._expression.GetHashCode());
};
$asm08.System.Dynamic.BindingRestrictions.CustomRestriction.prototype.GetExpression = function () {
	return this._expression;
};
$asm08.System.Dynamic.BindingRestrictions.CustomRestriction.prototype._expression = null;

$asm08.System.Dynamic.BindingRestrictions.TypeRestriction.prototype._ctor = function (parameter, type) {
	System.Dynamic.BindingRestrictions.prototype._ctor.call(this);
	this._expression = parameter;
	this._type = type;
};
$asm08.System.Dynamic.BindingRestrictions.TypeRestriction.prototype.Equals = function (obj) {
	var typeRestriction = JSIL.TryCast(obj, $asm08.System.Dynamic.BindingRestrictions.TypeRestriction);
	return (!((typeRestriction === null) || 
			!$asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(typeRestriction._type, this._type)) && (typeRestriction._expression === this._expression));
};
$asm08.System.Dynamic.BindingRestrictions.TypeRestriction.prototype.GetHashCode = function () {
	return ((268435456 ^ this._expression.GetHashCode()) ^ this._type.GetHashCode());
};
$asm08.System.Dynamic.BindingRestrictions.TypeRestriction.prototype.GetExpression = function () {
	return System.Linq.Expressions.Expression.TypeEqual(this._expression, this._type);
};
$asm08.System.Dynamic.BindingRestrictions.TypeRestriction.prototype._expression = null;
$asm08.System.Dynamic.BindingRestrictions.TypeRestriction.prototype._type = null;

$asm08.System.Dynamic.BindingRestrictions.InstanceRestriction.prototype._ctor = function (parameter, instance) {
	System.Dynamic.BindingRestrictions.prototype._ctor.call(this);
	this._expression = parameter;
	this._instance = instance;
};
$asm08.System.Dynamic.BindingRestrictions.InstanceRestriction.prototype.Equals = function (obj) {
	var instanceRestriction = JSIL.TryCast(obj, $asm08.System.Dynamic.BindingRestrictions.InstanceRestriction);
	return (!((instanceRestriction === null) || 
			(instanceRestriction._instance !== this._instance)) && (instanceRestriction._expression === this._expression));
};
$asm08.System.Dynamic.BindingRestrictions.InstanceRestriction.prototype.GetHashCode = function () {
	return ((536870912 ^ System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(this._instance)) ^ this._expression.GetHashCode());
};
$asm08.System.Dynamic.BindingRestrictions.InstanceRestriction.prototype.GetExpression = function () {
	if (this._instance === null) {
		return System.Linq.Expressions.Expression.Equal$0(System.Linq.Expressions.Expression.Convert$0(this._expression, System.Object), System.Linq.Expressions.Expression.Constant$0(null));
	}
	var parameterExpression = System.Linq.Expressions.Expression.Parameter$1(System.Object, null);
	return System.Linq.Expressions.Expression.Block$8(JSIL.Array.New(System.Linq.Expressions.ParameterExpression, [parameterExpression]), JSIL.Array.New(System.Linq.Expressions.Expression, [System.Linq.Expressions.Expression.Assign(parameterExpression, System.Linq.Expressions.Expression.Property$5(System.Linq.Expressions.Expression.Constant$0(JSIL.New(System.WeakReference, "_ctor$1", [this._instance])), System.WeakReference.GetProperty$6("Target"))), System.Linq.Expressions.Expression.AndAlso$0(
				System.Linq.Expressions.Expression.NotEqual$0(parameterExpression, System.Linq.Expressions.Expression.Constant$0(null)), 
				System.Linq.Expressions.Expression.Equal$0(System.Linq.Expressions.Expression.Convert$0(this._expression, System.Object), parameterExpression)
			)]));
};
$asm08.System.Dynamic.BindingRestrictions.InstanceRestriction.prototype._expression = null;
$asm08.System.Dynamic.BindingRestrictions.InstanceRestriction.prototype._instance = null;

$asm08.System.Dynamic.BindingRestrictions.BindingRestrictionsProxy.prototype._ctor = function (node) {
	System.Object.prototype._ctor.call(this);
	this._node = node;
};
$asm08.System.Dynamic.BindingRestrictions.BindingRestrictionsProxy.prototype.get_IsEmpty = function () {
	return (this._node === System.Dynamic.BindingRestrictions.Empty);
};
$asm08.System.Dynamic.BindingRestrictions.BindingRestrictionsProxy.prototype.get_Test = function () {
	return this._node.ToExpression();
};
$asm08.System.Dynamic.BindingRestrictions.BindingRestrictionsProxy.prototype.get_Restrictions = function () {
	var list = new (System.Collections.Generic.List$b1.Of(System.Dynamic.BindingRestrictions)) ();
	var stack = JSIL.New(System.Collections.Generic.Stack$b1.Of(System.Dynamic.BindingRestrictions), "_ctor$0", []);
	stack.Push(this._node);
__loop0__: 
	do {
		var bindingRestrictions = stack.Pop();
		var mergedRestriction = JSIL.TryCast(bindingRestrictions, $asm08.System.Dynamic.BindingRestrictions.MergedRestriction);
		if (mergedRestriction !== null) {
			stack.Push(mergedRestriction.Right);
			stack.Push(mergedRestriction.Left);
		} else {
			list.Add(bindingRestrictions);
		}
	} while (stack.Count > 0);
	return list.ToArray();
};
$asm08.System.Dynamic.BindingRestrictions.BindingRestrictionsProxy.prototype.toString = function () {
	return this._node.DebugView;
};
JSIL.MakeProperty($asm08.System.Dynamic.BindingRestrictions.BindingRestrictionsProxy.prototype, "IsEmpty", 
	$asm08.System.Dynamic.BindingRestrictions.BindingRestrictionsProxy.prototype.get_IsEmpty, null);
JSIL.MakeProperty($asm08.System.Dynamic.BindingRestrictions.BindingRestrictionsProxy.prototype, "Test", 
	$asm08.System.Dynamic.BindingRestrictions.BindingRestrictionsProxy.prototype.get_Test, null);
JSIL.MakeProperty($asm08.System.Dynamic.BindingRestrictions.BindingRestrictionsProxy.prototype, "Restrictions", 
	$asm08.System.Dynamic.BindingRestrictions.BindingRestrictionsProxy.prototype.get_Restrictions, null);
$asm08.System.Dynamic.BindingRestrictions.BindingRestrictionsProxy.prototype._node = null;

System.Dynamic.CallInfo.prototype._ctor$0 = function (argCount, argNames) {
	this._ctor$1(argCount, JSIL.Cast(argNames, System.Collections.Generic.IEnumerable$b1.Of(System.String)));
};
System.Dynamic.CallInfo.prototype._ctor$1 = function (argCount, argNames) {
	System.Object.prototype._ctor.call(this);
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(argNames, "argNames");
	var readOnlyCollection = $asm08.System.Dynamic.Utils.CollectionExtensions.ToReadOnly$b1(System.String)(argNames);
	if (argCount < readOnlyCollection.Count) {
		throw $asm08.System.Core.Error.ArgCntMustBeGreaterThanNameCnt();
	}
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNullItems$b1(System.String)(readOnlyCollection, "argNames");
	this._argCount = argCount;
	this._argNames = readOnlyCollection;
};
System.Dynamic.CallInfo.prototype.get_ArgumentCount = function () {
	return this._argCount;
};
System.Dynamic.CallInfo.prototype.get_ArgumentNames = function () {
	return this._argNames;
};
System.Dynamic.CallInfo.prototype.GetHashCode = function () {
	return (this._argCount ^ $asm08.System.Dynamic.Utils.CollectionExtensions.ListHashCode$b1(System.String)(this._argNames));
};
System.Dynamic.CallInfo.prototype.Equals = function (obj) {
	var callInfo = JSIL.TryCast(obj, System.Dynamic.CallInfo);
	return ((this._argCount === callInfo._argCount) && $asm08.System.Dynamic.Utils.CollectionExtensions.ListEquals$b1(System.String)(this._argNames, callInfo._argNames));
};
JSIL.OverloadedMethod(System.Dynamic.CallInfo.prototype, "_ctor", [
		["_ctor$0", [System.Int32, System.Array.Of(System.String)]], 
		["_ctor$1", [System.Int32, System.Collections.Generic.IEnumerable$b1.Of(System.String)]]
	]);
JSIL.MakeProperty(System.Dynamic.CallInfo.prototype, "ArgumentCount", 
	System.Dynamic.CallInfo.prototype.get_ArgumentCount, null);
JSIL.MakeProperty(System.Dynamic.CallInfo.prototype, "ArgumentNames", 
	System.Dynamic.CallInfo.prototype.get_ArgumentNames, null);
System.Dynamic.CallInfo.prototype._argCount = 0;
System.Dynamic.CallInfo.prototype._argNames = null;

System.Runtime.CompilerServices.CallSite.prototype._ctor = function (binder) {
	System.Object.prototype._ctor.call(this);
	this._binder = binder;
};
System.Runtime.CompilerServices.CallSite.prototype.get_Binder = function () {
	return this._binder;
};
System.Runtime.CompilerServices.CallSite.Create = function (delegateType, binder) {
	var obj = null;
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(delegateType, "delegateType");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(binder, "binder");
	if (!delegateType.IsSubclassOf(System.Delegate)) {
		throw $asm08.System.Core.Error.TypeMustBeDerivedFromSystemDelegate();
	}
	if (System.Runtime.CompilerServices.CallSite._SiteCtors === null) {
		System.Runtime.CompilerServices.CallSite._SiteCtors = new ($asm08.System.Dynamic.Utils.CacheDict$b2.Of(System.Type, System.Func$b2.Of(System.Runtime.CompilerServices.CallSiteBinder, System.Runtime.CompilerServices.CallSite))) (100);
	}
	var methodInfo = null;
	var siteCtors = System.Runtime.CompilerServices.CallSite._SiteCtors;
	System.Threading.Monitor.Enter((obj = siteCtors));
	try {
		if (!siteCtors.TryGetValue(delegateType, /* ref */ func)) {
			methodInfo = System.Runtime.CompilerServices.CallSite$b1.MakeGenericType(JSIL.Array.New(System.Type, [delegateType])).GetMethod$5("Create");
			if ($asm08.System.Dynamic.Utils.TypeUtils.CanCache(delegateType)) {
				var func = new JSIL.Variable(System.Delegate.CreateDelegate$9(System.Func$b2.Of(System.Runtime.CompilerServices.CallSiteBinder, System.Runtime.CompilerServices.CallSite), methodInfo));
				siteCtors.Add(delegateType, func.value);
			}
		}
	} finally {
		System.Threading.Monitor.Exit(obj);
	}
	if (func.value !== null) {
		return JSIL.UntranslatableInstruction("invokecallsitetarget:CallSite(class System.Func`2<class System.Runtime.CompilerServices.CallSiteBinder, class System.Runtime.CompilerServices.CallSite>::Invoke, ldloc:class System.Func`2<class System.Runtime.CompilerServices.CallSiteBinder, class System.Runtime.CompilerServices.CallSite>(func), ldloc:CallSiteBinder(binder))");
	}
	return JSIL.Cast(methodInfo.Invoke$1(null, [binder]), System.Runtime.CompilerServices.CallSite);
};
JSIL.MakeProperty(System.Runtime.CompilerServices.CallSite.prototype, "Binder", 
	System.Runtime.CompilerServices.CallSite.prototype.get_Binder, null);
System.Runtime.CompilerServices.CallSite._SiteCtors = null;
System.Runtime.CompilerServices.CallSite.prototype._binder = null;
System.Runtime.CompilerServices.CallSite.prototype._match = false;

System.Runtime.CompilerServices.CallSite$b1.prototype.get_Update = function () {
	if (this._match) {
		return System.Runtime.CompilerServices.CallSite$b1.Of(this.T)._CachedNoMatch;
	}
	return System.Runtime.CompilerServices.CallSite$b1.Of(this.T)._CachedUpdate;
};
System.Runtime.CompilerServices.CallSite$b1.prototype._ctor$0 = function (binder) {
	System.Runtime.CompilerServices.CallSite.prototype._ctor.call(this, binder);
	this.Target = this.GetUpdateDelegate$0();
};
System.Runtime.CompilerServices.CallSite$b1.prototype._ctor$1 = function () {
	System.Runtime.CompilerServices.CallSite.prototype._ctor.call(this, null);
};
System.Runtime.CompilerServices.CallSite$b1.prototype.CreateMatchMaker = function () {
	return JSIL.New(System.Runtime.CompilerServices.CallSite$b1.Of(this.T), "_ctor$1", []);
};
System.Runtime.CompilerServices.CallSite$b1.Create = function (binder) {
	return JSIL.New(System.Runtime.CompilerServices.CallSite$b1.Of(this.T), "_ctor$0", [binder]);
};
System.Runtime.CompilerServices.CallSite$b1.prototype.GetUpdateDelegate$0 = function () {
	return this.GetUpdateDelegate$1(/* ref */ new JSIL.MemberReference(System.Runtime.CompilerServices.CallSite$b1.Of(this.T), "_CachedUpdate"));
};
System.Runtime.CompilerServices.CallSite$b1.prototype.GetUpdateDelegate$1 = function (/* ref */ addr) {
	if (addr.value === null) {
		addr.value = this.MakeUpdateDelegate();
	}
	return addr.value;
};
System.Runtime.CompilerServices.CallSite$b1.prototype.ClearRuleCache = function () {
	var obj = null;
	System.Runtime.CompilerServices.CallSite.prototype.get_Binder.call(this).GetRuleCache$b1(this.T)();
	var cache = System.Runtime.CompilerServices.CallSite.prototype.get_Binder.call(this).Cache;
	if (cache !== null) {
		System.Threading.Monitor.Enter((obj = cache));
		try {
			cache.Clear();
		} finally {
			System.Threading.Monitor.Exit(obj);
		}
	}
};
System.Runtime.CompilerServices.CallSite$b1.prototype.AddRule = function (newRule) {
	var rules = this.Rules;
	if (rules === null) {
		this.Rules = JSIL.Array.New(this.T, [newRule]);
		return;
	}
	if (rules.length < 9) {
		var array = JSIL.Array.New(this.T, (rules.length + 1));
		System.Array.Copy$1(
			rules, 
			0, 
			array, 
			1, 
			rules.length
		);
	} else {
		array = JSIL.Array.New(this.T, 10);
		System.Array.Copy$1(
			rules, 
			0, 
			array, 
			1, 
			9
		);
	}
	array[0] = newRule;
	this.Rules = array;
};
System.Runtime.CompilerServices.CallSite$b1.prototype.MoveRule = function (i) {
	var rules = this.Rules;
	rules[i] = rules[(i - 1)];
	rules[(i - 1)] = rules[(i - 2)];
	rules[(i - 2)] = rules[i];
};
System.Runtime.CompilerServices.CallSite$b1.prototype.MakeUpdateDelegate = function () {
	var array = new JSIL.Variable(null);
	var typeFromHandle = this.T;
	var method = typeFromHandle.GetMethod$5("Invoke");
	if (!(!typeFromHandle.IsGenericType || !System.Runtime.CompilerServices.CallSite$b1.Of(this.T).IsSimpleSignature(method, /* ref */ array))) {
		var methodInfo = null;
		var methodInfo2 = null;
		if (method.ReturnType === System.Void) {
			if (typeFromHandle === $asm08.System.Linq.Expressions.Compiler.DelegateHelpers.GetActionType($asm08.System.Dynamic.Utils.CollectionExtensions.AddFirst$b1(System.Type)(JSIL.Cast(array.value, System.Collections.Generic.IList$b1.Of(System.Type)), System.Runtime.CompilerServices.CallSite))) {
				methodInfo = $asm08.System.Dynamic.UpdateDelegates.GetMethod$4(JSIL.ConcatString("UpdateAndExecuteVoid", array.value.length), (System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static));
				methodInfo2 = $asm08.System.Dynamic.UpdateDelegates.GetMethod$4(JSIL.ConcatString("NoMatchVoid", array.value.length), (System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static));
			}
		} else if (typeFromHandle === $asm08.System.Linq.Expressions.Compiler.DelegateHelpers.GetFuncType($asm08.System.Dynamic.Utils.CollectionExtensions.AddFirst$b1(System.Type)(JSIL.Cast(array.value, System.Collections.Generic.IList$b1.Of(System.Type)), System.Runtime.CompilerServices.CallSite))) {
			methodInfo = $asm08.System.Dynamic.UpdateDelegates.GetMethod$4(JSIL.ConcatString("UpdateAndExecute", (array.value.length - 1)), (System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static));
			methodInfo2 = $asm08.System.Dynamic.UpdateDelegates.GetMethod$4(JSIL.ConcatString("NoMatch", (array.value.length - 1)), (System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static));
		}
		if (methodInfo !== null) {
			System.Runtime.CompilerServices.CallSite$b1.Of(this.T)._CachedNoMatch = JSIL.Cast(System.Runtime.CompilerServices.CallSite$b1.Of(this.T).CreateDelegateHelper(typeFromHandle, methodInfo2.MakeGenericMethod(array.value)), this.T);
			return JSIL.Cast(System.Runtime.CompilerServices.CallSite$b1.Of(this.T).CreateDelegateHelper(typeFromHandle, methodInfo.MakeGenericMethod(array.value)), this.T);
		}
	}
	System.Runtime.CompilerServices.CallSite$b1.Of(this.T)._CachedNoMatch = this.CreateCustomNoMatchDelegate(method);
	return this.CreateCustomUpdateDelegate(method);
};
System.Runtime.CompilerServices.CallSite$b1.CreateDelegateHelper = function (delegateType, method) {
	return System.Delegate.CreateDelegate$9(delegateType, method);
};
System.Runtime.CompilerServices.CallSite$b1.IsSimpleSignature = function (invoke, /* ref */ sig) {
	var parametersCached = $asm08.System.Dynamic.Utils.TypeExtensions.GetParametersCached(invoke);
	$asm08.System.Dynamic.Utils.ContractUtils.Requires$1(((parametersCached.length > 0) && (parametersCached[0].ParameterType === System.Runtime.CompilerServices.CallSite)), "T");
	var array = JSIL.Array.New(System.Type, (invoke.ReturnType !== System.Void) ? parametersCached.length : (parametersCached.length - 1));
	var result = true;
__loop0__: 
	for (var i = 1; i < parametersCached.length; ++i) {
		var parameterInfo = parametersCached[i];
		if ($asm08.System.Dynamic.Utils.TypeExtensions.IsByRefParameter(parameterInfo)) {
			result = false;
		}
		array[(i - 1)] = parameterInfo.ParameterType;
	}
	if (invoke.ReturnType !== System.Void) {
		array[(array.length - 1)] = invoke.ReturnType;
	}
	sig.value = array;
	return result;
};
System.Runtime.CompilerServices.CallSite$b1.prototype.CreateCustomNoMatchDelegate = function (invoke) {
	var array = $asm08.System.Dynamic.Utils.CollectionExtensions.Map$b2(System.Reflection.ParameterInfo, System.Linq.Expressions.ParameterExpression)(
		JSIL.Cast($asm08.System.Dynamic.Utils.TypeExtensions.GetParametersCached(invoke), System.Collections.Generic.ICollection$b1.Of(System.Reflection.ParameterInfo)), 
		function (p) {
			return System.Linq.Expressions.Expression.Parameter$1(p.ParameterType, p.Name);
		}
	);
	var arg_2C_0 = array[0];
	return (System.Linq.Expressions.Expression.Lambda$b1$0(this.T)(System.Linq.Expressions.Expression.Block$0(
				System.Linq.Expressions.Expression.Call$0(System.Runtime.CompilerServices.CallSiteOps.GetMethod$5("SetNotMatched"), $asm08.System.Dynamic.Utils.CollectionExtensions.First$b1(System.Linq.Expressions.ParameterExpression)(array)), 
				System.Linq.Expressions.Expression.Default($asm08.System.Dynamic.Utils.TypeExtensions.GetReturnType(invoke))
			), array)).Compile$0();
};
System.Runtime.CompilerServices.CallSite$b1.prototype.CreateCustomUpdateDelegate = function (invoke) {
	var list = new (System.Collections.Generic.List$b1.Of(System.Linq.Expressions.Expression)) ();
	var list2 = new (System.Collections.Generic.List$b1.Of(System.Linq.Expressions.ParameterExpression)) ();
	var array = $asm08.System.Dynamic.Utils.CollectionExtensions.Map$b2(System.Reflection.ParameterInfo, System.Linq.Expressions.ParameterExpression)(
		JSIL.Cast($asm08.System.Dynamic.Utils.TypeExtensions.GetParametersCached(invoke), System.Collections.Generic.ICollection$b1.Of(System.Reflection.ParameterInfo)), 
		function (p) {
			return System.Linq.Expressions.Expression.Parameter$1(p.ParameterType, p.Name);
		}
	);
	var labelTarget = System.Linq.Expressions.Expression.Label$4($asm08.System.Dynamic.Utils.TypeExtensions.GetReturnType(invoke));
	var typeArguments = JSIL.Array.New(System.Type, [this.T]);
	var parameterExpression = array[0];
	var collection = $asm08.System.Dynamic.Utils.CollectionExtensions.RemoveFirst$b1(System.Linq.Expressions.ParameterExpression)(array);
	var parameterExpression2 = System.Linq.Expressions.Expression.Variable$1(System.Runtime.CompilerServices.CallSite$b1.Of(this.T), "this");
	list2.Add(parameterExpression2);
	list.Add(System.Linq.Expressions.Expression.Assign(parameterExpression2, System.Linq.Expressions.Expression.Convert$0(parameterExpression, parameterExpression2.Type)));
	var parameterExpression3 = System.Linq.Expressions.Expression.Variable$1(System.Array.Of(this.T), "applicable");
	list2.Add(parameterExpression3);
	var parameterExpression4 = System.Linq.Expressions.Expression.Variable$1(this.T, "rule");
	list2.Add(parameterExpression4);
	var parameterExpression5 = System.Linq.Expressions.Expression.Variable$1(this.T, "originalRule");
	list2.Add(parameterExpression5);
	list.Add(System.Linq.Expressions.Expression.Assign(parameterExpression5, System.Linq.Expressions.Expression.Field$1(parameterExpression2, "Target")));
	var parameterExpression6 = null;
	if (labelTarget.Type !== System.Void) {
		list2.Add((parameterExpression6 = System.Linq.Expressions.Expression.Variable$1(labelTarget.Type, "result")));
	}
	var parameterExpression7 = System.Linq.Expressions.Expression.Variable$1(System.Int32, "count");
	list2.Add(parameterExpression7);
	var parameterExpression8 = System.Linq.Expressions.Expression.Variable$1(System.Int32, "index");
	list2.Add(parameterExpression8);
	list.Add(System.Linq.Expressions.Expression.Assign(parameterExpression, System.Linq.Expressions.Expression.Call$12(System.Runtime.CompilerServices.CallSiteOps, "CreateMatchmaker", typeArguments, JSIL.Array.New(System.Linq.Expressions.Expression, [parameterExpression2]))));
	var test = System.Linq.Expressions.Expression.Call$0(System.Runtime.CompilerServices.CallSiteOps.GetMethod$5("GetMatch"), parameterExpression);
	var expression = System.Linq.Expressions.Expression.Call$0(System.Runtime.CompilerServices.CallSiteOps.GetMethod$5("ClearMatch"), parameterExpression);
	var arg = System.Linq.Expressions.Expression.Call$12(System.Runtime.CompilerServices.CallSiteOps, "UpdateRules", typeArguments, JSIL.Array.New(System.Linq.Expressions.Expression, [parameterExpression2, parameterExpression8]));
	if (labelTarget.Type === System.Void) {
		var expression2 = System.Linq.Expressions.Expression.Block$0(System.Linq.Expressions.Expression.Invoke$1(parameterExpression4, new ($asm08.System.Runtime.CompilerServices.TrueReadOnlyCollection$b1.Of(System.Linq.Expressions.Expression)) (array)), System.Linq.Expressions.Expression.IfThen(test, System.Linq.Expressions.Expression.Block$0(arg, System.Linq.Expressions.Expression.Return$0(labelTarget))));
	} else {
		expression2 = System.Linq.Expressions.Expression.Block$0(
			System.Linq.Expressions.Expression.Assign(parameterExpression6, System.Linq.Expressions.Expression.Invoke$1(parameterExpression4, new ($asm08.System.Runtime.CompilerServices.TrueReadOnlyCollection$b1.Of(System.Linq.Expressions.Expression)) (array))), 
			System.Linq.Expressions.Expression.IfThen(test, System.Linq.Expressions.Expression.Block$0(arg, System.Linq.Expressions.Expression.Return$2(labelTarget, parameterExpression6)))
		);
	}
	var arg2 = System.Linq.Expressions.Expression.Assign(parameterExpression4, System.Linq.Expressions.Expression.ArrayAccess$0(parameterExpression3, JSIL.Array.New(System.Linq.Expressions.Expression, [parameterExpression8])));
	var labelTarget2 = System.Linq.Expressions.Expression.Label$2();
	var arg3 = System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression.Equal$0(parameterExpression8, parameterExpression7), System.Linq.Expressions.Expression.Break$0(labelTarget2));
	var unaryExpression = System.Linq.Expressions.Expression.PreIncrementAssign$0(parameterExpression8);
	list.Add(System.Linq.Expressions.Expression.IfThen(
			System.Linq.Expressions.Expression.NotEqual$0(System.Linq.Expressions.Expression.Assign(parameterExpression3, System.Linq.Expressions.Expression.Call$12(System.Runtime.CompilerServices.CallSiteOps, "GetRules", typeArguments, JSIL.Array.New(System.Linq.Expressions.Expression, [parameterExpression2]))), System.Linq.Expressions.Expression.Constant$1(null, parameterExpression3.Type)), 
			System.Linq.Expressions.Expression.Block$1(
				System.Linq.Expressions.Expression.Assign(parameterExpression7, System.Linq.Expressions.Expression.ArrayLength(parameterExpression3)), 
				System.Linq.Expressions.Expression.Assign(parameterExpression8, System.Linq.Expressions.Expression.Constant$0(0)), 
				System.Linq.Expressions.Expression.Loop$2(System.Linq.Expressions.Expression.Block$2(arg3, arg2, System.Linq.Expressions.Expression.IfThen(
							System.Linq.Expressions.Expression.NotEqual$0(System.Linq.Expressions.Expression.Convert$0(parameterExpression4, System.Object), System.Linq.Expressions.Expression.Convert$0(parameterExpression5, System.Object)), 
							System.Linq.Expressions.Expression.Block$1(System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression.Field$1(parameterExpression2, "Target"), parameterExpression4), expression2, expression)
						), unaryExpression), labelTarget2, null)
			)
		));
	var parameterExpression9 = System.Linq.Expressions.Expression.Variable$1(System.Runtime.CompilerServices.RuleCache$b1.Of(this.T), "cache");
	list2.Add(parameterExpression9);
	list.Add(System.Linq.Expressions.Expression.Assign(parameterExpression9, System.Linq.Expressions.Expression.Call$12(System.Runtime.CompilerServices.CallSiteOps, "GetRuleCache", typeArguments, JSIL.Array.New(System.Linq.Expressions.Expression, [parameterExpression2]))));
	list.Add(System.Linq.Expressions.Expression.Assign(parameterExpression3, System.Linq.Expressions.Expression.Call$12(System.Runtime.CompilerServices.CallSiteOps, "GetCachedRules", typeArguments, JSIL.Array.New(System.Linq.Expressions.Expression, [parameterExpression9]))));
	if (labelTarget.Type === System.Void) {
		expression2 = System.Linq.Expressions.Expression.Block$0(System.Linq.Expressions.Expression.Invoke$1(parameterExpression4, new ($asm08.System.Runtime.CompilerServices.TrueReadOnlyCollection$b1.Of(System.Linq.Expressions.Expression)) (array)), System.Linq.Expressions.Expression.IfThen(test, System.Linq.Expressions.Expression.Return$0(labelTarget)));
	} else {
		expression2 = System.Linq.Expressions.Expression.Block$0(
			System.Linq.Expressions.Expression.Assign(parameterExpression6, System.Linq.Expressions.Expression.Invoke$1(parameterExpression4, new ($asm08.System.Runtime.CompilerServices.TrueReadOnlyCollection$b1.Of(System.Linq.Expressions.Expression)) (array))), 
			System.Linq.Expressions.Expression.IfThen(test, System.Linq.Expressions.Expression.Return$2(labelTarget, parameterExpression6))
		);
	}
	var arg4 = System.Linq.Expressions.Expression.TryFinally(expression2, System.Linq.Expressions.Expression.IfThen(test, System.Linq.Expressions.Expression.Block$0(
				System.Linq.Expressions.Expression.Call$12(System.Runtime.CompilerServices.CallSiteOps, "AddRule", typeArguments, JSIL.Array.New(System.Linq.Expressions.Expression, [parameterExpression2, parameterExpression4])), 
				System.Linq.Expressions.Expression.Call$12(System.Runtime.CompilerServices.CallSiteOps, "MoveRule", typeArguments, JSIL.Array.New(System.Linq.Expressions.Expression, [parameterExpression9, parameterExpression4, parameterExpression8]))
			)));
	arg2 = System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression.Field$1(parameterExpression2, "Target"), System.Linq.Expressions.Expression.Assign(parameterExpression4, System.Linq.Expressions.Expression.ArrayAccess$0(parameterExpression3, JSIL.Array.New(System.Linq.Expressions.Expression, [parameterExpression8]))));
	list.Add(System.Linq.Expressions.Expression.Assign(parameterExpression8, System.Linq.Expressions.Expression.Constant$0(0)));
	list.Add(System.Linq.Expressions.Expression.Assign(parameterExpression7, System.Linq.Expressions.Expression.ArrayLength(parameterExpression3)));
	list.Add(System.Linq.Expressions.Expression.Loop$2(System.Linq.Expressions.Expression.Block$3(
				arg3, 
				arg2, 
				arg4, 
				expression, 
				unaryExpression
			), labelTarget2, null));
	list.Add(System.Linq.Expressions.Expression.Assign(parameterExpression4, System.Linq.Expressions.Expression.Constant$1(null, parameterExpression4.Type)));
	var parameterExpression10 = System.Linq.Expressions.Expression.Variable$1(System.Array.Of(System.Object), "args");
	list2.Add(parameterExpression10);
	list.Add(System.Linq.Expressions.Expression.Assign(parameterExpression10, System.Linq.Expressions.Expression.NewArrayInit$0(System.Object, $asm08.System.Dynamic.Utils.CollectionExtensions.Map$b2(System.Linq.Expressions.ParameterExpression, System.Linq.Expressions.Expression)(JSIL.Cast(collection, System.Collections.Generic.ICollection$b1.Of(System.Linq.Expressions.ParameterExpression)), function (p) {
						return System.Runtime.CompilerServices.CallSite$b1.Of(this.T).Convert(p, System.Object);
					}))));
	var arg5 = System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression.Field$1(parameterExpression2, "Target"), parameterExpression5);
	arg2 = System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression.Field$1(parameterExpression2, "Target"), System.Linq.Expressions.Expression.Assign(parameterExpression4, System.Linq.Expressions.Expression.Call$12(System.Runtime.CompilerServices.CallSiteOps, "Bind", typeArguments, JSIL.Array.New(System.Linq.Expressions.Expression, [System.Linq.Expressions.Expression.Property$3(parameterExpression2, "Binder"), parameterExpression2, parameterExpression10]))));
	arg4 = System.Linq.Expressions.Expression.TryFinally(expression2, System.Linq.Expressions.Expression.IfThen(test, System.Linq.Expressions.Expression.Call$12(System.Runtime.CompilerServices.CallSiteOps, "AddRule", typeArguments, JSIL.Array.New(System.Linq.Expressions.Expression, [parameterExpression2, parameterExpression4]))));
	list.Add(System.Linq.Expressions.Expression.Loop$2(System.Linq.Expressions.Expression.Block$2(arg5, arg2, arg4, expression), null, null));
	list.Add(System.Linq.Expressions.Expression.Default(labelTarget.Type));
	var expression3 = System.Linq.Expressions.Expression.Lambda$b1$5(this.T)(
		System.Linq.Expressions.Expression.Label$1(labelTarget, System.Linq.Expressions.Expression.Block$10(new (System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(System.Linq.Expressions.ParameterExpression)) (list2), new (System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(System.Linq.Expressions.Expression)) (list))), 
		"CallSite.Target", 
		true, 
		new (System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(System.Linq.Expressions.ParameterExpression)) (JSIL.Cast(array, System.Collections.Generic.IList$b1.Of(System.Linq.Expressions.ParameterExpression)))
	);
	return expression3.Compile$0();
};
System.Runtime.CompilerServices.CallSite$b1.Convert = function (arg, type) {
	if ($asm08.System.Dynamic.Utils.TypeUtils.AreReferenceAssignable(type, arg.Type)) {
		return arg;
	}
	return System.Linq.Expressions.Expression.Convert$0(arg, type);
};
JSIL.OverloadedMethod(System.Runtime.CompilerServices.CallSite$b1.prototype, "_ctor", [
		["_ctor$0", [System.Runtime.CompilerServices.CallSiteBinder]], 
		["_ctor$1", []]
	]);
JSIL.OverloadedMethod(System.Runtime.CompilerServices.CallSite$b1.prototype, "GetUpdateDelegate", [
		["GetUpdateDelegate$0", []], 
		["GetUpdateDelegate$1", [JSIL.Reference.Of(JSIL.AnyType)]]
	]);
JSIL.MakeProperty(System.Runtime.CompilerServices.CallSite$b1.prototype, "Update", 
	System.Runtime.CompilerServices.CallSite$b1.prototype.get_Update, null);
Object.defineProperty(System.Runtime.CompilerServices.CallSite$b1, "MaxRules", {
		"value": 10}
);
System.Runtime.CompilerServices.CallSite$b1.prototype.Target = null;
System.Runtime.CompilerServices.CallSite$b1.prototype.Rules = null;
System.Runtime.CompilerServices.CallSite$b1._CachedUpdate = null;
System.Runtime.CompilerServices.CallSite$b1._CachedNoMatch = null;
System.Runtime.CompilerServices.CallSite$b1.$CachedAnonymousMethodDelegate1 = null;
System.Runtime.CompilerServices.CallSite$b1.$CachedAnonymousMethodDelegate4 = null;
System.Runtime.CompilerServices.CallSite$b1.$CachedAnonymousMethodDelegate5 = null;

System.Runtime.CompilerServices.CallSiteHelpers.IsInternalFrame = function (mb) {
	return (!(!(mb.Name == "CallSite.Target") || 
			((JSIL.GetType(mb)) === System.Runtime.CompilerServices.CallSiteHelpers._knownNonDynamicMethodType)) || (mb.DeclaringType === $asm08.System.Dynamic.UpdateDelegates));
};
System.Runtime.CompilerServices.CallSiteHelpers._knownNonDynamicMethodType = null;
System.Runtime.CompilerServices.CallSiteHelpers._cctor = function () {
	System.Runtime.CompilerServices.CallSiteHelpers._knownNonDynamicMethodType = (JSIL.GetType(System.Object.GetMethod$5("ToString")));
};

System.Runtime.CompilerServices.CallSiteOps.CreateMatchmaker$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, site) {
		var callSite = site.CreateMatchMaker();
		System.Runtime.CompilerServices.CallSiteOps.ClearMatch(callSite);
		return callSite;
	}
);
System.Runtime.CompilerServices.CallSiteOps.SetNotMatched = function (site) {
	site._match = false;
	return site._match;
};
System.Runtime.CompilerServices.CallSiteOps.GetMatch = function (site) {
	return site._match;
};
System.Runtime.CompilerServices.CallSiteOps.ClearMatch = function (site) {
	site._match = true;
};
System.Runtime.CompilerServices.CallSiteOps.AddRule$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, site, rule) {
		site.AddRule(rule);
	}
);
System.Runtime.CompilerServices.CallSiteOps.UpdateRules$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, $this, matched) {
		if (matched > 1) {
			$this.MoveRule(matched);
		}
	}
);
System.Runtime.CompilerServices.CallSiteOps.GetRules$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, site) {
		return site.Rules;
	}
);
System.Runtime.CompilerServices.CallSiteOps.GetRuleCache$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, site) {
		return site.Binder.GetRuleCache$b1(T)();
	}
);
System.Runtime.CompilerServices.CallSiteOps.MoveRule$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, cache, rule, i) {
		if (i > 1) {
			cache.MoveRule(rule, i);
		}
	}
);
System.Runtime.CompilerServices.CallSiteOps.GetCachedRules$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, cache) {
		return cache.GetRules();
	}
);
System.Runtime.CompilerServices.CallSiteOps.Bind$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, binder, site, args) {
		return binder.BindCore$b1(T)(site, args);
	}
);

System.Dynamic.ConvertBinder.prototype._ctor = function (type, explicit) {
	System.Dynamic.DynamicMetaObjectBinder.prototype._ctor.call(this);
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(type, "type");
	this._type = type;
	this._explicit = explicit;
};
System.Dynamic.ConvertBinder.prototype.get_Type = function () {
	return this._type;
};
System.Dynamic.ConvertBinder.prototype.get_Explicit = function () {
	return this._explicit;
};
System.Dynamic.ConvertBinder.prototype.FallbackConvert$0 = function (target) {
	return this.FallbackConvert$1(target, null);
};
System.Dynamic.ConvertBinder.prototype.Bind = function (target, args) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(target, "target");
	$asm08.System.Dynamic.Utils.ContractUtils.Requires$1(((args === null) || (args.length === 0)), "args");
	return target.BindConvert(this);
};
System.Dynamic.ConvertBinder.prototype.get_IsStandardBinder = function () {
	return true;
};
System.Dynamic.ConvertBinder.prototype.get_ReturnType = function () {
	return this._type;
};
JSIL.OverloadedMethod(System.Dynamic.ConvertBinder.prototype, "FallbackConvert", [
		["FallbackConvert$0", [System.Dynamic.DynamicMetaObject]], 
		["FallbackConvert$1", [System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject]]
	]);
JSIL.MakeProperty(System.Dynamic.ConvertBinder.prototype, "Type", 
	System.Dynamic.ConvertBinder.prototype.get_Type, null);
JSIL.MakeProperty(System.Dynamic.ConvertBinder.prototype, "Explicit", 
	System.Dynamic.ConvertBinder.prototype.get_Explicit, null);
JSIL.MakeProperty(System.Dynamic.ConvertBinder.prototype, "IsStandardBinder", 
	System.Dynamic.ConvertBinder.prototype.get_IsStandardBinder, null);
JSIL.MakeProperty(System.Dynamic.ConvertBinder.prototype, "ReturnType", 
	System.Dynamic.ConvertBinder.prototype.get_ReturnType, null);
System.Dynamic.ConvertBinder.prototype._type = null;
System.Dynamic.ConvertBinder.prototype._explicit = false;

System.Dynamic.CreateInstanceBinder.prototype._ctor = function (callInfo) {
	System.Dynamic.DynamicMetaObjectBinder.prototype._ctor.call(this);
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(callInfo, "callInfo");
	this._callInfo = callInfo;
};
System.Dynamic.CreateInstanceBinder.prototype.get_ReturnType = function () {
	return System.Object;
};
System.Dynamic.CreateInstanceBinder.prototype.get_CallInfo = function () {
	return this._callInfo;
};
System.Dynamic.CreateInstanceBinder.prototype.FallbackCreateInstance$0 = function (target, args) {
	return this.FallbackCreateInstance$1(target, args, null);
};
System.Dynamic.CreateInstanceBinder.prototype.Bind = function (target, args) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(target, "target");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNullItems$b1(System.Dynamic.DynamicMetaObject)(JSIL.Cast(args, System.Collections.Generic.IList$b1.Of(System.Dynamic.DynamicMetaObject)), "args");
	return target.BindCreateInstance(this, args);
};
System.Dynamic.CreateInstanceBinder.prototype.get_IsStandardBinder = function () {
	return true;
};
JSIL.OverloadedMethod(System.Dynamic.CreateInstanceBinder.prototype, "FallbackCreateInstance", [
		["FallbackCreateInstance$0", [System.Dynamic.DynamicMetaObject, System.Array.Of(System.Dynamic.DynamicMetaObject)]], 
		["FallbackCreateInstance$1", [System.Dynamic.DynamicMetaObject, System.Array.Of(System.Dynamic.DynamicMetaObject), System.Dynamic.DynamicMetaObject]]
	]);
JSIL.MakeProperty(System.Dynamic.CreateInstanceBinder.prototype, "ReturnType", 
	System.Dynamic.CreateInstanceBinder.prototype.get_ReturnType, null);
JSIL.MakeProperty(System.Dynamic.CreateInstanceBinder.prototype, "CallInfo", 
	System.Dynamic.CreateInstanceBinder.prototype.get_CallInfo, null);
JSIL.MakeProperty(System.Dynamic.CreateInstanceBinder.prototype, "IsStandardBinder", 
	System.Dynamic.CreateInstanceBinder.prototype.get_IsStandardBinder, null);
System.Dynamic.CreateInstanceBinder.prototype._callInfo = null;

System.Dynamic.DeleteIndexBinder.prototype._ctor = function (callInfo) {
	System.Dynamic.DynamicMetaObjectBinder.prototype._ctor.call(this);
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(callInfo, "callInfo");
	this._callInfo = callInfo;
};
System.Dynamic.DeleteIndexBinder.prototype.get_ReturnType = function () {
	return System.Void;
};
System.Dynamic.DeleteIndexBinder.prototype.get_CallInfo = function () {
	return this._callInfo;
};
System.Dynamic.DeleteIndexBinder.prototype.Bind = function (target, args) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(target, "target");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNullItems$b1(System.Dynamic.DynamicMetaObject)(JSIL.Cast(args, System.Collections.Generic.IList$b1.Of(System.Dynamic.DynamicMetaObject)), "args");
	return target.BindDeleteIndex(this, args);
};
System.Dynamic.DeleteIndexBinder.prototype.get_IsStandardBinder = function () {
	return true;
};
System.Dynamic.DeleteIndexBinder.prototype.FallbackDeleteIndex$0 = function (target, indexes) {
	return this.FallbackDeleteIndex$1(target, indexes, null);
};
JSIL.OverloadedMethod(System.Dynamic.DeleteIndexBinder.prototype, "FallbackDeleteIndex", [
		["FallbackDeleteIndex$0", [System.Dynamic.DynamicMetaObject, System.Array.Of(System.Dynamic.DynamicMetaObject)]], 
		["FallbackDeleteIndex$1", [System.Dynamic.DynamicMetaObject, System.Array.Of(System.Dynamic.DynamicMetaObject), System.Dynamic.DynamicMetaObject]]
	]);
JSIL.MakeProperty(System.Dynamic.DeleteIndexBinder.prototype, "ReturnType", 
	System.Dynamic.DeleteIndexBinder.prototype.get_ReturnType, null);
JSIL.MakeProperty(System.Dynamic.DeleteIndexBinder.prototype, "CallInfo", 
	System.Dynamic.DeleteIndexBinder.prototype.get_CallInfo, null);
JSIL.MakeProperty(System.Dynamic.DeleteIndexBinder.prototype, "IsStandardBinder", 
	System.Dynamic.DeleteIndexBinder.prototype.get_IsStandardBinder, null);
System.Dynamic.DeleteIndexBinder.prototype._callInfo = null;

System.Dynamic.DeleteMemberBinder.prototype._ctor = function (name, ignoreCase) {
	System.Dynamic.DynamicMetaObjectBinder.prototype._ctor.call(this);
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(name, "name");
	this._name = name;
	this._ignoreCase = ignoreCase;
};
System.Dynamic.DeleteMemberBinder.prototype.get_Name = function () {
	return this._name;
};
System.Dynamic.DeleteMemberBinder.prototype.get_IgnoreCase = function () {
	return this._ignoreCase;
};
System.Dynamic.DeleteMemberBinder.prototype.get_ReturnType = function () {
	return System.Void;
};
System.Dynamic.DeleteMemberBinder.prototype.FallbackDeleteMember$0 = function (target) {
	return this.FallbackDeleteMember$1(target, null);
};
System.Dynamic.DeleteMemberBinder.prototype.Bind = function (target, args) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(target, "target");
	$asm08.System.Dynamic.Utils.ContractUtils.Requires$0(((args === null) || (args.length === 0)));
	return target.BindDeleteMember(this);
};
System.Dynamic.DeleteMemberBinder.prototype.get_IsStandardBinder = function () {
	return true;
};
JSIL.OverloadedMethod(System.Dynamic.DeleteMemberBinder.prototype, "FallbackDeleteMember", [
		["FallbackDeleteMember$0", [System.Dynamic.DynamicMetaObject]], 
		["FallbackDeleteMember$1", [System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject]]
	]);
JSIL.MakeProperty(System.Dynamic.DeleteMemberBinder.prototype, "Name", 
	System.Dynamic.DeleteMemberBinder.prototype.get_Name, null);
JSIL.MakeProperty(System.Dynamic.DeleteMemberBinder.prototype, "IgnoreCase", 
	System.Dynamic.DeleteMemberBinder.prototype.get_IgnoreCase, null);
JSIL.MakeProperty(System.Dynamic.DeleteMemberBinder.prototype, "ReturnType", 
	System.Dynamic.DeleteMemberBinder.prototype.get_ReturnType, null);
JSIL.MakeProperty(System.Dynamic.DeleteMemberBinder.prototype, "IsStandardBinder", 
	System.Dynamic.DeleteMemberBinder.prototype.get_IsStandardBinder, null);
System.Dynamic.DeleteMemberBinder.prototype._name = null;
System.Dynamic.DeleteMemberBinder.prototype._ignoreCase = false;

System.Dynamic.DynamicMetaObject.prototype._ctor$0 = function (expression, restrictions) {
	System.Object.prototype._ctor.call(this);
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(expression, "expression");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(restrictions, "restrictions");
	this._expression = expression;
	this._restrictions = restrictions;
};
System.Dynamic.DynamicMetaObject.prototype._ctor$1 = function (expression, restrictions, value) {
	this._ctor$0(expression, restrictions);
	this._value = value;
	this._hasValue = true;
};
System.Dynamic.DynamicMetaObject.prototype.get_Expression = function () {
	return this._expression;
};
System.Dynamic.DynamicMetaObject.prototype.get_Restrictions = function () {
	return this._restrictions;
};
System.Dynamic.DynamicMetaObject.prototype.get_Value = function () {
	return this._value;
};
System.Dynamic.DynamicMetaObject.prototype.get_HasValue = function () {
	return this._hasValue;
};
System.Dynamic.DynamicMetaObject.prototype.get_RuntimeType = function () {
	if (!this._hasValue) {
		return null;
	}
	var type = this.Expression.Type;
	if (type.IsValueType) {
		return type;
	}
	if (this._value !== null) {
		return JSIL.GetType(this._value);
	}
	return null;
};
System.Dynamic.DynamicMetaObject.prototype.get_LimitType = function () {
	return JSIL.Coalesce(this.RuntimeType, this.Expression.Type);
};
System.Dynamic.DynamicMetaObject.prototype.BindConvert = function (binder) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(binder, "binder");
	return binder.FallbackConvert$0(this);
};
System.Dynamic.DynamicMetaObject.prototype.BindGetMember = function (binder) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(binder, "binder");
	return binder.FallbackGetMember$0(this);
};
System.Dynamic.DynamicMetaObject.prototype.BindSetMember = function (binder, value) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(binder, "binder");
	return binder.FallbackSetMember$0(this, value);
};
System.Dynamic.DynamicMetaObject.prototype.BindDeleteMember = function (binder) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(binder, "binder");
	return binder.FallbackDeleteMember$0(this);
};
System.Dynamic.DynamicMetaObject.prototype.BindGetIndex = function (binder, indexes) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(binder, "binder");
	return binder.FallbackGetIndex$0(this, indexes);
};
System.Dynamic.DynamicMetaObject.prototype.BindSetIndex = function (binder, indexes, value) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(binder, "binder");
	return binder.FallbackSetIndex$0(this, indexes, value);
};
System.Dynamic.DynamicMetaObject.prototype.BindDeleteIndex = function (binder, indexes) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(binder, "binder");
	return binder.FallbackDeleteIndex$0(this, indexes);
};
System.Dynamic.DynamicMetaObject.prototype.BindInvokeMember = function (binder, args) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(binder, "binder");
	return binder.FallbackInvokeMember$0(this, args);
};
System.Dynamic.DynamicMetaObject.prototype.BindInvoke = function (binder, args) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(binder, "binder");
	return binder.FallbackInvoke$0(this, args);
};
System.Dynamic.DynamicMetaObject.prototype.BindCreateInstance = function (binder, args) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(binder, "binder");
	return binder.FallbackCreateInstance$0(this, args);
};
System.Dynamic.DynamicMetaObject.prototype.BindUnaryOperation = function (binder) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(binder, "binder");
	return binder.FallbackUnaryOperation$0(this);
};
System.Dynamic.DynamicMetaObject.prototype.BindBinaryOperation = function (binder, arg) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(binder, "binder");
	return binder.FallbackBinaryOperation$0(this, arg);
};
System.Dynamic.DynamicMetaObject.prototype.GetDynamicMemberNames = function () {
	return JSIL.Array.New(System.String, 0);
};
System.Dynamic.DynamicMetaObject.GetExpressions = function (objects) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(objects, "objects");
	var array = JSIL.Array.New(System.Linq.Expressions.Expression, objects.length);
__loop0__: 
	for (var i = 0; i < objects.length; ++i) {
		var dynamicMetaObject = objects[i];
		$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(dynamicMetaObject, "objects");
		var expression = dynamicMetaObject.Expression;
		$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(expression, "objects");
		array[i] = expression;
	}
	return array;
};
System.Dynamic.DynamicMetaObject.Create = function (value, expression) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(expression, "expression");
	var dynamicMetaObjectProvider = JSIL.TryCast(value, System.Dynamic.IDynamicMetaObjectProvider);
	if (dynamicMetaObjectProvider === null) {
		return JSIL.New(System.Dynamic.DynamicMetaObject, "_ctor$1", [expression, System.Dynamic.BindingRestrictions.Empty, value]);
	}
	var metaObject = dynamicMetaObjectProvider.IDynamicMetaObjectProvider_GetMetaObject(expression);
	if (!((metaObject !== null) && 
			metaObject.HasValue && 
			(metaObject.Value !== null) && (metaObject.Expression === expression))) {
		throw $asm08.System.Core.Error.InvalidMetaObjectCreated(JSIL.GetType(dynamicMetaObjectProvider));
	}
	return metaObject;
};
JSIL.OverloadedMethod(System.Dynamic.DynamicMetaObject.prototype, "_ctor", [
		["_ctor$0", [System.Linq.Expressions.Expression, System.Dynamic.BindingRestrictions]], 
		["_ctor$1", [System.Linq.Expressions.Expression, System.Dynamic.BindingRestrictions, System.Object]]
	]);
JSIL.MakeProperty(System.Dynamic.DynamicMetaObject.prototype, "Expression", 
	System.Dynamic.DynamicMetaObject.prototype.get_Expression, null);
JSIL.MakeProperty(System.Dynamic.DynamicMetaObject.prototype, "Restrictions", 
	System.Dynamic.DynamicMetaObject.prototype.get_Restrictions, null);
JSIL.MakeProperty(System.Dynamic.DynamicMetaObject.prototype, "Value", 
	System.Dynamic.DynamicMetaObject.prototype.get_Value, null);
JSIL.MakeProperty(System.Dynamic.DynamicMetaObject.prototype, "HasValue", 
	System.Dynamic.DynamicMetaObject.prototype.get_HasValue, null);
JSIL.MakeProperty(System.Dynamic.DynamicMetaObject.prototype, "RuntimeType", 
	System.Dynamic.DynamicMetaObject.prototype.get_RuntimeType, null);
JSIL.MakeProperty(System.Dynamic.DynamicMetaObject.prototype, "LimitType", 
	System.Dynamic.DynamicMetaObject.prototype.get_LimitType, null);
System.Dynamic.DynamicMetaObject.prototype._expression = null;
System.Dynamic.DynamicMetaObject.prototype._restrictions = null;
System.Dynamic.DynamicMetaObject.prototype._value = null;
System.Dynamic.DynamicMetaObject.prototype._hasValue = false;
System.Dynamic.DynamicMetaObject.EmptyMetaObjects = null;
System.Dynamic.DynamicMetaObject._cctor = function () {
	System.Dynamic.DynamicMetaObject.EmptyMetaObjects = JSIL.Array.New(System.Dynamic.DynamicMetaObject, 0);
};

System.Dynamic.DynamicObject.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
System.Dynamic.DynamicObject.prototype.TryGetMember = function (binder, /* ref */ result) {
	result.value = null;
	return false;
};
System.Dynamic.DynamicObject.prototype.TrySetMember = function (binder, value) {
	return false;
};
System.Dynamic.DynamicObject.prototype.TryDeleteMember = function (binder) {
	return false;
};
System.Dynamic.DynamicObject.prototype.TryInvokeMember = function (binder, args, /* ref */ result) {
	result.value = null;
	return false;
};
System.Dynamic.DynamicObject.prototype.TryConvert = function (binder, /* ref */ result) {
	result.value = null;
	return false;
};
System.Dynamic.DynamicObject.prototype.TryCreateInstance = function (binder, args, /* ref */ result) {
	result.value = null;
	return false;
};
System.Dynamic.DynamicObject.prototype.TryInvoke = function (binder, args, /* ref */ result) {
	result.value = null;
	return false;
};
System.Dynamic.DynamicObject.prototype.TryBinaryOperation = function (binder, arg, /* ref */ result) {
	result.value = null;
	return false;
};
System.Dynamic.DynamicObject.prototype.TryUnaryOperation = function (binder, /* ref */ result) {
	result.value = null;
	return false;
};
System.Dynamic.DynamicObject.prototype.TryGetIndex = function (binder, indexes, /* ref */ result) {
	result.value = null;
	return false;
};
System.Dynamic.DynamicObject.prototype.TrySetIndex = function (binder, indexes, value) {
	return false;
};
System.Dynamic.DynamicObject.prototype.TryDeleteIndex = function (binder, indexes) {
	return false;
};
System.Dynamic.DynamicObject.prototype.GetDynamicMemberNames = function () {
	return JSIL.Array.New(System.String, 0);
};
System.Dynamic.DynamicObject.prototype.GetMetaObject = function (parameter) {
	return new $asm08.System.Dynamic.DynamicObject.MetaDynamic(parameter, this);
};

$asm08.System.Dynamic.DynamicObject.MetaDynamic.prototype._ctor = function (expression, value) {
	System.Dynamic.DynamicMetaObject.prototype._ctor$1.call(this, expression, System.Dynamic.BindingRestrictions.Empty, value);
};
$asm08.System.Dynamic.DynamicObject.MetaDynamic.prototype.GetDynamicMemberNames = function () {
	return this.Value.GetDynamicMemberNames();
};
$asm08.System.Dynamic.DynamicObject.MetaDynamic.prototype.BindGetMember = function (binder) {
	var $l$gc__DisplayClass = new $asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClass2();
	$l$gc__DisplayClass.binder = binder;
	$l$gc__DisplayClass.$this = this;
	if (this.IsOverridden("TryGetMember")) {
		return this.CallMethodWithResult$0("TryGetMember", $l$gc__DisplayClass.binder, $asm08.System.Dynamic.DynamicObject.MetaDynamic.NoArgs, function (e) {
				return $l$gc__DisplayClass.binder.FallbackGetMember$1($l$gc__DisplayClass.$this, e);
			});
	}
	return System.Dynamic.DynamicMetaObject.prototype.BindGetMember.call(this, $l$gc__DisplayClass.binder);
};
$asm08.System.Dynamic.DynamicObject.MetaDynamic.prototype.BindSetMember = function (binder, value) {
	var $l$gc__DisplayClass = new $asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClass6();
	$l$gc__DisplayClass.binder = binder;
	$l$gc__DisplayClass.value = value;
	$l$gc__DisplayClass.$this = this;
	if (this.IsOverridden("TrySetMember")) {
		return this.CallMethodReturnLast(
			"TrySetMember", 
			$l$gc__DisplayClass.binder, 
			$asm08.System.Dynamic.DynamicObject.MetaDynamic.GetArgs(JSIL.Array.New(System.Dynamic.DynamicMetaObject, [$l$gc__DisplayClass.value])), 
			function (e) {
				return $l$gc__DisplayClass.binder.FallbackSetMember$1($l$gc__DisplayClass.$this, $l$gc__DisplayClass.value, e);
			}
		);
	}
	return System.Dynamic.DynamicMetaObject.prototype.BindSetMember.call(this, $l$gc__DisplayClass.binder, $l$gc__DisplayClass.value);
};
$asm08.System.Dynamic.DynamicObject.MetaDynamic.prototype.BindDeleteMember = function (binder) {
	var $l$gc__DisplayClassa = new $asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClassa();
	$l$gc__DisplayClassa.binder = binder;
	$l$gc__DisplayClassa.$this = this;
	if (this.IsOverridden("TryDeleteMember")) {
		return this.CallMethodNoResult("TryDeleteMember", $l$gc__DisplayClassa.binder, $asm08.System.Dynamic.DynamicObject.MetaDynamic.NoArgs, function (e) {
				return $l$gc__DisplayClassa.binder.FallbackDeleteMember$1($l$gc__DisplayClassa.$this, e);
			});
	}
	return System.Dynamic.DynamicMetaObject.prototype.BindDeleteMember.call(this, $l$gc__DisplayClassa.binder);
};
$asm08.System.Dynamic.DynamicObject.MetaDynamic.prototype.BindConvert = function (binder) {
	var $l$gc__DisplayClasse = new $asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClasse();
	$l$gc__DisplayClasse.binder = binder;
	$l$gc__DisplayClasse.$this = this;
	if (this.IsOverridden("TryConvert")) {
		return this.CallMethodWithResult$0("TryConvert", $l$gc__DisplayClasse.binder, $asm08.System.Dynamic.DynamicObject.MetaDynamic.NoArgs, function (e) {
				return $l$gc__DisplayClasse.binder.FallbackConvert$1($l$gc__DisplayClasse.$this, e);
			});
	}
	return System.Dynamic.DynamicMetaObject.prototype.BindConvert.call(this, $l$gc__DisplayClasse.binder);
};
$asm08.System.Dynamic.DynamicObject.MetaDynamic.prototype.BindInvokeMember = function (binder, args) {
	var $l$gc__DisplayClass = new $asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClass12();
	$l$gc__DisplayClass.binder = binder;
	$l$gc__DisplayClass.args = args;
	$l$gc__DisplayClass.$this = this;
	var fallback = function (e) {
		return $l$gc__DisplayClass.binder.FallbackInvokeMember$1($l$gc__DisplayClass.$this, $l$gc__DisplayClass.args, e);
	};
	var errorSuggestion = this.BuildCallMethodWithResult(
		"TryInvokeMember", 
		$l$gc__DisplayClass.binder, 
		$asm08.System.Dynamic.DynamicObject.MetaDynamic.GetArgArray$0($l$gc__DisplayClass.args), 
		this.BuildCallMethodWithResult(
			"TryGetMember", 
			new $asm08.System.Dynamic.DynamicObject.MetaDynamic.GetBinderAdapter($l$gc__DisplayClass.binder), 
			$asm08.System.Dynamic.DynamicObject.MetaDynamic.NoArgs, 
			fallback(null), 
			function (e) {
				return $l$gc__DisplayClass.binder.FallbackInvoke(e, $l$gc__DisplayClass.args, null);
			}
		), 
		null
	);
	return fallback(errorSuggestion);
};
$asm08.System.Dynamic.DynamicObject.MetaDynamic.prototype.BindCreateInstance = function (binder, args) {
	var $l$gc__DisplayClass = new $asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClass16();
	$l$gc__DisplayClass.binder = binder;
	$l$gc__DisplayClass.args = args;
	$l$gc__DisplayClass.$this = this;
	if (this.IsOverridden("TryCreateInstance")) {
		return this.CallMethodWithResult$0("TryCreateInstance", $l$gc__DisplayClass.binder, $asm08.System.Dynamic.DynamicObject.MetaDynamic.GetArgArray$0($l$gc__DisplayClass.args), function (e) {
				return $l$gc__DisplayClass.binder.FallbackCreateInstance$1($l$gc__DisplayClass.$this, $l$gc__DisplayClass.args, e);
			});
	}
	return System.Dynamic.DynamicMetaObject.prototype.BindCreateInstance.call(this, $l$gc__DisplayClass.binder, $l$gc__DisplayClass.args);
};
$asm08.System.Dynamic.DynamicObject.MetaDynamic.prototype.BindInvoke = function (binder, args) {
	var $l$gc__DisplayClass1a = new $asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClass1a();
	$l$gc__DisplayClass1a.binder = binder;
	$l$gc__DisplayClass1a.args = args;
	$l$gc__DisplayClass1a.$this = this;
	if (this.IsOverridden("TryInvoke")) {
		return this.CallMethodWithResult$0("TryInvoke", $l$gc__DisplayClass1a.binder, $asm08.System.Dynamic.DynamicObject.MetaDynamic.GetArgArray$0($l$gc__DisplayClass1a.args), function (e) {
				return $l$gc__DisplayClass1a.binder.FallbackInvoke$1($l$gc__DisplayClass1a.$this, $l$gc__DisplayClass1a.args, e);
			});
	}
	return System.Dynamic.DynamicMetaObject.prototype.BindInvoke.call(this, $l$gc__DisplayClass1a.binder, $l$gc__DisplayClass1a.args);
};
$asm08.System.Dynamic.DynamicObject.MetaDynamic.prototype.BindBinaryOperation = function (binder, arg) {
	var $l$gc__DisplayClass1e = new $asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClass1e();
	$l$gc__DisplayClass1e.binder = binder;
	$l$gc__DisplayClass1e.arg = arg;
	$l$gc__DisplayClass1e.$this = this;
	if (this.IsOverridden("TryBinaryOperation")) {
		return this.CallMethodWithResult$0(
			"TryBinaryOperation", 
			$l$gc__DisplayClass1e.binder, 
			$asm08.System.Dynamic.DynamicObject.MetaDynamic.GetArgs(JSIL.Array.New(System.Dynamic.DynamicMetaObject, [$l$gc__DisplayClass1e.arg])), 
			function (e) {
				return $l$gc__DisplayClass1e.binder.FallbackBinaryOperation$1($l$gc__DisplayClass1e.$this, $l$gc__DisplayClass1e.arg, e);
			}
		);
	}
	return System.Dynamic.DynamicMetaObject.prototype.BindBinaryOperation.call(this, $l$gc__DisplayClass1e.binder, $l$gc__DisplayClass1e.arg);
};
$asm08.System.Dynamic.DynamicObject.MetaDynamic.prototype.BindUnaryOperation = function (binder) {
	var $l$gc__DisplayClass = new $asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClass22();
	$l$gc__DisplayClass.binder = binder;
	$l$gc__DisplayClass.$this = this;
	if (this.IsOverridden("TryUnaryOperation")) {
		return this.CallMethodWithResult$0("TryUnaryOperation", $l$gc__DisplayClass.binder, $asm08.System.Dynamic.DynamicObject.MetaDynamic.NoArgs, function (e) {
				return $l$gc__DisplayClass.binder.FallbackUnaryOperation$1($l$gc__DisplayClass.$this, e);
			});
	}
	return System.Dynamic.DynamicMetaObject.prototype.BindUnaryOperation.call(this, $l$gc__DisplayClass.binder);
};
$asm08.System.Dynamic.DynamicObject.MetaDynamic.prototype.BindGetIndex = function (binder, indexes) {
	var $l$gc__DisplayClass = new $asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClass26();
	$l$gc__DisplayClass.binder = binder;
	$l$gc__DisplayClass.indexes = indexes;
	$l$gc__DisplayClass.$this = this;
	if (this.IsOverridden("TryGetIndex")) {
		return this.CallMethodWithResult$0("TryGetIndex", $l$gc__DisplayClass.binder, $asm08.System.Dynamic.DynamicObject.MetaDynamic.GetArgArray$0($l$gc__DisplayClass.indexes), function (e) {
				return $l$gc__DisplayClass.binder.FallbackGetIndex$1($l$gc__DisplayClass.$this, $l$gc__DisplayClass.indexes, e);
			});
	}
	return System.Dynamic.DynamicMetaObject.prototype.BindGetIndex.call(this, $l$gc__DisplayClass.binder, $l$gc__DisplayClass.indexes);
};
$asm08.System.Dynamic.DynamicObject.MetaDynamic.prototype.BindSetIndex = function (binder, indexes, value) {
	var $l$gc__DisplayClass2a = new $asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClass2a();
	$l$gc__DisplayClass2a.binder = binder;
	$l$gc__DisplayClass2a.indexes = indexes;
	$l$gc__DisplayClass2a.value = value;
	$l$gc__DisplayClass2a.$this = this;
	if (this.IsOverridden("TrySetIndex")) {
		return this.CallMethodReturnLast("TrySetIndex", $l$gc__DisplayClass2a.binder, $asm08.System.Dynamic.DynamicObject.MetaDynamic.GetArgArray$1($l$gc__DisplayClass2a.indexes, $l$gc__DisplayClass2a.value), function (e) {
				return $l$gc__DisplayClass2a.binder.FallbackSetIndex$1($l$gc__DisplayClass2a.$this, $l$gc__DisplayClass2a.indexes, $l$gc__DisplayClass2a.value, e);
			});
	}
	return System.Dynamic.DynamicMetaObject.prototype.BindSetIndex.call(this, $l$gc__DisplayClass2a.binder, $l$gc__DisplayClass2a.indexes, $l$gc__DisplayClass2a.value);
};
$asm08.System.Dynamic.DynamicObject.MetaDynamic.prototype.BindDeleteIndex = function (binder, indexes) {
	var $l$gc__DisplayClass2e = new $asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClass2e();
	$l$gc__DisplayClass2e.binder = binder;
	$l$gc__DisplayClass2e.indexes = indexes;
	$l$gc__DisplayClass2e.$this = this;
	if (this.IsOverridden("TryDeleteIndex")) {
		return this.CallMethodNoResult("TryDeleteIndex", $l$gc__DisplayClass2e.binder, $asm08.System.Dynamic.DynamicObject.MetaDynamic.GetArgArray$0($l$gc__DisplayClass2e.indexes), function (e) {
				return $l$gc__DisplayClass2e.binder.FallbackDeleteIndex$1($l$gc__DisplayClass2e.$this, $l$gc__DisplayClass2e.indexes, e);
			});
	}
	return System.Dynamic.DynamicMetaObject.prototype.BindDeleteIndex.call(this, $l$gc__DisplayClass2e.binder, $l$gc__DisplayClass2e.indexes);
};
$asm08.System.Dynamic.DynamicObject.MetaDynamic.GetArgs = function (args) {
	var expressions = System.Dynamic.DynamicMetaObject.GetExpressions(args);
__loop0__: 
	for (var i = 0; i < expressions.length; ++i) {
		expressions[i] = System.Linq.Expressions.Expression.Convert$0(args[i].Expression, System.Object);
	}
	return expressions;
};
$asm08.System.Dynamic.DynamicObject.MetaDynamic.GetArgArray$0 = function (args) {
	return JSIL.Array.New(System.Linq.Expressions.NewArrayExpression, [System.Linq.Expressions.Expression.NewArrayInit$0(System.Object, $asm08.System.Dynamic.DynamicObject.MetaDynamic.GetArgs(args))]);
};
$asm08.System.Dynamic.DynamicObject.MetaDynamic.GetArgArray$1 = function (args, value) {
	return JSIL.Array.New(System.Linq.Expressions.Expression, [System.Linq.Expressions.Expression.NewArrayInit$0(System.Object, $asm08.System.Dynamic.DynamicObject.MetaDynamic.GetArgs(args)), System.Linq.Expressions.Expression.Convert$0(value.Expression, System.Object)]);
};
$asm08.System.Dynamic.DynamicObject.MetaDynamic.Constant = function (binder) {
__loop0__: 
	for (var type = (JSIL.GetType(binder)); !type.IsVisible; type = type.BaseType) {
	}
	return System.Linq.Expressions.Expression.Constant$1(binder, type);
};
$asm08.System.Dynamic.DynamicObject.MetaDynamic.prototype.CallMethodWithResult$0 = function (methodName, binder, args, fallback) {
	return this.CallMethodWithResult$1(
		methodName, 
		binder, 
		args, 
		fallback, 
		null
	);
};
$asm08.System.Dynamic.DynamicObject.MetaDynamic.prototype.CallMethodWithResult$1 = function (methodName, binder, args, fallback, fallbackInvoke) {
	var fallbackResult = fallback(null);
	var errorSuggestion = this.BuildCallMethodWithResult(
		methodName, 
		binder, 
		args, 
		fallbackResult, 
		fallbackInvoke
	);
	return fallback(errorSuggestion);
};
$asm08.System.Dynamic.DynamicObject.MetaDynamic.prototype.BuildCallMethodWithResult = function (methodName, binder, args, fallbackResult, fallbackInvoke) {
	if (!this.IsOverridden(methodName)) {
		return fallbackResult;
	}
	var parameterExpression = System.Linq.Expressions.Expression.Parameter$1(System.Object, null);
	var array = JSIL.Array.New(System.Linq.Expressions.Expression, (args.length + 2));
	System.Array.Copy$1(
		args, 
		0, 
		array, 
		1, 
		args.length
	);
	array[0] = $asm08.System.Dynamic.DynamicObject.MetaDynamic.Constant(binder);
	array[(array.length - 1)] = parameterExpression;
	var dynamicMetaObject = JSIL.New(System.Dynamic.DynamicMetaObject, "_ctor$0", [parameterExpression, System.Dynamic.BindingRestrictions.Empty]);
	if (binder.ReturnType !== System.Object) {
		var expression = System.Linq.Expressions.Expression.Convert$0(dynamicMetaObject.Expression, binder.ReturnType);
		dynamicMetaObject = JSIL.New(System.Dynamic.DynamicMetaObject, "_ctor$0", [expression, dynamicMetaObject.Restrictions]);
	}
	if (fallbackInvoke !== null) {
		dynamicMetaObject = fallbackInvoke(dynamicMetaObject);
	}
	return JSIL.New(System.Dynamic.DynamicMetaObject, "_ctor$0", [System.Linq.Expressions.Expression.Block$8(JSIL.Array.New(System.Linq.Expressions.ParameterExpression, [parameterExpression]), JSIL.Array.New(System.Linq.Expressions.Expression, [System.Linq.Expressions.Expression.Condition$1(System.Linq.Expressions.Expression.Call$8(this.GetLimitedSelf(), System.Dynamic.DynamicObject.GetMethod$5(methodName), array), dynamicMetaObject.Expression, fallbackResult.Expression, binder.ReturnType)])), this.GetRestrictions().Merge(dynamicMetaObject.Restrictions).Merge(fallbackResult.Restrictions)]);
};
$asm08.System.Dynamic.DynamicObject.MetaDynamic.prototype.CallMethodReturnLast = function (methodName, binder, args, fallback) {
	var dynamicMetaObject = fallback(null);
	var parameterExpression = System.Linq.Expressions.Expression.Parameter$1(System.Object, null);
	var array = $asm08.System.Dynamic.Utils.CollectionExtensions.AddFirst$b1(System.Linq.Expressions.Expression)(JSIL.Cast(args, System.Collections.Generic.IList$b1.Of(System.Linq.Expressions.Expression)), $asm08.System.Dynamic.DynamicObject.MetaDynamic.Constant(binder));
	array[args.length] = System.Linq.Expressions.Expression.Assign(parameterExpression, array[args.length]);
	var errorSuggestion = JSIL.New(System.Dynamic.DynamicMetaObject, "_ctor$0", [System.Linq.Expressions.Expression.Block$8(JSIL.Array.New(System.Linq.Expressions.ParameterExpression, [parameterExpression]), JSIL.Array.New(System.Linq.Expressions.Expression, [System.Linq.Expressions.Expression.Condition$1(System.Linq.Expressions.Expression.Call$8(this.GetLimitedSelf(), System.Dynamic.DynamicObject.GetMethod$5(methodName), array), parameterExpression, dynamicMetaObject.Expression, System.Object)])), this.GetRestrictions().Merge(dynamicMetaObject.Restrictions)]);
	return fallback(errorSuggestion);
};
$asm08.System.Dynamic.DynamicObject.MetaDynamic.prototype.CallMethodNoResult = function (methodName, binder, args, fallback) {
	var dynamicMetaObject = fallback(null);
	var errorSuggestion = JSIL.New(System.Dynamic.DynamicMetaObject, "_ctor$0", [System.Linq.Expressions.Expression.Condition$1(System.Linq.Expressions.Expression.Call$8(this.GetLimitedSelf(), System.Dynamic.DynamicObject.GetMethod$5(methodName), $asm08.System.Dynamic.Utils.CollectionExtensions.AddFirst$b1(System.Linq.Expressions.Expression)(JSIL.Cast(args, System.Collections.Generic.IList$b1.Of(System.Linq.Expressions.Expression)), $asm08.System.Dynamic.DynamicObject.MetaDynamic.Constant(binder))), System.Linq.Expressions.Expression.Empty(), dynamicMetaObject.Expression, System.Void), this.GetRestrictions().Merge(dynamicMetaObject.Restrictions)]);
	return fallback(errorSuggestion);
};
$asm08.System.Dynamic.DynamicObject.MetaDynamic.prototype.IsOverridden = function (method) {
	var member = JSIL.GetType(this.Value).GetMember$2(method, System.Reflection.MemberTypes.Method, (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public));
	var array = member;
__loop0__: 
	for (var i = 0; i < array.length; ++i) {
		var methodInfo = JSIL.Cast(array[i], System.Reflection.MethodInfo);
		if (!((methodInfo.DeclaringType === System.Dynamic.DynamicObject) || (methodInfo.GetBaseDefinition().DeclaringType !== System.Dynamic.DynamicObject))) {
			return true;
		}
	}
	return false;
};
$asm08.System.Dynamic.DynamicObject.MetaDynamic.prototype.GetRestrictions = function () {
	return System.Dynamic.BindingRestrictions.GetTypeRestriction$1(this);
};
$asm08.System.Dynamic.DynamicObject.MetaDynamic.prototype.GetLimitedSelf = function () {
	if ($asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(System.Dynamic.DynamicMetaObject.prototype.get_Expression.call(this).Type, System.Dynamic.DynamicObject)) {
		return System.Dynamic.DynamicMetaObject.prototype.get_Expression.call(this);
	}
	return System.Linq.Expressions.Expression.Convert$0(System.Dynamic.DynamicMetaObject.prototype.get_Expression.call(this), System.Dynamic.DynamicObject);
};
$asm08.System.Dynamic.DynamicObject.MetaDynamic.prototype.get_Value = function () {
	return JSIL.Cast(System.Dynamic.DynamicMetaObject.prototype.get_Value.call(this), System.Dynamic.DynamicObject);
};
JSIL.OverloadedMethod($asm08.System.Dynamic.DynamicObject.MetaDynamic, "GetArgArray", [
		["GetArgArray$0", [System.Array.Of(System.Dynamic.DynamicMetaObject)]], 
		["GetArgArray$1", [System.Array.Of(System.Dynamic.DynamicMetaObject), System.Dynamic.DynamicMetaObject]]
	]);
JSIL.OverloadedMethod($asm08.System.Dynamic.DynamicObject.MetaDynamic.prototype, "CallMethodWithResult", [
		["CallMethodWithResult$0", [System.String, System.Dynamic.DynamicMetaObjectBinder, System.Array.Of(System.Linq.Expressions.Expression), $asm08.System.Dynamic.DynamicObject.MetaDynamic.Fallback]], 
		["CallMethodWithResult$1", [System.String, System.Dynamic.DynamicMetaObjectBinder, System.Array.Of(System.Linq.Expressions.Expression), $asm08.System.Dynamic.DynamicObject.MetaDynamic.Fallback, $asm08.System.Dynamic.DynamicObject.MetaDynamic.Fallback]]
	]);
JSIL.MakeProperty($asm08.System.Dynamic.DynamicObject.MetaDynamic.prototype, "Value", 
	$asm08.System.Dynamic.DynamicObject.MetaDynamic.prototype.get_Value, null);
$asm08.System.Dynamic.DynamicObject.MetaDynamic.NoArgs = null;
$asm08.System.Dynamic.DynamicObject.MetaDynamic._cctor = function () {
	$asm08.System.Dynamic.DynamicObject.MetaDynamic.NoArgs = JSIL.Array.New(System.Linq.Expressions.Expression, 0);
};

$asm08.System.Dynamic.DynamicObject.MetaDynamic.GetBinderAdapter.prototype._ctor = function (binder) {
	System.Dynamic.GetMemberBinder.prototype._ctor.call(this, binder.Name, binder.IgnoreCase);
};
$asm08.System.Dynamic.DynamicObject.MetaDynamic.GetBinderAdapter.prototype.FallbackGetMember = function (target, errorSuggestion) {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};

$asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClass2.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClass2.prototype.$this = null;
$asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClass2.prototype.binder = null;

$asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClass6.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClass6.prototype.$this = null;
$asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClass6.prototype.binder = null;
$asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClass6.prototype.value = null;

$asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClassa.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClassa.prototype.$this = null;
$asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClassa.prototype.binder = null;

$asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClasse.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClasse.prototype.$this = null;
$asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClasse.prototype.binder = null;

$asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClass12.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClass12.prototype.$this = null;
$asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClass12.prototype.binder = null;
$asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClass12.prototype.args = null;

$asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClass16.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClass16.prototype.$this = null;
$asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClass16.prototype.binder = null;
$asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClass16.prototype.args = null;

$asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClass1a.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClass1a.prototype.$this = null;
$asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClass1a.prototype.binder = null;
$asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClass1a.prototype.args = null;

$asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClass1e.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClass1e.prototype.$this = null;
$asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClass1e.prototype.binder = null;
$asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClass1e.prototype.arg = null;

$asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClass22.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClass22.prototype.$this = null;
$asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClass22.prototype.binder = null;

$asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClass26.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClass26.prototype.$this = null;
$asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClass26.prototype.binder = null;
$asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClass26.prototype.indexes = null;

$asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClass2a.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClass2a.prototype.$this = null;
$asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClass2a.prototype.binder = null;
$asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClass2a.prototype.indexes = null;
$asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClass2a.prototype.value = null;

$asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClass2e.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClass2e.prototype.$this = null;
$asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClass2e.prototype.binder = null;
$asm08.System.Dynamic.DynamicObject.MetaDynamic.$l$gc__DisplayClass2e.prototype.indexes = null;

System.Dynamic.GetMemberBinder.prototype._ctor = function (name, ignoreCase) {
	System.Dynamic.DynamicMetaObjectBinder.prototype._ctor.call(this);
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(name, "name");
	this._name = name;
	this._ignoreCase = ignoreCase;
};
System.Dynamic.GetMemberBinder.prototype.get_ReturnType = function () {
	return System.Object;
};
System.Dynamic.GetMemberBinder.prototype.get_Name = function () {
	return this._name;
};
System.Dynamic.GetMemberBinder.prototype.get_IgnoreCase = function () {
	return this._ignoreCase;
};
System.Dynamic.GetMemberBinder.prototype.FallbackGetMember$0 = function (target) {
	return this.FallbackGetMember$1(target, null);
};
System.Dynamic.GetMemberBinder.prototype.Bind = function (target, args) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(target, "target");
	$asm08.System.Dynamic.Utils.ContractUtils.Requires$1(((args === null) || (args.length === 0)), "args");
	return target.BindGetMember(this);
};
System.Dynamic.GetMemberBinder.prototype.get_IsStandardBinder = function () {
	return true;
};
JSIL.OverloadedMethod(System.Dynamic.GetMemberBinder.prototype, "FallbackGetMember", [
		["FallbackGetMember$0", [System.Dynamic.DynamicMetaObject]], 
		["FallbackGetMember$1", [System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject]]
	]);
JSIL.MakeProperty(System.Dynamic.GetMemberBinder.prototype, "ReturnType", 
	System.Dynamic.GetMemberBinder.prototype.get_ReturnType, null);
JSIL.MakeProperty(System.Dynamic.GetMemberBinder.prototype, "Name", 
	System.Dynamic.GetMemberBinder.prototype.get_Name, null);
JSIL.MakeProperty(System.Dynamic.GetMemberBinder.prototype, "IgnoreCase", 
	System.Dynamic.GetMemberBinder.prototype.get_IgnoreCase, null);
JSIL.MakeProperty(System.Dynamic.GetMemberBinder.prototype, "IsStandardBinder", 
	System.Dynamic.GetMemberBinder.prototype.get_IsStandardBinder, null);
System.Dynamic.GetMemberBinder.prototype._name = null;
System.Dynamic.GetMemberBinder.prototype._ignoreCase = false;

$asm08.System.Dynamic.ExpandoClass.prototype._ctor$0 = function () {
	System.Object.prototype._ctor.call(this);
	this._hashCode = 6551;
	this._keys = JSIL.Array.New(System.String, 0);
};
$asm08.System.Dynamic.ExpandoClass.prototype._ctor$1 = function (keys, hashCode) {
	System.Object.prototype._ctor.call(this);
	this._hashCode = hashCode;
	this._keys = keys;
};
$asm08.System.Dynamic.ExpandoClass.prototype.FindNewClass = function (newKey) {
	var hashCode = (this._hashCode ^ newKey.GetHashCode());
	System.Threading.Monitor.Enter(this);
	try {
		var transitionList = this.GetTransitionList(hashCode);
	__loop0__: 
		for (var i = 0; i < transitionList.Count; ++i) {
			var expandoClass = JSIL.TryCast(transitionList.get_Item(i).Target, $asm08.System.Dynamic.ExpandoClass);
			if (expandoClass === null) {
				transitionList.RemoveAt(i);
				--i;
			} else if (System.String.Equals$1(expandoClass._keys[(expandoClass._keys.length - 1)], newKey, System.StringComparison.Ordinal)) {
				var result = expandoClass;
				return result;
			}
		}
		var array = JSIL.Array.New(System.String, (this._keys.length + 1));
		System.Array.Copy$0(this._keys, array, this._keys.length);
		array[this._keys.length] = newKey;
		var expandoClass2 = JSIL.New($asm08.System.Dynamic.ExpandoClass, "_ctor$1", [array, hashCode]);
		transitionList.Add(JSIL.New(System.WeakReference, "_ctor$1", [expandoClass2]));
		result = expandoClass2;
	} finally {
		System.Threading.Monitor.Exit(this);
	}
	return result;
};
$asm08.System.Dynamic.ExpandoClass.prototype.GetTransitionList = function (hashCode) {
	if (this._transitions === null) {
		this._transitions = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.Int32, System.Collections.Generic.List$b1.Of(System.WeakReference)), "_ctor$0", []);
	}
	if (!this._transitions.TryGetValue(hashCode, /* ref */ result)) {
		var result = new JSIL.Variable(JSIL.Cast(this._transitions.set_Item(hashCode, new (System.Collections.Generic.List$b1.Of(System.WeakReference)) ()), System.Collections.Generic.List$b1.Of(System.WeakReference)));
	}
	return result.value;
};
$asm08.System.Dynamic.ExpandoClass.prototype.GetValueIndex = function (name, caseInsensitive, obj) {
	if (caseInsensitive) {
		return this.GetValueIndexCaseInsensitive(name, obj);
	}
	return this.GetValueIndexCaseSensitive(name);
};
$asm08.System.Dynamic.ExpandoClass.prototype.GetValueIndexCaseSensitive = function (name) {
__loop0__: 
	for (var i = 0; i < this._keys.length; ++i) {
		if (System.String.Equals$1(this._keys[i], name, System.StringComparison.Ordinal)) {
			return i;
		}
	}
	return -1;
};
$asm08.System.Dynamic.ExpandoClass.prototype.GetValueIndexCaseInsensitive = function (name, obj) {
	var lockObject = null;
	var num = -1;
	System.Threading.Monitor.Enter((lockObject = obj.LockObject));
	try {
	__loop0__: 
		for (var i = (this._keys.length - 1); i >= 0; --i) {
			if (!(!System.String.Equals$1(this._keys[i], name, System.StringComparison.OrdinalIgnoreCase) || obj.IsDeletedMember(i))) {
				if (num !== -1) {
					return -2;
				}
				num = i;
			}
		}
	} finally {
		System.Threading.Monitor.Exit(lockObject);
	}
	return num;
};
$asm08.System.Dynamic.ExpandoClass.prototype.get_Keys = function () {
	return this._keys;
};
JSIL.OverloadedMethod($asm08.System.Dynamic.ExpandoClass.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Array.Of(System.String), System.Int32]]
	]);
JSIL.MakeProperty($asm08.System.Dynamic.ExpandoClass.prototype, "Keys", 
	$asm08.System.Dynamic.ExpandoClass.prototype.get_Keys, null);
Object.defineProperty($asm08.System.Dynamic.ExpandoClass, "EmptyHashCode", {
		"value": 6551}
);
$asm08.System.Dynamic.ExpandoClass.prototype._keys = null;
$asm08.System.Dynamic.ExpandoClass.prototype._hashCode = 0;
$asm08.System.Dynamic.ExpandoClass.prototype._transitions = null;
$asm08.System.Dynamic.ExpandoClass.Empty = null;
$asm08.System.Dynamic.ExpandoClass._cctor = function () {
	$asm08.System.Dynamic.ExpandoClass.Empty = JSIL.New($asm08.System.Dynamic.ExpandoClass, "_ctor$0", []);
};

System.Dynamic.ExpandoObject.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
	this._data = $asm08.System.Dynamic.ExpandoObject.ExpandoData.Empty;
	this.LockObject = new System.Object();
};
System.Dynamic.ExpandoObject.prototype.TryGetValue = function (indexClass, index, name, ignoreCase, /* ref */ value) {
	var data = this._data;
	if (!((data.Class === JSIL.Cast(indexClass, $asm08.System.Dynamic.ExpandoClass)) && !ignoreCase)) {
		index = data.Class.GetValueIndex(name, ignoreCase, this);
		if (index === -2) {
			throw $asm08.System.Core.Error.AmbiguousMatchInExpandoObject(name);
		}
	}
	if (index === -1) {
		value.value = null;
		return false;
	}
	var obj = data.get_Item(index);
	if (obj === System.Dynamic.ExpandoObject.Uninitialized) {
		value.value = null;
		return false;
	}
	value.value = obj;
	return true;
};
System.Dynamic.ExpandoObject.prototype.TrySetValue = function (indexClass, index, value, name, ignoreCase, add) {
	var lockObject = null;
	System.Threading.Monitor.Enter((lockObject = this.LockObject));
	try {
		var expandoData = this._data;
		if (!((expandoData.Class === JSIL.Cast(indexClass, $asm08.System.Dynamic.ExpandoClass)) && !ignoreCase)) {
			index = expandoData.Class.GetValueIndex(name, ignoreCase, this);
			if (index === -2) {
				throw $asm08.System.Core.Error.AmbiguousMatchInExpandoObject(name);
			}
			if (index === -1) {
				var num = ignoreCase ? expandoData.Class.GetValueIndexCaseSensitive(name) : index;
				if (num !== -1) {
					index = num;
				} else {
					var newClass = expandoData.Class.FindNewClass(name);
					expandoData = this.PromoteClassCore(expandoData.Class, newClass);
					index = expandoData.Class.GetValueIndexCaseSensitive(name);
				}
			}
		}
		var obj = expandoData.get_Item(index);
		if (obj === System.Dynamic.ExpandoObject.Uninitialized) {
			++this._count;
		} else if (add) {
			throw $asm08.System.Core.Error.SameKeyExistsInExpando(name);
		}
		expandoData.set_Item(index, value);
	} finally {
		System.Threading.Monitor.Exit(lockObject);
	}
	var propertyChanged = this._propertyChanged;
	if (!((propertyChanged === null) || (value === obj))) {
		propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(expandoData.Class.Keys[index]));
	}
};
System.Dynamic.ExpandoObject.prototype.TryDeleteValue = function (indexClass, index, name, ignoreCase, deleteValue) {
	var lockObject = null;
	System.Threading.Monitor.Enter((lockObject = this.LockObject));
	try {
		var data = this._data;
		if (!((data.Class === JSIL.Cast(indexClass, $asm08.System.Dynamic.ExpandoClass)) && !ignoreCase)) {
			index = data.Class.GetValueIndex(name, ignoreCase, this);
			if (index === -2) {
				throw $asm08.System.Core.Error.AmbiguousMatchInExpandoObject(name);
			}
		}
		if (index === -1) {
			var result = false;
			return result;
		}
		var obj = data.get_Item(index);
		if (obj === System.Dynamic.ExpandoObject.Uninitialized) {
			result = false;
			return result;
		}
		if (!((deleteValue === System.Dynamic.ExpandoObject.Uninitialized) || System.Object.Equals(obj, deleteValue))) {
			result = false;
			return result;
		}
		data.set_Item(index, System.Dynamic.ExpandoObject.Uninitialized);
		--this._count;
	} finally {
		System.Threading.Monitor.Exit(lockObject);
	}
	var propertyChanged = this._propertyChanged;
	if (propertyChanged !== null) {
		propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(data.Class.Keys[index]));
		return true;
	}
	return true;
};
System.Dynamic.ExpandoObject.prototype.IsDeletedMember = function (index) {
	return ((index !== this._data.Length) && (this._data.get_Item(index) === System.Dynamic.ExpandoObject.Uninitialized));
};
System.Dynamic.ExpandoObject.prototype.get_Class = function () {
	return this._data.Class;
};
System.Dynamic.ExpandoObject.prototype.PromoteClassCore = function (oldClass, newClass) {
	var lockObject = null;
	System.Threading.Monitor.Enter((lockObject = this.LockObject));
	try {
		if (this._data.Class === oldClass) {
			this._data = this._data.UpdateClass(newClass);
		}
	} finally {
		System.Threading.Monitor.Exit(lockObject);
	}
	return this._data;
};
System.Dynamic.ExpandoObject.prototype.PromoteClass = function (oldClass, newClass) {
	this.PromoteClassCore(JSIL.Cast(oldClass, $asm08.System.Dynamic.ExpandoClass), JSIL.Cast(newClass, $asm08.System.Dynamic.ExpandoClass));
};
System.Dynamic.ExpandoObject.prototype.IDynamicMetaObjectProvider_GetMetaObject = function (parameter) {
	return new $asm08.System.Dynamic.ExpandoObject.MetaExpando(parameter, this);
};
System.Dynamic.ExpandoObject.prototype.TryAddMember = function (key, value) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(key, "key");
	this.TrySetValue(
		null, 
		-1, 
		value, 
		key, 
		false, 
		true
	);
};
System.Dynamic.ExpandoObject.prototype.TryGetValueForKey = function (key, /* ref */ value) {
	return this.TryGetValue(
		null, 
		-1, 
		key, 
		false, 
		/* ref */ value
	);
};
System.Dynamic.ExpandoObject.prototype.ExpandoContainsKey = function (key) {
	return (this._data.Class.GetValueIndexCaseSensitive(key) >= 0);
};
System.Dynamic.ExpandoObject.prototype.IDictionary$b2_get_Keys = function () {
	return new $asm08.System.Dynamic.ExpandoObject.KeyCollection(this);
};
System.Dynamic.ExpandoObject.prototype.IDictionary$b2_get_Values = function () {
	return new $asm08.System.Dynamic.ExpandoObject.ValueCollection(this);
};
System.Dynamic.ExpandoObject.prototype.IDictionary$b2_get_Item = function (key) {
	var result = new JSIL.Variable(null);
	if (!this.TryGetValueForKey(key, /* ref */ result)) {
		throw $asm08.System.Core.Error.KeyDoesNotExistInExpando(key);
	}
	return result.value;
};
System.Dynamic.ExpandoObject.prototype.IDictionary$b2_set_Item = function (key, value) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(key, "key");
	this.TrySetValue(
		null, 
		-1, 
		value, 
		key, 
		false, 
		false
	);
};
System.Dynamic.ExpandoObject.prototype.IDictionary$b2_Add = function (key, value) {
	this.TryAddMember(key, value);
};
System.Dynamic.ExpandoObject.prototype.IDictionary$b2_ContainsKey = function (key) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(key, "key");
	var data = this._data;
	var valueIndexCaseSensitive = data.Class.GetValueIndexCaseSensitive(key);
	return ((valueIndexCaseSensitive >= 0) && (data.get_Item(valueIndexCaseSensitive) !== System.Dynamic.ExpandoObject.Uninitialized));
};
System.Dynamic.ExpandoObject.prototype.IDictionary$b2_Remove = function (key) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(key, "key");
	return this.TryDeleteValue(
		null, 
		-1, 
		key, 
		false, 
		System.Dynamic.ExpandoObject.Uninitialized
	);
};
System.Dynamic.ExpandoObject.prototype.IDictionary$b2_TryGetValue = function (key, /* ref */ value) {
	return this.TryGetValueForKey(key, /* ref */ value);
};
System.Dynamic.ExpandoObject.prototype.ICollection$b1_get_Count = function () {
	return this._count;
};
System.Dynamic.ExpandoObject.prototype.ICollection$b1_get_IsReadOnly = function () {
	return false;
};
System.Dynamic.ExpandoObject.prototype.ICollection$b1_Add = function (item) {
	this.TryAddMember(item.Key, item.Value);
};
System.Dynamic.ExpandoObject.prototype.ICollection$b1_Clear = function () {
	var lockObject = null;
	System.Threading.Monitor.Enter((lockObject = this.LockObject));
	try {
		var data = this._data;
		this._data = $asm08.System.Dynamic.ExpandoObject.ExpandoData.Empty;
		this._count = 0;
	} finally {
		System.Threading.Monitor.Exit(lockObject);
	}
	var propertyChanged = this._propertyChanged;
	if (propertyChanged !== null) {
		var i = 0;
		var num = data.Class.Keys.length;
	__loop0__: 
		while (i < num) {
			if (data.get_Item(i) !== System.Dynamic.ExpandoObject.Uninitialized) {
				propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(data.Class.Keys[i]));
			}
			++i;
		}
	}
};
System.Dynamic.ExpandoObject.prototype.ICollection$b1_Contains = function (item) {
	var objA = new JSIL.Variable(null);
	return (this.TryGetValueForKey(item.Key, /* ref */ objA) && System.Object.Equals(objA.value, item.Value));
};
System.Dynamic.ExpandoObject.prototype.ICollection$b1_CopyTo = function (array, arrayIndex) {
	var lockObject = null;
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(array, "array");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresArrayRange$b1(System.Collections.Generic.KeyValuePair$b2.Of(System.String, System.Object))(
		JSIL.Cast(array, System.Collections.Generic.IList$b1.Of(System.Collections.Generic.KeyValuePair$b2.Of(System.String, System.Object))), 
		arrayIndex, 
		this._count, 
		"arrayIndex", 
		"Count"
	);
	System.Threading.Monitor.Enter((lockObject = this.LockObject));
	try {
		var enumerator = this.IEnumerable$b1_GetEnumerator();
		try {
		__loop0__: 
			while (enumerator.IEnumerator_MoveNext()) {
				var current = enumerator.IEnumerator$b1_Current.MemberwiseClone();
				array[arrayIndex++] = current.MemberwiseClone();
			}
		} finally {
			if (enumerator !== null) {
				enumerator.IDisposable_Dispose();
			}
		}
	} finally {
		System.Threading.Monitor.Exit(lockObject);
	}
};
System.Dynamic.ExpandoObject.prototype.ICollection$b1_Remove = function (item) {
	return this.TryDeleteValue(
		null, 
		-1, 
		item.Key, 
		false, 
		item.Value
	);
};
System.Dynamic.ExpandoObject.prototype.IEnumerable$b1_GetEnumerator = function () {
	var data = this._data;
	return this.GetExpandoEnumerator(data, data.Version);
};
System.Dynamic.ExpandoObject.prototype.IEnumerable_GetEnumerator = function () {
	var data = this._data;
	return this.GetExpandoEnumerator(data, data.Version);
};
System.Dynamic.ExpandoObject.prototype.GetExpandoEnumerator = function (data, version) {
	var $lGetExpandoEnumerator$gd__ = new $asm08.System.Dynamic.ExpandoObject.$lGetExpandoEnumerator$gd__0(0);
	$lGetExpandoEnumerator$gd__.$this = this;
	$lGetExpandoEnumerator$gd__.data = data;
	$lGetExpandoEnumerator$gd__.version = version;
	return $lGetExpandoEnumerator$gd__;
};
System.Dynamic.ExpandoObject.prototype.INotifyPropertyChanged_add_PropertyChanged = function (value) {
	this._propertyChanged = System.Delegate.Combine(this._propertyChanged, value);
};
System.Dynamic.ExpandoObject.prototype.INotifyPropertyChanged_remove_PropertyChanged = function (value) {
	this._propertyChanged = System.Delegate.Remove(this._propertyChanged, value);
};
JSIL.MakeProperty(System.Dynamic.ExpandoObject.prototype, "Class", 
	System.Dynamic.ExpandoObject.prototype.get_Class, null);
JSIL.MakeProperty(System.Dynamic.ExpandoObject.prototype, "IDictionary$b2_Keys", 
	System.Dynamic.ExpandoObject.prototype.IDictionary$b2_get_Keys, null);
JSIL.MakeProperty(System.Dynamic.ExpandoObject.prototype, "IDictionary$b2_Values", 
	System.Dynamic.ExpandoObject.prototype.IDictionary$b2_get_Values, null);
JSIL.MakeProperty(System.Dynamic.ExpandoObject.prototype, "IDictionary$b2_Item", 
	System.Dynamic.ExpandoObject.prototype.IDictionary$b2_get_Item, System.Dynamic.ExpandoObject.prototype.IDictionary$b2_set_Item);
JSIL.MakeProperty(System.Dynamic.ExpandoObject.prototype, "ICollection$b1_Count", 
	System.Dynamic.ExpandoObject.prototype.ICollection$b1_get_Count, null);
JSIL.MakeProperty(System.Dynamic.ExpandoObject.prototype, "ICollection$b1_IsReadOnly", 
	System.Dynamic.ExpandoObject.prototype.ICollection$b1_get_IsReadOnly, null);
Object.defineProperty(System.Dynamic.ExpandoObject, "AmbiguousMatchFound", {
		"value": -2}
);
Object.defineProperty(System.Dynamic.ExpandoObject, "NoMatch", {
		"value": -1}
);
System.Dynamic.ExpandoObject.prototype.LockObject = null;
System.Dynamic.ExpandoObject.prototype._data = null;
System.Dynamic.ExpandoObject.prototype._count = 0;
System.Dynamic.ExpandoObject.Uninitialized = null;
System.Dynamic.ExpandoObject.prototype._propertyChanged = null;
System.Dynamic.ExpandoObject._cctor = function () {
	System.Dynamic.ExpandoObject.Uninitialized = new System.Object();
};

$asm08.System.Dynamic.ExpandoObject.KeyCollectionDebugView.prototype._ctor = function (collection) {
	System.Object.prototype._ctor.call(this);
	this.collection = collection;
};
$asm08.System.Dynamic.ExpandoObject.KeyCollectionDebugView.prototype.get_Items = function () {
	var array = JSIL.Array.New(System.String, this.collection.ICollection$b1_Count);
	this.collection.ICollection$b1_CopyTo(array, 0);
	return array;
};
JSIL.MakeProperty($asm08.System.Dynamic.ExpandoObject.KeyCollectionDebugView.prototype, "Items", 
	$asm08.System.Dynamic.ExpandoObject.KeyCollectionDebugView.prototype.get_Items, null);
$asm08.System.Dynamic.ExpandoObject.KeyCollectionDebugView.prototype.collection = null;

$asm08.System.Dynamic.ExpandoObject.KeyCollection.prototype._ctor = function (expando) {
	var lockObject = null;
	System.Object.prototype._ctor.call(this);
	System.Threading.Monitor.Enter((lockObject = expando.LockObject));
	try {
		this._expando = expando;
		this._expandoVersion = expando._data.Version;
		this._expandoCount = expando._count;
		this._expandoData = expando._data;
	} finally {
		System.Threading.Monitor.Exit(lockObject);
	}
};
$asm08.System.Dynamic.ExpandoObject.KeyCollection.prototype.CheckVersion = function () {
	if (!((this._expando._data.Version === this._expandoVersion) && (this._expandoData === this._expando._data))) {
		throw $asm08.System.Core.Error.CollectionModifiedWhileEnumerating();
	}
};
$asm08.System.Dynamic.ExpandoObject.KeyCollection.prototype.Add = function (item) {
	throw $asm08.System.Core.Error.CollectionReadOnly();
};
$asm08.System.Dynamic.ExpandoObject.KeyCollection.prototype.Clear = function () {
	throw $asm08.System.Core.Error.CollectionReadOnly();
};
$asm08.System.Dynamic.ExpandoObject.KeyCollection.prototype.Contains = function (item) {
	var lockObject = null;
	System.Threading.Monitor.Enter((lockObject = this._expando.LockObject));
	try {
		this.CheckVersion();
		var result = this._expando.ExpandoContainsKey(item);
	} finally {
		System.Threading.Monitor.Exit(lockObject);
	}
	return result;
};
$asm08.System.Dynamic.ExpandoObject.KeyCollection.prototype.CopyTo = function (array, arrayIndex) {
	var lockObject = null;
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(array, "array");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresArrayRange$b1(System.String)(
		JSIL.Cast(array, System.Collections.Generic.IList$b1.Of(System.String)), 
		arrayIndex, 
		this._expandoCount, 
		"arrayIndex", 
		"Count"
	);
	System.Threading.Monitor.Enter((lockObject = this._expando.LockObject));
	try {
		this.CheckVersion();
		var data = this._expando._data;
	__loop0__: 
		for (var i = 0; i < data.Class.Keys.length; ++i) {
			if (data.get_Item(i) !== System.Dynamic.ExpandoObject.Uninitialized) {
				array[arrayIndex++] = data.Class.Keys[i];
			}
		}
	} finally {
		System.Threading.Monitor.Exit(lockObject);
	}
};
$asm08.System.Dynamic.ExpandoObject.KeyCollection.prototype.get_Count = function () {
	this.CheckVersion();
	return this._expandoCount;
};
$asm08.System.Dynamic.ExpandoObject.KeyCollection.prototype.get_IsReadOnly = function () {
	return true;
};
$asm08.System.Dynamic.ExpandoObject.KeyCollection.prototype.Remove = function (item) {
	throw $asm08.System.Core.Error.CollectionReadOnly();
};
$asm08.System.Dynamic.ExpandoObject.KeyCollection.prototype.GetEnumerator = function () {
	var $lGetEnumerator$gd__ = new $asm08.System.Dynamic.ExpandoObject.KeyCollection.$lGetEnumerator$gd__4(0);
	$lGetEnumerator$gd__.$this = this;
	return $lGetEnumerator$gd__;
};
$asm08.System.Dynamic.ExpandoObject.KeyCollection.prototype.IEnumerable_GetEnumerator = function () {
	return this.GetEnumerator();
};
JSIL.MakeProperty($asm08.System.Dynamic.ExpandoObject.KeyCollection.prototype, "Count", 
	$asm08.System.Dynamic.ExpandoObject.KeyCollection.prototype.get_Count, null);
JSIL.MakeProperty($asm08.System.Dynamic.ExpandoObject.KeyCollection.prototype, "IsReadOnly", 
	$asm08.System.Dynamic.ExpandoObject.KeyCollection.prototype.get_IsReadOnly, null);
$asm08.System.Dynamic.ExpandoObject.KeyCollection.prototype._expando = null;
$asm08.System.Dynamic.ExpandoObject.KeyCollection.prototype._expandoVersion = 0;
$asm08.System.Dynamic.ExpandoObject.KeyCollection.prototype._expandoCount = 0;
$asm08.System.Dynamic.ExpandoObject.KeyCollection.prototype._expandoData = null;

$asm08.System.Dynamic.ExpandoObject.KeyCollection.$lGetEnumerator$gd__4.prototype.IEnumerator_MoveNext = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				switch (this.$state) {
					case 0: 
						this.$state = -1;
						this.i = 0;
						this.n = this.$this._expandoData.Class.Keys.length;
						__label0__ = "IL_AF";
						continue __step0__;
					case 1: 
						this.$state = -1;
						break;
					default: 
						return false;
				}
				__label0__ = "IL_A1";
				continue __step0__;
				break;
			case "IL_A1":
				++this.i;
				__label0__ = "IL_AF";
				continue __step0__;
				break;
			case "IL_AF":
				if (this.i >= this.n) {
					return false;
				}
				this.$this.CheckVersion();
				if (this.$this._expandoData.get_Item(this.i) !== System.Dynamic.ExpandoObject.Uninitialized) {
					this.$current = this.$this._expandoData.Class.Keys[this.i];
					this.$state = 1;
					return true;
				}
				__label0__ = "IL_A1";
				continue __step0__;
				break __step0__;
		}
	}
};
$asm08.System.Dynamic.ExpandoObject.KeyCollection.$lGetEnumerator$gd__4.prototype.IEnumerator$b1_get_Current = function () {
	return this.$current;
};
$asm08.System.Dynamic.ExpandoObject.KeyCollection.$lGetEnumerator$gd__4.prototype.IEnumerator_Reset = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm08.System.Dynamic.ExpandoObject.KeyCollection.$lGetEnumerator$gd__4.prototype.IDisposable_Dispose = function () {
};
$asm08.System.Dynamic.ExpandoObject.KeyCollection.$lGetEnumerator$gd__4.prototype.IEnumerator_get_Current = function () {
	return this.$current;
};
$asm08.System.Dynamic.ExpandoObject.KeyCollection.$lGetEnumerator$gd__4.prototype._ctor = function ($l$g1__state) {
	System.Object.prototype._ctor.call(this);
	this.$state = $l$g1__state;
};
JSIL.MakeProperty($asm08.System.Dynamic.ExpandoObject.KeyCollection.$lGetEnumerator$gd__4.prototype, "IEnumerator$b1_Current", 
	$asm08.System.Dynamic.ExpandoObject.KeyCollection.$lGetEnumerator$gd__4.prototype.IEnumerator$b1_get_Current, null);
JSIL.MakeProperty($asm08.System.Dynamic.ExpandoObject.KeyCollection.$lGetEnumerator$gd__4.prototype, "IEnumerator_Current", 
	$asm08.System.Dynamic.ExpandoObject.KeyCollection.$lGetEnumerator$gd__4.prototype.IEnumerator_get_Current, null);
$asm08.System.Dynamic.ExpandoObject.KeyCollection.$lGetEnumerator$gd__4.prototype.$current = null;
$asm08.System.Dynamic.ExpandoObject.KeyCollection.$lGetEnumerator$gd__4.prototype.$state = 0;
$asm08.System.Dynamic.ExpandoObject.KeyCollection.$lGetEnumerator$gd__4.prototype.$this = null;
$asm08.System.Dynamic.ExpandoObject.KeyCollection.$lGetEnumerator$gd__4.prototype.i = 0;
$asm08.System.Dynamic.ExpandoObject.KeyCollection.$lGetEnumerator$gd__4.prototype.n = 0;

$asm08.System.Dynamic.ExpandoObject.ValueCollectionDebugView.prototype._ctor = function (collection) {
	System.Object.prototype._ctor.call(this);
	this.collection = collection;
};
$asm08.System.Dynamic.ExpandoObject.ValueCollectionDebugView.prototype.get_Items = function () {
	var array = JSIL.Array.New(System.Object, this.collection.ICollection$b1_Count);
	this.collection.ICollection$b1_CopyTo(array, 0);
	return array;
};
JSIL.MakeProperty($asm08.System.Dynamic.ExpandoObject.ValueCollectionDebugView.prototype, "Items", 
	$asm08.System.Dynamic.ExpandoObject.ValueCollectionDebugView.prototype.get_Items, null);
$asm08.System.Dynamic.ExpandoObject.ValueCollectionDebugView.prototype.collection = null;

$asm08.System.Dynamic.ExpandoObject.ValueCollection.prototype._ctor = function (expando) {
	var lockObject = null;
	System.Object.prototype._ctor.call(this);
	System.Threading.Monitor.Enter((lockObject = expando.LockObject));
	try {
		this._expando = expando;
		this._expandoVersion = expando._data.Version;
		this._expandoCount = expando._count;
		this._expandoData = expando._data;
	} finally {
		System.Threading.Monitor.Exit(lockObject);
	}
};
$asm08.System.Dynamic.ExpandoObject.ValueCollection.prototype.CheckVersion = function () {
	if (!((this._expando._data.Version === this._expandoVersion) && (this._expandoData === this._expando._data))) {
		throw $asm08.System.Core.Error.CollectionModifiedWhileEnumerating();
	}
};
$asm08.System.Dynamic.ExpandoObject.ValueCollection.prototype.Add = function (item) {
	throw $asm08.System.Core.Error.CollectionReadOnly();
};
$asm08.System.Dynamic.ExpandoObject.ValueCollection.prototype.Clear = function () {
	throw $asm08.System.Core.Error.CollectionReadOnly();
};
$asm08.System.Dynamic.ExpandoObject.ValueCollection.prototype.Contains = function (item) {
	var lockObject = null;
	System.Threading.Monitor.Enter((lockObject = this._expando.LockObject));
	try {
		this.CheckVersion();
		var data = this._expando._data;
	__loop0__: 
		for (var i = 0; i < data.Class.Keys.length; ++i) {
			if (System.Object.Equals(data.get_Item(i), item)) {
				var result = true;
				return result;
			}
		}
		result = false;
	} finally {
		System.Threading.Monitor.Exit(lockObject);
	}
	return result;
};
$asm08.System.Dynamic.ExpandoObject.ValueCollection.prototype.CopyTo = function (array, arrayIndex) {
	var lockObject = null;
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(array, "array");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresArrayRange$b1(System.Object)(
		JSIL.Cast(array, System.Collections.Generic.IList$b1.Of(System.Object)), 
		arrayIndex, 
		this._expandoCount, 
		"arrayIndex", 
		"Count"
	);
	System.Threading.Monitor.Enter((lockObject = this._expando.LockObject));
	try {
		this.CheckVersion();
		var data = this._expando._data;
	__loop0__: 
		for (var i = 0; i < data.Class.Keys.length; ++i) {
			if (data.get_Item(i) !== System.Dynamic.ExpandoObject.Uninitialized) {
				array[arrayIndex++] = data.get_Item(i);
			}
		}
	} finally {
		System.Threading.Monitor.Exit(lockObject);
	}
};
$asm08.System.Dynamic.ExpandoObject.ValueCollection.prototype.get_Count = function () {
	this.CheckVersion();
	return this._expandoCount;
};
$asm08.System.Dynamic.ExpandoObject.ValueCollection.prototype.get_IsReadOnly = function () {
	return true;
};
$asm08.System.Dynamic.ExpandoObject.ValueCollection.prototype.Remove = function (item) {
	throw $asm08.System.Core.Error.CollectionReadOnly();
};
$asm08.System.Dynamic.ExpandoObject.ValueCollection.prototype.GetEnumerator = function () {
	var $lGetEnumerator$gd__ = new $asm08.System.Dynamic.ExpandoObject.ValueCollection.$lGetEnumerator$gd__8(0);
	$lGetEnumerator$gd__.$this = this;
	return $lGetEnumerator$gd__;
};
$asm08.System.Dynamic.ExpandoObject.ValueCollection.prototype.IEnumerable_GetEnumerator = function () {
	return this.GetEnumerator();
};
JSIL.MakeProperty($asm08.System.Dynamic.ExpandoObject.ValueCollection.prototype, "Count", 
	$asm08.System.Dynamic.ExpandoObject.ValueCollection.prototype.get_Count, null);
JSIL.MakeProperty($asm08.System.Dynamic.ExpandoObject.ValueCollection.prototype, "IsReadOnly", 
	$asm08.System.Dynamic.ExpandoObject.ValueCollection.prototype.get_IsReadOnly, null);
$asm08.System.Dynamic.ExpandoObject.ValueCollection.prototype._expando = null;
$asm08.System.Dynamic.ExpandoObject.ValueCollection.prototype._expandoVersion = 0;
$asm08.System.Dynamic.ExpandoObject.ValueCollection.prototype._expandoCount = 0;
$asm08.System.Dynamic.ExpandoObject.ValueCollection.prototype._expandoData = null;

$asm08.System.Dynamic.ExpandoObject.ValueCollection.$lGetEnumerator$gd__8.prototype.IEnumerator_MoveNext = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				switch (this.$state) {
					case 0: 
						this.$state = -1;
						this.data = this.$this._expando._data;
						this.i = 0;
						__label0__ = "IL_99";
						continue __step0__;
					case 1: 
						this.$state = -1;
						break;
					default: 
						return false;
				}
				__label0__ = "IL_8B";
				continue __step0__;
				break;
			case "IL_8B":
				++this.i;
				__label0__ = "IL_99";
				continue __step0__;
				break;
			case "IL_99":
				if (this.i >= this.data.Class.Keys.length) {
					return false;
				}
				this.$this.CheckVersion();
				this.temp = this.data.get_Item(this.i);
				if (this.temp !== System.Dynamic.ExpandoObject.Uninitialized) {
					this.$current = this.temp;
					this.$state = 1;
					return true;
				}
				__label0__ = "IL_8B";
				continue __step0__;
				break __step0__;
		}
	}
};
$asm08.System.Dynamic.ExpandoObject.ValueCollection.$lGetEnumerator$gd__8.prototype.IEnumerator$b1_get_Current = function () {
	return this.$current;
};
$asm08.System.Dynamic.ExpandoObject.ValueCollection.$lGetEnumerator$gd__8.prototype.IEnumerator_Reset = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm08.System.Dynamic.ExpandoObject.ValueCollection.$lGetEnumerator$gd__8.prototype.IDisposable_Dispose = function () {
};
$asm08.System.Dynamic.ExpandoObject.ValueCollection.$lGetEnumerator$gd__8.prototype.IEnumerator_get_Current = function () {
	return this.$current;
};
$asm08.System.Dynamic.ExpandoObject.ValueCollection.$lGetEnumerator$gd__8.prototype._ctor = function ($l$g1__state) {
	System.Object.prototype._ctor.call(this);
	this.$state = $l$g1__state;
};
JSIL.MakeProperty($asm08.System.Dynamic.ExpandoObject.ValueCollection.$lGetEnumerator$gd__8.prototype, "IEnumerator$b1_Current", 
	$asm08.System.Dynamic.ExpandoObject.ValueCollection.$lGetEnumerator$gd__8.prototype.IEnumerator$b1_get_Current, null);
JSIL.MakeProperty($asm08.System.Dynamic.ExpandoObject.ValueCollection.$lGetEnumerator$gd__8.prototype, "IEnumerator_Current", 
	$asm08.System.Dynamic.ExpandoObject.ValueCollection.$lGetEnumerator$gd__8.prototype.IEnumerator_get_Current, null);
$asm08.System.Dynamic.ExpandoObject.ValueCollection.$lGetEnumerator$gd__8.prototype.$current = null;
$asm08.System.Dynamic.ExpandoObject.ValueCollection.$lGetEnumerator$gd__8.prototype.$state = 0;
$asm08.System.Dynamic.ExpandoObject.ValueCollection.$lGetEnumerator$gd__8.prototype.$this = null;
$asm08.System.Dynamic.ExpandoObject.ValueCollection.$lGetEnumerator$gd__8.prototype.data = null;
$asm08.System.Dynamic.ExpandoObject.ValueCollection.$lGetEnumerator$gd__8.prototype.i = 0;
$asm08.System.Dynamic.ExpandoObject.ValueCollection.$lGetEnumerator$gd__8.prototype.temp = null;

$asm08.System.Dynamic.ExpandoObject.MetaExpando.prototype._ctor = function (expression, value) {
	System.Dynamic.DynamicMetaObject.prototype._ctor$1.call(this, expression, System.Dynamic.BindingRestrictions.Empty, value);
};
$asm08.System.Dynamic.ExpandoObject.MetaExpando.prototype.BindGetOrInvokeMember = function (binder, name, ignoreCase, fallback, fallbackInvoke) {
	var $class = this.Value.Class;
	var valueIndex = $class.GetValueIndex(name, ignoreCase, this.Value);
	var parameterExpression = System.Linq.Expressions.Expression.Parameter$1(System.Object, "value");
	var test = System.Linq.Expressions.Expression.Call$5(System.Runtime.CompilerServices.RuntimeOps.GetMethod$5("ExpandoTryGetValue"), JSIL.Array.New(System.Linq.Expressions.Expression, [this.GetLimitedSelf(), System.Linq.Expressions.Expression.Constant$1($class, System.Object), System.Linq.Expressions.Expression.Constant$0(valueIndex), System.Linq.Expressions.Expression.Constant$0(name), System.Linq.Expressions.Expression.Constant$0(ignoreCase), parameterExpression]));
	var dynamicMetaObject = JSIL.New(System.Dynamic.DynamicMetaObject, "_ctor$0", [parameterExpression, System.Dynamic.BindingRestrictions.Empty]);
	if (fallbackInvoke !== null) {
		dynamicMetaObject = fallbackInvoke(dynamicMetaObject);
	}
	dynamicMetaObject = JSIL.New(System.Dynamic.DynamicMetaObject, "_ctor$0", [System.Linq.Expressions.Expression.Block$8(JSIL.Array.New(System.Linq.Expressions.ParameterExpression, [parameterExpression]), JSIL.Array.New(System.Linq.Expressions.Expression, [System.Linq.Expressions.Expression.Condition$1(test, dynamicMetaObject.Expression, fallback.Expression, System.Object)])), dynamicMetaObject.Restrictions.Merge(fallback.Restrictions)]);
	return this.AddDynamicTestAndDefer(binder, this.Value.Class, null, dynamicMetaObject);
};
$asm08.System.Dynamic.ExpandoObject.MetaExpando.prototype.BindGetMember = function (binder) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(binder, "binder");
	return this.BindGetOrInvokeMember(
		binder, 
		binder.Name, 
		binder.IgnoreCase, 
		binder.FallbackGetMember$0(this), 
		null
	);
};
$asm08.System.Dynamic.ExpandoObject.MetaExpando.prototype.BindInvokeMember = function (binder, args) {
	var $l$gc__DisplayClasse = new $asm08.System.Dynamic.ExpandoObject.MetaExpando.$l$gc__DisplayClasse();
	$l$gc__DisplayClasse.binder = binder;
	$l$gc__DisplayClasse.args = args;
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull($l$gc__DisplayClasse.binder, "binder");
	return this.BindGetOrInvokeMember(
		$l$gc__DisplayClasse.binder, 
		$l$gc__DisplayClasse.binder.Name, 
		$l$gc__DisplayClasse.binder.IgnoreCase, 
		$l$gc__DisplayClasse.binder.FallbackInvokeMember$0(this, $l$gc__DisplayClasse.args), 
		function (value) {
			return $l$gc__DisplayClasse.binder.FallbackInvoke(value, $l$gc__DisplayClasse.args, null);
		}
	);
};
$asm08.System.Dynamic.ExpandoObject.MetaExpando.prototype.BindSetMember = function (binder, value) {
	var expandoClass = new JSIL.Variable(null), num = new JSIL.Variable(0);
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(binder, "binder");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(value, "value");
	var classEnsureIndex = this.GetClassEnsureIndex(
		binder.Name, 
		binder.IgnoreCase, 
		this.Value, 
		/* ref */ expandoClass, 
		/* ref */ num
	);
	return this.AddDynamicTestAndDefer(binder, expandoClass.value, classEnsureIndex, JSIL.New(System.Dynamic.DynamicMetaObject, "_ctor$0", [System.Linq.Expressions.Expression.Call$5(System.Runtime.CompilerServices.RuntimeOps.GetMethod$5("ExpandoTrySetValue"), JSIL.Array.New(System.Linq.Expressions.Expression, [this.GetLimitedSelf(), System.Linq.Expressions.Expression.Constant$1(expandoClass.value, System.Object), System.Linq.Expressions.Expression.Constant$0(num.value), System.Linq.Expressions.Expression.Convert$0(value.Expression, System.Object), System.Linq.Expressions.Expression.Constant$0(binder.Name), System.Linq.Expressions.Expression.Constant$0(binder.IgnoreCase)])), System.Dynamic.BindingRestrictions.Empty]));
};
$asm08.System.Dynamic.ExpandoObject.MetaExpando.prototype.BindDeleteMember = function (binder) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(binder, "binder");
	var valueIndex = this.Value.Class.GetValueIndex(binder.Name, binder.IgnoreCase, this.Value);
	var expression = System.Linq.Expressions.Expression.Call$4(
		System.Runtime.CompilerServices.RuntimeOps.GetMethod$5("ExpandoTryDeleteValue"), 
		this.GetLimitedSelf(), 
		System.Linq.Expressions.Expression.Constant$1(this.Value.Class, System.Object), 
		System.Linq.Expressions.Expression.Constant$0(valueIndex), 
		System.Linq.Expressions.Expression.Constant$0(binder.Name), 
		System.Linq.Expressions.Expression.Constant$0(binder.IgnoreCase)
	);
	var dynamicMetaObject = binder.FallbackDeleteMember$0(this);
	var succeeds = JSIL.New(System.Dynamic.DynamicMetaObject, "_ctor$0", [System.Linq.Expressions.Expression.IfThen(System.Linq.Expressions.Expression.Not$0(expression), dynamicMetaObject.Expression), dynamicMetaObject.Restrictions]);
	return this.AddDynamicTestAndDefer(binder, this.Value.Class, null, succeeds);
};
$asm08.System.Dynamic.ExpandoObject.MetaExpando.prototype.GetDynamicMemberNames = function () {
	var $lGetDynamicMemberNames$gd__ = new $asm08.System.Dynamic.ExpandoObject.MetaExpando.$lGetDynamicMemberNames$gd__10(-2);
	$lGetDynamicMemberNames$gd__.$this = this;
	return $lGetDynamicMemberNames$gd__;
};
$asm08.System.Dynamic.ExpandoObject.MetaExpando.prototype.AddDynamicTestAndDefer = function (binder, klass, originalClass, succeeds) {
	var expression = succeeds.Expression;
	if (originalClass !== null) {
		expression = System.Linq.Expressions.Expression.Block$0(System.Linq.Expressions.Expression.Call$10(
				null, 
				System.Runtime.CompilerServices.RuntimeOps.GetMethod$5("ExpandoPromoteClass"), 
				this.GetLimitedSelf(), 
				System.Linq.Expressions.Expression.Constant$1(originalClass, System.Object), 
				System.Linq.Expressions.Expression.Constant$1(klass, System.Object)
			), succeeds.Expression);
	}
	return JSIL.New(System.Dynamic.DynamicMetaObject, "_ctor$0", [System.Linq.Expressions.Expression.Condition$0(System.Linq.Expressions.Expression.Call$9(null, System.Runtime.CompilerServices.RuntimeOps.GetMethod$5("ExpandoCheckVersion"), this.GetLimitedSelf(), System.Linq.Expressions.Expression.Constant$1(JSIL.Coalesce(originalClass, klass), System.Object)), expression, binder.GetUpdateExpression(expression.Type)), this.GetRestrictions().Merge(succeeds.Restrictions)]);
};
$asm08.System.Dynamic.ExpandoObject.MetaExpando.prototype.GetClassEnsureIndex = function (name, caseInsensitive, obj, /* ref */ klass, /* ref */ index) {
	var $class = this.Value.Class;
	index.value = $class.GetValueIndex(name, caseInsensitive, obj);
	if (index.value === -2) {
		klass.value = $class;
		return null;
	}
	if (index.value === -1) {
		var expandoClass = $class.FindNewClass(name);
		klass.value = expandoClass;
		index.value = expandoClass.GetValueIndexCaseSensitive(name);
		return $class;
	}
	klass.value = $class;
	return null;
};
$asm08.System.Dynamic.ExpandoObject.MetaExpando.prototype.GetLimitedSelf = function () {
	if ($asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(System.Dynamic.DynamicMetaObject.prototype.get_Expression.call(this).Type, System.Dynamic.DynamicMetaObject.prototype.get_LimitType.call(this))) {
		return System.Dynamic.DynamicMetaObject.prototype.get_Expression.call(this);
	}
	return System.Linq.Expressions.Expression.Convert$0(System.Dynamic.DynamicMetaObject.prototype.get_Expression.call(this), System.Dynamic.DynamicMetaObject.prototype.get_LimitType.call(this));
};
$asm08.System.Dynamic.ExpandoObject.MetaExpando.prototype.GetRestrictions = function () {
	return System.Dynamic.BindingRestrictions.GetTypeRestriction$1(this);
};
$asm08.System.Dynamic.ExpandoObject.MetaExpando.prototype.get_Value = function () {
	return JSIL.Cast(System.Dynamic.DynamicMetaObject.prototype.get_Value.call(this), System.Dynamic.ExpandoObject);
};
JSIL.MakeProperty($asm08.System.Dynamic.ExpandoObject.MetaExpando.prototype, "Value", 
	$asm08.System.Dynamic.ExpandoObject.MetaExpando.prototype.get_Value, null);

$asm08.System.Dynamic.ExpandoObject.MetaExpando.$l$gc__DisplayClasse.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm08.System.Dynamic.ExpandoObject.MetaExpando.$l$gc__DisplayClasse.prototype.binder = null;
$asm08.System.Dynamic.ExpandoObject.MetaExpando.$l$gc__DisplayClasse.prototype.args = null;

$asm08.System.Dynamic.ExpandoObject.MetaExpando.$lGetDynamicMemberNames$gd__10.prototype.IEnumerable$b1_GetEnumerator = function () {
	if (!((System.Threading.Thread.CurrentThread.ManagedThreadId !== this.$initialThreadId) || (this.$state !== -2))) {
		this.$state = 0;
		var $lGetDynamicMemberNames$gd__ = this;
	} else {
		$lGetDynamicMemberNames$gd__ = new $asm08.System.Dynamic.ExpandoObject.MetaExpando.$lGetDynamicMemberNames$gd__10(0);
		$lGetDynamicMemberNames$gd__.$this = this.$this;
	}
	return $lGetDynamicMemberNames$gd__;
};
$asm08.System.Dynamic.ExpandoObject.MetaExpando.$lGetDynamicMemberNames$gd__10.prototype.IEnumerable_GetEnumerator = function () {
	return this.IEnumerable$b1_GetEnumerator();
};
$asm08.System.Dynamic.ExpandoObject.MetaExpando.$lGetDynamicMemberNames$gd__10.prototype.IEnumerator_MoveNext = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				switch (this.$state) {
					case 0: 
						this.$state = -1;
						this.expandoData = this.$this.Value._data;
						this.klass = this.expandoData.Class;
						this.i = 0;
						__label0__ = "IL_AB";
						continue __step0__;
					case 1: 
						this.$state = -1;
						break;
					default: 
						return false;
				}
				__label0__ = "IL_9D";
				continue __step0__;
				break;
			case "IL_9D":
				++this.i;
				__label0__ = "IL_AB";
				continue __step0__;
				break;
			case "IL_AB":
				if (this.i >= this.klass.Keys.length) {
					return false;
				}
				this.val = this.expandoData.get_Item(this.i);
				if (this.val !== System.Dynamic.ExpandoObject.Uninitialized) {
					this.$current = this.klass.Keys[this.i];
					this.$state = 1;
					return true;
				}
				__label0__ = "IL_9D";
				continue __step0__;
				break __step0__;
		}
	}
};
$asm08.System.Dynamic.ExpandoObject.MetaExpando.$lGetDynamicMemberNames$gd__10.prototype.IEnumerator$b1_get_Current = function () {
	return this.$current;
};
$asm08.System.Dynamic.ExpandoObject.MetaExpando.$lGetDynamicMemberNames$gd__10.prototype.IEnumerator_Reset = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm08.System.Dynamic.ExpandoObject.MetaExpando.$lGetDynamicMemberNames$gd__10.prototype.IDisposable_Dispose = function () {
};
$asm08.System.Dynamic.ExpandoObject.MetaExpando.$lGetDynamicMemberNames$gd__10.prototype.IEnumerator_get_Current = function () {
	return this.$current;
};
$asm08.System.Dynamic.ExpandoObject.MetaExpando.$lGetDynamicMemberNames$gd__10.prototype._ctor = function ($l$g1__state) {
	System.Object.prototype._ctor.call(this);
	this.$state = $l$g1__state;
	this.$initialThreadId = System.Threading.Thread.CurrentThread.ManagedThreadId;
};
JSIL.MakeProperty($asm08.System.Dynamic.ExpandoObject.MetaExpando.$lGetDynamicMemberNames$gd__10.prototype, "IEnumerator$b1_Current", 
	$asm08.System.Dynamic.ExpandoObject.MetaExpando.$lGetDynamicMemberNames$gd__10.prototype.IEnumerator$b1_get_Current, null);
JSIL.MakeProperty($asm08.System.Dynamic.ExpandoObject.MetaExpando.$lGetDynamicMemberNames$gd__10.prototype, "IEnumerator_Current", 
	$asm08.System.Dynamic.ExpandoObject.MetaExpando.$lGetDynamicMemberNames$gd__10.prototype.IEnumerator_get_Current, null);
$asm08.System.Dynamic.ExpandoObject.MetaExpando.$lGetDynamicMemberNames$gd__10.prototype.$current = null;
$asm08.System.Dynamic.ExpandoObject.MetaExpando.$lGetDynamicMemberNames$gd__10.prototype.$state = 0;
$asm08.System.Dynamic.ExpandoObject.MetaExpando.$lGetDynamicMemberNames$gd__10.prototype.$initialThreadId = 0;
$asm08.System.Dynamic.ExpandoObject.MetaExpando.$lGetDynamicMemberNames$gd__10.prototype.$this = null;
$asm08.System.Dynamic.ExpandoObject.MetaExpando.$lGetDynamicMemberNames$gd__10.prototype.expandoData = null;
$asm08.System.Dynamic.ExpandoObject.MetaExpando.$lGetDynamicMemberNames$gd__10.prototype.klass = null;
$asm08.System.Dynamic.ExpandoObject.MetaExpando.$lGetDynamicMemberNames$gd__10.prototype.i = 0;
$asm08.System.Dynamic.ExpandoObject.MetaExpando.$lGetDynamicMemberNames$gd__10.prototype.val = null;

$asm08.System.Dynamic.ExpandoObject.ExpandoData.prototype.get_Item = function (index) {
	return this._dataArray[index];
};
$asm08.System.Dynamic.ExpandoObject.ExpandoData.prototype.set_Item = function (index, value) {
	++this._version;
	this._dataArray[index] = value;
};
$asm08.System.Dynamic.ExpandoObject.ExpandoData.prototype.get_Version = function () {
	return this._version;
};
$asm08.System.Dynamic.ExpandoObject.ExpandoData.prototype.get_Length = function () {
	return this._dataArray.length;
};
$asm08.System.Dynamic.ExpandoObject.ExpandoData.prototype._ctor$0 = function () {
	System.Object.prototype._ctor.call(this);
	this.Class = $asm08.System.Dynamic.ExpandoClass.Empty;
	this._dataArray = JSIL.Array.New(System.Object, 0);
};
$asm08.System.Dynamic.ExpandoObject.ExpandoData.prototype._ctor$1 = function (klass, data, version) {
	System.Object.prototype._ctor.call(this);
	this.Class = klass;
	this._dataArray = data;
	this._version = version;
};
$asm08.System.Dynamic.ExpandoObject.ExpandoData.prototype.UpdateClass = function (newClass) {
	if (this._dataArray.length >= newClass.Keys.length) {
		this.set_Item((newClass.Keys.length - 1), System.Dynamic.ExpandoObject.Uninitialized);
		return JSIL.New($asm08.System.Dynamic.ExpandoObject.ExpandoData, "_ctor$1", [newClass, this._dataArray, this._version]);
	}
	var index = this._dataArray.length;
	var array = JSIL.Array.New(System.Object, $asm08.System.Dynamic.ExpandoObject.ExpandoData.GetAlignedSize(newClass.Keys.length));
	System.Array.Copy$0(this._dataArray, array, this._dataArray.length);
	var expandoData = JSIL.New($asm08.System.Dynamic.ExpandoObject.ExpandoData, "_ctor$1", [newClass, array, this._version]);
	expandoData.set_Item(index, System.Dynamic.ExpandoObject.Uninitialized);
	return expandoData;
};
$asm08.System.Dynamic.ExpandoObject.ExpandoData.GetAlignedSize = function (len) {
	return ((len + 7) & -8);
};
JSIL.OverloadedMethod($asm08.System.Dynamic.ExpandoObject.ExpandoData.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [$asm08.System.Dynamic.ExpandoClass, System.Array.Of(System.Object), System.Int32]]
	]);
JSIL.MakeProperty($asm08.System.Dynamic.ExpandoObject.ExpandoData.prototype, "Item", 
	$asm08.System.Dynamic.ExpandoObject.ExpandoData.prototype.get_Item, $asm08.System.Dynamic.ExpandoObject.ExpandoData.prototype.set_Item);
JSIL.MakeProperty($asm08.System.Dynamic.ExpandoObject.ExpandoData.prototype, "Version", 
	$asm08.System.Dynamic.ExpandoObject.ExpandoData.prototype.get_Version, null);
JSIL.MakeProperty($asm08.System.Dynamic.ExpandoObject.ExpandoData.prototype, "Length", 
	$asm08.System.Dynamic.ExpandoObject.ExpandoData.prototype.get_Length, null);
$asm08.System.Dynamic.ExpandoObject.ExpandoData.Empty = null;
$asm08.System.Dynamic.ExpandoObject.ExpandoData.prototype.Class = null;
$asm08.System.Dynamic.ExpandoObject.ExpandoData.prototype._dataArray = null;
$asm08.System.Dynamic.ExpandoObject.ExpandoData.prototype._version = 0;
$asm08.System.Dynamic.ExpandoObject.ExpandoData._cctor = function () {
	$asm08.System.Dynamic.ExpandoObject.ExpandoData.Empty = JSIL.New($asm08.System.Dynamic.ExpandoObject.ExpandoData, "_ctor$0", []);
};

$asm08.System.Dynamic.ExpandoObject.$lGetExpandoEnumerator$gd__0.prototype.IEnumerator_MoveNext = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				switch (this.$state) {
					case 0: 
						this.$state = -1;
						this.i = 0;
						__label0__ = "IL_C8";
						continue __step0__;
					case 1: 
						this.$state = -1;
						break;
					default: 
						return false;
				}
				__label0__ = "IL_BA";
				continue __step0__;
				break;
			case "IL_BA":
				++this.i;
				__label0__ = "IL_C8";
				continue __step0__;
				break;
			case "IL_C8":
				if (this.i >= this.data.Class.Keys.length) {
					return false;
				}
				if (!((this.$this._data.Version === this.version) && (this.data === this.$this._data))) {
					throw $asm08.System.Core.Error.CollectionModifiedWhileEnumerating();
				}
				this.temp = this.data.get_Item(this.i);
				if (this.temp !== System.Dynamic.ExpandoObject.Uninitialized) {
					this.$current = new (System.Collections.Generic.KeyValuePair$b2.Of(System.String, System.Object)) (this.data.Class.Keys[this.i], this.temp);
					this.$state = 1;
					return true;
				}
				__label0__ = "IL_BA";
				continue __step0__;
				break __step0__;
		}
	}
};
$asm08.System.Dynamic.ExpandoObject.$lGetExpandoEnumerator$gd__0.prototype.IEnumerator$b1_get_Current = function () {
	return this.$current;
};
$asm08.System.Dynamic.ExpandoObject.$lGetExpandoEnumerator$gd__0.prototype.IEnumerator_Reset = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm08.System.Dynamic.ExpandoObject.$lGetExpandoEnumerator$gd__0.prototype.IDisposable_Dispose = function () {
};
$asm08.System.Dynamic.ExpandoObject.$lGetExpandoEnumerator$gd__0.prototype.IEnumerator_get_Current = function () {
	return this.$current;
};
$asm08.System.Dynamic.ExpandoObject.$lGetExpandoEnumerator$gd__0.prototype._ctor = function ($l$g1__state) {
	System.Object.prototype._ctor.call(this);
	this.$state = $l$g1__state;
};
JSIL.MakeProperty($asm08.System.Dynamic.ExpandoObject.$lGetExpandoEnumerator$gd__0.prototype, "IEnumerator$b1_Current", 
	$asm08.System.Dynamic.ExpandoObject.$lGetExpandoEnumerator$gd__0.prototype.IEnumerator$b1_get_Current, null);
JSIL.MakeProperty($asm08.System.Dynamic.ExpandoObject.$lGetExpandoEnumerator$gd__0.prototype, "IEnumerator_Current", 
	$asm08.System.Dynamic.ExpandoObject.$lGetExpandoEnumerator$gd__0.prototype.IEnumerator_get_Current, null);
$asm08.System.Dynamic.ExpandoObject.$lGetExpandoEnumerator$gd__0.prototype.$state = 0;
$asm08.System.Dynamic.ExpandoObject.$lGetExpandoEnumerator$gd__0.prototype.$this = null;
$asm08.System.Dynamic.ExpandoObject.$lGetExpandoEnumerator$gd__0.prototype.data = null;
$asm08.System.Dynamic.ExpandoObject.$lGetExpandoEnumerator$gd__0.prototype.version = 0;
$asm08.System.Dynamic.ExpandoObject.$lGetExpandoEnumerator$gd__0.prototype.i = 0;
$asm08.System.Dynamic.ExpandoObject.$lGetExpandoEnumerator$gd__0.prototype.temp = null;

System.Runtime.CompilerServices.RuntimeOps.ExpandoTryGetValue = function (expando, indexClass, index, name, ignoreCase, /* ref */ value) {
	return expando.TryGetValue(
		indexClass, 
		index, 
		name, 
		ignoreCase, 
		/* ref */ value
	);
};
System.Runtime.CompilerServices.RuntimeOps.ExpandoTrySetValue = function (expando, indexClass, index, value, name, ignoreCase) {
	expando.TrySetValue(
		indexClass, 
		index, 
		value, 
		name, 
		ignoreCase, 
		false
	);
	return value;
};
System.Runtime.CompilerServices.RuntimeOps.ExpandoTryDeleteValue = function (expando, indexClass, index, name, ignoreCase) {
	return expando.TryDeleteValue(
		indexClass, 
		index, 
		name, 
		ignoreCase, 
		System.Dynamic.ExpandoObject.Uninitialized
	);
};
System.Runtime.CompilerServices.RuntimeOps.ExpandoCheckVersion = function (expando, version) {
	return (expando.Class === JSIL.Cast(version, $asm08.System.Dynamic.ExpandoClass));
};
System.Runtime.CompilerServices.RuntimeOps.ExpandoPromoteClass = function (expando, oldClass, newClass) {
	expando.PromoteClass(oldClass, newClass);
};
System.Runtime.CompilerServices.RuntimeOps.Quote = function (expression, hoistedLocals, locals) {
	var expressionQuoter = new $asm08.System.Runtime.CompilerServices.RuntimeOps.ExpressionQuoter(JSIL.Cast(hoistedLocals, $asm08.System.Linq.Expressions.Compiler.HoistedLocals), locals);
	return expressionQuoter.Visit$0(expression);
};
System.Runtime.CompilerServices.RuntimeOps.MergeRuntimeVariables = function (first, second, indexes) {
	return new $asm08.System.Runtime.CompilerServices.RuntimeOps.MergedRuntimeVariables(first, second, indexes);
};
System.Runtime.CompilerServices.RuntimeOps.CreateRuntimeVariables$0 = function (data, indexes) {
	return new $asm08.System.Runtime.CompilerServices.RuntimeOps.RuntimeVariableList(data, indexes);
};
System.Runtime.CompilerServices.RuntimeOps.CreateRuntimeVariables$1 = function () {
	return new $asm08.System.Runtime.CompilerServices.RuntimeOps.EmptyRuntimeVariables();
};
JSIL.OverloadedMethod(System.Runtime.CompilerServices.RuntimeOps, "CreateRuntimeVariables", [
		["CreateRuntimeVariables$0", [System.Array.Of(System.Object), System.Array.Of(System.Int64)]], 
		["CreateRuntimeVariables$1", []]
	]);

$asm08.System.Runtime.CompilerServices.RuntimeOps.ExpressionQuoter.prototype._ctor = function (scope, locals) {
	this._shadowedVars = JSIL.New(System.Collections.Generic.Stack$b1.Of($asm08.System.Linq.Expressions.Set$b1.Of(System.Linq.Expressions.ParameterExpression)), "_ctor$0", []);
	System.Linq.Expressions.ExpressionVisitor.prototype._ctor.call(this);
	this._scope = scope;
	this._locals = locals;
};
$asm08.System.Runtime.CompilerServices.RuntimeOps.ExpressionQuoter.prototype.VisitLambda$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, node) {
		this._shadowedVars.Push(JSIL.New($asm08.System.Linq.Expressions.Set$b1.Of(System.Linq.Expressions.ParameterExpression), "_ctor$2", [JSIL.Cast(node.Parameters, System.Collections.Generic.IList$b1.Of(System.Linq.Expressions.ParameterExpression))]));
		var expression = this.Visit$0(node.Body);
		this._shadowedVars.Pop();
		if (expression === node.Body) {
			return node;
		}
		return System.Linq.Expressions.Expression.Lambda$b1$5(T)(expression, node.Name, node.TailCall, JSIL.Cast(node.Parameters, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.ParameterExpression)));
	}
);
$asm08.System.Runtime.CompilerServices.RuntimeOps.ExpressionQuoter.prototype.VisitBlock = function (node) {
	if (node.Variables.Count > 0) {
		this._shadowedVars.Push(JSIL.New($asm08.System.Linq.Expressions.Set$b1.Of(System.Linq.Expressions.ParameterExpression), "_ctor$2", [JSIL.Cast(node.Variables, System.Collections.Generic.IList$b1.Of(System.Linq.Expressions.ParameterExpression))]));
	}
	var readOnlyCollection = System.Linq.Expressions.ExpressionVisitor.prototype.Visit$1.call(this, node.Expressions);
	if (node.Variables.Count > 0) {
		this._shadowedVars.Pop();
	}
	if (readOnlyCollection === node.Expressions) {
		return node;
	}
	return System.Linq.Expressions.Expression.Block$10(JSIL.Cast(node.Variables, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.ParameterExpression)), readOnlyCollection);
};
$asm08.System.Runtime.CompilerServices.RuntimeOps.ExpressionQuoter.prototype.VisitCatchBlock = function (node) {
	if (node.Variable !== null) {
		this._shadowedVars.Push(JSIL.New($asm08.System.Linq.Expressions.Set$b1.Of(System.Linq.Expressions.ParameterExpression), "_ctor$2", [JSIL.Array.New(System.Linq.Expressions.ParameterExpression, [node.Variable])]));
	}
	var expression = this.Visit$0(node.Body);
	var expression2 = this.Visit$0(node.Filter);
	if (node.Variable !== null) {
		this._shadowedVars.Pop();
	}
	if (!((expression !== node.Body) || (expression2 !== node.Filter))) {
		return node;
	}
	return System.Linq.Expressions.Expression.MakeCatchBlock(node.Test, node.Variable, expression, expression2);
};
$asm08.System.Runtime.CompilerServices.RuntimeOps.ExpressionQuoter.prototype.VisitRuntimeVariables = function (node) {
	var count = node.Variables.Count;
	var list = new (System.Collections.Generic.List$b1.Of(System.Runtime.CompilerServices.IStrongBox)) ();
	var list2 = new (System.Collections.Generic.List$b1.Of(System.Linq.Expressions.ParameterExpression)) ();
	var array = JSIL.Array.New(System.Int32, count);
__loop0__: 
	for (var i = 0; i < count; ++i) {
		var box = this.GetBox(node.Variables.get_Item(i));
		if (box === null) {
			array[i] = list2.Count;
			list2.Add(node.Variables.get_Item(i));
		} else {
			array[i] = (-1 - list.Count);
			list.Add(box);
		}
	}
	if (list.Count === 0) {
		return node;
	}
	var constantExpression = System.Linq.Expressions.Expression.Constant$1(new $asm08.System.Runtime.CompilerServices.RuntimeOps.RuntimeVariables(list.ToArray()), System.Runtime.CompilerServices.IRuntimeVariables);
	if (list2.Count === 0) {
		return constantExpression;
	}
	return System.Linq.Expressions.Expression.Call$2(System.Runtime.CompilerServices.RuntimeOps.GetMethod$5("MergeRuntimeVariables"), System.Linq.Expressions.Expression.RuntimeVariables$1(new ($asm08.System.Runtime.CompilerServices.TrueReadOnlyCollection$b1.Of(System.Linq.Expressions.ParameterExpression)) (list2.ToArray())), constantExpression, System.Linq.Expressions.Expression.Constant$0(array));
};
$asm08.System.Runtime.CompilerServices.RuntimeOps.ExpressionQuoter.prototype.VisitParameter = function (node) {
	var box = this.GetBox(node);
	if (box === null) {
		return node;
	}
	return System.Linq.Expressions.Expression.Field$1(System.Linq.Expressions.Expression.Constant$0(box), "Value");
};
$asm08.System.Runtime.CompilerServices.RuntimeOps.ExpressionQuoter.prototype.GetBox = function (variable) {
	var num = new JSIL.Variable(0);
	var enumerator = this._shadowedVars.GetEnumerator().MemberwiseClone();
	try {
	__loop0__: 
		while (enumerator.MoveNext()) {
			var current = enumerator.Current;
			if (current.Contains(variable)) {
				return null;
			}
		}
	} finally {
		enumerator.IDisposable_Dispose();
	}
	var hoistedLocals = this._scope;
	var array = this._locals;
__loop1__: 
	while (!hoistedLocals.Indexes.TryGetValue(variable, /* ref */ num)) {
		hoistedLocals = hoistedLocals.Parent;
		if (hoistedLocals === null) {
			throw $asm08.System.Dynamic.Utils.ContractUtils.Unreachable;
		}
		array = $asm08.System.Linq.Expressions.Compiler.HoistedLocals.GetParent(array);
	}
	return JSIL.Cast(array[num.value], System.Runtime.CompilerServices.IStrongBox);
};
$asm08.System.Runtime.CompilerServices.RuntimeOps.ExpressionQuoter.prototype._scope = null;
$asm08.System.Runtime.CompilerServices.RuntimeOps.ExpressionQuoter.prototype._locals = null;
$asm08.System.Runtime.CompilerServices.RuntimeOps.ExpressionQuoter.prototype._shadowedVars = null;

$asm08.System.Runtime.CompilerServices.RuntimeOps.RuntimeVariables.prototype._ctor = function (boxes) {
	System.Object.prototype._ctor.call(this);
	this._boxes = boxes;
};
$asm08.System.Runtime.CompilerServices.RuntimeOps.RuntimeVariables.prototype.IRuntimeVariables_get_Count = function () {
	return this._boxes.length;
};
$asm08.System.Runtime.CompilerServices.RuntimeOps.RuntimeVariables.prototype.IRuntimeVariables_get_Item = function (index) {
	return this._boxes[index].IStrongBox_Value;
};
$asm08.System.Runtime.CompilerServices.RuntimeOps.RuntimeVariables.prototype.IRuntimeVariables_set_Item = function (index, value) {
	this._boxes[index].IStrongBox_Value = value;
};
JSIL.MakeProperty($asm08.System.Runtime.CompilerServices.RuntimeOps.RuntimeVariables.prototype, "IRuntimeVariables_Count", 
	$asm08.System.Runtime.CompilerServices.RuntimeOps.RuntimeVariables.prototype.IRuntimeVariables_get_Count, null);
JSIL.MakeProperty($asm08.System.Runtime.CompilerServices.RuntimeOps.RuntimeVariables.prototype, "IRuntimeVariables_Item", 
	$asm08.System.Runtime.CompilerServices.RuntimeOps.RuntimeVariables.prototype.IRuntimeVariables_get_Item, $asm08.System.Runtime.CompilerServices.RuntimeOps.RuntimeVariables.prototype.IRuntimeVariables_set_Item);
$asm08.System.Runtime.CompilerServices.RuntimeOps.RuntimeVariables.prototype._boxes = null;

$asm08.System.Runtime.CompilerServices.RuntimeOps.MergedRuntimeVariables.prototype._ctor = function (first, second, indexes) {
	System.Object.prototype._ctor.call(this);
	this._first = first;
	this._second = second;
	this._indexes = indexes;
};
$asm08.System.Runtime.CompilerServices.RuntimeOps.MergedRuntimeVariables.prototype.get_Count = function () {
	return this._indexes.length;
};
$asm08.System.Runtime.CompilerServices.RuntimeOps.MergedRuntimeVariables.prototype.get_Item = function (index) {
	index = this._indexes[index];
	if (index < 0) {
		return this._second.IRuntimeVariables_get_Item((-1 - index));
	}
	return this._first.IRuntimeVariables_get_Item(index);
};
$asm08.System.Runtime.CompilerServices.RuntimeOps.MergedRuntimeVariables.prototype.set_Item = function (index, value) {
	index = this._indexes[index];
	if (index >= 0) {
		this._first.IRuntimeVariables_set_Item(index, value);
		return;
	}
	this._second.IRuntimeVariables_set_Item((-1 - index), value);
};
JSIL.MakeProperty($asm08.System.Runtime.CompilerServices.RuntimeOps.MergedRuntimeVariables.prototype, "Count", 
	$asm08.System.Runtime.CompilerServices.RuntimeOps.MergedRuntimeVariables.prototype.get_Count, null);
JSIL.MakeProperty($asm08.System.Runtime.CompilerServices.RuntimeOps.MergedRuntimeVariables.prototype, "Item", 
	$asm08.System.Runtime.CompilerServices.RuntimeOps.MergedRuntimeVariables.prototype.get_Item, $asm08.System.Runtime.CompilerServices.RuntimeOps.MergedRuntimeVariables.prototype.set_Item);
$asm08.System.Runtime.CompilerServices.RuntimeOps.MergedRuntimeVariables.prototype._first = null;
$asm08.System.Runtime.CompilerServices.RuntimeOps.MergedRuntimeVariables.prototype._second = null;
$asm08.System.Runtime.CompilerServices.RuntimeOps.MergedRuntimeVariables.prototype._indexes = null;

$asm08.System.Runtime.CompilerServices.RuntimeOps.EmptyRuntimeVariables.prototype.IRuntimeVariables_get_Count = function () {
	return 0;
};
$asm08.System.Runtime.CompilerServices.RuntimeOps.EmptyRuntimeVariables.prototype.IRuntimeVariables_get_Item = function (index) {
	throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["index"]);
};
$asm08.System.Runtime.CompilerServices.RuntimeOps.EmptyRuntimeVariables.prototype.IRuntimeVariables_set_Item = function (index, value) {
	throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["index"]);
};
$asm08.System.Runtime.CompilerServices.RuntimeOps.EmptyRuntimeVariables.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
JSIL.MakeProperty($asm08.System.Runtime.CompilerServices.RuntimeOps.EmptyRuntimeVariables.prototype, "IRuntimeVariables_Count", 
	$asm08.System.Runtime.CompilerServices.RuntimeOps.EmptyRuntimeVariables.prototype.IRuntimeVariables_get_Count, null);
JSIL.MakeProperty($asm08.System.Runtime.CompilerServices.RuntimeOps.EmptyRuntimeVariables.prototype, "IRuntimeVariables_Item", 
	$asm08.System.Runtime.CompilerServices.RuntimeOps.EmptyRuntimeVariables.prototype.IRuntimeVariables_get_Item, $asm08.System.Runtime.CompilerServices.RuntimeOps.EmptyRuntimeVariables.prototype.IRuntimeVariables_set_Item);

$asm08.System.Runtime.CompilerServices.RuntimeOps.RuntimeVariableList.prototype._ctor = function (data, indexes) {
	System.Object.prototype._ctor.call(this);
	this._data = data;
	this._indexes = indexes;
};
$asm08.System.Runtime.CompilerServices.RuntimeOps.RuntimeVariableList.prototype.get_Count = function () {
	return this._indexes.length;
};
$asm08.System.Runtime.CompilerServices.RuntimeOps.RuntimeVariableList.prototype.get_Item = function (index) {
	return this.GetStrongBox(index).IStrongBox_Value;
};
$asm08.System.Runtime.CompilerServices.RuntimeOps.RuntimeVariableList.prototype.set_Item = function (index, value) {
	this.GetStrongBox(index).IStrongBox_Value = value;
};
$asm08.System.Runtime.CompilerServices.RuntimeOps.RuntimeVariableList.prototype.GetStrongBox = function (index) {
	var num = this._indexes[index];
	var array = this._data;
__loop0__: 
	for (var i = (num >> 32); i > 0; --i) {
		array = $asm08.System.Linq.Expressions.Compiler.HoistedLocals.GetParent(array);
	}
	return JSIL.Cast(array[num], System.Runtime.CompilerServices.IStrongBox);
};
JSIL.MakeProperty($asm08.System.Runtime.CompilerServices.RuntimeOps.RuntimeVariableList.prototype, "Count", 
	$asm08.System.Runtime.CompilerServices.RuntimeOps.RuntimeVariableList.prototype.get_Count, null);
JSIL.MakeProperty($asm08.System.Runtime.CompilerServices.RuntimeOps.RuntimeVariableList.prototype, "Item", 
	$asm08.System.Runtime.CompilerServices.RuntimeOps.RuntimeVariableList.prototype.get_Item, $asm08.System.Runtime.CompilerServices.RuntimeOps.RuntimeVariableList.prototype.set_Item);
$asm08.System.Runtime.CompilerServices.RuntimeOps.RuntimeVariableList.prototype._data = null;
$asm08.System.Runtime.CompilerServices.RuntimeOps.RuntimeVariableList.prototype._indexes = null;

System.Linq.Expressions.ExpressionVisitor.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
System.Linq.Expressions.ExpressionVisitor.prototype.Visit$0 = function (node) {
	if (node !== null) {
		return node.Accept(this);
	}
	return null;
};
System.Linq.Expressions.ExpressionVisitor.prototype.Visit$1 = function (nodes) {
	var array = null;
	var i = 0;
	var count = nodes.Count;
__loop0__: 
	while (i < count) {
		var expression = this.Visit$0(nodes.get_Item(i));
		if (array !== null) {
			array[i] = expression;
		} else if (!System.Object.ReferenceEquals(expression, nodes.get_Item(i))) {
			array = JSIL.Array.New(System.Linq.Expressions.Expression, count);
		__loop1__: 
			for (var j = 0; j < i; ++j) {
				array[j] = nodes.get_Item(j);
			}
			array[i] = expression;
		}
		++i;
	}
	if (array === null) {
		return nodes;
	}
	return new ($asm08.System.Runtime.CompilerServices.TrueReadOnlyCollection$b1.Of(System.Linq.Expressions.Expression)) (array);
};
System.Linq.Expressions.ExpressionVisitor.prototype.VisitArguments = function (nodes) {
	var array = null;
	var i = 0;
	var argumentCount = nodes.IArgumentProvider_ArgumentCount;
__loop0__: 
	while (i < argumentCount) {
		var argument = nodes.IArgumentProvider_GetArgument(i);
		var expression = this.Visit$0(argument);
		if (array !== null) {
			array[i] = expression;
		} else if (!System.Object.ReferenceEquals(expression, argument)) {
			array = JSIL.Array.New(System.Linq.Expressions.Expression, argumentCount);
		__loop1__: 
			for (var j = 0; j < i; ++j) {
				array[j] = nodes.IArgumentProvider_GetArgument(j);
			}
			array[i] = expression;
		}
		++i;
	}
	return array;
};
System.Linq.Expressions.ExpressionVisitor.Visit$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, nodes, elementVisitor) {
		var array = null;
		var i = 0;
		var count = nodes.Count;
	__loop0__: 
		while (i < count) {
			var t = elementVisitor(nodes.get_Item(i));
			if (array !== null) {
				array[i] = t;
			} else if (!System.Object.ReferenceEquals(t, nodes.get_Item(i))) {
				array = JSIL.Array.New(T, count);
			__loop1__: 
				for (var j = 0; j < i; ++j) {
					array[j] = nodes.get_Item(j);
				}
				array[i] = t;
			}
			++i;
		}
		if (array === null) {
			return nodes;
		}
		return new ($asm08.System.Runtime.CompilerServices.TrueReadOnlyCollection$b1.Of(T)) (array);
	}
);
System.Linq.Expressions.ExpressionVisitor.prototype.VisitAndConvert$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, node, callerName) {
		if (node === null) {
			return null;
		}
		node = JSIL.Cast(JSIL.TryCast(this.Visit$0(node), T), T);
		if (node === null) {
			throw $asm08.System.Core.Error.MustRewriteToSameNode(callerName, T, callerName);
		}
		return node;
	}
);
System.Linq.Expressions.ExpressionVisitor.prototype.VisitAndConvert$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, node, callerName) {
		if (node === null) {
			return null;
		}
		node = JSIL.Cast(JSIL.TryCast(this.Visit$0(node), T), T);
		if (node === null) {
			throw $asm08.System.Core.Error.MustRewriteToSameNode(callerName, T, callerName);
		}
		return node;
	}
);
System.Linq.Expressions.ExpressionVisitor.prototype.VisitBinary = function (node) {
	return System.Linq.Expressions.ExpressionVisitor.ValidateBinary(node, node.Update(this.Visit$0(node.Left), this.VisitAndConvert$b1(System.Linq.Expressions.LambdaExpression)(node.Conversion, "VisitBinary"), this.Visit$0(node.Right)));
};
System.Linq.Expressions.ExpressionVisitor.prototype.VisitBlock = function (node) {
	var expressionCount = node.ExpressionCount;
	var array = null;
__loop0__: 
	for (var i = 0; i < expressionCount; ++i) {
		var expression = node.GetExpression(i);
		var expression2 = this.Visit$0(expression);
		if (expression !== expression2) {
			if (array === null) {
				array = JSIL.Array.New(System.Linq.Expressions.Expression, expressionCount);
			}
			array[i] = expression2;
		}
	}
	var readOnlyCollection = this.VisitAndConvert$b1(System.Linq.Expressions.ParameterExpression)(node.Variables, "VisitBlock");
	if (!((readOnlyCollection !== node.Variables) || array)) {
		return node;
	}
__loop1__: 
	for (var j = 0; j < expressionCount; ++j) {
		if (!array[j]) {
			array[j] = node.GetExpression(j);
		}
	}
	return node.Rewrite(readOnlyCollection, array);
};
System.Linq.Expressions.ExpressionVisitor.prototype.VisitConditional = function (node) {
	return node.Update(this.Visit$0(node.Test), this.Visit$0(node.IfTrue), this.Visit$0(node.IfFalse));
};
System.Linq.Expressions.ExpressionVisitor.prototype.VisitConstant = function (node) {
	return node;
};
System.Linq.Expressions.ExpressionVisitor.prototype.VisitDebugInfo = function (node) {
	return node;
};
System.Linq.Expressions.ExpressionVisitor.prototype.VisitDynamic = function (node) {
	var array = this.VisitArguments(node);
	if (array === null) {
		return node;
	}
	return node.Rewrite(array);
};
System.Linq.Expressions.ExpressionVisitor.prototype.VisitDefault = function (node) {
	return node;
};
System.Linq.Expressions.ExpressionVisitor.prototype.VisitExtension = function (node) {
	return node.VisitChildren(this);
};
System.Linq.Expressions.ExpressionVisitor.prototype.VisitGoto = function (node) {
	return node.Update(this.VisitLabelTarget(node.Target), this.Visit$0(node.Value));
};
System.Linq.Expressions.ExpressionVisitor.prototype.VisitInvocation = function (node) {
	var expression = this.Visit$0(node.Expression);
	var array = this.VisitArguments(node);
	if (!((expression !== node.Expression) || array)) {
		return node;
	}
	return node.Rewrite(expression, array);
};
System.Linq.Expressions.ExpressionVisitor.prototype.VisitLabelTarget = function (node) {
	return node;
};
System.Linq.Expressions.ExpressionVisitor.prototype.VisitLabel = function (node) {
	return node.Update(this.VisitLabelTarget(node.Target), this.Visit$0(node.DefaultValue));
};
System.Linq.Expressions.ExpressionVisitor.prototype.VisitLambda$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, node) {
		return node.Update(this.Visit$0(node.Body), JSIL.Cast(this.VisitAndConvert$b1(System.Linq.Expressions.ParameterExpression)(node.Parameters, "VisitLambda"), System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.ParameterExpression)));
	}
);
System.Linq.Expressions.ExpressionVisitor.prototype.VisitLoop = function (node) {
	return node.Update(this.VisitLabelTarget(node.BreakLabel), this.VisitLabelTarget(node.ContinueLabel), this.Visit$0(node.Body));
};
System.Linq.Expressions.ExpressionVisitor.prototype.VisitMember = function (node) {
	return node.Update(this.Visit$0(node.Expression));
};
System.Linq.Expressions.ExpressionVisitor.prototype.VisitIndex = function (node) {
	var expression = this.Visit$0(node.Object);
	var array = this.VisitArguments(node);
	if (!((expression !== node.Object) || array)) {
		return node;
	}
	return node.Rewrite(expression, array);
};
System.Linq.Expressions.ExpressionVisitor.prototype.VisitMethodCall = function (node) {
	var expression = this.Visit$0(node.Object);
	var array = this.VisitArguments(node);
	if (!((expression !== node.Object) || array)) {
		return node;
	}
	return node.Rewrite(expression, JSIL.Cast(array, System.Collections.Generic.IList$b1.Of(System.Linq.Expressions.Expression)));
};
System.Linq.Expressions.ExpressionVisitor.prototype.VisitNewArray = function (node) {
	return node.Update(this.Visit$1(node.Expressions));
};
System.Linq.Expressions.ExpressionVisitor.prototype.VisitNew = function (node) {
	return node.Update(this.Visit$1(node.Arguments));
};
System.Linq.Expressions.ExpressionVisitor.prototype.VisitParameter = function (node) {
	return node;
};
System.Linq.Expressions.ExpressionVisitor.prototype.VisitRuntimeVariables = function (node) {
	return node.Update(JSIL.Cast(this.VisitAndConvert$b1(System.Linq.Expressions.ParameterExpression)(node.Variables, "VisitRuntimeVariables"), System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.ParameterExpression)));
};
System.Linq.Expressions.ExpressionVisitor.prototype.VisitSwitchCase = function (node) {
	return node.Update(this.Visit$1(node.TestValues), this.Visit$0(node.Body));
};
System.Linq.Expressions.ExpressionVisitor.prototype.VisitSwitch = function (node) {
	return System.Linq.Expressions.ExpressionVisitor.ValidateSwitch(node, node.Update(this.Visit$0(node.SwitchValue), System.Linq.Expressions.ExpressionVisitor.Visit$b1(System.Linq.Expressions.SwitchCase)(node.Cases, JSIL.Delegate.New("System.Func`2[System.Linq.Expressions.SwitchCase, System.Linq.Expressions.SwitchCase]", this, JSIL.UntranslatableInstruction("ldvirtftn:IntPtr(ExpressionVisitor::VisitSwitchCase)"))), this.Visit$0(node.DefaultBody)));
};
System.Linq.Expressions.ExpressionVisitor.prototype.VisitCatchBlock = function (node) {
	return node.Update(this.VisitAndConvert$b1(System.Linq.Expressions.ParameterExpression)(node.Variable, "VisitCatchBlock"), this.Visit$0(node.Filter), this.Visit$0(node.Body));
};
System.Linq.Expressions.ExpressionVisitor.prototype.VisitTry = function (node) {
	return node.Update(this.Visit$0(node.Body), System.Linq.Expressions.ExpressionVisitor.Visit$b1(System.Linq.Expressions.CatchBlock)(node.Handlers, JSIL.Delegate.New("System.Func`2[System.Linq.Expressions.CatchBlock, System.Linq.Expressions.CatchBlock]", this, JSIL.UntranslatableInstruction("ldvirtftn:IntPtr(ExpressionVisitor::VisitCatchBlock)"))), this.Visit$0(node.Finally), this.Visit$0(node.Fault));
};
System.Linq.Expressions.ExpressionVisitor.prototype.VisitTypeBinary = function (node) {
	return node.Update(this.Visit$0(node.Expression));
};
System.Linq.Expressions.ExpressionVisitor.prototype.VisitUnary = function (node) {
	return System.Linq.Expressions.ExpressionVisitor.ValidateUnary(node, node.Update(this.Visit$0(node.Operand)));
};
System.Linq.Expressions.ExpressionVisitor.prototype.VisitMemberInit = function (node) {
	return node.Update(this.VisitAndConvert$b1(System.Linq.Expressions.NewExpression)(node.NewExpression, "VisitMemberInit"), JSIL.Cast(System.Linq.Expressions.ExpressionVisitor.Visit$b1(System.Linq.Expressions.MemberBinding)(node.Bindings, JSIL.Delegate.New("System.Func`2[System.Linq.Expressions.MemberBinding, System.Linq.Expressions.MemberBinding]", this, JSIL.UntranslatableInstruction("ldvirtftn:IntPtr(ExpressionVisitor::VisitMemberBinding)"))), System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.MemberBinding)));
};
System.Linq.Expressions.ExpressionVisitor.prototype.VisitListInit = function (node) {
	return node.Update(this.VisitAndConvert$b1(System.Linq.Expressions.NewExpression)(node.NewExpression, "VisitListInit"), JSIL.Cast(System.Linq.Expressions.ExpressionVisitor.Visit$b1(System.Linq.Expressions.ElementInit)(node.Initializers, JSIL.Delegate.New("System.Func`2[System.Linq.Expressions.ElementInit, System.Linq.Expressions.ElementInit]", this, JSIL.UntranslatableInstruction("ldvirtftn:IntPtr(ExpressionVisitor::VisitElementInit)"))), System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.ElementInit)));
};
System.Linq.Expressions.ExpressionVisitor.prototype.VisitElementInit = function (node) {
	return node.Update(this.Visit$1(node.Arguments));
};
System.Linq.Expressions.ExpressionVisitor.prototype.VisitMemberBinding = function (node) {
	switch (Number(node.BindingType)) {
		case 0: 
			return this.VisitMemberAssignment(JSIL.Cast(node, System.Linq.Expressions.MemberAssignment));
		case 1: 
			return this.VisitMemberMemberBinding(JSIL.Cast(node, System.Linq.Expressions.MemberMemberBinding));
		case 2: 
			return this.VisitMemberListBinding(JSIL.Cast(node, System.Linq.Expressions.MemberListBinding));
		default: 
			throw $asm08.System.Core.Error.UnhandledBindingType(node.BindingType);
	}
};
System.Linq.Expressions.ExpressionVisitor.prototype.VisitMemberAssignment = function (node) {
	return node.Update(this.Visit$0(node.Expression));
};
System.Linq.Expressions.ExpressionVisitor.prototype.VisitMemberMemberBinding = function (node) {
	return node.Update(JSIL.Cast(System.Linq.Expressions.ExpressionVisitor.Visit$b1(System.Linq.Expressions.MemberBinding)(node.Bindings, JSIL.Delegate.New("System.Func`2[System.Linq.Expressions.MemberBinding, System.Linq.Expressions.MemberBinding]", this, JSIL.UntranslatableInstruction("ldvirtftn:IntPtr(ExpressionVisitor::VisitMemberBinding)"))), System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.MemberBinding)));
};
System.Linq.Expressions.ExpressionVisitor.prototype.VisitMemberListBinding = function (node) {
	return node.Update(JSIL.Cast(System.Linq.Expressions.ExpressionVisitor.Visit$b1(System.Linq.Expressions.ElementInit)(node.Initializers, JSIL.Delegate.New("System.Func`2[System.Linq.Expressions.ElementInit, System.Linq.Expressions.ElementInit]", this, JSIL.UntranslatableInstruction("ldvirtftn:IntPtr(ExpressionVisitor::VisitElementInit)"))), System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.ElementInit)));
};
System.Linq.Expressions.ExpressionVisitor.ValidateUnary = function (before, after) {
	if (!((before === after) || before.Method)) {
		if (after.Method !== null) {
			throw $asm08.System.Core.Error.MustRewriteWithoutMethod(after.Method, "VisitUnary");
		}
		if (!((before.Operand === null) || (after.Operand === null))) {
			System.Linq.Expressions.ExpressionVisitor.ValidateChildType(before.Operand.Type, after.Operand.Type, "VisitUnary");
		}
	}
	return after;
};
System.Linq.Expressions.ExpressionVisitor.ValidateBinary = function (before, after) {
	if (!((before === after) || before.Method)) {
		if (after.Method !== null) {
			throw $asm08.System.Core.Error.MustRewriteWithoutMethod(after.Method, "VisitBinary");
		}
		System.Linq.Expressions.ExpressionVisitor.ValidateChildType(before.Left.Type, after.Left.Type, "VisitBinary");
		System.Linq.Expressions.ExpressionVisitor.ValidateChildType(before.Right.Type, after.Right.Type, "VisitBinary");
	}
	return after;
};
System.Linq.Expressions.ExpressionVisitor.ValidateSwitch = function (before, after) {
	if (!(before.Comparison || (after.Comparison === null))) {
		throw $asm08.System.Core.Error.MustRewriteWithoutMethod(after.Comparison, "VisitSwitch");
	}
	return after;
};
System.Linq.Expressions.ExpressionVisitor.ValidateChildType = function (before, after, methodName) {
	if (before.IsValueType) {
		if ($asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(before, after)) {
			return;
		}
	} else if (!after.IsValueType) {
		return;
	}
	throw $asm08.System.Core.Error.MustRewriteChildToSameType(before, after, methodName);
};
JSIL.OverloadedMethod(System.Linq.Expressions.ExpressionVisitor.prototype, "Visit", [
		["Visit$0", [System.Linq.Expressions.Expression]], 
		["Visit$1", [System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(System.Linq.Expressions.Expression)]]
	]);

System.Dynamic.GetIndexBinder.prototype._ctor = function (callInfo) {
	System.Dynamic.DynamicMetaObjectBinder.prototype._ctor.call(this);
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(callInfo, "callInfo");
	this._callInfo = callInfo;
};
System.Dynamic.GetIndexBinder.prototype.get_ReturnType = function () {
	return System.Object;
};
System.Dynamic.GetIndexBinder.prototype.get_CallInfo = function () {
	return this._callInfo;
};
System.Dynamic.GetIndexBinder.prototype.Bind = function (target, args) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(target, "target");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNullItems$b1(System.Dynamic.DynamicMetaObject)(JSIL.Cast(args, System.Collections.Generic.IList$b1.Of(System.Dynamic.DynamicMetaObject)), "args");
	return target.BindGetIndex(this, args);
};
System.Dynamic.GetIndexBinder.prototype.get_IsStandardBinder = function () {
	return true;
};
System.Dynamic.GetIndexBinder.prototype.FallbackGetIndex$0 = function (target, indexes) {
	return this.FallbackGetIndex$1(target, indexes, null);
};
JSIL.OverloadedMethod(System.Dynamic.GetIndexBinder.prototype, "FallbackGetIndex", [
		["FallbackGetIndex$0", [System.Dynamic.DynamicMetaObject, System.Array.Of(System.Dynamic.DynamicMetaObject)]], 
		["FallbackGetIndex$1", [System.Dynamic.DynamicMetaObject, System.Array.Of(System.Dynamic.DynamicMetaObject), System.Dynamic.DynamicMetaObject]]
	]);
JSIL.MakeProperty(System.Dynamic.GetIndexBinder.prototype, "ReturnType", 
	System.Dynamic.GetIndexBinder.prototype.get_ReturnType, null);
JSIL.MakeProperty(System.Dynamic.GetIndexBinder.prototype, "CallInfo", 
	System.Dynamic.GetIndexBinder.prototype.get_CallInfo, null);
JSIL.MakeProperty(System.Dynamic.GetIndexBinder.prototype, "IsStandardBinder", 
	System.Dynamic.GetIndexBinder.prototype.get_IsStandardBinder, null);
System.Dynamic.GetIndexBinder.prototype._callInfo = null;

System.Dynamic.InvokeBinder.prototype._ctor = function (callInfo) {
	System.Dynamic.DynamicMetaObjectBinder.prototype._ctor.call(this);
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(callInfo, "callInfo");
	this._callInfo = callInfo;
};
System.Dynamic.InvokeBinder.prototype.get_ReturnType = function () {
	return System.Object;
};
System.Dynamic.InvokeBinder.prototype.get_CallInfo = function () {
	return this._callInfo;
};
System.Dynamic.InvokeBinder.prototype.FallbackInvoke$0 = function (target, args) {
	return this.FallbackInvoke$1(target, args, null);
};
System.Dynamic.InvokeBinder.prototype.Bind = function (target, args) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(target, "target");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNullItems$b1(System.Dynamic.DynamicMetaObject)(JSIL.Cast(args, System.Collections.Generic.IList$b1.Of(System.Dynamic.DynamicMetaObject)), "args");
	return target.BindInvoke(this, args);
};
System.Dynamic.InvokeBinder.prototype.get_IsStandardBinder = function () {
	return true;
};
JSIL.OverloadedMethod(System.Dynamic.InvokeBinder.prototype, "FallbackInvoke", [
		["FallbackInvoke$0", [System.Dynamic.DynamicMetaObject, System.Array.Of(System.Dynamic.DynamicMetaObject)]], 
		["FallbackInvoke$1", [System.Dynamic.DynamicMetaObject, System.Array.Of(System.Dynamic.DynamicMetaObject), System.Dynamic.DynamicMetaObject]]
	]);
JSIL.MakeProperty(System.Dynamic.InvokeBinder.prototype, "ReturnType", 
	System.Dynamic.InvokeBinder.prototype.get_ReturnType, null);
JSIL.MakeProperty(System.Dynamic.InvokeBinder.prototype, "CallInfo", 
	System.Dynamic.InvokeBinder.prototype.get_CallInfo, null);
JSIL.MakeProperty(System.Dynamic.InvokeBinder.prototype, "IsStandardBinder", 
	System.Dynamic.InvokeBinder.prototype.get_IsStandardBinder, null);
System.Dynamic.InvokeBinder.prototype._callInfo = null;

System.Dynamic.InvokeMemberBinder.prototype._ctor = function (name, ignoreCase, callInfo) {
	System.Dynamic.DynamicMetaObjectBinder.prototype._ctor.call(this);
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(name, "name");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(callInfo, "callInfo");
	this._name = name;
	this._ignoreCase = ignoreCase;
	this._callInfo = callInfo;
};
System.Dynamic.InvokeMemberBinder.prototype.get_ReturnType = function () {
	return System.Object;
};
System.Dynamic.InvokeMemberBinder.prototype.get_Name = function () {
	return this._name;
};
System.Dynamic.InvokeMemberBinder.prototype.get_IgnoreCase = function () {
	return this._ignoreCase;
};
System.Dynamic.InvokeMemberBinder.prototype.get_CallInfo = function () {
	return this._callInfo;
};
System.Dynamic.InvokeMemberBinder.prototype.Bind = function (target, args) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(target, "target");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNullItems$b1(System.Dynamic.DynamicMetaObject)(JSIL.Cast(args, System.Collections.Generic.IList$b1.Of(System.Dynamic.DynamicMetaObject)), "args");
	return target.BindInvokeMember(this, args);
};
System.Dynamic.InvokeMemberBinder.prototype.get_IsStandardBinder = function () {
	return true;
};
System.Dynamic.InvokeMemberBinder.prototype.FallbackInvokeMember$0 = function (target, args) {
	return this.FallbackInvokeMember$1(target, args, null);
};
JSIL.OverloadedMethod(System.Dynamic.InvokeMemberBinder.prototype, "FallbackInvokeMember", [
		["FallbackInvokeMember$0", [System.Dynamic.DynamicMetaObject, System.Array.Of(System.Dynamic.DynamicMetaObject)]], 
		["FallbackInvokeMember$1", [System.Dynamic.DynamicMetaObject, System.Array.Of(System.Dynamic.DynamicMetaObject), System.Dynamic.DynamicMetaObject]]
	]);
JSIL.MakeProperty(System.Dynamic.InvokeMemberBinder.prototype, "ReturnType", 
	System.Dynamic.InvokeMemberBinder.prototype.get_ReturnType, null);
JSIL.MakeProperty(System.Dynamic.InvokeMemberBinder.prototype, "Name", 
	System.Dynamic.InvokeMemberBinder.prototype.get_Name, null);
JSIL.MakeProperty(System.Dynamic.InvokeMemberBinder.prototype, "IgnoreCase", 
	System.Dynamic.InvokeMemberBinder.prototype.get_IgnoreCase, null);
JSIL.MakeProperty(System.Dynamic.InvokeMemberBinder.prototype, "CallInfo", 
	System.Dynamic.InvokeMemberBinder.prototype.get_CallInfo, null);
JSIL.MakeProperty(System.Dynamic.InvokeMemberBinder.prototype, "IsStandardBinder", 
	System.Dynamic.InvokeMemberBinder.prototype.get_IsStandardBinder, null);
System.Dynamic.InvokeMemberBinder.prototype._name = null;
System.Dynamic.InvokeMemberBinder.prototype._ignoreCase = false;
System.Dynamic.InvokeMemberBinder.prototype._callInfo = null;

System.Runtime.CompilerServices.RuleCache$b1.prototype._ctor = function () {
	this._rules = JSIL.Array.New(this.T, 0);
	this.cacheLock = new System.Object();
	System.Object.prototype._ctor.call(this);
};
System.Runtime.CompilerServices.RuleCache$b1.prototype.GetRules = function () {
	return this._rules;
};
System.Runtime.CompilerServices.RuleCache$b1.prototype.MoveRule = function (rule, i) {
	var obj = null;
	System.Threading.Monitor.Enter((obj = this.cacheLock));
	try {
		var num = (this._rules.length - i);
		if (num > 8) {
			num = 8;
		}
		var num2 = -1;
		var num3 = System.Math.Min(this._rules.length, (i + num));
	__loop0__: 
		for (var j = i; j < num3; ++j) {
			if (this._rules[j] === rule) {
				num2 = j;
				break __loop0__;
			}
		}
		if (num2 >= 0) {
			var t = this._rules[num2];
			this._rules[num2] = this._rules[(num2 - 1)];
			this._rules[(num2 - 1)] = this._rules[(num2 - 2)];
			this._rules[(num2 - 2)] = t;
		}
	} finally {
		System.Threading.Monitor.Exit(obj);
	}
};
System.Runtime.CompilerServices.RuleCache$b1.prototype.AddRule = function (newRule) {
	var obj = null;
	System.Threading.Monitor.Enter((obj = this.cacheLock));
	try {
		this._rules = System.Runtime.CompilerServices.RuleCache$b1.Of(this.T).AddOrInsert(this._rules, newRule);
	} finally {
		System.Threading.Monitor.Exit(obj);
	}
};
System.Runtime.CompilerServices.RuleCache$b1.prototype.ReplaceRule = function (oldRule, newRule) {
	var obj = null;
	System.Threading.Monitor.Enter((obj = this.cacheLock));
	try {
		var num = (Array.prototype.indexOf.call(this._rules, oldRule));
		if (num >= 0) {
			this._rules[num] = newRule;
		} else {
			this._rules = System.Runtime.CompilerServices.RuleCache$b1.Of(this.T).AddOrInsert(this._rules, newRule);
		}
	} finally {
		System.Threading.Monitor.Exit(obj);
	}
};
System.Runtime.CompilerServices.RuleCache$b1.AddOrInsert = function (rules, item) {
	if (rules.length < 64) {
		return $asm08.System.Dynamic.Utils.CollectionExtensions.AddLast$b1(this.T)(JSIL.Cast(rules, System.Collections.Generic.IList$b1.Of(this.T)), item);
	}
	var num = (rules.length + 1);
	if (num > 128) {
		num = 128;
		var array = rules;
	} else {
		array = JSIL.Array.New(this.T, num);
	}
	System.Array.Copy$1(
		rules, 
		0, 
		array, 
		0, 
		64
	);
	array[64] = item;
	System.Array.Copy$1(
		rules, 
		64, 
		array, 
		65, 
		((num - 64) - 1)
	);
	return array;
};
Object.defineProperty(System.Runtime.CompilerServices.RuleCache$b1, "MaxRules", {
		"value": 128}
);
Object.defineProperty(System.Runtime.CompilerServices.RuleCache$b1, "InsertPosition", {
		"value": 64}
);
System.Runtime.CompilerServices.RuleCache$b1.prototype._rules = null;
System.Runtime.CompilerServices.RuleCache$b1.prototype.cacheLock = null;

System.Dynamic.SetIndexBinder.prototype._ctor = function (callInfo) {
	System.Dynamic.DynamicMetaObjectBinder.prototype._ctor.call(this);
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(callInfo, "callInfo");
	this._callInfo = callInfo;
};
System.Dynamic.SetIndexBinder.prototype.get_ReturnType = function () {
	return System.Object;
};
System.Dynamic.SetIndexBinder.prototype.get_CallInfo = function () {
	return this._callInfo;
};
System.Dynamic.SetIndexBinder.prototype.Bind = function (target, args) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(target, "target");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(args, "args");
	$asm08.System.Dynamic.Utils.ContractUtils.Requires$1((args.length >= 2), "args");
	var value = args[(args.length - 1)];
	var array = $asm08.System.Dynamic.Utils.CollectionExtensions.RemoveLast$b1(System.Dynamic.DynamicMetaObject)(args);
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(value, "args");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNullItems$b1(System.Dynamic.DynamicMetaObject)(JSIL.Cast(array, System.Collections.Generic.IList$b1.Of(System.Dynamic.DynamicMetaObject)), "args");
	return target.BindSetIndex(this, array, value);
};
System.Dynamic.SetIndexBinder.prototype.get_IsStandardBinder = function () {
	return true;
};
System.Dynamic.SetIndexBinder.prototype.FallbackSetIndex$0 = function (target, indexes, value) {
	return this.FallbackSetIndex$1(target, indexes, value, null);
};
JSIL.OverloadedMethod(System.Dynamic.SetIndexBinder.prototype, "FallbackSetIndex", [
		["FallbackSetIndex$0", [System.Dynamic.DynamicMetaObject, System.Array.Of(System.Dynamic.DynamicMetaObject), System.Dynamic.DynamicMetaObject]], 
		["FallbackSetIndex$1", [System.Dynamic.DynamicMetaObject, System.Array.Of(System.Dynamic.DynamicMetaObject), System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject]]
	]);
JSIL.MakeProperty(System.Dynamic.SetIndexBinder.prototype, "ReturnType", 
	System.Dynamic.SetIndexBinder.prototype.get_ReturnType, null);
JSIL.MakeProperty(System.Dynamic.SetIndexBinder.prototype, "CallInfo", 
	System.Dynamic.SetIndexBinder.prototype.get_CallInfo, null);
JSIL.MakeProperty(System.Dynamic.SetIndexBinder.prototype, "IsStandardBinder", 
	System.Dynamic.SetIndexBinder.prototype.get_IsStandardBinder, null);
System.Dynamic.SetIndexBinder.prototype._callInfo = null;

System.Dynamic.SetMemberBinder.prototype._ctor = function (name, ignoreCase) {
	System.Dynamic.DynamicMetaObjectBinder.prototype._ctor.call(this);
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(name, "name");
	this._name = name;
	this._ignoreCase = ignoreCase;
};
System.Dynamic.SetMemberBinder.prototype.get_ReturnType = function () {
	return System.Object;
};
System.Dynamic.SetMemberBinder.prototype.get_Name = function () {
	return this._name;
};
System.Dynamic.SetMemberBinder.prototype.get_IgnoreCase = function () {
	return this._ignoreCase;
};
System.Dynamic.SetMemberBinder.prototype.Bind = function (target, args) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(target, "target");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(args, "args");
	$asm08.System.Dynamic.Utils.ContractUtils.Requires$1((args.length === 1), "args");
	var value = args[0];
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(value, "args");
	return target.BindSetMember(this, value);
};
System.Dynamic.SetMemberBinder.prototype.get_IsStandardBinder = function () {
	return true;
};
System.Dynamic.SetMemberBinder.prototype.FallbackSetMember$0 = function (target, value) {
	return this.FallbackSetMember$1(target, value, null);
};
JSIL.OverloadedMethod(System.Dynamic.SetMemberBinder.prototype, "FallbackSetMember", [
		["FallbackSetMember$0", [System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject]], 
		["FallbackSetMember$1", [System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject]]
	]);
JSIL.MakeProperty(System.Dynamic.SetMemberBinder.prototype, "ReturnType", 
	System.Dynamic.SetMemberBinder.prototype.get_ReturnType, null);
JSIL.MakeProperty(System.Dynamic.SetMemberBinder.prototype, "Name", 
	System.Dynamic.SetMemberBinder.prototype.get_Name, null);
JSIL.MakeProperty(System.Dynamic.SetMemberBinder.prototype, "IgnoreCase", 
	System.Dynamic.SetMemberBinder.prototype.get_IgnoreCase, null);
JSIL.MakeProperty(System.Dynamic.SetMemberBinder.prototype, "IsStandardBinder", 
	System.Dynamic.SetMemberBinder.prototype.get_IsStandardBinder, null);
System.Dynamic.SetMemberBinder.prototype._name = null;
System.Dynamic.SetMemberBinder.prototype._ignoreCase = false;

System.Dynamic.UnaryOperationBinder.prototype._ctor = function (operation) {
	System.Dynamic.DynamicMetaObjectBinder.prototype._ctor.call(this);
	$asm08.System.Dynamic.Utils.ContractUtils.Requires$1(System.Dynamic.UnaryOperationBinder.OperationIsValid(operation), "operation");
	this._operation = operation;
};
System.Dynamic.UnaryOperationBinder.prototype.get_ReturnType = function () {
	switch (Number(this._operation)) {
		case 83: 
		case 84: 
			return System.Boolean;
		default: 
			return System.Object;
	}
};
System.Dynamic.UnaryOperationBinder.prototype.get_Operation = function () {
	return this._operation;
};
System.Dynamic.UnaryOperationBinder.prototype.FallbackUnaryOperation$0 = function (target) {
	return this.FallbackUnaryOperation$1(target, null);
};
System.Dynamic.UnaryOperationBinder.prototype.Bind = function (target, args) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(target, "target");
	$asm08.System.Dynamic.Utils.ContractUtils.Requires$1(((args === null) || (args.length === 0)), "args");
	return target.BindUnaryOperation(this);
};
System.Dynamic.UnaryOperationBinder.prototype.get_IsStandardBinder = function () {
	return true;
};
System.Dynamic.UnaryOperationBinder.OperationIsValid = function (operation) {
	if (operation <= System.Linq.Expressions.ExpressionType.Not) {
		switch (Number(operation)) {
			case 28: 
			case 29: 
				break;
			default: 
				if (operation !== System.Linq.Expressions.ExpressionType.Not) {
					return false;
				}
				break;
		}
	} else if (operation !== System.Linq.Expressions.ExpressionType.Decrement) {
		switch (Number(operation)) {
			case 52: 
			case 54: 
				break;
			case 53: 
				return false;
			default: 
				switch (Number(operation)) {
					case 82: 
					case 83: 
					case 84: 
						break;
					default: 
						return false;
				}
				break;
		}
	}
	return true;
};
JSIL.OverloadedMethod(System.Dynamic.UnaryOperationBinder.prototype, "FallbackUnaryOperation", [
		["FallbackUnaryOperation$0", [System.Dynamic.DynamicMetaObject]], 
		["FallbackUnaryOperation$1", [System.Dynamic.DynamicMetaObject, System.Dynamic.DynamicMetaObject]]
	]);
JSIL.MakeProperty(System.Dynamic.UnaryOperationBinder.prototype, "ReturnType", 
	System.Dynamic.UnaryOperationBinder.prototype.get_ReturnType, null);
JSIL.MakeProperty(System.Dynamic.UnaryOperationBinder.prototype, "Operation", 
	System.Dynamic.UnaryOperationBinder.prototype.get_Operation, null);
JSIL.MakeProperty(System.Dynamic.UnaryOperationBinder.prototype, "IsStandardBinder", 
	System.Dynamic.UnaryOperationBinder.prototype.get_IsStandardBinder, null);
System.Dynamic.UnaryOperationBinder.prototype._operation = 0;

$asm08.System.Dynamic.UpdateDelegates.UpdateAndExecute0$b1 = JSIL.GenericMethod(
	["TRet"], 
	function (TRet, site) {
		var rules = null;
		var callSite = JSIL.Cast(site, System.Runtime.CompilerServices.CallSite$b1.Of(System.Func$b2.Of(System.Runtime.CompilerServices.CallSite, TRet)));
		var target = JSIL.Cast(callSite.Target, System.Func$b2.Of(System.Runtime.CompilerServices.CallSite, TRet));
		site = System.Runtime.CompilerServices.CallSiteOps.CreateMatchmaker$b1(System.Func$b2.Of(System.Runtime.CompilerServices.CallSite, TRet))(callSite);
		if ((rules = System.Runtime.CompilerServices.CallSiteOps.GetRules$b1(System.Func$b2.Of(System.Runtime.CompilerServices.CallSite, TRet))(callSite)) !== null) {
		__loop0__: 
			for (var i = 0; i < rules.length; ++i) {
				var func = rules[i];
				if (func !== target) {
					callSite.Target = func;
					var tRet = JSIL.Cast(JSIL.UntranslatableInstruction("invokecallsitetarget:!!TRet(class System.Func`2<class System.Runtime.CompilerServices.CallSite, !!TRet>::Invoke, ldloc:class System.Func`2<class System.Runtime.CompilerServices.CallSite, !!TRet>(func), ldloc:CallSite(site))"), TRet);
					if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
						System.Runtime.CompilerServices.CallSiteOps.UpdateRules$b1(System.Func$b2.Of(System.Runtime.CompilerServices.CallSite, TRet))(callSite, i);
						return tRet;
					}
					System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
				}
			}
		}
		var ruleCache = System.Runtime.CompilerServices.CallSiteOps.GetRuleCache$b1(System.Func$b2.Of(System.Runtime.CompilerServices.CallSite, TRet))(callSite);
		rules = ruleCache.GetRules();
	__loop1__: 
		for (var j = 0; j < rules.length; ++j) {
			func = rules[j];
			callSite.Target = func;
			try {
				tRet = JSIL.Cast(JSIL.UntranslatableInstruction("invokecallsitetarget:!!TRet(class System.Func`2<class System.Runtime.CompilerServices.CallSite, !!TRet>::Invoke, ldloc:class System.Func`2<class System.Runtime.CompilerServices.CallSite, !!TRet>(func), ldloc:CallSite(site))"), TRet);
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					var result = tRet;
					return result;
				}
			} finally {
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					System.Runtime.CompilerServices.CallSiteOps.AddRule$b1(System.Func$b2.Of(System.Runtime.CompilerServices.CallSite, TRet))(callSite, func);
					System.Runtime.CompilerServices.CallSiteOps.MoveRule$b1(System.Func$b2.Of(System.Runtime.CompilerServices.CallSite, TRet))(ruleCache, func, j);
				}
			}
			System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
		}
		func = null;
		var args = JSIL.Array.New(System.Object, 0);
	__loop2__: 
		while (true) {
			callSite.Target = target;
			func = (callSite.Target = callSite.Binder.BindCore$b1(System.Func$b2.Of(System.Runtime.CompilerServices.CallSite, TRet))(callSite, args));
			try {
				tRet = JSIL.Cast(JSIL.UntranslatableInstruction("invokecallsitetarget:!!TRet(class System.Func`2<class System.Runtime.CompilerServices.CallSite, !!TRet>::Invoke, ldloc:class System.Func`2<class System.Runtime.CompilerServices.CallSite, !!TRet>(func), ldloc:CallSite(site))"), TRet);
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					result = tRet;
					return result;
				}
			} finally {
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					System.Runtime.CompilerServices.CallSiteOps.AddRule$b1(System.Func$b2.Of(System.Runtime.CompilerServices.CallSite, TRet))(callSite, func);
				}
			}
			System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
		}
	}
);
$asm08.System.Dynamic.UpdateDelegates.NoMatch0$b1 = JSIL.GenericMethod(
	["TRet"], 
	function (TRet, site) {
		site._match = false;
		return null;
	}
);
$asm08.System.Dynamic.UpdateDelegates.UpdateAndExecute1$b2 = JSIL.GenericMethod(
	["T0", "TRet"], 
	function (T0, TRet, site, arg0) {
		var rules = null;
		var callSite = JSIL.Cast(site, System.Runtime.CompilerServices.CallSite$b1.Of(System.Func$b3.Of(System.Runtime.CompilerServices.CallSite, T0, TRet)));
		var target = JSIL.Cast(callSite.Target, System.Func$b3.Of(System.Runtime.CompilerServices.CallSite, T0, TRet));
		site = System.Runtime.CompilerServices.CallSiteOps.CreateMatchmaker$b1(System.Func$b3.Of(System.Runtime.CompilerServices.CallSite, T0, TRet))(callSite);
		if ((rules = System.Runtime.CompilerServices.CallSiteOps.GetRules$b1(System.Func$b3.Of(System.Runtime.CompilerServices.CallSite, T0, TRet))(callSite)) !== null) {
		__loop0__: 
			for (var i = 0; i < rules.length; ++i) {
				var func = rules[i];
				if (func !== target) {
					callSite.Target = func;
					var tRet = JSIL.Cast(JSIL.UntranslatableInstruction("invokecallsitetarget:!!TRet(class System.Func`3<class System.Runtime.CompilerServices.CallSite, !!T0, !!TRet>::Invoke, ldloc:class System.Func`3<class System.Runtime.CompilerServices.CallSite, !!T0, !!TRet>(func), ldloc:CallSite(site), ldloc:!!T0(arg0))"), TRet);
					if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
						System.Runtime.CompilerServices.CallSiteOps.UpdateRules$b1(System.Func$b3.Of(System.Runtime.CompilerServices.CallSite, T0, TRet))(callSite, i);
						return tRet;
					}
					System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
				}
			}
		}
		var ruleCache = System.Runtime.CompilerServices.CallSiteOps.GetRuleCache$b1(System.Func$b3.Of(System.Runtime.CompilerServices.CallSite, T0, TRet))(callSite);
		rules = ruleCache.GetRules();
	__loop1__: 
		for (var j = 0; j < rules.length; ++j) {
			func = rules[j];
			callSite.Target = func;
			try {
				tRet = JSIL.Cast(JSIL.UntranslatableInstruction("invokecallsitetarget:!!TRet(class System.Func`3<class System.Runtime.CompilerServices.CallSite, !!T0, !!TRet>::Invoke, ldloc:class System.Func`3<class System.Runtime.CompilerServices.CallSite, !!T0, !!TRet>(func), ldloc:CallSite(site), ldloc:!!T0(arg0))"), TRet);
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					var result = tRet;
					return result;
				}
			} finally {
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					System.Runtime.CompilerServices.CallSiteOps.AddRule$b1(System.Func$b3.Of(System.Runtime.CompilerServices.CallSite, T0, TRet))(callSite, func);
					System.Runtime.CompilerServices.CallSiteOps.MoveRule$b1(System.Func$b3.Of(System.Runtime.CompilerServices.CallSite, T0, TRet))(ruleCache, func, j);
				}
			}
			System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
		}
		func = null;
		var args = [arg0];
	__loop2__: 
		while (true) {
			callSite.Target = target;
			func = (callSite.Target = callSite.Binder.BindCore$b1(System.Func$b3.Of(System.Runtime.CompilerServices.CallSite, T0, TRet))(callSite, args));
			try {
				tRet = JSIL.Cast(JSIL.UntranslatableInstruction("invokecallsitetarget:!!TRet(class System.Func`3<class System.Runtime.CompilerServices.CallSite, !!T0, !!TRet>::Invoke, ldloc:class System.Func`3<class System.Runtime.CompilerServices.CallSite, !!T0, !!TRet>(func), ldloc:CallSite(site), ldloc:!!T0(arg0))"), TRet);
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					result = tRet;
					return result;
				}
			} finally {
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					System.Runtime.CompilerServices.CallSiteOps.AddRule$b1(System.Func$b3.Of(System.Runtime.CompilerServices.CallSite, T0, TRet))(callSite, func);
				}
			}
			System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
		}
	}
);
$asm08.System.Dynamic.UpdateDelegates.NoMatch1$b2 = JSIL.GenericMethod(
	["T0", "TRet"], 
	function (T0, TRet, site, arg0) {
		site._match = false;
		return null;
	}
);
$asm08.System.Dynamic.UpdateDelegates.UpdateAndExecute2$b3 = JSIL.GenericMethod(
	["T0", "T1", "TRet"], 
	function (T0, T1, TRet, site, arg0, arg1) {
		var rules = null;
		var callSite = JSIL.Cast(site, System.Runtime.CompilerServices.CallSite$b1.Of(System.Func$b4.Of(System.Runtime.CompilerServices.CallSite, T0, T1, TRet)));
		var target = JSIL.Cast(callSite.Target, System.Func$b4.Of(System.Runtime.CompilerServices.CallSite, T0, T1, TRet));
		site = System.Runtime.CompilerServices.CallSiteOps.CreateMatchmaker$b1(System.Func$b4.Of(System.Runtime.CompilerServices.CallSite, T0, T1, TRet))(callSite);
		if ((rules = System.Runtime.CompilerServices.CallSiteOps.GetRules$b1(System.Func$b4.Of(System.Runtime.CompilerServices.CallSite, T0, T1, TRet))(callSite)) !== null) {
		__loop0__: 
			for (var i = 0; i < rules.length; ++i) {
				var func = rules[i];
				if (func !== target) {
					callSite.Target = func;
					var tRet = JSIL.Cast(JSIL.UntranslatableInstruction("invokecallsitetarget:!!TRet(class System.Func`4<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!TRet>::Invoke, ldloc:class System.Func`4<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!TRet>(func), ldloc:CallSite(site), ldloc:!!T0(arg0), ldloc:!!T1(arg1))"), TRet);
					if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
						System.Runtime.CompilerServices.CallSiteOps.UpdateRules$b1(System.Func$b4.Of(System.Runtime.CompilerServices.CallSite, T0, T1, TRet))(callSite, i);
						return tRet;
					}
					System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
				}
			}
		}
		var ruleCache = System.Runtime.CompilerServices.CallSiteOps.GetRuleCache$b1(System.Func$b4.Of(System.Runtime.CompilerServices.CallSite, T0, T1, TRet))(callSite);
		rules = ruleCache.GetRules();
	__loop1__: 
		for (var j = 0; j < rules.length; ++j) {
			func = rules[j];
			callSite.Target = func;
			try {
				tRet = JSIL.Cast(JSIL.UntranslatableInstruction("invokecallsitetarget:!!TRet(class System.Func`4<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!TRet>::Invoke, ldloc:class System.Func`4<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!TRet>(func), ldloc:CallSite(site), ldloc:!!T0(arg0), ldloc:!!T1(arg1))"), TRet);
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					var result = tRet;
					return result;
				}
			} finally {
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					System.Runtime.CompilerServices.CallSiteOps.AddRule$b1(System.Func$b4.Of(System.Runtime.CompilerServices.CallSite, T0, T1, TRet))(callSite, func);
					System.Runtime.CompilerServices.CallSiteOps.MoveRule$b1(System.Func$b4.Of(System.Runtime.CompilerServices.CallSite, T0, T1, TRet))(ruleCache, func, j);
				}
			}
			System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
		}
		func = null;
		var args = [arg0, arg1];
	__loop2__: 
		while (true) {
			callSite.Target = target;
			func = (callSite.Target = callSite.Binder.BindCore$b1(System.Func$b4.Of(System.Runtime.CompilerServices.CallSite, T0, T1, TRet))(callSite, args));
			try {
				tRet = JSIL.Cast(JSIL.UntranslatableInstruction("invokecallsitetarget:!!TRet(class System.Func`4<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!TRet>::Invoke, ldloc:class System.Func`4<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!TRet>(func), ldloc:CallSite(site), ldloc:!!T0(arg0), ldloc:!!T1(arg1))"), TRet);
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					result = tRet;
					return result;
				}
			} finally {
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					System.Runtime.CompilerServices.CallSiteOps.AddRule$b1(System.Func$b4.Of(System.Runtime.CompilerServices.CallSite, T0, T1, TRet))(callSite, func);
				}
			}
			System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
		}
	}
);
$asm08.System.Dynamic.UpdateDelegates.NoMatch2$b3 = JSIL.GenericMethod(
	["T0", "T1", "TRet"], 
	function (T0, T1, TRet, site, arg0, arg1) {
		site._match = false;
		return null;
	}
);
$asm08.System.Dynamic.UpdateDelegates.UpdateAndExecute3$b4 = JSIL.GenericMethod(
	["T0", "T1", "T2", "TRet"], 
	function (T0, T1, T2, TRet, site, arg0, arg1, arg2) {
		var rules = null;
		var callSite = JSIL.Cast(site, System.Runtime.CompilerServices.CallSite$b1.Of(System.Func$b5.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, TRet)));
		var target = JSIL.Cast(callSite.Target, System.Func$b5.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, TRet));
		site = System.Runtime.CompilerServices.CallSiteOps.CreateMatchmaker$b1(System.Func$b5.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, TRet))(callSite);
		if ((rules = System.Runtime.CompilerServices.CallSiteOps.GetRules$b1(System.Func$b5.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, TRet))(callSite)) !== null) {
		__loop0__: 
			for (var i = 0; i < rules.length; ++i) {
				var func = rules[i];
				if (func !== target) {
					callSite.Target = func;
					var tRet = JSIL.Cast(JSIL.UntranslatableInstruction("invokecallsitetarget:!!TRet(class System.Func`5<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!TRet>::Invoke, ldloc:class System.Func`5<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!TRet>(func), ldloc:CallSite(site), ldloc:!!T0(arg0), ldloc:!!T1(arg1), ldloc:!!T2(arg2))"), TRet);
					if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
						System.Runtime.CompilerServices.CallSiteOps.UpdateRules$b1(System.Func$b5.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, TRet))(callSite, i);
						return tRet;
					}
					System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
				}
			}
		}
		var ruleCache = System.Runtime.CompilerServices.CallSiteOps.GetRuleCache$b1(System.Func$b5.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, TRet))(callSite);
		rules = ruleCache.GetRules();
	__loop1__: 
		for (var j = 0; j < rules.length; ++j) {
			func = rules[j];
			callSite.Target = func;
			try {
				tRet = JSIL.Cast(JSIL.UntranslatableInstruction("invokecallsitetarget:!!TRet(class System.Func`5<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!TRet>::Invoke, ldloc:class System.Func`5<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!TRet>(func), ldloc:CallSite(site), ldloc:!!T0(arg0), ldloc:!!T1(arg1), ldloc:!!T2(arg2))"), TRet);
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					var result = tRet;
					return result;
				}
			} finally {
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					System.Runtime.CompilerServices.CallSiteOps.AddRule$b1(System.Func$b5.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, TRet))(callSite, func);
					System.Runtime.CompilerServices.CallSiteOps.MoveRule$b1(System.Func$b5.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, TRet))(ruleCache, func, j);
				}
			}
			System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
		}
		func = null;
		var args = [arg0, arg1, arg2];
	__loop2__: 
		while (true) {
			callSite.Target = target;
			func = (callSite.Target = callSite.Binder.BindCore$b1(System.Func$b5.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, TRet))(callSite, args));
			try {
				tRet = JSIL.Cast(JSIL.UntranslatableInstruction("invokecallsitetarget:!!TRet(class System.Func`5<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!TRet>::Invoke, ldloc:class System.Func`5<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!TRet>(func), ldloc:CallSite(site), ldloc:!!T0(arg0), ldloc:!!T1(arg1), ldloc:!!T2(arg2))"), TRet);
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					result = tRet;
					return result;
				}
			} finally {
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					System.Runtime.CompilerServices.CallSiteOps.AddRule$b1(System.Func$b5.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, TRet))(callSite, func);
				}
			}
			System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
		}
	}
);
$asm08.System.Dynamic.UpdateDelegates.NoMatch3$b4 = JSIL.GenericMethod(
	["T0", "T1", "T2", "TRet"], 
	function (T0, T1, T2, TRet, site, arg0, arg1, arg2) {
		site._match = false;
		return null;
	}
);
$asm08.System.Dynamic.UpdateDelegates.UpdateAndExecute4$b5 = JSIL.GenericMethod(
	["T0", "T1", "T2", "T3", "TRet"], 
	function (T0, T1, T2, T3, TRet, site, arg0, arg1, arg2, arg3) {
		var rules = null;
		var callSite = JSIL.Cast(site, System.Runtime.CompilerServices.CallSite$b1.Of(System.Func$b6.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, TRet)));
		var target = JSIL.Cast(callSite.Target, System.Func$b6.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, TRet));
		site = System.Runtime.CompilerServices.CallSiteOps.CreateMatchmaker$b1(System.Func$b6.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, TRet))(callSite);
		if ((rules = System.Runtime.CompilerServices.CallSiteOps.GetRules$b1(System.Func$b6.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, TRet))(callSite)) !== null) {
		__loop0__: 
			for (var i = 0; i < rules.length; ++i) {
				var func = rules[i];
				if (func !== target) {
					callSite.Target = func;
					var tRet = JSIL.Cast(JSIL.UntranslatableInstruction("invokecallsitetarget:!!TRet(class [mscorlib]System.Func`6<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!TRet>::Invoke, ldloc:class [mscorlib]System.Func`6<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!TRet>(func), ldloc:CallSite(site), ldloc:!!T0(arg0), ldloc:!!T1(arg1), ldloc:!!T2(arg2), ldloc:!!T3(arg3))"), TRet);
					if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
						System.Runtime.CompilerServices.CallSiteOps.UpdateRules$b1(System.Func$b6.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, TRet))(callSite, i);
						return tRet;
					}
					System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
				}
			}
		}
		var ruleCache = System.Runtime.CompilerServices.CallSiteOps.GetRuleCache$b1(System.Func$b6.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, TRet))(callSite);
		rules = ruleCache.GetRules();
	__loop1__: 
		for (var j = 0; j < rules.length; ++j) {
			func = rules[j];
			callSite.Target = func;
			try {
				tRet = JSIL.Cast(JSIL.UntranslatableInstruction("invokecallsitetarget:!!TRet(class [mscorlib]System.Func`6<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!TRet>::Invoke, ldloc:class [mscorlib]System.Func`6<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!TRet>(func), ldloc:CallSite(site), ldloc:!!T0(arg0), ldloc:!!T1(arg1), ldloc:!!T2(arg2), ldloc:!!T3(arg3))"), TRet);
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					var result = tRet;
					return result;
				}
			} finally {
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					System.Runtime.CompilerServices.CallSiteOps.AddRule$b1(System.Func$b6.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, TRet))(callSite, func);
					System.Runtime.CompilerServices.CallSiteOps.MoveRule$b1(System.Func$b6.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, TRet))(ruleCache, func, j);
				}
			}
			System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
		}
		func = null;
		var args = [arg0, arg1, arg2, arg3];
	__loop2__: 
		while (true) {
			callSite.Target = target;
			func = (callSite.Target = callSite.Binder.BindCore$b1(System.Func$b6.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, TRet))(callSite, args));
			try {
				tRet = JSIL.Cast(JSIL.UntranslatableInstruction("invokecallsitetarget:!!TRet(class [mscorlib]System.Func`6<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!TRet>::Invoke, ldloc:class [mscorlib]System.Func`6<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!TRet>(func), ldloc:CallSite(site), ldloc:!!T0(arg0), ldloc:!!T1(arg1), ldloc:!!T2(arg2), ldloc:!!T3(arg3))"), TRet);
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					result = tRet;
					return result;
				}
			} finally {
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					System.Runtime.CompilerServices.CallSiteOps.AddRule$b1(System.Func$b6.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, TRet))(callSite, func);
				}
			}
			System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
		}
	}
);
$asm08.System.Dynamic.UpdateDelegates.NoMatch4$b5 = JSIL.GenericMethod(
	["T0", "T1", "T2", "T3", "TRet"], 
	function (T0, T1, T2, T3, TRet, site, arg0, arg1, arg2, arg3) {
		site._match = false;
		return null;
	}
);
$asm08.System.Dynamic.UpdateDelegates.UpdateAndExecute5$b6 = JSIL.GenericMethod(
	["T0", "T1", "T2", "T3", "T4", "TRet"], 
	function (T0, T1, T2, T3, T4, TRet, site, arg0, arg1, arg2, arg3, arg4) {
		var rules = null;
		var callSite = JSIL.Cast(site, System.Runtime.CompilerServices.CallSite$b1.Of(System.Func$b7.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, TRet)));
		var target = JSIL.Cast(callSite.Target, System.Func$b7.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, TRet));
		site = System.Runtime.CompilerServices.CallSiteOps.CreateMatchmaker$b1(System.Func$b7.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, TRet))(callSite);
		if ((rules = System.Runtime.CompilerServices.CallSiteOps.GetRules$b1(System.Func$b7.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, TRet))(callSite)) !== null) {
		__loop0__: 
			for (var i = 0; i < rules.length; ++i) {
				var func = rules[i];
				if (func !== target) {
					callSite.Target = func;
					var tRet = JSIL.Cast(JSIL.UntranslatableInstruction("invokecallsitetarget:!!TRet(class [mscorlib]System.Func`7<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!TRet>::Invoke, ldloc:class [mscorlib]System.Func`7<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!TRet>(func), ldloc:CallSite(site), ldloc:!!T0(arg0), ldloc:!!T1(arg1), ldloc:!!T2(arg2), ldloc:!!T3(arg3), ldloc:!!T4(arg4))"), TRet);
					if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
						System.Runtime.CompilerServices.CallSiteOps.UpdateRules$b1(System.Func$b7.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, TRet))(callSite, i);
						return tRet;
					}
					System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
				}
			}
		}
		var ruleCache = System.Runtime.CompilerServices.CallSiteOps.GetRuleCache$b1(System.Func$b7.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, TRet))(callSite);
		rules = ruleCache.GetRules();
	__loop1__: 
		for (var j = 0; j < rules.length; ++j) {
			func = rules[j];
			callSite.Target = func;
			try {
				tRet = JSIL.Cast(JSIL.UntranslatableInstruction("invokecallsitetarget:!!TRet(class [mscorlib]System.Func`7<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!TRet>::Invoke, ldloc:class [mscorlib]System.Func`7<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!TRet>(func), ldloc:CallSite(site), ldloc:!!T0(arg0), ldloc:!!T1(arg1), ldloc:!!T2(arg2), ldloc:!!T3(arg3), ldloc:!!T4(arg4))"), TRet);
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					var result = tRet;
					return result;
				}
			} finally {
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					System.Runtime.CompilerServices.CallSiteOps.AddRule$b1(System.Func$b7.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, TRet))(callSite, func);
					System.Runtime.CompilerServices.CallSiteOps.MoveRule$b1(System.Func$b7.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, TRet))(ruleCache, func, j);
				}
			}
			System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
		}
		func = null;
		var args = [arg0, arg1, arg2, arg3, arg4];
	__loop2__: 
		while (true) {
			callSite.Target = target;
			func = (callSite.Target = callSite.Binder.BindCore$b1(System.Func$b7.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, TRet))(callSite, args));
			try {
				tRet = JSIL.Cast(JSIL.UntranslatableInstruction("invokecallsitetarget:!!TRet(class [mscorlib]System.Func`7<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!TRet>::Invoke, ldloc:class [mscorlib]System.Func`7<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!TRet>(func), ldloc:CallSite(site), ldloc:!!T0(arg0), ldloc:!!T1(arg1), ldloc:!!T2(arg2), ldloc:!!T3(arg3), ldloc:!!T4(arg4))"), TRet);
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					result = tRet;
					return result;
				}
			} finally {
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					System.Runtime.CompilerServices.CallSiteOps.AddRule$b1(System.Func$b7.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, TRet))(callSite, func);
				}
			}
			System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
		}
	}
);
$asm08.System.Dynamic.UpdateDelegates.NoMatch5$b6 = JSIL.GenericMethod(
	["T0", "T1", "T2", "T3", "T4", "TRet"], 
	function (T0, T1, T2, T3, T4, TRet, site, arg0, arg1, arg2, arg3, arg4) {
		site._match = false;
		return null;
	}
);
$asm08.System.Dynamic.UpdateDelegates.UpdateAndExecute6$b7 = JSIL.GenericMethod(
	["T0", "T1", "T2", "T3", "T4", "T5", "TRet"], 
	function (T0, T1, T2, T3, T4, T5, TRet, site, arg0, arg1, arg2, arg3, arg4, arg5) {
		var rules = null;
		var callSite = JSIL.Cast(site, System.Runtime.CompilerServices.CallSite$b1.Of(System.Func$b8.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, TRet)));
		var target = JSIL.Cast(callSite.Target, System.Func$b8.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, TRet));
		site = System.Runtime.CompilerServices.CallSiteOps.CreateMatchmaker$b1(System.Func$b8.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, TRet))(callSite);
		if ((rules = System.Runtime.CompilerServices.CallSiteOps.GetRules$b1(System.Func$b8.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, TRet))(callSite)) !== null) {
		__loop0__: 
			for (var i = 0; i < rules.length; ++i) {
				var func = rules[i];
				if (func !== target) {
					callSite.Target = func;
					var tRet = JSIL.Cast(JSIL.UntranslatableInstruction("invokecallsitetarget:!!TRet(class [mscorlib]System.Func`8<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5, !!TRet>::Invoke, ldloc:class [mscorlib]System.Func`8<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5, !!TRet>(func), ldloc:CallSite(site), ldloc:!!T0(arg0), ldloc:!!T1(arg1), ldloc:!!T2(arg2), ldloc:!!T3(arg3), ldloc:!!T4(arg4), ldloc:!!T5(arg5))"), TRet);
					if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
						System.Runtime.CompilerServices.CallSiteOps.UpdateRules$b1(System.Func$b8.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, TRet))(callSite, i);
						return tRet;
					}
					System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
				}
			}
		}
		var ruleCache = System.Runtime.CompilerServices.CallSiteOps.GetRuleCache$b1(System.Func$b8.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, TRet))(callSite);
		rules = ruleCache.GetRules();
	__loop1__: 
		for (var j = 0; j < rules.length; ++j) {
			func = rules[j];
			callSite.Target = func;
			try {
				tRet = JSIL.Cast(JSIL.UntranslatableInstruction("invokecallsitetarget:!!TRet(class [mscorlib]System.Func`8<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5, !!TRet>::Invoke, ldloc:class [mscorlib]System.Func`8<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5, !!TRet>(func), ldloc:CallSite(site), ldloc:!!T0(arg0), ldloc:!!T1(arg1), ldloc:!!T2(arg2), ldloc:!!T3(arg3), ldloc:!!T4(arg4), ldloc:!!T5(arg5))"), TRet);
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					var result = tRet;
					return result;
				}
			} finally {
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					System.Runtime.CompilerServices.CallSiteOps.AddRule$b1(System.Func$b8.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, TRet))(callSite, func);
					System.Runtime.CompilerServices.CallSiteOps.MoveRule$b1(System.Func$b8.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, TRet))(ruleCache, func, j);
				}
			}
			System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
		}
		func = null;
		var args = [arg0, arg1, arg2, arg3, arg4, arg5];
	__loop2__: 
		while (true) {
			callSite.Target = target;
			func = (callSite.Target = callSite.Binder.BindCore$b1(System.Func$b8.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, TRet))(callSite, args));
			try {
				tRet = JSIL.Cast(JSIL.UntranslatableInstruction("invokecallsitetarget:!!TRet(class [mscorlib]System.Func`8<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5, !!TRet>::Invoke, ldloc:class [mscorlib]System.Func`8<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5, !!TRet>(func), ldloc:CallSite(site), ldloc:!!T0(arg0), ldloc:!!T1(arg1), ldloc:!!T2(arg2), ldloc:!!T3(arg3), ldloc:!!T4(arg4), ldloc:!!T5(arg5))"), TRet);
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					result = tRet;
					return result;
				}
			} finally {
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					System.Runtime.CompilerServices.CallSiteOps.AddRule$b1(System.Func$b8.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, TRet))(callSite, func);
				}
			}
			System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
		}
	}
);
$asm08.System.Dynamic.UpdateDelegates.NoMatch6$b7 = JSIL.GenericMethod(
	["T0", "T1", "T2", "T3", "T4", "T5", "TRet"], 
	function (T0, T1, T2, T3, T4, T5, TRet, site, arg0, arg1, arg2, arg3, arg4, arg5) {
		site._match = false;
		return null;
	}
);
$asm08.System.Dynamic.UpdateDelegates.UpdateAndExecute7$b8 = JSIL.GenericMethod(
	["T0", "T1", "T2", "T3", "T4", "T5", "T6", "TRet"], 
	function (T0, T1, T2, T3, T4, T5, T6, TRet, site, arg0, arg1, arg2, arg3, arg4, arg5, arg6) {
		var rules = null;
		var callSite = JSIL.Cast(site, System.Runtime.CompilerServices.CallSite$b1.Of(System.Func$b9.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, TRet)));
		var target = JSIL.Cast(callSite.Target, System.Func$b9.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, TRet));
		site = System.Runtime.CompilerServices.CallSiteOps.CreateMatchmaker$b1(System.Func$b9.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, TRet))(callSite);
		if ((rules = System.Runtime.CompilerServices.CallSiteOps.GetRules$b1(System.Func$b9.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, TRet))(callSite)) !== null) {
		__loop0__: 
			for (var i = 0; i < rules.length; ++i) {
				var func = rules[i];
				if (func !== target) {
					callSite.Target = func;
					var tRet = JSIL.Cast(JSIL.UntranslatableInstruction("invokecallsitetarget:!!TRet(class [mscorlib]System.Func`9<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!TRet>::Invoke, ldloc:class [mscorlib]System.Func`9<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!TRet>(func), ldloc:CallSite(site), ldloc:!!T0(arg0), ldloc:!!T1(arg1), ldloc:!!T2(arg2), ldloc:!!T3(arg3), ldloc:!!T4(arg4), ldloc:!!T5(arg5), ldloc:!!T6(arg6))"), TRet);
					if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
						System.Runtime.CompilerServices.CallSiteOps.UpdateRules$b1(System.Func$b9.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, TRet))(callSite, i);
						return tRet;
					}
					System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
				}
			}
		}
		var ruleCache = System.Runtime.CompilerServices.CallSiteOps.GetRuleCache$b1(System.Func$b9.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, TRet))(callSite);
		rules = ruleCache.GetRules();
	__loop1__: 
		for (var j = 0; j < rules.length; ++j) {
			func = rules[j];
			callSite.Target = func;
			try {
				tRet = JSIL.Cast(JSIL.UntranslatableInstruction("invokecallsitetarget:!!TRet(class [mscorlib]System.Func`9<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!TRet>::Invoke, ldloc:class [mscorlib]System.Func`9<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!TRet>(func), ldloc:CallSite(site), ldloc:!!T0(arg0), ldloc:!!T1(arg1), ldloc:!!T2(arg2), ldloc:!!T3(arg3), ldloc:!!T4(arg4), ldloc:!!T5(arg5), ldloc:!!T6(arg6))"), TRet);
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					var result = tRet;
					return result;
				}
			} finally {
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					System.Runtime.CompilerServices.CallSiteOps.AddRule$b1(System.Func$b9.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, TRet))(callSite, func);
					System.Runtime.CompilerServices.CallSiteOps.MoveRule$b1(System.Func$b9.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, TRet))(ruleCache, func, j);
				}
			}
			System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
		}
		func = null;
		var args = [arg0, arg1, arg2, arg3, arg4, arg5, arg6];
	__loop2__: 
		while (true) {
			callSite.Target = target;
			func = (callSite.Target = callSite.Binder.BindCore$b1(System.Func$b9.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, TRet))(callSite, args));
			try {
				tRet = JSIL.Cast(JSIL.UntranslatableInstruction("invokecallsitetarget:!!TRet(class [mscorlib]System.Func`9<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!TRet>::Invoke, ldloc:class [mscorlib]System.Func`9<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!TRet>(func), ldloc:CallSite(site), ldloc:!!T0(arg0), ldloc:!!T1(arg1), ldloc:!!T2(arg2), ldloc:!!T3(arg3), ldloc:!!T4(arg4), ldloc:!!T5(arg5), ldloc:!!T6(arg6))"), TRet);
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					result = tRet;
					return result;
				}
			} finally {
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					System.Runtime.CompilerServices.CallSiteOps.AddRule$b1(System.Func$b9.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, TRet))(callSite, func);
				}
			}
			System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
		}
	}
);
$asm08.System.Dynamic.UpdateDelegates.NoMatch7$b8 = JSIL.GenericMethod(
	["T0", "T1", "T2", "T3", "T4", "T5", "T6", "TRet"], 
	function (T0, T1, T2, T3, T4, T5, T6, TRet, site, arg0, arg1, arg2, arg3, arg4, arg5, arg6) {
		site._match = false;
		return null;
	}
);
$asm08.System.Dynamic.UpdateDelegates.UpdateAndExecute8$b9 = JSIL.GenericMethod(
	["T0", "T1", "T2", "T3", "T4", "T5", "T6", "T7", "TRet"], 
	function (T0, T1, T2, T3, T4, T5, T6, T7, TRet, site, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7) {
		var rules = null;
		var callSite = JSIL.Cast(site, System.Runtime.CompilerServices.CallSite$b1.Of(System.Func$b10.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7, TRet)));
		var target = JSIL.Cast(callSite.Target, System.Func$b10.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7, TRet));
		site = System.Runtime.CompilerServices.CallSiteOps.CreateMatchmaker$b1(System.Func$b10.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7, TRet))(callSite);
		if ((rules = System.Runtime.CompilerServices.CallSiteOps.GetRules$b1(System.Func$b10.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7, TRet))(callSite)) !== null) {
		__loop0__: 
			for (var i = 0; i < rules.length; ++i) {
				var func = rules[i];
				if (func !== target) {
					callSite.Target = func;
					var tRet = JSIL.Cast(JSIL.UntranslatableInstruction("invokecallsitetarget:!!TRet(class System.Func`10<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, !!TRet>::Invoke, ldloc:class System.Func`10<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, !!TRet>(func), ldloc:CallSite(site), ldloc:!!T0(arg0), ldloc:!!T1(arg1), ldloc:!!T2(arg2), ldloc:!!T3(arg3), ldloc:!!T4(arg4), ldloc:!!T5(arg5), ldloc:!!T6(arg6), ldloc:!!T7(arg7))"), TRet);
					if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
						System.Runtime.CompilerServices.CallSiteOps.UpdateRules$b1(System.Func$b10.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7, TRet))(callSite, i);
						return tRet;
					}
					System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
				}
			}
		}
		var ruleCache = System.Runtime.CompilerServices.CallSiteOps.GetRuleCache$b1(System.Func$b10.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7, TRet))(callSite);
		rules = ruleCache.GetRules();
	__loop1__: 
		for (var j = 0; j < rules.length; ++j) {
			func = rules[j];
			callSite.Target = func;
			try {
				tRet = JSIL.Cast(JSIL.UntranslatableInstruction("invokecallsitetarget:!!TRet(class System.Func`10<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, !!TRet>::Invoke, ldloc:class System.Func`10<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, !!TRet>(func), ldloc:CallSite(site), ldloc:!!T0(arg0), ldloc:!!T1(arg1), ldloc:!!T2(arg2), ldloc:!!T3(arg3), ldloc:!!T4(arg4), ldloc:!!T5(arg5), ldloc:!!T6(arg6), ldloc:!!T7(arg7))"), TRet);
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					var result = tRet;
					return result;
				}
			} finally {
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					System.Runtime.CompilerServices.CallSiteOps.AddRule$b1(System.Func$b10.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7, TRet))(callSite, func);
					System.Runtime.CompilerServices.CallSiteOps.MoveRule$b1(System.Func$b10.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7, TRet))(ruleCache, func, j);
				}
			}
			System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
		}
		func = null;
		var args = [arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7];
	__loop2__: 
		while (true) {
			callSite.Target = target;
			func = (callSite.Target = callSite.Binder.BindCore$b1(System.Func$b10.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7, TRet))(callSite, args));
			try {
				tRet = JSIL.Cast(JSIL.UntranslatableInstruction("invokecallsitetarget:!!TRet(class System.Func`10<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, !!TRet>::Invoke, ldloc:class System.Func`10<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, !!TRet>(func), ldloc:CallSite(site), ldloc:!!T0(arg0), ldloc:!!T1(arg1), ldloc:!!T2(arg2), ldloc:!!T3(arg3), ldloc:!!T4(arg4), ldloc:!!T5(arg5), ldloc:!!T6(arg6), ldloc:!!T7(arg7))"), TRet);
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					result = tRet;
					return result;
				}
			} finally {
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					System.Runtime.CompilerServices.CallSiteOps.AddRule$b1(System.Func$b10.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7, TRet))(callSite, func);
				}
			}
			System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
		}
	}
);
$asm08.System.Dynamic.UpdateDelegates.NoMatch8$b9 = JSIL.GenericMethod(
	["T0", "T1", "T2", "T3", "T4", "T5", "T6", "T7", "TRet"], 
	function (T0, T1, T2, T3, T4, T5, T6, T7, TRet, site, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7) {
		site._match = false;
		return null;
	}
);
$asm08.System.Dynamic.UpdateDelegates.UpdateAndExecute9$b10 = JSIL.GenericMethod(
	["T0", "T1", "T2", "T3", "T4", "T5", "T6", "T7", "T8", "TRet"], 
	function (T0, T1, T2, T3, T4, T5, T6, T7, T8, TRet, site, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) {
		var rules = null;
		var callSite = JSIL.Cast(site, System.Runtime.CompilerServices.CallSite$b1.Of(System.Func$b11.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7, T8, TRet)));
		var target = JSIL.Cast(callSite.Target, System.Func$b11.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7, T8, TRet));
		site = System.Runtime.CompilerServices.CallSiteOps.CreateMatchmaker$b1(System.Func$b11.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7, T8, TRet))(callSite);
		if ((rules = System.Runtime.CompilerServices.CallSiteOps.GetRules$b1(System.Func$b11.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7, T8, TRet))(callSite)) !== null) {
		__loop0__: 
			for (var i = 0; i < rules.length; ++i) {
				var func = rules[i];
				if (func !== target) {
					callSite.Target = func;
					var tRet = JSIL.Cast(JSIL.UntranslatableInstruction("invokecallsitetarget:!!TRet(class System.Func`11<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, !!T8, !!TRet>::Invoke, ldloc:class System.Func`11<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, !!T8, !!TRet>(func), ldloc:CallSite(site), ldloc:!!T0(arg0), ldloc:!!T1(arg1), ldloc:!!T2(arg2), ldloc:!!T3(arg3), ldloc:!!T4(arg4), ldloc:!!T5(arg5), ldloc:!!T6(arg6), ldloc:!!T7(arg7), ldloc:!!T8(arg8))"), TRet);
					if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
						System.Runtime.CompilerServices.CallSiteOps.UpdateRules$b1(System.Func$b11.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7, T8, TRet))(callSite, i);
						return tRet;
					}
					System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
				}
			}
		}
		var ruleCache = System.Runtime.CompilerServices.CallSiteOps.GetRuleCache$b1(System.Func$b11.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7, T8, TRet))(callSite);
		rules = ruleCache.GetRules();
	__loop1__: 
		for (var j = 0; j < rules.length; ++j) {
			func = rules[j];
			callSite.Target = func;
			try {
				tRet = JSIL.Cast(JSIL.UntranslatableInstruction("invokecallsitetarget:!!TRet(class System.Func`11<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, !!T8, !!TRet>::Invoke, ldloc:class System.Func`11<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, !!T8, !!TRet>(func), ldloc:CallSite(site), ldloc:!!T0(arg0), ldloc:!!T1(arg1), ldloc:!!T2(arg2), ldloc:!!T3(arg3), ldloc:!!T4(arg4), ldloc:!!T5(arg5), ldloc:!!T6(arg6), ldloc:!!T7(arg7), ldloc:!!T8(arg8))"), TRet);
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					var result = tRet;
					return result;
				}
			} finally {
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					System.Runtime.CompilerServices.CallSiteOps.AddRule$b1(System.Func$b11.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7, T8, TRet))(callSite, func);
					System.Runtime.CompilerServices.CallSiteOps.MoveRule$b1(System.Func$b11.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7, T8, TRet))(ruleCache, func, j);
				}
			}
			System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
		}
		func = null;
		var args = [arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8];
	__loop2__: 
		while (true) {
			callSite.Target = target;
			func = (callSite.Target = callSite.Binder.BindCore$b1(System.Func$b11.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7, T8, TRet))(callSite, args));
			try {
				tRet = JSIL.Cast(JSIL.UntranslatableInstruction("invokecallsitetarget:!!TRet(class System.Func`11<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, !!T8, !!TRet>::Invoke, ldloc:class System.Func`11<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, !!T8, !!TRet>(func), ldloc:CallSite(site), ldloc:!!T0(arg0), ldloc:!!T1(arg1), ldloc:!!T2(arg2), ldloc:!!T3(arg3), ldloc:!!T4(arg4), ldloc:!!T5(arg5), ldloc:!!T6(arg6), ldloc:!!T7(arg7), ldloc:!!T8(arg8))"), TRet);
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					result = tRet;
					return result;
				}
			} finally {
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					System.Runtime.CompilerServices.CallSiteOps.AddRule$b1(System.Func$b11.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7, T8, TRet))(callSite, func);
				}
			}
			System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
		}
	}
);
$asm08.System.Dynamic.UpdateDelegates.NoMatch9$b10 = JSIL.GenericMethod(
	["T0", "T1", "T2", "T3", "T4", "T5", "T6", "T7", "T8", "TRet"], 
	function (T0, T1, T2, T3, T4, T5, T6, T7, T8, TRet, site, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) {
		site._match = false;
		return null;
	}
);
$asm08.System.Dynamic.UpdateDelegates.UpdateAndExecute10$b11 = JSIL.GenericMethod(
	["T0", "T1", "T2", "T3", "T4", "T5", "T6", "T7", "T8", "T9", "TRet"], 
	function (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, TRet, site, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9) {
		var rules = null;
		var callSite = JSIL.Cast(site, System.Runtime.CompilerServices.CallSite$b1.Of(System.Func$b12.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, TRet)));
		var target = JSIL.Cast(callSite.Target, System.Func$b12.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, TRet));
		site = System.Runtime.CompilerServices.CallSiteOps.CreateMatchmaker$b1(System.Func$b12.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, TRet))(callSite);
		if ((rules = System.Runtime.CompilerServices.CallSiteOps.GetRules$b1(System.Func$b12.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, TRet))(callSite)) !== null) {
		__loop0__: 
			for (var i = 0; i < rules.length; ++i) {
				var func = rules[i];
				if (func !== target) {
					callSite.Target = func;
					var tRet = JSIL.Cast(JSIL.UntranslatableInstruction("invokecallsitetarget:!!TRet(class System.Func`12<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, !!T8, !!T9, !!TRet>::Invoke, ldloc:class System.Func`12<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, !!T8, !!T9, !!TRet>(func), ldloc:CallSite(site), ldloc:!!T0(arg0), ldloc:!!T1(arg1), ldloc:!!T2(arg2), ldloc:!!T3(arg3), ldloc:!!T4(arg4), ldloc:!!T5(arg5), ldloc:!!T6(arg6), ldloc:!!T7(arg7), ldloc:!!T8(arg8), ldloc:!!T9(arg9))"), TRet);
					if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
						System.Runtime.CompilerServices.CallSiteOps.UpdateRules$b1(System.Func$b12.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, TRet))(callSite, i);
						return tRet;
					}
					System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
				}
			}
		}
		var ruleCache = System.Runtime.CompilerServices.CallSiteOps.GetRuleCache$b1(System.Func$b12.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, TRet))(callSite);
		rules = ruleCache.GetRules();
	__loop1__: 
		for (var j = 0; j < rules.length; ++j) {
			func = rules[j];
			callSite.Target = func;
			try {
				tRet = JSIL.Cast(JSIL.UntranslatableInstruction("invokecallsitetarget:!!TRet(class System.Func`12<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, !!T8, !!T9, !!TRet>::Invoke, ldloc:class System.Func`12<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, !!T8, !!T9, !!TRet>(func), ldloc:CallSite(site), ldloc:!!T0(arg0), ldloc:!!T1(arg1), ldloc:!!T2(arg2), ldloc:!!T3(arg3), ldloc:!!T4(arg4), ldloc:!!T5(arg5), ldloc:!!T6(arg6), ldloc:!!T7(arg7), ldloc:!!T8(arg8), ldloc:!!T9(arg9))"), TRet);
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					var result = tRet;
					return result;
				}
			} finally {
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					System.Runtime.CompilerServices.CallSiteOps.AddRule$b1(System.Func$b12.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, TRet))(callSite, func);
					System.Runtime.CompilerServices.CallSiteOps.MoveRule$b1(System.Func$b12.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, TRet))(ruleCache, func, j);
				}
			}
			System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
		}
		func = null;
		var args = [arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9];
	__loop2__: 
		while (true) {
			callSite.Target = target;
			func = (callSite.Target = callSite.Binder.BindCore$b1(System.Func$b12.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, TRet))(callSite, args));
			try {
				tRet = JSIL.Cast(JSIL.UntranslatableInstruction("invokecallsitetarget:!!TRet(class System.Func`12<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, !!T8, !!T9, !!TRet>::Invoke, ldloc:class System.Func`12<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, !!T8, !!T9, !!TRet>(func), ldloc:CallSite(site), ldloc:!!T0(arg0), ldloc:!!T1(arg1), ldloc:!!T2(arg2), ldloc:!!T3(arg3), ldloc:!!T4(arg4), ldloc:!!T5(arg5), ldloc:!!T6(arg6), ldloc:!!T7(arg7), ldloc:!!T8(arg8), ldloc:!!T9(arg9))"), TRet);
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					result = tRet;
					return result;
				}
			} finally {
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					System.Runtime.CompilerServices.CallSiteOps.AddRule$b1(System.Func$b12.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, TRet))(callSite, func);
				}
			}
			System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
		}
	}
);
$asm08.System.Dynamic.UpdateDelegates.NoMatch10$b11 = JSIL.GenericMethod(
	["T0", "T1", "T2", "T3", "T4", "T5", "T6", "T7", "T8", "T9", "TRet"], 
	function (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, TRet, site, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9) {
		site._match = false;
		return null;
	}
);
$asm08.System.Dynamic.UpdateDelegates.UpdateAndExecuteVoid1$b1 = JSIL.GenericMethod(
	["T0"], 
	function (T0, site, arg0) {
		var rules = null;
		var callSite = JSIL.Cast(site, System.Runtime.CompilerServices.CallSite$b1.Of(System.Action$b2.Of(System.Runtime.CompilerServices.CallSite, T0)));
		var target = JSIL.Cast(callSite.Target, System.Action$b2.Of(System.Runtime.CompilerServices.CallSite, T0));
		site = System.Runtime.CompilerServices.CallSiteOps.CreateMatchmaker$b1(System.Action$b2.Of(System.Runtime.CompilerServices.CallSite, T0))(callSite);
		if ((rules = System.Runtime.CompilerServices.CallSiteOps.GetRules$b1(System.Action$b2.Of(System.Runtime.CompilerServices.CallSite, T0))(callSite)) !== null) {
		__loop0__: 
			for (var i = 0; i < rules.length; ++i) {
				var action = rules[i];
				if (action !== target) {
					callSite.Target = action;
					JSIL.UntranslatableInstruction("invokecallsitetarget:Void(class System.Action`2<class System.Runtime.CompilerServices.CallSite, !!T0>::Invoke, ldloc:class System.Action`2<class System.Runtime.CompilerServices.CallSite, !!T0>(action), ldloc:CallSite(site), ldloc:!!T0(arg0))");
					if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
						System.Runtime.CompilerServices.CallSiteOps.UpdateRules$b1(System.Action$b2.Of(System.Runtime.CompilerServices.CallSite, T0))(callSite, i);
						return;
					}
					System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
				}
			}
		}
		var ruleCache = System.Runtime.CompilerServices.CallSiteOps.GetRuleCache$b1(System.Action$b2.Of(System.Runtime.CompilerServices.CallSite, T0))(callSite);
		rules = ruleCache.GetRules();
	__loop1__: 
		for (var j = 0; j < rules.length; ++j) {
			action = rules[j];
			callSite.Target = action;
			try {
				JSIL.UntranslatableInstruction("invokecallsitetarget:Void(class System.Action`2<class System.Runtime.CompilerServices.CallSite, !!T0>::Invoke, ldloc:class System.Action`2<class System.Runtime.CompilerServices.CallSite, !!T0>(action), ldloc:CallSite(site), ldloc:!!T0(arg0))");
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					return;
				}
			} finally {
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					System.Runtime.CompilerServices.CallSiteOps.AddRule$b1(System.Action$b2.Of(System.Runtime.CompilerServices.CallSite, T0))(callSite, action);
					System.Runtime.CompilerServices.CallSiteOps.MoveRule$b1(System.Action$b2.Of(System.Runtime.CompilerServices.CallSite, T0))(ruleCache, action, j);
				}
			}
			System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
		}
		action = null;
		var args = [arg0];
	__loop2__: 
		while (true) {
			callSite.Target = target;
			action = (callSite.Target = callSite.Binder.BindCore$b1(System.Action$b2.Of(System.Runtime.CompilerServices.CallSite, T0))(callSite, args));
			try {
				JSIL.UntranslatableInstruction("invokecallsitetarget:Void(class System.Action`2<class System.Runtime.CompilerServices.CallSite, !!T0>::Invoke, ldloc:class System.Action`2<class System.Runtime.CompilerServices.CallSite, !!T0>(action), ldloc:CallSite(site), ldloc:!!T0(arg0))");
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					return;
				}
			} finally {
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					System.Runtime.CompilerServices.CallSiteOps.AddRule$b1(System.Action$b2.Of(System.Runtime.CompilerServices.CallSite, T0))(callSite, action);
				}
			}
			System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
		}
	}
);
$asm08.System.Dynamic.UpdateDelegates.NoMatchVoid1$b1 = JSIL.GenericMethod(
	["T0"], 
	function (T0, site, arg0) {
		site._match = false;
	}
);
$asm08.System.Dynamic.UpdateDelegates.UpdateAndExecuteVoid2$b2 = JSIL.GenericMethod(
	["T0", "T1"], 
	function (T0, T1, site, arg0, arg1) {
		var rules = null;
		var callSite = JSIL.Cast(site, System.Runtime.CompilerServices.CallSite$b1.Of(System.Action$b3.Of(System.Runtime.CompilerServices.CallSite, T0, T1)));
		var target = JSIL.Cast(callSite.Target, System.Action$b3.Of(System.Runtime.CompilerServices.CallSite, T0, T1));
		site = System.Runtime.CompilerServices.CallSiteOps.CreateMatchmaker$b1(System.Action$b3.Of(System.Runtime.CompilerServices.CallSite, T0, T1))(callSite);
		if ((rules = System.Runtime.CompilerServices.CallSiteOps.GetRules$b1(System.Action$b3.Of(System.Runtime.CompilerServices.CallSite, T0, T1))(callSite)) !== null) {
		__loop0__: 
			for (var i = 0; i < rules.length; ++i) {
				var action = rules[i];
				if (action !== target) {
					callSite.Target = action;
					JSIL.UntranslatableInstruction("invokecallsitetarget:Void(class System.Action`3<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1>::Invoke, ldloc:class System.Action`3<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1>(action), ldloc:CallSite(site), ldloc:!!T0(arg0), ldloc:!!T1(arg1))");
					if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
						System.Runtime.CompilerServices.CallSiteOps.UpdateRules$b1(System.Action$b3.Of(System.Runtime.CompilerServices.CallSite, T0, T1))(callSite, i);
						return;
					}
					System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
				}
			}
		}
		var ruleCache = System.Runtime.CompilerServices.CallSiteOps.GetRuleCache$b1(System.Action$b3.Of(System.Runtime.CompilerServices.CallSite, T0, T1))(callSite);
		rules = ruleCache.GetRules();
	__loop1__: 
		for (var j = 0; j < rules.length; ++j) {
			action = rules[j];
			callSite.Target = action;
			try {
				JSIL.UntranslatableInstruction("invokecallsitetarget:Void(class System.Action`3<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1>::Invoke, ldloc:class System.Action`3<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1>(action), ldloc:CallSite(site), ldloc:!!T0(arg0), ldloc:!!T1(arg1))");
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					return;
				}
			} finally {
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					System.Runtime.CompilerServices.CallSiteOps.AddRule$b1(System.Action$b3.Of(System.Runtime.CompilerServices.CallSite, T0, T1))(callSite, action);
					System.Runtime.CompilerServices.CallSiteOps.MoveRule$b1(System.Action$b3.Of(System.Runtime.CompilerServices.CallSite, T0, T1))(ruleCache, action, j);
				}
			}
			System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
		}
		action = null;
		var args = [arg0, arg1];
	__loop2__: 
		while (true) {
			callSite.Target = target;
			action = (callSite.Target = callSite.Binder.BindCore$b1(System.Action$b3.Of(System.Runtime.CompilerServices.CallSite, T0, T1))(callSite, args));
			try {
				JSIL.UntranslatableInstruction("invokecallsitetarget:Void(class System.Action`3<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1>::Invoke, ldloc:class System.Action`3<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1>(action), ldloc:CallSite(site), ldloc:!!T0(arg0), ldloc:!!T1(arg1))");
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					return;
				}
			} finally {
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					System.Runtime.CompilerServices.CallSiteOps.AddRule$b1(System.Action$b3.Of(System.Runtime.CompilerServices.CallSite, T0, T1))(callSite, action);
				}
			}
			System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
		}
	}
);
$asm08.System.Dynamic.UpdateDelegates.NoMatchVoid2$b2 = JSIL.GenericMethod(
	["T0", "T1"], 
	function (T0, T1, site, arg0, arg1) {
		site._match = false;
	}
);
$asm08.System.Dynamic.UpdateDelegates.UpdateAndExecuteVoid3$b3 = JSIL.GenericMethod(
	["T0", "T1", "T2"], 
	function (T0, T1, T2, site, arg0, arg1, arg2) {
		var rules = null;
		var callSite = JSIL.Cast(site, System.Runtime.CompilerServices.CallSite$b1.Of(System.Action$b4.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2)));
		var target = JSIL.Cast(callSite.Target, System.Action$b4.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2));
		site = System.Runtime.CompilerServices.CallSiteOps.CreateMatchmaker$b1(System.Action$b4.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2))(callSite);
		if ((rules = System.Runtime.CompilerServices.CallSiteOps.GetRules$b1(System.Action$b4.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2))(callSite)) !== null) {
		__loop0__: 
			for (var i = 0; i < rules.length; ++i) {
				var action = rules[i];
				if (action !== target) {
					callSite.Target = action;
					JSIL.UntranslatableInstruction("invokecallsitetarget:Void(class System.Action`4<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2>::Invoke, ldloc:class System.Action`4<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2>(action), ldloc:CallSite(site), ldloc:!!T0(arg0), ldloc:!!T1(arg1), ldloc:!!T2(arg2))");
					if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
						System.Runtime.CompilerServices.CallSiteOps.UpdateRules$b1(System.Action$b4.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2))(callSite, i);
						return;
					}
					System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
				}
			}
		}
		var ruleCache = System.Runtime.CompilerServices.CallSiteOps.GetRuleCache$b1(System.Action$b4.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2))(callSite);
		rules = ruleCache.GetRules();
	__loop1__: 
		for (var j = 0; j < rules.length; ++j) {
			action = rules[j];
			callSite.Target = action;
			try {
				JSIL.UntranslatableInstruction("invokecallsitetarget:Void(class System.Action`4<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2>::Invoke, ldloc:class System.Action`4<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2>(action), ldloc:CallSite(site), ldloc:!!T0(arg0), ldloc:!!T1(arg1), ldloc:!!T2(arg2))");
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					return;
				}
			} finally {
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					System.Runtime.CompilerServices.CallSiteOps.AddRule$b1(System.Action$b4.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2))(callSite, action);
					System.Runtime.CompilerServices.CallSiteOps.MoveRule$b1(System.Action$b4.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2))(ruleCache, action, j);
				}
			}
			System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
		}
		action = null;
		var args = [arg0, arg1, arg2];
	__loop2__: 
		while (true) {
			callSite.Target = target;
			action = (callSite.Target = callSite.Binder.BindCore$b1(System.Action$b4.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2))(callSite, args));
			try {
				JSIL.UntranslatableInstruction("invokecallsitetarget:Void(class System.Action`4<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2>::Invoke, ldloc:class System.Action`4<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2>(action), ldloc:CallSite(site), ldloc:!!T0(arg0), ldloc:!!T1(arg1), ldloc:!!T2(arg2))");
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					return;
				}
			} finally {
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					System.Runtime.CompilerServices.CallSiteOps.AddRule$b1(System.Action$b4.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2))(callSite, action);
				}
			}
			System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
		}
	}
);
$asm08.System.Dynamic.UpdateDelegates.NoMatchVoid3$b3 = JSIL.GenericMethod(
	["T0", "T1", "T2"], 
	function (T0, T1, T2, site, arg0, arg1, arg2) {
		site._match = false;
	}
);
$asm08.System.Dynamic.UpdateDelegates.UpdateAndExecuteVoid4$b4 = JSIL.GenericMethod(
	["T0", "T1", "T2", "T3"], 
	function (T0, T1, T2, T3, site, arg0, arg1, arg2, arg3) {
		var rules = null;
		var callSite = JSIL.Cast(site, System.Runtime.CompilerServices.CallSite$b1.Of(System.Action$b5.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3)));
		var target = JSIL.Cast(callSite.Target, System.Action$b5.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3));
		site = System.Runtime.CompilerServices.CallSiteOps.CreateMatchmaker$b1(System.Action$b5.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3))(callSite);
		if ((rules = System.Runtime.CompilerServices.CallSiteOps.GetRules$b1(System.Action$b5.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3))(callSite)) !== null) {
		__loop0__: 
			for (var i = 0; i < rules.length; ++i) {
				var action = rules[i];
				if (action !== target) {
					callSite.Target = action;
					JSIL.UntranslatableInstruction("invokecallsitetarget:Void(class [mscorlib]System.Action`5<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3>::Invoke, ldloc:class [mscorlib]System.Action`5<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3>(action), ldloc:CallSite(site), ldloc:!!T0(arg0), ldloc:!!T1(arg1), ldloc:!!T2(arg2), ldloc:!!T3(arg3))");
					if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
						System.Runtime.CompilerServices.CallSiteOps.UpdateRules$b1(System.Action$b5.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3))(callSite, i);
						return;
					}
					System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
				}
			}
		}
		var ruleCache = System.Runtime.CompilerServices.CallSiteOps.GetRuleCache$b1(System.Action$b5.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3))(callSite);
		rules = ruleCache.GetRules();
	__loop1__: 
		for (var j = 0; j < rules.length; ++j) {
			action = rules[j];
			callSite.Target = action;
			try {
				JSIL.UntranslatableInstruction("invokecallsitetarget:Void(class [mscorlib]System.Action`5<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3>::Invoke, ldloc:class [mscorlib]System.Action`5<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3>(action), ldloc:CallSite(site), ldloc:!!T0(arg0), ldloc:!!T1(arg1), ldloc:!!T2(arg2), ldloc:!!T3(arg3))");
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					return;
				}
			} finally {
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					System.Runtime.CompilerServices.CallSiteOps.AddRule$b1(System.Action$b5.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3))(callSite, action);
					System.Runtime.CompilerServices.CallSiteOps.MoveRule$b1(System.Action$b5.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3))(ruleCache, action, j);
				}
			}
			System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
		}
		action = null;
		var args = [arg0, arg1, arg2, arg3];
	__loop2__: 
		while (true) {
			callSite.Target = target;
			action = (callSite.Target = callSite.Binder.BindCore$b1(System.Action$b5.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3))(callSite, args));
			try {
				JSIL.UntranslatableInstruction("invokecallsitetarget:Void(class [mscorlib]System.Action`5<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3>::Invoke, ldloc:class [mscorlib]System.Action`5<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3>(action), ldloc:CallSite(site), ldloc:!!T0(arg0), ldloc:!!T1(arg1), ldloc:!!T2(arg2), ldloc:!!T3(arg3))");
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					return;
				}
			} finally {
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					System.Runtime.CompilerServices.CallSiteOps.AddRule$b1(System.Action$b5.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3))(callSite, action);
				}
			}
			System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
		}
	}
);
$asm08.System.Dynamic.UpdateDelegates.NoMatchVoid4$b4 = JSIL.GenericMethod(
	["T0", "T1", "T2", "T3"], 
	function (T0, T1, T2, T3, site, arg0, arg1, arg2, arg3) {
		site._match = false;
	}
);
$asm08.System.Dynamic.UpdateDelegates.UpdateAndExecuteVoid5$b5 = JSIL.GenericMethod(
	["T0", "T1", "T2", "T3", "T4"], 
	function (T0, T1, T2, T3, T4, site, arg0, arg1, arg2, arg3, arg4) {
		var rules = null;
		var callSite = JSIL.Cast(site, System.Runtime.CompilerServices.CallSite$b1.Of(System.Action$b6.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4)));
		var target = JSIL.Cast(callSite.Target, System.Action$b6.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4));
		site = System.Runtime.CompilerServices.CallSiteOps.CreateMatchmaker$b1(System.Action$b6.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4))(callSite);
		if ((rules = System.Runtime.CompilerServices.CallSiteOps.GetRules$b1(System.Action$b6.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4))(callSite)) !== null) {
		__loop0__: 
			for (var i = 0; i < rules.length; ++i) {
				var action = rules[i];
				if (action !== target) {
					callSite.Target = action;
					JSIL.UntranslatableInstruction("invokecallsitetarget:Void(class [mscorlib]System.Action`6<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4>::Invoke, ldloc:class [mscorlib]System.Action`6<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4>(action), ldloc:CallSite(site), ldloc:!!T0(arg0), ldloc:!!T1(arg1), ldloc:!!T2(arg2), ldloc:!!T3(arg3), ldloc:!!T4(arg4))");
					if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
						System.Runtime.CompilerServices.CallSiteOps.UpdateRules$b1(System.Action$b6.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4))(callSite, i);
						return;
					}
					System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
				}
			}
		}
		var ruleCache = System.Runtime.CompilerServices.CallSiteOps.GetRuleCache$b1(System.Action$b6.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4))(callSite);
		rules = ruleCache.GetRules();
	__loop1__: 
		for (var j = 0; j < rules.length; ++j) {
			action = rules[j];
			callSite.Target = action;
			try {
				JSIL.UntranslatableInstruction("invokecallsitetarget:Void(class [mscorlib]System.Action`6<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4>::Invoke, ldloc:class [mscorlib]System.Action`6<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4>(action), ldloc:CallSite(site), ldloc:!!T0(arg0), ldloc:!!T1(arg1), ldloc:!!T2(arg2), ldloc:!!T3(arg3), ldloc:!!T4(arg4))");
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					return;
				}
			} finally {
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					System.Runtime.CompilerServices.CallSiteOps.AddRule$b1(System.Action$b6.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4))(callSite, action);
					System.Runtime.CompilerServices.CallSiteOps.MoveRule$b1(System.Action$b6.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4))(ruleCache, action, j);
				}
			}
			System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
		}
		action = null;
		var args = [arg0, arg1, arg2, arg3, arg4];
	__loop2__: 
		while (true) {
			callSite.Target = target;
			action = (callSite.Target = callSite.Binder.BindCore$b1(System.Action$b6.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4))(callSite, args));
			try {
				JSIL.UntranslatableInstruction("invokecallsitetarget:Void(class [mscorlib]System.Action`6<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4>::Invoke, ldloc:class [mscorlib]System.Action`6<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4>(action), ldloc:CallSite(site), ldloc:!!T0(arg0), ldloc:!!T1(arg1), ldloc:!!T2(arg2), ldloc:!!T3(arg3), ldloc:!!T4(arg4))");
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					return;
				}
			} finally {
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					System.Runtime.CompilerServices.CallSiteOps.AddRule$b1(System.Action$b6.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4))(callSite, action);
				}
			}
			System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
		}
	}
);
$asm08.System.Dynamic.UpdateDelegates.NoMatchVoid5$b5 = JSIL.GenericMethod(
	["T0", "T1", "T2", "T3", "T4"], 
	function (T0, T1, T2, T3, T4, site, arg0, arg1, arg2, arg3, arg4) {
		site._match = false;
	}
);
$asm08.System.Dynamic.UpdateDelegates.UpdateAndExecuteVoid6$b6 = JSIL.GenericMethod(
	["T0", "T1", "T2", "T3", "T4", "T5"], 
	function (T0, T1, T2, T3, T4, T5, site, arg0, arg1, arg2, arg3, arg4, arg5) {
		var rules = null;
		var callSite = JSIL.Cast(site, System.Runtime.CompilerServices.CallSite$b1.Of(System.Action$b7.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5)));
		var target = JSIL.Cast(callSite.Target, System.Action$b7.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5));
		site = System.Runtime.CompilerServices.CallSiteOps.CreateMatchmaker$b1(System.Action$b7.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5))(callSite);
		if ((rules = System.Runtime.CompilerServices.CallSiteOps.GetRules$b1(System.Action$b7.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5))(callSite)) !== null) {
		__loop0__: 
			for (var i = 0; i < rules.length; ++i) {
				var action = rules[i];
				if (action !== target) {
					callSite.Target = action;
					JSIL.UntranslatableInstruction("invokecallsitetarget:Void(class [mscorlib]System.Action`7<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5>::Invoke, ldloc:class [mscorlib]System.Action`7<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5>(action), ldloc:CallSite(site), ldloc:!!T0(arg0), ldloc:!!T1(arg1), ldloc:!!T2(arg2), ldloc:!!T3(arg3), ldloc:!!T4(arg4), ldloc:!!T5(arg5))");
					if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
						System.Runtime.CompilerServices.CallSiteOps.UpdateRules$b1(System.Action$b7.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5))(callSite, i);
						return;
					}
					System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
				}
			}
		}
		var ruleCache = System.Runtime.CompilerServices.CallSiteOps.GetRuleCache$b1(System.Action$b7.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5))(callSite);
		rules = ruleCache.GetRules();
	__loop1__: 
		for (var j = 0; j < rules.length; ++j) {
			action = rules[j];
			callSite.Target = action;
			try {
				JSIL.UntranslatableInstruction("invokecallsitetarget:Void(class [mscorlib]System.Action`7<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5>::Invoke, ldloc:class [mscorlib]System.Action`7<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5>(action), ldloc:CallSite(site), ldloc:!!T0(arg0), ldloc:!!T1(arg1), ldloc:!!T2(arg2), ldloc:!!T3(arg3), ldloc:!!T4(arg4), ldloc:!!T5(arg5))");
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					return;
				}
			} finally {
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					System.Runtime.CompilerServices.CallSiteOps.AddRule$b1(System.Action$b7.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5))(callSite, action);
					System.Runtime.CompilerServices.CallSiteOps.MoveRule$b1(System.Action$b7.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5))(ruleCache, action, j);
				}
			}
			System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
		}
		action = null;
		var args = [arg0, arg1, arg2, arg3, arg4, arg5];
	__loop2__: 
		while (true) {
			callSite.Target = target;
			action = (callSite.Target = callSite.Binder.BindCore$b1(System.Action$b7.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5))(callSite, args));
			try {
				JSIL.UntranslatableInstruction("invokecallsitetarget:Void(class [mscorlib]System.Action`7<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5>::Invoke, ldloc:class [mscorlib]System.Action`7<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5>(action), ldloc:CallSite(site), ldloc:!!T0(arg0), ldloc:!!T1(arg1), ldloc:!!T2(arg2), ldloc:!!T3(arg3), ldloc:!!T4(arg4), ldloc:!!T5(arg5))");
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					return;
				}
			} finally {
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					System.Runtime.CompilerServices.CallSiteOps.AddRule$b1(System.Action$b7.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5))(callSite, action);
				}
			}
			System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
		}
	}
);
$asm08.System.Dynamic.UpdateDelegates.NoMatchVoid6$b6 = JSIL.GenericMethod(
	["T0", "T1", "T2", "T3", "T4", "T5"], 
	function (T0, T1, T2, T3, T4, T5, site, arg0, arg1, arg2, arg3, arg4, arg5) {
		site._match = false;
	}
);
$asm08.System.Dynamic.UpdateDelegates.UpdateAndExecuteVoid7$b7 = JSIL.GenericMethod(
	["T0", "T1", "T2", "T3", "T4", "T5", "T6"], 
	function (T0, T1, T2, T3, T4, T5, T6, site, arg0, arg1, arg2, arg3, arg4, arg5, arg6) {
		var rules = null;
		var callSite = JSIL.Cast(site, System.Runtime.CompilerServices.CallSite$b1.Of(System.Action$b8.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6)));
		var target = JSIL.Cast(callSite.Target, System.Action$b8.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6));
		site = System.Runtime.CompilerServices.CallSiteOps.CreateMatchmaker$b1(System.Action$b8.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6))(callSite);
		if ((rules = System.Runtime.CompilerServices.CallSiteOps.GetRules$b1(System.Action$b8.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6))(callSite)) !== null) {
		__loop0__: 
			for (var i = 0; i < rules.length; ++i) {
				var action = rules[i];
				if (action !== target) {
					callSite.Target = action;
					JSIL.UntranslatableInstruction("invokecallsitetarget:Void(class [mscorlib]System.Action`8<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5, !!T6>::Invoke, ldloc:class [mscorlib]System.Action`8<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5, !!T6>(action), ldloc:CallSite(site), ldloc:!!T0(arg0), ldloc:!!T1(arg1), ldloc:!!T2(arg2), ldloc:!!T3(arg3), ldloc:!!T4(arg4), ldloc:!!T5(arg5), ldloc:!!T6(arg6))");
					if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
						System.Runtime.CompilerServices.CallSiteOps.UpdateRules$b1(System.Action$b8.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6))(callSite, i);
						return;
					}
					System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
				}
			}
		}
		var ruleCache = System.Runtime.CompilerServices.CallSiteOps.GetRuleCache$b1(System.Action$b8.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6))(callSite);
		rules = ruleCache.GetRules();
	__loop1__: 
		for (var j = 0; j < rules.length; ++j) {
			action = rules[j];
			callSite.Target = action;
			try {
				JSIL.UntranslatableInstruction("invokecallsitetarget:Void(class [mscorlib]System.Action`8<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5, !!T6>::Invoke, ldloc:class [mscorlib]System.Action`8<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5, !!T6>(action), ldloc:CallSite(site), ldloc:!!T0(arg0), ldloc:!!T1(arg1), ldloc:!!T2(arg2), ldloc:!!T3(arg3), ldloc:!!T4(arg4), ldloc:!!T5(arg5), ldloc:!!T6(arg6))");
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					return;
				}
			} finally {
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					System.Runtime.CompilerServices.CallSiteOps.AddRule$b1(System.Action$b8.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6))(callSite, action);
					System.Runtime.CompilerServices.CallSiteOps.MoveRule$b1(System.Action$b8.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6))(ruleCache, action, j);
				}
			}
			System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
		}
		action = null;
		var args = [arg0, arg1, arg2, arg3, arg4, arg5, arg6];
	__loop2__: 
		while (true) {
			callSite.Target = target;
			action = (callSite.Target = callSite.Binder.BindCore$b1(System.Action$b8.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6))(callSite, args));
			try {
				JSIL.UntranslatableInstruction("invokecallsitetarget:Void(class [mscorlib]System.Action`8<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5, !!T6>::Invoke, ldloc:class [mscorlib]System.Action`8<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5, !!T6>(action), ldloc:CallSite(site), ldloc:!!T0(arg0), ldloc:!!T1(arg1), ldloc:!!T2(arg2), ldloc:!!T3(arg3), ldloc:!!T4(arg4), ldloc:!!T5(arg5), ldloc:!!T6(arg6))");
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					return;
				}
			} finally {
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					System.Runtime.CompilerServices.CallSiteOps.AddRule$b1(System.Action$b8.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6))(callSite, action);
				}
			}
			System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
		}
	}
);
$asm08.System.Dynamic.UpdateDelegates.NoMatchVoid7$b7 = JSIL.GenericMethod(
	["T0", "T1", "T2", "T3", "T4", "T5", "T6"], 
	function (T0, T1, T2, T3, T4, T5, T6, site, arg0, arg1, arg2, arg3, arg4, arg5, arg6) {
		site._match = false;
	}
);
$asm08.System.Dynamic.UpdateDelegates.UpdateAndExecuteVoid8$b8 = JSIL.GenericMethod(
	["T0", "T1", "T2", "T3", "T4", "T5", "T6", "T7"], 
	function (T0, T1, T2, T3, T4, T5, T6, T7, site, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7) {
		var rules = null;
		var callSite = JSIL.Cast(site, System.Runtime.CompilerServices.CallSite$b1.Of(System.Action$b9.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7)));
		var target = JSIL.Cast(callSite.Target, System.Action$b9.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7));
		site = System.Runtime.CompilerServices.CallSiteOps.CreateMatchmaker$b1(System.Action$b9.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7))(callSite);
		if ((rules = System.Runtime.CompilerServices.CallSiteOps.GetRules$b1(System.Action$b9.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7))(callSite)) !== null) {
		__loop0__: 
			for (var i = 0; i < rules.length; ++i) {
				var action = rules[i];
				if (action !== target) {
					callSite.Target = action;
					JSIL.UntranslatableInstruction("invokecallsitetarget:Void(class System.Action`9<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7>::Invoke, ldloc:class System.Action`9<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7>(action), ldloc:CallSite(site), ldloc:!!T0(arg0), ldloc:!!T1(arg1), ldloc:!!T2(arg2), ldloc:!!T3(arg3), ldloc:!!T4(arg4), ldloc:!!T5(arg5), ldloc:!!T6(arg6), ldloc:!!T7(arg7))");
					if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
						System.Runtime.CompilerServices.CallSiteOps.UpdateRules$b1(System.Action$b9.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7))(callSite, i);
						return;
					}
					System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
				}
			}
		}
		var ruleCache = System.Runtime.CompilerServices.CallSiteOps.GetRuleCache$b1(System.Action$b9.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7))(callSite);
		rules = ruleCache.GetRules();
	__loop1__: 
		for (var j = 0; j < rules.length; ++j) {
			action = rules[j];
			callSite.Target = action;
			try {
				JSIL.UntranslatableInstruction("invokecallsitetarget:Void(class System.Action`9<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7>::Invoke, ldloc:class System.Action`9<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7>(action), ldloc:CallSite(site), ldloc:!!T0(arg0), ldloc:!!T1(arg1), ldloc:!!T2(arg2), ldloc:!!T3(arg3), ldloc:!!T4(arg4), ldloc:!!T5(arg5), ldloc:!!T6(arg6), ldloc:!!T7(arg7))");
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					return;
				}
			} finally {
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					System.Runtime.CompilerServices.CallSiteOps.AddRule$b1(System.Action$b9.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7))(callSite, action);
					System.Runtime.CompilerServices.CallSiteOps.MoveRule$b1(System.Action$b9.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7))(ruleCache, action, j);
				}
			}
			System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
		}
		action = null;
		var args = [arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7];
	__loop2__: 
		while (true) {
			callSite.Target = target;
			action = (callSite.Target = callSite.Binder.BindCore$b1(System.Action$b9.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7))(callSite, args));
			try {
				JSIL.UntranslatableInstruction("invokecallsitetarget:Void(class System.Action`9<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7>::Invoke, ldloc:class System.Action`9<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7>(action), ldloc:CallSite(site), ldloc:!!T0(arg0), ldloc:!!T1(arg1), ldloc:!!T2(arg2), ldloc:!!T3(arg3), ldloc:!!T4(arg4), ldloc:!!T5(arg5), ldloc:!!T6(arg6), ldloc:!!T7(arg7))");
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					return;
				}
			} finally {
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					System.Runtime.CompilerServices.CallSiteOps.AddRule$b1(System.Action$b9.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7))(callSite, action);
				}
			}
			System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
		}
	}
);
$asm08.System.Dynamic.UpdateDelegates.NoMatchVoid8$b8 = JSIL.GenericMethod(
	["T0", "T1", "T2", "T3", "T4", "T5", "T6", "T7"], 
	function (T0, T1, T2, T3, T4, T5, T6, T7, site, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7) {
		site._match = false;
	}
);
$asm08.System.Dynamic.UpdateDelegates.UpdateAndExecuteVoid9$b9 = JSIL.GenericMethod(
	["T0", "T1", "T2", "T3", "T4", "T5", "T6", "T7", "T8"], 
	function (T0, T1, T2, T3, T4, T5, T6, T7, T8, site, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) {
		var rules = null;
		var callSite = JSIL.Cast(site, System.Runtime.CompilerServices.CallSite$b1.Of(System.Action$b10.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7, T8)));
		var target = JSIL.Cast(callSite.Target, System.Action$b10.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7, T8));
		site = System.Runtime.CompilerServices.CallSiteOps.CreateMatchmaker$b1(System.Action$b10.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7, T8))(callSite);
		if ((rules = System.Runtime.CompilerServices.CallSiteOps.GetRules$b1(System.Action$b10.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7, T8))(callSite)) !== null) {
		__loop0__: 
			for (var i = 0; i < rules.length; ++i) {
				var action = rules[i];
				if (action !== target) {
					callSite.Target = action;
					JSIL.UntranslatableInstruction("invokecallsitetarget:Void(class System.Action`10<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, !!T8>::Invoke, ldloc:class System.Action`10<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, !!T8>(action), ldloc:CallSite(site), ldloc:!!T0(arg0), ldloc:!!T1(arg1), ldloc:!!T2(arg2), ldloc:!!T3(arg3), ldloc:!!T4(arg4), ldloc:!!T5(arg5), ldloc:!!T6(arg6), ldloc:!!T7(arg7), ldloc:!!T8(arg8))");
					if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
						System.Runtime.CompilerServices.CallSiteOps.UpdateRules$b1(System.Action$b10.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7, T8))(callSite, i);
						return;
					}
					System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
				}
			}
		}
		var ruleCache = System.Runtime.CompilerServices.CallSiteOps.GetRuleCache$b1(System.Action$b10.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7, T8))(callSite);
		rules = ruleCache.GetRules();
	__loop1__: 
		for (var j = 0; j < rules.length; ++j) {
			action = rules[j];
			callSite.Target = action;
			try {
				JSIL.UntranslatableInstruction("invokecallsitetarget:Void(class System.Action`10<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, !!T8>::Invoke, ldloc:class System.Action`10<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, !!T8>(action), ldloc:CallSite(site), ldloc:!!T0(arg0), ldloc:!!T1(arg1), ldloc:!!T2(arg2), ldloc:!!T3(arg3), ldloc:!!T4(arg4), ldloc:!!T5(arg5), ldloc:!!T6(arg6), ldloc:!!T7(arg7), ldloc:!!T8(arg8))");
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					return;
				}
			} finally {
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					System.Runtime.CompilerServices.CallSiteOps.AddRule$b1(System.Action$b10.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7, T8))(callSite, action);
					System.Runtime.CompilerServices.CallSiteOps.MoveRule$b1(System.Action$b10.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7, T8))(ruleCache, action, j);
				}
			}
			System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
		}
		action = null;
		var args = [arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8];
	__loop2__: 
		while (true) {
			callSite.Target = target;
			action = (callSite.Target = callSite.Binder.BindCore$b1(System.Action$b10.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7, T8))(callSite, args));
			try {
				JSIL.UntranslatableInstruction("invokecallsitetarget:Void(class System.Action`10<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, !!T8>::Invoke, ldloc:class System.Action`10<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, !!T8>(action), ldloc:CallSite(site), ldloc:!!T0(arg0), ldloc:!!T1(arg1), ldloc:!!T2(arg2), ldloc:!!T3(arg3), ldloc:!!T4(arg4), ldloc:!!T5(arg5), ldloc:!!T6(arg6), ldloc:!!T7(arg7), ldloc:!!T8(arg8))");
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					return;
				}
			} finally {
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					System.Runtime.CompilerServices.CallSiteOps.AddRule$b1(System.Action$b10.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7, T8))(callSite, action);
				}
			}
			System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
		}
	}
);
$asm08.System.Dynamic.UpdateDelegates.NoMatchVoid9$b9 = JSIL.GenericMethod(
	["T0", "T1", "T2", "T3", "T4", "T5", "T6", "T7", "T8"], 
	function (T0, T1, T2, T3, T4, T5, T6, T7, T8, site, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8) {
		site._match = false;
	}
);
$asm08.System.Dynamic.UpdateDelegates.UpdateAndExecuteVoid10$b10 = JSIL.GenericMethod(
	["T0", "T1", "T2", "T3", "T4", "T5", "T6", "T7", "T8", "T9"], 
	function (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, site, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9) {
		var rules = null;
		var callSite = JSIL.Cast(site, System.Runtime.CompilerServices.CallSite$b1.Of(System.Action$b11.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9)));
		var target = JSIL.Cast(callSite.Target, System.Action$b11.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9));
		site = System.Runtime.CompilerServices.CallSiteOps.CreateMatchmaker$b1(System.Action$b11.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9))(callSite);
		if ((rules = System.Runtime.CompilerServices.CallSiteOps.GetRules$b1(System.Action$b11.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9))(callSite)) !== null) {
		__loop0__: 
			for (var i = 0; i < rules.length; ++i) {
				var action = rules[i];
				if (action !== target) {
					callSite.Target = action;
					JSIL.UntranslatableInstruction("invokecallsitetarget:Void(class System.Action`11<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, !!T8, !!T9>::Invoke, ldloc:class System.Action`11<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, !!T8, !!T9>(action), ldloc:CallSite(site), ldloc:!!T0(arg0), ldloc:!!T1(arg1), ldloc:!!T2(arg2), ldloc:!!T3(arg3), ldloc:!!T4(arg4), ldloc:!!T5(arg5), ldloc:!!T6(arg6), ldloc:!!T7(arg7), ldloc:!!T8(arg8), ldloc:!!T9(arg9))");
					if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
						System.Runtime.CompilerServices.CallSiteOps.UpdateRules$b1(System.Action$b11.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9))(callSite, i);
						return;
					}
					System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
				}
			}
		}
		var ruleCache = System.Runtime.CompilerServices.CallSiteOps.GetRuleCache$b1(System.Action$b11.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9))(callSite);
		rules = ruleCache.GetRules();
	__loop1__: 
		for (var j = 0; j < rules.length; ++j) {
			action = rules[j];
			callSite.Target = action;
			try {
				JSIL.UntranslatableInstruction("invokecallsitetarget:Void(class System.Action`11<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, !!T8, !!T9>::Invoke, ldloc:class System.Action`11<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, !!T8, !!T9>(action), ldloc:CallSite(site), ldloc:!!T0(arg0), ldloc:!!T1(arg1), ldloc:!!T2(arg2), ldloc:!!T3(arg3), ldloc:!!T4(arg4), ldloc:!!T5(arg5), ldloc:!!T6(arg6), ldloc:!!T7(arg7), ldloc:!!T8(arg8), ldloc:!!T9(arg9))");
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					return;
				}
			} finally {
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					System.Runtime.CompilerServices.CallSiteOps.AddRule$b1(System.Action$b11.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9))(callSite, action);
					System.Runtime.CompilerServices.CallSiteOps.MoveRule$b1(System.Action$b11.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9))(ruleCache, action, j);
				}
			}
			System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
		}
		action = null;
		var args = [arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9];
	__loop2__: 
		while (true) {
			callSite.Target = target;
			action = (callSite.Target = callSite.Binder.BindCore$b1(System.Action$b11.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9))(callSite, args));
			try {
				JSIL.UntranslatableInstruction("invokecallsitetarget:Void(class System.Action`11<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, !!T8, !!T9>::Invoke, ldloc:class System.Action`11<class System.Runtime.CompilerServices.CallSite, !!T0, !!T1, !!T2, !!T3, !!T4, !!T5, !!T6, !!T7, !!T8, !!T9>(action), ldloc:CallSite(site), ldloc:!!T0(arg0), ldloc:!!T1(arg1), ldloc:!!T2(arg2), ldloc:!!T3(arg3), ldloc:!!T4(arg4), ldloc:!!T5(arg5), ldloc:!!T6(arg6), ldloc:!!T7(arg7), ldloc:!!T8(arg8), ldloc:!!T9(arg9))");
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					return;
				}
			} finally {
				if (System.Runtime.CompilerServices.CallSiteOps.GetMatch(site)) {
					System.Runtime.CompilerServices.CallSiteOps.AddRule$b1(System.Action$b11.Of(System.Runtime.CompilerServices.CallSite, T0, T1, T2, T3, T4, T5, T6, T7, T8, T9))(callSite, action);
				}
			}
			System.Runtime.CompilerServices.CallSiteOps.ClearMatch(site);
		}
	}
);
$asm08.System.Dynamic.UpdateDelegates.NoMatchVoid10$b10 = JSIL.GenericMethod(
	["T0", "T1", "T2", "T3", "T4", "T5", "T6", "T7", "T8", "T9"], 
	function (T0, T1, T2, T3, T4, T5, T6, T7, T8, T9, site, arg0, arg1, arg2, arg3, arg4, arg5, arg6, arg7, arg8, arg9) {
		site._match = false;
	}
);

System.Linq.Expressions.Expression.Assign = function (left, right) {
	System.Linq.Expressions.Expression.RequiresCanWrite(left, "left");
	System.Linq.Expressions.Expression.RequiresCanRead$0(right, "right");
	$asm08.System.Dynamic.Utils.TypeUtils.ValidateType(left.Type);
	$asm08.System.Dynamic.Utils.TypeUtils.ValidateType(right.Type);
	if (!$asm08.System.Dynamic.Utils.TypeUtils.AreReferenceAssignable(left.Type, right.Type)) {
		throw $asm08.System.Core.Error.ExpressionTypeDoesNotMatchAssignment(right.Type, left.Type);
	}
	return new $asm08.System.Linq.Expressions.AssignBinaryExpression(left, right);
};
System.Linq.Expressions.Expression.GetUserDefinedBinaryOperator$0 = function (binaryType, name, left, right, liftToNull) {
	var userDefinedBinaryOperator = System.Linq.Expressions.Expression.GetUserDefinedBinaryOperator$1(binaryType, left.Type, right.Type, name);
	if (userDefinedBinaryOperator !== null) {
		return new $asm08.System.Linq.Expressions.MethodBinaryExpression(binaryType, left, right, userDefinedBinaryOperator.ReturnType, userDefinedBinaryOperator);
	}
	if (!(!$asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(left.Type) || !$asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(right.Type))) {
		var nonNullableType = $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(left.Type);
		var nonNullableType2 = $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(right.Type);
		userDefinedBinaryOperator = System.Linq.Expressions.Expression.GetUserDefinedBinaryOperator$1(binaryType, nonNullableType, nonNullableType2, name);
		if (!((userDefinedBinaryOperator === null) || 
				!userDefinedBinaryOperator.ReturnType.IsValueType || $asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(userDefinedBinaryOperator.ReturnType))) {
			if (!((userDefinedBinaryOperator.ReturnType === System.Boolean) && !liftToNull)) {
				return new $asm08.System.Linq.Expressions.MethodBinaryExpression(binaryType, left, right, $asm08.System.Dynamic.Utils.TypeUtils.GetNullableType(userDefinedBinaryOperator.ReturnType), userDefinedBinaryOperator);
			}
			return new $asm08.System.Linq.Expressions.MethodBinaryExpression(binaryType, left, right, System.Boolean, userDefinedBinaryOperator);
		}
	}
	return null;
};
System.Linq.Expressions.Expression.GetMethodBasedBinaryOperator = function (binaryType, left, right, method, liftToNull) {
	System.Linq.Expressions.Expression.ValidateOperator(method);
	var parametersCached = $asm08.System.Dynamic.Utils.TypeExtensions.GetParametersCached(method);
	if (parametersCached.length !== 2) {
		throw $asm08.System.Core.Error.IncorrectNumberOfMethodCallArguments(method);
	}
	if (!(!System.Linq.Expressions.Expression.ParameterIsAssignable(parametersCached[0], left.Type) || !System.Linq.Expressions.Expression.ParameterIsAssignable(parametersCached[1], right.Type))) {
		System.Linq.Expressions.Expression.ValidateParamswithOperandsOrThrow(parametersCached[0].ParameterType, left.Type, binaryType, method.Name);
		System.Linq.Expressions.Expression.ValidateParamswithOperandsOrThrow(parametersCached[1].ParameterType, right.Type, binaryType, method.Name);
		return new $asm08.System.Linq.Expressions.MethodBinaryExpression(binaryType, left, right, method.ReturnType, method);
	}
	if (!$asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(left.Type) || 
		!$asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(right.Type) || 
		!System.Linq.Expressions.Expression.ParameterIsAssignable(parametersCached[0], $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(left.Type)) || 
		!System.Linq.Expressions.Expression.ParameterIsAssignable(parametersCached[1], $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(right.Type)) || 
		!method.ReturnType.IsValueType || $asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(method.ReturnType)) {
		throw $asm08.System.Core.Error.OperandTypesDoNotMatchParameters(binaryType, method.Name);
	}
	if (!((method.ReturnType === System.Boolean) && !liftToNull)) {
		return new $asm08.System.Linq.Expressions.MethodBinaryExpression(binaryType, left, right, $asm08.System.Dynamic.Utils.TypeUtils.GetNullableType(method.ReturnType), method);
	}
	return new $asm08.System.Linq.Expressions.MethodBinaryExpression(binaryType, left, right, System.Boolean, method);
};
System.Linq.Expressions.Expression.GetMethodBasedAssignOperator = function (binaryType, left, right, method, conversion, liftToNull) {
	var binaryExpression = System.Linq.Expressions.Expression.GetMethodBasedBinaryOperator(
		binaryType, 
		left, 
		right, 
		method, 
		liftToNull
	);
	if (conversion === null) {
		if (!$asm08.System.Dynamic.Utils.TypeUtils.AreReferenceAssignable(left.Type, binaryExpression.Type)) {
			throw $asm08.System.Core.Error.UserDefinedOpMustHaveValidReturnType(binaryType, binaryExpression.Method.Name);
		}
	} else {
		System.Linq.Expressions.Expression.ValidateOpAssignConversionLambda(conversion, binaryExpression.Left, binaryExpression.Method, binaryExpression.NodeType);
		binaryExpression = new $asm08.System.Linq.Expressions.OpAssignMethodConversionBinaryExpression(binaryExpression.NodeType, binaryExpression.Left, binaryExpression.Right, binaryExpression.Left.Type, binaryExpression.Method, conversion);
	}
	return binaryExpression;
};
System.Linq.Expressions.Expression.GetUserDefinedBinaryOperatorOrThrow = function (binaryType, name, left, right, liftToNull) {
	var userDefinedBinaryOperator = System.Linq.Expressions.Expression.GetUserDefinedBinaryOperator$0(
		binaryType, 
		name, 
		left, 
		right, 
		liftToNull
	);
	if (userDefinedBinaryOperator !== null) {
		var parametersCached = $asm08.System.Dynamic.Utils.TypeExtensions.GetParametersCached(userDefinedBinaryOperator.Method);
		System.Linq.Expressions.Expression.ValidateParamswithOperandsOrThrow(parametersCached[0].ParameterType, left.Type, binaryType, name);
		System.Linq.Expressions.Expression.ValidateParamswithOperandsOrThrow(parametersCached[1].ParameterType, right.Type, binaryType, name);
		return userDefinedBinaryOperator;
	}
	throw $asm08.System.Core.Error.BinaryOperatorNotDefined(binaryType, left.Type, right.Type);
};
System.Linq.Expressions.Expression.GetUserDefinedAssignOperatorOrThrow = function (binaryType, name, left, right, conversion, liftToNull) {
	var binaryExpression = System.Linq.Expressions.Expression.GetUserDefinedBinaryOperatorOrThrow(
		binaryType, 
		name, 
		left, 
		right, 
		liftToNull
	);
	if (conversion === null) {
		if (!$asm08.System.Dynamic.Utils.TypeUtils.AreReferenceAssignable(left.Type, binaryExpression.Type)) {
			throw $asm08.System.Core.Error.UserDefinedOpMustHaveValidReturnType(binaryType, binaryExpression.Method.Name);
		}
	} else {
		System.Linq.Expressions.Expression.ValidateOpAssignConversionLambda(conversion, binaryExpression.Left, binaryExpression.Method, binaryExpression.NodeType);
		binaryExpression = new $asm08.System.Linq.Expressions.OpAssignMethodConversionBinaryExpression(binaryExpression.NodeType, binaryExpression.Left, binaryExpression.Right, binaryExpression.Left.Type, binaryExpression.Method, conversion);
	}
	return binaryExpression;
};
System.Linq.Expressions.Expression.GetUserDefinedBinaryOperator$1 = function (binaryType, leftType, rightType, name) {
	var types = JSIL.Array.New(System.Type, [leftType, rightType]);
	var nonNullableType = $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(leftType);
	var nonNullableType2 = $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(rightType);
	var bindingAttr = (System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static);
	var methodInfo = $asm08.System.Dynamic.Utils.TypeExtensions.GetMethodValidated(
		nonNullableType, 
		name, 
		bindingAttr, 
		null, 
		types, 
		null
	);
	if (!(methodInfo || $asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(leftType, rightType))) {
		methodInfo = $asm08.System.Dynamic.Utils.TypeExtensions.GetMethodValidated(
			nonNullableType2, 
			name, 
			bindingAttr, 
			null, 
			types, 
			null
		);
	}
	if (System.Linq.Expressions.Expression.IsLiftingConditionalLogicalOperator(leftType, rightType, methodInfo, binaryType)) {
		methodInfo = System.Linq.Expressions.Expression.GetUserDefinedBinaryOperator$1(binaryType, nonNullableType, nonNullableType2, name);
	}
	return methodInfo;
};
System.Linq.Expressions.Expression.IsLiftingConditionalLogicalOperator = function (left, right, method, binaryType) {
	return (!(!$asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(right) || 
			!$asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(left) || 
			method) && ((binaryType === System.Linq.Expressions.ExpressionType.AndAlso) || 
			(binaryType === System.Linq.Expressions.ExpressionType.OrElse)));
};
System.Linq.Expressions.Expression.ParameterIsAssignable = function (pi, argType) {
	var type = pi.ParameterType;
	if (type.IsByRef) {
		type = type.GetElementType();
	}
	return $asm08.System.Dynamic.Utils.TypeUtils.AreReferenceAssignable(type, argType);
};
System.Linq.Expressions.Expression.ValidateParamswithOperandsOrThrow = function (paramType, operandType, exprType, name) {
	if (!(!$asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(paramType) || $asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(operandType))) {
		throw $asm08.System.Core.Error.OperandTypesDoNotMatchParameters(exprType, name);
	}
};
System.Linq.Expressions.Expression.ValidateOperator = function (method) {
	System.Linq.Expressions.Expression.ValidateMethodInfo(method);
	if (!method.IsStatic) {
		throw $asm08.System.Core.Error.UserDefinedOperatorMustBeStatic(method);
	}
	if (method.ReturnType === System.Void) {
		throw $asm08.System.Core.Error.UserDefinedOperatorMustNotBeVoid(method);
	}
};
System.Linq.Expressions.Expression.ValidateMethodInfo = function (method) {
	if (method.IsGenericMethodDefinition) {
		throw $asm08.System.Core.Error.MethodIsGeneric(method);
	}
	if (method.ContainsGenericParameters) {
		throw $asm08.System.Core.Error.MethodContainsGenericParameters(method);
	}
};
System.Linq.Expressions.Expression.IsNullComparison = function (left, right) {
	return (!(!System.Linq.Expressions.Expression.IsNullConstant(left) || 
			System.Linq.Expressions.Expression.IsNullConstant(right) || 
			!$asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(right.Type)) || !(!System.Linq.Expressions.Expression.IsNullConstant(right) || 
			System.Linq.Expressions.Expression.IsNullConstant(left) || 
			!$asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(left.Type)));
};
System.Linq.Expressions.Expression.IsNullConstant = function (e) {
	var constantExpression = JSIL.TryCast(e, System.Linq.Expressions.ConstantExpression);
	return ((constantExpression !== null) && (constantExpression.Value === null));
};
System.Linq.Expressions.Expression.ValidateUserDefinedConditionalLogicOperator = function (nodeType, left, right, method) {
	System.Linq.Expressions.Expression.ValidateOperator(method);
	var parametersCached = $asm08.System.Dynamic.Utils.TypeExtensions.GetParametersCached(method);
	if (parametersCached.length !== 2) {
		throw $asm08.System.Core.Error.IncorrectNumberOfMethodCallArguments(method);
	}
	if (!(System.Linq.Expressions.Expression.ParameterIsAssignable(parametersCached[0], left) || ($asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(left) && 
				System.Linq.Expressions.Expression.ParameterIsAssignable(parametersCached[0], $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(left))))) {
		throw $asm08.System.Core.Error.OperandTypesDoNotMatchParameters(nodeType, method.Name);
	}
	if (!(System.Linq.Expressions.Expression.ParameterIsAssignable(parametersCached[1], right) || ($asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(right) && 
				System.Linq.Expressions.Expression.ParameterIsAssignable(parametersCached[1], $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(right))))) {
		throw $asm08.System.Core.Error.OperandTypesDoNotMatchParameters(nodeType, method.Name);
	}
	if (parametersCached[0].ParameterType !== parametersCached[1].ParameterType) {
		throw $asm08.System.Core.Error.UserDefinedOpMustHaveConsistentTypes(nodeType, method.Name);
	}
	if (method.ReturnType !== parametersCached[0].ParameterType) {
		throw $asm08.System.Core.Error.UserDefinedOpMustHaveConsistentTypes(nodeType, method.Name);
	}
	if (System.Linq.Expressions.Expression.IsValidLiftedConditionalLogicalOperator(left, right, parametersCached)) {
		left = $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(left);
		right = $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(left);
	}
	var booleanOperator = $asm08.System.Dynamic.Utils.TypeUtils.GetBooleanOperator(method.DeclaringType, "op_True");
	var booleanOperator2 = $asm08.System.Dynamic.Utils.TypeUtils.GetBooleanOperator(method.DeclaringType, "op_False");
	if (!((booleanOperator !== null) && 
			(booleanOperator.ReturnType === System.Boolean) && 
			(booleanOperator2 !== null) && (booleanOperator2.ReturnType === System.Boolean))) {
		throw $asm08.System.Core.Error.LogicalOperatorMustHaveBooleanOperators(nodeType, method.Name);
	}
	System.Linq.Expressions.Expression.VerifyOpTrueFalse(nodeType, left, booleanOperator2);
	System.Linq.Expressions.Expression.VerifyOpTrueFalse(nodeType, left, booleanOperator);
};
System.Linq.Expressions.Expression.VerifyOpTrueFalse = function (nodeType, left, opTrue) {
	var parametersCached = $asm08.System.Dynamic.Utils.TypeExtensions.GetParametersCached(opTrue);
	if (parametersCached.length !== 1) {
		throw $asm08.System.Core.Error.IncorrectNumberOfMethodCallArguments(opTrue);
	}
	if (!(System.Linq.Expressions.Expression.ParameterIsAssignable(parametersCached[0], left) || ($asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(left) && 
				System.Linq.Expressions.Expression.ParameterIsAssignable(parametersCached[0], $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(left))))) {
		throw $asm08.System.Core.Error.OperandTypesDoNotMatchParameters(nodeType, opTrue.Name);
	}
};
System.Linq.Expressions.Expression.IsValidLiftedConditionalLogicalOperator = function (left, right, pms) {
	return (!(!$asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(left, right) || 
			!$asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(right)) && $asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(pms[1].ParameterType, $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(right)));
};
System.Linq.Expressions.Expression.MakeBinary$0 = function (binaryType, left, right) {
	return System.Linq.Expressions.Expression.MakeBinary$2(
		binaryType, 
		left, 
		right, 
		false, 
		null, 
		null
	);
};
System.Linq.Expressions.Expression.MakeBinary$1 = function (binaryType, left, right, liftToNull, method) {
	return System.Linq.Expressions.Expression.MakeBinary$2(
		binaryType, 
		left, 
		right, 
		liftToNull, 
		method, 
		null
	);
};
System.Linq.Expressions.Expression.MakeBinary$2 = function (binaryType, left, right, liftToNull, method, conversion) {
	switch (Number(binaryType)) {
		case 0: 
			return System.Linq.Expressions.Expression.Add$1(left, right, method);
		case 1: 
			return System.Linq.Expressions.Expression.AddChecked$1(left, right, method);
		case 2: 
			return System.Linq.Expressions.Expression.And$1(left, right, method);
		case 3: 
			return System.Linq.Expressions.Expression.AndAlso$1(left, right, method);
		case 5: 
			return System.Linq.Expressions.Expression.ArrayIndex$0(left, right);
		case 7: 
			return System.Linq.Expressions.Expression.Coalesce$1(left, right, conversion);
		case 12: 
			return System.Linq.Expressions.Expression.Divide$1(left, right, method);
		case 13: 
			return System.Linq.Expressions.Expression.Equal$1(left, right, liftToNull, method);
		case 14: 
			return System.Linq.Expressions.Expression.ExclusiveOr$1(left, right, method);
		case 15: 
			return System.Linq.Expressions.Expression.GreaterThan$1(left, right, liftToNull, method);
		case 16: 
			return System.Linq.Expressions.Expression.GreaterThanOrEqual$1(left, right, liftToNull, method);
		case 19: 
			return System.Linq.Expressions.Expression.LeftShift$1(left, right, method);
		case 20: 
			return System.Linq.Expressions.Expression.LessThan$1(left, right, liftToNull, method);
		case 21: 
			return System.Linq.Expressions.Expression.LessThanOrEqual$1(left, right, liftToNull, method);
		case 25: 
			return System.Linq.Expressions.Expression.Modulo$1(left, right, method);
		case 26: 
			return System.Linq.Expressions.Expression.Multiply$1(left, right, method);
		case 27: 
			return System.Linq.Expressions.Expression.MultiplyChecked$1(left, right, method);
		case 35: 
			return System.Linq.Expressions.Expression.NotEqual$1(left, right, liftToNull, method);
		case 36: 
			return System.Linq.Expressions.Expression.Or$1(left, right, method);
		case 37: 
			return System.Linq.Expressions.Expression.OrElse$1(left, right, method);
		case 39: 
			return System.Linq.Expressions.Expression.Power$1(left, right, method);
		case 41: 
			return System.Linq.Expressions.Expression.RightShift$1(left, right, method);
		case 42: 
			return System.Linq.Expressions.Expression.Subtract$1(left, right, method);
		case 43: 
			return System.Linq.Expressions.Expression.SubtractChecked$1(left, right, method);
		case 46: 
			return System.Linq.Expressions.Expression.Assign(left, right);
		case 63: 
			return System.Linq.Expressions.Expression.AddAssign$2(left, right, method, conversion);
		case 64: 
			return System.Linq.Expressions.Expression.AndAssign$2(left, right, method, conversion);
		case 65: 
			return System.Linq.Expressions.Expression.DivideAssign$2(left, right, method, conversion);
		case 66: 
			return System.Linq.Expressions.Expression.ExclusiveOrAssign$2(left, right, method, conversion);
		case 67: 
			return System.Linq.Expressions.Expression.LeftShiftAssign$2(left, right, method, conversion);
		case 68: 
			return System.Linq.Expressions.Expression.ModuloAssign$2(left, right, method, conversion);
		case 69: 
			return System.Linq.Expressions.Expression.MultiplyAssign$2(left, right, method, conversion);
		case 70: 
			return System.Linq.Expressions.Expression.OrAssign$2(left, right, method, conversion);
		case 71: 
			return System.Linq.Expressions.Expression.PowerAssign$2(left, right, method, conversion);
		case 72: 
			return System.Linq.Expressions.Expression.RightShiftAssign$2(left, right, method, conversion);
		case 73: 
			return System.Linq.Expressions.Expression.SubtractAssign$2(left, right, method, conversion);
		case 74: 
			return System.Linq.Expressions.Expression.AddAssignChecked$2(left, right, method, conversion);
		case 75: 
			return System.Linq.Expressions.Expression.MultiplyAssignChecked$2(left, right, method, conversion);
		case 76: 
			return System.Linq.Expressions.Expression.SubtractAssignChecked$2(left, right, method, conversion);
	}
	throw $asm08.System.Core.Error.UnhandledBinary(binaryType);
};
System.Linq.Expressions.Expression.Equal$0 = function (left, right) {
	return System.Linq.Expressions.Expression.Equal$1(left, right, false, null);
};
System.Linq.Expressions.Expression.Equal$1 = function (left, right, liftToNull, method) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(left, "left");
	System.Linq.Expressions.Expression.RequiresCanRead$0(right, "right");
	if (method === null) {
		return System.Linq.Expressions.Expression.GetEqualityComparisonOperator(
			System.Linq.Expressions.ExpressionType.Equal, 
			"op_Equality", 
			left, 
			right, 
			liftToNull
		);
	}
	return System.Linq.Expressions.Expression.GetMethodBasedBinaryOperator(
		System.Linq.Expressions.ExpressionType.Equal, 
		left, 
		right, 
		method, 
		liftToNull
	);
};
System.Linq.Expressions.Expression.ReferenceEqual = function (left, right) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(left, "left");
	System.Linq.Expressions.Expression.RequiresCanRead$0(right, "right");
	if ($asm08.System.Dynamic.Utils.TypeUtils.HasReferenceEquality(left.Type, right.Type)) {
		return new $asm08.System.Linq.Expressions.LogicalBinaryExpression(System.Linq.Expressions.ExpressionType.Equal, left, right);
	}
	throw $asm08.System.Core.Error.ReferenceEqualityNotDefined(left.Type, right.Type);
};
System.Linq.Expressions.Expression.NotEqual$0 = function (left, right) {
	return System.Linq.Expressions.Expression.NotEqual$1(left, right, false, null);
};
System.Linq.Expressions.Expression.NotEqual$1 = function (left, right, liftToNull, method) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(left, "left");
	System.Linq.Expressions.Expression.RequiresCanRead$0(right, "right");
	if (method === null) {
		return System.Linq.Expressions.Expression.GetEqualityComparisonOperator(
			System.Linq.Expressions.ExpressionType.NotEqual, 
			"op_Inequality", 
			left, 
			right, 
			liftToNull
		);
	}
	return System.Linq.Expressions.Expression.GetMethodBasedBinaryOperator(
		System.Linq.Expressions.ExpressionType.NotEqual, 
		left, 
		right, 
		method, 
		liftToNull
	);
};
System.Linq.Expressions.Expression.ReferenceNotEqual = function (left, right) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(left, "left");
	System.Linq.Expressions.Expression.RequiresCanRead$0(right, "right");
	if ($asm08.System.Dynamic.Utils.TypeUtils.HasReferenceEquality(left.Type, right.Type)) {
		return new $asm08.System.Linq.Expressions.LogicalBinaryExpression(System.Linq.Expressions.ExpressionType.NotEqual, left, right);
	}
	throw $asm08.System.Core.Error.ReferenceEqualityNotDefined(left.Type, right.Type);
};
System.Linq.Expressions.Expression.GetEqualityComparisonOperator = function (binaryType, opName, left, right, liftToNull) {
	if (!((left.Type !== right.Type) || (!$asm08.System.Dynamic.Utils.TypeUtils.IsNumeric(left.Type) && 
				(left.Type !== System.Object) && 
				!$asm08.System.Dynamic.Utils.TypeUtils.IsBool(left.Type) && 
				!$asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(left.Type).IsEnum))) {
		if (!(!$asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(left.Type) || !liftToNull)) {
			return new $asm08.System.Linq.Expressions.SimpleBinaryExpression(binaryType, left, right, System.Nullable$b1.Of(System.Boolean));
		}
		return new $asm08.System.Linq.Expressions.LogicalBinaryExpression(binaryType, left, right);
	} else {
		var userDefinedBinaryOperator = System.Linq.Expressions.Expression.GetUserDefinedBinaryOperator$0(
			binaryType, 
			opName, 
			left, 
			right, 
			liftToNull
		);
		if (userDefinedBinaryOperator !== null) {
			return userDefinedBinaryOperator;
		}
		if (!$asm08.System.Dynamic.Utils.TypeUtils.HasBuiltInEqualityOperator(left.Type, right.Type) && !System.Linq.Expressions.Expression.IsNullComparison(left, right)) {
			throw $asm08.System.Core.Error.BinaryOperatorNotDefined(binaryType, left.Type, right.Type);
		}
		if (!(!$asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(left.Type) || !liftToNull)) {
			return new $asm08.System.Linq.Expressions.SimpleBinaryExpression(binaryType, left, right, System.Nullable$b1.Of(System.Boolean));
		}
		return new $asm08.System.Linq.Expressions.LogicalBinaryExpression(binaryType, left, right);
	}
};
System.Linq.Expressions.Expression.GreaterThan$0 = function (left, right) {
	return System.Linq.Expressions.Expression.GreaterThan$1(left, right, false, null);
};
System.Linq.Expressions.Expression.GreaterThan$1 = function (left, right, liftToNull, method) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(left, "left");
	System.Linq.Expressions.Expression.RequiresCanRead$0(right, "right");
	if (method === null) {
		return System.Linq.Expressions.Expression.GetComparisonOperator(
			System.Linq.Expressions.ExpressionType.GreaterThan, 
			"op_GreaterThan", 
			left, 
			right, 
			liftToNull
		);
	}
	return System.Linq.Expressions.Expression.GetMethodBasedBinaryOperator(
		System.Linq.Expressions.ExpressionType.GreaterThan, 
		left, 
		right, 
		method, 
		liftToNull
	);
};
System.Linq.Expressions.Expression.LessThan$0 = function (left, right) {
	return System.Linq.Expressions.Expression.LessThan$1(left, right, false, null);
};
System.Linq.Expressions.Expression.LessThan$1 = function (left, right, liftToNull, method) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(left, "left");
	System.Linq.Expressions.Expression.RequiresCanRead$0(right, "right");
	if (method === null) {
		return System.Linq.Expressions.Expression.GetComparisonOperator(
			System.Linq.Expressions.ExpressionType.LessThan, 
			"op_LessThan", 
			left, 
			right, 
			liftToNull
		);
	}
	return System.Linq.Expressions.Expression.GetMethodBasedBinaryOperator(
		System.Linq.Expressions.ExpressionType.LessThan, 
		left, 
		right, 
		method, 
		liftToNull
	);
};
System.Linq.Expressions.Expression.GreaterThanOrEqual$0 = function (left, right) {
	return System.Linq.Expressions.Expression.GreaterThanOrEqual$1(left, right, false, null);
};
System.Linq.Expressions.Expression.GreaterThanOrEqual$1 = function (left, right, liftToNull, method) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(left, "left");
	System.Linq.Expressions.Expression.RequiresCanRead$0(right, "right");
	if (method === null) {
		return System.Linq.Expressions.Expression.GetComparisonOperator(
			System.Linq.Expressions.ExpressionType.GreaterThanOrEqual, 
			"op_GreaterThanOrEqual", 
			left, 
			right, 
			liftToNull
		);
	}
	return System.Linq.Expressions.Expression.GetMethodBasedBinaryOperator(
		System.Linq.Expressions.ExpressionType.GreaterThanOrEqual, 
		left, 
		right, 
		method, 
		liftToNull
	);
};
System.Linq.Expressions.Expression.LessThanOrEqual$0 = function (left, right) {
	return System.Linq.Expressions.Expression.LessThanOrEqual$1(left, right, false, null);
};
System.Linq.Expressions.Expression.LessThanOrEqual$1 = function (left, right, liftToNull, method) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(left, "left");
	System.Linq.Expressions.Expression.RequiresCanRead$0(right, "right");
	if (method === null) {
		return System.Linq.Expressions.Expression.GetComparisonOperator(
			System.Linq.Expressions.ExpressionType.LessThanOrEqual, 
			"op_LessThanOrEqual", 
			left, 
			right, 
			liftToNull
		);
	}
	return System.Linq.Expressions.Expression.GetMethodBasedBinaryOperator(
		System.Linq.Expressions.ExpressionType.LessThanOrEqual, 
		left, 
		right, 
		method, 
		liftToNull
	);
};
System.Linq.Expressions.Expression.GetComparisonOperator = function (binaryType, opName, left, right, liftToNull) {
	if ((left.Type !== right.Type) || !$asm08.System.Dynamic.Utils.TypeUtils.IsNumeric(left.Type)) {
		return System.Linq.Expressions.Expression.GetUserDefinedBinaryOperatorOrThrow(
			binaryType, 
			opName, 
			left, 
			right, 
			liftToNull
		);
	}
	if (!(!$asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(left.Type) || !liftToNull)) {
		return new $asm08.System.Linq.Expressions.SimpleBinaryExpression(binaryType, left, right, System.Nullable$b1.Of(System.Boolean));
	}
	return new $asm08.System.Linq.Expressions.LogicalBinaryExpression(binaryType, left, right);
};
System.Linq.Expressions.Expression.AndAlso$0 = function (left, right) {
	return System.Linq.Expressions.Expression.AndAlso$1(left, right, null);
};
System.Linq.Expressions.Expression.AndAlso$1 = function (left, right, method) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(left, "left");
	System.Linq.Expressions.Expression.RequiresCanRead$0(right, "right");
	if (method !== null) {
		System.Linq.Expressions.Expression.ValidateUserDefinedConditionalLogicOperator(System.Linq.Expressions.ExpressionType.AndAlso, left.Type, right.Type, method);
		var type = ($asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(left.Type) && 
			$asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(method.ReturnType, $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(left.Type))) ? left.Type : method.ReturnType;
		return new $asm08.System.Linq.Expressions.MethodBinaryExpression(System.Linq.Expressions.ExpressionType.AndAlso, left, right, type, method);
	}
	if (left.Type === right.Type) {
		if (left.Type === System.Boolean) {
			return new $asm08.System.Linq.Expressions.LogicalBinaryExpression(System.Linq.Expressions.ExpressionType.AndAlso, left, right);
		}
		if (left.Type === System.Nullable$b1.Of(System.Boolean)) {
			return new $asm08.System.Linq.Expressions.SimpleBinaryExpression(System.Linq.Expressions.ExpressionType.AndAlso, left, right, left.Type);
		}
	}
	method = System.Linq.Expressions.Expression.GetUserDefinedBinaryOperator$1(System.Linq.Expressions.ExpressionType.AndAlso, left.Type, right.Type, "op_BitwiseAnd");
	if (method !== null) {
		System.Linq.Expressions.Expression.ValidateUserDefinedConditionalLogicOperator(System.Linq.Expressions.ExpressionType.AndAlso, left.Type, right.Type, method);
		type = ($asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(left.Type) && 
			$asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(method.ReturnType, $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(left.Type))) ? left.Type : method.ReturnType;
		return new $asm08.System.Linq.Expressions.MethodBinaryExpression(System.Linq.Expressions.ExpressionType.AndAlso, left, right, type, method);
	}
	throw $asm08.System.Core.Error.BinaryOperatorNotDefined(System.Linq.Expressions.ExpressionType.AndAlso, left.Type, right.Type);
};
System.Linq.Expressions.Expression.OrElse$0 = function (left, right) {
	return System.Linq.Expressions.Expression.OrElse$1(left, right, null);
};
System.Linq.Expressions.Expression.OrElse$1 = function (left, right, method) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(left, "left");
	System.Linq.Expressions.Expression.RequiresCanRead$0(right, "right");
	if (method !== null) {
		System.Linq.Expressions.Expression.ValidateUserDefinedConditionalLogicOperator(System.Linq.Expressions.ExpressionType.OrElse, left.Type, right.Type, method);
		var type = ($asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(left.Type) && 
			(method.ReturnType === $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(left.Type))) ? left.Type : method.ReturnType;
		return new $asm08.System.Linq.Expressions.MethodBinaryExpression(System.Linq.Expressions.ExpressionType.OrElse, left, right, type, method);
	}
	if (left.Type === right.Type) {
		if (left.Type === System.Boolean) {
			return new $asm08.System.Linq.Expressions.LogicalBinaryExpression(System.Linq.Expressions.ExpressionType.OrElse, left, right);
		}
		if (left.Type === System.Nullable$b1.Of(System.Boolean)) {
			return new $asm08.System.Linq.Expressions.SimpleBinaryExpression(System.Linq.Expressions.ExpressionType.OrElse, left, right, left.Type);
		}
	}
	method = System.Linq.Expressions.Expression.GetUserDefinedBinaryOperator$1(System.Linq.Expressions.ExpressionType.OrElse, left.Type, right.Type, "op_BitwiseOr");
	if (method !== null) {
		System.Linq.Expressions.Expression.ValidateUserDefinedConditionalLogicOperator(System.Linq.Expressions.ExpressionType.OrElse, left.Type, right.Type, method);
		type = ($asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(left.Type) && 
			(method.ReturnType === $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(left.Type))) ? left.Type : method.ReturnType;
		return new $asm08.System.Linq.Expressions.MethodBinaryExpression(System.Linq.Expressions.ExpressionType.OrElse, left, right, type, method);
	}
	throw $asm08.System.Core.Error.BinaryOperatorNotDefined(System.Linq.Expressions.ExpressionType.OrElse, left.Type, right.Type);
};
System.Linq.Expressions.Expression.Coalesce$0 = function (left, right) {
	return System.Linq.Expressions.Expression.Coalesce$1(left, right, null);
};
System.Linq.Expressions.Expression.Coalesce$1 = function (left, right, conversion) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(left, "left");
	System.Linq.Expressions.Expression.RequiresCanRead$0(right, "right");
	if (conversion === null) {
		var type = System.Linq.Expressions.Expression.ValidateCoalesceArgTypes(left.Type, right.Type);
		return new $asm08.System.Linq.Expressions.SimpleBinaryExpression(System.Linq.Expressions.ExpressionType.Coalesce, left, right, type);
	}
	if (!(!left.Type.IsValueType || $asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(left.Type))) {
		throw $asm08.System.Core.Error.CoalesceUsedOnNonNullType();
	}
	var type2 = conversion.Type;
	var method = type2.GetMethod$5("Invoke");
	if (method.ReturnType === System.Void) {
		throw $asm08.System.Core.Error.UserDefinedOperatorMustNotBeVoid(conversion);
	}
	var parametersCached = $asm08.System.Dynamic.Utils.TypeExtensions.GetParametersCached(method);
	if (parametersCached.length !== 1) {
		throw $asm08.System.Core.Error.IncorrectNumberOfMethodCallArguments(conversion);
	}
	if (!$asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(method.ReturnType, right.Type)) {
		throw $asm08.System.Core.Error.OperandTypesDoNotMatchParameters(System.Linq.Expressions.ExpressionType.Coalesce, conversion.toString());
	}
	if (!(System.Linq.Expressions.Expression.ParameterIsAssignable(parametersCached[0], $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(left.Type)) || System.Linq.Expressions.Expression.ParameterIsAssignable(parametersCached[0], left.Type))) {
		throw $asm08.System.Core.Error.OperandTypesDoNotMatchParameters(System.Linq.Expressions.ExpressionType.Coalesce, conversion.toString());
	}
	return new $asm08.System.Linq.Expressions.CoalesceConversionBinaryExpression(left, right, conversion);
};
System.Linq.Expressions.Expression.ValidateCoalesceArgTypes = function (left, right) {
	var nonNullableType = $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(left);
	if (!(!left.IsValueType || $asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(left))) {
		throw $asm08.System.Core.Error.CoalesceUsedOnNonNullType();
	}
	if (!(!$asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(left) || !$asm08.System.Dynamic.Utils.TypeUtils.IsImplicitlyConvertible(right, nonNullableType))) {
		return nonNullableType;
	}
	if ($asm08.System.Dynamic.Utils.TypeUtils.IsImplicitlyConvertible(right, left)) {
		return left;
	}
	if ($asm08.System.Dynamic.Utils.TypeUtils.IsImplicitlyConvertible(nonNullableType, right)) {
		return right;
	}
	throw $asm08.System.Core.Error.ArgumentTypesMustMatch();
};
System.Linq.Expressions.Expression.Add$0 = function (left, right) {
	return System.Linq.Expressions.Expression.Add$1(left, right, null);
};
System.Linq.Expressions.Expression.Add$1 = function (left, right, method) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(left, "left");
	System.Linq.Expressions.Expression.RequiresCanRead$0(right, "right");
	if (method !== null) {
		return System.Linq.Expressions.Expression.GetMethodBasedBinaryOperator(
			System.Linq.Expressions.ExpressionType.Add, 
			left, 
			right, 
			method, 
			true
		);
	}
	if (!((left.Type !== right.Type) || !$asm08.System.Dynamic.Utils.TypeUtils.IsArithmetic(left.Type))) {
		return new $asm08.System.Linq.Expressions.SimpleBinaryExpression(System.Linq.Expressions.ExpressionType.Add, left, right, left.Type);
	}
	return System.Linq.Expressions.Expression.GetUserDefinedBinaryOperatorOrThrow(
		System.Linq.Expressions.ExpressionType.Add, 
		"op_Addition", 
		left, 
		right, 
		true
	);
};
System.Linq.Expressions.Expression.AddAssign$0 = function (left, right) {
	return System.Linq.Expressions.Expression.AddAssign$2(left, right, null, null);
};
System.Linq.Expressions.Expression.AddAssign$1 = function (left, right, method) {
	return System.Linq.Expressions.Expression.AddAssign$2(left, right, method, null);
};
System.Linq.Expressions.Expression.AddAssign$2 = function (left, right, method, conversion) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(left, "left");
	System.Linq.Expressions.Expression.RequiresCanWrite(left, "left");
	System.Linq.Expressions.Expression.RequiresCanRead$0(right, "right");
	if (method !== null) {
		return System.Linq.Expressions.Expression.GetMethodBasedAssignOperator(
			System.Linq.Expressions.ExpressionType.AddAssign, 
			left, 
			right, 
			method, 
			conversion, 
			true
		);
	}
	if ((left.Type !== right.Type) || !$asm08.System.Dynamic.Utils.TypeUtils.IsArithmetic(left.Type)) {
		return System.Linq.Expressions.Expression.GetUserDefinedAssignOperatorOrThrow(
			System.Linq.Expressions.ExpressionType.AddAssign, 
			"op_Addition", 
			left, 
			right, 
			conversion, 
			true
		);
	}
	if (conversion !== null) {
		throw $asm08.System.Core.Error.ConversionIsNotSupportedForArithmeticTypes();
	}
	return new $asm08.System.Linq.Expressions.SimpleBinaryExpression(System.Linq.Expressions.ExpressionType.AddAssign, left, right, left.Type);
};
System.Linq.Expressions.Expression.ValidateOpAssignConversionLambda = function (conversion, left, method, nodeType) {
	var type = conversion.Type;
	var method2 = type.GetMethod$5("Invoke");
	var parametersCached = $asm08.System.Dynamic.Utils.TypeExtensions.GetParametersCached(method2);
	if (parametersCached.length !== 1) {
		throw $asm08.System.Core.Error.IncorrectNumberOfMethodCallArguments(conversion);
	}
	if (!$asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(method2.ReturnType, left.Type)) {
		throw $asm08.System.Core.Error.OperandTypesDoNotMatchParameters(nodeType, conversion.toString());
	}
	if (!((method === null) || $asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(parametersCached[0].ParameterType, method.ReturnType))) {
		throw $asm08.System.Core.Error.OverloadOperatorTypeDoesNotMatchConversionType(nodeType, conversion.toString());
	}
};
System.Linq.Expressions.Expression.AddAssignChecked$0 = function (left, right) {
	return System.Linq.Expressions.Expression.AddAssignChecked$1(left, right, null);
};
System.Linq.Expressions.Expression.AddAssignChecked$1 = function (left, right, method) {
	return System.Linq.Expressions.Expression.AddAssignChecked$2(left, right, method, null);
};
System.Linq.Expressions.Expression.AddAssignChecked$2 = function (left, right, method, conversion) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(left, "left");
	System.Linq.Expressions.Expression.RequiresCanWrite(left, "left");
	System.Linq.Expressions.Expression.RequiresCanRead$0(right, "right");
	if (method !== null) {
		return System.Linq.Expressions.Expression.GetMethodBasedAssignOperator(
			System.Linq.Expressions.ExpressionType.AddAssignChecked, 
			left, 
			right, 
			method, 
			conversion, 
			true
		);
	}
	if ((left.Type !== right.Type) || !$asm08.System.Dynamic.Utils.TypeUtils.IsArithmetic(left.Type)) {
		return System.Linq.Expressions.Expression.GetUserDefinedAssignOperatorOrThrow(
			System.Linq.Expressions.ExpressionType.AddAssignChecked, 
			"op_Addition", 
			left, 
			right, 
			conversion, 
			true
		);
	}
	if (conversion !== null) {
		throw $asm08.System.Core.Error.ConversionIsNotSupportedForArithmeticTypes();
	}
	return new $asm08.System.Linq.Expressions.SimpleBinaryExpression(System.Linq.Expressions.ExpressionType.AddAssignChecked, left, right, left.Type);
};
System.Linq.Expressions.Expression.AddChecked$0 = function (left, right) {
	return System.Linq.Expressions.Expression.AddChecked$1(left, right, null);
};
System.Linq.Expressions.Expression.AddChecked$1 = function (left, right, method) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(left, "left");
	System.Linq.Expressions.Expression.RequiresCanRead$0(right, "right");
	if (method !== null) {
		return System.Linq.Expressions.Expression.GetMethodBasedBinaryOperator(
			System.Linq.Expressions.ExpressionType.AddChecked, 
			left, 
			right, 
			method, 
			true
		);
	}
	if (!((left.Type !== right.Type) || !$asm08.System.Dynamic.Utils.TypeUtils.IsArithmetic(left.Type))) {
		return new $asm08.System.Linq.Expressions.SimpleBinaryExpression(System.Linq.Expressions.ExpressionType.AddChecked, left, right, left.Type);
	}
	return System.Linq.Expressions.Expression.GetUserDefinedBinaryOperatorOrThrow(
		System.Linq.Expressions.ExpressionType.AddChecked, 
		"op_Addition", 
		left, 
		right, 
		false
	);
};
System.Linq.Expressions.Expression.Subtract$0 = function (left, right) {
	return System.Linq.Expressions.Expression.Subtract$1(left, right, null);
};
System.Linq.Expressions.Expression.Subtract$1 = function (left, right, method) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(left, "left");
	System.Linq.Expressions.Expression.RequiresCanRead$0(right, "right");
	if (method !== null) {
		return System.Linq.Expressions.Expression.GetMethodBasedBinaryOperator(
			System.Linq.Expressions.ExpressionType.Subtract, 
			left, 
			right, 
			method, 
			true
		);
	}
	if (!((left.Type !== right.Type) || !$asm08.System.Dynamic.Utils.TypeUtils.IsArithmetic(left.Type))) {
		return new $asm08.System.Linq.Expressions.SimpleBinaryExpression(System.Linq.Expressions.ExpressionType.Subtract, left, right, left.Type);
	}
	return System.Linq.Expressions.Expression.GetUserDefinedBinaryOperatorOrThrow(
		System.Linq.Expressions.ExpressionType.Subtract, 
		"op_Subtraction", 
		left, 
		right, 
		true
	);
};
System.Linq.Expressions.Expression.SubtractAssign$0 = function (left, right) {
	return System.Linq.Expressions.Expression.SubtractAssign$2(left, right, null, null);
};
System.Linq.Expressions.Expression.SubtractAssign$1 = function (left, right, method) {
	return System.Linq.Expressions.Expression.SubtractAssign$2(left, right, method, null);
};
System.Linq.Expressions.Expression.SubtractAssign$2 = function (left, right, method, conversion) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(left, "left");
	System.Linq.Expressions.Expression.RequiresCanWrite(left, "left");
	System.Linq.Expressions.Expression.RequiresCanRead$0(right, "right");
	if (method !== null) {
		return System.Linq.Expressions.Expression.GetMethodBasedAssignOperator(
			System.Linq.Expressions.ExpressionType.SubtractAssign, 
			left, 
			right, 
			method, 
			conversion, 
			true
		);
	}
	if ((left.Type !== right.Type) || !$asm08.System.Dynamic.Utils.TypeUtils.IsArithmetic(left.Type)) {
		return System.Linq.Expressions.Expression.GetUserDefinedAssignOperatorOrThrow(
			System.Linq.Expressions.ExpressionType.SubtractAssign, 
			"op_Subtraction", 
			left, 
			right, 
			conversion, 
			true
		);
	}
	if (conversion !== null) {
		throw $asm08.System.Core.Error.ConversionIsNotSupportedForArithmeticTypes();
	}
	return new $asm08.System.Linq.Expressions.SimpleBinaryExpression(System.Linq.Expressions.ExpressionType.SubtractAssign, left, right, left.Type);
};
System.Linq.Expressions.Expression.SubtractAssignChecked$0 = function (left, right) {
	return System.Linq.Expressions.Expression.SubtractAssignChecked$1(left, right, null);
};
System.Linq.Expressions.Expression.SubtractAssignChecked$1 = function (left, right, method) {
	return System.Linq.Expressions.Expression.SubtractAssignChecked$2(left, right, method, null);
};
System.Linq.Expressions.Expression.SubtractAssignChecked$2 = function (left, right, method, conversion) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(left, "left");
	System.Linq.Expressions.Expression.RequiresCanWrite(left, "left");
	System.Linq.Expressions.Expression.RequiresCanRead$0(right, "right");
	if (method !== null) {
		return System.Linq.Expressions.Expression.GetMethodBasedAssignOperator(
			System.Linq.Expressions.ExpressionType.SubtractAssignChecked, 
			left, 
			right, 
			method, 
			conversion, 
			true
		);
	}
	if ((left.Type !== right.Type) || !$asm08.System.Dynamic.Utils.TypeUtils.IsArithmetic(left.Type)) {
		return System.Linq.Expressions.Expression.GetUserDefinedAssignOperatorOrThrow(
			System.Linq.Expressions.ExpressionType.SubtractAssignChecked, 
			"op_Subtraction", 
			left, 
			right, 
			conversion, 
			true
		);
	}
	if (conversion !== null) {
		throw $asm08.System.Core.Error.ConversionIsNotSupportedForArithmeticTypes();
	}
	return new $asm08.System.Linq.Expressions.SimpleBinaryExpression(System.Linq.Expressions.ExpressionType.SubtractAssignChecked, left, right, left.Type);
};
System.Linq.Expressions.Expression.SubtractChecked$0 = function (left, right) {
	return System.Linq.Expressions.Expression.SubtractChecked$1(left, right, null);
};
System.Linq.Expressions.Expression.SubtractChecked$1 = function (left, right, method) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(left, "left");
	System.Linq.Expressions.Expression.RequiresCanRead$0(right, "right");
	if (method !== null) {
		return System.Linq.Expressions.Expression.GetMethodBasedBinaryOperator(
			System.Linq.Expressions.ExpressionType.SubtractChecked, 
			left, 
			right, 
			method, 
			true
		);
	}
	if (!((left.Type !== right.Type) || !$asm08.System.Dynamic.Utils.TypeUtils.IsArithmetic(left.Type))) {
		return new $asm08.System.Linq.Expressions.SimpleBinaryExpression(System.Linq.Expressions.ExpressionType.SubtractChecked, left, right, left.Type);
	}
	return System.Linq.Expressions.Expression.GetUserDefinedBinaryOperatorOrThrow(
		System.Linq.Expressions.ExpressionType.SubtractChecked, 
		"op_Subtraction", 
		left, 
		right, 
		true
	);
};
System.Linq.Expressions.Expression.Divide$0 = function (left, right) {
	return System.Linq.Expressions.Expression.Divide$1(left, right, null);
};
System.Linq.Expressions.Expression.Divide$1 = function (left, right, method) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(left, "left");
	System.Linq.Expressions.Expression.RequiresCanRead$0(right, "right");
	if (method !== null) {
		return System.Linq.Expressions.Expression.GetMethodBasedBinaryOperator(
			System.Linq.Expressions.ExpressionType.Divide, 
			left, 
			right, 
			method, 
			true
		);
	}
	if (!((left.Type !== right.Type) || !$asm08.System.Dynamic.Utils.TypeUtils.IsArithmetic(left.Type))) {
		return new $asm08.System.Linq.Expressions.SimpleBinaryExpression(System.Linq.Expressions.ExpressionType.Divide, left, right, left.Type);
	}
	return System.Linq.Expressions.Expression.GetUserDefinedBinaryOperatorOrThrow(
		System.Linq.Expressions.ExpressionType.Divide, 
		"op_Division", 
		left, 
		right, 
		true
	);
};
System.Linq.Expressions.Expression.DivideAssign$0 = function (left, right) {
	return System.Linq.Expressions.Expression.DivideAssign$2(left, right, null, null);
};
System.Linq.Expressions.Expression.DivideAssign$1 = function (left, right, method) {
	return System.Linq.Expressions.Expression.DivideAssign$2(left, right, method, null);
};
System.Linq.Expressions.Expression.DivideAssign$2 = function (left, right, method, conversion) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(left, "left");
	System.Linq.Expressions.Expression.RequiresCanWrite(left, "left");
	System.Linq.Expressions.Expression.RequiresCanRead$0(right, "right");
	if (method !== null) {
		return System.Linq.Expressions.Expression.GetMethodBasedAssignOperator(
			System.Linq.Expressions.ExpressionType.DivideAssign, 
			left, 
			right, 
			method, 
			conversion, 
			true
		);
	}
	if ((left.Type !== right.Type) || !$asm08.System.Dynamic.Utils.TypeUtils.IsArithmetic(left.Type)) {
		return System.Linq.Expressions.Expression.GetUserDefinedAssignOperatorOrThrow(
			System.Linq.Expressions.ExpressionType.DivideAssign, 
			"op_Division", 
			left, 
			right, 
			conversion, 
			true
		);
	}
	if (conversion !== null) {
		throw $asm08.System.Core.Error.ConversionIsNotSupportedForArithmeticTypes();
	}
	return new $asm08.System.Linq.Expressions.SimpleBinaryExpression(System.Linq.Expressions.ExpressionType.DivideAssign, left, right, left.Type);
};
System.Linq.Expressions.Expression.Modulo$0 = function (left, right) {
	return System.Linq.Expressions.Expression.Modulo$1(left, right, null);
};
System.Linq.Expressions.Expression.Modulo$1 = function (left, right, method) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(left, "left");
	System.Linq.Expressions.Expression.RequiresCanRead$0(right, "right");
	if (method !== null) {
		return System.Linq.Expressions.Expression.GetMethodBasedBinaryOperator(
			System.Linq.Expressions.ExpressionType.Modulo, 
			left, 
			right, 
			method, 
			true
		);
	}
	if (!((left.Type !== right.Type) || !$asm08.System.Dynamic.Utils.TypeUtils.IsArithmetic(left.Type))) {
		return new $asm08.System.Linq.Expressions.SimpleBinaryExpression(System.Linq.Expressions.ExpressionType.Modulo, left, right, left.Type);
	}
	return System.Linq.Expressions.Expression.GetUserDefinedBinaryOperatorOrThrow(
		System.Linq.Expressions.ExpressionType.Modulo, 
		"op_Modulus", 
		left, 
		right, 
		true
	);
};
System.Linq.Expressions.Expression.ModuloAssign$0 = function (left, right) {
	return System.Linq.Expressions.Expression.ModuloAssign$2(left, right, null, null);
};
System.Linq.Expressions.Expression.ModuloAssign$1 = function (left, right, method) {
	return System.Linq.Expressions.Expression.ModuloAssign$2(left, right, method, null);
};
System.Linq.Expressions.Expression.ModuloAssign$2 = function (left, right, method, conversion) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(left, "left");
	System.Linq.Expressions.Expression.RequiresCanWrite(left, "left");
	System.Linq.Expressions.Expression.RequiresCanRead$0(right, "right");
	if (method !== null) {
		return System.Linq.Expressions.Expression.GetMethodBasedAssignOperator(
			System.Linq.Expressions.ExpressionType.ModuloAssign, 
			left, 
			right, 
			method, 
			conversion, 
			true
		);
	}
	if ((left.Type !== right.Type) || !$asm08.System.Dynamic.Utils.TypeUtils.IsArithmetic(left.Type)) {
		return System.Linq.Expressions.Expression.GetUserDefinedAssignOperatorOrThrow(
			System.Linq.Expressions.ExpressionType.ModuloAssign, 
			"op_Modulus", 
			left, 
			right, 
			conversion, 
			true
		);
	}
	if (conversion !== null) {
		throw $asm08.System.Core.Error.ConversionIsNotSupportedForArithmeticTypes();
	}
	return new $asm08.System.Linq.Expressions.SimpleBinaryExpression(System.Linq.Expressions.ExpressionType.ModuloAssign, left, right, left.Type);
};
System.Linq.Expressions.Expression.Multiply$0 = function (left, right) {
	return System.Linq.Expressions.Expression.Multiply$1(left, right, null);
};
System.Linq.Expressions.Expression.Multiply$1 = function (left, right, method) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(left, "left");
	System.Linq.Expressions.Expression.RequiresCanRead$0(right, "right");
	if (method !== null) {
		return System.Linq.Expressions.Expression.GetMethodBasedBinaryOperator(
			System.Linq.Expressions.ExpressionType.Multiply, 
			left, 
			right, 
			method, 
			true
		);
	}
	if (!((left.Type !== right.Type) || !$asm08.System.Dynamic.Utils.TypeUtils.IsArithmetic(left.Type))) {
		return new $asm08.System.Linq.Expressions.SimpleBinaryExpression(System.Linq.Expressions.ExpressionType.Multiply, left, right, left.Type);
	}
	return System.Linq.Expressions.Expression.GetUserDefinedBinaryOperatorOrThrow(
		System.Linq.Expressions.ExpressionType.Multiply, 
		"op_Multiply", 
		left, 
		right, 
		true
	);
};
System.Linq.Expressions.Expression.MultiplyAssign$0 = function (left, right) {
	return System.Linq.Expressions.Expression.MultiplyAssign$2(left, right, null, null);
};
System.Linq.Expressions.Expression.MultiplyAssign$1 = function (left, right, method) {
	return System.Linq.Expressions.Expression.MultiplyAssign$2(left, right, method, null);
};
System.Linq.Expressions.Expression.MultiplyAssign$2 = function (left, right, method, conversion) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(left, "left");
	System.Linq.Expressions.Expression.RequiresCanWrite(left, "left");
	System.Linq.Expressions.Expression.RequiresCanRead$0(right, "right");
	if (method !== null) {
		return System.Linq.Expressions.Expression.GetMethodBasedAssignOperator(
			System.Linq.Expressions.ExpressionType.MultiplyAssign, 
			left, 
			right, 
			method, 
			conversion, 
			true
		);
	}
	if ((left.Type !== right.Type) || !$asm08.System.Dynamic.Utils.TypeUtils.IsArithmetic(left.Type)) {
		return System.Linq.Expressions.Expression.GetUserDefinedAssignOperatorOrThrow(
			System.Linq.Expressions.ExpressionType.MultiplyAssign, 
			"op_Multiply", 
			left, 
			right, 
			conversion, 
			true
		);
	}
	if (conversion !== null) {
		throw $asm08.System.Core.Error.ConversionIsNotSupportedForArithmeticTypes();
	}
	return new $asm08.System.Linq.Expressions.SimpleBinaryExpression(System.Linq.Expressions.ExpressionType.MultiplyAssign, left, right, left.Type);
};
System.Linq.Expressions.Expression.MultiplyAssignChecked$0 = function (left, right) {
	return System.Linq.Expressions.Expression.MultiplyAssignChecked$1(left, right, null);
};
System.Linq.Expressions.Expression.MultiplyAssignChecked$1 = function (left, right, method) {
	return System.Linq.Expressions.Expression.MultiplyAssignChecked$2(left, right, method, null);
};
System.Linq.Expressions.Expression.MultiplyAssignChecked$2 = function (left, right, method, conversion) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(left, "left");
	System.Linq.Expressions.Expression.RequiresCanWrite(left, "left");
	System.Linq.Expressions.Expression.RequiresCanRead$0(right, "right");
	if (method !== null) {
		return System.Linq.Expressions.Expression.GetMethodBasedAssignOperator(
			System.Linq.Expressions.ExpressionType.MultiplyAssignChecked, 
			left, 
			right, 
			method, 
			conversion, 
			true
		);
	}
	if ((left.Type !== right.Type) || !$asm08.System.Dynamic.Utils.TypeUtils.IsArithmetic(left.Type)) {
		return System.Linq.Expressions.Expression.GetUserDefinedAssignOperatorOrThrow(
			System.Linq.Expressions.ExpressionType.MultiplyAssignChecked, 
			"op_Multiply", 
			left, 
			right, 
			conversion, 
			true
		);
	}
	if (conversion !== null) {
		throw $asm08.System.Core.Error.ConversionIsNotSupportedForArithmeticTypes();
	}
	return new $asm08.System.Linq.Expressions.SimpleBinaryExpression(System.Linq.Expressions.ExpressionType.MultiplyAssignChecked, left, right, left.Type);
};
System.Linq.Expressions.Expression.MultiplyChecked$0 = function (left, right) {
	return System.Linq.Expressions.Expression.MultiplyChecked$1(left, right, null);
};
System.Linq.Expressions.Expression.MultiplyChecked$1 = function (left, right, method) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(left, "left");
	System.Linq.Expressions.Expression.RequiresCanRead$0(right, "right");
	if (method !== null) {
		return System.Linq.Expressions.Expression.GetMethodBasedBinaryOperator(
			System.Linq.Expressions.ExpressionType.MultiplyChecked, 
			left, 
			right, 
			method, 
			true
		);
	}
	if (!((left.Type !== right.Type) || !$asm08.System.Dynamic.Utils.TypeUtils.IsArithmetic(left.Type))) {
		return new $asm08.System.Linq.Expressions.SimpleBinaryExpression(System.Linq.Expressions.ExpressionType.MultiplyChecked, left, right, left.Type);
	}
	return System.Linq.Expressions.Expression.GetUserDefinedBinaryOperatorOrThrow(
		System.Linq.Expressions.ExpressionType.MultiplyChecked, 
		"op_Multiply", 
		left, 
		right, 
		true
	);
};
System.Linq.Expressions.Expression.IsSimpleShift = function (left, right) {
	return ($asm08.System.Dynamic.Utils.TypeUtils.IsInteger(left) && ($asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(right) === System.Int32));
};
System.Linq.Expressions.Expression.GetResultTypeOfShift = function (left, right) {
	if (!($asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(left) || !$asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(right))) {
		return System.Nullable$b1.MakeGenericType(JSIL.Array.New(System.Type, [left]));
	}
	return left;
};
System.Linq.Expressions.Expression.LeftShift$0 = function (left, right) {
	return System.Linq.Expressions.Expression.LeftShift$1(left, right, null);
};
System.Linq.Expressions.Expression.LeftShift$1 = function (left, right, method) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(left, "left");
	System.Linq.Expressions.Expression.RequiresCanRead$0(right, "right");
	if (method !== null) {
		return System.Linq.Expressions.Expression.GetMethodBasedBinaryOperator(
			System.Linq.Expressions.ExpressionType.LeftShift, 
			left, 
			right, 
			method, 
			true
		);
	}
	if (System.Linq.Expressions.Expression.IsSimpleShift(left.Type, right.Type)) {
		var resultTypeOfShift = System.Linq.Expressions.Expression.GetResultTypeOfShift(left.Type, right.Type);
		return new $asm08.System.Linq.Expressions.SimpleBinaryExpression(System.Linq.Expressions.ExpressionType.LeftShift, left, right, resultTypeOfShift);
	}
	return System.Linq.Expressions.Expression.GetUserDefinedBinaryOperatorOrThrow(
		System.Linq.Expressions.ExpressionType.LeftShift, 
		"op_LeftShift", 
		left, 
		right, 
		true
	);
};
System.Linq.Expressions.Expression.LeftShiftAssign$0 = function (left, right) {
	return System.Linq.Expressions.Expression.LeftShiftAssign$2(left, right, null, null);
};
System.Linq.Expressions.Expression.LeftShiftAssign$1 = function (left, right, method) {
	return System.Linq.Expressions.Expression.LeftShiftAssign$2(left, right, method, null);
};
System.Linq.Expressions.Expression.LeftShiftAssign$2 = function (left, right, method, conversion) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(left, "left");
	System.Linq.Expressions.Expression.RequiresCanWrite(left, "left");
	System.Linq.Expressions.Expression.RequiresCanRead$0(right, "right");
	if (method !== null) {
		return System.Linq.Expressions.Expression.GetMethodBasedAssignOperator(
			System.Linq.Expressions.ExpressionType.LeftShiftAssign, 
			left, 
			right, 
			method, 
			conversion, 
			true
		);
	}
	if (!System.Linq.Expressions.Expression.IsSimpleShift(left.Type, right.Type)) {
		return System.Linq.Expressions.Expression.GetUserDefinedAssignOperatorOrThrow(
			System.Linq.Expressions.ExpressionType.LeftShiftAssign, 
			"op_LeftShift", 
			left, 
			right, 
			conversion, 
			true
		);
	}
	if (conversion !== null) {
		throw $asm08.System.Core.Error.ConversionIsNotSupportedForArithmeticTypes();
	}
	var resultTypeOfShift = System.Linq.Expressions.Expression.GetResultTypeOfShift(left.Type, right.Type);
	return new $asm08.System.Linq.Expressions.SimpleBinaryExpression(System.Linq.Expressions.ExpressionType.LeftShiftAssign, left, right, resultTypeOfShift);
};
System.Linq.Expressions.Expression.RightShift$0 = function (left, right) {
	return System.Linq.Expressions.Expression.RightShift$1(left, right, null);
};
System.Linq.Expressions.Expression.RightShift$1 = function (left, right, method) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(left, "left");
	System.Linq.Expressions.Expression.RequiresCanRead$0(right, "right");
	if (method !== null) {
		return System.Linq.Expressions.Expression.GetMethodBasedBinaryOperator(
			System.Linq.Expressions.ExpressionType.RightShift, 
			left, 
			right, 
			method, 
			true
		);
	}
	if (System.Linq.Expressions.Expression.IsSimpleShift(left.Type, right.Type)) {
		var resultTypeOfShift = System.Linq.Expressions.Expression.GetResultTypeOfShift(left.Type, right.Type);
		return new $asm08.System.Linq.Expressions.SimpleBinaryExpression(System.Linq.Expressions.ExpressionType.RightShift, left, right, resultTypeOfShift);
	}
	return System.Linq.Expressions.Expression.GetUserDefinedBinaryOperatorOrThrow(
		System.Linq.Expressions.ExpressionType.RightShift, 
		"op_RightShift", 
		left, 
		right, 
		true
	);
};
System.Linq.Expressions.Expression.RightShiftAssign$0 = function (left, right) {
	return System.Linq.Expressions.Expression.RightShiftAssign$2(left, right, null, null);
};
System.Linq.Expressions.Expression.RightShiftAssign$1 = function (left, right, method) {
	return System.Linq.Expressions.Expression.RightShiftAssign$2(left, right, method, null);
};
System.Linq.Expressions.Expression.RightShiftAssign$2 = function (left, right, method, conversion) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(left, "left");
	System.Linq.Expressions.Expression.RequiresCanWrite(left, "left");
	System.Linq.Expressions.Expression.RequiresCanRead$0(right, "right");
	if (method !== null) {
		return System.Linq.Expressions.Expression.GetMethodBasedAssignOperator(
			System.Linq.Expressions.ExpressionType.RightShiftAssign, 
			left, 
			right, 
			method, 
			conversion, 
			true
		);
	}
	if (!System.Linq.Expressions.Expression.IsSimpleShift(left.Type, right.Type)) {
		return System.Linq.Expressions.Expression.GetUserDefinedAssignOperatorOrThrow(
			System.Linq.Expressions.ExpressionType.RightShiftAssign, 
			"op_RightShift", 
			left, 
			right, 
			conversion, 
			true
		);
	}
	if (conversion !== null) {
		throw $asm08.System.Core.Error.ConversionIsNotSupportedForArithmeticTypes();
	}
	var resultTypeOfShift = System.Linq.Expressions.Expression.GetResultTypeOfShift(left.Type, right.Type);
	return new $asm08.System.Linq.Expressions.SimpleBinaryExpression(System.Linq.Expressions.ExpressionType.RightShiftAssign, left, right, resultTypeOfShift);
};
System.Linq.Expressions.Expression.And$0 = function (left, right) {
	return System.Linq.Expressions.Expression.And$1(left, right, null);
};
System.Linq.Expressions.Expression.And$1 = function (left, right, method) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(left, "left");
	System.Linq.Expressions.Expression.RequiresCanRead$0(right, "right");
	if (method !== null) {
		return System.Linq.Expressions.Expression.GetMethodBasedBinaryOperator(
			System.Linq.Expressions.ExpressionType.And, 
			left, 
			right, 
			method, 
			true
		);
	}
	if (!((left.Type !== right.Type) || !$asm08.System.Dynamic.Utils.TypeUtils.IsIntegerOrBool(left.Type))) {
		return new $asm08.System.Linq.Expressions.SimpleBinaryExpression(System.Linq.Expressions.ExpressionType.And, left, right, left.Type);
	}
	return System.Linq.Expressions.Expression.GetUserDefinedBinaryOperatorOrThrow(
		System.Linq.Expressions.ExpressionType.And, 
		"op_BitwiseAnd", 
		left, 
		right, 
		true
	);
};
System.Linq.Expressions.Expression.AndAssign$0 = function (left, right) {
	return System.Linq.Expressions.Expression.AndAssign$2(left, right, null, null);
};
System.Linq.Expressions.Expression.AndAssign$1 = function (left, right, method) {
	return System.Linq.Expressions.Expression.AndAssign$2(left, right, method, null);
};
System.Linq.Expressions.Expression.AndAssign$2 = function (left, right, method, conversion) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(left, "left");
	System.Linq.Expressions.Expression.RequiresCanWrite(left, "left");
	System.Linq.Expressions.Expression.RequiresCanRead$0(right, "right");
	if (method !== null) {
		return System.Linq.Expressions.Expression.GetMethodBasedAssignOperator(
			System.Linq.Expressions.ExpressionType.AndAssign, 
			left, 
			right, 
			method, 
			conversion, 
			true
		);
	}
	if ((left.Type !== right.Type) || !$asm08.System.Dynamic.Utils.TypeUtils.IsIntegerOrBool(left.Type)) {
		return System.Linq.Expressions.Expression.GetUserDefinedAssignOperatorOrThrow(
			System.Linq.Expressions.ExpressionType.AndAssign, 
			"op_BitwiseAnd", 
			left, 
			right, 
			conversion, 
			true
		);
	}
	if (conversion !== null) {
		throw $asm08.System.Core.Error.ConversionIsNotSupportedForArithmeticTypes();
	}
	return new $asm08.System.Linq.Expressions.SimpleBinaryExpression(System.Linq.Expressions.ExpressionType.AndAssign, left, right, left.Type);
};
System.Linq.Expressions.Expression.Or$0 = function (left, right) {
	return System.Linq.Expressions.Expression.Or$1(left, right, null);
};
System.Linq.Expressions.Expression.Or$1 = function (left, right, method) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(left, "left");
	System.Linq.Expressions.Expression.RequiresCanRead$0(right, "right");
	if (method !== null) {
		return System.Linq.Expressions.Expression.GetMethodBasedBinaryOperator(
			System.Linq.Expressions.ExpressionType.Or, 
			left, 
			right, 
			method, 
			true
		);
	}
	if (!((left.Type !== right.Type) || !$asm08.System.Dynamic.Utils.TypeUtils.IsIntegerOrBool(left.Type))) {
		return new $asm08.System.Linq.Expressions.SimpleBinaryExpression(System.Linq.Expressions.ExpressionType.Or, left, right, left.Type);
	}
	return System.Linq.Expressions.Expression.GetUserDefinedBinaryOperatorOrThrow(
		System.Linq.Expressions.ExpressionType.Or, 
		"op_BitwiseOr", 
		left, 
		right, 
		true
	);
};
System.Linq.Expressions.Expression.OrAssign$0 = function (left, right) {
	return System.Linq.Expressions.Expression.OrAssign$2(left, right, null, null);
};
System.Linq.Expressions.Expression.OrAssign$1 = function (left, right, method) {
	return System.Linq.Expressions.Expression.OrAssign$2(left, right, method, null);
};
System.Linq.Expressions.Expression.OrAssign$2 = function (left, right, method, conversion) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(left, "left");
	System.Linq.Expressions.Expression.RequiresCanWrite(left, "left");
	System.Linq.Expressions.Expression.RequiresCanRead$0(right, "right");
	if (method !== null) {
		return System.Linq.Expressions.Expression.GetMethodBasedAssignOperator(
			System.Linq.Expressions.ExpressionType.OrAssign, 
			left, 
			right, 
			method, 
			conversion, 
			true
		);
	}
	if ((left.Type !== right.Type) || !$asm08.System.Dynamic.Utils.TypeUtils.IsIntegerOrBool(left.Type)) {
		return System.Linq.Expressions.Expression.GetUserDefinedAssignOperatorOrThrow(
			System.Linq.Expressions.ExpressionType.OrAssign, 
			"op_BitwiseOr", 
			left, 
			right, 
			conversion, 
			true
		);
	}
	if (conversion !== null) {
		throw $asm08.System.Core.Error.ConversionIsNotSupportedForArithmeticTypes();
	}
	return new $asm08.System.Linq.Expressions.SimpleBinaryExpression(System.Linq.Expressions.ExpressionType.OrAssign, left, right, left.Type);
};
System.Linq.Expressions.Expression.ExclusiveOr$0 = function (left, right) {
	return System.Linq.Expressions.Expression.ExclusiveOr$1(left, right, null);
};
System.Linq.Expressions.Expression.ExclusiveOr$1 = function (left, right, method) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(left, "left");
	System.Linq.Expressions.Expression.RequiresCanRead$0(right, "right");
	if (method !== null) {
		return System.Linq.Expressions.Expression.GetMethodBasedBinaryOperator(
			System.Linq.Expressions.ExpressionType.ExclusiveOr, 
			left, 
			right, 
			method, 
			true
		);
	}
	if (!((left.Type !== right.Type) || !$asm08.System.Dynamic.Utils.TypeUtils.IsIntegerOrBool(left.Type))) {
		return new $asm08.System.Linq.Expressions.SimpleBinaryExpression(System.Linq.Expressions.ExpressionType.ExclusiveOr, left, right, left.Type);
	}
	return System.Linq.Expressions.Expression.GetUserDefinedBinaryOperatorOrThrow(
		System.Linq.Expressions.ExpressionType.ExclusiveOr, 
		"op_ExclusiveOr", 
		left, 
		right, 
		true
	);
};
System.Linq.Expressions.Expression.ExclusiveOrAssign$0 = function (left, right) {
	return System.Linq.Expressions.Expression.ExclusiveOrAssign$2(left, right, null, null);
};
System.Linq.Expressions.Expression.ExclusiveOrAssign$1 = function (left, right, method) {
	return System.Linq.Expressions.Expression.ExclusiveOrAssign$2(left, right, method, null);
};
System.Linq.Expressions.Expression.ExclusiveOrAssign$2 = function (left, right, method, conversion) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(left, "left");
	System.Linq.Expressions.Expression.RequiresCanWrite(left, "left");
	System.Linq.Expressions.Expression.RequiresCanRead$0(right, "right");
	if (method !== null) {
		return System.Linq.Expressions.Expression.GetMethodBasedAssignOperator(
			System.Linq.Expressions.ExpressionType.ExclusiveOrAssign, 
			left, 
			right, 
			method, 
			conversion, 
			true
		);
	}
	if ((left.Type !== right.Type) || !$asm08.System.Dynamic.Utils.TypeUtils.IsIntegerOrBool(left.Type)) {
		return System.Linq.Expressions.Expression.GetUserDefinedAssignOperatorOrThrow(
			System.Linq.Expressions.ExpressionType.ExclusiveOrAssign, 
			"op_ExclusiveOr", 
			left, 
			right, 
			conversion, 
			true
		);
	}
	if (conversion !== null) {
		throw $asm08.System.Core.Error.ConversionIsNotSupportedForArithmeticTypes();
	}
	return new $asm08.System.Linq.Expressions.SimpleBinaryExpression(System.Linq.Expressions.ExpressionType.ExclusiveOrAssign, left, right, left.Type);
};
System.Linq.Expressions.Expression.Power$0 = function (left, right) {
	return System.Linq.Expressions.Expression.Power$1(left, right, null);
};
System.Linq.Expressions.Expression.Power$1 = function (left, right, method) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(left, "left");
	System.Linq.Expressions.Expression.RequiresCanRead$0(right, "right");
	if (method === null) {
		var typeFromHandle = System.Math;
		method = typeFromHandle.GetMethod$4("Pow", (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
		if (method === null) {
			throw $asm08.System.Core.Error.BinaryOperatorNotDefined(System.Linq.Expressions.ExpressionType.Power, left.Type, right.Type);
		}
	}
	return System.Linq.Expressions.Expression.GetMethodBasedBinaryOperator(
		System.Linq.Expressions.ExpressionType.Power, 
		left, 
		right, 
		method, 
		true
	);
};
System.Linq.Expressions.Expression.PowerAssign$0 = function (left, right) {
	return System.Linq.Expressions.Expression.PowerAssign$2(left, right, null, null);
};
System.Linq.Expressions.Expression.PowerAssign$1 = function (left, right, method) {
	return System.Linq.Expressions.Expression.PowerAssign$2(left, right, method, null);
};
System.Linq.Expressions.Expression.PowerAssign$2 = function (left, right, method, conversion) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(left, "left");
	System.Linq.Expressions.Expression.RequiresCanWrite(left, "left");
	System.Linq.Expressions.Expression.RequiresCanRead$0(right, "right");
	if (method === null) {
		var typeFromHandle = System.Math;
		method = typeFromHandle.GetMethod$4("Pow", (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
		if (method === null) {
			throw $asm08.System.Core.Error.BinaryOperatorNotDefined(System.Linq.Expressions.ExpressionType.PowerAssign, left.Type, right.Type);
		}
	}
	return System.Linq.Expressions.Expression.GetMethodBasedAssignOperator(
		System.Linq.Expressions.ExpressionType.PowerAssign, 
		left, 
		right, 
		method, 
		conversion, 
		true
	);
};
System.Linq.Expressions.Expression.ArrayIndex$0 = function (array, index) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(array, "array");
	System.Linq.Expressions.Expression.RequiresCanRead$0(index, "index");
	if (index.Type !== System.Int32) {
		throw $asm08.System.Core.Error.ArgumentMustBeArrayIndexType();
	}
	var type = array.Type;
	if (!type.IsArray) {
		throw $asm08.System.Core.Error.ArgumentMustBeArray();
	}
	if (type.GetArrayRank() !== 1) {
		throw $asm08.System.Core.Error.IncorrectNumberOfIndexes();
	}
	return new $asm08.System.Linq.Expressions.SimpleBinaryExpression(System.Linq.Expressions.ExpressionType.ArrayIndex, array, index, type.GetElementType());
};
System.Linq.Expressions.Expression.Block$0 = function (arg0, arg1) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(arg0, "arg0");
	System.Linq.Expressions.Expression.RequiresCanRead$0(arg1, "arg1");
	return new $asm08.System.Linq.Expressions.Block2(arg0, arg1);
};
System.Linq.Expressions.Expression.Block$1 = function (arg0, arg1, arg2) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(arg0, "arg0");
	System.Linq.Expressions.Expression.RequiresCanRead$0(arg1, "arg1");
	System.Linq.Expressions.Expression.RequiresCanRead$0(arg2, "arg2");
	return new $asm08.System.Linq.Expressions.Block3(arg0, arg1, arg2);
};
System.Linq.Expressions.Expression.Block$2 = function (arg0, arg1, arg2, arg3) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(arg0, "arg0");
	System.Linq.Expressions.Expression.RequiresCanRead$0(arg1, "arg1");
	System.Linq.Expressions.Expression.RequiresCanRead$0(arg2, "arg2");
	System.Linq.Expressions.Expression.RequiresCanRead$0(arg3, "arg3");
	return new $asm08.System.Linq.Expressions.Block4(arg0, arg1, arg2, arg3);
};
System.Linq.Expressions.Expression.Block$3 = function (arg0, arg1, arg2, arg3, arg4) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(arg0, "arg0");
	System.Linq.Expressions.Expression.RequiresCanRead$0(arg1, "arg1");
	System.Linq.Expressions.Expression.RequiresCanRead$0(arg2, "arg2");
	System.Linq.Expressions.Expression.RequiresCanRead$0(arg3, "arg3");
	System.Linq.Expressions.Expression.RequiresCanRead$0(arg4, "arg4");
	return new $asm08.System.Linq.Expressions.Block5(arg0, arg1, arg2, arg3, arg4);
};
System.Linq.Expressions.Expression.Block$4 = function (expressions) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(expressions, "expressions");
	switch (expressions.length) {
		case 2: 
			return System.Linq.Expressions.Expression.Block$0(expressions[0], expressions[1]);
		case 3: 
			return System.Linq.Expressions.Expression.Block$1(expressions[0], expressions[1], expressions[2]);
		case 4: 
			return System.Linq.Expressions.Expression.Block$2(expressions[0], expressions[1], expressions[2], expressions[3]);
		case 5: 
			return System.Linq.Expressions.Expression.Block$3(
				expressions[0], 
				expressions[1], 
				expressions[2], 
				expressions[3], 
				expressions[4]
			);
		default: 
			$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotEmpty$b1(System.Linq.Expressions.Expression)(JSIL.Cast(expressions, System.Collections.Generic.ICollection$b1.Of(System.Linq.Expressions.Expression)), "expressions");
			System.Linq.Expressions.Expression.RequiresCanRead$1(expressions, "expressions");
			return new $asm08.System.Linq.Expressions.BlockN(JSIL.Cast($asm08.System.Dynamic.Utils.CollectionExtensions.Copy$b1(System.Linq.Expressions.Expression)(expressions), System.Collections.Generic.IList$b1.Of(System.Linq.Expressions.Expression)));
	}
};
System.Linq.Expressions.Expression.Block$5 = function (expressions) {
	return System.Linq.Expressions.Expression.Block$10($asm08.System.Dynamic.Utils.EmptyReadOnlyCollection$b1.Of(System.Linq.Expressions.ParameterExpression).Instance, expressions);
};
System.Linq.Expressions.Expression.Block$6 = function (type, expressions) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(expressions, "expressions");
	return System.Linq.Expressions.Expression.Block$7(type, JSIL.Cast(expressions, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.Expression)));
};
System.Linq.Expressions.Expression.Block$7 = function (type, expressions) {
	return System.Linq.Expressions.Expression.Block$11(type, $asm08.System.Dynamic.Utils.EmptyReadOnlyCollection$b1.Of(System.Linq.Expressions.ParameterExpression).Instance, expressions);
};
System.Linq.Expressions.Expression.Block$8 = function (variables, expressions) {
	return System.Linq.Expressions.Expression.Block$10(variables, JSIL.Cast(expressions, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.Expression)));
};
System.Linq.Expressions.Expression.Block$9 = function (type, variables, expressions) {
	return System.Linq.Expressions.Expression.Block$11(type, variables, JSIL.Cast(expressions, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.Expression)));
};
System.Linq.Expressions.Expression.Block$10 = function (variables, expressions) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(expressions, "expressions");
	var readOnlyCollection = $asm08.System.Dynamic.Utils.CollectionExtensions.ToReadOnly$b1(System.Linq.Expressions.Expression)(expressions);
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotEmpty$b1(System.Linq.Expressions.Expression)(readOnlyCollection, "expressions");
	System.Linq.Expressions.Expression.RequiresCanRead$1(readOnlyCollection, "expressions");
	return System.Linq.Expressions.Expression.Block$11(System.Linq.Enumerable.Last$b1$0(System.Linq.Expressions.Expression)(readOnlyCollection).Type, variables, readOnlyCollection);
};
System.Linq.Expressions.Expression.Block$11 = function (type, variables, expressions) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(type, "type");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(expressions, "expressions");
	var readOnlyCollection = $asm08.System.Dynamic.Utils.CollectionExtensions.ToReadOnly$b1(System.Linq.Expressions.Expression)(expressions);
	var readOnlyCollection2 = $asm08.System.Dynamic.Utils.CollectionExtensions.ToReadOnly$b1(System.Linq.Expressions.ParameterExpression)(variables);
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotEmpty$b1(System.Linq.Expressions.Expression)(readOnlyCollection, "expressions");
	System.Linq.Expressions.Expression.RequiresCanRead$1(readOnlyCollection, "expressions");
	System.Linq.Expressions.Expression.ValidateVariables(readOnlyCollection2, "variables");
	var expression = System.Linq.Enumerable.Last$b1$0(System.Linq.Expressions.Expression)(readOnlyCollection);
	if (!((type === System.Void) || $asm08.System.Dynamic.Utils.TypeUtils.AreReferenceAssignable(type, expression.Type))) {
		throw $asm08.System.Core.Error.ArgumentTypesMustMatch();
	}
	if (!$asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(type, expression.Type)) {
		return new $asm08.System.Linq.Expressions.ScopeWithType(JSIL.Cast(readOnlyCollection2, System.Collections.Generic.IList$b1.Of(System.Linq.Expressions.ParameterExpression)), readOnlyCollection, type);
	}
	if (readOnlyCollection.Count === 1) {
		return new $asm08.System.Linq.Expressions.Scope1(JSIL.Cast(readOnlyCollection2, System.Collections.Generic.IList$b1.Of(System.Linq.Expressions.ParameterExpression)), readOnlyCollection.get_Item(0));
	}
	return new $asm08.System.Linq.Expressions.ScopeN(JSIL.Cast(readOnlyCollection2, System.Collections.Generic.IList$b1.Of(System.Linq.Expressions.ParameterExpression)), readOnlyCollection);
};
System.Linq.Expressions.Expression.ValidateVariables = function (varList, collectionName) {
	if (varList.Count === 0) {
		return;
	}
	var count = varList.Count;
	var set = JSIL.New($asm08.System.Linq.Expressions.Set$b1.Of(System.Linq.Expressions.ParameterExpression), "_ctor$4", [count]);
__loop0__: 
	for (var i = 0; i < count; ++i) {
		var parameterExpression = varList.get_Item(i);
		if (parameterExpression === null) {
			throw JSIL.New(System.ArgumentNullException, "_ctor$1", [System.String.Format(System.Globalization.CultureInfo.CurrentCulture, "{0}[{1}]", [collectionName, set.Count])]);
		}
		if (parameterExpression.IsByRef) {
			throw $asm08.System.Core.Error.VariableMustNotBeByRef(parameterExpression, parameterExpression.Type);
		}
		if (set.Contains(parameterExpression)) {
			throw $asm08.System.Core.Error.DuplicateVariable(parameterExpression);
		}
		set.Add(parameterExpression);
	}
};
System.Linq.Expressions.Expression.Catch$0 = function (type, body) {
	return System.Linq.Expressions.Expression.MakeCatchBlock(type, null, body, null);
};
System.Linq.Expressions.Expression.Catch$1 = function (variable, body) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(variable, "variable");
	return System.Linq.Expressions.Expression.MakeCatchBlock(variable.Type, variable, body, null);
};
System.Linq.Expressions.Expression.Catch$2 = function (type, body, filter) {
	return System.Linq.Expressions.Expression.MakeCatchBlock(type, null, body, filter);
};
System.Linq.Expressions.Expression.Catch$3 = function (variable, body, filter) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(variable, "variable");
	return System.Linq.Expressions.Expression.MakeCatchBlock(variable.Type, variable, body, filter);
};
System.Linq.Expressions.Expression.MakeCatchBlock = function (type, variable, body, filter) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(type, "type");
	$asm08.System.Dynamic.Utils.ContractUtils.Requires$1(((variable === null) || $asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(variable.Type, type)), "variable");
	if (!((variable === null) || !variable.IsByRef)) {
		throw $asm08.System.Core.Error.VariableMustNotBeByRef(variable, variable.Type);
	}
	System.Linq.Expressions.Expression.RequiresCanRead$0(body, "body");
	if (filter !== null) {
		System.Linq.Expressions.Expression.RequiresCanRead$0(filter, "filter");
		if (filter.Type !== System.Boolean) {
			throw $asm08.System.Core.Error.ArgumentMustBeBoolean();
		}
	}
	return new System.Linq.Expressions.CatchBlock(type, variable, body, filter);
};
System.Linq.Expressions.Expression.Condition$0 = function (test, ifTrue, ifFalse) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(test, "test");
	System.Linq.Expressions.Expression.RequiresCanRead$0(ifTrue, "ifTrue");
	System.Linq.Expressions.Expression.RequiresCanRead$0(ifFalse, "ifFalse");
	if (test.Type !== System.Boolean) {
		throw $asm08.System.Core.Error.ArgumentMustBeBoolean();
	}
	if (!$asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(ifTrue.Type, ifFalse.Type)) {
		throw $asm08.System.Core.Error.ArgumentTypesMustMatch();
	}
	return System.Linq.Expressions.ConditionalExpression.Make(test, ifTrue, ifFalse, ifTrue.Type);
};
System.Linq.Expressions.Expression.Condition$1 = function (test, ifTrue, ifFalse, type) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(test, "test");
	System.Linq.Expressions.Expression.RequiresCanRead$0(ifTrue, "ifTrue");
	System.Linq.Expressions.Expression.RequiresCanRead$0(ifFalse, "ifFalse");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(type, "type");
	if (test.Type !== System.Boolean) {
		throw $asm08.System.Core.Error.ArgumentMustBeBoolean();
	}
	if (!((type === System.Void) || ($asm08.System.Dynamic.Utils.TypeUtils.AreReferenceAssignable(type, ifTrue.Type) && 
				$asm08.System.Dynamic.Utils.TypeUtils.AreReferenceAssignable(type, ifFalse.Type)))) {
		throw $asm08.System.Core.Error.ArgumentTypesMustMatch();
	}
	return System.Linq.Expressions.ConditionalExpression.Make(test, ifTrue, ifFalse, type);
};
System.Linq.Expressions.Expression.IfThen = function (test, ifTrue) {
	return System.Linq.Expressions.Expression.Condition$1(test, ifTrue, System.Linq.Expressions.Expression.Empty(), System.Void);
};
System.Linq.Expressions.Expression.IfThenElse = function (test, ifTrue, ifFalse) {
	return System.Linq.Expressions.Expression.Condition$1(test, ifTrue, ifFalse, System.Void);
};
System.Linq.Expressions.Expression.Constant$0 = function (value) {
	return System.Linq.Expressions.ConstantExpression.Make(value, (value === null) ? System.Object : JSIL.GetType(value));
};
System.Linq.Expressions.Expression.Constant$1 = function (value, type) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(type, "type");
	if (!(value || 
			!type.IsValueType || $asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(type))) {
		throw $asm08.System.Core.Error.ArgumentTypesMustMatch();
	}
	if (!((value === null) || type.IsAssignableFrom(JSIL.GetType(value)))) {
		throw $asm08.System.Core.Error.ArgumentTypesMustMatch();
	}
	return System.Linq.Expressions.ConstantExpression.Make(value, type);
};
System.Linq.Expressions.Expression.DebugInfo = function (document, startLine, startColumn, endLine, endColumn) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(document, "document");
	if (!((startLine !== 16707566) || 
			(startColumn !== 0) || 
			(endLine !== 16707566) || (endColumn !== 0))) {
		return new $asm08.System.Linq.Expressions.ClearDebugInfoExpression(document);
	}
	System.Linq.Expressions.Expression.ValidateSpan(startLine, startColumn, endLine, endColumn);
	return new $asm08.System.Linq.Expressions.SpanDebugInfoExpression(document, startLine, startColumn, endLine, endColumn);
};
System.Linq.Expressions.Expression.ClearDebugInfo = function (document) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(document, "document");
	return new $asm08.System.Linq.Expressions.ClearDebugInfoExpression(document);
};
System.Linq.Expressions.Expression.ValidateSpan = function (startLine, startColumn, endLine, endColumn) {
	if (startLine < 1) {
		throw $asm08.System.Core.Error.OutOfRange("startLine", 1);
	}
	if (startColumn < 1) {
		throw $asm08.System.Core.Error.OutOfRange("startColumn", 1);
	}
	if (endLine < 1) {
		throw $asm08.System.Core.Error.OutOfRange("endLine", 1);
	}
	if (endColumn < 1) {
		throw $asm08.System.Core.Error.OutOfRange("endColumn", 1);
	}
	if (startLine > endLine) {
		throw $asm08.System.Core.Error.StartEndMustBeOrdered();
	}
	if (!((startLine !== endLine) || (startColumn <= endColumn))) {
		throw $asm08.System.Core.Error.StartEndMustBeOrdered();
	}
};
System.Linq.Expressions.Expression.Empty = function () {
	return new System.Linq.Expressions.DefaultExpression(System.Void);
};
System.Linq.Expressions.Expression.Default = function (type) {
	if (type === System.Void) {
		return System.Linq.Expressions.Expression.Empty();
	}
	return new System.Linq.Expressions.DefaultExpression(type);
};
System.Linq.Expressions.Expression.MakeDynamic$0 = function (delegateType, binder, arguments) {
	return System.Linq.Expressions.Expression.MakeDynamic$1(delegateType, binder, JSIL.Cast(arguments, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.Expression)));
};
System.Linq.Expressions.Expression.MakeDynamic$1 = function (delegateType, binder, arguments) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(delegateType, "delegateType");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(binder, "binder");
	if (!delegateType.IsSubclassOf(System.Delegate)) {
		throw $asm08.System.Core.Error.TypeMustBeDerivedFromSystemDelegate();
	}
	var validMethodForDynamic = System.Linq.Expressions.Expression.GetValidMethodForDynamic(delegateType);
	var arguments2 = new JSIL.Variable($asm08.System.Dynamic.Utils.CollectionExtensions.ToReadOnly$b1(System.Linq.Expressions.Expression)(arguments));
	System.Linq.Expressions.Expression.ValidateArgumentTypes(validMethodForDynamic, System.Linq.Expressions.ExpressionType.Dynamic, /* ref */ arguments2);
	return System.Linq.Expressions.DynamicExpression.Make$0($asm08.System.Dynamic.Utils.TypeExtensions.GetReturnType(validMethodForDynamic), delegateType, binder, arguments2.value);
};
System.Linq.Expressions.Expression.MakeDynamic$2 = function (delegateType, binder, arg0) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(delegateType, "delegatType");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(binder, "binder");
	if (!delegateType.IsSubclassOf(System.Delegate)) {
		throw $asm08.System.Core.Error.TypeMustBeDerivedFromSystemDelegate();
	}
	var validMethodForDynamic = System.Linq.Expressions.Expression.GetValidMethodForDynamic(delegateType);
	var parametersCached = $asm08.System.Dynamic.Utils.TypeExtensions.GetParametersCached(validMethodForDynamic);
	System.Linq.Expressions.Expression.ValidateArgumentCount(validMethodForDynamic, System.Linq.Expressions.ExpressionType.Dynamic, 2, parametersCached);
	System.Linq.Expressions.Expression.ValidateDynamicArgument(arg0);
	System.Linq.Expressions.Expression.ValidateOneArgument(validMethodForDynamic, System.Linq.Expressions.ExpressionType.Dynamic, arg0, parametersCached[1]);
	return System.Linq.Expressions.DynamicExpression.Make$1($asm08.System.Dynamic.Utils.TypeExtensions.GetReturnType(validMethodForDynamic), delegateType, binder, arg0);
};
System.Linq.Expressions.Expression.MakeDynamic$3 = function (delegateType, binder, arg0, arg1) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(delegateType, "delegatType");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(binder, "binder");
	if (!delegateType.IsSubclassOf(System.Delegate)) {
		throw $asm08.System.Core.Error.TypeMustBeDerivedFromSystemDelegate();
	}
	var validMethodForDynamic = System.Linq.Expressions.Expression.GetValidMethodForDynamic(delegateType);
	var parametersCached = $asm08.System.Dynamic.Utils.TypeExtensions.GetParametersCached(validMethodForDynamic);
	System.Linq.Expressions.Expression.ValidateArgumentCount(validMethodForDynamic, System.Linq.Expressions.ExpressionType.Dynamic, 3, parametersCached);
	System.Linq.Expressions.Expression.ValidateDynamicArgument(arg0);
	System.Linq.Expressions.Expression.ValidateOneArgument(validMethodForDynamic, System.Linq.Expressions.ExpressionType.Dynamic, arg0, parametersCached[1]);
	System.Linq.Expressions.Expression.ValidateDynamicArgument(arg1);
	System.Linq.Expressions.Expression.ValidateOneArgument(validMethodForDynamic, System.Linq.Expressions.ExpressionType.Dynamic, arg1, parametersCached[2]);
	return System.Linq.Expressions.DynamicExpression.Make$2(
		$asm08.System.Dynamic.Utils.TypeExtensions.GetReturnType(validMethodForDynamic), 
		delegateType, 
		binder, 
		arg0, 
		arg1
	);
};
System.Linq.Expressions.Expression.MakeDynamic$4 = function (delegateType, binder, arg0, arg1, arg2) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(delegateType, "delegatType");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(binder, "binder");
	if (!delegateType.IsSubclassOf(System.Delegate)) {
		throw $asm08.System.Core.Error.TypeMustBeDerivedFromSystemDelegate();
	}
	var validMethodForDynamic = System.Linq.Expressions.Expression.GetValidMethodForDynamic(delegateType);
	var parametersCached = $asm08.System.Dynamic.Utils.TypeExtensions.GetParametersCached(validMethodForDynamic);
	System.Linq.Expressions.Expression.ValidateArgumentCount(validMethodForDynamic, System.Linq.Expressions.ExpressionType.Dynamic, 4, parametersCached);
	System.Linq.Expressions.Expression.ValidateDynamicArgument(arg0);
	System.Linq.Expressions.Expression.ValidateOneArgument(validMethodForDynamic, System.Linq.Expressions.ExpressionType.Dynamic, arg0, parametersCached[1]);
	System.Linq.Expressions.Expression.ValidateDynamicArgument(arg1);
	System.Linq.Expressions.Expression.ValidateOneArgument(validMethodForDynamic, System.Linq.Expressions.ExpressionType.Dynamic, arg1, parametersCached[2]);
	System.Linq.Expressions.Expression.ValidateDynamicArgument(arg2);
	System.Linq.Expressions.Expression.ValidateOneArgument(validMethodForDynamic, System.Linq.Expressions.ExpressionType.Dynamic, arg2, parametersCached[3]);
	return System.Linq.Expressions.DynamicExpression.Make$3(
		$asm08.System.Dynamic.Utils.TypeExtensions.GetReturnType(validMethodForDynamic), 
		delegateType, 
		binder, 
		arg0, 
		arg1, 
		arg2
	);
};
System.Linq.Expressions.Expression.MakeDynamic$5 = function (delegateType, binder, arg0, arg1, arg2, arg3) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(delegateType, "delegatType");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(binder, "binder");
	if (!delegateType.IsSubclassOf(System.Delegate)) {
		throw $asm08.System.Core.Error.TypeMustBeDerivedFromSystemDelegate();
	}
	var validMethodForDynamic = System.Linq.Expressions.Expression.GetValidMethodForDynamic(delegateType);
	var parametersCached = $asm08.System.Dynamic.Utils.TypeExtensions.GetParametersCached(validMethodForDynamic);
	System.Linq.Expressions.Expression.ValidateArgumentCount(validMethodForDynamic, System.Linq.Expressions.ExpressionType.Dynamic, 5, parametersCached);
	System.Linq.Expressions.Expression.ValidateDynamicArgument(arg0);
	System.Linq.Expressions.Expression.ValidateOneArgument(validMethodForDynamic, System.Linq.Expressions.ExpressionType.Dynamic, arg0, parametersCached[1]);
	System.Linq.Expressions.Expression.ValidateDynamicArgument(arg1);
	System.Linq.Expressions.Expression.ValidateOneArgument(validMethodForDynamic, System.Linq.Expressions.ExpressionType.Dynamic, arg1, parametersCached[2]);
	System.Linq.Expressions.Expression.ValidateDynamicArgument(arg2);
	System.Linq.Expressions.Expression.ValidateOneArgument(validMethodForDynamic, System.Linq.Expressions.ExpressionType.Dynamic, arg2, parametersCached[3]);
	System.Linq.Expressions.Expression.ValidateDynamicArgument(arg3);
	System.Linq.Expressions.Expression.ValidateOneArgument(validMethodForDynamic, System.Linq.Expressions.ExpressionType.Dynamic, arg3, parametersCached[4]);
	return System.Linq.Expressions.DynamicExpression.Make$4(
		$asm08.System.Dynamic.Utils.TypeExtensions.GetReturnType(validMethodForDynamic), 
		delegateType, 
		binder, 
		arg0, 
		arg1, 
		arg2, 
		arg3
	);
};
System.Linq.Expressions.Expression.GetValidMethodForDynamic = function (delegateType) {
	var method = delegateType.GetMethod$5("Invoke");
	var parametersCached = $asm08.System.Dynamic.Utils.TypeExtensions.GetParametersCached(method);
	if (!((parametersCached.length !== 0) && (parametersCached[0].ParameterType === System.Runtime.CompilerServices.CallSite))) {
		throw $asm08.System.Core.Error.FirstArgumentMustBeCallSite();
	}
	return method;
};
System.Linq.Expressions.Expression.Dynamic$0 = function (binder, returnType, arguments) {
	return System.Linq.Expressions.Expression.Dynamic$5(binder, returnType, JSIL.Cast(arguments, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.Expression)));
};
System.Linq.Expressions.Expression.Dynamic$1 = function (binder, returnType, arg0) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(binder, "binder");
	System.Linq.Expressions.Expression.ValidateDynamicArgument(arg0);
	var nextTypeInfo = $asm08.System.Linq.Expressions.Compiler.DelegateHelpers.GetNextTypeInfo(returnType, $asm08.System.Linq.Expressions.Compiler.DelegateHelpers.GetNextTypeInfo(arg0.Type, $asm08.System.Linq.Expressions.Compiler.DelegateHelpers.NextTypeInfo$0(System.Runtime.CompilerServices.CallSite)));
	var type = nextTypeInfo.DelegateType;
	if (type === null) {
		type = nextTypeInfo.MakeDelegateType$0(returnType, JSIL.Array.New(System.Linq.Expressions.Expression, [arg0]));
	}
	return System.Linq.Expressions.DynamicExpression.Make$1(returnType, type, binder, arg0);
};
System.Linq.Expressions.Expression.Dynamic$2 = function (binder, returnType, arg0, arg1) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(binder, "binder");
	System.Linq.Expressions.Expression.ValidateDynamicArgument(arg0);
	System.Linq.Expressions.Expression.ValidateDynamicArgument(arg1);
	var nextTypeInfo = $asm08.System.Linq.Expressions.Compiler.DelegateHelpers.GetNextTypeInfo(returnType, $asm08.System.Linq.Expressions.Compiler.DelegateHelpers.GetNextTypeInfo(arg1.Type, $asm08.System.Linq.Expressions.Compiler.DelegateHelpers.GetNextTypeInfo(arg0.Type, $asm08.System.Linq.Expressions.Compiler.DelegateHelpers.NextTypeInfo$0(System.Runtime.CompilerServices.CallSite))));
	var type = nextTypeInfo.DelegateType;
	if (type === null) {
		type = nextTypeInfo.MakeDelegateType$0(returnType, JSIL.Array.New(System.Linq.Expressions.Expression, [arg0, arg1]));
	}
	return System.Linq.Expressions.DynamicExpression.Make$2(
		returnType, 
		type, 
		binder, 
		arg0, 
		arg1
	);
};
System.Linq.Expressions.Expression.Dynamic$3 = function (binder, returnType, arg0, arg1, arg2) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(binder, "binder");
	System.Linq.Expressions.Expression.ValidateDynamicArgument(arg0);
	System.Linq.Expressions.Expression.ValidateDynamicArgument(arg1);
	System.Linq.Expressions.Expression.ValidateDynamicArgument(arg2);
	var nextTypeInfo = $asm08.System.Linq.Expressions.Compiler.DelegateHelpers.GetNextTypeInfo(returnType, $asm08.System.Linq.Expressions.Compiler.DelegateHelpers.GetNextTypeInfo(arg2.Type, $asm08.System.Linq.Expressions.Compiler.DelegateHelpers.GetNextTypeInfo(arg1.Type, $asm08.System.Linq.Expressions.Compiler.DelegateHelpers.GetNextTypeInfo(arg0.Type, $asm08.System.Linq.Expressions.Compiler.DelegateHelpers.NextTypeInfo$0(System.Runtime.CompilerServices.CallSite)))));
	var type = nextTypeInfo.DelegateType;
	if (type === null) {
		type = nextTypeInfo.MakeDelegateType$0(returnType, JSIL.Array.New(System.Linq.Expressions.Expression, [arg0, arg1, arg2]));
	}
	return System.Linq.Expressions.DynamicExpression.Make$3(
		returnType, 
		type, 
		binder, 
		arg0, 
		arg1, 
		arg2
	);
};
System.Linq.Expressions.Expression.Dynamic$4 = function (binder, returnType, arg0, arg1, arg2, arg3) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(binder, "binder");
	System.Linq.Expressions.Expression.ValidateDynamicArgument(arg0);
	System.Linq.Expressions.Expression.ValidateDynamicArgument(arg1);
	System.Linq.Expressions.Expression.ValidateDynamicArgument(arg2);
	System.Linq.Expressions.Expression.ValidateDynamicArgument(arg3);
	var nextTypeInfo = $asm08.System.Linq.Expressions.Compiler.DelegateHelpers.GetNextTypeInfo(returnType, $asm08.System.Linq.Expressions.Compiler.DelegateHelpers.GetNextTypeInfo(arg3.Type, $asm08.System.Linq.Expressions.Compiler.DelegateHelpers.GetNextTypeInfo(arg2.Type, $asm08.System.Linq.Expressions.Compiler.DelegateHelpers.GetNextTypeInfo(arg1.Type, $asm08.System.Linq.Expressions.Compiler.DelegateHelpers.GetNextTypeInfo(arg0.Type, $asm08.System.Linq.Expressions.Compiler.DelegateHelpers.NextTypeInfo$0(System.Runtime.CompilerServices.CallSite))))));
	var type = nextTypeInfo.DelegateType;
	if (type === null) {
		type = nextTypeInfo.MakeDelegateType$0(returnType, JSIL.Array.New(System.Linq.Expressions.Expression, [arg0, arg1, arg2, arg3]));
	}
	return System.Linq.Expressions.DynamicExpression.Make$4(
		returnType, 
		type, 
		binder, 
		arg0, 
		arg1, 
		arg2, 
		arg3
	);
};
System.Linq.Expressions.Expression.Dynamic$5 = function (binder, returnType, arguments) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(arguments, "arguments");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(returnType, "returnType");
	var readOnlyCollection = $asm08.System.Dynamic.Utils.CollectionExtensions.ToReadOnly$b1(System.Linq.Expressions.Expression)(arguments);
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotEmpty$b1(System.Linq.Expressions.Expression)(readOnlyCollection, "args");
	return System.Linq.Expressions.Expression.MakeDynamic$6(binder, returnType, readOnlyCollection);
};
System.Linq.Expressions.Expression.MakeDynamic$6 = function (binder, returnType, args) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(binder, "binder");
__loop0__: 
	for (var i = 0; i < args.Count; ++i) {
		var arg = args.get_Item(i);
		System.Linq.Expressions.Expression.ValidateDynamicArgument(arg);
	}
	var delegateType = $asm08.System.Linq.Expressions.Compiler.DelegateHelpers.MakeCallSiteDelegate(args, returnType);
	switch (args.Count) {
		case 1: 
			return System.Linq.Expressions.DynamicExpression.Make$1(returnType, delegateType, binder, args.get_Item(0));
		case 2: 
			return System.Linq.Expressions.DynamicExpression.Make$2(
				returnType, 
				delegateType, 
				binder, 
				args.get_Item(0), 
				args.get_Item(1)
			);
		case 3: 
			return System.Linq.Expressions.DynamicExpression.Make$3(
				returnType, 
				delegateType, 
				binder, 
				args.get_Item(0), 
				args.get_Item(1), 
				args.get_Item(2)
			);
		case 4: 
			return System.Linq.Expressions.DynamicExpression.Make$4(
				returnType, 
				delegateType, 
				binder, 
				args.get_Item(0), 
				args.get_Item(1), 
				args.get_Item(2), 
				args.get_Item(3)
			);
		default: 
			return System.Linq.Expressions.DynamicExpression.Make$0(returnType, delegateType, binder, args);
	}
};
System.Linq.Expressions.Expression.ValidateDynamicArgument = function (arg) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(arg, "arguments");
	var type = arg.Type;
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(type, "type");
	$asm08.System.Dynamic.Utils.TypeUtils.ValidateType(type);
	if (type === System.Void) {
		throw $asm08.System.Core.Error.ArgumentTypeCannotBeVoid();
	}
};
System.Linq.Expressions.Expression.ElementInit$0 = function (addMethod, arguments) {
	return System.Linq.Expressions.Expression.ElementInit$1(addMethod, arguments);
};
System.Linq.Expressions.Expression.ElementInit$1 = function (addMethod, arguments) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(addMethod, "addMethod");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(arguments, "arguments");
	var readOnlyCollection = new JSIL.Variable($asm08.System.Dynamic.Utils.CollectionExtensions.ToReadOnly$b1(System.Linq.Expressions.Expression)(arguments));
	System.Linq.Expressions.Expression.RequiresCanRead$1(readOnlyCollection.value, "arguments");
	System.Linq.Expressions.Expression.ValidateElementInitAddMethodInfo(addMethod);
	System.Linq.Expressions.Expression.ValidateArgumentTypes(addMethod, System.Linq.Expressions.ExpressionType.Call, /* ref */ readOnlyCollection);
	return new System.Linq.Expressions.ElementInit(addMethod, readOnlyCollection.value);
};
System.Linq.Expressions.Expression.ValidateElementInitAddMethodInfo = function (addMethod) {
	System.Linq.Expressions.Expression.ValidateMethodInfo(addMethod);
	var parametersCached = $asm08.System.Dynamic.Utils.TypeExtensions.GetParametersCached(addMethod);
	if (parametersCached.length === 0) {
		throw $asm08.System.Core.Error.ElementInitializerMethodWithZeroArgs();
	}
	if (!addMethod.Name.Equals$2("Add", System.StringComparison.OrdinalIgnoreCase)) {
		throw $asm08.System.Core.Error.ElementInitializerMethodNotAdd();
	}
	if (addMethod.IsStatic) {
		throw $asm08.System.Core.Error.ElementInitializerMethodStatic();
	}
	var array = parametersCached;
__loop0__: 
	for (var i = 0; i < array.length; ++i) {
		var parameterInfo = array[i];
		if (parameterInfo.ParameterType.IsByRef) {
			throw $asm08.System.Core.Error.ElementInitializerMethodNoRefOutParam(parameterInfo.Name, addMethod.Name);
		}
	}
};
System.Linq.Expressions.Expression.prototype._ctor$0 = function (nodeType, type) {
	System.Object.prototype._ctor.call(this);
	if (System.Linq.Expressions.Expression._legacyCtorSupportTable === null) {
		System.Threading.Interlocked.CompareExchange$b1(System.Runtime.CompilerServices.ConditionalWeakTable$b2.Of(System.Linq.Expressions.Expression, $asm08.System.Linq.Expressions.Expression.ExtensionInfo))(/* ref */ new JSIL.MemberReference(System.Linq.Expressions.Expression, "_legacyCtorSupportTable"), new (System.Runtime.CompilerServices.ConditionalWeakTable$b2.Of(System.Linq.Expressions.Expression, $asm08.System.Linq.Expressions.Expression.ExtensionInfo)) (), null);
	}
	System.Linq.Expressions.Expression._legacyCtorSupportTable.Add(this, new $asm08.System.Linq.Expressions.Expression.ExtensionInfo(nodeType, type));
};
System.Linq.Expressions.Expression.prototype._ctor$1 = function () {
	System.Object.prototype._ctor.call(this);
};
System.Linq.Expressions.Expression.prototype.get_NodeType = function () {
	var extensionInfo = new JSIL.Variable(null);
	if (!((System.Linq.Expressions.Expression._legacyCtorSupportTable === null) || !System.Linq.Expressions.Expression._legacyCtorSupportTable.TryGetValue(this, /* ref */ extensionInfo))) {
		return extensionInfo.value.NodeType;
	}
	throw $asm08.System.Core.Error.ExtensionNodeMustOverrideProperty("Expression.NodeType");
};
System.Linq.Expressions.Expression.prototype.get_Type = function () {
	var extensionInfo = new JSIL.Variable(null);
	if (!((System.Linq.Expressions.Expression._legacyCtorSupportTable === null) || !System.Linq.Expressions.Expression._legacyCtorSupportTable.TryGetValue(this, /* ref */ extensionInfo))) {
		return extensionInfo.value.Type;
	}
	throw $asm08.System.Core.Error.ExtensionNodeMustOverrideProperty("Expression.Type");
};
System.Linq.Expressions.Expression.prototype.get_CanReduce = function () {
	return false;
};
System.Linq.Expressions.Expression.prototype.Reduce = function () {
	if (this.CanReduce) {
		throw $asm08.System.Core.Error.ReducibleMustOverrideReduce();
	}
	return this;
};
System.Linq.Expressions.Expression.prototype.VisitChildren = function (visitor) {
	if (!this.CanReduce) {
		throw $asm08.System.Core.Error.MustBeReducible();
	}
	return visitor.Visit$0(this.ReduceAndCheck());
};
System.Linq.Expressions.Expression.prototype.Accept = function (visitor) {
	return visitor.VisitExtension(this);
};
System.Linq.Expressions.Expression.prototype.ReduceAndCheck = function () {
	if (!this.CanReduce) {
		throw $asm08.System.Core.Error.MustBeReducible();
	}
	var expression = this.Reduce();
	if (!((expression !== null) && (expression !== this))) {
		throw $asm08.System.Core.Error.MustReduceToDifferent();
	}
	if (!$asm08.System.Dynamic.Utils.TypeUtils.AreReferenceAssignable(this.Type, expression.Type)) {
		throw $asm08.System.Core.Error.ReducedNotCompatible();
	}
	return expression;
};
System.Linq.Expressions.Expression.prototype.ReduceExtensions = function () {
__loop0__: 
	for (var expression = this; expression.NodeType === System.Linq.Expressions.ExpressionType.Extension; expression = expression.ReduceAndCheck()) {
	}
	return expression;
};
System.Linq.Expressions.Expression.prototype.toString = function () {
	return $asm08.System.Linq.Expressions.ExpressionStringBuilder.ExpressionToString(this);
};
System.Linq.Expressions.Expression.prototype.get_DebugView = function () {
	var stringWriter = JSIL.New(System.IO.StringWriter, "_ctor$1", [System.Globalization.CultureInfo.CurrentCulture]);
	try {
		$asm08.System.Linq.Expressions.DebugViewWriter.WriteTo(this, stringWriter);
		var result = stringWriter.toString();
	} finally {
		if (stringWriter !== null) {
			stringWriter.IDisposable_Dispose();
		}
	}
	return result;
};
System.Linq.Expressions.Expression.ReturnReadOnly$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, /* ref */ collection) {
		var list = collection.value;
		var readOnlyCollection = JSIL.TryCast(list, System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(T));
		if (readOnlyCollection !== null) {
			return readOnlyCollection;
		}
		System.Threading.Interlocked.CompareExchange$b1(System.Collections.Generic.IList$b1.Of(T))(/* ref */ collection, $asm08.System.Dynamic.Utils.CollectionExtensions.ToReadOnly$b1(T)(list), list);
		return JSIL.Cast(collection.value, System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(T));
	}
);
System.Linq.Expressions.Expression.ReturnReadOnly = function (provider, /* ref */ collection) {
	var expression = JSIL.TryCast(collection.value, System.Linq.Expressions.Expression);
	if (expression !== null) {
		System.Threading.Interlocked.CompareExchange(/* ref */ collection, new (System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(System.Linq.Expressions.Expression)) (new $asm08.System.Linq.Expressions.ListArgumentProvider(provider, expression)), expression);
	}
	return JSIL.Cast(collection.value, System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(System.Linq.Expressions.Expression));
};
System.Linq.Expressions.Expression.ReturnObject$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, collectionOrT) {
		var t = JSIL.Cast(JSIL.TryCast(collectionOrT, T), T);
		if (t !== null) {
			return t;
		}
		return JSIL.Cast(collectionOrT, System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(T)).get_Item(0);
	}
);
System.Linq.Expressions.Expression.RequiresCanRead$0 = function (expression, paramName) {
	if (expression === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", [paramName]);
	}
	var nodeType = expression.NodeType;
	if (nodeType !== System.Linq.Expressions.ExpressionType.MemberAccess) {
		if (nodeType !== System.Linq.Expressions.ExpressionType.Index) {
			return;
		}
		var indexExpression = JSIL.Cast(expression, System.Linq.Expressions.IndexExpression);
		if (!((indexExpression.Indexer === null) || indexExpression.Indexer.CanRead)) {
			throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm08.System.Core.Strings.ExpressionMustBeReadable, paramName]);
		}
	} else {
		var memberExpression = JSIL.Cast(expression, System.Linq.Expressions.MemberExpression);
		var member = memberExpression.Member;
		if (member.MemberType === System.Reflection.MemberTypes.Property) {
			var propertyInfo = JSIL.Cast(member, System.Reflection.PropertyInfo);
			if (!propertyInfo.CanRead) {
				throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm08.System.Core.Strings.ExpressionMustBeReadable, paramName]);
			}
		}
	}
};
System.Linq.Expressions.Expression.RequiresCanRead$1 = function (items, paramName) {
	if (items !== null) {
		var list = JSIL.TryCast(items, System.Collections.Generic.IList$b1.Of(System.Linq.Expressions.Expression));
		if (list !== null) {
		__loop0__: 
			for (var i = 0; i < list.ICollection$b1_Count; ++i) {
				System.Linq.Expressions.Expression.RequiresCanRead$0(list.IList$b1_get_Item(i), paramName);
			}
			return;
		}
		var enumerator = items.IEnumerable$b1_GetEnumerator();
		try {
		__loop1__: 
			while (enumerator.IEnumerator_MoveNext()) {
				var current = enumerator.IEnumerator$b1_Current;
				System.Linq.Expressions.Expression.RequiresCanRead$0(current, paramName);
			}
		} finally {
			if (enumerator !== null) {
				enumerator.IDisposable_Dispose();
			}
		}
	}
};
System.Linq.Expressions.Expression.RequiresCanWrite = function (expression, paramName) {
	if (expression === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", [paramName]);
	}
	var flag = false;
	var nodeType = expression.NodeType;
	if (nodeType !== System.Linq.Expressions.ExpressionType.MemberAccess) {
		if (nodeType !== System.Linq.Expressions.ExpressionType.Parameter) {
			if (nodeType === System.Linq.Expressions.ExpressionType.Index) {
				var indexExpression = JSIL.Cast(expression, System.Linq.Expressions.IndexExpression);
				flag = ((indexExpression.Indexer === null) || 
					indexExpression.Indexer.CanWrite);
			}
		} else {
			flag = true;
		}
	} else {
		var memberExpression = JSIL.Cast(expression, System.Linq.Expressions.MemberExpression);
		var memberType = memberExpression.Member.MemberType;
		if (memberType !== System.Reflection.MemberTypes.Field) {
			if (memberType === System.Reflection.MemberTypes.Property) {
				var propertyInfo = JSIL.Cast(memberExpression.Member, System.Reflection.PropertyInfo);
				flag = propertyInfo.CanWrite;
			}
		} else {
			var fieldInfo = JSIL.Cast(memberExpression.Member, System.Reflection.FieldInfo);
			flag = (!fieldInfo.IsInitOnly && 
				!fieldInfo.IsLiteral);
		}
	}
	if (!flag) {
		throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm08.System.Core.Strings.ExpressionMustBeWriteable, paramName]);
	}
};
System.Linq.Expressions.Expression.Break$0 = function (target) {
	return System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind.Break, target, null, System.Void);
};
System.Linq.Expressions.Expression.Break$1 = function (target, value) {
	return System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind.Break, target, value, System.Void);
};
System.Linq.Expressions.Expression.Break$2 = function (target, type) {
	return System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind.Break, target, null, type);
};
System.Linq.Expressions.Expression.Break$3 = function (target, value, type) {
	return System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind.Break, target, value, type);
};
System.Linq.Expressions.Expression.Continue$0 = function (target) {
	return System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind.Continue, target, null, System.Void);
};
System.Linq.Expressions.Expression.Continue$1 = function (target, type) {
	return System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind.Continue, target, null, type);
};
System.Linq.Expressions.Expression.Return$0 = function (target) {
	return System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind.Return, target, null, System.Void);
};
System.Linq.Expressions.Expression.Return$1 = function (target, type) {
	return System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind.Return, target, null, type);
};
System.Linq.Expressions.Expression.Return$2 = function (target, value) {
	return System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind.Return, target, value, System.Void);
};
System.Linq.Expressions.Expression.Return$3 = function (target, value, type) {
	return System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind.Return, target, value, type);
};
System.Linq.Expressions.Expression.Goto$0 = function (target) {
	return System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind.Goto, target, null, System.Void);
};
System.Linq.Expressions.Expression.Goto$1 = function (target, type) {
	return System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind.Goto, target, null, type);
};
System.Linq.Expressions.Expression.Goto$2 = function (target, value) {
	return System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind.Goto, target, value, System.Void);
};
System.Linq.Expressions.Expression.Goto$3 = function (target, value, type) {
	return System.Linq.Expressions.Expression.MakeGoto(System.Linq.Expressions.GotoExpressionKind.Goto, target, value, type);
};
System.Linq.Expressions.Expression.MakeGoto = function (kind, target, $value, type) {
	var value = new JSIL.Variable($value);
	System.Linq.Expressions.Expression.ValidateGoto(target, /* ref */ value, "target", "value");
	return new System.Linq.Expressions.GotoExpression(kind, target, value.value, type);
};
System.Linq.Expressions.Expression.ValidateGoto = function (target, /* ref */ value, targetParameter, valueParameter) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(target, targetParameter);
	if (value.value === null) {
		if (target.Type !== System.Void) {
			throw $asm08.System.Core.Error.LabelMustBeVoidOrHaveExpression();
		}
	} else {
		System.Linq.Expressions.Expression.ValidateGotoType(target.Type, /* ref */ value, valueParameter);
	}
};
System.Linq.Expressions.Expression.ValidateGotoType = function (expectedType, /* ref */ value, paramName) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(value.value, paramName);
	if (!((expectedType === System.Void) || 
			$asm08.System.Dynamic.Utils.TypeUtils.AreReferenceAssignable(expectedType, value.value.Type) || System.Linq.Expressions.Expression.TryQuote(expectedType, /* ref */ value))) {
		throw $asm08.System.Core.Error.ExpressionTypeDoesNotMatchLabel(value.value.Type, expectedType);
	}
};
System.Linq.Expressions.Expression.MakeIndex = function (instance, indexer, arguments) {
	if (indexer !== null) {
		return System.Linq.Expressions.Expression.Property$2(instance, indexer, arguments);
	}
	return System.Linq.Expressions.Expression.ArrayAccess$1(instance, arguments);
};
System.Linq.Expressions.Expression.ArrayAccess$0 = function (array, indexes) {
	return System.Linq.Expressions.Expression.ArrayAccess$1(array, JSIL.Cast(indexes, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.Expression)));
};
System.Linq.Expressions.Expression.ArrayAccess$1 = function (array, indexes) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(array, "array");
	var type = array.Type;
	if (!type.IsArray) {
		throw $asm08.System.Core.Error.ArgumentMustBeArray();
	}
	var readOnlyCollection = $asm08.System.Dynamic.Utils.CollectionExtensions.ToReadOnly$b1(System.Linq.Expressions.Expression)(indexes);
	if (type.GetArrayRank() !== readOnlyCollection.Count) {
		throw $asm08.System.Core.Error.IncorrectNumberOfIndexes();
	}
	var enumerator = readOnlyCollection.GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current;
			System.Linq.Expressions.Expression.RequiresCanRead$0(current, "indexes");
			if (current.Type !== System.Int32) {
				throw $asm08.System.Core.Error.ArgumentMustBeArrayIndexType();
			}
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	return new System.Linq.Expressions.IndexExpression(array, null, readOnlyCollection);
};
System.Linq.Expressions.Expression.Property$0 = function (instance, propertyName, arguments) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(instance, "instance");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(propertyName, "indexerName");
	var indexer = System.Linq.Expressions.Expression.FindInstanceProperty(instance.Type, propertyName, arguments);
	return System.Linq.Expressions.Expression.Property$1(instance, indexer, arguments);
};
System.Linq.Expressions.Expression.FindInstanceProperty = function (type, propertyName, arguments) {
	var flags = (System.Reflection.BindingFlags.FlattenHierarchy | System.Reflection.BindingFlags.IgnoreCase | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public);
	var propertyInfo = System.Linq.Expressions.Expression.FindProperty(type, propertyName, arguments, flags);
	if (propertyInfo === null) {
		flags = (System.Reflection.BindingFlags.FlattenHierarchy | System.Reflection.BindingFlags.IgnoreCase | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic);
		propertyInfo = System.Linq.Expressions.Expression.FindProperty(type, propertyName, arguments, flags);
	}
	if (propertyInfo !== null) {
		return propertyInfo;
	}
	if (!((arguments !== null) && (arguments.length !== 0))) {
		throw $asm08.System.Core.Error.InstancePropertyWithoutParameterNotDefinedForType(propertyName, type);
	}
	throw $asm08.System.Core.Error.InstancePropertyWithSpecifiedParametersNotDefinedForType(propertyName, System.Linq.Expressions.Expression.GetArgTypesString(arguments), type);
};
System.Linq.Expressions.Expression.GetArgTypesString = function (arguments) {
	var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
	var flag = true;
	stringBuilder.Append$2("(");
	var enumerator = (System.Linq.Enumerable.Select$b2$0(System.Linq.Expressions.Expression, System.Type)(arguments, function (arg) {
				return arg.Type;
			})).IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current;
			if (!flag) {
				stringBuilder.Append$2(", ");
			}
			stringBuilder.Append$2(current.Name);
			flag = false;
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	stringBuilder.Append$2(")");
	return stringBuilder.toString();
};
System.Linq.Expressions.Expression.FindProperty = function (type, propertyName, arguments, flags) {
	var result = new JSIL.Variable(null);
	var array = type.FindMembers(System.Reflection.MemberTypes.Property, flags, System.Type.FilterNameIgnoreCase, propertyName);
	if (!((array !== null) && (array.length !== 0))) {
		return null;
	}
	var properties = $asm08.System.Dynamic.Utils.CollectionExtensions.Map$b2(System.Reflection.MemberInfo, System.Reflection.PropertyInfo)(JSIL.Cast(array, System.Collections.Generic.ICollection$b1.Of(System.Reflection.MemberInfo)), function (t) {
			return JSIL.Cast(t, System.Reflection.PropertyInfo);
		});
	var num = System.Linq.Expressions.Expression.FindBestProperty(properties, arguments, /* ref */ result);
	if (num === 0) {
		return null;
	}
	if (num > 1) {
		throw $asm08.System.Core.Error.PropertyWithMoreThanOneMatch(propertyName, type);
	}
	return result.value;
};
System.Linq.Expressions.Expression.FindBestProperty = function (properties, args, /* ref */ property) {
	var num = 0;
	property.value = null;
	var enumerator = properties.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current;
			if (!((current === null) || !System.Linq.Expressions.Expression.IsCompatible$0(current, args))) {
				if (property.value === null) {
					property.value = current;
					num = 1;
				} else {
					++num;
				}
			}
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	return num;
};
System.Linq.Expressions.Expression.IsCompatible$0 = function (pi, args) {
	var methodInfo = pi.GetGetMethod$0(true);
	if (methodInfo !== null) {
		var array = $asm08.System.Dynamic.Utils.TypeExtensions.GetParametersCached(methodInfo);
	} else {
		methodInfo = pi.GetSetMethod$0(true);
		array = $asm08.System.Dynamic.Utils.CollectionExtensions.RemoveLast$b1(System.Reflection.ParameterInfo)($asm08.System.Dynamic.Utils.TypeExtensions.GetParametersCached(methodInfo));
	}
	if (methodInfo === null) {
		return false;
	}
	if (args === null) {
		return (array.length === 0);
	}
	if (array.length !== args.length) {
		return false;
	}
__loop0__: 
	for (var i = 0; i < args.length; ++i) {
		if (!args[i]) {
			return false;
		}
		if (!$asm08.System.Dynamic.Utils.TypeUtils.AreReferenceAssignable(array[i].ParameterType, args[i].Type)) {
			return false;
		}
	}
	return true;
};
System.Linq.Expressions.Expression.Property$1 = function (instance, indexer, arguments) {
	return System.Linq.Expressions.Expression.Property$2(instance, indexer, JSIL.Cast(arguments, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.Expression)));
};
System.Linq.Expressions.Expression.Property$2 = function (instance, indexer, arguments) {
	var arguments2 = new JSIL.Variable($asm08.System.Dynamic.Utils.CollectionExtensions.ToReadOnly$b1(System.Linq.Expressions.Expression)(arguments));
	System.Linq.Expressions.Expression.ValidateIndexedProperty(instance, indexer, /* ref */ arguments2);
	return new System.Linq.Expressions.IndexExpression(instance, indexer, arguments2.value);
};
System.Linq.Expressions.Expression.ValidateIndexedProperty = function (instance, property, /* ref */ argList) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(property, "property");
	if (property.PropertyType.IsByRef) {
		throw $asm08.System.Core.Error.PropertyCannotHaveRefType();
	}
	if (property.PropertyType === System.Void) {
		throw $asm08.System.Core.Error.PropertyTypeCannotBeVoid();
	}
	var array = null;
	var getMethod = property.GetGetMethod$0(true);
	if (getMethod !== null) {
		array = $asm08.System.Dynamic.Utils.TypeExtensions.GetParametersCached(getMethod);
		System.Linq.Expressions.Expression.ValidateAccessor(instance, getMethod, array, /* ref */ argList);
	}
	var setMethod = property.GetSetMethod$0(true);
	if (setMethod !== null) {
		var parametersCached = $asm08.System.Dynamic.Utils.TypeExtensions.GetParametersCached(setMethod);
		if (parametersCached.length === 0) {
			throw $asm08.System.Core.Error.SetterHasNoParams();
		}
		var parameterType = parametersCached[(parametersCached.length - 1)].ParameterType;
		if (parameterType.IsByRef) {
			throw $asm08.System.Core.Error.PropertyCannotHaveRefType();
		}
		if (setMethod.ReturnType !== System.Void) {
			throw $asm08.System.Core.Error.SetterMustBeVoid();
		}
		if (property.PropertyType !== parameterType) {
			throw $asm08.System.Core.Error.PropertyTyepMustMatchSetter();
		}
		if (getMethod !== null) {
			if (getMethod.IsStatic ^ setMethod.IsStatic) {
				throw $asm08.System.Core.Error.BothAccessorsMustBeStatic();
			}
			if (array.length !== (parametersCached.length - 1)) {
				throw $asm08.System.Core.Error.IndexesOfSetGetMustMatch();
			}
		__loop0__: 
			for (var i = 0; i < array.length; ++i) {
				if (array[i].ParameterType !== parametersCached[i].ParameterType) {
					throw $asm08.System.Core.Error.IndexesOfSetGetMustMatch();
				}
			}
		} else {
			System.Linq.Expressions.Expression.ValidateAccessor(instance, setMethod, $asm08.System.Dynamic.Utils.CollectionExtensions.RemoveLast$b1(System.Reflection.ParameterInfo)(parametersCached), /* ref */ argList);
		}
	}
	if (!(getMethod || setMethod)) {
		throw $asm08.System.Core.Error.PropertyDoesNotHaveAccessor(property);
	}
};
System.Linq.Expressions.Expression.ValidateAccessor = function (instance, method, indexes, /* ref */ arguments) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(arguments.value, "arguments");
	System.Linq.Expressions.Expression.ValidateMethodInfo(method);
	if (method.CallingConvention & System.Reflection.CallingConventions.VarArgs) {
		throw $asm08.System.Core.Error.AccessorsCannotHaveVarArgs();
	}
	if (method.IsStatic) {
		if (instance !== null) {
			throw $asm08.System.Core.Error.OnlyStaticMethodsHaveNullInstance();
		}
	} else {
		if (instance === null) {
			throw $asm08.System.Core.Error.OnlyStaticMethodsHaveNullInstance();
		}
		System.Linq.Expressions.Expression.RequiresCanRead$0(instance, "instance");
		System.Linq.Expressions.Expression.ValidateCallInstanceType(instance.Type, method);
	}
	System.Linq.Expressions.Expression.ValidateAccessorArgumentTypes(method, indexes, /* ref */ arguments);
};
System.Linq.Expressions.Expression.ValidateAccessorArgumentTypes = function (method, indexes, /* ref */ arguments) {
	if (indexes.length > 0) {
		if (indexes.length !== arguments.value.Count) {
			throw $asm08.System.Core.Error.IncorrectNumberOfMethodCallArguments(method);
		}
		var array = null;
		var i = 0;
		var num = indexes.length;
	__loop0__: 
		while (i < num) {
			var expression = new JSIL.Variable(arguments.value.get_Item(i));
			System.Linq.Expressions.Expression.RequiresCanRead$0(expression.value, "arguments");
			var parameterType = indexes[i].ParameterType;
			if (parameterType.IsByRef) {
				throw $asm08.System.Core.Error.AccessorsCannotHaveByRefArgs();
			}
			$asm08.System.Dynamic.Utils.TypeUtils.ValidateType(parameterType);
			if (!($asm08.System.Dynamic.Utils.TypeUtils.AreReferenceAssignable(parameterType, expression.value.Type) || System.Linq.Expressions.Expression.TryQuote(parameterType, /* ref */ expression))) {
				throw $asm08.System.Core.Error.ExpressionTypeDoesNotMatchMethodParameter(expression.value.Type, parameterType, method);
			}
			if (!(array || (expression.value === arguments.value.get_Item(i)))) {
				array = JSIL.Array.New(System.Linq.Expressions.Expression, arguments.value.Count);
			__loop1__: 
				for (var j = 0; j < i; ++j) {
					array[j] = arguments.value.get_Item(j);
				}
			}
			if (array !== null) {
				array[i] = expression.value;
			}
			++i;
		}
		if (array !== null) {
			arguments.value = new ($asm08.System.Runtime.CompilerServices.TrueReadOnlyCollection$b1.Of(System.Linq.Expressions.Expression)) (array);
			return;
		}
	} else if (arguments.value.Count > 0) {
		throw $asm08.System.Core.Error.IncorrectNumberOfMethodCallArguments(method);
	}
};
System.Linq.Expressions.Expression.Invoke$0 = function (expression, arguments) {
	return System.Linq.Expressions.Expression.Invoke$1(expression, JSIL.Cast(arguments, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.Expression)));
};
System.Linq.Expressions.Expression.Invoke$1 = function (expression, arguments) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(expression, "expression");
	var arguments2 = new JSIL.Variable($asm08.System.Dynamic.Utils.CollectionExtensions.ToReadOnly$b1(System.Linq.Expressions.Expression)(arguments));
	var invokeMethod = System.Linq.Expressions.Expression.GetInvokeMethod(expression);
	System.Linq.Expressions.Expression.ValidateArgumentTypes(invokeMethod, System.Linq.Expressions.ExpressionType.Invoke, /* ref */ arguments2);
	return new System.Linq.Expressions.InvocationExpression(expression, arguments2.value, invokeMethod.ReturnType);
};
System.Linq.Expressions.Expression.GetInvokeMethod = function (expression) {
	var type = expression.Type;
	if (type === System.Delegate) {
		throw $asm08.System.Core.Error.ExpressionTypeNotInvocable(type);
	}
	if (!System.Delegate.IsAssignableFrom(expression.Type)) {
		var type2 = $asm08.System.Dynamic.Utils.TypeUtils.FindGenericType(System.Linq.Expressions.Expression$b1, expression.Type);
		if (type2 === null) {
			throw $asm08.System.Core.Error.ExpressionTypeNotInvocable(expression.Type);
		}
		type = type2.GetGenericArguments()[0];
	}
	return type.GetMethod$5("Invoke");
};
System.Linq.Expressions.Expression.Label$0 = function (target) {
	return System.Linq.Expressions.Expression.Label$1(target, null);
};
System.Linq.Expressions.Expression.Label$1 = function (target, $defaultValue) {
	var defaultValue = new JSIL.Variable($defaultValue);
	System.Linq.Expressions.Expression.ValidateGoto(target, /* ref */ defaultValue, "label", "defaultValue");
	return new System.Linq.Expressions.LabelExpression(target, defaultValue.value);
};
System.Linq.Expressions.Expression.Label$2 = function () {
	return System.Linq.Expressions.Expression.Label$5(System.Void, null);
};
System.Linq.Expressions.Expression.Label$3 = function (name) {
	return System.Linq.Expressions.Expression.Label$5(System.Void, name);
};
System.Linq.Expressions.Expression.Label$4 = function (type) {
	return System.Linq.Expressions.Expression.Label$5(type, null);
};
System.Linq.Expressions.Expression.Label$5 = function (type, name) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(type, "type");
	$asm08.System.Dynamic.Utils.TypeUtils.ValidateType(type);
	return new System.Linq.Expressions.LabelTarget(type, name);
};
System.Linq.Expressions.Expression.CreateLambda = function (delegateType, body, name, tailCall, parameters) {
	var lambdaFactories = null;
	if (System.Linq.Expressions.Expression._LambdaFactories === null) {
		System.Threading.Interlocked.CompareExchange$b1($asm08.System.Dynamic.Utils.CacheDict$b2.Of(System.Type, $asm08.System.Linq.Expressions.Expression.LambdaFactory))(/* ref */ new JSIL.MemberReference(System.Linq.Expressions.Expression, "_LambdaFactories"), new ($asm08.System.Dynamic.Utils.CacheDict$b2.Of(System.Type, $asm08.System.Linq.Expressions.Expression.LambdaFactory)) (50), null);
	}
	var methodInfo = null;
	System.Threading.Monitor.Enter((lambdaFactories = System.Linq.Expressions.Expression._LambdaFactories));
	try {
		if (!System.Linq.Expressions.Expression._LambdaFactories.TryGetValue(delegateType, /* ref */ lambdaFactory)) {
			methodInfo = System.Linq.Expressions.Expression$b1.MakeGenericType(JSIL.Array.New(System.Type, [delegateType])).GetMethod$4("Create", (System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static));
			if ($asm08.System.Dynamic.Utils.TypeUtils.CanCache(delegateType)) {
				var lambdaFactory = new JSIL.Variable(JSIL.Cast(System.Linq.Expressions.Expression._LambdaFactories.set_Item(delegateType, System.Delegate.CreateDelegate$9($asm08.System.Linq.Expressions.Expression.LambdaFactory, methodInfo)), $asm08.System.Linq.Expressions.Expression.LambdaFactory));
			}
		}
	} finally {
		System.Threading.Monitor.Exit(lambdaFactories);
	}
	if (lambdaFactory.value !== null) {
		return lambdaFactory.value(body, name, tailCall, parameters);
	}
	return JSIL.Cast(methodInfo.Invoke$1(null, [body, name, tailCall, parameters]), System.Linq.Expressions.LambdaExpression);
};
System.Linq.Expressions.Expression.Lambda$b1$0 = JSIL.GenericMethod(
	["TDelegate"], 
	function (TDelegate, body, parameters) {
		return System.Linq.Expressions.Expression.Lambda$b1$3(TDelegate)(body, false, JSIL.Cast(parameters, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.ParameterExpression)));
	}
);
System.Linq.Expressions.Expression.Lambda$b1$1 = JSIL.GenericMethod(
	["TDelegate"], 
	function (TDelegate, body, tailCall, parameters) {
		return System.Linq.Expressions.Expression.Lambda$b1$3(TDelegate)(body, tailCall, JSIL.Cast(parameters, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.ParameterExpression)));
	}
);
System.Linq.Expressions.Expression.Lambda$b1$2 = JSIL.GenericMethod(
	["TDelegate"], 
	function (TDelegate, body, parameters) {
		return System.Linq.Expressions.Expression.Lambda$b1$5(TDelegate)(body, null, false, parameters);
	}
);
System.Linq.Expressions.Expression.Lambda$b1$3 = JSIL.GenericMethod(
	["TDelegate"], 
	function (TDelegate, body, tailCall, parameters) {
		return System.Linq.Expressions.Expression.Lambda$b1$5(TDelegate)(body, null, tailCall, parameters);
	}
);
System.Linq.Expressions.Expression.Lambda$b1$4 = JSIL.GenericMethod(
	["TDelegate"], 
	function (TDelegate, body, name, parameters) {
		return System.Linq.Expressions.Expression.Lambda$b1$5(TDelegate)(body, name, false, parameters);
	}
);
System.Linq.Expressions.Expression.Lambda$b1$5 = JSIL.GenericMethod(
	["TDelegate"], 
	function (TDelegate, $body, name, tailCall, parameters) {
		var body = new JSIL.Variable($body);
		var parameters2 = $asm08.System.Dynamic.Utils.CollectionExtensions.ToReadOnly$b1(System.Linq.Expressions.ParameterExpression)(parameters);
		System.Linq.Expressions.Expression.ValidateLambdaArgs(TDelegate, /* ref */ body, parameters2);
		return new (System.Linq.Expressions.Expression$b1.Of(TDelegate)) (body.value, name, tailCall, parameters2);
	}
);
System.Linq.Expressions.Expression.Lambda$0 = function (body, parameters) {
	return System.Linq.Expressions.Expression.Lambda$3(body, false, JSIL.Cast(parameters, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.ParameterExpression)));
};
System.Linq.Expressions.Expression.Lambda$1 = function (body, tailCall, parameters) {
	return System.Linq.Expressions.Expression.Lambda$3(body, tailCall, JSIL.Cast(parameters, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.ParameterExpression)));
};
System.Linq.Expressions.Expression.Lambda$2 = function (body, parameters) {
	return System.Linq.Expressions.Expression.Lambda$9(body, null, false, parameters);
};
System.Linq.Expressions.Expression.Lambda$3 = function (body, tailCall, parameters) {
	return System.Linq.Expressions.Expression.Lambda$9(body, null, tailCall, parameters);
};
System.Linq.Expressions.Expression.Lambda$4 = function (delegateType, body, parameters) {
	return System.Linq.Expressions.Expression.Lambda$11(
		delegateType, 
		body, 
		null, 
		false, 
		parameters
	);
};
System.Linq.Expressions.Expression.Lambda$5 = function (delegateType, body, tailCall, parameters) {
	return System.Linq.Expressions.Expression.Lambda$11(
		delegateType, 
		body, 
		null, 
		tailCall, 
		parameters
	);
};
System.Linq.Expressions.Expression.Lambda$6 = function (delegateType, body, parameters) {
	return System.Linq.Expressions.Expression.Lambda$11(
		delegateType, 
		body, 
		null, 
		false, 
		parameters
	);
};
System.Linq.Expressions.Expression.Lambda$7 = function (delegateType, body, tailCall, parameters) {
	return System.Linq.Expressions.Expression.Lambda$11(
		delegateType, 
		body, 
		null, 
		tailCall, 
		parameters
	);
};
System.Linq.Expressions.Expression.Lambda$8 = function (body, name, parameters) {
	return System.Linq.Expressions.Expression.Lambda$9(body, name, false, parameters);
};
System.Linq.Expressions.Expression.Lambda$9 = function (body, name, tailCall, parameters) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(body, "body");
	var readOnlyCollection = $asm08.System.Dynamic.Utils.CollectionExtensions.ToReadOnly$b1(System.Linq.Expressions.ParameterExpression)(parameters);
	var count = readOnlyCollection.Count;
	var array = JSIL.Array.New(System.Type, (count + 1));
	if (count > 0) {
		var set = JSIL.New($asm08.System.Linq.Expressions.Set$b1.Of(System.Linq.Expressions.ParameterExpression), "_ctor$4", [readOnlyCollection.Count]);
	__loop0__: 
		for (var i = 0; i < count; ++i) {
			var parameterExpression = readOnlyCollection.get_Item(i);
			$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(parameterExpression, "parameter");
			array[i] = parameterExpression.IsByRef ? parameterExpression.Type.MakeByRefType() : parameterExpression.Type;
			if (set.Contains(parameterExpression)) {
				throw $asm08.System.Core.Error.DuplicateVariable(parameterExpression);
			}
			set.Add(parameterExpression);
		}
	}
	array[count] = body.Type;
	var delegateType = $asm08.System.Linq.Expressions.Compiler.DelegateHelpers.MakeDelegateType(array);
	return System.Linq.Expressions.Expression.CreateLambda(
		delegateType, 
		body, 
		name, 
		tailCall, 
		readOnlyCollection
	);
};
System.Linq.Expressions.Expression.Lambda$10 = function (delegateType, $body, name, parameters) {
	var body = new JSIL.Variable($body);
	var parameters2 = $asm08.System.Dynamic.Utils.CollectionExtensions.ToReadOnly$b1(System.Linq.Expressions.ParameterExpression)(parameters);
	System.Linq.Expressions.Expression.ValidateLambdaArgs(delegateType, /* ref */ body, parameters2);
	return System.Linq.Expressions.Expression.CreateLambda(
		delegateType, 
		body.value, 
		name, 
		false, 
		parameters2
	);
};
System.Linq.Expressions.Expression.Lambda$11 = function (delegateType, $body, name, tailCall, parameters) {
	var body = new JSIL.Variable($body);
	var parameters2 = $asm08.System.Dynamic.Utils.CollectionExtensions.ToReadOnly$b1(System.Linq.Expressions.ParameterExpression)(parameters);
	System.Linq.Expressions.Expression.ValidateLambdaArgs(delegateType, /* ref */ body, parameters2);
	return System.Linq.Expressions.Expression.CreateLambda(
		delegateType, 
		body.value, 
		name, 
		tailCall, 
		parameters2
	);
};
System.Linq.Expressions.Expression.ValidateLambdaArgs = function (delegateType, /* ref */ body, parameters) {
	var lambdaDelegateCache = null;
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(delegateType, "delegateType");
	System.Linq.Expressions.Expression.RequiresCanRead$0(body.value, "body");
	if (!(System.Delegate.IsAssignableFrom(delegateType) && (delegateType !== System.Delegate))) {
		throw $asm08.System.Core.Error.LambdaTypeMustBeDerivedFromSystemDelegate();
	}
	System.Threading.Monitor.Enter((lambdaDelegateCache = System.Linq.Expressions.Expression._LambdaDelegateCache));
	try {
		if (!System.Linq.Expressions.Expression._LambdaDelegateCache.TryGetValue(delegateType, /* ref */ method)) {
			var method = new JSIL.Variable(delegateType.GetMethod$5("Invoke"));
			if ($asm08.System.Dynamic.Utils.TypeUtils.CanCache(delegateType)) {
				System.Linq.Expressions.Expression._LambdaDelegateCache.set_Item(delegateType, method.value);
			}
		}
	} finally {
		System.Threading.Monitor.Exit(lambdaDelegateCache);
	}
	var parametersCached = $asm08.System.Dynamic.Utils.TypeExtensions.GetParametersCached(method.value);
	if (parametersCached.length > 0) {
		if (parametersCached.length !== parameters.Count) {
			throw $asm08.System.Core.Error.IncorrectNumberOfLambdaDeclarationParameters();
		}
		var set = JSIL.New($asm08.System.Linq.Expressions.Set$b1.Of(System.Linq.Expressions.ParameterExpression), "_ctor$4", [parametersCached.length]);
		var i = 0;
		var num = parametersCached.length;
	__loop0__: 
		while (i < num) {
			var parameterExpression = parameters.get_Item(i);
			System.Linq.Expressions.Expression.RequiresCanRead$0(parameterExpression, "parameters");
			var type = parametersCached[i].ParameterType;
			if (parameterExpression.IsByRef) {
				if (!type.IsByRef) {
					throw $asm08.System.Core.Error.ParameterExpressionNotValidAsDelegate(parameterExpression.Type.MakeByRefType(), type);
				}
				type = type.GetElementType();
			}
			if (!$asm08.System.Dynamic.Utils.TypeUtils.AreReferenceAssignable(parameterExpression.Type, type)) {
				throw $asm08.System.Core.Error.ParameterExpressionNotValidAsDelegate(parameterExpression.Type, type);
			}
			if (set.Contains(parameterExpression)) {
				throw $asm08.System.Core.Error.DuplicateVariable(parameterExpression);
			}
			set.Add(parameterExpression);
			++i;
		}
	} else if (parameters.Count > 0) {
		throw $asm08.System.Core.Error.IncorrectNumberOfLambdaDeclarationParameters();
	}
	if (!((method.value.ReturnType === System.Void) || 
			$asm08.System.Dynamic.Utils.TypeUtils.AreReferenceAssignable(method.value.ReturnType, body.value.Type) || System.Linq.Expressions.Expression.TryQuote(method.value.ReturnType, /* ref */ body))) {
		throw $asm08.System.Core.Error.ExpressionTypeDoesNotMatchReturn(body.value.Type, method.value.ReturnType);
	}
};
System.Linq.Expressions.Expression.ValidateTryGetFuncActionArgs = function (typeArgs) {
	if (typeArgs === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["typeArgs"]);
	}
	var i = 0;
	var num = typeArgs.length;
__loop0__: 
	while (i < num) {
		var type = typeArgs[i];
		if (type === null) {
			throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["typeArgs"]);
		}
		if (type.IsByRef) {
			return false;
		}
		++i;
	}
	return true;
};
System.Linq.Expressions.Expression.GetFuncType = function (typeArgs) {
	if (!System.Linq.Expressions.Expression.ValidateTryGetFuncActionArgs(typeArgs)) {
		throw $asm08.System.Core.Error.TypeMustNotBeByRef();
	}
	var funcType = $asm08.System.Linq.Expressions.Compiler.DelegateHelpers.GetFuncType(typeArgs);
	if (funcType === null) {
		throw $asm08.System.Core.Error.IncorrectNumberOfTypeArgsForFunc();
	}
	return funcType;
};
System.Linq.Expressions.Expression.TryGetFuncType = function (typeArgs, /* ref */ funcType) {
	var funcType2 = null;
	if (System.Linq.Expressions.Expression.ValidateTryGetFuncActionArgs(typeArgs)) {
		funcType.value = (funcType2 = $asm08.System.Linq.Expressions.Compiler.DelegateHelpers.GetFuncType(typeArgs));
		return (funcType2 !== null);
	}
	funcType.value = null;
	return false;
};
System.Linq.Expressions.Expression.GetActionType = function (typeArgs) {
	if (!System.Linq.Expressions.Expression.ValidateTryGetFuncActionArgs(typeArgs)) {
		throw $asm08.System.Core.Error.TypeMustNotBeByRef();
	}
	var actionType = $asm08.System.Linq.Expressions.Compiler.DelegateHelpers.GetActionType(typeArgs);
	if (actionType === null) {
		throw $asm08.System.Core.Error.IncorrectNumberOfTypeArgsForAction();
	}
	return actionType;
};
System.Linq.Expressions.Expression.TryGetActionType = function (typeArgs, /* ref */ actionType) {
	var actionType2 = null;
	if (System.Linq.Expressions.Expression.ValidateTryGetFuncActionArgs(typeArgs)) {
		actionType.value = (actionType2 = $asm08.System.Linq.Expressions.Compiler.DelegateHelpers.GetActionType(typeArgs));
		return (actionType2 !== null);
	}
	actionType.value = null;
	return false;
};
System.Linq.Expressions.Expression.GetDelegateType = function (typeArgs) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotEmpty$b1(System.Type)(JSIL.Cast(typeArgs, System.Collections.Generic.ICollection$b1.Of(System.Type)), "typeArgs");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNullItems$b1(System.Type)(JSIL.Cast(typeArgs, System.Collections.Generic.IList$b1.Of(System.Type)), "typeArgs");
	return $asm08.System.Linq.Expressions.Compiler.DelegateHelpers.MakeDelegateType(typeArgs);
};
System.Linq.Expressions.Expression.ListInit$0 = function (newExpression, initializers) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(newExpression, "newExpression");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(initializers, "initializers");
	return System.Linq.Expressions.Expression.ListInit$1(newExpression, initializers);
};
System.Linq.Expressions.Expression.ListInit$1 = function (newExpression, initializers) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(newExpression, "newExpression");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(initializers, "initializers");
	var readOnlyCollection = $asm08.System.Dynamic.Utils.CollectionExtensions.ToReadOnly$b1(System.Linq.Expressions.Expression)(initializers);
	if (readOnlyCollection.Count === 0) {
		throw $asm08.System.Core.Error.ListInitializerWithZeroMembers();
	}
	var addMethod = System.Linq.Expressions.Expression.FindMethod(
		newExpression.Type, 
		"Add", 
		null, 
		JSIL.Array.New(System.Linq.Expressions.Expression, [readOnlyCollection.get_Item(0)]), 
		(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public)
	);
	return System.Linq.Expressions.Expression.ListInit$3(newExpression, addMethod, initializers);
};
System.Linq.Expressions.Expression.ListInit$2 = function (newExpression, addMethod, initializers) {
	if (addMethod === null) {
		return System.Linq.Expressions.Expression.ListInit$1(newExpression, initializers);
	}
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(newExpression, "newExpression");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(initializers, "initializers");
	return System.Linq.Expressions.Expression.ListInit$3(newExpression, addMethod, initializers);
};
System.Linq.Expressions.Expression.ListInit$3 = function (newExpression, addMethod, initializers) {
	if (addMethod === null) {
		return System.Linq.Expressions.Expression.ListInit$1(newExpression, initializers);
	}
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(newExpression, "newExpression");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(initializers, "initializers");
	var readOnlyCollection = $asm08.System.Dynamic.Utils.CollectionExtensions.ToReadOnly$b1(System.Linq.Expressions.Expression)(initializers);
	if (readOnlyCollection.Count === 0) {
		throw $asm08.System.Core.Error.ListInitializerWithZeroMembers();
	}
	var array = JSIL.Array.New(System.Linq.Expressions.ElementInit, readOnlyCollection.Count);
__loop0__: 
	for (var i = 0; i < readOnlyCollection.Count; ++i) {
		array[i] = System.Linq.Expressions.Expression.ElementInit$0(addMethod, JSIL.Array.New(System.Linq.Expressions.Expression, [readOnlyCollection.get_Item(i)]));
	}
	return System.Linq.Expressions.Expression.ListInit$5(newExpression, new ($asm08.System.Runtime.CompilerServices.TrueReadOnlyCollection$b1.Of(System.Linq.Expressions.ElementInit)) (array));
};
System.Linq.Expressions.Expression.ListInit$4 = function (newExpression, initializers) {
	return System.Linq.Expressions.Expression.ListInit$5(newExpression, JSIL.Cast(initializers, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.ElementInit)));
};
System.Linq.Expressions.Expression.ListInit$5 = function (newExpression, initializers) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(newExpression, "newExpression");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(initializers, "initializers");
	var readOnlyCollection = $asm08.System.Dynamic.Utils.CollectionExtensions.ToReadOnly$b1(System.Linq.Expressions.ElementInit)(initializers);
	if (readOnlyCollection.Count === 0) {
		throw $asm08.System.Core.Error.ListInitializerWithZeroMembers();
	}
	System.Linq.Expressions.Expression.ValidateListInitArgs(newExpression.Type, readOnlyCollection);
	return new System.Linq.Expressions.ListInitExpression(newExpression, readOnlyCollection);
};
System.Linq.Expressions.Expression.Loop$0 = function (body) {
	return System.Linq.Expressions.Expression.Loop$1(body, null);
};
System.Linq.Expressions.Expression.Loop$1 = function (body, $break) {
	return System.Linq.Expressions.Expression.Loop$2(body, $break, null);
};
System.Linq.Expressions.Expression.Loop$2 = function (body, $break, $continue) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(body, "body");
	if (!(($continue === null) || ($continue.Type === System.Void))) {
		throw $asm08.System.Core.Error.LabelTypeMustBeVoid();
	}
	return new System.Linq.Expressions.LoopExpression(body, $break, $continue);
};
System.Linq.Expressions.Expression.Bind$0 = function (member, expression) {
	var type = new JSIL.Variable(null);
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(member, "member");
	System.Linq.Expressions.Expression.RequiresCanRead$0(expression, "expression");
	System.Linq.Expressions.Expression.ValidateSettableFieldOrPropertyMember(member, /* ref */ type);
	if (!type.value.IsAssignableFrom(expression.Type)) {
		throw $asm08.System.Core.Error.ArgumentTypesMustMatch();
	}
	return new System.Linq.Expressions.MemberAssignment(member, expression);
};
System.Linq.Expressions.Expression.Bind$1 = function (propertyAccessor, expression) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(propertyAccessor, "propertyAccessor");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(expression, "expression");
	System.Linq.Expressions.Expression.ValidateMethodInfo(propertyAccessor);
	return System.Linq.Expressions.Expression.Bind$0(System.Linq.Expressions.Expression.GetProperty(propertyAccessor), expression);
};
System.Linq.Expressions.Expression.ValidateSettableFieldOrPropertyMember = function (member, /* ref */ memberType) {
	var fieldInfo = JSIL.TryCast(member, System.Reflection.FieldInfo);
	if (fieldInfo !== null) {
		memberType.value = fieldInfo.FieldType;
		return;
	}
	var propertyInfo = JSIL.TryCast(member, System.Reflection.PropertyInfo);
	if (propertyInfo === null) {
		throw $asm08.System.Core.Error.ArgumentMustBeFieldInfoOrPropertInfo();
	}
	if (!propertyInfo.CanWrite) {
		throw $asm08.System.Core.Error.PropertyDoesNotHaveSetter(propertyInfo);
	}
	memberType.value = propertyInfo.PropertyType;
};
System.Linq.Expressions.Expression.Field$0 = function (expression, field) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(field, "field");
	if (field.IsStatic) {
		if (expression !== null) {
			throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm08.System.Core.Strings.OnlyStaticFieldsHaveNullInstance, "expression"]);
		}
	} else {
		if (expression === null) {
			throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm08.System.Core.Strings.OnlyStaticFieldsHaveNullInstance, "field"]);
		}
		System.Linq.Expressions.Expression.RequiresCanRead$0(expression, "expression");
		if (!$asm08.System.Dynamic.Utils.TypeUtils.AreReferenceAssignable(field.DeclaringType, expression.Type)) {
			throw $asm08.System.Core.Error.FieldInfoNotDefinedForType(field.DeclaringType, field.Name, expression.Type);
		}
	}
	return System.Linq.Expressions.MemberExpression.Make(expression, field);
};
System.Linq.Expressions.Expression.Field$1 = function (expression, fieldName) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(expression, "expression");
	var field = expression.Type.GetField$0(fieldName, (System.Reflection.BindingFlags.FlattenHierarchy | System.Reflection.BindingFlags.IgnoreCase | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public));
	if (field === null) {
		field = expression.Type.GetField$0(fieldName, (System.Reflection.BindingFlags.FlattenHierarchy | System.Reflection.BindingFlags.IgnoreCase | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic));
	}
	if (field === null) {
		throw $asm08.System.Core.Error.InstanceFieldNotDefinedForType(fieldName, expression.Type);
	}
	return System.Linq.Expressions.Expression.Field$0(expression, field);
};
System.Linq.Expressions.Expression.Field$2 = function (expression, type, fieldName) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(type, "type");
	var field = type.GetField$0(fieldName, (System.Reflection.BindingFlags.FlattenHierarchy | System.Reflection.BindingFlags.IgnoreCase | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
	if (field === null) {
		field = type.GetField$0(fieldName, (System.Reflection.BindingFlags.FlattenHierarchy | System.Reflection.BindingFlags.IgnoreCase | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static));
	}
	if (field === null) {
		throw $asm08.System.Core.Error.FieldNotDefinedForType(fieldName, type);
	}
	return System.Linq.Expressions.Expression.Field$0(expression, field);
};
System.Linq.Expressions.Expression.Property$3 = function (expression, propertyName) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(expression, "expression");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(propertyName, "propertyName");
	var property = expression.Type.GetProperty$2(propertyName, (System.Reflection.BindingFlags.FlattenHierarchy | System.Reflection.BindingFlags.IgnoreCase | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public));
	if (property === null) {
		property = expression.Type.GetProperty$2(propertyName, (System.Reflection.BindingFlags.FlattenHierarchy | System.Reflection.BindingFlags.IgnoreCase | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic));
	}
	if (property === null) {
		throw $asm08.System.Core.Error.InstancePropertyNotDefinedForType(propertyName, expression.Type);
	}
	return System.Linq.Expressions.Expression.Property$5(expression, property);
};
System.Linq.Expressions.Expression.Property$4 = function (expression, type, propertyName) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(type, "type");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(propertyName, "propertyName");
	var property = type.GetProperty$2(propertyName, (System.Reflection.BindingFlags.FlattenHierarchy | System.Reflection.BindingFlags.IgnoreCase | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
	if (property === null) {
		property = type.GetProperty$2(propertyName, (System.Reflection.BindingFlags.FlattenHierarchy | System.Reflection.BindingFlags.IgnoreCase | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Static));
	}
	if (property === null) {
		throw $asm08.System.Core.Error.PropertyNotDefinedForType(propertyName, type);
	}
	return System.Linq.Expressions.Expression.Property$5(expression, property);
};
System.Linq.Expressions.Expression.Property$5 = function (expression, property) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(property, "property");
	var methodInfo = JSIL.Coalesce(property.GetGetMethod$0(true), property.GetSetMethod$0(true));
	if (methodInfo === null) {
		throw $asm08.System.Core.Error.PropertyDoesNotHaveAccessor(property);
	}
	if (methodInfo.IsStatic) {
		if (expression !== null) {
			throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm08.System.Core.Strings.OnlyStaticPropertiesHaveNullInstance, "expression"]);
		}
	} else {
		if (expression === null) {
			throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm08.System.Core.Strings.OnlyStaticPropertiesHaveNullInstance, "property"]);
		}
		System.Linq.Expressions.Expression.RequiresCanRead$0(expression, "expression");
		if (!$asm08.System.Dynamic.Utils.TypeUtils.IsValidInstanceType(property, expression.Type)) {
			throw $asm08.System.Core.Error.PropertyNotDefinedForType(property, expression.Type);
		}
	}
	return System.Linq.Expressions.MemberExpression.Make(expression, property);
};
System.Linq.Expressions.Expression.Property$6 = function (expression, propertyAccessor) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(propertyAccessor, "propertyAccessor");
	System.Linq.Expressions.Expression.ValidateMethodInfo(propertyAccessor);
	return System.Linq.Expressions.Expression.Property$5(expression, System.Linq.Expressions.Expression.GetProperty(propertyAccessor));
};
System.Linq.Expressions.Expression.GetProperty = function (mi) {
	var declaringType = mi.DeclaringType;
	var bindingFlags = (System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public);
	bindingFlags = (bindingFlags | mi.IsStatic ? System.Reflection.BindingFlags.Static : System.Reflection.BindingFlags.Instance);
	var properties = declaringType.GetProperties$0(bindingFlags);
	var array = properties;
__loop0__: 
	for (var i = 0; i < array.length; ) {
		var propertyInfo = array[i];
		if (!(!propertyInfo.CanRead || !System.Linq.Expressions.Expression.CheckMethod(mi, propertyInfo.GetGetMethod$0(true)))) {
			var result = propertyInfo;
		} else {
			if (!propertyInfo.CanWrite || !System.Linq.Expressions.Expression.CheckMethod(mi, propertyInfo.GetSetMethod$0(true))) {
				++i;
				continue __loop0__;
			}
			result = propertyInfo;
		}
		return result;
	}
	throw $asm08.System.Core.Error.MethodNotPropertyAccessor(mi.DeclaringType, mi.Name);
};
System.Linq.Expressions.Expression.CheckMethod = function (method, propertyMethod) {
	if (method === propertyMethod) {
		return true;
	}
	var declaringType = method.DeclaringType;
	return !(!declaringType.IsInterface || 
		!(method.Name == propertyMethod.Name) || (declaringType.GetMethod$5(method.Name) !== propertyMethod));
};
System.Linq.Expressions.Expression.PropertyOrField = function (expression, propertyOrFieldName) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(expression, "expression");
	var property = expression.Type.GetProperty$2(propertyOrFieldName, (System.Reflection.BindingFlags.FlattenHierarchy | System.Reflection.BindingFlags.IgnoreCase | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public));
	if (property !== null) {
		return System.Linq.Expressions.Expression.Property$5(expression, property);
	}
	var field = expression.Type.GetField$0(propertyOrFieldName, (System.Reflection.BindingFlags.FlattenHierarchy | System.Reflection.BindingFlags.IgnoreCase | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public));
	if (field !== null) {
		return System.Linq.Expressions.Expression.Field$0(expression, field);
	}
	property = expression.Type.GetProperty$2(propertyOrFieldName, (System.Reflection.BindingFlags.FlattenHierarchy | System.Reflection.BindingFlags.IgnoreCase | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic));
	if (property !== null) {
		return System.Linq.Expressions.Expression.Property$5(expression, property);
	}
	field = expression.Type.GetField$0(propertyOrFieldName, (System.Reflection.BindingFlags.FlattenHierarchy | System.Reflection.BindingFlags.IgnoreCase | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic));
	if (field !== null) {
		return System.Linq.Expressions.Expression.Field$0(expression, field);
	}
	throw $asm08.System.Core.Error.NotAMemberOfType(propertyOrFieldName, expression.Type);
};
System.Linq.Expressions.Expression.MakeMemberAccess = function (expression, member) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(member, "member");
	var fieldInfo = JSIL.TryCast(member, System.Reflection.FieldInfo);
	if (fieldInfo !== null) {
		return System.Linq.Expressions.Expression.Field$0(expression, fieldInfo);
	}
	var propertyInfo = JSIL.TryCast(member, System.Reflection.PropertyInfo);
	if (propertyInfo !== null) {
		return System.Linq.Expressions.Expression.Property$5(expression, propertyInfo);
	}
	throw $asm08.System.Core.Error.MemberNotFieldOrProperty(member);
};
System.Linq.Expressions.Expression.MemberInit$0 = function (newExpression, bindings) {
	return System.Linq.Expressions.Expression.MemberInit$1(newExpression, JSIL.Cast(bindings, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.MemberBinding)));
};
System.Linq.Expressions.Expression.MemberInit$1 = function (newExpression, bindings) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(newExpression, "newExpression");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(bindings, "bindings");
	var bindings2 = $asm08.System.Dynamic.Utils.CollectionExtensions.ToReadOnly$b1(System.Linq.Expressions.MemberBinding)(bindings);
	System.Linq.Expressions.Expression.ValidateMemberInitArgs(newExpression.Type, bindings2);
	return new System.Linq.Expressions.MemberInitExpression(newExpression, bindings2);
};
System.Linq.Expressions.Expression.ListBind$0 = function (member, initializers) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(member, "member");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(initializers, "initializers");
	return System.Linq.Expressions.Expression.ListBind$1(member, JSIL.Cast(initializers, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.ElementInit)));
};
System.Linq.Expressions.Expression.ListBind$1 = function (member, initializers) {
	var listType = new JSIL.Variable(null);
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(member, "member");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(initializers, "initializers");
	System.Linq.Expressions.Expression.ValidateGettableFieldOrPropertyMember(member, /* ref */ listType);
	var initializers2 = $asm08.System.Dynamic.Utils.CollectionExtensions.ToReadOnly$b1(System.Linq.Expressions.ElementInit)(initializers);
	System.Linq.Expressions.Expression.ValidateListInitArgs(listType.value, initializers2);
	return new System.Linq.Expressions.MemberListBinding(member, initializers2);
};
System.Linq.Expressions.Expression.ListBind$2 = function (propertyAccessor, initializers) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(propertyAccessor, "propertyAccessor");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(initializers, "initializers");
	return System.Linq.Expressions.Expression.ListBind$3(propertyAccessor, JSIL.Cast(initializers, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.ElementInit)));
};
System.Linq.Expressions.Expression.ListBind$3 = function (propertyAccessor, initializers) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(propertyAccessor, "propertyAccessor");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(initializers, "initializers");
	return System.Linq.Expressions.Expression.ListBind$1(System.Linq.Expressions.Expression.GetProperty(propertyAccessor), initializers);
};
System.Linq.Expressions.Expression.ValidateListInitArgs = function (listType, initializers) {
	if (!System.Collections.IEnumerable.IsAssignableFrom(listType)) {
		throw $asm08.System.Core.Error.TypeNotIEnumerable(listType);
	}
	var i = 0;
	var count = initializers.Count;
__loop0__: 
	while (i < count) {
		var elementInit = initializers.get_Item(i);
		$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(elementInit, "initializers");
		System.Linq.Expressions.Expression.ValidateCallInstanceType(listType, elementInit.AddMethod);
		++i;
	}
};
System.Linq.Expressions.Expression.MemberBind$0 = function (member, bindings) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(member, "member");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(bindings, "bindings");
	return System.Linq.Expressions.Expression.MemberBind$1(member, JSIL.Cast(bindings, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.MemberBinding)));
};
System.Linq.Expressions.Expression.MemberBind$1 = function (member, bindings) {
	var type = new JSIL.Variable(null);
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(member, "member");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(bindings, "bindings");
	var bindings2 = $asm08.System.Dynamic.Utils.CollectionExtensions.ToReadOnly$b1(System.Linq.Expressions.MemberBinding)(bindings);
	System.Linq.Expressions.Expression.ValidateGettableFieldOrPropertyMember(member, /* ref */ type);
	System.Linq.Expressions.Expression.ValidateMemberInitArgs(type.value, bindings2);
	return new System.Linq.Expressions.MemberMemberBinding(member, bindings2);
};
System.Linq.Expressions.Expression.MemberBind$2 = function (propertyAccessor, bindings) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(propertyAccessor, "propertyAccessor");
	return System.Linq.Expressions.Expression.MemberBind$0(System.Linq.Expressions.Expression.GetProperty(propertyAccessor), bindings);
};
System.Linq.Expressions.Expression.MemberBind$3 = function (propertyAccessor, bindings) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(propertyAccessor, "propertyAccessor");
	return System.Linq.Expressions.Expression.MemberBind$1(System.Linq.Expressions.Expression.GetProperty(propertyAccessor), bindings);
};
System.Linq.Expressions.Expression.ValidateGettableFieldOrPropertyMember = function (member, /* ref */ memberType) {
	var fieldInfo = JSIL.TryCast(member, System.Reflection.FieldInfo);
	if (fieldInfo !== null) {
		memberType.value = fieldInfo.FieldType;
		return;
	}
	var propertyInfo = JSIL.TryCast(member, System.Reflection.PropertyInfo);
	if (propertyInfo === null) {
		throw $asm08.System.Core.Error.ArgumentMustBeFieldInfoOrPropertInfo();
	}
	if (!propertyInfo.CanRead) {
		throw $asm08.System.Core.Error.PropertyDoesNotHaveGetter(propertyInfo);
	}
	memberType.value = propertyInfo.PropertyType;
};
System.Linq.Expressions.Expression.ValidateMemberInitArgs = function (type, bindings) {
	var i = 0;
	var count = bindings.Count;
__loop0__: 
	while (i < count) {
		var memberBinding = bindings.get_Item(i);
		$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(memberBinding, "bindings");
		if (!memberBinding.Member.DeclaringType.IsAssignableFrom(type)) {
			throw $asm08.System.Core.Error.NotAMemberOfType(memberBinding.Member.Name, type);
		}
		++i;
	}
};
System.Linq.Expressions.Expression.Call$0 = function (method, arg0) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(method, "method");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(arg0, "arg0");
	var array = System.Linq.Expressions.Expression.ValidateMethodAndGetParameters(null, method);
	System.Linq.Expressions.Expression.ValidateArgumentCount(method, System.Linq.Expressions.ExpressionType.Call, 1, array);
	arg0 = System.Linq.Expressions.Expression.ValidateOneArgument(method, System.Linq.Expressions.ExpressionType.Call, arg0, array[0]);
	return new $asm08.System.Linq.Expressions.MethodCallExpression1(method, arg0);
};
System.Linq.Expressions.Expression.Call$1 = function (method, arg0, arg1) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(method, "method");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(arg0, "arg0");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(arg1, "arg1");
	var array = System.Linq.Expressions.Expression.ValidateMethodAndGetParameters(null, method);
	System.Linq.Expressions.Expression.ValidateArgumentCount(method, System.Linq.Expressions.ExpressionType.Call, 2, array);
	arg0 = System.Linq.Expressions.Expression.ValidateOneArgument(method, System.Linq.Expressions.ExpressionType.Call, arg0, array[0]);
	arg1 = System.Linq.Expressions.Expression.ValidateOneArgument(method, System.Linq.Expressions.ExpressionType.Call, arg1, array[1]);
	return new $asm08.System.Linq.Expressions.MethodCallExpression2(method, arg0, arg1);
};
System.Linq.Expressions.Expression.Call$2 = function (method, arg0, arg1, arg2) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(method, "method");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(arg0, "arg0");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(arg1, "arg1");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(arg2, "arg2");
	var array = System.Linq.Expressions.Expression.ValidateMethodAndGetParameters(null, method);
	System.Linq.Expressions.Expression.ValidateArgumentCount(method, System.Linq.Expressions.ExpressionType.Call, 3, array);
	arg0 = System.Linq.Expressions.Expression.ValidateOneArgument(method, System.Linq.Expressions.ExpressionType.Call, arg0, array[0]);
	arg1 = System.Linq.Expressions.Expression.ValidateOneArgument(method, System.Linq.Expressions.ExpressionType.Call, arg1, array[1]);
	arg2 = System.Linq.Expressions.Expression.ValidateOneArgument(method, System.Linq.Expressions.ExpressionType.Call, arg2, array[2]);
	return new $asm08.System.Linq.Expressions.MethodCallExpression3(method, arg0, arg1, arg2);
};
System.Linq.Expressions.Expression.Call$3 = function (method, arg0, arg1, arg2, arg3) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(method, "method");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(arg0, "arg0");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(arg1, "arg1");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(arg2, "arg2");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(arg3, "arg3");
	var array = System.Linq.Expressions.Expression.ValidateMethodAndGetParameters(null, method);
	System.Linq.Expressions.Expression.ValidateArgumentCount(method, System.Linq.Expressions.ExpressionType.Call, 4, array);
	arg0 = System.Linq.Expressions.Expression.ValidateOneArgument(method, System.Linq.Expressions.ExpressionType.Call, arg0, array[0]);
	arg1 = System.Linq.Expressions.Expression.ValidateOneArgument(method, System.Linq.Expressions.ExpressionType.Call, arg1, array[1]);
	arg2 = System.Linq.Expressions.Expression.ValidateOneArgument(method, System.Linq.Expressions.ExpressionType.Call, arg2, array[2]);
	arg3 = System.Linq.Expressions.Expression.ValidateOneArgument(method, System.Linq.Expressions.ExpressionType.Call, arg3, array[3]);
	return new $asm08.System.Linq.Expressions.MethodCallExpression4(method, arg0, arg1, arg2, arg3);
};
System.Linq.Expressions.Expression.Call$4 = function (method, arg0, arg1, arg2, arg3, arg4) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(method, "method");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(arg0, "arg0");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(arg1, "arg1");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(arg2, "arg2");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(arg3, "arg3");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(arg4, "arg4");
	var array = System.Linq.Expressions.Expression.ValidateMethodAndGetParameters(null, method);
	System.Linq.Expressions.Expression.ValidateArgumentCount(method, System.Linq.Expressions.ExpressionType.Call, 5, array);
	arg0 = System.Linq.Expressions.Expression.ValidateOneArgument(method, System.Linq.Expressions.ExpressionType.Call, arg0, array[0]);
	arg1 = System.Linq.Expressions.Expression.ValidateOneArgument(method, System.Linq.Expressions.ExpressionType.Call, arg1, array[1]);
	arg2 = System.Linq.Expressions.Expression.ValidateOneArgument(method, System.Linq.Expressions.ExpressionType.Call, arg2, array[2]);
	arg3 = System.Linq.Expressions.Expression.ValidateOneArgument(method, System.Linq.Expressions.ExpressionType.Call, arg3, array[3]);
	arg4 = System.Linq.Expressions.Expression.ValidateOneArgument(method, System.Linq.Expressions.ExpressionType.Call, arg4, array[4]);
	return new $asm08.System.Linq.Expressions.MethodCallExpression5(method, arg0, arg1, arg2, arg3, arg4);
};
System.Linq.Expressions.Expression.Call$5 = function (method, arguments) {
	return System.Linq.Expressions.Expression.Call$8(null, method, arguments);
};
System.Linq.Expressions.Expression.Call$6 = function (method, arguments) {
	return System.Linq.Expressions.Expression.Call$13(null, method, arguments);
};
System.Linq.Expressions.Expression.Call$7 = function (instance, method) {
	return System.Linq.Expressions.Expression.Call$13(instance, method, $asm08.System.Dynamic.Utils.EmptyReadOnlyCollection$b1.Of(System.Linq.Expressions.Expression).Instance);
};
System.Linq.Expressions.Expression.Call$8 = function (instance, method, arguments) {
	return System.Linq.Expressions.Expression.Call$13(instance, method, JSIL.Cast(arguments, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.Expression)));
};
System.Linq.Expressions.Expression.Call$9 = function (instance, method, arg0, arg1) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(method, "method");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(arg0, "arg0");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(arg1, "arg1");
	var array = System.Linq.Expressions.Expression.ValidateMethodAndGetParameters(instance, method);
	System.Linq.Expressions.Expression.ValidateArgumentCount(method, System.Linq.Expressions.ExpressionType.Call, 2, array);
	arg0 = System.Linq.Expressions.Expression.ValidateOneArgument(method, System.Linq.Expressions.ExpressionType.Call, arg0, array[0]);
	arg1 = System.Linq.Expressions.Expression.ValidateOneArgument(method, System.Linq.Expressions.ExpressionType.Call, arg1, array[1]);
	if (instance !== null) {
		return new $asm08.System.Linq.Expressions.InstanceMethodCallExpression2(method, instance, arg0, arg1);
	}
	return new $asm08.System.Linq.Expressions.MethodCallExpression2(method, arg0, arg1);
};
System.Linq.Expressions.Expression.Call$10 = function (instance, method, arg0, arg1, arg2) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(method, "method");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(arg0, "arg0");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(arg1, "arg1");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(arg2, "arg2");
	var array = System.Linq.Expressions.Expression.ValidateMethodAndGetParameters(instance, method);
	System.Linq.Expressions.Expression.ValidateArgumentCount(method, System.Linq.Expressions.ExpressionType.Call, 3, array);
	arg0 = System.Linq.Expressions.Expression.ValidateOneArgument(method, System.Linq.Expressions.ExpressionType.Call, arg0, array[0]);
	arg1 = System.Linq.Expressions.Expression.ValidateOneArgument(method, System.Linq.Expressions.ExpressionType.Call, arg1, array[1]);
	arg2 = System.Linq.Expressions.Expression.ValidateOneArgument(method, System.Linq.Expressions.ExpressionType.Call, arg2, array[2]);
	if (instance !== null) {
		return new $asm08.System.Linq.Expressions.InstanceMethodCallExpression3(method, instance, arg0, arg1, arg2);
	}
	return new $asm08.System.Linq.Expressions.MethodCallExpression3(method, arg0, arg1, arg2);
};
System.Linq.Expressions.Expression.Call$11 = function (instance, methodName, typeArguments, arguments) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(instance, "instance");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(methodName, "methodName");
	if (arguments === null) {
		arguments = JSIL.Array.New(System.Linq.Expressions.Expression, 0);
	}
	return System.Linq.Expressions.Expression.Call$8(instance, System.Linq.Expressions.Expression.FindMethod(
			instance.Type, 
			methodName, 
			typeArguments, 
			arguments, 
			(System.Reflection.BindingFlags.FlattenHierarchy | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public)
		), arguments);
};
System.Linq.Expressions.Expression.Call$12 = function (type, methodName, typeArguments, arguments) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(type, "type");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(methodName, "methodName");
	if (arguments === null) {
		arguments = JSIL.Array.New(System.Linq.Expressions.Expression, 0);
	}
	return System.Linq.Expressions.Expression.Call$8(null, System.Linq.Expressions.Expression.FindMethod(
			type, 
			methodName, 
			typeArguments, 
			arguments, 
			(System.Reflection.BindingFlags.FlattenHierarchy | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static)
		), arguments);
};
System.Linq.Expressions.Expression.Call$13 = function (instance, method, arguments) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(method, "method");
	var args = new JSIL.Variable($asm08.System.Dynamic.Utils.CollectionExtensions.ToReadOnly$b1(System.Linq.Expressions.Expression)(arguments));
	System.Linq.Expressions.Expression.ValidateMethodInfo(method);
	System.Linq.Expressions.Expression.ValidateStaticOrInstanceMethod(instance, method);
	System.Linq.Expressions.Expression.ValidateArgumentTypes(method, System.Linq.Expressions.ExpressionType.Call, /* ref */ args);
	if (instance === null) {
		return new $asm08.System.Linq.Expressions.MethodCallExpressionN(method, args.value);
	}
	return new $asm08.System.Linq.Expressions.InstanceMethodCallExpressionN(method, instance, args.value);
};
System.Linq.Expressions.Expression.ValidateMethodAndGetParameters = function (instance, method) {
	System.Linq.Expressions.Expression.ValidateMethodInfo(method);
	System.Linq.Expressions.Expression.ValidateStaticOrInstanceMethod(instance, method);
	return System.Linq.Expressions.Expression.GetParametersForValidation(method, System.Linq.Expressions.ExpressionType.Call);
};
System.Linq.Expressions.Expression.ValidateStaticOrInstanceMethod = function (instance, method) {
	if (method.IsStatic) {
		if (System.Linq.Expressions.Expression.SilverlightQuirks) {
			return;
		}
		if (instance !== null) {
			throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm08.System.Core.Strings.OnlyStaticMethodsHaveNullInstance, "instance"]);
		}
	} else {
		if (instance === null) {
			throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm08.System.Core.Strings.OnlyStaticMethodsHaveNullInstance, "method"]);
		}
		System.Linq.Expressions.Expression.RequiresCanRead$0(instance, "instance");
		System.Linq.Expressions.Expression.ValidateCallInstanceType(instance.Type, method);
	}
};
System.Linq.Expressions.Expression.ValidateCallInstanceType = function (instanceType, method) {
	if (!$asm08.System.Dynamic.Utils.TypeUtils.IsValidInstanceType(method, instanceType)) {
		throw $asm08.System.Core.Error.InstanceAndMethodTypeMismatch(method, method.DeclaringType, instanceType);
	}
};
System.Linq.Expressions.Expression.ValidateArgumentTypes = function (method, nodeKind, /* ref */ arguments) {
	var parametersForValidation = System.Linq.Expressions.Expression.GetParametersForValidation(method, nodeKind);
	System.Linq.Expressions.Expression.ValidateArgumentCount(method, nodeKind, arguments.value.Count, parametersForValidation);
	var array = null;
	var i = 0;
	var num = parametersForValidation.length;
__loop0__: 
	while (i < num) {
		var expression = arguments.value.get_Item(i);
		expression = System.Linq.Expressions.Expression.ValidateOneArgument(method, nodeKind, expression, parametersForValidation[i]);
		if (!(array || (expression === arguments.value.get_Item(i)))) {
			array = JSIL.Array.New(System.Linq.Expressions.Expression, arguments.value.Count);
		__loop1__: 
			for (var j = 0; j < i; ++j) {
				array[j] = arguments.value.get_Item(j);
			}
		}
		if (array !== null) {
			array[i] = expression;
		}
		++i;
	}
	if (array !== null) {
		arguments.value = new ($asm08.System.Runtime.CompilerServices.TrueReadOnlyCollection$b1.Of(System.Linq.Expressions.Expression)) (array);
	}
};
System.Linq.Expressions.Expression.GetParametersForValidation = function (method, nodeKind) {
	var array = $asm08.System.Dynamic.Utils.TypeExtensions.GetParametersCached(method);
	if (nodeKind === System.Linq.Expressions.ExpressionType.Dynamic) {
		array = $asm08.System.Dynamic.Utils.CollectionExtensions.RemoveFirst$b1(System.Reflection.ParameterInfo)(array);
	}
	return array;
};
System.Linq.Expressions.Expression.ValidateArgumentCount = function (method, nodeKind, count, pis) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				if (pis.length !== count) {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								if (nodeKind <= System.Linq.Expressions.ExpressionType.Invoke) {
									if (nodeKind !== System.Linq.Expressions.ExpressionType.Call) {
										if (nodeKind !== System.Linq.Expressions.ExpressionType.Invoke) {
											__label1__ = "IL_37";
											continue __step1__;
										}
										throw $asm08.System.Core.Error.IncorrectNumberOfLambdaArguments();
									}
								} else {
									if (nodeKind === System.Linq.Expressions.ExpressionType.New) {
										throw $asm08.System.Core.Error.IncorrectNumberOfConstructorArguments();
									}
									if (nodeKind !== System.Linq.Expressions.ExpressionType.Dynamic) {
										__label1__ = "IL_37";
										continue __step1__;
									}
								}
								throw $asm08.System.Core.Error.IncorrectNumberOfMethodCallArguments(method);
								__label1__ = "IL_37";
								continue __step1__;
								break;
							case "IL_37":
								throw $asm08.System.Dynamic.Utils.ContractUtils.Unreachable;
								break __step1__;
						}
					}
				}
				break __step0__;
		}
	}
};
System.Linq.Expressions.Expression.ValidateOneArgument = function (method, nodeKind, $arg, pi) {
	var __label0__ = null;
__step0__: 
	while (true) {
		switch (__label0__) {
			case null:
				var arg = new JSIL.Variable($arg);
				__label0__ = "__entry0__";
				continue __step0__;
				break;
			case "__entry0__":
				System.Linq.Expressions.Expression.RequiresCanRead$0(arg.value, "arguments");
				var type = pi.ParameterType;
				if (type.IsByRef) {
					type = type.GetElementType();
				}
				$asm08.System.Dynamic.Utils.TypeUtils.ValidateType(type);
				if (!($asm08.System.Dynamic.Utils.TypeUtils.AreReferenceAssignable(type, arg.value.Type) || System.Linq.Expressions.Expression.TryQuote(type, /* ref */ arg))) {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								if (nodeKind <= System.Linq.Expressions.ExpressionType.Invoke) {
									if (nodeKind !== System.Linq.Expressions.ExpressionType.Call) {
										if (nodeKind !== System.Linq.Expressions.ExpressionType.Invoke) {
											__label1__ = "IL_85";
											continue __step1__;
										}
										throw $asm08.System.Core.Error.ExpressionTypeDoesNotMatchParameter(arg.value.Type, type);
									}
								} else {
									if (nodeKind === System.Linq.Expressions.ExpressionType.New) {
										throw $asm08.System.Core.Error.ExpressionTypeDoesNotMatchConstructorParameter(arg.value.Type, type);
									}
									if (nodeKind !== System.Linq.Expressions.ExpressionType.Dynamic) {
										__label1__ = "IL_85";
										continue __step1__;
									}
								}
								throw $asm08.System.Core.Error.ExpressionTypeDoesNotMatchMethodParameter(arg.value.Type, type, method);
								__label1__ = "IL_85";
								continue __step1__;
								break;
							case "IL_85":
								throw $asm08.System.Dynamic.Utils.ContractUtils.Unreachable;
								break __step1__;
						}
					}
				}
				return arg.value;
				break __step0__;
		}
	}
};
System.Linq.Expressions.Expression.TryQuote = function (parameterType, /* ref */ argument) {
	var typeFromHandle = System.Linq.Expressions.LambdaExpression;
	if (System.Linq.Expressions.Expression.SilverlightQuirks) {
		typeFromHandle = System.Linq.Expressions.Expression;
	}
	if (!(!$asm08.System.Dynamic.Utils.TypeUtils.IsSameOrSubclass(typeFromHandle, parameterType) || !parameterType.IsAssignableFrom(JSIL.GetType(argument.value)))) {
		argument.value = System.Linq.Expressions.Expression.Quote(argument.value);
		return true;
	}
	return false;
};
System.Linq.Expressions.Expression.FindMethod = function (type, methodName, typeArgs, args, flags) {
	var result = new JSIL.Variable(null);
	var array = type.FindMembers(System.Reflection.MemberTypes.Method, flags, System.Type.FilterNameIgnoreCase, methodName);
	if (!((array !== null) && (array.length !== 0))) {
		throw $asm08.System.Core.Error.MethodDoesNotExistOnType(methodName, type);
	}
	var methods = $asm08.System.Dynamic.Utils.CollectionExtensions.Map$b2(System.Reflection.MemberInfo, System.Reflection.MethodInfo)(JSIL.Cast(array, System.Collections.Generic.ICollection$b1.Of(System.Reflection.MemberInfo)), function (t) {
			return JSIL.Cast(t, System.Reflection.MethodInfo);
		});
	var num = System.Linq.Expressions.Expression.FindBestMethod(methods, typeArgs, args, /* ref */ result);
	if (num === 0) {
		if (!((typeArgs === null) || (typeArgs.length <= 0))) {
			throw $asm08.System.Core.Error.GenericMethodWithArgsDoesNotExistOnType(methodName, type);
		}
		throw $asm08.System.Core.Error.MethodWithArgsDoesNotExistOnType(methodName, type);
	} else {
		if (num > 1) {
			throw $asm08.System.Core.Error.MethodWithMoreThanOneMatch(methodName, type);
		}
		return result.value;
	}
};
System.Linq.Expressions.Expression.FindBestMethod = function (methods, typeArgs, args, /* ref */ method) {
	var num = 0;
	method.value = null;
	var enumerator = methods.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current;
			var methodInfo = System.Linq.Expressions.Expression.ApplyTypeArgs(current, typeArgs);
			if (!((methodInfo === null) || !System.Linq.Expressions.Expression.IsCompatible$1(methodInfo, args))) {
				if (!((method.value !== null) && (method.value.IsPublic || 
							!methodInfo.IsPublic))) {
					method.value = methodInfo;
					num = 1;
				} else if (method.value.IsPublic === methodInfo.IsPublic) {
					++num;
				}
			}
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	return num;
};
System.Linq.Expressions.Expression.IsCompatible$1 = function (m, args) {
	var parametersCached = $asm08.System.Dynamic.Utils.TypeExtensions.GetParametersCached(m);
	if (parametersCached.length !== args.length) {
		return false;
	}
__loop0__: 
	for (var i = 0; i < args.length; ++i) {
		var expression = args[i];
		$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(expression, "argument");
		var type = expression.Type;
		var type2 = parametersCached[i].ParameterType;
		if (type2.IsByRef) {
			type2 = type2.GetElementType();
		}
		if (!($asm08.System.Dynamic.Utils.TypeUtils.AreReferenceAssignable(type2, type) || ($asm08.System.Dynamic.Utils.TypeUtils.IsSameOrSubclass(System.Linq.Expressions.LambdaExpression, type2) && 
					type2.IsAssignableFrom(JSIL.GetType(expression))))) {
			return false;
		}
	}
	return true;
};
System.Linq.Expressions.Expression.ApplyTypeArgs = function (m, typeArgs) {
	if (!((typeArgs !== null) && (typeArgs.length !== 0))) {
		if (!m.IsGenericMethodDefinition) {
			return m;
		}
	} else if (!(!m.IsGenericMethodDefinition || (m.GetGenericArguments().length !== typeArgs.length))) {
		return m.MakeGenericMethod(typeArgs);
	}
	return null;
};
System.Linq.Expressions.Expression.ArrayIndex$1 = function (array, indexes) {
	return System.Linq.Expressions.Expression.ArrayIndex$2(array, JSIL.Cast(indexes, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.Expression)));
};
System.Linq.Expressions.Expression.ArrayIndex$2 = function (array, indexes) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(array, "array");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(indexes, "indexes");
	var type = array.Type;
	if (!type.IsArray) {
		throw $asm08.System.Core.Error.ArgumentMustBeArray();
	}
	var readOnlyCollection = $asm08.System.Dynamic.Utils.CollectionExtensions.ToReadOnly$b1(System.Linq.Expressions.Expression)(indexes);
	if (type.GetArrayRank() !== readOnlyCollection.Count) {
		throw $asm08.System.Core.Error.IncorrectNumberOfIndexes();
	}
	var enumerator = readOnlyCollection.GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current;
			System.Linq.Expressions.Expression.RequiresCanRead$0(current, "indexes");
			if (current.Type !== System.Int32) {
				throw $asm08.System.Core.Error.ArgumentMustBeArrayIndexType();
			}
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	var method = array.Type.GetMethod$4("Get", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public));
	return System.Linq.Expressions.Expression.Call$13(array, method, readOnlyCollection);
};
System.Linq.Expressions.Expression.NewArrayInit$0 = function (type, initializers) {
	return System.Linq.Expressions.Expression.NewArrayInit$1(type, JSIL.Cast(initializers, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.Expression)));
};
System.Linq.Expressions.Expression.NewArrayInit$1 = function (type, initializers) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(type, "type");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(initializers, "initializers");
	if (type.Equals$1(System.Void)) {
		throw $asm08.System.Core.Error.ArgumentCannotBeOfTypeVoid();
	}
	var readOnlyCollection = $asm08.System.Dynamic.Utils.CollectionExtensions.ToReadOnly$b1(System.Linq.Expressions.Expression)(initializers);
	var array = null;
	var i = 0;
	var count = readOnlyCollection.Count;
__loop0__: 
	while (i < count) {
		var expression = new JSIL.Variable(readOnlyCollection.get_Item(i));
		System.Linq.Expressions.Expression.RequiresCanRead$0(expression.value, "initializers");
		if (!$asm08.System.Dynamic.Utils.TypeUtils.AreReferenceAssignable(type, expression.value.Type)) {
			if (!System.Linq.Expressions.Expression.TryQuote(type, /* ref */ expression)) {
				throw $asm08.System.Core.Error.ExpressionTypeCannotInitializeArrayType(expression.value.Type, type);
			}
			if (array === null) {
				array = JSIL.Array.New(System.Linq.Expressions.Expression, readOnlyCollection.Count);
			__loop1__: 
				for (var j = 0; j < i; ++j) {
					array[j] = readOnlyCollection.get_Item(j);
				}
			}
		}
		if (array !== null) {
			array[i] = expression.value;
		}
		++i;
	}
	if (array !== null) {
		readOnlyCollection = new ($asm08.System.Runtime.CompilerServices.TrueReadOnlyCollection$b1.Of(System.Linq.Expressions.Expression)) (array);
	}
	return System.Linq.Expressions.NewArrayExpression.Make(System.Linq.Expressions.ExpressionType.NewArrayInit, type.MakeArrayType$0(), readOnlyCollection);
};
System.Linq.Expressions.Expression.NewArrayBounds$0 = function (type, bounds) {
	return System.Linq.Expressions.Expression.NewArrayBounds$1(type, JSIL.Cast(bounds, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.Expression)));
};
System.Linq.Expressions.Expression.NewArrayBounds$1 = function (type, bounds) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(type, "type");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(bounds, "bounds");
	if (type.Equals$1(System.Void)) {
		throw $asm08.System.Core.Error.ArgumentCannotBeOfTypeVoid();
	}
	var readOnlyCollection = $asm08.System.Dynamic.Utils.CollectionExtensions.ToReadOnly$b1(System.Linq.Expressions.Expression)(bounds);
	var count = readOnlyCollection.Count;
	if (count <= 0) {
		throw $asm08.System.Core.Error.BoundsCannotBeLessThanOne();
	}
__loop0__: 
	for (var i = 0; i < count; ++i) {
		var expression = readOnlyCollection.get_Item(i);
		System.Linq.Expressions.Expression.RequiresCanRead$0(expression, "bounds");
		if (!$asm08.System.Dynamic.Utils.TypeUtils.IsInteger(expression.Type)) {
			throw $asm08.System.Core.Error.ArgumentMustBeInteger();
		}
	}
	if (count === 1) {
		var type2 = type.MakeArrayType$0();
	} else {
		type2 = type.MakeArrayType$1(count);
	}
	return System.Linq.Expressions.NewArrayExpression.Make(System.Linq.Expressions.ExpressionType.NewArrayBounds, type2, $asm08.System.Dynamic.Utils.CollectionExtensions.ToReadOnly$b1(System.Linq.Expressions.Expression)(bounds));
};
System.Linq.Expressions.Expression.New$0 = function (constructor) {
	return System.Linq.Expressions.Expression.New$2(constructor, null);
};
System.Linq.Expressions.Expression.New$1 = function (constructor, arguments) {
	return System.Linq.Expressions.Expression.New$2(constructor, JSIL.Cast(arguments, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.Expression)));
};
System.Linq.Expressions.Expression.New$2 = function (constructor, arguments) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(constructor, "constructor");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(constructor.DeclaringType, "constructor.DeclaringType");
	$asm08.System.Dynamic.Utils.TypeUtils.ValidateType(constructor.DeclaringType);
	var arguments2 = new JSIL.Variable($asm08.System.Dynamic.Utils.CollectionExtensions.ToReadOnly$b1(System.Linq.Expressions.Expression)(arguments));
	System.Linq.Expressions.Expression.ValidateArgumentTypes(constructor, System.Linq.Expressions.ExpressionType.New, /* ref */ arguments2);
	return new System.Linq.Expressions.NewExpression(constructor, arguments2.value, null);
};
System.Linq.Expressions.Expression.New$3 = function (constructor, arguments, members) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(constructor, "constructor");
	var members2 = new JSIL.Variable($asm08.System.Dynamic.Utils.CollectionExtensions.ToReadOnly$b1(System.Reflection.MemberInfo)(members));
	var arguments2 = new JSIL.Variable($asm08.System.Dynamic.Utils.CollectionExtensions.ToReadOnly$b1(System.Linq.Expressions.Expression)(arguments));
	System.Linq.Expressions.Expression.ValidateNewArgs(constructor, /* ref */ arguments2, /* ref */ members2);
	return new System.Linq.Expressions.NewExpression(constructor, arguments2.value, members2.value);
};
System.Linq.Expressions.Expression.New$4 = function (constructor, arguments, members) {
	return System.Linq.Expressions.Expression.New$3(constructor, arguments, JSIL.Cast(members, System.Collections.Generic.IEnumerable$b1.Of(System.Reflection.MemberInfo)));
};
System.Linq.Expressions.Expression.New$5 = function (type) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(type, "type");
	if (type === System.Void) {
		throw $asm08.System.Core.Error.ArgumentCannotBeOfTypeVoid();
	}
	if (type.IsValueType) {
		return new $asm08.System.Linq.Expressions.NewValueTypeExpression(type, $asm08.System.Dynamic.Utils.EmptyReadOnlyCollection$b1.Of(System.Linq.Expressions.Expression).Instance, null);
	}
	var constructor = type.GetConstructor$1((System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public), null, System.Type.EmptyTypes, null);
	if (constructor === null) {
		throw $asm08.System.Core.Error.TypeMissingDefaultConstructor(type);
	}
	return System.Linq.Expressions.Expression.New$0(constructor);
};
System.Linq.Expressions.Expression.ValidateNewArgs = function (constructor, /* ref */ arguments, /* ref */ members) {
	var parametersCached = null, type = new JSIL.Variable(null);
	if ((parametersCached = $asm08.System.Dynamic.Utils.TypeExtensions.GetParametersCached(constructor)).length > 0) {
		if (arguments.value.Count !== parametersCached.length) {
			throw $asm08.System.Core.Error.IncorrectNumberOfConstructorArguments();
		}
		if (arguments.value.Count !== members.value.Count) {
			throw $asm08.System.Core.Error.IncorrectNumberOfArgumentsForMembers();
		}
		var array = null;
		var array2 = null;
		var i = 0;
		var count = arguments.value.Count;
	__loop0__: 
		while (i < count) {
			var expression = new JSIL.Variable(arguments.value.get_Item(i));
			System.Linq.Expressions.Expression.RequiresCanRead$0(expression.value, "argument");
			var memberInfo = new JSIL.Variable(members.value.get_Item(i));
			$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(memberInfo.value, "member");
			if (!$asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(memberInfo.value.DeclaringType, constructor.DeclaringType)) {
				throw $asm08.System.Core.Error.ArgumentMemberNotDeclOnType(memberInfo.value.Name, constructor.DeclaringType.Name);
			}
			System.Linq.Expressions.Expression.ValidateAnonymousTypeMember(/* ref */ memberInfo, /* ref */ type);
			if (!($asm08.System.Dynamic.Utils.TypeUtils.AreReferenceAssignable(type.value, expression.value.Type) || System.Linq.Expressions.Expression.TryQuote(type.value, /* ref */ expression))) {
				throw $asm08.System.Core.Error.ArgumentTypeDoesNotMatchMember(expression.value.Type, type.value);
			}
			var type2 = parametersCached[i].ParameterType;
			if (type2.IsByRef) {
				type2 = type2.GetElementType();
			}
			if (!($asm08.System.Dynamic.Utils.TypeUtils.AreReferenceAssignable(type2, expression.value.Type) || System.Linq.Expressions.Expression.TryQuote(type2, /* ref */ expression))) {
				throw $asm08.System.Core.Error.ExpressionTypeDoesNotMatchConstructorParameter(expression.value.Type, type2);
			}
			if (!(array || (expression.value === arguments.value.get_Item(i)))) {
				array = JSIL.Array.New(System.Linq.Expressions.Expression, arguments.value.Count);
			__loop1__: 
				for (var j = 0; j < i; ++j) {
					array[j] = arguments.value.get_Item(j);
				}
			}
			if (array !== null) {
				array[i] = expression.value;
			}
			if (!(array2 || (memberInfo.value === members.value.get_Item(i)))) {
				array2 = JSIL.Array.New(System.Reflection.MemberInfo, members.value.Count);
			__loop2__: 
				for (var k = 0; k < i; ++k) {
					array2[k] = members.value.get_Item(k);
				}
			}
			if (array2 !== null) {
				array2[i] = memberInfo.value;
			}
			++i;
		}
		if (array !== null) {
			arguments.value = new ($asm08.System.Runtime.CompilerServices.TrueReadOnlyCollection$b1.Of(System.Linq.Expressions.Expression)) (array);
		}
		if (array2 !== null) {
			members.value = new ($asm08.System.Runtime.CompilerServices.TrueReadOnlyCollection$b1.Of(System.Reflection.MemberInfo)) (array2);
			return;
		}
	} else {
		if (!((arguments.value === null) || (arguments.value.Count <= 0))) {
			throw $asm08.System.Core.Error.IncorrectNumberOfConstructorArguments();
		}
		if (!((members.value === null) || (members.value.Count <= 0))) {
			throw $asm08.System.Core.Error.IncorrectNumberOfMembersForGivenConstructor();
		}
	}
};
System.Linq.Expressions.Expression.ValidateAnonymousTypeMember = function (/* ref */ member, /* ref */ memberType) {
	var memberType2 = member.value.MemberType;
	if (memberType2 !== System.Reflection.MemberTypes.Field) {
		if (memberType2 !== System.Reflection.MemberTypes.Method) {
			if (memberType2 !== System.Reflection.MemberTypes.Property) {
				throw $asm08.System.Core.Error.ArgumentMustBeFieldInfoOrPropertInfoOrMethod();
			}
			var propertyInfo = JSIL.TryCast(member.value, System.Reflection.PropertyInfo);
			if (!propertyInfo.CanRead) {
				throw $asm08.System.Core.Error.PropertyDoesNotHaveGetter(propertyInfo);
			}
			if (propertyInfo.GetGetMethod$1().IsStatic) {
				throw $asm08.System.Core.Error.ArgumentMustBeInstanceMember();
			}
			memberType.value = propertyInfo.PropertyType;
			return;
		} else {
			var methodInfo = JSIL.TryCast(member.value, System.Reflection.MethodInfo);
			if (methodInfo.IsStatic) {
				throw $asm08.System.Core.Error.ArgumentMustBeInstanceMember();
			}
			if (System.Linq.Expressions.Expression.SilverlightQuirks) {
				memberType.value = methodInfo.ReturnType;
				return;
			}
			var property = System.Linq.Expressions.Expression.GetProperty(methodInfo);
			member.value = property;
			memberType.value = property.PropertyType;
			return;
		}
	} else {
		var fieldInfo = JSIL.TryCast(member.value, System.Reflection.FieldInfo);
		if (fieldInfo.IsStatic) {
			throw $asm08.System.Core.Error.ArgumentMustBeInstanceMember();
		}
		memberType.value = fieldInfo.FieldType;
		return;
	}
};
System.Linq.Expressions.Expression.Parameter$0 = function (type) {
	return System.Linq.Expressions.Expression.Parameter$1(type, null);
};
System.Linq.Expressions.Expression.Variable$0 = function (type) {
	return System.Linq.Expressions.Expression.Variable$1(type, null);
};
System.Linq.Expressions.Expression.Parameter$1 = function (type, name) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(type, "type");
	if (type === System.Void) {
		throw $asm08.System.Core.Error.ArgumentCannotBeOfTypeVoid();
	}
	var isByRef = type.IsByRef;
	if (isByRef) {
		type = type.GetElementType();
	}
	return System.Linq.Expressions.ParameterExpression.Make(type, name, isByRef);
};
System.Linq.Expressions.Expression.Variable$1 = function (type, name) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(type, "type");
	if (type === System.Void) {
		throw $asm08.System.Core.Error.ArgumentCannotBeOfTypeVoid();
	}
	if (type.IsByRef) {
		throw $asm08.System.Core.Error.TypeMustNotBeByRef();
	}
	return System.Linq.Expressions.ParameterExpression.Make(type, name, false);
};
System.Linq.Expressions.Expression.RuntimeVariables$0 = function (variables) {
	return System.Linq.Expressions.Expression.RuntimeVariables$1(JSIL.Cast(variables, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.ParameterExpression)));
};
System.Linq.Expressions.Expression.RuntimeVariables$1 = function (variables) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(variables, "variables");
	var readOnlyCollection = $asm08.System.Dynamic.Utils.CollectionExtensions.ToReadOnly$b1(System.Linq.Expressions.ParameterExpression)(variables);
__loop0__: 
	for (var i = 0; i < readOnlyCollection.Count; ++i) {
		if (readOnlyCollection.get_Item(i) === null) {
			throw JSIL.New(System.ArgumentNullException, "_ctor$1", [JSIL.ConcatString("variables[", i, "]")]);
		}
	}
	return new System.Linq.Expressions.RuntimeVariablesExpression(readOnlyCollection);
};
System.Linq.Expressions.Expression.SwitchCase$0 = function (body, testValues) {
	return System.Linq.Expressions.Expression.SwitchCase$1(body, JSIL.Cast(testValues, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.Expression)));
};
System.Linq.Expressions.Expression.SwitchCase$1 = function (body, testValues) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(body, "body");
	var readOnlyCollection = $asm08.System.Dynamic.Utils.CollectionExtensions.ToReadOnly$b1(System.Linq.Expressions.Expression)(testValues);
	System.Linq.Expressions.Expression.RequiresCanRead$1(readOnlyCollection, "testValues");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotEmpty$b1(System.Linq.Expressions.Expression)(readOnlyCollection, "testValues");
	return new System.Linq.Expressions.SwitchCase(body, readOnlyCollection);
};
System.Linq.Expressions.Expression.Switch$0 = function (switchValue, cases) {
	return System.Linq.Expressions.Expression.Switch$4(switchValue, null, null, JSIL.Cast(cases, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.SwitchCase)));
};
System.Linq.Expressions.Expression.Switch$1 = function (switchValue, defaultBody, cases) {
	return System.Linq.Expressions.Expression.Switch$4(switchValue, defaultBody, null, JSIL.Cast(cases, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.SwitchCase)));
};
System.Linq.Expressions.Expression.Switch$2 = function (switchValue, defaultBody, comparison, cases) {
	return System.Linq.Expressions.Expression.Switch$4(switchValue, defaultBody, comparison, JSIL.Cast(cases, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.SwitchCase)));
};
System.Linq.Expressions.Expression.Switch$3 = function (type, switchValue, defaultBody, comparison, cases) {
	return System.Linq.Expressions.Expression.Switch$5(
		type, 
		switchValue, 
		defaultBody, 
		comparison, 
		JSIL.Cast(cases, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.SwitchCase))
	);
};
System.Linq.Expressions.Expression.Switch$4 = function (switchValue, defaultBody, comparison, cases) {
	return System.Linq.Expressions.Expression.Switch$5(
		null, 
		switchValue, 
		defaultBody, 
		comparison, 
		cases
	);
};
System.Linq.Expressions.Expression.Switch$5 = function (type, switchValue, defaultBody, comparison, cases) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				System.Linq.Expressions.Expression.RequiresCanRead$0(switchValue, "switchValue");
				if (switchValue.Type === System.Void) {
					throw $asm08.System.Core.Error.ArgumentCannotBeOfTypeVoid();
				}
				var readOnlyCollection = $asm08.System.Dynamic.Utils.CollectionExtensions.ToReadOnly$b1(System.Linq.Expressions.SwitchCase)(cases);
				$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotEmpty$b1(System.Linq.Expressions.SwitchCase)(readOnlyCollection, "cases");
				$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNullItems$b1(System.Linq.Expressions.SwitchCase)(readOnlyCollection, "cases");
				var type2 = JSIL.Coalesce(type, readOnlyCollection.get_Item(0).Body.Type);
				var customType = (type !== null);
				if (comparison !== null) {
					var parametersCached = $asm08.System.Dynamic.Utils.TypeExtensions.GetParametersCached(comparison);
					if (parametersCached.length !== 2) {
						throw $asm08.System.Core.Error.IncorrectNumberOfMethodCallArguments(comparison);
					}
					var parameterInfo = parametersCached[0];
					var flag = false;
					if (!System.Linq.Expressions.Expression.ParameterIsAssignable(parameterInfo, switchValue.Type)) {
						flag = System.Linq.Expressions.Expression.ParameterIsAssignable(parameterInfo, $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(switchValue.Type));
						if (!flag) {
							throw $asm08.System.Core.Error.SwitchValueTypeDoesNotMatchComparisonMethodParameter(switchValue.Type, parameterInfo.ParameterType);
						}
					}
					var parameterInfo2 = parametersCached[1];
					var enumerator = readOnlyCollection.GetEnumerator();
					try {
					__loop0__: 
						while (enumerator.IEnumerator_MoveNext()) {
							var current = enumerator.IEnumerator$b1_Current;
							$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(current, "cases");
							System.Linq.Expressions.Expression.ValidateSwitchCaseType(current.Body, customType, type2, "cases");
						__loop1__: 
							for (var i = 0; i < current.TestValues.Count; ++i) {
								var type3 = current.TestValues.get_Item(i).Type;
								if (flag) {
									if (!$asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(type3)) {
										throw $asm08.System.Core.Error.TestValueTypeDoesNotMatchComparisonMethodParameter(type3, parameterInfo2.ParameterType);
									}
									type3 = $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(type3);
								}
								if (!System.Linq.Expressions.Expression.ParameterIsAssignable(parameterInfo2, type3)) {
									throw $asm08.System.Core.Error.TestValueTypeDoesNotMatchComparisonMethodParameter(type3, parameterInfo2.ParameterType);
								}
							}
						}
						__label0__ = "IL_240";
						continue __step0__;
					} finally {
						if (enumerator !== null) {
							enumerator.IDisposable_Dispose();
						}
					}
				}
				var expression = (readOnlyCollection.get_Item(0).TestValues).get_Item(0);
				var enumerator2 = readOnlyCollection.GetEnumerator();
				try {
				__loop2__: 
					while (enumerator2.IEnumerator_MoveNext()) {
						var current2 = enumerator2.IEnumerator$b1_Current;
						$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(current2, "cases");
						System.Linq.Expressions.Expression.ValidateSwitchCaseType(current2.Body, customType, type2, "cases");
					__loop3__: 
						for (var j = 0; j < current2.TestValues.Count; ++j) {
							if (!$asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(expression.Type, current2.TestValues.get_Item(j).Type)) {
								throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm08.System.Core.Strings.AllTestValuesMustHaveSameType, "cases"]);
							}
						}
					}
				} finally {
					if (enumerator2 !== null) {
						enumerator2.IDisposable_Dispose();
					}
				}
				var binaryExpression = System.Linq.Expressions.Expression.Equal$1(switchValue, expression, false, comparison);
				comparison = binaryExpression.Method;
				__label0__ = "IL_240";
				continue __step0__;
				break;
			case "IL_240":
				if (defaultBody === null) {
					if (type2 !== System.Void) {
						throw $asm08.System.Core.Error.DefaultBodyMustBeSupplied();
					}
				} else {
					System.Linq.Expressions.Expression.ValidateSwitchCaseType(defaultBody, customType, type2, "defaultBody");
				}
				if (!((comparison === null) || (comparison.ReturnType === System.Boolean))) {
					throw $asm08.System.Core.Error.EqualityMustReturnBoolean(comparison);
				}
				return new System.Linq.Expressions.SwitchExpression(type2, switchValue, defaultBody, comparison, readOnlyCollection);
				break __step0__;
		}
	}
};
System.Linq.Expressions.Expression.ValidateSwitchCaseType = function ($case, customType, resultType, parameterName) {
	if (customType) {
		if (!((resultType === System.Void) || $asm08.System.Dynamic.Utils.TypeUtils.AreReferenceAssignable(resultType, $case.Type))) {
			throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm08.System.Core.Strings.ArgumentTypesMustMatch, parameterName]);
		}
	} else if (!$asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(resultType, $case.Type)) {
		throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm08.System.Core.Strings.AllCaseBodiesMustHaveSameType, parameterName]);
	}
};
System.Linq.Expressions.Expression.SymbolDocument$0 = function (fileName) {
	return new System.Linq.Expressions.SymbolDocumentInfo(fileName);
};
System.Linq.Expressions.Expression.SymbolDocument$1 = function (fileName, language) {
	return JSIL.New($asm08.System.Linq.Expressions.SymbolDocumentWithGuids, "_ctor$0", [fileName, language]);
};
System.Linq.Expressions.Expression.SymbolDocument$2 = function (fileName, language, languageVendor) {
	return JSIL.New($asm08.System.Linq.Expressions.SymbolDocumentWithGuids, "_ctor$1", [fileName, language, languageVendor]);
};
System.Linq.Expressions.Expression.SymbolDocument$3 = function (fileName, language, languageVendor, documentType) {
	return JSIL.New($asm08.System.Linq.Expressions.SymbolDocumentWithGuids, "_ctor$2", [fileName, language, languageVendor, documentType]);
};
System.Linq.Expressions.Expression.TryFault = function (body, fault) {
	return System.Linq.Expressions.Expression.MakeTry(
		null, 
		body, 
		null, 
		fault, 
		null
	);
};
System.Linq.Expressions.Expression.TryFinally = function (body, $finally) {
	return System.Linq.Expressions.Expression.MakeTry(
		null, 
		body, 
		$finally, 
		null, 
		null
	);
};
System.Linq.Expressions.Expression.TryCatch = function (body, handlers) {
	return System.Linq.Expressions.Expression.MakeTry(
		null, 
		body, 
		null, 
		null, 
		handlers
	);
};
System.Linq.Expressions.Expression.TryCatchFinally = function (body, $finally, handlers) {
	return System.Linq.Expressions.Expression.MakeTry(
		null, 
		body, 
		$finally, 
		null, 
		handlers
	);
};
System.Linq.Expressions.Expression.MakeTry = function (type, body, $finally, fault, handlers) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(body, "body");
	var readOnlyCollection = $asm08.System.Dynamic.Utils.CollectionExtensions.ToReadOnly$b1(System.Linq.Expressions.CatchBlock)(handlers);
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNullItems$b1(System.Linq.Expressions.CatchBlock)(readOnlyCollection, "handlers");
	System.Linq.Expressions.Expression.ValidateTryAndCatchHaveSameType(type, body, readOnlyCollection);
	if (fault !== null) {
		if (!(($finally === null) && (readOnlyCollection.Count <= 0))) {
			throw $asm08.System.Core.Error.FaultCannotHaveCatchOrFinally();
		}
		System.Linq.Expressions.Expression.RequiresCanRead$0(fault, "fault");
	} else if ($finally !== null) {
		System.Linq.Expressions.Expression.RequiresCanRead$0($finally, "finally");
	} else if (readOnlyCollection.Count === 0) {
		throw $asm08.System.Core.Error.TryMustHaveCatchFinallyOrFault();
	}
	return new System.Linq.Expressions.TryExpression(JSIL.Coalesce(type, body.Type), body, $finally, fault, readOnlyCollection);
};
System.Linq.Expressions.Expression.ValidateTryAndCatchHaveSameType = function (type, tryBody, handlers) {
	if (type !== null) {
		if (type === System.Void) {
			return;
		}
		if (!$asm08.System.Dynamic.Utils.TypeUtils.AreReferenceAssignable(type, tryBody.Type)) {
			throw $asm08.System.Core.Error.ArgumentTypesMustMatch();
		}
		var enumerator = handlers.GetEnumerator();
		try {
		__loop0__: 
			while (enumerator.IEnumerator_MoveNext()) {
				var current = enumerator.IEnumerator$b1_Current;
				if (!$asm08.System.Dynamic.Utils.TypeUtils.AreReferenceAssignable(type, current.Body.Type)) {
					throw $asm08.System.Core.Error.ArgumentTypesMustMatch();
				}
			}
			return;
		} finally {
			if (enumerator !== null) {
				enumerator.IDisposable_Dispose();
			}
		}
	}
	if (!((tryBody !== null) && (tryBody.Type !== System.Void))) {
		var enumerator2 = handlers.GetEnumerator();
		try {
		__loop1__: 
			while (enumerator2.IEnumerator_MoveNext()) {
				var current2 = enumerator2.IEnumerator$b1_Current;
				if (!((current2.Body === null) || (current2.Body.Type === System.Void))) {
					throw $asm08.System.Core.Error.BodyOfCatchMustHaveSameTypeAsBodyOfTry();
				}
			}
			return;
		} finally {
			if (enumerator2 !== null) {
				enumerator2.IDisposable_Dispose();
			}
		}
	}
	type = tryBody.Type;
	var enumerator3 = handlers.GetEnumerator();
	try {
	__loop2__: 
		while (enumerator3.IEnumerator_MoveNext()) {
			var current3 = enumerator3.IEnumerator$b1_Current;
			if (!((current3.Body !== null) && $asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(current3.Body.Type, type))) {
				throw $asm08.System.Core.Error.BodyOfCatchMustHaveSameTypeAsBodyOfTry();
			}
		}
	} finally {
		if (enumerator3 !== null) {
			enumerator3.IDisposable_Dispose();
		}
	}
};
System.Linq.Expressions.Expression.TypeIs = function (expression, type) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(expression, "expression");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(type, "type");
	if (type.IsByRef) {
		throw $asm08.System.Core.Error.TypeMustNotBeByRef();
	}
	return new System.Linq.Expressions.TypeBinaryExpression(expression, type, System.Linq.Expressions.ExpressionType.TypeIs);
};
System.Linq.Expressions.Expression.TypeEqual = function (expression, type) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(expression, "expression");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(type, "type");
	if (type.IsByRef) {
		throw $asm08.System.Core.Error.TypeMustNotBeByRef();
	}
	return new System.Linq.Expressions.TypeBinaryExpression(expression, type, System.Linq.Expressions.ExpressionType.TypeEqual);
};
System.Linq.Expressions.Expression.MakeUnary$0 = function (unaryType, operand, type) {
	return System.Linq.Expressions.Expression.MakeUnary$1(unaryType, operand, type, null);
};
System.Linq.Expressions.Expression.MakeUnary$1 = function (unaryType, operand, type, method) {
	if (unaryType <= System.Linq.Expressions.ExpressionType.Quote) {
		if (unaryType <= System.Linq.Expressions.ExpressionType.ConvertChecked) {
			if (unaryType === System.Linq.Expressions.ExpressionType.ArrayLength) {
				return System.Linq.Expressions.Expression.ArrayLength(operand);
			}
			switch (Number(unaryType)) {
				case 10: 
					return System.Linq.Expressions.Expression.Convert$1(operand, type, method);
				case 11: 
					return System.Linq.Expressions.Expression.ConvertChecked$1(operand, type, method);
			}
		} else {
			switch (Number(unaryType)) {
				case 28: 
					return System.Linq.Expressions.Expression.Negate$1(operand, method);
				case 29: 
					return System.Linq.Expressions.Expression.UnaryPlus$1(operand, method);
				case 30: 
					return System.Linq.Expressions.Expression.NegateChecked$1(operand, method);
				case 31: 
				case 32: 
				case 33: 
					break;
				case 34: 
					return System.Linq.Expressions.Expression.Not$1(operand, method);
				default: 
					if (unaryType === System.Linq.Expressions.ExpressionType.Quote) {
						return System.Linq.Expressions.Expression.Quote(operand);
					}
					break;
			}
		}
	} else if (unaryType <= System.Linq.Expressions.ExpressionType.Decrement) {
		if (unaryType === System.Linq.Expressions.ExpressionType.TypeAs) {
			return System.Linq.Expressions.Expression.TypeAs(operand, type);
		}
		if (unaryType === System.Linq.Expressions.ExpressionType.Decrement) {
			return System.Linq.Expressions.Expression.Decrement$1(operand, method);
		}
	} else {
		if (unaryType === System.Linq.Expressions.ExpressionType.Increment) {
			return System.Linq.Expressions.Expression.Increment$1(operand, method);
		}
		switch (Number(unaryType)) {
			case 60: 
				return System.Linq.Expressions.Expression.Throw$1(operand, type);
			case 61: 
				break;
			case 62: 
				return System.Linq.Expressions.Expression.Unbox(operand, type);
			default: 
				switch (Number(unaryType)) {
					case 77: 
						return System.Linq.Expressions.Expression.PreIncrementAssign$1(operand, method);
					case 78: 
						return System.Linq.Expressions.Expression.PreDecrementAssign$1(operand, method);
					case 79: 
						return System.Linq.Expressions.Expression.PostIncrementAssign$1(operand, method);
					case 80: 
						return System.Linq.Expressions.Expression.PostDecrementAssign$1(operand, method);
					case 82: 
						return System.Linq.Expressions.Expression.OnesComplement$1(operand, method);
					case 83: 
						return System.Linq.Expressions.Expression.IsTrue$1(operand, method);
					case 84: 
						return System.Linq.Expressions.Expression.IsFalse$1(operand, method);
				}
				break;
		}
	}
	throw $asm08.System.Core.Error.UnhandledUnary(unaryType);
};
System.Linq.Expressions.Expression.GetUserDefinedUnaryOperatorOrThrow = function (unaryType, name, operand) {
	var userDefinedUnaryOperator = System.Linq.Expressions.Expression.GetUserDefinedUnaryOperator(unaryType, name, operand);
	if (userDefinedUnaryOperator !== null) {
		System.Linq.Expressions.Expression.ValidateParamswithOperandsOrThrow($asm08.System.Dynamic.Utils.TypeExtensions.GetParametersCached(userDefinedUnaryOperator.Method)[0].ParameterType, operand.Type, unaryType, name);
		return userDefinedUnaryOperator;
	}
	throw $asm08.System.Core.Error.UnaryOperatorNotDefined(unaryType, operand.Type);
};
System.Linq.Expressions.Expression.GetUserDefinedUnaryOperator = function (unaryType, name, operand) {
	var type = operand.Type;
	var array = JSIL.Array.New(System.Type, [type]);
	var nonNullableType = $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(type);
	var bindingAttr = (System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static);
	var methodValidated = $asm08.System.Dynamic.Utils.TypeExtensions.GetMethodValidated(
		nonNullableType, 
		name, 
		bindingAttr, 
		null, 
		array, 
		null
	);
	if (methodValidated !== null) {
		return new System.Linq.Expressions.UnaryExpression(unaryType, operand, methodValidated.ReturnType, methodValidated);
	}
	if ($asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(type)) {
		array[0] = nonNullableType;
		methodValidated = $asm08.System.Dynamic.Utils.TypeExtensions.GetMethodValidated(
			nonNullableType, 
			name, 
			bindingAttr, 
			null, 
			array, 
			null
		);
		if (!((methodValidated === null) || 
				!methodValidated.ReturnType.IsValueType || $asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(methodValidated.ReturnType))) {
			return new System.Linq.Expressions.UnaryExpression(unaryType, operand, $asm08.System.Dynamic.Utils.TypeUtils.GetNullableType(methodValidated.ReturnType), methodValidated);
		}
	}
	return null;
};
System.Linq.Expressions.Expression.GetMethodBasedUnaryOperator = function (unaryType, operand, method) {
	System.Linq.Expressions.Expression.ValidateOperator(method);
	var parametersCached = $asm08.System.Dynamic.Utils.TypeExtensions.GetParametersCached(method);
	if (parametersCached.length !== 1) {
		throw $asm08.System.Core.Error.IncorrectNumberOfMethodCallArguments(method);
	}
	if (System.Linq.Expressions.Expression.ParameterIsAssignable(parametersCached[0], operand.Type)) {
		System.Linq.Expressions.Expression.ValidateParamswithOperandsOrThrow(parametersCached[0].ParameterType, operand.Type, unaryType, method.Name);
		return new System.Linq.Expressions.UnaryExpression(unaryType, operand, method.ReturnType, method);
	}
	if (!(!$asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(operand.Type) || 
			!System.Linq.Expressions.Expression.ParameterIsAssignable(parametersCached[0], $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(operand.Type)) || 
			!method.ReturnType.IsValueType || $asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(method.ReturnType))) {
		return new System.Linq.Expressions.UnaryExpression(unaryType, operand, $asm08.System.Dynamic.Utils.TypeUtils.GetNullableType(method.ReturnType), method);
	}
	throw $asm08.System.Core.Error.OperandTypesDoNotMatchParameters(unaryType, method.Name);
};
System.Linq.Expressions.Expression.GetUserDefinedCoercionOrThrow = function (coercionType, expression, convertToType) {
	var userDefinedCoercion = System.Linq.Expressions.Expression.GetUserDefinedCoercion(coercionType, expression, convertToType);
	if (userDefinedCoercion !== null) {
		return userDefinedCoercion;
	}
	throw $asm08.System.Core.Error.CoercionOperatorNotDefined(expression.Type, convertToType);
};
System.Linq.Expressions.Expression.GetUserDefinedCoercion = function (coercionType, expression, convertToType) {
	var userDefinedCoercionMethod = $asm08.System.Dynamic.Utils.TypeUtils.GetUserDefinedCoercionMethod(expression.Type, convertToType, false);
	if (userDefinedCoercionMethod !== null) {
		return new System.Linq.Expressions.UnaryExpression(coercionType, expression, convertToType, userDefinedCoercionMethod);
	}
	return null;
};
System.Linq.Expressions.Expression.GetMethodBasedCoercionOperator = function (unaryType, operand, convertToType, method) {
	System.Linq.Expressions.Expression.ValidateOperator(method);
	var parametersCached = $asm08.System.Dynamic.Utils.TypeExtensions.GetParametersCached(method);
	if (parametersCached.length !== 1) {
		throw $asm08.System.Core.Error.IncorrectNumberOfMethodCallArguments(method);
	}
	if (!(!System.Linq.Expressions.Expression.ParameterIsAssignable(parametersCached[0], operand.Type) || !$asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(method.ReturnType, convertToType))) {
		return new System.Linq.Expressions.UnaryExpression(unaryType, operand, method.ReturnType, method);
	}
	if (!((!$asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(operand.Type) && 
				!$asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(convertToType)) || 
			!System.Linq.Expressions.Expression.ParameterIsAssignable(parametersCached[0], $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(operand.Type)) || !$asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(method.ReturnType, $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(convertToType)))) {
		return new System.Linq.Expressions.UnaryExpression(unaryType, operand, convertToType, method);
	}
	throw $asm08.System.Core.Error.OperandTypesDoNotMatchParameters(unaryType, method.Name);
};
System.Linq.Expressions.Expression.Negate$0 = function (expression) {
	return System.Linq.Expressions.Expression.Negate$1(expression, null);
};
System.Linq.Expressions.Expression.Negate$1 = function (expression, method) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(expression, "expression");
	if (method !== null) {
		return System.Linq.Expressions.Expression.GetMethodBasedUnaryOperator(System.Linq.Expressions.ExpressionType.Negate, expression, method);
	}
	if (!(!$asm08.System.Dynamic.Utils.TypeUtils.IsArithmetic(expression.Type) || $asm08.System.Dynamic.Utils.TypeUtils.IsUnsignedInt(expression.Type))) {
		return new System.Linq.Expressions.UnaryExpression(System.Linq.Expressions.ExpressionType.Negate, expression, expression.Type, null);
	}
	return System.Linq.Expressions.Expression.GetUserDefinedUnaryOperatorOrThrow(System.Linq.Expressions.ExpressionType.Negate, "op_UnaryNegation", expression);
};
System.Linq.Expressions.Expression.UnaryPlus$0 = function (expression) {
	return System.Linq.Expressions.Expression.UnaryPlus$1(expression, null);
};
System.Linq.Expressions.Expression.UnaryPlus$1 = function (expression, method) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(expression, "expression");
	if (method !== null) {
		return System.Linq.Expressions.Expression.GetMethodBasedUnaryOperator(System.Linq.Expressions.ExpressionType.UnaryPlus, expression, method);
	}
	if ($asm08.System.Dynamic.Utils.TypeUtils.IsArithmetic(expression.Type)) {
		return new System.Linq.Expressions.UnaryExpression(System.Linq.Expressions.ExpressionType.UnaryPlus, expression, expression.Type, null);
	}
	return System.Linq.Expressions.Expression.GetUserDefinedUnaryOperatorOrThrow(System.Linq.Expressions.ExpressionType.UnaryPlus, "op_UnaryPlus", expression);
};
System.Linq.Expressions.Expression.NegateChecked$0 = function (expression) {
	return System.Linq.Expressions.Expression.NegateChecked$1(expression, null);
};
System.Linq.Expressions.Expression.NegateChecked$1 = function (expression, method) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(expression, "expression");
	if (method !== null) {
		return System.Linq.Expressions.Expression.GetMethodBasedUnaryOperator(System.Linq.Expressions.ExpressionType.NegateChecked, expression, method);
	}
	if (!(!$asm08.System.Dynamic.Utils.TypeUtils.IsArithmetic(expression.Type) || $asm08.System.Dynamic.Utils.TypeUtils.IsUnsignedInt(expression.Type))) {
		return new System.Linq.Expressions.UnaryExpression(System.Linq.Expressions.ExpressionType.NegateChecked, expression, expression.Type, null);
	}
	return System.Linq.Expressions.Expression.GetUserDefinedUnaryOperatorOrThrow(System.Linq.Expressions.ExpressionType.NegateChecked, "op_UnaryNegation", expression);
};
System.Linq.Expressions.Expression.Not$0 = function (expression) {
	return System.Linq.Expressions.Expression.Not$1(expression, null);
};
System.Linq.Expressions.Expression.Not$1 = function (expression, method) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(expression, "expression");
	if (method !== null) {
		return System.Linq.Expressions.Expression.GetMethodBasedUnaryOperator(System.Linq.Expressions.ExpressionType.Not, expression, method);
	}
	if ($asm08.System.Dynamic.Utils.TypeUtils.IsIntegerOrBool(expression.Type)) {
		return new System.Linq.Expressions.UnaryExpression(System.Linq.Expressions.ExpressionType.Not, expression, expression.Type, null);
	}
	var userDefinedUnaryOperator = System.Linq.Expressions.Expression.GetUserDefinedUnaryOperator(System.Linq.Expressions.ExpressionType.Not, "op_LogicalNot", expression);
	if (userDefinedUnaryOperator !== null) {
		return userDefinedUnaryOperator;
	}
	return System.Linq.Expressions.Expression.GetUserDefinedUnaryOperatorOrThrow(System.Linq.Expressions.ExpressionType.Not, "op_OnesComplement", expression);
};
System.Linq.Expressions.Expression.IsFalse$0 = function (expression) {
	return System.Linq.Expressions.Expression.IsFalse$1(expression, null);
};
System.Linq.Expressions.Expression.IsFalse$1 = function (expression, method) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(expression, "expression");
	if (method !== null) {
		return System.Linq.Expressions.Expression.GetMethodBasedUnaryOperator(System.Linq.Expressions.ExpressionType.IsFalse, expression, method);
	}
	if ($asm08.System.Dynamic.Utils.TypeUtils.IsBool(expression.Type)) {
		return new System.Linq.Expressions.UnaryExpression(System.Linq.Expressions.ExpressionType.IsFalse, expression, expression.Type, null);
	}
	return System.Linq.Expressions.Expression.GetUserDefinedUnaryOperatorOrThrow(System.Linq.Expressions.ExpressionType.IsFalse, "op_False", expression);
};
System.Linq.Expressions.Expression.IsTrue$0 = function (expression) {
	return System.Linq.Expressions.Expression.IsTrue$1(expression, null);
};
System.Linq.Expressions.Expression.IsTrue$1 = function (expression, method) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(expression, "expression");
	if (method !== null) {
		return System.Linq.Expressions.Expression.GetMethodBasedUnaryOperator(System.Linq.Expressions.ExpressionType.IsTrue, expression, method);
	}
	if ($asm08.System.Dynamic.Utils.TypeUtils.IsBool(expression.Type)) {
		return new System.Linq.Expressions.UnaryExpression(System.Linq.Expressions.ExpressionType.IsTrue, expression, expression.Type, null);
	}
	return System.Linq.Expressions.Expression.GetUserDefinedUnaryOperatorOrThrow(System.Linq.Expressions.ExpressionType.IsTrue, "op_True", expression);
};
System.Linq.Expressions.Expression.OnesComplement$0 = function (expression) {
	return System.Linq.Expressions.Expression.OnesComplement$1(expression, null);
};
System.Linq.Expressions.Expression.OnesComplement$1 = function (expression, method) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(expression, "expression");
	if (method !== null) {
		return System.Linq.Expressions.Expression.GetMethodBasedUnaryOperator(System.Linq.Expressions.ExpressionType.OnesComplement, expression, method);
	}
	if ($asm08.System.Dynamic.Utils.TypeUtils.IsInteger(expression.Type)) {
		return new System.Linq.Expressions.UnaryExpression(System.Linq.Expressions.ExpressionType.OnesComplement, expression, expression.Type, null);
	}
	return System.Linq.Expressions.Expression.GetUserDefinedUnaryOperatorOrThrow(System.Linq.Expressions.ExpressionType.OnesComplement, "op_OnesComplement", expression);
};
System.Linq.Expressions.Expression.TypeAs = function (expression, type) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(expression, "expression");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(type, "type");
	$asm08.System.Dynamic.Utils.TypeUtils.ValidateType(type);
	if (!(!type.IsValueType || $asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(type))) {
		throw $asm08.System.Core.Error.IncorrectTypeForTypeAs(type);
	}
	return new System.Linq.Expressions.UnaryExpression(System.Linq.Expressions.ExpressionType.TypeAs, expression, type, null);
};
System.Linq.Expressions.Expression.Unbox = function (expression, type) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(expression, "expression");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(type, "type");
	if (!(expression.Type.IsInterface || (expression.Type === System.Object))) {
		throw $asm08.System.Core.Error.InvalidUnboxType();
	}
	if (!type.IsValueType) {
		throw $asm08.System.Core.Error.InvalidUnboxType();
	}
	$asm08.System.Dynamic.Utils.TypeUtils.ValidateType(type);
	return new System.Linq.Expressions.UnaryExpression(System.Linq.Expressions.ExpressionType.Unbox, expression, type, null);
};
System.Linq.Expressions.Expression.Convert$0 = function (expression, type) {
	return System.Linq.Expressions.Expression.Convert$1(expression, type, null);
};
System.Linq.Expressions.Expression.Convert$1 = function (expression, type, method) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(expression, "expression");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(type, "type");
	$asm08.System.Dynamic.Utils.TypeUtils.ValidateType(type);
	if (method !== null) {
		return System.Linq.Expressions.Expression.GetMethodBasedCoercionOperator(System.Linq.Expressions.ExpressionType.Convert, expression, type, method);
	}
	if (!(!$asm08.System.Dynamic.Utils.TypeUtils.HasIdentityPrimitiveOrNullableConversion(expression.Type, type) && !$asm08.System.Dynamic.Utils.TypeUtils.HasReferenceConversion(expression.Type, type))) {
		return new System.Linq.Expressions.UnaryExpression(System.Linq.Expressions.ExpressionType.Convert, expression, type, null);
	}
	return System.Linq.Expressions.Expression.GetUserDefinedCoercionOrThrow(System.Linq.Expressions.ExpressionType.Convert, expression, type);
};
System.Linq.Expressions.Expression.ConvertChecked$0 = function (expression, type) {
	return System.Linq.Expressions.Expression.ConvertChecked$1(expression, type, null);
};
System.Linq.Expressions.Expression.ConvertChecked$1 = function (expression, type, method) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(expression, "expression");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(type, "type");
	$asm08.System.Dynamic.Utils.TypeUtils.ValidateType(type);
	if (method !== null) {
		return System.Linq.Expressions.Expression.GetMethodBasedCoercionOperator(System.Linq.Expressions.ExpressionType.ConvertChecked, expression, type, method);
	}
	if ($asm08.System.Dynamic.Utils.TypeUtils.HasIdentityPrimitiveOrNullableConversion(expression.Type, type)) {
		return new System.Linq.Expressions.UnaryExpression(System.Linq.Expressions.ExpressionType.ConvertChecked, expression, type, null);
	}
	if ($asm08.System.Dynamic.Utils.TypeUtils.HasReferenceConversion(expression.Type, type)) {
		return new System.Linq.Expressions.UnaryExpression(System.Linq.Expressions.ExpressionType.Convert, expression, type, null);
	}
	return System.Linq.Expressions.Expression.GetUserDefinedCoercionOrThrow(System.Linq.Expressions.ExpressionType.ConvertChecked, expression, type);
};
System.Linq.Expressions.Expression.ArrayLength = function (array) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(array, "array");
	if (!(array.Type.IsArray && System.Array.IsAssignableFrom(array.Type))) {
		throw $asm08.System.Core.Error.ArgumentMustBeArray();
	}
	if (array.Type.GetArrayRank() !== 1) {
		throw $asm08.System.Core.Error.ArgumentMustBeSingleDimensionalArrayType();
	}
	return new System.Linq.Expressions.UnaryExpression(System.Linq.Expressions.ExpressionType.ArrayLength, array, System.Int32, null);
};
System.Linq.Expressions.Expression.Quote = function (expression) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(expression, "expression");
	var flag = JSIL.CheckType(expression, System.Linq.Expressions.LambdaExpression);
	if (!(flag | System.Linq.Expressions.Expression.SilverlightQuirks)) {
		throw $asm08.System.Core.Error.QuotedExpressionMustBeLambda();
	}
	return new System.Linq.Expressions.UnaryExpression(System.Linq.Expressions.ExpressionType.Quote, expression, JSIL.GetType(expression), null);
};
System.Linq.Expressions.Expression.Rethrow$0 = function () {
	return System.Linq.Expressions.Expression.Throw$0(null);
};
System.Linq.Expressions.Expression.Rethrow$1 = function (type) {
	return System.Linq.Expressions.Expression.Throw$1(null, type);
};
System.Linq.Expressions.Expression.Throw$0 = function (value) {
	return System.Linq.Expressions.Expression.Throw$1(value, System.Void);
};
System.Linq.Expressions.Expression.Throw$1 = function (value, type) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(type, "type");
	$asm08.System.Dynamic.Utils.TypeUtils.ValidateType(type);
	if (value !== null) {
		System.Linq.Expressions.Expression.RequiresCanRead$0(value, "value");
		if (value.Type.IsValueType) {
			throw $asm08.System.Core.Error.ArgumentMustNotHaveValueType();
		}
	}
	return new System.Linq.Expressions.UnaryExpression(System.Linq.Expressions.ExpressionType.Throw, value, type, null);
};
System.Linq.Expressions.Expression.Increment$0 = function (expression) {
	return System.Linq.Expressions.Expression.Increment$1(expression, null);
};
System.Linq.Expressions.Expression.Increment$1 = function (expression, method) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(expression, "expression");
	if (method !== null) {
		return System.Linq.Expressions.Expression.GetMethodBasedUnaryOperator(System.Linq.Expressions.ExpressionType.Increment, expression, method);
	}
	if ($asm08.System.Dynamic.Utils.TypeUtils.IsArithmetic(expression.Type)) {
		return new System.Linq.Expressions.UnaryExpression(System.Linq.Expressions.ExpressionType.Increment, expression, expression.Type, null);
	}
	return System.Linq.Expressions.Expression.GetUserDefinedUnaryOperatorOrThrow(System.Linq.Expressions.ExpressionType.Increment, "op_Increment", expression);
};
System.Linq.Expressions.Expression.Decrement$0 = function (expression) {
	return System.Linq.Expressions.Expression.Decrement$1(expression, null);
};
System.Linq.Expressions.Expression.Decrement$1 = function (expression, method) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(expression, "expression");
	if (method !== null) {
		return System.Linq.Expressions.Expression.GetMethodBasedUnaryOperator(System.Linq.Expressions.ExpressionType.Decrement, expression, method);
	}
	if ($asm08.System.Dynamic.Utils.TypeUtils.IsArithmetic(expression.Type)) {
		return new System.Linq.Expressions.UnaryExpression(System.Linq.Expressions.ExpressionType.Decrement, expression, expression.Type, null);
	}
	return System.Linq.Expressions.Expression.GetUserDefinedUnaryOperatorOrThrow(System.Linq.Expressions.ExpressionType.Decrement, "op_Decrement", expression);
};
System.Linq.Expressions.Expression.PreIncrementAssign$0 = function (expression) {
	return System.Linq.Expressions.Expression.MakeOpAssignUnary(System.Linq.Expressions.ExpressionType.PreIncrementAssign, expression, null);
};
System.Linq.Expressions.Expression.PreIncrementAssign$1 = function (expression, method) {
	return System.Linq.Expressions.Expression.MakeOpAssignUnary(System.Linq.Expressions.ExpressionType.PreIncrementAssign, expression, method);
};
System.Linq.Expressions.Expression.PreDecrementAssign$0 = function (expression) {
	return System.Linq.Expressions.Expression.MakeOpAssignUnary(System.Linq.Expressions.ExpressionType.PreDecrementAssign, expression, null);
};
System.Linq.Expressions.Expression.PreDecrementAssign$1 = function (expression, method) {
	return System.Linq.Expressions.Expression.MakeOpAssignUnary(System.Linq.Expressions.ExpressionType.PreDecrementAssign, expression, method);
};
System.Linq.Expressions.Expression.PostIncrementAssign$0 = function (expression) {
	return System.Linq.Expressions.Expression.MakeOpAssignUnary(System.Linq.Expressions.ExpressionType.PostIncrementAssign, expression, null);
};
System.Linq.Expressions.Expression.PostIncrementAssign$1 = function (expression, method) {
	return System.Linq.Expressions.Expression.MakeOpAssignUnary(System.Linq.Expressions.ExpressionType.PostIncrementAssign, expression, method);
};
System.Linq.Expressions.Expression.PostDecrementAssign$0 = function (expression) {
	return System.Linq.Expressions.Expression.MakeOpAssignUnary(System.Linq.Expressions.ExpressionType.PostDecrementAssign, expression, null);
};
System.Linq.Expressions.Expression.PostDecrementAssign$1 = function (expression, method) {
	return System.Linq.Expressions.Expression.MakeOpAssignUnary(System.Linq.Expressions.ExpressionType.PostDecrementAssign, expression, method);
};
System.Linq.Expressions.Expression.MakeOpAssignUnary = function (kind, expression, method) {
	System.Linq.Expressions.Expression.RequiresCanRead$0(expression, "expression");
	System.Linq.Expressions.Expression.RequiresCanWrite(expression, "expression");
	if (method === null) {
		if ($asm08.System.Dynamic.Utils.TypeUtils.IsArithmetic(expression.Type)) {
			return new System.Linq.Expressions.UnaryExpression(kind, expression, expression.Type, null);
		}
		if (!((kind !== System.Linq.Expressions.ExpressionType.PreIncrementAssign) && (kind !== System.Linq.Expressions.ExpressionType.PostIncrementAssign))) {
			var name = "op_Increment";
		} else {
			name = "op_Decrement";
		}
		var unaryExpression = System.Linq.Expressions.Expression.GetUserDefinedUnaryOperatorOrThrow(kind, name, expression);
	} else {
		unaryExpression = System.Linq.Expressions.Expression.GetMethodBasedUnaryOperator(kind, expression, method);
	}
	if (!$asm08.System.Dynamic.Utils.TypeUtils.AreReferenceAssignable(expression.Type, unaryExpression.Type)) {
		throw $asm08.System.Core.Error.UserDefinedOpMustHaveValidReturnType(kind, method.Name);
	}
	return unaryExpression;
};
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "GetUserDefinedBinaryOperator", [
		["GetUserDefinedBinaryOperator$0", [System.Linq.Expressions.ExpressionType, System.String, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean]], 
		["GetUserDefinedBinaryOperator$1", [System.Linq.Expressions.ExpressionType, System.Type, System.Type, System.String]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "MakeBinary", [
		["MakeBinary$0", [System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["MakeBinary$1", [System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo]], 
		["MakeBinary$2", [System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "Equal", [
		["Equal$0", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["Equal$1", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "NotEqual", [
		["NotEqual$0", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["NotEqual$1", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "GreaterThan", [
		["GreaterThan$0", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["GreaterThan$1", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "LessThan", [
		["LessThan$0", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["LessThan$1", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "GreaterThanOrEqual", [
		["GreaterThanOrEqual$0", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["GreaterThanOrEqual$1", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "LessThanOrEqual", [
		["LessThanOrEqual$0", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["LessThanOrEqual$1", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Boolean, System.Reflection.MethodInfo]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "AndAlso", [
		["AndAlso$0", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["AndAlso$1", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "OrElse", [
		["OrElse$0", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["OrElse$1", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "Coalesce", [
		["Coalesce$0", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["Coalesce$1", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.LambdaExpression]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "Add", [
		["Add$0", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["Add$1", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "AddAssign", [
		["AddAssign$0", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["AddAssign$1", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo]], 
		["AddAssign$2", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "AddAssignChecked", [
		["AddAssignChecked$0", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["AddAssignChecked$1", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo]], 
		["AddAssignChecked$2", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "AddChecked", [
		["AddChecked$0", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["AddChecked$1", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "Subtract", [
		["Subtract$0", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["Subtract$1", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "SubtractAssign", [
		["SubtractAssign$0", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["SubtractAssign$1", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo]], 
		["SubtractAssign$2", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "SubtractAssignChecked", [
		["SubtractAssignChecked$0", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["SubtractAssignChecked$1", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo]], 
		["SubtractAssignChecked$2", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "SubtractChecked", [
		["SubtractChecked$0", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["SubtractChecked$1", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "Divide", [
		["Divide$0", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["Divide$1", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "DivideAssign", [
		["DivideAssign$0", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["DivideAssign$1", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo]], 
		["DivideAssign$2", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "Modulo", [
		["Modulo$0", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["Modulo$1", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "ModuloAssign", [
		["ModuloAssign$0", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["ModuloAssign$1", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo]], 
		["ModuloAssign$2", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "Multiply", [
		["Multiply$0", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["Multiply$1", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "MultiplyAssign", [
		["MultiplyAssign$0", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["MultiplyAssign$1", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo]], 
		["MultiplyAssign$2", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "MultiplyAssignChecked", [
		["MultiplyAssignChecked$0", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["MultiplyAssignChecked$1", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo]], 
		["MultiplyAssignChecked$2", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "MultiplyChecked", [
		["MultiplyChecked$0", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["MultiplyChecked$1", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "LeftShift", [
		["LeftShift$0", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["LeftShift$1", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "LeftShiftAssign", [
		["LeftShiftAssign$0", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["LeftShiftAssign$1", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo]], 
		["LeftShiftAssign$2", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "RightShift", [
		["RightShift$0", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["RightShift$1", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "RightShiftAssign", [
		["RightShiftAssign$0", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["RightShiftAssign$1", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo]], 
		["RightShiftAssign$2", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "And", [
		["And$0", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["And$1", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "AndAssign", [
		["AndAssign$0", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["AndAssign$1", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo]], 
		["AndAssign$2", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "Or", [
		["Or$0", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["Or$1", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "OrAssign", [
		["OrAssign$0", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["OrAssign$1", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo]], 
		["OrAssign$2", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "ExclusiveOr", [
		["ExclusiveOr$0", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["ExclusiveOr$1", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "ExclusiveOrAssign", [
		["ExclusiveOrAssign$0", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["ExclusiveOrAssign$1", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo]], 
		["ExclusiveOrAssign$2", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "Power", [
		["Power$0", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["Power$1", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "PowerAssign", [
		["PowerAssign$0", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["PowerAssign$1", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo]], 
		["PowerAssign$2", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.LambdaExpression]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "ArrayIndex", [
		["ArrayIndex$0", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["ArrayIndex$1", [System.Linq.Expressions.Expression, System.Array.Of(System.Linq.Expressions.Expression)]], 
		["ArrayIndex$2", [System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.Expression)]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "Block", [
		["Block$0", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["Block$1", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["Block$2", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["Block$3", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["Block$4", [System.Array.Of(System.Linq.Expressions.Expression)]], 
		["Block$5", [System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.Expression)]], 
		["Block$6", [System.Type, System.Array.Of(System.Linq.Expressions.Expression)]], 
		["Block$7", [System.Type, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.Expression)]], 
		["Block$8", [System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.ParameterExpression), System.Array.Of(System.Linq.Expressions.Expression)]], 
		["Block$9", [System.Type, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.ParameterExpression), System.Array.Of(System.Linq.Expressions.Expression)]], 
		["Block$10", [System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.ParameterExpression), System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.Expression)]], 
		["Block$11", [System.Type, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.ParameterExpression), System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.Expression)]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "Catch", [
		["Catch$0", [System.Type, System.Linq.Expressions.Expression]], 
		["Catch$1", [System.Linq.Expressions.ParameterExpression, System.Linq.Expressions.Expression]], 
		["Catch$2", [System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["Catch$3", [System.Linq.Expressions.ParameterExpression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "Condition", [
		["Condition$0", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["Condition$1", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Type]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "Constant", [
		["Constant$0", [System.Object]], 
		["Constant$1", [System.Object, System.Type]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "MakeDynamic", [
		["MakeDynamic$0", [System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Array.Of(System.Linq.Expressions.Expression)]], 
		["MakeDynamic$1", [System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.Expression)]], 
		["MakeDynamic$2", [System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression]], 
		["MakeDynamic$3", [System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["MakeDynamic$4", [System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["MakeDynamic$5", [System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["MakeDynamic$6", [System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(System.Linq.Expressions.Expression)]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "Dynamic", [
		["Dynamic$0", [System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Array.Of(System.Linq.Expressions.Expression)]], 
		["Dynamic$1", [System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Linq.Expressions.Expression]], 
		["Dynamic$2", [System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["Dynamic$3", [System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["Dynamic$4", [System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["Dynamic$5", [System.Runtime.CompilerServices.CallSiteBinder, System.Type, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.Expression)]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "ElementInit", [
		["ElementInit$0", [System.Reflection.MethodInfo, System.Array.Of(System.Linq.Expressions.Expression)]], 
		["ElementInit$1", [System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.Expression)]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression.prototype, "_ctor", [
		["_ctor$0", [System.Linq.Expressions.ExpressionType, System.Type]], 
		["_ctor$1", []]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "RequiresCanRead", [
		["RequiresCanRead$0", [System.Linq.Expressions.Expression, System.String]], 
		["RequiresCanRead$1", [System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.Expression), System.String]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "Break", [
		["Break$0", [System.Linq.Expressions.LabelTarget]], 
		["Break$1", [System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression]], 
		["Break$2", [System.Linq.Expressions.LabelTarget, System.Type]], 
		["Break$3", [System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression, System.Type]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "Continue", [
		["Continue$0", [System.Linq.Expressions.LabelTarget]], 
		["Continue$1", [System.Linq.Expressions.LabelTarget, System.Type]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "Return", [
		["Return$0", [System.Linq.Expressions.LabelTarget]], 
		["Return$1", [System.Linq.Expressions.LabelTarget, System.Type]], 
		["Return$2", [System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression]], 
		["Return$3", [System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression, System.Type]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "Goto", [
		["Goto$0", [System.Linq.Expressions.LabelTarget]], 
		["Goto$1", [System.Linq.Expressions.LabelTarget, System.Type]], 
		["Goto$2", [System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression]], 
		["Goto$3", [System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression, System.Type]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "ArrayAccess", [
		["ArrayAccess$0", [System.Linq.Expressions.Expression, System.Array.Of(System.Linq.Expressions.Expression)]], 
		["ArrayAccess$1", [System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.Expression)]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "Property", [
		["Property$0", [System.Linq.Expressions.Expression, System.String, System.Array.Of(System.Linq.Expressions.Expression)]], 
		["Property$1", [System.Linq.Expressions.Expression, System.Reflection.PropertyInfo, System.Array.Of(System.Linq.Expressions.Expression)]], 
		["Property$2", [System.Linq.Expressions.Expression, System.Reflection.PropertyInfo, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.Expression)]], 
		["Property$3", [System.Linq.Expressions.Expression, System.String]], 
		["Property$4", [System.Linq.Expressions.Expression, System.Type, System.String]], 
		["Property$5", [System.Linq.Expressions.Expression, System.Reflection.PropertyInfo]], 
		["Property$6", [System.Linq.Expressions.Expression, System.Reflection.MethodInfo]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "IsCompatible", [
		["IsCompatible$0", [System.Reflection.PropertyInfo, System.Array.Of(System.Linq.Expressions.Expression)]], 
		["IsCompatible$1", [System.Reflection.MethodBase, System.Array.Of(System.Linq.Expressions.Expression)]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "Invoke", [
		["Invoke$0", [System.Linq.Expressions.Expression, System.Array.Of(System.Linq.Expressions.Expression)]], 
		["Invoke$1", [System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.Expression)]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "Label", [
		["Label$0", [System.Linq.Expressions.LabelTarget]], 
		["Label$1", [System.Linq.Expressions.LabelTarget, System.Linq.Expressions.Expression]], 
		["Label$2", []], 
		["Label$3", [System.String]], 
		["Label$4", [System.Type]], 
		["Label$5", [System.Type, System.String]]
	]);
JSIL.OverloadedGenericMethod(System.Linq.Expressions.Expression, "Lambda$b1", [
		["Lambda$b1$0", [System.Linq.Expressions.Expression, System.Array.Of(System.Linq.Expressions.ParameterExpression)]], 
		["Lambda$b1$1", [System.Linq.Expressions.Expression, System.Boolean, System.Array.Of(System.Linq.Expressions.ParameterExpression)]], 
		["Lambda$b1$2", [System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.ParameterExpression)]], 
		["Lambda$b1$3", [System.Linq.Expressions.Expression, System.Boolean, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.ParameterExpression)]], 
		["Lambda$b1$4", [System.Linq.Expressions.Expression, System.String, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.ParameterExpression)]], 
		["Lambda$b1$5", [System.Linq.Expressions.Expression, System.String, System.Boolean, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.ParameterExpression)]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "Lambda", [
		["Lambda$0", [System.Linq.Expressions.Expression, System.Array.Of(System.Linq.Expressions.ParameterExpression)]], 
		["Lambda$1", [System.Linq.Expressions.Expression, System.Boolean, System.Array.Of(System.Linq.Expressions.ParameterExpression)]], 
		["Lambda$2", [System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.ParameterExpression)]], 
		["Lambda$3", [System.Linq.Expressions.Expression, System.Boolean, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.ParameterExpression)]], 
		["Lambda$4", [System.Type, System.Linq.Expressions.Expression, System.Array.Of(System.Linq.Expressions.ParameterExpression)]], 
		["Lambda$5", [System.Type, System.Linq.Expressions.Expression, System.Boolean, System.Array.Of(System.Linq.Expressions.ParameterExpression)]], 
		["Lambda$6", [System.Type, System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.ParameterExpression)]], 
		["Lambda$7", [System.Type, System.Linq.Expressions.Expression, System.Boolean, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.ParameterExpression)]], 
		["Lambda$8", [System.Linq.Expressions.Expression, System.String, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.ParameterExpression)]], 
		["Lambda$9", [System.Linq.Expressions.Expression, System.String, System.Boolean, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.ParameterExpression)]], 
		["Lambda$10", [System.Type, System.Linq.Expressions.Expression, System.String, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.ParameterExpression)]], 
		["Lambda$11", [System.Type, System.Linq.Expressions.Expression, System.String, System.Boolean, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.ParameterExpression)]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "ListInit", [
		["ListInit$0", [System.Linq.Expressions.NewExpression, System.Array.Of(System.Linq.Expressions.Expression)]], 
		["ListInit$1", [System.Linq.Expressions.NewExpression, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.Expression)]], 
		["ListInit$2", [System.Linq.Expressions.NewExpression, System.Reflection.MethodInfo, System.Array.Of(System.Linq.Expressions.Expression)]], 
		["ListInit$3", [System.Linq.Expressions.NewExpression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.Expression)]], 
		["ListInit$4", [System.Linq.Expressions.NewExpression, System.Array.Of(System.Linq.Expressions.ElementInit)]], 
		["ListInit$5", [System.Linq.Expressions.NewExpression, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.ElementInit)]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "Loop", [
		["Loop$0", [System.Linq.Expressions.Expression]], 
		["Loop$1", [System.Linq.Expressions.Expression, System.Linq.Expressions.LabelTarget]], 
		["Loop$2", [System.Linq.Expressions.Expression, System.Linq.Expressions.LabelTarget, System.Linq.Expressions.LabelTarget]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "Bind", [
		["Bind$0", [System.Reflection.MemberInfo, System.Linq.Expressions.Expression]], 
		["Bind$1", [System.Reflection.MethodInfo, System.Linq.Expressions.Expression]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "Field", [
		["Field$0", [System.Linq.Expressions.Expression, System.Reflection.FieldInfo]], 
		["Field$1", [System.Linq.Expressions.Expression, System.String]], 
		["Field$2", [System.Linq.Expressions.Expression, System.Type, System.String]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "MemberInit", [
		["MemberInit$0", [System.Linq.Expressions.NewExpression, System.Array.Of(System.Linq.Expressions.MemberBinding)]], 
		["MemberInit$1", [System.Linq.Expressions.NewExpression, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.MemberBinding)]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "ListBind", [
		["ListBind$0", [System.Reflection.MemberInfo, System.Array.Of(System.Linq.Expressions.ElementInit)]], 
		["ListBind$1", [System.Reflection.MemberInfo, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.ElementInit)]], 
		["ListBind$2", [System.Reflection.MethodInfo, System.Array.Of(System.Linq.Expressions.ElementInit)]], 
		["ListBind$3", [System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.ElementInit)]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "MemberBind", [
		["MemberBind$0", [System.Reflection.MemberInfo, System.Array.Of(System.Linq.Expressions.MemberBinding)]], 
		["MemberBind$1", [System.Reflection.MemberInfo, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.MemberBinding)]], 
		["MemberBind$2", [System.Reflection.MethodInfo, System.Array.Of(System.Linq.Expressions.MemberBinding)]], 
		["MemberBind$3", [System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.MemberBinding)]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "Call", [
		["Call$0", [System.Reflection.MethodInfo, System.Linq.Expressions.Expression]], 
		["Call$1", [System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["Call$2", [System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["Call$3", [System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["Call$4", [System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["Call$5", [System.Reflection.MethodInfo, System.Array.Of(System.Linq.Expressions.Expression)]], 
		["Call$6", [System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.Expression)]], 
		["Call$7", [System.Linq.Expressions.Expression, System.Reflection.MethodInfo]], 
		["Call$8", [System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Array.Of(System.Linq.Expressions.Expression)]], 
		["Call$9", [System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["Call$10", [System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["Call$11", [System.Linq.Expressions.Expression, System.String, System.Array.Of(System.Type), System.Array.Of(System.Linq.Expressions.Expression)]], 
		["Call$12", [System.Type, System.String, System.Array.Of(System.Type), System.Array.Of(System.Linq.Expressions.Expression)]], 
		["Call$13", [System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.Expression)]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "NewArrayInit", [
		["NewArrayInit$0", [System.Type, System.Array.Of(System.Linq.Expressions.Expression)]], 
		["NewArrayInit$1", [System.Type, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.Expression)]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "NewArrayBounds", [
		["NewArrayBounds$0", [System.Type, System.Array.Of(System.Linq.Expressions.Expression)]], 
		["NewArrayBounds$1", [System.Type, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.Expression)]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "New", [
		["New$0", [System.Reflection.ConstructorInfo]], 
		["New$1", [System.Reflection.ConstructorInfo, System.Array.Of(System.Linq.Expressions.Expression)]], 
		["New$2", [System.Reflection.ConstructorInfo, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.Expression)]], 
		["New$3", [System.Reflection.ConstructorInfo, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.Expression), System.Collections.Generic.IEnumerable$b1.Of(System.Reflection.MemberInfo)]], 
		["New$4", [System.Reflection.ConstructorInfo, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.Expression), System.Array.Of(System.Reflection.MemberInfo)]], 
		["New$5", [System.Type]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "Parameter", [
		["Parameter$0", [System.Type]], 
		["Parameter$1", [System.Type, System.String]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "Variable", [
		["Variable$0", [System.Type]], 
		["Variable$1", [System.Type, System.String]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "RuntimeVariables", [
		["RuntimeVariables$0", [System.Array.Of(System.Linq.Expressions.ParameterExpression)]], 
		["RuntimeVariables$1", [System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.ParameterExpression)]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "SwitchCase", [
		["SwitchCase$0", [System.Linq.Expressions.Expression, System.Array.Of(System.Linq.Expressions.Expression)]], 
		["SwitchCase$1", [System.Linq.Expressions.Expression, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.Expression)]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "Switch", [
		["Switch$0", [System.Linq.Expressions.Expression, System.Array.Of(System.Linq.Expressions.SwitchCase)]], 
		["Switch$1", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Array.Of(System.Linq.Expressions.SwitchCase)]], 
		["Switch$2", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Array.Of(System.Linq.Expressions.SwitchCase)]], 
		["Switch$3", [System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Array.Of(System.Linq.Expressions.SwitchCase)]], 
		["Switch$4", [System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.SwitchCase)]], 
		["Switch$5", [System.Type, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Reflection.MethodInfo, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.SwitchCase)]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "SymbolDocument", [
		["SymbolDocument$0", [System.String]], 
		["SymbolDocument$1", [System.String, System.Guid]], 
		["SymbolDocument$2", [System.String, System.Guid, System.Guid]], 
		["SymbolDocument$3", [System.String, System.Guid, System.Guid, System.Guid]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "MakeUnary", [
		["MakeUnary$0", [System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression, System.Type]], 
		["MakeUnary$1", [System.Linq.Expressions.ExpressionType, System.Linq.Expressions.Expression, System.Type, System.Reflection.MethodInfo]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "Negate", [
		["Negate$0", [System.Linq.Expressions.Expression]], 
		["Negate$1", [System.Linq.Expressions.Expression, System.Reflection.MethodInfo]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "UnaryPlus", [
		["UnaryPlus$0", [System.Linq.Expressions.Expression]], 
		["UnaryPlus$1", [System.Linq.Expressions.Expression, System.Reflection.MethodInfo]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "NegateChecked", [
		["NegateChecked$0", [System.Linq.Expressions.Expression]], 
		["NegateChecked$1", [System.Linq.Expressions.Expression, System.Reflection.MethodInfo]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "Not", [
		["Not$0", [System.Linq.Expressions.Expression]], 
		["Not$1", [System.Linq.Expressions.Expression, System.Reflection.MethodInfo]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "IsFalse", [
		["IsFalse$0", [System.Linq.Expressions.Expression]], 
		["IsFalse$1", [System.Linq.Expressions.Expression, System.Reflection.MethodInfo]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "IsTrue", [
		["IsTrue$0", [System.Linq.Expressions.Expression]], 
		["IsTrue$1", [System.Linq.Expressions.Expression, System.Reflection.MethodInfo]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "OnesComplement", [
		["OnesComplement$0", [System.Linq.Expressions.Expression]], 
		["OnesComplement$1", [System.Linq.Expressions.Expression, System.Reflection.MethodInfo]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "Convert", [
		["Convert$0", [System.Linq.Expressions.Expression, System.Type]], 
		["Convert$1", [System.Linq.Expressions.Expression, System.Type, System.Reflection.MethodInfo]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "ConvertChecked", [
		["ConvertChecked$0", [System.Linq.Expressions.Expression, System.Type]], 
		["ConvertChecked$1", [System.Linq.Expressions.Expression, System.Type, System.Reflection.MethodInfo]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "Rethrow", [
		["Rethrow$0", []], 
		["Rethrow$1", [System.Type]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "Throw", [
		["Throw$0", [System.Linq.Expressions.Expression]], 
		["Throw$1", [System.Linq.Expressions.Expression, System.Type]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "Increment", [
		["Increment$0", [System.Linq.Expressions.Expression]], 
		["Increment$1", [System.Linq.Expressions.Expression, System.Reflection.MethodInfo]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "Decrement", [
		["Decrement$0", [System.Linq.Expressions.Expression]], 
		["Decrement$1", [System.Linq.Expressions.Expression, System.Reflection.MethodInfo]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "PreIncrementAssign", [
		["PreIncrementAssign$0", [System.Linq.Expressions.Expression]], 
		["PreIncrementAssign$1", [System.Linq.Expressions.Expression, System.Reflection.MethodInfo]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "PreDecrementAssign", [
		["PreDecrementAssign$0", [System.Linq.Expressions.Expression]], 
		["PreDecrementAssign$1", [System.Linq.Expressions.Expression, System.Reflection.MethodInfo]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "PostIncrementAssign", [
		["PostIncrementAssign$0", [System.Linq.Expressions.Expression]], 
		["PostIncrementAssign$1", [System.Linq.Expressions.Expression, System.Reflection.MethodInfo]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression, "PostDecrementAssign", [
		["PostDecrementAssign$0", [System.Linq.Expressions.Expression]], 
		["PostDecrementAssign$1", [System.Linq.Expressions.Expression, System.Reflection.MethodInfo]]
	]);
JSIL.MakeProperty(System.Linq.Expressions.Expression.prototype, "NodeType", 
	System.Linq.Expressions.Expression.prototype.get_NodeType, null);
JSIL.MakeProperty(System.Linq.Expressions.Expression.prototype, "Type", 
	System.Linq.Expressions.Expression.prototype.get_Type, null);
JSIL.MakeProperty(System.Linq.Expressions.Expression.prototype, "CanReduce", 
	System.Linq.Expressions.Expression.prototype.get_CanReduce, null);
JSIL.MakeProperty(System.Linq.Expressions.Expression.prototype, "DebugView", 
	System.Linq.Expressions.Expression.prototype.get_DebugView, null);
System.Linq.Expressions.Expression._LambdaDelegateCache = null;
System.Linq.Expressions.Expression._LambdaFactories = null;
System.Linq.Expressions.Expression._legacyCtorSupportTable = null;
System.Linq.Expressions.Expression.SilverlightQuirks = false;
System.Linq.Expressions.Expression.$CachedAnonymousMethodDelegate1 = null;
System.Linq.Expressions.Expression.$CachedAnonymousMethodDelegate3 = null;
System.Linq.Expressions.Expression.$CachedAnonymousMethodDelegate5 = null;
System.Linq.Expressions.Expression._cctor = function () {
	System.Linq.Expressions.Expression._LambdaDelegateCache = new (System.Dynamic.Utils.CacheDict$b2.Of(System.Type, System.Reflection.MethodInfo)) (40);
	System.Linq.Expressions.Expression.SilverlightQuirks = (System.AppDomain.CurrentDomain.IsCompatibilitySwitchSet("APP_EARLIER_THAN_SL4.0")).GetValueOrDefault$0();
};

$asm08.System.Linq.Expressions.Expression.ExtensionInfo.prototype._ctor = function (nodeType, type) {
	System.Object.prototype._ctor.call(this);
	this.NodeType = nodeType;
	this.Type = type;
};
$asm08.System.Linq.Expressions.Expression.ExtensionInfo.prototype.NodeType = 0;
$asm08.System.Linq.Expressions.Expression.ExtensionInfo.prototype.Type = null;

System.Linq.Expressions.BinaryExpression.prototype._ctor = function (left, right) {
	System.Linq.Expressions.Expression.prototype._ctor$1.call(this);
	this._left = left;
	this._right = right;
};
System.Linq.Expressions.BinaryExpression.prototype.get_CanReduce = function () {
	return System.Linq.Expressions.BinaryExpression.IsOpAssignment(this.NodeType);
};
System.Linq.Expressions.BinaryExpression.IsOpAssignment = function (op) {
	switch (Number(op)) {
		case 63: 
		case 64: 
		case 65: 
		case 66: 
		case 67: 
		case 68: 
		case 69: 
		case 70: 
		case 71: 
		case 72: 
		case 73: 
		case 74: 
		case 75: 
		case 76: 
			return true;
		default: 
			return false;
	}
};
System.Linq.Expressions.BinaryExpression.prototype.get_Right = function () {
	return this._right;
};
System.Linq.Expressions.BinaryExpression.prototype.get_Left = function () {
	return this._left;
};
System.Linq.Expressions.BinaryExpression.prototype.get_Method = function () {
	return this.GetMethod();
};
System.Linq.Expressions.BinaryExpression.prototype.GetMethod = function () {
	return null;
};
System.Linq.Expressions.BinaryExpression.prototype.Update = function (left, conversion, right) {
	if (!((left !== this.Left) || 
			(right !== this.Right) || (conversion !== this.Conversion))) {
		return this;
	}
	if (!this.IsReferenceComparison) {
		return System.Linq.Expressions.Expression.MakeBinary$2(
			this.NodeType, 
			left, 
			right, 
			this.IsLiftedToNull, 
			this.Method, 
			conversion
		);
	}
	if (this.NodeType === System.Linq.Expressions.ExpressionType.Equal) {
		return System.Linq.Expressions.Expression.ReferenceEqual(left, right);
	}
	return System.Linq.Expressions.Expression.ReferenceNotEqual(left, right);
};
System.Linq.Expressions.BinaryExpression.prototype.Reduce = function () {
	if (!System.Linq.Expressions.BinaryExpression.IsOpAssignment(this.NodeType)) {
		return this;
	}
	var nodeType = this._left.NodeType;
	if (nodeType === System.Linq.Expressions.ExpressionType.MemberAccess) {
		return this.ReduceMember();
	}
	if (nodeType !== System.Linq.Expressions.ExpressionType.Index) {
		return this.ReduceVariable();
	}
	return this.ReduceIndex();
};
System.Linq.Expressions.BinaryExpression.GetBinaryOpFromAssignmentOp = function (op) {
	switch (Number(op)) {
		case 63: 
			return System.Linq.Expressions.ExpressionType.Add;
		case 64: 
			return System.Linq.Expressions.ExpressionType.And;
		case 65: 
			return System.Linq.Expressions.ExpressionType.Divide;
		case 66: 
			return System.Linq.Expressions.ExpressionType.ExclusiveOr;
		case 67: 
			return System.Linq.Expressions.ExpressionType.LeftShift;
		case 68: 
			return System.Linq.Expressions.ExpressionType.Modulo;
		case 69: 
			return System.Linq.Expressions.ExpressionType.Multiply;
		case 70: 
			return System.Linq.Expressions.ExpressionType.Or;
		case 71: 
			return System.Linq.Expressions.ExpressionType.Power;
		case 72: 
			return System.Linq.Expressions.ExpressionType.RightShift;
		case 73: 
			return System.Linq.Expressions.ExpressionType.Subtract;
		case 74: 
			return System.Linq.Expressions.ExpressionType.AddChecked;
		case 75: 
			return System.Linq.Expressions.ExpressionType.MultiplyChecked;
		case 76: 
			return System.Linq.Expressions.ExpressionType.SubtractChecked;
		default: 
			throw $asm08.System.Core.Error.InvalidOperation("op");
	}
};
System.Linq.Expressions.BinaryExpression.prototype.ReduceVariable = function () {
	var binaryOpFromAssignmentOp = System.Linq.Expressions.BinaryExpression.GetBinaryOpFromAssignmentOp(this.NodeType);
	var expression = System.Linq.Expressions.Expression.MakeBinary$1(
		binaryOpFromAssignmentOp, 
		this._left, 
		this._right, 
		false, 
		this.Method
	);
	var conversion = this.GetConversion();
	if (conversion !== null) {
		expression = System.Linq.Expressions.Expression.Invoke$0(conversion, JSIL.Array.New(System.Linq.Expressions.Expression, [expression]));
	}
	return System.Linq.Expressions.Expression.Assign(this._left, expression);
};
System.Linq.Expressions.BinaryExpression.prototype.ReduceMember = function () {
	var memberExpression = JSIL.Cast(this._left, System.Linq.Expressions.MemberExpression);
	if (memberExpression.Expression === null) {
		return this.ReduceVariable();
	}
	var parameterExpression = System.Linq.Expressions.Expression.Variable$1(memberExpression.Expression.Type, "temp1");
	var expression = System.Linq.Expressions.Expression.Assign(parameterExpression, memberExpression.Expression);
	var binaryOpFromAssignmentOp = System.Linq.Expressions.BinaryExpression.GetBinaryOpFromAssignmentOp(this.NodeType);
	var expression2 = System.Linq.Expressions.Expression.MakeBinary$1(
		binaryOpFromAssignmentOp, 
		System.Linq.Expressions.Expression.MakeMemberAccess(parameterExpression, memberExpression.Member), 
		this._right, 
		false, 
		this.Method
	);
	var conversion = this.GetConversion();
	if (conversion !== null) {
		expression2 = System.Linq.Expressions.Expression.Invoke$0(conversion, JSIL.Array.New(System.Linq.Expressions.Expression, [expression2]));
	}
	var parameterExpression2 = System.Linq.Expressions.Expression.Variable$1(expression2.Type, "temp2");
	expression2 = System.Linq.Expressions.Expression.Assign(parameterExpression2, expression2);
	var expression3 = System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression.MakeMemberAccess(parameterExpression, memberExpression.Member), parameterExpression2);
	return System.Linq.Expressions.Expression.Block$8(JSIL.Array.New(System.Linq.Expressions.ParameterExpression, [parameterExpression, parameterExpression2]), JSIL.Array.New(System.Linq.Expressions.Expression, [expression, expression2, expression3, parameterExpression2]));
};
System.Linq.Expressions.BinaryExpression.prototype.ReduceIndex = function () {
	var indexExpression = JSIL.Cast(this._left, System.Linq.Expressions.IndexExpression);
	var list = new (System.Collections.Generic.List$b1.Of(System.Linq.Expressions.ParameterExpression)) ((indexExpression.Arguments.Count + 2));
	var list2 = new (System.Collections.Generic.List$b1.Of(System.Linq.Expressions.Expression)) ((indexExpression.Arguments.Count + 3));
	var parameterExpression = System.Linq.Expressions.Expression.Variable$1(indexExpression.Object.Type, "tempObj");
	list.Add(parameterExpression);
	list2.Add(System.Linq.Expressions.Expression.Assign(parameterExpression, indexExpression.Object));
	var list3 = new (System.Collections.Generic.List$b1.Of(System.Linq.Expressions.Expression)) (indexExpression.Arguments.Count);
	var enumerator = indexExpression.Arguments.GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current;
			var parameterExpression2 = System.Linq.Expressions.Expression.Variable$1(current.Type, JSIL.ConcatString("tempArg", list3.Count));
			list.Add(parameterExpression2);
			list3.Add(parameterExpression2);
			list2.Add(System.Linq.Expressions.Expression.Assign(parameterExpression2, current));
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	var left = System.Linq.Expressions.Expression.MakeIndex(parameterExpression, indexExpression.Indexer, list3);
	var binaryOpFromAssignmentOp = System.Linq.Expressions.BinaryExpression.GetBinaryOpFromAssignmentOp(this.NodeType);
	var expression = System.Linq.Expressions.Expression.MakeBinary$1(
		binaryOpFromAssignmentOp, 
		left, 
		this._right, 
		false, 
		this.Method
	);
	var conversion = this.GetConversion();
	if (conversion !== null) {
		expression = System.Linq.Expressions.Expression.Invoke$0(conversion, JSIL.Array.New(System.Linq.Expressions.Expression, [expression]));
	}
	var parameterExpression3 = System.Linq.Expressions.Expression.Variable$1(expression.Type, "tempValue");
	list.Add(parameterExpression3);
	list2.Add(System.Linq.Expressions.Expression.Assign(parameterExpression3, expression));
	list2.Add(System.Linq.Expressions.Expression.Assign(left, parameterExpression3));
	return System.Linq.Expressions.Expression.Block$10(list, list2);
};
System.Linq.Expressions.BinaryExpression.prototype.get_Conversion = function () {
	return this.GetConversion();
};
System.Linq.Expressions.BinaryExpression.prototype.GetConversion = function () {
	return null;
};
System.Linq.Expressions.BinaryExpression.prototype.get_IsLifted = function () {
	if (!((this.NodeType !== System.Linq.Expressions.ExpressionType.Coalesce) && (this.NodeType !== System.Linq.Expressions.ExpressionType.Assign))) {
		return false;
	}
	if ($asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(this._left.Type)) {
		var method = this.GetMethod();
		return ((method === null) || !$asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent($asm08.System.Dynamic.Utils.TypeUtils.GetNonRefType($asm08.System.Dynamic.Utils.TypeExtensions.GetParametersCached(method)[0].ParameterType), this._left.Type));
	}
	return false;
};
System.Linq.Expressions.BinaryExpression.prototype.get_IsLiftedToNull = function () {
	return (this.IsLifted && $asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(this.Type));
};
System.Linq.Expressions.BinaryExpression.prototype.Accept = function (visitor) {
	return visitor.VisitBinary(this);
};
System.Linq.Expressions.BinaryExpression.Create = function (nodeType, left, right, type, method, conversion) {
	if (nodeType === System.Linq.Expressions.ExpressionType.Assign) {
		return new $asm08.System.Linq.Expressions.AssignBinaryExpression(left, right);
	}
	if (conversion !== null) {
		return new $asm08.System.Linq.Expressions.CoalesceConversionBinaryExpression(left, right, conversion);
	}
	if (method !== null) {
		return new $asm08.System.Linq.Expressions.MethodBinaryExpression(nodeType, left, right, type, method);
	}
	if (type === System.Boolean) {
		return new $asm08.System.Linq.Expressions.LogicalBinaryExpression(nodeType, left, right);
	}
	return new $asm08.System.Linq.Expressions.SimpleBinaryExpression(nodeType, left, right, type);
};
System.Linq.Expressions.BinaryExpression.prototype.get_IsLiftedLogical = function () {
	var type = this._left.Type;
	var type2 = this._right.Type;
	var method = this.GetMethod();
	var nodeType = this.NodeType;
	return (!(((nodeType !== System.Linq.Expressions.ExpressionType.AndAlso) && 
				(nodeType !== System.Linq.Expressions.ExpressionType.OrElse)) || 
			!$asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(type2, type) || 
			!$asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(type) || 
			(method === null)) && $asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(method.ReturnType, $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(type)));
};
System.Linq.Expressions.BinaryExpression.prototype.get_IsReferenceComparison = function () {
	var type = this._left.Type;
	var type2 = this._right.Type;
	var method = this.GetMethod();
	var nodeType = this.NodeType;
	return (!(((nodeType !== System.Linq.Expressions.ExpressionType.Equal) && 
				(nodeType !== System.Linq.Expressions.ExpressionType.NotEqual)) || 
			method || 
			type.IsValueType) && !type2.IsValueType);
};
System.Linq.Expressions.BinaryExpression.prototype.ReduceUserdefinedLifted = function () {
	var parameterExpression = System.Linq.Expressions.Expression.Parameter$1(this._left.Type, "left");
	var parameterExpression2 = System.Linq.Expressions.Expression.Parameter$1(this.Right.Type, "right");
	var name = (this.NodeType === System.Linq.Expressions.ExpressionType.AndAlso) ? "op_False" : "op_True";
	var booleanOperator = $asm08.System.Dynamic.Utils.TypeUtils.GetBooleanOperator(this.Method.DeclaringType, name);
	return System.Linq.Expressions.Expression.Block$8(JSIL.Array.New(System.Linq.Expressions.ParameterExpression, [parameterExpression]), JSIL.Array.New(System.Linq.Expressions.Expression, [System.Linq.Expressions.Expression.Assign(parameterExpression, this._left), System.Linq.Expressions.Expression.Condition$0(System.Linq.Expressions.Expression.Property$3(parameterExpression, "HasValue"), System.Linq.Expressions.Expression.Condition$0(
					System.Linq.Expressions.Expression.Call$0(booleanOperator, System.Linq.Expressions.Expression.Call$11(parameterExpression, "GetValueOrDefault", null, JSIL.Array.New(System.Linq.Expressions.Expression, 0))), 
					parameterExpression, 
					System.Linq.Expressions.Expression.Block$8(JSIL.Array.New(System.Linq.Expressions.ParameterExpression, [parameterExpression2]), JSIL.Array.New(System.Linq.Expressions.Expression, [System.Linq.Expressions.Expression.Assign(parameterExpression2, this._right), System.Linq.Expressions.Expression.Condition$0(System.Linq.Expressions.Expression.Property$3(parameterExpression2, "HasValue"), System.Linq.Expressions.Expression.Convert$0(System.Linq.Expressions.Expression.Call$1(
										this.Method, 
										System.Linq.Expressions.Expression.Call$11(parameterExpression, "GetValueOrDefault", null, JSIL.Array.New(System.Linq.Expressions.Expression, 0)), 
										System.Linq.Expressions.Expression.Call$11(parameterExpression2, "GetValueOrDefault", null, JSIL.Array.New(System.Linq.Expressions.Expression, 0))
									), this.Type), System.Linq.Expressions.Expression.Constant$1(null, this.Type))]))
				), System.Linq.Expressions.Expression.Constant$1(null, this.Type))]));
};
JSIL.MakeProperty(System.Linq.Expressions.BinaryExpression.prototype, "CanReduce", 
	System.Linq.Expressions.BinaryExpression.prototype.get_CanReduce, null);
JSIL.MakeProperty(System.Linq.Expressions.BinaryExpression.prototype, "Right", 
	System.Linq.Expressions.BinaryExpression.prototype.get_Right, null);
JSIL.MakeProperty(System.Linq.Expressions.BinaryExpression.prototype, "Left", 
	System.Linq.Expressions.BinaryExpression.prototype.get_Left, null);
JSIL.MakeProperty(System.Linq.Expressions.BinaryExpression.prototype, "Method", 
	System.Linq.Expressions.BinaryExpression.prototype.get_Method, null);
JSIL.MakeProperty(System.Linq.Expressions.BinaryExpression.prototype, "Conversion", 
	System.Linq.Expressions.BinaryExpression.prototype.get_Conversion, null);
JSIL.MakeProperty(System.Linq.Expressions.BinaryExpression.prototype, "IsLifted", 
	System.Linq.Expressions.BinaryExpression.prototype.get_IsLifted, null);
JSIL.MakeProperty(System.Linq.Expressions.BinaryExpression.prototype, "IsLiftedToNull", 
	System.Linq.Expressions.BinaryExpression.prototype.get_IsLiftedToNull, null);
JSIL.MakeProperty(System.Linq.Expressions.BinaryExpression.prototype, "IsLiftedLogical", 
	System.Linq.Expressions.BinaryExpression.prototype.get_IsLiftedLogical, null);
JSIL.MakeProperty(System.Linq.Expressions.BinaryExpression.prototype, "IsReferenceComparison", 
	System.Linq.Expressions.BinaryExpression.prototype.get_IsReferenceComparison, null);
System.Linq.Expressions.BinaryExpression.prototype._left = null;
System.Linq.Expressions.BinaryExpression.prototype._right = null;

$asm08.System.Linq.Expressions.LogicalBinaryExpression.prototype._ctor = function (nodeType, left, right) {
	System.Linq.Expressions.BinaryExpression.prototype._ctor.call(this, left, right);
	this._nodeType = nodeType;
};
$asm08.System.Linq.Expressions.LogicalBinaryExpression.prototype.get_Type = function () {
	return System.Boolean;
};
$asm08.System.Linq.Expressions.LogicalBinaryExpression.prototype.get_NodeType = function () {
	return this._nodeType;
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.LogicalBinaryExpression.prototype, "Type", 
	$asm08.System.Linq.Expressions.LogicalBinaryExpression.prototype.get_Type, null);
JSIL.MakeProperty($asm08.System.Linq.Expressions.LogicalBinaryExpression.prototype, "NodeType", 
	$asm08.System.Linq.Expressions.LogicalBinaryExpression.prototype.get_NodeType, null);
$asm08.System.Linq.Expressions.LogicalBinaryExpression.prototype._nodeType = 0;

$asm08.System.Linq.Expressions.AssignBinaryExpression.prototype._ctor = function (left, right) {
	System.Linq.Expressions.BinaryExpression.prototype._ctor.call(this, left, right);
};
$asm08.System.Linq.Expressions.AssignBinaryExpression.prototype.get_Type = function () {
	return System.Linq.Expressions.BinaryExpression.prototype.get_Left.call(this).Type;
};
$asm08.System.Linq.Expressions.AssignBinaryExpression.prototype.get_NodeType = function () {
	return System.Linq.Expressions.ExpressionType.Assign;
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.AssignBinaryExpression.prototype, "Type", 
	$asm08.System.Linq.Expressions.AssignBinaryExpression.prototype.get_Type, null);
JSIL.MakeProperty($asm08.System.Linq.Expressions.AssignBinaryExpression.prototype, "NodeType", 
	$asm08.System.Linq.Expressions.AssignBinaryExpression.prototype.get_NodeType, null);

$asm08.System.Linq.Expressions.CoalesceConversionBinaryExpression.prototype._ctor = function (left, right, conversion) {
	System.Linq.Expressions.BinaryExpression.prototype._ctor.call(this, left, right);
	this._conversion = conversion;
};
$asm08.System.Linq.Expressions.CoalesceConversionBinaryExpression.prototype.GetConversion = function () {
	return this._conversion;
};
$asm08.System.Linq.Expressions.CoalesceConversionBinaryExpression.prototype.get_NodeType = function () {
	return System.Linq.Expressions.ExpressionType.Coalesce;
};
$asm08.System.Linq.Expressions.CoalesceConversionBinaryExpression.prototype.get_Type = function () {
	return System.Linq.Expressions.BinaryExpression.prototype.get_Right.call(this).Type;
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.CoalesceConversionBinaryExpression.prototype, "NodeType", 
	$asm08.System.Linq.Expressions.CoalesceConversionBinaryExpression.prototype.get_NodeType, null);
JSIL.MakeProperty($asm08.System.Linq.Expressions.CoalesceConversionBinaryExpression.prototype, "Type", 
	$asm08.System.Linq.Expressions.CoalesceConversionBinaryExpression.prototype.get_Type, null);
$asm08.System.Linq.Expressions.CoalesceConversionBinaryExpression.prototype._conversion = null;

$asm08.System.Linq.Expressions.SimpleBinaryExpression.prototype._ctor = function (nodeType, left, right, type) {
	System.Linq.Expressions.BinaryExpression.prototype._ctor.call(this, left, right);
	this._nodeType = nodeType;
	this._type = type;
};
$asm08.System.Linq.Expressions.SimpleBinaryExpression.prototype.get_NodeType = function () {
	return this._nodeType;
};
$asm08.System.Linq.Expressions.SimpleBinaryExpression.prototype.get_Type = function () {
	return this._type;
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.SimpleBinaryExpression.prototype, "NodeType", 
	$asm08.System.Linq.Expressions.SimpleBinaryExpression.prototype.get_NodeType, null);
JSIL.MakeProperty($asm08.System.Linq.Expressions.SimpleBinaryExpression.prototype, "Type", 
	$asm08.System.Linq.Expressions.SimpleBinaryExpression.prototype.get_Type, null);
$asm08.System.Linq.Expressions.SimpleBinaryExpression.prototype._nodeType = 0;
$asm08.System.Linq.Expressions.SimpleBinaryExpression.prototype._type = null;

$asm08.System.Linq.Expressions.MethodBinaryExpression.prototype._ctor = function (nodeType, left, right, type, method) {
	$asm08.System.Linq.Expressions.SimpleBinaryExpression.prototype._ctor.call(this, nodeType, left, right, type);
	this._method = method;
};
$asm08.System.Linq.Expressions.MethodBinaryExpression.prototype.GetMethod = function () {
	return this._method;
};
$asm08.System.Linq.Expressions.MethodBinaryExpression.prototype._method = null;

$asm08.System.Linq.Expressions.OpAssignMethodConversionBinaryExpression.prototype._ctor = function (nodeType, left, right, type, method, conversion) {
	$asm08.System.Linq.Expressions.MethodBinaryExpression.prototype._ctor.call(
		this, nodeType, 
		left, 
		right, 
		type, 
		method
	);
	this._conversion = conversion;
};
$asm08.System.Linq.Expressions.OpAssignMethodConversionBinaryExpression.prototype.GetConversion = function () {
	return this._conversion;
};
$asm08.System.Linq.Expressions.OpAssignMethodConversionBinaryExpression.prototype._conversion = null;

System.Linq.Expressions.BlockExpression.prototype.get_Expressions = function () {
	return this.GetOrMakeExpressions();
};
System.Linq.Expressions.BlockExpression.prototype.get_Variables = function () {
	return this.GetOrMakeVariables();
};
System.Linq.Expressions.BlockExpression.prototype.get_Result = function () {
	return this.GetExpression((this.ExpressionCount - 1));
};
System.Linq.Expressions.BlockExpression.prototype._ctor = function () {
	System.Linq.Expressions.Expression.prototype._ctor$1.call(this);
};
System.Linq.Expressions.BlockExpression.prototype.Accept = function (visitor) {
	return visitor.VisitBlock(this);
};
System.Linq.Expressions.BlockExpression.prototype.get_NodeType = function () {
	return System.Linq.Expressions.ExpressionType.Block;
};
System.Linq.Expressions.BlockExpression.prototype.get_Type = function () {
	return this.GetExpression((this.ExpressionCount - 1)).Type;
};
System.Linq.Expressions.BlockExpression.prototype.Update = function (variables, expressions) {
	if (!((variables !== JSIL.Cast(this.Variables, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.ParameterExpression))) || (expressions !== this.Expressions))) {
		return this;
	}
	return System.Linq.Expressions.Expression.Block$11(this.Type, variables, expressions);
};
System.Linq.Expressions.BlockExpression.prototype.GetExpression = function (index) {
	throw $asm08.System.Dynamic.Utils.ContractUtils.Unreachable;
};
System.Linq.Expressions.BlockExpression.prototype.get_ExpressionCount = function () {
	throw $asm08.System.Dynamic.Utils.ContractUtils.Unreachable;
};
System.Linq.Expressions.BlockExpression.prototype.GetOrMakeExpressions = function () {
	throw $asm08.System.Dynamic.Utils.ContractUtils.Unreachable;
};
System.Linq.Expressions.BlockExpression.prototype.GetVariable = function (index) {
	throw $asm08.System.Dynamic.Utils.ContractUtils.Unreachable;
};
System.Linq.Expressions.BlockExpression.prototype.get_VariableCount = function () {
	return 0;
};
System.Linq.Expressions.BlockExpression.prototype.GetOrMakeVariables = function () {
	return $asm08.System.Dynamic.Utils.EmptyReadOnlyCollection$b1.Of(System.Linq.Expressions.ParameterExpression).Instance;
};
System.Linq.Expressions.BlockExpression.prototype.Rewrite = function (variables, args) {
	throw $asm08.System.Dynamic.Utils.ContractUtils.Unreachable;
};
System.Linq.Expressions.BlockExpression.ReturnReadOnlyExpressions = function (provider, /* ref */ collection) {
	var expression = JSIL.TryCast(collection.value, System.Linq.Expressions.Expression);
	if (expression !== null) {
		System.Threading.Interlocked.CompareExchange(/* ref */ collection, new (System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(System.Linq.Expressions.Expression)) (new $asm08.System.Linq.Expressions.BlockExpressionList(provider, expression)), expression);
	}
	return JSIL.Cast(collection.value, System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(System.Linq.Expressions.Expression));
};
JSIL.MakeProperty(System.Linq.Expressions.BlockExpression.prototype, "Expressions", 
	System.Linq.Expressions.BlockExpression.prototype.get_Expressions, null);
JSIL.MakeProperty(System.Linq.Expressions.BlockExpression.prototype, "Variables", 
	System.Linq.Expressions.BlockExpression.prototype.get_Variables, null);
JSIL.MakeProperty(System.Linq.Expressions.BlockExpression.prototype, "Result", 
	System.Linq.Expressions.BlockExpression.prototype.get_Result, null);
JSIL.MakeProperty(System.Linq.Expressions.BlockExpression.prototype, "NodeType", 
	System.Linq.Expressions.BlockExpression.prototype.get_NodeType, null);
JSIL.MakeProperty(System.Linq.Expressions.BlockExpression.prototype, "Type", 
	System.Linq.Expressions.BlockExpression.prototype.get_Type, null);
JSIL.MakeProperty(System.Linq.Expressions.BlockExpression.prototype, "ExpressionCount", 
	System.Linq.Expressions.BlockExpression.prototype.get_ExpressionCount, null);
JSIL.MakeProperty(System.Linq.Expressions.BlockExpression.prototype, "VariableCount", 
	System.Linq.Expressions.BlockExpression.prototype.get_VariableCount, null);

$asm08.System.Linq.Expressions.Block2.prototype._ctor = function (arg0, arg1) {
	System.Linq.Expressions.BlockExpression.prototype._ctor.call(this);
	this._arg0 = arg0;
	this._arg1 = arg1;
};
$asm08.System.Linq.Expressions.Block2.prototype.GetExpression = function (index) {
	switch (index) {
		case 0: 
			return System.Linq.Expressions.Expression.ReturnObject$b1(System.Linq.Expressions.Expression)(this._arg0);
		case 1: 
			return this._arg1;
		default: 
			throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
	}
};
$asm08.System.Linq.Expressions.Block2.prototype.get_ExpressionCount = function () {
	return 2;
};
$asm08.System.Linq.Expressions.Block2.prototype.GetOrMakeExpressions = function () {
	return System.Linq.Expressions.BlockExpression.ReturnReadOnlyExpressions(this, /* ref */ new JSIL.MemberReference(this, "_arg0"));
};
$asm08.System.Linq.Expressions.Block2.prototype.Rewrite = function (variables, args) {
	return new $asm08.System.Linq.Expressions.Block2(args[0], args[1]);
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.Block2.prototype, "ExpressionCount", 
	$asm08.System.Linq.Expressions.Block2.prototype.get_ExpressionCount, null);
$asm08.System.Linq.Expressions.Block2.prototype._arg0 = null;
$asm08.System.Linq.Expressions.Block2.prototype._arg1 = null;

$asm08.System.Linq.Expressions.Block3.prototype._ctor = function (arg0, arg1, arg2) {
	System.Linq.Expressions.BlockExpression.prototype._ctor.call(this);
	this._arg0 = arg0;
	this._arg1 = arg1;
	this._arg2 = arg2;
};
$asm08.System.Linq.Expressions.Block3.prototype.GetExpression = function (index) {
	switch (index) {
		case 0: 
			return System.Linq.Expressions.Expression.ReturnObject$b1(System.Linq.Expressions.Expression)(this._arg0);
		case 1: 
			return this._arg1;
		case 2: 
			return this._arg2;
		default: 
			throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
	}
};
$asm08.System.Linq.Expressions.Block3.prototype.get_ExpressionCount = function () {
	return 3;
};
$asm08.System.Linq.Expressions.Block3.prototype.GetOrMakeExpressions = function () {
	return System.Linq.Expressions.BlockExpression.ReturnReadOnlyExpressions(this, /* ref */ new JSIL.MemberReference(this, "_arg0"));
};
$asm08.System.Linq.Expressions.Block3.prototype.Rewrite = function (variables, args) {
	return new $asm08.System.Linq.Expressions.Block3(args[0], args[1], args[2]);
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.Block3.prototype, "ExpressionCount", 
	$asm08.System.Linq.Expressions.Block3.prototype.get_ExpressionCount, null);
$asm08.System.Linq.Expressions.Block3.prototype._arg0 = null;
$asm08.System.Linq.Expressions.Block3.prototype._arg1 = null;
$asm08.System.Linq.Expressions.Block3.prototype._arg2 = null;

$asm08.System.Linq.Expressions.Block4.prototype._ctor = function (arg0, arg1, arg2, arg3) {
	System.Linq.Expressions.BlockExpression.prototype._ctor.call(this);
	this._arg0 = arg0;
	this._arg1 = arg1;
	this._arg2 = arg2;
	this._arg3 = arg3;
};
$asm08.System.Linq.Expressions.Block4.prototype.GetExpression = function (index) {
	switch (index) {
		case 0: 
			return System.Linq.Expressions.Expression.ReturnObject$b1(System.Linq.Expressions.Expression)(this._arg0);
		case 1: 
			return this._arg1;
		case 2: 
			return this._arg2;
		case 3: 
			return this._arg3;
		default: 
			throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
	}
};
$asm08.System.Linq.Expressions.Block4.prototype.get_ExpressionCount = function () {
	return 4;
};
$asm08.System.Linq.Expressions.Block4.prototype.GetOrMakeExpressions = function () {
	return System.Linq.Expressions.BlockExpression.ReturnReadOnlyExpressions(this, /* ref */ new JSIL.MemberReference(this, "_arg0"));
};
$asm08.System.Linq.Expressions.Block4.prototype.Rewrite = function (variables, args) {
	return new $asm08.System.Linq.Expressions.Block4(args[0], args[1], args[2], args[3]);
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.Block4.prototype, "ExpressionCount", 
	$asm08.System.Linq.Expressions.Block4.prototype.get_ExpressionCount, null);
$asm08.System.Linq.Expressions.Block4.prototype._arg0 = null;
$asm08.System.Linq.Expressions.Block4.prototype._arg1 = null;
$asm08.System.Linq.Expressions.Block4.prototype._arg2 = null;
$asm08.System.Linq.Expressions.Block4.prototype._arg3 = null;

$asm08.System.Linq.Expressions.Block5.prototype._ctor = function (arg0, arg1, arg2, arg3, arg4) {
	System.Linq.Expressions.BlockExpression.prototype._ctor.call(this);
	this._arg0 = arg0;
	this._arg1 = arg1;
	this._arg2 = arg2;
	this._arg3 = arg3;
	this._arg4 = arg4;
};
$asm08.System.Linq.Expressions.Block5.prototype.GetExpression = function (index) {
	switch (index) {
		case 0: 
			return System.Linq.Expressions.Expression.ReturnObject$b1(System.Linq.Expressions.Expression)(this._arg0);
		case 1: 
			return this._arg1;
		case 2: 
			return this._arg2;
		case 3: 
			return this._arg3;
		case 4: 
			return this._arg4;
		default: 
			throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
	}
};
$asm08.System.Linq.Expressions.Block5.prototype.get_ExpressionCount = function () {
	return 5;
};
$asm08.System.Linq.Expressions.Block5.prototype.GetOrMakeExpressions = function () {
	return System.Linq.Expressions.BlockExpression.ReturnReadOnlyExpressions(this, /* ref */ new JSIL.MemberReference(this, "_arg0"));
};
$asm08.System.Linq.Expressions.Block5.prototype.Rewrite = function (variables, args) {
	return new $asm08.System.Linq.Expressions.Block5(args[0], args[1], args[2], args[3], args[4]);
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.Block5.prototype, "ExpressionCount", 
	$asm08.System.Linq.Expressions.Block5.prototype.get_ExpressionCount, null);
$asm08.System.Linq.Expressions.Block5.prototype._arg0 = null;
$asm08.System.Linq.Expressions.Block5.prototype._arg1 = null;
$asm08.System.Linq.Expressions.Block5.prototype._arg2 = null;
$asm08.System.Linq.Expressions.Block5.prototype._arg3 = null;
$asm08.System.Linq.Expressions.Block5.prototype._arg4 = null;

$asm08.System.Linq.Expressions.BlockN.prototype._ctor = function (expressions) {
	System.Linq.Expressions.BlockExpression.prototype._ctor.call(this);
	this._expressions = expressions;
};
$asm08.System.Linq.Expressions.BlockN.prototype.GetExpression = function (index) {
	return this._expressions.IList$b1_get_Item(index);
};
$asm08.System.Linq.Expressions.BlockN.prototype.get_ExpressionCount = function () {
	return this._expressions.ICollection$b1_Count;
};
$asm08.System.Linq.Expressions.BlockN.prototype.GetOrMakeExpressions = function () {
	return System.Linq.Expressions.Expression.ReturnReadOnly$b1(System.Linq.Expressions.Expression)(/* ref */ new JSIL.MemberReference(this, "_expressions"));
};
$asm08.System.Linq.Expressions.BlockN.prototype.Rewrite = function (variables, args) {
	return new $asm08.System.Linq.Expressions.BlockN(JSIL.Cast(args, System.Collections.Generic.IList$b1.Of(System.Linq.Expressions.Expression)));
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.BlockN.prototype, "ExpressionCount", 
	$asm08.System.Linq.Expressions.BlockN.prototype.get_ExpressionCount, null);
$asm08.System.Linq.Expressions.BlockN.prototype._expressions = null;

$asm08.System.Linq.Expressions.ScopeExpression.prototype._ctor = function (variables) {
	System.Linq.Expressions.BlockExpression.prototype._ctor.call(this);
	this._variables = variables;
};
$asm08.System.Linq.Expressions.ScopeExpression.prototype.get_VariableCount = function () {
	return this._variables.ICollection$b1_Count;
};
$asm08.System.Linq.Expressions.ScopeExpression.prototype.GetVariable = function (index) {
	return this._variables.IList$b1_get_Item(index);
};
$asm08.System.Linq.Expressions.ScopeExpression.prototype.GetOrMakeVariables = function () {
	return System.Linq.Expressions.Expression.ReturnReadOnly$b1(System.Linq.Expressions.ParameterExpression)(/* ref */ new JSIL.MemberReference(this, "_variables"));
};
$asm08.System.Linq.Expressions.ScopeExpression.prototype.get_VariablesList = function () {
	return this._variables;
};
$asm08.System.Linq.Expressions.ScopeExpression.prototype.ReuseOrValidateVariables = function (variables) {
	if (!((variables === null) || (variables === JSIL.Cast(this.VariablesList, System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(System.Linq.Expressions.ParameterExpression))))) {
		System.Linq.Expressions.Expression.ValidateVariables(variables, "variables");
		return JSIL.Cast(variables, System.Collections.Generic.IList$b1.Of(System.Linq.Expressions.ParameterExpression));
	}
	return this.VariablesList;
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.ScopeExpression.prototype, "VariableCount", 
	$asm08.System.Linq.Expressions.ScopeExpression.prototype.get_VariableCount, null);
JSIL.MakeProperty($asm08.System.Linq.Expressions.ScopeExpression.prototype, "VariablesList", 
	$asm08.System.Linq.Expressions.ScopeExpression.prototype.get_VariablesList, null);
$asm08.System.Linq.Expressions.ScopeExpression.prototype._variables = null;

$asm08.System.Linq.Expressions.Scope1.prototype._ctor = function (variables, body) {
	$asm08.System.Linq.Expressions.ScopeExpression.prototype._ctor.call(this, variables);
	this._body = body;
};
$asm08.System.Linq.Expressions.Scope1.prototype.GetExpression = function (index) {
	if (index === 0) {
		return System.Linq.Expressions.Expression.ReturnObject$b1(System.Linq.Expressions.Expression)(this._body);
	}
	throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
};
$asm08.System.Linq.Expressions.Scope1.prototype.get_ExpressionCount = function () {
	return 1;
};
$asm08.System.Linq.Expressions.Scope1.prototype.GetOrMakeExpressions = function () {
	return System.Linq.Expressions.BlockExpression.ReturnReadOnlyExpressions(this, /* ref */ new JSIL.MemberReference(this, "_body"));
};
$asm08.System.Linq.Expressions.Scope1.prototype.Rewrite = function (variables, args) {
	return new $asm08.System.Linq.Expressions.Scope1($asm08.System.Linq.Expressions.ScopeExpression.prototype.ReuseOrValidateVariables.call(this, variables), args[0]);
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.Scope1.prototype, "ExpressionCount", 
	$asm08.System.Linq.Expressions.Scope1.prototype.get_ExpressionCount, null);
$asm08.System.Linq.Expressions.Scope1.prototype._body = null;

$asm08.System.Linq.Expressions.ScopeN.prototype._ctor = function (variables, body) {
	$asm08.System.Linq.Expressions.ScopeExpression.prototype._ctor.call(this, variables);
	this._body = body;
};
$asm08.System.Linq.Expressions.ScopeN.prototype.GetExpression = function (index) {
	return this._body.IList$b1_get_Item(index);
};
$asm08.System.Linq.Expressions.ScopeN.prototype.get_ExpressionCount = function () {
	return this._body.ICollection$b1_Count;
};
$asm08.System.Linq.Expressions.ScopeN.prototype.GetOrMakeExpressions = function () {
	return System.Linq.Expressions.Expression.ReturnReadOnly$b1(System.Linq.Expressions.Expression)(/* ref */ new JSIL.MemberReference(this, "_body"));
};
$asm08.System.Linq.Expressions.ScopeN.prototype.Rewrite = function (variables, args) {
	return new $asm08.System.Linq.Expressions.ScopeN($asm08.System.Linq.Expressions.ScopeExpression.prototype.ReuseOrValidateVariables.call(this, variables), JSIL.Cast(args, System.Collections.Generic.IList$b1.Of(System.Linq.Expressions.Expression)));
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.ScopeN.prototype, "ExpressionCount", 
	$asm08.System.Linq.Expressions.ScopeN.prototype.get_ExpressionCount, null);
$asm08.System.Linq.Expressions.ScopeN.prototype._body = null;

$asm08.System.Linq.Expressions.ScopeWithType.prototype._ctor = function (variables, expressions, type) {
	$asm08.System.Linq.Expressions.ScopeN.prototype._ctor.call(this, variables, expressions);
	this._type = type;
};
$asm08.System.Linq.Expressions.ScopeWithType.prototype.get_Type = function () {
	return this._type;
};
$asm08.System.Linq.Expressions.ScopeWithType.prototype.Rewrite = function (variables, args) {
	return new $asm08.System.Linq.Expressions.ScopeWithType($asm08.System.Linq.Expressions.ScopeExpression.prototype.ReuseOrValidateVariables.call(this, variables), JSIL.Cast(args, System.Collections.Generic.IList$b1.Of(System.Linq.Expressions.Expression)), this._type);
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.ScopeWithType.prototype, "Type", 
	$asm08.System.Linq.Expressions.ScopeWithType.prototype.get_Type, null);
$asm08.System.Linq.Expressions.ScopeWithType.prototype._type = null;

$asm08.System.Linq.Expressions.BlockExpressionList.prototype._ctor = function (provider, arg0) {
	System.Object.prototype._ctor.call(this);
	this._block = provider;
	this._arg0 = arg0;
};
$asm08.System.Linq.Expressions.BlockExpressionList.prototype.IndexOf = function (item) {
	if (this._arg0 === item) {
		return 0;
	}
__loop0__: 
	for (var i = 1; i < this._block.ExpressionCount; ++i) {
		if (this._block.GetExpression(i) === item) {
			return i;
		}
	}
	return -1;
};
$asm08.System.Linq.Expressions.BlockExpressionList.prototype.Insert = function (index, item) {
	throw $asm08.System.Dynamic.Utils.ContractUtils.Unreachable;
};
$asm08.System.Linq.Expressions.BlockExpressionList.prototype.RemoveAt = function (index) {
	throw $asm08.System.Dynamic.Utils.ContractUtils.Unreachable;
};
$asm08.System.Linq.Expressions.BlockExpressionList.prototype.get_Item = function (index) {
	if (index === 0) {
		return this._arg0;
	}
	return this._block.GetExpression(index);
};
$asm08.System.Linq.Expressions.BlockExpressionList.prototype.set_Item = function (index, value) {
	throw $asm08.System.Dynamic.Utils.ContractUtils.Unreachable;
};
$asm08.System.Linq.Expressions.BlockExpressionList.prototype.Add = function (item) {
	throw $asm08.System.Dynamic.Utils.ContractUtils.Unreachable;
};
$asm08.System.Linq.Expressions.BlockExpressionList.prototype.Clear = function () {
	throw $asm08.System.Dynamic.Utils.ContractUtils.Unreachable;
};
$asm08.System.Linq.Expressions.BlockExpressionList.prototype.Contains = function (item) {
	return (this.IndexOf(item) !== -1);
};
$asm08.System.Linq.Expressions.BlockExpressionList.prototype.CopyTo = function (array, arrayIndex) {
	array[arrayIndex++] = this._arg0;
__loop0__: 
	for (var i = 1; i < this._block.ExpressionCount; ++i) {
		array[arrayIndex++] = this._block.GetExpression(i);
	}
};
$asm08.System.Linq.Expressions.BlockExpressionList.prototype.get_Count = function () {
	return this._block.ExpressionCount;
};
$asm08.System.Linq.Expressions.BlockExpressionList.prototype.get_IsReadOnly = function () {
	return true;
};
$asm08.System.Linq.Expressions.BlockExpressionList.prototype.Remove = function (item) {
	throw $asm08.System.Dynamic.Utils.ContractUtils.Unreachable;
};
$asm08.System.Linq.Expressions.BlockExpressionList.prototype.GetEnumerator = function () {
	var $lGetEnumerator$gd__ = new $asm08.System.Linq.Expressions.BlockExpressionList.$lGetEnumerator$gd__0(0);
	$lGetEnumerator$gd__.$this = this;
	return $lGetEnumerator$gd__;
};
$asm08.System.Linq.Expressions.BlockExpressionList.prototype.IEnumerable_GetEnumerator = function () {
	var getEnumerator$gd__ = new $asm08.System.Linq.Expressions.BlockExpressionList.GetEnumerator$gd__3(0);
	getEnumerator$gd__.$this = this;
	return getEnumerator$gd__;
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.BlockExpressionList.prototype, "Item", 
	$asm08.System.Linq.Expressions.BlockExpressionList.prototype.get_Item, $asm08.System.Linq.Expressions.BlockExpressionList.prototype.set_Item);
JSIL.MakeProperty($asm08.System.Linq.Expressions.BlockExpressionList.prototype, "Count", 
	$asm08.System.Linq.Expressions.BlockExpressionList.prototype.get_Count, null);
JSIL.MakeProperty($asm08.System.Linq.Expressions.BlockExpressionList.prototype, "IsReadOnly", 
	$asm08.System.Linq.Expressions.BlockExpressionList.prototype.get_IsReadOnly, null);
$asm08.System.Linq.Expressions.BlockExpressionList.prototype._block = null;
$asm08.System.Linq.Expressions.BlockExpressionList.prototype._arg0 = null;

$asm08.System.Linq.Expressions.BlockExpressionList.$lGetEnumerator$gd__0.prototype.IEnumerator_MoveNext = function () {
	switch (this.$state) {
		case 0: 
			this.$state = -1;
			this.$current = this.$this._arg0;
			this.$state = 1;
			return true;
		case 1: 
			this.$state = -1;
			this.i = 1;
			break;
		case 2: 
			this.$state = -1;
			++this.i;
			break;
		default: 
			return false;
	}
	if (this.i >= this.$this._block.ExpressionCount) {
		return false;
	}
	this.$current = this.$this._block.GetExpression(this.i);
	this.$state = 2;
	return true;
};
$asm08.System.Linq.Expressions.BlockExpressionList.$lGetEnumerator$gd__0.prototype.IEnumerator$b1_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Expressions.BlockExpressionList.$lGetEnumerator$gd__0.prototype.IEnumerator_Reset = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm08.System.Linq.Expressions.BlockExpressionList.$lGetEnumerator$gd__0.prototype.IDisposable_Dispose = function () {
};
$asm08.System.Linq.Expressions.BlockExpressionList.$lGetEnumerator$gd__0.prototype.IEnumerator_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Expressions.BlockExpressionList.$lGetEnumerator$gd__0.prototype._ctor = function ($l$g1__state) {
	System.Object.prototype._ctor.call(this);
	this.$state = $l$g1__state;
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.BlockExpressionList.$lGetEnumerator$gd__0.prototype, "IEnumerator$b1_Current", 
	$asm08.System.Linq.Expressions.BlockExpressionList.$lGetEnumerator$gd__0.prototype.IEnumerator$b1_get_Current, null);
JSIL.MakeProperty($asm08.System.Linq.Expressions.BlockExpressionList.$lGetEnumerator$gd__0.prototype, "IEnumerator_Current", 
	$asm08.System.Linq.Expressions.BlockExpressionList.$lGetEnumerator$gd__0.prototype.IEnumerator_get_Current, null);
$asm08.System.Linq.Expressions.BlockExpressionList.$lGetEnumerator$gd__0.prototype.$current = null;
$asm08.System.Linq.Expressions.BlockExpressionList.$lGetEnumerator$gd__0.prototype.$state = 0;
$asm08.System.Linq.Expressions.BlockExpressionList.$lGetEnumerator$gd__0.prototype.$this = null;
$asm08.System.Linq.Expressions.BlockExpressionList.$lGetEnumerator$gd__0.prototype.i = 0;

$asm08.System.Linq.Expressions.BlockExpressionList.GetEnumerator$gd__3.prototype.IEnumerator_MoveNext = function () {
	switch (this.$state) {
		case 0: 
			this.$state = -1;
			this.$current = this.$this._arg0;
			this.$state = 1;
			return true;
		case 1: 
			this.$state = -1;
			this.i = 1;
			break;
		case 2: 
			this.$state = -1;
			++this.i;
			break;
		default: 
			return false;
	}
	if (this.i >= this.$this._block.ExpressionCount) {
		return false;
	}
	this.$current = this.$this._block.GetExpression(this.i);
	this.$state = 2;
	return true;
};
$asm08.System.Linq.Expressions.BlockExpressionList.GetEnumerator$gd__3.prototype.IEnumerator$b1_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Expressions.BlockExpressionList.GetEnumerator$gd__3.prototype.IEnumerator_Reset = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm08.System.Linq.Expressions.BlockExpressionList.GetEnumerator$gd__3.prototype.IDisposable_Dispose = function () {
};
$asm08.System.Linq.Expressions.BlockExpressionList.GetEnumerator$gd__3.prototype.IEnumerator_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Expressions.BlockExpressionList.GetEnumerator$gd__3.prototype._ctor = function ($l$g1__state) {
	System.Object.prototype._ctor.call(this);
	this.$state = $l$g1__state;
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.BlockExpressionList.GetEnumerator$gd__3.prototype, "IEnumerator$b1_Current", 
	$asm08.System.Linq.Expressions.BlockExpressionList.GetEnumerator$gd__3.prototype.IEnumerator$b1_get_Current, null);
JSIL.MakeProperty($asm08.System.Linq.Expressions.BlockExpressionList.GetEnumerator$gd__3.prototype, "IEnumerator_Current", 
	$asm08.System.Linq.Expressions.BlockExpressionList.GetEnumerator$gd__3.prototype.IEnumerator_get_Current, null);
$asm08.System.Linq.Expressions.BlockExpressionList.GetEnumerator$gd__3.prototype.$current = null;
$asm08.System.Linq.Expressions.BlockExpressionList.GetEnumerator$gd__3.prototype.$state = 0;
$asm08.System.Linq.Expressions.BlockExpressionList.GetEnumerator$gd__3.prototype.$this = null;
$asm08.System.Linq.Expressions.BlockExpressionList.GetEnumerator$gd__3.prototype.i = 0;

System.Linq.Expressions.CatchBlock.prototype._ctor = function (test, variable, body, filter) {
	System.Object.prototype._ctor.call(this);
	this._test = test;
	this._var = variable;
	this._body = body;
	this._filter = filter;
};
System.Linq.Expressions.CatchBlock.prototype.get_Variable = function () {
	return this._var;
};
System.Linq.Expressions.CatchBlock.prototype.get_Test = function () {
	return this._test;
};
System.Linq.Expressions.CatchBlock.prototype.get_Body = function () {
	return this._body;
};
System.Linq.Expressions.CatchBlock.prototype.get_Filter = function () {
	return this._filter;
};
System.Linq.Expressions.CatchBlock.prototype.toString = function () {
	return $asm08.System.Linq.Expressions.ExpressionStringBuilder.CatchBlockToString(this);
};
System.Linq.Expressions.CatchBlock.prototype.Update = function (variable, filter, body) {
	if (!((variable !== this.Variable) || 
			(filter !== this.Filter) || (body !== this.Body))) {
		return this;
	}
	return System.Linq.Expressions.Expression.MakeCatchBlock(this.Test, variable, body, filter);
};
JSIL.MakeProperty(System.Linq.Expressions.CatchBlock.prototype, "Variable", 
	System.Linq.Expressions.CatchBlock.prototype.get_Variable, null);
JSIL.MakeProperty(System.Linq.Expressions.CatchBlock.prototype, "Test", 
	System.Linq.Expressions.CatchBlock.prototype.get_Test, null);
JSIL.MakeProperty(System.Linq.Expressions.CatchBlock.prototype, "Body", 
	System.Linq.Expressions.CatchBlock.prototype.get_Body, null);
JSIL.MakeProperty(System.Linq.Expressions.CatchBlock.prototype, "Filter", 
	System.Linq.Expressions.CatchBlock.prototype.get_Filter, null);
System.Linq.Expressions.CatchBlock.prototype._test = null;
System.Linq.Expressions.CatchBlock.prototype._var = null;
System.Linq.Expressions.CatchBlock.prototype._body = null;
System.Linq.Expressions.CatchBlock.prototype._filter = null;

System.Linq.Expressions.ConditionalExpression.prototype._ctor = function (test, ifTrue) {
	System.Linq.Expressions.Expression.prototype._ctor$1.call(this);
	this._test = test;
	this._true = ifTrue;
};
System.Linq.Expressions.ConditionalExpression.Make = function (test, ifTrue, ifFalse, type) {
	if (!((ifTrue.Type === type) && (ifFalse.Type === type))) {
		return new $asm08.System.Linq.Expressions.FullConditionalExpressionWithType(test, ifTrue, ifFalse, type);
	}
	if (!((JSIL.TryCast(ifFalse, System.Linq.Expressions.DefaultExpression) === null) || (ifFalse.Type !== System.Void))) {
		return new System.Linq.Expressions.ConditionalExpression(test, ifTrue);
	}
	return new $asm08.System.Linq.Expressions.FullConditionalExpression(test, ifTrue, ifFalse);
};
System.Linq.Expressions.ConditionalExpression.prototype.get_NodeType = function () {
	return System.Linq.Expressions.ExpressionType.Conditional;
};
System.Linq.Expressions.ConditionalExpression.prototype.get_Type = function () {
	return this.IfTrue.Type;
};
System.Linq.Expressions.ConditionalExpression.prototype.get_Test = function () {
	return this._test;
};
System.Linq.Expressions.ConditionalExpression.prototype.get_IfTrue = function () {
	return this._true;
};
System.Linq.Expressions.ConditionalExpression.prototype.get_IfFalse = function () {
	return this.GetFalse();
};
System.Linq.Expressions.ConditionalExpression.prototype.GetFalse = function () {
	return System.Linq.Expressions.Expression.Empty();
};
System.Linq.Expressions.ConditionalExpression.prototype.Accept = function (visitor) {
	return visitor.VisitConditional(this);
};
System.Linq.Expressions.ConditionalExpression.prototype.Update = function (test, ifTrue, ifFalse) {
	if (!((test !== this.Test) || 
			(ifTrue !== this.IfTrue) || (ifFalse !== this.IfFalse))) {
		return this;
	}
	return System.Linq.Expressions.Expression.Condition$1(test, ifTrue, ifFalse, this.Type);
};
JSIL.MakeProperty(System.Linq.Expressions.ConditionalExpression.prototype, "NodeType", 
	System.Linq.Expressions.ConditionalExpression.prototype.get_NodeType, null);
JSIL.MakeProperty(System.Linq.Expressions.ConditionalExpression.prototype, "Type", 
	System.Linq.Expressions.ConditionalExpression.prototype.get_Type, null);
JSIL.MakeProperty(System.Linq.Expressions.ConditionalExpression.prototype, "Test", 
	System.Linq.Expressions.ConditionalExpression.prototype.get_Test, null);
JSIL.MakeProperty(System.Linq.Expressions.ConditionalExpression.prototype, "IfTrue", 
	System.Linq.Expressions.ConditionalExpression.prototype.get_IfTrue, null);
JSIL.MakeProperty(System.Linq.Expressions.ConditionalExpression.prototype, "IfFalse", 
	System.Linq.Expressions.ConditionalExpression.prototype.get_IfFalse, null);
System.Linq.Expressions.ConditionalExpression.prototype._test = null;
System.Linq.Expressions.ConditionalExpression.prototype._true = null;

$asm08.System.Linq.Expressions.FullConditionalExpression.prototype._ctor = function (test, ifTrue, ifFalse) {
	System.Linq.Expressions.ConditionalExpression.prototype._ctor.call(this, test, ifTrue);
	this._false = ifFalse;
};
$asm08.System.Linq.Expressions.FullConditionalExpression.prototype.GetFalse = function () {
	return this._false;
};
$asm08.System.Linq.Expressions.FullConditionalExpression.prototype._false = null;

$asm08.System.Linq.Expressions.FullConditionalExpressionWithType.prototype._ctor = function (test, ifTrue, ifFalse, type) {
	$asm08.System.Linq.Expressions.FullConditionalExpression.prototype._ctor.call(this, test, ifTrue, ifFalse);
	this._type = type;
};
$asm08.System.Linq.Expressions.FullConditionalExpressionWithType.prototype.get_Type = function () {
	return this._type;
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.FullConditionalExpressionWithType.prototype, "Type", 
	$asm08.System.Linq.Expressions.FullConditionalExpressionWithType.prototype.get_Type, null);
$asm08.System.Linq.Expressions.FullConditionalExpressionWithType.prototype._type = null;

System.Linq.Expressions.ConstantExpression.prototype._ctor = function (value) {
	System.Linq.Expressions.Expression.prototype._ctor$1.call(this);
	this._value = value;
};
System.Linq.Expressions.ConstantExpression.Make = function (value, type) {
	if (!(!((value === null) && 
				(type === System.Object)) && ((value === null) || 
				((JSIL.GetType(value)) !== type)))) {
		return new System.Linq.Expressions.ConstantExpression(value);
	}
	return new $asm08.System.Linq.Expressions.TypedConstantExpression(value, type);
};
System.Linq.Expressions.ConstantExpression.prototype.get_Type = function () {
	if (this._value === null) {
		return System.Object;
	}
	return JSIL.GetType(this._value);
};
System.Linq.Expressions.ConstantExpression.prototype.get_NodeType = function () {
	return System.Linq.Expressions.ExpressionType.Constant;
};
System.Linq.Expressions.ConstantExpression.prototype.get_Value = function () {
	return this._value;
};
System.Linq.Expressions.ConstantExpression.prototype.Accept = function (visitor) {
	return visitor.VisitConstant(this);
};
JSIL.MakeProperty(System.Linq.Expressions.ConstantExpression.prototype, "Type", 
	System.Linq.Expressions.ConstantExpression.prototype.get_Type, null);
JSIL.MakeProperty(System.Linq.Expressions.ConstantExpression.prototype, "NodeType", 
	System.Linq.Expressions.ConstantExpression.prototype.get_NodeType, null);
JSIL.MakeProperty(System.Linq.Expressions.ConstantExpression.prototype, "Value", 
	System.Linq.Expressions.ConstantExpression.prototype.get_Value, null);
System.Linq.Expressions.ConstantExpression.prototype._value = null;

$asm08.System.Linq.Expressions.TypedConstantExpression.prototype._ctor = function (value, type) {
	System.Linq.Expressions.ConstantExpression.prototype._ctor.call(this, value);
	this._type = type;
};
$asm08.System.Linq.Expressions.TypedConstantExpression.prototype.get_Type = function () {
	return this._type;
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.TypedConstantExpression.prototype, "Type", 
	$asm08.System.Linq.Expressions.TypedConstantExpression.prototype.get_Type, null);
$asm08.System.Linq.Expressions.TypedConstantExpression.prototype._type = null;

System.Linq.Expressions.DebugInfoExpression.prototype._ctor = function (document) {
	System.Linq.Expressions.Expression.prototype._ctor$1.call(this);
	this._document = document;
};
System.Linq.Expressions.DebugInfoExpression.prototype.get_Type = function () {
	return System.Void;
};
System.Linq.Expressions.DebugInfoExpression.prototype.get_NodeType = function () {
	return System.Linq.Expressions.ExpressionType.DebugInfo;
};
System.Linq.Expressions.DebugInfoExpression.prototype.get_StartLine = function () {
	throw $asm08.System.Dynamic.Utils.ContractUtils.Unreachable;
};
System.Linq.Expressions.DebugInfoExpression.prototype.get_StartColumn = function () {
	throw $asm08.System.Dynamic.Utils.ContractUtils.Unreachable;
};
System.Linq.Expressions.DebugInfoExpression.prototype.get_EndLine = function () {
	throw $asm08.System.Dynamic.Utils.ContractUtils.Unreachable;
};
System.Linq.Expressions.DebugInfoExpression.prototype.get_EndColumn = function () {
	throw $asm08.System.Dynamic.Utils.ContractUtils.Unreachable;
};
System.Linq.Expressions.DebugInfoExpression.prototype.get_Document = function () {
	return this._document;
};
System.Linq.Expressions.DebugInfoExpression.prototype.get_IsClear = function () {
	throw $asm08.System.Dynamic.Utils.ContractUtils.Unreachable;
};
System.Linq.Expressions.DebugInfoExpression.prototype.Accept = function (visitor) {
	return visitor.VisitDebugInfo(this);
};
JSIL.MakeProperty(System.Linq.Expressions.DebugInfoExpression.prototype, "Type", 
	System.Linq.Expressions.DebugInfoExpression.prototype.get_Type, null);
JSIL.MakeProperty(System.Linq.Expressions.DebugInfoExpression.prototype, "NodeType", 
	System.Linq.Expressions.DebugInfoExpression.prototype.get_NodeType, null);
JSIL.MakeProperty(System.Linq.Expressions.DebugInfoExpression.prototype, "StartLine", 
	System.Linq.Expressions.DebugInfoExpression.prototype.get_StartLine, null);
JSIL.MakeProperty(System.Linq.Expressions.DebugInfoExpression.prototype, "StartColumn", 
	System.Linq.Expressions.DebugInfoExpression.prototype.get_StartColumn, null);
JSIL.MakeProperty(System.Linq.Expressions.DebugInfoExpression.prototype, "EndLine", 
	System.Linq.Expressions.DebugInfoExpression.prototype.get_EndLine, null);
JSIL.MakeProperty(System.Linq.Expressions.DebugInfoExpression.prototype, "EndColumn", 
	System.Linq.Expressions.DebugInfoExpression.prototype.get_EndColumn, null);
JSIL.MakeProperty(System.Linq.Expressions.DebugInfoExpression.prototype, "Document", 
	System.Linq.Expressions.DebugInfoExpression.prototype.get_Document, null);
JSIL.MakeProperty(System.Linq.Expressions.DebugInfoExpression.prototype, "IsClear", 
	System.Linq.Expressions.DebugInfoExpression.prototype.get_IsClear, null);
System.Linq.Expressions.DebugInfoExpression.prototype._document = null;

$asm08.System.Linq.Expressions.SpanDebugInfoExpression.prototype._ctor = function (document, startLine, startColumn, endLine, endColumn) {
	System.Linq.Expressions.DebugInfoExpression.prototype._ctor.call(this, document);
	this._startLine = startLine;
	this._startColumn = startColumn;
	this._endLine = endLine;
	this._endColumn = endColumn;
};
$asm08.System.Linq.Expressions.SpanDebugInfoExpression.prototype.get_StartLine = function () {
	return this._startLine;
};
$asm08.System.Linq.Expressions.SpanDebugInfoExpression.prototype.get_StartColumn = function () {
	return this._startColumn;
};
$asm08.System.Linq.Expressions.SpanDebugInfoExpression.prototype.get_EndLine = function () {
	return this._endLine;
};
$asm08.System.Linq.Expressions.SpanDebugInfoExpression.prototype.get_EndColumn = function () {
	return this._endColumn;
};
$asm08.System.Linq.Expressions.SpanDebugInfoExpression.prototype.get_IsClear = function () {
	return false;
};
$asm08.System.Linq.Expressions.SpanDebugInfoExpression.prototype.Accept = function (visitor) {
	return visitor.VisitDebugInfo(this);
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.SpanDebugInfoExpression.prototype, "StartLine", 
	$asm08.System.Linq.Expressions.SpanDebugInfoExpression.prototype.get_StartLine, null);
JSIL.MakeProperty($asm08.System.Linq.Expressions.SpanDebugInfoExpression.prototype, "StartColumn", 
	$asm08.System.Linq.Expressions.SpanDebugInfoExpression.prototype.get_StartColumn, null);
JSIL.MakeProperty($asm08.System.Linq.Expressions.SpanDebugInfoExpression.prototype, "EndLine", 
	$asm08.System.Linq.Expressions.SpanDebugInfoExpression.prototype.get_EndLine, null);
JSIL.MakeProperty($asm08.System.Linq.Expressions.SpanDebugInfoExpression.prototype, "EndColumn", 
	$asm08.System.Linq.Expressions.SpanDebugInfoExpression.prototype.get_EndColumn, null);
JSIL.MakeProperty($asm08.System.Linq.Expressions.SpanDebugInfoExpression.prototype, "IsClear", 
	$asm08.System.Linq.Expressions.SpanDebugInfoExpression.prototype.get_IsClear, null);
$asm08.System.Linq.Expressions.SpanDebugInfoExpression.prototype._startLine = 0;
$asm08.System.Linq.Expressions.SpanDebugInfoExpression.prototype._startColumn = 0;
$asm08.System.Linq.Expressions.SpanDebugInfoExpression.prototype._endLine = 0;
$asm08.System.Linq.Expressions.SpanDebugInfoExpression.prototype._endColumn = 0;

$asm08.System.Linq.Expressions.ClearDebugInfoExpression.prototype._ctor = function (document) {
	System.Linq.Expressions.DebugInfoExpression.prototype._ctor.call(this, document);
};
$asm08.System.Linq.Expressions.ClearDebugInfoExpression.prototype.get_IsClear = function () {
	return true;
};
$asm08.System.Linq.Expressions.ClearDebugInfoExpression.prototype.get_StartLine = function () {
	return 16707566;
};
$asm08.System.Linq.Expressions.ClearDebugInfoExpression.prototype.get_StartColumn = function () {
	return 0;
};
$asm08.System.Linq.Expressions.ClearDebugInfoExpression.prototype.get_EndLine = function () {
	return 16707566;
};
$asm08.System.Linq.Expressions.ClearDebugInfoExpression.prototype.get_EndColumn = function () {
	return 0;
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.ClearDebugInfoExpression.prototype, "IsClear", 
	$asm08.System.Linq.Expressions.ClearDebugInfoExpression.prototype.get_IsClear, null);
JSIL.MakeProperty($asm08.System.Linq.Expressions.ClearDebugInfoExpression.prototype, "StartLine", 
	$asm08.System.Linq.Expressions.ClearDebugInfoExpression.prototype.get_StartLine, null);
JSIL.MakeProperty($asm08.System.Linq.Expressions.ClearDebugInfoExpression.prototype, "StartColumn", 
	$asm08.System.Linq.Expressions.ClearDebugInfoExpression.prototype.get_StartColumn, null);
JSIL.MakeProperty($asm08.System.Linq.Expressions.ClearDebugInfoExpression.prototype, "EndLine", 
	$asm08.System.Linq.Expressions.ClearDebugInfoExpression.prototype.get_EndLine, null);
JSIL.MakeProperty($asm08.System.Linq.Expressions.ClearDebugInfoExpression.prototype, "EndColumn", 
	$asm08.System.Linq.Expressions.ClearDebugInfoExpression.prototype.get_EndColumn, null);

$asm08.System.Linq.Expressions.DebugViewWriter.prototype._ctor = function (file) {
	this._stack = JSIL.New(System.Collections.Generic.Stack$b1.Of(System.Int32), "_ctor$0", []);
	System.Linq.Expressions.ExpressionVisitor.prototype._ctor.call(this);
	this._out = file;
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.get_Base = function () {
	if (this._stack.Count <= 0) {
		return 0;
	}
	return this._stack.Peek();
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.get_Delta = function () {
	return this._delta;
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.get_Depth = function () {
	return (this.Base + this.Delta);
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.Indent = function () {
	this._delta += 4;
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.Dedent = function () {
	this._delta -= 4;
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.NewLine = function () {
	this._flow = $asm08.System.Linq.Expressions.DebugViewWriter.Flow.NewLine;
};
$asm08.System.Linq.Expressions.DebugViewWriter.GetId$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, e, /* ref */ ids) {
		if (ids.value === null) {
			ids.value = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(T, System.Int32), "_ctor$0", []);
			ids.value.Add(e, 1);
			return 1;
		}
		if (!ids.value.TryGetValue(e, /* ref */ num)) {
			var num = new JSIL.Variable((ids.value.Count + 1));
			ids.value.Add(e, num.value);
		}
		return num.value;
	}
);
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.GetLambdaId = function (le) {
	return $asm08.System.Linq.Expressions.DebugViewWriter.GetId$b1(System.Linq.Expressions.LambdaExpression)(le, /* ref */ new JSIL.MemberReference(this, "_lambdaIds"));
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.GetParamId = function (p) {
	return $asm08.System.Linq.Expressions.DebugViewWriter.GetId$b1(System.Linq.Expressions.ParameterExpression)(p, /* ref */ new JSIL.MemberReference(this, "_paramIds"));
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.GetLabelTargetId = function (target) {
	return $asm08.System.Linq.Expressions.DebugViewWriter.GetId$b1(System.Linq.Expressions.LabelTarget)(target, /* ref */ new JSIL.MemberReference(this, "_labelIds"));
};
$asm08.System.Linq.Expressions.DebugViewWriter.WriteTo = function (node, writer) {
	new $asm08.System.Linq.Expressions.DebugViewWriter(writer).WriteTo(node);
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.WriteTo = function (node) {
	var lambdaExpression = JSIL.TryCast(node, System.Linq.Expressions.LambdaExpression);
	if (lambdaExpression !== null) {
		this.WriteLambda(lambdaExpression);
	} else {
		this.Visit$0(node);
	}
__loop0__: 
	while ((this._lambdas !== null) && (this._lambdas.Count > 0)) {
		this.WriteLine();
		this.WriteLine();
		this.WriteLambda(this._lambdas.Dequeue());
	}
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.Out$0 = function (s) {
	this.Out$3($asm08.System.Linq.Expressions.DebugViewWriter.Flow.None, s, $asm08.System.Linq.Expressions.DebugViewWriter.Flow.None);
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.Out$1 = function (before, s) {
	this.Out$3(before, s, $asm08.System.Linq.Expressions.DebugViewWriter.Flow.None);
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.Out$2 = function (s, after) {
	this.Out$3($asm08.System.Linq.Expressions.DebugViewWriter.Flow.None, s, after);
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.Out$3 = function (before, s, after) {
	switch (Number(this.GetFlow(before))) {
		case 1: 
			this.Write(" ");
			break;
		case 2: 
			this.WriteLine();
			this.Write(JSIL.New(System.String, "_ctor$2", [" ", this.Depth]));
			break;
	}
	this.Write(s);
	this._flow = after;
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.WriteLine = function () {
	this._out.WriteLine$0();
	this._column = 0;
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.Write = function (s) {
	this._out.Write$11(s);
	this._column += s.length;
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.GetFlow = function (flow) {
	var val = this.CheckBreak(this._flow);
	flow = this.CheckBreak(flow);
	return System.Math.Max(Math.floor(val), Math.floor(flow));
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.CheckBreak = function (flow) {
	if (flow & $asm08.System.Linq.Expressions.DebugViewWriter.Flow.Break) {
		if (this._column > (120 + this.Depth)) {
			flow = $asm08.System.Linq.Expressions.DebugViewWriter.Flow.NewLine;
		} else {
			flow = (flow & ($asm08.System.Linq.Expressions.DebugViewWriter.Flow.NewLine | $asm08.System.Linq.Expressions.DebugViewWriter.Flow.Space));
		}
	}
	return flow;
};
$asm08.System.Linq.Expressions.DebugViewWriter.FormatBinder = function (binder) {
	var convertBinder = null, getMemberBinder = null, setMemberBinder = null, deleteMemberBinder = null, invokeMemberBinder = null, unaryOperationBinder = null, binaryOperationBinder = null;
	if ((convertBinder = JSIL.TryCast(binder, System.Dynamic.ConvertBinder)) !== null) {
		return ("Convert " + convertBinder.Type.toString());
	}
	if ((getMemberBinder = JSIL.TryCast(binder, System.Dynamic.GetMemberBinder)) !== null) {
		return ("GetMember " + getMemberBinder.Name);
	}
	if ((setMemberBinder = JSIL.TryCast(binder, System.Dynamic.SetMemberBinder)) !== null) {
		return ("SetMember " + setMemberBinder.Name);
	}
	if ((deleteMemberBinder = JSIL.TryCast(binder, System.Dynamic.DeleteMemberBinder)) !== null) {
		return ("DeleteMember " + deleteMemberBinder.Name);
	}
	if (JSIL.TryCast(binder, System.Dynamic.GetIndexBinder) !== null) {
		return "GetIndex";
	}
	if (JSIL.TryCast(binder, System.Dynamic.SetIndexBinder) !== null) {
		return "SetIndex";
	}
	if (JSIL.TryCast(binder, System.Dynamic.DeleteIndexBinder) !== null) {
		return "DeleteIndex";
	}
	if ((invokeMemberBinder = JSIL.TryCast(binder, System.Dynamic.InvokeMemberBinder)) !== null) {
		return ("Call " + invokeMemberBinder.Name);
	}
	if (JSIL.TryCast(binder, System.Dynamic.InvokeBinder) !== null) {
		return "Invoke";
	}
	if (JSIL.TryCast(binder, System.Dynamic.CreateInstanceBinder) !== null) {
		return "Create";
	}
	if ((unaryOperationBinder = JSIL.TryCast(binder, System.Dynamic.UnaryOperationBinder)) !== null) {
		return JSIL.ConcatString("UnaryOperation ", unaryOperationBinder.Operation);
	}
	if ((binaryOperationBinder = JSIL.TryCast(binder, System.Dynamic.BinaryOperationBinder)) !== null) {
		return JSIL.ConcatString("BinaryOperation ", binaryOperationBinder.Operation);
	}
	return binder.toString();
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.VisitExpressions$b1$0 = JSIL.GenericMethod(
	["T"], 
	function (T, open, expressions) {
		this.VisitExpressions$b1$1(T)(open, ",", expressions);
	}
);
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.VisitExpressions$b1$1 = JSIL.GenericMethod(
	["T"], 
	function (T, open, separator, expressions) {
		this.VisitExpressions$b1$2(T)(open, separator, expressions, function (T, e) {
				this.Visit$0(e);
			});
	}
);
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.VisitDeclarations = function (expressions) {
	this.VisitExpressions$b1$2(System.Linq.Expressions.ParameterExpression)("(", ",", expressions, function (variable) {
			this.Out$0(variable.Type.toString());
			if (variable.IsByRef) {
				this.Out$0("&");
			}
			this.Out$0(" ");
			this.VisitParameter(variable);
		});
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.VisitExpressions$b1$2 = JSIL.GenericMethod(
	["T"], 
	function (T, open, separator, expressions, visit) {
		var __label0__ = "__entry0__";
	__step0__: 
		while (true) {
			switch (__label0__) {
				case "__entry0__":
					this.Out$0(open.toString());
					if (expressions !== null) {
						this.Indent();
						var flag = true;
						var enumerator = expressions.IEnumerable$b1_GetEnumerator();
						try {
						__loop0__: 
							while (enumerator.IEnumerator_MoveNext()) {
								var current = enumerator.IEnumerator$b1_Current;
								if (flag) {
									if (!((open !== "{") && (expressions.ICollection$b1_Count <= 1))) {
										this.NewLine();
									}
									flag = false;
								} else {
									this.Out$2(separator.toString(), $asm08.System.Linq.Expressions.DebugViewWriter.Flow.NewLine);
								}
								visit(current);
							}
						} finally {
							if (enumerator !== null) {
								enumerator.IDisposable_Dispose();
							}
						}
						this.Dedent();
					}
					var c = open;
					if (c <= "<") {
						if (c === "(") {
							var c2 = ")";
							__label0__ = "IL_B2";
							continue __step0__;
						}
						if (c === "<") {
							c2 = ">";
							__label0__ = "IL_B2";
							continue __step0__;
						}
					} else {
						if (c === "[") {
							c2 = "]";
							__label0__ = "IL_B2";
							continue __step0__;
						}
						if (c === "{") {
							c2 = "}";
							__label0__ = "IL_B2";
							continue __step0__;
						}
					}
					throw $asm08.System.Dynamic.Utils.ContractUtils.Unreachable;
					__label0__ = "IL_B2";
					continue __step0__;
					break;
				case "IL_B2":
					if (open === "{") {
						this.NewLine();
					}
					this.Out$2(c2.toString(), $asm08.System.Linq.Expressions.DebugViewWriter.Flow.Break);
					break __step0__;
			}
		}
	}
);
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.VisitDynamic = function (node) {
	this.Out$2(".Dynamic", $asm08.System.Linq.Expressions.DebugViewWriter.Flow.Space);
	this.Out$0($asm08.System.Linq.Expressions.DebugViewWriter.FormatBinder(node.Binder));
	this.VisitExpressions$b1$0(System.Linq.Expressions.Expression)("(", node.Arguments);
	return node;
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.VisitBinary = function (node) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				if (node.NodeType === System.Linq.Expressions.ExpressionType.ArrayIndex) {
					this.ParenthesizedVisit(node, node.Left);
					this.Out$0("[");
					this.Visit$0(node.Right);
					this.Out$0("]");
				} else {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								var flag = $asm08.System.Linq.Expressions.DebugViewWriter.NeedsParentheses(node, node.Left);
								var flag2 = $asm08.System.Linq.Expressions.DebugViewWriter.NeedsParentheses(node, node.Right);
								var flag3 = false;
								var before = $asm08.System.Linq.Expressions.DebugViewWriter.Flow.Space;
								var nodeType = node.NodeType;
								switch (Number(nodeType)) {
									case 0: 
										var text = "+";
										__label1__ = "IL_304";
										continue __step1__;
									case 1: 
										text = "+";
										flag3 = true;
										__label1__ = "IL_304";
										continue __step1__;
									case 2: 
										text = "&";
										__label1__ = "IL_304";
										continue __step1__;
									case 3: 
										text = "&&";
										before = ($asm08.System.Linq.Expressions.DebugViewWriter.Flow.Break | $asm08.System.Linq.Expressions.DebugViewWriter.Flow.Space);
										__label1__ = "IL_304";
										continue __step1__;
									case 4: 
									case 5: 
									case 6: 
									case 8: 
									case 9: 
									case 10: 
									case 11: 
									case 17: 
									case 18: 
									case 22: 
									case 23: 
									case 24: 
									case 28: 
									case 29: 
									case 30: 
									case 31: 
									case 32: 
									case 33: 
									case 34: 
									case 38: 
									case 40: 
									case 44: 
									case 45: 
										break;
									case 7: 
										text = "??";
										__label1__ = "IL_304";
										continue __step1__;
									case 12: 
										text = "/";
										__label1__ = "IL_304";
										continue __step1__;
									case 13: 
										text = "==";
										__label1__ = "IL_304";
										continue __step1__;
									case 14: 
										text = "^";
										__label1__ = "IL_304";
										continue __step1__;
									case 15: 
										text = ">";
										__label1__ = "IL_304";
										continue __step1__;
									case 16: 
										text = ">=";
										__label1__ = "IL_304";
										continue __step1__;
									case 19: 
										text = "<<";
										__label1__ = "IL_304";
										continue __step1__;
									case 20: 
										text = "<";
										__label1__ = "IL_304";
										continue __step1__;
									case 21: 
										text = "<=";
										__label1__ = "IL_304";
										continue __step1__;
									case 25: 
										text = "%";
										__label1__ = "IL_304";
										continue __step1__;
									case 26: 
										text = "*";
										__label1__ = "IL_304";
										continue __step1__;
									case 27: 
										text = "*";
										flag3 = true;
										__label1__ = "IL_304";
										continue __step1__;
									case 35: 
										text = "!=";
										__label1__ = "IL_304";
										continue __step1__;
									case 36: 
										text = "|";
										__label1__ = "IL_304";
										continue __step1__;
									case 37: 
										text = "||";
										before = ($asm08.System.Linq.Expressions.DebugViewWriter.Flow.Break | $asm08.System.Linq.Expressions.DebugViewWriter.Flow.Space);
										__label1__ = "IL_304";
										continue __step1__;
									case 39: 
										text = "**";
										__label1__ = "IL_304";
										continue __step1__;
									case 41: 
										text = ">>";
										__label1__ = "IL_304";
										continue __step1__;
									case 42: 
										text = "-";
										__label1__ = "IL_304";
										continue __step1__;
									case 43: 
										text = "-";
										flag3 = true;
										__label1__ = "IL_304";
										continue __step1__;
									case 46: 
										text = "=";
										__label1__ = "IL_304";
										continue __step1__;
									default: 
										switch (Number(nodeType)) {
											case 63: 
												text = "+=";
												__label1__ = "IL_304";
												continue __step1__;
											case 64: 
												text = "&=";
												__label1__ = "IL_304";
												continue __step1__;
											case 65: 
												text = "/=";
												__label1__ = "IL_304";
												continue __step1__;
											case 66: 
												text = "^=";
												__label1__ = "IL_304";
												continue __step1__;
											case 67: 
												text = "<<=";
												__label1__ = "IL_304";
												continue __step1__;
											case 68: 
												text = "%=";
												__label1__ = "IL_304";
												continue __step1__;
											case 69: 
												text = "*=";
												__label1__ = "IL_304";
												continue __step1__;
											case 70: 
												text = "|=";
												__label1__ = "IL_304";
												continue __step1__;
											case 71: 
												text = "**=";
												__label1__ = "IL_304";
												continue __step1__;
											case 72: 
												text = ">>=";
												__label1__ = "IL_304";
												continue __step1__;
											case 73: 
												text = "-=";
												__label1__ = "IL_304";
												continue __step1__;
											case 74: 
												text = "+=";
												flag3 = true;
												__label1__ = "IL_304";
												continue __step1__;
											case 75: 
												text = "*=";
												flag3 = true;
												__label1__ = "IL_304";
												continue __step1__;
											case 76: 
												text = "-=";
												flag3 = true;
												__label1__ = "IL_304";
												continue __step1__;
										}
										break;
								}
								throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
								__label1__ = "IL_304";
								continue __step1__;
								break;
							case "IL_304":
								if (flag) {
									this.Out$2("(", $asm08.System.Linq.Expressions.DebugViewWriter.Flow.None);
								}
								this.Visit$0(node.Left);
								if (flag) {
									this.Out$3($asm08.System.Linq.Expressions.DebugViewWriter.Flow.None, ")", $asm08.System.Linq.Expressions.DebugViewWriter.Flow.Break);
								}
								if (flag3) {
									text = System.String.Format(System.Globalization.CultureInfo.CurrentCulture, "#{0}", [text]);
								}
								this.Out$3(before, text, ($asm08.System.Linq.Expressions.DebugViewWriter.Flow.Break | $asm08.System.Linq.Expressions.DebugViewWriter.Flow.Space));
								if (flag2) {
									this.Out$2("(", $asm08.System.Linq.Expressions.DebugViewWriter.Flow.None);
								}
								this.Visit$0(node.Right);
								if (flag2) {
									this.Out$3($asm08.System.Linq.Expressions.DebugViewWriter.Flow.None, ")", $asm08.System.Linq.Expressions.DebugViewWriter.Flow.Break);
								}
								break __step1__;
						}
					}
				}
				return node;
				break __step0__;
		}
	}
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.VisitParameter = function (node) {
	this.Out$0("$");
	if (System.String.IsNullOrEmpty(node.Name)) {
		var paramId = this.GetParamId(node);
		this.Out$0(JSIL.ConcatString("var", paramId));
	} else {
		this.Out$0($asm08.System.Linq.Expressions.DebugViewWriter.GetDisplayName(node.Name));
	}
	return node;
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.VisitLambda$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, node) {
		this.Out$0(System.String.Format(System.Globalization.CultureInfo.CurrentCulture, "{0} {1}<{2}>", [".Lambda", this.GetLambdaName(node), node.Type.toString()]));
		if (this._lambdas === null) {
			this._lambdas = JSIL.New(System.Collections.Generic.Queue$b1.Of(System.Linq.Expressions.LambdaExpression), "_ctor$0", []);
		}
		if (!this._lambdas.Contains(node)) {
			this._lambdas.Enqueue(node);
		}
		return node;
	}
);
$asm08.System.Linq.Expressions.DebugViewWriter.IsSimpleExpression = function (node) {
	var binaryExpression = JSIL.TryCast(node, System.Linq.Expressions.BinaryExpression);
	return ((binaryExpression !== null) && 
		(JSIL.TryCast(binaryExpression.Left, System.Linq.Expressions.BinaryExpression) === null) && !JSIL.CheckType(binaryExpression.Right, System.Linq.Expressions.BinaryExpression));
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.VisitConditional = function (node) {
	if ($asm08.System.Linq.Expressions.DebugViewWriter.IsSimpleExpression(node.Test)) {
		this.Out$0(".If (");
		this.Visit$0(node.Test);
		this.Out$2(") {", $asm08.System.Linq.Expressions.DebugViewWriter.Flow.NewLine);
	} else {
		this.Out$2(".If (", $asm08.System.Linq.Expressions.DebugViewWriter.Flow.NewLine);
		this.Indent();
		this.Visit$0(node.Test);
		this.Dedent();
		this.Out$3($asm08.System.Linq.Expressions.DebugViewWriter.Flow.NewLine, ") {", $asm08.System.Linq.Expressions.DebugViewWriter.Flow.NewLine);
	}
	this.Indent();
	this.Visit$0(node.IfTrue);
	this.Dedent();
	this.Out$3($asm08.System.Linq.Expressions.DebugViewWriter.Flow.NewLine, "} .Else {", $asm08.System.Linq.Expressions.DebugViewWriter.Flow.NewLine);
	this.Indent();
	this.Visit$0(node.IfFalse);
	this.Dedent();
	this.Out$1($asm08.System.Linq.Expressions.DebugViewWriter.Flow.NewLine, "}");
	return node;
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.VisitConstant = function (node) {
	var value = node.Value;
	if (value === null) {
		this.Out$0("null");
	} else if (!((JSIL.TryCast(value, System.String) === null) || (node.Type !== System.String))) {
		this.Out$0(System.String.Format(System.Globalization.CultureInfo.CurrentCulture, '"{0}"', [value]));
	} else if (!((JSIL.TryCast(value, System.Char) === 0) || (node.Type !== System.Char))) {
		this.Out$0(System.String.Format(System.Globalization.CultureInfo.CurrentCulture, "'{0}'", [value]));
	} else if (!(!((JSIL.TryCast(value, System.Int32) !== 0) && 
				(node.Type === System.Int32)) && (!JSIL.TryCast(value, System.Boolean) || 
				(node.Type !== System.Boolean)))) {
		this.Out$0(value.toString());
	} else {
		var constantValueSuffix = $asm08.System.Linq.Expressions.DebugViewWriter.GetConstantValueSuffix(node.Type);
		if (constantValueSuffix !== null) {
			this.Out$0(value.toString());
			this.Out$0(constantValueSuffix);
		} else {
			this.Out$0(System.String.Format(System.Globalization.CultureInfo.CurrentCulture, ".Constant<{0}>({1})", [node.Type.toString(), value]));
		}
	}
	return node;
};
$asm08.System.Linq.Expressions.DebugViewWriter.GetConstantValueSuffix = function (type) {
	if (type === System.UInt32) {
		return "U";
	}
	if (type === System.Int64) {
		return "L";
	}
	if (type === System.UInt64) {
		return "UL";
	}
	if (type === System.Double) {
		return "D";
	}
	if (type === System.Single) {
		return "F";
	}
	if (type === System.Decimal) {
		return "M";
	}
	return null;
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.VisitRuntimeVariables = function (node) {
	this.Out$0(".RuntimeVariables");
	this.VisitExpressions$b1$0(System.Linq.Expressions.ParameterExpression)("(", JSIL.Cast(node.Variables, System.Collections.Generic.IList$b1.Of(System.Linq.Expressions.ParameterExpression)));
	return node;
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.OutMember = function (node, instance, member) {
	if (instance !== null) {
		this.ParenthesizedVisit(node, instance);
		this.Out$0(("." + member.Name));
		return;
	}
	this.Out$0((member.DeclaringType.toString() + "." + member.Name));
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.VisitMember = function (node) {
	this.OutMember(node, node.Expression, node.Member);
	return node;
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.VisitInvocation = function (node) {
	this.Out$0(".Invoke ");
	this.ParenthesizedVisit(node, node.Expression);
	this.VisitExpressions$b1$0(System.Linq.Expressions.Expression)("(", node.Arguments);
	return node;
};
$asm08.System.Linq.Expressions.DebugViewWriter.NeedsParentheses = function (parent, child) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				if (child === null) {
					return false;
				}
				var nodeType = parent.NodeType;
				if (nodeType <= System.Linq.Expressions.ExpressionType.Increment) {
					if (!((nodeType === System.Linq.Expressions.ExpressionType.Decrement) || (nodeType === System.Linq.Expressions.ExpressionType.Increment))) {
						__label0__ = "IL_37";
						continue __step0__;
					}
				} else if (nodeType !== System.Linq.Expressions.ExpressionType.Unbox) {
					switch (Number(nodeType)) {
						case 83: 
						case 84: 
							break;
						default: 
							__label0__ = "IL_37";
							continue __step0__;
					}
				}
				return true;
				__label0__ = "IL_37";
				continue __step0__;
				break;
			case "IL_37":
				var operatorPrecedence = $asm08.System.Linq.Expressions.DebugViewWriter.GetOperatorPrecedence(child);
				var operatorPrecedence2 = $asm08.System.Linq.Expressions.DebugViewWriter.GetOperatorPrecedence(parent);
				if (operatorPrecedence === operatorPrecedence2) {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								var nodeType2 = parent.NodeType;
								if (nodeType2 <= System.Linq.Expressions.ExpressionType.ExclusiveOr) {
									switch (Number(nodeType2)) {
										case 0: 
										case 1: 
											return false;
										case 2: 
										case 3: 
											break;
										default: 
											switch (Number(nodeType2)) {
												case 12: 
													__label1__ = "IL_C9";
													continue __step1__;
												case 13: 
													return true;
												case 14: 
													break;
												default: 
													return true;
											}
											break;
									}
								} else {
									switch (Number(nodeType2)) {
										case 25: 
											__label1__ = "IL_C9";
											continue __step1__;
										case 26: 
										case 27: 
											return false;
										default: 
											switch (Number(nodeType2)) {
												case 36: 
												case 37: 
													break;
												default: 
													switch (Number(nodeType2)) {
														case 42: 
														case 43: 
															__label1__ = "IL_C9";
															continue __step1__;
														default: 
															return true;
													}
													break;
											}
											break;
									}
								}
								return false;
								__label1__ = "IL_C9";
								continue __step1__;
								break;
							case "IL_C9":
								var binaryExpression = JSIL.TryCast(parent, System.Linq.Expressions.BinaryExpression);
								return (child === binaryExpression.Right);
								break __step1__;
						}
					}
				}
				return (!((child === null) || 
						(child.NodeType !== System.Linq.Expressions.ExpressionType.Constant) || 
						((parent.NodeType !== System.Linq.Expressions.ExpressionType.Negate) && 
							(parent.NodeType !== System.Linq.Expressions.ExpressionType.NegateChecked))) || (operatorPrecedence < operatorPrecedence2));
				break __step0__;
		}
	}
};
$asm08.System.Linq.Expressions.DebugViewWriter.GetOperatorPrecedence = function (node) {
	switch (Number(node.NodeType)) {
		case 0: 
		case 1: 
		case 42: 
		case 43: 
			return 10;
		case 2: 
			return 6;
		case 3: 
			return 3;
		case 7: 
		case 46: 
		case 63: 
		case 64: 
		case 65: 
		case 66: 
		case 67: 
		case 68: 
		case 69: 
		case 70: 
		case 71: 
		case 72: 
		case 73: 
		case 74: 
		case 75: 
		case 76: 
			return 1;
		case 9: 
		case 38: 
			return 15;
		case 10: 
		case 11: 
		case 28: 
		case 29: 
		case 30: 
		case 34: 
		case 49: 
		case 54: 
		case 60: 
		case 62: 
		case 77: 
		case 78: 
		case 82: 
		case 83: 
		case 84: 
			return 12;
		case 12: 
		case 25: 
		case 26: 
		case 27: 
			return 11;
		case 13: 
		case 35: 
			return 7;
		case 14: 
			return 5;
		case 15: 
		case 16: 
		case 20: 
		case 21: 
		case 44: 
		case 45: 
		case 81: 
			return 8;
		case 19: 
		case 41: 
			return 9;
		case 36: 
			return 4;
		case 37: 
			return 2;
		case 39: 
			return 13;
	}
	return 14;
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.ParenthesizedVisit = function (parent, nodeToVisit) {
	if ($asm08.System.Linq.Expressions.DebugViewWriter.NeedsParentheses(parent, nodeToVisit)) {
		this.Out$0("(");
		this.Visit$0(nodeToVisit);
		this.Out$0(")");
		return;
	}
	this.Visit$0(nodeToVisit);
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.VisitMethodCall = function (node) {
	this.Out$0(".Call ");
	if (node.Object !== null) {
		this.ParenthesizedVisit(node, node.Object);
	} else if (node.Method.DeclaringType !== null) {
		this.Out$0(node.Method.DeclaringType.toString());
	} else {
		this.Out$0("<UnknownType>");
	}
	this.Out$0(".");
	this.Out$0(node.Method.Name);
	this.VisitExpressions$b1$0(System.Linq.Expressions.Expression)("(", node.Arguments);
	return node;
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.VisitNewArray = function (node) {
	if (node.NodeType === System.Linq.Expressions.ExpressionType.NewArrayBounds) {
		this.Out$0((".NewArray " + node.Type.GetElementType().toString()));
		this.VisitExpressions$b1$0(System.Linq.Expressions.Expression)("[", node.Expressions);
	} else {
		this.Out$2((".NewArray " + node.Type.toString()), $asm08.System.Linq.Expressions.DebugViewWriter.Flow.Space);
		this.VisitExpressions$b1$0(System.Linq.Expressions.Expression)("{", node.Expressions);
	}
	return node;
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.VisitNew = function (node) {
	this.Out$0((".New " + node.Type.toString()));
	this.VisitExpressions$b1$0(System.Linq.Expressions.Expression)("(", node.Arguments);
	return node;
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.VisitElementInit = function (node) {
	if (node.Arguments.Count === 1) {
		this.Visit$0(node.Arguments.get_Item(0));
	} else {
		this.VisitExpressions$b1$0(System.Linq.Expressions.Expression)("{", node.Arguments);
	}
	return node;
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.VisitListInit = function (node) {
	this.Visit$0(node.NewExpression);
	this.VisitExpressions$b1$2(System.Linq.Expressions.ElementInit)("{", ",", JSIL.Cast(node.Initializers, System.Collections.Generic.IList$b1.Of(System.Linq.Expressions.ElementInit)), function (e) {
			this.VisitElementInit(e);
		});
	return node;
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.VisitMemberAssignment = function (assignment) {
	this.Out$0(assignment.Member.Name);
	this.Out$3($asm08.System.Linq.Expressions.DebugViewWriter.Flow.Space, "=", $asm08.System.Linq.Expressions.DebugViewWriter.Flow.Space);
	this.Visit$0(assignment.Expression);
	return assignment;
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.VisitMemberListBinding = function (binding) {
	this.Out$0(binding.Member.Name);
	this.Out$3($asm08.System.Linq.Expressions.DebugViewWriter.Flow.Space, "=", $asm08.System.Linq.Expressions.DebugViewWriter.Flow.Space);
	this.VisitExpressions$b1$2(System.Linq.Expressions.ElementInit)("{", ",", JSIL.Cast(binding.Initializers, System.Collections.Generic.IList$b1.Of(System.Linq.Expressions.ElementInit)), function (e) {
			this.VisitElementInit(e);
		});
	return binding;
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.VisitMemberMemberBinding = function (binding) {
	this.Out$0(binding.Member.Name);
	this.Out$3($asm08.System.Linq.Expressions.DebugViewWriter.Flow.Space, "=", $asm08.System.Linq.Expressions.DebugViewWriter.Flow.Space);
	this.VisitExpressions$b1$2(System.Linq.Expressions.MemberBinding)("{", ",", JSIL.Cast(binding.Bindings, System.Collections.Generic.IList$b1.Of(System.Linq.Expressions.MemberBinding)), function (e) {
			this.VisitMemberBinding(e);
		});
	return binding;
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.VisitMemberInit = function (node) {
	this.Visit$0(node.NewExpression);
	this.VisitExpressions$b1$2(System.Linq.Expressions.MemberBinding)("{", ",", JSIL.Cast(node.Bindings, System.Collections.Generic.IList$b1.Of(System.Linq.Expressions.MemberBinding)), function (e) {
			this.VisitMemberBinding(e);
		});
	return node;
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.VisitTypeBinary = function (node) {
	this.ParenthesizedVisit(node, node.Expression);
	var nodeType = node.NodeType;
	if (nodeType !== System.Linq.Expressions.ExpressionType.TypeIs) {
		if (nodeType === System.Linq.Expressions.ExpressionType.TypeEqual) {
			this.Out$3($asm08.System.Linq.Expressions.DebugViewWriter.Flow.Space, ".TypeEqual", $asm08.System.Linq.Expressions.DebugViewWriter.Flow.Space);
		}
	} else {
		this.Out$3($asm08.System.Linq.Expressions.DebugViewWriter.Flow.Space, ".Is", $asm08.System.Linq.Expressions.DebugViewWriter.Flow.Space);
	}
	this.Out$0(node.TypeOperand.toString());
	return node;
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.VisitUnary = function (node) {
	$asm08.System.Linq.Expressions.DebugViewWriter.NeedsParentheses(node, node.Operand);
	var nodeType = node.NodeType;
	if (nodeType <= System.Linq.Expressions.ExpressionType.Quote) {
		if (nodeType <= System.Linq.Expressions.ExpressionType.ConvertChecked) {
			if (nodeType !== System.Linq.Expressions.ExpressionType.ArrayLength) {
				switch (Number(nodeType)) {
					case 10: 
						this.Out$0(("(" + node.Type.toString() + ")"));
						break;
					case 11: 
						this.Out$0(("#(" + node.Type.toString() + ")"));
						break;
				}
			}
		} else {
			switch (Number(nodeType)) {
				case 28: 
					this.Out$0("-");
					break;
				case 29: 
					this.Out$0("+");
					break;
				case 30: 
					this.Out$0("#-");
					break;
				case 31: 
				case 32: 
				case 33: 
					break;
				case 34: 
					this.Out$0((node.Type === System.Boolean) ? "!" : "~");
					break;
				default: 
					if (nodeType === System.Linq.Expressions.ExpressionType.Quote) {
						this.Out$0("'");
					}
					break;
			}
		}
	} else if (nodeType <= System.Linq.Expressions.ExpressionType.Decrement) {
		if (nodeType !== System.Linq.Expressions.ExpressionType.TypeAs) {
			if (nodeType === System.Linq.Expressions.ExpressionType.Decrement) {
				this.Out$0(".Decrement");
			}
		}
	} else if (nodeType !== System.Linq.Expressions.ExpressionType.Increment) {
		switch (Number(nodeType)) {
			case 60: 
				if (node.Operand === null) {
					this.Out$0(".Rethrow");
				} else {
					this.Out$2(".Throw", $asm08.System.Linq.Expressions.DebugViewWriter.Flow.Space);
				}
				break;
			case 61: 
				break;
			case 62: 
				this.Out$0(".Unbox");
				break;
			default: 
				switch (Number(nodeType)) {
					case 77: 
						this.Out$0("++");
						break;
					case 78: 
						this.Out$0("--");
						break;
					case 82: 
						this.Out$0("~");
						break;
					case 83: 
						this.Out$0(".IsTrue");
						break;
					case 84: 
						this.Out$0(".IsFalse");
						break;
				}
				break;
		}
	} else {
		this.Out$0(".Increment");
	}
	this.ParenthesizedVisit(node, node.Operand);
	var nodeType2 = node.NodeType;
	if (nodeType2 !== System.Linq.Expressions.ExpressionType.ArrayLength) {
		if (nodeType2 !== System.Linq.Expressions.ExpressionType.TypeAs) {
			switch (Number(nodeType2)) {
				case 79: 
					this.Out$0("++");
					break;
				case 80: 
					this.Out$0("--");
					break;
			}
		} else {
			this.Out$3($asm08.System.Linq.Expressions.DebugViewWriter.Flow.Space, ".As", ($asm08.System.Linq.Expressions.DebugViewWriter.Flow.Break | $asm08.System.Linq.Expressions.DebugViewWriter.Flow.Space));
			this.Out$0(node.Type.toString());
		}
	} else {
		this.Out$0(".Length");
	}
	return node;
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.VisitBlock = function (node) {
	this.Out$0(".Block");
	if (node.Type !== node.GetExpression((node.ExpressionCount - 1)).Type) {
		this.Out$0(System.String.Format(System.Globalization.CultureInfo.CurrentCulture, "<{0}>", [node.Type.toString()]));
	}
	this.VisitDeclarations(JSIL.Cast(node.Variables, System.Collections.Generic.IList$b1.Of(System.Linq.Expressions.ParameterExpression)));
	this.Out$0(" ");
	this.VisitExpressions$b1$1(System.Linq.Expressions.Expression)("{", ";", node.Expressions);
	return node;
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.VisitDefault = function (node) {
	this.Out$0((".Default(" + node.Type.toString() + ")"));
	return node;
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.VisitLabel = function (node) {
	this.Out$2(".Label", $asm08.System.Linq.Expressions.DebugViewWriter.Flow.NewLine);
	this.Indent();
	this.Visit$0(node.DefaultValue);
	this.Dedent();
	this.NewLine();
	this.DumpLabel(node.Target);
	return node;
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.VisitGoto = function (node) {
	this.Out$2(("." + node.Kind.toString()), $asm08.System.Linq.Expressions.DebugViewWriter.Flow.Space);
	this.Out$2(this.GetLabelTargetName(node.Target), $asm08.System.Linq.Expressions.DebugViewWriter.Flow.Space);
	this.Out$2("{", $asm08.System.Linq.Expressions.DebugViewWriter.Flow.Space);
	this.Visit$0(node.Value);
	this.Out$1($asm08.System.Linq.Expressions.DebugViewWriter.Flow.Space, "}");
	return node;
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.VisitLoop = function (node) {
	this.Out$2(".Loop", $asm08.System.Linq.Expressions.DebugViewWriter.Flow.Space);
	if (node.ContinueLabel !== null) {
		this.DumpLabel(node.ContinueLabel);
	}
	this.Out$2(" {", $asm08.System.Linq.Expressions.DebugViewWriter.Flow.NewLine);
	this.Indent();
	this.Visit$0(node.Body);
	this.Dedent();
	this.Out$1($asm08.System.Linq.Expressions.DebugViewWriter.Flow.NewLine, "}");
	if (node.BreakLabel !== null) {
		this.Out$2("", $asm08.System.Linq.Expressions.DebugViewWriter.Flow.NewLine);
		this.DumpLabel(node.BreakLabel);
	}
	return node;
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.VisitSwitchCase = function (node) {
	var enumerator = node.TestValues.GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current;
			this.Out$0(".Case (");
			this.Visit$0(current);
			this.Out$2("):", $asm08.System.Linq.Expressions.DebugViewWriter.Flow.NewLine);
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	this.Indent();
	this.Indent();
	this.Visit$0(node.Body);
	this.Dedent();
	this.Dedent();
	this.NewLine();
	return node;
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.VisitSwitch = function (node) {
	this.Out$0(".Switch ");
	this.Out$0("(");
	this.Visit$0(node.SwitchValue);
	this.Out$2(") {", $asm08.System.Linq.Expressions.DebugViewWriter.Flow.NewLine);
	System.Linq.Expressions.ExpressionVisitor.Visit$b1(System.Linq.Expressions.SwitchCase)(node.Cases, JSIL.Delegate.New("System.Func`2[System.Linq.Expressions.SwitchCase, System.Linq.Expressions.SwitchCase]", this, JSIL.UntranslatableInstruction("ldvirtftn:IntPtr(ExpressionVisitor::VisitSwitchCase)")));
	if (node.DefaultBody !== null) {
		this.Out$2(".Default:", $asm08.System.Linq.Expressions.DebugViewWriter.Flow.NewLine);
		this.Indent();
		this.Indent();
		this.Visit$0(node.DefaultBody);
		this.Dedent();
		this.Dedent();
		this.NewLine();
	}
	this.Out$0("}");
	return node;
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.VisitCatchBlock = function (node) {
	this.Out$1($asm08.System.Linq.Expressions.DebugViewWriter.Flow.NewLine, ("} .Catch (" + node.Test.toString()));
	if (node.Variable !== null) {
		this.Out$1($asm08.System.Linq.Expressions.DebugViewWriter.Flow.Space, "");
		this.VisitParameter(node.Variable);
	}
	if (node.Filter !== null) {
		this.Out$2(") .If (", $asm08.System.Linq.Expressions.DebugViewWriter.Flow.Break);
		this.Visit$0(node.Filter);
	}
	this.Out$2(") {", $asm08.System.Linq.Expressions.DebugViewWriter.Flow.NewLine);
	this.Indent();
	this.Visit$0(node.Body);
	this.Dedent();
	return node;
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.VisitTry = function (node) {
	this.Out$2(".Try {", $asm08.System.Linq.Expressions.DebugViewWriter.Flow.NewLine);
	this.Indent();
	this.Visit$0(node.Body);
	this.Dedent();
	System.Linq.Expressions.ExpressionVisitor.Visit$b1(System.Linq.Expressions.CatchBlock)(node.Handlers, JSIL.Delegate.New("System.Func`2[System.Linq.Expressions.CatchBlock, System.Linq.Expressions.CatchBlock]", this, JSIL.UntranslatableInstruction("ldvirtftn:IntPtr(ExpressionVisitor::VisitCatchBlock)")));
	if (node.Finally !== null) {
		this.Out$3($asm08.System.Linq.Expressions.DebugViewWriter.Flow.NewLine, "} .Finally {", $asm08.System.Linq.Expressions.DebugViewWriter.Flow.NewLine);
		this.Indent();
		this.Visit$0(node.Finally);
		this.Dedent();
	} else if (node.Fault !== null) {
		this.Out$3($asm08.System.Linq.Expressions.DebugViewWriter.Flow.NewLine, "} .Fault {", $asm08.System.Linq.Expressions.DebugViewWriter.Flow.NewLine);
		this.Indent();
		this.Visit$0(node.Fault);
		this.Dedent();
	}
	this.Out$1($asm08.System.Linq.Expressions.DebugViewWriter.Flow.NewLine, "}");
	return node;
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.VisitIndex = function (node) {
	if (node.Indexer !== null) {
		this.OutMember(node, node.Object, node.Indexer);
	} else {
		this.ParenthesizedVisit(node, node.Object);
	}
	this.VisitExpressions$b1$0(System.Linq.Expressions.Expression)("[", node.Arguments);
	return node;
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.VisitExtension = function (node) {
	this.Out$0(System.String.Format(System.Globalization.CultureInfo.CurrentCulture, ".Extension<{0}>", [JSIL.GetType(node).toString()]));
	if (node.CanReduce) {
		this.Out$3($asm08.System.Linq.Expressions.DebugViewWriter.Flow.Space, "{", $asm08.System.Linq.Expressions.DebugViewWriter.Flow.NewLine);
		this.Indent();
		this.Visit$0(node.Reduce());
		this.Dedent();
		this.Out$1($asm08.System.Linq.Expressions.DebugViewWriter.Flow.NewLine, "}");
	}
	return node;
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.VisitDebugInfo = function (node) {
	this.Out$0(System.String.Format(System.Globalization.CultureInfo.CurrentCulture, ".DebugInfo({0}: {1}, {2} - {3}, {4})", [node.Document.FileName, node.StartLine, node.StartColumn, node.EndLine, node.EndColumn]));
	return node;
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.DumpLabel = function (target) {
	this.Out$0(System.String.Format(System.Globalization.CultureInfo.CurrentCulture, ".LabelTarget {0}:", [this.GetLabelTargetName(target)]));
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.GetLabelTargetName = function (target) {
	if (System.String.IsNullOrEmpty(target.Name)) {
		return System.String.Format(System.Globalization.CultureInfo.CurrentCulture, "#Label{0}", [this.GetLabelTargetId(target)]);
	}
	return $asm08.System.Linq.Expressions.DebugViewWriter.GetDisplayName(target.Name);
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.WriteLambda = function (lambda) {
	this.Out$0(System.String.Format(System.Globalization.CultureInfo.CurrentCulture, ".Lambda {0}<{1}>", [this.GetLambdaName(lambda), lambda.Type.toString()]));
	this.VisitDeclarations(JSIL.Cast(lambda.Parameters, System.Collections.Generic.IList$b1.Of(System.Linq.Expressions.ParameterExpression)));
	this.Out$3($asm08.System.Linq.Expressions.DebugViewWriter.Flow.Space, "{", $asm08.System.Linq.Expressions.DebugViewWriter.Flow.NewLine);
	this.Indent();
	this.Visit$0(lambda.Body);
	this.Dedent();
	this.Out$1($asm08.System.Linq.Expressions.DebugViewWriter.Flow.NewLine, "}");
};
$asm08.System.Linq.Expressions.DebugViewWriter.prototype.GetLambdaName = function (lambda) {
	if (System.String.IsNullOrEmpty(lambda.Name)) {
		return JSIL.ConcatString("#Lambda", this.GetLambdaId(lambda));
	}
	return $asm08.System.Linq.Expressions.DebugViewWriter.GetDisplayName(lambda.Name);
};
$asm08.System.Linq.Expressions.DebugViewWriter.ContainsWhiteSpace = function (name) {
__loop0__: 
	for (var i = 0; i < name.length; ++i) {
		var c = (name[i]);
		if (System.Char.IsWhiteSpace$0(c)) {
			return true;
		}
	}
	return false;
};
$asm08.System.Linq.Expressions.DebugViewWriter.QuoteName = function (name) {
	return System.String.Format(System.Globalization.CultureInfo.CurrentCulture, "'{0}'", [name]);
};
$asm08.System.Linq.Expressions.DebugViewWriter.GetDisplayName = function (name) {
	if ($asm08.System.Linq.Expressions.DebugViewWriter.ContainsWhiteSpace(name)) {
		return $asm08.System.Linq.Expressions.DebugViewWriter.QuoteName(name);
	}
	return name;
};
JSIL.OverloadedMethod($asm08.System.Linq.Expressions.DebugViewWriter.prototype, "Out", [
		["Out$0", [System.String]], 
		["Out$1", [$asm08.System.Linq.Expressions.DebugViewWriter.Flow, System.String]], 
		["Out$2", [System.String, $asm08.System.Linq.Expressions.DebugViewWriter.Flow]], 
		["Out$3", [$asm08.System.Linq.Expressions.DebugViewWriter.Flow, System.String, $asm08.System.Linq.Expressions.DebugViewWriter.Flow]]
	]);
JSIL.OverloadedGenericMethod($asm08.System.Linq.Expressions.DebugViewWriter.prototype, "VisitExpressions$b1", [
		["VisitExpressions$b1$0", [System.Char, System.Collections.Generic.IList$b1.Of(JSIL.AnyType)]], 
		["VisitExpressions$b1$1", [System.Char, System.Char, System.Collections.Generic.IList$b1.Of(JSIL.AnyType)]], 
		["VisitExpressions$b1$2", [System.Char, System.Char, System.Collections.Generic.IList$b1.Of(JSIL.AnyType), System.Action$b1.Of(JSIL.AnyType)]]
	]);
JSIL.MakeProperty($asm08.System.Linq.Expressions.DebugViewWriter.prototype, "Base", 
	$asm08.System.Linq.Expressions.DebugViewWriter.prototype.get_Base, null);
JSIL.MakeProperty($asm08.System.Linq.Expressions.DebugViewWriter.prototype, "Delta", 
	$asm08.System.Linq.Expressions.DebugViewWriter.prototype.get_Delta, null);
JSIL.MakeProperty($asm08.System.Linq.Expressions.DebugViewWriter.prototype, "Depth", 
	$asm08.System.Linq.Expressions.DebugViewWriter.prototype.get_Depth, null);
Object.defineProperty($asm08.System.Linq.Expressions.DebugViewWriter, "Tab", {
		"value": 4}
);
Object.defineProperty($asm08.System.Linq.Expressions.DebugViewWriter, "MaxColumn", {
		"value": 120}
);
$asm08.System.Linq.Expressions.DebugViewWriter.prototype._out = null;
$asm08.System.Linq.Expressions.DebugViewWriter.prototype._column = 0;
$asm08.System.Linq.Expressions.DebugViewWriter.prototype._stack = null;
$asm08.System.Linq.Expressions.DebugViewWriter.prototype._delta = 0;
$asm08.System.Linq.Expressions.DebugViewWriter.prototype._flow = 0;
$asm08.System.Linq.Expressions.DebugViewWriter.prototype._lambdas = null;
$asm08.System.Linq.Expressions.DebugViewWriter.prototype._lambdaIds = null;
$asm08.System.Linq.Expressions.DebugViewWriter.prototype._paramIds = null;
$asm08.System.Linq.Expressions.DebugViewWriter.prototype._labelIds = null;

System.Linq.Expressions.DefaultExpression.prototype._ctor = function (type) {
	System.Linq.Expressions.Expression.prototype._ctor$1.call(this);
	this._type = type;
};
System.Linq.Expressions.DefaultExpression.prototype.get_Type = function () {
	return this._type;
};
System.Linq.Expressions.DefaultExpression.prototype.get_NodeType = function () {
	return System.Linq.Expressions.ExpressionType.Default;
};
System.Linq.Expressions.DefaultExpression.prototype.Accept = function (visitor) {
	return visitor.VisitDefault(this);
};
JSIL.MakeProperty(System.Linq.Expressions.DefaultExpression.prototype, "Type", 
	System.Linq.Expressions.DefaultExpression.prototype.get_Type, null);
JSIL.MakeProperty(System.Linq.Expressions.DefaultExpression.prototype, "NodeType", 
	System.Linq.Expressions.DefaultExpression.prototype.get_NodeType, null);
System.Linq.Expressions.DefaultExpression.prototype._type = null;

System.Linq.Expressions.DynamicExpression.prototype._ctor = function (delegateType, binder) {
	System.Linq.Expressions.Expression.prototype._ctor$1.call(this);
	this._delegateType = delegateType;
	this._binder = binder;
};
System.Linq.Expressions.DynamicExpression.Make$0 = function (returnType, delegateType, binder, arguments) {
	if (returnType === System.Object) {
		return new $asm08.System.Linq.Expressions.DynamicExpressionN(delegateType, binder, arguments);
	}
	return new $asm08.System.Linq.Expressions.TypedDynamicExpressionN(returnType, delegateType, binder, arguments);
};
System.Linq.Expressions.DynamicExpression.Make$1 = function (returnType, delegateType, binder, arg0) {
	if (returnType === System.Object) {
		return new $asm08.System.Linq.Expressions.DynamicExpression1(delegateType, binder, arg0);
	}
	return new $asm08.System.Linq.Expressions.TypedDynamicExpression1(returnType, delegateType, binder, arg0);
};
System.Linq.Expressions.DynamicExpression.Make$2 = function (returnType, delegateType, binder, arg0, arg1) {
	if (returnType === System.Object) {
		return new $asm08.System.Linq.Expressions.DynamicExpression2(delegateType, binder, arg0, arg1);
	}
	return new $asm08.System.Linq.Expressions.TypedDynamicExpression2(returnType, delegateType, binder, arg0, arg1);
};
System.Linq.Expressions.DynamicExpression.Make$3 = function (returnType, delegateType, binder, arg0, arg1, arg2) {
	if (returnType === System.Object) {
		return new $asm08.System.Linq.Expressions.DynamicExpression3(delegateType, binder, arg0, arg1, arg2);
	}
	return new $asm08.System.Linq.Expressions.TypedDynamicExpression3(returnType, delegateType, binder, arg0, arg1, arg2);
};
System.Linq.Expressions.DynamicExpression.Make$4 = function (returnType, delegateType, binder, arg0, arg1, arg2, arg3) {
	if (returnType === System.Object) {
		return new $asm08.System.Linq.Expressions.DynamicExpression4(delegateType, binder, arg0, arg1, arg2, arg3);
	}
	return new $asm08.System.Linq.Expressions.TypedDynamicExpression4(returnType, delegateType, binder, arg0, arg1, arg2, arg3);
};
System.Linq.Expressions.DynamicExpression.prototype.get_Type = function () {
	return System.Object;
};
System.Linq.Expressions.DynamicExpression.prototype.get_NodeType = function () {
	return System.Linq.Expressions.ExpressionType.Dynamic;
};
System.Linq.Expressions.DynamicExpression.prototype.get_Binder = function () {
	return this._binder;
};
System.Linq.Expressions.DynamicExpression.prototype.get_DelegateType = function () {
	return this._delegateType;
};
System.Linq.Expressions.DynamicExpression.prototype.get_Arguments = function () {
	return this.GetOrMakeArguments();
};
System.Linq.Expressions.DynamicExpression.prototype.GetOrMakeArguments = function () {
	throw $asm08.System.Dynamic.Utils.ContractUtils.Unreachable;
};
System.Linq.Expressions.DynamicExpression.prototype.Accept = function (visitor) {
	return visitor.VisitDynamic(this);
};
System.Linq.Expressions.DynamicExpression.prototype.Rewrite = function (args) {
	throw $asm08.System.Dynamic.Utils.ContractUtils.Unreachable;
};
System.Linq.Expressions.DynamicExpression.prototype.Update = function (arguments) {
	if (arguments === this.Arguments) {
		return this;
	}
	return System.Linq.Expressions.Expression.MakeDynamic$1(this.DelegateType, this.Binder, arguments);
};
System.Linq.Expressions.DynamicExpression.prototype.IArgumentProvider_GetArgument = function (index) {
	throw $asm08.System.Dynamic.Utils.ContractUtils.Unreachable;
};
System.Linq.Expressions.DynamicExpression.prototype.IArgumentProvider_get_ArgumentCount = function () {
	throw $asm08.System.Dynamic.Utils.ContractUtils.Unreachable;
};
JSIL.OverloadedMethod(System.Linq.Expressions.DynamicExpression, "Make", [
		["Make$0", [System.Type, System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(System.Linq.Expressions.Expression)]], 
		["Make$1", [System.Type, System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression]], 
		["Make$2", [System.Type, System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["Make$3", [System.Type, System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]], 
		["Make$4", [System.Type, System.Type, System.Runtime.CompilerServices.CallSiteBinder, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression, System.Linq.Expressions.Expression]]
	]);
JSIL.MakeProperty(System.Linq.Expressions.DynamicExpression.prototype, "Type", 
	System.Linq.Expressions.DynamicExpression.prototype.get_Type, null);
JSIL.MakeProperty(System.Linq.Expressions.DynamicExpression.prototype, "NodeType", 
	System.Linq.Expressions.DynamicExpression.prototype.get_NodeType, null);
JSIL.MakeProperty(System.Linq.Expressions.DynamicExpression.prototype, "Binder", 
	System.Linq.Expressions.DynamicExpression.prototype.get_Binder, null);
JSIL.MakeProperty(System.Linq.Expressions.DynamicExpression.prototype, "DelegateType", 
	System.Linq.Expressions.DynamicExpression.prototype.get_DelegateType, null);
JSIL.MakeProperty(System.Linq.Expressions.DynamicExpression.prototype, "Arguments", 
	System.Linq.Expressions.DynamicExpression.prototype.get_Arguments, null);
JSIL.MakeProperty(System.Linq.Expressions.DynamicExpression.prototype, "IArgumentProvider_ArgumentCount", 
	System.Linq.Expressions.DynamicExpression.prototype.IArgumentProvider_get_ArgumentCount, null);
System.Linq.Expressions.DynamicExpression.prototype._binder = null;
System.Linq.Expressions.DynamicExpression.prototype._delegateType = null;

$asm08.System.Linq.Expressions.DynamicExpressionN.prototype._ctor = function (delegateType, binder, arguments) {
	System.Linq.Expressions.DynamicExpression.prototype._ctor.call(this, delegateType, binder);
	this._arguments = arguments;
};
$asm08.System.Linq.Expressions.DynamicExpressionN.prototype.IArgumentProvider_GetArgument = function (index) {
	return this._arguments.IList$b1_get_Item(index);
};
$asm08.System.Linq.Expressions.DynamicExpressionN.prototype.IArgumentProvider_get_ArgumentCount = function () {
	return this._arguments.ICollection$b1_Count;
};
$asm08.System.Linq.Expressions.DynamicExpressionN.prototype.GetOrMakeArguments = function () {
	return System.Linq.Expressions.Expression.ReturnReadOnly$b1(System.Linq.Expressions.Expression)(/* ref */ new JSIL.MemberReference(this, "_arguments"));
};
$asm08.System.Linq.Expressions.DynamicExpressionN.prototype.Rewrite = function (args) {
	return System.Linq.Expressions.Expression.MakeDynamic$0(System.Linq.Expressions.DynamicExpression.prototype.get_DelegateType.call(this), System.Linq.Expressions.DynamicExpression.prototype.get_Binder.call(this), args);
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.DynamicExpressionN.prototype, "IArgumentProvider_ArgumentCount", 
	$asm08.System.Linq.Expressions.DynamicExpressionN.prototype.IArgumentProvider_get_ArgumentCount, null);
$asm08.System.Linq.Expressions.DynamicExpressionN.prototype._arguments = null;

$asm08.System.Linq.Expressions.TypedDynamicExpressionN.prototype._ctor = function (returnType, delegateType, binder, arguments) {
	$asm08.System.Linq.Expressions.DynamicExpressionN.prototype._ctor.call(this, delegateType, binder, arguments);
	this._returnType = returnType;
};
$asm08.System.Linq.Expressions.TypedDynamicExpressionN.prototype.get_Type = function () {
	return this._returnType;
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.TypedDynamicExpressionN.prototype, "Type", 
	$asm08.System.Linq.Expressions.TypedDynamicExpressionN.prototype.get_Type, null);
$asm08.System.Linq.Expressions.TypedDynamicExpressionN.prototype._returnType = null;

$asm08.System.Linq.Expressions.DynamicExpression1.prototype._ctor = function (delegateType, binder, arg0) {
	System.Linq.Expressions.DynamicExpression.prototype._ctor.call(this, delegateType, binder);
	this._arg0 = arg0;
};
$asm08.System.Linq.Expressions.DynamicExpression1.prototype.IArgumentProvider_GetArgument = function (index) {
	if (index === 0) {
		return System.Linq.Expressions.Expression.ReturnObject$b1(System.Linq.Expressions.Expression)(this._arg0);
	}
	throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
};
$asm08.System.Linq.Expressions.DynamicExpression1.prototype.IArgumentProvider_get_ArgumentCount = function () {
	return 1;
};
$asm08.System.Linq.Expressions.DynamicExpression1.prototype.GetOrMakeArguments = function () {
	return System.Linq.Expressions.Expression.ReturnReadOnly(this, /* ref */ new JSIL.MemberReference(this, "_arg0"));
};
$asm08.System.Linq.Expressions.DynamicExpression1.prototype.Rewrite = function (args) {
	return System.Linq.Expressions.Expression.MakeDynamic$2(System.Linq.Expressions.DynamicExpression.prototype.get_DelegateType.call(this), System.Linq.Expressions.DynamicExpression.prototype.get_Binder.call(this), args[0]);
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.DynamicExpression1.prototype, "IArgumentProvider_ArgumentCount", 
	$asm08.System.Linq.Expressions.DynamicExpression1.prototype.IArgumentProvider_get_ArgumentCount, null);
$asm08.System.Linq.Expressions.DynamicExpression1.prototype._arg0 = null;

$asm08.System.Linq.Expressions.TypedDynamicExpression1.prototype._ctor = function (retType, delegateType, binder, arg0) {
	$asm08.System.Linq.Expressions.DynamicExpression1.prototype._ctor.call(this, delegateType, binder, arg0);
	this._retType = retType;
};
$asm08.System.Linq.Expressions.TypedDynamicExpression1.prototype.get_Type = function () {
	return this._retType;
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.TypedDynamicExpression1.prototype, "Type", 
	$asm08.System.Linq.Expressions.TypedDynamicExpression1.prototype.get_Type, null);
$asm08.System.Linq.Expressions.TypedDynamicExpression1.prototype._retType = null;

$asm08.System.Linq.Expressions.DynamicExpression2.prototype._ctor = function (delegateType, binder, arg0, arg1) {
	System.Linq.Expressions.DynamicExpression.prototype._ctor.call(this, delegateType, binder);
	this._arg0 = arg0;
	this._arg1 = arg1;
};
$asm08.System.Linq.Expressions.DynamicExpression2.prototype.IArgumentProvider_GetArgument = function (index) {
	switch (index) {
		case 0: 
			return System.Linq.Expressions.Expression.ReturnObject$b1(System.Linq.Expressions.Expression)(this._arg0);
		case 1: 
			return this._arg1;
		default: 
			throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
	}
};
$asm08.System.Linq.Expressions.DynamicExpression2.prototype.IArgumentProvider_get_ArgumentCount = function () {
	return 2;
};
$asm08.System.Linq.Expressions.DynamicExpression2.prototype.GetOrMakeArguments = function () {
	return System.Linq.Expressions.Expression.ReturnReadOnly(this, /* ref */ new JSIL.MemberReference(this, "_arg0"));
};
$asm08.System.Linq.Expressions.DynamicExpression2.prototype.Rewrite = function (args) {
	return System.Linq.Expressions.Expression.MakeDynamic$3(System.Linq.Expressions.DynamicExpression.prototype.get_DelegateType.call(this), System.Linq.Expressions.DynamicExpression.prototype.get_Binder.call(this), args[0], args[1]);
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.DynamicExpression2.prototype, "IArgumentProvider_ArgumentCount", 
	$asm08.System.Linq.Expressions.DynamicExpression2.prototype.IArgumentProvider_get_ArgumentCount, null);
$asm08.System.Linq.Expressions.DynamicExpression2.prototype._arg0 = null;
$asm08.System.Linq.Expressions.DynamicExpression2.prototype._arg1 = null;

$asm08.System.Linq.Expressions.TypedDynamicExpression2.prototype._ctor = function (retType, delegateType, binder, arg0, arg1) {
	$asm08.System.Linq.Expressions.DynamicExpression2.prototype._ctor.call(this, delegateType, binder, arg0, arg1);
	this._retType = retType;
};
$asm08.System.Linq.Expressions.TypedDynamicExpression2.prototype.get_Type = function () {
	return this._retType;
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.TypedDynamicExpression2.prototype, "Type", 
	$asm08.System.Linq.Expressions.TypedDynamicExpression2.prototype.get_Type, null);
$asm08.System.Linq.Expressions.TypedDynamicExpression2.prototype._retType = null;

$asm08.System.Linq.Expressions.DynamicExpression3.prototype._ctor = function (delegateType, binder, arg0, arg1, arg2) {
	System.Linq.Expressions.DynamicExpression.prototype._ctor.call(this, delegateType, binder);
	this._arg0 = arg0;
	this._arg1 = arg1;
	this._arg2 = arg2;
};
$asm08.System.Linq.Expressions.DynamicExpression3.prototype.IArgumentProvider_GetArgument = function (index) {
	switch (index) {
		case 0: 
			return System.Linq.Expressions.Expression.ReturnObject$b1(System.Linq.Expressions.Expression)(this._arg0);
		case 1: 
			return this._arg1;
		case 2: 
			return this._arg2;
		default: 
			throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
	}
};
$asm08.System.Linq.Expressions.DynamicExpression3.prototype.IArgumentProvider_get_ArgumentCount = function () {
	return 3;
};
$asm08.System.Linq.Expressions.DynamicExpression3.prototype.GetOrMakeArguments = function () {
	return System.Linq.Expressions.Expression.ReturnReadOnly(this, /* ref */ new JSIL.MemberReference(this, "_arg0"));
};
$asm08.System.Linq.Expressions.DynamicExpression3.prototype.Rewrite = function (args) {
	return System.Linq.Expressions.Expression.MakeDynamic$4(
		System.Linq.Expressions.DynamicExpression.prototype.get_DelegateType.call(this), 
		System.Linq.Expressions.DynamicExpression.prototype.get_Binder.call(this), 
		args[0], 
		args[1], 
		args[2]
	);
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.DynamicExpression3.prototype, "IArgumentProvider_ArgumentCount", 
	$asm08.System.Linq.Expressions.DynamicExpression3.prototype.IArgumentProvider_get_ArgumentCount, null);
$asm08.System.Linq.Expressions.DynamicExpression3.prototype._arg0 = null;
$asm08.System.Linq.Expressions.DynamicExpression3.prototype._arg1 = null;
$asm08.System.Linq.Expressions.DynamicExpression3.prototype._arg2 = null;

$asm08.System.Linq.Expressions.TypedDynamicExpression3.prototype._ctor = function (retType, delegateType, binder, arg0, arg1, arg2) {
	$asm08.System.Linq.Expressions.DynamicExpression3.prototype._ctor.call(
		this, delegateType, 
		binder, 
		arg0, 
		arg1, 
		arg2
	);
	this._retType = retType;
};
$asm08.System.Linq.Expressions.TypedDynamicExpression3.prototype.get_Type = function () {
	return this._retType;
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.TypedDynamicExpression3.prototype, "Type", 
	$asm08.System.Linq.Expressions.TypedDynamicExpression3.prototype.get_Type, null);
$asm08.System.Linq.Expressions.TypedDynamicExpression3.prototype._retType = null;

$asm08.System.Linq.Expressions.DynamicExpression4.prototype._ctor = function (delegateType, binder, arg0, arg1, arg2, arg3) {
	System.Linq.Expressions.DynamicExpression.prototype._ctor.call(this, delegateType, binder);
	this._arg0 = arg0;
	this._arg1 = arg1;
	this._arg2 = arg2;
	this._arg3 = arg3;
};
$asm08.System.Linq.Expressions.DynamicExpression4.prototype.IArgumentProvider_GetArgument = function (index) {
	switch (index) {
		case 0: 
			return System.Linq.Expressions.Expression.ReturnObject$b1(System.Linq.Expressions.Expression)(this._arg0);
		case 1: 
			return this._arg1;
		case 2: 
			return this._arg2;
		case 3: 
			return this._arg3;
		default: 
			throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
	}
};
$asm08.System.Linq.Expressions.DynamicExpression4.prototype.IArgumentProvider_get_ArgumentCount = function () {
	return 4;
};
$asm08.System.Linq.Expressions.DynamicExpression4.prototype.GetOrMakeArguments = function () {
	return System.Linq.Expressions.Expression.ReturnReadOnly(this, /* ref */ new JSIL.MemberReference(this, "_arg0"));
};
$asm08.System.Linq.Expressions.DynamicExpression4.prototype.Rewrite = function (args) {
	return System.Linq.Expressions.Expression.MakeDynamic$5(
		System.Linq.Expressions.DynamicExpression.prototype.get_DelegateType.call(this), 
		System.Linq.Expressions.DynamicExpression.prototype.get_Binder.call(this), 
		args[0], 
		args[1], 
		args[2], 
		args[3]
	);
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.DynamicExpression4.prototype, "IArgumentProvider_ArgumentCount", 
	$asm08.System.Linq.Expressions.DynamicExpression4.prototype.IArgumentProvider_get_ArgumentCount, null);
$asm08.System.Linq.Expressions.DynamicExpression4.prototype._arg0 = null;
$asm08.System.Linq.Expressions.DynamicExpression4.prototype._arg1 = null;
$asm08.System.Linq.Expressions.DynamicExpression4.prototype._arg2 = null;
$asm08.System.Linq.Expressions.DynamicExpression4.prototype._arg3 = null;

$asm08.System.Linq.Expressions.TypedDynamicExpression4.prototype._ctor = function (retType, delegateType, binder, arg0, arg1, arg2, arg3) {
	$asm08.System.Linq.Expressions.DynamicExpression4.prototype._ctor.call(
		this, delegateType, 
		binder, 
		arg0, 
		arg1, 
		arg2, 
		arg3
	);
	this._retType = retType;
};
$asm08.System.Linq.Expressions.TypedDynamicExpression4.prototype.get_Type = function () {
	return this._retType;
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.TypedDynamicExpression4.prototype, "Type", 
	$asm08.System.Linq.Expressions.TypedDynamicExpression4.prototype.get_Type, null);
$asm08.System.Linq.Expressions.TypedDynamicExpression4.prototype._retType = null;

System.Linq.Expressions.ElementInit.prototype._ctor = function (addMethod, arguments) {
	System.Object.prototype._ctor.call(this);
	this._addMethod = addMethod;
	this._arguments = arguments;
};
System.Linq.Expressions.ElementInit.prototype.get_AddMethod = function () {
	return this._addMethod;
};
System.Linq.Expressions.ElementInit.prototype.get_Arguments = function () {
	return this._arguments;
};
System.Linq.Expressions.ElementInit.prototype.IArgumentProvider_GetArgument = function (index) {
	return this._arguments.get_Item(index);
};
System.Linq.Expressions.ElementInit.prototype.IArgumentProvider_get_ArgumentCount = function () {
	return this._arguments.Count;
};
System.Linq.Expressions.ElementInit.prototype.toString = function () {
	return $asm08.System.Linq.Expressions.ExpressionStringBuilder.ElementInitBindingToString(this);
};
System.Linq.Expressions.ElementInit.prototype.Update = function (arguments) {
	if (arguments === this.Arguments) {
		return this;
	}
	return System.Linq.Expressions.Expression.ElementInit$1(this.AddMethod, arguments);
};
JSIL.MakeProperty(System.Linq.Expressions.ElementInit.prototype, "AddMethod", 
	System.Linq.Expressions.ElementInit.prototype.get_AddMethod, null);
JSIL.MakeProperty(System.Linq.Expressions.ElementInit.prototype, "Arguments", 
	System.Linq.Expressions.ElementInit.prototype.get_Arguments, null);
JSIL.MakeProperty(System.Linq.Expressions.ElementInit.prototype, "IArgumentProvider_ArgumentCount", 
	System.Linq.Expressions.ElementInit.prototype.IArgumentProvider_get_ArgumentCount, null);
System.Linq.Expressions.ElementInit.prototype._addMethod = null;
System.Linq.Expressions.ElementInit.prototype._arguments = null;

$asm08.System.Linq.Expressions.ExpressionStringBuilder.prototype._ctor = function () {
	System.Linq.Expressions.ExpressionVisitor.prototype._ctor.call(this);
	this._out = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
};
$asm08.System.Linq.Expressions.ExpressionStringBuilder.prototype.toString = function () {
	return this._out.toString();
};
$asm08.System.Linq.Expressions.ExpressionStringBuilder.prototype.AddLabel = function (label) {
	if (this._ids === null) {
		this._ids = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.Object, System.Int32), "_ctor$0", []);
		this._ids.Add(label, 0);
		return;
	}
	if (!this._ids.ContainsKey(label)) {
		this._ids.Add(label, this._ids.Count);
	}
};
$asm08.System.Linq.Expressions.ExpressionStringBuilder.prototype.GetLabelId = function (label) {
	if (this._ids === null) {
		this._ids = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.Object, System.Int32), "_ctor$0", []);
		this.AddLabel(label);
		return 0;
	}
	if (!this._ids.TryGetValue(label, /* ref */ count)) {
		var count = new JSIL.Variable(this._ids.Count);
		this.AddLabel(label);
	}
	return count.value;
};
$asm08.System.Linq.Expressions.ExpressionStringBuilder.prototype.AddParam = function (p) {
	if (this._ids === null) {
		this._ids = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.Object, System.Int32), "_ctor$0", []);
		this._ids.Add(this._ids, 0);
		return;
	}
	if (!this._ids.ContainsKey(p)) {
		this._ids.Add(p, this._ids.Count);
	}
};
$asm08.System.Linq.Expressions.ExpressionStringBuilder.prototype.GetParamId = function (p) {
	if (this._ids === null) {
		this._ids = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.Object, System.Int32), "_ctor$0", []);
		this.AddParam(p);
		return 0;
	}
	if (!this._ids.TryGetValue(p, /* ref */ count)) {
		var count = new JSIL.Variable(this._ids.Count);
		this.AddParam(p);
	}
	return count.value;
};
$asm08.System.Linq.Expressions.ExpressionStringBuilder.prototype.Out$0 = function (s) {
	this._out.Append$2(s);
};
$asm08.System.Linq.Expressions.ExpressionStringBuilder.prototype.Out$1 = function (c) {
	this._out.Append$7(c);
};
$asm08.System.Linq.Expressions.ExpressionStringBuilder.ExpressionToString = function (node) {
	var expressionStringBuilder = new $asm08.System.Linq.Expressions.ExpressionStringBuilder();
	expressionStringBuilder.Visit$0(node);
	return expressionStringBuilder.toString();
};
$asm08.System.Linq.Expressions.ExpressionStringBuilder.CatchBlockToString = function (node) {
	var expressionStringBuilder = new $asm08.System.Linq.Expressions.ExpressionStringBuilder();
	expressionStringBuilder.VisitCatchBlock(node);
	return expressionStringBuilder.toString();
};
$asm08.System.Linq.Expressions.ExpressionStringBuilder.SwitchCaseToString = function (node) {
	var expressionStringBuilder = new $asm08.System.Linq.Expressions.ExpressionStringBuilder();
	expressionStringBuilder.VisitSwitchCase(node);
	return expressionStringBuilder.toString();
};
$asm08.System.Linq.Expressions.ExpressionStringBuilder.MemberBindingToString = function (node) {
	var expressionStringBuilder = new $asm08.System.Linq.Expressions.ExpressionStringBuilder();
	expressionStringBuilder.VisitMemberBinding(node);
	return expressionStringBuilder.toString();
};
$asm08.System.Linq.Expressions.ExpressionStringBuilder.ElementInitBindingToString = function (node) {
	var expressionStringBuilder = new $asm08.System.Linq.Expressions.ExpressionStringBuilder();
	expressionStringBuilder.VisitElementInit(node);
	return expressionStringBuilder.toString();
};
$asm08.System.Linq.Expressions.ExpressionStringBuilder.FormatBinder = function (binder) {
	var convertBinder = null, getMemberBinder = null, setMemberBinder = null, deleteMemberBinder = null, invokeMemberBinder = null, unaryOperationBinder = null, binaryOperationBinder = null;
	if ((convertBinder = JSIL.TryCast(binder, System.Dynamic.ConvertBinder)) !== null) {
		return JSIL.ConcatString("Convert ", convertBinder.Type);
	}
	if ((getMemberBinder = JSIL.TryCast(binder, System.Dynamic.GetMemberBinder)) !== null) {
		return ("GetMember " + getMemberBinder.Name);
	}
	if ((setMemberBinder = JSIL.TryCast(binder, System.Dynamic.SetMemberBinder)) !== null) {
		return ("SetMember " + setMemberBinder.Name);
	}
	if ((deleteMemberBinder = JSIL.TryCast(binder, System.Dynamic.DeleteMemberBinder)) !== null) {
		return ("DeleteMember " + deleteMemberBinder.Name);
	}
	if (JSIL.TryCast(binder, System.Dynamic.GetIndexBinder) !== null) {
		return "GetIndex";
	}
	if (JSIL.TryCast(binder, System.Dynamic.SetIndexBinder) !== null) {
		return "SetIndex";
	}
	if (JSIL.TryCast(binder, System.Dynamic.DeleteIndexBinder) !== null) {
		return "DeleteIndex";
	}
	if ((invokeMemberBinder = JSIL.TryCast(binder, System.Dynamic.InvokeMemberBinder)) !== null) {
		return ("Call " + invokeMemberBinder.Name);
	}
	if (JSIL.TryCast(binder, System.Dynamic.InvokeBinder) !== null) {
		return "Invoke";
	}
	if (JSIL.TryCast(binder, System.Dynamic.CreateInstanceBinder) !== null) {
		return "Create";
	}
	if ((unaryOperationBinder = JSIL.TryCast(binder, System.Dynamic.UnaryOperationBinder)) !== null) {
		return unaryOperationBinder.Operation.toString();
	}
	if ((binaryOperationBinder = JSIL.TryCast(binder, System.Dynamic.BinaryOperationBinder)) !== null) {
		return binaryOperationBinder.Operation.toString();
	}
	return "CallSiteBinder";
};
$asm08.System.Linq.Expressions.ExpressionStringBuilder.prototype.VisitExpressions$b1$0 = JSIL.GenericMethod(
	["T"], 
	function (T, open, expressions, close) {
		this.VisitExpressions$b1$1(T)(open, expressions, close, ", ");
	}
);
$asm08.System.Linq.Expressions.ExpressionStringBuilder.prototype.VisitExpressions$b1$1 = JSIL.GenericMethod(
	["T"], 
	function (T, open, expressions, close, seperator) {
		this.Out$1(open);
		if (expressions !== null) {
			var flag = true;
			var enumerator = expressions.IEnumerable$b1_GetEnumerator();
			try {
			__loop0__: 
				while (enumerator.IEnumerator_MoveNext()) {
					var current = enumerator.IEnumerator$b1_Current;
					if (flag) {
						flag = false;
					} else {
						this.Out$0(seperator);
					}
					this.Visit$0(current);
				}
			} finally {
				if (enumerator !== null) {
					enumerator.IDisposable_Dispose();
				}
			}
		}
		this.Out$1(close);
	}
);
$asm08.System.Linq.Expressions.ExpressionStringBuilder.prototype.VisitDynamic = function (node) {
	this.Out$0($asm08.System.Linq.Expressions.ExpressionStringBuilder.FormatBinder(node.Binder));
	this.VisitExpressions$b1$0(System.Linq.Expressions.Expression)("(", node.Arguments, ")");
	return node;
};
$asm08.System.Linq.Expressions.ExpressionStringBuilder.prototype.VisitBinary = function (node) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				if (node.NodeType === System.Linq.Expressions.ExpressionType.ArrayIndex) {
					this.Visit$0(node.Left);
					this.Out$0("[");
					this.Visit$0(node.Right);
					this.Out$0("]");
				} else {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								var nodeType = node.NodeType;
								switch (Number(nodeType)) {
									case 0: 
										var s = "+";
										__label1__ = "IL_3C6";
										continue __step1__;
									case 1: 
										s = "+";
										__label1__ = "IL_3C6";
										continue __step1__;
									case 2: 
										if (!((node.Type !== System.Boolean) && (node.Type !== System.Nullable$b1.Of(System.Boolean)))) {
											s = "And";
											__label1__ = "IL_3C6";
											continue __step1__;
										}
										s = "&";
										__label1__ = "IL_3C6";
										continue __step1__;
									case 3: 
										s = "AndAlso";
										if (System.Linq.Expressions.Expression.SilverlightQuirks) {
											s = "&&";
											__label1__ = "IL_3C6";
											continue __step1__;
										}
										__label1__ = "IL_3C6";
										continue __step1__;
									case 4: 
									case 5: 
									case 6: 
									case 8: 
									case 9: 
									case 10: 
									case 11: 
									case 17: 
									case 18: 
									case 22: 
									case 23: 
									case 24: 
									case 28: 
									case 29: 
									case 30: 
									case 31: 
									case 32: 
									case 33: 
									case 34: 
									case 38: 
									case 40: 
									case 44: 
									case 45: 
										break;
									case 7: 
										s = "??";
										__label1__ = "IL_3C6";
										continue __step1__;
									case 12: 
										s = "/";
										__label1__ = "IL_3C6";
										continue __step1__;
									case 13: 
										s = "==";
										if (System.Linq.Expressions.Expression.SilverlightQuirks) {
											s = "=";
											__label1__ = "IL_3C6";
											continue __step1__;
										}
										__label1__ = "IL_3C6";
										continue __step1__;
									case 14: 
										s = "^";
										__label1__ = "IL_3C6";
										continue __step1__;
									case 15: 
										s = ">";
										__label1__ = "IL_3C6";
										continue __step1__;
									case 16: 
										s = ">=";
										__label1__ = "IL_3C6";
										continue __step1__;
									case 19: 
										s = "<<";
										__label1__ = "IL_3C6";
										continue __step1__;
									case 20: 
										s = "<";
										__label1__ = "IL_3C6";
										continue __step1__;
									case 21: 
										s = "<=";
										__label1__ = "IL_3C6";
										continue __step1__;
									case 25: 
										s = "%";
										__label1__ = "IL_3C6";
										continue __step1__;
									case 26: 
										s = "*";
										__label1__ = "IL_3C6";
										continue __step1__;
									case 27: 
										s = "*";
										__label1__ = "IL_3C6";
										continue __step1__;
									case 35: 
										s = "!=";
										__label1__ = "IL_3C6";
										continue __step1__;
									case 36: 
										if (!((node.Type !== System.Boolean) && (node.Type !== System.Nullable$b1.Of(System.Boolean)))) {
											s = "Or";
											__label1__ = "IL_3C6";
											continue __step1__;
										}
										s = "|";
										__label1__ = "IL_3C6";
										continue __step1__;
									case 37: 
										s = "OrElse";
										if (System.Linq.Expressions.Expression.SilverlightQuirks) {
											s = "||";
											__label1__ = "IL_3C6";
											continue __step1__;
										}
										__label1__ = "IL_3C6";
										continue __step1__;
									case 39: 
										s = "^";
										__label1__ = "IL_3C6";
										continue __step1__;
									case 41: 
										s = ">>";
										__label1__ = "IL_3C6";
										continue __step1__;
									case 42: 
										s = "-";
										__label1__ = "IL_3C6";
										continue __step1__;
									case 43: 
										s = "-";
										__label1__ = "IL_3C6";
										continue __step1__;
									case 46: 
										s = "=";
										__label1__ = "IL_3C6";
										continue __step1__;
									default: 
										switch (Number(nodeType)) {
											case 63: 
												s = "+=";
												__label1__ = "IL_3C6";
												continue __step1__;
											case 64: 
												if (!((node.Type !== System.Boolean) && (node.Type !== System.Nullable$b1.Of(System.Boolean)))) {
													s = "&&=";
													__label1__ = "IL_3C6";
													continue __step1__;
												}
												s = "&=";
												__label1__ = "IL_3C6";
												continue __step1__;
											case 65: 
												s = "/=";
												__label1__ = "IL_3C6";
												continue __step1__;
											case 66: 
												s = "^=";
												__label1__ = "IL_3C6";
												continue __step1__;
											case 67: 
												s = "<<=";
												__label1__ = "IL_3C6";
												continue __step1__;
											case 68: 
												s = "%=";
												__label1__ = "IL_3C6";
												continue __step1__;
											case 69: 
												s = "*=";
												__label1__ = "IL_3C6";
												continue __step1__;
											case 70: 
												if (!((node.Type !== System.Boolean) && (node.Type !== System.Nullable$b1.Of(System.Boolean)))) {
													s = "||=";
													__label1__ = "IL_3C6";
													continue __step1__;
												}
												s = "|=";
												__label1__ = "IL_3C6";
												continue __step1__;
											case 71: 
												s = "**=";
												__label1__ = "IL_3C6";
												continue __step1__;
											case 72: 
												s = ">>=";
												__label1__ = "IL_3C6";
												continue __step1__;
											case 73: 
												s = "-=";
												__label1__ = "IL_3C6";
												continue __step1__;
											case 74: 
												s = "+=";
												__label1__ = "IL_3C6";
												continue __step1__;
											case 75: 
												s = "*=";
												__label1__ = "IL_3C6";
												continue __step1__;
											case 76: 
												s = "-=";
												__label1__ = "IL_3C6";
												continue __step1__;
										}
										break;
								}
								throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
								__label1__ = "IL_3C6";
								continue __step1__;
								break;
							case "IL_3C6":
								this.Out$0("(");
								this.Visit$0(node.Left);
								this.Out$1(" ");
								this.Out$0(s);
								this.Out$1(" ");
								this.Visit$0(node.Right);
								this.Out$0(")");
								break __step1__;
						}
					}
				}
				return node;
				break __step0__;
		}
	}
};
$asm08.System.Linq.Expressions.ExpressionStringBuilder.prototype.VisitParameter = function (node) {
	if (node.IsByRef) {
		this.Out$0("ref ");
	}
	var name = node.Name;
	if (System.String.IsNullOrEmpty(name)) {
		if (System.Linq.Expressions.Expression.SilverlightQuirks) {
			this.Out$0(JSIL.Coalesce(name, "<param>"));
			return node;
		}
		this.Out$0(JSIL.ConcatString("Param_", this.GetParamId(node)));
	} else {
		this.Out$0(name);
	}
	return node;
};
$asm08.System.Linq.Expressions.ExpressionStringBuilder.prototype.VisitLambda$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, node) {
		if (node.Parameters.Count === 1) {
			this.Visit$0(node.Parameters.get_Item(0));
		} else {
			this.VisitExpressions$b1$0(System.Linq.Expressions.ParameterExpression)("(", JSIL.Cast(node.Parameters, System.Collections.Generic.IList$b1.Of(System.Linq.Expressions.ParameterExpression)), ")");
		}
		this.Out$0(" => ");
		this.Visit$0(node.Body);
		return node;
	}
);
$asm08.System.Linq.Expressions.ExpressionStringBuilder.prototype.VisitListInit = function (node) {
	this.Visit$0(node.NewExpression);
	this.Out$0(" {");
	var i = 0;
	var count = node.Initializers.Count;
__loop0__: 
	while (i < count) {
		if (i > 0) {
			this.Out$0(", ");
		}
		this.Out$0(node.Initializers.get_Item(i).toString());
		++i;
	}
	this.Out$0("}");
	return node;
};
$asm08.System.Linq.Expressions.ExpressionStringBuilder.prototype.VisitConditional = function (node) {
	this.Out$0("IIF(");
	this.Visit$0(node.Test);
	this.Out$0(", ");
	this.Visit$0(node.IfTrue);
	this.Out$0(", ");
	this.Visit$0(node.IfFalse);
	this.Out$0(")");
	return node;
};
$asm08.System.Linq.Expressions.ExpressionStringBuilder.prototype.VisitConstant = function (node) {
	if (node.Value !== null) {
		var text = node.Value.toString();
		if (JSIL.TryCast(node.Value, System.String) !== null) {
			this.Out$0('"');
			this.Out$0(text);
			this.Out$0('"');
		} else if (text == JSIL.GetType(node.Value).toString()) {
			this.Out$0("value(");
			this.Out$0(text);
			this.Out$0(")");
		} else {
			this.Out$0(text);
		}
	} else {
		this.Out$0("null");
	}
	return node;
};
$asm08.System.Linq.Expressions.ExpressionStringBuilder.prototype.VisitDebugInfo = function (node) {
	var s = System.String.Format(System.Globalization.CultureInfo.CurrentCulture, "<DebugInfo({0}: {1}, {2}, {3}, {4})>", [node.Document.FileName, node.StartLine, node.StartColumn, node.EndLine, node.EndColumn]);
	this.Out$0(s);
	return node;
};
$asm08.System.Linq.Expressions.ExpressionStringBuilder.prototype.VisitRuntimeVariables = function (node) {
	this.VisitExpressions$b1$0(System.Linq.Expressions.ParameterExpression)("(", JSIL.Cast(node.Variables, System.Collections.Generic.IList$b1.Of(System.Linq.Expressions.ParameterExpression)), ")");
	return node;
};
$asm08.System.Linq.Expressions.ExpressionStringBuilder.prototype.OutMember = function (instance, member) {
	if (instance !== null) {
		this.Visit$0(instance);
		this.Out$0(("." + member.Name));
		return;
	}
	this.Out$0((member.DeclaringType.Name + "." + member.Name));
};
$asm08.System.Linq.Expressions.ExpressionStringBuilder.prototype.VisitMember = function (node) {
	this.OutMember(node.Expression, node.Member);
	return node;
};
$asm08.System.Linq.Expressions.ExpressionStringBuilder.prototype.VisitMemberInit = function (node) {
	if (!((node.NewExpression.Arguments.Count !== 0) || !node.NewExpression.Type.Name.Contains("<"))) {
		this.Out$0("new");
	} else {
		this.Visit$0(node.NewExpression);
	}
	this.Out$0(" {");
	var i = 0;
	var count = node.Bindings.Count;
__loop0__: 
	while (i < count) {
		var node2 = node.Bindings.get_Item(i);
		if (i > 0) {
			this.Out$0(", ");
		}
		this.VisitMemberBinding(node2);
		++i;
	}
	this.Out$0("}");
	return node;
};
$asm08.System.Linq.Expressions.ExpressionStringBuilder.prototype.VisitMemberAssignment = function (assignment) {
	this.Out$0(assignment.Member.Name);
	this.Out$0(" = ");
	this.Visit$0(assignment.Expression);
	return assignment;
};
$asm08.System.Linq.Expressions.ExpressionStringBuilder.prototype.VisitMemberListBinding = function (binding) {
	this.Out$0(binding.Member.Name);
	this.Out$0(" = {");
	var i = 0;
	var count = binding.Initializers.Count;
__loop0__: 
	while (i < count) {
		if (i > 0) {
			this.Out$0(", ");
		}
		this.VisitElementInit(binding.Initializers.get_Item(i));
		++i;
	}
	this.Out$0("}");
	return binding;
};
$asm08.System.Linq.Expressions.ExpressionStringBuilder.prototype.VisitMemberMemberBinding = function (binding) {
	this.Out$0(binding.Member.Name);
	this.Out$0(" = {");
	var i = 0;
	var count = binding.Bindings.Count;
__loop0__: 
	while (i < count) {
		if (i > 0) {
			this.Out$0(", ");
		}
		this.VisitMemberBinding(binding.Bindings.get_Item(i));
		++i;
	}
	this.Out$0("}");
	return binding;
};
$asm08.System.Linq.Expressions.ExpressionStringBuilder.prototype.VisitElementInit = function (initializer) {
	this.Out$0(initializer.AddMethod.toString());
	var seperator = ", ";
	if (System.Linq.Expressions.Expression.SilverlightQuirks) {
		seperator = ",";
	}
	this.VisitExpressions$b1$1(System.Linq.Expressions.Expression)("(", initializer.Arguments, ")", seperator);
	return initializer;
};
$asm08.System.Linq.Expressions.ExpressionStringBuilder.prototype.VisitInvocation = function (node) {
	this.Out$0("Invoke(");
	this.Visit$0(node.Expression);
	var s = ", ";
	if (System.Linq.Expressions.Expression.SilverlightQuirks) {
		s = ",";
	}
	var i = 0;
	var count = node.Arguments.Count;
__loop0__: 
	while (i < count) {
		this.Out$0(s);
		this.Visit$0(node.Arguments.get_Item(i));
		++i;
	}
	this.Out$0(")");
	return node;
};
$asm08.System.Linq.Expressions.ExpressionStringBuilder.prototype.VisitMethodCall = function (node) {
	var num = 0;
	var expression = node.Object;
	if (System.Attribute.GetCustomAttribute$0(node.Method, System.Runtime.CompilerServices.ExtensionAttribute) !== null) {
		num = 1;
		expression = node.Arguments.get_Item(0);
	}
	if (expression !== null) {
		this.Visit$0(expression);
		this.Out$0(".");
	}
	this.Out$0(node.Method.Name);
	this.Out$0("(");
	var i = num;
	var count = node.Arguments.Count;
__loop0__: 
	while (i < count) {
		if (i > num) {
			this.Out$0(", ");
		}
		this.Visit$0(node.Arguments.get_Item(i));
		++i;
	}
	this.Out$0(")");
	return node;
};
$asm08.System.Linq.Expressions.ExpressionStringBuilder.prototype.VisitNewArray = function (node) {
	switch (Number(node.NodeType)) {
		case 32: 
			this.Out$0("new [] ");
			this.VisitExpressions$b1$0(System.Linq.Expressions.Expression)("{", node.Expressions, "}");
			break;
		case 33: 
			this.Out$0(("new " + node.Type.toString()));
			this.VisitExpressions$b1$0(System.Linq.Expressions.Expression)("(", node.Expressions, ")");
			break;
	}
	return node;
};
$asm08.System.Linq.Expressions.ExpressionStringBuilder.GetPropertyNoThrow = function (method) {
	if (method === null) {
		return null;
	}
	var declaringType = method.DeclaringType;
	var bindingFlags = (System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public);
	bindingFlags = (bindingFlags | method.IsStatic ? System.Reflection.BindingFlags.Static : System.Reflection.BindingFlags.Instance);
	var properties = declaringType.GetProperties$0(bindingFlags);
	var array = properties;
__loop0__: 
	for (var i = 0; i < array.length; ) {
		var propertyInfo = array[i];
		if (!(!propertyInfo.CanRead || (method !== propertyInfo.GetGetMethod$0(true)))) {
			var result = propertyInfo;
		} else {
			if (!propertyInfo.CanWrite || (method !== propertyInfo.GetSetMethod$0(true))) {
				++i;
				continue __loop0__;
			}
			result = propertyInfo;
		}
		return result;
	}
	return null;
};
$asm08.System.Linq.Expressions.ExpressionStringBuilder.prototype.VisitNew = function (node) {
	var propertyNoThrow = null;
	this.Out$0(("new " + node.Type.Name));
	this.Out$0("(");
	var members = node.Members;
__loop0__: 
	for (var i = 0; i < node.Arguments.Count; ++i) {
		if (i > 0) {
			this.Out$0(", ");
		}
		if (members !== null) {
			var name = members.get_Item(i).Name;
			if (!(!System.Linq.Expressions.Expression.SilverlightQuirks || 
					(members.get_Item(i).MemberType !== System.Reflection.MemberTypes.Method) || ((propertyNoThrow = $asm08.System.Linq.Expressions.ExpressionStringBuilder.GetPropertyNoThrow(JSIL.Cast(members.get_Item(i), System.Reflection.MethodInfo))) === null))) {
				name = propertyNoThrow.Name;
			}
			this.Out$0(name);
			this.Out$0(" = ");
		}
		this.Visit$0(node.Arguments.get_Item(i));
	}
	this.Out$0(")");
	return node;
};
$asm08.System.Linq.Expressions.ExpressionStringBuilder.prototype.VisitTypeBinary = function (node) {
	this.Out$0("(");
	this.Visit$0(node.Expression);
	var nodeType = node.NodeType;
	if (nodeType !== System.Linq.Expressions.ExpressionType.TypeIs) {
		if (nodeType === System.Linq.Expressions.ExpressionType.TypeEqual) {
			this.Out$0(" TypeEqual ");
		}
	} else {
		this.Out$0(" Is ");
	}
	this.Out$0(node.TypeOperand.Name);
	this.Out$0(")");
	return node;
};
$asm08.System.Linq.Expressions.ExpressionStringBuilder.prototype.VisitUnary = function (node) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				var nodeType = node.NodeType;
				if (nodeType <= System.Linq.Expressions.ExpressionType.Decrement) {
					if (nodeType <= System.Linq.Expressions.ExpressionType.Quote) {
						switch (Number(nodeType)) {
							case 28: 
							case 30: 
								this.Out$0("-");
								__label0__ = "IL_130";
								continue __step0__;
							case 29: 
								this.Out$0("+");
								__label0__ = "IL_130";
								continue __step0__;
							case 31: 
							case 32: 
							case 33: 
								break;
							case 34: 
								this.Out$0("Not(");
								__label0__ = "IL_130";
								continue __step0__;
							default: 
								if (nodeType === System.Linq.Expressions.ExpressionType.Quote) {
									__label0__ = "IL_130";
									continue __step0__;
								}
								break;
						}
					} else {
						if (nodeType === System.Linq.Expressions.ExpressionType.TypeAs) {
							this.Out$0("(");
							__label0__ = "IL_130";
							continue __step0__;
						}
						if (nodeType === System.Linq.Expressions.ExpressionType.Decrement) {
							this.Out$0("Decrement(");
							__label0__ = "IL_130";
							continue __step0__;
						}
					}
				} else if (nodeType <= System.Linq.Expressions.ExpressionType.Throw) {
					if (nodeType === System.Linq.Expressions.ExpressionType.Increment) {
						this.Out$0("Increment(");
						__label0__ = "IL_130";
						continue __step0__;
					}
					if (nodeType === System.Linq.Expressions.ExpressionType.Throw) {
						this.Out$0("throw(");
						__label0__ = "IL_130";
						continue __step0__;
					}
				} else {
					switch (Number(nodeType)) {
						case 77: 
							this.Out$0("++");
							__label0__ = "IL_130";
							continue __step0__;
						case 78: 
							this.Out$0("--");
							__label0__ = "IL_130";
							continue __step0__;
						default: 
							if (nodeType === System.Linq.Expressions.ExpressionType.OnesComplement) {
								this.Out$0("~(");
								__label0__ = "IL_130";
								continue __step0__;
							}
							break;
					}
				}
				this.Out$0(node.NodeType.toString());
				this.Out$0("(");
				__label0__ = "IL_130";
				continue __step0__;
				break;
			case "IL_130":
				this.Visit$0(node.Operand);
				var nodeType2 = node.NodeType;
				if (nodeType2 <= System.Linq.Expressions.ExpressionType.Quote) {
					switch (Number(nodeType2)) {
						case 28: 
						case 29: 
						case 30: 
							break;
						default: 
							if (nodeType2 !== System.Linq.Expressions.ExpressionType.Quote) {
								__label0__ = "IL_1C8";
								continue __step0__;
							}
							break;
					}
				} else if (nodeType2 !== System.Linq.Expressions.ExpressionType.TypeAs) {
					switch (Number(nodeType2)) {
						case 77: 
						case 78: 
							break;
						case 79: 
							this.Out$0("++");
							break;
						case 80: 
							this.Out$0("--");
							break;
						default: 
							__label0__ = "IL_1C8";
							continue __step0__;
					}
				} else {
					this.Out$0(" As ");
					this.Out$0(node.Type.Name);
					this.Out$0(")");
				}
				return node;
				__label0__ = "IL_1C8";
				continue __step0__;
				break;
			case "IL_1C8":
				this.Out$0(")");
				return node;
				break __step0__;
		}
	}
};
$asm08.System.Linq.Expressions.ExpressionStringBuilder.prototype.VisitBlock = function (node) {
	this.Out$0("{");
	var enumerator = node.Variables.GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current;
			this.Out$0("var ");
			this.Visit$0(current);
			this.Out$0(";");
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	this.Out$0(" ... }");
	return node;
};
$asm08.System.Linq.Expressions.ExpressionStringBuilder.prototype.VisitDefault = function (node) {
	this.Out$0("default(");
	this.Out$0(node.Type.Name);
	this.Out$0(")");
	return node;
};
$asm08.System.Linq.Expressions.ExpressionStringBuilder.prototype.VisitLabel = function (node) {
	this.Out$0("{ ... } ");
	this.DumpLabel(node.Target);
	this.Out$0(":");
	return node;
};
$asm08.System.Linq.Expressions.ExpressionStringBuilder.prototype.VisitGoto = function (node) {
	this.Out$0(node.Kind.toString().ToLower$1(System.Globalization.CultureInfo.CurrentCulture));
	this.DumpLabel(node.Target);
	if (node.Value !== null) {
		this.Out$0(" (");
		this.Visit$0(node.Value);
		this.Out$0(") ");
	}
	return node;
};
$asm08.System.Linq.Expressions.ExpressionStringBuilder.prototype.VisitLoop = function (node) {
	this.Out$0("loop { ... }");
	return node;
};
$asm08.System.Linq.Expressions.ExpressionStringBuilder.prototype.VisitSwitchCase = function (node) {
	this.Out$0("case ");
	this.VisitExpressions$b1$0(System.Linq.Expressions.Expression)("(", node.TestValues, ")");
	this.Out$0(": ...");
	return node;
};
$asm08.System.Linq.Expressions.ExpressionStringBuilder.prototype.VisitSwitch = function (node) {
	this.Out$0("switch ");
	this.Out$0("(");
	this.Visit$0(node.SwitchValue);
	this.Out$0(") { ... }");
	return node;
};
$asm08.System.Linq.Expressions.ExpressionStringBuilder.prototype.VisitCatchBlock = function (node) {
	this.Out$0(("catch (" + node.Test.Name));
	if (node.Variable !== null) {
		this.Out$0(JSIL.Coalesce(node.Variable.Name, ""));
	}
	this.Out$0(") { ... }");
	return node;
};
$asm08.System.Linq.Expressions.ExpressionStringBuilder.prototype.VisitTry = function (node) {
	this.Out$0("try { ... }");
	return node;
};
$asm08.System.Linq.Expressions.ExpressionStringBuilder.prototype.VisitIndex = function (node) {
	if (node.Object !== null) {
		this.Visit$0(node.Object);
	} else {
		this.Out$0(node.Indexer.DeclaringType.Name);
	}
	if (node.Indexer !== null) {
		this.Out$0(".");
		this.Out$0(node.Indexer.Name);
	}
	this.VisitExpressions$b1$0(System.Linq.Expressions.Expression)("[", node.Arguments, "]");
	return node;
};
$asm08.System.Linq.Expressions.ExpressionStringBuilder.prototype.VisitExtension = function (node) {
	var method = JSIL.GetType(node).GetMethod$1(
		"ToString", 
		(System.Reflection.BindingFlags.ExactBinding | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public), 
		null, 
		System.Type.EmptyTypes, 
		null
	);
	if (method.DeclaringType !== System.Linq.Expressions.Expression) {
		this.Out$0(node.toString());
		return node;
	}
	this.Out$0("[");
	if (node.NodeType === System.Linq.Expressions.ExpressionType.Extension) {
		this.Out$0(JSIL.GetType(node).FullName);
	} else {
		this.Out$0(node.NodeType.toString());
	}
	this.Out$0("]");
	return node;
};
$asm08.System.Linq.Expressions.ExpressionStringBuilder.prototype.DumpLabel = function (target) {
	if (!System.String.IsNullOrEmpty(target.Name)) {
		this.Out$0(target.Name);
		return;
	}
	var labelId = this.GetLabelId(target);
	this.Out$0(JSIL.ConcatString("UnamedLabel_", labelId));
};
JSIL.OverloadedMethod($asm08.System.Linq.Expressions.ExpressionStringBuilder.prototype, "Out", [
		["Out$0", [System.String]], 
		["Out$1", [System.Char]]
	]);
JSIL.OverloadedGenericMethod($asm08.System.Linq.Expressions.ExpressionStringBuilder.prototype, "VisitExpressions$b1", [
		["VisitExpressions$b1$0", [System.Char, System.Collections.Generic.IList$b1.Of(JSIL.AnyType), System.Char]], 
		["VisitExpressions$b1$1", [System.Char, System.Collections.Generic.IList$b1.Of(JSIL.AnyType), System.Char, System.String]]
	]);
$asm08.System.Linq.Expressions.ExpressionStringBuilder.prototype._out = null;
$asm08.System.Linq.Expressions.ExpressionStringBuilder.prototype._ids = null;

System.Linq.Expressions.GotoExpression.prototype._ctor = function (kind, target, value, type) {
	System.Linq.Expressions.Expression.prototype._ctor$1.call(this);
	this._kind = kind;
	this._value = value;
	this._target = target;
	this._type = type;
};
System.Linq.Expressions.GotoExpression.prototype.get_Type = function () {
	return this._type;
};
System.Linq.Expressions.GotoExpression.prototype.get_NodeType = function () {
	return System.Linq.Expressions.ExpressionType.Goto;
};
System.Linq.Expressions.GotoExpression.prototype.get_Value = function () {
	return this._value;
};
System.Linq.Expressions.GotoExpression.prototype.get_Target = function () {
	return this._target;
};
System.Linq.Expressions.GotoExpression.prototype.get_Kind = function () {
	return this._kind;
};
System.Linq.Expressions.GotoExpression.prototype.Accept = function (visitor) {
	return visitor.VisitGoto(this);
};
System.Linq.Expressions.GotoExpression.prototype.Update = function (target, value) {
	if (!((target !== this.Target) || (value !== this.Value))) {
		return this;
	}
	return System.Linq.Expressions.Expression.MakeGoto(this.Kind, target, value, this.Type);
};
JSIL.MakeProperty(System.Linq.Expressions.GotoExpression.prototype, "Type", 
	System.Linq.Expressions.GotoExpression.prototype.get_Type, null);
JSIL.MakeProperty(System.Linq.Expressions.GotoExpression.prototype, "NodeType", 
	System.Linq.Expressions.GotoExpression.prototype.get_NodeType, null);
JSIL.MakeProperty(System.Linq.Expressions.GotoExpression.prototype, "Value", 
	System.Linq.Expressions.GotoExpression.prototype.get_Value, null);
JSIL.MakeProperty(System.Linq.Expressions.GotoExpression.prototype, "Target", 
	System.Linq.Expressions.GotoExpression.prototype.get_Target, null);
JSIL.MakeProperty(System.Linq.Expressions.GotoExpression.prototype, "Kind", 
	System.Linq.Expressions.GotoExpression.prototype.get_Kind, null);
System.Linq.Expressions.GotoExpression.prototype._kind = 0;
System.Linq.Expressions.GotoExpression.prototype._value = null;
System.Linq.Expressions.GotoExpression.prototype._target = null;
System.Linq.Expressions.GotoExpression.prototype._type = null;

$asm08.System.Linq.Expressions.ArgumentProviderOps.Map$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, collection, select) {
		var num = collection.IArgumentProvider_ArgumentCount;
		var array = JSIL.Array.New(T, num);
		num = 0;
	__loop0__: 
		for (var i = 0; i < num; ++i) {
			array[i] = select(collection.IArgumentProvider_GetArgument(i));
		}
		return array;
	}
);

System.Linq.Expressions.IndexExpression.prototype._ctor = function (instance, indexer, arguments) {
	System.Linq.Expressions.Expression.prototype._ctor$1.call(this);
	this._instance = instance;
	this._indexer = indexer;
	this._arguments = arguments;
};
System.Linq.Expressions.IndexExpression.prototype.get_NodeType = function () {
	return System.Linq.Expressions.ExpressionType.Index;
};
System.Linq.Expressions.IndexExpression.prototype.get_Type = function () {
	if (this._indexer !== null) {
		return this._indexer.PropertyType;
	}
	return this._instance.Type.GetElementType();
};
System.Linq.Expressions.IndexExpression.prototype.get_Object = function () {
	return this._instance;
};
System.Linq.Expressions.IndexExpression.prototype.get_Indexer = function () {
	return this._indexer;
};
System.Linq.Expressions.IndexExpression.prototype.get_Arguments = function () {
	return System.Linq.Expressions.Expression.ReturnReadOnly$b1(System.Linq.Expressions.Expression)(/* ref */ new JSIL.MemberReference(this, "_arguments"));
};
System.Linq.Expressions.IndexExpression.prototype.Update = function (object, arguments) {
	if (!((object !== this.Object) || (arguments !== this.Arguments))) {
		return this;
	}
	return System.Linq.Expressions.Expression.MakeIndex(object, this.Indexer, arguments);
};
System.Linq.Expressions.IndexExpression.prototype.IArgumentProvider_GetArgument = function (index) {
	return this._arguments.IList$b1_get_Item(index);
};
System.Linq.Expressions.IndexExpression.prototype.IArgumentProvider_get_ArgumentCount = function () {
	return this._arguments.ICollection$b1_Count;
};
System.Linq.Expressions.IndexExpression.prototype.Accept = function (visitor) {
	return visitor.VisitIndex(this);
};
System.Linq.Expressions.IndexExpression.prototype.Rewrite = function (instance, arguments) {
	return System.Linq.Expressions.Expression.MakeIndex(instance, this._indexer, arguments ? JSIL.Cast(arguments, System.Collections.Generic.IList$b1.Of(System.Linq.Expressions.Expression)) : this._arguments);
};
JSIL.MakeProperty(System.Linq.Expressions.IndexExpression.prototype, "NodeType", 
	System.Linq.Expressions.IndexExpression.prototype.get_NodeType, null);
JSIL.MakeProperty(System.Linq.Expressions.IndexExpression.prototype, "Type", 
	System.Linq.Expressions.IndexExpression.prototype.get_Type, null);
JSIL.MakeProperty(System.Linq.Expressions.IndexExpression.prototype, "Object", 
	System.Linq.Expressions.IndexExpression.prototype.get_Object, null);
JSIL.MakeProperty(System.Linq.Expressions.IndexExpression.prototype, "Indexer", 
	System.Linq.Expressions.IndexExpression.prototype.get_Indexer, null);
JSIL.MakeProperty(System.Linq.Expressions.IndexExpression.prototype, "Arguments", 
	System.Linq.Expressions.IndexExpression.prototype.get_Arguments, null);
JSIL.MakeProperty(System.Linq.Expressions.IndexExpression.prototype, "IArgumentProvider_ArgumentCount", 
	System.Linq.Expressions.IndexExpression.prototype.IArgumentProvider_get_ArgumentCount, null);
System.Linq.Expressions.IndexExpression.prototype._instance = null;
System.Linq.Expressions.IndexExpression.prototype._indexer = null;
System.Linq.Expressions.IndexExpression.prototype._arguments = null;

System.Linq.Expressions.InvocationExpression.prototype._ctor = function (lambda, arguments, returnType) {
	System.Linq.Expressions.Expression.prototype._ctor$1.call(this);
	this._lambda = lambda;
	this._arguments = arguments;
	this._returnType = returnType;
};
System.Linq.Expressions.InvocationExpression.prototype.get_Type = function () {
	return this._returnType;
};
System.Linq.Expressions.InvocationExpression.prototype.get_NodeType = function () {
	return System.Linq.Expressions.ExpressionType.Invoke;
};
System.Linq.Expressions.InvocationExpression.prototype.get_Expression = function () {
	return this._lambda;
};
System.Linq.Expressions.InvocationExpression.prototype.get_Arguments = function () {
	return System.Linq.Expressions.Expression.ReturnReadOnly$b1(System.Linq.Expressions.Expression)(/* ref */ new JSIL.MemberReference(this, "_arguments"));
};
System.Linq.Expressions.InvocationExpression.prototype.Update = function (expression, arguments) {
	if (!((expression !== this.Expression) || (arguments !== this.Arguments))) {
		return this;
	}
	return System.Linq.Expressions.Expression.Invoke$1(expression, arguments);
};
System.Linq.Expressions.InvocationExpression.prototype.IArgumentProvider_GetArgument = function (index) {
	return this._arguments.IList$b1_get_Item(index);
};
System.Linq.Expressions.InvocationExpression.prototype.IArgumentProvider_get_ArgumentCount = function () {
	return this._arguments.ICollection$b1_Count;
};
System.Linq.Expressions.InvocationExpression.prototype.Accept = function (visitor) {
	return visitor.VisitInvocation(this);
};
System.Linq.Expressions.InvocationExpression.prototype.Rewrite = function (lambda, arguments) {
	return System.Linq.Expressions.Expression.Invoke$1(lambda, arguments ? JSIL.Cast(arguments, System.Collections.Generic.IList$b1.Of(System.Linq.Expressions.Expression)) : this._arguments);
};
System.Linq.Expressions.InvocationExpression.prototype.get_LambdaOperand = function () {
	if (this._lambda.NodeType !== System.Linq.Expressions.ExpressionType.Quote) {
		return JSIL.TryCast(this._lambda, System.Linq.Expressions.LambdaExpression);
	}
	return JSIL.Cast(JSIL.Cast(this._lambda, System.Linq.Expressions.UnaryExpression).Operand, System.Linq.Expressions.LambdaExpression);
};
JSIL.MakeProperty(System.Linq.Expressions.InvocationExpression.prototype, "Type", 
	System.Linq.Expressions.InvocationExpression.prototype.get_Type, null);
JSIL.MakeProperty(System.Linq.Expressions.InvocationExpression.prototype, "NodeType", 
	System.Linq.Expressions.InvocationExpression.prototype.get_NodeType, null);
JSIL.MakeProperty(System.Linq.Expressions.InvocationExpression.prototype, "Expression", 
	System.Linq.Expressions.InvocationExpression.prototype.get_Expression, null);
JSIL.MakeProperty(System.Linq.Expressions.InvocationExpression.prototype, "Arguments", 
	System.Linq.Expressions.InvocationExpression.prototype.get_Arguments, null);
JSIL.MakeProperty(System.Linq.Expressions.InvocationExpression.prototype, "IArgumentProvider_ArgumentCount", 
	System.Linq.Expressions.InvocationExpression.prototype.IArgumentProvider_get_ArgumentCount, null);
JSIL.MakeProperty(System.Linq.Expressions.InvocationExpression.prototype, "LambdaOperand", 
	System.Linq.Expressions.InvocationExpression.prototype.get_LambdaOperand, null);
System.Linq.Expressions.InvocationExpression.prototype._arguments = null;
System.Linq.Expressions.InvocationExpression.prototype._lambda = null;
System.Linq.Expressions.InvocationExpression.prototype._returnType = null;

System.Linq.Expressions.LabelExpression.prototype._ctor = function (label, defaultValue) {
	System.Linq.Expressions.Expression.prototype._ctor$1.call(this);
	this._target = label;
	this._defaultValue = defaultValue;
};
System.Linq.Expressions.LabelExpression.prototype.get_Type = function () {
	return this._target.Type;
};
System.Linq.Expressions.LabelExpression.prototype.get_NodeType = function () {
	return System.Linq.Expressions.ExpressionType.Label;
};
System.Linq.Expressions.LabelExpression.prototype.get_Target = function () {
	return this._target;
};
System.Linq.Expressions.LabelExpression.prototype.get_DefaultValue = function () {
	return this._defaultValue;
};
System.Linq.Expressions.LabelExpression.prototype.Accept = function (visitor) {
	return visitor.VisitLabel(this);
};
System.Linq.Expressions.LabelExpression.prototype.Update = function (target, defaultValue) {
	if (!((target !== this.Target) || (defaultValue !== this.DefaultValue))) {
		return this;
	}
	return System.Linq.Expressions.Expression.Label$1(target, defaultValue);
};
JSIL.MakeProperty(System.Linq.Expressions.LabelExpression.prototype, "Type", 
	System.Linq.Expressions.LabelExpression.prototype.get_Type, null);
JSIL.MakeProperty(System.Linq.Expressions.LabelExpression.prototype, "NodeType", 
	System.Linq.Expressions.LabelExpression.prototype.get_NodeType, null);
JSIL.MakeProperty(System.Linq.Expressions.LabelExpression.prototype, "Target", 
	System.Linq.Expressions.LabelExpression.prototype.get_Target, null);
JSIL.MakeProperty(System.Linq.Expressions.LabelExpression.prototype, "DefaultValue", 
	System.Linq.Expressions.LabelExpression.prototype.get_DefaultValue, null);
System.Linq.Expressions.LabelExpression.prototype._defaultValue = null;
System.Linq.Expressions.LabelExpression.prototype._target = null;

System.Linq.Expressions.LabelTarget.prototype._ctor = function (type, name) {
	System.Object.prototype._ctor.call(this);
	this._type = type;
	this._name = name;
};
System.Linq.Expressions.LabelTarget.prototype.get_Name = function () {
	return this._name;
};
System.Linq.Expressions.LabelTarget.prototype.get_Type = function () {
	return this._type;
};
System.Linq.Expressions.LabelTarget.prototype.toString = function () {
	if (!System.String.IsNullOrEmpty(this.Name)) {
		return this.Name;
	}
	return "UnamedLabel";
};
JSIL.MakeProperty(System.Linq.Expressions.LabelTarget.prototype, "Name", 
	System.Linq.Expressions.LabelTarget.prototype.get_Name, null);
JSIL.MakeProperty(System.Linq.Expressions.LabelTarget.prototype, "Type", 
	System.Linq.Expressions.LabelTarget.prototype.get_Type, null);
System.Linq.Expressions.LabelTarget.prototype._type = null;
System.Linq.Expressions.LabelTarget.prototype._name = null;

System.Linq.Expressions.LambdaExpression.prototype._ctor = function (delegateType, name, body, tailCall, parameters) {
	System.Linq.Expressions.Expression.prototype._ctor$1.call(this);
	this._name = name;
	this._body = body;
	this._parameters = parameters;
	this._delegateType = delegateType;
	this._tailCall = tailCall;
};
System.Linq.Expressions.LambdaExpression.prototype.get_Type = function () {
	return this._delegateType;
};
System.Linq.Expressions.LambdaExpression.prototype.get_NodeType = function () {
	return System.Linq.Expressions.ExpressionType.Lambda;
};
System.Linq.Expressions.LambdaExpression.prototype.get_Parameters = function () {
	return this._parameters;
};
System.Linq.Expressions.LambdaExpression.prototype.get_Name = function () {
	return this._name;
};
System.Linq.Expressions.LambdaExpression.prototype.get_Body = function () {
	return this._body;
};
System.Linq.Expressions.LambdaExpression.prototype.get_ReturnType = function () {
	return this.Type.GetMethod$5("Invoke").ReturnType;
};
System.Linq.Expressions.LambdaExpression.prototype.get_TailCall = function () {
	return this._tailCall;
};
System.Linq.Expressions.LambdaExpression.prototype.Compile$0 = function () {
	return $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.Compile$0(this, null);
};
System.Linq.Expressions.LambdaExpression.prototype.Compile$1 = function (debugInfoGenerator) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(debugInfoGenerator, "debugInfoGenerator");
	return $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.Compile$0(this, debugInfoGenerator);
};
System.Linq.Expressions.LambdaExpression.prototype.CompileToMethod$0 = function (method) {
	this.CompileToMethodInternal(method, null);
};
System.Linq.Expressions.LambdaExpression.prototype.CompileToMethod$1 = function (method, debugInfoGenerator) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(debugInfoGenerator, "debugInfoGenerator");
	this.CompileToMethodInternal(method, debugInfoGenerator);
};
System.Linq.Expressions.LambdaExpression.prototype.CompileToMethodInternal = function (method, debugInfoGenerator) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(method, "method");
	$asm08.System.Dynamic.Utils.ContractUtils.Requires$1(method.IsStatic, "method");
	if (JSIL.TryCast(method.DeclaringType, System.Reflection.Emit.TypeBuilder) === null) {
		throw $asm08.System.Core.Error.MethodBuilderDoesNotHaveTypeBuilder();
	}
	$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.Compile$1(this, method, debugInfoGenerator);
};
JSIL.OverloadedMethod(System.Linq.Expressions.LambdaExpression.prototype, "Compile", [
		["Compile$0", []], 
		["Compile$1", [System.Runtime.CompilerServices.DebugInfoGenerator]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.LambdaExpression.prototype, "CompileToMethod", [
		["CompileToMethod$0", [System.Reflection.Emit.MethodBuilder]], 
		["CompileToMethod$1", [System.Reflection.Emit.MethodBuilder, System.Runtime.CompilerServices.DebugInfoGenerator]]
	]);
JSIL.MakeProperty(System.Linq.Expressions.LambdaExpression.prototype, "Type", 
	System.Linq.Expressions.LambdaExpression.prototype.get_Type, null);
JSIL.MakeProperty(System.Linq.Expressions.LambdaExpression.prototype, "NodeType", 
	System.Linq.Expressions.LambdaExpression.prototype.get_NodeType, null);
JSIL.MakeProperty(System.Linq.Expressions.LambdaExpression.prototype, "Parameters", 
	System.Linq.Expressions.LambdaExpression.prototype.get_Parameters, null);
JSIL.MakeProperty(System.Linq.Expressions.LambdaExpression.prototype, "Name", 
	System.Linq.Expressions.LambdaExpression.prototype.get_Name, null);
JSIL.MakeProperty(System.Linq.Expressions.LambdaExpression.prototype, "Body", 
	System.Linq.Expressions.LambdaExpression.prototype.get_Body, null);
JSIL.MakeProperty(System.Linq.Expressions.LambdaExpression.prototype, "ReturnType", 
	System.Linq.Expressions.LambdaExpression.prototype.get_ReturnType, null);
JSIL.MakeProperty(System.Linq.Expressions.LambdaExpression.prototype, "TailCall", 
	System.Linq.Expressions.LambdaExpression.prototype.get_TailCall, null);
System.Linq.Expressions.LambdaExpression.prototype._name = null;
System.Linq.Expressions.LambdaExpression.prototype._body = null;
System.Linq.Expressions.LambdaExpression.prototype._parameters = null;
System.Linq.Expressions.LambdaExpression.prototype._delegateType = null;
System.Linq.Expressions.LambdaExpression.prototype._tailCall = false;

System.Linq.Expressions.Expression$b1.prototype._ctor = function (body, name, tailCall, parameters) {
	System.Linq.Expressions.LambdaExpression.prototype._ctor.call(
		this, this.TDelegate, 
		name, 
		body, 
		tailCall, 
		parameters
	);
};
System.Linq.Expressions.Expression$b1.prototype.Compile$0 = function () {
	return JSIL.Cast($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.Compile$0(this, null), this.TDelegate);
};
System.Linq.Expressions.Expression$b1.prototype.Compile$1 = function (debugInfoGenerator) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(debugInfoGenerator, "debugInfoGenerator");
	return JSIL.Cast($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.Compile$0(this, debugInfoGenerator), this.TDelegate);
};
System.Linq.Expressions.Expression$b1.prototype.Update = function (body, parameters) {
	if (!((body !== System.Linq.Expressions.LambdaExpression.prototype.get_Body.call(this)) || (parameters !== JSIL.Cast(System.Linq.Expressions.LambdaExpression.prototype.get_Parameters.call(this), System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.ParameterExpression))))) {
		return this;
	}
	return System.Linq.Expressions.Expression.Lambda$b1$5(this.TDelegate)(body, System.Linq.Expressions.LambdaExpression.prototype.get_Name.call(this), System.Linq.Expressions.LambdaExpression.prototype.get_TailCall.call(this), parameters);
};
System.Linq.Expressions.Expression$b1.prototype.Accept$0 = function (visitor) {
	return visitor.VisitLambda$b1(this.TDelegate)(this);
};
System.Linq.Expressions.Expression$b1.prototype.Accept$1 = function (spiller) {
	return spiller.Rewrite$b1(this.TDelegate)(this);
};
System.Linq.Expressions.Expression$b1.Create = function (body, name, tailCall, parameters) {
	return new (System.Linq.Expressions.Expression$b1.Of(this.TDelegate)) (body, name, tailCall, parameters);
};
JSIL.OverloadedMethod(System.Linq.Expressions.Expression$b1.prototype, "Compile", [
		["Compile$0", []], 
		["Compile$1", [System.Runtime.CompilerServices.DebugInfoGenerator]]
	]);
JSIL.OverloadedMethod(System.Linq.Expressions.Expression$b1.prototype, "Accept", [
		["Accept$0", [System.Linq.Expressions.ExpressionVisitor]], 
		["Accept$1", [System.Linq.Expressions.Compiler.StackSpiller]]
	]);

$asm08.System.Linq.Expressions.ListArgumentProvider.prototype._ctor = function (provider, arg0) {
	System.Object.prototype._ctor.call(this);
	this._provider = provider;
	this._arg0 = arg0;
};
$asm08.System.Linq.Expressions.ListArgumentProvider.prototype.IndexOf = function (item) {
	if (this._arg0 === item) {
		return 0;
	}
__loop0__: 
	for (var i = 1; i < this._provider.IArgumentProvider_ArgumentCount; ++i) {
		if (this._provider.IArgumentProvider_GetArgument(i) === item) {
			return i;
		}
	}
	return -1;
};
$asm08.System.Linq.Expressions.ListArgumentProvider.prototype.Insert = function (index, item) {
	throw $asm08.System.Dynamic.Utils.ContractUtils.Unreachable;
};
$asm08.System.Linq.Expressions.ListArgumentProvider.prototype.RemoveAt = function (index) {
	throw $asm08.System.Dynamic.Utils.ContractUtils.Unreachable;
};
$asm08.System.Linq.Expressions.ListArgumentProvider.prototype.get_Item = function (index) {
	if (index === 0) {
		return this._arg0;
	}
	return this._provider.IArgumentProvider_GetArgument(index);
};
$asm08.System.Linq.Expressions.ListArgumentProvider.prototype.set_Item = function (index, value) {
	throw $asm08.System.Dynamic.Utils.ContractUtils.Unreachable;
};
$asm08.System.Linq.Expressions.ListArgumentProvider.prototype.Add = function (item) {
	throw $asm08.System.Dynamic.Utils.ContractUtils.Unreachable;
};
$asm08.System.Linq.Expressions.ListArgumentProvider.prototype.Clear = function () {
	throw $asm08.System.Dynamic.Utils.ContractUtils.Unreachable;
};
$asm08.System.Linq.Expressions.ListArgumentProvider.prototype.Contains = function (item) {
	return (this.IndexOf(item) !== -1);
};
$asm08.System.Linq.Expressions.ListArgumentProvider.prototype.CopyTo = function (array, arrayIndex) {
	array[arrayIndex++] = this._arg0;
__loop0__: 
	for (var i = 1; i < this._provider.IArgumentProvider_ArgumentCount; ++i) {
		array[arrayIndex++] = this._provider.IArgumentProvider_GetArgument(i);
	}
};
$asm08.System.Linq.Expressions.ListArgumentProvider.prototype.get_Count = function () {
	return this._provider.IArgumentProvider_ArgumentCount;
};
$asm08.System.Linq.Expressions.ListArgumentProvider.prototype.get_IsReadOnly = function () {
	return true;
};
$asm08.System.Linq.Expressions.ListArgumentProvider.prototype.Remove = function (item) {
	throw $asm08.System.Dynamic.Utils.ContractUtils.Unreachable;
};
$asm08.System.Linq.Expressions.ListArgumentProvider.prototype.GetEnumerator = function () {
	var $lGetEnumerator$gd__ = new $asm08.System.Linq.Expressions.ListArgumentProvider.$lGetEnumerator$gd__0(0);
	$lGetEnumerator$gd__.$this = this;
	return $lGetEnumerator$gd__;
};
$asm08.System.Linq.Expressions.ListArgumentProvider.prototype.IEnumerable_GetEnumerator = function () {
	var getEnumerator$gd__ = new $asm08.System.Linq.Expressions.ListArgumentProvider.GetEnumerator$gd__3(0);
	getEnumerator$gd__.$this = this;
	return getEnumerator$gd__;
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.ListArgumentProvider.prototype, "Item", 
	$asm08.System.Linq.Expressions.ListArgumentProvider.prototype.get_Item, $asm08.System.Linq.Expressions.ListArgumentProvider.prototype.set_Item);
JSIL.MakeProperty($asm08.System.Linq.Expressions.ListArgumentProvider.prototype, "Count", 
	$asm08.System.Linq.Expressions.ListArgumentProvider.prototype.get_Count, null);
JSIL.MakeProperty($asm08.System.Linq.Expressions.ListArgumentProvider.prototype, "IsReadOnly", 
	$asm08.System.Linq.Expressions.ListArgumentProvider.prototype.get_IsReadOnly, null);
$asm08.System.Linq.Expressions.ListArgumentProvider.prototype._provider = null;
$asm08.System.Linq.Expressions.ListArgumentProvider.prototype._arg0 = null;

$asm08.System.Linq.Expressions.ListArgumentProvider.$lGetEnumerator$gd__0.prototype.IEnumerator_MoveNext = function () {
	switch (this.$state) {
		case 0: 
			this.$state = -1;
			this.$current = this.$this._arg0;
			this.$state = 1;
			return true;
		case 1: 
			this.$state = -1;
			this.i = 1;
			break;
		case 2: 
			this.$state = -1;
			++this.i;
			break;
		default: 
			return false;
	}
	if (this.i >= this.$this._provider.IArgumentProvider_ArgumentCount) {
		return false;
	}
	this.$current = this.$this._provider.IArgumentProvider_GetArgument(this.i);
	this.$state = 2;
	return true;
};
$asm08.System.Linq.Expressions.ListArgumentProvider.$lGetEnumerator$gd__0.prototype.IEnumerator$b1_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Expressions.ListArgumentProvider.$lGetEnumerator$gd__0.prototype.IEnumerator_Reset = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm08.System.Linq.Expressions.ListArgumentProvider.$lGetEnumerator$gd__0.prototype.IDisposable_Dispose = function () {
};
$asm08.System.Linq.Expressions.ListArgumentProvider.$lGetEnumerator$gd__0.prototype.IEnumerator_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Expressions.ListArgumentProvider.$lGetEnumerator$gd__0.prototype._ctor = function ($l$g1__state) {
	System.Object.prototype._ctor.call(this);
	this.$state = $l$g1__state;
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.ListArgumentProvider.$lGetEnumerator$gd__0.prototype, "IEnumerator$b1_Current", 
	$asm08.System.Linq.Expressions.ListArgumentProvider.$lGetEnumerator$gd__0.prototype.IEnumerator$b1_get_Current, null);
JSIL.MakeProperty($asm08.System.Linq.Expressions.ListArgumentProvider.$lGetEnumerator$gd__0.prototype, "IEnumerator_Current", 
	$asm08.System.Linq.Expressions.ListArgumentProvider.$lGetEnumerator$gd__0.prototype.IEnumerator_get_Current, null);
$asm08.System.Linq.Expressions.ListArgumentProvider.$lGetEnumerator$gd__0.prototype.$current = null;
$asm08.System.Linq.Expressions.ListArgumentProvider.$lGetEnumerator$gd__0.prototype.$state = 0;
$asm08.System.Linq.Expressions.ListArgumentProvider.$lGetEnumerator$gd__0.prototype.$this = null;
$asm08.System.Linq.Expressions.ListArgumentProvider.$lGetEnumerator$gd__0.prototype.i = 0;

$asm08.System.Linq.Expressions.ListArgumentProvider.GetEnumerator$gd__3.prototype.IEnumerator_MoveNext = function () {
	switch (this.$state) {
		case 0: 
			this.$state = -1;
			this.$current = this.$this._arg0;
			this.$state = 1;
			return true;
		case 1: 
			this.$state = -1;
			this.i = 1;
			break;
		case 2: 
			this.$state = -1;
			++this.i;
			break;
		default: 
			return false;
	}
	if (this.i >= this.$this._provider.IArgumentProvider_ArgumentCount) {
		return false;
	}
	this.$current = this.$this._provider.IArgumentProvider_GetArgument(this.i);
	this.$state = 2;
	return true;
};
$asm08.System.Linq.Expressions.ListArgumentProvider.GetEnumerator$gd__3.prototype.IEnumerator$b1_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Expressions.ListArgumentProvider.GetEnumerator$gd__3.prototype.IEnumerator_Reset = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm08.System.Linq.Expressions.ListArgumentProvider.GetEnumerator$gd__3.prototype.IDisposable_Dispose = function () {
};
$asm08.System.Linq.Expressions.ListArgumentProvider.GetEnumerator$gd__3.prototype.IEnumerator_get_Current = function () {
	return this.$current;
};
$asm08.System.Linq.Expressions.ListArgumentProvider.GetEnumerator$gd__3.prototype._ctor = function ($l$g1__state) {
	System.Object.prototype._ctor.call(this);
	this.$state = $l$g1__state;
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.ListArgumentProvider.GetEnumerator$gd__3.prototype, "IEnumerator$b1_Current", 
	$asm08.System.Linq.Expressions.ListArgumentProvider.GetEnumerator$gd__3.prototype.IEnumerator$b1_get_Current, null);
JSIL.MakeProperty($asm08.System.Linq.Expressions.ListArgumentProvider.GetEnumerator$gd__3.prototype, "IEnumerator_Current", 
	$asm08.System.Linq.Expressions.ListArgumentProvider.GetEnumerator$gd__3.prototype.IEnumerator_get_Current, null);
$asm08.System.Linq.Expressions.ListArgumentProvider.GetEnumerator$gd__3.prototype.$current = null;
$asm08.System.Linq.Expressions.ListArgumentProvider.GetEnumerator$gd__3.prototype.$state = 0;
$asm08.System.Linq.Expressions.ListArgumentProvider.GetEnumerator$gd__3.prototype.$this = null;
$asm08.System.Linq.Expressions.ListArgumentProvider.GetEnumerator$gd__3.prototype.i = 0;

System.Linq.Expressions.ListInitExpression.prototype._ctor = function (newExpression, initializers) {
	System.Linq.Expressions.Expression.prototype._ctor$1.call(this);
	this._newExpression = newExpression;
	this._initializers = initializers;
};
System.Linq.Expressions.ListInitExpression.prototype.get_NodeType = function () {
	return System.Linq.Expressions.ExpressionType.ListInit;
};
System.Linq.Expressions.ListInitExpression.prototype.get_Type = function () {
	return this._newExpression.Type;
};
System.Linq.Expressions.ListInitExpression.prototype.get_CanReduce = function () {
	return true;
};
System.Linq.Expressions.ListInitExpression.prototype.get_NewExpression = function () {
	return this._newExpression;
};
System.Linq.Expressions.ListInitExpression.prototype.get_Initializers = function () {
	return this._initializers;
};
System.Linq.Expressions.ListInitExpression.prototype.Accept = function (visitor) {
	return visitor.VisitListInit(this);
};
System.Linq.Expressions.ListInitExpression.prototype.Reduce = function () {
	return System.Linq.Expressions.MemberInitExpression.ReduceListInit(this._newExpression, this._initializers, true);
};
System.Linq.Expressions.ListInitExpression.prototype.Update = function (newExpression, initializers) {
	if (!((newExpression !== this.NewExpression) || (initializers !== JSIL.Cast(this.Initializers, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.ElementInit))))) {
		return this;
	}
	return System.Linq.Expressions.Expression.ListInit$5(newExpression, initializers);
};
JSIL.MakeProperty(System.Linq.Expressions.ListInitExpression.prototype, "NodeType", 
	System.Linq.Expressions.ListInitExpression.prototype.get_NodeType, null);
JSIL.MakeProperty(System.Linq.Expressions.ListInitExpression.prototype, "Type", 
	System.Linq.Expressions.ListInitExpression.prototype.get_Type, null);
JSIL.MakeProperty(System.Linq.Expressions.ListInitExpression.prototype, "CanReduce", 
	System.Linq.Expressions.ListInitExpression.prototype.get_CanReduce, null);
JSIL.MakeProperty(System.Linq.Expressions.ListInitExpression.prototype, "NewExpression", 
	System.Linq.Expressions.ListInitExpression.prototype.get_NewExpression, null);
JSIL.MakeProperty(System.Linq.Expressions.ListInitExpression.prototype, "Initializers", 
	System.Linq.Expressions.ListInitExpression.prototype.get_Initializers, null);
System.Linq.Expressions.ListInitExpression.prototype._newExpression = null;
System.Linq.Expressions.ListInitExpression.prototype._initializers = null;

System.Linq.Expressions.LoopExpression.prototype._ctor = function (body, $break, $continue) {
	System.Linq.Expressions.Expression.prototype._ctor$1.call(this);
	this._body = body;
	this._break = $break;
	this._continue = $continue;
};
System.Linq.Expressions.LoopExpression.prototype.get_Type = function () {
	if (this._break !== null) {
		return this._break.Type;
	}
	return System.Void;
};
System.Linq.Expressions.LoopExpression.prototype.get_NodeType = function () {
	return System.Linq.Expressions.ExpressionType.Loop;
};
System.Linq.Expressions.LoopExpression.prototype.get_Body = function () {
	return this._body;
};
System.Linq.Expressions.LoopExpression.prototype.get_BreakLabel = function () {
	return this._break;
};
System.Linq.Expressions.LoopExpression.prototype.get_ContinueLabel = function () {
	return this._continue;
};
System.Linq.Expressions.LoopExpression.prototype.Accept = function (visitor) {
	return visitor.VisitLoop(this);
};
System.Linq.Expressions.LoopExpression.prototype.Update = function (breakLabel, continueLabel, body) {
	if (!((breakLabel !== this.BreakLabel) || 
			(continueLabel !== this.ContinueLabel) || (body !== this.Body))) {
		return this;
	}
	return System.Linq.Expressions.Expression.Loop$2(body, breakLabel, continueLabel);
};
JSIL.MakeProperty(System.Linq.Expressions.LoopExpression.prototype, "Type", 
	System.Linq.Expressions.LoopExpression.prototype.get_Type, null);
JSIL.MakeProperty(System.Linq.Expressions.LoopExpression.prototype, "NodeType", 
	System.Linq.Expressions.LoopExpression.prototype.get_NodeType, null);
JSIL.MakeProperty(System.Linq.Expressions.LoopExpression.prototype, "Body", 
	System.Linq.Expressions.LoopExpression.prototype.get_Body, null);
JSIL.MakeProperty(System.Linq.Expressions.LoopExpression.prototype, "BreakLabel", 
	System.Linq.Expressions.LoopExpression.prototype.get_BreakLabel, null);
JSIL.MakeProperty(System.Linq.Expressions.LoopExpression.prototype, "ContinueLabel", 
	System.Linq.Expressions.LoopExpression.prototype.get_ContinueLabel, null);
System.Linq.Expressions.LoopExpression.prototype._body = null;
System.Linq.Expressions.LoopExpression.prototype._break = null;
System.Linq.Expressions.LoopExpression.prototype._continue = null;

System.Linq.Expressions.MemberBinding.prototype._ctor = function (type, member) {
	System.Object.prototype._ctor.call(this);
	this._type = type;
	this._member = member;
};
System.Linq.Expressions.MemberBinding.prototype.get_BindingType = function () {
	return this._type;
};
System.Linq.Expressions.MemberBinding.prototype.get_Member = function () {
	return this._member;
};
System.Linq.Expressions.MemberBinding.prototype.toString = function () {
	return $asm08.System.Linq.Expressions.ExpressionStringBuilder.MemberBindingToString(this);
};
JSIL.MakeProperty(System.Linq.Expressions.MemberBinding.prototype, "BindingType", 
	System.Linq.Expressions.MemberBinding.prototype.get_BindingType, null);
JSIL.MakeProperty(System.Linq.Expressions.MemberBinding.prototype, "Member", 
	System.Linq.Expressions.MemberBinding.prototype.get_Member, null);
System.Linq.Expressions.MemberBinding.prototype._type = 0;
System.Linq.Expressions.MemberBinding.prototype._member = null;

System.Linq.Expressions.MemberAssignment.prototype._ctor = function (member, expression) {
	System.Linq.Expressions.MemberBinding.prototype._ctor.call(this, System.Linq.Expressions.MemberBindingType.Assignment, member);
	this._expression = expression;
};
System.Linq.Expressions.MemberAssignment.prototype.get_Expression = function () {
	return this._expression;
};
System.Linq.Expressions.MemberAssignment.prototype.Update = function (expression) {
	if (expression === this.Expression) {
		return this;
	}
	return System.Linq.Expressions.Expression.Bind$0(System.Linq.Expressions.MemberBinding.prototype.get_Member.call(this), expression);
};
JSIL.MakeProperty(System.Linq.Expressions.MemberAssignment.prototype, "Expression", 
	System.Linq.Expressions.MemberAssignment.prototype.get_Expression, null);
System.Linq.Expressions.MemberAssignment.prototype._expression = null;

System.Linq.Expressions.MemberExpression.prototype.get_Member = function () {
	return this.GetMember();
};
System.Linq.Expressions.MemberExpression.prototype.get_Expression = function () {
	return this._expression;
};
System.Linq.Expressions.MemberExpression.prototype._ctor = function (expression) {
	System.Linq.Expressions.Expression.prototype._ctor$1.call(this);
	this._expression = expression;
};
System.Linq.Expressions.MemberExpression.Make = function (expression, member) {
	if (member.MemberType === System.Reflection.MemberTypes.Field) {
		var member2 = JSIL.Cast(member, System.Reflection.FieldInfo);
		return new $asm08.System.Linq.Expressions.FieldExpression(expression, member2);
	}
	var member3 = JSIL.Cast(member, System.Reflection.PropertyInfo);
	return new $asm08.System.Linq.Expressions.PropertyExpression(expression, member3);
};
System.Linq.Expressions.MemberExpression.prototype.get_NodeType = function () {
	return System.Linq.Expressions.ExpressionType.MemberAccess;
};
System.Linq.Expressions.MemberExpression.prototype.GetMember = function () {
	throw $asm08.System.Dynamic.Utils.ContractUtils.Unreachable;
};
System.Linq.Expressions.MemberExpression.prototype.Accept = function (visitor) {
	return visitor.VisitMember(this);
};
System.Linq.Expressions.MemberExpression.prototype.Update = function (expression) {
	if (expression === this.Expression) {
		return this;
	}
	return System.Linq.Expressions.Expression.MakeMemberAccess(expression, this.Member);
};
JSIL.MakeProperty(System.Linq.Expressions.MemberExpression.prototype, "Member", 
	System.Linq.Expressions.MemberExpression.prototype.get_Member, null);
JSIL.MakeProperty(System.Linq.Expressions.MemberExpression.prototype, "Expression", 
	System.Linq.Expressions.MemberExpression.prototype.get_Expression, null);
JSIL.MakeProperty(System.Linq.Expressions.MemberExpression.prototype, "NodeType", 
	System.Linq.Expressions.MemberExpression.prototype.get_NodeType, null);
System.Linq.Expressions.MemberExpression.prototype._expression = null;

$asm08.System.Linq.Expressions.FieldExpression.prototype._ctor = function (expression, member) {
	System.Linq.Expressions.MemberExpression.prototype._ctor.call(this, expression);
	this._field = member;
};
$asm08.System.Linq.Expressions.FieldExpression.prototype.GetMember = function () {
	return this._field;
};
$asm08.System.Linq.Expressions.FieldExpression.prototype.get_Type = function () {
	return this._field.FieldType;
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.FieldExpression.prototype, "Type", 
	$asm08.System.Linq.Expressions.FieldExpression.prototype.get_Type, null);
$asm08.System.Linq.Expressions.FieldExpression.prototype._field = null;

$asm08.System.Linq.Expressions.PropertyExpression.prototype._ctor = function (expression, member) {
	System.Linq.Expressions.MemberExpression.prototype._ctor.call(this, expression);
	this._property = member;
};
$asm08.System.Linq.Expressions.PropertyExpression.prototype.GetMember = function () {
	return this._property;
};
$asm08.System.Linq.Expressions.PropertyExpression.prototype.get_Type = function () {
	return this._property.PropertyType;
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.PropertyExpression.prototype, "Type", 
	$asm08.System.Linq.Expressions.PropertyExpression.prototype.get_Type, null);
$asm08.System.Linq.Expressions.PropertyExpression.prototype._property = null;

System.Linq.Expressions.MemberInitExpression.prototype._ctor = function (newExpression, bindings) {
	System.Linq.Expressions.Expression.prototype._ctor$1.call(this);
	this._newExpression = newExpression;
	this._bindings = bindings;
};
System.Linq.Expressions.MemberInitExpression.prototype.get_Type = function () {
	return this._newExpression.Type;
};
System.Linq.Expressions.MemberInitExpression.prototype.get_CanReduce = function () {
	return true;
};
System.Linq.Expressions.MemberInitExpression.prototype.get_NodeType = function () {
	return System.Linq.Expressions.ExpressionType.MemberInit;
};
System.Linq.Expressions.MemberInitExpression.prototype.get_NewExpression = function () {
	return this._newExpression;
};
System.Linq.Expressions.MemberInitExpression.prototype.get_Bindings = function () {
	return this._bindings;
};
System.Linq.Expressions.MemberInitExpression.prototype.Accept = function (visitor) {
	return visitor.VisitMemberInit(this);
};
System.Linq.Expressions.MemberInitExpression.prototype.Reduce = function () {
	return System.Linq.Expressions.MemberInitExpression.ReduceMemberInit(this._newExpression, this._bindings, true);
};
System.Linq.Expressions.MemberInitExpression.ReduceMemberInit = function (objExpression, bindings, keepOnStack) {
	var parameterExpression = System.Linq.Expressions.Expression.Variable$1(objExpression.Type, null);
	var count = bindings.Count;
	var array = JSIL.Array.New(System.Linq.Expressions.Expression, (count + 2));
	array[0] = System.Linq.Expressions.Expression.Assign(parameterExpression, objExpression);
__loop0__: 
	for (var i = 0; i < count; ++i) {
		array[(i + 1)] = System.Linq.Expressions.MemberInitExpression.ReduceMemberBinding(parameterExpression, bindings.get_Item(i));
	}
	array[(count + 1)] = keepOnStack ? parameterExpression : System.Linq.Expressions.Expression.Empty();
	return System.Linq.Expressions.Expression.Block$5(new ($asm08.System.Runtime.CompilerServices.TrueReadOnlyCollection$b1.Of(System.Linq.Expressions.Expression)) (array));
};
System.Linq.Expressions.MemberInitExpression.ReduceListInit = function (listExpression, initializers, keepOnStack) {
	var parameterExpression = System.Linq.Expressions.Expression.Variable$1(listExpression.Type, null);
	var count = initializers.Count;
	var array = JSIL.Array.New(System.Linq.Expressions.Expression, (count + 2));
	array[0] = System.Linq.Expressions.Expression.Assign(parameterExpression, listExpression);
__loop0__: 
	for (var i = 0; i < count; ++i) {
		var elementInit = initializers.get_Item(i);
		array[(i + 1)] = System.Linq.Expressions.Expression.Call$13(parameterExpression, elementInit.AddMethod, elementInit.Arguments);
	}
	array[(count + 1)] = keepOnStack ? parameterExpression : System.Linq.Expressions.Expression.Empty();
	return System.Linq.Expressions.Expression.Block$5(new ($asm08.System.Runtime.CompilerServices.TrueReadOnlyCollection$b1.Of(System.Linq.Expressions.Expression)) (array));
};
System.Linq.Expressions.MemberInitExpression.ReduceMemberBinding = function (objVar, binding) {
	var memberExpression = System.Linq.Expressions.Expression.MakeMemberAccess(objVar, binding.Member);
	switch (Number(binding.BindingType)) {
		case 0: 
			return System.Linq.Expressions.Expression.Assign(memberExpression, JSIL.Cast(binding, System.Linq.Expressions.MemberAssignment).Expression);
		case 1: 
			return System.Linq.Expressions.MemberInitExpression.ReduceMemberInit(memberExpression, JSIL.Cast(binding, System.Linq.Expressions.MemberMemberBinding).Bindings, false);
		case 2: 
			return System.Linq.Expressions.MemberInitExpression.ReduceListInit(memberExpression, JSIL.Cast(binding, System.Linq.Expressions.MemberListBinding).Initializers, false);
		default: 
			throw $asm08.System.Dynamic.Utils.ContractUtils.Unreachable;
	}
};
System.Linq.Expressions.MemberInitExpression.prototype.Update = function (newExpression, bindings) {
	if (!((newExpression !== this.NewExpression) || (bindings !== JSIL.Cast(this.Bindings, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.MemberBinding))))) {
		return this;
	}
	return System.Linq.Expressions.Expression.MemberInit$1(newExpression, bindings);
};
JSIL.MakeProperty(System.Linq.Expressions.MemberInitExpression.prototype, "Type", 
	System.Linq.Expressions.MemberInitExpression.prototype.get_Type, null);
JSIL.MakeProperty(System.Linq.Expressions.MemberInitExpression.prototype, "CanReduce", 
	System.Linq.Expressions.MemberInitExpression.prototype.get_CanReduce, null);
JSIL.MakeProperty(System.Linq.Expressions.MemberInitExpression.prototype, "NodeType", 
	System.Linq.Expressions.MemberInitExpression.prototype.get_NodeType, null);
JSIL.MakeProperty(System.Linq.Expressions.MemberInitExpression.prototype, "NewExpression", 
	System.Linq.Expressions.MemberInitExpression.prototype.get_NewExpression, null);
JSIL.MakeProperty(System.Linq.Expressions.MemberInitExpression.prototype, "Bindings", 
	System.Linq.Expressions.MemberInitExpression.prototype.get_Bindings, null);
System.Linq.Expressions.MemberInitExpression.prototype._newExpression = null;
System.Linq.Expressions.MemberInitExpression.prototype._bindings = null;

System.Linq.Expressions.MemberListBinding.prototype._ctor = function (member, initializers) {
	System.Linq.Expressions.MemberBinding.prototype._ctor.call(this, System.Linq.Expressions.MemberBindingType.ListBinding, member);
	this._initializers = initializers;
};
System.Linq.Expressions.MemberListBinding.prototype.get_Initializers = function () {
	return this._initializers;
};
System.Linq.Expressions.MemberListBinding.prototype.Update = function (initializers) {
	if (initializers === JSIL.Cast(this.Initializers, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.ElementInit))) {
		return this;
	}
	return System.Linq.Expressions.Expression.ListBind$1(System.Linq.Expressions.MemberBinding.prototype.get_Member.call(this), initializers);
};
JSIL.MakeProperty(System.Linq.Expressions.MemberListBinding.prototype, "Initializers", 
	System.Linq.Expressions.MemberListBinding.prototype.get_Initializers, null);
System.Linq.Expressions.MemberListBinding.prototype._initializers = null;

System.Linq.Expressions.MemberMemberBinding.prototype._ctor = function (member, bindings) {
	System.Linq.Expressions.MemberBinding.prototype._ctor.call(this, System.Linq.Expressions.MemberBindingType.MemberBinding, member);
	this._bindings = bindings;
};
System.Linq.Expressions.MemberMemberBinding.prototype.get_Bindings = function () {
	return this._bindings;
};
System.Linq.Expressions.MemberMemberBinding.prototype.Update = function (bindings) {
	if (bindings === JSIL.Cast(this.Bindings, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.MemberBinding))) {
		return this;
	}
	return System.Linq.Expressions.Expression.MemberBind$1(System.Linq.Expressions.MemberBinding.prototype.get_Member.call(this), bindings);
};
JSIL.MakeProperty(System.Linq.Expressions.MemberMemberBinding.prototype, "Bindings", 
	System.Linq.Expressions.MemberMemberBinding.prototype.get_Bindings, null);
System.Linq.Expressions.MemberMemberBinding.prototype._bindings = null;

System.Linq.Expressions.MethodCallExpression.prototype._ctor = function (method) {
	System.Linq.Expressions.Expression.prototype._ctor$1.call(this);
	this._method = method;
};
System.Linq.Expressions.MethodCallExpression.prototype.GetInstance = function () {
	return null;
};
System.Linq.Expressions.MethodCallExpression.prototype.get_NodeType = function () {
	return System.Linq.Expressions.ExpressionType.Call;
};
System.Linq.Expressions.MethodCallExpression.prototype.get_Type = function () {
	return this._method.ReturnType;
};
System.Linq.Expressions.MethodCallExpression.prototype.get_Method = function () {
	return this._method;
};
System.Linq.Expressions.MethodCallExpression.prototype.get_Object = function () {
	return this.GetInstance();
};
System.Linq.Expressions.MethodCallExpression.prototype.get_Arguments = function () {
	return this.GetOrMakeArguments();
};
System.Linq.Expressions.MethodCallExpression.prototype.Update = function (object, arguments) {
	if (!((object !== this.Object) || (arguments !== this.Arguments))) {
		return this;
	}
	return System.Linq.Expressions.Expression.Call$13(object, this.Method, arguments);
};
System.Linq.Expressions.MethodCallExpression.prototype.GetOrMakeArguments = function () {
	throw $asm08.System.Dynamic.Utils.ContractUtils.Unreachable;
};
System.Linq.Expressions.MethodCallExpression.prototype.Accept = function (visitor) {
	return visitor.VisitMethodCall(this);
};
System.Linq.Expressions.MethodCallExpression.prototype.Rewrite = function (instance, args) {
	throw $asm08.System.Dynamic.Utils.ContractUtils.Unreachable;
};
System.Linq.Expressions.MethodCallExpression.prototype.IArgumentProvider_GetArgument = function (index) {
	throw $asm08.System.Dynamic.Utils.ContractUtils.Unreachable;
};
System.Linq.Expressions.MethodCallExpression.prototype.IArgumentProvider_get_ArgumentCount = function () {
	throw $asm08.System.Dynamic.Utils.ContractUtils.Unreachable;
};
JSIL.MakeProperty(System.Linq.Expressions.MethodCallExpression.prototype, "NodeType", 
	System.Linq.Expressions.MethodCallExpression.prototype.get_NodeType, null);
JSIL.MakeProperty(System.Linq.Expressions.MethodCallExpression.prototype, "Type", 
	System.Linq.Expressions.MethodCallExpression.prototype.get_Type, null);
JSIL.MakeProperty(System.Linq.Expressions.MethodCallExpression.prototype, "Method", 
	System.Linq.Expressions.MethodCallExpression.prototype.get_Method, null);
JSIL.MakeProperty(System.Linq.Expressions.MethodCallExpression.prototype, "Object", 
	System.Linq.Expressions.MethodCallExpression.prototype.get_Object, null);
JSIL.MakeProperty(System.Linq.Expressions.MethodCallExpression.prototype, "Arguments", 
	System.Linq.Expressions.MethodCallExpression.prototype.get_Arguments, null);
JSIL.MakeProperty(System.Linq.Expressions.MethodCallExpression.prototype, "IArgumentProvider_ArgumentCount", 
	System.Linq.Expressions.MethodCallExpression.prototype.IArgumentProvider_get_ArgumentCount, null);
System.Linq.Expressions.MethodCallExpression.prototype._method = null;

$asm08.System.Linq.Expressions.MethodCallExpressionN.prototype._ctor = function (method, args) {
	System.Linq.Expressions.MethodCallExpression.prototype._ctor.call(this, method);
	this._arguments = args;
};
$asm08.System.Linq.Expressions.MethodCallExpressionN.prototype.IArgumentProvider_GetArgument = function (index) {
	return this._arguments.IList$b1_get_Item(index);
};
$asm08.System.Linq.Expressions.MethodCallExpressionN.prototype.IArgumentProvider_get_ArgumentCount = function () {
	return this._arguments.ICollection$b1_Count;
};
$asm08.System.Linq.Expressions.MethodCallExpressionN.prototype.GetOrMakeArguments = function () {
	return System.Linq.Expressions.Expression.ReturnReadOnly$b1(System.Linq.Expressions.Expression)(/* ref */ new JSIL.MemberReference(this, "_arguments"));
};
$asm08.System.Linq.Expressions.MethodCallExpressionN.prototype.Rewrite = function (instance, args) {
	return System.Linq.Expressions.Expression.Call$6(System.Linq.Expressions.MethodCallExpression.prototype.get_Method.call(this), JSIL.Coalesce(args, this._arguments));
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.MethodCallExpressionN.prototype, "IArgumentProvider_ArgumentCount", 
	$asm08.System.Linq.Expressions.MethodCallExpressionN.prototype.IArgumentProvider_get_ArgumentCount, null);
$asm08.System.Linq.Expressions.MethodCallExpressionN.prototype._arguments = null;

$asm08.System.Linq.Expressions.InstanceMethodCallExpressionN.prototype._ctor = function (method, instance, args) {
	System.Linq.Expressions.MethodCallExpression.prototype._ctor.call(this, method);
	this._instance = instance;
	this._arguments = args;
};
$asm08.System.Linq.Expressions.InstanceMethodCallExpressionN.prototype.IArgumentProvider_GetArgument = function (index) {
	return this._arguments.IList$b1_get_Item(index);
};
$asm08.System.Linq.Expressions.InstanceMethodCallExpressionN.prototype.IArgumentProvider_get_ArgumentCount = function () {
	return this._arguments.ICollection$b1_Count;
};
$asm08.System.Linq.Expressions.InstanceMethodCallExpressionN.prototype.GetInstance = function () {
	return this._instance;
};
$asm08.System.Linq.Expressions.InstanceMethodCallExpressionN.prototype.GetOrMakeArguments = function () {
	return System.Linq.Expressions.Expression.ReturnReadOnly$b1(System.Linq.Expressions.Expression)(/* ref */ new JSIL.MemberReference(this, "_arguments"));
};
$asm08.System.Linq.Expressions.InstanceMethodCallExpressionN.prototype.Rewrite = function (instance, args) {
	return System.Linq.Expressions.Expression.Call$13(instance, System.Linq.Expressions.MethodCallExpression.prototype.get_Method.call(this), JSIL.Coalesce(args, this._arguments));
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.InstanceMethodCallExpressionN.prototype, "IArgumentProvider_ArgumentCount", 
	$asm08.System.Linq.Expressions.InstanceMethodCallExpressionN.prototype.IArgumentProvider_get_ArgumentCount, null);
$asm08.System.Linq.Expressions.InstanceMethodCallExpressionN.prototype._arguments = null;
$asm08.System.Linq.Expressions.InstanceMethodCallExpressionN.prototype._instance = null;

$asm08.System.Linq.Expressions.MethodCallExpression1.prototype._ctor = function (method, arg0) {
	System.Linq.Expressions.MethodCallExpression.prototype._ctor.call(this, method);
	this._arg0 = arg0;
};
$asm08.System.Linq.Expressions.MethodCallExpression1.prototype.IArgumentProvider_GetArgument = function (index) {
	if (index === 0) {
		return System.Linq.Expressions.Expression.ReturnObject$b1(System.Linq.Expressions.Expression)(this._arg0);
	}
	throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
};
$asm08.System.Linq.Expressions.MethodCallExpression1.prototype.IArgumentProvider_get_ArgumentCount = function () {
	return 1;
};
$asm08.System.Linq.Expressions.MethodCallExpression1.prototype.GetOrMakeArguments = function () {
	return System.Linq.Expressions.Expression.ReturnReadOnly(this, /* ref */ new JSIL.MemberReference(this, "_arg0"));
};
$asm08.System.Linq.Expressions.MethodCallExpression1.prototype.Rewrite = function (instance, args) {
	if (args !== null) {
		return System.Linq.Expressions.Expression.Call$0(System.Linq.Expressions.MethodCallExpression.prototype.get_Method.call(this), args.IList$b1_get_Item(0));
	}
	return System.Linq.Expressions.Expression.Call$0(System.Linq.Expressions.MethodCallExpression.prototype.get_Method.call(this), System.Linq.Expressions.Expression.ReturnObject$b1(System.Linq.Expressions.Expression)(this._arg0));
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.MethodCallExpression1.prototype, "IArgumentProvider_ArgumentCount", 
	$asm08.System.Linq.Expressions.MethodCallExpression1.prototype.IArgumentProvider_get_ArgumentCount, null);
$asm08.System.Linq.Expressions.MethodCallExpression1.prototype._arg0 = null;

$asm08.System.Linq.Expressions.MethodCallExpression2.prototype._ctor = function (method, arg0, arg1) {
	System.Linq.Expressions.MethodCallExpression.prototype._ctor.call(this, method);
	this._arg0 = arg0;
	this._arg1 = arg1;
};
$asm08.System.Linq.Expressions.MethodCallExpression2.prototype.IArgumentProvider_GetArgument = function (index) {
	switch (index) {
		case 0: 
			return System.Linq.Expressions.Expression.ReturnObject$b1(System.Linq.Expressions.Expression)(this._arg0);
		case 1: 
			return this._arg1;
		default: 
			throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
	}
};
$asm08.System.Linq.Expressions.MethodCallExpression2.prototype.IArgumentProvider_get_ArgumentCount = function () {
	return 2;
};
$asm08.System.Linq.Expressions.MethodCallExpression2.prototype.GetOrMakeArguments = function () {
	return System.Linq.Expressions.Expression.ReturnReadOnly(this, /* ref */ new JSIL.MemberReference(this, "_arg0"));
};
$asm08.System.Linq.Expressions.MethodCallExpression2.prototype.Rewrite = function (instance, args) {
	if (args !== null) {
		return System.Linq.Expressions.Expression.Call$1(System.Linq.Expressions.MethodCallExpression.prototype.get_Method.call(this), args.IList$b1_get_Item(0), args.IList$b1_get_Item(1));
	}
	return System.Linq.Expressions.Expression.Call$1(System.Linq.Expressions.MethodCallExpression.prototype.get_Method.call(this), System.Linq.Expressions.Expression.ReturnObject$b1(System.Linq.Expressions.Expression)(this._arg0), this._arg1);
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.MethodCallExpression2.prototype, "IArgumentProvider_ArgumentCount", 
	$asm08.System.Linq.Expressions.MethodCallExpression2.prototype.IArgumentProvider_get_ArgumentCount, null);
$asm08.System.Linq.Expressions.MethodCallExpression2.prototype._arg0 = null;
$asm08.System.Linq.Expressions.MethodCallExpression2.prototype._arg1 = null;

$asm08.System.Linq.Expressions.MethodCallExpression3.prototype._ctor = function (method, arg0, arg1, arg2) {
	System.Linq.Expressions.MethodCallExpression.prototype._ctor.call(this, method);
	this._arg0 = arg0;
	this._arg1 = arg1;
	this._arg2 = arg2;
};
$asm08.System.Linq.Expressions.MethodCallExpression3.prototype.IArgumentProvider_GetArgument = function (index) {
	switch (index) {
		case 0: 
			return System.Linq.Expressions.Expression.ReturnObject$b1(System.Linq.Expressions.Expression)(this._arg0);
		case 1: 
			return this._arg1;
		case 2: 
			return this._arg2;
		default: 
			throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
	}
};
$asm08.System.Linq.Expressions.MethodCallExpression3.prototype.IArgumentProvider_get_ArgumentCount = function () {
	return 3;
};
$asm08.System.Linq.Expressions.MethodCallExpression3.prototype.GetOrMakeArguments = function () {
	return System.Linq.Expressions.Expression.ReturnReadOnly(this, /* ref */ new JSIL.MemberReference(this, "_arg0"));
};
$asm08.System.Linq.Expressions.MethodCallExpression3.prototype.Rewrite = function (instance, args) {
	if (args !== null) {
		return System.Linq.Expressions.Expression.Call$2(System.Linq.Expressions.MethodCallExpression.prototype.get_Method.call(this), args.IList$b1_get_Item(0), args.IList$b1_get_Item(1), args.IList$b1_get_Item(2));
	}
	return System.Linq.Expressions.Expression.Call$2(System.Linq.Expressions.MethodCallExpression.prototype.get_Method.call(this), System.Linq.Expressions.Expression.ReturnObject$b1(System.Linq.Expressions.Expression)(this._arg0), this._arg1, this._arg2);
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.MethodCallExpression3.prototype, "IArgumentProvider_ArgumentCount", 
	$asm08.System.Linq.Expressions.MethodCallExpression3.prototype.IArgumentProvider_get_ArgumentCount, null);
$asm08.System.Linq.Expressions.MethodCallExpression3.prototype._arg0 = null;
$asm08.System.Linq.Expressions.MethodCallExpression3.prototype._arg1 = null;
$asm08.System.Linq.Expressions.MethodCallExpression3.prototype._arg2 = null;

$asm08.System.Linq.Expressions.MethodCallExpression4.prototype._ctor = function (method, arg0, arg1, arg2, arg3) {
	System.Linq.Expressions.MethodCallExpression.prototype._ctor.call(this, method);
	this._arg0 = arg0;
	this._arg1 = arg1;
	this._arg2 = arg2;
	this._arg3 = arg3;
};
$asm08.System.Linq.Expressions.MethodCallExpression4.prototype.IArgumentProvider_GetArgument = function (index) {
	switch (index) {
		case 0: 
			return System.Linq.Expressions.Expression.ReturnObject$b1(System.Linq.Expressions.Expression)(this._arg0);
		case 1: 
			return this._arg1;
		case 2: 
			return this._arg2;
		case 3: 
			return this._arg3;
		default: 
			throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
	}
};
$asm08.System.Linq.Expressions.MethodCallExpression4.prototype.IArgumentProvider_get_ArgumentCount = function () {
	return 4;
};
$asm08.System.Linq.Expressions.MethodCallExpression4.prototype.GetOrMakeArguments = function () {
	return System.Linq.Expressions.Expression.ReturnReadOnly(this, /* ref */ new JSIL.MemberReference(this, "_arg0"));
};
$asm08.System.Linq.Expressions.MethodCallExpression4.prototype.Rewrite = function (instance, args) {
	if (args !== null) {
		return System.Linq.Expressions.Expression.Call$3(
			System.Linq.Expressions.MethodCallExpression.prototype.get_Method.call(this), 
			args.IList$b1_get_Item(0), 
			args.IList$b1_get_Item(1), 
			args.IList$b1_get_Item(2), 
			args.IList$b1_get_Item(3)
		);
	}
	return System.Linq.Expressions.Expression.Call$3(
		System.Linq.Expressions.MethodCallExpression.prototype.get_Method.call(this), 
		System.Linq.Expressions.Expression.ReturnObject$b1(System.Linq.Expressions.Expression)(this._arg0), 
		this._arg1, 
		this._arg2, 
		this._arg3
	);
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.MethodCallExpression4.prototype, "IArgumentProvider_ArgumentCount", 
	$asm08.System.Linq.Expressions.MethodCallExpression4.prototype.IArgumentProvider_get_ArgumentCount, null);
$asm08.System.Linq.Expressions.MethodCallExpression4.prototype._arg0 = null;
$asm08.System.Linq.Expressions.MethodCallExpression4.prototype._arg1 = null;
$asm08.System.Linq.Expressions.MethodCallExpression4.prototype._arg2 = null;
$asm08.System.Linq.Expressions.MethodCallExpression4.prototype._arg3 = null;

$asm08.System.Linq.Expressions.MethodCallExpression5.prototype._ctor = function (method, arg0, arg1, arg2, arg3, arg4) {
	System.Linq.Expressions.MethodCallExpression.prototype._ctor.call(this, method);
	this._arg0 = arg0;
	this._arg1 = arg1;
	this._arg2 = arg2;
	this._arg3 = arg3;
	this._arg4 = arg4;
};
$asm08.System.Linq.Expressions.MethodCallExpression5.prototype.IArgumentProvider_GetArgument = function (index) {
	switch (index) {
		case 0: 
			return System.Linq.Expressions.Expression.ReturnObject$b1(System.Linq.Expressions.Expression)(this._arg0);
		case 1: 
			return this._arg1;
		case 2: 
			return this._arg2;
		case 3: 
			return this._arg3;
		case 4: 
			return this._arg4;
		default: 
			throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
	}
};
$asm08.System.Linq.Expressions.MethodCallExpression5.prototype.IArgumentProvider_get_ArgumentCount = function () {
	return 5;
};
$asm08.System.Linq.Expressions.MethodCallExpression5.prototype.GetOrMakeArguments = function () {
	return System.Linq.Expressions.Expression.ReturnReadOnly(this, /* ref */ new JSIL.MemberReference(this, "_arg0"));
};
$asm08.System.Linq.Expressions.MethodCallExpression5.prototype.Rewrite = function (instance, args) {
	if (args !== null) {
		return System.Linq.Expressions.Expression.Call$4(
			System.Linq.Expressions.MethodCallExpression.prototype.get_Method.call(this), 
			args.IList$b1_get_Item(0), 
			args.IList$b1_get_Item(1), 
			args.IList$b1_get_Item(2), 
			args.IList$b1_get_Item(3), 
			args.IList$b1_get_Item(4)
		);
	}
	return System.Linq.Expressions.Expression.Call$4(
		System.Linq.Expressions.MethodCallExpression.prototype.get_Method.call(this), 
		System.Linq.Expressions.Expression.ReturnObject$b1(System.Linq.Expressions.Expression)(this._arg0), 
		this._arg1, 
		this._arg2, 
		this._arg3, 
		this._arg4
	);
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.MethodCallExpression5.prototype, "IArgumentProvider_ArgumentCount", 
	$asm08.System.Linq.Expressions.MethodCallExpression5.prototype.IArgumentProvider_get_ArgumentCount, null);
$asm08.System.Linq.Expressions.MethodCallExpression5.prototype._arg0 = null;
$asm08.System.Linq.Expressions.MethodCallExpression5.prototype._arg1 = null;
$asm08.System.Linq.Expressions.MethodCallExpression5.prototype._arg2 = null;
$asm08.System.Linq.Expressions.MethodCallExpression5.prototype._arg3 = null;
$asm08.System.Linq.Expressions.MethodCallExpression5.prototype._arg4 = null;

$asm08.System.Linq.Expressions.InstanceMethodCallExpression2.prototype._ctor = function (method, instance, arg0, arg1) {
	System.Linq.Expressions.MethodCallExpression.prototype._ctor.call(this, method);
	this._instance = instance;
	this._arg0 = arg0;
	this._arg1 = arg1;
};
$asm08.System.Linq.Expressions.InstanceMethodCallExpression2.prototype.IArgumentProvider_GetArgument = function (index) {
	switch (index) {
		case 0: 
			return System.Linq.Expressions.Expression.ReturnObject$b1(System.Linq.Expressions.Expression)(this._arg0);
		case 1: 
			return this._arg1;
		default: 
			throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
	}
};
$asm08.System.Linq.Expressions.InstanceMethodCallExpression2.prototype.IArgumentProvider_get_ArgumentCount = function () {
	return 2;
};
$asm08.System.Linq.Expressions.InstanceMethodCallExpression2.prototype.GetInstance = function () {
	return this._instance;
};
$asm08.System.Linq.Expressions.InstanceMethodCallExpression2.prototype.GetOrMakeArguments = function () {
	return System.Linq.Expressions.Expression.ReturnReadOnly(this, /* ref */ new JSIL.MemberReference(this, "_arg0"));
};
$asm08.System.Linq.Expressions.InstanceMethodCallExpression2.prototype.Rewrite = function (instance, args) {
	if (args !== null) {
		return System.Linq.Expressions.Expression.Call$9(instance, System.Linq.Expressions.MethodCallExpression.prototype.get_Method.call(this), args.IList$b1_get_Item(0), args.IList$b1_get_Item(1));
	}
	return System.Linq.Expressions.Expression.Call$9(instance, System.Linq.Expressions.MethodCallExpression.prototype.get_Method.call(this), System.Linq.Expressions.Expression.ReturnObject$b1(System.Linq.Expressions.Expression)(this._arg0), this._arg1);
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.InstanceMethodCallExpression2.prototype, "IArgumentProvider_ArgumentCount", 
	$asm08.System.Linq.Expressions.InstanceMethodCallExpression2.prototype.IArgumentProvider_get_ArgumentCount, null);
$asm08.System.Linq.Expressions.InstanceMethodCallExpression2.prototype._instance = null;
$asm08.System.Linq.Expressions.InstanceMethodCallExpression2.prototype._arg0 = null;
$asm08.System.Linq.Expressions.InstanceMethodCallExpression2.prototype._arg1 = null;

$asm08.System.Linq.Expressions.InstanceMethodCallExpression3.prototype._ctor = function (method, instance, arg0, arg1, arg2) {
	System.Linq.Expressions.MethodCallExpression.prototype._ctor.call(this, method);
	this._instance = instance;
	this._arg0 = arg0;
	this._arg1 = arg1;
	this._arg2 = arg2;
};
$asm08.System.Linq.Expressions.InstanceMethodCallExpression3.prototype.IArgumentProvider_GetArgument = function (index) {
	switch (index) {
		case 0: 
			return System.Linq.Expressions.Expression.ReturnObject$b1(System.Linq.Expressions.Expression)(this._arg0);
		case 1: 
			return this._arg1;
		case 2: 
			return this._arg2;
		default: 
			throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
	}
};
$asm08.System.Linq.Expressions.InstanceMethodCallExpression3.prototype.IArgumentProvider_get_ArgumentCount = function () {
	return 3;
};
$asm08.System.Linq.Expressions.InstanceMethodCallExpression3.prototype.GetInstance = function () {
	return this._instance;
};
$asm08.System.Linq.Expressions.InstanceMethodCallExpression3.prototype.GetOrMakeArguments = function () {
	return System.Linq.Expressions.Expression.ReturnReadOnly(this, /* ref */ new JSIL.MemberReference(this, "_arg0"));
};
$asm08.System.Linq.Expressions.InstanceMethodCallExpression3.prototype.Rewrite = function (instance, args) {
	if (args !== null) {
		return System.Linq.Expressions.Expression.Call$10(
			instance, 
			System.Linq.Expressions.MethodCallExpression.prototype.get_Method.call(this), 
			args.IList$b1_get_Item(0), 
			args.IList$b1_get_Item(1), 
			args.IList$b1_get_Item(2)
		);
	}
	return System.Linq.Expressions.Expression.Call$10(
		instance, 
		System.Linq.Expressions.MethodCallExpression.prototype.get_Method.call(this), 
		System.Linq.Expressions.Expression.ReturnObject$b1(System.Linq.Expressions.Expression)(this._arg0), 
		this._arg1, 
		this._arg2
	);
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.InstanceMethodCallExpression3.prototype, "IArgumentProvider_ArgumentCount", 
	$asm08.System.Linq.Expressions.InstanceMethodCallExpression3.prototype.IArgumentProvider_get_ArgumentCount, null);
$asm08.System.Linq.Expressions.InstanceMethodCallExpression3.prototype._instance = null;
$asm08.System.Linq.Expressions.InstanceMethodCallExpression3.prototype._arg0 = null;
$asm08.System.Linq.Expressions.InstanceMethodCallExpression3.prototype._arg1 = null;
$asm08.System.Linq.Expressions.InstanceMethodCallExpression3.prototype._arg2 = null;

System.Linq.Expressions.NewArrayExpression.prototype._ctor = function (type, expressions) {
	System.Linq.Expressions.Expression.prototype._ctor$1.call(this);
	this._expressions = expressions;
	this._type = type;
};
System.Linq.Expressions.NewArrayExpression.Make = function (nodeType, type, expressions) {
	if (nodeType === System.Linq.Expressions.ExpressionType.NewArrayInit) {
		return new $asm08.System.Linq.Expressions.NewArrayInitExpression(type, expressions);
	}
	return new $asm08.System.Linq.Expressions.NewArrayBoundsExpression(type, expressions);
};
System.Linq.Expressions.NewArrayExpression.prototype.get_Type = function () {
	return this._type;
};
System.Linq.Expressions.NewArrayExpression.prototype.get_Expressions = function () {
	return this._expressions;
};
System.Linq.Expressions.NewArrayExpression.prototype.Accept = function (visitor) {
	return visitor.VisitNewArray(this);
};
System.Linq.Expressions.NewArrayExpression.prototype.Update = function (expressions) {
	if (expressions === this.Expressions) {
		return this;
	}
	if (this.NodeType === System.Linq.Expressions.ExpressionType.NewArrayInit) {
		return System.Linq.Expressions.Expression.NewArrayInit$1(this.Type.GetElementType(), expressions);
	}
	return System.Linq.Expressions.Expression.NewArrayBounds$1(this.Type.GetElementType(), expressions);
};
JSIL.MakeProperty(System.Linq.Expressions.NewArrayExpression.prototype, "Type", 
	System.Linq.Expressions.NewArrayExpression.prototype.get_Type, null);
JSIL.MakeProperty(System.Linq.Expressions.NewArrayExpression.prototype, "Expressions", 
	System.Linq.Expressions.NewArrayExpression.prototype.get_Expressions, null);
System.Linq.Expressions.NewArrayExpression.prototype._expressions = null;
System.Linq.Expressions.NewArrayExpression.prototype._type = null;

$asm08.System.Linq.Expressions.NewArrayInitExpression.prototype._ctor = function (type, expressions) {
	System.Linq.Expressions.NewArrayExpression.prototype._ctor.call(this, type, expressions);
};
$asm08.System.Linq.Expressions.NewArrayInitExpression.prototype.get_NodeType = function () {
	return System.Linq.Expressions.ExpressionType.NewArrayInit;
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.NewArrayInitExpression.prototype, "NodeType", 
	$asm08.System.Linq.Expressions.NewArrayInitExpression.prototype.get_NodeType, null);

$asm08.System.Linq.Expressions.NewArrayBoundsExpression.prototype._ctor = function (type, expressions) {
	System.Linq.Expressions.NewArrayExpression.prototype._ctor.call(this, type, expressions);
};
$asm08.System.Linq.Expressions.NewArrayBoundsExpression.prototype.get_NodeType = function () {
	return System.Linq.Expressions.ExpressionType.NewArrayBounds;
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.NewArrayBoundsExpression.prototype, "NodeType", 
	$asm08.System.Linq.Expressions.NewArrayBoundsExpression.prototype.get_NodeType, null);

System.Linq.Expressions.NewExpression.prototype._ctor = function (constructor, arguments, members) {
	System.Linq.Expressions.Expression.prototype._ctor$1.call(this);
	this._constructor = constructor;
	this._arguments = arguments;
	this._members = members;
};
System.Linq.Expressions.NewExpression.prototype.get_Type = function () {
	return this._constructor.DeclaringType;
};
System.Linq.Expressions.NewExpression.prototype.get_NodeType = function () {
	return System.Linq.Expressions.ExpressionType.New;
};
System.Linq.Expressions.NewExpression.prototype.get_Constructor = function () {
	return this._constructor;
};
System.Linq.Expressions.NewExpression.prototype.get_Arguments = function () {
	return System.Linq.Expressions.Expression.ReturnReadOnly$b1(System.Linq.Expressions.Expression)(/* ref */ new JSIL.MemberReference(this, "_arguments"));
};
System.Linq.Expressions.NewExpression.prototype.IArgumentProvider_GetArgument = function (index) {
	return this._arguments.IList$b1_get_Item(index);
};
System.Linq.Expressions.NewExpression.prototype.IArgumentProvider_get_ArgumentCount = function () {
	return this._arguments.ICollection$b1_Count;
};
System.Linq.Expressions.NewExpression.prototype.get_Members = function () {
	return this._members;
};
System.Linq.Expressions.NewExpression.prototype.Accept = function (visitor) {
	return visitor.VisitNew(this);
};
System.Linq.Expressions.NewExpression.prototype.Update = function (arguments) {
	if (arguments === this.Arguments) {
		return this;
	}
	if (this.Members !== null) {
		return System.Linq.Expressions.Expression.New$3(this.Constructor, arguments, JSIL.Cast(this.Members, System.Collections.Generic.IEnumerable$b1.Of(System.Reflection.MemberInfo)));
	}
	return System.Linq.Expressions.Expression.New$2(this.Constructor, arguments);
};
JSIL.MakeProperty(System.Linq.Expressions.NewExpression.prototype, "Type", 
	System.Linq.Expressions.NewExpression.prototype.get_Type, null);
JSIL.MakeProperty(System.Linq.Expressions.NewExpression.prototype, "NodeType", 
	System.Linq.Expressions.NewExpression.prototype.get_NodeType, null);
JSIL.MakeProperty(System.Linq.Expressions.NewExpression.prototype, "Constructor", 
	System.Linq.Expressions.NewExpression.prototype.get_Constructor, null);
JSIL.MakeProperty(System.Linq.Expressions.NewExpression.prototype, "Arguments", 
	System.Linq.Expressions.NewExpression.prototype.get_Arguments, null);
JSIL.MakeProperty(System.Linq.Expressions.NewExpression.prototype, "IArgumentProvider_ArgumentCount", 
	System.Linq.Expressions.NewExpression.prototype.IArgumentProvider_get_ArgumentCount, null);
JSIL.MakeProperty(System.Linq.Expressions.NewExpression.prototype, "Members", 
	System.Linq.Expressions.NewExpression.prototype.get_Members, null);
System.Linq.Expressions.NewExpression.prototype._constructor = null;
System.Linq.Expressions.NewExpression.prototype._arguments = null;
System.Linq.Expressions.NewExpression.prototype._members = null;

$asm08.System.Linq.Expressions.NewValueTypeExpression.prototype._ctor = function (type, arguments, members) {
	System.Linq.Expressions.NewExpression.prototype._ctor.call(this, null, arguments, members);
	this._valueType = type;
};
$asm08.System.Linq.Expressions.NewValueTypeExpression.prototype.get_Type = function () {
	return this._valueType;
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.NewValueTypeExpression.prototype, "Type", 
	$asm08.System.Linq.Expressions.NewValueTypeExpression.prototype.get_Type, null);
$asm08.System.Linq.Expressions.NewValueTypeExpression.prototype._valueType = null;

System.Linq.Expressions.ParameterExpression.prototype._ctor = function (name) {
	System.Linq.Expressions.Expression.prototype._ctor$1.call(this);
	this._name = name;
};
System.Linq.Expressions.ParameterExpression.Make = function (type, name, isByRef) {
	if (isByRef) {
		return new $asm08.System.Linq.Expressions.ByRefParameterExpression(type, name);
	}
	if (!type.IsEnum) {
		switch (Number(System.Type.GetTypeCode(type))) {
			case 1: 
				if (type === System.Object) {
					return new System.Linq.Expressions.ParameterExpression(name);
				}
				if (type === System.Exception) {
					return new ($asm08.System.Linq.Expressions.PrimitiveParameterExpression$b1.Of(System.Exception)) (name);
				}
				if (type === System.Array.Of(System.Object)) {
					return new ($asm08.System.Linq.Expressions.PrimitiveParameterExpression$b1.Of(System.Array.Of(System.Object))) (name);
				}
				break;
			case 2: 
				return new ($asm08.System.Linq.Expressions.PrimitiveParameterExpression$b1.Of(System.DBNull)) (name);
			case 3: 
				return new ($asm08.System.Linq.Expressions.PrimitiveParameterExpression$b1.Of(System.Boolean)) (name);
			case 4: 
				return new ($asm08.System.Linq.Expressions.PrimitiveParameterExpression$b1.Of(System.Char)) (name);
			case 5: 
				return new ($asm08.System.Linq.Expressions.PrimitiveParameterExpression$b1.Of(System.SByte)) (name);
			case 6: 
				return new ($asm08.System.Linq.Expressions.PrimitiveParameterExpression$b1.Of(System.Byte)) (name);
			case 7: 
				return new ($asm08.System.Linq.Expressions.PrimitiveParameterExpression$b1.Of(System.Int16)) (name);
			case 8: 
				return new ($asm08.System.Linq.Expressions.PrimitiveParameterExpression$b1.Of(System.UInt16)) (name);
			case 9: 
				return new ($asm08.System.Linq.Expressions.PrimitiveParameterExpression$b1.Of(System.Int32)) (name);
			case 10: 
				return new ($asm08.System.Linq.Expressions.PrimitiveParameterExpression$b1.Of(System.UInt32)) (name);
			case 11: 
				return new ($asm08.System.Linq.Expressions.PrimitiveParameterExpression$b1.Of(System.Int64)) (name);
			case 12: 
				return new ($asm08.System.Linq.Expressions.PrimitiveParameterExpression$b1.Of(System.UInt64)) (name);
			case 13: 
				return new ($asm08.System.Linq.Expressions.PrimitiveParameterExpression$b1.Of(System.Single)) (name);
			case 14: 
				return new ($asm08.System.Linq.Expressions.PrimitiveParameterExpression$b1.Of(System.Double)) (name);
			case 15: 
				return new ($asm08.System.Linq.Expressions.PrimitiveParameterExpression$b1.Of(System.Decimal)) (name);
			case 16: 
				return new ($asm08.System.Linq.Expressions.PrimitiveParameterExpression$b1.Of(System.DateTime)) (name);
			case 18: 
				return new ($asm08.System.Linq.Expressions.PrimitiveParameterExpression$b1.Of(System.String)) (name);
		}
	}
	return new $asm08.System.Linq.Expressions.TypedParameterExpression(type, name);
};
System.Linq.Expressions.ParameterExpression.prototype.get_Type = function () {
	return System.Object;
};
System.Linq.Expressions.ParameterExpression.prototype.get_NodeType = function () {
	return System.Linq.Expressions.ExpressionType.Parameter;
};
System.Linq.Expressions.ParameterExpression.prototype.get_Name = function () {
	return this._name;
};
System.Linq.Expressions.ParameterExpression.prototype.get_IsByRef = function () {
	return this.GetIsByRef();
};
System.Linq.Expressions.ParameterExpression.prototype.GetIsByRef = function () {
	return false;
};
System.Linq.Expressions.ParameterExpression.prototype.Accept = function (visitor) {
	return visitor.VisitParameter(this);
};
JSIL.MakeProperty(System.Linq.Expressions.ParameterExpression.prototype, "Type", 
	System.Linq.Expressions.ParameterExpression.prototype.get_Type, null);
JSIL.MakeProperty(System.Linq.Expressions.ParameterExpression.prototype, "NodeType", 
	System.Linq.Expressions.ParameterExpression.prototype.get_NodeType, null);
JSIL.MakeProperty(System.Linq.Expressions.ParameterExpression.prototype, "Name", 
	System.Linq.Expressions.ParameterExpression.prototype.get_Name, null);
JSIL.MakeProperty(System.Linq.Expressions.ParameterExpression.prototype, "IsByRef", 
	System.Linq.Expressions.ParameterExpression.prototype.get_IsByRef, null);
System.Linq.Expressions.ParameterExpression.prototype._name = null;

$asm08.System.Linq.Expressions.TypedParameterExpression.prototype._ctor = function (type, name) {
	System.Linq.Expressions.ParameterExpression.prototype._ctor.call(this, name);
	this._paramType = type;
};
$asm08.System.Linq.Expressions.TypedParameterExpression.prototype.get_Type = function () {
	return this._paramType;
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.TypedParameterExpression.prototype, "Type", 
	$asm08.System.Linq.Expressions.TypedParameterExpression.prototype.get_Type, null);
$asm08.System.Linq.Expressions.TypedParameterExpression.prototype._paramType = null;

$asm08.System.Linq.Expressions.ByRefParameterExpression.prototype._ctor = function (type, name) {
	$asm08.System.Linq.Expressions.TypedParameterExpression.prototype._ctor.call(this, type, name);
};
$asm08.System.Linq.Expressions.ByRefParameterExpression.prototype.GetIsByRef = function () {
	return true;
};

$asm08.System.Linq.Expressions.PrimitiveParameterExpression$b1.prototype._ctor = function (name) {
	System.Linq.Expressions.ParameterExpression.prototype._ctor.call(this, name);
};
$asm08.System.Linq.Expressions.PrimitiveParameterExpression$b1.prototype.get_Type = function () {
	return this.T;
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.PrimitiveParameterExpression$b1.prototype, "Type", 
	$asm08.System.Linq.Expressions.PrimitiveParameterExpression$b1.prototype.get_Type, null);

System.Linq.Expressions.RuntimeVariablesExpression.prototype._ctor = function (variables) {
	System.Linq.Expressions.Expression.prototype._ctor$1.call(this);
	this._variables = variables;
};
System.Linq.Expressions.RuntimeVariablesExpression.prototype.get_Type = function () {
	return System.Runtime.CompilerServices.IRuntimeVariables;
};
System.Linq.Expressions.RuntimeVariablesExpression.prototype.get_NodeType = function () {
	return System.Linq.Expressions.ExpressionType.RuntimeVariables;
};
System.Linq.Expressions.RuntimeVariablesExpression.prototype.get_Variables = function () {
	return this._variables;
};
System.Linq.Expressions.RuntimeVariablesExpression.prototype.Accept = function (visitor) {
	return visitor.VisitRuntimeVariables(this);
};
System.Linq.Expressions.RuntimeVariablesExpression.prototype.Update = function (variables) {
	if (variables === JSIL.Cast(this.Variables, System.Collections.Generic.IEnumerable$b1.Of(System.Linq.Expressions.ParameterExpression))) {
		return this;
	}
	return System.Linq.Expressions.Expression.RuntimeVariables$1(variables);
};
JSIL.MakeProperty(System.Linq.Expressions.RuntimeVariablesExpression.prototype, "Type", 
	System.Linq.Expressions.RuntimeVariablesExpression.prototype.get_Type, null);
JSIL.MakeProperty(System.Linq.Expressions.RuntimeVariablesExpression.prototype, "NodeType", 
	System.Linq.Expressions.RuntimeVariablesExpression.prototype.get_NodeType, null);
JSIL.MakeProperty(System.Linq.Expressions.RuntimeVariablesExpression.prototype, "Variables", 
	System.Linq.Expressions.RuntimeVariablesExpression.prototype.get_Variables, null);
System.Linq.Expressions.RuntimeVariablesExpression.prototype._variables = null;

System.Linq.Expressions.SwitchCase.prototype._ctor = function (body, testValues) {
	System.Object.prototype._ctor.call(this);
	this._body = body;
	this._testValues = testValues;
};
System.Linq.Expressions.SwitchCase.prototype.get_TestValues = function () {
	return this._testValues;
};
System.Linq.Expressions.SwitchCase.prototype.get_Body = function () {
	return this._body;
};
System.Linq.Expressions.SwitchCase.prototype.toString = function () {
	return $asm08.System.Linq.Expressions.ExpressionStringBuilder.SwitchCaseToString(this);
};
System.Linq.Expressions.SwitchCase.prototype.Update = function (testValues, body) {
	if (!((testValues !== this.TestValues) || (body !== this.Body))) {
		return this;
	}
	return System.Linq.Expressions.Expression.SwitchCase$1(body, testValues);
};
JSIL.MakeProperty(System.Linq.Expressions.SwitchCase.prototype, "TestValues", 
	System.Linq.Expressions.SwitchCase.prototype.get_TestValues, null);
JSIL.MakeProperty(System.Linq.Expressions.SwitchCase.prototype, "Body", 
	System.Linq.Expressions.SwitchCase.prototype.get_Body, null);
System.Linq.Expressions.SwitchCase.prototype._testValues = null;
System.Linq.Expressions.SwitchCase.prototype._body = null;

System.Linq.Expressions.SwitchExpression.prototype._ctor = function (type, switchValue, defaultBody, comparison, cases) {
	System.Linq.Expressions.Expression.prototype._ctor$1.call(this);
	this._type = type;
	this._switchValue = switchValue;
	this._defaultBody = defaultBody;
	this._comparison = comparison;
	this._cases = cases;
};
System.Linq.Expressions.SwitchExpression.prototype.get_Type = function () {
	return this._type;
};
System.Linq.Expressions.SwitchExpression.prototype.get_NodeType = function () {
	return System.Linq.Expressions.ExpressionType.Switch;
};
System.Linq.Expressions.SwitchExpression.prototype.get_SwitchValue = function () {
	return this._switchValue;
};
System.Linq.Expressions.SwitchExpression.prototype.get_Cases = function () {
	return this._cases;
};
System.Linq.Expressions.SwitchExpression.prototype.get_DefaultBody = function () {
	return this._defaultBody;
};
System.Linq.Expressions.SwitchExpression.prototype.get_Comparison = function () {
	return this._comparison;
};
System.Linq.Expressions.SwitchExpression.prototype.Accept = function (visitor) {
	return visitor.VisitSwitch(this);
};
System.Linq.Expressions.SwitchExpression.prototype.get_IsLifted = function () {
	return ($asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(this._switchValue.Type) && ((this._comparison === null) || 
			!$asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(this._switchValue.Type, $asm08.System.Dynamic.Utils.TypeUtils.GetNonRefType($asm08.System.Dynamic.Utils.TypeExtensions.GetParametersCached(this._comparison)[0].ParameterType))));
};
System.Linq.Expressions.SwitchExpression.prototype.Update = function (switchValue, cases, defaultBody) {
	if (!((switchValue !== this.SwitchValue) || 
			(cases !== this.Cases) || (defaultBody !== this.DefaultBody))) {
		return this;
	}
	return System.Linq.Expressions.Expression.Switch$5(
		this.Type, 
		switchValue, 
		defaultBody, 
		this.Comparison, 
		cases
	);
};
JSIL.MakeProperty(System.Linq.Expressions.SwitchExpression.prototype, "Type", 
	System.Linq.Expressions.SwitchExpression.prototype.get_Type, null);
JSIL.MakeProperty(System.Linq.Expressions.SwitchExpression.prototype, "NodeType", 
	System.Linq.Expressions.SwitchExpression.prototype.get_NodeType, null);
JSIL.MakeProperty(System.Linq.Expressions.SwitchExpression.prototype, "SwitchValue", 
	System.Linq.Expressions.SwitchExpression.prototype.get_SwitchValue, null);
JSIL.MakeProperty(System.Linq.Expressions.SwitchExpression.prototype, "Cases", 
	System.Linq.Expressions.SwitchExpression.prototype.get_Cases, null);
JSIL.MakeProperty(System.Linq.Expressions.SwitchExpression.prototype, "DefaultBody", 
	System.Linq.Expressions.SwitchExpression.prototype.get_DefaultBody, null);
JSIL.MakeProperty(System.Linq.Expressions.SwitchExpression.prototype, "Comparison", 
	System.Linq.Expressions.SwitchExpression.prototype.get_Comparison, null);
JSIL.MakeProperty(System.Linq.Expressions.SwitchExpression.prototype, "IsLifted", 
	System.Linq.Expressions.SwitchExpression.prototype.get_IsLifted, null);
System.Linq.Expressions.SwitchExpression.prototype._type = null;
System.Linq.Expressions.SwitchExpression.prototype._switchValue = null;
System.Linq.Expressions.SwitchExpression.prototype._cases = null;
System.Linq.Expressions.SwitchExpression.prototype._defaultBody = null;
System.Linq.Expressions.SwitchExpression.prototype._comparison = null;

System.Linq.Expressions.SymbolDocumentInfo.prototype._ctor = function (fileName) {
	System.Object.prototype._ctor.call(this);
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(fileName, "fileName");
	this._fileName = fileName;
};
System.Linq.Expressions.SymbolDocumentInfo.prototype.get_FileName = function () {
	return this._fileName;
};
System.Linq.Expressions.SymbolDocumentInfo.prototype.get_Language = function () {
	return System.Guid.Empty;
};
System.Linq.Expressions.SymbolDocumentInfo.prototype.get_LanguageVendor = function () {
	return System.Guid.Empty;
};
System.Linq.Expressions.SymbolDocumentInfo.prototype.get_DocumentType = function () {
	return $asm08.System.Linq.Expressions.Compiler.SymbolGuids.DocumentType_Text;
};
JSIL.MakeProperty(System.Linq.Expressions.SymbolDocumentInfo.prototype, "FileName", 
	System.Linq.Expressions.SymbolDocumentInfo.prototype.get_FileName, null);
JSIL.MakeProperty(System.Linq.Expressions.SymbolDocumentInfo.prototype, "Language", 
	System.Linq.Expressions.SymbolDocumentInfo.prototype.get_Language, null);
JSIL.MakeProperty(System.Linq.Expressions.SymbolDocumentInfo.prototype, "LanguageVendor", 
	System.Linq.Expressions.SymbolDocumentInfo.prototype.get_LanguageVendor, null);
JSIL.MakeProperty(System.Linq.Expressions.SymbolDocumentInfo.prototype, "DocumentType", 
	System.Linq.Expressions.SymbolDocumentInfo.prototype.get_DocumentType, null);
System.Linq.Expressions.SymbolDocumentInfo.prototype._fileName = null;

$asm08.System.Linq.Expressions.SymbolDocumentWithGuids.prototype._ctor$0 = function (fileName, /* ref */ language) {
	System.Linq.Expressions.SymbolDocumentInfo.prototype._ctor.call(this, fileName);
	this._language = language.value.MemberwiseClone();
	this._documentType = $asm08.System.Linq.Expressions.Compiler.SymbolGuids.DocumentType_Text.MemberwiseClone();
};
$asm08.System.Linq.Expressions.SymbolDocumentWithGuids.prototype._ctor$1 = function (fileName, /* ref */ language, /* ref */ vendor) {
	System.Linq.Expressions.SymbolDocumentInfo.prototype._ctor.call(this, fileName);
	this._language = language.value.MemberwiseClone();
	this._vendor = vendor.value.MemberwiseClone();
	this._documentType = $asm08.System.Linq.Expressions.Compiler.SymbolGuids.DocumentType_Text.MemberwiseClone();
};
$asm08.System.Linq.Expressions.SymbolDocumentWithGuids.prototype._ctor$2 = function (fileName, /* ref */ language, /* ref */ vendor, /* ref */ documentType) {
	System.Linq.Expressions.SymbolDocumentInfo.prototype._ctor.call(this, fileName);
	this._language = language.value.MemberwiseClone();
	this._vendor = vendor.value.MemberwiseClone();
	this._documentType = documentType.value.MemberwiseClone();
};
$asm08.System.Linq.Expressions.SymbolDocumentWithGuids.prototype.get_Language = function () {
	return this._language;
};
$asm08.System.Linq.Expressions.SymbolDocumentWithGuids.prototype.get_LanguageVendor = function () {
	return this._vendor;
};
$asm08.System.Linq.Expressions.SymbolDocumentWithGuids.prototype.get_DocumentType = function () {
	return this._documentType;
};
JSIL.OverloadedMethod($asm08.System.Linq.Expressions.SymbolDocumentWithGuids.prototype, "_ctor", [
		["_ctor$0", [System.String, JSIL.Reference.Of(System.Guid)]], 
		["_ctor$1", [System.String, JSIL.Reference.Of(System.Guid), JSIL.Reference.Of(System.Guid)]], 
		["_ctor$2", [System.String, JSIL.Reference.Of(System.Guid), JSIL.Reference.Of(System.Guid), JSIL.Reference.Of(System.Guid)]]
	]);
JSIL.MakeProperty($asm08.System.Linq.Expressions.SymbolDocumentWithGuids.prototype, "Language", 
	$asm08.System.Linq.Expressions.SymbolDocumentWithGuids.prototype.get_Language, null);
JSIL.MakeProperty($asm08.System.Linq.Expressions.SymbolDocumentWithGuids.prototype, "LanguageVendor", 
	$asm08.System.Linq.Expressions.SymbolDocumentWithGuids.prototype.get_LanguageVendor, null);
JSIL.MakeProperty($asm08.System.Linq.Expressions.SymbolDocumentWithGuids.prototype, "DocumentType", 
	$asm08.System.Linq.Expressions.SymbolDocumentWithGuids.prototype.get_DocumentType, null);

System.Linq.Expressions.TryExpression.prototype._ctor = function (type, body, $finally, fault, handlers) {
	System.Linq.Expressions.Expression.prototype._ctor$1.call(this);
	this._type = type;
	this._body = body;
	this._handlers = handlers;
	this._finally = $finally;
	this._fault = fault;
};
System.Linq.Expressions.TryExpression.prototype.get_Type = function () {
	return this._type;
};
System.Linq.Expressions.TryExpression.prototype.get_NodeType = function () {
	return System.Linq.Expressions.ExpressionType.Try;
};
System.Linq.Expressions.TryExpression.prototype.get_Body = function () {
	return this._body;
};
System.Linq.Expressions.TryExpression.prototype.get_Handlers = function () {
	return this._handlers;
};
System.Linq.Expressions.TryExpression.prototype.get_Finally = function () {
	return this._finally;
};
System.Linq.Expressions.TryExpression.prototype.get_Fault = function () {
	return this._fault;
};
System.Linq.Expressions.TryExpression.prototype.Accept = function (visitor) {
	return visitor.VisitTry(this);
};
System.Linq.Expressions.TryExpression.prototype.Update = function (body, handlers, $finally, fault) {
	if (!((body !== this.Body) || 
			(handlers !== this.Handlers) || 
			($finally !== this.Finally) || (fault !== this.Fault))) {
		return this;
	}
	return System.Linq.Expressions.Expression.MakeTry(
		this.Type, 
		body, 
		$finally, 
		fault, 
		handlers
	);
};
JSIL.MakeProperty(System.Linq.Expressions.TryExpression.prototype, "Type", 
	System.Linq.Expressions.TryExpression.prototype.get_Type, null);
JSIL.MakeProperty(System.Linq.Expressions.TryExpression.prototype, "NodeType", 
	System.Linq.Expressions.TryExpression.prototype.get_NodeType, null);
JSIL.MakeProperty(System.Linq.Expressions.TryExpression.prototype, "Body", 
	System.Linq.Expressions.TryExpression.prototype.get_Body, null);
JSIL.MakeProperty(System.Linq.Expressions.TryExpression.prototype, "Handlers", 
	System.Linq.Expressions.TryExpression.prototype.get_Handlers, null);
JSIL.MakeProperty(System.Linq.Expressions.TryExpression.prototype, "Finally", 
	System.Linq.Expressions.TryExpression.prototype.get_Finally, null);
JSIL.MakeProperty(System.Linq.Expressions.TryExpression.prototype, "Fault", 
	System.Linq.Expressions.TryExpression.prototype.get_Fault, null);
System.Linq.Expressions.TryExpression.prototype._type = null;
System.Linq.Expressions.TryExpression.prototype._body = null;
System.Linq.Expressions.TryExpression.prototype._handlers = null;
System.Linq.Expressions.TryExpression.prototype._finally = null;
System.Linq.Expressions.TryExpression.prototype._fault = null;

System.Linq.Expressions.TypeBinaryExpression.prototype._ctor = function (expression, typeOperand, nodeKind) {
	System.Linq.Expressions.Expression.prototype._ctor$1.call(this);
	this._expression = expression;
	this._typeOperand = typeOperand;
	this._nodeKind = nodeKind;
};
System.Linq.Expressions.TypeBinaryExpression.prototype.get_Type = function () {
	return System.Boolean;
};
System.Linq.Expressions.TypeBinaryExpression.prototype.get_NodeType = function () {
	return this._nodeKind;
};
System.Linq.Expressions.TypeBinaryExpression.prototype.get_Expression = function () {
	return this._expression;
};
System.Linq.Expressions.TypeBinaryExpression.prototype.get_TypeOperand = function () {
	return this._typeOperand;
};
System.Linq.Expressions.TypeBinaryExpression.prototype.ReduceTypeEqual = function () {
	var type = this.Expression.Type;
	if (!(!type.IsValueType || $asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(type))) {
		return System.Linq.Expressions.Expression.Block$0(this.Expression, System.Linq.Expressions.Expression.Constant$0((type === $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(this._typeOperand))));
	}
	if (this.Expression.NodeType === System.Linq.Expressions.ExpressionType.Constant) {
		return this.ReduceConstantTypeEqual();
	}
	if (!(!type.IsSealed || (type !== this._typeOperand))) {
		if ($asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(type)) {
			return System.Linq.Expressions.Expression.NotEqual$0(this.Expression, System.Linq.Expressions.Expression.Constant$1(null, this.Expression.Type));
		}
		return System.Linq.Expressions.Expression.ReferenceNotEqual(this.Expression, System.Linq.Expressions.Expression.Constant$1(null, this.Expression.Type));
	} else {
		var parameterExpression = JSIL.TryCast(this.Expression, System.Linq.Expressions.ParameterExpression);
		if (!((parameterExpression === null) || parameterExpression.IsByRef)) {
			return this.ByValParameterTypeEqual(parameterExpression);
		}
		parameterExpression = System.Linq.Expressions.Expression.Parameter$0(System.Object);
		var expression = this.Expression;
		if (!$asm08.System.Dynamic.Utils.TypeUtils.AreReferenceAssignable(System.Object, expression.Type)) {
			expression = System.Linq.Expressions.Expression.Convert$0(expression, System.Object);
		}
		return System.Linq.Expressions.Expression.Block$8(JSIL.Array.New(System.Linq.Expressions.ParameterExpression, [parameterExpression]), JSIL.Array.New(System.Linq.Expressions.Expression, [System.Linq.Expressions.Expression.Assign(parameterExpression, expression), this.ByValParameterTypeEqual(parameterExpression)]));
	}
};
System.Linq.Expressions.TypeBinaryExpression.prototype.ByValParameterTypeEqual = function (value) {
	var expression = System.Linq.Expressions.Expression.Call$7(value, System.Object.GetMethod$5("GetType"));
	if (this._typeOperand.IsInterface) {
		var parameterExpression = System.Linq.Expressions.Expression.Parameter$0(System.Type);
		expression = System.Linq.Expressions.Expression.Block$8(JSIL.Array.New(System.Linq.Expressions.ParameterExpression, [parameterExpression]), JSIL.Array.New(System.Linq.Expressions.Expression, [System.Linq.Expressions.Expression.Assign(parameterExpression, expression), parameterExpression]));
	}
	return System.Linq.Expressions.Expression.AndAlso$0(
		System.Linq.Expressions.Expression.ReferenceNotEqual(value, System.Linq.Expressions.Expression.Constant$0(null)), 
		System.Linq.Expressions.Expression.ReferenceEqual(expression, System.Linq.Expressions.Expression.Constant$1($asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(this._typeOperand), System.Type))
	);
};
System.Linq.Expressions.TypeBinaryExpression.prototype.ReduceConstantTypeEqual = function () {
	var constantExpression = JSIL.TryCast(this.Expression, System.Linq.Expressions.ConstantExpression);
	if (constantExpression.Value === null) {
		return System.Linq.Expressions.Expression.Constant$0(false);
	}
	return System.Linq.Expressions.Expression.Constant$0(($asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(this._typeOperand) === (JSIL.GetType(constantExpression.Value))));
};
System.Linq.Expressions.TypeBinaryExpression.prototype.Accept = function (visitor) {
	return visitor.VisitTypeBinary(this);
};
System.Linq.Expressions.TypeBinaryExpression.prototype.Update = function (expression) {
	if (expression === this.Expression) {
		return this;
	}
	if (this.NodeType === System.Linq.Expressions.ExpressionType.TypeIs) {
		return System.Linq.Expressions.Expression.TypeIs(expression, this.TypeOperand);
	}
	return System.Linq.Expressions.Expression.TypeEqual(expression, this.TypeOperand);
};
JSIL.MakeProperty(System.Linq.Expressions.TypeBinaryExpression.prototype, "Type", 
	System.Linq.Expressions.TypeBinaryExpression.prototype.get_Type, null);
JSIL.MakeProperty(System.Linq.Expressions.TypeBinaryExpression.prototype, "NodeType", 
	System.Linq.Expressions.TypeBinaryExpression.prototype.get_NodeType, null);
JSIL.MakeProperty(System.Linq.Expressions.TypeBinaryExpression.prototype, "Expression", 
	System.Linq.Expressions.TypeBinaryExpression.prototype.get_Expression, null);
JSIL.MakeProperty(System.Linq.Expressions.TypeBinaryExpression.prototype, "TypeOperand", 
	System.Linq.Expressions.TypeBinaryExpression.prototype.get_TypeOperand, null);
System.Linq.Expressions.TypeBinaryExpression.prototype._expression = null;
System.Linq.Expressions.TypeBinaryExpression.prototype._typeOperand = null;
System.Linq.Expressions.TypeBinaryExpression.prototype._nodeKind = 0;

$asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType = function (type) {
	if ($asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(type)) {
		return type.GetGenericArguments()[0];
	}
	return type;
};
$asm08.System.Dynamic.Utils.TypeUtils.GetNullableType = function (type) {
	if (!(!type.IsValueType || $asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(type))) {
		return System.Nullable$b1.MakeGenericType(JSIL.Array.New(System.Type, [type]));
	}
	return type;
};
$asm08.System.Dynamic.Utils.TypeUtils.IsNullableType = function (type) {
	return (type.IsGenericType && (type.GetGenericTypeDefinition() === System.Nullable$b1));
};
$asm08.System.Dynamic.Utils.TypeUtils.IsBool = function (type) {
	return ($asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(type) === System.Boolean);
};
$asm08.System.Dynamic.Utils.TypeUtils.IsNumeric = function (type) {
	type = $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(type);
	if (!type.IsEnum) {
		switch (Number(System.Type.GetTypeCode(type))) {
			case 4: 
			case 5: 
			case 6: 
			case 7: 
			case 8: 
			case 9: 
			case 10: 
			case 11: 
			case 12: 
			case 13: 
			case 14: 
				return true;
		}
	}
	return false;
};
$asm08.System.Dynamic.Utils.TypeUtils.IsInteger = function (type) {
	type = $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(type);
	if (type.IsEnum) {
		return false;
	}
	switch (Number(System.Type.GetTypeCode(type))) {
		case 5: 
		case 6: 
		case 7: 
		case 8: 
		case 9: 
		case 10: 
		case 11: 
		case 12: 
			return true;
		default: 
			return false;
	}
};
$asm08.System.Dynamic.Utils.TypeUtils.IsArithmetic = function (type) {
	type = $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(type);
	if (!type.IsEnum) {
		switch (Number(System.Type.GetTypeCode(type))) {
			case 7: 
			case 8: 
			case 9: 
			case 10: 
			case 11: 
			case 12: 
			case 13: 
			case 14: 
				return true;
		}
	}
	return false;
};
$asm08.System.Dynamic.Utils.TypeUtils.IsUnsignedInt = function (type) {
	type = $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(type);
	if (!type.IsEnum) {
		switch (Number(System.Type.GetTypeCode(type))) {
			case 8: 
			case 10: 
			case 12: 
				return true;
		}
	}
	return false;
};
$asm08.System.Dynamic.Utils.TypeUtils.IsIntegerOrBool = function (type) {
	type = $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(type);
	if (!type.IsEnum) {
		switch (Number(System.Type.GetTypeCode(type))) {
			case 3: 
			case 5: 
			case 6: 
			case 7: 
			case 8: 
			case 9: 
			case 10: 
			case 11: 
			case 12: 
				return true;
		}
	}
	return false;
};
$asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent = function (t1, t2) {
	return (t1 === t2);
};
$asm08.System.Dynamic.Utils.TypeUtils.AreReferenceAssignable = function (dest, src) {
	return ($asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(dest, src) || !(dest.IsValueType || 
			src.IsValueType || 
			!dest.IsAssignableFrom(src)));
};
$asm08.System.Dynamic.Utils.TypeUtils.IsValidInstanceType = function (member, instanceType) {
	var declaringType = member.DeclaringType;
	if ($asm08.System.Dynamic.Utils.TypeUtils.AreReferenceAssignable(declaringType, instanceType)) {
		return true;
	}
	if (instanceType.IsValueType) {
		if ($asm08.System.Dynamic.Utils.TypeUtils.AreReferenceAssignable(declaringType, System.Object)) {
			return true;
		}
		if ($asm08.System.Dynamic.Utils.TypeUtils.AreReferenceAssignable(declaringType, System.ValueType)) {
			return true;
		}
		if (!(!instanceType.IsEnum || !$asm08.System.Dynamic.Utils.TypeUtils.AreReferenceAssignable(declaringType, System.Enum))) {
			return true;
		}
		if (declaringType.IsInterface) {
			var interfaces = instanceType.GetInterfaces();
		__loop0__: 
			for (var i = 0; i < interfaces.length; ++i) {
				var src = interfaces[i];
				if ($asm08.System.Dynamic.Utils.TypeUtils.AreReferenceAssignable(declaringType, src)) {
					return true;
				}
			}
		}
	}
	return false;
};
$asm08.System.Dynamic.Utils.TypeUtils.HasIdentityPrimitiveOrNullableConversion = function (source, dest) {
	return ($asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(source, dest) || 
		!(!$asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(source) || 
			!$asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(dest, $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(source))) || 
		!(!$asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(dest) || 
			!$asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(source, $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(dest))) || !(!$asm08.System.Dynamic.Utils.TypeUtils.IsConvertible(source) || 
			!$asm08.System.Dynamic.Utils.TypeUtils.IsConvertible(dest) || 
			($asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(dest) === System.Boolean)));
};
$asm08.System.Dynamic.Utils.TypeUtils.HasReferenceConversion = function (source, dest) {
	if (!((source !== System.Void) && (dest !== System.Void))) {
		return false;
	}
	var nonNullableType = $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(source);
	var nonNullableType2 = $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(dest);
	return (nonNullableType.IsAssignableFrom(nonNullableType2) || 
		nonNullableType2.IsAssignableFrom(nonNullableType) || 
		!(!source.IsInterface && 
			!dest.IsInterface) || 
		$asm08.System.Dynamic.Utils.TypeUtils.IsLegalExplicitVariantDelegateConversion(source, dest) || !((source !== System.Object) && 
			(dest !== System.Object)));
};
$asm08.System.Dynamic.Utils.TypeUtils.IsCovariant = function (t) {
	return (System.Reflection.GenericParameterAttributes.None !== (t.GenericParameterAttributes & System.Reflection.GenericParameterAttributes.Covariant));
};
$asm08.System.Dynamic.Utils.TypeUtils.IsContravariant = function (t) {
	return (System.Reflection.GenericParameterAttributes.None !== (t.GenericParameterAttributes & System.Reflection.GenericParameterAttributes.Contravariant));
};
$asm08.System.Dynamic.Utils.TypeUtils.IsInvariant = function (t) {
	return (System.Reflection.GenericParameterAttributes.None === (t.GenericParameterAttributes & (System.Reflection.GenericParameterAttributes.Contravariant | System.Reflection.GenericParameterAttributes.Covariant | System.Reflection.GenericParameterAttributes.VarianceMask)));
};
$asm08.System.Dynamic.Utils.TypeUtils.IsDelegate = function (t) {
	return t.IsSubclassOf(System.Delegate);
};
$asm08.System.Dynamic.Utils.TypeUtils.IsLegalExplicitVariantDelegateConversion = function (source, dest) {
	if (!($asm08.System.Dynamic.Utils.TypeUtils.IsDelegate(source) && 
			$asm08.System.Dynamic.Utils.TypeUtils.IsDelegate(dest) && 
			source.IsGenericType && dest.IsGenericType)) {
		return false;
	}
	var genericTypeDefinition = source.GetGenericTypeDefinition();
	if (dest.GetGenericTypeDefinition() !== genericTypeDefinition) {
		return false;
	}
	var genericArguments = genericTypeDefinition.GetGenericArguments();
	var genericArguments2 = source.GetGenericArguments();
	var genericArguments3 = dest.GetGenericArguments();
__loop0__: 
	for (var i = 0; i < genericArguments.length; ++i) {
		var type = genericArguments2[i];
		var type2 = genericArguments3[i];
		if (!$asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(type, type2)) {
			var t = genericArguments[i];
			if ($asm08.System.Dynamic.Utils.TypeUtils.IsInvariant(t)) {
				return false;
			}
			if ($asm08.System.Dynamic.Utils.TypeUtils.IsCovariant(t)) {
				if (!$asm08.System.Dynamic.Utils.TypeUtils.HasReferenceConversion(type, type2)) {
					return false;
				}
			} else if (!(!$asm08.System.Dynamic.Utils.TypeUtils.IsContravariant(t) || (!type.IsValueType && 
						!type2.IsValueType))) {
				return false;
			}
		}
	}
	return true;
};
$asm08.System.Dynamic.Utils.TypeUtils.IsConvertible = function (type) {
	type = $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(type);
	if (type.IsEnum) {
		return true;
	}
	switch (Number(System.Type.GetTypeCode(type))) {
		case 3: 
		case 4: 
		case 5: 
		case 6: 
		case 7: 
		case 8: 
		case 9: 
		case 10: 
		case 11: 
		case 12: 
		case 13: 
		case 14: 
			return true;
		default: 
			return false;
	}
};
$asm08.System.Dynamic.Utils.TypeUtils.HasReferenceEquality = function (left, right) {
	return (!left.IsValueType && 
		!right.IsValueType && (left.IsInterface || 
			right.IsInterface || 
			$asm08.System.Dynamic.Utils.TypeUtils.AreReferenceAssignable(left, right) || 
			$asm08.System.Dynamic.Utils.TypeUtils.AreReferenceAssignable(right, left)));
};
$asm08.System.Dynamic.Utils.TypeUtils.HasBuiltInEqualityOperator = function (left, right) {
	if (!(!left.IsInterface || right.IsValueType)) {
		return true;
	}
	if (!(!right.IsInterface || left.IsValueType)) {
		return true;
	}
	if (!(left.IsValueType || 
			right.IsValueType || (!$asm08.System.Dynamic.Utils.TypeUtils.AreReferenceAssignable(left, right) && 
				!$asm08.System.Dynamic.Utils.TypeUtils.AreReferenceAssignable(right, left)))) {
		return true;
	}
	if (!$asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(left, right)) {
		return false;
	}
	var nonNullableType = $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(left);
	return !((nonNullableType !== System.Boolean) && 
		!$asm08.System.Dynamic.Utils.TypeUtils.IsNumeric(nonNullableType) && !nonNullableType.IsEnum);
};
$asm08.System.Dynamic.Utils.TypeUtils.IsImplicitlyConvertible = function (source, destination) {
	return ($asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(source, destination) || 
		$asm08.System.Dynamic.Utils.TypeUtils.IsImplicitNumericConversion(source, destination) || 
		$asm08.System.Dynamic.Utils.TypeUtils.IsImplicitReferenceConversion(source, destination) || 
		$asm08.System.Dynamic.Utils.TypeUtils.IsImplicitBoxingConversion(source, destination) || $asm08.System.Dynamic.Utils.TypeUtils.IsImplicitNullableConversion(source, destination));
};
$asm08.System.Dynamic.Utils.TypeUtils.GetUserDefinedCoercionMethod = function (convertFrom, convertToType, implicitOnly) {
	var nonNullableType = $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(convertFrom);
	var nonNullableType2 = $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(convertToType);
	var methods = nonNullableType.GetMethods$1((System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
	var methodInfo = $asm08.System.Dynamic.Utils.TypeUtils.FindConversionOperator(methods, convertFrom, convertToType, implicitOnly);
	if (methodInfo !== null) {
		return methodInfo;
	}
	var methods2 = nonNullableType2.GetMethods$1((System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
	methodInfo = $asm08.System.Dynamic.Utils.TypeUtils.FindConversionOperator(methods2, convertFrom, convertToType, implicitOnly);
	if (methodInfo !== null) {
		return methodInfo;
	}
	if (!($asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(nonNullableType, convertFrom) && $asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(nonNullableType2, convertToType))) {
		methodInfo = $asm08.System.Dynamic.Utils.TypeUtils.FindConversionOperator(methods, nonNullableType, nonNullableType2, implicitOnly);
		if (methodInfo === null) {
			methodInfo = $asm08.System.Dynamic.Utils.TypeUtils.FindConversionOperator(methods2, nonNullableType, nonNullableType2, implicitOnly);
		}
		if (methodInfo !== null) {
			return methodInfo;
		}
	}
	return null;
};
$asm08.System.Dynamic.Utils.TypeUtils.FindConversionOperator = function (methods, typeFrom, typeTo, implicitOnly) {
__loop0__: 
	for (var i = 0; i < methods.length; ++i) {
		var methodInfo = methods[i];
		if (!(((methodInfo.Name != "op_Implicit") && 
					(implicitOnly || 
						(methodInfo.Name != "op_Explicit"))) || !$asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(methodInfo.ReturnType, typeTo))) {
			var parametersCached = $asm08.System.Dynamic.Utils.TypeExtensions.GetParametersCached(methodInfo);
			if ($asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(parametersCached[0].ParameterType, typeFrom)) {
				return methodInfo;
			}
		}
	}
	return null;
};
$asm08.System.Dynamic.Utils.TypeUtils.IsImplicitNumericConversion = function (source, destination) {
	var typeCode = System.Type.GetTypeCode(source);
	var typeCode2 = System.Type.GetTypeCode(destination);
	switch (Number(typeCode)) {
		case 4: 
			switch (Number(typeCode2)) {
				case 8: 
				case 9: 
				case 10: 
				case 11: 
				case 12: 
				case 13: 
				case 14: 
				case 15: 
					return true;
				default: 
					return false;
			}
			break;
		case 5: 
			switch (Number(typeCode2)) {
				case 7: 
				case 9: 
				case 11: 
				case 13: 
				case 14: 
				case 15: 
					return true;
			}
			return false;
		case 6: 
			switch (Number(typeCode2)) {
				case 7: 
				case 8: 
				case 9: 
				case 10: 
				case 11: 
				case 12: 
				case 13: 
				case 14: 
				case 15: 
					return true;
				default: 
					return false;
			}
			break;
		case 7: 
			switch (Number(typeCode2)) {
				case 9: 
				case 11: 
				case 13: 
				case 14: 
				case 15: 
					return true;
			}
			return false;
		case 8: 
			switch (Number(typeCode2)) {
				case 9: 
				case 10: 
				case 11: 
				case 12: 
				case 13: 
				case 14: 
				case 15: 
					return true;
				default: 
					return false;
			}
			break;
		case 9: 
			switch (Number(typeCode2)) {
				case 11: 
				case 13: 
				case 14: 
				case 15: 
					return true;
			}
			return false;
		case 10: 
			switch (Number(typeCode2)) {
				case 10: 
				case 12: 
				case 13: 
				case 14: 
				case 15: 
					return true;
			}
			return false;
		case 11: 
		case 12: 
			switch (Number(typeCode2)) {
				case 13: 
				case 14: 
				case 15: 
					return true;
				default: 
					return false;
			}
			break;
		case 13: 
			return (typeCode2 === System.TypeCode.Double);
		default: 
			return false;
	}
};
$asm08.System.Dynamic.Utils.TypeUtils.IsImplicitReferenceConversion = function (source, destination) {
	return destination.IsAssignableFrom(source);
};
$asm08.System.Dynamic.Utils.TypeUtils.IsImplicitBoxingConversion = function (source, destination) {
	return (!(!source.IsValueType || 
			((destination !== System.Object) && 
				(destination !== System.ValueType))) || !(!source.IsEnum || 
			(destination !== System.Enum)));
};
$asm08.System.Dynamic.Utils.TypeUtils.IsImplicitNullableConversion = function (source, destination) {
	return ($asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(destination) && $asm08.System.Dynamic.Utils.TypeUtils.IsImplicitlyConvertible($asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(source), $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(destination)));
};
$asm08.System.Dynamic.Utils.TypeUtils.IsSameOrSubclass = function (type, subType) {
	return ($asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(type, subType) || subType.IsSubclassOf(type));
};
$asm08.System.Dynamic.Utils.TypeUtils.ValidateType = function (type) {
	if (type.IsGenericTypeDefinition) {
		throw $asm08.System.Core.Error.TypeIsGeneric(type);
	}
	if (type.ContainsGenericParameters) {
		throw $asm08.System.Core.Error.TypeContainsGenericParameters(type);
	}
};
$asm08.System.Dynamic.Utils.TypeUtils.FindGenericType = function (definition, type) {
__loop0__: 
	for (; (type !== null) && (type !== System.Object); type = type.BaseType) {
		if (!(!type.IsGenericType || !$asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(type.GetGenericTypeDefinition(), definition))) {
			return type;
		}
		if (definition.IsInterface) {
			var interfaces = type.GetInterfaces();
		__loop1__: 
			for (var i = 0; i < interfaces.length; ++i) {
				var type3 = $asm08.System.Dynamic.Utils.TypeUtils.FindGenericType(definition, interfaces[i]);
				if (type3 !== null) {
					return type3;
				}
			}
		}
	}
	return null;
};
$asm08.System.Dynamic.Utils.TypeUtils.IsUnsigned = function (type) {
	type = $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(type);
	switch (Number(System.Type.GetTypeCode(type))) {
		case 4: 
		case 6: 
		case 8: 
		case 10: 
		case 12: 
			return true;
	}
	return false;
};
$asm08.System.Dynamic.Utils.TypeUtils.IsFloatingPoint = function (type) {
	type = $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(type);
	switch (Number(System.Type.GetTypeCode(type))) {
		case 13: 
		case 14: 
			return true;
		default: 
			return false;
	}
};
$asm08.System.Dynamic.Utils.TypeUtils.GetBooleanOperator = function (type, name) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
			__loop0__: 
				while (true) {
					var methodValidated = $asm08.System.Dynamic.Utils.TypeExtensions.GetMethodValidated(
						type, 
						name, 
						(System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static), 
						null, 
						JSIL.Array.New(System.Type, [type]), 
						null
					);
					if (!((methodValidated === null) || 
							!methodValidated.IsSpecialName || methodValidated.ContainsGenericParameters)) {
						break __loop0__;
					}
					type = type.BaseType;
					if (type === null) {
						__label0__ = "Block_3";
						continue __step0__;
					}
				}
				return methodValidated;
				__label0__ = "Block_3";
				continue __step0__;
				break;
			case "Block_3":
				return null;
				break __step0__;
		}
	}
};
$asm08.System.Dynamic.Utils.TypeUtils.GetNonRefType = function (type) {
	if (!type.IsByRef) {
		return type;
	}
	return type.GetElementType();
};
$asm08.System.Dynamic.Utils.TypeUtils.CanCache = function (t) {
	var assembly = t.Assembly;
	if (!((assembly === $asm08.System.Dynamic.Utils.TypeUtils._mscorlib) || (assembly === $asm08.System.Dynamic.Utils.TypeUtils._systemCore))) {
		return false;
	}
	if (t.IsGenericType) {
		var genericArguments = t.GetGenericArguments();
	__loop0__: 
		for (var i = 0; i < genericArguments.length; ++i) {
			var t2 = genericArguments[i];
			if (!$asm08.System.Dynamic.Utils.TypeUtils.CanCache(t2)) {
				return false;
			}
		}
	}
	return true;
};
Object.defineProperty($asm08.System.Dynamic.Utils.TypeUtils, "AnyStatic", {
		"value": 56}
);
Object.defineProperty($asm08.System.Dynamic.Utils.TypeUtils, "PublicStatic", {
		"value": 22}
);
$asm08.System.Dynamic.Utils.TypeUtils._mscorlib = null;
$asm08.System.Dynamic.Utils.TypeUtils._systemCore = null;
$asm08.System.Dynamic.Utils.TypeUtils._cctor = function () {
	$asm08.System.Dynamic.Utils.TypeUtils._mscorlib = System.Object.Assembly;
	$asm08.System.Dynamic.Utils.TypeUtils._systemCore = System.Linq.Expressions.Expression.Assembly;
};

System.Linq.Expressions.UnaryExpression.prototype._ctor = function (nodeType, expression, type, method) {
	System.Linq.Expressions.Expression.prototype._ctor$1.call(this);
	this._operand = expression;
	this._method = method;
	this._nodeType = nodeType;
	this._type = type;
};
System.Linq.Expressions.UnaryExpression.prototype.get_Type = function () {
	return this._type;
};
System.Linq.Expressions.UnaryExpression.prototype.get_NodeType = function () {
	return this._nodeType;
};
System.Linq.Expressions.UnaryExpression.prototype.get_Operand = function () {
	return this._operand;
};
System.Linq.Expressions.UnaryExpression.prototype.get_Method = function () {
	return this._method;
};
System.Linq.Expressions.UnaryExpression.prototype.get_IsLifted = function () {
	if (!((this.NodeType !== System.Linq.Expressions.ExpressionType.TypeAs) && 
			(this.NodeType !== System.Linq.Expressions.ExpressionType.Quote) && (this.NodeType !== System.Linq.Expressions.ExpressionType.Throw))) {
		return false;
	}
	var flag = $asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(this._operand.Type);
	var flag2 = $asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(this.Type);
	if (this._method !== null) {
		return ((flag && 
				!$asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent($asm08.System.Dynamic.Utils.TypeExtensions.GetParametersCached(this._method)[0].ParameterType, this._operand.Type)) || (flag2 && 
				!$asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(this._method.ReturnType, this.Type)));
	}
	return (flag || flag2);
};
System.Linq.Expressions.UnaryExpression.prototype.get_IsLiftedToNull = function () {
	return (this.IsLifted && $asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(this.Type));
};
System.Linq.Expressions.UnaryExpression.prototype.Accept = function (visitor) {
	return visitor.VisitUnary(this);
};
System.Linq.Expressions.UnaryExpression.prototype.get_CanReduce = function () {
	switch (Number(this._nodeType)) {
		case 77: 
		case 78: 
		case 79: 
		case 80: 
			return true;
		default: 
			return false;
	}
};
System.Linq.Expressions.UnaryExpression.prototype.Reduce = function () {
	if (!this.CanReduce) {
		return this;
	}
	var nodeType = this._operand.NodeType;
	if (nodeType === System.Linq.Expressions.ExpressionType.MemberAccess) {
		return this.ReduceMember();
	}
	if (nodeType === System.Linq.Expressions.ExpressionType.Index) {
		return this.ReduceIndex();
	}
	return this.ReduceVariable();
};
System.Linq.Expressions.UnaryExpression.prototype.get_IsPrefix = function () {
	return ((this._nodeType === System.Linq.Expressions.ExpressionType.PreIncrementAssign) || (this._nodeType === System.Linq.Expressions.ExpressionType.PreDecrementAssign));
};
System.Linq.Expressions.UnaryExpression.prototype.FunctionalOp = function (operand) {
	if (!((this._nodeType !== System.Linq.Expressions.ExpressionType.PreIncrementAssign) && (this._nodeType !== System.Linq.Expressions.ExpressionType.PostIncrementAssign))) {
		var nodeType = System.Linq.Expressions.ExpressionType.Increment;
	} else {
		nodeType = System.Linq.Expressions.ExpressionType.Decrement;
	}
	return new System.Linq.Expressions.UnaryExpression(nodeType, operand, operand.Type, this._method);
};
System.Linq.Expressions.UnaryExpression.prototype.ReduceVariable = function () {
	if (this.IsPrefix) {
		return System.Linq.Expressions.Expression.Assign(this._operand, this.FunctionalOp(this._operand));
	}
	var parameterExpression = System.Linq.Expressions.Expression.Parameter$1(this._operand.Type, null);
	return System.Linq.Expressions.Expression.Block$8(JSIL.Array.New(System.Linq.Expressions.ParameterExpression, [parameterExpression]), JSIL.Array.New(System.Linq.Expressions.Expression, [System.Linq.Expressions.Expression.Assign(parameterExpression, this._operand), System.Linq.Expressions.Expression.Assign(this._operand, this.FunctionalOp(parameterExpression)), parameterExpression]));
};
System.Linq.Expressions.UnaryExpression.prototype.ReduceMember = function () {
	var memberExpression = JSIL.Cast(this._operand, System.Linq.Expressions.MemberExpression);
	if (memberExpression.Expression === null) {
		return this.ReduceVariable();
	}
	var parameterExpression = System.Linq.Expressions.Expression.Parameter$1(memberExpression.Expression.Type, null);
	var binaryExpression = System.Linq.Expressions.Expression.Assign(parameterExpression, memberExpression.Expression);
	memberExpression = System.Linq.Expressions.Expression.MakeMemberAccess(parameterExpression, memberExpression.Member);
	if (this.IsPrefix) {
		return System.Linq.Expressions.Expression.Block$8(JSIL.Array.New(System.Linq.Expressions.ParameterExpression, [parameterExpression]), JSIL.Array.New(System.Linq.Expressions.Expression, [binaryExpression, System.Linq.Expressions.Expression.Assign(memberExpression, this.FunctionalOp(memberExpression))]));
	}
	var parameterExpression2 = System.Linq.Expressions.Expression.Parameter$1(memberExpression.Type, null);
	return System.Linq.Expressions.Expression.Block$8(JSIL.Array.New(System.Linq.Expressions.ParameterExpression, [parameterExpression, parameterExpression2]), JSIL.Array.New(System.Linq.Expressions.Expression, [binaryExpression, System.Linq.Expressions.Expression.Assign(parameterExpression2, memberExpression), System.Linq.Expressions.Expression.Assign(memberExpression, this.FunctionalOp(parameterExpression2)), parameterExpression2]));
};
System.Linq.Expressions.UnaryExpression.prototype.ReduceIndex = function () {
	var isPrefix = this.IsPrefix;
	var indexExpression = JSIL.Cast(this._operand, System.Linq.Expressions.IndexExpression);
	var count = indexExpression.Arguments.Count;
	var array = JSIL.Array.New(System.Linq.Expressions.Expression, (count + isPrefix ? 2 : 4));
	var array2 = JSIL.Array.New(System.Linq.Expressions.ParameterExpression, (count + isPrefix ? 1 : 2));
	var array3 = JSIL.Array.New(System.Linq.Expressions.ParameterExpression, count);
	var i = 0;
	array2[i] = System.Linq.Expressions.Expression.Parameter$1(indexExpression.Object.Type, null);
	array[i] = System.Linq.Expressions.Expression.Assign(array2[i], indexExpression.Object);
__loop0__: 
	for (++i; i <= count; ++i) {
		var expression = indexExpression.Arguments.get_Item((i - 1));
		array3[(i - 1)] = (array2[i] = System.Linq.Expressions.Expression.Parameter$1(expression.Type, null));
		array[i] = System.Linq.Expressions.Expression.Assign(array2[i], expression);
	}
	indexExpression = System.Linq.Expressions.Expression.MakeIndex(array2[0], indexExpression.Indexer, new ($asm08.System.Runtime.CompilerServices.TrueReadOnlyCollection$b1.Of(System.Linq.Expressions.Expression)) (array3));
	if (!isPrefix) {
		var parameterExpression = (array2[i] = System.Linq.Expressions.Expression.Parameter$1(indexExpression.Type, null));
		array[i] = System.Linq.Expressions.Expression.Assign(array2[i], indexExpression);
		++i;
		array[i++] = System.Linq.Expressions.Expression.Assign(indexExpression, this.FunctionalOp(parameterExpression));
		array[i++] = parameterExpression;
	} else {
		array[i++] = System.Linq.Expressions.Expression.Assign(indexExpression, this.FunctionalOp(indexExpression));
	}
	return System.Linq.Expressions.Expression.Block$10(new ($asm08.System.Runtime.CompilerServices.TrueReadOnlyCollection$b1.Of(System.Linq.Expressions.ParameterExpression)) (array2), new ($asm08.System.Runtime.CompilerServices.TrueReadOnlyCollection$b1.Of(System.Linq.Expressions.Expression)) (array));
};
System.Linq.Expressions.UnaryExpression.prototype.Update = function (operand) {
	if (operand === this.Operand) {
		return this;
	}
	return System.Linq.Expressions.Expression.MakeUnary$1(this.NodeType, operand, this.Type, this.Method);
};
JSIL.MakeProperty(System.Linq.Expressions.UnaryExpression.prototype, "Type", 
	System.Linq.Expressions.UnaryExpression.prototype.get_Type, null);
JSIL.MakeProperty(System.Linq.Expressions.UnaryExpression.prototype, "NodeType", 
	System.Linq.Expressions.UnaryExpression.prototype.get_NodeType, null);
JSIL.MakeProperty(System.Linq.Expressions.UnaryExpression.prototype, "Operand", 
	System.Linq.Expressions.UnaryExpression.prototype.get_Operand, null);
JSIL.MakeProperty(System.Linq.Expressions.UnaryExpression.prototype, "Method", 
	System.Linq.Expressions.UnaryExpression.prototype.get_Method, null);
JSIL.MakeProperty(System.Linq.Expressions.UnaryExpression.prototype, "IsLifted", 
	System.Linq.Expressions.UnaryExpression.prototype.get_IsLifted, null);
JSIL.MakeProperty(System.Linq.Expressions.UnaryExpression.prototype, "IsLiftedToNull", 
	System.Linq.Expressions.UnaryExpression.prototype.get_IsLiftedToNull, null);
JSIL.MakeProperty(System.Linq.Expressions.UnaryExpression.prototype, "CanReduce", 
	System.Linq.Expressions.UnaryExpression.prototype.get_CanReduce, null);
JSIL.MakeProperty(System.Linq.Expressions.UnaryExpression.prototype, "IsPrefix", 
	System.Linq.Expressions.UnaryExpression.prototype.get_IsPrefix, null);
System.Linq.Expressions.UnaryExpression.prototype._operand = null;
System.Linq.Expressions.UnaryExpression.prototype._method = null;
System.Linq.Expressions.UnaryExpression.prototype._nodeType = 0;
System.Linq.Expressions.UnaryExpression.prototype._type = null;

$asm08.System.Linq.Expressions.Compiler.AnalyzedTree.prototype.get_DebugInfoGenerator = function () {
	return this.DebugInfoGenerator$value;
};
$asm08.System.Linq.Expressions.Compiler.AnalyzedTree.prototype.set_DebugInfoGenerator = function (value) {
	this.DebugInfoGenerator$value = value;
};
$asm08.System.Linq.Expressions.Compiler.AnalyzedTree.prototype._ctor = function () {
	this.Scopes = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.Object, $asm08.System.Linq.Expressions.Compiler.CompilerScope), "_ctor$0", []);
	this.Constants = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.Linq.Expressions.LambdaExpression, $asm08.System.Linq.Expressions.Compiler.BoundConstants), "_ctor$0", []);
	System.Object.prototype._ctor.call(this);
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.Compiler.AnalyzedTree.prototype, "DebugInfoGenerator", 
	$asm08.System.Linq.Expressions.Compiler.AnalyzedTree.prototype.get_DebugInfoGenerator, $asm08.System.Linq.Expressions.Compiler.AnalyzedTree.prototype.set_DebugInfoGenerator);
$asm08.System.Linq.Expressions.Compiler.AnalyzedTree.prototype.Scopes = null;
$asm08.System.Linq.Expressions.Compiler.AnalyzedTree.prototype.Constants = null;
$asm08.System.Linq.Expressions.Compiler.AnalyzedTree.prototype.DebugInfoGenerator$value = null;

$asm08.System.Linq.Expressions.Compiler.AssemblyGen.get_Assembly = function () {
	if ($asm08.System.Linq.Expressions.Compiler.AssemblyGen._assembly === null) {
		System.Threading.Interlocked.CompareExchange$b1($asm08.System.Linq.Expressions.Compiler.AssemblyGen)(/* ref */ new JSIL.MemberReference($asm08.System.Linq.Expressions.Compiler.AssemblyGen, "_assembly"), new $asm08.System.Linq.Expressions.Compiler.AssemblyGen(), null);
	}
	return $asm08.System.Linq.Expressions.Compiler.AssemblyGen._assembly;
};
$asm08.System.Linq.Expressions.Compiler.AssemblyGen.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
	var assemblyName = JSIL.New(System.Reflection.AssemblyName, "_ctor$1", ["Snippets"]);
	this._myAssembly = System.AppDomain.CurrentDomain.DefineDynamicAssembly(assemblyName, System.Reflection.Emit.AssemblyBuilderAccess.Run);
	this._myModule = this._myAssembly.DefineDynamicModule$1(assemblyName.Name, false);
};
$asm08.System.Linq.Expressions.Compiler.AssemblyGen.prototype.DefineType = function (name, parent, attr) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(name, "name");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(parent, "parent");
	var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$2", [name]);
	var value = System.Threading.Interlocked.Increment$0(/* ref */ new JSIL.MemberReference(this, "_index"));
	stringBuilder.Append$2("$");
	stringBuilder.Append$9(value);
	((((((stringBuilder.Replace$2("+", "_")).Replace$2("[", "_")).Replace$2("]", "_")).Replace$2("*", "_")).Replace$2("&", "_")).Replace$2(",", "_")).Replace$2("\\", "_");
	name = stringBuilder.toString();
	return this._myModule.DefineType$2(name, attr, parent);
};
$asm08.System.Linq.Expressions.Compiler.AssemblyGen.DefineDelegateType = function (name) {
	return $asm08.System.Linq.Expressions.Compiler.AssemblyGen.Assembly.DefineType(name, System.MulticastDelegate, (System.Reflection.TypeAttributes.AutoClass | System.Reflection.TypeAttributes.Public | System.Reflection.TypeAttributes.Sealed));
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.Compiler.AssemblyGen, "Assembly", 
	$asm08.System.Linq.Expressions.Compiler.AssemblyGen.get_Assembly, null);
$asm08.System.Linq.Expressions.Compiler.AssemblyGen._assembly = null;
$asm08.System.Linq.Expressions.Compiler.AssemblyGen.prototype._myAssembly = null;
$asm08.System.Linq.Expressions.Compiler.AssemblyGen.prototype._myModule = null;
$asm08.System.Linq.Expressions.Compiler.AssemblyGen.prototype._index = 0;

$asm08.System.Linq.Expressions.Compiler.SymbolGuids._cctor = function () {
	$asm08.System.Linq.Expressions.Compiler.SymbolGuids.DocumentType_Text = new System.Guid();
	$asm08.System.Linq.Expressions.Compiler.SymbolGuids.DocumentType_Text = JSIL.New(System.Guid, "_ctor$3", [1518771467, 26129, 4563, 189, 42, 0, 0, 248, 8, 73, 189]);
};

$asm08.System.Linq.Expressions.Compiler.BoundConstants.prototype.get_Count = function () {
	return this._values.Count;
};
$asm08.System.Linq.Expressions.Compiler.BoundConstants.prototype.ToArray = function () {
	return this._values.ToArray();
};
$asm08.System.Linq.Expressions.Compiler.BoundConstants.prototype.AddReference = function (value, type) {
	if (!this._indexes.ContainsKey(value)) {
		this._indexes.Add(value, this._values.Count);
		this._values.Add(value);
	}
	$asm08.System.Dynamic.Utils.Helpers.IncrementCount$b1($asm08.System.Linq.Expressions.Compiler.BoundConstants.TypedConstant)(new $asm08.System.Linq.Expressions.Compiler.BoundConstants.TypedConstant(value, type), this._references);
};
$asm08.System.Linq.Expressions.Compiler.BoundConstants.prototype.EmitConstant = function (lc, value, type) {
	var local = new JSIL.Variable(null);
	if (!lc.CanEmitBoundConstants) {
		throw $asm08.System.Core.Error.CannotCompileConstant(value);
	}
	if (this._cache.TryGetValue(new $asm08.System.Linq.Expressions.Compiler.BoundConstants.TypedConstant(value, type), /* ref */ local)) {
		lc.IL.Emit$14(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone(), local.value);
		return;
	}
	$asm08.System.Linq.Expressions.Compiler.BoundConstants.EmitConstantsArray(lc);
	this.EmitConstantFromArray(lc, value, type);
};
$asm08.System.Linq.Expressions.Compiler.BoundConstants.prototype.EmitCacheConstants = function (lc) {
	var num = 0;
	var enumerator = this._references.GetEnumerator().MemberwiseClone();
	try {
	__loop0__: 
		while (enumerator.MoveNext()) {
			var current = JSIL.Cast(enumerator.Current.MemberwiseClone(), System.Collections.Generic.KeyValuePair$b2.Of($asm08.System.Linq.Expressions.Compiler.BoundConstants.TypedConstant, System.Int32)).MemberwiseClone();
			if (!lc.CanEmitBoundConstants) {
				throw $asm08.System.Core.Error.CannotCompileConstant(current.Key.Value);
			}
			if ($asm08.System.Linq.Expressions.Compiler.BoundConstants.ShouldCache(current.Value)) {
				++num;
			}
		}
	} finally {
		enumerator.IDisposable_Dispose();
	}
	if (num === 0) {
		return;
	}
	$asm08.System.Linq.Expressions.Compiler.BoundConstants.EmitConstantsArray(lc);
	this._cache.Clear();
	var enumerator2 = this._references.GetEnumerator().MemberwiseClone();
	try {
	__loop1__: 
		while (enumerator2.MoveNext()) {
			var current2 = JSIL.Cast(enumerator2.Current.MemberwiseClone(), System.Collections.Generic.KeyValuePair$b2.Of($asm08.System.Linq.Expressions.Compiler.BoundConstants.TypedConstant, System.Int32)).MemberwiseClone();
			if ($asm08.System.Linq.Expressions.Compiler.BoundConstants.ShouldCache(current2.Value)) {
				if (--num > 0) {
					lc.IL.Emit$0(System.Reflection.Emit.OpCodes.Dup.MemberwiseClone());
				}
				var localBuilder = lc.IL.DeclareLocal(current2.Key.Type);
				this.EmitConstantFromArray(lc, current2.Key.Value, localBuilder.LocalType);
				lc.IL.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), localBuilder);
				this._cache.Add(current2.Key.MemberwiseClone(), localBuilder);
			}
		}
	} finally {
		enumerator2.IDisposable_Dispose();
	}
};
$asm08.System.Linq.Expressions.Compiler.BoundConstants.ShouldCache = function (refCount) {
	return (refCount > 2);
};
$asm08.System.Linq.Expressions.Compiler.BoundConstants.EmitConstantsArray = function (lc) {
	lc.EmitClosureArgument();
	lc.IL.Emit$12(System.Reflection.Emit.OpCodes.Ldfld.MemberwiseClone(), System.Runtime.CompilerServices.Closure.GetField$1("Constants"));
};
$asm08.System.Linq.Expressions.Compiler.BoundConstants.prototype.EmitConstantFromArray = function (lc, value, type) {
	var count = new JSIL.Variable(0);
	if (!this._indexes.TryGetValue(value, /* ref */ count)) {
		this._indexes.Add(value, (count.value = this._values.Count));
		this._values.Add(value);
	}
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitInt(lc.IL, count.value);
	lc.IL.Emit$0(System.Reflection.Emit.OpCodes.Ldelem_Ref.MemberwiseClone());
	if (type.IsValueType) {
		lc.IL.Emit$6(System.Reflection.Emit.OpCodes.Unbox_Any.MemberwiseClone(), type);
		return;
	}
	if (type !== System.Object) {
		lc.IL.Emit$6(System.Reflection.Emit.OpCodes.Castclass.MemberwiseClone(), type);
	}
};
$asm08.System.Linq.Expressions.Compiler.BoundConstants.prototype._ctor = function () {
	this._values = new (System.Collections.Generic.List$b1.Of(System.Object)) ();
	this._indexes = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.Object, System.Int32), "_ctor$2", [$asm08.System.Dynamic.Utils.ReferenceEqualityComparer$b1.Of(System.Object).Instance]);
	this._references = JSIL.New(System.Collections.Generic.Dictionary$b2.Of($asm08.System.Linq.Expressions.Compiler.BoundConstants.TypedConstant, System.Int32), "_ctor$0", []);
	this._cache = JSIL.New(System.Collections.Generic.Dictionary$b2.Of($asm08.System.Linq.Expressions.Compiler.BoundConstants.TypedConstant, System.Reflection.Emit.LocalBuilder), "_ctor$0", []);
	System.Object.prototype._ctor.call(this);
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.Compiler.BoundConstants.prototype, "Count", 
	$asm08.System.Linq.Expressions.Compiler.BoundConstants.prototype.get_Count, null);
$asm08.System.Linq.Expressions.Compiler.BoundConstants.prototype._values = null;
$asm08.System.Linq.Expressions.Compiler.BoundConstants.prototype._indexes = null;
$asm08.System.Linq.Expressions.Compiler.BoundConstants.prototype._references = null;
$asm08.System.Linq.Expressions.Compiler.BoundConstants.prototype._cache = null;

$asm08.System.Linq.Expressions.Compiler.BoundConstants.TypedConstant.prototype._ctor = function (value, type) {
	this.Value = value;
	this.Type = type;
};
$asm08.System.Linq.Expressions.Compiler.BoundConstants.TypedConstant.prototype.GetHashCode = function () {
	return (System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(this.Value) ^ this.Type.GetHashCode());
};
$asm08.System.Linq.Expressions.Compiler.BoundConstants.TypedConstant.prototype.Equals$0 = function (other) {
	return (System.Object.ReferenceEquals(this.Value, other.Value) && this.Type.Equals$1(other.Type));
};
$asm08.System.Linq.Expressions.Compiler.BoundConstants.TypedConstant.prototype.Equals$1 = function (obj) {
	return ((JSIL.TryCast(obj, $asm08.System.Linq.Expressions.Compiler.BoundConstants.TypedConstant) !== new $asm08.System.Linq.Expressions.Compiler.BoundConstants.TypedConstant()) && this.Equals$0(JSIL.Cast(obj, $asm08.System.Linq.Expressions.Compiler.BoundConstants.TypedConstant).MemberwiseClone()));
};
JSIL.OverloadedMethod($asm08.System.Linq.Expressions.Compiler.BoundConstants.TypedConstant.prototype, "Equals", [
		["Equals$0", [$asm08.System.Linq.Expressions.Compiler.BoundConstants.TypedConstant]], 
		["Equals$1", [System.Object]]
	]);
$asm08.System.Linq.Expressions.Compiler.BoundConstants.TypedConstant.prototype.Value = null;
$asm08.System.Linq.Expressions.Compiler.BoundConstants.TypedConstant.prototype.Type = null;

System.Runtime.CompilerServices.Closure.prototype._ctor = function (constants, locals) {
	System.Object.prototype._ctor.call(this);
	this.Constants = constants;
	this.Locals = locals;
};
System.Runtime.CompilerServices.Closure.prototype.Constants = null;
System.Runtime.CompilerServices.Closure.prototype.Locals = null;

$asm08.System.Linq.Expressions.Compiler.CompilerScope.prototype._ctor = function (node, isMethod) {
	this.Definitions = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.Linq.Expressions.ParameterExpression, $asm08.System.Linq.Expressions.Compiler.VariableStorageKind), "_ctor$0", []);
	this._locals = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.Linq.Expressions.ParameterExpression, $asm08.System.Linq.Expressions.Compiler.CompilerScope.Storage), "_ctor$0", []);
	System.Object.prototype._ctor.call(this);
	this.Node = node;
	this.IsMethod = isMethod;
	var variables = $asm08.System.Linq.Expressions.Compiler.CompilerScope.GetVariables(node);
	this.Definitions = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.Linq.Expressions.ParameterExpression, $asm08.System.Linq.Expressions.Compiler.VariableStorageKind), "_ctor$1", [variables.ICollection$b1_Count]);
	var enumerator = variables.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current;
			this.Definitions.Add(current, $asm08.System.Linq.Expressions.Compiler.VariableStorageKind.Local);
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
};
$asm08.System.Linq.Expressions.Compiler.CompilerScope.prototype.get_NearestHoistedLocals = function () {
	return JSIL.Coalesce(this._hoistedLocals, this._closureHoistedLocals);
};
$asm08.System.Linq.Expressions.Compiler.CompilerScope.prototype.Enter = function (lc, parent) {
	this.SetParent(lc, parent);
	this.AllocateLocals(lc);
	if (!(!this.IsMethod || (this._closureHoistedLocals === null))) {
		this.EmitClosureAccess(lc, this._closureHoistedLocals);
	}
	this.EmitNewHoistedLocals(lc);
	if (this.IsMethod) {
		this.EmitCachedVariables();
	}
	return this;
};
$asm08.System.Linq.Expressions.Compiler.CompilerScope.prototype.Exit = function () {
	if (!this.IsMethod) {
		var enumerator = JSIL.Cast(this._locals.Values, System.Collections.Generic.Dictionary$b2.ValueCollection.Of(System.Linq.Expressions.ParameterExpression, $asm08.System.Linq.Expressions.Compiler.CompilerScope.Storage)).GetEnumerator().MemberwiseClone();
		try {
		__loop0__: 
			while (enumerator.MoveNext()) {
				var current = enumerator.Current;
				current.FreeLocal();
			}
		} finally {
			enumerator.IDisposable_Dispose();
		}
	}
	this._parent = null;
	this._hoistedLocals = null;
	this._closureHoistedLocals = null;
	this._locals.Clear();
	return this._parent;
};
$asm08.System.Linq.Expressions.Compiler.CompilerScope.prototype.EmitVariableAccess = function (lc, vars) {
	if (this.NearestHoistedLocals !== null) {
		var list = new (System.Collections.Generic.List$b1.Of(System.Int64)) (vars.Count);
		var enumerator = vars.GetEnumerator();
		try {
		__loop0__: 
			while (enumerator.IEnumerator_MoveNext()) {
				var current = enumerator.IEnumerator$b1_Current;
				var num = 0;
			__loop1__: 
				for (var hoistedLocals = this.NearestHoistedLocals; !hoistedLocals.Indexes.ContainsKey(current); hoistedLocals = hoistedLocals.Parent) {
					++num;
				}
				var item = ((num << 32) | hoistedLocals.Indexes.get_Item(current));
				list.Add(item);
			}
		} finally {
			if (enumerator !== null) {
				enumerator.IDisposable_Dispose();
			}
		}
		if (list.Count > 0) {
			this.EmitGet(this.NearestHoistedLocals.SelfVariable);
			lc.EmitConstantArray$b1(System.Int64)(list.ToArray());
			lc.IL.Emit$4(System.Reflection.Emit.OpCodes.Call.MemberwiseClone(), System.Runtime.CompilerServices.RuntimeOps.GetMethod$3("CreateRuntimeVariables", JSIL.Array.New(System.Type, [System.Array.Of(System.Object), System.Array.Of(System.Int64)])));
			return;
		}
	}
	lc.IL.Emit$4(System.Reflection.Emit.OpCodes.Call.MemberwiseClone(), System.Runtime.CompilerServices.RuntimeOps.GetMethod$3("CreateRuntimeVariables", System.Type.EmptyTypes));
};
$asm08.System.Linq.Expressions.Compiler.CompilerScope.prototype.AddLocal = function (gen, variable) {
	this._locals.Add(variable, new $asm08.System.Linq.Expressions.Compiler.CompilerScope.LocalStorage(gen, variable));
};
$asm08.System.Linq.Expressions.Compiler.CompilerScope.prototype.EmitGet = function (variable) {
	this.ResolveVariable$0(variable).EmitLoad();
};
$asm08.System.Linq.Expressions.Compiler.CompilerScope.prototype.EmitSet = function (variable) {
	this.ResolveVariable$0(variable).EmitStore$0();
};
$asm08.System.Linq.Expressions.Compiler.CompilerScope.prototype.EmitAddressOf = function (variable) {
	this.ResolveVariable$0(variable).EmitAddress();
};
$asm08.System.Linq.Expressions.Compiler.CompilerScope.prototype.ResolveVariable$0 = function (variable) {
	return this.ResolveVariable$1(variable, this.NearestHoistedLocals);
};
$asm08.System.Linq.Expressions.Compiler.CompilerScope.prototype.ResolveVariable$1 = function (variable, hoistedLocals) {
	var result = new JSIL.Variable(null), index = new JSIL.Variable(0);
	var compilerScope = this;
__loop0__: 
	while (compilerScope) {
		if (compilerScope._locals.TryGetValue(variable, /* ref */ result)) {
			return result.value;
		}
		if (compilerScope.IsMethod) {
			break __loop0__;
		}
		compilerScope = compilerScope._parent;
	}
	var hoistedLocals2 = hoistedLocals;
__loop1__: 
	while (hoistedLocals2) {
		if (hoistedLocals2.Indexes.TryGetValue(variable, /* ref */ index)) {
			return new $asm08.System.Linq.Expressions.Compiler.CompilerScope.ElementBoxStorage(this.ResolveVariable$1(hoistedLocals2.SelfVariable, hoistedLocals), index.value, variable);
		}
		hoistedLocals2 = hoistedLocals2.Parent;
	}
	throw $asm08.System.Core.Error.UndefinedVariable(variable.Name, variable.Type, this.CurrentLambdaName);
};
$asm08.System.Linq.Expressions.Compiler.CompilerScope.prototype.SetParent = function (lc, parent) {
	this._parent = parent;
	if (!(!this.NeedsClosure || (this._parent === null))) {
		this._closureHoistedLocals = this._parent.NearestHoistedLocals;
	}
	var readOnlyCollection = $asm08.System.Dynamic.Utils.CollectionExtensions.ToReadOnly$b1(System.Linq.Expressions.ParameterExpression)(System.Linq.Enumerable.Where$b1$0(System.Linq.Expressions.ParameterExpression)(this.GetVariables(), function (p) {
				return (this.Definitions.get_Item(p) === $asm08.System.Linq.Expressions.Compiler.VariableStorageKind.Hoisted);
			}));
	if (readOnlyCollection.Count > 0) {
		this._hoistedLocals = new $asm08.System.Linq.Expressions.Compiler.HoistedLocals(this._closureHoistedLocals, readOnlyCollection);
		this.AddLocal(lc, this._hoistedLocals.SelfVariable);
	}
};
$asm08.System.Linq.Expressions.Compiler.CompilerScope.prototype.EmitNewHoistedLocals = function (lc) {
	if (this._hoistedLocals === null) {
		return;
	}
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitInt(lc.IL, this._hoistedLocals.Variables.Count);
	lc.IL.Emit$6(System.Reflection.Emit.OpCodes.Newarr.MemberwiseClone(), System.Object);
	var num = 0;
	var enumerator = this._hoistedLocals.Variables.GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current;
			lc.IL.Emit$0(System.Reflection.Emit.OpCodes.Dup.MemberwiseClone());
			$asm08.System.Linq.Expressions.Compiler.ILGen.EmitInt(lc.IL, num++);
			var type = System.Runtime.CompilerServices.StrongBox$b1.MakeGenericType(JSIL.Array.New(System.Type, [current.Type]));
			if (!(!this.IsMethod || !lc.Parameters.Contains(current))) {
				var index = lc.Parameters.IndexOf(current);
				lc.EmitLambdaArgument(index);
				lc.IL.Emit$5(System.Reflection.Emit.OpCodes.Newobj.MemberwiseClone(), type.GetConstructor$2(JSIL.Array.New(System.Type, [current.Type])));
			} else if (current === this._hoistedLocals.ParentVariable) {
				this.ResolveVariable$1(current, this._closureHoistedLocals).EmitLoad();
				lc.IL.Emit$5(System.Reflection.Emit.OpCodes.Newobj.MemberwiseClone(), type.GetConstructor$2(JSIL.Array.New(System.Type, [current.Type])));
			} else {
				lc.IL.Emit$5(System.Reflection.Emit.OpCodes.Newobj.MemberwiseClone(), type.GetConstructor$2(System.Type.EmptyTypes));
			}
			if (this.ShouldCache$1(current)) {
				lc.IL.Emit$0(System.Reflection.Emit.OpCodes.Dup.MemberwiseClone());
				this.CacheBoxToLocal(lc, current);
			}
			lc.IL.Emit$0(System.Reflection.Emit.OpCodes.Stelem_Ref.MemberwiseClone());
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	this.EmitSet(this._hoistedLocals.SelfVariable);
};
$asm08.System.Linq.Expressions.Compiler.CompilerScope.prototype.EmitCachedVariables = function () {
	if (this.ReferenceCount === null) {
		return;
	}
	var enumerator = this.ReferenceCount.GetEnumerator().MemberwiseClone();
	try {
	__loop0__: 
		while (enumerator.MoveNext()) {
			var current = JSIL.Cast(enumerator.Current.MemberwiseClone(), System.Collections.Generic.KeyValuePair$b2.Of(System.Linq.Expressions.ParameterExpression, System.Int32)).MemberwiseClone();
			if (this.ShouldCache$0(current.Key, current.Value)) {
				var elementBoxStorage = JSIL.TryCast(this.ResolveVariable$0(current.Key), $asm08.System.Linq.Expressions.Compiler.CompilerScope.ElementBoxStorage);
				if (elementBoxStorage !== null) {
					elementBoxStorage.EmitLoadBox();
					this.CacheBoxToLocal(elementBoxStorage.Compiler, current.Key);
				}
			}
		}
	} finally {
		enumerator.IDisposable_Dispose();
	}
};
$asm08.System.Linq.Expressions.Compiler.CompilerScope.prototype.ShouldCache$0 = function (v, refCount) {
	return ((refCount > 2) && !this._locals.ContainsKey(v));
};
$asm08.System.Linq.Expressions.Compiler.CompilerScope.prototype.ShouldCache$1 = function (v) {
	var refCount = new JSIL.Variable(0);
	return (this.ReferenceCount && 
		this.ReferenceCount.TryGetValue(v, /* ref */ refCount) && this.ShouldCache$0(v, refCount.value));
};
$asm08.System.Linq.Expressions.Compiler.CompilerScope.prototype.CacheBoxToLocal = function (lc, v) {
	var localBoxStorage = new $asm08.System.Linq.Expressions.Compiler.CompilerScope.LocalBoxStorage(lc, v);
	localBoxStorage.EmitStoreBox();
	this._locals.Add(v, localBoxStorage);
};
$asm08.System.Linq.Expressions.Compiler.CompilerScope.prototype.EmitClosureAccess = function (lc, locals) {
	if (locals === null) {
		return;
	}
	this.EmitClosureToVariable(lc, locals);
__loop0__: 
	while (locals = locals.Parent) {
		var selfVariable = locals.SelfVariable;
		var localStorage = new $asm08.System.Linq.Expressions.Compiler.CompilerScope.LocalStorage(lc, selfVariable);
		localStorage.EmitStore$1(this.ResolveVariable$0(selfVariable));
		this._locals.Add(selfVariable, localStorage);
	}
};
$asm08.System.Linq.Expressions.Compiler.CompilerScope.prototype.EmitClosureToVariable = function (lc, locals) {
	lc.EmitClosureArgument();
	lc.IL.Emit$12(System.Reflection.Emit.OpCodes.Ldfld.MemberwiseClone(), System.Runtime.CompilerServices.Closure.GetField$1("Locals"));
	this.AddLocal(lc, locals.SelfVariable);
	this.EmitSet(locals.SelfVariable);
};
$asm08.System.Linq.Expressions.Compiler.CompilerScope.prototype.AllocateLocals = function (lc) {
	var enumerator = this.GetVariables().IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current;
			if (!JSIL.Cast(this.Definitions.get_Item(current), System.Boolean)) {
				if (!(!this.IsMethod || !lc.Parameters.Contains(current))) {
					var value = new $asm08.System.Linq.Expressions.Compiler.CompilerScope.ArgumentStorage(lc, current);
				} else {
					value = new $asm08.System.Linq.Expressions.Compiler.CompilerScope.LocalStorage(lc, current);
				}
				this._locals.Add(current, value);
			}
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
};
$asm08.System.Linq.Expressions.Compiler.CompilerScope.prototype.GetVariables = function () {
	var variables = $asm08.System.Linq.Expressions.Compiler.CompilerScope.GetVariables(this.Node);
	if (this.MergedScopes === null) {
		return variables;
	}
	var list = new (System.Collections.Generic.List$b1.Of(System.Linq.Expressions.ParameterExpression)) (variables);
	var enumerator = this.MergedScopes.GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current;
			list.AddRange($asm08.System.Linq.Expressions.Compiler.CompilerScope.GetVariables(current));
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	return list;
};
$asm08.System.Linq.Expressions.Compiler.CompilerScope.GetVariables = function (scope) {
	var lambdaExpression = JSIL.TryCast(scope, System.Linq.Expressions.LambdaExpression);
	if (lambdaExpression !== null) {
		return JSIL.Cast(lambdaExpression.Parameters, System.Collections.Generic.IList$b1.Of(System.Linq.Expressions.ParameterExpression));
	}
	var blockExpression = JSIL.TryCast(scope, System.Linq.Expressions.BlockExpression);
	if (blockExpression !== null) {
		return JSIL.Cast(blockExpression.Variables, System.Collections.Generic.IList$b1.Of(System.Linq.Expressions.ParameterExpression));
	}
	return JSIL.Array.New(System.Linq.Expressions.ParameterExpression, [JSIL.Cast(scope, System.Linq.Expressions.CatchBlock).Variable]);
};
$asm08.System.Linq.Expressions.Compiler.CompilerScope.prototype.get_CurrentLambdaName = function () {
__loop0__: 
	do {
		var lambdaExpression = JSIL.TryCast(this.Node, System.Linq.Expressions.LambdaExpression);
	} while (lambdaExpression === null);
	return lambdaExpression.Name;
};
JSIL.OverloadedMethod($asm08.System.Linq.Expressions.Compiler.CompilerScope.prototype, "ResolveVariable", [
		["ResolveVariable$0", [System.Linq.Expressions.ParameterExpression]], 
		["ResolveVariable$1", [System.Linq.Expressions.ParameterExpression, $asm08.System.Linq.Expressions.Compiler.HoistedLocals]]
	]);
JSIL.OverloadedMethod($asm08.System.Linq.Expressions.Compiler.CompilerScope.prototype, "ShouldCache", [
		["ShouldCache$0", [System.Linq.Expressions.ParameterExpression, System.Int32]], 
		["ShouldCache$1", [System.Linq.Expressions.ParameterExpression]]
	]);
JSIL.MakeProperty($asm08.System.Linq.Expressions.Compiler.CompilerScope.prototype, "NearestHoistedLocals", 
	$asm08.System.Linq.Expressions.Compiler.CompilerScope.prototype.get_NearestHoistedLocals, null);
JSIL.MakeProperty($asm08.System.Linq.Expressions.Compiler.CompilerScope.prototype, "CurrentLambdaName", 
	$asm08.System.Linq.Expressions.Compiler.CompilerScope.prototype.get_CurrentLambdaName, null);
$asm08.System.Linq.Expressions.Compiler.CompilerScope.prototype._parent = null;
$asm08.System.Linq.Expressions.Compiler.CompilerScope.prototype.Node = null;
$asm08.System.Linq.Expressions.Compiler.CompilerScope.prototype.IsMethod = false;
$asm08.System.Linq.Expressions.Compiler.CompilerScope.prototype.NeedsClosure = false;
$asm08.System.Linq.Expressions.Compiler.CompilerScope.prototype.Definitions = null;
$asm08.System.Linq.Expressions.Compiler.CompilerScope.prototype.ReferenceCount = null;
$asm08.System.Linq.Expressions.Compiler.CompilerScope.prototype.MergedScopes = null;
$asm08.System.Linq.Expressions.Compiler.CompilerScope.prototype._hoistedLocals = null;
$asm08.System.Linq.Expressions.Compiler.CompilerScope.prototype._closureHoistedLocals = null;
$asm08.System.Linq.Expressions.Compiler.CompilerScope.prototype._locals = null;

$asm08.System.Linq.Expressions.Compiler.CompilerScope.Storage.prototype._ctor = function (compiler, variable) {
	System.Object.prototype._ctor.call(this);
	this.Compiler = compiler;
	this.Variable = variable;
};
$asm08.System.Linq.Expressions.Compiler.CompilerScope.Storage.prototype.EmitStore$1 = function (value) {
	value.EmitLoad();
	this.EmitStore$0();
};
$asm08.System.Linq.Expressions.Compiler.CompilerScope.Storage.prototype.FreeLocal = function () {
};
JSIL.OverloadedMethod($asm08.System.Linq.Expressions.Compiler.CompilerScope.Storage.prototype, "EmitStore", [
		["EmitStore$0", []], 
		["EmitStore$1", [$asm08.System.Linq.Expressions.Compiler.CompilerScope.Storage]]
	]);
$asm08.System.Linq.Expressions.Compiler.CompilerScope.Storage.prototype.Compiler = null;
$asm08.System.Linq.Expressions.Compiler.CompilerScope.Storage.prototype.Variable = null;

$asm08.System.Linq.Expressions.Compiler.CompilerScope.LocalStorage.prototype._ctor = function (compiler, variable) {
	$asm08.System.Linq.Expressions.Compiler.CompilerScope.Storage.prototype._ctor.call(this, compiler, variable);
	this._local = compiler.GetNamedLocal(variable.IsByRef ? variable.Type.MakeByRefType() : variable.Type, variable);
};
$asm08.System.Linq.Expressions.Compiler.CompilerScope.LocalStorage.prototype.EmitLoad = function () {
	this.Compiler.IL.Emit$14(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone(), this._local);
};
$asm08.System.Linq.Expressions.Compiler.CompilerScope.LocalStorage.prototype.EmitStore = function () {
	this.Compiler.IL.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), this._local);
};
$asm08.System.Linq.Expressions.Compiler.CompilerScope.LocalStorage.prototype.EmitAddress = function () {
	this.Compiler.IL.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), this._local);
};
$asm08.System.Linq.Expressions.Compiler.CompilerScope.LocalStorage.prototype._local = null;

$asm08.System.Linq.Expressions.Compiler.CompilerScope.ArgumentStorage.prototype._ctor = function (compiler, p) {
	$asm08.System.Linq.Expressions.Compiler.CompilerScope.Storage.prototype._ctor.call(this, compiler, p);
	this._argument = compiler.GetLambdaArgument(compiler.Parameters.IndexOf(p));
};
$asm08.System.Linq.Expressions.Compiler.CompilerScope.ArgumentStorage.prototype.EmitLoad = function () {
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitLoadArg(this.Compiler.IL, this._argument);
};
$asm08.System.Linq.Expressions.Compiler.CompilerScope.ArgumentStorage.prototype.EmitStore = function () {
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitStoreArg(this.Compiler.IL, this._argument);
};
$asm08.System.Linq.Expressions.Compiler.CompilerScope.ArgumentStorage.prototype.EmitAddress = function () {
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitLoadArgAddress(this.Compiler.IL, this._argument);
};
$asm08.System.Linq.Expressions.Compiler.CompilerScope.ArgumentStorage.prototype._argument = 0;

$asm08.System.Linq.Expressions.Compiler.CompilerScope.ElementBoxStorage.prototype._ctor = function (array, index, variable) {
	$asm08.System.Linq.Expressions.Compiler.CompilerScope.Storage.prototype._ctor.call(this, array.Compiler, variable);
	this._array = array;
	this._index = index;
	this._boxType = System.Runtime.CompilerServices.StrongBox$b1.MakeGenericType(JSIL.Array.New(System.Type, [variable.Type]));
	this._boxValueField = this._boxType.GetField$1("Value");
};
$asm08.System.Linq.Expressions.Compiler.CompilerScope.ElementBoxStorage.prototype.EmitLoad = function () {
	this.EmitLoadBox();
	this.Compiler.IL.Emit$12(System.Reflection.Emit.OpCodes.Ldfld.MemberwiseClone(), this._boxValueField);
};
$asm08.System.Linq.Expressions.Compiler.CompilerScope.ElementBoxStorage.prototype.EmitStore$0 = function () {
	var local = this.Compiler.GetLocal(this.Variable.Type);
	this.Compiler.IL.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), local);
	this.EmitLoadBox();
	this.Compiler.IL.Emit$14(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone(), local);
	this.Compiler.FreeLocal(local);
	this.Compiler.IL.Emit$12(System.Reflection.Emit.OpCodes.Stfld.MemberwiseClone(), this._boxValueField);
};
$asm08.System.Linq.Expressions.Compiler.CompilerScope.ElementBoxStorage.prototype.EmitStore$1 = function (value) {
	this.EmitLoadBox();
	value.EmitLoad();
	this.Compiler.IL.Emit$12(System.Reflection.Emit.OpCodes.Stfld.MemberwiseClone(), this._boxValueField);
};
$asm08.System.Linq.Expressions.Compiler.CompilerScope.ElementBoxStorage.prototype.EmitAddress = function () {
	this.EmitLoadBox();
	this.Compiler.IL.Emit$12(System.Reflection.Emit.OpCodes.Ldflda.MemberwiseClone(), this._boxValueField);
};
$asm08.System.Linq.Expressions.Compiler.CompilerScope.ElementBoxStorage.prototype.EmitLoadBox = function () {
	this._array.EmitLoad();
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitInt(this.Compiler.IL, this._index);
	this.Compiler.IL.Emit$0(System.Reflection.Emit.OpCodes.Ldelem_Ref.MemberwiseClone());
	this.Compiler.IL.Emit$6(System.Reflection.Emit.OpCodes.Castclass.MemberwiseClone(), this._boxType);
};
JSIL.OverloadedMethod($asm08.System.Linq.Expressions.Compiler.CompilerScope.ElementBoxStorage.prototype, "EmitStore", [
		["EmitStore$0", []], 
		["EmitStore$1", [$asm08.System.Linq.Expressions.Compiler.CompilerScope.Storage]]
	]);
$asm08.System.Linq.Expressions.Compiler.CompilerScope.ElementBoxStorage.prototype._index = 0;
$asm08.System.Linq.Expressions.Compiler.CompilerScope.ElementBoxStorage.prototype._array = null;
$asm08.System.Linq.Expressions.Compiler.CompilerScope.ElementBoxStorage.prototype._boxType = null;
$asm08.System.Linq.Expressions.Compiler.CompilerScope.ElementBoxStorage.prototype._boxValueField = null;

$asm08.System.Linq.Expressions.Compiler.CompilerScope.LocalBoxStorage.prototype._ctor = function (compiler, variable) {
	$asm08.System.Linq.Expressions.Compiler.CompilerScope.Storage.prototype._ctor.call(this, compiler, variable);
	this._boxType = System.Runtime.CompilerServices.StrongBox$b1.MakeGenericType(JSIL.Array.New(System.Type, [variable.Type]));
	this._boxValueField = this._boxType.GetField$1("Value");
	this._boxLocal = compiler.GetNamedLocal(this._boxType, variable);
};
$asm08.System.Linq.Expressions.Compiler.CompilerScope.LocalBoxStorage.prototype.EmitLoad = function () {
	this.Compiler.IL.Emit$14(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone(), this._boxLocal);
	this.Compiler.IL.Emit$12(System.Reflection.Emit.OpCodes.Ldfld.MemberwiseClone(), this._boxValueField);
};
$asm08.System.Linq.Expressions.Compiler.CompilerScope.LocalBoxStorage.prototype.EmitAddress = function () {
	this.Compiler.IL.Emit$14(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone(), this._boxLocal);
	this.Compiler.IL.Emit$12(System.Reflection.Emit.OpCodes.Ldflda.MemberwiseClone(), this._boxValueField);
};
$asm08.System.Linq.Expressions.Compiler.CompilerScope.LocalBoxStorage.prototype.EmitStore$0 = function () {
	var local = this.Compiler.GetLocal(this.Variable.Type);
	this.Compiler.IL.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), local);
	this.Compiler.IL.Emit$14(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone(), this._boxLocal);
	this.Compiler.IL.Emit$14(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone(), local);
	this.Compiler.FreeLocal(local);
	this.Compiler.IL.Emit$12(System.Reflection.Emit.OpCodes.Stfld.MemberwiseClone(), this._boxValueField);
};
$asm08.System.Linq.Expressions.Compiler.CompilerScope.LocalBoxStorage.prototype.EmitStore$1 = function (value) {
	this.Compiler.IL.Emit$14(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone(), this._boxLocal);
	value.EmitLoad();
	this.Compiler.IL.Emit$12(System.Reflection.Emit.OpCodes.Stfld.MemberwiseClone(), this._boxValueField);
};
$asm08.System.Linq.Expressions.Compiler.CompilerScope.LocalBoxStorage.prototype.EmitStoreBox = function () {
	this.Compiler.IL.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), this._boxLocal);
};
JSIL.OverloadedMethod($asm08.System.Linq.Expressions.Compiler.CompilerScope.LocalBoxStorage.prototype, "EmitStore", [
		["EmitStore$0", []], 
		["EmitStore$1", [$asm08.System.Linq.Expressions.Compiler.CompilerScope.Storage]]
	]);
$asm08.System.Linq.Expressions.Compiler.CompilerScope.LocalBoxStorage.prototype._boxLocal = null;
$asm08.System.Linq.Expressions.Compiler.CompilerScope.LocalBoxStorage.prototype._boxType = null;
$asm08.System.Linq.Expressions.Compiler.CompilerScope.LocalBoxStorage.prototype._boxValueField = null;

$asm08.System.Linq.Expressions.ConstantCheck.IsNull = function (e) {
	return ((e.NodeType === System.Linq.Expressions.ExpressionType.Constant) && (JSIL.Cast(e, System.Linq.Expressions.ConstantExpression).Value === null));
};
$asm08.System.Linq.Expressions.ConstantCheck.AnalyzeTypeIs$0 = function (typeIs) {
	return $asm08.System.Linq.Expressions.ConstantCheck.AnalyzeTypeIs$2(typeIs.Expression, typeIs.TypeOperand);
};
$asm08.System.Linq.Expressions.ConstantCheck.AnalyzeTypeIs$1 = function (typeAs) {
	return $asm08.System.Linq.Expressions.ConstantCheck.AnalyzeTypeIs$2(typeAs.Operand, typeAs.Type);
};
$asm08.System.Linq.Expressions.ConstantCheck.AnalyzeTypeIs$2 = function (operand, testType) {
	var type = operand.Type;
	if (type === System.Void) {
		return $asm08.System.Linq.Expressions.AnalyzeTypeIsResult.KnownFalse;
	}
	var nonNullableType = $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(type);
	var nonNullableType2 = $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(testType);
	if (!nonNullableType2.IsAssignableFrom(nonNullableType)) {
		return $asm08.System.Linq.Expressions.AnalyzeTypeIsResult.Unknown;
	}
	if (!(!type.IsValueType || $asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(type))) {
		return $asm08.System.Linq.Expressions.AnalyzeTypeIsResult.KnownTrue;
	}
	return $asm08.System.Linq.Expressions.AnalyzeTypeIsResult.KnownAssignable;
};
JSIL.OverloadedMethod($asm08.System.Linq.Expressions.ConstantCheck, "AnalyzeTypeIs", [
		["AnalyzeTypeIs$0", [System.Linq.Expressions.TypeBinaryExpression]], 
		["AnalyzeTypeIs$1", [System.Linq.Expressions.UnaryExpression]], 
		["AnalyzeTypeIs$2", [System.Linq.Expressions.Expression, System.Type]]
	]);

System.Runtime.CompilerServices.DebugInfoGenerator.CreatePdbGenerator = function () {
	return new $asm08.System.Runtime.CompilerServices.SymbolDocumentGenerator();
};
System.Runtime.CompilerServices.DebugInfoGenerator.prototype.MarkSequencePoint$1 = function (method, methodBase, ilg, sequencePoint) {
	this.MarkSequencePoint$0(method, ilg.ILOffset, sequencePoint);
};
System.Runtime.CompilerServices.DebugInfoGenerator.prototype.SetLocalName = function (localBuilder, name) {
};
System.Runtime.CompilerServices.DebugInfoGenerator.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
JSIL.OverloadedMethod(System.Runtime.CompilerServices.DebugInfoGenerator.prototype, "MarkSequencePoint", [
		["MarkSequencePoint$0", [System.Linq.Expressions.LambdaExpression, System.Int32, System.Linq.Expressions.DebugInfoExpression]], 
		["MarkSequencePoint$1", [System.Linq.Expressions.LambdaExpression, System.Reflection.MethodBase, System.Linq.Expressions.Compiler.OffsetTrackingILGenerator, System.Linq.Expressions.DebugInfoExpression]]
	]);

$asm08.System.Linq.Expressions.Compiler.DelegateHelpers.MakeNewCustomDelegate = function (types) {
	var returnType = types[(types.length - 1)];
	var parameterTypes = $asm08.System.Dynamic.Utils.CollectionExtensions.RemoveLast$b1(System.Type)(types);
	var typeBuilder = $asm08.System.Linq.Expressions.Compiler.AssemblyGen.DefineDelegateType(JSIL.ConcatString("Delegate", types.length));
	(typeBuilder.DefineConstructor$0((System.Reflection.MethodAttributes.FamANDAssem | System.Reflection.MethodAttributes.Family | System.Reflection.MethodAttributes.HideBySig | System.Reflection.MethodAttributes.Public | System.Reflection.MethodAttributes.RTSpecialName), System.Reflection.CallingConventions.Standard, $asm08.System.Linq.Expressions.Compiler.DelegateHelpers._DelegateCtorSignature)).SetImplementationFlags(System.Reflection.MethodImplAttributes.Runtime);
	(typeBuilder.DefineMethod$0("Invoke", (System.Reflection.MethodAttributes.FamANDAssem | System.Reflection.MethodAttributes.Family | System.Reflection.MethodAttributes.HideBySig | System.Reflection.MethodAttributes.NewSlot | System.Reflection.MethodAttributes.Public | System.Reflection.MethodAttributes.Virtual | System.Reflection.MethodAttributes.VtableLayoutMask), returnType, parameterTypes)).SetImplementationFlags(System.Reflection.MethodImplAttributes.Runtime);
	return typeBuilder.CreateType();
};
$asm08.System.Linq.Expressions.Compiler.DelegateHelpers.MakeDelegateType = function (types) {
	var delegateCache = null;
	System.Threading.Monitor.Enter((delegateCache = $asm08.System.Linq.Expressions.Compiler.DelegateHelpers._DelegateCache));
	try {
		var typeInfo = $asm08.System.Linq.Expressions.Compiler.DelegateHelpers._DelegateCache;
	__loop0__: 
		for (var i = 0; i < types.length; ++i) {
			typeInfo = $asm08.System.Linq.Expressions.Compiler.DelegateHelpers.NextTypeInfo$1(types[i], typeInfo);
		}
		if (typeInfo.DelegateType === null) {
			typeInfo.DelegateType = $asm08.System.Linq.Expressions.Compiler.DelegateHelpers.MakeNewDelegate(JSIL.Cast(types.Clone(), System.Array.Of(System.Type)));
		}
		var delegateType = typeInfo.DelegateType;
	} finally {
		System.Threading.Monitor.Exit(delegateCache);
	}
	return delegateType;
};
$asm08.System.Linq.Expressions.Compiler.DelegateHelpers.MakeCallSiteDelegate = function (types, returnType) {
	var delegateCache = null;
	System.Threading.Monitor.Enter((delegateCache = $asm08.System.Linq.Expressions.Compiler.DelegateHelpers._DelegateCache));
	try {
		var typeInfo = $asm08.System.Linq.Expressions.Compiler.DelegateHelpers._DelegateCache;
		typeInfo = $asm08.System.Linq.Expressions.Compiler.DelegateHelpers.NextTypeInfo$1(System.Runtime.CompilerServices.CallSite, typeInfo);
	__loop0__: 
		for (var i = 0; i < types.Count; ++i) {
			typeInfo = $asm08.System.Linq.Expressions.Compiler.DelegateHelpers.NextTypeInfo$1(types.get_Item(i).Type, typeInfo);
		}
		typeInfo = $asm08.System.Linq.Expressions.Compiler.DelegateHelpers.NextTypeInfo$1(returnType, typeInfo);
		if (typeInfo.DelegateType === null) {
			typeInfo.MakeDelegateType$1(returnType, types);
		}
		var delegateType = typeInfo.DelegateType;
	} finally {
		System.Threading.Monitor.Exit(delegateCache);
	}
	return delegateType;
};
$asm08.System.Linq.Expressions.Compiler.DelegateHelpers.MakeDeferredSiteDelegate = function (args, returnType) {
	var delegateCache = null;
	System.Threading.Monitor.Enter((delegateCache = $asm08.System.Linq.Expressions.Compiler.DelegateHelpers._DelegateCache));
	try {
		var typeInfo = $asm08.System.Linq.Expressions.Compiler.DelegateHelpers._DelegateCache;
		typeInfo = $asm08.System.Linq.Expressions.Compiler.DelegateHelpers.NextTypeInfo$1(System.Runtime.CompilerServices.CallSite, typeInfo);
	__loop0__: 
		for (var i = 0; i < args.length; ++i) {
			var dynamicMetaObject = args[i];
			var type = dynamicMetaObject.Expression.Type;
			if ($asm08.System.Linq.Expressions.Compiler.DelegateHelpers.IsByRef(dynamicMetaObject)) {
				type = type.MakeByRefType();
			}
			typeInfo = $asm08.System.Linq.Expressions.Compiler.DelegateHelpers.NextTypeInfo$1(type, typeInfo);
		}
		typeInfo = $asm08.System.Linq.Expressions.Compiler.DelegateHelpers.NextTypeInfo$1(returnType, typeInfo);
		if (typeInfo.DelegateType === null) {
			var array = JSIL.Array.New(System.Type, (args.length + 2));
			array[0] = System.Runtime.CompilerServices.CallSite;
			array[(array.length - 1)] = returnType;
		__loop1__: 
			for (var j = 0; j < args.length; ++j) {
				var dynamicMetaObject2 = args[j];
				var type2 = dynamicMetaObject2.Expression.Type;
				if ($asm08.System.Linq.Expressions.Compiler.DelegateHelpers.IsByRef(dynamicMetaObject2)) {
					type2 = type2.MakeByRefType();
				}
				array[(j + 1)] = type2;
			}
			typeInfo.DelegateType = $asm08.System.Linq.Expressions.Compiler.DelegateHelpers.MakeNewDelegate(array);
		}
		var delegateType = typeInfo.DelegateType;
	} finally {
		System.Threading.Monitor.Exit(delegateCache);
	}
	return delegateType;
};
$asm08.System.Linq.Expressions.Compiler.DelegateHelpers.IsByRef = function (mo) {
	var parameterExpression = JSIL.TryCast(mo.Expression, System.Linq.Expressions.ParameterExpression);
	return ((parameterExpression !== null) && parameterExpression.IsByRef);
};
$asm08.System.Linq.Expressions.Compiler.DelegateHelpers.NextTypeInfo$0 = function (initialArg) {
	var delegateCache = null;
	System.Threading.Monitor.Enter((delegateCache = $asm08.System.Linq.Expressions.Compiler.DelegateHelpers._DelegateCache));
	try {
		var result = $asm08.System.Linq.Expressions.Compiler.DelegateHelpers.NextTypeInfo$1(initialArg, $asm08.System.Linq.Expressions.Compiler.DelegateHelpers._DelegateCache);
	} finally {
		System.Threading.Monitor.Exit(delegateCache);
	}
	return result;
};
$asm08.System.Linq.Expressions.Compiler.DelegateHelpers.GetNextTypeInfo = function (initialArg, curTypeInfo) {
	var delegateCache = null;
	System.Threading.Monitor.Enter((delegateCache = $asm08.System.Linq.Expressions.Compiler.DelegateHelpers._DelegateCache));
	try {
		var result = $asm08.System.Linq.Expressions.Compiler.DelegateHelpers.NextTypeInfo$1(initialArg, curTypeInfo);
	} finally {
		System.Threading.Monitor.Exit(delegateCache);
	}
	return result;
};
$asm08.System.Linq.Expressions.Compiler.DelegateHelpers.NextTypeInfo$1 = function (initialArg, curTypeInfo) {
	if (curTypeInfo.TypeChain === null) {
		curTypeInfo.TypeChain = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.Type, $asm08.System.Linq.Expressions.Compiler.DelegateHelpers.TypeInfo), "_ctor$0", []);
	}
	if (!curTypeInfo.TypeChain.TryGetValue(initialArg, /* ref */ typeInfo)) {
		var typeInfo = new JSIL.Variable(new $asm08.System.Linq.Expressions.Compiler.DelegateHelpers.TypeInfo());
		if ($asm08.System.Dynamic.Utils.TypeUtils.CanCache(initialArg)) {
			curTypeInfo.TypeChain.set_Item(initialArg, typeInfo.value);
		}
	}
	return typeInfo.value;
};
$asm08.System.Linq.Expressions.Compiler.DelegateHelpers.MakeNewDelegate = function (types) {
	if (types.length <= 17) {
		if (!System.Linq.Enumerable.Any$b1$1(System.Type)(types, function (t) {
					return t.IsByRef;
				})) {
			if (types[(types.length - 1)] === System.Void) {
				var result = $asm08.System.Linq.Expressions.Compiler.DelegateHelpers.GetActionType($asm08.System.Dynamic.Utils.CollectionExtensions.RemoveLast$b1(System.Type)(types));
			} else {
				result = $asm08.System.Linq.Expressions.Compiler.DelegateHelpers.GetFuncType(types);
			}
			return result;
		}
	}
	return $asm08.System.Linq.Expressions.Compiler.DelegateHelpers.MakeNewCustomDelegate(types);
};
$asm08.System.Linq.Expressions.Compiler.DelegateHelpers.GetFuncType = function (types) {
	switch (types.length) {
		case 1: 
			return System.Func$b1.MakeGenericType(types);
		case 2: 
			return System.Func$b2.MakeGenericType(types);
		case 3: 
			return System.Func$b3.MakeGenericType(types);
		case 4: 
			return System.Func$b4.MakeGenericType(types);
		case 5: 
			return System.Func$b5.MakeGenericType(types);
		case 6: 
			return System.Func$b6.MakeGenericType(types);
		case 7: 
			return System.Func$b7.MakeGenericType(types);
		case 8: 
			return System.Func$b8.MakeGenericType(types);
		case 9: 
			return System.Func$b9.MakeGenericType(types);
		case 10: 
			return System.Func$b10.MakeGenericType(types);
		case 11: 
			return System.Func$b11.MakeGenericType(types);
		case 12: 
			return System.Func$b12.MakeGenericType(types);
		case 13: 
			return System.Func$b13.MakeGenericType(types);
		case 14: 
			return System.Func$b14.MakeGenericType(types);
		case 15: 
			return System.Func$b15.MakeGenericType(types);
		case 16: 
			return System.Func$b16.MakeGenericType(types);
		case 17: 
			return System.Func$b17.MakeGenericType(types);
		default: 
			return null;
	}
};
$asm08.System.Linq.Expressions.Compiler.DelegateHelpers.GetActionType = function (types) {
	switch (types.length) {
		case 0: 
			return System.Action;
		case 1: 
			return System.Action$b1.MakeGenericType(types);
		case 2: 
			return System.Action$b2.MakeGenericType(types);
		case 3: 
			return System.Action$b3.MakeGenericType(types);
		case 4: 
			return System.Action$b4.MakeGenericType(types);
		case 5: 
			return System.Action$b5.MakeGenericType(types);
		case 6: 
			return System.Action$b6.MakeGenericType(types);
		case 7: 
			return System.Action$b7.MakeGenericType(types);
		case 8: 
			return System.Action$b8.MakeGenericType(types);
		case 9: 
			return System.Action$b9.MakeGenericType(types);
		case 10: 
			return System.Action$b10.MakeGenericType(types);
		case 11: 
			return System.Action$b11.MakeGenericType(types);
		case 12: 
			return System.Action$b12.MakeGenericType(types);
		case 13: 
			return System.Action$b13.MakeGenericType(types);
		case 14: 
			return System.Action$b14.MakeGenericType(types);
		case 15: 
			return System.Action$b15.MakeGenericType(types);
		case 16: 
			return System.Action$b16.MakeGenericType(types);
		default: 
			return null;
	}
};
JSIL.OverloadedMethod($asm08.System.Linq.Expressions.Compiler.DelegateHelpers, "NextTypeInfo", [
		["NextTypeInfo$0", [System.Type]], 
		["NextTypeInfo$1", [System.Type, $asm08.System.Linq.Expressions.Compiler.DelegateHelpers.TypeInfo]]
	]);
Object.defineProperty($asm08.System.Linq.Expressions.Compiler.DelegateHelpers, "CtorAttributes", {
		"value": 4230}
);
Object.defineProperty($asm08.System.Linq.Expressions.Compiler.DelegateHelpers, "ImplAttributes", {
		"value": 3}
);
Object.defineProperty($asm08.System.Linq.Expressions.Compiler.DelegateHelpers, "InvokeAttributes", {
		"value": 454}
);
Object.defineProperty($asm08.System.Linq.Expressions.Compiler.DelegateHelpers, "MaximumArity", {
		"value": 17}
);
$asm08.System.Linq.Expressions.Compiler.DelegateHelpers._DelegateCtorSignature = null;
$asm08.System.Linq.Expressions.Compiler.DelegateHelpers._DelegateCache = null;
$asm08.System.Linq.Expressions.Compiler.DelegateHelpers.$CachedAnonymousMethodDelegate1 = null;
$asm08.System.Linq.Expressions.Compiler.DelegateHelpers._cctor = function () {
	$asm08.System.Linq.Expressions.Compiler.DelegateHelpers._DelegateCtorSignature = JSIL.Array.New(System.Type, [System.Object, System.IntPtr]);
	$asm08.System.Linq.Expressions.Compiler.DelegateHelpers._DelegateCache = new $asm08.System.Linq.Expressions.Compiler.DelegateHelpers.TypeInfo();
};

$asm08.System.Linq.Expressions.Compiler.DelegateHelpers.TypeInfo.prototype.MakeDelegateType$0 = function (retType, args) {
	return this.MakeDelegateType$1(retType, JSIL.Cast(args, System.Collections.Generic.IList$b1.Of(System.Linq.Expressions.Expression)));
};
$asm08.System.Linq.Expressions.Compiler.DelegateHelpers.TypeInfo.prototype.MakeDelegateType$1 = function (retType, args) {
	var array = JSIL.Array.New(System.Type, (args.ICollection$b1_Count + 2));
	array[0] = System.Runtime.CompilerServices.CallSite;
	array[(array.length - 1)] = retType;
__loop0__: 
	for (var i = 0; i < args.ICollection$b1_Count; ++i) {
		array[(i + 1)] = args.IList$b1_get_Item(i).Type;
	}
	return (this.DelegateType = $asm08.System.Linq.Expressions.Compiler.DelegateHelpers.MakeNewDelegate(array));
};
$asm08.System.Linq.Expressions.Compiler.DelegateHelpers.TypeInfo.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
JSIL.OverloadedMethod($asm08.System.Linq.Expressions.Compiler.DelegateHelpers.TypeInfo.prototype, "MakeDelegateType", [
		["MakeDelegateType$0", [System.Type, System.Array.Of(System.Linq.Expressions.Expression)]], 
		["MakeDelegateType$1", [System.Type, System.Collections.Generic.IList$b1.Of(System.Linq.Expressions.Expression)]]
	]);
$asm08.System.Linq.Expressions.Compiler.DelegateHelpers.TypeInfo.prototype.DelegateType = null;
$asm08.System.Linq.Expressions.Compiler.DelegateHelpers.TypeInfo.prototype.TypeChain = null;

$asm08.System.Linq.Expressions.Compiler.HoistedLocals.prototype._ctor = function (parent, vars) {
	System.Object.prototype._ctor.call(this);
	if (parent !== null) {
		vars = new ($asm08.System.Runtime.CompilerServices.TrueReadOnlyCollection$b1.Of(System.Linq.Expressions.ParameterExpression)) ($asm08.System.Dynamic.Utils.CollectionExtensions.AddFirst$b1(System.Linq.Expressions.ParameterExpression)(JSIL.Cast(vars, System.Collections.Generic.IList$b1.Of(System.Linq.Expressions.ParameterExpression)), parent.SelfVariable));
	}
	var dictionary = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.Linq.Expressions.Expression, System.Int32), "_ctor$1", [vars.Count]);
__loop0__: 
	for (var i = 0; i < vars.Count; ++i) {
		dictionary.Add(vars.get_Item(i), i);
	}
	this.SelfVariable = System.Linq.Expressions.Expression.Variable$1(System.Array.Of(System.Object), null);
	this.Parent = parent;
	this.Variables = vars;
	this.Indexes = new ($asm08.System.Dynamic.Utils.ReadOnlyDictionary$b2.Of(System.Linq.Expressions.Expression, System.Int32)) (dictionary);
};
$asm08.System.Linq.Expressions.Compiler.HoistedLocals.prototype.get_ParentVariable = function () {
	if (this.Parent === null) {
		return null;
	}
	return this.Parent.SelfVariable;
};
$asm08.System.Linq.Expressions.Compiler.HoistedLocals.GetParent = function (locals) {
	return JSIL.Cast(locals[0], System.Runtime.CompilerServices.StrongBox$b1.Of(System.Array.Of(System.Object))).Value;
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.Compiler.HoistedLocals.prototype, "ParentVariable", 
	$asm08.System.Linq.Expressions.Compiler.HoistedLocals.prototype.get_ParentVariable, null);
$asm08.System.Linq.Expressions.Compiler.HoistedLocals.prototype.Parent = null;
$asm08.System.Linq.Expressions.Compiler.HoistedLocals.prototype.Indexes = null;
$asm08.System.Linq.Expressions.Compiler.HoistedLocals.prototype.Variables = null;
$asm08.System.Linq.Expressions.Compiler.HoistedLocals.prototype.SelfVariable = null;

$asm08.System.Linq.Expressions.Compiler.ILGen.Emit = function (il, opcode, methodBase) {
	if (methodBase.MemberType === System.Reflection.MemberTypes.Constructor) {
		il.Emit$5(opcode.MemberwiseClone(), JSIL.Cast(methodBase, System.Reflection.ConstructorInfo));
		return;
	}
	il.Emit$4(opcode.MemberwiseClone(), JSIL.Cast(methodBase, System.Reflection.MethodInfo));
};
$asm08.System.Linq.Expressions.Compiler.ILGen.EmitLoadArg = function (il, index) {
	switch (index) {
		case 0: 
			il.Emit$0(System.Reflection.Emit.OpCodes.Ldarg_0.MemberwiseClone());
			return;
		case 1: 
			il.Emit$0(System.Reflection.Emit.OpCodes.Ldarg_1.MemberwiseClone());
			return;
		case 2: 
			il.Emit$0(System.Reflection.Emit.OpCodes.Ldarg_2.MemberwiseClone());
			return;
		case 3: 
			il.Emit$0(System.Reflection.Emit.OpCodes.Ldarg_3.MemberwiseClone());
			return;
		default: 
			if (index <= 255) {
				il.Emit$1(System.Reflection.Emit.OpCodes.Ldarg_S.MemberwiseClone(), index);
				return;
			}
			il.Emit$3(System.Reflection.Emit.OpCodes.Ldarg.MemberwiseClone(), index);
			return;
	}
};
$asm08.System.Linq.Expressions.Compiler.ILGen.EmitLoadArgAddress = function (il, index) {
	if (index <= 255) {
		il.Emit$1(System.Reflection.Emit.OpCodes.Ldarga_S.MemberwiseClone(), index);
		return;
	}
	il.Emit$3(System.Reflection.Emit.OpCodes.Ldarga.MemberwiseClone(), index);
};
$asm08.System.Linq.Expressions.Compiler.ILGen.EmitStoreArg = function (il, index) {
	if (index <= 255) {
		il.Emit$1(System.Reflection.Emit.OpCodes.Starg_S.MemberwiseClone(), index);
		return;
	}
	il.Emit$3(System.Reflection.Emit.OpCodes.Starg.MemberwiseClone(), index);
};
$asm08.System.Linq.Expressions.Compiler.ILGen.EmitLoadValueIndirect = function (il, type) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(type, "type");
	if (!type.IsValueType) {
		il.Emit$0(System.Reflection.Emit.OpCodes.Ldind_Ref.MemberwiseClone());
		return;
	}
	if (type === System.Int32) {
		il.Emit$0(System.Reflection.Emit.OpCodes.Ldind_I4.MemberwiseClone());
		return;
	}
	if (type === System.UInt32) {
		il.Emit$0(System.Reflection.Emit.OpCodes.Ldind_U4.MemberwiseClone());
		return;
	}
	if (type === System.Int16) {
		il.Emit$0(System.Reflection.Emit.OpCodes.Ldind_I2.MemberwiseClone());
		return;
	}
	if (type === System.UInt16) {
		il.Emit$0(System.Reflection.Emit.OpCodes.Ldind_U2.MemberwiseClone());
		return;
	}
	if (!((type !== System.Int64) && (type !== System.UInt64))) {
		il.Emit$0(System.Reflection.Emit.OpCodes.Ldind_I8.MemberwiseClone());
		return;
	}
	if (type === System.Char) {
		il.Emit$0(System.Reflection.Emit.OpCodes.Ldind_I2.MemberwiseClone());
		return;
	}
	if (type === System.Boolean) {
		il.Emit$0(System.Reflection.Emit.OpCodes.Ldind_I1.MemberwiseClone());
		return;
	}
	if (type === System.Single) {
		il.Emit$0(System.Reflection.Emit.OpCodes.Ldind_R4.MemberwiseClone());
		return;
	}
	if (type === System.Double) {
		il.Emit$0(System.Reflection.Emit.OpCodes.Ldind_R8.MemberwiseClone());
		return;
	}
	il.Emit$6(System.Reflection.Emit.OpCodes.Ldobj.MemberwiseClone(), type);
};
$asm08.System.Linq.Expressions.Compiler.ILGen.EmitStoreValueIndirect = function (il, type) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(type, "type");
	if (!type.IsValueType) {
		il.Emit$0(System.Reflection.Emit.OpCodes.Stind_Ref.MemberwiseClone());
		return;
	}
	if (type === System.Int32) {
		il.Emit$0(System.Reflection.Emit.OpCodes.Stind_I4.MemberwiseClone());
		return;
	}
	if (type === System.Int16) {
		il.Emit$0(System.Reflection.Emit.OpCodes.Stind_I2.MemberwiseClone());
		return;
	}
	if (!((type !== System.Int64) && (type !== System.UInt64))) {
		il.Emit$0(System.Reflection.Emit.OpCodes.Stind_I8.MemberwiseClone());
		return;
	}
	if (type === System.Char) {
		il.Emit$0(System.Reflection.Emit.OpCodes.Stind_I2.MemberwiseClone());
		return;
	}
	if (type === System.Boolean) {
		il.Emit$0(System.Reflection.Emit.OpCodes.Stind_I1.MemberwiseClone());
		return;
	}
	if (type === System.Single) {
		il.Emit$0(System.Reflection.Emit.OpCodes.Stind_R4.MemberwiseClone());
		return;
	}
	if (type === System.Double) {
		il.Emit$0(System.Reflection.Emit.OpCodes.Stind_R8.MemberwiseClone());
		return;
	}
	il.Emit$6(System.Reflection.Emit.OpCodes.Stobj.MemberwiseClone(), type);
};
$asm08.System.Linq.Expressions.Compiler.ILGen.EmitLoadElement = function (il, type) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(type, "type");
	if (!type.IsValueType) {
		il.Emit$0(System.Reflection.Emit.OpCodes.Ldelem_Ref.MemberwiseClone());
		return;
	}
	if (type.IsEnum) {
		il.Emit$6(System.Reflection.Emit.OpCodes.Ldelem.MemberwiseClone(), type);
		return;
	}
	switch (Number(System.Type.GetTypeCode(type))) {
		case 3: 
		case 5: 
			il.Emit$0(System.Reflection.Emit.OpCodes.Ldelem_I1.MemberwiseClone());
			return;
		case 4: 
		case 8: 
			il.Emit$0(System.Reflection.Emit.OpCodes.Ldelem_U2.MemberwiseClone());
			return;
		case 6: 
			il.Emit$0(System.Reflection.Emit.OpCodes.Ldelem_U1.MemberwiseClone());
			return;
		case 7: 
			il.Emit$0(System.Reflection.Emit.OpCodes.Ldelem_I2.MemberwiseClone());
			return;
		case 9: 
			il.Emit$0(System.Reflection.Emit.OpCodes.Ldelem_I4.MemberwiseClone());
			return;
		case 10: 
			il.Emit$0(System.Reflection.Emit.OpCodes.Ldelem_U4.MemberwiseClone());
			return;
		case 11: 
		case 12: 
			il.Emit$0(System.Reflection.Emit.OpCodes.Ldelem_I8.MemberwiseClone());
			return;
		case 13: 
			il.Emit$0(System.Reflection.Emit.OpCodes.Ldelem_R4.MemberwiseClone());
			return;
		case 14: 
			il.Emit$0(System.Reflection.Emit.OpCodes.Ldelem_R8.MemberwiseClone());
			return;
		default: 
			il.Emit$6(System.Reflection.Emit.OpCodes.Ldelem.MemberwiseClone(), type);
			return;
	}
};
$asm08.System.Linq.Expressions.Compiler.ILGen.EmitStoreElement = function (il, type) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(type, "type");
	if (type.IsEnum) {
		il.Emit$6(System.Reflection.Emit.OpCodes.Stelem.MemberwiseClone(), type);
		return;
	}
	switch (Number(System.Type.GetTypeCode(type))) {
		case 3: 
		case 5: 
		case 6: 
			il.Emit$0(System.Reflection.Emit.OpCodes.Stelem_I1.MemberwiseClone());
			return;
		case 4: 
		case 7: 
		case 8: 
			il.Emit$0(System.Reflection.Emit.OpCodes.Stelem_I2.MemberwiseClone());
			return;
		case 9: 
		case 10: 
			il.Emit$0(System.Reflection.Emit.OpCodes.Stelem_I4.MemberwiseClone());
			return;
		case 11: 
		case 12: 
			il.Emit$0(System.Reflection.Emit.OpCodes.Stelem_I8.MemberwiseClone());
			return;
		case 13: 
			il.Emit$0(System.Reflection.Emit.OpCodes.Stelem_R4.MemberwiseClone());
			return;
		case 14: 
			il.Emit$0(System.Reflection.Emit.OpCodes.Stelem_R8.MemberwiseClone());
			return;
		default: 
			if (type.IsValueType) {
				il.Emit$6(System.Reflection.Emit.OpCodes.Stelem.MemberwiseClone(), type);
				return;
			}
			il.Emit$0(System.Reflection.Emit.OpCodes.Stelem_Ref.MemberwiseClone());
			return;
	}
};
$asm08.System.Linq.Expressions.Compiler.ILGen.EmitType = function (il, type) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(type, "type");
	il.Emit$6(System.Reflection.Emit.OpCodes.Ldtoken.MemberwiseClone(), type);
	il.Emit$4(System.Reflection.Emit.OpCodes.Call.MemberwiseClone(), System.Type.GetMethod$5("GetTypeFromHandle"));
};
$asm08.System.Linq.Expressions.Compiler.ILGen.EmitFieldAddress = function (il, fi) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(fi, "fi");
	if (fi.IsStatic) {
		il.Emit$12(System.Reflection.Emit.OpCodes.Ldsflda.MemberwiseClone(), fi);
		return;
	}
	il.Emit$12(System.Reflection.Emit.OpCodes.Ldflda.MemberwiseClone(), fi);
};
$asm08.System.Linq.Expressions.Compiler.ILGen.EmitFieldGet = function (il, fi) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(fi, "fi");
	if (fi.IsStatic) {
		il.Emit$12(System.Reflection.Emit.OpCodes.Ldsfld.MemberwiseClone(), fi);
		return;
	}
	il.Emit$12(System.Reflection.Emit.OpCodes.Ldfld.MemberwiseClone(), fi);
};
$asm08.System.Linq.Expressions.Compiler.ILGen.EmitFieldSet = function (il, fi) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(fi, "fi");
	if (fi.IsStatic) {
		il.Emit$12(System.Reflection.Emit.OpCodes.Stsfld.MemberwiseClone(), fi);
		return;
	}
	il.Emit$12(System.Reflection.Emit.OpCodes.Stfld.MemberwiseClone(), fi);
};
$asm08.System.Linq.Expressions.Compiler.ILGen.EmitNew$0 = function (il, ci) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(ci, "ci");
	if (ci.DeclaringType.ContainsGenericParameters) {
		throw $asm08.System.Core.Error.IllegalNewGenericParams(ci.DeclaringType);
	}
	il.Emit$5(System.Reflection.Emit.OpCodes.Newobj.MemberwiseClone(), ci);
};
$asm08.System.Linq.Expressions.Compiler.ILGen.EmitNew$1 = function (il, type, paramTypes) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(type, "type");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(paramTypes, "paramTypes");
	var constructor = type.GetConstructor$2(paramTypes);
	if (constructor === null) {
		throw $asm08.System.Core.Error.TypeDoesNotHaveConstructorForTheSignature();
	}
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitNew$0(il, constructor);
};
$asm08.System.Linq.Expressions.Compiler.ILGen.EmitNull = function (il) {
	il.Emit$0(System.Reflection.Emit.OpCodes.Ldnull.MemberwiseClone());
};
$asm08.System.Linq.Expressions.Compiler.ILGen.EmitString = function (il, value) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(value, "value");
	il.Emit$13(System.Reflection.Emit.OpCodes.Ldstr.MemberwiseClone(), value);
};
$asm08.System.Linq.Expressions.Compiler.ILGen.EmitBoolean = function (il, value) {
	if (value) {
		il.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_1.MemberwiseClone());
		return;
	}
	il.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_0.MemberwiseClone());
};
$asm08.System.Linq.Expressions.Compiler.ILGen.EmitChar = function (il, value) {
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitInt(il, value.charCodeAt(0));
	il.Emit$0(System.Reflection.Emit.OpCodes.Conv_U2.MemberwiseClone());
};
$asm08.System.Linq.Expressions.Compiler.ILGen.EmitByte = function (il, value) {
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitInt(il, value);
	il.Emit$0(System.Reflection.Emit.OpCodes.Conv_U1.MemberwiseClone());
};
$asm08.System.Linq.Expressions.Compiler.ILGen.EmitSByte = function (il, value) {
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitInt(il, value);
	il.Emit$0(System.Reflection.Emit.OpCodes.Conv_I1.MemberwiseClone());
};
$asm08.System.Linq.Expressions.Compiler.ILGen.EmitShort = function (il, value) {
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitInt(il, value);
	il.Emit$0(System.Reflection.Emit.OpCodes.Conv_I2.MemberwiseClone());
};
$asm08.System.Linq.Expressions.Compiler.ILGen.EmitUShort = function (il, value) {
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitInt(il, value);
	il.Emit$0(System.Reflection.Emit.OpCodes.Conv_U2.MemberwiseClone());
};
$asm08.System.Linq.Expressions.Compiler.ILGen.EmitInt = function (il, value) {
	switch (value) {
		case -1: 
			var opcode = System.Reflection.Emit.OpCodes.Ldc_I4_M1.MemberwiseClone();
			break;
		case 0: 
			opcode = System.Reflection.Emit.OpCodes.Ldc_I4_0.MemberwiseClone();
			break;
		case 1: 
			opcode = System.Reflection.Emit.OpCodes.Ldc_I4_1.MemberwiseClone();
			break;
		case 2: 
			opcode = System.Reflection.Emit.OpCodes.Ldc_I4_2.MemberwiseClone();
			break;
		case 3: 
			opcode = System.Reflection.Emit.OpCodes.Ldc_I4_3.MemberwiseClone();
			break;
		case 4: 
			opcode = System.Reflection.Emit.OpCodes.Ldc_I4_4.MemberwiseClone();
			break;
		case 5: 
			opcode = System.Reflection.Emit.OpCodes.Ldc_I4_5.MemberwiseClone();
			break;
		case 6: 
			opcode = System.Reflection.Emit.OpCodes.Ldc_I4_6.MemberwiseClone();
			break;
		case 7: 
			opcode = System.Reflection.Emit.OpCodes.Ldc_I4_7.MemberwiseClone();
			break;
		case 8: 
			opcode = System.Reflection.Emit.OpCodes.Ldc_I4_8.MemberwiseClone();
			break;
		default: 
			if (!((value < -128) || (value > 127))) {
				il.Emit$2(System.Reflection.Emit.OpCodes.Ldc_I4_S.MemberwiseClone(), value);
				return;
			}
			il.Emit$3(System.Reflection.Emit.OpCodes.Ldc_I4.MemberwiseClone(), value);
			return;
	}
	il.Emit$0(opcode.MemberwiseClone());
};
$asm08.System.Linq.Expressions.Compiler.ILGen.EmitUInt = function (il, value) {
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitInt(il, value);
	il.Emit$0(System.Reflection.Emit.OpCodes.Conv_U4.MemberwiseClone());
};
$asm08.System.Linq.Expressions.Compiler.ILGen.EmitLong = function (il, value) {
	il.Emit$7(System.Reflection.Emit.OpCodes.Ldc_I8.MemberwiseClone(), value);
	il.Emit$0(System.Reflection.Emit.OpCodes.Conv_I8.MemberwiseClone());
};
$asm08.System.Linq.Expressions.Compiler.ILGen.EmitULong = function (il, value) {
	il.Emit$7(System.Reflection.Emit.OpCodes.Ldc_I8.MemberwiseClone(), value);
	il.Emit$0(System.Reflection.Emit.OpCodes.Conv_U8.MemberwiseClone());
};
$asm08.System.Linq.Expressions.Compiler.ILGen.EmitDouble = function (il, value) {
	il.Emit$9(System.Reflection.Emit.OpCodes.Ldc_R8.MemberwiseClone(), value);
};
$asm08.System.Linq.Expressions.Compiler.ILGen.EmitSingle = function (il, value) {
	il.Emit$8(System.Reflection.Emit.OpCodes.Ldc_R4.MemberwiseClone(), value);
};
$asm08.System.Linq.Expressions.Compiler.ILGen.CanEmitConstant = function (value, type) {
	if (!((value !== null) && !$asm08.System.Linq.Expressions.Compiler.ILGen.CanEmitILConstant(type))) {
		return true;
	}
	var type2 = JSIL.TryCast(value, System.Type);
	if (!((type2 === null) || !$asm08.System.Linq.Expressions.Compiler.ILGen.ShouldLdtoken$0(type2))) {
		return true;
	}
	var methodBase = JSIL.TryCast(value, System.Reflection.MethodBase);
	return !((methodBase === null) || !$asm08.System.Linq.Expressions.Compiler.ILGen.ShouldLdtoken$1(methodBase));
};
$asm08.System.Linq.Expressions.Compiler.ILGen.CanEmitILConstant = function (type) {
	switch (Number(System.Type.GetTypeCode(type))) {
		case 3: 
		case 4: 
		case 5: 
		case 6: 
		case 7: 
		case 8: 
		case 9: 
		case 10: 
		case 11: 
		case 12: 
		case 13: 
		case 14: 
		case 15: 
		case 18: 
			return true;
	}
	return false;
};
$asm08.System.Linq.Expressions.Compiler.ILGen.EmitConstant$0 = function (il, value) {
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitConstant$1(il, value, JSIL.GetType(value));
};
$asm08.System.Linq.Expressions.Compiler.ILGen.EmitConstant$1 = function (il, value, type) {
	if (value === null) {
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitDefault(il, type);
		return;
	}
	if ($asm08.System.Linq.Expressions.Compiler.ILGen.TryEmitILConstant(il, value, type)) {
		return;
	}
	var type2 = JSIL.TryCast(value, System.Type);
	if (!((type2 === null) || !$asm08.System.Linq.Expressions.Compiler.ILGen.ShouldLdtoken$0(type2))) {
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitType(il, type2);
		if (type !== System.Type) {
			il.Emit$6(System.Reflection.Emit.OpCodes.Castclass.MemberwiseClone(), type);
		}
		return;
	}
	var methodBase = JSIL.TryCast(value, System.Reflection.MethodBase);
	if (!((methodBase === null) || !$asm08.System.Linq.Expressions.Compiler.ILGen.ShouldLdtoken$1(methodBase))) {
		$asm08.System.Linq.Expressions.Compiler.ILGen.Emit(il, System.Reflection.Emit.OpCodes.Ldtoken.MemberwiseClone(), methodBase);
		var declaringType = methodBase.DeclaringType;
		if (!((declaringType === null) || !declaringType.IsGenericType)) {
			il.Emit$6(System.Reflection.Emit.OpCodes.Ldtoken.MemberwiseClone(), declaringType);
			il.Emit$4(System.Reflection.Emit.OpCodes.Call.MemberwiseClone(), System.Reflection.MethodBase.GetMethod$3("GetMethodFromHandle", JSIL.Array.New(System.Type, [System.RuntimeMethodHandle, System.RuntimeTypeHandle])));
		} else {
			il.Emit$4(System.Reflection.Emit.OpCodes.Call.MemberwiseClone(), System.Reflection.MethodBase.GetMethod$3("GetMethodFromHandle", JSIL.Array.New(System.Type, [System.RuntimeMethodHandle])));
		}
		if (type !== System.Reflection.MethodBase) {
			il.Emit$6(System.Reflection.Emit.OpCodes.Castclass.MemberwiseClone(), type);
		}
		return;
	}
	throw $asm08.System.Dynamic.Utils.ContractUtils.Unreachable;
};
$asm08.System.Linq.Expressions.Compiler.ILGen.ShouldLdtoken$0 = function (t) {
	return (JSIL.TryCast(t, System.Reflection.Emit.TypeBuilder) || 
		t.IsGenericParameter || t.IsVisible);
};
$asm08.System.Linq.Expressions.Compiler.ILGen.ShouldLdtoken$1 = function (mb) {
	if (JSIL.TryCast(mb, System.Reflection.Emit.DynamicMethod) !== null) {
		return false;
	}
	var declaringType = mb.DeclaringType;
	return ((declaringType === null) || $asm08.System.Linq.Expressions.Compiler.ILGen.ShouldLdtoken$0(declaringType));
};
$asm08.System.Linq.Expressions.Compiler.ILGen.TryEmitILConstant = function (il, value, type) {
	switch (Number(System.Type.GetTypeCode(type))) {
		case 3: 
			$asm08.System.Linq.Expressions.Compiler.ILGen.EmitBoolean(il, JSIL.Cast(value, System.Boolean));
			return true;
		case 4: 
			$asm08.System.Linq.Expressions.Compiler.ILGen.EmitChar(il, String.fromCharCode(value));
			return true;
		case 5: 
			$asm08.System.Linq.Expressions.Compiler.ILGen.EmitSByte(il, JSIL.Cast(value, System.SByte));
			return true;
		case 6: 
			$asm08.System.Linq.Expressions.Compiler.ILGen.EmitByte(il, JSIL.Cast(value, System.Byte));
			return true;
		case 7: 
			$asm08.System.Linq.Expressions.Compiler.ILGen.EmitShort(il, JSIL.Cast(value, System.Int16));
			return true;
		case 8: 
			$asm08.System.Linq.Expressions.Compiler.ILGen.EmitUShort(il, JSIL.Cast(value, System.UInt16));
			return true;
		case 9: 
			$asm08.System.Linq.Expressions.Compiler.ILGen.EmitInt(il, JSIL.Cast(value, System.Int32));
			return true;
		case 10: 
			$asm08.System.Linq.Expressions.Compiler.ILGen.EmitUInt(il, JSIL.Cast(value, System.UInt32));
			return true;
		case 11: 
			$asm08.System.Linq.Expressions.Compiler.ILGen.EmitLong(il, JSIL.Cast(value, System.Int64));
			return true;
		case 12: 
			$asm08.System.Linq.Expressions.Compiler.ILGen.EmitULong(il, JSIL.Cast(value, System.UInt64));
			return true;
		case 13: 
			$asm08.System.Linq.Expressions.Compiler.ILGen.EmitSingle(il, JSIL.Cast(value, System.Single));
			return true;
		case 14: 
			$asm08.System.Linq.Expressions.Compiler.ILGen.EmitDouble(il, JSIL.Cast(value, System.Double));
			return true;
		case 15: 
			$asm08.System.Linq.Expressions.Compiler.ILGen.EmitDecimal(il, JSIL.Cast(value, System.Decimal).MemberwiseClone());
			return true;
		case 18: 
			$asm08.System.Linq.Expressions.Compiler.ILGen.EmitString(il, JSIL.Cast(value, System.String));
			return true;
	}
	return false;
};
$asm08.System.Linq.Expressions.Compiler.ILGen.EmitConvertToType = function (il, typeFrom, typeTo, isChecked) {
	if ($asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(typeFrom, typeTo)) {
		return;
	}
	if (!((typeFrom !== System.Void) && (typeTo !== System.Void))) {
		throw $asm08.System.Dynamic.Utils.ContractUtils.Unreachable;
	}
	var flag = $asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(typeFrom);
	var flag2 = $asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(typeTo);
	var nonNullableType = $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(typeFrom);
	var nonNullableType2 = $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(typeTo);
	if (!(!typeFrom.IsInterface && 
			!typeTo.IsInterface && 
			(typeFrom !== System.Object) && 
			(typeTo !== System.Object) && !$asm08.System.Dynamic.Utils.TypeUtils.IsLegalExplicitVariantDelegateConversion(typeFrom, typeTo))) {
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitCastToType(il, typeFrom, typeTo);
		return;
	}
	if (!(!flag && !flag2)) {
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitNullableConversion(il, typeFrom, typeTo, isChecked);
		return;
	}
	if (!(($asm08.System.Dynamic.Utils.TypeUtils.IsConvertible(typeFrom) && 
				$asm08.System.Dynamic.Utils.TypeUtils.IsConvertible(typeTo)) || (!nonNullableType.IsAssignableFrom(nonNullableType2) && 
				!nonNullableType2.IsAssignableFrom(nonNullableType)))) {
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitCastToType(il, typeFrom, typeTo);
		return;
	}
	if (!(!typeFrom.IsArray || !typeTo.IsArray)) {
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitCastToType(il, typeFrom, typeTo);
		return;
	}
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitNumericConversion(il, typeFrom, typeTo, isChecked);
};
$asm08.System.Linq.Expressions.Compiler.ILGen.EmitCastToType = function (il, typeFrom, typeTo) {
	if (!(typeFrom.IsValueType || !typeTo.IsValueType)) {
		il.Emit$6(System.Reflection.Emit.OpCodes.Unbox_Any.MemberwiseClone(), typeTo);
		return;
	}
	if (!(!typeFrom.IsValueType || typeTo.IsValueType)) {
		il.Emit$6(System.Reflection.Emit.OpCodes.Box.MemberwiseClone(), typeFrom);
		if (typeTo !== System.Object) {
			il.Emit$6(System.Reflection.Emit.OpCodes.Castclass.MemberwiseClone(), typeTo);
			return;
		}
		return;
	} else {
		if (!(typeFrom.IsValueType || typeTo.IsValueType)) {
			il.Emit$6(System.Reflection.Emit.OpCodes.Castclass.MemberwiseClone(), typeTo);
			return;
		}
		throw $asm08.System.Core.Error.InvalidCast(typeFrom, typeTo);
	}
};
$asm08.System.Linq.Expressions.Compiler.ILGen.EmitNumericConversion = function (il, typeFrom, typeTo, isChecked) {
	var flag = $asm08.System.Dynamic.Utils.TypeUtils.IsUnsigned(typeFrom);
	var flag2 = $asm08.System.Dynamic.Utils.TypeUtils.IsFloatingPoint(typeFrom);
	if (typeTo === System.Single) {
		if (flag) {
			il.Emit$0(System.Reflection.Emit.OpCodes.Conv_R_Un.MemberwiseClone());
		}
		il.Emit$0(System.Reflection.Emit.OpCodes.Conv_R4.MemberwiseClone());
		return;
	}
	if (typeTo === System.Double) {
		if (flag) {
			il.Emit$0(System.Reflection.Emit.OpCodes.Conv_R_Un.MemberwiseClone());
		}
		il.Emit$0(System.Reflection.Emit.OpCodes.Conv_R8.MemberwiseClone());
		return;
	}
	var typeCode = System.Type.GetTypeCode(typeTo);
	if (isChecked) {
		if (flag) {
			switch (Number(typeCode)) {
				case 4: 
				case 8: 
					il.Emit$0(System.Reflection.Emit.OpCodes.Conv_Ovf_U2_Un.MemberwiseClone());
					return;
				case 5: 
					il.Emit$0(System.Reflection.Emit.OpCodes.Conv_Ovf_I1_Un.MemberwiseClone());
					return;
				case 6: 
					il.Emit$0(System.Reflection.Emit.OpCodes.Conv_Ovf_U1_Un.MemberwiseClone());
					return;
				case 7: 
					il.Emit$0(System.Reflection.Emit.OpCodes.Conv_Ovf_I2_Un.MemberwiseClone());
					return;
				case 9: 
					il.Emit$0(System.Reflection.Emit.OpCodes.Conv_Ovf_I4_Un.MemberwiseClone());
					return;
				case 10: 
					il.Emit$0(System.Reflection.Emit.OpCodes.Conv_Ovf_U4_Un.MemberwiseClone());
					return;
				case 11: 
					il.Emit$0(System.Reflection.Emit.OpCodes.Conv_Ovf_I8_Un.MemberwiseClone());
					return;
				case 12: 
					il.Emit$0(System.Reflection.Emit.OpCodes.Conv_Ovf_U8_Un.MemberwiseClone());
					return;
				default: 
					throw $asm08.System.Core.Error.UnhandledConvert(typeTo);
			}
		} else {
			switch (Number(typeCode)) {
				case 4: 
				case 8: 
					il.Emit$0(System.Reflection.Emit.OpCodes.Conv_Ovf_U2.MemberwiseClone());
					return;
				case 5: 
					il.Emit$0(System.Reflection.Emit.OpCodes.Conv_Ovf_I1.MemberwiseClone());
					return;
				case 6: 
					il.Emit$0(System.Reflection.Emit.OpCodes.Conv_Ovf_U1.MemberwiseClone());
					return;
				case 7: 
					il.Emit$0(System.Reflection.Emit.OpCodes.Conv_Ovf_I2.MemberwiseClone());
					return;
				case 9: 
					il.Emit$0(System.Reflection.Emit.OpCodes.Conv_Ovf_I4.MemberwiseClone());
					return;
				case 10: 
					il.Emit$0(System.Reflection.Emit.OpCodes.Conv_Ovf_U4.MemberwiseClone());
					return;
				case 11: 
					il.Emit$0(System.Reflection.Emit.OpCodes.Conv_Ovf_I8.MemberwiseClone());
					return;
				case 12: 
					il.Emit$0(System.Reflection.Emit.OpCodes.Conv_Ovf_U8.MemberwiseClone());
					return;
				default: 
					throw $asm08.System.Core.Error.UnhandledConvert(typeTo);
			}
		}
	} else {
		switch (Number(typeCode)) {
			case 4: 
			case 8: 
				il.Emit$0(System.Reflection.Emit.OpCodes.Conv_U2.MemberwiseClone());
				return;
			case 5: 
				il.Emit$0(System.Reflection.Emit.OpCodes.Conv_I1.MemberwiseClone());
				return;
			case 6: 
				il.Emit$0(System.Reflection.Emit.OpCodes.Conv_U1.MemberwiseClone());
				return;
			case 7: 
				il.Emit$0(System.Reflection.Emit.OpCodes.Conv_I2.MemberwiseClone());
				return;
			case 9: 
				il.Emit$0(System.Reflection.Emit.OpCodes.Conv_I4.MemberwiseClone());
				return;
			case 10: 
				il.Emit$0(System.Reflection.Emit.OpCodes.Conv_U4.MemberwiseClone());
				return;
			case 11: 
				if (flag) {
					il.Emit$0(System.Reflection.Emit.OpCodes.Conv_U8.MemberwiseClone());
					return;
				}
				il.Emit$0(System.Reflection.Emit.OpCodes.Conv_I8.MemberwiseClone());
				return;
			case 12: 
				if (!(!flag && !flag2)) {
					il.Emit$0(System.Reflection.Emit.OpCodes.Conv_U8.MemberwiseClone());
					return;
				}
				il.Emit$0(System.Reflection.Emit.OpCodes.Conv_I8.MemberwiseClone());
				return;
			default: 
				throw $asm08.System.Core.Error.UnhandledConvert(typeTo);
		}
	}
};
$asm08.System.Linq.Expressions.Compiler.ILGen.EmitNullableToNullableConversion = function (il, typeFrom, typeTo, isChecked) {
	var label = new System.Reflection.Emit.Label();
	var label2 = new System.Reflection.Emit.Label();
	var local = il.DeclareLocal(typeFrom);
	il.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), local);
	var local2 = il.DeclareLocal(typeTo);
	il.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local);
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitHasValue(il, typeFrom);
	label = il.DefineLabel().MemberwiseClone();
	il.Emit$10(System.Reflection.Emit.OpCodes.Brfalse_S.MemberwiseClone(), label.MemberwiseClone());
	il.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local);
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitGetValueOrDefault(il, typeFrom);
	var nonNullableType = $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(typeFrom);
	var nonNullableType2 = $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(typeTo);
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitConvertToType(il, nonNullableType, nonNullableType2, isChecked);
	var constructor = typeTo.GetConstructor$2(JSIL.Array.New(System.Type, [nonNullableType2]));
	il.Emit$5(System.Reflection.Emit.OpCodes.Newobj.MemberwiseClone(), constructor);
	il.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), local2);
	label2 = il.DefineLabel().MemberwiseClone();
	il.Emit$10(System.Reflection.Emit.OpCodes.Br_S.MemberwiseClone(), label2.MemberwiseClone());
	il.MarkLabel(label.MemberwiseClone());
	il.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local2);
	il.Emit$6(System.Reflection.Emit.OpCodes.Initobj.MemberwiseClone(), typeTo);
	il.MarkLabel(label2.MemberwiseClone());
	il.Emit$14(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone(), local2);
};
$asm08.System.Linq.Expressions.Compiler.ILGen.EmitNonNullableToNullableConversion = function (il, typeFrom, typeTo, isChecked) {
	var local = il.DeclareLocal(typeTo);
	var nonNullableType = $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(typeTo);
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitConvertToType(il, typeFrom, nonNullableType, isChecked);
	var constructor = typeTo.GetConstructor$2(JSIL.Array.New(System.Type, [nonNullableType]));
	il.Emit$5(System.Reflection.Emit.OpCodes.Newobj.MemberwiseClone(), constructor);
	il.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), local);
	il.Emit$14(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone(), local);
};
$asm08.System.Linq.Expressions.Compiler.ILGen.EmitNullableToNonNullableConversion = function (il, typeFrom, typeTo, isChecked) {
	if (typeTo.IsValueType) {
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitNullableToNonNullableStructConversion(il, typeFrom, typeTo, isChecked);
		return;
	}
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitNullableToReferenceConversion(il, typeFrom);
};
$asm08.System.Linq.Expressions.Compiler.ILGen.EmitNullableToNonNullableStructConversion = function (il, typeFrom, typeTo, isChecked) {
	var local = il.DeclareLocal(typeFrom);
	il.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), local);
	il.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local);
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitGetValue(il, typeFrom);
	var nonNullableType = $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(typeFrom);
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitConvertToType(il, nonNullableType, typeTo, isChecked);
};
$asm08.System.Linq.Expressions.Compiler.ILGen.EmitNullableToReferenceConversion = function (il, typeFrom) {
	il.Emit$6(System.Reflection.Emit.OpCodes.Box.MemberwiseClone(), typeFrom);
};
$asm08.System.Linq.Expressions.Compiler.ILGen.EmitNullableConversion = function (il, typeFrom, typeTo, isChecked) {
	var flag = $asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(typeFrom);
	var flag2 = $asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(typeTo);
	if (!(!flag || !flag2)) {
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitNullableToNullableConversion(il, typeFrom, typeTo, isChecked);
		return;
	}
	if (flag) {
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitNullableToNonNullableConversion(il, typeFrom, typeTo, isChecked);
		return;
	}
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitNonNullableToNullableConversion(il, typeFrom, typeTo, isChecked);
};
$asm08.System.Linq.Expressions.Compiler.ILGen.EmitHasValue = function (il, nullableType) {
	var method = nullableType.GetMethod$4("get_HasValue", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public));
	il.Emit$4(System.Reflection.Emit.OpCodes.Call.MemberwiseClone(), method);
};
$asm08.System.Linq.Expressions.Compiler.ILGen.EmitGetValue = function (il, nullableType) {
	var method = nullableType.GetMethod$4("get_Value", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public));
	il.Emit$4(System.Reflection.Emit.OpCodes.Call.MemberwiseClone(), method);
};
$asm08.System.Linq.Expressions.Compiler.ILGen.EmitGetValueOrDefault = function (il, nullableType) {
	var method = nullableType.GetMethod$3("GetValueOrDefault", System.Type.EmptyTypes);
	il.Emit$4(System.Reflection.Emit.OpCodes.Call.MemberwiseClone(), method);
};
$asm08.System.Linq.Expressions.Compiler.ILGen.EmitArray$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, il, items) {
		$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(items, "items");
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitInt(il, items.ICollection$b1_Count);
		il.Emit$6(System.Reflection.Emit.OpCodes.Newarr.MemberwiseClone(), T);
	__loop0__: 
		for (var i = 0; i < items.ICollection$b1_Count; ++i) {
			il.Emit$0(System.Reflection.Emit.OpCodes.Dup.MemberwiseClone());
			$asm08.System.Linq.Expressions.Compiler.ILGen.EmitInt(il, i);
			$asm08.System.Linq.Expressions.Compiler.ILGen.EmitConstant$1(il, items.IList$b1_get_Item(i), T);
			$asm08.System.Linq.Expressions.Compiler.ILGen.EmitStoreElement(il, T);
		}
	}
);
$asm08.System.Linq.Expressions.Compiler.ILGen.EmitArray$0 = function (il, elementType, count, emit) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(elementType, "elementType");
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(emit, "emit");
	if (count < 0) {
		throw $asm08.System.Core.Error.CountCannotBeNegative();
	}
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitInt(il, count);
	il.Emit$6(System.Reflection.Emit.OpCodes.Newarr.MemberwiseClone(), elementType);
__loop0__: 
	for (var i = 0; i < count; ++i) {
		il.Emit$0(System.Reflection.Emit.OpCodes.Dup.MemberwiseClone());
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitInt(il, i);
		emit(i);
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitStoreElement(il, elementType);
	}
};
$asm08.System.Linq.Expressions.Compiler.ILGen.EmitArray$1 = function (il, arrayType) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(arrayType, "arrayType");
	if (!arrayType.IsArray) {
		throw $asm08.System.Core.Error.ArrayTypeMustBeArray();
	}
	var arrayRank = arrayType.GetArrayRank();
	if (arrayRank === 1) {
		il.Emit$6(System.Reflection.Emit.OpCodes.Newarr.MemberwiseClone(), arrayType.GetElementType());
		return;
	}
	var array = JSIL.Array.New(System.Type, arrayRank);
__loop0__: 
	for (var i = 0; i < arrayRank; ++i) {
		array[i] = System.Int32;
	}
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitNew$1(il, arrayType, array);
};
$asm08.System.Linq.Expressions.Compiler.ILGen.EmitDecimal = function (il, value) {
	if (!System.Decimal.op_Equality(System.Decimal.Truncate(value.MemberwiseClone()).MemberwiseClone(), value.MemberwiseClone())) {
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitDecimalBits(il, value.MemberwiseClone());
		return;
	}
	if (!(!System.Decimal.op_LessThanOrEqual(-2147483648, value.MemberwiseClone()) || !System.Decimal.op_LessThanOrEqual(value.MemberwiseClone(), 2147483647))) {
		var value2 = System.Decimal.ToInt32(value.MemberwiseClone());
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitInt(il, value2);
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitNew$0(il, System.Decimal.GetConstructor$2(JSIL.Array.New(System.Type, [System.Int32])));
		return;
	}
	if (!(!System.Decimal.op_LessThanOrEqual(JSIL.New(System.Decimal, "_ctor$2", [-9223372036854775808]), value.MemberwiseClone()) || !System.Decimal.op_LessThanOrEqual(value.MemberwiseClone(), JSIL.New(System.Decimal, "_ctor$2", [9223372036854775807])))) {
		var value3 = System.Decimal.ToInt64(value.MemberwiseClone());
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitLong(il, value3);
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitNew$0(il, System.Decimal.GetConstructor$2(JSIL.Array.New(System.Type, [System.Int64])));
		return;
	}
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitDecimalBits(il, value.MemberwiseClone());
};
$asm08.System.Linq.Expressions.Compiler.ILGen.EmitDecimalBits = function (il, value) {
	var bits = System.Decimal.GetBits(value);
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitInt(il, bits[0]);
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitInt(il, bits[1]);
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitInt(il, bits[2]);
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitBoolean(il, ((bits[3] & -2147483648) !== 0));
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitByte(il, (bits[3] >> 16));
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitNew$0(il, System.Decimal.GetConstructor$2(JSIL.Array.New(System.Type, [System.Int32, System.Int32, System.Int32, System.Boolean, System.Byte])));
};
$asm08.System.Linq.Expressions.Compiler.ILGen.EmitDefault = function (il, type) {
	switch (Number(System.Type.GetTypeCode(type))) {
		case 0: 
		case 2: 
		case 18: 
			il.Emit$0(System.Reflection.Emit.OpCodes.Ldnull.MemberwiseClone());
			return;
		case 1: 
		case 16: 
			if (type.IsValueType) {
				var local = il.DeclareLocal(type);
				il.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local);
				il.Emit$6(System.Reflection.Emit.OpCodes.Initobj.MemberwiseClone(), type);
				il.Emit$14(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone(), local);
				return;
			}
			il.Emit$0(System.Reflection.Emit.OpCodes.Ldnull.MemberwiseClone());
			return;
		case 3: 
		case 4: 
		case 5: 
		case 6: 
		case 7: 
		case 8: 
		case 9: 
		case 10: 
			il.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_0.MemberwiseClone());
			return;
		case 11: 
		case 12: 
			il.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_0.MemberwiseClone());
			il.Emit$0(System.Reflection.Emit.OpCodes.Conv_I8.MemberwiseClone());
			return;
		case 13: 
			il.Emit$8(System.Reflection.Emit.OpCodes.Ldc_R4.MemberwiseClone(), 0);
			return;
		case 14: 
			il.Emit$9(System.Reflection.Emit.OpCodes.Ldc_R8.MemberwiseClone(), 0);
			return;
		case 15: 
			il.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_0.MemberwiseClone());
			il.Emit$5(System.Reflection.Emit.OpCodes.Newobj.MemberwiseClone(), System.Decimal.GetConstructor$2(JSIL.Array.New(System.Type, [System.Int32])));
			return;
	}
	throw $asm08.System.Dynamic.Utils.ContractUtils.Unreachable;
};
JSIL.OverloadedMethod($asm08.System.Linq.Expressions.Compiler.ILGen, "EmitNew", [
		["EmitNew$0", [$asm08.System.Linq.Expressions.Compiler.OffsetTrackingILGenerator, System.Reflection.ConstructorInfo]], 
		["EmitNew$1", [$asm08.System.Linq.Expressions.Compiler.OffsetTrackingILGenerator, System.Type, System.Array.Of(System.Type)]]
	]);
JSIL.OverloadedMethod($asm08.System.Linq.Expressions.Compiler.ILGen, "EmitConstant", [
		["EmitConstant$0", [$asm08.System.Linq.Expressions.Compiler.OffsetTrackingILGenerator, System.Object]], 
		["EmitConstant$1", [$asm08.System.Linq.Expressions.Compiler.OffsetTrackingILGenerator, System.Object, System.Type]]
	]);
JSIL.OverloadedMethod($asm08.System.Linq.Expressions.Compiler.ILGen, "ShouldLdtoken", [
		["ShouldLdtoken$0", [System.Type]], 
		["ShouldLdtoken$1", [System.Reflection.MethodBase]]
	]);
JSIL.OverloadedMethod($asm08.System.Linq.Expressions.Compiler.ILGen, "EmitArray", [
		["EmitArray$0", [$asm08.System.Linq.Expressions.Compiler.OffsetTrackingILGenerator, System.Type, System.Int32, System.Action$b1.Of(System.Int32)]], 
		["EmitArray$1", [$asm08.System.Linq.Expressions.Compiler.OffsetTrackingILGenerator, System.Type]]
	]);

$asm08.System.Linq.Expressions.Compiler.KeyedQueue$b2.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
	this._data = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(this.K, System.Collections.Generic.Queue$b1.Of(this.V)), "_ctor$0", []);
};
$asm08.System.Linq.Expressions.Compiler.KeyedQueue$b2.prototype.Enqueue = function (key, value) {
	var queue = new JSIL.Variable(null);
	if (!this._data.TryGetValue(key, /* ref */ queue)) {
		this._data.Add(key, (queue.value = JSIL.New(System.Collections.Generic.Queue$b1.Of(this.V), "_ctor$0", [])));
	}
	queue.value.Enqueue(value);
};
$asm08.System.Linq.Expressions.Compiler.KeyedQueue$b2.prototype.Dequeue = function (key) {
	var queue = new JSIL.Variable(null);
	if (!this._data.TryGetValue(key, /* ref */ queue)) {
		throw $asm08.System.Core.Error.QueueEmpty();
	}
	var result = queue.value.Dequeue();
	if (queue.value.Count === 0) {
		this._data.Remove(key);
	}
	return result;
};
$asm08.System.Linq.Expressions.Compiler.KeyedQueue$b2.prototype.TryDequeue = function (key, /* ref */ value) {
	var queue = new JSIL.Variable(null);
	if (!(!this._data.TryGetValue(key, /* ref */ queue) || (queue.value.Count <= 0))) {
		value.value = queue.value.Dequeue();
		if (queue.value.Count === 0) {
			this._data.Remove(key);
		}
		return true;
	}
	value.value = null;
	return false;
};
$asm08.System.Linq.Expressions.Compiler.KeyedQueue$b2.prototype.Peek = function (key) {
	var queue = new JSIL.Variable(null);
	if (!this._data.TryGetValue(key, /* ref */ queue)) {
		throw $asm08.System.Core.Error.QueueEmpty();
	}
	return queue.value.Peek();
};
$asm08.System.Linq.Expressions.Compiler.KeyedQueue$b2.prototype.GetCount = function (key) {
	var queue = new JSIL.Variable(null);
	if (!this._data.TryGetValue(key, /* ref */ queue)) {
		return 0;
	}
	return queue.value.Count;
};
$asm08.System.Linq.Expressions.Compiler.KeyedQueue$b2.prototype.Clear = function () {
	this._data.Clear();
};
$asm08.System.Linq.Expressions.Compiler.KeyedQueue$b2.prototype._data = null;

$asm08.System.Linq.Expressions.Compiler.LabelInfo.prototype.get_Label = function () {
	this.EnsureLabelAndValue();
	return this._label;
};
$asm08.System.Linq.Expressions.Compiler.LabelInfo.prototype._ctor = function (il, node, canReturn) {
	this._definitions = JSIL.New($asm08.System.Linq.Expressions.Set$b1.Of($asm08.System.Linq.Expressions.Compiler.LabelScopeInfo), "_ctor$0", []);
	this._references = new (System.Collections.Generic.List$b1.Of($asm08.System.Linq.Expressions.Compiler.LabelScopeInfo)) ();
	this._opCode = System.Reflection.Emit.OpCodes.Leave.MemberwiseClone();
	System.Object.prototype._ctor.call(this);
	this._ilg = il;
	this._node = node;
	this._canReturn = canReturn;
};
$asm08.System.Linq.Expressions.Compiler.LabelInfo.prototype.get_CanReturn = function () {
	return this._canReturn;
};
$asm08.System.Linq.Expressions.Compiler.LabelInfo.prototype.get_CanBranch = function () {
	return System.Reflection.Emit.OpCode.op_Inequality(this._opCode.MemberwiseClone(), System.Reflection.Emit.OpCodes.Leave.MemberwiseClone());
};
$asm08.System.Linq.Expressions.Compiler.LabelInfo.prototype.Reference = function (block) {
	this._references.Add(block);
	if (this._definitions.Count > 0) {
		this.ValidateJump(block);
	}
};
$asm08.System.Linq.Expressions.Compiler.LabelInfo.prototype.Define = function (block) {
	var labelScopeInfo = block;
__loop0__: 
	while (labelScopeInfo) {
		if (labelScopeInfo.ContainsTarget(this._node)) {
			throw $asm08.System.Core.Error.LabelTargetAlreadyDefined(this._node.Name);
		}
		labelScopeInfo = labelScopeInfo.Parent;
	}
	this._definitions.Add(block);
	block.AddLabelInfo(this._node, this);
	if (this._definitions.Count === 1) {
		var enumerator = (this._references.GetEnumerator());
		try {
		__loop1__: 
			while (enumerator.MoveNext()) {
				var current = enumerator.Current;
				this.ValidateJump(current);
			}
			return;
		} finally {
			enumerator.IDisposable_Dispose();
		}
	}
	if (this._acrossBlockJump) {
		throw $asm08.System.Core.Error.AmbiguousJump(this._node.Name);
	}
	this._labelDefined = false;
};
$asm08.System.Linq.Expressions.Compiler.LabelInfo.prototype.ValidateJump = function (reference) {
	this._opCode = this._canReturn ? System.Reflection.Emit.OpCodes.Ret : System.Reflection.Emit.OpCodes.Br.MemberwiseClone();
	var labelScopeInfo = reference;
__loop0__: 
	while (labelScopeInfo) {
		if (this._definitions.Contains(labelScopeInfo)) {
			return;
		}
		if ((labelScopeInfo.Kind === $asm08.System.Linq.Expressions.Compiler.LabelScopeKind.Finally) || (labelScopeInfo.Kind === $asm08.System.Linq.Expressions.Compiler.LabelScopeKind.Filter)) {
			break __loop0__;
		}
		if (!((labelScopeInfo.Kind !== $asm08.System.Linq.Expressions.Compiler.LabelScopeKind.Try) && (labelScopeInfo.Kind !== $asm08.System.Linq.Expressions.Compiler.LabelScopeKind.Catch))) {
			this._opCode = System.Reflection.Emit.OpCodes.Leave.MemberwiseClone();
		}
		labelScopeInfo = labelScopeInfo.Parent;
	}
	this._acrossBlockJump = true;
	if (!((this._node === null) || (this._node.Type === System.Void))) {
		throw $asm08.System.Core.Error.NonLocalJumpWithValue(this._node.Name);
	}
	if (this._definitions.Count > 1) {
		throw $asm08.System.Core.Error.AmbiguousJump(this._node.Name);
	}
	var labelScopeInfo2 = System.Linq.Enumerable.First$b1$0($asm08.System.Linq.Expressions.Compiler.LabelScopeInfo)(this._definitions);
	var labelScopeInfo3 = $asm08.System.Dynamic.Utils.Helpers.CommonNode$b1($asm08.System.Linq.Expressions.Compiler.LabelScopeInfo)(labelScopeInfo2, reference, function (b) {
			return b.Parent;
		});
	this._opCode = this._canReturn ? System.Reflection.Emit.OpCodes.Ret : System.Reflection.Emit.OpCodes.Br.MemberwiseClone();
__loop1__: 
	for (var labelScopeInfo4 = reference; labelScopeInfo4 !== labelScopeInfo3; labelScopeInfo4 = labelScopeInfo4.Parent) {
		if (labelScopeInfo4.Kind === $asm08.System.Linq.Expressions.Compiler.LabelScopeKind.Finally) {
			throw $asm08.System.Core.Error.ControlCannotLeaveFinally();
		}
		if (labelScopeInfo4.Kind === $asm08.System.Linq.Expressions.Compiler.LabelScopeKind.Filter) {
			throw $asm08.System.Core.Error.ControlCannotLeaveFilterTest();
		}
		if (!((labelScopeInfo4.Kind !== $asm08.System.Linq.Expressions.Compiler.LabelScopeKind.Try) && (labelScopeInfo4.Kind !== $asm08.System.Linq.Expressions.Compiler.LabelScopeKind.Catch))) {
			this._opCode = System.Reflection.Emit.OpCodes.Leave.MemberwiseClone();
		}
	}
__loop2__: 
	for (var labelScopeInfo5 = labelScopeInfo2; labelScopeInfo5 !== labelScopeInfo3; ) {
		if (!labelScopeInfo5.CanJumpInto) {
			if (labelScopeInfo5.Kind === $asm08.System.Linq.Expressions.Compiler.LabelScopeKind.Expression) {
				throw $asm08.System.Core.Error.ControlCannotEnterExpression();
			}
			throw $asm08.System.Core.Error.ControlCannotEnterTry();
		} else {
			labelScopeInfo5 = labelScopeInfo5.Parent;
		}
	}
};
$asm08.System.Linq.Expressions.Compiler.LabelInfo.prototype.ValidateFinish = function () {
	if (!((this._references.Count <= 0) || (this._definitions.Count !== 0))) {
		throw $asm08.System.Core.Error.LabelTargetUndefined(this._node.Name);
	}
};
$asm08.System.Linq.Expressions.Compiler.LabelInfo.prototype.EmitJump = function () {
	if (System.Reflection.Emit.OpCode.op_Equality(this._opCode.MemberwiseClone(), System.Reflection.Emit.OpCodes.Ret.MemberwiseClone())) {
		this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ret.MemberwiseClone());
		return;
	}
	this.StoreValue();
	this._ilg.Emit$10(this._opCode.MemberwiseClone(), this.Label.MemberwiseClone());
};
$asm08.System.Linq.Expressions.Compiler.LabelInfo.prototype.StoreValue = function () {
	this.EnsureLabelAndValue();
	if (this._value !== null) {
		this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), this._value);
	}
};
$asm08.System.Linq.Expressions.Compiler.LabelInfo.prototype.Mark = function () {
	if (this._canReturn) {
		if (!this._labelDefined) {
			return;
		}
		this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ret.MemberwiseClone());
	} else {
		this.StoreValue();
	}
	this.MarkWithEmptyStack();
};
$asm08.System.Linq.Expressions.Compiler.LabelInfo.prototype.MarkWithEmptyStack = function () {
	this._ilg.MarkLabel(this.Label.MemberwiseClone());
	if (this._value !== null) {
		this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone(), this._value);
	}
};
$asm08.System.Linq.Expressions.Compiler.LabelInfo.prototype.EnsureLabelAndValue = function () {
	if (!this._labelDefined) {
		this._labelDefined = true;
		this._label = this._ilg.DefineLabel().MemberwiseClone();
		if (!((this._node === null) || (this._node.Type === System.Void))) {
			this._value = this._ilg.DeclareLocal(this._node.Type);
		}
	}
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.Compiler.LabelInfo.prototype, "Label", 
	$asm08.System.Linq.Expressions.Compiler.LabelInfo.prototype.get_Label, null);
JSIL.MakeProperty($asm08.System.Linq.Expressions.Compiler.LabelInfo.prototype, "CanReturn", 
	$asm08.System.Linq.Expressions.Compiler.LabelInfo.prototype.get_CanReturn, null);
JSIL.MakeProperty($asm08.System.Linq.Expressions.Compiler.LabelInfo.prototype, "CanBranch", 
	$asm08.System.Linq.Expressions.Compiler.LabelInfo.prototype.get_CanBranch, null);
$asm08.System.Linq.Expressions.Compiler.LabelInfo.prototype._node = null;
$asm08.System.Linq.Expressions.Compiler.LabelInfo.prototype._labelDefined = false;
$asm08.System.Linq.Expressions.Compiler.LabelInfo.prototype._value = null;
$asm08.System.Linq.Expressions.Compiler.LabelInfo.prototype._definitions = null;
$asm08.System.Linq.Expressions.Compiler.LabelInfo.prototype._references = null;
$asm08.System.Linq.Expressions.Compiler.LabelInfo.prototype._canReturn = false;
$asm08.System.Linq.Expressions.Compiler.LabelInfo.prototype._acrossBlockJump = false;
$asm08.System.Linq.Expressions.Compiler.LabelInfo.prototype._ilg = null;
$asm08.System.Linq.Expressions.Compiler.LabelInfo.$CachedAnonymousMethodDelegate1 = null;

$asm08.System.Linq.Expressions.Compiler.LabelScopeInfo.prototype._ctor = function (parent, kind) {
	System.Object.prototype._ctor.call(this);
	this.Parent = parent;
	this.Kind = kind;
};
$asm08.System.Linq.Expressions.Compiler.LabelScopeInfo.prototype.get_CanJumpInto = function () {
	switch (Number(this.Kind)) {
		case 0: 
		case 1: 
		case 2: 
		case 3: 
			return true;
		default: 
			return false;
	}
};
$asm08.System.Linq.Expressions.Compiler.LabelScopeInfo.prototype.ContainsTarget = function (target) {
	return (this.Labels && this.Labels.ContainsKey(target));
};
$asm08.System.Linq.Expressions.Compiler.LabelScopeInfo.prototype.TryGetLabelInfo = function (target, /* ref */ info) {
	if (this.Labels === null) {
		info.value = null;
		return false;
	}
	return this.Labels.TryGetValue(target, /* ref */ info);
};
$asm08.System.Linq.Expressions.Compiler.LabelScopeInfo.prototype.AddLabelInfo = function (target, info) {
	if (this.Labels === null) {
		this.Labels = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.Linq.Expressions.LabelTarget, $asm08.System.Linq.Expressions.Compiler.LabelInfo), "_ctor$0", []);
	}
	this.Labels.Add(target, info);
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.Compiler.LabelScopeInfo.prototype, "CanJumpInto", 
	$asm08.System.Linq.Expressions.Compiler.LabelScopeInfo.prototype.get_CanJumpInto, null);
$asm08.System.Linq.Expressions.Compiler.LabelScopeInfo.prototype.Labels = null;
$asm08.System.Linq.Expressions.Compiler.LabelScopeInfo.prototype.Kind = 0;
$asm08.System.Linq.Expressions.Compiler.LabelScopeInfo.prototype.Parent = null;

$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitAddress$0 = function (node, type) {
	this.EmitAddress$1(node, type, $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitExpressionStart);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitAddress$1 = function (node, type, flags) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				var flag = ((flags & ($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitExpressionStart | $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitExpressionStartMask | $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitNoExpressionStart)) === $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitExpressionStart);
				var flags2 = flag ? this.EmitExpressionStart(node) : $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitNoExpressionStart;
				var nodeType = node.NodeType;
				if (nodeType <= System.Linq.Expressions.ExpressionType.MemberAccess) {
					switch (Number(nodeType)) {
						case 5: 
							this.AddressOf$0(JSIL.Cast(node, System.Linq.Expressions.BinaryExpression), type);
							__label0__ = "IL_AA";
							continue __step0__;
						case 6: 
							this.AddressOf$3(JSIL.Cast(node, System.Linq.Expressions.MethodCallExpression), type);
							__label0__ = "IL_AA";
							continue __step0__;
						default: 
							if (nodeType === System.Linq.Expressions.ExpressionType.MemberAccess) {
								this.AddressOf$2(JSIL.Cast(node, System.Linq.Expressions.MemberExpression), type);
								__label0__ = "IL_AA";
								continue __step0__;
							}
							break;
					}
				} else {
					if (nodeType === System.Linq.Expressions.ExpressionType.Parameter) {
						this.AddressOf$1(JSIL.Cast(node, System.Linq.Expressions.ParameterExpression), type);
						__label0__ = "IL_AA";
						continue __step0__;
					}
					if (nodeType === System.Linq.Expressions.ExpressionType.Index) {
						this.AddressOf$4(JSIL.Cast(node, System.Linq.Expressions.IndexExpression), type);
						__label0__ = "IL_AA";
						continue __step0__;
					}
					if (nodeType === System.Linq.Expressions.ExpressionType.Unbox) {
						this.AddressOf$5(JSIL.Cast(node, System.Linq.Expressions.UnaryExpression), type);
						__label0__ = "IL_AA";
						continue __step0__;
					}
				}
				this.EmitExpressionAddress(node, type);
				__label0__ = "IL_AA";
				continue __step0__;
				break;
			case "IL_AA":
				if (flag) {
					this.EmitExpressionEnd(flags2);
				}
				break __step0__;
		}
	}
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.AddressOf$0 = function (node, type) {
	if ($asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(type, node.Type)) {
		this.EmitExpression$0(node.Left);
		this.EmitExpression$0(node.Right);
		var type2 = node.Right.Type;
		if ($asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(type2)) {
			var local = this.GetLocal(type2);
			this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), local);
			this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local);
			$asm08.System.Linq.Expressions.Compiler.ILGen.EmitGetValue(this._ilg, type2);
			this.FreeLocal(local);
		}
		var nonNullableType = $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(type2);
		if (nonNullableType !== System.Int32) {
			$asm08.System.Linq.Expressions.Compiler.ILGen.EmitConvertToType(this._ilg, nonNullableType, System.Int32, true);
		}
		this._ilg.Emit$6(System.Reflection.Emit.OpCodes.Ldelema.MemberwiseClone(), node.Type);
		return;
	}
	this.EmitExpressionAddress(node, type);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.AddressOf$1 = function (node, type) {
	if (!$asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(type, node.Type)) {
		this.EmitExpressionAddress(node, type);
		return;
	}
	if (node.IsByRef) {
		this._scope.EmitGet(node);
		return;
	}
	this._scope.EmitAddressOf(node);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.AddressOf$2 = function (node, type) {
	if ($asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(type, node.Type)) {
		var objectType = null;
		if (node.Expression !== null) {
			this.EmitInstance(node.Expression, (objectType = node.Expression.Type));
		}
		this.EmitMemberAddress(node.Member, objectType);
		return;
	}
	this.EmitExpressionAddress(node, type);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitMemberAddress = function (member, objectType) {
	if (member.MemberType === System.Reflection.MemberTypes.Field) {
		var fieldInfo = JSIL.Cast(member, System.Reflection.FieldInfo);
		if (!(fieldInfo.IsLiteral || fieldInfo.IsInitOnly)) {
			$asm08.System.Linq.Expressions.Compiler.ILGen.EmitFieldAddress(this._ilg, fieldInfo);
			return;
		}
	}
	this.EmitMemberGet(member, objectType);
	var local = this.GetLocal($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.GetMemberType(member));
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), local);
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.AddressOf$3 = function (node, type) {
	if (!(node.Method.IsStatic || 
			!node.Object.Type.IsArray || (node.Method !== node.Object.Type.GetMethod$4("Get", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public))))) {
		var method = node.Object.Type.GetMethod$4("Address", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public));
		this.EmitMethodCall$0(node.Object, method, node);
		return;
	}
	this.EmitExpressionAddress(node, type);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.AddressOf$4 = function (node, type) {
	if (!($asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(type, node.Type) && (node.Indexer === null))) {
		this.EmitExpressionAddress(node, type);
		return;
	}
	if (node.Arguments.Count === 1) {
		this.EmitExpression$0(node.Object);
		this.EmitExpression$0(node.Arguments.get_Item(0));
		this._ilg.Emit$6(System.Reflection.Emit.OpCodes.Ldelema.MemberwiseClone(), node.Type);
		return;
	}
	var method = node.Object.Type.GetMethod$4("Address", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public));
	this.EmitMethodCall$0(node.Object, method, node);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.AddressOf$5 = function (node, type) {
	this.EmitExpression$0(node.Operand);
	this._ilg.Emit$6(System.Reflection.Emit.OpCodes.Unbox.MemberwiseClone(), type);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitExpressionAddress = function (node, type) {
	this.EmitExpression$1(node, ($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsNoTail | $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitNoExpressionStart));
	var local = this.GetLocal(type);
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), local);
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitAddressWriteBack = function (node, type) {
	var flags = this.EmitExpressionStart(node);
	var writeBack = null;
	if ($asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(type, node.Type)) {
		var nodeType = node.NodeType;
		if (nodeType !== System.Linq.Expressions.ExpressionType.MemberAccess) {
			if (nodeType === System.Linq.Expressions.ExpressionType.Index) {
				writeBack = this.AddressOfWriteBack$1(JSIL.Cast(node, System.Linq.Expressions.IndexExpression));
			}
		} else {
			writeBack = this.AddressOfWriteBack$0(JSIL.Cast(node, System.Linq.Expressions.MemberExpression));
		}
	}
	if (writeBack === null) {
		this.EmitAddress$1(node, type, ($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsNoTail | $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitNoExpressionStart));
	}
	this.EmitExpressionEnd(flags);
	return writeBack;
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.AddressOfWriteBack$0 = function (node) {
	var $l$gc__DisplayClass = new $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.$l$gc__DisplayClass1();
	$l$gc__DisplayClass.$this = this;
	if (!((node.Member.MemberType === System.Reflection.MemberTypes.Property) && JSIL.Cast(node.Member, System.Reflection.PropertyInfo).CanWrite)) {
		return null;
	}
	$l$gc__DisplayClass.instanceLocal = null;
	$l$gc__DisplayClass.instanceType = null;
	if (node.Expression !== null) {
		this.EmitInstance(node.Expression, ($l$gc__DisplayClass.instanceType = node.Expression.Type));
		this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Dup.MemberwiseClone());
		this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), ($l$gc__DisplayClass.instanceLocal = this.GetLocal($l$gc__DisplayClass.instanceType)));
	}
	$l$gc__DisplayClass.pi = JSIL.Cast(node.Member, System.Reflection.PropertyInfo);
	this.EmitCall($l$gc__DisplayClass.instanceType, $l$gc__DisplayClass.pi.GetGetMethod$0(true));
	$l$gc__DisplayClass.valueLocal = this.GetLocal(node.Type);
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), $l$gc__DisplayClass.valueLocal);
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), $l$gc__DisplayClass.valueLocal);
	return function () {
		if ($l$gc__DisplayClass.instanceLocal !== null) {
			$l$gc__DisplayClass.$this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone().MemberwiseClone(), $l$gc__DisplayClass.instanceLocal);
			$l$gc__DisplayClass.$this.FreeLocal($l$gc__DisplayClass.instanceLocal);
		}
		$l$gc__DisplayClass.$this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone().MemberwiseClone(), $l$gc__DisplayClass.valueLocal);
		$l$gc__DisplayClass.$this.FreeLocal($l$gc__DisplayClass.valueLocal);
		$l$gc__DisplayClass.$this.EmitCall($l$gc__DisplayClass.instanceType, $l$gc__DisplayClass.pi.GetSetMethod$0(true));
	};
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.AddressOfWriteBack$1 = function (node) {
	var $l$gc__DisplayClass = new $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.$l$gc__DisplayClass4();
	$l$gc__DisplayClass.node = node;
	$l$gc__DisplayClass.$this = this;
	if (!(($l$gc__DisplayClass.node.Indexer !== null) && $l$gc__DisplayClass.node.Indexer.CanWrite)) {
		return null;
	}
	$l$gc__DisplayClass.instanceLocal = null;
	$l$gc__DisplayClass.instanceType = null;
	if ($l$gc__DisplayClass.node.Object !== null) {
		this.EmitInstance($l$gc__DisplayClass.node.Object, ($l$gc__DisplayClass.instanceType = $l$gc__DisplayClass.node.Object.Type));
		this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Dup.MemberwiseClone());
		this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), ($l$gc__DisplayClass.instanceLocal = this.GetLocal($l$gc__DisplayClass.instanceType)));
	}
	$l$gc__DisplayClass.args = new (System.Collections.Generic.List$b1.Of(System.Reflection.Emit.LocalBuilder)) ();
	enumerator = $l$gc__DisplayClass.node.Arguments.GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			current = enumerator.IEnumerator$b1_Current;
			this.EmitExpression$0(current);
			var local = this.GetLocal(current.Type);
			this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Dup.MemberwiseClone());
			this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), local);
			$l$gc__DisplayClass.args.Add(local);
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	this.EmitGetIndexCall($l$gc__DisplayClass.node, $l$gc__DisplayClass.instanceType);
	$l$gc__DisplayClass.valueLocal = this.GetLocal($l$gc__DisplayClass.node.Type);
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), $l$gc__DisplayClass.valueLocal);
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), $l$gc__DisplayClass.valueLocal);
	return function () {
		if ($l$gc__DisplayClass.instanceLocal !== null) {
			$l$gc__DisplayClass.$this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone().MemberwiseClone(), $l$gc__DisplayClass.instanceLocal);
			$l$gc__DisplayClass.$this.FreeLocal($l$gc__DisplayClass.instanceLocal);
		}
		var enumerator = ($l$gc__DisplayClass.args.GetEnumerator());
		try {
		__loop0__: 
			while (enumerator.MoveNext()) {
				var current = enumerator.Current;
				$l$gc__DisplayClass.$this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone().MemberwiseClone(), current);
				$l$gc__DisplayClass.$this.FreeLocal(current);
			}
		} finally {
			enumerator.IDisposable_Dispose();
		}
		$l$gc__DisplayClass.$this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone().MemberwiseClone(), $l$gc__DisplayClass.valueLocal);
		$l$gc__DisplayClass.$this.FreeLocal($l$gc__DisplayClass.valueLocal);
		$l$gc__DisplayClass.$this.EmitSetIndexCall($l$gc__DisplayClass.node, $l$gc__DisplayClass.instanceType);
	};
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitBinaryExpression$0 = function (expr) {
	this.EmitBinaryExpression$1(expr, $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsNoTail);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitBinaryExpression$1 = function (expr, flags) {
	var binaryExpression = JSIL.Cast(expr, System.Linq.Expressions.BinaryExpression);
	if (binaryExpression.Method !== null) {
		this.EmitBinaryMethod(binaryExpression, flags);
		return;
	}
	if (!(((binaryExpression.NodeType !== System.Linq.Expressions.ExpressionType.Equal) && 
				(binaryExpression.NodeType !== System.Linq.Expressions.ExpressionType.NotEqual)) || ((binaryExpression.Type !== System.Boolean) && 
				(binaryExpression.Type !== System.Nullable$b1.Of(System.Boolean))))) {
		if (!(!$asm08.System.Linq.Expressions.ConstantCheck.IsNull(binaryExpression.Left) || 
				$asm08.System.Linq.Expressions.ConstantCheck.IsNull(binaryExpression.Right) || !$asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(binaryExpression.Right.Type))) {
			this.EmitNullEquality(binaryExpression.NodeType, binaryExpression.Right, binaryExpression.IsLiftedToNull);
			return;
		}
		if (!(!$asm08.System.Linq.Expressions.ConstantCheck.IsNull(binaryExpression.Right) || 
				$asm08.System.Linq.Expressions.ConstantCheck.IsNull(binaryExpression.Left) || !$asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(binaryExpression.Left.Type))) {
			this.EmitNullEquality(binaryExpression.NodeType, binaryExpression.Left, binaryExpression.IsLiftedToNull);
			return;
		}
		this.EmitExpression$0($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.GetEqualityOperand(binaryExpression.Left));
		this.EmitExpression$0($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.GetEqualityOperand(binaryExpression.Right));
	} else {
		this.EmitExpression$0(binaryExpression.Left);
		this.EmitExpression$0(binaryExpression.Right);
	}
	this.EmitBinaryOperator(
		binaryExpression.NodeType, 
		binaryExpression.Left.Type, 
		binaryExpression.Right.Type, 
		binaryExpression.Type, 
		binaryExpression.IsLiftedToNull
	);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitNullEquality = function (op, e, isLiftedToNull) {
	if (isLiftedToNull) {
		this.EmitExpressionAsVoid$0(e);
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitDefault(this._ilg, System.Nullable$b1.Of(System.Boolean));
		return;
	}
	this.EmitAddress$0(e, e.Type);
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitHasValue(this._ilg, e.Type);
	if (op === System.Linq.Expressions.ExpressionType.Equal) {
		this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_0.MemberwiseClone());
		this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ceq.MemberwiseClone());
	}
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitBinaryMethod = function (b, flags) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				if (b.IsLifted) {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								var parameterExpression = System.Linq.Expressions.Expression.Variable$1($asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(b.Left.Type), null);
								var parameterExpression2 = System.Linq.Expressions.Expression.Variable$1($asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(b.Right.Type), null);
								var methodCallExpression = System.Linq.Expressions.Expression.Call$9(null, b.Method, parameterExpression, parameterExpression2);
								var resultType = null;
								if (b.IsLiftedToNull) {
									resultType = $asm08.System.Dynamic.Utils.TypeUtils.GetNullableType(methodCallExpression.Type);
								} else {
									var __label2__ = "__entry2__";
								__step2__: 
									while (true) {
										switch (__label2__) {
											case "__entry2__":
												var nodeType = b.NodeType;
												switch (Number(nodeType)) {
													case 13: 
													case 15: 
													case 16: 
													case 20: 
													case 21: 
														break;
													case 14: 
													case 17: 
													case 18: 
													case 19: 
														__label2__ = "IL_C1";
														continue __step2__;
													default: 
														if (nodeType !== System.Linq.Expressions.ExpressionType.NotEqual) {
															__label2__ = "IL_C1";
															continue __step2__;
														}
														break;
												}
												if (methodCallExpression.Type !== System.Boolean) {
													throw $asm08.System.Core.Error.ArgumentMustBeBoolean();
												}
												resultType = System.Boolean;
												__label1__ = "IL_CD";
												continue __step1__;
												__label2__ = "IL_C1";
												continue __step2__;
												break;
											case "IL_C1":
												resultType = $asm08.System.Dynamic.Utils.TypeUtils.GetNullableType(methodCallExpression.Type);
												break __step2__;
										}
									}
								}
								__label1__ = "IL_CD";
								continue __step1__;
								break;
							case "IL_CD":
								var array = JSIL.Array.New(System.Linq.Expressions.ParameterExpression, [parameterExpression, parameterExpression2]);
								var array2 = JSIL.Array.New(System.Linq.Expressions.Expression, [b.Left, b.Right]);
								$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.ValidateLift(JSIL.Cast(array, System.Collections.Generic.IList$b1.Of(System.Linq.Expressions.ParameterExpression)), JSIL.Cast(array2, System.Collections.Generic.IList$b1.Of(System.Linq.Expressions.Expression)));
								this.EmitLift(
									b.NodeType, 
									resultType, 
									methodCallExpression, 
									array, 
									array2
								);
								return;
								break __step1__;
						}
					}
				}
				this.EmitMethodCallExpression$0(System.Linq.Expressions.Expression.Call$9(null, b.Method, b.Left, b.Right), flags);
				break __step0__;
		}
	}
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitBinaryOperator = function (op, leftType, rightType, resultType, liftedToNull) {
	var flag = $asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(leftType);
	var flag2 = $asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(rightType);
	switch (Number(op)) {
		case 5: 
			if (rightType !== System.Int32) {
				throw $asm08.System.Dynamic.Utils.ContractUtils.Unreachable;
			}
			$asm08.System.Linq.Expressions.Compiler.ILGen.EmitLoadElement(this._ilg, leftType.GetElementType());
			return;
		case 7: 
			throw $asm08.System.Core.Error.UnexpectedCoalesceOperator();
	}
	if (!(!flag && !flag2)) {
		this.EmitLiftedBinaryOp(
			op, 
			leftType, 
			rightType, 
			resultType, 
			liftedToNull
		);
		return;
	}
	this.EmitUnliftedBinaryOp(op, leftType, rightType);
	this.EmitConvertArithmeticResult(op, resultType);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitUnliftedBinaryOp = function (op, leftType, rightType) {
	if (!((op !== System.Linq.Expressions.ExpressionType.Equal) && (op !== System.Linq.Expressions.ExpressionType.NotEqual))) {
		this.EmitUnliftedEquality(op, leftType);
		return;
	}
	if (!leftType.IsPrimitive) {
		throw $asm08.System.Core.Error.OperatorNotImplementedForType(op, leftType);
	}
	switch (Number(op)) {
		case 0: 
			this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Add.MemberwiseClone());
			return;
		case 1: 
			if ($asm08.System.Dynamic.Utils.TypeUtils.IsFloatingPoint(leftType)) {
				this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Add.MemberwiseClone());
				return;
			}
			if ($asm08.System.Dynamic.Utils.TypeUtils.IsUnsigned(leftType)) {
				this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Add_Ovf_Un.MemberwiseClone());
				return;
			}
			this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Add_Ovf.MemberwiseClone());
			return;
		case 2: 
		case 3: 
			this._ilg.Emit$0(System.Reflection.Emit.OpCodes.And.MemberwiseClone());
			return;
		default: 
			switch (Number(op)) {
				case 12: 
					if ($asm08.System.Dynamic.Utils.TypeUtils.IsUnsigned(leftType)) {
						this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Div_Un.MemberwiseClone());
						return;
					}
					this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Div.MemberwiseClone());
					return;
				case 13: 
				case 17: 
				case 18: 
				case 22: 
				case 23: 
				case 24: 
					break;
				case 14: 
					this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Xor.MemberwiseClone());
					return;
				case 15: 
					if ($asm08.System.Dynamic.Utils.TypeUtils.IsUnsigned(leftType)) {
						this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Cgt_Un.MemberwiseClone());
						return;
					}
					this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Cgt.MemberwiseClone());
					return;
				case 16: 
					var label = this._ilg.DefineLabel().MemberwiseClone();
					var label2 = this._ilg.DefineLabel().MemberwiseClone();
					if ($asm08.System.Dynamic.Utils.TypeUtils.IsUnsigned(leftType)) {
						this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Bge_Un_S.MemberwiseClone(), label.MemberwiseClone());
					} else {
						this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Bge_S.MemberwiseClone(), label.MemberwiseClone());
					}
					this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_0.MemberwiseClone());
					this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Br_S.MemberwiseClone(), label2.MemberwiseClone());
					this._ilg.MarkLabel(label.MemberwiseClone());
					this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_1.MemberwiseClone());
					this._ilg.MarkLabel(label2.MemberwiseClone());
					return;
				case 19: 
					if (rightType !== System.Int32) {
						throw $asm08.System.Dynamic.Utils.ContractUtils.Unreachable;
					}
					this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Shl.MemberwiseClone());
					return;
				case 20: 
					if ($asm08.System.Dynamic.Utils.TypeUtils.IsUnsigned(leftType)) {
						this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Clt_Un.MemberwiseClone());
						return;
					}
					this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Clt.MemberwiseClone());
					return;
				case 21: 
					var label3 = this._ilg.DefineLabel().MemberwiseClone();
					var label4 = this._ilg.DefineLabel().MemberwiseClone();
					if ($asm08.System.Dynamic.Utils.TypeUtils.IsUnsigned(leftType)) {
						this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Ble_Un_S.MemberwiseClone(), label3.MemberwiseClone());
					} else {
						this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Ble_S.MemberwiseClone(), label3.MemberwiseClone());
					}
					this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_0.MemberwiseClone());
					this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Br_S.MemberwiseClone(), label4.MemberwiseClone());
					this._ilg.MarkLabel(label3.MemberwiseClone());
					this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_1.MemberwiseClone());
					this._ilg.MarkLabel(label4.MemberwiseClone());
					return;
				case 25: 
					if ($asm08.System.Dynamic.Utils.TypeUtils.IsUnsigned(leftType)) {
						this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Rem_Un.MemberwiseClone());
						return;
					}
					this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Rem.MemberwiseClone());
					return;
				case 26: 
					this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Mul.MemberwiseClone());
					return;
				case 27: 
					if ($asm08.System.Dynamic.Utils.TypeUtils.IsFloatingPoint(leftType)) {
						this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Mul.MemberwiseClone());
						return;
					}
					if ($asm08.System.Dynamic.Utils.TypeUtils.IsUnsigned(leftType)) {
						this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Mul_Ovf_Un.MemberwiseClone());
						return;
					}
					this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Mul_Ovf.MemberwiseClone());
					return;
				default: 
					switch (Number(op)) {
						case 36: 
						case 37: 
							this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Or.MemberwiseClone());
							return;
						case 41: 
							if (rightType !== System.Int32) {
								throw $asm08.System.Dynamic.Utils.ContractUtils.Unreachable;
							}
							if ($asm08.System.Dynamic.Utils.TypeUtils.IsUnsigned(leftType)) {
								this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Shr_Un.MemberwiseClone());
								return;
							}
							this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Shr.MemberwiseClone());
							return;
						case 42: 
							this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Sub.MemberwiseClone());
							return;
						case 43: 
							if ($asm08.System.Dynamic.Utils.TypeUtils.IsFloatingPoint(leftType)) {
								this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Sub.MemberwiseClone());
								return;
							}
							if ($asm08.System.Dynamic.Utils.TypeUtils.IsUnsigned(leftType)) {
								this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Sub_Ovf_Un.MemberwiseClone());
								return;
							}
							this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Sub_Ovf.MemberwiseClone());
							return;
					}
					break;
			}
			throw $asm08.System.Core.Error.UnhandledBinary(op);
	}
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitConvertArithmeticResult = function (op, resultType) {
	switch (Number(System.Type.GetTypeCode(resultType))) {
		case 5: 
			this._ilg.Emit$0($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.IsChecked(op) ? System.Reflection.Emit.OpCodes.Conv_Ovf_I1 : System.Reflection.Emit.OpCodes.Conv_I1.MemberwiseClone());
			return;
		case 6: 
			this._ilg.Emit$0($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.IsChecked(op) ? System.Reflection.Emit.OpCodes.Conv_Ovf_U1 : System.Reflection.Emit.OpCodes.Conv_U1.MemberwiseClone());
			return;
		case 7: 
			this._ilg.Emit$0($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.IsChecked(op) ? System.Reflection.Emit.OpCodes.Conv_Ovf_I2 : System.Reflection.Emit.OpCodes.Conv_I2.MemberwiseClone());
			return;
		case 8: 
			this._ilg.Emit$0($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.IsChecked(op) ? System.Reflection.Emit.OpCodes.Conv_Ovf_U2 : System.Reflection.Emit.OpCodes.Conv_U2.MemberwiseClone());
			return;
		default: 
			return;
	}
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitUnliftedEquality = function (op, type) {
	if (!(type.IsPrimitive || 
			!type.IsValueType || type.IsEnum)) {
		throw $asm08.System.Core.Error.OperatorNotImplementedForType(op, type);
	}
	this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ceq.MemberwiseClone());
	if (op === System.Linq.Expressions.ExpressionType.NotEqual) {
		this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_0.MemberwiseClone());
		this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ceq.MemberwiseClone());
	}
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitLiftedBinaryOp = function (op, leftType, rightType, resultType, liftedToNull) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				switch (Number(op)) {
					case 0: 
					case 1: 
					case 12: 
					case 14: 
					case 19: 
					case 25: 
					case 26: 
					case 27: 
						break;
					case 2: 
						if (leftType === System.Nullable$b1.Of(System.Boolean)) {
							this.EmitLiftedBooleanAnd();
							return;
						}
						this.EmitLiftedBinaryArithmetic(op, leftType, rightType, resultType);
						return;
					case 3: 
					case 4: 
					case 5: 
					case 6: 
					case 7: 
					case 8: 
					case 9: 
					case 10: 
					case 11: 
					case 17: 
					case 18: 
					case 22: 
					case 23: 
					case 24: 
						__label0__ = "IL_101";
						continue __step0__;
					case 13: 
					case 15: 
					case 16: 
					case 20: 
					case 21: 
						__label0__ = "IL_F3";
						continue __step0__;
					default: 
						switch (Number(op)) {
							case 35: 
								__label0__ = "IL_F3";
								continue __step0__;
							case 36: 
								if (leftType === System.Nullable$b1.Of(System.Boolean)) {
									this.EmitLiftedBooleanOr();
									return;
								}
								this.EmitLiftedBinaryArithmetic(op, leftType, rightType, resultType);
								return;
							case 37: 
							case 38: 
							case 39: 
							case 40: 
								__label0__ = "IL_101";
								continue __step0__;
							case 41: 
							case 42: 
							case 43: 
								break;
							default: 
								__label0__ = "IL_101";
								continue __step0__;
						}
						break;
				}
				this.EmitLiftedBinaryArithmetic(op, leftType, rightType, resultType);
				return;
				__label0__ = "IL_F3";
				continue __step0__;
				break;
			case "IL_F3":
				this.EmitLiftedRelational(
					op, 
					leftType, 
					rightType, 
					resultType, 
					liftedToNull
				);
				return;
				__label0__ = "IL_101";
				continue __step0__;
				break;
			case "IL_101":
				throw $asm08.System.Dynamic.Utils.ContractUtils.Unreachable;
				break __step0__;
		}
	}
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitLiftedRelational = function (op, leftType, rightType, resultType, liftedToNull) {
	var label = this._ilg.DefineLabel().MemberwiseClone();
	var local = this.GetLocal(leftType);
	var local2 = this.GetLocal(rightType);
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), local2);
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), local);
	if (op === System.Linq.Expressions.ExpressionType.Equal) {
		this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local);
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitHasValue(this._ilg, leftType);
		this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_0.MemberwiseClone());
		this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ceq.MemberwiseClone());
		this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local2);
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitHasValue(this._ilg, rightType);
		this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_0.MemberwiseClone());
		this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ceq.MemberwiseClone());
		this._ilg.Emit$0(System.Reflection.Emit.OpCodes.And.MemberwiseClone());
		this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Dup.MemberwiseClone());
		this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Brtrue_S.MemberwiseClone(), label.MemberwiseClone());
		this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Pop.MemberwiseClone());
		this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local);
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitHasValue(this._ilg, leftType);
		this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local2);
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitHasValue(this._ilg, rightType);
		this._ilg.Emit$0(System.Reflection.Emit.OpCodes.And.MemberwiseClone());
		this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Dup.MemberwiseClone());
		this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Brfalse_S.MemberwiseClone(), label.MemberwiseClone());
		this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Pop.MemberwiseClone());
	} else if (op === System.Linq.Expressions.ExpressionType.NotEqual) {
		this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local);
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitHasValue(this._ilg, leftType);
		this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local2);
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitHasValue(this._ilg, rightType);
		this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Or.MemberwiseClone());
		this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Dup.MemberwiseClone());
		this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Brfalse_S.MemberwiseClone(), label.MemberwiseClone());
		this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Pop.MemberwiseClone());
		this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local);
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitHasValue(this._ilg, leftType);
		this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_0.MemberwiseClone());
		this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ceq.MemberwiseClone());
		this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local2);
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitHasValue(this._ilg, rightType);
		this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_0.MemberwiseClone());
		this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ceq.MemberwiseClone());
		this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Or.MemberwiseClone());
		this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Dup.MemberwiseClone());
		this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Brtrue_S.MemberwiseClone(), label.MemberwiseClone());
		this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Pop.MemberwiseClone());
	} else {
		this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local);
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitHasValue(this._ilg, leftType);
		this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local2);
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitHasValue(this._ilg, rightType);
		this._ilg.Emit$0(System.Reflection.Emit.OpCodes.And.MemberwiseClone());
		this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Dup.MemberwiseClone());
		this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Brfalse_S.MemberwiseClone(), label.MemberwiseClone());
		this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Pop.MemberwiseClone());
	}
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local);
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitGetValueOrDefault(this._ilg, leftType);
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local2);
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitGetValueOrDefault(this._ilg, rightType);
	this.FreeLocal(local);
	this.FreeLocal(local2);
	this.EmitBinaryOperator(
		op, 
		$asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(leftType), 
		$asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(rightType), 
		$asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(resultType), 
		false
	);
	if (!liftedToNull) {
		this._ilg.MarkLabel(label.MemberwiseClone());
	}
	if (!$asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(resultType, $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(resultType))) {
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitConvertToType(this._ilg, $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(resultType), resultType, true);
	}
	if (liftedToNull) {
		var label2 = this._ilg.DefineLabel().MemberwiseClone();
		this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Br.MemberwiseClone(), label2.MemberwiseClone());
		this._ilg.MarkLabel(label.MemberwiseClone());
		this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Pop.MemberwiseClone());
		this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ldnull.MemberwiseClone());
		this._ilg.Emit$6(System.Reflection.Emit.OpCodes.Unbox_Any.MemberwiseClone(), resultType);
		this._ilg.MarkLabel(label2.MemberwiseClone());
	}
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitLiftedBinaryArithmetic = function (op, leftType, rightType, resultType) {
	var flag = $asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(leftType);
	var flag2 = $asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(rightType);
	var label = this._ilg.DefineLabel().MemberwiseClone();
	var label2 = this._ilg.DefineLabel().MemberwiseClone();
	var local = this.GetLocal(leftType);
	var local2 = this.GetLocal(rightType);
	var local3 = this.GetLocal(resultType);
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), local2);
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), local);
	if (flag) {
		this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local);
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitHasValue(this._ilg, leftType);
		this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Brfalse_S.MemberwiseClone(), label.MemberwiseClone());
	}
	if (flag2) {
		this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local2);
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitHasValue(this._ilg, rightType);
		this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Brfalse_S.MemberwiseClone(), label.MemberwiseClone());
	}
	if (flag) {
		this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local);
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitGetValueOrDefault(this._ilg, leftType);
	} else {
		this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone(), local);
	}
	if (flag2) {
		this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local2);
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitGetValueOrDefault(this._ilg, rightType);
	} else {
		this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone(), local2);
	}
	this.FreeLocal(local);
	this.FreeLocal(local2);
	this.EmitBinaryOperator(
		op, 
		$asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(leftType), 
		$asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(rightType), 
		$asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(resultType), 
		false
	);
	var constructor = resultType.GetConstructor$2(JSIL.Array.New(System.Type, [$asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(resultType)]));
	this._ilg.Emit$5(System.Reflection.Emit.OpCodes.Newobj.MemberwiseClone(), constructor);
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), local3);
	this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Br_S.MemberwiseClone(), label2.MemberwiseClone());
	this._ilg.MarkLabel(label.MemberwiseClone());
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local3);
	this._ilg.Emit$6(System.Reflection.Emit.OpCodes.Initobj.MemberwiseClone(), resultType);
	this._ilg.MarkLabel(label2.MemberwiseClone());
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone(), local3);
	this.FreeLocal(local3);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitLiftedBooleanAnd = function () {
	var typeFromHandle = System.Nullable$b1.Of(System.Boolean);
	var label = this._ilg.DefineLabel().MemberwiseClone();
	var label2 = this._ilg.DefineLabel().MemberwiseClone();
	var label3 = this._ilg.DefineLabel().MemberwiseClone();
	var label4 = this._ilg.DefineLabel().MemberwiseClone();
	var label5 = this._ilg.DefineLabel().MemberwiseClone();
	var local = this.GetLocal(typeFromHandle);
	var local2 = this.GetLocal(typeFromHandle);
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), local2);
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), local);
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local);
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitHasValue(this._ilg, typeFromHandle);
	this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Brfalse.MemberwiseClone(), label.MemberwiseClone());
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local);
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitGetValueOrDefault(this._ilg, typeFromHandle);
	this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_0.MemberwiseClone());
	this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ceq.MemberwiseClone());
	this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Brtrue.MemberwiseClone(), label2.MemberwiseClone());
	this._ilg.MarkLabel(label.MemberwiseClone());
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local2);
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitHasValue(this._ilg, typeFromHandle);
	this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Brfalse_S.MemberwiseClone(), label3.MemberwiseClone());
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local2);
	this.FreeLocal(local2);
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitGetValueOrDefault(this._ilg, typeFromHandle);
	this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_0.MemberwiseClone());
	this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ceq.MemberwiseClone());
	this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Brtrue_S.MemberwiseClone(), label2.MemberwiseClone());
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local);
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitHasValue(this._ilg, typeFromHandle);
	this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Brfalse.MemberwiseClone(), label3.MemberwiseClone());
	this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_1.MemberwiseClone());
	this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Br_S.MemberwiseClone(), label4.MemberwiseClone());
	this._ilg.MarkLabel(label2.MemberwiseClone());
	this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_0.MemberwiseClone());
	this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Br_S.MemberwiseClone(), label4.MemberwiseClone());
	this._ilg.MarkLabel(label4.MemberwiseClone());
	var constructor = typeFromHandle.GetConstructor$2(JSIL.Array.New(System.Type, [System.Boolean]));
	this._ilg.Emit$5(System.Reflection.Emit.OpCodes.Newobj.MemberwiseClone(), constructor);
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), local);
	this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Br.MemberwiseClone(), label5.MemberwiseClone());
	this._ilg.MarkLabel(label3.MemberwiseClone());
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local);
	this._ilg.Emit$6(System.Reflection.Emit.OpCodes.Initobj.MemberwiseClone(), typeFromHandle);
	this._ilg.MarkLabel(label5.MemberwiseClone());
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone(), local);
	this.FreeLocal(local);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitLiftedBooleanOr = function () {
	var typeFromHandle = System.Nullable$b1.Of(System.Boolean);
	var label = this._ilg.DefineLabel().MemberwiseClone();
	var label2 = this._ilg.DefineLabel().MemberwiseClone();
	var label3 = this._ilg.DefineLabel().MemberwiseClone();
	var label4 = this._ilg.DefineLabel().MemberwiseClone();
	var label5 = this._ilg.DefineLabel().MemberwiseClone();
	var local = this.GetLocal(typeFromHandle);
	var local2 = this.GetLocal(typeFromHandle);
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), local2);
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), local);
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local);
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitHasValue(this._ilg, typeFromHandle);
	this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Brfalse.MemberwiseClone(), label.MemberwiseClone());
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local);
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitGetValueOrDefault(this._ilg, typeFromHandle);
	this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_0.MemberwiseClone());
	this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ceq.MemberwiseClone());
	this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Brfalse.MemberwiseClone(), label2.MemberwiseClone());
	this._ilg.MarkLabel(label.MemberwiseClone());
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local2);
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitHasValue(this._ilg, typeFromHandle);
	this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Brfalse_S.MemberwiseClone(), label3.MemberwiseClone());
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local2);
	this.FreeLocal(local2);
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitGetValueOrDefault(this._ilg, typeFromHandle);
	this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_0.MemberwiseClone());
	this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ceq.MemberwiseClone());
	this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Brfalse_S.MemberwiseClone(), label2.MemberwiseClone());
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local);
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitHasValue(this._ilg, typeFromHandle);
	this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Brfalse.MemberwiseClone(), label3.MemberwiseClone());
	this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_0.MemberwiseClone());
	this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Br_S.MemberwiseClone(), label4.MemberwiseClone());
	this._ilg.MarkLabel(label2.MemberwiseClone());
	this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_1.MemberwiseClone());
	this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Br_S.MemberwiseClone(), label4.MemberwiseClone());
	this._ilg.MarkLabel(label4.MemberwiseClone());
	var constructor = typeFromHandle.GetConstructor$2(JSIL.Array.New(System.Type, [System.Boolean]));
	this._ilg.Emit$5(System.Reflection.Emit.OpCodes.Newobj.MemberwiseClone(), constructor);
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), local);
	this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Br.MemberwiseClone(), label5.MemberwiseClone());
	this._ilg.MarkLabel(label3.MemberwiseClone());
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local);
	this._ilg.Emit$6(System.Reflection.Emit.OpCodes.Initobj.MemberwiseClone(), typeFromHandle);
	this._ilg.MarkLabel(label5.MemberwiseClone());
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone(), local);
	this.FreeLocal(local);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EnsureLabel = function (node) {
	var result = new JSIL.Variable(null);
	if (!this._labelInfo.TryGetValue(node, /* ref */ result)) {
		this._labelInfo.Add(node, (result.value = new $asm08.System.Linq.Expressions.Compiler.LabelInfo(this._ilg, node, false)));
	}
	return result.value;
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.ReferenceLabel = function (node) {
	var labelInfo = this.EnsureLabel(node);
	labelInfo.Reference(this._labelBlock);
	return labelInfo;
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.DefineLabel = function (node) {
	if (node === null) {
		return new $asm08.System.Linq.Expressions.Compiler.LabelInfo(this._ilg, null, false);
	}
	var labelInfo = this.EnsureLabel(node);
	labelInfo.Define(this._labelBlock);
	return labelInfo;
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.PushLabelBlock = function (type) {
	this._labelBlock = new $asm08.System.Linq.Expressions.Compiler.LabelScopeInfo(this._labelBlock, type);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.PopLabelBlock = function (kind) {
	this._labelBlock = this._labelBlock.Parent;
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitLabelExpression = function (expr, flags) {
	var labelExpression = JSIL.Cast(expr, System.Linq.Expressions.LabelExpression);
	var labelInfo = new JSIL.Variable(null);
	if (this._labelBlock.Kind === $asm08.System.Linq.Expressions.Compiler.LabelScopeKind.Block) {
		this._labelBlock.TryGetLabelInfo(labelExpression.Target, /* ref */ labelInfo);
		if (!(labelInfo.value || (this._labelBlock.Parent.Kind !== $asm08.System.Linq.Expressions.Compiler.LabelScopeKind.Switch))) {
			this._labelBlock.Parent.TryGetLabelInfo(labelExpression.Target, /* ref */ labelInfo);
		}
	}
	if (labelInfo.value === null) {
		labelInfo.value = this.DefineLabel(labelExpression.Target);
	}
	if (labelExpression.DefaultValue !== null) {
		if (labelExpression.Target.Type === System.Void) {
			this.EmitExpressionAsVoid$1(labelExpression.DefaultValue, flags);
		} else {
			flags = $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.UpdateEmitExpressionStartFlag(flags, $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitExpressionStart);
			this.EmitExpression$1(labelExpression.DefaultValue, flags);
		}
	}
	labelInfo.value.Mark();
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitGotoExpression = function (expr, flags) {
	var gotoExpression = JSIL.Cast(expr, System.Linq.Expressions.GotoExpression);
	var labelInfo = this.ReferenceLabel(gotoExpression.Target);
	var compilationFlags = (flags & ($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsMiddle | $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsNoTail | $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsTail | $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsTailCallMask));
	if (compilationFlags !== $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsNoTail) {
		compilationFlags = labelInfo.CanReturn ? $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsTail : $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsNoTail;
		flags = $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.UpdateEmitAsTailCallFlag(flags, compilationFlags);
	}
	if (gotoExpression.Value !== null) {
		if (gotoExpression.Target.Type === System.Void) {
			this.EmitExpressionAsVoid$1(gotoExpression.Value, flags);
		} else {
			flags = $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.UpdateEmitExpressionStartFlag(flags, $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitExpressionStart);
			this.EmitExpression$1(gotoExpression.Value, flags);
		}
	}
	labelInfo.EmitJump();
	this.EmitUnreachable(gotoExpression, flags);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitUnreachable = function (node, flags) {
	if (!((node.Type === System.Void) || (flags & $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsVoidType))) {
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitDefault(this._ilg, node.Type);
	}
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.TryPushLabelBlock = function (node) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				var nodeType = node.NodeType;
				switch (Number(nodeType)) {
					case 8: 
						__label0__ = "IL_15B";
						continue __step0__;
					case 9: 
						break;
					case 10: 
						if (node.Type === System.Void) {
							this.PushLabelBlock($asm08.System.Linq.Expressions.Compiler.LabelScopeKind.Statement);
							return true;
						}
						break;
					default: 
						if (nodeType !== System.Linq.Expressions.ExpressionType.Block) {
							switch (Number(nodeType)) {
								case 53: 
								case 58: 
									__label0__ = "IL_15B";
									continue __step0__;
								case 56: 
									if (this._labelBlock.Kind === $asm08.System.Linq.Expressions.Compiler.LabelScopeKind.Block) {
										var target = JSIL.Cast(node, System.Linq.Expressions.LabelExpression).Target;
										if (this._labelBlock.ContainsTarget(target)) {
											return false;
										}
										if (!((this._labelBlock.Parent.Kind !== $asm08.System.Linq.Expressions.Compiler.LabelScopeKind.Switch) || !this._labelBlock.Parent.ContainsTarget(target))) {
											return false;
										}
									}
									this.PushLabelBlock($asm08.System.Linq.Expressions.Compiler.LabelScopeKind.Statement);
									return true;
								case 59: 
									this.PushLabelBlock($asm08.System.Linq.Expressions.Compiler.LabelScopeKind.Switch);
									var switchExpression = JSIL.Cast(node, System.Linq.Expressions.SwitchExpression);
									var enumerator = switchExpression.Cases.GetEnumerator();
									try {
									__loop0__: 
										while (enumerator.IEnumerator_MoveNext()) {
											var current = enumerator.IEnumerator$b1_Current;
											this.DefineBlockLabels(current.Body);
										}
									} finally {
										if (enumerator !== null) {
											enumerator.IDisposable_Dispose();
										}
									}
									this.DefineBlockLabels(switchExpression.DefaultBody);
									return true;
							}
						} else if (JSIL.TryCast(node, $asm08.System.Linq.Expressions.Compiler.SpilledExpressionBlock) === null) {
							this.PushLabelBlock($asm08.System.Linq.Expressions.Compiler.LabelScopeKind.Block);
							if (this._labelBlock.Parent.Kind !== $asm08.System.Linq.Expressions.Compiler.LabelScopeKind.Switch) {
								this.DefineBlockLabels(node);
							}
							return true;
						}
						break;
				}
				if (this._labelBlock.Kind !== $asm08.System.Linq.Expressions.Compiler.LabelScopeKind.Expression) {
					this.PushLabelBlock($asm08.System.Linq.Expressions.Compiler.LabelScopeKind.Expression);
					return true;
				}
				return false;
				__label0__ = "IL_15B";
				continue __step0__;
				break;
			case "IL_15B":
				this.PushLabelBlock($asm08.System.Linq.Expressions.Compiler.LabelScopeKind.Statement);
				return true;
				break __step0__;
		}
	}
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.DefineBlockLabels = function (node) {
	var blockExpression = JSIL.TryCast(node, System.Linq.Expressions.BlockExpression);
	if (!((blockExpression !== null) && (JSIL.TryCast(blockExpression, $asm08.System.Linq.Expressions.Compiler.SpilledExpressionBlock) === null))) {
		return;
	}
	var i = 0;
	var expressionCount = blockExpression.ExpressionCount;
__loop0__: 
	while (i < expressionCount) {
		var expression = blockExpression.GetExpression(i);
		var labelExpression = JSIL.TryCast(expression, System.Linq.Expressions.LabelExpression);
		if (labelExpression !== null) {
			this.DefineLabel(labelExpression.Target);
		}
		++i;
	}
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.AddReturnLabel = function (lambda) {
	var expression = lambda.Body;
__loop0__: 
	while (true) {
		var nodeType = expression.NodeType;
		if (nodeType !== System.Linq.Expressions.ExpressionType.Block) {
			break __loop0__;
		}
		var blockExpression = JSIL.Cast(expression, System.Linq.Expressions.BlockExpression);
	__loop1__: 
		for (var i = (blockExpression.ExpressionCount - 1); i >= 0; --i) {
			expression = blockExpression.GetExpression(i);
			if ($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.Significant(expression)) {
				break __loop1__;
			}
		}
	}
	if (nodeType !== System.Linq.Expressions.ExpressionType.Label) {
		return;
	}
	var target = JSIL.Cast(expression, System.Linq.Expressions.LabelExpression).Target;
	this._labelInfo.Add(target, new $asm08.System.Linq.Expressions.Compiler.LabelInfo(this._ilg, target, $asm08.System.Dynamic.Utils.TypeUtils.AreReferenceAssignable(lambda.ReturnType, target.Type)));
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.get_EmitDebugSymbols = function () {
	return (this._tree.DebugInfoGenerator !== null);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype._ctor$0 = function (tree, lambda) {
	this._labelBlock = new $asm08.System.Linq.Expressions.Compiler.LabelScopeInfo(null, $asm08.System.Linq.Expressions.Compiler.LabelScopeKind.Lambda);
	this._labelInfo = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.Linq.Expressions.LabelTarget, $asm08.System.Linq.Expressions.Compiler.LabelInfo), "_ctor$0", []);
	this._freeLocals = new ($asm08.System.Linq.Expressions.Compiler.KeyedQueue$b2.Of(System.Type, System.Reflection.Emit.LocalBuilder)) ();
	System.Object.prototype._ctor.call(this);
	var parameterTypes = $asm08.System.Dynamic.Utils.CollectionExtensions.AddFirst$b1(System.Type)(JSIL.Cast($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.GetParameterTypes(lambda), System.Collections.Generic.IList$b1.Of(System.Type)), System.Runtime.CompilerServices.Closure);
	var dynamicMethod = JSIL.New(System.Reflection.Emit.DynamicMethod, "_ctor$2", [JSIL.Coalesce(lambda.Name, "lambda_method"), lambda.ReturnType, parameterTypes, true]);
	this._tree = tree;
	this._lambda = lambda;
	this._method = dynamicMethod;
	this._ilg = new $asm08.System.Linq.Expressions.Compiler.OffsetTrackingILGenerator(dynamicMethod.GetILGenerator$0());
	this._hasClosureArgument = true;
	this._scope = tree.Scopes.get_Item(lambda);
	this._boundConstants = tree.Constants.get_Item(lambda);
	this.InitializeMethod();
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype._ctor$1 = function (tree, lambda, method) {
	this._labelBlock = new $asm08.System.Linq.Expressions.Compiler.LabelScopeInfo(null, $asm08.System.Linq.Expressions.Compiler.LabelScopeKind.Lambda);
	this._labelInfo = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.Linq.Expressions.LabelTarget, $asm08.System.Linq.Expressions.Compiler.LabelInfo), "_ctor$0", []);
	this._freeLocals = new ($asm08.System.Linq.Expressions.Compiler.KeyedQueue$b2.Of(System.Type, System.Reflection.Emit.LocalBuilder)) ();
	System.Object.prototype._ctor.call(this);
	this._hasClosureArgument = tree.Scopes.get_Item(lambda).NeedsClosure;
	var array = $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.GetParameterTypes(lambda);
	if (this._hasClosureArgument) {
		array = $asm08.System.Dynamic.Utils.CollectionExtensions.AddFirst$b1(System.Type)(JSIL.Cast(array, System.Collections.Generic.IList$b1.Of(System.Type)), System.Runtime.CompilerServices.Closure);
	}
	method.SetReturnType(lambda.ReturnType);
	method.SetParameters(array);
	var array2 = $asm08.System.Dynamic.Utils.CollectionExtensions.Map$b2(System.Linq.Expressions.ParameterExpression, System.String)(JSIL.Cast(lambda.Parameters, System.Collections.Generic.ICollection$b1.Of(System.Linq.Expressions.ParameterExpression)), function (p) {
			return p.Name;
		});
__loop0__: 
	for (var i = 0; i < array2.length; ++i) {
		method.DefineParameter((i + this._hasClosureArgument ? 2 : 1), System.Reflection.ParameterAttributes.None, array2[i]);
	}
	this._tree = tree;
	this._lambda = lambda;
	this._typeBuilder = JSIL.Cast(method.DeclaringType, System.Reflection.Emit.TypeBuilder);
	this._method = method;
	this._ilg = new $asm08.System.Linq.Expressions.Compiler.OffsetTrackingILGenerator(method.GetILGenerator$0());
	this._scope = tree.Scopes.get_Item(lambda);
	this._boundConstants = tree.Constants.get_Item(lambda);
	this.InitializeMethod();
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype._ctor$2 = function (parent, lambda) {
	this._labelBlock = new $asm08.System.Linq.Expressions.Compiler.LabelScopeInfo(null, $asm08.System.Linq.Expressions.Compiler.LabelScopeKind.Lambda);
	this._labelInfo = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.Linq.Expressions.LabelTarget, $asm08.System.Linq.Expressions.Compiler.LabelInfo), "_ctor$0", []);
	this._freeLocals = new ($asm08.System.Linq.Expressions.Compiler.KeyedQueue$b2.Of(System.Type, System.Reflection.Emit.LocalBuilder)) ();
	System.Object.prototype._ctor.call(this);
	this._tree = parent._tree;
	this._lambda = lambda;
	this._method = parent._method;
	this._ilg = parent._ilg;
	this._hasClosureArgument = parent._hasClosureArgument;
	this._typeBuilder = parent._typeBuilder;
	this._scope = this._tree.Scopes.get_Item(lambda);
	this._boundConstants = parent._boundConstants;
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.InitializeMethod = function () {
	this.AddReturnLabel(this._lambda);
	this._boundConstants.EmitCacheConstants(this);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.toString = function () {
	return this._method.toString();
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.get_IL = function () {
	return this._ilg;
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.get_Parameters = function () {
	return this._lambda.Parameters;
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.get_CanEmitBoundConstants = function () {
	return JSIL.CheckType(this._method, System.Reflection.Emit.DynamicMethod);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.Compile$0 = function ($lambda, debugInfoGenerator) {
	var lambda = new JSIL.Variable($lambda);
	var analyzedTree = $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.AnalyzeLambda(/* ref */ lambda);
	analyzedTree.DebugInfoGenerator = debugInfoGenerator;
	var lambdaCompiler = JSIL.New($asm08.System.Linq.Expressions.Compiler.LambdaCompiler, "_ctor$0", [analyzedTree, lambda.value]);
	lambdaCompiler.EmitLambdaBody$0();
	return lambdaCompiler.CreateDelegate();
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.Compile$1 = function ($lambda, method, debugInfoGenerator) {
	var lambda = new JSIL.Variable($lambda);
	var analyzedTree = $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.AnalyzeLambda(/* ref */ lambda);
	analyzedTree.DebugInfoGenerator = debugInfoGenerator;
	var lambdaCompiler = JSIL.New($asm08.System.Linq.Expressions.Compiler.LambdaCompiler, "_ctor$1", [analyzedTree, lambda.value, method]);
	lambdaCompiler.EmitLambdaBody$0();
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.AnalyzeLambda = function (/* ref */ lambda) {
	lambda.value = $asm08.System.Linq.Expressions.Compiler.StackSpiller.AnalyzeLambda(lambda.value);
	return $asm08.System.Linq.Expressions.Compiler.VariableBinder.Bind(lambda.value);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.GetLocal = function (type) {
	var result = new JSIL.Variable(null);
	if (this._freeLocals.TryDequeue(type, /* ref */ result)) {
		return result.value;
	}
	return this._ilg.DeclareLocal(type);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.FreeLocal = function (local) {
	if (local !== null) {
		this._freeLocals.Enqueue(local.LocalType, local);
	}
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.GetNamedLocal = function (type, variable) {
	var localBuilder = this._ilg.DeclareLocal(type);
	if (!(!this.EmitDebugSymbols || (variable.Name === null))) {
		this._tree.DebugInfoGenerator.SetLocalName(localBuilder, variable.Name);
	}
	return localBuilder;
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.GetLambdaArgument = function (index) {
	return ((index + this._hasClosureArgument ? 1 : 0) + this._method.IsStatic ? 0 : 1);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitLambdaArgument = function (index) {
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitLoadArg(this._ilg, this.GetLambdaArgument(index));
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitClosureArgument = function () {
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitLoadArg(this._ilg, 0);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.CreateDelegate = function () {
	return $asm08.System.Dynamic.Utils.TypeExtensions.CreateDelegate$1(this._method, this._lambda.Type, new System.Runtime.CompilerServices.Closure(this._boundConstants.ToArray(), null));
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.CreateStaticField = function (name, type) {
	return this._typeBuilder.DefineField$0(JSIL.ConcatString.apply(null, ["<ExpressionCompilerImplementationDetails>{", System.Threading.Interlocked.Increment$0(/* ref */ new JSIL.MemberReference($asm08.System.Linq.Expressions.Compiler.LambdaCompiler, "_Counter")), "}", name]), type, (System.Reflection.FieldAttributes.Private | System.Reflection.FieldAttributes.Static));
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.CreateLazyInitializedField$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, name) {
		if (JSIL.TryCast(this._method, System.Reflection.Emit.DynamicMethod) !== null) {
			return System.Linq.Expressions.Expression.Field$1(System.Linq.Expressions.Expression.Constant$0(JSIL.New(System.Runtime.CompilerServices.StrongBox$b1.Of(T), "_ctor$0", [])), "Value");
		}
		return System.Linq.Expressions.Expression.Field$0(null, this.CreateStaticField(name, T));
	}
);
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.UpdateEmitAsTailCallFlag = function (flags, newValue) {
	return ((flags ^ (flags & ($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsMiddle | $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsNoTail | $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsTail | $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsTailCallMask))) | newValue);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.UpdateEmitExpressionStartFlag = function (flags, newValue) {
	return ((flags ^ (flags & ($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitExpressionStart | $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitExpressionStartMask | $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitNoExpressionStart))) | newValue);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.UpdateEmitAsTypeFlag = function (flags, newValue) {
	return ((flags ^ (flags & ($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsDefaultType | $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsTypeMask | $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsVoidType))) | newValue);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitExpression$0 = function (node) {
	this.EmitExpression$1(node, ($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsNoTail | $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitExpressionStart));
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitExpressionAsVoid$0 = function (node) {
	this.EmitExpressionAsVoid$1(node, $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsNoTail);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitExpressionAsVoid$1 = function (node, flags) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				var flags2 = this.EmitExpressionStart(node);
				var nodeType = node.NodeType;
				if (nodeType <= System.Linq.Expressions.ExpressionType.Parameter) {
					if ((nodeType === System.Linq.Expressions.ExpressionType.Constant) || (nodeType === System.Linq.Expressions.ExpressionType.Parameter)) {
						__label0__ = "IL_D8";
						continue __step0__;
					}
				} else {
					switch (Number(nodeType)) {
						case 46: 
							this.EmitAssign(JSIL.Cast(node, System.Linq.Expressions.BinaryExpression), $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsVoidType);
							__label0__ = "IL_D8";
							continue __step0__;
						case 47: 
							this.Emit(JSIL.Cast(node, System.Linq.Expressions.BlockExpression), $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.UpdateEmitAsTypeFlag(flags, $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsVoidType));
							__label0__ = "IL_D8";
							continue __step0__;
						default: 
							switch (Number(nodeType)) {
								case 51: 
									__label0__ = "IL_D8";
									continue __step0__;
								case 52: 
									break;
								case 53: 
									this.EmitGotoExpression(node, $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.UpdateEmitAsTypeFlag(flags, $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsVoidType));
									__label0__ = "IL_D8";
									continue __step0__;
								default: 
									if (nodeType === System.Linq.Expressions.ExpressionType.Throw) {
										this.EmitThrow(JSIL.Cast(node, System.Linq.Expressions.UnaryExpression), $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsVoidType);
										__label0__ = "IL_D8";
										continue __step0__;
									}
									break;
							}
							break;
					}
				}
				if (node.Type === System.Void) {
					this.EmitExpression$1(node, $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.UpdateEmitExpressionStartFlag(flags, $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitNoExpressionStart));
				} else {
					this.EmitExpression$1(node, ($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsNoTail | $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitNoExpressionStart));
					this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Pop.MemberwiseClone());
				}
				__label0__ = "IL_D8";
				continue __step0__;
				break;
			case "IL_D8":
				this.EmitExpressionEnd(flags2);
				break __step0__;
		}
	}
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitExpressionAsType = function (node, type, flags) {
	if (type === System.Void) {
		this.EmitExpressionAsVoid$1(node, flags);
		return;
	}
	if (!$asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(node.Type, type)) {
		this.EmitExpression$0(node);
		this._ilg.Emit$6(System.Reflection.Emit.OpCodes.Castclass.MemberwiseClone(), type);
		return;
	}
	this.EmitExpression$1(node, $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.UpdateEmitExpressionStartFlag(flags, $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitExpressionStart));
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitExpressionStart = function (node) {
	if (this.TryPushLabelBlock(node)) {
		return $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitExpressionStart;
	}
	return $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitNoExpressionStart;
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitExpressionEnd = function (flags) {
	if ((flags & ($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitExpressionStart | $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitExpressionStartMask | $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitNoExpressionStart)) === $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitExpressionStart) {
		this.PopLabelBlock(this._labelBlock.Kind);
	}
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitInvocationExpression = function (expr, flags) {
	var invocationExpression = JSIL.Cast(expr, System.Linq.Expressions.InvocationExpression);
	if (invocationExpression.LambdaOperand !== null) {
		this.EmitInlinedInvoke(invocationExpression, flags);
		return;
	}
	expr = invocationExpression.Expression;
	if (System.Linq.Expressions.LambdaExpression.IsAssignableFrom(expr.Type)) {
		expr = System.Linq.Expressions.Expression.Call$7(expr, expr.Type.GetMethod$3("Compile", JSIL.Array.New(System.Type, 0)));
	}
	expr = System.Linq.Expressions.Expression.Call$13(expr, expr.Type.GetMethod$5("Invoke"), invocationExpression.Arguments);
	this.EmitExpression$0(expr);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitInlinedInvoke = function (invoke, flags) {
	var lambdaOperand = invoke.LambdaOperand;
	var list = this.EmitArguments$0(lambdaOperand.Type.GetMethod$5("Invoke"), invoke);
	var lambdaCompiler = JSIL.New($asm08.System.Linq.Expressions.Compiler.LambdaCompiler, "_ctor$2", [this, lambdaOperand]);
	if (list.Count !== 0) {
		flags = $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.UpdateEmitAsTailCallFlag(flags, $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsNoTail);
	}
	lambdaCompiler.EmitLambdaBody$1(this._scope, true, flags);
	$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.EmitWriteBack(list);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitIndexExpression = function (expr) {
	var indexExpression = JSIL.Cast(expr, System.Linq.Expressions.IndexExpression);
	var objectType = null;
	if (indexExpression.Object !== null) {
		this.EmitInstance(indexExpression.Object, (objectType = indexExpression.Object.Type));
	}
	var enumerator = indexExpression.Arguments.GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current;
			this.EmitExpression$0(current);
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	this.EmitGetIndexCall(indexExpression, objectType);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitIndexAssignment = function (node, flags) {
	var indexExpression = JSIL.Cast(node.Left, System.Linq.Expressions.IndexExpression);
	var compilationFlags = (flags & ($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsDefaultType | $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsTypeMask | $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsVoidType));
	var objectType = null;
	if (indexExpression.Object !== null) {
		this.EmitInstance(indexExpression.Object, (objectType = indexExpression.Object.Type));
	}
	var enumerator = indexExpression.Arguments.GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current;
			this.EmitExpression$0(current);
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	this.EmitExpression$0(node.Right);
	var local = null;
	if (compilationFlags !== $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsVoidType) {
		this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Dup.MemberwiseClone());
		this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), (local = this.GetLocal(node.Type)));
	}
	this.EmitSetIndexCall(indexExpression, objectType);
	if (compilationFlags !== $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsVoidType) {
		this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone(), local);
		this.FreeLocal(local);
	}
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitGetIndexCall = function (node, objectType) {
	if (node.Indexer !== null) {
		var getMethod = node.Indexer.GetGetMethod$0(true);
		this.EmitCall(objectType, getMethod);
		return;
	}
	if (node.Arguments.Count !== 1) {
		this._ilg.Emit$4(System.Reflection.Emit.OpCodes.Call.MemberwiseClone(), node.Object.Type.GetMethod$4("Get", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public)));
		return;
	}
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitLoadElement(this._ilg, node.Type);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitSetIndexCall = function (node, objectType) {
	if (node.Indexer !== null) {
		var setMethod = node.Indexer.GetSetMethod$0(true);
		this.EmitCall(objectType, setMethod);
		return;
	}
	if (node.Arguments.Count !== 1) {
		this._ilg.Emit$4(System.Reflection.Emit.OpCodes.Call.MemberwiseClone(), node.Object.Type.GetMethod$4("Set", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public)));
		return;
	}
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitStoreElement(this._ilg, node.Type);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitMethodCallExpression$0 = function (expr, flags) {
	var methodCallExpression = JSIL.Cast(expr, System.Linq.Expressions.MethodCallExpression);
	this.EmitMethodCall$1(methodCallExpression.Object, methodCallExpression.Method, methodCallExpression, flags);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitMethodCallExpression$1 = function (expr) {
	this.EmitMethodCallExpression$0(expr, $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsNoTail);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitMethodCall$0 = function (obj, method, methodCallExpr) {
	this.EmitMethodCall$1(obj, method, methodCallExpr, $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsNoTail);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitMethodCall$1 = function (obj, method, methodCallExpr, flags) {
	var objectType = null;
	if (!method.IsStatic) {
		this.EmitInstance(obj, (objectType = obj.Type));
	}
	if (!((obj === null) || !obj.Type.IsValueType)) {
		this.EmitMethodCall$2(method, methodCallExpr, objectType);
		return;
	}
	this.EmitMethodCall$3(method, methodCallExpr, objectType, flags);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitMethodCall$2 = function (mi, args, objectType) {
	this.EmitMethodCall$3(mi, args, objectType, $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsNoTail);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitMethodCall$3 = function (mi, args, objectType, flags) {
	var writeBacks = this.EmitArguments$0(mi, args);
	var opCode = $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.UseVirtual(mi) ? System.Reflection.Emit.OpCodes.Callvirt : System.Reflection.Emit.OpCodes.Call.MemberwiseClone();
	if (!(!System.Reflection.Emit.OpCode.op_Equality(opCode.MemberwiseClone(), System.Reflection.Emit.OpCodes.Callvirt.MemberwiseClone()) || !objectType.IsValueType)) {
		this._ilg.Emit$6(System.Reflection.Emit.OpCodes.Constrained.MemberwiseClone(), objectType);
	}
	if (!(((flags & ($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsMiddle | $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsNoTail | $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsTail | $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsTailCallMask)) !== $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsTail) || $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.MethodHasByRefParameter(mi))) {
		this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Tailcall.MemberwiseClone());
	}
	if (mi.CallingConvention === System.Reflection.CallingConventions.VarArgs) {
		this._ilg.EmitCall(opCode.MemberwiseClone(), mi, $asm08.System.Linq.Expressions.ArgumentProviderOps.Map$b1(System.Type)(args, function (a) {
					return a.Type;
				}));
	} else {
		this._ilg.Emit$4(opCode.MemberwiseClone(), mi);
	}
	$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.EmitWriteBack(writeBacks);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.MethodHasByRefParameter = function (mi) {
	var parametersCached = $asm08.System.Dynamic.Utils.TypeExtensions.GetParametersCached(mi);
__loop0__: 
	for (var i = 0; i < parametersCached.length; ++i) {
		var pi = parametersCached[i];
		if ($asm08.System.Dynamic.Utils.TypeExtensions.IsByRefParameter(pi)) {
			return true;
		}
	}
	return false;
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitCall = function (objectType, method) {
	if (method.CallingConvention === System.Reflection.CallingConventions.VarArgs) {
		throw $asm08.System.Core.Error.UnexpectedVarArgsCall(method);
	}
	var opCode = $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.UseVirtual(method) ? System.Reflection.Emit.OpCodes.Callvirt : System.Reflection.Emit.OpCodes.Call.MemberwiseClone();
	if (!(!System.Reflection.Emit.OpCode.op_Equality(opCode.MemberwiseClone(), System.Reflection.Emit.OpCodes.Callvirt.MemberwiseClone()) || !objectType.IsValueType)) {
		this._ilg.Emit$6(System.Reflection.Emit.OpCodes.Constrained.MemberwiseClone(), objectType);
	}
	this._ilg.Emit$4(opCode.MemberwiseClone(), method);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.UseVirtual = function (mi) {
	return (!mi.IsStatic && !mi.DeclaringType.IsValueType);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitArguments$0 = function (method, args) {
	return this.EmitArguments$1(method, args, 0);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitArguments$1 = function (method, args, skipParameters) {
	var parametersCached = $asm08.System.Dynamic.Utils.TypeExtensions.GetParametersCached(method);
	var list = new (System.Collections.Generic.List$b1.Of($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.WriteBack)) ();
	var i = skipParameters;
	var num = parametersCached.length;
__loop0__: 
	while (i < num) {
		var argument = args.IArgumentProvider_GetArgument((i - skipParameters));
		var type = parametersCached[i].ParameterType;
		if (type.IsByRef) {
			type = type.GetElementType();
			var writeBack = this.EmitAddressWriteBack(argument, type);
			if (writeBack !== null) {
				list.Add(writeBack);
			}
		} else {
			this.EmitExpression$0(argument);
		}
		++i;
	}
	return list;
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.EmitWriteBack = function (writeBacks) {
	var enumerator = writeBacks.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current;
			current();
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitConstantExpression = function (expr) {
	var constantExpression = JSIL.Cast(expr, System.Linq.Expressions.ConstantExpression);
	this.EmitConstant(constantExpression.Value, constantExpression.Type);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitConstant = function (value, type) {
	if ($asm08.System.Linq.Expressions.Compiler.ILGen.CanEmitConstant(value, type)) {
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitConstant$1(this._ilg, value, type);
		return;
	}
	this._boundConstants.EmitConstant(this, value, type);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitDynamicExpression = function (expr) {
	if (JSIL.TryCast(this._method, System.Reflection.Emit.DynamicMethod) === null) {
		throw $asm08.System.Core.Error.CannotCompileDynamic();
	}
	var dynamicExpression = JSIL.Cast(expr, System.Linq.Expressions.DynamicExpression);
	var callSite = System.Runtime.CompilerServices.CallSite.Create(dynamicExpression.DelegateType, dynamicExpression.Binder);
	var type = (JSIL.GetType(callSite));
	var method = dynamicExpression.DelegateType.GetMethod$5("Invoke");
	this.EmitConstant(callSite, type);
	this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Dup.MemberwiseClone());
	var local = this.GetLocal(System.Runtime.CompilerServices.CallSite);
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), local);
	this._ilg.Emit$12(System.Reflection.Emit.OpCodes.Ldfld.MemberwiseClone(), type.GetField$1("Target"));
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone(), local);
	this.FreeLocal(local);
	var writeBacks = this.EmitArguments$1(method, dynamicExpression, 1);
	this._ilg.Emit$4(System.Reflection.Emit.OpCodes.Callvirt.MemberwiseClone(), method);
	$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.EmitWriteBack(writeBacks);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitNewExpression = function (expr) {
	var newExpression = JSIL.Cast(expr, System.Linq.Expressions.NewExpression);
	if (newExpression.Constructor !== null) {
		var writeBacks = this.EmitArguments$0(newExpression.Constructor, newExpression);
		this._ilg.Emit$5(System.Reflection.Emit.OpCodes.Newobj.MemberwiseClone(), newExpression.Constructor);
		$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.EmitWriteBack(writeBacks);
		return;
	}
	var local = this.GetLocal(newExpression.Type);
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local);
	this._ilg.Emit$6(System.Reflection.Emit.OpCodes.Initobj.MemberwiseClone(), newExpression.Type);
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone(), local);
	this.FreeLocal(local);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitTypeBinaryExpression = function (expr) {
	var typeBinaryExpression = JSIL.Cast(expr, System.Linq.Expressions.TypeBinaryExpression);
	if (typeBinaryExpression.NodeType === System.Linq.Expressions.ExpressionType.TypeEqual) {
		this.EmitExpression$0(typeBinaryExpression.ReduceTypeEqual());
		return;
	}
	var type = typeBinaryExpression.Expression.Type;
	var analyzeTypeIsResult = $asm08.System.Linq.Expressions.ConstantCheck.AnalyzeTypeIs$0(typeBinaryExpression);
	if (!((analyzeTypeIsResult !== $asm08.System.Linq.Expressions.AnalyzeTypeIsResult.KnownTrue) && JSIL.Cast(analyzeTypeIsResult, System.Boolean))) {
		this.EmitExpressionAsVoid$0(typeBinaryExpression.Expression);
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitBoolean(this._ilg, (analyzeTypeIsResult === $asm08.System.Linq.Expressions.AnalyzeTypeIsResult.KnownTrue));
		return;
	}
	if (analyzeTypeIsResult !== $asm08.System.Linq.Expressions.AnalyzeTypeIsResult.KnownAssignable) {
		this.EmitExpression$0(typeBinaryExpression.Expression);
		if (type.IsValueType) {
			this._ilg.Emit$6(System.Reflection.Emit.OpCodes.Box.MemberwiseClone(), type);
		}
		this._ilg.Emit$6(System.Reflection.Emit.OpCodes.Isinst.MemberwiseClone(), typeBinaryExpression.TypeOperand);
		this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ldnull.MemberwiseClone());
		this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Cgt_Un.MemberwiseClone());
		return;
	}
	if ($asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(type)) {
		this.EmitAddress$0(typeBinaryExpression.Expression, type);
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitHasValue(this._ilg, type);
		return;
	}
	this.EmitExpression$0(typeBinaryExpression.Expression);
	this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ldnull.MemberwiseClone());
	this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ceq.MemberwiseClone());
	this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_0.MemberwiseClone());
	this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ceq.MemberwiseClone());
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitVariableAssignment = function (node, flags) {
	var parameterExpression = JSIL.Cast(node.Left, System.Linq.Expressions.ParameterExpression);
	var compilationFlags = (flags & ($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsDefaultType | $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsTypeMask | $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsVoidType));
	this.EmitExpression$0(node.Right);
	if (compilationFlags !== $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsVoidType) {
		this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Dup.MemberwiseClone());
	}
	if (parameterExpression.IsByRef) {
		var local = this.GetLocal(parameterExpression.Type);
		this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), local);
		this._scope.EmitGet(parameterExpression);
		this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone(), local);
		this.FreeLocal(local);
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitStoreValueIndirect(this._ilg, parameterExpression.Type);
		return;
	}
	this._scope.EmitSet(parameterExpression);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitAssignBinaryExpression = function (expr) {
	this.EmitAssign(JSIL.Cast(expr, System.Linq.Expressions.BinaryExpression), $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsDefaultType);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitAssign = function (node, emitAs) {
	var nodeType = node.Left.NodeType;
	if (nodeType === System.Linq.Expressions.ExpressionType.MemberAccess) {
		this.EmitMemberAssignment$0(node, emitAs);
		return;
	}
	if (nodeType === System.Linq.Expressions.ExpressionType.Parameter) {
		this.EmitVariableAssignment(node, emitAs);
		return;
	}
	if (nodeType === System.Linq.Expressions.ExpressionType.Index) {
		this.EmitIndexAssignment(node, emitAs);
		return;
	}
	throw $asm08.System.Core.Error.InvalidLvalue(node.Left.NodeType);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitParameterExpression = function (expr) {
	var parameterExpression = JSIL.Cast(expr, System.Linq.Expressions.ParameterExpression);
	this._scope.EmitGet(parameterExpression);
	if (parameterExpression.IsByRef) {
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitLoadValueIndirect(this._ilg, parameterExpression.Type);
	}
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitLambdaExpression = function (expr) {
	var lambda = JSIL.Cast(expr, System.Linq.Expressions.LambdaExpression);
	this.EmitDelegateConstruction$1(lambda);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitRuntimeVariablesExpression = function (expr) {
	var runtimeVariablesExpression = JSIL.Cast(expr, System.Linq.Expressions.RuntimeVariablesExpression);
	this._scope.EmitVariableAccess(this, runtimeVariablesExpression.Variables);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitMemberAssignment$0 = function (node, flags) {
	var memberExpression = JSIL.Cast(node.Left, System.Linq.Expressions.MemberExpression);
	var member = memberExpression.Member;
	var objectType = null;
	if (memberExpression.Expression !== null) {
		this.EmitInstance(memberExpression.Expression, (objectType = memberExpression.Expression.Type));
	}
	this.EmitExpression$0(node.Right);
	var local = null;
	var compilationFlags = (flags & ($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsDefaultType | $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsTypeMask | $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsVoidType));
	if (compilationFlags !== $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsVoidType) {
		this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Dup.MemberwiseClone());
		this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), (local = this.GetLocal(node.Type)));
	}
	var memberType = member.MemberType;
	if (memberType !== System.Reflection.MemberTypes.Field) {
		if (memberType !== System.Reflection.MemberTypes.Property) {
			throw $asm08.System.Core.Error.InvalidMemberType(member.MemberType);
		}
		this.EmitCall(objectType, JSIL.Cast(member, System.Reflection.PropertyInfo).GetSetMethod$0(true));
	} else {
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitFieldSet(this._ilg, JSIL.Cast(member, System.Reflection.FieldInfo));
	}
	if (compilationFlags !== $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsVoidType) {
		this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone(), local);
		this.FreeLocal(local);
	}
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitMemberExpression = function (expr) {
	var memberExpression = JSIL.Cast(expr, System.Linq.Expressions.MemberExpression);
	var objectType = null;
	if (memberExpression.Expression !== null) {
		this.EmitInstance(memberExpression.Expression, (objectType = memberExpression.Expression.Type));
	}
	this.EmitMemberGet(memberExpression.Member, objectType);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitMemberGet = function (member, objectType) {
	var memberType = member.MemberType;
	if (memberType !== System.Reflection.MemberTypes.Field) {
		if (memberType !== System.Reflection.MemberTypes.Property) {
			throw $asm08.System.Dynamic.Utils.ContractUtils.Unreachable;
		}
		this.EmitCall(objectType, JSIL.Cast(member, System.Reflection.PropertyInfo).GetGetMethod$0(true));
		return;
	} else {
		var fieldInfo = JSIL.Cast(member, System.Reflection.FieldInfo);
		if (fieldInfo.IsLiteral) {
			this.EmitConstant(fieldInfo.GetRawConstantValue(), fieldInfo.FieldType);
			return;
		}
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitFieldGet(this._ilg, fieldInfo);
		return;
	}
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitInstance = function (instance, type) {
	if (instance !== null) {
		if (type.IsValueType) {
			this.EmitAddress$0(instance, type);
			return;
		}
		this.EmitExpression$0(instance);
	}
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitNewArrayExpression = function (expr) {
	var $l$gc__DisplayClassc = new $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.$l$gc__DisplayClassc();
	$l$gc__DisplayClassc.$this = this;
	$l$gc__DisplayClassc.node = JSIL.Cast(expr, System.Linq.Expressions.NewArrayExpression);
	if ($l$gc__DisplayClassc.node.NodeType === System.Linq.Expressions.ExpressionType.NewArrayInit) {
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitArray$0(this._ilg, $l$gc__DisplayClassc.node.Type.GetElementType(), $l$gc__DisplayClassc.node.Expressions.Count, function (index) {
				$l$gc__DisplayClassc.$this.EmitExpression$0($l$gc__DisplayClassc.node.Expressions.get_Item(index));
			});
		return;
	}
	var expressions = $l$gc__DisplayClassc.node.Expressions;
__loop0__: 
	for (var i = 0; i < expressions.Count; ++i) {
		var expression = expressions.get_Item(i);
		this.EmitExpression$0(expression);
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitConvertToType(this._ilg, expression.Type, System.Int32, true);
	}
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitArray$1(this._ilg, $l$gc__DisplayClassc.node.Type);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitDebugInfoExpression = function (expr) {
	if (!this.EmitDebugSymbols) {
		return;
	}
	var debugInfoExpression = JSIL.Cast(expr, System.Linq.Expressions.DebugInfoExpression);
	if (!(!debugInfoExpression.IsClear || !this._sequencePointCleared)) {
		return;
	}
	this._tree.DebugInfoGenerator.MarkSequencePoint$1(this._lambda, this._method, this._ilg, debugInfoExpression);
	this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Nop.MemberwiseClone());
	this._sequencePointCleared = debugInfoExpression.IsClear;
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.EmitExtensionExpression = function (expr) {
	throw $asm08.System.Core.Error.ExtensionNotReduced();
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitListInitExpression = function (expr) {
	this.EmitListInit$0(JSIL.Cast(expr, System.Linq.Expressions.ListInitExpression));
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitMemberInitExpression = function (expr) {
	this.EmitMemberInit$0(JSIL.Cast(expr, System.Linq.Expressions.MemberInitExpression));
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitBinding = function (binding, objectType) {
	switch (Number(binding.BindingType)) {
		case 0: 
			this.EmitMemberAssignment$1(JSIL.Cast(binding, System.Linq.Expressions.MemberAssignment), objectType);
			return;
		case 1: 
			this.EmitMemberMemberBinding(JSIL.Cast(binding, System.Linq.Expressions.MemberMemberBinding));
			return;
		case 2: 
			this.EmitMemberListBinding(JSIL.Cast(binding, System.Linq.Expressions.MemberListBinding));
			return;
		default: 
			throw $asm08.System.Core.Error.UnknownBindingType();
	}
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitMemberAssignment$1 = function (binding, objectType) {
	this.EmitExpression$0(binding.Expression);
	var fieldInfo = JSIL.TryCast(binding.Member, System.Reflection.FieldInfo);
	if (fieldInfo !== null) {
		this._ilg.Emit$12(System.Reflection.Emit.OpCodes.Stfld.MemberwiseClone(), fieldInfo);
		return;
	}
	var propertyInfo = JSIL.TryCast(binding.Member, System.Reflection.PropertyInfo);
	if (propertyInfo !== null) {
		this.EmitCall(objectType, propertyInfo.GetSetMethod$0(true));
		return;
	}
	throw $asm08.System.Core.Error.UnhandledBinding();
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitMemberMemberBinding = function (binding) {
	var memberType = $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.GetMemberType(binding.Member);
	if (!((JSIL.TryCast(binding.Member, System.Reflection.PropertyInfo) === null) || !memberType.IsValueType)) {
		throw $asm08.System.Core.Error.CannotAutoInitializeValueTypeMemberThroughProperty(binding.Member);
	}
	if (memberType.IsValueType) {
		this.EmitMemberAddress(binding.Member, binding.Member.DeclaringType);
	} else {
		this.EmitMemberGet(binding.Member, binding.Member.DeclaringType);
	}
	this.EmitMemberInit$1(binding.Bindings, false, memberType);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitMemberListBinding = function (binding) {
	var memberType = $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.GetMemberType(binding.Member);
	if (!((JSIL.TryCast(binding.Member, System.Reflection.PropertyInfo) === null) || !memberType.IsValueType)) {
		throw $asm08.System.Core.Error.CannotAutoInitializeValueTypeElementThroughProperty(binding.Member);
	}
	if (memberType.IsValueType) {
		this.EmitMemberAddress(binding.Member, binding.Member.DeclaringType);
	} else {
		this.EmitMemberGet(binding.Member, binding.Member.DeclaringType);
	}
	this.EmitListInit$1(binding.Initializers, false, memberType);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitMemberInit$0 = function (init) {
	this.EmitExpression$0(init.NewExpression);
	var localBuilder = null;
	if (!(!init.NewExpression.Type.IsValueType || (init.Bindings.Count <= 0))) {
		localBuilder = this._ilg.DeclareLocal(init.NewExpression.Type);
		this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), localBuilder);
		this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), localBuilder);
	}
	this.EmitMemberInit$1(init.Bindings, (localBuilder === null), init.NewExpression.Type);
	if (localBuilder !== null) {
		this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone(), localBuilder);
	}
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitMemberInit$1 = function (bindings, keepOnStack, objectType) {
	var count = bindings.Count;
	if (count === 0) {
		if (!keepOnStack) {
			this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Pop.MemberwiseClone());
			return;
		}
	} else {
	__loop0__: 
		for (var i = 0; i < count; ++i) {
			if (!(!keepOnStack && (i >= (count - 1)))) {
				this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Dup.MemberwiseClone());
			}
			this.EmitBinding(bindings.get_Item(i), objectType);
		}
	}
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitListInit$0 = function (init) {
	this.EmitExpression$0(init.NewExpression);
	var localBuilder = null;
	if (init.NewExpression.Type.IsValueType) {
		localBuilder = this._ilg.DeclareLocal(init.NewExpression.Type);
		this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), localBuilder);
		this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), localBuilder);
	}
	this.EmitListInit$1(init.Initializers, (localBuilder === null), init.NewExpression.Type);
	if (localBuilder !== null) {
		this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone(), localBuilder);
	}
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitListInit$1 = function (initializers, keepOnStack, objectType) {
	var count = initializers.Count;
	if (count === 0) {
		if (!keepOnStack) {
			this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Pop.MemberwiseClone());
			return;
		}
	} else {
	__loop0__: 
		for (var i = 0; i < count; ++i) {
			if (!(!keepOnStack && (i >= (count - 1)))) {
				this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Dup.MemberwiseClone());
			}
			this.EmitMethodCall$2(initializers.get_Item(i).AddMethod, initializers.get_Item(i), objectType);
			if (initializers.get_Item(i).AddMethod.ReturnType !== System.Void) {
				this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Pop.MemberwiseClone());
			}
		}
	}
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.GetMemberType = function (member) {
	var fieldInfo = JSIL.TryCast(member, System.Reflection.FieldInfo);
	if (fieldInfo !== null) {
		return fieldInfo.FieldType;
	}
	var propertyInfo = JSIL.TryCast(member, System.Reflection.PropertyInfo);
	if (propertyInfo !== null) {
		return propertyInfo.PropertyType;
	}
	throw $asm08.System.Core.Error.MemberNotFieldOrProperty(member);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.ValidateLift = function (variables, arguments) {
	if (variables.ICollection$b1_Count !== arguments.ICollection$b1_Count) {
		throw $asm08.System.Core.Error.IncorrectNumberOfIndexes();
	}
	var i = 0;
	var count = variables.ICollection$b1_Count;
__loop0__: 
	while (i < count) {
		if (!$asm08.System.Dynamic.Utils.TypeUtils.AreReferenceAssignable(
				variables.IList$b1_get_Item(i).Type, 
				$asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(arguments.IList$b1_get_Item(i).Type)
			)) {
			throw $asm08.System.Core.Error.ArgumentTypesMustMatch();
		}
		++i;
	}
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitLift = function (nodeType, resultType, mc, paramList, argList) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				switch (Number(nodeType)) {
					case 13: 
						__label0__ = "IL_2F6";
						continue __step0__;
					case 14: 
					case 15: 
					case 16: 
					case 17: 
					case 18: 
					case 19: 
					case 20: 
					case 21: 
						break;
					default: 
						if (nodeType === System.Linq.Expressions.ExpressionType.NotEqual) {
							__label0__ = "IL_2F6";
							continue __step0__;
						}
						break;
				}
				__label0__ = "IL_3A";
				continue __step0__;
				break;
			case "IL_3A":
				var label = this._ilg.DefineLabel().MemberwiseClone();
				var label2 = this._ilg.DefineLabel().MemberwiseClone();
				var local = this._ilg.DeclareLocal(System.Boolean);
				var i = 0;
				var num = paramList.length;
			__loop0__: 
				while (i < num) {
					var variable = paramList[i];
					var expression = argList[i];
					if ($asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(expression.Type)) {
						this._scope.AddLocal(this, variable);
						this.EmitAddress$0(expression, expression.Type);
						this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Dup.MemberwiseClone());
						$asm08.System.Linq.Expressions.Compiler.ILGen.EmitHasValue(this._ilg, expression.Type);
						this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_0.MemberwiseClone());
						this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ceq.MemberwiseClone());
						this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), local);
						$asm08.System.Linq.Expressions.Compiler.ILGen.EmitGetValueOrDefault(this._ilg, expression.Type);
						this._scope.EmitSet(variable);
					} else {
						this._scope.AddLocal(this, variable);
						this.EmitExpression$0(expression);
						if (!expression.Type.IsValueType) {
							this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Dup.MemberwiseClone());
							this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ldnull.MemberwiseClone());
							this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ceq.MemberwiseClone());
							this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), local);
						}
						this._scope.EmitSet(variable);
					}
					this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone(), local);
					this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Brtrue.MemberwiseClone(), label2.MemberwiseClone());
					++i;
				}
				this.EmitMethodCallExpression$1(mc);
				if (!(!$asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(resultType) || $asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(resultType, mc.Type))) {
					var constructor = resultType.GetConstructor$2(JSIL.Array.New(System.Type, [mc.Type]));
					this._ilg.Emit$5(System.Reflection.Emit.OpCodes.Newobj.MemberwiseClone(), constructor);
				}
				this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Br_S.MemberwiseClone(), label.MemberwiseClone());
				this._ilg.MarkLabel(label2.MemberwiseClone());
				if (!$asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(resultType, $asm08.System.Dynamic.Utils.TypeUtils.GetNullableType(mc.Type))) {
					switch (Number(nodeType)) {
						case 15: 
						case 16: 
						case 20: 
						case 21: 
							this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_0.MemberwiseClone());
							__label0__ = "IL_2E9";
							continue __step0__;
					}
					throw $asm08.System.Core.Error.UnknownLiftType(nodeType);
				}
				if (resultType.IsValueType) {
					var local2 = this.GetLocal(resultType);
					this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local2);
					this._ilg.Emit$6(System.Reflection.Emit.OpCodes.Initobj.MemberwiseClone(), resultType);
					this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone(), local2);
					this.FreeLocal(local2);
					__label0__ = "IL_2E9";
					continue __step0__;
				}
				this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ldnull.MemberwiseClone());
				__label0__ = "IL_2E9";
				continue __step0__;
				__label0__ = "IL_2F6";
				continue __step0__;
				break;
			case "IL_2F6":
				if (!$asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(resultType, $asm08.System.Dynamic.Utils.TypeUtils.GetNullableType(mc.Type))) {
					var label3 = this._ilg.DefineLabel().MemberwiseClone();
					var label4 = this._ilg.DefineLabel().MemberwiseClone();
					var label5 = this._ilg.DefineLabel().MemberwiseClone();
					var local3 = this._ilg.DeclareLocal(System.Boolean);
					var local4 = this._ilg.DeclareLocal(System.Boolean);
					this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_0.MemberwiseClone());
					this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), local3);
					this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_1.MemberwiseClone());
					this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), local4);
					var j = 0;
					var num2 = paramList.length;
				__loop1__: 
					while (j < num2) {
						var variable2 = paramList[j];
						var expression2 = argList[j];
						this._scope.AddLocal(this, variable2);
						if ($asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(expression2.Type)) {
							this.EmitAddress$0(expression2, expression2.Type);
							this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Dup.MemberwiseClone());
							$asm08.System.Linq.Expressions.Compiler.ILGen.EmitHasValue(this._ilg, expression2.Type);
							this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_0.MemberwiseClone());
							this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ceq.MemberwiseClone());
							this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Dup.MemberwiseClone());
							this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone(), local3);
							this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Or.MemberwiseClone());
							this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), local3);
							this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone(), local4);
							this._ilg.Emit$0(System.Reflection.Emit.OpCodes.And.MemberwiseClone());
							this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), local4);
							$asm08.System.Linq.Expressions.Compiler.ILGen.EmitGetValueOrDefault(this._ilg, expression2.Type);
						} else {
							this.EmitExpression$0(expression2);
							if (!expression2.Type.IsValueType) {
								this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Dup.MemberwiseClone());
								this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ldnull.MemberwiseClone());
								this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ceq.MemberwiseClone());
								this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Dup.MemberwiseClone());
								this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone(), local3);
								this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Or.MemberwiseClone());
								this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), local3);
								this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone(), local4);
								this._ilg.Emit$0(System.Reflection.Emit.OpCodes.And.MemberwiseClone());
								this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), local4);
							} else {
								this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_0.MemberwiseClone());
								this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), local4);
							}
						}
						this._scope.EmitSet(variable2);
						++j;
					}
					this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone(), local4);
					this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Brtrue.MemberwiseClone(), label4.MemberwiseClone());
					this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone(), local3);
					this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Brtrue.MemberwiseClone(), label5.MemberwiseClone());
					this.EmitMethodCallExpression$1(mc);
					if (!(!$asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(resultType) || $asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(resultType, mc.Type))) {
						var constructor2 = resultType.GetConstructor$2(JSIL.Array.New(System.Type, [mc.Type]));
						this._ilg.Emit$5(System.Reflection.Emit.OpCodes.Newobj.MemberwiseClone(), constructor2);
					}
					this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Br_S.MemberwiseClone(), label3.MemberwiseClone());
					this._ilg.MarkLabel(label4.MemberwiseClone());
					$asm08.System.Linq.Expressions.Compiler.ILGen.EmitBoolean(this._ilg, (nodeType === System.Linq.Expressions.ExpressionType.Equal));
					this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Br_S.MemberwiseClone(), label3.MemberwiseClone());
					this._ilg.MarkLabel(label5.MemberwiseClone());
					$asm08.System.Linq.Expressions.Compiler.ILGen.EmitBoolean(this._ilg, (nodeType === System.Linq.Expressions.ExpressionType.NotEqual));
					this._ilg.MarkLabel(label3.MemberwiseClone());
					return;
				}
				__label0__ = "IL_3A";
				continue __step0__;
				__label0__ = "IL_2E9";
				continue __step0__;
				break;
			case "IL_2E9":
				this._ilg.MarkLabel(label.MemberwiseClone());
				break __step0__;
		}
	}
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitExpression$1 = function (node, flags) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				var flag = ((flags & ($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitExpressionStart | $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitExpressionStartMask | $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitNoExpressionStart)) === $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitExpressionStart);
				var flags2 = flag ? this.EmitExpressionStart(node) : $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitNoExpressionStart;
				flags = (flags & ($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsMiddle | $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsNoTail | $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsTail | $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsTailCallMask));
				switch (Number(node.NodeType)) {
					case 0: 
						this.EmitBinaryExpression$1(node, flags);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 1: 
						this.EmitBinaryExpression$1(node, flags);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 2: 
						this.EmitBinaryExpression$1(node, flags);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 3: 
						this.EmitAndAlsoBinaryExpression(node, flags);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 4: 
						this.EmitUnaryExpression(node, flags);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 5: 
						this.EmitBinaryExpression$1(node, flags);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 6: 
						this.EmitMethodCallExpression$0(node, flags);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 7: 
						this.EmitCoalesceBinaryExpression(node);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 8: 
						this.EmitConditionalExpression(node, flags);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 9: 
						this.EmitConstantExpression(node);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 10: 
						this.EmitConvertUnaryExpression(node, flags);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 11: 
						this.EmitConvertUnaryExpression(node, flags);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 12: 
						this.EmitBinaryExpression$1(node, flags);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 13: 
						this.EmitBinaryExpression$1(node, flags);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 14: 
						this.EmitBinaryExpression$1(node, flags);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 15: 
						this.EmitBinaryExpression$1(node, flags);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 16: 
						this.EmitBinaryExpression$1(node, flags);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 17: 
						this.EmitInvocationExpression(node, flags);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 18: 
						this.EmitLambdaExpression(node);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 19: 
						this.EmitBinaryExpression$1(node, flags);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 20: 
						this.EmitBinaryExpression$1(node, flags);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 21: 
						this.EmitBinaryExpression$1(node, flags);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 22: 
						this.EmitListInitExpression(node);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 23: 
						this.EmitMemberExpression(node);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 24: 
						this.EmitMemberInitExpression(node);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 25: 
						this.EmitBinaryExpression$1(node, flags);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 26: 
						this.EmitBinaryExpression$1(node, flags);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 27: 
						this.EmitBinaryExpression$1(node, flags);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 28: 
						this.EmitUnaryExpression(node, flags);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 29: 
						this.EmitUnaryExpression(node, flags);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 30: 
						this.EmitUnaryExpression(node, flags);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 31: 
						this.EmitNewExpression(node);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 32: 
						this.EmitNewArrayExpression(node);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 33: 
						this.EmitNewArrayExpression(node);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 34: 
						this.EmitUnaryExpression(node, flags);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 35: 
						this.EmitBinaryExpression$1(node, flags);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 36: 
						this.EmitBinaryExpression$1(node, flags);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 37: 
						this.EmitOrElseBinaryExpression(node, flags);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 38: 
						this.EmitParameterExpression(node);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 39: 
						this.EmitBinaryExpression$1(node, flags);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 40: 
						this.EmitQuoteUnaryExpression(node);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 41: 
						this.EmitBinaryExpression$1(node, flags);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 42: 
						this.EmitBinaryExpression$1(node, flags);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 43: 
						this.EmitBinaryExpression$1(node, flags);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 44: 
						this.EmitUnaryExpression(node, flags);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 45: 
						this.EmitTypeBinaryExpression(node);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 46: 
						this.EmitAssignBinaryExpression(node);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 47: 
						this.EmitBlockExpression(node, flags);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 48: 
						this.EmitDebugInfoExpression(node);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 49: 
						this.EmitUnaryExpression(node, flags);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 50: 
						this.EmitDynamicExpression(node);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 51: 
						this.EmitDefaultExpression(node);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 52: 
						$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.EmitExtensionExpression(node);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 53: 
						this.EmitGotoExpression(node, flags);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 54: 
						this.EmitUnaryExpression(node, flags);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 55: 
						this.EmitIndexExpression(node);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 56: 
						this.EmitLabelExpression(node, flags);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 57: 
						this.EmitRuntimeVariablesExpression(node);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 58: 
						this.EmitLoopExpression(node);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 59: 
						this.EmitSwitchExpression(node, flags);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 60: 
						this.EmitThrowUnaryExpression(node);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 61: 
						this.EmitTryExpression(node);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 62: 
						this.EmitUnboxUnaryExpression(node);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 81: 
						this.EmitTypeBinaryExpression(node);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 82: 
						this.EmitUnaryExpression(node, flags);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 83: 
						this.EmitUnaryExpression(node, flags);
						__label0__ = "IL_4B2";
						continue __step0__;
					case 84: 
						this.EmitUnaryExpression(node, flags);
						__label0__ = "IL_4B2";
						continue __step0__;
				}
				throw $asm08.System.Dynamic.Utils.ContractUtils.Unreachable;
				__label0__ = "IL_4B2";
				continue __step0__;
				break;
			case "IL_4B2":
				if (flag) {
					this.EmitExpressionEnd(flags2);
				}
				break __step0__;
		}
	}
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.IsChecked = function (op) {
	if (op <= System.Linq.Expressions.ExpressionType.MultiplyChecked) {
		if (!((op === System.Linq.Expressions.ExpressionType.AddChecked) || 
				(op === System.Linq.Expressions.ExpressionType.ConvertChecked) || (op === System.Linq.Expressions.ExpressionType.MultiplyChecked))) {
			return false;
		}
	} else if (!((op === System.Linq.Expressions.ExpressionType.NegateChecked) || (op === System.Linq.Expressions.ExpressionType.SubtractChecked))) {
		switch (Number(op)) {
			case 74: 
			case 75: 
			case 76: 
				break;
			default: 
				return false;
		}
	}
	return true;
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitConstantArray$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, array) {
		if (JSIL.TryCast(this._method, System.Reflection.Emit.DynamicMethod) !== null) {
			this.EmitConstant(array, System.Array.Of(T));
			return;
		}
		if (this._typeBuilder !== null) {
			var field = this.CreateStaticField("ConstantArray", System.Array.Of(T));
			var label = this._ilg.DefineLabel().MemberwiseClone();
			this._ilg.Emit$12(System.Reflection.Emit.OpCodes.Ldsfld.MemberwiseClone(), field);
			this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ldnull.MemberwiseClone());
			this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Bne_Un.MemberwiseClone(), label.MemberwiseClone());
			$asm08.System.Linq.Expressions.Compiler.ILGen.EmitArray$b1(T)(this._ilg, JSIL.Cast(array, System.Collections.Generic.IList$b1.Of(T)));
			this._ilg.Emit$12(System.Reflection.Emit.OpCodes.Stsfld.MemberwiseClone(), field);
			this._ilg.MarkLabel(label.MemberwiseClone());
			this._ilg.Emit$12(System.Reflection.Emit.OpCodes.Ldsfld.MemberwiseClone(), field);
			return;
		}
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitArray$b1(T)(this._ilg, JSIL.Cast(array, System.Collections.Generic.IList$b1.Of(T)));
	}
);
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitClosureCreation = function (inner) {
	var needsClosure = inner._scope.NeedsClosure;
	var flag = (inner._boundConstants.Count > 0);
	if (!(needsClosure || flag)) {
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitNull(this._ilg);
		return;
	}
	if (flag) {
		this._boundConstants.EmitConstant(this, inner._boundConstants.ToArray(), System.Array.Of(System.Object));
	} else {
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitNull(this._ilg);
	}
	if (needsClosure) {
		this._scope.EmitGet(this._scope.NearestHoistedLocals.SelfVariable);
	} else {
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitNull(this._ilg);
	}
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitNew$0(this._ilg, System.Runtime.CompilerServices.Closure.GetConstructor$2(JSIL.Array.New(System.Type, [System.Array.Of(System.Object), System.Array.Of(System.Object)])));
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitDelegateConstruction$0 = function (inner) {
	var type = inner._lambda.Type;
	var dynamicMethod = JSIL.TryCast(inner._method, System.Reflection.Emit.DynamicMethod);
	if (dynamicMethod !== null) {
		this._boundConstants.EmitConstant(this, dynamicMethod, System.Reflection.Emit.DynamicMethod);
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitType(this._ilg, type);
		this.EmitClosureCreation(inner);
		this._ilg.Emit$4(System.Reflection.Emit.OpCodes.Callvirt.MemberwiseClone(), System.Reflection.Emit.DynamicMethod.GetMethod$3("CreateDelegate", JSIL.Array.New(System.Type, [System.Type, System.Object])));
		this._ilg.Emit$6(System.Reflection.Emit.OpCodes.Castclass.MemberwiseClone(), type);
		return;
	}
	this.EmitClosureCreation(inner);
	this._ilg.Emit$4(System.Reflection.Emit.OpCodes.Ldftn.MemberwiseClone(), inner._method);
	this._ilg.Emit$5(System.Reflection.Emit.OpCodes.Newobj.MemberwiseClone(), JSIL.Cast(type.GetMember$0(".ctor")[0], System.Reflection.ConstructorInfo));
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitDelegateConstruction$1 = function (lambda) {
	if (JSIL.TryCast(this._method, System.Reflection.Emit.DynamicMethod) !== null) {
		var lambdaCompiler = JSIL.New($asm08.System.Linq.Expressions.Compiler.LambdaCompiler, "_ctor$0", [this._tree, lambda]);
	} else {
		var name = System.String.IsNullOrEmpty(lambda.Name) ? $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.GetUniqueMethodName() : lambda.Name;
		var method = this._typeBuilder.DefineMethod$1(name, (System.Reflection.MethodAttributes.Private | System.Reflection.MethodAttributes.Static));
		lambdaCompiler = JSIL.New($asm08.System.Linq.Expressions.Compiler.LambdaCompiler, "_ctor$1", [this._tree, lambda, method]);
	}
	lambdaCompiler.EmitLambdaBody$1(this._scope, false, $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsNoTail);
	this.EmitDelegateConstruction$0(lambdaCompiler);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.GetParameterTypes = function (lambda) {
	return $asm08.System.Dynamic.Utils.CollectionExtensions.Map$b2(System.Linq.Expressions.ParameterExpression, System.Type)(JSIL.Cast(lambda.Parameters, System.Collections.Generic.ICollection$b1.Of(System.Linq.Expressions.ParameterExpression)), function (p) {
			if (!p.IsByRef) {
				return p.Type;
			}
			return p.Type.MakeByRefType();
		});
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.GetUniqueMethodName = function () {
	return JSIL.ConcatString("<ExpressionCompilerImplementationDetails>{", System.Threading.Interlocked.Increment$0(/* ref */ new JSIL.MemberReference($asm08.System.Linq.Expressions.Compiler.LambdaCompiler, "_Counter")), "}lambda_method");
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitLambdaBody$0 = function () {
	var flags = this._lambda.TailCall ? $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsTail : $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsNoTail;
	this.EmitLambdaBody$1(null, false, flags);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitLambdaBody$1 = function (parent, inlined, flags) {
	this._scope.Enter(this, parent);
	if (inlined) {
	__loop0__: 
		for (var i = (this._lambda.Parameters.Count - 1); i >= 0; --i) {
			this._scope.EmitSet(this._lambda.Parameters.get_Item(i));
		}
	}
	flags = $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.UpdateEmitExpressionStartFlag(flags, $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitExpressionStart);
	if (this._lambda.ReturnType === System.Void) {
		this.EmitExpressionAsVoid$1(this._lambda.Body, flags);
	} else {
		this.EmitExpression$1(this._lambda.Body, flags);
	}
	if (!inlined) {
		this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ret.MemberwiseClone());
	}
	this._scope.Exit();
	var enumerator = JSIL.Cast(this._labelInfo.Values, System.Collections.Generic.Dictionary$b2.ValueCollection.Of(System.Linq.Expressions.LabelTarget, $asm08.System.Linq.Expressions.Compiler.LabelInfo)).GetEnumerator().MemberwiseClone();
	try {
	__loop1__: 
		while (enumerator.MoveNext()) {
			var current = enumerator.Current;
			current.ValidateFinish();
		}
	} finally {
		enumerator.IDisposable_Dispose();
	}
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitConditionalExpression = function (expr, flags) {
	var conditionalExpression = JSIL.Cast(expr, System.Linq.Expressions.ConditionalExpression);
	var label = this._ilg.DefineLabel().MemberwiseClone();
	this.EmitExpressionAndBranch(false, conditionalExpression.Test, label.MemberwiseClone());
	this.EmitExpressionAsType(conditionalExpression.IfTrue, conditionalExpression.Type, flags);
	if ($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.NotEmpty(conditionalExpression.IfFalse)) {
		var label2 = this._ilg.DefineLabel().MemberwiseClone();
		if ((flags & ($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsMiddle | $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsNoTail | $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsTail | $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsTailCallMask)) === $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsTail) {
			this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ret.MemberwiseClone());
		} else {
			this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Br.MemberwiseClone(), label2.MemberwiseClone());
		}
		this._ilg.MarkLabel(label.MemberwiseClone());
		this.EmitExpressionAsType(conditionalExpression.IfFalse, conditionalExpression.Type, flags);
		this._ilg.MarkLabel(label2.MemberwiseClone());
		return;
	}
	this._ilg.MarkLabel(label.MemberwiseClone());
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.NotEmpty = function (node) {
	var defaultExpression = JSIL.TryCast(node, System.Linq.Expressions.DefaultExpression);
	return !((defaultExpression !== null) && (defaultExpression.Type === System.Void));
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.Significant = function (node) {
	var blockExpression = JSIL.TryCast(node, System.Linq.Expressions.BlockExpression);
	if (blockExpression !== null) {
	__loop0__: 
		for (var i = 0; i < blockExpression.ExpressionCount; ++i) {
			if ($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.Significant(blockExpression.GetExpression(i))) {
				return true;
			}
		}
		return false;
	}
	return ($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.NotEmpty(node) && !JSIL.CheckType(node, System.Linq.Expressions.DebugInfoExpression));
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitCoalesceBinaryExpression = function (expr) {
	var binaryExpression = JSIL.Cast(expr, System.Linq.Expressions.BinaryExpression);
	if ($asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(binaryExpression.Left.Type)) {
		this.EmitNullableCoalesce(binaryExpression);
		return;
	}
	if (binaryExpression.Left.Type.IsValueType) {
		throw $asm08.System.Core.Error.CoalesceUsedOnNonNullType();
	}
	if (binaryExpression.Conversion !== null) {
		this.EmitLambdaReferenceCoalesce(binaryExpression);
		return;
	}
	this.EmitReferenceCoalesceWithoutConversion(binaryExpression);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitNullableCoalesce = function (b) {
	var local = this.GetLocal(b.Left.Type);
	var label = this._ilg.DefineLabel().MemberwiseClone();
	var label2 = this._ilg.DefineLabel().MemberwiseClone();
	this.EmitExpression$0(b.Left);
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), local);
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local);
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitHasValue(this._ilg, b.Left.Type);
	this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Brfalse.MemberwiseClone(), label.MemberwiseClone());
	var nonNullableType = $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(b.Left.Type);
	if (b.Conversion !== null) {
		var parameterExpression = b.Conversion.Parameters.get_Item(0);
		this.EmitLambdaExpression(b.Conversion);
		if (!parameterExpression.Type.IsAssignableFrom(b.Left.Type)) {
			this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local);
			$asm08.System.Linq.Expressions.Compiler.ILGen.EmitGetValueOrDefault(this._ilg, b.Left.Type);
		} else {
			this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone(), local);
		}
		this._ilg.Emit$4(System.Reflection.Emit.OpCodes.Callvirt.MemberwiseClone(), b.Conversion.Type.GetMethod$5("Invoke"));
	} else if (!$asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(b.Type, nonNullableType)) {
		this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local);
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitGetValueOrDefault(this._ilg, b.Left.Type);
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitConvertToType(this._ilg, nonNullableType, b.Type, true);
	} else {
		this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local);
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitGetValueOrDefault(this._ilg, b.Left.Type);
	}
	this.FreeLocal(local);
	this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Br.MemberwiseClone(), label2.MemberwiseClone());
	this._ilg.MarkLabel(label.MemberwiseClone());
	this.EmitExpression$0(b.Right);
	if (!$asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(b.Right.Type, b.Type)) {
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitConvertToType(this._ilg, b.Right.Type, b.Type, true);
	}
	this._ilg.MarkLabel(label2.MemberwiseClone());
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitLambdaReferenceCoalesce = function (b) {
	var local = this.GetLocal(b.Left.Type);
	var label = this._ilg.DefineLabel().MemberwiseClone();
	var label2 = this._ilg.DefineLabel().MemberwiseClone();
	this.EmitExpression$0(b.Left);
	this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Dup.MemberwiseClone());
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), local);
	this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ldnull.MemberwiseClone());
	this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ceq.MemberwiseClone());
	this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Brfalse.MemberwiseClone(), label2.MemberwiseClone());
	this.EmitExpression$0(b.Right);
	this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Br.MemberwiseClone(), label.MemberwiseClone());
	this._ilg.MarkLabel(label2.MemberwiseClone());
	var arg_C2_0 = b.Conversion.Parameters.get_Item(0);
	this.EmitLambdaExpression(b.Conversion);
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone(), local);
	this.FreeLocal(local);
	this._ilg.Emit$4(System.Reflection.Emit.OpCodes.Callvirt.MemberwiseClone(), b.Conversion.Type.GetMethod$5("Invoke"));
	this._ilg.MarkLabel(label.MemberwiseClone());
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitReferenceCoalesceWithoutConversion = function (b) {
	var label = this._ilg.DefineLabel().MemberwiseClone();
	var label2 = this._ilg.DefineLabel().MemberwiseClone();
	this.EmitExpression$0(b.Left);
	this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Dup.MemberwiseClone());
	this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ldnull.MemberwiseClone());
	this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ceq.MemberwiseClone());
	this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Brfalse.MemberwiseClone(), label2.MemberwiseClone());
	this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Pop.MemberwiseClone());
	this.EmitExpression$0(b.Right);
	if (!$asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(b.Right.Type, b.Type)) {
		if (b.Right.Type.IsValueType) {
			this._ilg.Emit$6(System.Reflection.Emit.OpCodes.Box.MemberwiseClone(), b.Right.Type);
		}
		this._ilg.Emit$6(System.Reflection.Emit.OpCodes.Castclass.MemberwiseClone(), b.Type);
	}
	this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Br_S.MemberwiseClone(), label.MemberwiseClone());
	this._ilg.MarkLabel(label2.MemberwiseClone());
	if (!$asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(b.Left.Type, b.Type)) {
		this._ilg.Emit$6(System.Reflection.Emit.OpCodes.Castclass.MemberwiseClone(), b.Type);
	}
	this._ilg.MarkLabel(label.MemberwiseClone());
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitLiftedAndAlso = function (b) {
	var typeFromHandle = System.Nullable$b1.Of(System.Boolean);
	var label = this._ilg.DefineLabel().MemberwiseClone();
	var label2 = this._ilg.DefineLabel().MemberwiseClone();
	var label3 = this._ilg.DefineLabel().MemberwiseClone();
	var label4 = this._ilg.DefineLabel().MemberwiseClone();
	var label5 = this._ilg.DefineLabel().MemberwiseClone();
	var local = this.GetLocal(typeFromHandle);
	var local2 = this.GetLocal(typeFromHandle);
	this.EmitExpression$0(b.Left);
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), local);
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local);
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitHasValue(this._ilg, typeFromHandle);
	this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Brfalse.MemberwiseClone(), label.MemberwiseClone());
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local);
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitGetValueOrDefault(this._ilg, typeFromHandle);
	this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_0.MemberwiseClone());
	this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ceq.MemberwiseClone());
	this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Brtrue.MemberwiseClone(), label2.MemberwiseClone());
	this._ilg.MarkLabel(label.MemberwiseClone());
	this.EmitExpression$0(b.Right);
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), local2);
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local2);
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitHasValue(this._ilg, typeFromHandle);
	this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Brfalse_S.MemberwiseClone(), label3.MemberwiseClone());
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local2);
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitGetValueOrDefault(this._ilg, typeFromHandle);
	this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_0.MemberwiseClone());
	this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ceq.MemberwiseClone());
	this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Brtrue_S.MemberwiseClone(), label2.MemberwiseClone());
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local);
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitHasValue(this._ilg, typeFromHandle);
	this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Brfalse.MemberwiseClone(), label3.MemberwiseClone());
	this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_1.MemberwiseClone());
	this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Br_S.MemberwiseClone(), label4.MemberwiseClone());
	this._ilg.MarkLabel(label2.MemberwiseClone());
	this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_0.MemberwiseClone());
	this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Br_S.MemberwiseClone(), label4.MemberwiseClone());
	this._ilg.MarkLabel(label4.MemberwiseClone());
	var constructor = typeFromHandle.GetConstructor$2(JSIL.Array.New(System.Type, [System.Boolean]));
	this._ilg.Emit$5(System.Reflection.Emit.OpCodes.Newobj.MemberwiseClone(), constructor);
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), local);
	this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Br.MemberwiseClone(), label5.MemberwiseClone());
	this._ilg.MarkLabel(label3.MemberwiseClone());
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local);
	this._ilg.Emit$6(System.Reflection.Emit.OpCodes.Initobj.MemberwiseClone(), typeFromHandle);
	this._ilg.MarkLabel(label5.MemberwiseClone());
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone(), local);
	this.FreeLocal(local);
	this.FreeLocal(local2);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitMethodAndAlso = function (b, flags) {
	var label = this._ilg.DefineLabel().MemberwiseClone();
	this.EmitExpression$0(b.Left);
	this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Dup.MemberwiseClone());
	var booleanOperator = $asm08.System.Dynamic.Utils.TypeUtils.GetBooleanOperator(b.Method.DeclaringType, "op_False");
	this._ilg.Emit$4(System.Reflection.Emit.OpCodes.Call.MemberwiseClone(), booleanOperator);
	this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Brtrue.MemberwiseClone(), label.MemberwiseClone());
	var local = this.GetLocal(b.Left.Type);
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), local);
	this.EmitExpression$0(b.Right);
	var local2 = this.GetLocal(b.Right.Type);
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), local2);
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone(), local);
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone(), local2);
	if ((flags & ($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsMiddle | $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsNoTail | $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsTail | $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsTailCallMask)) === $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsTail) {
		this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Tailcall.MemberwiseClone());
	}
	this._ilg.Emit$4(System.Reflection.Emit.OpCodes.Call.MemberwiseClone(), b.Method);
	this.FreeLocal(local);
	this.FreeLocal(local2);
	this._ilg.MarkLabel(label.MemberwiseClone());
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitUnliftedAndAlso = function (b) {
	var label = this._ilg.DefineLabel().MemberwiseClone();
	var label2 = this._ilg.DefineLabel().MemberwiseClone();
	this.EmitExpressionAndBranch(false, b.Left, label.MemberwiseClone());
	this.EmitExpression$0(b.Right);
	this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Br.MemberwiseClone(), label2.MemberwiseClone());
	this._ilg.MarkLabel(label.MemberwiseClone());
	this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_0.MemberwiseClone());
	this._ilg.MarkLabel(label2.MemberwiseClone());
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitAndAlsoBinaryExpression = function (expr, flags) {
	var binaryExpression = JSIL.Cast(expr, System.Linq.Expressions.BinaryExpression);
	if (!((binaryExpression.Method === null) || binaryExpression.IsLiftedLogical)) {
		this.EmitMethodAndAlso(binaryExpression, flags);
		return;
	}
	if (binaryExpression.Left.Type === System.Nullable$b1.Of(System.Boolean)) {
		this.EmitLiftedAndAlso(binaryExpression);
		return;
	}
	if (binaryExpression.IsLiftedLogical) {
		this.EmitExpression$0(binaryExpression.ReduceUserdefinedLifted());
		return;
	}
	this.EmitUnliftedAndAlso(binaryExpression);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitLiftedOrElse = function (b) {
	var typeFromHandle = System.Nullable$b1.Of(System.Boolean);
	var label = this._ilg.DefineLabel().MemberwiseClone();
	var label2 = this._ilg.DefineLabel().MemberwiseClone();
	var label3 = this._ilg.DefineLabel().MemberwiseClone();
	var label4 = this._ilg.DefineLabel().MemberwiseClone();
	var label5 = this._ilg.DefineLabel().MemberwiseClone();
	var local = this.GetLocal(typeFromHandle);
	var local2 = this.GetLocal(typeFromHandle);
	this.EmitExpression$0(b.Left);
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), local);
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local);
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitHasValue(this._ilg, typeFromHandle);
	this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Brfalse.MemberwiseClone(), label.MemberwiseClone());
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local);
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitGetValueOrDefault(this._ilg, typeFromHandle);
	this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_0.MemberwiseClone());
	this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ceq.MemberwiseClone());
	this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Brfalse.MemberwiseClone(), label2.MemberwiseClone());
	this._ilg.MarkLabel(label.MemberwiseClone());
	this.EmitExpression$0(b.Right);
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), local2);
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local2);
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitHasValue(this._ilg, typeFromHandle);
	this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Brfalse_S.MemberwiseClone(), label3.MemberwiseClone());
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local2);
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitGetValueOrDefault(this._ilg, typeFromHandle);
	this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_0.MemberwiseClone());
	this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ceq.MemberwiseClone());
	this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Brfalse_S.MemberwiseClone(), label2.MemberwiseClone());
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local);
	$asm08.System.Linq.Expressions.Compiler.ILGen.EmitHasValue(this._ilg, typeFromHandle);
	this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Brfalse.MemberwiseClone(), label3.MemberwiseClone());
	this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_0.MemberwiseClone());
	this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Br_S.MemberwiseClone(), label4.MemberwiseClone());
	this._ilg.MarkLabel(label2.MemberwiseClone());
	this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_1.MemberwiseClone());
	this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Br_S.MemberwiseClone(), label4.MemberwiseClone());
	this._ilg.MarkLabel(label4.MemberwiseClone());
	var constructor = typeFromHandle.GetConstructor$2(JSIL.Array.New(System.Type, [System.Boolean]));
	this._ilg.Emit$5(System.Reflection.Emit.OpCodes.Newobj.MemberwiseClone(), constructor);
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), local);
	this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Br.MemberwiseClone(), label5.MemberwiseClone());
	this._ilg.MarkLabel(label3.MemberwiseClone());
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local);
	this._ilg.Emit$6(System.Reflection.Emit.OpCodes.Initobj.MemberwiseClone(), typeFromHandle);
	this._ilg.MarkLabel(label5.MemberwiseClone());
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone(), local);
	this.FreeLocal(local);
	this.FreeLocal(local2);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitUnliftedOrElse = function (b) {
	var label = this._ilg.DefineLabel().MemberwiseClone();
	var label2 = this._ilg.DefineLabel().MemberwiseClone();
	this.EmitExpressionAndBranch(false, b.Left, label.MemberwiseClone());
	this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_1.MemberwiseClone());
	this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Br.MemberwiseClone(), label2.MemberwiseClone());
	this._ilg.MarkLabel(label.MemberwiseClone());
	this.EmitExpression$0(b.Right);
	this._ilg.MarkLabel(label2.MemberwiseClone());
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitMethodOrElse = function (b, flags) {
	var label = this._ilg.DefineLabel().MemberwiseClone();
	this.EmitExpression$0(b.Left);
	this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Dup.MemberwiseClone());
	var booleanOperator = $asm08.System.Dynamic.Utils.TypeUtils.GetBooleanOperator(b.Method.DeclaringType, "op_True");
	this._ilg.Emit$4(System.Reflection.Emit.OpCodes.Call.MemberwiseClone(), booleanOperator);
	this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Brtrue.MemberwiseClone(), label.MemberwiseClone());
	var local = this.GetLocal(b.Left.Type);
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), local);
	this.EmitExpression$0(b.Right);
	var local2 = this.GetLocal(b.Right.Type);
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), local2);
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone(), local);
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone(), local2);
	if ((flags & ($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsMiddle | $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsNoTail | $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsTail | $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsTailCallMask)) === $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsTail) {
		this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Tailcall.MemberwiseClone());
	}
	this._ilg.Emit$4(System.Reflection.Emit.OpCodes.Call.MemberwiseClone(), b.Method);
	this.FreeLocal(local);
	this.FreeLocal(local2);
	this._ilg.MarkLabel(label.MemberwiseClone());
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitOrElseBinaryExpression = function (expr, flags) {
	var binaryExpression = JSIL.Cast(expr, System.Linq.Expressions.BinaryExpression);
	if (!((binaryExpression.Method === null) || binaryExpression.IsLiftedLogical)) {
		this.EmitMethodOrElse(binaryExpression, flags);
		return;
	}
	if (binaryExpression.Left.Type === System.Nullable$b1.Of(System.Boolean)) {
		this.EmitLiftedOrElse(binaryExpression);
		return;
	}
	if (binaryExpression.IsLiftedLogical) {
		this.EmitExpression$0(binaryExpression.ReduceUserdefinedLifted());
		return;
	}
	this.EmitUnliftedOrElse(binaryExpression);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitExpressionAndBranch = function (branchValue, node, label) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				var flags = this.EmitExpressionStart(node);
				try {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								if (node.Type === System.Boolean) {
									var __label2__ = "__entry2__";
								__step2__: 
									while (true) {
										switch (__label2__) {
											case "__entry2__":
												var nodeType = node.NodeType;
												if (nodeType <= System.Linq.Expressions.ExpressionType.Equal) {
													if (nodeType !== System.Linq.Expressions.ExpressionType.AndAlso) {
														if (nodeType !== System.Linq.Expressions.ExpressionType.Equal) {
															__label1__ = "IL_91";
															continue __step1__;
														}
														__label2__ = "IL_81";
														continue __step2__;
													}
												} else {
													switch (Number(nodeType)) {
														case 34: 
															this.EmitBranchNot(branchValue, JSIL.Cast(node, System.Linq.Expressions.UnaryExpression), label.MemberwiseClone());
															return;
														case 35: 
															__label2__ = "IL_81";
															continue __step2__;
														case 36: 
															__label1__ = "IL_91";
															continue __step1__;
														case 37: 
															break;
														default: 
															if (nodeType !== System.Linq.Expressions.ExpressionType.Block) {
																__label1__ = "IL_91";
																continue __step1__;
															}
															this.EmitBranchBlock(branchValue, JSIL.Cast(node, System.Linq.Expressions.BlockExpression), label.MemberwiseClone());
															return;
													}
												}
												this.EmitBranchLogical(branchValue, JSIL.Cast(node, System.Linq.Expressions.BinaryExpression), label.MemberwiseClone());
												return;
												__label2__ = "IL_81";
												continue __step2__;
												break;
											case "IL_81":
												this.EmitBranchComparison(branchValue, JSIL.Cast(node, System.Linq.Expressions.BinaryExpression), label.MemberwiseClone());
												return;
												break __step2__;
										}
									}
								}
								__label1__ = "IL_91";
								continue __step1__;
								break;
							case "IL_91":
								this.EmitExpression$1(node, ($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsNoTail | $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitNoExpressionStart));
								this.EmitBranchOp(branchValue, label.MemberwiseClone());
								break __step1__;
						}
					}
				} finally {
					this.EmitExpressionEnd(flags);
				}
				break __step0__;
		}
	}
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitBranchOp = function (branch, label) {
	this._ilg.Emit$10(branch ? System.Reflection.Emit.OpCodes.Brtrue : System.Reflection.Emit.OpCodes.Brfalse.MemberwiseClone(), label);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitBranchNot = function (branch, node, label) {
	if (node.Method !== null) {
		this.EmitExpression$1(node, ($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsNoTail | $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitNoExpressionStart));
		this.EmitBranchOp(branch, label.MemberwiseClone());
		return;
	}
	this.EmitExpressionAndBranch(!branch, node.Operand, label.MemberwiseClone());
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitBranchComparison = function (branch, node, label) {
	var flag = (branch === (node.NodeType === System.Linq.Expressions.ExpressionType.Equal));
	if (node.Method !== null) {
		this.EmitBinaryMethod(node, $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsNoTail);
		this.EmitBranchOp(branch, label.MemberwiseClone());
		return;
	}
	if ($asm08.System.Linq.Expressions.ConstantCheck.IsNull(node.Left)) {
		if ($asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(node.Right.Type)) {
			this.EmitAddress$0(node.Right, node.Right.Type);
			$asm08.System.Linq.Expressions.Compiler.ILGen.EmitHasValue(this._ilg, node.Right.Type);
		} else {
			this.EmitExpression$0($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.GetEqualityOperand(node.Right));
		}
		this.EmitBranchOp(!flag, label.MemberwiseClone());
		return;
	}
	if ($asm08.System.Linq.Expressions.ConstantCheck.IsNull(node.Right)) {
		if ($asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(node.Left.Type)) {
			this.EmitAddress$0(node.Left, node.Left.Type);
			$asm08.System.Linq.Expressions.Compiler.ILGen.EmitHasValue(this._ilg, node.Left.Type);
		} else {
			this.EmitExpression$0($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.GetEqualityOperand(node.Left));
		}
		this.EmitBranchOp(!flag, label.MemberwiseClone());
		return;
	}
	if (!(!$asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(node.Left.Type) && !$asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(node.Right.Type))) {
		this.EmitBinaryExpression$0(node);
		this.EmitBranchOp(branch, label.MemberwiseClone());
		return;
	}
	this.EmitExpression$0($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.GetEqualityOperand(node.Left));
	this.EmitExpression$0($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.GetEqualityOperand(node.Right));
	if (flag) {
		this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Beq.MemberwiseClone(), label.MemberwiseClone());
		return;
	}
	this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ceq.MemberwiseClone());
	this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Brfalse.MemberwiseClone(), label.MemberwiseClone());
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.GetEqualityOperand = function (expression) {
	if (expression.NodeType === System.Linq.Expressions.ExpressionType.Convert) {
		var unaryExpression = JSIL.Cast(expression, System.Linq.Expressions.UnaryExpression);
		if ($asm08.System.Dynamic.Utils.TypeUtils.AreReferenceAssignable(unaryExpression.Type, unaryExpression.Operand.Type)) {
			return unaryExpression.Operand;
		}
	}
	return expression;
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitBranchLogical = function (branch, node, label) {
	if (!((node.Method === null) && !node.IsLifted)) {
		this.EmitExpression$0(node);
		this.EmitBranchOp(branch, label.MemberwiseClone());
		return;
	}
	var flag = (node.NodeType === System.Linq.Expressions.ExpressionType.AndAlso);
	if (branch === flag) {
		this.EmitBranchAnd(branch, node, label.MemberwiseClone());
		return;
	}
	this.EmitBranchOr(branch, node, label.MemberwiseClone());
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitBranchAnd = function (branch, node, label) {
	var label2 = this._ilg.DefineLabel().MemberwiseClone();
	this.EmitExpressionAndBranch(!branch, node.Left, label2.MemberwiseClone());
	this.EmitExpressionAndBranch(branch, node.Right, label);
	this._ilg.MarkLabel(label2.MemberwiseClone());
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitBranchOr = function (branch, node, label) {
	this.EmitExpressionAndBranch(branch, node.Left, label.MemberwiseClone());
	this.EmitExpressionAndBranch(branch, node.Right, label.MemberwiseClone());
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitBranchBlock = function (branch, node, label) {
	this.EnterScope(node);
	var expressionCount = node.ExpressionCount;
__loop0__: 
	for (var i = 0; i < (expressionCount - 1); ++i) {
		this.EmitExpressionAsVoid$0(node.GetExpression(i));
	}
	this.EmitExpressionAndBranch(branch, node.GetExpression((expressionCount - 1)), label);
	this.ExitScope(node);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitBlockExpression = function (expr, flags) {
	this.Emit(JSIL.Cast(expr, System.Linq.Expressions.BlockExpression), $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.UpdateEmitAsTypeFlag(flags, $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsDefaultType));
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.Emit = function (node, flags) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				this.EnterScope(node);
				var compilationFlags = (flags & ($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsDefaultType | $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsTypeMask | $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsVoidType));
				var expressionCount = node.ExpressionCount;
				var compilationFlags2 = (flags & ($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsMiddle | $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsNoTail | $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsTail | $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsTailCallMask));
				var compilationFlags3 = (compilationFlags2 === $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsNoTail) ? $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsNoTail : $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsMiddle;
			__loop0__: 
				for (var i = 0; i < (expressionCount - 1); ) {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								var expression = node.GetExpression(i);
								var expression2 = node.GetExpression((i + 1));
								if (!this.EmitDebugSymbols) {
									__label1__ = "IL_78";
									continue __step1__;
								}
								var debugInfoExpression = JSIL.TryCast(expression, System.Linq.Expressions.DebugInfoExpression);
								if (!((debugInfoExpression !== null) && 
										debugInfoExpression.IsClear && JSIL.TryCast(expression2, System.Linq.Expressions.DebugInfoExpression))) {
									__label1__ = "IL_78";
									continue __step1__;
								}
								__label1__ = "IL_D1";
								continue __step1__;
								break;
							case "IL_D1":
								++i;
								continue __loop0__;
								__label1__ = "IL_78";
								continue __step1__;
								break;
							case "IL_78":
								var newValue = compilationFlags3;
								var gotoExpression = JSIL.TryCast(expression2, System.Linq.Expressions.GotoExpression);
								if (!((gotoExpression === null) || ((gotoExpression.Value !== null) && 
											$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.Significant(gotoExpression.Value)))) {
									var labelInfo = this.ReferenceLabel(gotoExpression.Target);
									if (labelInfo.CanReturn) {
										newValue = $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsTail;
									}
								}
								flags = $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.UpdateEmitAsTailCallFlag(flags, newValue);
								this.EmitExpressionAsVoid$1(expression, flags);
								__label1__ = "IL_D1";
								continue __step1__;
								break __step1__;
						}
					}
				}
				if (!((compilationFlags !== $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsVoidType) && (node.Type !== System.Void))) {
					this.EmitExpressionAsVoid$1(node.GetExpression((expressionCount - 1)), compilationFlags2);
				} else {
					this.EmitExpressionAsType(node.GetExpression((expressionCount - 1)), node.Type, compilationFlags2);
				}
				this.ExitScope(node);
				break __step0__;
		}
	}
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EnterScope = function (node) {
	if (!(!$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.HasVariables(node) || ((this._scope.MergedScopes !== null) && 
				this._scope.MergedScopes.Contains(node)))) {
		if (!this._tree.Scopes.TryGetValue(node, /* ref */ compilerScope)) {
			var compilerScope = new JSIL.Variable((new $asm08.System.Linq.Expressions.Compiler.CompilerScope(node, false)).__Initialize__({
						NeedsClosure: this._scope.NeedsClosure}
				));
		}
		this._scope = compilerScope.value.Enter(this, this._scope);
	}
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.HasVariables = function (node) {
	var blockExpression = JSIL.TryCast(node, System.Linq.Expressions.BlockExpression);
	if (blockExpression !== null) {
		return (blockExpression.Variables.Count > 0);
	}
	return (JSIL.Cast(node, System.Linq.Expressions.CatchBlock).Variable !== null);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.ExitScope = function (node) {
	if (this._scope.Node === node) {
		this._scope = this._scope.Exit();
	}
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitDefaultExpression = function (expr) {
	var defaultExpression = JSIL.Cast(expr, System.Linq.Expressions.DefaultExpression);
	if (defaultExpression.Type !== System.Void) {
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitDefault(this._ilg, defaultExpression.Type);
	}
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitLoopExpression = function (expr) {
	var loopExpression = JSIL.Cast(expr, System.Linq.Expressions.LoopExpression);
	this.PushLabelBlock($asm08.System.Linq.Expressions.Compiler.LabelScopeKind.Statement);
	var labelInfo = this.DefineLabel(loopExpression.BreakLabel);
	var labelInfo2 = this.DefineLabel(loopExpression.ContinueLabel);
	labelInfo2.MarkWithEmptyStack();
	this.EmitExpressionAsVoid$0(loopExpression.Body);
	this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Br.MemberwiseClone(), labelInfo2.Label.MemberwiseClone());
	this.PopLabelBlock($asm08.System.Linq.Expressions.Compiler.LabelScopeKind.Statement);
	labelInfo.MarkWithEmptyStack();
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitSwitchExpression = function (expr, flags) {
	var switchExpression = JSIL.Cast(expr, System.Linq.Expressions.SwitchExpression);
	if (this.TryEmitSwitchInstruction(switchExpression, flags)) {
		return;
	}
	if (this.TryEmitHashtableSwitch(switchExpression, flags)) {
		return;
	}
	var parameterExpression = System.Linq.Expressions.Expression.Parameter$1(switchExpression.SwitchValue.Type, "switchValue");
	var parameterExpression2 = System.Linq.Expressions.Expression.Parameter$1($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.GetTestValueType(switchExpression), "testValue");
	this._scope.AddLocal(this, parameterExpression);
	this._scope.AddLocal(this, parameterExpression2);
	this.EmitExpression$0(switchExpression.SwitchValue);
	this._scope.EmitSet(parameterExpression);
	var array = JSIL.Array.New(System.Reflection.Emit.Label, switchExpression.Cases.Count);
	var array2 = JSIL.Array.New(System.Boolean, switchExpression.Cases.Count);
	var i = 0;
	var count = switchExpression.Cases.Count;
__loop0__: 
	while (i < count) {
		this.DefineSwitchCaseLabel(switchExpression.Cases.get_Item(i), JSIL.UnmaterializedReference(), JSIL.UnmaterializedReference());
		var enumerator = switchExpression.Cases.get_Item(i).TestValues.GetEnumerator();
		try {
		__loop1__: 
			while (enumerator.IEnumerator_MoveNext()) {
				var current = enumerator.IEnumerator$b1_Current;
				this.EmitExpression$0(current);
				this._scope.EmitSet(parameterExpression2);
				this.EmitExpressionAndBranch(true, System.Linq.Expressions.Expression.Equal$1(parameterExpression, parameterExpression2, false, switchExpression.Comparison), array[i].MemberwiseClone());
			}
		} finally {
			if (enumerator !== null) {
				enumerator.IDisposable_Dispose();
			}
		}
		++i;
	}
	var label = this._ilg.DefineLabel().MemberwiseClone();
	var $default = (switchExpression.DefaultBody === null) ? label : this._ilg.DefineLabel().MemberwiseClone();
	this.EmitSwitchCases(
		switchExpression, 
		array, 
		array2, 
		$default.MemberwiseClone(), 
		label.MemberwiseClone(), 
		flags
	);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.GetTestValueType = function (node) {
	if (node.Comparison === null) {
		return (node.Cases.get_Item(0).TestValues).get_Item(0).Type;
	}
	var type = $asm08.System.Dynamic.Utils.TypeUtils.GetNonRefType($asm08.System.Dynamic.Utils.TypeExtensions.GetParametersCached(node.Comparison)[1].ParameterType);
	if (node.IsLifted) {
		type = $asm08.System.Dynamic.Utils.TypeUtils.GetNullableType(type);
	}
	return type;
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.FitsInBucket = function (buckets, key, count) {
	var num = System.Decimal.op_Increment(System.Decimal.op_Subtraction(key, buckets.get_Item(0).Key.MemberwiseClone()).MemberwiseClone()).MemberwiseClone();
	return (!System.Decimal.op_GreaterThan(num.MemberwiseClone(), 2147483647) && System.Decimal.op_GreaterThan(System.Decimal.op_Implicit$5(((buckets.Count + count) * 2)).MemberwiseClone(), num.MemberwiseClone()));
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.MergeBuckets = function (buckets) {
__loop0__: 
	while (buckets.Count > 1) {
		var list = buckets.get_Item((buckets.Count - 2));
		var list2 = buckets.get_Item((buckets.Count - 1));
		if (!$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.FitsInBucket(list, list2.get_Item((list2.Count - 1)).Key.MemberwiseClone(), list2.Count)) {
			return;
		}
		list.AddRange(list2);
		buckets.RemoveAt((buckets.Count - 1));
	}
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.AddToBuckets = function (buckets, key) {
	if (buckets.Count > 0) {
		var list = buckets.get_Item((buckets.Count - 1));
		if ($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.FitsInBucket(list, key.Key.MemberwiseClone(), 1)) {
			list.Add(key);
			$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.MergeBuckets(buckets);
			return;
		}
	}
	buckets.Add(new (System.Collections.Generic.List$b1.Of($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.SwitchLabel)) ().__Initialize__([key]));
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CanOptimizeSwitchType = function (valueType) {
	switch (Number(System.Type.GetTypeCode(valueType))) {
		case 4: 
		case 5: 
		case 6: 
		case 7: 
		case 8: 
		case 9: 
		case 10: 
		case 11: 
		case 12: 
			return true;
		default: 
			return false;
	}
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.TryEmitSwitchInstruction = function (node, flags) {
	if (node.Comparison !== null) {
		return false;
	}
	var type = node.SwitchValue.Type;
	if (!($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CanOptimizeSwitchType(type) && $asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(type, (node.Cases.get_Item(0).TestValues).get_Item(0).Type))) {
		return false;
	}
	if (!System.Linq.Enumerable.All$b1(System.Linq.Expressions.SwitchCase)(node.Cases, function (c) {
				return System.Linq.Enumerable.All$b1(System.Linq.Expressions.Expression)(c.TestValues, function (t) {
						return JSIL.CheckType(t, System.Linq.Expressions.ConstantExpression);
					});
			})) {
		return false;
	}
	var array = JSIL.Array.New(System.Reflection.Emit.Label, node.Cases.Count);
	var array2 = JSIL.Array.New(System.Boolean, node.Cases.Count);
	var set = JSIL.New($asm08.System.Linq.Expressions.Set$b1.Of(System.Decimal), "_ctor$0", []);
	var list = new (System.Collections.Generic.List$b1.Of($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.SwitchLabel)) ();
__loop0__: 
	for (var i = 0; i < node.Cases.Count; ++i) {
		this.DefineSwitchCaseLabel(node.Cases.get_Item(i), JSIL.UnmaterializedReference(), JSIL.UnmaterializedReference());
		var enumerator = node.Cases.get_Item(i).TestValues.GetEnumerator();
		try {
		__loop1__: 
			while (enumerator.IEnumerator_MoveNext()) {
				var constantExpression = JSIL.Cast(enumerator.IEnumerator$b1_Current, System.Linq.Expressions.ConstantExpression);
				var num = $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.ConvertSwitchValue(constantExpression.Value).MemberwiseClone();
				if (!set.Contains(num.MemberwiseClone())) {
					list.Add(new $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.SwitchLabel(num, constantExpression.Value, array[i]));
					set.Add(num.MemberwiseClone());
				}
			}
		} finally {
			if (enumerator !== null) {
				enumerator.IDisposable_Dispose();
			}
		}
	}
	list.Sort$3(function (x, y) {
			return System.Math.Sign$6(System.Decimal.op_Subtraction(x.Key.MemberwiseClone().MemberwiseClone(), y.Key.MemberwiseClone().MemberwiseClone()).MemberwiseClone().MemberwiseClone());
		});
	var list2 = new (System.Collections.Generic.List$b1.Of(System.Collections.Generic.List$b1.Of($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.SwitchLabel))) ();
	var enumerator2 = (list.GetEnumerator());
	try {
	__loop2__: 
		while (enumerator2.MoveNext()) {
			var current = enumerator2.Current;
			$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.AddToBuckets(list2, current);
		}
	} finally {
		enumerator2.IDisposable_Dispose();
	}
	var local = this.GetLocal(node.SwitchValue.Type);
	this.EmitExpression$0(node.SwitchValue);
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), local);
	var label = this._ilg.DefineLabel().MemberwiseClone();
	var $default = (node.DefaultBody === null) ? label : this._ilg.DefineLabel().MemberwiseClone();
	var info = new $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.SwitchInfo(node, local, $default);
	this.EmitSwitchBuckets(info, list2, 0, (list2.Count - 1));
	this.EmitSwitchCases(
		node, 
		array, 
		array2, 
		$default.MemberwiseClone(), 
		label.MemberwiseClone(), 
		flags
	);
	this.FreeLocal(local);
	return true;
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.ConvertSwitchValue = function (value) {
	if (JSIL.TryCast(value, System.Char) !== 0) {
		return System.Decimal.op_Implicit$5(String.fromCharCode(value));
	}
	return System.Convert.ToDecimal$1(value, System.Globalization.CultureInfo.InvariantCulture);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.DefineSwitchCaseLabel = function ($case, /* ref */ label, /* ref */ isGoto) {
	var gotoExpression = JSIL.TryCast($case.Body, System.Linq.Expressions.GotoExpression);
	if (!((gotoExpression === null) || gotoExpression.Value)) {
		var labelInfo = this.ReferenceLabel(gotoExpression.Target);
		if (labelInfo.CanBranch) {
			label.value = labelInfo.Label.MemberwiseClone();
			isGoto.value = true;
			return;
		}
	}
	label.value = this._ilg.DefineLabel().MemberwiseClone();
	isGoto.value = false;
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitSwitchCases = function (node, labels, isGoto, $default, end, flags) {
	this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Br.MemberwiseClone(), $default.MemberwiseClone());
	var i = 0;
	var count = node.Cases.Count;
__loop0__: 
	while (i < count) {
		if (!isGoto[i]) {
			this._ilg.MarkLabel(labels[i].MemberwiseClone());
			this.EmitExpressionAsType(node.Cases.get_Item(i).Body, node.Type, flags);
			if (!((node.DefaultBody === null) && (i >= (count - 1)))) {
				if ((flags & ($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsMiddle | $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsNoTail | $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsTail | $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsTailCallMask)) === $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsTail) {
					this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ret.MemberwiseClone());
				} else {
					this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Br.MemberwiseClone(), end.MemberwiseClone());
				}
			}
		}
		++i;
	}
	if (node.DefaultBody !== null) {
		this._ilg.MarkLabel($default.MemberwiseClone());
		this.EmitExpressionAsType(node.DefaultBody, node.Type, flags);
	}
	this._ilg.MarkLabel(end.MemberwiseClone());
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitSwitchBuckets = function (info, buckets, first, last) {
	if (first === last) {
		this.EmitSwitchBucket(info, buckets.get_Item(first));
		return;
	}
	var num = Math.floor(((first + last) + 1) / 2);
	if (first === (num - 1)) {
		this.EmitSwitchBucket(info, buckets.get_Item(first));
	} else {
		var label = this._ilg.DefineLabel().MemberwiseClone();
		this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone(), info.Value);
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitConstant$0(this._ilg, System.Linq.Enumerable.Last$b1$0($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.SwitchLabel)(buckets.get_Item((num - 1))).Constant);
		this._ilg.Emit$10(info.IsUnsigned ? System.Reflection.Emit.OpCodes.Bgt_Un : System.Reflection.Emit.OpCodes.Bgt.MemberwiseClone(), label.MemberwiseClone());
		this.EmitSwitchBuckets(info, buckets, first, (num - 1));
		this._ilg.MarkLabel(label.MemberwiseClone());
	}
	this.EmitSwitchBuckets(info, buckets, num, last);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitSwitchBucket = function (info, bucket) {
	if (bucket.Count === 1) {
		this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone(), info.Value);
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitConstant$0(this._ilg, bucket.get_Item(0).Constant);
		this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Beq.MemberwiseClone(), bucket.get_Item(0).Label.MemberwiseClone());
		return;
	}
	var label = new (System.Nullable$b1.Of(System.Reflection.Emit.Label)) ();
	if (info.Is64BitSwitch) {
		label._ctor(this._ilg.DefineLabel().MemberwiseClone());
		this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone(), info.Value);
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitConstant$0(this._ilg, System.Linq.Enumerable.Last$b1$0($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.SwitchLabel)(bucket).Constant);
		this._ilg.Emit$10(info.IsUnsigned ? System.Reflection.Emit.OpCodes.Bgt_Un : System.Reflection.Emit.OpCodes.Bgt.MemberwiseClone(), label.Value.MemberwiseClone());
		this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone(), info.Value);
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitConstant$0(this._ilg, bucket.get_Item(0).Constant);
		this._ilg.Emit$10(info.IsUnsigned ? System.Reflection.Emit.OpCodes.Blt_Un : System.Reflection.Emit.OpCodes.Blt.MemberwiseClone(), label.Value.MemberwiseClone());
	}
	this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone(), info.Value);
	var num = bucket.get_Item(0).Key.MemberwiseClone();
	if (System.Decimal.op_Inequality(num.MemberwiseClone(), 0)) {
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitConstant$0(this._ilg, bucket.get_Item(0).Constant);
		this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Sub.MemberwiseClone());
	}
	if (info.Is64BitSwitch) {
		this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Conv_I4.MemberwiseClone());
	}
	var num2 = System.Decimal.op_Explicit$6(System.Decimal.op_Increment(System.Decimal.op_Subtraction(
				bucket.get_Item((bucket.Count - 1)).Key.MemberwiseClone(), 
				bucket.get_Item(0).Key.MemberwiseClone()
			).MemberwiseClone()).MemberwiseClone());
	var array = JSIL.Array.New(System.Reflection.Emit.Label, num2);
	var num3 = 0;
	var enumerator = (bucket.GetEnumerator());
	try {
	__loop0__: 
		while (enumerator.MoveNext()) {
			var current = enumerator.Current;
		__loop1__: 
			while (true) {
				var expr_1F4 = num.MemberwiseClone();
				num = System.Decimal.op_Increment(expr_1F4.MemberwiseClone()).MemberwiseClone();
				if (!System.Decimal.op_Inequality(expr_1F4.MemberwiseClone(), current.Key.MemberwiseClone())) {
					break __loop1__;
				}
				array[num3++] = info.Default.MemberwiseClone();
			}
			array[num3++] = current.Label.MemberwiseClone();
		}
	} finally {
		enumerator.IDisposable_Dispose();
	}
	this._ilg.Emit$11(System.Reflection.Emit.OpCodes.Switch.MemberwiseClone(), array);
	if (info.Is64BitSwitch) {
		this._ilg.MarkLabel(label.Value.MemberwiseClone());
	}
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.TryEmitHashtableSwitch = function (node, flags) {
	if (node.Comparison !== System.String.GetMethod$1(
			"op_Equality", 
			(System.Reflection.BindingFlags.ExactBinding | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static), 
			null, 
			JSIL.Array.New(System.Type, [System.String, System.String]), 
			null
		)) {
		return false;
	}
	var num = 0;
	var enumerator = node.Cases.GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current;
			var enumerator2 = current.TestValues.GetEnumerator();
			try {
			__loop1__: 
				while (enumerator2.IEnumerator_MoveNext()) {
					var current2 = enumerator2.IEnumerator$b1_Current;
					if (JSIL.TryCast(current2, System.Linq.Expressions.ConstantExpression) === null) {
						return false;
					}
					++num;
				}
			} finally {
				if (enumerator2 !== null) {
					enumerator2.IDisposable_Dispose();
				}
			}
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	if (num < 7) {
		return false;
	}
	var list = new (System.Collections.Generic.List$b1.Of(System.Linq.Expressions.ElementInit)) (num);
	var list2 = new (System.Collections.Generic.List$b1.Of(System.Linq.Expressions.SwitchCase)) (node.Cases.Count);
	var num2 = -1;
	var method = System.Collections.Generic.Dictionary$b2.Of(System.String, System.Int32).GetMethod$3("Add", JSIL.Array.New(System.Type, [System.String, System.Int32]));
	var i = 0;
	var count = node.Cases.Count;
__loop2__: 
	while (i < count) {
		var enumerator3 = node.Cases.get_Item(i).TestValues.GetEnumerator();
		try {
		__loop3__: 
			while (enumerator3.IEnumerator_MoveNext()) {
				var constantExpression = JSIL.Cast(enumerator3.IEnumerator$b1_Current, System.Linq.Expressions.ConstantExpression);
				if (constantExpression.Value !== null) {
					list.Add(System.Linq.Expressions.Expression.ElementInit$0(method, JSIL.Array.New(System.Linq.Expressions.Expression, [constantExpression, System.Linq.Expressions.Expression.Constant$0(i)])));
				} else {
					num2 = i;
				}
			}
		} finally {
			if (enumerator3 !== null) {
				enumerator3.IDisposable_Dispose();
			}
		}
		list2.Add(System.Linq.Expressions.Expression.SwitchCase$0(
				node.Cases.get_Item(i).Body, 
				JSIL.Array.New(System.Linq.Expressions.Expression, [System.Linq.Expressions.Expression.Constant$0(i)])
			));
		++i;
	}
	var memberExpression = this.CreateLazyInitializedField$b1(System.Collections.Generic.Dictionary$b2.Of(System.String, System.Int32))("dictionarySwitch");
	var instance = System.Linq.Expressions.Expression.Condition$0(
		System.Linq.Expressions.Expression.Equal$0(memberExpression, System.Linq.Expressions.Expression.Constant$1(null, memberExpression.Type)), 
		System.Linq.Expressions.Expression.Assign(memberExpression, System.Linq.Expressions.Expression.ListInit$5(System.Linq.Expressions.Expression.New$1(
					System.Collections.Generic.Dictionary$b2.Of(System.String, System.Int32).GetConstructor$2(JSIL.Array.New(System.Type, [System.Int32])), 
					JSIL.Array.New(System.Linq.Expressions.Expression, [System.Linq.Expressions.Expression.Constant$0(list.Count)])
				), list)), 
		memberExpression
	);
	var parameterExpression = System.Linq.Expressions.Expression.Variable$1(System.String, "switchValue");
	var parameterExpression2 = System.Linq.Expressions.Expression.Variable$1(System.Int32, "switchIndex");
	var node2 = System.Linq.Expressions.Expression.Block$8(JSIL.Array.New(System.Linq.Expressions.ParameterExpression, [parameterExpression2, parameterExpression]), JSIL.Array.New(System.Linq.Expressions.Expression, [System.Linq.Expressions.Expression.Assign(parameterExpression, node.SwitchValue), System.Linq.Expressions.Expression.IfThenElse(
				System.Linq.Expressions.Expression.Equal$0(parameterExpression, System.Linq.Expressions.Expression.Constant$1(null, System.String)), 
				System.Linq.Expressions.Expression.Assign(parameterExpression2, System.Linq.Expressions.Expression.Constant$0(num2)), 
				System.Linq.Expressions.Expression.IfThenElse(
					System.Linq.Expressions.Expression.Call$11(instance, "TryGetValue", null, JSIL.Array.New(System.Linq.Expressions.Expression, [parameterExpression, parameterExpression2])), 
					System.Linq.Expressions.Expression.Empty(), 
					System.Linq.Expressions.Expression.Assign(parameterExpression2, System.Linq.Expressions.Expression.Constant$0(-1))
				)
			), System.Linq.Expressions.Expression.Switch$5(
				node.Type, 
				parameterExpression2, 
				node.DefaultBody, 
				null, 
				list2
			)]));
	this.EmitExpression$1(node2, flags);
	return true;
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.CheckRethrow = function () {
	var labelScopeInfo = this._labelBlock;
__loop0__: 
	while (labelScopeInfo) {
		if (labelScopeInfo.Kind === $asm08.System.Linq.Expressions.Compiler.LabelScopeKind.Catch) {
			return;
		}
		if (labelScopeInfo.Kind === $asm08.System.Linq.Expressions.Compiler.LabelScopeKind.Finally) {
			break __loop0__;
		}
		labelScopeInfo = labelScopeInfo.Parent;
	}
	throw $asm08.System.Core.Error.RethrowRequiresCatch();
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.CheckTry = function () {
	var labelScopeInfo = this._labelBlock;
__loop0__: 
	while (labelScopeInfo) {
		if (labelScopeInfo.Kind === $asm08.System.Linq.Expressions.Compiler.LabelScopeKind.Filter) {
			throw $asm08.System.Core.Error.TryNotAllowedInFilter();
		}
		labelScopeInfo = labelScopeInfo.Parent;
	}
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitSaveExceptionOrPop = function (cb) {
	if (cb.Variable !== null) {
		this._scope.EmitSet(cb.Variable);
		return;
	}
	this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Pop.MemberwiseClone());
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitTryExpression = function (expr) {
	var tryExpression = JSIL.Cast(expr, System.Linq.Expressions.TryExpression);
	this.CheckTry();
	this.PushLabelBlock($asm08.System.Linq.Expressions.Compiler.LabelScopeKind.Try);
	this._ilg.BeginExceptionBlock();
	this.EmitExpression$0(tryExpression.Body);
	var type = expr.Type;
	var local = null;
	if (type !== System.Void) {
		local = this.GetLocal(type);
		this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), local);
	}
	var enumerator = tryExpression.Handlers.GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current;
			this.PushLabelBlock($asm08.System.Linq.Expressions.Compiler.LabelScopeKind.Catch);
			if (current.Filter === null) {
				this._ilg.BeginCatchBlock(current.Test);
			} else {
				this._ilg.BeginExceptFilterBlock();
			}
			this.EnterScope(current);
			this.EmitCatchStart(current);
			this.EmitExpression$0(current.Body);
			if (type !== System.Void) {
				this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), local);
			}
			this.ExitScope(current);
			this.PopLabelBlock($asm08.System.Linq.Expressions.Compiler.LabelScopeKind.Catch);
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	if (!((tryExpression.Finally === null) && (tryExpression.Fault === null))) {
		this.PushLabelBlock($asm08.System.Linq.Expressions.Compiler.LabelScopeKind.Finally);
		if (tryExpression.Finally !== null) {
			this._ilg.BeginFinallyBlock();
		} else {
			this._ilg.BeginFaultBlock();
		}
		this.EmitExpressionAsVoid$0(JSIL.Coalesce(tryExpression.Finally, tryExpression.Fault));
		this._ilg.EndExceptionBlock();
		this.PopLabelBlock($asm08.System.Linq.Expressions.Compiler.LabelScopeKind.Finally);
	} else {
		this._ilg.EndExceptionBlock();
	}
	if (type !== System.Void) {
		this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone(), local);
		this.FreeLocal(local);
	}
	this.PopLabelBlock($asm08.System.Linq.Expressions.Compiler.LabelScopeKind.Try);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitCatchStart = function (cb) {
	if (cb.Filter === null) {
		this.EmitSaveExceptionOrPop(cb);
		return;
	}
	var label = this._ilg.DefineLabel().MemberwiseClone();
	var label2 = this._ilg.DefineLabel().MemberwiseClone();
	this._ilg.Emit$6(System.Reflection.Emit.OpCodes.Isinst.MemberwiseClone(), cb.Test);
	this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Dup.MemberwiseClone());
	this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Brtrue.MemberwiseClone(), label2.MemberwiseClone());
	this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Pop.MemberwiseClone());
	this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_0.MemberwiseClone());
	this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Br.MemberwiseClone(), label.MemberwiseClone());
	this._ilg.MarkLabel(label2.MemberwiseClone());
	this.EmitSaveExceptionOrPop(cb);
	this.PushLabelBlock($asm08.System.Linq.Expressions.Compiler.LabelScopeKind.Filter);
	this.EmitExpression$0(cb.Filter);
	this.PopLabelBlock($asm08.System.Linq.Expressions.Compiler.LabelScopeKind.Filter);
	this._ilg.MarkLabel(label.MemberwiseClone());
	this._ilg.BeginCatchBlock(null);
	this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Pop.MemberwiseClone());
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitQuoteUnaryExpression = function (expr) {
	this.EmitQuote(JSIL.Cast(expr, System.Linq.Expressions.UnaryExpression));
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitQuote = function (quote) {
	this.EmitConstant(quote.Operand, quote.Type);
	if (this._scope.NearestHoistedLocals !== null) {
		this.EmitConstant(this._scope.NearestHoistedLocals, System.Object);
		this._scope.EmitGet(this._scope.NearestHoistedLocals.SelfVariable);
		this._ilg.Emit$4(System.Reflection.Emit.OpCodes.Call.MemberwiseClone(), System.Runtime.CompilerServices.RuntimeOps.GetMethod$5("Quote"));
		if (quote.Type !== System.Linq.Expressions.Expression) {
			this._ilg.Emit$6(System.Reflection.Emit.OpCodes.Castclass.MemberwiseClone(), quote.Type);
		}
	}
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitThrowUnaryExpression = function (expr) {
	this.EmitThrow(JSIL.Cast(expr, System.Linq.Expressions.UnaryExpression), $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags.EmitAsDefaultType);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitThrow = function (expr, flags) {
	if (expr.Operand === null) {
		this.CheckRethrow();
		this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Rethrow.MemberwiseClone());
	} else {
		this.EmitExpression$0(expr.Operand);
		this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Throw.MemberwiseClone());
	}
	this.EmitUnreachable(expr, flags);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitUnaryExpression = function (expr, flags) {
	this.EmitUnary(JSIL.Cast(expr, System.Linq.Expressions.UnaryExpression), flags);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitUnary = function (node, flags) {
	if (node.Method !== null) {
		this.EmitUnaryMethod(node, flags);
		return;
	}
	if (!((node.NodeType !== System.Linq.Expressions.ExpressionType.NegateChecked) || !$asm08.System.Dynamic.Utils.TypeUtils.IsInteger(node.Operand.Type))) {
		this.EmitExpression$0(node.Operand);
		var local = this.GetLocal(node.Operand.Type);
		this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), local);
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitInt(this._ilg, 0);
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitConvertToType(this._ilg, System.Int32, node.Operand.Type, false);
		this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone(), local);
		this.FreeLocal(local);
		this.EmitBinaryOperator(
			System.Linq.Expressions.ExpressionType.SubtractChecked, 
			node.Operand.Type, 
			node.Operand.Type, 
			node.Type, 
			false
		);
		return;
	}
	this.EmitExpression$0(node.Operand);
	this.EmitUnaryOperator(node.NodeType, node.Operand.Type, node.Type);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitUnaryOperator = function (op, operandType, resultType) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				var flag = $asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(operandType);
				if (op === System.Linq.Expressions.ExpressionType.ArrayLength) {
					this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ldlen.MemberwiseClone());
					return;
				}
				if (flag) {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								if (op <= System.Linq.Expressions.ExpressionType.TypeAs) {
									switch (Number(op)) {
										case 28: 
										case 29: 
										case 30: 
											break;
										case 31: 
										case 32: 
										case 33: 
											__label1__ = "IL_311";
											continue __step1__;
										case 34: 
											if (operandType === System.Nullable$b1.Of(System.Boolean)) {
												this._ilg.DefineLabel();
												var label = this._ilg.DefineLabel().MemberwiseClone();
												var local = this.GetLocal(operandType);
												this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), local);
												this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local);
												$asm08.System.Linq.Expressions.Compiler.ILGen.EmitHasValue(this._ilg, operandType);
												this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Brfalse_S.MemberwiseClone(), label.MemberwiseClone());
												this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local);
												$asm08.System.Linq.Expressions.Compiler.ILGen.EmitGetValueOrDefault(this._ilg, operandType);
												var nonNullableType = $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(operandType);
												this.EmitUnaryOperator(op, nonNullableType, System.Boolean);
												var constructor = resultType.GetConstructor$2(JSIL.Array.New(System.Type, [System.Boolean]));
												this._ilg.Emit$5(System.Reflection.Emit.OpCodes.Newobj.MemberwiseClone(), constructor);
												this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), local);
												this._ilg.MarkLabel(label.MemberwiseClone());
												this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone(), local);
												this.FreeLocal(local);
												return;
											}
											break;
										default: 
											if (op !== System.Linq.Expressions.ExpressionType.TypeAs) {
												__label1__ = "IL_311";
												continue __step1__;
											}
											this._ilg.Emit$6(System.Reflection.Emit.OpCodes.Box.MemberwiseClone(), operandType);
											this._ilg.Emit$6(System.Reflection.Emit.OpCodes.Isinst.MemberwiseClone(), resultType);
											if ($asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(resultType)) {
												this._ilg.Emit$6(System.Reflection.Emit.OpCodes.Unbox_Any.MemberwiseClone(), resultType);
											}
											return;
									}
								} else if (!((op === System.Linq.Expressions.ExpressionType.Decrement) || (op === System.Linq.Expressions.ExpressionType.Increment))) {
									switch (Number(op)) {
										case 82: 
										case 83: 
										case 84: 
											break;
										default: 
											__label1__ = "IL_311";
											continue __step1__;
									}
								}
								var label2 = this._ilg.DefineLabel().MemberwiseClone();
								var label3 = this._ilg.DefineLabel().MemberwiseClone();
								var local2 = this.GetLocal(operandType);
								this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), local2);
								this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local2);
								$asm08.System.Linq.Expressions.Compiler.ILGen.EmitHasValue(this._ilg, operandType);
								this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Brfalse_S.MemberwiseClone(), label2.MemberwiseClone());
								this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local2);
								$asm08.System.Linq.Expressions.Compiler.ILGen.EmitGetValueOrDefault(this._ilg, operandType);
								var nonNullableType2 = $asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(resultType);
								this.EmitUnaryOperator(op, nonNullableType2, nonNullableType2);
								var constructor2 = resultType.GetConstructor$2(JSIL.Array.New(System.Type, [nonNullableType2]));
								this._ilg.Emit$5(System.Reflection.Emit.OpCodes.Newobj.MemberwiseClone(), constructor2);
								this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), local2);
								this._ilg.Emit$10(System.Reflection.Emit.OpCodes.Br_S.MemberwiseClone(), label3.MemberwiseClone());
								this._ilg.MarkLabel(label2.MemberwiseClone());
								this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), local2);
								this._ilg.Emit$6(System.Reflection.Emit.OpCodes.Initobj.MemberwiseClone(), resultType);
								this._ilg.MarkLabel(label3.MemberwiseClone());
								this._ilg.Emit$14(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone(), local2);
								this.FreeLocal(local2);
								return;
								__label1__ = "IL_311";
								continue __step1__;
								break;
							case "IL_311":
								throw $asm08.System.Core.Error.UnhandledUnary(op);
								break __step1__;
						}
					}
				}
				if (op <= System.Linq.Expressions.ExpressionType.TypeAs) {
					switch (Number(op)) {
						case 28: 
						case 30: 
							this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Neg.MemberwiseClone());
							__label0__ = "IL_4D1";
							continue __step0__;
						case 29: 
							this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Nop.MemberwiseClone());
							__label0__ = "IL_4D1";
							continue __step0__;
						case 31: 
						case 32: 
						case 33: 
							break;
						case 34: 
							if (operandType === System.Boolean) {
								this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_0.MemberwiseClone());
								this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ceq.MemberwiseClone());
								__label0__ = "IL_4D1";
								continue __step0__;
							}
							this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Not.MemberwiseClone());
							__label0__ = "IL_4D1";
							continue __step0__;
						default: 
							if (op === System.Linq.Expressions.ExpressionType.TypeAs) {
								if (operandType.IsValueType) {
									this._ilg.Emit$6(System.Reflection.Emit.OpCodes.Box.MemberwiseClone(), operandType);
								}
								this._ilg.Emit$6(System.Reflection.Emit.OpCodes.Isinst.MemberwiseClone(), resultType);
								if ($asm08.System.Dynamic.Utils.TypeUtils.IsNullableType(resultType)) {
									this._ilg.Emit$6(System.Reflection.Emit.OpCodes.Unbox_Any.MemberwiseClone(), resultType);
								}
								return;
							}
							break;
					}
				} else {
					if (op === System.Linq.Expressions.ExpressionType.Decrement) {
						this.EmitConstantOne(resultType);
						this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Sub.MemberwiseClone());
						__label0__ = "IL_4D1";
						continue __step0__;
					}
					if (op === System.Linq.Expressions.ExpressionType.Increment) {
						this.EmitConstantOne(resultType);
						this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Add.MemberwiseClone());
						__label0__ = "IL_4D1";
						continue __step0__;
					}
					switch (Number(op)) {
						case 82: 
							this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Not.MemberwiseClone());
							__label0__ = "IL_4D1";
							continue __step0__;
						case 83: 
							this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_1.MemberwiseClone());
							this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ceq.MemberwiseClone());
							return;
						case 84: 
							this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_0.MemberwiseClone());
							this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ceq.MemberwiseClone());
							return;
					}
				}
				throw $asm08.System.Core.Error.UnhandledUnary(op);
				__label0__ = "IL_4D1";
				continue __step0__;
				break;
			case "IL_4D1":
				this.EmitConvertArithmeticResult(op, resultType);
				break __step0__;
		}
	}
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitConstantOne = function (type) {
	switch (Number(System.Type.GetTypeCode(type))) {
		case 7: 
		case 8: 
		case 9: 
		case 10: 
			this._ilg.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_1.MemberwiseClone());
			return;
		case 11: 
		case 12: 
			this._ilg.Emit$7(System.Reflection.Emit.OpCodes.Ldc_I8.MemberwiseClone(), 1);
			return;
		case 13: 
			this._ilg.Emit$8(System.Reflection.Emit.OpCodes.Ldc_R4.MemberwiseClone(), 1);
			return;
		case 14: 
			this._ilg.Emit$9(System.Reflection.Emit.OpCodes.Ldc_R8.MemberwiseClone(), 1);
			return;
		default: 
			throw $asm08.System.Dynamic.Utils.ContractUtils.Unreachable;
	}
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitUnboxUnaryExpression = function (expr) {
	var unaryExpression = JSIL.Cast(expr, System.Linq.Expressions.UnaryExpression);
	this.EmitExpression$0(unaryExpression.Operand);
	this._ilg.Emit$6(System.Reflection.Emit.OpCodes.Unbox_Any.MemberwiseClone(), unaryExpression.Type);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitConvertUnaryExpression = function (expr, flags) {
	this.EmitConvert(JSIL.Cast(expr, System.Linq.Expressions.UnaryExpression), flags);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitConvert = function (node, flags) {
	if (node.Method !== null) {
		if (!(!node.IsLifted || (node.Type.IsValueType && 
					node.Operand.Type.IsValueType))) {
			var parametersCached = $asm08.System.Dynamic.Utils.TypeExtensions.GetParametersCached(node.Method);
			var type = parametersCached[0].ParameterType;
			if (type.IsByRef) {
				type = type.GetElementType();
			}
			var node2 = System.Linq.Expressions.Expression.Convert$0(System.Linq.Expressions.Expression.Call$0(node.Method, System.Linq.Expressions.Expression.Convert$0(node.Operand, parametersCached[0].ParameterType)), node.Type);
			this.EmitConvert(node2, flags);
			return;
		}
		this.EmitUnaryMethod(node, flags);
		return;
	} else {
		if (node.Type === System.Void) {
			this.EmitExpressionAsVoid$1(node.Operand, flags);
			return;
		}
		if ($asm08.System.Dynamic.Utils.TypeUtils.AreEquivalent(node.Operand.Type, node.Type)) {
			this.EmitExpression$1(node.Operand, flags);
			return;
		}
		this.EmitExpression$0(node.Operand);
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitConvertToType(this._ilg, node.Operand.Type, node.Type, (node.NodeType === System.Linq.Expressions.ExpressionType.ConvertChecked));
		return;
	}
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.EmitUnaryMethod = function (node, flags) {
	if (node.IsLifted) {
		var parameterExpression = System.Linq.Expressions.Expression.Variable$1($asm08.System.Dynamic.Utils.TypeUtils.GetNonNullableType(node.Operand.Type), null);
		var methodCallExpression = System.Linq.Expressions.Expression.Call$0(node.Method, parameterExpression);
		var nullableType = $asm08.System.Dynamic.Utils.TypeUtils.GetNullableType(methodCallExpression.Type);
		this.EmitLift(
			node.NodeType, 
			nullableType, 
			methodCallExpression, 
			JSIL.Array.New(System.Linq.Expressions.ParameterExpression, [parameterExpression]), 
			JSIL.Array.New(System.Linq.Expressions.Expression, [node.Operand])
		);
		$asm08.System.Linq.Expressions.Compiler.ILGen.EmitConvertToType(this._ilg, nullableType, node.Type, false);
		return;
	}
	this.EmitMethodCallExpression$0(System.Linq.Expressions.Expression.Call$0(node.Method, node.Operand), flags);
};
JSIL.OverloadedMethod($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype, "EmitAddress", [
		["EmitAddress$0", [System.Linq.Expressions.Expression, System.Type]], 
		["EmitAddress$1", [System.Linq.Expressions.Expression, System.Type, $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags]]
	]);
JSIL.OverloadedMethod($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype, "AddressOf", [
		["AddressOf$0", [System.Linq.Expressions.BinaryExpression, System.Type]], 
		["AddressOf$1", [System.Linq.Expressions.ParameterExpression, System.Type]], 
		["AddressOf$2", [System.Linq.Expressions.MemberExpression, System.Type]], 
		["AddressOf$3", [System.Linq.Expressions.MethodCallExpression, System.Type]], 
		["AddressOf$4", [System.Linq.Expressions.IndexExpression, System.Type]], 
		["AddressOf$5", [System.Linq.Expressions.UnaryExpression, System.Type]]
	]);
JSIL.OverloadedMethod($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype, "AddressOfWriteBack", [
		["AddressOfWriteBack$0", [System.Linq.Expressions.MemberExpression]], 
		["AddressOfWriteBack$1", [System.Linq.Expressions.IndexExpression]]
	]);
JSIL.OverloadedMethod($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype, "EmitBinaryExpression", [
		["EmitBinaryExpression$0", [System.Linq.Expressions.Expression]], 
		["EmitBinaryExpression$1", [System.Linq.Expressions.Expression, $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags]]
	]);
JSIL.OverloadedMethod($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype, "_ctor", [
		["_ctor$0", [$asm08.System.Linq.Expressions.Compiler.AnalyzedTree, System.Linq.Expressions.LambdaExpression]], 
		["_ctor$1", [$asm08.System.Linq.Expressions.Compiler.AnalyzedTree, System.Linq.Expressions.LambdaExpression, System.Reflection.Emit.MethodBuilder]], 
		["_ctor$2", [$asm08.System.Linq.Expressions.Compiler.LambdaCompiler, System.Linq.Expressions.LambdaExpression]]
	]);
JSIL.OverloadedMethod($asm08.System.Linq.Expressions.Compiler.LambdaCompiler, "Compile", [
		["Compile$0", [System.Linq.Expressions.LambdaExpression, System.Runtime.CompilerServices.DebugInfoGenerator]], 
		["Compile$1", [System.Linq.Expressions.LambdaExpression, System.Reflection.Emit.MethodBuilder, System.Runtime.CompilerServices.DebugInfoGenerator]]
	]);
JSIL.OverloadedMethod($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype, "EmitExpression", [
		["EmitExpression$0", [System.Linq.Expressions.Expression]], 
		["EmitExpression$1", [System.Linq.Expressions.Expression, $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags]]
	]);
JSIL.OverloadedMethod($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype, "EmitExpressionAsVoid", [
		["EmitExpressionAsVoid$0", [System.Linq.Expressions.Expression]], 
		["EmitExpressionAsVoid$1", [System.Linq.Expressions.Expression, $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags]]
	]);
JSIL.OverloadedMethod($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype, "EmitMethodCallExpression", [
		["EmitMethodCallExpression$0", [System.Linq.Expressions.Expression, $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags]], 
		["EmitMethodCallExpression$1", [System.Linq.Expressions.Expression]]
	]);
JSIL.OverloadedMethod($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype, "EmitMethodCall", [
		["EmitMethodCall$0", [System.Linq.Expressions.Expression, System.Reflection.MethodInfo, $asm08.System.Linq.Expressions.IArgumentProvider]], 
		["EmitMethodCall$1", [System.Linq.Expressions.Expression, System.Reflection.MethodInfo, $asm08.System.Linq.Expressions.IArgumentProvider, $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags]], 
		["EmitMethodCall$2", [System.Reflection.MethodInfo, $asm08.System.Linq.Expressions.IArgumentProvider, System.Type]], 
		["EmitMethodCall$3", [System.Reflection.MethodInfo, $asm08.System.Linq.Expressions.IArgumentProvider, System.Type, $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags]]
	]);
JSIL.OverloadedMethod($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype, "EmitArguments", [
		["EmitArguments$0", [System.Reflection.MethodBase, $asm08.System.Linq.Expressions.IArgumentProvider]], 
		["EmitArguments$1", [System.Reflection.MethodBase, $asm08.System.Linq.Expressions.IArgumentProvider, System.Int32]]
	]);
JSIL.OverloadedMethod($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype, "EmitMemberAssignment", [
		["EmitMemberAssignment$0", [System.Linq.Expressions.BinaryExpression, $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags]], 
		["EmitMemberAssignment$1", [System.Linq.Expressions.MemberAssignment, System.Type]]
	]);
JSIL.OverloadedMethod($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype, "EmitMemberInit", [
		["EmitMemberInit$0", [System.Linq.Expressions.MemberInitExpression]], 
		["EmitMemberInit$1", [System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(System.Linq.Expressions.MemberBinding), System.Boolean, System.Type]]
	]);
JSIL.OverloadedMethod($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype, "EmitListInit", [
		["EmitListInit$0", [System.Linq.Expressions.ListInitExpression]], 
		["EmitListInit$1", [System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(System.Linq.Expressions.ElementInit), System.Boolean, System.Type]]
	]);
JSIL.OverloadedMethod($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype, "EmitDelegateConstruction", [
		["EmitDelegateConstruction$0", [$asm08.System.Linq.Expressions.Compiler.LambdaCompiler]], 
		["EmitDelegateConstruction$1", [System.Linq.Expressions.LambdaExpression]]
	]);
JSIL.OverloadedMethod($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype, "EmitLambdaBody", [
		["EmitLambdaBody$0", []], 
		["EmitLambdaBody$1", [$asm08.System.Linq.Expressions.Compiler.CompilerScope, System.Boolean, $asm08.System.Linq.Expressions.Compiler.LambdaCompiler.CompilationFlags]]
	]);
JSIL.MakeProperty($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype, "EmitDebugSymbols", 
	$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.get_EmitDebugSymbols, null);
JSIL.MakeProperty($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype, "IL", 
	$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.get_IL, null);
JSIL.MakeProperty($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype, "Parameters", 
	$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.get_Parameters, null);
JSIL.MakeProperty($asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype, "CanEmitBoundConstants", 
	$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype.get_CanEmitBoundConstants, null);
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype._tree = null;
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype._ilg = null;
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype._typeBuilder = null;
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype._method = null;
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype._labelBlock = null;
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype._labelInfo = null;
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype._scope = null;
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype._lambda = null;
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype._hasClosureArgument = false;
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype._boundConstants = null;
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype._freeLocals = null;
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.prototype._sequencePointCleared = false;
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler._Counter = 0;
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.$CachedAnonymousMethodDelegate7 = null;
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.$CachedAnonymousMethodDelegate9 = null;
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.$CachedAnonymousMethodDelegatef = null;
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.$CachedAnonymousMethodDelegate15 = null;
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.$CachedAnonymousMethodDelegate16 = null;
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.$CachedAnonymousMethodDelegate17 = null;

$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.SwitchLabel.prototype._ctor = function (key, constant, label) {
	System.Object.prototype._ctor.call(this);
	this.Key = key;
	this.Constant = constant;
	this.Label = label;
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.SwitchLabel.prototype.Constant = null;

$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.SwitchInfo.prototype._ctor = function (node, value, $default) {
	System.Object.prototype._ctor.call(this);
	this.Node = node;
	this.Value = value;
	this.Default = $default;
	this.Type = this.Node.SwitchValue.Type;
	this.IsUnsigned = $asm08.System.Dynamic.Utils.TypeUtils.IsUnsigned(this.Type);
	var typeCode = System.Type.GetTypeCode(this.Type);
	this.Is64BitSwitch = ((typeCode === System.TypeCode.UInt64) || 
		(typeCode === System.TypeCode.Int64));
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.SwitchInfo.prototype.Node = null;
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.SwitchInfo.prototype.Value = null;
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.SwitchInfo.prototype.Type = null;
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.SwitchInfo.prototype.IsUnsigned = false;
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.SwitchInfo.prototype.Is64BitSwitch = false;

$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.$l$gc__DisplayClass1.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.$l$gc__DisplayClass1.prototype.instanceLocal = null;
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.$l$gc__DisplayClass1.prototype.instanceType = null;
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.$l$gc__DisplayClass1.prototype.pi = null;
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.$l$gc__DisplayClass1.prototype.valueLocal = null;
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.$l$gc__DisplayClass1.prototype.$this = null;

$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.$l$gc__DisplayClass4.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.$l$gc__DisplayClass4.prototype.instanceLocal = null;
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.$l$gc__DisplayClass4.prototype.instanceType = null;
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.$l$gc__DisplayClass4.prototype.args = null;
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.$l$gc__DisplayClass4.prototype.valueLocal = null;
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.$l$gc__DisplayClass4.prototype.$this = null;
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.$l$gc__DisplayClass4.prototype.node = null;

$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.$l$gc__DisplayClassc.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.$l$gc__DisplayClassc.prototype.node = null;
$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.$l$gc__DisplayClassc.prototype.$this = null;

$asm08.System.Linq.Expressions.Compiler.OffsetTrackingILGenerator.prototype.get_ILOffset = function () {
	return this._offset;
};
$asm08.System.Linq.Expressions.Compiler.OffsetTrackingILGenerator.prototype._ctor = function (ilg) {
	this._exceptionState = JSIL.New(System.Collections.Generic.Stack$b1.Of($asm08.System.Linq.Expressions.Compiler.OffsetTrackingILGenerator.ExceptionState), "_ctor$0", []);
	System.Object.prototype._ctor.call(this);
	this._ilg = ilg;
};
$asm08.System.Linq.Expressions.Compiler.OffsetTrackingILGenerator.prototype.AdvanceOffset = function (opcode) {
	this._offset += opcode.Size;
};
$asm08.System.Linq.Expressions.Compiler.OffsetTrackingILGenerator.prototype.AdvanceOffsetWithLabel = function (opcode) {
	this.AdvanceOffset(opcode.MemberwiseClone());
	if (System.Reflection.Emit.OpCodes.TakesSingleByteArgument(opcode.MemberwiseClone())) {
		++this._offset;
		return;
	}
	this._offset += 4;
};
$asm08.System.Linq.Expressions.Compiler.OffsetTrackingILGenerator.prototype.Emit$0 = function (opcode) {
	this._ilg.Emit$0(opcode.MemberwiseClone());
	this.AdvanceOffset(opcode.MemberwiseClone());
};
$asm08.System.Linq.Expressions.Compiler.OffsetTrackingILGenerator.prototype.Emit$1 = function (opcode, arg) {
	this._ilg.Emit$1(opcode.MemberwiseClone(), arg);
	this.AdvanceOffset(opcode.MemberwiseClone());
	++this._offset;
};
$asm08.System.Linq.Expressions.Compiler.OffsetTrackingILGenerator.prototype.Emit$2 = function (opcode, arg) {
	this._ilg.Emit$2(opcode.MemberwiseClone(), arg);
	this.AdvanceOffset(opcode.MemberwiseClone());
	++this._offset;
};
$asm08.System.Linq.Expressions.Compiler.OffsetTrackingILGenerator.prototype.Emit$3 = function (opcode, arg) {
	this._ilg.Emit$4(opcode.MemberwiseClone(), arg);
	this.AdvanceOffset(opcode.MemberwiseClone());
	this._offset += 4;
};
$asm08.System.Linq.Expressions.Compiler.OffsetTrackingILGenerator.prototype.Emit$4 = function (opcode, meth) {
	this._ilg.Emit$5(opcode.MemberwiseClone(), meth);
	this.AdvanceOffset(opcode.MemberwiseClone());
	this._offset += 4;
};
$asm08.System.Linq.Expressions.Compiler.OffsetTrackingILGenerator.prototype.EmitCall = function (opcode, methodInfo, optionalParameterTypes) {
	this._ilg.EmitCall(opcode.MemberwiseClone(), methodInfo, optionalParameterTypes);
	this.AdvanceOffset(opcode.MemberwiseClone());
	this._offset += 4;
};
$asm08.System.Linq.Expressions.Compiler.OffsetTrackingILGenerator.prototype.Emit$5 = function (opcode, con) {
	this._ilg.Emit$6(opcode.MemberwiseClone(), con);
	this.AdvanceOffset(opcode.MemberwiseClone());
	this._offset += 4;
};
$asm08.System.Linq.Expressions.Compiler.OffsetTrackingILGenerator.prototype.Emit$6 = function (opcode, cls) {
	this._ilg.Emit$7(opcode.MemberwiseClone(), cls);
	this.AdvanceOffset(opcode.MemberwiseClone());
	this._offset += 4;
};
$asm08.System.Linq.Expressions.Compiler.OffsetTrackingILGenerator.prototype.Emit$7 = function (opcode, arg) {
	this._ilg.Emit$8(opcode.MemberwiseClone(), arg);
	this.AdvanceOffset(opcode.MemberwiseClone());
	this._offset += 8;
};
$asm08.System.Linq.Expressions.Compiler.OffsetTrackingILGenerator.prototype.Emit$8 = function (opcode, arg) {
	this._ilg.Emit$9(opcode.MemberwiseClone(), arg);
	this.AdvanceOffset(opcode.MemberwiseClone());
	this._offset += 4;
};
$asm08.System.Linq.Expressions.Compiler.OffsetTrackingILGenerator.prototype.Emit$9 = function (opcode, arg) {
	this._ilg.Emit$10(opcode.MemberwiseClone(), arg);
	this.AdvanceOffset(opcode.MemberwiseClone());
	this._offset += 8;
};
$asm08.System.Linq.Expressions.Compiler.OffsetTrackingILGenerator.prototype.Emit$10 = function (opcode, label) {
	this._ilg.Emit$11(opcode.MemberwiseClone(), label);
	this.AdvanceOffsetWithLabel(opcode.MemberwiseClone());
};
$asm08.System.Linq.Expressions.Compiler.OffsetTrackingILGenerator.prototype.Emit$11 = function (opcode, labels) {
	this._ilg.Emit$12(opcode.MemberwiseClone(), labels);
	this.AdvanceOffset(opcode.MemberwiseClone());
	this._offset += 4;
	var i = (labels.length * 4);
	var num = 0;
__loop0__: 
	while (i > 0) {
		this._offset += 4;
		i -= 4;
		++num;
	}
};
$asm08.System.Linq.Expressions.Compiler.OffsetTrackingILGenerator.prototype.Emit$12 = function (opcode, field) {
	this._ilg.Emit$13(opcode.MemberwiseClone(), field);
	this.AdvanceOffset(opcode.MemberwiseClone());
	this._offset += 4;
};
$asm08.System.Linq.Expressions.Compiler.OffsetTrackingILGenerator.prototype.Emit$13 = function (opcode, str) {
	this._ilg.Emit$14(opcode.MemberwiseClone(), str);
	this.AdvanceOffset(opcode.MemberwiseClone());
	this._offset += 4;
};
$asm08.System.Linq.Expressions.Compiler.OffsetTrackingILGenerator.prototype.Emit$14 = function (opcode, local) {
	this._ilg.Emit$15(opcode.MemberwiseClone(), local);
	var localIndex = local.LocalIndex;
	if (opcode.Equals$1(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone())) {
		switch (localIndex) {
			case 0: 
				opcode = System.Reflection.Emit.OpCodes.Ldloc_0.MemberwiseClone();
				break;
			case 1: 
				opcode = System.Reflection.Emit.OpCodes.Ldloc_1.MemberwiseClone();
				break;
			case 2: 
				opcode = System.Reflection.Emit.OpCodes.Ldloc_2.MemberwiseClone();
				break;
			case 3: 
				opcode = System.Reflection.Emit.OpCodes.Ldloc_3.MemberwiseClone();
				break;
			default: 
				if (localIndex <= 255) {
					opcode = System.Reflection.Emit.OpCodes.Ldloc_S.MemberwiseClone();
				}
				break;
		}
	} else if (opcode.Equals$1(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone())) {
		switch (localIndex) {
			case 0: 
				opcode = System.Reflection.Emit.OpCodes.Stloc_0.MemberwiseClone();
				break;
			case 1: 
				opcode = System.Reflection.Emit.OpCodes.Stloc_1.MemberwiseClone();
				break;
			case 2: 
				opcode = System.Reflection.Emit.OpCodes.Stloc_2.MemberwiseClone();
				break;
			case 3: 
				opcode = System.Reflection.Emit.OpCodes.Stloc_3.MemberwiseClone();
				break;
			default: 
				if (localIndex <= 255) {
					opcode = System.Reflection.Emit.OpCodes.Stloc_S.MemberwiseClone();
				}
				break;
		}
	} else if (!(!opcode.Equals$1(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone()) || (localIndex > 255))) {
		opcode = System.Reflection.Emit.OpCodes.Ldloca_S.MemberwiseClone();
	}
	this.AdvanceOffset(opcode.MemberwiseClone());
	if (opcode.OperandType === System.Reflection.Emit.OperandType.InlineNone) {
		return;
	}
	if (!System.Reflection.Emit.OpCodes.TakesSingleByteArgument(opcode.MemberwiseClone())) {
		this._offset += 2;
		return;
	}
	++this._offset;
};
$asm08.System.Linq.Expressions.Compiler.OffsetTrackingILGenerator.prototype.BeginExceptionBlock = function () {
	this._ilg.BeginExceptionBlock();
	this._exceptionState.Push($asm08.System.Linq.Expressions.Compiler.OffsetTrackingILGenerator.ExceptionState.Try);
};
$asm08.System.Linq.Expressions.Compiler.OffsetTrackingILGenerator.prototype.EndExceptionBlock = function () {
	this._ilg.EndExceptionBlock();
	var exceptionState = this._exceptionState.Pop();
	if (exceptionState === $asm08.System.Linq.Expressions.Compiler.OffsetTrackingILGenerator.ExceptionState.Catch) {
		this.AdvanceOffsetWithLabel(System.Reflection.Emit.OpCodes.Leave.MemberwiseClone());
		return;
	}
	if (!((exceptionState !== $asm08.System.Linq.Expressions.Compiler.OffsetTrackingILGenerator.ExceptionState.Finally) && (exceptionState !== $asm08.System.Linq.Expressions.Compiler.OffsetTrackingILGenerator.ExceptionState.Fault))) {
		this.AdvanceOffset(System.Reflection.Emit.OpCodes.Endfinally.MemberwiseClone());
	}
};
$asm08.System.Linq.Expressions.Compiler.OffsetTrackingILGenerator.prototype.BeginExceptFilterBlock = function () {
	this._ilg.BeginExceptFilterBlock();
	this._exceptionState.Pop();
	this._exceptionState.Push($asm08.System.Linq.Expressions.Compiler.OffsetTrackingILGenerator.ExceptionState.Filter);
};
$asm08.System.Linq.Expressions.Compiler.OffsetTrackingILGenerator.prototype.BeginCatchBlock = function (exceptionType) {
	this._ilg.BeginCatchBlock(exceptionType);
	var exceptionState = this._exceptionState.Pop();
	if (exceptionState === $asm08.System.Linq.Expressions.Compiler.OffsetTrackingILGenerator.ExceptionState.Filter) {
		this.AdvanceOffset(System.Reflection.Emit.OpCodes.Endfilter.MemberwiseClone());
	} else {
		this.AdvanceOffsetWithLabel(System.Reflection.Emit.OpCodes.Leave.MemberwiseClone());
	}
	this._exceptionState.Push($asm08.System.Linq.Expressions.Compiler.OffsetTrackingILGenerator.ExceptionState.Catch);
};
$asm08.System.Linq.Expressions.Compiler.OffsetTrackingILGenerator.prototype.BeginFaultBlock = function () {
	this._ilg.BeginFaultBlock();
	this.AdvanceOffsetWithLabel(System.Reflection.Emit.OpCodes.Leave.MemberwiseClone());
	this._exceptionState.Pop();
	this._exceptionState.Push($asm08.System.Linq.Expressions.Compiler.OffsetTrackingILGenerator.ExceptionState.Fault);
};
$asm08.System.Linq.Expressions.Compiler.OffsetTrackingILGenerator.prototype.BeginFinallyBlock = function () {
	this._ilg.BeginFinallyBlock();
	var exceptionState = this._exceptionState.Pop();
	if (JSIL.Cast(exceptionState, System.Boolean)) {
		this.AdvanceOffsetWithLabel(System.Reflection.Emit.OpCodes.Leave.MemberwiseClone());
	}
	this.AdvanceOffsetWithLabel(System.Reflection.Emit.OpCodes.Leave.MemberwiseClone());
	this._exceptionState.Push($asm08.System.Linq.Expressions.Compiler.OffsetTrackingILGenerator.ExceptionState.Finally);
};
$asm08.System.Linq.Expressions.Compiler.OffsetTrackingILGenerator.prototype.DefineLabel = function () {
	return this._ilg.DefineLabel();
};
$asm08.System.Linq.Expressions.Compiler.OffsetTrackingILGenerator.prototype.MarkLabel = function (loc) {
	this._ilg.MarkLabel(loc);
};
$asm08.System.Linq.Expressions.Compiler.OffsetTrackingILGenerator.prototype.DeclareLocal = function (localType) {
	return this._ilg.DeclareLocal$0(localType);
};
$asm08.System.Linq.Expressions.Compiler.OffsetTrackingILGenerator.prototype.MarkSequencePoint = function (document, startLine, startColumn, endLine, endColumn) {
	this._ilg.MarkSequencePoint(
		document, 
		startLine, 
		startColumn, 
		endLine, 
		endColumn
	);
};
$asm08.System.Linq.Expressions.Compiler.OffsetTrackingILGenerator.prototype.AssertOffsetMatches = function () {
};
JSIL.OverloadedMethod(System.Linq.Expressions.Compiler.OffsetTrackingILGenerator.prototype, "Emit", [
		["Emit$0", [System.Reflection.Emit.OpCode]], 
		["Emit$1", [System.Reflection.Emit.OpCode, System.Byte]], 
		["Emit$2", [System.Reflection.Emit.OpCode, System.SByte]], 
		["Emit$3", [System.Reflection.Emit.OpCode, System.Int32]], 
		["Emit$4", [System.Reflection.Emit.OpCode, System.Reflection.MethodInfo]], 
		["Emit$5", [System.Reflection.Emit.OpCode, System.Reflection.ConstructorInfo]], 
		["Emit$6", [System.Reflection.Emit.OpCode, System.Type]], 
		["Emit$7", [System.Reflection.Emit.OpCode, System.Int64]], 
		["Emit$8", [System.Reflection.Emit.OpCode, System.Single]], 
		["Emit$9", [System.Reflection.Emit.OpCode, System.Double]], 
		["Emit$10", [System.Reflection.Emit.OpCode, System.Reflection.Emit.Label]], 
		["Emit$11", [System.Reflection.Emit.OpCode, System.Array.Of(System.Reflection.Emit.Label)]], 
		["Emit$12", [System.Reflection.Emit.OpCode, System.Reflection.FieldInfo]], 
		["Emit$13", [System.Reflection.Emit.OpCode, System.String]], 
		["Emit$14", [System.Reflection.Emit.OpCode, System.Reflection.Emit.LocalBuilder]]
	]);
JSIL.MakeProperty($asm08.System.Linq.Expressions.Compiler.OffsetTrackingILGenerator.prototype, "ILOffset", 
	$asm08.System.Linq.Expressions.Compiler.OffsetTrackingILGenerator.prototype.get_ILOffset, null);
$asm08.System.Linq.Expressions.Compiler.OffsetTrackingILGenerator.prototype._ilg = null;
$asm08.System.Linq.Expressions.Compiler.OffsetTrackingILGenerator.prototype._offset = 0;
$asm08.System.Linq.Expressions.Compiler.OffsetTrackingILGenerator.prototype._exceptionState = null;

$asm08.System.Linq.Expressions.Set$b1.prototype._ctor$0 = function () {
	System.Object.prototype._ctor.call(this);
	this._data = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(this.T, System.Object), "_ctor$0", []);
};
$asm08.System.Linq.Expressions.Set$b1.prototype._ctor$1 = function (comparer) {
	System.Object.prototype._ctor.call(this);
	this._data = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(this.T, System.Object), "_ctor$2", [comparer]);
};
$asm08.System.Linq.Expressions.Set$b1.prototype._ctor$2 = function (list) {
	System.Object.prototype._ctor.call(this);
	this._data = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(this.T, System.Object), "_ctor$1", [list.ICollection$b1_Count]);
	var enumerator = list.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current;
			this.Add(current);
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
};
$asm08.System.Linq.Expressions.Set$b1.prototype._ctor$3 = function (list) {
	System.Object.prototype._ctor.call(this);
	this._data = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(this.T, System.Object), "_ctor$0", []);
	var enumerator = list.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current;
			this.Add(current);
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
};
$asm08.System.Linq.Expressions.Set$b1.prototype._ctor$4 = function (capacity) {
	System.Object.prototype._ctor.call(this);
	this._data = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(this.T, System.Object), "_ctor$1", [capacity]);
};
$asm08.System.Linq.Expressions.Set$b1.prototype.Add = function (item) {
	this._data.set_Item(item, null);
};
$asm08.System.Linq.Expressions.Set$b1.prototype.Clear = function () {
	this._data.Clear();
};
$asm08.System.Linq.Expressions.Set$b1.prototype.Contains = function (item) {
	return this._data.ContainsKey(item);
};
$asm08.System.Linq.Expressions.Set$b1.prototype.CopyTo = function (array, arrayIndex) {
	JSIL.Cast(this._data.Keys, System.Collections.Generic.Dictionary$b2.KeyCollection.Of(this.T, System.Object)).CopyTo(array, arrayIndex);
};
$asm08.System.Linq.Expressions.Set$b1.prototype.get_Count = function () {
	return this._data.Count;
};
$asm08.System.Linq.Expressions.Set$b1.prototype.get_IsReadOnly = function () {
	return false;
};
$asm08.System.Linq.Expressions.Set$b1.prototype.Remove = function (item) {
	return this._data.Remove(item);
};
$asm08.System.Linq.Expressions.Set$b1.prototype.GetEnumerator = function () {
	return JSIL.Cast(this._data.Keys, System.Collections.Generic.Dictionary$b2.KeyCollection.Of(this.T, System.Object)).GetEnumerator();
};
$asm08.System.Linq.Expressions.Set$b1.prototype.IEnumerable_GetEnumerator = function () {
	return JSIL.Cast(this._data.Keys, System.Collections.Generic.Dictionary$b2.KeyCollection.Of(this.T, System.Object)).GetEnumerator();
};
JSIL.OverloadedMethod($asm08.System.Linq.Expressions.Set$b1.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Collections.Generic.IEqualityComparer$b1.Of(JSIL.AnyType)]], 
		["_ctor$2", [System.Collections.Generic.IList$b1.Of(JSIL.AnyType)]], 
		["_ctor$3", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType)]], 
		["_ctor$4", [System.Int32]]
	]);
JSIL.MakeProperty($asm08.System.Linq.Expressions.Set$b1.prototype, "Count", 
	$asm08.System.Linq.Expressions.Set$b1.prototype.get_Count, null);
JSIL.MakeProperty($asm08.System.Linq.Expressions.Set$b1.prototype, "IsReadOnly", 
	$asm08.System.Linq.Expressions.Set$b1.prototype.get_IsReadOnly, null);
$asm08.System.Linq.Expressions.Set$b1.prototype._data = null;

$asm08.System.Linq.Expressions.Compiler.StackSpiller.AnalyzeLambda = function (lambda) {
	return lambda.Accept(new $asm08.System.Linq.Expressions.Compiler.StackSpiller(System.Linq.Expressions.Compiler.StackSpiller.Stack.Empty));
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.prototype._ctor = function (stack) {
	this._tm = new $asm08.System.Linq.Expressions.Compiler.StackSpiller.TempMaker();
	System.Object.prototype._ctor.call(this);
	this._startingStack = stack;
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.prototype.Rewrite$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, lambda) {
		var result = this.RewriteExpressionFreeTemps(lambda.Body, this._startingStack).MemberwiseClone();
		this._lambdaRewrite = result.Action;
		if (result.Action !== 0) {
			var expression = result.Node;
			if (this._tm.Temps.Count > 0) {
				expression = System.Linq.Expressions.Expression.Block$8(this._tm.Temps, JSIL.Array.New(System.Linq.Expressions.Expression, [expression]));
			}
			return new (System.Linq.Expressions.Expression$b1.Of(T)) (expression, lambda.Name, lambda.TailCall, lambda.Parameters);
		}
		return lambda;
	}
);
$asm08.System.Linq.Expressions.Compiler.StackSpiller.VerifyRewrite = function (result, node) {
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.prototype.RewriteExpressionFreeTemps = function (expression, stack) {
	var mark = this.Mark();
	var result = this.RewriteExpression(expression, stack).MemberwiseClone();
	this.Free(mark);
	return result;
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.prototype.RewriteDynamicExpression = function (expr, stack) {
	var dynamicExpression = JSIL.Cast(expr, System.Linq.Expressions.DynamicExpression);
	var argumentProvider = dynamicExpression;
	var childRewriter = new $asm08.System.Linq.Expressions.Compiler.StackSpiller.ChildRewriter(this, System.Linq.Expressions.Compiler.StackSpiller.Stack.NonEmpty, argumentProvider.IArgumentProvider_ArgumentCount);
	childRewriter.AddArguments(argumentProvider);
	if (childRewriter.Action === (System.Linq.Expressions.Compiler.StackSpiller.RewriteAction.Copy | System.Linq.Expressions.Compiler.StackSpiller.RewriteAction.SpillStack)) {
		$asm08.System.Linq.Expressions.Compiler.StackSpiller.RequireNoRefArgs(dynamicExpression.DelegateType.GetMethod$5("Invoke"));
	}
	return childRewriter.Finish(childRewriter.Rewrite ? dynamicExpression.Rewrite(childRewriter.get_Item$1(0, -1)) : expr);
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.prototype.RewriteIndexAssignment = function (node, stack) {
	var indexExpression = JSIL.Cast(node.Left, System.Linq.Expressions.IndexExpression);
	var childRewriter = new $asm08.System.Linq.Expressions.Compiler.StackSpiller.ChildRewriter(this, stack, (2 + indexExpression.Arguments.Count));
	childRewriter.Add$0(indexExpression.Object);
	childRewriter.Add$1(indexExpression.Arguments);
	childRewriter.Add$0(node.Right);
	if (childRewriter.Action === (System.Linq.Expressions.Compiler.StackSpiller.RewriteAction.Copy | System.Linq.Expressions.Compiler.StackSpiller.RewriteAction.SpillStack)) {
		$asm08.System.Linq.Expressions.Compiler.StackSpiller.RequireNotRefInstance(indexExpression.Object);
	}
	if (childRewriter.Rewrite) {
		node = new $asm08.System.Linq.Expressions.AssignBinaryExpression(new System.Linq.Expressions.IndexExpression(childRewriter.get_Item$0(0), indexExpression.Indexer, JSIL.Cast(childRewriter.get_Item$1(1, -2), System.Collections.Generic.IList$b1.Of(System.Linq.Expressions.Expression))), childRewriter.get_Item$0(-1));
	}
	return childRewriter.Finish(node);
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.prototype.RewriteLogicalBinaryExpression = function (expr, stack) {
	var binaryExpression = JSIL.Cast(expr, System.Linq.Expressions.BinaryExpression);
	var result = this.RewriteExpression(binaryExpression.Left, stack).MemberwiseClone();
	var result2 = this.RewriteExpression(binaryExpression.Right, stack).MemberwiseClone();
	var result3 = this.RewriteExpression(binaryExpression.Conversion, stack).MemberwiseClone();
	var rewriteAction = ((result.Action | result2.Action) | result3.Action);
	if (JSIL.Cast(rewriteAction, System.Boolean)) {
		expr = System.Linq.Expressions.BinaryExpression.Create(
			binaryExpression.NodeType, 
			result.Node, 
			result2.Node, 
			binaryExpression.Type, 
			binaryExpression.Method, 
			JSIL.Cast(result3.Node, System.Linq.Expressions.LambdaExpression)
		);
	}
	return new $asm08.System.Linq.Expressions.Compiler.StackSpiller.Result(rewriteAction, expr);
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.prototype.RewriteReducibleExpression = function (expr, stack) {
	var result = this.RewriteExpression(expr.Reduce(), stack).MemberwiseClone();
	return new $asm08.System.Linq.Expressions.Compiler.StackSpiller.Result((result.Action | System.Linq.Expressions.Compiler.StackSpiller.RewriteAction.Copy), result.Node);
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.prototype.RewriteBinaryExpression = function (expr, stack) {
	var binaryExpression = JSIL.Cast(expr, System.Linq.Expressions.BinaryExpression);
	var childRewriter = new $asm08.System.Linq.Expressions.Compiler.StackSpiller.ChildRewriter(this, stack, 3);
	childRewriter.Add$0(binaryExpression.Left);
	childRewriter.Add$0(binaryExpression.Right);
	childRewriter.Add$0(binaryExpression.Conversion);
	if (childRewriter.Action === (System.Linq.Expressions.Compiler.StackSpiller.RewriteAction.Copy | System.Linq.Expressions.Compiler.StackSpiller.RewriteAction.SpillStack)) {
		$asm08.System.Linq.Expressions.Compiler.StackSpiller.RequireNoRefArgs(binaryExpression.Method);
	}
	return childRewriter.Finish(childRewriter.Rewrite ? System.Linq.Expressions.BinaryExpression.Create(
			binaryExpression.NodeType, 
			childRewriter.get_Item$0(0), 
			childRewriter.get_Item$0(1), 
			binaryExpression.Type, 
			binaryExpression.Method, 
			JSIL.Cast(childRewriter.get_Item$0(2), System.Linq.Expressions.LambdaExpression)
		) : expr);
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.prototype.RewriteVariableAssignment = function (node, stack) {
	var result = this.RewriteExpression(node.Right, stack).MemberwiseClone();
	if (result.Action !== 0) {
		node = System.Linq.Expressions.Expression.Assign(node.Left, result.Node);
	}
	return new $asm08.System.Linq.Expressions.Compiler.StackSpiller.Result(result.Action, node);
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.prototype.RewriteAssignBinaryExpression = function (expr, stack) {
	var binaryExpression = JSIL.Cast(expr, System.Linq.Expressions.BinaryExpression);
	var nodeType = binaryExpression.Left.NodeType;
	if (nodeType <= System.Linq.Expressions.ExpressionType.Parameter) {
		if (nodeType === System.Linq.Expressions.ExpressionType.MemberAccess) {
			return this.RewriteMemberAssignment(binaryExpression, stack);
		}
		if (nodeType === System.Linq.Expressions.ExpressionType.Parameter) {
			return this.RewriteVariableAssignment(binaryExpression, stack);
		}
	} else {
		if (nodeType === System.Linq.Expressions.ExpressionType.Extension) {
			return this.RewriteExtensionAssignment(binaryExpression, stack);
		}
		if (nodeType === System.Linq.Expressions.ExpressionType.Index) {
			return this.RewriteIndexAssignment(binaryExpression, stack);
		}
	}
	throw $asm08.System.Core.Error.InvalidLvalue(binaryExpression.Left.NodeType);
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.prototype.RewriteExtensionAssignment = function (node, stack) {
	node = System.Linq.Expressions.Expression.Assign(node.Left.ReduceExtensions(), node.Right);
	var result = this.RewriteAssignBinaryExpression(node, stack).MemberwiseClone();
	return new $asm08.System.Linq.Expressions.Compiler.StackSpiller.Result((result.Action | System.Linq.Expressions.Compiler.StackSpiller.RewriteAction.Copy), result.Node);
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.RewriteLambdaExpression = function (expr, stack) {
	var lambdaExpression = JSIL.Cast(expr, System.Linq.Expressions.LambdaExpression);
	expr = $asm08.System.Linq.Expressions.Compiler.StackSpiller.AnalyzeLambda(lambdaExpression);
	var action = (expr === lambdaExpression) ? System.Linq.Expressions.Compiler.StackSpiller.RewriteAction.None : System.Linq.Expressions.Compiler.StackSpiller.RewriteAction.Copy;
	return new $asm08.System.Linq.Expressions.Compiler.StackSpiller.Result(action, expr);
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.prototype.RewriteConditionalExpression = function (expr, stack) {
	var conditionalExpression = JSIL.Cast(expr, System.Linq.Expressions.ConditionalExpression);
	var result = this.RewriteExpression(conditionalExpression.Test, stack).MemberwiseClone();
	var result2 = this.RewriteExpression(conditionalExpression.IfTrue, stack).MemberwiseClone();
	var result3 = this.RewriteExpression(conditionalExpression.IfFalse, stack).MemberwiseClone();
	var rewriteAction = ((result.Action | result2.Action) | result3.Action);
	if (JSIL.Cast(rewriteAction, System.Boolean)) {
		expr = System.Linq.Expressions.Expression.Condition$1(result.Node, result2.Node, result3.Node, conditionalExpression.Type);
	}
	return new $asm08.System.Linq.Expressions.Compiler.StackSpiller.Result(rewriteAction, expr);
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.prototype.RewriteMemberAssignment = function (node, stack) {
	var memberExpression = JSIL.Cast(node.Left, System.Linq.Expressions.MemberExpression);
	var childRewriter = new $asm08.System.Linq.Expressions.Compiler.StackSpiller.ChildRewriter(this, stack, 2);
	childRewriter.Add$0(memberExpression.Expression);
	childRewriter.Add$0(node.Right);
	if (childRewriter.Action === (System.Linq.Expressions.Compiler.StackSpiller.RewriteAction.Copy | System.Linq.Expressions.Compiler.StackSpiller.RewriteAction.SpillStack)) {
		$asm08.System.Linq.Expressions.Compiler.StackSpiller.RequireNotRefInstance(memberExpression.Expression);
	}
	if (childRewriter.Rewrite) {
		return childRewriter.Finish(new $asm08.System.Linq.Expressions.AssignBinaryExpression(System.Linq.Expressions.MemberExpression.Make(childRewriter.get_Item$0(0), memberExpression.Member), childRewriter.get_Item$0(1)));
	}
	return new $asm08.System.Linq.Expressions.Compiler.StackSpiller.Result(System.Linq.Expressions.Compiler.StackSpiller.RewriteAction.None, node);
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.prototype.RewriteMemberExpression = function (expr, stack) {
	var memberExpression = JSIL.Cast(expr, System.Linq.Expressions.MemberExpression);
	var result = this.RewriteExpression(memberExpression.Expression, stack).MemberwiseClone();
	if (result.Action !== 0) {
		if (!((result.Action !== (System.Linq.Expressions.Compiler.StackSpiller.RewriteAction.Copy | System.Linq.Expressions.Compiler.StackSpiller.RewriteAction.SpillStack)) || (memberExpression.Member.MemberType !== System.Reflection.MemberTypes.Property))) {
			$asm08.System.Linq.Expressions.Compiler.StackSpiller.RequireNotRefInstance(memberExpression.Expression);
		}
		expr = System.Linq.Expressions.MemberExpression.Make(result.Node, memberExpression.Member);
	}
	return new $asm08.System.Linq.Expressions.Compiler.StackSpiller.Result(result.Action, expr);
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.prototype.RewriteIndexExpression = function (expr, stack) {
	var indexExpression = JSIL.Cast(expr, System.Linq.Expressions.IndexExpression);
	var childRewriter = new $asm08.System.Linq.Expressions.Compiler.StackSpiller.ChildRewriter(this, stack, (indexExpression.Arguments.Count + 1));
	childRewriter.Add$0(indexExpression.Object);
	childRewriter.Add$1(indexExpression.Arguments);
	if (childRewriter.Action === (System.Linq.Expressions.Compiler.StackSpiller.RewriteAction.Copy | System.Linq.Expressions.Compiler.StackSpiller.RewriteAction.SpillStack)) {
		$asm08.System.Linq.Expressions.Compiler.StackSpiller.RequireNotRefInstance(indexExpression.Object);
	}
	if (childRewriter.Rewrite) {
		expr = new System.Linq.Expressions.IndexExpression(childRewriter.get_Item$0(0), indexExpression.Indexer, JSIL.Cast(childRewriter.get_Item$1(1, -1), System.Collections.Generic.IList$b1.Of(System.Linq.Expressions.Expression)));
	}
	return childRewriter.Finish(expr);
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.prototype.RewriteMethodCallExpression = function (expr, stack) {
	var methodCallExpression = JSIL.Cast(expr, System.Linq.Expressions.MethodCallExpression);
	var childRewriter = new $asm08.System.Linq.Expressions.Compiler.StackSpiller.ChildRewriter(this, stack, (methodCallExpression.Arguments.Count + 1));
	childRewriter.Add$0(methodCallExpression.Object);
	childRewriter.AddArguments(methodCallExpression);
	if (childRewriter.Action === (System.Linq.Expressions.Compiler.StackSpiller.RewriteAction.Copy | System.Linq.Expressions.Compiler.StackSpiller.RewriteAction.SpillStack)) {
		$asm08.System.Linq.Expressions.Compiler.StackSpiller.RequireNotRefInstance(methodCallExpression.Object);
		$asm08.System.Linq.Expressions.Compiler.StackSpiller.RequireNoRefArgs(methodCallExpression.Method);
	}
	return childRewriter.Finish(childRewriter.Rewrite ? methodCallExpression.Rewrite(childRewriter.get_Item$0(0), JSIL.Cast(childRewriter.get_Item$1(1, -1), System.Collections.Generic.IList$b1.Of(System.Linq.Expressions.Expression))) : expr);
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.prototype.RewriteNewArrayExpression = function (expr, stack) {
	var newArrayExpression = JSIL.Cast(expr, System.Linq.Expressions.NewArrayExpression);
	if (newArrayExpression.NodeType === System.Linq.Expressions.ExpressionType.NewArrayInit) {
		stack = System.Linq.Expressions.Compiler.StackSpiller.Stack.NonEmpty;
	}
	var childRewriter = new $asm08.System.Linq.Expressions.Compiler.StackSpiller.ChildRewriter(this, stack, newArrayExpression.Expressions.Count);
	childRewriter.Add$1(newArrayExpression.Expressions);
	if (childRewriter.Rewrite) {
		var elementType = newArrayExpression.Type.GetElementType();
		if (newArrayExpression.NodeType === System.Linq.Expressions.ExpressionType.NewArrayInit) {
			expr = System.Linq.Expressions.Expression.NewArrayInit$0(elementType, childRewriter.get_Item$1(0, -1));
		} else {
			expr = System.Linq.Expressions.Expression.NewArrayBounds$0(elementType, childRewriter.get_Item$1(0, -1));
		}
	}
	return childRewriter.Finish(expr);
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.prototype.RewriteInvocationExpression = function (expr, stack) {
	var invocationExpression = JSIL.Cast(expr, System.Linq.Expressions.InvocationExpression);
	var lambdaExpression = invocationExpression.LambdaOperand;
	if (lambdaExpression !== null) {
		var childRewriter = new $asm08.System.Linq.Expressions.Compiler.StackSpiller.ChildRewriter(this, stack, invocationExpression.Arguments.Count);
		childRewriter.Add$1(invocationExpression.Arguments);
		if (childRewriter.Action === (System.Linq.Expressions.Compiler.StackSpiller.RewriteAction.Copy | System.Linq.Expressions.Compiler.StackSpiller.RewriteAction.SpillStack)) {
			$asm08.System.Linq.Expressions.Compiler.StackSpiller.RequireNoRefArgs(System.Linq.Expressions.Expression.GetInvokeMethod(invocationExpression.Expression));
		}
		var stackSpiller = new $asm08.System.Linq.Expressions.Compiler.StackSpiller(stack);
		lambdaExpression = lambdaExpression.Accept(stackSpiller);
		if (!(!childRewriter.Rewrite && (stackSpiller._lambdaRewrite === 0))) {
			invocationExpression = new System.Linq.Expressions.InvocationExpression(lambdaExpression, JSIL.Cast(childRewriter.get_Item$1(0, -1), System.Collections.Generic.IList$b1.Of(System.Linq.Expressions.Expression)), invocationExpression.Type);
		}
		var result = childRewriter.Finish(invocationExpression).MemberwiseClone();
		return new $asm08.System.Linq.Expressions.Compiler.StackSpiller.Result((result.Action | stackSpiller._lambdaRewrite), result.Node);
	}
	childRewriter = new $asm08.System.Linq.Expressions.Compiler.StackSpiller.ChildRewriter(this, stack, (invocationExpression.Arguments.Count + 1));
	childRewriter.Add$0(invocationExpression.Expression);
	childRewriter.Add$1(invocationExpression.Arguments);
	if (childRewriter.Action === (System.Linq.Expressions.Compiler.StackSpiller.RewriteAction.Copy | System.Linq.Expressions.Compiler.StackSpiller.RewriteAction.SpillStack)) {
		$asm08.System.Linq.Expressions.Compiler.StackSpiller.RequireNoRefArgs(System.Linq.Expressions.Expression.GetInvokeMethod(invocationExpression.Expression));
	}
	return childRewriter.Finish(childRewriter.Rewrite ? new System.Linq.Expressions.InvocationExpression(childRewriter.get_Item$0(0), JSIL.Cast(childRewriter.get_Item$1(1, -1), System.Collections.Generic.IList$b1.Of(System.Linq.Expressions.Expression)), invocationExpression.Type) : expr);
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.prototype.RewriteNewExpression = function (expr, stack) {
	var newExpression = JSIL.Cast(expr, System.Linq.Expressions.NewExpression);
	var childRewriter = new $asm08.System.Linq.Expressions.Compiler.StackSpiller.ChildRewriter(this, stack, newExpression.Arguments.Count);
	childRewriter.AddArguments(newExpression);
	if (childRewriter.Action === (System.Linq.Expressions.Compiler.StackSpiller.RewriteAction.Copy | System.Linq.Expressions.Compiler.StackSpiller.RewriteAction.SpillStack)) {
		$asm08.System.Linq.Expressions.Compiler.StackSpiller.RequireNoRefArgs(newExpression.Constructor);
	}
	return childRewriter.Finish(childRewriter.Rewrite ? new System.Linq.Expressions.NewExpression(newExpression.Constructor, JSIL.Cast(childRewriter.get_Item$1(0, -1), System.Collections.Generic.IList$b1.Of(System.Linq.Expressions.Expression)), newExpression.Members) : expr);
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.prototype.RewriteTypeBinaryExpression = function (expr, stack) {
	var typeBinaryExpression = JSIL.Cast(expr, System.Linq.Expressions.TypeBinaryExpression);
	var result = this.RewriteExpression(typeBinaryExpression.Expression, stack).MemberwiseClone();
	if (result.Action !== 0) {
		if (typeBinaryExpression.NodeType === System.Linq.Expressions.ExpressionType.TypeIs) {
			expr = System.Linq.Expressions.Expression.TypeIs(result.Node, typeBinaryExpression.TypeOperand);
		} else {
			expr = System.Linq.Expressions.Expression.TypeEqual(result.Node, typeBinaryExpression.TypeOperand);
		}
	}
	return new $asm08.System.Linq.Expressions.Compiler.StackSpiller.Result(result.Action, expr);
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.prototype.RewriteThrowUnaryExpression = function (expr, stack) {
	var unaryExpression = JSIL.Cast(expr, System.Linq.Expressions.UnaryExpression);
	var result = this.RewriteExpressionFreeTemps(unaryExpression.Operand, System.Linq.Expressions.Compiler.StackSpiller.Stack.Empty).MemberwiseClone();
	var rewriteAction = result.Action;
	if (JSIL.Cast(stack, System.Boolean)) {
		rewriteAction = (System.Linq.Expressions.Compiler.StackSpiller.RewriteAction.Copy | System.Linq.Expressions.Compiler.StackSpiller.RewriteAction.SpillStack);
	}
	if (JSIL.Cast(rewriteAction, System.Boolean)) {
		expr = System.Linq.Expressions.Expression.Throw$1(result.Node, unaryExpression.Type);
	}
	return new $asm08.System.Linq.Expressions.Compiler.StackSpiller.Result(rewriteAction, expr);
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.prototype.RewriteUnaryExpression = function (expr, stack) {
	var unaryExpression = JSIL.Cast(expr, System.Linq.Expressions.UnaryExpression);
	var result = this.RewriteExpression(unaryExpression.Operand, stack).MemberwiseClone();
	if (result.Action === (System.Linq.Expressions.Compiler.StackSpiller.RewriteAction.Copy | System.Linq.Expressions.Compiler.StackSpiller.RewriteAction.SpillStack)) {
		$asm08.System.Linq.Expressions.Compiler.StackSpiller.RequireNoRefArgs(unaryExpression.Method);
	}
	if (result.Action !== 0) {
		expr = new System.Linq.Expressions.UnaryExpression(unaryExpression.NodeType, result.Node, unaryExpression.Type, unaryExpression.Method);
	}
	return new $asm08.System.Linq.Expressions.Compiler.StackSpiller.Result(result.Action, expr);
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.prototype.RewriteListInitExpression = function (expr, stack) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				var listInitExpression = JSIL.Cast(expr, System.Linq.Expressions.ListInitExpression);
				var result = this.RewriteExpression(listInitExpression.NewExpression, stack).MemberwiseClone();
				var node = result.Node;
				var rewriteAction = result.Action;
				var initializers = listInitExpression.Initializers;
				var array = JSIL.Array.New($asm08.System.Linq.Expressions.Compiler.StackSpiller.ChildRewriter, initializers.Count);
			__loop0__: 
				for (var i = 0; i < initializers.Count; ++i) {
					var elementInit = initializers.get_Item(i);
					var childRewriter = new $asm08.System.Linq.Expressions.Compiler.StackSpiller.ChildRewriter(this, System.Linq.Expressions.Compiler.StackSpiller.Stack.NonEmpty, elementInit.Arguments.Count);
					childRewriter.Add$1(elementInit.Arguments);
					rewriteAction = (rewriteAction | childRewriter.Action);
					array[i] = childRewriter;
				}
				switch (Number(rewriteAction)) {
					case 0: 
						__label0__ = "IL_1D3";
						continue __step0__;
					case 1: 
						var array2 = JSIL.Array.New(System.Linq.Expressions.ElementInit, initializers.Count);
					__loop1__: 
						for (var j = 0; j < initializers.Count; ++j) {
							var childRewriter2 = array[j];
							if (!JSIL.Cast(childRewriter2.Action, System.Boolean)) {
								array2[j] = initializers.get_Item(j);
							} else {
								array2[j] = System.Linq.Expressions.Expression.ElementInit$0(initializers.get_Item(j).AddMethod, childRewriter2.get_Item$1(0, -1));
							}
						}
						expr = System.Linq.Expressions.Expression.ListInit$5(JSIL.Cast(node, System.Linq.Expressions.NewExpression), new ($asm08.System.Runtime.CompilerServices.TrueReadOnlyCollection$b1.Of(System.Linq.Expressions.ElementInit)) (array2));
						__label0__ = "IL_1D3";
						continue __step0__;
					case 3: 
						$asm08.System.Linq.Expressions.Compiler.StackSpiller.RequireNotRefInstance(listInitExpression.NewExpression);
						var parameterExpression = this.MakeTemp(node.Type);
						var array3 = JSIL.Array.New(System.Linq.Expressions.Expression, (initializers.Count + 2));
						array3[0] = System.Linq.Expressions.Expression.Assign(parameterExpression, node);
					__loop2__: 
						for (var k = 0; k < initializers.Count; ++k) {
							var childRewriter3 = array[k];
							var result2 = childRewriter3.Finish(System.Linq.Expressions.Expression.Call$8(parameterExpression, initializers.get_Item(k).AddMethod, childRewriter3.get_Item$1(0, -1))).MemberwiseClone();
							array3[(k + 1)] = result2.Node;
						}
						array3[(initializers.Count + 1)] = parameterExpression;
						expr = $asm08.System.Linq.Expressions.Compiler.StackSpiller.MakeBlock$0(array3);
						__label0__ = "IL_1D3";
						continue __step0__;
				}
				throw $asm08.System.Dynamic.Utils.ContractUtils.Unreachable;
				__label0__ = "IL_1D3";
				continue __step0__;
				break;
			case "IL_1D3":
				return new $asm08.System.Linq.Expressions.Compiler.StackSpiller.Result(rewriteAction, expr);
				break __step0__;
		}
	}
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.prototype.RewriteMemberInitExpression = function (expr, stack) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				var memberInitExpression = JSIL.Cast(expr, System.Linq.Expressions.MemberInitExpression);
				var result = this.RewriteExpression(memberInitExpression.NewExpression, stack).MemberwiseClone();
				var node = result.Node;
				var rewriteAction = result.Action;
				var bindings = memberInitExpression.Bindings;
				var array = JSIL.Array.New($asm08.System.Linq.Expressions.Compiler.StackSpiller.BindingRewriter, bindings.Count);
			__loop0__: 
				for (var i = 0; i < bindings.Count; ++i) {
					var binding = bindings.get_Item(i);
					var bindingRewriter = $asm08.System.Linq.Expressions.Compiler.StackSpiller.BindingRewriter.Create(binding, this, System.Linq.Expressions.Compiler.StackSpiller.Stack.NonEmpty);
					array[i] = bindingRewriter;
					rewriteAction = (rewriteAction | bindingRewriter.Action);
				}
				switch (Number(rewriteAction)) {
					case 0: 
						__label0__ = "IL_168";
						continue __step0__;
					case 1: 
						var array2 = JSIL.Array.New(System.Linq.Expressions.MemberBinding, bindings.Count);
					__loop1__: 
						for (var j = 0; j < bindings.Count; ++j) {
							array2[j] = array[j].AsBinding();
						}
						expr = System.Linq.Expressions.Expression.MemberInit$1(JSIL.Cast(node, System.Linq.Expressions.NewExpression), new ($asm08.System.Runtime.CompilerServices.TrueReadOnlyCollection$b1.Of(System.Linq.Expressions.MemberBinding)) (array2));
						__label0__ = "IL_168";
						continue __step0__;
					case 3: 
						$asm08.System.Linq.Expressions.Compiler.StackSpiller.RequireNotRefInstance(memberInitExpression.NewExpression);
						var parameterExpression = this.MakeTemp(node.Type);
						var array3 = JSIL.Array.New(System.Linq.Expressions.Expression, (bindings.Count + 2));
						array3[0] = System.Linq.Expressions.Expression.Assign(parameterExpression, node);
					__loop2__: 
						for (var k = 0; k < bindings.Count; ++k) {
							var expression = array[k].AsExpression(parameterExpression);
							array3[(k + 1)] = expression;
						}
						array3[(bindings.Count + 1)] = parameterExpression;
						expr = $asm08.System.Linq.Expressions.Compiler.StackSpiller.MakeBlock$0(array3);
						__label0__ = "IL_168";
						continue __step0__;
				}
				throw $asm08.System.Dynamic.Utils.ContractUtils.Unreachable;
				__label0__ = "IL_168";
				continue __step0__;
				break;
			case "IL_168":
				return new $asm08.System.Linq.Expressions.Compiler.StackSpiller.Result(rewriteAction, expr);
				break __step0__;
		}
	}
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.prototype.RewriteBlockExpression = function (expr, stack) {
	var blockExpression = JSIL.Cast(expr, System.Linq.Expressions.BlockExpression);
	var expressionCount = blockExpression.ExpressionCount;
	var rewriteAction = System.Linq.Expressions.Compiler.StackSpiller.RewriteAction.None;
	var array = null;
__loop0__: 
	for (var i = 0; i < expressionCount; ++i) {
		var expression = blockExpression.GetExpression(i);
		var result = this.RewriteExpression(expression, stack).MemberwiseClone();
		rewriteAction = (rewriteAction | result.Action);
		if (!(array || (result.Action === 0))) {
			array = $asm08.System.Linq.Expressions.Compiler.StackSpiller.Clone$b1(System.Linq.Expressions.Expression)(blockExpression.Expressions, i);
		}
		if (array !== null) {
			array[i] = result.Node;
		}
	}
	if (JSIL.Cast(rewriteAction, System.Boolean)) {
		expr = blockExpression.Rewrite(null, array);
	}
	return new $asm08.System.Linq.Expressions.Compiler.StackSpiller.Result(rewriteAction, expr);
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.prototype.RewriteLabelExpression = function (expr, stack) {
	var labelExpression = JSIL.Cast(expr, System.Linq.Expressions.LabelExpression);
	var result = this.RewriteExpression(labelExpression.DefaultValue, stack).MemberwiseClone();
	if (result.Action !== 0) {
		expr = System.Linq.Expressions.Expression.Label$1(labelExpression.Target, result.Node);
	}
	return new $asm08.System.Linq.Expressions.Compiler.StackSpiller.Result(result.Action, expr);
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.prototype.RewriteLoopExpression = function (expr, stack) {
	var loopExpression = JSIL.Cast(expr, System.Linq.Expressions.LoopExpression);
	var result = this.RewriteExpression(loopExpression.Body, System.Linq.Expressions.Compiler.StackSpiller.Stack.Empty).MemberwiseClone();
	var rewriteAction = result.Action;
	if (JSIL.Cast(stack, System.Boolean)) {
		rewriteAction = (System.Linq.Expressions.Compiler.StackSpiller.RewriteAction.Copy | System.Linq.Expressions.Compiler.StackSpiller.RewriteAction.SpillStack);
	}
	if (JSIL.Cast(rewriteAction, System.Boolean)) {
		expr = new System.Linq.Expressions.LoopExpression(result.Node, loopExpression.BreakLabel, loopExpression.ContinueLabel);
	}
	return new $asm08.System.Linq.Expressions.Compiler.StackSpiller.Result(rewriteAction, expr);
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.prototype.RewriteGotoExpression = function (expr, stack) {
	var gotoExpression = JSIL.Cast(expr, System.Linq.Expressions.GotoExpression);
	var result = this.RewriteExpressionFreeTemps(gotoExpression.Value, System.Linq.Expressions.Compiler.StackSpiller.Stack.Empty).MemberwiseClone();
	var rewriteAction = result.Action;
	if (JSIL.Cast(stack, System.Boolean)) {
		rewriteAction = (System.Linq.Expressions.Compiler.StackSpiller.RewriteAction.Copy | System.Linq.Expressions.Compiler.StackSpiller.RewriteAction.SpillStack);
	}
	if (JSIL.Cast(rewriteAction, System.Boolean)) {
		expr = System.Linq.Expressions.Expression.MakeGoto(gotoExpression.Kind, gotoExpression.Target, result.Node, gotoExpression.Type);
	}
	return new $asm08.System.Linq.Expressions.Compiler.StackSpiller.Result(rewriteAction, expr);
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.prototype.RewriteSwitchExpression = function (expr, stack) {
	var switchExpression = JSIL.Cast(expr, System.Linq.Expressions.SwitchExpression);
	var result = this.RewriteExpressionFreeTemps(switchExpression.SwitchValue, stack).MemberwiseClone();
	var rewriteAction = result.Action;
	var readOnlyCollection = switchExpression.Cases;
	var array = null;
__loop0__: 
	for (var i = 0; i < readOnlyCollection.Count; ++i) {
		var switchCase = readOnlyCollection.get_Item(i);
		var array2 = null;
		var readOnlyCollection2 = switchCase.TestValues;
	__loop1__: 
		for (var j = 0; j < readOnlyCollection2.Count; ++j) {
			var result2 = this.RewriteExpression(readOnlyCollection2.get_Item(j), stack).MemberwiseClone();
			rewriteAction = (rewriteAction | result2.Action);
			if (!(array2 || (result2.Action === 0))) {
				array2 = $asm08.System.Linq.Expressions.Compiler.StackSpiller.Clone$b1(System.Linq.Expressions.Expression)(readOnlyCollection2, j);
			}
			if (array2 !== null) {
				array2[j] = result2.Node;
			}
		}
		var result3 = this.RewriteExpression(switchCase.Body, stack).MemberwiseClone();
		rewriteAction = (rewriteAction | result3.Action);
		if (!((result3.Action === 0) && (array2 === null))) {
			if (array2 !== null) {
				readOnlyCollection2 = new (System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(System.Linq.Expressions.Expression)) (JSIL.Cast(array2, System.Collections.Generic.IList$b1.Of(System.Linq.Expressions.Expression)));
			}
			switchCase = new System.Linq.Expressions.SwitchCase(result3.Node, readOnlyCollection2);
			if (array === null) {
				array = $asm08.System.Linq.Expressions.Compiler.StackSpiller.Clone$b1(System.Linq.Expressions.SwitchCase)(readOnlyCollection, i);
			}
		}
		if (array !== null) {
			array[i] = switchCase;
		}
	}
	var result4 = this.RewriteExpression(switchExpression.DefaultBody, stack).MemberwiseClone();
	rewriteAction = (rewriteAction | result4.Action);
	if (JSIL.Cast(rewriteAction, System.Boolean)) {
		if (array !== null) {
			readOnlyCollection = new (System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(System.Linq.Expressions.SwitchCase)) (JSIL.Cast(array, System.Collections.Generic.IList$b1.Of(System.Linq.Expressions.SwitchCase)));
		}
		expr = new System.Linq.Expressions.SwitchExpression(switchExpression.Type, result.Node, result4.Node, switchExpression.Comparison, readOnlyCollection);
	}
	return new $asm08.System.Linq.Expressions.Compiler.StackSpiller.Result(rewriteAction, expr);
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.prototype.RewriteTryExpression = function (expr, stack) {
	var tryExpression = JSIL.Cast(expr, System.Linq.Expressions.TryExpression);
	var result = this.RewriteExpression(tryExpression.Body, System.Linq.Expressions.Compiler.StackSpiller.Stack.Empty).MemberwiseClone();
	var readOnlyCollection = tryExpression.Handlers;
	var array = null;
	var rewriteAction = result.Action;
	if (readOnlyCollection !== null) {
	__loop0__: 
		for (var i = 0; i < readOnlyCollection.Count; ++i) {
			var rewriteAction2 = result.Action;
			var catchBlock = readOnlyCollection.get_Item(i);
			var filter = catchBlock.Filter;
			if (catchBlock.Filter !== null) {
				var result2 = this.RewriteExpression(catchBlock.Filter, System.Linq.Expressions.Compiler.StackSpiller.Stack.Empty).MemberwiseClone();
				rewriteAction = (rewriteAction | result2.Action);
				rewriteAction2 = (rewriteAction2 | result2.Action);
				filter = result2.Node;
			}
			var result3 = this.RewriteExpression(catchBlock.Body, System.Linq.Expressions.Compiler.StackSpiller.Stack.Empty).MemberwiseClone();
			rewriteAction = (rewriteAction | result3.Action);
			rewriteAction2 = (rewriteAction2 | result3.Action);
			if (JSIL.Cast(rewriteAction2, System.Boolean)) {
				catchBlock = System.Linq.Expressions.Expression.MakeCatchBlock(catchBlock.Test, catchBlock.Variable, result3.Node, filter);
				if (array === null) {
					array = $asm08.System.Linq.Expressions.Compiler.StackSpiller.Clone$b1(System.Linq.Expressions.CatchBlock)(readOnlyCollection, i);
				}
			}
			if (array !== null) {
				array[i] = catchBlock;
			}
		}
	}
	var result4 = this.RewriteExpression(tryExpression.Fault, System.Linq.Expressions.Compiler.StackSpiller.Stack.Empty).MemberwiseClone();
	rewriteAction = (rewriteAction | result4.Action);
	var result5 = this.RewriteExpression(tryExpression.Finally, System.Linq.Expressions.Compiler.StackSpiller.Stack.Empty).MemberwiseClone();
	rewriteAction = (rewriteAction | result5.Action);
	if (JSIL.Cast(stack, System.Boolean)) {
		rewriteAction = (System.Linq.Expressions.Compiler.StackSpiller.RewriteAction.Copy | System.Linq.Expressions.Compiler.StackSpiller.RewriteAction.SpillStack);
	}
	if (JSIL.Cast(rewriteAction, System.Boolean)) {
		if (array !== null) {
			readOnlyCollection = new (System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(System.Linq.Expressions.CatchBlock)) (JSIL.Cast(array, System.Collections.Generic.IList$b1.Of(System.Linq.Expressions.CatchBlock)));
		}
		expr = new System.Linq.Expressions.TryExpression(tryExpression.Type, result.Node, result5.Node, result4.Node, readOnlyCollection);
	}
	return new $asm08.System.Linq.Expressions.Compiler.StackSpiller.Result(rewriteAction, expr);
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.prototype.RewriteExtensionExpression = function (expr, stack) {
	var result = this.RewriteExpression(expr.ReduceExtensions(), stack).MemberwiseClone();
	return new $asm08.System.Linq.Expressions.Compiler.StackSpiller.Result((result.Action | System.Linq.Expressions.Compiler.StackSpiller.RewriteAction.Copy), result.Node);
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.Clone$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, original, max) {
		var array = JSIL.Array.New(T, original.Count);
	__loop0__: 
		for (var i = 0; i < max; ++i) {
			array[i] = original.get_Item(i);
		}
		return array;
	}
);
$asm08.System.Linq.Expressions.Compiler.StackSpiller.RequireNoRefArgs = function (method) {
	if (method !== null) {
		if (System.Linq.Enumerable.Any$b1$1(System.Reflection.ParameterInfo)($asm08.System.Dynamic.Utils.TypeExtensions.GetParametersCached(method), function (p) {
					return p.ParameterType.IsByRef;
				})) {
			throw $asm08.System.Core.Error.TryNotSupportedForMethodsWithRefArgs(method);
		}
	}
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.RequireNotRefInstance = function (instance) {
	if (!((instance === null) || 
			!instance.Type.IsValueType || (System.Type.GetTypeCode(instance.Type) !== System.TypeCode.Object))) {
		throw $asm08.System.Core.Error.TryNotSupportedForValueTypeInstances(instance.Type);
	}
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.prototype.RewriteExpression = function (node, stack) {
	if (node === null) {
		return new $asm08.System.Linq.Expressions.Compiler.StackSpiller.Result(System.Linq.Expressions.Compiler.StackSpiller.RewriteAction.None, null);
	}
	switch (Number(node.NodeType)) {
		case 0: 
			var result = this.RewriteBinaryExpression(node, stack).MemberwiseClone();
			break;
		case 1: 
			result = this.RewriteBinaryExpression(node, stack).MemberwiseClone();
			break;
		case 2: 
			result = this.RewriteBinaryExpression(node, stack).MemberwiseClone();
			break;
		case 3: 
			result = this.RewriteLogicalBinaryExpression(node, stack).MemberwiseClone();
			break;
		case 4: 
			result = this.RewriteUnaryExpression(node, stack).MemberwiseClone();
			break;
		case 5: 
			result = this.RewriteBinaryExpression(node, stack).MemberwiseClone();
			break;
		case 6: 
			result = this.RewriteMethodCallExpression(node, stack).MemberwiseClone();
			break;
		case 7: 
			result = this.RewriteLogicalBinaryExpression(node, stack).MemberwiseClone();
			break;
		case 8: 
			result = this.RewriteConditionalExpression(node, stack).MemberwiseClone();
			break;
		case 9: 
		case 38: 
		case 40: 
		case 48: 
		case 51: 
		case 57: 
			return new $asm08.System.Linq.Expressions.Compiler.StackSpiller.Result(System.Linq.Expressions.Compiler.StackSpiller.RewriteAction.None, node);
		case 10: 
			result = this.RewriteUnaryExpression(node, stack).MemberwiseClone();
			break;
		case 11: 
			result = this.RewriteUnaryExpression(node, stack).MemberwiseClone();
			break;
		case 12: 
			result = this.RewriteBinaryExpression(node, stack).MemberwiseClone();
			break;
		case 13: 
			result = this.RewriteBinaryExpression(node, stack).MemberwiseClone();
			break;
		case 14: 
			result = this.RewriteBinaryExpression(node, stack).MemberwiseClone();
			break;
		case 15: 
			result = this.RewriteBinaryExpression(node, stack).MemberwiseClone();
			break;
		case 16: 
			result = this.RewriteBinaryExpression(node, stack).MemberwiseClone();
			break;
		case 17: 
			result = this.RewriteInvocationExpression(node, stack).MemberwiseClone();
			break;
		case 18: 
			result = $asm08.System.Linq.Expressions.Compiler.StackSpiller.RewriteLambdaExpression(node, stack).MemberwiseClone();
			break;
		case 19: 
			result = this.RewriteBinaryExpression(node, stack).MemberwiseClone();
			break;
		case 20: 
			result = this.RewriteBinaryExpression(node, stack).MemberwiseClone();
			break;
		case 21: 
			result = this.RewriteBinaryExpression(node, stack).MemberwiseClone();
			break;
		case 22: 
			result = this.RewriteListInitExpression(node, stack).MemberwiseClone();
			break;
		case 23: 
			result = this.RewriteMemberExpression(node, stack).MemberwiseClone();
			break;
		case 24: 
			result = this.RewriteMemberInitExpression(node, stack).MemberwiseClone();
			break;
		case 25: 
			result = this.RewriteBinaryExpression(node, stack).MemberwiseClone();
			break;
		case 26: 
			result = this.RewriteBinaryExpression(node, stack).MemberwiseClone();
			break;
		case 27: 
			result = this.RewriteBinaryExpression(node, stack).MemberwiseClone();
			break;
		case 28: 
			result = this.RewriteUnaryExpression(node, stack).MemberwiseClone();
			break;
		case 29: 
			result = this.RewriteUnaryExpression(node, stack).MemberwiseClone();
			break;
		case 30: 
			result = this.RewriteUnaryExpression(node, stack).MemberwiseClone();
			break;
		case 31: 
			result = this.RewriteNewExpression(node, stack).MemberwiseClone();
			break;
		case 32: 
			result = this.RewriteNewArrayExpression(node, stack).MemberwiseClone();
			break;
		case 33: 
			result = this.RewriteNewArrayExpression(node, stack).MemberwiseClone();
			break;
		case 34: 
			result = this.RewriteUnaryExpression(node, stack).MemberwiseClone();
			break;
		case 35: 
			result = this.RewriteBinaryExpression(node, stack).MemberwiseClone();
			break;
		case 36: 
			result = this.RewriteBinaryExpression(node, stack).MemberwiseClone();
			break;
		case 37: 
			result = this.RewriteLogicalBinaryExpression(node, stack).MemberwiseClone();
			break;
		case 39: 
			result = this.RewriteBinaryExpression(node, stack).MemberwiseClone();
			break;
		case 41: 
			result = this.RewriteBinaryExpression(node, stack).MemberwiseClone();
			break;
		case 42: 
			result = this.RewriteBinaryExpression(node, stack).MemberwiseClone();
			break;
		case 43: 
			result = this.RewriteBinaryExpression(node, stack).MemberwiseClone();
			break;
		case 44: 
			result = this.RewriteUnaryExpression(node, stack).MemberwiseClone();
			break;
		case 45: 
			result = this.RewriteTypeBinaryExpression(node, stack).MemberwiseClone();
			break;
		case 46: 
			result = this.RewriteAssignBinaryExpression(node, stack).MemberwiseClone();
			break;
		case 47: 
			result = this.RewriteBlockExpression(node, stack).MemberwiseClone();
			break;
		case 49: 
			result = this.RewriteUnaryExpression(node, stack).MemberwiseClone();
			break;
		case 50: 
			result = this.RewriteDynamicExpression(node, stack).MemberwiseClone();
			break;
		case 52: 
			result = this.RewriteExtensionExpression(node, stack).MemberwiseClone();
			break;
		case 53: 
			result = this.RewriteGotoExpression(node, stack).MemberwiseClone();
			break;
		case 54: 
			result = this.RewriteUnaryExpression(node, stack).MemberwiseClone();
			break;
		case 55: 
			result = this.RewriteIndexExpression(node, stack).MemberwiseClone();
			break;
		case 56: 
			result = this.RewriteLabelExpression(node, stack).MemberwiseClone();
			break;
		case 58: 
			result = this.RewriteLoopExpression(node, stack).MemberwiseClone();
			break;
		case 59: 
			result = this.RewriteSwitchExpression(node, stack).MemberwiseClone();
			break;
		case 60: 
			result = this.RewriteThrowUnaryExpression(node, stack).MemberwiseClone();
			break;
		case 61: 
			result = this.RewriteTryExpression(node, stack).MemberwiseClone();
			break;
		case 62: 
			result = this.RewriteUnaryExpression(node, stack).MemberwiseClone();
			break;
		case 63: 
		case 64: 
		case 65: 
		case 66: 
		case 67: 
		case 68: 
		case 69: 
		case 70: 
		case 71: 
		case 72: 
		case 73: 
		case 74: 
		case 75: 
		case 76: 
		case 77: 
		case 78: 
		case 79: 
		case 80: 
			result = this.RewriteReducibleExpression(node, stack).MemberwiseClone();
			break;
		case 81: 
			result = this.RewriteTypeBinaryExpression(node, stack).MemberwiseClone();
			break;
		case 82: 
			result = this.RewriteUnaryExpression(node, stack).MemberwiseClone();
			break;
		case 83: 
			result = this.RewriteUnaryExpression(node, stack).MemberwiseClone();
			break;
		case 84: 
			result = this.RewriteUnaryExpression(node, stack).MemberwiseClone();
			break;
		default: 
			throw $asm08.System.Dynamic.Utils.ContractUtils.Unreachable;
	}
	return result;
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.prototype.MakeTemp = function (type) {
	return this._tm.Temp(type);
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.prototype.Mark = function () {
	return this._tm.Mark();
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.prototype.Free = function (mark) {
	this._tm.Free(mark);
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.prototype.VerifyTemps = function () {
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.prototype.ToTemp = function (expression, /* ref */ save) {
	var parameterExpression = this.MakeTemp(expression.Type);
	save.value = System.Linq.Expressions.Expression.Assign(parameterExpression, expression);
	return parameterExpression;
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.MakeBlock$0 = function (expressions) {
	return $asm08.System.Linq.Expressions.Compiler.StackSpiller.MakeBlock$1(JSIL.Cast(expressions, System.Collections.Generic.IList$b1.Of(System.Linq.Expressions.Expression)));
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.MakeBlock$1 = function (expressions) {
	return new $asm08.System.Linq.Expressions.Compiler.SpilledExpressionBlock(expressions);
};
JSIL.OverloadedMethod(System.Linq.Expressions.Compiler.StackSpiller, "MakeBlock", [
		["MakeBlock$0", [System.Array.Of(System.Linq.Expressions.Expression)]], 
		["MakeBlock$1", [System.Collections.Generic.IList$b1.Of(System.Linq.Expressions.Expression)]]
	]);
$asm08.System.Linq.Expressions.Compiler.StackSpiller.prototype._tm = null;
$asm08.System.Linq.Expressions.Compiler.StackSpiller.prototype._startingStack = 0;
$asm08.System.Linq.Expressions.Compiler.StackSpiller.prototype._lambdaRewrite = 0;
$asm08.System.Linq.Expressions.Compiler.StackSpiller.$CachedAnonymousMethodDelegate1 = null;

$asm08.System.Linq.Expressions.Compiler.StackSpiller.BindingRewriter.prototype._ctor = function (binding, spiller) {
	System.Object.prototype._ctor.call(this);
	this._binding = binding;
	this._spiller = spiller;
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.BindingRewriter.prototype.get_Action = function () {
	return this._action;
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.BindingRewriter.Create = function (binding, spiller, stack) {
	switch (Number(binding.BindingType)) {
		case 0: 
			var binding2 = JSIL.Cast(binding, System.Linq.Expressions.MemberAssignment);
			return new $asm08.System.Linq.Expressions.Compiler.StackSpiller.MemberAssignmentRewriter(binding2, spiller, stack);
		case 1: 
			var binding3 = JSIL.Cast(binding, System.Linq.Expressions.MemberMemberBinding);
			return new $asm08.System.Linq.Expressions.Compiler.StackSpiller.MemberMemberBindingRewriter(binding3, spiller, stack);
		case 2: 
			var binding4 = JSIL.Cast(binding, System.Linq.Expressions.MemberListBinding);
			return new $asm08.System.Linq.Expressions.Compiler.StackSpiller.ListBindingRewriter(binding4, spiller, stack);
		default: 
			throw $asm08.System.Core.Error.UnhandledBinding();
	}
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.Compiler.StackSpiller.BindingRewriter.prototype, "Action", 
	$asm08.System.Linq.Expressions.Compiler.StackSpiller.BindingRewriter.prototype.get_Action, null);
$asm08.System.Linq.Expressions.Compiler.StackSpiller.BindingRewriter.prototype._binding = null;
$asm08.System.Linq.Expressions.Compiler.StackSpiller.BindingRewriter.prototype._action = 0;
$asm08.System.Linq.Expressions.Compiler.StackSpiller.BindingRewriter.prototype._spiller = null;

$asm08.System.Linq.Expressions.Compiler.StackSpiller.MemberMemberBindingRewriter.prototype._ctor = function (binding, spiller, stack) {
	$asm08.System.Linq.Expressions.Compiler.StackSpiller.BindingRewriter.prototype._ctor.call(this, binding, spiller);
	this._bindings = binding.Bindings;
	this._bindingRewriters = JSIL.Array.New($asm08.System.Linq.Expressions.Compiler.StackSpiller.BindingRewriter, this._bindings.Count);
__loop0__: 
	for (var i = 0; i < this._bindings.Count; ++i) {
		var bindingRewriter = $asm08.System.Linq.Expressions.Compiler.StackSpiller.BindingRewriter.Create(this._bindings.get_Item(i), spiller, stack);
		this._action = (this._action | bindingRewriter.Action);
		this._bindingRewriters[i] = bindingRewriter;
	}
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.MemberMemberBindingRewriter.prototype.AsBinding = function () {
	switch (Number(this._action)) {
		case 0: 
			return this._binding;
		case 1: 
			var array = JSIL.Array.New(System.Linq.Expressions.MemberBinding, this._bindings.Count);
		__loop0__: 
			for (var i = 0; i < this._bindings.Count; ++i) {
				array[i] = this._bindingRewriters[i].AsBinding();
			}
			return System.Linq.Expressions.Expression.MemberBind$1(this._binding.Member, new ($asm08.System.Runtime.CompilerServices.TrueReadOnlyCollection$b1.Of(System.Linq.Expressions.MemberBinding)) (array));
		default: 
			throw $asm08.System.Dynamic.Utils.ContractUtils.Unreachable;
	}
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.MemberMemberBindingRewriter.prototype.AsExpression = function (target) {
	if (!(!target.Type.IsValueType || (JSIL.TryCast(this._binding.Member, System.Reflection.PropertyInfo) === null))) {
		throw $asm08.System.Core.Error.CannotAutoInitializeValueTypeMemberThroughProperty(this._binding.Member);
	}
	$asm08.System.Linq.Expressions.Compiler.StackSpiller.RequireNotRefInstance(target);
	var memberExpression = System.Linq.Expressions.Expression.MakeMemberAccess(target, this._binding.Member);
	var parameterExpression = this._spiller.MakeTemp(memberExpression.Type);
	var array = JSIL.Array.New(System.Linq.Expressions.Expression, (this._bindings.Count + 2));
	array[0] = System.Linq.Expressions.Expression.Assign(parameterExpression, memberExpression);
__loop0__: 
	for (var i = 0; i < this._bindings.Count; ++i) {
		array[(i + 1)] = this._bindingRewriters[i].AsExpression(parameterExpression);
	}
	if (parameterExpression.Type.IsValueType) {
		array[(this._bindings.Count + 1)] = System.Linq.Expressions.Expression.Block$6(System.Void, JSIL.Array.New(System.Linq.Expressions.Expression, [System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression.MakeMemberAccess(target, this._binding.Member), parameterExpression)]));
	} else {
		array[(this._bindings.Count + 1)] = System.Linq.Expressions.Expression.Empty();
	}
	return $asm08.System.Linq.Expressions.Compiler.StackSpiller.MakeBlock$0(array);
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.MemberMemberBindingRewriter.prototype._bindings = null;
$asm08.System.Linq.Expressions.Compiler.StackSpiller.MemberMemberBindingRewriter.prototype._bindingRewriters = null;

$asm08.System.Linq.Expressions.Compiler.StackSpiller.ListBindingRewriter.prototype._ctor = function (binding, spiller, stack) {
	$asm08.System.Linq.Expressions.Compiler.StackSpiller.BindingRewriter.prototype._ctor.call(this, binding, spiller);
	this._inits = binding.Initializers;
	this._childRewriters = JSIL.Array.New($asm08.System.Linq.Expressions.Compiler.StackSpiller.ChildRewriter, this._inits.Count);
__loop0__: 
	for (var i = 0; i < this._inits.Count; ++i) {
		var elementInit = this._inits.get_Item(i);
		var childRewriter = new $asm08.System.Linq.Expressions.Compiler.StackSpiller.ChildRewriter(spiller, stack, elementInit.Arguments.Count);
		childRewriter.Add$1(elementInit.Arguments);
		this._action = (this._action | childRewriter.Action);
		this._childRewriters[i] = childRewriter;
	}
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.ListBindingRewriter.prototype.AsBinding = function () {
	switch (Number(this._action)) {
		case 0: 
			return this._binding;
		case 1: 
			var array = JSIL.Array.New(System.Linq.Expressions.ElementInit, this._inits.Count);
		__loop0__: 
			for (var i = 0; i < this._inits.Count; ++i) {
				var childRewriter = this._childRewriters[i];
				if (!JSIL.Cast(childRewriter.Action, System.Boolean)) {
					array[i] = this._inits.get_Item(i);
				} else {
					array[i] = System.Linq.Expressions.Expression.ElementInit$0(this._inits.get_Item(i).AddMethod, childRewriter.get_Item$1(0, -1));
				}
			}
			return System.Linq.Expressions.Expression.ListBind$1(this._binding.Member, new ($asm08.System.Runtime.CompilerServices.TrueReadOnlyCollection$b1.Of(System.Linq.Expressions.ElementInit)) (array));
		default: 
			throw $asm08.System.Dynamic.Utils.ContractUtils.Unreachable;
	}
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.ListBindingRewriter.prototype.AsExpression = function (target) {
	if (!(!target.Type.IsValueType || (JSIL.TryCast(this._binding.Member, System.Reflection.PropertyInfo) === null))) {
		throw $asm08.System.Core.Error.CannotAutoInitializeValueTypeElementThroughProperty(this._binding.Member);
	}
	$asm08.System.Linq.Expressions.Compiler.StackSpiller.RequireNotRefInstance(target);
	var memberExpression = System.Linq.Expressions.Expression.MakeMemberAccess(target, this._binding.Member);
	var parameterExpression = this._spiller.MakeTemp(memberExpression.Type);
	var array = JSIL.Array.New(System.Linq.Expressions.Expression, (this._inits.Count + 2));
	array[0] = System.Linq.Expressions.Expression.Assign(parameterExpression, memberExpression);
__loop0__: 
	for (var i = 0; i < this._inits.Count; ++i) {
		var childRewriter = this._childRewriters[i];
		var result = childRewriter.Finish(System.Linq.Expressions.Expression.Call$8(parameterExpression, this._inits.get_Item(i).AddMethod, childRewriter.get_Item$1(0, -1))).MemberwiseClone();
		array[(i + 1)] = result.Node;
	}
	if (parameterExpression.Type.IsValueType) {
		array[(this._inits.Count + 1)] = System.Linq.Expressions.Expression.Block$6(System.Void, JSIL.Array.New(System.Linq.Expressions.Expression, [System.Linq.Expressions.Expression.Assign(System.Linq.Expressions.Expression.MakeMemberAccess(target, this._binding.Member), parameterExpression)]));
	} else {
		array[(this._inits.Count + 1)] = System.Linq.Expressions.Expression.Empty();
	}
	return $asm08.System.Linq.Expressions.Compiler.StackSpiller.MakeBlock$0(array);
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.ListBindingRewriter.prototype._inits = null;
$asm08.System.Linq.Expressions.Compiler.StackSpiller.ListBindingRewriter.prototype._childRewriters = null;

$asm08.System.Linq.Expressions.Compiler.StackSpiller.MemberAssignmentRewriter.prototype._ctor = function (binding, spiller, stack) {
	$asm08.System.Linq.Expressions.Compiler.StackSpiller.BindingRewriter.prototype._ctor.call(this, binding, spiller);
	var result = spiller.RewriteExpression(binding.Expression, stack).MemberwiseClone();
	this._action = result.Action;
	this._rhs = result.Node;
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.MemberAssignmentRewriter.prototype.AsBinding = function () {
	switch (Number(this._action)) {
		case 0: 
			return this._binding;
		case 1: 
			return System.Linq.Expressions.Expression.Bind$0(this._binding.Member, this._rhs);
		default: 
			throw $asm08.System.Dynamic.Utils.ContractUtils.Unreachable;
	}
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.MemberAssignmentRewriter.prototype.AsExpression = function (target) {
	$asm08.System.Linq.Expressions.Compiler.StackSpiller.RequireNotRefInstance(target);
	var memberExpression = System.Linq.Expressions.Expression.MakeMemberAccess(target, this._binding.Member);
	var parameterExpression = this._spiller.MakeTemp(memberExpression.Type);
	return $asm08.System.Linq.Expressions.Compiler.StackSpiller.MakeBlock$0(JSIL.Array.New(System.Linq.Expressions.Expression, [System.Linq.Expressions.Expression.Assign(parameterExpression, this._rhs), System.Linq.Expressions.Expression.Assign(memberExpression, parameterExpression), System.Linq.Expressions.Expression.Empty()]));
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.MemberAssignmentRewriter.prototype._rhs = null;

$asm08.System.Linq.Expressions.Compiler.StackSpiller.Result.prototype._ctor = function (action, node) {
	this.Action = action;
	this.Node = node;
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.Result.prototype.Action = 0;
$asm08.System.Linq.Expressions.Compiler.StackSpiller.Result.prototype.Node = null;

$asm08.System.Linq.Expressions.Compiler.StackSpiller.TempMaker.prototype.get_Temps = function () {
	return this._temps;
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.TempMaker.prototype.Temp = function (type) {
	if (this._freeTemps !== null) {
	__loop0__: 
		for (var i = (this._freeTemps.Count - 1); i >= 0; --i) {
			var parameterExpression = this._freeTemps.get_Item(i);
			if (parameterExpression.Type === type) {
				this._freeTemps.RemoveAt(i);
				return this.UseTemp(parameterExpression);
			}
		}
	}
	parameterExpression = System.Linq.Expressions.Expression.Variable$1(type, JSIL.ConcatString("$temp$", this._temp++));
	this._temps.Add(parameterExpression);
	return this.UseTemp(parameterExpression);
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.TempMaker.prototype.UseTemp = function (temp) {
	if (this._usedTemps === null) {
		this._usedTemps = JSIL.New(System.Collections.Generic.Stack$b1.Of(System.Linq.Expressions.ParameterExpression), "_ctor$0", []);
	}
	this._usedTemps.Push(temp);
	return temp;
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.TempMaker.prototype.FreeTemp = function (temp) {
	if (this._freeTemps === null) {
		this._freeTemps = new (System.Collections.Generic.List$b1.Of(System.Linq.Expressions.ParameterExpression)) ();
	}
	this._freeTemps.Add(temp);
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.TempMaker.prototype.Mark = function () {
	if (this._usedTemps === null) {
		return 0;
	}
	return this._usedTemps.Count;
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.TempMaker.prototype.Free = function (mark) {
	if (this._usedTemps !== null) {
	__loop0__: 
		while (mark < this._usedTemps.Count) {
			this.FreeTemp(this._usedTemps.Pop());
		}
	}
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.TempMaker.prototype.VerifyTemps = function () {
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.TempMaker.prototype._ctor = function () {
	this._temps = new (System.Collections.Generic.List$b1.Of(System.Linq.Expressions.ParameterExpression)) ();
	System.Object.prototype._ctor.call(this);
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.Compiler.StackSpiller.TempMaker.prototype, "Temps", 
	$asm08.System.Linq.Expressions.Compiler.StackSpiller.TempMaker.prototype.get_Temps, null);
$asm08.System.Linq.Expressions.Compiler.StackSpiller.TempMaker.prototype._temp = 0;
$asm08.System.Linq.Expressions.Compiler.StackSpiller.TempMaker.prototype._freeTemps = null;
$asm08.System.Linq.Expressions.Compiler.StackSpiller.TempMaker.prototype._usedTemps = null;
$asm08.System.Linq.Expressions.Compiler.StackSpiller.TempMaker.prototype._temps = null;

$asm08.System.Linq.Expressions.Compiler.StackSpiller.ChildRewriter.prototype._ctor = function (self, stack, count) {
	System.Object.prototype._ctor.call(this);
	this._self = self;
	this._stack = stack;
	this._expressions = JSIL.Array.New(System.Linq.Expressions.Expression, count);
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.ChildRewriter.prototype.Add$0 = function (node) {
	if (node === null) {
		this._expressions[this._expressionsCount++] = null;
		return;
	}
	var result = this._self.RewriteExpression(node, this._stack).MemberwiseClone();
	this._action = (this._action | result.Action);
	this._stack = System.Linq.Expressions.Compiler.StackSpiller.Stack.NonEmpty;
	this._expressions[this._expressionsCount++] = result.Node;
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.ChildRewriter.prototype.Add$1 = function (expressions) {
	var i = 0;
	var count = expressions.ICollection$b1_Count;
__loop0__: 
	while (i < count) {
		this.Add$0(expressions.IList$b1_get_Item(i));
		++i;
	}
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.ChildRewriter.prototype.AddArguments = function (expressions) {
	var i = 0;
	var argumentCount = expressions.IArgumentProvider_ArgumentCount;
__loop0__: 
	while (i < argumentCount) {
		this.Add$0(expressions.IArgumentProvider_GetArgument(i));
		++i;
	}
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.ChildRewriter.prototype.EnsureDone = function () {
	var item = new JSIL.Variable(null);
	if (!this._done) {
		this._done = true;
		if (this._action === (System.Linq.Expressions.Compiler.StackSpiller.RewriteAction.Copy | System.Linq.Expressions.Compiler.StackSpiller.RewriteAction.SpillStack)) {
			var expressions = this._expressions;
			var num = expressions.length;
			var list = new (System.Collections.Generic.List$b1.Of(System.Linq.Expressions.Expression)) ((num + 1));
		__loop0__: 
			for (var i = 0; i < num; ++i) {
				if (expressions[i]) {
					expressions[i] = this._self.ToTemp(expressions[i], /* ref */ item);
					list.Add(item.value);
				}
			}
			list.Capacity = (list.Count + 1);
			this._comma = list;
		}
	}
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.ChildRewriter.prototype.get_Rewrite = function () {
	return (this._action !== System.Linq.Expressions.Compiler.StackSpiller.RewriteAction.None);
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.ChildRewriter.prototype.get_Action = function () {
	return this._action;
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.ChildRewriter.prototype.Finish = function (expr) {
	this.EnsureDone();
	if (this._action === (System.Linq.Expressions.Compiler.StackSpiller.RewriteAction.Copy | System.Linq.Expressions.Compiler.StackSpiller.RewriteAction.SpillStack)) {
		this._comma.Add(expr);
		expr = $asm08.System.Linq.Expressions.Compiler.StackSpiller.MakeBlock$1(this._comma);
	}
	return new $asm08.System.Linq.Expressions.Compiler.StackSpiller.Result(this._action, expr);
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.ChildRewriter.prototype.get_Item$0 = function (index) {
	this.EnsureDone();
	if (index < 0) {
		index += this._expressions.length;
	}
	return this._expressions[index];
};
$asm08.System.Linq.Expressions.Compiler.StackSpiller.ChildRewriter.prototype.get_Item$1 = function (first, last) {
	this.EnsureDone();
	if (last < 0) {
		last += this._expressions.length;
	}
	var num = ((last - first) + 1);
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresArrayRange$b1(System.Linq.Expressions.Expression)(
		this._expressions, 
		first, 
		num, 
		"first", 
		"last"
	);
	if (num === this._expressions.length) {
		return this._expressions;
	}
	var array = JSIL.Array.New(System.Linq.Expressions.Expression, num);
	System.Array.Copy$1(
		this._expressions, 
		first, 
		array, 
		0, 
		num
	);
	return array;
};
JSIL.OverloadedMethod($asm08.System.Linq.Expressions.Compiler.StackSpiller.ChildRewriter.prototype, "get_Item", [
		["get_Item$0", [System.Int32]], 
		["get_Item$1", [System.Int32, System.Int32]]
	]);
JSIL.OverloadedMethod($asm08.System.Linq.Expressions.Compiler.StackSpiller.ChildRewriter.prototype, "Add", [
		["Add$0", [System.Linq.Expressions.Expression]], 
		["Add$1", [System.Collections.Generic.IList$b1.Of(System.Linq.Expressions.Expression)]]
	]);
JSIL.MakeProperty($asm08.System.Linq.Expressions.Compiler.StackSpiller.ChildRewriter.prototype, "Rewrite", 
	$asm08.System.Linq.Expressions.Compiler.StackSpiller.ChildRewriter.prototype.get_Rewrite, null);
JSIL.MakeProperty($asm08.System.Linq.Expressions.Compiler.StackSpiller.ChildRewriter.prototype, "Action", 
	$asm08.System.Linq.Expressions.Compiler.StackSpiller.ChildRewriter.prototype.get_Action, null);
JSIL.MakeProperty($asm08.System.Linq.Expressions.Compiler.StackSpiller.ChildRewriter.prototype, "Item", 
	$asm08.System.Linq.Expressions.Compiler.StackSpiller.ChildRewriter.prototype.get_Item$0, null);
JSIL.MakeProperty($asm08.System.Linq.Expressions.Compiler.StackSpiller.ChildRewriter.prototype, "Item", 
	$asm08.System.Linq.Expressions.Compiler.StackSpiller.ChildRewriter.prototype.get_Item$1, null);
$asm08.System.Linq.Expressions.Compiler.StackSpiller.ChildRewriter.prototype._self = null;
$asm08.System.Linq.Expressions.Compiler.StackSpiller.ChildRewriter.prototype._expressions = null;
$asm08.System.Linq.Expressions.Compiler.StackSpiller.ChildRewriter.prototype._expressionsCount = 0;
$asm08.System.Linq.Expressions.Compiler.StackSpiller.ChildRewriter.prototype._comma = null;
$asm08.System.Linq.Expressions.Compiler.StackSpiller.ChildRewriter.prototype._action = 0;
$asm08.System.Linq.Expressions.Compiler.StackSpiller.ChildRewriter.prototype._stack = 0;
$asm08.System.Linq.Expressions.Compiler.StackSpiller.ChildRewriter.prototype._done = false;

$asm08.System.Linq.Expressions.Compiler.SpilledExpressionBlock.prototype._ctor = function (expressions) {
	$asm08.System.Linq.Expressions.BlockN.prototype._ctor.call(this, expressions);
};
$asm08.System.Linq.Expressions.Compiler.SpilledExpressionBlock.prototype.Rewrite = function (variables, args) {
	throw $asm08.System.Dynamic.Utils.ContractUtils.Unreachable;
};

$asm08.System.Runtime.CompilerServices.SymbolDocumentGenerator.prototype.GetSymbolWriter = function (method, document) {
	if (this._symbolWriters === null) {
		this._symbolWriters = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.Linq.Expressions.SymbolDocumentInfo, System.Diagnostics.SymbolStore.ISymbolDocumentWriter), "_ctor$0", []);
	}
	if (!this._symbolWriters.TryGetValue(document, /* ref */ symbolDocumentWriter)) {
		var symbolDocumentWriter = new JSIL.Variable(JSIL.Cast(method.Module, System.Reflection.Emit.ModuleBuilder).DefineDocument(document.FileName, document.Language.MemberwiseClone(), document.LanguageVendor.MemberwiseClone(), $asm08.System.Linq.Expressions.Compiler.SymbolGuids.DocumentType_Text.MemberwiseClone()));
		this._symbolWriters.Add(document, symbolDocumentWriter.value);
	}
	return symbolDocumentWriter.value;
};
$asm08.System.Runtime.CompilerServices.SymbolDocumentGenerator.prototype.MarkSequencePoint$0 = function (method, methodBase, ilg, sequencePoint) {
	var methodBuilder = JSIL.TryCast(methodBase, System.Reflection.Emit.MethodBuilder);
	if (methodBuilder !== null) {
		ilg.MarkSequencePoint(
			this.GetSymbolWriter(methodBuilder, sequencePoint.Document), 
			sequencePoint.StartLine, 
			sequencePoint.StartColumn, 
			sequencePoint.EndLine, 
			sequencePoint.EndColumn
		);
	}
};
$asm08.System.Runtime.CompilerServices.SymbolDocumentGenerator.prototype.MarkSequencePoint$1 = function (method, ilOffset, sequencePoint) {
	throw $asm08.System.Core.Error.PdbGeneratorNeedsExpressionCompiler();
};
$asm08.System.Runtime.CompilerServices.SymbolDocumentGenerator.prototype.SetLocalName = function (localBuilder, name) {
	localBuilder.SetLocalSymInfo$0(name);
};
$asm08.System.Runtime.CompilerServices.SymbolDocumentGenerator.prototype._ctor = function () {
	System.Runtime.CompilerServices.DebugInfoGenerator.prototype._ctor.call(this);
};
JSIL.OverloadedMethod($asm08.System.Runtime.CompilerServices.SymbolDocumentGenerator.prototype, "MarkSequencePoint", [
		["MarkSequencePoint$0", [System.Linq.Expressions.LambdaExpression, System.Reflection.MethodBase, $asm08.System.Linq.Expressions.Compiler.OffsetTrackingILGenerator, System.Linq.Expressions.DebugInfoExpression]], 
		["MarkSequencePoint$1", [System.Linq.Expressions.LambdaExpression, System.Int32, System.Linq.Expressions.DebugInfoExpression]]
	]);
$asm08.System.Runtime.CompilerServices.SymbolDocumentGenerator.prototype._symbolWriters = null;

$asm08.System.Linq.Expressions.Compiler.VariableBinder.Bind = function (lambda) {
	var variableBinder = new $asm08.System.Linq.Expressions.Compiler.VariableBinder();
	variableBinder.Visit$0(lambda);
	return variableBinder._tree;
};
$asm08.System.Linq.Expressions.Compiler.VariableBinder.prototype._ctor = function () {
	this._tree = new $asm08.System.Linq.Expressions.Compiler.AnalyzedTree();
	this._scopes = JSIL.New(System.Collections.Generic.Stack$b1.Of($asm08.System.Linq.Expressions.Compiler.CompilerScope), "_ctor$0", []);
	this._constants = JSIL.New(System.Collections.Generic.Stack$b1.Of($asm08.System.Linq.Expressions.Compiler.BoundConstants), "_ctor$0", []);
	System.Linq.Expressions.ExpressionVisitor.prototype._ctor.call(this);
};
$asm08.System.Linq.Expressions.Compiler.VariableBinder.prototype.VisitConstant = function (node) {
	if (this._inQuote) {
		return node;
	}
	if ($asm08.System.Linq.Expressions.Compiler.ILGen.CanEmitConstant(node.Value, node.Type)) {
		return node;
	}
	this._constants.Peek().AddReference(node.Value, node.Type);
	return node;
};
$asm08.System.Linq.Expressions.Compiler.VariableBinder.prototype.VisitUnary = function (node) {
	if (node.NodeType === System.Linq.Expressions.ExpressionType.Quote) {
		this._inQuote = true;
		this.Visit$0(node.Operand);
		this._inQuote = this._inQuote;
	} else {
		this.Visit$0(node.Operand);
	}
	return node;
};
$asm08.System.Linq.Expressions.Compiler.VariableBinder.prototype.VisitLambda$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, node) {
		this._scopes.Push(this._tree.Scopes.set_Item(node, new $asm08.System.Linq.Expressions.Compiler.CompilerScope(node, true)));
		this._constants.Push(this._tree.Constants.set_Item(node, new $asm08.System.Linq.Expressions.Compiler.BoundConstants()));
		System.Linq.Expressions.ExpressionVisitor.prototype.Visit$1.call(this, this.MergeScopes(node));
		this._constants.Pop();
		this._scopes.Pop();
		return node;
	}
);
$asm08.System.Linq.Expressions.Compiler.VariableBinder.prototype.VisitInvocation = function (node) {
	var lambdaOperand = node.LambdaOperand;
	if (lambdaOperand !== null) {
		this._scopes.Push(this._tree.Scopes.set_Item(lambdaOperand, new $asm08.System.Linq.Expressions.Compiler.CompilerScope(lambdaOperand, false)));
		System.Linq.Expressions.ExpressionVisitor.prototype.Visit$1.call(this, this.MergeScopes(lambdaOperand));
		this._scopes.Pop();
		System.Linq.Expressions.ExpressionVisitor.prototype.Visit$1.call(this, node.Arguments);
		return node;
	}
	return System.Linq.Expressions.ExpressionVisitor.prototype.VisitInvocation.call(this, node);
};
$asm08.System.Linq.Expressions.Compiler.VariableBinder.prototype.VisitBlock = function (node) {
	if (node.Variables.Count === 0) {
		System.Linq.Expressions.ExpressionVisitor.prototype.Visit$1.call(this, node.Expressions);
		return node;
	}
	this._scopes.Push(this._tree.Scopes.set_Item(node, new $asm08.System.Linq.Expressions.Compiler.CompilerScope(node, false)));
	System.Linq.Expressions.ExpressionVisitor.prototype.Visit$1.call(this, this.MergeScopes(node));
	this._scopes.Pop();
	return node;
};
$asm08.System.Linq.Expressions.Compiler.VariableBinder.prototype.VisitCatchBlock = function (node) {
	if (node.Variable === null) {
		this.Visit$0(node.Body);
		return node;
	}
	this._scopes.Push(this._tree.Scopes.set_Item(node, new $asm08.System.Linq.Expressions.Compiler.CompilerScope(node, false)));
	this.Visit$0(node.Body);
	this._scopes.Pop();
	return node;
};
$asm08.System.Linq.Expressions.Compiler.VariableBinder.prototype.MergeScopes = function (node) {
	var lambdaExpression = JSIL.TryCast(node, System.Linq.Expressions.LambdaExpression);
	if (lambdaExpression !== null) {
		var readOnlyCollection = new (System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(System.Linq.Expressions.Expression)) (JSIL.Array.New(System.Linq.Expressions.Expression, [lambdaExpression.Body]));
	} else {
		readOnlyCollection = JSIL.Cast(node, System.Linq.Expressions.BlockExpression).Expressions;
	}
	var compilerScope = this._scopes.Peek();
__loop0__: 
	while ((readOnlyCollection.Count === 1) && (readOnlyCollection.get_Item(0).NodeType === System.Linq.Expressions.ExpressionType.Block)) {
		var blockExpression = JSIL.Cast(readOnlyCollection.get_Item(0), System.Linq.Expressions.BlockExpression);
		if (blockExpression.Variables.Count > 0) {
			var enumerator = blockExpression.Variables.GetEnumerator();
			try {
			__loop1__: 
				while (enumerator.IEnumerator_MoveNext()) {
					var current = enumerator.IEnumerator$b1_Current;
					if (compilerScope.Definitions.ContainsKey(current)) {
						return readOnlyCollection;
					}
				}
			} finally {
				if (enumerator !== null) {
					enumerator.IDisposable_Dispose();
				}
			}
			if (compilerScope.MergedScopes === null) {
				compilerScope.MergedScopes = JSIL.New($asm08.System.Linq.Expressions.Set$b1.Of(System.Object), "_ctor$1", [$asm08.System.Dynamic.Utils.ReferenceEqualityComparer$b1.Of(System.Object).Instance]);
			}
			compilerScope.MergedScopes.Add(blockExpression);
			var enumerator2 = blockExpression.Variables.GetEnumerator();
			try {
			__loop2__: 
				while (enumerator2.IEnumerator_MoveNext()) {
					var current2 = enumerator2.IEnumerator$b1_Current;
					compilerScope.Definitions.Add(current2, $asm08.System.Linq.Expressions.Compiler.VariableStorageKind.Local);
				}
			} finally {
				if (enumerator2 !== null) {
					enumerator2.IDisposable_Dispose();
				}
			}
		}
		node = blockExpression;
		readOnlyCollection = blockExpression.Expressions;
	}
	return readOnlyCollection;
};
$asm08.System.Linq.Expressions.Compiler.VariableBinder.prototype.VisitParameter = function (node) {
	this.Reference(node, $asm08.System.Linq.Expressions.Compiler.VariableStorageKind.Local);
	var compilerScope = null;
	var enumerator = this._scopes.GetEnumerator().MemberwiseClone();
	try {
	__loop0__: 
		while (enumerator.MoveNext()) {
			var current = enumerator.Current;
			if (!(!current.IsMethod && !current.Definitions.ContainsKey(node))) {
				compilerScope = current;
				break __loop0__;
			}
		}
	} finally {
		enumerator.IDisposable_Dispose();
	}
	if (compilerScope.ReferenceCount === null) {
		compilerScope.ReferenceCount = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.Linq.Expressions.ParameterExpression, System.Int32), "_ctor$0", []);
	}
	$asm08.System.Dynamic.Utils.Helpers.IncrementCount$b1(System.Linq.Expressions.ParameterExpression)(node, compilerScope.ReferenceCount);
	return node;
};
$asm08.System.Linq.Expressions.Compiler.VariableBinder.prototype.VisitRuntimeVariables = function (node) {
	var enumerator = node.Variables.GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current;
			this.Reference(current, $asm08.System.Linq.Expressions.Compiler.VariableStorageKind.Hoisted);
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	return node;
};
$asm08.System.Linq.Expressions.Compiler.VariableBinder.prototype.Reference = function (node, storage) {
	var compilerScope = null;
	var enumerator = this._scopes.GetEnumerator().MemberwiseClone();
	try {
	__loop0__: 
		while (enumerator.MoveNext()) {
			var current = enumerator.Current;
			if (current.Definitions.ContainsKey(node)) {
				compilerScope = current;
				break __loop0__;
			}
			current.NeedsClosure = true;
			if (current.IsMethod) {
				storage = $asm08.System.Linq.Expressions.Compiler.VariableStorageKind.Hoisted;
			}
		}
	} finally {
		enumerator.IDisposable_Dispose();
	}
	if (compilerScope === null) {
		throw $asm08.System.Core.Error.UndefinedVariable(node.Name, node.Type, this.CurrentLambdaName);
	}
	if (storage === $asm08.System.Linq.Expressions.Compiler.VariableStorageKind.Hoisted) {
		if (node.IsByRef) {
			throw $asm08.System.Core.Error.CannotCloseOverByRef(node.Name, this.CurrentLambdaName);
		}
		compilerScope.Definitions.set_Item(node, $asm08.System.Linq.Expressions.Compiler.VariableStorageKind.Hoisted);
	}
};
$asm08.System.Linq.Expressions.Compiler.VariableBinder.prototype.get_CurrentLambdaName = function () {
	var enumerator = this._scopes.GetEnumerator().MemberwiseClone();
	try {
	__loop0__: 
		while (enumerator.MoveNext()) {
			var current = enumerator.Current;
			var lambdaExpression = JSIL.TryCast(current.Node, System.Linq.Expressions.LambdaExpression);
			if (lambdaExpression !== null) {
				return lambdaExpression.Name;
			}
		}
	} finally {
		enumerator.IDisposable_Dispose();
	}
	throw $asm08.System.Dynamic.Utils.ContractUtils.Unreachable;
};
JSIL.MakeProperty($asm08.System.Linq.Expressions.Compiler.VariableBinder.prototype, "CurrentLambdaName", 
	$asm08.System.Linq.Expressions.Compiler.VariableBinder.prototype.get_CurrentLambdaName, null);
$asm08.System.Linq.Expressions.Compiler.VariableBinder.prototype._tree = null;
$asm08.System.Linq.Expressions.Compiler.VariableBinder.prototype._scopes = null;
$asm08.System.Linq.Expressions.Compiler.VariableBinder.prototype._constants = null;
$asm08.System.Linq.Expressions.Compiler.VariableBinder.prototype._inQuote = false;

$asm08.System.Dynamic.Utils.CacheDict$b2.prototype._ctor = function (maxSize) {
	this._dict = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(this.TKey, $asm08.System.Dynamic.Utils.CacheDict$b2.KeyInfo.Of(this.TKey, this.TValue)), "_ctor$0", []);
	this._list = JSIL.New(System.Collections.Generic.LinkedList$b1.Of(this.TKey), "_ctor$0", []);
	System.Object.prototype._ctor.call(this);
	this._maxSize = maxSize;
};
$asm08.System.Dynamic.Utils.CacheDict$b2.prototype.TryGetValue = function (key, /* ref */ value) {
	var keyInfo = new JSIL.Variable(new ($asm08.System.Dynamic.Utils.CacheDict$b2.KeyInfo.Of(this.TKey, this.TValue)) ());
	if (this._dict.TryGetValue(key, /* ref */ keyInfo)) {
		var list = keyInfo.value.List;
		if (list.Previous !== null) {
			this._list.Remove$1(list);
			this._list.AddFirst$1(list);
		}
		value.value = keyInfo.value.Value;
		return true;
	}
	value.value = null;
	return false;
};
$asm08.System.Dynamic.Utils.CacheDict$b2.prototype.Add = function (key, value) {
	var keyInfo = new JSIL.Variable(new ($asm08.System.Dynamic.Utils.CacheDict$b2.KeyInfo.Of(this.TKey, this.TValue)) ());
	if (this._dict.TryGetValue(key, /* ref */ keyInfo)) {
		this._list.Remove$1(keyInfo.value.List);
	} else if (this._list.Count === this._maxSize) {
		var last = JSIL.Cast(this._list.Last, System.Collections.Generic.LinkedListNode$b1.Of(this.TKey));
		this._list.RemoveLast();
		this._dict.Remove(last.Value);
	}
	var linkedListNode = JSIL.New(System.Collections.Generic.LinkedListNode$b1.Of(this.TKey), "_ctor$0", [key]);
	this._list.AddFirst$1(linkedListNode);
	this._dict.set_Item(key, new ($asm08.System.Dynamic.Utils.CacheDict$b2.KeyInfo.Of(this.TKey, this.TValue)) (value, linkedListNode));
};
$asm08.System.Dynamic.Utils.CacheDict$b2.prototype.get_Item = function (key) {
	var result = new JSIL.Variable(null);
	if (this.TryGetValue(key, /* ref */ result)) {
		return result.value;
	}
	throw JSIL.New(System.Collections.Generic.KeyNotFoundException, "_ctor$0", []);
};
$asm08.System.Dynamic.Utils.CacheDict$b2.prototype.set_Item = function (key, value) {
	this.Add(key, value);
};
JSIL.MakeProperty($asm08.System.Dynamic.Utils.CacheDict$b2.prototype, "Item", 
	$asm08.System.Dynamic.Utils.CacheDict$b2.prototype.get_Item, $asm08.System.Dynamic.Utils.CacheDict$b2.prototype.set_Item);
$asm08.System.Dynamic.Utils.CacheDict$b2.prototype._dict = null;
$asm08.System.Dynamic.Utils.CacheDict$b2.prototype._list = null;
$asm08.System.Dynamic.Utils.CacheDict$b2.prototype._maxSize = 0;

$asm08.System.Dynamic.Utils.CacheDict$b2.KeyInfo.prototype._ctor = function (value, list) {
	this.Value = value;
	this.List = list;
};
$asm08.System.Dynamic.Utils.CacheDict$b2.KeyInfo.prototype.Value = null;
$asm08.System.Dynamic.Utils.CacheDict$b2.KeyInfo.prototype.List = null;

$asm08.System.Dynamic.Utils.CollectionExtensions.ToReadOnly$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, enumerable) {
		if (enumerable === null) {
			return $asm08.System.Dynamic.Utils.EmptyReadOnlyCollection$b1.Of(T).Instance;
		}
		if (System.Linq.Expressions.Expression.SilverlightQuirks) {
			var readOnlyCollection = JSIL.TryCast(enumerable, System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(T));
			if (readOnlyCollection !== null) {
				return readOnlyCollection;
			}
		}
		var trueReadOnlyCollection = JSIL.TryCast(enumerable, $asm08.System.Runtime.CompilerServices.TrueReadOnlyCollection$b1.Of(T));
		if (trueReadOnlyCollection !== null) {
			return trueReadOnlyCollection;
		}
		var readOnlyCollectionBuilder = JSIL.TryCast(enumerable, System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.Of(T));
		if (readOnlyCollectionBuilder !== null) {
			return readOnlyCollectionBuilder.ToReadOnlyCollection();
		}
		var collection = JSIL.TryCast(enumerable, System.Collections.Generic.ICollection$b1.Of(T));
		if (collection === null) {
			return new ($asm08.System.Runtime.CompilerServices.TrueReadOnlyCollection$b1.Of(T)) (new (System.Collections.Generic.List$b1.Of(T)) (enumerable).ToArray());
		}
		var count = collection.ICollection$b1_Count;
		if (count === 0) {
			return $asm08.System.Dynamic.Utils.EmptyReadOnlyCollection$b1.Of(T).Instance;
		}
		var array = JSIL.Array.New(T, count);
		collection.ICollection$b1_CopyTo(array, 0);
		return new ($asm08.System.Runtime.CompilerServices.TrueReadOnlyCollection$b1.Of(T)) (array);
	}
);
$asm08.System.Dynamic.Utils.CollectionExtensions.ListHashCode$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, list) {
		var $default = System.Collections.Generic.EqualityComparer$b1.Of(T).Default;
		var num = 6551;
		var enumerator = list.IEnumerable$b1_GetEnumerator();
		try {
		__loop0__: 
			while (enumerator.IEnumerator_MoveNext()) {
				var current = enumerator.IEnumerator$b1_Current;
				num = (num ^ ((num << 5) ^ $default.GetHashCode(current)));
			}
		} finally {
			if (enumerator !== null) {
				enumerator.IDisposable_Dispose();
			}
		}
		return num;
	}
);
$asm08.System.Dynamic.Utils.CollectionExtensions.ListEquals$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, first, second) {
		if (first.ICollection$b1_Count !== second.ICollection$b1_Count) {
			return false;
		}
		var $default = System.Collections.Generic.EqualityComparer$b1.Of(T).Default;
		var enumerator = first.IEnumerable$b1_GetEnumerator();
		var enumerator2 = second.IEnumerable$b1_GetEnumerator();
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			enumerator2.IEnumerator_MoveNext();
			if (!$default.Equals(enumerator.IEnumerator$b1_Current, enumerator2.IEnumerator$b1_Current)) {
				return false;
			}
		}
		return true;
	}
);
$asm08.System.Dynamic.Utils.CollectionExtensions.Select$b2 = JSIL.GenericMethod(
	["T", "U"], 
	function (T, U, enumerable, select) {
		var $lSelect$gd__ = new ($asm08.System.Dynamic.Utils.CollectionExtensions.$lSelect$gd__0$b2.Of(T, U)) (-2);
		$lSelect$gd__.$enumerable = enumerable;
		$lSelect$gd__.$select = select;
		return $lSelect$gd__;
	}
);
$asm08.System.Dynamic.Utils.CollectionExtensions.Map$b2 = JSIL.GenericMethod(
	["T", "U"], 
	function (T, U, collection, select) {
		var num = collection.ICollection$b1_Count;
		var array = JSIL.Array.New(U, num);
		num = 0;
		var enumerator = collection.IEnumerable$b1_GetEnumerator();
		try {
		__loop0__: 
			while (enumerator.IEnumerator_MoveNext()) {
				var current = enumerator.IEnumerator$b1_Current;
				array[num++] = select(current);
			}
		} finally {
			if (enumerator !== null) {
				enumerator.IDisposable_Dispose();
			}
		}
		return array;
	}
);
$asm08.System.Dynamic.Utils.CollectionExtensions.Where$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, enumerable, where) {
		var $lWhere$gd__ = new ($asm08.System.Dynamic.Utils.CollectionExtensions.$lWhere$gd__6$b1.Of(T)) (-2);
		$lWhere$gd__.$enumerable = enumerable;
		$lWhere$gd__.$where = where;
		return $lWhere$gd__;
	}
);
$asm08.System.Dynamic.Utils.CollectionExtensions.Any$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, source, predicate) {
		var enumerator = source.IEnumerable$b1_GetEnumerator();
		try {
		__loop0__: 
			while (enumerator.IEnumerator_MoveNext()) {
				var current = enumerator.IEnumerator$b1_Current;
				if (predicate(current)) {
					return true;
				}
			}
		} finally {
			if (enumerator !== null) {
				enumerator.IDisposable_Dispose();
			}
		}
		return false;
	}
);
$asm08.System.Dynamic.Utils.CollectionExtensions.All$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, source, predicate) {
		var enumerator = source.IEnumerable$b1_GetEnumerator();
		try {
		__loop0__: 
			while (enumerator.IEnumerator_MoveNext()) {
				var current = enumerator.IEnumerator$b1_Current;
				if (!predicate(current)) {
					return false;
				}
			}
		} finally {
			if (enumerator !== null) {
				enumerator.IDisposable_Dispose();
			}
		}
		return true;
	}
);
$asm08.System.Dynamic.Utils.CollectionExtensions.RemoveFirst$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, array) {
		var array2 = JSIL.Array.New(T, (array.length - 1));
		System.Array.Copy$1(
			array, 
			1, 
			array2, 
			0, 
			array2.length
		);
		return array2;
	}
);
$asm08.System.Dynamic.Utils.CollectionExtensions.RemoveLast$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, array) {
		var array2 = JSIL.Array.New(T, (array.length - 1));
		System.Array.Copy$1(
			array, 
			0, 
			array2, 
			0, 
			array2.length
		);
		return array2;
	}
);
$asm08.System.Dynamic.Utils.CollectionExtensions.AddFirst$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, list, item) {
		var array = JSIL.Array.New(T, (list.ICollection$b1_Count + 1));
		array[0] = item;
		list.ICollection$b1_CopyTo(array, 1);
		return array;
	}
);
$asm08.System.Dynamic.Utils.CollectionExtensions.AddLast$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, list, item) {
		var array = JSIL.Array.New(T, (list.ICollection$b1_Count + 1));
		list.ICollection$b1_CopyTo(array, 0);
		array[list.ICollection$b1_Count] = item;
		return array;
	}
);
$asm08.System.Dynamic.Utils.CollectionExtensions.First$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, source) {
		var list = JSIL.TryCast(source, System.Collections.Generic.IList$b1.Of(T));
		if (list !== null) {
			return list.IList$b1_get_Item(0);
		}
		var enumerator = source.IEnumerable$b1_GetEnumerator();
		try {
			if (enumerator.IEnumerator_MoveNext()) {
				return enumerator.IEnumerator$b1_Current;
			}
		} finally {
			if (enumerator !== null) {
				enumerator.IDisposable_Dispose();
			}
		}
		throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
	}
);
$asm08.System.Dynamic.Utils.CollectionExtensions.Last$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, list) {
		return list.IList$b1_get_Item((list.ICollection$b1_Count - 1));
	}
);
$asm08.System.Dynamic.Utils.CollectionExtensions.Copy$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, array) {
		var array2 = JSIL.Array.New(T, array.length);
		System.Array.Copy$0(array, array2, array.length);
		return array2;
	}
);

$asm08.System.Dynamic.Utils.CollectionExtensions.$lSelect$gd__0$b2.prototype.IEnumerable$b1_GetEnumerator = function () {
	if (!((System.Threading.Thread.CurrentThread.ManagedThreadId !== this.$initialThreadId) || (this.$state !== -2))) {
		this.$state = 0;
		var $lSelect$gd__ = this;
	} else {
		$lSelect$gd__ = new ($asm08.System.Dynamic.Utils.CollectionExtensions.$lSelect$gd__0$b2.Of(this.T, this.U)) (0);
	}
	$lSelect$gd__.enumerable = this.$enumerable;
	$lSelect$gd__.select = this.$select;
	return $lSelect$gd__;
};
$asm08.System.Dynamic.Utils.CollectionExtensions.$lSelect$gd__0$b2.prototype.IEnumerable_GetEnumerator = function () {
	return this.IEnumerable$b1_GetEnumerator();
};
$asm08.System.Dynamic.Utils.CollectionExtensions.$lSelect$gd__0$b2.prototype.IEnumerator_MoveNext = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				try {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								switch (this.$state) {
									case 0: 
										this.$state = -1;
										this.$wrap2 = this.enumerable.IEnumerable$b1_GetEnumerator();
										this.$state = 1;
										break;
									case 1: 
										__label1__ = "IL_89";
										continue __step1__;
									case 2: 
										this.$state = 1;
										break;
									default: 
										__label1__ = "IL_89";
										continue __step1__;
								}
								if (this.$wrap2.IEnumerator_MoveNext()) {
									this.t = this.$wrap2.IEnumerator$b1_Current;
									this.$current = this.select(this.t);
									this.$state = 2;
									var result = true;
									return result;
								}
								this.$l$gm__Finally3();
								__label1__ = "IL_89";
								continue __step1__;
								break;
							case "IL_89":
								result = false;
								break __step1__;
						}
					}
				} catch ($exception) {
					this.IDisposable_Dispose();
					throw $exception;
				}
				return result;
				break __step0__;
		}
	}
};
$asm08.System.Dynamic.Utils.CollectionExtensions.$lSelect$gd__0$b2.prototype.IEnumerator$b1_get_Current = function () {
	return this.$current;
};
$asm08.System.Dynamic.Utils.CollectionExtensions.$lSelect$gd__0$b2.prototype.IEnumerator_Reset = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm08.System.Dynamic.Utils.CollectionExtensions.$lSelect$gd__0$b2.prototype.IDisposable_Dispose = function () {
	switch (this.$state) {
		case 1: 
		case 2: 
			try {
			} finally {
				this.$l$gm__Finally3();
			}
			return;
		default: 
			return;
	}
};
$asm08.System.Dynamic.Utils.CollectionExtensions.$lSelect$gd__0$b2.prototype.IEnumerator_get_Current = function () {
	return this.$current;
};
$asm08.System.Dynamic.Utils.CollectionExtensions.$lSelect$gd__0$b2.prototype._ctor = function ($l$g1__state) {
	System.Object.prototype._ctor.call(this);
	this.$state = $l$g1__state;
	this.$initialThreadId = System.Threading.Thread.CurrentThread.ManagedThreadId;
};
$asm08.System.Dynamic.Utils.CollectionExtensions.$lSelect$gd__0$b2.prototype.$l$gm__Finally3 = function () {
	this.$state = -1;
	if (this.$wrap2 !== null) {
		this.$wrap2.IDisposable_Dispose();
	}
};
JSIL.MakeProperty($asm08.System.Dynamic.Utils.CollectionExtensions.$lSelect$gd__0$b2.prototype, "IEnumerator$b1_Current", 
	$asm08.System.Dynamic.Utils.CollectionExtensions.$lSelect$gd__0$b2.prototype.IEnumerator$b1_get_Current, null);
JSIL.MakeProperty($asm08.System.Dynamic.Utils.CollectionExtensions.$lSelect$gd__0$b2.prototype, "IEnumerator_Current", 
	$asm08.System.Dynamic.Utils.CollectionExtensions.$lSelect$gd__0$b2.prototype.IEnumerator_get_Current, null);
$asm08.System.Dynamic.Utils.CollectionExtensions.$lSelect$gd__0$b2.prototype.$current = null;
$asm08.System.Dynamic.Utils.CollectionExtensions.$lSelect$gd__0$b2.prototype.$state = 0;
$asm08.System.Dynamic.Utils.CollectionExtensions.$lSelect$gd__0$b2.prototype.$initialThreadId = 0;
$asm08.System.Dynamic.Utils.CollectionExtensions.$lSelect$gd__0$b2.prototype.enumerable = null;
$asm08.System.Dynamic.Utils.CollectionExtensions.$lSelect$gd__0$b2.prototype.$enumerable = null;
$asm08.System.Dynamic.Utils.CollectionExtensions.$lSelect$gd__0$b2.prototype.select = null;
$asm08.System.Dynamic.Utils.CollectionExtensions.$lSelect$gd__0$b2.prototype.$select = null;
$asm08.System.Dynamic.Utils.CollectionExtensions.$lSelect$gd__0$b2.prototype.t = null;
$asm08.System.Dynamic.Utils.CollectionExtensions.$lSelect$gd__0$b2.prototype.$wrap2 = null;

$asm08.System.Dynamic.Utils.CollectionExtensions.$lWhere$gd__6$b1.prototype.IEnumerable$b1_GetEnumerator = function () {
	if (!((System.Threading.Thread.CurrentThread.ManagedThreadId !== this.$initialThreadId) || (this.$state !== -2))) {
		this.$state = 0;
		var $lWhere$gd__ = this;
	} else {
		$lWhere$gd__ = new ($asm08.System.Dynamic.Utils.CollectionExtensions.$lWhere$gd__6$b1.Of(this.T)) (0);
	}
	$lWhere$gd__.enumerable = this.$enumerable;
	$lWhere$gd__.where = this.$where;
	return $lWhere$gd__;
};
$asm08.System.Dynamic.Utils.CollectionExtensions.$lWhere$gd__6$b1.prototype.IEnumerable_GetEnumerator = function () {
	return this.IEnumerable$b1_GetEnumerator();
};
$asm08.System.Dynamic.Utils.CollectionExtensions.$lWhere$gd__6$b1.prototype.IEnumerator_MoveNext = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				try {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								switch (this.$state) {
									case 0: 
										this.$state = -1;
										this.$wrap8 = this.enumerable.IEnumerable$b1_GetEnumerator();
										this.$state = 1;
										break;
									case 1: 
										__label1__ = "IL_91";
										continue __step1__;
									case 2: 
										this.$state = 1;
										break;
									default: 
										__label1__ = "IL_91";
										continue __step1__;
								}
							__loop0__: 
								while (this.$wrap8.IEnumerator_MoveNext()) {
									this.t = this.$wrap8.IEnumerator$b1_Current;
									if (this.where(this.t)) {
										this.$current = this.t;
										this.$state = 2;
										var result = true;
										return result;
									}
								}
								this.$l$gm__Finally9();
								__label1__ = "IL_91";
								continue __step1__;
								break;
							case "IL_91":
								result = false;
								break __step1__;
						}
					}
				} catch ($exception) {
					this.IDisposable_Dispose();
					throw $exception;
				}
				return result;
				break __step0__;
		}
	}
};
$asm08.System.Dynamic.Utils.CollectionExtensions.$lWhere$gd__6$b1.prototype.IEnumerator$b1_get_Current = function () {
	return this.$current;
};
$asm08.System.Dynamic.Utils.CollectionExtensions.$lWhere$gd__6$b1.prototype.IEnumerator_Reset = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm08.System.Dynamic.Utils.CollectionExtensions.$lWhere$gd__6$b1.prototype.IDisposable_Dispose = function () {
	switch (this.$state) {
		case 1: 
		case 2: 
			try {
			} finally {
				this.$l$gm__Finally9();
			}
			return;
		default: 
			return;
	}
};
$asm08.System.Dynamic.Utils.CollectionExtensions.$lWhere$gd__6$b1.prototype.IEnumerator_get_Current = function () {
	return this.$current;
};
$asm08.System.Dynamic.Utils.CollectionExtensions.$lWhere$gd__6$b1.prototype._ctor = function ($l$g1__state) {
	System.Object.prototype._ctor.call(this);
	this.$state = $l$g1__state;
	this.$initialThreadId = System.Threading.Thread.CurrentThread.ManagedThreadId;
};
$asm08.System.Dynamic.Utils.CollectionExtensions.$lWhere$gd__6$b1.prototype.$l$gm__Finally9 = function () {
	this.$state = -1;
	if (this.$wrap8 !== null) {
		this.$wrap8.IDisposable_Dispose();
	}
};
JSIL.MakeProperty($asm08.System.Dynamic.Utils.CollectionExtensions.$lWhere$gd__6$b1.prototype, "IEnumerator$b1_Current", 
	$asm08.System.Dynamic.Utils.CollectionExtensions.$lWhere$gd__6$b1.prototype.IEnumerator$b1_get_Current, null);
JSIL.MakeProperty($asm08.System.Dynamic.Utils.CollectionExtensions.$lWhere$gd__6$b1.prototype, "IEnumerator_Current", 
	$asm08.System.Dynamic.Utils.CollectionExtensions.$lWhere$gd__6$b1.prototype.IEnumerator_get_Current, null);
$asm08.System.Dynamic.Utils.CollectionExtensions.$lWhere$gd__6$b1.prototype.$current = null;
$asm08.System.Dynamic.Utils.CollectionExtensions.$lWhere$gd__6$b1.prototype.$state = 0;
$asm08.System.Dynamic.Utils.CollectionExtensions.$lWhere$gd__6$b1.prototype.$initialThreadId = 0;
$asm08.System.Dynamic.Utils.CollectionExtensions.$lWhere$gd__6$b1.prototype.enumerable = null;
$asm08.System.Dynamic.Utils.CollectionExtensions.$lWhere$gd__6$b1.prototype.$enumerable = null;
$asm08.System.Dynamic.Utils.CollectionExtensions.$lWhere$gd__6$b1.prototype.where = null;
$asm08.System.Dynamic.Utils.CollectionExtensions.$lWhere$gd__6$b1.prototype.$where = null;
$asm08.System.Dynamic.Utils.CollectionExtensions.$lWhere$gd__6$b1.prototype.t = null;
$asm08.System.Dynamic.Utils.CollectionExtensions.$lWhere$gd__6$b1.prototype.$wrap8 = null;

$asm08.System.Dynamic.Utils.EmptyReadOnlyCollection$b1.Instance = null;
$asm08.System.Dynamic.Utils.EmptyReadOnlyCollection$b1._cctor = function () {
	$asm08.System.Dynamic.Utils.EmptyReadOnlyCollection$b1.Of(this.T).Instance = new ($asm08.System.Runtime.CompilerServices.TrueReadOnlyCollection$b1.Of(this.T)) (JSIL.Array.New(this.T, 0));
};

$asm08.System.Dynamic.Utils.ContractUtils.get_Unreachable = function () {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", ["Code supposed to be unreachable"]);
};
$asm08.System.Dynamic.Utils.ContractUtils.Requires$0 = function (precondition) {
	if (!precondition) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm08.System.Core.Strings.MethodPreconditionViolated]);
	}
};
$asm08.System.Dynamic.Utils.ContractUtils.Requires$1 = function (precondition, paramName) {
	if (!precondition) {
		throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm08.System.Core.Strings.InvalidArgumentValue, paramName]);
	}
};
$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull = function (value, paramName) {
	if (value === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", [paramName]);
	}
};
$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotEmpty$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, collection, paramName) {
		$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(collection, paramName);
		if (collection.ICollection$b1_Count === 0) {
			throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm08.System.Core.Strings.NonEmptyCollectionRequired, paramName]);
		}
	}
);
$asm08.System.Dynamic.Utils.ContractUtils.RequiresArrayRange$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, array, offset, count, offsetName, countName) {
		if (count < 0) {
			throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", [countName]);
		}
		if (!((offset >= 0) && ((array.ICollection$b1_Count - offset) >= count))) {
			throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", [offsetName]);
		}
	}
);
$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNullItems$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, array, arrayName) {
		$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(array, arrayName);
	__loop0__: 
		for (var i = 0; i < array.ICollection$b1_Count; ++i) {
			if (array.IList$b1_get_Item(i) === null) {
				throw JSIL.New(System.ArgumentNullException, "_ctor$1", [System.String.Format(System.Globalization.CultureInfo.CurrentCulture, "{0}[{1}]", [arrayName, i])]);
			}
		}
	}
);
JSIL.OverloadedMethod($asm08.System.Dynamic.Utils.ContractUtils, "Requires", [
		["Requires$0", [System.Boolean]], 
		["Requires$1", [System.Boolean, System.String]]
	]);
JSIL.MakeProperty($asm08.System.Dynamic.Utils.ContractUtils, "Unreachable", 
	$asm08.System.Dynamic.Utils.ContractUtils.get_Unreachable, null);

System.Runtime.CompilerServices.ExtensionAttribute.prototype._ctor = function () {
	System.Attribute.prototype._ctor.call(this);
};

$asm08.System.Dynamic.Utils.Helpers.CommonNode$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, first, second, parent) {
		var $default = System.Collections.Generic.EqualityComparer$b1.Of(T).Default;
		if ($default.Equals(first, second)) {
			return first;
		}
		var set = JSIL.New($asm08.System.Linq.Expressions.Set$b1.Of(T), "_ctor$1", [$default]);
	__loop0__: 
		for (var t = first; t; t = parent(t)) {
			set.Add(t);
		}
	__loop1__: 
		for (var t2 = second; t2; t2 = parent(t2)) {
			if (set.Contains(t2)) {
				return t2;
			}
		}
		return null;
	}
);
$asm08.System.Dynamic.Utils.Helpers.IncrementCount$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, key, dict) {
		var num = new JSIL.Variable(0);
		dict.TryGetValue(key, /* ref */ num);
		dict.set_Item(key, (num.value + 1));
	}
);

System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype._ctor$0 = function () {
	System.Object.prototype._ctor.call(this);
	this._items = System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.Of(this.T)._emptyArray;
};
System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype._ctor$1 = function (capacity) {
	System.Object.prototype._ctor.call(this);
	$asm08.System.Dynamic.Utils.ContractUtils.Requires$1((capacity >= 0), "capacity");
	this._items = JSIL.Array.New(this.T, capacity);
};
System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype._ctor$2 = function (collection) {
	System.Object.prototype._ctor.call(this);
	$asm08.System.Dynamic.Utils.ContractUtils.Requires$1((collection !== null), "collection");
	var collection2 = JSIL.TryCast(collection, System.Collections.Generic.ICollection$b1.Of(this.T));
	if (collection2 !== null) {
		var count = collection2.ICollection$b1_Count;
		this._items = JSIL.Array.New(this.T, count);
		collection2.ICollection$b1_CopyTo(this._items, 0);
		this._size = count;
		return;
	}
	this._size = 0;
	this._items = JSIL.Array.New(this.T, 4);
	var enumerator = collection.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			this.Add(enumerator.IEnumerator$b1_Current);
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
};
System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype.get_Capacity = function () {
	return this._items.length;
};
System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype.set_Capacity = function (value) {
	$asm08.System.Dynamic.Utils.ContractUtils.Requires$1((value >= this._size), "value");
	if (value !== this._items.length) {
		if (value > 0) {
			var array = JSIL.Array.New(this.T, value);
			if (this._size > 0) {
				System.Array.Copy$1(
					this._items, 
					0, 
					array, 
					0, 
					this._size
				);
			}
			this._items = array;
			return;
		}
		this._items = System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.Of(this.T)._emptyArray;
	}
};
System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype.get_Count = function () {
	return this._size;
};
System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype.IndexOf = function (item) {
	return System.Array.IndexOf$b1(this.T)(this._items, item, 0, this._size);
};
System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype.Insert = function (index, item) {
	$asm08.System.Dynamic.Utils.ContractUtils.Requires$1((index <= this._size), "index");
	if (this._size === this._items.length) {
		this.EnsureCapacity((this._size + 1));
	}
	if (index < this._size) {
		System.Array.Copy$1(
			this._items, 
			index, 
			this._items, 
			(index + 1), 
			(this._size - index)
		);
	}
	this._items[index] = item;
	++this._size;
	++this._version;
};
System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype.RemoveAt = function (index) {
	$asm08.System.Dynamic.Utils.ContractUtils.Requires$1(((index >= 0) && (index < this._size)), "index");
	--this._size;
	if (index < this._size) {
		System.Array.Copy$1(
			this._items, 
			(index + 1), 
			this._items, 
			index, 
			(this._size - index)
		);
	}
	this._items[this._size] = null;
	++this._version;
};
System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype.get_Item = function (index) {
	$asm08.System.Dynamic.Utils.ContractUtils.Requires$1((index < this._size), "index");
	return this._items[index];
};
System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype.set_Item = function (index, value) {
	$asm08.System.Dynamic.Utils.ContractUtils.Requires$1((index < this._size), "index");
	this._items[index] = value;
	++this._version;
};
System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype.Add = function (item) {
	if (this._size === this._items.length) {
		this.EnsureCapacity((this._size + 1));
	}
	this._items[this._size++] = item;
	++this._version;
};
System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype.Clear = function () {
	if (this._size > 0) {
		System.Array.Clear(this._items, 0, this._size);
		this._size = 0;
	}
	++this._version;
};
System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype.Contains = function (item) {
	if (item === null) {
	__loop0__: 
		for (var i = 0; i < this._size; ++i) {
			if (this._items[i] === null) {
				return true;
			}
		}
		return false;
	}
	var $default = System.Collections.Generic.EqualityComparer$b1.Of(this.T).Default;
__loop1__: 
	for (var j = 0; j < this._size; ++j) {
		if ($default.Equals(this._items[j], item)) {
			return true;
		}
	}
	return false;
};
System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype.CopyTo = function (array, arrayIndex) {
	System.Array.Copy$1(
		this._items, 
		0, 
		array, 
		arrayIndex, 
		this._size
	);
};
System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype.ICollection$b1_get_IsReadOnly = function () {
	return false;
};
System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype.Remove = function (item) {
	var num = this.IndexOf(item);
	if (num >= 0) {
		this.RemoveAt(num);
		return true;
	}
	return false;
};
System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype.GetEnumerator = function () {
	return new ($asm08.System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.Enumerator.Of(this.T)) (this);
};
System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype.IEnumerable_GetEnumerator = function () {
	return this.GetEnumerator();
};
System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype.IList_get_IsReadOnly = function () {
	return false;
};
System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype.IList_Add = function (value) {
	System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.Of(this.T).ValidateNullValue(value, "value");
	try {
		this.Add(JSIL.Cast(value, this.T));
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.InvalidCastException)) {
			System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.Of(this.T).ThrowInvalidTypeException(value, "value");
		} else {
			throw $exception;
		}
	}
	return (this.Count - 1);
};
System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype.IList_Contains = function (value) {
	return (System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.Of(this.T).IsCompatibleObject(value) && this.Contains(JSIL.Cast(value, this.T)));
};
System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype.IList_IndexOf = function (value) {
	if (System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.Of(this.T).IsCompatibleObject(value)) {
		return this.IndexOf(JSIL.Cast(value, this.T));
	}
	return -1;
};
System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype.IList_Insert = function (index, value) {
	System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.Of(this.T).ValidateNullValue(value, "value");
	try {
		this.Insert(index, JSIL.Cast(value, this.T));
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.InvalidCastException)) {
			System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.Of(this.T).ThrowInvalidTypeException(value, "value");
		} else {
			throw $exception;
		}
	}
};
System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype.IList_get_IsFixedSize = function () {
	return false;
};
System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype.IList_Remove = function (value) {
	if (System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.Of(this.T).IsCompatibleObject(value)) {
		this.Remove(JSIL.Cast(value, this.T));
	}
};
System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype.IList_get_Item = function (index) {
	return this.get_Item(index);
};
System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype.IList_set_Item = function (index, value) {
	System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.Of(this.T).ValidateNullValue(value, "value");
	try {
		this.set_Item(index, JSIL.Cast(value, this.T));
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.InvalidCastException)) {
			System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.Of(this.T).ThrowInvalidTypeException(value, "value");
		} else {
			throw $exception;
		}
	}
};
System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype.ICollection_CopyTo = function (array, index) {
	$asm08.System.Dynamic.Utils.ContractUtils.RequiresNotNull(array, "array");
	$asm08.System.Dynamic.Utils.ContractUtils.Requires$1((array.Rank === 1), "array");
	System.Array.Copy$1(
		this._items, 
		0, 
		array, 
		index, 
		this._size
	);
};
System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype.ICollection_get_IsSynchronized = function () {
	return false;
};
System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype.ICollection_get_SyncRoot = function () {
	if (this._syncRoot === null) {
		System.Threading.Interlocked.CompareExchange$b1(System.Object)(/* ref */ new JSIL.MemberReference(this, "_syncRoot"), new System.Object(), null);
	}
	return this._syncRoot;
};
System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype.Reverse$0 = function () {
	this.Reverse$1(0, this.Count);
};
System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype.Reverse$1 = function (index, count) {
	$asm08.System.Dynamic.Utils.ContractUtils.Requires$1((index >= 0), "index");
	$asm08.System.Dynamic.Utils.ContractUtils.Requires$1((count >= 0), "count");
	System.Array.Reverse$1(this._items, index, count);
	++this._version;
};
System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype.ToArray = function () {
	var array = JSIL.Array.New(this.T, this._size);
	System.Array.Copy$1(
		this._items, 
		0, 
		array, 
		0, 
		this._size
	);
	return array;
};
System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype.ToReadOnlyCollection = function () {
	if (this._size === this._items.length) {
		var list = this._items;
	} else {
		list = this.ToArray();
	}
	this._items = System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.Of(this.T)._emptyArray;
	this._size = 0;
	++this._version;
	return new ($asm08.System.Runtime.CompilerServices.TrueReadOnlyCollection$b1.Of(this.T)) (list);
};
System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype.EnsureCapacity = function (min) {
	if (this._items.length < min) {
		var num = 4;
		if (this._items.length > 0) {
			num = (this._items.length * 2);
		}
		if (num < min) {
			num = min;
		}
		this.Capacity = num;
	}
};
System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.IsCompatibleObject = function (value) {
	return (JSIL.TryCast(value, this.T) || ((value === null) && 
			(null === null)));
};
System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.ValidateNullValue = function (value, argument) {
	if (!(value || (null === null))) {
		throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm08.System.Core.Strings.InvalidNullValue(this.T), argument]);
	}
};
System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.ThrowInvalidTypeException = function (value, argument) {
	throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm08.System.Core.Strings.InvalidObjectType(value ? JSIL.GetType(value) : "null", this.T), argument]);
};
JSIL.OverloadedMethod(System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Int32]], 
		["_ctor$2", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType)]]
	]);
JSIL.OverloadedMethod(System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype, "Reverse", [
		["Reverse$0", []], 
		["Reverse$1", [System.Int32, System.Int32]]
	]);
JSIL.MakeProperty(System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype, "Capacity", 
	System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype.get_Capacity, System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype.set_Capacity);
JSIL.MakeProperty(System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype, "Count", 
	System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype.get_Count, null);
JSIL.MakeProperty(System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype, "Item", 
	System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype.get_Item, System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype.set_Item);
JSIL.MakeProperty(System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype, "ICollection$b1_IsReadOnly", 
	System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype.ICollection$b1_get_IsReadOnly, null);
JSIL.MakeProperty(System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype, "IList_IsReadOnly", 
	System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype.IList_get_IsReadOnly, null);
JSIL.MakeProperty(System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype, "IList_IsFixedSize", 
	System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype.IList_get_IsFixedSize, null);
JSIL.MakeProperty(System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype, "IList_Item", 
	System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype.IList_get_Item, System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype.IList_set_Item);
JSIL.MakeProperty(System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype, "ICollection_IsSynchronized", 
	System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype.ICollection_get_IsSynchronized, null);
JSIL.MakeProperty(System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype, "ICollection_SyncRoot", 
	System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype.ICollection_get_SyncRoot, null);
Object.defineProperty(System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1, "DefaultCapacity", {
		"value": 4}
);
System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype._items = null;
System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype._size = 0;
System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype._version = 0;
System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.prototype._syncRoot = null;
System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1._emptyArray = null;
System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1._cctor = function () {
	System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.Of(this.T)._emptyArray = JSIL.Array.New(this.T, 0);
};

$asm08.System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.Enumerator.prototype._ctor = function (builder) {
	System.Object.prototype._ctor.call(this);
	this._builder = builder;
	this._version = builder._version;
	this._index = 0;
	this._current = null;
};
$asm08.System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.Enumerator.prototype.get_Current = function () {
	return this._current;
};
$asm08.System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.Enumerator.prototype.Dispose = function () {
	System.GC.SuppressFinalize(this);
};
$asm08.System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.Enumerator.prototype.IEnumerator_get_Current = function () {
	if (!((this._index !== 0) && (this._index <= this._builder._size))) {
		throw $asm08.System.Core.Error.EnumerationIsDone();
	}
	return this._current;
};
$asm08.System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.Enumerator.prototype.MoveNext = function () {
	if (this._version !== this._builder._version) {
		throw $asm08.System.Core.Error.CollectionModifiedWhileEnumerating();
	}
	if (this._index < this._builder._size) {
		this._current = this._builder._items[this._index++];
		return true;
	}
	this._index = (this._builder._size + 1);
	this._current = null;
	return false;
};
$asm08.System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.Enumerator.prototype.IEnumerator_Reset = function () {
	if (this._version !== this._builder._version) {
		throw $asm08.System.Core.Error.CollectionModifiedWhileEnumerating();
	}
	this._index = 0;
	this._current = null;
};
JSIL.MakeProperty($asm08.System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.Enumerator.prototype, "Current", 
	$asm08.System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.Enumerator.prototype.get_Current, null);
JSIL.MakeProperty($asm08.System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.Enumerator.prototype, "IEnumerator_Current", 
	$asm08.System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.Enumerator.prototype.IEnumerator_get_Current, null);
$asm08.System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.Enumerator.prototype._builder = null;
$asm08.System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.Enumerator.prototype._version = 0;
$asm08.System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.Enumerator.prototype._index = 0;
$asm08.System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.Enumerator.prototype._current = null;

$asm08.System.Dynamic.Utils.ReadOnlyDictionary$b2.prototype._ctor = function (dict) {
	System.Object.prototype._ctor.call(this);
	var readOnlyDictionary = JSIL.TryCast(dict, $asm08.System.Dynamic.Utils.ReadOnlyDictionary$b2.Of(this.K, this.V));
	this._dict = readOnlyDictionary ? readOnlyDictionary._dict : dict;
};
$asm08.System.Dynamic.Utils.ReadOnlyDictionary$b2.prototype.ContainsKey = function (key) {
	return this._dict.IDictionary$b2_ContainsKey(key);
};
$asm08.System.Dynamic.Utils.ReadOnlyDictionary$b2.prototype.get_Keys = function () {
	var keys = JSIL.Cast(this._dict.IDictionary$b2_Keys, System.Collections.Generic.ICollection$b1.Of(this.K));
	if (!keys.ICollection$b1_IsReadOnly) {
		return new ($asm08.System.Dynamic.Utils.ReadOnlyDictionary$b2.ReadOnlyWrapper$b1.Of(this.K, this.V, this.K)) (keys);
	}
	return keys;
};
$asm08.System.Dynamic.Utils.ReadOnlyDictionary$b2.prototype.TryGetValue = function (key, /* ref */ value) {
	return this._dict.IDictionary$b2_TryGetValue(key, /* ref */ value);
};
$asm08.System.Dynamic.Utils.ReadOnlyDictionary$b2.prototype.get_Values = function () {
	var values = JSIL.Cast(this._dict.IDictionary$b2_Values, System.Collections.Generic.ICollection$b1.Of(this.V));
	if (!values.ICollection$b1_IsReadOnly) {
		return new ($asm08.System.Dynamic.Utils.ReadOnlyDictionary$b2.ReadOnlyWrapper$b1.Of(this.K, this.V, this.V)) (values);
	}
	return values;
};
$asm08.System.Dynamic.Utils.ReadOnlyDictionary$b2.prototype.get_Item = function (key) {
	return this._dict.IDictionary$b2_get_Item(key);
};
$asm08.System.Dynamic.Utils.ReadOnlyDictionary$b2.prototype.IDictionary$b2_Add = function (key, value) {
	throw $asm08.System.Core.Error.CollectionReadOnly();
};
$asm08.System.Dynamic.Utils.ReadOnlyDictionary$b2.prototype.IDictionary$b2_Remove = function (key) {
	throw $asm08.System.Core.Error.CollectionReadOnly();
};
$asm08.System.Dynamic.Utils.ReadOnlyDictionary$b2.prototype.IDictionary$b2_get_Item = function (key) {
	return this._dict.IDictionary$b2_get_Item(key);
};
$asm08.System.Dynamic.Utils.ReadOnlyDictionary$b2.prototype.IDictionary$b2_set_Item = function (key, value) {
	throw $asm08.System.Core.Error.CollectionReadOnly();
};
$asm08.System.Dynamic.Utils.ReadOnlyDictionary$b2.prototype.Contains = function (item) {
	return this._dict.ICollection$b1_Contains(item);
};
$asm08.System.Dynamic.Utils.ReadOnlyDictionary$b2.prototype.CopyTo = function (array, arrayIndex) {
	this._dict.ICollection$b1_CopyTo(array, arrayIndex);
};
$asm08.System.Dynamic.Utils.ReadOnlyDictionary$b2.prototype.get_Count = function () {
	return this._dict.ICollection$b1_Count;
};
$asm08.System.Dynamic.Utils.ReadOnlyDictionary$b2.prototype.get_IsReadOnly = function () {
	return true;
};
$asm08.System.Dynamic.Utils.ReadOnlyDictionary$b2.prototype.ICollection$b1_Add = function (item) {
	throw $asm08.System.Core.Error.CollectionReadOnly();
};
$asm08.System.Dynamic.Utils.ReadOnlyDictionary$b2.prototype.ICollection$b1_Clear = function () {
	throw $asm08.System.Core.Error.CollectionReadOnly();
};
$asm08.System.Dynamic.Utils.ReadOnlyDictionary$b2.prototype.ICollection$b1_Remove = function (item) {
	throw $asm08.System.Core.Error.CollectionReadOnly();
};
$asm08.System.Dynamic.Utils.ReadOnlyDictionary$b2.prototype.GetEnumerator = function () {
	return this._dict.IEnumerable$b1_GetEnumerator();
};
$asm08.System.Dynamic.Utils.ReadOnlyDictionary$b2.prototype.IEnumerable_GetEnumerator = function () {
	return this._dict.IEnumerable$b1_GetEnumerator();
};
JSIL.MakeProperty($asm08.System.Dynamic.Utils.ReadOnlyDictionary$b2.prototype, "Keys", 
	$asm08.System.Dynamic.Utils.ReadOnlyDictionary$b2.prototype.get_Keys, null);
JSIL.MakeProperty($asm08.System.Dynamic.Utils.ReadOnlyDictionary$b2.prototype, "Values", 
	$asm08.System.Dynamic.Utils.ReadOnlyDictionary$b2.prototype.get_Values, null);
JSIL.MakeProperty($asm08.System.Dynamic.Utils.ReadOnlyDictionary$b2.prototype, "Item", 
	$asm08.System.Dynamic.Utils.ReadOnlyDictionary$b2.prototype.get_Item, null);
JSIL.MakeProperty($asm08.System.Dynamic.Utils.ReadOnlyDictionary$b2.prototype, "IDictionary$b2_Item", 
	$asm08.System.Dynamic.Utils.ReadOnlyDictionary$b2.prototype.IDictionary$b2_get_Item, $asm08.System.Dynamic.Utils.ReadOnlyDictionary$b2.prototype.IDictionary$b2_set_Item);
JSIL.MakeProperty($asm08.System.Dynamic.Utils.ReadOnlyDictionary$b2.prototype, "Count", 
	$asm08.System.Dynamic.Utils.ReadOnlyDictionary$b2.prototype.get_Count, null);
JSIL.MakeProperty($asm08.System.Dynamic.Utils.ReadOnlyDictionary$b2.prototype, "IsReadOnly", 
	$asm08.System.Dynamic.Utils.ReadOnlyDictionary$b2.prototype.get_IsReadOnly, null);
$asm08.System.Dynamic.Utils.ReadOnlyDictionary$b2.prototype._dict = null;

$asm08.System.Dynamic.Utils.ReadOnlyDictionary$b2.ReadOnlyWrapper$b1.prototype._ctor = function (collection) {
	System.Object.prototype._ctor.call(this);
	this._collection = collection;
};
$asm08.System.Dynamic.Utils.ReadOnlyDictionary$b2.ReadOnlyWrapper$b1.prototype.Add = function (item) {
	throw $asm08.System.Core.Error.CollectionReadOnly();
};
$asm08.System.Dynamic.Utils.ReadOnlyDictionary$b2.ReadOnlyWrapper$b1.prototype.Clear = function () {
	throw $asm08.System.Core.Error.CollectionReadOnly();
};
$asm08.System.Dynamic.Utils.ReadOnlyDictionary$b2.ReadOnlyWrapper$b1.prototype.Contains = function (item) {
	return this._collection.ICollection$b1_Contains(item);
};
$asm08.System.Dynamic.Utils.ReadOnlyDictionary$b2.ReadOnlyWrapper$b1.prototype.CopyTo = function (array, arrayIndex) {
	this._collection.ICollection$b1_CopyTo(array, arrayIndex);
};
$asm08.System.Dynamic.Utils.ReadOnlyDictionary$b2.ReadOnlyWrapper$b1.prototype.get_Count = function () {
	return this._collection.ICollection$b1_Count;
};
$asm08.System.Dynamic.Utils.ReadOnlyDictionary$b2.ReadOnlyWrapper$b1.prototype.get_IsReadOnly = function () {
	return true;
};
$asm08.System.Dynamic.Utils.ReadOnlyDictionary$b2.ReadOnlyWrapper$b1.prototype.Remove = function (item) {
	throw $asm08.System.Core.Error.CollectionReadOnly();
};
$asm08.System.Dynamic.Utils.ReadOnlyDictionary$b2.ReadOnlyWrapper$b1.prototype.GetEnumerator = function () {
	return this._collection.IEnumerable$b1_GetEnumerator();
};
$asm08.System.Dynamic.Utils.ReadOnlyDictionary$b2.ReadOnlyWrapper$b1.prototype.IEnumerable_GetEnumerator = function () {
	return this._collection.IEnumerable$b1_GetEnumerator();
};
JSIL.MakeProperty($asm08.System.Dynamic.Utils.ReadOnlyDictionary$b2.ReadOnlyWrapper$b1.prototype, "Count", 
	$asm08.System.Dynamic.Utils.ReadOnlyDictionary$b2.ReadOnlyWrapper$b1.prototype.get_Count, null);
JSIL.MakeProperty($asm08.System.Dynamic.Utils.ReadOnlyDictionary$b2.ReadOnlyWrapper$b1.prototype, "IsReadOnly", 
	$asm08.System.Dynamic.Utils.ReadOnlyDictionary$b2.ReadOnlyWrapper$b1.prototype.get_IsReadOnly, null);
$asm08.System.Dynamic.Utils.ReadOnlyDictionary$b2.ReadOnlyWrapper$b1.prototype._collection = null;

$asm08.System.Dynamic.Utils.ReferenceEqualityComparer$b1.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm08.System.Dynamic.Utils.ReferenceEqualityComparer$b1.prototype.Equals = function (x, y) {
	return System.Object.ReferenceEquals(x, y);
};
$asm08.System.Dynamic.Utils.ReferenceEqualityComparer$b1.prototype.GetHashCode = function (obj) {
	return System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(obj);
};
$asm08.System.Dynamic.Utils.ReferenceEqualityComparer$b1.Instance = null;
$asm08.System.Dynamic.Utils.ReferenceEqualityComparer$b1._cctor = function () {
	$asm08.System.Dynamic.Utils.ReferenceEqualityComparer$b1.Of(this.T).Instance = new ($asm08.System.Dynamic.Utils.ReferenceEqualityComparer$b1.Of(this.T)) ();
};

System.Runtime.CompilerServices.StrongBox$b1.prototype._ctor$0 = function () {
	System.Object.prototype._ctor.call(this);
};
System.Runtime.CompilerServices.StrongBox$b1.prototype._ctor$1 = function (value) {
	System.Object.prototype._ctor.call(this);
	this.Value = value;
};
System.Runtime.CompilerServices.StrongBox$b1.prototype.IStrongBox_get_Value = function () {
	return this.Value;
};
System.Runtime.CompilerServices.StrongBox$b1.prototype.IStrongBox_set_Value = function (value) {
	this.Value = JSIL.Cast(value, this.T);
};
JSIL.OverloadedMethod(System.Runtime.CompilerServices.StrongBox$b1.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [JSIL.AnyType]]
	]);
JSIL.MakeProperty(System.Runtime.CompilerServices.StrongBox$b1.prototype, "IStrongBox_Value", 
	System.Runtime.CompilerServices.StrongBox$b1.prototype.IStrongBox_get_Value, System.Runtime.CompilerServices.StrongBox$b1.prototype.IStrongBox_set_Value);
System.Runtime.CompilerServices.StrongBox$b1.prototype.Value = null;

$asm08.System.Runtime.CompilerServices.TrueReadOnlyCollection$b1.prototype._ctor = function (list) {
	System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(this.T).prototype._ctor.call(this, JSIL.Cast(list, System.Collections.Generic.IList$b1.Of(this.T)));
};

$asm08.System.Dynamic.Utils.TypeExtensions.CreateDelegate$0 = function (methodInfo, delegateType) {
	var dynamicMethod = JSIL.TryCast(methodInfo, System.Reflection.Emit.DynamicMethod);
	if (dynamicMethod !== null) {
		return dynamicMethod.CreateDelegate$0(delegateType);
	}
	return System.Delegate.CreateDelegate$9(delegateType, methodInfo);
};
$asm08.System.Dynamic.Utils.TypeExtensions.CreateDelegate$1 = function (methodInfo, delegateType, target) {
	var dynamicMethod = JSIL.TryCast(methodInfo, System.Reflection.Emit.DynamicMethod);
	if (dynamicMethod !== null) {
		return dynamicMethod.CreateDelegate$1(delegateType, target);
	}
	return System.Delegate.CreateDelegate$7(delegateType, target, methodInfo);
};
$asm08.System.Dynamic.Utils.TypeExtensions.GetReturnType = function (mi) {
	if (!mi.IsConstructor) {
		return JSIL.Cast(mi, System.Reflection.MethodInfo).ReturnType;
	}
	return mi.DeclaringType;
};
$asm08.System.Dynamic.Utils.TypeExtensions.GetParametersCached = function (method) {
	var paramInfoCache = null;
	System.Threading.Monitor.Enter((paramInfoCache = $asm08.System.Dynamic.Utils.TypeExtensions._ParamInfoCache));
	try {
		if (!$asm08.System.Dynamic.Utils.TypeExtensions._ParamInfoCache.TryGetValue(method, /* ref */ parameters)) {
			var parameters = new JSIL.Variable(method.GetParameters());
			var declaringType = method.DeclaringType;
			if (!((declaringType === null) || !$asm08.System.Dynamic.Utils.TypeUtils.CanCache(declaringType))) {
				$asm08.System.Dynamic.Utils.TypeExtensions._ParamInfoCache.set_Item(method, parameters.value);
			}
		}
	} finally {
		System.Threading.Monitor.Exit(paramInfoCache);
	}
	return parameters.value;
};
$asm08.System.Dynamic.Utils.TypeExtensions.IsByRefParameter = function (pi) {
	return (pi.ParameterType.IsByRef || ((pi.Attributes & System.Reflection.ParameterAttributes.Out) === System.Reflection.ParameterAttributes.Out));
};
$asm08.System.Dynamic.Utils.TypeExtensions.GetMethodValidated = function (type, name, bindingAttr, binder, types, modifiers) {
	var method = type.GetMethod$1(
		name, 
		bindingAttr, 
		binder, 
		types, 
		modifiers
	);
	if (!$asm08.System.Dynamic.Utils.TypeExtensions.MatchesArgumentTypes(method, types)) {
		return null;
	}
	return method;
};
$asm08.System.Dynamic.Utils.TypeExtensions.MatchesArgumentTypes = function (mi, argTypes) {
	if (!((mi !== null) && argTypes)) {
		return false;
	}
	var parameters = mi.GetParameters();
	if (parameters.length !== argTypes.length) {
		return false;
	}
__loop0__: 
	for (var i = 0; i < parameters.length; ++i) {
		if (!$asm08.System.Dynamic.Utils.TypeUtils.AreReferenceAssignable(parameters[i].ParameterType, argTypes[i])) {
			return false;
		}
	}
	return true;
};
JSIL.OverloadedMethod($asm08.System.Dynamic.Utils.TypeExtensions, "CreateDelegate", [
		["CreateDelegate$0", [System.Reflection.MethodInfo, System.Type]], 
		["CreateDelegate$1", [System.Reflection.MethodInfo, System.Type, System.Object]]
	]);
$asm08.System.Dynamic.Utils.TypeExtensions._ParamInfoCache = null;
$asm08.System.Dynamic.Utils.TypeExtensions._cctor = function () {
	$asm08.System.Dynamic.Utils.TypeExtensions._ParamInfoCache = new ($asm08.System.Dynamic.Utils.CacheDict$b2.Of(System.Reflection.MethodBase, System.Array.Of(System.Reflection.ParameterInfo))) (75);
};

System.Runtime.CompilerServices.DynamicAttribute.prototype._ctor$0 = function () {
	System.Attribute.prototype._ctor.call(this);
	this._transformFlags = JSIL.Array.New(System.Boolean, [true]);
};
System.Runtime.CompilerServices.DynamicAttribute.prototype._ctor$1 = function (transformFlags) {
	System.Attribute.prototype._ctor.call(this);
	if (transformFlags === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["transformFlags"]);
	}
	this._transformFlags = transformFlags;
};
System.Runtime.CompilerServices.DynamicAttribute.prototype.get_TransformFlags = function () {
	return System.Array.AsReadOnly$b1(System.Boolean)(this._transformFlags);
};
JSIL.OverloadedMethod(System.Runtime.CompilerServices.DynamicAttribute.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Array.Of(System.Boolean)]]
	]);
JSIL.MakeProperty(System.Runtime.CompilerServices.DynamicAttribute.prototype, "TransformFlags", 
	System.Runtime.CompilerServices.DynamicAttribute.prototype.get_TransformFlags, null);
System.Runtime.CompilerServices.DynamicAttribute.prototype._transformFlags = null;

System.Runtime.CompilerServices.ExecutionScope.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
	this.Parent = null;
	this.Globals = null;
	this.Locals = null;
};
System.Runtime.CompilerServices.ExecutionScope.prototype.CreateHoistedLocals = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
System.Runtime.CompilerServices.ExecutionScope.prototype.CreateDelegate = function (indexLambda, locals) {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
System.Runtime.CompilerServices.ExecutionScope.prototype.IsolateExpression = function (expression, locals) {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
System.Runtime.CompilerServices.ExecutionScope.prototype.Parent = null;
System.Runtime.CompilerServices.ExecutionScope.prototype.Globals = null;
System.Runtime.CompilerServices.ExecutionScope.prototype.Locals = null;

JSIL.QueueInitializer(function () {
		$asm08.System.Globalization.DaylightTime.prototype.__StructFields__ = [
			["m_start", System.DateTime], 
			["m_end", System.DateTime], 
			["m_delta", System.TimeSpan]
		];
	});
JSIL.QueueInitializer(function () {
		$asm08.Microsoft.Win32.SystemExtras.TimeZoneInformation.prototype.__StructFields__ = [
			["StandardDate", $asm08.Microsoft.Win32.SystemExtras.SystemTime], 
			["DaylightDate", $asm08.Microsoft.Win32.SystemExtras.SystemTime]
		];
	});
JSIL.QueueInitializer(function () {
		$asm08.Microsoft.Win32.SystemExtras.DynamicTimeZoneInformation.prototype.__StructFields__ = [
			["StandardDate", $asm08.Microsoft.Win32.SystemExtras.SystemTime], 
			["DaylightDate", $asm08.Microsoft.Win32.SystemExtras.SystemTime]
		];
	});
JSIL.QueueInitializer(function () {
		$asm08.Microsoft.Win32.SystemExtras.RegistryTimeZoneInformation.prototype.__StructFields__ = [
			["StandardDate", $asm08.Microsoft.Win32.SystemExtras.SystemTime], 
			["DaylightDate", $asm08.Microsoft.Win32.SystemExtras.SystemTime]
		];
	});
JSIL.QueueInitializer(function () {
		JSIL.ExternalMembers($asm08.Microsoft.Win32.UnsafeNativeMethods, 
			"GetFileMUIPath", "LoadString", "LoadLibraryEx", "FreeLibrary"
		);
	});
JSIL.QueueInitializer(function () {
		JSIL.ExternalMembers($asm08.Microsoft.Win32.SafeLibraryHandle.prototype, 
			"_ctor"
		);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Collections.Generic.HashSet$b1, [
				"System.Collections.Generic.ISet$b1", "System.Collections.Generic.ICollection$b1", "System.Collections.Generic.IEnumerable$b1", "System.Collections.IEnumerable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Collections.Generic.HashSet$b1.Enumerator, [
				"System.Collections.Generic.IEnumerator$b1", "System.IDisposable", "System.Collections.IEnumerator"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.Enumerable.Iterator$b1, [
				"System.Collections.Generic.IEnumerable$b1", "System.Collections.IEnumerable", "System.Collections.Generic.IEnumerator$b1", "System.IDisposable", "System.Collections.IEnumerator"
			]);
	});
JSIL.QueueInitializer(function () {
		$asm08.System.Linq.Enumerable.WhereListIterator$b1.prototype.__StructFields__ = [
			["enumerator", System.Collections.Generic.List$b1.Enumerator.Of(JSIL.AnyType)]
		];
	});
JSIL.QueueInitializer(function () {
		$asm08.System.Linq.Enumerable.WhereSelectListIterator$b2.prototype.__StructFields__ = [
			["enumerator", System.Collections.Generic.List$b1.Enumerator.Of(JSIL.AnyType)]
		];
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.Enumerable.$lWhereIterator$gd__0$b1, [
				"System.Collections.Generic.IEnumerable$b1", "System.Collections.IEnumerable", "System.Collections.Generic.IEnumerator$b1", "System.Collections.IEnumerator", "System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.Enumerable.$lSelectIterator$gd__7$b2, [
				"System.Collections.Generic.IEnumerable$b1", "System.Collections.IEnumerable", "System.Collections.Generic.IEnumerator$b1", "System.Collections.IEnumerator", "System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__14$b2, [
				"System.Collections.Generic.IEnumerable$b1", "System.Collections.IEnumerable", "System.Collections.Generic.IEnumerator$b1", "System.Collections.IEnumerator", "System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__1d$b2, [
				"System.Collections.Generic.IEnumerable$b1", "System.Collections.IEnumerable", "System.Collections.Generic.IEnumerator$b1", "System.Collections.IEnumerator", "System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__27$b3, [
				"System.Collections.Generic.IEnumerable$b1", "System.Collections.IEnumerable", "System.Collections.Generic.IEnumerator$b1", "System.Collections.IEnumerator", "System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.Enumerable.$lSelectManyIterator$gd__31$b3, [
				"System.Collections.Generic.IEnumerable$b1", "System.Collections.IEnumerable", "System.Collections.Generic.IEnumerator$b1", "System.Collections.IEnumerator", "System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.Enumerable.$lTakeIterator$gd__3a$b1, [
				"System.Collections.Generic.IEnumerable$b1", "System.Collections.IEnumerable", "System.Collections.Generic.IEnumerator$b1", "System.Collections.IEnumerator", "System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.Enumerable.$lTakeWhileIterator$gd__40$b1, [
				"System.Collections.Generic.IEnumerable$b1", "System.Collections.IEnumerable", "System.Collections.Generic.IEnumerator$b1", "System.Collections.IEnumerator", "System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.Enumerable.$lTakeWhileIterator$gd__46$b1, [
				"System.Collections.Generic.IEnumerable$b1", "System.Collections.IEnumerable", "System.Collections.Generic.IEnumerator$b1", "System.Collections.IEnumerator", "System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.Enumerable.$lSkipIterator$gd__4d$b1, [
				"System.Collections.Generic.IEnumerable$b1", "System.Collections.IEnumerable", "System.Collections.Generic.IEnumerator$b1", "System.Collections.IEnumerator", "System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.Enumerable.$lSkipWhileIterator$gd__52$b1, [
				"System.Collections.Generic.IEnumerable$b1", "System.Collections.IEnumerable", "System.Collections.Generic.IEnumerator$b1", "System.Collections.IEnumerator", "System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.Enumerable.$lSkipWhileIterator$gd__59$b1, [
				"System.Collections.Generic.IEnumerable$b1", "System.Collections.IEnumerable", "System.Collections.Generic.IEnumerator$b1", "System.Collections.IEnumerator", "System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.Enumerable.$lJoinIterator$gd__61$b4, [
				"System.Collections.Generic.IEnumerable$b1", "System.Collections.IEnumerable", "System.Collections.Generic.IEnumerator$b1", "System.Collections.IEnumerator", "System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.Enumerable.$lGroupJoinIterator$gd__6a$b4, [
				"System.Collections.Generic.IEnumerable$b1", "System.Collections.IEnumerable", "System.Collections.Generic.IEnumerator$b1", "System.Collections.IEnumerator", "System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.Enumerable.$lConcatIterator$gd__71$b1, [
				"System.Collections.Generic.IEnumerable$b1", "System.Collections.IEnumerable", "System.Collections.Generic.IEnumerator$b1", "System.Collections.IEnumerator", "System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.Enumerable.$lZipIterator$gd__7a$b3, [
				"System.Collections.Generic.IEnumerable$b1", "System.Collections.IEnumerable", "System.Collections.Generic.IEnumerator$b1", "System.Collections.IEnumerator", "System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.Enumerable.$lDistinctIterator$gd__81$b1, [
				"System.Collections.Generic.IEnumerable$b1", "System.Collections.IEnumerable", "System.Collections.Generic.IEnumerator$b1", "System.Collections.IEnumerator", "System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.Enumerable.$lUnionIterator$gd__88$b1, [
				"System.Collections.Generic.IEnumerable$b1", "System.Collections.IEnumerable", "System.Collections.Generic.IEnumerator$b1", "System.Collections.IEnumerator", "System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.Enumerable.$lIntersectIterator$gd__92$b1, [
				"System.Collections.Generic.IEnumerable$b1", "System.Collections.IEnumerable", "System.Collections.Generic.IEnumerator$b1", "System.Collections.IEnumerator", "System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.Enumerable.$lExceptIterator$gd__99$b1, [
				"System.Collections.Generic.IEnumerable$b1", "System.Collections.IEnumerable", "System.Collections.Generic.IEnumerator$b1", "System.Collections.IEnumerator", "System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.Enumerable.$lReverseIterator$gd__a0$b1, [
				"System.Collections.Generic.IEnumerable$b1", "System.Collections.IEnumerable", "System.Collections.Generic.IEnumerator$b1", "System.Collections.IEnumerator", "System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		$asm08.System.Linq.Enumerable.$lReverseIterator$gd__a0$b1.prototype.__StructFields__ = [
			["<buffer>5__a1", $asm08.System.Linq.Buffer$b1.Of(JSIL.AnyType)]
		];
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.Enumerable.$lDefaultIfEmptyIterator$gd__a5$b1, [
				"System.Collections.Generic.IEnumerable$b1", "System.Collections.IEnumerable", "System.Collections.Generic.IEnumerator$b1", "System.Collections.IEnumerator", "System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.Enumerable.$lOfTypeIterator$gd__aa$b1, [
				"System.Collections.Generic.IEnumerable$b1", "System.Collections.IEnumerable", "System.Collections.Generic.IEnumerator$b1", "System.Collections.IEnumerator", "System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.Enumerable.$lCastIterator$gd__b1$b1, [
				"System.Collections.Generic.IEnumerable$b1", "System.Collections.IEnumerable", "System.Collections.Generic.IEnumerator$b1", "System.Collections.IEnumerator", "System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.Enumerable.$lRangeIterator$gd__b8, [
				"System.Collections.Generic.IEnumerable$b1", "System.Collections.IEnumerable", "System.Collections.Generic.IEnumerator$b1", "System.Collections.IEnumerator", "System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.Enumerable.$lRepeatIterator$gd__bc$b1, [
				"System.Collections.Generic.IEnumerable$b1", "System.Collections.IEnumerable", "System.Collections.Generic.IEnumerator$b1", "System.Collections.IEnumerator", "System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Linq.Lookup$b2, [
				"System.Linq.ILookup$b2", "System.Collections.Generic.IEnumerable$b1", "System.Collections.IEnumerable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.Lookup$b2.Grouping, [
				"System.Linq.IGrouping$b2", "System.Collections.Generic.IList$b1", "System.Collections.Generic.ICollection$b1", "System.Collections.Generic.IEnumerable$b1", "System.Collections.IEnumerable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.Lookup$b2.Grouping.$lGetEnumerator$gd__7, [
				"System.Collections.Generic.IEnumerator$b1", "System.Collections.IEnumerator", "System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.Lookup$b2.$lGetEnumerator$gd__0, [
				"System.Collections.Generic.IEnumerator$b1", "System.Collections.IEnumerator", "System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.Lookup$b2.$lApplyResultSelector$gd__3$b1, [
				"System.Collections.Generic.IEnumerable$b1", "System.Collections.IEnumerable", "System.Collections.Generic.IEnumerator$b1", "System.Collections.IEnumerator", "System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.GroupedEnumerable$b4, [
				"System.Collections.Generic.IEnumerable$b1", "System.Collections.IEnumerable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.GroupedEnumerable$b3, [
				"System.Collections.Generic.IEnumerable$b1", "System.Collections.IEnumerable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.OrderedEnumerable$b1, [
				"System.Linq.IOrderedEnumerable$b1", "System.Collections.Generic.IEnumerable$b1", "System.Collections.IEnumerable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.OrderedEnumerable$b1.$lGetEnumerator$gd__0, [
				"System.Collections.Generic.IEnumerator$b1", "System.Collections.IEnumerator", "System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		$asm08.System.Linq.OrderedEnumerable$b1.$lGetEnumerator$gd__0.prototype.__StructFields__ = [
			["<buffer>5__1", $asm08.System.Linq.Buffer$b1.Of(JSIL.AnyType)]
		];
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Linq.EnumerableQuery$b1, [
				"System.Linq.IOrderedQueryable$b1", "System.Linq.IQueryable$b1", "System.Linq.IOrderedQueryable", "System.Linq.IQueryable", "System.Linq.IQueryProvider", "System.Collections.Generic.IEnumerable$b1", "System.Collections.IEnumerable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Dynamic.DynamicObject, [
				"System.Dynamic.IDynamicMetaObjectProvider"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Dynamic.ExpandoObject, [
				"System.Dynamic.IDynamicMetaObjectProvider", "System.Collections.Generic.IDictionary$b2", "System.Collections.Generic.ICollection$b1", "System.Collections.Generic.IEnumerable$b1", "System.Collections.IEnumerable", "System.ComponentModel.INotifyPropertyChanged"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Dynamic.ExpandoObject.KeyCollection, [
				"System.Collections.Generic.ICollection$b1", "System.Collections.Generic.IEnumerable$b1", "System.Collections.IEnumerable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Dynamic.ExpandoObject.KeyCollection.$lGetEnumerator$gd__4, [
				"System.Collections.Generic.IEnumerator$b1", "System.Collections.IEnumerator", "System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Dynamic.ExpandoObject.ValueCollection, [
				"System.Collections.Generic.ICollection$b1", "System.Collections.Generic.IEnumerable$b1", "System.Collections.IEnumerable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Dynamic.ExpandoObject.ValueCollection.$lGetEnumerator$gd__8, [
				"System.Collections.Generic.IEnumerator$b1", "System.Collections.IEnumerator", "System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Dynamic.ExpandoObject.MetaExpando.$lGetDynamicMemberNames$gd__10, [
				"System.Collections.Generic.IEnumerable$b1", "System.Collections.IEnumerable", "System.Collections.Generic.IEnumerator$b1", "System.Collections.IEnumerator", "System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Dynamic.ExpandoObject.$lGetExpandoEnumerator$gd__0, [
				"System.Collections.Generic.IEnumerator$b1", "System.Collections.IEnumerator", "System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		$asm08.System.Dynamic.ExpandoObject.$lGetExpandoEnumerator$gd__0.prototype.__StructFields__ = [
			["<>2__current", System.Collections.Generic.KeyValuePair$b2.Of(System.String, System.Object)]
		];
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Runtime.CompilerServices.RuntimeOps.RuntimeVariables, [
				"System.Runtime.CompilerServices.IRuntimeVariables"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Runtime.CompilerServices.RuntimeOps.MergedRuntimeVariables, [
				"System.Runtime.CompilerServices.IRuntimeVariables"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Runtime.CompilerServices.RuntimeOps.EmptyRuntimeVariables, [
				"System.Runtime.CompilerServices.IRuntimeVariables"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Runtime.CompilerServices.RuntimeOps.RuntimeVariableList, [
				"System.Runtime.CompilerServices.IRuntimeVariables"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.Expressions.BlockExpressionList, [
				"System.Collections.Generic.IList$b1", "System.Collections.Generic.ICollection$b1", "System.Collections.Generic.IEnumerable$b1", "System.Collections.IEnumerable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.Expressions.BlockExpressionList.$lGetEnumerator$gd__0, [
				"System.Collections.Generic.IEnumerator$b1", "System.Collections.IEnumerator", "System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.Expressions.BlockExpressionList.GetEnumerator$gd__3, [
				"System.Collections.Generic.IEnumerator$b1", "System.Collections.IEnumerator", "System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Linq.Expressions.DynamicExpression, [
				"System.Linq.Expressions.IArgumentProvider"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.Expressions.DynamicExpressionN, [
				"System.Linq.Expressions.IArgumentProvider"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.Expressions.DynamicExpression1, [
				"System.Linq.Expressions.IArgumentProvider"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.Expressions.DynamicExpression2, [
				"System.Linq.Expressions.IArgumentProvider"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.Expressions.DynamicExpression3, [
				"System.Linq.Expressions.IArgumentProvider"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.Expressions.DynamicExpression4, [
				"System.Linq.Expressions.IArgumentProvider"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Linq.Expressions.ElementInit, [
				"System.Linq.Expressions.IArgumentProvider"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Linq.Expressions.IndexExpression, [
				"System.Linq.Expressions.IArgumentProvider"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Linq.Expressions.InvocationExpression, [
				"System.Linq.Expressions.IArgumentProvider"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.Expressions.ListArgumentProvider, [
				"System.Collections.Generic.IList$b1", "System.Collections.Generic.ICollection$b1", "System.Collections.Generic.IEnumerable$b1", "System.Collections.IEnumerable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.Expressions.ListArgumentProvider.$lGetEnumerator$gd__0, [
				"System.Collections.Generic.IEnumerator$b1", "System.Collections.IEnumerator", "System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.Expressions.ListArgumentProvider.GetEnumerator$gd__3, [
				"System.Collections.Generic.IEnumerator$b1", "System.Collections.IEnumerator", "System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Linq.Expressions.MethodCallExpression, [
				"System.Linq.Expressions.IArgumentProvider"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.Expressions.MethodCallExpressionN, [
				"System.Linq.Expressions.IArgumentProvider"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.Expressions.InstanceMethodCallExpressionN, [
				"System.Linq.Expressions.IArgumentProvider"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.Expressions.MethodCallExpression1, [
				"System.Linq.Expressions.IArgumentProvider"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.Expressions.MethodCallExpression2, [
				"System.Linq.Expressions.IArgumentProvider"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.Expressions.MethodCallExpression3, [
				"System.Linq.Expressions.IArgumentProvider"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.Expressions.MethodCallExpression4, [
				"System.Linq.Expressions.IArgumentProvider"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.Expressions.MethodCallExpression5, [
				"System.Linq.Expressions.IArgumentProvider"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.Expressions.InstanceMethodCallExpression2, [
				"System.Linq.Expressions.IArgumentProvider"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.Expressions.InstanceMethodCallExpression3, [
				"System.Linq.Expressions.IArgumentProvider"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Linq.Expressions.NewExpression, [
				"System.Linq.Expressions.IArgumentProvider"
			]);
	});
JSIL.QueueInitializer(function () {
		$asm08.System.Linq.Expressions.SymbolDocumentWithGuids.prototype.__StructFields__ = [
			["_language", System.Guid], 
			["_vendor", System.Guid], 
			["_documentType", System.Guid]
		];
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.Expressions.Compiler.BoundConstants.TypedConstant, [
				"System.IEquatable$b1"
			]);
	});
JSIL.QueueInitializer(function () {
		$asm08.System.Linq.Expressions.Compiler.LabelInfo.prototype.__StructFields__ = [
			["_label", System.Reflection.Emit.Label], 
			["_opCode", System.Reflection.Emit.OpCode]
		];
	});
JSIL.QueueInitializer(function () {
		$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.SwitchLabel.prototype.__StructFields__ = [
			["Key", System.Decimal], 
			["Label", System.Reflection.Emit.Label]
		];
	});
JSIL.QueueInitializer(function () {
		$asm08.System.Linq.Expressions.Compiler.LambdaCompiler.SwitchInfo.prototype.__StructFields__ = [
			["Default", System.Reflection.Emit.Label]
		];
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Linq.Expressions.Set$b1, [
				"System.Collections.Generic.ICollection$b1", "System.Collections.Generic.IEnumerable$b1", "System.Collections.IEnumerable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Dynamic.Utils.CollectionExtensions.$lSelect$gd__0$b2, [
				"System.Collections.Generic.IEnumerable$b1", "System.Collections.IEnumerable", "System.Collections.Generic.IEnumerator$b1", "System.Collections.IEnumerator", "System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Dynamic.Utils.CollectionExtensions.$lWhere$gd__6$b1, [
				"System.Collections.Generic.IEnumerable$b1", "System.Collections.IEnumerable", "System.Collections.Generic.IEnumerator$b1", "System.Collections.IEnumerator", "System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1, [
				"System.Collections.Generic.IList$b1", "System.Collections.Generic.ICollection$b1", "System.Collections.Generic.IEnumerable$b1", "System.Collections.IList", "System.Collections.ICollection", "System.Collections.IEnumerable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Runtime.CompilerServices.ReadOnlyCollectionBuilder$b1.Enumerator, [
				"System.Collections.Generic.IEnumerator$b1", "System.IDisposable", "System.Collections.IEnumerator"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Dynamic.Utils.ReadOnlyDictionary$b2, [
				"System.Collections.Generic.IDictionary$b2", "System.Collections.Generic.ICollection$b1", "System.Collections.Generic.IEnumerable$b1", "System.Collections.IEnumerable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Dynamic.Utils.ReadOnlyDictionary$b2.ReadOnlyWrapper$b1, [
				"System.Collections.Generic.ICollection$b1", "System.Collections.Generic.IEnumerable$b1", "System.Collections.IEnumerable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm08.System.Dynamic.Utils.ReferenceEqualityComparer$b1, [
				"System.Collections.Generic.IEqualityComparer$b1"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Runtime.CompilerServices.StrongBox$b1, [
				"System.Runtime.CompilerServices.IStrongBox"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.SealTypes($asm08, "System.Core", 
			"SR"
		);
		JSIL.SealTypes($asm08, "System", 
			"Lazy`1"
		);
		JSIL.SealTypes($asm08, "System.Collections.Generic", 
			"HashHelpers"
		);
		JSIL.SealTypes($asm08, "System.Runtime.CompilerServices.CallSiteBinder", 
			"LambdaSignature`1"
		);
		JSIL.SealTypes($asm08, "System.Runtime.CompilerServices", 
			"CallSiteBinder", "CallSiteHelpers", "ReadOnlyCollectionBuilder`1"
		);
		JSIL.SealTypes($asm08, "System.Dynamic", 
			"BindingRestrictions", "DynamicMetaObject", "ExpandoClass", "ExpandoObject"
		);
		JSIL.SealTypes($asm08, "System.Dynamic.DynamicObject", 
			"MetaDynamic"
		);
		JSIL.SealTypes($asm08, "System.Dynamic.ExpandoObject", 
			"ExpandoData"
		);
		JSIL.SealTypes($asm08, "System.Linq.Expressions", 
			"Expression"
		);
		JSIL.SealTypes($asm08, "System.Dynamic.Utils", 
			"TypeUtils", "EmptyReadOnlyCollection`1", "ReferenceEqualityComparer`1", "TypeExtensions"
		);
		JSIL.SealTypes($asm08, "System.Linq.Expressions.Compiler", 
			"SymbolGuids", "DelegateHelpers"
		);
	});
