/* Generated by JSIL v0.2 build 28582. See http://jsil.org/ for more information. */ 
var $asm02 = JSIL.DeclareAssembly("System.Windows, Version=2.0.5.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e");
JSIL.DeclareNamespace("System");
JSIL.DeclareNamespace("System.Windows");
JSIL.MakeClass("System.ComponentModel.DescriptionAttribute", "System.Windows.ResxDescriptionAttribute", false);

JSIL.MakeClass("System.ComponentModel.CategoryAttribute", "System.Windows.ResxCategoryAttribute", false);

JSIL.MakeClass("System.Object", "System.Windows.Resx", false);

JSIL.DeclareNamespace("MS");
JSIL.DeclareNamespace("MS.Internal");
JSIL.MakeStaticClass("MS.Internal.CoreTypes", false);
JSIL.MakeDelegate("MS.Internal.CoreTypes/createCoreType");


JSIL.MakeStaticClass("MS.Internal.CoreEventArgs", false);

JSIL.MakeStaticClass("MS.Internal.CoreInvokeHandler", false);

JSIL.MakeDelegate("System.Windows.DragEventHandler");

JSIL.MakeDelegate("System.Windows.RoutedEventHandler");

JSIL.MakeDelegate("System.Windows.ExceptionRoutedEventHandler");

JSIL.MakeDelegate("System.Windows.MediaFailedRoutedEventHandler");

JSIL.MakeDelegate("System.Windows.StartupEventHandler");

JSIL.MakeDelegate("System.Windows.SizeChangedEventHandler");

JSIL.MakeDelegate("System.Windows.VisualStateChangedEventHandler");

JSIL.MakeDelegate("System.Windows.CheckAndDownloadUpdateCompletedEventHandler");

JSIL.MakeEnum(
	"System.Windows.LineStackingStrategy", {
		MaxHeight: 0, 
		BlockLineHeight: 1
	}, false
);

JSIL.MakeEnum(
	"System.Windows.TextAlignment", {
		Center: 0, 
		Left: 1, 
		Right: 2, 
		Justify: 3
	}, false
);

JSIL.MakeEnum(
	"System.Windows.FontWeightType", {
		Thin: 100, 
		ExtraLight: 200, 
		Light: 300, 
		Normal: 400, 
		Medium: 500, 
		SemiBold: 600, 
		Bold: 700, 
		ExtraBold: 800, 
		Black: 900, 
		ExtraBlack: 950
	}, false
);

JSIL.MakeEnum(
	"System.Windows.FontStyleType", {
		Normal: 0, 
		Oblique: 1, 
		Italic: 2
	}, false
);

JSIL.MakeEnum(
	"System.Windows.FontStretchType", {
		UltraCondensed: 1, 
		ExtraCondensed: 2, 
		Condensed: 3, 
		SemiCondensed: 4, 
		Normal: 5, 
		Medium: 5, 
		SemiExpanded: 6, 
		Expanded: 7, 
		ExtraExpanded: 8, 
		UltraExpanded: 9
	}, false
);

JSIL.MakeEnum(
	"System.Windows.HorizontalAlignment", {
		Left: 0, 
		Center: 1, 
		Right: 2, 
		Stretch: 3
	}, false
);

JSIL.MakeEnum(
	"System.Windows.VerticalAlignment", {
		Top: 0, 
		Center: 1, 
		Bottom: 2, 
		Stretch: 3
	}, false
);

JSIL.MakeEnum(
	"System.Windows.GridUnitType", {
		Auto: 0, 
		Pixel: 1, 
		Star: 2
	}, false
);

JSIL.MakeEnum(
	"System.Windows.AutomationPropertiesEnum", {
		AcceleratorKeyProperty: 0, 
		AccessKeyProperty: 1, 
		ControlTypeProperty: 2, 
		AutomationIdProperty: 3, 
		BoundingRectangleProperty: 4, 
		ClassNameProperty: 5, 
		ClickablePointProperty: 6, 
		HelpTextProperty: 7, 
		ItemStatusProperty: 8, 
		ItemTypeProperty: 9, 
		LabeledByProperty: 10, 
		LocalizedControlTypeProperty: 11, 
		NameProperty: 12, 
		OrientationProperty: 13, 
		HasKeyboardFocusProperty: 14, 
		IsControlElementProperty: 16, 
		IsContentElementProperty: 15, 
		IsEnabledProperty: 17, 
		IsKeyboardFocusableProperty: 18, 
		IsOffscreenProperty: 19, 
		IsPasswordProperty: 20, 
		IsRequiredForFormProperty: 21, 
		IsColumnHeaderProperty: 22, 
		IsRowHeaderProperty: 23, 
		StructureChangeType_ChildrenBulkRemovedProperty: 24, 
		StructureChangeType_ChildrenBulkAddedProperty: 25, 
		StructureChangeType_ChildrenInvalidatedProperty: 26, 
		StructureChangeType_ChildAddedProperty: 27, 
		StructureChangeType_ChildRemovedProperty: 28, 
		DockPositionProperty: 29, 
		ExpandCollapseStateProperty: 30, 
		ColumnProperty: 31, 
		ColumnSpanProperty: 32, 
		ContainingGridProperty: 33, 
		RowProperty: 34, 
		RowSpanProperty: 35, 
		ColumnCountProperty: 36, 
		RowCountProperty: 37, 
		CurrentViewProperty: 38, 
		SupportedViewsProperty: 39, 
		RangeValueIsReadOnlyProperty: 40, 
		LargeChangeProperty: 41, 
		MaximumProperty: 42, 
		MinimumProperty: 43, 
		SmallChangeProperty: 44, 
		RangeValueValueProperty: 45, 
		HorizontallyScrollableProperty: 46, 
		HorizontalScrollPercentProperty: 47, 
		HorizontalViewSizeProperty: 48, 
		VerticallyScrollableProperty: 49, 
		VerticalScrollPercentProperty: 50, 
		VerticalViewSizeProperty: 51, 
		IsSelectedProperty: 52, 
		SelectionContainerProperty: 53, 
		CanSelectMultipleProperty: 54, 
		IsSelectionRequiredProperty: 55, 
		SelectionProperty: 56, 
		ColumnHeaderItemsProperty: 57, 
		RowHeaderItemsProperty: 58, 
		ColumnHeadersProperty: 59, 
		RowHeadersProperty: 60, 
		RowOrColumnMajorProperty: 61, 
		ToggleStateProperty: 62, 
		CanMoveProperty: 63, 
		CanResizeProperty: 64, 
		CanRotateProperty: 65, 
		ValueIsReadOnlyProperty: 66, 
		ValueValueProperty: 67, 
		CanMaximizeProperty: 68, 
		CanMinimizeProperty: 69, 
		IsModalProperty: 70, 
		IsTopmostProperty: 71, 
		WindowInteractionStateProperty: 72, 
		WindowVisualStateProperty: 73, 
		ParentProperty: 74
	}, false
);

JSIL.MakeEnum(
	"System.Windows.CrossDomainAccess", {
		NoAccess: 0, 
		ScriptableOnly: 2
	}, false
);

JSIL.MakeEnum(
	"System.Windows.PropertyInvalidationReason", {
		SetValue: 0, 
		ClearValue: 2, 
		ApplyStyle: 5, 
		UnApplyStyle: 6
	}, false
);

JSIL.MakeEnum(
	"System.Windows.InstallState", {
		NotInstalled: 0, 
		Installing: 1, 
		Installed: 2, 
		InstallFailed: 3
	}, false
);

JSIL.MakeEnum(
	"System.Windows.WindowStartupLocation", {
		CenterScreen: 0, 
		Manual: 1
	}, false
);

JSIL.MakeEnum(
	"System.Windows.ElevatedPermissions", {
		NotRequired: 0, 
		Required: 2147483647
	}, false
);

JSIL.MakeEnum(
	"System.Windows.FlowDirection", {
		LeftToRight: 0, 
		RightToLeft: 1
	}, false
);

JSIL.MakeEnum(
	"System.Windows.WindowStyle", {
		SingleBorderWindow: 0, 
		None: 1, 
		BorderlessRoundCornersWindow: 2
	}, false
);

JSIL.MakeEnum(
	"System.Windows.AutomationTextAttributesEnum", {
		AnimationStyleAttribute: 0, 
		BackgroundColorAttribute: 1, 
		BulletStyleAttribute: 2, 
		CapStyleAttribute: 3, 
		CultureAttribute: 4, 
		FontNameAttribute: 5, 
		FontSizeAttribute: 6, 
		FontWeightAttribute: 7, 
		ForegroundColorAttribute: 8, 
		HorizontalTextAlignmentAttribute: 9, 
		IndentationFirstLineAttribute: 10, 
		IndentationLeadingAttribute: 11, 
		IndentationTrailingAttribute: 12, 
		IsHiddenAttribute: 13, 
		IsItalicAttribute: 14, 
		IsReadOnlyAttribute: 15, 
		IsSubscriptAttribute: 16, 
		IsSuperscriptAttribute: 17, 
		MarginBottomAttribute: 18, 
		MarginLeadingAttribute: 19, 
		MarginTopAttribute: 20, 
		MarginTrailingAttribute: 21, 
		OutlineStylesAttribute: 22, 
		OverlineColorAttribute: 23, 
		OverlineStyleAttribute: 24, 
		StrikethroughColorAttribute: 25, 
		StrikethroughStyleAttribute: 26, 
		TabsAttribute: 27, 
		TextFlowDirectionsAttribute: 28, 
		UnderlineColorAttribute: 29, 
		UnderlineStyleAttribute: 30
	}, false
);

JSIL.MakeInterface(
	"MS.Internal.INativeCoreTypeWrapper", [], {

	});

JSIL.MakeInterface(
	"MS.Internal.IManagedPeerBase", [], {
		"get_NativeObject": Function, 
		"NativeObject": Property
	});

JSIL.MakeInterface(
	"MS.Internal.IManagedPeer", [], {
		"GetInstanceEventDelegate": Function, 
		"BeginShutdown": Function, 
		"EndShutdown": Function, 
		"RemovePeerReferenceToItem": Function, 
		"AddPeerReferenceToItem": Function
	});

JSIL.MakeClass("System.Object", "System.Windows.DependencyObject", true);
JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.DependencyObject/ManagedReferencesToken", false);

JSIL.MakeEnum(
	"System.Windows.DependencyObject/ValueOperation", {
		Default: 0, 
		Reevaluate: 1, 
		ClearValue: 3, 
		ClearAnimation: 5
	}, false
);

JSIL.MakeDelegate("System.Windows.DependencyObject/EnterImplDelegate");

JSIL.MakeDelegate("System.Windows.DependencyObject/LeaveImplDelegate");

JSIL.MakeDelegate("System.Windows.DependencyObject/SetPeerReferenceToPropertyDelegate");

JSIL.MakeDelegate("System.Windows.DependencyObject/GetManagedReferenceDelegate");

JSIL.MakeDelegate("System.Windows.DependencyObject/StoreManagedReferenceToValueDelegate");

JSIL.MakeDelegate("System.Windows.DependencyObject/AddPeerReferenceToItemDelegate");

JSIL.MakeDelegate("System.Windows.DependencyObject/RemovePeerReferenceToItemDelegate");


JSIL.DeclareNamespace("System.Windows.Automation");
JSIL.MakeInterface(
	"System.Windows.Automation.IAutomationElement", [], {
		"GetOrCreateAutomationPeer": Function
	});

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.UIElement", true);

JSIL.MakeClass("System.Windows.UIElement", "System.Windows.FrameworkElement", true);
JSIL.MakeClass("System.Object", "System.Windows.FrameworkElement/WeakRefSTRUCT", false);

JSIL.MakeDelegate("System.Windows.FrameworkElement/OnApplyTemplateDelegate");


JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.PresentationFrameworkCollection$b1", true, ["T"]);
JSIL.MakeClass("System.Object", "System.Windows.PresentationFrameworkCollection$b1/CollectionEnum$b1", false, ["T", "TT"]);


JSIL.MakeClass(new JSIL.TypeRef($asm02, "System.Windows.PresentationFrameworkCollection$b1", ["System.Windows.TriggerBase"]), "System.Windows.TriggerCollection", true);

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.TriggerBase", true);

JSIL.MakeClass("System.Windows.TriggerBase", "System.Windows.EventTrigger", true);

JSIL.MakeClass(new JSIL.TypeRef($asm02, "System.Windows.PresentationFrameworkCollection$b1", ["System.Windows.TriggerAction"]), "System.Windows.TriggerActionCollection", true);

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.TriggerAction", true);

JSIL.MakeClass("System.EventArgs", "System.Windows.RoutedEventArgs", true);

JSIL.MakeClass("System.Windows.RoutedEventArgs", "System.Windows.DragEventArgs", true);

JSIL.MakeClass("System.Windows.RoutedEventArgs", "System.Windows.ExceptionRoutedEventArgs", true);

JSIL.MakeClass("System.Windows.ExceptionRoutedEventArgs", "System.Windows.MediaFailedRoutedEventArgs", true);

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.AssemblyPart", true);

JSIL.MakeClass(new JSIL.TypeRef($asm02, "System.Windows.PresentationFrameworkCollection$b1", ["System.Windows.AssemblyPart"]), "System.Windows.AssemblyPartCollection", true);

JSIL.MakeClass("System.EventArgs", "System.Windows.StartupEventArgs", true);

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.FrameworkTemplate", true);

JSIL.MakeClass("System.Windows.FrameworkTemplate", "System.Windows.DataTemplate", true);

JSIL.MakeClass("System.Windows.RoutedEventArgs", "System.Windows.SizeChangedEventArgs", true);

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.Style", true);

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.SetterBase", true);

JSIL.MakeClass("System.Windows.SetterBase", "System.Windows.Setter", true);

JSIL.MakeClass(new JSIL.TypeRef($asm02, "System.Windows.PresentationFrameworkCollection$b1", ["System.Windows.SetterBase"]), "System.Windows.SetterBaseCollection", true);

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.VisualState", true);

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.OutOfBrowserSettings", true);

JSIL.MakeClass(new JSIL.TypeRef($asm02, "System.Windows.PresentationFrameworkCollection$b1", ["System.Windows.Icon"]), "System.Windows.IconCollection", true);

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.Icon", true);

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.WindowSettings", true);

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.SecuritySettings", true);

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.VisualStateGroup", true);

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.VisualTransition", true);

JSIL.MakeClass("System.EventArgs", "System.Windows.VisualStateChangedEventArgs", true);

JSIL.MakeClass("System.EventArgs", "System.Windows.CheckAndDownloadUpdateCompletedEventArgs", true);

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.NotificationWindow", true);

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.Window", true);

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.VisualStateManager", true);

JSIL.DeclareNamespace("System.Windows.Ink");
JSIL.MakeClass(new JSIL.TypeRef($asm02, "System.Windows.PresentationFrameworkCollection$b1", ["System.Windows.Ink.Stroke"]), "System.Windows.Ink.StrokeCollection", true);

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.Ink.DrawingAttributes", true);

JSIL.DeclareNamespace("System.Windows.Media");
JSIL.MakeDelegate("System.Windows.Media.TimelineMarkerRoutedEventHandler");

JSIL.MakeDelegate("System.Windows.Media.LogReadyRoutedEventHandler");

JSIL.MakeDelegate("System.Windows.Media.RenderingEventHandler");

JSIL.MakeEnum(
	"System.Windows.Media.FillRule", {
		EvenOdd: 0, 
		Nonzero: 1
	}, false
);

JSIL.MakeEnum(
	"System.Windows.Media.SweepDirection", {
		Counterclockwise: 0, 
		Clockwise: 1
	}, false
);

JSIL.MakeEnum(
	"System.Windows.Media.GradientSpreadMethod", {
		Pad: 0, 
		Reflect: 1, 
		Repeat: 2
	}, false
);

JSIL.MakeEnum(
	"System.Windows.Media.ColorInterpolationMode", {
		ScRgbLinearInterpolation: 0, 
		SRgbLinearInterpolation: 1
	}, false
);

JSIL.MakeEnum(
	"System.Windows.Media.BrushMappingMode", {
		Absolute: 0, 
		RelativeToBoundingBox: 1
	}, false
);

JSIL.MakeEnum(
	"System.Windows.Media.AlignmentX", {
		Left: 0, 
		Center: 1, 
		Right: 2
	}, false
);

JSIL.MakeEnum(
	"System.Windows.Media.AlignmentY", {
		Top: 0, 
		Center: 1, 
		Bottom: 2
	}, false
);

JSIL.MakeEnum(
	"System.Windows.Media.Stretch", {
		None: 0, 
		Fill: 1, 
		Uniform: 2, 
		UniformToFill: 3
	}, false
);

JSIL.MakeEnum(
	"System.Windows.Media.LogSource", {
		RequestLog: 0, 
		Stop: 1, 
		Seek: 2, 
		Pause: 3, 
		SourceChanged: 4, 
		EndOfStream: 5, 
		MediaElementShutdown: 6, 
		RuntimeShutdown: 7
	}, false
);

JSIL.MakeEnum(
	"System.Windows.Media.StyleSimulations", {
		None: 0, 
		BoldSimulation: 1, 
		ItalicSimulation: 2, 
		BoldItalicSimulation: 3
	}, true
);

JSIL.MakeEnum(
	"System.Windows.Media.PenLineCap", {
		Flat: 0, 
		Square: 1, 
		Round: 2, 
		Triangle: 3
	}, false
);

JSIL.MakeEnum(
	"System.Windows.Media.PenLineJoin", {
		Miter: 0, 
		Bevel: 1, 
		Round: 2
	}, false
);

JSIL.MakeEnum(
	"System.Windows.Media.MediaElementState", {
		Closed: 0, 
		Opening: 1, 
		Individualizing: 6, 
		AcquiringLicense: 7, 
		Buffering: 2, 
		Playing: 3, 
		Paused: 4, 
		Stopped: 5
	}, false
);

JSIL.MakeEnum(
	"System.Windows.Media.TextHintingMode", {
		Fixed: 0, 
		Animated: 1
	}, false
);

JSIL.MakeEnum(
	"System.Windows.Media.PixelFormatType", {
		Unknown: 0, 
		Format32bppArgb: 8
	}, false
);

JSIL.MakeEnum(
	"System.Windows.Media.WaveFormatType", {
		Pcm: 1
	}, false
);

JSIL.MakeEnum(
	"System.Windows.Media.CaptureState", {
		Stopped: 0, 
		Started: 1, 
		Failed: 2
	}, false
);

JSIL.MakeClass(new JSIL.TypeRef($asm02, "System.Windows.PresentationFrameworkCollection$b1", ["System.Double"]), "System.Windows.Media.DoubleCollection", true);

JSIL.MakeClass(new JSIL.TypeRef($asm02, "System.Windows.PresentationFrameworkCollection$b1", ["System.Windows.Point"]), "System.Windows.Media.PointCollection", true);

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.Media.GeneralTransform", true);

JSIL.MakeClass("System.Windows.Media.GeneralTransform", "System.Windows.Media.Transform", true);

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.Media.PathSegment", true);

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.Media.Brush", true);

JSIL.MakeClass("System.Windows.Media.Brush", "System.Windows.Media.TileBrush", true);

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.Media.Geometry", true);

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.Media.ImageSource", true);

JSIL.MakeClass("System.Windows.Media.Transform", "System.Windows.Media.RotateTransform", true);

JSIL.MakeClass("System.Windows.Media.Transform", "System.Windows.Media.ScaleTransform", true);

JSIL.MakeClass("System.Windows.Media.Transform", "System.Windows.Media.SkewTransform", true);

JSIL.MakeClass("System.Windows.Media.Transform", "System.Windows.Media.TranslateTransform", true);

JSIL.MakeClass(new JSIL.TypeRef($asm02, "System.Windows.PresentationFrameworkCollection$b1", ["System.Windows.Media.Transform"]), "System.Windows.Media.TransformCollection", true);

JSIL.MakeClass("System.Windows.Media.Transform", "System.Windows.Media.TransformGroup", true);

JSIL.MakeClass("System.Windows.Media.Transform", "System.Windows.Media.MatrixTransform", true);

JSIL.MakeClass("System.Windows.Media.Transform", "System.Windows.Media.CompositeTransform", true);

JSIL.MakeClass("System.Windows.Media.PathSegment", "System.Windows.Media.LineSegment", true);

JSIL.MakeClass("System.Windows.Media.PathSegment", "System.Windows.Media.BezierSegment", true);

JSIL.MakeClass("System.Windows.Media.PathSegment", "System.Windows.Media.QuadraticBezierSegment", true);

JSIL.MakeClass("System.Windows.Media.PathSegment", "System.Windows.Media.ArcSegment", true);

JSIL.MakeClass("System.Windows.Media.PathSegment", "System.Windows.Media.PolyLineSegment", true);

JSIL.MakeClass("System.Windows.Media.PathSegment", "System.Windows.Media.PolyBezierSegment", true);

JSIL.MakeClass("System.Windows.Media.PathSegment", "System.Windows.Media.PolyQuadraticBezierSegment", true);

JSIL.MakeClass(new JSIL.TypeRef($asm02, "System.Windows.PresentationFrameworkCollection$b1", ["System.Windows.Media.PathSegment"]), "System.Windows.Media.PathSegmentCollection", true);

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.Media.PathFigure", true);

JSIL.MakeClass(new JSIL.TypeRef($asm02, "System.Windows.PresentationFrameworkCollection$b1", ["System.Windows.Media.PathFigure"]), "System.Windows.Media.PathFigureCollection", true);

JSIL.MakeClass("System.Windows.Media.Geometry", "System.Windows.Media.PathGeometry", true);

JSIL.MakeClass("System.Windows.Media.Geometry", "System.Windows.Media.EllipseGeometry", true);

JSIL.MakeClass("System.Windows.Media.Geometry", "System.Windows.Media.RectangleGeometry", true);

JSIL.MakeClass("System.Windows.Media.Geometry", "System.Windows.Media.LineGeometry", true);

JSIL.MakeClass(new JSIL.TypeRef($asm02, "System.Windows.PresentationFrameworkCollection$b1", ["System.Windows.Media.Geometry"]), "System.Windows.Media.GeometryCollection", true);

JSIL.MakeClass("System.Windows.Media.Geometry", "System.Windows.Media.GeometryGroup", true);

JSIL.MakeClass("System.Windows.Media.Brush", "System.Windows.Media.SolidColorBrush", true);

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.Media.GradientStop", true);

JSIL.MakeClass(new JSIL.TypeRef($asm02, "System.Windows.PresentationFrameworkCollection$b1", ["System.Windows.Media.GradientStop"]), "System.Windows.Media.GradientStopCollection", true);

JSIL.MakeClass("System.Windows.Media.Brush", "System.Windows.Media.GradientBrush", true);

JSIL.MakeClass("System.Windows.Media.GradientBrush", "System.Windows.Media.LinearGradientBrush", true);

JSIL.MakeClass("System.Windows.Media.GradientBrush", "System.Windows.Media.RadialGradientBrush", true);

JSIL.MakeClass("System.Windows.Media.TileBrush", "System.Windows.Media.ImageBrush", true);

JSIL.MakeClass("System.Windows.Media.TileBrush", "System.Windows.Media.VideoBrush", true);

JSIL.MakeClass("System.Windows.Media.Brush", "System.Windows.Media.ImplicitInputBrush", true);

JSIL.MakeClass("System.Windows.RoutedEventArgs", "System.Windows.Media.TimelineMarkerRoutedEventArgs", true);

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.Media.TimelineMarker", true);

JSIL.MakeClass(new JSIL.TypeRef($asm02, "System.Windows.PresentationFrameworkCollection$b1", ["System.Windows.Media.TimelineMarker"]), "System.Windows.Media.TimelineMarkerCollection", true);

JSIL.MakeClass("System.Windows.RoutedEventArgs", "System.Windows.Media.LogReadyRoutedEventArgs", true);

JSIL.MakeClass("System.EventArgs", "System.Windows.Media.RenderingEventArgs", true);

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.Media.Projection", true);

JSIL.MakeClass("System.Windows.Media.Projection", "System.Windows.Media.PlaneProjection", true);

JSIL.MakeClass("System.Windows.Media.Projection", "System.Windows.Media.Matrix3DProjection", true);

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.Media.CacheMode", true);

JSIL.MakeClass("System.Windows.Media.CacheMode", "System.Windows.Media.BitmapCache", true);

JSIL.MakeClass(new JSIL.TypeRef($asm02, "System.Windows.PresentationFrameworkCollection$b1", ["System.Windows.Media.VideoCaptureDevice"]), "System.Windows.Media.VideoCaptureDeviceCollection", true);

JSIL.MakeClass(new JSIL.TypeRef($asm02, "System.Windows.PresentationFrameworkCollection$b1", ["System.Windows.Media.AudioCaptureDevice"]), "System.Windows.Media.AudioCaptureDeviceCollection", true);

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.Media.CaptureDevice", true);

JSIL.MakeClass("System.Windows.Media.CaptureDevice", "System.Windows.Media.VideoCaptureDevice", true);

JSIL.MakeClass("System.Windows.Media.CaptureDevice", "System.Windows.Media.AudioCaptureDevice", true);

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.Media.CaptureSource", true);

JSIL.DeclareNamespace("System.Windows.Media.Animation");
JSIL.MakeEnum(
	"System.Windows.Media.Animation.FillBehavior", {
		HoldEnd: 0, 
		Stop: 1
	}, false
);

JSIL.MakeEnum(
	"System.Windows.Media.Animation.EasingMode", {
		EaseOut: 0, 
		EaseIn: 1, 
		EaseInOut: 2
	}, false
);

JSIL.MakeEnum(
	"System.Windows.Media.Animation.ClockState", {
		Active: 0, 
		Filling: 1, 
		Stopped: 2
	}, false
);

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.Media.Animation.Timeline", true);

JSIL.MakeInterface(
	"System.Windows.Media.Animation.IEasingFunction", [], {
		"Ease": Function
	});

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.Media.Animation.EasingFunctionBase", true);
JSIL.MakeDelegate("System.Windows.Media.Animation.EasingFunctionBase/EaseDelegate");


JSIL.MakeClass("System.Windows.Media.Animation.EasingFunctionBase", "System.Windows.Media.Animation.CircleEase", true);

JSIL.MakeClass("System.Windows.Media.Animation.EasingFunctionBase", "System.Windows.Media.Animation.BackEase", true);

JSIL.MakeClass("System.Windows.Media.Animation.EasingFunctionBase", "System.Windows.Media.Animation.ExponentialEase", true);

JSIL.MakeClass("System.Windows.Media.Animation.EasingFunctionBase", "System.Windows.Media.Animation.PowerEase", true);

JSIL.MakeClass("System.Windows.Media.Animation.EasingFunctionBase", "System.Windows.Media.Animation.QuadraticEase", true);

JSIL.MakeClass("System.Windows.Media.Animation.EasingFunctionBase", "System.Windows.Media.Animation.CubicEase", true);

JSIL.MakeClass("System.Windows.Media.Animation.EasingFunctionBase", "System.Windows.Media.Animation.QuarticEase", true);

JSIL.MakeClass("System.Windows.Media.Animation.EasingFunctionBase", "System.Windows.Media.Animation.QuinticEase", true);

JSIL.MakeClass("System.Windows.Media.Animation.EasingFunctionBase", "System.Windows.Media.Animation.ElasticEase", true);

JSIL.MakeClass("System.Windows.Media.Animation.EasingFunctionBase", "System.Windows.Media.Animation.BounceEase", true);

JSIL.MakeClass("System.Windows.Media.Animation.EasingFunctionBase", "System.Windows.Media.Animation.SineEase", true);

JSIL.MakeClass("System.Windows.TriggerAction", "System.Windows.Media.Animation.BeginStoryboard", true);

JSIL.MakeClass("System.Windows.Media.Animation.Timeline", "System.Windows.Media.Animation.Storyboard", true);

JSIL.MakeClass("System.Windows.Media.Animation.Timeline", "System.Windows.Media.Animation.DoubleAnimation", true);

JSIL.MakeClass("System.Windows.Media.Animation.Timeline", "System.Windows.Media.Animation.ColorAnimation", true);

JSIL.MakeClass("System.Windows.Media.Animation.Timeline", "System.Windows.Media.Animation.PointAnimation", true);

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.Media.Animation.KeySpline", true);

JSIL.MakeClass(new JSIL.TypeRef($asm02, "System.Windows.PresentationFrameworkCollection$b1", ["System.Windows.Media.Animation.ColorKeyFrame"]), "System.Windows.Media.Animation.ColorKeyFrameCollection", true);

JSIL.MakeClass(new JSIL.TypeRef($asm02, "System.Windows.PresentationFrameworkCollection$b1", ["System.Windows.Media.Animation.DoubleKeyFrame"]), "System.Windows.Media.Animation.DoubleKeyFrameCollection", true);

JSIL.MakeClass(new JSIL.TypeRef($asm02, "System.Windows.PresentationFrameworkCollection$b1", ["System.Windows.Media.Animation.PointKeyFrame"]), "System.Windows.Media.Animation.PointKeyFrameCollection", true);

JSIL.MakeClass(new JSIL.TypeRef($asm02, "System.Windows.PresentationFrameworkCollection$b1", ["System.Windows.Media.Animation.ObjectKeyFrame"]), "System.Windows.Media.Animation.ObjectKeyFrameCollection", true);

JSIL.MakeClass("System.Windows.Media.Animation.Timeline", "System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames", true);

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.Media.Animation.DoubleKeyFrame", true);

JSIL.MakeClass("System.Windows.Media.Animation.DoubleKeyFrame", "System.Windows.Media.Animation.DiscreteDoubleKeyFrame", true);

JSIL.MakeClass("System.Windows.Media.Animation.DoubleKeyFrame", "System.Windows.Media.Animation.LinearDoubleKeyFrame", true);

JSIL.MakeClass("System.Windows.Media.Animation.DoubleKeyFrame", "System.Windows.Media.Animation.SplineDoubleKeyFrame", true);

JSIL.MakeClass("System.Windows.Media.Animation.DoubleKeyFrame", "System.Windows.Media.Animation.EasingDoubleKeyFrame", true);

JSIL.MakeClass("System.Windows.Media.Animation.Timeline", "System.Windows.Media.Animation.ColorAnimationUsingKeyFrames", true);

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.Media.Animation.ColorKeyFrame", true);

JSIL.MakeClass("System.Windows.Media.Animation.ColorKeyFrame", "System.Windows.Media.Animation.DiscreteColorKeyFrame", true);

JSIL.MakeClass("System.Windows.Media.Animation.ColorKeyFrame", "System.Windows.Media.Animation.LinearColorKeyFrame", true);

JSIL.MakeClass("System.Windows.Media.Animation.ColorKeyFrame", "System.Windows.Media.Animation.SplineColorKeyFrame", true);

JSIL.MakeClass("System.Windows.Media.Animation.ColorKeyFrame", "System.Windows.Media.Animation.EasingColorKeyFrame", true);

JSIL.MakeClass("System.Windows.Media.Animation.Timeline", "System.Windows.Media.Animation.PointAnimationUsingKeyFrames", true);

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.Media.Animation.PointKeyFrame", true);

JSIL.MakeClass("System.Windows.Media.Animation.PointKeyFrame", "System.Windows.Media.Animation.DiscretePointKeyFrame", true);

JSIL.MakeClass("System.Windows.Media.Animation.PointKeyFrame", "System.Windows.Media.Animation.LinearPointKeyFrame", true);

JSIL.MakeClass("System.Windows.Media.Animation.PointKeyFrame", "System.Windows.Media.Animation.SplinePointKeyFrame", true);

JSIL.MakeClass("System.Windows.Media.Animation.PointKeyFrame", "System.Windows.Media.Animation.EasingPointKeyFrame", true);

JSIL.MakeClass("System.Windows.Media.Animation.Timeline", "System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames", true);

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.Media.Animation.ObjectKeyFrame", true);

JSIL.MakeClass("System.Windows.Media.Animation.ObjectKeyFrame", "System.Windows.Media.Animation.DiscreteObjectKeyFrame", true);

JSIL.MakeClass(new JSIL.TypeRef($asm02, "System.Windows.PresentationFrameworkCollection$b1", ["System.Windows.Media.Animation.Timeline"]), "System.Windows.Media.Animation.TimelineCollection", true);

JSIL.DeclareNamespace("System.Windows.Input");
JSIL.MakeDelegate("System.Windows.Input.MouseEventHandler");

JSIL.MakeDelegate("System.Windows.Input.MouseButtonEventHandler");

JSIL.MakeDelegate("System.Windows.Input.MouseWheelEventHandler");

JSIL.MakeDelegate("System.Windows.Input.TouchFrameEventHandler");

JSIL.MakeDelegate("System.Windows.Input.KeyEventHandler");

JSIL.MakeDelegate("System.Windows.Input.TextCompositionEventHandler");

JSIL.MakeEnum(
	"System.Windows.Input.TabletDeviceType", {
		Mouse: 0, 
		Stylus: 1, 
		Touch: 2
	}, false
);

JSIL.MakeEnum(
	"System.Windows.Input.KeyboardNavigationMode", {
		Local: 0, 
		Cycle: 1, 
		Once: 2
	}, false
);

JSIL.MakeEnum(
	"System.Windows.Input.TouchAction", {
		Down: 1, 
		Move: 2, 
		Up: 3
	}, false
);

JSIL.MakeEnum(
	"System.Windows.Input.ImeConversionModeValues", {
		Alphanumeric: 512, 
		Native: 1, 
		Katakana: 2, 
		FullShape: 4, 
		Roman: 8, 
		CharCode: 16, 
		NoConversion: 32, 
		Eudc: 64, 
		Symbol: 128, 
		Fixed: 256, 
		DoNotCare: 2147483647
	}, false
);

JSIL.MakeEnum(
	"System.Windows.Input.InputMethodState", {
		Off: 0, 
		On: 1, 
		DoNotCare: 2
	}, false
);

JSIL.MakeClass(new JSIL.TypeRef($asm02, "System.Windows.PresentationFrameworkCollection$b1", ["System.Windows.Input.StylusPoint"]), "System.Windows.Input.StylusPointCollection", true);

JSIL.MakeClass("System.Windows.RoutedEventArgs", "System.Windows.Input.MouseEventArgs", true);

JSIL.MakeClass("System.Windows.Input.MouseEventArgs", "System.Windows.Input.MouseButtonEventArgs", true);

JSIL.MakeClass("System.Windows.Input.MouseEventArgs", "System.Windows.Input.MouseWheelEventArgs", true);

JSIL.MakeClass("System.EventArgs", "System.Windows.Input.TouchFrameEventArgs", true);

JSIL.MakeClass("System.Windows.RoutedEventArgs", "System.Windows.Input.KeyEventArgs", true);

JSIL.MakeClass("System.Windows.RoutedEventArgs", "System.Windows.Input.TextCompositionEventArgs", true);

JSIL.MakeClass(new JSIL.TypeRef($asm02, "System.Windows.PresentationFrameworkCollection$b1", ["System.Windows.Input.TouchPoint"]), "System.Windows.Input.TouchPointCollection", true);

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.Input.TouchDevice", true);

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.Input.TouchPoint", true);

JSIL.DeclareNamespace("System.Windows.Shapes");
JSIL.MakeClass("System.Windows.FrameworkElement", "System.Windows.Shapes.Shape", true);

JSIL.MakeClass("System.Windows.Shapes.Shape", "System.Windows.Shapes.Path", true);

JSIL.MakeClass("System.Windows.Shapes.Shape", "System.Windows.Shapes.Ellipse", true);

JSIL.MakeClass("System.Windows.Shapes.Shape", "System.Windows.Shapes.Line", true);

JSIL.MakeClass("System.Windows.Shapes.Shape", "System.Windows.Shapes.Polygon", true);

JSIL.MakeClass("System.Windows.Shapes.Shape", "System.Windows.Shapes.Polyline", true);

JSIL.MakeClass("System.Windows.Shapes.Shape", "System.Windows.Shapes.Rectangle", true);

JSIL.DeclareNamespace("System.Windows.Documents");
JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.Documents.TextElement", true);

JSIL.MakeClass("System.Windows.Documents.TextElement", "System.Windows.Documents.Inline", true);

JSIL.MakeClass("System.Windows.Documents.TextElement", "System.Windows.Documents.Block", true);

JSIL.MakeClass(new JSIL.TypeRef($asm02, "System.Windows.PresentationFrameworkCollection$b1", [new JSIL.GenericParameter("T")]), "System.Windows.Documents.TextElementCollection$b1", true, ["T"]);

JSIL.MakeClass(new JSIL.TypeRef($asm02, "System.Windows.Documents.TextElementCollection$b1", ["System.Windows.Documents.Inline"]), "System.Windows.Documents.InlineCollection", true);

JSIL.MakeClass(new JSIL.TypeRef($asm02, "System.Windows.Documents.TextElementCollection$b1", ["System.Windows.Documents.Block"]), "System.Windows.Documents.BlockCollection", true);

JSIL.MakeClass("System.Windows.FrameworkElement", "System.Windows.Documents.Glyphs", true);

JSIL.MakeClass("System.Windows.Documents.Inline", "System.Windows.Documents.Run", true);

JSIL.MakeClass("System.Windows.Documents.Block", "System.Windows.Documents.Paragraph", true);

JSIL.MakeClass("System.Windows.Documents.Block", "System.Windows.Documents.Section", true);

JSIL.MakeClass("System.Windows.Documents.Inline", "System.Windows.Documents.Span", true);

JSIL.MakeClass("System.Windows.Documents.Span", "System.Windows.Documents.Underline", true);

JSIL.MakeClass("System.Windows.Documents.Span", "System.Windows.Documents.Italic", true);

JSIL.MakeClass("System.Windows.Documents.Span", "System.Windows.Documents.Bold", true);

JSIL.MakeClass("System.Windows.Documents.Span", "System.Windows.Documents.Hyperlink", true);

JSIL.MakeClass("System.Windows.Documents.Inline", "System.Windows.Documents.LineBreak", true);

JSIL.MakeClass("System.Windows.Documents.Inline", "System.Windows.Documents.InlineUIContainer", true);

JSIL.DeclareNamespace("System.Windows.Controls");
JSIL.MakeDelegate("System.Windows.Controls.TextChangedEventHandler");

JSIL.MakeDelegate("System.Windows.Controls.ContentChangedEventHandler");

JSIL.MakeEnum(
	"System.Windows.Controls.Orientation", {
		Vertical: 0, 
		Horizontal: 1
	}, false
);

JSIL.MakeEnum(
	"System.Windows.Controls.StretchDirection", {
		UpOnly: 0, 
		DownOnly: 1, 
		Both: 2
	}, false
);

JSIL.MakeClass("System.Windows.FrameworkElement", "System.Windows.Controls.Panel", true);

JSIL.MakeClass("System.Windows.FrameworkElement", "System.Windows.Controls.Image", true);

JSIL.MakeClass("System.Windows.Controls.Panel", "System.Windows.Controls.Canvas", true);

JSIL.MakeClass("System.Windows.FrameworkElement", "System.Windows.Controls.TextBlock", true);

JSIL.MakeClass("System.Windows.FrameworkElement", "System.Windows.Controls.MediaElement", true);
JSIL.MakeDelegate("System.Windows.Controls.MediaElement/OpenMediaDelegate");

JSIL.MakeDelegate("System.Windows.Controls.MediaElement/CloseMediaDelegate");

JSIL.MakeDelegate("System.Windows.Controls.MediaElement/SeekDelegate");

JSIL.MakeDelegate("System.Windows.Controls.MediaElement/GetSampleDelegate");

JSIL.MakeDelegate("System.Windows.Controls.MediaElement/GetDiagnosticDelegate");

JSIL.MakeDelegate("System.Windows.Controls.MediaElement/SwitchMediaStreamDelegate");

JSIL.MakeDelegate("System.Windows.Controls.MediaElement/GetAudioBufferLengthDelegate");

JSIL.MakeDelegate("System.Windows.Controls.MediaElement/AcquireLicenseAbortDelegate");

JSIL.MakeDelegate("System.Windows.Controls.MediaElement/AcquireLicenseBeginDelegate");

JSIL.MakeDelegate("System.Windows.Controls.MediaElement/SetMediaStreamSource");


JSIL.MakeClass("System.EventArgs", "System.Windows.Controls.NotifyEventArgs", true);

JSIL.MakeClass("System.Windows.Controls.Canvas", "System.Windows.Controls.InkPresenter", true);

JSIL.MakeClass(new JSIL.TypeRef($asm02, "System.Windows.PresentationFrameworkCollection$b1", ["System.Windows.UIElement"]), "System.Windows.Controls.UIElementCollection", true);

JSIL.MakeClass("System.Windows.FrameworkElement", "System.Windows.Controls.MultiScaleImage", true);

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.Controls.MultiScaleSubImage", true);

JSIL.MakeClass("System.Windows.Controls.Panel", "System.Windows.Controls.StackPanel", true);

JSIL.MakeClass("System.Windows.FrameworkElement", "System.Windows.Controls.Control", true);
JSIL.MakeDelegate("System.Windows.Controls.Control/GetBuiltInStyleDelegate");

JSIL.MakeDelegate("System.Windows.Controls.Control/ControlDelegate");

JSIL.MakeEnum(
	"System.Windows.Controls.Control/Delegates", {
		MouseMove: 0, 
		MouseEnter: 1, 
		MouseLeave: 2, 
		MouseLeftButtonDown: 3, 
		MouseLeftButtonUp: 4, 
		MouseRightButtonDown: 5, 
		MouseRightButtonUp: 6, 
		MouseWheel: 7, 
		KeyUp: 8, 
		KeyDown: 9, 
		GotFocus: 10, 
		LostFocus: 11, 
		IsEnabledChanged: 12, 
		LostMouseCapture: 13, 
		TextInput: 14, 
		TextInputStart: 15, 
		TextInputUpdate: 16, 
		DragEnter: 17, 
		DragLeave: 18, 
		DragOver: 19, 
		Drop: 20
	}, false
);


JSIL.MakeClass("System.Windows.Controls.Control", "System.Windows.Controls.TextBox", true);
JSIL.MakeDelegate("System.Windows.Controls.TextBox/EnableScrollViewerIntegrationDelegate");

JSIL.MakeDelegate("System.Windows.Controls.TextBox/SetScrollOffsetOnScrollViewerDelegate");

JSIL.MakeDelegate("System.Windows.Controls.TextBox/GetViewportSizeDelegate");

JSIL.MakeDelegate("System.Windows.Controls.TextBox/TextWrappingChangedDelegate");


JSIL.MakeClass("System.Windows.Controls.Control", "System.Windows.Controls.RichTextBox", true);
JSIL.MakeDelegate("System.Windows.Controls.RichTextBox/EnableScrollViewerIntegrationDelegate");

JSIL.MakeDelegate("System.Windows.Controls.RichTextBox/GetViewportSizeDelegate");

JSIL.MakeDelegate("System.Windows.Controls.RichTextBox/TextWrappingChangedDelegate");

JSIL.MakeDelegate("System.Windows.Controls.RichTextBox/ClipboardElementDelegate");

JSIL.MakeDelegate("System.Windows.Controls.RichTextBox/ClipboardStringDelegate");

JSIL.MakeDelegate("System.Windows.Controls.RichTextBox/ClipboardEndDelegate");


JSIL.MakeClass("System.Windows.RoutedEventArgs", "System.Windows.Controls.TextChangedEventArgs", true);

JSIL.MakeClass("System.Windows.RoutedEventArgs", "System.Windows.Controls.ContentChangedEventArgs", true);

JSIL.MakeClass("System.Windows.Controls.Control", "System.Windows.Controls.PasswordBox", true);

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.Controls.RowDefinition", true);

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.Controls.ColumnDefinition", true);

JSIL.MakeClass("System.Windows.Controls.Panel", "System.Windows.Controls.Grid", true);

JSIL.MakeClass(new JSIL.TypeRef($asm02, "System.Windows.PresentationFrameworkCollection$b1", ["System.Windows.Controls.RowDefinition"]), "System.Windows.Controls.RowDefinitionCollection", true);

JSIL.MakeClass(new JSIL.TypeRef($asm02, "System.Windows.PresentationFrameworkCollection$b1", ["System.Windows.Controls.ColumnDefinition"]), "System.Windows.Controls.ColumnDefinitionCollection", true);

JSIL.MakeClass("System.Windows.FrameworkTemplate", "System.Windows.Controls.ControlTemplate", true);

JSIL.DeclareNamespace("MS.Internal.Controls");
JSIL.MakeInterface(
	"MS.Internal.Controls.IGeneratorHost", [], {
		"get_View": Function, 
		"IsItemItsOwnContainer": Function, 
		"GetContainerForItem": Function, 
		"PrepareItemContainer": Function, 
		"ClearContainerForItem": Function, 
		"IsHostForItemContainer": Function, 
		"View": Property
	});

JSIL.MakeClass("System.Windows.Controls.Control", "System.Windows.Controls.ItemsControl", true);
JSIL.MakeClass("System.Object", "System.Windows.Controls.ItemsControl/AccessibilityItem", false);


JSIL.MakeClass("System.Windows.FrameworkElement", "System.Windows.Controls.Viewbox", true);

JSIL.MakeClass("System.Windows.FrameworkElement", "System.Windows.Controls.Border", true);

JSIL.MakeClass("System.Windows.Controls.Control", "System.Windows.Controls.ContentControl", true);
JSIL.MakeDelegate("System.Windows.Controls.ContentControl/OnContentChangedDelegate");


JSIL.MakeClass("System.Windows.FrameworkElement", "System.Windows.Controls.ContentPresenter", true);

JSIL.MakeClass("System.Windows.FrameworkTemplate", "System.Windows.Controls.ItemsPanelTemplate", true);

JSIL.MakeClass("System.Windows.FrameworkElement", "System.Windows.Controls.ItemsPresenter", true);

JSIL.MakeClass("System.Windows.FrameworkElement", "System.Windows.Controls.WebBrowser", true);

JSIL.MakeClass("System.Windows.Media.TileBrush", "System.Windows.Controls.WebBrowserBrush", true);

JSIL.MakeDelegate("MS.Internal.ErrorEventHandler");

JSIL.MakeDelegate("MS.Internal.RequestBringIntoViewEventHandler");

JSIL.MakeDelegate("MS.Internal.RuntimeHostEventHandler");

JSIL.MakeDelegate("MS.Internal.CorePropertyChangedEventHandler");

JSIL.MakeDelegate("MS.Internal.IsEnabledChangedEventHandler");

JSIL.MakeClass("System.Windows.Media.GeneralTransform", "MS.Internal.InternalTransform", false);

JSIL.MakeClass("System.Windows.DependencyObject", "MS.Internal.TextPointerWrapper", false);

JSIL.MakeClass("System.EventArgs", "MS.Internal.ErrorEventArgs", false);

JSIL.MakeClass("System.Windows.DependencyObject", "MS.Internal.Downloader", false);

JSIL.MakeClass("System.Windows.DependencyObject", "MS.Internal.StylusInfo", false);

JSIL.MakeClass(new JSIL.TypeRef($asm02, "System.Windows.PresentationFrameworkCollection$b1", ["System.Windows.Controls.MultiScaleSubImage"]), "MS.Internal.MultiScaleSubImageCollection", false);

JSIL.MakeClass("System.Windows.DependencyObject", "MS.Internal.MediaAttribute", false);

JSIL.MakeClass(new JSIL.TypeRef($asm02, "System.Windows.PresentationFrameworkCollection$b1", ["MS.Internal.MediaAttribute"]), "MS.Internal.MediaAttributeCollection", false);

JSIL.MakeClass("System.Windows.FrameworkElement", "MS.Internal.RichTextBoxView", false);

JSIL.MakeClass("System.Windows.FrameworkElement", "MS.Internal.TextBoxView", false);

JSIL.MakeClass("System.Windows.RoutedEventArgs", "MS.Internal.RequestBringIntoViewEventArgs", false);

JSIL.MakeClass("System.EventArgs", "MS.Internal.RuntimeHostEventArgs", false);

JSIL.MakeClass("System.EventArgs", "MS.Internal.CorePropertyChangedEventArgs", false);

JSIL.MakeClass("System.EventArgs", "MS.Internal.IsEnabledChangedEventArgs", false);

JSIL.MakeClass("System.Windows.DataTemplate", "MS.Internal.DisplayMemberTemplate", false);

JSIL.MakeClass("System.Windows.DependencyObject", "MS.Internal.TypeProxy", false);
JSIL.MakeDelegate("MS.Internal.TypeProxy/CreateObjectDelegate");

JSIL.MakeClass("System.Object", "MS.Internal.TypeProxy/$l$gc__DisplayClass2d", false);

JSIL.MakeClass("System.Object", "MS.Internal.TypeProxy/$l$gc__DisplayClass30", false);


JSIL.MakeClass("System.Windows.DependencyObject", "MS.Internal.ManagedObjectReference", false);

JSIL.MakeClass("System.Windows.DependencyObject", "MS.Internal.DependencyPropertyProxy", false);

JSIL.MakeClass("System.Windows.DependencyObject", "MS.Internal.GlyphTypeface", false);

JSIL.MakeClass(new JSIL.TypeRef($asm02, "System.Windows.PresentationFrameworkCollection$b1", ["MS.Internal.GlyphTypeface"]), "MS.Internal.GlyphTypefaceCollection", false);

JSIL.MakeClass(new JSIL.TypeRef($asm02, "System.Windows.PresentationFrameworkCollection$b1", ["System.Windows.ResourceDictionary"]), "MS.Internal.ResourceDictionaryCollection", false);

JSIL.MakeClass(new JSIL.TypeRef($asm02, "System.Windows.PresentationFrameworkCollection$b1", ["System.Windows.VisualStateGroup"]), "MS.Internal.VisualStateGroupCollection", false);

JSIL.MakeClass(new JSIL.TypeRef($asm02, "System.Windows.PresentationFrameworkCollection$b1", ["System.Windows.VisualTransition"]), "MS.Internal.VisualTransitionCollection", false);

JSIL.MakeClass(new JSIL.TypeRef($asm02, "System.Windows.PresentationFrameworkCollection$b1", ["System.Windows.VisualState"]), "MS.Internal.VisualStateCollection", false);

JSIL.MakeClass("System.Windows.DependencyObject", "MS.Internal.TemplateContent", false);

JSIL.DeclareNamespace("System.Windows.Media.Imaging");
JSIL.MakeDelegate("System.Windows.Media.Imaging.DownloadProgressEventHandler");

JSIL.MakeClass("System.Windows.Media.ImageSource", "System.Windows.Media.Imaging.BitmapSource", true);

JSIL.MakeClass("System.Windows.Media.Imaging.BitmapSource", "System.Windows.Media.Imaging.BitmapImage", true);

JSIL.MakeClass("System.EventArgs", "System.Windows.Media.Imaging.DownloadProgressEventArgs", true);

JSIL.DeclareNamespace("System.Windows.Controls.Primitives");
JSIL.MakeClass("System.Windows.FrameworkElement", "System.Windows.Controls.Primitives.Popup", true);
JSIL.MakeDelegate("System.Windows.Controls.Primitives.Popup/OnChildChangedDelegate");

JSIL.MakeDelegate("System.Windows.Controls.Primitives.Popup/AddRemoveManagedPeerReferenceDelegate");


JSIL.MakeEnum(
	"System.Windows.Automation.DockPosition", {
		Top: 0, 
		Left: 1, 
		Bottom: 2, 
		Right: 3, 
		Fill: 4, 
		None: 5
	}, false
);

JSIL.MakeEnum(
	"System.Windows.Automation.ExpandCollapseState", {
		Collapsed: 0, 
		Expanded: 1, 
		PartiallyExpanded: 2, 
		LeafNode: 3
	}, false
);

JSIL.MakeEnum(
	"System.Windows.Automation.ScrollAmount", {
		LargeDecrement: 0, 
		SmallDecrement: 1, 
		NoAmount: 2, 
		LargeIncrement: 3, 
		SmallIncrement: 4
	}, false
);

JSIL.MakeEnum(
	"System.Windows.Automation.RowOrColumnMajor", {
		RowMajor: 0, 
		ColumnMajor: 1, 
		Indeterminate: 2
	}, false
);

JSIL.MakeEnum(
	"System.Windows.Automation.ToggleState", {
		Off: 0, 
		On: 1, 
		Indeterminate: 2
	}, false
);

JSIL.MakeEnum(
	"System.Windows.Automation.WindowVisualState", {
		Normal: 0, 
		Maximized: 1, 
		Minimized: 2
	}, false
);

JSIL.MakeEnum(
	"System.Windows.Automation.WindowInteractionState", {
		Running: 0, 
		Closing: 1, 
		ReadyForUserInteraction: 2, 
		BlockedByModalWindow: 3, 
		NotResponding: 4
	}, false
);

JSIL.DeclareNamespace("System.Windows.Automation.Peers");
JSIL.MakeEnum(
	"System.Windows.Automation.Peers.AutomationControlType", {
		Button: 0, 
		Calendar: 1, 
		CheckBox: 2, 
		ComboBox: 3, 
		Edit: 4, 
		Hyperlink: 5, 
		Image: 6, 
		ListItem: 7, 
		List: 8, 
		Menu: 9, 
		MenuBar: 10, 
		MenuItem: 11, 
		ProgressBar: 12, 
		RadioButton: 13, 
		ScrollBar: 14, 
		Slider: 15, 
		Spinner: 16, 
		StatusBar: 17, 
		Tab: 18, 
		TabItem: 19, 
		Text: 20, 
		ToolBar: 21, 
		ToolTip: 22, 
		Tree: 23, 
		TreeItem: 24, 
		Custom: 25, 
		Group: 26, 
		Thumb: 27, 
		DataGrid: 28, 
		DataItem: 29, 
		Document: 30, 
		SplitButton: 31, 
		Window: 32, 
		Pane: 33, 
		Header: 34, 
		HeaderItem: 35, 
		Table: 36, 
		TitleBar: 37, 
		Separator: 38
	}, false
);

JSIL.MakeEnum(
	"System.Windows.Automation.Peers.AutomationEvents", {
		ToolTipOpened: 0, 
		ToolTipClosed: 1, 
		MenuOpened: 2, 
		MenuClosed: 3, 
		AutomationFocusChanged: 4, 
		InvokePatternOnInvoked: 5, 
		SelectionItemPatternOnElementAddedToSelection: 6, 
		SelectionItemPatternOnElementRemovedFromSelection: 7, 
		SelectionItemPatternOnElementSelected: 8, 
		SelectionPatternOnInvalidated: 9, 
		TextPatternOnTextSelectionChanged: 10, 
		TextPatternOnTextChanged: 11, 
		AsyncContentLoaded: 12, 
		PropertyChanged: 13, 
		StructureChanged: 14
	}, false
);

JSIL.MakeEnum(
	"System.Windows.Automation.Peers.PatternInterface", {
		Invoke: 0, 
		Selection: 1, 
		Value: 2, 
		RangeValue: 3, 
		Scroll: 4, 
		ScrollItem: 5, 
		ExpandCollapse: 6, 
		Grid: 7, 
		GridItem: 8, 
		MultipleView: 9, 
		Window: 10, 
		SelectionItem: 11, 
		Dock: 12, 
		Table: 13, 
		TableItem: 14, 
		Toggle: 15, 
		Transform: 16, 
		Text: 17
	}, false
);

JSIL.MakeEnum(
	"System.Windows.Automation.Peers.AutomationOrientation", {
		None: 0, 
		Horizontal: 1, 
		Vertical: 2
	}, false
);

JSIL.DeclareNamespace("System.Windows.Media.Effects");
JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.Media.Effects.PixelShader", true);

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.Media.Effects.Effect", true);
JSIL.MakeDelegate("System.Windows.Media.Effects.Effect/MapRectDelegate");

JSIL.MakeDelegate("System.Windows.Media.Effects.Effect/MapRectInverseDelegate");

JSIL.MakeDelegate("System.Windows.Media.Effects.Effect/GetEffectMappingDelegate");

JSIL.MakeDelegate("System.Windows.Media.Effects.Effect/MapPointDelegate");

JSIL.MakeDelegate("System.Windows.Media.Effects.Effect/MapPointInverseDelegate");


JSIL.MakeClass("System.Windows.Media.Effects.Effect", "System.Windows.Media.Effects.ShaderEffect", true);
JSIL.MakeClass("System.Object", "System.Windows.Media.Effects.ShaderEffect/$l$gc__DisplayClass1", false);

JSIL.MakeClass("System.Object", "System.Windows.Media.Effects.ShaderEffect/$l$gc__DisplayClass4", false);


JSIL.MakeClass("System.Windows.Media.Effects.Effect", "System.Windows.Media.Effects.BlurEffect", true);

JSIL.MakeClass("System.Windows.Media.Effects.Effect", "System.Windows.Media.Effects.DropShadowEffect", true);

JSIL.DeclareNamespace("System.Windows.Printing");
JSIL.MakeDelegate("System.Windows.Printing.PrintPageEventHandler");

JSIL.MakeDelegate("System.Windows.Printing.BeginPrintEventHandler");

JSIL.MakeDelegate("System.Windows.Printing.EndPrintEventHandler");

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.Printing.PrintDocument", true);

JSIL.MakeClass("System.EventArgs", "System.Windows.Printing.PrintPageEventArgs", true);

JSIL.MakeClass("System.EventArgs", "System.Windows.Printing.BeginPrintEventArgs", true);

JSIL.MakeClass("System.EventArgs", "System.Windows.Printing.EndPrintEventArgs", true);

JSIL.DeclareNamespace("System.Windows.Navigation");
JSIL.MakeDelegate("System.Windows.Navigation.LoadCompletedEventHandler");

JSIL.MakeClass("System.EventArgs", "System.Windows.Navigation.NavigationEventArgs", true);

JSIL.DeclareNamespace("System.Windows.Data");
JSIL.MakeEnum(
	"System.Windows.Data.BindingSource", {
		None: 0, 
		Source: 1, 
		ElementName: 2, 
		RelativeSource: 3
	}, false
);

JSIL.MakeClass("System.Object", "System.Windows.Data.BindingBase", true);

JSIL.MakeInterface(
	"MS.Internal.IMarkupExtension", [], {
		"SetupExtension": Function, 
		"IsValidTargetForExtension": Function
	});

JSIL.MakeClass("System.Windows.Data.BindingBase", "System.Windows.Data.Binding", true);

JSIL.MakeClass("System.Object", "System.Windows.Expression", true);

JSIL.MakeClass("System.Windows.Expression", "System.Windows.Data.BindingExpressionBase", true);

JSIL.MakeInterface(
	"System.Windows.IDataContextChangedListener", [], {
		"OnDataContextChanged": Function
	});

JSIL.MakeInterface(
	"System.Windows.Data.IErrorsChangedListener", [], {
		"OnErrorsChanged": Function
	});

JSIL.MakeClass("System.Windows.Data.BindingExpressionBase", "System.Windows.Data.BindingExpression", true);
JSIL.MakeEnum(
	"System.Windows.Data.BindingExpression/TargetPropertyState", {
		Clean: 0, 
		Dirty: 1
	}, false
);

JSIL.MakeEnum(
	"System.Windows.Data.BindingExpression/UpdateState", {
		None: 0, 
		UpdatingSource: 1, 
		UpdatingTarget: 2, 
		SettingUpBinding: 3
	}, false
);


JSIL.MakeEnum(
	"System.Windows.Data.BindingMode", {
		OneWay: 1, 
		OneTime: 2, 
		TwoWay: 3
	}, false
);

JSIL.MakeEnum(
	"System.Windows.TextWrapping", {
		Wrap: 2, 
		NoWrap: 1
	}, false
);

JSIL.MakeEnum(
	"System.Windows.TextTrimming", {
		None: 0, 
		WordEllipsis: 2
	}, false
);

JSIL.DeclareNamespace("System.Net");
JSIL.DeclareNamespace("System.Net.Browser");
JSIL.MakeDelegate("System.Net.Browser.BeginMethod");

JSIL.MakeStaticClass("System.Net.Browser.AsyncHelper", false);
JSIL.MakeClass("System.Object", "System.Net.Browser.AsyncHelper/$l$gc__DisplayClass4", false);

JSIL.MakeClass("System.Object", "System.Net.Browser.AsyncHelper/$l$gc__DisplayClassa", false);


JSIL.MakeStaticClass("System.Net.Browser.HttpWebRequestHelper", false);

JSIL.MakeStaticClass("System.Net.Browser.WebRequestCreator", true);

JSIL.MakeClass("System.Object", "System.Net.Browser.BrowserHttpWebRequestCreator", false);

JSIL.MakeClass("System.Object", "System.Net.Browser.BHWRAsyncResult", false);

JSIL.MakeClass("System.Net.HttpWebRequest", "System.Net.Browser.BrowserHttpWebRequest", false);
JSIL.MakeEnum(
	"System.Net.Browser.BrowserHttpWebRequest/BrowserHttpWebRequestState", {
		Ready: 0, 
		GettingRequestStream: 1, 
		GotRequestStream: 2, 
		GettingResponse: 3, 
		GotResponse: 4
	}, false
);

JSIL.MakeClass("System.Object", "System.Net.Browser.BrowserHttpWebRequest/$l$gc__DisplayClass2", false);

JSIL.MakeClass("System.Object", "System.Net.Browser.BrowserHttpWebRequest/$l$gc__DisplayClass5", false);

JSIL.MakeClass("System.Object", "System.Net.Browser.BrowserHttpWebRequest/$l$gc__DisplayClass9", false);

JSIL.MakeClass("System.Object", "System.Net.Browser.BrowserHttpWebRequest/$l$gc__DisplayClassd", false);


JSIL.MakeClass("System.Net.HttpWebResponse", "System.Net.Browser.BrowserHttpWebResponse", false);

JSIL.MakeClass("System.Object", "System.Net.Browser.ClientHttpWebRequestCreator", false);
JSIL.MakeClass("System.Object", "System.Net.Browser.ClientHttpWebRequestCreator/$l$gc__DisplayClass1", false);


JSIL.MakeStaticClass("System.Net.Browser.UnsafeClientHttpWebRequestCreatorCallbacks", false);

JSIL.MakeClass("System.Object", "System.Net.Browser.UnsafeClientHttpWebRequestCreator", false);
JSIL.MakeClass("System.Object", "System.Net.Browser.UnsafeClientHttpWebRequestCreator/ContextObject", false);


JSIL.MakeClass("System.Object", "System.Net.Browser.OHWRAsyncResult", false);

JSIL.MakeStaticClass("System.Net.Browser.AuthenticationThrottle", false);
JSIL.MakeClass("System.Object", "System.Net.Browser.AuthenticationThrottle/ThrottleEntry", false);


JSIL.MakeClass("System.Net.HttpWebRequest", "System.Net.Browser.ClientHttpWebRequest", false);
JSIL.MakeEnum(
	"System.Net.Browser.ClientHttpWebRequest/ClientHttpWebRequestState", {
		Ready: 0, 
		GettingRequestStream: 1, 
		GotRequestStream: 2, 
		GettingResponse: 3, 
		GotResponse: 4
	}, false
);

JSIL.MakeClass("System.Object", "System.Net.Browser.ClientHttpWebRequest/$l$gc__DisplayClass2", false);

JSIL.MakeClass("System.Object", "System.Net.Browser.ClientHttpWebRequest/$l$gc__DisplayClass5", false);

JSIL.MakeClass("System.Object", "System.Net.Browser.ClientHttpWebRequest/$l$gc__DisplayClass9", false);

JSIL.MakeClass("System.Object", "System.Net.Browser.ClientHttpWebRequest/$l$gc__DisplayClassd", false);


JSIL.MakeClass("System.Net.HttpWebResponse", "System.Net.Browser.ClientHttpWebResponse", false);

JSIL.MakeStruct("System.Windows.Media.Color", true);
JSIL.MakeStruct("System.Windows.Media.Color/MILColor", false);


JSIL.MakeStruct("System.Windows.CornerRadius", true);

JSIL.MakeDelegate("System.Windows.DependencyPropertyChangedEventHandler");

JSIL.MakeDelegate("System.Windows.PropertyChangedCallback");

JSIL.MakeStruct("System.Windows.DependencyPropertyChangedEventArgs", true);

JSIL.DeclareNamespace("System.ComponentModel");
JSIL.MakeStaticClass("System.ComponentModel.DesignerProperties", true);

JSIL.MakeStruct("System.Windows.Duration", true);
JSIL.MakeEnum(
	"System.Windows.Duration/DurationType", {
		Automatic: 0, 
		TimeSpan: 1, 
		Forever: 2
	}, false
);


JSIL.MakeStruct("System.Windows.EffectiveValueEntry", false);

JSIL.MakeEnum(
	"System.Windows.FullValueSource", {
		BaseValueSourceMask: 15, 
		ModifiersMask: 112, 
		IsExpression: 16, 
		IsAnimated: 32, 
		LocalValueNewerThanAnimatedValue: 4096
	}, false
);

JSIL.MakeEnum(
	"System.Windows.BaseValueSource", {
		Unknown: 0, 
		Default: 1, 
		BuiltInStyle: 2, 
		Style: 3, 
		Local: 4
	}, false
);

JSIL.MakeStruct("System.Windows.GridLength", true);

JSIL.MakeClass("System.Object", "System.Windows.PropertyPathStep", false);

JSIL.MakeInterface(
	"System.Windows.Controls.ICollectionChangedListener", [], {
		"OnCollectionChanged": Function
	});

JSIL.MakeInterface(
	"System.Windows.IRaisePropertyPathStepChanged", [], {
		"RaisePropertyPathStepChanged": Function
	});

JSIL.MakeClass("System.Windows.PropertyPathStep", "System.Windows.IndexerPathStep", false);

JSIL.DeclareNamespace("System.Collections");
JSIL.DeclareNamespace("System.Collections.Specialized");
JSIL.MakeInterface(
	"System.Collections.Specialized.INotifyCollectionChanged", [], {
		"add_CollectionChanged": Function, 
		"remove_CollectionChanged": Function
	});

JSIL.MakeClass("System.IO.Stream", "MS.Internal.InternalMemoryStream", false);

JSIL.MakeClass("System.IO.Stream", "MS.Internal.InternalWebRequestStream", false);

JSIL.MakeClass("System.IO.Stream", "MS.Internal.InternalNetworkStream", false);
JSIL.MakeClass("System.Object", "MS.Internal.InternalNetworkStream/StreamAsyncResult", false);

JSIL.MakeClass("System.Object", "MS.Internal.InternalNetworkStream/ReadState", false);


JSIL.MakeClass("System.IO.Stream", "MS.Internal.InternalStreamWrapper", false);

JSIL.DeclareNamespace("System.Collections.ObjectModel");
JSIL.MakeClass(new JSIL.TypeRef($asm02, "System.Collections.ObjectModel.ReadOnlyCollection$b1", [new JSIL.GenericParameter("T")]), "System.Collections.ObjectModel.ReadOnlyObservableCollection$b1", true, ["T"]);

JSIL.MakeStaticClass("MS.Internal.InternalUtils", false);

JSIL.MakeClass("System.Windows.DependencyObject", "MS.Internal.InternalWebRequest", false);
JSIL.MakeClass("System.Object", "MS.Internal.InternalWebRequest/$l$gc__DisplayClass1", false);


JSIL.DeclareNamespace("System.Windows.Interop");
JSIL.MakeClass("System.Object", "System.Windows.Interop.Settings", true);

JSIL.MakeEnum(
	"System.Windows.Interop.FullScreenOptions", {
		None: 0, 
		StaysFullScreenWhenUnfocused: 1
	}, true
);

JSIL.MakeClass("System.Object", "System.Windows.Interop.Content", true);

JSIL.MakeClass("System.Object", "System.Windows.Interop.SilverlightHost", true);

JSIL.MakeClass("System.EventArgs", "System.Windows.Interop.NavigationStateChangedEventArgs", true);

JSIL.MakeStruct("System.Windows.Media.Animation.KeyTime", true);

JSIL.MakeEnum(
	"System.Windows.Media.Animation.KeyTimeType", {
		Uniform: 0, 
		TimeSpan: 2
	}, false
);

JSIL.MakeEnum(
	"System.Windows.Media.KnownColor", {
		Black: 4278190080, 
		Blue: 4278190335, 
		Brown: 4289014314, 
		Cyan: 4278255615, 
		DarkGray: 4289309097, 
		Gray: 4286611584, 
		Green: 4278222848, 
		LightGray: 4292072403, 
		Magenta: 4294902015, 
		Orange: 4294944000, 
		Purple: 4286578816, 
		Red: 4294901760, 
		Transparent: 16777215, 
		White: 4294967295, 
		Yellow: 4294967040, 
		UnknownColor: 1
	}, false
);

JSIL.MakeClass("System.Object", "System.Windows.Media.Colors", true);

JSIL.MakeStaticClass("System.Windows.Controls.Primitives.LayoutInformation", true);

JSIL.MakeStaticClass("MS.Internal.ManagedPeerTable", false);
JSIL.MakeClass("System.Object", "MS.Internal.ManagedPeerTable/IntPtrComparer", false);

JSIL.MakeStruct("MS.Internal.ManagedPeerTable/DebugCounters", false);


JSIL.MakeStaticClass("MS.Internal.ManagedTypeInfoProviderRPInvokes", false);
JSIL.MakeDelegate("MS.Internal.ManagedTypeInfoProviderRPInvokes/InitializeDelegate");

JSIL.MakeDelegate("MS.Internal.ManagedTypeInfoProviderRPInvokes/ResolveAssemblyDelegate");

JSIL.MakeDelegate("MS.Internal.ManagedTypeInfoProviderRPInvokes/GetTypeNamespaceDelegate");

JSIL.MakeDelegate("MS.Internal.ManagedTypeInfoProviderRPInvokes/LookupTypeFlagsDelegate");

JSIL.MakeDelegate("MS.Internal.ManagedTypeInfoProviderRPInvokes/LookupPropertyFlagsDelegate");

JSIL.MakeDelegate("MS.Internal.ManagedTypeInfoProviderRPInvokes/ResolveTypeNameDelegate");

JSIL.MakeDelegate("MS.Internal.ManagedTypeInfoProviderRPInvokes/ResolvePropertyNameDelegate");

JSIL.MakeDelegate("MS.Internal.ManagedTypeInfoProviderRPInvokes/ResolveDependencyPropertyNameDelegate");

JSIL.MakeDelegate("MS.Internal.ManagedTypeInfoProviderRPInvokes/GetTypeNameDelegate");

JSIL.MakeDelegate("MS.Internal.ManagedTypeInfoProviderRPInvokes/GetTypeFullNameDelegate");

JSIL.MakeDelegate("MS.Internal.ManagedTypeInfoProviderRPInvokes/GetPropertyNameDelegate");

JSIL.MakeDelegate("MS.Internal.ManagedTypeInfoProviderRPInvokes/GetBaseTypeDelegate");

JSIL.MakeDelegate("MS.Internal.ManagedTypeInfoProviderRPInvokes/GetDeclaringTypeDelegate");

JSIL.MakeDelegate("MS.Internal.ManagedTypeInfoProviderRPInvokes/IsAssignableFromDelegate");

JSIL.MakeDelegate("MS.Internal.ManagedTypeInfoProviderRPInvokes/GetContentPropertyDelegate");

JSIL.MakeDelegate("MS.Internal.ManagedTypeInfoProviderRPInvokes/GetCollectionItemTypeDelegate");

JSIL.MakeDelegate("MS.Internal.ManagedTypeInfoProviderRPInvokes/GetTextSyntaxForTypeDelegate");

JSIL.MakeDelegate("MS.Internal.ManagedTypeInfoProviderRPInvokes/GetTextSyntaxForPropertyDelegate");


JSIL.MakeEnum(
	"MS.Internal.XamlMemberKind", {
		None: 0, 
		Property: 1, 
		Attachable: 2, 
		Event: 3, 
		DependencyProperty: 4
	}, false
);

JSIL.MakeStruct("MS.Internal.XamlMemberInfo", false);

JSIL.MakeEnum(
	"MS.Internal.BoolTypeBits", {
		btbNone: 0, 
		btbString: 1, 
		btbConstructible: 2, 
		btbCollection: 4, 
		btbList: 8, 
		btbDictionary: 16, 
		btbArray: 32, 
		btbXmlData: 64, 
		btbMarkupExtension: 128, 
		btbTemplate: 256, 
		btbNullable: 512, 
		btbNameScope: 1024, 
		btbObsolete: 2048, 
		btbTrimSurroundingWhitespace: 4096, 
		btbWhitespaceSignificantCollection: 8192, 
		btbUsableDuringInitialization: 16384, 
		btbIsPublic: 32768, 
		btbIsISupportInitialize: 65536
	}, true
);

JSIL.MakeEnum(
	"MS.Internal.BoolPropertyBits", {
		bpbNone: 0, 
		bpbIsBrowsable: 1, 
		bpbIsAmbient: 2, 
		bpbIsObsolete: 4, 
		bpbIsPublic: 8, 
		bpbIsReadOnly: 16, 
		bpbIsStatic: 32, 
		bpbIsAttachable: 64, 
		bpbIsEvent: 128
	}, true
);

JSIL.MakeEnum(
	"MS.Internal.XamlTypeInfoProviderKind", {
		tpkUnknown: 0, 
		tpkNative: 1, 
		tpkManaged: 2, 
		tpkAlternate: 3
	}, false
);

JSIL.MakeStruct("MS.Internal.XamlTokenHandle", false);

JSIL.MakeStruct("MS.Internal.XamlAssemblyToken", false);

JSIL.MakeStruct("MS.Internal.XamlTypeNamespaceToken", false);

JSIL.MakeStruct("MS.Internal.XamlTypeToken", false);

JSIL.MakeStruct("MS.Internal.XamlPropertyToken", false);

JSIL.MakeStruct("System.Windows.Media.Matrix", true);

JSIL.MakeEnum(
	"System.Windows.Media.MatrixTypes", {
		TRANSFORM_IS_IDENTITY: 0, 
		TRANSFORM_IS_TRANSLATION: 1, 
		TRANSFORM_IS_SCALING: 2, 
		TRANSFORM_IS_UNKNOWN: 4
	}, true
);

JSIL.MakeClass("System.Object", "MS.Internal.ModifiedValue", false);

JSIL.MakeClass("System.Runtime.InteropServices.SafeHandle", "MS.Internal.NativeObjectSafeHandle", false);

JSIL.MakeEnum(
	"System.Collections.Specialized.NotifyCollectionChangedAction", {
		Add: 0, 
		Remove: 1, 
		Replace: 2, 
		Reset: 4
	}, false
);

JSIL.MakeClass("System.EventArgs", "System.Collections.Specialized.NotifyCollectionChangedEventArgs", true);

JSIL.MakeDelegate("System.Collections.Specialized.NotifyCollectionChangedEventHandler");

JSIL.MakeStaticClass("MS.Internal.FrameworkCallbacks", false);
JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/CreateUnknownObjectDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/CreateKnownObjectDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/CreateWrapperObjectDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/SetValueCustomDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/InvalidatePropertyDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/SetPropertyAttributeDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/SetEventAttributeDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/SetPropertyDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/ClearPropertyDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/CheckPeerTypeDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/SetContentDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/GetTypeFlagsDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/GetRootAssemblyNameDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/SupportInitializeEndInitDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/ShutdownAllPeersDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/PeerTreeUpdateDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/CreateManagedPeerDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/UnpegManagedPeerNoRefDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/PegManagedPeerNoRefDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/FireEventDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/PegManagedPeerDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/UnpegManagedPeerDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/LoadAssemblyDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/SetCultureDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/GetResourceFromAssemblyDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/SetBindingForObjectDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/RaiseEventDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/SetTemplateBindingDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/SetTemplateBindingCustomToCoreDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/SetTemplateBindingCoreToCustomDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/SetTemplateBindingCustomToCustomDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/DisplayMemberTemplate_BindTextDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/ItemsControl_ClearVisualChildrenDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/ItemsControl_DisplayMemberPathChangedDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/ItemsControl_RecreateVisualChildrenDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/ItemsControl_NotifyAllItemsAddedDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/ItemsControl_SetItemCollectionDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/ResolveTypeNameDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/EnsureIsObjectOfTypeDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/TypeIsAssignableFromDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/MeasureArrangeOverrideDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/CreateBindingExtensionDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/OnCreateAutomationPeerDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/GetAutomationPeerStringValueDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/GetAutomationPeerIntValueDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/GetAutomationPeerPointValueDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/GetAutomationPeerRectValueDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/GetAutomationPeerAPValueDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/CallAutomationPeerMethodDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/GetAutomationPeerChildren");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/AutomationPeerGetPatternDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/UIAPatternInvokeDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/UIATextRangeInvokeDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/SetTemplateEventRootDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/GetTemplateEventRootDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/TriggerGCCollectDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/ProcessMarkupExtensionDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/GetCustomTypeIDFromObjectDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/GetCustomTypeFullNameDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/GetCustomPropertyIDDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/HasManagedNamePropertyDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/GetCustomPropertyDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/SetCustomPropertyDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/SetAnimatedValueDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/ClearAnimatedValueDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/GetTileLayerUrlDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/GetTileLayerCountDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/GetMSITileSourceInitParamsDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/GetMaxTileBlendTimeDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/IsCustomEventDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/GetCustomAttachedPropertyIDDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/SetRelativeSourceDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/IsoStorageIncreaseQuotaToDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/NavigationHelper_NavigateDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/Hyperlink_OnClickDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/Window_FireClosingEventDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/IsWellFormedUriStringDelegate");

JSIL.MakeDelegate("MS.Internal.FrameworkCallbacks/GetCollectionForDependencyObjectCollectionDelegate");


JSIL.MakeClass(new JSIL.TypeRef($asm02, "System.Collections.ObjectModel.Collection$b1", [new JSIL.GenericParameter("T")]), "System.Collections.ObjectModel.ObservableCollection$b1", true, ["T"]);

JSIL.DeclareNamespace("MS.Internal.Silverlight");
JSIL.DeclareNamespace("MS.Internal.Silverlight.Test");
JSIL.MakeStaticClass("MS.Internal.Silverlight.Test.OutOfBrowserTestHelper", false);

JSIL.MakeStruct("System.Windows.Point", true);

JSIL.MakeClass("System.Windows.PropertyPathStep", "System.Windows.PropertyAccessPathStep", false);

JSIL.MakeInterface(
	"System.Windows.ISourcePropertyChanged", [], {
		"SourcePropertyChanged": Function
	});

JSIL.MakeClass("System.Object", "System.Windows.PropertyListener", false);

JSIL.MakeClass("System.Windows.PropertyListener", "System.Windows.DependencyPropertyListener", false);

JSIL.MakeClass("System.Windows.PropertyListener", "System.Windows.CLRPropertyListener", false);

JSIL.MakeClass("System.Windows.PropertyListener", "System.Windows.IndexerListener", false);

JSIL.MakeClass("System.Object", "System.Windows.PropertyPathStepDescriptor", false);

JSIL.MakeClass("System.Windows.PropertyPathStepDescriptor", "System.Windows.SourcePathStepDescriptor", false);

JSIL.MakeClass("System.Windows.PropertyPathStepDescriptor", "System.Windows.PropertyAccessPathStepDescriptor", false);

JSIL.MakeClass("System.Windows.PropertyPathStepDescriptor", "System.Windows.DependencyPropertyAccessStepDescriptor", false);

JSIL.MakeClass("System.Windows.PropertyPathStepDescriptor", "System.Windows.IndexerPathStepDescriptor", false);

JSIL.MakeClass("System.Object", "System.Windows.PropertyPath", true);

JSIL.MakeClass("System.ComponentModel.TypeConverter", "System.Windows.PropertyPathConverter", true);

JSIL.MakeDelegate("System.Windows.PropertyPathStepChangedHandler");

JSIL.MakeClass("System.Object", "System.Windows.PropertyPathChangedEventArgs", false);

JSIL.MakeClass("System.Object", "System.Windows.PropertyPathListener", false);

JSIL.MakeClass("System.Object", "System.Windows.PropertyPathParser", false);

JSIL.MakeClass("System.Object", "MS.Internal.QuirksMode", false);

JSIL.MakeClass("System.Windows.PropertyPathStep", "System.Windows.SourcePropertyPathStep", false);

JSIL.MakeStruct("System.Windows.Rect", true);

JSIL.MakeStruct("System.Windows.Media.Animation.RepeatBehavior", true);
JSIL.MakeEnum(
	"System.Windows.Media.Animation.RepeatBehavior/RepeatBehaviorType", {
		IterationCount: 0, 
		RepeatDuration: 1, 
		Forever: 2
	}, false
);


JSIL.MakeStaticClass("System.Windows.ResourceManagerWrapper", false);

JSIL.MakeStruct("System.Windows.Size", true);

JSIL.DeclareNamespace("System.Windows.Resources");
JSIL.MakeClass("System.Object", "System.Windows.Resources.StreamResourceInfo", true);

JSIL.MakeClass("System.Object", "System.Windows.DependencyPropertyChangedWeakListener", false);

JSIL.MakeClass("System.Object", "System.Windows.CorePropertyChangedWeakListener", false);

JSIL.MakeClass("System.Windows.Expression", "System.Windows.TemplateBindingExpression", true);

JSIL.MakeClass("System.Windows.TemplateBindingExpression", "System.Windows.TemplateBindingExpressionForCore", false);

JSIL.MakeStruct("System.Windows.Thickness", true);

JSIL.MakeStaticClass("MS.Internal.TracingServices", false);
JSIL.MakeEnum(
	"MS.Internal.TracingServices/TraceLevel", {
		None: 0, 
		Critical: 1, 
		Error: 2, 
		Warning: 3, 
		Information: 4, 
		Verbose: 5, 
		Reserved: 6
	}, false
);

JSIL.MakeEnum(
	"MS.Internal.TracingServices/TraceType", {
		Start: 0, 
		End: 1, 
		Info: 2
	}, false
);

JSIL.MakeEnum(
	"MS.Internal.TracingServices/TraceFlags", {
		TraceManagedGcTests: 2097152
	}, false
);

JSIL.MakeEnum(
	"MS.Internal.TracingServices/TraceMarkerType", {
		Information: 0, 
		Parse: 1, 
		Firstraster: 2, 
		Raster: 3, 
		Present: 4, 
		MediaRenderCallback: 5, 
		EnsureBrush: 6, 
		MediaBuffering: 7, 
		MediaDroppedFrame: 8, 
		CLR_Startup: 9, 
		CLR_Shutdown: 10, 
		ControlStartup: 11, 
		ControlInplaceDeact: 12, 
		CorePutRootVisual: 13, 
		CoreNPCtrLoadDLL: 14, 
		CoreDraw: 15, 
		PutSource: 16, 
		ControlShutdown: 17, 
		ExtendedControlsDataGridScroll: 150, 
		SetValueManaged: 201, 
		SetValueNative: 202, 
		Databinding: 209
	}, false
);


JSIL.MakeClass("System.Object", "MS.Internal.TwoWayDictionary$b2", false, ["TKey", "TValue"]);

JSIL.MakeEnum(
	"MS.Internal.TypeFlags", {
		None: 0, 
		HasContentProperty: 1, 
		HasTypeConverter: 2, 
		IsIList: 4, 
		IsISupportInitialize: 8
	}, true
);

JSIL.MakeDelegate("MS.Internal.CreateObjectDelegate");

JSIL.MakeStaticClass("MS.Internal.TypeReflector", false);

JSIL.MakeClass("System.Object", "System.Windows.Data.WeakPropertyChangedListener", false);

JSIL.MakeClass("System.Object", "System.Windows.WeakDataContextChangedListener", false);

JSIL.MakeClass("System.Object", "System.Windows.Data.WeakDependencyPropertyChangedListener", false);

JSIL.MakeClass("System.Object", "System.Windows.Data.WeakErrorsChangedListener", false);

JSIL.MakeClass("System.Object", "System.Windows.Application", true);

JSIL.MakeClass("System.EventArgs", "System.Windows.ApplicationUnhandledExceptionEventArgs", true);

JSIL.DeclareNamespace("Microsoft");
JSIL.DeclareNamespace("Microsoft.Internal");
JSIL.MakeInterface(
	"Microsoft.Internal.IManagedFrameworkInternalHelper", [], {
		"SetContextEx": Function
	});

JSIL.MakeClass("System.Object", "MS.Internal.JoltHelperEx", false);

JSIL.MakeStaticClass("MS.Internal.JoltHelper", false);
JSIL.MakeClass("System.Object", "MS.Internal.JoltHelper/ApplicationResourceStreamResolver", false);

JSIL.MakeDelegate("MS.Internal.JoltHelper/D_SetPtr");

JSIL.MakeClass("System.Object", "MS.Internal.JoltHelper/$l$gc__DisplayClass2", false);

JSIL.MakeClass("System.Object", "MS.Internal.JoltHelper/$l$gc__DisplayClass4", false);


JSIL.MakeStaticClass("MS.Internal.TokenizerHelper", false);

JSIL.MakeClass("System.ComponentModel.TypeConverter", "MS.Internal.SilverlightTypeConverter", false);

JSIL.MakeClass("System.Windows.Controls.Control", "System.Windows.Controls.UserControl", true);

JSIL.MakeClass("System.Attribute", "System.Windows.TemplatePartAttribute", true);

JSIL.MakeClass("System.Object", "System.Windows.DependencyProperty", true);

JSIL.MakeClass("System.Windows.DependencyProperty", "System.Windows.CoreDependencyProperty", false);

JSIL.MakeClass("System.Windows.DependencyProperty", "System.Windows.CustomDependencyProperty", false);

JSIL.MakeClass("System.Windows.CustomDependencyProperty", "System.Windows.CustomAttachedDependencyProperty", false);

JSIL.MakeDelegate("System.Windows.DPChangedEventHandler");

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.Deployment", true);

JSIL.DeclareNamespace("System.Windows.Threading");
JSIL.MakeClass("System.Object", "System.Windows.Threading.DispatcherTimer", true);

JSIL.MakeStaticClass("MS.Internal.Error", false);
JSIL.MakeEnum(
	"MS.Internal.Error/COMExceptionBehavior", {
		HideCOMExceptions: 0, 
		ExposeCOMExceptions: 1
	}, false
);

JSIL.MakeDelegate("MS.Internal.Error/ClearExceptionDelegate");

JSIL.MakeDelegate("MS.Internal.Error/GetExceptionTextDelegate");

JSIL.MakeDelegate("MS.Internal.Error/CallAUEHandlerDelegate");


JSIL.MakeClass("System.Exception", "MS.Internal.WrappedException", false);

JSIL.MakeClass("System.Exception", "MS.Internal.NativeParseException", false);

JSIL.DeclareNamespace("System.Windows.Markup");
JSIL.MakeClass("System.SystemException", "System.Windows.Markup.XamlParseException", true);

JSIL.MakeStruct("MS.Internal.XSIZEF", false);

JSIL.MakeStruct("MS.Internal.XGRIDLENGTH", false);

JSIL.MakeEnum(
	"MS.Internal.VType", {
		valueAny: 0, 
		valueFloat: 1, 
		valueSigned: 2, 
		valueBool: 3, 
		valueEnum: 4, 
		valueColor: 5, 
		valueString: 6, 
		valuePoint: 7, 
		valueRect: 8, 
		valueFloatArray: 9, 
		valueByteArray: 10, 
		valueObject: 11, 
		valueScriptObject: 12, 
		valueXMLObject: 13, 
		valueThickness: 14, 
		valueInternalHandler: 15, 
		valueSize: 16, 
		valueGridLength: 17, 
		valueInteropObject: 18, 
		valuePointArray: 19, 
		valueCornerRadius: 20, 
		valueIntPtr: 21, 
		valueIObject: 22, 
		valueDouble: 23, 
		valueDPoint: 24, 
		valueNull: 25
	}, false
);

JSIL.MakeStruct("MS.Internal.CValue", false);

JSIL.MakeStruct("MS.Internal.PointF", false);

JSIL.MakeStruct("MS.Internal.RectF", false);

JSIL.MakeStaticClass("MS.Internal.XcpImports", false);
JSIL.MakeStruct("MS.Internal.XcpImports/ConnectorInfo", false);


JSIL.MakeEnum(
	"System.Windows.Controls.ValidationErrorEventAction", {
		Added: 0, 
		Removed: 1
	}, false
);

JSIL.MakeClass("System.Windows.RoutedEventArgs", "System.Windows.Controls.ValidationErrorEventArgs", true);

JSIL.MakeStaticClass("System.Windows.Markup.XamlReader", true);

JSIL.MakeClass("System.Object", "System.Windows.Input.StylusDevice", true);

JSIL.MakeStruct("System.Windows.Input.StylusPoint", true);

JSIL.MakeClass("System.Object", "System.Windows.ApplicationServiceContext", true);

JSIL.MakeInterface(
	"System.Windows.IApplicationService", [], {
		"StartService": Function, 
		"StopService": Function
	});

JSIL.MakeInterface(
	"System.Windows.IApplicationLifetimeAware", [], {
		"Starting": Function, 
		"Started": Function, 
		"Exiting": Function, 
		"Exited": Function
	});

JSIL.MakeClass("System.Object", "MS.Internal.ApplicationLifetimeObjectsCollection", false);
JSIL.MakeClass("System.Exception", "MS.Internal.ApplicationLifetimeObjectsCollection/AppServiceIntfNotImplementedException", false);


JSIL.MakeEnum(
	"System.Windows.Data.RelativeSourceMode", {
		TemplatedParent: 1, 
		Self: 2
	}, false
);

JSIL.MakeClass("System.Object", "System.Windows.Data.RelativeSource", true);

JSIL.MakeEnum(
	"System.Windows.Data.UpdateSourceTrigger", {
		Default: 0, 
		Explicit: 3
	}, false
);

JSIL.MakeStaticClass("System.Windows.Controls.Validation", true);

JSIL.MakeClass("System.Object", "System.Windows.Controls.ValidationError", true);

JSIL.MakeStaticClass("MS.Internal.XamlManagedRuntimeRPInvokes", false);
JSIL.MakeDelegate("MS.Internal.XamlManagedRuntimeRPInvokes/CreateInstanceDelegate");

JSIL.MakeDelegate("MS.Internal.XamlManagedRuntimeRPInvokes/CreateFromValueDelegate");

JSIL.MakeDelegate("MS.Internal.XamlManagedRuntimeRPInvokes/CreateFromXmlTextDelegate");

JSIL.MakeDelegate("MS.Internal.XamlManagedRuntimeRPInvokes/GetValueDelegate");

JSIL.MakeDelegate("MS.Internal.XamlManagedRuntimeRPInvokes/SetValueDelegate");

JSIL.MakeDelegate("MS.Internal.XamlManagedRuntimeRPInvokes/AddDelegate");

JSIL.MakeDelegate("MS.Internal.XamlManagedRuntimeRPInvokes/AddToDictionaryDelegate");


JSIL.MakeStruct("MS.Internal.XamlQualifiedObject", false);
JSIL.MakeEnum(
	"MS.Internal.XamlQualifiedObject/XQBFlags", {
		fNone: 0, 
		fBoxed: 1, 
		fStringValue: 2, 
		fBufferRequiresDeletion: 4, 
		fContainedDORequiresRelease: 8, 
		fHasPeggedManagedPeer: 16
	}, true
);


JSIL.MakeStaticClass("MS.Internal.XamlSchemaContext", false);
JSIL.MakeDelegate("MS.Internal.XamlSchemaContext/EnsureManagedAssemblyAttributesLoadedDelegate");

JSIL.MakeStruct("MS.Internal.XamlSchemaContext/AssemblyEntry", false);


JSIL.DeclareNamespace("System.Net.NetworkInformation");
JSIL.MakeClass("System.Net.NetworkInformation.NetworkChange", "System.Net.NetworkInformation.InternalNetworkChange", false);

JSIL.MakeStaticClass("MS.Internal.NativeResourceStrings", false);

JSIL.MakeStaticClass("MS.Internal.StubHelper", false);

JSIL.MakeDelegate("System.Windows.Navigation.NavigatedEventHandler");

JSIL.MakeDelegate("System.Windows.Navigation.NavigatingCancelEventHandler");

JSIL.MakeClass("System.ComponentModel.CancelEventArgs", "System.Windows.Navigation.NavigatingCancelEventArgs", true);

JSIL.MakeClass("System.ComponentModel.TypeConverter", "System.Windows.Input.InputScopeConverter", true);

JSIL.MakeClass("System.ComponentModel.TypeConverter", "System.Windows.Input.InputScopeNameConverter", true);

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.Input.InputScope", true);

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.Input.InputScopeName", true);

JSIL.MakeEnum(
	"System.Windows.Input.InputScopeNameValue", {
		AddressCity: 17, 
		AddressCountryName: 18, 
		AddressCountryShortName: 19, 
		AddressStateOrProvince: 16, 
		AddressStreet: 15, 
		AlphanumericFullWidth: 41, 
		AlphanumericHalfWidth: 40, 
		ApplicationEnd: 57, 
		Bopomofo: 43, 
		Chat: 50, 
		CurrencyAmount: 21, 
		CurrencyAmountAndSymbol: 20, 
		CurrencyChinese: 42, 
		Date: 22, 
		DateDay: 24, 
		DateDayName: 27, 
		DateMonth: 23, 
		DateMonthName: 26, 
		DateYear: 25, 
		Default: 0, 
		Digits: 28, 
		EmailNameOrAddress: 53, 
		EmailSmtpAddress: 5, 
		EmailUserName: 4, 
		EnumString: -5, 
		FileName: 3, 
		Formula: 57, 
		FullFilePath: 2, 
		Hanja: 47, 
		Hiragana: 44, 
		KatakanaFullWidth: 46, 
		KatakanaHalfWidth: 45, 
		LogOnName: 6, 
		Maps: 55, 
		NameOrPhoneNumber: 52, 
		Number: 29, 
		NumberFullWidth: 39, 
		NumericPassword: 56, 
		OneChar: 30, 
		Password: 31, 
		PersonalFullName: 7, 
		PersonalGivenName: 9, 
		PersonalMiddleName: 10, 
		PersonalNamePrefix: 8, 
		PersonalNameSuffix: 12, 
		PersonalSurname: 11, 
		PhraseList: -1, 
		PostalAddress: 13, 
		PostalCode: 14, 
		Private: 54, 
		RegularExpression: -2, 
		Search: 51, 
		Srgs: -3, 
		TelephoneAreaCode: 34, 
		TelephoneCountryCode: 33, 
		TelephoneLocalNumber: 35, 
		TelephoneNumber: 32, 
		Text: 49, 
		Time: 36, 
		TimeHour: 37, 
		TimeMinorSec: 38, 
		Url: 1, 
		Xml: -4, 
		Yomi: 48
	}, false
);

JSIL.MakeClass("System.Windows.RoutedEventArgs", "System.Windows.Input.ManipulationStartedEventArgs", true);

JSIL.MakeClass("System.Windows.RoutedEventArgs", "System.Windows.Input.ManipulationDeltaEventArgs", true);

JSIL.MakeClass("System.Windows.RoutedEventArgs", "System.Windows.Input.ManipulationCompletedEventArgs", true);

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.Input.ManipulationDelta", true);

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.Input.ManipulationVelocities", true);

JSIL.MakeClass("System.Windows.RoutedEventArgs", "System.Windows.Input.GestureEventArgs", true);

JSIL.MakeEnum(
	"System.Windows.Controls.ManipulationMode", {
		Control: 0, 
		System: 1
	}, false
);

JSIL.MakeClass("System.Windows.Controls.ContentControl", "System.Windows.Controls.ScrollViewer", true);
JSIL.MakeDelegate("System.Windows.Controls.ScrollViewer/ScrollChangedDelegate");


JSIL.MakeEnum(
	"System.Windows.Media.Imaging.BitmapCreateOptions", {
		None: 0, 
		DelayCreation: 2, 
		IgnoreImageCache: 8, 
		BackgroundCreation: 16
	}, true
);

JSIL.MakeClass("System.IO.Stream", "MS.Internal.ProgressiveUploadStream", false);

JSIL.MakeInterface(
	"MS.Internal.Controls.INotifyItemsChanged", [], {
		"add_ItemsChanged": Function, 
		"remove_ItemsChanged": Function
	});

JSIL.MakeClass("System.Object", "MS.Internal.Controls.ScrollData", false);

JSIL.MakeStruct("MS.Internal.Controls.Vector", false);

JSIL.MakeClass("System.Object", "System.Windows.Data.CollectionViewGroup", true);

JSIL.MakeClass("System.Windows.Data.CollectionViewGroup", "MS.Internal.CollectionViewGroupInternal", false);
JSIL.MakeClass("System.Object", "MS.Internal.CollectionViewGroupInternal/IListComparer", false);

JSIL.MakeClass("System.Object", "MS.Internal.CollectionViewGroupInternal/LeafEnumerator", false);


JSIL.MakeClass("MS.Internal.CollectionViewGroupInternal", "MS.Internal.CollectionViewGroupRoot", false);

JSIL.MakeInterface(
	"System.ComponentModel.ICollectionView", [], {
		"get_Culture": Function, 
		"set_Culture": Function, 
		"Contains": Function, 
		"get_SourceCollection": Function, 
		"get_Filter": Function, 
		"set_Filter": Function, 
		"get_CanFilter": Function, 
		"get_SortDescriptions": Function, 
		"get_CanSort": Function, 
		"get_CanGroup": Function, 
		"get_GroupDescriptions": Function, 
		"get_Groups": Function, 
		"get_IsEmpty": Function, 
		"Refresh": Function, 
		"DeferRefresh": Function, 
		"get_CurrentItem": Function, 
		"get_CurrentPosition": Function, 
		"get_IsCurrentAfterLast": Function, 
		"get_IsCurrentBeforeFirst": Function, 
		"MoveCurrentToFirst": Function, 
		"MoveCurrentToLast": Function, 
		"MoveCurrentToNext": Function, 
		"MoveCurrentToPrevious": Function, 
		"MoveCurrentTo": Function, 
		"MoveCurrentToPosition": Function, 
		"add_CurrentChanging": Function, 
		"remove_CurrentChanging": Function, 
		"add_CurrentChanged": Function, 
		"remove_CurrentChanged": Function, 
		"Culture": Property, 
		"SourceCollection": Property, 
		"Filter": Property, 
		"CanFilter": Property, 
		"SortDescriptions": Property, 
		"CanSort": Property, 
		"CanGroup": Property, 
		"GroupDescriptions": Property, 
		"Groups": Property, 
		"IsEmpty": Property, 
		"CurrentItem": Property, 
		"CurrentPosition": Property, 
		"IsCurrentAfterLast": Property, 
		"IsCurrentBeforeFirst": Property
	});

JSIL.MakeInterface(
	"System.ComponentModel.IEditableCollectionView", [], {
		"get_NewItemPlaceholderPosition": Function, 
		"set_NewItemPlaceholderPosition": Function, 
		"get_CanAddNew": Function, 
		"AddNew": Function, 
		"CommitNew": Function, 
		"CancelNew": Function, 
		"get_IsAddingNew": Function, 
		"get_CurrentAddItem": Function, 
		"get_CanRemove": Function, 
		"RemoveAt": Function, 
		"Remove": Function, 
		"EditItem": Function, 
		"CommitEdit": Function, 
		"CancelEdit": Function, 
		"get_CanCancelEdit": Function, 
		"get_IsEditingItem": Function, 
		"get_CurrentEditItem": Function, 
		"NewItemPlaceholderPosition": Property, 
		"CanAddNew": Property, 
		"IsAddingNew": Property, 
		"CurrentAddItem": Property, 
		"CanRemove": Property, 
		"CanCancelEdit": Property, 
		"IsEditingItem": Property, 
		"CurrentEditItem": Property
	});

JSIL.MakeInterface(
	"System.Windows.Data.IViewLifetime", [], {
		"get_ViewManagerData": Function, 
		"set_ViewManagerData": Function, 
		"ViewManagerData": Property
	});

JSIL.MakeClass("System.Object", "MS.Internal.CollectionViewProxy", false);

JSIL.MakeClass("System.Object", "MS.Internal.CoreTypeEventHelper", false);
JSIL.MakeClass("System.Object", "MS.Internal.CoreTypeEventHelper/EventAndDelegate", false);


JSIL.MakeStaticClass("MS.Internal.DoubleUtil", false);

JSIL.DeclareNamespace("MS.Internal.Interop");
JSIL.MakeClass("System.Object", "MS.Internal.Interop.InteropWrapper", false);

JSIL.MakeEnum(
	"MS.Internal.Interop.PALSeekOrigin", {
		SeekOriginStart: 0, 
		SeekOriginCurrent: 1, 
		SeekOriginEnd: 2
	}, false
);

JSIL.MakeClass("MS.Internal.Interop.InteropWrapper", "MS.Internal.Interop.StreamInteropWrapper", false);
JSIL.MakeDelegate("MS.Internal.Interop.StreamInteropWrapper/ReadDelegate");

JSIL.MakeDelegate("MS.Internal.Interop.StreamInteropWrapper/SeekDelegate");

JSIL.MakeDelegate("MS.Internal.Interop.StreamInteropWrapper/SetSizeDelegate");

JSIL.MakeDelegate("MS.Internal.Interop.StreamInteropWrapper/GetSizeDelegate");

JSIL.MakeDelegate("MS.Internal.Interop.StreamInteropWrapper/CloseDelegate");


JSIL.DeclareNamespace("MS.Internal.ComAutomation");
JSIL.MakeEnum(
	"MS.Internal.ComAutomation.ComAutomationInvokeType", {
		MethodCall: 0, 
		PropertyGet: 1, 
		MethodCallOrPropertyGet: 2, 
		PropertyPut: 3, 
		PropertyPutRef: 4, 
		PropertyPutOrPutRef: 5, 
		PropertyPutBasedOnParamType: 6
	}, false
);

JSIL.MakeClass("System.Runtime.InteropServices.ExternalException", "MS.Internal.ComAutomation.ComAutomationObjectException", false);

JSIL.MakeStaticClass("MS.Internal.ComAutomation.ComAutomationNative", false);

JSIL.MakeEnum(
	"MS.Internal.ComAutomation.ComAutomationNativePeerType", {
		ComObject: 0, 
		ComAutomationObject: 1, 
		ComEnum: 2
	}, false
);

JSIL.MakeClass("System.Object", "MS.Internal.ComAutomation.ComAutomationManagedPeerBase", false);

JSIL.MakeClass("MS.Internal.ComAutomation.ComAutomationManagedPeerBase", "MS.Internal.ComAutomation.ComAutomationObject", false);
JSIL.MakeDelegate("MS.Internal.ComAutomation.ComAutomationObject/RaiseComAutomationEventDelegate");

JSIL.MakeClass("System.Object", "MS.Internal.ComAutomation.ComAutomationParamWrapService", false);

JSIL.MakeClass("MS.Internal.ComAutomation.ComAutomationParamWrapService", "MS.Internal.ComAutomation.ComAutomationObject/NullComAutomationParamWrapService", false);


JSIL.MakeClass("MS.Internal.ComAutomation.ComAutomationManagedPeerBase", "MS.Internal.ComAutomation.ComAutomationEnumerator", false);

JSIL.MakeClass("MS.Internal.ComAutomation.ComAutomationManagedPeerBase", "MS.Internal.ComAutomation.InternalCOMObject", false);

JSIL.MakeStaticClass("MS.Internal.ComAutomation.ComAutomationServices", false);

JSIL.MakeEnum(
	"MS.Internal.ComAutomation.VarType", {
		Empty: 0, 
		DBNull: 1, 
		UInt8: 17, 
		UInt16: 18, 
		UInt32: 19, 
		UInt64: 21, 
		Int8: 16, 
		Int16: 2, 
		Int32: 3, 
		Int64: 20, 
		Float: 4, 
		Double: 5, 
		Decimal: 14, 
		Boolean: 11, 
		ErrorCode: 10, 
		Date: 7, 
		Currency: 6, 
		String: 8, 
		AutomationObject: 9, 
		COMObject: 13, 
		Variant: 12, 
		Flag_Array: 8192, 
		Flag_ByRef: 16384, 
		UnknownType: 65535
	}, false
);

JSIL.MakeStruct("MS.Internal.ComAutomation.ComAutomationInteropValue", false);

JSIL.MakeStaticClass("MS.Internal.ComAutomation.ComAutomationInterop", false);

JSIL.MakeStaticClass("MS.Internal.ComAutomation.ManagedObjectMarshaler", false);

JSIL.MakeStaticClass("MS.Internal.ComAutomation.NativeObjectMarshaler", false);

JSIL.MakeClass("System.Object", "MS.Internal.ComAutomation.ComAutomationParam", false);

JSIL.MakeClass(new JSIL.TypeRef($asm02, "System.Windows.PresentationFrameworkCollection$b1", ["System.Object"]), "System.Windows.Controls.ItemCollection", true);
JSIL.MakeClass(new JSIL.TypeRef($asm02, "System.Collections.ObjectModel.Collection$b1", ["System.Object"]), "System.Windows.Controls.ItemCollection/EnumerableCollectionView", false);

JSIL.MakeClass("System.Object", "System.Windows.Controls.ItemCollection/TypedEnumerable$b1", false, ["T"]);
JSIL.MakeClass("System.Object", "System.Windows.Controls.ItemCollection/TypedEnumerable$b1/$lGetEnumeratorInternal$gd__0", false, ["T"]);



JSIL.MakeClass("System.Object", "MS.Internal.Trace", false);

JSIL.MakeStaticClass("MS.Internal.TypeHelper", false);

JSIL.MakeClass("System.Object", "MS.Internal.NavigationHelper", false);

JSIL.MakeClass("System.Security.SecurityState", "MS.Internal.NavigationSecurityState", false);

JSIL.MakeClass("System.Object", "System.Windows.Controls.WeakCollectionChangedListener", false);

JSIL.MakeClass("System.Object", "MS.Internal.ViewManager", false);

JSIL.MakeClass("System.Object", "MS.Internal.ViewTable", false);

JSIL.MakeClass("System.Object", "MS.Internal.ViewRecord", false);

JSIL.MakeStruct("MS.Internal.WeakRefKey", false);

JSIL.MakeClass("System.Object", "MS.Internal.SortFieldComparer", false);
JSIL.MakeStruct("MS.Internal.SortFieldComparer/SortPropertyInfo", false);


JSIL.MakeClass("System.Object", "System.Windows.Data.CollectionView", false);
JSIL.MakeClass("System.Object", "System.Windows.Data.CollectionView/PlaceholderAwareEnumerator", false);
JSIL.MakeEnum(
	"System.Windows.Data.CollectionView/PlaceholderAwareEnumerator/Position", {
		BeforeNewItem: 0, 
		OnNewItem: 1, 
		AfterNewItem: 2
	}, false
);


JSIL.MakeClass("System.Object", "System.Windows.Data.CollectionView/DeferHelper", false);

JSIL.MakeClass("System.Object", "System.Windows.Data.CollectionView/SimpleMonitor", false);

JSIL.MakeEnum(
	"System.Windows.Data.CollectionView/CollectionViewFlags", {
		ShouldProcessCollectionChanged: 4, 
		IsCurrentBeforeFirst: 8, 
		IsCurrentAfterLast: 16, 
		NeedsRefresh: 128, 
		CachedIsEmpty: 512
	}, true
);


JSIL.MakeClass("System.Windows.Data.CollectionView", "MS.Internal.EnumerableCollectionView", false);
JSIL.MakeClass("System.Object", "MS.Internal.EnumerableCollectionView/IgnoreViewEventsHelper", false);


JSIL.MakeClass("System.Object", "MS.Internal.ClipboardXAMLSerializer", false);

JSIL.MakeClass("System.Object", "MS.Internal.RichTextXAMLValidator", false);

JSIL.MakeClass("System.Object", "MS.Internal.Comparer", false);

JSIL.MakeStruct("MS.Internal.SecurityCriticalData$b1", false, ["T"]);

JSIL.MakeClass("System.Object", "MS.Internal.SecurityCriticalDataForMultipleGetAndSet$b1", false, ["T"]);

JSIL.DeclareNamespace("MS.Internal.Xaml");
JSIL.DeclareNamespace("MS.Internal.Xaml.MS");
JSIL.DeclareNamespace("MS.Internal.Xaml.MS.Impl");
JSIL.MakeStaticClass("MS.Internal.Xaml.MS.Impl.KnownStrings", false);

JSIL.MakeStaticClass("MS.Internal.Xaml.MS.Impl.KS", false);

JSIL.DeclareNamespace("System.IO");
JSIL.DeclareNamespace("System.IO.IsolatedStorage");
JSIL.MakeClass("System.Object", "System.IO.IsolatedStorage.IsolatedStorageSettings", true);

JSIL.MakeClass("System.Attribute", "System.ComponentModel.AlternateContentPropertyAttribute", true);

JSIL.MakeClass("System.EventArgs", "System.ComponentModel.CurrentChangingEventArgs", true);

JSIL.MakeDelegate("System.ComponentModel.CurrentChangingEventHandler");

JSIL.MakeClass("System.ComponentModel.CancelEventArgs", "System.ComponentModel.ClosingEventArgs", true);

JSIL.MakeClass("System.EventArgs", "System.ComponentModel.DataErrorsChangedEventArgs", true);

JSIL.MakeClass("System.Object", "System.ComponentModel.GroupDescription", true);

JSIL.MakeInterface(
	"System.ComponentModel.ICollectionViewFactory", [], {
		"CreateView": Function
	});

JSIL.MakeEnum(
	"System.ComponentModel.NewItemPlaceholderPosition", {
		None: 0, 
		AtEnd: 2
	}, false
);

JSIL.MakeInterface(
	"System.ComponentModel.INotifyDataErrorInfo", [], {
		"get_HasErrors": Function, 
		"GetErrors": Function, 
		"add_ErrorsChanged": Function, 
		"remove_ErrorsChanged": Function, 
		"HasErrors": Property
	});

JSIL.MakeStruct("System.ComponentModel.SortDescription", true);

JSIL.MakeClass(new JSIL.TypeRef($asm02, "System.Collections.ObjectModel.Collection$b1", ["System.ComponentModel.SortDescription"]), "System.ComponentModel.SortDescriptionCollection", true);
JSIL.MakeClass("System.ComponentModel.SortDescriptionCollection", "System.ComponentModel.SortDescriptionCollection/EmptySortDescriptionCollection", false);


JSIL.DeclareNamespace("System.Runtime");
JSIL.DeclareNamespace("System.Runtime.InteropServices");
JSIL.DeclareNamespace("System.Runtime.InteropServices.Automation");
JSIL.MakeStaticClass("System.Runtime.InteropServices.Automation.AutomationFactory", true);

JSIL.MakeClass("MS.Internal.ComAutomation.ComAutomationParamWrapService", "System.Runtime.InteropServices.Automation.DynamicComAutomationParamWrapService", false);

JSIL.MakeClass("System.Object", "System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase", false);
JSIL.MakeClass("System.Dynamic.DynamicMetaObject", "System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase/MetaDynamic", false);
JSIL.MakeDelegate("System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase/MetaDynamic/Fallback");

JSIL.MakeClass("System.Object", "System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase/MetaDynamic/COMBindContext", false);

JSIL.MakeClass("System.Object", "System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase/MetaDynamic/$l$gc__DisplayClass14", false);

JSIL.MakeClass("System.Object", "System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase/MetaDynamic/$l$gc__DisplayClass18", false);

JSIL.MakeClass("System.Object", "System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase/MetaDynamic/$l$gc__DisplayClass1c", false);

JSIL.MakeClass("System.Object", "System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase/MetaDynamic/$l$gc__DisplayClass20", false);

JSIL.MakeClass("System.Object", "System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase/MetaDynamic/$l$gc__DisplayClass24", false);

JSIL.MakeClass("System.Object", "System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase/MetaDynamic/$l$gc__DisplayClass28", false);

JSIL.MakeClass("System.Object", "System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase/MetaDynamic/$l$gc__DisplayClass2c", false);



JSIL.MakeClass("System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase", "System.Runtime.InteropServices.Automation.AutomationMetaObjectProvider", false);

JSIL.MakeClass("System.Runtime.InteropServices.Automation.AutomationMetaObjectProvider", "System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderInvokeOnGetProxy", false);

JSIL.MakeClass("System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase", "System.Runtime.InteropServices.Automation.AutomationEventMetaObjectProvider", false);

JSIL.MakeStaticClass("System.Runtime.InteropServices.Automation.Helpers", false);

JSIL.MakeClass("System.Object", "System.Runtime.InteropServices.Automation.AutomationEvent", true);

JSIL.MakeClass("System.EventArgs", "System.Runtime.InteropServices.Automation.AutomationEventArgs", true);

JSIL.MakeClass("System.Windows.Controls.ContentControl", "System.Windows.Controls.Primitives.ButtonBase", true);

JSIL.MakeClass("System.Windows.Controls.Primitives.ButtonBase", "System.Windows.Controls.Button", true);

JSIL.MakeClass("System.Windows.Controls.Primitives.ButtonBase", "System.Windows.Controls.Primitives.ToggleButton", true);

JSIL.MakeClass("System.Windows.Controls.Primitives.ToggleButton", "System.Windows.Controls.CheckBox", true);

JSIL.MakeEnum(
	"System.Windows.Controls.ClickMode", {
		Release: 0, 
		Press: 1, 
		Hover: 2
	}, false
);

JSIL.MakeClass("System.Windows.RoutedEventArgs", "System.Windows.Controls.CleanUpVirtualizedItemEventArgs", true);

JSIL.MakeDelegate("System.Windows.Controls.CleanUpVirtualizedItemEventHandler");

JSIL.MakeClass("System.Windows.Controls.ItemsControl", "System.Windows.Controls.Primitives.Selector", true);
JSIL.MakeClass("System.Object", "System.Windows.Controls.Primitives.Selector/InitializingData", false);

JSIL.MakeClass("System.Object", "System.Windows.Controls.Primitives.Selector/SelectionChanger", false);

JSIL.MakeClass("System.Object", "System.Windows.Controls.Primitives.Selector/InternalSelectedItemsStorage", false);


JSIL.MakeClass("System.Windows.Controls.Primitives.Selector", "System.Windows.Controls.ComboBox", true);

JSIL.MakeClass("System.Windows.Controls.ContentControl", "System.Windows.Controls.ListBoxItem", true);

JSIL.MakeClass("System.Windows.Controls.ListBoxItem", "System.Windows.Controls.ComboBoxItem", true);

JSIL.MakeEnum(
	"System.Windows.Controls.DialogResult", {
		None: 0, 
		OK: 1, 
		Cancel: 2, 
		Abort: 3, 
		Retry: 4, 
		Ignore: 5, 
		Yes: 6, 
		No: 7
	}, false
);

JSIL.MakeInterface(
	"System.Windows.Data.IValueConverter", [], {
		"Convert": Function, 
		"ConvertBack": Function
	});

JSIL.MakeClass("System.Object", "System.Windows.Controls.DisplayMemberValueConverter", false);

JSIL.MakeInterface(
	"System.Windows.Controls.INavigate", [], {
		"Navigate": Function
	});

JSIL.MakeClass("System.Windows.Controls.Primitives.ButtonBase", "System.Windows.Controls.HyperlinkButton", true);

JSIL.MakeInterface(
	"System.Windows.Controls.Primitives.IItemContainerGenerator", [], {
		"GetItemContainerGeneratorForPanel": Function, 
		"StartAt": Function, 
		"GenerateNext": Function, 
		"PrepareItemContainer": Function, 
		"RemoveAll": Function, 
		"Remove": Function, 
		"GeneratorPositionFromIndex": Function, 
		"IndexFromGeneratorPosition": Function
	});

JSIL.MakeInterface(
	"System.Windows.Controls.Primitives.IRecyclingItemContainerGenerator", [], {
		"Recycle": Function
	});

JSIL.MakeClass("System.Object", "System.Windows.Controls.ItemContainerGenerator", true);
JSIL.MakeClass("System.Object", "System.Windows.Controls.ItemContainerGenerator/Generator", false);

JSIL.MakeDelegate("System.Windows.Controls.ItemContainerGenerator/MapChangedHandler");

JSIL.MakeClass("System.Object", "System.Windows.Controls.ItemContainerGenerator/ItemBlock", false);

JSIL.MakeClass("System.Windows.Controls.ItemContainerGenerator/ItemBlock", "System.Windows.Controls.ItemContainerGenerator/UnrealizedItemBlock", false);

JSIL.MakeClass("System.Windows.Controls.ItemContainerGenerator/ItemBlock", "System.Windows.Controls.ItemContainerGenerator/RealizedItemBlock", false);

JSIL.MakeStruct("System.Windows.Controls.ItemContainerGenerator/BlockEntry", false);

JSIL.MakeStruct("System.Windows.Controls.ItemContainerGenerator/GeneratorState", false);

JSIL.MakeClass("System.Object", "System.Windows.Controls.ItemContainerGenerator/LayoutStatesManager", false);

JSIL.MakeClass("System.Object", "System.Windows.Controls.ItemContainerGenerator/$l$gc__DisplayClass2", false);


JSIL.MakeClass("System.Windows.Controls.Primitives.Selector", "System.Windows.Controls.ListBox", true);

JSIL.MakeClass("System.Object", "System.Windows.Controls.OpenFileDialog", true);

JSIL.MakeClass("System.Object", "System.Windows.Controls.SaveFileDialog", true);

JSIL.MakeEnum(
	"System.Windows.Controls.SelectionMode", {
		Single: 0, 
		Multiple: 1, 
		Extended: 2
	}, false
);

JSIL.MakeClass("System.Windows.RoutedEventArgs", "System.Windows.Controls.Primitives.DragCompletedEventArgs", true);

JSIL.MakeDelegate("System.Windows.Controls.Primitives.DragCompletedEventHandler");

JSIL.MakeClass("System.Windows.RoutedEventArgs", "System.Windows.Controls.Primitives.DragDeltaEventArgs", true);

JSIL.MakeDelegate("System.Windows.Controls.Primitives.DragDeltaEventHandler");

JSIL.MakeClass("System.Windows.RoutedEventArgs", "System.Windows.Controls.Primitives.DragStartedEventArgs", true);

JSIL.MakeDelegate("System.Windows.Controls.Primitives.DragStartedEventHandler");

JSIL.MakeStruct("System.Windows.Controls.Primitives.GeneratorPosition", true);

JSIL.MakeEnum(
	"System.Windows.Controls.Primitives.GeneratorDirection", {
		Forward: 0, 
		Backward: 1
	}, false
);

JSIL.MakeInterface(
	"System.Windows.Controls.Primitives.IScrollInfo", [], {
		"LineUp": Function, 
		"LineDown": Function, 
		"LineLeft": Function, 
		"LineRight": Function, 
		"PageUp": Function, 
		"PageDown": Function, 
		"PageLeft": Function, 
		"PageRight": Function, 
		"MouseWheelUp": Function, 
		"MouseWheelDown": Function, 
		"MouseWheelLeft": Function, 
		"MouseWheelRight": Function, 
		"SetHorizontalOffset": Function, 
		"SetVerticalOffset": Function, 
		"MakeVisible": Function, 
		"get_CanVerticallyScroll": Function, 
		"set_CanVerticallyScroll": Function, 
		"get_CanHorizontallyScroll": Function, 
		"set_CanHorizontallyScroll": Function, 
		"get_ExtentWidth": Function, 
		"get_ExtentHeight": Function, 
		"get_ViewportWidth": Function, 
		"get_ViewportHeight": Function, 
		"get_HorizontalOffset": Function, 
		"get_VerticalOffset": Function, 
		"get_ScrollOwner": Function, 
		"set_ScrollOwner": Function, 
		"CanVerticallyScroll": Property, 
		"CanHorizontallyScroll": Property, 
		"ExtentWidth": Property, 
		"ExtentHeight": Property, 
		"ViewportWidth": Property, 
		"ViewportHeight": Property, 
		"HorizontalOffset": Property, 
		"VerticalOffset": Property, 
		"ScrollOwner": Property
	});

JSIL.MakeClass("System.EventArgs", "System.Windows.Controls.Primitives.ItemsChangedEventArgs", true);

JSIL.MakeDelegate("System.Windows.Controls.Primitives.ItemsChangedEventHandler");

JSIL.MakeEnum(
	"System.Windows.Controls.Primitives.PlacementMode", {
		Bottom: 2, 
		Right: 4, 
		Mouse: 7, 
		Left: 9, 
		Top: 10
	}, false
);

JSIL.MakeClass("System.Windows.Controls.Control", "System.Windows.Controls.Primitives.RangeBase", true);

JSIL.MakeClass("System.Windows.Controls.Primitives.ButtonBase", "System.Windows.Controls.Primitives.RepeatButton", true);

JSIL.MakeClass("System.Windows.Controls.Primitives.RangeBase", "System.Windows.Controls.Primitives.ScrollBar", true);

JSIL.MakeClass("System.Windows.RoutedEventArgs", "System.Windows.Controls.Primitives.ScrollEventArgs", true);

JSIL.MakeDelegate("System.Windows.Controls.Primitives.ScrollEventHandler");

JSIL.MakeEnum(
	"System.Windows.Controls.Primitives.ScrollEventType", {
		EndScroll: 8, 
		First: 6, 
		LargeDecrement: 2, 
		LargeIncrement: 3, 
		Last: 7, 
		SmallDecrement: 0, 
		SmallIncrement: 1, 
		ThumbPosition: 4, 
		ThumbTrack: 5
	}, false
);

JSIL.MakeClass("System.Windows.Controls.Control", "System.Windows.Controls.Primitives.Thumb", true);

JSIL.MakeClass("System.Windows.Controls.Primitives.ToggleButton", "System.Windows.Controls.RadioButton", true);

JSIL.MakeEnum(
	"System.Windows.Controls.ScrollBarVisibility", {
		Disabled: 0, 
		Auto: 1, 
		Hidden: 2, 
		Visible: 3
	}, false
);

JSIL.MakeClass("System.Windows.Controls.ContentPresenter", "System.Windows.Controls.ScrollContentPresenter", true);

JSIL.MakeClass("System.Windows.RoutedEventArgs", "System.Windows.Controls.SelectionChangedEventArgs", true);

JSIL.MakeDelegate("System.Windows.Controls.SelectionChangedEventHandler");

JSIL.MakeClass("System.Windows.Controls.Primitives.RangeBase", "System.Windows.Controls.Slider", true);

JSIL.MakeClass("System.Windows.Controls.ContentControl", "System.Windows.Controls.ToolTip", true);
JSIL.MakeDelegate("System.Windows.Controls.ToolTip/PerformOnNextTick");


JSIL.MakeStaticClass("System.Windows.Controls.ToolTipService", true);

JSIL.MakeStaticClass("System.Windows.Controls.TypeConverters", false);

JSIL.MakeStaticClass("System.Windows.Controls.VisualStates", false);
JSIL.MakeDelegate("System.Windows.Controls.VisualStates/ChangeVisualStateDelegate");

JSIL.MakeEnum(
	"System.Windows.Controls.VisualStates/VisualStateFlag", {
		UseTransition: 1, 
		Enabled: 2, 
		Focused: 4, 
		ReadOnly: 8, 
		MouseOver: 16
	}, true
);


JSIL.MakeEnum(
	"System.Windows.Controls.VirtualizationMode", {
		Standard: 0, 
		Recycling: 1
	}, false
);

JSIL.MakeClass("System.Windows.Controls.Panel", "System.Windows.Controls.VirtualizingPanel", true);

JSIL.MakeClass("System.Windows.Controls.VirtualizingPanel", "System.Windows.Controls.VirtualizingStackPanel", true);
JSIL.MakeInterface(
	"System.Windows.Controls.VirtualizingStackPanel/IProvideStackingSize", [], {
		"HeaderSize": Function, 
		"EstimatedContainerSize": Function
	});


JSIL.MakeClass("System.Windows.Controls.Primitives.RangeBase", "System.Windows.Controls.ProgressBar", true);

JSIL.DeclareNamespace("MS.Internal.Data");
JSIL.MakeClass("System.Object", "MS.Internal.Data.DefaultValueConverter", false);

JSIL.MakeClass("System.Object", "MS.Internal.Data.DynamicValueConverter", false);

JSIL.MakeClass("System.Object", "MS.Internal.Data.InterfaceConverter", false);

JSIL.MakeClass("MS.Internal.Data.DefaultValueConverter", "MS.Internal.Data.ObjectSourceConverter", false);

JSIL.MakeClass("MS.Internal.Data.DefaultValueConverter", "MS.Internal.Data.ObjectTargetConverter", false);

JSIL.MakeClass("System.ComponentModel.GroupDescription", "System.Windows.Data.PropertyGroupDescription", true);

JSIL.MakeClass("MS.Internal.Data.DefaultValueConverter", "MS.Internal.Data.SourceDefaultValueConverter", false);

JSIL.MakeClass("System.Object", "MS.Internal.Data.SystemConvertConverter", false);

JSIL.MakeClass("MS.Internal.Data.DefaultValueConverter", "MS.Internal.Data.TargetDefaultValueConverter", false);

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.Data.CollectionViewSource", true);
JSIL.MakeClass("System.Object", "System.Windows.Data.CollectionViewSource/DeferHelper", false);

JSIL.MakeClass("System.Object", "System.Windows.Data.CollectionViewSource/FilterStub", false);


JSIL.MakeClass("System.EventArgs", "System.Windows.Data.FilterEventArgs", true);

JSIL.MakeDelegate("System.Windows.Data.FilterEventHandler");

JSIL.MakeClass("System.Windows.Data.CollectionView", "System.Windows.Data.ListCollectionView", false);
JSIL.MakeEnum(
	"System.Windows.Data.ListCollectionView/EffectiveNotifyCollectionChangedAction", {
		Add: 0, 
		Remove: 1, 
		Replace: 2, 
		Move: 3, 
		Reset: 4
	}, false
);


JSIL.MakeStaticClass("System.Windows.Data.BindingOperations", true);

JSIL.MakeInterface(
	"System.Windows.INativeCollectionWrapper", [], {
		"GetCollection": Function
	});

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.DependencyObjectCollection$b1", true, ["T"]);
JSIL.MakeClass("System.Object", "System.Windows.DependencyObjectCollection$b1/$lGetEnumerator$gd__0", false, ["T"]);


JSIL.MakeClass(new JSIL.TypeRef($asm02, "System.Windows.PresentationFrameworkCollection$b1", ["System.Windows.DependencyObject"]), "System.Windows.DOCollection", false);

JSIL.MakeClass("System.Object", "System.Windows.Documents.FontSource", true);

JSIL.MakeEnum(
	"System.Windows.Documents.ElementEdge", {
		ElementStart: 0, 
		ContentStart: 1, 
		ContentEnd: 2, 
		ElementEnd: 3
	}, false
);

JSIL.MakeClass("System.Object", "System.Windows.Documents.TextRange", false);

JSIL.MakeClass("System.Windows.Documents.TextRange", "System.Windows.Documents.UIATextRange", false);

JSIL.MakeEnum(
	"System.Windows.Documents.RangeTextUnit", {
		Character: 0, 
		Format: 1, 
		Word: 2, 
		Line: 3, 
		Paragraph: 4, 
		Page: 5, 
		Document: 6
	}, false
);

JSIL.MakeEnum(
	"System.Windows.Documents.RangeEndpoint", {
		Start: 0, 
		End: 1
	}, false
);

JSIL.MakeEnum(
	"System.Windows.Documents.LogicalDirection", {
		Backward: 0, 
		Forward: 1
	}, false
);

JSIL.MakeClass("System.Object", "System.Windows.Documents.TextPointer", true);

JSIL.MakeClass("System.Object", "System.Windows.Documents.TextSelection", true);

JSIL.MakeClass("System.Object", "System.Windows.Analytics", true);

JSIL.MakeClass("System.Object", "System.Windows.GpuInformation", true);

JSIL.MakeStaticClass("System.Windows.DataFormats", true);

JSIL.MakeInterface(
	"System.Windows.IDataObject", [], {
		"GetData": Function, 
		"GetData": Function, 
		"GetData": Function, 
		"GetDataPresent": Function, 
		"GetDataPresent": Function, 
		"GetDataPresent": Function, 
		"GetFormats": Function, 
		"GetFormats": Function, 
		"SetData": Function, 
		"SetData": Function, 
		"SetData": Function, 
		"SetData": Function
	});

JSIL.MakeClass("System.Object", "System.Windows.DataObject", true);

JSIL.MakeClass("System.ComponentModel.TypeConverter", "System.Windows.DurationConverter", true);

JSIL.MakeStruct("System.Windows.FontStretch", true);

JSIL.MakeStaticClass("System.Windows.FontStretches", true);

JSIL.MakeStruct("System.Windows.FontStyle", true);

JSIL.MakeStaticClass("System.Windows.FontStyles", true);

JSIL.MakeStruct("System.Windows.FontWeight", true);

JSIL.MakeStaticClass("System.Windows.FontWeights", true);

JSIL.MakeClass("System.Exception", "System.Windows.LayoutCycleException", true);

JSIL.MakeClass("System.Attribute", "System.Windows.TemplateVisualStateAttribute", true);

JSIL.MakeClass("System.Object", "System.Windows.MessageBox", true);
JSIL.MakeEnum(
	"System.Windows.MessageBox/Win32MessageBoxResult", {
		OK: 1, 
		Cancel: 2, 
		Yes: 6, 
		No: 7
	}, false
);


JSIL.MakeEnum(
	"System.Windows.MessageBoxResult", {
		None: 0, 
		OK: 1, 
		Cancel: 2, 
		Yes: 6, 
		No: 7
	}, false
);

JSIL.MakeEnum(
	"System.Windows.MessageBoxButton", {
		OK: 0, 
		OKCancel: 1
	}, false
);

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.ExternalPart", true);

JSIL.MakeClass("System.Windows.ExternalPart", "System.Windows.ExtensionPart", true);

JSIL.MakeClass(new JSIL.TypeRef($asm02, "System.Windows.PresentationFrameworkCollection$b1", ["System.Windows.ExternalPart"]), "System.Windows.ExternalPartCollection", true);

JSIL.MakeEnum(
	"System.Windows.DataContextChangedReason", {
		NewDataContext: 0, 
		EnteringLiveTree: 1
	}, false
);

JSIL.MakeClass("System.EventArgs", "System.Windows.DataContextChangedEventArgs", false);

JSIL.MakeDelegate("System.Windows.DataContextChangedEventHandler");

JSIL.MakeClass("System.IO.FileStream", "System.Windows.SaveFileStream", false);

JSIL.DeclareNamespace("System.Windows.Hosting");
JSIL.MakeInterface(
	"System.Windows.Hosting.INativePeer", [], {
		"Disconnect": Function
	});

JSIL.MakeClass("System.Object", "System.Windows.Hosting.DelegateWrapper", false);

JSIL.MakeClass("System.Windows.Hosting.DelegateWrapper", "System.Windows.Hosting.CallbackCookie", false);

JSIL.MakeClass("System.Object", "System.Windows.Hosting.HostHandle", false);

JSIL.MakeClass("System.Windows.Hosting.HostHandle", "System.Windows.Hosting.DOMHandle", false);

JSIL.MakeClass("System.Windows.Hosting.DOMHandle", "System.Windows.Hosting.DOMHandleWithoutDispose", false);

JSIL.MakeInterface(
	"System.Windows.Hosting.IBrowserService", [], {
		"get_BridgeEnabled": Function, 
		"set_BridgeEnabled": Function, 
		"GetIdentity": Function, 
		"ReferenceEquals": Function, 
		"GetWindow": Function, 
		"GetDocument": Function, 
		"GetDocumentUri": Function, 
		"CreateFunction": Function, 
		"CreateManagedObject": Function, 
		"ReferenceObject": Function, 
		"ReleaseObject": Function, 
		"GetControlElement": Function, 
		"GetElementsByTagName": Function, 
		"CreateElement": Function, 
		"GetParent": Function, 
		"GetChildren": Function, 
		"InsertChild": Function, 
		"RemoveChild": Function, 
		"RemoveAttribute": Function, 
		"AttachEvent": Function, 
		"DetachEvent": Function, 
		"Focus": Function, 
		"Navigate": Function, 
		"Submit": Function, 
		"GetElementCollectionCount": Function, 
		"GetElementCollectionItem": Function, 
		"GetEventInfo": Function, 
		"InvokeBrowserFunction": Function, 
		"Invoke": Function, 
		"GetProperty": Function, 
		"SetProperty": Function, 
		"Eval": Function, 
		"GetElementByID": Function, 
		"GetAttribute": Function, 
		"SetAttribute": Function, 
		"GetBrowserInfo": Function, 
		"GetCookiesEnabled": Function, 
		"StopPropagation": Function, 
		"PreventDefault": Function, 
		"GetOpenFileName": Function, 
		"GetSaveFileName": Function, 
		"CloseSavedFile": Function, 
		"GetBrowserHandle": Function, 
		"IsIEProtectedMode": Function, 
		"RequestQuota": Function, 
		"TogglePopupBlocker": Function, 
		"InPrivateMode": Function, 
		"InCustomHost": Function, 
		"BridgeEnabled": Property
	});

JSIL.MakeInterface(
	"System.Windows.Hosting.IManagedRuntimeHost", [], {
		"get_ScriptableEnabled": Function, 
		"AddReference": Function, 
		"ReleaseReference": Function, 
		"ReleaseIUnknownReference": Function, 
		"AllocMemory": Function, 
		"AllocMemory": Function, 
		"FreeMemory": Function, 
		"PtrToStringUni": Function, 
		"PtrToStringUni": Function, 
		"CreateCallback": Function, 
		"NotifyError": Function, 
		"RegisterScriptableObject": Function, 
		"UnregisterScriptableObject": Function, 
		"GetBrowserService": Function, 
		"IsCrossDomainSource": Function, 
		"AllowHtmlPopupWindow": Function, 
		"DisallowPopupWindow": Function, 
		"RaiseAsyncCallback": Function, 
		"ScriptableEnabled": Property
	});

JSIL.MakeClass("System.Object", "System.Windows.Hosting.NativeHost", false);

JSIL.MakeStaticClass("System.Windows.Hosting.NativeMethods", false);
JSIL.MakeStruct("System.Windows.Hosting.NativeMethods/ScriptParam", false);

JSIL.MakeStruct("System.Windows.Hosting.NativeMethods/ExceptionInfo", false);

JSIL.MakeStruct("System.Windows.Hosting.NativeMethods/OpenFileNameInfo", false);

JSIL.MakeStruct("System.Windows.Hosting.NativeMethods/DOMEventInfo", false);

JSIL.MakeEnum(
	"System.Windows.Hosting.NativeMethods/MemberTypes", {
		Property: 1, 
		Method: 2, 
		DynamicProperty: 3
	}, false
);

JSIL.MakeEnum(
	"System.Windows.Hosting.NativeMethods/InvokeType", {
		InvokeMemberMethod: 1, 
		InvokeMemberPropertyGet: 2, 
		InvokeMemberPropertySet: 4
	}, false
);

JSIL.MakeEnum(
	"System.Windows.Hosting.NativeMethods/ScriptParamType", {
		VoidParam: 0, 
		IntegerParam: 1, 
		BooleanParam: 2, 
		DoubleParam: 3, 
		StringParam: 4, 
		JSONParam: 5, 
		ObjectParam: 6, 
		HtmlElementParam: 7, 
		HtmlDocumentParam: 8, 
		HtmlElementCollectionParam: 9, 
		HtmlWindowParam: 10
	}, false
);

JSIL.MakeEnum(
	"System.Windows.Hosting.NativeMethods/OpenFileNameFlags", {
		OFN_READONLY: 1, 
		OFN_OVERWRITEPROMPT: 2, 
		OFN_HIDEREADONLY: 4, 
		OFN_NOCHANGEDIR: 8, 
		OFN_SHOWHELP: 16, 
		OFN_ENABLEHOOK: 32, 
		OFN_ENABLETEMPLATE: 64, 
		OFN_ENABLETEMPLATEHANDLE: 128, 
		OFN_NOVALIDATE: 256, 
		OFN_ALLOWMULTISELECT: 512, 
		OFN_EXTENSIONDIFFERENT: 1024, 
		OFN_PATHMUSTEXIST: 2048, 
		OFN_FILEMUSTEXIST: 4096, 
		OFN_CREATEPROMPT: 8192, 
		OFN_SHAREAWARE: 16384, 
		OFN_NOREADONLYRETURN: 32768, 
		OFN_NOTESTFILECREATE: 65536, 
		OFN_NONETWORKBUTTON: 131072, 
		OFN_NOLONGNAMES: 262144, 
		OFN_EXPLORER: 524288, 
		OFN_NODEREFERENCELINKS: 1048576, 
		OFN_LONGNAMES: 2097152, 
		OFN_ENABLEINCLUDENOTIFY: 4194304, 
		OFN_ENABLESIZING: 8388608, 
		OFN_DONTADDTORECENT: 33554432, 
		OFN_FORCESHOWHIDDEN: 268435456, 
		OFN_EX_NOPLACESBAR: 1
	}, false
);


JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.Ink.Stroke", true);

JSIL.MakeClass("System.Object", "System.Windows.Input.Cursor", true);

JSIL.MakeEnum(
	"System.Windows.Input.CursorType", {
		Default: 0, 
		Arrow: 1, 
		Hand: 2, 
		Wait: 3, 
		IBeam: 4, 
		Stylus: 5, 
		Eraser: 6, 
		SizeNS: 7, 
		SizeWE: 8, 
		SizeNESW: 9, 
		SizeNWSE: 10, 
		None: 11
	}, false
);

JSIL.MakeStaticClass("System.Windows.Input.Cursors", true);

JSIL.MakeStaticClass("System.Windows.Input.FocusManager", true);

JSIL.MakeInterface(
	"System.Windows.Input.ICommand", [], {
		"add_CanExecuteChanged": Function, 
		"remove_CanExecuteChanged": Function, 
		"CanExecute": Function, 
		"Execute": Function
	});

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.Input.InputMethod", true);

JSIL.MakeEnum(
	"System.Windows.Input.Key", {
		None: 0, 
		Back: 1, 
		Tab: 2, 
		Enter: 3, 
		Shift: 4, 
		Ctrl: 5, 
		Alt: 6, 
		CapsLock: 7, 
		Escape: 8, 
		Space: 9, 
		PageUp: 10, 
		PageDown: 11, 
		End: 12, 
		Home: 13, 
		Left: 14, 
		Up: 15, 
		Right: 16, 
		Down: 17, 
		Insert: 18, 
		Delete: 19, 
		D0: 20, 
		D1: 21, 
		D2: 22, 
		D3: 23, 
		D4: 24, 
		D5: 25, 
		D6: 26, 
		D7: 27, 
		D8: 28, 
		D9: 29, 
		A: 30, 
		B: 31, 
		C: 32, 
		D: 33, 
		E: 34, 
		F: 35, 
		G: 36, 
		H: 37, 
		I: 38, 
		J: 39, 
		K: 40, 
		L: 41, 
		M: 42, 
		N: 43, 
		O: 44, 
		P: 45, 
		Q: 46, 
		R: 47, 
		S: 48, 
		T: 49, 
		U: 50, 
		V: 51, 
		W: 52, 
		X: 53, 
		Y: 54, 
		Z: 55, 
		F1: 56, 
		F2: 57, 
		F3: 58, 
		F4: 59, 
		F5: 60, 
		F6: 61, 
		F7: 62, 
		F8: 63, 
		F9: 64, 
		F10: 65, 
		F11: 66, 
		F12: 67, 
		NumPad0: 68, 
		NumPad1: 69, 
		NumPad2: 70, 
		NumPad3: 71, 
		NumPad4: 72, 
		NumPad5: 73, 
		NumPad6: 74, 
		NumPad7: 75, 
		NumPad8: 76, 
		NumPad9: 77, 
		Multiply: 78, 
		Add: 79, 
		Subtract: 80, 
		Decimal: 81, 
		Divide: 82, 
		Unknown: 255
	}, false
);

JSIL.MakeStaticClass("System.Windows.Input.Keyboard", true);

JSIL.MakeStaticClass("System.Windows.Input.KeyboardNavigation", false);

JSIL.MakeEnum(
	"System.Windows.Input.ModifierKeys", {
		None: 0, 
		Alt: 1, 
		Control: 2, 
		Shift: 4, 
		Windows: 8, 
		Apple: 8
	}, true
);

JSIL.MakeStaticClass("System.Windows.Input.Touch", true);

JSIL.MakeClass("System.Object", "System.Windows.Input.TextComposition", true);

JSIL.MakeClass("System.Attribute", "System.Windows.Markup.ContentPropertyAttribute", true);

JSIL.MakeClass("System.Object", "System.Windows.Markup.XmlLanguage", true);

JSIL.MakeClass("System.Attribute", "System.Windows.Markup.XmlnsDefinitionAttribute", true);

JSIL.MakeClass("System.Attribute", "System.Windows.Markup.XmlnsPrefixAttribute", true);

JSIL.MakeStaticClass("System.Windows.Media.CompositionTarget", true);

JSIL.MakeClass("System.Object", "System.Windows.Media.FontFamily", true);

JSIL.MakeStaticClass("System.Windows.Media.Fonts", true);
JSIL.MakeStruct("System.Windows.Media.Fonts/TypefaceCollection", false);
JSIL.MakeClass("System.Object", "System.Windows.Media.Fonts/TypefaceCollection/$lGetEnumerator$gd__0", false);



JSIL.MakeClass("System.Object", "System.Windows.Media.Typeface", true);

JSIL.MakeClass("System.Object", "System.Windows.Media.GlyphTypeface", true);

JSIL.MakeClass("System.ComponentModel.TypeConverter", "System.Windows.Media.ImageSourceConverter", true);

JSIL.MakeClass("System.Windows.Media.Imaging.BitmapSource", "System.Windows.Media.Imaging.WriteableBitmap", true);

JSIL.MakeClass("System.Object", "System.Windows.Interop.HostingRenderTargetBitmap", true);

JSIL.MakeEnum(
	"System.Windows.Media.MediaStreamType", {
		Audio: 0, 
		Video: 1, 
		Script: 2
	}, false
);

JSIL.MakeEnum(
	"System.Windows.Media.MediaStreamAttributeKeys", {
		CodecPrivateData: 0, 
		VideoFourCC: 1, 
		Width: 2, 
		Height: 3
	}, false
);

JSIL.MakeClass("System.Object", "System.Windows.Media.MediaStreamDescription", true);

JSIL.MakeEnum(
	"System.Windows.Media.MediaSampleAttributeKeys", {
		KeyFrameFlag: 0, 
		DRMInitializationVector: 1, 
		FrameWidth: 2, 
		FrameHeight: 3, 
		DRMSubSampleMapping: 4
	}, false
);

JSIL.MakeClass("System.Object", "System.Windows.Media.MediaStreamSample", true);

JSIL.MakeEnum(
	"System.Windows.Media.MediaSourceAttributesKeys", {
		CanSeek: 0, 
		Duration: 1, 
		DRMHeader: 2
	}, false
);

JSIL.MakeClass("System.Object", "System.Windows.Media.MediaStreamSource", true);

JSIL.MakeEnum(
	"System.Windows.Media.MediaStreamSourceDiagnosticKind", {
		BufferLevelInMilliseconds: 1, 
		BufferLevelInBytes: 2
	}, false
);

JSIL.MakeStaticClass("System.Windows.Media.TextOptions", true);

JSIL.MakeClass("System.Object", "System.Windows.Media.Effects.ShaderConstant", false);

JSIL.MakeEnum(
	"System.Windows.Media.Effects.SamplingMode", {
		Auto: 0, 
		NearestNeighbor: 1, 
		Bilinear: 2
	}, false
);

JSIL.MakeClass("System.Object", "System.Windows.Media.Effects.ShaderSampler", false);

JSIL.DeclareNamespace("System.Windows.Media.Media3D");
JSIL.MakeStruct("System.Windows.Media.Media3D.Matrix3D", true);

JSIL.MakeStruct("System.Windows.Media.PALVideoFormat", false);

JSIL.MakeClass("System.Object", "System.Windows.Media.VideoFormat", true);

JSIL.MakeStruct("System.Windows.Media.PALAudioFormat", false);

JSIL.MakeClass("System.Object", "System.Windows.Media.AudioFormat", true);

JSIL.MakeClass("System.Object", "System.Windows.Media.VideoSink", true);
JSIL.MakeEnum(
	"System.Windows.Media.VideoSink/FunctionIndex", {
		CaptureStarted: 0, 
		CaptureStopped: 1, 
		FormatChanged: 2, 
		Sample: 3, 
		FunctionCount: 4
	}, false
);

JSIL.MakeDelegate("System.Windows.Media.VideoSink/NotifyCaptureStartedDelegate");

JSIL.MakeDelegate("System.Windows.Media.VideoSink/NotifyCaptureStoppedDelegate");

JSIL.MakeDelegate("System.Windows.Media.VideoSink/NotifyVideoFormatChangedDelegate");

JSIL.MakeDelegate("System.Windows.Media.VideoSink/NotifyVideoSampleDelegate");


JSIL.MakeClass("System.Object", "System.Windows.Media.AudioSink", true);
JSIL.MakeEnum(
	"System.Windows.Media.AudioSink/FunctionIndex", {
		CaptureStarted: 0, 
		CaptureStopped: 1, 
		FormatChanged: 2, 
		Samples: 3, 
		FunctionCount: 4
	}, false
);

JSIL.MakeDelegate("System.Windows.Media.AudioSink/NotifyCaptureStartedDelegate");

JSIL.MakeDelegate("System.Windows.Media.AudioSink/NotifyCaptureStoppedDelegate");

JSIL.MakeDelegate("System.Windows.Media.AudioSink/NotifyAudioFormatChangedDelegate");

JSIL.MakeDelegate("System.Windows.Media.AudioSink/NotifyAudioSamplesDelegate");


JSIL.MakeClass("System.ComponentModel.AsyncCompletedEventArgs", "System.Windows.Media.CaptureImageCompletedEventArgs", true);

JSIL.MakeClass("System.Windows.Media.VideoSink", "System.Windows.Media.SingleImageSink", false);
JSIL.MakeClass("System.Object", "System.Windows.Media.SingleImageSink/$l$gc__DisplayClass2", false);


JSIL.MakeStaticClass("System.Windows.Media.CaptureDeviceConfiguration", true);

JSIL.MakeClass("System.ComponentModel.AsyncCompletedEventArgs", "System.Windows.Media.DomainOperationCompletedEventArgs", true);

JSIL.MakeClass("System.Windows.Media.DomainOperationCompletedEventArgs", "System.Windows.Media.JoinDomainCompletedEventArgs", true);

JSIL.MakeClass("System.Windows.Media.DomainOperationCompletedEventArgs", "System.Windows.Media.LeaveDomainCompletedEventArgs", true);

JSIL.MakeEnum(
	"System.Windows.Media.BindState", {
		Bound: 0, 
		Unbound: 1, 
		CannotBind: 2
	}, false
);

JSIL.MakeClass("System.Object", "System.Windows.Media.DomainAcquirer", true);
JSIL.MakeDelegate("System.Windows.Media.DomainAcquirer/DomainAcquisitionDelegate");


JSIL.MakeClass("System.Object", "System.Windows.Media.MediaLicense", true);

JSIL.MakeClass("System.Exception", "System.Windows.Media.DrmException", false);

JSIL.MakeEnum(
	"System.Windows.Media.ContentKeyType", {
		Aes128Bit: 0, 
		Cocktail: 3
	}, false
);

JSIL.MakeClass("System.ComponentModel.AsyncCompletedEventArgs", "System.Windows.Media.AcquireLicenseCompletedEventArgs", true);

JSIL.MakeClass("System.Object", "System.Windows.Media.LicenseAcquirer", true);
JSIL.MakeDelegate("System.Windows.Media.LicenseAcquirer/AbortCompleteDelegate");

JSIL.MakeDelegate("System.Windows.Media.LicenseAcquirer/DomainJoinRequiredDelegate");

JSIL.MakeDelegate("System.Windows.Media.LicenseAcquirer/CompleteDelegate");

JSIL.MakeDelegate("System.Windows.Media.LicenseAcquirer/ChallengeGeneratedDelegate");


JSIL.MakeClass("System.Object", "System.Windows.Media.LicenseEnumerator", false);

JSIL.MakeClass("System.Object", "System.Windows.Media.LicenseEnumerable", false);

JSIL.MakeStaticClass("System.Windows.Media.LicenseManagement", true);

JSIL.MakeClass("System.Object", "System.Windows.Media.VideoOutputConnector", true);

JSIL.MakeEnum(
	"System.Windows.Media.VideoOutputConnectorType", {
		Other: 0, 
		Vga: 1, 
		SVideo: 2, 
		CompositeVideo: 3, 
		ComponentVideo: 4, 
		Dvi: 5, 
		Hdmi: 6, 
		Llvds: 7, 
		Tmds: 8, 
		JapaneseDConnector: 9, 
		Sdi: 10, 
		DisplayPortExternal: 11, 
		DisplayPortInternal: 12, 
		UdiExternal: 13, 
		UdiInternal: 14, 
		Internal: 15
	}, false
);

JSIL.MakeClass("System.Object", "System.Windows.Media.ManagedNativePeerPair", false);

JSIL.DeclareNamespace("System.Windows.Messaging");
JSIL.MakeClass("System.Object", "System.Windows.Messaging.LocalMessageValidationHelper", false);

JSIL.MakeClass("System.Object", "System.Windows.Messaging.LocalMessagePeerHelper", false);

JSIL.MakeEnum(
	"System.Windows.Messaging.ReceiverNameScope", {
		Domain: 0, 
		Global: 1
	}, false
);

JSIL.MakeClass("System.Object", "System.Windows.Messaging.LocalMessageReceiver", true);

JSIL.MakeClass("System.EventArgs", "System.Windows.Messaging.MessageReceivedEventArgs", true);

JSIL.MakeClass("System.Exception", "System.Windows.Messaging.ListenFailedException", true);

JSIL.MakeDelegate("System.Windows.Messaging.MessageReceivedDelegate");

JSIL.MakeClass("System.Object", "System.Windows.Messaging.LocalMessageSender", true);

JSIL.MakeClass("System.ComponentModel.AsyncCompletedEventArgs", "System.Windows.Messaging.SendCompletedEventArgs", true);

JSIL.MakeClass("System.Exception", "System.Windows.Messaging.SendFailedException", true);

JSIL.MakeDelegate("System.Windows.Messaging.SendCompletedDelegate");

JSIL.MakeStaticClass("System.Windows.Clipboard", true);

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.Media.MultiScaleTileSource", true);

JSIL.MakeClass("System.Windows.Media.MultiScaleTileSource", "System.Windows.Media.DeepZoomImageTileSource", true);

JSIL.MakeClass("System.ComponentModel.TypeConverter", "System.Windows.NullableBoolConverter", true);

JSIL.MakeClass("System.Object", "System.Windows.PropertyMetadata", true);

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.ResourceDictionary", true);
JSIL.MakeDelegate("System.Windows.ResourceDictionary/UpdateResourceDelegate");

JSIL.MakeEnum(
	"System.Windows.ResourceDictionary/UpdateResourceKind", {
		Add: 0, 
		Get: 1
	}, false
);

JSIL.DeclareNamespace("$lSystem");
JSIL.DeclareNamespace("$lSystem.Collections");
JSIL.DeclareNamespace("$lSystem.Collections.Generic");
JSIL.DeclareNamespace("$lSystem.Collections.Generic.IEnumerable$lSystem");
JSIL.DeclareNamespace("$lSystem.Collections.Generic.IEnumerable$lSystem.Collections");
JSIL.DeclareNamespace("$lSystem.Collections.Generic.IEnumerable$lSystem.Collections.Generic");
JSIL.DeclareNamespace("$lSystem.Collections.Generic.IEnumerable$lSystem.Collections.Generic.KeyValuePair$lSystem");
JSIL.DeclareNamespace("$lSystem.Collections.Generic.IEnumerable$lSystem.Collections.Generic.KeyValuePair$lSystem.Object,System");
JSIL.DeclareNamespace("$lSystem.Collections.Generic.IEnumerable$lSystem.Collections.Generic.KeyValuePair$lSystem.Object,System.Object$g$g");
JSIL.MakeClass("System.Object", "System.Windows.ResourceDictionary/GetEnumerator$gd__0", false);


JSIL.MakeClass("System.Object", "System.Windows.ResourceDictionaryEnumerator", false);

JSIL.MakeClass("System.Object", "System.Windows.RoutedEvent", true);

JSIL.MakeClass("System.Windows.RoutedEventArgs", "System.Windows.RoutedPropertyChangedEventArgs$b1", true, ["T"]);

JSIL.MakeDelegate("System.Windows.RoutedPropertyChangedEventHandler$b1");

JSIL.MakeClass("System.Attribute", "System.Windows.StyleTypedPropertyAttribute", true);

JSIL.MakeStaticClass("System.Windows.SystemColors", true);
JSIL.MakeEnum(
	"System.Windows.SystemColors/ColorIndex", {
		ActiveBorder: 0, 
		ActiveCaption: 1, 
		ActiveCaptionText: 2, 
		AppWorkspace: 3, 
		Desktop: 4, 
		Control: 5, 
		ControlDark: 6, 
		ControlDarkDark: 7, 
		ControlLight: 8, 
		ControlLightLight: 9, 
		ControlText: 10, 
		GrayText: 11, 
		Highlight: 12, 
		HighlightText: 13, 
		InactiveBorder: 14, 
		InactiveCaption: 15, 
		InactiveCaptionText: 16, 
		Info: 17, 
		InfoText: 18, 
		Menu: 19, 
		MenuText: 20, 
		ScrollBar: 21, 
		Window: 22, 
		WindowFrame: 23, 
		WindowText: 24
	}, false
);


JSIL.MakeStaticClass("System.Windows.SystemParameters", true);

JSIL.MakeEnum(
	"System.Windows.TextDecorationLocation", {
		Underline: 1
	}, false
);

JSIL.MakeClass("System.Object", "System.Windows.TextDecoration", false);

JSIL.MakeClass("System.Object", "System.Windows.TextDecorationCollection", true);

JSIL.MakeStaticClass("System.Windows.TextDecorations", true);

JSIL.MakeClass("System.Object", "System.Windows.Threading.Dispatcher", true);
JSIL.MakeClass("System.Object", "System.Windows.Threading.Dispatcher/$l$gc__DisplayClass1", false);

JSIL.MakeClass("System.Object", "System.Windows.Threading.Dispatcher/$l$gc__DisplayClass4", false);


JSIL.MakeClass("System.Threading.SynchronizationContext", "System.Windows.Threading.DispatcherSynchronizationContext", true);

JSIL.MakeClass("System.Object", "System.Windows.Threading.DispatcherOperation", true);

JSIL.MakeEnum(
	"System.Windows.Threading.DispatcherPriority", {
		Send: 10, 
		Normal: 9, 
		Background: 4
	}, false
);

JSIL.MakeEnum(
	"System.Windows.Visibility", {
		Visible: 0, 
		Collapsed: 1
	}, false
);

JSIL.MakeStaticClass("System.Windows.Media.VisualTreeHelper", true);
JSIL.MakeEnum(
	"System.Windows.Media.VisualTreeHelper/RelativeKind", {
		Child: 0, 
		Parent: 1
	}, false
);


JSIL.MakeEnum(
	"System.Windows.WindowState", {
		Normal: 0, 
		Minimized: 1, 
		Maximized: 2
	}, false
);

JSIL.MakeEnum(
	"System.Windows.WindowResizeEdge", {
		Left: 1, 
		Right: 2, 
		Top: 3, 
		TopLeft: 4, 
		TopRight: 5, 
		Bottom: 6, 
		BottomLeft: 7, 
		BottomRight: 8
	}, false
);

JSIL.MakeClass("System.Windows.DependencyObject", "System.Windows.Automation.Peers.AutomationPeer", true);

JSIL.MakeClass("System.Windows.Automation.Peers.AutomationPeer", "System.Windows.Automation.Peers.FrameworkElementAutomationPeer", true);
JSIL.MakeDelegate("System.Windows.Automation.Peers.FrameworkElementAutomationPeer/IteratorCallback");

JSIL.MakeClass("System.Object", "System.Windows.Automation.Peers.FrameworkElementAutomationPeer/$l$gc__DisplayClass1", false);


JSIL.MakeClass("System.Exception", "System.Windows.Automation.ElementNotEnabledException", true);

JSIL.MakeClass("System.Exception", "System.Windows.Automation.ElementNotAvailableException", true);

JSIL.MakeStaticClass("System.Windows.Automation.AutomationProperties", true);

JSIL.MakeStaticClass("System.Windows.Automation.AutomationElementIdentifiers", true);

JSIL.MakeClass("System.Object", "System.Windows.Automation.AutomationProperty", true);

JSIL.MakeStaticClass("System.Windows.Automation.DockPatternIdentifiers", true);

JSIL.MakeStaticClass("System.Windows.Automation.ExpandCollapsePatternIdentifiers", true);

JSIL.MakeStaticClass("System.Windows.Automation.GridItemPatternIdentifiers", true);

JSIL.MakeStaticClass("System.Windows.Automation.GridPatternIdentifiers", true);

JSIL.MakeStaticClass("System.Windows.Automation.MultipleViewPatternIdentifiers", true);

JSIL.MakeStaticClass("System.Windows.Automation.RangeValuePatternIdentifiers", true);

JSIL.MakeStaticClass("System.Windows.Automation.ScrollPatternIdentifiers", true);

JSIL.MakeStaticClass("System.Windows.Automation.SelectionItemPatternIdentifiers", true);

JSIL.MakeStaticClass("System.Windows.Automation.SelectionPatternIdentifiers", true);

JSIL.MakeStaticClass("System.Windows.Automation.TableItemPatternIdentifiers", true);

JSIL.MakeStaticClass("System.Windows.Automation.TablePatternIdentifiers", true);

JSIL.MakeStaticClass("System.Windows.Automation.TogglePatternIdentifiers", true);

JSIL.MakeStaticClass("System.Windows.Automation.TransformPatternIdentifiers", true);

JSIL.MakeStaticClass("System.Windows.Automation.ValuePatternIdentifiers", true);

JSIL.MakeStaticClass("System.Windows.Automation.WindowPatternIdentifiers", true);

JSIL.MakeStaticClass("System.Windows.Automation.TextPatternIdentifiers", true);

JSIL.MakeClass("System.Object", "System.Windows.Automation.AutomationTextAttribute", true);

JSIL.MakeEnum(
	"System.Windows.Automation.SupportedTextSelection", {
		None: 0, 
		Single: 1, 
		Multiple: 2
	}, true
);

JSIL.DeclareNamespace("System.Windows.Automation.Text");
JSIL.MakeEnum(
	"System.Windows.Automation.Text.TextPatternRangeEndpoint", {
		Start: 0, 
		End: 1
	}, false
);

JSIL.MakeEnum(
	"System.Windows.Automation.Text.TextUnit", {
		Character: 0, 
		Format: 1, 
		Word: 2, 
		Line: 3, 
		Paragraph: 4, 
		Page: 5, 
		Document: 6
	}, false
);

JSIL.DeclareNamespace("System.Windows.Automation.Provider");
JSIL.MakeInterface(
	"System.Windows.Automation.Provider.ITextProvider", [], {
		"GetSelection": Function, 
		"GetVisibleRanges": Function, 
		"RangeFromChild": Function, 
		"RangeFromPoint": Function, 
		"get_DocumentRange": Function, 
		"get_SupportedTextSelection": Function, 
		"DocumentRange": Property, 
		"SupportedTextSelection": Property
	});

JSIL.DeclareNamespace("MS.Internal.Automation");
JSIL.MakeClass("System.Windows.DependencyObject", "MS.Internal.Automation.TextProvider", false);

JSIL.MakeInterface(
	"System.Windows.Automation.Provider.ITextRangeProvider", [], {
		"Clone": Function, 
		"Compare": Function, 
		"CompareEndpoints": Function, 
		"ExpandToEnclosingUnit": Function, 
		"FindAttribute": Function, 
		"FindText": Function, 
		"GetAttributeValue": Function, 
		"GetBoundingRectangles": Function, 
		"GetEnclosingElement": Function, 
		"GetText": Function, 
		"Move": Function, 
		"MoveEndpointByUnit": Function, 
		"MoveEndpointByRange": Function, 
		"Select": Function, 
		"AddToSelection": Function, 
		"RemoveFromSelection": Function, 
		"ScrollIntoView": Function, 
		"GetChildren": Function
	});

JSIL.MakeClass("System.Windows.DependencyObject", "MS.Internal.Automation.TextRangeProvider", false);

JSIL.MakeInterface(
	"System.Windows.Automation.Provider.IInvokeProvider", [], {
		"Invoke": Function
	});

JSIL.MakeInterface(
	"System.Windows.Automation.Provider.IDockProvider", [], {
		"get_DockPosition": Function, 
		"SetDockPosition": Function, 
		"DockPosition": Property
	});

JSIL.MakeInterface(
	"System.Windows.Automation.Provider.IExpandCollapseProvider", [], {
		"Collapse": Function, 
		"Expand": Function, 
		"get_ExpandCollapseState": Function, 
		"ExpandCollapseState": Property
	});

JSIL.MakeInterface(
	"System.Windows.Automation.Provider.IGridItemProvider", [], {
		"get_Column": Function, 
		"get_ColumnSpan": Function, 
		"get_ContainingGrid": Function, 
		"get_Row": Function, 
		"get_RowSpan": Function, 
		"Column": Property, 
		"ColumnSpan": Property, 
		"ContainingGrid": Property, 
		"Row": Property, 
		"RowSpan": Property
	});

JSIL.MakeInterface(
	"System.Windows.Automation.Provider.IGridProvider", [], {
		"get_ColumnCount": Function, 
		"GetItem": Function, 
		"get_RowCount": Function, 
		"ColumnCount": Property, 
		"RowCount": Property
	});

JSIL.MakeInterface(
	"System.Windows.Automation.Provider.IMultipleViewProvider", [], {
		"get_CurrentView": Function, 
		"GetSupportedViews": Function, 
		"GetViewName": Function, 
		"SetCurrentView": Function, 
		"CurrentView": Property
	});

JSIL.MakeInterface(
	"System.Windows.Automation.Provider.IRangeValueProvider", [], {
		"get_IsReadOnly": Function, 
		"get_LargeChange": Function, 
		"get_Maximum": Function, 
		"get_Minimum": Function, 
		"SetValue": Function, 
		"get_SmallChange": Function, 
		"get_Value": Function, 
		"IsReadOnly": Property, 
		"LargeChange": Property, 
		"Maximum": Property, 
		"Minimum": Property, 
		"SmallChange": Property, 
		"Value": Property
	});

JSIL.MakeInterface(
	"System.Windows.Automation.Provider.IScrollItemProvider", [], {
		"ScrollIntoView": Function
	});

JSIL.MakeInterface(
	"System.Windows.Automation.Provider.IScrollProvider", [], {
		"get_HorizontallyScrollable": Function, 
		"get_HorizontalScrollPercent": Function, 
		"get_HorizontalViewSize": Function, 
		"Scroll": Function, 
		"SetScrollPercent": Function, 
		"get_VerticallyScrollable": Function, 
		"get_VerticalScrollPercent": Function, 
		"get_VerticalViewSize": Function, 
		"HorizontallyScrollable": Property, 
		"HorizontalScrollPercent": Property, 
		"HorizontalViewSize": Property, 
		"VerticallyScrollable": Property, 
		"VerticalScrollPercent": Property, 
		"VerticalViewSize": Property
	});

JSIL.MakeInterface(
	"System.Windows.Automation.Provider.ISelectionItemProvider", [], {
		"AddToSelection": Function, 
		"get_IsSelected": Function, 
		"RemoveFromSelection": Function, 
		"Select": Function, 
		"get_SelectionContainer": Function, 
		"IsSelected": Property, 
		"SelectionContainer": Property
	});

JSIL.MakeInterface(
	"System.Windows.Automation.Provider.ISelectionProvider", [], {
		"get_CanSelectMultiple": Function, 
		"GetSelection": Function, 
		"get_IsSelectionRequired": Function, 
		"CanSelectMultiple": Property, 
		"IsSelectionRequired": Property
	});

JSIL.MakeInterface(
	"System.Windows.Automation.Provider.ITableItemProvider", [], {
		"GetColumnHeaderItems": Function, 
		"GetRowHeaderItems": Function
	});

JSIL.MakeInterface(
	"System.Windows.Automation.Provider.ITableProvider", [], {
		"GetColumnHeaders": Function, 
		"GetRowHeaders": Function, 
		"get_RowOrColumnMajor": Function, 
		"RowOrColumnMajor": Property
	});

JSIL.MakeInterface(
	"System.Windows.Automation.Provider.IToggleProvider", [], {
		"Toggle": Function, 
		"get_ToggleState": Function, 
		"ToggleState": Property
	});

JSIL.MakeInterface(
	"System.Windows.Automation.Provider.ITransformProvider", [], {
		"get_CanMove": Function, 
		"get_CanResize": Function, 
		"get_CanRotate": Function, 
		"Move": Function, 
		"Resize": Function, 
		"Rotate": Function, 
		"CanMove": Property, 
		"CanResize": Property, 
		"CanRotate": Property
	});

JSIL.MakeInterface(
	"System.Windows.Automation.Provider.IValueProvider", [], {
		"SetValue": Function, 
		"get_IsReadOnly": Function, 
		"get_Value": Function, 
		"IsReadOnly": Property, 
		"Value": Property
	});

JSIL.MakeInterface(
	"System.Windows.Automation.Provider.IWindowProvider", [], {
		"Close": Function, 
		"get_IsModal": Function, 
		"get_IsTopmost": Function, 
		"get_Maximizable": Function, 
		"get_Minimizable": Function, 
		"SetVisualState": Function, 
		"WaitForInputIdle": Function, 
		"get_InteractionState": Function, 
		"get_VisualState": Function, 
		"IsModal": Property, 
		"IsTopmost": Property, 
		"Maximizable": Property, 
		"Minimizable": Property, 
		"InteractionState": Property, 
		"VisualState": Property
	});

JSIL.MakeClass("System.Object", "System.Windows.Automation.Provider.IRawElementProviderSimple", true);

JSIL.MakeClass("System.Windows.Automation.Peers.FrameworkElementAutomationPeer", "System.Windows.Automation.Peers.ButtonBaseAutomationPeer", true);

JSIL.MakeClass("System.Windows.Automation.Peers.ButtonBaseAutomationPeer", "System.Windows.Automation.Peers.ButtonAutomationPeer", true);

JSIL.MakeClass("System.Windows.Automation.Peers.FrameworkElementAutomationPeer", "System.Windows.Automation.Peers.ImageAutomationPeer", true);

JSIL.MakeClass("System.Windows.Automation.Peers.FrameworkElementAutomationPeer", "System.Windows.Automation.Peers.ItemsControlAutomationPeer", true);

JSIL.MakeClass("System.Windows.Automation.Peers.FrameworkElementAutomationPeer", "System.Windows.Automation.Peers.ItemAutomationPeer", true);

JSIL.MakeClass("System.Windows.Automation.Peers.ItemsControlAutomationPeer", "System.Windows.Automation.Peers.SelectorAutomationPeer", true);

JSIL.MakeClass("System.Windows.Automation.Peers.SelectorAutomationPeer", "System.Windows.Automation.Peers.ListBoxAutomationPeer", true);

JSIL.MakeClass("System.Windows.Automation.Peers.ItemAutomationPeer", "System.Windows.Automation.Peers.SelectorItemAutomationPeer", true);

JSIL.MakeClass("System.Windows.Automation.Peers.SelectorItemAutomationPeer", "System.Windows.Automation.Peers.ListBoxItemAutomationPeer", true);

JSIL.MakeClass("System.Windows.Automation.Peers.FrameworkElementAutomationPeer", "System.Windows.Automation.Peers.MediaElementAutomationPeer", true);

JSIL.MakeClass("System.Windows.Automation.Peers.FrameworkElementAutomationPeer", "System.Windows.Automation.Peers.MultiScaleImageAutomationPeer", true);

JSIL.MakeClass("System.Windows.Automation.Peers.ButtonBaseAutomationPeer", "System.Windows.Automation.Peers.ToggleButtonAutomationPeer", true);

JSIL.MakeClass("System.Windows.Automation.Peers.ToggleButtonAutomationPeer", "System.Windows.Automation.Peers.CheckBoxAutomationPeer", true);

JSIL.MakeClass("System.Windows.Automation.Peers.FrameworkElementAutomationPeer", "System.Windows.Automation.Peers.RangeBaseAutomationPeer", true);

JSIL.MakeClass("System.Windows.Automation.Peers.ButtonBaseAutomationPeer", "System.Windows.Automation.Peers.RepeatButtonAutomationPeer", true);

JSIL.MakeClass("System.Windows.Automation.Peers.RangeBaseAutomationPeer", "System.Windows.Automation.Peers.ScrollBarAutomationPeer", true);

JSIL.MakeClass("System.Windows.Automation.Peers.FrameworkElementAutomationPeer", "System.Windows.Automation.Peers.ThumbAutomationPeer", true);

JSIL.MakeClass("System.Windows.Automation.Peers.ToggleButtonAutomationPeer", "System.Windows.Automation.Peers.RadioButtonAutomationPeer", true);

JSIL.MakeClass("System.Windows.Automation.Peers.FrameworkElementAutomationPeer", "System.Windows.Automation.Peers.ScrollViewerAutomationPeer", true);

JSIL.MakeClass("System.Windows.Automation.Peers.RangeBaseAutomationPeer", "System.Windows.Automation.Peers.SliderAutomationPeer", true);

JSIL.MakeClass("System.Windows.Automation.Peers.FrameworkElementAutomationPeer", "System.Windows.Automation.Peers.ToolTipAutomationPeer", false);

JSIL.MakeClass("System.Windows.Automation.Peers.FrameworkElementAutomationPeer", "System.Windows.Automation.Peers.PopupRootAutomationPeer", false);

JSIL.MakeClass("System.Windows.Automation.Peers.RangeBaseAutomationPeer", "System.Windows.Automation.Peers.ProgressBarAutomationPeer", true);

JSIL.MakeClass("System.Windows.Automation.Peers.FrameworkElementAutomationPeer", "System.Windows.Automation.Peers.TextBoxAutomationPeer", true);

JSIL.MakeClass("System.Windows.Automation.Peers.FrameworkElementAutomationPeer", "System.Windows.Automation.Peers.RichTextBoxAutomationPeer", true);

JSIL.MakeClass("System.Windows.Automation.Peers.FrameworkElementAutomationPeer", "System.Windows.Automation.Peers.TextBlockAutomationPeer", true);

JSIL.MakeClass("System.Windows.Automation.Peers.FrameworkElementAutomationPeer", "System.Windows.Automation.Peers.PasswordBoxAutomationPeer", true);

JSIL.MakeClass("System.Windows.Automation.Peers.ButtonBaseAutomationPeer", "System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer", true);

JSIL.MakeClass("System.Windows.Automation.Peers.SelectorAutomationPeer", "System.Windows.Automation.Peers.ComboBoxAutomationPeer", true);

JSIL.MakeClass("System.Windows.Automation.Peers.AutomationPeer", "System.Windows.Automation.Peers.HyperlinkAutomationPeer", false);

JSIL.MakeEnum(
	"System.Windows.Navigation.NavigationMode", {
		New: 0, 
		Back: 1, 
		Forward: 2, 
		Refresh: 3
	}, false
);

$asm02.System.Windows.ResxDescriptionAttribute.prototype._ctor = function (description) {
	System.ComponentModel.DescriptionAttribute.prototype._ctor$1.call(this, description);
};
$asm02.System.Windows.ResxDescriptionAttribute.prototype.get_Description = function () {
	if (!this.replaced) {
		this.replaced = true;
		System.ComponentModel.DescriptionAttribute.prototype.set_DescriptionValue.call(this, $asm02.System.Windows.Resx.GetString$2(System.ComponentModel.DescriptionAttribute.prototype.get_Description.call(this)));
	}
	return System.ComponentModel.DescriptionAttribute.prototype.get_Description.call(this);
};
JSIL.MakeProperty($asm02.System.Windows.ResxDescriptionAttribute.prototype, "Description", 
	$asm02.System.Windows.ResxDescriptionAttribute.prototype.get_Description, null);
$asm02.System.Windows.ResxDescriptionAttribute.prototype.replaced = false;

$asm02.System.Windows.ResxCategoryAttribute.prototype._ctor = function (category) {
	System.ComponentModel.CategoryAttribute.prototype._ctor$1.call(this, category);
};
$asm02.System.Windows.ResxCategoryAttribute.prototype.GetLocalizedString = function (value) {
	return $asm02.System.Windows.Resx.GetString$2(value);
};

$asm02.System.Windows.Resx.get_InternalSyncObject = function () {
	if ($asm02.System.Windows.Resx.s_InternalSyncObject === null) {
		var value = new System.Object();
		System.Threading.Interlocked.CompareExchange$b1(System.Object)(/* ref */ new JSIL.MemberReference($asm02.System.Windows.Resx, "s_InternalSyncObject"), value, null);
	}
	return $asm02.System.Windows.Resx.s_InternalSyncObject;
};
$asm02.System.Windows.Resx.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
	var assembly = JSIL.GetType(this).Assembly;
	this.resources = JSIL.New(System.Resources.ResourceManager, "_ctor$1", ["System.Windows", assembly]);
	try {
		var assembly2 = System.Reflection.Assembly.Load$0("System.Windows.debug.resources, Version=2.0.5.0, Culture=en-US, PublicKeyToken=7cec85d7bea7798e");
		this.debugResources = JSIL.New(System.Resources.ResourceManager, "_ctor$1", ["System.Windows.debug", assembly2]);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.IO.FileNotFoundException)) {
		} else {
			throw $exception;
		}
	}
	this.fallbackResources = JSIL.New(System.Resources.ResourceManager, "_ctor$1", ["mscorlib", System.Object.Assembly]);
};
$asm02.System.Windows.Resx.GetLoader = function () {
	var internalSyncObject = null;
	if ($asm02.System.Windows.Resx.loader === null) {
		System.Threading.Monitor.Enter((internalSyncObject = $asm02.System.Windows.Resx.InternalSyncObject));
		try {
			if ($asm02.System.Windows.Resx.loader === null) {
				$asm02.System.Windows.Resx.loader = new $asm02.System.Windows.Resx();
			}
		} finally {
			System.Threading.Monitor.Exit(internalSyncObject);
		}
	}
	return $asm02.System.Windows.Resx.loader;
};
$asm02.System.Windows.Resx.get_Culture = function () {
	return null;
};
$asm02.System.Windows.Resx.GetString$0 = function (name, args) {
	var flag = new JSIL.Variable(false);
	return $asm02.System.Windows.Resx.GetString$1(name, /* ref */ flag, args);
};
$asm02.System.Windows.Resx.GetString$1 = function (name, /* ref */ fallbackUsed, args) {
	var resx = $asm02.System.Windows.Resx.GetLoader();
	var text = null;
	fallbackUsed.value = false;
	if (resx !== null) {
		text = resx.resources.GetString$1(name, $asm02.System.Windows.Resx.Culture);
		if (!(text || (resx.debugResources === null))) {
			text = resx.debugResources.GetString$1(name, $asm02.System.Windows.Resx.Culture);
		}
		if (text !== null) {
			if (!((args === null) || (args.length <= 0))) {
			__loop0__: 
				for (var i = 0; i < args.length; ++i) {
					if (args[i]) {
						var text2 = args[i].toString();
						if (!((text2 === null) || (text2.length <= 1024))) {
							args[i] = ((text2.Substring$1(0, 1021) + "..."));
						}
					}
				}
				return System.String.Format(System.Globalization.CultureInfo.CurrentCulture, text, args);
			}
			return text;
		}
	}
	fallbackUsed.value = true;
	text = $asm02.System.Windows.Resx.GetFallbackMessage(name, args);
	return text;
};
$asm02.System.Windows.Resx.GetString$2 = function (name) {
	var text = $asm02.System.Windows.Resx.GetStringHelper(name);
	if (text === null) {
		text = $asm02.System.Windows.Resx.GetFallbackMessage(name, null);
	}
	return text;
};
$asm02.System.Windows.Resx.GetString$3 = function (name, /* ref */ usedFallback) {
	var text = $asm02.System.Windows.Resx.GetStringHelper(name);
	if (text === null) {
		text = $asm02.System.Windows.Resx.GetFallbackMessage(name, null);
		usedFallback.value = true;
	} else {
		usedFallback.value = false;
	}
	return text;
};
$asm02.System.Windows.Resx.GetObject = function (name) {
	var resx = $asm02.System.Windows.Resx.GetLoader();
	var obj = null;
	if (resx !== null) {
		obj = resx.resources.GetObject$1(name, $asm02.System.Windows.Resx.Culture);
		if (!(obj || (resx.debugResources === null))) {
			obj = resx.debugResources.GetObject$1(name, $asm02.System.Windows.Resx.Culture);
		}
	}
	if (obj === null) {
		obj = $asm02.System.Windows.Resx.GetFallbackMessage(name, null);
	}
	return obj;
};
$asm02.System.Windows.Resx.GetStringHelper = function (name) {
	var resx = $asm02.System.Windows.Resx.GetLoader();
	var text = null;
	if (resx !== null) {
		text = resx.resources.GetString$1(name, $asm02.System.Windows.Resx.Culture);
		if (!(text || (resx.debugResources === null))) {
			text = resx.debugResources.GetString$1(name, $asm02.System.Windows.Resx.Culture);
		}
	}
	return text;
};
$asm02.System.Windows.Resx.GetFallbackMessage = function (name, args) {
	var resx = $asm02.System.Windows.Resx.GetLoader();
	var text = null;
	if (!((resx === null) || (resx.fallbackResources === null))) {
		var string = resx.fallbackResources.GetString$1("NoDebugResources", $asm02.System.Windows.Resx.Culture);
		if (string !== null) {
			var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
			if (args !== null) {
			__loop0__: 
				for (var i = 0; i < args.length; ++i) {
					if (args[i]) {
						var text2 = args[i].toString();
						if (text2 !== null) {
							if (text2.length <= 1024) {
								stringBuilder.Append$2(text2);
							} else {
								stringBuilder.Append$2((text2.Substring$1(0, 1021) + "..."));
							}
							if (i < (args.length - 1)) {
								stringBuilder.Append$2(System.Globalization.CultureInfo.CurrentCulture.TextInfo.ListSeparator);
							}
						}
					}
				}
			}
			var text3 = stringBuilder.toString();
			if (text3 === null) {
				text3 = "";
			}
			text = System.String.Format(System.Globalization.CultureInfo.CurrentCulture, string, [name, text3, "4.0.60310.0", "System.Windows.dll", $asm02.System.Windows.Resx.UriEncode(name)]);
		}
	}
	if (text === null) {
		text = name;
	}
	return text;
};
$asm02.System.Windows.Resx.UriEncode = function (url) {
	if (url === null) {
		return null;
	}
	var array = System.Text.Encoding.UTF8.GetBytes$3(url);
	var num = 0;
	var num2 = 0;
	var num3 = array.length;
__loop0__: 
	for (var i = 0; i < num3; ++i) {
		var c = array[i];
		if (c === " ") {
			++num;
		} else if (!$asm02.System.Windows.Resx.IsSafe(c)) {
			++num2;
		}
	}
	if (!((num === 0) && (num2 === 0))) {
		var array2 = JSIL.Array.New(System.Byte, (num3 + (num2 * 2)));
		var num4 = 0;
	__loop1__: 
		for (var j = 0; j < num3; ++j) {
			var b = array[j];
			var c2 = String.fromCharCode(b);
			if ($asm02.System.Windows.Resx.IsSafe(c2)) {
				array2[num4++] = b;
			} else if (c2 === " ") {
				array2[num4++] = 43;
			} else {
				array2[num4++] = 37;
				array2[num4++] = ($asm02.System.Windows.Resx.IntToHex(((b >> 4) & 15))).charCodeAt(0);
				array2[num4++] = ($asm02.System.Windows.Resx.IntToHex((b & 15))).charCodeAt(0);
			}
		}
		array = array2;
	}
	return System.Text.Encoding.UTF8.GetString$1(array, 0, array.length);
};
$asm02.System.Windows.Resx.IntToHex = function (n) {
	if (n <= 9) {
		return (n + 48);
	}
	return ((n - 10) + 97);
};
$asm02.System.Windows.Resx.IsSafe = function (ch) {
	if (!(!((ch >= "a") && 
				(ch <= "z")) && 
			!((ch >= "A") && 
				(ch <= "Z")) && ((ch < "0") || 
				(ch > "9")))) {
		return true;
	}
	if (ch !== "!") {
		switch (ch) {
			case "'": 
			case "(": 
			case ")": 
			case "*": 
			case "-": 
			case ".": 
				return true;
			case "+": 
			case ",": 
				break;
			default: 
				if (ch === "_") {
					return true;
				}
				break;
		}
		return false;
	}
	return true;
};
JSIL.OverloadedMethod($asm02.System.Windows.Resx, "GetString", [
		["GetString$0", [System.String, System.Array.Of(System.Object)]], 
		["GetString$1", [System.String, JSIL.Reference.Of(System.Boolean), System.Array.Of(System.Object)]], 
		["GetString$2", [System.String]], 
		["GetString$3", [System.String, JSIL.Reference.Of(System.Boolean)]]
	]);
JSIL.MakeProperty($asm02.System.Windows.Resx, "InternalSyncObject", 
	$asm02.System.Windows.Resx.get_InternalSyncObject, null);
JSIL.MakeProperty($asm02.System.Windows.Resx, "Culture", 
	$asm02.System.Windows.Resx.get_Culture, null);
Object.defineProperty($asm02.System.Windows.Resx, "UIA_Null", {
		"value": "UIA_Null"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ToggleButton_ToString_FormatString", {
		"value": "ToggleButton_ToString_FormatString"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ListBox_CannotSelectAllIfSelectionModeNotMultipleOrExtended", {
		"value": "ListBox_CannotSelectAllIfSelectionModeNotMultipleOrExtended"}
);
Object.defineProperty($asm02.System.Windows.Resx, "InvalidCrossThreadAccess", {
		"value": "InvalidCrossThreadAccess"}
);
Object.defineProperty($asm02.System.Windows.Resx, "InvalidReturnValue", {
		"value": "InvalidReturnValue"}
);
Object.defineProperty($asm02.System.Windows.Resx, "InvalidArgument", {
		"value": "InvalidArgument"}
);
Object.defineProperty($asm02.System.Windows.Resx, "UIA_OperationCannotBePerformed", {
		"value": "UIA_OperationCannotBePerformed"}
);
Object.defineProperty($asm02.System.Windows.Resx, "UIA_InvalidItemsControlParent", {
		"value": "UIA_InvalidItemsControlParent"}
);
Object.defineProperty($asm02.System.Windows.Resx, "Application_InvalidRootVisual", {
		"value": "Application_InvalidRootVisual"}
);
Object.defineProperty($asm02.System.Windows.Resx, "Application_ComponentMustBeADependencyObjectOrApplication", {
		"value": "Application_ComponentMustBeADependencyObjectOrApplication"}
);
Object.defineProperty($asm02.System.Windows.Resx, "Application_UriMustBeRelative", {
		"value": "Application_UriMustBeRelative"}
);
Object.defineProperty($asm02.System.Windows.Resx, "Application_ApplicationNotInitialized", {
		"value": "Application_ApplicationNotInitialized"}
);
Object.defineProperty($asm02.System.Windows.Resx, "Application_ExpectedRelativeUri", {
		"value": "Application_ExpectedRelativeUri"}
);
Object.defineProperty($asm02.System.Windows.Resx, "Application_CannotBeInstalled", {
		"value": "Application_CannotBeInstalled"}
);
Object.defineProperty($asm02.System.Windows.Resx, "Application_AlreadyInstalled", {
		"value": "Application_AlreadyInstalled"}
);
Object.defineProperty($asm02.System.Windows.Resx, "AppExt_InterfaceNotImplemented", {
		"value": "AppExt_InterfaceNotImplemented"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ButtonBase_OnClickModePropertyChanged_InvalidValue", {
		"value": "ButtonBase_OnClickModePropertyChanged_InvalidValue"}
);
Object.defineProperty($asm02.System.Windows.Resx, "Binding_CannotBeChangedAfterUse", {
		"value": "Binding_CannotBeChangedAfterUse"}
);
Object.defineProperty($asm02.System.Windows.Resx, "Binding_TwoWayBindingRequiresPath", {
		"value": "Binding_TwoWayBindingRequiresPath"}
);
Object.defineProperty($asm02.System.Windows.Resx, "Binding_SourceConflict", {
		"value": "Binding_SourceConflict"}
);
Object.defineProperty($asm02.System.Windows.Resx, "Binding_SetupExtension_RequiresDPandDO", {
		"value": "Binding_SetupExtension_RequiresDPandDO"}
);
Object.defineProperty($asm02.System.Windows.Resx, "BindingOperations_TargetMustBeFEOrCVS", {
		"value": "BindingOperations_TargetMustBeFEOrCVS"}
);
Object.defineProperty($asm02.System.Windows.Resx, "BindingExpression_FailedConversion", {
		"value": "BindingExpression_FailedConversion"}
);
Object.defineProperty($asm02.System.Windows.Resx, "BindingExpression_FailedConvertBack", {
		"value": "BindingExpression_FailedConvertBack"}
);
Object.defineProperty($asm02.System.Windows.Resx, "BindingExpression_GetterFailure", {
		"value": "BindingExpression_GetterFailure"}
);
Object.defineProperty($asm02.System.Windows.Resx, "BindingExpression_SourceConnectionFailure", {
		"value": "BindingExpression_SourceConnectionFailure"}
);
Object.defineProperty($asm02.System.Windows.Resx, "BindingExpression_SetterFailure", {
		"value": "BindingExpression_SetterFailure"}
);
Object.defineProperty($asm02.System.Windows.Resx, "BindingExpression_StringFormatFailure", {
		"value": "BindingExpression_StringFormatFailure"}
);
Object.defineProperty($asm02.System.Windows.Resx, "BindingExpression_TraceString", {
		"value": "BindingExpression_TraceString"}
);
Object.defineProperty($asm02.System.Windows.Resx, "BindingExpression_FailedToConnectToIndexer", {
		"value": "BindingExpression_FailedToConnectToIndexer"}
);
Object.defineProperty($asm02.System.Windows.Resx, "BindingExpression_FailedConvertFallbackValue", {
		"value": "BindingExpression_FailedConvertFallbackValue"}
);
Object.defineProperty($asm02.System.Windows.Resx, "BindingExpression_FailedConvertTargetNullValue", {
		"value": "BindingExpression_FailedConvertTargetNullValue"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ListCollectionView_CollectionChangedOutOfRange", {
		"value": "ListCollectionView_CollectionChangedOutOfRange"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ListCollectionView_AddedItemNotAtIndex", {
		"value": "ListCollectionView_AddedItemNotAtIndex"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ListCollectionView_AddedItemNotInCollection", {
		"value": "ListCollectionView_AddedItemNotInCollection"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ListCollectionView_CancelEditNotSupported", {
		"value": "ListCollectionView_CancelEditNotSupported"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ListCollectionView_MemberNotAllowedDuringTransaction", {
		"value": "ListCollectionView_MemberNotAllowedDuringTransaction"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ListCollectionView_MemberNotAllowedForView", {
		"value": "ListCollectionView_MemberNotAllowedForView"}
);
Object.defineProperty($asm02.System.Windows.Resx, "CollectionView_EnumeratorVersionChanged", {
		"value": "CollectionView_EnumeratorVersionChanged"}
);
Object.defineProperty($asm02.System.Windows.Resx, "CollectionView_MemberNotAllowedDuringAddOrEdit", {
		"value": "CollectionView_MemberNotAllowedDuringAddOrEdit"}
);
Object.defineProperty($asm02.System.Windows.Resx, "CollectionView_NoAccessWhileChangesAreDeferred", {
		"value": "CollectionView_NoAccessWhileChangesAreDeferred"}
);
Object.defineProperty($asm02.System.Windows.Resx, "CollectionViewSource_CannotShape", {
		"value": "CollectionViewSource_CannotShape"}
);
Object.defineProperty($asm02.System.Windows.Resx, "CollectionViewSource_Sorting", {
		"value": "CollectionViewSource_Sorting"}
);
Object.defineProperty($asm02.System.Windows.Resx, "CollectionViewSource_Filtering", {
		"value": "CollectionViewSource_Filtering"}
);
Object.defineProperty($asm02.System.Windows.Resx, "CollectionViewSource_Grouping", {
		"value": "CollectionViewSource_Grouping"}
);
Object.defineProperty($asm02.System.Windows.Resx, "EnumerableCollectionView_AddedItemNotFound", {
		"value": "EnumerableCollectionView_AddedItemNotFound"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ViewManager_UnsupportedSourceType", {
		"value": "ViewManager_UnsupportedSourceType"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ViewManager_UnsupportedNullCollectionView", {
		"value": "ViewManager_UnsupportedNullCollectionView"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ComponentModel_CurrentChangingCannotBeCanceled", {
		"value": "ComponentModel_CurrentChangingCannotBeCanceled"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ComponentModel_CannotChangeAfterSealed", {
		"value": "ComponentModel_CannotChangeAfterSealed"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ComponentModel_RangeActionsNotSupported", {
		"value": "ComponentModel_RangeActionsNotSupported"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ComponentModel_UnexpectedCollectionChangeAction", {
		"value": "ComponentModel_UnexpectedCollectionChangeAction"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ComAutomation_EventHandlerOutParamValueTypeMismatch", {
		"value": "ComAutomation_EventHandlerOutParamValueTypeMismatch"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ComAutomation_FeatureBlocked", {
		"value": "ComAutomation_FeatureBlocked"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ComAutomation_ProgIDNotRegistered", {
		"value": "ComAutomation_ProgIDNotRegistered"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ComAutomation_CreateInstance", {
		"value": "ComAutomation_CreateInstance"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ComAutomation_GetActiveObject", {
		"value": "ComAutomation_GetActiveObject"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ComAutomation_NoEvent", {
		"value": "ComAutomation_NoEvent"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ComAutomation_MemberNotFound", {
		"value": "ComAutomation_MemberNotFound"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ComAutomation_TypeMismatch", {
		"value": "ComAutomation_TypeMismatch"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ComAutomation_Overflow", {
		"value": "ComAutomation_Overflow"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ComAutomation_BadParamCount", {
		"value": "ComAutomation_BadParamCount"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ComAutomation_ParamNotOptional", {
		"value": "ComAutomation_ParamNotOptional"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ComAutomation_InvokeException_Source", {
		"value": "ComAutomation_InvokeException_Source"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ComAutomation_InvokeException_HelpFileWithContext", {
		"value": "ComAutomation_InvokeException_HelpFileWithContext"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ComAutomation_InvokeException_HelpFileNoContext", {
		"value": "ComAutomation_InvokeException_HelpFileNoContext"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ComAutomation_NamedParametersNotSupported", {
		"value": "ComAutomation_NamedParametersNotSupported"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ComAutomation_MustBeAnAutomationObject", {
		"value": "ComAutomation_MustBeAnAutomationObject"}
);
Object.defineProperty($asm02.System.Windows.Resx, "Control_TargetTypeMismatch", {
		"value": "Control_TargetTypeMismatch"}
);
Object.defineProperty($asm02.System.Windows.Resx, "DependencyObjectCollection_ItemWrongType", {
		"value": "DependencyObjectCollection_ItemWrongType"}
);
Object.defineProperty($asm02.System.Windows.Resx, "DependencyObjectCollection_CannotChangeCollection", {
		"value": "DependencyObjectCollection_CannotChangeCollection"}
);
Object.defineProperty($asm02.System.Windows.Resx, "Deployment_UseCurrentToAccessDeployment", {
		"value": "Deployment_UseCurrentToAccessDeployment"}
);
Object.defineProperty($asm02.System.Windows.Resx, "DP_NameCannotBeEmpty", {
		"value": "DP_NameCannotBeEmpty"}
);
Object.defineProperty($asm02.System.Windows.Resx, "DP_DefaultValueTypeDoesNotMatchPropertyType", {
		"value": "DP_DefaultValueTypeDoesNotMatchPropertyType"}
);
Object.defineProperty($asm02.System.Windows.Resx, "DP_NotValidValueForProperty", {
		"value": "DP_NotValidValueForProperty"}
);
Object.defineProperty($asm02.System.Windows.Resx, "DP_PropertyCannotBeSetOnObject", {
		"value": "DP_PropertyCannotBeSetOnObject"}
);
Object.defineProperty($asm02.System.Windows.Resx, "DP_PropertyTypeCannotBeSetOnObject", {
		"value": "DP_PropertyTypeCannotBeSetOnObject"}
);
Object.defineProperty($asm02.System.Windows.Resx, "DP_ReadOnly", {
		"value": "DP_ReadOnly"}
);
Object.defineProperty($asm02.System.Windows.Resx, "HyperlinkButton_GetAbsoluteUri_NoApplication", {
		"value": "HyperlinkButton_GetAbsoluteUri_NoApplication"}
);
Object.defineProperty($asm02.System.Windows.Resx, "HyperlinkButton_GetAbsoluteUri_PageRelativeUri", {
		"value": "HyperlinkButton_GetAbsoluteUri_PageRelativeUri"}
);
Object.defineProperty($asm02.System.Windows.Resx, "HyperlinkButton_Navigate_Failed", {
		"value": "HyperlinkButton_Navigate_Failed"}
);
Object.defineProperty($asm02.System.Windows.Resx, "HyperlinkButton_Internal_Navigate_Failed", {
		"value": "HyperlinkButton_Internal_Navigate_Failed"}
);
Object.defineProperty($asm02.System.Windows.Resx, "HyperlinkButton_Navigation_Not_Allowed", {
		"value": "HyperlinkButton_Navigation_Not_Allowed"}
);
Object.defineProperty($asm02.System.Windows.Resx, "InputMethod_TargetMustBeTextBoxOrRichTextBox", {
		"value": "InputMethod_TargetMustBeTextBoxOrRichTextBox"}
);
Object.defineProperty($asm02.System.Windows.Resx, "InteropWrapper_NativeObjectShouldNotBeNull", {
		"value": "InteropWrapper_NativeObjectShouldNotBeNull"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ItemCollection_NotSupportedReadOnlyCollection", {
		"value": "ItemCollection_NotSupportedReadOnlyCollection"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ItemCollection_CannotChangeItemCollectionDuringOnItemsChanged", {
		"value": "ItemCollection_CannotChangeItemCollectionDuringOnItemsChanged"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ItemsControls_ItemsCollectionMustBeEmptyBeforeUsingItemsSource", {
		"value": "ItemsControls_ItemsCollectionMustBeEmptyBeforeUsingItemsSource"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ItemsControls_CannotSetItemTemplateAndDisplayMemberPathSimultaneously", {
		"value": "ItemsControls_CannotSetItemTemplateAndDisplayMemberPathSimultaneously"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ItemsControls_ItemsControlItemsMustBeDerivativeOfUIElement", {
		"value": "ItemsControls_ItemsControlItemsMustBeDerivativeOfUIElement"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ItemsControls_ItemsControlItemsMustNotBeAUIElementWhenItemTemplateIsSet", {
		"value": "ItemsControls_ItemsControlItemsMustNotBeAUIElementWhenItemTemplateIsSet"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ItemsControls_ItemsControlGetContainerForItemOverrideMustReturnDerivativeOfUIElement", {
		"value": "ItemsControls_ItemsControlGetContainerForItemOverrideMustReturnDerivativeOfUIElement"}
);
Object.defineProperty($asm02.System.Windows.Resx, "FrameworkElement_LayoutMeasure_InfinityNaNReturned", {
		"value": "FrameworkElement_LayoutMeasure_InfinityNaNReturned"}
);
Object.defineProperty($asm02.System.Windows.Resx, "LayoutCycleDetected", {
		"value": "LayoutCycleDetected"}
);
Object.defineProperty($asm02.System.Windows.Resx, "FrameworkElement_LayoutArrange_InfinityNaNReturned", {
		"value": "FrameworkElement_LayoutArrange_InfinityNaNReturned"}
);
Object.defineProperty($asm02.System.Windows.Resx, "UIElement_LayoutArrange_InfinityNaNPassed", {
		"value": "UIElement_LayoutArrange_InfinityNaNPassed"}
);
Object.defineProperty($asm02.System.Windows.Resx, "UIElement_LayoutMeasure_NaNPassed", {
		"value": "UIElement_LayoutMeasure_NaNPassed"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ListBox_OnItemContainerStyleChanged_CanNotSetStyle", {
		"value": "ListBox_OnItemContainerStyleChanged_CanNotSetStyle"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ListBox_OnSelectedItemsCollectionChanged_WrongMode", {
		"value": "ListBox_OnSelectedItemsCollectionChanged_WrongMode"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ListBox_OnSelectAllWrongMode", {
		"value": "ListBox_OnSelectAllWrongMode"}
);
Object.defineProperty($asm02.System.Windows.Resx, "LicenseAcquirer_SetLicenseResponse_NoMediaElement", {
		"value": "LicenseAcquirer_SetLicenseResponse_NoMediaElement"}
);
Object.defineProperty($asm02.System.Windows.Resx, "NativeHost_NotOnUIThread", {
		"value": "NativeHost_NotOnUIThread"}
);
Object.defineProperty($asm02.System.Windows.Resx, "NativeHost_OnUIThread", {
		"value": "NativeHost_OnUIThread"}
);
Object.defineProperty($asm02.System.Windows.Resx, "NotifyCollectionChangedEventArgs_ConstructorOnlySupportsEitherAddOrRemove", {
		"value": "NotifyCollectionChangedEventArgs_ConstructorOnlySupportsEitherAddOrRemove"}
);
Object.defineProperty($asm02.System.Windows.Resx, "NotifyCollectionChangedEventArgs_UnSupportedConstructorAction", {
		"value": "NotifyCollectionChangedEventArgs_UnSupportedConstructorAction"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ObservableCollection_CannotChangeObservableCollection", {
		"value": "ObservableCollection_CannotChangeObservableCollection"}
);
Object.defineProperty($asm02.System.Windows.Resx, "FileDialog_InvalidFilter", {
		"value": "FileDialog_InvalidFilter"}
);
Object.defineProperty($asm02.System.Windows.Resx, "FileDialog_ShowDialogFailed", {
		"value": "FileDialog_ShowDialogFailed"}
);
Object.defineProperty($asm02.System.Windows.Resx, "FileDialog_NoFileSelected", {
		"value": "FileDialog_NoFileSelected"}
);
Object.defineProperty($asm02.System.Windows.Resx, "FileDialog_UserInitiated", {
		"value": "FileDialog_UserInitiated"}
);
Object.defineProperty($asm02.System.Windows.Resx, "FileDialog_ActiveScripting", {
		"value": "FileDialog_ActiveScripting"}
);
Object.defineProperty($asm02.System.Windows.Resx, "PropertyPath_CannotConvertToPropertyPathFromObject", {
		"value": "PropertyPath_CannotConvertToPropertyPathFromObject"}
);
Object.defineProperty($asm02.System.Windows.Resx, "PropertyPath_InvalidBindingPath", {
		"value": "PropertyPath_InvalidBindingPath"}
);
Object.defineProperty($asm02.System.Windows.Resx, "PropertyPath_InvalidBindingPathNoChar", {
		"value": "PropertyPath_InvalidBindingPathNoChar"}
);
Object.defineProperty($asm02.System.Windows.Resx, "PropertyPath_CannotResolveAttachedDp", {
		"value": "PropertyPath_CannotResolveAttachedDp"}
);
Object.defineProperty($asm02.System.Windows.Resx, "CornerRadius_InvalidMember", {
		"value": "CornerRadius_InvalidMember"}
);
Object.defineProperty($asm02.System.Windows.Resx, "RangeBase_InvalidChangeValue", {
		"value": "RangeBase_InvalidChangeValue"}
);
Object.defineProperty($asm02.System.Windows.Resx, "RangeBase_InvalidDoubleValue", {
		"value": "RangeBase_InvalidDoubleValue"}
);
Object.defineProperty($asm02.System.Windows.Resx, "RepeatButton_DelayPropertyCannotBeNegative", {
		"value": "RepeatButton_DelayPropertyCannotBeNegative"}
);
Object.defineProperty($asm02.System.Windows.Resx, "RepeatButton_IntervalMustBePositive", {
		"value": "RepeatButton_IntervalMustBePositive"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ResourceDictionary_NullValueNotSupported", {
		"value": "ResourceDictionary_NullValueNotSupported"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ResourceDictionary_ItemWithSameKeyExists", {
		"value": "ResourceDictionary_ItemWithSameKeyExists"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ResourceDictionary_KeyMustBeTypeOrString", {
		"value": "ResourceDictionary_KeyMustBeTypeOrString"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ResourceDictionary_DuplicateKey", {
		"value": "ResourceDictionary_DuplicateKey"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ResourceDictionary_ValueMustBeStyle", {
		"value": "ResourceDictionary_ValueMustBeStyle"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ResourceDictionary_ValueMustBeStyleWithCorrectTargetType", {
		"value": "ResourceDictionary_ValueMustBeStyleWithCorrectTargetType"}
);
Object.defineProperty($asm02.System.Windows.Resx, "Selector_OnIsSelectionActiveChanged_ReadOnly", {
		"value": "Selector_OnIsSelectionActiveChanged_ReadOnly"}
);
Object.defineProperty($asm02.System.Windows.Resx, "Selector_CannotModifySelectedItems", {
		"value": "Selector_CannotModifySelectedItems"}
);
Object.defineProperty($asm02.System.Windows.Resx, "Selector_RangeActionsNotPermitted", {
		"value": "Selector_RangeActionsNotPermitted"}
);
Object.defineProperty($asm02.System.Windows.Resx, "Selector_UnknownCollectionAction", {
		"value": "Selector_UnknownCollectionAction"}
);
Object.defineProperty($asm02.System.Windows.Resx, "Selector_IsSynchronizedWithCurrentItemCannotSetToTrue", {
		"value": "Selector_IsSynchronizedWithCurrentItemCannotSetToTrue"}
);
Object.defineProperty($asm02.System.Windows.Resx, "SetValue_TypeNotSupported", {
		"value": "SetValue_TypeNotSupported"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ShaderEffect_SamplerRegisterOutOfRange", {
		"value": "ShaderEffect_SamplerRegisterOutOfRange"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ShaderEffect_ConstantRegisterOutOfRange", {
		"value": "ShaderEffect_ConstantRegisterOutOfRange"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ShaderEffect_SamplerMustBeImageOrVideoBrush", {
		"value": "ShaderEffect_SamplerMustBeImageOrVideoBrush"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ScrollViewer_OnReadOnlyDependencyPropertyChanged_ReadOnly", {
		"value": "ScrollViewer_OnReadOnlyDependencyPropertyChanged_ReadOnly"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ScrollViewer_OutOfRange", {
		"value": "ScrollViewer_OutOfRange"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ToolTipService_SetTimeoutProperty_InvalidValue", {
		"value": "ToolTipService_SetTimeoutProperty_InvalidValue"}
);
Object.defineProperty($asm02.System.Windows.Resx, "TypeConverters_ConvertFromString_CannotConvert", {
		"value": "TypeConverters_ConvertFromString_CannotConvert"}
);
Object.defineProperty($asm02.System.Windows.Resx, "TypeConverters_ConvertFrom_CannotConvert", {
		"value": "TypeConverters_ConvertFrom_CannotConvert"}
);
Object.defineProperty($asm02.System.Windows.Resx, "TypeConverters_UnableToGetPropertyInfoForConversionOperation", {
		"value": "TypeConverters_UnableToGetPropertyInfoForConversionOperation"}
);
Object.defineProperty($asm02.System.Windows.Resx, "TypeConverters_UnableToConvertToPropertyType", {
		"value": "TypeConverters_UnableToConvertToPropertyType"}
);
Object.defineProperty($asm02.System.Windows.Resx, "TypeConverters_NoTypeToConvertFrom", {
		"value": "TypeConverters_NoTypeToConvertFrom"}
);
Object.defineProperty($asm02.System.Windows.Resx, "TypeConverters_CanOnlyConvertFromString", {
		"value": "TypeConverters_CanOnlyConvertFromString"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ValueConverter_CantConvertType", {
		"value": "ValueConverter_CantConvertType"}
);
Object.defineProperty($asm02.System.Windows.Resx, "VisualTreeHelper_ReferenceIsNotAValidVisualDO", {
		"value": "VisualTreeHelper_ReferenceIsNotAValidVisualDO"}
);
Object.defineProperty($asm02.System.Windows.Resx, "IsolatedStorageSettings_NotEnoughSpace", {
		"value": "IsolatedStorageSettings_NotEnoughSpace"}
);
Object.defineProperty($asm02.System.Windows.Resx, "HttpWebRequest_WebException_RemoteServer", {
		"value": "HttpWebRequest_WebException_RemoteServer"}
);
Object.defineProperty($asm02.System.Windows.Resx, "HttpWebRequest_InvalidMethod", {
		"value": "HttpWebRequest_InvalidMethod"}
);
Object.defineProperty($asm02.System.Windows.Resx, "HttpWebRequest_UnsupportedMethod", {
		"value": "HttpWebRequest_UnsupportedMethod"}
);
Object.defineProperty($asm02.System.Windows.Resx, "HttpWebRequest_DefaultCredentialsOnly", {
		"value": "HttpWebRequest_DefaultCredentialsOnly"}
);
Object.defineProperty($asm02.System.Windows.Resx, "HttpWebRequest_CredentialsLimitReached", {
		"value": "HttpWebRequest_CredentialsLimitReached"}
);
Object.defineProperty($asm02.System.Windows.Resx, "HttpWebRequest_InvalidState", {
		"value": "HttpWebRequest_InvalidState"}
);
Object.defineProperty($asm02.System.Windows.Resx, "HttpWebRequest_WriteStreamBufferingNotSupported", {
		"value": "HttpWebRequest_WriteStreamBufferingNotSupported"}
);
Object.defineProperty($asm02.System.Windows.Resx, "HttpWebRequest_ContentTooLong", {
		"value": "HttpWebRequest_ContentTooLong"}
);
Object.defineProperty($asm02.System.Windows.Resx, "HttpWebRequest_ContentLengthNotSet", {
		"value": "HttpWebRequest_ContentLengthNotSet"}
);
Object.defineProperty($asm02.System.Windows.Resx, "HttpWebRequest_RequestStreamNotClosed", {
		"value": "HttpWebRequest_RequestStreamNotClosed"}
);
Object.defineProperty($asm02.System.Windows.Resx, "HttpWebRequest_RequestWithMethodCannotHaveBody", {
		"value": "HttpWebRequest_RequestWithMethodCannotHaveBody"}
);
Object.defineProperty($asm02.System.Windows.Resx, "HttpWebRequest_InvalidEmptyHeader", {
		"value": "HttpWebRequest_InvalidEmptyHeader"}
);
Object.defineProperty($asm02.System.Windows.Resx, "HttpWebRequest_ProxyAuthorizationHeaderNotElevated", {
		"value": "HttpWebRequest_ProxyAuthorizationHeaderNotElevated"}
);
Object.defineProperty($asm02.System.Windows.Resx, "InternalNetworkStream_ReadOnMainThread", {
		"value": "InternalNetworkStream_ReadOnMainThread"}
);
Object.defineProperty($asm02.System.Windows.Resx, "LocalMessage_InvalidDomainCharacters", {
		"value": "LocalMessage_InvalidDomainCharacters"}
);
Object.defineProperty($asm02.System.Windows.Resx, "LocalMessage_InvalidMessageLength", {
		"value": "LocalMessage_InvalidMessageLength"}
);
Object.defineProperty($asm02.System.Windows.Resx, "LocalMessage_AlreadyReceiving", {
		"value": "LocalMessage_AlreadyReceiving"}
);
Object.defineProperty($asm02.System.Windows.Resx, "LocalMessage_CouldNotRegisterReceiver", {
		"value": "LocalMessage_CouldNotRegisterReceiver"}
);
Object.defineProperty($asm02.System.Windows.Resx, "LocalMessage_CouldNotDeliverMessage", {
		"value": "LocalMessage_CouldNotDeliverMessage"}
);
Object.defineProperty($asm02.System.Windows.Resx, "WriteableBitmap_Protected", {
		"value": "WriteableBitmap_Protected"}
);
Object.defineProperty($asm02.System.Windows.Resx, "WriteableBitmap_InvalidSize", {
		"value": "WriteableBitmap_InvalidSize"}
);
Object.defineProperty($asm02.System.Windows.Resx, "VirtualizingPanel_ItemsControlNotFound", {
		"value": "VirtualizingPanel_ItemsControlNotFound"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ItemContainerGenerator_PanelIsNotItemsHost", {
		"value": "ItemContainerGenerator_PanelIsNotItemsHost"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ItemContainerGenerator_GenerationInProgress", {
		"value": "ItemContainerGenerator_GenerationInProgress"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ItemContainerGenerator_GenerationNotInProgress", {
		"value": "ItemContainerGenerator_GenerationNotInProgress"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ItemContainerGenerator_RemoveRequiresOffsetZero", {
		"value": "ItemContainerGenerator_RemoveRequiresOffsetZero"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ItemContainerGenerator_RemoveRequiresPositiveCount", {
		"value": "ItemContainerGenerator_RemoveRequiresPositiveCount"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ItemContainerGenerator_CannotRemoveUnrealizedItems", {
		"value": "ItemContainerGenerator_CannotRemoveUnrealizedItems"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ItemContainerGenerator_CannotRecyleHeterogeneousTypes", {
		"value": "ItemContainerGenerator_CannotRecyleHeterogeneousTypes"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ItemContainerGenerator_CannotFindRemovedItem", {
		"value": "ItemContainerGenerator_CannotFindRemovedItem"}
);
Object.defineProperty($asm02.System.Windows.Resx, "ItemContainerGenerator_CollectionAddEventMissingItem", {
		"value": "ItemContainerGenerator_CollectionAddEventMissingItem"}
);
Object.defineProperty($asm02.System.Windows.Resx, "NotificationWindow_ValueOutOfRange", {
		"value": "NotificationWindow_ValueOutOfRange"}
);
Object.defineProperty($asm02.System.Windows.Resx, "NotificationWindow_OneWindow", {
		"value": "NotificationWindow_OneWindow"}
);
Object.defineProperty($asm02.System.Windows.Resx, "NotificationWindow_ChangeWhileVisible", {
		"value": "NotificationWindow_ChangeWhileVisible"}
);
Object.defineProperty($asm02.System.Windows.Resx, "NotificationWindow_MaxDuration", {
		"value": "NotificationWindow_MaxDuration"}
);
Object.defineProperty($asm02.System.Windows.Resx, "NotificationWindow_NotOutOfBrowser", {
		"value": "NotificationWindow_NotOutOfBrowser"}
);
Object.defineProperty($asm02.System.Windows.Resx, "Window_NotSupportedForInBrowser", {
		"value": "Window_NotSupportedForInBrowser"}
);
Object.defineProperty($asm02.System.Windows.Resx, "Window_ValueOutOfRange", {
		"value": "Window_ValueOutOfRange"}
);
Object.defineProperty($asm02.System.Windows.Resx, "Window_AccessNotAllowed", {
		"value": "Window_AccessNotAllowed"}
);
Object.defineProperty($asm02.System.Windows.Resx, "Window_NotElevated", {
		"value": "Window_NotElevated"}
);
Object.defineProperty($asm02.System.Windows.Resx, "DRMNotWaitingForResponse", {
		"value": "DRMNotWaitingForResponse"}
);
Object.defineProperty($asm02.System.Windows.Resx, "LicenseManagement_AccessNotAllowed", {
		"value": "LicenseManagement_AccessNotAllowed"}
);
Object.defineProperty($asm02.System.Windows.Resx, "LicenseEnumerator_UseOverloadIEnumeratorInstead", {
		"value": "LicenseEnumerator_UseOverloadIEnumeratorInstead"}
);
Object.defineProperty($asm02.System.Windows.Resx, "LicenseEnumerator_PositionBeforeStart", {
		"value": "LicenseEnumerator_PositionBeforeStart"}
);
Object.defineProperty($asm02.System.Windows.Resx, "LicenseEnumerator_PositionAfterEnd", {
		"value": "LicenseEnumerator_PositionAfterEnd"}
);
Object.defineProperty($asm02.System.Windows.Resx, "LicenseAcquirer_AlreadyBound", {
		"value": "LicenseAcquirer_AlreadyBound"}
);
Object.defineProperty($asm02.System.Windows.Resx, "LicenseAcquirer_AlreadyUnbound", {
		"value": "LicenseAcquirer_AlreadyUnbound"}
);
Object.defineProperty($asm02.System.Windows.Resx, "LicenseAcquirer_CannotBind", {
		"value": "LicenseAcquirer_CannotBind"}
);
Object.defineProperty($asm02.System.Windows.Resx, "LicenseAcquirer_LAInProgress", {
		"value": "LicenseAcquirer_LAInProgress"}
);
Object.defineProperty($asm02.System.Windows.Resx, "LicenseAcquirer_NoLAInProgress", {
		"value": "LicenseAcquirer_NoLAInProgress"}
);
Object.defineProperty($asm02.System.Windows.Resx, "DomainAcquirer_NoExistingAttempt", {
		"value": "DomainAcquirer_NoExistingAttempt"}
);
Object.defineProperty($asm02.System.Windows.Resx, "DomainAcquirer_AlreadyBound", {
		"value": "DomainAcquirer_AlreadyBound"}
);
Object.defineProperty($asm02.System.Windows.Resx, "DomainAcquirer_AlreadyUnbound", {
		"value": "DomainAcquirer_AlreadyUnbound"}
);
Object.defineProperty($asm02.System.Windows.Resx, "DomainAcquirer_CannotBind", {
		"value": "DomainAcquirer_CannotBind"}
);
Object.defineProperty($asm02.System.Windows.Resx, "DomainAcquirer_AlreadyInProgress", {
		"value": "DomainAcquirer_AlreadyInProgress"}
);
Object.defineProperty($asm02.System.Windows.Resx, "MediaStreamSource_UnexpectedSeekReport", {
		"value": "MediaStreamSource_UnexpectedSeekReport"}
);
Object.defineProperty($asm02.System.Windows.Resx, "MediaStreamSource_UnexpectedSampleReport", {
		"value": "MediaStreamSource_UnexpectedSampleReport"}
);
Object.defineProperty($asm02.System.Windows.Resx, "Printing_UnknownPrintingError", {
		"value": "Printing_UnknownPrintingError"}
);
Object.defineProperty($asm02.System.Windows.Resx, "Printing_MaxPagesExceeded", {
		"value": "Printing_MaxPagesExceeded"}
);
Object.defineProperty($asm02.System.Windows.Resx, "Printing_MaxPageSizeExceeded", {
		"value": "Printing_MaxPageSizeExceeded"}
);
Object.defineProperty($asm02.System.Windows.Resx, "Printing_MaxRetryExceeded", {
		"value": "Printing_MaxRetryExceeded"}
);
Object.defineProperty($asm02.System.Windows.Resx, "Clipboard_AccessNotAllowed", {
		"value": "Clipboard_AccessNotAllowed"}
);
Object.defineProperty($asm02.System.Windows.Resx, "Webcam_CaptureSourceNotStarted", {
		"value": "Webcam_CaptureSourceNotStarted"}
);
Object.defineProperty($asm02.System.Windows.Resx, "TrustedApplications_ElevationStatusMustMatch", {
		"value": "TrustedApplications_ElevationStatusMustMatch"}
);
Object.defineProperty($asm02.System.Windows.Resx, "TrustedApplications_CertificatesMustMatch", {
		"value": "TrustedApplications_CertificatesMustMatch"}
);
Object.defineProperty($asm02.System.Windows.Resx, "Parser_CreateInstance_NoConstructor", {
		"value": "Parser_CreateInstance_NoConstructor"}
);
Object.defineProperty($asm02.System.Windows.Resx, "Parser_CreateInstance_ConstructorInvocation", {
		"value": "Parser_CreateInstance_ConstructorInvocation"}
);
Object.defineProperty($asm02.System.Windows.Resx, "Parser_CreateFromValue_FailedToCreateTypeConverter", {
		"value": "Parser_CreateFromValue_FailedToCreateTypeConverter"}
);
Object.defineProperty($asm02.System.Windows.Resx, "Parser_CreateFromValue_ConverterMustDeriveFromBase", {
		"value": "Parser_CreateFromValue_ConverterMustDeriveFromBase"}
);
Object.defineProperty($asm02.System.Windows.Resx, "Parser_CreateFromValue_CannotConvertInitializationText", {
		"value": "Parser_CreateFromValue_CannotConvertInitializationText"}
);
Object.defineProperty($asm02.System.Windows.Resx, "Parser_GetValue_Exception", {
		"value": "Parser_GetValue_Exception"}
);
Object.defineProperty($asm02.System.Windows.Resx, "Parser_GetValue_NoGetter", {
		"value": "Parser_GetValue_NoGetter"}
);
Object.defineProperty($asm02.System.Windows.Resx, "Parser_SetValue_NoSetter", {
		"value": "Parser_SetValue_NoSetter"}
);
Object.defineProperty($asm02.System.Windows.Resx, "Parser_SetValue_Exception", {
		"value": "Parser_SetValue_Exception"}
);
Object.defineProperty($asm02.System.Windows.Resx, "Parser_SetValue_ProvideValueException", {
		"value": "Parser_SetValue_ProvideValueException"}
);
Object.defineProperty($asm02.System.Windows.Resx, "Parser_Add_Exception", {
		"value": "Parser_Add_Exception"}
);
Object.defineProperty($asm02.System.Windows.Resx, "Parser_AddToDictionary_Exception", {
		"value": "Parser_AddToDictionary_Exception"}
);
Object.defineProperty($asm02.System.Windows.Resx, "Parser_Add_CollectionIsNull", {
		"value": "Parser_Add_CollectionIsNull"}
);
Object.defineProperty($asm02.System.Windows.Resx, "TextElement_OperationNotSupportedOutsideRTB", {
		"value": "TextElement_OperationNotSupportedOutsideRTB"}
);
Object.defineProperty($asm02.System.Windows.Resx, "TextElementCollection_TypeNotSupportedInHost", {
		"value": "TextElementCollection_TypeNotSupportedInHost"}
);
$asm02.System.Windows.Resx.loader = null;
$asm02.System.Windows.Resx.prototype.resources = null;
$asm02.System.Windows.Resx.prototype.debugResources = null;
$asm02.System.Windows.Resx.prototype.fallbackResources = null;
$asm02.System.Windows.Resx.s_InternalSyncObject = null;
$asm02.System.Windows.Resx._cctor = function () {
	$asm02.System.Windows.Resx.loader = null;
};

$asm02.MS.Internal.CoreTypes.CoreTypeIdFromString = function (typeName) {
	var num = new JSIL.Variable(0);
	if (typeName !== null) {
		if (JSIL.IgnoredMember("$$method0x6000013-1") === null) {
			var expr_1E = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.String, System.Int32), "_ctor$1", [379]);
			expr_1E.Add("System.Windows.DependencyObject", 0);
			expr_1E.Add("System.Windows.AccessibilityObject", 1);
			expr_1E.Add("System.Windows.PresentationFrameworkCollection", 2);
			expr_1E.Add("System.Double", 3);
			expr_1E.Add("System.DDouble", 4);
			expr_1E.Add("System.Windows.DPoint", 5);
			expr_1E.Add("System.Int32", 6);
			expr_1E.Add("System.Windows.Point", 7);
			expr_1E.Add("System.Windows.Size", 8);
			expr_1E.Add("System.Windows.Rect", 9);
			expr_1E.Add("System.Windows.Thickness", 10);
			expr_1E.Add("System.Windows.CornerRadius", 11);
			expr_1E.Add("System.Windows.Media.Color", 12);
			expr_1E.Add("System.Enumerated", 13);
			expr_1E.Add("System.Boolean", 14);
			expr_1E.Add("System.Windows.Media.FillRule", 15);
			expr_1E.Add("System.Windows.Media.PenLineCap", 16);
			expr_1E.Add("System.Windows.Media.PenLineJoin", 17);
			expr_1E.Add("System.Windows.Media.SweepDirection", 18);
			expr_1E.Add("System.Windows.Media.ColorInterpolationMode", 19);
			expr_1E.Add("System.Windows.Media.GradientSpreadMethod", 20);
			expr_1E.Add("System.Windows.Media.BrushMappingMode", 21);
			expr_1E.Add("System.Windows.Input.TabletDeviceType", 22);
			expr_1E.Add("System.Windows.Media.Animation.FillBehavior", 23);
			expr_1E.Add("System.Windows.Media.Animation.EasingMode", 24);
			expr_1E.Add("System.Windows.Media.Animation.ClockState", 25);
			expr_1E.Add("System.Windows.Media.AlignmentX", 26);
			expr_1E.Add("System.Windows.Media.AlignmentY", 27);
			expr_1E.Add("System.Windows.Media.Stretch", 28);
			expr_1E.Add("System.Windows.Media.MediaElementState", 29);
			expr_1E.Add("System.String", 30);
			expr_1E.Add("System.Windows.TextWrapping", 31);
			expr_1E.Add("System.Windows.TextTrimming", 32);
			expr_1E.Add("System.Windows.LineStackingStrategy", 33);
			expr_1E.Add("System.Windows.Media.LogSource", 34);
			expr_1E.Add("System.Windows.TextAlignment", 35);
			expr_1E.Add("System.Windows.FontWeight", 36);
			expr_1E.Add("System.Windows.FontStyle", 37);
			expr_1E.Add("System.Windows.FontStretch", 38);
			expr_1E.Add("System.Windows.Media.StyleSimulations", 39);
			expr_1E.Add("System.Windows.TextDecorationCollection", 40);
			expr_1E.Add("System.TimeSpan", 41);
			expr_1E.Add("System.Windows.Duration", 42);
			expr_1E.Add("System.Windows.Media.Animation.RepeatBehavior", 43);
			expr_1E.Add("System.Windows.Media.DoubleCollection", 44);
			expr_1E.Add("System.Windows.Media.PointCollection", 45);
			expr_1E.Add("System.Windows.Input.Cursor", 46);
			expr_1E.Add("System.Windows.Input.Cursors", 47);
			expr_1E.Add("System.Windows.Input.StylusPoint", 48);
			expr_1E.Add("System.Windows.Input.StylusPointCollection", 49);
			expr_1E.Add("System.Windows.Ink.Stroke", 50);
			expr_1E.Add("System.Windows.Ink.StrokeCollection", 51);
			expr_1E.Add("System.Windows.Visibility", 52);
			expr_1E.Add("System.Windows.Media.GeneralTransform", 53);
			expr_1E.Add("MS.Internal.InternalTransform", 54);
			expr_1E.Add("System.Windows.Media.Transform", 55);
			expr_1E.Add("System.Windows.Media.PathSegment", 56);
			expr_1E.Add("System.Windows.Media.Brush", 57);
			expr_1E.Add("System.Windows.Media.TileBrush", 58);
			expr_1E.Add("System.Windows.Media.Geometry", 59);
			expr_1E.Add("System.Windows.Media.Animation.Timeline", 60);
			expr_1E.Add("System.Windows.Media.Animation.EasingFunctionBase", 61);
			expr_1E.Add("System.Windows.Media.Animation.CircleEase", 62);
			expr_1E.Add("System.Windows.Media.Animation.BackEase", 63);
			expr_1E.Add("System.Windows.Media.Animation.ExponentialEase", 64);
			expr_1E.Add("System.Windows.Media.Animation.PowerEase", 65);
			expr_1E.Add("System.Windows.Media.Animation.QuadraticEase", 66);
			expr_1E.Add("System.Windows.Media.Animation.CubicEase", 67);
			expr_1E.Add("System.Windows.Media.Animation.QuarticEase", 68);
			expr_1E.Add("System.Windows.Media.Animation.QuinticEase", 69);
			expr_1E.Add("System.Windows.Media.Animation.ElasticEase", 70);
			expr_1E.Add("System.Windows.Media.Animation.BounceEase", 71);
			expr_1E.Add("System.Windows.Media.Animation.SineEase", 72);
			expr_1E.Add("System.Windows.UIElement", 73);
			expr_1E.Add("System.Windows.FrameworkElement", 74);
			expr_1E.Add("System.Windows.Controls.Panel", 75);
			expr_1E.Add("System.Windows.Shapes.Shape", 76);
			expr_1E.Add("System.Windows.Documents.TextElement", 77);
			expr_1E.Add("System.Windows.Documents.TextElementCollection", 78);
			expr_1E.Add("MS.Internal.TextPointerWrapper", 79);
			expr_1E.Add("System.Windows.Documents.Inline", 80);
			expr_1E.Add("System.Windows.Documents.Block", 81);
			expr_1E.Add("System.Windows.Documents.InlineCollection", 82);
			expr_1E.Add("System.Windows.Documents.BlockCollection", 83);
			expr_1E.Add("System.Windows.Controls.Image", 84);
			expr_1E.Add("System.Windows.Media.ImageSource", 85);
			expr_1E.Add("System.Windows.Media.Imaging.BitmapSource", 86);
			expr_1E.Add("System.Windows.Media.Imaging.WriteableBitmap", 87);
			expr_1E.Add("System.Windows.Media.Imaging.BitmapImage", 88);
			expr_1E.Add("System.Windows.Media.Imaging.BitmapCreateOptions", 89);
			expr_1E.Add("System.Windows.Media.RotateTransform", 90);
			expr_1E.Add("System.Windows.Media.ScaleTransform", 91);
			expr_1E.Add("System.Windows.Media.SkewTransform", 92);
			expr_1E.Add("System.Windows.Media.TranslateTransform", 93);
			expr_1E.Add("System.Windows.Media.TransformCollection", 94);
			expr_1E.Add("System.Windows.Media.TransformGroup", 95);
			expr_1E.Add("System.Windows.Media.MatrixTransform", 96);
			expr_1E.Add("System.Windows.Media.CompositeTransform", 97);
			expr_1E.Add("System.Windows.Media.Matrix", 98);
			expr_1E.Add("System.Windows.Media.Media3D.Matrix3D", 99);
			expr_1E.Add("System.Windows.Media.LineSegment", 100);
			expr_1E.Add("System.Windows.Media.BezierSegment", 101);
			expr_1E.Add("System.Windows.Media.QuadraticBezierSegment", 102);
			expr_1E.Add("System.Windows.Media.ArcSegment", 103);
			expr_1E.Add("System.Windows.Media.PolyLineSegment", 104);
			expr_1E.Add("System.Windows.Media.PolyBezierSegment", 105);
			expr_1E.Add("System.Windows.Media.PolyQuadraticBezierSegment", 106);
			expr_1E.Add("System.Windows.Media.PathSegmentCollection", 107);
			expr_1E.Add("System.Windows.Media.PathFigure", 108);
			expr_1E.Add("System.Windows.Media.PathFigureCollection", 109);
			expr_1E.Add("System.Windows.Media.PathGeometry", 110);
			expr_1E.Add("System.Windows.Media.EllipseGeometry", 111);
			expr_1E.Add("System.Windows.Media.RectangleGeometry", 112);
			expr_1E.Add("System.Windows.Media.LineGeometry", 113);
			expr_1E.Add("System.Windows.Media.GeometryCollection", 114);
			expr_1E.Add("System.Windows.Media.GeometryGroup", 115);
			expr_1E.Add("System.Windows.Media.SolidColorBrush", 116);
			expr_1E.Add("System.Windows.Media.GradientStop", 117);
			expr_1E.Add("System.Windows.Media.GradientStopCollection", 118);
			expr_1E.Add("System.Windows.Media.GradientBrush", 119);
			expr_1E.Add("System.Windows.Media.LinearGradientBrush", 120);
			expr_1E.Add("System.Windows.Media.RadialGradientBrush", 121);
			expr_1E.Add("System.Windows.Media.ImageBrush", 122);
			expr_1E.Add("System.Windows.Media.VideoBrush", 123);
			expr_1E.Add("System.Windows.Media.ImplicitInputBrush", 124);
			expr_1E.Add("System.Windows.Controls.Canvas", 125);
			expr_1E.Add("System.Windows.Shapes.Path", 126);
			expr_1E.Add("System.Windows.Shapes.Ellipse", 127);
			expr_1E.Add("System.Windows.Shapes.Line", 128);
			expr_1E.Add("System.Windows.Shapes.Polygon", 129);
			expr_1E.Add("System.Windows.Shapes.Polyline", 130);
			expr_1E.Add("System.Windows.Shapes.Rectangle", 131);
			expr_1E.Add("System.Windows.Documents.Glyphs", 132);
			expr_1E.Add("System.Windows.Media.FontFamily", 133);
			expr_1E.Add("System.Windows.Controls.TextBlock", 134);
			expr_1E.Add("System.Windows.Documents.Run", 135);
			expr_1E.Add("System.Windows.Documents.Paragraph", 136);
			expr_1E.Add("System.Windows.Documents.Section", 137);
			expr_1E.Add("System.Windows.Documents.Span", 138);
			expr_1E.Add("System.Windows.Documents.Underline", 139);
			expr_1E.Add("System.Windows.Documents.Italic", 140);
			expr_1E.Add("System.Windows.Documents.Bold", 141);
			expr_1E.Add("System.Windows.Documents.Hyperlink", 142);
			expr_1E.Add("System.Windows.Documents.LineBreak", 143);
			expr_1E.Add("System.Windows.Documents.InlineUIContainer", 144);
			expr_1E.Add("System.Windows.Controls.MediaElement", 145);
			expr_1E.Add("System.Windows.TriggerCollection", 146);
			expr_1E.Add("System.Windows.TriggerBase", 147);
			expr_1E.Add("System.Windows.EventTrigger", 148);
			expr_1E.Add("System.Windows.TriggerActionCollection", 149);
			expr_1E.Add("System.Windows.TriggerAction", 150);
			expr_1E.Add("System.Windows.Media.Animation.BeginStoryboard", 151);
			expr_1E.Add("System.Windows.Media.Animation.Storyboard", 152);
			expr_1E.Add("System.Windows.Media.Animation.DoubleAnimation", 153);
			expr_1E.Add("System.Windows.Media.Animation.ColorAnimation", 154);
			expr_1E.Add("System.Windows.Media.Animation.PointAnimation", 155);
			expr_1E.Add("System.Windows.Media.Animation.KeyTime", 156);
			expr_1E.Add("System.Windows.Media.Animation.KeySpline", 157);
			expr_1E.Add("System.Windows.Media.Animation.ColorKeyFrameCollection", 158);
			expr_1E.Add("System.Windows.Media.Animation.DoubleKeyFrameCollection", 159);
			expr_1E.Add("System.Windows.Media.Animation.PointKeyFrameCollection", 160);
			expr_1E.Add("System.Windows.Media.Animation.ObjectKeyFrameCollection", 161);
			expr_1E.Add("System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames", 162);
			expr_1E.Add("System.Windows.Media.Animation.DoubleKeyFrame", 163);
			expr_1E.Add("System.Windows.Media.Animation.DiscreteDoubleKeyFrame", 164);
			expr_1E.Add("System.Windows.Media.Animation.LinearDoubleKeyFrame", 165);
			expr_1E.Add("System.Windows.Media.Animation.SplineDoubleKeyFrame", 166);
			expr_1E.Add("System.Windows.Media.Animation.EasingDoubleKeyFrame", 167);
			expr_1E.Add("System.Windows.Media.Animation.ColorAnimationUsingKeyFrames", 168);
			expr_1E.Add("System.Windows.Media.Animation.ColorKeyFrame", 169);
			expr_1E.Add("System.Windows.Media.Animation.DiscreteColorKeyFrame", 170);
			expr_1E.Add("System.Windows.Media.Animation.LinearColorKeyFrame", 171);
			expr_1E.Add("System.Windows.Media.Animation.SplineColorKeyFrame", 172);
			expr_1E.Add("System.Windows.Media.Animation.EasingColorKeyFrame", 173);
			expr_1E.Add("System.Windows.Media.Animation.PointAnimationUsingKeyFrames", 174);
			expr_1E.Add("System.Windows.Media.Animation.PointKeyFrame", 175);
			expr_1E.Add("System.Windows.Media.Animation.DiscretePointKeyFrame", 176);
			expr_1E.Add("System.Windows.Media.Animation.LinearPointKeyFrame", 177);
			expr_1E.Add("System.Windows.Media.Animation.SplinePointKeyFrame", 178);
			expr_1E.Add("System.Windows.Media.Animation.EasingPointKeyFrame", 179);
			expr_1E.Add("System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames", 180);
			expr_1E.Add("System.Windows.Media.Animation.ObjectKeyFrame", 181);
			expr_1E.Add("System.Windows.Media.Animation.DiscreteObjectKeyFrame", 182);
			expr_1E.Add("System.EventArgs", 183);
			expr_1E.Add("System.Windows.Input.MouseEventArgs", 184);
			expr_1E.Add("System.Windows.Input.MouseButtonEventArgs", 185);
			expr_1E.Add("System.Windows.Input.MouseWheelEventArgs", 186);
			expr_1E.Add("System.Windows.Input.TouchFrameEventArgs", 187);
			expr_1E.Add("System.Windows.Controls.NotifyEventArgs", 188);
			expr_1E.Add("System.Windows.Navigation.NavigationEventArgs", 189);
			expr_1E.Add("System.Windows.DragEventArgs", 190);
			expr_1E.Add("System.Windows.Controls.InkPresenter", 191);
			expr_1E.Add("System.Windows.Input.KeyEventArgs", 192);
			expr_1E.Add("MS.Internal.ErrorEventArgs", 193);
			expr_1E.Add("System.Windows.Media.TimelineMarkerRoutedEventArgs", 194);
			expr_1E.Add("System.Windows.ParserErrorEventArgs", 195);
			expr_1E.Add("System.Windows.RuntimeErrorEventArgs", 196);
			expr_1E.Add("System.Windows.Controls.UIElementCollection", 197);
			expr_1E.Add("System.Windows.Media.Animation.TimelineCollection", 198);
			expr_1E.Add("MS.Internal.Downloader", 199);
			expr_1E.Add("MS.Internal.InternalWebRequest", 200);
			expr_1E.Add("System.Windows.Ink.DrawingAttributes", 201);
			expr_1E.Add("MS.Internal.StylusInfo", 202);
			expr_1E.Add("System.Windows.Controls.MultiScaleImage", 203);
			expr_1E.Add("System.Windows.Controls.MultiScaleSubImage", 204);
			expr_1E.Add("MS.Internal.MultiScaleSubImageCollection", 205);
			expr_1E.Add("System.Windows.Media.MultiScaleTileSource", 206);
			expr_1E.Add("System.Windows.Media.DeepZoomImageTileSource", 207);
			expr_1E.Add("System.Windows.Media.TimelineMarker", 208);
			expr_1E.Add("System.Windows.Media.TimelineMarkerCollection", 209);
			expr_1E.Add("System.Windows.Controls.Control", 210);
			expr_1E.Add("System.Windows.ErrorType", 211);
			expr_1E.Add("System.Windows.ResourceDictionary", 212);
			expr_1E.Add("MS.Internal.MediaAttribute", 213);
			expr_1E.Add("MS.Internal.MediaAttributeCollection", 214);
			expr_1E.Add("System.Windows.RoutedEventArgs", 215);
			expr_1E.Add("System.Windows.ExceptionRoutedEventArgs", 216);
			expr_1E.Add("System.Windows.MediaFailedRoutedEventArgs", 217);
			expr_1E.Add("System.Windows.Media.Imaging.DownloadProgressEventArgs", 218);
			expr_1E.Add("System.Windows.Media.LogReadyRoutedEventArgs", 219);
			expr_1E.Add("System.Windows.Deployment", 220);
			expr_1E.Add("System.Windows.AssemblyPart", 221);
			expr_1E.Add("System.Windows.ExtensionPart", 222);
			expr_1E.Add("System.Windows.ExternalPart", 223);
			expr_1E.Add("System.Windows.AssemblyPartCollection", 224);
			expr_1E.Add("System.Windows.ExternalPartCollection", 225);
			expr_1E.Add("System.Windows.Application", 226);
			expr_1E.Add("System.Windows.StartupEventArgs", 227);
			expr_1E.Add("System.Windows.Controls.StackPanel", 228);
			expr_1E.Add("System.Windows.Controls.Orientation", 229);
			expr_1E.Add("System.Windows.HorizontalAlignment", 230);
			expr_1E.Add("System.Windows.VerticalAlignment", 231);
			expr_1E.Add("MS.Internal.TextBoxBase", 232);
			expr_1E.Add("System.Windows.Controls.TextBox", 233);
			expr_1E.Add("System.Windows.Controls.RichTextBox", 234);
			expr_1E.Add("MS.Internal.RichTextBoxView", 235);
			expr_1E.Add("MS.Internal.TextBoxView", 236);
			expr_1E.Add("System.Windows.Controls.TextChangedEventArgs", 237);
			expr_1E.Add("System.Windows.Controls.ContentChangedEventArgs", 238);
			expr_1E.Add("MS.Internal.RequestBringIntoViewEventArgs", 239);
			expr_1E.Add("System.Windows.Controls.PasswordBox", 240);
			expr_1E.Add("System.Windows.Controls.RowDefinition", 241);
			expr_1E.Add("System.Windows.Controls.ColumnDefinition", 242);
			expr_1E.Add("System.Windows.Controls.Grid", 243);
			expr_1E.Add("System.Windows.Controls.RowDefinitionCollection", 244);
			expr_1E.Add("System.Windows.Controls.ColumnDefinitionCollection", 245);
			expr_1E.Add("System.Windows.FrameworkTemplate", 246);
			expr_1E.Add("System.Windows.Controls.ControlTemplate", 247);
			expr_1E.Add("System.Windows.Controls.UserControl", 248);
			expr_1E.Add("System.Windows.GridLength", 249);
			expr_1E.Add("System.Windows.GridUnitType", 250);
			expr_1E.Add("System.Windows.Input.KeyboardNavigationMode", 251);
			expr_1E.Add("System.Windows.DataTemplate", 252);
			expr_1E.Add("MS.Internal.RuntimeHostEventArgs", 253);
			expr_1E.Add("System.Windows.SizeChangedEventArgs", 254);
			expr_1E.Add("System.Windows.Media.RenderingEventArgs", 255);
			expr_1E.Add("System.Windows.SourceDownloadEventArgs", 256);
			expr_1E.Add("System.Windows.Controls.ItemCollection", 257);
			expr_1E.Add("System.Windows.Controls.ItemsControl", 258);
			expr_1E.Add("MS.Internal.CorePropertyChangedEventArgs", 259);
			expr_1E.Add("MS.Internal.IsEnabledChangedEventArgs", 260);
			expr_1E.Add("System.Windows.Controls.Viewbox", 261);
			expr_1E.Add("System.Windows.Controls.Primitives.Popup", 262);
			expr_1E.Add("System.Windows.Controls.Border", 263);
			expr_1E.Add("System.Windows.Media.Projection", 264);
			expr_1E.Add("System.Windows.Media.PlaneProjection", 265);
			expr_1E.Add("System.Windows.Media.Matrix3DProjection", 266);
			expr_1E.Add("System.Windows.Controls.ContentControl", 267);
			expr_1E.Add("System.Windows.Controls.ContentPresenter", 268);
			expr_1E.Add("MS.Internal.DisplayMemberTemplate", 269);
			expr_1E.Add("System.Windows.Controls.ItemsPanelTemplate", 270);
			expr_1E.Add("System.Windows.Controls.ItemsPresenter", 271);
			expr_1E.Add("MS.Internal.TypeProxy", 272);
			expr_1E.Add("System.Windows.Threading.DispatcherTimer", 273);
			expr_1E.Add("System.Windows.Input.TextCompositionEventArgs", 274);
			expr_1E.Add("System.Windows.Input.TextCompositionStage", 275);
			expr_1E.Add("MS.Internal.ManagedObjectReference", 276);
			expr_1E.Add("System.Windows.Style", 277);
			expr_1E.Add("System.Windows.SetterBase", 278);
			expr_1E.Add("System.Windows.Setter", 279);
			expr_1E.Add("System.Windows.SetterBaseCollection", 280);
			expr_1E.Add("System.Windows.Automation.Peers.AutomationPeer", 281);
			expr_1E.Add("MS.Internal.AutomationPropertiesEnum", 282);
			expr_1E.Add("MS.Internal.Automation.TextProvider", 283);
			expr_1E.Add("MS.Internal.Automation.TextRangeProvider", 284);
			expr_1E.Add("System.Windows.Automation.Peers.AutomationControlType", 285);
			expr_1E.Add("System.Windows.Automation.Peers.AutomationEvents", 286);
			expr_1E.Add("System.Windows.Automation.Peers.PatternInterface", 287);
			expr_1E.Add("System.Windows.Automation.Peers.AutomationOrientation", 288);
			expr_1E.Add("System.Windows.Automation.DockPosition", 289);
			expr_1E.Add("System.Windows.Automation.ExpandCollapseState", 290);
			expr_1E.Add("System.Windows.Automation.ScrollAmount", 291);
			expr_1E.Add("System.Windows.Automation.RowOrColumnMajor", 292);
			expr_1E.Add("System.Windows.Automation.ToggleState", 293);
			expr_1E.Add("System.Windows.Automation.WindowVisualState", 294);
			expr_1E.Add("System.Windows.Automation.WindowInteractionState", 295);
			expr_1E.Add("System.Windows.Automation.Peers.TextBlockAutomationPeer", 296);
			expr_1E.Add("MS.Internal.AutomationPeerEventArgs", 297);
			expr_1E.Add("System.Windows.Automation.Peers.FrameworkElementAutomationPeer", 298);
			expr_1E.Add("System.Windows.Input.InputLangChangeEventArgs", 299);
			expr_1E.Add("System.Windows.RootVisual", 300);
			expr_1E.Add("System.Windows.CrossDomainAccess", 301);
			expr_1E.Add("MS.Internal.DependencyPropertyProxy", 302);
			expr_1E.Add("System.Windows.PopupRoot", 303);
			expr_1E.Add("System.Windows.VisualState", 304);
			expr_1E.Add("System.Windows.Automation.Peers.PasswordBoxAutomationPeer", 305);
			expr_1E.Add("System.Windows.Automation.Peers.TextBoxAutomationPeer", 306);
			expr_1E.Add("System.Windows.Automation.Peers.ImageAutomationPeer", 307);
			expr_1E.Add("System.Windows.StaticResource", 308);
			expr_1E.Add("System.Windows.Media.CacheMode", 309);
			expr_1E.Add("System.Windows.Media.BitmapCache", 310);
			expr_1E.Add("MS.Internal.GlyphTypeface", 311);
			expr_1E.Add("MS.Internal.GlyphTypefaceCollection", 312);
			expr_1E.Add("System.Windows.PropertyInvalidationReason", 313);
			expr_1E.Add("System.Windows.BasedOnSetterCollection", 314);
			expr_1E.Add("MS.Internal.ResourceDictionaryCollection", 315);
			expr_1E.Add("System.Windows.Media.TextHintingMode", 316);
			expr_1E.Add("System.Windows.Media.Effects.PixelShader", 317);
			expr_1E.Add("System.Windows.Media.Effects.Effect", 318);
			expr_1E.Add("System.Windows.Media.Effects.ShaderEffect", 319);
			expr_1E.Add("System.Windows.Media.Effects.BlurEffect", 320);
			expr_1E.Add("System.Windows.Media.Effects.DropShadowEffect", 321);
			expr_1E.Add("System.Windows.OutOfBrowserSettings", 322);
			expr_1E.Add("System.Windows.IconCollection", 323);
			expr_1E.Add("System.Windows.Icon", 324);
			expr_1E.Add("System.Windows.InstallState", 325);
			expr_1E.Add("System.Windows.NetworkStatusEventArgs", 326);
			expr_1E.Add("System.Windows.WindowSettings", 327);
			expr_1E.Add("System.Windows.WindowStartupLocation", 328);
			expr_1E.Add("System.Windows.WindowStyle", 329);
			expr_1E.Add("System.Windows.ElevatedPermissions", 330);
			expr_1E.Add("System.Windows.SecuritySettings", 331);
			expr_1E.Add("System.Windows.VisualStateGroup", 332);
			expr_1E.Add("System.Windows.VisualTransition", 333);
			expr_1E.Add("MS.Internal.VisualStateGroupCollection", 334);
			expr_1E.Add("MS.Internal.VisualTransitionCollection", 335);
			expr_1E.Add("MS.Internal.VisualStateCollection", 336);
			expr_1E.Add("System.Windows.VisualStateChangedEventArgs", 337);
			expr_1E.Add("System.Windows.Data.CollectionViewSource", 338);
			expr_1E.Add("System.Windows.CheckAndDownloadUpdateCompletedEventArgs", 339);
			expr_1E.Add("System.Windows.Controls.WebBrowser", 340);
			expr_1E.Add("System.Windows.Controls.WebBrowserBrush", 341);
			expr_1E.Add("System.Windows.NotificationWindow", 342);
			expr_1E.Add("System.Windows.Input.TouchPointCollection", 343);
			expr_1E.Add("System.Windows.Input.TouchDevice", 344);
			expr_1E.Add("System.Windows.Input.TouchPoint", 345);
			expr_1E.Add("System.Windows.Input.TouchAction", 346);
			expr_1E.Add("System.Windows.FlowDirection", 347);
			expr_1E.Add("System.Windows.Controls.StretchDirection", 348);
			expr_1E.Add("System.Windows.Input.ImeConversionModeValues", 349);
			expr_1E.Add("System.Windows.Input.InputMethodState ", 350);
			expr_1E.Add("System.Windows.DOCollection", 351);
			expr_1E.Add("System.Windows.Window", 352);
			expr_1E.Add("System.Windows.Media.VideoCaptureDeviceCollection", 353);
			expr_1E.Add("System.Windows.Media.AudioCaptureDeviceCollection", 354);
			expr_1E.Add("System.Windows.Media.CaptureDevice", 355);
			expr_1E.Add("System.Windows.Media.VideoCaptureDevice", 356);
			expr_1E.Add("System.Windows.Media.AudioCaptureDevice", 357);
			expr_1E.Add("System.Windows.Media.CaptureSource", 358);
			expr_1E.Add("System.Windows.Media.PixelFormatType", 359);
			expr_1E.Add("System.Windows.Media.WaveFormatType", 360);
			expr_1E.Add("System.Windows.Media.CaptureState", 361);
			expr_1E.Add("System.Windows.Printing.PrintDocument", 362);
			expr_1E.Add("System.Windows.Printing.PrintPageEventArgs", 363);
			expr_1E.Add("System.Windows.Printing.BeginPrintEventArgs", 364);
			expr_1E.Add("System.Windows.Printing.EndPrintEventArgs", 365);
			expr_1E.Add("System.Windows.PrintRoot", 366);
			expr_1E.Add("System.Windows.Data.TemplateBinding", 367);
			expr_1E.Add("MS.Internal.TemplateContent", 368);
			expr_1E.Add("System.EventHandler", 369);
			expr_1E.Add("System.Windows.VisualStateManager", 370);
			expr_1E.Add("System.Windows.TextOptions", 371);
			expr_1E.Add("System.Windows.Input.InputMethod", 372);
			expr_1E.Add("System.Windows.Automation.AutomationProperties", 373);
			expr_1E.Add("System.Windows.LengthConverter", 374);
			expr_1E.Add("System.Windows.NullExtension", 375);
			expr_1E.Add("System.Windows.Automation.Peers.WebBrowserAutomationPeer", 376);
			expr_1E.Add("MS.Internal.AutomationTextAttributesEnum", 377);
			expr_1E.Add("MS.Internal.DependencyObjectCollection", 378);
			JSIL.IgnoredMember("$$method0x6000013-1") = expr_1E;
		}
		if (JSIL.IgnoredMember("$$method0x6000013-1").TryGetValue(typeName, /* ref */ num)) {
			switch (num.value) {
				case 0: 
					return 1;
				case 1: 
					return 159;
				case 2: 
					return 2;
				case 3: 
					return 3;
				case 4: 
					return 266;
				case 5: 
					return 267;
				case 6: 
					return 133;
				case 7: 
					return 4;
				case 8: 
					return 196;
				case 9: 
					return 5;
				case 10: 
					return 175;
				case 11: 
					return 224;
				case 12: 
					return 6;
				case 13: 
					return 7;
				case 14: 
					return 8;
				case 15: 
					return 9;
				case 16: 
					return 89;
				case 17: 
					return 90;
				case 18: 
					return 10;
				case 19: 
					return 11;
				case 20: 
					return 12;
				case 21: 
					return 13;
				case 22: 
					return 142;
				case 23: 
					return 14;
				case 24: 
					return 296;
				case 25: 
					return 206;
				case 26: 
					return 104;
				case 27: 
					return 105;
				case 28: 
					return 106;
				case 29: 
					return 170;
				case 30: 
					return 54;
				case 31: 
					return 113;
				case 32: 
					return 348;
				case 33: 
					return 203;
				case 34: 
					return 301;
				case 35: 
					return 186;
				case 36: 
					return 119;
				case 37: 
					return 120;
				case 38: 
					return 121;
				case 39: 
					return 158;
				case 40: 
					return 143;
				case 41: 
					return 51;
				case 42: 
					return 52;
				case 43: 
					return 99;
				case 44: 
					return 57;
				case 45: 
					return 58;
				case 46: 
					return 130;
				case 47: 
					return 130;
				case 48: 
					return 138;
				case 49: 
					return 139;
				case 50: 
					return 136;
				case 51: 
					return 137;
				case 52: 
					return 132;
				case 53: 
					return 176;
				case 54: 
					return 312;
				case 55: 
					return 15;
				case 56: 
					return 21;
				case 57: 
					return 33;
				case 58: 
					return 102;
				case 59: 
					return 30;
				case 60: 
					return 47;
				case 61: 
					return 284;
				case 62: 
					return 285;
				case 63: 
					return 286;
				case 64: 
					return 287;
				case 65: 
					return 288;
				case 66: 
					return 289;
				case 67: 
					return 290;
				case 68: 
					return 291;
				case 69: 
					return 292;
				case 70: 
					return 293;
				case 71: 
					return 294;
				case 72: 
					return 295;
				case 73: 
					return 40;
				case 74: 
					return 67;
				case 75: 
					return 114;
				case 76: 
					return 41;
				case 77: 
					return 341;
				case 78: 
					return 342;
				case 79: 
					return 407;
				case 80: 
					return 123;
				case 81: 
					return 343;
				case 82: 
					return 124;
				case 83: 
					return 345;
				case 84: 
					return 117;
				case 85: 
					return 193;
				case 86: 
					return 313;
				case 87: 
					return 314;
				case 88: 
					return 194;
				case 89: 
					return 315;
				case 90: 
					return 17;
				case 91: 
					return 18;
				case 92: 
					return 19;
				case 93: 
					return 20;
				case 94: 
					return 59;
				case 95: 
					return 16;
				case 96: 
					return 101;
				case 97: 
					return 375;
				case 98: 
					return 100;
				case 99: 
					return 338;
				case 100: 
					return 22;
				case 101: 
					return 23;
				case 102: 
					return 24;
				case 103: 
					return 25;
				case 104: 
					return 26;
				case 105: 
					return 27;
				case 106: 
					return 28;
				case 107: 
					return 60;
				case 108: 
					return 29;
				case 109: 
					return 61;
				case 110: 
					return 31;
				case 111: 
					return 96;
				case 112: 
					return 97;
				case 113: 
					return 98;
				case 114: 
					return 62;
				case 115: 
					return 32;
				case 116: 
					return 34;
				case 117: 
					return 35;
				case 118: 
					return 63;
				case 119: 
					return 36;
				case 120: 
					return 37;
				case 121: 
					return 38;
				case 122: 
					return 103;
				case 123: 
					return 134;
				case 124: 
					return 309;
				case 125: 
					return 42;
				case 126: 
					return 44;
				case 127: 
					return 91;
				case 128: 
					return 92;
				case 129: 
					return 93;
				case 130: 
					return 94;
				case 131: 
					return 95;
				case 132: 
					return 66;
				case 133: 
					return 112;
				case 134: 
					return 109;
				case 135: 
					return 110;
				case 136: 
					return 344;
				case 137: 
					return 403;
				case 138: 
					return 125;
				case 139: 
					return 126;
				case 140: 
					return 127;
				case 141: 
					return 128;
				case 142: 
					return 347;
				case 143: 
					return 111;
				case 144: 
					return 349;
				case 145: 
					return 116;
				case 146: 
					return 56;
				case 147: 
					return 270;
				case 148: 
					return 55;
				case 149: 
					return 64;
				case 150: 
					return 271;
				case 151: 
					return 45;
				case 152: 
					return 46;
				case 153: 
					return 53;
				case 154: 
					return 65;
				case 155: 
					return 87;
				case 156: 
					return 69;
				case 157: 
					return 70;
				case 158: 
					return 156;
				case 159: 
					return 157;
				case 160: 
					return 71;
				case 161: 
					return 223;
				case 162: 
					return 72;
				case 163: 
					return 73;
				case 164: 
					return 74;
				case 165: 
					return 75;
				case 166: 
					return 76;
				case 167: 
					return 297;
				case 168: 
					return 77;
				case 169: 
					return 78;
				case 170: 
					return 79;
				case 171: 
					return 80;
				case 172: 
					return 81;
				case 173: 
					return 298;
				case 174: 
					return 82;
				case 175: 
					return 83;
				case 176: 
					return 84;
				case 177: 
					return 85;
				case 178: 
					return 86;
				case 179: 
					return 299;
				case 180: 
					return 220;
				case 181: 
					return 221;
				case 182: 
					return 222;
				case 183: 
					return 118;
				case 184: 
					return 107;
				case 185: 
					return 169;
				case 186: 
					return 108;
				case 187: 
					return 330;
				case 188: 
					return 374;
				case 189: 
					return 408;
				case 190: 
					return 377;
				case 191: 
					return 135;
				case 192: 
					return 129;
				case 193: 
					return 144;
				case 194: 
					return 149;
				case 195: 
					return 145;
				case 196: 
					return 146;
				case 197: 
					return 122;
				case 198: 
					return 43;
				case 199: 
					return 131;
				case 200: 
					return 197;
				case 201: 
					return 141;
				case 202: 
					return 140;
				case 203: 
					return 190;
				case 204: 
					return 227;
				case 205: 
					return 228;
				case 206: 
					return 256;
				case 207: 
					return 257;
				case 208: 
					return 147;
				case 209: 
					return 148;
				case 210: 
					return 155;
				case 211: 
					return 150;
				case 212: 
					return 151;
				case 213: 
					return 152;
				case 214: 
					return 153;
				case 215: 
					return 160;
				case 216: 
					return 226;
				case 217: 
					return 393;
				case 218: 
					return 202;
				case 219: 
					return 300;
				case 220: 
					return 161;
				case 221: 
					return 162;
				case 222: 
					return 278;
				case 223: 
					return 280;
				case 224: 
					return 163;
				case 225: 
					return 279;
				case 226: 
					return 166;
				case 227: 
					return 167;
				case 228: 
					return 171;
				case 229: 
					return 172;
				case 230: 
					return 173;
				case 231: 
					return 174;
				case 232: 
					return 260;
				case 233: 
					return 177;
				case 234: 
					return 340;
				case 235: 
					return 346;
				case 236: 
					return 179;
				case 237: 
					return 178;
				case 238: 
					return 402;
				case 239: 
					return 350;
				case 240: 
					return 262;
				case 241: 
					return 180;
				case 242: 
					return 181;
				case 243: 
					return 184;
				case 244: 
					return 182;
				case 245: 
					return 183;
				case 246: 
					return 187;
				case 247: 
					return 188;
				case 248: 
					return 189;
				case 249: 
					return 185;
				case 250: 
					return 198;
				case 251: 
					return 191;
				case 252: 
					return 192;
				case 253: 
					return 154;
				case 254: 
					return 195;
				case 255: 
					return 261;
				case 256: 
					return 199;
				case 257: 
					return 200;
				case 258: 
					return 201;
				case 259: 
					return 204;
				case 260: 
					return 269;
				case 261: 
					return 335;
				case 262: 
					return 205;
				case 263: 
					return 213;
				case 264: 
					return 303;
				case 265: 
					return 304;
				case 266: 
					return 329;
				case 267: 
					return 252;
				case 268: 
					return 209;
				case 269: 
					return 210;
				case 270: 
					return 207;
				case 271: 
					return 208;
				case 272: 
					return 211;
				case 273: 
					return 212;
				case 274: 
					return 214;
				case 275: 
					return 215;
				case 276: 
					return 216;
				case 277: 
					return 225;
				case 278: 
					return 217;
				case 279: 
					return 218;
				case 280: 
					return 219;
				case 281: 
					return 231;
				case 282: 
					return 232;
				case 283: 
					return 404;
				case 284: 
					return 405;
				case 285: 
					return 233;
				case 286: 
					return 234;
				case 287: 
					return 235;
				case 288: 
					return 236;
				case 289: 
					return 237;
				case 290: 
					return 238;
				case 291: 
					return 239;
				case 292: 
					return 241;
				case 293: 
					return 242;
				case 294: 
					return 243;
				case 295: 
					return 244;
				case 296: 
					return 248;
				case 297: 
					return 247;
				case 298: 
					return 249;
				case 299: 
					return 251;
				case 300: 
					return 255;
				case 301: 
					return 253;
				case 302: 
					return 229;
				case 303: 
					return 259;
				case 304: 
					return 258;
				case 305: 
					return 264;
				case 306: 
					return 263;
				case 307: 
					return 272;
				case 308: 
					return 265;
				case 309: 
					return 273;
				case 310: 
					return 274;
				case 311: 
					return 275;
				case 312: 
					return 276;
				case 313: 
					return 282;
				case 314: 
					return 283;
				case 315: 
					return 277;
				case 316: 
					return 302;
				case 317: 
					return 305;
				case 318: 
					return 307;
				case 319: 
					return 308;
				case 320: 
					return 310;
				case 321: 
					return 311;
				case 322: 
					return 316;
				case 323: 
					return 317;
				case 324: 
					return 318;
				case 325: 
					return 319;
				case 326: 
					return 320;
				case 327: 
					return 321;
				case 328: 
					return 355;
				case 329: 
					return 391;
				case 330: 
					return 352;
				case 331: 
					return 351;
				case 332: 
					return 322;
				case 333: 
					return 323;
				case 334: 
					return 324;
				case 335: 
					return 325;
				case 336: 
					return 326;
				case 337: 
					return 327;
				case 338: 
					return 328;
				case 339: 
					return 168;
				case 340: 
					return 372;
				case 341: 
					return 373;
				case 342: 
					return 378;
				case 343: 
					return 331;
				case 344: 
					return 332;
				case 345: 
					return 333;
				case 346: 
					return 334;
				case 347: 
					return 337;
				case 348: 
					return 336;
				case 349: 
					return 369;
				case 350: 
					return 370;
				case 351: 
					return 371;
				case 352: 
					return 353;
				case 353: 
					return 356;
				case 354: 
					return 357;
				case 355: 
					return 358;
				case 356: 
					return 359;
				case 357: 
					return 360;
				case 358: 
					return 361;
				case 359: 
					return 362;
				case 360: 
					return 363;
				case 361: 
					return 364;
				case 362: 
					return 365;
				case 363: 
					return 366;
				case 364: 
					return 400;
				case 365: 
					return 367;
				case 366: 
					return 368;
				case 367: 
					return 380;
				case 368: 
					return 381;
				case 369: 
					return 384;
				case 370: 
					return 385;
				case 371: 
					return 388;
				case 372: 
					return 389;
				case 373: 
					return 390;
				case 374: 
					return 386;
				case 375: 
					return 387;
				case 376: 
					return 401;
				case 377: 
					return 406;
				case 378: 
					return 409;
			}
		}
	}
	return -1;
};
$asm02.MS.Internal.CoreTypes.GetCoreWrapper = function (typeId) {
	switch (typeId) {
		case 16: 
			return new System.Windows.Media.TransformGroup();
		case 17: 
			return new System.Windows.Media.RotateTransform();
		case 18: 
			return new System.Windows.Media.ScaleTransform();
		case 19: 
			return new System.Windows.Media.SkewTransform();
		case 20: 
			return new System.Windows.Media.TranslateTransform();
		case 21: 
		case 30: 
		case 33: 
		case 36: 
		case 39: 
		case 40: 
		case 41: 
		case 47: 
		case 48: 
		case 49: 
		case 50: 
		case 51: 
		case 52: 
		case 54: 
		case 67: 
		case 68: 
		case 69: 
		case 73: 
		case 78: 
		case 83: 
		case 88: 
		case 89: 
		case 90: 
		case 99: 
		case 100: 
		case 102: 
		case 104: 
		case 105: 
		case 106: 
		case 107: 
		case 108: 
		case 112: 
		case 113: 
		case 114: 
		case 115: 
		case 118: 
		case 119: 
		case 120: 
		case 121: 
		case 123: 
		case 129: 
		case 130: 
		case 132: 
		case 133: 
		case 138: 
		case 142: 
		case 143: 
		case 144: 
		case 145: 
		case 146: 
		case 149: 
		case 150: 
		case 154: 
		case 155: 
		case 158: 
		case 159: 
		case 160: 
		case 164: 
		case 165: 
		case 166: 
		case 167: 
		case 168: 
		case 169: 
		case 170: 
		case 172: 
		case 173: 
		case 174: 
		case 175: 
		case 176: 
		case 178: 
		case 185: 
		case 186: 
		case 187: 
		case 191: 
		case 193: 
		case 195: 
		case 196: 
		case 197: 
		case 198: 
		case 199: 
		case 202: 
		case 203: 
		case 204: 
		case 206: 
		case 212: 
		case 214: 
		case 215: 
		case 217: 
		case 221: 
		case 224: 
		case 226: 
		case 230: 
		case 231: 
		case 232: 
		case 233: 
		case 234: 
		case 235: 
		case 236: 
		case 237: 
		case 238: 
		case 239: 
		case 240: 
		case 241: 
		case 242: 
		case 243: 
		case 244: 
		case 245: 
		case 246: 
		case 247: 
		case 248: 
		case 249: 
		case 250: 
		case 251: 
		case 253: 
		case 254: 
		case 255: 
		case 256: 
		case 259: 
		case 260: 
		case 261: 
		case 263: 
		case 264: 
		case 265: 
		case 266: 
		case 267: 
		case 268: 
		case 269: 
		case 270: 
		case 271: 
		case 272: 
		case 273: 
		case 281: 
		case 282: 
		case 283: 
		case 284: 
		case 296: 
		case 300: 
		case 301: 
		case 302: 
		case 303: 
		case 306: 
		case 307: 
		case 308: 
		case 313: 
		case 314: 
		case 315: 
		case 319: 
		case 320: 
		case 327: 
		case 330: 
		case 334: 
		case 336: 
		case 337: 
		case 338: 
		case 339: 
		case 341: 
		case 342: 
		case 343: 
		case 348: 
		case 350: 
		case 352: 
		case 354: 
		case 355: 
		case 362: 
		case 363: 
		case 364: 
		case 366: 
		case 367: 
		case 368: 
		case 369: 
		case 370: 
		case 374: 
		case 376: 
		case 377: 
		case 379: 
		case 380: 
		case 382: 
		case 383: 
		case 384: 
			break;
		case 22: 
			return new System.Windows.Media.LineSegment();
		case 23: 
			return new System.Windows.Media.BezierSegment();
		case 24: 
			return new System.Windows.Media.QuadraticBezierSegment();
		case 25: 
			return new System.Windows.Media.ArcSegment();
		case 26: 
			return new System.Windows.Media.PolyLineSegment();
		case 27: 
			return new System.Windows.Media.PolyBezierSegment();
		case 28: 
			return new System.Windows.Media.PolyQuadraticBezierSegment();
		case 29: 
			return new System.Windows.Media.PathFigure();
		case 31: 
			return new System.Windows.Media.PathGeometry();
		case 32: 
			return new System.Windows.Media.GeometryGroup();
		case 34: 
			return JSIL.New(System.Windows.Media.SolidColorBrush, "_ctor$0", []);
		case 35: 
			return new System.Windows.Media.GradientStop();
		case 37: 
			return JSIL.New(System.Windows.Media.LinearGradientBrush, "_ctor$0", []);
		case 38: 
			return JSIL.New(System.Windows.Media.RadialGradientBrush, "_ctor$0", []);
		case 42: 
			return JSIL.New(System.Windows.Controls.Canvas, "_ctor$0", []);
		case 43: 
			return new System.Windows.Media.Animation.TimelineCollection();
		case 44: 
			return JSIL.New(System.Windows.Shapes.Path, "_ctor$0", []);
		case 45: 
			return new System.Windows.Media.Animation.BeginStoryboard();
		case 46: 
			return new System.Windows.Media.Animation.Storyboard();
		case 53: 
			return new System.Windows.Media.Animation.DoubleAnimation();
		case 55: 
			return new System.Windows.EventTrigger();
		case 56: 
			return new System.Windows.TriggerCollection();
		case 57: 
			return new System.Windows.Media.DoubleCollection();
		case 58: 
			return new System.Windows.Media.PointCollection();
		case 59: 
			return new System.Windows.Media.TransformCollection();
		case 60: 
			return new System.Windows.Media.PathSegmentCollection();
		case 61: 
			return new System.Windows.Media.PathFigureCollection();
		case 62: 
			return new System.Windows.Media.GeometryCollection();
		case 63: 
			return new System.Windows.Media.GradientStopCollection();
		case 64: 
			return new System.Windows.TriggerActionCollection();
		case 65: 
			return new System.Windows.Media.Animation.ColorAnimation();
		case 66: 
			return new System.Windows.Documents.Glyphs();
		case 70: 
			return new System.Windows.Media.Animation.KeySpline();
		case 71: 
			return new System.Windows.Media.Animation.PointKeyFrameCollection();
		case 72: 
			return new System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames();
		case 74: 
			return new System.Windows.Media.Animation.DiscreteDoubleKeyFrame();
		case 75: 
			return new System.Windows.Media.Animation.LinearDoubleKeyFrame();
		case 76: 
			return new System.Windows.Media.Animation.SplineDoubleKeyFrame();
		case 77: 
			return new System.Windows.Media.Animation.ColorAnimationUsingKeyFrames();
		case 79: 
			return new System.Windows.Media.Animation.DiscreteColorKeyFrame();
		case 80: 
			return new System.Windows.Media.Animation.LinearColorKeyFrame();
		case 81: 
			return new System.Windows.Media.Animation.SplineColorKeyFrame();
		case 82: 
			return new System.Windows.Media.Animation.PointAnimationUsingKeyFrames();
		case 84: 
			return new System.Windows.Media.Animation.DiscretePointKeyFrame();
		case 85: 
			return new System.Windows.Media.Animation.LinearPointKeyFrame();
		case 86: 
			return new System.Windows.Media.Animation.SplinePointKeyFrame();
		case 87: 
			return new System.Windows.Media.Animation.PointAnimation();
		case 91: 
			return new System.Windows.Shapes.Ellipse();
		case 92: 
			return new System.Windows.Shapes.Line();
		case 93: 
			return new System.Windows.Shapes.Polygon();
		case 94: 
			return new System.Windows.Shapes.Polyline();
		case 95: 
			return new System.Windows.Shapes.Rectangle();
		case 96: 
			return new System.Windows.Media.EllipseGeometry();
		case 97: 
			return new System.Windows.Media.RectangleGeometry();
		case 98: 
			return new System.Windows.Media.LineGeometry();
		case 101: 
			return new System.Windows.Media.MatrixTransform();
		case 103: 
			return new System.Windows.Media.ImageBrush();
		case 109: 
			return new System.Windows.Controls.TextBlock();
		case 110: 
			return new System.Windows.Documents.Run();
		case 111: 
			return new System.Windows.Documents.LineBreak();
		case 116: 
			return new System.Windows.Controls.MediaElement();
		case 117: 
			return new System.Windows.Controls.Image();
		case 122: 
			return new System.Windows.Controls.UIElementCollection();
		case 124: 
			return new System.Windows.Documents.InlineCollection();
		case 125: 
			return JSIL.New(System.Windows.Documents.Span, "_ctor$0", []);
		case 126: 
			return new System.Windows.Documents.Underline();
		case 127: 
			return new System.Windows.Documents.Italic();
		case 128: 
			return new System.Windows.Documents.Bold();
		case 131: 
			return new $asm02.MS.Internal.Downloader();
		case 134: 
			return new System.Windows.Media.VideoBrush();
		case 135: 
			return new System.Windows.Controls.InkPresenter();
		case 136: 
			return JSIL.New(System.Windows.Ink.Stroke, "_ctor$0", []);
		case 137: 
			return new System.Windows.Ink.StrokeCollection();
		case 139: 
			return new System.Windows.Input.StylusPointCollection();
		case 140: 
			return new $asm02.MS.Internal.StylusInfo();
		case 141: 
			return new System.Windows.Ink.DrawingAttributes();
		case 147: 
			return new System.Windows.Media.TimelineMarker();
		case 148: 
			return new System.Windows.Media.TimelineMarkerCollection();
		case 151: 
			return new System.Windows.ResourceDictionary();
		case 152: 
			return new $asm02.MS.Internal.MediaAttribute();
		case 153: 
			return new $asm02.MS.Internal.MediaAttributeCollection();
		case 156: 
			return new System.Windows.Media.Animation.ColorKeyFrameCollection();
		case 157: 
			return new System.Windows.Media.Animation.DoubleKeyFrameCollection();
		case 161: 
			return new System.Windows.Deployment();
		case 162: 
			return new System.Windows.AssemblyPart();
		case 163: 
			return new System.Windows.AssemblyPartCollection();
		case 171: 
			return JSIL.New(System.Windows.Controls.StackPanel, "_ctor$0", []);
		case 177: 
			return JSIL.New(System.Windows.Controls.TextBox, "_ctor$0", []);
		case 179: 
			return new $asm02.MS.Internal.TextBoxView();
		case 180: 
			return new System.Windows.Controls.RowDefinition();
		case 181: 
			return new System.Windows.Controls.ColumnDefinition();
		case 182: 
			return new System.Windows.Controls.RowDefinitionCollection();
		case 183: 
			return new System.Windows.Controls.ColumnDefinitionCollection();
		case 184: 
			return JSIL.New(System.Windows.Controls.Grid, "_ctor$0", []);
		case 188: 
			return new System.Windows.Controls.ControlTemplate();
		case 189: 
			return JSIL.New(System.Windows.Controls.UserControl, "_ctor$0", []);
		case 190: 
			return new System.Windows.Controls.MultiScaleImage();
		case 192: 
			return JSIL.New(System.Windows.DataTemplate, "_ctor$0", []);
		case 194: 
			return JSIL.New(System.Windows.Media.Imaging.BitmapImage, "_ctor$0", []);
		case 200: 
			return new System.Windows.Controls.ItemCollection();
		case 201: 
			return JSIL.New(System.Windows.Controls.ItemsControl, "_ctor$0", []);
		case 205: 
			return new System.Windows.Controls.Primitives.Popup();
		case 207: 
			return new System.Windows.Controls.ItemsPanelTemplate();
		case 208: 
			return new System.Windows.Controls.ItemsPresenter();
		case 209: 
			return JSIL.New(System.Windows.Controls.ContentPresenter, "_ctor$0", []);
		case 210: 
			return new $asm02.MS.Internal.DisplayMemberTemplate();
		case 211: 
			return new $asm02.MS.Internal.TypeProxy();
		case 213: 
			return new System.Windows.Controls.Border();
		case 216: 
			return JSIL.New($asm02.MS.Internal.ManagedObjectReference, "_ctor$0", []);
		case 218: 
			return JSIL.New(System.Windows.Setter, "_ctor$0", []);
		case 219: 
			return JSIL.New(System.Windows.SetterBaseCollection, "_ctor$0", []);
		case 220: 
			return new System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames();
		case 222: 
			return new System.Windows.Media.Animation.DiscreteObjectKeyFrame();
		case 223: 
			return new System.Windows.Media.Animation.ObjectKeyFrameCollection();
		case 225: 
			return JSIL.New(System.Windows.Style, "_ctor$0", []);
		case 227: 
			return new System.Windows.Controls.MultiScaleSubImage();
		case 228: 
			return new $asm02.MS.Internal.MultiScaleSubImageCollection();
		case 229: 
			return new $asm02.MS.Internal.DependencyPropertyProxy();
		case 252: 
			return JSIL.New(System.Windows.Controls.ContentControl, "_ctor$0", []);
		case 257: 
			return JSIL.New(System.Windows.Media.DeepZoomImageTileSource, "_ctor$0", []);
		case 258: 
			return new System.Windows.VisualState();
		case 262: 
			return new System.Windows.Controls.PasswordBox();
		case 274: 
			return new System.Windows.Media.BitmapCache();
		case 275: 
			return new $asm02.MS.Internal.GlyphTypeface();
		case 276: 
			return new $asm02.MS.Internal.GlyphTypefaceCollection();
		case 277: 
			return new $asm02.MS.Internal.ResourceDictionaryCollection();
		case 278: 
			return new System.Windows.ExtensionPart();
		case 279: 
			return new System.Windows.ExternalPartCollection();
		case 280: 
			return JSIL.New(System.Windows.ExternalPart, "_ctor$0", []);
		case 285: 
			return JSIL.New(System.Windows.Media.Animation.CircleEase, "_ctor$0", []);
		case 286: 
			return JSIL.New(System.Windows.Media.Animation.BackEase, "_ctor$0", []);
		case 287: 
			return JSIL.New(System.Windows.Media.Animation.ExponentialEase, "_ctor$0", []);
		case 288: 
			return JSIL.New(System.Windows.Media.Animation.PowerEase, "_ctor$0", []);
		case 289: 
			return JSIL.New(System.Windows.Media.Animation.QuadraticEase, "_ctor$0", []);
		case 290: 
			return JSIL.New(System.Windows.Media.Animation.CubicEase, "_ctor$0", []);
		case 291: 
			return JSIL.New(System.Windows.Media.Animation.QuarticEase, "_ctor$0", []);
		case 292: 
			return JSIL.New(System.Windows.Media.Animation.QuinticEase, "_ctor$0", []);
		case 293: 
			return JSIL.New(System.Windows.Media.Animation.ElasticEase, "_ctor$0", []);
		case 294: 
			return JSIL.New(System.Windows.Media.Animation.BounceEase, "_ctor$0", []);
		case 295: 
			return JSIL.New(System.Windows.Media.Animation.SineEase, "_ctor$0", []);
		case 297: 
			return new System.Windows.Media.Animation.EasingDoubleKeyFrame();
		case 298: 
			return new System.Windows.Media.Animation.EasingColorKeyFrame();
		case 299: 
			return new System.Windows.Media.Animation.EasingPointKeyFrame();
		case 304: 
			return new System.Windows.Media.PlaneProjection();
		case 305: 
			return new System.Windows.Media.Effects.PixelShader();
		case 309: 
			return new System.Windows.Media.ImplicitInputBrush();
		case 310: 
			return new System.Windows.Media.Effects.BlurEffect();
		case 311: 
			return new System.Windows.Media.Effects.DropShadowEffect();
		case 312: 
			return new $asm02.MS.Internal.InternalTransform();
		case 316: 
			return new System.Windows.OutOfBrowserSettings();
		case 317: 
			return new System.Windows.IconCollection();
		case 318: 
			return new System.Windows.Icon();
		case 321: 
			return new System.Windows.WindowSettings();
		case 322: 
			return new System.Windows.VisualStateGroup();
		case 323: 
			return JSIL.New(System.Windows.VisualTransition, "_ctor$0", []);
		case 324: 
			return new $asm02.MS.Internal.VisualStateGroupCollection();
		case 325: 
			return new $asm02.MS.Internal.VisualTransitionCollection();
		case 326: 
			return new $asm02.MS.Internal.VisualStateCollection();
		case 328: 
			return new System.Windows.Data.CollectionViewSource();
		case 329: 
			return new System.Windows.Media.Matrix3DProjection();
		case 331: 
			return new System.Windows.Input.TouchPointCollection();
		case 332: 
			return new System.Windows.Input.TouchDevice();
		case 333: 
			return new System.Windows.Input.TouchPoint();
		case 335: 
			return new System.Windows.Controls.Viewbox();
		case 340: 
			return JSIL.New(System.Windows.Controls.RichTextBox, "_ctor$0", []);
		case 344: 
			return new System.Windows.Documents.Paragraph();
		case 345: 
			return new System.Windows.Documents.BlockCollection();
		case 346: 
			return new $asm02.MS.Internal.RichTextBoxView();
		case 347: 
			return new System.Windows.Documents.Hyperlink();
		case 349: 
			return new System.Windows.Documents.InlineUIContainer();
		case 351: 
			return new System.Windows.SecuritySettings();
		case 353: 
			return new System.Windows.Window();
		case 356: 
			return new System.Windows.Media.VideoCaptureDeviceCollection();
		case 357: 
			return new System.Windows.Media.AudioCaptureDeviceCollection();
		case 358: 
			return JSIL.New(System.Windows.Media.CaptureDevice, "_ctor$0", []);
		case 359: 
			return new System.Windows.Media.VideoCaptureDevice();
		case 360: 
			return new System.Windows.Media.AudioCaptureDevice();
		case 361: 
			return new System.Windows.Media.CaptureSource();
		case 365: 
			return JSIL.New(System.Windows.Printing.PrintDocument, "_ctor$0", []);
		case 371: 
			return new $asm02.System.Windows.DOCollection();
		case 372: 
			return new System.Windows.Controls.WebBrowser();
		case 373: 
			return new System.Windows.Controls.WebBrowserBrush();
		case 375: 
			return new System.Windows.Media.CompositeTransform();
		case 378: 
			return new System.Windows.NotificationWindow();
		case 381: 
			return new $asm02.MS.Internal.TemplateContent();
		case 385: 
			return JSIL.New(System.Windows.VisualStateManager, "_ctor$0", []);
		default: 
			if (typeId === 403) {
				return new System.Windows.Documents.Section();
			}
			if (typeId === 407) {
				return new $asm02.MS.Internal.TextPointerWrapper();
			}
			break;
	}
	return null;
};
$asm02.MS.Internal.CoreTypes.GetCoreType = function (typeId) {
	if (!((typeId > 0) && (typeId <= 409))) {
		return null;
	}
	return $asm02.MS.Internal.CoreTypes._typeTable[typeId];
};
$asm02.MS.Internal.CoreTypes.GetCoreTypeId = function (type) {
	if (type !== null) {
		var module = type.Module;
		if (!(!System.Object.ReferenceEquals($asm02.MS.Internal.CoreTypes.mscorlibModule, module) && !System.Object.ReferenceEquals($asm02.MS.Internal.CoreTypes.systemModule, module))) {
			return $asm02.MS.Internal.CoreTypes.CoreTypeIdFromString(type.FullName);
		}
	}
	return -1;
};
Object.defineProperty($asm02.MS.Internal.CoreTypes, "FontFamilyTypeID", {
		"value": 112}
);
$asm02.MS.Internal.CoreTypes._typeTable = null;
$asm02.MS.Internal.CoreTypes.mscorlibModule = null;
$asm02.MS.Internal.CoreTypes.systemModule = null;
$asm02.MS.Internal.CoreTypes._cctor = function () {
	var array = JSIL.Array.New(System.Type, 410);
	array[1] = System.Windows.DependencyObject;
	array[2] = System.Windows.PresentationFrameworkCollection$b1;
	array[3] = System.Double;
	array[4] = System.Windows.Point;
	array[5] = System.Windows.Rect;
	array[6] = System.Windows.Media.Color;
	array[8] = System.Boolean;
	array[9] = System.Windows.Media.FillRule;
	array[10] = System.Windows.Media.SweepDirection;
	array[11] = System.Windows.Media.ColorInterpolationMode;
	array[12] = System.Windows.Media.GradientSpreadMethod;
	array[13] = System.Windows.Media.BrushMappingMode;
	array[14] = System.Windows.Media.Animation.FillBehavior;
	array[15] = System.Windows.Media.Transform;
	array[16] = System.Windows.Media.TransformGroup;
	array[17] = System.Windows.Media.RotateTransform;
	array[18] = System.Windows.Media.ScaleTransform;
	array[19] = System.Windows.Media.SkewTransform;
	array[20] = System.Windows.Media.TranslateTransform;
	array[21] = System.Windows.Media.PathSegment;
	array[22] = System.Windows.Media.LineSegment;
	array[23] = System.Windows.Media.BezierSegment;
	array[24] = System.Windows.Media.QuadraticBezierSegment;
	array[25] = System.Windows.Media.ArcSegment;
	array[26] = System.Windows.Media.PolyLineSegment;
	array[27] = System.Windows.Media.PolyBezierSegment;
	array[28] = System.Windows.Media.PolyQuadraticBezierSegment;
	array[29] = System.Windows.Media.PathFigure;
	array[30] = System.Windows.Media.Geometry;
	array[31] = System.Windows.Media.PathGeometry;
	array[32] = System.Windows.Media.GeometryGroup;
	array[33] = System.Windows.Media.Brush;
	array[34] = System.Windows.Media.SolidColorBrush;
	array[35] = System.Windows.Media.GradientStop;
	array[36] = System.Windows.Media.GradientBrush;
	array[37] = System.Windows.Media.LinearGradientBrush;
	array[38] = System.Windows.Media.RadialGradientBrush;
	array[40] = System.Windows.UIElement;
	array[41] = System.Windows.Shapes.Shape;
	array[42] = System.Windows.Controls.Canvas;
	array[43] = System.Windows.Media.Animation.TimelineCollection;
	array[44] = System.Windows.Shapes.Path;
	array[45] = System.Windows.Media.Animation.BeginStoryboard;
	array[46] = System.Windows.Media.Animation.Storyboard;
	array[47] = System.Windows.Media.Animation.Timeline;
	array[51] = System.TimeSpan;
	array[52] = System.Windows.Duration;
	array[53] = System.Windows.Media.Animation.DoubleAnimation;
	array[54] = System.String;
	array[55] = System.Windows.EventTrigger;
	array[56] = System.Windows.TriggerCollection;
	array[57] = System.Windows.Media.DoubleCollection;
	array[58] = System.Windows.Media.PointCollection;
	array[59] = System.Windows.Media.TransformCollection;
	array[60] = System.Windows.Media.PathSegmentCollection;
	array[61] = System.Windows.Media.PathFigureCollection;
	array[62] = System.Windows.Media.GeometryCollection;
	array[63] = System.Windows.Media.GradientStopCollection;
	array[64] = System.Windows.TriggerActionCollection;
	array[65] = System.Windows.Media.Animation.ColorAnimation;
	array[66] = System.Windows.Documents.Glyphs;
	array[67] = System.Windows.FrameworkElement;
	array[69] = System.Windows.Media.Animation.KeyTime;
	array[70] = System.Windows.Media.Animation.KeySpline;
	array[71] = System.Windows.Media.Animation.PointKeyFrameCollection;
	array[72] = System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames;
	array[73] = System.Windows.Media.Animation.DoubleKeyFrame;
	array[74] = System.Windows.Media.Animation.DiscreteDoubleKeyFrame;
	array[75] = System.Windows.Media.Animation.LinearDoubleKeyFrame;
	array[76] = System.Windows.Media.Animation.SplineDoubleKeyFrame;
	array[77] = System.Windows.Media.Animation.ColorAnimationUsingKeyFrames;
	array[78] = System.Windows.Media.Animation.ColorKeyFrame;
	array[79] = System.Windows.Media.Animation.DiscreteColorKeyFrame;
	array[80] = System.Windows.Media.Animation.LinearColorKeyFrame;
	array[81] = System.Windows.Media.Animation.SplineColorKeyFrame;
	array[82] = System.Windows.Media.Animation.PointAnimationUsingKeyFrames;
	array[83] = System.Windows.Media.Animation.PointKeyFrame;
	array[84] = System.Windows.Media.Animation.DiscretePointKeyFrame;
	array[85] = System.Windows.Media.Animation.LinearPointKeyFrame;
	array[86] = System.Windows.Media.Animation.SplinePointKeyFrame;
	array[87] = System.Windows.Media.Animation.PointAnimation;
	array[89] = System.Windows.Media.PenLineCap;
	array[90] = System.Windows.Media.PenLineJoin;
	array[91] = System.Windows.Shapes.Ellipse;
	array[92] = System.Windows.Shapes.Line;
	array[93] = System.Windows.Shapes.Polygon;
	array[94] = System.Windows.Shapes.Polyline;
	array[95] = System.Windows.Shapes.Rectangle;
	array[96] = System.Windows.Media.EllipseGeometry;
	array[97] = System.Windows.Media.RectangleGeometry;
	array[98] = System.Windows.Media.LineGeometry;
	array[99] = System.Windows.Media.Animation.RepeatBehavior;
	array[100] = System.Windows.Media.Matrix;
	array[101] = System.Windows.Media.MatrixTransform;
	array[102] = System.Windows.Media.TileBrush;
	array[103] = System.Windows.Media.ImageBrush;
	array[104] = System.Windows.Media.AlignmentX;
	array[105] = System.Windows.Media.AlignmentY;
	array[106] = System.Windows.Media.Stretch;
	array[107] = System.Windows.Input.MouseEventArgs;
	array[108] = System.Windows.Input.MouseWheelEventArgs;
	array[109] = System.Windows.Controls.TextBlock;
	array[110] = System.Windows.Documents.Run;
	array[111] = System.Windows.Documents.LineBreak;
	array[112] = System.Windows.Media.FontFamily;
	array[113] = System.Windows.TextWrapping;
	array[114] = System.Windows.Controls.Panel;
	array[116] = System.Windows.Controls.MediaElement;
	array[117] = System.Windows.Controls.Image;
	array[118] = System.EventArgs;
	array[119] = System.Windows.FontWeight;
	array[120] = System.Windows.FontStyle;
	array[121] = System.Windows.FontStretch;
	array[122] = System.Windows.Controls.UIElementCollection;
	array[123] = System.Windows.Documents.Inline;
	array[124] = System.Windows.Documents.InlineCollection;
	array[125] = System.Windows.Documents.Span;
	array[126] = System.Windows.Documents.Underline;
	array[127] = System.Windows.Documents.Italic;
	array[128] = System.Windows.Documents.Bold;
	array[129] = System.Windows.Input.KeyEventArgs;
	array[130] = System.Windows.Input.Cursor;
	array[131] = $asm02.MS.Internal.Downloader;
	array[132] = System.Windows.Visibility;
	array[133] = System.Int32;
	array[134] = System.Windows.Media.VideoBrush;
	array[135] = System.Windows.Controls.InkPresenter;
	array[136] = System.Windows.Ink.Stroke;
	array[137] = System.Windows.Ink.StrokeCollection;
	array[138] = System.Windows.Input.StylusPoint;
	array[139] = System.Windows.Input.StylusPointCollection;
	array[140] = $asm02.MS.Internal.StylusInfo;
	array[141] = System.Windows.Ink.DrawingAttributes;
	array[142] = System.Windows.Input.TabletDeviceType;
	array[143] = System.Windows.TextDecorationCollection;
	array[144] = $asm02.MS.Internal.ErrorEventArgs;
	array[147] = System.Windows.Media.TimelineMarker;
	array[148] = System.Windows.Media.TimelineMarkerCollection;
	array[149] = System.Windows.Media.TimelineMarkerRoutedEventArgs;
	array[151] = System.Windows.ResourceDictionary;
	array[152] = $asm02.MS.Internal.MediaAttribute;
	array[153] = $asm02.MS.Internal.MediaAttributeCollection;
	array[154] = $asm02.MS.Internal.RuntimeHostEventArgs;
	array[155] = System.Windows.Controls.Control;
	array[156] = System.Windows.Media.Animation.ColorKeyFrameCollection;
	array[157] = System.Windows.Media.Animation.DoubleKeyFrameCollection;
	array[158] = System.Windows.Media.StyleSimulations;
	array[160] = System.Windows.RoutedEventArgs;
	array[161] = System.Windows.Deployment;
	array[162] = System.Windows.AssemblyPart;
	array[163] = System.Windows.AssemblyPartCollection;
	array[166] = System.Windows.Application;
	array[167] = System.Windows.StartupEventArgs;
	array[168] = System.Windows.CheckAndDownloadUpdateCompletedEventArgs;
	array[169] = System.Windows.Input.MouseButtonEventArgs;
	array[170] = System.Windows.Media.MediaElementState;
	array[171] = System.Windows.Controls.StackPanel;
	array[172] = System.Windows.Controls.Orientation;
	array[173] = System.Windows.HorizontalAlignment;
	array[174] = System.Windows.VerticalAlignment;
	array[175] = System.Windows.Thickness;
	array[176] = System.Windows.Media.GeneralTransform;
	array[177] = System.Windows.Controls.TextBox;
	array[178] = System.Windows.Controls.TextChangedEventArgs;
	array[179] = $asm02.MS.Internal.TextBoxView;
	array[180] = System.Windows.Controls.RowDefinition;
	array[181] = System.Windows.Controls.ColumnDefinition;
	array[182] = System.Windows.Controls.RowDefinitionCollection;
	array[183] = System.Windows.Controls.ColumnDefinitionCollection;
	array[184] = System.Windows.Controls.Grid;
	array[185] = System.Windows.GridLength;
	array[186] = System.Windows.TextAlignment;
	array[187] = System.Windows.FrameworkTemplate;
	array[188] = System.Windows.Controls.ControlTemplate;
	array[189] = System.Windows.Controls.UserControl;
	array[190] = System.Windows.Controls.MultiScaleImage;
	array[191] = System.Windows.Input.KeyboardNavigationMode;
	array[192] = System.Windows.DataTemplate;
	array[193] = System.Windows.Media.ImageSource;
	array[194] = System.Windows.Media.Imaging.BitmapImage;
	array[195] = System.Windows.SizeChangedEventArgs;
	array[196] = System.Windows.Size;
	array[197] = $asm02.MS.Internal.InternalWebRequest;
	array[198] = System.Windows.GridUnitType;
	array[200] = System.Windows.Controls.ItemCollection;
	array[201] = System.Windows.Controls.ItemsControl;
	array[202] = System.Windows.Media.Imaging.DownloadProgressEventArgs;
	array[203] = System.Windows.LineStackingStrategy;
	array[204] = $asm02.MS.Internal.CorePropertyChangedEventArgs;
	array[205] = System.Windows.Controls.Primitives.Popup;
	array[206] = System.Windows.Media.Animation.ClockState;
	array[207] = System.Windows.Controls.ItemsPanelTemplate;
	array[208] = System.Windows.Controls.ItemsPresenter;
	array[209] = System.Windows.Controls.ContentPresenter;
	array[210] = $asm02.MS.Internal.DisplayMemberTemplate;
	array[211] = $asm02.MS.Internal.TypeProxy;
	array[212] = System.Windows.Threading.DispatcherTimer;
	array[213] = System.Windows.Controls.Border;
	array[216] = $asm02.MS.Internal.ManagedObjectReference;
	array[217] = System.Windows.SetterBase;
	array[218] = System.Windows.Setter;
	array[219] = System.Windows.SetterBaseCollection;
	array[220] = System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames;
	array[221] = System.Windows.Media.Animation.ObjectKeyFrame;
	array[222] = System.Windows.Media.Animation.DiscreteObjectKeyFrame;
	array[223] = System.Windows.Media.Animation.ObjectKeyFrameCollection;
	array[224] = System.Windows.CornerRadius;
	array[225] = System.Windows.Style;
	array[226] = System.Windows.ExceptionRoutedEventArgs;
	array[227] = System.Windows.Controls.MultiScaleSubImage;
	array[228] = $asm02.MS.Internal.MultiScaleSubImageCollection;
	array[229] = $asm02.MS.Internal.DependencyPropertyProxy;
	array[231] = System.Windows.Automation.Peers.AutomationPeer;
	array[233] = System.Windows.Automation.Peers.AutomationControlType;
	array[234] = System.Windows.Automation.Peers.AutomationEvents;
	array[235] = System.Windows.Automation.Peers.PatternInterface;
	array[236] = System.Windows.Automation.Peers.AutomationOrientation;
	array[237] = System.Windows.Automation.DockPosition;
	array[238] = System.Windows.Automation.ExpandCollapseState;
	array[239] = System.Windows.Automation.ScrollAmount;
	array[241] = System.Windows.Automation.RowOrColumnMajor;
	array[242] = System.Windows.Automation.ToggleState;
	array[243] = System.Windows.Automation.WindowVisualState;
	array[244] = System.Windows.Automation.WindowInteractionState;
	array[248] = System.Windows.Automation.Peers.TextBlockAutomationPeer;
	array[249] = System.Windows.Automation.Peers.FrameworkElementAutomationPeer;
	array[252] = System.Windows.Controls.ContentControl;
	array[253] = System.Windows.CrossDomainAccess;
	array[256] = System.Windows.Media.MultiScaleTileSource;
	array[257] = System.Windows.Media.DeepZoomImageTileSource;
	array[258] = System.Windows.VisualState;
	array[261] = System.Windows.Media.RenderingEventArgs;
	array[262] = System.Windows.Controls.PasswordBox;
	array[263] = System.Windows.Automation.Peers.TextBoxAutomationPeer;
	array[264] = System.Windows.Automation.Peers.PasswordBoxAutomationPeer;
	array[269] = $asm02.MS.Internal.IsEnabledChangedEventArgs;
	array[270] = System.Windows.TriggerBase;
	array[271] = System.Windows.TriggerAction;
	array[272] = System.Windows.Automation.Peers.ImageAutomationPeer;
	array[273] = System.Windows.Media.CacheMode;
	array[274] = System.Windows.Media.BitmapCache;
	array[277] = $asm02.MS.Internal.ResourceDictionaryCollection;
	array[278] = System.Windows.ExtensionPart;
	array[279] = System.Windows.ExternalPartCollection;
	array[280] = System.Windows.ExternalPart;
	array[282] = $asm02.System.Windows.PropertyInvalidationReason;
	array[284] = System.Windows.Media.Animation.EasingFunctionBase;
	array[285] = System.Windows.Media.Animation.CircleEase;
	array[286] = System.Windows.Media.Animation.BackEase;
	array[287] = System.Windows.Media.Animation.ExponentialEase;
	array[288] = System.Windows.Media.Animation.PowerEase;
	array[289] = System.Windows.Media.Animation.QuadraticEase;
	array[290] = System.Windows.Media.Animation.CubicEase;
	array[291] = System.Windows.Media.Animation.QuarticEase;
	array[292] = System.Windows.Media.Animation.QuinticEase;
	array[293] = System.Windows.Media.Animation.ElasticEase;
	array[294] = System.Windows.Media.Animation.BounceEase;
	array[295] = System.Windows.Media.Animation.SineEase;
	array[296] = System.Windows.Media.Animation.EasingMode;
	array[297] = System.Windows.Media.Animation.EasingDoubleKeyFrame;
	array[298] = System.Windows.Media.Animation.EasingColorKeyFrame;
	array[299] = System.Windows.Media.Animation.EasingPointKeyFrame;
	array[300] = System.Windows.Media.LogReadyRoutedEventArgs;
	array[301] = System.Windows.Media.LogSource;
	array[302] = System.Windows.Media.TextHintingMode;
	array[303] = System.Windows.Media.Projection;
	array[304] = System.Windows.Media.PlaneProjection;
	array[305] = System.Windows.Media.Effects.PixelShader;
	array[307] = System.Windows.Media.Effects.Effect;
	array[308] = System.Windows.Media.Effects.ShaderEffect;
	array[309] = System.Windows.Media.ImplicitInputBrush;
	array[310] = System.Windows.Media.Effects.BlurEffect;
	array[311] = System.Windows.Media.Effects.DropShadowEffect;
	array[312] = $asm02.MS.Internal.InternalTransform;
	array[313] = System.Windows.Media.Imaging.BitmapSource;
	array[314] = System.Windows.Media.Imaging.WriteableBitmap;
	array[315] = System.Windows.Media.Imaging.BitmapCreateOptions;
	array[316] = System.Windows.OutOfBrowserSettings;
	array[317] = System.Windows.IconCollection;
	array[318] = System.Windows.Icon;
	array[319] = System.Windows.InstallState;
	array[321] = System.Windows.WindowSettings;
	array[322] = System.Windows.VisualStateGroup;
	array[323] = System.Windows.VisualTransition;
	array[324] = $asm02.MS.Internal.VisualStateGroupCollection;
	array[325] = $asm02.MS.Internal.VisualTransitionCollection;
	array[326] = $asm02.MS.Internal.VisualStateCollection;
	array[327] = System.Windows.VisualStateChangedEventArgs;
	array[328] = System.Windows.Data.CollectionViewSource;
	array[329] = System.Windows.Media.Matrix3DProjection;
	array[330] = System.Windows.Input.TouchFrameEventArgs;
	array[331] = System.Windows.Input.TouchPointCollection;
	array[332] = System.Windows.Input.TouchDevice;
	array[333] = System.Windows.Input.TouchPoint;
	array[334] = System.Windows.Input.TouchAction;
	array[335] = System.Windows.Controls.Viewbox;
	array[336] = System.Windows.Controls.StretchDirection;
	array[337] = System.Windows.FlowDirection;
	array[338] = System.Windows.Media.Media3D.Matrix3D;
	array[340] = System.Windows.Controls.RichTextBox;
	array[341] = System.Windows.Documents.TextElement;
	array[342] = System.Windows.Documents.TextElementCollection$b1;
	array[343] = System.Windows.Documents.Block;
	array[344] = System.Windows.Documents.Paragraph;
	array[345] = System.Windows.Documents.BlockCollection;
	array[346] = $asm02.MS.Internal.RichTextBoxView;
	array[347] = System.Windows.Documents.Hyperlink;
	array[348] = System.Windows.TextTrimming;
	array[349] = System.Windows.Documents.InlineUIContainer;
	array[350] = $asm02.MS.Internal.RequestBringIntoViewEventArgs;
	array[351] = System.Windows.SecuritySettings;
	array[352] = System.Windows.ElevatedPermissions;
	array[353] = System.Windows.Window;
	array[355] = System.Windows.WindowStartupLocation;
	array[356] = System.Windows.Media.VideoCaptureDeviceCollection;
	array[357] = System.Windows.Media.AudioCaptureDeviceCollection;
	array[358] = System.Windows.Media.CaptureDevice;
	array[359] = System.Windows.Media.VideoCaptureDevice;
	array[360] = System.Windows.Media.AudioCaptureDevice;
	array[361] = System.Windows.Media.CaptureSource;
	array[362] = System.Windows.Media.PixelFormatType;
	array[363] = System.Windows.Media.WaveFormatType;
	array[364] = System.Windows.Media.CaptureState;
	array[365] = System.Windows.Printing.PrintDocument;
	array[366] = System.Windows.Printing.PrintPageEventArgs;
	array[367] = System.Windows.Printing.EndPrintEventArgs;
	array[369] = System.Windows.Input.ImeConversionModeValues;
	array[370] = System.Windows.Input.InputMethodState;
	array[371] = $asm02.System.Windows.DOCollection;
	array[372] = System.Windows.Controls.WebBrowser;
	array[373] = System.Windows.Controls.WebBrowserBrush;
	array[374] = System.Windows.Controls.NotifyEventArgs;
	array[375] = System.Windows.Media.CompositeTransform;
	array[377] = System.Windows.DragEventArgs;
	array[378] = System.Windows.NotificationWindow;
	array[381] = $asm02.MS.Internal.TemplateContent;
	array[384] = System.EventHandler;
	array[385] = System.Windows.VisualStateManager;
	array[389] = System.Windows.Input.InputMethod;
	array[390] = System.Windows.Automation.AutomationProperties;
	array[391] = System.Windows.WindowStyle;
	array[393] = System.Windows.MediaFailedRoutedEventArgs;
	array[400] = System.Windows.Printing.BeginPrintEventArgs;
	array[402] = System.Windows.Controls.ContentChangedEventArgs;
	array[403] = System.Windows.Documents.Section;
	array[404] = $asm02.MS.Internal.Automation.TextProvider;
	array[405] = $asm02.MS.Internal.Automation.TextRangeProvider;
	array[407] = $asm02.MS.Internal.TextPointerWrapper;
	array[408] = System.Windows.Navigation.NavigationEventArgs;
	$asm02.MS.Internal.CoreTypes._typeTable = array;
	$asm02.MS.Internal.CoreTypes.mscorlibModule = System.Int32.Module;
	$asm02.MS.Internal.CoreTypes.systemModule = System.Windows.Controls.Button.Module;
};

$asm02.MS.Internal.CoreEventArgs.CreateEventArgs = function (typeIndex, data) {
	if (typeIndex <= 226) {
		if (typeIndex <= 160) {
			if (typeIndex <= 129) {
				switch (typeIndex) {
					case 107: 
						var mouseEventArgs = new System.Windows.Input.MouseEventArgs();
						mouseEventArgs.SetPtr(data);
						return mouseEventArgs;
					case 108: 
						var mouseWheelEventArgs = new System.Windows.Input.MouseWheelEventArgs();
						mouseWheelEventArgs.SetPtr(data);
						return mouseWheelEventArgs;
					default: 
						if (typeIndex === 129) {
							var keyEventArgs = new System.Windows.Input.KeyEventArgs();
							keyEventArgs.SetPtr(data);
							return keyEventArgs;
						}
						break;
				}
			} else {
				if (typeIndex === 144) {
					var errorEventArgs = new $asm02.MS.Internal.ErrorEventArgs();
					errorEventArgs.SetPtr(data);
					return errorEventArgs;
				}
				if (typeIndex === 149) {
					var timelineMarkerRoutedEventArgs = new System.Windows.Media.TimelineMarkerRoutedEventArgs();
					timelineMarkerRoutedEventArgs.SetPtr(data);
					return timelineMarkerRoutedEventArgs;
				}
				if (typeIndex === 160) {
					var routedEventArgs = new System.Windows.RoutedEventArgs();
					routedEventArgs.SetPtr(data);
					return routedEventArgs;
				}
			}
		} else if (typeIndex <= 195) {
			switch (typeIndex) {
				case 167: 
					var startupEventArgs = new System.Windows.StartupEventArgs();
					startupEventArgs.SetPtr(data);
					return startupEventArgs;
				case 168: 
					var checkAndDownloadUpdateCompletedEventArgs = new System.Windows.CheckAndDownloadUpdateCompletedEventArgs();
					checkAndDownloadUpdateCompletedEventArgs.SetPtr(data);
					return checkAndDownloadUpdateCompletedEventArgs;
				case 169: 
					var mouseButtonEventArgs = new System.Windows.Input.MouseButtonEventArgs();
					mouseButtonEventArgs.SetPtr(data);
					return mouseButtonEventArgs;
				default: 
					if (typeIndex === 178) {
						var textChangedEventArgs = new System.Windows.Controls.TextChangedEventArgs();
						textChangedEventArgs.SetPtr(data);
						return textChangedEventArgs;
					}
					if (typeIndex === 195) {
						var sizeChangedEventArgs = new System.Windows.SizeChangedEventArgs();
						sizeChangedEventArgs.SetPtr(data);
						return sizeChangedEventArgs;
					}
					break;
			}
		} else {
			switch (typeIndex) {
				case 202: 
					var downloadProgressEventArgs = new System.Windows.Media.Imaging.DownloadProgressEventArgs();
					downloadProgressEventArgs.SetPtr(data);
					return downloadProgressEventArgs;
				case 203: 
					break;
				case 204: 
					var corePropertyChangedEventArgs = new $asm02.MS.Internal.CorePropertyChangedEventArgs();
					corePropertyChangedEventArgs.SetPtr(data);
					return corePropertyChangedEventArgs;
				default: 
					if (typeIndex === 214) {
						var textCompositionEventArgs = new System.Windows.Input.TextCompositionEventArgs();
						textCompositionEventArgs.SetPtr(data);
						return textCompositionEventArgs;
					}
					if (typeIndex === 226) {
						var exceptionRoutedEventArgs = new System.Windows.ExceptionRoutedEventArgs();
						exceptionRoutedEventArgs.SetPtr(data);
						return exceptionRoutedEventArgs;
					}
					break;
			}
		}
	} else if (typeIndex <= 350) {
		if (typeIndex <= 300) {
			if (typeIndex === 261) {
				var renderingEventArgs = new System.Windows.Media.RenderingEventArgs();
				renderingEventArgs.SetPtr(data);
				return renderingEventArgs;
			}
			if (typeIndex === 269) {
				var isEnabledChangedEventArgs = new $asm02.MS.Internal.IsEnabledChangedEventArgs();
				isEnabledChangedEventArgs.SetPtr(data);
				return isEnabledChangedEventArgs;
			}
			if (typeIndex === 300) {
				var logReadyRoutedEventArgs = new System.Windows.Media.LogReadyRoutedEventArgs();
				logReadyRoutedEventArgs.SetPtr(data);
				return logReadyRoutedEventArgs;
			}
		} else {
			if (typeIndex === 327) {
				var visualStateChangedEventArgs = JSIL.New(System.Windows.VisualStateChangedEventArgs, "_ctor$0", []);
				visualStateChangedEventArgs.SetPtr(data);
				return visualStateChangedEventArgs;
			}
			if (typeIndex === 330) {
				var touchFrameEventArgs = new System.Windows.Input.TouchFrameEventArgs();
				touchFrameEventArgs.SetPtr(data);
				return touchFrameEventArgs;
			}
			if (typeIndex === 350) {
				var requestBringIntoViewEventArgs = new $asm02.MS.Internal.RequestBringIntoViewEventArgs();
				requestBringIntoViewEventArgs.SetPtr(data);
				return requestBringIntoViewEventArgs;
			}
		}
	} else if (typeIndex <= 377) {
		switch (typeIndex) {
			case 366: 
				var printPageEventArgs = new System.Windows.Printing.PrintPageEventArgs();
				printPageEventArgs.SetPtr(data);
				return printPageEventArgs;
			case 367: 
				var endPrintEventArgs = new System.Windows.Printing.EndPrintEventArgs();
				endPrintEventArgs.SetPtr(data);
				return endPrintEventArgs;
			default: 
				if (typeIndex === 374) {
					var notifyEventArgs = new System.Windows.Controls.NotifyEventArgs();
					notifyEventArgs.SetPtr(data);
					return notifyEventArgs;
				}
				if (typeIndex === 377) {
					var dragEventArgs = new System.Windows.DragEventArgs();
					dragEventArgs.SetPtr(data);
					return dragEventArgs;
				}
				break;
		}
	} else {
		if (typeIndex === 393) {
			var mediaFailedRoutedEventArgs = new System.Windows.MediaFailedRoutedEventArgs();
			mediaFailedRoutedEventArgs.SetPtr(data);
			return mediaFailedRoutedEventArgs;
		}
		switch (typeIndex) {
			case 400: 
				var beginPrintEventArgs = new System.Windows.Printing.BeginPrintEventArgs();
				beginPrintEventArgs.SetPtr(data);
				return beginPrintEventArgs;
			case 401: 
				break;
			case 402: 
				var contentChangedEventArgs = new System.Windows.Controls.ContentChangedEventArgs();
				contentChangedEventArgs.SetPtr(data);
				return contentChangedEventArgs;
			default: 
				if (typeIndex === 408) {
					var navigationEventArgs = JSIL.New(System.Windows.Navigation.NavigationEventArgs, "_ctor$1", []);
					navigationEventArgs.SetPtr(data);
					return navigationEventArgs;
				}
				break;
		}
	}
	return null;
};

$asm02.MS.Internal.CoreInvokeHandler.InvokeEventHandler = function (typeIndex, handlerDelegate, sender, args) {
	if (typeIndex <= 226) {
		if (typeIndex <= 160) {
			if (typeIndex <= 129) {
				if (typeIndex === 0) {
					var eventHandler = JSIL.TryCast(handlerDelegate, System.EventHandler);
					eventHandler(sender, JSIL.Cast(args, System.EventArgs));
					return;
				}
				switch (typeIndex) {
					case 107: 
						var mouseEventHandler = JSIL.TryCast(handlerDelegate, System.Windows.Input.MouseEventHandler);
						if (mouseEventHandler === null) {
							var eventHandler2 = JSIL.TryCast(handlerDelegate, System.EventHandler$b1.Of(System.Windows.Input.MouseEventArgs));
							eventHandler2(sender, JSIL.Cast(args, System.Windows.Input.MouseEventArgs));
							return;
						}
						mouseEventHandler(sender, JSIL.Cast(args, System.Windows.Input.MouseEventArgs));
						return;
					case 108: 
						var mouseWheelEventHandler = JSIL.TryCast(handlerDelegate, System.Windows.Input.MouseWheelEventHandler);
						if (mouseWheelEventHandler === null) {
							var eventHandler3 = JSIL.TryCast(handlerDelegate, System.EventHandler$b1.Of(System.Windows.Input.MouseWheelEventArgs));
							eventHandler3(sender, JSIL.Cast(args, System.Windows.Input.MouseWheelEventArgs));
							return;
						}
						mouseWheelEventHandler(sender, JSIL.Cast(args, System.Windows.Input.MouseWheelEventArgs));
						return;
					default: 
						if (typeIndex !== 129) {
							return;
						}
						var keyEventHandler = JSIL.TryCast(handlerDelegate, System.Windows.Input.KeyEventHandler);
						if (keyEventHandler === null) {
							var eventHandler4 = JSIL.TryCast(handlerDelegate, System.EventHandler$b1.Of(System.Windows.Input.KeyEventArgs));
							eventHandler4(sender, JSIL.Cast(args, System.Windows.Input.KeyEventArgs));
							return;
						}
						keyEventHandler(sender, JSIL.Cast(args, System.Windows.Input.KeyEventArgs));
						return;
				}
			} else if (typeIndex !== 144) {
				if (typeIndex !== 149) {
					if (typeIndex !== 160) {
						return;
					}
					var routedEventHandler = JSIL.TryCast(handlerDelegate, System.Windows.RoutedEventHandler);
					if (routedEventHandler === null) {
						var eventHandler5 = JSIL.TryCast(handlerDelegate, System.EventHandler$b1.Of(System.Windows.RoutedEventArgs));
						eventHandler5(sender, JSIL.Cast(args, System.Windows.RoutedEventArgs));
						return;
					}
					routedEventHandler(sender, JSIL.Cast(args, System.Windows.RoutedEventArgs));
					return;
				} else {
					var timelineMarkerRoutedEventHandler = JSIL.TryCast(handlerDelegate, System.Windows.Media.TimelineMarkerRoutedEventHandler);
					if (timelineMarkerRoutedEventHandler === null) {
						var eventHandler6 = JSIL.TryCast(handlerDelegate, System.EventHandler$b1.Of(System.Windows.Media.TimelineMarkerRoutedEventArgs));
						eventHandler6(sender, JSIL.Cast(args, System.Windows.Media.TimelineMarkerRoutedEventArgs));
						return;
					}
					timelineMarkerRoutedEventHandler(sender, JSIL.Cast(args, System.Windows.Media.TimelineMarkerRoutedEventArgs));
					return;
				}
			} else {
				var errorEventHandler = JSIL.TryCast(handlerDelegate, $asm02.MS.Internal.ErrorEventHandler);
				if (errorEventHandler === null) {
					var eventHandler7 = JSIL.TryCast(handlerDelegate, System.EventHandler$b1.Of($asm02.MS.Internal.ErrorEventArgs));
					eventHandler7(sender, JSIL.Cast(args, $asm02.MS.Internal.ErrorEventArgs));
					return;
				}
				errorEventHandler(sender, JSIL.Cast(args, $asm02.MS.Internal.ErrorEventArgs));
				return;
			}
		} else if (typeIndex <= 195) {
			switch (typeIndex) {
				case 167: 
					var startupEventHandler = JSIL.TryCast(handlerDelegate, System.Windows.StartupEventHandler);
					if (startupEventHandler === null) {
						var eventHandler8 = JSIL.TryCast(handlerDelegate, System.EventHandler$b1.Of(System.Windows.StartupEventArgs));
						eventHandler8(sender, JSIL.Cast(args, System.Windows.StartupEventArgs));
						return;
					}
					startupEventHandler(sender, JSIL.Cast(args, System.Windows.StartupEventArgs));
					return;
				case 168: 
					var checkAndDownloadUpdateCompletedEventHandler = JSIL.TryCast(handlerDelegate, System.Windows.CheckAndDownloadUpdateCompletedEventHandler);
					if (checkAndDownloadUpdateCompletedEventHandler === null) {
						var eventHandler9 = JSIL.TryCast(handlerDelegate, System.EventHandler$b1.Of(System.Windows.CheckAndDownloadUpdateCompletedEventArgs));
						eventHandler9(sender, JSIL.Cast(args, System.Windows.CheckAndDownloadUpdateCompletedEventArgs));
						return;
					}
					checkAndDownloadUpdateCompletedEventHandler(sender, JSIL.Cast(args, System.Windows.CheckAndDownloadUpdateCompletedEventArgs));
					return;
				case 169: 
					var mouseButtonEventHandler = JSIL.TryCast(handlerDelegate, System.Windows.Input.MouseButtonEventHandler);
					if (mouseButtonEventHandler === null) {
						var eventHandler10 = JSIL.TryCast(handlerDelegate, System.EventHandler$b1.Of(System.Windows.Input.MouseButtonEventArgs));
						eventHandler10(sender, JSIL.Cast(args, System.Windows.Input.MouseButtonEventArgs));
						return;
					}
					mouseButtonEventHandler(sender, JSIL.Cast(args, System.Windows.Input.MouseButtonEventArgs));
					return;
				default: 
					if (typeIndex !== 178) {
						if (typeIndex !== 195) {
							return;
						}
						var sizeChangedEventHandler = JSIL.TryCast(handlerDelegate, System.Windows.SizeChangedEventHandler);
						if (sizeChangedEventHandler === null) {
							var eventHandler11 = JSIL.TryCast(handlerDelegate, System.EventHandler$b1.Of(System.Windows.SizeChangedEventArgs));
							eventHandler11(sender, JSIL.Cast(args, System.Windows.SizeChangedEventArgs));
							return;
						}
						sizeChangedEventHandler(sender, JSIL.Cast(args, System.Windows.SizeChangedEventArgs));
						return;
					} else {
						var textChangedEventHandler = JSIL.TryCast(handlerDelegate, System.Windows.Controls.TextChangedEventHandler);
						if (textChangedEventHandler === null) {
							var eventHandler12 = JSIL.TryCast(handlerDelegate, System.EventHandler$b1.Of(System.Windows.Controls.TextChangedEventArgs));
							eventHandler12(sender, JSIL.Cast(args, System.Windows.Controls.TextChangedEventArgs));
							return;
						}
						textChangedEventHandler(sender, JSIL.Cast(args, System.Windows.Controls.TextChangedEventArgs));
						return;
					}
					break;
			}
		} else {
			switch (typeIndex) {
				case 202: 
					var downloadProgressEventHandler = JSIL.TryCast(handlerDelegate, $asm02.System.Windows.Media.Imaging.DownloadProgressEventHandler);
					if (downloadProgressEventHandler === null) {
						var eventHandler13 = JSIL.TryCast(handlerDelegate, System.EventHandler$b1.Of(System.Windows.Media.Imaging.DownloadProgressEventArgs));
						eventHandler13(sender, JSIL.Cast(args, System.Windows.Media.Imaging.DownloadProgressEventArgs));
						return;
					}
					downloadProgressEventHandler(sender, JSIL.Cast(args, System.Windows.Media.Imaging.DownloadProgressEventArgs));
					return;
				case 203: 
					break;
				case 204: 
					var corePropertyChangedEventHandler = JSIL.TryCast(handlerDelegate, $asm02.MS.Internal.CorePropertyChangedEventHandler);
					if (corePropertyChangedEventHandler === null) {
						var eventHandler14 = JSIL.TryCast(handlerDelegate, System.EventHandler$b1.Of($asm02.MS.Internal.CorePropertyChangedEventArgs));
						eventHandler14(sender, JSIL.Cast(args, $asm02.MS.Internal.CorePropertyChangedEventArgs));
						return;
					}
					corePropertyChangedEventHandler(sender, JSIL.Cast(args, $asm02.MS.Internal.CorePropertyChangedEventArgs));
					return;
				default: 
					if (typeIndex !== 214) {
						if (typeIndex !== 226) {
							return;
						}
						var exceptionRoutedEventHandler = JSIL.TryCast(handlerDelegate, System.Windows.ExceptionRoutedEventHandler);
						if (exceptionRoutedEventHandler === null) {
							var eventHandler15 = JSIL.TryCast(handlerDelegate, System.EventHandler$b1.Of(System.Windows.ExceptionRoutedEventArgs));
							eventHandler15(sender, JSIL.Cast(args, System.Windows.ExceptionRoutedEventArgs));
							return;
						}
						exceptionRoutedEventHandler(sender, JSIL.Cast(args, System.Windows.ExceptionRoutedEventArgs));
						return;
					} else {
						var textCompositionEventHandler = JSIL.TryCast(handlerDelegate, System.Windows.Input.TextCompositionEventHandler);
						if (textCompositionEventHandler === null) {
							var eventHandler16 = JSIL.TryCast(handlerDelegate, System.EventHandler$b1.Of(System.Windows.Input.TextCompositionEventArgs));
							eventHandler16(sender, JSIL.Cast(args, System.Windows.Input.TextCompositionEventArgs));
							return;
						}
						textCompositionEventHandler(sender, JSIL.Cast(args, System.Windows.Input.TextCompositionEventArgs));
						return;
					}
					break;
			}
		}
	} else if (typeIndex <= 350) {
		if (typeIndex <= 300) {
			if (typeIndex !== 261) {
				if (typeIndex !== 269) {
					if (typeIndex !== 300) {
						return;
					}
					var logReadyRoutedEventHandler = JSIL.TryCast(handlerDelegate, System.Windows.Media.LogReadyRoutedEventHandler);
					if (logReadyRoutedEventHandler === null) {
						var eventHandler17 = JSIL.TryCast(handlerDelegate, System.EventHandler$b1.Of(System.Windows.Media.LogReadyRoutedEventArgs));
						eventHandler17(sender, JSIL.Cast(args, System.Windows.Media.LogReadyRoutedEventArgs));
						return;
					}
					logReadyRoutedEventHandler(sender, JSIL.Cast(args, System.Windows.Media.LogReadyRoutedEventArgs));
					return;
				} else {
					var isEnabledChangedEventHandler = JSIL.TryCast(handlerDelegate, $asm02.MS.Internal.IsEnabledChangedEventHandler);
					if (isEnabledChangedEventHandler === null) {
						var eventHandler18 = JSIL.TryCast(handlerDelegate, System.EventHandler$b1.Of($asm02.MS.Internal.IsEnabledChangedEventArgs));
						eventHandler18(sender, JSIL.Cast(args, $asm02.MS.Internal.IsEnabledChangedEventArgs));
						return;
					}
					isEnabledChangedEventHandler(sender, JSIL.Cast(args, $asm02.MS.Internal.IsEnabledChangedEventArgs));
					return;
				}
			} else {
				var renderingEventHandler = JSIL.TryCast(handlerDelegate, $asm02.System.Windows.Media.RenderingEventHandler);
				if (renderingEventHandler === null) {
					var eventHandler19 = JSIL.TryCast(handlerDelegate, System.EventHandler$b1.Of(System.Windows.Media.RenderingEventArgs));
					eventHandler19(sender, JSIL.Cast(args, System.Windows.Media.RenderingEventArgs));
					return;
				}
				renderingEventHandler(sender, JSIL.Cast(args, System.Windows.Media.RenderingEventArgs));
				return;
			}
		} else if (typeIndex !== 327) {
			if (typeIndex !== 330) {
				if (typeIndex !== 350) {
					return;
				}
				var requestBringIntoViewEventHandler = JSIL.TryCast(handlerDelegate, $asm02.MS.Internal.RequestBringIntoViewEventHandler);
				if (requestBringIntoViewEventHandler === null) {
					var eventHandler20 = JSIL.TryCast(handlerDelegate, System.EventHandler$b1.Of($asm02.MS.Internal.RequestBringIntoViewEventArgs));
					eventHandler20(sender, JSIL.Cast(args, $asm02.MS.Internal.RequestBringIntoViewEventArgs));
					return;
				}
				requestBringIntoViewEventHandler(sender, JSIL.Cast(args, $asm02.MS.Internal.RequestBringIntoViewEventArgs));
				return;
			} else {
				var touchFrameEventHandler = JSIL.TryCast(handlerDelegate, System.Windows.Input.TouchFrameEventHandler);
				if (touchFrameEventHandler === null) {
					var eventHandler21 = JSIL.TryCast(handlerDelegate, System.EventHandler$b1.Of(System.Windows.Input.TouchFrameEventArgs));
					eventHandler21(sender, JSIL.Cast(args, System.Windows.Input.TouchFrameEventArgs));
					return;
				}
				touchFrameEventHandler(sender, JSIL.Cast(args, System.Windows.Input.TouchFrameEventArgs));
				return;
			}
		} else {
			var visualStateChangedEventHandler = JSIL.TryCast(handlerDelegate, $asm02.System.Windows.VisualStateChangedEventHandler);
			if (visualStateChangedEventHandler === null) {
				var eventHandler22 = JSIL.TryCast(handlerDelegate, System.EventHandler$b1.Of(System.Windows.VisualStateChangedEventArgs));
				eventHandler22(sender, JSIL.Cast(args, System.Windows.VisualStateChangedEventArgs));
				return;
			}
			visualStateChangedEventHandler(sender, JSIL.Cast(args, System.Windows.VisualStateChangedEventArgs));
			return;
		}
	} else if (typeIndex <= 377) {
		switch (typeIndex) {
			case 366: 
				var printPageEventHandler = JSIL.TryCast(handlerDelegate, $asm02.System.Windows.Printing.PrintPageEventHandler);
				if (printPageEventHandler === null) {
					var eventHandler23 = JSIL.TryCast(handlerDelegate, System.EventHandler$b1.Of(System.Windows.Printing.PrintPageEventArgs));
					eventHandler23(sender, JSIL.Cast(args, System.Windows.Printing.PrintPageEventArgs));
					return;
				}
				printPageEventHandler(sender, JSIL.Cast(args, System.Windows.Printing.PrintPageEventArgs));
				return;
			case 367: 
				var endPrintEventHandler = JSIL.TryCast(handlerDelegate, $asm02.System.Windows.Printing.EndPrintEventHandler);
				if (endPrintEventHandler === null) {
					var eventHandler24 = JSIL.TryCast(handlerDelegate, System.EventHandler$b1.Of(System.Windows.Printing.EndPrintEventArgs));
					eventHandler24(sender, JSIL.Cast(args, System.Windows.Printing.EndPrintEventArgs));
					return;
				}
				endPrintEventHandler(sender, JSIL.Cast(args, System.Windows.Printing.EndPrintEventArgs));
				break;
			default: 
				if (typeIndex === 374) {
					var eventHandler25 = JSIL.TryCast(handlerDelegate, System.EventHandler$b1.Of(System.Windows.Controls.NotifyEventArgs));
					eventHandler25(sender, JSIL.Cast(args, System.Windows.Controls.NotifyEventArgs));
					return;
				}
				if (typeIndex !== 377) {
					return;
				}
				var dragEventHandler = JSIL.TryCast(handlerDelegate, System.Windows.DragEventHandler);
				if (dragEventHandler === null) {
					var eventHandler26 = JSIL.TryCast(handlerDelegate, System.EventHandler$b1.Of(System.Windows.DragEventArgs));
					eventHandler26(sender, JSIL.Cast(args, System.Windows.DragEventArgs));
					return;
				}
				dragEventHandler(sender, JSIL.Cast(args, System.Windows.DragEventArgs));
				return;
		}
	} else if (typeIndex !== 393) {
		switch (typeIndex) {
			case 400: 
				var beginPrintEventHandler = JSIL.TryCast(handlerDelegate, $asm02.System.Windows.Printing.BeginPrintEventHandler);
				if (beginPrintEventHandler === null) {
					var eventHandler27 = JSIL.TryCast(handlerDelegate, System.EventHandler$b1.Of(System.Windows.Printing.BeginPrintEventArgs));
					eventHandler27(sender, JSIL.Cast(args, System.Windows.Printing.BeginPrintEventArgs));
					return;
				}
				beginPrintEventHandler(sender, JSIL.Cast(args, System.Windows.Printing.BeginPrintEventArgs));
				return;
			case 401: 
				break;
			case 402: 
				var contentChangedEventHandler = JSIL.TryCast(handlerDelegate, System.Windows.Controls.ContentChangedEventHandler);
				if (contentChangedEventHandler === null) {
					var eventHandler28 = JSIL.TryCast(handlerDelegate, System.EventHandler$b1.Of(System.Windows.Controls.ContentChangedEventArgs));
					eventHandler28(sender, JSIL.Cast(args, System.Windows.Controls.ContentChangedEventArgs));
					return;
				}
				contentChangedEventHandler(sender, JSIL.Cast(args, System.Windows.Controls.ContentChangedEventArgs));
				return;
			default: 
				if (typeIndex !== 408) {
					return;
				}
				var loadCompletedEventHandler = JSIL.TryCast(handlerDelegate, System.Windows.Navigation.LoadCompletedEventHandler);
				if (loadCompletedEventHandler === null) {
					var eventHandler29 = JSIL.TryCast(handlerDelegate, System.EventHandler$b1.Of(System.Windows.Navigation.NavigationEventArgs));
					eventHandler29(sender, JSIL.Cast(args, System.Windows.Navigation.NavigationEventArgs));
					return;
				}
				loadCompletedEventHandler(sender, JSIL.Cast(args, System.Windows.Navigation.NavigationEventArgs));
				return;
		}
	} else {
		var mediaFailedRoutedEventHandler = JSIL.TryCast(handlerDelegate, System.Windows.MediaFailedRoutedEventHandler);
		if (mediaFailedRoutedEventHandler === null) {
			var eventHandler30 = JSIL.TryCast(handlerDelegate, System.EventHandler$b1.Of(System.Windows.MediaFailedRoutedEventArgs));
			eventHandler30(sender, JSIL.Cast(args, System.Windows.MediaFailedRoutedEventArgs));
			return;
		}
		mediaFailedRoutedEventHandler(sender, JSIL.Cast(args, System.Windows.MediaFailedRoutedEventArgs));
		return;
	}
};

System.Windows.DependencyObject.prototype.IManagedPeerBase_get_NativeObject = function () {
	if (this.m_nativePtr !== null) {
		return this.m_nativePtr.NativeObject;
	}
	if ($asm02.MS.Internal.JoltHelper.m_customCLR) {
		throw JSIL.New(System.ObjectDisposedException, "_ctor$1", ["NativeObject"]);
	}
	throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
};
System.Windows.DependencyObject.prototype.get_NativeObject = function () {
	return this.IManagedPeerBase_NativeObject;
};
System.Windows.DependencyObject.prototype.get_NativeObjectSafeHandle = function () {
	if (this.m_nativePtr !== null) {
		return this.m_nativePtr;
	}
	if ($asm02.MS.Internal.JoltHelper.m_customCLR) {
		throw JSIL.New(System.ObjectDisposedException, "_ctor$1", ["NativeObject"]);
	}
	throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
};
System.Windows.DependencyObject.prototype.get_Dispatcher = function () {
	return System.Windows.Threading.Dispatcher.MainDispatcher;
};
System.Windows.DependencyObject.prototype.get_ManagedReferenceStore = function () {
	var obj = new JSIL.Variable(null);
	if (this._treeChildren === null) {
		this._treeChildren = JSIL.New(System.Collections.Generic.Dictionary$b2.Of($asm02.MS.Internal.IManagedPeerBase, System.Object), "_ctor$1", [1]);
	}
	if (!this._treeChildren.TryGetValue(System.Windows.DependencyObject.PropertyReferencesHolder, /* ref */ obj)) {
		var dictionary = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.UInt32, System.Windows.DependencyObject), "_ctor$1", [1]);
		this._treeChildren.set_Item(System.Windows.DependencyObject.PropertyReferencesHolder, dictionary);
	} else {
		dictionary = JSIL.Cast(obj.value, System.Collections.Generic.Dictionary$b2.Of(System.UInt32, System.Windows.DependencyObject));
	}
	return dictionary;
};
System.Windows.DependencyObject.prototype._ctor$0 = function () {
	this._ctor$1(1);
};
System.Windows.DependencyObject.prototype._ctor$1 = function (nativeTypeIndex) {
	this._ctor$2(nativeTypeIndex, System.IntPtr.Zero);
};
System.Windows.DependencyObject.prototype._ctor$2 = function (nativeTypeIndex, constructDO) {
	System.Object.prototype._ctor.call(this);
	$asm02.MS.Internal.XcpImports.CheckThread();
	this.m_nativePtr = new $asm02.MS.Internal.NativeObjectSafeHandle();
	var intPtr = System.IntPtr.Zero;
	if (System.IntPtr.op_Inequality(System.Windows.DependencyObject.StaticNativePointer, System.IntPtr.Zero)) {
		intPtr = System.Windows.DependencyObject.StaticNativePointer;
		System.Windows.DependencyObject.StaticNativePointer = System.IntPtr.Zero;
		$asm02.MS.Internal.XcpImports.AddRefNativeObject$1(intPtr);
	} else if (System.IntPtr.op_Inequality(constructDO, System.IntPtr.Zero)) {
		intPtr = $asm02.MS.Internal.XcpImports.CreateObjectByTypeIndexWithDO(nativeTypeIndex, constructDO);
	} else {
		intPtr = (0);
	}
	var flag = false;
	if ($asm02.MS.Internal.XcpImports.DependencyObject_ShouldCreatePeerWithStrongRefNative(intPtr)) {
		flag = true;
	}
	this.m_nativePtr.NativeObject = intPtr;
	;
	this._coreTypeEventHelper = new $asm02.MS.Internal.CoreTypeEventHelper();
	var type = (JSIL.GetType(this));
	var isCustomType = 0;
	if (!$asm02.MS.Internal.TypeProxy.IsCoreType(type)) {
		isCustomType = 1;
	}
	;
};
System.Windows.DependencyObject.prototype.CheckAccess = function () {
	return this.Dispatcher.CheckAccess();
};
System.Windows.DependencyObject.prototype.RefreshExpression = function (dp) {
	var effectiveValueEntry = this.GetEffectiveValueEntry(dp).MemberwiseClone();
	var effectiveValueEntry2 = new JSIL.Variable(effectiveValueEntry.Copy().MemberwiseClone());
	return this.UpdateEffectiveValue(dp, effectiveValueEntry.MemberwiseClone(), /* ref */ effectiveValueEntry2, System.Windows.DependencyObject.ValueOperation.Reevaluate);
};
System.Windows.DependencyObject.prototype.DetachExpression = function (currentExpression, dp) {
	currentExpression.OnDetach();
	if (dp.IsCoreProperty) {
		this._valueTable.Remove(dp);
	}
};
System.Windows.DependencyObject.prototype.EnsureValueTable = function () {
	if (this._valueTable === null) {
		this._valueTable = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.Windows.DependencyProperty, $asm02.System.Windows.EffectiveValueEntry), "_ctor$0", []);
		$asm02.MS.Internal.XcpImports.SetParticipatesInManagedTreeDefault(this);
	}
};
System.Windows.DependencyObject.prototype.ValidateDependencyPropertyParameter = function (dp) {
	if (dp === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["dp"]);
	}
	var customDependencyProperty = JSIL.TryCast(dp, $asm02.System.Windows.CustomDependencyProperty);
	if (!(dp.IsCoreProperty || 
			customDependencyProperty.IsCustomAttachedProperty || customDependencyProperty._ownerType.IsInstanceOfType(this))) {
		var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
		stringBuilder.AppendFormat$0($asm02.System.Windows.Resx.GetString$2("DP_PropertyTypeCannotBeSetOnObject"), [customDependencyProperty._ownerType, customDependencyProperty._name, JSIL.GetType(this)]);
		throw JSIL.New(System.ArgumentException, "_ctor$1", [stringBuilder.toString()]);
	}
};
System.Windows.DependencyObject.prototype.SetValueInternal$0 = function (dp, value) {
	this.SetValueInternal$1(dp, value, false);
};
System.Windows.DependencyObject.prototype.SetValueInternal$1 = function (dp, value, allowReadOnlySet) {
	$asm02.MS.Internal.TracingServices.TraceEventVerbose(
		$asm02.MS.Internal.TracingServices.TraceMarkerType.SetValueManaged, 
		null, 
		MS.Internal.TracingServices.TraceType.Start, 
		$asm02.MS.Internal.TracingServices.TraceLevel.Reserved, 
		2
	);
	$asm02.MS.Internal.XcpImports.CheckThread();
	if (!(dp.IsCoreProperty || allowReadOnlySet)) {
		this.CheckCanSetCustomDPValue(JSIL.TryCast(dp, $asm02.System.Windows.CustomDependencyProperty));
	}
	this.ValidateDependencyPropertyParameter(dp);
	var expression = JSIL.TryCast(value, System.Windows.Expression);
	if (!((expression === null) || !expression.IsAssociated)) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", ["value"]);
	}
	var customDependencyProperty = JSIL.TryCast(dp, $asm02.System.Windows.CustomDependencyProperty);
	if (!(dp.IsCoreProperty || 
			JSIL.TryCast(value, System.Windows.Expression) || customDependencyProperty.IsValidType(value))) {
		var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
		throw JSIL.New(System.ArgumentException, "_ctor$1", [(stringBuilder.AppendFormat$0($asm02.System.Windows.Resx.GetString$2("DP_NotValidValueForProperty"), [value, customDependencyProperty._name])).toString()]);
	}
	if (value === System.Windows.DependencyProperty.UnsetValue) {
		this.ClearValueInternal(dp);
		return;
	}
	var effectiveValueEntry = new JSIL.Variable(this.GetEffectiveValueEntry(dp).MemberwiseClone());
	if (effectiveValueEntry.value.IsExpression) {
		var expression2 = JSIL.TryCast(effectiveValueEntry.value.ModifiedValue.BaseValue, System.Windows.Expression);
		if (!(JSIL.TryCast(value, System.Windows.Expression) || !expression2.CanSetValue)) {
			var oldValue = this.GetOldValue(dp, /* ref */ effectiveValueEntry);
			if (!this.ArePropertyValuesEqual(dp, value, oldValue)) {
				var effectiveValueEntry2 = new JSIL.Variable(effectiveValueEntry.value.Copy().MemberwiseClone());
				effectiveValueEntry2.value.SetExpressionValue(value);
				if (!(!dp.IsCoreProperty || 
						(value === null) || dp._propertyType.IsInstanceOfType(value))) {
					var stringBuilder2 = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
					stringBuilder2.AppendFormat$0($asm02.System.Windows.Resx.GetString$2("DP_PropertyCannotBeSetOnObject"), [dp._propertyType, JSIL.GetType(value)]);
					throw JSIL.New(System.ArgumentException, "_ctor$1", [stringBuilder2.toString()]);
				}
				this.UpdateEffectiveValue(dp, effectiveValueEntry.value.MemberwiseClone(), /* ref */ effectiveValueEntry2, System.Windows.DependencyObject.ValueOperation.Default);
			}
			return;
		}
		this.DetachExpression(expression2, dp);
	}
	if (expression === null) {
		effectiveValueEntry2.value = effectiveValueEntry.value.Copy().MemberwiseClone();
		effectiveValueEntry2.value.ResetExpressionValue();
		effectiveValueEntry2.value.SetBaseValue(value, System.Windows.BaseValueSource.Local);
	} else {
		expression.OnAttach(this, dp);
		var flag = true;
		try {
			var value2 = expression.GetValue(this, dp);
			flag = false;
			effectiveValueEntry2.value = effectiveValueEntry.value.Copy().MemberwiseClone();
			effectiveValueEntry2.value.SetBaseValue(expression, System.Windows.BaseValueSource.Local);
			effectiveValueEntry2.value.SetExpressionValue(value2);
		} finally {
			if (flag) {
				expression.OnDetach();
			}
		}
	}
	this.UpdateEffectiveValue(dp, effectiveValueEntry.value.MemberwiseClone(), /* ref */ effectiveValueEntry2, System.Windows.DependencyObject.ValueOperation.Default);
	$asm02.MS.Internal.TracingServices.TraceEventVerbose(
		$asm02.MS.Internal.TracingServices.TraceMarkerType.SetValueManaged, 
		null, 
		MS.Internal.TracingServices.TraceType.End, 
		$asm02.MS.Internal.TracingServices.TraceLevel.Reserved, 
		2
	);
};
System.Windows.DependencyObject.prototype.RaisePropertyChangeNotifications = function (dp, oldValue, newValue) {
	var result = false;
	var customDependencyProperty = JSIL.TryCast(dp, $asm02.System.Windows.CustomDependencyProperty);
	if (!this.ArePropertyValuesEqual(dp, newValue, oldValue)) {
		if (!((customDependencyProperty === null) || (customDependencyProperty._propertyChangedCallback === null))) {
			customDependencyProperty._propertyChangedCallback(this, new System.Windows.DependencyPropertyChangedEventArgs(customDependencyProperty, oldValue, newValue));
		}
		this.OnPropertyChanged(dp);
		result = true;
	}
	return result;
};
System.Windows.DependencyObject.prototype.ClearValue = function (dp) {
	this.ClearValueInternal(dp);
};
System.Windows.DependencyObject.prototype.ClearValueInternal = function (dp) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	this.ValidateDependencyPropertyParameter(dp);
	var effectiveValueEntry = this.GetEffectiveValueEntry(dp).MemberwiseClone();
	if (effectiveValueEntry.IsExpression) {
		var expression = JSIL.TryCast(effectiveValueEntry.ModifiedValue.BaseValue, System.Windows.Expression);
		expression.OnDetach();
		if (dp.IsCoreProperty) {
			this._valueTable.Remove(dp);
		}
	}
	if (dp.IsCoreProperty) {
		var value = $asm02.MS.Internal.XcpImports.GetValue(this, dp);
		$asm02.MS.Internal.XcpImports.ClearValue(this, dp);
		var value2 = $asm02.MS.Internal.XcpImports.GetValue(this, dp);
		this.RaisePropertyChangeNotifications(dp, value, value2);
	} else {
		var effectiveValueEntry2 = new JSIL.Variable(JSIL.New($asm02.System.Windows.EffectiveValueEntry, "_ctor$0", [System.Windows.BaseValueSource.Local]));
		this.UpdateEffectiveValue(dp, effectiveValueEntry.MemberwiseClone(), /* ref */ effectiveValueEntry2, System.Windows.DependencyObject.ValueOperation.ClearValue);
	}
	if (dp === System.Windows.FrameworkElement.TagProperty) {
		this.ClearValueInternal(System.Windows.FrameworkElement.TagInternalProperty);
	}
};
System.Windows.DependencyObject.prototype.ReadLocalValue = function (dp) {
	return this.ReadLocalValueInternal(dp);
};
System.Windows.DependencyObject.prototype.ReadLocalValueInternal = function (dp) {
	this.ValidateDependencyPropertyParameter(dp);
	var effectiveValueEntry = this.GetEffectiveValueEntry(dp).MemberwiseClone();
	if ($asm02.MS.Internal.QuirksMode.ShouldReadLocalValueReturnAnimatedValue()) {
		var obj = effectiveValueEntry.IsAnimated ? effectiveValueEntry.ModifiedValue.AnimatedValue : effectiveValueEntry.LocalValue;
	} else {
		obj = effectiveValueEntry.LocalValue;
	}
	if (!((obj !== System.Windows.DependencyProperty.UnsetValue) || !dp.IsCoreProperty)) {
		obj = $asm02.MS.Internal.XcpImports.DependencyObject_ReadLocalValue(this, dp);
	}
	return obj;
};
System.Windows.DependencyObject.prototype.IsPropertyDefault = function (dp) {
	this.ValidateDependencyPropertyParameter(dp);
	var effectiveValueEntry = this.GetEffectiveValueEntry(dp).MemberwiseClone();
	var value = effectiveValueEntry.Value;
	if (value !== System.Windows.DependencyProperty.UnsetValue) {
		return (!effectiveValueEntry.HasModifiers && (effectiveValueEntry.BaseValueSource === System.Windows.BaseValueSource.Default));
	}
	return (!dp.IsCoreProperty || $asm02.MS.Internal.XcpImports.DependencyObject_IsPropertyDefault(this, dp));
};
System.Windows.DependencyObject.prototype.SetObjectValueToCore = function (dp, value) {
	var nativeObject = this.m_nativePtr.NativeObject;
	var obj = value;
	if (dp === System.Windows.FrameworkElement.TagProperty) {
		var dependencyObject = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeObject), System.Windows.DependencyObject);
		var frameworkElement = JSIL.TryCast(dependencyObject, System.Windows.FrameworkElement);
		if (frameworkElement !== null) {
			frameworkElement.TagInternal = value;
		}
		if (value !== null) {
			obj = value.toString();
		}
	}
	if (value !== null) {
		if (dp === System.Windows.FrameworkElement.DataContextProperty) {
			obj = $asm02.MS.Internal.ManagedObjectReference.ConditionalWrap(value);
		} else if (!dp._propertyType.IsInstanceOfType(value)) {
			var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
			stringBuilder.AppendFormat$0($asm02.System.Windows.Resx.GetString$2("DP_PropertyCannotBeSetOnObject"), [dp._propertyType, JSIL.GetType(value)]);
			throw JSIL.New(System.ArgumentException, "_ctor$1", [stringBuilder.toString()]);
		}
	}
	$asm02.MS.Internal.XcpImports.SetValue(this, dp, obj);
};
System.Windows.DependencyObject.prototype.ArePropertyValuesEqual = function (dp, value1, value2) {
	if (!(!dp._propertyType.IsValueType && (dp._propertyType !== System.String))) {
		return System.Object.Equals(value1, value2);
	}
	return System.Object.ReferenceEquals(value1, value2);
};
System.Windows.DependencyObject.prototype.GetAnimationBaseValue = function (dp) {
	if (dp === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["dp"]);
	}
	if (dp.IsCoreProperty) {
		return $asm02.MS.Internal.XcpImports.DependencyObject_GetAnimationBaseValue(this, dp);
	}
	var effectiveValueEntry = this.GetEffectiveValueEntry(dp).MemberwiseClone();
	if (effectiveValueEntry.IsAnimated) {
		return effectiveValueEntry.ModifiedValue.BaseValue;
	}
	return this.GetValue(dp);
};
System.Windows.DependencyObject.prototype.GetMentor = function () {
	return $asm02.MS.Internal.XcpImports.DependencyObject_GetMentor(this);
};
System.Windows.DependencyObject.prototype.PrepareCorePropertyExpression = function (property) {
	var effectiveValueEntry = this.GetEffectiveValueEntry(property).MemberwiseClone();
	if (effectiveValueEntry.EffectiveValue !== System.Windows.DependencyProperty.UnsetValue) {
		var expression = JSIL.TryCast(effectiveValueEntry.ModifiedValue.BaseValue, System.Windows.Expression);
		if (expression.CanSetValue) {
			return;
		}
		expression.OnDetach();
		this._valueTable.Remove(property);
	}
};
System.Windows.DependencyObject.prototype.CheckCanSetCustomDPValue = function (property) {
	if (!((property === null) || !property.IsReadOnly())) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [System.String.Format(System.Globalization.CultureInfo.InvariantCulture, $asm02.System.Windows.Resx.GetString$2("DP_ReadOnly"), [JSIL.GetType(this).FullName, property.Name])]);
	}
};
System.Windows.DependencyObject.prototype.GetValueInternal = function (dp) {
	if (dp === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["dp"]);
	}
	$asm02.MS.Internal.XcpImports.CheckThread();
	if (dp.IsCoreProperty) {
		return $asm02.MS.Internal.XcpImports.GetValue(this, dp);
	}
	var obj = this.GetEffectiveValueEntry(dp).EffectiveValue;
	if (obj === System.Windows.DependencyProperty.UnsetValue) {
		obj = dp.GetDefaultValue(this);
	}
	return obj;
};
System.Windows.DependencyObject.prototype.InvalidateProperty = function (property) {
	var effectiveValueEntry = this.GetEffectiveValueEntry(property).MemberwiseClone();
	var effectiveValueEntry2 = new JSIL.Variable(JSIL.New($asm02.System.Windows.EffectiveValueEntry, "_ctor$0", [System.Windows.BaseValueSource.Unknown]));
	this.UpdateEffectiveValue(property, effectiveValueEntry.MemberwiseClone(), /* ref */ effectiveValueEntry2, System.Windows.DependencyObject.ValueOperation.Reevaluate);
};
System.Windows.DependencyObject.prototype.GetOldValue = function (property, /* ref */ oldEntry) {
	if (property.IsCoreProperty) {
		var obj = $asm02.MS.Internal.XcpImports.GetValue(this, property);
	} else {
		obj = oldEntry.value.EffectiveValue;
		if (obj === System.Windows.DependencyProperty.UnsetValue) {
			obj = property.GetDefaultValue(this);
		}
	}
	return obj;
};
System.Windows.DependencyObject.prototype.GetNewValue = function (property, /* ref */ newEntry) {
	var obj = newEntry.value.EffectiveValue;
	if (obj === System.Windows.DependencyProperty.UnsetValue) {
		obj = property.GetDefaultValue(this);
	}
	return obj;
};
System.Windows.DependencyObject.prototype.SetEffectiveValue = function (property, /* ref */ newEntry, newValue) {
	if (property.IsCoreProperty) {
		this.SetObjectValueToCore(property, newValue);
	}
	if (!(property.IsCoreProperty && !newEntry.value.IsExpression)) {
		this.EnsureValueTable();
		this._valueTable.set_Item(property, newEntry.value.MemberwiseClone());
		var dependencyObject = JSIL.TryCast(newValue, System.Windows.DependencyObject);
		if (!((dependencyObject === null) || JSIL.TryCast(dependencyObject, System.Windows.FrameworkElement))) {
			$asm02.MS.Internal.XcpImports.DependencyObject_SetParentForInheritanceContextOnly(dependencyObject, this);
			if (JSIL.TryCast(this, System.Windows.FrameworkElement) === null) {
				dependencyObject._inheritanceParent = this;
			}
			if (!(this._propagateInheritanceChanged || !dependencyObject.NeedsInheritanceContextChanges)) {
				this._propagateInheritanceChanged = true;
				this.UpdateParentInheritanceContextPropagation();
			}
			dependencyObject.OnInheritanceContextChanged(this, System.EventArgs.Empty);
		}
	}
};
System.Windows.DependencyObject.prototype.UpdateEffectiveValue = function (property, $oldEntry, /* ref */ newEntry, operation) {
	var oldEntry = new JSIL.Variable($oldEntry);
	if (!((newEntry.value.Value !== System.Windows.DependencyProperty.UnsetValue) && !this.IsFlagSet(operation, System.Windows.DependencyObject.ValueOperation.Reevaluate))) {
		newEntry.value = this.EvaluateEffectiveValue(property, oldEntry.value.MemberwiseClone(), newEntry.value.MemberwiseClone(), operation).MemberwiseClone();
	}
	var oldValue = this.GetOldValue(property, /* ref */ oldEntry);
	var newValue = this.GetNewValue(property, /* ref */ newEntry);
	var dependencyObject = JSIL.TryCast(oldValue, System.Windows.DependencyObject);
	if (!((property.IsCoreProperty && 
				!oldEntry.value.IsExpression) || 
			(dependencyObject === null) || JSIL.TryCast(dependencyObject, System.Windows.FrameworkElement))) {
		dependencyObject._inheritanceParent = null;
		$asm02.MS.Internal.XcpImports.DependencyObject_SetParentForInheritanceContextOnly(dependencyObject, null);
		dependencyObject.OnInheritanceContextChanged(this, System.EventArgs.Empty);
	}
	this.SetEffectiveValue(property, /* ref */ newEntry, newValue);
	return this.RaisePropertyChangeNotifications(property, oldValue, newValue);
};
System.Windows.DependencyObject.prototype.UpdateParentInheritanceContextPropagation = function () {
__loop0__: 
	for (var inheritanceParent = this._inheritanceParent; (inheritanceParent !== null) && !inheritanceParent._propagateInheritanceChanged; inheritanceParent = inheritanceParent._inheritanceParent) {
		inheritanceParent._propagateInheritanceChanged = true;
	}
};
System.Windows.DependencyObject.prototype.EvaluateEffectiveValue = function (property, oldEntry, $newEntry, operation) {
	var newEntry = new JSIL.Variable($newEntry);
	if (this.IsFlagSet(operation, System.Windows.DependencyObject.ValueOperation.ClearValue)) {
		newEntry.value = JSIL.New($asm02.System.Windows.EffectiveValueEntry, "_ctor$0", [System.Windows.BaseValueSource.Unknown]);
	}
	newEntry.value = this.EvaluateBaseValue(property, oldEntry.MemberwiseClone(), /* ref */ newEntry, operation).MemberwiseClone();
	if (!this.IsFlagSet(operation, System.Windows.DependencyObject.ValueOperation.ClearAnimation)) {
		newEntry.value = this.EvaluateAnimation(oldEntry.MemberwiseClone(), /* ref */ newEntry).MemberwiseClone();
	}
	return newEntry.value;
};
System.Windows.DependencyObject.prototype.EvaluateBaseValue = function (property, oldEntry, /* ref */ newEntry, operation) {
	if (!(this.IsFlagSet(operation, System.Windows.DependencyObject.ValueOperation.ClearValue) || (oldEntry.BaseValueSource !== System.Windows.BaseValueSource.Local))) {
		var value = new JSIL.Variable(oldEntry.LocalValue);
		newEntry.value.SetBaseValue(value.value, System.Windows.BaseValueSource.Local);
		newEntry.value = this.EvaluateExpression(property, oldEntry.MemberwiseClone(), /* ref */ newEntry).MemberwiseClone();
		return newEntry.value;
	}
	var flag = this.GetValueFromStyle(property, /* ref */ value);
	if (flag) {
		newEntry.value.SetBaseValue(value.value, System.Windows.BaseValueSource.Style);
		return newEntry.value;
	}
	flag = this.GetValueFromBuiltInStyle(property, /* ref */ value);
	if (flag) {
		newEntry.value.SetBaseValue(value.value, System.Windows.BaseValueSource.BuiltInStyle);
		return newEntry.value;
	}
	value.value = property.GetDefaultValue(this);
	newEntry.value.SetBaseValue(value.value, System.Windows.BaseValueSource.Default);
	return newEntry.value;
};
System.Windows.DependencyObject.prototype.EvaluateExpression = function (property, oldEntry, /* ref */ newEntry) {
	if (oldEntry.IsExpression) {
		var expression = JSIL.TryCast(oldEntry.ModifiedValue.BaseValue, System.Windows.Expression);
		var obj = expression.GetValue(this, property);
		if (obj === System.Windows.DependencyProperty.UnsetValue) {
			obj = property.GetDefaultValue(this);
		}
		newEntry.value.SetExpressionValue(obj);
	}
	return newEntry.value;
};
System.Windows.DependencyObject.prototype.EvaluateAnimation = function (oldEntry, /* ref */ newEntry) {
	if (oldEntry.IsAnimated) {
		var animatedValue = oldEntry.ModifiedValue.AnimatedValue;
		newEntry.value.SetAnimatedValue(animatedValue);
	}
	return newEntry.value;
};
System.Windows.DependencyObject.prototype.GetEffectiveValueEntry = function (property) {
	var result = new JSIL.Variable(new $asm02.System.Windows.EffectiveValueEntry());
	if (!((this._valueTable === null) || !this._valueTable.TryGetValue(property, /* ref */ result))) {
		return result.value;
	}
	return JSIL.New($asm02.System.Windows.EffectiveValueEntry, "_ctor$0", [System.Windows.BaseValueSource.Unknown]);
};
System.Windows.DependencyObject.prototype.SetAnimatedValue = function (property, animatedValue) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	this.CheckCanSetCustomDPValue(JSIL.TryCast(property, $asm02.System.Windows.CustomDependencyProperty));
	this.ValidateDependencyPropertyParameter(property);
	var effectiveValueEntry = this.GetEffectiveValueEntry(property).MemberwiseClone();
	var effectiveValueEntry2 = new JSIL.Variable(effectiveValueEntry.Copy().MemberwiseClone());
	effectiveValueEntry2.value.SetAnimatedValue(animatedValue);
	this.UpdateEffectiveValue(property, effectiveValueEntry.MemberwiseClone(), /* ref */ effectiveValueEntry2, System.Windows.DependencyObject.ValueOperation.Default);
};
System.Windows.DependencyObject.prototype.ClearAnimatedValue = function (property, hasHoldEndValue, holdEndValue) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	this.CheckCanSetCustomDPValue(JSIL.TryCast(property, $asm02.System.Windows.CustomDependencyProperty));
	this.ValidateDependencyPropertyParameter(property);
	var effectiveValueEntry = this.GetEffectiveValueEntry(property).MemberwiseClone();
	var effectiveValueEntry2 = new JSIL.Variable(effectiveValueEntry.Copy().MemberwiseClone());
	if (!(!hasHoldEndValue || !effectiveValueEntry2.value.HasModifiers)) {
		effectiveValueEntry2.value.SetBaseValue(holdEndValue, System.Windows.BaseValueSource.Local);
	}
	effectiveValueEntry2.value.ResetAnimatedValue();
	this.UpdateEffectiveValue(property, effectiveValueEntry.MemberwiseClone(), /* ref */ effectiveValueEntry2, System.Windows.DependencyObject.ValueOperation.ClearAnimation);
};
System.Windows.DependencyObject.prototype.GetValueFromStyle = function (property, /* ref */ value) {
	value.value = null;
	return false;
};
System.Windows.DependencyObject.prototype.GetValueFromBuiltInStyle = function (property, /* ref */ value) {
	value.value = null;
	return false;
};
System.Windows.DependencyObject.prototype.IsFlagSet = function (operation, flag) {
	return ((operation & flag) === flag);
};
System.Windows.DependencyObject.prototype.OnPropertyChanged = function (dp) {
	if (this.DPChanged !== null) {
		this.DPChanged(this, dp);
	}
};
System.Windows.DependencyObject.prototype.add_DPChanged = function (value) {
	this.DPChanged = System.Delegate.Combine(this.DPChanged, value);
};
System.Windows.DependencyObject.prototype.remove_DPChanged = function (value) {
	this.DPChanged = System.Delegate.Remove(this.DPChanged, value);
};
System.Windows.DependencyObject.prototype.add__inheritaneContextChanged = function (value) {
	this._inheritaneContextChanged = System.Delegate.Combine(this._inheritaneContextChanged, value);
};
System.Windows.DependencyObject.prototype.remove__inheritaneContextChanged = function (value) {
	this._inheritaneContextChanged = System.Delegate.Remove(this._inheritaneContextChanged, value);
};
System.Windows.DependencyObject.prototype.add_InheritanceContextChanged = function (value) {
	if (this._inheritaneContextChanged === null) {
		$asm02.MS.Internal.XcpImports.WantsEvent(this, 6, 1);
		this.UpdateParentInheritanceContextPropagation();
	}
	this._inheritaneContextChanged = System.Delegate.Combine(this._inheritaneContextChanged, value);
};
System.Windows.DependencyObject.prototype.remove_InheritanceContextChanged = function (value) {
	this._inheritaneContextChanged = System.Delegate.Remove(this._inheritaneContextChanged, value);
	if (this._inheritaneContextChanged === null) {
		$asm02.MS.Internal.XcpImports.WantsEvent(this, 6, 0);
	}
};
System.Windows.DependencyObject.prototype.get_NeedsInheritanceContextChanges = function () {
	return (this._propagateInheritanceChanged || (this._inheritaneContextChanged !== null));
};
System.Windows.DependencyObject.prototype.OnInheritanceContextChanged = function (sender, e) {
	if (this._inheritaneContextChanged !== null) {
		this._inheritaneContextChanged(sender, e);
	}
	if (!(!this._propagateInheritanceChanged || (this._valueTable === null))) {
		var enumerator = this._valueTable.GetEnumerator().MemberwiseClone();
		try {
		__loop0__: 
			while (enumerator.MoveNext()) {
				var current = JSIL.Cast(enumerator.Current.MemberwiseClone(), System.Collections.Generic.KeyValuePair$b2.Of(System.Windows.DependencyProperty, $asm02.System.Windows.EffectiveValueEntry)).MemberwiseClone();
				var dependencyObject = JSIL.TryCast(current.Value.EffectiveValue, System.Windows.DependencyObject);
				if (!((dependencyObject === null) || JSIL.TryCast(dependencyObject, System.Windows.FrameworkElement))) {
					dependencyObject.OnInheritanceContextChanged(sender, e);
				}
			}
		} finally {
			enumerator.IDisposable_Dispose();
		}
	}
};
System.Windows.DependencyObject.prototype.IManagedPeer_BeginShutdown = function () {
	System.GC.SuppressFinalize(this.NativeObjectSafeHandle);
	$asm02.MS.Internal.XcpImports.DisconnectManagedPeer(this);
};
System.Windows.DependencyObject.prototype.IManagedPeer_EndShutdown = function () {
	if (this.m_nativePtr !== null) {
		$asm02.MS.Internal.XcpImports.ReleaseMNative(this.NativeObject, 11);
		this.m_nativePtr = null;
	}
};
System.Windows.DependencyObject.prototype.IManagedPeer_AddPeerReferenceToItem = function (child) {
	if (this._treeChildren === null) {
		this._treeChildren = JSIL.New(System.Collections.Generic.Dictionary$b2.Of($asm02.MS.Internal.IManagedPeerBase, System.Object), "_ctor$1", [1]);
	}
	this._treeChildren.set_Item(child, null);
	$asm02.MS.Internal.ManagedPeerTable.UnpegManagedPeerNoRef$1(child);
};
System.Windows.DependencyObject.prototype.IManagedPeer_RemovePeerReferenceToItem = function (child) {
	if (this._treeChildren !== null) {
		this._treeChildren.Remove(child);
	}
};
System.Windows.DependencyObject.prototype.IManagedPeer_GetInstanceEventDelegate = function (eventName) {
	return this._coreTypeEventHelper.GetInstanceEventDelegate(eventName);
};
System.Windows.DependencyObject.prototype.UpdateTreeParent = function (oldParent, newParent, bIsNewParentAlive, keepReferenceToParent) {
	this.UpdateTreeParentHelper(oldParent, newParent, keepReferenceToParent);
	if (keepReferenceToParent) {
		try {
			this.OnTreeParentUpdated(JSIL.TryCast(newParent, System.Windows.DependencyObject), bIsNewParentAlive);
		} catch ($exception) {
			this.UpdateTreeParentHelper(newParent, oldParent, keepReferenceToParent);
			throw $exception;
		}
	}
};
System.Windows.DependencyObject.prototype.UpdateTreeParentHelper = function (oldParent, newParent, keepReferenceToParent) {
	if (oldParent !== null) {
		oldParent.IManagedPeer_RemovePeerReferenceToItem(this);
	}
	if (keepReferenceToParent) {
		this._treeParent = newParent;
	}
	if (newParent !== null) {
		newParent.IManagedPeer_AddPeerReferenceToItem(this);
	}
};
System.Windows.DependencyObject.prototype.OnTreeParentUpdated = function (newParent, bIsNewParentAlive) {
};
System.Windows.DependencyObject.prototype.get_IsInLiveTree = function () {
	return $asm02.MS.Internal.XcpImports.GetIsActive(this);
};
System.Windows.DependencyObject.prototype.IsPropertyLocal = function (dp) {
	return $asm02.MS.Internal.XcpImports.DependencyObject_IsPropertyLocal(this, dp);
};
System.Windows.DependencyObject.get_ExecutingAssembly = function () {
	if (System.Windows.DependencyObject._executingAssembly === null) {
		System.Windows.DependencyObject._executingAssembly = System.Reflection.Assembly.GetExecutingAssembly();
	}
	return System.Windows.DependencyObject._executingAssembly;
};
System.Windows.DependencyObject.prototype.OnParentEnter = function (nativeNamescopeOwner, bLive, bSkipNameRegistration, bCoercedIsEnabled, bUseLayoutRounding, bIsRightToLeft, textHintingMode) {
};
System.Windows.DependencyObject.EnterImpl = function (nativeDO, nativeNamescopeOwner, bLive, bSkipNameRegistration, bCoercedIsEnabled, bUseLayoutRounding, bIsRightToLeft, textHintingMode) {
	var obj = null;
	try {
		true;
		var dependencyObject = JSIL.TryCast(obj, System.Windows.DependencyObject);
		if (!((dependencyObject !== null) && dependencyObject._valueTable)) {
			var result = 0;
			return result;
		}
		var enumerator = dependencyObject._valueTable.GetEnumerator().MemberwiseClone();
		try {
		__loop0__: 
			while (enumerator.MoveNext()) {
				var current = JSIL.Cast(enumerator.Current.MemberwiseClone(), System.Collections.Generic.KeyValuePair$b2.Of(System.Windows.DependencyProperty, $asm02.System.Windows.EffectiveValueEntry)).MemberwiseClone();
				var dependencyObject2 = JSIL.TryCast(current.Value.EffectiveValue, System.Windows.DependencyObject);
				if (!((dependencyObject2 === null) || ((bLive !== 0) && 
							((JSIL.TryCast(dependencyObject2, System.Windows.Controls.ToolTip) === null) || 
								(current.Key !== System.Windows.Controls.ToolTipService.ToolTipProperty))))) {
					dependencyObject2.OnParentEnter(
						nativeNamescopeOwner, 
						bLive, 
						bSkipNameRegistration, 
						bCoercedIsEnabled, 
						bUseLayoutRounding, 
						bIsRightToLeft, 
						textHintingMode
					);
					$asm02.MS.Internal.XcpImports.DependencyObject_Enter(
						dependencyObject2, 
						nativeNamescopeOwner, 
						bSkipNameRegistration, 
						bCoercedIsEnabled, 
						bUseLayoutRounding, 
						bIsRightToLeft, 
						textHintingMode
					);
				}
			}
		} finally {
			enumerator.IDisposable_Dispose();
		}
	} catch ($exception) {
		var arg_A8_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForException(arg_A8_0);
		return result;
	}
	return 0;
};
System.Windows.DependencyObject.LeaveImpl = function (nativeDO, nativeNamescopeOwner, bLive, bSkipNameRegistration, bCoercedIsEnabled, bVisualTreeBeingReset, textHintingMode) {
	var obj = null;
	try {
		true;
		var dependencyObject = JSIL.TryCast(obj, System.Windows.DependencyObject);
		if (!((dependencyObject !== null) && dependencyObject._valueTable)) {
			var result = 0;
			return result;
		}
		var enumerator = dependencyObject._valueTable.GetEnumerator().MemberwiseClone();
		try {
		__loop0__: 
			while (enumerator.MoveNext()) {
				var current = JSIL.Cast(enumerator.Current.MemberwiseClone(), System.Collections.Generic.KeyValuePair$b2.Of(System.Windows.DependencyProperty, $asm02.System.Windows.EffectiveValueEntry)).MemberwiseClone();
				var dependencyObject2 = JSIL.TryCast(current.Value.EffectiveValue, System.Windows.DependencyObject);
				if (!((dependencyObject2 === null) || ((bLive !== 0) && 
							((JSIL.TryCast(dependencyObject2, System.Windows.Controls.ToolTip) === null) || 
								(current.Key !== System.Windows.Controls.ToolTipService.ToolTipProperty))))) {
					$asm02.MS.Internal.XcpImports.DependencyObject_Leave(
						dependencyObject2, 
						nativeNamescopeOwner, 
						bSkipNameRegistration, 
						bCoercedIsEnabled, 
						bVisualTreeBeingReset, 
						textHintingMode
					);
				}
			}
		} finally {
			enumerator.IDisposable_Dispose();
		}
	} catch ($exception) {
		var arg_95_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForException(arg_95_0);
		return result;
	}
	return 0;
};
System.Windows.DependencyObject.prototype.PegManagedPeerNoRef = function () {
	$asm02.MS.Internal.ManagedPeerTable.PegManagedPeerNoRef$0(this);
};
System.Windows.DependencyObject.prototype.UnpegManagedPeerNoRef = function () {
	$asm02.MS.Internal.ManagedPeerTable.UnpegManagedPeerNoRef$1(this);
};
System.Windows.DependencyObject.prototype.SetPeerReferenceToProperty = function (nPropertyID, value) {
	var managedReferenceStore = this.ManagedReferenceStore;
	if (value === null) {
		managedReferenceStore.Remove(nPropertyID);
		return;
	}
	managedReferenceStore.set_Item(nPropertyID, value);
	value.UnpegManagedPeerNoRef();
};
System.Windows.DependencyObject.prototype.GetManagedReference = function (nPropertyID) {
	var result = new JSIL.Variable(null);
	var managedReferenceStore = this.ManagedReferenceStore;
	if (!managedReferenceStore.TryGetValue(nPropertyID, /* ref */ result)) {
		return null;
	}
	return result.value;
};
System.Windows.DependencyObject.SetPeerReferenceToProperty = function (nativeTarget, nPropertyID, nativeValue) {
	var obj = null;
	var dependencyObject = null;
	var dependencyObject2 = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeerWithReference(nativeValue), System.Windows.DependencyObject);
	if (!(dependencyObject2 || !System.IntPtr.op_Inequality(nativeValue, System.IntPtr.Zero))) {
		return -2146498358;
	}
	if (dependencyObject2 !== null) {
		dependencyObject = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeTarget), System.Windows.DependencyObject);
		if (dependencyObject === null) {
			return -2146498358;
		}
	} else if ((true) !== null) {
		dependencyObject = JSIL.TryCast(obj, System.Windows.DependencyObject);
	}
	if (dependencyObject !== null) {
		try {
			dependencyObject.SetPeerReferenceToProperty(nPropertyID, dependencyObject2);
		} catch ($exception) {
			var arg_5A_0 = $exception;
			return $asm02.MS.Internal.Error.GetXresultForException(arg_5A_0);
		}
		return 0;
	}
	return 0;
};
System.Windows.DependencyObject.GetManagedReference = function (nativeObject, nPropertyID, /* ref */ nativeValue) {
	var dependencyObject = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeObject), System.Windows.DependencyObject);
	nativeValue.value = System.IntPtr.Zero;
	if (dependencyObject === null) {
		return -2146498358;
	}
	try {
		var managedReference = dependencyObject.GetManagedReference(nPropertyID);
		if (managedReference !== null) {
			nativeValue.value = managedReference.NativeObject;
		}
	} catch ($exception) {
		var arg_39_0 = $exception;
		return $asm02.MS.Internal.Error.GetXresultForException(arg_39_0);
	}
	return 0;
};
System.Windows.DependencyObject.StoreManagedReferenceToValue = function (nativeObject, nPropertyID, /* ref */ wrappedValue) {
	var dependencyObject = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeObject), System.Windows.DependencyObject);
	if (dependencyObject === null) {
		return -2146498358;
	}
	try {
		var value = $asm02.MS.Internal.XcpImports.ConvertType$0(wrappedValue.value.MemberwiseClone(), 0, false, null);
		dependencyObject.SetPeerReferenceToProperty(nPropertyID, JSIL.Cast($asm02.MS.Internal.ManagedObjectReference.ConditionalWrap(value), System.Windows.DependencyObject));
	} catch ($exception) {
		var arg_38_0 = $exception;
		return $asm02.MS.Internal.Error.GetXresultForException(arg_38_0);
	}
	return 0;
};
System.Windows.DependencyObject.AddPeerReferenceToItem = function (nativeOwner, nativeTarget) {
	var managedPeerWithReference = $asm02.MS.Internal.ManagedPeerTable.GetManagedPeerWithReference(nativeTarget);
	var dependencyObject = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeOwner), System.Windows.DependencyObject);
	if (!((managedPeerWithReference !== null) && dependencyObject)) {
		return -2146498358;
	}
	try {
		dependencyObject.IManagedPeer_AddPeerReferenceToItem(managedPeerWithReference);
	} catch ($exception) {
		var e = $exception;
		if ($asm02.MS.Internal.Error.IsCriticalException(e)) {
			throw $exception;
		}
		return -2146498358;
	}
	return 0;
};
System.Windows.DependencyObject.RemovePeerReferenceToItem = function (nativeOwner, nativeTarget) {
	var managedPeerWithReference = $asm02.MS.Internal.ManagedPeerTable.GetManagedPeerWithReference(nativeTarget);
	var dependencyObject = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeOwner), System.Windows.DependencyObject);
	if (!((managedPeerWithReference !== null) && dependencyObject)) {
		return -2146498358;
	}
	try {
		dependencyObject.IManagedPeer_RemovePeerReferenceToItem(managedPeerWithReference);
	} catch ($exception) {
		var e = $exception;
		if ($asm02.MS.Internal.Error.IsCriticalException(e)) {
			throw $exception;
		}
		return -2146498358;
	}
	return 0;
};
JSIL.OverloadedMethod(System.Windows.DependencyObject.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]], 
		["_ctor$2", [System.UInt32, System.IntPtr]]
	]);
JSIL.OverloadedMethod(System.Windows.DependencyObject.prototype, "SetValueInternal", [
		["SetValueInternal$0", [System.Windows.DependencyProperty, System.Object]], 
		["SetValueInternal$1", [System.Windows.DependencyProperty, System.Object, System.Boolean]]
	]);
JSIL.MakeProperty(System.Windows.DependencyObject.prototype, "IManagedPeerBase_NativeObject", 
	System.Windows.DependencyObject.prototype.IManagedPeerBase_get_NativeObject, null);
JSIL.MakeProperty(System.Windows.DependencyObject.prototype, "NativeObject", 
	System.Windows.DependencyObject.prototype.get_NativeObject, null);
JSIL.MakeProperty(System.Windows.DependencyObject.prototype, "NativeObjectSafeHandle", 
	System.Windows.DependencyObject.prototype.get_NativeObjectSafeHandle, null);
JSIL.MakeProperty(System.Windows.DependencyObject.prototype, "Dispatcher", 
	System.Windows.DependencyObject.prototype.get_Dispatcher, null);
JSIL.MakeProperty(System.Windows.DependencyObject.prototype, "ManagedReferenceStore", 
	System.Windows.DependencyObject.prototype.get_ManagedReferenceStore, null);
JSIL.MakeProperty(System.Windows.DependencyObject.prototype, "NeedsInheritanceContextChanges", 
	System.Windows.DependencyObject.prototype.get_NeedsInheritanceContextChanges, null);
JSIL.MakeProperty(System.Windows.DependencyObject.prototype, "IsInLiveTree", 
	System.Windows.DependencyObject.prototype.get_IsInLiveTree, null);
JSIL.MakeProperty(System.Windows.DependencyObject, "ExecutingAssembly", 
	System.Windows.DependencyObject.get_ExecutingAssembly, null);
System.Windows.DependencyObject.prototype.m_nativePtr = null;
System.Windows.DependencyObject.StaticNativePointer = 0;
System.Windows.DependencyObject.prototype._valueTable = null;
System.Windows.DependencyObject.prototype._propagateInheritanceChanged = false;
System.Windows.DependencyObject.prototype._inheritanceParent = null;
System.Windows.DependencyObject.prototype._coreTypeEventHelper = null;
System.Windows.DependencyObject.PropertyReferencesHolder = null;
System.Windows.DependencyObject.prototype.DPChanged = null;
System.Windows.DependencyObject.prototype._inheritaneContextChanged = null;
System.Windows.DependencyObject._executingAssembly = null;
System.Windows.DependencyObject.prototype._treeChildren = null;
System.Windows.DependencyObject.prototype._treeParent = null;
System.Windows.DependencyObject._cctor = function () {
	System.Windows.DependencyObject.StaticNativePointer = System.IntPtr.Zero;
	System.Windows.DependencyObject.PropertyReferencesHolder = new System.Windows.DependencyObject.ManagedReferencesToken();
};

$asm02.System.Windows.DependencyObject.ManagedReferencesToken.prototype._ctor = function () {
	System.Windows.DependencyObject.prototype._ctor$0.call(this);
};

System.Windows.UIElement.prototype._ctor = function (nKnownTypeIndex) {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, nKnownTypeIndex);
};
System.Windows.UIElement.prototype.add_MouseMove = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23010, null), value);
};
System.Windows.UIElement.prototype.remove_MouseMove = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23010, null), value);
};
System.Windows.UIElement.prototype.add_MouseEnter = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23011, null), value);
};
System.Windows.UIElement.prototype.remove_MouseEnter = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23011, null), value);
};
System.Windows.UIElement.prototype.add_MouseLeave = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23012, null), value);
};
System.Windows.UIElement.prototype.remove_MouseLeave = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23012, null), value);
};
System.Windows.UIElement.prototype.add_MouseLeftButtonDown = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23013, null), value);
};
System.Windows.UIElement.prototype.remove_MouseLeftButtonDown = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23013, null), value);
};
System.Windows.UIElement.prototype.add_MouseLeftButtonUp = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23014, null), value);
};
System.Windows.UIElement.prototype.remove_MouseLeftButtonUp = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23014, null), value);
};
System.Windows.UIElement.prototype.add_MouseRightButtonDown = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23015, null), value);
};
System.Windows.UIElement.prototype.remove_MouseRightButtonDown = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23015, null), value);
};
System.Windows.UIElement.prototype.add_MouseRightButtonUp = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23016, null), value);
};
System.Windows.UIElement.prototype.remove_MouseRightButtonUp = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23016, null), value);
};
System.Windows.UIElement.prototype.add_MouseWheel = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23017, null), value);
};
System.Windows.UIElement.prototype.remove_MouseWheel = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23017, null), value);
};
System.Windows.UIElement.prototype.add_KeyUp = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23018, null), value);
};
System.Windows.UIElement.prototype.remove_KeyUp = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23018, null), value);
};
System.Windows.UIElement.prototype.add_KeyDown = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23019, null), value);
};
System.Windows.UIElement.prototype.remove_KeyDown = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23019, null), value);
};
System.Windows.UIElement.prototype.add_GotFocus = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23020, null), value);
};
System.Windows.UIElement.prototype.remove_GotFocus = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23020, null), value);
};
System.Windows.UIElement.prototype.add_LostFocus = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23021, null), value);
};
System.Windows.UIElement.prototype.remove_LostFocus = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23021, null), value);
};
System.Windows.UIElement.prototype.add_LostMouseCapture = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23023, null), value);
};
System.Windows.UIElement.prototype.remove_LostMouseCapture = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23023, null), value);
};
System.Windows.UIElement.prototype.add_TextInput = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23024, null), value);
};
System.Windows.UIElement.prototype.remove_TextInput = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23024, null), value);
};
System.Windows.UIElement.prototype.add_TextInputStart = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23025, null), value);
};
System.Windows.UIElement.prototype.remove_TextInputStart = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23025, null), value);
};
System.Windows.UIElement.prototype.add_TextInputUpdate = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23026, null), value);
};
System.Windows.UIElement.prototype.remove_TextInputUpdate = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23026, null), value);
};
System.Windows.UIElement.prototype.add_DragEnter = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23027, null), value);
};
System.Windows.UIElement.prototype.remove_DragEnter = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23027, null), value);
};
System.Windows.UIElement.prototype.add_DragLeave = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23028, null), value);
};
System.Windows.UIElement.prototype.remove_DragLeave = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23028, null), value);
};
System.Windows.UIElement.prototype.add_DragOver = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23029, null), value);
};
System.Windows.UIElement.prototype.remove_DragOver = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23029, null), value);
};
System.Windows.UIElement.prototype.add_Drop = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23030, null), value);
};
System.Windows.UIElement.prototype.remove_Drop = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23030, null), value);
};
System.Windows.UIElement.prototype.get_AllowDrop = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.UIElement.AllowDropProperty), System.Boolean);
};
System.Windows.UIElement.prototype.set_AllowDrop = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.UIElement.AllowDropProperty, value);
};
System.Windows.UIElement.prototype.get_Opacity = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.UIElement.OpacityProperty), System.Double);
};
System.Windows.UIElement.prototype.set_Opacity = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.UIElement.OpacityProperty, value);
};
System.Windows.UIElement.prototype.get_Clip = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.UIElement.ClipProperty), System.Windows.Media.Geometry);
};
System.Windows.UIElement.prototype.set_Clip = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.UIElement.ClipProperty, value);
};
System.Windows.UIElement.prototype.get_Effect = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.UIElement.EffectProperty), System.Windows.Media.Effects.Effect);
};
System.Windows.UIElement.prototype.set_Effect = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.UIElement.EffectProperty, value);
};
System.Windows.UIElement.prototype.get_Projection = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.UIElement.ProjectionProperty), System.Windows.Media.Projection);
};
System.Windows.UIElement.prototype.set_Projection = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.UIElement.ProjectionProperty, value);
};
System.Windows.UIElement.prototype.get_OpacityMask = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.UIElement.OpacityMaskProperty), System.Windows.Media.Brush);
};
System.Windows.UIElement.prototype.set_OpacityMask = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.UIElement.OpacityMaskProperty, value);
};
System.Windows.UIElement.prototype.get_RenderTransformOrigin = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.UIElement.RenderTransformOriginProperty), System.Windows.Point);
};
System.Windows.UIElement.prototype.set_RenderTransformOrigin = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.UIElement.RenderTransformOriginProperty, value);
};
System.Windows.UIElement.prototype.get_IsHitTestVisible = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.UIElement.IsHitTestVisibleProperty), System.Boolean);
};
System.Windows.UIElement.prototype.set_IsHitTestVisible = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.UIElement.IsHitTestVisibleProperty, value);
};
System.Windows.UIElement.prototype.get_Visibility = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.UIElement.VisibilityProperty), System.Windows.Visibility);
};
System.Windows.UIElement.prototype.set_Visibility = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.UIElement.VisibilityProperty, value);
};
System.Windows.UIElement.prototype.get_RenderSize = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.UIElement.RenderSizeProperty), System.Windows.Size);
};
System.Windows.UIElement.prototype.get_UseLayoutRounding = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.UIElement.UseLayoutRoundingProperty), System.Boolean);
};
System.Windows.UIElement.prototype.set_UseLayoutRounding = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.UIElement.UseLayoutRoundingProperty, value);
};
System.Windows.UIElement.prototype.get_CacheMode = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.UIElement.CacheModeProperty), System.Windows.Media.CacheMode);
};
System.Windows.UIElement.prototype.set_CacheMode = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.UIElement.CacheModeProperty, value);
};
System.Windows.UIElement.prototype.CaptureMouse = function () {
	return $asm02.MS.Internal.XcpImports.UIElement_CaptureMouse(this);
};
System.Windows.UIElement.prototype.ReleaseMouseCapture = function () {
	$asm02.MS.Internal.XcpImports.UIElement_ReleaseMouseCapture(this);
};
System.Windows.UIElement.prototype.InvalidateMeasure = function () {
	$asm02.MS.Internal.XcpImports.UIElement_InvalidateMeasure(this);
};
System.Windows.UIElement.prototype.InvalidateArrange = function () {
	$asm02.MS.Internal.XcpImports.UIElement_InvalidateArrange(this);
};
System.Windows.UIElement.prototype.UpdateLayout = function () {
	$asm02.MS.Internal.XcpImports.UIElement_UpdateLayout(this);
};
System.Windows.UIElement.prototype.add_ManipulationStarted = function (value) {
	$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
};
System.Windows.UIElement.prototype.remove_ManipulationStarted = function (value) {
	$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
};
System.Windows.UIElement.prototype.add_ManipulationDelta = function (value) {
	$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
};
System.Windows.UIElement.prototype.remove_ManipulationDelta = function (value) {
	$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
};
System.Windows.UIElement.prototype.add_ManipulationCompleted = function (value) {
	$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
};
System.Windows.UIElement.prototype.remove_ManipulationCompleted = function (value) {
	$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
};
System.Windows.UIElement.prototype.add_Tap = function (value) {
	$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
};
System.Windows.UIElement.prototype.remove_Tap = function (value) {
	$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
};
System.Windows.UIElement.prototype.add_DoubleTap = function (value) {
	$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
};
System.Windows.UIElement.prototype.remove_DoubleTap = function (value) {
	$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
};
System.Windows.UIElement.prototype.add_Hold = function (value) {
	$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
};
System.Windows.UIElement.prototype.remove_Hold = function (value) {
	$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
};
System.Windows.UIElement.prototype.AddHandler = function (routedEvent, handler, handledEventsToo) {
	if (routedEvent === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["routedEvent"]);
	}
	if (handler === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["handler"]);
	}
	if (!((routedEvent !== System.Windows.UIElement.ManipulationStartedEvent) && 
			(routedEvent !== System.Windows.UIElement.ManipulationDeltaEvent) && (routedEvent !== System.Windows.UIElement.ManipulationCompletedEvent))) {
		$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
		return;
	}
	if (!((routedEvent === System.Windows.UIElement.KeyDownEvent) || 
			(routedEvent === System.Windows.UIElement.KeyUpEvent) || 
			(routedEvent === System.Windows.UIElement.MouseLeftButtonDownEvent) || 
			(routedEvent === System.Windows.UIElement.MouseLeftButtonUpEvent) || 
			(routedEvent === System.Windows.UIElement.MouseWheelEvent) || 
			(routedEvent === System.Windows.UIElement.TextInputEvent) || 
			(routedEvent === System.Windows.UIElement.TextInputStartEvent) || (routedEvent === System.Windows.UIElement.TextInputUpdateEvent))) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", ["routedEvent"]);
	}
	var type = (JSIL.GetType(handler));
	if (!((routedEvent !== System.Windows.UIElement.KeyDownEvent) || (type !== System.Windows.Input.KeyEventHandler))) {
		System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23019, null), handler, handledEventsToo);
		return;
	}
	if (!((routedEvent !== System.Windows.UIElement.KeyUpEvent) || (type !== System.Windows.Input.KeyEventHandler))) {
		System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23018, null), handler, handledEventsToo);
		return;
	}
	if (!((routedEvent !== System.Windows.UIElement.MouseLeftButtonDownEvent) || (type !== System.Windows.Input.MouseButtonEventHandler))) {
		System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23013, null), handler, handledEventsToo);
		return;
	}
	if (!((routedEvent !== System.Windows.UIElement.MouseLeftButtonUpEvent) || (type !== System.Windows.Input.MouseButtonEventHandler))) {
		System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23014, null), handler, handledEventsToo);
		return;
	}
	if (!((routedEvent !== System.Windows.UIElement.MouseWheelEvent) || (type !== System.Windows.Input.MouseWheelEventHandler))) {
		System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23017, null), handler, handledEventsToo);
		return;
	}
	if (!((routedEvent !== System.Windows.UIElement.TextInputEvent) || (type !== System.Windows.Input.TextCompositionEventHandler))) {
		System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23024, null), handler, handledEventsToo);
		return;
	}
	if (!((routedEvent !== System.Windows.UIElement.TextInputStartEvent) || (type !== System.Windows.Input.TextCompositionEventHandler))) {
		System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23025, null), handler, handledEventsToo);
		return;
	}
	if (!((routedEvent !== System.Windows.UIElement.TextInputUpdateEvent) || (type !== System.Windows.Input.TextCompositionEventHandler))) {
		System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23026, null), handler, handledEventsToo);
		return;
	}
	throw JSIL.New(System.ArgumentException, "_ctor$1", ["handler"]);
};
System.Windows.UIElement.prototype.RemoveHandler = function (routedEvent, handler) {
	if (routedEvent === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["routedEvent"]);
	}
	if (handler === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["handler"]);
	}
	if (!((routedEvent !== System.Windows.UIElement.ManipulationStartedEvent) && 
			(routedEvent !== System.Windows.UIElement.ManipulationDeltaEvent) && (routedEvent !== System.Windows.UIElement.ManipulationCompletedEvent))) {
		$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
		return;
	}
	if (!((routedEvent === System.Windows.UIElement.KeyDownEvent) || 
			(routedEvent === System.Windows.UIElement.KeyUpEvent) || 
			(routedEvent === System.Windows.UIElement.MouseLeftButtonDownEvent) || 
			(routedEvent === System.Windows.UIElement.MouseLeftButtonUpEvent) || 
			(routedEvent === System.Windows.UIElement.MouseWheelEvent) || 
			(routedEvent === System.Windows.UIElement.TextInputStartEvent) || 
			(routedEvent === System.Windows.UIElement.TextInputUpdateEvent) || (routedEvent === System.Windows.UIElement.TextInputEvent))) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", ["routedEvent"]);
	}
	var type = (JSIL.GetType(handler));
	if (!((routedEvent !== System.Windows.UIElement.KeyDownEvent) || (type !== System.Windows.Input.KeyEventHandler))) {
		System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23019, null), handler);
		return;
	}
	if (!((routedEvent !== System.Windows.UIElement.KeyUpEvent) || (type !== System.Windows.Input.KeyEventHandler))) {
		System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23018, null), handler);
		return;
	}
	if (!((routedEvent !== System.Windows.UIElement.MouseLeftButtonDownEvent) || (type !== System.Windows.Input.MouseButtonEventHandler))) {
		System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23013, null), handler);
		return;
	}
	if (!((routedEvent !== System.Windows.UIElement.MouseLeftButtonUpEvent) || (type !== System.Windows.Input.MouseButtonEventHandler))) {
		System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23014, null), handler);
		return;
	}
	if (!((routedEvent !== System.Windows.UIElement.MouseWheelEvent) || (type !== System.Windows.Input.MouseWheelEventHandler))) {
		System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23017, null), handler);
		return;
	}
	if (!((routedEvent !== System.Windows.UIElement.TextInputEvent) || (type !== System.Windows.Input.TextCompositionEventHandler))) {
		System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23024, null), handler);
		return;
	}
	if (!((routedEvent !== System.Windows.UIElement.TextInputStartEvent) || (type !== System.Windows.Input.TextCompositionEventHandler))) {
		System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23025, null), handler);
		return;
	}
	if (!((routedEvent !== System.Windows.UIElement.TextInputUpdateEvent) || (type !== System.Windows.Input.TextCompositionEventHandler))) {
		System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23026, null), handler);
		return;
	}
	throw JSIL.New(System.ArgumentException, "_ctor$1", ["handler"]);
};
System.Windows.UIElement.prototype.TransformToVisual = function (visual) {
	return $asm02.MS.Internal.XcpImports.UIElement_TransformToVisual(this, visual);
};
System.Windows.UIElement.prototype.HitTest$0 = function (point) {
	return System.Windows.Media.VisualTreeHelper.FindElementsInHostCoordinates$0(point, this);
};
System.Windows.UIElement.prototype.HitTest$1 = function (rect) {
	return System.Windows.Media.VisualTreeHelper.FindElementsInHostCoordinates$1(rect, this);
};
System.Windows.UIElement.prototype.Measure = function (availableSize) {
	if (!(!System.Double.IsNaN(availableSize.Width) && !System.Double.IsNaN(availableSize.Height))) {
		$asm02.MS.Internal.XcpImports.LayoutInformation_SetLayoutExceptionElement(this);
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("UIElement_LayoutMeasure_NaNPassed")]);
	}
	$asm02.MS.Internal.XcpImports.UIElement_Measure(this, availableSize.MemberwiseClone());
};
System.Windows.UIElement.prototype.Arrange = function (finalRect) {
	if (!(!System.Double.IsPositiveInfinity(finalRect.Width) && 
			!System.Double.IsPositiveInfinity(finalRect.Height) && 
			!System.Double.IsNaN(finalRect.Width) && 
			!System.Double.IsNaN(finalRect.Height) && 
			!System.Double.IsInfinity(finalRect.X) && 
			!System.Double.IsInfinity(finalRect.Y) && 
			!System.Double.IsNaN(finalRect.X) && !System.Double.IsNaN(finalRect.Y))) {
		$asm02.MS.Internal.XcpImports.LayoutInformation_SetLayoutExceptionElement(this);
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("UIElement_LayoutArrange_InfinityNaNPassed")]);
	}
	$asm02.MS.Internal.XcpImports.UIElement_Arrange(this, finalRect.MemberwiseClone());
};
System.Windows.UIElement.prototype.IsAncestorOf = function (element) {
__loop0__: 
	for (var uIElement = element; (uIElement !== null) && (uIElement !== this); uIElement = JSIL.TryCast(System.Windows.Media.VisualTreeHelper.GetParent(uIElement), System.Windows.UIElement)) {
	}
	return (uIElement === this);
};
System.Windows.UIElement.prototype.get_DesiredSize = function () {
	return $asm02.MS.Internal.XcpImports.UIElement_GetDesiredSize(this);
};
System.Windows.UIElement.prototype.get_RenderTransform = function () {
	var transform = JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.UIElement.RenderTransformProperty), System.Windows.Media.Transform);
	if (transform === null) {
		transform = new System.Windows.Media.MatrixTransform();
	}
	return transform;
};
System.Windows.UIElement.prototype.set_RenderTransform = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.UIElement.RenderTransformProperty, value);
};
System.Windows.UIElement.prototype.OnCreateAutomationPeer = function () {
	return $asm02.MS.Internal.XcpImports.OnCreateAutomationPeer(this);
};
System.Windows.UIElement.prototype.IAutomationElement_GetOrCreateAutomationPeer = function () {
	return this.GetOrCreateAutomationPeer();
};
System.Windows.UIElement.prototype.GetOrCreateAutomationPeer = function () {
	if (this.m_pAP === null) {
		this.m_pAP = this.OnCreateAutomationPeer();
	}
	return this.m_pAP;
};
System.Windows.UIElement.prototype.GetAutomationPeer = function () {
	return this.m_pAP;
};
System.Windows.UIElement.prototype.InvalidateAutomationPeer = function () {
	if (this.m_pAP !== null) {
		this.m_pAP.InvalidatePeer();
		this.m_pAP = null;
	}
};
System.Windows.UIElement.prototype.GetChildrenCount = function () {
	return System.Windows.Media.VisualTreeHelper.GetChildrenCount(this);
};
System.Windows.UIElement.prototype.GetChild = function (childIndex) {
	return JSIL.TryCast(System.Windows.Media.VisualTreeHelper.GetChild(this, childIndex), System.Windows.UIElement);
};
System.Windows.UIElement.OnCreateAutomationPeer = function (nativeTarget, /* ref */ returnAP) {
	returnAP.value = System.IntPtr.Zero;
	try {
		var managedPeer = $asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeTarget);
		var automationElement = JSIL.TryCast(managedPeer, $asm02.System.Windows.Automation.IAutomationElement);
		if (automationElement === null) {
			throw JSIL.New(System.ArgumentException, "_ctor$1", ["nativeTarget"]);
		}
		var orCreateAutomationPeer = automationElement.IAutomationElement_GetOrCreateAutomationPeer();
		if (orCreateAutomationPeer === null) {
			var result = 0;
			return result;
		}
		returnAP.value = orCreateAutomationPeer.NativeObject;
	} catch ($exception) {
		var arg_46_0 = $exception;
		result = System.Windows.Automation.Peers.AutomationPeer.GetXresultForAutomationException(arg_46_0);
		return result;
	}
	return 0;
};
System.Windows.UIElement.prototype.BringIntoView$0 = function () {
	this.BringIntoView$1(System.Windows.Rect.Empty.MemberwiseClone());
};
System.Windows.UIElement.prototype.BringIntoView$1 = function (targetRectangle) {
	$asm02.MS.Internal.XcpImports.UIElement_BringIntoView(this, targetRectangle);
};
System.Windows.UIElement.prototype.add_RequestBringIntoView = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(26200, null), value);
};
System.Windows.UIElement.prototype.remove_RequestBringIntoView = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(26200, null), value);
};
JSIL.OverloadedMethod(System.Windows.UIElement.prototype, "HitTest", [
		["HitTest$0", [System.Windows.Point]], 
		["HitTest$1", [System.Windows.Rect]]
	]);
JSIL.OverloadedMethod(System.Windows.UIElement.prototype, "BringIntoView", [
		["BringIntoView$0", []], 
		["BringIntoView$1", [System.Windows.Rect]]
	]);
JSIL.MakeProperty(System.Windows.UIElement.prototype, "AllowDrop", 
	System.Windows.UIElement.prototype.get_AllowDrop, System.Windows.UIElement.prototype.set_AllowDrop);
JSIL.MakeProperty(System.Windows.UIElement.prototype, "Opacity", 
	System.Windows.UIElement.prototype.get_Opacity, System.Windows.UIElement.prototype.set_Opacity);
JSIL.MakeProperty(System.Windows.UIElement.prototype, "Clip", 
	System.Windows.UIElement.prototype.get_Clip, System.Windows.UIElement.prototype.set_Clip);
JSIL.MakeProperty(System.Windows.UIElement.prototype, "Effect", 
	System.Windows.UIElement.prototype.get_Effect, System.Windows.UIElement.prototype.set_Effect);
JSIL.MakeProperty(System.Windows.UIElement.prototype, "Projection", 
	System.Windows.UIElement.prototype.get_Projection, System.Windows.UIElement.prototype.set_Projection);
JSIL.MakeProperty(System.Windows.UIElement.prototype, "OpacityMask", 
	System.Windows.UIElement.prototype.get_OpacityMask, System.Windows.UIElement.prototype.set_OpacityMask);
JSIL.MakeProperty(System.Windows.UIElement.prototype, "RenderTransformOrigin", 
	System.Windows.UIElement.prototype.get_RenderTransformOrigin, System.Windows.UIElement.prototype.set_RenderTransformOrigin);
JSIL.MakeProperty(System.Windows.UIElement.prototype, "IsHitTestVisible", 
	System.Windows.UIElement.prototype.get_IsHitTestVisible, System.Windows.UIElement.prototype.set_IsHitTestVisible);
JSIL.MakeProperty(System.Windows.UIElement.prototype, "Visibility", 
	System.Windows.UIElement.prototype.get_Visibility, System.Windows.UIElement.prototype.set_Visibility);
JSIL.MakeProperty(System.Windows.UIElement.prototype, "RenderSize", 
	System.Windows.UIElement.prototype.get_RenderSize, null);
JSIL.MakeProperty(System.Windows.UIElement.prototype, "UseLayoutRounding", 
	System.Windows.UIElement.prototype.get_UseLayoutRounding, System.Windows.UIElement.prototype.set_UseLayoutRounding);
JSIL.MakeProperty(System.Windows.UIElement.prototype, "CacheMode", 
	System.Windows.UIElement.prototype.get_CacheMode, System.Windows.UIElement.prototype.set_CacheMode);
JSIL.MakeProperty(System.Windows.UIElement.prototype, "DesiredSize", 
	System.Windows.UIElement.prototype.get_DesiredSize, null);
JSIL.MakeProperty(System.Windows.UIElement.prototype, "RenderTransform", 
	System.Windows.UIElement.prototype.get_RenderTransform, System.Windows.UIElement.prototype.set_RenderTransform);
Object.defineProperty(System.Windows.UIElement, "PROPERTYINDEX_UIELEMENT_MOUSELEFTBUTTONDOWN", {
		"value": 23013}
);
Object.defineProperty(System.Windows.UIElement, "PROPERTYINDEX_UIELEMENT_MOUSELEFTBUTTONUP", {
		"value": 23014}
);
Object.defineProperty(System.Windows.UIElement, "PROPERTYINDEX_UIELEMENT_MOUSEWHEEL", {
		"value": 23017}
);
Object.defineProperty(System.Windows.UIElement, "PROPERTYINDEX_UIELEMENT_KEYUP", {
		"value": 23018}
);
Object.defineProperty(System.Windows.UIElement, "PROPERTYINDEX_UIELEMENT_KEYDOWN", {
		"value": 23019}
);
Object.defineProperty(System.Windows.UIElement, "PROPERTYINDEX_UIELEMENT_TEXTINPUT", {
		"value": 23024}
);
Object.defineProperty(System.Windows.UIElement, "PROPERTYINDEX_UIELEMENT_TEXTINPUT_START", {
		"value": 23025}
);
Object.defineProperty(System.Windows.UIElement, "PROPERTYINDEX_UIELEMENT_TEXTINPUT_UPDATE", {
		"value": 23026}
);
System.Windows.UIElement.AllowDropProperty = null;
System.Windows.UIElement.OpacityProperty = null;
System.Windows.UIElement.ClipProperty = null;
System.Windows.UIElement.RenderTransformProperty = null;
System.Windows.UIElement.EffectProperty = null;
System.Windows.UIElement.ProjectionProperty = null;
System.Windows.UIElement.OpacityMaskProperty = null;
System.Windows.UIElement.RenderTransformOriginProperty = null;
System.Windows.UIElement.IsHitTestVisibleProperty = null;
System.Windows.UIElement.VisibilityProperty = null;
System.Windows.UIElement.RenderSizeProperty = null;
System.Windows.UIElement.UseLayoutRoundingProperty = null;
System.Windows.UIElement.CacheModeProperty = null;
System.Windows.UIElement.ManipulationStartedEvent = null;
System.Windows.UIElement.ManipulationDeltaEvent = null;
System.Windows.UIElement.ManipulationCompletedEvent = null;
System.Windows.UIElement.TapEvent = null;
System.Windows.UIElement.DoubleTapEvent = null;
System.Windows.UIElement.HoldEvent = null;
System.Windows.UIElement.KeyDownEvent = null;
System.Windows.UIElement.KeyUpEvent = null;
System.Windows.UIElement.MouseLeftButtonDownEvent = null;
System.Windows.UIElement.MouseLeftButtonUpEvent = null;
System.Windows.UIElement.MouseWheelEvent = null;
System.Windows.UIElement.TextInputEvent = null;
System.Windows.UIElement.TextInputStartEvent = null;
System.Windows.UIElement.TextInputUpdateEvent = null;
System.Windows.UIElement.prototype.m_pAP = null;
System.Windows.UIElement._cctor = function () {
	System.Windows.UIElement.AllowDropProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13018, System.Boolean);
	System.Windows.UIElement.OpacityProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13000, System.Double);
	System.Windows.UIElement.ClipProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13001, System.Windows.Media.Geometry);
	System.Windows.UIElement.RenderTransformProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13002, System.Windows.Media.Transform);
	System.Windows.UIElement.EffectProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13016, System.Windows.Media.Effects.Effect);
	System.Windows.UIElement.ProjectionProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13017, System.Windows.Media.Projection);
	System.Windows.UIElement.OpacityMaskProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13006, System.Windows.Media.Brush);
	System.Windows.UIElement.RenderTransformOriginProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13009, System.Windows.Point);
	System.Windows.UIElement.IsHitTestVisibleProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13012, System.Boolean);
	System.Windows.UIElement.VisibilityProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13013, System.Windows.Visibility);
	System.Windows.UIElement.RenderSizeProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13014, System.Windows.Size);
	System.Windows.UIElement.UseLayoutRoundingProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13015, System.Boolean);
	System.Windows.UIElement.CacheModeProperty = System.Windows.DependencyProperty.RegisterCoreProperty(23035, System.Windows.Media.CacheMode);
	System.Windows.UIElement.ManipulationStartedEvent = new System.Windows.RoutedEvent("UIElement.ManipulationStarted");
	System.Windows.UIElement.ManipulationDeltaEvent = new System.Windows.RoutedEvent("UIElement.ManipulationDelta");
	System.Windows.UIElement.ManipulationCompletedEvent = new System.Windows.RoutedEvent("UIElement.ManipulationCompleted");
	System.Windows.UIElement.TapEvent = new System.Windows.RoutedEvent("UIElement.Tap");
	System.Windows.UIElement.DoubleTapEvent = new System.Windows.RoutedEvent("UIElement.DoubleTap");
	System.Windows.UIElement.HoldEvent = new System.Windows.RoutedEvent("UIElement.Hold");
	System.Windows.UIElement.KeyDownEvent = new System.Windows.RoutedEvent("UIElement.KeyDown");
	System.Windows.UIElement.KeyUpEvent = new System.Windows.RoutedEvent("UIElement.KeyUp");
	System.Windows.UIElement.MouseLeftButtonDownEvent = new System.Windows.RoutedEvent("UIElement.MouseLeftButtonDown");
	System.Windows.UIElement.MouseLeftButtonUpEvent = new System.Windows.RoutedEvent("UIElement.MouseLeftButtonUp");
	System.Windows.UIElement.MouseWheelEvent = new System.Windows.RoutedEvent("UIElement.MouseWheel");
	System.Windows.UIElement.TextInputEvent = new System.Windows.RoutedEvent("UIElement.TextInput");
	System.Windows.UIElement.TextInputStartEvent = new System.Windows.RoutedEvent("UIElement.TextInputStart");
	System.Windows.UIElement.TextInputUpdateEvent = new System.Windows.RoutedEvent("UIElement.TextInputUpdate");
};

System.Windows.FrameworkElement.prototype._ctor$0 = function (nKnownTypeIndex) {
	System.Windows.UIElement.prototype._ctor.call(this, nKnownTypeIndex);
};
System.Windows.FrameworkElement.prototype.add_Loaded = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23050, null), value);
};
System.Windows.FrameworkElement.prototype.remove_Loaded = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23050, null), value);
};
System.Windows.FrameworkElement.prototype.add_Unloaded = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23051, null), value);
};
System.Windows.FrameworkElement.prototype.remove_Unloaded = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23051, null), value);
};
System.Windows.FrameworkElement.prototype.get_Triggers = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.FrameworkElement.TriggersProperty), System.Windows.TriggerCollection);
};
System.Windows.FrameworkElement.prototype.get_Resources = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.FrameworkElement.ResourcesProperty), System.Windows.ResourceDictionary);
};
System.Windows.FrameworkElement.prototype.set_Resources = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.FrameworkElement.ResourcesProperty, value);
};
System.Windows.FrameworkElement.prototype.get_ActualWidth = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.FrameworkElement.ActualWidthProperty), System.Double);
};
System.Windows.FrameworkElement.prototype.get_ActualHeight = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.FrameworkElement.ActualHeightProperty), System.Double);
};
System.Windows.FrameworkElement.prototype.get_Width = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.FrameworkElement.WidthProperty), System.Double);
};
System.Windows.FrameworkElement.prototype.set_Width = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.FrameworkElement.WidthProperty, value);
};
System.Windows.FrameworkElement.prototype.get_Height = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.FrameworkElement.HeightProperty), System.Double);
};
System.Windows.FrameworkElement.prototype.set_Height = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.FrameworkElement.HeightProperty, value);
};
System.Windows.FrameworkElement.prototype.get_MinWidth = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.FrameworkElement.MinWidthProperty), System.Double);
};
System.Windows.FrameworkElement.prototype.set_MinWidth = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.FrameworkElement.MinWidthProperty, value);
};
System.Windows.FrameworkElement.prototype.get_MaxWidth = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.FrameworkElement.MaxWidthProperty), System.Double);
};
System.Windows.FrameworkElement.prototype.set_MaxWidth = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.FrameworkElement.MaxWidthProperty, value);
};
System.Windows.FrameworkElement.prototype.get_MinHeight = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.FrameworkElement.MinHeightProperty), System.Double);
};
System.Windows.FrameworkElement.prototype.set_MinHeight = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.FrameworkElement.MinHeightProperty, value);
};
System.Windows.FrameworkElement.prototype.get_MaxHeight = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.FrameworkElement.MaxHeightProperty), System.Double);
};
System.Windows.FrameworkElement.prototype.set_MaxHeight = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.FrameworkElement.MaxHeightProperty, value);
};
System.Windows.FrameworkElement.prototype.get_HorizontalAlignment = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.FrameworkElement.HorizontalAlignmentProperty), System.Windows.HorizontalAlignment);
};
System.Windows.FrameworkElement.prototype.set_HorizontalAlignment = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.FrameworkElement.HorizontalAlignmentProperty, value);
};
System.Windows.FrameworkElement.prototype.get_VerticalAlignment = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.FrameworkElement.VerticalAlignmentProperty), System.Windows.VerticalAlignment);
};
System.Windows.FrameworkElement.prototype.set_VerticalAlignment = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.FrameworkElement.VerticalAlignmentProperty, value);
};
System.Windows.FrameworkElement.prototype.get_Margin = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.FrameworkElement.MarginProperty), System.Windows.Thickness);
};
System.Windows.FrameworkElement.prototype.set_Margin = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.FrameworkElement.MarginProperty, value.MemberwiseClone());
};
System.Windows.FrameworkElement.prototype.get_Style = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.FrameworkElement.StyleProperty), System.Windows.Style);
};
System.Windows.FrameworkElement.prototype.set_Style = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.FrameworkElement.StyleProperty, value);
};
System.Windows.FrameworkElement.prototype.get_Parent = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.FrameworkElement.ParentProperty), System.Windows.DependencyObject);
};
System.Windows.FrameworkElement.prototype.get_FlowDirection = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.FrameworkElement.FlowDirectionProperty), System.Windows.FlowDirection);
};
System.Windows.FrameworkElement.prototype.set_FlowDirection = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.FrameworkElement.FlowDirectionProperty, value);
};
System.Windows.FrameworkElement.prototype._ctor$1 = function () {
	this._ctor$0(67);
};
System.Windows.FrameworkElement.prototype.get_Name = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.FrameworkElement.NameProperty), System.String);
};
System.Windows.FrameworkElement.prototype.set_Name = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.FrameworkElement.NameProperty, value);
};
System.Windows.FrameworkElement.prototype.get_Tag = function () {
	return this.GetValueInternal(System.Windows.FrameworkElement.TagProperty);
};
System.Windows.FrameworkElement.prototype.set_Tag = function (value) {
	this.TagInternal = value;
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.FrameworkElement.TagProperty, value);
};
System.Windows.FrameworkElement.prototype.get_TagInternal = function () {
	return System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.FrameworkElement.TagInternalProperty);
};
System.Windows.FrameworkElement.prototype.set_TagInternal = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.FrameworkElement.TagInternalProperty, value);
};
System.Windows.FrameworkElement.prototype.GetValueInternal = function (dp) {
	if (dp === System.Windows.FrameworkElement.TagProperty) {
		var tagInternal = this.TagInternal;
		if (tagInternal !== null) {
			return tagInternal;
		}
	}
	return System.Windows.DependencyObject.prototype.GetValueInternal.call(this, dp);
};
System.Windows.FrameworkElement.prototype.get_Cursor = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.FrameworkElement.CursorProperty), System.Windows.Input.Cursor);
};
System.Windows.FrameworkElement.prototype.set_Cursor = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.FrameworkElement.CursorProperty, value);
};
System.Windows.FrameworkElement.prototype.get_Language = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.FrameworkElement.LanguageProperty), System.Windows.Markup.XmlLanguage);
};
System.Windows.FrameworkElement.prototype.set_Language = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.FrameworkElement.LanguageProperty, value);
};
System.Windows.FrameworkElement.prototype.MeasureOverride = function (availableSize) {
	return $asm02.MS.Internal.XcpImports.FrameworkElement_MeasureOverride(this, availableSize);
};
System.Windows.FrameworkElement.prototype.ArrangeOverride = function (finalSize) {
	return $asm02.MS.Internal.XcpImports.FrameworkElement_ArrangeOverride(this, finalSize);
};
System.Windows.FrameworkElement.MeasureOverride = function (nativeTarget, inWidth, inHeight, /* ref */ outWidth, /* ref */ outHeight) {
	try {
		var managedPeer = $asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeTarget);
		var frameworkElement = JSIL.TryCast(managedPeer, System.Windows.FrameworkElement);
		if (frameworkElement === null) {
			throw JSIL.New(System.ArgumentException, "_ctor$1", ["nativeTarget"]);
		}
		var availableSize = new System.Windows.Size();
		var size = new System.Windows.Size();
		availableSize.Width = inWidth;
		availableSize.Height = inHeight;
		size = frameworkElement.MeasureOverride(availableSize.MemberwiseClone()).MemberwiseClone();
		if (!(!System.Double.IsPositiveInfinity(size.Width) && 
				!System.Double.IsPositiveInfinity(size.Height) && 
				!System.Double.IsNaN(size.Width) && !System.Double.IsNaN(size.Height))) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [System.String.Format(System.Globalization.CultureInfo.InvariantCulture, $asm02.System.Windows.Resx.GetString$2("FrameworkElement_LayoutMeasure_InfinityNaNReturned"), [JSIL.GetType(frameworkElement).FullName])]);
		}
		outWidth.value = size.Width;
		outHeight.value = size.Height;
	} catch ($exception) {
		var arg_C8_0 = $exception;
		outWidth.value = 0;
		outHeight.value = 0;
		return $asm02.MS.Internal.Error.GetXresultForException(arg_C8_0);
	}
	return 0;
};
System.Windows.FrameworkElement.ArrangeOverride = function (nativeTarget, inWidth, inHeight, /* ref */ outWidth, /* ref */ outHeight) {
	try {
		var managedPeer = $asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeTarget);
		var frameworkElement = JSIL.TryCast(managedPeer, System.Windows.FrameworkElement);
		if (frameworkElement === null) {
			throw JSIL.New(System.ArgumentException, "_ctor$1", ["nativeTarget"]);
		}
		var finalSize = new System.Windows.Size();
		var size = new System.Windows.Size();
		finalSize.Width = inWidth;
		finalSize.Height = inHeight;
		size = frameworkElement.ArrangeOverride(finalSize.MemberwiseClone()).MemberwiseClone();
		if (!(!System.Double.IsPositiveInfinity(size.Width) && 
				!System.Double.IsPositiveInfinity(size.Height) && 
				!System.Double.IsNaN(size.Width) && !System.Double.IsNaN(size.Height))) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [System.String.Format(System.Globalization.CultureInfo.InvariantCulture, $asm02.System.Windows.Resx.GetString$2("FrameworkElement_LayoutArrange_InfinityNaNReturned"), [JSIL.GetType(frameworkElement).FullName])]);
		}
		outWidth.value = size.Width;
		outHeight.value = size.Height;
	} catch ($exception) {
		var arg_C8_0 = $exception;
		outWidth.value = 0;
		outHeight.value = 0;
		return $asm02.MS.Internal.Error.GetXresultForException(arg_C8_0);
	}
	return 0;
};
System.Windows.FrameworkElement.OnApplyTemplate = function (nativeTarget) {
	try {
		var managedPeer = $asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeTarget);
		var frameworkElement = JSIL.TryCast(managedPeer, System.Windows.FrameworkElement);
		if (frameworkElement === null) {
			var result = -2147024809;
		} else {
			frameworkElement.OnApplyTemplate();
			result = 0;
		}
	} catch ($exception) {
		var arg_23_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForException(arg_23_0);
	}
	return result;
};
System.Windows.FrameworkElement.prototype.OnApplyTemplate = function () {
	$asm02.MS.Internal.XcpImports.FrameworkElement_OnApplyTemplate(this);
};
System.Windows.FrameworkElement.prototype.SetBinding = function (dp, binding) {
	return System.Windows.Data.BindingOperations.SetBinding(this, dp, binding);
};
System.Windows.FrameworkElement.prototype.OnTreeParentUpdated = function (newParent, bIsNewParentAlive) {
	System.Windows.DependencyObject.prototype.OnTreeParentUpdated.call(this, newParent, bIsNewParentAlive);
	if (!bIsNewParentAlive) {
		return;
	}
	var e = new $asm02.System.Windows.DataContextChangedEventArgs(System.Windows.DataContextChangedReason.EnteringLiveTree);
	this.OnDataContextChanged(e);
	this.NotifyDataContextChanged(e);
};
System.Windows.FrameworkElement.prototype.NotifyDataContextChanged = function (e) {
	if (!((this._treeChildren === null) || (this._treeChildren.Count <= 0))) {
		var array = JSIL.Array.New(System.Windows.DependencyObject, JSIL.Cast(this._treeChildren.Keys, System.Collections.Generic.Dictionary$b2.KeyCollection.Of($asm02.MS.Internal.IManagedPeerBase, System.Object)).Count);
		JSIL.Cast(this._treeChildren.Keys, System.Collections.Generic.Dictionary$b2.KeyCollection.Of($asm02.MS.Internal.IManagedPeerBase, System.Object)).CopyTo(array, 0);
		var num = array.length;
	__loop0__: 
		for (var i = 0; i < num; ++i) {
			var frameworkElement = JSIL.TryCast(array[i], System.Windows.FrameworkElement);
			if (frameworkElement !== null) {
				frameworkElement.OnAncestorDataContextChanged(e);
			}
		}
	}
	var toolTip = JSIL.TryCast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.ToolTipService.ToolTipObjectProperty), System.Windows.Controls.ToolTip);
	if (toolTip !== null) {
		toolTip.OnAncestorDataContextChanged(e);
	}
};
System.Windows.FrameworkElement.prototype.add_SizeChanged = function (value) {
	if (this._sizeChanged === null) {
		$asm02.MS.Internal.XcpImports.WantsEvent(this, 1, 1);
	}
	this._sizeChanged = System.Delegate.Combine(this._sizeChanged, value);
};
System.Windows.FrameworkElement.prototype.remove_SizeChanged = function (value) {
	this._sizeChanged = System.Delegate.Remove(this._sizeChanged, value);
	if (this._sizeChanged === null) {
		$asm02.MS.Internal.XcpImports.WantsEvent(this, 1, 0);
	}
};
System.Windows.FrameworkElement.prototype.add_LayoutUpdated = function (value) {
	var list = JSIL.TryCast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.FrameworkElement.InstanceDelegateStoreProperty), System.Collections.Generic.List$b1.Of($asm02.System.Windows.FrameworkElement.WeakRefSTRUCT));
	if (System.Windows.FrameworkElement._staticDelegateList === null) {
		$asm02.MS.Internal.XcpImports.WantsEvent(this, 2, 1);
		System.Windows.FrameworkElement._staticDelegateList = new (System.Collections.Generic.List$b1.Of(System.WeakReference)) ();
	}
	if (list === null) {
		list = new (System.Collections.Generic.List$b1.Of($asm02.System.Windows.FrameworkElement.WeakRefSTRUCT)) ();
		System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.FrameworkElement.InstanceDelegateStoreProperty, list);
	}
	var weakReference = JSIL.New(System.WeakReference, "_ctor$1", [value]);
	var weakRefSTRUCT = new $asm02.System.Windows.FrameworkElement.WeakRefSTRUCT();
	weakRefSTRUCT._weakRefObject = weakReference;
	weakRefSTRUCT._actualObject = value;
	System.Windows.FrameworkElement._staticDelegateList.Add(weakReference);
	list.Add(weakRefSTRUCT);
};
System.Windows.FrameworkElement.prototype.remove_LayoutUpdated = function (value) {
	var list = JSIL.TryCast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.FrameworkElement.InstanceDelegateStoreProperty), System.Collections.Generic.List$b1.Of($asm02.System.Windows.FrameworkElement.WeakRefSTRUCT));
	if (list !== null) {
	__loop0__: 
		for (var i = 0; i < list.Count; ++i) {
			var eventHandler = JSIL.TryCast(list.get_Item(i)._actualObject, System.EventHandler);
			if (!((eventHandler === null) || !System.Delegate.op_Equality(eventHandler, value))) {
				if (System.Windows.FrameworkElement._staticDelegateList !== null) {
					System.Windows.FrameworkElement._staticDelegateList.Remove(list.get_Item(i)._weakRefObject);
				}
				list.RemoveAt(i);
				return;
			}
		}
	}
};
System.Windows.FrameworkElement.prototype.add_BindingValidationError = function (value) {
	this.BindingValidationError = System.Delegate.Combine(this.BindingValidationError, value);
};
System.Windows.FrameworkElement.prototype.remove_BindingValidationError = function (value) {
	this.BindingValidationError = System.Delegate.Remove(this.BindingValidationError, value);
};
System.Windows.FrameworkElement.prototype.OnBindingValidationError = function (args) {
	if (this.BindingValidationError !== null) {
		this.BindingValidationError(this, args);
	}
};
System.Windows.FrameworkElement.prototype.CalculateBubblePath = function () {
	var frameworkElement = this;
	var list = new (System.Collections.Generic.List$b1.Of(System.Windows.FrameworkElement)) ();
__loop0__: 
	do {
		list.Add(frameworkElement);
		frameworkElement = JSIL.TryCast(System.Windows.Media.VisualTreeHelper.GetParent(frameworkElement), System.Windows.FrameworkElement);
	} while (frameworkElement !== null);
	return list;
};
System.Windows.FrameworkElement.prototype.RaiseBindingValidationError = function (args) {
	var list = this.CalculateBubblePath();
	args.OriginalSource = this;
	var enumerator = (list.GetEnumerator());
	try {
	__loop0__: 
		while (enumerator.MoveNext()) {
			var current = enumerator.Current;
			if (!args.Handled) {
				current.OnBindingValidationError(args);
			}
		}
	} finally {
		enumerator.IDisposable_Dispose();
	}
};
System.Windows.FrameworkElement.prototype.OnSizeChanged = function (sender, e) {
	if (this._sizeChanged !== null) {
		this._sizeChanged(sender, e);
	}
};
System.Windows.FrameworkElement.OnLayoutUpdated = function (sender, e) {
	if (System.Windows.FrameworkElement._staticDelegateList !== null) {
	__loop0__: 
		for (var i = 0; i < System.Windows.FrameworkElement._staticDelegateList.Count; ++i) {
			if (System.Windows.FrameworkElement._staticDelegateList.get_Item(i).Target === null) {
				System.Windows.FrameworkElement._staticDelegateList.Remove(System.Windows.FrameworkElement._staticDelegateList.get_Item(i));
				--i;
			} else {
				var eventHandler = JSIL.TryCast(System.Windows.FrameworkElement._staticDelegateList.get_Item(i).Target, System.EventHandler);
				if (eventHandler !== null) {
					eventHandler(sender, e);
				}
			}
		}
	}
};
System.Windows.FrameworkElement.prototype.OnAncestorDataContextChanged = function (e) {
	if (!this.IsDataContextChangeRelevant(e)) {
		return;
	}
	this.OnDataContextChanged(e);
	this.NotifyDataContextChanged(e);
};
System.Windows.FrameworkElement.prototype.IsDataContextChangeRelevant = function (e) {
	return (this.IsDataContextBound || 
		(e.ChangeReason === System.Windows.DataContextChangedReason.EnteringLiveTree) || (!JSIL.Cast(e.ChangeReason, System.Boolean) && 
			!System.Windows.DependencyObject.prototype.IsPropertyLocal.call(this, JSIL.TryCast(System.Windows.FrameworkElement.DataContextProperty, $asm02.System.Windows.CoreDependencyProperty))));
};
System.Windows.FrameworkElement.prototype.get_DataContext = function () {
	return System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.FrameworkElement.DataContextProperty);
};
System.Windows.FrameworkElement.prototype.set_DataContext = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.FrameworkElement.DataContextProperty, value);
};
System.Windows.FrameworkElement.prototype.OnDataContextChanged = function (e) {
	if (this.DataContextChanged !== null) {
		this.DataContextChanged(this, e);
	}
};
System.Windows.FrameworkElement.prototype.OnPropertyChanged = function (dp) {
	if (dp === System.Windows.FrameworkElement.DataContextProperty) {
		var e = new $asm02.System.Windows.DataContextChangedEventArgs(System.Windows.DataContextChangedReason.NewDataContext);
		this.OnDataContextChanged(e);
		this.NotifyDataContextChanged(e);
	}
	System.Windows.DependencyObject.prototype.OnPropertyChanged.call(this, dp);
};
System.Windows.FrameworkElement.prototype.GetValueFromStyle = function (property, /* ref */ value) {
	return $asm02.MS.Internal.XcpImports.GetManagedPropertyValueFromStyle(false, this, property, /* ref */ value);
};
System.Windows.FrameworkElement.prototype.HasFocus = function () {
	var dependencyObject = JSIL.TryCast(System.Windows.Input.FocusManager.GetFocusedElement(), System.Windows.DependencyObject);
	var hyperlink = JSIL.TryCast(dependencyObject, System.Windows.Documents.Hyperlink);
	if (hyperlink !== null) {
		dependencyObject = hyperlink.HostFrameworkElement;
	}
	var dependencyObject2 = dependencyObject;
__loop0__: 
	while (dependencyObject2) {
		if (System.Object.ReferenceEquals(dependencyObject2, this)) {
			return true;
		}
		dependencyObject2 = System.Windows.Media.VisualTreeHelper.GetParent(dependencyObject2);
	}
	return false;
};
System.Windows.FrameworkElement.prototype.get_TemplatedParent = function () {
	return $asm02.MS.Internal.XcpImports.GetTemplatedParent(this);
};
System.Windows.FrameworkElement.prototype.ApplyTemplateInternal = function () {
	return $asm02.MS.Internal.XcpImports.FrameworkElement_ApplyTemplate(this);
};
System.Windows.FrameworkElement.prototype.FindNameInPage = function (name, calledFromUserControl) {
	var obj = null;
	var frameworkElement = this;
__loop0__: 
	for (obj = (this.findElement(name)); (obj === null) && frameworkElement; ) {
		var frameworkElement2 = JSIL.TryCast(frameworkElement.TemplatedParent, System.Windows.FrameworkElement);
		if (frameworkElement2 === null) {
			var frameworkElement3 = JSIL.TryCast($asm02.MS.Internal.XcpImports.GetInheritanceParent(frameworkElement), System.Windows.FrameworkElement);
			var panel = JSIL.TryCast(frameworkElement3, System.Windows.Controls.Panel);
			if (!((panel === null) || !panel.IsItemsHost)) {
				frameworkElement = panel;
			} else {
				frameworkElement = null;
			}
		} else {
			frameworkElement = frameworkElement2;
		}
		if (frameworkElement !== null) {
			obj = (this.findElement(name));
		}
	}
	return obj;
};
System.Windows.FrameworkElement.prototype.GetBindingExpression = function (dp) {
	return JSIL.TryCast(System.Windows.DependencyObject.prototype.ReadLocalValue.call(this, dp), System.Windows.Data.BindingExpression);
};
System.Windows.FrameworkElement.prototype.add_DataContextChanged = function (value) {
	this.DataContextChanged = System.Delegate.Combine(this.DataContextChanged, value);
};
System.Windows.FrameworkElement.prototype.remove_DataContextChanged = function (value) {
	this.DataContextChanged = System.Delegate.Remove(this.DataContextChanged, value);
};
System.Windows.FrameworkElement.prototype.get_IsDataContextBound = function () {
	return this._isDataContextBound;
};
System.Windows.FrameworkElement.prototype.set_IsDataContextBound = function (value) {
	this._isDataContextBound = value;
};
System.Windows.FrameworkElement.prototype.GetPlainText = function () {
	return System.String.Empty;
};
System.Windows.FrameworkElement.GetStringFromObject = function (businessObject) {
	if (businessObject === null) {
		return System.String.Empty;
	}
	var frameworkElement = JSIL.TryCast(businessObject, System.Windows.FrameworkElement);
	if (frameworkElement !== null) {
		return frameworkElement.GetPlainText();
	}
	return businessObject.toString();
};
System.Windows.FrameworkElement.prototype.add_CorePropertyChanged = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(25100, null), value);
};
System.Windows.FrameworkElement.prototype.remove_CorePropertyChanged = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(25100, null), value);
};
System.Windows.FrameworkElement.prototype.add__sizeChanged = function (value) {
	this._sizeChanged = System.Delegate.Combine(this._sizeChanged, value);
};
System.Windows.FrameworkElement.prototype.remove__sizeChanged = function (value) {
	this._sizeChanged = System.Delegate.Remove(this._sizeChanged, value);
};
JSIL.OverloadedMethod(System.Windows.FrameworkElement.prototype, "_ctor", [
		["_ctor$0", [System.UInt32]], 
		["_ctor$1", []]
	]);
JSIL.MakeProperty(System.Windows.FrameworkElement.prototype, "Triggers", 
	System.Windows.FrameworkElement.prototype.get_Triggers, null);
JSIL.MakeProperty(System.Windows.FrameworkElement.prototype, "Resources", 
	System.Windows.FrameworkElement.prototype.get_Resources, System.Windows.FrameworkElement.prototype.set_Resources);
JSIL.MakeProperty(System.Windows.FrameworkElement.prototype, "ActualWidth", 
	System.Windows.FrameworkElement.prototype.get_ActualWidth, null);
JSIL.MakeProperty(System.Windows.FrameworkElement.prototype, "ActualHeight", 
	System.Windows.FrameworkElement.prototype.get_ActualHeight, null);
JSIL.MakeProperty(System.Windows.FrameworkElement.prototype, "Width", 
	System.Windows.FrameworkElement.prototype.get_Width, System.Windows.FrameworkElement.prototype.set_Width);
JSIL.MakeProperty(System.Windows.FrameworkElement.prototype, "Height", 
	System.Windows.FrameworkElement.prototype.get_Height, System.Windows.FrameworkElement.prototype.set_Height);
JSIL.MakeProperty(System.Windows.FrameworkElement.prototype, "MinWidth", 
	System.Windows.FrameworkElement.prototype.get_MinWidth, System.Windows.FrameworkElement.prototype.set_MinWidth);
JSIL.MakeProperty(System.Windows.FrameworkElement.prototype, "MaxWidth", 
	System.Windows.FrameworkElement.prototype.get_MaxWidth, System.Windows.FrameworkElement.prototype.set_MaxWidth);
JSIL.MakeProperty(System.Windows.FrameworkElement.prototype, "MinHeight", 
	System.Windows.FrameworkElement.prototype.get_MinHeight, System.Windows.FrameworkElement.prototype.set_MinHeight);
JSIL.MakeProperty(System.Windows.FrameworkElement.prototype, "MaxHeight", 
	System.Windows.FrameworkElement.prototype.get_MaxHeight, System.Windows.FrameworkElement.prototype.set_MaxHeight);
JSIL.MakeProperty(System.Windows.FrameworkElement.prototype, "HorizontalAlignment", 
	System.Windows.FrameworkElement.prototype.get_HorizontalAlignment, System.Windows.FrameworkElement.prototype.set_HorizontalAlignment);
JSIL.MakeProperty(System.Windows.FrameworkElement.prototype, "VerticalAlignment", 
	System.Windows.FrameworkElement.prototype.get_VerticalAlignment, System.Windows.FrameworkElement.prototype.set_VerticalAlignment);
JSIL.MakeProperty(System.Windows.FrameworkElement.prototype, "Margin", 
	System.Windows.FrameworkElement.prototype.get_Margin, System.Windows.FrameworkElement.prototype.set_Margin);
JSIL.MakeProperty(System.Windows.FrameworkElement.prototype, "Style", 
	System.Windows.FrameworkElement.prototype.get_Style, System.Windows.FrameworkElement.prototype.set_Style);
JSIL.MakeProperty(System.Windows.FrameworkElement.prototype, "Parent", 
	System.Windows.FrameworkElement.prototype.get_Parent, null);
JSIL.MakeProperty(System.Windows.FrameworkElement.prototype, "FlowDirection", 
	System.Windows.FrameworkElement.prototype.get_FlowDirection, System.Windows.FrameworkElement.prototype.set_FlowDirection);
JSIL.MakeProperty(System.Windows.FrameworkElement.prototype, "Name", 
	System.Windows.FrameworkElement.prototype.get_Name, System.Windows.FrameworkElement.prototype.set_Name);
JSIL.MakeProperty(System.Windows.FrameworkElement.prototype, "Tag", 
	System.Windows.FrameworkElement.prototype.get_Tag, System.Windows.FrameworkElement.prototype.set_Tag);
JSIL.MakeProperty(System.Windows.FrameworkElement.prototype, "TagInternal", 
	System.Windows.FrameworkElement.prototype.get_TagInternal, System.Windows.FrameworkElement.prototype.set_TagInternal);
JSIL.MakeProperty(System.Windows.FrameworkElement.prototype, "Cursor", 
	System.Windows.FrameworkElement.prototype.get_Cursor, System.Windows.FrameworkElement.prototype.set_Cursor);
JSIL.MakeProperty(System.Windows.FrameworkElement.prototype, "Language", 
	System.Windows.FrameworkElement.prototype.get_Language, System.Windows.FrameworkElement.prototype.set_Language);
JSIL.MakeProperty(System.Windows.FrameworkElement.prototype, "DataContext", 
	System.Windows.FrameworkElement.prototype.get_DataContext, System.Windows.FrameworkElement.prototype.set_DataContext);
JSIL.MakeProperty(System.Windows.FrameworkElement.prototype, "TemplatedParent", 
	System.Windows.FrameworkElement.prototype.get_TemplatedParent, null);
JSIL.MakeProperty(System.Windows.FrameworkElement.prototype, "IsDataContextBound", 
	System.Windows.FrameworkElement.prototype.get_IsDataContextBound, System.Windows.FrameworkElement.prototype.set_IsDataContextBound);
System.Windows.FrameworkElement.TriggersProperty = null;
System.Windows.FrameworkElement.ResourcesProperty = null;
System.Windows.FrameworkElement.LanguageProperty = null;
System.Windows.FrameworkElement.ActualWidthProperty = null;
System.Windows.FrameworkElement.ActualHeightProperty = null;
System.Windows.FrameworkElement.WidthProperty = null;
System.Windows.FrameworkElement.HeightProperty = null;
System.Windows.FrameworkElement.MinWidthProperty = null;
System.Windows.FrameworkElement.MaxWidthProperty = null;
System.Windows.FrameworkElement.MinHeightProperty = null;
System.Windows.FrameworkElement.MaxHeightProperty = null;
System.Windows.FrameworkElement.HorizontalAlignmentProperty = null;
System.Windows.FrameworkElement.VerticalAlignmentProperty = null;
System.Windows.FrameworkElement.MarginProperty = null;
System.Windows.FrameworkElement.StyleProperty = null;
System.Windows.FrameworkElement.ParentProperty = null;
System.Windows.FrameworkElement.FlowDirectionProperty = null;
System.Windows.FrameworkElement.NameProperty = null;
System.Windows.FrameworkElement.TagProperty = null;
System.Windows.FrameworkElement.TagInternalProperty = null;
System.Windows.FrameworkElement.LoadedEvent = null;
System.Windows.FrameworkElement.CursorProperty = null;
System.Windows.FrameworkElement.InstanceDelegateStoreProperty = null;
System.Windows.FrameworkElement.prototype.BindingValidationError = null;
System.Windows.FrameworkElement.DataContextProperty = null;
System.Windows.FrameworkElement.prototype.DataContextChanged = null;
System.Windows.FrameworkElement.prototype._isDataContextBound = false;
System.Windows.FrameworkElement.prototype._sizeChanged = null;
System.Windows.FrameworkElement._staticDelegateList = null;
System.Windows.FrameworkElement._cctor = function () {
	System.Windows.FrameworkElement.TriggersProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13003, System.Windows.TriggerCollection);
	System.Windows.FrameworkElement.ResourcesProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13112, System.Windows.ResourceDictionary);
	System.Windows.FrameworkElement.LanguageProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13120, System.Windows.Markup.XmlLanguage);
	System.Windows.FrameworkElement.ActualWidthProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13102, System.Double);
	System.Windows.FrameworkElement.ActualHeightProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13103, System.Double);
	System.Windows.FrameworkElement.WidthProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13100, System.Double);
	System.Windows.FrameworkElement.HeightProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13101, System.Double);
	System.Windows.FrameworkElement.MinWidthProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13104, System.Double);
	System.Windows.FrameworkElement.MaxWidthProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13105, System.Double);
	System.Windows.FrameworkElement.MinHeightProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13106, System.Double);
	System.Windows.FrameworkElement.MaxHeightProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13107, System.Double);
	System.Windows.FrameworkElement.HorizontalAlignmentProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13108, System.Windows.HorizontalAlignment);
	System.Windows.FrameworkElement.VerticalAlignmentProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13109, System.Windows.VerticalAlignment);
	System.Windows.FrameworkElement.MarginProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13110, System.Windows.Thickness);
	System.Windows.FrameworkElement.StyleProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13131, System.Windows.Style);
	System.Windows.FrameworkElement.ParentProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13132, System.Windows.DependencyObject);
	System.Windows.FrameworkElement.FlowDirectionProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13134, System.Windows.FlowDirection);
	System.Windows.FrameworkElement.NameProperty = System.Windows.DependencyProperty.RegisterCoreProperty(17000, System.String);
	System.Windows.FrameworkElement.TagProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13113, System.Object);
	System.Windows.FrameworkElement.TagInternalProperty = System.Windows.DependencyProperty.Register$1(
		false, 
		"TagInternal", 
		System.Object, 
		System.Windows.FrameworkElement, 
		null, 
		false
	);
	System.Windows.FrameworkElement.LoadedEvent = new System.Windows.RoutedEvent("FrameworkElement.Loaded");
	System.Windows.FrameworkElement.CursorProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13111, System.Windows.Input.Cursor);
	System.Windows.FrameworkElement.InstanceDelegateStoreProperty = System.Windows.DependencyProperty.Register$0("InstanceDelegateStore", System.Collections.Generic.List$b1.Of(System.Windows.FrameworkElement.WeakRefSTRUCT), System.Windows.FrameworkElement, null);
	System.Windows.FrameworkElement.DataContextProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13130, System.Object);
	System.Windows.FrameworkElement._staticDelegateList = null;
};

$asm02.System.Windows.FrameworkElement.WeakRefSTRUCT.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm02.System.Windows.FrameworkElement.WeakRefSTRUCT.prototype._weakRefObject = null;
$asm02.System.Windows.FrameworkElement.WeakRefSTRUCT.prototype._actualObject = null;

System.Windows.PresentationFrameworkCollection$b1.prototype._ctor$0 = function () {
	this._ctor$1(2);
};
System.Windows.PresentationFrameworkCollection$b1.prototype._ctor$1 = function (nKnownTypeIndex) {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, nKnownTypeIndex);
	this._version = 0;
};
System.Windows.PresentationFrameworkCollection$b1.prototype.AddImpl = function (value) {
	if (!((value === null) || JSIL.TryCast(value, this.T))) {
		throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm02.System.Windows.Resx.GetString$2("InvalidArgument"), "value"]);
	}
	++this._version;
	var result = $asm02.MS.Internal.XcpImports.Collection_Add$b1(this.T)(this, value);
	this.NotifyCountChanged();
	return result;
};
System.Windows.PresentationFrameworkCollection$b1.prototype.AddDependencyObject = function (value) {
	if (value !== null) {
		++this._version;
		$asm02.MS.Internal.XcpImports.Collection_AddDependencyObject$b1(this.T)(this, value);
		this.NotifyCountChanged();
		return;
	}
	throw JSIL.New(System.ArgumentNullException, "_ctor$0", []);
};
System.Windows.PresentationFrameworkCollection$b1.prototype.AddPoint = function (p) {
	++this._version;
	$asm02.MS.Internal.XcpImports.Collection_AddPoint$b1(this.T)(this, p);
	this.NotifyCountChanged();
};
System.Windows.PresentationFrameworkCollection$b1.prototype.AddDouble = function (value) {
	++this._version;
	$asm02.MS.Internal.XcpImports.Collection_AddDouble$b1(this.T)(this, value);
	this.NotifyCountChanged();
};
System.Windows.PresentationFrameworkCollection$b1.prototype.Add = function (value) {
	this.AddInternal(value);
};
System.Windows.PresentationFrameworkCollection$b1.prototype.IList_Add = function (value) {
	return this.AddImpl(value);
};
System.Windows.PresentationFrameworkCollection$b1.prototype.ClearImpl = function () {
	$asm02.MS.Internal.XcpImports.Collection_Clear$b1(this.T)(this);
	this.NotifyCountChanged();
};
System.Windows.PresentationFrameworkCollection$b1.prototype.Clear = function () {
	this.ClearImpl();
};
System.Windows.PresentationFrameworkCollection$b1.prototype.Contains = function (value) {
	return this.ContainsInternal(value);
};
System.Windows.PresentationFrameworkCollection$b1.prototype.IList_Contains = function (value) {
	return this.ContainsImpl(value);
};
System.Windows.PresentationFrameworkCollection$b1.prototype.ContainsImpl = function (value) {
	return (this.IndexOfImpl(value) !== -1);
};
System.Windows.PresentationFrameworkCollection$b1.prototype.ContainsDependencyObject = function (value) {
	return (this.IndexOfDependencyObject(value) !== -1);
};
System.Windows.PresentationFrameworkCollection$b1.prototype.ContainsDouble = function (value) {
	return (this.IndexOfDouble(value) !== -1);
};
System.Windows.PresentationFrameworkCollection$b1.prototype.ContainsPoint = function (value) {
	return (this.IndexOfPoint(value) !== -1);
};
System.Windows.PresentationFrameworkCollection$b1.prototype.IndexOfImpl = function (value) {
	return $asm02.MS.Internal.XcpImports.Collection_IndexOf$b1(this.T)(this, value);
};
System.Windows.PresentationFrameworkCollection$b1.prototype.IndexOf = function (value) {
	return this.IndexOfInternal(value);
};
System.Windows.PresentationFrameworkCollection$b1.prototype.IList_IndexOf = function (value) {
	return this.IndexOfImpl(value);
};
System.Windows.PresentationFrameworkCollection$b1.prototype.IndexOfDependencyObject = function (value) {
	if (value !== null) {
		return $asm02.MS.Internal.XcpImports.Collection_IndexOfDependencyObject$b1(this.T)(this, value);
	}
	return -1;
};
System.Windows.PresentationFrameworkCollection$b1.prototype.IndexOfDouble = function (value) {
	return $asm02.MS.Internal.XcpImports.Collection_IndexOfDouble$b1(this.T)(this, value);
};
System.Windows.PresentationFrameworkCollection$b1.prototype.IndexOfPoint = function (p) {
	return $asm02.MS.Internal.XcpImports.Collection_IndexOfPoint$b1(this.T)(this, p);
};
System.Windows.PresentationFrameworkCollection$b1.prototype.InsertImpl = function (index, value) {
	if (!((index >= 0) && (index <= this.Count))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["index"]);
	}
	if (!((value === null) || JSIL.TryCast(value, this.T))) {
		throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm02.System.Windows.Resx.GetString$2("InvalidArgument"), "value"]);
	}
	$asm02.MS.Internal.XcpImports.Collection_Insert$b1(this.T)(this, index, value);
	++this._version;
	this.NotifyCountChanged();
};
System.Windows.PresentationFrameworkCollection$b1.prototype.Insert = function (index, value) {
	this.InsertInternal(index, value);
};
System.Windows.PresentationFrameworkCollection$b1.prototype.IList_Insert = function (index, value) {
	this.InsertImpl(index, value);
};
System.Windows.PresentationFrameworkCollection$b1.prototype.InsertDouble = function (index, value) {
	if (!((index >= 0) && (index <= this.Count))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["index"]);
	}
	++this._version;
	$asm02.MS.Internal.XcpImports.Collection_InsertDouble$b1(this.T)(this, index, value);
	this.NotifyCountChanged();
};
System.Windows.PresentationFrameworkCollection$b1.prototype.InsertPoint = function (index, p) {
	if (!((index >= 0) && (index <= this.Count))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["index"]);
	}
	++this._version;
	$asm02.MS.Internal.XcpImports.Collection_InsertPoint$b1(this.T)(this, index, p);
	this.NotifyCountChanged();
};
System.Windows.PresentationFrameworkCollection$b1.prototype.InsertDependencyObject = function (index, value) {
	if (!((index >= 0) && (index <= this.Count))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["index"]);
	}
	if (value !== null) {
		++this._version;
		$asm02.MS.Internal.XcpImports.Collection_InsertDependencyObject$b1(this.T)(this, index, value);
		this.NotifyCountChanged();
		return;
	}
	throw JSIL.New(System.ArgumentNullException, "_ctor$0", []);
};
System.Windows.PresentationFrameworkCollection$b1.prototype.get_IsFixedSize = function () {
	return this.IsFixedSizeImpl;
};
System.Windows.PresentationFrameworkCollection$b1.prototype.get_IsFixedSizeImpl = function () {
	return false;
};
System.Windows.PresentationFrameworkCollection$b1.prototype.get_IsReadOnly = function () {
	return this.IsReadOnlyImpl;
};
System.Windows.PresentationFrameworkCollection$b1.prototype.get_IsReadOnlyImpl = function () {
	return false;
};
System.Windows.PresentationFrameworkCollection$b1.prototype.RemoveImpl = function (value) {
	$asm02.MS.Internal.XcpImports.Collection_Remove$b1(this.T)(this, value);
	++this._version;
	this.NotifyCountChanged();
	return true;
};
System.Windows.PresentationFrameworkCollection$b1.prototype.Remove = function (value) {
	return this.RemoveInternal(value);
};
System.Windows.PresentationFrameworkCollection$b1.prototype.IList_Remove = function (value) {
	this.RemoveImpl(value);
};
System.Windows.PresentationFrameworkCollection$b1.prototype.RemoveDependencyObject = function (value) {
	if (value !== null) {
		++this._version;
		if ($asm02.MS.Internal.XcpImports.Collection_RemoveDependencyObject$b1(this.T)(this, value)) {
			this.NotifyCountChanged();
			return true;
		}
	}
	return false;
};
System.Windows.PresentationFrameworkCollection$b1.prototype.RemoveDouble = function (value) {
	++this._version;
	if ($asm02.MS.Internal.XcpImports.Collection_RemoveDouble$b1(this.T)(this, value)) {
		this.NotifyCountChanged();
		return true;
	}
	return false;
};
System.Windows.PresentationFrameworkCollection$b1.prototype.RemovePoint = function (p) {
	++this._version;
	if ($asm02.MS.Internal.XcpImports.Collection_RemovePoint$b1(this.T)(this, p)) {
		this.NotifyCountChanged();
		return true;
	}
	return false;
};
System.Windows.PresentationFrameworkCollection$b1.prototype.RemoveAtImpl = function (index) {
	if (!((index >= 0) && (index < this.Count))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["index"]);
	}
	$asm02.MS.Internal.XcpImports.Collection_RemoveAt$b1(this.T)(this, index);
	++this._version;
	this.NotifyCountChanged();
};
System.Windows.PresentationFrameworkCollection$b1.prototype.RemoveAt = function (index) {
	this.RemoveAtImpl(index);
};
System.Windows.PresentationFrameworkCollection$b1.prototype.get_Item = function (index) {
	return this.GetItemImplSkipMethodPack(index);
};
System.Windows.PresentationFrameworkCollection$b1.prototype.set_Item = function (index, value) {
	this.SetItemImplSkipMethodPack(index, value);
};
System.Windows.PresentationFrameworkCollection$b1.prototype.IList_get_Item = function (index) {
	return this.GetItemImpl(index);
};
System.Windows.PresentationFrameworkCollection$b1.prototype.IList_set_Item = function (index, value) {
	this.SetItemImpl(index, value);
};
System.Windows.PresentationFrameworkCollection$b1.prototype.GetItemImpl = function (index) {
	if (!((index >= 0) && (index < this.Count))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["index"]);
	}
	return $asm02.MS.Internal.XcpImports.Collection_GetItem$b1(this.T)(this, index);
};
System.Windows.PresentationFrameworkCollection$b1.prototype.GetItemDependencyObject = function (index) {
	if (!((index >= 0) && (index < this.Count))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["index"]);
	}
	return $asm02.MS.Internal.XcpImports.Collection_GetItemDependencyObject$b1(this.T)(this, index);
};
System.Windows.PresentationFrameworkCollection$b1.prototype.GetItemPoint = function (index) {
	if (!((index >= 0) && (index < this.Count))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["index"]);
	}
	return $asm02.MS.Internal.XcpImports.Collection_GetItemPoint$b1(this.T)(this, index);
};
System.Windows.PresentationFrameworkCollection$b1.prototype.GetItemDouble = function (index) {
	if (!((index >= 0) && (index < this.Count))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["index"]);
	}
	return $asm02.MS.Internal.XcpImports.Collection_GetItemDouble$b1(this.T)(this, index);
};
System.Windows.PresentationFrameworkCollection$b1.prototype.SetItemImpl = function (index, value) {
	if (!((index >= 0) && (index < this.Count))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["index"]);
	}
	if (!((value === null) || JSIL.TryCast(value, this.T))) {
		throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm02.System.Windows.Resx.GetString$2("InvalidArgument"), "value"]);
	}
	var count = this.Count;
	try {
		this._ignoreCountChange = true;
		this.InsertImpl(index, value);
		this.RemoveAtImpl((index + 1));
	} finally {
		this._ignoreCountChange = false;
	}
	if (count !== this.Count) {
		this.NotifyCountChanged();
	}
};
System.Windows.PresentationFrameworkCollection$b1.prototype.SetItemDependencyObject = function (index, value) {
	if (!((index >= 0) && (index < this.Count))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["index"]);
	}
	var count = this.Count;
	try {
		this._ignoreCountChange = true;
		this.InsertDependencyObject(index, value);
		this.RemoveAt((index + 1));
	} finally {
		this._ignoreCountChange = false;
	}
	if (count !== this.Count) {
		this.NotifyCountChanged();
	}
};
System.Windows.PresentationFrameworkCollection$b1.prototype.SetItemPoint = function (index, value) {
	if (!((index >= 0) && (index < this.Count))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["index"]);
	}
	var count = this.Count;
	try {
		this._ignoreCountChange = true;
		this.InsertPoint(index, value);
		this.RemoveAt((index + 1));
	} finally {
		this._ignoreCountChange = false;
	}
	if (count !== this.Count) {
		this.NotifyCountChanged();
	}
};
System.Windows.PresentationFrameworkCollection$b1.prototype.SetItemDouble = function (index, value) {
	if (!((index >= 0) && (index < this.Count))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["index"]);
	}
	var count = this.Count;
	try {
		this._ignoreCountChange = true;
		this.InsertDouble(index, value);
		this.RemoveAt((index + 1));
	} finally {
		this._ignoreCountChange = false;
	}
	if (count !== this.Count) {
		this.NotifyCountChanged();
	}
};
System.Windows.PresentationFrameworkCollection$b1.prototype.CopyTo$0 = function (array, index) {
	var count = this.Count;
__loop0__: 
	for (var i = 0; i < count; ++i) {
		array.SetValue(this.get_Item(i), (i + index));
	}
};
System.Windows.PresentationFrameworkCollection$b1.prototype.CopyTo$1 = function (array, index) {
	var count = this.Count;
__loop0__: 
	for (var i = 0; i < count; ++i) {
		array.SetValue(this.get_Item(i), (i + index));
	}
};
System.Windows.PresentationFrameworkCollection$b1.prototype.get_Count = function () {
	return this.CountImpl;
};
System.Windows.PresentationFrameworkCollection$b1.prototype.get_CountImpl = function () {
	return System.Convert.ToInt32$13(JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.PresentationFrameworkCollection$b1.Of(this.T).CountProperty), System.Double));
};
System.Windows.PresentationFrameworkCollection$b1.prototype.get_IsSynchronized = function () {
	return this.IsSynchronizedImpl;
};
System.Windows.PresentationFrameworkCollection$b1.prototype.get_IsSynchronizedImpl = function () {
	return false;
};
System.Windows.PresentationFrameworkCollection$b1.prototype.get_SyncRoot = function () {
	return this.SyncRootImpl;
};
System.Windows.PresentationFrameworkCollection$b1.prototype.get_SyncRootImpl = function () {
	return this;
};
System.Windows.PresentationFrameworkCollection$b1.prototype.GetEnumerator = function () {
	return this.GetTypedEnumeratorImpl();
};
System.Windows.PresentationFrameworkCollection$b1.prototype.GetTypedEnumeratorImpl = function () {
	return new ($asm02.System.Windows.PresentationFrameworkCollection$b1.CollectionEnum$b1.Of(this.T, this.T)) (this);
};
System.Windows.PresentationFrameworkCollection$b1.prototype.IEnumerable_GetEnumerator = function () {
	return this.GetEnumeratorImpl();
};
System.Windows.PresentationFrameworkCollection$b1.prototype.GetEnumeratorImpl = function () {
	return this.GetTypedEnumeratorImpl();
};
System.Windows.PresentationFrameworkCollection$b1.prototype.NotifyCountChanged = function () {
	if (!this._ignoreCountChange) {
		this.OnPropertyChanged(System.Windows.PresentationFrameworkCollection$b1.Of(this.T).CountProperty);
	}
};
JSIL.OverloadedMethod(System.Windows.PresentationFrameworkCollection$b1.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);
JSIL.OverloadedMethod(System.Windows.PresentationFrameworkCollection$b1.prototype, "CopyTo", [
		["CopyTo$0", [System.Array.Of(JSIL.AnyType), System.Int32]], 
		["CopyTo$1", [System.Array, System.Int32]]
	]);
JSIL.MakeProperty(System.Windows.PresentationFrameworkCollection$b1.prototype, "IsFixedSize", 
	System.Windows.PresentationFrameworkCollection$b1.prototype.get_IsFixedSize, null);
JSIL.MakeProperty(System.Windows.PresentationFrameworkCollection$b1.prototype, "IsFixedSizeImpl", 
	System.Windows.PresentationFrameworkCollection$b1.prototype.get_IsFixedSizeImpl, null);
JSIL.MakeProperty(System.Windows.PresentationFrameworkCollection$b1.prototype, "IsReadOnly", 
	System.Windows.PresentationFrameworkCollection$b1.prototype.get_IsReadOnly, null);
JSIL.MakeProperty(System.Windows.PresentationFrameworkCollection$b1.prototype, "IsReadOnlyImpl", 
	System.Windows.PresentationFrameworkCollection$b1.prototype.get_IsReadOnlyImpl, null);
JSIL.MakeProperty(System.Windows.PresentationFrameworkCollection$b1.prototype, "Item", 
	System.Windows.PresentationFrameworkCollection$b1.prototype.get_Item, System.Windows.PresentationFrameworkCollection$b1.prototype.set_Item);
JSIL.MakeProperty(System.Windows.PresentationFrameworkCollection$b1.prototype, "IList_Item", 
	System.Windows.PresentationFrameworkCollection$b1.prototype.IList_get_Item, System.Windows.PresentationFrameworkCollection$b1.prototype.IList_set_Item);
JSIL.MakeProperty(System.Windows.PresentationFrameworkCollection$b1.prototype, "Count", 
	System.Windows.PresentationFrameworkCollection$b1.prototype.get_Count, null);
JSIL.MakeProperty(System.Windows.PresentationFrameworkCollection$b1.prototype, "CountImpl", 
	System.Windows.PresentationFrameworkCollection$b1.prototype.get_CountImpl, null);
JSIL.MakeProperty(System.Windows.PresentationFrameworkCollection$b1.prototype, "IsSynchronized", 
	System.Windows.PresentationFrameworkCollection$b1.prototype.get_IsSynchronized, null);
JSIL.MakeProperty(System.Windows.PresentationFrameworkCollection$b1.prototype, "IsSynchronizedImpl", 
	System.Windows.PresentationFrameworkCollection$b1.prototype.get_IsSynchronizedImpl, null);
JSIL.MakeProperty(System.Windows.PresentationFrameworkCollection$b1.prototype, "SyncRoot", 
	System.Windows.PresentationFrameworkCollection$b1.prototype.get_SyncRoot, null);
JSIL.MakeProperty(System.Windows.PresentationFrameworkCollection$b1.prototype, "SyncRootImpl", 
	System.Windows.PresentationFrameworkCollection$b1.prototype.get_SyncRootImpl, null);
System.Windows.PresentationFrameworkCollection$b1.CountProperty = null;
System.Windows.PresentationFrameworkCollection$b1.prototype._version = 0;
System.Windows.PresentationFrameworkCollection$b1.prototype._ignoreCountChange = false;
System.Windows.PresentationFrameworkCollection$b1._cctor = function () {
	System.Windows.PresentationFrameworkCollection$b1.Of(this.T).CountProperty = System.Windows.DependencyProperty.RegisterCoreProperty(18200, System.Int32);
};

$asm02.System.Windows.PresentationFrameworkCollection$b1.CollectionEnum$b1.prototype._ctor = function (collectionItems) {
	this.position = -1;
	System.Object.prototype._ctor.call(this);
	this._collectionItems = collectionItems;
	this._version = collectionItems._version;
};
$asm02.System.Windows.PresentationFrameworkCollection$b1.CollectionEnum$b1.prototype.MoveNext = function () {
	if (this._version !== this._collectionItems._version) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
	}
	++this.position;
	return (this.position < this._collectionItems.Count);
};
$asm02.System.Windows.PresentationFrameworkCollection$b1.CollectionEnum$b1.prototype.Reset = function () {
	this.position = -1;
};
$asm02.System.Windows.PresentationFrameworkCollection$b1.CollectionEnum$b1.prototype.IEnumerator_get_Current = function () {
	return this.Current;
};
$asm02.System.Windows.PresentationFrameworkCollection$b1.CollectionEnum$b1.prototype.get_Current = function () {
	if (this._version !== this._collectionItems._version) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
	}
	try {
		var result = this._collectionItems.get_Item(this.position);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.IndexOutOfRangeException)) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
		} else {
			throw $exception;
		}
	}
	return result;
};
$asm02.System.Windows.PresentationFrameworkCollection$b1.CollectionEnum$b1.prototype.Dispose = function () {
};
JSIL.MakeProperty($asm02.System.Windows.PresentationFrameworkCollection$b1.CollectionEnum$b1.prototype, "IEnumerator_Current", 
	$asm02.System.Windows.PresentationFrameworkCollection$b1.CollectionEnum$b1.prototype.IEnumerator_get_Current, null);
JSIL.MakeProperty($asm02.System.Windows.PresentationFrameworkCollection$b1.CollectionEnum$b1.prototype, "Current", 
	$asm02.System.Windows.PresentationFrameworkCollection$b1.CollectionEnum$b1.prototype.get_Current, null);
$asm02.System.Windows.PresentationFrameworkCollection$b1.CollectionEnum$b1.prototype._collectionItems = null;
$asm02.System.Windows.PresentationFrameworkCollection$b1.CollectionEnum$b1.prototype.position = 0;
$asm02.System.Windows.PresentationFrameworkCollection$b1.CollectionEnum$b1.prototype._version = 0;

System.Windows.TriggerCollection.prototype._ctor = function () {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.TriggerBase).prototype._ctor$1.call(this, 56);
};
System.Windows.TriggerCollection.prototype.AddInternal = function (value) {
	this.AddDependencyObject(value);
};
System.Windows.TriggerCollection.prototype.ContainsInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.TriggerBase).prototype.ContainsDependencyObject.call(this, value);
};
System.Windows.TriggerCollection.prototype.IndexOfInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.TriggerBase).prototype.IndexOfDependencyObject.call(this, value);
};
System.Windows.TriggerCollection.prototype.InsertInternal = function (index, value) {
	this.InsertDependencyObject(index, value);
};
System.Windows.TriggerCollection.prototype.RemoveInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.TriggerBase).prototype.RemoveDependencyObject.call(this, value);
};
System.Windows.TriggerCollection.prototype.GetItemImplSkipMethodPack = function (index) {
	return JSIL.TryCast(System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.TriggerBase).prototype.GetItemDependencyObject.call(this, index), System.Windows.TriggerBase);
};
System.Windows.TriggerCollection.prototype.SetItemImplSkipMethodPack = function (index, value) {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.TriggerBase).prototype.SetItemDependencyObject.call(this, index, value);
};

System.Windows.TriggerBase.prototype._ctor$0 = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 270);
};
System.Windows.TriggerBase.prototype._ctor$1 = function (nKnownTypeIndex) {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, nKnownTypeIndex);
};
JSIL.OverloadedMethod(System.Windows.TriggerBase.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);

System.Windows.EventTrigger.prototype._ctor = function () {
	System.Windows.TriggerBase.prototype._ctor$1.call(this, 55);
};
System.Windows.EventTrigger.prototype.get_Actions = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.EventTrigger.ActionsProperty), System.Windows.TriggerActionCollection);
};
System.Windows.EventTrigger.prototype.get_RoutedEvent = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.EventTrigger.RoutedEventProperty), System.Windows.RoutedEvent);
};
System.Windows.EventTrigger.prototype.set_RoutedEvent = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.EventTrigger.RoutedEventProperty, value);
};
JSIL.MakeProperty(System.Windows.EventTrigger.prototype, "Actions", 
	System.Windows.EventTrigger.prototype.get_Actions, null);
JSIL.MakeProperty(System.Windows.EventTrigger.prototype, "RoutedEvent", 
	System.Windows.EventTrigger.prototype.get_RoutedEvent, System.Windows.EventTrigger.prototype.set_RoutedEvent);
System.Windows.EventTrigger.ActionsProperty = null;
System.Windows.EventTrigger.RoutedEventProperty = null;
System.Windows.EventTrigger._cctor = function () {
	System.Windows.EventTrigger.ActionsProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14401, System.Windows.TriggerActionCollection);
	System.Windows.EventTrigger.RoutedEventProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14400, System.Windows.RoutedEvent);
};

System.Windows.TriggerActionCollection.prototype._ctor = function () {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.TriggerAction).prototype._ctor$1.call(this, 64);
};
System.Windows.TriggerActionCollection.prototype.AddInternal = function (value) {
	this.AddDependencyObject(value);
};
System.Windows.TriggerActionCollection.prototype.ContainsInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.TriggerAction).prototype.ContainsDependencyObject.call(this, value);
};
System.Windows.TriggerActionCollection.prototype.IndexOfInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.TriggerAction).prototype.IndexOfDependencyObject.call(this, value);
};
System.Windows.TriggerActionCollection.prototype.InsertInternal = function (index, value) {
	this.InsertDependencyObject(index, value);
};
System.Windows.TriggerActionCollection.prototype.RemoveInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.TriggerAction).prototype.RemoveDependencyObject.call(this, value);
};
System.Windows.TriggerActionCollection.prototype.GetItemImplSkipMethodPack = function (index) {
	return JSIL.TryCast(System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.TriggerAction).prototype.GetItemDependencyObject.call(this, index), System.Windows.TriggerAction);
};
System.Windows.TriggerActionCollection.prototype.SetItemImplSkipMethodPack = function (index, value) {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.TriggerAction).prototype.SetItemDependencyObject.call(this, index, value);
};

System.Windows.TriggerAction.prototype._ctor$0 = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 271);
};
System.Windows.TriggerAction.prototype._ctor$1 = function (nKnownTypeIndex) {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, nKnownTypeIndex);
};
JSIL.OverloadedMethod(System.Windows.TriggerAction.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);

System.Windows.RoutedEventArgs.prototype._ctor = function () {
	System.EventArgs.prototype._ctor.call(this);
};
System.Windows.RoutedEventArgs.prototype.SetPtr = function (ptr) {
	this.m_objectPtr = new $asm02.MS.Internal.NativeObjectSafeHandle();
	this.m_objectPtr.NativeObject = ptr;
};
System.Windows.RoutedEventArgs.prototype.IManagedPeerBase_get_NativeObject = function () {
	this.CheckPtr();
	return this.m_objectPtr.NativeObject;
};
System.Windows.RoutedEventArgs.prototype.CheckPtr = function () {
	if (this.m_objectPtr === null) {
		this.SetPtr(0);
	}
};
System.Windows.RoutedEventArgs.prototype.get_OriginalSource = function () {
	this.CheckPtr();
	return $asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.RoutedEventArgs.SourceProperty);
};
System.Windows.RoutedEventArgs.prototype.set_OriginalSource = function (value) {
	this.CheckPtr();
	if (!((value !== null) && (JSIL.TryCast(value, System.Windows.DependencyObject) === null))) {
		$asm02.MS.Internal.XcpImports.SetValue(this, System.Windows.RoutedEventArgs.SourceProperty, value);
		return;
	}
	throw JSIL.New(System.ArgumentException, "_ctor$0", []);
};
JSIL.MakeProperty(System.Windows.RoutedEventArgs.prototype, "IManagedPeerBase_NativeObject", 
	System.Windows.RoutedEventArgs.prototype.IManagedPeerBase_get_NativeObject, null);
JSIL.MakeProperty(System.Windows.RoutedEventArgs.prototype, "OriginalSource", 
	System.Windows.RoutedEventArgs.prototype.get_OriginalSource, System.Windows.RoutedEventArgs.prototype.set_OriginalSource);
System.Windows.RoutedEventArgs.prototype.m_objectPtr = null;
System.Windows.RoutedEventArgs.SourceProperty = null;
System.Windows.RoutedEventArgs._cctor = function () {
	System.Windows.RoutedEventArgs.SourceProperty = System.Windows.DependencyProperty.RegisterCoreProperty(16915, System.Windows.DependencyObject);
};

System.Windows.DragEventArgs.prototype._ctor = function () {
	System.Windows.RoutedEventArgs.prototype._ctor.call(this);
};
System.Windows.DragEventArgs.prototype.CheckPtr = function () {
	if (this.m_objectPtr === null) {
		System.Windows.RoutedEventArgs.prototype.SetPtr.call(this, 0);
	}
};
System.Windows.DragEventArgs.prototype.get_Handled = function () {
	this.CheckPtr();
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.DragEventArgs.HandledProperty), System.Boolean);
};
System.Windows.DragEventArgs.prototype.set_Handled = function (value) {
	this.CheckPtr();
	$asm02.MS.Internal.XcpImports.SetValue(this, System.Windows.DragEventArgs.HandledProperty, value);
};
System.Windows.DragEventArgs.prototype.get_FilePaths = function () {
	this.CheckPtr();
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.DragEventArgs.FilePathsProperty), System.String);
};
System.Windows.DragEventArgs.prototype.set_FilePaths = function (value) {
	this.CheckPtr();
	$asm02.MS.Internal.XcpImports.SetValue(this, System.Windows.DragEventArgs.FilePathsProperty, value);
};
System.Windows.DragEventArgs.prototype.get_AllowDataAccess = function () {
	this.CheckPtr();
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.DragEventArgs.AllowDataAccessProperty), System.Boolean);
};
System.Windows.DragEventArgs.prototype.set_AllowDataAccess = function (value) {
	this.CheckPtr();
	$asm02.MS.Internal.XcpImports.SetValue(this, System.Windows.DragEventArgs.AllowDataAccessProperty, value);
};
System.Windows.DragEventArgs.prototype.GetPosition = function (relativeTo) {
	this.CheckPtr();
	return $asm02.MS.Internal.XcpImports.DragEventArgs_GetPosition(this, relativeTo);
};
System.Windows.DragEventArgs.prototype.get_Data = function () {
	var text = JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.DragEventArgs.FilePathsProperty), System.String);
	var flag = JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.DragEventArgs.AllowDataAccessProperty), System.Boolean);
	var dataObject = JSIL.New(System.Windows.DataObject, "_ctor$0", []);
	dataObject.AllowDataAccess = flag;
	if (!(!flag || System.String.IsNullOrEmpty(text))) {
		dataObject.SetDataInternal(text);
	}
	return dataObject;
};
JSIL.MakeProperty(System.Windows.DragEventArgs.prototype, "Handled", 
	System.Windows.DragEventArgs.prototype.get_Handled, System.Windows.DragEventArgs.prototype.set_Handled);
JSIL.MakeProperty(System.Windows.DragEventArgs.prototype, "FilePaths", 
	System.Windows.DragEventArgs.prototype.get_FilePaths, System.Windows.DragEventArgs.prototype.set_FilePaths);
JSIL.MakeProperty(System.Windows.DragEventArgs.prototype, "AllowDataAccess", 
	System.Windows.DragEventArgs.prototype.get_AllowDataAccess, System.Windows.DragEventArgs.prototype.set_AllowDataAccess);
JSIL.MakeProperty(System.Windows.DragEventArgs.prototype, "Data", 
	System.Windows.DragEventArgs.prototype.get_Data, null);
System.Windows.DragEventArgs.HandledProperty = null;
System.Windows.DragEventArgs.FilePathsProperty = null;
System.Windows.DragEventArgs.AllowDataAccessProperty = null;
System.Windows.DragEventArgs._cctor = function () {
	System.Windows.DragEventArgs.HandledProperty = System.Windows.DependencyProperty.RegisterCoreProperty(16925, System.Boolean);
	System.Windows.DragEventArgs.FilePathsProperty = System.Windows.DependencyProperty.RegisterCoreProperty(16926, System.String);
	System.Windows.DragEventArgs.AllowDataAccessProperty = System.Windows.DependencyProperty.RegisterCoreProperty(16927, System.Boolean);
};

System.Windows.ExceptionRoutedEventArgs.prototype._ctor = function () {
	System.Windows.RoutedEventArgs.prototype._ctor.call(this);
};
System.Windows.ExceptionRoutedEventArgs.prototype.CheckPtr = function () {
	if (this.m_objectPtr === null) {
		System.Windows.RoutedEventArgs.prototype.SetPtr.call(this, 0);
	}
};
System.Windows.ExceptionRoutedEventArgs.prototype.get_ErrorMessage = function () {
	this.CheckPtr();
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.ExceptionRoutedEventArgs.ErrorMessageProperty), System.String);
};
System.Windows.ExceptionRoutedEventArgs.prototype.get_ErrorException = function () {
	return new System.Exception(this.ErrorMessage);
};
JSIL.MakeProperty(System.Windows.ExceptionRoutedEventArgs.prototype, "ErrorMessage", 
	System.Windows.ExceptionRoutedEventArgs.prototype.get_ErrorMessage, null);
JSIL.MakeProperty(System.Windows.ExceptionRoutedEventArgs.prototype, "ErrorException", 
	System.Windows.ExceptionRoutedEventArgs.prototype.get_ErrorException, null);
System.Windows.ExceptionRoutedEventArgs.ErrorMessageProperty = null;
System.Windows.ExceptionRoutedEventArgs._cctor = function () {
	System.Windows.ExceptionRoutedEventArgs.ErrorMessageProperty = System.Windows.DependencyProperty.RegisterCoreProperty(16916, System.String);
};

System.Windows.MediaFailedRoutedEventArgs.prototype._ctor = function () {
	System.Windows.ExceptionRoutedEventArgs.prototype._ctor.call(this);
};
System.Windows.MediaFailedRoutedEventArgs.prototype.CheckPtr = function () {
	if (this.m_objectPtr === null) {
		System.Windows.RoutedEventArgs.prototype.SetPtr.call(this, 0);
	}
};
System.Windows.MediaFailedRoutedEventArgs.prototype.get_ErrorTrace = function () {
	this.CheckPtr();
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.MediaFailedRoutedEventArgs.ErrorTraceProperty), System.String);
};
JSIL.MakeProperty(System.Windows.MediaFailedRoutedEventArgs.prototype, "ErrorTrace", 
	System.Windows.MediaFailedRoutedEventArgs.prototype.get_ErrorTrace, null);
System.Windows.MediaFailedRoutedEventArgs.ErrorTraceProperty = null;
System.Windows.MediaFailedRoutedEventArgs._cctor = function () {
	System.Windows.MediaFailedRoutedEventArgs.ErrorTraceProperty = System.Windows.DependencyProperty.RegisterCoreProperty(16919, System.String);
};

System.Windows.AssemblyPart.prototype._ctor = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 162);
};
System.Windows.AssemblyPart.prototype.get_Source = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.AssemblyPart.SourceProperty), System.String);
};
System.Windows.AssemblyPart.prototype.set_Source = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.AssemblyPart.SourceProperty, value);
};
System.Windows.AssemblyPart.prototype.Load = function (assemblyStream) {
	var result = new JSIL.Variable(null);
	assemblyStream.Position = 0;
	var array = JSIL.Array.New(System.Byte, JSIL.UntranslatableInstruction("conv.ovf.i:IntPtr[exp:Int32](callvirtgetter:Int64[exp:IntPtr](Stream::get_Length, ldloc:Stream(assemblyStream)))"));
	var i = assemblyStream.Length;
	var num = 0;
__loop0__: 
	while (i > 0) {
		var num2 = assemblyStream.Read(array, num, i);
		if (num2 === 0) {
			break __loop0__;
		}
		num += num2;
		i -= num2;
	}
	assemblyStream.Close();
	$asm02.MS.Internal.JoltHelper.LoadAssembly$1(array, /* ref */ result);
	return result.value;
};
JSIL.MakeProperty(System.Windows.AssemblyPart.prototype, "Source", 
	System.Windows.AssemblyPart.prototype.get_Source, System.Windows.AssemblyPart.prototype.set_Source);
System.Windows.AssemblyPart.SourceProperty = null;
System.Windows.AssemblyPart._cctor = function () {
	System.Windows.AssemblyPart.SourceProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19100, System.String);
};

System.Windows.AssemblyPartCollection.prototype._ctor = function () {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.AssemblyPart).prototype._ctor$1.call(this, 163);
};
System.Windows.AssemblyPartCollection.prototype.AddInternal = function (value) {
	this.AddDependencyObject(value);
};
System.Windows.AssemblyPartCollection.prototype.ContainsInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.AssemblyPart).prototype.ContainsDependencyObject.call(this, value);
};
System.Windows.AssemblyPartCollection.prototype.IndexOfInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.AssemblyPart).prototype.IndexOfDependencyObject.call(this, value);
};
System.Windows.AssemblyPartCollection.prototype.InsertInternal = function (index, value) {
	this.InsertDependencyObject(index, value);
};
System.Windows.AssemblyPartCollection.prototype.RemoveInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.AssemblyPart).prototype.RemoveDependencyObject.call(this, value);
};
System.Windows.AssemblyPartCollection.prototype.GetItemImplSkipMethodPack = function (index) {
	return JSIL.TryCast(System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.AssemblyPart).prototype.GetItemDependencyObject.call(this, index), System.Windows.AssemblyPart);
};
System.Windows.AssemblyPartCollection.prototype.SetItemImplSkipMethodPack = function (index, value) {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.AssemblyPart).prototype.SetItemDependencyObject.call(this, index, value);
};

System.Windows.StartupEventArgs.prototype._ctor = function () {
	System.EventArgs.prototype._ctor.call(this);
};
System.Windows.StartupEventArgs.prototype.SetPtr = function (ptr) {
	this.m_objectPtr = new $asm02.MS.Internal.NativeObjectSafeHandle();
	this.m_objectPtr.NativeObject = ptr;
};
System.Windows.StartupEventArgs.prototype.IManagedPeerBase_get_NativeObject = function () {
	this.CheckPtr();
	return this.m_objectPtr.NativeObject;
};
System.Windows.StartupEventArgs.prototype.CheckPtr = function () {
	if (this.m_objectPtr === null) {
		this.SetPtr(0);
	}
};
System.Windows.StartupEventArgs.prototype.get_InitParams = function () {
	return System.Windows.Application.Current.Host.InitParams;
};
JSIL.MakeProperty(System.Windows.StartupEventArgs.prototype, "IManagedPeerBase_NativeObject", 
	System.Windows.StartupEventArgs.prototype.IManagedPeerBase_get_NativeObject, null);
JSIL.MakeProperty(System.Windows.StartupEventArgs.prototype, "InitParams", 
	System.Windows.StartupEventArgs.prototype.get_InitParams, null);
System.Windows.StartupEventArgs.prototype.m_objectPtr = null;

System.Windows.FrameworkTemplate.prototype._ctor$0 = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 187);
};
System.Windows.FrameworkTemplate.prototype._ctor$1 = function (nKnownTypeIndex) {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, nKnownTypeIndex);
};
System.Windows.FrameworkTemplate.prototype.get_Template = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.FrameworkTemplate.TemplateProperty), $asm02.MS.Internal.TemplateContent);
};
System.Windows.FrameworkTemplate.prototype.set_Template = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.FrameworkTemplate.TemplateProperty, value);
};
JSIL.OverloadedMethod(System.Windows.FrameworkTemplate.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);
JSIL.MakeProperty(System.Windows.FrameworkTemplate.prototype, "Template", 
	System.Windows.FrameworkTemplate.prototype.get_Template, System.Windows.FrameworkTemplate.prototype.set_Template);
System.Windows.FrameworkTemplate.TemplateProperty = null;
System.Windows.FrameworkTemplate.prototype._eventRoot = null;
System.Windows.FrameworkTemplate._cctor = function () {
	System.Windows.FrameworkTemplate.TemplateProperty = System.Windows.DependencyProperty.RegisterCoreProperty(27060, MS.Internal.TemplateContent);
};

System.Windows.DataTemplate.prototype._ctor$0 = function () {
	System.Windows.FrameworkTemplate.prototype._ctor$1.call(this, 192);
};
System.Windows.DataTemplate.prototype._ctor$1 = function (nKnownTypeIndex) {
	System.Windows.FrameworkTemplate.prototype._ctor$1.call(this, nKnownTypeIndex);
};
System.Windows.DataTemplate.prototype.LoadContent = function () {
	return $asm02.MS.Internal.XcpImports.DataTemplate_LoadContent(this);
};
JSIL.OverloadedMethod(System.Windows.DataTemplate.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);

System.Windows.SizeChangedEventArgs.prototype._ctor = function () {
	System.Windows.RoutedEventArgs.prototype._ctor.call(this);
};
System.Windows.SizeChangedEventArgs.prototype.CheckPtr = function () {
	if (this.m_objectPtr === null) {
		System.Windows.RoutedEventArgs.prototype.SetPtr.call(this, 0);
	}
};
System.Windows.SizeChangedEventArgs.prototype.get_PreviousSize = function () {
	this.CheckPtr();
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.SizeChangedEventArgs.PreviousSizeProperty), System.Windows.Size);
};
System.Windows.SizeChangedEventArgs.prototype.get_NewSize = function () {
	this.CheckPtr();
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.SizeChangedEventArgs.NewSizeProperty), System.Windows.Size);
};
JSIL.MakeProperty(System.Windows.SizeChangedEventArgs.prototype, "PreviousSize", 
	System.Windows.SizeChangedEventArgs.prototype.get_PreviousSize, null);
JSIL.MakeProperty(System.Windows.SizeChangedEventArgs.prototype, "NewSize", 
	System.Windows.SizeChangedEventArgs.prototype.get_NewSize, null);
System.Windows.SizeChangedEventArgs.PreviousSizeProperty = null;
System.Windows.SizeChangedEventArgs.NewSizeProperty = null;
System.Windows.SizeChangedEventArgs._cctor = function () {
	System.Windows.SizeChangedEventArgs.PreviousSizeProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19702, System.Windows.Size);
	System.Windows.SizeChangedEventArgs.NewSizeProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19703, System.Windows.Size);
};

System.Windows.Style.prototype._ctor$0 = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 225);
};
System.Windows.Style.prototype.get_IsSealed = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Style.IsSealedProperty), System.Boolean);
};
System.Windows.Style.prototype.get_Setters = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Style.SettersProperty), System.Windows.SetterBaseCollection);
};
System.Windows.Style.prototype.get_BasedOn = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Style.BasedOnProperty), System.Windows.Style);
};
System.Windows.Style.prototype.set_BasedOn = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Style.BasedOnProperty, value);
};
System.Windows.Style.prototype.Seal = function () {
	$asm02.MS.Internal.XcpImports.Style_Seal(this);
};
System.Windows.Style.prototype._ctor$1 = function (targetType) {
	this._ctor$0();
	this.TargetType = targetType;
};
System.Windows.Style.prototype.get_TargetType = function () {
	var typeProxy = JSIL.TryCast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Style.TargetTypeProperty), $asm02.MS.Internal.TypeProxy);
	if (typeProxy === null) {
		return null;
	}
	return typeProxy.GetWrappedType();
};
System.Windows.Style.prototype.set_TargetType = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Style.TargetTypeProperty, $asm02.MS.Internal.TypeProxy.CreateProxyForType(value));
};
JSIL.OverloadedMethod(System.Windows.Style.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Type]]
	]);
JSIL.MakeProperty(System.Windows.Style.prototype, "IsSealed", 
	System.Windows.Style.prototype.get_IsSealed, null);
JSIL.MakeProperty(System.Windows.Style.prototype, "Setters", 
	System.Windows.Style.prototype.get_Setters, null);
JSIL.MakeProperty(System.Windows.Style.prototype, "BasedOn", 
	System.Windows.Style.prototype.get_BasedOn, System.Windows.Style.prototype.set_BasedOn);
JSIL.MakeProperty(System.Windows.Style.prototype, "TargetType", 
	System.Windows.Style.prototype.get_TargetType, System.Windows.Style.prototype.set_TargetType);
System.Windows.Style.IsSealedProperty = null;
System.Windows.Style.SettersProperty = null;
System.Windows.Style.BasedOnProperty = null;
System.Windows.Style.TargetTypeProperty = null;
System.Windows.Style._cctor = function () {
	System.Windows.Style.IsSealedProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19610, System.Boolean);
	System.Windows.Style.SettersProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19611, System.Windows.SetterBaseCollection);
	System.Windows.Style.BasedOnProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19613, System.Windows.Style);
	System.Windows.Style.TargetTypeProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19612, System.Type);
};

System.Windows.SetterBase.prototype._ctor = function (nKnownTypeIndex) {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, nKnownTypeIndex);
};
System.Windows.SetterBase.prototype.get_IsSealed = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.SetterBase.IsSealedProperty), System.Boolean);
};
JSIL.MakeProperty(System.Windows.SetterBase.prototype, "IsSealed", 
	System.Windows.SetterBase.prototype.get_IsSealed, null);
System.Windows.SetterBase.IsSealedProperty = null;
System.Windows.SetterBase._cctor = function () {
	System.Windows.SetterBase.IsSealedProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19620, System.Boolean);
};

System.Windows.Setter.prototype._ctor$0 = function () {
	System.Windows.SetterBase.prototype._ctor.call(this, 218);
};
System.Windows.Setter.prototype._ctor$1 = function (property, value) {
	this._ctor$0();
	this.Property = property;
	this.Value = value;
};
System.Windows.Setter.prototype.get_Value = function () {
	return System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Setter.ValueProperty);
};
System.Windows.Setter.prototype.set_Value = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Setter.ValueProperty, value);
};
System.Windows.Setter.prototype.get_Property = function () {
	var dependencyPropertyProxy = JSIL.TryCast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Setter.PropertyProperty), $asm02.MS.Internal.DependencyPropertyProxy);
	if (dependencyPropertyProxy === null) {
		return null;
	}
	return dependencyPropertyProxy.GetWrappedDependencyProperty();
};
System.Windows.Setter.prototype.set_Property = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Setter.PropertyProperty, $asm02.MS.Internal.DependencyPropertyProxy.CreateProxyForDependencyProperty(value));
};
JSIL.OverloadedMethod(System.Windows.Setter.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Windows.DependencyProperty, System.Object]]
	]);
JSIL.MakeProperty(System.Windows.Setter.prototype, "Value", 
	System.Windows.Setter.prototype.get_Value, System.Windows.Setter.prototype.set_Value);
JSIL.MakeProperty(System.Windows.Setter.prototype, "Property", 
	System.Windows.Setter.prototype.get_Property, System.Windows.Setter.prototype.set_Property);
System.Windows.Setter.PropertyProperty = null;
System.Windows.Setter.ValueProperty = null;
System.Windows.Setter._cctor = function () {
	System.Windows.Setter.PropertyProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19630, $asm02.MS.Internal.DependencyPropertyProxy);
	System.Windows.Setter.ValueProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19631, System.Object);
};

System.Windows.SetterBaseCollection.prototype._ctor$0 = function () {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.SetterBase).prototype._ctor$1.call(this, 219);
};
System.Windows.SetterBaseCollection.prototype._ctor$1 = function (nKnownTypeIndex) {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.SetterBase).prototype._ctor$1.call(this, nKnownTypeIndex);
};
System.Windows.SetterBaseCollection.prototype.AddInternal = function (value) {
	this.AddDependencyObject(value);
};
System.Windows.SetterBaseCollection.prototype.ContainsInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.SetterBase).prototype.ContainsDependencyObject.call(this, value);
};
System.Windows.SetterBaseCollection.prototype.IndexOfInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.SetterBase).prototype.IndexOfDependencyObject.call(this, value);
};
System.Windows.SetterBaseCollection.prototype.InsertInternal = function (index, value) {
	this.InsertDependencyObject(index, value);
};
System.Windows.SetterBaseCollection.prototype.RemoveInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.SetterBase).prototype.RemoveDependencyObject.call(this, value);
};
System.Windows.SetterBaseCollection.prototype.GetItemImplSkipMethodPack = function (index) {
	return JSIL.TryCast(System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.SetterBase).prototype.GetItemDependencyObject.call(this, index), System.Windows.SetterBase);
};
System.Windows.SetterBaseCollection.prototype.SetItemImplSkipMethodPack = function (index, value) {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.SetterBase).prototype.SetItemDependencyObject.call(this, index, value);
};
System.Windows.SetterBaseCollection.prototype.get_IsSealed = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.SetterBaseCollection.IsSealedProperty), System.Boolean);
};
JSIL.OverloadedMethod(System.Windows.SetterBaseCollection.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);
JSIL.MakeProperty(System.Windows.SetterBaseCollection.prototype, "IsSealed", 
	System.Windows.SetterBaseCollection.prototype.get_IsSealed, null);
System.Windows.SetterBaseCollection.IsSealedProperty = null;
System.Windows.SetterBaseCollection._cctor = function () {
	System.Windows.SetterBaseCollection.IsSealedProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19640, System.Boolean);
};

System.Windows.VisualState.prototype._ctor = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 258);
};
System.Windows.VisualState.prototype.get_Storyboard = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.VisualState.StoryboardProperty), System.Windows.Media.Animation.Storyboard);
};
System.Windows.VisualState.prototype.set_Storyboard = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.VisualState.StoryboardProperty, value);
};
System.Windows.VisualState.prototype.get___DeferredStoryboard = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.VisualState.__DeferredStoryboardProperty), $asm02.MS.Internal.TemplateContent);
};
System.Windows.VisualState.prototype.set___DeferredStoryboard = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.VisualState.__DeferredStoryboardProperty, value);
};
System.Windows.VisualState.prototype.get_Name = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.FrameworkElement.NameProperty), System.String);
};
JSIL.MakeProperty(System.Windows.VisualState.prototype, "Storyboard", 
	System.Windows.VisualState.prototype.get_Storyboard, System.Windows.VisualState.prototype.set_Storyboard);
JSIL.MakeProperty(System.Windows.VisualState.prototype, "__DeferredStoryboard", 
	System.Windows.VisualState.prototype.get___DeferredStoryboard, System.Windows.VisualState.prototype.set___DeferredStoryboard);
JSIL.MakeProperty(System.Windows.VisualState.prototype, "Name", 
	System.Windows.VisualState.prototype.get_Name, null);
System.Windows.VisualState.StoryboardProperty = null;
System.Windows.VisualState.__DeferredStoryboardProperty = null;
System.Windows.VisualState._cctor = function () {
	System.Windows.VisualState.StoryboardProperty = System.Windows.DependencyProperty.RegisterCoreProperty(21008, System.Windows.Media.Animation.Storyboard);
	System.Windows.VisualState.__DeferredStoryboardProperty = System.Windows.DependencyProperty.RegisterCoreProperty(21016, $asm02.MS.Internal.TemplateContent);
};

System.Windows.OutOfBrowserSettings.prototype._ctor = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 316);
};
System.Windows.OutOfBrowserSettings.prototype.get_ShortName = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.OutOfBrowserSettings.ShortNameProperty), System.String);
};
System.Windows.OutOfBrowserSettings.prototype.get_Blurb = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.OutOfBrowserSettings.BlurbProperty), System.String);
};
System.Windows.OutOfBrowserSettings.prototype.get_Icons = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.OutOfBrowserSettings.IconsProperty), System.Windows.IconCollection);
};
System.Windows.OutOfBrowserSettings.prototype.get_EnableGPUAcceleration = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.OutOfBrowserSettings.EnableGPUAccelerationProperty), System.Boolean);
};
System.Windows.OutOfBrowserSettings.prototype.get_ShowInstallMenuItem = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.OutOfBrowserSettings.ShowInstallMenuItemProperty), System.Boolean);
};
System.Windows.OutOfBrowserSettings.prototype.get_WindowSettings = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.OutOfBrowserSettings.WindowSettingsProperty), System.Windows.WindowSettings);
};
System.Windows.OutOfBrowserSettings.prototype.get_SecuritySettings = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.OutOfBrowserSettings.SecuritySettingsProperty), System.Windows.SecuritySettings);
};
JSIL.MakeProperty(System.Windows.OutOfBrowserSettings.prototype, "ShortName", 
	System.Windows.OutOfBrowserSettings.prototype.get_ShortName, null);
JSIL.MakeProperty(System.Windows.OutOfBrowserSettings.prototype, "Blurb", 
	System.Windows.OutOfBrowserSettings.prototype.get_Blurb, null);
JSIL.MakeProperty(System.Windows.OutOfBrowserSettings.prototype, "Icons", 
	System.Windows.OutOfBrowserSettings.prototype.get_Icons, null);
JSIL.MakeProperty(System.Windows.OutOfBrowserSettings.prototype, "EnableGPUAcceleration", 
	System.Windows.OutOfBrowserSettings.prototype.get_EnableGPUAcceleration, null);
JSIL.MakeProperty(System.Windows.OutOfBrowserSettings.prototype, "ShowInstallMenuItem", 
	System.Windows.OutOfBrowserSettings.prototype.get_ShowInstallMenuItem, null);
JSIL.MakeProperty(System.Windows.OutOfBrowserSettings.prototype, "WindowSettings", 
	System.Windows.OutOfBrowserSettings.prototype.get_WindowSettings, null);
JSIL.MakeProperty(System.Windows.OutOfBrowserSettings.prototype, "SecuritySettings", 
	System.Windows.OutOfBrowserSettings.prototype.get_SecuritySettings, null);
System.Windows.OutOfBrowserSettings.ShortNameProperty = null;
System.Windows.OutOfBrowserSettings.BlurbProperty = null;
System.Windows.OutOfBrowserSettings.IconsProperty = null;
System.Windows.OutOfBrowserSettings.EnableGPUAccelerationProperty = null;
System.Windows.OutOfBrowserSettings.ShowInstallMenuItemProperty = null;
System.Windows.OutOfBrowserSettings.WindowSettingsProperty = null;
System.Windows.OutOfBrowserSettings.SecuritySettingsProperty = null;
System.Windows.OutOfBrowserSettings._cctor = function () {
	System.Windows.OutOfBrowserSettings.ShortNameProperty = System.Windows.DependencyProperty.RegisterCoreProperty(22001, System.String);
	System.Windows.OutOfBrowserSettings.BlurbProperty = System.Windows.DependencyProperty.RegisterCoreProperty(22003, System.String);
	System.Windows.OutOfBrowserSettings.IconsProperty = System.Windows.DependencyProperty.RegisterCoreProperty(22004, System.Windows.IconCollection);
	System.Windows.OutOfBrowserSettings.EnableGPUAccelerationProperty = System.Windows.DependencyProperty.RegisterCoreProperty(22105, System.Boolean);
	System.Windows.OutOfBrowserSettings.ShowInstallMenuItemProperty = System.Windows.DependencyProperty.RegisterCoreProperty(22106, System.Boolean);
	System.Windows.OutOfBrowserSettings.WindowSettingsProperty = System.Windows.DependencyProperty.RegisterCoreProperty(22104, System.Windows.WindowSettings);
	System.Windows.OutOfBrowserSettings.SecuritySettingsProperty = System.Windows.DependencyProperty.RegisterCoreProperty(22107, System.Windows.SecuritySettings);
};

System.Windows.IconCollection.prototype._ctor = function () {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Icon).prototype._ctor$1.call(this, 317);
};
System.Windows.IconCollection.prototype.AddInternal = function (value) {
	this.AddDependencyObject(value);
};
System.Windows.IconCollection.prototype.ContainsInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Icon).prototype.ContainsDependencyObject.call(this, value);
};
System.Windows.IconCollection.prototype.IndexOfInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Icon).prototype.IndexOfDependencyObject.call(this, value);
};
System.Windows.IconCollection.prototype.InsertInternal = function (index, value) {
	this.InsertDependencyObject(index, value);
};
System.Windows.IconCollection.prototype.RemoveInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Icon).prototype.RemoveDependencyObject.call(this, value);
};
System.Windows.IconCollection.prototype.GetItemImplSkipMethodPack = function (index) {
	return JSIL.TryCast(System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Icon).prototype.GetItemDependencyObject.call(this, index), System.Windows.Icon);
};
System.Windows.IconCollection.prototype.SetItemImplSkipMethodPack = function (index, value) {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Icon).prototype.SetItemDependencyObject.call(this, index, value);
};

System.Windows.Icon.prototype._ctor = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 318);
};
System.Windows.Icon.prototype.get_Size = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Icon.SizeProperty), System.Windows.Size);
};
System.Windows.Icon.prototype.get_Source = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Icon.SourceProperty), System.Uri);
};
JSIL.MakeProperty(System.Windows.Icon.prototype, "Size", 
	System.Windows.Icon.prototype.get_Size, null);
JSIL.MakeProperty(System.Windows.Icon.prototype, "Source", 
	System.Windows.Icon.prototype.get_Source, null);
System.Windows.Icon.SizeProperty = null;
System.Windows.Icon.SourceProperty = null;
System.Windows.Icon._cctor = function () {
	System.Windows.Icon.SizeProperty = System.Windows.DependencyProperty.RegisterCoreProperty(22020, System.Windows.Size);
	System.Windows.Icon.SourceProperty = System.Windows.DependencyProperty.RegisterCoreProperty(22021, System.Uri);
};

System.Windows.WindowSettings.prototype._ctor = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 321);
};
System.Windows.WindowSettings.prototype.get_Height = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.WindowSettings.HeightProperty), System.Double);
};
System.Windows.WindowSettings.prototype.get_Width = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.WindowSettings.WidthProperty), System.Double);
};
System.Windows.WindowSettings.prototype.get_Title = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.WindowSettings.TitleProperty), System.String);
};
System.Windows.WindowSettings.prototype.get_WindowStyle = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.WindowSettings.WindowStyleProperty), System.Windows.WindowStyle);
};
System.Windows.WindowSettings.prototype.get_Left = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.WindowSettings.LeftProperty), System.Double);
};
System.Windows.WindowSettings.prototype.get_Top = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.WindowSettings.TopProperty), System.Double);
};
System.Windows.WindowSettings.prototype.get_WindowStartupLocation = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.WindowSettings.WindowStartupLocationProperty), System.Windows.WindowStartupLocation);
};
JSIL.MakeProperty(System.Windows.WindowSettings.prototype, "Height", 
	System.Windows.WindowSettings.prototype.get_Height, null);
JSIL.MakeProperty(System.Windows.WindowSettings.prototype, "Width", 
	System.Windows.WindowSettings.prototype.get_Width, null);
JSIL.MakeProperty(System.Windows.WindowSettings.prototype, "Title", 
	System.Windows.WindowSettings.prototype.get_Title, null);
JSIL.MakeProperty(System.Windows.WindowSettings.prototype, "WindowStyle", 
	System.Windows.WindowSettings.prototype.get_WindowStyle, null);
JSIL.MakeProperty(System.Windows.WindowSettings.prototype, "Left", 
	System.Windows.WindowSettings.prototype.get_Left, null);
JSIL.MakeProperty(System.Windows.WindowSettings.prototype, "Top", 
	System.Windows.WindowSettings.prototype.get_Top, null);
JSIL.MakeProperty(System.Windows.WindowSettings.prototype, "WindowStartupLocation", 
	System.Windows.WindowSettings.prototype.get_WindowStartupLocation, null);
System.Windows.WindowSettings.HeightProperty = null;
System.Windows.WindowSettings.WidthProperty = null;
System.Windows.WindowSettings.TitleProperty = null;
System.Windows.WindowSettings.WindowStyleProperty = null;
System.Windows.WindowSettings.LeftProperty = null;
System.Windows.WindowSettings.TopProperty = null;
System.Windows.WindowSettings.WindowStartupLocationProperty = null;
System.Windows.WindowSettings._cctor = function () {
	System.Windows.WindowSettings.HeightProperty = System.Windows.DependencyProperty.RegisterCoreProperty(22102, System.Double);
	System.Windows.WindowSettings.WidthProperty = System.Windows.DependencyProperty.RegisterCoreProperty(22103, System.Double);
	System.Windows.WindowSettings.TitleProperty = System.Windows.DependencyProperty.RegisterCoreProperty(22002, System.String);
	System.Windows.WindowSettings.WindowStyleProperty = System.Windows.DependencyProperty.RegisterCoreProperty(22353, System.Windows.WindowStyle);
	System.Windows.WindowSettings.LeftProperty = System.Windows.DependencyProperty.RegisterCoreProperty(22350, System.Double);
	System.Windows.WindowSettings.TopProperty = System.Windows.DependencyProperty.RegisterCoreProperty(22351, System.Double);
	System.Windows.WindowSettings.WindowStartupLocationProperty = System.Windows.DependencyProperty.RegisterCoreProperty(22352, System.Windows.WindowStartupLocation);
};

System.Windows.SecuritySettings.prototype._ctor = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 351);
};
System.Windows.SecuritySettings.prototype.get_ElevatedPermissions = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.SecuritySettings.ElevatedPermissionsProperty), System.Windows.ElevatedPermissions);
};
JSIL.MakeProperty(System.Windows.SecuritySettings.prototype, "ElevatedPermissions", 
	System.Windows.SecuritySettings.prototype.get_ElevatedPermissions, null);
System.Windows.SecuritySettings.ElevatedPermissionsProperty = null;
System.Windows.SecuritySettings._cctor = function () {
	System.Windows.SecuritySettings.ElevatedPermissionsProperty = System.Windows.DependencyProperty.RegisterCoreProperty(22108, System.Windows.ElevatedPermissions);
};

System.Windows.VisualStateGroup.prototype._ctor = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 322);
};
System.Windows.VisualStateGroup.prototype.get_Name = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.FrameworkElement.NameProperty), System.String);
};
System.Windows.VisualStateGroup.prototype.get_CurrentState = function () {
	return $asm02.MS.Internal.XcpImports.VisualStateGroup_GetCurrentState(this);
};
System.Windows.VisualStateGroup.prototype.GetState = function (stateName) {
__loop0__: 
	for (var i = 0; i < this.States.ICollection_Count; ++i) {
		var visualState = JSIL.Cast(this.States.IList_get_Item(i), System.Windows.VisualState);
		if (visualState.Name == stateName) {
			return visualState;
		}
	}
	return null;
};
System.Windows.VisualStateGroup.prototype.RaiseCurrentStateChanging = function (element, oldState, newState, control) {
	if (this._managedCurrentStateChanging !== null) {
		this._managedCurrentStateChanging(element, JSIL.New(System.Windows.VisualStateChangedEventArgs, "_ctor$1", [oldState, newState, control]));
	}
};
System.Windows.VisualStateGroup.prototype.RaiseCurrentStateChanged = function (element, oldState, newState, control) {
	if (this._managedCurrentStateChanged !== null) {
		this._managedCurrentStateChanged(element, JSIL.New(System.Windows.VisualStateChangedEventArgs, "_ctor$1", [oldState, newState, control]));
	}
};
System.Windows.VisualStateGroup.prototype.add__managedCurrentStateChanged = function (value) {
	this._managedCurrentStateChanged = System.Delegate.Combine(this._managedCurrentStateChanged, value);
};
System.Windows.VisualStateGroup.prototype.remove__managedCurrentStateChanged = function (value) {
	this._managedCurrentStateChanged = System.Delegate.Remove(this._managedCurrentStateChanged, value);
};
System.Windows.VisualStateGroup.prototype.add__managedCurrentStateChanging = function (value) {
	this._managedCurrentStateChanging = System.Delegate.Combine(this._managedCurrentStateChanging, value);
};
System.Windows.VisualStateGroup.prototype.remove__managedCurrentStateChanging = function (value) {
	this._managedCurrentStateChanging = System.Delegate.Remove(this._managedCurrentStateChanging, value);
};
System.Windows.VisualStateGroup.prototype.add_CurrentStateChanged = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(21012, null), value);
	this._managedCurrentStateChanged = System.Delegate.Combine(this._managedCurrentStateChanged, value);
};
System.Windows.VisualStateGroup.prototype.remove_CurrentStateChanged = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(21012, null), value);
	this._managedCurrentStateChanged = System.Delegate.Remove(this._managedCurrentStateChanged, value);
};
System.Windows.VisualStateGroup.prototype.add_CurrentStateChanging = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(21011, null), value);
	this._managedCurrentStateChanging = System.Delegate.Combine(this._managedCurrentStateChanging, value);
};
System.Windows.VisualStateGroup.prototype.remove_CurrentStateChanging = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(21011, null), value);
	this._managedCurrentStateChanging = System.Delegate.Remove(this._managedCurrentStateChanging, value);
};
System.Windows.VisualStateGroup.prototype.get_States = function () {
	var arg_28_0 = null;
	if ((arg_28_0 = this._wrappedStates) === null) {
		arg_28_0 = (this._wrappedStates = JSIL.New(System.Collections.ObjectModel.Collection$b1.Of(System.Windows.VisualState), "_ctor$1", [JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.VisualStateGroup.StatesProperty), System.Collections.Generic.IList$b1.Of(System.Windows.VisualState))]));
	}
	return arg_28_0;
};
System.Windows.VisualStateGroup.prototype.get_Transitions = function () {
	var arg_28_0 = null;
	if ((arg_28_0 = this._wrappedTransitions) === null) {
		arg_28_0 = (this._wrappedTransitions = JSIL.New(System.Collections.ObjectModel.Collection$b1.Of(System.Windows.VisualTransition), "_ctor$1", [JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.VisualStateGroup.TransitionsProperty), System.Collections.Generic.IList$b1.Of(System.Windows.VisualTransition))]));
	}
	return arg_28_0;
};
JSIL.MakeProperty(System.Windows.VisualStateGroup.prototype, "Name", 
	System.Windows.VisualStateGroup.prototype.get_Name, null);
JSIL.MakeProperty(System.Windows.VisualStateGroup.prototype, "CurrentState", 
	System.Windows.VisualStateGroup.prototype.get_CurrentState, null);
JSIL.MakeProperty(System.Windows.VisualStateGroup.prototype, "States", 
	System.Windows.VisualStateGroup.prototype.get_States, null);
JSIL.MakeProperty(System.Windows.VisualStateGroup.prototype, "Transitions", 
	System.Windows.VisualStateGroup.prototype.get_Transitions, null);
System.Windows.VisualStateGroup.TransitionsProperty = null;
System.Windows.VisualStateGroup.StatesProperty = null;
System.Windows.VisualStateGroup.prototype._managedCurrentStateChanged = null;
System.Windows.VisualStateGroup.prototype._managedCurrentStateChanging = null;
System.Windows.VisualStateGroup.prototype._wrappedStates = null;
System.Windows.VisualStateGroup.prototype._wrappedTransitions = null;
System.Windows.VisualStateGroup._cctor = function () {
	System.Windows.VisualStateGroup.TransitionsProperty = System.Windows.DependencyProperty.RegisterCoreProperty(21001, $asm02.MS.Internal.VisualTransitionCollection);
	System.Windows.VisualStateGroup.StatesProperty = System.Windows.DependencyProperty.RegisterCoreProperty(21005, $asm02.MS.Internal.VisualStateCollection);
};

System.Windows.VisualTransition.prototype._ctor$0 = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 323);
};
System.Windows.VisualTransition.prototype._ctor$1 = function (nKnownTypeIndex) {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, nKnownTypeIndex);
};
System.Windows.VisualTransition.prototype.get_GeneratedDuration = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.VisualTransition.GeneratedDurationProperty), System.Windows.Duration);
};
System.Windows.VisualTransition.prototype.set_GeneratedDuration = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.VisualTransition.GeneratedDurationProperty, value.MemberwiseClone());
};
System.Windows.VisualTransition.prototype.get_To = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.VisualTransition.ToProperty), System.String);
};
System.Windows.VisualTransition.prototype.set_To = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.VisualTransition.ToProperty, value);
};
System.Windows.VisualTransition.prototype.get_From = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.VisualTransition.FromProperty), System.String);
};
System.Windows.VisualTransition.prototype.set_From = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.VisualTransition.FromProperty, value);
};
System.Windows.VisualTransition.prototype.get_Storyboard = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.VisualTransition.StoryboardProperty), System.Windows.Media.Animation.Storyboard);
};
System.Windows.VisualTransition.prototype.set_Storyboard = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.VisualTransition.StoryboardProperty, value);
};
System.Windows.VisualTransition.prototype.get_GeneratedEasingFunction = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.VisualTransition.GeneratedEasingFunctionProperty), System.Windows.Media.Animation.IEasingFunction);
};
System.Windows.VisualTransition.prototype.set_GeneratedEasingFunction = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.VisualTransition.GeneratedEasingFunctionProperty, value);
};
JSIL.OverloadedMethod(System.Windows.VisualTransition.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);
JSIL.MakeProperty(System.Windows.VisualTransition.prototype, "GeneratedDuration", 
	System.Windows.VisualTransition.prototype.get_GeneratedDuration, System.Windows.VisualTransition.prototype.set_GeneratedDuration);
JSIL.MakeProperty(System.Windows.VisualTransition.prototype, "To", 
	System.Windows.VisualTransition.prototype.get_To, System.Windows.VisualTransition.prototype.set_To);
JSIL.MakeProperty(System.Windows.VisualTransition.prototype, "From", 
	System.Windows.VisualTransition.prototype.get_From, System.Windows.VisualTransition.prototype.set_From);
JSIL.MakeProperty(System.Windows.VisualTransition.prototype, "Storyboard", 
	System.Windows.VisualTransition.prototype.get_Storyboard, System.Windows.VisualTransition.prototype.set_Storyboard);
JSIL.MakeProperty(System.Windows.VisualTransition.prototype, "GeneratedEasingFunction", 
	System.Windows.VisualTransition.prototype.get_GeneratedEasingFunction, System.Windows.VisualTransition.prototype.set_GeneratedEasingFunction);
System.Windows.VisualTransition.GeneratedDurationProperty = null;
System.Windows.VisualTransition.ToProperty = null;
System.Windows.VisualTransition.FromProperty = null;
System.Windows.VisualTransition.StoryboardProperty = null;
System.Windows.VisualTransition.GeneratedEasingFunctionProperty = null;
System.Windows.VisualTransition._cctor = function () {
	System.Windows.VisualTransition.GeneratedDurationProperty = System.Windows.DependencyProperty.RegisterCoreProperty(21002, System.Windows.Duration);
	System.Windows.VisualTransition.ToProperty = System.Windows.DependencyProperty.RegisterCoreProperty(21003, System.String);
	System.Windows.VisualTransition.FromProperty = System.Windows.DependencyProperty.RegisterCoreProperty(21004, System.String);
	System.Windows.VisualTransition.StoryboardProperty = System.Windows.DependencyProperty.RegisterCoreProperty(21010, System.Windows.Media.Animation.Storyboard);
	System.Windows.VisualTransition.GeneratedEasingFunctionProperty = System.Windows.DependencyProperty.RegisterCoreProperty(21026, System.Windows.Media.Animation.IEasingFunction);
};

System.Windows.VisualStateChangedEventArgs.prototype._ctor$0 = function () {
	System.EventArgs.prototype._ctor.call(this);
};
System.Windows.VisualStateChangedEventArgs.prototype.SetPtr = function (ptr) {
	this.m_objectPtr = new $asm02.MS.Internal.NativeObjectSafeHandle();
	this.m_objectPtr.NativeObject = ptr;
};
System.Windows.VisualStateChangedEventArgs.prototype.IManagedPeerBase_get_NativeObject = function () {
	this.CheckPtr();
	return this.m_objectPtr.NativeObject;
};
System.Windows.VisualStateChangedEventArgs.prototype.CheckPtr = function () {
	if (this.m_objectPtr === null) {
		this.SetPtr(0);
	}
};
System.Windows.VisualStateChangedEventArgs.prototype.get_OldState = function () {
	this.CheckPtr();
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.VisualStateChangedEventArgs.OldStateProperty), System.Windows.VisualState);
};
System.Windows.VisualStateChangedEventArgs.prototype.set_OldState = function (value) {
	this.CheckPtr();
	$asm02.MS.Internal.XcpImports.SetValue(this, System.Windows.VisualStateChangedEventArgs.OldStateProperty, value);
};
System.Windows.VisualStateChangedEventArgs.prototype.get_NewState = function () {
	this.CheckPtr();
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.VisualStateChangedEventArgs.NewStateProperty), System.Windows.VisualState);
};
System.Windows.VisualStateChangedEventArgs.prototype.set_NewState = function (value) {
	this.CheckPtr();
	$asm02.MS.Internal.XcpImports.SetValue(this, System.Windows.VisualStateChangedEventArgs.NewStateProperty, value);
};
System.Windows.VisualStateChangedEventArgs.prototype.get_Control = function () {
	this.CheckPtr();
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.VisualStateChangedEventArgs.ControlProperty), System.Windows.Controls.Control);
};
System.Windows.VisualStateChangedEventArgs.prototype.set_Control = function (value) {
	this.CheckPtr();
	$asm02.MS.Internal.XcpImports.SetValue(this, System.Windows.VisualStateChangedEventArgs.ControlProperty, value);
};
System.Windows.VisualStateChangedEventArgs.prototype._ctor$1 = function (oldState, newState, control) {
	System.EventArgs.prototype._ctor.call(this);
	if (oldState !== null) {
		this.OldState = oldState;
	}
	if (newState !== null) {
		this.NewState = newState;
	}
	if (control !== null) {
		this.Control = control;
	}
};
JSIL.OverloadedMethod(System.Windows.VisualStateChangedEventArgs.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Windows.VisualState, System.Windows.VisualState, System.Windows.Controls.Control]]
	]);
JSIL.MakeProperty(System.Windows.VisualStateChangedEventArgs.prototype, "IManagedPeerBase_NativeObject", 
	System.Windows.VisualStateChangedEventArgs.prototype.IManagedPeerBase_get_NativeObject, null);
JSIL.MakeProperty(System.Windows.VisualStateChangedEventArgs.prototype, "OldState", 
	System.Windows.VisualStateChangedEventArgs.prototype.get_OldState, System.Windows.VisualStateChangedEventArgs.prototype.set_OldState);
JSIL.MakeProperty(System.Windows.VisualStateChangedEventArgs.prototype, "NewState", 
	System.Windows.VisualStateChangedEventArgs.prototype.get_NewState, System.Windows.VisualStateChangedEventArgs.prototype.set_NewState);
JSIL.MakeProperty(System.Windows.VisualStateChangedEventArgs.prototype, "Control", 
	System.Windows.VisualStateChangedEventArgs.prototype.get_Control, System.Windows.VisualStateChangedEventArgs.prototype.set_Control);
System.Windows.VisualStateChangedEventArgs.prototype.m_objectPtr = null;
System.Windows.VisualStateChangedEventArgs.OldStateProperty = null;
System.Windows.VisualStateChangedEventArgs.NewStateProperty = null;
System.Windows.VisualStateChangedEventArgs.ControlProperty = null;
System.Windows.VisualStateChangedEventArgs._cctor = function () {
	System.Windows.VisualStateChangedEventArgs.OldStateProperty = System.Windows.DependencyProperty.RegisterCoreProperty(21013, System.Windows.VisualState);
	System.Windows.VisualStateChangedEventArgs.NewStateProperty = System.Windows.DependencyProperty.RegisterCoreProperty(21014, System.Windows.VisualState);
	System.Windows.VisualStateChangedEventArgs.ControlProperty = System.Windows.DependencyProperty.RegisterCoreProperty(21015, System.Windows.Controls.Control);
};

System.Windows.CheckAndDownloadUpdateCompletedEventArgs.prototype._ctor = function () {
	System.EventArgs.prototype._ctor.call(this);
};
System.Windows.CheckAndDownloadUpdateCompletedEventArgs.prototype.SetPtr = function (ptr) {
	this.m_objectPtr = new $asm02.MS.Internal.NativeObjectSafeHandle();
	this.m_objectPtr.NativeObject = ptr;
};
System.Windows.CheckAndDownloadUpdateCompletedEventArgs.prototype.IManagedPeerBase_get_NativeObject = function () {
	this.CheckPtr();
	return this.m_objectPtr.NativeObject;
};
System.Windows.CheckAndDownloadUpdateCompletedEventArgs.prototype.CheckPtr = function () {
	if (this.m_objectPtr === null) {
		this.SetPtr(0);
	}
};
System.Windows.CheckAndDownloadUpdateCompletedEventArgs.prototype.get_UpdateAvailable = function () {
	this.CheckPtr();
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.CheckAndDownloadUpdateCompletedEventArgs.UpdateAvailableProperty), System.Boolean);
};
System.Windows.CheckAndDownloadUpdateCompletedEventArgs.prototype.get_UpdateHR = function () {
	this.CheckPtr();
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.CheckAndDownloadUpdateCompletedEventArgs.UpdateHRProperty), System.Int32);
};
System.Windows.CheckAndDownloadUpdateCompletedEventArgs.prototype.get_Error = function () {
	if (!this.UpdateAvailable) {
		var updateHR = this.UpdateHR;
		if (updateHR !== 0) {
			return $asm02.MS.Internal.Error.MarshalXresultAsException$0(updateHR);
		}
	}
	return null;
};
JSIL.MakeProperty(System.Windows.CheckAndDownloadUpdateCompletedEventArgs.prototype, "IManagedPeerBase_NativeObject", 
	System.Windows.CheckAndDownloadUpdateCompletedEventArgs.prototype.IManagedPeerBase_get_NativeObject, null);
JSIL.MakeProperty(System.Windows.CheckAndDownloadUpdateCompletedEventArgs.prototype, "UpdateAvailable", 
	System.Windows.CheckAndDownloadUpdateCompletedEventArgs.prototype.get_UpdateAvailable, null);
JSIL.MakeProperty(System.Windows.CheckAndDownloadUpdateCompletedEventArgs.prototype, "UpdateHR", 
	System.Windows.CheckAndDownloadUpdateCompletedEventArgs.prototype.get_UpdateHR, null);
JSIL.MakeProperty(System.Windows.CheckAndDownloadUpdateCompletedEventArgs.prototype, "Error", 
	System.Windows.CheckAndDownloadUpdateCompletedEventArgs.prototype.get_Error, null);
System.Windows.CheckAndDownloadUpdateCompletedEventArgs.prototype.m_objectPtr = null;
System.Windows.CheckAndDownloadUpdateCompletedEventArgs.UpdateAvailableProperty = null;
System.Windows.CheckAndDownloadUpdateCompletedEventArgs.UpdateHRProperty = null;
System.Windows.CheckAndDownloadUpdateCompletedEventArgs._cctor = function () {
	System.Windows.CheckAndDownloadUpdateCompletedEventArgs.UpdateAvailableProperty = System.Windows.DependencyProperty.RegisterCoreProperty(24514, System.Boolean);
	System.Windows.CheckAndDownloadUpdateCompletedEventArgs.UpdateHRProperty = System.Windows.DependencyProperty.RegisterCoreProperty(24515, System.Int32);
};

System.Windows.NotificationWindow.prototype._ctor = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 378);
};
System.Windows.NotificationWindow.prototype.Show = function (durationInMilliseconds) {
	if (!((durationInMilliseconds >= 0) && (durationInMilliseconds <= 30000))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("NotificationWindow_ValueOutOfRange", [0, 30000])]);
	}
	if (System.Windows.NotificationWindow.m_activeNotificationWindow === null) {
		if (durationInMilliseconds > 0) {
			if (this.m_timer === null) {
				this.m_timer = JSIL.New(System.Windows.Threading.DispatcherTimer, "_ctor$0", []);
				this.m_timer.add_Tick(JSIL.Delegate.New("System.EventHandler", this, System.Windows.NotificationWindow.prototype.OnTimerTick));
			}
			if (!((Math.floor(this.Width) <= 0) || (Math.floor(this.Height) <= 0))) {
				$asm02.MS.Internal.XcpImports.NotificationWindow_Show(this);
			}
			(this.m_timer.Interval = JSIL.New(System.TimeSpan, "_ctor$3", [0, 0, 0, 0, durationInMilliseconds]));
			this.m_timer.Start();
			System.Windows.NotificationWindow.m_activeNotificationWindow = this;
		}
		return;
	}
	if (System.Windows.NotificationWindow.m_activeNotificationWindow === this) {
		return;
	}
	throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("NotificationWindow_OneWindow")]);
};
System.Windows.NotificationWindow.prototype.OnTimerTick = function (o, sender) {
	this.Close();
};
System.Windows.NotificationWindow.prototype.Close = function () {
	if (this.m_timer !== null) {
		this.m_timer.remove_Tick(JSIL.Delegate.New("System.EventHandler", this, System.Windows.NotificationWindow.prototype.OnTimerTick));
		this.m_timer.Stop();
		this.m_timer = null;
	}
	$asm02.MS.Internal.XcpImports.NotificationWindow_Close(this);
	System.Windows.NotificationWindow.m_activeNotificationWindow = null;
	var closed = this.Closed;
	if (closed !== null) {
		closed(this, new System.EventArgs());
	}
};
System.Windows.NotificationWindow.prototype.add_Closed = function (value) {
	this.Closed = System.Delegate.Combine(this.Closed, value);
};
System.Windows.NotificationWindow.prototype.remove_Closed = function (value) {
	this.Closed = System.Delegate.Remove(this.Closed, value);
};
System.Windows.NotificationWindow.prototype.get_Content = function () {
	return JSIL.TryCast($asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.NotificationWindow.ContentProperty), System.Windows.FrameworkElement);
};
System.Windows.NotificationWindow.prototype.set_Content = function (value) {
	$asm02.MS.Internal.XcpImports.SetValue(this, System.Windows.NotificationWindow.ContentProperty, value);
};
System.Windows.NotificationWindow.prototype.get_Width = function () {
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.NotificationWindow.WidthProperty), System.Double);
};
System.Windows.NotificationWindow.prototype.set_Width = function (value) {
	if (System.Windows.NotificationWindow.m_activeNotificationWindow === this) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("NotificationWindow_ChangeWhileVisible")]);
	}
	if (!((value >= 0) && (value <= 400))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("NotificationWindow_ValueOutOfRange", [0, 400])]);
	}
	$asm02.MS.Internal.XcpImports.SetValue(this, System.Windows.NotificationWindow.WidthProperty, value);
};
System.Windows.NotificationWindow.prototype.get_Height = function () {
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.NotificationWindow.HeightProperty), System.Double);
};
System.Windows.NotificationWindow.prototype.set_Height = function (value) {
	if (System.Windows.NotificationWindow.m_activeNotificationWindow === this) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("NotificationWindow_ChangeWhileVisible")]);
	}
	if (!((value >= 0) && (value <= 100))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("NotificationWindow_ValueOutOfRange", [0, 100])]);
	}
	$asm02.MS.Internal.XcpImports.SetValue(this, System.Windows.NotificationWindow.HeightProperty, value);
};
System.Windows.NotificationWindow.prototype.get_Visibility = function () {
	if (System.Windows.NotificationWindow.m_activeNotificationWindow !== this) {
		return System.Windows.Visibility.Collapsed;
	}
	return System.Windows.Visibility.Visible;
};
System.Windows.NotificationWindow.get_Current = function () {
	return System.Windows.NotificationWindow.m_activeNotificationWindow;
};
JSIL.MakeProperty(System.Windows.NotificationWindow.prototype, "Content", 
	System.Windows.NotificationWindow.prototype.get_Content, System.Windows.NotificationWindow.prototype.set_Content);
JSIL.MakeProperty(System.Windows.NotificationWindow.prototype, "Width", 
	System.Windows.NotificationWindow.prototype.get_Width, System.Windows.NotificationWindow.prototype.set_Width);
JSIL.MakeProperty(System.Windows.NotificationWindow.prototype, "Height", 
	System.Windows.NotificationWindow.prototype.get_Height, System.Windows.NotificationWindow.prototype.set_Height);
JSIL.MakeProperty(System.Windows.NotificationWindow.prototype, "Visibility", 
	System.Windows.NotificationWindow.prototype.get_Visibility, null);
JSIL.MakeProperty(System.Windows.NotificationWindow, "Current", 
	System.Windows.NotificationWindow.get_Current, null);
Object.defineProperty(System.Windows.NotificationWindow, "native_PROPERTYINDEX_NOTIFICATION_WINDOW_CONTENT", {
		"value": 22260}
);
Object.defineProperty(System.Windows.NotificationWindow, "native_PROPERTYINDEX_NOTIFICATION_WINDOW_WIDTH", {
		"value": 22261}
);
Object.defineProperty(System.Windows.NotificationWindow, "native_PROPERTYINDEX_NOTIFICATION_WINDOW_HEIGHT", {
		"value": 22262}
);
Object.defineProperty(System.Windows.NotificationWindow, "MAX_WIDTH", {
		"value": 400}
);
Object.defineProperty(System.Windows.NotificationWindow, "MIN_WIDTH", {
		"value": 0}
);
Object.defineProperty(System.Windows.NotificationWindow, "MAX_HEIGHT", {
		"value": 100}
);
Object.defineProperty(System.Windows.NotificationWindow, "MIN_HEIGHT", {
		"value": 0}
);
Object.defineProperty(System.Windows.NotificationWindow, "MIN_DURATION", {
		"value": 0}
);
Object.defineProperty(System.Windows.NotificationWindow, "MAX_DURATION", {
		"value": 30000}
);
System.Windows.NotificationWindow.prototype.Closed = null;
System.Windows.NotificationWindow.ContentProperty = null;
System.Windows.NotificationWindow.WidthProperty = null;
System.Windows.NotificationWindow.HeightProperty = null;
System.Windows.NotificationWindow.m_activeNotificationWindow = null;
System.Windows.NotificationWindow.prototype.m_timer = null;
System.Windows.NotificationWindow._cctor = function () {
	System.Windows.NotificationWindow.ContentProperty = System.Windows.DependencyProperty.RegisterCoreProperty(22260, System.Windows.FrameworkElement);
	System.Windows.NotificationWindow.WidthProperty = System.Windows.DependencyProperty.RegisterCoreProperty(22261, System.Double);
	System.Windows.NotificationWindow.HeightProperty = System.Windows.DependencyProperty.RegisterCoreProperty(22262, System.Double);
};

System.Windows.Window.prototype._ctor = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 353);
};
System.Windows.Window.prototype.Activate = function () {
	if (System.Windows.Application.Current.IsRunningOutOfBrowser) {
		$asm02.MS.Internal.XcpImports.CheckThread();
		$asm02.MS.Internal.XcpImports.Window_Activate(this);
		return this.IsActive;
	}
	throw JSIL.New(System.NotSupportedException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("Window_NotSupportedForInBrowser")]);
};
System.Windows.Window.prototype.Close = function () {
	this.CheckRunningOutOfBrowser();
	this.CheckForPermissions();
	$asm02.MS.Internal.XcpImports.Window_Close(this);
};
System.Windows.Window.prototype.DragMove = function () {
	this.CheckElevatedPermissions();
	$asm02.MS.Internal.XcpImports.Window_DragMove(this);
};
System.Windows.Window.prototype.DragResize = function (resizeEdge) {
	this.CheckElevatedPermissions();
	$asm02.MS.Internal.XcpImports.Window_DragResize(this, resizeEdge);
};
System.Windows.Window.prototype.add_Closing = function (value) {
	this.CheckRunningOutOfBrowser();
	this.m_closingEvent = System.Delegate.Combine(this.m_closingEvent, value);
};
System.Windows.Window.prototype.remove_Closing = function (value) {
	this.CheckRunningOutOfBrowser();
	this.m_closingEvent = System.Delegate.Remove(this.m_closingEvent, value);
};
System.Windows.Window.prototype.get_Height = function () {
	this.CheckRunningOutOfBrowser();
	$asm02.MS.Internal.XcpImports.CheckThread();
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.Window.HeightProperty), System.Double);
};
System.Windows.Window.prototype.set_Height = function (value) {
	this.CheckForPermissions();
	this.CheckRunningOutOfBrowser();
	this.ValidateHeight(value);
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.SetValue(this, System.Windows.Window.HeightProperty, value);
};
System.Windows.Window.prototype.get_Width = function () {
	this.CheckRunningOutOfBrowser();
	$asm02.MS.Internal.XcpImports.CheckThread();
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.Window.WidthProperty), System.Double);
};
System.Windows.Window.prototype.set_Width = function (value) {
	this.CheckForPermissions();
	this.CheckRunningOutOfBrowser();
	this.ValidateWidth(value);
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.SetValue(this, System.Windows.Window.WidthProperty, value);
};
System.Windows.Window.prototype.get_Left = function () {
	this.CheckRunningOutOfBrowser();
	$asm02.MS.Internal.XcpImports.CheckThread();
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.Window.LeftProperty), System.Double);
};
System.Windows.Window.prototype.set_Left = function (value) {
	this.CheckRunningOutOfBrowser();
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.SetValue(this, System.Windows.Window.LeftProperty, value);
};
System.Windows.Window.prototype.get_Top = function () {
	this.CheckRunningOutOfBrowser();
	$asm02.MS.Internal.XcpImports.CheckThread();
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.Window.TopProperty), System.Double);
};
System.Windows.Window.prototype.set_Top = function (value) {
	this.CheckRunningOutOfBrowser();
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.SetValue(this, System.Windows.Window.TopProperty, value);
};
System.Windows.Window.prototype.get_TopMost = function () {
	this.CheckRunningOutOfBrowser();
	$asm02.MS.Internal.XcpImports.CheckThread();
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.Window.TopMostProperty), System.Boolean);
};
System.Windows.Window.prototype.set_TopMost = function (value) {
	this.CheckForPermissions();
	this.CheckRunningOutOfBrowser();
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.SetValue(this, System.Windows.Window.TopMostProperty, value);
};
System.Windows.Window.prototype.get_IsActive = function () {
	this.CheckRunningOutOfBrowser();
	$asm02.MS.Internal.XcpImports.CheckThread();
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.Window.IsActiveProperty), System.Boolean);
};
System.Windows.Window.prototype.get_WindowState = function () {
	this.CheckRunningOutOfBrowser();
	$asm02.MS.Internal.XcpImports.CheckThread();
	return System.Int32.Parse($asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.Window.WindowStateProperty).toString());
};
System.Windows.Window.prototype.set_WindowState = function (value) {
	this.CheckForPermissions();
	this.CheckRunningOutOfBrowser();
	$asm02.MS.Internal.XcpImports.CheckThread();
	switch (Number(value)) {
		case 0: 
			$asm02.MS.Internal.XcpImports.Window_Restore(this);
			return;
		case 1: 
			$asm02.MS.Internal.XcpImports.Window_Minimize(this);
			return;
		case 2: 
			$asm02.MS.Internal.XcpImports.Window_Maximize(this);
			return;
		default: 
			return;
	}
};
System.Windows.Window.prototype.CheckForPermissions = function () {
	if (!(System.Windows.Application.Current.HasElevatedPermissions || 
			$asm02.MS.Internal.XcpImports.IsUserInitiatedAction() || !System.Windows.Application.Current.ApplicationStarted)) {
		throw JSIL.New(System.Security.SecurityException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("Window_AccessNotAllowed")]);
	}
};
System.Windows.Window.prototype.CheckElevatedPermissions = function () {
	if (!System.Windows.Application.Current.HasElevatedPermissions) {
		throw JSIL.New(System.Security.SecurityException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("Window_NotElevated")]);
	}
};
System.Windows.Window.prototype.CheckRunningOutOfBrowser = function () {
	if (!System.Windows.Application.Current.IsRunningOutOfBrowser) {
		throw JSIL.New(System.NotSupportedException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("Window_NotSupportedForInBrowser")]);
	}
};
System.Windows.Window.prototype.ValidateHeight = function (height) {
	if (height > (this.MaxWindowHeight - this.ChromeHeight)) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("Window_ValueOutOfRange")]);
	}
};
System.Windows.Window.prototype.ValidateWidth = function (width) {
	if (width > (this.MaxWindowWidth - this.ChromeWidth)) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("Window_ValueOutOfRange")]);
	}
};
System.Windows.Window.prototype.get_MaxWindowHeight = function () {
	if (System.Windows.Application.Current.IsRunningOutOfBrowser) {
		$asm02.MS.Internal.XcpImports.CheckThread();
		return JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.Window.ScreenHeightProperty), System.Double);
	}
	throw JSIL.New(System.NotSupportedException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("Window_NotSupportedForInBrowser")]);
};
System.Windows.Window.prototype.get_MaxWindowWidth = function () {
	if (System.Windows.Application.Current.IsRunningOutOfBrowser) {
		$asm02.MS.Internal.XcpImports.CheckThread();
		return JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.Window.ScreenWidthProperty), System.Double);
	}
	throw JSIL.New(System.NotSupportedException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("Window_NotSupportedForInBrowser")]);
};
System.Windows.Window.prototype.get_ChromeHeight = function () {
	if (System.Windows.Application.Current.IsRunningOutOfBrowser) {
		$asm02.MS.Internal.XcpImports.CheckThread();
		return JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.Window.ChromeHeightProperty), System.Double);
	}
	throw JSIL.New(System.NotSupportedException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("Window_NotSupportedForInBrowser")]);
};
System.Windows.Window.prototype.get_ChromeWidth = function () {
	if (System.Windows.Application.Current.IsRunningOutOfBrowser) {
		$asm02.MS.Internal.XcpImports.CheckThread();
		return JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.Window.ChromeWidthProperty), System.Double);
	}
	throw JSIL.New(System.NotSupportedException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("Window_NotSupportedForInBrowser")]);
};
System.Windows.Window.FireClosingEvent = function (unmanagedObj, isCancelable, /* ref */ bCancel) {
	bCancel.value = false;
	try {
		var window = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(unmanagedObj), System.Windows.Window);
		if (!((window === null) || (window.m_closingEvent === null))) {
			var closingEventArgs = new System.ComponentModel.ClosingEventArgs(isCancelable);
			window.m_closingEvent(window, closingEventArgs);
			bCancel.value = closingEventArgs.Cancel;
		}
	} catch ($exception) {
		var arg_38_0 = $exception;
		return $asm02.MS.Internal.Error.GetXresultForException(arg_38_0);
	}
	return 0;
};
JSIL.MakeProperty(System.Windows.Window.prototype, "Height", 
	System.Windows.Window.prototype.get_Height, System.Windows.Window.prototype.set_Height);
JSIL.MakeProperty(System.Windows.Window.prototype, "Width", 
	System.Windows.Window.prototype.get_Width, System.Windows.Window.prototype.set_Width);
JSIL.MakeProperty(System.Windows.Window.prototype, "Left", 
	System.Windows.Window.prototype.get_Left, System.Windows.Window.prototype.set_Left);
JSIL.MakeProperty(System.Windows.Window.prototype, "Top", 
	System.Windows.Window.prototype.get_Top, System.Windows.Window.prototype.set_Top);
JSIL.MakeProperty(System.Windows.Window.prototype, "TopMost", 
	System.Windows.Window.prototype.get_TopMost, System.Windows.Window.prototype.set_TopMost);
JSIL.MakeProperty(System.Windows.Window.prototype, "IsActive", 
	System.Windows.Window.prototype.get_IsActive, null);
JSIL.MakeProperty(System.Windows.Window.prototype, "WindowState", 
	System.Windows.Window.prototype.get_WindowState, System.Windows.Window.prototype.set_WindowState);
JSIL.MakeProperty(System.Windows.Window.prototype, "MaxWindowHeight", 
	System.Windows.Window.prototype.get_MaxWindowHeight, null);
JSIL.MakeProperty(System.Windows.Window.prototype, "MaxWindowWidth", 
	System.Windows.Window.prototype.get_MaxWindowWidth, null);
JSIL.MakeProperty(System.Windows.Window.prototype, "ChromeHeight", 
	System.Windows.Window.prototype.get_ChromeHeight, null);
JSIL.MakeProperty(System.Windows.Window.prototype, "ChromeWidth", 
	System.Windows.Window.prototype.get_ChromeWidth, null);
Object.defineProperty(System.Windows.Window, "native_PROPERTYINDEX_WINDOW_HEIGHT", {
		"value": 22300}
);
Object.defineProperty(System.Windows.Window, "native_PROPERTYINDEX_WINDOW_WIDTH", {
		"value": 22301}
);
Object.defineProperty(System.Windows.Window, "native_PROPERTYINDEX_WINDOW_LEFT", {
		"value": 22302}
);
Object.defineProperty(System.Windows.Window, "native_PROPERTYINDEX_WINDOW_TOP", {
		"value": 22303}
);
Object.defineProperty(System.Windows.Window, "native_PROPERTYINDEX_WINDOW_TOPMOST", {
		"value": 22304}
);
Object.defineProperty(System.Windows.Window, "native_PROPERTYINDEX_WINDOW_ISACTIVE", {
		"value": 22305}
);
Object.defineProperty(System.Windows.Window, "native_PROPERTYINDEX_WINDOW_WINDOWSTATE", {
		"value": 22306}
);
Object.defineProperty(System.Windows.Window, "native_PROPERTYINDEX_WINDOW_SCREENHEIGHT", {
		"value": 22307}
);
Object.defineProperty(System.Windows.Window, "native_PROPERTYINDEX_WINDOW_SCREENWIDTH", {
		"value": 22308}
);
Object.defineProperty(System.Windows.Window, "native_PROPERTYINDEX_WINDOW_CHROMEHEIGHT", {
		"value": 22309}
);
Object.defineProperty(System.Windows.Window, "native_PROPERTYINDEX_WINDOW_CHROMEWIDTH", {
		"value": 22310}
);
System.Windows.Window.HeightProperty = null;
System.Windows.Window.WidthProperty = null;
System.Windows.Window.LeftProperty = null;
System.Windows.Window.TopProperty = null;
System.Windows.Window.TopMostProperty = null;
System.Windows.Window.IsActiveProperty = null;
System.Windows.Window.WindowStateProperty = null;
System.Windows.Window.ScreenHeightProperty = null;
System.Windows.Window.ScreenWidthProperty = null;
System.Windows.Window.ChromeHeightProperty = null;
System.Windows.Window.ChromeWidthProperty = null;
System.Windows.Window.prototype.m_closingEvent = null;
System.Windows.Window._cctor = function () {
	System.Windows.Window.HeightProperty = System.Windows.DependencyProperty.RegisterCoreProperty(22300, System.Double);
	System.Windows.Window.WidthProperty = System.Windows.DependencyProperty.RegisterCoreProperty(22301, System.Double);
	System.Windows.Window.LeftProperty = System.Windows.DependencyProperty.RegisterCoreProperty(22302, System.Double);
	System.Windows.Window.TopProperty = System.Windows.DependencyProperty.RegisterCoreProperty(22303, System.Double);
	System.Windows.Window.TopMostProperty = System.Windows.DependencyProperty.RegisterCoreProperty(22304, System.Boolean);
	System.Windows.Window.IsActiveProperty = System.Windows.DependencyProperty.RegisterCoreProperty(22305, System.Boolean);
	System.Windows.Window.WindowStateProperty = System.Windows.DependencyProperty.RegisterCoreProperty(22306, System.Windows.WindowState);
	System.Windows.Window.ScreenHeightProperty = System.Windows.DependencyProperty.RegisterCoreProperty(22307, System.Double);
	System.Windows.Window.ScreenWidthProperty = System.Windows.DependencyProperty.RegisterCoreProperty(22308, System.Double);
	System.Windows.Window.ChromeHeightProperty = System.Windows.DependencyProperty.RegisterCoreProperty(22309, System.Double);
	System.Windows.Window.ChromeWidthProperty = System.Windows.DependencyProperty.RegisterCoreProperty(22310, System.Double);
};

System.Windows.VisualStateManager.prototype._ctor$0 = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 385);
};
System.Windows.VisualStateManager.prototype._ctor$1 = function (nKnownTypeIndex) {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, nKnownTypeIndex);
};
System.Windows.VisualStateManager.GoToState = function (control, stateName, useTransitions) {
	var flag = new JSIL.Variable(false), group = new JSIL.Variable(null), visualState = new JSIL.Variable(null), group2 = new JSIL.Variable(null), state = new JSIL.Variable(null);
	if (control === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["control"]);
	}
	if (stateName === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["stateName"]);
	}
	var implementationRoot = control.ImplementationRoot;
	if (implementationRoot === null) {
		return false;
	}
	var customVisualStateManager = System.Windows.VisualStateManager.GetCustomVisualStateManager(implementationRoot);
	if (customVisualStateManager === null) {
		var result = $asm02.MS.Internal.XcpImports.VisualStateManager_GoToState(control, stateName, useTransitions, /* ref */ flag);
		if (flag.value) {
			var visualStateGroups = System.Windows.VisualStateManager.GetVisualStateGroups(implementationRoot);
			if (visualStateGroups === null) {
				return false;
			}
			System.Windows.VisualStateManager.TryGetState(visualStateGroups, stateName, /* ref */ group, /* ref */ visualState);
			if (!((visualState.value === null) || (visualState.value.Storyboard === null))) {
				return System.Windows.VisualStateManager.RetryGoToStateAfterRefreshingInheritanceContext(
					control, 
					implementationRoot, 
					group.value, 
					visualState.value, 
					useTransitions
				);
			}
		}
		return result;
	}
	var visualStateGroups2 = System.Windows.VisualStateManager.GetVisualStateGroups(implementationRoot);
	if (visualStateGroups2 === null) {
		return false;
	}
	System.Windows.VisualStateManager.TryGetState(visualStateGroups2, stateName, /* ref */ group2, /* ref */ state);
	return customVisualStateManager.GoToStateCore(
		control, 
		implementationRoot, 
		stateName, 
		group2.value, 
		state.value, 
		useTransitions
	);
};
System.Windows.VisualStateManager.prototype.GoToStateCore = function (control, templateRoot, stateName, group, state, useTransitions) {
	var flag = new JSIL.Variable(false);
	var result = $asm02.MS.Internal.XcpImports.VisualStateManager_GoToStateInternal(
		control, 
		templateRoot, 
		group, 
		state, 
		useTransitions, 
		/* ref */ flag
	);
	if (!(!flag.value || 
			(state === null) || (state.Storyboard === null))) {
		return System.Windows.VisualStateManager.RetryGoToStateAfterRefreshingInheritanceContext(
			control, 
			templateRoot, 
			group, 
			state, 
			useTransitions
		);
	}
	return result;
};
System.Windows.VisualStateManager.RetryGoToStateAfterRefreshingInheritanceContext = function (control, templateRoot, group, state, useTransitions) {
	var flag = new JSIL.Variable(false);
__loop0__: 
	for (var i = 0; i < state.Storyboard.Children.Count; ++i) {
		var dependencyObject = state.Storyboard.Children.get_Item(i);
		dependencyObject.OnInheritanceContextChanged(state, System.EventArgs.Empty);
	}
	return $asm02.MS.Internal.XcpImports.VisualStateManager_GoToStateInternal(
		control, 
		templateRoot, 
		group, 
		state, 
		useTransitions, 
		/* ref */ flag
	);
};
System.Windows.VisualStateManager.GetCustomVisualStateManager = function (obj) {
	if (obj === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["obj"]);
	}
	return JSIL.TryCast(obj.GetValue(System.Windows.VisualStateManager.CustomVisualStateManagerProperty), System.Windows.VisualStateManager);
};
System.Windows.VisualStateManager.SetCustomVisualStateManager = function (obj, value) {
	if (obj === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["obj"]);
	}
	obj.SetValue(System.Windows.VisualStateManager.CustomVisualStateManagerProperty, value);
};
System.Windows.VisualStateManager.GetVisualStateGroups = function (obj) {
	if (obj === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["obj"]);
	}
	var visualStateGroupCollection = JSIL.Cast(obj.GetValue(System.Windows.VisualStateManager.VisualStateGroupsProperty), $asm02.MS.Internal.VisualStateGroupCollection);
	if (visualStateGroupCollection === null) {
		visualStateGroupCollection = new $asm02.MS.Internal.VisualStateGroupCollection();
		System.Windows.VisualStateManager.SetVisualStateGroups(obj, visualStateGroupCollection);
	}
	return JSIL.New(System.Collections.ObjectModel.Collection$b1.Of(System.Windows.VisualStateGroup), "_ctor$1", [visualStateGroupCollection]);
};
System.Windows.VisualStateManager.SetVisualStateGroups = function (obj, value) {
	if (obj === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["obj"]);
	}
	obj.SetValue(System.Windows.VisualStateManager.VisualStateGroupsProperty, value);
};
System.Windows.VisualStateManager.TryGetState = function (groups, stateName, /* ref */ group, /* ref */ state) {
__loop0__: 
	for (var i = 0; i < groups.ICollection_Count; ++i) {
		var visualStateGroup = JSIL.Cast(groups.IList_get_Item(i), System.Windows.VisualStateGroup);
		var state2 = visualStateGroup.GetState(stateName);
		if (state2 !== null) {
			group.value = visualStateGroup;
			state.value = state2;
			return true;
		}
	}
	group.value = null;
	state.value = null;
	return false;
};
System.Windows.VisualStateManager.prototype.RaiseCurrentStateChanging = function (stateGroup, oldState, newState, control) {
	if (stateGroup === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["stateGroup"]);
	}
	if (newState === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["newState"]);
	}
	if (control === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["control"]);
	}
	var implementationRoot = control.ImplementationRoot;
	if (implementationRoot === null) {
		return;
	}
	stateGroup.RaiseCurrentStateChanging(implementationRoot, oldState, newState, control);
};
System.Windows.VisualStateManager.prototype.RaiseCurrentStateChanged = function (stateGroup, oldState, newState, control) {
	if (stateGroup === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["stateGroup"]);
	}
	if (newState === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["newState"]);
	}
	if (control === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["control"]);
	}
	var implementationRoot = control.ImplementationRoot;
	if (implementationRoot === null) {
		return;
	}
	stateGroup.RaiseCurrentStateChanged(implementationRoot, oldState, newState, control);
};
JSIL.OverloadedMethod(System.Windows.VisualStateManager.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);
System.Windows.VisualStateManager.CustomVisualStateManagerProperty = null;
System.Windows.VisualStateManager.VisualStateGroupsProperty = null;
System.Windows.VisualStateManager._cctor = function () {
	System.Windows.VisualStateManager.DurationZero = new System.Windows.Duration();
	System.Windows.VisualStateManager.CustomVisualStateManagerProperty = System.Windows.DependencyProperty.RegisterAttached("CustomVisualStateManager", System.Windows.VisualStateManager, System.Windows.VisualStateManager, null);
	System.Windows.VisualStateManager.VisualStateGroupsProperty = System.Windows.DependencyProperty.RegisterCoreProperty(21000, $asm02.MS.Internal.VisualStateGroupCollection);
	System.Windows.VisualStateManager.DurationZero = new System.Windows.Duration(System.TimeSpan.Zero);
};

System.Windows.Ink.StrokeCollection.prototype._ctor = function () {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Ink.Stroke).prototype._ctor$1.call(this, 137);
};
System.Windows.Ink.StrokeCollection.prototype.AddInternal = function (value) {
	this.AddImpl(value);
};
System.Windows.Ink.StrokeCollection.prototype.ContainsInternal = function (value) {
	return this.ContainsImpl(value);
};
System.Windows.Ink.StrokeCollection.prototype.IndexOfInternal = function (value) {
	return this.IndexOfImpl(value);
};
System.Windows.Ink.StrokeCollection.prototype.InsertInternal = function (index, value) {
	this.InsertImpl(index, value);
};
System.Windows.Ink.StrokeCollection.prototype.RemoveInternal = function (value) {
	return this.RemoveImpl(value);
};
System.Windows.Ink.StrokeCollection.prototype.GetItemImplSkipMethodPack = function (index) {
	return this.GetItemImpl(index);
};
System.Windows.Ink.StrokeCollection.prototype.SetItemImplSkipMethodPack = function (index, value) {
	this.SetItemImpl(index, value);
};
System.Windows.Ink.StrokeCollection.prototype.GetBounds = function () {
	return $asm02.MS.Internal.XcpImports.StrokeCollection_GetBounds(this);
};
System.Windows.Ink.StrokeCollection.prototype.HitTest = function (stylusPointCollection) {
	return $asm02.MS.Internal.XcpImports.StrokeCollection_HitTest(this, stylusPointCollection);
};

System.Windows.Ink.DrawingAttributes.prototype._ctor = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 141);
};
System.Windows.Ink.DrawingAttributes.prototype.get_Color = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Ink.DrawingAttributes.ColorProperty), System.Windows.Media.Color);
};
System.Windows.Ink.DrawingAttributes.prototype.set_Color = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Ink.DrawingAttributes.ColorProperty, value);
};
System.Windows.Ink.DrawingAttributes.prototype.get_OutlineColor = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Ink.DrawingAttributes.OutlineColorProperty), System.Windows.Media.Color);
};
System.Windows.Ink.DrawingAttributes.prototype.set_OutlineColor = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Ink.DrawingAttributes.OutlineColorProperty, value);
};
System.Windows.Ink.DrawingAttributes.prototype.get_Width = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Ink.DrawingAttributes.WidthProperty), System.Double);
};
System.Windows.Ink.DrawingAttributes.prototype.set_Width = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Ink.DrawingAttributes.WidthProperty, value);
};
System.Windows.Ink.DrawingAttributes.prototype.get_Height = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Ink.DrawingAttributes.HeightProperty), System.Double);
};
System.Windows.Ink.DrawingAttributes.prototype.set_Height = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Ink.DrawingAttributes.HeightProperty, value);
};
JSIL.MakeProperty(System.Windows.Ink.DrawingAttributes.prototype, "Color", 
	System.Windows.Ink.DrawingAttributes.prototype.get_Color, System.Windows.Ink.DrawingAttributes.prototype.set_Color);
JSIL.MakeProperty(System.Windows.Ink.DrawingAttributes.prototype, "OutlineColor", 
	System.Windows.Ink.DrawingAttributes.prototype.get_OutlineColor, System.Windows.Ink.DrawingAttributes.prototype.set_OutlineColor);
JSIL.MakeProperty(System.Windows.Ink.DrawingAttributes.prototype, "Width", 
	System.Windows.Ink.DrawingAttributes.prototype.get_Width, System.Windows.Ink.DrawingAttributes.prototype.set_Width);
JSIL.MakeProperty(System.Windows.Ink.DrawingAttributes.prototype, "Height", 
	System.Windows.Ink.DrawingAttributes.prototype.get_Height, System.Windows.Ink.DrawingAttributes.prototype.set_Height);
System.Windows.Ink.DrawingAttributes.ColorProperty = null;
System.Windows.Ink.DrawingAttributes.OutlineColorProperty = null;
System.Windows.Ink.DrawingAttributes.WidthProperty = null;
System.Windows.Ink.DrawingAttributes.HeightProperty = null;
System.Windows.Ink.DrawingAttributes._cctor = function () {
	System.Windows.Ink.DrawingAttributes.ColorProperty = System.Windows.DependencyProperty.RegisterCoreProperty(17130, System.Windows.Media.Color);
	System.Windows.Ink.DrawingAttributes.OutlineColorProperty = System.Windows.DependencyProperty.RegisterCoreProperty(17133, System.Windows.Media.Color);
	System.Windows.Ink.DrawingAttributes.WidthProperty = System.Windows.DependencyProperty.RegisterCoreProperty(17131, System.Double);
	System.Windows.Ink.DrawingAttributes.HeightProperty = System.Windows.DependencyProperty.RegisterCoreProperty(17132, System.Double);
};

System.Windows.Media.DoubleCollection.prototype._ctor = function () {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Double).prototype._ctor$1.call(this, 57);
};
System.Windows.Media.DoubleCollection.prototype.AddInternal = function (value) {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Double).prototype.AddDouble.call(this, value);
};
System.Windows.Media.DoubleCollection.prototype.ContainsInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Double).prototype.ContainsDouble.call(this, value);
};
System.Windows.Media.DoubleCollection.prototype.IndexOfInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Double).prototype.IndexOfDouble.call(this, value);
};
System.Windows.Media.DoubleCollection.prototype.InsertInternal = function (index, value) {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Double).prototype.InsertDouble.call(this, index, value);
};
System.Windows.Media.DoubleCollection.prototype.RemoveInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Double).prototype.RemoveDouble.call(this, value);
};
System.Windows.Media.DoubleCollection.prototype.GetItemImplSkipMethodPack = function (index) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Double).prototype.GetItemDouble.call(this, index);
};
System.Windows.Media.DoubleCollection.prototype.SetItemImplSkipMethodPack = function (index, value) {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Double).prototype.SetItemDouble.call(this, index, value);
};

System.Windows.Media.PointCollection.prototype._ctor = function () {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Point).prototype._ctor$1.call(this, 58);
};
System.Windows.Media.PointCollection.prototype.AddInternal = function (value) {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Point).prototype.AddPoint.call(this, value);
};
System.Windows.Media.PointCollection.prototype.ContainsInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Point).prototype.ContainsPoint.call(this, value);
};
System.Windows.Media.PointCollection.prototype.IndexOfInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Point).prototype.IndexOfPoint.call(this, value);
};
System.Windows.Media.PointCollection.prototype.InsertInternal = function (index, value) {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Point).prototype.InsertPoint.call(this, index, value);
};
System.Windows.Media.PointCollection.prototype.RemoveInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Point).prototype.RemovePoint.call(this, value);
};
System.Windows.Media.PointCollection.prototype.GetItemImplSkipMethodPack = function (index) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Point).prototype.GetItemPoint.call(this, index);
};
System.Windows.Media.PointCollection.prototype.SetItemImplSkipMethodPack = function (index, value) {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Point).prototype.SetItemPoint.call(this, index, value);
};

System.Windows.Media.GeneralTransform.prototype._ctor$0 = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 176);
};
System.Windows.Media.GeneralTransform.prototype._ctor$1 = function (nKnownTypeIndex) {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, nKnownTypeIndex);
};
System.Windows.Media.GeneralTransform.prototype.Transform = function (point) {
	var result = new JSIL.Variable(new System.Windows.Point());
	if (!this.TryTransform(point, /* ref */ result)) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", ["Could not transform"]);
	}
	return result.value;
};
JSIL.OverloadedMethod(System.Windows.Media.GeneralTransform.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);
JSIL.MakeProperty(System.Windows.Media.GeneralTransform.prototype, "Inverse", 
	System.Windows.Media.GeneralTransform.prototype.get_Inverse, null);

System.Windows.Media.Transform.prototype._ctor = function (nKnownTypeIndex) {
	System.Windows.Media.GeneralTransform.prototype._ctor$1.call(this, nKnownTypeIndex);
};
System.Windows.Media.Transform.prototype.TryTransform = function (inPoint, /* ref */ outPoint) {
	try {
		outPoint.value = this.TransformNative(inPoint).MemberwiseClone();
		var result = true;
	} catch ($exception) {
		outPoint.value = new System.Windows.Point();
		result = false;
	}
	return result;
};
System.Windows.Media.Transform.prototype.TransformNative = function (point) {
	var result = new JSIL.Variable(new System.Windows.Point());
	$asm02.MS.Internal.XcpImports.Transform_Transform(this, point, /* ref */ result);
	return result.value;
};
System.Windows.Media.Transform.prototype.TransformBounds = function (rect) {
	return this.TransformBoundsNative(rect);
};
System.Windows.Media.Transform.prototype.TransformBoundsNative = function (rect) {
	var result = new JSIL.Variable(new System.Windows.Rect());
	$asm02.MS.Internal.XcpImports.Transform_TransformBounds(this, rect, /* ref */ result);
	return result.value;
};
System.Windows.Media.Transform.prototype.InverseNative = function () {
	return $asm02.MS.Internal.XcpImports.Transform_Inverse$1(this);
};
System.Windows.Media.Transform.prototype.get_Inverse = function () {
	return this.InverseNative();
};
JSIL.MakeProperty(System.Windows.Media.Transform.prototype, "Inverse", 
	System.Windows.Media.Transform.prototype.get_Inverse, null);

System.Windows.Media.PathSegment.prototype._ctor = function (nKnownTypeIndex) {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, nKnownTypeIndex);
};

System.Windows.Media.Brush.prototype._ctor$0 = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 33);
};
System.Windows.Media.Brush.prototype._ctor$1 = function (nKnownTypeIndex) {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, nKnownTypeIndex);
};
System.Windows.Media.Brush.prototype.get_Opacity = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Brush.OpacityProperty), System.Double);
};
System.Windows.Media.Brush.prototype.set_Opacity = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Brush.OpacityProperty, value);
};
System.Windows.Media.Brush.prototype.get_Transform = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Brush.TransformProperty), System.Windows.Media.Transform);
};
System.Windows.Media.Brush.prototype.set_Transform = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Brush.TransformProperty, value);
};
System.Windows.Media.Brush.prototype.get_RelativeTransform = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Brush.RelativeTransformProperty), System.Windows.Media.Transform);
};
System.Windows.Media.Brush.prototype.set_RelativeTransform = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Brush.RelativeTransformProperty, value);
};
JSIL.OverloadedMethod(System.Windows.Media.Brush.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);
JSIL.MakeProperty(System.Windows.Media.Brush.prototype, "Opacity", 
	System.Windows.Media.Brush.prototype.get_Opacity, System.Windows.Media.Brush.prototype.set_Opacity);
JSIL.MakeProperty(System.Windows.Media.Brush.prototype, "Transform", 
	System.Windows.Media.Brush.prototype.get_Transform, System.Windows.Media.Brush.prototype.set_Transform);
JSIL.MakeProperty(System.Windows.Media.Brush.prototype, "RelativeTransform", 
	System.Windows.Media.Brush.prototype.get_RelativeTransform, System.Windows.Media.Brush.prototype.set_RelativeTransform);
System.Windows.Media.Brush.OpacityProperty = null;
System.Windows.Media.Brush.TransformProperty = null;
System.Windows.Media.Brush.RelativeTransformProperty = null;
System.Windows.Media.Brush._cctor = function () {
	System.Windows.Media.Brush.OpacityProperty = System.Windows.DependencyProperty.RegisterCoreProperty(12200, System.Double);
	System.Windows.Media.Brush.TransformProperty = System.Windows.DependencyProperty.RegisterCoreProperty(12201, System.Windows.Media.Transform);
	System.Windows.Media.Brush.RelativeTransformProperty = System.Windows.DependencyProperty.RegisterCoreProperty(12202, System.Windows.Media.Transform);
};

System.Windows.Media.TileBrush.prototype._ctor$0 = function () {
	System.Windows.Media.Brush.prototype._ctor$1.call(this, 102);
};
System.Windows.Media.TileBrush.prototype._ctor$1 = function (nKnownTypeIndex) {
	System.Windows.Media.Brush.prototype._ctor$1.call(this, nKnownTypeIndex);
};
System.Windows.Media.TileBrush.prototype.get_AlignmentX = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.TileBrush.AlignmentXProperty), System.Windows.Media.AlignmentX);
};
System.Windows.Media.TileBrush.prototype.set_AlignmentX = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.TileBrush.AlignmentXProperty, value);
};
System.Windows.Media.TileBrush.prototype.get_AlignmentY = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.TileBrush.AlignmentYProperty), System.Windows.Media.AlignmentY);
};
System.Windows.Media.TileBrush.prototype.set_AlignmentY = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.TileBrush.AlignmentYProperty, value);
};
System.Windows.Media.TileBrush.prototype.get_Stretch = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.TileBrush.StretchProperty), System.Windows.Media.Stretch);
};
System.Windows.Media.TileBrush.prototype.set_Stretch = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.TileBrush.StretchProperty, value);
};
JSIL.OverloadedMethod(System.Windows.Media.TileBrush.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);
JSIL.MakeProperty(System.Windows.Media.TileBrush.prototype, "AlignmentX", 
	System.Windows.Media.TileBrush.prototype.get_AlignmentX, System.Windows.Media.TileBrush.prototype.set_AlignmentX);
JSIL.MakeProperty(System.Windows.Media.TileBrush.prototype, "AlignmentY", 
	System.Windows.Media.TileBrush.prototype.get_AlignmentY, System.Windows.Media.TileBrush.prototype.set_AlignmentY);
JSIL.MakeProperty(System.Windows.Media.TileBrush.prototype, "Stretch", 
	System.Windows.Media.TileBrush.prototype.get_Stretch, System.Windows.Media.TileBrush.prototype.set_Stretch);
System.Windows.Media.TileBrush.AlignmentXProperty = null;
System.Windows.Media.TileBrush.AlignmentYProperty = null;
System.Windows.Media.TileBrush.StretchProperty = null;
System.Windows.Media.TileBrush._cctor = function () {
	System.Windows.Media.TileBrush.AlignmentXProperty = System.Windows.DependencyProperty.RegisterCoreProperty(12800, System.Windows.Media.AlignmentX);
	System.Windows.Media.TileBrush.AlignmentYProperty = System.Windows.DependencyProperty.RegisterCoreProperty(12801, System.Windows.Media.AlignmentY);
	System.Windows.Media.TileBrush.StretchProperty = System.Windows.DependencyProperty.RegisterCoreProperty(12802, System.Windows.Media.Stretch);
};

System.Windows.Media.Geometry.prototype._ctor = function (nKnownTypeIndex) {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, nKnownTypeIndex);
};
System.Windows.Media.Geometry.prototype.get_Transform = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Geometry.TransformProperty), System.Windows.Media.Transform);
};
System.Windows.Media.Geometry.prototype.set_Transform = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Geometry.TransformProperty, value);
};
System.Windows.Media.Geometry.prototype.get_Bounds = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Geometry.BoundsProperty), System.Windows.Rect);
};
System.Windows.Media.Geometry.get_Empty = function () {
	return new System.Windows.Media.PathGeometry();
};
System.Windows.Media.Geometry.get_StandardFlatteningTolerance = function () {
	return 0.25;
};
JSIL.MakeProperty(System.Windows.Media.Geometry.prototype, "Transform", 
	System.Windows.Media.Geometry.prototype.get_Transform, System.Windows.Media.Geometry.prototype.set_Transform);
JSIL.MakeProperty(System.Windows.Media.Geometry.prototype, "Bounds", 
	System.Windows.Media.Geometry.prototype.get_Bounds, null);
JSIL.MakeProperty(System.Windows.Media.Geometry, "Empty", 
	System.Windows.Media.Geometry.get_Empty, null);
JSIL.MakeProperty(System.Windows.Media.Geometry, "StandardFlatteningTolerance", 
	System.Windows.Media.Geometry.get_StandardFlatteningTolerance, null);
System.Windows.Media.Geometry.TransformProperty = null;
System.Windows.Media.Geometry.BoundsProperty = null;
System.Windows.Media.Geometry._cctor = function () {
	System.Windows.Media.Geometry.TransformProperty = System.Windows.DependencyProperty.RegisterCoreProperty(11601, System.Windows.Media.Transform);
	System.Windows.Media.Geometry.BoundsProperty = System.Windows.DependencyProperty.RegisterCoreProperty(11602, System.Windows.Rect);
};

System.Windows.Media.ImageSource.prototype._ctor = function (nKnownTypeIndex) {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, nKnownTypeIndex);
};

System.Windows.Media.RotateTransform.prototype._ctor = function () {
	System.Windows.Media.Transform.prototype._ctor.call(this, 17);
};
System.Windows.Media.RotateTransform.prototype.get_CenterX = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.RotateTransform.CenterXProperty), System.Double);
};
System.Windows.Media.RotateTransform.prototype.set_CenterX = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.RotateTransform.CenterXProperty, value);
};
System.Windows.Media.RotateTransform.prototype.get_CenterY = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.RotateTransform.CenterYProperty), System.Double);
};
System.Windows.Media.RotateTransform.prototype.set_CenterY = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.RotateTransform.CenterYProperty, value);
};
System.Windows.Media.RotateTransform.prototype.get_Angle = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.RotateTransform.AngleProperty), System.Double);
};
System.Windows.Media.RotateTransform.prototype.set_Angle = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.RotateTransform.AngleProperty, value);
};
JSIL.MakeProperty(System.Windows.Media.RotateTransform.prototype, "CenterX", 
	System.Windows.Media.RotateTransform.prototype.get_CenterX, System.Windows.Media.RotateTransform.prototype.set_CenterX);
JSIL.MakeProperty(System.Windows.Media.RotateTransform.prototype, "CenterY", 
	System.Windows.Media.RotateTransform.prototype.get_CenterY, System.Windows.Media.RotateTransform.prototype.set_CenterY);
JSIL.MakeProperty(System.Windows.Media.RotateTransform.prototype, "Angle", 
	System.Windows.Media.RotateTransform.prototype.get_Angle, System.Windows.Media.RotateTransform.prototype.set_Angle);
System.Windows.Media.RotateTransform.CenterXProperty = null;
System.Windows.Media.RotateTransform.CenterYProperty = null;
System.Windows.Media.RotateTransform.AngleProperty = null;
System.Windows.Media.RotateTransform._cctor = function () {
	System.Windows.Media.RotateTransform.CenterXProperty = System.Windows.DependencyProperty.RegisterCoreProperty(10100, System.Double);
	System.Windows.Media.RotateTransform.CenterYProperty = System.Windows.DependencyProperty.RegisterCoreProperty(10101, System.Double);
	System.Windows.Media.RotateTransform.AngleProperty = System.Windows.DependencyProperty.RegisterCoreProperty(10102, System.Double);
};

System.Windows.Media.ScaleTransform.prototype._ctor = function () {
	System.Windows.Media.Transform.prototype._ctor.call(this, 18);
};
System.Windows.Media.ScaleTransform.prototype.get_CenterX = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.ScaleTransform.CenterXProperty), System.Double);
};
System.Windows.Media.ScaleTransform.prototype.set_CenterX = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.ScaleTransform.CenterXProperty, value);
};
System.Windows.Media.ScaleTransform.prototype.get_CenterY = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.ScaleTransform.CenterYProperty), System.Double);
};
System.Windows.Media.ScaleTransform.prototype.set_CenterY = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.ScaleTransform.CenterYProperty, value);
};
System.Windows.Media.ScaleTransform.prototype.get_ScaleX = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.ScaleTransform.ScaleXProperty), System.Double);
};
System.Windows.Media.ScaleTransform.prototype.set_ScaleX = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.ScaleTransform.ScaleXProperty, value);
};
System.Windows.Media.ScaleTransform.prototype.get_ScaleY = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.ScaleTransform.ScaleYProperty), System.Double);
};
System.Windows.Media.ScaleTransform.prototype.set_ScaleY = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.ScaleTransform.ScaleYProperty, value);
};
JSIL.MakeProperty(System.Windows.Media.ScaleTransform.prototype, "CenterX", 
	System.Windows.Media.ScaleTransform.prototype.get_CenterX, System.Windows.Media.ScaleTransform.prototype.set_CenterX);
JSIL.MakeProperty(System.Windows.Media.ScaleTransform.prototype, "CenterY", 
	System.Windows.Media.ScaleTransform.prototype.get_CenterY, System.Windows.Media.ScaleTransform.prototype.set_CenterY);
JSIL.MakeProperty(System.Windows.Media.ScaleTransform.prototype, "ScaleX", 
	System.Windows.Media.ScaleTransform.prototype.get_ScaleX, System.Windows.Media.ScaleTransform.prototype.set_ScaleX);
JSIL.MakeProperty(System.Windows.Media.ScaleTransform.prototype, "ScaleY", 
	System.Windows.Media.ScaleTransform.prototype.get_ScaleY, System.Windows.Media.ScaleTransform.prototype.set_ScaleY);
System.Windows.Media.ScaleTransform.CenterXProperty = null;
System.Windows.Media.ScaleTransform.CenterYProperty = null;
System.Windows.Media.ScaleTransform.ScaleXProperty = null;
System.Windows.Media.ScaleTransform.ScaleYProperty = null;
System.Windows.Media.ScaleTransform._cctor = function () {
	System.Windows.Media.ScaleTransform.CenterXProperty = System.Windows.DependencyProperty.RegisterCoreProperty(10204, System.Double);
	System.Windows.Media.ScaleTransform.CenterYProperty = System.Windows.DependencyProperty.RegisterCoreProperty(10201, System.Double);
	System.Windows.Media.ScaleTransform.ScaleXProperty = System.Windows.DependencyProperty.RegisterCoreProperty(10202, System.Double);
	System.Windows.Media.ScaleTransform.ScaleYProperty = System.Windows.DependencyProperty.RegisterCoreProperty(10203, System.Double);
};

System.Windows.Media.SkewTransform.prototype._ctor = function () {
	System.Windows.Media.Transform.prototype._ctor.call(this, 19);
};
System.Windows.Media.SkewTransform.prototype.get_CenterX = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.SkewTransform.CenterXProperty), System.Double);
};
System.Windows.Media.SkewTransform.prototype.set_CenterX = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.SkewTransform.CenterXProperty, value);
};
System.Windows.Media.SkewTransform.prototype.get_CenterY = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.SkewTransform.CenterYProperty), System.Double);
};
System.Windows.Media.SkewTransform.prototype.set_CenterY = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.SkewTransform.CenterYProperty, value);
};
System.Windows.Media.SkewTransform.prototype.get_AngleX = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.SkewTransform.AngleXProperty), System.Double);
};
System.Windows.Media.SkewTransform.prototype.set_AngleX = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.SkewTransform.AngleXProperty, value);
};
System.Windows.Media.SkewTransform.prototype.get_AngleY = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.SkewTransform.AngleYProperty), System.Double);
};
System.Windows.Media.SkewTransform.prototype.set_AngleY = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.SkewTransform.AngleYProperty, value);
};
JSIL.MakeProperty(System.Windows.Media.SkewTransform.prototype, "CenterX", 
	System.Windows.Media.SkewTransform.prototype.get_CenterX, System.Windows.Media.SkewTransform.prototype.set_CenterX);
JSIL.MakeProperty(System.Windows.Media.SkewTransform.prototype, "CenterY", 
	System.Windows.Media.SkewTransform.prototype.get_CenterY, System.Windows.Media.SkewTransform.prototype.set_CenterY);
JSIL.MakeProperty(System.Windows.Media.SkewTransform.prototype, "AngleX", 
	System.Windows.Media.SkewTransform.prototype.get_AngleX, System.Windows.Media.SkewTransform.prototype.set_AngleX);
JSIL.MakeProperty(System.Windows.Media.SkewTransform.prototype, "AngleY", 
	System.Windows.Media.SkewTransform.prototype.get_AngleY, System.Windows.Media.SkewTransform.prototype.set_AngleY);
System.Windows.Media.SkewTransform.CenterXProperty = null;
System.Windows.Media.SkewTransform.CenterYProperty = null;
System.Windows.Media.SkewTransform.AngleXProperty = null;
System.Windows.Media.SkewTransform.AngleYProperty = null;
System.Windows.Media.SkewTransform._cctor = function () {
	System.Windows.Media.SkewTransform.CenterXProperty = System.Windows.DependencyProperty.RegisterCoreProperty(10300, System.Double);
	System.Windows.Media.SkewTransform.CenterYProperty = System.Windows.DependencyProperty.RegisterCoreProperty(10301, System.Double);
	System.Windows.Media.SkewTransform.AngleXProperty = System.Windows.DependencyProperty.RegisterCoreProperty(10302, System.Double);
	System.Windows.Media.SkewTransform.AngleYProperty = System.Windows.DependencyProperty.RegisterCoreProperty(10303, System.Double);
};

System.Windows.Media.TranslateTransform.prototype._ctor = function () {
	System.Windows.Media.Transform.prototype._ctor.call(this, 20);
};
System.Windows.Media.TranslateTransform.prototype.get_X = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.TranslateTransform.XProperty), System.Double);
};
System.Windows.Media.TranslateTransform.prototype.set_X = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.TranslateTransform.XProperty, value);
};
System.Windows.Media.TranslateTransform.prototype.get_Y = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.TranslateTransform.YProperty), System.Double);
};
System.Windows.Media.TranslateTransform.prototype.set_Y = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.TranslateTransform.YProperty, value);
};
JSIL.MakeProperty(System.Windows.Media.TranslateTransform.prototype, "X", 
	System.Windows.Media.TranslateTransform.prototype.get_X, System.Windows.Media.TranslateTransform.prototype.set_X);
JSIL.MakeProperty(System.Windows.Media.TranslateTransform.prototype, "Y", 
	System.Windows.Media.TranslateTransform.prototype.get_Y, System.Windows.Media.TranslateTransform.prototype.set_Y);
System.Windows.Media.TranslateTransform.XProperty = null;
System.Windows.Media.TranslateTransform.YProperty = null;
System.Windows.Media.TranslateTransform._cctor = function () {
	System.Windows.Media.TranslateTransform.XProperty = System.Windows.DependencyProperty.RegisterCoreProperty(10400, System.Double);
	System.Windows.Media.TranslateTransform.YProperty = System.Windows.DependencyProperty.RegisterCoreProperty(10401, System.Double);
};

System.Windows.Media.TransformCollection.prototype._ctor = function () {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.Transform).prototype._ctor$1.call(this, 59);
};
System.Windows.Media.TransformCollection.prototype.AddInternal = function (value) {
	this.AddDependencyObject(value);
};
System.Windows.Media.TransformCollection.prototype.ContainsInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.Transform).prototype.ContainsDependencyObject.call(this, value);
};
System.Windows.Media.TransformCollection.prototype.IndexOfInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.Transform).prototype.IndexOfDependencyObject.call(this, value);
};
System.Windows.Media.TransformCollection.prototype.InsertInternal = function (index, value) {
	this.InsertDependencyObject(index, value);
};
System.Windows.Media.TransformCollection.prototype.RemoveInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.Transform).prototype.RemoveDependencyObject.call(this, value);
};
System.Windows.Media.TransformCollection.prototype.GetItemImplSkipMethodPack = function (index) {
	return JSIL.TryCast(System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.Transform).prototype.GetItemDependencyObject.call(this, index), System.Windows.Media.Transform);
};
System.Windows.Media.TransformCollection.prototype.SetItemImplSkipMethodPack = function (index, value) {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.Transform).prototype.SetItemDependencyObject.call(this, index, value);
};

System.Windows.Media.TransformGroup.prototype._ctor = function () {
	System.Windows.Media.Transform.prototype._ctor.call(this, 16);
};
System.Windows.Media.TransformGroup.prototype.get_Children = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.TransformGroup.ChildrenProperty), System.Windows.Media.TransformCollection);
};
System.Windows.Media.TransformGroup.prototype.set_Children = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.TransformGroup.ChildrenProperty, value);
};
System.Windows.Media.TransformGroup.prototype.get_Value = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.TransformGroup.ValueProperty), System.Windows.Media.Matrix);
};
JSIL.MakeProperty(System.Windows.Media.TransformGroup.prototype, "Children", 
	System.Windows.Media.TransformGroup.prototype.get_Children, System.Windows.Media.TransformGroup.prototype.set_Children);
JSIL.MakeProperty(System.Windows.Media.TransformGroup.prototype, "Value", 
	System.Windows.Media.TransformGroup.prototype.get_Value, null);
System.Windows.Media.TransformGroup.ChildrenProperty = null;
System.Windows.Media.TransformGroup.ValueProperty = null;
System.Windows.Media.TransformGroup._cctor = function () {
	System.Windows.Media.TransformGroup.ChildrenProperty = System.Windows.DependencyProperty.RegisterCoreProperty(10500, System.Windows.Media.TransformCollection);
	System.Windows.Media.TransformGroup.ValueProperty = System.Windows.DependencyProperty.RegisterCoreProperty(10501, System.Windows.Media.Matrix);
};

System.Windows.Media.MatrixTransform.prototype._ctor = function () {
	System.Windows.Media.Transform.prototype._ctor.call(this, 101);
};
System.Windows.Media.MatrixTransform.prototype.get_Matrix = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.MatrixTransform.MatrixProperty), System.Windows.Media.Matrix);
};
System.Windows.Media.MatrixTransform.prototype.set_Matrix = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.MatrixTransform.MatrixProperty, value);
};
JSIL.MakeProperty(System.Windows.Media.MatrixTransform.prototype, "Matrix", 
	System.Windows.Media.MatrixTransform.prototype.get_Matrix, System.Windows.Media.MatrixTransform.prototype.set_Matrix);
System.Windows.Media.MatrixTransform.MatrixProperty = null;
System.Windows.Media.MatrixTransform._cctor = function () {
	System.Windows.Media.MatrixTransform.MatrixProperty = System.Windows.DependencyProperty.RegisterCoreProperty(10600, System.Windows.Media.Matrix);
};

System.Windows.Media.CompositeTransform.prototype._ctor = function () {
	System.Windows.Media.Transform.prototype._ctor.call(this, 375);
};
System.Windows.Media.CompositeTransform.prototype.get_CenterX = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.CompositeTransform.CenterXProperty), System.Double);
};
System.Windows.Media.CompositeTransform.prototype.set_CenterX = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.CompositeTransform.CenterXProperty, value);
};
System.Windows.Media.CompositeTransform.prototype.get_CenterY = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.CompositeTransform.CenterYProperty), System.Double);
};
System.Windows.Media.CompositeTransform.prototype.set_CenterY = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.CompositeTransform.CenterYProperty, value);
};
System.Windows.Media.CompositeTransform.prototype.get_ScaleX = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.CompositeTransform.ScaleXProperty), System.Double);
};
System.Windows.Media.CompositeTransform.prototype.set_ScaleX = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.CompositeTransform.ScaleXProperty, value);
};
System.Windows.Media.CompositeTransform.prototype.get_ScaleY = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.CompositeTransform.ScaleYProperty), System.Double);
};
System.Windows.Media.CompositeTransform.prototype.set_ScaleY = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.CompositeTransform.ScaleYProperty, value);
};
System.Windows.Media.CompositeTransform.prototype.get_SkewX = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.CompositeTransform.SkewXProperty), System.Double);
};
System.Windows.Media.CompositeTransform.prototype.set_SkewX = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.CompositeTransform.SkewXProperty, value);
};
System.Windows.Media.CompositeTransform.prototype.get_SkewY = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.CompositeTransform.SkewYProperty), System.Double);
};
System.Windows.Media.CompositeTransform.prototype.set_SkewY = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.CompositeTransform.SkewYProperty, value);
};
System.Windows.Media.CompositeTransform.prototype.get_Rotation = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.CompositeTransform.RotationProperty), System.Double);
};
System.Windows.Media.CompositeTransform.prototype.set_Rotation = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.CompositeTransform.RotationProperty, value);
};
System.Windows.Media.CompositeTransform.prototype.get_TranslateX = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.CompositeTransform.TranslateXProperty), System.Double);
};
System.Windows.Media.CompositeTransform.prototype.set_TranslateX = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.CompositeTransform.TranslateXProperty, value);
};
System.Windows.Media.CompositeTransform.prototype.get_TranslateY = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.CompositeTransform.TranslateYProperty), System.Double);
};
System.Windows.Media.CompositeTransform.prototype.set_TranslateY = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.CompositeTransform.TranslateYProperty, value);
};
JSIL.MakeProperty(System.Windows.Media.CompositeTransform.prototype, "CenterX", 
	System.Windows.Media.CompositeTransform.prototype.get_CenterX, System.Windows.Media.CompositeTransform.prototype.set_CenterX);
JSIL.MakeProperty(System.Windows.Media.CompositeTransform.prototype, "CenterY", 
	System.Windows.Media.CompositeTransform.prototype.get_CenterY, System.Windows.Media.CompositeTransform.prototype.set_CenterY);
JSIL.MakeProperty(System.Windows.Media.CompositeTransform.prototype, "ScaleX", 
	System.Windows.Media.CompositeTransform.prototype.get_ScaleX, System.Windows.Media.CompositeTransform.prototype.set_ScaleX);
JSIL.MakeProperty(System.Windows.Media.CompositeTransform.prototype, "ScaleY", 
	System.Windows.Media.CompositeTransform.prototype.get_ScaleY, System.Windows.Media.CompositeTransform.prototype.set_ScaleY);
JSIL.MakeProperty(System.Windows.Media.CompositeTransform.prototype, "SkewX", 
	System.Windows.Media.CompositeTransform.prototype.get_SkewX, System.Windows.Media.CompositeTransform.prototype.set_SkewX);
JSIL.MakeProperty(System.Windows.Media.CompositeTransform.prototype, "SkewY", 
	System.Windows.Media.CompositeTransform.prototype.get_SkewY, System.Windows.Media.CompositeTransform.prototype.set_SkewY);
JSIL.MakeProperty(System.Windows.Media.CompositeTransform.prototype, "Rotation", 
	System.Windows.Media.CompositeTransform.prototype.get_Rotation, System.Windows.Media.CompositeTransform.prototype.set_Rotation);
JSIL.MakeProperty(System.Windows.Media.CompositeTransform.prototype, "TranslateX", 
	System.Windows.Media.CompositeTransform.prototype.get_TranslateX, System.Windows.Media.CompositeTransform.prototype.set_TranslateX);
JSIL.MakeProperty(System.Windows.Media.CompositeTransform.prototype, "TranslateY", 
	System.Windows.Media.CompositeTransform.prototype.get_TranslateY, System.Windows.Media.CompositeTransform.prototype.set_TranslateY);
System.Windows.Media.CompositeTransform.CenterXProperty = null;
System.Windows.Media.CompositeTransform.CenterYProperty = null;
System.Windows.Media.CompositeTransform.ScaleXProperty = null;
System.Windows.Media.CompositeTransform.ScaleYProperty = null;
System.Windows.Media.CompositeTransform.SkewXProperty = null;
System.Windows.Media.CompositeTransform.SkewYProperty = null;
System.Windows.Media.CompositeTransform.RotationProperty = null;
System.Windows.Media.CompositeTransform.TranslateXProperty = null;
System.Windows.Media.CompositeTransform.TranslateYProperty = null;
System.Windows.Media.CompositeTransform._cctor = function () {
	System.Windows.Media.CompositeTransform.CenterXProperty = System.Windows.DependencyProperty.RegisterCoreProperty(10410, System.Double);
	System.Windows.Media.CompositeTransform.CenterYProperty = System.Windows.DependencyProperty.RegisterCoreProperty(10411, System.Double);
	System.Windows.Media.CompositeTransform.ScaleXProperty = System.Windows.DependencyProperty.RegisterCoreProperty(10412, System.Double);
	System.Windows.Media.CompositeTransform.ScaleYProperty = System.Windows.DependencyProperty.RegisterCoreProperty(10413, System.Double);
	System.Windows.Media.CompositeTransform.SkewXProperty = System.Windows.DependencyProperty.RegisterCoreProperty(10414, System.Double);
	System.Windows.Media.CompositeTransform.SkewYProperty = System.Windows.DependencyProperty.RegisterCoreProperty(10415, System.Double);
	System.Windows.Media.CompositeTransform.RotationProperty = System.Windows.DependencyProperty.RegisterCoreProperty(10416, System.Double);
	System.Windows.Media.CompositeTransform.TranslateXProperty = System.Windows.DependencyProperty.RegisterCoreProperty(10417, System.Double);
	System.Windows.Media.CompositeTransform.TranslateYProperty = System.Windows.DependencyProperty.RegisterCoreProperty(10418, System.Double);
};

System.Windows.Media.LineSegment.prototype._ctor = function () {
	System.Windows.Media.PathSegment.prototype._ctor.call(this, 22);
};
System.Windows.Media.LineSegment.prototype.get_Point = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.LineSegment.PointProperty), System.Windows.Point);
};
System.Windows.Media.LineSegment.prototype.set_Point = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.LineSegment.PointProperty, value);
};
JSIL.MakeProperty(System.Windows.Media.LineSegment.prototype, "Point", 
	System.Windows.Media.LineSegment.prototype.get_Point, System.Windows.Media.LineSegment.prototype.set_Point);
System.Windows.Media.LineSegment.PointProperty = null;
System.Windows.Media.LineSegment._cctor = function () {
	System.Windows.Media.LineSegment.PointProperty = System.Windows.DependencyProperty.RegisterCoreProperty(10800, System.Windows.Point);
};

System.Windows.Media.BezierSegment.prototype._ctor = function () {
	System.Windows.Media.PathSegment.prototype._ctor.call(this, 23);
};
System.Windows.Media.BezierSegment.prototype.get_Point1 = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.BezierSegment.Point1Property), System.Windows.Point);
};
System.Windows.Media.BezierSegment.prototype.set_Point1 = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.BezierSegment.Point1Property, value);
};
System.Windows.Media.BezierSegment.prototype.get_Point2 = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.BezierSegment.Point2Property), System.Windows.Point);
};
System.Windows.Media.BezierSegment.prototype.set_Point2 = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.BezierSegment.Point2Property, value);
};
System.Windows.Media.BezierSegment.prototype.get_Point3 = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.BezierSegment.Point3Property), System.Windows.Point);
};
System.Windows.Media.BezierSegment.prototype.set_Point3 = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.BezierSegment.Point3Property, value);
};
JSIL.MakeProperty(System.Windows.Media.BezierSegment.prototype, "Point1", 
	System.Windows.Media.BezierSegment.prototype.get_Point1, System.Windows.Media.BezierSegment.prototype.set_Point1);
JSIL.MakeProperty(System.Windows.Media.BezierSegment.prototype, "Point2", 
	System.Windows.Media.BezierSegment.prototype.get_Point2, System.Windows.Media.BezierSegment.prototype.set_Point2);
JSIL.MakeProperty(System.Windows.Media.BezierSegment.prototype, "Point3", 
	System.Windows.Media.BezierSegment.prototype.get_Point3, System.Windows.Media.BezierSegment.prototype.set_Point3);
System.Windows.Media.BezierSegment.Point1Property = null;
System.Windows.Media.BezierSegment.Point2Property = null;
System.Windows.Media.BezierSegment.Point3Property = null;
System.Windows.Media.BezierSegment._cctor = function () {
	System.Windows.Media.BezierSegment.Point1Property = System.Windows.DependencyProperty.RegisterCoreProperty(10900, System.Windows.Point);
	System.Windows.Media.BezierSegment.Point2Property = System.Windows.DependencyProperty.RegisterCoreProperty(10901, System.Windows.Point);
	System.Windows.Media.BezierSegment.Point3Property = System.Windows.DependencyProperty.RegisterCoreProperty(10902, System.Windows.Point);
};

System.Windows.Media.QuadraticBezierSegment.prototype._ctor = function () {
	System.Windows.Media.PathSegment.prototype._ctor.call(this, 24);
};
System.Windows.Media.QuadraticBezierSegment.prototype.get_Point1 = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.QuadraticBezierSegment.Point1Property), System.Windows.Point);
};
System.Windows.Media.QuadraticBezierSegment.prototype.set_Point1 = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.QuadraticBezierSegment.Point1Property, value);
};
System.Windows.Media.QuadraticBezierSegment.prototype.get_Point2 = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.QuadraticBezierSegment.Point2Property), System.Windows.Point);
};
System.Windows.Media.QuadraticBezierSegment.prototype.set_Point2 = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.QuadraticBezierSegment.Point2Property, value);
};
JSIL.MakeProperty(System.Windows.Media.QuadraticBezierSegment.prototype, "Point1", 
	System.Windows.Media.QuadraticBezierSegment.prototype.get_Point1, System.Windows.Media.QuadraticBezierSegment.prototype.set_Point1);
JSIL.MakeProperty(System.Windows.Media.QuadraticBezierSegment.prototype, "Point2", 
	System.Windows.Media.QuadraticBezierSegment.prototype.get_Point2, System.Windows.Media.QuadraticBezierSegment.prototype.set_Point2);
System.Windows.Media.QuadraticBezierSegment.Point1Property = null;
System.Windows.Media.QuadraticBezierSegment.Point2Property = null;
System.Windows.Media.QuadraticBezierSegment._cctor = function () {
	System.Windows.Media.QuadraticBezierSegment.Point1Property = System.Windows.DependencyProperty.RegisterCoreProperty(11000, System.Windows.Point);
	System.Windows.Media.QuadraticBezierSegment.Point2Property = System.Windows.DependencyProperty.RegisterCoreProperty(11001, System.Windows.Point);
};

System.Windows.Media.ArcSegment.prototype._ctor = function () {
	System.Windows.Media.PathSegment.prototype._ctor.call(this, 25);
};
System.Windows.Media.ArcSegment.prototype.get_Point = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.ArcSegment.PointProperty), System.Windows.Point);
};
System.Windows.Media.ArcSegment.prototype.set_Point = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.ArcSegment.PointProperty, value);
};
System.Windows.Media.ArcSegment.prototype.get_RotationAngle = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.ArcSegment.RotationAngleProperty), System.Double);
};
System.Windows.Media.ArcSegment.prototype.set_RotationAngle = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.ArcSegment.RotationAngleProperty, value);
};
System.Windows.Media.ArcSegment.prototype.get_IsLargeArc = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.ArcSegment.IsLargeArcProperty), System.Boolean);
};
System.Windows.Media.ArcSegment.prototype.set_IsLargeArc = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.ArcSegment.IsLargeArcProperty, value);
};
System.Windows.Media.ArcSegment.prototype.get_SweepDirection = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.ArcSegment.SweepDirectionProperty), System.Windows.Media.SweepDirection);
};
System.Windows.Media.ArcSegment.prototype.set_SweepDirection = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.ArcSegment.SweepDirectionProperty, value);
};
System.Windows.Media.ArcSegment.prototype.get_Size = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.ArcSegment.SizeProperty), System.Windows.Size);
};
System.Windows.Media.ArcSegment.prototype.set_Size = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.ArcSegment.SizeProperty, value.MemberwiseClone());
};
JSIL.MakeProperty(System.Windows.Media.ArcSegment.prototype, "Point", 
	System.Windows.Media.ArcSegment.prototype.get_Point, System.Windows.Media.ArcSegment.prototype.set_Point);
JSIL.MakeProperty(System.Windows.Media.ArcSegment.prototype, "RotationAngle", 
	System.Windows.Media.ArcSegment.prototype.get_RotationAngle, System.Windows.Media.ArcSegment.prototype.set_RotationAngle);
JSIL.MakeProperty(System.Windows.Media.ArcSegment.prototype, "IsLargeArc", 
	System.Windows.Media.ArcSegment.prototype.get_IsLargeArc, System.Windows.Media.ArcSegment.prototype.set_IsLargeArc);
JSIL.MakeProperty(System.Windows.Media.ArcSegment.prototype, "SweepDirection", 
	System.Windows.Media.ArcSegment.prototype.get_SweepDirection, System.Windows.Media.ArcSegment.prototype.set_SweepDirection);
JSIL.MakeProperty(System.Windows.Media.ArcSegment.prototype, "Size", 
	System.Windows.Media.ArcSegment.prototype.get_Size, System.Windows.Media.ArcSegment.prototype.set_Size);
System.Windows.Media.ArcSegment.PointProperty = null;
System.Windows.Media.ArcSegment.SizeProperty = null;
System.Windows.Media.ArcSegment.RotationAngleProperty = null;
System.Windows.Media.ArcSegment.IsLargeArcProperty = null;
System.Windows.Media.ArcSegment.SweepDirectionProperty = null;
System.Windows.Media.ArcSegment._cctor = function () {
	System.Windows.Media.ArcSegment.PointProperty = System.Windows.DependencyProperty.RegisterCoreProperty(11100, System.Windows.Point);
	System.Windows.Media.ArcSegment.SizeProperty = System.Windows.DependencyProperty.RegisterCoreProperty(11101, System.Windows.Size);
	System.Windows.Media.ArcSegment.RotationAngleProperty = System.Windows.DependencyProperty.RegisterCoreProperty(11102, System.Double);
	System.Windows.Media.ArcSegment.IsLargeArcProperty = System.Windows.DependencyProperty.RegisterCoreProperty(11103, System.Boolean);
	System.Windows.Media.ArcSegment.SweepDirectionProperty = System.Windows.DependencyProperty.RegisterCoreProperty(11104, System.Windows.Media.SweepDirection);
};

System.Windows.Media.PolyLineSegment.prototype._ctor = function () {
	System.Windows.Media.PathSegment.prototype._ctor.call(this, 26);
};
System.Windows.Media.PolyLineSegment.prototype.get_Points = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.PolyLineSegment.PointsProperty), System.Windows.Media.PointCollection);
};
System.Windows.Media.PolyLineSegment.prototype.set_Points = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.PolyLineSegment.PointsProperty, value);
};
JSIL.MakeProperty(System.Windows.Media.PolyLineSegment.prototype, "Points", 
	System.Windows.Media.PolyLineSegment.prototype.get_Points, System.Windows.Media.PolyLineSegment.prototype.set_Points);
System.Windows.Media.PolyLineSegment.PointsProperty = null;
System.Windows.Media.PolyLineSegment._cctor = function () {
	System.Windows.Media.PolyLineSegment.PointsProperty = System.Windows.DependencyProperty.RegisterCoreProperty(11200, System.Windows.Media.PointCollection);
};

System.Windows.Media.PolyBezierSegment.prototype._ctor = function () {
	System.Windows.Media.PathSegment.prototype._ctor.call(this, 27);
};
System.Windows.Media.PolyBezierSegment.prototype.get_Points = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.PolyBezierSegment.PointsProperty), System.Windows.Media.PointCollection);
};
System.Windows.Media.PolyBezierSegment.prototype.set_Points = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.PolyBezierSegment.PointsProperty, value);
};
JSIL.MakeProperty(System.Windows.Media.PolyBezierSegment.prototype, "Points", 
	System.Windows.Media.PolyBezierSegment.prototype.get_Points, System.Windows.Media.PolyBezierSegment.prototype.set_Points);
System.Windows.Media.PolyBezierSegment.PointsProperty = null;
System.Windows.Media.PolyBezierSegment._cctor = function () {
	System.Windows.Media.PolyBezierSegment.PointsProperty = System.Windows.DependencyProperty.RegisterCoreProperty(11300, System.Windows.Media.PointCollection);
};

System.Windows.Media.PolyQuadraticBezierSegment.prototype._ctor = function () {
	System.Windows.Media.PathSegment.prototype._ctor.call(this, 28);
};
System.Windows.Media.PolyQuadraticBezierSegment.prototype.get_Points = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.PolyQuadraticBezierSegment.PointsProperty), System.Windows.Media.PointCollection);
};
System.Windows.Media.PolyQuadraticBezierSegment.prototype.set_Points = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.PolyQuadraticBezierSegment.PointsProperty, value);
};
JSIL.MakeProperty(System.Windows.Media.PolyQuadraticBezierSegment.prototype, "Points", 
	System.Windows.Media.PolyQuadraticBezierSegment.prototype.get_Points, System.Windows.Media.PolyQuadraticBezierSegment.prototype.set_Points);
System.Windows.Media.PolyQuadraticBezierSegment.PointsProperty = null;
System.Windows.Media.PolyQuadraticBezierSegment._cctor = function () {
	System.Windows.Media.PolyQuadraticBezierSegment.PointsProperty = System.Windows.DependencyProperty.RegisterCoreProperty(11400, System.Windows.Media.PointCollection);
};

System.Windows.Media.PathSegmentCollection.prototype._ctor = function () {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.PathSegment).prototype._ctor$1.call(this, 60);
};
System.Windows.Media.PathSegmentCollection.prototype.AddInternal = function (value) {
	this.AddDependencyObject(value);
};
System.Windows.Media.PathSegmentCollection.prototype.ContainsInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.PathSegment).prototype.ContainsDependencyObject.call(this, value);
};
System.Windows.Media.PathSegmentCollection.prototype.IndexOfInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.PathSegment).prototype.IndexOfDependencyObject.call(this, value);
};
System.Windows.Media.PathSegmentCollection.prototype.InsertInternal = function (index, value) {
	this.InsertDependencyObject(index, value);
};
System.Windows.Media.PathSegmentCollection.prototype.RemoveInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.PathSegment).prototype.RemoveDependencyObject.call(this, value);
};
System.Windows.Media.PathSegmentCollection.prototype.GetItemImplSkipMethodPack = function (index) {
	return JSIL.TryCast(System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.PathSegment).prototype.GetItemDependencyObject.call(this, index), System.Windows.Media.PathSegment);
};
System.Windows.Media.PathSegmentCollection.prototype.SetItemImplSkipMethodPack = function (index, value) {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.PathSegment).prototype.SetItemDependencyObject.call(this, index, value);
};

System.Windows.Media.PathFigure.prototype._ctor = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 29);
};
System.Windows.Media.PathFigure.prototype.get_Segments = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.PathFigure.SegmentsProperty), System.Windows.Media.PathSegmentCollection);
};
System.Windows.Media.PathFigure.prototype.set_Segments = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.PathFigure.SegmentsProperty, value);
};
System.Windows.Media.PathFigure.prototype.get_StartPoint = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.PathFigure.StartPointProperty), System.Windows.Point);
};
System.Windows.Media.PathFigure.prototype.set_StartPoint = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.PathFigure.StartPointProperty, value);
};
System.Windows.Media.PathFigure.prototype.get_IsClosed = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.PathFigure.IsClosedProperty), System.Boolean);
};
System.Windows.Media.PathFigure.prototype.set_IsClosed = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.PathFigure.IsClosedProperty, value);
};
System.Windows.Media.PathFigure.prototype.get_IsFilled = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.PathFigure.IsFilledProperty), System.Boolean);
};
System.Windows.Media.PathFigure.prototype.set_IsFilled = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.PathFigure.IsFilledProperty, value);
};
JSIL.MakeProperty(System.Windows.Media.PathFigure.prototype, "Segments", 
	System.Windows.Media.PathFigure.prototype.get_Segments, System.Windows.Media.PathFigure.prototype.set_Segments);
JSIL.MakeProperty(System.Windows.Media.PathFigure.prototype, "StartPoint", 
	System.Windows.Media.PathFigure.prototype.get_StartPoint, System.Windows.Media.PathFigure.prototype.set_StartPoint);
JSIL.MakeProperty(System.Windows.Media.PathFigure.prototype, "IsClosed", 
	System.Windows.Media.PathFigure.prototype.get_IsClosed, System.Windows.Media.PathFigure.prototype.set_IsClosed);
JSIL.MakeProperty(System.Windows.Media.PathFigure.prototype, "IsFilled", 
	System.Windows.Media.PathFigure.prototype.get_IsFilled, System.Windows.Media.PathFigure.prototype.set_IsFilled);
System.Windows.Media.PathFigure.SegmentsProperty = null;
System.Windows.Media.PathFigure.StartPointProperty = null;
System.Windows.Media.PathFigure.IsClosedProperty = null;
System.Windows.Media.PathFigure.IsFilledProperty = null;
System.Windows.Media.PathFigure._cctor = function () {
	System.Windows.Media.PathFigure.SegmentsProperty = System.Windows.DependencyProperty.RegisterCoreProperty(11500, System.Windows.Media.PathSegmentCollection);
	System.Windows.Media.PathFigure.StartPointProperty = System.Windows.DependencyProperty.RegisterCoreProperty(11501, System.Windows.Point);
	System.Windows.Media.PathFigure.IsClosedProperty = System.Windows.DependencyProperty.RegisterCoreProperty(11502, System.Boolean);
	System.Windows.Media.PathFigure.IsFilledProperty = System.Windows.DependencyProperty.RegisterCoreProperty(11503, System.Boolean);
};

System.Windows.Media.PathFigureCollection.prototype._ctor = function () {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.PathFigure).prototype._ctor$1.call(this, 61);
};
System.Windows.Media.PathFigureCollection.prototype.AddInternal = function (value) {
	this.AddDependencyObject(value);
};
System.Windows.Media.PathFigureCollection.prototype.ContainsInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.PathFigure).prototype.ContainsDependencyObject.call(this, value);
};
System.Windows.Media.PathFigureCollection.prototype.IndexOfInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.PathFigure).prototype.IndexOfDependencyObject.call(this, value);
};
System.Windows.Media.PathFigureCollection.prototype.InsertInternal = function (index, value) {
	this.InsertDependencyObject(index, value);
};
System.Windows.Media.PathFigureCollection.prototype.RemoveInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.PathFigure).prototype.RemoveDependencyObject.call(this, value);
};
System.Windows.Media.PathFigureCollection.prototype.GetItemImplSkipMethodPack = function (index) {
	return JSIL.TryCast(System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.PathFigure).prototype.GetItemDependencyObject.call(this, index), System.Windows.Media.PathFigure);
};
System.Windows.Media.PathFigureCollection.prototype.SetItemImplSkipMethodPack = function (index, value) {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.PathFigure).prototype.SetItemDependencyObject.call(this, index, value);
};

System.Windows.Media.PathGeometry.prototype._ctor = function () {
	System.Windows.Media.Geometry.prototype._ctor.call(this, 31);
};
System.Windows.Media.PathGeometry.prototype.get_FillRule = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.PathGeometry.FillRuleProperty), System.Windows.Media.FillRule);
};
System.Windows.Media.PathGeometry.prototype.set_FillRule = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.PathGeometry.FillRuleProperty, value);
};
System.Windows.Media.PathGeometry.prototype.get_Figures = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.PathGeometry.FiguresProperty), System.Windows.Media.PathFigureCollection);
};
System.Windows.Media.PathGeometry.prototype.set_Figures = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.PathGeometry.FiguresProperty, value);
};
System.Windows.Media.PathGeometry.prototype.toString = function () {
	if (!$asm02.MS.Internal.QuirksMode.ShouldPathGeometryOverrideToString()) {
		return System.Object.prototype.toString.call(this);
	}
	return $asm02.MS.Internal.XcpImports.PathGeometry_ToString(this);
};
JSIL.MakeProperty(System.Windows.Media.PathGeometry.prototype, "FillRule", 
	System.Windows.Media.PathGeometry.prototype.get_FillRule, System.Windows.Media.PathGeometry.prototype.set_FillRule);
JSIL.MakeProperty(System.Windows.Media.PathGeometry.prototype, "Figures", 
	System.Windows.Media.PathGeometry.prototype.get_Figures, System.Windows.Media.PathGeometry.prototype.set_Figures);
System.Windows.Media.PathGeometry.FillRuleProperty = null;
System.Windows.Media.PathGeometry.FiguresProperty = null;
System.Windows.Media.PathGeometry._cctor = function () {
	System.Windows.Media.PathGeometry.FillRuleProperty = System.Windows.DependencyProperty.RegisterCoreProperty(11701, System.Windows.Media.FillRule);
	System.Windows.Media.PathGeometry.FiguresProperty = System.Windows.DependencyProperty.RegisterCoreProperty(11700, System.Windows.Media.PathFigureCollection);
};

System.Windows.Media.EllipseGeometry.prototype._ctor = function () {
	System.Windows.Media.Geometry.prototype._ctor.call(this, 96);
};
System.Windows.Media.EllipseGeometry.prototype.get_Center = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.EllipseGeometry.CenterProperty), System.Windows.Point);
};
System.Windows.Media.EllipseGeometry.prototype.set_Center = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.EllipseGeometry.CenterProperty, value);
};
System.Windows.Media.EllipseGeometry.prototype.get_RadiusX = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.EllipseGeometry.RadiusXProperty), System.Double);
};
System.Windows.Media.EllipseGeometry.prototype.set_RadiusX = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.EllipseGeometry.RadiusXProperty, value);
};
System.Windows.Media.EllipseGeometry.prototype.get_RadiusY = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.EllipseGeometry.RadiusYProperty), System.Double);
};
System.Windows.Media.EllipseGeometry.prototype.set_RadiusY = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.EllipseGeometry.RadiusYProperty, value);
};
JSIL.MakeProperty(System.Windows.Media.EllipseGeometry.prototype, "Center", 
	System.Windows.Media.EllipseGeometry.prototype.get_Center, System.Windows.Media.EllipseGeometry.prototype.set_Center);
JSIL.MakeProperty(System.Windows.Media.EllipseGeometry.prototype, "RadiusX", 
	System.Windows.Media.EllipseGeometry.prototype.get_RadiusX, System.Windows.Media.EllipseGeometry.prototype.set_RadiusX);
JSIL.MakeProperty(System.Windows.Media.EllipseGeometry.prototype, "RadiusY", 
	System.Windows.Media.EllipseGeometry.prototype.get_RadiusY, System.Windows.Media.EllipseGeometry.prototype.set_RadiusY);
System.Windows.Media.EllipseGeometry.CenterProperty = null;
System.Windows.Media.EllipseGeometry.RadiusXProperty = null;
System.Windows.Media.EllipseGeometry.RadiusYProperty = null;
System.Windows.Media.EllipseGeometry._cctor = function () {
	System.Windows.Media.EllipseGeometry.CenterProperty = System.Windows.DependencyProperty.RegisterCoreProperty(11800, System.Windows.Point);
	System.Windows.Media.EllipseGeometry.RadiusXProperty = System.Windows.DependencyProperty.RegisterCoreProperty(11801, System.Double);
	System.Windows.Media.EllipseGeometry.RadiusYProperty = System.Windows.DependencyProperty.RegisterCoreProperty(11802, System.Double);
};

System.Windows.Media.RectangleGeometry.prototype._ctor = function () {
	System.Windows.Media.Geometry.prototype._ctor.call(this, 97);
};
System.Windows.Media.RectangleGeometry.prototype.get_Rect = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.RectangleGeometry.RectProperty), System.Windows.Rect);
};
System.Windows.Media.RectangleGeometry.prototype.set_Rect = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.RectangleGeometry.RectProperty, value.MemberwiseClone());
};
System.Windows.Media.RectangleGeometry.prototype.get_RadiusX = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.RectangleGeometry.RadiusXProperty), System.Double);
};
System.Windows.Media.RectangleGeometry.prototype.set_RadiusX = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.RectangleGeometry.RadiusXProperty, value);
};
System.Windows.Media.RectangleGeometry.prototype.get_RadiusY = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.RectangleGeometry.RadiusYProperty), System.Double);
};
System.Windows.Media.RectangleGeometry.prototype.set_RadiusY = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.RectangleGeometry.RadiusYProperty, value);
};
JSIL.MakeProperty(System.Windows.Media.RectangleGeometry.prototype, "Rect", 
	System.Windows.Media.RectangleGeometry.prototype.get_Rect, System.Windows.Media.RectangleGeometry.prototype.set_Rect);
JSIL.MakeProperty(System.Windows.Media.RectangleGeometry.prototype, "RadiusX", 
	System.Windows.Media.RectangleGeometry.prototype.get_RadiusX, System.Windows.Media.RectangleGeometry.prototype.set_RadiusX);
JSIL.MakeProperty(System.Windows.Media.RectangleGeometry.prototype, "RadiusY", 
	System.Windows.Media.RectangleGeometry.prototype.get_RadiusY, System.Windows.Media.RectangleGeometry.prototype.set_RadiusY);
System.Windows.Media.RectangleGeometry.RectProperty = null;
System.Windows.Media.RectangleGeometry.RadiusXProperty = null;
System.Windows.Media.RectangleGeometry.RadiusYProperty = null;
System.Windows.Media.RectangleGeometry._cctor = function () {
	System.Windows.Media.RectangleGeometry.RectProperty = System.Windows.DependencyProperty.RegisterCoreProperty(11900, System.Windows.Rect);
	System.Windows.Media.RectangleGeometry.RadiusXProperty = System.Windows.DependencyProperty.RegisterCoreProperty(11901, System.Double);
	System.Windows.Media.RectangleGeometry.RadiusYProperty = System.Windows.DependencyProperty.RegisterCoreProperty(11902, System.Double);
};

System.Windows.Media.LineGeometry.prototype._ctor = function () {
	System.Windows.Media.Geometry.prototype._ctor.call(this, 98);
};
System.Windows.Media.LineGeometry.prototype.get_StartPoint = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.LineGeometry.StartPointProperty), System.Windows.Point);
};
System.Windows.Media.LineGeometry.prototype.set_StartPoint = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.LineGeometry.StartPointProperty, value);
};
System.Windows.Media.LineGeometry.prototype.get_EndPoint = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.LineGeometry.EndPointProperty), System.Windows.Point);
};
System.Windows.Media.LineGeometry.prototype.set_EndPoint = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.LineGeometry.EndPointProperty, value);
};
JSIL.MakeProperty(System.Windows.Media.LineGeometry.prototype, "StartPoint", 
	System.Windows.Media.LineGeometry.prototype.get_StartPoint, System.Windows.Media.LineGeometry.prototype.set_StartPoint);
JSIL.MakeProperty(System.Windows.Media.LineGeometry.prototype, "EndPoint", 
	System.Windows.Media.LineGeometry.prototype.get_EndPoint, System.Windows.Media.LineGeometry.prototype.set_EndPoint);
System.Windows.Media.LineGeometry.StartPointProperty = null;
System.Windows.Media.LineGeometry.EndPointProperty = null;
System.Windows.Media.LineGeometry._cctor = function () {
	System.Windows.Media.LineGeometry.StartPointProperty = System.Windows.DependencyProperty.RegisterCoreProperty(12000, System.Windows.Point);
	System.Windows.Media.LineGeometry.EndPointProperty = System.Windows.DependencyProperty.RegisterCoreProperty(12001, System.Windows.Point);
};

System.Windows.Media.GeometryCollection.prototype._ctor = function () {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.Geometry).prototype._ctor$1.call(this, 62);
};
System.Windows.Media.GeometryCollection.prototype.AddInternal = function (value) {
	this.AddDependencyObject(value);
};
System.Windows.Media.GeometryCollection.prototype.ContainsInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.Geometry).prototype.ContainsDependencyObject.call(this, value);
};
System.Windows.Media.GeometryCollection.prototype.IndexOfInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.Geometry).prototype.IndexOfDependencyObject.call(this, value);
};
System.Windows.Media.GeometryCollection.prototype.InsertInternal = function (index, value) {
	this.InsertDependencyObject(index, value);
};
System.Windows.Media.GeometryCollection.prototype.RemoveInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.Geometry).prototype.RemoveDependencyObject.call(this, value);
};
System.Windows.Media.GeometryCollection.prototype.GetItemImplSkipMethodPack = function (index) {
	return JSIL.TryCast(System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.Geometry).prototype.GetItemDependencyObject.call(this, index), System.Windows.Media.Geometry);
};
System.Windows.Media.GeometryCollection.prototype.SetItemImplSkipMethodPack = function (index, value) {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.Geometry).prototype.SetItemDependencyObject.call(this, index, value);
};

System.Windows.Media.GeometryGroup.prototype._ctor = function () {
	System.Windows.Media.Geometry.prototype._ctor.call(this, 32);
};
System.Windows.Media.GeometryGroup.prototype.get_FillRule = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.GeometryGroup.FillRuleProperty), System.Windows.Media.FillRule);
};
System.Windows.Media.GeometryGroup.prototype.set_FillRule = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.GeometryGroup.FillRuleProperty, value);
};
System.Windows.Media.GeometryGroup.prototype.get_Children = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.GeometryGroup.ChildrenProperty), System.Windows.Media.GeometryCollection);
};
System.Windows.Media.GeometryGroup.prototype.set_Children = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.GeometryGroup.ChildrenProperty, value);
};
JSIL.MakeProperty(System.Windows.Media.GeometryGroup.prototype, "FillRule", 
	System.Windows.Media.GeometryGroup.prototype.get_FillRule, System.Windows.Media.GeometryGroup.prototype.set_FillRule);
JSIL.MakeProperty(System.Windows.Media.GeometryGroup.prototype, "Children", 
	System.Windows.Media.GeometryGroup.prototype.get_Children, System.Windows.Media.GeometryGroup.prototype.set_Children);
System.Windows.Media.GeometryGroup.FillRuleProperty = null;
System.Windows.Media.GeometryGroup.ChildrenProperty = null;
System.Windows.Media.GeometryGroup._cctor = function () {
	System.Windows.Media.GeometryGroup.FillRuleProperty = System.Windows.DependencyProperty.RegisterCoreProperty(11702, System.Windows.Media.FillRule);
	System.Windows.Media.GeometryGroup.ChildrenProperty = System.Windows.DependencyProperty.RegisterCoreProperty(12100, System.Windows.Media.GeometryCollection);
};

System.Windows.Media.SolidColorBrush.prototype._ctor$0 = function () {
	System.Windows.Media.Brush.prototype._ctor$1.call(this, 34);
};
System.Windows.Media.SolidColorBrush.prototype.get_Color = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.SolidColorBrush.ColorProperty), System.Windows.Media.Color);
};
System.Windows.Media.SolidColorBrush.prototype.set_Color = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.SolidColorBrush.ColorProperty, value);
};
System.Windows.Media.SolidColorBrush.prototype._ctor$1 = function (color) {
	this._ctor$0();
	(this.Color = color);
};
JSIL.OverloadedMethod(System.Windows.Media.SolidColorBrush.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Windows.Media.Color]]
	]);
JSIL.MakeProperty(System.Windows.Media.SolidColorBrush.prototype, "Color", 
	System.Windows.Media.SolidColorBrush.prototype.get_Color, System.Windows.Media.SolidColorBrush.prototype.set_Color);
System.Windows.Media.SolidColorBrush.ColorProperty = null;
System.Windows.Media.SolidColorBrush._cctor = function () {
	System.Windows.Media.SolidColorBrush.ColorProperty = System.Windows.DependencyProperty.RegisterCoreProperty(12300, System.Windows.Media.Color);
};

System.Windows.Media.GradientStop.prototype._ctor = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 35);
};
System.Windows.Media.GradientStop.prototype.get_Color = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.GradientStop.ColorProperty), System.Windows.Media.Color);
};
System.Windows.Media.GradientStop.prototype.set_Color = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.GradientStop.ColorProperty, value);
};
System.Windows.Media.GradientStop.prototype.get_Offset = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.GradientStop.OffsetProperty), System.Double);
};
System.Windows.Media.GradientStop.prototype.set_Offset = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.GradientStop.OffsetProperty, value);
};
JSIL.MakeProperty(System.Windows.Media.GradientStop.prototype, "Color", 
	System.Windows.Media.GradientStop.prototype.get_Color, System.Windows.Media.GradientStop.prototype.set_Color);
JSIL.MakeProperty(System.Windows.Media.GradientStop.prototype, "Offset", 
	System.Windows.Media.GradientStop.prototype.get_Offset, System.Windows.Media.GradientStop.prototype.set_Offset);
System.Windows.Media.GradientStop.ColorProperty = null;
System.Windows.Media.GradientStop.OffsetProperty = null;
System.Windows.Media.GradientStop._cctor = function () {
	System.Windows.Media.GradientStop.ColorProperty = System.Windows.DependencyProperty.RegisterCoreProperty(12400, System.Windows.Media.Color);
	System.Windows.Media.GradientStop.OffsetProperty = System.Windows.DependencyProperty.RegisterCoreProperty(12401, System.Double);
};

System.Windows.Media.GradientStopCollection.prototype._ctor = function () {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.GradientStop).prototype._ctor$1.call(this, 63);
};
System.Windows.Media.GradientStopCollection.prototype.AddInternal = function (value) {
	this.AddDependencyObject(value);
};
System.Windows.Media.GradientStopCollection.prototype.ContainsInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.GradientStop).prototype.ContainsDependencyObject.call(this, value);
};
System.Windows.Media.GradientStopCollection.prototype.IndexOfInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.GradientStop).prototype.IndexOfDependencyObject.call(this, value);
};
System.Windows.Media.GradientStopCollection.prototype.InsertInternal = function (index, value) {
	this.InsertDependencyObject(index, value);
};
System.Windows.Media.GradientStopCollection.prototype.RemoveInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.GradientStop).prototype.RemoveDependencyObject.call(this, value);
};
System.Windows.Media.GradientStopCollection.prototype.GetItemImplSkipMethodPack = function (index) {
	return JSIL.TryCast(System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.GradientStop).prototype.GetItemDependencyObject.call(this, index), System.Windows.Media.GradientStop);
};
System.Windows.Media.GradientStopCollection.prototype.SetItemImplSkipMethodPack = function (index, value) {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.GradientStop).prototype.SetItemDependencyObject.call(this, index, value);
};

System.Windows.Media.GradientBrush.prototype._ctor$0 = function () {
	System.Windows.Media.Brush.prototype._ctor$1.call(this, 36);
};
System.Windows.Media.GradientBrush.prototype._ctor$1 = function (nKnownTypeIndex) {
	System.Windows.Media.Brush.prototype._ctor$1.call(this, nKnownTypeIndex);
};
System.Windows.Media.GradientBrush.prototype.get_SpreadMethod = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.GradientBrush.SpreadMethodProperty), System.Windows.Media.GradientSpreadMethod);
};
System.Windows.Media.GradientBrush.prototype.set_SpreadMethod = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.GradientBrush.SpreadMethodProperty, value);
};
System.Windows.Media.GradientBrush.prototype.get_MappingMode = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.GradientBrush.MappingModeProperty), System.Windows.Media.BrushMappingMode);
};
System.Windows.Media.GradientBrush.prototype.set_MappingMode = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.GradientBrush.MappingModeProperty, value);
};
System.Windows.Media.GradientBrush.prototype.get_ColorInterpolationMode = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.GradientBrush.ColorInterpolationModeProperty), System.Windows.Media.ColorInterpolationMode);
};
System.Windows.Media.GradientBrush.prototype.set_ColorInterpolationMode = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.GradientBrush.ColorInterpolationModeProperty, value);
};
System.Windows.Media.GradientBrush.prototype.get_GradientStops = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.GradientBrush.GradientStopsProperty), System.Windows.Media.GradientStopCollection);
};
System.Windows.Media.GradientBrush.prototype.set_GradientStops = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.GradientBrush.GradientStopsProperty, value);
};
JSIL.OverloadedMethod(System.Windows.Media.GradientBrush.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);
JSIL.MakeProperty(System.Windows.Media.GradientBrush.prototype, "SpreadMethod", 
	System.Windows.Media.GradientBrush.prototype.get_SpreadMethod, System.Windows.Media.GradientBrush.prototype.set_SpreadMethod);
JSIL.MakeProperty(System.Windows.Media.GradientBrush.prototype, "MappingMode", 
	System.Windows.Media.GradientBrush.prototype.get_MappingMode, System.Windows.Media.GradientBrush.prototype.set_MappingMode);
JSIL.MakeProperty(System.Windows.Media.GradientBrush.prototype, "ColorInterpolationMode", 
	System.Windows.Media.GradientBrush.prototype.get_ColorInterpolationMode, System.Windows.Media.GradientBrush.prototype.set_ColorInterpolationMode);
JSIL.MakeProperty(System.Windows.Media.GradientBrush.prototype, "GradientStops", 
	System.Windows.Media.GradientBrush.prototype.get_GradientStops, System.Windows.Media.GradientBrush.prototype.set_GradientStops);
System.Windows.Media.GradientBrush.SpreadMethodProperty = null;
System.Windows.Media.GradientBrush.MappingModeProperty = null;
System.Windows.Media.GradientBrush.ColorInterpolationModeProperty = null;
System.Windows.Media.GradientBrush.GradientStopsProperty = null;
System.Windows.Media.GradientBrush._cctor = function () {
	System.Windows.Media.GradientBrush.SpreadMethodProperty = System.Windows.DependencyProperty.RegisterCoreProperty(12500, System.Windows.Media.GradientSpreadMethod);
	System.Windows.Media.GradientBrush.MappingModeProperty = System.Windows.DependencyProperty.RegisterCoreProperty(12501, System.Windows.Media.BrushMappingMode);
	System.Windows.Media.GradientBrush.ColorInterpolationModeProperty = System.Windows.DependencyProperty.RegisterCoreProperty(12502, System.Windows.Media.ColorInterpolationMode);
	System.Windows.Media.GradientBrush.GradientStopsProperty = System.Windows.DependencyProperty.RegisterCoreProperty(12503, System.Windows.Media.GradientStopCollection);
};

System.Windows.Media.LinearGradientBrush.prototype._ctor$0 = function () {
	this._endPointFromAngleMultiplier = 0.017453292519943295;
	System.Windows.Media.GradientBrush.prototype._ctor$1.call(this, 37);
};
System.Windows.Media.LinearGradientBrush.prototype.get_StartPoint = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.LinearGradientBrush.StartPointProperty), System.Windows.Point);
};
System.Windows.Media.LinearGradientBrush.prototype.set_StartPoint = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.LinearGradientBrush.StartPointProperty, value);
};
System.Windows.Media.LinearGradientBrush.prototype.get_EndPoint = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.LinearGradientBrush.EndPointProperty), System.Windows.Point);
};
System.Windows.Media.LinearGradientBrush.prototype.set_EndPoint = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.LinearGradientBrush.EndPointProperty, value);
};
System.Windows.Media.LinearGradientBrush.prototype._ctor$1 = function (gradientStopCollection, angle) {
	this._ctor$0();
	System.Windows.Media.GradientBrush.prototype.set_GradientStops.call(this, gradientStopCollection);
	(this.EndPoint = this.EndPointFromAngle(angle).MemberwiseClone());
};
System.Windows.Media.LinearGradientBrush.prototype.EndPointFromAngle = function (angle) {
	angle *= this._endPointFromAngleMultiplier;
	return new System.Windows.Point(Math.cos(angle), Math.sin(angle));
};
JSIL.OverloadedMethod(System.Windows.Media.LinearGradientBrush.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Windows.Media.GradientStopCollection, System.Double]]
	]);
JSIL.MakeProperty(System.Windows.Media.LinearGradientBrush.prototype, "StartPoint", 
	System.Windows.Media.LinearGradientBrush.prototype.get_StartPoint, System.Windows.Media.LinearGradientBrush.prototype.set_StartPoint);
JSIL.MakeProperty(System.Windows.Media.LinearGradientBrush.prototype, "EndPoint", 
	System.Windows.Media.LinearGradientBrush.prototype.get_EndPoint, System.Windows.Media.LinearGradientBrush.prototype.set_EndPoint);
System.Windows.Media.LinearGradientBrush.StartPointProperty = null;
System.Windows.Media.LinearGradientBrush.EndPointProperty = null;
System.Windows.Media.LinearGradientBrush.prototype._endPointFromAngleMultiplier = 0;
System.Windows.Media.LinearGradientBrush._cctor = function () {
	System.Windows.Media.LinearGradientBrush.StartPointProperty = System.Windows.DependencyProperty.RegisterCoreProperty(12600, System.Windows.Point);
	System.Windows.Media.LinearGradientBrush.EndPointProperty = System.Windows.DependencyProperty.RegisterCoreProperty(12601, System.Windows.Point);
};

System.Windows.Media.RadialGradientBrush.prototype._ctor$0 = function () {
	System.Windows.Media.GradientBrush.prototype._ctor$1.call(this, 38);
};
System.Windows.Media.RadialGradientBrush.prototype.get_Center = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.RadialGradientBrush.CenterProperty), System.Windows.Point);
};
System.Windows.Media.RadialGradientBrush.prototype.set_Center = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.RadialGradientBrush.CenterProperty, value);
};
System.Windows.Media.RadialGradientBrush.prototype.get_GradientOrigin = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.RadialGradientBrush.GradientOriginProperty), System.Windows.Point);
};
System.Windows.Media.RadialGradientBrush.prototype.set_GradientOrigin = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.RadialGradientBrush.GradientOriginProperty, value);
};
System.Windows.Media.RadialGradientBrush.prototype.get_RadiusX = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.RadialGradientBrush.RadiusXProperty), System.Double);
};
System.Windows.Media.RadialGradientBrush.prototype.set_RadiusX = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.RadialGradientBrush.RadiusXProperty, value);
};
System.Windows.Media.RadialGradientBrush.prototype.get_RadiusY = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.RadialGradientBrush.RadiusYProperty), System.Double);
};
System.Windows.Media.RadialGradientBrush.prototype.set_RadiusY = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.RadialGradientBrush.RadiusYProperty, value);
};
System.Windows.Media.RadialGradientBrush.prototype._ctor$1 = function (gradientStopCollection) {
	this._ctor$0();
	System.Windows.Media.GradientBrush.prototype.set_GradientStops.call(this, gradientStopCollection);
};
System.Windows.Media.RadialGradientBrush.prototype._ctor$2 = function (startColor, endColor) {
	this._ctor$0();
	var gradientStop = new System.Windows.Media.GradientStop();
	(gradientStop.Color = startColor);
	gradientStop.Offset = 0;
	var gradientStop2 = new System.Windows.Media.GradientStop();
	(gradientStop2.Color = endColor);
	gradientStop2.Offset = 1;
	System.Windows.Media.GradientBrush.prototype.get_GradientStops.call(this).Add(gradientStop);
	System.Windows.Media.GradientBrush.prototype.get_GradientStops.call(this).Add(gradientStop2);
};
JSIL.OverloadedMethod(System.Windows.Media.RadialGradientBrush.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Windows.Media.GradientStopCollection]], 
		["_ctor$2", [System.Windows.Media.Color, System.Windows.Media.Color]]
	]);
JSIL.MakeProperty(System.Windows.Media.RadialGradientBrush.prototype, "Center", 
	System.Windows.Media.RadialGradientBrush.prototype.get_Center, System.Windows.Media.RadialGradientBrush.prototype.set_Center);
JSIL.MakeProperty(System.Windows.Media.RadialGradientBrush.prototype, "GradientOrigin", 
	System.Windows.Media.RadialGradientBrush.prototype.get_GradientOrigin, System.Windows.Media.RadialGradientBrush.prototype.set_GradientOrigin);
JSIL.MakeProperty(System.Windows.Media.RadialGradientBrush.prototype, "RadiusX", 
	System.Windows.Media.RadialGradientBrush.prototype.get_RadiusX, System.Windows.Media.RadialGradientBrush.prototype.set_RadiusX);
JSIL.MakeProperty(System.Windows.Media.RadialGradientBrush.prototype, "RadiusY", 
	System.Windows.Media.RadialGradientBrush.prototype.get_RadiusY, System.Windows.Media.RadialGradientBrush.prototype.set_RadiusY);
System.Windows.Media.RadialGradientBrush.CenterProperty = null;
System.Windows.Media.RadialGradientBrush.GradientOriginProperty = null;
System.Windows.Media.RadialGradientBrush.RadiusXProperty = null;
System.Windows.Media.RadialGradientBrush.RadiusYProperty = null;
System.Windows.Media.RadialGradientBrush._cctor = function () {
	System.Windows.Media.RadialGradientBrush.CenterProperty = System.Windows.DependencyProperty.RegisterCoreProperty(12700, System.Windows.Point);
	System.Windows.Media.RadialGradientBrush.GradientOriginProperty = System.Windows.DependencyProperty.RegisterCoreProperty(12701, System.Windows.Point);
	System.Windows.Media.RadialGradientBrush.RadiusXProperty = System.Windows.DependencyProperty.RegisterCoreProperty(12702, System.Double);
	System.Windows.Media.RadialGradientBrush.RadiusYProperty = System.Windows.DependencyProperty.RegisterCoreProperty(12703, System.Double);
};

System.Windows.Media.ImageBrush.prototype._ctor = function () {
	System.Windows.Media.TileBrush.prototype._ctor$1.call(this, 103);
};
System.Windows.Media.ImageBrush.prototype.get_ImageSource = function () {
	if (!$asm02.MS.Internal.QuirksMode.ShouldReturnImageBrushImageSourceAsBitmapImage()) {
		return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.ImageBrush.ImageSourceProperty), System.Windows.Media.ImageSource);
	}
	var bitmapImage = JSIL.TryCast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.ImageBrush.ImageSourceProperty), System.Windows.Media.Imaging.BitmapImage);
	if (bitmapImage === null) {
		return JSIL.New(System.Windows.Media.Imaging.BitmapImage, "_ctor$0", []);
	}
	return bitmapImage;
};
System.Windows.Media.ImageBrush.prototype.set_ImageSource = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.ImageBrush.ImageSourceProperty, value);
};
System.Windows.Media.ImageBrush.prototype.add_ImageFailed = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(24304, null), value);
};
System.Windows.Media.ImageBrush.prototype.remove_ImageFailed = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(24304, null), value);
};
System.Windows.Media.ImageBrush.prototype.add_ImageOpened = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(26015, null), value);
};
System.Windows.Media.ImageBrush.prototype.remove_ImageOpened = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(26015, null), value);
};
JSIL.MakeProperty(System.Windows.Media.ImageBrush.prototype, "ImageSource", 
	System.Windows.Media.ImageBrush.prototype.get_ImageSource, System.Windows.Media.ImageBrush.prototype.set_ImageSource);
System.Windows.Media.ImageBrush.ImageSourceProperty = null;
System.Windows.Media.ImageBrush._cctor = function () {
	System.Windows.Media.ImageBrush.ImageSourceProperty = System.Windows.DependencyProperty.RegisterCoreProperty(12900, System.Windows.Media.ImageSource);
};

System.Windows.Media.VideoBrush.prototype._ctor = function () {
	System.Windows.Media.TileBrush.prototype._ctor$1.call(this, 134);
};
System.Windows.Media.VideoBrush.prototype.get_SourceName = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.VideoBrush.SourceNameProperty), System.String);
};
System.Windows.Media.VideoBrush.prototype.set_SourceName = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.VideoBrush.SourceNameProperty, value);
};
System.Windows.Media.VideoBrush.prototype.SetSource$0 = function (source) {
	$asm02.MS.Internal.XcpImports.VideoBrush_SetMediaElementSource(this, source);
};
System.Windows.Media.VideoBrush.prototype.SetSource$1 = function (source) {
	$asm02.MS.Internal.XcpImports.VideoBrush_SetCaptureGraphSource(this, source);
};
JSIL.OverloadedMethod(System.Windows.Media.VideoBrush.prototype, "SetSource", [
		["SetSource$0", [System.Windows.Controls.MediaElement]], 
		["SetSource$1", [System.Windows.Media.CaptureSource]]
	]);
JSIL.MakeProperty(System.Windows.Media.VideoBrush.prototype, "SourceName", 
	System.Windows.Media.VideoBrush.prototype.get_SourceName, System.Windows.Media.VideoBrush.prototype.set_SourceName);
System.Windows.Media.VideoBrush.SourceNameProperty = null;
System.Windows.Media.VideoBrush._cctor = function () {
	System.Windows.Media.VideoBrush.SourceNameProperty = System.Windows.DependencyProperty.RegisterCoreProperty(18500, System.String);
};

System.Windows.Media.ImplicitInputBrush.prototype._ctor = function () {
	System.Windows.Media.Brush.prototype._ctor$1.call(this, 309);
};

System.Windows.Media.TimelineMarkerRoutedEventArgs.prototype._ctor = function () {
	System.Windows.RoutedEventArgs.prototype._ctor.call(this);
};
System.Windows.Media.TimelineMarkerRoutedEventArgs.prototype.CheckPtr = function () {
	if (this.m_objectPtr === null) {
		System.Windows.RoutedEventArgs.prototype.SetPtr.call(this, 0);
	}
};
System.Windows.Media.TimelineMarkerRoutedEventArgs.prototype.get_Marker = function () {
	this.CheckPtr();
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.Media.TimelineMarkerRoutedEventArgs.MarkerProperty), System.Windows.Media.TimelineMarker);
};
System.Windows.Media.TimelineMarkerRoutedEventArgs.prototype.set_Marker = function (value) {
	this.CheckPtr();
	$asm02.MS.Internal.XcpImports.SetValue(this, System.Windows.Media.TimelineMarkerRoutedEventArgs.MarkerProperty, value);
};
JSIL.MakeProperty(System.Windows.Media.TimelineMarkerRoutedEventArgs.prototype, "Marker", 
	System.Windows.Media.TimelineMarkerRoutedEventArgs.prototype.get_Marker, System.Windows.Media.TimelineMarkerRoutedEventArgs.prototype.set_Marker);
System.Windows.Media.TimelineMarkerRoutedEventArgs.MarkerProperty = null;
System.Windows.Media.TimelineMarkerRoutedEventArgs._cctor = function () {
	System.Windows.Media.TimelineMarkerRoutedEventArgs.MarkerProperty = System.Windows.DependencyProperty.RegisterCoreProperty(18605, System.Windows.Media.TimelineMarker);
};

System.Windows.Media.TimelineMarker.prototype._ctor = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 147);
};
System.Windows.Media.TimelineMarker.prototype.get_Time = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.TimelineMarker.TimeProperty), System.TimeSpan);
};
System.Windows.Media.TimelineMarker.prototype.set_Time = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.TimelineMarker.TimeProperty, value.MemberwiseClone());
};
System.Windows.Media.TimelineMarker.prototype.get_Type = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.TimelineMarker.TypeProperty), System.String);
};
System.Windows.Media.TimelineMarker.prototype.set_Type = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.TimelineMarker.TypeProperty, value);
};
System.Windows.Media.TimelineMarker.prototype.get_Text = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.TimelineMarker.TextProperty), System.String);
};
System.Windows.Media.TimelineMarker.prototype.set_Text = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.TimelineMarker.TextProperty, value);
};
JSIL.MakeProperty(System.Windows.Media.TimelineMarker.prototype, "Time", 
	System.Windows.Media.TimelineMarker.prototype.get_Time, System.Windows.Media.TimelineMarker.prototype.set_Time);
JSIL.MakeProperty(System.Windows.Media.TimelineMarker.prototype, "Type", 
	System.Windows.Media.TimelineMarker.prototype.get_Type, System.Windows.Media.TimelineMarker.prototype.set_Type);
JSIL.MakeProperty(System.Windows.Media.TimelineMarker.prototype, "Text", 
	System.Windows.Media.TimelineMarker.prototype.get_Text, System.Windows.Media.TimelineMarker.prototype.set_Text);
System.Windows.Media.TimelineMarker.TimeProperty = null;
System.Windows.Media.TimelineMarker.TypeProperty = null;
System.Windows.Media.TimelineMarker.TextProperty = null;
System.Windows.Media.TimelineMarker._cctor = function () {
	System.Windows.Media.TimelineMarker.TimeProperty = System.Windows.DependencyProperty.RegisterCoreProperty(18602, System.TimeSpan);
	System.Windows.Media.TimelineMarker.TypeProperty = System.Windows.DependencyProperty.RegisterCoreProperty(18603, System.String);
	System.Windows.Media.TimelineMarker.TextProperty = System.Windows.DependencyProperty.RegisterCoreProperty(18604, System.String);
};

System.Windows.Media.TimelineMarkerCollection.prototype._ctor = function () {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.TimelineMarker).prototype._ctor$1.call(this, 148);
};
System.Windows.Media.TimelineMarkerCollection.prototype.AddInternal = function (value) {
	this.AddDependencyObject(value);
};
System.Windows.Media.TimelineMarkerCollection.prototype.ContainsInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.TimelineMarker).prototype.ContainsDependencyObject.call(this, value);
};
System.Windows.Media.TimelineMarkerCollection.prototype.IndexOfInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.TimelineMarker).prototype.IndexOfDependencyObject.call(this, value);
};
System.Windows.Media.TimelineMarkerCollection.prototype.InsertInternal = function (index, value) {
	this.InsertDependencyObject(index, value);
};
System.Windows.Media.TimelineMarkerCollection.prototype.RemoveInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.TimelineMarker).prototype.RemoveDependencyObject.call(this, value);
};
System.Windows.Media.TimelineMarkerCollection.prototype.GetItemImplSkipMethodPack = function (index) {
	return JSIL.TryCast(System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.TimelineMarker).prototype.GetItemDependencyObject.call(this, index), System.Windows.Media.TimelineMarker);
};
System.Windows.Media.TimelineMarkerCollection.prototype.SetItemImplSkipMethodPack = function (index, value) {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.TimelineMarker).prototype.SetItemDependencyObject.call(this, index, value);
};

System.Windows.Media.LogReadyRoutedEventArgs.prototype._ctor = function () {
	System.Windows.RoutedEventArgs.prototype._ctor.call(this);
};
System.Windows.Media.LogReadyRoutedEventArgs.prototype.CheckPtr = function () {
	if (this.m_objectPtr === null) {
		System.Windows.RoutedEventArgs.prototype.SetPtr.call(this, 0);
	}
};
System.Windows.Media.LogReadyRoutedEventArgs.prototype.get_Log = function () {
	this.CheckPtr();
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.Media.LogReadyRoutedEventArgs.LogProperty), System.String);
};
System.Windows.Media.LogReadyRoutedEventArgs.prototype.get_LogSource = function () {
	this.CheckPtr();
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.Media.LogReadyRoutedEventArgs.LogSourceProperty), System.Windows.Media.LogSource);
};
JSIL.MakeProperty(System.Windows.Media.LogReadyRoutedEventArgs.prototype, "Log", 
	System.Windows.Media.LogReadyRoutedEventArgs.prototype.get_Log, null);
JSIL.MakeProperty(System.Windows.Media.LogReadyRoutedEventArgs.prototype, "LogSource", 
	System.Windows.Media.LogReadyRoutedEventArgs.prototype.get_LogSource, null);
System.Windows.Media.LogReadyRoutedEventArgs.LogProperty = null;
System.Windows.Media.LogReadyRoutedEventArgs.LogSourceProperty = null;
System.Windows.Media.LogReadyRoutedEventArgs._cctor = function () {
	System.Windows.Media.LogReadyRoutedEventArgs.LogProperty = System.Windows.DependencyProperty.RegisterCoreProperty(16917, System.String);
	System.Windows.Media.LogReadyRoutedEventArgs.LogSourceProperty = System.Windows.DependencyProperty.RegisterCoreProperty(16918, System.Windows.Media.LogSource);
};

System.Windows.Media.RenderingEventArgs.prototype._ctor = function () {
	System.EventArgs.prototype._ctor.call(this);
};
System.Windows.Media.RenderingEventArgs.prototype.SetPtr = function (ptr) {
	this.m_objectPtr = new $asm02.MS.Internal.NativeObjectSafeHandle();
	this.m_objectPtr.NativeObject = ptr;
};
System.Windows.Media.RenderingEventArgs.prototype.IManagedPeerBase_get_NativeObject = function () {
	this.CheckPtr();
	return this.m_objectPtr.NativeObject;
};
System.Windows.Media.RenderingEventArgs.prototype.CheckPtr = function () {
	if (this.m_objectPtr === null) {
		this.SetPtr(0);
	}
};
System.Windows.Media.RenderingEventArgs.prototype.get_RenderingTime = function () {
	this.CheckPtr();
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.Media.RenderingEventArgs.RenderingTimeProperty), System.TimeSpan);
};
JSIL.MakeProperty(System.Windows.Media.RenderingEventArgs.prototype, "IManagedPeerBase_NativeObject", 
	System.Windows.Media.RenderingEventArgs.prototype.IManagedPeerBase_get_NativeObject, null);
JSIL.MakeProperty(System.Windows.Media.RenderingEventArgs.prototype, "RenderingTime", 
	System.Windows.Media.RenderingEventArgs.prototype.get_RenderingTime, null);
System.Windows.Media.RenderingEventArgs.prototype.m_objectPtr = null;
System.Windows.Media.RenderingEventArgs.RenderingTimeProperty = null;
System.Windows.Media.RenderingEventArgs._cctor = function () {
	System.Windows.Media.RenderingEventArgs.RenderingTimeProperty = System.Windows.DependencyProperty.RegisterCoreProperty(20105, System.TimeSpan);
};

System.Windows.Media.Projection.prototype._ctor$0 = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 303);
};
System.Windows.Media.Projection.prototype._ctor$1 = function (nKnownTypeIndex) {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, nKnownTypeIndex);
};
JSIL.OverloadedMethod(System.Windows.Media.Projection.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);

System.Windows.Media.PlaneProjection.prototype._ctor = function () {
	System.Windows.Media.Projection.prototype._ctor$1.call(this, 304);
};
System.Windows.Media.PlaneProjection.prototype.get_LocalOffsetX = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.PlaneProjection.LocalOffsetXProperty), System.Double);
};
System.Windows.Media.PlaneProjection.prototype.set_LocalOffsetX = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.PlaneProjection.LocalOffsetXProperty, value);
};
System.Windows.Media.PlaneProjection.prototype.get_LocalOffsetY = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.PlaneProjection.LocalOffsetYProperty), System.Double);
};
System.Windows.Media.PlaneProjection.prototype.set_LocalOffsetY = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.PlaneProjection.LocalOffsetYProperty, value);
};
System.Windows.Media.PlaneProjection.prototype.get_LocalOffsetZ = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.PlaneProjection.LocalOffsetZProperty), System.Double);
};
System.Windows.Media.PlaneProjection.prototype.set_LocalOffsetZ = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.PlaneProjection.LocalOffsetZProperty, value);
};
System.Windows.Media.PlaneProjection.prototype.get_RotationX = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.PlaneProjection.RotationXProperty), System.Double);
};
System.Windows.Media.PlaneProjection.prototype.set_RotationX = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.PlaneProjection.RotationXProperty, value);
};
System.Windows.Media.PlaneProjection.prototype.get_RotationY = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.PlaneProjection.RotationYProperty), System.Double);
};
System.Windows.Media.PlaneProjection.prototype.set_RotationY = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.PlaneProjection.RotationYProperty, value);
};
System.Windows.Media.PlaneProjection.prototype.get_RotationZ = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.PlaneProjection.RotationZProperty), System.Double);
};
System.Windows.Media.PlaneProjection.prototype.set_RotationZ = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.PlaneProjection.RotationZProperty, value);
};
System.Windows.Media.PlaneProjection.prototype.get_CenterOfRotationX = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.PlaneProjection.CenterOfRotationXProperty), System.Double);
};
System.Windows.Media.PlaneProjection.prototype.set_CenterOfRotationX = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.PlaneProjection.CenterOfRotationXProperty, value);
};
System.Windows.Media.PlaneProjection.prototype.get_CenterOfRotationY = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.PlaneProjection.CenterOfRotationYProperty), System.Double);
};
System.Windows.Media.PlaneProjection.prototype.set_CenterOfRotationY = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.PlaneProjection.CenterOfRotationYProperty, value);
};
System.Windows.Media.PlaneProjection.prototype.get_CenterOfRotationZ = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.PlaneProjection.CenterOfRotationZProperty), System.Double);
};
System.Windows.Media.PlaneProjection.prototype.set_CenterOfRotationZ = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.PlaneProjection.CenterOfRotationZProperty, value);
};
System.Windows.Media.PlaneProjection.prototype.get_GlobalOffsetX = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.PlaneProjection.GlobalOffsetXProperty), System.Double);
};
System.Windows.Media.PlaneProjection.prototype.set_GlobalOffsetX = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.PlaneProjection.GlobalOffsetXProperty, value);
};
System.Windows.Media.PlaneProjection.prototype.get_GlobalOffsetY = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.PlaneProjection.GlobalOffsetYProperty), System.Double);
};
System.Windows.Media.PlaneProjection.prototype.set_GlobalOffsetY = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.PlaneProjection.GlobalOffsetYProperty, value);
};
System.Windows.Media.PlaneProjection.prototype.get_GlobalOffsetZ = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.PlaneProjection.GlobalOffsetZProperty), System.Double);
};
System.Windows.Media.PlaneProjection.prototype.set_GlobalOffsetZ = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.PlaneProjection.GlobalOffsetZProperty, value);
};
System.Windows.Media.PlaneProjection.prototype.get_ProjectionMatrix = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.PlaneProjection.ProjectionMatrixProperty), System.Windows.Media.Media3D.Matrix3D);
};
JSIL.MakeProperty(System.Windows.Media.PlaneProjection.prototype, "LocalOffsetX", 
	System.Windows.Media.PlaneProjection.prototype.get_LocalOffsetX, System.Windows.Media.PlaneProjection.prototype.set_LocalOffsetX);
JSIL.MakeProperty(System.Windows.Media.PlaneProjection.prototype, "LocalOffsetY", 
	System.Windows.Media.PlaneProjection.prototype.get_LocalOffsetY, System.Windows.Media.PlaneProjection.prototype.set_LocalOffsetY);
JSIL.MakeProperty(System.Windows.Media.PlaneProjection.prototype, "LocalOffsetZ", 
	System.Windows.Media.PlaneProjection.prototype.get_LocalOffsetZ, System.Windows.Media.PlaneProjection.prototype.set_LocalOffsetZ);
JSIL.MakeProperty(System.Windows.Media.PlaneProjection.prototype, "RotationX", 
	System.Windows.Media.PlaneProjection.prototype.get_RotationX, System.Windows.Media.PlaneProjection.prototype.set_RotationX);
JSIL.MakeProperty(System.Windows.Media.PlaneProjection.prototype, "RotationY", 
	System.Windows.Media.PlaneProjection.prototype.get_RotationY, System.Windows.Media.PlaneProjection.prototype.set_RotationY);
JSIL.MakeProperty(System.Windows.Media.PlaneProjection.prototype, "RotationZ", 
	System.Windows.Media.PlaneProjection.prototype.get_RotationZ, System.Windows.Media.PlaneProjection.prototype.set_RotationZ);
JSIL.MakeProperty(System.Windows.Media.PlaneProjection.prototype, "CenterOfRotationX", 
	System.Windows.Media.PlaneProjection.prototype.get_CenterOfRotationX, System.Windows.Media.PlaneProjection.prototype.set_CenterOfRotationX);
JSIL.MakeProperty(System.Windows.Media.PlaneProjection.prototype, "CenterOfRotationY", 
	System.Windows.Media.PlaneProjection.prototype.get_CenterOfRotationY, System.Windows.Media.PlaneProjection.prototype.set_CenterOfRotationY);
JSIL.MakeProperty(System.Windows.Media.PlaneProjection.prototype, "CenterOfRotationZ", 
	System.Windows.Media.PlaneProjection.prototype.get_CenterOfRotationZ, System.Windows.Media.PlaneProjection.prototype.set_CenterOfRotationZ);
JSIL.MakeProperty(System.Windows.Media.PlaneProjection.prototype, "GlobalOffsetX", 
	System.Windows.Media.PlaneProjection.prototype.get_GlobalOffsetX, System.Windows.Media.PlaneProjection.prototype.set_GlobalOffsetX);
JSIL.MakeProperty(System.Windows.Media.PlaneProjection.prototype, "GlobalOffsetY", 
	System.Windows.Media.PlaneProjection.prototype.get_GlobalOffsetY, System.Windows.Media.PlaneProjection.prototype.set_GlobalOffsetY);
JSIL.MakeProperty(System.Windows.Media.PlaneProjection.prototype, "GlobalOffsetZ", 
	System.Windows.Media.PlaneProjection.prototype.get_GlobalOffsetZ, System.Windows.Media.PlaneProjection.prototype.set_GlobalOffsetZ);
JSIL.MakeProperty(System.Windows.Media.PlaneProjection.prototype, "ProjectionMatrix", 
	System.Windows.Media.PlaneProjection.prototype.get_ProjectionMatrix, null);
System.Windows.Media.PlaneProjection.LocalOffsetXProperty = null;
System.Windows.Media.PlaneProjection.LocalOffsetYProperty = null;
System.Windows.Media.PlaneProjection.LocalOffsetZProperty = null;
System.Windows.Media.PlaneProjection.RotationXProperty = null;
System.Windows.Media.PlaneProjection.RotationYProperty = null;
System.Windows.Media.PlaneProjection.RotationZProperty = null;
System.Windows.Media.PlaneProjection.CenterOfRotationXProperty = null;
System.Windows.Media.PlaneProjection.CenterOfRotationYProperty = null;
System.Windows.Media.PlaneProjection.CenterOfRotationZProperty = null;
System.Windows.Media.PlaneProjection.GlobalOffsetXProperty = null;
System.Windows.Media.PlaneProjection.GlobalOffsetYProperty = null;
System.Windows.Media.PlaneProjection.GlobalOffsetZProperty = null;
System.Windows.Media.PlaneProjection.ProjectionMatrixProperty = null;
System.Windows.Media.PlaneProjection._cctor = function () {
	System.Windows.Media.PlaneProjection.LocalOffsetXProperty = System.Windows.DependencyProperty.RegisterCoreProperty(20406, System.Double);
	System.Windows.Media.PlaneProjection.LocalOffsetYProperty = System.Windows.DependencyProperty.RegisterCoreProperty(20407, System.Double);
	System.Windows.Media.PlaneProjection.LocalOffsetZProperty = System.Windows.DependencyProperty.RegisterCoreProperty(20408, System.Double);
	System.Windows.Media.PlaneProjection.RotationXProperty = System.Windows.DependencyProperty.RegisterCoreProperty(20412, System.Double);
	System.Windows.Media.PlaneProjection.RotationYProperty = System.Windows.DependencyProperty.RegisterCoreProperty(20401, System.Double);
	System.Windows.Media.PlaneProjection.RotationZProperty = System.Windows.DependencyProperty.RegisterCoreProperty(20402, System.Double);
	System.Windows.Media.PlaneProjection.CenterOfRotationXProperty = System.Windows.DependencyProperty.RegisterCoreProperty(20403, System.Double);
	System.Windows.Media.PlaneProjection.CenterOfRotationYProperty = System.Windows.DependencyProperty.RegisterCoreProperty(20404, System.Double);
	System.Windows.Media.PlaneProjection.CenterOfRotationZProperty = System.Windows.DependencyProperty.RegisterCoreProperty(20405, System.Double);
	System.Windows.Media.PlaneProjection.GlobalOffsetXProperty = System.Windows.DependencyProperty.RegisterCoreProperty(20409, System.Double);
	System.Windows.Media.PlaneProjection.GlobalOffsetYProperty = System.Windows.DependencyProperty.RegisterCoreProperty(20410, System.Double);
	System.Windows.Media.PlaneProjection.GlobalOffsetZProperty = System.Windows.DependencyProperty.RegisterCoreProperty(20411, System.Double);
	System.Windows.Media.PlaneProjection.ProjectionMatrixProperty = System.Windows.DependencyProperty.RegisterCoreProperty(20413, System.Windows.Media.Media3D.Matrix3D);
};

System.Windows.Media.Matrix3DProjection.prototype._ctor = function () {
	System.Windows.Media.Projection.prototype._ctor$1.call(this, 329);
};
System.Windows.Media.Matrix3DProjection.prototype.get_ProjectionMatrix = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Matrix3DProjection.ProjectionMatrixProperty), System.Windows.Media.Media3D.Matrix3D);
};
System.Windows.Media.Matrix3DProjection.prototype.set_ProjectionMatrix = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Matrix3DProjection.ProjectionMatrixProperty, value);
};
JSIL.MakeProperty(System.Windows.Media.Matrix3DProjection.prototype, "ProjectionMatrix", 
	System.Windows.Media.Matrix3DProjection.prototype.get_ProjectionMatrix, System.Windows.Media.Matrix3DProjection.prototype.set_ProjectionMatrix);
System.Windows.Media.Matrix3DProjection.ProjectionMatrixProperty = null;
System.Windows.Media.Matrix3DProjection._cctor = function () {
	System.Windows.Media.Matrix3DProjection.ProjectionMatrixProperty = System.Windows.DependencyProperty.RegisterCoreProperty(20601, System.Windows.Media.Media3D.Matrix3D);
};

System.Windows.Media.CacheMode.prototype._ctor$0 = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 273);
};
System.Windows.Media.CacheMode.prototype._ctor$1 = function (nKnownTypeIndex) {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, nKnownTypeIndex);
};
JSIL.OverloadedMethod(System.Windows.Media.CacheMode.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);

System.Windows.Media.BitmapCache.prototype._ctor = function () {
	System.Windows.Media.CacheMode.prototype._ctor$1.call(this, 274);
};
System.Windows.Media.BitmapCache.prototype.get_RenderAtScale = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.BitmapCache.RenderAtScaleProperty), System.Double);
};
System.Windows.Media.BitmapCache.prototype.set_RenderAtScale = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.BitmapCache.RenderAtScaleProperty, value);
};
JSIL.MakeProperty(System.Windows.Media.BitmapCache.prototype, "RenderAtScale", 
	System.Windows.Media.BitmapCache.prototype.get_RenderAtScale, System.Windows.Media.BitmapCache.prototype.set_RenderAtScale);
System.Windows.Media.BitmapCache.RenderAtScaleProperty = null;
System.Windows.Media.BitmapCache._cctor = function () {
	System.Windows.Media.BitmapCache.RenderAtScaleProperty = System.Windows.DependencyProperty.RegisterCoreProperty(26080, System.Double);
};

System.Windows.Media.VideoCaptureDeviceCollection.prototype._ctor = function () {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.VideoCaptureDevice).prototype._ctor$1.call(this, 356);
};
System.Windows.Media.VideoCaptureDeviceCollection.prototype.AddInternal = function (value) {
	this.AddDependencyObject(value);
};
System.Windows.Media.VideoCaptureDeviceCollection.prototype.ContainsInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.VideoCaptureDevice).prototype.ContainsDependencyObject.call(this, value);
};
System.Windows.Media.VideoCaptureDeviceCollection.prototype.IndexOfInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.VideoCaptureDevice).prototype.IndexOfDependencyObject.call(this, value);
};
System.Windows.Media.VideoCaptureDeviceCollection.prototype.InsertInternal = function (index, value) {
	this.InsertDependencyObject(index, value);
};
System.Windows.Media.VideoCaptureDeviceCollection.prototype.RemoveInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.VideoCaptureDevice).prototype.RemoveDependencyObject.call(this, value);
};
System.Windows.Media.VideoCaptureDeviceCollection.prototype.GetItemImplSkipMethodPack = function (index) {
	return JSIL.TryCast(System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.VideoCaptureDevice).prototype.GetItemDependencyObject.call(this, index), System.Windows.Media.VideoCaptureDevice);
};
System.Windows.Media.VideoCaptureDeviceCollection.prototype.SetItemImplSkipMethodPack = function (index, value) {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.VideoCaptureDevice).prototype.SetItemDependencyObject.call(this, index, value);
};

System.Windows.Media.AudioCaptureDeviceCollection.prototype._ctor = function () {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.AudioCaptureDevice).prototype._ctor$1.call(this, 357);
};
System.Windows.Media.AudioCaptureDeviceCollection.prototype.AddInternal = function (value) {
	this.AddDependencyObject(value);
};
System.Windows.Media.AudioCaptureDeviceCollection.prototype.ContainsInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.AudioCaptureDevice).prototype.ContainsDependencyObject.call(this, value);
};
System.Windows.Media.AudioCaptureDeviceCollection.prototype.IndexOfInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.AudioCaptureDevice).prototype.IndexOfDependencyObject.call(this, value);
};
System.Windows.Media.AudioCaptureDeviceCollection.prototype.InsertInternal = function (index, value) {
	this.InsertDependencyObject(index, value);
};
System.Windows.Media.AudioCaptureDeviceCollection.prototype.RemoveInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.AudioCaptureDevice).prototype.RemoveDependencyObject.call(this, value);
};
System.Windows.Media.AudioCaptureDeviceCollection.prototype.GetItemImplSkipMethodPack = function (index) {
	return JSIL.TryCast(System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.AudioCaptureDevice).prototype.GetItemDependencyObject.call(this, index), System.Windows.Media.AudioCaptureDevice);
};
System.Windows.Media.AudioCaptureDeviceCollection.prototype.SetItemImplSkipMethodPack = function (index, value) {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.AudioCaptureDevice).prototype.SetItemDependencyObject.call(this, index, value);
};

System.Windows.Media.CaptureDevice.prototype._ctor$0 = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 358);
};
System.Windows.Media.CaptureDevice.prototype._ctor$1 = function (nKnownTypeIndex) {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, nKnownTypeIndex);
};
System.Windows.Media.CaptureDevice.prototype.get_FriendlyName = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.CaptureDevice.FriendlyNameProperty), System.String);
};
System.Windows.Media.CaptureDevice.prototype.get_IsDefaultDevice = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.CaptureDevice.IsDefaultDeviceProperty), System.Boolean);
};
JSIL.OverloadedMethod(System.Windows.Media.CaptureDevice.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);
JSIL.MakeProperty(System.Windows.Media.CaptureDevice.prototype, "FriendlyName", 
	System.Windows.Media.CaptureDevice.prototype.get_FriendlyName, null);
JSIL.MakeProperty(System.Windows.Media.CaptureDevice.prototype, "IsDefaultDevice", 
	System.Windows.Media.CaptureDevice.prototype.get_IsDefaultDevice, null);
System.Windows.Media.CaptureDevice.FriendlyNameProperty = null;
System.Windows.Media.CaptureDevice.IsDefaultDeviceProperty = null;
System.Windows.Media.CaptureDevice._cctor = function () {
	System.Windows.Media.CaptureDevice.FriendlyNameProperty = System.Windows.DependencyProperty.RegisterCoreProperty(22230, System.String);
	System.Windows.Media.CaptureDevice.IsDefaultDeviceProperty = System.Windows.DependencyProperty.RegisterCoreProperty(22231, System.Boolean);
};

System.Windows.Media.VideoCaptureDevice.prototype._ctor = function () {
	System.Windows.Media.CaptureDevice.prototype._ctor$1.call(this, 359);
};
System.Windows.Media.VideoCaptureDevice.prototype.get_SupportedFormats = function () {
	if (this.m_SupportedFormats === null) {
		this.m_SupportedFormats = new (System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(System.Windows.Media.VideoFormat)) ($asm02.MS.Internal.XcpImports.VideoCaptureDevice_GetSupportedFormats(this));
	}
	return this.m_SupportedFormats;
};
System.Windows.Media.VideoCaptureDevice.prototype.get_DesiredFormat = function () {
	return $asm02.MS.Internal.XcpImports.VideoCaptureDevice_GetDesiredFormat(this);
};
System.Windows.Media.VideoCaptureDevice.prototype.set_DesiredFormat = function (value) {
	$asm02.MS.Internal.XcpImports.VideoCaptureDevice_SetDesiredFormat(this, value);
};
JSIL.MakeProperty(System.Windows.Media.VideoCaptureDevice.prototype, "SupportedFormats", 
	System.Windows.Media.VideoCaptureDevice.prototype.get_SupportedFormats, null);
JSIL.MakeProperty(System.Windows.Media.VideoCaptureDevice.prototype, "DesiredFormat", 
	System.Windows.Media.VideoCaptureDevice.prototype.get_DesiredFormat, System.Windows.Media.VideoCaptureDevice.prototype.set_DesiredFormat);
System.Windows.Media.VideoCaptureDevice.prototype.m_SupportedFormats = null;

System.Windows.Media.AudioCaptureDevice.prototype._ctor = function () {
	System.Windows.Media.CaptureDevice.prototype._ctor$1.call(this, 360);
};
System.Windows.Media.AudioCaptureDevice.prototype.get_AudioFrameSize = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.AudioCaptureDevice.AudioFrameSizeProperty), System.Int32);
};
System.Windows.Media.AudioCaptureDevice.prototype.set_AudioFrameSize = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.AudioCaptureDevice.AudioFrameSizeProperty, value);
};
System.Windows.Media.AudioCaptureDevice.prototype.get_SupportedFormats = function () {
	if (this.m_SupportedFormats === null) {
		this.m_SupportedFormats = new (System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(System.Windows.Media.AudioFormat)) ($asm02.MS.Internal.XcpImports.AudioCaptureDevice_GetSupportedFormats(this));
	}
	return this.m_SupportedFormats;
};
System.Windows.Media.AudioCaptureDevice.prototype.get_DesiredFormat = function () {
	return $asm02.MS.Internal.XcpImports.AudioCaptureDevice_GetDesiredFormat(this);
};
System.Windows.Media.AudioCaptureDevice.prototype.set_DesiredFormat = function (value) {
	$asm02.MS.Internal.XcpImports.AudioCaptureDevice_SetDesiredFormat(this, value);
};
JSIL.MakeProperty(System.Windows.Media.AudioCaptureDevice.prototype, "AudioFrameSize", 
	System.Windows.Media.AudioCaptureDevice.prototype.get_AudioFrameSize, System.Windows.Media.AudioCaptureDevice.prototype.set_AudioFrameSize);
JSIL.MakeProperty(System.Windows.Media.AudioCaptureDevice.prototype, "SupportedFormats", 
	System.Windows.Media.AudioCaptureDevice.prototype.get_SupportedFormats, null);
JSIL.MakeProperty(System.Windows.Media.AudioCaptureDevice.prototype, "DesiredFormat", 
	System.Windows.Media.AudioCaptureDevice.prototype.get_DesiredFormat, System.Windows.Media.AudioCaptureDevice.prototype.set_DesiredFormat);
System.Windows.Media.AudioCaptureDevice.AudioFrameSizeProperty = null;
System.Windows.Media.AudioCaptureDevice.prototype.m_SupportedFormats = null;
System.Windows.Media.AudioCaptureDevice._cctor = function () {
	System.Windows.Media.AudioCaptureDevice.AudioFrameSizeProperty = System.Windows.DependencyProperty.RegisterCoreProperty(22240, System.Int32);
};

System.Windows.Media.CaptureSource.prototype.get_VideoCaptureDevice = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.CaptureSource.VideoCaptureDeviceProperty), System.Windows.Media.VideoCaptureDevice);
};
System.Windows.Media.CaptureSource.prototype.set_VideoCaptureDevice = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.CaptureSource.VideoCaptureDeviceProperty, value);
};
System.Windows.Media.CaptureSource.prototype.get_AudioCaptureDevice = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.CaptureSource.AudioCaptureDeviceProperty), System.Windows.Media.AudioCaptureDevice);
};
System.Windows.Media.CaptureSource.prototype.set_AudioCaptureDevice = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.CaptureSource.AudioCaptureDeviceProperty, value);
};
System.Windows.Media.CaptureSource.prototype.add_CaptureFailed = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(22252, null), value);
};
System.Windows.Media.CaptureSource.prototype.remove_CaptureFailed = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(22252, null), value);
};
System.Windows.Media.CaptureSource.prototype.get_State = function () {
	return $asm02.MS.Internal.XcpImports.CaptureGraph_GetState(this);
};
System.Windows.Media.CaptureSource.prototype._ctor = function () {
	this.m_CaptureLock = new System.Object();
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 361);
	this.VideoCaptureDevice = System.Windows.Media.CaptureDeviceConfiguration.GetDefaultVideoCaptureDevice();
	this.AudioCaptureDevice = System.Windows.Media.CaptureDeviceConfiguration.GetDefaultAudioCaptureDevice();
};
System.Windows.Media.CaptureSource.prototype.Start = function () {
	$asm02.MS.Internal.XcpImports.CaptureGraph_Start(this);
};
System.Windows.Media.CaptureSource.prototype.Stop = function () {
	$asm02.MS.Internal.XcpImports.CaptureGraph_Stop(this);
};
System.Windows.Media.CaptureSource.prototype.CaptureImageAsync = function () {
	var captureLock = null;
	if (this.State !== System.Windows.Media.CaptureState.Started) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("Webcam_CaptureSourceNotStarted")]);
	}
	System.Threading.Monitor.Enter((captureLock = this.m_CaptureLock));
	try {
		if (this.m_CaptureSink === null) {
			this.m_CaptureSink = new $asm02.System.Windows.Media.SingleImageSink(this);
			var callback = function (Img) {
				this.m_CaptureSink = null;
				var e = new System.Windows.Media.CaptureImageCompletedEventArgs(Img);
				if (this.m_CaptureCallbacks !== null) {
					this.m_CaptureCallbacks(this, e);
				}
			};
			this.m_CaptureSink.Callback = callback;
			this.m_CaptureSink.CaptureSource = this;
		}
	} finally {
		System.Threading.Monitor.Exit(captureLock);
	}
};
System.Windows.Media.CaptureSource.prototype.add_CaptureImageCompleted = function (value) {
	var captureLock = null;
	System.Threading.Monitor.Enter((captureLock = this.m_CaptureLock));
	try {
		this.m_CaptureCallbacks = System.Delegate.Combine(this.m_CaptureCallbacks, value);
	} finally {
		System.Threading.Monitor.Exit(captureLock);
	}
};
System.Windows.Media.CaptureSource.prototype.remove_CaptureImageCompleted = function (value) {
	var captureLock = null;
	System.Threading.Monitor.Enter((captureLock = this.m_CaptureLock));
	try {
		this.m_CaptureCallbacks = System.Delegate.Remove(this.m_CaptureCallbacks, value);
	} finally {
		System.Threading.Monitor.Exit(captureLock);
	}
};
JSIL.MakeProperty(System.Windows.Media.CaptureSource.prototype, "VideoCaptureDevice", 
	System.Windows.Media.CaptureSource.prototype.get_VideoCaptureDevice, System.Windows.Media.CaptureSource.prototype.set_VideoCaptureDevice);
JSIL.MakeProperty(System.Windows.Media.CaptureSource.prototype, "AudioCaptureDevice", 
	System.Windows.Media.CaptureSource.prototype.get_AudioCaptureDevice, System.Windows.Media.CaptureSource.prototype.set_AudioCaptureDevice);
JSIL.MakeProperty(System.Windows.Media.CaptureSource.prototype, "State", 
	System.Windows.Media.CaptureSource.prototype.get_State, null);
System.Windows.Media.CaptureSource.VideoCaptureDeviceProperty = null;
System.Windows.Media.CaptureSource.AudioCaptureDeviceProperty = null;
System.Windows.Media.CaptureSource.prototype.m_CaptureCallbacks = null;
System.Windows.Media.CaptureSource.prototype.m_CaptureSink = null;
System.Windows.Media.CaptureSource.prototype.m_CaptureLock = null;
System.Windows.Media.CaptureSource._cctor = function () {
	System.Windows.Media.CaptureSource.VideoCaptureDeviceProperty = System.Windows.DependencyProperty.RegisterCoreProperty(22250, System.Windows.Media.VideoCaptureDevice);
	System.Windows.Media.CaptureSource.AudioCaptureDeviceProperty = System.Windows.DependencyProperty.RegisterCoreProperty(22251, System.Windows.Media.AudioCaptureDevice);
};

System.Windows.Media.Animation.Timeline.prototype._ctor$0 = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 47);
};
System.Windows.Media.Animation.Timeline.prototype._ctor$1 = function (nKnownTypeIndex) {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, nKnownTypeIndex);
};
System.Windows.Media.Animation.Timeline.prototype.get_AutoReverse = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Animation.Timeline.AutoReverseProperty), System.Boolean);
};
System.Windows.Media.Animation.Timeline.prototype.set_AutoReverse = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Animation.Timeline.AutoReverseProperty, value);
};
System.Windows.Media.Animation.Timeline.prototype.get_BeginTime = function () {
	var value = System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Animation.Timeline.BeginTimeProperty);
	if (value === null) {
		return new (System.Nullable$b1.Of(System.TimeSpan)) ();
	}
	return new (System.Nullable$b1.Of(System.TimeSpan)) (JSIL.Cast(value, System.TimeSpan));
};
System.Windows.Media.Animation.Timeline.prototype.set_BeginTime = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Animation.Timeline.BeginTimeProperty, value.MemberwiseClone());
};
System.Windows.Media.Animation.Timeline.prototype.get_Duration = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Animation.Timeline.DurationProperty), System.Windows.Duration);
};
System.Windows.Media.Animation.Timeline.prototype.set_Duration = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Animation.Timeline.DurationProperty, value.MemberwiseClone());
};
System.Windows.Media.Animation.Timeline.prototype.get_SpeedRatio = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Animation.Timeline.SpeedRatioProperty), System.Double);
};
System.Windows.Media.Animation.Timeline.prototype.set_SpeedRatio = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Animation.Timeline.SpeedRatioProperty, value);
};
System.Windows.Media.Animation.Timeline.prototype.get_FillBehavior = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Animation.Timeline.FillBehaviorProperty), System.Windows.Media.Animation.FillBehavior);
};
System.Windows.Media.Animation.Timeline.prototype.set_FillBehavior = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Animation.Timeline.FillBehaviorProperty, value);
};
System.Windows.Media.Animation.Timeline.prototype.get_RepeatBehavior = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Animation.Timeline.RepeatBehaviorProperty), System.Windows.Media.Animation.RepeatBehavior);
};
System.Windows.Media.Animation.Timeline.prototype.set_RepeatBehavior = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Animation.Timeline.RepeatBehaviorProperty, value.MemberwiseClone());
};
System.Windows.Media.Animation.Timeline.prototype.add_Completed = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(14800, null), value);
};
System.Windows.Media.Animation.Timeline.prototype.remove_Completed = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(14800, null), value);
};
System.Windows.Media.Animation.Timeline.prototype.OnInheritanceContextChanged = function (sender, e) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				System.Windows.DependencyObject.prototype.OnInheritanceContextChanged.call(this, sender, e);
				if (!(this.IsInLiveTree || (this._treeChildren === null))) {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								var array = JSIL.Array.New(System.Windows.DependencyObject, JSIL.Cast(this._treeChildren.Keys, System.Collections.Generic.Dictionary$b2.KeyCollection.Of($asm02.MS.Internal.IManagedPeerBase, System.Object)).Count);
								JSIL.Cast(this._treeChildren.Keys, System.Collections.Generic.Dictionary$b2.KeyCollection.Of($asm02.MS.Internal.IManagedPeerBase, System.Object)).CopyTo(array, 0);
								var num = array.length;
							__loop0__: 
								for (var i = 0; i < num; ) {
									var __label2__ = "__entry2__";
								__step2__: 
									while (true) {
										switch (__label2__) {
											case "__entry2__":
												var dependencyObject = array[i];
												var list = JSIL.TryCast(dependencyObject, System.Collections.IList);
												if (list !== null) {
													var list2 = new (System.Collections.Generic.List$b1.Of(System.Windows.DependencyObject)) (list.ICollection_Count);
													var enumerator = list.IEnumerable_GetEnumerator();
													try {
													__loop1__: 
														while (enumerator.IEnumerator_MoveNext()) {
															var current = enumerator.IEnumerator_Current;
															var dependencyObject2 = JSIL.TryCast(current, System.Windows.DependencyObject);
															if (dependencyObject2 !== null) {
																list2.Add(dependencyObject2);
															}
														}
													} finally {
														var disposable = JSIL.TryCast(enumerator, System.IDisposable);
														if (disposable !== null) {
															disposable.IDisposable_Dispose();
														}
													}
													var enumerator2 = (list2.GetEnumerator());
													try {
													__loop2__: 
														while (enumerator2.MoveNext()) {
															var current2 = enumerator2.Current;
															current2.OnInheritanceContextChanged(sender, e);
														}
														__label2__ = "IL_FF";
														continue __step2__;
													} finally {
														enumerator2.IDisposable_Dispose();
													}
													__label2__ = "IL_F4";
													continue __step2__;
												}
												__label2__ = "IL_F4";
												continue __step2__;
												__label2__ = "IL_FF";
												continue __step2__;
												break;
											case "IL_FF":
												++i;
												continue __loop0__;
												__label2__ = "IL_F4";
												continue __step2__;
												break;
											case "IL_F4":
												if (dependencyObject !== null) {
													dependencyObject.OnInheritanceContextChanged(sender, e);
													__label2__ = "IL_FF";
													continue __step2__;
												}
												__label2__ = "IL_FF";
												continue __step2__;
												break __step2__;
										}
									}
								}
								break __step1__;
						}
					}
				}
				break __step0__;
		}
	}
};
JSIL.OverloadedMethod(System.Windows.Media.Animation.Timeline.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);
JSIL.MakeProperty(System.Windows.Media.Animation.Timeline.prototype, "AutoReverse", 
	System.Windows.Media.Animation.Timeline.prototype.get_AutoReverse, System.Windows.Media.Animation.Timeline.prototype.set_AutoReverse);
JSIL.MakeProperty(System.Windows.Media.Animation.Timeline.prototype, "BeginTime", 
	System.Windows.Media.Animation.Timeline.prototype.get_BeginTime, System.Windows.Media.Animation.Timeline.prototype.set_BeginTime);
JSIL.MakeProperty(System.Windows.Media.Animation.Timeline.prototype, "Duration", 
	System.Windows.Media.Animation.Timeline.prototype.get_Duration, System.Windows.Media.Animation.Timeline.prototype.set_Duration);
JSIL.MakeProperty(System.Windows.Media.Animation.Timeline.prototype, "SpeedRatio", 
	System.Windows.Media.Animation.Timeline.prototype.get_SpeedRatio, System.Windows.Media.Animation.Timeline.prototype.set_SpeedRatio);
JSIL.MakeProperty(System.Windows.Media.Animation.Timeline.prototype, "FillBehavior", 
	System.Windows.Media.Animation.Timeline.prototype.get_FillBehavior, System.Windows.Media.Animation.Timeline.prototype.set_FillBehavior);
JSIL.MakeProperty(System.Windows.Media.Animation.Timeline.prototype, "RepeatBehavior", 
	System.Windows.Media.Animation.Timeline.prototype.get_RepeatBehavior, System.Windows.Media.Animation.Timeline.prototype.set_RepeatBehavior);
System.Windows.Media.Animation.Timeline.AutoReverseProperty = null;
System.Windows.Media.Animation.Timeline.BeginTimeProperty = null;
System.Windows.Media.Animation.Timeline.DurationProperty = null;
System.Windows.Media.Animation.Timeline.SpeedRatioProperty = null;
System.Windows.Media.Animation.Timeline.FillBehaviorProperty = null;
System.Windows.Media.Animation.Timeline.RepeatBehaviorProperty = null;
System.Windows.Media.Animation.Timeline._cctor = function () {
	System.Windows.Media.Animation.Timeline.AutoReverseProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14601, System.Boolean);
	System.Windows.Media.Animation.Timeline.BeginTimeProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14602, System.TimeSpan);
	System.Windows.Media.Animation.Timeline.DurationProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14604, System.Windows.Duration);
	System.Windows.Media.Animation.Timeline.SpeedRatioProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14605, System.Double);
	System.Windows.Media.Animation.Timeline.FillBehaviorProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14606, System.Windows.Media.Animation.FillBehavior);
	System.Windows.Media.Animation.Timeline.RepeatBehaviorProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14607, System.Windows.Media.Animation.RepeatBehavior);
};

System.Windows.Media.Animation.EasingFunctionBase.prototype._ctor$0 = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 284);
};
System.Windows.Media.Animation.EasingFunctionBase.prototype._ctor$1 = function (nKnownTypeIndex) {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, nKnownTypeIndex);
};
System.Windows.Media.Animation.EasingFunctionBase.prototype.get_EasingMode = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Animation.EasingFunctionBase.EasingModeProperty), System.Windows.Media.Animation.EasingMode);
};
System.Windows.Media.Animation.EasingFunctionBase.prototype.set_EasingMode = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Animation.EasingFunctionBase.EasingModeProperty, value);
};
System.Windows.Media.Animation.EasingFunctionBase.prototype.Ease = function (normalizedTime) {
	switch (Number(this.EasingMode)) {
		case 0: 
			return (1 - this.EaseInCore((1 - normalizedTime)));
		case 1: 
			return this.EaseInCore(normalizedTime);
		case 2: 
			if (normalizedTime < 0.5) {
				return (this.EaseInCore((normalizedTime * 2)) / 2);
			}
			return (((1 - this.EaseInCore((2 - (normalizedTime * 2)))) / 2) + 0.5);
		default: 
			return normalizedTime;
	}
};
System.Windows.Media.Animation.EasingFunctionBase.EaseManaged = function (nativeTarget, /* ref */ alpha, normalizedTime) {
	try {
		var easingFunction = JSIL.Cast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeTarget), System.Windows.Media.Animation.IEasingFunction);
		alpha.value = easingFunction.IEasingFunction_Ease(normalizedTime);
	} catch ($exception) {
		var arg_19_0 = $exception;
		alpha.value = 0;
		return $asm02.MS.Internal.Error.GetXresultForException(arg_19_0);
	}
	return 0;
};
JSIL.OverloadedMethod(System.Windows.Media.Animation.EasingFunctionBase.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);
JSIL.MakeProperty(System.Windows.Media.Animation.EasingFunctionBase.prototype, "EasingMode", 
	System.Windows.Media.Animation.EasingFunctionBase.prototype.get_EasingMode, System.Windows.Media.Animation.EasingFunctionBase.prototype.set_EasingMode);
System.Windows.Media.Animation.EasingFunctionBase.EasingModeProperty = null;
System.Windows.Media.Animation.EasingFunctionBase._cctor = function () {
	System.Windows.Media.Animation.EasingFunctionBase.EasingModeProperty = System.Windows.DependencyProperty.RegisterCoreProperty(20350, System.Windows.Media.Animation.EasingMode);
};

System.Windows.Media.Animation.CircleEase.prototype._ctor$0 = function () {
	System.Windows.Media.Animation.EasingFunctionBase.prototype._ctor$1.call(this, 285);
};
System.Windows.Media.Animation.CircleEase.prototype._ctor$1 = function (nKnownTypeIndex) {
	System.Windows.Media.Animation.EasingFunctionBase.prototype._ctor$1.call(this, nKnownTypeIndex);
};
System.Windows.Media.Animation.CircleEase.prototype.EaseInCore = function (normalizedTime) {
	return $asm02.MS.Internal.XcpImports.EasingFunction_EaseInCore(this, normalizedTime);
};
JSIL.OverloadedMethod(System.Windows.Media.Animation.CircleEase.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);

System.Windows.Media.Animation.BackEase.prototype._ctor$0 = function () {
	System.Windows.Media.Animation.EasingFunctionBase.prototype._ctor$1.call(this, 286);
};
System.Windows.Media.Animation.BackEase.prototype._ctor$1 = function (nKnownTypeIndex) {
	System.Windows.Media.Animation.EasingFunctionBase.prototype._ctor$1.call(this, nKnownTypeIndex);
};
System.Windows.Media.Animation.BackEase.prototype.get_Amplitude = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Animation.BackEase.AmplitudeProperty), System.Double);
};
System.Windows.Media.Animation.BackEase.prototype.set_Amplitude = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Animation.BackEase.AmplitudeProperty, value);
};
System.Windows.Media.Animation.BackEase.prototype.EaseInCore = function (normalizedTime) {
	return $asm02.MS.Internal.XcpImports.EasingFunction_EaseInCore(this, normalizedTime);
};
JSIL.OverloadedMethod(System.Windows.Media.Animation.BackEase.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);
JSIL.MakeProperty(System.Windows.Media.Animation.BackEase.prototype, "Amplitude", 
	System.Windows.Media.Animation.BackEase.prototype.get_Amplitude, System.Windows.Media.Animation.BackEase.prototype.set_Amplitude);
System.Windows.Media.Animation.BackEase.AmplitudeProperty = null;
System.Windows.Media.Animation.BackEase._cctor = function () {
	System.Windows.Media.Animation.BackEase.AmplitudeProperty = System.Windows.DependencyProperty.RegisterCoreProperty(20351, System.Double);
};

System.Windows.Media.Animation.ExponentialEase.prototype._ctor$0 = function () {
	System.Windows.Media.Animation.EasingFunctionBase.prototype._ctor$1.call(this, 287);
};
System.Windows.Media.Animation.ExponentialEase.prototype._ctor$1 = function (nKnownTypeIndex) {
	System.Windows.Media.Animation.EasingFunctionBase.prototype._ctor$1.call(this, nKnownTypeIndex);
};
System.Windows.Media.Animation.ExponentialEase.prototype.get_Exponent = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Animation.ExponentialEase.ExponentProperty), System.Double);
};
System.Windows.Media.Animation.ExponentialEase.prototype.set_Exponent = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Animation.ExponentialEase.ExponentProperty, value);
};
System.Windows.Media.Animation.ExponentialEase.prototype.EaseInCore = function (normalizedTime) {
	return $asm02.MS.Internal.XcpImports.EasingFunction_EaseInCore(this, normalizedTime);
};
JSIL.OverloadedMethod(System.Windows.Media.Animation.ExponentialEase.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);
JSIL.MakeProperty(System.Windows.Media.Animation.ExponentialEase.prototype, "Exponent", 
	System.Windows.Media.Animation.ExponentialEase.prototype.get_Exponent, System.Windows.Media.Animation.ExponentialEase.prototype.set_Exponent);
System.Windows.Media.Animation.ExponentialEase.ExponentProperty = null;
System.Windows.Media.Animation.ExponentialEase._cctor = function () {
	System.Windows.Media.Animation.ExponentialEase.ExponentProperty = System.Windows.DependencyProperty.RegisterCoreProperty(20352, System.Double);
};

System.Windows.Media.Animation.PowerEase.prototype._ctor$0 = function () {
	System.Windows.Media.Animation.EasingFunctionBase.prototype._ctor$1.call(this, 288);
};
System.Windows.Media.Animation.PowerEase.prototype._ctor$1 = function (nKnownTypeIndex) {
	System.Windows.Media.Animation.EasingFunctionBase.prototype._ctor$1.call(this, nKnownTypeIndex);
};
System.Windows.Media.Animation.PowerEase.prototype.get_Power = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Animation.PowerEase.PowerProperty), System.Double);
};
System.Windows.Media.Animation.PowerEase.prototype.set_Power = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Animation.PowerEase.PowerProperty, value);
};
System.Windows.Media.Animation.PowerEase.prototype.EaseInCore = function (normalizedTime) {
	return $asm02.MS.Internal.XcpImports.EasingFunction_EaseInCore(this, normalizedTime);
};
JSIL.OverloadedMethod(System.Windows.Media.Animation.PowerEase.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);
JSIL.MakeProperty(System.Windows.Media.Animation.PowerEase.prototype, "Power", 
	System.Windows.Media.Animation.PowerEase.prototype.get_Power, System.Windows.Media.Animation.PowerEase.prototype.set_Power);
System.Windows.Media.Animation.PowerEase.PowerProperty = null;
System.Windows.Media.Animation.PowerEase._cctor = function () {
	System.Windows.Media.Animation.PowerEase.PowerProperty = System.Windows.DependencyProperty.RegisterCoreProperty(20353, System.Double);
};

System.Windows.Media.Animation.QuadraticEase.prototype._ctor$0 = function () {
	System.Windows.Media.Animation.EasingFunctionBase.prototype._ctor$1.call(this, 289);
};
System.Windows.Media.Animation.QuadraticEase.prototype._ctor$1 = function (nKnownTypeIndex) {
	System.Windows.Media.Animation.EasingFunctionBase.prototype._ctor$1.call(this, nKnownTypeIndex);
};
System.Windows.Media.Animation.QuadraticEase.prototype.EaseInCore = function (normalizedTime) {
	return $asm02.MS.Internal.XcpImports.EasingFunction_EaseInCore(this, normalizedTime);
};
JSIL.OverloadedMethod(System.Windows.Media.Animation.QuadraticEase.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);

System.Windows.Media.Animation.CubicEase.prototype._ctor$0 = function () {
	System.Windows.Media.Animation.EasingFunctionBase.prototype._ctor$1.call(this, 290);
};
System.Windows.Media.Animation.CubicEase.prototype._ctor$1 = function (nKnownTypeIndex) {
	System.Windows.Media.Animation.EasingFunctionBase.prototype._ctor$1.call(this, nKnownTypeIndex);
};
System.Windows.Media.Animation.CubicEase.prototype.EaseInCore = function (normalizedTime) {
	return $asm02.MS.Internal.XcpImports.EasingFunction_EaseInCore(this, normalizedTime);
};
JSIL.OverloadedMethod(System.Windows.Media.Animation.CubicEase.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);

System.Windows.Media.Animation.QuarticEase.prototype._ctor$0 = function () {
	System.Windows.Media.Animation.EasingFunctionBase.prototype._ctor$1.call(this, 291);
};
System.Windows.Media.Animation.QuarticEase.prototype._ctor$1 = function (nKnownTypeIndex) {
	System.Windows.Media.Animation.EasingFunctionBase.prototype._ctor$1.call(this, nKnownTypeIndex);
};
System.Windows.Media.Animation.QuarticEase.prototype.EaseInCore = function (normalizedTime) {
	return $asm02.MS.Internal.XcpImports.EasingFunction_EaseInCore(this, normalizedTime);
};
JSIL.OverloadedMethod(System.Windows.Media.Animation.QuarticEase.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);

System.Windows.Media.Animation.QuinticEase.prototype._ctor$0 = function () {
	System.Windows.Media.Animation.EasingFunctionBase.prototype._ctor$1.call(this, 292);
};
System.Windows.Media.Animation.QuinticEase.prototype._ctor$1 = function (nKnownTypeIndex) {
	System.Windows.Media.Animation.EasingFunctionBase.prototype._ctor$1.call(this, nKnownTypeIndex);
};
System.Windows.Media.Animation.QuinticEase.prototype.EaseInCore = function (normalizedTime) {
	return $asm02.MS.Internal.XcpImports.EasingFunction_EaseInCore(this, normalizedTime);
};
JSIL.OverloadedMethod(System.Windows.Media.Animation.QuinticEase.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);

System.Windows.Media.Animation.ElasticEase.prototype._ctor$0 = function () {
	System.Windows.Media.Animation.EasingFunctionBase.prototype._ctor$1.call(this, 293);
};
System.Windows.Media.Animation.ElasticEase.prototype._ctor$1 = function (nKnownTypeIndex) {
	System.Windows.Media.Animation.EasingFunctionBase.prototype._ctor$1.call(this, nKnownTypeIndex);
};
System.Windows.Media.Animation.ElasticEase.prototype.get_Oscillations = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Animation.ElasticEase.OscillationsProperty), System.Int32);
};
System.Windows.Media.Animation.ElasticEase.prototype.set_Oscillations = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Animation.ElasticEase.OscillationsProperty, value);
};
System.Windows.Media.Animation.ElasticEase.prototype.get_Springiness = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Animation.ElasticEase.SpringinessProperty), System.Double);
};
System.Windows.Media.Animation.ElasticEase.prototype.set_Springiness = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Animation.ElasticEase.SpringinessProperty, value);
};
System.Windows.Media.Animation.ElasticEase.prototype.EaseInCore = function (normalizedTime) {
	return $asm02.MS.Internal.XcpImports.EasingFunction_EaseInCore(this, normalizedTime);
};
JSIL.OverloadedMethod(System.Windows.Media.Animation.ElasticEase.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);
JSIL.MakeProperty(System.Windows.Media.Animation.ElasticEase.prototype, "Oscillations", 
	System.Windows.Media.Animation.ElasticEase.prototype.get_Oscillations, System.Windows.Media.Animation.ElasticEase.prototype.set_Oscillations);
JSIL.MakeProperty(System.Windows.Media.Animation.ElasticEase.prototype, "Springiness", 
	System.Windows.Media.Animation.ElasticEase.prototype.get_Springiness, System.Windows.Media.Animation.ElasticEase.prototype.set_Springiness);
System.Windows.Media.Animation.ElasticEase.OscillationsProperty = null;
System.Windows.Media.Animation.ElasticEase.SpringinessProperty = null;
System.Windows.Media.Animation.ElasticEase._cctor = function () {
	System.Windows.Media.Animation.ElasticEase.OscillationsProperty = System.Windows.DependencyProperty.RegisterCoreProperty(20354, System.Int32);
	System.Windows.Media.Animation.ElasticEase.SpringinessProperty = System.Windows.DependencyProperty.RegisterCoreProperty(20355, System.Double);
};

System.Windows.Media.Animation.BounceEase.prototype._ctor$0 = function () {
	System.Windows.Media.Animation.EasingFunctionBase.prototype._ctor$1.call(this, 294);
};
System.Windows.Media.Animation.BounceEase.prototype._ctor$1 = function (nKnownTypeIndex) {
	System.Windows.Media.Animation.EasingFunctionBase.prototype._ctor$1.call(this, nKnownTypeIndex);
};
System.Windows.Media.Animation.BounceEase.prototype.get_Bounces = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Animation.BounceEase.BouncesProperty), System.Int32);
};
System.Windows.Media.Animation.BounceEase.prototype.set_Bounces = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Animation.BounceEase.BouncesProperty, value);
};
System.Windows.Media.Animation.BounceEase.prototype.get_Bounciness = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Animation.BounceEase.BouncinessProperty), System.Double);
};
System.Windows.Media.Animation.BounceEase.prototype.set_Bounciness = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Animation.BounceEase.BouncinessProperty, value);
};
System.Windows.Media.Animation.BounceEase.prototype.EaseInCore = function (normalizedTime) {
	return $asm02.MS.Internal.XcpImports.EasingFunction_EaseInCore(this, normalizedTime);
};
JSIL.OverloadedMethod(System.Windows.Media.Animation.BounceEase.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);
JSIL.MakeProperty(System.Windows.Media.Animation.BounceEase.prototype, "Bounces", 
	System.Windows.Media.Animation.BounceEase.prototype.get_Bounces, System.Windows.Media.Animation.BounceEase.prototype.set_Bounces);
JSIL.MakeProperty(System.Windows.Media.Animation.BounceEase.prototype, "Bounciness", 
	System.Windows.Media.Animation.BounceEase.prototype.get_Bounciness, System.Windows.Media.Animation.BounceEase.prototype.set_Bounciness);
System.Windows.Media.Animation.BounceEase.BouncesProperty = null;
System.Windows.Media.Animation.BounceEase.BouncinessProperty = null;
System.Windows.Media.Animation.BounceEase._cctor = function () {
	System.Windows.Media.Animation.BounceEase.BouncesProperty = System.Windows.DependencyProperty.RegisterCoreProperty(20356, System.Int32);
	System.Windows.Media.Animation.BounceEase.BouncinessProperty = System.Windows.DependencyProperty.RegisterCoreProperty(20357, System.Double);
};

System.Windows.Media.Animation.SineEase.prototype._ctor$0 = function () {
	System.Windows.Media.Animation.EasingFunctionBase.prototype._ctor$1.call(this, 295);
};
System.Windows.Media.Animation.SineEase.prototype._ctor$1 = function (nKnownTypeIndex) {
	System.Windows.Media.Animation.EasingFunctionBase.prototype._ctor$1.call(this, nKnownTypeIndex);
};
System.Windows.Media.Animation.SineEase.prototype.EaseInCore = function (normalizedTime) {
	return $asm02.MS.Internal.XcpImports.EasingFunction_EaseInCore(this, normalizedTime);
};
JSIL.OverloadedMethod(System.Windows.Media.Animation.SineEase.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);

System.Windows.Media.Animation.BeginStoryboard.prototype._ctor = function () {
	System.Windows.TriggerAction.prototype._ctor$1.call(this, 45);
};
System.Windows.Media.Animation.BeginStoryboard.prototype.get_Storyboard = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Animation.BeginStoryboard.StoryboardProperty), System.Windows.Media.Animation.Storyboard);
};
System.Windows.Media.Animation.BeginStoryboard.prototype.set_Storyboard = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Animation.BeginStoryboard.StoryboardProperty, value);
};
JSIL.MakeProperty(System.Windows.Media.Animation.BeginStoryboard.prototype, "Storyboard", 
	System.Windows.Media.Animation.BeginStoryboard.prototype.get_Storyboard, System.Windows.Media.Animation.BeginStoryboard.prototype.set_Storyboard);
System.Windows.Media.Animation.BeginStoryboard.StoryboardProperty = null;
System.Windows.Media.Animation.BeginStoryboard._cctor = function () {
	System.Windows.Media.Animation.BeginStoryboard.StoryboardProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14500, System.Windows.Media.Animation.Storyboard);
};

System.Windows.Media.Animation.Storyboard.prototype._ctor = function () {
	System.Windows.Media.Animation.Timeline.prototype._ctor$1.call(this, 46);
};
System.Windows.Media.Animation.Storyboard.GetTargetName = function (element) {
	return JSIL.Cast(element.GetValue(System.Windows.Media.Animation.Storyboard.TargetNameProperty), System.String);
};
System.Windows.Media.Animation.Storyboard.SetTargetName = function (element, name) {
	element.SetValue(System.Windows.Media.Animation.Storyboard.TargetNameProperty, name);
};
System.Windows.Media.Animation.Storyboard.prototype.get_Children = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Animation.Storyboard.ChildrenProperty), System.Windows.Media.Animation.TimelineCollection);
};
System.Windows.Media.Animation.Storyboard.prototype.Seek = function (offset) {
	$asm02.MS.Internal.XcpImports.Storyboard_Seek(this, offset);
};
System.Windows.Media.Animation.Storyboard.prototype.Stop = function () {
	$asm02.MS.Internal.XcpImports.Storyboard_Stop(this);
};
System.Windows.Media.Animation.Storyboard.prototype.Begin = function () {
	$asm02.MS.Internal.XcpImports.Storyboard_Begin(this);
};
System.Windows.Media.Animation.Storyboard.prototype.Pause = function () {
	$asm02.MS.Internal.XcpImports.Storyboard_Pause(this);
};
System.Windows.Media.Animation.Storyboard.prototype.Resume = function () {
	$asm02.MS.Internal.XcpImports.Storyboard_Resume(this);
};
System.Windows.Media.Animation.Storyboard.GetTargetProperty = function (element) {
	if (element === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["element"]);
	}
	return JSIL.Cast(element.GetValue(System.Windows.Media.Animation.Storyboard.TargetPropertyProperty), System.Windows.PropertyPath);
};
System.Windows.Media.Animation.Storyboard.SetTargetProperty = function (element, path) {
	if (element === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["element"]);
	}
	if (path === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["path"]);
	}
	if (path.HasDependencyProperty()) {
		$asm02.MS.Internal.XcpImports.Storyboard_SetTargetDependencyProperty(element, path.GetDependencyProperty());
		return;
	}
	element.SetValue(System.Windows.Media.Animation.Storyboard.TargetPropertyProperty, path);
};
System.Windows.Media.Animation.Storyboard.SetTarget = function (timeline, target) {
	if (target === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["target"]);
	}
	if (timeline === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["timeline"]);
	}
	$asm02.MS.Internal.XcpImports.Storyboard_SetTarget(timeline, target);
};
System.Windows.Media.Animation.Storyboard.prototype.get_ResourceKey = function () {
	if (System.String.IsNullOrEmpty(this._resourceKey)) {
		this._resourceKey = System.Windows.DependencyObject.prototype.get_NativeObject.call(this).toString();
	}
	return this._resourceKey;
};
System.Windows.Media.Animation.Storyboard.prototype.GetCurrentTime = function () {
	return $asm02.MS.Internal.XcpImports.Timeline_GetCurrentTime(this);
};
System.Windows.Media.Animation.Storyboard.prototype.GetCurrentState = function () {
	return $asm02.MS.Internal.XcpImports.Timeline_GetClockState(this);
};
System.Windows.Media.Animation.Storyboard.prototype.SkipToFill = function () {
	$asm02.MS.Internal.XcpImports.Storyboard_SkipToFill(this);
};
System.Windows.Media.Animation.Storyboard.prototype.SeekAlignedToLastTick = function (offset) {
	$asm02.MS.Internal.XcpImports.Storyboard_SeekAlignedToLastTick(this, offset.TotalSeconds);
};
JSIL.MakeProperty(System.Windows.Media.Animation.Storyboard.prototype, "Children", 
	System.Windows.Media.Animation.Storyboard.prototype.get_Children, null);
JSIL.MakeProperty(System.Windows.Media.Animation.Storyboard.prototype, "ResourceKey", 
	System.Windows.Media.Animation.Storyboard.prototype.get_ResourceKey, null);
System.Windows.Media.Animation.Storyboard.ChildrenProperty = null;
System.Windows.Media.Animation.Storyboard.TargetPropertyProperty = null;
System.Windows.Media.Animation.Storyboard.TargetNameProperty = null;
System.Windows.Media.Animation.Storyboard.prototype._resourceKey = null;
System.Windows.Media.Animation.Storyboard._cctor = function () {
	System.Windows.Media.Animation.Storyboard.ChildrenProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14700, System.Windows.Media.Animation.TimelineCollection);
	System.Windows.Media.Animation.Storyboard.TargetPropertyProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14608, System.Windows.PropertyPath);
	System.Windows.Media.Animation.Storyboard.TargetNameProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14609, System.String);
};

System.Windows.Media.Animation.DoubleAnimation.prototype._ctor = function () {
	System.Windows.Media.Animation.Timeline.prototype._ctor$1.call(this, 53);
};
System.Windows.Media.Animation.DoubleAnimation.prototype.get_From = function () {
	var value = System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Animation.DoubleAnimation.FromProperty);
	if (value === null) {
		return new (System.Nullable$b1.Of(System.Double)) ();
	}
	return new (System.Nullable$b1.Of(System.Double)) (JSIL.Cast(value, System.Double));
};
System.Windows.Media.Animation.DoubleAnimation.prototype.set_From = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Animation.DoubleAnimation.FromProperty, value.MemberwiseClone());
};
System.Windows.Media.Animation.DoubleAnimation.prototype.get_To = function () {
	var value = System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Animation.DoubleAnimation.ToProperty);
	if (value === null) {
		return new (System.Nullable$b1.Of(System.Double)) ();
	}
	return new (System.Nullable$b1.Of(System.Double)) (JSIL.Cast(value, System.Double));
};
System.Windows.Media.Animation.DoubleAnimation.prototype.set_To = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Animation.DoubleAnimation.ToProperty, value.MemberwiseClone());
};
System.Windows.Media.Animation.DoubleAnimation.prototype.get_By = function () {
	var value = System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Animation.DoubleAnimation.ByProperty);
	if (value === null) {
		return new (System.Nullable$b1.Of(System.Double)) ();
	}
	return new (System.Nullable$b1.Of(System.Double)) (JSIL.Cast(value, System.Double));
};
System.Windows.Media.Animation.DoubleAnimation.prototype.set_By = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Animation.DoubleAnimation.ByProperty, value.MemberwiseClone());
};
System.Windows.Media.Animation.DoubleAnimation.prototype.get_EasingFunction = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Animation.DoubleAnimation.EasingFunctionProperty), System.Windows.Media.Animation.IEasingFunction);
};
System.Windows.Media.Animation.DoubleAnimation.prototype.set_EasingFunction = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Animation.DoubleAnimation.EasingFunctionProperty, value);
};
JSIL.MakeProperty(System.Windows.Media.Animation.DoubleAnimation.prototype, "From", 
	System.Windows.Media.Animation.DoubleAnimation.prototype.get_From, System.Windows.Media.Animation.DoubleAnimation.prototype.set_From);
JSIL.MakeProperty(System.Windows.Media.Animation.DoubleAnimation.prototype, "To", 
	System.Windows.Media.Animation.DoubleAnimation.prototype.get_To, System.Windows.Media.Animation.DoubleAnimation.prototype.set_To);
JSIL.MakeProperty(System.Windows.Media.Animation.DoubleAnimation.prototype, "By", 
	System.Windows.Media.Animation.DoubleAnimation.prototype.get_By, System.Windows.Media.Animation.DoubleAnimation.prototype.set_By);
JSIL.MakeProperty(System.Windows.Media.Animation.DoubleAnimation.prototype, "EasingFunction", 
	System.Windows.Media.Animation.DoubleAnimation.prototype.get_EasingFunction, System.Windows.Media.Animation.DoubleAnimation.prototype.set_EasingFunction);
System.Windows.Media.Animation.DoubleAnimation.FromProperty = null;
System.Windows.Media.Animation.DoubleAnimation.ToProperty = null;
System.Windows.Media.Animation.DoubleAnimation.ByProperty = null;
System.Windows.Media.Animation.DoubleAnimation.EasingFunctionProperty = null;
System.Windows.Media.Animation.DoubleAnimation._cctor = function () {
	System.Windows.Media.Animation.DoubleAnimation.FromProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14900, System.Double);
	System.Windows.Media.Animation.DoubleAnimation.ToProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14901, System.Double);
	System.Windows.Media.Animation.DoubleAnimation.ByProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14902, System.Double);
	System.Windows.Media.Animation.DoubleAnimation.EasingFunctionProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14903, System.Windows.Media.Animation.IEasingFunction);
};

System.Windows.Media.Animation.ColorAnimation.prototype._ctor = function () {
	System.Windows.Media.Animation.Timeline.prototype._ctor$1.call(this, 65);
};
System.Windows.Media.Animation.ColorAnimation.prototype.get_From = function () {
	var value = System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Animation.ColorAnimation.FromProperty);
	if (value === null) {
		return new (System.Nullable$b1.Of(System.Windows.Media.Color)) ();
	}
	return new (System.Nullable$b1.Of(System.Windows.Media.Color)) (JSIL.Cast(value, System.Windows.Media.Color));
};
System.Windows.Media.Animation.ColorAnimation.prototype.set_From = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Animation.ColorAnimation.FromProperty, value.MemberwiseClone());
};
System.Windows.Media.Animation.ColorAnimation.prototype.get_To = function () {
	var value = System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Animation.ColorAnimation.ToProperty);
	if (value === null) {
		return new (System.Nullable$b1.Of(System.Windows.Media.Color)) ();
	}
	return new (System.Nullable$b1.Of(System.Windows.Media.Color)) (JSIL.Cast(value, System.Windows.Media.Color));
};
System.Windows.Media.Animation.ColorAnimation.prototype.set_To = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Animation.ColorAnimation.ToProperty, value.MemberwiseClone());
};
System.Windows.Media.Animation.ColorAnimation.prototype.get_By = function () {
	var value = System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Animation.ColorAnimation.ByProperty);
	if (value === null) {
		return new (System.Nullable$b1.Of(System.Windows.Media.Color)) ();
	}
	return new (System.Nullable$b1.Of(System.Windows.Media.Color)) (JSIL.Cast(value, System.Windows.Media.Color));
};
System.Windows.Media.Animation.ColorAnimation.prototype.set_By = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Animation.ColorAnimation.ByProperty, value.MemberwiseClone());
};
System.Windows.Media.Animation.ColorAnimation.prototype.get_EasingFunction = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Animation.ColorAnimation.EasingFunctionProperty), System.Windows.Media.Animation.IEasingFunction);
};
System.Windows.Media.Animation.ColorAnimation.prototype.set_EasingFunction = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Animation.ColorAnimation.EasingFunctionProperty, value);
};
JSIL.MakeProperty(System.Windows.Media.Animation.ColorAnimation.prototype, "From", 
	System.Windows.Media.Animation.ColorAnimation.prototype.get_From, System.Windows.Media.Animation.ColorAnimation.prototype.set_From);
JSIL.MakeProperty(System.Windows.Media.Animation.ColorAnimation.prototype, "To", 
	System.Windows.Media.Animation.ColorAnimation.prototype.get_To, System.Windows.Media.Animation.ColorAnimation.prototype.set_To);
JSIL.MakeProperty(System.Windows.Media.Animation.ColorAnimation.prototype, "By", 
	System.Windows.Media.Animation.ColorAnimation.prototype.get_By, System.Windows.Media.Animation.ColorAnimation.prototype.set_By);
JSIL.MakeProperty(System.Windows.Media.Animation.ColorAnimation.prototype, "EasingFunction", 
	System.Windows.Media.Animation.ColorAnimation.prototype.get_EasingFunction, System.Windows.Media.Animation.ColorAnimation.prototype.set_EasingFunction);
System.Windows.Media.Animation.ColorAnimation.FromProperty = null;
System.Windows.Media.Animation.ColorAnimation.ToProperty = null;
System.Windows.Media.Animation.ColorAnimation.ByProperty = null;
System.Windows.Media.Animation.ColorAnimation.EasingFunctionProperty = null;
System.Windows.Media.Animation.ColorAnimation._cctor = function () {
	System.Windows.Media.Animation.ColorAnimation.FromProperty = System.Windows.DependencyProperty.RegisterCoreProperty(15000, System.Windows.Media.Color);
	System.Windows.Media.Animation.ColorAnimation.ToProperty = System.Windows.DependencyProperty.RegisterCoreProperty(15001, System.Windows.Media.Color);
	System.Windows.Media.Animation.ColorAnimation.ByProperty = System.Windows.DependencyProperty.RegisterCoreProperty(15002, System.Windows.Media.Color);
	System.Windows.Media.Animation.ColorAnimation.EasingFunctionProperty = System.Windows.DependencyProperty.RegisterCoreProperty(15003, System.Windows.Media.Animation.IEasingFunction);
};

System.Windows.Media.Animation.PointAnimation.prototype._ctor = function () {
	System.Windows.Media.Animation.Timeline.prototype._ctor$1.call(this, 87);
};
System.Windows.Media.Animation.PointAnimation.prototype.get_From = function () {
	var value = System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Animation.PointAnimation.FromProperty);
	if (value === null) {
		return new (System.Nullable$b1.Of(System.Windows.Point)) ();
	}
	return new (System.Nullable$b1.Of(System.Windows.Point)) (JSIL.Cast(value, System.Windows.Point));
};
System.Windows.Media.Animation.PointAnimation.prototype.set_From = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Animation.PointAnimation.FromProperty, value.MemberwiseClone());
};
System.Windows.Media.Animation.PointAnimation.prototype.get_To = function () {
	var value = System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Animation.PointAnimation.ToProperty);
	if (value === null) {
		return new (System.Nullable$b1.Of(System.Windows.Point)) ();
	}
	return new (System.Nullable$b1.Of(System.Windows.Point)) (JSIL.Cast(value, System.Windows.Point));
};
System.Windows.Media.Animation.PointAnimation.prototype.set_To = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Animation.PointAnimation.ToProperty, value.MemberwiseClone());
};
System.Windows.Media.Animation.PointAnimation.prototype.get_By = function () {
	var value = System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Animation.PointAnimation.ByProperty);
	if (value === null) {
		return new (System.Nullable$b1.Of(System.Windows.Point)) ();
	}
	return new (System.Nullable$b1.Of(System.Windows.Point)) (JSIL.Cast(value, System.Windows.Point));
};
System.Windows.Media.Animation.PointAnimation.prototype.set_By = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Animation.PointAnimation.ByProperty, value.MemberwiseClone());
};
System.Windows.Media.Animation.PointAnimation.prototype.get_EasingFunction = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Animation.PointAnimation.EasingFunctionProperty), System.Windows.Media.Animation.IEasingFunction);
};
System.Windows.Media.Animation.PointAnimation.prototype.set_EasingFunction = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Animation.PointAnimation.EasingFunctionProperty, value);
};
JSIL.MakeProperty(System.Windows.Media.Animation.PointAnimation.prototype, "From", 
	System.Windows.Media.Animation.PointAnimation.prototype.get_From, System.Windows.Media.Animation.PointAnimation.prototype.set_From);
JSIL.MakeProperty(System.Windows.Media.Animation.PointAnimation.prototype, "To", 
	System.Windows.Media.Animation.PointAnimation.prototype.get_To, System.Windows.Media.Animation.PointAnimation.prototype.set_To);
JSIL.MakeProperty(System.Windows.Media.Animation.PointAnimation.prototype, "By", 
	System.Windows.Media.Animation.PointAnimation.prototype.get_By, System.Windows.Media.Animation.PointAnimation.prototype.set_By);
JSIL.MakeProperty(System.Windows.Media.Animation.PointAnimation.prototype, "EasingFunction", 
	System.Windows.Media.Animation.PointAnimation.prototype.get_EasingFunction, System.Windows.Media.Animation.PointAnimation.prototype.set_EasingFunction);
System.Windows.Media.Animation.PointAnimation.FromProperty = null;
System.Windows.Media.Animation.PointAnimation.ToProperty = null;
System.Windows.Media.Animation.PointAnimation.ByProperty = null;
System.Windows.Media.Animation.PointAnimation.EasingFunctionProperty = null;
System.Windows.Media.Animation.PointAnimation._cctor = function () {
	System.Windows.Media.Animation.PointAnimation.FromProperty = System.Windows.DependencyProperty.RegisterCoreProperty(15100, System.Windows.Point);
	System.Windows.Media.Animation.PointAnimation.ToProperty = System.Windows.DependencyProperty.RegisterCoreProperty(15101, System.Windows.Point);
	System.Windows.Media.Animation.PointAnimation.ByProperty = System.Windows.DependencyProperty.RegisterCoreProperty(15102, System.Windows.Point);
	System.Windows.Media.Animation.PointAnimation.EasingFunctionProperty = System.Windows.DependencyProperty.RegisterCoreProperty(15103, System.Windows.Media.Animation.IEasingFunction);
};

System.Windows.Media.Animation.KeySpline.prototype._ctor = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 70);
};
System.Windows.Media.Animation.KeySpline.prototype.get_ControlPoint1 = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Animation.KeySpline.ControlPoint1Property), System.Windows.Point);
};
System.Windows.Media.Animation.KeySpline.prototype.set_ControlPoint1 = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Animation.KeySpline.ControlPoint1Property, value);
};
System.Windows.Media.Animation.KeySpline.prototype.get_ControlPoint2 = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Animation.KeySpline.ControlPoint2Property), System.Windows.Point);
};
System.Windows.Media.Animation.KeySpline.prototype.set_ControlPoint2 = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Animation.KeySpline.ControlPoint2Property, value);
};
JSIL.MakeProperty(System.Windows.Media.Animation.KeySpline.prototype, "ControlPoint1", 
	System.Windows.Media.Animation.KeySpline.prototype.get_ControlPoint1, System.Windows.Media.Animation.KeySpline.prototype.set_ControlPoint1);
JSIL.MakeProperty(System.Windows.Media.Animation.KeySpline.prototype, "ControlPoint2", 
	System.Windows.Media.Animation.KeySpline.prototype.get_ControlPoint2, System.Windows.Media.Animation.KeySpline.prototype.set_ControlPoint2);
System.Windows.Media.Animation.KeySpline.ControlPoint1Property = null;
System.Windows.Media.Animation.KeySpline.ControlPoint2Property = null;
System.Windows.Media.Animation.KeySpline._cctor = function () {
	System.Windows.Media.Animation.KeySpline.ControlPoint1Property = System.Windows.DependencyProperty.RegisterCoreProperty(16801, System.Windows.Point);
	System.Windows.Media.Animation.KeySpline.ControlPoint2Property = System.Windows.DependencyProperty.RegisterCoreProperty(16802, System.Windows.Point);
};

System.Windows.Media.Animation.ColorKeyFrameCollection.prototype._ctor = function () {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.Animation.ColorKeyFrame).prototype._ctor$1.call(this, 156);
};
System.Windows.Media.Animation.ColorKeyFrameCollection.prototype.AddInternal = function (value) {
	this.AddDependencyObject(value);
};
System.Windows.Media.Animation.ColorKeyFrameCollection.prototype.ContainsInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.Animation.ColorKeyFrame).prototype.ContainsDependencyObject.call(this, value);
};
System.Windows.Media.Animation.ColorKeyFrameCollection.prototype.IndexOfInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.Animation.ColorKeyFrame).prototype.IndexOfDependencyObject.call(this, value);
};
System.Windows.Media.Animation.ColorKeyFrameCollection.prototype.InsertInternal = function (index, value) {
	this.InsertDependencyObject(index, value);
};
System.Windows.Media.Animation.ColorKeyFrameCollection.prototype.RemoveInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.Animation.ColorKeyFrame).prototype.RemoveDependencyObject.call(this, value);
};
System.Windows.Media.Animation.ColorKeyFrameCollection.prototype.GetItemImplSkipMethodPack = function (index) {
	return JSIL.TryCast(System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.Animation.ColorKeyFrame).prototype.GetItemDependencyObject.call(this, index), System.Windows.Media.Animation.ColorKeyFrame);
};
System.Windows.Media.Animation.ColorKeyFrameCollection.prototype.SetItemImplSkipMethodPack = function (index, value) {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.Animation.ColorKeyFrame).prototype.SetItemDependencyObject.call(this, index, value);
};

System.Windows.Media.Animation.DoubleKeyFrameCollection.prototype._ctor = function () {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.Animation.DoubleKeyFrame).prototype._ctor$1.call(this, 157);
};
System.Windows.Media.Animation.DoubleKeyFrameCollection.prototype.AddInternal = function (value) {
	this.AddDependencyObject(value);
};
System.Windows.Media.Animation.DoubleKeyFrameCollection.prototype.ContainsInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.Animation.DoubleKeyFrame).prototype.ContainsDependencyObject.call(this, value);
};
System.Windows.Media.Animation.DoubleKeyFrameCollection.prototype.IndexOfInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.Animation.DoubleKeyFrame).prototype.IndexOfDependencyObject.call(this, value);
};
System.Windows.Media.Animation.DoubleKeyFrameCollection.prototype.InsertInternal = function (index, value) {
	this.InsertDependencyObject(index, value);
};
System.Windows.Media.Animation.DoubleKeyFrameCollection.prototype.RemoveInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.Animation.DoubleKeyFrame).prototype.RemoveDependencyObject.call(this, value);
};
System.Windows.Media.Animation.DoubleKeyFrameCollection.prototype.GetItemImplSkipMethodPack = function (index) {
	return JSIL.TryCast(System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.Animation.DoubleKeyFrame).prototype.GetItemDependencyObject.call(this, index), System.Windows.Media.Animation.DoubleKeyFrame);
};
System.Windows.Media.Animation.DoubleKeyFrameCollection.prototype.SetItemImplSkipMethodPack = function (index, value) {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.Animation.DoubleKeyFrame).prototype.SetItemDependencyObject.call(this, index, value);
};

System.Windows.Media.Animation.PointKeyFrameCollection.prototype._ctor = function () {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.Animation.PointKeyFrame).prototype._ctor$1.call(this, 71);
};
System.Windows.Media.Animation.PointKeyFrameCollection.prototype.AddInternal = function (value) {
	this.AddDependencyObject(value);
};
System.Windows.Media.Animation.PointKeyFrameCollection.prototype.ContainsInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.Animation.PointKeyFrame).prototype.ContainsDependencyObject.call(this, value);
};
System.Windows.Media.Animation.PointKeyFrameCollection.prototype.IndexOfInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.Animation.PointKeyFrame).prototype.IndexOfDependencyObject.call(this, value);
};
System.Windows.Media.Animation.PointKeyFrameCollection.prototype.InsertInternal = function (index, value) {
	this.InsertDependencyObject(index, value);
};
System.Windows.Media.Animation.PointKeyFrameCollection.prototype.RemoveInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.Animation.PointKeyFrame).prototype.RemoveDependencyObject.call(this, value);
};
System.Windows.Media.Animation.PointKeyFrameCollection.prototype.GetItemImplSkipMethodPack = function (index) {
	return JSIL.TryCast(System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.Animation.PointKeyFrame).prototype.GetItemDependencyObject.call(this, index), System.Windows.Media.Animation.PointKeyFrame);
};
System.Windows.Media.Animation.PointKeyFrameCollection.prototype.SetItemImplSkipMethodPack = function (index, value) {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.Animation.PointKeyFrame).prototype.SetItemDependencyObject.call(this, index, value);
};

System.Windows.Media.Animation.ObjectKeyFrameCollection.prototype._ctor = function () {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.Animation.ObjectKeyFrame).prototype._ctor$1.call(this, 223);
};
System.Windows.Media.Animation.ObjectKeyFrameCollection.prototype.AddInternal = function (value) {
	this.AddDependencyObject(value);
};
System.Windows.Media.Animation.ObjectKeyFrameCollection.prototype.ContainsInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.Animation.ObjectKeyFrame).prototype.ContainsDependencyObject.call(this, value);
};
System.Windows.Media.Animation.ObjectKeyFrameCollection.prototype.IndexOfInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.Animation.ObjectKeyFrame).prototype.IndexOfDependencyObject.call(this, value);
};
System.Windows.Media.Animation.ObjectKeyFrameCollection.prototype.InsertInternal = function (index, value) {
	this.InsertDependencyObject(index, value);
};
System.Windows.Media.Animation.ObjectKeyFrameCollection.prototype.RemoveInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.Animation.ObjectKeyFrame).prototype.RemoveDependencyObject.call(this, value);
};
System.Windows.Media.Animation.ObjectKeyFrameCollection.prototype.GetItemImplSkipMethodPack = function (index) {
	return JSIL.TryCast(System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.Animation.ObjectKeyFrame).prototype.GetItemDependencyObject.call(this, index), System.Windows.Media.Animation.ObjectKeyFrame);
};
System.Windows.Media.Animation.ObjectKeyFrameCollection.prototype.SetItemImplSkipMethodPack = function (index, value) {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.Animation.ObjectKeyFrame).prototype.SetItemDependencyObject.call(this, index, value);
};

System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames.prototype._ctor = function () {
	System.Windows.Media.Animation.Timeline.prototype._ctor$1.call(this, 72);
};
System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames.prototype.get_KeyFrames = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames.KeyFramesProperty), System.Windows.Media.Animation.DoubleKeyFrameCollection);
};
JSIL.MakeProperty(System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames.prototype, "KeyFrames", 
	System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames.prototype.get_KeyFrames, null);
System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames.KeyFramesProperty = null;
System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames._cctor = function () {
	System.Windows.Media.Animation.DoubleAnimationUsingKeyFrames.KeyFramesProperty = System.Windows.DependencyProperty.RegisterCoreProperty(16000, System.Windows.Media.Animation.DoubleKeyFrameCollection);
};

System.Windows.Media.Animation.DoubleKeyFrame.prototype._ctor$0 = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 73);
};
System.Windows.Media.Animation.DoubleKeyFrame.prototype._ctor$1 = function (nKnownTypeIndex) {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, nKnownTypeIndex);
};
System.Windows.Media.Animation.DoubleKeyFrame.prototype.get_Value = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Animation.DoubleKeyFrame.ValueProperty), System.Double);
};
System.Windows.Media.Animation.DoubleKeyFrame.prototype.set_Value = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Animation.DoubleKeyFrame.ValueProperty, value);
};
System.Windows.Media.Animation.DoubleKeyFrame.prototype.get_KeyTime = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Animation.DoubleKeyFrame.KeyTimeProperty), System.Windows.Media.Animation.KeyTime);
};
System.Windows.Media.Animation.DoubleKeyFrame.prototype.set_KeyTime = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Animation.DoubleKeyFrame.KeyTimeProperty, value.MemberwiseClone());
};
JSIL.OverloadedMethod(System.Windows.Media.Animation.DoubleKeyFrame.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);
JSIL.MakeProperty(System.Windows.Media.Animation.DoubleKeyFrame.prototype, "Value", 
	System.Windows.Media.Animation.DoubleKeyFrame.prototype.get_Value, System.Windows.Media.Animation.DoubleKeyFrame.prototype.set_Value);
JSIL.MakeProperty(System.Windows.Media.Animation.DoubleKeyFrame.prototype, "KeyTime", 
	System.Windows.Media.Animation.DoubleKeyFrame.prototype.get_KeyTime, System.Windows.Media.Animation.DoubleKeyFrame.prototype.set_KeyTime);
System.Windows.Media.Animation.DoubleKeyFrame.ValueProperty = null;
System.Windows.Media.Animation.DoubleKeyFrame.KeyTimeProperty = null;
System.Windows.Media.Animation.DoubleKeyFrame._cctor = function () {
	System.Windows.Media.Animation.DoubleKeyFrame.ValueProperty = System.Windows.DependencyProperty.RegisterCoreProperty(16001, System.Double);
	System.Windows.Media.Animation.DoubleKeyFrame.KeyTimeProperty = System.Windows.DependencyProperty.RegisterCoreProperty(15200, System.Windows.Media.Animation.KeyTime);
};

System.Windows.Media.Animation.DiscreteDoubleKeyFrame.prototype._ctor = function () {
	System.Windows.Media.Animation.DoubleKeyFrame.prototype._ctor$1.call(this, 74);
};

System.Windows.Media.Animation.LinearDoubleKeyFrame.prototype._ctor = function () {
	System.Windows.Media.Animation.DoubleKeyFrame.prototype._ctor$1.call(this, 75);
};

System.Windows.Media.Animation.SplineDoubleKeyFrame.prototype._ctor = function () {
	System.Windows.Media.Animation.DoubleKeyFrame.prototype._ctor$1.call(this, 76);
};
System.Windows.Media.Animation.SplineDoubleKeyFrame.prototype.get_KeySpline = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Animation.SplineDoubleKeyFrame.KeySplineProperty), System.Windows.Media.Animation.KeySpline);
};
System.Windows.Media.Animation.SplineDoubleKeyFrame.prototype.set_KeySpline = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Animation.SplineDoubleKeyFrame.KeySplineProperty, value);
};
JSIL.MakeProperty(System.Windows.Media.Animation.SplineDoubleKeyFrame.prototype, "KeySpline", 
	System.Windows.Media.Animation.SplineDoubleKeyFrame.prototype.get_KeySpline, System.Windows.Media.Animation.SplineDoubleKeyFrame.prototype.set_KeySpline);
System.Windows.Media.Animation.SplineDoubleKeyFrame.KeySplineProperty = null;
System.Windows.Media.Animation.SplineDoubleKeyFrame._cctor = function () {
	System.Windows.Media.Animation.SplineDoubleKeyFrame.KeySplineProperty = System.Windows.DependencyProperty.RegisterCoreProperty(16002, System.Windows.Media.Animation.KeySpline);
};

System.Windows.Media.Animation.EasingDoubleKeyFrame.prototype._ctor = function () {
	System.Windows.Media.Animation.DoubleKeyFrame.prototype._ctor$1.call(this, 297);
};
System.Windows.Media.Animation.EasingDoubleKeyFrame.prototype.get_EasingFunction = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Animation.EasingDoubleKeyFrame.EasingFunctionProperty), System.Windows.Media.Animation.IEasingFunction);
};
System.Windows.Media.Animation.EasingDoubleKeyFrame.prototype.set_EasingFunction = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Animation.EasingDoubleKeyFrame.EasingFunctionProperty, value);
};
JSIL.MakeProperty(System.Windows.Media.Animation.EasingDoubleKeyFrame.prototype, "EasingFunction", 
	System.Windows.Media.Animation.EasingDoubleKeyFrame.prototype.get_EasingFunction, System.Windows.Media.Animation.EasingDoubleKeyFrame.prototype.set_EasingFunction);
Object.defineProperty(System.Windows.Media.Animation.EasingDoubleKeyFrame, "EasingFunctionPropertyID", {
		"value": 16003}
);
System.Windows.Media.Animation.EasingDoubleKeyFrame.EasingFunctionProperty = null;
System.Windows.Media.Animation.EasingDoubleKeyFrame._cctor = function () {
	System.Windows.Media.Animation.EasingDoubleKeyFrame.EasingFunctionProperty = System.Windows.DependencyProperty.RegisterCoreProperty(16003, System.Windows.Media.Animation.IEasingFunction);
};

System.Windows.Media.Animation.ColorAnimationUsingKeyFrames.prototype._ctor = function () {
	System.Windows.Media.Animation.Timeline.prototype._ctor$1.call(this, 77);
};
System.Windows.Media.Animation.ColorAnimationUsingKeyFrames.prototype.get_KeyFrames = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Animation.ColorAnimationUsingKeyFrames.KeyFramesProperty), System.Windows.Media.Animation.ColorKeyFrameCollection);
};
JSIL.MakeProperty(System.Windows.Media.Animation.ColorAnimationUsingKeyFrames.prototype, "KeyFrames", 
	System.Windows.Media.Animation.ColorAnimationUsingKeyFrames.prototype.get_KeyFrames, null);
System.Windows.Media.Animation.ColorAnimationUsingKeyFrames.KeyFramesProperty = null;
System.Windows.Media.Animation.ColorAnimationUsingKeyFrames._cctor = function () {
	System.Windows.Media.Animation.ColorAnimationUsingKeyFrames.KeyFramesProperty = System.Windows.DependencyProperty.RegisterCoreProperty(16010, System.Windows.Media.Animation.ColorKeyFrameCollection);
};

System.Windows.Media.Animation.ColorKeyFrame.prototype._ctor$0 = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 78);
};
System.Windows.Media.Animation.ColorKeyFrame.prototype._ctor$1 = function (nKnownTypeIndex) {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, nKnownTypeIndex);
};
System.Windows.Media.Animation.ColorKeyFrame.prototype.get_Value = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Animation.ColorKeyFrame.ValueProperty), System.Windows.Media.Color);
};
System.Windows.Media.Animation.ColorKeyFrame.prototype.set_Value = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Animation.ColorKeyFrame.ValueProperty, value);
};
System.Windows.Media.Animation.ColorKeyFrame.prototype.get_KeyTime = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Animation.ColorKeyFrame.KeyTimeProperty), System.Windows.Media.Animation.KeyTime);
};
System.Windows.Media.Animation.ColorKeyFrame.prototype.set_KeyTime = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Animation.ColorKeyFrame.KeyTimeProperty, value.MemberwiseClone());
};
JSIL.OverloadedMethod(System.Windows.Media.Animation.ColorKeyFrame.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);
JSIL.MakeProperty(System.Windows.Media.Animation.ColorKeyFrame.prototype, "Value", 
	System.Windows.Media.Animation.ColorKeyFrame.prototype.get_Value, System.Windows.Media.Animation.ColorKeyFrame.prototype.set_Value);
JSIL.MakeProperty(System.Windows.Media.Animation.ColorKeyFrame.prototype, "KeyTime", 
	System.Windows.Media.Animation.ColorKeyFrame.prototype.get_KeyTime, System.Windows.Media.Animation.ColorKeyFrame.prototype.set_KeyTime);
System.Windows.Media.Animation.ColorKeyFrame.ValueProperty = null;
System.Windows.Media.Animation.ColorKeyFrame.KeyTimeProperty = null;
System.Windows.Media.Animation.ColorKeyFrame._cctor = function () {
	System.Windows.Media.Animation.ColorKeyFrame.ValueProperty = System.Windows.DependencyProperty.RegisterCoreProperty(16011, System.Windows.Media.Color);
	System.Windows.Media.Animation.ColorKeyFrame.KeyTimeProperty = System.Windows.DependencyProperty.RegisterCoreProperty(15201, System.Windows.Media.Animation.KeyTime);
};

System.Windows.Media.Animation.DiscreteColorKeyFrame.prototype._ctor = function () {
	System.Windows.Media.Animation.ColorKeyFrame.prototype._ctor$1.call(this, 79);
};

System.Windows.Media.Animation.LinearColorKeyFrame.prototype._ctor = function () {
	System.Windows.Media.Animation.ColorKeyFrame.prototype._ctor$1.call(this, 80);
};

System.Windows.Media.Animation.SplineColorKeyFrame.prototype._ctor = function () {
	System.Windows.Media.Animation.ColorKeyFrame.prototype._ctor$1.call(this, 81);
};
System.Windows.Media.Animation.SplineColorKeyFrame.prototype.get_KeySpline = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Animation.SplineColorKeyFrame.KeySplineProperty), System.Windows.Media.Animation.KeySpline);
};
System.Windows.Media.Animation.SplineColorKeyFrame.prototype.set_KeySpline = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Animation.SplineColorKeyFrame.KeySplineProperty, value);
};
JSIL.MakeProperty(System.Windows.Media.Animation.SplineColorKeyFrame.prototype, "KeySpline", 
	System.Windows.Media.Animation.SplineColorKeyFrame.prototype.get_KeySpline, System.Windows.Media.Animation.SplineColorKeyFrame.prototype.set_KeySpline);
System.Windows.Media.Animation.SplineColorKeyFrame.KeySplineProperty = null;
System.Windows.Media.Animation.SplineColorKeyFrame._cctor = function () {
	System.Windows.Media.Animation.SplineColorKeyFrame.KeySplineProperty = System.Windows.DependencyProperty.RegisterCoreProperty(16012, System.Windows.Media.Animation.KeySpline);
};

System.Windows.Media.Animation.EasingColorKeyFrame.prototype._ctor = function () {
	System.Windows.Media.Animation.ColorKeyFrame.prototype._ctor$1.call(this, 298);
};
System.Windows.Media.Animation.EasingColorKeyFrame.prototype.get_EasingFunction = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Animation.EasingColorKeyFrame.EasingFunctionProperty), System.Windows.Media.Animation.IEasingFunction);
};
System.Windows.Media.Animation.EasingColorKeyFrame.prototype.set_EasingFunction = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Animation.EasingColorKeyFrame.EasingFunctionProperty, value);
};
JSIL.MakeProperty(System.Windows.Media.Animation.EasingColorKeyFrame.prototype, "EasingFunction", 
	System.Windows.Media.Animation.EasingColorKeyFrame.prototype.get_EasingFunction, System.Windows.Media.Animation.EasingColorKeyFrame.prototype.set_EasingFunction);
Object.defineProperty(System.Windows.Media.Animation.EasingColorKeyFrame, "EasingFunctionPropertyID", {
		"value": 16013}
);
System.Windows.Media.Animation.EasingColorKeyFrame.EasingFunctionProperty = null;
System.Windows.Media.Animation.EasingColorKeyFrame._cctor = function () {
	System.Windows.Media.Animation.EasingColorKeyFrame.EasingFunctionProperty = System.Windows.DependencyProperty.RegisterCoreProperty(16013, System.Windows.Media.Animation.IEasingFunction);
};

System.Windows.Media.Animation.PointAnimationUsingKeyFrames.prototype._ctor = function () {
	System.Windows.Media.Animation.Timeline.prototype._ctor$1.call(this, 82);
};
System.Windows.Media.Animation.PointAnimationUsingKeyFrames.prototype.get_KeyFrames = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Animation.PointAnimationUsingKeyFrames.KeyFramesProperty), System.Windows.Media.Animation.PointKeyFrameCollection);
};
JSIL.MakeProperty(System.Windows.Media.Animation.PointAnimationUsingKeyFrames.prototype, "KeyFrames", 
	System.Windows.Media.Animation.PointAnimationUsingKeyFrames.prototype.get_KeyFrames, null);
System.Windows.Media.Animation.PointAnimationUsingKeyFrames.KeyFramesProperty = null;
System.Windows.Media.Animation.PointAnimationUsingKeyFrames._cctor = function () {
	System.Windows.Media.Animation.PointAnimationUsingKeyFrames.KeyFramesProperty = System.Windows.DependencyProperty.RegisterCoreProperty(16020, System.Windows.Media.Animation.PointKeyFrameCollection);
};

System.Windows.Media.Animation.PointKeyFrame.prototype._ctor$0 = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 83);
};
System.Windows.Media.Animation.PointKeyFrame.prototype._ctor$1 = function (nKnownTypeIndex) {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, nKnownTypeIndex);
};
System.Windows.Media.Animation.PointKeyFrame.prototype.get_Value = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Animation.PointKeyFrame.ValueProperty), System.Windows.Point);
};
System.Windows.Media.Animation.PointKeyFrame.prototype.set_Value = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Animation.PointKeyFrame.ValueProperty, value);
};
System.Windows.Media.Animation.PointKeyFrame.prototype.get_KeyTime = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Animation.PointKeyFrame.KeyTimeProperty), System.Windows.Media.Animation.KeyTime);
};
System.Windows.Media.Animation.PointKeyFrame.prototype.set_KeyTime = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Animation.PointKeyFrame.KeyTimeProperty, value.MemberwiseClone());
};
JSIL.OverloadedMethod(System.Windows.Media.Animation.PointKeyFrame.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);
JSIL.MakeProperty(System.Windows.Media.Animation.PointKeyFrame.prototype, "Value", 
	System.Windows.Media.Animation.PointKeyFrame.prototype.get_Value, System.Windows.Media.Animation.PointKeyFrame.prototype.set_Value);
JSIL.MakeProperty(System.Windows.Media.Animation.PointKeyFrame.prototype, "KeyTime", 
	System.Windows.Media.Animation.PointKeyFrame.prototype.get_KeyTime, System.Windows.Media.Animation.PointKeyFrame.prototype.set_KeyTime);
System.Windows.Media.Animation.PointKeyFrame.ValueProperty = null;
System.Windows.Media.Animation.PointKeyFrame.KeyTimeProperty = null;
System.Windows.Media.Animation.PointKeyFrame._cctor = function () {
	System.Windows.Media.Animation.PointKeyFrame.ValueProperty = System.Windows.DependencyProperty.RegisterCoreProperty(16021, System.Windows.Point);
	System.Windows.Media.Animation.PointKeyFrame.KeyTimeProperty = System.Windows.DependencyProperty.RegisterCoreProperty(15202, System.Windows.Media.Animation.KeyTime);
};

System.Windows.Media.Animation.DiscretePointKeyFrame.prototype._ctor = function () {
	System.Windows.Media.Animation.PointKeyFrame.prototype._ctor$1.call(this, 84);
};

System.Windows.Media.Animation.LinearPointKeyFrame.prototype._ctor = function () {
	System.Windows.Media.Animation.PointKeyFrame.prototype._ctor$1.call(this, 85);
};

System.Windows.Media.Animation.SplinePointKeyFrame.prototype._ctor = function () {
	System.Windows.Media.Animation.PointKeyFrame.prototype._ctor$1.call(this, 86);
};
System.Windows.Media.Animation.SplinePointKeyFrame.prototype.get_KeySpline = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Animation.SplinePointKeyFrame.KeySplineProperty), System.Windows.Media.Animation.KeySpline);
};
System.Windows.Media.Animation.SplinePointKeyFrame.prototype.set_KeySpline = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Animation.SplinePointKeyFrame.KeySplineProperty, value);
};
JSIL.MakeProperty(System.Windows.Media.Animation.SplinePointKeyFrame.prototype, "KeySpline", 
	System.Windows.Media.Animation.SplinePointKeyFrame.prototype.get_KeySpline, System.Windows.Media.Animation.SplinePointKeyFrame.prototype.set_KeySpline);
System.Windows.Media.Animation.SplinePointKeyFrame.KeySplineProperty = null;
System.Windows.Media.Animation.SplinePointKeyFrame._cctor = function () {
	System.Windows.Media.Animation.SplinePointKeyFrame.KeySplineProperty = System.Windows.DependencyProperty.RegisterCoreProperty(16022, System.Windows.Media.Animation.KeySpline);
};

System.Windows.Media.Animation.EasingPointKeyFrame.prototype._ctor = function () {
	System.Windows.Media.Animation.PointKeyFrame.prototype._ctor$1.call(this, 299);
};
System.Windows.Media.Animation.EasingPointKeyFrame.prototype.get_EasingFunction = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Animation.EasingPointKeyFrame.EasingFunctionProperty), System.Windows.Media.Animation.IEasingFunction);
};
System.Windows.Media.Animation.EasingPointKeyFrame.prototype.set_EasingFunction = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Animation.EasingPointKeyFrame.EasingFunctionProperty, value);
};
JSIL.MakeProperty(System.Windows.Media.Animation.EasingPointKeyFrame.prototype, "EasingFunction", 
	System.Windows.Media.Animation.EasingPointKeyFrame.prototype.get_EasingFunction, System.Windows.Media.Animation.EasingPointKeyFrame.prototype.set_EasingFunction);
Object.defineProperty(System.Windows.Media.Animation.EasingPointKeyFrame, "EasingFunctionPropertyID", {
		"value": 16023}
);
System.Windows.Media.Animation.EasingPointKeyFrame.EasingFunctionProperty = null;
System.Windows.Media.Animation.EasingPointKeyFrame._cctor = function () {
	System.Windows.Media.Animation.EasingPointKeyFrame.EasingFunctionProperty = System.Windows.DependencyProperty.RegisterCoreProperty(16023, System.Windows.Media.Animation.IEasingFunction);
};

System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames.prototype._ctor = function () {
	System.Windows.Media.Animation.Timeline.prototype._ctor$1.call(this, 220);
};
System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames.prototype.get_KeyFrames = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames.KeyFramesProperty), System.Windows.Media.Animation.ObjectKeyFrameCollection);
};
JSIL.MakeProperty(System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames.prototype, "KeyFrames", 
	System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames.prototype.get_KeyFrames, null);
System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames.KeyFramesProperty = null;
System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames._cctor = function () {
	System.Windows.Media.Animation.ObjectAnimationUsingKeyFrames.KeyFramesProperty = System.Windows.DependencyProperty.RegisterCoreProperty(16850, System.Windows.Media.Animation.ObjectKeyFrameCollection);
};

System.Windows.Media.Animation.ObjectKeyFrame.prototype._ctor$0 = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 221);
};
System.Windows.Media.Animation.ObjectKeyFrame.prototype._ctor$1 = function (nKnownTypeIndex) {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, nKnownTypeIndex);
};
System.Windows.Media.Animation.ObjectKeyFrame.prototype.get_KeyTime = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Animation.ObjectKeyFrame.KeyTimeProperty), System.Windows.Media.Animation.KeyTime);
};
System.Windows.Media.Animation.ObjectKeyFrame.prototype.set_KeyTime = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Animation.ObjectKeyFrame.KeyTimeProperty, value.MemberwiseClone());
};
System.Windows.Media.Animation.ObjectKeyFrame.prototype.get_Value = function () {
	return System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Animation.ObjectKeyFrame.ValueProperty);
};
System.Windows.Media.Animation.ObjectKeyFrame.prototype.set_Value = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Animation.ObjectKeyFrame.ValueProperty, value);
};
JSIL.OverloadedMethod(System.Windows.Media.Animation.ObjectKeyFrame.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);
JSIL.MakeProperty(System.Windows.Media.Animation.ObjectKeyFrame.prototype, "KeyTime", 
	System.Windows.Media.Animation.ObjectKeyFrame.prototype.get_KeyTime, System.Windows.Media.Animation.ObjectKeyFrame.prototype.set_KeyTime);
JSIL.MakeProperty(System.Windows.Media.Animation.ObjectKeyFrame.prototype, "Value", 
	System.Windows.Media.Animation.ObjectKeyFrame.prototype.get_Value, System.Windows.Media.Animation.ObjectKeyFrame.prototype.set_Value);
Object.defineProperty(System.Windows.Media.Animation.ObjectKeyFrame, "ValuePropertyID", {
		"value": 16851}
);
System.Windows.Media.Animation.ObjectKeyFrame.KeyTimeProperty = null;
System.Windows.Media.Animation.ObjectKeyFrame.ValueProperty = null;
System.Windows.Media.Animation.ObjectKeyFrame._cctor = function () {
	System.Windows.Media.Animation.ObjectKeyFrame.KeyTimeProperty = System.Windows.DependencyProperty.RegisterCoreProperty(15203, System.Windows.Media.Animation.KeyTime);
	System.Windows.Media.Animation.ObjectKeyFrame.ValueProperty = System.Windows.DependencyProperty.RegisterCoreProperty(16851, System.Object);
};

System.Windows.Media.Animation.DiscreteObjectKeyFrame.prototype._ctor = function () {
	System.Windows.Media.Animation.ObjectKeyFrame.prototype._ctor$1.call(this, 222);
};

System.Windows.Media.Animation.TimelineCollection.prototype._ctor = function () {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.Animation.Timeline).prototype._ctor$1.call(this, 43);
};
System.Windows.Media.Animation.TimelineCollection.prototype.AddInternal = function (value) {
	this.AddDependencyObject(value);
};
System.Windows.Media.Animation.TimelineCollection.prototype.ContainsInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.Animation.Timeline).prototype.ContainsDependencyObject.call(this, value);
};
System.Windows.Media.Animation.TimelineCollection.prototype.IndexOfInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.Animation.Timeline).prototype.IndexOfDependencyObject.call(this, value);
};
System.Windows.Media.Animation.TimelineCollection.prototype.InsertInternal = function (index, value) {
	this.InsertDependencyObject(index, value);
};
System.Windows.Media.Animation.TimelineCollection.prototype.RemoveInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.Animation.Timeline).prototype.RemoveDependencyObject.call(this, value);
};
System.Windows.Media.Animation.TimelineCollection.prototype.GetItemImplSkipMethodPack = function (index) {
	return JSIL.TryCast(System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.Animation.Timeline).prototype.GetItemDependencyObject.call(this, index), System.Windows.Media.Animation.Timeline);
};
System.Windows.Media.Animation.TimelineCollection.prototype.SetItemImplSkipMethodPack = function (index, value) {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Media.Animation.Timeline).prototype.SetItemDependencyObject.call(this, index, value);
};

System.Windows.Input.StylusPointCollection.prototype._ctor = function () {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Input.StylusPoint).prototype._ctor$1.call(this, 139);
};
System.Windows.Input.StylusPointCollection.prototype.AddInternal = function (value) {
	this.AddImpl(value.MemberwiseClone());
};
System.Windows.Input.StylusPointCollection.prototype.ContainsInternal = function (value) {
	return this.ContainsImpl(value.MemberwiseClone());
};
System.Windows.Input.StylusPointCollection.prototype.IndexOfInternal = function (value) {
	return this.IndexOfImpl(value.MemberwiseClone());
};
System.Windows.Input.StylusPointCollection.prototype.InsertInternal = function (index, value) {
	this.InsertImpl(index, value.MemberwiseClone());
};
System.Windows.Input.StylusPointCollection.prototype.RemoveInternal = function (value) {
	return this.RemoveImpl(value.MemberwiseClone());
};
System.Windows.Input.StylusPointCollection.prototype.GetItemImplSkipMethodPack = function (index) {
	return this.GetItemImpl(index);
};
System.Windows.Input.StylusPointCollection.prototype.SetItemImplSkipMethodPack = function (index, value) {
	this.SetItemImpl(index, value.MemberwiseClone());
};
System.Windows.Input.StylusPointCollection.prototype.Add = function (stylusPoints) {
	$asm02.MS.Internal.XcpImports.StylusPointCollection_AddStylusPoints(this, stylusPoints);
};
System.Windows.Input.StylusPointCollection.prototype.AddImpl = function (value) {
	++this._version;
	return $asm02.MS.Internal.XcpImports.StylusPointCollection_AddItem(this, JSIL.Cast(value, System.Windows.Input.StylusPoint).MemberwiseClone());
};
System.Windows.Input.StylusPointCollection.prototype.GetItemImpl = function (index) {
	return $asm02.MS.Internal.XcpImports.StylusPointCollection_GetItem(this, index);
};
System.Windows.Input.StylusPointCollection.prototype.InsertImpl = function (index, value) {
	++this._version;
	$asm02.MS.Internal.XcpImports.StylusPointCollection_InsertItem(this, index, JSIL.Cast(value, System.Windows.Input.StylusPoint).MemberwiseClone());
};
System.Windows.Input.StylusPointCollection.prototype.IndexOfImpl = function (value) {
	return $asm02.MS.Internal.XcpImports.StylusPointCollection_IndexOfItem(this, JSIL.Cast(value, System.Windows.Input.StylusPoint).MemberwiseClone());
};
System.Windows.Input.StylusPointCollection.prototype.RemoveImpl = function (value) {
	$asm02.MS.Internal.XcpImports.StylusPointCollection_RemoveItem(this, JSIL.Cast(value, System.Windows.Input.StylusPoint).MemberwiseClone());
	++this._version;
	return true;
};

System.Windows.Input.MouseEventArgs.prototype._ctor = function () {
	System.Windows.RoutedEventArgs.prototype._ctor.call(this);
};
System.Windows.Input.MouseEventArgs.prototype.CheckPtr = function () {
	if (this.m_objectPtr === null) {
		System.Windows.RoutedEventArgs.prototype.SetPtr.call(this, 0);
	}
};
System.Windows.Input.MouseEventArgs.prototype.GetPosition = function (relativeTo) {
	this.CheckPtr();
	return $asm02.MS.Internal.XcpImports.MouseEventArgs_GetPosition(this, relativeTo);
};
System.Windows.Input.MouseEventArgs.prototype.get_StylusDevice = function () {
	return new System.Windows.Input.StylusDevice(this.m_objectPtr);
};
JSIL.MakeProperty(System.Windows.Input.MouseEventArgs.prototype, "StylusDevice", 
	System.Windows.Input.MouseEventArgs.prototype.get_StylusDevice, null);

System.Windows.Input.MouseButtonEventArgs.prototype._ctor = function () {
	System.Windows.Input.MouseEventArgs.prototype._ctor.call(this);
};
System.Windows.Input.MouseButtonEventArgs.prototype.CheckPtr = function () {
	if (this.m_objectPtr === null) {
		System.Windows.RoutedEventArgs.prototype.SetPtr.call(this, 0);
	}
};
System.Windows.Input.MouseButtonEventArgs.prototype.get_Handled = function () {
	this.CheckPtr();
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.Input.MouseButtonEventArgs.HandledProperty), System.Boolean);
};
System.Windows.Input.MouseButtonEventArgs.prototype.set_Handled = function (value) {
	this.CheckPtr();
	$asm02.MS.Internal.XcpImports.SetValue(this, System.Windows.Input.MouseButtonEventArgs.HandledProperty, value);
};
JSIL.MakeProperty(System.Windows.Input.MouseButtonEventArgs.prototype, "Handled", 
	System.Windows.Input.MouseButtonEventArgs.prototype.get_Handled, System.Windows.Input.MouseButtonEventArgs.prototype.set_Handled);
System.Windows.Input.MouseButtonEventArgs.HandledProperty = null;
System.Windows.Input.MouseButtonEventArgs._cctor = function () {
	System.Windows.Input.MouseButtonEventArgs.HandledProperty = System.Windows.DependencyProperty.RegisterCoreProperty(16913, System.Boolean);
};

System.Windows.Input.MouseWheelEventArgs.prototype._ctor = function () {
	System.Windows.Input.MouseEventArgs.prototype._ctor.call(this);
};
System.Windows.Input.MouseWheelEventArgs.prototype.CheckPtr = function () {
	if (this.m_objectPtr === null) {
		System.Windows.RoutedEventArgs.prototype.SetPtr.call(this, 0);
	}
};
System.Windows.Input.MouseWheelEventArgs.prototype.get_Delta = function () {
	this.CheckPtr();
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.Input.MouseWheelEventArgs.DeltaProperty), System.Int32);
};
System.Windows.Input.MouseWheelEventArgs.prototype.get_Handled = function () {
	this.CheckPtr();
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.Input.MouseWheelEventArgs.HandledProperty), System.Boolean);
};
System.Windows.Input.MouseWheelEventArgs.prototype.set_Handled = function (value) {
	this.CheckPtr();
	$asm02.MS.Internal.XcpImports.SetValue(this, System.Windows.Input.MouseWheelEventArgs.HandledProperty, value);
};
JSIL.MakeProperty(System.Windows.Input.MouseWheelEventArgs.prototype, "Delta", 
	System.Windows.Input.MouseWheelEventArgs.prototype.get_Delta, null);
JSIL.MakeProperty(System.Windows.Input.MouseWheelEventArgs.prototype, "Handled", 
	System.Windows.Input.MouseWheelEventArgs.prototype.get_Handled, System.Windows.Input.MouseWheelEventArgs.prototype.set_Handled);
System.Windows.Input.MouseWheelEventArgs.DeltaProperty = null;
System.Windows.Input.MouseWheelEventArgs.HandledProperty = null;
System.Windows.Input.MouseWheelEventArgs._cctor = function () {
	System.Windows.Input.MouseWheelEventArgs.DeltaProperty = System.Windows.DependencyProperty.RegisterCoreProperty(18301, System.Int32);
	System.Windows.Input.MouseWheelEventArgs.HandledProperty = System.Windows.DependencyProperty.RegisterCoreProperty(18302, System.Boolean);
};

System.Windows.Input.TouchFrameEventArgs.prototype._ctor = function () {
	System.EventArgs.prototype._ctor.call(this);
};
System.Windows.Input.TouchFrameEventArgs.prototype.SetPtr = function (ptr) {
	this.m_objectPtr = new $asm02.MS.Internal.NativeObjectSafeHandle();
	this.m_objectPtr.NativeObject = ptr;
};
System.Windows.Input.TouchFrameEventArgs.prototype.IManagedPeerBase_get_NativeObject = function () {
	this.CheckPtr();
	return this.m_objectPtr.NativeObject;
};
System.Windows.Input.TouchFrameEventArgs.prototype.CheckPtr = function () {
	if (this.m_objectPtr === null) {
		this.SetPtr(0);
	}
};
System.Windows.Input.TouchFrameEventArgs.prototype.get_Timestamp = function () {
	this.CheckPtr();
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.Input.TouchFrameEventArgs.TimestampProperty), System.Int32);
};
System.Windows.Input.TouchFrameEventArgs.prototype.SuspendMousePromotionUntilTouchUp = function () {
	this.CheckPtr();
	$asm02.MS.Internal.XcpImports.TouchFrameEventArgs_SuspendMousePromotionUntilTouchUp(this);
};
System.Windows.Input.TouchFrameEventArgs.prototype.GetTouchPoints = function (relativeTo) {
	this.CheckPtr();
	return $asm02.MS.Internal.XcpImports.TouchFrameEventArgs_GetTouchPoints(this, relativeTo);
};
System.Windows.Input.TouchFrameEventArgs.prototype.GetPrimaryTouchPoint = function (relativeTo) {
	this.CheckPtr();
	return $asm02.MS.Internal.XcpImports.TouchFrameEventArgs_GetPrimaryTouchPoint(this, relativeTo);
};
JSIL.MakeProperty(System.Windows.Input.TouchFrameEventArgs.prototype, "IManagedPeerBase_NativeObject", 
	System.Windows.Input.TouchFrameEventArgs.prototype.IManagedPeerBase_get_NativeObject, null);
JSIL.MakeProperty(System.Windows.Input.TouchFrameEventArgs.prototype, "Timestamp", 
	System.Windows.Input.TouchFrameEventArgs.prototype.get_Timestamp, null);
System.Windows.Input.TouchFrameEventArgs.prototype.m_objectPtr = null;
System.Windows.Input.TouchFrameEventArgs.TimestampProperty = null;
System.Windows.Input.TouchFrameEventArgs._cctor = function () {
	System.Windows.Input.TouchFrameEventArgs.TimestampProperty = System.Windows.DependencyProperty.RegisterCoreProperty(22110, System.Int32);
};

System.Windows.Input.KeyEventArgs.prototype._ctor = function () {
	System.Windows.RoutedEventArgs.prototype._ctor.call(this);
};
System.Windows.Input.KeyEventArgs.prototype.CheckPtr = function () {
	if (this.m_objectPtr === null) {
		System.Windows.RoutedEventArgs.prototype.SetPtr.call(this, 0);
	}
};
System.Windows.Input.KeyEventArgs.prototype.get_PlatformKeyCode = function () {
	this.CheckPtr();
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.Input.KeyEventArgs.PlatformKeyCodeProperty), System.Int32);
};
System.Windows.Input.KeyEventArgs.prototype.get_Handled = function () {
	this.CheckPtr();
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.Input.KeyEventArgs.HandledProperty), System.Boolean);
};
System.Windows.Input.KeyEventArgs.prototype.set_Handled = function (value) {
	this.CheckPtr();
	$asm02.MS.Internal.XcpImports.SetValue(this, System.Windows.Input.KeyEventArgs.HandledProperty, value);
};
System.Windows.Input.KeyEventArgs.prototype.get_Key = function () {
	this.CheckPtr();
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.Input.KeyEventArgs.KeyProperty), System.Int32);
};
JSIL.MakeProperty(System.Windows.Input.KeyEventArgs.prototype, "PlatformKeyCode", 
	System.Windows.Input.KeyEventArgs.prototype.get_PlatformKeyCode, null);
JSIL.MakeProperty(System.Windows.Input.KeyEventArgs.prototype, "Handled", 
	System.Windows.Input.KeyEventArgs.prototype.get_Handled, System.Windows.Input.KeyEventArgs.prototype.set_Handled);
JSIL.MakeProperty(System.Windows.Input.KeyEventArgs.prototype, "Key", 
	System.Windows.Input.KeyEventArgs.prototype.get_Key, null);
System.Windows.Input.KeyEventArgs.PlatformKeyCodeProperty = null;
System.Windows.Input.KeyEventArgs.HandledProperty = null;
System.Windows.Input.KeyEventArgs.KeyProperty = null;
System.Windows.Input.KeyEventArgs._cctor = function () {
	System.Windows.Input.KeyEventArgs.PlatformKeyCodeProperty = System.Windows.DependencyProperty.RegisterCoreProperty(16903, System.Int32);
	System.Windows.Input.KeyEventArgs.HandledProperty = System.Windows.DependencyProperty.RegisterCoreProperty(16914, System.Boolean);
	System.Windows.Input.KeyEventArgs.KeyProperty = System.Windows.DependencyProperty.RegisterCoreProperty(16902, System.Windows.Input.Key);
};

System.Windows.Input.TextCompositionEventArgs.prototype._ctor = function () {
	System.Windows.RoutedEventArgs.prototype._ctor.call(this);
};
System.Windows.Input.TextCompositionEventArgs.prototype.CheckPtr = function () {
	if (this.m_objectPtr === null) {
		System.Windows.RoutedEventArgs.prototype.SetPtr.call(this, 0);
	}
};
System.Windows.Input.TextCompositionEventArgs.prototype.get_Text = function () {
	this.CheckPtr();
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.Input.TextCompositionEventArgs.TextProperty), System.String);
};
System.Windows.Input.TextCompositionEventArgs.prototype.get_Handled = function () {
	this.CheckPtr();
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.Input.TextCompositionEventArgs.HandledProperty), System.Boolean);
};
System.Windows.Input.TextCompositionEventArgs.prototype.set_Handled = function (value) {
	this.CheckPtr();
	$asm02.MS.Internal.XcpImports.SetValue(this, System.Windows.Input.TextCompositionEventArgs.HandledProperty, value);
};
System.Windows.Input.TextCompositionEventArgs.prototype.get_TextComposition = function () {
	this.CheckPtr();
	if (this._textComposition === null) {
		this._textComposition = new System.Windows.Input.TextComposition(JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.Input.TextCompositionEventArgs.CompositionTextProperty), System.String));
	}
	return this._textComposition;
};
JSIL.MakeProperty(System.Windows.Input.TextCompositionEventArgs.prototype, "Text", 
	System.Windows.Input.TextCompositionEventArgs.prototype.get_Text, null);
JSIL.MakeProperty(System.Windows.Input.TextCompositionEventArgs.prototype, "Handled", 
	System.Windows.Input.TextCompositionEventArgs.prototype.get_Handled, System.Windows.Input.TextCompositionEventArgs.prototype.set_Handled);
JSIL.MakeProperty(System.Windows.Input.TextCompositionEventArgs.prototype, "TextComposition", 
	System.Windows.Input.TextCompositionEventArgs.prototype.get_TextComposition, null);
System.Windows.Input.TextCompositionEventArgs.TextProperty = null;
System.Windows.Input.TextCompositionEventArgs.HandledProperty = null;
System.Windows.Input.TextCompositionEventArgs.CompositionTextProperty = null;
System.Windows.Input.TextCompositionEventArgs.prototype._textComposition = null;
System.Windows.Input.TextCompositionEventArgs._cctor = function () {
	System.Windows.Input.TextCompositionEventArgs.TextProperty = System.Windows.DependencyProperty.RegisterCoreProperty(22118, System.String);
	System.Windows.Input.TextCompositionEventArgs.HandledProperty = System.Windows.DependencyProperty.RegisterCoreProperty(22119, System.Boolean);
	System.Windows.Input.TextCompositionEventArgs.CompositionTextProperty = System.Windows.DependencyProperty.RegisterCoreProperty(22219, System.String);
};

System.Windows.Input.TouchPointCollection.prototype._ctor = function () {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Input.TouchPoint).prototype._ctor$1.call(this, 331);
};
System.Windows.Input.TouchPointCollection.prototype.AddInternal = function (value) {
	this.AddDependencyObject(value);
};
System.Windows.Input.TouchPointCollection.prototype.ContainsInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Input.TouchPoint).prototype.ContainsDependencyObject.call(this, value);
};
System.Windows.Input.TouchPointCollection.prototype.IndexOfInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Input.TouchPoint).prototype.IndexOfDependencyObject.call(this, value);
};
System.Windows.Input.TouchPointCollection.prototype.InsertInternal = function (index, value) {
	this.InsertDependencyObject(index, value);
};
System.Windows.Input.TouchPointCollection.prototype.RemoveInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Input.TouchPoint).prototype.RemoveDependencyObject.call(this, value);
};
System.Windows.Input.TouchPointCollection.prototype.GetItemImplSkipMethodPack = function (index) {
	return JSIL.TryCast(System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Input.TouchPoint).prototype.GetItemDependencyObject.call(this, index), System.Windows.Input.TouchPoint);
};
System.Windows.Input.TouchPointCollection.prototype.SetItemImplSkipMethodPack = function (index, value) {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Input.TouchPoint).prototype.SetItemDependencyObject.call(this, index, value);
};

System.Windows.Input.TouchDevice.prototype._ctor = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 332);
};
System.Windows.Input.TouchDevice.prototype.get_Id = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Input.TouchDevice.IdProperty), System.Int32);
};
System.Windows.Input.TouchDevice.prototype.get_DirectlyOver = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Input.TouchDevice.DirectlyOverProperty), System.Windows.UIElement);
};
JSIL.MakeProperty(System.Windows.Input.TouchDevice.prototype, "Id", 
	System.Windows.Input.TouchDevice.prototype.get_Id, null);
JSIL.MakeProperty(System.Windows.Input.TouchDevice.prototype, "DirectlyOver", 
	System.Windows.Input.TouchDevice.prototype.get_DirectlyOver, null);
System.Windows.Input.TouchDevice.IdProperty = null;
System.Windows.Input.TouchDevice.DirectlyOverProperty = null;
System.Windows.Input.TouchDevice._cctor = function () {
	System.Windows.Input.TouchDevice.IdProperty = System.Windows.DependencyProperty.RegisterCoreProperty(22116, System.Int32);
	System.Windows.Input.TouchDevice.DirectlyOverProperty = System.Windows.DependencyProperty.RegisterCoreProperty(22117, System.Windows.UIElement);
};

System.Windows.Input.TouchPoint.prototype._ctor = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 333);
};
System.Windows.Input.TouchPoint.prototype.get_TouchDevice = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Input.TouchPoint.TouchDeviceProperty), System.Windows.Input.TouchDevice);
};
System.Windows.Input.TouchPoint.prototype.get_Position = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Input.TouchPoint.PositionProperty), System.Windows.Point);
};
System.Windows.Input.TouchPoint.prototype.get_Size = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Input.TouchPoint.SizeProperty), System.Windows.Size);
};
System.Windows.Input.TouchPoint.prototype.get_Action = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Input.TouchPoint.ActionProperty), System.Windows.Input.TouchAction);
};
JSIL.MakeProperty(System.Windows.Input.TouchPoint.prototype, "TouchDevice", 
	System.Windows.Input.TouchPoint.prototype.get_TouchDevice, null);
JSIL.MakeProperty(System.Windows.Input.TouchPoint.prototype, "Position", 
	System.Windows.Input.TouchPoint.prototype.get_Position, null);
JSIL.MakeProperty(System.Windows.Input.TouchPoint.prototype, "Size", 
	System.Windows.Input.TouchPoint.prototype.get_Size, null);
JSIL.MakeProperty(System.Windows.Input.TouchPoint.prototype, "Action", 
	System.Windows.Input.TouchPoint.prototype.get_Action, null);
System.Windows.Input.TouchPoint.TouchDeviceProperty = null;
System.Windows.Input.TouchPoint.PositionProperty = null;
System.Windows.Input.TouchPoint.SizeProperty = null;
System.Windows.Input.TouchPoint.ActionProperty = null;
System.Windows.Input.TouchPoint._cctor = function () {
	System.Windows.Input.TouchPoint.TouchDeviceProperty = System.Windows.DependencyProperty.RegisterCoreProperty(22112, System.Windows.Input.TouchDevice);
	System.Windows.Input.TouchPoint.PositionProperty = System.Windows.DependencyProperty.RegisterCoreProperty(22113, System.Windows.Point);
	System.Windows.Input.TouchPoint.SizeProperty = System.Windows.DependencyProperty.RegisterCoreProperty(22114, System.Windows.Size);
	System.Windows.Input.TouchPoint.ActionProperty = System.Windows.DependencyProperty.RegisterCoreProperty(22115, System.Windows.Input.TouchAction);
};

System.Windows.Shapes.Shape.prototype._ctor$0 = function () {
	System.Windows.FrameworkElement.prototype._ctor$0.call(this, 41);
};
System.Windows.Shapes.Shape.prototype._ctor$1 = function (nKnownTypeIndex) {
	System.Windows.FrameworkElement.prototype._ctor$0.call(this, nKnownTypeIndex);
};
System.Windows.Shapes.Shape.prototype.get_Fill = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Shapes.Shape.FillProperty), System.Windows.Media.Brush);
};
System.Windows.Shapes.Shape.prototype.set_Fill = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Shapes.Shape.FillProperty, value);
};
System.Windows.Shapes.Shape.prototype.get_Stroke = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Shapes.Shape.StrokeProperty), System.Windows.Media.Brush);
};
System.Windows.Shapes.Shape.prototype.set_Stroke = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Shapes.Shape.StrokeProperty, value);
};
System.Windows.Shapes.Shape.prototype.get_StrokeMiterLimit = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Shapes.Shape.StrokeMiterLimitProperty), System.Double);
};
System.Windows.Shapes.Shape.prototype.set_StrokeMiterLimit = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Shapes.Shape.StrokeMiterLimitProperty, value);
};
System.Windows.Shapes.Shape.prototype.get_StrokeThickness = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Shapes.Shape.StrokeThicknessProperty), System.Double);
};
System.Windows.Shapes.Shape.prototype.set_StrokeThickness = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Shapes.Shape.StrokeThicknessProperty, value);
};
System.Windows.Shapes.Shape.prototype.get_StrokeStartLineCap = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Shapes.Shape.StrokeStartLineCapProperty), System.Windows.Media.PenLineCap);
};
System.Windows.Shapes.Shape.prototype.set_StrokeStartLineCap = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Shapes.Shape.StrokeStartLineCapProperty, value);
};
System.Windows.Shapes.Shape.prototype.get_StrokeEndLineCap = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Shapes.Shape.StrokeEndLineCapProperty), System.Windows.Media.PenLineCap);
};
System.Windows.Shapes.Shape.prototype.set_StrokeEndLineCap = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Shapes.Shape.StrokeEndLineCapProperty, value);
};
System.Windows.Shapes.Shape.prototype.get_StrokeLineJoin = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Shapes.Shape.StrokeLineJoinProperty), System.Windows.Media.PenLineJoin);
};
System.Windows.Shapes.Shape.prototype.set_StrokeLineJoin = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Shapes.Shape.StrokeLineJoinProperty, value);
};
System.Windows.Shapes.Shape.prototype.get_StrokeDashOffset = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Shapes.Shape.StrokeDashOffsetProperty), System.Double);
};
System.Windows.Shapes.Shape.prototype.set_StrokeDashOffset = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Shapes.Shape.StrokeDashOffsetProperty, value);
};
System.Windows.Shapes.Shape.prototype.get_StrokeDashCap = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Shapes.Shape.StrokeDashCapProperty), System.Windows.Media.PenLineCap);
};
System.Windows.Shapes.Shape.prototype.set_StrokeDashCap = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Shapes.Shape.StrokeDashCapProperty, value);
};
System.Windows.Shapes.Shape.prototype.get_StrokeDashArray = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Shapes.Shape.StrokeDashArrayProperty), System.Windows.Media.DoubleCollection);
};
System.Windows.Shapes.Shape.prototype.set_StrokeDashArray = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Shapes.Shape.StrokeDashArrayProperty, value);
};
System.Windows.Shapes.Shape.prototype.get_Stretch = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Shapes.Shape.StretchProperty), System.Windows.Media.Stretch);
};
System.Windows.Shapes.Shape.prototype.set_Stretch = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Shapes.Shape.StretchProperty, value);
};
System.Windows.Shapes.Shape.prototype.get_GeometryTransform = function () {
	var matrixTransform = new System.Windows.Media.MatrixTransform();
	var matrix = JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Shapes.Shape.GeometryTransformProperty), System.Windows.Media.Matrix).MemberwiseClone();
	(matrixTransform.Matrix = matrix.MemberwiseClone());
	return matrixTransform;
};
JSIL.OverloadedMethod(System.Windows.Shapes.Shape.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);
JSIL.MakeProperty(System.Windows.Shapes.Shape.prototype, "Fill", 
	System.Windows.Shapes.Shape.prototype.get_Fill, System.Windows.Shapes.Shape.prototype.set_Fill);
JSIL.MakeProperty(System.Windows.Shapes.Shape.prototype, "Stroke", 
	System.Windows.Shapes.Shape.prototype.get_Stroke, System.Windows.Shapes.Shape.prototype.set_Stroke);
JSIL.MakeProperty(System.Windows.Shapes.Shape.prototype, "StrokeMiterLimit", 
	System.Windows.Shapes.Shape.prototype.get_StrokeMiterLimit, System.Windows.Shapes.Shape.prototype.set_StrokeMiterLimit);
JSIL.MakeProperty(System.Windows.Shapes.Shape.prototype, "StrokeThickness", 
	System.Windows.Shapes.Shape.prototype.get_StrokeThickness, System.Windows.Shapes.Shape.prototype.set_StrokeThickness);
JSIL.MakeProperty(System.Windows.Shapes.Shape.prototype, "StrokeStartLineCap", 
	System.Windows.Shapes.Shape.prototype.get_StrokeStartLineCap, System.Windows.Shapes.Shape.prototype.set_StrokeStartLineCap);
JSIL.MakeProperty(System.Windows.Shapes.Shape.prototype, "StrokeEndLineCap", 
	System.Windows.Shapes.Shape.prototype.get_StrokeEndLineCap, System.Windows.Shapes.Shape.prototype.set_StrokeEndLineCap);
JSIL.MakeProperty(System.Windows.Shapes.Shape.prototype, "StrokeLineJoin", 
	System.Windows.Shapes.Shape.prototype.get_StrokeLineJoin, System.Windows.Shapes.Shape.prototype.set_StrokeLineJoin);
JSIL.MakeProperty(System.Windows.Shapes.Shape.prototype, "StrokeDashOffset", 
	System.Windows.Shapes.Shape.prototype.get_StrokeDashOffset, System.Windows.Shapes.Shape.prototype.set_StrokeDashOffset);
JSIL.MakeProperty(System.Windows.Shapes.Shape.prototype, "StrokeDashCap", 
	System.Windows.Shapes.Shape.prototype.get_StrokeDashCap, System.Windows.Shapes.Shape.prototype.set_StrokeDashCap);
JSIL.MakeProperty(System.Windows.Shapes.Shape.prototype, "StrokeDashArray", 
	System.Windows.Shapes.Shape.prototype.get_StrokeDashArray, System.Windows.Shapes.Shape.prototype.set_StrokeDashArray);
JSIL.MakeProperty(System.Windows.Shapes.Shape.prototype, "Stretch", 
	System.Windows.Shapes.Shape.prototype.get_Stretch, System.Windows.Shapes.Shape.prototype.set_Stretch);
JSIL.MakeProperty(System.Windows.Shapes.Shape.prototype, "GeometryTransform", 
	System.Windows.Shapes.Shape.prototype.get_GeometryTransform, null);
System.Windows.Shapes.Shape.FillProperty = null;
System.Windows.Shapes.Shape.StrokeProperty = null;
System.Windows.Shapes.Shape.StrokeMiterLimitProperty = null;
System.Windows.Shapes.Shape.StrokeThicknessProperty = null;
System.Windows.Shapes.Shape.StrokeStartLineCapProperty = null;
System.Windows.Shapes.Shape.StrokeEndLineCapProperty = null;
System.Windows.Shapes.Shape.StrokeLineJoinProperty = null;
System.Windows.Shapes.Shape.StrokeDashOffsetProperty = null;
System.Windows.Shapes.Shape.StrokeDashCapProperty = null;
System.Windows.Shapes.Shape.StrokeDashArrayProperty = null;
System.Windows.Shapes.Shape.StretchProperty = null;
System.Windows.Shapes.Shape.GeometryTransformProperty = null;
System.Windows.Shapes.Shape._cctor = function () {
	System.Windows.Shapes.Shape.FillProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13300, System.Windows.Media.Brush);
	System.Windows.Shapes.Shape.StrokeProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13301, System.Windows.Media.Brush);
	System.Windows.Shapes.Shape.StrokeMiterLimitProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13302, System.Double);
	System.Windows.Shapes.Shape.StrokeThicknessProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13303, System.Double);
	System.Windows.Shapes.Shape.StrokeStartLineCapProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13304, System.Windows.Media.PenLineCap);
	System.Windows.Shapes.Shape.StrokeEndLineCapProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13305, System.Windows.Media.PenLineCap);
	System.Windows.Shapes.Shape.StrokeLineJoinProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13306, System.Windows.Media.PenLineJoin);
	System.Windows.Shapes.Shape.StrokeDashOffsetProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13307, System.Double);
	System.Windows.Shapes.Shape.StrokeDashCapProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13308, System.Windows.Media.PenLineCap);
	System.Windows.Shapes.Shape.StrokeDashArrayProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13309, System.Windows.Media.DoubleCollection);
	System.Windows.Shapes.Shape.StretchProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13310, System.Windows.Media.Stretch);
	System.Windows.Shapes.Shape.GeometryTransformProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13311, System.Windows.Media.Matrix);
};

System.Windows.Shapes.Path.prototype._ctor$0 = function () {
	System.Windows.Shapes.Shape.prototype._ctor$1.call(this, 44);
};
System.Windows.Shapes.Path.prototype._ctor$1 = function (nKnownTypeIndex) {
	System.Windows.Shapes.Shape.prototype._ctor$1.call(this, nKnownTypeIndex);
};
System.Windows.Shapes.Path.prototype.get_Data = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Shapes.Path.DataProperty), System.Windows.Media.Geometry);
};
System.Windows.Shapes.Path.prototype.set_Data = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Shapes.Path.DataProperty, value);
};
JSIL.OverloadedMethod(System.Windows.Shapes.Path.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);
JSIL.MakeProperty(System.Windows.Shapes.Path.prototype, "Data", 
	System.Windows.Shapes.Path.prototype.get_Data, System.Windows.Shapes.Path.prototype.set_Data);
System.Windows.Shapes.Path.DataProperty = null;
System.Windows.Shapes.Path._cctor = function () {
	System.Windows.Shapes.Path.DataProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13900, System.Windows.Media.Geometry);
};

System.Windows.Shapes.Ellipse.prototype._ctor = function () {
	System.Windows.Shapes.Shape.prototype._ctor$1.call(this, 91);
};

System.Windows.Shapes.Line.prototype._ctor = function () {
	System.Windows.Shapes.Shape.prototype._ctor$1.call(this, 92);
};
System.Windows.Shapes.Line.prototype.get_X1 = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Shapes.Line.X1Property), System.Double);
};
System.Windows.Shapes.Line.prototype.set_X1 = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Shapes.Line.X1Property, value);
};
System.Windows.Shapes.Line.prototype.get_Y1 = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Shapes.Line.Y1Property), System.Double);
};
System.Windows.Shapes.Line.prototype.set_Y1 = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Shapes.Line.Y1Property, value);
};
System.Windows.Shapes.Line.prototype.get_X2 = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Shapes.Line.X2Property), System.Double);
};
System.Windows.Shapes.Line.prototype.set_X2 = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Shapes.Line.X2Property, value);
};
System.Windows.Shapes.Line.prototype.get_Y2 = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Shapes.Line.Y2Property), System.Double);
};
System.Windows.Shapes.Line.prototype.set_Y2 = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Shapes.Line.Y2Property, value);
};
JSIL.MakeProperty(System.Windows.Shapes.Line.prototype, "X1", 
	System.Windows.Shapes.Line.prototype.get_X1, System.Windows.Shapes.Line.prototype.set_X1);
JSIL.MakeProperty(System.Windows.Shapes.Line.prototype, "Y1", 
	System.Windows.Shapes.Line.prototype.get_Y1, System.Windows.Shapes.Line.prototype.set_Y1);
JSIL.MakeProperty(System.Windows.Shapes.Line.prototype, "X2", 
	System.Windows.Shapes.Line.prototype.get_X2, System.Windows.Shapes.Line.prototype.set_X2);
JSIL.MakeProperty(System.Windows.Shapes.Line.prototype, "Y2", 
	System.Windows.Shapes.Line.prototype.get_Y2, System.Windows.Shapes.Line.prototype.set_Y2);
System.Windows.Shapes.Line.X1Property = null;
System.Windows.Shapes.Line.Y1Property = null;
System.Windows.Shapes.Line.X2Property = null;
System.Windows.Shapes.Line.Y2Property = null;
System.Windows.Shapes.Line._cctor = function () {
	System.Windows.Shapes.Line.X1Property = System.Windows.DependencyProperty.RegisterCoreProperty(13500, System.Double);
	System.Windows.Shapes.Line.Y1Property = System.Windows.DependencyProperty.RegisterCoreProperty(13501, System.Double);
	System.Windows.Shapes.Line.X2Property = System.Windows.DependencyProperty.RegisterCoreProperty(13502, System.Double);
	System.Windows.Shapes.Line.Y2Property = System.Windows.DependencyProperty.RegisterCoreProperty(13503, System.Double);
};

System.Windows.Shapes.Polygon.prototype._ctor = function () {
	System.Windows.Shapes.Shape.prototype._ctor$1.call(this, 93);
};
System.Windows.Shapes.Polygon.prototype.get_FillRule = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Shapes.Polygon.FillRuleProperty), System.Windows.Media.FillRule);
};
System.Windows.Shapes.Polygon.prototype.set_FillRule = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Shapes.Polygon.FillRuleProperty, value);
};
System.Windows.Shapes.Polygon.prototype.get_Points = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Shapes.Polygon.PointsProperty), System.Windows.Media.PointCollection);
};
System.Windows.Shapes.Polygon.prototype.set_Points = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Shapes.Polygon.PointsProperty, value);
};
JSIL.MakeProperty(System.Windows.Shapes.Polygon.prototype, "FillRule", 
	System.Windows.Shapes.Polygon.prototype.get_FillRule, System.Windows.Shapes.Polygon.prototype.set_FillRule);
JSIL.MakeProperty(System.Windows.Shapes.Polygon.prototype, "Points", 
	System.Windows.Shapes.Polygon.prototype.get_Points, System.Windows.Shapes.Polygon.prototype.set_Points);
System.Windows.Shapes.Polygon.FillRuleProperty = null;
System.Windows.Shapes.Polygon.PointsProperty = null;
System.Windows.Shapes.Polygon._cctor = function () {
	System.Windows.Shapes.Polygon.FillRuleProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13600, System.Windows.Media.FillRule);
	System.Windows.Shapes.Polygon.PointsProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13601, System.Windows.Media.PointCollection);
};

System.Windows.Shapes.Polyline.prototype._ctor = function () {
	System.Windows.Shapes.Shape.prototype._ctor$1.call(this, 94);
};
System.Windows.Shapes.Polyline.prototype.get_FillRule = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Shapes.Polyline.FillRuleProperty), System.Windows.Media.FillRule);
};
System.Windows.Shapes.Polyline.prototype.set_FillRule = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Shapes.Polyline.FillRuleProperty, value);
};
System.Windows.Shapes.Polyline.prototype.get_Points = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Shapes.Polyline.PointsProperty), System.Windows.Media.PointCollection);
};
System.Windows.Shapes.Polyline.prototype.set_Points = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Shapes.Polyline.PointsProperty, value);
};
JSIL.MakeProperty(System.Windows.Shapes.Polyline.prototype, "FillRule", 
	System.Windows.Shapes.Polyline.prototype.get_FillRule, System.Windows.Shapes.Polyline.prototype.set_FillRule);
JSIL.MakeProperty(System.Windows.Shapes.Polyline.prototype, "Points", 
	System.Windows.Shapes.Polyline.prototype.get_Points, System.Windows.Shapes.Polyline.prototype.set_Points);
System.Windows.Shapes.Polyline.FillRuleProperty = null;
System.Windows.Shapes.Polyline.PointsProperty = null;
System.Windows.Shapes.Polyline._cctor = function () {
	System.Windows.Shapes.Polyline.FillRuleProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13700, System.Windows.Media.FillRule);
	System.Windows.Shapes.Polyline.PointsProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13701, System.Windows.Media.PointCollection);
};

System.Windows.Shapes.Rectangle.prototype._ctor = function () {
	System.Windows.Shapes.Shape.prototype._ctor$1.call(this, 95);
};
System.Windows.Shapes.Rectangle.prototype.get_RadiusX = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Shapes.Rectangle.RadiusXProperty), System.Double);
};
System.Windows.Shapes.Rectangle.prototype.set_RadiusX = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Shapes.Rectangle.RadiusXProperty, value);
};
System.Windows.Shapes.Rectangle.prototype.get_RadiusY = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Shapes.Rectangle.RadiusYProperty), System.Double);
};
System.Windows.Shapes.Rectangle.prototype.set_RadiusY = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Shapes.Rectangle.RadiusYProperty, value);
};
JSIL.MakeProperty(System.Windows.Shapes.Rectangle.prototype, "RadiusX", 
	System.Windows.Shapes.Rectangle.prototype.get_RadiusX, System.Windows.Shapes.Rectangle.prototype.set_RadiusX);
JSIL.MakeProperty(System.Windows.Shapes.Rectangle.prototype, "RadiusY", 
	System.Windows.Shapes.Rectangle.prototype.get_RadiusY, System.Windows.Shapes.Rectangle.prototype.set_RadiusY);
System.Windows.Shapes.Rectangle.RadiusXProperty = null;
System.Windows.Shapes.Rectangle.RadiusYProperty = null;
System.Windows.Shapes.Rectangle._cctor = function () {
	System.Windows.Shapes.Rectangle.RadiusXProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13800, System.Double);
	System.Windows.Shapes.Rectangle.RadiusYProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13801, System.Double);
};

System.Windows.Documents.TextElement.prototype._ctor$0 = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 341);
};
System.Windows.Documents.TextElement.prototype._ctor$1 = function (nKnownTypeIndex) {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, nKnownTypeIndex);
};
System.Windows.Documents.TextElement.prototype.get_FontSize = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Documents.TextElement.FontSizeProperty), System.Double);
};
System.Windows.Documents.TextElement.prototype.set_FontSize = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Documents.TextElement.FontSizeProperty, value);
};
System.Windows.Documents.TextElement.prototype.get_FontFamily = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Documents.TextElement.FontFamilyProperty), System.Windows.Media.FontFamily);
};
System.Windows.Documents.TextElement.prototype.set_FontFamily = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Documents.TextElement.FontFamilyProperty, value);
};
System.Windows.Documents.TextElement.prototype.get_FontWeight = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Documents.TextElement.FontWeightProperty), System.Windows.FontWeight);
};
System.Windows.Documents.TextElement.prototype.set_FontWeight = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Documents.TextElement.FontWeightProperty, value.MemberwiseClone());
};
System.Windows.Documents.TextElement.prototype.get_FontStyle = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Documents.TextElement.FontStyleProperty), System.Windows.FontStyle);
};
System.Windows.Documents.TextElement.prototype.set_FontStyle = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Documents.TextElement.FontStyleProperty, value.MemberwiseClone());
};
System.Windows.Documents.TextElement.prototype.get_FontStretch = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Documents.TextElement.FontStretchProperty), System.Windows.FontStretch);
};
System.Windows.Documents.TextElement.prototype.set_FontStretch = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Documents.TextElement.FontStretchProperty, value.MemberwiseClone());
};
System.Windows.Documents.TextElement.prototype.get_Foreground = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Documents.TextElement.ForegroundProperty), System.Windows.Media.Brush);
};
System.Windows.Documents.TextElement.prototype.set_Foreground = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Documents.TextElement.ForegroundProperty, value);
};
System.Windows.Documents.TextElement.prototype.get_Name = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.FrameworkElement.NameProperty), System.String);
};
System.Windows.Documents.TextElement.prototype.get_Language = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Documents.TextElement.LanguageProperty), System.Windows.Markup.XmlLanguage);
};
System.Windows.Documents.TextElement.prototype.set_Language = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Documents.TextElement.LanguageProperty, value);
};
System.Windows.Documents.TextElement.prototype.FindName = function (name) {
	return $asm02.MS.Internal.XcpImports.DependencyObject_FindName(this, name);
};
System.Windows.Documents.TextElement.prototype.get_ContentStart = function () {
	return $asm02.MS.Internal.XcpImports.TextElement_GetEdge(this, $asm02.System.Windows.Documents.ElementEdge.ContentStart);
};
System.Windows.Documents.TextElement.prototype.get_ContentEnd = function () {
	return $asm02.MS.Internal.XcpImports.TextElement_GetEdge(this, $asm02.System.Windows.Documents.ElementEdge.ContentEnd);
};
System.Windows.Documents.TextElement.prototype.get_ElementStart = function () {
	return $asm02.MS.Internal.XcpImports.TextElement_GetEdge(this, $asm02.System.Windows.Documents.ElementEdge.ElementStart);
};
System.Windows.Documents.TextElement.prototype.get_ElementEnd = function () {
	return $asm02.MS.Internal.XcpImports.TextElement_GetEdge(this, $asm02.System.Windows.Documents.ElementEdge.ElementEnd);
};
System.Windows.Documents.TextElement.prototype.OnCreateAutomationPeer = function () {
	return null;
};
System.Windows.Documents.TextElement.prototype.GetOrCreateAutomationPeer = function () {
	if (this.m_pAP === null) {
		this.m_pAP = this.OnCreateAutomationPeer();
	}
	return this.m_pAP;
};
System.Windows.Documents.TextElement.prototype.IAutomationElement_GetOrCreateAutomationPeer = function () {
	return this.GetOrCreateAutomationPeer();
};
JSIL.OverloadedMethod(System.Windows.Documents.TextElement.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);
JSIL.MakeProperty(System.Windows.Documents.TextElement.prototype, "FontSize", 
	System.Windows.Documents.TextElement.prototype.get_FontSize, System.Windows.Documents.TextElement.prototype.set_FontSize);
JSIL.MakeProperty(System.Windows.Documents.TextElement.prototype, "FontFamily", 
	System.Windows.Documents.TextElement.prototype.get_FontFamily, System.Windows.Documents.TextElement.prototype.set_FontFamily);
JSIL.MakeProperty(System.Windows.Documents.TextElement.prototype, "FontWeight", 
	System.Windows.Documents.TextElement.prototype.get_FontWeight, System.Windows.Documents.TextElement.prototype.set_FontWeight);
JSIL.MakeProperty(System.Windows.Documents.TextElement.prototype, "FontStyle", 
	System.Windows.Documents.TextElement.prototype.get_FontStyle, System.Windows.Documents.TextElement.prototype.set_FontStyle);
JSIL.MakeProperty(System.Windows.Documents.TextElement.prototype, "FontStretch", 
	System.Windows.Documents.TextElement.prototype.get_FontStretch, System.Windows.Documents.TextElement.prototype.set_FontStretch);
JSIL.MakeProperty(System.Windows.Documents.TextElement.prototype, "Foreground", 
	System.Windows.Documents.TextElement.prototype.get_Foreground, System.Windows.Documents.TextElement.prototype.set_Foreground);
JSIL.MakeProperty(System.Windows.Documents.TextElement.prototype, "Name", 
	System.Windows.Documents.TextElement.prototype.get_Name, null);
JSIL.MakeProperty(System.Windows.Documents.TextElement.prototype, "Language", 
	System.Windows.Documents.TextElement.prototype.get_Language, System.Windows.Documents.TextElement.prototype.set_Language);
JSIL.MakeProperty(System.Windows.Documents.TextElement.prototype, "ContentStart", 
	System.Windows.Documents.TextElement.prototype.get_ContentStart, null);
JSIL.MakeProperty(System.Windows.Documents.TextElement.prototype, "ContentEnd", 
	System.Windows.Documents.TextElement.prototype.get_ContentEnd, null);
JSIL.MakeProperty(System.Windows.Documents.TextElement.prototype, "ElementStart", 
	System.Windows.Documents.TextElement.prototype.get_ElementStart, null);
JSIL.MakeProperty(System.Windows.Documents.TextElement.prototype, "ElementEnd", 
	System.Windows.Documents.TextElement.prototype.get_ElementEnd, null);
System.Windows.Documents.TextElement.FontSizeProperty = null;
System.Windows.Documents.TextElement.FontFamilyProperty = null;
System.Windows.Documents.TextElement.FontWeightProperty = null;
System.Windows.Documents.TextElement.FontStyleProperty = null;
System.Windows.Documents.TextElement.FontStretchProperty = null;
System.Windows.Documents.TextElement.ForegroundProperty = null;
System.Windows.Documents.TextElement.LanguageProperty = null;
System.Windows.Documents.TextElement.prototype.m_pAP = null;
System.Windows.Documents.TextElement._cctor = function () {
	System.Windows.Documents.TextElement.FontSizeProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14100, System.Double);
	System.Windows.Documents.TextElement.FontFamilyProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14101, System.Windows.Media.FontFamily);
	System.Windows.Documents.TextElement.FontWeightProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14103, System.Windows.FontWeight);
	System.Windows.Documents.TextElement.FontStyleProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14104, System.Windows.FontStyle);
	System.Windows.Documents.TextElement.FontStretchProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14105, System.Windows.FontStretch);
	System.Windows.Documents.TextElement.ForegroundProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14102, System.Windows.Media.Brush);
	System.Windows.Documents.TextElement.LanguageProperty = System.Windows.DependencyProperty.RegisterCoreProperty(4207424, System.Windows.Markup.XmlLanguage);
};

System.Windows.Documents.Inline.prototype._ctor$0 = function () {
	System.Windows.Documents.TextElement.prototype._ctor$1.call(this, 123);
};
System.Windows.Documents.Inline.prototype._ctor$1 = function (nKnownTypeIndex) {
	System.Windows.Documents.TextElement.prototype._ctor$1.call(this, nKnownTypeIndex);
};
System.Windows.Documents.Inline.prototype.get_TextDecorations = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Documents.Inline.TextDecorationsProperty), System.Windows.TextDecorationCollection);
};
System.Windows.Documents.Inline.prototype.set_TextDecorations = function (value) {
	if (value !== null) {
		System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Documents.Inline.TextDecorationsProperty, value.Decoration.Location);
		return;
	}
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Documents.Inline.TextDecorationsProperty, 0);
};
JSIL.OverloadedMethod(System.Windows.Documents.Inline.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);
JSIL.MakeProperty(System.Windows.Documents.Inline.prototype, "TextDecorations", 
	System.Windows.Documents.Inline.prototype.get_TextDecorations, System.Windows.Documents.Inline.prototype.set_TextDecorations);
System.Windows.Documents.Inline.TextDecorationsProperty = null;
System.Windows.Documents.Inline.FontSizeProperty = null;
System.Windows.Documents.Inline.FontFamilyProperty = null;
System.Windows.Documents.Inline.FontWeightProperty = null;
System.Windows.Documents.Inline.FontStyleProperty = null;
System.Windows.Documents.Inline.FontStretchProperty = null;
System.Windows.Documents.Inline.ForegroundProperty = null;
System.Windows.Documents.Inline.LanguageProperty = null;
System.Windows.Documents.Inline._cctor = function () {
	System.Windows.Documents.Inline.TextDecorationsProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14106, System.Windows.TextDecorationCollection);
	System.Windows.Documents.Inline.FontSizeProperty = System.Windows.Documents.TextElement.FontSizeProperty;
	System.Windows.Documents.Inline.FontFamilyProperty = System.Windows.Documents.TextElement.FontFamilyProperty;
	System.Windows.Documents.Inline.FontWeightProperty = System.Windows.Documents.TextElement.FontWeightProperty;
	System.Windows.Documents.Inline.FontStyleProperty = System.Windows.Documents.TextElement.FontStyleProperty;
	System.Windows.Documents.Inline.FontStretchProperty = System.Windows.Documents.TextElement.FontStretchProperty;
	System.Windows.Documents.Inline.ForegroundProperty = System.Windows.Documents.TextElement.ForegroundProperty;
	System.Windows.Documents.Inline.LanguageProperty = System.Windows.Documents.TextElement.LanguageProperty;
};

System.Windows.Documents.Block.prototype._ctor$0 = function () {
	System.Windows.Documents.TextElement.prototype._ctor$1.call(this, 343);
};
System.Windows.Documents.Block.prototype._ctor$1 = function (nKnownTypeIndex) {
	System.Windows.Documents.TextElement.prototype._ctor$1.call(this, nKnownTypeIndex);
};
System.Windows.Documents.Block.prototype.get_TextAlignment = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Documents.Block.TextAlignmentProperty), System.Windows.TextAlignment);
};
System.Windows.Documents.Block.prototype.set_TextAlignment = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Documents.Block.TextAlignmentProperty, value);
};
JSIL.OverloadedMethod(System.Windows.Documents.Block.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);
JSIL.MakeProperty(System.Windows.Documents.Block.prototype, "TextAlignment", 
	System.Windows.Documents.Block.prototype.get_TextAlignment, System.Windows.Documents.Block.prototype.set_TextAlignment);
System.Windows.Documents.Block.TextAlignmentProperty = null;
System.Windows.Documents.Block._cctor = function () {
	System.Windows.Documents.Block.TextAlignmentProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14258, System.Windows.TextAlignment);
};

System.Windows.Documents.TextElementCollection$b1.prototype._ctor = function (nativeTypeIndex) {
	System.Windows.PresentationFrameworkCollection$b1.Of(this.T).prototype._ctor$1.call(this, nativeTypeIndex);
};

System.Windows.Documents.InlineCollection.prototype._ctor = function () {
	System.Windows.Documents.TextElementCollection$b1.Of(System.Windows.Documents.Inline).prototype._ctor.call(this, 124);
};
System.Windows.Documents.InlineCollection.prototype.AddInternal = function (value) {
	this.AddDependencyObject(value);
};
System.Windows.Documents.InlineCollection.prototype.ContainsInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Documents.Inline).prototype.ContainsDependencyObject.call(this, value);
};
System.Windows.Documents.InlineCollection.prototype.IndexOfInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Documents.Inline).prototype.IndexOfDependencyObject.call(this, value);
};
System.Windows.Documents.InlineCollection.prototype.InsertInternal = function (index, value) {
	this.InsertDependencyObject(index, value);
};
System.Windows.Documents.InlineCollection.prototype.RemoveInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Documents.Inline).prototype.RemoveDependencyObject.call(this, value);
};
System.Windows.Documents.InlineCollection.prototype.GetItemImplSkipMethodPack = function (index) {
	return JSIL.TryCast(System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Documents.Inline).prototype.GetItemDependencyObject.call(this, index), System.Windows.Documents.Inline);
};
System.Windows.Documents.InlineCollection.prototype.SetItemImplSkipMethodPack = function (index, value) {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Documents.Inline).prototype.SetItemDependencyObject.call(this, index, value);
};
System.Windows.Documents.InlineCollection.prototype.Add = function (text) {
	if (text === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["text"]);
	}
	var run = null;
	if (System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Documents.Inline).prototype.get_Count.call(this) === 1) {
		run = JSIL.TryCast(System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Documents.Inline).prototype.get_Item.call(this, 0), System.Windows.Documents.Run);
	}
	if (run !== null) {
		run.Text = ((run.Text + text));
		return;
	}
	run = new System.Windows.Documents.Run();
	run.Text = text;
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Documents.Inline).prototype.Add.call(this, run);
};
System.Windows.Documents.InlineCollection.prototype.InsertDependencyObject = function (index, value) {
	try {
		System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Documents.Inline).prototype.InsertDependencyObject.call(this, index, value);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.ArgumentException)) {
			if (value !== null) {
				this.TryThrowWithHostSpecificMessage(value);
			}
			throw $exception;
		} else {
			throw $exception;
		}
	}
};
System.Windows.Documents.InlineCollection.prototype.AddDependencyObject = function (value) {
	try {
		System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Documents.Inline).prototype.AddDependencyObject.call(this, value);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.ArgumentException)) {
			if (value !== null) {
				this.TryThrowWithHostSpecificMessage(value);
			}
			throw $exception;
		} else {
			throw $exception;
		}
	}
};
System.Windows.Documents.InlineCollection.prototype.AddImpl = function (value) {
	try {
		var result = System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Documents.Inline).prototype.AddImpl.call(this, value);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.ArgumentException)) {
			if (value !== null) {
				this.TryThrowWithHostSpecificMessage(value);
			}
			throw $exception;
		} else {
			throw $exception;
		}
	}
	return result;
};
System.Windows.Documents.InlineCollection.prototype.InsertImpl = function (index, value) {
	try {
		System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Documents.Inline).prototype.InsertImpl.call(this, index, value);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.ArgumentException)) {
			if (value !== null) {
				this.TryThrowWithHostSpecificMessage(value);
			}
			throw $exception;
		} else {
			throw $exception;
		}
	}
};
System.Windows.Documents.InlineCollection.prototype.TryThrowWithHostSpecificMessage = function (value) {
	var type = null;
	if ($asm02.MS.Internal.XcpImports.InlineCollection_IsInTextBlock(this)) {
		type = System.Windows.Controls.TextBlock;
	} else if ($asm02.MS.Internal.XcpImports.InlineCollection_IsInHyperlink(this)) {
		type = System.Windows.Documents.Hyperlink;
	}
	if (type !== null) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [System.String.Format($asm02.System.Windows.Resx.GetString$2("TextElementCollection_TypeNotSupportedInHost"), JSIL.GetType(value), "InlineCollection", type)]);
	}
};

System.Windows.Documents.BlockCollection.prototype._ctor = function () {
	System.Windows.Documents.TextElementCollection$b1.Of(System.Windows.Documents.Block).prototype._ctor.call(this, 345);
};
System.Windows.Documents.BlockCollection.prototype.AddInternal = function (value) {
	this.AddDependencyObject(value);
};
System.Windows.Documents.BlockCollection.prototype.ContainsInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Documents.Block).prototype.ContainsDependencyObject.call(this, value);
};
System.Windows.Documents.BlockCollection.prototype.IndexOfInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Documents.Block).prototype.IndexOfDependencyObject.call(this, value);
};
System.Windows.Documents.BlockCollection.prototype.InsertInternal = function (index, value) {
	this.InsertDependencyObject(index, value);
};
System.Windows.Documents.BlockCollection.prototype.RemoveInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Documents.Block).prototype.RemoveDependencyObject.call(this, value);
};
System.Windows.Documents.BlockCollection.prototype.GetItemImplSkipMethodPack = function (index) {
	return JSIL.TryCast(System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Documents.Block).prototype.GetItemDependencyObject.call(this, index), System.Windows.Documents.Block);
};
System.Windows.Documents.BlockCollection.prototype.SetItemImplSkipMethodPack = function (index, value) {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Documents.Block).prototype.SetItemDependencyObject.call(this, index, value);
};
System.Windows.Documents.BlockCollection.prototype.InsertDependencyObject = function (index, value) {
	if (!((value === null) || !JSIL.GetType(value).IsAssignableFrom(System.Windows.Documents.Section))) {
		this.ThrowSectionIsNotAllowedException(value);
	}
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Documents.Block).prototype.InsertDependencyObject.call(this, index, value);
};
System.Windows.Documents.BlockCollection.prototype.AddDependencyObject = function (value) {
	if (!((value === null) || !JSIL.GetType(value).IsAssignableFrom(System.Windows.Documents.Section))) {
		this.ThrowSectionIsNotAllowedException(value);
	}
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Documents.Block).prototype.AddDependencyObject.call(this, value);
};
System.Windows.Documents.BlockCollection.prototype.AddImpl = function (value) {
	if (!((value === null) || !JSIL.GetType(value).IsAssignableFrom(System.Windows.Documents.Section))) {
		this.ThrowSectionIsNotAllowedException(value);
	}
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Documents.Block).prototype.AddImpl.call(this, value);
};
System.Windows.Documents.BlockCollection.prototype.InsertImpl = function (index, value) {
	if (!((value === null) || !JSIL.GetType(value).IsAssignableFrom(System.Windows.Documents.Section))) {
		this.ThrowSectionIsNotAllowedException(value);
	}
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Documents.Block).prototype.InsertImpl.call(this, index, value);
};
System.Windows.Documents.BlockCollection.prototype.ThrowSectionIsNotAllowedException = function (value) {
	throw JSIL.New(System.ArgumentException, "_ctor$1", [System.String.Format($asm02.System.Windows.Resx.GetString$2("TextElementCollection_TypeNotSupportedInHost"), JSIL.GetType(value), "BlockCollection", "RichTextBox")]);
};

System.Windows.Documents.Glyphs.prototype._ctor = function () {
	System.Windows.FrameworkElement.prototype._ctor$0.call(this, 66);
};
System.Windows.Documents.Glyphs.prototype.get_UnicodeString = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Documents.Glyphs.UnicodeStringProperty), System.String);
};
System.Windows.Documents.Glyphs.prototype.set_UnicodeString = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Documents.Glyphs.UnicodeStringProperty, value);
};
System.Windows.Documents.Glyphs.prototype.get_Indices = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Documents.Glyphs.IndicesProperty), System.String);
};
System.Windows.Documents.Glyphs.prototype.set_Indices = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Documents.Glyphs.IndicesProperty, value);
};
System.Windows.Documents.Glyphs.prototype.get_FontUri = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Documents.Glyphs.FontUriProperty), System.Uri);
};
System.Windows.Documents.Glyphs.prototype.set_FontUri = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Documents.Glyphs.FontUriProperty, value);
};
System.Windows.Documents.Glyphs.prototype.get_StyleSimulations = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Documents.Glyphs.StyleSimulationsProperty), System.Windows.Media.StyleSimulations);
};
System.Windows.Documents.Glyphs.prototype.set_StyleSimulations = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Documents.Glyphs.StyleSimulationsProperty, value);
};
System.Windows.Documents.Glyphs.prototype.get_FontRenderingEmSize = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Documents.Glyphs.FontRenderingEmSizeProperty), System.Double);
};
System.Windows.Documents.Glyphs.prototype.set_FontRenderingEmSize = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Documents.Glyphs.FontRenderingEmSizeProperty, value);
};
System.Windows.Documents.Glyphs.prototype.get_OriginX = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Documents.Glyphs.OriginXProperty), System.Double);
};
System.Windows.Documents.Glyphs.prototype.set_OriginX = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Documents.Glyphs.OriginXProperty, value);
};
System.Windows.Documents.Glyphs.prototype.get_OriginY = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Documents.Glyphs.OriginYProperty), System.Double);
};
System.Windows.Documents.Glyphs.prototype.set_OriginY = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Documents.Glyphs.OriginYProperty, value);
};
System.Windows.Documents.Glyphs.prototype.get_Fill = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Documents.Glyphs.FillProperty), System.Windows.Media.Brush);
};
System.Windows.Documents.Glyphs.prototype.set_Fill = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Documents.Glyphs.FillProperty, value);
};
System.Windows.Documents.Glyphs.prototype.get_FontSource = function () {
	return this._fontSource;
};
System.Windows.Documents.Glyphs.prototype.set_FontSource = function (value) {
	this._fontSource = value;
	this.UpdateFontSource(this._fontSource);
};
System.Windows.Documents.Glyphs.prototype.UpdateFontSource = function (fontSource) {
	if (!((fontSource !== null) && !fontSource.IsEmpty())) {
		$asm02.MS.Internal.XcpImports.SetFontSourceNull(this);
		return;
	}
	if (fontSource.IsStream()) {
		fontSource.SetTextFontSourceFromStream(this);
		return;
	}
	fontSource.SetTextFontSourceFromGlyphTypeface(this);
};
JSIL.MakeProperty(System.Windows.Documents.Glyphs.prototype, "UnicodeString", 
	System.Windows.Documents.Glyphs.prototype.get_UnicodeString, System.Windows.Documents.Glyphs.prototype.set_UnicodeString);
JSIL.MakeProperty(System.Windows.Documents.Glyphs.prototype, "Indices", 
	System.Windows.Documents.Glyphs.prototype.get_Indices, System.Windows.Documents.Glyphs.prototype.set_Indices);
JSIL.MakeProperty(System.Windows.Documents.Glyphs.prototype, "FontUri", 
	System.Windows.Documents.Glyphs.prototype.get_FontUri, System.Windows.Documents.Glyphs.prototype.set_FontUri);
JSIL.MakeProperty(System.Windows.Documents.Glyphs.prototype, "StyleSimulations", 
	System.Windows.Documents.Glyphs.prototype.get_StyleSimulations, System.Windows.Documents.Glyphs.prototype.set_StyleSimulations);
JSIL.MakeProperty(System.Windows.Documents.Glyphs.prototype, "FontRenderingEmSize", 
	System.Windows.Documents.Glyphs.prototype.get_FontRenderingEmSize, System.Windows.Documents.Glyphs.prototype.set_FontRenderingEmSize);
JSIL.MakeProperty(System.Windows.Documents.Glyphs.prototype, "OriginX", 
	System.Windows.Documents.Glyphs.prototype.get_OriginX, System.Windows.Documents.Glyphs.prototype.set_OriginX);
JSIL.MakeProperty(System.Windows.Documents.Glyphs.prototype, "OriginY", 
	System.Windows.Documents.Glyphs.prototype.get_OriginY, System.Windows.Documents.Glyphs.prototype.set_OriginY);
JSIL.MakeProperty(System.Windows.Documents.Glyphs.prototype, "Fill", 
	System.Windows.Documents.Glyphs.prototype.get_Fill, System.Windows.Documents.Glyphs.prototype.set_Fill);
JSIL.MakeProperty(System.Windows.Documents.Glyphs.prototype, "FontSource", 
	System.Windows.Documents.Glyphs.prototype.get_FontSource, System.Windows.Documents.Glyphs.prototype.set_FontSource);
System.Windows.Documents.Glyphs.UnicodeStringProperty = null;
System.Windows.Documents.Glyphs.IndicesProperty = null;
System.Windows.Documents.Glyphs.FontUriProperty = null;
System.Windows.Documents.Glyphs.StyleSimulationsProperty = null;
System.Windows.Documents.Glyphs.FontRenderingEmSizeProperty = null;
System.Windows.Documents.Glyphs.OriginXProperty = null;
System.Windows.Documents.Glyphs.OriginYProperty = null;
System.Windows.Documents.Glyphs.FillProperty = null;
System.Windows.Documents.Glyphs.prototype._fontSource = null;
System.Windows.Documents.Glyphs._cctor = function () {
	System.Windows.Documents.Glyphs.UnicodeStringProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14000, System.String);
	System.Windows.Documents.Glyphs.IndicesProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14001, System.String);
	System.Windows.Documents.Glyphs.FontUriProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14002, System.Uri);
	System.Windows.Documents.Glyphs.StyleSimulationsProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14003, System.Windows.Media.StyleSimulations);
	System.Windows.Documents.Glyphs.FontRenderingEmSizeProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14004, System.Double);
	System.Windows.Documents.Glyphs.OriginXProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14005, System.Double);
	System.Windows.Documents.Glyphs.OriginYProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14006, System.Double);
	System.Windows.Documents.Glyphs.FillProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14007, System.Windows.Media.Brush);
};

System.Windows.Documents.Run.prototype._ctor = function () {
	System.Windows.Documents.Inline.prototype._ctor$1.call(this, 110);
};
System.Windows.Documents.Run.prototype.get_FlowDirection = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Documents.Run.FlowDirectionProperty), System.Windows.FlowDirection);
};
System.Windows.Documents.Run.prototype.set_FlowDirection = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Documents.Run.FlowDirectionProperty, value);
};
System.Windows.Documents.Run.prototype.get_Text = function () {
	var text = JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Documents.Run.TextProperty), System.String);
	if (!(!(text == System.String.Empty) || 
			this.textSetFromManagedCodeToStringEmpty || !$asm02.MS.Internal.QuirksMode.ShouldRunTextReturnsNullObjectForEmptyString())) {
		text = null;
	}
	return text;
};
System.Windows.Documents.Run.prototype.set_Text = function (value) {
	if (value == System.String.Empty) {
		this.textSetFromManagedCodeToStringEmpty = true;
	} else {
		this.textSetFromManagedCodeToStringEmpty = false;
	}
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Documents.Run.TextProperty, value);
};
JSIL.MakeProperty(System.Windows.Documents.Run.prototype, "FlowDirection", 
	System.Windows.Documents.Run.prototype.get_FlowDirection, System.Windows.Documents.Run.prototype.set_FlowDirection);
JSIL.MakeProperty(System.Windows.Documents.Run.prototype, "Text", 
	System.Windows.Documents.Run.prototype.get_Text, System.Windows.Documents.Run.prototype.set_Text);
System.Windows.Documents.Run.FlowDirectionProperty = null;
System.Windows.Documents.Run.TextProperty = null;
System.Windows.Documents.Run.prototype.textSetFromManagedCodeToStringEmpty = false;
System.Windows.Documents.Run._cctor = function () {
	System.Windows.Documents.Run.FlowDirectionProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14152, System.Windows.FlowDirection);
	System.Windows.Documents.Run.TextProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14150, System.String);
};

System.Windows.Documents.Paragraph.prototype._ctor = function () {
	System.Windows.Documents.Block.prototype._ctor$1.call(this, 344);
};
System.Windows.Documents.Paragraph.prototype.get_Inlines = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Documents.Paragraph.InlinesProperty), System.Windows.Documents.InlineCollection);
};
JSIL.MakeProperty(System.Windows.Documents.Paragraph.prototype, "Inlines", 
	System.Windows.Documents.Paragraph.prototype.get_Inlines, null);
System.Windows.Documents.Paragraph.InlinesProperty = null;
System.Windows.Documents.Paragraph._cctor = function () {
	System.Windows.Documents.Paragraph.InlinesProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14256, System.Windows.Documents.InlineCollection);
};

System.Windows.Documents.Section.prototype._ctor = function () {
	System.Windows.Documents.Block.prototype._ctor$1.call(this, 403);
};
System.Windows.Documents.Section.prototype.get_Blocks = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Documents.Section.BlocksProperty), System.Windows.Documents.BlockCollection);
};
System.Windows.Documents.Section.prototype.set_Blocks = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Documents.Section.BlocksProperty, value);
};
System.Windows.Documents.Section.prototype.get_HasTrailingParagraphBreakOnPaste = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Documents.Section.HasTrailingParagraphBreakOnPasteProperty), System.Boolean);
};
System.Windows.Documents.Section.prototype.set_HasTrailingParagraphBreakOnPaste = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Documents.Section.HasTrailingParagraphBreakOnPasteProperty, value);
};
JSIL.MakeProperty(System.Windows.Documents.Section.prototype, "Blocks", 
	System.Windows.Documents.Section.prototype.get_Blocks, System.Windows.Documents.Section.prototype.set_Blocks);
JSIL.MakeProperty(System.Windows.Documents.Section.prototype, "HasTrailingParagraphBreakOnPaste", 
	System.Windows.Documents.Section.prototype.get_HasTrailingParagraphBreakOnPaste, System.Windows.Documents.Section.prototype.set_HasTrailingParagraphBreakOnPaste);
System.Windows.Documents.Section.BlocksProperty = null;
System.Windows.Documents.Section.HasTrailingParagraphBreakOnPasteProperty = null;
System.Windows.Documents.Section._cctor = function () {
	System.Windows.Documents.Section.BlocksProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14270, System.Windows.Documents.BlockCollection);
	System.Windows.Documents.Section.HasTrailingParagraphBreakOnPasteProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14271, System.Boolean);
};

System.Windows.Documents.Span.prototype._ctor$0 = function () {
	System.Windows.Documents.Inline.prototype._ctor$1.call(this, 125);
};
System.Windows.Documents.Span.prototype._ctor$1 = function (nKnownTypeIndex) {
	System.Windows.Documents.Inline.prototype._ctor$1.call(this, nKnownTypeIndex);
};
System.Windows.Documents.Span.prototype.get_Inlines = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Documents.Span.InlinesProperty), System.Windows.Documents.InlineCollection);
};
JSIL.OverloadedMethod(System.Windows.Documents.Span.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);
JSIL.MakeProperty(System.Windows.Documents.Span.prototype, "Inlines", 
	System.Windows.Documents.Span.prototype.get_Inlines, null);
System.Windows.Documents.Span.InlinesProperty = null;
System.Windows.Documents.Span._cctor = function () {
	System.Windows.Documents.Span.InlinesProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14250, System.Windows.Documents.InlineCollection);
};

System.Windows.Documents.Underline.prototype._ctor = function () {
	System.Windows.Documents.Span.prototype._ctor$1.call(this, 126);
};

System.Windows.Documents.Italic.prototype._ctor = function () {
	System.Windows.Documents.Span.prototype._ctor$1.call(this, 127);
};

System.Windows.Documents.Bold.prototype._ctor = function () {
	System.Windows.Documents.Span.prototype._ctor$1.call(this, 128);
};

System.Windows.Documents.Hyperlink.prototype._ctor = function () {
	System.Windows.Documents.Span.prototype._ctor$1.call(this, 347);
};
System.Windows.Documents.Hyperlink.prototype.get_TargetName = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Documents.Hyperlink.TargetNameProperty), System.String);
};
System.Windows.Documents.Hyperlink.prototype.set_TargetName = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Documents.Hyperlink.TargetNameProperty, value);
};
System.Windows.Documents.Hyperlink.prototype.get_NavigateUri = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Documents.Hyperlink.NavigateUriProperty), System.Uri);
};
System.Windows.Documents.Hyperlink.prototype.set_NavigateUri = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Documents.Hyperlink.NavigateUriProperty, value);
};
System.Windows.Documents.Hyperlink.prototype.get_MouseOverForeground = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Documents.Hyperlink.MouseOverForegroundProperty), System.Windows.Media.Brush);
};
System.Windows.Documents.Hyperlink.prototype.set_MouseOverForeground = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Documents.Hyperlink.MouseOverForegroundProperty, value);
};
System.Windows.Documents.Hyperlink.prototype.get_MouseOverTextDecorations = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Documents.Hyperlink.MouseOverTextDecorationsProperty), System.Windows.TextDecorationCollection);
};
System.Windows.Documents.Hyperlink.prototype.set_MouseOverTextDecorations = function (value) {
	if (value !== null) {
		System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Documents.Hyperlink.MouseOverTextDecorationsProperty, value.Decoration.Location);
		return;
	}
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Documents.Hyperlink.MouseOverTextDecorationsProperty, 0);
};
System.Windows.Documents.Hyperlink.prototype.get_HostFrameworkElement = function () {
	return $asm02.MS.Internal.XcpImports.Hyperlink_FindHostFrameworkElement(this);
};
System.Windows.Documents.Hyperlink.prototype.add_Click = function (value) {
	this.Click = System.Delegate.Combine(this.Click, value);
};
System.Windows.Documents.Hyperlink.prototype.remove_Click = function (value) {
	this.Click = System.Delegate.Remove(this.Click, value);
};
System.Windows.Documents.Hyperlink.prototype.get_Command = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Documents.Hyperlink.CommandProperty), System.Windows.Input.ICommand);
};
System.Windows.Documents.Hyperlink.prototype.set_Command = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Documents.Hyperlink.CommandProperty, value);
};
System.Windows.Documents.Hyperlink.prototype.get_CommandParameter = function () {
	return System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Documents.Hyperlink.CommandParameterProperty);
};
System.Windows.Documents.Hyperlink.prototype.set_CommandParameter = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Documents.Hyperlink.CommandParameterProperty, value);
};
System.Windows.Documents.Hyperlink.prototype.ExecuteCommand = function () {
	var commandParameter = this.CommandParameter;
	var command = this.Command;
	if (!((command === null) || !command.ICommand_CanExecute(commandParameter))) {
		command.ICommand_Execute(commandParameter);
	}
};
System.Windows.Documents.Hyperlink.prototype.OnClick = function () {
	var click = this.Click;
	if (click !== null) {
		click(this, new System.Windows.RoutedEventArgs().__Initialize__({
					OriginalSource: this}
			));
	}
	this.ExecuteCommand();
};
System.Windows.Documents.Hyperlink.prototype.OnCreateAutomationPeer = function () {
	return new $asm02.System.Windows.Automation.Peers.HyperlinkAutomationPeer(this);
};
JSIL.MakeProperty(System.Windows.Documents.Hyperlink.prototype, "TargetName", 
	System.Windows.Documents.Hyperlink.prototype.get_TargetName, System.Windows.Documents.Hyperlink.prototype.set_TargetName);
JSIL.MakeProperty(System.Windows.Documents.Hyperlink.prototype, "NavigateUri", 
	System.Windows.Documents.Hyperlink.prototype.get_NavigateUri, System.Windows.Documents.Hyperlink.prototype.set_NavigateUri);
JSIL.MakeProperty(System.Windows.Documents.Hyperlink.prototype, "MouseOverForeground", 
	System.Windows.Documents.Hyperlink.prototype.get_MouseOverForeground, System.Windows.Documents.Hyperlink.prototype.set_MouseOverForeground);
JSIL.MakeProperty(System.Windows.Documents.Hyperlink.prototype, "MouseOverTextDecorations", 
	System.Windows.Documents.Hyperlink.prototype.get_MouseOverTextDecorations, System.Windows.Documents.Hyperlink.prototype.set_MouseOverTextDecorations);
JSIL.MakeProperty(System.Windows.Documents.Hyperlink.prototype, "HostFrameworkElement", 
	System.Windows.Documents.Hyperlink.prototype.get_HostFrameworkElement, null);
JSIL.MakeProperty(System.Windows.Documents.Hyperlink.prototype, "Command", 
	System.Windows.Documents.Hyperlink.prototype.get_Command, System.Windows.Documents.Hyperlink.prototype.set_Command);
JSIL.MakeProperty(System.Windows.Documents.Hyperlink.prototype, "CommandParameter", 
	System.Windows.Documents.Hyperlink.prototype.get_CommandParameter, System.Windows.Documents.Hyperlink.prototype.set_CommandParameter);
System.Windows.Documents.Hyperlink.TargetNameProperty = null;
System.Windows.Documents.Hyperlink.NavigateUriProperty = null;
System.Windows.Documents.Hyperlink.MouseOverForegroundProperty = null;
System.Windows.Documents.Hyperlink.MouseOverTextDecorationsProperty = null;
System.Windows.Documents.Hyperlink.prototype.Click = null;
System.Windows.Documents.Hyperlink.CommandProperty = null;
System.Windows.Documents.Hyperlink.CommandParameterProperty = null;
System.Windows.Documents.Hyperlink._cctor = function () {
	System.Windows.Documents.Hyperlink.TargetNameProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14210, System.String);
	System.Windows.Documents.Hyperlink.NavigateUriProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14211, System.Uri);
	System.Windows.Documents.Hyperlink.MouseOverForegroundProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14212, System.Windows.Media.Brush);
	System.Windows.Documents.Hyperlink.MouseOverTextDecorationsProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14213, System.Windows.TextDecorationCollection);
	System.Windows.Documents.Hyperlink.CommandProperty = System.Windows.DependencyProperty.Register$0("Command", System.Windows.Input.ICommand, System.Windows.Documents.Hyperlink, null);
	System.Windows.Documents.Hyperlink.CommandParameterProperty = System.Windows.DependencyProperty.Register$0("CommandParameter", System.Object, System.Windows.Documents.Hyperlink, null);
};

System.Windows.Documents.LineBreak.prototype._ctor = function () {
	System.Windows.Documents.Inline.prototype._ctor$1.call(this, 111);
};

System.Windows.Documents.InlineUIContainer.prototype._ctor = function () {
	System.Windows.Documents.Inline.prototype._ctor$1.call(this, 349);
};
System.Windows.Documents.InlineUIContainer.prototype.get_Child = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Documents.InlineUIContainer.ChildProperty), System.Windows.UIElement);
};
System.Windows.Documents.InlineUIContainer.prototype.set_Child = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Documents.InlineUIContainer.ChildProperty, value);
};
JSIL.MakeProperty(System.Windows.Documents.InlineUIContainer.prototype, "Child", 
	System.Windows.Documents.InlineUIContainer.prototype.get_Child, System.Windows.Documents.InlineUIContainer.prototype.set_Child);
System.Windows.Documents.InlineUIContainer.ChildProperty = null;
System.Windows.Documents.InlineUIContainer._cctor = function () {
	System.Windows.Documents.InlineUIContainer.ChildProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14151, System.Windows.UIElement);
};

System.Windows.Controls.Panel.prototype._ctor$0 = function () {
	System.Windows.FrameworkElement.prototype._ctor$0.call(this, 114);
};
System.Windows.Controls.Panel.prototype._ctor$1 = function (nKnownTypeIndex) {
	System.Windows.FrameworkElement.prototype._ctor$0.call(this, nKnownTypeIndex);
};
System.Windows.Controls.Panel.prototype.get_Children = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Panel.ChildrenProperty), System.Windows.Controls.UIElementCollection);
};
System.Windows.Controls.Panel.prototype.get_Background = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Panel.BackgroundProperty), System.Windows.Media.Brush);
};
System.Windows.Controls.Panel.prototype.set_Background = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Panel.BackgroundProperty, value);
};
System.Windows.Controls.Panel.prototype.get_IsItemsHost = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Panel.IsItemsHostProperty), System.Boolean);
};
JSIL.OverloadedMethod(System.Windows.Controls.Panel.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);
JSIL.MakeProperty(System.Windows.Controls.Panel.prototype, "Children", 
	System.Windows.Controls.Panel.prototype.get_Children, null);
JSIL.MakeProperty(System.Windows.Controls.Panel.prototype, "Background", 
	System.Windows.Controls.Panel.prototype.get_Background, System.Windows.Controls.Panel.prototype.set_Background);
JSIL.MakeProperty(System.Windows.Controls.Panel.prototype, "IsItemsHost", 
	System.Windows.Controls.Panel.prototype.get_IsItemsHost, null);
System.Windows.Controls.Panel.ChildrenProperty = null;
System.Windows.Controls.Panel.BackgroundProperty = null;
System.Windows.Controls.Panel.IsItemsHostProperty = null;
System.Windows.Controls.Panel._cctor = function () {
	System.Windows.Controls.Panel.ChildrenProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13008, System.Windows.Controls.UIElementCollection);
	System.Windows.Controls.Panel.BackgroundProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13200, System.Windows.Media.Brush);
	System.Windows.Controls.Panel.IsItemsHostProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13201, System.Boolean);
};

System.Windows.Controls.Image.prototype._ctor = function () {
	System.Windows.FrameworkElement.prototype._ctor$0.call(this, 117);
};
System.Windows.Controls.Image.prototype.get_Stretch = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Image.StretchProperty), System.Windows.Media.Stretch);
};
System.Windows.Controls.Image.prototype.set_Stretch = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Image.StretchProperty, value);
};
System.Windows.Controls.Image.prototype.get_Source = function () {
	if (!$asm02.MS.Internal.QuirksMode.ShouldImageAlwaysReturnSourceAsBitmapImage()) {
		return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Image.SourceProperty), System.Windows.Media.ImageSource);
	}
	var bitmapImage = JSIL.TryCast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Image.SourceProperty), System.Windows.Media.Imaging.BitmapImage);
	if (bitmapImage === null) {
		return JSIL.New(System.Windows.Media.Imaging.BitmapImage, "_ctor$0", []);
	}
	return bitmapImage;
};
System.Windows.Controls.Image.prototype.set_Source = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Image.SourceProperty, value);
};
System.Windows.Controls.Image.prototype.add_ImageFailed = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(24303, null), value);
};
System.Windows.Controls.Image.prototype.remove_ImageFailed = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(24303, null), value);
};
System.Windows.Controls.Image.prototype.add_ImageOpened = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(26014, null), value);
};
System.Windows.Controls.Image.prototype.remove_ImageOpened = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(26014, null), value);
};
System.Windows.Controls.Image.prototype.OnCreateAutomationPeer = function () {
	return new System.Windows.Automation.Peers.ImageAutomationPeer(this);
};
JSIL.MakeProperty(System.Windows.Controls.Image.prototype, "Stretch", 
	System.Windows.Controls.Image.prototype.get_Stretch, System.Windows.Controls.Image.prototype.set_Stretch);
JSIL.MakeProperty(System.Windows.Controls.Image.prototype, "Source", 
	System.Windows.Controls.Image.prototype.get_Source, System.Windows.Controls.Image.prototype.set_Source);
System.Windows.Controls.Image.SourceProperty = null;
System.Windows.Controls.Image.StretchProperty = null;
System.Windows.Controls.Image._cctor = function () {
	System.Windows.Controls.Image.SourceProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13402, System.Windows.Media.ImageSource);
	System.Windows.Controls.Image.StretchProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13401, System.Windows.Media.Stretch);
};

System.Windows.Controls.Canvas.prototype._ctor$0 = function () {
	System.Windows.Controls.Panel.prototype._ctor$1.call(this, 42);
};
System.Windows.Controls.Canvas.prototype._ctor$1 = function (nKnownTypeIndex) {
	System.Windows.Controls.Panel.prototype._ctor$1.call(this, nKnownTypeIndex);
};
System.Windows.Controls.Canvas.GetLeft = function (element) {
	return JSIL.Cast(element.GetValue(System.Windows.Controls.Canvas.LeftProperty), System.Double);
};
System.Windows.Controls.Canvas.SetLeft = function (element, length) {
	element.SetValue(System.Windows.Controls.Canvas.LeftProperty, length);
};
System.Windows.Controls.Canvas.GetTop = function (element) {
	return JSIL.Cast(element.GetValue(System.Windows.Controls.Canvas.TopProperty), System.Double);
};
System.Windows.Controls.Canvas.SetTop = function (element, length) {
	element.SetValue(System.Windows.Controls.Canvas.TopProperty, length);
};
System.Windows.Controls.Canvas.GetZIndex = function (element) {
	return JSIL.Cast(element.GetValue(System.Windows.Controls.Canvas.ZIndexProperty), System.Int32);
};
System.Windows.Controls.Canvas.SetZIndex = function (element, value) {
	element.SetValue(System.Windows.Controls.Canvas.ZIndexProperty, value);
};
System.Windows.Controls.Canvas.prototype.MeasureOverride = function (constraint) {
	return System.Windows.FrameworkElement.prototype.MeasureOverride.call(this, constraint);
};
System.Windows.Controls.Canvas.prototype.ArrangeOverride = function (arrangeSize) {
	return System.Windows.FrameworkElement.prototype.ArrangeOverride.call(this, arrangeSize);
};
JSIL.OverloadedMethod(System.Windows.Controls.Canvas.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);
System.Windows.Controls.Canvas.LeftProperty = null;
System.Windows.Controls.Canvas.TopProperty = null;
System.Windows.Controls.Canvas.ZIndexProperty = null;
System.Windows.Controls.Canvas._cctor = function () {
	System.Windows.Controls.Canvas.LeftProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13004, System.Double);
	System.Windows.Controls.Canvas.TopProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13005, System.Double);
	System.Windows.Controls.Canvas.ZIndexProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13011, System.Int32);
};

System.Windows.Controls.TextBlock.prototype._ctor = function () {
	System.Windows.FrameworkElement.prototype._ctor$0.call(this, 109);
};
System.Windows.Controls.TextBlock.prototype.get_FontSize = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.TextBlock.FontSizeProperty), System.Double);
};
System.Windows.Controls.TextBlock.prototype.set_FontSize = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.TextBlock.FontSizeProperty, value);
};
System.Windows.Controls.TextBlock.prototype.get_FontFamily = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.TextBlock.FontFamilyProperty), System.Windows.Media.FontFamily);
};
System.Windows.Controls.TextBlock.prototype.set_FontFamily = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.TextBlock.FontFamilyProperty, value);
};
System.Windows.Controls.TextBlock.prototype.get_FontWeight = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.TextBlock.FontWeightProperty), System.Windows.FontWeight);
};
System.Windows.Controls.TextBlock.prototype.set_FontWeight = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.TextBlock.FontWeightProperty, value.MemberwiseClone());
};
System.Windows.Controls.TextBlock.prototype.get_FontStyle = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.TextBlock.FontStyleProperty), System.Windows.FontStyle);
};
System.Windows.Controls.TextBlock.prototype.set_FontStyle = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.TextBlock.FontStyleProperty, value.MemberwiseClone());
};
System.Windows.Controls.TextBlock.prototype.get_FontStretch = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.TextBlock.FontStretchProperty), System.Windows.FontStretch);
};
System.Windows.Controls.TextBlock.prototype.set_FontStretch = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.TextBlock.FontStretchProperty, value.MemberwiseClone());
};
System.Windows.Controls.TextBlock.prototype.get_Foreground = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.TextBlock.ForegroundProperty), System.Windows.Media.Brush);
};
System.Windows.Controls.TextBlock.prototype.set_Foreground = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.TextBlock.ForegroundProperty, value);
};
System.Windows.Controls.TextBlock.prototype.get_TextWrapping = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.TextBlock.TextWrappingProperty), System.Windows.TextWrapping);
};
System.Windows.Controls.TextBlock.prototype.set_TextWrapping = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.TextBlock.TextWrappingProperty, value);
};
System.Windows.Controls.TextBlock.prototype.get_TextTrimming = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.TextBlock.TextTrimmingProperty), System.Windows.TextTrimming);
};
System.Windows.Controls.TextBlock.prototype.set_TextTrimming = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.TextBlock.TextTrimmingProperty, value);
};
System.Windows.Controls.TextBlock.prototype.get_TextAlignment = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.TextBlock.TextAlignmentProperty), System.Windows.TextAlignment);
};
System.Windows.Controls.TextBlock.prototype.set_TextAlignment = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.TextBlock.TextAlignmentProperty, value);
};
System.Windows.Controls.TextBlock.prototype.get_Text = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.TextBlock.TextProperty), System.String);
};
System.Windows.Controls.TextBlock.prototype.set_Text = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.TextBlock.TextProperty, value);
};
System.Windows.Controls.TextBlock.prototype.get_Padding = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.TextBlock.PaddingProperty), System.Windows.Thickness);
};
System.Windows.Controls.TextBlock.prototype.set_Padding = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.TextBlock.PaddingProperty, value.MemberwiseClone());
};
System.Windows.Controls.TextBlock.prototype.get_LineHeight = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.TextBlock.LineHeightProperty), System.Double);
};
System.Windows.Controls.TextBlock.prototype.set_LineHeight = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.TextBlock.LineHeightProperty, value);
};
System.Windows.Controls.TextBlock.prototype.get_LineStackingStrategy = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.TextBlock.LineStackingStrategyProperty), System.Windows.LineStackingStrategy);
};
System.Windows.Controls.TextBlock.prototype.set_LineStackingStrategy = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.TextBlock.LineStackingStrategyProperty, value);
};
System.Windows.Controls.TextBlock.prototype.get_TextDecorations = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.TextBlock.TextDecorationsProperty), System.Windows.TextDecorationCollection);
};
System.Windows.Controls.TextBlock.prototype.set_TextDecorations = function (value) {
	if (value !== null) {
		System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.TextBlock.TextDecorationsProperty, value.Decoration.Location);
		return;
	}
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.TextBlock.TextDecorationsProperty, 0);
};
System.Windows.Controls.TextBlock.prototype.get_Inlines = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.TextBlock.InlinesProperty), System.Windows.Documents.InlineCollection);
};
System.Windows.Controls.TextBlock.prototype.get_FontSource = function () {
	return this._fontSource;
};
System.Windows.Controls.TextBlock.prototype.set_FontSource = function (value) {
	this._fontSource = value;
	this.UpdateFontSource(this._fontSource);
};
System.Windows.Controls.TextBlock.prototype.get_BaselineOffset = function () {
	return $asm02.MS.Internal.XcpImports.TextBlock_GetBaselineOffset(this);
};
System.Windows.Controls.TextBlock.prototype.OnCreateAutomationPeer = function () {
	return new System.Windows.Automation.Peers.TextBlockAutomationPeer(this);
};
System.Windows.Controls.TextBlock.prototype.GetPlainText = function () {
	return this.Text;
};
System.Windows.Controls.TextBlock.prototype.UpdateFontSource = function (fontSource) {
	if (!((fontSource !== null) && !fontSource.IsEmpty())) {
		$asm02.MS.Internal.XcpImports.SetFontSourceNull(this);
		return;
	}
	fontSource.SetTextFontSourceFromStream(this);
};
JSIL.MakeProperty(System.Windows.Controls.TextBlock.prototype, "FontSize", 
	System.Windows.Controls.TextBlock.prototype.get_FontSize, System.Windows.Controls.TextBlock.prototype.set_FontSize);
JSIL.MakeProperty(System.Windows.Controls.TextBlock.prototype, "FontFamily", 
	System.Windows.Controls.TextBlock.prototype.get_FontFamily, System.Windows.Controls.TextBlock.prototype.set_FontFamily);
JSIL.MakeProperty(System.Windows.Controls.TextBlock.prototype, "FontWeight", 
	System.Windows.Controls.TextBlock.prototype.get_FontWeight, System.Windows.Controls.TextBlock.prototype.set_FontWeight);
JSIL.MakeProperty(System.Windows.Controls.TextBlock.prototype, "FontStyle", 
	System.Windows.Controls.TextBlock.prototype.get_FontStyle, System.Windows.Controls.TextBlock.prototype.set_FontStyle);
JSIL.MakeProperty(System.Windows.Controls.TextBlock.prototype, "FontStretch", 
	System.Windows.Controls.TextBlock.prototype.get_FontStretch, System.Windows.Controls.TextBlock.prototype.set_FontStretch);
JSIL.MakeProperty(System.Windows.Controls.TextBlock.prototype, "Foreground", 
	System.Windows.Controls.TextBlock.prototype.get_Foreground, System.Windows.Controls.TextBlock.prototype.set_Foreground);
JSIL.MakeProperty(System.Windows.Controls.TextBlock.prototype, "TextWrapping", 
	System.Windows.Controls.TextBlock.prototype.get_TextWrapping, System.Windows.Controls.TextBlock.prototype.set_TextWrapping);
JSIL.MakeProperty(System.Windows.Controls.TextBlock.prototype, "TextTrimming", 
	System.Windows.Controls.TextBlock.prototype.get_TextTrimming, System.Windows.Controls.TextBlock.prototype.set_TextTrimming);
JSIL.MakeProperty(System.Windows.Controls.TextBlock.prototype, "TextAlignment", 
	System.Windows.Controls.TextBlock.prototype.get_TextAlignment, System.Windows.Controls.TextBlock.prototype.set_TextAlignment);
JSIL.MakeProperty(System.Windows.Controls.TextBlock.prototype, "Text", 
	System.Windows.Controls.TextBlock.prototype.get_Text, System.Windows.Controls.TextBlock.prototype.set_Text);
JSIL.MakeProperty(System.Windows.Controls.TextBlock.prototype, "Padding", 
	System.Windows.Controls.TextBlock.prototype.get_Padding, System.Windows.Controls.TextBlock.prototype.set_Padding);
JSIL.MakeProperty(System.Windows.Controls.TextBlock.prototype, "LineHeight", 
	System.Windows.Controls.TextBlock.prototype.get_LineHeight, System.Windows.Controls.TextBlock.prototype.set_LineHeight);
JSIL.MakeProperty(System.Windows.Controls.TextBlock.prototype, "LineStackingStrategy", 
	System.Windows.Controls.TextBlock.prototype.get_LineStackingStrategy, System.Windows.Controls.TextBlock.prototype.set_LineStackingStrategy);
JSIL.MakeProperty(System.Windows.Controls.TextBlock.prototype, "TextDecorations", 
	System.Windows.Controls.TextBlock.prototype.get_TextDecorations, System.Windows.Controls.TextBlock.prototype.set_TextDecorations);
JSIL.MakeProperty(System.Windows.Controls.TextBlock.prototype, "Inlines", 
	System.Windows.Controls.TextBlock.prototype.get_Inlines, null);
JSIL.MakeProperty(System.Windows.Controls.TextBlock.prototype, "FontSource", 
	System.Windows.Controls.TextBlock.prototype.get_FontSource, System.Windows.Controls.TextBlock.prototype.set_FontSource);
JSIL.MakeProperty(System.Windows.Controls.TextBlock.prototype, "BaselineOffset", 
	System.Windows.Controls.TextBlock.prototype.get_BaselineOffset, null);
System.Windows.Controls.TextBlock.FontSizeProperty = null;
System.Windows.Controls.TextBlock.FontFamilyProperty = null;
System.Windows.Controls.TextBlock.FontWeightProperty = null;
System.Windows.Controls.TextBlock.FontStyleProperty = null;
System.Windows.Controls.TextBlock.FontStretchProperty = null;
System.Windows.Controls.TextBlock.ForegroundProperty = null;
System.Windows.Controls.TextBlock.TextDecorationsProperty = null;
System.Windows.Controls.TextBlock.TextWrappingProperty = null;
System.Windows.Controls.TextBlock.TextTrimmingProperty = null;
System.Windows.Controls.TextBlock.TextAlignmentProperty = null;
System.Windows.Controls.TextBlock.TextProperty = null;
System.Windows.Controls.TextBlock.InlinesProperty = null;
System.Windows.Controls.TextBlock.PaddingProperty = null;
System.Windows.Controls.TextBlock.LineHeightProperty = null;
System.Windows.Controls.TextBlock.LineStackingStrategyProperty = null;
System.Windows.Controls.TextBlock.prototype._fontSource = null;
System.Windows.Controls.TextBlock._cctor = function () {
	System.Windows.Controls.TextBlock.FontSizeProperty = System.Windows.DependencyProperty.RegisterCoreProperty(4208404, System.Double);
	System.Windows.Controls.TextBlock.FontFamilyProperty = System.Windows.DependencyProperty.RegisterCoreProperty(4208405, System.Windows.Media.FontFamily);
	System.Windows.Controls.TextBlock.FontWeightProperty = System.Windows.DependencyProperty.RegisterCoreProperty(4208407, System.Windows.FontWeight);
	System.Windows.Controls.TextBlock.FontStyleProperty = System.Windows.DependencyProperty.RegisterCoreProperty(4208408, System.Windows.FontStyle);
	System.Windows.Controls.TextBlock.FontStretchProperty = System.Windows.DependencyProperty.RegisterCoreProperty(4208409, System.Windows.FontStretch);
	System.Windows.Controls.TextBlock.ForegroundProperty = System.Windows.DependencyProperty.RegisterCoreProperty(4208406, System.Windows.Media.Brush);
	System.Windows.Controls.TextBlock.TextDecorationsProperty = System.Windows.DependencyProperty.RegisterCoreProperty(4208410, System.Windows.TextDecorationCollection);
	System.Windows.Controls.TextBlock.TextWrappingProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14201, System.Windows.TextWrapping);
	System.Windows.Controls.TextBlock.TextTrimmingProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14207, System.Windows.TextTrimming);
	System.Windows.Controls.TextBlock.TextAlignmentProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14202, System.Windows.TextAlignment);
	System.Windows.Controls.TextBlock.TextProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14200, System.String);
	System.Windows.Controls.TextBlock.InlinesProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14254, System.Windows.Documents.InlineCollection);
	System.Windows.Controls.TextBlock.PaddingProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14203, System.Windows.Thickness);
	System.Windows.Controls.TextBlock.LineHeightProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14204, System.Double);
	System.Windows.Controls.TextBlock.LineStackingStrategyProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14205, System.Windows.LineStackingStrategy);
};

System.Windows.Controls.MediaElement.prototype._ctor = function () {
	this._internalAttributes = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.String, System.String), "_ctor$2", [System.StringComparer.OrdinalIgnoreCase]);
	System.Windows.FrameworkElement.prototype._ctor$0.call(this, 116);
};
System.Windows.Controls.MediaElement.prototype.add_MediaOpened = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23100, null), value);
};
System.Windows.Controls.MediaElement.prototype.remove_MediaOpened = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23100, null), value);
};
System.Windows.Controls.MediaElement.prototype.add_MediaEnded = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23101, null), value);
};
System.Windows.Controls.MediaElement.prototype.remove_MediaEnded = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23101, null), value);
};
System.Windows.Controls.MediaElement.prototype.add_DownloadProgressChanged = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23202, null), value);
};
System.Windows.Controls.MediaElement.prototype.remove_DownloadProgressChanged = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23202, null), value);
};
System.Windows.Controls.MediaElement.prototype.add_BufferingProgressChanged = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23203, null), value);
};
System.Windows.Controls.MediaElement.prototype.remove_BufferingProgressChanged = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23203, null), value);
};
System.Windows.Controls.MediaElement.prototype.add_CurrentStateChanged = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23204, null), value);
};
System.Windows.Controls.MediaElement.prototype.remove_CurrentStateChanged = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23204, null), value);
};
System.Windows.Controls.MediaElement.prototype.add_LogReady = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23206, null), value);
};
System.Windows.Controls.MediaElement.prototype.remove_LogReady = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23206, null), value);
};
System.Windows.Controls.MediaElement.prototype.get_Source = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.MediaElement.SourceProperty), System.Uri);
};
System.Windows.Controls.MediaElement.prototype.set_Source = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.MediaElement.SourceProperty, value);
};
System.Windows.Controls.MediaElement.prototype.get_Stretch = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.MediaElement.StretchProperty), System.Windows.Media.Stretch);
};
System.Windows.Controls.MediaElement.prototype.set_Stretch = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.MediaElement.StretchProperty, value);
};
System.Windows.Controls.MediaElement.prototype.get_IsMuted = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.MediaElement.IsMutedProperty), System.Boolean);
};
System.Windows.Controls.MediaElement.prototype.set_IsMuted = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.MediaElement.IsMutedProperty, value);
};
System.Windows.Controls.MediaElement.prototype.get_AutoPlay = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.MediaElement.AutoPlayProperty), System.Boolean);
};
System.Windows.Controls.MediaElement.prototype.set_AutoPlay = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.MediaElement.AutoPlayProperty, value);
};
System.Windows.Controls.MediaElement.prototype.get_Volume = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.MediaElement.VolumeProperty), System.Double);
};
System.Windows.Controls.MediaElement.prototype.set_Volume = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.MediaElement.VolumeProperty, value);
};
System.Windows.Controls.MediaElement.prototype.get_Balance = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.MediaElement.BalanceProperty), System.Double);
};
System.Windows.Controls.MediaElement.prototype.set_Balance = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.MediaElement.BalanceProperty, value);
};
System.Windows.Controls.MediaElement.prototype.get_NaturalVideoHeight = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.MediaElement.NaturalVideoHeightProperty), System.Int32);
};
System.Windows.Controls.MediaElement.prototype.get_NaturalVideoWidth = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.MediaElement.NaturalVideoWidthProperty), System.Int32);
};
System.Windows.Controls.MediaElement.prototype.get_NaturalDuration = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.MediaElement.NaturalDurationProperty), System.Windows.Duration);
};
System.Windows.Controls.MediaElement.prototype.get_Position = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.MediaElement.PositionProperty), System.TimeSpan);
};
System.Windows.Controls.MediaElement.prototype.set_Position = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.MediaElement.PositionProperty, value.MemberwiseClone());
};
System.Windows.Controls.MediaElement.prototype.get_DownloadProgress = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.MediaElement.DownloadProgressProperty), System.Double);
};
System.Windows.Controls.MediaElement.prototype.get_BufferingProgress = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.MediaElement.BufferingProgressProperty), System.Double);
};
System.Windows.Controls.MediaElement.prototype.get_DownloadProgressOffset = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.MediaElement.DownloadProgressOffsetProperty), System.Double);
};
System.Windows.Controls.MediaElement.prototype.get_CurrentState = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.MediaElement.CurrentStateProperty), System.Windows.Media.MediaElementState);
};
System.Windows.Controls.MediaElement.prototype.get_BufferingTime = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.MediaElement.BufferingTimeProperty), System.TimeSpan);
};
System.Windows.Controls.MediaElement.prototype.set_BufferingTime = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.MediaElement.BufferingTimeProperty, value.MemberwiseClone());
};
System.Windows.Controls.MediaElement.prototype.get_Markers = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.MediaElement.MarkersProperty), System.Windows.Media.TimelineMarkerCollection);
};
System.Windows.Controls.MediaElement.prototype.get_CanSeek = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.MediaElement.CanSeekProperty), System.Boolean);
};
System.Windows.Controls.MediaElement.prototype.get_CanPause = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.MediaElement.CanPauseProperty), System.Boolean);
};
System.Windows.Controls.MediaElement.prototype.get_AudioStreamCount = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.MediaElement.AudioStreamCountProperty), System.Int32);
};
System.Windows.Controls.MediaElement.prototype.get_AudioStreamIndex = function () {
	var value = System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.MediaElement.AudioStreamIndexProperty);
	if (value === null) {
		return new (System.Nullable$b1.Of(System.Int32)) ();
	}
	return new (System.Nullable$b1.Of(System.Int32)) (JSIL.Cast(value, System.Int32));
};
System.Windows.Controls.MediaElement.prototype.set_AudioStreamIndex = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.MediaElement.AudioStreamIndexProperty, value.MemberwiseClone());
};
System.Windows.Controls.MediaElement.prototype.get_RenderedFramesPerSecond = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.MediaElement.RenderedFramesPerSecondProperty), System.Double);
};
System.Windows.Controls.MediaElement.prototype.get_DroppedFramesPerSecond = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.MediaElement.DroppedFramesPerSecondProperty), System.Double);
};
System.Windows.Controls.MediaElement.prototype.Stop = function () {
	$asm02.MS.Internal.XcpImports.MediaElement_Stop(this);
};
System.Windows.Controls.MediaElement.prototype.Play = function () {
	$asm02.MS.Internal.XcpImports.MediaElement_Play(this);
};
System.Windows.Controls.MediaElement.prototype.Pause = function () {
	$asm02.MS.Internal.XcpImports.MediaElement_Pause(this);
};
System.Windows.Controls.MediaElement.prototype.SetSource$0 = function (stream) {
	if (stream === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["stream"]);
	}
	this.m_streamWrapperSource = $asm02.MS.Internal.XcpImports.MediaElement_SetStreamSource(this, stream);
};
System.Windows.Controls.MediaElement.prototype.SetSource$1 = function (mediaStreamSource) {
	if (mediaStreamSource === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["mediaStreamSource"]);
	}
	if (this._previousMediaStreamSource !== null) {
		System.Windows.DependencyObject.prototype.get_Dispatcher.call(this).BeginInvoke$1(JSIL.Delegate.New("System.Windows.Controls.MediaElement/SetMediaStreamSource", this, System.Windows.Controls.MediaElement.prototype.SetSource$1), [mediaStreamSource]);
		return;
	}
	this._previousMediaStreamSource = this._mediaStreamSource;
	if (this._previousMediaStreamSource !== null) {
		this._previousMediaStreamSource.Close();
	}
	this._mediaStreamSource = null;
	if (!mediaStreamSource.IsValid) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
	}
	this._mediaStreamSource = mediaStreamSource;
	this._mediaStreamSource.SetMediaElement(this);
	$asm02.MS.Internal.XcpImports.MediaElement_SetMediaStreamSource(this);
};
System.Windows.Controls.MediaElement.prototype.GetValueInternal = function (dp) {
	if (dp === System.Windows.Controls.MediaElement.AttributesProperty) {
		return this.Attributes;
	}
	return System.Windows.FrameworkElement.prototype.GetValueInternal.call(this, dp);
};
System.Windows.Controls.MediaElement.prototype.RequestLog = function () {
	$asm02.MS.Internal.XcpImports.MediaElement_RequestLog(this);
};
System.Windows.Controls.MediaElement._OpenMedia = function (nativeTarget) {
	try {
		var mediaElement = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeTarget), System.Windows.Controls.MediaElement);
		if (mediaElement.IsMediaStreamSourceValid()) {
			mediaElement._mediaStreamSource.OpenMedia();
		}
	} catch ($exception) {
		var arg_21_0 = $exception;
		return $asm02.MS.Internal.Error.GetXresultForException(arg_21_0);
	}
	return 0;
};
System.Windows.Controls.MediaElement._CloseMedia = function (nativeTarget) {
	try {
		var mediaElement = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeTarget), System.Windows.Controls.MediaElement);
		if (mediaElement._previousMediaStreamSource !== null) {
			mediaElement._previousMediaStreamSource.Close();
			mediaElement._previousMediaStreamSource = null;
		} else if (mediaElement._mediaStreamSource !== null) {
			mediaElement._mediaStreamSource.Close();
			mediaElement._mediaStreamSource = null;
		}
	} catch ($exception) {
		var arg_44_0 = $exception;
		return $asm02.MS.Internal.Error.GetXresultForException(arg_44_0);
	}
	return 0;
};
System.Windows.Controls.MediaElement._Seek = function (nativeTarget, seekTimeInHundredNanoSeconds) {
	try {
		var mediaElement = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeTarget), System.Windows.Controls.MediaElement);
		if (mediaElement.IsMediaStreamSourceValid()) {
			mediaElement._mediaStreamSource.Seek(seekTimeInHundredNanoSeconds);
		}
	} catch ($exception) {
		var arg_22_0 = $exception;
		return $asm02.MS.Internal.Error.GetXresultForException(arg_22_0);
	}
	return 0;
};
System.Windows.Controls.MediaElement._GetSample = function (nativeTarget, streamType) {
	try {
		var mediaElement = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeTarget), System.Windows.Controls.MediaElement);
		if (!((mediaElement === null) || !mediaElement.IsMediaStreamSourceValid())) {
			mediaElement._mediaStreamSource.GetSample(streamType);
		}
	} catch ($exception) {
		var arg_25_0 = $exception;
		return $asm02.MS.Internal.Error.GetXresultForException(arg_25_0);
	}
	return 0;
};
System.Windows.Controls.MediaElement._GetDiagnostic = function (nativeTarget, diagnosticKind) {
	try {
		var mediaElement = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeTarget), System.Windows.Controls.MediaElement);
		if (mediaElement.IsMediaStreamSourceValid()) {
			mediaElement._mediaStreamSource.GetDiagnostic(diagnosticKind);
		}
	} catch ($exception) {
		var arg_22_0 = $exception;
		return $asm02.MS.Internal.Error.GetXresultForException(arg_22_0);
	}
	return 0;
};
System.Windows.Controls.MediaElement._SwitchMediaStream = function (nativeTarget, mediaStreamDescriptionIndex) {
	try {
		var mediaElement = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeTarget), System.Windows.Controls.MediaElement);
		if (mediaElement.IsMediaStreamSourceValid()) {
			mediaElement._mediaStreamSource.SwitchMediaStream(mediaElement._availableMediaStreams.get_Item(mediaStreamDescriptionIndex));
		}
	} catch ($exception) {
		var arg_2D_0 = $exception;
		return $asm02.MS.Internal.Error.GetXresultForException(arg_2D_0);
	}
	return 0;
};
System.Windows.Controls.MediaElement._GetAudioBufferLength = function (nativeTarget, /* ref */ iAudioBufferLength) {
	try {
		var mediaElement = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeTarget), System.Windows.Controls.MediaElement);
		if (mediaElement.IsMediaStreamSourceValid()) {
			iAudioBufferLength.value = mediaElement._mediaStreamSource.AudioBufferLength;
		}
	} catch ($exception) {
		var arg_23_0 = $exception;
		return $asm02.MS.Internal.Error.GetXresultForException(arg_23_0);
	}
	return 0;
};
System.Windows.Controls.MediaElement.prototype.MediaSourceReportOpenMediaCompleted = function (mediaStreamAttributes, availableMediaStreams) {
	this.CheckMediaStreamSource();
	var enumerator = mediaStreamAttributes.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current.MemberwiseClone();
			switch (Number(current.Key)) {
				case 0: 
				case 1: 
				case 2: 
					break;
				default: 
					throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
			}
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	this._availableMediaStreams = new (System.Collections.Generic.List$b1.Of(System.Windows.Media.MediaStreamDescription)) (availableMediaStreams);
	var num = 0;
	var enumerator2 = (this._availableMediaStreams.GetEnumerator());
	try {
	__loop1__: 
		while (enumerator2.MoveNext()) {
			var current2 = enumerator2.Current;
			current2.internalIndex = num;
			++num;
		}
	} finally {
		enumerator2.IDisposable_Dispose();
	}
	$asm02.MS.Internal.XcpImports.MediaStreamSource_SetMediaOpenStreamCount(this, this._availableMediaStreams.Count);
	var enumerator3 = mediaStreamAttributes.IEnumerable$b1_GetEnumerator();
	try {
	__loop2__: 
		while (enumerator3.IEnumerator_MoveNext()) {
			var current3 = enumerator3.IEnumerator$b1_Current.MemberwiseClone();
			$asm02.MS.Internal.XcpImports.MediaStreamSource_SetMediaOpenAttribute(this, -1, current3.Key.toString(), current3.Value);
		}
	} finally {
		if (enumerator3 !== null) {
			enumerator3.IDisposable_Dispose();
		}
	}
	var enumerator4 = (this._availableMediaStreams.GetEnumerator());
	try {
	__loop3__: 
		while (enumerator4.MoveNext()) {
			var current4 = enumerator4.Current;
			$asm02.MS.Internal.XcpImports.MediaStreamSource_SetMediaOpenStreamDescription(this, current4.internalIndex, current4.Type);
			var enumerator5 = current4.MediaAttributes.IEnumerable$b1_GetEnumerator();
			try {
			__loop4__: 
				while (enumerator5.IEnumerator_MoveNext()) {
					var current5 = enumerator5.IEnumerator$b1_Current.MemberwiseClone();
					$asm02.MS.Internal.XcpImports.MediaStreamSource_SetMediaOpenAttribute(this, current4.internalIndex, current5.Key.toString(), current5.Value);
				}
			} finally {
				if (enumerator5 !== null) {
					enumerator5.IDisposable_Dispose();
				}
			}
		}
	} finally {
		enumerator4.IDisposable_Dispose();
	}
	$asm02.MS.Internal.XcpImports.MediaStreamSource_OnOpenMediaCompleted(this);
};
System.Windows.Controls.MediaElement.prototype.MediaSourceReportSeekCompleted = function (timeSeekedTo) {
	this.CheckMediaStreamSource();
	if ($asm02.MS.Internal.XcpImports.DependencyObject_IsPointerValid(this)) {
		$asm02.MS.Internal.XcpImports.MediaStreamSource_OnSeekCompleted(this, timeSeekedTo);
	}
};
System.Windows.Controls.MediaElement.prototype.MediaSourceReportGetSampleCompleted = function (mediaStreamSample) {
	this.CheckMediaStreamSource();
	var streamWrapper = mediaStreamSample.StreamWrapper;
	var array = null;
	var text = System.String.Empty;
	var attributeCount = 0;
	if (mediaStreamSample.Attributes !== null) {
		array = JSIL.Array.New(System.Int32, (mediaStreamSample.Attributes.ICollection$b1_Count * 2));
		var enumerator = mediaStreamSample.Attributes.IEnumerable$b1_GetEnumerator();
		try {
		__loop0__: 
			while (enumerator.IEnumerator_MoveNext()) {
				var current = enumerator.IEnumerator$b1_Current.MemberwiseClone();
				text = ((text + current.Key.toString()));
				array[attributeCount++] = current.Key.toString().length;
				text = ((text + current.Value));
				array[attributeCount++] = current.Value.length;
			}
		} finally {
			if (enumerator !== null) {
				enumerator.IDisposable_Dispose();
			}
		}
	}
	if (!(!$asm02.MS.Internal.XcpImports.DependencyObject_IsPointerValid(this) || ((streamWrapper !== null) && 
				!streamWrapper.IsNativePointerValid()))) {
		$asm02.MS.Internal.XcpImports.MediaStreamSource_OnGetSampleCompleted(
			this, 
			this.GetStreamIndexFromDescription(mediaStreamSample.MediaStreamDescription), 
			streamWrapper, 
			JSIL.TryCast(mediaStreamSample.Stream, $asm02.MS.Internal.InternalStreamWrapper), 
			mediaStreamSample.Offset, 
			mediaStreamSample.Count, 
			mediaStreamSample.Timestamp, 
			mediaStreamSample.Duration, 
			attributeCount, 
			array, 
			text
		);
	}
};
System.Windows.Controls.MediaElement.prototype.MediaSourceReportGetSampleProgress = function (bufferingProgress) {
	this.CheckMediaStreamSource();
	if ($asm02.MS.Internal.XcpImports.DependencyObject_IsPointerValid(this)) {
		$asm02.MS.Internal.XcpImports.MediaStreamSource_OnGetSampleProgress(this, bufferingProgress);
	}
};
System.Windows.Controls.MediaElement.prototype.MediaSourceReportGetDiagnosticCompleted = function (diagnosticKind, diagnosticValue) {
	this.CheckMediaStreamSource();
	if ($asm02.MS.Internal.XcpImports.DependencyObject_IsPointerValid(this)) {
		$asm02.MS.Internal.XcpImports.MediaStreamSource_OnGetDiagonosticCompleted(this, diagnosticKind, diagnosticValue);
	}
};
System.Windows.Controls.MediaElement.prototype.MediaSourceReportSwitchMediaStreamCompleted = function (mediaStreamDescription) {
	this.CheckMediaStreamSource();
	if ($asm02.MS.Internal.XcpImports.DependencyObject_IsPointerValid(this)) {
		$asm02.MS.Internal.XcpImports.MediaStreamSource_OnSwitchMediaStreamCompleted(this, this.GetStreamIndexFromDescription(mediaStreamDescription));
	}
};
System.Windows.Controls.MediaElement.prototype.MediaSourceErrorOccurred = function (errorMessage, mediaStreamSource) {
	if (this._previousMediaStreamSource === mediaStreamSource) {
		this._previousMediaStreamSource.IsValid = false;
		this._previousMediaStreamSource = null;
		return;
	}
	if ($asm02.MS.Internal.XcpImports.DependencyObject_IsPointerValid(this)) {
		$asm02.MS.Internal.XcpImports.MediaStreamSource_OnMediaStreamError(this, errorMessage);
	}
};
System.Windows.Controls.MediaElement._AcquireLicenseAbort = function (f_nativeTarget) {
	var result = 0;
	try {
		var mediaElement = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(f_nativeTarget), System.Windows.Controls.MediaElement);
		mediaElement.LicenseAcquirer.CancelAsync();
	} catch ($exception) {
		var arg_1B_0 = $exception;
		try {
			result = $asm02.MS.Internal.Error.GetXresultForException(arg_1B_0);
		} catch ($exception) {
			result = -2146492416;
		}
	}
	return result;
};
System.Windows.Controls.MediaElement._AcquireLicenseBegin = function (f_nativeTarget, f_pDrmHeader, f_cbDrmHeader) {
	var result = 0;
	try {
		if (!((f_cbDrmHeader <= 2147483647) && 
				(f_cbDrmHeader !== 0) && !System.IntPtr.op_Equality(System.IntPtr.Zero, f_pDrmHeader))) {
			result = -2147024809;
		} else {
			var internalMemoryStream = new $asm02.MS.Internal.InternalMemoryStream(f_pDrmHeader, f_cbDrmHeader, null);
			$asm02.MS.Internal.XcpImports.AddRefNativeObject$1(f_pDrmHeader);
			var array = JSIL.Array.New(System.Byte, JSIL.UntranslatableInstruction("conv.ovf.i:IntPtr[exp:Int32](callvirtgetter:Int64[exp:IntPtr](Stream::get_Length, ldloc:InternalMemoryStream[exp:Stream](internalMemoryStream)))"));
			internalMemoryStream.Read(array, 0, internalMemoryStream.Length);
			var mediaElement = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(f_nativeTarget), System.Windows.Controls.MediaElement);
			mediaElement.AcquireLicenseBegin(array);
		}
	} catch ($exception) {
		var arg_67_0 = $exception;
		try {
			result = $asm02.MS.Internal.Error.GetXresultForException(arg_67_0);
		} catch ($exception) {
			result = -2146492416;
		}
	}
	return result;
};
System.Windows.Controls.MediaElement.prototype.GetStreamIndexFromDescription = function (mediaStreamDescription) {
	if (!((mediaStreamDescription.internalIndex >= 0) && (mediaStreamDescription.internalIndex < this._availableMediaStreams.Count))) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
	}
	return mediaStreamDescription.internalIndex;
};
System.Windows.Controls.MediaElement.prototype.CheckMediaStreamSource = function () {
	if (!this._mediaStreamSource.IsValid) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
	}
};
System.Windows.Controls.MediaElement.prototype.IsMediaStreamSourceValid = function () {
	return !((this._mediaStreamSource === null) || !this._mediaStreamSource.IsValid);
};
System.Windows.Controls.MediaElement.prototype.EnsureLicenseAcquirer = function () {
	if (this._licenseAcquirer === null) {
		this.LicenseAcquirer = new System.Windows.Media.LicenseAcquirer();
	}
};
System.Windows.Controls.MediaElement.prototype.AcquireLicenseComplete = function (sender, e) {
	if ($asm02.MS.Internal.XcpImports.DependencyObject_IsPointerValid(this)) {
		$asm02.MS.Internal.XcpImports.MediaElement_AcquireLicenseComplete$1(this, e.Enumerator, e.HrResult);
	}
};
System.Windows.Controls.MediaElement.prototype.AcquireLicenseBegin = function (f_rgbDrmHeader) {
	this.EnsureLicenseAcquirer();
	if (this._acquireLicenseCompleteHandler === null) {
		this._acquireLicenseCompleteHandler = JSIL.Delegate.New("System.EventHandler`1[System.Windows.Media.AcquireLicenseCompletedEventArgs]", this, System.Windows.Controls.MediaElement.prototype.AcquireLicenseComplete);
	}
	this._licenseAcquirer.remove__MEAcquireLicenseCompleted(this._acquireLicenseCompleteHandler);
	this._licenseAcquirer.add__MEAcquireLicenseCompleted(this._acquireLicenseCompleteHandler);
	this._licenseAcquirer._AcquireLicenseAsyncMediaElement(f_rgbDrmHeader);
};
System.Windows.Controls.MediaElement.prototype.add_MediaFailed = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23102, null), value);
};
System.Windows.Controls.MediaElement.prototype.remove_MediaFailed = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23102, null), value);
};
System.Windows.Controls.MediaElement.prototype.add_MarkerReached = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23205, null), value);
};
System.Windows.Controls.MediaElement.prototype.remove_MarkerReached = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23205, null), value);
};
System.Windows.Controls.MediaElement.prototype.get_Attributes = function () {
	var mediaAttributeCollection = JSIL.TryCast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.MediaElement._InternalAttributesProperty), $asm02.MS.Internal.MediaAttributeCollection);
	var flag = false;
	if (!((mediaAttributeCollection !== null) && (mediaAttributeCollection.Count === this._internalAttributes.Count))) {
		flag = true;
	} else {
	__loop0__: 
		for (var i = 0; i < mediaAttributeCollection.Count; ++i) {
			var mediaAttribute = mediaAttributeCollection.get_Item(i);
			var key = JSIL.Cast(mediaAttribute.GetValue(System.Windows.FrameworkElement.NameProperty), System.String);
			var b = JSIL.Cast(mediaAttribute.GetValue($asm02.MS.Internal.MediaAttribute.ValueProperty), System.String);
			if (this._internalAttributes.get_Item(key) != b) {
				flag = true;
				break __loop0__;
			}
		}
	}
	if (flag) {
		this._internalAttributes.Clear();
		if (mediaAttributeCollection !== null) {
			var enumerator = mediaAttributeCollection.GetEnumerator();
			try {
			__loop1__: 
				while (enumerator.IEnumerator_MoveNext()) {
					var current = enumerator.IEnumerator$b1_Current;
					var key2 = JSIL.Cast(current.GetValue(System.Windows.FrameworkElement.NameProperty), System.String);
					var value = JSIL.Cast(current.GetValue($asm02.MS.Internal.MediaAttribute.ValueProperty), System.String);
					this._internalAttributes.Add(key2, value);
				}
			} finally {
				if (enumerator !== null) {
					enumerator.IDisposable_Dispose();
				}
			}
		}
	}
	return this._internalAttributes;
};
System.Windows.Controls.MediaElement.prototype.get_LicenseAcquirer = function () {
	this.EnsureLicenseAcquirer();
	return this._licenseAcquirer;
};
System.Windows.Controls.MediaElement.prototype.set_LicenseAcquirer = function (value) {
	if (value === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["Value"]);
	}
	value._MediaElementSetBindStatus(true);
	if (this._licenseAcquirer !== null) {
		try {
			this._licenseAcquirer._MediaElementSetBindStatus(false);
		} catch ($exception) {
			value._MediaElementSetBindStatus(false);
			throw $exception;
		}
	}
	this._licenseAcquirer = value;
};
System.Windows.Controls.MediaElement.prototype.OnCreateAutomationPeer = function () {
	return new System.Windows.Automation.Peers.MediaElementAutomationPeer(this);
};
JSIL.OverloadedMethod(System.Windows.Controls.MediaElement.prototype, "SetSource", [
		["SetSource$0", [System.IO.Stream]], 
		["SetSource$1", [System.Windows.Media.MediaStreamSource]]
	]);
JSIL.MakeProperty(System.Windows.Controls.MediaElement.prototype, "Source", 
	System.Windows.Controls.MediaElement.prototype.get_Source, System.Windows.Controls.MediaElement.prototype.set_Source);
JSIL.MakeProperty(System.Windows.Controls.MediaElement.prototype, "Stretch", 
	System.Windows.Controls.MediaElement.prototype.get_Stretch, System.Windows.Controls.MediaElement.prototype.set_Stretch);
JSIL.MakeProperty(System.Windows.Controls.MediaElement.prototype, "IsMuted", 
	System.Windows.Controls.MediaElement.prototype.get_IsMuted, System.Windows.Controls.MediaElement.prototype.set_IsMuted);
JSIL.MakeProperty(System.Windows.Controls.MediaElement.prototype, "AutoPlay", 
	System.Windows.Controls.MediaElement.prototype.get_AutoPlay, System.Windows.Controls.MediaElement.prototype.set_AutoPlay);
JSIL.MakeProperty(System.Windows.Controls.MediaElement.prototype, "Volume", 
	System.Windows.Controls.MediaElement.prototype.get_Volume, System.Windows.Controls.MediaElement.prototype.set_Volume);
JSIL.MakeProperty(System.Windows.Controls.MediaElement.prototype, "Balance", 
	System.Windows.Controls.MediaElement.prototype.get_Balance, System.Windows.Controls.MediaElement.prototype.set_Balance);
JSIL.MakeProperty(System.Windows.Controls.MediaElement.prototype, "NaturalVideoHeight", 
	System.Windows.Controls.MediaElement.prototype.get_NaturalVideoHeight, null);
JSIL.MakeProperty(System.Windows.Controls.MediaElement.prototype, "NaturalVideoWidth", 
	System.Windows.Controls.MediaElement.prototype.get_NaturalVideoWidth, null);
JSIL.MakeProperty(System.Windows.Controls.MediaElement.prototype, "NaturalDuration", 
	System.Windows.Controls.MediaElement.prototype.get_NaturalDuration, null);
JSIL.MakeProperty(System.Windows.Controls.MediaElement.prototype, "Position", 
	System.Windows.Controls.MediaElement.prototype.get_Position, System.Windows.Controls.MediaElement.prototype.set_Position);
JSIL.MakeProperty(System.Windows.Controls.MediaElement.prototype, "DownloadProgress", 
	System.Windows.Controls.MediaElement.prototype.get_DownloadProgress, null);
JSIL.MakeProperty(System.Windows.Controls.MediaElement.prototype, "BufferingProgress", 
	System.Windows.Controls.MediaElement.prototype.get_BufferingProgress, null);
JSIL.MakeProperty(System.Windows.Controls.MediaElement.prototype, "DownloadProgressOffset", 
	System.Windows.Controls.MediaElement.prototype.get_DownloadProgressOffset, null);
JSIL.MakeProperty(System.Windows.Controls.MediaElement.prototype, "CurrentState", 
	System.Windows.Controls.MediaElement.prototype.get_CurrentState, null);
JSIL.MakeProperty(System.Windows.Controls.MediaElement.prototype, "BufferingTime", 
	System.Windows.Controls.MediaElement.prototype.get_BufferingTime, System.Windows.Controls.MediaElement.prototype.set_BufferingTime);
JSIL.MakeProperty(System.Windows.Controls.MediaElement.prototype, "Markers", 
	System.Windows.Controls.MediaElement.prototype.get_Markers, null);
JSIL.MakeProperty(System.Windows.Controls.MediaElement.prototype, "CanSeek", 
	System.Windows.Controls.MediaElement.prototype.get_CanSeek, null);
JSIL.MakeProperty(System.Windows.Controls.MediaElement.prototype, "CanPause", 
	System.Windows.Controls.MediaElement.prototype.get_CanPause, null);
JSIL.MakeProperty(System.Windows.Controls.MediaElement.prototype, "AudioStreamCount", 
	System.Windows.Controls.MediaElement.prototype.get_AudioStreamCount, null);
JSIL.MakeProperty(System.Windows.Controls.MediaElement.prototype, "AudioStreamIndex", 
	System.Windows.Controls.MediaElement.prototype.get_AudioStreamIndex, System.Windows.Controls.MediaElement.prototype.set_AudioStreamIndex);
JSIL.MakeProperty(System.Windows.Controls.MediaElement.prototype, "RenderedFramesPerSecond", 
	System.Windows.Controls.MediaElement.prototype.get_RenderedFramesPerSecond, null);
JSIL.MakeProperty(System.Windows.Controls.MediaElement.prototype, "DroppedFramesPerSecond", 
	System.Windows.Controls.MediaElement.prototype.get_DroppedFramesPerSecond, null);
JSIL.MakeProperty(System.Windows.Controls.MediaElement.prototype, "Attributes", 
	System.Windows.Controls.MediaElement.prototype.get_Attributes, null);
JSIL.MakeProperty(System.Windows.Controls.MediaElement.prototype, "LicenseAcquirer", 
	System.Windows.Controls.MediaElement.prototype.get_LicenseAcquirer, System.Windows.Controls.MediaElement.prototype.set_LicenseAcquirer);
System.Windows.Controls.MediaElement.SourceProperty = null;
System.Windows.Controls.MediaElement.StretchProperty = null;
System.Windows.Controls.MediaElement.IsMutedProperty = null;
System.Windows.Controls.MediaElement.AutoPlayProperty = null;
System.Windows.Controls.MediaElement.VolumeProperty = null;
System.Windows.Controls.MediaElement.BalanceProperty = null;
System.Windows.Controls.MediaElement.NaturalVideoHeightProperty = null;
System.Windows.Controls.MediaElement.NaturalVideoWidthProperty = null;
System.Windows.Controls.MediaElement.NaturalDurationProperty = null;
System.Windows.Controls.MediaElement.PositionProperty = null;
System.Windows.Controls.MediaElement.DownloadProgressProperty = null;
System.Windows.Controls.MediaElement.BufferingProgressProperty = null;
System.Windows.Controls.MediaElement.DownloadProgressOffsetProperty = null;
System.Windows.Controls.MediaElement.CurrentStateProperty = null;
System.Windows.Controls.MediaElement.BufferingTimeProperty = null;
System.Windows.Controls.MediaElement.MarkersProperty = null;
System.Windows.Controls.MediaElement.CanSeekProperty = null;
System.Windows.Controls.MediaElement.CanPauseProperty = null;
System.Windows.Controls.MediaElement.AudioStreamCountProperty = null;
System.Windows.Controls.MediaElement.AudioStreamIndexProperty = null;
System.Windows.Controls.MediaElement.RenderedFramesPerSecondProperty = null;
System.Windows.Controls.MediaElement.DroppedFramesPerSecondProperty = null;
System.Windows.Controls.MediaElement.prototype.m_streamWrapperSource = null;
System.Windows.Controls.MediaElement.AttributesProperty = null;
System.Windows.Controls.MediaElement._InternalAttributesProperty = null;
System.Windows.Controls.MediaElement.prototype._internalAttributes = null;
System.Windows.Controls.MediaElement.prototype._mediaStreamSource = null;
System.Windows.Controls.MediaElement.prototype._previousMediaStreamSource = null;
System.Windows.Controls.MediaElement.prototype._availableMediaStreams = null;
System.Windows.Controls.MediaElement.prototype._licenseAcquirer = null;
System.Windows.Controls.MediaElement.prototype._acquireLicenseCompleteHandler = null;
System.Windows.Controls.MediaElement._cctor = function () {
	System.Windows.Controls.MediaElement.SourceProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13400, System.Uri);
	System.Windows.Controls.MediaElement.StretchProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13407, System.Windows.Media.Stretch);
	System.Windows.Controls.MediaElement.IsMutedProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14300, System.Boolean);
	System.Windows.Controls.MediaElement.AutoPlayProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14307, System.Boolean);
	System.Windows.Controls.MediaElement.VolumeProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14301, System.Double);
	System.Windows.Controls.MediaElement.BalanceProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14302, System.Double);
	System.Windows.Controls.MediaElement.NaturalVideoHeightProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14303, System.Int32);
	System.Windows.Controls.MediaElement.NaturalVideoWidthProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14304, System.Int32);
	System.Windows.Controls.MediaElement.NaturalDurationProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14305, System.Windows.Duration);
	System.Windows.Controls.MediaElement.PositionProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14306, System.TimeSpan);
	System.Windows.Controls.MediaElement.DownloadProgressProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14313, System.Double);
	System.Windows.Controls.MediaElement.BufferingProgressProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14314, System.Double);
	System.Windows.Controls.MediaElement.DownloadProgressOffsetProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14319, System.Double);
	System.Windows.Controls.MediaElement.CurrentStateProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14308, System.Windows.Media.MediaElementState);
	System.Windows.Controls.MediaElement.BufferingTimeProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14309, System.TimeSpan);
	System.Windows.Controls.MediaElement.MarkersProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14310, System.Windows.Media.TimelineMarkerCollection);
	System.Windows.Controls.MediaElement.CanSeekProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14315, System.Boolean);
	System.Windows.Controls.MediaElement.CanPauseProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14316, System.Boolean);
	System.Windows.Controls.MediaElement.AudioStreamCountProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14317, System.Int32);
	System.Windows.Controls.MediaElement.AudioStreamIndexProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14318, System.Int32);
	System.Windows.Controls.MediaElement.RenderedFramesPerSecondProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14320, System.Double);
	System.Windows.Controls.MediaElement.DroppedFramesPerSecondProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14321, System.Double);
	System.Windows.Controls.MediaElement.AttributesProperty = System.Windows.DependencyProperty.RegisterReadOnly("Attributes", System.Collections.Generic.Dictionary$b2.Of(System.String, System.String), System.Windows.Controls.MediaElement, null);
	System.Windows.Controls.MediaElement._InternalAttributesProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14311, System.Collections.Generic.Dictionary$b2.Of(System.String, System.String));
};

System.Windows.Controls.NotifyEventArgs.prototype._ctor = function () {
	System.EventArgs.prototype._ctor.call(this);
};
System.Windows.Controls.NotifyEventArgs.prototype.SetPtr = function (ptr) {
	this.m_objectPtr = new $asm02.MS.Internal.NativeObjectSafeHandle();
	this.m_objectPtr.NativeObject = ptr;
};
System.Windows.Controls.NotifyEventArgs.prototype.IManagedPeerBase_get_NativeObject = function () {
	this.CheckPtr();
	return this.m_objectPtr.NativeObject;
};
System.Windows.Controls.NotifyEventArgs.prototype.CheckPtr = function () {
	if (this.m_objectPtr === null) {
		this.SetPtr(0);
	}
};
System.Windows.Controls.NotifyEventArgs.prototype.get_Value = function () {
	this.CheckPtr();
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.Controls.NotifyEventArgs.ValueProperty), System.String);
};
JSIL.MakeProperty(System.Windows.Controls.NotifyEventArgs.prototype, "IManagedPeerBase_NativeObject", 
	System.Windows.Controls.NotifyEventArgs.prototype.IManagedPeerBase_get_NativeObject, null);
JSIL.MakeProperty(System.Windows.Controls.NotifyEventArgs.prototype, "Value", 
	System.Windows.Controls.NotifyEventArgs.prototype.get_Value, null);
System.Windows.Controls.NotifyEventArgs.prototype.m_objectPtr = null;
System.Windows.Controls.NotifyEventArgs.ValueProperty = null;
System.Windows.Controls.NotifyEventArgs._cctor = function () {
	System.Windows.Controls.NotifyEventArgs.ValueProperty = System.Windows.DependencyProperty.RegisterCoreProperty(22160, System.String);
};

System.Windows.Controls.InkPresenter.prototype._ctor = function () {
	System.Windows.Controls.Canvas.prototype._ctor$1.call(this, 135);
};
System.Windows.Controls.InkPresenter.prototype.get_Strokes = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.InkPresenter.StrokesProperty), System.Windows.Ink.StrokeCollection);
};
System.Windows.Controls.InkPresenter.prototype.set_Strokes = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.InkPresenter.StrokesProperty, value);
};
JSIL.MakeProperty(System.Windows.Controls.InkPresenter.prototype, "Strokes", 
	System.Windows.Controls.InkPresenter.prototype.get_Strokes, System.Windows.Controls.InkPresenter.prototype.set_Strokes);
System.Windows.Controls.InkPresenter.StrokesProperty = null;
System.Windows.Controls.InkPresenter._cctor = function () {
	System.Windows.Controls.InkPresenter.StrokesProperty = System.Windows.DependencyProperty.RegisterCoreProperty(17100, System.Windows.Ink.StrokeCollection);
};

System.Windows.Controls.UIElementCollection.prototype._ctor = function () {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.UIElement).prototype._ctor$1.call(this, 122);
};
System.Windows.Controls.UIElementCollection.prototype.AddInternal = function (value) {
	this.AddDependencyObject(value);
};
System.Windows.Controls.UIElementCollection.prototype.ContainsInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.UIElement).prototype.ContainsDependencyObject.call(this, value);
};
System.Windows.Controls.UIElementCollection.prototype.IndexOfInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.UIElement).prototype.IndexOfDependencyObject.call(this, value);
};
System.Windows.Controls.UIElementCollection.prototype.InsertInternal = function (index, value) {
	this.InsertDependencyObject(index, value);
};
System.Windows.Controls.UIElementCollection.prototype.RemoveInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.UIElement).prototype.RemoveDependencyObject.call(this, value);
};
System.Windows.Controls.UIElementCollection.prototype.GetItemImplSkipMethodPack = function (index) {
	return JSIL.TryCast(System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.UIElement).prototype.GetItemDependencyObject.call(this, index), System.Windows.UIElement);
};
System.Windows.Controls.UIElementCollection.prototype.SetItemImplSkipMethodPack = function (index, value) {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.UIElement).prototype.SetItemDependencyObject.call(this, index, value);
};

System.Windows.Controls.MultiScaleImage.prototype._ctor = function () {
	System.Windows.FrameworkElement.prototype._ctor$0.call(this, 190);
};
System.Windows.Controls.MultiScaleImage.prototype.add_MotionFinished = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(19601, null), value);
};
System.Windows.Controls.MultiScaleImage.prototype.remove_MotionFinished = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(19601, null), value);
};
System.Windows.Controls.MultiScaleImage.prototype.add_ImageOpenSucceeded = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(19602, null), value);
};
System.Windows.Controls.MultiScaleImage.prototype.remove_ImageOpenSucceeded = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(19602, null), value);
};
System.Windows.Controls.MultiScaleImage.prototype.add_ViewportChanged = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(19691, null), value);
};
System.Windows.Controls.MultiScaleImage.prototype.remove_ViewportChanged = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(19691, null), value);
};
System.Windows.Controls.MultiScaleImage.prototype.add_ImageFailed = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(19604, null), value);
};
System.Windows.Controls.MultiScaleImage.prototype.remove_ImageFailed = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(19604, null), value);
};
System.Windows.Controls.MultiScaleImage.prototype.get_Source = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.MultiScaleImage.SourceProperty), System.Windows.Media.MultiScaleTileSource);
};
System.Windows.Controls.MultiScaleImage.prototype.set_Source = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.MultiScaleImage.SourceProperty, value);
};
System.Windows.Controls.MultiScaleImage.prototype.get_ViewportOrigin = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.MultiScaleImage.ViewportOriginProperty), System.Windows.Point);
};
System.Windows.Controls.MultiScaleImage.prototype.set_ViewportOrigin = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.MultiScaleImage.ViewportOriginProperty, value);
};
System.Windows.Controls.MultiScaleImage.prototype.get_ViewportWidth = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.MultiScaleImage.ViewportWidthProperty), System.Double);
};
System.Windows.Controls.MultiScaleImage.prototype.set_ViewportWidth = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.MultiScaleImage.ViewportWidthProperty, value);
};
System.Windows.Controls.MultiScaleImage.prototype.get_SkipLevels = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.MultiScaleImage.SkipLevelsProperty), System.Int32);
};
System.Windows.Controls.MultiScaleImage.prototype.set_SkipLevels = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.MultiScaleImage.SkipLevelsProperty, value);
};
System.Windows.Controls.MultiScaleImage.prototype.get_AspectRatio = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.MultiScaleImage.AspectRatioProperty), System.Double);
};
System.Windows.Controls.MultiScaleImage.prototype.get_UseSprings = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.MultiScaleImage.UseSpringsProperty), System.Boolean);
};
System.Windows.Controls.MultiScaleImage.prototype.set_UseSprings = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.MultiScaleImage.UseSpringsProperty, value);
};
System.Windows.Controls.MultiScaleImage.prototype.get_IsDownloading = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.MultiScaleImage.IsDownloadingProperty), System.Boolean);
};
System.Windows.Controls.MultiScaleImage.prototype.get_AllowDownloading = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.MultiScaleImage.AllowDownloadingProperty), System.Boolean);
};
System.Windows.Controls.MultiScaleImage.prototype.set_AllowDownloading = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.MultiScaleImage.AllowDownloadingProperty, value);
};
System.Windows.Controls.MultiScaleImage.prototype.get_BlurFactor = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.MultiScaleImage.BlurFactorProperty), System.Double);
};
System.Windows.Controls.MultiScaleImage.prototype.set_BlurFactor = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.MultiScaleImage.BlurFactorProperty, value);
};
System.Windows.Controls.MultiScaleImage.prototype.get_IsIdle = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.MultiScaleImage.IsIdleProperty), System.Boolean);
};
System.Windows.Controls.MultiScaleImage.prototype.get_SubImages = function () {
	return JSIL.TryCast(this.GetValueInternal(System.Windows.Controls.MultiScaleImage.SubImagesProperty), System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(System.Windows.Controls.MultiScaleSubImage));
};
System.Windows.Controls.MultiScaleImage.prototype.GetValueInternal = function (dp) {
	if (dp === System.Windows.Controls.MultiScaleImage.SubImagesProperty) {
		var presentationFrameworkCollection = JSIL.TryCast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.MultiScaleImage._InternalSubImagesProperty), System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Controls.MultiScaleSubImage));
		if (this._internalSubImages !== presentationFrameworkCollection) {
			var list = new (System.Collections.Generic.List$b1.Of(System.Windows.Controls.MultiScaleSubImage)) ();
			var enumerator = presentationFrameworkCollection.GetEnumerator();
			try {
			__loop0__: 
				while (enumerator.IEnumerator_MoveNext()) {
					var current = enumerator.IEnumerator$b1_Current;
					list.Add(current);
				}
			} finally {
				if (enumerator !== null) {
					enumerator.IDisposable_Dispose();
				}
			}
			this._subImages = new (System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(System.Windows.Controls.MultiScaleSubImage)) (list);
			this._internalSubImages = presentationFrameworkCollection;
		}
		return this._subImages;
	}
	return System.Windows.FrameworkElement.prototype.GetValueInternal.call(this, dp);
};
System.Windows.Controls.MultiScaleImage.prototype.ZoomAboutLogicalPoint = function (zoomIncrementFactor, zoomCenterLogicalX, zoomCenterLogicalY) {
	$asm02.MS.Internal.XcpImports.MultiScaleImage_ZoomAboutLogicalPoint(this, zoomIncrementFactor, zoomCenterLogicalX, zoomCenterLogicalY);
};
System.Windows.Controls.MultiScaleImage.prototype.ElementToLogicalPoint = function (elementPoint) {
	return $asm02.MS.Internal.XcpImports.MultiScaleImage_ElementToLogicalPoint(this, elementPoint);
};
System.Windows.Controls.MultiScaleImage.prototype.LogicalToElementPoint = function (logicalPoint) {
	return $asm02.MS.Internal.XcpImports.MultiScaleImage_LogicalToElementPoint(this, logicalPoint);
};
System.Windows.Controls.MultiScaleImage.prototype.OnCreateAutomationPeer = function () {
	return new System.Windows.Automation.Peers.MultiScaleImageAutomationPeer(this);
};
System.Windows.Controls.MultiScaleImage.prototype.add_ImageOpenFailed = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(19603, null), value);
};
System.Windows.Controls.MultiScaleImage.prototype.remove_ImageOpenFailed = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(19603, null), value);
};
JSIL.MakeProperty(System.Windows.Controls.MultiScaleImage.prototype, "Source", 
	System.Windows.Controls.MultiScaleImage.prototype.get_Source, System.Windows.Controls.MultiScaleImage.prototype.set_Source);
JSIL.MakeProperty(System.Windows.Controls.MultiScaleImage.prototype, "ViewportOrigin", 
	System.Windows.Controls.MultiScaleImage.prototype.get_ViewportOrigin, System.Windows.Controls.MultiScaleImage.prototype.set_ViewportOrigin);
JSIL.MakeProperty(System.Windows.Controls.MultiScaleImage.prototype, "ViewportWidth", 
	System.Windows.Controls.MultiScaleImage.prototype.get_ViewportWidth, System.Windows.Controls.MultiScaleImage.prototype.set_ViewportWidth);
JSIL.MakeProperty(System.Windows.Controls.MultiScaleImage.prototype, "SkipLevels", 
	System.Windows.Controls.MultiScaleImage.prototype.get_SkipLevels, System.Windows.Controls.MultiScaleImage.prototype.set_SkipLevels);
JSIL.MakeProperty(System.Windows.Controls.MultiScaleImage.prototype, "AspectRatio", 
	System.Windows.Controls.MultiScaleImage.prototype.get_AspectRatio, null);
JSIL.MakeProperty(System.Windows.Controls.MultiScaleImage.prototype, "UseSprings", 
	System.Windows.Controls.MultiScaleImage.prototype.get_UseSprings, System.Windows.Controls.MultiScaleImage.prototype.set_UseSprings);
JSIL.MakeProperty(System.Windows.Controls.MultiScaleImage.prototype, "IsDownloading", 
	System.Windows.Controls.MultiScaleImage.prototype.get_IsDownloading, null);
JSIL.MakeProperty(System.Windows.Controls.MultiScaleImage.prototype, "AllowDownloading", 
	System.Windows.Controls.MultiScaleImage.prototype.get_AllowDownloading, System.Windows.Controls.MultiScaleImage.prototype.set_AllowDownloading);
JSIL.MakeProperty(System.Windows.Controls.MultiScaleImage.prototype, "BlurFactor", 
	System.Windows.Controls.MultiScaleImage.prototype.get_BlurFactor, System.Windows.Controls.MultiScaleImage.prototype.set_BlurFactor);
JSIL.MakeProperty(System.Windows.Controls.MultiScaleImage.prototype, "IsIdle", 
	System.Windows.Controls.MultiScaleImage.prototype.get_IsIdle, null);
JSIL.MakeProperty(System.Windows.Controls.MultiScaleImage.prototype, "SubImages", 
	System.Windows.Controls.MultiScaleImage.prototype.get_SubImages, null);
System.Windows.Controls.MultiScaleImage.SourceProperty = null;
System.Windows.Controls.MultiScaleImage.ViewportOriginProperty = null;
System.Windows.Controls.MultiScaleImage.ViewportWidthProperty = null;
System.Windows.Controls.MultiScaleImage.SkipLevelsProperty = null;
System.Windows.Controls.MultiScaleImage.AspectRatioProperty = null;
System.Windows.Controls.MultiScaleImage.UseSpringsProperty = null;
System.Windows.Controls.MultiScaleImage.IsDownloadingProperty = null;
System.Windows.Controls.MultiScaleImage.AllowDownloadingProperty = null;
System.Windows.Controls.MultiScaleImage.BlurFactorProperty = null;
System.Windows.Controls.MultiScaleImage.IsIdleProperty = null;
System.Windows.Controls.MultiScaleImage.SubImagesProperty = null;
System.Windows.Controls.MultiScaleImage._InternalSubImagesProperty = null;
System.Windows.Controls.MultiScaleImage.prototype._internalSubImages = null;
System.Windows.Controls.MultiScaleImage.prototype._subImages = null;
System.Windows.Controls.MultiScaleImage._cctor = function () {
	System.Windows.Controls.MultiScaleImage.SourceProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19690, System.Windows.Media.MultiScaleTileSource);
	System.Windows.Controls.MultiScaleImage.ViewportOriginProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19608, System.Windows.Point);
	System.Windows.Controls.MultiScaleImage.ViewportWidthProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19609, System.Double);
	System.Windows.Controls.MultiScaleImage.SkipLevelsProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19607, System.Int32);
	System.Windows.Controls.MultiScaleImage.AspectRatioProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19605, System.Double);
	System.Windows.Controls.MultiScaleImage.UseSpringsProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19600, System.Boolean);
	System.Windows.Controls.MultiScaleImage.IsDownloadingProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19599, System.Boolean);
	System.Windows.Controls.MultiScaleImage.AllowDownloadingProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19598, System.Boolean);
	System.Windows.Controls.MultiScaleImage.BlurFactorProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19597, System.Double);
	System.Windows.Controls.MultiScaleImage.IsIdleProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19596, System.Boolean);
	System.Windows.Controls.MultiScaleImage.SubImagesProperty = System.Windows.DependencyProperty.RegisterReadOnly("SubImages", System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(System.Windows.Controls.MultiScaleSubImage), System.Windows.Controls.MultiScaleImage, null);
	System.Windows.Controls.MultiScaleImage._InternalSubImagesProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19606, System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Controls.MultiScaleSubImage));
};

System.Windows.Controls.MultiScaleSubImage.prototype._ctor = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 227);
};
System.Windows.Controls.MultiScaleSubImage.prototype.get_ViewportOrigin = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.MultiScaleSubImage.ViewportOriginProperty), System.Windows.Point);
};
System.Windows.Controls.MultiScaleSubImage.prototype.set_ViewportOrigin = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.MultiScaleSubImage.ViewportOriginProperty, value);
};
System.Windows.Controls.MultiScaleSubImage.prototype.get_ViewportWidth = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.MultiScaleSubImage.ViewportWidthProperty), System.Double);
};
System.Windows.Controls.MultiScaleSubImage.prototype.set_ViewportWidth = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.MultiScaleSubImage.ViewportWidthProperty, value);
};
System.Windows.Controls.MultiScaleSubImage.prototype.get_AspectRatio = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.MultiScaleSubImage.AspectRatioProperty), System.Double);
};
System.Windows.Controls.MultiScaleSubImage.prototype.get_ZIndex = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.MultiScaleSubImage.ZIndexProperty), System.Int32);
};
System.Windows.Controls.MultiScaleSubImage.prototype.set_ZIndex = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.MultiScaleSubImage.ZIndexProperty, value);
};
System.Windows.Controls.MultiScaleSubImage.prototype.get_Opacity = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.MultiScaleSubImage.OpacityProperty), System.Double);
};
System.Windows.Controls.MultiScaleSubImage.prototype.set_Opacity = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.MultiScaleSubImage.OpacityProperty, value);
};
JSIL.MakeProperty(System.Windows.Controls.MultiScaleSubImage.prototype, "ViewportOrigin", 
	System.Windows.Controls.MultiScaleSubImage.prototype.get_ViewportOrigin, System.Windows.Controls.MultiScaleSubImage.prototype.set_ViewportOrigin);
JSIL.MakeProperty(System.Windows.Controls.MultiScaleSubImage.prototype, "ViewportWidth", 
	System.Windows.Controls.MultiScaleSubImage.prototype.get_ViewportWidth, System.Windows.Controls.MultiScaleSubImage.prototype.set_ViewportWidth);
JSIL.MakeProperty(System.Windows.Controls.MultiScaleSubImage.prototype, "AspectRatio", 
	System.Windows.Controls.MultiScaleSubImage.prototype.get_AspectRatio, null);
JSIL.MakeProperty(System.Windows.Controls.MultiScaleSubImage.prototype, "ZIndex", 
	System.Windows.Controls.MultiScaleSubImage.prototype.get_ZIndex, System.Windows.Controls.MultiScaleSubImage.prototype.set_ZIndex);
JSIL.MakeProperty(System.Windows.Controls.MultiScaleSubImage.prototype, "Opacity", 
	System.Windows.Controls.MultiScaleSubImage.prototype.get_Opacity, System.Windows.Controls.MultiScaleSubImage.prototype.set_Opacity);
System.Windows.Controls.MultiScaleSubImage.ViewportOriginProperty = null;
System.Windows.Controls.MultiScaleSubImage.ViewportWidthProperty = null;
System.Windows.Controls.MultiScaleSubImage.AspectRatioProperty = null;
System.Windows.Controls.MultiScaleSubImage.ZIndexProperty = null;
System.Windows.Controls.MultiScaleSubImage.OpacityProperty = null;
System.Windows.Controls.MultiScaleSubImage._cctor = function () {
	System.Windows.Controls.MultiScaleSubImage.ViewportOriginProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19670, System.Windows.Point);
	System.Windows.Controls.MultiScaleSubImage.ViewportWidthProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19671, System.Double);
	System.Windows.Controls.MultiScaleSubImage.AspectRatioProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19672, System.Double);
	System.Windows.Controls.MultiScaleSubImage.ZIndexProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19673, System.Int32);
	System.Windows.Controls.MultiScaleSubImage.OpacityProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19674, System.Double);
};

System.Windows.Controls.StackPanel.prototype._ctor$0 = function () {
	System.Windows.Controls.Panel.prototype._ctor$1.call(this, 171);
};
System.Windows.Controls.StackPanel.prototype._ctor$1 = function (nKnownTypeIndex) {
	System.Windows.Controls.Panel.prototype._ctor$1.call(this, nKnownTypeIndex);
};
System.Windows.Controls.StackPanel.prototype.get_Orientation = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.StackPanel.OrientationProperty), System.Windows.Controls.Orientation);
};
System.Windows.Controls.StackPanel.prototype.set_Orientation = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.StackPanel.OrientationProperty, value);
};
System.Windows.Controls.StackPanel.prototype.MeasureOverride = function (constraint) {
	return System.Windows.FrameworkElement.prototype.MeasureOverride.call(this, constraint);
};
System.Windows.Controls.StackPanel.prototype.ArrangeOverride = function (arrangeSize) {
	return System.Windows.FrameworkElement.prototype.ArrangeOverride.call(this, arrangeSize);
};
JSIL.OverloadedMethod(System.Windows.Controls.StackPanel.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);
JSIL.MakeProperty(System.Windows.Controls.StackPanel.prototype, "Orientation", 
	System.Windows.Controls.StackPanel.prototype.get_Orientation, System.Windows.Controls.StackPanel.prototype.set_Orientation);
System.Windows.Controls.StackPanel.OrientationProperty = null;
System.Windows.Controls.StackPanel._cctor = function () {
	System.Windows.Controls.StackPanel.OrientationProperty = System.Windows.DependencyProperty.RegisterCoreProperty(24503, System.Windows.Controls.Orientation);
};

System.Windows.Controls.Control.prototype._ctor$0 = function () {
	System.Windows.FrameworkElement.prototype._ctor$0.call(this, 155);
};
System.Windows.Controls.Control.prototype._ctor$1 = function (nKnownTypeIndex) {
	System.Windows.FrameworkElement.prototype._ctor$0.call(this, nKnownTypeIndex);
};
System.Windows.Controls.Control.prototype.get_ImplementationRoot = function () {
	return $asm02.MS.Internal.XcpImports.Control_GetImplementationRoot(this);
};
System.Windows.Controls.Control.prototype.set_ImplementationRoot = function (value) {
	$asm02.MS.Internal.XcpImports.Control_SetImplementationRoot(this, value);
};
System.Windows.Controls.Control.prototype.get_DefaultStyleKey = function () {
	return System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Control.DefaultStyleKeyProperty);
};
System.Windows.Controls.Control.prototype.set_DefaultStyleKey = function (value) {
	var type = JSIL.TryCast(value, System.Type);
	if ((true) === null) {
		throw JSIL.New(System.ArgumentException, "_ctor$0", []);
	}
	if ((true) === null) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
	}
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Control.DefaultStyleKeyProperty, value);
};
System.Windows.Controls.Control.prototype.add_IsEnabledChanged = function (value) {
	this.IsEnabledChanged = System.Delegate.Combine(this.IsEnabledChanged, value);
};
System.Windows.Controls.Control.prototype.remove_IsEnabledChanged = function (value) {
	this.IsEnabledChanged = System.Delegate.Remove(this.IsEnabledChanged, value);
};
System.Windows.Controls.Control.prototype.get_IsTabStop = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Control.IsTabStopProperty), System.Boolean);
};
System.Windows.Controls.Control.prototype.set_IsTabStop = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Control.IsTabStopProperty, value);
};
System.Windows.Controls.Control.prototype.get_IsEnabled = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Control.IsEnabledProperty), System.Boolean);
};
System.Windows.Controls.Control.prototype.set_IsEnabled = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Control.IsEnabledProperty, value);
};
System.Windows.Controls.Control.prototype.get_TabIndex = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Control.TabIndexProperty), System.Int32);
};
System.Windows.Controls.Control.prototype.set_TabIndex = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Control.TabIndexProperty, value);
};
System.Windows.Controls.Control.prototype.get_TabNavigation = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Control.TabNavigationProperty), System.Windows.Input.KeyboardNavigationMode);
};
System.Windows.Controls.Control.prototype.set_TabNavigation = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Control.TabNavigationProperty, value);
};
System.Windows.Controls.Control.prototype.get_Template = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Control.TemplateProperty), System.Windows.Controls.ControlTemplate);
};
System.Windows.Controls.Control.prototype.set_Template = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Control.TemplateProperty, value);
};
System.Windows.Controls.Control.prototype.get_Padding = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Control.PaddingProperty), System.Windows.Thickness);
};
System.Windows.Controls.Control.prototype.set_Padding = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Control.PaddingProperty, value.MemberwiseClone());
};
System.Windows.Controls.Control.prototype.get_BorderThickness = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Control.BorderThicknessProperty), System.Windows.Thickness);
};
System.Windows.Controls.Control.prototype.set_BorderThickness = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Control.BorderThicknessProperty, value.MemberwiseClone());
};
System.Windows.Controls.Control.prototype.get_HorizontalContentAlignment = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Control.HorizontalContentAlignmentProperty), System.Windows.HorizontalAlignment);
};
System.Windows.Controls.Control.prototype.set_HorizontalContentAlignment = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Control.HorizontalContentAlignmentProperty, value);
};
System.Windows.Controls.Control.prototype.get_VerticalContentAlignment = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Control.VerticalContentAlignmentProperty), System.Windows.VerticalAlignment);
};
System.Windows.Controls.Control.prototype.set_VerticalContentAlignment = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Control.VerticalContentAlignmentProperty, value);
};
System.Windows.Controls.Control.prototype.get_Background = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Control.BackgroundProperty), System.Windows.Media.Brush);
};
System.Windows.Controls.Control.prototype.set_Background = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Control.BackgroundProperty, value);
};
System.Windows.Controls.Control.prototype.get_BorderBrush = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Control.BorderBrushProperty), System.Windows.Media.Brush);
};
System.Windows.Controls.Control.prototype.set_BorderBrush = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Control.BorderBrushProperty, value);
};
System.Windows.Controls.Control.prototype.get_FontFamily = function () {
	return JSIL.TryCast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Control.FontFamilyProperty), System.Windows.Media.FontFamily);
};
System.Windows.Controls.Control.prototype.set_FontFamily = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Control.FontFamilyProperty, value);
};
System.Windows.Controls.Control.prototype.get_FontSize = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Control.FontSizeProperty), System.Double);
};
System.Windows.Controls.Control.prototype.set_FontSize = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Control.FontSizeProperty, value);
};
System.Windows.Controls.Control.prototype.get_FontStretch = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Control.FontStretchProperty), System.Windows.FontStretch);
};
System.Windows.Controls.Control.prototype.set_FontStretch = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Control.FontStretchProperty, value.MemberwiseClone());
};
System.Windows.Controls.Control.prototype.get_FontStyle = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Control.FontStyleProperty), System.Windows.FontStyle);
};
System.Windows.Controls.Control.prototype.set_FontStyle = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Control.FontStyleProperty, value.MemberwiseClone());
};
System.Windows.Controls.Control.prototype.get_FontWeight = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Control.FontWeightProperty), System.Windows.FontWeight);
};
System.Windows.Controls.Control.prototype.set_FontWeight = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Control.FontWeightProperty, value.MemberwiseClone());
};
System.Windows.Controls.Control.prototype.get_Foreground = function () {
	return JSIL.TryCast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Control.ForegroundProperty), System.Windows.Media.Brush);
};
System.Windows.Controls.Control.prototype.set_Foreground = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Control.ForegroundProperty, value);
};
System.Windows.Controls.Control.prototype.Focus = function () {
	return $asm02.MS.Internal.XcpImports.Control_Focus(this);
};
System.Windows.Controls.Control.prototype.GetTemplateChild = function (childName) {
	return $asm02.MS.Internal.XcpImports.Control_GetTemplateChild(this, childName);
};
System.Windows.Controls.Control.prototype.ApplyTemplate = function () {
	if (!((this.Template === null) || 
			(this.Template.TargetType === null) || this.Template.TargetType.IsInstanceOfType(this))) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("Control_TargetTypeMismatch")]);
	}
	return System.Windows.FrameworkElement.prototype.ApplyTemplateInternal.call(this);
};
System.Windows.Controls.Control.prototype.RemoveTemplateBinding = function (target, targetProperty) {
	$asm02.MS.Internal.XcpImports.Control_RemoveTemplateBinding(this, target, targetProperty);
};
System.Windows.Controls.Control.GetBuiltInStyle = function (nativeTarget, /* ref */ nativeStyle) {
	var arg_6D_0 = null;
	nativeStyle.value = System.IntPtr.Zero;
	var managedPeer = $asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeTarget);
	var control = JSIL.TryCast(managedPeer, System.Windows.Controls.Control);
	try {
		if (control === null) {
			var result = -2146498358;
			return result;
		}
		if (control.DefaultStyleKey === null) {
			result = 0;
			return result;
		}
		var type = JSIL.TryCast(control.DefaultStyleKey, System.Type);
		if ((true) === null) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
		}
		var assembly = type.Assembly;
		if ((arg_6D_0 = System.Windows.Controls.Control._resourceDictionaryCache) === null) {
			arg_6D_0 = (System.Windows.Controls.Control._resourceDictionaryCache = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.Reflection.Assembly, System.Windows.ResourceDictionary), "_ctor$0", []));
		}
		var dictionary = arg_6D_0;
		var resourceDictionary = new JSIL.Variable(null);
		if (!dictionary.TryGetValue(assembly, /* ref */ resourceDictionary)) {
			var text = $asm02.MS.Internal.XcpImports.ControlHost_GetDefaultThemeResourceDictionary(assembly.FullName);
			if (text !== null) {
				resourceDictionary.value = JSIL.Cast(System.Windows.Markup.XamlReader.Load(text), System.Windows.ResourceDictionary);
			}
			if (resourceDictionary.value === null) {
				var manifestResourceNames = assembly.GetManifestResourceNames();
				var text2 = ((assembly.GetName$0().Name + ".g"));
				var b = ((text2 + ".resources"));
				var flag = false;
			__loop0__: 
				for (var i = 0; i < manifestResourceNames.length; ++i) {
					if (manifestResourceNames[i] == b) {
						flag = true;
						break __loop0__;
					}
				}
				if (flag) {
					var resourceManager = JSIL.New(System.Resources.ResourceManager, "_ctor$1", [text2, assembly]);
					if (resourceManager !== null) {
						resourceManager.IgnoreCase = true;
						var unmanagedMemoryStream = null;
						try {
							unmanagedMemoryStream = resourceManager.GetStream$1("themes/generic.xaml", System.Globalization.CultureInfo.CurrentUICulture);
						} catch ($exception) {
						}
						if (unmanagedMemoryStream !== null) {
							try {
								try {
									resourceDictionary.value = JSIL.TryCast($asm02.MS.Internal.XcpImports.CreateFromXaml$3(
											unmanagedMemoryStream, 
											assembly.GetName$0().Name, 
											true, 
											false, 
											true
										), System.Windows.ResourceDictionary);
								} catch ($exception) {
									if (JSIL.CheckType($exception, System.Windows.Markup.XamlParseException)) {
										var arg_154_0 = $exception;
										throw new $asm02.MS.Internal.NativeParseException(arg_154_0, "Parser_SetValue_Exception", ["System.Windows.FrameworkElement.Style"]);
									} else {
										throw $exception;
									}
								}
							} finally {
								unmanagedMemoryStream.Dispose$0();
							}
						}
					}
				}
			}
			dictionary.set_Item(assembly, resourceDictionary.value);
		}
		if (resourceDictionary.value !== null) {
			var style = JSIL.TryCast($asm02.MS.Internal.QuirksMode.ShouldUseTypeFullNameForBuiltinStyleLookup() ? resourceDictionary.value.get_Item(type.FullName) : resourceDictionary.value.get_Item(type), System.Windows.Style);
			if (style !== null) {
				nativeStyle.value = style.NativeObject;
				$asm02.MS.Internal.XcpImports.AddRefNativeObject$0(style);
			}
		}
	} catch ($exception) {
		var arg_1CD_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForException(arg_1CD_0);
		return result;
	}
	return 0;
};
System.Windows.Controls.Control.ResetStaticData = function () {
	if (System.Windows.Controls.Control._resourceDictionaryCache !== null) {
		System.Windows.Controls.Control._resourceDictionaryCache.Clear();
	}
};
System.Windows.Controls.Control.prototype.GoToState = function (useTransitions, stateName) {
	return System.Windows.VisualStateManager.GoToState(this, stateName, useTransitions);
};
System.Windows.Controls.Control.OnMouseMove = function (ctrl, e) {
	ctrl.OnMouseMove(JSIL.Cast(e, System.Windows.Input.MouseEventArgs));
};
System.Windows.Controls.Control.prototype.OnMouseMove = function (e) {
	if (e === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["e"]);
	}
};
System.Windows.Controls.Control.OnMouseEnter = function (ctrl, e) {
	ctrl.OnMouseEnter(JSIL.Cast(e, System.Windows.Input.MouseEventArgs));
};
System.Windows.Controls.Control.prototype.OnMouseEnter = function (e) {
	if (e === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["e"]);
	}
};
System.Windows.Controls.Control.OnMouseLeave = function (ctrl, e) {
	ctrl.OnMouseLeave(JSIL.Cast(e, System.Windows.Input.MouseEventArgs));
};
System.Windows.Controls.Control.prototype.OnMouseLeave = function (e) {
	if (e === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["e"]);
	}
};
System.Windows.Controls.Control.OnMouseLeftButtonDown = function (ctrl, e) {
	System.Windows.Controls.ToolTipService.CloseToolTipInternal(e);
	ctrl.OnMouseLeftButtonDown(JSIL.Cast(e, System.Windows.Input.MouseButtonEventArgs));
};
System.Windows.Controls.Control.prototype.OnMouseLeftButtonDown = function (e) {
	if (e === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["e"]);
	}
};
System.Windows.Controls.Control.OnMouseLeftButtonUp = function (ctrl, e) {
	ctrl.OnMouseLeftButtonUp(JSIL.Cast(e, System.Windows.Input.MouseButtonEventArgs));
};
System.Windows.Controls.Control.prototype.OnMouseLeftButtonUp = function (e) {
	if (e === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["e"]);
	}
};
System.Windows.Controls.Control.OnMouseRightButtonDown = function (ctrl, e) {
	System.Windows.Controls.ToolTipService.CloseToolTipInternal(e);
	ctrl.OnMouseRightButtonDown(JSIL.Cast(e, System.Windows.Input.MouseButtonEventArgs));
};
System.Windows.Controls.Control.prototype.OnMouseRightButtonDown = function (e) {
	if (e === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["e"]);
	}
};
System.Windows.Controls.Control.OnMouseRightButtonUp = function (ctrl, e) {
	ctrl.OnMouseRightButtonUp(JSIL.Cast(e, System.Windows.Input.MouseButtonEventArgs));
};
System.Windows.Controls.Control.prototype.OnMouseRightButtonUp = function (e) {
	if (e === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["e"]);
	}
};
System.Windows.Controls.Control.OnMouseWheel = function (ctrl, e) {
	ctrl.OnMouseWheel(JSIL.Cast(e, System.Windows.Input.MouseWheelEventArgs));
};
System.Windows.Controls.Control.prototype.OnMouseWheel = function (e) {
	if (e === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["e"]);
	}
};
System.Windows.Controls.Control.OnKeyUp = function (ctrl, e) {
	ctrl.OnKeyUp(JSIL.Cast(e, System.Windows.Input.KeyEventArgs));
};
System.Windows.Controls.Control.prototype.OnKeyUp = function (e) {
	if (e === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["e"]);
	}
};
System.Windows.Controls.Control.OnKeyDown = function (ctrl, e) {
	System.Windows.Controls.ToolTipService.CloseToolTipInternal(e);
	ctrl.OnKeyDown(JSIL.Cast(e, System.Windows.Input.KeyEventArgs));
};
System.Windows.Controls.Control.prototype.OnKeyDown = function (e) {
	if (e === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["e"]);
	}
};
System.Windows.Controls.Control.OnGotFocus = function (ctrl, e) {
	ctrl.OnGotFocus(JSIL.Cast(e, System.Windows.RoutedEventArgs));
};
System.Windows.Controls.Control.prototype.OnGotFocus = function (e) {
	if (e === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["e"]);
	}
	if (this._isInvalid) {
		this.UpdateValidationState();
	}
};
System.Windows.Controls.Control.OnLostFocus = function (ctrl, e) {
	ctrl.OnLostFocus(JSIL.Cast(e, System.Windows.RoutedEventArgs));
};
System.Windows.Controls.Control.prototype.OnLostFocus = function (e) {
	if (e === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["e"]);
	}
	if (this._isInvalid) {
		this.UpdateValidationState();
	}
};
System.Windows.Controls.Control.OnIsEnabledChanged = function (control, args) {
	var e = new System.Windows.DependencyPropertyChangedEventArgs();
	var isEnabledChangedEventArgs = JSIL.Cast(args, $asm02.MS.Internal.IsEnabledChangedEventArgs);
	control.OnIsEnabledChanged(isEnabledChangedEventArgs);
	e._ctor(System.Windows.Controls.Control.IsEnabledProperty, isEnabledChangedEventArgs.OldValue, isEnabledChangedEventArgs.NewValue);
	if (control.IsEnabledChanged !== null) {
		control.IsEnabledChanged(control, e.MemberwiseClone());
	}
	var automationPeer = control.GetAutomationPeer();
	if (automationPeer !== null) {
		automationPeer.InvalidatePeer();
	}
};
System.Windows.Controls.Control.prototype.OnIsEnabledChanged = function (e) {
	if (e === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["e"]);
	}
};
System.Windows.Controls.Control.OnLostMouseCapture = function (ctrl, e) {
	ctrl.OnLostMouseCapture(JSIL.Cast(e, System.Windows.Input.MouseEventArgs));
};
System.Windows.Controls.Control.prototype.OnLostMouseCapture = function (e) {
	if (e === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["e"]);
	}
};
System.Windows.Controls.Control.OnTextInput = function (ctrl, e) {
	ctrl.OnTextInput(JSIL.Cast(e, System.Windows.Input.TextCompositionEventArgs));
};
System.Windows.Controls.Control.prototype.OnTextInput = function (e) {
	if (e === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["e"]);
	}
};
System.Windows.Controls.Control.OnTextInputStart = function (ctrl, e) {
	ctrl.OnTextInputStart(JSIL.Cast(e, System.Windows.Input.TextCompositionEventArgs));
};
System.Windows.Controls.Control.prototype.OnTextInputStart = function (e) {
	if (e === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["e"]);
	}
};
System.Windows.Controls.Control.OnTextInputUpdate = function (ctrl, e) {
	ctrl.OnTextInputUpdate(JSIL.Cast(e, System.Windows.Input.TextCompositionEventArgs));
};
System.Windows.Controls.Control.prototype.OnTextInputUpdate = function (e) {
	if (e === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["e"]);
	}
};
System.Windows.Controls.Control.OnDragEnter = function (ctrl, e) {
	ctrl.OnDragEnter(JSIL.Cast(e, System.Windows.DragEventArgs));
};
System.Windows.Controls.Control.prototype.OnDragEnter = function (e) {
	if (e === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["e"]);
	}
};
System.Windows.Controls.Control.OnDragLeave = function (ctrl, e) {
	ctrl.OnDragLeave(JSIL.Cast(e, System.Windows.DragEventArgs));
};
System.Windows.Controls.Control.prototype.OnDragLeave = function (e) {
	if (e === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["e"]);
	}
};
System.Windows.Controls.Control.OnDragOver = function (ctrl, e) {
	ctrl.OnDragOver(JSIL.Cast(e, System.Windows.DragEventArgs));
};
System.Windows.Controls.Control.prototype.OnDragOver = function (e) {
	if (e === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["e"]);
	}
};
System.Windows.Controls.Control.OnDrop = function (ctrl, e) {
	ctrl.OnDrop(JSIL.Cast(e, System.Windows.DragEventArgs));
};
System.Windows.Controls.Control.prototype.OnDrop = function (e) {
	if (e === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["e"]);
	}
};
System.Windows.Controls.Control.get_OnEvent = function () {
	return System.Windows.Controls.Control._controlDelgates;
};
System.Windows.Controls.Control.prototype.NativeMouseMove = function (e) {
	$asm02.MS.Internal.XcpImports.Control_Raise(this, e, 0);
};
System.Windows.Controls.Control.prototype.NativeMouseEnter = function (e) {
	$asm02.MS.Internal.XcpImports.Control_Raise(this, e, 1);
};
System.Windows.Controls.Control.prototype.NativeMouseLeave = function (e) {
	$asm02.MS.Internal.XcpImports.Control_Raise(this, e, 2);
};
System.Windows.Controls.Control.prototype.NativeMouseLeftButtonDown = function (e) {
	$asm02.MS.Internal.XcpImports.Control_Raise(this, e, 3);
};
System.Windows.Controls.Control.prototype.NativeMouseLeftButtonUp = function (e) {
	$asm02.MS.Internal.XcpImports.Control_Raise(this, e, 4);
};
System.Windows.Controls.Control.prototype.NativeMouseRightButtonDown = function (e) {
	$asm02.MS.Internal.XcpImports.Control_Raise(this, e, 5);
};
System.Windows.Controls.Control.prototype.NativeMouseRightButtonUp = function (e) {
	$asm02.MS.Internal.XcpImports.Control_Raise(this, e, 6);
};
System.Windows.Controls.Control.prototype.NativeMouseWheel = function (e) {
	$asm02.MS.Internal.XcpImports.Control_Raise(this, e, 7);
};
System.Windows.Controls.Control.prototype.NativeKeyUp = function (e) {
	$asm02.MS.Internal.XcpImports.Control_Raise(this, e, 8);
};
System.Windows.Controls.Control.prototype.NativeKeyDown = function (e) {
	$asm02.MS.Internal.XcpImports.Control_Raise(this, e, 9);
};
System.Windows.Controls.Control.prototype.NativeGotFocus = function (e) {
	$asm02.MS.Internal.XcpImports.Control_Raise(this, e, 10);
};
System.Windows.Controls.Control.prototype.NativeLostFocus = function (e) {
	$asm02.MS.Internal.XcpImports.Control_Raise(this, e, 11);
};
System.Windows.Controls.Control.prototype.NativeIsEnabledChanged = function (e) {
	$asm02.MS.Internal.XcpImports.Control_Raise(this, e, 12);
};
System.Windows.Controls.Control.prototype.GetValueFromBuiltInStyle = function (property, /* ref */ value) {
	return $asm02.MS.Internal.XcpImports.GetManagedPropertyValueFromStyle(true, this, property, /* ref */ value);
};
System.Windows.Controls.Control.prototype.NativeOnLostMouseCapture = function (e) {
	$asm02.MS.Internal.XcpImports.Control_Raise(this, e, 13);
};
System.Windows.Controls.Control.prototype.NativeTextInput = function (e) {
	$asm02.MS.Internal.XcpImports.Control_Raise(this, e, 14);
};
System.Windows.Controls.Control.prototype.NativeTextInputStart = function (e) {
	$asm02.MS.Internal.XcpImports.Control_Raise(this, e, 15);
};
System.Windows.Controls.Control.prototype.NativeTextInputUpdate = function (e) {
	$asm02.MS.Internal.XcpImports.Control_Raise(this, e, 16);
};
System.Windows.Controls.Control.prototype.NativeDragEnter = function (e) {
	$asm02.MS.Internal.XcpImports.Control_Raise(this, e, 17);
};
System.Windows.Controls.Control.prototype.NativeDragLeave = function (e) {
	$asm02.MS.Internal.XcpImports.Control_Raise(this, e, 18);
};
System.Windows.Controls.Control.prototype.NativeDragOver = function (e) {
	$asm02.MS.Internal.XcpImports.Control_Raise(this, e, 19);
};
System.Windows.Controls.Control.prototype.NativeDrop = function (e) {
	$asm02.MS.Internal.XcpImports.Control_Raise(this, e, 20);
};
System.Windows.Controls.Control.prototype.ShowValidationError = function () {
	this._isInvalid = true;
	this.UpdateValidationState();
};
System.Windows.Controls.Control.prototype.HideValidationError = function () {
	this._isInvalid = false;
	this.UpdateValidationState();
};
System.Windows.Controls.Control.prototype.UpdateValidationState = function () {
	System.Windows.FrameworkElement.prototype.remove_LayoutUpdated.call(this, JSIL.Delegate.New("System.EventHandler", this, System.Windows.Controls.Control.prototype.InvalidStateLayoutUpdated));
	System.Windows.FrameworkElement.prototype.remove_LayoutUpdated.call(this, JSIL.Delegate.New("System.EventHandler", this, System.Windows.Controls.Control.prototype.UpdateValidationStateInLayoutUpdate));
	if (!this._isInvalid) {
		System.Windows.VisualStateManager.GoToState(this, "Valid", true);
		return;
	}
	if (!(System.Windows.VisualStateManager.GoToState(this, this.HasFocus() ? "InvalidFocused" : "InvalidUnfocused", true) || this.ImplementationRoot)) {
		System.Windows.FrameworkElement.prototype.add_LayoutUpdated.call(this, JSIL.Delegate.New("System.EventHandler", this, System.Windows.Controls.Control.prototype.UpdateValidationStateInLayoutUpdate));
		return;
	}
	if (this.HasFocus()) {
		this._lastLocation = (System.Windows.UIElement.prototype.TransformToVisual.call(this, null)).Transform(new System.Windows.Point(0, 0)).MemberwiseClone();
		System.Windows.FrameworkElement.prototype.add_LayoutUpdated.call(this, JSIL.Delegate.New("System.EventHandler", this, System.Windows.Controls.Control.prototype.InvalidStateLayoutUpdated));
	}
};
System.Windows.Controls.Control.prototype.InvalidStateLayoutUpdated = function (sender, e) {
	if (!(this.IsInLiveTree && !System.Windows.Point.op_Inequality(this._lastLocation.MemberwiseClone(), (System.Windows.UIElement.prototype.TransformToVisual.call(this, null)).Transform(new System.Windows.Point(0, 0)).MemberwiseClone()))) {
		System.Windows.FrameworkElement.prototype.remove_LayoutUpdated.call(this, JSIL.Delegate.New("System.EventHandler", this, System.Windows.Controls.Control.prototype.InvalidStateLayoutUpdated));
		System.Windows.VisualStateManager.GoToState(this, "InvalidUnfocused", false);
	}
};
System.Windows.Controls.Control.prototype.UpdateValidationStateInLayoutUpdate = function (sender, e) {
	this.UpdateValidationState();
};
System.Windows.Controls.Control.prototype.OnManipulationStarted = function (e) {
	$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
};
System.Windows.Controls.Control.prototype.OnManipulationDelta = function (e) {
	$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
};
System.Windows.Controls.Control.prototype.OnManipulationCompleted = function (e) {
	$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
};
System.Windows.Controls.Control.prototype.OnTap = function (e) {
	$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
};
System.Windows.Controls.Control.prototype.OnDoubleTap = function (e) {
	$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
};
System.Windows.Controls.Control.prototype.OnHold = function (e) {
	$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
};
JSIL.OverloadedMethod(System.Windows.Controls.Control.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);
JSIL.MakeProperty(System.Windows.Controls.Control.prototype, "ImplementationRoot", 
	System.Windows.Controls.Control.prototype.get_ImplementationRoot, System.Windows.Controls.Control.prototype.set_ImplementationRoot);
JSIL.MakeProperty(System.Windows.Controls.Control.prototype, "DefaultStyleKey", 
	System.Windows.Controls.Control.prototype.get_DefaultStyleKey, System.Windows.Controls.Control.prototype.set_DefaultStyleKey);
JSIL.MakeProperty(System.Windows.Controls.Control.prototype, "IsTabStop", 
	System.Windows.Controls.Control.prototype.get_IsTabStop, System.Windows.Controls.Control.prototype.set_IsTabStop);
JSIL.MakeProperty(System.Windows.Controls.Control.prototype, "IsEnabled", 
	System.Windows.Controls.Control.prototype.get_IsEnabled, System.Windows.Controls.Control.prototype.set_IsEnabled);
JSIL.MakeProperty(System.Windows.Controls.Control.prototype, "TabIndex", 
	System.Windows.Controls.Control.prototype.get_TabIndex, System.Windows.Controls.Control.prototype.set_TabIndex);
JSIL.MakeProperty(System.Windows.Controls.Control.prototype, "TabNavigation", 
	System.Windows.Controls.Control.prototype.get_TabNavigation, System.Windows.Controls.Control.prototype.set_TabNavigation);
JSIL.MakeProperty(System.Windows.Controls.Control.prototype, "Template", 
	System.Windows.Controls.Control.prototype.get_Template, System.Windows.Controls.Control.prototype.set_Template);
JSIL.MakeProperty(System.Windows.Controls.Control.prototype, "Padding", 
	System.Windows.Controls.Control.prototype.get_Padding, System.Windows.Controls.Control.prototype.set_Padding);
JSIL.MakeProperty(System.Windows.Controls.Control.prototype, "BorderThickness", 
	System.Windows.Controls.Control.prototype.get_BorderThickness, System.Windows.Controls.Control.prototype.set_BorderThickness);
JSIL.MakeProperty(System.Windows.Controls.Control.prototype, "HorizontalContentAlignment", 
	System.Windows.Controls.Control.prototype.get_HorizontalContentAlignment, System.Windows.Controls.Control.prototype.set_HorizontalContentAlignment);
JSIL.MakeProperty(System.Windows.Controls.Control.prototype, "VerticalContentAlignment", 
	System.Windows.Controls.Control.prototype.get_VerticalContentAlignment, System.Windows.Controls.Control.prototype.set_VerticalContentAlignment);
JSIL.MakeProperty(System.Windows.Controls.Control.prototype, "Background", 
	System.Windows.Controls.Control.prototype.get_Background, System.Windows.Controls.Control.prototype.set_Background);
JSIL.MakeProperty(System.Windows.Controls.Control.prototype, "BorderBrush", 
	System.Windows.Controls.Control.prototype.get_BorderBrush, System.Windows.Controls.Control.prototype.set_BorderBrush);
JSIL.MakeProperty(System.Windows.Controls.Control.prototype, "FontFamily", 
	System.Windows.Controls.Control.prototype.get_FontFamily, System.Windows.Controls.Control.prototype.set_FontFamily);
JSIL.MakeProperty(System.Windows.Controls.Control.prototype, "FontSize", 
	System.Windows.Controls.Control.prototype.get_FontSize, System.Windows.Controls.Control.prototype.set_FontSize);
JSIL.MakeProperty(System.Windows.Controls.Control.prototype, "FontStretch", 
	System.Windows.Controls.Control.prototype.get_FontStretch, System.Windows.Controls.Control.prototype.set_FontStretch);
JSIL.MakeProperty(System.Windows.Controls.Control.prototype, "FontStyle", 
	System.Windows.Controls.Control.prototype.get_FontStyle, System.Windows.Controls.Control.prototype.set_FontStyle);
JSIL.MakeProperty(System.Windows.Controls.Control.prototype, "FontWeight", 
	System.Windows.Controls.Control.prototype.get_FontWeight, System.Windows.Controls.Control.prototype.set_FontWeight);
JSIL.MakeProperty(System.Windows.Controls.Control.prototype, "Foreground", 
	System.Windows.Controls.Control.prototype.get_Foreground, System.Windows.Controls.Control.prototype.set_Foreground);
JSIL.MakeProperty(System.Windows.Controls.Control, "OnEvent", 
	System.Windows.Controls.Control.get_OnEvent, null);
Object.defineProperty(System.Windows.Controls.Control, "DEFAULT_APP_STYLE", {
		"value": "themes/generic.xaml"}
);
Object.defineProperty(System.Windows.Controls.Control, "ValidState", {
		"value": "Valid"}
);
Object.defineProperty(System.Windows.Controls.Control, "InvalidUnfocusedState", {
		"value": "InvalidUnfocused"}
);
Object.defineProperty(System.Windows.Controls.Control, "InvalidFocusedState", {
		"value": "InvalidFocused"}
);
Object.defineProperty(System.Windows.Controls.Control, "ValidationStates", {
		"value": "ValidationStates"}
);
System.Windows.Controls.Control.IsTabStopProperty = null;
System.Windows.Controls.Control.TabIndexProperty = null;
System.Windows.Controls.Control.TemplateProperty = null;
System.Windows.Controls.Control.TabNavigationProperty = null;
System.Windows.Controls.Control.PaddingProperty = null;
System.Windows.Controls.Control.HorizontalContentAlignmentProperty = null;
System.Windows.Controls.Control.VerticalContentAlignmentProperty = null;
System.Windows.Controls.Control.BackgroundProperty = null;
System.Windows.Controls.Control.BorderBrushProperty = null;
System.Windows.Controls.Control.BorderThicknessProperty = null;
System.Windows.Controls.Control.FontSizeProperty = null;
System.Windows.Controls.Control.FontFamilyProperty = null;
System.Windows.Controls.Control.ForegroundProperty = null;
System.Windows.Controls.Control.FontWeightProperty = null;
System.Windows.Controls.Control.FontStyleProperty = null;
System.Windows.Controls.Control.FontStretchProperty = null;
System.Windows.Controls.Control.DefaultStyleKeyProperty = null;
System.Windows.Controls.Control.IsEnabledProperty = null;
System.Windows.Controls.Control.prototype.IsEnabledChanged = null;
System.Windows.Controls.Control._resourceDictionaryCache = null;
System.Windows.Controls.Control._controlDelgates = null;
System.Windows.Controls.Control.prototype._isInvalid = false;
System.Windows.Controls.Control._cctor = function () {
	System.Windows.Controls.Control.IsTabStopProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19300, System.Boolean);
	System.Windows.Controls.Control.TabIndexProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19301, System.Int32);
	System.Windows.Controls.Control.TemplateProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19302, System.Windows.Controls.ControlTemplate);
	System.Windows.Controls.Control.TabNavigationProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19303, System.Windows.Input.KeyboardNavigationMode);
	System.Windows.Controls.Control.PaddingProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19304, System.Windows.Thickness);
	System.Windows.Controls.Control.HorizontalContentAlignmentProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19305, System.Windows.HorizontalAlignment);
	System.Windows.Controls.Control.VerticalContentAlignmentProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19306, System.Windows.VerticalAlignment);
	System.Windows.Controls.Control.BackgroundProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19307, System.Windows.Media.Brush);
	System.Windows.Controls.Control.BorderBrushProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19308, System.Windows.Media.Brush);
	System.Windows.Controls.Control.BorderThicknessProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19309, System.Windows.Thickness);
	System.Windows.Controls.Control.FontSizeProperty = System.Windows.DependencyProperty.RegisterCoreProperty(8402708, System.Double);
	System.Windows.Controls.Control.FontFamilyProperty = System.Windows.DependencyProperty.RegisterCoreProperty(8402709, System.Windows.Media.FontFamily);
	System.Windows.Controls.Control.ForegroundProperty = System.Windows.DependencyProperty.RegisterCoreProperty(8402710, System.Windows.Media.Brush);
	System.Windows.Controls.Control.FontWeightProperty = System.Windows.DependencyProperty.RegisterCoreProperty(8402711, System.Windows.FontWeight);
	System.Windows.Controls.Control.FontStyleProperty = System.Windows.DependencyProperty.RegisterCoreProperty(8402712, System.Windows.FontStyle);
	System.Windows.Controls.Control.FontStretchProperty = System.Windows.DependencyProperty.RegisterCoreProperty(8402713, System.Windows.FontStretch);
	System.Windows.Controls.Control.DefaultStyleKeyProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19310, System.Object);
	System.Windows.Controls.Control.IsEnabledProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19311, System.Boolean);
	System.Windows.Controls.Control._controlDelgates = JSIL.Array.New(System.Windows.Controls.Control.ControlDelegate, [JSIL.Delegate.New("System.Windows.Controls.Control/ControlDelegate", null, System.Windows.Controls.Control.OnMouseMove), JSIL.Delegate.New("System.Windows.Controls.Control/ControlDelegate", null, System.Windows.Controls.Control.OnMouseEnter), JSIL.Delegate.New("System.Windows.Controls.Control/ControlDelegate", null, System.Windows.Controls.Control.OnMouseLeave), JSIL.Delegate.New("System.Windows.Controls.Control/ControlDelegate", null, System.Windows.Controls.Control.OnMouseLeftButtonDown), JSIL.Delegate.New("System.Windows.Controls.Control/ControlDelegate", null, System.Windows.Controls.Control.OnMouseLeftButtonUp), JSIL.Delegate.New("System.Windows.Controls.Control/ControlDelegate", null, System.Windows.Controls.Control.OnMouseRightButtonDown), JSIL.Delegate.New("System.Windows.Controls.Control/ControlDelegate", null, System.Windows.Controls.Control.OnMouseRightButtonUp), JSIL.Delegate.New("System.Windows.Controls.Control/ControlDelegate", null, System.Windows.Controls.Control.OnMouseWheel), JSIL.Delegate.New("System.Windows.Controls.Control/ControlDelegate", null, System.Windows.Controls.Control.OnKeyUp), JSIL.Delegate.New("System.Windows.Controls.Control/ControlDelegate", null, System.Windows.Controls.Control.OnKeyDown), JSIL.Delegate.New("System.Windows.Controls.Control/ControlDelegate", null, System.Windows.Controls.Control.OnGotFocus), JSIL.Delegate.New("System.Windows.Controls.Control/ControlDelegate", null, System.Windows.Controls.Control.OnLostFocus), JSIL.Delegate.New("System.Windows.Controls.Control/ControlDelegate", null, System.Windows.Controls.Control.OnIsEnabledChanged), JSIL.Delegate.New("System.Windows.Controls.Control/ControlDelegate", null, System.Windows.Controls.Control.OnLostMouseCapture), JSIL.Delegate.New("System.Windows.Controls.Control/ControlDelegate", null, System.Windows.Controls.Control.OnTextInput), JSIL.Delegate.New("System.Windows.Controls.Control/ControlDelegate", null, System.Windows.Controls.Control.OnTextInputStart), JSIL.Delegate.New("System.Windows.Controls.Control/ControlDelegate", null, System.Windows.Controls.Control.OnTextInputUpdate), JSIL.Delegate.New("System.Windows.Controls.Control/ControlDelegate", null, System.Windows.Controls.Control.OnDragEnter), JSIL.Delegate.New("System.Windows.Controls.Control/ControlDelegate", null, System.Windows.Controls.Control.OnDragLeave), JSIL.Delegate.New("System.Windows.Controls.Control/ControlDelegate", null, System.Windows.Controls.Control.OnDragOver), JSIL.Delegate.New("System.Windows.Controls.Control/ControlDelegate", null, System.Windows.Controls.Control.OnDrop)]);
};

System.Windows.Controls.TextBox.prototype._ctor$0 = function () {
	this._previousHSBV = System.Windows.Controls.ScrollBarVisibility.Hidden;
	this._horizontalScrollBarVisibility = System.Windows.Controls.ScrollBarVisibility.Hidden;
	this._verticalScrollBarVisibility = System.Windows.Controls.ScrollBarVisibility.Hidden;
	System.Windows.Controls.Control.prototype._ctor$1.call(this, 177);
	System.Windows.Controls.Control.prototype.set_DefaultStyleKey.call(this, System.Windows.Controls.TextBox);
};
System.Windows.Controls.TextBox.prototype._ctor$1 = function (nKnownTypeIndex) {
	this._previousHSBV = System.Windows.Controls.ScrollBarVisibility.Hidden;
	this._horizontalScrollBarVisibility = System.Windows.Controls.ScrollBarVisibility.Hidden;
	this._verticalScrollBarVisibility = System.Windows.Controls.ScrollBarVisibility.Hidden;
	System.Windows.Controls.Control.prototype._ctor$1.call(this, nKnownTypeIndex);
};
System.Windows.Controls.TextBox.prototype.add_TextChanged = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(24504, null), value);
};
System.Windows.Controls.TextBox.prototype.remove_TextChanged = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(24504, null), value);
};
System.Windows.Controls.TextBox.prototype.add_SelectionChanged = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(24505, null), value);
};
System.Windows.Controls.TextBox.prototype.remove_SelectionChanged = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(24505, null), value);
};
System.Windows.Controls.TextBox.prototype.get_IsReadOnly = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.TextBox.IsReadOnlyProperty), System.Boolean);
};
System.Windows.Controls.TextBox.prototype.set_IsReadOnly = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.TextBox.IsReadOnlyProperty, value);
};
System.Windows.Controls.TextBox.prototype.get_AcceptsReturn = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.TextBox.AcceptsReturnProperty), System.Boolean);
};
System.Windows.Controls.TextBox.prototype.set_AcceptsReturn = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.TextBox.AcceptsReturnProperty, value);
};
System.Windows.Controls.TextBox.prototype.get_SelectionBackground = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.TextBox.SelectionBackgroundProperty), System.Windows.Media.Brush);
};
System.Windows.Controls.TextBox.prototype.set_SelectionBackground = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.TextBox.SelectionBackgroundProperty, value);
};
System.Windows.Controls.TextBox.prototype.get_SelectionForeground = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.TextBox.SelectionForegroundProperty), System.Windows.Media.Brush);
};
System.Windows.Controls.TextBox.prototype.set_SelectionForeground = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.TextBox.SelectionForegroundProperty, value);
};
System.Windows.Controls.TextBox.prototype.get_TextAlignment = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.TextBox.TextAlignmentProperty), System.Windows.TextAlignment);
};
System.Windows.Controls.TextBox.prototype.set_TextAlignment = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.TextBox.TextAlignmentProperty, value);
};
System.Windows.Controls.TextBox.prototype.get_TextWrapping = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.TextBox.TextWrappingProperty), System.Windows.TextWrapping);
};
System.Windows.Controls.TextBox.prototype.set_TextWrapping = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.TextBox.TextWrappingProperty, value);
};
System.Windows.Controls.TextBox.prototype.get_CaretBrush = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.TextBox.CaretBrushProperty), System.Windows.Media.Brush);
};
System.Windows.Controls.TextBox.prototype.set_CaretBrush = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.TextBox.CaretBrushProperty, value);
};
System.Windows.Controls.TextBox.prototype.SelectAll = function () {
	$asm02.MS.Internal.XcpImports.TextBox_SelectAll(this);
};
System.Windows.Controls.TextBox.prototype.GetRectFromCharacterIndex$0 = function (charIndex) {
	$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
	return System.Windows.Rect.Empty;
};
System.Windows.Controls.TextBox.prototype.GetRectFromCharacterIndex$1 = function (charIndex, trailingEdge) {
	$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
	return System.Windows.Rect.Empty;
};
System.Windows.Controls.TextBox.prototype.get_InputScope = function () {
	$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.TextBox.InputScopeProperty), System.Windows.Input.InputScope);
};
System.Windows.Controls.TextBox.prototype.set_InputScope = function (value) {
	$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.TextBox.InputScopeProperty, value);
};
System.Windows.Controls.TextBox.prototype.get_Watermark = function () {
	$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
	return System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.TextBox.WatermarkProperty);
};
System.Windows.Controls.TextBox.prototype.set_Watermark = function (value) {
	$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.TextBox.WatermarkProperty, value);
};
System.Windows.Controls.TextBox.prototype.get_FontSource = function () {
	return this._fontSource;
};
System.Windows.Controls.TextBox.prototype.set_FontSource = function (value) {
	this._fontSource = value;
	this.UpdateFontSource(this._fontSource);
};
System.Windows.Controls.TextBox.prototype.get_Text = function () {
	var text = JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.TextBox.TextProperty), System.String);
	if (text !== null) {
		return text;
	}
	return System.String.Empty;
};
System.Windows.Controls.TextBox.prototype.set_Text = function (value) {
	if (value === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["Text"]);
	}
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.TextBox.TextProperty, value);
};
System.Windows.Controls.TextBox.prototype.get_SelectedText = function () {
	var text = JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.TextBox.SelectedTextProperty), System.String);
	if (text !== null) {
		return text;
	}
	return System.String.Empty;
};
System.Windows.Controls.TextBox.prototype.set_SelectedText = function (value) {
	if (value === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["SelectedText"]);
	}
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.TextBox.SelectedTextProperty, value);
};
System.Windows.Controls.TextBox.prototype.get_SelectionLength = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.TextBox.SelectionLengthProperty), System.Int32);
};
System.Windows.Controls.TextBox.prototype.set_SelectionLength = function (value) {
	if (value < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["SelectionLength"]);
	}
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.TextBox.SelectionLengthProperty, value);
};
System.Windows.Controls.TextBox.prototype.get_SelectionStart = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.TextBox.SelectionStartProperty), System.Int32);
};
System.Windows.Controls.TextBox.prototype.set_SelectionStart = function (value) {
	if (value < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["SelectionStart"]);
	}
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.TextBox.SelectionStartProperty, value);
};
System.Windows.Controls.TextBox.prototype.get_MaxLength = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.TextBox.MaxLengthProperty), System.Int32);
};
System.Windows.Controls.TextBox.prototype.set_MaxLength = function (value) {
	if (value < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["MaxLength"]);
	}
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.TextBox.MaxLengthProperty, value);
};
System.Windows.Controls.TextBox.prototype.get_HorizontalScrollBarVisibility = function () {
	return this._horizontalScrollBarVisibility;
};
System.Windows.Controls.TextBox.prototype.set_HorizontalScrollBarVisibility = function (value) {
	if (this.TextWrapping === System.Windows.TextWrapping.Wrap) {
		return;
	}
	this._horizontalScrollBarVisibility = value;
	this._previousHSBV = value;
	if (this._scrollViewer !== null) {
		this._scrollViewer.HorizontalScrollBarVisibility = value;
		this.UpdateInternalScrollingState();
	}
};
System.Windows.Controls.TextBox.prototype.get_VerticalScrollBarVisibility = function () {
	return this._verticalScrollBarVisibility;
};
System.Windows.Controls.TextBox.prototype.set_VerticalScrollBarVisibility = function (value) {
	this._verticalScrollBarVisibility = value;
	if (this._scrollViewer !== null) {
		this._scrollViewer.VerticalScrollBarVisibility = value;
		this.UpdateInternalScrollingState();
	}
};
System.Windows.Controls.TextBox.prototype.get_BaselineOffset = function () {
	return $asm02.MS.Internal.XcpImports.TextBox_GetBaselineOffset(this);
};
System.Windows.Controls.TextBox.prototype.OnCreateAutomationPeer = function () {
	return new System.Windows.Automation.Peers.TextBoxAutomationPeer(this);
};
System.Windows.Controls.TextBox.prototype.Select = function (start, length) {
	if (start < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["start"]);
	}
	if (length < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["length"]);
	}
	$asm02.MS.Internal.XcpImports.TextBox_Select(this, start, length);
};
System.Windows.Controls.TextBox.EnableScrollViewerIntegration = function (nativeTextBox, enable) {
	var textBox = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeTextBox), System.Windows.Controls.TextBox);
	if (textBox === null) {
		return -2147418113;
	}
	return textBox.EnableScrollViewerIntegration((enable !== 0));
};
System.Windows.Controls.TextBox.SetScrollOffsetOnScrollViewer = function (nativeTextBox, xOffset, yOffset) {
	var textBox = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeTextBox), System.Windows.Controls.TextBox);
	if (textBox === null) {
		return -2147418113;
	}
	return textBox.SetScrollOffsetOnScrollViewer(xOffset, yOffset);
};
System.Windows.Controls.TextBox.GetViewportSize = function (nativeTextBox, /* ref */ width, /* ref */ height) {
	width.value = 0;
	height.value = 0;
	var textBox = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeTextBox), System.Windows.Controls.TextBox);
	if (textBox === null) {
		return -2147418113;
	}
	return textBox.GetViewportSize(/* ref */ width, /* ref */ height);
};
System.Windows.Controls.TextBox.TextWrappingChanged = function (nativeTextBox) {
	var textBox = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeTextBox), System.Windows.Controls.TextBox);
	if (textBox === null) {
		return -2147418113;
	}
	return textBox.TextWrappingChanged();
};
System.Windows.Controls.TextBox.prototype.OnMouseMove = function (e) {
	System.Windows.Controls.Control.prototype.OnMouseMove.call(this, e);
	System.Windows.Controls.Control.prototype.NativeMouseMove.call(this, e);
};
System.Windows.Controls.TextBox.prototype.OnMouseEnter = function (e) {
	System.Windows.Controls.Control.prototype.OnMouseEnter.call(this, e);
	System.Windows.Controls.Control.prototype.NativeMouseEnter.call(this, e);
};
System.Windows.Controls.TextBox.prototype.OnMouseLeave = function (e) {
	System.Windows.Controls.Control.prototype.OnMouseLeave.call(this, e);
	System.Windows.Controls.Control.prototype.NativeMouseLeave.call(this, e);
};
System.Windows.Controls.TextBox.prototype.OnMouseLeftButtonDown = function (e) {
	System.Windows.Controls.Control.prototype.OnMouseLeftButtonDown.call(this, e);
	if (e.Handled) {
		return;
	}
	System.Windows.Controls.Control.prototype.NativeMouseLeftButtonDown.call(this, e);
};
System.Windows.Controls.TextBox.prototype.OnMouseLeftButtonUp = function (e) {
	System.Windows.Controls.Control.prototype.OnMouseLeftButtonUp.call(this, e);
	if (e.Handled) {
		return;
	}
	System.Windows.Controls.Control.prototype.NativeMouseLeftButtonUp.call(this, e);
};
System.Windows.Controls.TextBox.prototype.OnKeyUp = function (e) {
	System.Windows.Controls.Control.prototype.OnKeyUp.call(this, e);
	if (e.Handled) {
		return;
	}
	System.Windows.Controls.Control.prototype.NativeKeyUp.call(this, e);
};
System.Windows.Controls.TextBox.prototype.OnKeyDown = function (e) {
	System.Windows.Controls.Control.prototype.OnKeyDown.call(this, e);
	if (e.Handled) {
		return;
	}
	System.Windows.Controls.Control.prototype.NativeKeyDown.call(this, e);
};
System.Windows.Controls.TextBox.prototype.OnGotFocus = function (e) {
	System.Windows.Controls.Control.prototype.OnGotFocus.call(this, e);
	System.Windows.Controls.Control.prototype.NativeGotFocus.call(this, e);
};
System.Windows.Controls.TextBox.prototype.OnLostFocus = function (e) {
	System.Windows.Controls.Control.prototype.OnLostFocus.call(this, e);
	System.Windows.Controls.Control.prototype.NativeLostFocus.call(this, e);
};
System.Windows.Controls.TextBox.prototype.OnIsEnabledChanged = function (e) {
	System.Windows.Controls.Control.prototype.OnIsEnabledChanged.call(this, e);
	System.Windows.Controls.Control.prototype.NativeIsEnabledChanged.call(this, e);
};
System.Windows.Controls.TextBox.prototype.OnTextInputStart = function (e) {
	System.Windows.Controls.Control.prototype.OnTextInputStart.call(this, e);
	System.Windows.Controls.Control.prototype.NativeTextInputStart.call(this, e);
};
System.Windows.Controls.TextBox.prototype.OnTextInputUpdate = function (e) {
	System.Windows.Controls.Control.prototype.OnTextInputUpdate.call(this, e);
	System.Windows.Controls.Control.prototype.NativeTextInputUpdate.call(this, e);
};
System.Windows.Controls.TextBox.prototype.OnTextInput = function (e) {
	System.Windows.Controls.Control.prototype.OnTextInput.call(this, e);
	System.Windows.Controls.Control.prototype.NativeTextInput.call(this, e);
};
System.Windows.Controls.TextBox.prototype.OnLostMouseCapture = function (e) {
	System.Windows.Controls.Control.prototype.OnLostMouseCapture.call(this, e);
	System.Windows.Controls.Control.prototype.NativeOnLostMouseCapture.call(this, e);
};
System.Windows.Controls.TextBox.prototype.UpdateFontSource = function (fontSource) {
	if (!((fontSource !== null) && !fontSource.IsEmpty())) {
		$asm02.MS.Internal.XcpImports.SetFontSourceNull(this);
		return;
	}
	fontSource.SetTextFontSourceFromStream(this);
};
System.Windows.Controls.TextBox.prototype.EnableScrollViewerIntegration = function (enable) {
	if (enable) {
		this._scrollViewer = JSIL.TryCast(System.Windows.Controls.Control.prototype.GetTemplateChild.call(this, "ContentElement"), System.Windows.Controls.ScrollViewer);
		if (this._scrollViewer === null) {
			return -2147418113;
		}
		this._textBoxView = JSIL.TryCast(this._scrollViewer.Content, $asm02.MS.Internal.TextBoxView);
		if (this._textBoxView === null) {
			return -2147418113;
		}
		this._scrollViewer.TemplatedParentHandlesScrolling = true;
		this._scrollViewer.HorizontalScrollBarVisibility = this._horizontalScrollBarVisibility;
		this._scrollViewer.VerticalScrollBarVisibility = this._verticalScrollBarVisibility;
		this._scrollViewer.add_ScrollChanged(JSIL.Delegate.New("System.Windows.Controls.ScrollViewer/ScrollChangedDelegate", this, System.Windows.Controls.TextBox.prototype.OnScrollChanged));
		this.UpdateInternalScrollingState();
	} else {
		if (this._scrollViewer !== null) {
			this._scrollViewer.remove_ScrollChanged(JSIL.Delegate.New("System.Windows.Controls.ScrollViewer/ScrollChangedDelegate", this, System.Windows.Controls.TextBox.prototype.OnScrollChanged));
			this._scrollViewer = null;
		}
		if (this._textBoxView !== null) {
			$asm02.MS.Internal.XcpImports.TextBoxView_EnableInternalScrolling(this._textBoxView, true, true);
		}
		this._textBoxView = null;
	}
	return 0;
};
System.Windows.Controls.TextBox.prototype.OnScrollChanged = function (xOffset, yOffset) {
	var offset = new $asm02.MS.Internal.PointF();
	offset.x = -xOffset;
	offset.y = -yOffset;
	$asm02.MS.Internal.XcpImports.TextBoxView_SetScrollOffset(this._textBoxView, offset.MemberwiseClone());
};
System.Windows.Controls.TextBox.prototype.SetScrollOffsetOnScrollViewer = function (xOffset, yOffset) {
	if (this._scrollViewer === null) {
		return -2147418113;
	}
	this._scrollViewer.ScrollToHorizontalOffset(-xOffset);
	this._scrollViewer.ScrollToVerticalOffset(-yOffset);
	return 0;
};
System.Windows.Controls.TextBox.prototype.GetViewportSize = function (/* ref */ width, /* ref */ height) {
	width.value = 0;
	height.value = 0;
	if (this._scrollViewer === null) {
		return -2147418113;
	}
	if (!((this._scrollViewer === null) || 
			(this._scrollViewer.ElementScrollContentPresenter === null) || (this._textBoxView === null))) {
		width.value = this._scrollViewer.ElementScrollContentPresenter.ViewportWidth;
		height.value = this._scrollViewer.ElementScrollContentPresenter.ViewportHeight;
	}
	return 0;
};
System.Windows.Controls.TextBox.prototype.TextWrappingChanged = function () {
	if (this.TextWrapping === System.Windows.TextWrapping.Wrap) {
		this._previousHSBV = this._horizontalScrollBarVisibility;
		this._horizontalScrollBarVisibility = System.Windows.Controls.ScrollBarVisibility.Disabled;
		if (this._scrollViewer !== null) {
			this._scrollViewer.HorizontalScrollBarVisibility = System.Windows.Controls.ScrollBarVisibility.Disabled;
		}
		this.UpdateInternalScrollingState();
	} else {
		this.HorizontalScrollBarVisibility = this._previousHSBV;
	}
	return 0;
};
System.Windows.Controls.TextBox.prototype.UpdateInternalScrollingState = function () {
	if (this._textBoxView !== null) {
		$asm02.MS.Internal.XcpImports.TextBoxView_EnableInternalScrolling(this._textBoxView, (this._horizontalScrollBarVisibility !== System.Windows.Controls.ScrollBarVisibility.Disabled), (this._verticalScrollBarVisibility !== System.Windows.Controls.ScrollBarVisibility.Disabled));
	}
};
System.Windows.Controls.TextBox.prototype.ChangeVisualState = function (useTransitions, isEnabled, isFocused, isReadOnly, isMouseOver) {
	if (!isEnabled) {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "Disabled");
	} else if (isReadOnly) {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "ReadOnly");
	} else if (isMouseOver) {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "MouseOver");
	} else {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "Normal");
	}
	if (!(!isFocused || !isEnabled)) {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "Focused");
	} else {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "Unfocused");
	}
	return 0;
};
JSIL.OverloadedMethod(System.Windows.Controls.TextBox.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);
JSIL.OverloadedMethod(System.Windows.Controls.TextBox.prototype, "GetRectFromCharacterIndex", [
		["GetRectFromCharacterIndex$0", [System.Int32]], 
		["GetRectFromCharacterIndex$1", [System.Int32, System.Boolean]]
	]);
JSIL.MakeProperty(System.Windows.Controls.TextBox.prototype, "IsReadOnly", 
	System.Windows.Controls.TextBox.prototype.get_IsReadOnly, System.Windows.Controls.TextBox.prototype.set_IsReadOnly);
JSIL.MakeProperty(System.Windows.Controls.TextBox.prototype, "AcceptsReturn", 
	System.Windows.Controls.TextBox.prototype.get_AcceptsReturn, System.Windows.Controls.TextBox.prototype.set_AcceptsReturn);
JSIL.MakeProperty(System.Windows.Controls.TextBox.prototype, "SelectionBackground", 
	System.Windows.Controls.TextBox.prototype.get_SelectionBackground, System.Windows.Controls.TextBox.prototype.set_SelectionBackground);
JSIL.MakeProperty(System.Windows.Controls.TextBox.prototype, "SelectionForeground", 
	System.Windows.Controls.TextBox.prototype.get_SelectionForeground, System.Windows.Controls.TextBox.prototype.set_SelectionForeground);
JSIL.MakeProperty(System.Windows.Controls.TextBox.prototype, "TextAlignment", 
	System.Windows.Controls.TextBox.prototype.get_TextAlignment, System.Windows.Controls.TextBox.prototype.set_TextAlignment);
JSIL.MakeProperty(System.Windows.Controls.TextBox.prototype, "TextWrapping", 
	System.Windows.Controls.TextBox.prototype.get_TextWrapping, System.Windows.Controls.TextBox.prototype.set_TextWrapping);
JSIL.MakeProperty(System.Windows.Controls.TextBox.prototype, "CaretBrush", 
	System.Windows.Controls.TextBox.prototype.get_CaretBrush, System.Windows.Controls.TextBox.prototype.set_CaretBrush);
JSIL.MakeProperty(System.Windows.Controls.TextBox.prototype, "InputScope", 
	System.Windows.Controls.TextBox.prototype.get_InputScope, System.Windows.Controls.TextBox.prototype.set_InputScope);
JSIL.MakeProperty(System.Windows.Controls.TextBox.prototype, "Watermark", 
	System.Windows.Controls.TextBox.prototype.get_Watermark, System.Windows.Controls.TextBox.prototype.set_Watermark);
JSIL.MakeProperty(System.Windows.Controls.TextBox.prototype, "FontSource", 
	System.Windows.Controls.TextBox.prototype.get_FontSource, System.Windows.Controls.TextBox.prototype.set_FontSource);
JSIL.MakeProperty(System.Windows.Controls.TextBox.prototype, "Text", 
	System.Windows.Controls.TextBox.prototype.get_Text, System.Windows.Controls.TextBox.prototype.set_Text);
JSIL.MakeProperty(System.Windows.Controls.TextBox.prototype, "SelectedText", 
	System.Windows.Controls.TextBox.prototype.get_SelectedText, System.Windows.Controls.TextBox.prototype.set_SelectedText);
JSIL.MakeProperty(System.Windows.Controls.TextBox.prototype, "SelectionLength", 
	System.Windows.Controls.TextBox.prototype.get_SelectionLength, System.Windows.Controls.TextBox.prototype.set_SelectionLength);
JSIL.MakeProperty(System.Windows.Controls.TextBox.prototype, "SelectionStart", 
	System.Windows.Controls.TextBox.prototype.get_SelectionStart, System.Windows.Controls.TextBox.prototype.set_SelectionStart);
JSIL.MakeProperty(System.Windows.Controls.TextBox.prototype, "MaxLength", 
	System.Windows.Controls.TextBox.prototype.get_MaxLength, System.Windows.Controls.TextBox.prototype.set_MaxLength);
JSIL.MakeProperty(System.Windows.Controls.TextBox.prototype, "HorizontalScrollBarVisibility", 
	System.Windows.Controls.TextBox.prototype.get_HorizontalScrollBarVisibility, System.Windows.Controls.TextBox.prototype.set_HorizontalScrollBarVisibility);
JSIL.MakeProperty(System.Windows.Controls.TextBox.prototype, "VerticalScrollBarVisibility", 
	System.Windows.Controls.TextBox.prototype.get_VerticalScrollBarVisibility, System.Windows.Controls.TextBox.prototype.set_VerticalScrollBarVisibility);
JSIL.MakeProperty(System.Windows.Controls.TextBox.prototype, "BaselineOffset", 
	System.Windows.Controls.TextBox.prototype.get_BaselineOffset, null);
Object.defineProperty(System.Windows.Controls.TextBox, "ElementContentName", {
		"value": "ContentElement"}
);
System.Windows.Controls.TextBox.TextProperty = null;
System.Windows.Controls.TextBox.SelectedTextProperty = null;
System.Windows.Controls.TextBox.SelectionLengthProperty = null;
System.Windows.Controls.TextBox.SelectionStartProperty = null;
System.Windows.Controls.TextBox.MaxLengthProperty = null;
System.Windows.Controls.TextBox.IsReadOnlyProperty = null;
System.Windows.Controls.TextBox.AcceptsReturnProperty = null;
System.Windows.Controls.TextBox.SelectionBackgroundProperty = null;
System.Windows.Controls.TextBox.SelectionForegroundProperty = null;
System.Windows.Controls.TextBox.TextAlignmentProperty = null;
System.Windows.Controls.TextBox.TextWrappingProperty = null;
System.Windows.Controls.TextBox.CaretBrushProperty = null;
System.Windows.Controls.TextBox.InputScopeProperty = null;
System.Windows.Controls.TextBox.WatermarkProperty = null;
System.Windows.Controls.TextBox.prototype._fontSource = null;
System.Windows.Controls.TextBox.prototype._scrollViewer = null;
System.Windows.Controls.TextBox.prototype._textBoxView = null;
System.Windows.Controls.TextBox.prototype._previousHSBV = 0;
System.Windows.Controls.TextBox.prototype._horizontalScrollBarVisibility = 0;
System.Windows.Controls.TextBox.prototype._verticalScrollBarVisibility = 0;
System.Windows.Controls.TextBox.$CachedAnonymousMethodDelegate2 = null;
System.Windows.Controls.TextBox.$CachedAnonymousMethodDelegate3 = null;
System.Windows.Controls.TextBox._cctor = function () {
	System.Windows.Controls.TextBox.TextProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19400, System.String);
	System.Windows.Controls.TextBox.SelectedTextProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19404, System.String);
	System.Windows.Controls.TextBox.SelectionLengthProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19406, System.Int32);
	System.Windows.Controls.TextBox.SelectionStartProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19405, System.Int32);
	System.Windows.Controls.TextBox.MaxLengthProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19407, System.Int32);
	System.Windows.Controls.TextBox.IsReadOnlyProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19408, System.Boolean);
	System.Windows.Controls.TextBox.AcceptsReturnProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19410, System.Boolean);
	System.Windows.Controls.TextBox.SelectionBackgroundProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19402, System.Windows.Media.Brush);
	System.Windows.Controls.TextBox.SelectionForegroundProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19403, System.Windows.Media.Brush);
	System.Windows.Controls.TextBox.TextAlignmentProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19409, System.Windows.TextAlignment);
	System.Windows.Controls.TextBox.TextWrappingProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19401, System.Windows.TextWrapping);
	System.Windows.Controls.TextBox.CaretBrushProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19411, System.Windows.Media.Brush);
	System.Windows.Controls.TextBox.InputScopeProperty = System.Windows.DependencyProperty.Register$0("InputScope", System.Windows.Input.InputScope, System.Windows.Controls.TextBox, JSIL.New(System.Windows.PropertyMetadata, "_ctor$0", [function (o, a) {
				$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
			}]));
	System.Windows.Controls.TextBox.WatermarkProperty = System.Windows.DependencyProperty.Register$0("Watermark", System.Object, System.Windows.Controls.TextBox, JSIL.New(System.Windows.PropertyMetadata, "_ctor$0", [function (o, a) {
				$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
			}]));
};

System.Windows.Controls.RichTextBox.prototype._ctor$0 = function () {
	this._previousHSBV = System.Windows.Controls.ScrollBarVisibility.Hidden;
	this._verticalScrollBarVisibility = System.Windows.Controls.ScrollBarVisibility.Auto;
	this._selectionLock = new System.Object();
	this._clipboardXAMLSerializer = new $asm02.MS.Internal.ClipboardXAMLSerializer();
	System.Windows.Controls.Control.prototype._ctor$1.call(this, 340);
	System.Windows.Controls.Control.prototype.set_DefaultStyleKey.call(this, System.Windows.Controls.RichTextBox);
};
System.Windows.Controls.RichTextBox.prototype._ctor$1 = function (nKnownTypeIndex) {
	this._previousHSBV = System.Windows.Controls.ScrollBarVisibility.Hidden;
	this._verticalScrollBarVisibility = System.Windows.Controls.ScrollBarVisibility.Auto;
	this._selectionLock = new System.Object();
	this._clipboardXAMLSerializer = new $asm02.MS.Internal.ClipboardXAMLSerializer();
	System.Windows.Controls.Control.prototype._ctor$1.call(this, nKnownTypeIndex);
};
System.Windows.Controls.RichTextBox.prototype.add_SelectionChanged = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(26016, null), value);
};
System.Windows.Controls.RichTextBox.prototype.remove_SelectionChanged = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(26016, null), value);
};
System.Windows.Controls.RichTextBox.prototype.add_ContentChanged = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(26017, null), value);
};
System.Windows.Controls.RichTextBox.prototype.remove_ContentChanged = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(26017, null), value);
};
System.Windows.Controls.RichTextBox.prototype.get_IsReadOnly = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.RichTextBox.IsReadOnlyProperty), System.Boolean);
};
System.Windows.Controls.RichTextBox.prototype.set_IsReadOnly = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.RichTextBox.IsReadOnlyProperty, value);
};
System.Windows.Controls.RichTextBox.prototype.get_TextWrapping = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.RichTextBox.TextWrappingProperty), System.Windows.TextWrapping);
};
System.Windows.Controls.RichTextBox.prototype.set_TextWrapping = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.RichTextBox.TextWrappingProperty, value);
};
System.Windows.Controls.RichTextBox.prototype.get_CaretBrush = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.RichTextBox.CaretBrushProperty), System.Windows.Media.Brush);
};
System.Windows.Controls.RichTextBox.prototype.set_CaretBrush = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.RichTextBox.CaretBrushProperty, value);
};
System.Windows.Controls.RichTextBox.prototype.get_TextAlignment = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.RichTextBox.TextAlignmentProperty), System.Windows.TextAlignment);
};
System.Windows.Controls.RichTextBox.prototype.set_TextAlignment = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.RichTextBox.TextAlignmentProperty, value);
};
System.Windows.Controls.RichTextBox.prototype.get_AcceptsReturn = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.RichTextBox.AcceptsReturnProperty), System.Boolean);
};
System.Windows.Controls.RichTextBox.prototype.set_AcceptsReturn = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.RichTextBox.AcceptsReturnProperty, value);
};
System.Windows.Controls.RichTextBox.prototype.SelectAll = function () {
	$asm02.MS.Internal.XcpImports.RichTextBox_SelectAll(this);
};
System.Windows.Controls.RichTextBox.prototype.get_Selection = function () {
	var selectionLock = null;
	System.Threading.Monitor.Enter((selectionLock = this._selectionLock));
	try {
		if (this._selection === null) {
			this._selection = new System.Windows.Documents.TextSelection(this);
		}
	} finally {
		System.Threading.Monitor.Exit(selectionLock);
	}
	return this._selection;
};
System.Windows.Controls.RichTextBox.prototype.get_Blocks = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.RichTextBox.BlocksProperty), System.Windows.Documents.BlockCollection);
};
System.Windows.Controls.RichTextBox.prototype.get_Xaml = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.RichTextBox.XamlProperty), System.String);
};
System.Windows.Controls.RichTextBox.prototype.set_Xaml = function (value) {
	if (value === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["value"]);
	}
	var richTextXAMLValidator = new $asm02.MS.Internal.RichTextXAMLValidator();
	if (!richTextXAMLValidator.ValidateXAML(value)) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", ["value"]);
	}
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.RichTextBox.XamlProperty, value);
};
System.Windows.Controls.RichTextBox.prototype.get_HorizontalScrollBarVisibility = function () {
	return this._horizontalScrollBarVisibility;
};
System.Windows.Controls.RichTextBox.prototype.set_HorizontalScrollBarVisibility = function (value) {
	this._previousHSBV = value;
	if (this.TextWrapping !== System.Windows.TextWrapping.Wrap) {
		this.UpdateScrollBarVisibility(System.Windows.Controls.Orientation.Horizontal, value);
	}
};
System.Windows.Controls.RichTextBox.prototype.get_VerticalScrollBarVisibility = function () {
	return this._verticalScrollBarVisibility;
};
System.Windows.Controls.RichTextBox.prototype.set_VerticalScrollBarVisibility = function (value) {
	this.UpdateScrollBarVisibility(System.Windows.Controls.Orientation.Vertical, value);
};
System.Windows.Controls.RichTextBox.prototype.get_BaselineOffset = function () {
	return $asm02.MS.Internal.XcpImports.RichTextBox_GetBaselineOffset(this);
};
System.Windows.Controls.RichTextBox.prototype.GetPositionFromPoint = function (point) {
	var point2 = new $asm02.MS.Internal.PointF();
	point2.x = point.X;
	point2.y = point.Y;
	return $asm02.MS.Internal.XcpImports.RichTextBox_GetTextPositionFromPoint(this, point2.MemberwiseClone());
};
System.Windows.Controls.RichTextBox.prototype.get_ContentStart = function () {
	return $asm02.MS.Internal.XcpImports.RichTextBox_GetDocumentEdge(this, $asm02.System.Windows.Documents.ElementEdge.ContentStart);
};
System.Windows.Controls.RichTextBox.prototype.get_ContentEnd = function () {
	return $asm02.MS.Internal.XcpImports.RichTextBox_GetDocumentEdge(this, $asm02.System.Windows.Documents.ElementEdge.ContentEnd);
};
System.Windows.Controls.RichTextBox.EnableScrollViewerIntegration = function (nativeRichTextBox, enable) {
	var richTextBox = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeRichTextBox), System.Windows.Controls.RichTextBox);
	if (richTextBox === null) {
		return -2147418113;
	}
	return richTextBox.EnableScrollViewerIntegration((enable !== 0));
};
System.Windows.Controls.RichTextBox.GetViewportSize = function (nativeRichTextBox, /* ref */ width, /* ref */ height) {
	width.value = 0;
	height.value = 0;
	var richTextBox = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeRichTextBox), System.Windows.Controls.RichTextBox);
	if (richTextBox === null) {
		return -2147418113;
	}
	return richTextBox.GetViewportSize(/* ref */ width, /* ref */ height);
};
System.Windows.Controls.RichTextBox.TextWrappingChanged = function (nativeRichTextBox) {
	var richTextBox = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeRichTextBox), System.Windows.Controls.RichTextBox);
	if (richTextBox === null) {
		return -2147418113;
	}
	return richTextBox.TextWrappingChanged();
};
System.Windows.Controls.RichTextBox.ClipboardElement = function (nativeRichTextBox, action, textElement, propertyId, propertyTypeIndex, /* ref */ propertyValue) {
	var richTextBox = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeRichTextBox), System.Windows.Controls.RichTextBox);
	if (richTextBox === null) {
		return -2147418113;
	}
	try {
		if (action === 1) {
			var hasTrailingParagraphBreakOnPaste = true;
			if (!((propertyId !== 14271) || (propertyValue.value.Type !== MS.Internal.VType.valueBool))) {
				hasTrailingParagraphBreakOnPaste = System.Convert.ToBoolean$9(propertyValue.value.m_nValue);
			}
			richTextBox._clipboardXAMLSerializer.StartDocument(hasTrailingParagraphBreakOnPaste);
		} else if (action === 2) {
			var textElement2 = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(textElement), System.Windows.Documents.TextElement);
			if (textElement2 === null) {
				var result = -2147418113;
				return result;
			}
			richTextBox._clipboardXAMLSerializer.StartElement(textElement2);
		} else if (action === 3) {
			var dependencyProperty = System.Windows.DependencyProperty.QueryRegisteredCoreProperty$0(propertyId);
			var value = $asm02.MS.Internal.XcpImports.ConvertCValueForManagedWithType$2(
				dependencyProperty._propertyType, 
				/* ref */ propertyValue, 
				propertyTypeIndex, 
				false, 
				false, 
				null
			);
			richTextBox._clipboardXAMLSerializer.WriteAttribute$0(dependencyProperty, value);
		} else if (action === 4) {
			richTextBox._clipboardXAMLSerializer.EndElement();
		}
	} catch ($exception) {
		var arg_B2_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForUserException(arg_B2_0);
		return result;
	}
	return 0;
};
System.Windows.Controls.RichTextBox.ClipboardString = function (nativeRichTextBox, textValue, optionalAttributeName) {
	var richTextBox = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeRichTextBox), System.Windows.Controls.RichTextBox);
	if (richTextBox === null) {
		return -2147418113;
	}
	if (textValue === null) {
		return -2147418113;
	}
	try {
		if (optionalAttributeName === null) {
			richTextBox._clipboardXAMLSerializer.WriteAttribute$1("Text", textValue);
		} else {
			richTextBox._clipboardXAMLSerializer.WriteAttribute$1(optionalAttributeName, textValue);
		}
	} catch ($exception) {
		var arg_43_0 = $exception;
		return $asm02.MS.Internal.Error.GetXresultForUserException(arg_43_0);
	}
	return 0;
};
System.Windows.Controls.RichTextBox.ClipboardEnd = function (nativeRichTextBox, /* ref */ pResultXAML, /* ref */ resultXAMLLength) {
	var text = new JSIL.Variable(null);
	pResultXAML.value = System.IntPtr.Zero;
	resultXAMLLength.value = 0;
	var richTextBox = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeRichTextBox), System.Windows.Controls.RichTextBox);
	if (richTextBox === null) {
		return -2147418113;
	}
	try {
		richTextBox._clipboardXAMLSerializer.EndDocument(/* ref */ text);
		resultXAMLLength.value = text.value.length;
		pResultXAML.value = $asm02.MS.Internal.FrameworkCallbacks.MarshalStringToNative(text.value);
	} catch ($exception) {
		var arg_48_0 = $exception;
		return $asm02.MS.Internal.Error.GetXresultForUserException(arg_48_0);
	}
	return 0;
};
System.Windows.Controls.RichTextBox.prototype.OnMouseMove = function (e) {
	System.Windows.Controls.Control.prototype.OnMouseMove.call(this, e);
	System.Windows.Controls.Control.prototype.NativeMouseMove.call(this, e);
};
System.Windows.Controls.RichTextBox.prototype.OnMouseEnter = function (e) {
	System.Windows.Controls.Control.prototype.OnMouseEnter.call(this, e);
	System.Windows.Controls.Control.prototype.NativeMouseEnter.call(this, e);
};
System.Windows.Controls.RichTextBox.prototype.OnMouseLeave = function (e) {
	System.Windows.Controls.Control.prototype.OnMouseLeave.call(this, e);
	System.Windows.Controls.Control.prototype.NativeMouseLeave.call(this, e);
};
System.Windows.Controls.RichTextBox.prototype.OnMouseLeftButtonDown = function (e) {
	System.Windows.Controls.Control.prototype.OnMouseLeftButtonDown.call(this, e);
	if (e.Handled) {
		return;
	}
	System.Windows.Controls.Control.prototype.NativeMouseLeftButtonDown.call(this, e);
};
System.Windows.Controls.RichTextBox.prototype.OnMouseLeftButtonUp = function (e) {
	System.Windows.Controls.Control.prototype.OnMouseLeftButtonUp.call(this, e);
	if (e.Handled) {
		return;
	}
	System.Windows.Controls.Control.prototype.NativeMouseLeftButtonUp.call(this, e);
};
System.Windows.Controls.RichTextBox.prototype.OnKeyUp = function (e) {
	System.Windows.Controls.Control.prototype.OnKeyUp.call(this, e);
	if (e.Handled) {
		return;
	}
	System.Windows.Controls.Control.prototype.NativeKeyUp.call(this, e);
};
System.Windows.Controls.RichTextBox.prototype.OnKeyDown = function (e) {
	System.Windows.Controls.Control.prototype.OnKeyDown.call(this, e);
	if (e.Handled) {
		return;
	}
	var flag = (System.Windows.Input.ModifierKeys.Shift === (System.Windows.Input.Keyboard.Modifiers & System.Windows.Input.ModifierKeys.Shift));
	if (!(!this.IsReadOnly || 
			(this._scrollViewer === null) || flag)) {
		this._scrollViewer.TemplatedParentHandlesScrolling = false;
		this._scrollViewer.HandleKeyDown(e);
		this._scrollViewer.TemplatedParentHandlesScrolling = true;
	}
	if (!e.Handled) {
		System.Windows.Controls.Control.prototype.NativeKeyDown.call(this, e);
	}
};
System.Windows.Controls.RichTextBox.prototype.OnGotFocus = function (e) {
	System.Windows.Controls.Control.prototype.OnGotFocus.call(this, e);
	System.Windows.Controls.Control.prototype.NativeGotFocus.call(this, e);
};
System.Windows.Controls.RichTextBox.prototype.OnLostFocus = function (e) {
	System.Windows.Controls.Control.prototype.OnLostFocus.call(this, e);
	System.Windows.Controls.Control.prototype.NativeLostFocus.call(this, e);
};
System.Windows.Controls.RichTextBox.prototype.OnIsEnabledChanged = function (e) {
	System.Windows.Controls.Control.prototype.OnIsEnabledChanged.call(this, e);
	System.Windows.Controls.Control.prototype.NativeIsEnabledChanged.call(this, e);
};
System.Windows.Controls.RichTextBox.prototype.OnTextInputStart = function (e) {
	System.Windows.Controls.Control.prototype.OnTextInputStart.call(this, e);
	System.Windows.Controls.Control.prototype.NativeTextInputStart.call(this, e);
};
System.Windows.Controls.RichTextBox.prototype.OnTextInputUpdate = function (e) {
	System.Windows.Controls.Control.prototype.OnTextInputUpdate.call(this, e);
	System.Windows.Controls.Control.prototype.NativeTextInputUpdate.call(this, e);
};
System.Windows.Controls.RichTextBox.prototype.OnTextInput = function (e) {
	System.Windows.Controls.Control.prototype.OnTextInput.call(this, e);
	System.Windows.Controls.Control.prototype.NativeTextInput.call(this, e);
};
System.Windows.Controls.RichTextBox.prototype.OnLostMouseCapture = function (e) {
	System.Windows.Controls.Control.prototype.OnLostMouseCapture.call(this, e);
	System.Windows.Controls.Control.prototype.NativeOnLostMouseCapture.call(this, e);
};
System.Windows.Controls.RichTextBox.prototype.OnCreateAutomationPeer = function () {
	return new System.Windows.Automation.Peers.RichTextBoxAutomationPeer(this);
};
System.Windows.Controls.RichTextBox.prototype.UpdateScrollBarVisibility = function (orientation, visibility) {
	if (orientation === System.Windows.Controls.Orientation.Horizontal) {
		this._horizontalScrollBarVisibility = visibility;
		if (this._scrollViewer !== null) {
			this._scrollViewer.HorizontalScrollBarVisibility = visibility;
			return;
		}
	} else {
		this._verticalScrollBarVisibility = visibility;
		if (this._scrollViewer !== null) {
			this._scrollViewer.VerticalScrollBarVisibility = visibility;
		}
	}
};
System.Windows.Controls.RichTextBox.prototype.ChangeVisualState = function (useTransitions, isEnabled, isFocused, isReadOnly, isMouseOver) {
	if (!isEnabled) {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "Disabled");
	} else if (isReadOnly) {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "ReadOnly");
	} else if (isMouseOver) {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "MouseOver");
	} else {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "Normal");
	}
	if (!(!isFocused || !isEnabled)) {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "Focused");
	} else {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "Unfocused");
	}
	return 0;
};
System.Windows.Controls.RichTextBox.prototype.GetVisibleRectangle = function () {
	var empty = System.Windows.Rect.Empty.MemberwiseClone();
	var point = this.TransformTextViewCoordinateToTextBox(new System.Windows.Point(0, 0)).MemberwiseClone();
	empty._ctor$0((point.X + this._scrollViewer.ElementScrollContentPresenter.HorizontalOffset), (point.Y + this._scrollViewer.ElementScrollContentPresenter.VerticalOffset), this._scrollViewer.ElementScrollContentPresenter.ViewportWidth, this._scrollViewer.ElementScrollContentPresenter.ViewportHeight);
	return empty;
};
System.Windows.Controls.RichTextBox.prototype.TransformTextViewCoordinateToTextBox = function (textViewCoordinate) {
	var generalTransform = this._richTextBoxView.TransformToVisual(this);
	return generalTransform.Transform(textViewCoordinate);
};
System.Windows.Controls.RichTextBox.prototype.EnableScrollViewerIntegration = function (enable) {
	if (enable) {
		this._scrollViewer = JSIL.TryCast(System.Windows.Controls.Control.prototype.GetTemplateChild.call(this, "ContentElement"), System.Windows.Controls.ScrollViewer);
		if (this._scrollViewer === null) {
			return -2147418113;
		}
		this._richTextBoxView = JSIL.TryCast(this._scrollViewer.Content, $asm02.MS.Internal.RichTextBoxView);
		if (this._richTextBoxView === null) {
			return -2147418113;
		}
		this._scrollViewer.TemplatedParentHandlesScrolling = true;
		this._scrollViewer.TemplatedParentHandlesMouseButton = true;
		this._scrollViewer.HorizontalScrollBarVisibility = this._horizontalScrollBarVisibility;
		this._scrollViewer.VerticalScrollBarVisibility = this._verticalScrollBarVisibility;
		this._scrollViewer.add_ScrollChanged(JSIL.Delegate.New("System.Windows.Controls.ScrollViewer/ScrollChangedDelegate", this, System.Windows.Controls.RichTextBox.prototype.OnScrollChanged));
	} else {
		if (this._scrollViewer !== null) {
			this._scrollViewer.remove_ScrollChanged(JSIL.Delegate.New("System.Windows.Controls.ScrollViewer/ScrollChangedDelegate", this, System.Windows.Controls.RichTextBox.prototype.OnScrollChanged));
			this._scrollViewer = null;
		}
		this._richTextBoxView = null;
	}
	return 0;
};
System.Windows.Controls.RichTextBox.prototype.OnScrollChanged = function (xOffset, yOffset) {
	var offset = new $asm02.MS.Internal.PointF();
	offset.x = -xOffset;
	offset.y = -yOffset;
	$asm02.MS.Internal.XcpImports.RichTextBoxView_SetScrollOffset(this._richTextBoxView, offset.MemberwiseClone());
};
System.Windows.Controls.RichTextBox.prototype.GetViewportSize = function (/* ref */ width, /* ref */ height) {
	width.value = 0;
	height.value = 0;
	if (this._scrollViewer === null) {
		return -2147418113;
	}
	if (!((this._scrollViewer === null) || 
			(this._scrollViewer.ElementScrollContentPresenter === null) || (this._richTextBoxView === null))) {
		width.value = this._scrollViewer.ElementScrollContentPresenter.ViewportWidth;
		height.value = this._scrollViewer.ElementScrollContentPresenter.ViewportHeight;
	}
	return 0;
};
System.Windows.Controls.RichTextBox.prototype.TextWrappingChanged = function () {
	if (this.TextWrapping === System.Windows.TextWrapping.Wrap) {
		this._previousHSBV = this._horizontalScrollBarVisibility;
		this.UpdateScrollBarVisibility(System.Windows.Controls.Orientation.Horizontal, System.Windows.Controls.ScrollBarVisibility.Disabled);
	} else {
		this.HorizontalScrollBarVisibility = this._previousHSBV;
	}
	return 0;
};
JSIL.OverloadedMethod(System.Windows.Controls.RichTextBox.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);
JSIL.MakeProperty(System.Windows.Controls.RichTextBox.prototype, "IsReadOnly", 
	System.Windows.Controls.RichTextBox.prototype.get_IsReadOnly, System.Windows.Controls.RichTextBox.prototype.set_IsReadOnly);
JSIL.MakeProperty(System.Windows.Controls.RichTextBox.prototype, "TextWrapping", 
	System.Windows.Controls.RichTextBox.prototype.get_TextWrapping, System.Windows.Controls.RichTextBox.prototype.set_TextWrapping);
JSIL.MakeProperty(System.Windows.Controls.RichTextBox.prototype, "CaretBrush", 
	System.Windows.Controls.RichTextBox.prototype.get_CaretBrush, System.Windows.Controls.RichTextBox.prototype.set_CaretBrush);
JSIL.MakeProperty(System.Windows.Controls.RichTextBox.prototype, "TextAlignment", 
	System.Windows.Controls.RichTextBox.prototype.get_TextAlignment, System.Windows.Controls.RichTextBox.prototype.set_TextAlignment);
JSIL.MakeProperty(System.Windows.Controls.RichTextBox.prototype, "AcceptsReturn", 
	System.Windows.Controls.RichTextBox.prototype.get_AcceptsReturn, System.Windows.Controls.RichTextBox.prototype.set_AcceptsReturn);
JSIL.MakeProperty(System.Windows.Controls.RichTextBox.prototype, "Selection", 
	System.Windows.Controls.RichTextBox.prototype.get_Selection, null);
JSIL.MakeProperty(System.Windows.Controls.RichTextBox.prototype, "Blocks", 
	System.Windows.Controls.RichTextBox.prototype.get_Blocks, null);
JSIL.MakeProperty(System.Windows.Controls.RichTextBox.prototype, "Xaml", 
	System.Windows.Controls.RichTextBox.prototype.get_Xaml, System.Windows.Controls.RichTextBox.prototype.set_Xaml);
JSIL.MakeProperty(System.Windows.Controls.RichTextBox.prototype, "HorizontalScrollBarVisibility", 
	System.Windows.Controls.RichTextBox.prototype.get_HorizontalScrollBarVisibility, System.Windows.Controls.RichTextBox.prototype.set_HorizontalScrollBarVisibility);
JSIL.MakeProperty(System.Windows.Controls.RichTextBox.prototype, "VerticalScrollBarVisibility", 
	System.Windows.Controls.RichTextBox.prototype.get_VerticalScrollBarVisibility, System.Windows.Controls.RichTextBox.prototype.set_VerticalScrollBarVisibility);
JSIL.MakeProperty(System.Windows.Controls.RichTextBox.prototype, "BaselineOffset", 
	System.Windows.Controls.RichTextBox.prototype.get_BaselineOffset, null);
JSIL.MakeProperty(System.Windows.Controls.RichTextBox.prototype, "ContentStart", 
	System.Windows.Controls.RichTextBox.prototype.get_ContentStart, null);
JSIL.MakeProperty(System.Windows.Controls.RichTextBox.prototype, "ContentEnd", 
	System.Windows.Controls.RichTextBox.prototype.get_ContentEnd, null);
Object.defineProperty(System.Windows.Controls.RichTextBox, "ElementContentName", {
		"value": "ContentElement"}
);
System.Windows.Controls.RichTextBox.IsReadOnlyProperty = null;
System.Windows.Controls.RichTextBox.TextWrappingProperty = null;
System.Windows.Controls.RichTextBox.CaretBrushProperty = null;
System.Windows.Controls.RichTextBox.TextAlignmentProperty = null;
System.Windows.Controls.RichTextBox.BlocksProperty = null;
System.Windows.Controls.RichTextBox.XamlProperty = null;
System.Windows.Controls.RichTextBox.AcceptsReturnProperty = null;
System.Windows.Controls.RichTextBox.prototype._scrollViewer = null;
System.Windows.Controls.RichTextBox.prototype._richTextBoxView = null;
System.Windows.Controls.RichTextBox.prototype._previousHSBV = 0;
System.Windows.Controls.RichTextBox.prototype._horizontalScrollBarVisibility = 0;
System.Windows.Controls.RichTextBox.prototype._verticalScrollBarVisibility = 0;
System.Windows.Controls.RichTextBox.prototype._selection = null;
System.Windows.Controls.RichTextBox.prototype._selectionLock = null;
System.Windows.Controls.RichTextBox.prototype._clipboardXAMLSerializer = null;
System.Windows.Controls.RichTextBox._cctor = function () {
	System.Windows.Controls.RichTextBox.IsReadOnlyProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14260, System.Boolean);
	System.Windows.Controls.RichTextBox.TextWrappingProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14257, System.Windows.TextWrapping);
	System.Windows.Controls.RichTextBox.CaretBrushProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14264, System.Windows.Media.Brush);
	System.Windows.Controls.RichTextBox.TextAlignmentProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14263, System.Windows.TextAlignment);
	System.Windows.Controls.RichTextBox.BlocksProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14255, System.Windows.Documents.BlockCollection);
	System.Windows.Controls.RichTextBox.XamlProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14265, System.String);
	System.Windows.Controls.RichTextBox.AcceptsReturnProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14262, System.Boolean);
};

System.Windows.Controls.TextChangedEventArgs.prototype._ctor = function () {
	System.Windows.RoutedEventArgs.prototype._ctor.call(this);
};
System.Windows.Controls.TextChangedEventArgs.prototype.CheckPtr = function () {
	if (this.m_objectPtr === null) {
		System.Windows.RoutedEventArgs.prototype.SetPtr.call(this, 0);
	}
};

System.Windows.Controls.ContentChangedEventArgs.prototype._ctor = function () {
	System.Windows.RoutedEventArgs.prototype._ctor.call(this);
};
System.Windows.Controls.ContentChangedEventArgs.prototype.CheckPtr = function () {
	if (this.m_objectPtr === null) {
		System.Windows.RoutedEventArgs.prototype.SetPtr.call(this, 0);
	}
};

System.Windows.Controls.PasswordBox.prototype._ctor = function () {
	System.Windows.Controls.Control.prototype._ctor$1.call(this, 262);
	System.Windows.Controls.Control.prototype.set_DefaultStyleKey.call(this, System.Windows.Controls.PasswordBox);
};
System.Windows.Controls.PasswordBox.prototype.add_PasswordChanged = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(26012, null), value);
};
System.Windows.Controls.PasswordBox.prototype.remove_PasswordChanged = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(26012, null), value);
};
System.Windows.Controls.PasswordBox.prototype.get_SelectionBackground = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.PasswordBox.SelectionBackgroundProperty), System.Windows.Media.Brush);
};
System.Windows.Controls.PasswordBox.prototype.set_SelectionBackground = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.PasswordBox.SelectionBackgroundProperty, value);
};
System.Windows.Controls.PasswordBox.prototype.get_SelectionForeground = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.PasswordBox.SelectionForegroundProperty), System.Windows.Media.Brush);
};
System.Windows.Controls.PasswordBox.prototype.set_SelectionForeground = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.PasswordBox.SelectionForegroundProperty, value);
};
System.Windows.Controls.PasswordBox.prototype.get_CaretBrush = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.PasswordBox.CaretBrushProperty), System.Windows.Media.Brush);
};
System.Windows.Controls.PasswordBox.prototype.set_CaretBrush = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.PasswordBox.CaretBrushProperty, value);
};
System.Windows.Controls.PasswordBox.prototype.SelectAll = function () {
	$asm02.MS.Internal.XcpImports.PasswordBox_SelectAll(this);
};
System.Windows.Controls.PasswordBox.prototype.get_FontSource = function () {
	return this._fontSource;
};
System.Windows.Controls.PasswordBox.prototype.set_FontSource = function (value) {
	this._fontSource = value;
	this.UpdateFontSource(this._fontSource);
};
System.Windows.Controls.PasswordBox.prototype.get_Password = function () {
	var text = JSIL.TryCast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.PasswordBox.PasswordProperty), System.String);
	if (text !== null) {
		return text;
	}
	return System.String.Empty;
};
System.Windows.Controls.PasswordBox.prototype.set_Password = function (value) {
	if (value === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["Password"]);
	}
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.PasswordBox.PasswordProperty, value);
};
System.Windows.Controls.PasswordBox.prototype.get_PasswordChar = function () {
	return String.fromCharCode(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.PasswordBox.PasswordCharProperty));
};
System.Windows.Controls.PasswordBox.prototype.set_PasswordChar = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.PasswordBox.PasswordCharProperty, value);
};
System.Windows.Controls.PasswordBox.prototype.get_MaxLength = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.PasswordBox.MaxLengthProperty), System.Int32);
};
System.Windows.Controls.PasswordBox.prototype.set_MaxLength = function (value) {
	if (value < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["MaxLength"]);
	}
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.PasswordBox.MaxLengthProperty, value);
};
System.Windows.Controls.PasswordBox.prototype.get_BaselineOffset = function () {
	return $asm02.MS.Internal.XcpImports.PasswordBox_GetBaselineOffset(this);
};
System.Windows.Controls.PasswordBox.prototype.OnMouseMove = function (e) {
	System.Windows.Controls.Control.prototype.OnMouseMove.call(this, e);
	System.Windows.Controls.Control.prototype.NativeMouseMove.call(this, e);
};
System.Windows.Controls.PasswordBox.prototype.OnMouseEnter = function (e) {
	System.Windows.Controls.Control.prototype.OnMouseEnter.call(this, e);
	System.Windows.Controls.Control.prototype.NativeMouseEnter.call(this, e);
};
System.Windows.Controls.PasswordBox.prototype.OnMouseLeave = function (e) {
	System.Windows.Controls.Control.prototype.OnMouseLeave.call(this, e);
	System.Windows.Controls.Control.prototype.NativeMouseLeave.call(this, e);
};
System.Windows.Controls.PasswordBox.prototype.OnMouseLeftButtonDown = function (e) {
	System.Windows.Controls.Control.prototype.OnMouseLeftButtonDown.call(this, e);
	if (e.Handled) {
		return;
	}
	System.Windows.Controls.Control.prototype.NativeMouseLeftButtonDown.call(this, e);
};
System.Windows.Controls.PasswordBox.prototype.OnMouseLeftButtonUp = function (e) {
	System.Windows.Controls.Control.prototype.OnMouseLeftButtonUp.call(this, e);
	if (e.Handled) {
		return;
	}
	System.Windows.Controls.Control.prototype.NativeMouseLeftButtonUp.call(this, e);
};
System.Windows.Controls.PasswordBox.prototype.OnKeyUp = function (e) {
	System.Windows.Controls.Control.prototype.OnKeyUp.call(this, e);
	if (e.Handled) {
		return;
	}
	System.Windows.Controls.Control.prototype.NativeKeyUp.call(this, e);
};
System.Windows.Controls.PasswordBox.prototype.OnKeyDown = function (e) {
	System.Windows.Controls.Control.prototype.OnKeyDown.call(this, e);
	if (e.Handled) {
		return;
	}
	System.Windows.Controls.Control.prototype.NativeKeyDown.call(this, e);
};
System.Windows.Controls.PasswordBox.prototype.OnGotFocus = function (e) {
	System.Windows.Controls.Control.prototype.OnGotFocus.call(this, e);
	System.Windows.Controls.Control.prototype.NativeGotFocus.call(this, e);
};
System.Windows.Controls.PasswordBox.prototype.OnLostFocus = function (e) {
	System.Windows.Controls.Control.prototype.OnLostFocus.call(this, e);
	System.Windows.Controls.Control.prototype.NativeLostFocus.call(this, e);
};
System.Windows.Controls.PasswordBox.prototype.OnIsEnabledChanged = function (e) {
	System.Windows.Controls.Control.prototype.OnIsEnabledChanged.call(this, e);
	System.Windows.Controls.Control.prototype.NativeIsEnabledChanged.call(this, e);
};
System.Windows.Controls.PasswordBox.prototype.OnTextInputStart = function (e) {
	System.Windows.Controls.Control.prototype.OnTextInputStart.call(this, e);
	System.Windows.Controls.Control.prototype.NativeTextInputStart.call(this, e);
};
System.Windows.Controls.PasswordBox.prototype.OnTextInputUpdate = function (e) {
	System.Windows.Controls.Control.prototype.OnTextInputUpdate.call(this, e);
	System.Windows.Controls.Control.prototype.NativeTextInputUpdate.call(this, e);
};
System.Windows.Controls.PasswordBox.prototype.OnTextInput = function (e) {
	System.Windows.Controls.Control.prototype.OnTextInput.call(this, e);
	System.Windows.Controls.Control.prototype.NativeTextInput.call(this, e);
};
System.Windows.Controls.PasswordBox.prototype.OnLostMouseCapture = function (e) {
	System.Windows.Controls.Control.prototype.OnLostMouseCapture.call(this, e);
	System.Windows.Controls.Control.prototype.NativeOnLostMouseCapture.call(this, e);
};
System.Windows.Controls.PasswordBox.prototype.UpdateFontSource = function (fontSource) {
	if (!((fontSource !== null) && !fontSource.IsEmpty())) {
		$asm02.MS.Internal.XcpImports.SetFontSourceNull(this);
		return;
	}
	fontSource.SetTextFontSourceFromStream(this);
};
System.Windows.Controls.PasswordBox.prototype.ChangeVisualState = function (useTransitions, isEnabled, isFocused, isMouseOver) {
	if (!isEnabled) {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "Disabled");
	} else if (isMouseOver) {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "MouseOver");
	} else {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "Normal");
	}
	if (!(!isFocused || !isEnabled)) {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "Focused");
	} else {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "Unfocused");
	}
	return 0;
};
JSIL.MakeProperty(System.Windows.Controls.PasswordBox.prototype, "SelectionBackground", 
	System.Windows.Controls.PasswordBox.prototype.get_SelectionBackground, System.Windows.Controls.PasswordBox.prototype.set_SelectionBackground);
JSIL.MakeProperty(System.Windows.Controls.PasswordBox.prototype, "SelectionForeground", 
	System.Windows.Controls.PasswordBox.prototype.get_SelectionForeground, System.Windows.Controls.PasswordBox.prototype.set_SelectionForeground);
JSIL.MakeProperty(System.Windows.Controls.PasswordBox.prototype, "CaretBrush", 
	System.Windows.Controls.PasswordBox.prototype.get_CaretBrush, System.Windows.Controls.PasswordBox.prototype.set_CaretBrush);
JSIL.MakeProperty(System.Windows.Controls.PasswordBox.prototype, "FontSource", 
	System.Windows.Controls.PasswordBox.prototype.get_FontSource, System.Windows.Controls.PasswordBox.prototype.set_FontSource);
JSIL.MakeProperty(System.Windows.Controls.PasswordBox.prototype, "Password", 
	System.Windows.Controls.PasswordBox.prototype.get_Password, System.Windows.Controls.PasswordBox.prototype.set_Password);
JSIL.MakeProperty(System.Windows.Controls.PasswordBox.prototype, "PasswordChar", 
	System.Windows.Controls.PasswordBox.prototype.get_PasswordChar, System.Windows.Controls.PasswordBox.prototype.set_PasswordChar);
JSIL.MakeProperty(System.Windows.Controls.PasswordBox.prototype, "MaxLength", 
	System.Windows.Controls.PasswordBox.prototype.get_MaxLength, System.Windows.Controls.PasswordBox.prototype.set_MaxLength);
JSIL.MakeProperty(System.Windows.Controls.PasswordBox.prototype, "BaselineOffset", 
	System.Windows.Controls.PasswordBox.prototype.get_BaselineOffset, null);
Object.defineProperty(System.Windows.Controls.PasswordBox, "ElementContentName", {
		"value": "ContentElement"}
);
System.Windows.Controls.PasswordBox.PasswordProperty = null;
System.Windows.Controls.PasswordBox.MaxLengthProperty = null;
System.Windows.Controls.PasswordBox.SelectionBackgroundProperty = null;
System.Windows.Controls.PasswordBox.SelectionForegroundProperty = null;
System.Windows.Controls.PasswordBox.CaretBrushProperty = null;
System.Windows.Controls.PasswordBox.PasswordCharProperty = null;
System.Windows.Controls.PasswordBox.prototype._fontSource = null;
System.Windows.Controls.PasswordBox._cctor = function () {
	System.Windows.Controls.PasswordBox.PasswordProperty = System.Windows.DependencyProperty.RegisterCoreProperty(20200, System.String);
	System.Windows.Controls.PasswordBox.MaxLengthProperty = System.Windows.DependencyProperty.RegisterCoreProperty(20201, System.Int32);
	System.Windows.Controls.PasswordBox.SelectionBackgroundProperty = System.Windows.DependencyProperty.RegisterCoreProperty(20204, System.Windows.Media.Brush);
	System.Windows.Controls.PasswordBox.SelectionForegroundProperty = System.Windows.DependencyProperty.RegisterCoreProperty(20203, System.Windows.Media.Brush);
	System.Windows.Controls.PasswordBox.CaretBrushProperty = System.Windows.DependencyProperty.RegisterCoreProperty(20205, System.Windows.Media.Brush);
	System.Windows.Controls.PasswordBox.PasswordCharProperty = System.Windows.DependencyProperty.RegisterCoreProperty(20202, System.Char);
};

System.Windows.Controls.RowDefinition.prototype._ctor = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 180);
};
System.Windows.Controls.RowDefinition.prototype.get_Height = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.RowDefinition.HeightProperty), System.Windows.GridLength);
};
System.Windows.Controls.RowDefinition.prototype.set_Height = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.RowDefinition.HeightProperty, value);
};
System.Windows.Controls.RowDefinition.prototype.get_MaxHeight = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.RowDefinition.MaxHeightProperty), System.Double);
};
System.Windows.Controls.RowDefinition.prototype.set_MaxHeight = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.RowDefinition.MaxHeightProperty, value);
};
System.Windows.Controls.RowDefinition.prototype.get_MinHeight = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.RowDefinition.MinHeightProperty), System.Double);
};
System.Windows.Controls.RowDefinition.prototype.set_MinHeight = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.RowDefinition.MinHeightProperty, value);
};
System.Windows.Controls.RowDefinition.prototype.get_ActualHeight = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.RowDefinition.ActualHeightProperty), System.Double);
};
JSIL.MakeProperty(System.Windows.Controls.RowDefinition.prototype, "Height", 
	System.Windows.Controls.RowDefinition.prototype.get_Height, System.Windows.Controls.RowDefinition.prototype.set_Height);
JSIL.MakeProperty(System.Windows.Controls.RowDefinition.prototype, "MaxHeight", 
	System.Windows.Controls.RowDefinition.prototype.get_MaxHeight, System.Windows.Controls.RowDefinition.prototype.set_MaxHeight);
JSIL.MakeProperty(System.Windows.Controls.RowDefinition.prototype, "MinHeight", 
	System.Windows.Controls.RowDefinition.prototype.get_MinHeight, System.Windows.Controls.RowDefinition.prototype.set_MinHeight);
JSIL.MakeProperty(System.Windows.Controls.RowDefinition.prototype, "ActualHeight", 
	System.Windows.Controls.RowDefinition.prototype.get_ActualHeight, null);
System.Windows.Controls.RowDefinition.HeightProperty = null;
System.Windows.Controls.RowDefinition.MaxHeightProperty = null;
System.Windows.Controls.RowDefinition.MinHeightProperty = null;
System.Windows.Controls.RowDefinition.ActualHeightProperty = null;
System.Windows.Controls.RowDefinition._cctor = function () {
	System.Windows.Controls.RowDefinition.HeightProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19455, System.Windows.GridLength);
	System.Windows.Controls.RowDefinition.MaxHeightProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19457, System.Double);
	System.Windows.Controls.RowDefinition.MinHeightProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19458, System.Double);
	System.Windows.Controls.RowDefinition.ActualHeightProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19464, System.Double);
};

System.Windows.Controls.ColumnDefinition.prototype._ctor = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 181);
};
System.Windows.Controls.ColumnDefinition.prototype.get_Width = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.ColumnDefinition.WidthProperty), System.Windows.GridLength);
};
System.Windows.Controls.ColumnDefinition.prototype.set_Width = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.ColumnDefinition.WidthProperty, value);
};
System.Windows.Controls.ColumnDefinition.prototype.get_MaxWidth = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.ColumnDefinition.MaxWidthProperty), System.Double);
};
System.Windows.Controls.ColumnDefinition.prototype.set_MaxWidth = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.ColumnDefinition.MaxWidthProperty, value);
};
System.Windows.Controls.ColumnDefinition.prototype.get_MinWidth = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.ColumnDefinition.MinWidthProperty), System.Double);
};
System.Windows.Controls.ColumnDefinition.prototype.set_MinWidth = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.ColumnDefinition.MinWidthProperty, value);
};
System.Windows.Controls.ColumnDefinition.prototype.get_ActualWidth = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.ColumnDefinition.ActualWidthProperty), System.Double);
};
JSIL.MakeProperty(System.Windows.Controls.ColumnDefinition.prototype, "Width", 
	System.Windows.Controls.ColumnDefinition.prototype.get_Width, System.Windows.Controls.ColumnDefinition.prototype.set_Width);
JSIL.MakeProperty(System.Windows.Controls.ColumnDefinition.prototype, "MaxWidth", 
	System.Windows.Controls.ColumnDefinition.prototype.get_MaxWidth, System.Windows.Controls.ColumnDefinition.prototype.set_MaxWidth);
JSIL.MakeProperty(System.Windows.Controls.ColumnDefinition.prototype, "MinWidth", 
	System.Windows.Controls.ColumnDefinition.prototype.get_MinWidth, System.Windows.Controls.ColumnDefinition.prototype.set_MinWidth);
JSIL.MakeProperty(System.Windows.Controls.ColumnDefinition.prototype, "ActualWidth", 
	System.Windows.Controls.ColumnDefinition.prototype.get_ActualWidth, null);
System.Windows.Controls.ColumnDefinition.WidthProperty = null;
System.Windows.Controls.ColumnDefinition.MaxWidthProperty = null;
System.Windows.Controls.ColumnDefinition.MinWidthProperty = null;
System.Windows.Controls.ColumnDefinition.ActualWidthProperty = null;
System.Windows.Controls.ColumnDefinition._cctor = function () {
	System.Windows.Controls.ColumnDefinition.WidthProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19456, System.Windows.GridLength);
	System.Windows.Controls.ColumnDefinition.MaxWidthProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19459, System.Double);
	System.Windows.Controls.ColumnDefinition.MinWidthProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19460, System.Double);
	System.Windows.Controls.ColumnDefinition.ActualWidthProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19465, System.Double);
};

System.Windows.Controls.Grid.prototype._ctor$0 = function () {
	System.Windows.Controls.Panel.prototype._ctor$1.call(this, 184);
};
System.Windows.Controls.Grid.prototype._ctor$1 = function (nKnownTypeIndex) {
	System.Windows.Controls.Panel.prototype._ctor$1.call(this, nKnownTypeIndex);
};
System.Windows.Controls.Grid.GetRow = function (element) {
	return JSIL.Cast(element.GetValue(System.Windows.Controls.Grid.RowProperty), System.Int32);
};
System.Windows.Controls.Grid.SetRow = function (element, value) {
	element.SetValue(System.Windows.Controls.Grid.RowProperty, value);
};
System.Windows.Controls.Grid.GetColumn = function (element) {
	return JSIL.Cast(element.GetValue(System.Windows.Controls.Grid.ColumnProperty), System.Int32);
};
System.Windows.Controls.Grid.SetColumn = function (element, value) {
	element.SetValue(System.Windows.Controls.Grid.ColumnProperty, value);
};
System.Windows.Controls.Grid.GetRowSpan = function (element) {
	return JSIL.Cast(element.GetValue(System.Windows.Controls.Grid.RowSpanProperty), System.Int32);
};
System.Windows.Controls.Grid.SetRowSpan = function (element, value) {
	element.SetValue(System.Windows.Controls.Grid.RowSpanProperty, value);
};
System.Windows.Controls.Grid.GetColumnSpan = function (element) {
	return JSIL.Cast(element.GetValue(System.Windows.Controls.Grid.ColumnSpanProperty), System.Int32);
};
System.Windows.Controls.Grid.SetColumnSpan = function (element, value) {
	element.SetValue(System.Windows.Controls.Grid.ColumnSpanProperty, value);
};
System.Windows.Controls.Grid.prototype.get_RowDefinitions = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Grid.RowDefinitionsProperty), System.Windows.Controls.RowDefinitionCollection);
};
System.Windows.Controls.Grid.prototype.get_ColumnDefinitions = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Grid.ColumnDefinitionsProperty), System.Windows.Controls.ColumnDefinitionCollection);
};
System.Windows.Controls.Grid.prototype.get_ShowGridLines = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Grid.ShowGridLinesProperty), System.Boolean);
};
System.Windows.Controls.Grid.prototype.set_ShowGridLines = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Grid.ShowGridLinesProperty, value);
};
System.Windows.Controls.Grid.prototype.MeasureOverride = function (constraint) {
	return System.Windows.FrameworkElement.prototype.MeasureOverride.call(this, constraint);
};
System.Windows.Controls.Grid.prototype.ArrangeOverride = function (arrangeSize) {
	return System.Windows.FrameworkElement.prototype.ArrangeOverride.call(this, arrangeSize);
};
JSIL.OverloadedMethod(System.Windows.Controls.Grid.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);
JSIL.MakeProperty(System.Windows.Controls.Grid.prototype, "RowDefinitions", 
	System.Windows.Controls.Grid.prototype.get_RowDefinitions, null);
JSIL.MakeProperty(System.Windows.Controls.Grid.prototype, "ColumnDefinitions", 
	System.Windows.Controls.Grid.prototype.get_ColumnDefinitions, null);
JSIL.MakeProperty(System.Windows.Controls.Grid.prototype, "ShowGridLines", 
	System.Windows.Controls.Grid.prototype.get_ShowGridLines, System.Windows.Controls.Grid.prototype.set_ShowGridLines);
System.Windows.Controls.Grid.RowDefinitionsProperty = null;
System.Windows.Controls.Grid.ColumnDefinitionsProperty = null;
System.Windows.Controls.Grid.ShowGridLinesProperty = null;
System.Windows.Controls.Grid.RowProperty = null;
System.Windows.Controls.Grid.ColumnProperty = null;
System.Windows.Controls.Grid.RowSpanProperty = null;
System.Windows.Controls.Grid.ColumnSpanProperty = null;
System.Windows.Controls.Grid._cctor = function () {
	System.Windows.Controls.Grid.RowDefinitionsProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19451, System.Windows.Controls.RowDefinitionCollection);
	System.Windows.Controls.Grid.ColumnDefinitionsProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19452, System.Windows.Controls.ColumnDefinitionCollection);
	System.Windows.Controls.Grid.ShowGridLinesProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19461, System.Boolean);
	System.Windows.Controls.Grid.RowProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13121, System.Int32);
	System.Windows.Controls.Grid.ColumnProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13122, System.Int32);
	System.Windows.Controls.Grid.RowSpanProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13123, System.Int32);
	System.Windows.Controls.Grid.ColumnSpanProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13124, System.Int32);
};

System.Windows.Controls.RowDefinitionCollection.prototype._ctor = function () {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Controls.RowDefinition).prototype._ctor$1.call(this, 182);
};
System.Windows.Controls.RowDefinitionCollection.prototype.AddInternal = function (value) {
	this.AddDependencyObject(value);
};
System.Windows.Controls.RowDefinitionCollection.prototype.ContainsInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Controls.RowDefinition).prototype.ContainsDependencyObject.call(this, value);
};
System.Windows.Controls.RowDefinitionCollection.prototype.IndexOfInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Controls.RowDefinition).prototype.IndexOfDependencyObject.call(this, value);
};
System.Windows.Controls.RowDefinitionCollection.prototype.InsertInternal = function (index, value) {
	this.InsertDependencyObject(index, value);
};
System.Windows.Controls.RowDefinitionCollection.prototype.RemoveInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Controls.RowDefinition).prototype.RemoveDependencyObject.call(this, value);
};
System.Windows.Controls.RowDefinitionCollection.prototype.GetItemImplSkipMethodPack = function (index) {
	return JSIL.TryCast(System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Controls.RowDefinition).prototype.GetItemDependencyObject.call(this, index), System.Windows.Controls.RowDefinition);
};
System.Windows.Controls.RowDefinitionCollection.prototype.SetItemImplSkipMethodPack = function (index, value) {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Controls.RowDefinition).prototype.SetItemDependencyObject.call(this, index, value);
};

System.Windows.Controls.ColumnDefinitionCollection.prototype._ctor = function () {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Controls.ColumnDefinition).prototype._ctor$1.call(this, 183);
};
System.Windows.Controls.ColumnDefinitionCollection.prototype.AddInternal = function (value) {
	this.AddDependencyObject(value);
};
System.Windows.Controls.ColumnDefinitionCollection.prototype.ContainsInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Controls.ColumnDefinition).prototype.ContainsDependencyObject.call(this, value);
};
System.Windows.Controls.ColumnDefinitionCollection.prototype.IndexOfInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Controls.ColumnDefinition).prototype.IndexOfDependencyObject.call(this, value);
};
System.Windows.Controls.ColumnDefinitionCollection.prototype.InsertInternal = function (index, value) {
	this.InsertDependencyObject(index, value);
};
System.Windows.Controls.ColumnDefinitionCollection.prototype.RemoveInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Controls.ColumnDefinition).prototype.RemoveDependencyObject.call(this, value);
};
System.Windows.Controls.ColumnDefinitionCollection.prototype.GetItemImplSkipMethodPack = function (index) {
	return JSIL.TryCast(System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Controls.ColumnDefinition).prototype.GetItemDependencyObject.call(this, index), System.Windows.Controls.ColumnDefinition);
};
System.Windows.Controls.ColumnDefinitionCollection.prototype.SetItemImplSkipMethodPack = function (index, value) {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Controls.ColumnDefinition).prototype.SetItemDependencyObject.call(this, index, value);
};

System.Windows.Controls.ControlTemplate.prototype._ctor = function () {
	System.Windows.FrameworkTemplate.prototype._ctor$1.call(this, 188);
};
System.Windows.Controls.ControlTemplate.prototype.get_TargetType = function () {
	var typeProxy = JSIL.TryCast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.ControlTemplate.TargetTypeProperty), $asm02.MS.Internal.TypeProxy);
	if (typeProxy === null) {
		return null;
	}
	return typeProxy.GetWrappedType();
};
System.Windows.Controls.ControlTemplate.prototype.set_TargetType = function (value) {
	throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
};
JSIL.MakeProperty(System.Windows.Controls.ControlTemplate.prototype, "TargetType", 
	System.Windows.Controls.ControlTemplate.prototype.get_TargetType, System.Windows.Controls.ControlTemplate.prototype.set_TargetType);
System.Windows.Controls.ControlTemplate.TargetTypeProperty = null;
System.Windows.Controls.ControlTemplate._cctor = function () {
	System.Windows.Controls.ControlTemplate.TargetTypeProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19500, System.Type);
};

System.Windows.Controls.ItemsControl.prototype._ctor$0 = function () {
	System.Windows.Controls.Control.prototype._ctor$1.call(this, 201);
	System.Windows.Controls.Control.prototype.set_DefaultStyleKey.call(this, System.Windows.Controls.ItemsControl);
};
System.Windows.Controls.ItemsControl.prototype._ctor$1 = function (nKnownTypeIndex) {
	System.Windows.Controls.Control.prototype._ctor$1.call(this, nKnownTypeIndex);
};
System.Windows.Controls.ItemsControl.prototype.get_Items = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.ItemsControl.ItemsProperty), System.Windows.Controls.ItemCollection);
};
System.Windows.Controls.ItemsControl.prototype.get_ItemTemplate = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.ItemsControl.ItemTemplateProperty), System.Windows.DataTemplate);
};
System.Windows.Controls.ItemsControl.prototype.set_ItemTemplate = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.ItemsControl.ItemTemplateProperty, value);
};
System.Windows.Controls.ItemsControl.prototype.get_ItemsPanel = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.ItemsControl.ItemsPanelProperty), System.Windows.Controls.ItemsPanelTemplate);
};
System.Windows.Controls.ItemsControl.prototype.set_ItemsPanel = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.ItemsControl.ItemsPanelProperty, value);
};
System.Windows.Controls.ItemsControl.prototype.get_DisplayMemberPath = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.ItemsControl.DisplayMemberPathProperty), System.String);
};
System.Windows.Controls.ItemsControl.prototype.set_DisplayMemberPath = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.ItemsControl.DisplayMemberPathProperty, value);
};
System.Windows.Controls.ItemsControl.prototype.get_IsItemsHostInvalid = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.ItemsControl.IsItemsHostInvalidProperty), System.Boolean);
};
System.Windows.Controls.ItemsControl.prototype.set_IsItemsHostInvalid = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.ItemsControl.IsItemsHostInvalidProperty, value);
};
System.Windows.Controls.ItemsControl.prototype.get_ItemsSource = function () {
	return JSIL.TryCast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.ItemsControl.ItemsSourceProperty), System.Collections.IEnumerable);
};
System.Windows.Controls.ItemsControl.prototype.set_ItemsSource = function (value) {
	if (!((this._items === null) || 
			this._items.ItemsSourceActive() || (this._items.Count <= 0))) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("ItemsControls_ItemsCollectionMustBeEmptyBeforeUsingItemsSource")]);
	}
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.ItemsControl.ItemsSourceProperty, value);
};
System.Windows.Controls.ItemsControl.prototype.get_ItemsHost = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.ItemsControl.ItemsHostProperty), System.Windows.Controls.Panel);
};
System.Windows.Controls.ItemsControl.prototype.set_ItemsHost = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.ItemsControl.ItemsHostProperty, value);
};
System.Windows.Controls.ItemsControl.OnItemContainerStyleChanged = function (d, e) {
	JSIL.Cast(d, System.Windows.Controls.ItemsControl).OnItemContainerStyleChanged(JSIL.Cast(e.OldValue, System.Windows.Style), JSIL.Cast(e.NewValue, System.Windows.Style));
};
System.Windows.Controls.ItemsControl.ItemsSourceChanged = function (d, e) {
	var itemsControl = JSIL.TryCast(d, System.Windows.Controls.ItemsControl);
	itemsControl.OnItemsSourceChanged(JSIL.Cast(e.OldValue, System.Collections.IEnumerable), JSIL.Cast(e.NewValue, System.Collections.IEnumerable));
	itemsControl.ClearContainers(false);
	itemsControl.Items.UpdateItemsSourceList(JSIL.Cast(e.NewValue, System.Collections.IEnumerable));
};
System.Windows.Controls.ItemsControl.GetItemOfGeneratedContainer = function (o) {
	if (o === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["o"]);
	}
	return JSIL.Cast(o.GetValue(System.Windows.Controls.ItemsControl.ItemOfGeneratedContainerProperty), $asm02.System.Windows.Controls.ItemsControl.AccessibilityItem);
};
System.Windows.Controls.ItemsControl.SetItemOfGeneratedContainer = function (element, value) {
	if (element === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["element"]);
	}
	if (value !== null) {
		element.SetValue(System.Windows.Controls.ItemsControl.ItemOfGeneratedContainerProperty, value);
		return;
	}
	element.ClearValueInternal(System.Windows.Controls.ItemsControl.ItemOfGeneratedContainerProperty);
};
System.Windows.Controls.ItemsControl.SetItemCollection = function (nativeItemCollection, nativeItemsControl) {
	var itemCollection = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeItemCollection), System.Windows.Controls.ItemCollection);
	var itemsControl = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeItemsControl), System.Windows.Controls.ItemsControl);
	if (!((itemCollection !== null) && itemsControl)) {
		return -2146498358;
	}
	itemsControl._items = itemCollection;
	itemsControl._itemContainerGenerator = new System.Windows.Controls.ItemContainerGenerator(itemsControl);
	itemsControl._items.add_CollectionChanged(JSIL.Delegate.New("System.Collections.Specialized.NotifyCollectionChangedEventHandler", itemsControl, System.Windows.Controls.ItemsControl.prototype.OnItemCollectionChanged));
	itemsControl._itemContainerGenerator.add_ItemsChanged(JSIL.Delegate.New("System.Windows.Controls.Primitives.ItemsChangedEventHandler", itemsControl, System.Windows.Controls.ItemsControl.prototype.OnItemsChangedHandler));
	if ($asm02.MS.Internal.QuirksMode.ShouldItemsControlSendExtraEvents()) {
		itemsControl._items.add_ExtraEventCollectionChanged(JSIL.Delegate.New("System.Collections.Specialized.NotifyCollectionChangedEventHandler", itemsControl, System.Windows.Controls.ItemsControl.prototype.OnItemCollectionExtraEventChanged));
	}
	return 0;
};
System.Windows.Controls.ItemsControl.ClearVisualChildren = function (unmanagedObj, bHostIsReplaced) {
	try {
		var itemsControl = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(unmanagedObj), System.Windows.Controls.ItemsControl);
		itemsControl.ClearContainers(bHostIsReplaced);
	} catch ($exception) {
		var arg_15_0 = $exception;
		return $asm02.MS.Internal.Error.GetXresultForException(arg_15_0);
	}
	return 0;
};
System.Windows.Controls.ItemsControl.DisplayMemberPathChanged = function (unmanagedObj) {
	try {
		var itemsControl = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(unmanagedObj), System.Windows.Controls.ItemsControl);
		itemsControl._oneDisplayMemberTemplate = null;
	} catch ($exception) {
		var arg_15_0 = $exception;
		return $asm02.MS.Internal.Error.GetXresultForException(arg_15_0);
	}
	return 0;
};
System.Windows.Controls.ItemsControl.RecreateVisualChildren = function (unmanagedObj) {
	try {
		var itemsControl = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(unmanagedObj), System.Windows.Controls.ItemsControl);
		itemsControl.AddContainers();
	} catch ($exception) {
		var arg_14_0 = $exception;
		return $asm02.MS.Internal.Error.GetXresultForException(arg_14_0);
	}
	return 0;
};
System.Windows.Controls.ItemsControl.NotifyAllItemsAdded = function (nativeItemsControl) {
	var itemsControl = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeItemsControl), System.Windows.Controls.ItemsControl);
	if (itemsControl === null) {
		return -2146498358;
	}
	try {
		var itemContainerGenerator = itemsControl.ItemContainerGenerator;
		if (itemContainerGenerator !== null) {
			itemContainerGenerator.isAllowedToShowAnimations = false;
		}
		itemsControl.Items.NotifyCollectionReady();
		if (itemContainerGenerator !== null) {
			itemContainerGenerator.isAllowedToShowAnimations = true;
		}
	} catch ($exception) {
		var arg_3D_0 = $exception;
		return $asm02.MS.Internal.Error.GetXresultForException(arg_3D_0);
	}
	return 0;
};
System.Windows.Controls.ItemsControl.prototype.ClearContainers = function (bHostIsReplaced) {
	this.IsItemsHostInvalid = true;
	if (this.ItemsHost === null) {
		return;
	}
	var itemContainerGenerator = this.ItemContainerGenerator;
	if (itemContainerGenerator !== null) {
		itemContainerGenerator.StopAnimations();
	}
	var virtualizingPanel = JSIL.TryCast(this.ItemsHost, System.Windows.Controls.VirtualizingPanel);
	if (virtualizingPanel === null) {
		this.ItemsHost.Children.Clear();
		return;
	}
	if (bHostIsReplaced) {
		virtualizingPanel.Children.Clear();
		virtualizingPanel.OnClearChildrenInternal();
		return;
	}
	if (this.Items.Count > 0) {
		this.ItemContainerGenerator.Refresh();
	}
};
System.Windows.Controls.ItemsControl.prototype.AddContainers = function () {
	if (!((this.ItemsHost !== null) && 
			!this.IsItemsHostInvalid && 
			(JSIL.TryCast(this.ItemsHost, System.Windows.Controls.VirtualizingPanel) === null) && (this.Items.Count !== 0))) {
		return;
	}
	var disposable = this.IItemContainerGenerator.IItemContainerGenerator_StartAt(new System.Windows.Controls.Primitives.GeneratorPosition(-1, 0), System.Windows.Controls.Primitives.GeneratorDirection.Forward, true);
	try {
	__loop0__: 
		for (var i = 0; i < this.Items.Count; ++i) {
			var flag = new JSIL.Variable(false);
			var container = this.IItemContainerGenerator.IItemContainerGenerator_GenerateNext(/* ref */ flag);
			this.AddVisualChild(i, container, true);
		}
	} finally {
		if (disposable !== null) {
			disposable.IDisposable_Dispose();
		}
	}
};
System.Windows.Controls.ItemsControl.prototype.IsItemItsOwnContainerOverride = function (item) {
	return JSIL.CheckType(item, System.Windows.UIElement);
};
System.Windows.Controls.ItemsControl.prototype.GetContainerForItemOverride = function () {
	return JSIL.New(System.Windows.Controls.ContentPresenter, "_ctor$0", []);
};
System.Windows.Controls.ItemsControl.prototype.ShouldApplyItemContainerStyle = function (container, item) {
	return true;
};
System.Windows.Controls.ItemsControl.prototype.ClearContainerForItemOverride = function (element, item) {
	if (JSIL.TryCast(element, System.Windows.UIElement) !== null) {
		JSIL.Cast(element, System.Windows.UIElement).InvalidateAutomationPeer();
	}
};
System.Windows.Controls.ItemsControl.prototype.PrepareContainerForItemOverride = function (element, item) {
	if (System.Object.ReferenceEquals(element, item)) {
		return;
	}
	if (JSIL.TryCast(element, System.Windows.UIElement) !== null) {
		JSIL.Cast(element, System.Windows.UIElement).InvalidateAutomationPeer();
	}
	var contentPresenter = JSIL.TryCast(element, System.Windows.Controls.ContentPresenter);
	var contentControl = null;
	if (contentPresenter === null) {
		contentControl = JSIL.TryCast(element, System.Windows.Controls.ContentControl);
		if (contentControl === null) {
			return;
		}
	}
	var contentTemplate = null;
	if (!((this.ItemTemplate === null) || (this.DisplayMemberPath === null))) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("ItemsControls_CannotSetItemTemplateAndDisplayMemberPathSimultaneously")]);
	}
	if (JSIL.TryCast(item, System.Windows.UIElement) === null) {
		if (this.ItemTemplate !== null) {
			contentTemplate = this.ItemTemplate;
		} else {
			if (this._oneDisplayMemberTemplate === null) {
				this._oneDisplayMemberTemplate = new $asm02.MS.Internal.DisplayMemberTemplate();
				this._oneDisplayMemberTemplate.SetValue($asm02.MS.Internal.DisplayMemberTemplate.DisplayMemberPathProperty, JSIL.Coalesce(this.DisplayMemberPath, System.String.Empty));
			}
			contentTemplate = this._oneDisplayMemberTemplate;
		}
	}
	if (contentPresenter !== null) {
		contentPresenter.Content = item;
		contentPresenter.ContentTemplate = contentTemplate;
	} else {
		contentControl.Content = item;
		contentControl.ContentTemplate = contentTemplate;
	}
	var itemContainerStyle = this.GetItemContainerStyle();
	if (!((itemContainerStyle === null) || contentControl.Style)) {
		contentControl.Style = itemContainerStyle;
	}
};
System.Windows.Controls.ItemsControl.prototype.GetItemContainerStyle = function () {
	return null;
};
System.Windows.Controls.ItemsControl.prototype.OnItemsChanged = function (e) {
};
System.Windows.Controls.ItemsControl.prototype.OnItemsSourceChanged = function (oldValue, newValue) {
};
System.Windows.Controls.ItemsControl.prototype.OnItemCollectionChanged = function (sender, e) {
	var automationPeer = System.Windows.UIElement.prototype.GetAutomationPeer.call(this);
	if (JSIL.TryCast(automationPeer, System.Windows.Automation.Peers.ItemsControlAutomationPeer) !== null) {
		var itemsControlAutomationPeer = JSIL.Cast(automationPeer, System.Windows.Automation.Peers.ItemsControlAutomationPeer);
		itemsControlAutomationPeer.OnCollectionChanged(this, e);
	}
	this.OnItemsChanged(e);
};
System.Windows.Controls.ItemsControl.prototype.OnItemCollectionExtraEventChanged = function (sender, e) {
	this.OnItemsChanged(e);
};
System.Windows.Controls.ItemsControl.prototype.OnItemsChangedHandler = function (sender, args) {
	if (!((this.ItemsHost !== null) && 
			!this.IsItemsHostInvalid && (JSIL.TryCast(this.ItemsHost, System.Windows.Controls.VirtualizingPanel) === null))) {
		return;
	}
	switch (Number(args.Action)) {
		case 0: 
			this.AddContainerForPosition(args.Position.MemberwiseClone());
			return;
		case 1: 
			this.RemoveContainerForPosition(args.Position.MemberwiseClone());
			return;
		case 2: 
			this.RemoveContainerForPosition(args.Position.MemberwiseClone());
			this.AddContainerForPosition(args.Position.MemberwiseClone());
			return;
		case 3: 
			break;
		case 4: 
			this.ClearContainers(false);
			break;
		default: 
			return;
	}
};
System.Windows.Controls.ItemsControl.prototype.AddContainerForPosition = function (position) {
	var container = null;
	var needPrepareContainer = new JSIL.Variable(false);
	var disposable = this.IItemContainerGenerator.IItemContainerGenerator_StartAt(position.MemberwiseClone(), System.Windows.Controls.Primitives.GeneratorDirection.Forward, true);
	try {
		container = this.IItemContainerGenerator.IItemContainerGenerator_GenerateNext(/* ref */ needPrepareContainer);
	} finally {
		if (disposable !== null) {
			disposable.IDisposable_Dispose();
		}
	}
	var containerIndex = this.ItemContainerGenerator.IndexFromGeneratorPosition$1(position.MemberwiseClone(), false);
	this.AddVisualChild(containerIndex, container, needPrepareContainer.value);
};
System.Windows.Controls.ItemsControl.prototype.RemoveContainerForPosition = function (position) {
	var children = this.ItemsHost.Children;
	var arg_19_0 = children.get_Item(position.Index);
	children.RemoveAt(position.Index);
};
System.Windows.Controls.ItemsControl.prototype.AddVisualChild = function (containerIndex, container, needPrepareContainer) {
	var children = this.ItemsHost.Children;
	if (containerIndex < children.Count) {
		children.Insert(containerIndex, JSIL.TryCast(container, System.Windows.UIElement));
	} else {
		children.Add(JSIL.TryCast(container, System.Windows.UIElement));
	}
	if (needPrepareContainer) {
		this.IItemContainerGenerator.IItemContainerGenerator_PrepareItemContainer(container);
	}
};
System.Windows.Controls.ItemsControl.prototype.ApplyItemContainerStyle = function (container, item) {
};
System.Windows.Controls.ItemsControl.prototype.OnItemContainerStyleChanged = function (oldItemContainerStyle, newItemContainerStyle) {
	if (this.Items.Count > 0) {
		this.ItemContainerGenerator.Refresh();
	}
};
System.Windows.Controls.ItemsControl.GetItemsOwner = function (element) {
	var itemsControl = null;
	var panel = JSIL.TryCast(element, System.Windows.Controls.Panel);
	if (!((panel === null) || !panel.IsItemsHost)) {
		var itemsPresenter = JSIL.TryCast(panel.TemplatedParent, System.Windows.Controls.ItemsPresenter);
		if (itemsPresenter !== null) {
			itemsControl = JSIL.TryCast(itemsPresenter.TemplatedParent, System.Windows.Controls.ItemsControl);
			if (itemsControl === null) {
			__loop0__: 
				for (element = itemsPresenter; (element !== null) && (JSIL.TryCast(element, System.Windows.Controls.ItemsControl) === null); element = System.Windows.Media.VisualTreeHelper.GetParent(element)) {
				}
				itemsControl = JSIL.TryCast(element, System.Windows.Controls.ItemsControl);
			}
		}
	}
	return itemsControl;
};
System.Windows.Controls.ItemsControl.prototype.get_ItemContainerGenerator = function () {
	if (this._itemContainerGenerator === null) {
		var arg_0E_0 = this.Items;
	}
	return this._itemContainerGenerator;
};
System.Windows.Controls.ItemsControl.prototype.get_IItemContainerGenerator = function () {
	return this.ItemContainerGenerator;
};
System.Windows.Controls.ItemsControl.prototype.IGeneratorHost_get_View = function () {
	return this.Items;
};
System.Windows.Controls.ItemsControl.prototype.IGeneratorHost_IsItemItsOwnContainer = function (item) {
	return this.IsItemItsOwnContainerOverride(item);
};
System.Windows.Controls.ItemsControl.prototype.IGeneratorHost_GetContainerForItem = function (item, recycledContainer) {
	var uIElement = null;
	if (this.IsItemItsOwnContainerOverride(item)) {
		uIElement = JSIL.TryCast(item, System.Windows.UIElement);
		if (uIElement === null) {
			throw JSIL.New(System.NotSupportedException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("ItemsControls_ItemsControlItemsMustBeDerivativeOfUIElement")]);
		}
		if (!(!this.Items.ItemsSourceActive() || (this.ItemTemplate === null))) {
			throw JSIL.New(System.NotSupportedException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("ItemsControls_ItemsControlItemsMustNotBeAUIElementWhenItemTemplateIsSet")]);
		}
		System.Windows.Controls.ItemsControl.SetItemOfGeneratedContainer(uIElement, null);
	} else {
		if (recycledContainer !== null) {
			uIElement = JSIL.TryCast(recycledContainer, System.Windows.UIElement);
		} else {
			uIElement = JSIL.TryCast(this.GetContainerForItemOverride(), System.Windows.UIElement);
		}
		if (uIElement === null) {
			throw JSIL.New(System.NotSupportedException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("ItemsControls_ItemsControlGetContainerForItemOverrideMustReturnDerivativeOfUIElement")]);
		}
		var contentControl = JSIL.TryCast(uIElement, System.Windows.Controls.ContentControl);
		if (contentControl !== null) {
			contentControl.SetContentIsNotLogical();
		}
		System.Windows.Controls.ItemsControl.SetItemOfGeneratedContainer(uIElement, new $asm02.System.Windows.Controls.ItemsControl.AccessibilityItem(item));
	}
	uIElement.InvalidateAutomationPeer();
	return uIElement;
};
System.Windows.Controls.ItemsControl.prototype.IGeneratorHost_PrepareItemContainer = function (container, item) {
	if (this.ShouldApplyItemContainerStyle(container, item)) {
		this.ApplyItemContainerStyle(container, item);
	}
	this.PrepareContainerForItemOverride(container, item);
};
System.Windows.Controls.ItemsControl.prototype.IGeneratorHost_ClearContainerForItem = function (container, item) {
	this.ClearContainerForItemOverride(container, item);
};
System.Windows.Controls.ItemsControl.prototype.IGeneratorHost_IsHostForItemContainer = function (container) {
	var itemsControl = System.Windows.Controls.ItemsControl.ItemsControlFromItemContainer(container);
	if (itemsControl !== null) {
		return (itemsControl === this);
	}
	var dependencyObject = null;
	var frameworkElement = JSIL.TryCast(container, System.Windows.FrameworkElement);
	if (frameworkElement !== null) {
		dependencyObject = frameworkElement.Parent;
	}
	return ((dependencyObject === null) && 
		!(!this.IsItemItsOwnContainerOverride(container) || 
			(this.Items.Count <= 0)) && this.Items.Contains(container));
};
System.Windows.Controls.ItemsControl.ItemsControlFromItemContainer = function (container) {
	var uIElement = JSIL.TryCast(container, System.Windows.UIElement);
	if (uIElement === null) {
		return null;
	}
	var dependencyObject = null;
	var frameworkElement = JSIL.TryCast(container, System.Windows.FrameworkElement);
	if (frameworkElement !== null) {
		dependencyObject = frameworkElement.Parent;
	}
	var itemsControl = JSIL.TryCast(dependencyObject, System.Windows.Controls.ItemsControl);
	if (itemsControl === null) {
		dependencyObject = System.Windows.Media.VisualTreeHelper.GetParent(uIElement);
		return System.Windows.Controls.ItemsControl.GetItemsOwner(dependencyObject);
	}
	if (itemsControl.IsItemItsOwnContainerOverride(uIElement)) {
		return itemsControl;
	}
	return null;
};
JSIL.OverloadedMethod(System.Windows.Controls.ItemsControl.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);
JSIL.MakeProperty(System.Windows.Controls.ItemsControl.prototype, "Items", 
	System.Windows.Controls.ItemsControl.prototype.get_Items, null);
JSIL.MakeProperty(System.Windows.Controls.ItemsControl.prototype, "ItemTemplate", 
	System.Windows.Controls.ItemsControl.prototype.get_ItemTemplate, System.Windows.Controls.ItemsControl.prototype.set_ItemTemplate);
JSIL.MakeProperty(System.Windows.Controls.ItemsControl.prototype, "ItemsPanel", 
	System.Windows.Controls.ItemsControl.prototype.get_ItemsPanel, System.Windows.Controls.ItemsControl.prototype.set_ItemsPanel);
JSIL.MakeProperty(System.Windows.Controls.ItemsControl.prototype, "DisplayMemberPath", 
	System.Windows.Controls.ItemsControl.prototype.get_DisplayMemberPath, System.Windows.Controls.ItemsControl.prototype.set_DisplayMemberPath);
JSIL.MakeProperty(System.Windows.Controls.ItemsControl.prototype, "IsItemsHostInvalid", 
	System.Windows.Controls.ItemsControl.prototype.get_IsItemsHostInvalid, System.Windows.Controls.ItemsControl.prototype.set_IsItemsHostInvalid);
JSIL.MakeProperty(System.Windows.Controls.ItemsControl.prototype, "ItemsSource", 
	System.Windows.Controls.ItemsControl.prototype.get_ItemsSource, System.Windows.Controls.ItemsControl.prototype.set_ItemsSource);
JSIL.MakeProperty(System.Windows.Controls.ItemsControl.prototype, "ItemsHost", 
	System.Windows.Controls.ItemsControl.prototype.get_ItemsHost, System.Windows.Controls.ItemsControl.prototype.set_ItemsHost);
JSIL.MakeProperty(System.Windows.Controls.ItemsControl.prototype, "ItemContainerGenerator", 
	System.Windows.Controls.ItemsControl.prototype.get_ItemContainerGenerator, null);
JSIL.MakeProperty(System.Windows.Controls.ItemsControl.prototype, "IItemContainerGenerator", 
	System.Windows.Controls.ItemsControl.prototype.get_IItemContainerGenerator, null);
JSIL.MakeProperty(System.Windows.Controls.ItemsControl.prototype, "IGeneratorHost_View", 
	System.Windows.Controls.ItemsControl.prototype.IGeneratorHost_get_View, null);
System.Windows.Controls.ItemsControl.ItemsProperty = null;
System.Windows.Controls.ItemsControl.ItemTemplateProperty = null;
System.Windows.Controls.ItemsControl.ItemsPanelProperty = null;
System.Windows.Controls.ItemsControl.DisplayMemberPathProperty = null;
System.Windows.Controls.ItemsControl.IsItemsHostInvalidProperty = null;
System.Windows.Controls.ItemsControl.prototype._oneDisplayMemberTemplate = null;
System.Windows.Controls.ItemsControl.prototype._items = null;
System.Windows.Controls.ItemsControl.prototype._itemContainerGenerator = null;
System.Windows.Controls.ItemsControl.ItemsSourceProperty = null;
System.Windows.Controls.ItemsControl.ItemsHostProperty = null;
System.Windows.Controls.ItemsControl.ItemOfGeneratedContainerProperty = null;
System.Windows.Controls.ItemsControl._cctor = function () {
	System.Windows.Controls.ItemsControl.ItemsProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19431, System.Windows.Controls.ItemCollection);
	System.Windows.Controls.ItemsControl.ItemTemplateProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19432, System.Windows.DataTemplate);
	System.Windows.Controls.ItemsControl.ItemsPanelProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19435, System.Windows.Controls.ItemsPanelTemplate);
	System.Windows.Controls.ItemsControl.DisplayMemberPathProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19433, System.String);
	System.Windows.Controls.ItemsControl.IsItemsHostInvalidProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19436, System.Boolean);
	System.Windows.Controls.ItemsControl.ItemsSourceProperty = System.Windows.DependencyProperty.Register$0("ItemsSource", System.Collections.IEnumerable, System.Windows.Controls.ItemsControl, JSIL.New(System.Windows.PropertyMetadata, "_ctor$0", [JSIL.Delegate.New("System.Windows.PropertyChangedCallback", null, System.Windows.Controls.ItemsControl.ItemsSourceChanged)]));
	System.Windows.Controls.ItemsControl.ItemsHostProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19434, System.Windows.Controls.Panel);
	System.Windows.Controls.ItemsControl.ItemOfGeneratedContainerProperty = System.Windows.DependencyProperty.RegisterAttached("ItemOfGeneratedContainer", $asm02.System.Windows.Controls.ItemsControl.AccessibilityItem, System.Windows.Controls.ItemsControl, JSIL.New(System.Windows.PropertyMetadata, "_ctor$0", [null]));
};

$asm02.System.Windows.Controls.ItemsControl.AccessibilityItem.prototype._ctor = function (item) {
	System.Object.prototype._ctor.call(this);
	this._item = item;
};
$asm02.System.Windows.Controls.ItemsControl.AccessibilityItem.prototype.get_Item = function () {
	return this._item;
};
JSIL.MakeProperty($asm02.System.Windows.Controls.ItemsControl.AccessibilityItem.prototype, "Item", 
	$asm02.System.Windows.Controls.ItemsControl.AccessibilityItem.prototype.get_Item, null);
$asm02.System.Windows.Controls.ItemsControl.AccessibilityItem.prototype._item = null;

System.Windows.Controls.Viewbox.prototype._ctor = function () {
	System.Windows.FrameworkElement.prototype._ctor$0.call(this, 335);
};
System.Windows.Controls.Viewbox.prototype.get_Child = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Viewbox.ChildProperty), System.Windows.UIElement);
};
System.Windows.Controls.Viewbox.prototype.set_Child = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Viewbox.ChildProperty, value);
};
System.Windows.Controls.Viewbox.prototype.get_Stretch = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Viewbox.StretchProperty), System.Windows.Media.Stretch);
};
System.Windows.Controls.Viewbox.prototype.set_Stretch = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Viewbox.StretchProperty, value);
};
System.Windows.Controls.Viewbox.prototype.get_StretchDirection = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Viewbox.StretchDirectionProperty), System.Windows.Controls.StretchDirection);
};
System.Windows.Controls.Viewbox.prototype.set_StretchDirection = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Viewbox.StretchDirectionProperty, value);
};
JSIL.MakeProperty(System.Windows.Controls.Viewbox.prototype, "Child", 
	System.Windows.Controls.Viewbox.prototype.get_Child, System.Windows.Controls.Viewbox.prototype.set_Child);
JSIL.MakeProperty(System.Windows.Controls.Viewbox.prototype, "Stretch", 
	System.Windows.Controls.Viewbox.prototype.get_Stretch, System.Windows.Controls.Viewbox.prototype.set_Stretch);
JSIL.MakeProperty(System.Windows.Controls.Viewbox.prototype, "StretchDirection", 
	System.Windows.Controls.Viewbox.prototype.get_StretchDirection, System.Windows.Controls.Viewbox.prototype.set_StretchDirection);
System.Windows.Controls.Viewbox.ChildProperty = null;
System.Windows.Controls.Viewbox.StretchProperty = null;
System.Windows.Controls.Viewbox.StretchDirectionProperty = null;
System.Windows.Controls.Viewbox._cctor = function () {
	System.Windows.Controls.Viewbox.ChildProperty = System.Windows.DependencyProperty.RegisterCoreProperty(22216, System.Windows.UIElement);
	System.Windows.Controls.Viewbox.StretchProperty = System.Windows.DependencyProperty.RegisterCoreProperty(22217, System.Windows.Media.Stretch);
	System.Windows.Controls.Viewbox.StretchDirectionProperty = System.Windows.DependencyProperty.RegisterCoreProperty(22218, System.Windows.Controls.StretchDirection);
};

System.Windows.Controls.Border.prototype._ctor = function () {
	System.Windows.FrameworkElement.prototype._ctor$0.call(this, 213);
};
System.Windows.Controls.Border.prototype.get_BorderBrush = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Border.BorderBrushProperty), System.Windows.Media.Brush);
};
System.Windows.Controls.Border.prototype.set_BorderBrush = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Border.BorderBrushProperty, value);
};
System.Windows.Controls.Border.prototype.get_BorderThickness = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Border.BorderThicknessProperty), System.Windows.Thickness);
};
System.Windows.Controls.Border.prototype.set_BorderThickness = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Border.BorderThicknessProperty, value.MemberwiseClone());
};
System.Windows.Controls.Border.prototype.get_Background = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Border.BackgroundProperty), System.Windows.Media.Brush);
};
System.Windows.Controls.Border.prototype.set_Background = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Border.BackgroundProperty, value);
};
System.Windows.Controls.Border.prototype.get_CornerRadius = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Border.CornerRadiusProperty), System.Windows.CornerRadius);
};
System.Windows.Controls.Border.prototype.set_CornerRadius = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Border.CornerRadiusProperty, value.MemberwiseClone());
};
System.Windows.Controls.Border.prototype.get_Padding = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Border.PaddingProperty), System.Windows.Thickness);
};
System.Windows.Controls.Border.prototype.set_Padding = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Border.PaddingProperty, value.MemberwiseClone());
};
System.Windows.Controls.Border.prototype.get_Child = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Border.ChildProperty), System.Windows.UIElement);
};
System.Windows.Controls.Border.prototype.set_Child = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Border.ChildProperty, value);
};
JSIL.MakeProperty(System.Windows.Controls.Border.prototype, "BorderBrush", 
	System.Windows.Controls.Border.prototype.get_BorderBrush, System.Windows.Controls.Border.prototype.set_BorderBrush);
JSIL.MakeProperty(System.Windows.Controls.Border.prototype, "BorderThickness", 
	System.Windows.Controls.Border.prototype.get_BorderThickness, System.Windows.Controls.Border.prototype.set_BorderThickness);
JSIL.MakeProperty(System.Windows.Controls.Border.prototype, "Background", 
	System.Windows.Controls.Border.prototype.get_Background, System.Windows.Controls.Border.prototype.set_Background);
JSIL.MakeProperty(System.Windows.Controls.Border.prototype, "CornerRadius", 
	System.Windows.Controls.Border.prototype.get_CornerRadius, System.Windows.Controls.Border.prototype.set_CornerRadius);
JSIL.MakeProperty(System.Windows.Controls.Border.prototype, "Padding", 
	System.Windows.Controls.Border.prototype.get_Padding, System.Windows.Controls.Border.prototype.set_Padding);
JSIL.MakeProperty(System.Windows.Controls.Border.prototype, "Child", 
	System.Windows.Controls.Border.prototype.get_Child, System.Windows.Controls.Border.prototype.set_Child);
System.Windows.Controls.Border.BorderBrushProperty = null;
System.Windows.Controls.Border.BorderThicknessProperty = null;
System.Windows.Controls.Border.BackgroundProperty = null;
System.Windows.Controls.Border.CornerRadiusProperty = null;
System.Windows.Controls.Border.PaddingProperty = null;
System.Windows.Controls.Border.ChildProperty = null;
System.Windows.Controls.Border._cctor = function () {
	System.Windows.Controls.Border.BorderBrushProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19751, System.Windows.Media.Brush);
	System.Windows.Controls.Border.BorderThicknessProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19752, System.Windows.Thickness);
	System.Windows.Controls.Border.BackgroundProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19753, System.Windows.Media.Brush);
	System.Windows.Controls.Border.CornerRadiusProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19754, System.Windows.CornerRadius);
	System.Windows.Controls.Border.PaddingProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19755, System.Windows.Thickness);
	System.Windows.Controls.Border.ChildProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19750, System.Windows.UIElement);
};

System.Windows.Controls.ContentControl.prototype._ctor$0 = function () {
	System.Windows.Controls.Control.prototype._ctor$1.call(this, 252);
	System.Windows.Controls.Control.prototype.set_DefaultStyleKey.call(this, System.Windows.Controls.ContentControl);
};
System.Windows.Controls.ContentControl.prototype._ctor$1 = function (nKnownTypeIndex) {
	System.Windows.Controls.Control.prototype._ctor$1.call(this, nKnownTypeIndex);
};
System.Windows.Controls.ContentControl.prototype.get_Content = function () {
	return System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.ContentControl.ContentProperty);
};
System.Windows.Controls.ContentControl.prototype.set_Content = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.ContentControl.ContentProperty, value);
};
System.Windows.Controls.ContentControl.prototype.get_ContentTemplate = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.ContentControl.ContentTemplateProperty), System.Windows.DataTemplate);
};
System.Windows.Controls.ContentControl.prototype.set_ContentTemplate = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.ContentControl.ContentTemplateProperty, value);
};
System.Windows.Controls.ContentControl.OnContentChanged = function (nativeTarget, /* ref */ oldContentValue, /* ref */ newContentValue) {
	try {
		try {
			var obj = $asm02.MS.Internal.XcpImports.ConvertType$0(oldContentValue.value.MemberwiseClone(), 0, true, null);
			var obj2 = $asm02.MS.Internal.XcpImports.ConvertType$0(newContentValue.value.MemberwiseClone(), 0, true, null);
			var managedPeer = $asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeTarget);
			if (managedPeer === null) {
				var result = 0;
			} else {
				var contentControl = JSIL.TryCast(managedPeer, System.Windows.Controls.ContentControl);
				if (contentControl === null) {
					result = -2147024809;
				} else {
					if (newContentValue.value.Type === MS.Internal.VType.valueObject) {
						var managedPeerWithReference = $asm02.MS.Internal.ManagedPeerTable.GetManagedPeerWithReference(JSIL.New(System.IntPtr, "_ctor$0", [newContentValue.value.m_pdoValue]));
						contentControl._treeContent = managedPeerWithReference;
					} else {
						contentControl._treeContent = null;
					}
					if (!((obj !== obj2) && ((obj === null) || 
								!obj.Equals(obj2)))) {
						result = 0;
					} else {
						contentControl.OnContentChanged(obj, obj2);
						result = 0;
					}
				}
			}
		} finally {
			$asm02.MS.Internal.ManagedPeerTable.UnpegManagedPeerNoRef$0(newContentValue.value.MemberwiseClone());
		}
	} catch ($exception) {
		var arg_9B_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForException(arg_9B_0);
	}
	return result;
};
System.Windows.Controls.ContentControl.prototype.OnContentChanged = function (oldContent, newContent) {
};
System.Windows.Controls.ContentControl.prototype.SetContentIsNotLogical = function () {
	$asm02.MS.Internal.XcpImports.ContentControl_SetContentIsNotLogical(this);
};
System.Windows.Controls.ContentControl.prototype.GetPlainText = function () {
	return System.Windows.FrameworkElement.GetStringFromObject(this.Content);
};
JSIL.OverloadedMethod(System.Windows.Controls.ContentControl.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);
JSIL.MakeProperty(System.Windows.Controls.ContentControl.prototype, "Content", 
	System.Windows.Controls.ContentControl.prototype.get_Content, System.Windows.Controls.ContentControl.prototype.set_Content);
JSIL.MakeProperty(System.Windows.Controls.ContentControl.prototype, "ContentTemplate", 
	System.Windows.Controls.ContentControl.prototype.get_ContentTemplate, System.Windows.Controls.ContentControl.prototype.set_ContentTemplate);
Object.defineProperty(System.Windows.Controls.ContentControl, "ContentPropertyID", {
		"value": 19707}
);
System.Windows.Controls.ContentControl.ContentTemplateProperty = null;
System.Windows.Controls.ContentControl.prototype._treeContent = null;
System.Windows.Controls.ContentControl.ContentProperty = null;
System.Windows.Controls.ContentControl._cctor = function () {
	System.Windows.Controls.ContentControl.ContentTemplateProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19708, System.Windows.DataTemplate);
	System.Windows.Controls.ContentControl.ContentProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19707, System.Object);
};

System.Windows.Controls.ContentPresenter.prototype._ctor$0 = function () {
	System.Windows.FrameworkElement.prototype._ctor$0.call(this, 209);
};
System.Windows.Controls.ContentPresenter.prototype._ctor$1 = function (nKnownTypeIndex) {
	System.Windows.FrameworkElement.prototype._ctor$0.call(this, nKnownTypeIndex);
};
System.Windows.Controls.ContentPresenter.prototype.get_Content = function () {
	return System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.ContentPresenter.ContentProperty);
};
System.Windows.Controls.ContentPresenter.prototype.set_Content = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.ContentPresenter.ContentProperty, value);
};
System.Windows.Controls.ContentPresenter.prototype.get_ContentTemplate = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.ContentPresenter.ContentTemplateProperty), System.Windows.DataTemplate);
};
System.Windows.Controls.ContentPresenter.prototype.set_ContentTemplate = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.ContentPresenter.ContentTemplateProperty, value);
};
System.Windows.Controls.ContentPresenter.prototype.IsDataContextChangeRelevant = function (e) {
	return (System.Windows.FrameworkElement.prototype.IsDataContextChangeRelevant.call(this, e) || (!JSIL.Cast(e.ChangeReason, System.Boolean) && 
			JSIL.CheckType(System.Windows.DependencyObject.prototype.ReadLocalValue.call(this, System.Windows.Controls.ContentPresenter.ContentProperty), System.Windows.Data.BindingExpression)));
};
JSIL.OverloadedMethod(System.Windows.Controls.ContentPresenter.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);
JSIL.MakeProperty(System.Windows.Controls.ContentPresenter.prototype, "Content", 
	System.Windows.Controls.ContentPresenter.prototype.get_Content, System.Windows.Controls.ContentPresenter.prototype.set_Content);
JSIL.MakeProperty(System.Windows.Controls.ContentPresenter.prototype, "ContentTemplate", 
	System.Windows.Controls.ContentPresenter.prototype.get_ContentTemplate, System.Windows.Controls.ContentPresenter.prototype.set_ContentTemplate);
Object.defineProperty(System.Windows.Controls.ContentPresenter, "ContentPropertyID", {
		"value": 19704}
);
System.Windows.Controls.ContentPresenter.ContentTemplateProperty = null;
System.Windows.Controls.ContentPresenter.ContentProperty = null;
System.Windows.Controls.ContentPresenter._cctor = function () {
	System.Windows.Controls.ContentPresenter.ContentTemplateProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19705, System.Windows.DataTemplate);
	System.Windows.Controls.ContentPresenter.ContentProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19704, System.Object);
};

System.Windows.Controls.ItemsPanelTemplate.prototype._ctor = function () {
	System.Windows.FrameworkTemplate.prototype._ctor$1.call(this, 207);
};

System.Windows.Controls.ItemsPresenter.prototype._ctor = function () {
	System.Windows.FrameworkElement.prototype._ctor$0.call(this, 208);
};
System.Windows.Controls.ItemsPresenter.prototype.get_ItemsPanel = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.ItemsPresenter.ItemsPanelProperty), System.Windows.Controls.ItemsPanelTemplate);
};
System.Windows.Controls.ItemsPresenter.prototype.set_ItemsPanel = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.ItemsPresenter.ItemsPanelProperty, value);
};
JSIL.MakeProperty(System.Windows.Controls.ItemsPresenter.prototype, "ItemsPanel", 
	System.Windows.Controls.ItemsPresenter.prototype.get_ItemsPanel, System.Windows.Controls.ItemsPresenter.prototype.set_ItemsPanel);
System.Windows.Controls.ItemsPresenter.ItemsPanelProperty = null;
System.Windows.Controls.ItemsPresenter._cctor = function () {
	System.Windows.Controls.ItemsPresenter.ItemsPanelProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19437, System.Windows.Controls.ItemsPanelTemplate);
};

System.Windows.Controls.WebBrowser.prototype._ctor = function () {
	System.Windows.FrameworkElement.prototype._ctor$0.call(this, 372);
};
System.Windows.Controls.WebBrowser.prototype.get_Source = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.WebBrowser.SourceProperty), System.Uri);
};
System.Windows.Controls.WebBrowser.prototype.set_Source = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.WebBrowser.SourceProperty, value);
};
System.Windows.Controls.WebBrowser.prototype.InvokeScript$0 = function (scriptName) {
	try {
		var result = $asm02.MS.Internal.XcpImports.WebBrowser_InvokeScript(this, scriptName, JSIL.Array.New(System.String, 0));
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.UnauthorizedAccessException)) {
			var arg_10_0 = $exception;
			throw JSIL.New(System.Security.SecurityException, "_ctor$1", [arg_10_0.Message]);
		} else {
			throw $exception;
		}
	}
	return result;
};
System.Windows.Controls.WebBrowser.prototype.InvokeScript$1 = function (scriptName, args) {
	try {
		var result = $asm02.MS.Internal.XcpImports.WebBrowser_InvokeScript(this, scriptName, args);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.UnauthorizedAccessException)) {
			var arg_0B_0 = $exception;
			throw JSIL.New(System.Security.SecurityException, "_ctor$1", [arg_0B_0.Message]);
		} else {
			throw $exception;
		}
	}
	return result;
};
System.Windows.Controls.WebBrowser.prototype.Navigate = function (source) {
	try {
		$asm02.MS.Internal.XcpImports.WebBrowser_Navigate(this, source);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.UnauthorizedAccessException)) {
			var arg_09_0 = $exception;
			throw JSIL.New(System.Security.SecurityException, "_ctor$1", [arg_09_0.Message]);
		} else {
			throw $exception;
		}
	}
};
System.Windows.Controls.WebBrowser.prototype.NavigateToString = function (text) {
	try {
		$asm02.MS.Internal.XcpImports.WebBrowser_NavigateToString(this, text);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.UnauthorizedAccessException)) {
			var arg_09_0 = $exception;
			throw JSIL.New(System.Security.SecurityException, "_ctor$1", [arg_09_0.Message]);
		} else {
			throw $exception;
		}
	}
};
System.Windows.Controls.WebBrowser.prototype.SaveToString = function () {
	try {
		var result = $asm02.MS.Internal.XcpImports.WebBrowser_SaveToString(this);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.UnauthorizedAccessException)) {
			var arg_09_0 = $exception;
			throw JSIL.New(System.Security.SecurityException, "_ctor$1", [arg_09_0.Message]);
		} else {
			throw $exception;
		}
	}
	return result;
};
System.Windows.Controls.WebBrowser.prototype.add_ScriptNotify = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(26151, null), value);
};
System.Windows.Controls.WebBrowser.prototype.remove_ScriptNotify = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(26151, null), value);
};
System.Windows.Controls.WebBrowser.prototype.add_LoadCompleted = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(26150, null), value);
};
System.Windows.Controls.WebBrowser.prototype.remove_LoadCompleted = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(26150, null), value);
};
JSIL.OverloadedMethod(System.Windows.Controls.WebBrowser.prototype, "InvokeScript", [
		["InvokeScript$0", [System.String]], 
		["InvokeScript$1", [System.String, System.Array.Of(System.String)]]
	]);
JSIL.MakeProperty(System.Windows.Controls.WebBrowser.prototype, "Source", 
	System.Windows.Controls.WebBrowser.prototype.get_Source, System.Windows.Controls.WebBrowser.prototype.set_Source);
System.Windows.Controls.WebBrowser.SourceProperty = null;
System.Windows.Controls.WebBrowser._cctor = function () {
	System.Windows.Controls.WebBrowser.SourceProperty = System.Windows.DependencyProperty.RegisterCoreProperty(22150, System.Uri);
};

System.Windows.Controls.WebBrowserBrush.prototype._ctor = function () {
	System.Windows.Media.TileBrush.prototype._ctor$1.call(this, 373);
};
System.Windows.Controls.WebBrowserBrush.prototype.get_SourceName = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.WebBrowserBrush.SourceNameProperty), System.String);
};
System.Windows.Controls.WebBrowserBrush.prototype.set_SourceName = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.WebBrowserBrush.SourceNameProperty, value);
};
System.Windows.Controls.WebBrowserBrush.prototype.Redraw = function () {
	$asm02.MS.Internal.XcpImports.WebBrowserBrush_Redraw(this);
};
System.Windows.Controls.WebBrowserBrush.prototype.SetSource = function (source) {
	$asm02.MS.Internal.XcpImports.WebBrowserBrush_SetSource(this, source);
};
JSIL.MakeProperty(System.Windows.Controls.WebBrowserBrush.prototype, "SourceName", 
	System.Windows.Controls.WebBrowserBrush.prototype.get_SourceName, System.Windows.Controls.WebBrowserBrush.prototype.set_SourceName);
System.Windows.Controls.WebBrowserBrush.SourceNameProperty = null;
System.Windows.Controls.WebBrowserBrush._cctor = function () {
	System.Windows.Controls.WebBrowserBrush.SourceNameProperty = System.Windows.DependencyProperty.RegisterCoreProperty(22151, System.String);
};

$asm02.MS.Internal.InternalTransform.prototype._ctor = function () {
	System.Windows.Media.GeneralTransform.prototype._ctor$1.call(this, 312);
};
$asm02.MS.Internal.InternalTransform.prototype.TryTransform = function (inPoint, /* ref */ outPoint) {
	try {
		outPoint.value = this.TransformNative(inPoint).MemberwiseClone();
		var result = true;
	} catch ($exception) {
		outPoint.value = new System.Windows.Point();
		result = false;
	}
	return result;
};
$asm02.MS.Internal.InternalTransform.prototype.TransformNative = function (point) {
	var result = new JSIL.Variable(new System.Windows.Point());
	$asm02.MS.Internal.XcpImports.InternalTransform_Transform(this, point, /* ref */ result);
	return result.value;
};
$asm02.MS.Internal.InternalTransform.prototype.TransformBounds = function (rect) {
	return this.TransformBoundsNative(rect);
};
$asm02.MS.Internal.InternalTransform.prototype.TransformBoundsNative = function (rect) {
	var result = new JSIL.Variable(new System.Windows.Rect());
	$asm02.MS.Internal.XcpImports.InternalTransform_TransformBounds(this, rect, /* ref */ result);
	return result.value;
};
$asm02.MS.Internal.InternalTransform.prototype.InverseNative = function () {
	return $asm02.MS.Internal.XcpImports.InternalTransform_Inverse$1(this);
};
$asm02.MS.Internal.InternalTransform.prototype.get_Inverse = function () {
	return this.InverseNative();
};
JSIL.MakeProperty($asm02.MS.Internal.InternalTransform.prototype, "Inverse", 
	$asm02.MS.Internal.InternalTransform.prototype.get_Inverse, null);

$asm02.MS.Internal.TextPointerWrapper.prototype._ctor = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 407);
};

$asm02.MS.Internal.ErrorEventArgs.prototype._ctor = function () {
	System.EventArgs.prototype._ctor.call(this);
};
$asm02.MS.Internal.ErrorEventArgs.prototype.SetPtr = function (ptr) {
	this.m_objectPtr = new $asm02.MS.Internal.NativeObjectSafeHandle();
	this.m_objectPtr.NativeObject = ptr;
};
$asm02.MS.Internal.ErrorEventArgs.prototype.IManagedPeerBase_get_NativeObject = function () {
	this.CheckPtr();
	return this.m_objectPtr.NativeObject;
};
$asm02.MS.Internal.ErrorEventArgs.prototype.CheckPtr = function () {
	if (this.m_objectPtr === null) {
		this.SetPtr(0);
	}
};
JSIL.MakeProperty($asm02.MS.Internal.ErrorEventArgs.prototype, "IManagedPeerBase_NativeObject", 
	$asm02.MS.Internal.ErrorEventArgs.prototype.IManagedPeerBase_get_NativeObject, null);
$asm02.MS.Internal.ErrorEventArgs.prototype.m_objectPtr = null;

$asm02.MS.Internal.Downloader.prototype._ctor = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 131);
};
$asm02.MS.Internal.Downloader.prototype.add_DownloadProgressChanged = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23300, null), value);
};
$asm02.MS.Internal.Downloader.prototype.remove_DownloadProgressChanged = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23300, null), value);
};
$asm02.MS.Internal.Downloader.prototype.add_Completed = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23301, null), value);
};
$asm02.MS.Internal.Downloader.prototype.remove_Completed = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(23301, null), value);
};
$asm02.MS.Internal.Downloader.prototype.add_DownloadFailed = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(24302, null), value);
};
$asm02.MS.Internal.Downloader.prototype.remove_DownloadFailed = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(24302, null), value);
};
$asm02.MS.Internal.Downloader.prototype.get_DownloadProgress = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, $asm02.MS.Internal.Downloader.DownloadProgressProperty), System.Double);
};
$asm02.MS.Internal.Downloader.prototype.set_DownloadProgress = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, $asm02.MS.Internal.Downloader.DownloadProgressProperty, value);
};
$asm02.MS.Internal.Downloader.prototype.get_ResponseText = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, $asm02.MS.Internal.Downloader.ResponseTextProperty), System.String);
};
$asm02.MS.Internal.Downloader.prototype.set_ResponseText = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, $asm02.MS.Internal.Downloader.ResponseTextProperty, value);
};
$asm02.MS.Internal.Downloader.prototype.get_Status = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, $asm02.MS.Internal.Downloader.StatusProperty), System.Int32);
};
$asm02.MS.Internal.Downloader.prototype.set_Status = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, $asm02.MS.Internal.Downloader.StatusProperty, value);
};
$asm02.MS.Internal.Downloader.prototype.get_StatusText = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, $asm02.MS.Internal.Downloader.StatusTextProperty), System.String);
};
$asm02.MS.Internal.Downloader.prototype.set_StatusText = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, $asm02.MS.Internal.Downloader.StatusTextProperty, value);
};
$asm02.MS.Internal.Downloader.prototype.get_Uri = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, $asm02.MS.Internal.Downloader.UriProperty), System.Uri);
};
$asm02.MS.Internal.Downloader.prototype.set_Uri = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, $asm02.MS.Internal.Downloader.UriProperty, value);
};
$asm02.MS.Internal.Downloader.prototype.Send = function () {
	$asm02.MS.Internal.XcpImports.Downloader_Send(this);
};
$asm02.MS.Internal.Downloader.prototype.Abort = function () {
	$asm02.MS.Internal.XcpImports.Downloader_Abort(this);
};
$asm02.MS.Internal.Downloader.prototype.GetResponseText = function (partName) {
	return $asm02.MS.Internal.XcpImports.Downloader_GetResponseText(this, partName);
};
$asm02.MS.Internal.Downloader.prototype.get_FinalUri = function () {
	var value = System.Windows.DependencyObject.prototype.GetValue.call(this, $asm02.MS.Internal.Downloader.FinalUriProperty);
	if (value === null) {
		return null;
	}
	return JSIL.New(System.Uri, "_ctor$1", [JSIL.Cast(value, System.String), System.UriKind.RelativeOrAbsolute]);
};
$asm02.MS.Internal.Downloader.prototype.set_FinalUri = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, $asm02.MS.Internal.Downloader.FinalUriProperty, value ? value.OriginalString : null);
};
$asm02.MS.Internal.Downloader.prototype.Open = function (verb, URI) {
	$asm02.MS.Internal.XcpImports.Downloader_Open(this, verb, URI);
};
$asm02.MS.Internal.Downloader.prototype.GetResponseStream = function () {
	return $asm02.MS.Internal.XcpImports.Downloader_GetResponseStream(this);
};
$asm02.MS.Internal.Downloader.prototype.GetSize = function () {
	return $asm02.MS.Internal.XcpImports.Downloader_GetSize(this);
};
$asm02.MS.Internal.Downloader.prototype.GetTotalSize = function () {
	return $asm02.MS.Internal.XcpImports.Downloader_GetTotalSize(this);
};
JSIL.MakeProperty($asm02.MS.Internal.Downloader.prototype, "DownloadProgress", 
	$asm02.MS.Internal.Downloader.prototype.get_DownloadProgress, $asm02.MS.Internal.Downloader.prototype.set_DownloadProgress);
JSIL.MakeProperty($asm02.MS.Internal.Downloader.prototype, "ResponseText", 
	$asm02.MS.Internal.Downloader.prototype.get_ResponseText, $asm02.MS.Internal.Downloader.prototype.set_ResponseText);
JSIL.MakeProperty($asm02.MS.Internal.Downloader.prototype, "Status", 
	$asm02.MS.Internal.Downloader.prototype.get_Status, $asm02.MS.Internal.Downloader.prototype.set_Status);
JSIL.MakeProperty($asm02.MS.Internal.Downloader.prototype, "StatusText", 
	$asm02.MS.Internal.Downloader.prototype.get_StatusText, $asm02.MS.Internal.Downloader.prototype.set_StatusText);
JSIL.MakeProperty($asm02.MS.Internal.Downloader.prototype, "Uri", 
	$asm02.MS.Internal.Downloader.prototype.get_Uri, $asm02.MS.Internal.Downloader.prototype.set_Uri);
JSIL.MakeProperty($asm02.MS.Internal.Downloader.prototype, "FinalUri", 
	$asm02.MS.Internal.Downloader.prototype.get_FinalUri, $asm02.MS.Internal.Downloader.prototype.set_FinalUri);
$asm02.MS.Internal.Downloader.DownloadProgressProperty = null;
$asm02.MS.Internal.Downloader.ResponseTextProperty = null;
$asm02.MS.Internal.Downloader.StatusProperty = null;
$asm02.MS.Internal.Downloader.StatusTextProperty = null;
$asm02.MS.Internal.Downloader.UriProperty = null;
$asm02.MS.Internal.Downloader.FinalUriProperty = null;
$asm02.MS.Internal.Downloader._cctor = function () {
	$asm02.MS.Internal.Downloader.DownloadProgressProperty = System.Windows.DependencyProperty.RegisterCoreProperty(18400, System.Double);
	$asm02.MS.Internal.Downloader.ResponseTextProperty = System.Windows.DependencyProperty.RegisterCoreProperty(18401, System.String);
	$asm02.MS.Internal.Downloader.StatusProperty = System.Windows.DependencyProperty.RegisterCoreProperty(18402, System.Int32);
	$asm02.MS.Internal.Downloader.StatusTextProperty = System.Windows.DependencyProperty.RegisterCoreProperty(18403, System.String);
	$asm02.MS.Internal.Downloader.UriProperty = System.Windows.DependencyProperty.RegisterCoreProperty(18404, System.Uri);
	$asm02.MS.Internal.Downloader.FinalUriProperty = System.Windows.DependencyProperty.RegisterCoreProperty(18405, System.String);
};

$asm02.MS.Internal.StylusInfo.prototype._ctor = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 140);
};
$asm02.MS.Internal.StylusInfo.prototype.get_DeviceType = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, $asm02.MS.Internal.StylusInfo.DeviceTypeProperty), System.Windows.Input.TabletDeviceType);
};
$asm02.MS.Internal.StylusInfo.prototype.set_DeviceType = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, $asm02.MS.Internal.StylusInfo.DeviceTypeProperty, value);
};
$asm02.MS.Internal.StylusInfo.prototype.get_IsInverted = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, $asm02.MS.Internal.StylusInfo.IsInvertedProperty), System.Boolean);
};
$asm02.MS.Internal.StylusInfo.prototype.set_IsInverted = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, $asm02.MS.Internal.StylusInfo.IsInvertedProperty, value);
};
JSIL.MakeProperty($asm02.MS.Internal.StylusInfo.prototype, "DeviceType", 
	$asm02.MS.Internal.StylusInfo.prototype.get_DeviceType, $asm02.MS.Internal.StylusInfo.prototype.set_DeviceType);
JSIL.MakeProperty($asm02.MS.Internal.StylusInfo.prototype, "IsInverted", 
	$asm02.MS.Internal.StylusInfo.prototype.get_IsInverted, $asm02.MS.Internal.StylusInfo.prototype.set_IsInverted);
$asm02.MS.Internal.StylusInfo.DeviceTypeProperty = null;
$asm02.MS.Internal.StylusInfo.IsInvertedProperty = null;
MS.Internal.StylusInfo._cctor = function () {
	MS.Internal.StylusInfo.DeviceTypeProperty = System.Windows.DependencyProperty.RegisterCoreProperty(17141, System.Windows.Input.TabletDeviceType);
	MS.Internal.StylusInfo.IsInvertedProperty = System.Windows.DependencyProperty.RegisterCoreProperty(17140, System.Boolean);
};

$asm02.MS.Internal.MultiScaleSubImageCollection.prototype._ctor = function () {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Controls.MultiScaleSubImage).prototype._ctor$1.call(this, 228);
};
$asm02.MS.Internal.MultiScaleSubImageCollection.prototype.AddInternal = function (value) {
	this.AddDependencyObject(value);
};
$asm02.MS.Internal.MultiScaleSubImageCollection.prototype.ContainsInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Controls.MultiScaleSubImage).prototype.ContainsDependencyObject.call(this, value);
};
$asm02.MS.Internal.MultiScaleSubImageCollection.prototype.IndexOfInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Controls.MultiScaleSubImage).prototype.IndexOfDependencyObject.call(this, value);
};
$asm02.MS.Internal.MultiScaleSubImageCollection.prototype.InsertInternal = function (index, value) {
	this.InsertDependencyObject(index, value);
};
$asm02.MS.Internal.MultiScaleSubImageCollection.prototype.RemoveInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Controls.MultiScaleSubImage).prototype.RemoveDependencyObject.call(this, value);
};
$asm02.MS.Internal.MultiScaleSubImageCollection.prototype.GetItemImplSkipMethodPack = function (index) {
	return JSIL.TryCast(System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Controls.MultiScaleSubImage).prototype.GetItemDependencyObject.call(this, index), System.Windows.Controls.MultiScaleSubImage);
};
$asm02.MS.Internal.MultiScaleSubImageCollection.prototype.SetItemImplSkipMethodPack = function (index, value) {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.Controls.MultiScaleSubImage).prototype.SetItemDependencyObject.call(this, index, value);
};

$asm02.MS.Internal.MediaAttribute.prototype._ctor = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 152);
};
$asm02.MS.Internal.MediaAttribute.prototype.get_Value = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, $asm02.MS.Internal.MediaAttribute.ValueProperty), System.String);
};
$asm02.MS.Internal.MediaAttribute.prototype.set_Value = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, $asm02.MS.Internal.MediaAttribute.ValueProperty, value);
};
JSIL.MakeProperty($asm02.MS.Internal.MediaAttribute.prototype, "Value", 
	$asm02.MS.Internal.MediaAttribute.prototype.get_Value, $asm02.MS.Internal.MediaAttribute.prototype.set_Value);
$asm02.MS.Internal.MediaAttribute.ValueProperty = null;
$asm02.MS.Internal.MediaAttribute._cctor = function () {
	$asm02.MS.Internal.MediaAttribute.ValueProperty = System.Windows.DependencyProperty.RegisterCoreProperty(18700, System.String);
};

$asm02.MS.Internal.MediaAttributeCollection.prototype._ctor = function () {
	System.Windows.PresentationFrameworkCollection$b1.Of($asm02.MS.Internal.MediaAttribute).prototype._ctor$1.call(this, 153);
};
$asm02.MS.Internal.MediaAttributeCollection.prototype.AddInternal = function (value) {
	this.AddDependencyObject(value);
};
$asm02.MS.Internal.MediaAttributeCollection.prototype.ContainsInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of($asm02.MS.Internal.MediaAttribute).prototype.ContainsDependencyObject.call(this, value);
};
$asm02.MS.Internal.MediaAttributeCollection.prototype.IndexOfInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of($asm02.MS.Internal.MediaAttribute).prototype.IndexOfDependencyObject.call(this, value);
};
$asm02.MS.Internal.MediaAttributeCollection.prototype.InsertInternal = function (index, value) {
	this.InsertDependencyObject(index, value);
};
$asm02.MS.Internal.MediaAttributeCollection.prototype.RemoveInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of($asm02.MS.Internal.MediaAttribute).prototype.RemoveDependencyObject.call(this, value);
};
$asm02.MS.Internal.MediaAttributeCollection.prototype.GetItemImplSkipMethodPack = function (index) {
	return JSIL.TryCast(System.Windows.PresentationFrameworkCollection$b1.Of($asm02.MS.Internal.MediaAttribute).prototype.GetItemDependencyObject.call(this, index), $asm02.MS.Internal.MediaAttribute);
};
$asm02.MS.Internal.MediaAttributeCollection.prototype.SetItemImplSkipMethodPack = function (index, value) {
	System.Windows.PresentationFrameworkCollection$b1.Of($asm02.MS.Internal.MediaAttribute).prototype.SetItemDependencyObject.call(this, index, value);
};
$asm02.MS.Internal.MediaAttributeCollection.prototype.GetItemByName = function (attributeName) {
	return $asm02.MS.Internal.XcpImports.MediaAttributeCollection_GetItemByName(this, attributeName);
};

$asm02.MS.Internal.RichTextBoxView.prototype._ctor = function () {
	System.Windows.FrameworkElement.prototype._ctor$0.call(this, 346);
};

$asm02.MS.Internal.TextBoxView.prototype._ctor = function () {
	System.Windows.FrameworkElement.prototype._ctor$0.call(this, 179);
};

$asm02.MS.Internal.RequestBringIntoViewEventArgs.prototype._ctor = function () {
	System.Windows.RoutedEventArgs.prototype._ctor.call(this);
};
$asm02.MS.Internal.RequestBringIntoViewEventArgs.prototype.CheckPtr = function () {
	if (this.m_objectPtr === null) {
		System.Windows.RoutedEventArgs.prototype.SetPtr.call(this, 0);
	}
};
$asm02.MS.Internal.RequestBringIntoViewEventArgs.prototype.get_TargetObject = function () {
	this.CheckPtr();
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, $asm02.MS.Internal.RequestBringIntoViewEventArgs.TargetObjectProperty), System.Windows.UIElement);
};
$asm02.MS.Internal.RequestBringIntoViewEventArgs.prototype.get_TargetRect = function () {
	this.CheckPtr();
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, $asm02.MS.Internal.RequestBringIntoViewEventArgs.TargetRectProperty), System.Windows.Rect);
};
JSIL.MakeProperty($asm02.MS.Internal.RequestBringIntoViewEventArgs.prototype, "TargetObject", 
	$asm02.MS.Internal.RequestBringIntoViewEventArgs.prototype.get_TargetObject, null);
JSIL.MakeProperty($asm02.MS.Internal.RequestBringIntoViewEventArgs.prototype, "TargetRect", 
	$asm02.MS.Internal.RequestBringIntoViewEventArgs.prototype.get_TargetRect, null);
$asm02.MS.Internal.RequestBringIntoViewEventArgs.TargetObjectProperty = null;
$asm02.MS.Internal.RequestBringIntoViewEventArgs.TargetRectProperty = null;
MS.Internal.RequestBringIntoViewEventArgs._cctor = function () {
	MS.Internal.RequestBringIntoViewEventArgs.TargetObjectProperty = System.Windows.DependencyProperty.RegisterCoreProperty(23001, System.Windows.UIElement);
	MS.Internal.RequestBringIntoViewEventArgs.TargetRectProperty = System.Windows.DependencyProperty.RegisterCoreProperty(23000, System.Windows.Rect);
};

$asm02.MS.Internal.RuntimeHostEventArgs.prototype._ctor = function () {
	System.EventArgs.prototype._ctor.call(this);
};
$asm02.MS.Internal.RuntimeHostEventArgs.prototype.SetPtr = function (ptr) {
	this.m_objectPtr = new $asm02.MS.Internal.NativeObjectSafeHandle();
	this.m_objectPtr.NativeObject = ptr;
};
$asm02.MS.Internal.RuntimeHostEventArgs.prototype.IManagedPeerBase_get_NativeObject = function () {
	this.CheckPtr();
	return this.m_objectPtr.NativeObject;
};
$asm02.MS.Internal.RuntimeHostEventArgs.prototype.CheckPtr = function () {
	if (this.m_objectPtr === null) {
		this.SetPtr(0);
	}
};
JSIL.MakeProperty($asm02.MS.Internal.RuntimeHostEventArgs.prototype, "IManagedPeerBase_NativeObject", 
	$asm02.MS.Internal.RuntimeHostEventArgs.prototype.IManagedPeerBase_get_NativeObject, null);
$asm02.MS.Internal.RuntimeHostEventArgs.prototype.m_objectPtr = null;

$asm02.MS.Internal.CorePropertyChangedEventArgs.prototype._ctor = function () {
	System.EventArgs.prototype._ctor.call(this);
};
$asm02.MS.Internal.CorePropertyChangedEventArgs.prototype.SetPtr = function (ptr) {
	this.m_objectPtr = new $asm02.MS.Internal.NativeObjectSafeHandle();
	this.m_objectPtr.NativeObject = ptr;
};
$asm02.MS.Internal.CorePropertyChangedEventArgs.prototype.IManagedPeerBase_get_NativeObject = function () {
	this.CheckPtr();
	return this.m_objectPtr.NativeObject;
};
$asm02.MS.Internal.CorePropertyChangedEventArgs.prototype.CheckPtr = function () {
	if (this.m_objectPtr === null) {
		this.SetPtr(0);
	}
};
$asm02.MS.Internal.CorePropertyChangedEventArgs.prototype.get_Property = function () {
	this.CheckPtr();
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, $asm02.MS.Internal.CorePropertyChangedEventArgs.PropertyProperty), System.Int32);
};
JSIL.MakeProperty($asm02.MS.Internal.CorePropertyChangedEventArgs.prototype, "IManagedPeerBase_NativeObject", 
	$asm02.MS.Internal.CorePropertyChangedEventArgs.prototype.IManagedPeerBase_get_NativeObject, null);
JSIL.MakeProperty($asm02.MS.Internal.CorePropertyChangedEventArgs.prototype, "Property", 
	$asm02.MS.Internal.CorePropertyChangedEventArgs.prototype.get_Property, null);
$asm02.MS.Internal.CorePropertyChangedEventArgs.prototype.m_objectPtr = null;
$asm02.MS.Internal.CorePropertyChangedEventArgs.PropertyProperty = null;
MS.Internal.CorePropertyChangedEventArgs._cctor = function () {
	MS.Internal.CorePropertyChangedEventArgs.PropertyProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19800, System.Int32);
};

$asm02.MS.Internal.IsEnabledChangedEventArgs.prototype._ctor = function () {
	System.EventArgs.prototype._ctor.call(this);
};
$asm02.MS.Internal.IsEnabledChangedEventArgs.prototype.SetPtr = function (ptr) {
	this.m_objectPtr = new $asm02.MS.Internal.NativeObjectSafeHandle();
	this.m_objectPtr.NativeObject = ptr;
};
$asm02.MS.Internal.IsEnabledChangedEventArgs.prototype.IManagedPeerBase_get_NativeObject = function () {
	this.CheckPtr();
	return this.m_objectPtr.NativeObject;
};
$asm02.MS.Internal.IsEnabledChangedEventArgs.prototype.CheckPtr = function () {
	if (this.m_objectPtr === null) {
		this.SetPtr(0);
	}
};
$asm02.MS.Internal.IsEnabledChangedEventArgs.prototype.get_OldValue = function () {
	this.CheckPtr();
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, $asm02.MS.Internal.IsEnabledChangedEventArgs.OldValueProperty), System.Boolean);
};
$asm02.MS.Internal.IsEnabledChangedEventArgs.prototype.get_NewValue = function () {
	this.CheckPtr();
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, $asm02.MS.Internal.IsEnabledChangedEventArgs.NewValueProperty), System.Boolean);
};
JSIL.MakeProperty($asm02.MS.Internal.IsEnabledChangedEventArgs.prototype, "IManagedPeerBase_NativeObject", 
	$asm02.MS.Internal.IsEnabledChangedEventArgs.prototype.IManagedPeerBase_get_NativeObject, null);
JSIL.MakeProperty($asm02.MS.Internal.IsEnabledChangedEventArgs.prototype, "OldValue", 
	$asm02.MS.Internal.IsEnabledChangedEventArgs.prototype.get_OldValue, null);
JSIL.MakeProperty($asm02.MS.Internal.IsEnabledChangedEventArgs.prototype, "NewValue", 
	$asm02.MS.Internal.IsEnabledChangedEventArgs.prototype.get_NewValue, null);
$asm02.MS.Internal.IsEnabledChangedEventArgs.prototype.m_objectPtr = null;
$asm02.MS.Internal.IsEnabledChangedEventArgs.OldValueProperty = null;
$asm02.MS.Internal.IsEnabledChangedEventArgs.NewValueProperty = null;
MS.Internal.IsEnabledChangedEventArgs._cctor = function () {
	MS.Internal.IsEnabledChangedEventArgs.OldValueProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19801, System.Boolean);
	MS.Internal.IsEnabledChangedEventArgs.NewValueProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19802, System.Boolean);
};

$asm02.MS.Internal.DisplayMemberTemplate.prototype._ctor = function () {
	System.Windows.DataTemplate.prototype._ctor$1.call(this, 210);
};
$asm02.MS.Internal.DisplayMemberTemplate.prototype.get_DisplayMemberPath = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, $asm02.MS.Internal.DisplayMemberTemplate.DisplayMemberPathProperty), System.String);
};
$asm02.MS.Internal.DisplayMemberTemplate.prototype.set_DisplayMemberPath = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, $asm02.MS.Internal.DisplayMemberTemplate.DisplayMemberPathProperty, value);
};
$asm02.MS.Internal.DisplayMemberTemplate.BindText = function (unmanagedObj, textBlock) {
	try {
		var displayMemberTemplate = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(unmanagedObj), $asm02.MS.Internal.DisplayMemberTemplate);
		var textBlock2 = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(textBlock), System.Windows.Controls.TextBlock);
		textBlock2.SetBinding(System.Windows.Controls.TextBlock.TextProperty, JSIL.New(System.Windows.Data.Binding, "_ctor$1", [JSIL.Coalesce(displayMemberTemplate.DisplayMemberPath, System.String.Empty)]));
	} catch ($exception) {
		var arg_3A_0 = $exception;
		return $asm02.MS.Internal.Error.GetXresultForException(arg_3A_0);
	}
	return 0;
};
JSIL.MakeProperty($asm02.MS.Internal.DisplayMemberTemplate.prototype, "DisplayMemberPath", 
	$asm02.MS.Internal.DisplayMemberTemplate.prototype.get_DisplayMemberPath, $asm02.MS.Internal.DisplayMemberTemplate.prototype.set_DisplayMemberPath);
$asm02.MS.Internal.DisplayMemberTemplate.DisplayMemberPathProperty = null;
$asm02.MS.Internal.DisplayMemberTemplate._cctor = function () {
	$asm02.MS.Internal.DisplayMemberTemplate.DisplayMemberPathProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19706, System.String);
};

$asm02.MS.Internal.TypeProxy.prototype._ctor = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 211);
};
$asm02.MS.Internal.TypeProxy.prototype.get_ManagedTypeId = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, $asm02.MS.Internal.TypeProxy.ManagedTypeIdProperty), System.Int32);
};
$asm02.MS.Internal.TypeProxy.prototype.set_ManagedTypeId = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, $asm02.MS.Internal.TypeProxy.ManagedTypeIdProperty, value);
};
$asm02.MS.Internal.TypeProxy.prototype.get_CoreTypeId = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, $asm02.MS.Internal.TypeProxy.CoreTypeIdProperty), System.Int32);
};
$asm02.MS.Internal.TypeProxy.prototype.set_CoreTypeId = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, $asm02.MS.Internal.TypeProxy.CoreTypeIdProperty, value);
};
$asm02.MS.Internal.TypeProxy.prototype.get_TypeName = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, $asm02.MS.Internal.TypeProxy.TypeNameProperty), System.String);
};
$asm02.MS.Internal.TypeProxy.prototype.set_TypeName = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, $asm02.MS.Internal.TypeProxy.TypeNameProperty, value);
};
$asm02.MS.Internal.TypeProxy.prototype.GetWrappedType = function () {
	var managedTypeId = this.ManagedTypeId;
	if (managedTypeId === 0) {
		return $asm02.MS.Internal.TypeProxy.QueryCoreType(this.CoreTypeId);
	}
	return $asm02.MS.Internal.TypeProxy.QueryRegisteredType(managedTypeId);
};
$asm02.MS.Internal.TypeProxy.RegisterType = function (customType) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	if ($asm02.MS.Internal.TypeProxy._typeMap.TryGetValue(customType, /* ref */ num)) {
		return num.value;
	}
	var num = new JSIL.Variable(($asm02.MS.Internal.TypeProxy._customRegisteredTypes.Count + $asm02.MS.Internal.TypeProxy.__types.length));
	$asm02.MS.Internal.TypeProxy._customRegisteredTypes.Add(customType);
	$asm02.MS.Internal.TypeProxy._customCreateObjectDelegates.Add(null);
	$asm02.MS.Internal.TypeProxy._typeMap.set_Item(customType, num.value);
	return num.value;
};
$asm02.MS.Internal.TypeProxy.QueryRegisteredType = function (typeId) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	return (typeId < $asm02.MS.Internal.TypeProxy.__types.length) ? $asm02.MS.Internal.TypeProxy.__types[typeId] : $asm02.MS.Internal.TypeProxy._customRegisteredTypes.get_Item((typeId - $asm02.MS.Internal.TypeProxy.__types.length));
};
$asm02.MS.Internal.TypeProxy.QueryCoreType = function (typeId) {
	if ($asm02.MS.Internal.TypeProxy._registeredCoreTypes.TryGetValue(typeId, /* ref */ type)) {
		return type.value;
	}
	var classFullNameByIndex = $asm02.MS.Internal.XcpImports.GetClassFullNameByIndex(typeId);
	var type = new JSIL.Variable(System.Reflection.Assembly.GetExecutingAssembly().GetType$0(classFullNameByIndex));
	$asm02.MS.Internal.TypeProxy._registeredCoreTypes.set_Item(typeId, type.value);
	return type.value;
};
$asm02.MS.Internal.TypeProxy.CreateProxyForType = function (type) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var typeProxy = new $asm02.MS.Internal.TypeProxy();
__loop0__: 
	for (var type2 = type; (type2 !== null) && ($asm02.MS.Internal.CoreTypes.GetCoreTypeId(type2) === -1); type2 = type2.BaseType) {
	}
	if (type !== type2) {
		var managedTypeId = $asm02.MS.Internal.TypeProxy.RegisterType(type);
		typeProxy.ManagedTypeId = managedTypeId;
	}
	if (type2 !== null) {
		var coreTypeId = $asm02.MS.Internal.CoreTypes.GetCoreTypeId(type2);
		typeProxy.CoreTypeId = coreTypeId;
		$asm02.MS.Internal.TypeProxy._registeredCoreTypes.set_Item(coreTypeId, type2);
	}
	typeProxy.TypeName = type.FullName;
	return typeProxy;
};
$asm02.MS.Internal.TypeProxy.GetTypeFlags$0 = function (type) {
	var typeFlags = $asm02.MS.Internal.TypeFlags.None;
	if (System.Collections.IList.IsAssignableFrom(type)) {
		typeFlags = (typeFlags | $asm02.MS.Internal.TypeFlags.IsIList);
	}
	if (System.ComponentModel.ISupportInitialize.IsAssignableFrom(type)) {
		typeFlags = (typeFlags | $asm02.MS.Internal.TypeFlags.IsISupportInitialize);
	}
	var customAttributes = type.GetCustomAttributes$1(System.Windows.Markup.ContentPropertyAttribute, true);
	if (!((customAttributes.length <= 0) || JSIL.Cast(customAttributes[0], System.Windows.Markup.ContentPropertyAttribute).IsNativeProperty)) {
		typeFlags = (typeFlags | $asm02.MS.Internal.TypeFlags.HasContentProperty);
	}
	var typeConverterForType = $asm02.MS.Internal.FrameworkCallbacks.GetTypeConverterForType$1(type, true);
	if (!((typeConverterForType === null) || !typeConverterForType.CanConvertFrom$0(System.String))) {
		typeFlags = (typeFlags | $asm02.MS.Internal.TypeFlags.HasTypeConverter);
	}
	return typeFlags;
};
$asm02.MS.Internal.TypeProxy.GetTypeFlags$1 = function (customTypeId) {
	var type = $asm02.MS.Internal.TypeProxy.QueryRegisteredType(customTypeId);
	return $asm02.MS.Internal.TypeProxy.GetTypeFlags$0(type);
};
$asm02.MS.Internal.TypeProxy.CreateInstance = function (customTypeId) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var result = null;
	var createObjectDelegate = $asm02.MS.Internal.TypeProxy.GetCreateObjectDelegate$0(customTypeId);
	if (createObjectDelegate !== null) {
		result = createObjectDelegate();
	}
	return result;
};
$asm02.MS.Internal.TypeProxy.GetCreateObjectDelegate$0 = function (customTypeId) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var createObjectDelegate = null;
	createObjectDelegate = (customTypeId < $asm02.MS.Internal.TypeProxy.__types.length) ? $asm02.MS.Internal.TypeProxy.__create[customTypeId] : $asm02.MS.Internal.TypeProxy._customCreateObjectDelegates.get_Item((customTypeId - $asm02.MS.Internal.TypeProxy.__types.length));
	if (createObjectDelegate === null) {
		var $l$gc__DisplayClass2d = new $asm02.MS.Internal.TypeProxy.$l$gc__DisplayClass2d();
		$l$gc__DisplayClass2d.type = $asm02.MS.Internal.TypeProxy._customRegisteredTypes.get_Item((customTypeId - $asm02.MS.Internal.TypeProxy.__types.length));
		if ($l$gc__DisplayClass2d.type.IsClass) {
			var $l$gc__DisplayClass = new $asm02.MS.Internal.TypeProxy.$l$gc__DisplayClass30();
			$l$gc__DisplayClass.$locals2e = $l$gc__DisplayClass2d;
			$l$gc__DisplayClass.ctor = $l$gc__DisplayClass2d.type.GetConstructor$2(System.Type.EmptyTypes);
			if ($l$gc__DisplayClass.ctor !== null) {
				createObjectDelegate = function () {
					return $l$gc__DisplayClass.ctor.Invoke$1($asm02.MS.Internal.TypeProxy._emptyInvokeParams);
				};
			}
		}
		if (createObjectDelegate === null) {
			createObjectDelegate = function () {
				var result = null;
				try {
					result = System.Activator.CreateInstance$3($l$gc__DisplayClass2d.type);
				} catch ($exception) {
					if (JSIL.CheckType($exception, System.MissingMethodException)) {
					} else {
						throw $exception;
					}
				}
				return result;
			};
		}
		$asm02.MS.Internal.TypeProxy._customCreateObjectDelegates.set_Item((customTypeId - $asm02.MS.Internal.TypeProxy.__types.length), createObjectDelegate);
	}
	return createObjectDelegate;
};
$asm02.MS.Internal.TypeProxy.IsCoreType = function (type) {
	var coreTypeId = $asm02.MS.Internal.CoreTypes.GetCoreTypeId(type);
	return (coreTypeId !== -1);
};
$asm02.MS.Internal.TypeProxy.GetCreateObjectDelegate$1 = function (type) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var customTypeId = $asm02.MS.Internal.TypeProxy.RegisterType(type);
	return $asm02.MS.Internal.TypeProxy.GetCreateObjectDelegate$0(customTypeId);
};
$asm02.MS.Internal.TypeProxy.InitializeStaticData = function () {
__loop0__: 
	for (var i = 1; i < $asm02.MS.Internal.TypeProxy.__types.length; ++i) {
		$asm02.MS.Internal.TypeProxy._typeMap.set_Item($asm02.MS.Internal.TypeProxy.__types[i], i);
	}
};
JSIL.OverloadedMethod($asm02.MS.Internal.TypeProxy, "GetTypeFlags", [
		["GetTypeFlags$0", [System.Type]], 
		["GetTypeFlags$1", [System.UInt32]]
	]);
JSIL.OverloadedMethod($asm02.MS.Internal.TypeProxy, "GetCreateObjectDelegate", [
		["GetCreateObjectDelegate$0", [System.UInt32]], 
		["GetCreateObjectDelegate$1", [System.Type]]
	]);
JSIL.MakeProperty($asm02.MS.Internal.TypeProxy.prototype, "ManagedTypeId", 
	$asm02.MS.Internal.TypeProxy.prototype.get_ManagedTypeId, $asm02.MS.Internal.TypeProxy.prototype.set_ManagedTypeId);
JSIL.MakeProperty($asm02.MS.Internal.TypeProxy.prototype, "CoreTypeId", 
	$asm02.MS.Internal.TypeProxy.prototype.get_CoreTypeId, $asm02.MS.Internal.TypeProxy.prototype.set_CoreTypeId);
JSIL.MakeProperty($asm02.MS.Internal.TypeProxy.prototype, "TypeName", 
	$asm02.MS.Internal.TypeProxy.prototype.get_TypeName, $asm02.MS.Internal.TypeProxy.prototype.set_TypeName);
$asm02.MS.Internal.TypeProxy.ManagedTypeIdProperty = null;
$asm02.MS.Internal.TypeProxy.CoreTypeIdProperty = null;
$asm02.MS.Internal.TypeProxy.TypeNameProperty = null;
$asm02.MS.Internal.TypeProxy._customRegisteredTypes = null;
$asm02.MS.Internal.TypeProxy._customCreateObjectDelegates = null;
$asm02.MS.Internal.TypeProxy._customTypeFlags = null;
$asm02.MS.Internal.TypeProxy._registeredCoreTypes = null;
$asm02.MS.Internal.TypeProxy._emptyInvokeParams = null;
$asm02.MS.Internal.TypeProxy.__types = null;
$asm02.MS.Internal.TypeProxy.__create = null;
$asm02.MS.Internal.TypeProxy.__coreIds = null;
$asm02.MS.Internal.TypeProxy._typeMap = null;
$asm02.MS.Internal.TypeProxy.$CachedAnonymousMethodDelegate15 = null;
$asm02.MS.Internal.TypeProxy.$CachedAnonymousMethodDelegate16 = null;
$asm02.MS.Internal.TypeProxy.$CachedAnonymousMethodDelegate17 = null;
$asm02.MS.Internal.TypeProxy.$CachedAnonymousMethodDelegate18 = null;
$asm02.MS.Internal.TypeProxy.$CachedAnonymousMethodDelegate19 = null;
$asm02.MS.Internal.TypeProxy.$CachedAnonymousMethodDelegate1a = null;
$asm02.MS.Internal.TypeProxy.$CachedAnonymousMethodDelegate1b = null;
$asm02.MS.Internal.TypeProxy.$CachedAnonymousMethodDelegate1c = null;
$asm02.MS.Internal.TypeProxy.$CachedAnonymousMethodDelegate1d = null;
$asm02.MS.Internal.TypeProxy.$CachedAnonymousMethodDelegate1e = null;
$asm02.MS.Internal.TypeProxy.$CachedAnonymousMethodDelegate1f = null;
$asm02.MS.Internal.TypeProxy.$CachedAnonymousMethodDelegate20 = null;
$asm02.MS.Internal.TypeProxy.$CachedAnonymousMethodDelegate21 = null;
$asm02.MS.Internal.TypeProxy.$CachedAnonymousMethodDelegate22 = null;
$asm02.MS.Internal.TypeProxy.$CachedAnonymousMethodDelegate23 = null;
$asm02.MS.Internal.TypeProxy.$CachedAnonymousMethodDelegate24 = null;
$asm02.MS.Internal.TypeProxy.$CachedAnonymousMethodDelegate25 = null;
$asm02.MS.Internal.TypeProxy.$CachedAnonymousMethodDelegate26 = null;
$asm02.MS.Internal.TypeProxy.$CachedAnonymousMethodDelegate27 = null;
$asm02.MS.Internal.TypeProxy.$CachedAnonymousMethodDelegate28 = null;
$asm02.MS.Internal.TypeProxy.$CachedAnonymousMethodDelegate29 = null;
$asm02.MS.Internal.TypeProxy._cctor = function () {
	$asm02.MS.Internal.TypeProxy.ManagedTypeIdProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19550, System.Int32);
	$asm02.MS.Internal.TypeProxy.CoreTypeIdProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19551, System.Int32);
	$asm02.MS.Internal.TypeProxy.TypeNameProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19552, System.String);
	$asm02.MS.Internal.TypeProxy._customRegisteredTypes = new (System.Collections.Generic.List$b1.Of(System.Type)) (32);
	$asm02.MS.Internal.TypeProxy._customCreateObjectDelegates = new (System.Collections.Generic.List$b1.Of($asm02.MS.Internal.TypeProxy.CreateObjectDelegate)) (32);
	$asm02.MS.Internal.TypeProxy._customTypeFlags = new (System.Collections.Generic.List$b1.Of($asm02.MS.Internal.TypeFlags)) (32);
	$asm02.MS.Internal.TypeProxy._registeredCoreTypes = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.UInt32, System.Type), "_ctor$0", []);
	$asm02.MS.Internal.TypeProxy._emptyInvokeParams = JSIL.Array.New(System.Object, 0);
	$asm02.MS.Internal.TypeProxy.__types = JSIL.Array.New(System.Type, [null, System.Windows.Controls.TextBox, System.Windows.Controls.PasswordBox, System.Windows.Controls.ItemsControl, System.Windows.Controls.ContentControl, System.Windows.Controls.UserControl, System.Windows.Controls.Button, System.Windows.Controls.Primitives.ToggleButton, System.Windows.Controls.CheckBox, System.Windows.Controls.ComboBox, System.Windows.Controls.ListBoxItem, System.Windows.Controls.ComboBoxItem, System.Windows.Controls.HyperlinkButton, System.Windows.Controls.ListBox, System.Windows.Controls.Primitives.RepeatButton, System.Windows.Controls.Primitives.ScrollBar, System.Windows.Controls.Primitives.Thumb, System.Windows.Controls.RadioButton, System.Windows.Controls.ScrollViewer, System.Windows.Controls.Slider, System.Windows.Controls.ToolTip, System.Windows.Controls.ProgressBar]);
	var array = JSIL.Array.New($asm02.MS.Internal.TypeProxy.CreateObjectDelegate, 22);
	array[1] = function () {
		return JSIL.New(System.Windows.Controls.TextBox, "_ctor$0", []);
	};
	array[2] = function () {
		return new System.Windows.Controls.PasswordBox();
	};
	array[3] = function () {
		return JSIL.New(System.Windows.Controls.ItemsControl, "_ctor$0", []);
	};
	array[4] = function () {
		return JSIL.New(System.Windows.Controls.ContentControl, "_ctor$0", []);
	};
	array[5] = function () {
		return JSIL.New(System.Windows.Controls.UserControl, "_ctor$0", []);
	};
	array[6] = function () {
		return new System.Windows.Controls.Button();
	};
	array[7] = function () {
		return new System.Windows.Controls.Primitives.ToggleButton();
	};
	array[8] = function () {
		return new System.Windows.Controls.CheckBox();
	};
	array[9] = function () {
		return new System.Windows.Controls.ComboBox();
	};
	array[10] = function () {
		return new System.Windows.Controls.ListBoxItem();
	};
	array[11] = function () {
		return new System.Windows.Controls.ComboBoxItem();
	};
	array[12] = function () {
		return new System.Windows.Controls.HyperlinkButton();
	};
	array[13] = function () {
		return new System.Windows.Controls.ListBox();
	};
	array[14] = function () {
		return new System.Windows.Controls.Primitives.RepeatButton();
	};
	array[15] = function () {
		return new System.Windows.Controls.Primitives.ScrollBar();
	};
	array[16] = function () {
		return new System.Windows.Controls.Primitives.Thumb();
	};
	array[17] = function () {
		return new System.Windows.Controls.RadioButton();
	};
	array[18] = function () {
		return new System.Windows.Controls.ScrollViewer();
	};
	array[19] = function () {
		return new System.Windows.Controls.Slider();
	};
	array[20] = function () {
		return new System.Windows.Controls.ToolTip();
	};
	array[21] = function () {
		return new System.Windows.Controls.ProgressBar();
	};
	$asm02.MS.Internal.TypeProxy.__create = array;
	$asm02.MS.Internal.TypeProxy.__coreIds = JSIL.Array.New(System.UInt32, [0, 177, 262, 201, 252, 189, 252, 252, 252, 201, 252, 252, 252, 201, 252, 155, 155, 252, 252, 155, 252, 155]);
	$asm02.MS.Internal.TypeProxy._typeMap = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.Type, System.UInt32), "_ctor$1", [64]);
	$asm02.MS.Internal.TypeProxy.InitializeStaticData();
};

$asm02.MS.Internal.TypeProxy.$l$gc__DisplayClass2d.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm02.MS.Internal.TypeProxy.$l$gc__DisplayClass2d.prototype.type = null;

$asm02.MS.Internal.TypeProxy.$l$gc__DisplayClass30.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm02.MS.Internal.TypeProxy.$l$gc__DisplayClass30.prototype.$locals2e = null;
$asm02.MS.Internal.TypeProxy.$l$gc__DisplayClass30.prototype.ctor = null;

$asm02.MS.Internal.ManagedObjectReference.prototype._ctor$0 = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 216);
};
$asm02.MS.Internal.ManagedObjectReference.prototype.get_IsMarkupExtension = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, $asm02.MS.Internal.ManagedObjectReference.IsMarkupExtensionProperty), System.Boolean);
};
$asm02.MS.Internal.ManagedObjectReference.prototype.set_IsMarkupExtension = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, $asm02.MS.Internal.ManagedObjectReference.IsMarkupExtensionProperty, value);
};
$asm02.MS.Internal.ManagedObjectReference.prototype.get_Target = function () {
	return this._target;
};
$asm02.MS.Internal.ManagedObjectReference.prototype.set_NativeValue = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, $asm02.MS.Internal.ManagedObjectReference.NativeValueProperty, value);
};
$asm02.MS.Internal.ManagedObjectReference.prototype._ctor$1 = function (target) {
	this._ctor$0();
	this._target = target;
	if (JSIL.TryCast(this._target, $asm02.MS.Internal.IMarkupExtension) !== null) {
		this.IsMarkupExtension = true;
	}
};
$asm02.MS.Internal.ManagedObjectReference.ConditionalWrap = function (value) {
	var managedPeer = JSIL.TryCast(value, $asm02.MS.Internal.IManagedPeer);
	if (!(managedPeer || (value === null))) {
		managedPeer = JSIL.New($asm02.MS.Internal.ManagedObjectReference, "_ctor$1", [value]);
	}
	return managedPeer;
};
JSIL.OverloadedMethod($asm02.MS.Internal.ManagedObjectReference.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Object]]
	]);
JSIL.MakeProperty($asm02.MS.Internal.ManagedObjectReference.prototype, "IsMarkupExtension", 
	$asm02.MS.Internal.ManagedObjectReference.prototype.get_IsMarkupExtension, $asm02.MS.Internal.ManagedObjectReference.prototype.set_IsMarkupExtension);
JSIL.MakeProperty($asm02.MS.Internal.ManagedObjectReference.prototype, "Target", 
	$asm02.MS.Internal.ManagedObjectReference.prototype.get_Target, null);
JSIL.MakeProperty($asm02.MS.Internal.ManagedObjectReference.prototype, "NativeValue", 
	null, $asm02.MS.Internal.ManagedObjectReference.prototype.set_NativeValue);
$asm02.MS.Internal.ManagedObjectReference.IsMarkupExtensionProperty = null;
$asm02.MS.Internal.ManagedObjectReference.prototype._target = null;
$asm02.MS.Internal.ManagedObjectReference.NativeValueProperty = null;
$asm02.MS.Internal.ManagedObjectReference._cctor = function () {
	$asm02.MS.Internal.ManagedObjectReference.IsMarkupExtensionProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19200, System.Boolean);
	$asm02.MS.Internal.ManagedObjectReference.NativeValueProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19201, System.Object);
};

$asm02.MS.Internal.DependencyPropertyProxy.prototype._ctor = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 229);
};
$asm02.MS.Internal.DependencyPropertyProxy.prototype.get_ManagedPropertyId = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, $asm02.MS.Internal.DependencyPropertyProxy.ManagedPropertyIdProperty), System.Int32);
};
$asm02.MS.Internal.DependencyPropertyProxy.prototype.set_ManagedPropertyId = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, $asm02.MS.Internal.DependencyPropertyProxy.ManagedPropertyIdProperty, value);
};
$asm02.MS.Internal.DependencyPropertyProxy.prototype.get_CorePropertyId = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, $asm02.MS.Internal.DependencyPropertyProxy.CorePropertyIdProperty), System.Int32);
};
$asm02.MS.Internal.DependencyPropertyProxy.prototype.set_CorePropertyId = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, $asm02.MS.Internal.DependencyPropertyProxy.CorePropertyIdProperty, value);
};
$asm02.MS.Internal.DependencyPropertyProxy.prototype.GetWrappedDependencyProperty = function () {
	var propertyToken = new $asm02.MS.Internal.XamlPropertyToken();
	var managedPropertyId = this.ManagedPropertyId;
	if (managedPropertyId === 0) {
		return System.Windows.DependencyProperty.QueryRegisteredCoreProperty$0(this.CorePropertyId);
	}
	if ($asm02.MS.Internal.QuirksMode.ShouldUseXamlPropertyTokenForProperties()) {
		propertyToken._ctor($asm02.MS.Internal.XamlTypeInfoProviderKind.tpkManaged, managedPropertyId);
		return $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetDependencyPropertyFromToken(propertyToken.MemberwiseClone());
	}
	return System.Windows.DependencyProperty.QueryRegisteredProperty$1(managedPropertyId);
};
$asm02.MS.Internal.DependencyPropertyProxy.CreateProxyForDependencyProperty = function (dp) {
	if ($asm02.MS.Internal.QuirksMode.ShouldUseSL3Parser()) {
		return $asm02.MS.Internal.DependencyPropertyProxy.CreateProxyForDependencyPropertySL3(dp);
	}
	return $asm02.MS.Internal.DependencyPropertyProxy.CreateProxyForDependencyPropertySL4(dp);
};
$asm02.MS.Internal.DependencyPropertyProxy.CreateProxyForDependencyPropertySL3 = function (dp) {
	var dependencyPropertyProxy = new $asm02.MS.Internal.DependencyPropertyProxy();
	if (dp.IsCoreProperty) {
		System.Windows.DependencyProperty.RememberRegisteredCoreProperty(JSIL.Cast(dp, $asm02.System.Windows.CoreDependencyProperty));
		dependencyPropertyProxy.CorePropertyId = dp.m_nKnownId;
	} else {
		dependencyPropertyProxy.ManagedPropertyId = dp.m_nKnownId;
	}
	return dependencyPropertyProxy;
};
$asm02.MS.Internal.DependencyPropertyProxy.CreateProxyForDependencyPropertySL4 = function (dp) {
	var dependencyPropertyProxy = new $asm02.MS.Internal.DependencyPropertyProxy();
	var handle = $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetPropertyToken$2(dp)._handle.Handle;
	if (dp.IsCoreProperty) {
		System.Windows.DependencyProperty.RememberRegisteredCoreProperty(JSIL.Cast(dp, $asm02.System.Windows.CoreDependencyProperty));
		dependencyPropertyProxy.CorePropertyId = handle;
	} else {
		dependencyPropertyProxy.ManagedPropertyId = handle;
	}
	return dependencyPropertyProxy;
};
JSIL.MakeProperty($asm02.MS.Internal.DependencyPropertyProxy.prototype, "ManagedPropertyId", 
	$asm02.MS.Internal.DependencyPropertyProxy.prototype.get_ManagedPropertyId, $asm02.MS.Internal.DependencyPropertyProxy.prototype.set_ManagedPropertyId);
JSIL.MakeProperty($asm02.MS.Internal.DependencyPropertyProxy.prototype, "CorePropertyId", 
	$asm02.MS.Internal.DependencyPropertyProxy.prototype.get_CorePropertyId, $asm02.MS.Internal.DependencyPropertyProxy.prototype.set_CorePropertyId);
$asm02.MS.Internal.DependencyPropertyProxy.ManagedPropertyIdProperty = null;
$asm02.MS.Internal.DependencyPropertyProxy.CorePropertyIdProperty = null;
$asm02.MS.Internal.DependencyPropertyProxy._cctor = function () {
	$asm02.MS.Internal.DependencyPropertyProxy.ManagedPropertyIdProperty = System.Windows.DependencyProperty.RegisterCoreProperty(20101, System.Int32);
	$asm02.MS.Internal.DependencyPropertyProxy.CorePropertyIdProperty = System.Windows.DependencyProperty.RegisterCoreProperty(20102, System.Int32);
};

$asm02.MS.Internal.GlyphTypeface.prototype._ctor = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 275);
};
$asm02.MS.Internal.GlyphTypeface.prototype.get_FontUri = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, $asm02.MS.Internal.GlyphTypeface.FontUriProperty), System.String);
};
$asm02.MS.Internal.GlyphTypeface.prototype.get_MajorVersion = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, $asm02.MS.Internal.GlyphTypeface.MajorVersionProperty), System.Int32);
};
$asm02.MS.Internal.GlyphTypeface.prototype.get_MinorVersion = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, $asm02.MS.Internal.GlyphTypeface.MinorVersionProperty), System.Int32);
};
JSIL.MakeProperty($asm02.MS.Internal.GlyphTypeface.prototype, "FontUri", 
	$asm02.MS.Internal.GlyphTypeface.prototype.get_FontUri, null);
JSIL.MakeProperty($asm02.MS.Internal.GlyphTypeface.prototype, "MajorVersion", 
	$asm02.MS.Internal.GlyphTypeface.prototype.get_MajorVersion, null);
JSIL.MakeProperty($asm02.MS.Internal.GlyphTypeface.prototype, "MinorVersion", 
	$asm02.MS.Internal.GlyphTypeface.prototype.get_MinorVersion, null);
$asm02.MS.Internal.GlyphTypeface.FontUriProperty = null;
$asm02.MS.Internal.GlyphTypeface.MajorVersionProperty = null;
$asm02.MS.Internal.GlyphTypeface.MinorVersionProperty = null;
$asm02.MS.Internal.GlyphTypeface._cctor = function () {
	$asm02.MS.Internal.GlyphTypeface.FontUriProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14010, System.String);
	$asm02.MS.Internal.GlyphTypeface.MajorVersionProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14012, System.Int32);
	$asm02.MS.Internal.GlyphTypeface.MinorVersionProperty = System.Windows.DependencyProperty.RegisterCoreProperty(14011, System.Int32);
};

$asm02.MS.Internal.GlyphTypefaceCollection.prototype._ctor = function () {
	System.Windows.PresentationFrameworkCollection$b1.Of($asm02.MS.Internal.GlyphTypeface).prototype._ctor$1.call(this, 276);
};
$asm02.MS.Internal.GlyphTypefaceCollection.prototype.AddInternal = function (value) {
	this.AddDependencyObject(value);
};
$asm02.MS.Internal.GlyphTypefaceCollection.prototype.ContainsInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of($asm02.MS.Internal.GlyphTypeface).prototype.ContainsDependencyObject.call(this, value);
};
$asm02.MS.Internal.GlyphTypefaceCollection.prototype.IndexOfInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of($asm02.MS.Internal.GlyphTypeface).prototype.IndexOfDependencyObject.call(this, value);
};
$asm02.MS.Internal.GlyphTypefaceCollection.prototype.InsertInternal = function (index, value) {
	this.InsertDependencyObject(index, value);
};
$asm02.MS.Internal.GlyphTypefaceCollection.prototype.RemoveInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of($asm02.MS.Internal.GlyphTypeface).prototype.RemoveDependencyObject.call(this, value);
};
$asm02.MS.Internal.GlyphTypefaceCollection.prototype.GetItemImplSkipMethodPack = function (index) {
	return JSIL.TryCast(System.Windows.PresentationFrameworkCollection$b1.Of($asm02.MS.Internal.GlyphTypeface).prototype.GetItemDependencyObject.call(this, index), $asm02.MS.Internal.GlyphTypeface);
};
$asm02.MS.Internal.GlyphTypefaceCollection.prototype.SetItemImplSkipMethodPack = function (index, value) {
	System.Windows.PresentationFrameworkCollection$b1.Of($asm02.MS.Internal.GlyphTypeface).prototype.SetItemDependencyObject.call(this, index, value);
};

$asm02.MS.Internal.ResourceDictionaryCollection.prototype._ctor = function () {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.ResourceDictionary).prototype._ctor$1.call(this, 277);
};
$asm02.MS.Internal.ResourceDictionaryCollection.prototype.AddInternal = function (value) {
	this.AddImpl(value);
};
$asm02.MS.Internal.ResourceDictionaryCollection.prototype.ContainsInternal = function (value) {
	return this.ContainsImpl(value);
};
$asm02.MS.Internal.ResourceDictionaryCollection.prototype.IndexOfInternal = function (value) {
	return this.IndexOfImpl(value);
};
$asm02.MS.Internal.ResourceDictionaryCollection.prototype.InsertInternal = function (index, value) {
	this.InsertImpl(index, value);
};
$asm02.MS.Internal.ResourceDictionaryCollection.prototype.RemoveInternal = function (value) {
	return this.RemoveImpl(value);
};
$asm02.MS.Internal.ResourceDictionaryCollection.prototype.GetItemImplSkipMethodPack = function (index) {
	return this.GetItemImpl(index);
};
$asm02.MS.Internal.ResourceDictionaryCollection.prototype.SetItemImplSkipMethodPack = function (index, value) {
	this.SetItemImpl(index, value);
};

$asm02.MS.Internal.VisualStateGroupCollection.prototype._ctor = function () {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.VisualStateGroup).prototype._ctor$1.call(this, 324);
};
$asm02.MS.Internal.VisualStateGroupCollection.prototype.AddInternal = function (value) {
	this.AddDependencyObject(value);
};
$asm02.MS.Internal.VisualStateGroupCollection.prototype.ContainsInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.VisualStateGroup).prototype.ContainsDependencyObject.call(this, value);
};
$asm02.MS.Internal.VisualStateGroupCollection.prototype.IndexOfInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.VisualStateGroup).prototype.IndexOfDependencyObject.call(this, value);
};
$asm02.MS.Internal.VisualStateGroupCollection.prototype.InsertInternal = function (index, value) {
	this.InsertDependencyObject(index, value);
};
$asm02.MS.Internal.VisualStateGroupCollection.prototype.RemoveInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.VisualStateGroup).prototype.RemoveDependencyObject.call(this, value);
};
$asm02.MS.Internal.VisualStateGroupCollection.prototype.GetItemImplSkipMethodPack = function (index) {
	return JSIL.TryCast(System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.VisualStateGroup).prototype.GetItemDependencyObject.call(this, index), System.Windows.VisualStateGroup);
};
$asm02.MS.Internal.VisualStateGroupCollection.prototype.SetItemImplSkipMethodPack = function (index, value) {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.VisualStateGroup).prototype.SetItemDependencyObject.call(this, index, value);
};

$asm02.MS.Internal.VisualTransitionCollection.prototype._ctor = function () {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.VisualTransition).prototype._ctor$1.call(this, 325);
};
$asm02.MS.Internal.VisualTransitionCollection.prototype.AddInternal = function (value) {
	this.AddDependencyObject(value);
};
$asm02.MS.Internal.VisualTransitionCollection.prototype.ContainsInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.VisualTransition).prototype.ContainsDependencyObject.call(this, value);
};
$asm02.MS.Internal.VisualTransitionCollection.prototype.IndexOfInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.VisualTransition).prototype.IndexOfDependencyObject.call(this, value);
};
$asm02.MS.Internal.VisualTransitionCollection.prototype.InsertInternal = function (index, value) {
	this.InsertDependencyObject(index, value);
};
$asm02.MS.Internal.VisualTransitionCollection.prototype.RemoveInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.VisualTransition).prototype.RemoveDependencyObject.call(this, value);
};
$asm02.MS.Internal.VisualTransitionCollection.prototype.GetItemImplSkipMethodPack = function (index) {
	return JSIL.TryCast(System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.VisualTransition).prototype.GetItemDependencyObject.call(this, index), System.Windows.VisualTransition);
};
$asm02.MS.Internal.VisualTransitionCollection.prototype.SetItemImplSkipMethodPack = function (index, value) {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.VisualTransition).prototype.SetItemDependencyObject.call(this, index, value);
};

$asm02.MS.Internal.VisualStateCollection.prototype._ctor = function () {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.VisualState).prototype._ctor$1.call(this, 326);
};
$asm02.MS.Internal.VisualStateCollection.prototype.AddInternal = function (value) {
	this.AddDependencyObject(value);
};
$asm02.MS.Internal.VisualStateCollection.prototype.ContainsInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.VisualState).prototype.ContainsDependencyObject.call(this, value);
};
$asm02.MS.Internal.VisualStateCollection.prototype.IndexOfInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.VisualState).prototype.IndexOfDependencyObject.call(this, value);
};
$asm02.MS.Internal.VisualStateCollection.prototype.InsertInternal = function (index, value) {
	this.InsertDependencyObject(index, value);
};
$asm02.MS.Internal.VisualStateCollection.prototype.RemoveInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.VisualState).prototype.RemoveDependencyObject.call(this, value);
};
$asm02.MS.Internal.VisualStateCollection.prototype.GetItemImplSkipMethodPack = function (index) {
	return JSIL.TryCast(System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.VisualState).prototype.GetItemDependencyObject.call(this, index), System.Windows.VisualState);
};
$asm02.MS.Internal.VisualStateCollection.prototype.SetItemImplSkipMethodPack = function (index, value) {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.VisualState).prototype.SetItemDependencyObject.call(this, index, value);
};

$asm02.MS.Internal.TemplateContent.prototype._ctor = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 381);
};

System.Windows.Media.Imaging.BitmapSource.prototype._ctor$0 = function () {
	System.Windows.Media.ImageSource.prototype._ctor.call(this, 313);
};
System.Windows.Media.Imaging.BitmapSource.prototype._ctor$1 = function (nKnownTypeIndex) {
	System.Windows.Media.ImageSource.prototype._ctor.call(this, nKnownTypeIndex);
};
System.Windows.Media.Imaging.BitmapSource.prototype.get_PixelHeight = function () {
	return this.PixelHeightInternal;
};
System.Windows.Media.Imaging.BitmapSource.prototype.get_PixelWidth = function () {
	return this.PixelWidthInternal;
};
System.Windows.Media.Imaging.BitmapSource.prototype.get_PixelHeightInternal = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Imaging.BitmapSource.PixelHeightProperty), System.Int32);
};
System.Windows.Media.Imaging.BitmapSource.prototype.get_PixelWidthInternal = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Imaging.BitmapSource.PixelWidthProperty), System.Int32);
};
System.Windows.Media.Imaging.BitmapSource.prototype.SetSource = function (streamSource) {
	this.SetSourceInternal(streamSource);
};
System.Windows.Media.Imaging.BitmapSource.prototype.SetSourceInternal = JSIL.UntranslatableFunction("System.Void System.Windows.Media.Imaging.BitmapSource::SetSourceInternal(System.IO.Stream)");
System.Windows.Media.Imaging.BitmapSource.prototype.EnsureArray = function (arr, currentPosition, additionalSize) {
	var num = (arr.length - currentPosition);
	if (num < additionalSize) {
		var num2 = (additionalSize - num);
		var num3 = (num2 < arr.length) ? (arr.length * 2) : (arr.length + num2);
		var array = JSIL.Array.New(System.Byte, num3);
		arr.CopyTo(array, 0);
		return array;
	}
	return arr;
};
JSIL.OverloadedMethod(System.Windows.Media.Imaging.BitmapSource.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);
JSIL.MakeProperty(System.Windows.Media.Imaging.BitmapSource.prototype, "PixelHeight", 
	System.Windows.Media.Imaging.BitmapSource.prototype.get_PixelHeight, null);
JSIL.MakeProperty(System.Windows.Media.Imaging.BitmapSource.prototype, "PixelWidth", 
	System.Windows.Media.Imaging.BitmapSource.prototype.get_PixelWidth, null);
JSIL.MakeProperty(System.Windows.Media.Imaging.BitmapSource.prototype, "PixelHeightInternal", 
	System.Windows.Media.Imaging.BitmapSource.prototype.get_PixelHeightInternal, null);
JSIL.MakeProperty(System.Windows.Media.Imaging.BitmapSource.prototype, "PixelWidthInternal", 
	System.Windows.Media.Imaging.BitmapSource.prototype.get_PixelWidthInternal, null);
System.Windows.Media.Imaging.BitmapSource.PixelWidthProperty = null;
System.Windows.Media.Imaging.BitmapSource.PixelHeightProperty = null;
System.Windows.Media.Imaging.BitmapSource._cctor = function () {
	System.Windows.Media.Imaging.BitmapSource.PixelWidthProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13410, System.Int32);
	System.Windows.Media.Imaging.BitmapSource.PixelHeightProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13411, System.Int32);
};

System.Windows.Media.Imaging.BitmapImage.prototype._ctor$0 = function () {
	System.Windows.Media.Imaging.BitmapSource.prototype._ctor$1.call(this, 194);
};
System.Windows.Media.Imaging.BitmapImage.prototype.get_CreateOptions = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Imaging.BitmapImage.CreateOptionsProperty), System.Windows.Media.Imaging.BitmapCreateOptions);
};
System.Windows.Media.Imaging.BitmapImage.prototype.set_CreateOptions = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Imaging.BitmapImage.CreateOptionsProperty, value);
};
System.Windows.Media.Imaging.BitmapImage.prototype.get_UriSource = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Imaging.BitmapImage.UriSourceProperty), System.Uri);
};
System.Windows.Media.Imaging.BitmapImage.prototype.set_UriSource = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Imaging.BitmapImage.UriSourceProperty, value);
};
System.Windows.Media.Imaging.BitmapImage.prototype._ctor$1 = function (uriSource) {
	this._ctor$0();
	this.UriSource = uriSource;
};
System.Windows.Media.Imaging.BitmapImage.prototype.add_DownloadProgress = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(13406, null), value);
};
System.Windows.Media.Imaging.BitmapImage.prototype.remove_DownloadProgress = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(13406, null), value);
};
System.Windows.Media.Imaging.BitmapImage.prototype.add_ImageFailed = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(13408, null), value);
};
System.Windows.Media.Imaging.BitmapImage.prototype.remove_ImageFailed = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(13408, null), value);
};
System.Windows.Media.Imaging.BitmapImage.prototype.add_ImageOpened = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(13409, null), value);
};
System.Windows.Media.Imaging.BitmapImage.prototype.remove_ImageOpened = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(13409, null), value);
};
System.Windows.Media.Imaging.BitmapImage.prototype.SetSourceInternal = function (streamSource) {
	this.UriSource = null;
	System.Windows.Media.Imaging.BitmapSource.prototype.SetSourceInternal.call(this, streamSource);
};
JSIL.OverloadedMethod(System.Windows.Media.Imaging.BitmapImage.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Uri]]
	]);
JSIL.MakeProperty(System.Windows.Media.Imaging.BitmapImage.prototype, "CreateOptions", 
	System.Windows.Media.Imaging.BitmapImage.prototype.get_CreateOptions, System.Windows.Media.Imaging.BitmapImage.prototype.set_CreateOptions);
JSIL.MakeProperty(System.Windows.Media.Imaging.BitmapImage.prototype, "UriSource", 
	System.Windows.Media.Imaging.BitmapImage.prototype.get_UriSource, System.Windows.Media.Imaging.BitmapImage.prototype.set_UriSource);
System.Windows.Media.Imaging.BitmapImage.CreateOptionsProperty = null;
System.Windows.Media.Imaging.BitmapImage.UriSourceProperty = null;
System.Windows.Media.Imaging.BitmapImage._cctor = function () {
	System.Windows.Media.Imaging.BitmapImage.CreateOptionsProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13412, System.Windows.Media.Imaging.BitmapCreateOptions);
	System.Windows.Media.Imaging.BitmapImage.UriSourceProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13403, System.Uri);
};

System.Windows.Media.Imaging.DownloadProgressEventArgs.prototype._ctor = function () {
	System.EventArgs.prototype._ctor.call(this);
};
System.Windows.Media.Imaging.DownloadProgressEventArgs.prototype.SetPtr = function (ptr) {
	this.m_objectPtr = new $asm02.MS.Internal.NativeObjectSafeHandle();
	this.m_objectPtr.NativeObject = ptr;
};
System.Windows.Media.Imaging.DownloadProgressEventArgs.prototype.IManagedPeerBase_get_NativeObject = function () {
	this.CheckPtr();
	return this.m_objectPtr.NativeObject;
};
System.Windows.Media.Imaging.DownloadProgressEventArgs.prototype.CheckPtr = function () {
	if (this.m_objectPtr === null) {
		this.SetPtr(0);
	}
};
System.Windows.Media.Imaging.DownloadProgressEventArgs.prototype.get_Progress = function () {
	this.CheckPtr();
	return System.Convert.ToInt32$13((JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.Media.Imaging.DownloadProgressEventArgs.ProgressProperty), System.Double) * 100));
};
JSIL.MakeProperty(System.Windows.Media.Imaging.DownloadProgressEventArgs.prototype, "IManagedPeerBase_NativeObject", 
	System.Windows.Media.Imaging.DownloadProgressEventArgs.prototype.IManagedPeerBase_get_NativeObject, null);
JSIL.MakeProperty(System.Windows.Media.Imaging.DownloadProgressEventArgs.prototype, "Progress", 
	System.Windows.Media.Imaging.DownloadProgressEventArgs.prototype.get_Progress, null);
System.Windows.Media.Imaging.DownloadProgressEventArgs.prototype.m_objectPtr = null;
System.Windows.Media.Imaging.DownloadProgressEventArgs.ProgressProperty = null;
System.Windows.Media.Imaging.DownloadProgressEventArgs._cctor = function () {
	System.Windows.Media.Imaging.DownloadProgressEventArgs.ProgressProperty = System.Windows.DependencyProperty.RegisterCoreProperty(25000, System.Double);
};

System.Windows.Controls.Primitives.Popup.prototype._ctor = function () {
	System.Windows.FrameworkElement.prototype._ctor$0.call(this, 205);
};
System.Windows.Controls.Primitives.Popup.prototype.add_Opened = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(26000, null), value);
};
System.Windows.Controls.Primitives.Popup.prototype.remove_Opened = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(26000, null), value);
};
System.Windows.Controls.Primitives.Popup.prototype.add_Closed = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(26001, null), value);
};
System.Windows.Controls.Primitives.Popup.prototype.remove_Closed = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(26001, null), value);
};
System.Windows.Controls.Primitives.Popup.prototype.get_Child = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Primitives.Popup.ChildProperty), System.Windows.UIElement);
};
System.Windows.Controls.Primitives.Popup.prototype.set_Child = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Primitives.Popup.ChildProperty, value);
};
System.Windows.Controls.Primitives.Popup.prototype.get_IsOpen = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Primitives.Popup.IsOpenProperty), System.Boolean);
};
System.Windows.Controls.Primitives.Popup.prototype.set_IsOpen = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Primitives.Popup.IsOpenProperty, value);
};
System.Windows.Controls.Primitives.Popup.prototype.get_HorizontalOffset = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Primitives.Popup.HorizontalOffsetProperty), System.Double);
};
System.Windows.Controls.Primitives.Popup.prototype.set_HorizontalOffset = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Primitives.Popup.HorizontalOffsetProperty, value);
};
System.Windows.Controls.Primitives.Popup.prototype.get_VerticalOffset = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Primitives.Popup.VerticalOffsetProperty), System.Double);
};
System.Windows.Controls.Primitives.Popup.prototype.set_VerticalOffset = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Primitives.Popup.VerticalOffsetProperty, value);
};
System.Windows.Controls.Primitives.Popup.prototype.NotifyDataContextChanged = function (e) {
	var frameworkElement = JSIL.TryCast(this.Child, System.Windows.FrameworkElement);
	if (frameworkElement !== null) {
		frameworkElement.OnAncestorDataContextChanged(e);
	}
};
System.Windows.Controls.Primitives.Popup.OnChildChanged = function (nativePopup, nativeChild) {
	try {
		var popup = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativePopup), System.Windows.Controls.Primitives.Popup);
		var uIElement = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeChild), System.Windows.UIElement);
		popup._treeChild = uIElement;
		if (!((uIElement === null) || $asm02.MS.Internal.ManagedPeerTable.IsWeak(nativeChild))) {
			uIElement.UnpegManagedPeerNoRef();
		}
		var result = 0;
	} catch ($exception) {
		var arg_34_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForException(arg_34_0);
	}
	return result;
};
System.Windows.Controls.Primitives.Popup.AddManagedPeerReference = function (nativePopup) {
	try {
		var item = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativePopup), System.Windows.Controls.Primitives.Popup);
		if (System.Windows.Controls.Primitives.Popup._popupPeerTable === null) {
			System.Windows.Controls.Primitives.Popup._popupPeerTable = JSIL.New(System.Collections.ObjectModel.Collection$b1.Of(System.Windows.DependencyObject), "_ctor$0", []);
		}
		System.Windows.Controls.Primitives.Popup._popupPeerTable.Add(item);
		var result = 0;
	} catch ($exception) {
		var arg_2C_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForException(arg_2C_0);
	}
	return result;
};
System.Windows.Controls.Primitives.Popup.RemoveManagedPeerReference = function (nativePopup) {
	try {
		var item = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativePopup), System.Windows.Controls.Primitives.Popup);
		if (System.Windows.Controls.Primitives.Popup._popupPeerTable !== null) {
			System.Windows.Controls.Primitives.Popup._popupPeerTable.Remove(item);
		}
		var result = 0;
	} catch ($exception) {
		var arg_23_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForException(arg_23_0);
	}
	return result;
};
System.Windows.Controls.Primitives.Popup.prototype.OnCreateAutomationPeer = function () {
	return new $asm02.System.Windows.Automation.Peers.PopupRootAutomationPeer(this);
};
System.Windows.Controls.Primitives.Popup.prototype.GetChildrenCount = function () {
	if (this.Child === null) {
		return 0;
	}
	return 1;
};
System.Windows.Controls.Primitives.Popup.prototype.GetChild = function (childIndex) {
	if (!((childIndex === 0) && this.Child)) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["childIndex"]);
	}
	return this.Child;
};
JSIL.MakeProperty(System.Windows.Controls.Primitives.Popup.prototype, "Child", 
	System.Windows.Controls.Primitives.Popup.prototype.get_Child, System.Windows.Controls.Primitives.Popup.prototype.set_Child);
JSIL.MakeProperty(System.Windows.Controls.Primitives.Popup.prototype, "IsOpen", 
	System.Windows.Controls.Primitives.Popup.prototype.get_IsOpen, System.Windows.Controls.Primitives.Popup.prototype.set_IsOpen);
JSIL.MakeProperty(System.Windows.Controls.Primitives.Popup.prototype, "HorizontalOffset", 
	System.Windows.Controls.Primitives.Popup.prototype.get_HorizontalOffset, System.Windows.Controls.Primitives.Popup.prototype.set_HorizontalOffset);
JSIL.MakeProperty(System.Windows.Controls.Primitives.Popup.prototype, "VerticalOffset", 
	System.Windows.Controls.Primitives.Popup.prototype.get_VerticalOffset, System.Windows.Controls.Primitives.Popup.prototype.set_VerticalOffset);
System.Windows.Controls.Primitives.Popup.ChildProperty = null;
System.Windows.Controls.Primitives.Popup.IsOpenProperty = null;
System.Windows.Controls.Primitives.Popup.HorizontalOffsetProperty = null;
System.Windows.Controls.Primitives.Popup.VerticalOffsetProperty = null;
System.Windows.Controls.Primitives.Popup.prototype._treeChild = null;
System.Windows.Controls.Primitives.Popup._popupPeerTable = null;
System.Windows.Controls.Primitives.Popup._cctor = function () {
	System.Windows.Controls.Primitives.Popup.ChildProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19710, System.Windows.UIElement);
	System.Windows.Controls.Primitives.Popup.IsOpenProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19711, System.Boolean);
	System.Windows.Controls.Primitives.Popup.HorizontalOffsetProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19712, System.Double);
	System.Windows.Controls.Primitives.Popup.VerticalOffsetProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19713, System.Double);
};

System.Windows.Media.Effects.PixelShader.prototype._ctor = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 305);
};
System.Windows.Media.Effects.PixelShader.prototype.get_UriSource = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Effects.PixelShader.UriSourceProperty), System.Uri);
};
System.Windows.Media.Effects.PixelShader.prototype.set_UriSource = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Effects.PixelShader.UriSourceProperty, value);
};
JSIL.MakeProperty(System.Windows.Media.Effects.PixelShader.prototype, "UriSource", 
	System.Windows.Media.Effects.PixelShader.prototype.get_UriSource, System.Windows.Media.Effects.PixelShader.prototype.set_UriSource);
System.Windows.Media.Effects.PixelShader.UriSourceProperty = null;
System.Windows.Media.Effects.PixelShader._cctor = function () {
	System.Windows.Media.Effects.PixelShader.UriSourceProperty = System.Windows.DependencyProperty.RegisterCoreProperty(26100, System.Uri);
};

System.Windows.Media.Effects.Effect.prototype._ctor$0 = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 307);
};
System.Windows.Media.Effects.Effect.prototype._ctor$1 = function (nKnownTypeIndex) {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, nKnownTypeIndex);
};
System.Windows.Media.Effects.Effect.prototype.get_EffectMapping = function () {
	return new System.Windows.Media.MatrixTransform();
};
System.Windows.Media.Effects.Effect.get_ImplicitInput = function () {
	return new System.Windows.Media.ImplicitInputBrush();
};
System.Windows.Media.Effects.Effect.MapRect$0 = function (nativeTarget, /* ref */ inRect, /* ref */ outRect, inverse) {
	try {
		var effect = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeTarget), System.Windows.Media.Effects.Effect);
		var generalTransform = effect.EffectMapping;
		if (inverse) {
			generalTransform = generalTransform.Inverse;
		}
		var rect = new System.Windows.Rect();
		rect.X = inRect.value.x;
		rect.Y = inRect.value.y;
		rect.Width = inRect.value.width;
		rect.Height = inRect.value.height;
		rect = generalTransform.TransformBounds(rect.MemberwiseClone()).MemberwiseClone();
		outRect.value = new $asm02.MS.Internal.RectF();
		outRect.value.x = rect.X;
		outRect.value.y = rect.Y;
		outRect.value.width = rect.Width;
		outRect.value.height = rect.Height;
	} catch ($exception) {
		var arg_A6_0 = $exception;
		return $asm02.MS.Internal.Error.GetXresultForException(arg_A6_0);
	}
	return 0;
};
System.Windows.Media.Effects.Effect.MapRect$1 = function (nativeTarget, /* ref */ inRect, /* ref */ outRect) {
	return System.Windows.Media.Effects.Effect.MapRect$0(nativeTarget, /* ref */ inRect, /* ref */ outRect, false);
};
System.Windows.Media.Effects.Effect.MapRectInverse = function (nativeTarget, /* ref */ inRect, /* ref */ outRect) {
	return System.Windows.Media.Effects.Effect.MapRect$0(nativeTarget, /* ref */ inRect, /* ref */ outRect, true);
};
System.Windows.Media.Effects.Effect.GetEffectMapping = function (nativeTarget, /* ref */ outTransform) {
	outTransform.value = System.IntPtr.Zero;
	try {
		var effect = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeTarget), System.Windows.Media.Effects.Effect);
		var effectMapping = effect.EffectMapping;
		if (effectMapping === null) {
			outTransform.value = new System.Windows.Media.MatrixTransform().get_NativeObject();
		} else {
			var transform = JSIL.TryCast(effectMapping, System.Windows.Media.Transform);
			if (transform !== null) {
				outTransform.value = transform.NativeObject;
			}
		}
		$asm02.MS.Internal.XcpImports.AddRefNativeObject$1(outTransform.value);
	} catch ($exception) {
		var arg_56_0 = $exception;
		return $asm02.MS.Internal.Error.GetXresultForException(arg_56_0);
	}
	return 0;
};
System.Windows.Media.Effects.Effect.MapPoint$0 = function (nativeTarget, /* ref */ inPoint, /* ref */ outPoint, inverse) {
	try {
		var effect = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeTarget), System.Windows.Media.Effects.Effect);
		var generalTransform = effect.EffectMapping;
		if (inverse) {
			generalTransform = generalTransform.Inverse;
		}
		var point = new System.Windows.Point();
		point.X = inPoint.value.x;
		point.Y = inPoint.value.y;
		point = generalTransform.Transform(point.MemberwiseClone()).MemberwiseClone();
		outPoint.value = new $asm02.MS.Internal.PointF();
		outPoint.value.x = point.X;
		outPoint.value.y = point.Y;
	} catch ($exception) {
		var arg_6E_0 = $exception;
		return $asm02.MS.Internal.Error.GetXresultForException(arg_6E_0);
	}
	return 0;
};
System.Windows.Media.Effects.Effect.MapPoint$1 = function (nativeTarget, /* ref */ inPoint, /* ref */ outPoint) {
	return System.Windows.Media.Effects.Effect.MapPoint$0(nativeTarget, /* ref */ inPoint, /* ref */ outPoint, false);
};
System.Windows.Media.Effects.Effect.MapPointInverse = function (nativeTarget, /* ref */ inPoint, /* ref */ outPoint) {
	return System.Windows.Media.Effects.Effect.MapPoint$0(nativeTarget, /* ref */ inPoint, /* ref */ outPoint, true);
};
JSIL.OverloadedMethod(System.Windows.Media.Effects.Effect.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);
JSIL.OverloadedMethod(System.Windows.Media.Effects.Effect, "MapRect", [
		["MapRect$0", [System.IntPtr, JSIL.Reference.Of(MS.Internal.RectF), JSIL.Reference.Of(MS.Internal.RectF), System.Boolean]], 
		["MapRect$1", [System.IntPtr, JSIL.Reference.Of(MS.Internal.RectF), JSIL.Reference.Of(MS.Internal.RectF)]]
	]);
JSIL.OverloadedMethod(System.Windows.Media.Effects.Effect, "MapPoint", [
		["MapPoint$0", [System.IntPtr, JSIL.Reference.Of(MS.Internal.PointF), JSIL.Reference.Of(MS.Internal.PointF), System.Boolean]], 
		["MapPoint$1", [System.IntPtr, JSIL.Reference.Of(MS.Internal.PointF), JSIL.Reference.Of(MS.Internal.PointF)]]
	]);
JSIL.MakeProperty(System.Windows.Media.Effects.Effect.prototype, "EffectMapping", 
	System.Windows.Media.Effects.Effect.prototype.get_EffectMapping, null);
JSIL.MakeProperty(System.Windows.Media.Effects.Effect, "ImplicitInput", 
	System.Windows.Media.Effects.Effect.get_ImplicitInput, null);

System.Windows.Media.Effects.ShaderEffect.prototype._ctor$0 = function () {
	System.Windows.Media.Effects.Effect.prototype._ctor$1.call(this, 308);
};
System.Windows.Media.Effects.ShaderEffect.prototype._ctor$1 = function (nKnownTypeIndex) {
	System.Windows.Media.Effects.Effect.prototype._ctor$1.call(this, nKnownTypeIndex);
};
System.Windows.Media.Effects.ShaderEffect.prototype.get_DdxUvDdyUvRegisterIndex = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Effects.ShaderEffect.DdxUvDdyUvRegisterIndexProperty), System.Int32);
};
System.Windows.Media.Effects.ShaderEffect.prototype.set_DdxUvDdyUvRegisterIndex = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Effects.ShaderEffect.DdxUvDdyUvRegisterIndexProperty, value);
};
System.Windows.Media.Effects.ShaderEffect.prototype.get_PixelShader = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Effects.ShaderEffect.PixelShaderProperty), System.Windows.Media.Effects.PixelShader);
};
System.Windows.Media.Effects.ShaderEffect.prototype.set_PixelShader = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Effects.ShaderEffect.PixelShaderProperty, value);
};
System.Windows.Media.Effects.ShaderEffect.prototype.get_Sampler0 = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Effects.ShaderEffect.Sampler0Property), System.Windows.Media.Brush);
};
System.Windows.Media.Effects.ShaderEffect.prototype.set_Sampler0 = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Effects.ShaderEffect.Sampler0Property, value);
};
System.Windows.Media.Effects.ShaderEffect.prototype.get_Sampler1 = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Effects.ShaderEffect.Sampler1Property), System.Windows.Media.Brush);
};
System.Windows.Media.Effects.ShaderEffect.prototype.set_Sampler1 = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Effects.ShaderEffect.Sampler1Property, value);
};
System.Windows.Media.Effects.ShaderEffect.prototype.get_Sampler2 = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Effects.ShaderEffect.Sampler2Property), System.Windows.Media.Brush);
};
System.Windows.Media.Effects.ShaderEffect.prototype.set_Sampler2 = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Effects.ShaderEffect.Sampler2Property, value);
};
System.Windows.Media.Effects.ShaderEffect.prototype.get_Sampler3 = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Effects.ShaderEffect.Sampler3Property), System.Windows.Media.Brush);
};
System.Windows.Media.Effects.ShaderEffect.prototype.set_Sampler3 = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Effects.ShaderEffect.Sampler3Property, value);
};
System.Windows.Media.Effects.ShaderEffect.prototype.get_Sampler4 = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Effects.ShaderEffect.Sampler4Property), System.Windows.Media.Brush);
};
System.Windows.Media.Effects.ShaderEffect.prototype.set_Sampler4 = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Effects.ShaderEffect.Sampler4Property, value);
};
System.Windows.Media.Effects.ShaderEffect.prototype.get_Sampler5 = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Effects.ShaderEffect.Sampler5Property), System.Windows.Media.Brush);
};
System.Windows.Media.Effects.ShaderEffect.prototype.set_Sampler5 = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Effects.ShaderEffect.Sampler5Property, value);
};
System.Windows.Media.Effects.ShaderEffect.prototype.get_Sampler6 = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Effects.ShaderEffect.Sampler6Property), System.Windows.Media.Brush);
};
System.Windows.Media.Effects.ShaderEffect.prototype.set_Sampler6 = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Effects.ShaderEffect.Sampler6Property, value);
};
System.Windows.Media.Effects.ShaderEffect.prototype.get_Sampler7 = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Effects.ShaderEffect.Sampler7Property), System.Windows.Media.Brush);
};
System.Windows.Media.Effects.ShaderEffect.prototype.set_Sampler7 = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Effects.ShaderEffect.Sampler7Property, value);
};
System.Windows.Media.Effects.ShaderEffect.prototype.get_Sampler8 = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Effects.ShaderEffect.Sampler8Property), System.Windows.Media.Brush);
};
System.Windows.Media.Effects.ShaderEffect.prototype.set_Sampler8 = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Effects.ShaderEffect.Sampler8Property, value);
};
System.Windows.Media.Effects.ShaderEffect.prototype.get_Sampler9 = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Effects.ShaderEffect.Sampler9Property), System.Windows.Media.Brush);
};
System.Windows.Media.Effects.ShaderEffect.prototype.set_Sampler9 = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Effects.ShaderEffect.Sampler9Property, value);
};
System.Windows.Media.Effects.ShaderEffect.prototype.get_Sampler10 = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Effects.ShaderEffect.Sampler10Property), System.Windows.Media.Brush);
};
System.Windows.Media.Effects.ShaderEffect.prototype.set_Sampler10 = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Effects.ShaderEffect.Sampler10Property, value);
};
System.Windows.Media.Effects.ShaderEffect.prototype.get_Sampler11 = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Effects.ShaderEffect.Sampler11Property), System.Windows.Media.Brush);
};
System.Windows.Media.Effects.ShaderEffect.prototype.set_Sampler11 = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Effects.ShaderEffect.Sampler11Property, value);
};
System.Windows.Media.Effects.ShaderEffect.prototype.get_Sampler12 = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Effects.ShaderEffect.Sampler12Property), System.Windows.Media.Brush);
};
System.Windows.Media.Effects.ShaderEffect.prototype.set_Sampler12 = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Effects.ShaderEffect.Sampler12Property, value);
};
System.Windows.Media.Effects.ShaderEffect.prototype.get_Sampler13 = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Effects.ShaderEffect.Sampler13Property), System.Windows.Media.Brush);
};
System.Windows.Media.Effects.ShaderEffect.prototype.set_Sampler13 = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Effects.ShaderEffect.Sampler13Property, value);
};
System.Windows.Media.Effects.ShaderEffect.prototype.get_Sampler14 = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Effects.ShaderEffect.Sampler14Property), System.Windows.Media.Brush);
};
System.Windows.Media.Effects.ShaderEffect.prototype.set_Sampler14 = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Effects.ShaderEffect.Sampler14Property, value);
};
System.Windows.Media.Effects.ShaderEffect.prototype.get_Sampler15 = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Effects.ShaderEffect.Sampler15Property), System.Windows.Media.Brush);
};
System.Windows.Media.Effects.ShaderEffect.prototype.set_Sampler15 = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Effects.ShaderEffect.Sampler15Property, value);
};
System.Windows.Media.Effects.ShaderEffect.prototype.get_PaddingTop = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Effects.ShaderEffect.PaddingTopProperty), System.Double);
};
System.Windows.Media.Effects.ShaderEffect.prototype.set_PaddingTop = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Effects.ShaderEffect.PaddingTopProperty, value);
};
System.Windows.Media.Effects.ShaderEffect.prototype.get_PaddingBottom = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Effects.ShaderEffect.PaddingBottomProperty), System.Double);
};
System.Windows.Media.Effects.ShaderEffect.prototype.set_PaddingBottom = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Effects.ShaderEffect.PaddingBottomProperty, value);
};
System.Windows.Media.Effects.ShaderEffect.prototype.get_PaddingLeft = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Effects.ShaderEffect.PaddingLeftProperty), System.Double);
};
System.Windows.Media.Effects.ShaderEffect.prototype.set_PaddingLeft = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Effects.ShaderEffect.PaddingLeftProperty, value);
};
System.Windows.Media.Effects.ShaderEffect.prototype.get_PaddingRight = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Effects.ShaderEffect.PaddingRightProperty), System.Double);
};
System.Windows.Media.Effects.ShaderEffect.prototype.set_PaddingRight = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Effects.ShaderEffect.PaddingRightProperty, value);
};
System.Windows.Media.Effects.ShaderEffect.SetShaderConstant = JSIL.UntranslatableFunction("System.Void System.Windows.Media.Effects.ShaderEffect::SetShaderConstant(System.Int32,System.Windows.DependencyObject,System.Windows.DependencyPropertyChangedEventArgs)");
System.Windows.Media.Effects.ShaderEffect.SetShaderSampler = function (register, sampleMode, d, e) {
	if (!((register < 16) && (register >= 0))) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("ShaderEffect_SamplerRegisterOutOfRange")]);
	}
	var shaderEffect = JSIL.Cast(d, System.Windows.Media.Effects.ShaderEffect);
	var value = d.GetValue(e.Property);
	if (!((value === null) || 
			System.Windows.Media.VideoBrush.IsInstanceOfType(value) || 
			System.Windows.Media.ImplicitInputBrush.IsInstanceOfType(value) || System.Windows.Media.ImageBrush.IsInstanceOfType(value))) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("ShaderEffect_SamplerMustBeImageOrVideoBrush")]);
	}
	var brush = JSIL.TryCast(value, System.Windows.Media.Brush);
	switch (register) {
		case 0: 
			shaderEffect.Sampler0 = brush;
			return;
		case 1: 
			shaderEffect.Sampler1 = brush;
			return;
		case 2: 
			shaderEffect.Sampler2 = brush;
			return;
		case 3: 
			shaderEffect.Sampler3 = brush;
			return;
		case 4: 
			shaderEffect.Sampler4 = brush;
			return;
		case 5: 
			shaderEffect.Sampler5 = brush;
			return;
		case 6: 
			shaderEffect.Sampler6 = brush;
			return;
		case 7: 
			shaderEffect.Sampler7 = brush;
			return;
		case 8: 
			shaderEffect.Sampler8 = brush;
			return;
		case 9: 
			shaderEffect.Sampler9 = brush;
			return;
		case 10: 
			shaderEffect.Sampler10 = brush;
			return;
		case 11: 
			shaderEffect.Sampler11 = brush;
			return;
		case 12: 
			shaderEffect.Sampler12 = brush;
			return;
		case 13: 
			shaderEffect.Sampler13 = brush;
			return;
		case 14: 
			shaderEffect.Sampler14 = brush;
			return;
		case 15: 
			shaderEffect.Sampler15 = brush;
			return;
		default: 
			return;
	}
};
System.Windows.Media.Effects.ShaderEffect.PixelShaderConstantCallback = function (register) {
	var $l$gc__DisplayClass = new $asm02.System.Windows.Media.Effects.ShaderEffect.$l$gc__DisplayClass1();
	$l$gc__DisplayClass.register = register;
	return function (obj, e) {
		System.Windows.Media.Effects.ShaderEffect.SetShaderConstant($l$gc__DisplayClass.register, obj, e);
	};
};
System.Windows.Media.Effects.ShaderEffect.PixelShaderSamplerCallback$0 = function (register) {
	return System.Windows.Media.Effects.ShaderEffect.PixelShaderSamplerCallback$1(register, System.Windows.Media.Effects.SamplingMode.Auto);
};
System.Windows.Media.Effects.ShaderEffect.PixelShaderSamplerCallback$1 = function (register, samplingMode) {
	var $l$gc__DisplayClass = new $asm02.System.Windows.Media.Effects.ShaderEffect.$l$gc__DisplayClass4();
	$l$gc__DisplayClass.register = register;
	$l$gc__DisplayClass.samplingMode = samplingMode;
	return function (obj, e) {
		System.Windows.Media.Effects.ShaderEffect.SetShaderSampler($l$gc__DisplayClass.register, $l$gc__DisplayClass.samplingMode, obj, e);
	};
};
System.Windows.Media.Effects.ShaderEffect.prototype.UpdateShaderValue = function (dp) {
	var customDependencyProperty = JSIL.TryCast(dp, $asm02.System.Windows.CustomDependencyProperty);
	if (!((customDependencyProperty === null) || (customDependencyProperty._propertyChangedCallback === null))) {
		var value = System.Windows.DependencyObject.prototype.GetValue.call(this, dp);
		customDependencyProperty._propertyChangedCallback(this, new System.Windows.DependencyPropertyChangedEventArgs(dp, value, value));
	}
};
System.Windows.Media.Effects.ShaderEffect.RegisterPixelShaderSamplerProperty$0 = function (dpName, ownerType, samplerRegisterIndex) {
	return System.Windows.Media.Effects.ShaderEffect.RegisterPixelShaderSamplerProperty$1(dpName, ownerType, samplerRegisterIndex, System.Windows.Media.Effects.SamplingMode.Auto);
};
System.Windows.Media.Effects.ShaderEffect.RegisterPixelShaderSamplerProperty$1 = function (dpName, ownerType, samplerRegisterIndex, samplingMode) {
	return System.Windows.DependencyProperty.Register$0(dpName, System.Windows.Media.Brush, ownerType, JSIL.New(System.Windows.PropertyMetadata, "_ctor$0", [System.Windows.Media.Effects.ShaderEffect.PixelShaderSamplerCallback$1(samplerRegisterIndex, samplingMode)]));
};
JSIL.OverloadedMethod(System.Windows.Media.Effects.ShaderEffect.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);
JSIL.OverloadedMethod(System.Windows.Media.Effects.ShaderEffect, "PixelShaderSamplerCallback", [
		["PixelShaderSamplerCallback$0", [System.Int32]], 
		["PixelShaderSamplerCallback$1", [System.Int32, System.Windows.Media.Effects.SamplingMode]]
	]);
JSIL.OverloadedMethod(System.Windows.Media.Effects.ShaderEffect, "RegisterPixelShaderSamplerProperty", [
		["RegisterPixelShaderSamplerProperty$0", [System.String, System.Type, System.Int32]], 
		["RegisterPixelShaderSamplerProperty$1", [System.String, System.Type, System.Int32, System.Windows.Media.Effects.SamplingMode]]
	]);
JSIL.MakeProperty(System.Windows.Media.Effects.ShaderEffect.prototype, "DdxUvDdyUvRegisterIndex", 
	System.Windows.Media.Effects.ShaderEffect.prototype.get_DdxUvDdyUvRegisterIndex, System.Windows.Media.Effects.ShaderEffect.prototype.set_DdxUvDdyUvRegisterIndex);
JSIL.MakeProperty(System.Windows.Media.Effects.ShaderEffect.prototype, "PixelShader", 
	System.Windows.Media.Effects.ShaderEffect.prototype.get_PixelShader, System.Windows.Media.Effects.ShaderEffect.prototype.set_PixelShader);
JSIL.MakeProperty(System.Windows.Media.Effects.ShaderEffect.prototype, "Sampler0", 
	System.Windows.Media.Effects.ShaderEffect.prototype.get_Sampler0, System.Windows.Media.Effects.ShaderEffect.prototype.set_Sampler0);
JSIL.MakeProperty(System.Windows.Media.Effects.ShaderEffect.prototype, "Sampler1", 
	System.Windows.Media.Effects.ShaderEffect.prototype.get_Sampler1, System.Windows.Media.Effects.ShaderEffect.prototype.set_Sampler1);
JSIL.MakeProperty(System.Windows.Media.Effects.ShaderEffect.prototype, "Sampler2", 
	System.Windows.Media.Effects.ShaderEffect.prototype.get_Sampler2, System.Windows.Media.Effects.ShaderEffect.prototype.set_Sampler2);
JSIL.MakeProperty(System.Windows.Media.Effects.ShaderEffect.prototype, "Sampler3", 
	System.Windows.Media.Effects.ShaderEffect.prototype.get_Sampler3, System.Windows.Media.Effects.ShaderEffect.prototype.set_Sampler3);
JSIL.MakeProperty(System.Windows.Media.Effects.ShaderEffect.prototype, "Sampler4", 
	System.Windows.Media.Effects.ShaderEffect.prototype.get_Sampler4, System.Windows.Media.Effects.ShaderEffect.prototype.set_Sampler4);
JSIL.MakeProperty(System.Windows.Media.Effects.ShaderEffect.prototype, "Sampler5", 
	System.Windows.Media.Effects.ShaderEffect.prototype.get_Sampler5, System.Windows.Media.Effects.ShaderEffect.prototype.set_Sampler5);
JSIL.MakeProperty(System.Windows.Media.Effects.ShaderEffect.prototype, "Sampler6", 
	System.Windows.Media.Effects.ShaderEffect.prototype.get_Sampler6, System.Windows.Media.Effects.ShaderEffect.prototype.set_Sampler6);
JSIL.MakeProperty(System.Windows.Media.Effects.ShaderEffect.prototype, "Sampler7", 
	System.Windows.Media.Effects.ShaderEffect.prototype.get_Sampler7, System.Windows.Media.Effects.ShaderEffect.prototype.set_Sampler7);
JSIL.MakeProperty(System.Windows.Media.Effects.ShaderEffect.prototype, "Sampler8", 
	System.Windows.Media.Effects.ShaderEffect.prototype.get_Sampler8, System.Windows.Media.Effects.ShaderEffect.prototype.set_Sampler8);
JSIL.MakeProperty(System.Windows.Media.Effects.ShaderEffect.prototype, "Sampler9", 
	System.Windows.Media.Effects.ShaderEffect.prototype.get_Sampler9, System.Windows.Media.Effects.ShaderEffect.prototype.set_Sampler9);
JSIL.MakeProperty(System.Windows.Media.Effects.ShaderEffect.prototype, "Sampler10", 
	System.Windows.Media.Effects.ShaderEffect.prototype.get_Sampler10, System.Windows.Media.Effects.ShaderEffect.prototype.set_Sampler10);
JSIL.MakeProperty(System.Windows.Media.Effects.ShaderEffect.prototype, "Sampler11", 
	System.Windows.Media.Effects.ShaderEffect.prototype.get_Sampler11, System.Windows.Media.Effects.ShaderEffect.prototype.set_Sampler11);
JSIL.MakeProperty(System.Windows.Media.Effects.ShaderEffect.prototype, "Sampler12", 
	System.Windows.Media.Effects.ShaderEffect.prototype.get_Sampler12, System.Windows.Media.Effects.ShaderEffect.prototype.set_Sampler12);
JSIL.MakeProperty(System.Windows.Media.Effects.ShaderEffect.prototype, "Sampler13", 
	System.Windows.Media.Effects.ShaderEffect.prototype.get_Sampler13, System.Windows.Media.Effects.ShaderEffect.prototype.set_Sampler13);
JSIL.MakeProperty(System.Windows.Media.Effects.ShaderEffect.prototype, "Sampler14", 
	System.Windows.Media.Effects.ShaderEffect.prototype.get_Sampler14, System.Windows.Media.Effects.ShaderEffect.prototype.set_Sampler14);
JSIL.MakeProperty(System.Windows.Media.Effects.ShaderEffect.prototype, "Sampler15", 
	System.Windows.Media.Effects.ShaderEffect.prototype.get_Sampler15, System.Windows.Media.Effects.ShaderEffect.prototype.set_Sampler15);
JSIL.MakeProperty(System.Windows.Media.Effects.ShaderEffect.prototype, "PaddingTop", 
	System.Windows.Media.Effects.ShaderEffect.prototype.get_PaddingTop, System.Windows.Media.Effects.ShaderEffect.prototype.set_PaddingTop);
JSIL.MakeProperty(System.Windows.Media.Effects.ShaderEffect.prototype, "PaddingBottom", 
	System.Windows.Media.Effects.ShaderEffect.prototype.get_PaddingBottom, System.Windows.Media.Effects.ShaderEffect.prototype.set_PaddingBottom);
JSIL.MakeProperty(System.Windows.Media.Effects.ShaderEffect.prototype, "PaddingLeft", 
	System.Windows.Media.Effects.ShaderEffect.prototype.get_PaddingLeft, System.Windows.Media.Effects.ShaderEffect.prototype.set_PaddingLeft);
JSIL.MakeProperty(System.Windows.Media.Effects.ShaderEffect.prototype, "PaddingRight", 
	System.Windows.Media.Effects.ShaderEffect.prototype.get_PaddingRight, System.Windows.Media.Effects.ShaderEffect.prototype.set_PaddingRight);
System.Windows.Media.Effects.ShaderEffect.DdxUvDdyUvRegisterIndexProperty = null;
System.Windows.Media.Effects.ShaderEffect.PixelShaderProperty = null;
System.Windows.Media.Effects.ShaderEffect.Sampler0Property = null;
System.Windows.Media.Effects.ShaderEffect.Sampler1Property = null;
System.Windows.Media.Effects.ShaderEffect.Sampler2Property = null;
System.Windows.Media.Effects.ShaderEffect.Sampler3Property = null;
System.Windows.Media.Effects.ShaderEffect.Sampler4Property = null;
System.Windows.Media.Effects.ShaderEffect.Sampler5Property = null;
System.Windows.Media.Effects.ShaderEffect.Sampler6Property = null;
System.Windows.Media.Effects.ShaderEffect.Sampler7Property = null;
System.Windows.Media.Effects.ShaderEffect.Sampler8Property = null;
System.Windows.Media.Effects.ShaderEffect.Sampler9Property = null;
System.Windows.Media.Effects.ShaderEffect.Sampler10Property = null;
System.Windows.Media.Effects.ShaderEffect.Sampler11Property = null;
System.Windows.Media.Effects.ShaderEffect.Sampler12Property = null;
System.Windows.Media.Effects.ShaderEffect.Sampler13Property = null;
System.Windows.Media.Effects.ShaderEffect.Sampler14Property = null;
System.Windows.Media.Effects.ShaderEffect.Sampler15Property = null;
System.Windows.Media.Effects.ShaderEffect.PaddingTopProperty = null;
System.Windows.Media.Effects.ShaderEffect.PaddingBottomProperty = null;
System.Windows.Media.Effects.ShaderEffect.PaddingLeftProperty = null;
System.Windows.Media.Effects.ShaderEffect.PaddingRightProperty = null;
System.Windows.Media.Effects.ShaderEffect._cctor = function () {
	System.Windows.Media.Effects.ShaderEffect.DdxUvDdyUvRegisterIndexProperty = System.Windows.DependencyProperty.RegisterCoreProperty(26104, System.Int32);
	System.Windows.Media.Effects.ShaderEffect.PixelShaderProperty = System.Windows.DependencyProperty.RegisterCoreProperty(26105, System.Windows.Media.Effects.PixelShader);
	System.Windows.Media.Effects.ShaderEffect.Sampler0Property = System.Windows.DependencyProperty.RegisterCoreProperty(26106, System.Windows.Media.Brush);
	System.Windows.Media.Effects.ShaderEffect.Sampler1Property = System.Windows.DependencyProperty.RegisterCoreProperty(26107, System.Windows.Media.Brush);
	System.Windows.Media.Effects.ShaderEffect.Sampler2Property = System.Windows.DependencyProperty.RegisterCoreProperty(26108, System.Windows.Media.Brush);
	System.Windows.Media.Effects.ShaderEffect.Sampler3Property = System.Windows.DependencyProperty.RegisterCoreProperty(26109, System.Windows.Media.Brush);
	System.Windows.Media.Effects.ShaderEffect.Sampler4Property = System.Windows.DependencyProperty.RegisterCoreProperty(26110, System.Windows.Media.Brush);
	System.Windows.Media.Effects.ShaderEffect.Sampler5Property = System.Windows.DependencyProperty.RegisterCoreProperty(26111, System.Windows.Media.Brush);
	System.Windows.Media.Effects.ShaderEffect.Sampler6Property = System.Windows.DependencyProperty.RegisterCoreProperty(26112, System.Windows.Media.Brush);
	System.Windows.Media.Effects.ShaderEffect.Sampler7Property = System.Windows.DependencyProperty.RegisterCoreProperty(26113, System.Windows.Media.Brush);
	System.Windows.Media.Effects.ShaderEffect.Sampler8Property = System.Windows.DependencyProperty.RegisterCoreProperty(26114, System.Windows.Media.Brush);
	System.Windows.Media.Effects.ShaderEffect.Sampler9Property = System.Windows.DependencyProperty.RegisterCoreProperty(26115, System.Windows.Media.Brush);
	System.Windows.Media.Effects.ShaderEffect.Sampler10Property = System.Windows.DependencyProperty.RegisterCoreProperty(26116, System.Windows.Media.Brush);
	System.Windows.Media.Effects.ShaderEffect.Sampler11Property = System.Windows.DependencyProperty.RegisterCoreProperty(26117, System.Windows.Media.Brush);
	System.Windows.Media.Effects.ShaderEffect.Sampler12Property = System.Windows.DependencyProperty.RegisterCoreProperty(26118, System.Windows.Media.Brush);
	System.Windows.Media.Effects.ShaderEffect.Sampler13Property = System.Windows.DependencyProperty.RegisterCoreProperty(26119, System.Windows.Media.Brush);
	System.Windows.Media.Effects.ShaderEffect.Sampler14Property = System.Windows.DependencyProperty.RegisterCoreProperty(26120, System.Windows.Media.Brush);
	System.Windows.Media.Effects.ShaderEffect.Sampler15Property = System.Windows.DependencyProperty.RegisterCoreProperty(26121, System.Windows.Media.Brush);
	System.Windows.Media.Effects.ShaderEffect.PaddingTopProperty = System.Windows.DependencyProperty.RegisterCoreProperty(26132, System.Double);
	System.Windows.Media.Effects.ShaderEffect.PaddingBottomProperty = System.Windows.DependencyProperty.RegisterCoreProperty(26133, System.Double);
	System.Windows.Media.Effects.ShaderEffect.PaddingLeftProperty = System.Windows.DependencyProperty.RegisterCoreProperty(26134, System.Double);
	System.Windows.Media.Effects.ShaderEffect.PaddingRightProperty = System.Windows.DependencyProperty.RegisterCoreProperty(26135, System.Double);
};

$asm02.System.Windows.Media.Effects.ShaderEffect.$l$gc__DisplayClass1.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm02.System.Windows.Media.Effects.ShaderEffect.$l$gc__DisplayClass1.prototype.register = 0;

$asm02.System.Windows.Media.Effects.ShaderEffect.$l$gc__DisplayClass4.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm02.System.Windows.Media.Effects.ShaderEffect.$l$gc__DisplayClass4.prototype.register = 0;
$asm02.System.Windows.Media.Effects.ShaderEffect.$l$gc__DisplayClass4.prototype.samplingMode = 0;

System.Windows.Media.Effects.BlurEffect.prototype._ctor = function () {
	System.Windows.Media.Effects.Effect.prototype._ctor$1.call(this, 310);
};
System.Windows.Media.Effects.BlurEffect.prototype.get_Radius = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Effects.BlurEffect.RadiusProperty), System.Double);
};
System.Windows.Media.Effects.BlurEffect.prototype.set_Radius = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Effects.BlurEffect.RadiusProperty, value);
};
JSIL.MakeProperty(System.Windows.Media.Effects.BlurEffect.prototype, "Radius", 
	System.Windows.Media.Effects.BlurEffect.prototype.get_Radius, System.Windows.Media.Effects.BlurEffect.prototype.set_Radius);
System.Windows.Media.Effects.BlurEffect.RadiusProperty = null;
System.Windows.Media.Effects.BlurEffect._cctor = function () {
	System.Windows.Media.Effects.BlurEffect.RadiusProperty = System.Windows.DependencyProperty.RegisterCoreProperty(26126, System.Double);
};

System.Windows.Media.Effects.DropShadowEffect.prototype._ctor = function () {
	System.Windows.Media.Effects.Effect.prototype._ctor$1.call(this, 311);
};
System.Windows.Media.Effects.DropShadowEffect.prototype.get_Color = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Effects.DropShadowEffect.ColorProperty), System.Windows.Media.Color);
};
System.Windows.Media.Effects.DropShadowEffect.prototype.set_Color = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Effects.DropShadowEffect.ColorProperty, value);
};
System.Windows.Media.Effects.DropShadowEffect.prototype.get_Opacity = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Effects.DropShadowEffect.OpacityProperty), System.Double);
};
System.Windows.Media.Effects.DropShadowEffect.prototype.set_Opacity = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Effects.DropShadowEffect.OpacityProperty, value);
};
System.Windows.Media.Effects.DropShadowEffect.prototype.get_Direction = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Effects.DropShadowEffect.DirectionProperty), System.Double);
};
System.Windows.Media.Effects.DropShadowEffect.prototype.set_Direction = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Effects.DropShadowEffect.DirectionProperty, value);
};
System.Windows.Media.Effects.DropShadowEffect.prototype.get_BlurRadius = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Effects.DropShadowEffect.BlurRadiusProperty), System.Double);
};
System.Windows.Media.Effects.DropShadowEffect.prototype.set_BlurRadius = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Effects.DropShadowEffect.BlurRadiusProperty, value);
};
System.Windows.Media.Effects.DropShadowEffect.prototype.get_ShadowDepth = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.Effects.DropShadowEffect.ShadowDepthProperty), System.Double);
};
System.Windows.Media.Effects.DropShadowEffect.prototype.set_ShadowDepth = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.Effects.DropShadowEffect.ShadowDepthProperty, value);
};
JSIL.MakeProperty(System.Windows.Media.Effects.DropShadowEffect.prototype, "Color", 
	System.Windows.Media.Effects.DropShadowEffect.prototype.get_Color, System.Windows.Media.Effects.DropShadowEffect.prototype.set_Color);
JSIL.MakeProperty(System.Windows.Media.Effects.DropShadowEffect.prototype, "Opacity", 
	System.Windows.Media.Effects.DropShadowEffect.prototype.get_Opacity, System.Windows.Media.Effects.DropShadowEffect.prototype.set_Opacity);
JSIL.MakeProperty(System.Windows.Media.Effects.DropShadowEffect.prototype, "Direction", 
	System.Windows.Media.Effects.DropShadowEffect.prototype.get_Direction, System.Windows.Media.Effects.DropShadowEffect.prototype.set_Direction);
JSIL.MakeProperty(System.Windows.Media.Effects.DropShadowEffect.prototype, "BlurRadius", 
	System.Windows.Media.Effects.DropShadowEffect.prototype.get_BlurRadius, System.Windows.Media.Effects.DropShadowEffect.prototype.set_BlurRadius);
JSIL.MakeProperty(System.Windows.Media.Effects.DropShadowEffect.prototype, "ShadowDepth", 
	System.Windows.Media.Effects.DropShadowEffect.prototype.get_ShadowDepth, System.Windows.Media.Effects.DropShadowEffect.prototype.set_ShadowDepth);
System.Windows.Media.Effects.DropShadowEffect.ColorProperty = null;
System.Windows.Media.Effects.DropShadowEffect.OpacityProperty = null;
System.Windows.Media.Effects.DropShadowEffect.DirectionProperty = null;
System.Windows.Media.Effects.DropShadowEffect.BlurRadiusProperty = null;
System.Windows.Media.Effects.DropShadowEffect.ShadowDepthProperty = null;
System.Windows.Media.Effects.DropShadowEffect._cctor = function () {
	System.Windows.Media.Effects.DropShadowEffect.ColorProperty = System.Windows.DependencyProperty.RegisterCoreProperty(26127, System.Windows.Media.Color);
	System.Windows.Media.Effects.DropShadowEffect.OpacityProperty = System.Windows.DependencyProperty.RegisterCoreProperty(26128, System.Double);
	System.Windows.Media.Effects.DropShadowEffect.DirectionProperty = System.Windows.DependencyProperty.RegisterCoreProperty(26129, System.Double);
	System.Windows.Media.Effects.DropShadowEffect.BlurRadiusProperty = System.Windows.DependencyProperty.RegisterCoreProperty(26130, System.Double);
	System.Windows.Media.Effects.DropShadowEffect.ShadowDepthProperty = System.Windows.DependencyProperty.RegisterCoreProperty(26131, System.Double);
};

System.Windows.Printing.PrintDocument.prototype._ctor$0 = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 365);
};
System.Windows.Printing.PrintDocument.prototype._ctor$1 = function (nKnownTypeIndex) {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, nKnownTypeIndex);
};
System.Windows.Printing.PrintDocument.prototype.get_PrintedPageCount = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Printing.PrintDocument.PrintedPageCountProperty), System.Int32);
};
System.Windows.Printing.PrintDocument.prototype.Print = function (documentName) {
	var hwnd = new JSIL.Variable(0);
	$asm02.System.Windows.Hosting.NativeHost.Current.VerifyThread();
	var browserHandle = $asm02.System.Windows.Hosting.NativeHost.Current.BrowserService.IBrowserService_GetBrowserHandle(/* ref */ hwnd);
	if (-2147024891 === browserHandle) {
		throw JSIL.New(System.Security.SecurityException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("FileDialog_UserInitiated")]);
	}
	if (!((browserHandle === 0) || (browserHandle === 1))) {
		throw new System.Exception($asm02.System.Windows.Resx.GetString$2("Printing_UnknownPrintingError"));
	}
	this.AddEventListners();
	$asm02.MS.Internal.XcpImports.PrintDocument_LaunchPrintDialog(this, hwnd.value, documentName);
};
System.Windows.Printing.PrintDocument.prototype.add_BeginPrint = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(26138, null), value);
};
System.Windows.Printing.PrintDocument.prototype.remove_BeginPrint = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(26138, null), value);
};
System.Windows.Printing.PrintDocument.prototype.add_PrintPage = function (value) {
	this.PrintPage = System.Delegate.Combine(this.PrintPage, value);
};
System.Windows.Printing.PrintDocument.prototype.remove_PrintPage = function (value) {
	this.PrintPage = System.Delegate.Remove(this.PrintPage, value);
};
System.Windows.Printing.PrintDocument.prototype.add_EndPrint = function (value) {
	this.EndPrint = System.Delegate.Combine(this.EndPrint, value);
};
System.Windows.Printing.PrintDocument.prototype.remove_EndPrint = function (value) {
	this.EndPrint = System.Delegate.Remove(this.EndPrint, value);
};
System.Windows.Printing.PrintDocument.prototype.OnPrintPage = function (sender, e) {
	if (this.PrintPage !== null) {
		if (e.PageVisual === null) {
			this.PrintPage(this, e);
		}
		$asm02.MS.Internal.XcpImports.PrintDocument_ProcessPrintRequest(this, e);
	}
};
System.Windows.Printing.PrintDocument.prototype.OnEndPrint = function (sender, e) {
	if (this.EndPrint !== null) {
		e.SetupError();
		this.EndPrint(this, e);
	}
	$asm02.MS.Internal.XcpImports.PrintDocument_Reset(this);
};
System.Windows.Printing.PrintDocument.prototype.AddEventListners = function () {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(26139, null), JSIL.Delegate.New("System.EventHandler`1[System.Windows.Printing.PrintPageEventArgs]", this, System.Windows.Printing.PrintDocument.prototype.OnPrintPage));
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(26140, null), JSIL.Delegate.New("System.EventHandler`1[System.Windows.Printing.EndPrintEventArgs]", this, System.Windows.Printing.PrintDocument.prototype.OnEndPrint));
};
JSIL.OverloadedMethod(System.Windows.Printing.PrintDocument.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);
JSIL.MakeProperty(System.Windows.Printing.PrintDocument.prototype, "PrintedPageCount", 
	System.Windows.Printing.PrintDocument.prototype.get_PrintedPageCount, null);
System.Windows.Printing.PrintDocument.PrintedPageCountProperty = null;
System.Windows.Printing.PrintDocument.prototype.PrintPage = null;
System.Windows.Printing.PrintDocument.prototype.EndPrint = null;
System.Windows.Printing.PrintDocument._cctor = function () {
	System.Windows.Printing.PrintDocument.PrintedPageCountProperty = System.Windows.DependencyProperty.RegisterCoreProperty(23008, System.Int32);
};

System.Windows.Printing.PrintPageEventArgs.prototype._ctor = function () {
	System.EventArgs.prototype._ctor.call(this);
};
System.Windows.Printing.PrintPageEventArgs.prototype.SetPtr = function (ptr) {
	this.m_objectPtr = new $asm02.MS.Internal.NativeObjectSafeHandle();
	this.m_objectPtr.NativeObject = ptr;
};
System.Windows.Printing.PrintPageEventArgs.prototype.IManagedPeerBase_get_NativeObject = function () {
	this.CheckPtr();
	return this.m_objectPtr.NativeObject;
};
System.Windows.Printing.PrintPageEventArgs.prototype.CheckPtr = function () {
	if (this.m_objectPtr === null) {
		this.SetPtr(0);
	}
};
System.Windows.Printing.PrintPageEventArgs.prototype.get_PageVisual = function () {
	this.CheckPtr();
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.Printing.PrintPageEventArgs.PageVisualProperty), System.Windows.UIElement);
};
System.Windows.Printing.PrintPageEventArgs.prototype.set_PageVisual = function (value) {
	this.CheckPtr();
	$asm02.MS.Internal.XcpImports.SetValue(this, System.Windows.Printing.PrintPageEventArgs.PageVisualProperty, value);
};
System.Windows.Printing.PrintPageEventArgs.prototype.get_HasMorePages = function () {
	this.CheckPtr();
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.Printing.PrintPageEventArgs.HasMorePagesProperty), System.Boolean);
};
System.Windows.Printing.PrintPageEventArgs.prototype.set_HasMorePages = function (value) {
	this.CheckPtr();
	$asm02.MS.Internal.XcpImports.SetValue(this, System.Windows.Printing.PrintPageEventArgs.HasMorePagesProperty, value);
};
System.Windows.Printing.PrintPageEventArgs.prototype.get_PrintableArea = function () {
	this.CheckPtr();
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.Printing.PrintPageEventArgs.PrintableAreaProperty), System.Windows.Size);
};
System.Windows.Printing.PrintPageEventArgs.prototype.get_PageMargins = function () {
	this.CheckPtr();
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.Printing.PrintPageEventArgs.PageMarginsProperty), System.Windows.Thickness);
};
System.Windows.Printing.PrintPageEventArgs.prototype.get_NativeObject = function () {
	if (this.m_objectPtr !== null) {
		return this.m_objectPtr.NativeObject;
	}
	if ($asm02.MS.Internal.JoltHelper.m_customCLR) {
		throw JSIL.New(System.ObjectDisposedException, "_ctor$1", ["NativeObject"]);
	}
	throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
};
JSIL.MakeProperty(System.Windows.Printing.PrintPageEventArgs.prototype, "IManagedPeerBase_NativeObject", 
	System.Windows.Printing.PrintPageEventArgs.prototype.IManagedPeerBase_get_NativeObject, null);
JSIL.MakeProperty(System.Windows.Printing.PrintPageEventArgs.prototype, "PageVisual", 
	System.Windows.Printing.PrintPageEventArgs.prototype.get_PageVisual, System.Windows.Printing.PrintPageEventArgs.prototype.set_PageVisual);
JSIL.MakeProperty(System.Windows.Printing.PrintPageEventArgs.prototype, "HasMorePages", 
	System.Windows.Printing.PrintPageEventArgs.prototype.get_HasMorePages, System.Windows.Printing.PrintPageEventArgs.prototype.set_HasMorePages);
JSIL.MakeProperty(System.Windows.Printing.PrintPageEventArgs.prototype, "PrintableArea", 
	System.Windows.Printing.PrintPageEventArgs.prototype.get_PrintableArea, null);
JSIL.MakeProperty(System.Windows.Printing.PrintPageEventArgs.prototype, "PageMargins", 
	System.Windows.Printing.PrintPageEventArgs.prototype.get_PageMargins, null);
JSIL.MakeProperty(System.Windows.Printing.PrintPageEventArgs.prototype, "NativeObject", 
	System.Windows.Printing.PrintPageEventArgs.prototype.get_NativeObject, null);
System.Windows.Printing.PrintPageEventArgs.prototype.m_objectPtr = null;
System.Windows.Printing.PrintPageEventArgs.PageVisualProperty = null;
System.Windows.Printing.PrintPageEventArgs.HasMorePagesProperty = null;
System.Windows.Printing.PrintPageEventArgs.PrintableAreaProperty = null;
System.Windows.Printing.PrintPageEventArgs.PageMarginsProperty = null;
System.Windows.Printing.PrintPageEventArgs._cctor = function () {
	System.Windows.Printing.PrintPageEventArgs.PageVisualProperty = System.Windows.DependencyProperty.RegisterCoreProperty(23002, System.Windows.UIElement);
	System.Windows.Printing.PrintPageEventArgs.HasMorePagesProperty = System.Windows.DependencyProperty.RegisterCoreProperty(23003, System.Boolean);
	System.Windows.Printing.PrintPageEventArgs.PrintableAreaProperty = System.Windows.DependencyProperty.RegisterCoreProperty(23004, System.Windows.Size);
	System.Windows.Printing.PrintPageEventArgs.PageMarginsProperty = System.Windows.DependencyProperty.RegisterCoreProperty(23006, System.Windows.Thickness);
};

System.Windows.Printing.BeginPrintEventArgs.prototype._ctor = function () {
	System.EventArgs.prototype._ctor.call(this);
};
System.Windows.Printing.BeginPrintEventArgs.prototype.SetPtr = function (ptr) {
	this.m_objectPtr = new $asm02.MS.Internal.NativeObjectSafeHandle();
	this.m_objectPtr.NativeObject = ptr;
};
System.Windows.Printing.BeginPrintEventArgs.prototype.IManagedPeerBase_get_NativeObject = function () {
	this.CheckPtr();
	return this.m_objectPtr.NativeObject;
};
System.Windows.Printing.BeginPrintEventArgs.prototype.CheckPtr = function () {
	if (this.m_objectPtr === null) {
		this.SetPtr(0);
	}
};
JSIL.MakeProperty(System.Windows.Printing.BeginPrintEventArgs.prototype, "IManagedPeerBase_NativeObject", 
	System.Windows.Printing.BeginPrintEventArgs.prototype.IManagedPeerBase_get_NativeObject, null);
System.Windows.Printing.BeginPrintEventArgs.prototype.m_objectPtr = null;

System.Windows.Printing.EndPrintEventArgs.prototype._ctor = function () {
	System.EventArgs.prototype._ctor.call(this);
};
System.Windows.Printing.EndPrintEventArgs.prototype.SetPtr = function (ptr) {
	this.m_objectPtr = new $asm02.MS.Internal.NativeObjectSafeHandle();
	this.m_objectPtr.NativeObject = ptr;
};
System.Windows.Printing.EndPrintEventArgs.prototype.IManagedPeerBase_get_NativeObject = function () {
	this.CheckPtr();
	return this.m_objectPtr.NativeObject;
};
System.Windows.Printing.EndPrintEventArgs.prototype.CheckPtr = function () {
	if (this.m_objectPtr === null) {
		this.SetPtr(0);
	}
};
System.Windows.Printing.EndPrintEventArgs.prototype.get_ErrorCode = function () {
	this.CheckPtr();
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.Printing.EndPrintEventArgs.ErrorCodeProperty), System.Int32);
};
System.Windows.Printing.EndPrintEventArgs.prototype.set_ErrorCode = function (value) {
	this.CheckPtr();
	$asm02.MS.Internal.XcpImports.SetValue(this, System.Windows.Printing.EndPrintEventArgs.ErrorCodeProperty, value);
};
System.Windows.Printing.EndPrintEventArgs.prototype.get_Error = function () {
	return this._error;
};
System.Windows.Printing.EndPrintEventArgs.prototype.SetupError = function () {
	switch (this.ErrorCode) {
		case 0: 
			this._error = null;
			return;
		case 1: 
			this._error = new System.Exception($asm02.System.Windows.Resx.GetString$2("Printing_UnknownPrintingError"));
			return;
		case 2: 
			this._error = new System.Exception($asm02.System.Windows.Resx.GetString$2("Printing_MaxPagesExceeded"));
			return;
		case 3: 
			this._error = new System.Exception($asm02.System.Windows.Resx.GetString$2("Printing_MaxPageSizeExceeded"));
			return;
		case 4: 
			this._error = new System.Exception($asm02.System.Windows.Resx.GetString$2("Printing_MaxRetryExceeded"));
			return;
		default: 
			this._error = new System.Exception($asm02.System.Windows.Resx.GetString$2("Printing_UnknownPrintingError"));
			return;
	}
};
JSIL.MakeProperty(System.Windows.Printing.EndPrintEventArgs.prototype, "IManagedPeerBase_NativeObject", 
	System.Windows.Printing.EndPrintEventArgs.prototype.IManagedPeerBase_get_NativeObject, null);
JSIL.MakeProperty(System.Windows.Printing.EndPrintEventArgs.prototype, "ErrorCode", 
	System.Windows.Printing.EndPrintEventArgs.prototype.get_ErrorCode, System.Windows.Printing.EndPrintEventArgs.prototype.set_ErrorCode);
JSIL.MakeProperty(System.Windows.Printing.EndPrintEventArgs.prototype, "Error", 
	System.Windows.Printing.EndPrintEventArgs.prototype.get_Error, null);
System.Windows.Printing.EndPrintEventArgs.prototype.m_objectPtr = null;
System.Windows.Printing.EndPrintEventArgs.ErrorCodeProperty = null;
System.Windows.Printing.EndPrintEventArgs.prototype._error = null;
System.Windows.Printing.EndPrintEventArgs._cctor = function () {
	System.Windows.Printing.EndPrintEventArgs.ErrorCodeProperty = System.Windows.DependencyProperty.RegisterCoreProperty(23007, System.Int32);
};

System.Windows.Navigation.NavigationEventArgs.prototype.SetPtr = function (ptr) {
	this.m_objectPtr = new $asm02.MS.Internal.NativeObjectSafeHandle();
	this.m_objectPtr.NativeObject = ptr;
};
System.Windows.Navigation.NavigationEventArgs.prototype.IManagedPeerBase_get_NativeObject = function () {
	this.CheckPtr();
	return this.m_objectPtr.NativeObject;
};
System.Windows.Navigation.NavigationEventArgs.prototype.CheckPtr = function () {
	if (this.m_objectPtr === null) {
		this.SetPtr(0);
	}
};
System.Windows.Navigation.NavigationEventArgs.prototype._ctor$0 = function (content, uri, NavigationMode, IsNavigationInitiator) {
	System.EventArgs.prototype._ctor.call(this);
	$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
};
System.Windows.Navigation.NavigationEventArgs.prototype.get_NavigationMode = function () {
	$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
	return System.Windows.Navigation.NavigationMode.New;
};
System.Windows.Navigation.NavigationEventArgs.prototype.set_NavigationMode = function (value) {
};
System.Windows.Navigation.NavigationEventArgs.prototype.get_IsNavigationInitiator = function () {
	$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
	return true;
};
System.Windows.Navigation.NavigationEventArgs.prototype.set_IsNavigationInitiator = function (value) {
};
System.Windows.Navigation.NavigationEventArgs.prototype._ctor$1 = function () {
	System.EventArgs.prototype._ctor.call(this);
	this.Content = null;
	this.Uri = null;
};
System.Windows.Navigation.NavigationEventArgs.prototype._ctor$2 = function (content, uri) {
	System.EventArgs.prototype._ctor.call(this);
	this.Content = content;
	this.Uri = uri;
};
System.Windows.Navigation.NavigationEventArgs.prototype.get_Content = function () {
	return this.Content$value;
};
System.Windows.Navigation.NavigationEventArgs.prototype.set_Content = function (value) {
	this.Content$value = value;
};
System.Windows.Navigation.NavigationEventArgs.prototype.get_Uri = function () {
	this.CheckPtr();
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.Navigation.NavigationEventArgs.UriProperty), System.Uri);
};
System.Windows.Navigation.NavigationEventArgs.prototype.set_Uri = function (value) {
	this.CheckPtr();
	$asm02.MS.Internal.XcpImports.SetValue(this, System.Windows.Navigation.NavigationEventArgs.UriProperty, value);
};
JSIL.OverloadedMethod(System.Windows.Navigation.NavigationEventArgs.prototype, "_ctor", [
		["_ctor$0", [System.Object, System.Uri, System.Windows.Navigation.NavigationMode, System.Boolean]], 
		["_ctor$1", []], 
		["_ctor$2", [System.Object, System.Uri]]
	]);
JSIL.MakeProperty(System.Windows.Navigation.NavigationEventArgs.prototype, "IManagedPeerBase_NativeObject", 
	System.Windows.Navigation.NavigationEventArgs.prototype.IManagedPeerBase_get_NativeObject, null);
JSIL.MakeProperty(System.Windows.Navigation.NavigationEventArgs.prototype, "NavigationMode", 
	System.Windows.Navigation.NavigationEventArgs.prototype.get_NavigationMode, System.Windows.Navigation.NavigationEventArgs.prototype.set_NavigationMode);
JSIL.MakeProperty(System.Windows.Navigation.NavigationEventArgs.prototype, "IsNavigationInitiator", 
	System.Windows.Navigation.NavigationEventArgs.prototype.get_IsNavigationInitiator, System.Windows.Navigation.NavigationEventArgs.prototype.set_IsNavigationInitiator);
JSIL.MakeProperty(System.Windows.Navigation.NavigationEventArgs.prototype, "Content", 
	System.Windows.Navigation.NavigationEventArgs.prototype.get_Content, System.Windows.Navigation.NavigationEventArgs.prototype.set_Content);
JSIL.MakeProperty(System.Windows.Navigation.NavigationEventArgs.prototype, "Uri", 
	System.Windows.Navigation.NavigationEventArgs.prototype.get_Uri, System.Windows.Navigation.NavigationEventArgs.prototype.set_Uri);
System.Windows.Navigation.NavigationEventArgs.prototype.m_objectPtr = null;
System.Windows.Navigation.NavigationEventArgs.UriProperty = null;
System.Windows.Navigation.NavigationEventArgs.prototype.Content$value = null;
System.Windows.Navigation.NavigationEventArgs._cctor = function () {
	System.Windows.Navigation.NavigationEventArgs.UriProperty = System.Windows.DependencyProperty.RegisterCoreProperty(22161, System.Uri);
};

System.Windows.Data.BindingBase.prototype.get_FallbackValue = function () {
	return this._fallbackValue;
};
System.Windows.Data.BindingBase.prototype.set_FallbackValue = function (value) {
	this.CheckSealed();
	this._fallbackValue = value;
};
System.Windows.Data.BindingBase.prototype.get_StringFormat = function () {
	return this._stringFormat;
};
System.Windows.Data.BindingBase.prototype.set_StringFormat = function (value) {
	this.CheckSealed();
	this._stringFormat = value;
};
System.Windows.Data.BindingBase.prototype.get_TargetNullValue = function () {
	return this._targetNullValue;
};
System.Windows.Data.BindingBase.prototype.set_TargetNullValue = function (value) {
	this.CheckSealed();
	this._targetNullValue = value;
};
System.Windows.Data.BindingBase.prototype.CheckSealed = function () {
	var flag = false;
	if ($asm02.MS.Internal.QuirksMode.ShouldBindingUseLateSealing()) {
		flag = this._isSealedSL2only;
	} else {
		flag = this._isSealed;
	}
	if (flag) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("Binding_CannotBeChangedAfterUse")]);
	}
};
System.Windows.Data.BindingBase.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
JSIL.MakeProperty(System.Windows.Data.BindingBase.prototype, "FallbackValue", 
	System.Windows.Data.BindingBase.prototype.get_FallbackValue, System.Windows.Data.BindingBase.prototype.set_FallbackValue);
JSIL.MakeProperty(System.Windows.Data.BindingBase.prototype, "StringFormat", 
	System.Windows.Data.BindingBase.prototype.get_StringFormat, System.Windows.Data.BindingBase.prototype.set_StringFormat);
JSIL.MakeProperty(System.Windows.Data.BindingBase.prototype, "TargetNullValue", 
	System.Windows.Data.BindingBase.prototype.get_TargetNullValue, System.Windows.Data.BindingBase.prototype.set_TargetNullValue);
System.Windows.Data.BindingBase.prototype._targetNullValue = null;
System.Windows.Data.BindingBase.prototype._fallbackValue = null;
System.Windows.Data.BindingBase.prototype._stringFormat = null;
System.Windows.Data.BindingBase.prototype._isSealed = false;
System.Windows.Data.BindingBase.prototype._isSealedSL2only = false;

System.Windows.Data.Binding.prototype._ctor$0 = function (path, calledFromParser) {
	this._mode = System.Windows.Data.BindingMode.OneWay;
	this._validatesOnNotifyDataErrors = true;
	System.Windows.Data.BindingBase.prototype._ctor.call(this);
	this._calledFromParser = calledFromParser;
	if (path === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["path"]);
	}
	this.Path = JSIL.New(System.Windows.PropertyPath, "_ctor$0", [path, JSIL.Array.New(System.Object, 0)]);
};
System.Windows.Data.Binding.prototype._ctor$1 = function (path) {
	this._mode = System.Windows.Data.BindingMode.OneWay;
	this._validatesOnNotifyDataErrors = true;
	System.Windows.Data.BindingBase.prototype._ctor.call(this);
	if (path === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["path"]);
	}
	this.Path = JSIL.New(System.Windows.PropertyPath, "_ctor$0", [path, JSIL.Array.New(System.Object, 0)]);
};
System.Windows.Data.Binding.prototype._ctor$2 = function () {
	this._mode = System.Windows.Data.BindingMode.OneWay;
	this._validatesOnNotifyDataErrors = true;
	System.Windows.Data.BindingBase.prototype._ctor.call(this);
	this.Path = JSIL.New(System.Windows.PropertyPath, "_ctor$0", ["", JSIL.Array.New(System.Object, 0)]);
};
System.Windows.Data.Binding.prototype.get_Path = function () {
	return this._path;
};
System.Windows.Data.Binding.prototype.set_Path = function (value) {
	System.Windows.Data.BindingBase.prototype.CheckSealed.call(this);
	value.ParsePathInternal(this._calledFromParser);
	this._path = value;
};
System.Windows.Data.Binding.prototype.get_Mode = function () {
	return this._mode;
};
System.Windows.Data.Binding.prototype.set_Mode = function (value) {
	System.Windows.Data.BindingBase.prototype.CheckSealed.call(this);
	this._mode = value;
};
System.Windows.Data.Binding.prototype.get_Source = function () {
	return this._source;
};
System.Windows.Data.Binding.prototype.set_Source = function (value) {
	System.Windows.Data.BindingBase.prototype.CheckSealed.call(this);
	this._source = value;
	if (!((this._currentSource !== 0) && (this._currentSource !== System.Windows.Data.BindingSource.Source))) {
		this._source = value;
		this._currentSource = System.Windows.Data.BindingSource.Source;
		return;
	}
	var message = System.String.Format($asm02.System.Windows.Resx.GetString$2("Binding_SourceConflict"), System.Windows.Data.BindingSource.Source, this._currentSource);
	throw JSIL.New(System.InvalidOperationException, "_ctor$1", [message]);
};
System.Windows.Data.Binding.prototype.get_Converter = function () {
	return this._converter;
};
System.Windows.Data.Binding.prototype.set_Converter = function (value) {
	System.Windows.Data.BindingBase.prototype.CheckSealed.call(this);
	this._converter = value;
};
System.Windows.Data.Binding.prototype.get_ConverterCulture = function () {
	return this._converterCulture;
};
System.Windows.Data.Binding.prototype.set_ConverterCulture = function (value) {
	System.Windows.Data.BindingBase.prototype.CheckSealed.call(this);
	this._converterCulture = value;
};
System.Windows.Data.Binding.prototype.get_ConverterParameter = function () {
	return this._converterParameter;
};
System.Windows.Data.Binding.prototype.set_ConverterParameter = function (value) {
	System.Windows.Data.BindingBase.prototype.CheckSealed.call(this);
	this._converterParameter = value;
};
System.Windows.Data.Binding.prototype.get_NotifyOnValidationError = function () {
	return this._notifyOnValidationError;
};
System.Windows.Data.Binding.prototype.set_NotifyOnValidationError = function (value) {
	System.Windows.Data.BindingBase.prototype.CheckSealed.call(this);
	this._notifyOnValidationError = value;
};
System.Windows.Data.Binding.prototype.get_ValidatesOnDataErrors = function () {
	return this._validatesOnDataErrors;
};
System.Windows.Data.Binding.prototype.set_ValidatesOnDataErrors = function (value) {
	System.Windows.Data.BindingBase.prototype.CheckSealed.call(this);
	this._validatesOnDataErrors = value;
};
System.Windows.Data.Binding.prototype.get_ValidatesOnExceptions = function () {
	return this._validatesOnExceptions;
};
System.Windows.Data.Binding.prototype.set_ValidatesOnExceptions = function (value) {
	System.Windows.Data.BindingBase.prototype.CheckSealed.call(this);
	this._validatesOnExceptions = value;
};
System.Windows.Data.Binding.prototype.get_ValidatesOnNotifyDataErrors = function () {
	return this._validatesOnNotifyDataErrors;
};
System.Windows.Data.Binding.prototype.set_ValidatesOnNotifyDataErrors = function (value) {
	System.Windows.Data.BindingBase.prototype.CheckSealed.call(this);
	this._validatesOnNotifyDataErrors = value;
};
System.Windows.Data.Binding.prototype.get_ElementName = function () {
	return this._elementName;
};
System.Windows.Data.Binding.prototype.set_ElementName = function (value) {
	System.Windows.Data.BindingBase.prototype.CheckSealed.call(this);
	if (!((this._currentSource !== 0) && (this._currentSource !== System.Windows.Data.BindingSource.ElementName))) {
		this._elementName = value;
		this._currentSource = System.Windows.Data.BindingSource.ElementName;
		return;
	}
	var message = System.String.Format($asm02.System.Windows.Resx.GetString$2("Binding_SourceConflict"), System.Windows.Data.BindingSource.RelativeSource, this._currentSource);
	throw JSIL.New(System.InvalidOperationException, "_ctor$1", [message]);
};
System.Windows.Data.Binding.prototype.get_RelativeSource = function () {
	return this._relativeSource;
};
System.Windows.Data.Binding.prototype.set_RelativeSource = function (value) {
	System.Windows.Data.BindingBase.prototype.CheckSealed.call(this);
	if (!((this._currentSource !== 0) && (this._currentSource !== System.Windows.Data.BindingSource.RelativeSource))) {
		this._relativeSource = value;
		this._currentSource = System.Windows.Data.BindingSource.RelativeSource;
		return;
	}
	var message = System.String.Format($asm02.System.Windows.Resx.GetString$2("Binding_SourceConflict"), System.Windows.Data.BindingSource.RelativeSource, this._currentSource);
	throw JSIL.New(System.InvalidOperationException, "_ctor$1", [message]);
};
System.Windows.Data.Binding.prototype.get_UpdateSourceTrigger = function () {
	return this._updateSourceTrigger;
};
System.Windows.Data.Binding.prototype.set_UpdateSourceTrigger = function (value) {
	System.Windows.Data.BindingBase.prototype.CheckSealed.call(this);
	this._updateSourceTrigger = value;
};
System.Windows.Data.Binding.prototype.get_BindsDirectlyToSource = function () {
	return this._bindsDirectlyToSource;
};
System.Windows.Data.Binding.prototype.set_BindsDirectlyToSource = function (value) {
	System.Windows.Data.BindingBase.prototype.CheckSealed.call(this);
	this._bindsDirectlyToSource = value;
};
System.Windows.Data.Binding.prototype.CreateBindingExpression = function () {
	return new System.Windows.Data.BindingExpression(this);
};
System.Windows.Data.Binding.prototype.IMarkupExtension_SetupExtension = function (target, property) {
	if (!((target === null) || (JSIL.TryCast(target, System.Windows.DependencyObject) === null))) {
		var dependencyProperty = JSIL.TryCast(property, System.Windows.DependencyProperty);
		if (dependencyProperty !== null) {
			System.Windows.Data.BindingOperations.SetBinding(JSIL.TryCast(target, System.Windows.DependencyObject), dependencyProperty, this);
			return;
		}
	}
	if (!$asm02.MS.Internal.QuirksMode.ShouldUseSL3Parser()) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("Binding_SetupExtension_RequiresDPandDO", [System.Windows.Data.Binding.Name])]);
	}
};
System.Windows.Data.Binding.prototype.IMarkupExtension_IsValidTargetForExtension = function (target, property) {
	if (!((JSIL.TryCast(target, System.Windows.FrameworkElement) === null) && 
			(JSIL.TryCast(target, System.Windows.Data.CollectionViewSource) === null) && ((JSIL.TryCast(target, System.Windows.DependencyObject) === null) || 
				JSIL.TryCast(target, System.Windows.Setter) || 
				!$asm02.MS.Internal.QuirksMode.ShouldAttachBindingOnDependencyObjectInXaml()))) {
		var dependencyProperty = JSIL.TryCast(property, System.Windows.DependencyProperty);
		if (dependencyProperty !== null) {
			return true;
		}
	}
	return false;
};
System.Windows.Data.Binding.prototype.ISupportInitialize_BeginInit = function () {
	this._calledFromParser = true;
};
System.Windows.Data.Binding.prototype.ISupportInitialize_EndInit = function () {
	this._calledFromParser = false;
};
JSIL.OverloadedMethod(System.Windows.Data.Binding.prototype, "_ctor", [
		["_ctor$0", [System.String, System.Boolean]], 
		["_ctor$1", [System.String]], 
		["_ctor$2", []]
	]);
JSIL.MakeProperty(System.Windows.Data.Binding.prototype, "Path", 
	System.Windows.Data.Binding.prototype.get_Path, System.Windows.Data.Binding.prototype.set_Path);
JSIL.MakeProperty(System.Windows.Data.Binding.prototype, "Mode", 
	System.Windows.Data.Binding.prototype.get_Mode, System.Windows.Data.Binding.prototype.set_Mode);
JSIL.MakeProperty(System.Windows.Data.Binding.prototype, "Source", 
	System.Windows.Data.Binding.prototype.get_Source, System.Windows.Data.Binding.prototype.set_Source);
JSIL.MakeProperty(System.Windows.Data.Binding.prototype, "Converter", 
	System.Windows.Data.Binding.prototype.get_Converter, System.Windows.Data.Binding.prototype.set_Converter);
JSIL.MakeProperty(System.Windows.Data.Binding.prototype, "ConverterCulture", 
	System.Windows.Data.Binding.prototype.get_ConverterCulture, System.Windows.Data.Binding.prototype.set_ConverterCulture);
JSIL.MakeProperty(System.Windows.Data.Binding.prototype, "ConverterParameter", 
	System.Windows.Data.Binding.prototype.get_ConverterParameter, System.Windows.Data.Binding.prototype.set_ConverterParameter);
JSIL.MakeProperty(System.Windows.Data.Binding.prototype, "NotifyOnValidationError", 
	System.Windows.Data.Binding.prototype.get_NotifyOnValidationError, System.Windows.Data.Binding.prototype.set_NotifyOnValidationError);
JSIL.MakeProperty(System.Windows.Data.Binding.prototype, "ValidatesOnDataErrors", 
	System.Windows.Data.Binding.prototype.get_ValidatesOnDataErrors, System.Windows.Data.Binding.prototype.set_ValidatesOnDataErrors);
JSIL.MakeProperty(System.Windows.Data.Binding.prototype, "ValidatesOnExceptions", 
	System.Windows.Data.Binding.prototype.get_ValidatesOnExceptions, System.Windows.Data.Binding.prototype.set_ValidatesOnExceptions);
JSIL.MakeProperty(System.Windows.Data.Binding.prototype, "ValidatesOnNotifyDataErrors", 
	System.Windows.Data.Binding.prototype.get_ValidatesOnNotifyDataErrors, System.Windows.Data.Binding.prototype.set_ValidatesOnNotifyDataErrors);
JSIL.MakeProperty(System.Windows.Data.Binding.prototype, "ElementName", 
	System.Windows.Data.Binding.prototype.get_ElementName, System.Windows.Data.Binding.prototype.set_ElementName);
JSIL.MakeProperty(System.Windows.Data.Binding.prototype, "RelativeSource", 
	System.Windows.Data.Binding.prototype.get_RelativeSource, System.Windows.Data.Binding.prototype.set_RelativeSource);
JSIL.MakeProperty(System.Windows.Data.Binding.prototype, "UpdateSourceTrigger", 
	System.Windows.Data.Binding.prototype.get_UpdateSourceTrigger, System.Windows.Data.Binding.prototype.set_UpdateSourceTrigger);
JSIL.MakeProperty(System.Windows.Data.Binding.prototype, "BindsDirectlyToSource", 
	System.Windows.Data.Binding.prototype.get_BindsDirectlyToSource, System.Windows.Data.Binding.prototype.set_BindsDirectlyToSource);
System.Windows.Data.Binding.prototype._path = null;
System.Windows.Data.Binding.prototype._mode = 0;
System.Windows.Data.Binding.prototype._source = null;
System.Windows.Data.Binding.prototype._converter = null;
System.Windows.Data.Binding.prototype._converterCulture = null;
System.Windows.Data.Binding.prototype._converterParameter = null;
System.Windows.Data.Binding.prototype._notifyOnValidationError = false;
System.Windows.Data.Binding.prototype._validatesOnDataErrors = false;
System.Windows.Data.Binding.prototype._validatesOnExceptions = false;
System.Windows.Data.Binding.prototype._validatesOnNotifyDataErrors = false;
System.Windows.Data.Binding.prototype._elementName = null;
System.Windows.Data.Binding.prototype._calledFromParser = false;
System.Windows.Data.Binding.prototype._relativeSource = null;
System.Windows.Data.Binding.prototype._updateSourceTrigger = 0;
System.Windows.Data.Binding.prototype._currentSource = 0;
System.Windows.Data.Binding.prototype._bindsDirectlyToSource = false;

System.Windows.Expression.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
System.Windows.Expression.prototype.GetDefaultValueForType = function (type) {
	if (!type.IsValueType) {
		return null;
	}
	return System.Activator.CreateInstance$3(type);
};
System.Windows.Expression.prototype.IsValidValueForUpdate = function (value, sourceType) {
	return ((value || 
			!sourceType.IsValueType) && ((value === null) || 
			((JSIL.GetType(value)) === sourceType) || 
			sourceType.IsAssignableFrom(JSIL.GetType(value))));
};
JSIL.MakeProperty(System.Windows.Expression.prototype, "CanSetValue", 
	System.Windows.Expression.prototype.get_CanSetValue, null);
JSIL.MakeProperty(System.Windows.Expression.prototype, "IsAssociated", 
	System.Windows.Expression.prototype.get_IsAssociated, null);

System.Windows.Data.BindingExpressionBase.prototype._ctor = function () {
	System.Windows.Expression.prototype._ctor.call(this);
};

System.Windows.Data.BindingExpression.prototype.get_TargetFE = function () {
	return JSIL.TryCast(this.TargetDO, System.Windows.FrameworkElement);
};
System.Windows.Data.BindingExpression.prototype.get_TargetElement = function () {
	return JSIL.Coalesce(this.TargetFE, this._mentor);
};
System.Windows.Data.BindingExpression.prototype._ctor = function (binding) {
	System.Windows.Data.BindingExpressionBase.prototype._ctor.call(this);
	this._binding = binding;
};
System.Windows.Data.BindingExpression.prototype.GetValue = function (d, dp) {
	if ((this._listener !== null) && this._listener.FullPathExists) {
		var leafValue = this._listener.LeafValue;
		return this.ConvertToTarget(leafValue);
	}
	if ((this._listener === null) || !this._binding._path.IsPathToSource) {
		return this.GetConvertedFallbackOrDefaultValue(d, dp);
	}
	if (this._binding.TargetNullValue !== null) {
		return this.ConvertToTarget(null);
	}
	return dp.GetDefaultValue(d);
};
System.Windows.Data.BindingExpression.prototype.GetExpressionTraceString = function () {
	var path = this._binding.Path.Path;
	var text = this.SourceForBinding ? this.SourceForBinding.toString() : "null";
	var text2 = this.SourceForBinding ? (this.SourceForBinding.GetHashCode()).toString() : "0";
	var text3 = JSIL.GetType(this.TargetDO).toString();
	var text4 = this.TargetFE ? this.TargetFE.Name : "null";
	var name = this._targetProperty.Name;
	var text5 = this._targetProperty._propertyType.toString();
	return System.String.Format(System.Globalization.CultureInfo.CurrentCulture, $asm02.System.Windows.Resx.GetString$2("BindingExpression_TraceString"), [path, text, text2, text3, text4, name, text5]);
};
System.Windows.Data.BindingExpression.prototype.BeginSetBinding = function () {
	this._updateState = System.Windows.Data.BindingExpression.UpdateState.SettingUpBinding;
};
System.Windows.Data.BindingExpression.prototype.EndSetBinding = function () {
	if (this._binding.ValidatesOnDataErrors) {
		var dataErrorInfoMessage = this.GetDataErrorInfoMessage$0();
		if (!System.String.IsNullOrEmpty(dataErrorInfoMessage)) {
			var error = JSIL.New(System.Windows.Controls.ValidationError, "_ctor$1", [dataErrorInfoMessage]);
			this.AddErrorNotificationToQueue(System.Windows.Controls.ValidationErrorEventAction.Added, error);
			this.AddErrorToTarget(error, false);
			this.RaiseErrorNotifications();
		}
	}
	if (this._binding.ValidatesOnNotifyDataErrors) {
		this.ConsumeNotifyDataErrorInfo$0();
	}
	this._updateState = System.Windows.Data.BindingExpression.UpdateState.None;
};
System.Windows.Data.BindingExpression.prototype.ConvertToTarget = function (value) {
	var cultureInfo = null;
	if (this._binding.Converter !== null) {
		cultureInfo = this.CalculateCulture();
		value = this._binding.Converter.IValueConverter_Convert(value, this._targetProperty._propertyType, this._binding.ConverterParameter, cultureInfo);
		if (value === System.Windows.DependencyProperty.UnsetValue) {
			if (this._binding.FallbackValue !== null) {
				value = this._binding.FallbackValue;
			} else {
				value = this._targetProperty.GetDefaultValue(this.TargetDO);
			}
		}
	}
	if (value === null) {
		if (this._binding.TargetNullValue !== null) {
			value = this._binding.TargetNullValue;
		}
	} else {
		value = this.ApplyStringFormat(value, cultureInfo);
	}
	if (value !== null) {
		var type = (JSIL.GetType(value));
		if (!((type !== this._targetProperty._propertyType) && !this._targetProperty._propertyType.IsAssignableFrom(type))) {
			return value;
		}
	}
	if (cultureInfo === null) {
		cultureInfo = this.CalculateCulture();
	}
	try {
		value = this.DynamicConverter.Convert(value, this._targetProperty._propertyType, null, cultureInfo);
	} catch ($exception) {
		var exception = $exception;
		if ($asm02.MS.Internal.Error.IsCriticalException(exception)) {
			throw $exception;
		}
		var text = this.DynamicConverter.toString();
		var text2 = value ? value.toString() : "null";
		var text3 = value ? JSIL.GetType(value).toString() : "null";
		$asm02.MS.Internal.Trace.WriteLine(System.String.Format(System.Globalization.CultureInfo.CurrentCulture, $asm02.System.Windows.Resx.GetString$2("BindingExpression_FailedConversion"), [text, text2, text3, this.GetExpressionTraceString(), $asm02.MS.Internal.InternalUtils.GetExceptionString(exception)]));
		value = this.GetConvertedFallbackOrDefaultValue(this.TargetDO, this._targetProperty);
	}
	return value;
};
System.Windows.Data.BindingExpression.prototype.ApplyStringFormat = function (value, culture) {
	if (!System.String.IsNullOrEmpty(this._binding.StringFormat)) {
		var cultureInfo = culture;
		if (cultureInfo === null) {
			cultureInfo = this.CalculateCulture();
		}
		try {
			if (this._binding.StringFormat.Contains("{")) {
				value = System.String.Format(cultureInfo, this._binding.StringFormat, [value]);
			} else {
				value = System.String.Format(cultureInfo, ("{0:" + this._binding.StringFormat + "}"), [value]);
			}
		} catch ($exception) {
			if (JSIL.CheckType($exception, System.FormatException)) {
				var arg_89_0 = $exception;
				$asm02.MS.Internal.Trace.WriteLine(System.String.Format(System.Globalization.CultureInfo.CurrentCulture, $asm02.System.Windows.Resx.GetString$2("BindingExpression_StringFormatFailure"), [this._binding.StringFormat, value, this.GetExpressionTraceString(), $asm02.MS.Internal.InternalUtils.GetExceptionString(arg_89_0)]));
				value = this.GetConvertedFallbackOrDefaultValue(this.TargetDO, this._targetProperty);
			} else {
				throw $exception;
			}
		}
	}
	return value;
};
System.Windows.Data.BindingExpression.prototype.get_DynamicConverter = function () {
	if (this._dynamicConverter === null) {
		this._dynamicConverter = new $asm02.MS.Internal.Data.DynamicValueConverter((this._binding.Mode === System.Windows.Data.BindingMode.TwoWay));
	}
	return this._dynamicConverter;
};
System.Windows.Data.BindingExpression.prototype.CalculateCulture = function () {
	var cultureInfo = this._binding.ConverterCulture;
	if (!(cultureInfo || 
			(this.TargetFE === null) || 
			!System.Windows.Markup.XmlLanguage.op_Inequality(this.TargetFE.Language, null) || (this.TargetFE.Language.IetfLanguageTag === null))) {
		cultureInfo = JSIL.New(System.Globalization.CultureInfo, "_ctor$0", [this.TargetFE.Language.IetfLanguageTag]);
	}
	return cultureInfo;
};
System.Windows.Data.BindingExpression.prototype.GetConvertedFallbackOrDefaultValue = function (d, dp) {
	if (this._binding.FallbackValue !== null) {
		return this.ConvertedFallbackValue;
	}
	return dp.GetDefaultValue(d);
};
System.Windows.Data.BindingExpression.prototype.GetDataContext = function (targetFE) {
	if (targetFE === null) {
		return null;
	}
	if ((this._targetProperty !== System.Windows.FrameworkElement.DataContextProperty) && (this._targetProperty !== System.Windows.Controls.ContentPresenter.ContentProperty)) {
		return targetFE.DataContext;
	}
	var frameworkElement = JSIL.TryCast(targetFE.Parent, System.Windows.FrameworkElement);
	if (frameworkElement !== null) {
		return frameworkElement.DataContext;
	}
	var frameworkElement2 = JSIL.TryCast(System.Windows.Media.VisualTreeHelper.GetParent(targetFE), System.Windows.FrameworkElement);
	if (frameworkElement2 !== null) {
		return frameworkElement2.DataContext;
	}
	return null;
};
System.Windows.Data.BindingExpression.prototype.InheritanceContextChanged = function (sender, e) {
	if (this.TargetDO === null) {
		return;
	}
	var mentor = this.TargetDO.GetMentor();
	if (!((this._mentor === mentor) || ((this._mentor !== null) && 
				mentor))) {
		this.DetachFromMentor(this._mentor);
		this._mentor = mentor;
		this.AttachToMentor(this._mentor);
		this.SourceAcquired();
	}
	var flag = (!(this._binding.Source || 
			this._binding.ElementName) && 
		(this._binding.RelativeSource === null));
	if (!((this._mentor === null) || flag)) {
		this.TargetDO.remove_InheritanceContextChanged(JSIL.Delegate.New("System.EventHandler", this, System.Windows.Data.BindingExpression.prototype.InheritanceContextChanged));
	}
};
System.Windows.Data.BindingExpression.prototype.GetSourceElement = function () {
	if (this.TargetFE !== null) {
		return this.TargetFE.FindNameInPage(this._binding.ElementName, false);
	}
	if (this._mentor !== null) {
		var userControl = JSIL.TryCast(this._mentor, System.Windows.Controls.UserControl);
		if (userControl !== null) {
			var enumerator = userControl.Resources.Values.IEnumerable_GetEnumerator();
			try {
			__loop0__: 
				while (enumerator.IEnumerator_MoveNext()) {
					var current = enumerator.IEnumerator_Current;
					if (current === this.TargetDO) {
						return this._mentor.FindNameInPage(this._binding.ElementName, true);
					}
				}
			} finally {
				var disposable = JSIL.TryCast(enumerator, System.IDisposable);
				if (disposable !== null) {
					disposable.IDisposable_Dispose();
				}
			}
		}
		return this._mentor.FindNameInPage(this._binding.ElementName, false);
	}
	return null;
};
System.Windows.Data.BindingExpression.prototype.OnAttach = function (d, dp) {
	this.TargetDO = d;
	this._targetProperty = dp;
	if (JSIL.TryCast(this._targetProperty, $asm02.System.Windows.CoreDependencyProperty) !== null) {
		System.Windows.DependencyProperty.RememberRegisteredCoreProperty(JSIL.Cast(this._targetProperty, $asm02.System.Windows.CoreDependencyProperty));
	}
	if (!((this.TargetFE === null) || (dp !== System.Windows.FrameworkElement.DataContextProperty))) {
		this.TargetFE.IsDataContextBound = true;
	}
	var frameworkElement = this.TargetFE;
	if (this._binding.Source !== null) {
		this.SourceForBinding = this._binding.Source;
	} else if (!((this._binding.RelativeSource === null) || (this._binding.RelativeSource.Mode !== System.Windows.Data.RelativeSourceMode.Self))) {
		this.SourceForBinding = this.TargetDO;
	} else {
		if (frameworkElement === null) {
			if (this._mentor === null) {
				this._mentor = this.TargetDO.GetMentor();
			}
			frameworkElement = this._mentor;
			this.TargetDO.add_InheritanceContextChanged(JSIL.Delegate.New("System.EventHandler", this, System.Windows.Data.BindingExpression.prototype.InheritanceContextChanged));
		}
		this.AttachToMentor(frameworkElement);
	}
	if (!(!this.CanSetValue || JSIL.Cast(this._binding.UpdateSourceTrigger, System.Boolean))) {
		this.TargetDO.add_DPChanged(JSIL.Delegate.New("System.Windows.DPChangedEventHandler", this, System.Windows.Data.BindingExpression.prototype.TargetPropertyChanged));
		if (this.TargetFE !== null) {
			if (this._targetProperty.IsCoreProperty) {
				this.TargetFE.add_CorePropertyChanged(JSIL.Delegate.New("MS.Internal.CorePropertyChangedEventHandler", this, System.Windows.Data.BindingExpression.prototype.TargetCorePropertyChanged));
			}
			if (!(!((JSIL.TryCast(this.TargetFE, System.Windows.Controls.TextBox) !== null) && 
						(this._targetProperty === System.Windows.Controls.TextBox.TextProperty)) && ((JSIL.TryCast(this.TargetFE, System.Windows.Controls.PasswordBox) === null) || 
						(this._targetProperty !== System.Windows.Controls.PasswordBox.PasswordProperty)))) {
				this._listeningToLostFocus = true;
				this.TargetFE.add_LostFocus(JSIL.Delegate.New("System.Windows.RoutedEventHandler", this, System.Windows.Data.BindingExpression.prototype.TargetLostFocus));
			}
		}
	}
	this.ConnectToSource();
};
System.Windows.Data.BindingExpression.prototype.AttachToMentor = function (mentor) {
	if (mentor === null) {
		this.SourceForBinding = null;
		return;
	}
	if (this._binding.RelativeSource !== null) {
		this.SourceForBinding = mentor.TemplatedParent;
		return;
	}
	if (this._binding.ElementName !== null) {
		this.SourceForBinding = this.GetSourceElement();
		if (!(this.SourceForBinding || mentor.IsInLiveTree)) {
			mentor.add_Loaded(JSIL.Delegate.New("System.Windows.RoutedEventHandler", this, System.Windows.Data.BindingExpression.prototype.TargetLoaded));
			this.SourceForBinding = null;
			return;
		}
	} else {
		if (this.TargetFE !== null) {
			this.TargetFE.add_DataContextChanged(JSIL.Delegate.New("System.Windows.DataContextChangedEventHandler", this, System.Windows.Data.BindingExpression.prototype.DataContextChanged));
		} else {
			$asm02.System.Windows.WeakDataContextChangedListener.CreateIfNecessary(mentor, this);
		}
		this.SourceForBinding = this.GetDataContext(mentor);
	}
};
System.Windows.Data.BindingExpression.prototype.DetachFromMentor = function (mentor) {
	if (mentor !== null) {
		mentor.remove_Loaded(JSIL.Delegate.New("System.Windows.RoutedEventHandler", this, System.Windows.Data.BindingExpression.prototype.TargetLoaded));
		if (this._dataContextChangedListener !== null) {
			this._dataContextChangedListener.Disconnect();
			this._dataContextChangedListener = null;
			return;
		}
		mentor.remove_DataContextChanged(JSIL.Delegate.New("System.Windows.DataContextChangedEventHandler", this, System.Windows.Data.BindingExpression.prototype.DataContextChanged));
	}
};
System.Windows.Data.BindingExpression.prototype.OnDetach = function () {
	this.DisconnectFromSource();
	if (!((this.TargetFE === null) || (this._targetProperty !== System.Windows.FrameworkElement.DataContextProperty))) {
		this.TargetFE.IsDataContextBound = false;
	}
	this.DetachFromMentor(this.TargetElement);
	if (!(!this.CanSetValue || JSIL.Cast(this._binding.UpdateSourceTrigger, System.Boolean))) {
		this.TargetDO.remove_DPChanged(JSIL.Delegate.New("System.Windows.DPChangedEventHandler", this, System.Windows.Data.BindingExpression.prototype.TargetPropertyChanged));
		if (this.TargetFE !== null) {
			if (!((this.TargetFE === null) || !this._targetProperty.IsCoreProperty)) {
				this.TargetFE.remove_CorePropertyChanged(JSIL.Delegate.New("MS.Internal.CorePropertyChangedEventHandler", this, System.Windows.Data.BindingExpression.prototype.TargetCorePropertyChanged));
			}
			if (this._listeningToLostFocus) {
				this.TargetFE.remove_LostFocus(JSIL.Delegate.New("System.Windows.RoutedEventHandler", this, System.Windows.Data.BindingExpression.prototype.TargetLostFocus));
				this._listeningToLostFocus = false;
			}
		}
	}
	this.RemoveErrorFromTarget(this._currentValidationError);
	this.ResetNotifyDataErrorInfo$0();
	this._lastSourceUpdateThrewException = false;
	this.TargetDO.remove_InheritanceContextChanged(JSIL.Delegate.New("System.EventHandler", this, System.Windows.Data.BindingExpression.prototype.InheritanceContextChanged));
	this.TargetDO = null;
	this._targetProperty = null;
};
System.Windows.Data.BindingExpression.prototype.get_ListenToChanges = function () {
	return (this._binding.Mode !== System.Windows.Data.BindingMode.OneTime);
};
System.Windows.Data.BindingExpression.prototype.ConnectToSource = function () {
	this._binding._isSealed = true;
	this._listener = this._binding.Path.GetListener(this.EffectiveSource, this.ListenToChanges, this);
	if (this.ListenToChanges) {
		this._listener.add_PropertyPathChanged(JSIL.Delegate.New("System.Windows.PropertyPathStepChangedHandler", this, System.Windows.Data.BindingExpression.prototype.SourcePropertyChanged));
	}
};
System.Windows.Data.BindingExpression.prototype.get_SourceForBinding = function () {
	return this._source;
};
System.Windows.Data.BindingExpression.prototype.set_SourceForBinding = function (value) {
	this.EffectiveSource = value;
	if (!this._binding.BindsDirectlyToSource) {
		var collectionViewSource = JSIL.TryCast(this._source, System.Windows.Data.CollectionViewSource);
		var collectionViewSource2 = JSIL.TryCast(value, System.Windows.Data.CollectionViewSource);
		if (collectionViewSource2 !== null) {
			this.EffectiveSource = collectionViewSource2.View;
		}
		if (collectionViewSource !== null) {
			if (collectionViewSource2 !== null) {
				this._cvsViewListener.ReConnect(collectionViewSource2);
			} else {
				this._cvsViewListener.Disconnect();
				this._cvsViewListener.remove_PropertyPathChanged(JSIL.Delegate.New("System.Windows.PropertyPathStepChangedHandler", this, System.Windows.Data.BindingExpression.prototype.SourcePropertyChanged));
				this._cvsViewListener = null;
			}
		} else if (collectionViewSource2 !== null) {
			this._cvsViewListener = System.Windows.Data.BindingExpression.ViewPropertyPath.GetListener(value, true, this);
			this._cvsViewListener.add_PropertyPathChanged(JSIL.Delegate.New("System.Windows.PropertyPathStepChangedHandler", this, System.Windows.Data.BindingExpression.prototype.CollectionViewSourceViewChanged));
		}
	}
	if (value !== null) {
		this._binding._isSealedSL2only = true;
	}
	this._source = value;
};
System.Windows.Data.BindingExpression.prototype.get_EffectiveSource = function () {
	return this.EffectiveSource$value;
};
System.Windows.Data.BindingExpression.prototype.set_EffectiveSource = function (value) {
	this.EffectiveSource$value = value;
};
System.Windows.Data.BindingExpression.prototype.DisconnectFromSource = function () {
	if (this._listener !== null) {
		this._listener.Disconnect();
		if (this.ListenToChanges) {
			this._listener.remove_PropertyPathChanged(JSIL.Delegate.New("System.Windows.PropertyPathStepChangedHandler", this, System.Windows.Data.BindingExpression.prototype.SourcePropertyChanged));
		}
		this._listener = null;
	}
	if (this._cvsViewListener !== null) {
		this._cvsViewListener.Disconnect();
		this._cvsViewListener.remove_PropertyPathChanged(JSIL.Delegate.New("System.Windows.PropertyPathStepChangedHandler", this, System.Windows.Data.BindingExpression.prototype.SourcePropertyChanged));
		this._cvsViewListener = null;
	}
};
System.Windows.Data.BindingExpression.prototype.SourcePropertyChanged = function (sender, args) {
	this.TraceDatabindingEvent(MS.Internal.TracingServices.TraceType.Start);
	try {
		this.UpdateNotifyDataErrorInfos();
		this.SendDataToTarget();
	} finally {
		this.TraceDatabindingEvent(MS.Internal.TracingServices.TraceType.End);
	}
};
System.Windows.Data.BindingExpression.prototype.TraceDatabindingEvent = function (traceType) {
	$asm02.MS.Internal.TracingServices.TraceEventVerbose(
		$asm02.MS.Internal.TracingServices.TraceMarkerType.Databinding, 
		null, 
		traceType, 
		$asm02.MS.Internal.TracingServices.TraceLevel.Verbose, 
		2
	);
};
System.Windows.Data.BindingExpression.prototype.CollectionViewSourceViewChanged = function (sender, args) {
	var collectionViewSource = JSIL.TryCast(this.SourceForBinding, System.Windows.Data.CollectionViewSource);
	this.EffectiveSource = collectionViewSource.View;
	this._listener.ReConnect(this.EffectiveSource);
	this.SendDataToTarget();
};
System.Windows.Data.BindingExpression.prototype.SendDataToTarget = function () {
	var validationError = null;
	if (!(this._updateState || !this._binding.ValidatesOnDataErrors)) {
		var dataErrorInfoMessage = this.GetDataErrorInfoMessage$0();
		if (!System.String.IsNullOrEmpty(dataErrorInfoMessage)) {
			validationError = JSIL.New(System.Windows.Controls.ValidationError, "_ctor$1", [dataErrorInfoMessage]);
		}
	}
	if (validationError === null) {
		this.RemoveErrorFromTarget(this._currentValidationError);
		this.AddErrorNotificationToQueue(System.Windows.Controls.ValidationErrorEventAction.Removed, this._currentValidationError);
		this.RaiseErrorNotifications();
		this._currentValidationError = null;
	}
	var updateState = this._updateState;
	this._updateState = System.Windows.Data.BindingExpression.UpdateState.UpdatingTarget;
	try {
		this.RefreshExpression();
	} finally {
		this._updateState = updateState;
	}
	if (validationError !== null) {
		this.AddErrorNotificationToQueue(System.Windows.Controls.ValidationErrorEventAction.Removed, this._currentValidationError);
		this.AddErrorNotificationToQueue(System.Windows.Controls.ValidationErrorEventAction.Added, validationError);
	}
	if (!((updateState === System.Windows.Data.BindingExpression.UpdateState.UpdatingSource) || !this._lastSourceUpdateThrewException)) {
		this._lastSourceUpdateThrewException = false;
		this.AddNotifyDataErrorInfosToQueue$0(System.Windows.Controls.ValidationErrorEventAction.Added);
		this.AddNotifyDataErrorInfosToTarget$0();
	}
	if (validationError !== null) {
		this.AddErrorToTarget(validationError, false);
		this.RemoveErrorFromTarget(this._currentValidationError);
	}
	this.RaiseErrorNotifications();
};
System.Windows.Data.BindingExpression.prototype.RefreshExpression = function () {
	return this.TargetDO.RefreshExpression(this._targetProperty);
};
System.Windows.Data.BindingExpression.prototype.IsPropertyChangeRelevant = function (dp) {
	return ((this._targetProperty === dp) && 
		(this._listener !== null) && this._listener.FullPathExists);
};
System.Windows.Data.BindingExpression.prototype.IsTargetFocussed = function () {
	return (System.Windows.Input.FocusManager.GetFocusedElement() === this.TargetDO);
};
System.Windows.Data.BindingExpression.prototype.TargetPropertyChanged = function (sender, dp) {
	if (!this.IsPropertyChangeRelevant(dp)) {
		return;
	}
	if (this._updateState !== 0) {
		return;
	}
	this.UpdateValueIfNecessary();
};
System.Windows.Data.BindingExpression.prototype.TargetCorePropertyChanged = function (sender, e) {
	var dp = System.Windows.DependencyProperty.QueryRegisteredCoreProperty$0(e.Property);
	if (!this.IsPropertyChangeRelevant(dp)) {
		return;
	}
	this.UpdateValueIfNecessary();
};
System.Windows.Data.BindingExpression.prototype.UpdateValueIfNecessary = function () {
	if (this._listeningToLostFocus) {
		this._targetPropertyState = System.Windows.Data.BindingExpression.TargetPropertyState.Dirty;
		if (this.IsTargetFocussed()) {
			return;
		}
	}
	this.UpdateValue();
};
System.Windows.Data.BindingExpression.prototype.TargetLostFocus = function (sender, e) {
	if (this._targetPropertyState === System.Windows.Data.BindingExpression.TargetPropertyState.Dirty) {
		this.UpdateValue();
	}
};
System.Windows.Data.BindingExpression.prototype.UpdateValue = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				var exception = null;
				var text = null;
				var cultureInfo = null;
				var useDefaultString = false;
				if (!((this._listener !== null) && this._listener.FullPathExists)) {
					return;
				}
				this.TraceDatabindingEvent(MS.Internal.TracingServices.TraceType.Start);
				this._updateState = System.Windows.Data.BindingExpression.UpdateState.UpdatingSource;
				try {
					var obj = this.TargetDO.GetValue(this._targetProperty);
					if (this._binding.TargetNullValue !== null) {
						var objB = null;
						try {
							var type = (JSIL.GetType(this._binding.TargetNullValue));
							if (!((type === this._targetProperty._propertyType) || this._targetProperty._propertyType.IsAssignableFrom(type))) {
								if (cultureInfo === null) {
									cultureInfo = this.CalculateCulture();
								}
								objB = this.DynamicConverter.Convert(this._binding.TargetNullValue, this._targetProperty._propertyType, null, cultureInfo);
							} else {
								objB = this._binding.TargetNullValue;
							}
							if (System.Object.Equals(obj, objB)) {
								obj = null;
							}
						} catch ($exception) {
							var arg_D8_0 = $exception;
							var text2 = this.DynamicConverter.toString();
							var text3 = this._binding.TargetNullValue ? this._binding.TargetNullValue.toString() : "null";
							var text4 = this._binding.TargetNullValue ? JSIL.GetType(this._binding.TargetNullValue).toString() : "null";
							$asm02.MS.Internal.Trace.WriteLine(System.String.Format(System.Globalization.CultureInfo.CurrentCulture, $asm02.System.Windows.Resx.GetString$2("BindingExpression_FailedConvertTargetNullValue"), [text2, text3, text4, this.GetExpressionTraceString(), $asm02.MS.Internal.InternalUtils.GetExceptionString(arg_D8_0)]));
						}
					}
					if (this._binding.Converter !== null) {
						if (cultureInfo === null) {
							cultureInfo = this.CalculateCulture();
						}
						obj = this._binding.Converter.IValueConverter_ConvertBack(obj, this._listener.LeafType, this._binding.ConverterParameter, cultureInfo);
						if (obj === System.Windows.DependencyProperty.UnsetValue) {
							return;
						}
					}
					if (!((obj === null) || (JSIL.TryCast(obj, System.String) === null))) {
						if (cultureInfo === null) {
							cultureInfo = this.CalculateCulture();
						}
						var obj2 = System.Windows.Data.BindingExpression.TryParse(obj, this._listener.LeafType, cultureInfo);
						if (obj2 !== System.Windows.DependencyProperty.UnsetValue) {
							obj = obj2;
						}
					}
					try {
						if (!System.Windows.Expression.prototype.IsValidValueForUpdate.call(this, obj, this._listener.LeafType)) {
							if (cultureInfo === null) {
								cultureInfo = this.CalculateCulture();
							}
							useDefaultString = true;
							obj = this.DynamicConverter.Convert(obj, this._listener.LeafType, null, cultureInfo);
							useDefaultString = false;
						}
						this._listener.LeafValue = obj;
					} catch ($exception) {
						if (JSIL.CheckType($exception, System.Reflection.TargetInvocationException)) {
							var targetInvocationException = $exception;
							exception = targetInvocationException.InnerException;
							$asm02.MS.Internal.Trace.WriteLine(System.String.Format(System.Globalization.CultureInfo.CurrentCulture, $asm02.System.Windows.Resx.GetString$2("BindingExpression_SetterFailure"), [this.GetExpressionTraceString(), $asm02.MS.Internal.InternalUtils.GetExceptionString(targetInvocationException)]));
						} else {
							var exception2 = $exception;
							if ($asm02.MS.Internal.Error.IsCriticalException(exception2)) {
								throw $exception;
							}
							var text5 = obj ? obj.toString() : "null";
							var text6 = obj ? JSIL.GetType(obj).toString() : "null";
							$asm02.MS.Internal.Trace.WriteLine(System.String.Format(System.Globalization.CultureInfo.CurrentCulture, $asm02.System.Windows.Resx.GetString$2("BindingExpression_FailedConvertBack"), [text5, text6, this.GetExpressionTraceString(), $asm02.MS.Internal.InternalUtils.GetExceptionString(exception2)]));
							exception = exception2;
						}
					}
				} finally {
					if (!(!this._binding.ValidatesOnDataErrors || ((exception !== null) && 
								this._binding.ValidatesOnExceptions))) {
						text = this.GetDataErrorInfoMessage$0();
					}
					this._updateState = System.Windows.Data.BindingExpression.UpdateState.None;
					this._targetPropertyState = System.Windows.Data.BindingExpression.TargetPropertyState.Clean;
					this.TraceDatabindingEvent(MS.Internal.TracingServices.TraceType.End);
				}
				var error = null;
				if (!((exception === null) || !this._binding.ValidatesOnExceptions)) {
					error = JSIL.New(System.Windows.Controls.ValidationError, "_ctor$0", [exception, useDefaultString]);
					__label0__ = "IL_392";
					continue __step0__;
				}
				if (!System.String.IsNullOrEmpty(text)) {
					error = JSIL.New(System.Windows.Controls.ValidationError, "_ctor$1", [text]);
				}
				__label0__ = "IL_392";
				continue __step0__;
				break;
			case "IL_392":
				var flag = (exception !== null);
				if (!(!flag || this._lastSourceUpdateThrewException)) {
					this.AddNotifyDataErrorInfosToQueue$0(System.Windows.Controls.ValidationErrorEventAction.Removed);
				}
				this.AddErrorNotificationToQueue(System.Windows.Controls.ValidationErrorEventAction.Removed, this._currentValidationError);
				if (!(flag || !this._lastSourceUpdateThrewException)) {
					this.AddNotifyDataErrorInfosToQueue$0(System.Windows.Controls.ValidationErrorEventAction.Added);
				}
				this.AddErrorNotificationToQueue(System.Windows.Controls.ValidationErrorEventAction.Added, error);
				if (!(!this._lastSourceUpdateThrewException || flag)) {
					this.AddNotifyDataErrorInfosToTarget$0();
				}
				this.AddErrorToTarget(error, false);
				this.RemoveErrorFromTarget(this._currentValidationError);
				if (!(this._lastSourceUpdateThrewException || !flag)) {
					this.RemoveNotifyDataErrorInfosFromTarget$0();
				}
				this._lastSourceUpdateThrewException = flag;
				this.RaiseErrorNotifications();
				break __step0__;
		}
	}
};
System.Windows.Data.BindingExpression.TryParse = function (value, targetType, formatInfo) {
	var type = targetType;
	var underlyingType = System.Nullable.GetUnderlyingType(targetType);
	if (underlyingType !== null) {
		type = underlyingType;
	}
	try {
		var method = type.GetMethod$1(
			"Parse", 
			(System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static), 
			null, 
			JSIL.Array.New(System.Type, [System.Windows.Data.BindingExpression.stringType, System.Globalization.NumberStyles, System.IFormatProvider]), 
			null
		);
		if (method !== null) {
			var result = method.Invoke$1(null, [JSIL.Cast(value, System.String), (System.Globalization.NumberStyles.AllowCurrencySymbol | System.Globalization.NumberStyles.AllowDecimalPoint | System.Globalization.NumberStyles.AllowExponent | System.Globalization.NumberStyles.AllowLeadingSign | System.Globalization.NumberStyles.AllowLeadingWhite | System.Globalization.NumberStyles.AllowParentheses | System.Globalization.NumberStyles.AllowThousands | System.Globalization.NumberStyles.AllowTrailingSign | System.Globalization.NumberStyles.AllowTrailingWhite | System.Globalization.NumberStyles.Any | System.Globalization.NumberStyles.Currency | System.Globalization.NumberStyles.Float | System.Globalization.NumberStyles.Integer | System.Globalization.NumberStyles.Number), formatInfo]);
			return result;
		}
		method = type.GetMethod$1(
			"Parse", 
			(System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static), 
			null, 
			JSIL.Array.New(System.Type, [System.Windows.Data.BindingExpression.stringType, System.IFormatProvider]), 
			null
		);
		if (method !== null) {
			result = method.Invoke$1(null, [JSIL.Cast(value, System.String), formatInfo]);
			return result;
		}
		method = type.GetMethod$1(
			"Parse", 
			(System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static), 
			null, 
			JSIL.Array.New(System.Type, [System.Windows.Data.BindingExpression.stringType]), 
			null
		);
		if (method !== null) {
			result = method.Invoke$1(null, [JSIL.Cast(value, System.String)]);
			return result;
		}
	} catch ($exception) {
		result = System.Windows.DependencyProperty.UnsetValue;
		return result;
	}
	return System.Windows.DependencyProperty.UnsetValue;
};
System.Windows.Data.BindingExpression.prototype.AddErrorToTarget = function (error, isNotifyDataErrorInfo) {
	if (this.TargetElement === null) {
		return;
	}
	if (!isNotifyDataErrorInfo) {
		this._currentValidationError = error;
	}
	if (error === null) {
		return;
	}
	System.Windows.Controls.Validation.AddValidationError(this.TargetElement, error);
};
System.Windows.Data.BindingExpression.prototype.RemoveErrorFromTarget = function (error) {
	if (!((this.TargetElement !== null) && error)) {
		return;
	}
	System.Windows.Controls.Validation.RemoveValidationError(this.TargetElement, error);
};
System.Windows.Data.BindingExpression.prototype.GetDataErrorInfoMessage$0 = function () {
	if (!((this._listener === null) || !this._listener.FullPathExists)) {
		var dataErrorInfo = JSIL.TryCast(this._listener.LeafItem, System.ComponentModel.IDataErrorInfo);
		if (dataErrorInfo !== null) {
			var leafPropertyName = this._listener.LeafPropertyName;
			if (!System.String.IsNullOrEmpty(leafPropertyName)) {
				return this.GetDataErrorInfoMessage$1(leafPropertyName, dataErrorInfo);
			}
		}
	}
	return null;
};
System.Windows.Data.BindingExpression.prototype.GetDataErrorInfoMessage$1 = function (propertyName, dataErrorInfo) {
	try {
		return dataErrorInfo.IDataErrorInfo_get_Item(propertyName);
	} catch ($exception) {
		var e = $exception;
		if ($asm02.MS.Internal.Error.IsCriticalException(e)) {
			throw $exception;
		}
	}
	return null;
};
System.Windows.Data.BindingExpression.prototype.GetNotifyDataErrorInfoInstances = function (/* ref */ propertyName, /* ref */ notifyDataErrorInfo, /* ref */ notifyChildDataErrorInfo) {
	propertyName.value = null;
	notifyDataErrorInfo.value = null;
	notifyChildDataErrorInfo.value = null;
	if (!((this._listener === null) || !this._listener.FullPathExists)) {
		notifyDataErrorInfo.value = JSIL.TryCast(this._listener.LeafItem, System.ComponentModel.INotifyDataErrorInfo);
		if (notifyDataErrorInfo.value !== null) {
			propertyName.value = this._listener.LeafPropertyName;
		}
		if (this._listener.LeafProperty !== null) {
			notifyChildDataErrorInfo.value = JSIL.TryCast(this._listener.LeafValue, System.ComponentModel.INotifyDataErrorInfo);
		}
	}
};
System.Windows.Data.BindingExpression.prototype.ConsumeNotifyDataErrorInfo$0 = function () {
	var propertyName = new JSIL.Variable(null);
	this.GetNotifyDataErrorInfoInstances(/* ref */ propertyName, /* ref */ new JSIL.MemberReference(this, "_currentNotifyDataErrorInfo"), /* ref */ new JSIL.MemberReference(this, "_currentNotifyChildDataErrorInfo"));
	this.ConsumeNotifyDataErrorInfo$1(propertyName.value, this._currentNotifyDataErrorInfo, this._currentNotifyChildDataErrorInfo);
};
System.Windows.Data.BindingExpression.prototype.ConsumeNotifyDataErrorInfo$1 = function (propertyName, notifyDataErrorInfo, notifyChildDataErrorInfo) {
	if (!((notifyDataErrorInfo === null) || (this._binding.Mode === System.Windows.Data.BindingMode.OneTime))) {
		this._errorsChangedListener = new $asm02.System.Windows.Data.WeakErrorsChangedListener(notifyDataErrorInfo, false, this);
	}
	if (!((notifyChildDataErrorInfo === null) || (this._binding.Mode === System.Windows.Data.BindingMode.OneTime))) {
		this._childErrorsChangedListener = new $asm02.System.Windows.Data.WeakErrorsChangedListener(notifyChildDataErrorInfo, true, this);
	}
	if (notifyDataErrorInfo !== null) {
		this.NotifyNewDataErrorInfos$0(propertyName, notifyDataErrorInfo, false);
	}
	if (notifyChildDataErrorInfo !== null) {
		this.NotifyNewDataErrorInfos$0(System.String.Empty, notifyChildDataErrorInfo, true);
	}
};
System.Windows.Data.BindingExpression.prototype.UpdateNotifyDataErrorInfos = function () {
	var notifyDataErrorInfo = new JSIL.Variable(null), notifyDataErrorInfo2 = new JSIL.Variable(null);
	if (this._binding.ValidatesOnNotifyDataErrors) {
		var propertyName = new JSIL.Variable(null);
		this.GetNotifyDataErrorInfoInstances(/* ref */ propertyName, /* ref */ notifyDataErrorInfo, /* ref */ notifyDataErrorInfo2);
		var flag = (notifyDataErrorInfo.value !== this._currentNotifyDataErrorInfo);
		var flag2 = (notifyDataErrorInfo2.value !== this._currentNotifyChildDataErrorInfo);
		if (!(!flag && !flag2)) {
			this.ResetNotifyDataErrorInfo$1(flag, flag2);
			this._currentNotifyDataErrorInfo = notifyDataErrorInfo.value;
			this._currentNotifyChildDataErrorInfo = notifyDataErrorInfo2.value;
			this.ConsumeNotifyDataErrorInfo$1(propertyName.value, flag ? this._currentNotifyDataErrorInfo : null, flag2 ? this._currentNotifyChildDataErrorInfo : null);
		}
	}
};
System.Windows.Data.BindingExpression.prototype.NotifyChildDataErrorInfo_ErrorsChanged = function (sender, e) {
	if (System.String.IsNullOrEmpty(e.PropertyName)) {
		this.NotifyOldDataErrorInfos$0(true);
		if (this._listener !== null) {
			var notifyDataErrorInfo = JSIL.TryCast(this._listener.LeafValue, System.ComponentModel.INotifyDataErrorInfo);
			if (notifyDataErrorInfo !== null) {
				this.NotifyNewDataErrorInfos$0(System.String.Empty, notifyDataErrorInfo, true);
			}
		}
	}
};
System.Windows.Data.BindingExpression.prototype.NotifyDataErrorInfo_ErrorsChanged = function (sender, e) {
	if (!((this._listener === null) || !this._listener.FullPathExists)) {
		var text = System.String.Empty;
		var notifyDataErrorInfo = JSIL.TryCast(this._listener.LeafItem, System.ComponentModel.INotifyDataErrorInfo);
		if (notifyDataErrorInfo !== null) {
			text = this._listener.LeafPropertyName;
		}
		if (!((System.String.CompareOrdinal$0(text, e.PropertyName) !== 0) && (e.PropertyName || 
					!(text == System.String.Empty)))) {
			this.NotifyOldDataErrorInfos$0(false);
			this.NotifyNewDataErrorInfos$0(text, notifyDataErrorInfo, false);
		}
	}
};
System.Windows.Data.BindingExpression.prototype.NotifyNewDataErrorInfos$0 = function (propertyName, notifyDataErrorInfo, isNotifyChildDataErrorInfo) {
	var errors = null;
	try {
		errors = notifyDataErrorInfo.INotifyDataErrorInfo_GetErrors(propertyName);
	} catch ($exception) {
		var e = $exception;
		if ($asm02.MS.Internal.Error.IsCriticalException(e)) {
			throw $exception;
		}
	}
	this.NotifyNewDataErrorInfos$1(this.RegisterErrorCollection(propertyName, errors, isNotifyChildDataErrorInfo));
};
System.Windows.Data.BindingExpression.prototype.NotifyNewDataErrorInfos$1 = function (validationErrors) {
	if (!((validationErrors !== null) && !this._lastSourceUpdateThrewException)) {
		return;
	}
	var enumerator = validationErrors.GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current;
			this.AddErrorNotificationToQueue(System.Windows.Controls.ValidationErrorEventAction.Added, current);
			this.AddErrorToTarget(current, true);
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	this.RaiseErrorNotifications();
};
System.Windows.Data.BindingExpression.prototype.NotifyOldDataErrorInfos$0 = function (isNotifyChildDataErrorInfo) {
	if (isNotifyChildDataErrorInfo) {
		var collection = this._currentNotifyChildValidationErrors;
		this._currentNotifyChildValidationErrors = null;
	} else {
		collection = this._currentNotifyValidationErrors;
		this._currentNotifyValidationErrors = null;
	}
	if (collection !== null) {
		this.NotifyOldDataErrorInfos$1(collection);
	}
};
System.Windows.Data.BindingExpression.prototype.NotifyOldDataErrorInfos$1 = function (validationErrors) {
	if (!((validationErrors !== null) && !this._lastSourceUpdateThrewException)) {
		return;
	}
	var enumerator = validationErrors.GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current;
			this.AddErrorNotificationToQueue(System.Windows.Controls.ValidationErrorEventAction.Removed, current);
			this.RemoveErrorFromTarget(current);
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	this.RaiseErrorNotifications();
};
System.Windows.Data.BindingExpression.prototype.AddNotifyDataErrorInfosToQueue$0 = function (action) {
	this.AddNotifyDataErrorInfosToQueue$1(action, this._currentNotifyChildValidationErrors);
	this.AddNotifyDataErrorInfosToQueue$1(action, this._currentNotifyValidationErrors);
};
System.Windows.Data.BindingExpression.prototype.AddNotifyDataErrorInfosToQueue$1 = function (action, validationErrors) {
	if (validationErrors === null) {
		return;
	}
	var enumerator = validationErrors.GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current;
			this.AddErrorNotificationToQueue(action, current);
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
};
System.Windows.Data.BindingExpression.prototype.AddNotifyDataErrorInfosToTarget$0 = function () {
	this.AddNotifyDataErrorInfosToTarget$1(this._currentNotifyChildValidationErrors);
	this.AddNotifyDataErrorInfosToTarget$1(this._currentNotifyValidationErrors);
};
System.Windows.Data.BindingExpression.prototype.AddNotifyDataErrorInfosToTarget$1 = function (validationErrors) {
	if (validationErrors === null) {
		return;
	}
	var enumerator = validationErrors.GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current;
			this.AddErrorToTarget(current, true);
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
};
System.Windows.Data.BindingExpression.prototype.RemoveNotifyDataErrorInfosFromTarget$0 = function () {
	this.RemoveNotifyDataErrorInfosFromTarget$1(this._currentNotifyChildValidationErrors);
	this.RemoveNotifyDataErrorInfosFromTarget$1(this._currentNotifyValidationErrors);
};
System.Windows.Data.BindingExpression.prototype.RemoveNotifyDataErrorInfosFromTarget$1 = function (validationErrors) {
	if (validationErrors === null) {
		return;
	}
	var enumerator = validationErrors.GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current;
			this.RemoveErrorFromTarget(current);
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
};
System.Windows.Data.BindingExpression.prototype.RegisterErrorCollection = function (propertyName, errors, isNotifyChildDataErrorInfo) {
	if (errors === null) {
		return null;
	}
	var collection = JSIL.New(System.Collections.ObjectModel.Collection$b1.Of(System.Windows.Controls.ValidationError), "_ctor$0", []);
	try {
		var enumerator = errors.IEnumerable_GetEnumerator();
		try {
		__loop0__: 
			while (enumerator.IEnumerator_MoveNext()) {
				var current = enumerator.IEnumerator_Current;
				if (current !== null) {
					collection.Add(JSIL.New(System.Windows.Controls.ValidationError, "_ctor$1", [current]));
				}
			}
		} finally {
			var disposable = JSIL.TryCast(enumerator, System.IDisposable);
			if (disposable !== null) {
				disposable.IDisposable_Dispose();
			}
		}
	} catch ($exception) {
		var e = $exception;
		if ($asm02.MS.Internal.Error.IsCriticalException(e)) {
			throw $exception;
		}
	}
	if (isNotifyChildDataErrorInfo) {
		this._currentNotifyChildValidationErrors = collection;
	} else {
		this._currentNotifyValidationErrors = collection;
	}
	return collection;
};
System.Windows.Data.BindingExpression.prototype.AddErrorNotificationToQueue = function (action, error) {
	if (!(this._binding.NotifyOnValidationError && 
			(error !== null) && this.TargetElement)) {
		return;
	}
	var item = new System.Windows.Controls.ValidationErrorEventArgs(action, error);
	if (this._errorNotifications === null) {
		this._errorNotifications = new (System.Collections.Generic.List$b1.Of(System.Windows.Controls.ValidationErrorEventArgs)) ();
	}
	this._errorNotifications.Add(item);
};
System.Windows.Data.BindingExpression.prototype.RaiseErrorNotifications = function () {
	if (!((this._errorNotifications !== null) && this.TargetElement)) {
		return;
	}
	var list = new (System.Collections.Generic.List$b1.Of(System.Windows.Controls.ValidationErrorEventArgs)) (this._errorNotifications);
	this._errorNotifications = null;
	var enumerator = (list.GetEnumerator());
	try {
	__loop0__: 
		while (enumerator.MoveNext()) {
			var current = enumerator.Current;
			if (this.TargetElement !== null) {
				this.TargetElement.RaiseBindingValidationError(current);
			}
		}
	} finally {
		enumerator.IDisposable_Dispose();
	}
};
System.Windows.Data.BindingExpression.prototype.DataContextChanged = function (sender, e) {
	this.IDataContextChangedListener_OnDataContextChanged(sender, e);
};
System.Windows.Data.BindingExpression.prototype.IDataContextChangedListener_OnDataContextChanged = function (sender, e) {
	if (this.TargetDO === null) {
		return;
	}
	var dataContext = this.GetDataContext(this.TargetElement);
	if (dataContext !== this.SourceForBinding) {
		this.ResetNotifyDataErrorInfo$0();
		this._lastSourceUpdateThrewException = false;
		this.SourceForBinding = dataContext;
		this.SourceAcquired();
	}
};
System.Windows.Data.BindingExpression.prototype.IErrorsChangedListener_OnErrorsChanged = function (sender, notifyChild, e) {
	if (notifyChild) {
		this.NotifyChildDataErrorInfo_ErrorsChanged(sender, e);
		return;
	}
	this.NotifyDataErrorInfo_ErrorsChanged(sender, e);
};
System.Windows.Data.BindingExpression.prototype.TargetLoaded = function (o, e) {
	var targetElement = this.TargetElement;
	targetElement.remove_Loaded(JSIL.Delegate.New("System.Windows.RoutedEventHandler", this, System.Windows.Data.BindingExpression.prototype.TargetLoaded));
	this.TargetDO.remove_InheritanceContextChanged(JSIL.Delegate.New("System.EventHandler", this, System.Windows.Data.BindingExpression.prototype.InheritanceContextChanged));
	this.SourceForBinding = this.GetSourceElement();
	if (this.EffectiveSource !== null) {
		this.SourceAcquired();
	}
};
System.Windows.Data.BindingExpression.prototype.SourceAcquired = function () {
	this._listener.ReConnect(this.EffectiveSource);
	if (this._binding.ValidatesOnNotifyDataErrors) {
		this.ConsumeNotifyDataErrorInfo$0();
	}
	this.SendDataToTarget();
};
System.Windows.Data.BindingExpression.prototype.ResetNotifyDataErrorInfo$0 = function () {
	this.ResetNotifyDataErrorInfo$1(true, true);
};
System.Windows.Data.BindingExpression.prototype.ResetNotifyDataErrorInfo$1 = function (resetCurrentNotifyDataErrorInfo, resetCurrentNotifyChildDataErrorInfo) {
	if (resetCurrentNotifyDataErrorInfo & (this._currentNotifyDataErrorInfo !== null)) {
		if (this._errorsChangedListener !== null) {
			this._errorsChangedListener.Disconnect();
			this._errorsChangedListener = null;
		}
		this._currentNotifyDataErrorInfo = null;
	}
	if (!(!resetCurrentNotifyChildDataErrorInfo || (this._currentNotifyChildDataErrorInfo === null))) {
		if (this._childErrorsChangedListener !== null) {
			this._childErrorsChangedListener.Disconnect();
			this._childErrorsChangedListener = null;
		}
		this._currentNotifyChildDataErrorInfo = null;
	}
	if (resetCurrentNotifyDataErrorInfo) {
		this.NotifyOldDataErrorInfos$0(false);
	}
	if (resetCurrentNotifyChildDataErrorInfo) {
		this.NotifyOldDataErrorInfos$0(true);
	}
};
System.Windows.Data.BindingExpression.IsNullableType = function (type) {
	return (type.IsGenericType && (type.GetGenericTypeDefinition() === System.Nullable$b1));
};
System.Windows.Data.BindingExpression.prototype.get_CanSetValue = function () {
	return ((this._binding.Mode === System.Windows.Data.BindingMode.TwoWay) && !this._binding.Path.IsPathToSource);
};
System.Windows.Data.BindingExpression.prototype.get_LeafItem = function () {
	if (this._listener !== null) {
		return this._listener.LeafItem;
	}
	return System.Windows.DependencyProperty.UnsetValue;
};
System.Windows.Data.BindingExpression.prototype.get_IsAssociated = function () {
	return (this.TargetDO !== null);
};
System.Windows.Data.BindingExpression.prototype.get_ConvertedFallbackValue = function () {
	var type = (JSIL.GetType(this._binding.FallbackValue));
	if (!((type === this._targetProperty._propertyType) || this._targetProperty._propertyType.IsAssignableFrom(type))) {
		return this.ConvertValue(this._binding.FallbackValue, this._targetProperty, "BindingExpression_FailedConvertFallbackValue");
	}
	return this._binding.FallbackValue;
};
System.Windows.Data.BindingExpression.prototype.ConvertValue = function (value, dp, failureResource) {
	var culture = this.CalculateCulture();
	try {
		value = this.DynamicConverter.Convert(value, dp._propertyType, null, culture);
	} catch ($exception) {
		var arg_22_0 = $exception;
		var text = this.DynamicConverter.toString();
		var text2 = value ? value.toString() : "null";
		var text3 = value ? JSIL.GetType(value).toString() : "null";
		$asm02.MS.Internal.Trace.WriteLine(System.String.Format(System.Globalization.CultureInfo.CurrentCulture, $asm02.System.Windows.Resx.GetString$2(failureResource), [text, text2, text3, this.GetExpressionTraceString(), $asm02.MS.Internal.InternalUtils.GetExceptionString(arg_22_0)]));
		value = dp.GetDefaultValue(this.TargetDO);
	}
	return value;
};
System.Windows.Data.BindingExpression.get_ViewPropertyPath = function () {
	if (System.Windows.Data.BindingExpression._viewPropertyPath === null) {
		System.Windows.Data.BindingExpression._viewPropertyPath = JSIL.New(System.Windows.PropertyPath, "_ctor$0", ["View", JSIL.Array.New(System.Object, 0)]);
		System.Windows.Data.BindingExpression._viewPropertyPath.ParsePathInternal(false);
	}
	return System.Windows.Data.BindingExpression._viewPropertyPath;
};
System.Windows.Data.BindingExpression.prototype.UpdateSource = function () {
	if (this.TargetDO === null) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
	}
	if (!this.CanSetValue) {
		return;
	}
	this.UpdateValue();
};
System.Windows.Data.BindingExpression.prototype.get_DataItem = function () {
	return this.EffectiveSource;
};
System.Windows.Data.BindingExpression.prototype.get_ParentBinding = function () {
	return this._binding;
};
JSIL.OverloadedMethod(System.Windows.Data.BindingExpression.prototype, "GetDataErrorInfoMessage", [
		["GetDataErrorInfoMessage$0", []], 
		["GetDataErrorInfoMessage$1", [System.String, System.ComponentModel.IDataErrorInfo]]
	]);
JSIL.OverloadedMethod(System.Windows.Data.BindingExpression.prototype, "ConsumeNotifyDataErrorInfo", [
		["ConsumeNotifyDataErrorInfo$0", []], 
		["ConsumeNotifyDataErrorInfo$1", [System.String, System.ComponentModel.INotifyDataErrorInfo, System.ComponentModel.INotifyDataErrorInfo]]
	]);
JSIL.OverloadedMethod(System.Windows.Data.BindingExpression.prototype, "NotifyNewDataErrorInfos", [
		["NotifyNewDataErrorInfos$0", [System.String, System.ComponentModel.INotifyDataErrorInfo, System.Boolean]], 
		["NotifyNewDataErrorInfos$1", [System.Collections.ObjectModel.Collection$b1.Of(System.Windows.Controls.ValidationError)]]
	]);
JSIL.OverloadedMethod(System.Windows.Data.BindingExpression.prototype, "NotifyOldDataErrorInfos", [
		["NotifyOldDataErrorInfos$0", [System.Boolean]], 
		["NotifyOldDataErrorInfos$1", [System.Collections.ObjectModel.Collection$b1.Of(System.Windows.Controls.ValidationError)]]
	]);
JSIL.OverloadedMethod(System.Windows.Data.BindingExpression.prototype, "AddNotifyDataErrorInfosToQueue", [
		["AddNotifyDataErrorInfosToQueue$0", [System.Windows.Controls.ValidationErrorEventAction]], 
		["AddNotifyDataErrorInfosToQueue$1", [System.Windows.Controls.ValidationErrorEventAction, System.Collections.ObjectModel.Collection$b1.Of(System.Windows.Controls.ValidationError)]]
	]);
JSIL.OverloadedMethod(System.Windows.Data.BindingExpression.prototype, "AddNotifyDataErrorInfosToTarget", [
		["AddNotifyDataErrorInfosToTarget$0", []], 
		["AddNotifyDataErrorInfosToTarget$1", [System.Collections.ObjectModel.Collection$b1.Of(System.Windows.Controls.ValidationError)]]
	]);
JSIL.OverloadedMethod(System.Windows.Data.BindingExpression.prototype, "RemoveNotifyDataErrorInfosFromTarget", [
		["RemoveNotifyDataErrorInfosFromTarget$0", []], 
		["RemoveNotifyDataErrorInfosFromTarget$1", [System.Collections.ObjectModel.Collection$b1.Of(System.Windows.Controls.ValidationError)]]
	]);
JSIL.OverloadedMethod(System.Windows.Data.BindingExpression.prototype, "ResetNotifyDataErrorInfo", [
		["ResetNotifyDataErrorInfo$0", []], 
		["ResetNotifyDataErrorInfo$1", [System.Boolean, System.Boolean]]
	]);
JSIL.MakeProperty(System.Windows.Data.BindingExpression.prototype, "TargetFE", 
	System.Windows.Data.BindingExpression.prototype.get_TargetFE, null);
JSIL.MakeProperty(System.Windows.Data.BindingExpression.prototype, "TargetElement", 
	System.Windows.Data.BindingExpression.prototype.get_TargetElement, null);
JSIL.MakeProperty(System.Windows.Data.BindingExpression.prototype, "DynamicConverter", 
	System.Windows.Data.BindingExpression.prototype.get_DynamicConverter, null);
JSIL.MakeProperty(System.Windows.Data.BindingExpression.prototype, "ListenToChanges", 
	System.Windows.Data.BindingExpression.prototype.get_ListenToChanges, null);
JSIL.MakeProperty(System.Windows.Data.BindingExpression.prototype, "SourceForBinding", 
	System.Windows.Data.BindingExpression.prototype.get_SourceForBinding, System.Windows.Data.BindingExpression.prototype.set_SourceForBinding);
JSIL.MakeProperty(System.Windows.Data.BindingExpression.prototype, "EffectiveSource", 
	System.Windows.Data.BindingExpression.prototype.get_EffectiveSource, System.Windows.Data.BindingExpression.prototype.set_EffectiveSource);
JSIL.MakeProperty(System.Windows.Data.BindingExpression.prototype, "CanSetValue", 
	System.Windows.Data.BindingExpression.prototype.get_CanSetValue, null);
JSIL.MakeProperty(System.Windows.Data.BindingExpression.prototype, "LeafItem", 
	System.Windows.Data.BindingExpression.prototype.get_LeafItem, null);
JSIL.MakeProperty(System.Windows.Data.BindingExpression.prototype, "IsAssociated", 
	System.Windows.Data.BindingExpression.prototype.get_IsAssociated, null);
JSIL.MakeProperty(System.Windows.Data.BindingExpression.prototype, "ConvertedFallbackValue", 
	System.Windows.Data.BindingExpression.prototype.get_ConvertedFallbackValue, null);
JSIL.MakeProperty(System.Windows.Data.BindingExpression, "ViewPropertyPath", 
	System.Windows.Data.BindingExpression.get_ViewPropertyPath, null);
JSIL.MakeProperty(System.Windows.Data.BindingExpression.prototype, "DataItem", 
	System.Windows.Data.BindingExpression.prototype.get_DataItem, null);
JSIL.MakeProperty(System.Windows.Data.BindingExpression.prototype, "ParentBinding", 
	System.Windows.Data.BindingExpression.prototype.get_ParentBinding, null);
System.Windows.Data.BindingExpression.prototype._binding = null;
System.Windows.Data.BindingExpression.prototype.TargetDO = null;
System.Windows.Data.BindingExpression.prototype._targetProperty = null;
System.Windows.Data.BindingExpression.prototype._source = null;
System.Windows.Data.BindingExpression.prototype._mentor = null;
System.Windows.Data.BindingExpression.prototype._dataContextChangedListener = null;
System.Windows.Data.BindingExpression.prototype._errorsChangedListener = null;
System.Windows.Data.BindingExpression.prototype._childErrorsChangedListener = null;
System.Windows.Data.BindingExpression.prototype._listener = null;
System.Windows.Data.BindingExpression.prototype._cvsViewListener = null;
System.Windows.Data.BindingExpression.prototype._errorNotifications = null;
System.Windows.Data.BindingExpression.prototype._listeningToLostFocus = false;
System.Windows.Data.BindingExpression.prototype._lastSourceUpdateThrewException = false;
System.Windows.Data.BindingExpression.prototype._targetPropertyState = 0;
System.Windows.Data.BindingExpression.prototype._updateState = 0;
System.Windows.Data.BindingExpression.prototype._currentValidationError = null;
System.Windows.Data.BindingExpression.prototype._currentNotifyValidationErrors = null;
System.Windows.Data.BindingExpression.prototype._currentNotifyChildValidationErrors = null;
System.Windows.Data.BindingExpression.prototype._currentNotifyDataErrorInfo = null;
System.Windows.Data.BindingExpression.prototype._currentNotifyChildDataErrorInfo = null;
System.Windows.Data.BindingExpression.prototype._dynamicConverter = null;
System.Windows.Data.BindingExpression.stringType = null;
System.Windows.Data.BindingExpression._viewPropertyPath = null;
System.Windows.Data.BindingExpression.prototype.EffectiveSource$value = null;
System.Windows.Data.BindingExpression._cctor = function () {
	System.Windows.Data.BindingExpression.stringType = System.String;
};

$asm02.System.Net.Browser.AsyncHelper.ThrowOnUIThread = function () {
	if ($asm02.MS.Internal.XcpImports.OnMainThread()) {
		throw JSIL.New(System.NotSupportedException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("NativeHost_OnUIThread")]);
	}
};
$asm02.System.Net.Browser.AsyncHelper.ThrowOnNonUIThread = function () {
	if (!$asm02.MS.Internal.XcpImports.OnMainThread()) {
		throw JSIL.New(System.NotSupportedException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("NativeHost_NotOnUIThread")]);
	}
};
$asm02.System.Net.Browser.AsyncHelper.CloneAndKeepStackTrace = function (error) {
	if (JSIL.TryCast(error, System.Net.WebException) !== null) {
		var webException = JSIL.Cast(error, System.Net.WebException);
		return JSIL.New(System.Net.WebException, "_ctor$5", [webException.Message, webException, webException.Status, webException.Response]);
	}
	try {
		var type = (JSIL.GetType(error));
		var result = JSIL.Cast(System.Activator.CreateInstance$2(type, [System.String.Empty, error]), System.Exception);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.MissingMethodException)) {
			result = error;
		} else {
			throw $exception;
		}
	}
	return result;
};
$asm02.System.Net.Browser.AsyncHelper.BeginOnUI$0 = function (beginMethod, state) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				var $l$gc__DisplayClass = new $asm02.System.Net.Browser.AsyncHelper.$l$gc__DisplayClass4();
				$l$gc__DisplayClass.beginMethod = beginMethod;
				$l$gc__DisplayClass.state = state;
				if ($asm02.MS.Internal.XcpImports.OnMainThread()) {
					$l$gc__DisplayClass.beginMethod($l$gc__DisplayClass.state);
					return;
				}
				$l$gc__DisplayClass.error = null;
				$asm02.System.Net.Browser.AsyncHelper.CheckUseLowLatencyNetworking();
				if (({}) !== null) {
					var flag = $asm02.System.Net.Browser.AsyncHelper.s_useLowLatencyNetworking.MemberwiseClone();
					if (flag.GetValueOrDefault$0() && flag.HasValue) {
						var arg_84_0 = {}.Dispatcher;
						var arg_84_1 = function (sendState) {
							try {
								$l$gc__DisplayClass.beginMethod($l$gc__DisplayClass.state);
							} catch ($exception) {
								var arg_13_0 = $exception;
								$l$gc__DisplayClass.error = arg_13_0;
							}
						};
						var args = JSIL.Array.New(System.Object, 1);
						arg_84_0.FastInvoke$0(arg_84_1, args);
						__label0__ = "IL_AF";
						continue __step0__;
					}
				}
				if (System.Net.UiSynchronizationContext.Current !== null) {
					System.Net.UiSynchronizationContext.Current.Send(function (sendState) {
							try {
								$l$gc__DisplayClass.beginMethod($l$gc__DisplayClass.state);
							} catch ($exception) {
								var arg_13_0 = $exception;
								$l$gc__DisplayClass.error = arg_13_0;
							}
						}, null);
				}
				__label0__ = "IL_AF";
				continue __step0__;
				break;
			case "IL_AF":
				if ($l$gc__DisplayClass.error !== null) {
					throw $asm02.System.Net.Browser.AsyncHelper.CloneAndKeepStackTrace($l$gc__DisplayClass.error);
				}
				break __step0__;
		}
	}
};
$asm02.System.Net.Browser.AsyncHelper.BeginOnUI$1 = function (beginMethod, callback, state) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				var $l$gc__DisplayClassa = new $asm02.System.Net.Browser.AsyncHelper.$l$gc__DisplayClassa();
				$l$gc__DisplayClassa.beginMethod = beginMethod;
				$l$gc__DisplayClassa.callback = callback;
				$l$gc__DisplayClassa.state = state;
				if ($asm02.MS.Internal.XcpImports.OnMainThread()) {
					return $l$gc__DisplayClassa.beginMethod($l$gc__DisplayClassa.callback, $l$gc__DisplayClassa.state);
				}
				$l$gc__DisplayClassa.ar = null;
				$l$gc__DisplayClassa.error = null;
				$asm02.System.Net.Browser.AsyncHelper.CheckUseLowLatencyNetworking();
				if (({}) !== null) {
					var flag = $asm02.System.Net.Browser.AsyncHelper.s_useLowLatencyNetworking.MemberwiseClone();
					if (flag.GetValueOrDefault$0() && flag.HasValue) {
						var arg_98_0 = {}.Dispatcher;
						var arg_98_1 = function (sendState) {
							try {
								$l$gc__DisplayClassa.ar = $l$gc__DisplayClassa.beginMethod($l$gc__DisplayClassa.callback, $l$gc__DisplayClassa.state);
							} catch ($exception) {
								var arg_1F_0 = $exception;
								$l$gc__DisplayClassa.error = arg_1F_0;
							}
						};
						var args = JSIL.Array.New(System.Object, 1);
						arg_98_0.FastInvoke$0(arg_98_1, args);
						__label0__ = "IL_C3";
						continue __step0__;
					}
				}
				if (System.Net.UiSynchronizationContext.Current !== null) {
					System.Net.UiSynchronizationContext.Current.Send(function (sendState) {
							try {
								$l$gc__DisplayClassa.ar = $l$gc__DisplayClassa.beginMethod($l$gc__DisplayClassa.callback, $l$gc__DisplayClassa.state);
							} catch ($exception) {
								var arg_1F_0 = $exception;
								$l$gc__DisplayClassa.error = arg_1F_0;
							}
						}, null);
				}
				__label0__ = "IL_C3";
				continue __step0__;
				break;
			case "IL_C3":
				if ($l$gc__DisplayClassa.error !== null) {
					throw $asm02.System.Net.Browser.AsyncHelper.CloneAndKeepStackTrace($l$gc__DisplayClassa.error);
				}
				return $l$gc__DisplayClassa.ar;
				break __step0__;
		}
	}
};
$asm02.System.Net.Browser.AsyncHelper.CheckUseLowLatencyNetworking = function () {
	if ($asm02.System.Net.Browser.AsyncHelper.s_useLowLatencyNetworking.HasValue) {
		return;
	}
	if (({}) !== null) {
		if ($asm02.MS.Internal.XcpImports.OnMainThread()) {
			$asm02.System.Net.Browser.AsyncHelper.s_useLowLatencyNetworking = new (System.Nullable$b1.Of(System.Boolean)) ($asm02.MS.Internal.QuirksMode.ShouldUseLowLatencyNetworking());
			return;
		}
		var arg_5A_0 = {}.Dispatcher;
		var arg_5A_1 = function (sendState) {
			$asm02.System.Net.Browser.AsyncHelper.s_useLowLatencyNetworking = new (System.Nullable$b1.Of(System.Boolean)) ($asm02.MS.Internal.QuirksMode.ShouldUseLowLatencyNetworking());
		};
		var args = JSIL.Array.New(System.Object, 1);
		arg_5A_0.FastInvoke$0(arg_5A_1, args);
	}
};
JSIL.OverloadedMethod($asm02.System.Net.Browser.AsyncHelper, "BeginOnUI", [
		["BeginOnUI$0", [System.Threading.SendOrPostCallback, System.Object]], 
		["BeginOnUI$1", [$asm02.System.Net.Browser.BeginMethod, System.AsyncCallback, System.Object]]
	]);
$asm02.System.Net.Browser.AsyncHelper.$CachedAnonymousMethodDelegated = null;
$asm02.System.Net.Browser.AsyncHelper._cctor = function () {
	$asm02.System.Net.Browser.AsyncHelper.s_useLowLatencyNetworking = new (System.Nullable$b1.Of(System.Boolean)) ();
	$asm02.System.Net.Browser.AsyncHelper.s_useLowLatencyNetworking = new (System.Nullable$b1.Of(System.Boolean)) ();
};

$asm02.System.Net.Browser.AsyncHelper.$l$gc__DisplayClass4.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm02.System.Net.Browser.AsyncHelper.$l$gc__DisplayClass4.prototype.error = null;
$asm02.System.Net.Browser.AsyncHelper.$l$gc__DisplayClass4.prototype.beginMethod = null;
$asm02.System.Net.Browser.AsyncHelper.$l$gc__DisplayClass4.prototype.state = null;

$asm02.System.Net.Browser.AsyncHelper.$l$gc__DisplayClassa.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm02.System.Net.Browser.AsyncHelper.$l$gc__DisplayClassa.prototype.ar = null;
$asm02.System.Net.Browser.AsyncHelper.$l$gc__DisplayClassa.prototype.error = null;
$asm02.System.Net.Browser.AsyncHelper.$l$gc__DisplayClassa.prototype.beginMethod = null;
$asm02.System.Net.Browser.AsyncHelper.$l$gc__DisplayClassa.prototype.callback = null;
$asm02.System.Net.Browser.AsyncHelper.$l$gc__DisplayClassa.prototype.state = null;

$asm02.System.Net.Browser.HttpWebRequestHelper.IsHeaderForContent = function (headerName) {
	return (headerName.Equals$2("Content-Encoding", System.StringComparison.OrdinalIgnoreCase) || 
		headerName.Equals$2("Content-Language", System.StringComparison.OrdinalIgnoreCase) || 
		headerName.Equals$2("Content-Location", System.StringComparison.OrdinalIgnoreCase) || 
		headerName.Equals$2("Content-MD5", System.StringComparison.OrdinalIgnoreCase) || 
		headerName.Equals$2("Content-Range", System.StringComparison.OrdinalIgnoreCase) || 
		headerName.Equals$2("Content-Type", System.StringComparison.OrdinalIgnoreCase) || 
		headerName.Equals$2("Expires", System.StringComparison.OrdinalIgnoreCase) || headerName.Equals$2("Last-Modified", System.StringComparison.OrdinalIgnoreCase));
};
$asm02.System.Net.Browser.HttpWebRequestHelper.IsKnownHttpCookieAttribute = function (name) {
	var array = JSIL.Array.New(System.String, ["Comment", "CommentURL", "Discard", "Domain", "Expires", "Max-Age", "Path", "Port", "Secure", "Version", "HttpOnly"]);
	var text = name.Trim$1();
	var array2 = array;
__loop0__: 
	for (var i = 0; i < array2.length; ++i) {
		var value = array2[i];
		if (text.Equals$2(value, System.StringComparison.OrdinalIgnoreCase)) {
			return true;
		}
	}
	return false;
};
$asm02.System.Net.Browser.HttpWebRequestHelper.ParseHeaders = function (requestUri, headers, collection, removeHttpOnlyCookies, /* ref */ status, /* ref */ statusDescription) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				if (headers === null) {
					throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["headers"]);
				}
				var stringReader = new System.IO.StringReader(headers.Value);
				status.value = System.Net.HttpStatusCode.NotFound;
				statusDescription.value = "";
				var text = stringReader.ReadLine();
				var separator = JSIL.Array.New(System.Char, [" "]);
				var array = text.Split(separator);
				if (array.length >= 2) {
					status.value = System.Int32.Parse(array[1]);
					if (array.length >= 3) {
						var text2 = array[2];
					__loop0__: 
						for (var i = 3; i < array.length; ++i) {
							text2 = ((text2 + " " + array[i]));
						}
						statusDescription.value = text2;
					}
				}
				var separator2 = JSIL.Array.New(System.Char, [":"]);
			__loop1__: 
				while (true) {
					var text3 = stringReader.ReadLine();
					if ((text3 === null) || (text3.length === 0)) {
						return;
					}
					if (!JSIL.Cast(text3[0], System.Boolean)) {
						break __loop1__;
					}
					var array2 = text3.Split(separator2);
					if (array2.length <= 1) {
						__label0__ = "Block_8";
						continue __step0__;
					}
					var text4 = text3.Substring$0((array2[0].length + 1));
					var text5 = (array2[0]).Trim$1();
					if (!((!text5.Equals$2("Set-Cookie", System.StringComparison.OrdinalIgnoreCase) && 
								!text5.Equals$2("Set-Cookie2", System.StringComparison.OrdinalIgnoreCase)) || !removeHttpOnlyCookies)) {
						var text6 = $asm02.System.Net.Browser.HttpWebRequestHelper.RemoveHttpOnlyCookies(requestUri, text4);
						if (!System.String.IsNullOrEmpty(text6)) {
							$asm02.System.Net.Browser.HttpWebRequestHelper.AddHeaderToCollection(collection, text5, text6);
						}
					} else {
						$asm02.System.Net.Browser.HttpWebRequestHelper.AddHeaderToCollection(collection, text5, text4);
					}
				}
				return;
				__label0__ = "Block_8";
				continue __step0__;
				break;
			case "Block_8":
				throw JSIL.New(System.ArgumentException, "_ctor$1", [("wrong number of components on header line: " + text3)]);
				break __step0__;
		}
	}
};
$asm02.System.Net.Browser.HttpWebRequestHelper.AddHeaderToCollection = function (headerCollection, headerName, headerValue) {
	var flag = false;
	var allKeys = headerCollection.AllKeys;
__loop0__: 
	for (var i = 0; i < allKeys.length; ++i) {
		var text = allKeys[i];
		if (text.Equals$2(headerName, System.StringComparison.OrdinalIgnoreCase)) {
			var value = ((headerCollection.get_Item$0(text) + ", " + headerValue));
			headerCollection.set_Item$0(text, value);
			flag = true;
		}
	}
	if (!flag) {
		headerCollection.set_Item$0(headerName, headerValue);
	}
};
$asm02.System.Net.Browser.HttpWebRequestHelper.SetCookiesFromHeaderCollection = function (headers, uri, cookieContainer) {
	if (!(!uri.IsAbsoluteUri || 
			(headers === null) || (cookieContainer === null))) {
		var allKeys = headers.AllKeys;
	__loop0__: 
		for (var i = 0; i < allKeys.length; ++i) {
			var text = allKeys[i];
			if (!(!text.Equals$2("Set-Cookie", System.StringComparison.OrdinalIgnoreCase) && !text.Equals$2("Set-Cookie2", System.StringComparison.OrdinalIgnoreCase))) {
				cookieContainer.SetCookies(uri, headers.get_Item$0(text));
			}
		}
	}
};
$asm02.System.Net.Browser.HttpWebRequestHelper.RemoveHttpOnlyCookies = function (requestUri, setCookieHeaderValue) {
	var text = null;
	var flag = true;
	if (!requestUri.IsAbsoluteUri) {
		return null;
	}
	if (System.String.IsNullOrEmpty(setCookieHeaderValue)) {
		return setCookieHeaderValue;
	}
	var cookieContainer = new System.Net.CookieContainer();
	cookieContainer.SetCookies(requestUri, setCookieHeaderValue);
	var cookies = cookieContainer.GetCookies(requestUri);
	var dictionary = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.String, System.String), "_ctor$1", [cookies.Count]);
	var i = 0;
	var num = 0;
	var text2 = null;
	var anyOf = JSIL.Array.New(System.Char, [",", ";"]);
__loop0__: 
	while (i < setCookieHeaderValue.length) {
		var num2 = setCookieHeaderValue.IndexOfAny$1(anyOf, i);
		if (num2 === -1) {
			num2 = setCookieHeaderValue.length;
		}
		var text3 = setCookieHeaderValue.Substring$1(i, (num2 - i));
		if (text3.Contains("=")) {
			var text4 = text3.Substring$1(0, text3.IndexOf$0("="));
			if (!($asm02.System.Net.Browser.HttpWebRequestHelper.IsKnownHttpCookieAttribute(text4) || ((i !== 0) && 
						((setCookieHeaderValue[(i - 1)]) !== ",")))) {
				var num3 = i;
				if (i !== 0) {
					var value = setCookieHeaderValue.Substring$1(num, ((i - num) - 1));
					dictionary.set_Item(text2.Trim$1(), value);
				}
				text2 = text4;
				num = num3;
			}
		}
		i = (num2 + 1);
	}
	var value2 = setCookieHeaderValue.Substring$1(num, ((i - num) - 1));
	dictionary.set_Item(text2.Trim$1(), value2);
	var enumerator = cookies.GetEnumerator();
	try {
	__loop1__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var cookie = JSIL.Cast(enumerator.IEnumerator_Current, System.Net.Cookie);
			if (cookie.HttpOnly) {
				flag = false;
				dictionary.Remove(cookie.Name);
			}
		}
	} finally {
		var disposable = JSIL.TryCast(enumerator, System.IDisposable);
		if (disposable !== null) {
			disposable.IDisposable_Dispose();
		}
	}
	if (flag) {
		text = setCookieHeaderValue;
	} else {
		text = null;
		var enumerator2 = JSIL.Cast(dictionary.Values, System.Collections.Generic.Dictionary$b2.ValueCollection.Of(System.String, System.String)).GetEnumerator().MemberwiseClone();
		try {
		__loop2__: 
			while (enumerator2.MoveNext()) {
				var current = enumerator2.Current;
				if (text === null) {
					text = "";
				} else {
					text = ((text + ","));
				}
				text = ((text + current));
			}
		} finally {
			enumerator2.IDisposable_Dispose();
		}
	}
	return text;
};
$asm02.System.Net.Browser.HttpWebRequestHelper.IsRedirectStatusCode = function (code) {
	return ((code === System.Net.HttpStatusCode.Ambiguous) || 
		(code === System.Net.HttpStatusCode.Moved) || 
		(code === System.Net.HttpStatusCode.Redirect) || 
		(code === System.Net.HttpStatusCode.RedirectMethod) || (code === System.Net.HttpStatusCode.RedirectKeepVerb));
};
$asm02.System.Net.Browser.HttpWebRequestHelper.IsWebExceptionStatusCode = function (code) {
	return ((code < System.Net.HttpStatusCode.OK) || (code >= System.Net.HttpStatusCode.BadRequest));
};
$asm02.System.Net.Browser.HttpWebRequestHelper.IsAuthenticationFailureStatusCode = function (code) {
	return ((code === System.Net.HttpStatusCode.Unauthorized) || (code === System.Net.HttpStatusCode.ProxyAuthenticationRequired));
};
$asm02.System.Net.Browser.HttpWebRequestHelper.GetCookieHeader = function (publicContainer, requestUri) {
	if ($asm02.System.Net.Browser.HttpWebRequestHelper.s_cookieContainerPeers !== null) {
		var cookieContainer = new System.Net.CookieContainer();
		var cookies = publicContainer.GetCookies(requestUri);
		var cookieContainer2 = null;
		var cookieCollection = JSIL.New(System.Net.CookieCollection, "_ctor$0", []);
		if ($asm02.System.Net.Browser.HttpWebRequestHelper.s_cookieContainerPeers.ContainsKey(publicContainer)) {
			cookieContainer2 = $asm02.System.Net.Browser.HttpWebRequestHelper.s_cookieContainerPeers.get_Item(publicContainer);
		}
		if (cookieContainer2 !== null) {
			var enumerator = cookieContainer2.GetCookies(requestUri).GetEnumerator();
			try {
			__loop0__: 
				while (enumerator.IEnumerator_MoveNext()) {
					var cookie = JSIL.Cast(enumerator.IEnumerator_Current, System.Net.Cookie);
					if (cookie.HttpOnly) {
						cookieCollection.Add$0(cookie);
					}
				}
			} finally {
				var disposable = JSIL.TryCast(enumerator, System.IDisposable);
				if (disposable !== null) {
					disposable.IDisposable_Dispose();
				}
			}
		}
		cookieContainer.Add$2(requestUri, cookies);
		cookieContainer.Add$2(requestUri, cookieCollection);
		return cookieContainer.GetCookieHeader$0(requestUri);
	}
	return publicContainer.GetCookieHeader$0(requestUri);
};
$asm02.System.Net.Browser.HttpWebRequestHelper.AddCookieHeaderToInternalPeerContainer = function (headers, uri, publicContainer) {
	if (!((publicContainer === null) || 
			(headers === null) || !uri.IsAbsoluteUri)) {
		if ($asm02.System.Net.Browser.HttpWebRequestHelper.s_cookieContainerPeers === null) {
			$asm02.System.Net.Browser.HttpWebRequestHelper.s_cookieContainerPeers = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.Net.CookieContainer, System.Net.CookieContainer), "_ctor$0", []);
		}
		if (!($asm02.System.Net.Browser.HttpWebRequestHelper.s_cookieContainerPeers.ContainsKey(publicContainer) && $asm02.System.Net.Browser.HttpWebRequestHelper.s_cookieContainerPeers.get_Item(publicContainer))) {
			$asm02.System.Net.Browser.HttpWebRequestHelper.s_cookieContainerPeers.set_Item(publicContainer, new System.Net.CookieContainer());
		}
		var allKeys = headers.AllKeys;
	__loop0__: 
		for (var i = 0; i < allKeys.length; ++i) {
			var text = allKeys[i];
			if (!(!text.Equals$2("Set-Cookie", System.StringComparison.OrdinalIgnoreCase) && !text.Equals$2("Set-Cookie2", System.StringComparison.OrdinalIgnoreCase))) {
				$asm02.System.Net.Browser.HttpWebRequestHelper.s_cookieContainerPeers.get_Item(publicContainer).SetCookies(uri, headers.get_Item$0(text));
			}
		}
	}
};
Object.defineProperty($asm02.System.Net.Browser.HttpWebRequestHelper, "UndefinedContentLength", {
		"value": -1}
);
$asm02.System.Net.Browser.HttpWebRequestHelper.s_cookieContainerPeers = null;
$asm02.System.Net.Browser.HttpWebRequestHelper._cctor = function () {
};

System.Net.Browser.WebRequestCreator.get_ClientHttp = function () {
	if (System.Net.Browser.WebRequestCreator.s_clientHttp === null) {
		System.Net.Browser.WebRequestCreator.s_clientHttp = new $asm02.System.Net.Browser.ClientHttpWebRequestCreator();
	}
	return System.Net.Browser.WebRequestCreator.s_clientHttp;
};
System.Net.Browser.WebRequestCreator.get_BrowserHttp = function () {
	if (System.Net.Browser.WebRequestCreator.s_browserHttp === null) {
		System.Net.Browser.WebRequestCreator.s_browserHttp = new $asm02.System.Net.Browser.BrowserHttpWebRequestCreator();
	}
	return System.Net.Browser.WebRequestCreator.s_browserHttp;
};
JSIL.MakeProperty(System.Net.Browser.WebRequestCreator, "ClientHttp", 
	System.Net.Browser.WebRequestCreator.get_ClientHttp, null);
JSIL.MakeProperty(System.Net.Browser.WebRequestCreator, "BrowserHttp", 
	System.Net.Browser.WebRequestCreator.get_BrowserHttp, null);
System.Net.Browser.WebRequestCreator.s_clientHttp = null;
System.Net.Browser.WebRequestCreator.s_browserHttp = null;
System.Net.Browser.WebRequestCreator._cctor = function () {
};

$asm02.System.Net.Browser.BrowserHttpWebRequestCreator.prototype.Create = function (uri) {
	return new $asm02.System.Net.Browser.BrowserHttpWebRequest(uri);
};
$asm02.System.Net.Browser.BrowserHttpWebRequestCreator.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};

$asm02.System.Net.Browser.BHWRAsyncResult.prototype._ctor = function (state) {
	System.Object.prototype._ctor.call(this);
	this._state = state;
	this._sync = false;
	this._completed = false;
};
$asm02.System.Net.Browser.BHWRAsyncResult.prototype.get_AsyncState = function () {
	return this._state;
};
$asm02.System.Net.Browser.BHWRAsyncResult.prototype.get_CompletedSynchronously = function () {
	return this._sync;
};
$asm02.System.Net.Browser.BHWRAsyncResult.prototype.get_IsCompleted = function () {
	return this._completed;
};
$asm02.System.Net.Browser.BHWRAsyncResult.prototype.get_AsyncWaitHandle = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm02.System.Net.Browser.BHWRAsyncResult.prototype.Finish = function (sync) {
	this._completed = true;
	this._sync = sync;
};
JSIL.MakeProperty($asm02.System.Net.Browser.BHWRAsyncResult.prototype, "AsyncState", 
	$asm02.System.Net.Browser.BHWRAsyncResult.prototype.get_AsyncState, null);
JSIL.MakeProperty($asm02.System.Net.Browser.BHWRAsyncResult.prototype, "CompletedSynchronously", 
	$asm02.System.Net.Browser.BHWRAsyncResult.prototype.get_CompletedSynchronously, null);
JSIL.MakeProperty($asm02.System.Net.Browser.BHWRAsyncResult.prototype, "IsCompleted", 
	$asm02.System.Net.Browser.BHWRAsyncResult.prototype.get_IsCompleted, null);
JSIL.MakeProperty($asm02.System.Net.Browser.BHWRAsyncResult.prototype, "AsyncWaitHandle", 
	$asm02.System.Net.Browser.BHWRAsyncResult.prototype.get_AsyncWaitHandle, null);
$asm02.System.Net.Browser.BHWRAsyncResult.prototype._state = null;
$asm02.System.Net.Browser.BHWRAsyncResult.prototype._sync = false;
$asm02.System.Net.Browser.BHWRAsyncResult.prototype._completed = false;

$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.add_ProgressChanged = function (value) {
	this.ProgressChanged = System.Delegate.Combine(this.ProgressChanged, value);
};
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.remove_ProgressChanged = function (value) {
	this.ProgressChanged = System.Delegate.Remove(this.ProgressChanged, value);
};
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.add_ProgressCompleted = function (value) {
	this.ProgressCompleted = System.Delegate.Combine(this.ProgressCompleted, value);
};
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.remove_ProgressCompleted = function (value) {
	this.ProgressCompleted = System.Delegate.Remove(this.ProgressCompleted, value);
};
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.add_ProgressFailed = function (value) {
	this.ProgressFailed = System.Delegate.Combine(this.ProgressFailed, value);
};
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.remove_ProgressFailed = function (value) {
	this.ProgressFailed = System.Delegate.Remove(this.ProgressFailed, value);
};
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype._ctor = function (uri) {
	System.Net.HttpWebRequest.prototype._ctor.call(this);
	this._response = null;
	this._method = "GET";
	this._aborted = false;
	this._internalStream = null;
	this._exposedReqStream = null;
	this._getReqStrmCallback = null;
	this._getReqStrmResult = null;
	this._getReqStrmFired = false;
	this._getResponseCallback = null;
	this._getResponseResult = null;
	this._getResponseFired = false;
	this._reqUri = uri;
	this._wr = null;
	this._finished = false;
	this._state = $asm02.System.Net.Browser.BrowserHttpWebRequest.BrowserHttpWebRequestState.Ready;
	this._allowBuffering = true;
	this._netStream = null;
	this._lockObject = new System.Object();
	this._exception = null;
	this._expectedContentLength = -1;
};
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.get_HaveResponse = function () {
	return (this._response !== null);
};
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.get_Method = function () {
	return this._method;
};
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.set_Method = function (value) {
	var lockObject = null;
	if (!((System.String.Compare$1(value, "get", System.StringComparison.OrdinalIgnoreCase) === 0) || (System.String.Compare$1(value, "post", System.StringComparison.OrdinalIgnoreCase) === 0))) {
		throw JSIL.New(System.NotSupportedException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("HttpWebRequest_UnsupportedMethod")]);
	}
	System.Threading.Monitor.Enter((lockObject = this._lockObject));
	try {
		if (this._state > $asm02.System.Net.Browser.BrowserHttpWebRequest.BrowserHttpWebRequestState.Ready) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("HttpWebRequest_InvalidState", ["Method"])]);
		}
		this._method = value;
	} finally {
		System.Threading.Monitor.Exit(lockObject);
	}
};
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.get_RequestUri = function () {
	return this._reqUri;
};
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.get_AllowReadStreamBuffering = function () {
	return this._allowBuffering;
};
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.set_AllowReadStreamBuffering = function (value) {
	var lockObject = null;
	System.Threading.Monitor.Enter((lockObject = this._lockObject));
	try {
		if (this._state > $asm02.System.Net.Browser.BrowserHttpWebRequest.BrowserHttpWebRequestState.Ready) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("HttpWebRequest_InvalidState", ["AllowReadStreamBuffering"])]);
		}
		this._allowBuffering = value;
	} finally {
		System.Threading.Monitor.Exit(lockObject);
	}
};
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.get_AllowWriteStreamBuffering = function () {
	return true;
};
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.set_AllowWriteStreamBuffering = function (value) {
	if (!value) {
		throw JSIL.New(System.NotSupportedException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("HttpWebRequest_WriteStreamBufferingNotSupported")]);
	}
};
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.get_ContentLength = function () {
	return this._expectedContentLength;
};
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.set_ContentLength = function (value) {
	var lockObject = null;
	System.Threading.Monitor.Enter((lockObject = this._lockObject));
	try {
		if (this._state > $asm02.System.Net.Browser.BrowserHttpWebRequest.BrowserHttpWebRequestState.Ready) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("HttpWebRequest_InvalidState", ["ContentLength"])]);
		}
		this._expectedContentLength = value;
	} finally {
		System.Threading.Monitor.Exit(lockObject);
	}
};
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.get_CreatorInstance = function () {
	return System.Net.Browser.WebRequestCreator.BrowserHttp;
};
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.get_UseDefaultCredentials = function () {
	return true;
};
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.set_UseDefaultCredentials = function (value) {
	if (value) {
		return;
	}
	throw JSIL.New(System.NotSupportedException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("HttpWebRequest_DefaultCredentialsOnly")]);
};
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.GetUserAgent = function () {
	$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
	return "";
};
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.SetUserAgent = function (value) {
	$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
};
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.get_AllowAutoRedirect = function () {
	$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
	return false;
};
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.set_AllowAutoRedirect = function (value) {
	$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
};
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.Abort = function () {
	if ($asm02.MS.Internal.XcpImports.OnMainThread()) {
		this.AbortImplementation();
		return;
	}
	$asm02.System.Net.Browser.AsyncHelper.BeginOnUI$0(function (sendState) {
			this.AbortImplementation();
		}, null);
};
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.AbortImplementation = function () {
	var lockObject = null;
	$asm02.System.Net.Browser.AsyncHelper.ThrowOnNonUIThread();
	System.Threading.Monitor.Enter((lockObject = this._lockObject));
	try {
		if (!this._aborted) {
			if (this._wr !== null) {
				this._wr.Abort();
			}
			this._aborted = true;
			if (this._state === $asm02.System.Net.Browser.BrowserHttpWebRequest.BrowserHttpWebRequestState.GettingRequestStream) {
				$asm02.System.Net.Browser.BrowserHttpWebRequest.InvokeGetRequestStreamCallback(this);
			} else if (this._state === $asm02.System.Net.Browser.BrowserHttpWebRequest.BrowserHttpWebRequestState.GettingResponse) {
				$asm02.System.Net.Browser.BrowserHttpWebRequest.InvokeGetResponseCallback(this);
			}
			if (this._wr !== null) {
				this._wr.remove_Completed(JSIL.Delegate.New("System.EventHandler", this, $asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.Completed));
				this._wr.remove_DownloadFailed(JSIL.Delegate.New("MS.Internal.ErrorEventHandler", this, $asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.Failed));
				this._wr.remove_DownloadProgressChanged(JSIL.Delegate.New("System.EventHandler", this, $asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.Progress));
			}
		}
	} finally {
		System.Threading.Monitor.Exit(lockObject);
	}
};
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.BeginGetRequestStream = function (callback, state) {
	return $asm02.System.Net.Browser.AsyncHelper.BeginOnUI$1(JSIL.Delegate.New("System.Net.Browser.BeginMethod", this, $asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.InternalBeginGetRequestStream), callback, state);
};
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.InternalBeginGetRequestStream = function (callback, state) {
	var lockObject = null;
	$asm02.System.Net.Browser.AsyncHelper.ThrowOnNonUIThread();
	System.Threading.Monitor.Enter((lockObject = this._lockObject));
	try {
		if (this._aborted) {
			throw JSIL.New(System.Net.WebException, "_ctor$3", [null, System.Net.WebExceptionStatus.RequestCanceled]);
		}
		if (System.String.Equals$1(this._method, "get", System.StringComparison.OrdinalIgnoreCase)) {
			throw JSIL.New(System.Net.ProtocolViolationException, "_ctor$0", []);
		}
		if (this._state >= $asm02.System.Net.Browser.BrowserHttpWebRequest.BrowserHttpWebRequestState.GettingRequestStream) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
		}
		this._state = $asm02.System.Net.Browser.BrowserHttpWebRequest.BrowserHttpWebRequestState.GettingRequestStream;
		this._getReqStrmCallback = callback;
		this._getReqStrmResult = null;
		this._getReqStrmResult = new $asm02.System.Net.Browser.BHWRAsyncResult(state);
		$asm02.System.Net.Browser.BrowserHttpWebRequest.InvokeGetRequestStreamCallback(this);
	} finally {
		System.Threading.Monitor.Exit(lockObject);
	}
	return this._getReqStrmResult;
};
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.BeginGetResponse = function (callback, state) {
	if (callback === null) {
		throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
	}
	return $asm02.System.Net.Browser.AsyncHelper.BeginOnUI$1(JSIL.Delegate.New("System.Net.Browser.BeginMethod", this, $asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.InternalBeginGetResponse), callback, state);
};
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.InternalBeginGetResponse = function (callback, state) {
	var lockObject = null;
	$asm02.System.Net.Browser.AsyncHelper.ThrowOnNonUIThread();
	System.Threading.Monitor.Enter((lockObject = this._lockObject));
	try {
		this._getResponseCallback = callback;
		this._getResponseResult = null;
		if (this._aborted) {
			throw JSIL.New(System.Net.WebException, "_ctor$3", [null, System.Net.WebExceptionStatus.RequestCanceled]);
		}
		if (this._state >= $asm02.System.Net.Browser.BrowserHttpWebRequest.BrowserHttpWebRequestState.GettingResponse) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
		}
		this._state = $asm02.System.Net.Browser.BrowserHttpWebRequest.BrowserHttpWebRequestState.GettingResponse;
		this._getResponseResult = new $asm02.System.Net.Browser.BHWRAsyncResult(state);
		this.BeginGetResponseImplementation();
	} finally {
		System.Threading.Monitor.Exit(lockObject);
	}
	return this._getResponseResult;
};
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.BeginGetResponseImplementation = function () {
	var lockObject = null;
	$asm02.System.Net.Browser.AsyncHelper.ThrowOnNonUIThread();
	System.Threading.Monitor.Enter((lockObject = this._lockObject));
	try {
		try {
			if (this._wr === null) {
				this._wr = JSIL.New($asm02.MS.Internal.InternalWebRequest, "_ctor$0", []);
			}
			this._wr.Open(this._method, this._reqUri);
			this._wr.add_Completed(JSIL.Delegate.New("System.EventHandler", this, $asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.Completed));
			this._wr.add_DownloadFailed(JSIL.Delegate.New("MS.Internal.ErrorEventHandler", this, $asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.Failed));
			this._wr.add_DownloadProgressChanged(JSIL.Delegate.New("System.EventHandler", this, $asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.Progress));
			this._wr.AllowReadStreamBuffering = this._allowBuffering;
			this._wr.UseDefaultCredentials = true;
			if (this._internalStream !== null) {
				if (!this._exposedReqStream.IsClosed()) {
					throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
				}
				if (System.String.Equals$1(this._method, "get", System.StringComparison.OrdinalIgnoreCase)) {
					throw JSIL.New(System.Net.ProtocolViolationException, "_ctor$0", []);
				}
				if (this._internalStream.Length > 0) {
					this._wr.SetStream(this._internalStream);
				}
				if (!((this._expectedContentLength === -1) || (this._expectedContentLength === this._internalStream.Length))) {
					throw JSIL.New(System.Net.ProtocolViolationException, "_ctor$0", []);
				}
				this._expectedContentLength = this._internalStream.Length;
			} else {
				this._expectedContentLength = -1;
			}
			if (this.Headers.Count > 0) {
				var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
				if (this._method.Equals$2("POST", System.StringComparison.OrdinalIgnoreCase)) {
					if (this._internalStream !== null) {
						stringBuilder.Append$2(("Content-Length: " + (this._internalStream.Length).toString() + "\r\n"));
					} else {
						stringBuilder.Append$2("Content-Length: 0\r\n");
					}
				}
				var allKeys = this.Headers.AllKeys;
			__loop0__: 
				for (var i = 0; i < allKeys.length; ++i) {
					var text = allKeys[i];
					if (!(!this._method.Equals$2("get", System.StringComparison.OrdinalIgnoreCase) || !$asm02.System.Net.Browser.HttpWebRequestHelper.IsHeaderForContent(text))) {
						throw JSIL.New(System.Net.ProtocolViolationException, "_ctor$0", []);
					}
					if (!(!text.Equals$2("Proxy-Authorization", System.StringComparison.OrdinalIgnoreCase) || System.Windows.Application.Current.HasElevatedPermissions)) {
						throw JSIL.New(System.Security.SecurityException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("HttpWebRequest_ProxyAuthorizationHeaderNotElevated")]);
					}
					if (System.String.IsNullOrWhiteSpace(this.Headers.get_Item$0(text))) {
						throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("HttpWebRequest_InvalidEmptyHeader", [text])]);
					}
					stringBuilder.Append$2((text + ": " + this.Headers.get_Item$0(text) + "\r\n"));
				}
				this._wr.Headers = new ($asm02.MS.Internal.SecurityCriticalDataForMultipleGetAndSet$b1.Of(System.String)) (stringBuilder.toString());
			} else if (this._method.Equals$2("POST", System.StringComparison.OrdinalIgnoreCase)) {
				if (this._internalStream !== null) {
					this._wr.Headers = new ($asm02.MS.Internal.SecurityCriticalDataForMultipleGetAndSet$b1.Of(System.String)) (("Content-Length: " + (this._internalStream.Length).toString() + "\r\n"));
				} else {
					this._wr.Headers = new ($asm02.MS.Internal.SecurityCriticalDataForMultipleGetAndSet$b1.Of(System.String)) ("Content-Length: 0\r\n");
				}
			}
			this._wr.Send();
		} catch ($exception) {
			var arg_2F3_0 = $exception;
			this._exception = arg_2F3_0;
			this._response = null;
			$asm02.System.Net.Browser.BrowserHttpWebRequest.InvokeGetResponseCallback(this);
		}
		if (this._internalStream !== null) {
			this._internalStream.Close();
		}
	} finally {
		System.Threading.Monitor.Exit(lockObject);
	}
};
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.EndGetRequestStream = function (asyncResult) {
	var $l$gc__DisplayClass = new $asm02.System.Net.Browser.BrowserHttpWebRequest.$l$gc__DisplayClass2();
	$l$gc__DisplayClass.asyncResult = asyncResult;
	$l$gc__DisplayClass.$this = this;
	if ($asm02.MS.Internal.XcpImports.OnMainThread()) {
		return this.InternalEndGetRequestStream($l$gc__DisplayClass.asyncResult);
	}
	$l$gc__DisplayClass.stream = null;
	$asm02.System.Net.Browser.AsyncHelper.BeginOnUI$0(function (sendState) {
			$l$gc__DisplayClass.stream = $l$gc__DisplayClass.$this.InternalEndGetRequestStream($l$gc__DisplayClass.asyncResult);
		}, null);
	return $l$gc__DisplayClass.stream;
};
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.InternalEndGetRequestStream = function (asyncResult) {
	var lockObject = null;
	$asm02.System.Net.Browser.AsyncHelper.ThrowOnNonUIThread();
	System.Threading.Monitor.Enter((lockObject = this._lockObject));
	try {
		if (asyncResult === null) {
			throw JSIL.New(System.ArgumentNullException, "_ctor$0", []);
		}
		if (asyncResult !== this._getReqStrmResult) {
			throw JSIL.New(System.ArgumentException, "_ctor$0", []);
		}
		if (this._aborted) {
			this._getReqStrmResult = null;
			throw JSIL.New(System.Net.WebException, "_ctor$3", [null, System.Net.WebExceptionStatus.RequestCanceled]);
		}
		if (this._state !== $asm02.System.Net.Browser.BrowserHttpWebRequest.BrowserHttpWebRequestState.GettingRequestStream) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
		}
		this._state = $asm02.System.Net.Browser.BrowserHttpWebRequest.BrowserHttpWebRequestState.GotRequestStream;
		this._getReqStrmResult = null;
		this._internalStream = JSIL.New(System.IO.MemoryStream, "_ctor$0", []);
		this._exposedReqStream = new $asm02.MS.Internal.InternalWebRequestStream(this._internalStream);
	} finally {
		System.Threading.Monitor.Exit(lockObject);
	}
	return this._exposedReqStream;
};
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.EndGetResponse = function (asyncResult) {
	var $l$gc__DisplayClass = new $asm02.System.Net.Browser.BrowserHttpWebRequest.$l$gc__DisplayClass5();
	$l$gc__DisplayClass.asyncResult = asyncResult;
	$l$gc__DisplayClass.$this = this;
	if ($asm02.MS.Internal.XcpImports.OnMainThread()) {
		return this.InternalEndGetResponse($l$gc__DisplayClass.asyncResult);
	}
	$l$gc__DisplayClass.response = null;
	$asm02.System.Net.Browser.AsyncHelper.BeginOnUI$0(function (sendState) {
			$l$gc__DisplayClass.response = $l$gc__DisplayClass.$this.InternalEndGetResponse($l$gc__DisplayClass.asyncResult);
		}, null);
	if ($l$gc__DisplayClass.response === null) {
		this._response = JSIL.New($asm02.System.Net.Browser.BrowserHttpWebResponse, "_ctor$0", [this._method, this._reqUri, System.Net.HttpStatusCode.NotFound, "", null]);
		throw JSIL.New(System.Net.WebException, "_ctor$5", [$asm02.System.Windows.Resx.GetString$0("HttpWebRequest_WebException_RemoteServer", [System.Net.HttpStatusCode.NotFound.toString()]), null, System.Net.WebExceptionStatus.UnknownError, this._response]);
	}
	return $l$gc__DisplayClass.response;
};
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.InternalEndGetResponse = function (asyncResult) {
	var lockObject = null;
	$asm02.System.Net.Browser.AsyncHelper.ThrowOnNonUIThread();
	System.Threading.Monitor.Enter((lockObject = this._lockObject));
	try {
		if (asyncResult === null) {
			throw JSIL.New(System.ArgumentNullException, "_ctor$0", []);
		}
		if (asyncResult !== this._getResponseResult) {
			throw JSIL.New(System.ArgumentException, "_ctor$0", []);
		}
		if (this._aborted) {
			this._getResponseResult = null;
			throw JSIL.New(System.Net.WebException, "_ctor$3", [null, System.Net.WebExceptionStatus.RequestCanceled]);
		}
		if (this._state !== $asm02.System.Net.Browser.BrowserHttpWebRequest.BrowserHttpWebRequestState.GettingResponse) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
		}
		if (this._exception !== null) {
			this._getResponseResult = null;
			throw this._exception;
		}
		this._state = $asm02.System.Net.Browser.BrowserHttpWebRequest.BrowserHttpWebRequestState.GotResponse;
		this._getResponseResult = null;
	} finally {
		System.Threading.Monitor.Exit(lockObject);
	}
	return this._response;
};
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.CreateProgressChangedEventArgs = function () {
	var lockObject = null;
	System.Threading.Monitor.Enter((lockObject = this._lockObject));
	try {
		var totalSize = this._wr.GetTotalSize();
		var size = this._wr.GetSize();
		var percentage = (totalSize > 0) ? Math.floor((100 * size) / totalSize) : 0;
		var result = new System.Net.NetworkProgressChangedEventArgs(percentage, size, totalSize, null);
	} finally {
		System.Threading.Monitor.Exit(lockObject);
	}
	return result;
};
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.Progress = function (sender, e) {
	var lockObject = null;
	var internalWebRequest = JSIL.Cast(sender, $asm02.MS.Internal.InternalWebRequest);
	System.Threading.Monitor.Enter((lockObject = this._lockObject));
	try {
		if (this.ProgressChanged !== null) {
			this.ProgressChanged(this, this.CreateProgressChangedEventArgs());
		}
		if (!this._allowBuffering) {
			if (!(this._finished || this._aborted)) {
				this._finished = true;
				this._netStream = internalWebRequest.GetNetworkStream();
				var uri = internalWebRequest.FinalUri;
				if (System.Uri.op_Equality(uri, null)) {
					uri = this._reqUri;
				}
				this._response = JSIL.New($asm02.System.Net.Browser.BrowserHttpWebResponse, "_ctor$1", [this._method, uri, System.Net.HttpStatusCode.OK, internalWebRequest.Mime, this._netStream, internalWebRequest.GetTotalSize()]);
				$asm02.System.Net.Browser.BrowserHttpWebRequest.InvokeGetResponseCallback(this);
			}
			var size = internalWebRequest.GetSize();
			if (this._netStream !== null) {
				this._netStream.DownloadProgress(size);
			}
		}
	} finally {
		System.Threading.Monitor.Exit(lockObject);
	}
};
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.Completed = function (sender, e) {
	var lockObject = null;
	var internalWebRequest = JSIL.Cast(sender, $asm02.MS.Internal.InternalWebRequest);
	System.Threading.Monitor.Enter((lockObject = this._lockObject));
	try {
		if (this.ProgressCompleted !== null) {
			this.ProgressCompleted(this, this.CreateProgressChangedEventArgs());
		}
		if (!(this._finished || this._aborted)) {
			this._finished = true;
			var stream = internalWebRequest.GetShouldEnableMemoryAsIPALStream() ? internalWebRequest.GetStreamWrapper() : internalWebRequest.GetResponseStream();
			var uri = internalWebRequest.FinalUri;
			if (System.Uri.op_Equality(uri, null)) {
				uri = this._reqUri;
			}
			this._response = JSIL.New($asm02.System.Net.Browser.BrowserHttpWebResponse, "_ctor$0", [this._method, uri, System.Net.HttpStatusCode.OK, internalWebRequest.Mime, stream]);
			$asm02.System.Net.Browser.BrowserHttpWebRequest.InvokeGetResponseCallback(this);
		}
		if (!this._allowBuffering) {
			var num = internalWebRequest.GetSize();
			if (this._netStream !== null) {
				this._netStream.DownloadComplete(Math.floor(num));
			}
		}
		internalWebRequest.remove_Completed(JSIL.Delegate.New("System.EventHandler", this, $asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.Completed));
		internalWebRequest.remove_DownloadFailed(JSIL.Delegate.New("MS.Internal.ErrorEventHandler", this, $asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.Failed));
		internalWebRequest.remove_DownloadProgressChanged(JSIL.Delegate.New("System.EventHandler", this, $asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.Progress));
	} finally {
		System.Threading.Monitor.Exit(lockObject);
	}
};
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.Failed = function (sender, e) {
	var lockObject = null;
	var internalWebRequest = JSIL.Cast(sender, $asm02.MS.Internal.InternalWebRequest);
	System.Threading.Monitor.Enter((lockObject = this._lockObject));
	try {
		if (this.ProgressFailed !== null) {
			this.ProgressFailed(this, this.CreateProgressChangedEventArgs());
		}
		if (!(this._finished || this._aborted)) {
			this._finished = true;
			var uri = internalWebRequest.FinalUri;
			if (System.Uri.op_Equality(uri, null)) {
				uri = this._reqUri;
			}
			if (internalWebRequest.SecurityException) {
				this._response = null;
				this._exception = JSIL.New(System.Security.SecurityException, "_ctor$0", []);
			} else {
				this._response = JSIL.New($asm02.System.Net.Browser.BrowserHttpWebResponse, "_ctor$0", [this._method, uri, System.Net.HttpStatusCode.NotFound, "", null]);
				this._exception = JSIL.New(System.Net.WebException, "_ctor$5", [$asm02.System.Windows.Resx.GetString$0("HttpWebRequest_WebException_RemoteServer", [System.Net.HttpStatusCode.NotFound.toString()]), null, System.Net.WebExceptionStatus.UnknownError, this._response]);
			}
			$asm02.System.Net.Browser.BrowserHttpWebRequest.InvokeGetResponseCallback(this);
		}
		if (!this._allowBuffering) {
			var num = internalWebRequest.GetSize();
			if (this._netStream !== null) {
				this._netStream.DownloadComplete(Math.floor(num));
			}
		}
		internalWebRequest.remove_Completed(JSIL.Delegate.New("System.EventHandler", this, $asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.Completed));
		internalWebRequest.remove_DownloadFailed(JSIL.Delegate.New("MS.Internal.ErrorEventHandler", this, $asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.Failed));
		internalWebRequest.remove_DownloadProgressChanged(JSIL.Delegate.New("System.EventHandler", this, $asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.Progress));
	} finally {
		System.Threading.Monitor.Exit(lockObject);
	}
};
$asm02.System.Net.Browser.BrowserHttpWebRequest.InvokeGetRequestStreamCallback = function (state) {
	var lockObject = null;
	var $l$gc__DisplayClass = new $asm02.System.Net.Browser.BrowserHttpWebRequest.$l$gc__DisplayClass9();
	$asm02.System.Net.Browser.AsyncHelper.ThrowOnNonUIThread();
	$l$gc__DisplayClass.req = JSIL.TryCast(state, $asm02.System.Net.Browser.BrowserHttpWebRequest);
	System.Threading.Monitor.Enter((lockObject = $l$gc__DisplayClass.req._lockObject));
	try {
		if (!$l$gc__DisplayClass.req._getReqStrmFired) {
			$l$gc__DisplayClass.req._getReqStrmFired = true;
			$l$gc__DisplayClass.req._getReqStrmResult.Finish(false);
			System.Threading.ThreadPool.QueueUserWorkItem$0(function (state2) {
					$l$gc__DisplayClass.req._getReqStrmCallback($l$gc__DisplayClass.req._getReqStrmResult);
				}, null);
		}
	} finally {
		System.Threading.Monitor.Exit(lockObject);
	}
};
$asm02.System.Net.Browser.BrowserHttpWebRequest.InvokeGetResponseCallback = function (state) {
	var lockObject = null;
	var $l$gc__DisplayClassd = new $asm02.System.Net.Browser.BrowserHttpWebRequest.$l$gc__DisplayClassd();
	$asm02.System.Net.Browser.AsyncHelper.ThrowOnNonUIThread();
	$l$gc__DisplayClassd.req = JSIL.TryCast(state, $asm02.System.Net.Browser.BrowserHttpWebRequest);
	System.Threading.Monitor.Enter((lockObject = $l$gc__DisplayClassd.req._lockObject));
	try {
		if (!$l$gc__DisplayClassd.req._getResponseFired) {
			$l$gc__DisplayClassd.req._getResponseFired = true;
			$l$gc__DisplayClassd.req._getResponseResult.Finish(false);
			System.Threading.ThreadPool.QueueUserWorkItem$0(function (state2) {
					$l$gc__DisplayClassd.req._getResponseCallback($l$gc__DisplayClassd.req._getResponseResult);
				}, null);
		}
	} finally {
		System.Threading.Monitor.Exit(lockObject);
	}
};
JSIL.MakeProperty($asm02.System.Net.Browser.BrowserHttpWebRequest.prototype, "HaveResponse", 
	$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.get_HaveResponse, null);
JSIL.MakeProperty($asm02.System.Net.Browser.BrowserHttpWebRequest.prototype, "Method", 
	$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.get_Method, $asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.set_Method);
JSIL.MakeProperty($asm02.System.Net.Browser.BrowserHttpWebRequest.prototype, "RequestUri", 
	$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.get_RequestUri, null);
JSIL.MakeProperty($asm02.System.Net.Browser.BrowserHttpWebRequest.prototype, "AllowReadStreamBuffering", 
	$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.get_AllowReadStreamBuffering, $asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.set_AllowReadStreamBuffering);
JSIL.MakeProperty($asm02.System.Net.Browser.BrowserHttpWebRequest.prototype, "AllowWriteStreamBuffering", 
	$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.get_AllowWriteStreamBuffering, $asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.set_AllowWriteStreamBuffering);
JSIL.MakeProperty($asm02.System.Net.Browser.BrowserHttpWebRequest.prototype, "ContentLength", 
	$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.get_ContentLength, $asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.set_ContentLength);
JSIL.MakeProperty($asm02.System.Net.Browser.BrowserHttpWebRequest.prototype, "CreatorInstance", 
	$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.get_CreatorInstance, null);
JSIL.MakeProperty($asm02.System.Net.Browser.BrowserHttpWebRequest.prototype, "UseDefaultCredentials", 
	$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.get_UseDefaultCredentials, $asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.set_UseDefaultCredentials);
JSIL.MakeProperty($asm02.System.Net.Browser.BrowserHttpWebRequest.prototype, "AllowAutoRedirect", 
	$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.get_AllowAutoRedirect, $asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.set_AllowAutoRedirect);
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.ProgressChanged = null;
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.ProgressCompleted = null;
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype.ProgressFailed = null;
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype._response = null;
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype._method = null;
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype._aborted = false;
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype._finished = false;
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype._internalStream = null;
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype._exposedReqStream = null;
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype._getReqStrmCallback = null;
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype._getReqStrmResult = null;
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype._getReqStrmFired = false;
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype._getResponseCallback = null;
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype._getResponseResult = null;
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype._getResponseFired = false;
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype._reqUri = null;
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype._state = 0;
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype._allowBuffering = false;
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype._netStream = null;
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype._lockObject = null;
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype._exception = null;
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype._expectedContentLength = 0;
$asm02.System.Net.Browser.BrowserHttpWebRequest.prototype._wr = null;

$asm02.System.Net.Browser.BrowserHttpWebRequest.$l$gc__DisplayClass2.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm02.System.Net.Browser.BrowserHttpWebRequest.$l$gc__DisplayClass2.prototype.stream = null;
$asm02.System.Net.Browser.BrowserHttpWebRequest.$l$gc__DisplayClass2.prototype.$this = null;
$asm02.System.Net.Browser.BrowserHttpWebRequest.$l$gc__DisplayClass2.prototype.asyncResult = null;

$asm02.System.Net.Browser.BrowserHttpWebRequest.$l$gc__DisplayClass5.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm02.System.Net.Browser.BrowserHttpWebRequest.$l$gc__DisplayClass5.prototype.response = null;
$asm02.System.Net.Browser.BrowserHttpWebRequest.$l$gc__DisplayClass5.prototype.$this = null;
$asm02.System.Net.Browser.BrowserHttpWebRequest.$l$gc__DisplayClass5.prototype.asyncResult = null;

$asm02.System.Net.Browser.BrowserHttpWebRequest.$l$gc__DisplayClass9.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm02.System.Net.Browser.BrowserHttpWebRequest.$l$gc__DisplayClass9.prototype.req = null;

$asm02.System.Net.Browser.BrowserHttpWebRequest.$l$gc__DisplayClassd.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm02.System.Net.Browser.BrowserHttpWebRequest.$l$gc__DisplayClassd.prototype.req = null;

$asm02.System.Net.Browser.BrowserHttpWebResponse.prototype._ctor$0 = function (method, url, status, mime, stream) {
	System.Net.HttpWebResponse.prototype._ctor.call(this);
	this._method = method;
	this._statusCode = status;
	if (status === System.Net.HttpStatusCode.OK) {
		this._statusDescription = "OK";
	} else if (status === System.Net.HttpStatusCode.NotFound) {
		this._statusDescription = "Not Found";
	} else {
		this._statusDescription = "Unknown";
	}
	this._contentType = mime;
	this._responseUri = url;
	this._responseStream = stream;
	if (stream === null) {
		this._length = 0;
		return;
	}
	if (stream.CanSeek) {
		this._length = stream.Length;
		return;
	}
	this._length = -1;
};
$asm02.System.Net.Browser.BrowserHttpWebResponse.prototype._ctor$1 = function (method, url, status, mime, stream, expectedLen) {
	System.Net.HttpWebResponse.prototype._ctor.call(this);
	this._method = method;
	this._statusCode = status;
	if (status === System.Net.HttpStatusCode.OK) {
		this._statusDescription = "OK";
	} else if (status === System.Net.HttpStatusCode.NotFound) {
		this._statusDescription = "Not Found";
	} else {
		this._statusDescription = "Unknown";
	}
	this._contentType = mime;
	this._responseUri = url;
	this._responseStream = stream;
	if (stream === null) {
		this._length = 0;
		return;
	}
	if (stream.CanSeek) {
		this._length = stream.Length;
		return;
	}
	this._length = expectedLen;
};
$asm02.System.Net.Browser.BrowserHttpWebResponse.prototype.get_Method = function () {
	return this._method;
};
$asm02.System.Net.Browser.BrowserHttpWebResponse.prototype.get_StatusCode = function () {
	return this._statusCode;
};
$asm02.System.Net.Browser.BrowserHttpWebResponse.prototype.get_StatusDescription = function () {
	return this._statusDescription;
};
$asm02.System.Net.Browser.BrowserHttpWebResponse.prototype.get_ContentLength = function () {
	return this._length;
};
$asm02.System.Net.Browser.BrowserHttpWebResponse.prototype.get_ContentType = function () {
	return this._contentType;
};
$asm02.System.Net.Browser.BrowserHttpWebResponse.prototype.get_ResponseUri = function () {
	return this._responseUri;
};
$asm02.System.Net.Browser.BrowserHttpWebResponse.prototype.GetResponseStream = function () {
	return this._responseStream;
};
$asm02.System.Net.Browser.BrowserHttpWebResponse.prototype.Close = function () {
	if (this._responseStream !== null) {
		this._responseStream.Close();
	}
};
JSIL.OverloadedMethod($asm02.System.Net.Browser.BrowserHttpWebResponse.prototype, "_ctor", [
		["_ctor$0", [System.String, System.Uri, System.Net.HttpStatusCode, System.String, System.IO.Stream]], 
		["_ctor$1", [System.String, System.Uri, System.Net.HttpStatusCode, System.String, System.IO.Stream, System.Int64]]
	]);
JSIL.MakeProperty($asm02.System.Net.Browser.BrowserHttpWebResponse.prototype, "Method", 
	$asm02.System.Net.Browser.BrowserHttpWebResponse.prototype.get_Method, null);
JSIL.MakeProperty($asm02.System.Net.Browser.BrowserHttpWebResponse.prototype, "StatusCode", 
	$asm02.System.Net.Browser.BrowserHttpWebResponse.prototype.get_StatusCode, null);
JSIL.MakeProperty($asm02.System.Net.Browser.BrowserHttpWebResponse.prototype, "StatusDescription", 
	$asm02.System.Net.Browser.BrowserHttpWebResponse.prototype.get_StatusDescription, null);
JSIL.MakeProperty($asm02.System.Net.Browser.BrowserHttpWebResponse.prototype, "ContentLength", 
	$asm02.System.Net.Browser.BrowserHttpWebResponse.prototype.get_ContentLength, null);
JSIL.MakeProperty($asm02.System.Net.Browser.BrowserHttpWebResponse.prototype, "ContentType", 
	$asm02.System.Net.Browser.BrowserHttpWebResponse.prototype.get_ContentType, null);
JSIL.MakeProperty($asm02.System.Net.Browser.BrowserHttpWebResponse.prototype, "ResponseUri", 
	$asm02.System.Net.Browser.BrowserHttpWebResponse.prototype.get_ResponseUri, null);
$asm02.System.Net.Browser.BrowserHttpWebResponse.prototype._method = null;
$asm02.System.Net.Browser.BrowserHttpWebResponse.prototype._statusCode = 0;
$asm02.System.Net.Browser.BrowserHttpWebResponse.prototype._statusDescription = null;
$asm02.System.Net.Browser.BrowserHttpWebResponse.prototype._length = 0;
$asm02.System.Net.Browser.BrowserHttpWebResponse.prototype._contentType = null;
$asm02.System.Net.Browser.BrowserHttpWebResponse.prototype._responseUri = null;
$asm02.System.Net.Browser.BrowserHttpWebResponse.prototype._responseStream = null;

$asm02.System.Net.Browser.ClientHttpWebRequestCreator.prototype.Create = function (uri) {
	var $l$gc__DisplayClass = new $asm02.System.Net.Browser.ClientHttpWebRequestCreator.$l$gc__DisplayClass1();
	$l$gc__DisplayClass.uri = uri;
	if ($asm02.MS.Internal.XcpImports.OnMainThread()) {
		return JSIL.New($asm02.System.Net.Browser.ClientHttpWebRequest, "_ctor$1", [$l$gc__DisplayClass.uri]);
	}
	$l$gc__DisplayClass.webRequest = null;
	$asm02.System.Net.Browser.AsyncHelper.BeginOnUI$0(function (context) {
			$l$gc__DisplayClass.webRequest = JSIL.New($asm02.System.Net.Browser.ClientHttpWebRequest, "_ctor$1", [$l$gc__DisplayClass.uri]);
		}, null);
	return $l$gc__DisplayClass.webRequest;
};
$asm02.System.Net.Browser.ClientHttpWebRequestCreator.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};

$asm02.System.Net.Browser.ClientHttpWebRequestCreator.$l$gc__DisplayClass1.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm02.System.Net.Browser.ClientHttpWebRequestCreator.$l$gc__DisplayClass1.prototype.webRequest = null;
$asm02.System.Net.Browser.ClientHttpWebRequestCreator.$l$gc__DisplayClass1.prototype.uri = null;

$asm02.System.Net.Browser.UnsafeClientHttpWebRequestCreatorCallbacks.CreateOnUi = function (context) {
	$asm02.System.Net.Browser.UnsafeClientHttpWebRequestCreator.CreateOnUi(context);
};

$asm02.System.Net.Browser.UnsafeClientHttpWebRequestCreator.prototype.Create = function (uri) {
	if ($asm02.MS.Internal.XcpImports.OnMainThread()) {
		return JSIL.New($asm02.System.Net.Browser.ClientHttpWebRequest, "_ctor$0", [uri, false]);
	}
	var contextObject = new $asm02.System.Net.Browser.UnsafeClientHttpWebRequestCreator.ContextObject();
	contextObject.Uri = uri;
	$asm02.System.Net.Browser.AsyncHelper.BeginOnUI$0(JSIL.Delegate.New("System.Threading.SendOrPostCallback", null, $asm02.System.Net.Browser.UnsafeClientHttpWebRequestCreatorCallbacks.CreateOnUi), contextObject);
	return contextObject.WebRequest;
};
$asm02.System.Net.Browser.UnsafeClientHttpWebRequestCreator.CreateOnUi = function (context) {
	var contextObject = JSIL.Cast(context, $asm02.System.Net.Browser.UnsafeClientHttpWebRequestCreator.ContextObject);
	contextObject.WebRequest = JSIL.New($asm02.System.Net.Browser.ClientHttpWebRequest, "_ctor$0", [contextObject.Uri, false]);
};
$asm02.System.Net.Browser.UnsafeClientHttpWebRequestCreator.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};

$asm02.System.Net.Browser.UnsafeClientHttpWebRequestCreator.ContextObject.prototype.get_WebRequest = function () {
	return this._webRequest;
};
$asm02.System.Net.Browser.UnsafeClientHttpWebRequestCreator.ContextObject.prototype.set_WebRequest = function (value) {
	this._webRequest = value;
};
$asm02.System.Net.Browser.UnsafeClientHttpWebRequestCreator.ContextObject.prototype.get_Uri = function () {
	return this._uri;
};
$asm02.System.Net.Browser.UnsafeClientHttpWebRequestCreator.ContextObject.prototype.set_Uri = function (value) {
	this._uri = value;
};
$asm02.System.Net.Browser.UnsafeClientHttpWebRequestCreator.ContextObject.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
JSIL.MakeProperty($asm02.System.Net.Browser.UnsafeClientHttpWebRequestCreator.ContextObject.prototype, "WebRequest", 
	$asm02.System.Net.Browser.UnsafeClientHttpWebRequestCreator.ContextObject.prototype.get_WebRequest, $asm02.System.Net.Browser.UnsafeClientHttpWebRequestCreator.ContextObject.prototype.set_WebRequest);
JSIL.MakeProperty($asm02.System.Net.Browser.UnsafeClientHttpWebRequestCreator.ContextObject.prototype, "Uri", 
	$asm02.System.Net.Browser.UnsafeClientHttpWebRequestCreator.ContextObject.prototype.get_Uri, $asm02.System.Net.Browser.UnsafeClientHttpWebRequestCreator.ContextObject.prototype.set_Uri);
$asm02.System.Net.Browser.UnsafeClientHttpWebRequestCreator.ContextObject.prototype._uri = null;
$asm02.System.Net.Browser.UnsafeClientHttpWebRequestCreator.ContextObject.prototype._webRequest = null;

$asm02.System.Net.Browser.OHWRAsyncResult.prototype._ctor = function (state) {
	System.Object.prototype._ctor.call(this);
	this._state = state;
	this._sync = false;
	this._completed = false;
};
$asm02.System.Net.Browser.OHWRAsyncResult.prototype.get_AsyncState = function () {
	return this._state;
};
$asm02.System.Net.Browser.OHWRAsyncResult.prototype.get_CompletedSynchronously = function () {
	return this._sync;
};
$asm02.System.Net.Browser.OHWRAsyncResult.prototype.get_IsCompleted = function () {
	return this._completed;
};
$asm02.System.Net.Browser.OHWRAsyncResult.prototype.get_AsyncWaitHandle = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm02.System.Net.Browser.OHWRAsyncResult.prototype.Finish = function (sync) {
	this._completed = true;
	this._sync = sync;
};
JSIL.MakeProperty($asm02.System.Net.Browser.OHWRAsyncResult.prototype, "AsyncState", 
	$asm02.System.Net.Browser.OHWRAsyncResult.prototype.get_AsyncState, null);
JSIL.MakeProperty($asm02.System.Net.Browser.OHWRAsyncResult.prototype, "CompletedSynchronously", 
	$asm02.System.Net.Browser.OHWRAsyncResult.prototype.get_CompletedSynchronously, null);
JSIL.MakeProperty($asm02.System.Net.Browser.OHWRAsyncResult.prototype, "IsCompleted", 
	$asm02.System.Net.Browser.OHWRAsyncResult.prototype.get_IsCompleted, null);
JSIL.MakeProperty($asm02.System.Net.Browser.OHWRAsyncResult.prototype, "AsyncWaitHandle", 
	$asm02.System.Net.Browser.OHWRAsyncResult.prototype.get_AsyncWaitHandle, null);
$asm02.System.Net.Browser.OHWRAsyncResult.prototype._state = null;
$asm02.System.Net.Browser.OHWRAsyncResult.prototype._sync = false;
$asm02.System.Net.Browser.OHWRAsyncResult.prototype._completed = false;

$asm02.System.Net.Browser.AuthenticationThrottle.LogAuthenticationFailure = function (requestUri) {
	var authFailures = null;
	System.Threading.Monitor.Enter((authFailures = $asm02.System.Net.Browser.AuthenticationThrottle._authFailures));
	try {
		var text = $asm02.System.Net.Browser.AuthenticationThrottle.KeyFromUri(requestUri);
		if (!text.Equals$2($asm02.System.Net.Browser.AuthenticationThrottle._baseUriKey, System.StringComparison.OrdinalIgnoreCase)) {
			if ($asm02.System.Net.Browser.AuthenticationThrottle._authFailures.ContainsKey(text)) {
				if (($asm02.System.Net.Browser.AuthenticationThrottle._authFailures.get_Item(text).Failures += 1) === 4) {
					$asm02.System.Net.Browser.AuthenticationThrottle._authFailures.get_Item(text).LockTime = System.DateTime.Now.MemberwiseClone();
				}
			} else {
				$asm02.System.Net.Browser.AuthenticationThrottle._authFailures.set_Item(text, new $asm02.System.Net.Browser.AuthenticationThrottle.ThrottleEntry());
				$asm02.System.Net.Browser.AuthenticationThrottle._authFailures.get_Item(text).Failures = 1;
			}
		}
	} finally {
		System.Threading.Monitor.Exit(authFailures);
	}
};
$asm02.System.Net.Browser.AuthenticationThrottle.AllowAuthenticationOnRequest = function (requestUri) {
	var authFailures = null;
	var result = true;
	System.Threading.Monitor.Enter((authFailures = $asm02.System.Net.Browser.AuthenticationThrottle._authFailures));
	try {
		var text = $asm02.System.Net.Browser.AuthenticationThrottle.KeyFromUri(requestUri);
		if (!(text.Equals$2($asm02.System.Net.Browser.AuthenticationThrottle._baseUriKey, System.StringComparison.OrdinalIgnoreCase) || 
				!$asm02.System.Net.Browser.AuthenticationThrottle._authFailures.ContainsKey(text) || ($asm02.System.Net.Browser.AuthenticationThrottle._authFailures.get_Item(text).Failures < 4))) {
			if (System.DateTime.Now.Subtract$0($asm02.System.Net.Browser.AuthenticationThrottle._authFailures.get_Item(text).LockTime.MemberwiseClone()).TotalSeconds > 90) {
				$asm02.System.Net.Browser.AuthenticationThrottle._authFailures.get_Item(text).Failures = 0;
				result = true;
			} else {
				result = false;
			}
		}
	} finally {
		System.Threading.Monitor.Exit(authFailures);
	}
	return result;
};
$asm02.System.Net.Browser.AuthenticationThrottle.KeyFromUri = function (requestUri) {
	var components = requestUri.GetComponents((System.UriComponents.Host | System.UriComponents.Port | System.UriComponents.Scheme | System.UriComponents.SchemeAndServer), System.UriFormat.SafeUnescaped);
	return components.ToLower$0();
};
Object.defineProperty($asm02.System.Net.Browser.AuthenticationThrottle, "c_maximumFailures", {
		"value": 4}
);
Object.defineProperty($asm02.System.Net.Browser.AuthenticationThrottle, "c_timeout", {
		"value": 90}
);
$asm02.System.Net.Browser.AuthenticationThrottle._authFailures = null;
$asm02.System.Net.Browser.AuthenticationThrottle._baseUriKey = null;
$asm02.System.Net.Browser.AuthenticationThrottle._cctor = function () {
	if ($asm02.System.Net.Browser.AuthenticationThrottle._authFailures === null) {
		$asm02.System.Net.Browser.AuthenticationThrottle._authFailures = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.String, $asm02.System.Net.Browser.AuthenticationThrottle.ThrottleEntry), "_ctor$0", []);
	}
	$asm02.System.Net.Browser.AuthenticationThrottle._baseUriKey = $asm02.System.Net.Browser.AuthenticationThrottle.KeyFromUri($asm02.System.Windows.Hosting.NativeHost.Current.FinalSource);
};

$asm02.System.Net.Browser.AuthenticationThrottle.ThrottleEntry.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
	this.Failures = 0;
	this.LockTime = System.DateTime.Now.MemberwiseClone();
};
$asm02.System.Net.Browser.AuthenticationThrottle.ThrottleEntry.prototype.Failures = 0;

$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.add_ProgressChanged = function (value) {
	this.ProgressChanged = System.Delegate.Combine(this.ProgressChanged, value);
};
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.remove_ProgressChanged = function (value) {
	this.ProgressChanged = System.Delegate.Remove(this.ProgressChanged, value);
};
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.add_ProgressCompleted = function (value) {
	this.ProgressCompleted = System.Delegate.Combine(this.ProgressCompleted, value);
};
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.remove_ProgressCompleted = function (value) {
	this.ProgressCompleted = System.Delegate.Remove(this.ProgressCompleted, value);
};
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.add_ProgressFailed = function (value) {
	this.ProgressFailed = System.Delegate.Combine(this.ProgressFailed, value);
};
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.remove_ProgressFailed = function (value) {
	this.ProgressFailed = System.Delegate.Remove(this.ProgressFailed, value);
};
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype._ctor$0 = function (uri, requirePolicyCheck) {
	System.Net.HttpWebRequest.prototype._ctor.call(this);
	this._response = null;
	this._method = "GET";
	this._finalMethod = "GET";
	this._aborted = false;
	this._internalStream = null;
	this._exposedReqStream = null;
	this._getReqStrmCallback = null;
	this._getReqStrmResult = null;
	this._getReqStrmFired = false;
	this._getResponseCallback = null;
	this._getResponseResult = null;
	this._getResponseFired = false;
	this._reqUri = uri;
	this._wr = JSIL.New($asm02.MS.Internal.InternalWebRequest, "_ctor$0", []);
	this._wr.OperatingSystemStack = true;
	this._finished = false;
	this._state = $asm02.System.Net.Browser.ClientHttpWebRequest.ClientHttpWebRequestState.Ready;
	this._allowBuffering = true;
	this._netStream = null;
	this._lockObject = new System.Object();
	this._exception = null;
	this._cookieContainer = null;
	this._credentials = null;
	if ($asm02.MS.Internal.QuirksMode.ShouldUseDefaultCredentialsByDefault()) {
		this._useDefaultCredentials = true;
	} else {
		this._useDefaultCredentials = false;
	}
	this._requirePolicyCheck = requirePolicyCheck;
	this._madeProgress = false;
	this._redirectCount = 0;
	this._redirecting = false;
	this._responseHeaders = null;
	this._responseStatus = System.Net.HttpStatusCode.NotFound;
	this._allowWriteStreamBuffering = true;
	this._expectedContentLength = -1;
};
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype._ctor$1 = function (uri) {
	this._ctor$0(uri, true);
};
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.get_HaveResponse = function () {
	return (this._response !== null);
};
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.get_Method = function () {
	return this._method;
};
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.set_Method = function (value) {
	var lockObject = null;
	if (!(!System.String.IsNullOrEmpty(value) && (value.length <= 64))) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("HttpWebRequest_UnsupportedMethod")]);
	}
	var anyOf = JSIL.Array.New(System.Char, ["(", ")", "<", ">", "@", ",", ";", ":", "\\", '"', "/", "[", "]", "?", "=", "{", "}", " ", "\t"]);
	if (value.IndexOfAny$0(anyOf) !== -1) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("HttpWebRequest_InvalidMethod")]);
	}
__loop0__: 
	for (var i = 0; i < value.length; ++i) {
		var c = (value[i]);
		if (!((c > "\x1f") && (c < ""))) {
			throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("HttpWebRequest_InvalidMethod")]);
		}
	}
	if (!((System.String.Compare$1(value, "trace", System.StringComparison.OrdinalIgnoreCase) !== 0) && 
			(System.String.Compare$1(value, "track", System.StringComparison.OrdinalIgnoreCase) !== 0) && (System.String.Compare$1(value, "connect", System.StringComparison.OrdinalIgnoreCase) !== 0))) {
		throw JSIL.New(System.NotSupportedException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("HttpWebRequest_UnsupportedMethod")]);
	}
	System.Threading.Monitor.Enter((lockObject = this._lockObject));
	try {
		if (this._state > $asm02.System.Net.Browser.ClientHttpWebRequest.ClientHttpWebRequestState.Ready) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("HttpWebRequest_InvalidState", ["Method"])]);
		}
		this._method = value;
		this._finalMethod = this._method;
	} finally {
		System.Threading.Monitor.Exit(lockObject);
	}
};
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.get_RequestUri = function () {
	return this._reqUri;
};
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.get_AllowReadStreamBuffering = function () {
	return this._allowBuffering;
};
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.set_AllowReadStreamBuffering = function (value) {
	var lockObject = null;
	System.Threading.Monitor.Enter((lockObject = this._lockObject));
	try {
		if (this._state > $asm02.System.Net.Browser.ClientHttpWebRequest.ClientHttpWebRequestState.Ready) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("HttpWebRequest_InvalidState", ["AllowReadStreamBuffering"])]);
		}
		this._allowBuffering = value;
	} finally {
		System.Threading.Monitor.Exit(lockObject);
	}
};
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.get_AllowWriteStreamBuffering = function () {
	return this._allowWriteStreamBuffering;
};
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.set_AllowWriteStreamBuffering = function (value) {
	var lockObject = null;
	System.Threading.Monitor.Enter((lockObject = this._lockObject));
	try {
		if (this._state > $asm02.System.Net.Browser.ClientHttpWebRequest.ClientHttpWebRequestState.Ready) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("HttpWebRequest_InvalidState", ["AllowWriteStreamBuffering"])]);
		}
		this._allowWriteStreamBuffering = value;
	} finally {
		System.Threading.Monitor.Exit(lockObject);
	}
};
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.get_ContentLength = function () {
	return this._expectedContentLength;
};
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.set_ContentLength = function (value) {
	var lockObject = null;
	System.Threading.Monitor.Enter((lockObject = this._lockObject));
	try {
		if (this._state > $asm02.System.Net.Browser.ClientHttpWebRequest.ClientHttpWebRequestState.Ready) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("HttpWebRequest_InvalidState", ["ContentLength"])]);
		}
		this._expectedContentLength = value;
	} finally {
		System.Threading.Monitor.Exit(lockObject);
	}
};
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.get_CookieContainer = function () {
	return this._cookieContainer;
};
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.set_CookieContainer = function (value) {
	var lockObject = null;
	System.Threading.Monitor.Enter((lockObject = this._lockObject));
	try {
		if (this._state > $asm02.System.Net.Browser.ClientHttpWebRequest.ClientHttpWebRequestState.Ready) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("HttpWebRequest_InvalidState", ["CookieContainer"])]);
		}
		this._cookieContainer = value;
	} finally {
		System.Threading.Monitor.Exit(lockObject);
	}
};
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.get_SupportsCookieContainer = function () {
	return true;
};
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.get_CreatorInstance = function () {
	return System.Net.Browser.WebRequestCreator.ClientHttp;
};
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.get_Credentials = function () {
	return this._credentials;
};
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.set_Credentials = function (value) {
	var lockObject = null;
	System.Threading.Monitor.Enter((lockObject = this._lockObject));
	try {
		if (this._state > $asm02.System.Net.Browser.ClientHttpWebRequest.ClientHttpWebRequestState.Ready) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("HttpWebRequest_InvalidState", ["Credentials"])]);
		}
		this._credentials = value;
	} finally {
		System.Threading.Monitor.Exit(lockObject);
	}
};
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.get_UseDefaultCredentials = function () {
	return this._useDefaultCredentials;
};
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.set_UseDefaultCredentials = function (value) {
	var lockObject = null;
	System.Threading.Monitor.Enter((lockObject = this._lockObject));
	try {
		if (this._state > $asm02.System.Net.Browser.ClientHttpWebRequest.ClientHttpWebRequestState.Ready) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("HttpWebRequest_InvalidState", ["UseDefaultCredentials"])]);
		}
		this._useDefaultCredentials = value;
	} finally {
		System.Threading.Monitor.Exit(lockObject);
	}
};
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.GetUserAgent = function () {
	$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
	return "";
};
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.SetUserAgent = function (value) {
	$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
};
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.get_AllowAutoRedirect = function () {
	$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
	return false;
};
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.set_AllowAutoRedirect = function (value) {
	$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
};
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.Abort = function () {
	if ($asm02.MS.Internal.XcpImports.OnMainThread()) {
		this.AbortImplementation();
		return;
	}
	$asm02.System.Net.Browser.AsyncHelper.BeginOnUI$0(function (sendState) {
			this.AbortImplementation();
		}, null);
};
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.AbortImplementation = function () {
	var lockObject = null;
	$asm02.System.Net.Browser.AsyncHelper.ThrowOnNonUIThread();
	System.Threading.Monitor.Enter((lockObject = this._lockObject));
	try {
		if (!this._aborted) {
			this._wr.Abort();
			this._aborted = true;
			if (this._state === $asm02.System.Net.Browser.ClientHttpWebRequest.ClientHttpWebRequestState.GettingRequestStream) {
				$asm02.System.Net.Browser.ClientHttpWebRequest.InvokeGetRequestStreamCallback(this);
			} else if (this._state === $asm02.System.Net.Browser.ClientHttpWebRequest.ClientHttpWebRequestState.GettingResponse) {
				$asm02.System.Net.Browser.ClientHttpWebRequest.InvokeGetResponseCallback(this);
			}
			this._wr.remove_Completed(JSIL.Delegate.New("System.EventHandler", this, $asm02.System.Net.Browser.ClientHttpWebRequest.prototype.Completed));
			this._wr.remove_DownloadFailed(JSIL.Delegate.New("MS.Internal.ErrorEventHandler", this, $asm02.System.Net.Browser.ClientHttpWebRequest.prototype.Failed));
			this._wr.remove_DownloadProgressChanged(JSIL.Delegate.New("System.EventHandler", this, $asm02.System.Net.Browser.ClientHttpWebRequest.prototype.Progress));
		}
	} finally {
		System.Threading.Monitor.Exit(lockObject);
	}
};
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.BeginGetRequestStream = function (callback, state) {
	return $asm02.System.Net.Browser.AsyncHelper.BeginOnUI$1(JSIL.Delegate.New("System.Net.Browser.BeginMethod", this, $asm02.System.Net.Browser.ClientHttpWebRequest.prototype.InternalBeginGetRequestStream), callback, state);
};
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.InternalBeginGetRequestStream = function (callback, state) {
	var lockObject = null;
	$asm02.System.Net.Browser.AsyncHelper.ThrowOnNonUIThread();
	System.Threading.Monitor.Enter((lockObject = this._lockObject));
	try {
		if (this._aborted) {
			throw JSIL.New(System.Net.WebException, "_ctor$3", [null, System.Net.WebExceptionStatus.RequestCanceled]);
		}
		if (!(!System.String.Equals$1(this._method, "get", System.StringComparison.OrdinalIgnoreCase) && !System.String.Equals$1(this._method, "head", System.StringComparison.OrdinalIgnoreCase))) {
			throw JSIL.New(System.Net.ProtocolViolationException, "_ctor$0", []);
		}
		if (this._state >= $asm02.System.Net.Browser.ClientHttpWebRequest.ClientHttpWebRequestState.GettingRequestStream) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
		}
		if (!(this._allowWriteStreamBuffering || (this._expectedContentLength >= 0))) {
			throw JSIL.New(System.Net.ProtocolViolationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("HttpWebRequest_ContentLengthNotSet")]);
		}
		this._state = $asm02.System.Net.Browser.ClientHttpWebRequest.ClientHttpWebRequestState.GettingRequestStream;
		this._getReqStrmCallback = callback;
		this._getReqStrmResult = null;
		this._getReqStrmResult = new $asm02.System.Net.Browser.OHWRAsyncResult(state);
		if (!(this._allowWriteStreamBuffering || (this._expectedContentLength <= 0))) {
			this._internalStream = new $asm02.MS.Internal.ProgressiveUploadStream(this._wr, this._expectedContentLength);
			this.PrepareAndSendRequest(
				this._method, 
				this._reqUri, 
				this._internalStream, 
				this.Headers, 
				this._cookieContainer
			);
		} else {
			$asm02.System.Net.Browser.ClientHttpWebRequest.InvokeGetRequestStreamCallback(this);
		}
	} finally {
		System.Threading.Monitor.Exit(lockObject);
	}
	return this._getReqStrmResult;
};
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.BeginGetResponse = function (callback, state) {
	if (callback === null) {
		throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
	}
	return $asm02.System.Net.Browser.AsyncHelper.BeginOnUI$1(JSIL.Delegate.New("System.Net.Browser.BeginMethod", this, $asm02.System.Net.Browser.ClientHttpWebRequest.prototype.InternalBeginGetResponse), callback, state);
};
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.InternalBeginGetResponse = function (callback, state) {
	var lockObject = null;
	$asm02.System.Net.Browser.AsyncHelper.ThrowOnNonUIThread();
	System.Threading.Monitor.Enter((lockObject = this._lockObject));
	try {
		this._getResponseCallback = callback;
		this._getResponseResult = null;
		if (this._aborted) {
			throw JSIL.New(System.Net.WebException, "_ctor$3", [null, System.Net.WebExceptionStatus.RequestCanceled]);
		}
		if (this._state >= $asm02.System.Net.Browser.ClientHttpWebRequest.ClientHttpWebRequestState.GettingResponse) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
		}
		this._state = $asm02.System.Net.Browser.ClientHttpWebRequest.ClientHttpWebRequestState.GettingResponse;
		this._getResponseResult = new $asm02.System.Net.Browser.OHWRAsyncResult(state);
		this.BeginGetResponseImplementation();
	} finally {
		System.Threading.Monitor.Exit(lockObject);
	}
	return this._getResponseResult;
};
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.BeginGetResponseImplementation = function () {
	var lockObject = null;
	$asm02.System.Net.Browser.AsyncHelper.ThrowOnNonUIThread();
	System.Threading.Monitor.Enter((lockObject = this._lockObject));
	try {
		try {
			if (!(this._allowWriteStreamBuffering || (this._expectedContentLength <= 0))) {
				if (!this._exposedReqStream.IsClosed()) {
					throw JSIL.New(System.NotSupportedException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("HttpWebRequest_RequestStreamNotClosed")]);
				}
				this._wr.CloseRequestStream();
			} else {
				this.PrepareAndSendRequest(
					this._method, 
					this._reqUri, 
					this._internalStream, 
					this.Headers, 
					this._cookieContainer
				);
			}
		} catch ($exception) {
			var arg_74_0 = $exception;
			this._exception = arg_74_0;
			this._response = null;
			$asm02.System.Net.Browser.ClientHttpWebRequest.InvokeGetResponseCallback(this);
		}
	} finally {
		System.Threading.Monitor.Exit(lockObject);
	}
};
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.EndGetRequestStream = function (asyncResult) {
	var $l$gc__DisplayClass = new $asm02.System.Net.Browser.ClientHttpWebRequest.$l$gc__DisplayClass2();
	$l$gc__DisplayClass.asyncResult = asyncResult;
	$l$gc__DisplayClass.$this = this;
	if ($asm02.MS.Internal.XcpImports.OnMainThread()) {
		return this.InternalEndGetRequestStream($l$gc__DisplayClass.asyncResult);
	}
	$l$gc__DisplayClass.stream = null;
	$asm02.System.Net.Browser.AsyncHelper.BeginOnUI$0(function (sendState) {
			$l$gc__DisplayClass.stream = $l$gc__DisplayClass.$this.InternalEndGetRequestStream($l$gc__DisplayClass.asyncResult);
		}, null);
	return $l$gc__DisplayClass.stream;
};
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.InternalEndGetRequestStream = function (asyncResult) {
	var lockObject = null;
	$asm02.System.Net.Browser.AsyncHelper.ThrowOnNonUIThread();
	System.Threading.Monitor.Enter((lockObject = this._lockObject));
	try {
		if (asyncResult === null) {
			throw JSIL.New(System.ArgumentNullException, "_ctor$0", []);
		}
		if (asyncResult !== this._getReqStrmResult) {
			throw JSIL.New(System.ArgumentException, "_ctor$0", []);
		}
		if (this._aborted) {
			this._getReqStrmResult = null;
			throw JSIL.New(System.Net.WebException, "_ctor$3", [null, System.Net.WebExceptionStatus.RequestCanceled]);
		}
		if (this._state !== $asm02.System.Net.Browser.ClientHttpWebRequest.ClientHttpWebRequestState.GettingRequestStream) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
		}
		if (this._exception !== null) {
			throw this._exception;
		}
		this._state = $asm02.System.Net.Browser.ClientHttpWebRequest.ClientHttpWebRequestState.GotRequestStream;
		this._getReqStrmResult = null;
		if (!(!this._allowWriteStreamBuffering && (this._expectedContentLength !== 0))) {
			this._internalStream = JSIL.New(System.IO.MemoryStream, "_ctor$0", []);
		}
		this._exposedReqStream = new $asm02.MS.Internal.InternalWebRequestStream(this._internalStream);
	} finally {
		System.Threading.Monitor.Exit(lockObject);
	}
	return this._exposedReqStream;
};
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.EndGetResponse = function (asyncResult) {
	var $l$gc__DisplayClass = new $asm02.System.Net.Browser.ClientHttpWebRequest.$l$gc__DisplayClass5();
	$l$gc__DisplayClass.asyncResult = asyncResult;
	$l$gc__DisplayClass.$this = this;
	if ($asm02.MS.Internal.XcpImports.OnMainThread()) {
		return this.InternalEndGetResponse($l$gc__DisplayClass.asyncResult);
	}
	$l$gc__DisplayClass.response = null;
	$asm02.System.Net.Browser.AsyncHelper.BeginOnUI$0(function (sendState) {
			$l$gc__DisplayClass.response = $l$gc__DisplayClass.$this.InternalEndGetResponse($l$gc__DisplayClass.asyncResult);
		}, null);
	if ($l$gc__DisplayClass.response === null) {
		this._response = JSIL.New($asm02.System.Net.Browser.ClientHttpWebResponse, "_ctor$0", [this._finalMethod, this._reqUri, System.Net.HttpStatusCode.NotFound, "", new ($asm02.MS.Internal.SecurityCriticalDataForMultipleGetAndSet$b1.Of(System.String)) (""), null, this._cookieContainer]);
		throw JSIL.New(System.Net.WebException, "_ctor$5", [$asm02.System.Windows.Resx.GetString$0("HttpWebRequest_WebException_RemoteServer", [System.Net.HttpStatusCode.NotFound.toString()]), null, System.Net.WebExceptionStatus.UnknownError, this._response]);
	}
	return $l$gc__DisplayClass.response;
};
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.InternalEndGetResponse = function (asyncResult) {
	var lockObject = null;
	$asm02.System.Net.Browser.AsyncHelper.ThrowOnNonUIThread();
	System.Threading.Monitor.Enter((lockObject = this._lockObject));
	try {
		if (asyncResult === null) {
			throw JSIL.New(System.ArgumentNullException, "_ctor$0", []);
		}
		if (asyncResult !== this._getResponseResult) {
			throw JSIL.New(System.ArgumentException, "_ctor$0", []);
		}
		if (this._aborted) {
			this._getResponseResult = null;
			throw JSIL.New(System.Net.WebException, "_ctor$3", [null, System.Net.WebExceptionStatus.RequestCanceled]);
		}
		if (this._state !== $asm02.System.Net.Browser.ClientHttpWebRequest.ClientHttpWebRequestState.GettingResponse) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
		}
		if (this._exception !== null) {
			this._getResponseResult = null;
			throw this._exception;
		}
		this._state = $asm02.System.Net.Browser.ClientHttpWebRequest.ClientHttpWebRequestState.GotResponse;
		this._getResponseResult = null;
	} finally {
		System.Threading.Monitor.Exit(lockObject);
	}
	return this._response;
};
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.CreateProgressChangedEventArgs = function () {
	var lockObject = null;
	System.Threading.Monitor.Enter((lockObject = this._lockObject));
	try {
		var totalSize = this._wr.GetTotalSize();
		var size = this._wr.GetSize();
		var percentage = (totalSize > 0) ? Math.floor((100 * size) / totalSize) : 0;
		var result = new System.Net.NetworkProgressChangedEventArgs(percentage, size, totalSize, null);
	} finally {
		System.Threading.Monitor.Exit(lockObject);
	}
	return result;
};
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.Progress = function (sender, e) {
	var lockObject = null;
	var internalWebRequest = JSIL.Cast(sender, $asm02.MS.Internal.InternalWebRequest);
	System.Threading.Monitor.Enter((lockObject = this._lockObject));
	try {
		try {
			var uri = internalWebRequest.FinalUri;
			if (System.Uri.op_Equality(uri, null)) {
				uri = this._reqUri;
			}
			if (!this._madeProgress) {
				this._madeProgress = true;
				var webHeaderCollection = JSIL.New(System.Net.WebHeaderCollection, "_ctor$0", []);
				var httpStatusCode = new JSIL.Variable(System.Net.HttpStatusCode.OK);
				var text = new JSIL.Variable(null);
				$asm02.System.Net.Browser.HttpWebRequestHelper.ParseHeaders(
					uri, 
					internalWebRequest.ResponseHeaders, 
					webHeaderCollection, 
					true, 
					/* ref */ httpStatusCode, 
					/* ref */ text
				);
				this._responseHeaders = webHeaderCollection;
				this._responseStatus = httpStatusCode.value;
				if (!(!$asm02.System.Net.Browser.HttpWebRequestHelper.IsRedirectStatusCode(httpStatusCode.value) || 
						!this._requirePolicyCheck || 
						(this._redirectCount++ >= 5) || ((Array.prototype.indexOf.call(webHeaderCollection.AllKeys, "Location")) === -1))) {
					this._redirecting = true;
				}
			}
			if (!this._redirecting) {
				if (this.ProgressChanged !== null) {
					this.ProgressChanged(this, this.CreateProgressChangedEventArgs());
				}
				if (!this._allowBuffering) {
					if (!(this._finished || this._aborted)) {
						this._finished = true;
						this._netStream = internalWebRequest.GetNetworkStream();
						this._response = JSIL.New($asm02.System.Net.Browser.ClientHttpWebResponse, "_ctor$1", [this._finalMethod, uri, System.Net.HttpStatusCode.OK, internalWebRequest.Mime, internalWebRequest.ResponseHeaders, this._netStream, internalWebRequest.GetTotalSize(), this._cookieContainer]);
						if ($asm02.System.Net.Browser.HttpWebRequestHelper.IsWebExceptionStatusCode(this._response.StatusCode)) {
							this._exception = JSIL.New(System.Net.WebException, "_ctor$5", [$asm02.System.Windows.Resx.GetString$0("HttpWebRequest_WebException_RemoteServer", [System.Net.HttpStatusCode.NotFound.toString()]), null, System.Net.WebExceptionStatus.UnknownError, this._response]);
						}
						if (this._credentials !== null) {
							if (!$asm02.System.Net.Browser.AuthenticationThrottle.AllowAuthenticationOnRequest(uri)) {
								throw JSIL.New(System.Security.SecurityException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("HttpWebRequest_CredentialsLimitReached", [uri.GetComponents((System.UriComponents.Host | System.UriComponents.Port | System.UriComponents.Scheme | System.UriComponents.SchemeAndServer), System.UriFormat.SafeUnescaped)])]);
							}
							if ($asm02.System.Net.Browser.HttpWebRequestHelper.IsAuthenticationFailureStatusCode(this._response.StatusCode)) {
								$asm02.System.Net.Browser.AuthenticationThrottle.LogAuthenticationFailure(uri);
							}
						}
						$asm02.System.Net.Browser.ClientHttpWebRequest.InvokeGetResponseCallback(this);
					}
					var size = internalWebRequest.GetSize();
					if (this._netStream !== null) {
						this._netStream.DownloadProgress(size);
					}
				}
			}
		} catch ($exception) {
			var arg_1FA_0 = $exception;
			internalWebRequest.remove_Completed(JSIL.Delegate.New("System.EventHandler", this, $asm02.System.Net.Browser.ClientHttpWebRequest.prototype.Completed));
			internalWebRequest.remove_DownloadFailed(JSIL.Delegate.New("MS.Internal.ErrorEventHandler", this, $asm02.System.Net.Browser.ClientHttpWebRequest.prototype.Failed));
			internalWebRequest.remove_DownloadProgressChanged(JSIL.Delegate.New("System.EventHandler", this, $asm02.System.Net.Browser.ClientHttpWebRequest.prototype.Progress));
			this._finished = true;
			this._exception = arg_1FA_0;
			$asm02.System.Net.Browser.ClientHttpWebRequest.InvokeGetResponseCallback(this);
		}
	} finally {
		System.Threading.Monitor.Exit(lockObject);
	}
};
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.Completed = function (sender, e) {
	var __label0__ = null;
__step0__: 
	while (true) {
		switch (__label0__) {
			case null:
				var lockObject = null;
				__label0__ = "__entry0__";
				continue __step0__;
				break;
			case "__entry0__":
				var internalWebRequest = JSIL.Cast(sender, $asm02.MS.Internal.InternalWebRequest);
				System.Threading.Monitor.Enter((lockObject = this._lockObject));
				try {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								try {
									var __label2__ = "__entry2__";
								__step2__: 
									while (true) {
										switch (__label2__) {
											case "__entry2__":
												if (!(!this._redirecting || this._aborted)) {
													var uri = internalWebRequest.FinalUri;
													if (System.Uri.op_Equality(uri, null)) {
														uri = this._reqUri;
													}
													if (this._responseHeaders === null) {
														var webHeaderCollection = JSIL.New(System.Net.WebHeaderCollection, "_ctor$0", []);
														var responseStatus = new JSIL.Variable(System.Net.HttpStatusCode.OK);
														var text = new JSIL.Variable(null);
														$asm02.System.Net.Browser.HttpWebRequestHelper.ParseHeaders(
															uri, 
															internalWebRequest.ResponseHeaders, 
															webHeaderCollection, 
															true, 
															/* ref */ responseStatus, 
															/* ref */ text
														);
														this._responseHeaders = webHeaderCollection;
														this._responseStatus = responseStatus.value;
													}
													var text2 = this._responseHeaders.get_Item$0("Location");
													var requestUri = JSIL.New(System.Uri, "_ctor$2", [uri, text2.Trim$1()]);
													internalWebRequest.remove_Completed(JSIL.Delegate.New("System.EventHandler", this, $asm02.System.Net.Browser.ClientHttpWebRequest.prototype.Completed));
													internalWebRequest.remove_DownloadFailed(JSIL.Delegate.New("MS.Internal.ErrorEventHandler", this, $asm02.System.Net.Browser.ClientHttpWebRequest.prototype.Failed));
													internalWebRequest.remove_DownloadProgressChanged(JSIL.Delegate.New("System.EventHandler", this, $asm02.System.Net.Browser.ClientHttpWebRequest.prototype.Progress));
													this._redirecting = false;
													this._madeProgress = false;
													this._responseHeaders = null;
													this._wr = JSIL.New($asm02.MS.Internal.InternalWebRequest, "_ctor$0", []);
													this._wr.OperatingSystemStack = true;
													try {
														var text3 = this._method;
														if (!((this._responseStatus !== System.Net.HttpStatusCode.RedirectMethod) && (this._responseStatus !== System.Net.HttpStatusCode.Ambiguous))) {
															text3 = "GET";
														} else if (!(text3.Equals$2("GET", System.StringComparison.OrdinalIgnoreCase) || text3.Equals$2("HEAD", System.StringComparison.OrdinalIgnoreCase))) {
															text3 = "GET";
														}
														var webHeaderCollection2 = null;
														if (this.Headers !== null) {
															webHeaderCollection2 = JSIL.New(System.Net.WebHeaderCollection, "_ctor$0", []);
															var allKeys = this.Headers.AllKeys;
														__loop0__: 
															for (var i = 0; i < allKeys.length; ++i) {
																var text4 = allKeys[i];
																if (!$asm02.System.Net.Browser.HttpWebRequestHelper.IsHeaderForContent(text4)) {
																	webHeaderCollection2.set_Item$0(text4, this.Headers.get_Item$0(text4));
																}
															}
														}
														this.PrepareAndSendRequest(
															text3, 
															requestUri, 
															null, 
															webHeaderCollection2, 
															this._cookieContainer
														);
														__label2__ = "IL_35F";
														continue __step2__;
													} catch ($exception) {
														var arg_1BC_0 = $exception;
														this._exception = arg_1BC_0;
														this._response = null;
														$asm02.System.Net.Browser.ClientHttpWebRequest.InvokeGetResponseCallback(this);
														__label2__ = "IL_35F";
														continue __step2__;
													}
												}
												if (this.ProgressCompleted !== null) {
													this.ProgressCompleted(this, this.CreateProgressChangedEventArgs());
												}
												if (!(this._finished || this._aborted)) {
													this._finished = true;
													var responseStream = internalWebRequest.GetResponseStream();
													var uri2 = internalWebRequest.FinalUri;
													if (System.Uri.op_Equality(uri2, null)) {
														uri2 = this._reqUri;
													}
													this._response = JSIL.New($asm02.System.Net.Browser.ClientHttpWebResponse, "_ctor$0", [this._finalMethod, uri2, System.Net.HttpStatusCode.OK, internalWebRequest.Mime, internalWebRequest.ResponseHeaders, responseStream, this._cookieContainer]);
													if ($asm02.System.Net.Browser.HttpWebRequestHelper.IsWebExceptionStatusCode(this._response.StatusCode)) {
														this._exception = JSIL.New(System.Net.WebException, "_ctor$5", [$asm02.System.Windows.Resx.GetString$0("HttpWebRequest_WebException_RemoteServer", [System.Net.HttpStatusCode.NotFound.toString()]), null, System.Net.WebExceptionStatus.UnknownError, this._response]);
													}
													if (this._credentials !== null) {
														if (!$asm02.System.Net.Browser.AuthenticationThrottle.AllowAuthenticationOnRequest(uri2)) {
															throw JSIL.New(System.Security.SecurityException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("HttpWebRequest_CredentialsLimitReached", [uri2.GetComponents((System.UriComponents.Host | System.UriComponents.Port | System.UriComponents.Scheme | System.UriComponents.SchemeAndServer), System.UriFormat.SafeUnescaped)])]);
														}
														if ($asm02.System.Net.Browser.HttpWebRequestHelper.IsAuthenticationFailureStatusCode(this._response.StatusCode)) {
															$asm02.System.Net.Browser.AuthenticationThrottle.LogAuthenticationFailure(uri2);
														}
													}
													$asm02.System.Net.Browser.ClientHttpWebRequest.InvokeGetResponseCallback(this);
													__label2__ = "IL_302";
													continue __step2__;
												}
												__label2__ = "IL_302";
												continue __step2__;
												__label2__ = "IL_35F";
												continue __step2__;
												break;
											case "IL_35F":
												__label1__ = "IL_3B0";
												continue __step1__;
												__label2__ = "IL_302";
												continue __step2__;
												break;
											case "IL_302":
												if (!this._allowBuffering) {
													var num = internalWebRequest.GetSize();
													if (this._netStream !== null) {
														this._netStream.DownloadComplete(Math.floor(num));
													}
												}
												internalWebRequest.remove_Completed(JSIL.Delegate.New("System.EventHandler", this, $asm02.System.Net.Browser.ClientHttpWebRequest.prototype.Completed));
												internalWebRequest.remove_DownloadFailed(JSIL.Delegate.New("MS.Internal.ErrorEventHandler", this, $asm02.System.Net.Browser.ClientHttpWebRequest.prototype.Failed));
												internalWebRequest.remove_DownloadProgressChanged(JSIL.Delegate.New("System.EventHandler", this, $asm02.System.Net.Browser.ClientHttpWebRequest.prototype.Progress));
												break __step2__;
										}
									}
								} catch ($exception) {
									var arg_361_0 = $exception;
									internalWebRequest.remove_Completed(JSIL.Delegate.New("System.EventHandler", this, $asm02.System.Net.Browser.ClientHttpWebRequest.prototype.Completed));
									internalWebRequest.remove_DownloadFailed(JSIL.Delegate.New("MS.Internal.ErrorEventHandler", this, $asm02.System.Net.Browser.ClientHttpWebRequest.prototype.Failed));
									internalWebRequest.remove_DownloadProgressChanged(JSIL.Delegate.New("System.EventHandler", this, $asm02.System.Net.Browser.ClientHttpWebRequest.prototype.Progress));
									this._finished = true;
									this._exception = arg_361_0;
									$asm02.System.Net.Browser.ClientHttpWebRequest.InvokeGetResponseCallback(this);
								}
								__label1__ = "IL_3B0";
								continue __step1__;
								break;
							case "IL_3B0":
								break __step1__;
						}
					}
				} finally {
					System.Threading.Monitor.Exit(lockObject);
				}
				break __step0__;
		}
	}
};
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.Failed = function (sender, e) {
	var lockObject = null;
	var internalWebRequest = JSIL.Cast(sender, $asm02.MS.Internal.InternalWebRequest);
	System.Threading.Monitor.Enter((lockObject = this._lockObject));
	try {
		try {
			if (this.ProgressFailed !== null) {
				this.ProgressFailed(this, this.CreateProgressChangedEventArgs());
			}
			if (!(this._finished || this._aborted)) {
				this._finished = true;
				var uri = internalWebRequest.FinalUri;
				if (System.Uri.op_Equality(uri, null)) {
					uri = this._reqUri;
				}
				if (internalWebRequest.SecurityException) {
					this._response = null;
					this._exception = JSIL.New(System.Security.SecurityException, "_ctor$0", []);
				} else {
					var responseStream = internalWebRequest.GetResponseStream();
					this._response = JSIL.New($asm02.System.Net.Browser.ClientHttpWebResponse, "_ctor$0", [this._finalMethod, uri, System.Net.HttpStatusCode.NotFound, internalWebRequest.Mime, internalWebRequest.ResponseHeaders, responseStream, this._cookieContainer]);
					this._exception = JSIL.New(System.Net.WebException, "_ctor$5", [$asm02.System.Windows.Resx.GetString$0("HttpWebRequest_WebException_RemoteServer", [System.Net.HttpStatusCode.NotFound.toString()]), null, System.Net.WebExceptionStatus.UnknownError, this._response]);
				}
				if (this._state === $asm02.System.Net.Browser.ClientHttpWebRequest.ClientHttpWebRequestState.GettingRequestStream) {
					$asm02.System.Net.Browser.ClientHttpWebRequest.InvokeGetRequestStreamCallback(this);
				} else if (this._state === $asm02.System.Net.Browser.ClientHttpWebRequest.ClientHttpWebRequestState.GettingResponse) {
					$asm02.System.Net.Browser.ClientHttpWebRequest.InvokeGetResponseCallback(this);
				}
			}
			if (!this._allowBuffering) {
				var num = internalWebRequest.GetSize();
				if (this._netStream !== null) {
					this._netStream.DownloadComplete(Math.floor(num));
				}
			}
			internalWebRequest.remove_Completed(JSIL.Delegate.New("System.EventHandler", this, $asm02.System.Net.Browser.ClientHttpWebRequest.prototype.Completed));
			internalWebRequest.remove_DownloadFailed(JSIL.Delegate.New("MS.Internal.ErrorEventHandler", this, $asm02.System.Net.Browser.ClientHttpWebRequest.prototype.Failed));
			internalWebRequest.remove_DownloadProgressChanged(JSIL.Delegate.New("System.EventHandler", this, $asm02.System.Net.Browser.ClientHttpWebRequest.prototype.Progress));
		} catch ($exception) {
			var arg_168_0 = $exception;
			internalWebRequest.remove_Completed(JSIL.Delegate.New("System.EventHandler", this, $asm02.System.Net.Browser.ClientHttpWebRequest.prototype.Completed));
			internalWebRequest.remove_DownloadFailed(JSIL.Delegate.New("MS.Internal.ErrorEventHandler", this, $asm02.System.Net.Browser.ClientHttpWebRequest.prototype.Failed));
			internalWebRequest.remove_DownloadProgressChanged(JSIL.Delegate.New("System.EventHandler", this, $asm02.System.Net.Browser.ClientHttpWebRequest.prototype.Progress));
			this._finished = true;
			this._exception = arg_168_0;
			if (this._state === $asm02.System.Net.Browser.ClientHttpWebRequest.ClientHttpWebRequestState.GettingRequestStream) {
				$asm02.System.Net.Browser.ClientHttpWebRequest.InvokeGetRequestStreamCallback(this);
			} else if (this._state === $asm02.System.Net.Browser.ClientHttpWebRequest.ClientHttpWebRequestState.GettingResponse) {
				$asm02.System.Net.Browser.ClientHttpWebRequest.InvokeGetResponseCallback(this);
			}
		}
	} finally {
		System.Threading.Monitor.Exit(lockObject);
	}
};
$asm02.System.Net.Browser.ClientHttpWebRequest.InvokeGetRequestStreamCallback = function (state) {
	var lockObject = null;
	var $l$gc__DisplayClass = new $asm02.System.Net.Browser.ClientHttpWebRequest.$l$gc__DisplayClass9();
	$asm02.System.Net.Browser.AsyncHelper.ThrowOnNonUIThread();
	$l$gc__DisplayClass.req = JSIL.TryCast(state, $asm02.System.Net.Browser.ClientHttpWebRequest);
	System.Threading.Monitor.Enter((lockObject = $l$gc__DisplayClass.req._lockObject));
	try {
		if (!$l$gc__DisplayClass.req._getReqStrmFired) {
			$l$gc__DisplayClass.req._getReqStrmFired = true;
			$l$gc__DisplayClass.req._getReqStrmResult.Finish(false);
			System.Threading.ThreadPool.QueueUserWorkItem$0(function (state2) {
					$l$gc__DisplayClass.req._getReqStrmCallback($l$gc__DisplayClass.req._getReqStrmResult);
				}, null);
		}
	} finally {
		System.Threading.Monitor.Exit(lockObject);
	}
};
$asm02.System.Net.Browser.ClientHttpWebRequest.InvokeGetResponseCallback = function (state) {
	var lockObject = null;
	var $l$gc__DisplayClassd = new $asm02.System.Net.Browser.ClientHttpWebRequest.$l$gc__DisplayClassd();
	$asm02.System.Net.Browser.AsyncHelper.ThrowOnNonUIThread();
	$l$gc__DisplayClassd.req = JSIL.TryCast(state, $asm02.System.Net.Browser.ClientHttpWebRequest);
	System.Threading.Monitor.Enter((lockObject = $l$gc__DisplayClassd.req._lockObject));
	try {
		if (!$l$gc__DisplayClassd.req._getResponseFired) {
			$l$gc__DisplayClassd.req._getResponseFired = true;
			$l$gc__DisplayClassd.req._getResponseResult.Finish(false);
			System.Threading.ThreadPool.QueueUserWorkItem$0(function (state2) {
					$l$gc__DisplayClassd.req._getResponseCallback($l$gc__DisplayClassd.req._getResponseResult);
				}, null);
		}
	} finally {
		System.Threading.Monitor.Exit(lockObject);
	}
};
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.PrepareAndSendRequest = function (method, requestUri, requestBodyStream, headerCollection, cookieContainer) {
	try {
		this._wr.Open(method, requestUri);
		this._wr.add_Completed(JSIL.Delegate.New("System.EventHandler", this, $asm02.System.Net.Browser.ClientHttpWebRequest.prototype.Completed));
		this._wr.add_DownloadFailed(JSIL.Delegate.New("MS.Internal.ErrorEventHandler", this, $asm02.System.Net.Browser.ClientHttpWebRequest.prototype.Failed));
		this._wr.add_DownloadProgressChanged(JSIL.Delegate.New("System.EventHandler", this, $asm02.System.Net.Browser.ClientHttpWebRequest.prototype.Progress));
		this._wr.AllowReadStreamBuffering = this._allowBuffering;
		this._wr.UseDefaultCredentials = this._useDefaultCredentials;
		this._wr.RequirePolicyCheck = this._requirePolicyCheck;
		if (this._expectedContentLength > 0) {
			this._wr.AllowWriteStreamBuffering = this._allowWriteStreamBuffering;
		} else {
			this._wr.AllowWriteStreamBuffering = true;
		}
		if (!this._useDefaultCredentials) {
			if (!((this._credentials === null) || $asm02.System.Net.Browser.AuthenticationThrottle.AllowAuthenticationOnRequest(requestUri))) {
				throw JSIL.New(System.Security.SecurityException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("HttpWebRequest_CredentialsLimitReached", [requestUri.GetComponents((System.UriComponents.Host | System.UriComponents.Port | System.UriComponents.Scheme | System.UriComponents.SchemeAndServer), System.UriFormat.SafeUnescaped)])]);
			}
			this._wr.Credentials = this._credentials;
		}
		this._finalMethod = method;
		if (requestBodyStream !== null) {
			if (!((!this._allowWriteStreamBuffering && 
						(this._expectedContentLength !== 0)) || this._exposedReqStream.IsClosed())) {
				throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
			}
			if (!(!System.String.Equals$1(method, "GET", System.StringComparison.OrdinalIgnoreCase) && !System.String.Equals$1(method, "HEAD", System.StringComparison.OrdinalIgnoreCase))) {
				throw JSIL.New(System.Net.ProtocolViolationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("HttpWebRequest_RequestWithMethodCannotHaveBody")]);
			}
			if (this._allowWriteStreamBuffering) {
				if (requestBodyStream.Length > 0) {
					this._wr.SetStream(requestBodyStream);
				}
			} else if (this._expectedContentLength > 0) {
				this._wr.add_WaitingForUploadData(JSIL.Delegate.New("System.EventHandler", this, $asm02.System.Net.Browser.ClientHttpWebRequest.prototype.WaitingForUploadDataHandler));
			}
		}
		if (!((headerCollection === null) || (headerCollection.Count <= 0))) {
			var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
			if (requestBodyStream !== null) {
				if (!this._allowWriteStreamBuffering) {
					stringBuilder.Append$2(("Content-Length: " + (this._expectedContentLength).toString() + "\r\n"));
				} else {
					stringBuilder.Append$2(("Content-Length: " + (requestBodyStream.Length).toString() + "\r\n"));
				}
			}
			stringBuilder.Append$2("Accept-Encoding: identity\r\n");
			var allKeys = headerCollection.AllKeys;
		__loop0__: 
			for (var i = 0; i < allKeys.length; ++i) {
				var text = allKeys[i];
				if (!((!method.Equals$2("get", System.StringComparison.OrdinalIgnoreCase) && 
							!method.Equals$2("head", System.StringComparison.OrdinalIgnoreCase)) || !$asm02.System.Net.Browser.HttpWebRequestHelper.IsHeaderForContent(text))) {
					throw JSIL.New(System.Net.ProtocolViolationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("HttpWebRequest_RequestWithMethodCannotHaveBody")]);
				}
				if (!(!text.Equals$2("Proxy-Authorization", System.StringComparison.OrdinalIgnoreCase) || System.Windows.Application.Current.HasElevatedPermissions)) {
					throw JSIL.New(System.Security.SecurityException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("HttpWebRequest_ProxyAuthorizationHeaderNotElevated")]);
				}
				if (text.Equals$2("Authorization", System.StringComparison.OrdinalIgnoreCase)) {
					this._wr.Credentials = null;
					this._wr.UseDefaultCredentials = false;
				}
				if (System.String.IsNullOrWhiteSpace(headerCollection.get_Item$0(text))) {
					throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("HttpWebRequest_InvalidEmptyHeader", [text])]);
				}
				stringBuilder.Append$2((text + ": " + headerCollection.get_Item$0(text) + "\r\n"));
			}
			if (cookieContainer !== null) {
				var cookieHeader = $asm02.System.Net.Browser.HttpWebRequestHelper.GetCookieHeader(cookieContainer, requestUri);
				if (!System.String.IsNullOrEmpty(cookieHeader)) {
					stringBuilder.Append$2(("Cookie: " + cookieHeader + "\r\n"));
				}
			}
			this._wr.Headers = new ($asm02.MS.Internal.SecurityCriticalDataForMultipleGetAndSet$b1.Of(System.String)) (stringBuilder.toString());
		} else {
			var stringBuilder2 = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
			if (requestBodyStream !== null) {
				if (!this._allowWriteStreamBuffering) {
					stringBuilder2.Append$2(("Content-Length: " + (this._expectedContentLength).toString() + "\r\n"));
				} else {
					stringBuilder2.Append$2(("Content-Length: " + (requestBodyStream.Length).toString() + "\r\n"));
				}
			}
			stringBuilder2.Append$2("Accept-Encoding: identity\r\n");
			if (cookieContainer !== null) {
				var cookieHeader2 = $asm02.System.Net.Browser.HttpWebRequestHelper.GetCookieHeader(cookieContainer, requestUri);
				if (!System.String.IsNullOrEmpty(cookieHeader2)) {
					stringBuilder2.Append$2(("Cookie: " + cookieHeader2 + "\r\n"));
				}
			}
			if (stringBuilder2.toString().length > 0) {
				this._wr.Headers = new ($asm02.MS.Internal.SecurityCriticalDataForMultipleGetAndSet$b1.Of(System.String)) (stringBuilder2.toString());
			}
		}
		this._wr.Send();
	} finally {
		if (!(!this._allowWriteStreamBuffering || (requestBodyStream === null))) {
			requestBodyStream.Close();
		}
	}
};
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.WaitingForUploadDataHandler = function (sender, e) {
	this._wr.remove_WaitingForUploadData(JSIL.Delegate.New("System.EventHandler", this, $asm02.System.Net.Browser.ClientHttpWebRequest.prototype.WaitingForUploadDataHandler));
	$asm02.System.Net.Browser.ClientHttpWebRequest.InvokeGetRequestStreamCallback(this);
};
JSIL.OverloadedMethod($asm02.System.Net.Browser.ClientHttpWebRequest.prototype, "_ctor", [
		["_ctor$0", [System.Uri, System.Boolean]], 
		["_ctor$1", [System.Uri]]
	]);
JSIL.MakeProperty($asm02.System.Net.Browser.ClientHttpWebRequest.prototype, "HaveResponse", 
	$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.get_HaveResponse, null);
JSIL.MakeProperty($asm02.System.Net.Browser.ClientHttpWebRequest.prototype, "Method", 
	$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.get_Method, $asm02.System.Net.Browser.ClientHttpWebRequest.prototype.set_Method);
JSIL.MakeProperty($asm02.System.Net.Browser.ClientHttpWebRequest.prototype, "RequestUri", 
	$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.get_RequestUri, null);
JSIL.MakeProperty($asm02.System.Net.Browser.ClientHttpWebRequest.prototype, "AllowReadStreamBuffering", 
	$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.get_AllowReadStreamBuffering, $asm02.System.Net.Browser.ClientHttpWebRequest.prototype.set_AllowReadStreamBuffering);
JSIL.MakeProperty($asm02.System.Net.Browser.ClientHttpWebRequest.prototype, "AllowWriteStreamBuffering", 
	$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.get_AllowWriteStreamBuffering, $asm02.System.Net.Browser.ClientHttpWebRequest.prototype.set_AllowWriteStreamBuffering);
JSIL.MakeProperty($asm02.System.Net.Browser.ClientHttpWebRequest.prototype, "ContentLength", 
	$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.get_ContentLength, $asm02.System.Net.Browser.ClientHttpWebRequest.prototype.set_ContentLength);
JSIL.MakeProperty($asm02.System.Net.Browser.ClientHttpWebRequest.prototype, "CookieContainer", 
	$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.get_CookieContainer, $asm02.System.Net.Browser.ClientHttpWebRequest.prototype.set_CookieContainer);
JSIL.MakeProperty($asm02.System.Net.Browser.ClientHttpWebRequest.prototype, "SupportsCookieContainer", 
	$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.get_SupportsCookieContainer, null);
JSIL.MakeProperty($asm02.System.Net.Browser.ClientHttpWebRequest.prototype, "CreatorInstance", 
	$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.get_CreatorInstance, null);
JSIL.MakeProperty($asm02.System.Net.Browser.ClientHttpWebRequest.prototype, "Credentials", 
	$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.get_Credentials, $asm02.System.Net.Browser.ClientHttpWebRequest.prototype.set_Credentials);
JSIL.MakeProperty($asm02.System.Net.Browser.ClientHttpWebRequest.prototype, "UseDefaultCredentials", 
	$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.get_UseDefaultCredentials, $asm02.System.Net.Browser.ClientHttpWebRequest.prototype.set_UseDefaultCredentials);
JSIL.MakeProperty($asm02.System.Net.Browser.ClientHttpWebRequest.prototype, "AllowAutoRedirect", 
	$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.get_AllowAutoRedirect, $asm02.System.Net.Browser.ClientHttpWebRequest.prototype.set_AllowAutoRedirect);
Object.defineProperty($asm02.System.Net.Browser.ClientHttpWebRequest, "MaxMethodLength", {
		"value": 64}
);
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.ProgressChanged = null;
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.ProgressCompleted = null;
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype.ProgressFailed = null;
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype._response = null;
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype._method = null;
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype._finalMethod = null;
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype._aborted = false;
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype._finished = false;
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype._internalStream = null;
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype._exposedReqStream = null;
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype._getReqStrmCallback = null;
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype._getReqStrmResult = null;
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype._getReqStrmFired = false;
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype._getResponseCallback = null;
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype._getResponseResult = null;
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype._getResponseFired = false;
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype._reqUri = null;
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype._state = 0;
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype._allowBuffering = false;
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype._netStream = null;
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype._lockObject = null;
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype._exception = null;
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype._cookieContainer = null;
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype._madeProgress = false;
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype._redirectCount = 0;
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype._redirecting = false;
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype._responseHeaders = null;
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype._responseStatus = 0;
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype._credentials = null;
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype._useDefaultCredentials = false;
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype._requirePolicyCheck = false;
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype._allowWriteStreamBuffering = false;
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype._expectedContentLength = 0;
$asm02.System.Net.Browser.ClientHttpWebRequest.prototype._wr = null;

$asm02.System.Net.Browser.ClientHttpWebRequest.$l$gc__DisplayClass2.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm02.System.Net.Browser.ClientHttpWebRequest.$l$gc__DisplayClass2.prototype.stream = null;
$asm02.System.Net.Browser.ClientHttpWebRequest.$l$gc__DisplayClass2.prototype.$this = null;
$asm02.System.Net.Browser.ClientHttpWebRequest.$l$gc__DisplayClass2.prototype.asyncResult = null;

$asm02.System.Net.Browser.ClientHttpWebRequest.$l$gc__DisplayClass5.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm02.System.Net.Browser.ClientHttpWebRequest.$l$gc__DisplayClass5.prototype.response = null;
$asm02.System.Net.Browser.ClientHttpWebRequest.$l$gc__DisplayClass5.prototype.$this = null;
$asm02.System.Net.Browser.ClientHttpWebRequest.$l$gc__DisplayClass5.prototype.asyncResult = null;

$asm02.System.Net.Browser.ClientHttpWebRequest.$l$gc__DisplayClass9.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm02.System.Net.Browser.ClientHttpWebRequest.$l$gc__DisplayClass9.prototype.req = null;

$asm02.System.Net.Browser.ClientHttpWebRequest.$l$gc__DisplayClassd.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm02.System.Net.Browser.ClientHttpWebRequest.$l$gc__DisplayClassd.prototype.req = null;

$asm02.System.Net.Browser.ClientHttpWebResponse.prototype._ctor$0 = function (method, url, status, mime, headersString, stream, cookieContainer) {
	this._ctor$1(
		method, 
		url, 
		status, 
		mime, 
		headersString, 
		stream, 
		-1, 
		cookieContainer
	);
};
$asm02.System.Net.Browser.ClientHttpWebResponse.prototype._ctor$1 = function (method, url, status, mime, headersString, stream, expectedLen, cookieContainer) {
	var text = new JSIL.Variable(null);
	System.Net.HttpWebResponse.prototype._ctor.call(this);
	this._cookies = null;
	this._method = method;
	if ($asm02.System.Net.Browser.ClientHttpWebResponse.IsHeaderStringNullOrEmpty(headersString)) {
		this._statusCode = status;
		this._statusDescription = "";
	} else {
		$asm02.System.Net.Browser.HttpWebRequestHelper.ParseHeaders(
			url, 
			headersString, 
			this.Headers, 
			true, 
			/* ref */ new JSIL.MemberReference(this, "_statusCode"), 
			/* ref */ new JSIL.MemberReference(this, "_statusDescription")
		);
	}
	if (cookieContainer !== null) {
		var webHeaderCollection = JSIL.New(System.Net.WebHeaderCollection, "_ctor$0", []);
		var httpStatusCode = new JSIL.Variable(System.Net.HttpStatusCode.OK);
		$asm02.System.Net.Browser.HttpWebRequestHelper.ParseHeaders(
			url, 
			headersString, 
			webHeaderCollection, 
			false, 
			/* ref */ httpStatusCode, 
			/* ref */ text
		);
		$asm02.System.Net.Browser.HttpWebRequestHelper.SetCookiesFromHeaderCollection(this.Headers, url, cookieContainer);
		$asm02.System.Net.Browser.HttpWebRequestHelper.AddCookieHeaderToInternalPeerContainer(webHeaderCollection, url, cookieContainer);
		var cookieContainer2 = new System.Net.CookieContainer();
		$asm02.System.Net.Browser.HttpWebRequestHelper.SetCookiesFromHeaderCollection(this.Headers, url, cookieContainer2);
		this._cookies = cookieContainer2.GetCookies(url);
	}
	this._responseUri = url;
	this._responseStream = stream;
	if (stream !== null) {
		if (stream.CanSeek) {
			this._length = stream.Length;
		} else {
			this._length = expectedLen;
		}
	} else {
		this._length = 0;
	}
	if (this.Headers.get_Item$0("Content-Type") !== null) {
		this._contentType = this.Headers.get_Item$0("Content-Type");
		return;
	}
	this._contentType = mime;
};
$asm02.System.Net.Browser.ClientHttpWebResponse.prototype.get_Method = function () {
	return this._method;
};
$asm02.System.Net.Browser.ClientHttpWebResponse.prototype.get_StatusCode = function () {
	return this._statusCode;
};
$asm02.System.Net.Browser.ClientHttpWebResponse.prototype.get_StatusDescription = function () {
	return this._statusDescription;
};
$asm02.System.Net.Browser.ClientHttpWebResponse.prototype.get_ContentLength = function () {
	return this._length;
};
$asm02.System.Net.Browser.ClientHttpWebResponse.prototype.get_ContentType = function () {
	return this._contentType;
};
$asm02.System.Net.Browser.ClientHttpWebResponse.prototype.get_ResponseUri = function () {
	return this._responseUri;
};
$asm02.System.Net.Browser.ClientHttpWebResponse.prototype.get_Headers = function () {
	if (this._headers === null) {
		this._headers = JSIL.New(System.Net.WebHeaderCollection, "_ctor$0", []);
	}
	return this._headers;
};
$asm02.System.Net.Browser.ClientHttpWebResponse.prototype.get_SupportsHeaders = function () {
	return true;
};
$asm02.System.Net.Browser.ClientHttpWebResponse.prototype.GetResponseStream = function () {
	return this._responseStream;
};
$asm02.System.Net.Browser.ClientHttpWebResponse.prototype.Close = function () {
	if (this._responseStream !== null) {
		this._responseStream.Close();
	}
};
$asm02.System.Net.Browser.ClientHttpWebResponse.prototype.get_Cookies = function () {
	return this._cookies;
};
$asm02.System.Net.Browser.ClientHttpWebResponse.IsHeaderStringNullOrEmpty = function (headers) {
	return ((headers === null) || System.String.IsNullOrEmpty(headers.Value));
};
JSIL.OverloadedMethod($asm02.System.Net.Browser.ClientHttpWebResponse.prototype, "_ctor", [
		["_ctor$0", [System.String, System.Uri, System.Net.HttpStatusCode, System.String, $asm02.MS.Internal.SecurityCriticalDataForMultipleGetAndSet$b1.Of(System.String), System.IO.Stream, System.Net.CookieContainer]], 
		["_ctor$1", [System.String, System.Uri, System.Net.HttpStatusCode, System.String, $asm02.MS.Internal.SecurityCriticalDataForMultipleGetAndSet$b1.Of(System.String), System.IO.Stream, System.Int64, System.Net.CookieContainer]]
	]);
JSIL.MakeProperty($asm02.System.Net.Browser.ClientHttpWebResponse.prototype, "Method", 
	$asm02.System.Net.Browser.ClientHttpWebResponse.prototype.get_Method, null);
JSIL.MakeProperty($asm02.System.Net.Browser.ClientHttpWebResponse.prototype, "StatusCode", 
	$asm02.System.Net.Browser.ClientHttpWebResponse.prototype.get_StatusCode, null);
JSIL.MakeProperty($asm02.System.Net.Browser.ClientHttpWebResponse.prototype, "StatusDescription", 
	$asm02.System.Net.Browser.ClientHttpWebResponse.prototype.get_StatusDescription, null);
JSIL.MakeProperty($asm02.System.Net.Browser.ClientHttpWebResponse.prototype, "ContentLength", 
	$asm02.System.Net.Browser.ClientHttpWebResponse.prototype.get_ContentLength, null);
JSIL.MakeProperty($asm02.System.Net.Browser.ClientHttpWebResponse.prototype, "ContentType", 
	$asm02.System.Net.Browser.ClientHttpWebResponse.prototype.get_ContentType, null);
JSIL.MakeProperty($asm02.System.Net.Browser.ClientHttpWebResponse.prototype, "ResponseUri", 
	$asm02.System.Net.Browser.ClientHttpWebResponse.prototype.get_ResponseUri, null);
JSIL.MakeProperty($asm02.System.Net.Browser.ClientHttpWebResponse.prototype, "Headers", 
	$asm02.System.Net.Browser.ClientHttpWebResponse.prototype.get_Headers, null);
JSIL.MakeProperty($asm02.System.Net.Browser.ClientHttpWebResponse.prototype, "SupportsHeaders", 
	$asm02.System.Net.Browser.ClientHttpWebResponse.prototype.get_SupportsHeaders, null);
JSIL.MakeProperty($asm02.System.Net.Browser.ClientHttpWebResponse.prototype, "Cookies", 
	$asm02.System.Net.Browser.ClientHttpWebResponse.prototype.get_Cookies, null);
$asm02.System.Net.Browser.ClientHttpWebResponse.prototype._method = null;
$asm02.System.Net.Browser.ClientHttpWebResponse.prototype._statusCode = 0;
$asm02.System.Net.Browser.ClientHttpWebResponse.prototype._statusDescription = null;
$asm02.System.Net.Browser.ClientHttpWebResponse.prototype._length = 0;
$asm02.System.Net.Browser.ClientHttpWebResponse.prototype._contentType = null;
$asm02.System.Net.Browser.ClientHttpWebResponse.prototype._responseUri = null;
$asm02.System.Net.Browser.ClientHttpWebResponse.prototype._responseStream = null;
$asm02.System.Net.Browser.ClientHttpWebResponse.prototype._headers = null;
$asm02.System.Net.Browser.ClientHttpWebResponse.prototype._cookies = null;

System.Windows.Media.Color.Create = function (o) {
	if (o !== null) {
		return System.Windows.Media.Color.FromUInt32(JSIL.Cast(o, System.UInt32));
	}
	return new System.Windows.Media.Color();
};
System.Windows.Media.Color.FromUInt32 = function (argb) {
	var result = new System.Windows.Media.Color();
	result.sRgbColor.a = ((argb & -16777216) >>> 24);
	result.sRgbColor.r = ((argb & 16711680) >>> 16);
	result.sRgbColor.g = ((argb & 65280) >>> 8);
	result.sRgbColor.b = (argb & 255);
	return result;
};
System.Windows.Media.Color.FromArgb = function (a, r, g, b) {
	var result = new System.Windows.Media.Color();
	result.sRgbColor.a = a;
	result.sRgbColor.r = r;
	result.sRgbColor.g = g;
	result.sRgbColor.b = b;
	return result;
};
System.Windows.Media.Color.prototype.toString = function () {
	return this.ConvertToString(null, null);
};
System.Windows.Media.Color.prototype.ToString = function (provider) {
	return this.ConvertToString(null, provider);
};
System.Windows.Media.Color.prototype.IFormattable_ToString = function (format, provider) {
	return this.ConvertToString(format, provider);
};
System.Windows.Media.Color.prototype.ConvertToString = function (format, provider) {
	var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
	if (format === null) {
		stringBuilder.AppendFormat$1(provider, "#{0:X2}", [this.sRgbColor.a]);
		stringBuilder.AppendFormat$1(provider, "{0:X2}", [this.sRgbColor.r]);
		stringBuilder.AppendFormat$1(provider, "{0:X2}", [this.sRgbColor.g]);
		stringBuilder.AppendFormat$1(provider, "{0:X2}", [this.sRgbColor.b]);
	} else {
		var numericListSeparator = $asm02.MS.Internal.TokenizerHelper.GetNumericListSeparator(provider);
		stringBuilder.AppendFormat$1(provider, JSIL.ConcatString.apply(null, JSIL.Array.New(System.String, ["sc#{1:", format, "}{0} {2:", format, "}{0} {3:", format, "}{0} {4:", format, "}"])), [numericListSeparator, this.sRgbColor.a, this.sRgbColor.r, this.sRgbColor.g, this.sRgbColor.b]);
	}
	return stringBuilder.toString();
};
System.Windows.Media.Color.prototype.GetHashCode = function () {
	return this.sRgbColor.GetHashCode();
};
System.Windows.Media.Color.prototype.ToUInt32 = function () {
	return ((((this.sRgbColor.a << 24) | (this.sRgbColor.r << 16)) | (this.sRgbColor.g << 8)) | this.sRgbColor.b);
};
System.Windows.Media.Color.prototype.Equals$0 = function (o) {
	if (JSIL.TryCast(o, System.Windows.Media.Color) !== new System.Windows.Media.Color()) {
		var color = JSIL.Cast(o, System.Windows.Media.Color).MemberwiseClone();
		return System.Windows.Media.Color.op_Equality(this.MemberwiseClone(), color.MemberwiseClone());
	}
	return false;
};
System.Windows.Media.Color.prototype.Equals$1 = function (color) {
	return System.Windows.Media.Color.op_Equality(this.MemberwiseClone(), color);
};
System.Windows.Media.Color.op_Equality = function (color1, color2) {
	return ((color1.R === color2.R) && 
		(color1.G === color2.G) && 
		(color1.B === color2.B) && (color1.A === color2.A));
};
System.Windows.Media.Color.op_Inequality = function (color1, color2) {
	return !System.Windows.Media.Color.op_Equality(color1, color2);
};
System.Windows.Media.Color.prototype.get_A = function () {
	return this.sRgbColor.a;
};
System.Windows.Media.Color.prototype.set_A = function (value) {
	this.sRgbColor.a = value;
};
System.Windows.Media.Color.prototype.get_R = function () {
	return this.sRgbColor.r;
};
System.Windows.Media.Color.prototype.set_R = function (value) {
	this.sRgbColor.r = value;
};
System.Windows.Media.Color.prototype.get_G = function () {
	return this.sRgbColor.g;
};
System.Windows.Media.Color.prototype.set_G = function (value) {
	this.sRgbColor.g = value;
};
System.Windows.Media.Color.prototype.get_B = function () {
	return this.sRgbColor.b;
};
System.Windows.Media.Color.prototype.set_B = function (value) {
	this.sRgbColor.b = value;
};
JSIL.OverloadedMethod(System.Windows.Media.Color.prototype, "Equals", [
		["Equals$0", [System.Object]], 
		["Equals$1", [System.Windows.Media.Color]]
	]);
JSIL.MakeProperty(System.Windows.Media.Color.prototype, "A", 
	System.Windows.Media.Color.prototype.get_A, System.Windows.Media.Color.prototype.set_A);
JSIL.MakeProperty(System.Windows.Media.Color.prototype, "R", 
	System.Windows.Media.Color.prototype.get_R, System.Windows.Media.Color.prototype.set_R);
JSIL.MakeProperty(System.Windows.Media.Color.prototype, "G", 
	System.Windows.Media.Color.prototype.get_G, System.Windows.Media.Color.prototype.set_G);
JSIL.MakeProperty(System.Windows.Media.Color.prototype, "B", 
	System.Windows.Media.Color.prototype.get_B, System.Windows.Media.Color.prototype.set_B);

$asm02.System.Windows.Media.Color.MILColor.prototype.a = 0;
$asm02.System.Windows.Media.Color.MILColor.prototype.r = 0;
$asm02.System.Windows.Media.Color.MILColor.prototype.g = 0;
$asm02.System.Windows.Media.Color.MILColor.prototype.b = 0;

System.Windows.CornerRadius.prototype._ctor$0 = function (uniformRadius) {
	System.Windows.CornerRadius.Validate(uniformRadius, uniformRadius, uniformRadius, uniformRadius);
	this._BottomLeft = uniformRadius;
	this._BottomRight = uniformRadius;
	this._TopRight = uniformRadius;
	this._TopLeft = uniformRadius;
};
System.Windows.CornerRadius.prototype._ctor$1 = function (topLeft, topRight, bottomRight, bottomLeft) {
	System.Windows.CornerRadius.Validate(topLeft, topRight, bottomRight, bottomLeft);
	this._TopLeft = topLeft;
	this._TopRight = topRight;
	this._BottomRight = bottomRight;
	this._BottomLeft = bottomLeft;
};
System.Windows.CornerRadius.prototype.toString = function () {
	return this.ToString(System.Globalization.CultureInfo.InvariantCulture);
};
System.Windows.CornerRadius.prototype.ToString = function (cultureInfo) {
	var numericListSeparator = $asm02.MS.Internal.TokenizerHelper.GetNumericListSeparator(cultureInfo);
	var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$1", [64]);
	stringBuilder.Append$2(this.InternalToString(this._TopLeft, cultureInfo));
	stringBuilder.Append$7(numericListSeparator);
	stringBuilder.Append$2(this.InternalToString(this._TopRight, cultureInfo));
	stringBuilder.Append$7(numericListSeparator);
	stringBuilder.Append$2(this.InternalToString(this._BottomRight, cultureInfo));
	stringBuilder.Append$7(numericListSeparator);
	stringBuilder.Append$2(this.InternalToString(this._BottomLeft, cultureInfo));
	return stringBuilder.toString();
};
System.Windows.CornerRadius.prototype.InternalToString = function (l, cultureInfo) {
	if (System.Double.IsNaN(l)) {
		return "Auto";
	}
	return System.Convert.ToString$25(l, cultureInfo);
};
System.Windows.CornerRadius.prototype.Equals$0 = function (obj) {
	if (JSIL.TryCast(obj, System.Windows.CornerRadius) !== new System.Windows.CornerRadius()) {
		var cr = JSIL.Cast(obj, System.Windows.CornerRadius).MemberwiseClone();
		return System.Windows.CornerRadius.op_Equality(this.MemberwiseClone(), cr.MemberwiseClone());
	}
	return false;
};
System.Windows.CornerRadius.prototype.Equals$1 = function (cornerRadius) {
	return System.Windows.CornerRadius.op_Equality(this.MemberwiseClone(), cornerRadius);
};
System.Windows.CornerRadius.prototype.GetHashCode = function () {
	return (((this._TopLeft.GetHashCode() ^ this._TopRight.GetHashCode()) ^ this._BottomLeft.GetHashCode()) ^ this._BottomRight.GetHashCode());
};
System.Windows.CornerRadius.Validate = function (topLeft, topRight, bottomRight, bottomLeft) {
	if (!((topLeft >= 0) && !System.Double.IsNaN(topLeft))) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [System.String.Format($asm02.System.Windows.Resx.GetString$2("CornerRadius_InvalidMember"), "TopLeft")]);
	}
	if (!((topRight >= 0) && !System.Double.IsNaN(topRight))) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [System.String.Format($asm02.System.Windows.Resx.GetString$2("CornerRadius_InvalidMember"), "TopRight")]);
	}
	if (!((bottomRight >= 0) && !System.Double.IsNaN(bottomRight))) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [System.String.Format($asm02.System.Windows.Resx.GetString$2("CornerRadius_InvalidMember"), "BottomRight")]);
	}
	if (!((bottomLeft >= 0) && !System.Double.IsNaN(bottomLeft))) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [System.String.Format($asm02.System.Windows.Resx.GetString$2("CornerRadius_InvalidMember"), "BottomLeft")]);
	}
};
System.Windows.CornerRadius.op_Equality = function (cr1, cr2) {
	return (!((cr1._TopLeft !== cr2._TopLeft) || 
			(cr1._TopRight !== cr2._TopRight) || 
			(cr1._BottomRight !== cr2._BottomRight)) && (cr1._BottomLeft === cr2._BottomLeft));
};
System.Windows.CornerRadius.op_Inequality = function (cr1, cr2) {
	return !System.Windows.CornerRadius.op_Equality(cr1, cr2);
};
System.Windows.CornerRadius.prototype.get_TopLeft = function () {
	return this._TopLeft;
};
System.Windows.CornerRadius.prototype.set_TopLeft = function (value) {
	System.Windows.CornerRadius.Validate(value, 0, 0, 0);
	this._TopLeft = value;
};
System.Windows.CornerRadius.prototype.get_TopRight = function () {
	return this._TopRight;
};
System.Windows.CornerRadius.prototype.set_TopRight = function (value) {
	System.Windows.CornerRadius.Validate(0, value, 0, 0);
	this._TopRight = value;
};
System.Windows.CornerRadius.prototype.get_BottomRight = function () {
	return this._BottomRight;
};
System.Windows.CornerRadius.prototype.set_BottomRight = function (value) {
	System.Windows.CornerRadius.Validate(0, 0, value, 0);
	this._BottomRight = value;
};
System.Windows.CornerRadius.prototype.get_BottomLeft = function () {
	return this._BottomLeft;
};
System.Windows.CornerRadius.prototype.set_BottomLeft = function (value) {
	System.Windows.CornerRadius.Validate(0, 0, 0, value);
	this._BottomLeft = value;
};
JSIL.OverloadedMethod(System.Windows.CornerRadius.prototype, "_ctor", [
		["_ctor$0", [System.Double]], 
		["_ctor$1", [System.Double, System.Double, System.Double, System.Double]]
	]);
JSIL.OverloadedMethod(System.Windows.CornerRadius.prototype, "Equals", [
		["Equals$0", [System.Object]], 
		["Equals$1", [System.Windows.CornerRadius]]
	]);
JSIL.MakeProperty(System.Windows.CornerRadius.prototype, "TopLeft", 
	System.Windows.CornerRadius.prototype.get_TopLeft, System.Windows.CornerRadius.prototype.set_TopLeft);
JSIL.MakeProperty(System.Windows.CornerRadius.prototype, "TopRight", 
	System.Windows.CornerRadius.prototype.get_TopRight, System.Windows.CornerRadius.prototype.set_TopRight);
JSIL.MakeProperty(System.Windows.CornerRadius.prototype, "BottomRight", 
	System.Windows.CornerRadius.prototype.get_BottomRight, System.Windows.CornerRadius.prototype.set_BottomRight);
JSIL.MakeProperty(System.Windows.CornerRadius.prototype, "BottomLeft", 
	System.Windows.CornerRadius.prototype.get_BottomLeft, System.Windows.CornerRadius.prototype.set_BottomLeft);
System.Windows.CornerRadius.prototype._TopLeft = 0;
System.Windows.CornerRadius.prototype._TopRight = 0;
System.Windows.CornerRadius.prototype._BottomRight = 0;
System.Windows.CornerRadius.prototype._BottomLeft = 0;

System.Windows.DependencyPropertyChangedEventArgs.prototype.get_Property = function () {
	return this._property;
};
System.Windows.DependencyPropertyChangedEventArgs.prototype.get_OldValue = function () {
	return this._oldValue;
};
System.Windows.DependencyPropertyChangedEventArgs.prototype.get_NewValue = function () {
	return this._newValue;
};
System.Windows.DependencyPropertyChangedEventArgs.prototype._ctor = function (dp, oldValue, newValue) {
	this._property = dp;
	this._oldValue = oldValue;
	this._newValue = newValue;
};
JSIL.MakeProperty(System.Windows.DependencyPropertyChangedEventArgs.prototype, "Property", 
	System.Windows.DependencyPropertyChangedEventArgs.prototype.get_Property, null);
JSIL.MakeProperty(System.Windows.DependencyPropertyChangedEventArgs.prototype, "OldValue", 
	System.Windows.DependencyPropertyChangedEventArgs.prototype.get_OldValue, null);
JSIL.MakeProperty(System.Windows.DependencyPropertyChangedEventArgs.prototype, "NewValue", 
	System.Windows.DependencyPropertyChangedEventArgs.prototype.get_NewValue, null);
System.Windows.DependencyPropertyChangedEventArgs.prototype._property = null;
System.Windows.DependencyPropertyChangedEventArgs.prototype._oldValue = null;
System.Windows.DependencyPropertyChangedEventArgs.prototype._newValue = null;

System.ComponentModel.DesignerProperties.OnIsInDesignModeChanged = function (value, args) {
	var flag = JSIL.Cast(args.NewValue, System.Boolean);
	System.ComponentModel.DesignerProperties.InternalIsInDesignMode = flag;
	$asm02.MS.Internal.XcpImports.DesignerProperties_SetIsInDesignMode(flag);
};
System.ComponentModel.DesignerProperties.get_InternalIsInDesignMode = function () {
	return System.ComponentModel.DesignerProperties.InternalIsInDesignMode$value;
};
System.ComponentModel.DesignerProperties.set_InternalIsInDesignMode = function (value) {
	System.ComponentModel.DesignerProperties.InternalIsInDesignMode$value = value;
};
System.ComponentModel.DesignerProperties.GetIsInDesignMode = function (element) {
	if (element === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["element"]);
	}
	var result = false;
	if (System.Windows.Application.Current.RootVisual !== null) {
		result = JSIL.Cast(System.Windows.Application.Current.RootVisual.GetValue(System.ComponentModel.DesignerProperties.IsInDesignModeProperty), System.Boolean);
	}
	return result;
};
System.ComponentModel.DesignerProperties.SetIsInDesignMode = function (element, value) {
	if (element === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["element"]);
	}
	if (element !== System.Windows.Application.Current.RootVisual) {
		throw JSIL.New(System.NotImplementedException, "_ctor$0", []);
	}
	element.SetValue(System.ComponentModel.DesignerProperties.IsInDesignModeProperty, value);
};
System.ComponentModel.DesignerProperties.get_IsInDesignTool = function () {
	return System.ComponentModel.DesignerProperties.isInDesignTool;
};
System.ComponentModel.DesignerProperties.set_IsInDesignTool = function (value) {
	System.ComponentModel.DesignerProperties.isInDesignTool = value;
};
System.ComponentModel.DesignerProperties.get_RefreshOnlyXmlnsDefinitionsOnAssemblyReplace = function () {
	return System.ComponentModel.DesignerProperties.s_shouldRefreshOnlyXmlnsDefinitionsOnAssemblyReplace;
};
System.ComponentModel.DesignerProperties.set_RefreshOnlyXmlnsDefinitionsOnAssemblyReplace = function (value) {
	var flag = (System.ComponentModel.DesignerProperties.s_shouldRefreshOnlyXmlnsDefinitionsOnAssemblyReplace !== value);
	if (!(!flag || value)) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
	}
	System.ComponentModel.DesignerProperties.s_shouldRefreshOnlyXmlnsDefinitionsOnAssemblyReplace = value;
	if (flag) {
		$asm02.MS.Internal.JoltHelper.RefreshXamlSchemaContext();
	}
};
JSIL.MakeProperty(System.ComponentModel.DesignerProperties, "InternalIsInDesignMode", 
	System.ComponentModel.DesignerProperties.get_InternalIsInDesignMode, System.ComponentModel.DesignerProperties.set_InternalIsInDesignMode);
JSIL.MakeProperty(System.ComponentModel.DesignerProperties, "IsInDesignTool", 
	System.ComponentModel.DesignerProperties.get_IsInDesignTool, System.ComponentModel.DesignerProperties.set_IsInDesignTool);
JSIL.MakeProperty(System.ComponentModel.DesignerProperties, "RefreshOnlyXmlnsDefinitionsOnAssemblyReplace", 
	System.ComponentModel.DesignerProperties.get_RefreshOnlyXmlnsDefinitionsOnAssemblyReplace, System.ComponentModel.DesignerProperties.set_RefreshOnlyXmlnsDefinitionsOnAssemblyReplace);
System.ComponentModel.DesignerProperties.IsInDesignModeProperty = null;
System.ComponentModel.DesignerProperties.isInDesignTool = false;
System.ComponentModel.DesignerProperties.s_shouldRefreshOnlyXmlnsDefinitionsOnAssemblyReplace = false;
System.ComponentModel.DesignerProperties.InternalIsInDesignMode$value = false;
System.ComponentModel.DesignerProperties._cctor = function () {
	System.ComponentModel.DesignerProperties.IsInDesignModeProperty = System.Windows.DependencyProperty.RegisterAttached("IsInDesignMode", System.Boolean, System.ComponentModel.DesignerProperties, JSIL.New(System.Windows.PropertyMetadata, "_ctor$0", [JSIL.Delegate.New("System.Windows.PropertyChangedCallback", null, System.ComponentModel.DesignerProperties.OnIsInDesignModeChanged)]));
	System.ComponentModel.DesignerProperties.isInDesignTool = false;
	System.ComponentModel.DesignerProperties.s_shouldRefreshOnlyXmlnsDefinitionsOnAssemblyReplace = false;
};

System.Windows.Duration.Create = function (o) {
	if (o === null) {
		return new System.Windows.Duration(new System.TimeSpan());
	}
	var text = JSIL.TryCast(o, System.String);
	if (text === null) {
		var timeSpan = System.TimeSpan.FromSeconds(JSIL.Cast(o, System.Double)).MemberwiseClone();
		return new System.Windows.Duration(timeSpan);
	}
	if (text.Equals$1("Forever")) {
		return System.Windows.Duration.Forever;
	}
	return System.Windows.Duration.Automatic;
};
System.Windows.Duration.prototype._ctor = function (timeSpan) {
	if (System.TimeSpan.op_LessThan(timeSpan.MemberwiseClone(), System.TimeSpan.Zero.MemberwiseClone())) {
		throw JSIL.New(System.ArgumentException, "_ctor$4", ["", "timeSpan"]);
	}
	this._durationType = System.Windows.Duration.DurationType.TimeSpan;
	this._timeSpan = timeSpan.MemberwiseClone();
};
System.Windows.Duration.op_Implicit = function (timeSpan) {
	if (System.TimeSpan.op_LessThan(timeSpan.MemberwiseClone(), System.TimeSpan.Zero.MemberwiseClone())) {
		throw JSIL.New(System.ArgumentException, "_ctor$4", ["", "timeSpan"]);
	}
	return new System.Windows.Duration(timeSpan);
};
System.Windows.Duration.op_Addition = function (t1, t2) {
	if (!(!t1.HasTimeSpan || !t2.HasTimeSpan)) {
		return new System.Windows.Duration(System.TimeSpan.op_Addition(t1._timeSpan.MemberwiseClone(), t2._timeSpan.MemberwiseClone()));
	}
	if (!((t1._durationType === 0) || (t2._durationType === 0))) {
		return System.Windows.Duration.Forever;
	}
	return System.Windows.Duration.Automatic;
};
System.Windows.Duration.op_Subtraction = function (t1, t2) {
	if (!(!t1.HasTimeSpan || !t2.HasTimeSpan)) {
		return new System.Windows.Duration(System.TimeSpan.op_Subtraction(t1._timeSpan.MemberwiseClone(), t2._timeSpan.MemberwiseClone()));
	}
	if (!((t1._durationType !== System.Windows.Duration.DurationType.Forever) || !t2.HasTimeSpan)) {
		return System.Windows.Duration.Forever;
	}
	return System.Windows.Duration.Automatic;
};
System.Windows.Duration.op_Equality = function (t1, t2) {
	return t1.Equals$1(t2);
};
System.Windows.Duration.op_Inequality = function (t1, t2) {
	return !t1.Equals$1(t2);
};
System.Windows.Duration.op_GreaterThan = function (t1, t2) {
	if (!(!t1.HasTimeSpan || !t2.HasTimeSpan)) {
		return System.TimeSpan.op_GreaterThan(t1._timeSpan.MemberwiseClone(), t2._timeSpan.MemberwiseClone());
	}
	return ((!t1.HasTimeSpan || 
			(t2._durationType !== System.Windows.Duration.DurationType.Forever)) && !((t1._durationType !== System.Windows.Duration.DurationType.Forever) || 
			!t2.HasTimeSpan));
};
System.Windows.Duration.op_GreaterThanOrEqual = function (t1, t2) {
	return (!(t1._durationType || 
			t2._durationType) || ((t1._durationType !== 0) && 
			t2._durationType && 
			!System.Windows.Duration.op_LessThan(t1.MemberwiseClone(), t2.MemberwiseClone())));
};
System.Windows.Duration.op_LessThan = function (t1, t2) {
	if (!(!t1.HasTimeSpan || !t2.HasTimeSpan)) {
		return System.TimeSpan.op_LessThan(t1._timeSpan.MemberwiseClone(), t2._timeSpan.MemberwiseClone());
	}
	return (!(!t1.HasTimeSpan || 
			(t2._durationType !== System.Windows.Duration.DurationType.Forever)) || (!((t1._durationType !== System.Windows.Duration.DurationType.Forever) || 
				!t2.HasTimeSpan) && 
			false));
};
System.Windows.Duration.op_LessThanOrEqual = function (t1, t2) {
	return (!(t1._durationType || 
			t2._durationType) || ((t1._durationType !== 0) && 
			t2._durationType && 
			!System.Windows.Duration.op_GreaterThan(t1.MemberwiseClone(), t2.MemberwiseClone())));
};
System.Windows.Duration.Compare = function (t1, t2) {
	if (t1._durationType === 0) {
		if (t2._durationType === 0) {
			return 0;
		}
		return -1;
	} else {
		if (t2._durationType === 0) {
			return 1;
		}
		if (System.Windows.Duration.op_LessThan(t1.MemberwiseClone(), t2.MemberwiseClone())) {
			return -1;
		}
		if (System.Windows.Duration.op_GreaterThan(t1.MemberwiseClone(), t2.MemberwiseClone())) {
			return 1;
		}
		return 0;
	}
};
System.Windows.Duration.Plus = function (duration) {
	return duration;
};
System.Windows.Duration.op_UnaryPlus = function (duration) {
	return duration;
};
System.Windows.Duration.prototype.get_HasTimeSpan = function () {
	return (this._durationType === System.Windows.Duration.DurationType.TimeSpan);
};
System.Windows.Duration.get_Automatic = function () {
	var result = new System.Windows.Duration();
	result._durationType = System.Windows.Duration.DurationType.Automatic;
	return result;
};
System.Windows.Duration.get_Forever = function () {
	var result = new System.Windows.Duration();
	result._durationType = System.Windows.Duration.DurationType.Forever;
	return result;
};
System.Windows.Duration.prototype.get_TimeSpan = function () {
	if (this.HasTimeSpan) {
		return this._timeSpan;
	}
	throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
};
System.Windows.Duration.prototype.Add = function (duration) {
	return System.Windows.Duration.op_Addition(this.MemberwiseClone(), duration);
};
System.Windows.Duration.prototype.Equals$0 = function (value) {
	return (value && 
		(JSIL.TryCast(value, System.Windows.Duration) !== new System.Windows.Duration()) && this.Equals$1(JSIL.Cast(value, System.Windows.Duration).MemberwiseClone()));
};
System.Windows.Duration.prototype.Equals$1 = function (duration) {
	if (this.HasTimeSpan) {
		return (duration.HasTimeSpan && System.TimeSpan.op_Equality(this._timeSpan.MemberwiseClone(), duration._timeSpan.MemberwiseClone()));
	}
	return (this._durationType === duration._durationType);
};
System.Windows.Duration.Equals = function (t1, t2) {
	return t1.Equals$1(t2);
};
System.Windows.Duration.prototype.GetHashCode = function () {
	if (this.HasTimeSpan) {
		return this._timeSpan.GetHashCode();
	}
	return (this._durationType.GetHashCode() + 17);
};
System.Windows.Duration.prototype.Subtract = function (duration) {
	return System.Windows.Duration.op_Subtraction(this.MemberwiseClone(), duration);
};
System.Windows.Duration.prototype.toString = function () {
	if (this.HasTimeSpan) {
		return this._timeSpan.toString();
	}
	if (this._durationType === System.Windows.Duration.DurationType.Forever) {
		return "Forever";
	}
	return "Automatic";
};
JSIL.OverloadedMethod(System.Windows.Duration.prototype, "Equals", [
		["Equals$0", [System.Object]], 
		["Equals$1", [System.Windows.Duration]]
	]);
JSIL.MakeProperty(System.Windows.Duration.prototype, "HasTimeSpan", 
	System.Windows.Duration.prototype.get_HasTimeSpan, null);
JSIL.MakeProperty(System.Windows.Duration, "Automatic", 
	System.Windows.Duration.get_Automatic, null);
JSIL.MakeProperty(System.Windows.Duration, "Forever", 
	System.Windows.Duration.get_Forever, null);
JSIL.MakeProperty(System.Windows.Duration.prototype, "TimeSpan", 
	System.Windows.Duration.prototype.get_TimeSpan, null);
System.Windows.Duration.prototype._durationType = 0;

$asm02.System.Windows.EffectiveValueEntry.prototype._ctor$0 = function (valueSource) {
	this._value = System.Windows.DependencyProperty.UnsetValue;
	this._source = valueSource;
};
$asm02.System.Windows.EffectiveValueEntry.prototype._ctor$1 = function (value, valueSource) {
	this._value = value;
	this._source = valueSource;
};
$asm02.System.Windows.EffectiveValueEntry.prototype.Copy = function () {
	var result = new $asm02.System.Windows.EffectiveValueEntry();
	if (!this.HasModifiers) {
		return this;
	}
	result._ctor$1(this.ModifiedValue.BaseValue, this.BaseValueSource);
	if (this.IsExpression) {
		result.SetExpressionValue(this.ModifiedValue.ExpressionValue);
	}
	if (this.IsAnimated) {
		result.SetAnimatedValue(this.ModifiedValue.AnimatedValue);
		result.IsLocalValueNewerThanAnimatedValue = this.IsLocalValueNewerThanAnimatedValue;
	}
	return result;
};
$asm02.System.Windows.EffectiveValueEntry.prototype.SetExpressionValue = function (value) {
	var modifiedValue = this.EnsureModifiedValue();
	modifiedValue.ExpressionValue = value;
	this.IsExpression = true;
	this.IsLocalValueNewerThanAnimatedValue = true;
};
$asm02.System.Windows.EffectiveValueEntry.prototype.SetAnimatedValue = function (value) {
	var modifiedValue = this.EnsureModifiedValue();
	modifiedValue.AnimatedValue = value;
	this.IsAnimated = true;
	this.IsLocalValueNewerThanAnimatedValue = false;
};
$asm02.System.Windows.EffectiveValueEntry.prototype.SetBaseValue = function (value, valueSource) {
	if (!this.HasModifiers) {
		this.Value = value;
	} else {
		this.ModifiedValue.BaseValue = value;
		if (!(!this.IsAnimated || (valueSource !== System.Windows.BaseValueSource.Local))) {
			this.IsLocalValueNewerThanAnimatedValue = true;
		} else {
			this.IsLocalValueNewerThanAnimatedValue = false;
		}
	}
	this.BaseValueSource = valueSource;
};
$asm02.System.Windows.EffectiveValueEntry.prototype.ResetExpressionValue = function () {
	if (this.IsExpression) {
		var modifiedValue = this.ModifiedValue;
		modifiedValue.ExpressionValue = null;
		this.IsExpression = false;
		if (!this.HasModifiers) {
			this.Value = modifiedValue.BaseValue;
		}
	}
};
$asm02.System.Windows.EffectiveValueEntry.prototype.ResetAnimatedValue = function () {
	if (this.IsAnimated) {
		var modifiedValue = this.ModifiedValue;
		modifiedValue.AnimatedValue = null;
		this.IsAnimated = false;
		this.IsLocalValueNewerThanAnimatedValue = false;
		if (!this.HasModifiers) {
			this.Value = modifiedValue.BaseValue;
		}
	}
};
$asm02.System.Windows.EffectiveValueEntry.prototype.get_Value = function () {
	return this._value;
};
$asm02.System.Windows.EffectiveValueEntry.prototype.set_Value = function (value) {
	this._value = value;
};
$asm02.System.Windows.EffectiveValueEntry.prototype.get_EffectiveValue = function () {
	if (!this.HasModifiers) {
		var result = this._value;
	} else {
		var modifiedValue = JSIL.TryCast(this._value, $asm02.MS.Internal.ModifiedValue);
		if (this.IsAnimated) {
			if (this.IsLocalValueNewerThanAnimatedValue) {
				if (this.IsExpression) {
					result = modifiedValue.ExpressionValue;
				} else {
					result = modifiedValue.BaseValue;
				}
			} else {
				result = modifiedValue.AnimatedValue;
			}
		} else if (this.IsExpression) {
			result = modifiedValue.ExpressionValue;
		} else {
			result = System.Windows.DependencyProperty.UnsetValue;
		}
	}
	return result;
};
$asm02.System.Windows.EffectiveValueEntry.prototype.get_IsExpression = function () {
	return this.ReadPrivateFlag(System.Windows.FullValueSource.IsExpression);
};
$asm02.System.Windows.EffectiveValueEntry.prototype.set_IsExpression = function (value) {
	this.WritePrivateFlag(System.Windows.FullValueSource.IsExpression, value);
};
$asm02.System.Windows.EffectiveValueEntry.prototype.get_IsAnimated = function () {
	return this.ReadPrivateFlag(System.Windows.FullValueSource.IsAnimated);
};
$asm02.System.Windows.EffectiveValueEntry.prototype.set_IsAnimated = function (value) {
	this.WritePrivateFlag(System.Windows.FullValueSource.IsAnimated, value);
};
$asm02.System.Windows.EffectiveValueEntry.prototype.get_HasModifiers = function () {
	return ((this._source & System.Windows.FullValueSource.ModifiersMask) !== 0);
};
$asm02.System.Windows.EffectiveValueEntry.prototype.get_BaseValueSource = function () {
	return (this._source & System.Windows.FullValueSource.BaseValueSourceMask);
};
$asm02.System.Windows.EffectiveValueEntry.prototype.set_BaseValueSource = function (value) {
	this._source = ((this._source & -16) | value);
};
$asm02.System.Windows.EffectiveValueEntry.prototype.get_FullValueSource = function () {
	return this._source;
};
$asm02.System.Windows.EffectiveValueEntry.prototype.get_IsLocalValueNewerThanAnimatedValue = function () {
	return this.ReadPrivateFlag(System.Windows.FullValueSource.LocalValueNewerThanAnimatedValue);
};
$asm02.System.Windows.EffectiveValueEntry.prototype.set_IsLocalValueNewerThanAnimatedValue = function (value) {
	this.WritePrivateFlag(System.Windows.FullValueSource.LocalValueNewerThanAnimatedValue, value);
};
$asm02.System.Windows.EffectiveValueEntry.prototype.get_LocalValue = function () {
	if (this.BaseValueSource !== System.Windows.BaseValueSource.Local) {
		return System.Windows.DependencyProperty.UnsetValue;
	}
	if (!this.HasModifiers) {
		return this.Value;
	}
	return this.ModifiedValue.BaseValue;
};
$asm02.System.Windows.EffectiveValueEntry.prototype.get_ModifiedValue = function () {
	if (this._value !== null) {
		return JSIL.TryCast(this._value, $asm02.MS.Internal.ModifiedValue);
	}
	return null;
};
$asm02.System.Windows.EffectiveValueEntry.prototype.EnsureModifiedValue = function () {
	var modifiedValue = null;
	if (this._value === null) {
		modifiedValue = (this._value = new $asm02.MS.Internal.ModifiedValue());
	} else {
		modifiedValue = JSIL.TryCast(this._value, $asm02.MS.Internal.ModifiedValue);
		if (modifiedValue === null) {
			modifiedValue = new $asm02.MS.Internal.ModifiedValue();
			modifiedValue.BaseValue = this._value;
			this._value = modifiedValue;
		}
	}
	return modifiedValue;
};
$asm02.System.Windows.EffectiveValueEntry.prototype.Clear = function () {
	this._value = null;
	this._source = 0;
};
$asm02.System.Windows.EffectiveValueEntry.prototype.WritePrivateFlag = function (bit, value) {
	if (value) {
		this._source = (this._source | bit);
		return;
	}
	this._source = (this._source & ~bit);
};
$asm02.System.Windows.EffectiveValueEntry.prototype.ReadPrivateFlag = function (bit) {
	return ((this._source & bit) !== 0);
};
JSIL.OverloadedMethod(System.Windows.EffectiveValueEntry.prototype, "_ctor", [
		["_ctor$0", [System.Windows.BaseValueSource]], 
		["_ctor$1", [System.Object, System.Windows.BaseValueSource]]
	]);
JSIL.MakeProperty($asm02.System.Windows.EffectiveValueEntry.prototype, "Value", 
	$asm02.System.Windows.EffectiveValueEntry.prototype.get_Value, $asm02.System.Windows.EffectiveValueEntry.prototype.set_Value);
JSIL.MakeProperty($asm02.System.Windows.EffectiveValueEntry.prototype, "EffectiveValue", 
	$asm02.System.Windows.EffectiveValueEntry.prototype.get_EffectiveValue, null);
JSIL.MakeProperty($asm02.System.Windows.EffectiveValueEntry.prototype, "IsExpression", 
	$asm02.System.Windows.EffectiveValueEntry.prototype.get_IsExpression, $asm02.System.Windows.EffectiveValueEntry.prototype.set_IsExpression);
JSIL.MakeProperty($asm02.System.Windows.EffectiveValueEntry.prototype, "IsAnimated", 
	$asm02.System.Windows.EffectiveValueEntry.prototype.get_IsAnimated, $asm02.System.Windows.EffectiveValueEntry.prototype.set_IsAnimated);
JSIL.MakeProperty($asm02.System.Windows.EffectiveValueEntry.prototype, "HasModifiers", 
	$asm02.System.Windows.EffectiveValueEntry.prototype.get_HasModifiers, null);
JSIL.MakeProperty($asm02.System.Windows.EffectiveValueEntry.prototype, "BaseValueSource", 
	$asm02.System.Windows.EffectiveValueEntry.prototype.get_BaseValueSource, $asm02.System.Windows.EffectiveValueEntry.prototype.set_BaseValueSource);
JSIL.MakeProperty($asm02.System.Windows.EffectiveValueEntry.prototype, "FullValueSource", 
	$asm02.System.Windows.EffectiveValueEntry.prototype.get_FullValueSource, null);
JSIL.MakeProperty($asm02.System.Windows.EffectiveValueEntry.prototype, "IsLocalValueNewerThanAnimatedValue", 
	$asm02.System.Windows.EffectiveValueEntry.prototype.get_IsLocalValueNewerThanAnimatedValue, $asm02.System.Windows.EffectiveValueEntry.prototype.set_IsLocalValueNewerThanAnimatedValue);
JSIL.MakeProperty($asm02.System.Windows.EffectiveValueEntry.prototype, "LocalValue", 
	$asm02.System.Windows.EffectiveValueEntry.prototype.get_LocalValue, null);
JSIL.MakeProperty($asm02.System.Windows.EffectiveValueEntry.prototype, "ModifiedValue", 
	$asm02.System.Windows.EffectiveValueEntry.prototype.get_ModifiedValue, null);
$asm02.System.Windows.EffectiveValueEntry.prototype._value = null;
$asm02.System.Windows.EffectiveValueEntry.prototype._source = 0;

System.Windows.GridLength.prototype._ctor$0 = function (pixels) {
	this._ctor$1(pixels, System.Windows.GridUnitType.Pixel);
};
System.Windows.GridLength.prototype._ctor$1 = function (value, type) {
	if (!(!System.Double.IsNaN(value) && 
			!System.Double.IsInfinity(value) && (value >= 0))) {
		throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm02.System.Windows.Resx.GetString$2("InvalidArgument"), "value"]);
	}
	if (!(!JSIL.Cast(type, System.Boolean) || 
			(type === System.Windows.GridUnitType.Pixel) || (type === System.Windows.GridUnitType.Star))) {
		throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm02.System.Windows.Resx.GetString$2("InvalidArgument"), "type"]);
	}
	this._unitValue = !JSIL.Cast(type, System.Boolean) ? 1 : value;
	this._unitType = type;
};
System.Windows.GridLength.op_Equality = function (gl1, gl2) {
	return ((gl1.GridUnitType === gl2.GridUnitType) && (gl1.Value === gl2.Value));
};
System.Windows.GridLength.op_Inequality = function (gl1, gl2) {
	return ((gl1.GridUnitType !== gl2.GridUnitType) || (gl1.Value !== gl2.Value));
};
System.Windows.GridLength.prototype.Equals$0 = function (oCompare) {
	if (JSIL.TryCast(oCompare, System.Windows.GridLength) !== new System.Windows.GridLength()) {
		var gl = JSIL.Cast(oCompare, System.Windows.GridLength).MemberwiseClone();
		return System.Windows.GridLength.op_Equality(this.MemberwiseClone(), gl.MemberwiseClone());
	}
	return false;
};
System.Windows.GridLength.prototype.Equals$1 = function (gridLength) {
	return System.Windows.GridLength.op_Equality(this.MemberwiseClone(), gridLength);
};
System.Windows.GridLength.prototype.GetHashCode = function () {
	return (this._unitValue + this._unitType);
};
System.Windows.GridLength.prototype.get_IsAbsolute = function () {
	return (this._unitType === System.Windows.GridUnitType.Pixel);
};
System.Windows.GridLength.prototype.get_IsAuto = function () {
	return (this._unitType === System.Windows.GridUnitType.Auto);
};
System.Windows.GridLength.prototype.get_IsStar = function () {
	return (this._unitType === System.Windows.GridUnitType.Star);
};
System.Windows.GridLength.prototype.get_Value = function () {
	if (this._unitType !== 0) {
		return this._unitValue;
	}
	return System.Windows.GridLength.s_auto._unitValue;
};
System.Windows.GridLength.prototype.get_GridUnitType = function () {
	return this._unitType;
};
System.Windows.GridLength.prototype.toString = function () {
	return this.ToString(System.Globalization.CultureInfo.InvariantCulture);
};
System.Windows.GridLength.prototype.ToString = function (cultureInfo) {
	$asm02.MS.Internal.TokenizerHelper.GetNumericListSeparator(cultureInfo);
	if (this._unitType === 0) {
		var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$1", [4]);
		stringBuilder.Append$2("Auto");
	} else if (this._unitType === System.Windows.GridUnitType.Pixel) {
		stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$1", [12]);
		stringBuilder.Append$2(System.Convert.ToString$25(this._unitValue, cultureInfo));
	} else {
		stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$1", [13]);
		stringBuilder.Append$2(System.Convert.ToString$25(this._unitValue, cultureInfo));
		stringBuilder.Append$2("*");
	}
	return stringBuilder.toString();
};
System.Windows.GridLength.get_Auto = function () {
	return System.Windows.GridLength.s_auto;
};
JSIL.OverloadedMethod(System.Windows.GridLength.prototype, "_ctor", [
		["_ctor$0", [System.Double]], 
		["_ctor$1", [System.Double, System.Windows.GridUnitType]]
	]);
JSIL.OverloadedMethod(System.Windows.GridLength.prototype, "Equals", [
		["Equals$0", [System.Object]], 
		["Equals$1", [System.Windows.GridLength]]
	]);
JSIL.MakeProperty(System.Windows.GridLength.prototype, "IsAbsolute", 
	System.Windows.GridLength.prototype.get_IsAbsolute, null);
JSIL.MakeProperty(System.Windows.GridLength.prototype, "IsAuto", 
	System.Windows.GridLength.prototype.get_IsAuto, null);
JSIL.MakeProperty(System.Windows.GridLength.prototype, "IsStar", 
	System.Windows.GridLength.prototype.get_IsStar, null);
JSIL.MakeProperty(System.Windows.GridLength.prototype, "Value", 
	System.Windows.GridLength.prototype.get_Value, null);
JSIL.MakeProperty(System.Windows.GridLength.prototype, "GridUnitType", 
	System.Windows.GridLength.prototype.get_GridUnitType, null);
JSIL.MakeProperty(System.Windows.GridLength, "Auto", 
	System.Windows.GridLength.get_Auto, null);
Object.defineProperty(System.Windows.GridLength, "Default", {
		"value": 1}
);
System.Windows.GridLength.prototype._unitValue = 0;
System.Windows.GridLength.prototype._unitType = 0;
System.Windows.GridLength._cctor = function () {
	System.Windows.GridLength.s_auto = new System.Windows.GridLength();
	System.Windows.GridLength.s_auto = JSIL.New(System.Windows.GridLength, "_ctor$1", [1, System.Windows.GridUnitType.Auto]);
};

$asm02.System.Windows.PropertyPathStep.prototype._ctor = function (listener) {
	System.Object.prototype._ctor.call(this);
	this.Listener = listener;
};
$asm02.System.Windows.PropertyPathStep.prototype.get_NextStep = function () {
	return this.NextStep$value;
};
$asm02.System.Windows.PropertyPathStep.prototype.set_NextStep = function (value) {
	this.NextStep$value = value;
};
$asm02.System.Windows.PropertyPathStep.prototype.get_Listener = function () {
	return this.Listener$value;
};
$asm02.System.Windows.PropertyPathStep.prototype.set_Listener = function (value) {
	this.Listener$value = value;
};
JSIL.MakeProperty($asm02.System.Windows.PropertyPathStep.prototype, "NextStep", 
	$asm02.System.Windows.PropertyPathStep.prototype.get_NextStep, $asm02.System.Windows.PropertyPathStep.prototype.set_NextStep);
JSIL.MakeProperty($asm02.System.Windows.PropertyPathStep.prototype, "Value", 
	$asm02.System.Windows.PropertyPathStep.prototype.get_Value, $asm02.System.Windows.PropertyPathStep.prototype.set_Value);
JSIL.MakeProperty($asm02.System.Windows.PropertyPathStep.prototype, "Source", 
	$asm02.System.Windows.PropertyPathStep.prototype.get_Source, null);
JSIL.MakeProperty($asm02.System.Windows.PropertyPathStep.prototype, "IsConnected", 
	$asm02.System.Windows.PropertyPathStep.prototype.get_IsConnected, null);
JSIL.MakeProperty($asm02.System.Windows.PropertyPathStep.prototype, "Type", 
	$asm02.System.Windows.PropertyPathStep.prototype.get_Type, null);
JSIL.MakeProperty($asm02.System.Windows.PropertyPathStep.prototype, "Property", 
	$asm02.System.Windows.PropertyPathStep.prototype.get_Property, null);
JSIL.MakeProperty($asm02.System.Windows.PropertyPathStep.prototype, "PropertyName", 
	$asm02.System.Windows.PropertyPathStep.prototype.get_PropertyName, null);
JSIL.MakeProperty($asm02.System.Windows.PropertyPathStep.prototype, "Listener", 
	$asm02.System.Windows.PropertyPathStep.prototype.get_Listener, $asm02.System.Windows.PropertyPathStep.prototype.set_Listener);
$asm02.System.Windows.PropertyPathStep.prototype.NextStep$value = null;
$asm02.System.Windows.PropertyPathStep.prototype.Listener$value = null;

$asm02.System.Windows.IndexerPathStep.prototype._ctor = function (listener, source, index, listenToChanges) {
	this._value = System.Windows.DependencyProperty.UnsetValue;
	$asm02.System.Windows.PropertyPathStep.prototype._ctor.call(this, listener);
	this._source = source;
	this._index = index;
	this._listenToChanges = listenToChanges;
	this.ConnectToIndexer();
};
$asm02.System.Windows.IndexerPathStep.prototype.ReConnect = function (newSource) {
	this.Disconnect();
	this._source = newSource;
	this.ConnectToIndexer();
};
$asm02.System.Windows.IndexerPathStep.prototype.ConnectToIndexer = function () {
	if (!((this._source !== null) && (this._source !== System.Windows.DependencyProperty.UnsetValue))) {
		return;
	}
	if (this.ConnectToIndexerInSource()) {
		return;
	}
	var collectionView = JSIL.TryCast(this._source, System.ComponentModel.ICollectionView);
	if (collectionView !== null) {
		this._collectionView = collectionView;
		this._collectionView.ICollectionView_add_CurrentChanged(JSIL.Delegate.New("System.EventHandler", this, $asm02.System.Windows.IndexerPathStep.prototype.CurrentItemChanged));
		this._source = this._collectionView.ICollectionView_CurrentItem;
		this.ConnectToIndexerInSource();
	}
};
$asm02.System.Windows.IndexerPathStep.prototype.ConnectToIndexerInSource = function () {
	if (!((this._source !== null) && (this._source !== System.Windows.DependencyProperty.UnsetValue))) {
		return false;
	}
	this._indexer = this.FindIndexerProperty(this._source);
	if (this._indexer === null) {
		return false;
	}
	if (this._propertyListener === null) {
		this._propertyListener = $asm02.System.Windows.IndexerListener.CreateListener(
			this, 
			this._source, 
			this._index, 
			this._intIndexer, 
			this._indexer, 
			this._listenToChanges
		);
	}
	if (this._listenToChanges) {
		this._collectionChangedListener = $asm02.System.Windows.Controls.WeakCollectionChangedListener.CreateIfNecessary(this._source, this);
	}
	if (!this.IsConnected) {
		var text = this._index.toString();
		var text2 = this._source ? this._source.toString() : "null";
		var text3 = this._source ? JSIL.GetType(this._source).toString() : "null";
		$asm02.MS.Internal.Trace.WriteLine(System.String.Format(System.Globalization.CultureInfo.CurrentCulture, $asm02.System.Windows.Resx.GetString$2("BindingExpression_FailedToConnectToIndexer"), [text, text2, text3, $asm02.System.Windows.PropertyPathStep.prototype.get_Listener.call(this).TraceContext]));
	}
	return true;
};
$asm02.System.Windows.IndexerPathStep.prototype.FindIndexerProperty = function (source) {
	var type = (JSIL.GetType(source));
	var propertyInfo = this.FindIndexerInMembers(type.GetDefaultMembers());
	if (propertyInfo !== null) {
		return propertyInfo;
	}
	if (JSIL.TryCast(source, System.Collections.IList) !== null) {
		propertyInfo = this.GetIListIndexer();
	}
	return propertyInfo;
};
$asm02.System.Windows.IndexerPathStep.prototype.FindIndexerInMembers = function (members) {
	var result = null;
__loop0__: 
	for (var i = 0; i < members.length; ++i) {
		var propertyInfo = JSIL.Cast(members[i], System.Reflection.PropertyInfo);
		if (propertyInfo !== null) {
			var indexParameters = propertyInfo.GetIndexParameters();
			if (indexParameters.length <= 1) {
				if (indexParameters[0].ParameterType === System.Int32) {
					var num = new JSIL.Variable(-1);
					if (System.Int32.TryParse$1(this._index.Trim$1(), System.Globalization.NumberStyles.None, System.Globalization.CultureInfo.InvariantCulture, /* ref */ num)) {
						this._intIndexer = true;
						return propertyInfo;
					}
				}
				if (indexParameters[0].ParameterType === System.String) {
					result = propertyInfo;
				}
			}
		}
	}
	return result;
};
$asm02.System.Windows.IndexerPathStep.prototype.GetIListIndexer = function () {
	if (this._IListIndexer === null) {
		this._IListIndexer = this.FindIndexerInMembers(System.Collections.IList.GetDefaultMembers());
		this._intIndexer = true;
	}
	return this._IListIndexer;
};
$asm02.System.Windows.IndexerPathStep.prototype.Disconnect = function () {
	this.DisconnectListener();
	if (this._collectionView !== null) {
		this._collectionView.ICollectionView_remove_CurrentChanged(JSIL.Delegate.New("System.EventHandler", this, $asm02.System.Windows.IndexerPathStep.prototype.CurrentItemChanged));
	}
	this._collectionView = null;
	this._source = null;
};
$asm02.System.Windows.IndexerPathStep.prototype.DisconnectListener = function () {
	this._indexer = null;
	this._value = System.Windows.DependencyProperty.UnsetValue;
	if (this._collectionChangedListener !== null) {
		this._collectionChangedListener.Disconnect();
		this._collectionChangedListener = null;
	}
	if (this._propertyListener !== null) {
		this._propertyListener.Disconnect();
		this._propertyListener = null;
	}
};
$asm02.System.Windows.IndexerPathStep.prototype.ICollectionChangedListener_OnCollectionChanged = function (sender, e) {
	var flag = false;
	var num = new JSIL.Variable(0);
	if (System.Int32.TryParse$1(this._index.Trim$1(), System.Globalization.NumberStyles.None, System.Globalization.CultureInfo.InvariantCulture, /* ref */ num)) {
		switch (Number(e.Action)) {
			case 0: 
				if (e.NewStartingIndex <= num.value) {
					flag = true;
				}
				break;
			case 1: 
				if (e.OldStartingIndex <= num.value) {
					flag = true;
				}
				break;
			case 2: 
				if (e.NewStartingIndex === num.value) {
					flag = true;
				}
				break;
			case 4: 
				flag = true;
				break;
		}
	} else {
		flag = true;
	}
	if (flag) {
		this._value = System.Windows.DependencyProperty.UnsetValue;
		$asm02.System.Windows.PropertyPathStep.prototype.get_Listener.call(this).RaisePropertyPathStepChanged(this);
	}
};
$asm02.System.Windows.IndexerPathStep.prototype.CurrentItemChanged = function (o, e) {
	this.DisconnectListener();
	this._source = this._collectionView.ICollectionView_CurrentItem;
	this.ConnectToIndexerInSource();
	$asm02.System.Windows.PropertyPathStep.prototype.get_Listener.call(this).RaisePropertyPathStepChanged(this);
};
$asm02.System.Windows.IndexerPathStep.prototype.RaisePropertyPathStepChanged = function (source) {
	$asm02.System.Windows.PropertyPathStep.prototype.get_Listener.call(this).RaisePropertyPathStepChanged(this);
};
$asm02.System.Windows.IndexerPathStep.prototype.get_IsConnected = function () {
	return ((this._indexer !== null) && this.ValidIndex(this._index));
};
$asm02.System.Windows.IndexerPathStep.prototype.get_Type = function () {
	return this._propertyListener.Type;
};
$asm02.System.Windows.IndexerPathStep.prototype.get_Property = function () {
	return this._propertyListener.Property;
};
$asm02.System.Windows.IndexerPathStep.prototype.get_PropertyName = function () {
	var propertyInfo = JSIL.Cast(this._propertyListener.Property, System.Reflection.PropertyInfo);
	return (propertyInfo.Name + "[" + this._index + "]");
};
$asm02.System.Windows.IndexerPathStep.prototype.get_Value = function () {
	if (this._propertyListener !== null) {
		this._value = this._propertyListener.Value;
		return this._value;
	}
	return System.Windows.DependencyProperty.UnsetValue;
};
$asm02.System.Windows.IndexerPathStep.prototype.set_Value = function (value) {
	this._value = value;
	this._propertyListener.Value = value;
};
$asm02.System.Windows.IndexerPathStep.prototype.get_Source = function () {
	return this._source;
};
$asm02.System.Windows.IndexerPathStep.prototype.ValidIndex = function (index) {
	var num = new JSIL.Variable(0);
	if (this._indexer !== null) {
		var list = JSIL.TryCast(this._source, System.Collections.IList);
		if (!((list === null) || !System.Int32.TryParse$1(index.Trim$1(), System.Globalization.NumberStyles.None, System.Globalization.CultureInfo.InvariantCulture, /* ref */ num))) {
			return (list.ICollection_Count > num.value);
		}
		if (index !== null) {
			try {
				this._indexer.GetValue$0(this._source, [this._index]);
			} catch ($exception) {
				return false;
			}
			return true;
		}
		var text = JSIL.TryCast(this._source, System.String);
		if (text !== null) {
			return (text.length > System.Int32.Parse(index.toString().Trim$1(), System.Globalization.CultureInfo.InvariantCulture));
		}
	}
	return false;
};
JSIL.MakeProperty($asm02.System.Windows.IndexerPathStep.prototype, "IsConnected", 
	$asm02.System.Windows.IndexerPathStep.prototype.get_IsConnected, null);
JSIL.MakeProperty($asm02.System.Windows.IndexerPathStep.prototype, "Type", 
	$asm02.System.Windows.IndexerPathStep.prototype.get_Type, null);
JSIL.MakeProperty($asm02.System.Windows.IndexerPathStep.prototype, "Property", 
	$asm02.System.Windows.IndexerPathStep.prototype.get_Property, null);
JSIL.MakeProperty($asm02.System.Windows.IndexerPathStep.prototype, "PropertyName", 
	$asm02.System.Windows.IndexerPathStep.prototype.get_PropertyName, null);
JSIL.MakeProperty($asm02.System.Windows.IndexerPathStep.prototype, "Value", 
	$asm02.System.Windows.IndexerPathStep.prototype.get_Value, $asm02.System.Windows.IndexerPathStep.prototype.set_Value);
JSIL.MakeProperty($asm02.System.Windows.IndexerPathStep.prototype, "Source", 
	$asm02.System.Windows.IndexerPathStep.prototype.get_Source, null);
$asm02.System.Windows.IndexerPathStep.prototype._source = null;
$asm02.System.Windows.IndexerPathStep.prototype._collectionView = null;
$asm02.System.Windows.IndexerPathStep.prototype._value = null;
$asm02.System.Windows.IndexerPathStep.prototype._index = null;
$asm02.System.Windows.IndexerPathStep.prototype._intIndexer = false;
$asm02.System.Windows.IndexerPathStep.prototype._listenToChanges = false;
$asm02.System.Windows.IndexerPathStep.prototype._indexer = null;
$asm02.System.Windows.IndexerPathStep.prototype._collectionChangedListener = null;
$asm02.System.Windows.IndexerPathStep.prototype._IListIndexer = null;
$asm02.System.Windows.IndexerPathStep.prototype._propertyListener = null;

$asm02.MS.Internal.InternalMemoryStream.prototype._ctor = function (pMemory, size, finalUri) {
	System.IO.Stream.prototype._ctor.call(this);
	this._pBytes = pMemory;
	this._size = size;
	this._position = 0;
	this._closed = false;
	this._finalUri = finalUri;
	this._lock = new System.Object();
};
$asm02.MS.Internal.InternalMemoryStream.prototype.Finalize = function () {
	try {
		if (!this._closed) {
			this.CleanUp();
		}
	} finally {
		System.Object.prototype.Finalize.call(this);
	}
};
$asm02.MS.Internal.InternalMemoryStream.prototype.get_CanRead = function () {
	return !this._closed;
};
$asm02.MS.Internal.InternalMemoryStream.prototype.get_CanSeek = function () {
	return !this._closed;
};
$asm02.MS.Internal.InternalMemoryStream.prototype.get_CanWrite = function () {
	return false;
};
$asm02.MS.Internal.InternalMemoryStream.prototype.get_Length = function () {
	var lock = null;
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
	return this._size;
};
$asm02.MS.Internal.InternalMemoryStream.prototype.get_Position = function () {
	var lock = null;
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
	return this._position;
};
$asm02.MS.Internal.InternalMemoryStream.prototype.set_Position = function (value) {
	var lock = null;
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
		var num = value;
		if (value < 0) {
			num = 0;
		} else if (value > this._size) {
			num = this._size;
		}
		this._position = num;
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
};
$asm02.MS.Internal.InternalMemoryStream.prototype.Flush = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm02.MS.Internal.InternalMemoryStream.prototype.Seek = function (offset, origin) {
	var lock = null;
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
		if (this._closed) {
			throw JSIL.New(System.ObjectDisposedException, "_ctor$1", [this.toString()]);
		}
		if (!JSIL.Cast(origin, System.Boolean)) {
			if (offset < 0) {
				this._position = 0;
			} else if (offset > this._size) {
				this._position = this._size;
			} else {
				this._position = offset;
			}
		} else if (origin === System.IO.SeekOrigin.Current) {
			if ((offset + this._position) > this._size) {
				this._position = this._size;
			} else if ((offset + this._position) < 0) {
				this._position = 0;
			} else {
				this._position += offset;
			}
		} else {
			if (origin !== System.IO.SeekOrigin.End) {
				throw JSIL.New(System.ArgumentException, "_ctor$0", []);
			}
			if (offset > 0) {
				this._position = this._size;
			} else if ((this._size + offset) < 0) {
				this._position = 0;
			} else {
				this._position = (this._size + offset);
			}
		}
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
	return this._position;
};
$asm02.MS.Internal.InternalMemoryStream.prototype.SetLength = function (value) {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm02.MS.Internal.InternalMemoryStream.prototype.Read = function (buffer, offset, count) {
	var lock = null, source = new JSIL.Variable(0);
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
		if (this._closed) {
			throw JSIL.New(System.ObjectDisposedException, "_ctor$1", [this.toString()]);
		}
		var num = 0;
		var num2 = new JSIL.Variable(0);
		if (!((count >= 0) && ((this._position + count) >= this._position))) {
			throw JSIL.New(System.ArgumentException, "_ctor$0", []);
		}
		if (count === 0) {
			var result = 0;
		} else {
			if ((this._position + count) > this._size) {
				num = (this._size - this._position);
			} else {
				num = count;
			}
			if (num > 0) {
				$asm02.MS.Internal.XcpImports.ReadInternalMemory(
					this._pBytes, 
					this._position, 
					num, 
					/* ref */ source, 
					/* ref */ num2
				);
				this._position += num2.value;
				System.Runtime.InteropServices.Marshal.Copy$13(source.value, buffer, offset, num2.value);
			}
			result = num;
		}
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
	return result;
};
$asm02.MS.Internal.InternalMemoryStream.prototype.Write = function (buffer, offset, count) {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm02.MS.Internal.InternalMemoryStream.prototype.Close = function () {
	var lock = null;
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
		if (!this._closed) {
			this.CleanUp();
		}
		System.IO.Stream.prototype.Close.call(this);
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
};
$asm02.MS.Internal.InternalMemoryStream.prototype.Dispose = function (disposing) {
	var lock = null;
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
		if (!this._closed) {
			this.CleanUp();
		}
		System.IO.Stream.prototype.Dispose$1.call(this, disposing);
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
};
$asm02.MS.Internal.InternalMemoryStream.prototype.get_FinalUri = function () {
	return this._finalUri;
};
$asm02.MS.Internal.InternalMemoryStream.prototype.CleanUp = function () {
	try {
		$asm02.MS.Internal.XcpImports.ReleaseInternalMemory(this._pBytes);
	} finally {
		this._pBytes = System.IntPtr.Zero;
		this._closed = true;
		this._finalUri = null;
	}
};
$asm02.MS.Internal.InternalMemoryStream.prototype.get_NativeObject = function () {
	return this._pBytes;
};
JSIL.MakeProperty($asm02.MS.Internal.InternalMemoryStream.prototype, "CanRead", 
	$asm02.MS.Internal.InternalMemoryStream.prototype.get_CanRead, null);
JSIL.MakeProperty($asm02.MS.Internal.InternalMemoryStream.prototype, "CanSeek", 
	$asm02.MS.Internal.InternalMemoryStream.prototype.get_CanSeek, null);
JSIL.MakeProperty($asm02.MS.Internal.InternalMemoryStream.prototype, "CanWrite", 
	$asm02.MS.Internal.InternalMemoryStream.prototype.get_CanWrite, null);
JSIL.MakeProperty($asm02.MS.Internal.InternalMemoryStream.prototype, "Length", 
	$asm02.MS.Internal.InternalMemoryStream.prototype.get_Length, null);
JSIL.MakeProperty($asm02.MS.Internal.InternalMemoryStream.prototype, "Position", 
	$asm02.MS.Internal.InternalMemoryStream.prototype.get_Position, $asm02.MS.Internal.InternalMemoryStream.prototype.set_Position);
JSIL.MakeProperty($asm02.MS.Internal.InternalMemoryStream.prototype, "FinalUri", 
	$asm02.MS.Internal.InternalMemoryStream.prototype.get_FinalUri, null);
JSIL.MakeProperty($asm02.MS.Internal.InternalMemoryStream.prototype, "NativeObject", 
	$asm02.MS.Internal.InternalMemoryStream.prototype.get_NativeObject, null);
$asm02.MS.Internal.InternalMemoryStream.prototype._pBytes = 0;
$asm02.MS.Internal.InternalMemoryStream.prototype._size = 0;
$asm02.MS.Internal.InternalMemoryStream.prototype._position = 0;
$asm02.MS.Internal.InternalMemoryStream.prototype._closed = false;
$asm02.MS.Internal.InternalMemoryStream.prototype._finalUri = null;
$asm02.MS.Internal.InternalMemoryStream.prototype._lock = null;

$asm02.MS.Internal.InternalWebRequestStream.prototype._ctor = function (stream) {
	System.IO.Stream.prototype._ctor.call(this);
	this._stream = stream;
};
$asm02.MS.Internal.InternalWebRequestStream.prototype.Finalize = function () {
	try {
	} finally {
		System.Object.prototype.Finalize.call(this);
	}
};
$asm02.MS.Internal.InternalWebRequestStream.prototype.ConfirmNotDisposed = function () {
	if (this._stream === null) {
		throw JSIL.New(System.ObjectDisposedException, "_ctor$1", ["Stream"]);
	}
};
$asm02.MS.Internal.InternalWebRequestStream.prototype.get_CanRead = function () {
	return ((this._stream !== null) && this._stream.CanRead);
};
$asm02.MS.Internal.InternalWebRequestStream.prototype.get_CanSeek = function () {
	return ((this._stream !== null) && this._stream.CanSeek);
};
$asm02.MS.Internal.InternalWebRequestStream.prototype.get_CanWrite = function () {
	return ((this._stream !== null) && this._stream.CanWrite);
};
$asm02.MS.Internal.InternalWebRequestStream.prototype.get_Length = function () {
	this.ConfirmNotDisposed();
	return this._stream.Length;
};
$asm02.MS.Internal.InternalWebRequestStream.prototype.get_Position = function () {
	this.ConfirmNotDisposed();
	return this._stream.Position;
};
$asm02.MS.Internal.InternalWebRequestStream.prototype.set_Position = function (value) {
	this.ConfirmNotDisposed();
	this._stream.Position = value;
};
$asm02.MS.Internal.InternalWebRequestStream.prototype.Flush = function () {
	this.ConfirmNotDisposed();
	this._stream.Flush();
};
$asm02.MS.Internal.InternalWebRequestStream.prototype.Seek = function (offset, origin) {
	this.ConfirmNotDisposed();
	return this._stream.Seek(offset, origin);
};
$asm02.MS.Internal.InternalWebRequestStream.prototype.SetLength = function (value) {
	this.ConfirmNotDisposed();
	this._stream.SetLength(value);
};
$asm02.MS.Internal.InternalWebRequestStream.prototype.Read = function (buffer, offset, count) {
	this.ConfirmNotDisposed();
	return this._stream.Read(buffer, offset, count);
};
$asm02.MS.Internal.InternalWebRequestStream.prototype.Write = function (buffer, offset, count) {
	this.ConfirmNotDisposed();
	this._stream.Write(buffer, offset, count);
};
$asm02.MS.Internal.InternalWebRequestStream.prototype.Close = function () {
	this._stream = null;
};
$asm02.MS.Internal.InternalWebRequestStream.prototype.IsClosed = function () {
	return (this._stream === null);
};
$asm02.MS.Internal.InternalWebRequestStream.prototype.Dispose = function (disposing) {
	System.IO.Stream.prototype.Dispose$1.call(this, disposing);
};
JSIL.MakeProperty($asm02.MS.Internal.InternalWebRequestStream.prototype, "CanRead", 
	$asm02.MS.Internal.InternalWebRequestStream.prototype.get_CanRead, null);
JSIL.MakeProperty($asm02.MS.Internal.InternalWebRequestStream.prototype, "CanSeek", 
	$asm02.MS.Internal.InternalWebRequestStream.prototype.get_CanSeek, null);
JSIL.MakeProperty($asm02.MS.Internal.InternalWebRequestStream.prototype, "CanWrite", 
	$asm02.MS.Internal.InternalWebRequestStream.prototype.get_CanWrite, null);
JSIL.MakeProperty($asm02.MS.Internal.InternalWebRequestStream.prototype, "Length", 
	$asm02.MS.Internal.InternalWebRequestStream.prototype.get_Length, null);
JSIL.MakeProperty($asm02.MS.Internal.InternalWebRequestStream.prototype, "Position", 
	$asm02.MS.Internal.InternalWebRequestStream.prototype.get_Position, $asm02.MS.Internal.InternalWebRequestStream.prototype.set_Position);
$asm02.MS.Internal.InternalWebRequestStream.prototype._stream = null;

$asm02.MS.Internal.InternalNetworkStream.prototype._ctor = function (pStream) {
	System.IO.Stream.prototype._ctor.call(this);
	this._pStream = pStream;
	this._size = 0;
	this._position = 0;
	this._closed = false;
	this._lock = new System.Object();
	this._complete = false;
	this._reading = false;
	this._event = new System.Threading.ManualResetEvent(true);
	this._syncCompletions = 0;
};
$asm02.MS.Internal.InternalNetworkStream.prototype.Finalize = function () {
	try {
		if (!this._closed) {
			this.CleanUp();
		}
	} finally {
		System.Object.prototype.Finalize.call(this);
	}
};
$asm02.MS.Internal.InternalNetworkStream.prototype.get_CanRead = function () {
	return !this._closed;
};
$asm02.MS.Internal.InternalNetworkStream.prototype.get_CanSeek = function () {
	return false;
};
$asm02.MS.Internal.InternalNetworkStream.prototype.get_CanWrite = function () {
	return false;
};
$asm02.MS.Internal.InternalNetworkStream.prototype.get_CanTimeout = function () {
	return true;
};
$asm02.MS.Internal.InternalNetworkStream.prototype.get_Length = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm02.MS.Internal.InternalNetworkStream.prototype.get_Position = function () {
	var lock = null;
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
	return this._position;
};
$asm02.MS.Internal.InternalNetworkStream.prototype.set_Position = function (value) {
	this.Seek(value, System.IO.SeekOrigin.Begin);
};
$asm02.MS.Internal.InternalNetworkStream.prototype.Flush = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm02.MS.Internal.InternalNetworkStream.prototype.Seek = function (offset, origin) {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm02.MS.Internal.InternalNetworkStream.prototype.SetLength = function (value) {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm02.MS.Internal.InternalNetworkStream.prototype.BeginRead = function (buffer, offset, count, callback, state) {
	var lock = null;
	if (!(!$asm02.MS.Internal.XcpImports.OnMainThread() || callback)) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["callback"]);
	}
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
		var closed = this._closed;
		var position = this._position;
		if (closed) {
			throw JSIL.New(System.ObjectDisposedException, "_ctor$1", [this.toString()]);
		}
		if (buffer === null) {
			throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["buffer"]);
		}
		if (!((offset >= 0) && (offset <= buffer.length))) {
			throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["offset"]);
		}
		if (!((count >= 0) && 
				(count <= (buffer.length - offset)) && ((position + count) >= position))) {
			throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["count"]);
		}
		if (this._reading) {
			throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
		}
		this._reading = true;
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
	var readState = new $asm02.MS.Internal.InternalNetworkStream.ReadState();
	readState.buffer = buffer;
	readState.offset = offset;
	readState.count = count;
	readState.result = new $asm02.MS.Internal.InternalNetworkStream.StreamAsyncResult(callback, state);
	if (this._syncCompletions < 10) {
		System.Threading.Interlocked.Increment$0(/* ref */ new JSIL.MemberReference(this, "_syncCompletions"));
		readState.sync = true;
		this.ReadOperation(readState);
	} else {
		System.Threading.Interlocked.Exchange$0(/* ref */ new JSIL.MemberReference(this, "_syncCompletions"), 0);
		readState.sync = false;
		System.Threading.ThreadPool.QueueUserWorkItem$0(JSIL.Delegate.New("System.Threading.WaitCallback", this, $asm02.MS.Internal.InternalNetworkStream.prototype.ReadOperation), readState);
	}
	return readState.result;
};
$asm02.MS.Internal.InternalNetworkStream.prototype.ReadOperation = function (state) {
	var lock = null, element = new JSIL.Variable(0), source = new JSIL.Variable(0);
	var readState = JSIL.TryCast(state, $asm02.MS.Internal.InternalNetworkStream.ReadState);
	var num = new JSIL.Variable(0);
	var flag = false;
	var error = null;
	if (this._event === null) {
		throw JSIL.New(System.ObjectDisposedException, "_ctor$1", [this.toString()]);
	}
	this._event.WaitOne$2();
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
		try {
			if (this._closed) {
				throw JSIL.New(System.ObjectDisposedException, "_ctor$1", [this.toString()]);
			}
			if (!this._reading) {
				throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
			}
			var num2 = System.Math.Min(readState.count, (this._size - this._position));
			if (num2 < 0) {
				throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
			}
			if (num2 === 0) {
				if (!((readState.count !== 0) && !this._complete)) {
					this._reading = false;
				} else {
					this._event.Reset();
					readState.sync = false;
					System.Threading.ThreadPool.QueueUserWorkItem$0(JSIL.Delegate.New("System.Threading.WaitCallback", this, $asm02.MS.Internal.InternalNetworkStream.prototype.ReadOperation), readState);
				}
			} else {
				$asm02.MS.Internal.XcpImports.ReadInternalStream(
					this._pStream, 
					num2, 
					/* ref */ element, 
					/* ref */ source, 
					/* ref */ num
				);
				this._position += num.value;
				try {
					System.Runtime.InteropServices.Marshal.Copy$13(source.value, readState.buffer, readState.offset, num.value);
				} finally {
					$asm02.MS.Internal.XcpImports.ReleaseInternalMemory(element.value);
				}
				this._reading = false;
			}
		} catch ($exception) {
			this._reading = false;
			error = $exception;
		}
		flag = !this._reading;
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
	if (flag) {
		readState.result.Complete(num.value, readState.sync, error);
	}
};
$asm02.MS.Internal.InternalNetworkStream.prototype.EndRead = function (asyncResult) {
	if (!((asyncResult !== null) && JSIL.TryCast(asyncResult, $asm02.MS.Internal.InternalNetworkStream.StreamAsyncResult))) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", ["asyncResult"]);
	}
	if (!asyncResult.IAsyncResult_IsCompleted) {
		asyncResult.IAsyncResult_AsyncWaitHandle.WaitOne$2();
	}
	var streamAsyncResult = JSIL.TryCast(asyncResult, $asm02.MS.Internal.InternalNetworkStream.StreamAsyncResult);
	if (streamAsyncResult.Error !== null) {
		throw streamAsyncResult.Error;
	}
	return streamAsyncResult.BytesProcessed;
};
$asm02.MS.Internal.InternalNetworkStream.prototype.Read = function (buffer, offset, count) {
	if ($asm02.MS.Internal.XcpImports.OnMainThread()) {
		throw JSIL.New(System.NotSupportedException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("InternalNetworkStream_ReadOnMainThread")]);
	}
	var asyncResult = this.BeginRead(
		buffer, 
		offset, 
		count, 
		null, 
		null
	);
	return this.EndRead(asyncResult);
};
$asm02.MS.Internal.InternalNetworkStream.prototype.Write = function (buffer, offset, count) {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm02.MS.Internal.InternalNetworkStream.prototype.Close = function () {
	var lock = null;
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
		if (!this._closed) {
			this.CleanUp();
		}
		System.IO.Stream.prototype.Close.call(this);
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
};
$asm02.MS.Internal.InternalNetworkStream.prototype.Dispose = function (disposing) {
	var lock = null;
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
		if (!this._closed) {
			this.CleanUp();
		}
		if (this._event !== null) {
			this._event.IDisposable_Dispose();
			this._event = null;
		}
		System.IO.Stream.prototype.Dispose$1.call(this, disposing);
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
};
$asm02.MS.Internal.InternalNetworkStream.prototype.CleanUp = function () {
	try {
		$asm02.MS.Internal.XcpImports.ReleaseInternalStream(this._pStream);
	} finally {
		this._pStream = System.IntPtr.Zero;
		this._closed = true;
		if (this._event !== null) {
			this._event.Set();
		}
	}
};
$asm02.MS.Internal.InternalNetworkStream.prototype.get_NativeObject = function () {
	return this._pStream;
};
$asm02.MS.Internal.InternalNetworkStream.prototype.DownloadProgress = function (bytesAvailable) {
	var lock = null;
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
		if (this._size === bytesAvailable) {
			return;
		}
		this._size = bytesAvailable;
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
	if (this._event !== null) {
		this._event.Set();
	}
};
$asm02.MS.Internal.InternalNetworkStream.prototype.DownloadComplete = function (bytesAvailable) {
	var lock = null;
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
		this._complete = true;
		this.DownloadProgress(bytesAvailable);
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
	if (this._event !== null) {
		this._event.Set();
	}
};
JSIL.MakeProperty($asm02.MS.Internal.InternalNetworkStream.prototype, "CanRead", 
	$asm02.MS.Internal.InternalNetworkStream.prototype.get_CanRead, null);
JSIL.MakeProperty($asm02.MS.Internal.InternalNetworkStream.prototype, "CanSeek", 
	$asm02.MS.Internal.InternalNetworkStream.prototype.get_CanSeek, null);
JSIL.MakeProperty($asm02.MS.Internal.InternalNetworkStream.prototype, "CanWrite", 
	$asm02.MS.Internal.InternalNetworkStream.prototype.get_CanWrite, null);
JSIL.MakeProperty($asm02.MS.Internal.InternalNetworkStream.prototype, "CanTimeout", 
	$asm02.MS.Internal.InternalNetworkStream.prototype.get_CanTimeout, null);
JSIL.MakeProperty($asm02.MS.Internal.InternalNetworkStream.prototype, "Length", 
	$asm02.MS.Internal.InternalNetworkStream.prototype.get_Length, null);
JSIL.MakeProperty($asm02.MS.Internal.InternalNetworkStream.prototype, "Position", 
	$asm02.MS.Internal.InternalNetworkStream.prototype.get_Position, $asm02.MS.Internal.InternalNetworkStream.prototype.set_Position);
JSIL.MakeProperty($asm02.MS.Internal.InternalNetworkStream.prototype, "NativeObject", 
	$asm02.MS.Internal.InternalNetworkStream.prototype.get_NativeObject, null);
$asm02.MS.Internal.InternalNetworkStream.prototype._pStream = 0;
$asm02.MS.Internal.InternalNetworkStream.prototype._size = 0;
$asm02.MS.Internal.InternalNetworkStream.prototype._position = 0;
$asm02.MS.Internal.InternalNetworkStream.prototype._closed = false;
$asm02.MS.Internal.InternalNetworkStream.prototype._lock = null;
$asm02.MS.Internal.InternalNetworkStream.prototype._complete = false;
$asm02.MS.Internal.InternalNetworkStream.prototype._reading = false;
$asm02.MS.Internal.InternalNetworkStream.prototype._event = null;
$asm02.MS.Internal.InternalNetworkStream.prototype._syncCompletions = 0;

$asm02.MS.Internal.InternalNetworkStream.StreamAsyncResult.prototype._ctor = function (callback, state) {
	this.objectLock = new System.Object();
	System.Object.prototype._ctor.call(this);
	this.callback = callback;
	this.asyncState = state;
};
$asm02.MS.Internal.InternalNetworkStream.StreamAsyncResult.prototype.get_AsyncState = function () {
	return this.asyncState;
};
$asm02.MS.Internal.InternalNetworkStream.StreamAsyncResult.prototype.get_AsyncWaitHandle = function () {
	var obj = null;
	if ($asm02.MS.Internal.XcpImports.OnMainThread()) {
		throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
	}
	System.Threading.Monitor.Enter((obj = this.objectLock));
	try {
		if (this.waitHandle === null) {
			this.waitHandle = new System.Threading.ManualResetEvent(this.isCompleted);
		}
	} finally {
		System.Threading.Monitor.Exit(obj);
	}
	return this.waitHandle;
};
$asm02.MS.Internal.InternalNetworkStream.StreamAsyncResult.prototype.get_CompletedSynchronously = function () {
	return this.completedSynchronously;
};
$asm02.MS.Internal.InternalNetworkStream.StreamAsyncResult.prototype.get_IsCompleted = function () {
	return this.isCompleted;
};
$asm02.MS.Internal.InternalNetworkStream.StreamAsyncResult.prototype.get_BytesProcessed = function () {
	return this.bytesProcessed;
};
$asm02.MS.Internal.InternalNetworkStream.StreamAsyncResult.prototype.get_Error = function () {
	return this.error;
};
$asm02.MS.Internal.InternalNetworkStream.StreamAsyncResult.prototype.Complete = function (bytesProcessed, synchronously, error) {
	var obj = null;
	System.Threading.Monitor.Enter((obj = this.objectLock));
	try {
		this.isCompleted = true;
		this.bytesProcessed = bytesProcessed;
		this.completedSynchronously = synchronously;
		this.error = error;
		if (this.waitHandle !== null) {
			this.waitHandle.Set();
		}
	} finally {
		System.Threading.Monitor.Exit(obj);
	}
	if (this.callback !== null) {
		this.callback(this);
	}
};
JSIL.MakeProperty($asm02.MS.Internal.InternalNetworkStream.StreamAsyncResult.prototype, "AsyncState", 
	$asm02.MS.Internal.InternalNetworkStream.StreamAsyncResult.prototype.get_AsyncState, null);
JSIL.MakeProperty($asm02.MS.Internal.InternalNetworkStream.StreamAsyncResult.prototype, "AsyncWaitHandle", 
	$asm02.MS.Internal.InternalNetworkStream.StreamAsyncResult.prototype.get_AsyncWaitHandle, null);
JSIL.MakeProperty($asm02.MS.Internal.InternalNetworkStream.StreamAsyncResult.prototype, "CompletedSynchronously", 
	$asm02.MS.Internal.InternalNetworkStream.StreamAsyncResult.prototype.get_CompletedSynchronously, null);
JSIL.MakeProperty($asm02.MS.Internal.InternalNetworkStream.StreamAsyncResult.prototype, "IsCompleted", 
	$asm02.MS.Internal.InternalNetworkStream.StreamAsyncResult.prototype.get_IsCompleted, null);
JSIL.MakeProperty($asm02.MS.Internal.InternalNetworkStream.StreamAsyncResult.prototype, "BytesProcessed", 
	$asm02.MS.Internal.InternalNetworkStream.StreamAsyncResult.prototype.get_BytesProcessed, null);
JSIL.MakeProperty($asm02.MS.Internal.InternalNetworkStream.StreamAsyncResult.prototype, "Error", 
	$asm02.MS.Internal.InternalNetworkStream.StreamAsyncResult.prototype.get_Error, null);
$asm02.MS.Internal.InternalNetworkStream.StreamAsyncResult.prototype.asyncState = null;
$asm02.MS.Internal.InternalNetworkStream.StreamAsyncResult.prototype.waitHandle = null;
$asm02.MS.Internal.InternalNetworkStream.StreamAsyncResult.prototype.objectLock = null;
$asm02.MS.Internal.InternalNetworkStream.StreamAsyncResult.prototype.completedSynchronously = false;
$asm02.MS.Internal.InternalNetworkStream.StreamAsyncResult.prototype.isCompleted = false;
$asm02.MS.Internal.InternalNetworkStream.StreamAsyncResult.prototype.error = null;
$asm02.MS.Internal.InternalNetworkStream.StreamAsyncResult.prototype.bytesProcessed = 0;
$asm02.MS.Internal.InternalNetworkStream.StreamAsyncResult.prototype.callback = null;

$asm02.MS.Internal.InternalNetworkStream.ReadState.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm02.MS.Internal.InternalNetworkStream.ReadState.prototype.buffer = null;
$asm02.MS.Internal.InternalNetworkStream.ReadState.prototype.offset = 0;
$asm02.MS.Internal.InternalNetworkStream.ReadState.prototype.count = 0;
$asm02.MS.Internal.InternalNetworkStream.ReadState.prototype.result = null;
$asm02.MS.Internal.InternalNetworkStream.ReadState.prototype.sync = false;

$asm02.MS.Internal.InternalStreamWrapper.prototype._ctor = function (pStream, size) {
	System.IO.Stream.prototype._ctor.call(this);
	this._pStream = pStream;
	this._size = size;
	this._closed = false;
	this._lock = new System.Object();
};
$asm02.MS.Internal.InternalStreamWrapper.prototype.Finalize = function () {
	try {
		if (!this._closed) {
			this.CleanUp();
		}
	} finally {
		System.Object.prototype.Finalize.call(this);
	}
};
$asm02.MS.Internal.InternalStreamWrapper.prototype.get_CanRead = function () {
	return !this._closed;
};
$asm02.MS.Internal.InternalStreamWrapper.prototype.get_CanSeek = function () {
	return !this._closed;
};
$asm02.MS.Internal.InternalStreamWrapper.prototype.get_CanWrite = function () {
	return false;
};
$asm02.MS.Internal.InternalStreamWrapper.prototype.get_CanTimeout = function () {
	return false;
};
$asm02.MS.Internal.InternalStreamWrapper.prototype.get_Length = function () {
	return this._size;
};
$asm02.MS.Internal.InternalStreamWrapper.prototype.get_Position = function () {
	return this.GetPosition();
};
$asm02.MS.Internal.InternalStreamWrapper.prototype.set_Position = function (value) {
	if (value > this._size) {
		this.Seek(this._size, System.IO.SeekOrigin.Begin);
		return;
	}
	this.Seek(value, System.IO.SeekOrigin.Begin);
};
$asm02.MS.Internal.InternalStreamWrapper.prototype.Flush = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm02.MS.Internal.InternalStreamWrapper.prototype.Seek = function (offset, origin) {
	var lock = null;
	var result = new JSIL.Variable(0);
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
		$asm02.MS.Internal.XcpImports.SeekInternalStream(this._pStream, offset, origin, /* ref */ result);
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
	return result.value;
};
$asm02.MS.Internal.InternalStreamWrapper.prototype.SetLength = function (value) {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm02.MS.Internal.InternalStreamWrapper.prototype.Read = function (buffer, offset, count) {
	var lock = null;
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
		if (this._closed) {
			throw JSIL.New(System.ObjectDisposedException, "_ctor$1", [this.toString()]);
		}
		if (buffer === null) {
			throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["buffer"]);
		}
		if (!((offset >= 0) && (offset <= buffer.length))) {
			throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["offset"]);
		}
		if (!((count >= 0) && 
				(count <= (buffer.length - offset)) && ((this.Position + count) >= this.Position))) {
			throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["count"]);
		}
		var num = System.Math.Min(count, (this._size - this.Position));
		if (num < 0) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
		}
		if (num === 0) {
			var result = 0;
		} else {
			var zero = new JSIL.Variable(System.IntPtr.Zero);
			var zero2 = new JSIL.Variable(System.IntPtr.Zero);
			var num2 = new JSIL.Variable(0);
			$asm02.MS.Internal.XcpImports.ReadInternalStream(
				this._pStream, 
				num, 
				/* ref */ zero2, 
				/* ref */ zero, 
				/* ref */ num2
			);
			try {
				System.Runtime.InteropServices.Marshal.Copy$13(zero.value, buffer, offset, num2.value);
			} finally {
				$asm02.MS.Internal.XcpImports.ReleaseInternalMemory(zero2.value);
			}
			result = num2.value;
		}
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
	return result;
};
$asm02.MS.Internal.InternalStreamWrapper.prototype.Write = function (buffer, offset, count) {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm02.MS.Internal.InternalStreamWrapper.prototype.Close = function () {
	var lock = null;
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
		if (!this._closed) {
			this.CleanUp();
		}
		System.IO.Stream.prototype.Close.call(this);
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
};
$asm02.MS.Internal.InternalStreamWrapper.prototype.Dispose = function (disposing) {
	var lock = null;
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
		if (!this._closed) {
			this.CleanUp();
		}
		System.IO.Stream.prototype.Dispose$1.call(this, disposing);
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
};
$asm02.MS.Internal.InternalStreamWrapper.prototype.CleanUp = function () {
	try {
		$asm02.MS.Internal.XcpImports.ReleaseInternalStream(this._pStream);
	} finally {
		this._pStream = System.IntPtr.Zero;
		this._closed = true;
	}
};
$asm02.MS.Internal.InternalStreamWrapper.prototype.GetPosition = function () {
	var lock = null;
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
		var num = new JSIL.Variable(0);
		$asm02.MS.Internal.XcpImports.GetStreamPosition(this._pStream, /* ref */ num);
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
	return num.value;
};
$asm02.MS.Internal.InternalStreamWrapper.prototype.get_NativeObject = function () {
	return this._pStream;
};
JSIL.MakeProperty($asm02.MS.Internal.InternalStreamWrapper.prototype, "CanRead", 
	$asm02.MS.Internal.InternalStreamWrapper.prototype.get_CanRead, null);
JSIL.MakeProperty($asm02.MS.Internal.InternalStreamWrapper.prototype, "CanSeek", 
	$asm02.MS.Internal.InternalStreamWrapper.prototype.get_CanSeek, null);
JSIL.MakeProperty($asm02.MS.Internal.InternalStreamWrapper.prototype, "CanWrite", 
	$asm02.MS.Internal.InternalStreamWrapper.prototype.get_CanWrite, null);
JSIL.MakeProperty($asm02.MS.Internal.InternalStreamWrapper.prototype, "CanTimeout", 
	$asm02.MS.Internal.InternalStreamWrapper.prototype.get_CanTimeout, null);
JSIL.MakeProperty($asm02.MS.Internal.InternalStreamWrapper.prototype, "Length", 
	$asm02.MS.Internal.InternalStreamWrapper.prototype.get_Length, null);
JSIL.MakeProperty($asm02.MS.Internal.InternalStreamWrapper.prototype, "Position", 
	$asm02.MS.Internal.InternalStreamWrapper.prototype.get_Position, $asm02.MS.Internal.InternalStreamWrapper.prototype.set_Position);
JSIL.MakeProperty($asm02.MS.Internal.InternalStreamWrapper.prototype, "NativeObject", 
	$asm02.MS.Internal.InternalStreamWrapper.prototype.get_NativeObject, null);
$asm02.MS.Internal.InternalStreamWrapper.prototype._pStream = 0;
$asm02.MS.Internal.InternalStreamWrapper.prototype._size = 0;
$asm02.MS.Internal.InternalStreamWrapper.prototype._closed = false;
$asm02.MS.Internal.InternalStreamWrapper.prototype._lock = null;

System.Collections.ObjectModel.ReadOnlyObservableCollection$b1.prototype._ctor = function (list) {
	System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(this.T).prototype._ctor.call(this, list);
	JSIL.Cast(System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(this.T).prototype.get_Items.call(this), System.Collections.Specialized.INotifyCollectionChanged).INotifyCollectionChanged_add_CollectionChanged(JSIL.Delegate.New("System.Collections.Specialized.NotifyCollectionChangedEventHandler", this, System.Collections.ObjectModel.ReadOnlyObservableCollection$b1.Of(this.T).prototype.HandleCollectionChanged));
	JSIL.Cast(System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(this.T).prototype.get_Items.call(this), System.ComponentModel.INotifyPropertyChanged).INotifyPropertyChanged_add_PropertyChanged(JSIL.Delegate.New("System.ComponentModel.PropertyChangedEventHandler", this, System.Collections.ObjectModel.ReadOnlyObservableCollection$b1.Of(this.T).prototype.HandlePropertyChanged));
};
System.Collections.ObjectModel.ReadOnlyObservableCollection$b1.prototype.INotifyCollectionChanged_add_CollectionChanged = function (value) {
	this.CollectionChanged = System.Delegate.Combine(this.CollectionChanged, value);
};
System.Collections.ObjectModel.ReadOnlyObservableCollection$b1.prototype.INotifyCollectionChanged_remove_CollectionChanged = function (value) {
	this.CollectionChanged = System.Delegate.Remove(this.CollectionChanged, value);
};
System.Collections.ObjectModel.ReadOnlyObservableCollection$b1.prototype.add_CollectionChanged = function (value) {
	this.CollectionChanged = System.Delegate.Combine(this.CollectionChanged, value);
};
System.Collections.ObjectModel.ReadOnlyObservableCollection$b1.prototype.remove_CollectionChanged = function (value) {
	this.CollectionChanged = System.Delegate.Remove(this.CollectionChanged, value);
};
System.Collections.ObjectModel.ReadOnlyObservableCollection$b1.prototype.OnCollectionChanged = function (args) {
	if (this.CollectionChanged !== null) {
		this.CollectionChanged(this, args);
	}
};
System.Collections.ObjectModel.ReadOnlyObservableCollection$b1.prototype.INotifyPropertyChanged_add_PropertyChanged = function (value) {
	this.PropertyChanged = System.Delegate.Combine(this.PropertyChanged, value);
};
System.Collections.ObjectModel.ReadOnlyObservableCollection$b1.prototype.INotifyPropertyChanged_remove_PropertyChanged = function (value) {
	this.PropertyChanged = System.Delegate.Remove(this.PropertyChanged, value);
};
System.Collections.ObjectModel.ReadOnlyObservableCollection$b1.prototype.add_PropertyChanged = function (value) {
	this.PropertyChanged = System.Delegate.Combine(this.PropertyChanged, value);
};
System.Collections.ObjectModel.ReadOnlyObservableCollection$b1.prototype.remove_PropertyChanged = function (value) {
	this.PropertyChanged = System.Delegate.Remove(this.PropertyChanged, value);
};
System.Collections.ObjectModel.ReadOnlyObservableCollection$b1.prototype.OnPropertyChanged = function (args) {
	if (this.PropertyChanged !== null) {
		this.PropertyChanged(this, args);
	}
};
System.Collections.ObjectModel.ReadOnlyObservableCollection$b1.prototype.HandleCollectionChanged = function (sender, e) {
	this.OnCollectionChanged(e);
};
System.Collections.ObjectModel.ReadOnlyObservableCollection$b1.prototype.HandlePropertyChanged = function (sender, e) {
	this.OnPropertyChanged(e);
};
System.Collections.ObjectModel.ReadOnlyObservableCollection$b1.prototype.CollectionChanged = null;
System.Collections.ObjectModel.ReadOnlyObservableCollection$b1.prototype.PropertyChanged = null;

$asm02.MS.Internal.InternalUtils.GetExceptionString = function (ex) {
	return ex.toString();
};
$asm02.MS.Internal.InternalUtils.AreValuesEqual = function (o1, o2) {
	if (o1 === o2) {
		return true;
	}
	if (!((o1 !== null) && o2)) {
		return false;
	}
	if (!(!JSIL.GetType(o1).IsValueType && ((JSIL.GetType(o1)) !== System.String))) {
		return System.Object.Equals(o1, o2);
	}
	return System.Object.ReferenceEquals(o1, o2);
};

$asm02.MS.Internal.InternalWebRequest.prototype._ctor$0 = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 197);
};
$asm02.MS.Internal.InternalWebRequest.prototype._ctor$1 = function (nKnownTypeIndex) {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, nKnownTypeIndex);
};
$asm02.MS.Internal.InternalWebRequest.prototype.add_DownloadProgressChanged = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(24600, null), value);
};
$asm02.MS.Internal.InternalWebRequest.prototype.remove_DownloadProgressChanged = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(24600, null), value);
};
$asm02.MS.Internal.InternalWebRequest.prototype.add_WaitingForUploadData = function (value) {
	System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(24603, null), value);
};
$asm02.MS.Internal.InternalWebRequest.prototype.remove_WaitingForUploadData = function (value) {
	System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(24603, null), value);
};
$asm02.MS.Internal.InternalWebRequest.prototype.add_Completed = function (value) {
	if (this._completed === null) {
		System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(24601, null), JSIL.Delegate.New("System.EventHandler", this, $asm02.MS.Internal.InternalWebRequest.prototype.OnCompleted));
	}
	this._completed = System.Delegate.Combine(this._completed, value);
};
$asm02.MS.Internal.InternalWebRequest.prototype.remove_Completed = function (value) {
	this._completed = System.Delegate.Remove(this._completed, value);
	if (this._completed === null) {
		System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(24601, null), JSIL.Delegate.New("System.EventHandler", this, $asm02.MS.Internal.InternalWebRequest.prototype.OnCompleted));
	}
};
$asm02.MS.Internal.InternalWebRequest.prototype.OnCompleted = function (sender, args) {
	if (this._completed !== null) {
		this._completed(sender, args);
	}
	if (this._pegged) {
		System.Windows.DependencyObject.prototype.UnpegManagedPeerNoRef.call(this);
		this._pegged = false;
	}
};
$asm02.MS.Internal.InternalWebRequest.prototype.add_DownloadFailed = function (value) {
	if (this._downloadFailed === null) {
		System.Windows.DependencyObject.prototype.AddEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(24602, null), JSIL.Delegate.New("MS.Internal.ErrorEventHandler", this, $asm02.MS.Internal.InternalWebRequest.prototype.OnDownloadFailed));
	}
	this._downloadFailed = System.Delegate.Combine(this._downloadFailed, value);
};
$asm02.MS.Internal.InternalWebRequest.prototype.remove_DownloadFailed = function (value) {
	this._downloadFailed = System.Delegate.Remove(this._downloadFailed, value);
	if (this._downloadFailed === null) {
		System.Windows.DependencyObject.prototype.RemoveEventListener.call(this, System.Windows.DependencyProperty.RegisterCoreProperty(24602, null), JSIL.Delegate.New("MS.Internal.ErrorEventHandler", this, $asm02.MS.Internal.InternalWebRequest.prototype.OnDownloadFailed));
	}
};
$asm02.MS.Internal.InternalWebRequest.prototype.OnDownloadFailed = function (sender, args) {
	if (this._downloadFailed !== null) {
		this._downloadFailed(sender, args);
	}
	if (this._pegged) {
		System.Windows.DependencyObject.prototype.UnpegManagedPeerNoRef.call(this);
		this._pegged = false;
	}
};
$asm02.MS.Internal.InternalWebRequest.prototype.set_Uri = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, $asm02.MS.Internal.InternalWebRequest.UriProperty, value ? value.OriginalString : null);
};
$asm02.MS.Internal.InternalWebRequest.prototype.get_FinalUri = function () {
	var value = System.Windows.DependencyObject.prototype.GetValue.call(this, $asm02.MS.Internal.InternalWebRequest.FinalUriProperty);
	if (value === null) {
		return null;
	}
	return JSIL.New(System.Uri, "_ctor$1", [JSIL.Cast(value, System.String), System.UriKind.RelativeOrAbsolute]);
};
$asm02.MS.Internal.InternalWebRequest.prototype.get_Mime = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, $asm02.MS.Internal.InternalWebRequest.MimeProperty), System.String);
};
$asm02.MS.Internal.InternalWebRequest.prototype.set_Headers = function (value) {
	$asm02.MS.Internal.XcpImports.WebRequest_SetHeaders(this, value);
};
$asm02.MS.Internal.InternalWebRequest.prototype.get_ResponseHeaders = function () {
	return $asm02.MS.Internal.XcpImports.WebRequest_GetResponseHeaders(this);
};
$asm02.MS.Internal.InternalWebRequest.prototype.get_SecurityException = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, $asm02.MS.Internal.InternalWebRequest.SecurityExceptionProperty), System.Boolean);
};
$asm02.MS.Internal.InternalWebRequest.prototype.set_OperatingSystemStack = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, $asm02.MS.Internal.InternalWebRequest.OSStackProperty, value);
};
$asm02.MS.Internal.InternalWebRequest.prototype.set_AllowWriteStreamBuffering = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, $asm02.MS.Internal.InternalWebRequest.AllowWriteStreamBufferingProperty, value);
};
$asm02.MS.Internal.InternalWebRequest.prototype.get_AllowWriteStreamBuffering = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, $asm02.MS.Internal.InternalWebRequest.AllowWriteStreamBufferingProperty), System.Boolean);
};
$asm02.MS.Internal.InternalWebRequest.prototype.set_AllowReadStreamBuffering = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, $asm02.MS.Internal.InternalWebRequest.AllowReadStreamBufferingProperty, value);
};
$asm02.MS.Internal.InternalWebRequest.prototype.set_UseDefaultCredentials = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, $asm02.MS.Internal.InternalWebRequest.UseDefaultCredentialsProperty, value);
};
$asm02.MS.Internal.InternalWebRequest.prototype.set_Credentials = function (value) {
	this._credentials = value;
};
$asm02.MS.Internal.InternalWebRequest.prototype.set_RequirePolicyCheck = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, $asm02.MS.Internal.InternalWebRequest.RequirePolicyCheckProperty, value);
};
$asm02.MS.Internal.InternalWebRequest.prototype.Open = function (verb, URI) {
	$asm02.MS.Internal.XcpImports.WebRequest_Open(this, verb, URI);
	this._requestUri = URI;
};
$asm02.MS.Internal.InternalWebRequest.prototype.Send = function () {
	try {
		if (this._credentials !== null) {
			var credential = this._credentials.ICredentials_GetCredential(this._requestUri, "");
			System.Windows.DependencyObject.prototype.SetValue.call(this, $asm02.MS.Internal.InternalWebRequest.UsernameProperty, credential.UserName);
			System.Windows.DependencyObject.prototype.SetValue.call(this, $asm02.MS.Internal.InternalWebRequest.PasswordProperty, credential.Password);
			System.Windows.DependencyObject.prototype.SetValue.call(this, $asm02.MS.Internal.InternalWebRequest.AuthDomainProperty, credential.Domain);
		}
		if (!this.AllowWriteStreamBuffering) {
			this.add_WaitingForUploadData(JSIL.Delegate.New("System.EventHandler", this, $asm02.MS.Internal.InternalWebRequest.prototype.WaitingForUploadDataHandler));
			this.add_DownloadFailed(JSIL.Delegate.New("MS.Internal.ErrorEventHandler", this, $asm02.MS.Internal.InternalWebRequest.prototype.WaitingForUploadDataHandler));
		}
		$asm02.MS.Internal.XcpImports.WebRequest_Send(this);
		System.Windows.DependencyObject.prototype.PegManagedPeerNoRef.call(this);
		this._pegged = true;
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.UnauthorizedAccessException)) {
			throw JSIL.New(System.Security.SecurityException, "_ctor$0", []);
		} else if (JSIL.CheckType($exception, System.Runtime.InteropServices.COMException)) {
			throw JSIL.New(System.Security.SecurityException, "_ctor$0", []);
		} else {
			throw $exception;
		}
	}
};
$asm02.MS.Internal.InternalWebRequest.prototype.Abort = function () {
	$asm02.MS.Internal.XcpImports.WebRequest_Abort(this);
	if (this._pegged) {
		System.Windows.DependencyObject.prototype.UnpegManagedPeerNoRef.call(this);
		this._pegged = false;
	}
};
$asm02.MS.Internal.InternalWebRequest.prototype.WriteRequestStream = function (buffer, offset, length) {
	var $l$gc__DisplayClass = new $asm02.MS.Internal.InternalWebRequest.$l$gc__DisplayClass1();
	$l$gc__DisplayClass.buffer = buffer;
	$l$gc__DisplayClass.offset = offset;
	$l$gc__DisplayClass.length = length;
	$l$gc__DisplayClass.$this = this;
	if ($asm02.MS.Internal.XcpImports.OnMainThread()) {
		throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
	}
	if (this._progressiveUploadEvent === null) {
		this._progressiveUploadEvent = new System.Threading.AutoResetEvent(false);
	}
	System.Windows.DependencyObject.prototype.get_Dispatcher.call(this).BeginInvoke$0(function () {
			$l$gc__DisplayClass.$this.WriteRequestStreamImplementation($l$gc__DisplayClass.buffer, $l$gc__DisplayClass.offset, $l$gc__DisplayClass.length);
		});
	this._progressiveUploadEvent.WaitOne$2();
};
$asm02.MS.Internal.InternalWebRequest.prototype.WaitingForUploadDataHandler = function (sender, e) {
	if (this._progressiveUploadEvent !== null) {
		this._progressiveUploadEvent.Set();
	}
};
$asm02.MS.Internal.InternalWebRequest.prototype.WriteRequestStreamImplementation = function (buffer, offset, length) {
	if (!this.AllowWriteStreamBuffering) {
		$asm02.MS.Internal.XcpImports.WebRequest_AddUploadDataChunk(this, buffer, offset, length);
	}
};
$asm02.MS.Internal.InternalWebRequest.prototype.CloseRequestStream = function () {
	try {
		$asm02.MS.Internal.XcpImports.WebRequest_EndUploadData(this);
	} finally {
		this.remove_WaitingForUploadData(JSIL.Delegate.New("System.EventHandler", this, $asm02.MS.Internal.InternalWebRequest.prototype.WaitingForUploadDataHandler));
		this.remove_DownloadFailed(JSIL.Delegate.New("MS.Internal.ErrorEventHandler", this, $asm02.MS.Internal.InternalWebRequest.prototype.WaitingForUploadDataHandler));
	}
};
$asm02.MS.Internal.InternalWebRequest.prototype.GetResponseStream = function () {
	return $asm02.MS.Internal.XcpImports.WebRequest_GetDownloaderBytes(this, this.FinalUri);
};
$asm02.MS.Internal.InternalWebRequest.prototype.GetStreamWrapper = function () {
	return $asm02.MS.Internal.XcpImports.WebRequest_GetStreamWrapper(this, this.GetSize());
};
$asm02.MS.Internal.InternalWebRequest.prototype.GetNetworkStream = function () {
	return $asm02.MS.Internal.XcpImports.WebRequest_GetNetworkStream(this);
};
$asm02.MS.Internal.InternalWebRequest.prototype.GetSize = function () {
	return $asm02.MS.Internal.XcpImports.WebRequest_GetSize(this);
};
$asm02.MS.Internal.InternalWebRequest.prototype.GetTotalSize = function () {
	return $asm02.MS.Internal.XcpImports.WebRequest_GetTotalSize(this);
};
$asm02.MS.Internal.InternalWebRequest.prototype.GetShouldEnableMemoryAsIPALStream = function () {
	return $asm02.MS.Internal.XcpImports.WebRequest_GetShouldEnableMemoryAsIPALStream(this);
};
$asm02.MS.Internal.InternalWebRequest.prototype.SetStream = function (stream) {
	stream.Position = 0;
	var num = 0;
	var num2 = 0;
	var num3 = 0;
	var num4 = 0;
	var flag = false;
	try {
		if (!((stream !== null) && (stream.Length !== 0))) {
			return;
		}
		if (stream.Length > 2147483647) {
			throw JSIL.New(System.OverflowException, "_ctor$0", []);
		}
		num = stream.Length;
		flag = true;
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.NotSupportedException)) {
			num = 10240;
		} else {
			throw $exception;
		}
	}
	var array = JSIL.Array.New(System.Byte, num);
	num2 = stream.Read(array, num4, num);
	num3 += num2;
	if (!flag) {
	__loop0__: 
		while (num2 === num) {
			array = this.GrowArray(array);
			num4 += num2;
			num2 = stream.Read(array, num4, num);
			num3 += num2;
		}
	}
	$asm02.MS.Internal.XcpImports.WebRequest_SetBuffer(this, array, num3);
};
$asm02.MS.Internal.InternalWebRequest.prototype.GrowArray = function (arr) {
	var array = JSIL.Array.New(System.Byte, (arr.length * 2));
	arr.CopyTo(array, 0);
	return array;
};
JSIL.OverloadedMethod($asm02.MS.Internal.InternalWebRequest.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);
JSIL.MakeProperty($asm02.MS.Internal.InternalWebRequest.prototype, "Uri", 
	null, $asm02.MS.Internal.InternalWebRequest.prototype.set_Uri);
JSIL.MakeProperty($asm02.MS.Internal.InternalWebRequest.prototype, "FinalUri", 
	$asm02.MS.Internal.InternalWebRequest.prototype.get_FinalUri, null);
JSIL.MakeProperty($asm02.MS.Internal.InternalWebRequest.prototype, "Mime", 
	$asm02.MS.Internal.InternalWebRequest.prototype.get_Mime, null);
JSIL.MakeProperty($asm02.MS.Internal.InternalWebRequest.prototype, "Headers", 
	null, $asm02.MS.Internal.InternalWebRequest.prototype.set_Headers);
JSIL.MakeProperty($asm02.MS.Internal.InternalWebRequest.prototype, "ResponseHeaders", 
	$asm02.MS.Internal.InternalWebRequest.prototype.get_ResponseHeaders, null);
JSIL.MakeProperty($asm02.MS.Internal.InternalWebRequest.prototype, "SecurityException", 
	$asm02.MS.Internal.InternalWebRequest.prototype.get_SecurityException, null);
JSIL.MakeProperty($asm02.MS.Internal.InternalWebRequest.prototype, "OperatingSystemStack", 
	null, $asm02.MS.Internal.InternalWebRequest.prototype.set_OperatingSystemStack);
JSIL.MakeProperty($asm02.MS.Internal.InternalWebRequest.prototype, "AllowWriteStreamBuffering", 
	$asm02.MS.Internal.InternalWebRequest.prototype.get_AllowWriteStreamBuffering, $asm02.MS.Internal.InternalWebRequest.prototype.set_AllowWriteStreamBuffering);
JSIL.MakeProperty($asm02.MS.Internal.InternalWebRequest.prototype, "AllowReadStreamBuffering", 
	null, $asm02.MS.Internal.InternalWebRequest.prototype.set_AllowReadStreamBuffering);
JSIL.MakeProperty($asm02.MS.Internal.InternalWebRequest.prototype, "UseDefaultCredentials", 
	null, $asm02.MS.Internal.InternalWebRequest.prototype.set_UseDefaultCredentials);
JSIL.MakeProperty($asm02.MS.Internal.InternalWebRequest.prototype, "Credentials", 
	null, $asm02.MS.Internal.InternalWebRequest.prototype.set_Credentials);
JSIL.MakeProperty($asm02.MS.Internal.InternalWebRequest.prototype, "RequirePolicyCheck", 
	null, $asm02.MS.Internal.InternalWebRequest.prototype.set_RequirePolicyCheck);
$asm02.MS.Internal.InternalWebRequest.UriProperty = null;
$asm02.MS.Internal.InternalWebRequest.MimeProperty = null;
$asm02.MS.Internal.InternalWebRequest.FinalUriProperty = null;
$asm02.MS.Internal.InternalWebRequest.SecurityExceptionProperty = null;
$asm02.MS.Internal.InternalWebRequest.OSStackProperty = null;
$asm02.MS.Internal.InternalWebRequest.AllowReadStreamBufferingProperty = null;
$asm02.MS.Internal.InternalWebRequest.UseDefaultCredentialsProperty = null;
$asm02.MS.Internal.InternalWebRequest.UsernameProperty = null;
$asm02.MS.Internal.InternalWebRequest.PasswordProperty = null;
$asm02.MS.Internal.InternalWebRequest.AuthDomainProperty = null;
$asm02.MS.Internal.InternalWebRequest.AllowWriteStreamBufferingProperty = null;
$asm02.MS.Internal.InternalWebRequest.RequirePolicyCheckProperty = null;
$asm02.MS.Internal.InternalWebRequest.prototype._completed = null;
$asm02.MS.Internal.InternalWebRequest.prototype._downloadFailed = null;
$asm02.MS.Internal.InternalWebRequest.prototype._credentials = null;
$asm02.MS.Internal.InternalWebRequest.prototype._requestUri = null;
$asm02.MS.Internal.InternalWebRequest.prototype._progressiveUploadEvent = null;
$asm02.MS.Internal.InternalWebRequest.prototype._pegged = false;
$asm02.MS.Internal.InternalWebRequest._cctor = function () {
	$asm02.MS.Internal.InternalWebRequest.UriProperty = System.Windows.DependencyProperty.RegisterCoreProperty(18410, System.String);
	$asm02.MS.Internal.InternalWebRequest.MimeProperty = System.Windows.DependencyProperty.RegisterCoreProperty(18411, System.String);
	$asm02.MS.Internal.InternalWebRequest.FinalUriProperty = System.Windows.DependencyProperty.RegisterCoreProperty(18413, System.String);
	$asm02.MS.Internal.InternalWebRequest.SecurityExceptionProperty = System.Windows.DependencyProperty.RegisterCoreProperty(18414, System.Boolean);
	$asm02.MS.Internal.InternalWebRequest.OSStackProperty = System.Windows.DependencyProperty.RegisterCoreProperty(18416, System.Boolean);
	$asm02.MS.Internal.InternalWebRequest.AllowReadStreamBufferingProperty = System.Windows.DependencyProperty.RegisterCoreProperty(18417, System.Boolean);
	$asm02.MS.Internal.InternalWebRequest.UseDefaultCredentialsProperty = System.Windows.DependencyProperty.RegisterCoreProperty(18418, System.Boolean);
	$asm02.MS.Internal.InternalWebRequest.UsernameProperty = System.Windows.DependencyProperty.RegisterCoreProperty(18419, System.String);
	$asm02.MS.Internal.InternalWebRequest.PasswordProperty = System.Windows.DependencyProperty.RegisterCoreProperty(18420, System.String);
	$asm02.MS.Internal.InternalWebRequest.AuthDomainProperty = System.Windows.DependencyProperty.RegisterCoreProperty(18421, System.String);
	$asm02.MS.Internal.InternalWebRequest.AllowWriteStreamBufferingProperty = System.Windows.DependencyProperty.RegisterCoreProperty(18422, System.Boolean);
	$asm02.MS.Internal.InternalWebRequest.RequirePolicyCheckProperty = System.Windows.DependencyProperty.RegisterCoreProperty(18423, System.Boolean);
};

$asm02.MS.Internal.InternalWebRequest.$l$gc__DisplayClass1.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm02.MS.Internal.InternalWebRequest.$l$gc__DisplayClass1.prototype.$this = null;
$asm02.MS.Internal.InternalWebRequest.$l$gc__DisplayClass1.prototype.buffer = null;
$asm02.MS.Internal.InternalWebRequest.$l$gc__DisplayClass1.prototype.offset = 0;
$asm02.MS.Internal.InternalWebRequest.$l$gc__DisplayClass1.prototype.length = 0;

System.Windows.Interop.Settings.prototype.get_Windowless = function () {
	return $asm02.MS.Internal.XcpImports.Host_GetIsWindowless();
};
System.Windows.Interop.Settings.prototype.get_EnableHTMLAccess = function () {
	return $asm02.MS.Internal.XcpImports.Host_GetEnableHTMLAccess();
};
System.Windows.Interop.Settings.prototype.get_MaxFrameRate = function () {
	return $asm02.MS.Internal.XcpImports.Host_GetMaxFrameRate();
};
System.Windows.Interop.Settings.prototype.set_MaxFrameRate = function (value) {
	$asm02.MS.Internal.XcpImports.Host_SetMaxFrameRate(value);
};
System.Windows.Interop.Settings.prototype.get_EnableFrameRateCounter = function () {
	return $asm02.MS.Internal.XcpImports.Host_GetEnableFrameRateCounter();
};
System.Windows.Interop.Settings.prototype.set_EnableFrameRateCounter = function (value) {
	$asm02.MS.Internal.XcpImports.Host_SetEnableFrameRateCounter(value);
};
System.Windows.Interop.Settings.prototype.get_EnableCacheVisualization = function () {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var num = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Host_GetEnableCacheVisualizationNative($asm02.MS.Internal.JoltHelper.Context, /* ref */ num));
	return (num.value === 1);
};
System.Windows.Interop.Settings.prototype.set_EnableCacheVisualization = function (value) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var iValue = value ? 1 : 0;
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Host_SetEnableCacheVisualizationNative($asm02.MS.Internal.JoltHelper.Context, iValue));
};
System.Windows.Interop.Settings.prototype.get_EnableRedrawRegions = function () {
	return $asm02.MS.Internal.XcpImports.Host_GetEnableRedrawRegions();
};
System.Windows.Interop.Settings.prototype.set_EnableRedrawRegions = function (value) {
	$asm02.MS.Internal.XcpImports.Host_SetEnableRedrawRegions(value);
};
System.Windows.Interop.Settings.prototype.get_EnableGPUAcceleration = function () {
	return $asm02.MS.Internal.XcpImports.Host_GetEnableGPUAcceleration();
};
System.Windows.Interop.Settings.prototype.get_EnableAutoZoom = function () {
	return $asm02.MS.Internal.XcpImports.Host_GetAutoZoom();
};
System.Windows.Interop.Settings.prototype.set_EnableAutoZoom = function (value) {
	$asm02.MS.Internal.XcpImports.Host_SetAutoZoom(value);
};
System.Windows.Interop.Settings.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
JSIL.MakeProperty(System.Windows.Interop.Settings.prototype, "Windowless", 
	System.Windows.Interop.Settings.prototype.get_Windowless, null);
JSIL.MakeProperty(System.Windows.Interop.Settings.prototype, "EnableHTMLAccess", 
	System.Windows.Interop.Settings.prototype.get_EnableHTMLAccess, null);
JSIL.MakeProperty(System.Windows.Interop.Settings.prototype, "MaxFrameRate", 
	System.Windows.Interop.Settings.prototype.get_MaxFrameRate, System.Windows.Interop.Settings.prototype.set_MaxFrameRate);
JSIL.MakeProperty(System.Windows.Interop.Settings.prototype, "EnableFrameRateCounter", 
	System.Windows.Interop.Settings.prototype.get_EnableFrameRateCounter, System.Windows.Interop.Settings.prototype.set_EnableFrameRateCounter);
JSIL.MakeProperty(System.Windows.Interop.Settings.prototype, "EnableCacheVisualization", 
	System.Windows.Interop.Settings.prototype.get_EnableCacheVisualization, System.Windows.Interop.Settings.prototype.set_EnableCacheVisualization);
JSIL.MakeProperty(System.Windows.Interop.Settings.prototype, "EnableRedrawRegions", 
	System.Windows.Interop.Settings.prototype.get_EnableRedrawRegions, System.Windows.Interop.Settings.prototype.set_EnableRedrawRegions);
JSIL.MakeProperty(System.Windows.Interop.Settings.prototype, "EnableGPUAcceleration", 
	System.Windows.Interop.Settings.prototype.get_EnableGPUAcceleration, null);
JSIL.MakeProperty(System.Windows.Interop.Settings.prototype, "EnableAutoZoom", 
	System.Windows.Interop.Settings.prototype.get_EnableAutoZoom, System.Windows.Interop.Settings.prototype.set_EnableAutoZoom);

System.Windows.Interop.Content.prototype.get_ActualWidth = function () {
	return $asm02.MS.Internal.XcpImports.Host_GetActualWidth();
};
System.Windows.Interop.Content.prototype.get_ActualHeight = function () {
	return $asm02.MS.Internal.XcpImports.Host_GetActualHeight();
};
System.Windows.Interop.Content.prototype.get_ZoomFactor = function () {
	return $asm02.MS.Internal.XcpImports.Host_GetZoomFactor();
};
System.Windows.Interop.Content.prototype.get_IsFullScreen = function () {
	return $asm02.MS.Internal.XcpImports.Host_GetIsFullScreen();
};
System.Windows.Interop.Content.prototype.set_IsFullScreen = function (value) {
	$asm02.MS.Internal.XcpImports.Host_SetIsFullScreen(value);
};
System.Windows.Interop.Content.prototype.get_FullScreenOptions = function () {
	return $asm02.MS.Internal.XcpImports.Host_GetFullScreenOptions();
};
System.Windows.Interop.Content.prototype.set_FullScreenOptions = function (value) {
	$asm02.MS.Internal.XcpImports.Host_SetFullScreenOptions(value);
};
System.Windows.Interop.Content.prototype.FireFullScreenChanged = function (sender, args) {
	if (this.FullScreenChanged !== null) {
		this.FullScreenChanged(sender, args);
	}
};
System.Windows.Interop.Content.prototype.FireResized = function (sender, args) {
	if (this._Resized !== null) {
		this._Resized(sender, args);
	}
};
System.Windows.Interop.Content.prototype.FireZoomed = function (sender, args) {
	if (this._Zoomed !== null) {
		this._Zoomed(sender, args);
	}
};
System.Windows.Interop.Content.prototype.add_FullScreenChanged = function (value) {
	this.FullScreenChanged = System.Delegate.Combine(this.FullScreenChanged, value);
};
System.Windows.Interop.Content.prototype.remove_FullScreenChanged = function (value) {
	this.FullScreenChanged = System.Delegate.Remove(this.FullScreenChanged, value);
};
System.Windows.Interop.Content.prototype.add_Resized = function (value) {
	this._Resized = System.Delegate.Combine(this._Resized, value);
	$asm02.MS.Internal.XcpImports.Host_AddedManagedZoomedListener();
};
System.Windows.Interop.Content.prototype.remove_Resized = function (value) {
	this._Resized = System.Delegate.Remove(this._Resized, value);
	$asm02.MS.Internal.XcpImports.Host_RemovedManagedZoomedListener();
};
System.Windows.Interop.Content.prototype.add_Zoomed = function (value) {
	this._Zoomed = System.Delegate.Combine(this._Zoomed, value);
	$asm02.MS.Internal.XcpImports.Host_AddedManagedZoomedListener();
};
System.Windows.Interop.Content.prototype.remove_Zoomed = function (value) {
	this._Zoomed = System.Delegate.Remove(this._Zoomed, value);
	$asm02.MS.Internal.XcpImports.Host_RemovedManagedZoomedListener();
};
System.Windows.Interop.Content.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
JSIL.MakeProperty(System.Windows.Interop.Content.prototype, "ActualWidth", 
	System.Windows.Interop.Content.prototype.get_ActualWidth, null);
JSIL.MakeProperty(System.Windows.Interop.Content.prototype, "ActualHeight", 
	System.Windows.Interop.Content.prototype.get_ActualHeight, null);
JSIL.MakeProperty(System.Windows.Interop.Content.prototype, "ZoomFactor", 
	System.Windows.Interop.Content.prototype.get_ZoomFactor, null);
JSIL.MakeProperty(System.Windows.Interop.Content.prototype, "IsFullScreen", 
	System.Windows.Interop.Content.prototype.get_IsFullScreen, System.Windows.Interop.Content.prototype.set_IsFullScreen);
JSIL.MakeProperty(System.Windows.Interop.Content.prototype, "FullScreenOptions", 
	System.Windows.Interop.Content.prototype.get_FullScreenOptions, System.Windows.Interop.Content.prototype.set_FullScreenOptions);
System.Windows.Interop.Content.prototype.FullScreenChanged = null;
System.Windows.Interop.Content.prototype._Zoomed = null;
System.Windows.Interop.Content.prototype._Resized = null;

System.Windows.Interop.SilverlightHost.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
	this._settings = null;
	this._content = null;
};
System.Windows.Interop.SilverlightHost.prototype.get_Source = function () {
	$asm02.MS.Internal.XcpImports.CheckThread();
	return $asm02.System.Windows.Hosting.NativeHost.Current.Source;
};
System.Windows.Interop.SilverlightHost.prototype.get_IsLoaded = function () {
	return $asm02.MS.Internal.XcpImports.Host_GetIsLoaded();
};
System.Windows.Interop.SilverlightHost.prototype.get_Background = function () {
	return $asm02.MS.Internal.XcpImports.Host_GetBackground();
};
System.Windows.Interop.SilverlightHost.prototype.IsVersionSupported = function (versionStr) {
	return $asm02.MS.Internal.XcpImports.Host_IsVersionSupported(versionStr);
};
System.Windows.Interop.SilverlightHost.prototype.get_Settings = function () {
	if (this._settings === null) {
		this._settings = new System.Windows.Interop.Settings();
	}
	return this._settings;
};
System.Windows.Interop.SilverlightHost.prototype.get_Content = function () {
	if (this._content === null) {
		this._content = new System.Windows.Interop.Content();
	}
	return this._content;
};
System.Windows.Interop.SilverlightHost.prototype.get_InitParams = function () {
	if (this._initParams === null) {
		this._initParams = System.Windows.Application.ParseInitParams();
	}
	return this._initParams;
};
System.Windows.Interop.SilverlightHost.prototype.set_NavigationState = function (value) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	if (value === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["value"]);
	}
	this._oldNavigationState = $asm02.MS.Internal.XcpImports.Host_GetNavigationState();
	if (this._oldNavigationState != value) {
		$asm02.MS.Internal.XcpImports.Host_SetNavigationState(value);
		this.RaiseNavigationStateChanged(this._oldNavigationState, value);
		this._oldNavigationState = value;
	}
};
System.Windows.Interop.SilverlightHost.prototype.get_NavigationState = function () {
	$asm02.MS.Internal.XcpImports.CheckThread();
	return $asm02.MS.Internal.XcpImports.Host_GetNavigationState();
};
System.Windows.Interop.SilverlightHost.prototype.add__NavigationStateChanged = function (value) {
	this._NavigationStateChanged = System.Delegate.Combine(this._NavigationStateChanged, value);
};
System.Windows.Interop.SilverlightHost.prototype.remove__NavigationStateChanged = function (value) {
	this._NavigationStateChanged = System.Delegate.Remove(this._NavigationStateChanged, value);
};
System.Windows.Interop.SilverlightHost.prototype.add_NavigationStateChanged = function (value) {
	this.OnNavigationStateChangedEventHandlerAdded();
	this._NavigationStateChanged = System.Delegate.Combine(this._NavigationStateChanged, value);
};
System.Windows.Interop.SilverlightHost.prototype.remove_NavigationStateChanged = function (value) {
	this._NavigationStateChanged = System.Delegate.Remove(this._NavigationStateChanged, value);
	this.OnNavigationStateChangedEventHandlerRemoved();
};
System.Windows.Interop.SilverlightHost.prototype.FireFullScreenChanged = function (sender, args) {
	if (this._content === null) {
		this._content = new System.Windows.Interop.Content();
	}
	this._content.FireFullScreenChanged(sender, args);
};
System.Windows.Interop.SilverlightHost.prototype.FireResized = function (sender, args) {
	if (this._content === null) {
		this._content = new System.Windows.Interop.Content();
	}
	this._content.FireResized(sender, args);
};
System.Windows.Interop.SilverlightHost.prototype.FireZoomed = function (sender, args) {
	if (this._content === null) {
		this._content = new System.Windows.Interop.Content();
	}
	this._content.FireZoomed(sender, args);
};
System.Windows.Interop.SilverlightHost.prototype.IsBrowserHosted = function () {
	return (!(($asm02.System.Windows.Hosting.NativeHost.Current.BrowserService === null) || 
			$asm02.System.Windows.Hosting.NativeHost.Current.BrowserService.IBrowserService_InCustomHost()) && !System.Windows.Application.Current.IsRunningOutOfBrowser);
};
System.Windows.Interop.SilverlightHost.prototype.OnNavigationStateChangedEventHandlerAdded = function () {
	if (!this.IsBrowserHosted()) {
		return;
	}
	if (this._NavigationStateChanged === null) {
		this._oldNavigationState = $asm02.MS.Internal.XcpImports.Host_GetNavigationState();
		this._navigationStatePollingTimer = JSIL.New(System.Windows.Threading.DispatcherTimer, "_ctor$0", []);
		(this._navigationStatePollingTimer.Interval = System.TimeSpan.FromMilliseconds(200).MemberwiseClone());
		this._navigationStatePollingTimer.add_Tick(JSIL.Delegate.New("System.EventHandler", this, System.Windows.Interop.SilverlightHost.prototype.OnNavigationStatePollingTick));
		this._navigationStatePollingTimer.Start();
	}
};
System.Windows.Interop.SilverlightHost.prototype.OnNavigationStateChangedEventHandlerRemoved = function () {
	if (!(this._NavigationStateChanged || (this._navigationStatePollingTimer === null))) {
		this._navigationStatePollingTimer.Stop();
		this._navigationStatePollingTimer = null;
	}
};
System.Windows.Interop.SilverlightHost.prototype.RaiseNavigationStateChanged = function (oldState, newState) {
	if (this._NavigationStateChanged !== null) {
		this._NavigationStateChanged(this, new System.Windows.Interop.NavigationStateChangedEventArgs(oldState, newState));
	}
};
System.Windows.Interop.SilverlightHost.prototype.OnNavigationStatePollingTick = function (sender, e) {
	var text = new JSIL.Variable(null);
	var flag = $asm02.MS.Internal.XcpImports.Host_HasNavigationStateChanged(/* ref */ text);
	if (flag) {
		this.RaiseNavigationStateChanged(this._oldNavigationState, text.value);
		this._oldNavigationState = text.value;
	}
};
System.Windows.Interop.SilverlightHost.prototype.OnApplicationExiting = function () {
	if (this._navigationStatePollingTimer !== null) {
		this._navigationStatePollingTimer.Stop();
	}
};
JSIL.MakeProperty(System.Windows.Interop.SilverlightHost.prototype, "Source", 
	System.Windows.Interop.SilverlightHost.prototype.get_Source, null);
JSIL.MakeProperty(System.Windows.Interop.SilverlightHost.prototype, "IsLoaded", 
	System.Windows.Interop.SilverlightHost.prototype.get_IsLoaded, null);
JSIL.MakeProperty(System.Windows.Interop.SilverlightHost.prototype, "Background", 
	System.Windows.Interop.SilverlightHost.prototype.get_Background, null);
JSIL.MakeProperty(System.Windows.Interop.SilverlightHost.prototype, "Settings", 
	System.Windows.Interop.SilverlightHost.prototype.get_Settings, null);
JSIL.MakeProperty(System.Windows.Interop.SilverlightHost.prototype, "Content", 
	System.Windows.Interop.SilverlightHost.prototype.get_Content, null);
JSIL.MakeProperty(System.Windows.Interop.SilverlightHost.prototype, "InitParams", 
	System.Windows.Interop.SilverlightHost.prototype.get_InitParams, null);
JSIL.MakeProperty(System.Windows.Interop.SilverlightHost.prototype, "NavigationState", 
	System.Windows.Interop.SilverlightHost.prototype.get_NavigationState, System.Windows.Interop.SilverlightHost.prototype.set_NavigationState);
System.Windows.Interop.SilverlightHost.prototype._NavigationStateChanged = null;
System.Windows.Interop.SilverlightHost.prototype._settings = null;
System.Windows.Interop.SilverlightHost.prototype._content = null;
System.Windows.Interop.SilverlightHost.prototype._initParams = null;
System.Windows.Interop.SilverlightHost.prototype._navigationStatePollingTimer = null;
System.Windows.Interop.SilverlightHost.prototype._oldNavigationState = null;

System.Windows.Interop.NavigationStateChangedEventArgs.prototype._ctor = function (previousNavigationState, newNavigationState) {
	System.EventArgs.prototype._ctor.call(this);
	this._previousNavigationState = previousNavigationState;
	this._newNavigationState = newNavigationState;
};
System.Windows.Interop.NavigationStateChangedEventArgs.prototype.get_NewNavigationState = function () {
	return this._newNavigationState;
};
System.Windows.Interop.NavigationStateChangedEventArgs.prototype.get_PreviousNavigationState = function () {
	return this._previousNavigationState;
};
JSIL.MakeProperty(System.Windows.Interop.NavigationStateChangedEventArgs.prototype, "NewNavigationState", 
	System.Windows.Interop.NavigationStateChangedEventArgs.prototype.get_NewNavigationState, null);
JSIL.MakeProperty(System.Windows.Interop.NavigationStateChangedEventArgs.prototype, "PreviousNavigationState", 
	System.Windows.Interop.NavigationStateChangedEventArgs.prototype.get_PreviousNavigationState, null);
System.Windows.Interop.NavigationStateChangedEventArgs.prototype._previousNavigationState = null;
System.Windows.Interop.NavigationStateChangedEventArgs.prototype._newNavigationState = null;

System.Windows.Media.Animation.KeyTime.Create = function (o) {
	if (o === null) {
		return System.Windows.Media.Animation.KeyTime.Uniform;
	}
	var timeSpan = System.TimeSpan.FromSeconds(JSIL.Cast(o, System.Double)).MemberwiseClone();
	return System.Windows.Media.Animation.KeyTime.FromTimeSpan(timeSpan.MemberwiseClone());
};
System.Windows.Media.Animation.KeyTime.FromTimeSpan = function (timeSpan) {
	if (System.TimeSpan.op_LessThan(timeSpan.MemberwiseClone(), System.TimeSpan.Zero.MemberwiseClone())) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["timeSpan"]);
	}
	var result = new System.Windows.Media.Animation.KeyTime();
	result._value = timeSpan.MemberwiseClone();
	result._type = System.Windows.Media.Animation.KeyTimeType.TimeSpan;
	return result;
};
System.Windows.Media.Animation.KeyTime.Equals = function (keyTime1, keyTime2) {
	if (keyTime1._type === keyTime2._type) {
		return ((keyTime1._type !== System.Windows.Media.Animation.KeyTimeType.TimeSpan) || !System.TimeSpan.op_Inequality(
				JSIL.Cast(keyTime1._value, System.TimeSpan).MemberwiseClone(), 
				JSIL.Cast(keyTime2._value, System.TimeSpan).MemberwiseClone()
			));
	}
	return false;
};
System.Windows.Media.Animation.KeyTime.op_Equality = function (keyTime1, keyTime2) {
	return System.Windows.Media.Animation.KeyTime.Equals(keyTime1, keyTime2);
};
System.Windows.Media.Animation.KeyTime.op_Inequality = function (keyTime1, keyTime2) {
	return !System.Windows.Media.Animation.KeyTime.Equals(keyTime1, keyTime2);
};
System.Windows.Media.Animation.KeyTime.prototype.Equals$0 = function (value) {
	return System.Windows.Media.Animation.KeyTime.Equals(this.MemberwiseClone(), value);
};
System.Windows.Media.Animation.KeyTime.prototype.Equals$1 = function (value) {
	return ((value !== null) && 
		JSIL.TryCast(value, System.Windows.Media.Animation.KeyTime) && System.Windows.Media.Animation.KeyTime.op_Equality(this.MemberwiseClone(), JSIL.Cast(value, System.Windows.Media.Animation.KeyTime).MemberwiseClone()));
};
System.Windows.Media.Animation.KeyTime.prototype.GetHashCode = function () {
	if (this._value !== null) {
		return this._value.GetHashCode();
	}
	return this._type.GetHashCode();
};
System.Windows.Media.Animation.KeyTime.prototype.toString = function () {
	switch (Number(this._type)) {
		case 0: 
			return "Uniform";
		case 2: 
			return JSIL.Cast(this._value, System.TimeSpan).toString();
	}
	return null;
};
System.Windows.Media.Animation.KeyTime.op_Implicit = function (timeSpan) {
	return System.Windows.Media.Animation.KeyTime.FromTimeSpan(timeSpan);
};
System.Windows.Media.Animation.KeyTime.prototype.get_TimeSpan = function () {
	if (this._type === System.Windows.Media.Animation.KeyTimeType.TimeSpan) {
		return JSIL.Cast(this._value, System.TimeSpan);
	}
	throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
};
System.Windows.Media.Animation.KeyTime.prototype.get_Type = function () {
	return this._type;
};
System.Windows.Media.Animation.KeyTime.get_Uniform = function () {
	var result = new System.Windows.Media.Animation.KeyTime();
	result._type = System.Windows.Media.Animation.KeyTimeType.Uniform;
	return result;
};
JSIL.OverloadedMethod(System.Windows.Media.Animation.KeyTime.prototype, "Equals", [
		["Equals$0", [System.Windows.Media.Animation.KeyTime]], 
		["Equals$1", [System.Object]]
	]);
JSIL.MakeProperty(System.Windows.Media.Animation.KeyTime.prototype, "TimeSpan", 
	System.Windows.Media.Animation.KeyTime.prototype.get_TimeSpan, null);
JSIL.MakeProperty(System.Windows.Media.Animation.KeyTime.prototype, "Type", 
	System.Windows.Media.Animation.KeyTime.prototype.get_Type, null);
JSIL.MakeProperty(System.Windows.Media.Animation.KeyTime, "Uniform", 
	System.Windows.Media.Animation.KeyTime.get_Uniform, null);
System.Windows.Media.Animation.KeyTime.prototype._value = null;
System.Windows.Media.Animation.KeyTime.prototype._type = 0;

System.Windows.Media.Colors.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
System.Windows.Media.Colors.get_Black = function () {
	return System.Windows.Media.Color.FromUInt32(-16777216);
};
System.Windows.Media.Colors.get_Blue = function () {
	return System.Windows.Media.Color.FromUInt32(-16776961);
};
System.Windows.Media.Colors.get_Brown = function () {
	return System.Windows.Media.Color.FromUInt32(-5952982);
};
System.Windows.Media.Colors.get_Cyan = function () {
	return System.Windows.Media.Color.FromUInt32(-16711681);
};
System.Windows.Media.Colors.get_DarkGray = function () {
	return System.Windows.Media.Color.FromUInt32(-5658199);
};
System.Windows.Media.Colors.get_Gray = function () {
	return System.Windows.Media.Color.FromUInt32(-8355712);
};
System.Windows.Media.Colors.get_Green = function () {
	return System.Windows.Media.Color.FromUInt32(-16744448);
};
System.Windows.Media.Colors.get_LightGray = function () {
	return System.Windows.Media.Color.FromUInt32(-2894893);
};
System.Windows.Media.Colors.get_Magenta = function () {
	return System.Windows.Media.Color.FromUInt32(-65281);
};
System.Windows.Media.Colors.get_Orange = function () {
	return System.Windows.Media.Color.FromUInt32(-23296);
};
System.Windows.Media.Colors.get_Purple = function () {
	return System.Windows.Media.Color.FromUInt32(-8388480);
};
System.Windows.Media.Colors.get_Red = function () {
	return System.Windows.Media.Color.FromUInt32(-65536);
};
System.Windows.Media.Colors.get_Transparent = function () {
	return System.Windows.Media.Color.FromUInt32(16777215);
};
System.Windows.Media.Colors.get_White = function () {
	return System.Windows.Media.Color.FromUInt32(-1);
};
System.Windows.Media.Colors.get_Yellow = function () {
	return System.Windows.Media.Color.FromUInt32(-256);
};
JSIL.MakeProperty(System.Windows.Media.Colors, "Black", 
	System.Windows.Media.Colors.get_Black, null);
JSIL.MakeProperty(System.Windows.Media.Colors, "Blue", 
	System.Windows.Media.Colors.get_Blue, null);
JSIL.MakeProperty(System.Windows.Media.Colors, "Brown", 
	System.Windows.Media.Colors.get_Brown, null);
JSIL.MakeProperty(System.Windows.Media.Colors, "Cyan", 
	System.Windows.Media.Colors.get_Cyan, null);
JSIL.MakeProperty(System.Windows.Media.Colors, "DarkGray", 
	System.Windows.Media.Colors.get_DarkGray, null);
JSIL.MakeProperty(System.Windows.Media.Colors, "Gray", 
	System.Windows.Media.Colors.get_Gray, null);
JSIL.MakeProperty(System.Windows.Media.Colors, "Green", 
	System.Windows.Media.Colors.get_Green, null);
JSIL.MakeProperty(System.Windows.Media.Colors, "LightGray", 
	System.Windows.Media.Colors.get_LightGray, null);
JSIL.MakeProperty(System.Windows.Media.Colors, "Magenta", 
	System.Windows.Media.Colors.get_Magenta, null);
JSIL.MakeProperty(System.Windows.Media.Colors, "Orange", 
	System.Windows.Media.Colors.get_Orange, null);
JSIL.MakeProperty(System.Windows.Media.Colors, "Purple", 
	System.Windows.Media.Colors.get_Purple, null);
JSIL.MakeProperty(System.Windows.Media.Colors, "Red", 
	System.Windows.Media.Colors.get_Red, null);
JSIL.MakeProperty(System.Windows.Media.Colors, "Transparent", 
	System.Windows.Media.Colors.get_Transparent, null);
JSIL.MakeProperty(System.Windows.Media.Colors, "White", 
	System.Windows.Media.Colors.get_White, null);
JSIL.MakeProperty(System.Windows.Media.Colors, "Yellow", 
	System.Windows.Media.Colors.get_Yellow, null);

System.Windows.Controls.Primitives.LayoutInformation.GetLayoutSlot = function (element) {
	var rawLayoutData = System.Windows.Controls.Primitives.LayoutInformation.GetRawLayoutData(element);
	if (!((rawLayoutData !== null) && (7 <= (rawLayoutData.length - 1)))) {
		return new System.Windows.Rect();
	}
	return JSIL.New(System.Windows.Rect, "_ctor$0", [rawLayoutData[4], rawLayoutData[5], rawLayoutData[6], rawLayoutData[7]]);
};
System.Windows.Controls.Primitives.LayoutInformation.GetLayoutClip = function (element) {
	if (element === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["element"]);
	}
	return $asm02.MS.Internal.XcpImports.FrameworkElement_GetLayoutClip(element);
};
System.Windows.Controls.Primitives.LayoutInformation.GetLayoutExceptionElement = function (dispatcher) {
	return JSIL.TryCast($asm02.MS.Internal.XcpImports.LayoutInformation_GetLayoutExceptionElement(), System.Windows.UIElement);
};
System.Windows.Controls.Primitives.LayoutInformation.GetRawLayoutData = function (element) {
	if (element === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["element"]);
	}
	return $asm02.MS.Internal.XcpImports.FrameworkElement_GetRawLayoutData(element);
};
Object.defineProperty(System.Windows.Controls.Primitives.LayoutInformation, "FinalRectOffset", {
		"value": 4}
);

$asm02.MS.Internal.ManagedPeerTable.AssertWrapper = function (condition, message) {
};
$asm02.MS.Internal.ManagedPeerTable.Contains = function (nativeObject) {
	var peerTable = null, obj = new JSIL.Variable(null);
	var flag = false;
	System.Threading.Monitor.Enter((peerTable = $asm02.MS.Internal.ManagedPeerTable._peerTable));
	try {
		flag = $asm02.MS.Internal.ManagedPeerTable._peerTable.TryGetValue(nativeObject, /* ref */ obj);
		if (flag) {
			var weakReference = JSIL.TryCast(obj.value, System.WeakReference);
			if (!((weakReference === null) || weakReference.IsAlive)) {
				flag = false;
			}
		}
	} finally {
		System.Threading.Monitor.Exit(peerTable);
	}
	return flag;
};
$asm02.MS.Internal.ManagedPeerTable.IsWeak = function (nativeObject) {
	var peerTable = null, obj = new JSIL.Variable(null);
	var flag = false;
	System.Threading.Monitor.Enter((peerTable = $asm02.MS.Internal.ManagedPeerTable._peerTable));
	try {
		flag = $asm02.MS.Internal.ManagedPeerTable._peerTable.TryGetValue(nativeObject, /* ref */ obj);
	} finally {
		System.Threading.Monitor.Exit(peerTable);
	}
	return !(!flag || (JSIL.TryCast(obj.value, System.WeakReference) === null));
};
$asm02.MS.Internal.ManagedPeerTable.UnwrapWeakReference = function (o) {
	var weakReference = JSIL.TryCast(o, System.WeakReference);
	if (weakReference !== null) {
		return weakReference.Target;
	}
	return o;
};
$asm02.MS.Internal.ManagedPeerTable.CollectTest = function () {
};
$asm02.MS.Internal.ManagedPeerTable.PeriodicallyCleanupNativePeers = function () {
	if (!(($asm02.MS.Internal.ManagedPeerTable._countOfRecentRemoves <= 1000) || !$asm02.MS.Internal.XcpImports.OnMainThread())) {
		$asm02.MS.Internal.ManagedPeerTable._countOfRecentRemoves = 0;
		$asm02.MS.Internal.XcpImports.CleanupNativePeers();
	}
};
$asm02.MS.Internal.ManagedPeerTable.TryAdd$0 = function (nativeObject, managedPeer) {
	return $asm02.MS.Internal.ManagedPeerTable.TryAdd$1(nativeObject, managedPeer, false);
};
$asm02.MS.Internal.ManagedPeerTable.TryAdd$1 = function (nativeObject, managedPeer, forceStrong) {
	var peerTable = null;
	if (!$asm02.MS.Internal.ManagedPeerTable._isShuttingDown) {
		System.Threading.Monitor.Enter((peerTable = $asm02.MS.Internal.ManagedPeerTable._peerTable));
		try {
			if (!$asm02.MS.Internal.ManagedPeerTable._isShuttingDown) {
				;
				return true;
			}
		} finally {
			System.Threading.Monitor.Exit(peerTable);
		}
		return false;
	}
	return false;
};
$asm02.MS.Internal.ManagedPeerTable.Remove = function (nativeObject) {
	var peerTable = null;
	if ($asm02.MS.Internal.ManagedPeerTable._isShuttingDown) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
	}
	System.Threading.Monitor.Enter((peerTable = $asm02.MS.Internal.ManagedPeerTable._peerTable));
	try {
		if ($asm02.MS.Internal.ManagedPeerTable._pendingRemove.Contains(nativeObject)) {
			$asm02.MS.Internal.ManagedPeerTable._pendingRemove.Remove(nativeObject);
		} else {
			$asm02.MS.Internal.ManagedPeerTable._peerTable.Remove(nativeObject);
		}
		++$asm02.MS.Internal.ManagedPeerTable._countOfRecentRemoves;
	} finally {
		System.Threading.Monitor.Exit(peerTable);
	}
};
$asm02.MS.Internal.ManagedPeerTable.TryRemove = function (nativeObject) {
	var peerTable = null;
	if ($asm02.MS.Internal.ManagedPeerTable._isShuttingDown) {
		return;
	}
	System.Threading.Monitor.Enter((peerTable = $asm02.MS.Internal.ManagedPeerTable._peerTable));
	try {
		if (!$asm02.MS.Internal.ManagedPeerTable._isShuttingDown) {
			$asm02.MS.Internal.ManagedPeerTable.Remove(nativeObject);
		}
	} finally {
		System.Threading.Monitor.Exit(peerTable);
	}
};
$asm02.MS.Internal.ManagedPeerTable.GetWeakRefCount = function () {
	return $asm02.MS.Internal.ManagedPeerTable._weakRefCount;
};
$asm02.MS.Internal.ManagedPeerTable.UnpegManagedPeerNoRef$0 = function (cValue) {
	$asm02.MS.Internal.ManagedPeerTable.UnpegManagedPeerNoRef$2(JSIL.New(System.IntPtr, "_ctor$0", [cValue.m_pdoValue]));
	System.GC.KeepAlive(cValue.MemberwiseClone());
};
$asm02.MS.Internal.ManagedPeerTable.UnpegManagedPeerNoRef$1 = function (managedPeer) {
	$asm02.MS.Internal.ManagedPeerTable.UnpegManagedPeerNoRef$2(managedPeer.IManagedPeerBase_NativeObject);
	System.GC.KeepAlive(managedPeer);
};
$asm02.MS.Internal.ManagedPeerTable.UnpegManagedPeerNoRef$2 = function (nativeObject) {
	var peerTable = null, obj = new JSIL.Variable(null);
	System.Threading.Monitor.Enter((peerTable = $asm02.MS.Internal.ManagedPeerTable._peerTable));
	try {
		if (!(!$asm02.MS.Internal.ManagedPeerTable._peerTable.TryGetValue(nativeObject, /* ref */ obj) || JSIL.TryCast(obj.value, System.WeakReference))) {
			++$asm02.MS.Internal.ManagedPeerTable._weakRefCount;
			$asm02.MS.Internal.ManagedPeerTable._peerTable.set_Item(nativeObject, JSIL.New(System.WeakReference, "_ctor$1", [obj.value]));
			$asm02.MS.Internal.XcpImports.DependencyObject_SetIsManagedPeerPeggedNoRef(nativeObject, false);
		}
	} finally {
		System.Threading.Monitor.Exit(peerTable);
	}
};
$asm02.MS.Internal.ManagedPeerTable.PegManagedPeerNoRef$0 = function (managedPeer) {
	$asm02.MS.Internal.ManagedPeerTable.PegManagedPeerNoRef$1(managedPeer.IManagedPeerBase_NativeObject);
	System.GC.KeepAlive(managedPeer);
};
$asm02.MS.Internal.ManagedPeerTable.PegManagedPeerNoRef$1 = function (nativeObject) {
	var peerTable = null;
	System.Threading.Monitor.Enter((peerTable = $asm02.MS.Internal.ManagedPeerTable._peerTable));
	try {
		$asm02.MS.Internal.ManagedPeerTable._peerTable.TryGetValue(nativeObject, /* ref */ target);
		var weakReference = JSIL.TryCast(target.value, System.WeakReference);
		if (weakReference !== null) {
			--$asm02.MS.Internal.ManagedPeerTable._weakRefCount;
			var target = new JSIL.Variable(weakReference.Target);
			$asm02.MS.Internal.ManagedPeerTable._peerTable.set_Item(nativeObject, target.value);
			$asm02.MS.Internal.XcpImports.DependencyObject_SetIsManagedPeerPeggedNoRef(nativeObject, true);
		}
	} finally {
		System.Threading.Monitor.Exit(peerTable);
	}
};
$asm02.MS.Internal.ManagedPeerTable.ShutdownAllPeers = function () {
	var peerTable = null;
	if (!(($asm02.MS.Internal.ManagedPeerTable._peerTable !== null) && ($asm02.MS.Internal.ManagedPeerTable._peerTable.Count !== 0))) {
		return;
	}
	System.Threading.Monitor.Enter((peerTable = $asm02.MS.Internal.ManagedPeerTable._peerTable));
	try {
		$asm02.MS.Internal.ManagedPeerTable._isShuttingDown = true;
	} finally {
		System.Threading.Monitor.Exit(peerTable);
	}
	var enumerator = JSIL.Cast($asm02.MS.Internal.ManagedPeerTable._peerTable.Values, System.Collections.Generic.Dictionary$b2.ValueCollection.Of(System.IntPtr, System.Object)).GetEnumerator().MemberwiseClone();
	try {
	__loop0__: 
		while (enumerator.MoveNext()) {
			var current = enumerator.Current;
			var managedPeer = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.UnwrapWeakReference(current), $asm02.MS.Internal.IManagedPeer);
			if (managedPeer !== null) {
				managedPeer.IManagedPeer_BeginShutdown();
			}
		}
	} finally {
		enumerator.IDisposable_Dispose();
	}
	var enumerator2 = JSIL.Cast($asm02.MS.Internal.ManagedPeerTable._peerTable.Values, System.Collections.Generic.Dictionary$b2.ValueCollection.Of(System.IntPtr, System.Object)).GetEnumerator().MemberwiseClone();
	try {
	__loop1__: 
		while (enumerator2.MoveNext()) {
			var current2 = enumerator2.Current;
			var managedPeer2 = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.UnwrapWeakReference(current2), $asm02.MS.Internal.IManagedPeer);
			if (managedPeer2 !== null) {
				managedPeer2.IManagedPeer_EndShutdown();
			}
		}
	} finally {
		enumerator2.IDisposable_Dispose();
	}
	$asm02.MS.Internal.ManagedPeerTable._peerTable.Clear();
	$asm02.MS.Internal.ManagedPeerTable._pendingRemove.Clear();
	$asm02.MS.Internal.ManagedPeerTable.PeggedManagedPeersWithRefs.Clear();
	$asm02.MS.Internal.ManagedPeerTable._countOfRecentAdds = ($asm02.MS.Internal.ManagedPeerTable._countOfRecentRemoves = 0);
	$asm02.MS.Internal.ManagedPeerTable._isShuttingDown = false;
	System.GC.Collect();
	System.GC.WaitForPendingFinalizers();
};
$asm02.MS.Internal.ManagedPeerTable.GetManagedPeer = function (nativeObject) {
	return $asm02.MS.Internal.ManagedPeerTable.EnsureManagedPeer$0(nativeObject, 0, null);
};
$asm02.MS.Internal.ManagedPeerTable.GetManagedPeerWithReference = function (nativeObject) {
	return JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.EnsureManagedPeer$1(nativeObject, 0, null, true), $asm02.MS.Internal.IManagedPeer);
};
$asm02.MS.Internal.ManagedPeerTable.EnsureManagedPeer$0 = function (unmanagedPointer, typeIndex, type) {
	return $asm02.MS.Internal.ManagedPeerTable.EnsureManagedPeer$1(unmanagedPointer, typeIndex, type, false);
};
$asm02.MS.Internal.ManagedPeerTable.EnsureManagedPeer$1 = function (unmanagedPointer, typeIndex, type, preserveManagedObjectReference) {
	if (System.IntPtr.op_Equality(unmanagedPointer, System.IntPtr.op_Explicit$0(0))) {
		return null;
	}
	var result = null;
	var flag = (true);
	if (flag) {
		return result;
	}
	$asm02.MS.Internal.XcpImports.CheckThread();
	if (!((typeIndex !== 0) || type)) {
		typeIndex = $asm02.MS.Internal.XcpImports.GetNativeTypeIndex(unmanagedPointer);
	}
	$asm02.MS.Internal.FrameworkCallbacks.Initialize();
	System.Windows.DependencyObject.StaticNativePointer = unmanagedPointer;
	result = (typeIndex > 0) ? $asm02.MS.Internal.CoreTypes.GetCoreWrapper(typeIndex) : JSIL.TryCast(System.Activator.CreateInstance$3(type), $asm02.MS.Internal.IManagedPeerBase);
	System.Windows.DependencyObject.StaticNativePointer = System.IntPtr.Zero;
	return result;
};
$asm02.MS.Internal.ManagedPeerTable.GetOrCreateAutomationPeer = function ($unmanagedPointer, myUIE) {
	var unmanagedPointer = new JSIL.Variable($unmanagedPointer);
	$asm02.MS.Internal.XcpImports.CheckThread();
	var result = null;
	var flag = (true);
	if (flag) {
		result = null;
		$asm02.MS.Internal.XcpImports.ReleaseNativeObject$1(/* ref */ unmanagedPointer);
	} else {
		$asm02.MS.Internal.FrameworkCallbacks.Initialize();
		System.Windows.DependencyObject.StaticNativePointer = unmanagedPointer.value;
		result = JSIL.New(System.Windows.Automation.Peers.FrameworkElementAutomationPeer, "_ctor$2", [myUIE]);
		System.Windows.DependencyObject.StaticNativePointer = System.IntPtr.Zero;
	}
	return result;
};
$asm02.MS.Internal.ManagedPeerTable.PegManagedPeer = function (nativeControl) {
	var managedPeerWithReference = $asm02.MS.Internal.ManagedPeerTable.GetManagedPeerWithReference(nativeControl);
	if (managedPeerWithReference === null) {
		return -2146498358;
	}
	try {
		$asm02.MS.Internal.ManagedPeerTable.PeggedManagedPeersWithRefs.Add(managedPeerWithReference);
	} catch ($exception) {
		var arg_1D_0 = $exception;
		return $asm02.MS.Internal.Error.GetXresultForUserException(arg_1D_0);
	}
	return 0;
};
$asm02.MS.Internal.ManagedPeerTable.UnpegManagedPeer = function (nativeControl) {
	var obj = null;
	true;
	if (obj === null) {
		return 0;
	}
	try {
		$asm02.MS.Internal.ManagedPeerTable.PeggedManagedPeersWithRefs.Remove(obj);
	} catch ($exception) {
		var arg_1F_0 = $exception;
		return $asm02.MS.Internal.Error.GetXresultForUserException(arg_1F_0);
	}
	return 0;
};
JSIL.OverloadedMethod($asm02.MS.Internal.ManagedPeerTable, "TryAdd", [
		["TryAdd$0", [System.IntPtr, $asm02.MS.Internal.IManagedPeerBase]], 
		["TryAdd$1", [System.IntPtr, $asm02.MS.Internal.IManagedPeerBase, System.Boolean]]
	]);
JSIL.OverloadedMethod($asm02.MS.Internal.ManagedPeerTable, "UnpegManagedPeerNoRef", [
		["UnpegManagedPeerNoRef$0", [$asm02.MS.Internal.CValue]], 
		["UnpegManagedPeerNoRef$1", [$asm02.MS.Internal.IManagedPeerBase]], 
		["UnpegManagedPeerNoRef$2", [System.IntPtr]]
	]);
JSIL.OverloadedMethod($asm02.MS.Internal.ManagedPeerTable, "PegManagedPeerNoRef", [
		["PegManagedPeerNoRef$0", [$asm02.MS.Internal.IManagedPeerBase]], 
		["PegManagedPeerNoRef$1", [System.IntPtr]]
	]);
JSIL.OverloadedMethod($asm02.MS.Internal.ManagedPeerTable, "EnsureManagedPeer", [
		["EnsureManagedPeer$0", [System.IntPtr, System.Int32, System.Type]], 
		["EnsureManagedPeer$1", [System.IntPtr, System.Int32, System.Type, System.Boolean]]
	]);
$asm02.MS.Internal.ManagedPeerTable._weakRefCount = 0;
$asm02.MS.Internal.ManagedPeerTable._peerTable = null;
$asm02.MS.Internal.ManagedPeerTable._isShuttingDown = false;
$asm02.MS.Internal.ManagedPeerTable._pendingRemove = null;
$asm02.MS.Internal.ManagedPeerTable._countOfRecentRemoves = 0;
$asm02.MS.Internal.ManagedPeerTable._countOfRecentAdds = 0;
$asm02.MS.Internal.ManagedPeerTable.PeggedManagedPeersWithRefs = null;
$asm02.MS.Internal.ManagedPeerTable._cctor = function () {
	$asm02.MS.Internal.ManagedPeerTable._debugCounters = new $asm02.MS.Internal.ManagedPeerTable.DebugCounters();
	$asm02.MS.Internal.ManagedPeerTable._weakRefCount = 0;
	$asm02.MS.Internal.ManagedPeerTable._peerTable = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.IntPtr, System.Object), "_ctor$3", [32, new $asm02.MS.Internal.ManagedPeerTable.IntPtrComparer()]);
	$asm02.MS.Internal.ManagedPeerTable._pendingRemove = new (System.Collections.Generic.List$b1.Of(System.IntPtr)) ();
	$asm02.MS.Internal.ManagedPeerTable._countOfRecentRemoves = 0;
	$asm02.MS.Internal.ManagedPeerTable._countOfRecentAdds = 0;
	$asm02.MS.Internal.ManagedPeerTable.PeggedManagedPeersWithRefs = new (System.Collections.Generic.List$b1.Of(System.Object)) ();
};

$asm02.MS.Internal.ManagedPeerTable.IntPtrComparer.prototype.Equals = function (x, y) {
	return System.IntPtr.op_Equality(x, y);
};
$asm02.MS.Internal.ManagedPeerTable.IntPtrComparer.prototype.GetHashCode = function (o) {
	return o.GetHashCode();
};
$asm02.MS.Internal.ManagedPeerTable.IntPtrComparer.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};

$asm02.MS.Internal.ManagedPeerTable.DebugCounters.prototype.Add = 0;
$asm02.MS.Internal.ManagedPeerTable.DebugCounters.prototype.AddedStrong = 0;
$asm02.MS.Internal.ManagedPeerTable.DebugCounters.prototype.Strengthen = 0;
$asm02.MS.Internal.ManagedPeerTable.DebugCounters.prototype.Weaken = 0;
$asm02.MS.Internal.ManagedPeerTable.DebugCounters.prototype.Remove = 0;
$asm02.MS.Internal.ManagedPeerTable.DebugCounters.prototype.PendingRemove = 0;
$asm02.MS.Internal.ManagedPeerTable.DebugCounters.prototype.TreeDictionaryCount = 0;
$asm02.MS.Internal.ManagedPeerTable.DebugCounters.prototype.PropertyDictionaryCount = 0;
$asm02.MS.Internal.ManagedPeerTable.DebugCounters.prototype.MaxPeerCount = 0;

$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.get_InitializeDelegateInstance = function () {
	return $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._initializeDelegate;
};
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.get_ResolveAssemblyDelegateInstance = function () {
	return $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._resolveAssemblyDelegate;
};
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.get_GetTypeNamespaceDelegateInstance = function () {
	return $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._getTypeNamespaceDelegate;
};
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.get_LookupTypeFlagsDelegateInstance = function () {
	return $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._lookupTypeFlagsDelegate;
};
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.get_LookupPropertyFlagsDelegateInstance = function () {
	return $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._lookupPropertyFlagsDelegate;
};
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.get_ResolveTypeNameDelegateInstance = function () {
	return $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._resolveTypeNameDelegate;
};
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.get_ResolvePropertyNameDelegateInstance = function () {
	return $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._resolvePropertyNameDelegate;
};
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.get_ResolveDependencyPropertyNameDelegateInstance = function () {
	return $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._resolveDependencyPropertyNameDelegate;
};
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.get_GetTypeNameDelegateInstance = function () {
	return $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._getTypeNameDelegate;
};
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.get_GetTypeFullNameDelegateInstance = function () {
	return $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._getTypeFullNameDelegate;
};
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.get_GetPropertyNameDelegateInstance = function () {
	return $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._getPropertyNameDelegate;
};
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.get_GetBaseTypeDelegateInstance = function () {
	return $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._getBaseTypeDelegate;
};
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.get_GetDeclaringTypeDelegateInstance = function () {
	return $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._getDeclaringTypeDelegate;
};
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.get_IsAssignableFromDelegateInstance = function () {
	return $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._isAssignableFromDelegate;
};
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.get_GetContentPropertyDelegateInstance = function () {
	return $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._getContentPropertyDelegate;
};
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.get_GetCollectionItemTypeDelegateInstance = function () {
	return $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._getCollectionItemTypeDelegate;
};
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.get_GetTextSyntaxForTypeDelegateInstance = function () {
	return $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._getTextSyntaxForTypeDelegate;
};
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.get_GetTextSyntaxForPropertyDelegateInstance = function () {
	return $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._getTextSyntaxForPropertyDelegate;
};
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.Initialize = function () {
	try {
		$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._properties = JSIL.New($asm02.MS.Internal.TwoWayDictionary$b2.Of($asm02.MS.Internal.XamlMemberInfo, System.UInt32), "_ctor$0", []);
		$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._assemblyNameMapping = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.String, System.UInt32), "_ctor$2", [System.StringComparer.OrdinalIgnoreCase]);
		$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._assemblies = new (System.Collections.Generic.List$b1.Of(System.Reflection.Assembly)) ();
		$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._assemblyIds = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.Reflection.Assembly, System.UInt32), "_ctor$0", []);
		$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._namespaceNameMapping = new (System.Collections.Generic.List$b1.Of($asm02.MS.Internal.TwoWayDictionary$b2.Of(System.String, System.UInt32))) ();
		$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._types = JSIL.New($asm02.MS.Internal.TwoWayDictionary$b2.Of(System.Type, System.UInt32), "_ctor$0", []);
		$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._uptoNamespaceIndex = 1;
		$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._shouldResetOnlyXmlnsDefinitions = $asm02.MS.Internal.XamlSchemaContext.ShouldResetOnlyXmlnsDefinitions();
		var result = 0;
	} catch ($exception) {
		var arg_55_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForException(arg_55_0);
	}
	return result;
};
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.ResolveAssembly = function (inAssemblyName, /* ref */ retValue) {
	retValue.value = 0;
	try {
		if ($asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.HelperTryGetAssemblyToken(inAssemblyName, /* ref */ xamlAssemblyToken)) {
			retValue.value = xamlAssemblyToken.value._handle.GetAsUInt32();
			var result = 0;
		} else {
			var xamlAssemblyToken = new JSIL.Variable(new $asm02.MS.Internal.XamlAssemblyToken());
			retValue.value = xamlAssemblyToken.value._handle.GetAsUInt32();
			result = -2147467259;
		}
	} catch ($exception) {
		var arg_3D_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForException(arg_3D_0);
	}
	return result;
};
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.RegisterAssembly = function (assembly, assemblyName) {
	var num2 = new JSIL.Variable(0);
	var num = 0;
	num = ($asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._assemblies.Count + 1);
	if ($asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._shouldResetOnlyXmlnsDefinitions) {
		var flag = true;
		if ($asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._assemblyIds.TryGetValue(assembly, /* ref */ num2)) {
			flag = false;
			num = num2.value;
		}
		if (flag) {
			$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._assemblies.Add(assembly);
			$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._assemblyNameMapping.set_Item(assemblyName, num);
			$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._namespaceNameMapping.Add(JSIL.New($asm02.MS.Internal.TwoWayDictionary$b2.Of(System.String, System.UInt32), "_ctor$0", []));
			$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._assemblyIds.Add(assembly, num);
		}
	} else {
		$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._assemblies.Add(assembly);
		$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._assemblyNameMapping.Add(assemblyName, num);
		$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._namespaceNameMapping.Add(JSIL.New($asm02.MS.Internal.TwoWayDictionary$b2.Of(System.String, System.UInt32), "_ctor$0", []));
	}
	return new $asm02.MS.Internal.XamlAssemblyToken($asm02.MS.Internal.XamlTypeInfoProviderKind.tpkManaged, num);
};
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.HelperTryGetAssemblyToken = function (inAssemblyName, /* ref */ outAssemblyToken) {
	var assembly = new JSIL.Variable(null);
	var handle = new JSIL.Variable(0);
	if ($asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._assemblyNameMapping.TryGetValue(inAssemblyName, /* ref */ handle)) {
		outAssemblyToken.value = new $asm02.MS.Internal.XamlAssemblyToken($asm02.MS.Internal.XamlTypeInfoProviderKind.tpkManaged, handle.value);
		return true;
	}
	if (!$asm02.MS.Internal.JoltHelper.TryGetLoadedAssemblyByName(inAssemblyName, /* ref */ assembly)) {
		outAssemblyToken.value = new $asm02.MS.Internal.XamlAssemblyToken();
		return false;
	}
	if (assembly.value === null) {
		outAssemblyToken.value = new $asm02.MS.Internal.XamlAssemblyToken();
		return false;
	}
	outAssemblyToken.value = $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.RegisterAssembly(assembly.value, inAssemblyName).MemberwiseClone();
	return true;
};
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetPropertyToken$0 = function (prop, /* ref */ propertyToken) {
	$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetPropertyToken$1(JSIL.New($asm02.MS.Internal.XamlMemberInfo, "_ctor$2", [prop]), /* ref */ propertyToken);
};
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetPropertyToken$1 = function (prop, /* ref */ propertyToken) {
	try {
		if (!((prop.DependencyProperty !== null) && prop.DependencyProperty.IsCoreProperty)) {
			var num = new JSIL.Variable(-1);
			if (!$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._properties.TryGetValue(prop.MemberwiseClone(), /* ref */ num)) {
				num.value = ($asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._properties.Count + 1);
				$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._properties.Add(prop.MemberwiseClone(), num.value);
			}
			propertyToken.value = new $asm02.MS.Internal.XamlPropertyToken($asm02.MS.Internal.XamlTypeInfoProviderKind.tpkManaged, num.value);
		} else {
			propertyToken.value = new $asm02.MS.Internal.XamlPropertyToken($asm02.MS.Internal.XamlTypeInfoProviderKind.tpkNative, prop.DependencyProperty.m_nKnownId);
		}
	} catch ($exception) {
		propertyToken.value = new $asm02.MS.Internal.XamlPropertyToken();
	}
};
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetPropertyFromToken = function (propertyToken) {
	var xamlMemberInfo = new JSIL.Variable(new $asm02.MS.Internal.XamlMemberInfo());
	try {
		$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._properties.TryGetKey(propertyToken._handle.Handle, /* ref */ xamlMemberInfo);
		var result = xamlMemberInfo.value.MemberwiseClone();
	} catch ($exception) {
		result = JSIL.New($asm02.MS.Internal.XamlMemberInfo, "_ctor$2", [null]);
	}
	return result;
};
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetDependencyPropertyFromToken = function (propertyToken) {
	var typeToken = new JSIL.Variable(new $asm02.MS.Internal.XamlTypeToken());
	try {
		var dependencyProperty = null;
		if (propertyToken._handle.TypeInfoProviderKind === $asm02.MS.Internal.XamlTypeInfoProviderKind.tpkNative) {
			dependencyProperty = System.Windows.DependencyProperty.QueryRegisteredCoreProperty$0(propertyToken._handle.Handle);
			if (dependencyProperty === null) {
				var text = new JSIL.Variable(null);
				$asm02.MS.Internal.XcpImports.GetNativePropertyInfo(propertyToken.MemberwiseClone(), /* ref */ text, /* ref */ typeToken);
				var typeFromToken = $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetTypeFromToken(typeToken.value.MemberwiseClone());
				System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(typeFromToken.TypeHandle.MemberwiseClone());
				dependencyProperty = System.Windows.DependencyProperty.QueryRegisteredCoreProperty$0(propertyToken._handle.Handle);
			}
		} else {
			var propertyFromToken = $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetPropertyFromToken(propertyToken.MemberwiseClone()).MemberwiseClone();
			if (propertyFromToken.DependencyProperty !== null) {
				dependencyProperty = propertyFromToken.DependencyProperty;
			} else {
				dependencyProperty = $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.LookupDependencyProperty(propertyFromToken.DeclaringType, propertyFromToken.Name).DependencyProperty;
			}
		}
		var result = dependencyProperty;
	} catch ($exception) {
		result = null;
	}
	return result;
};
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetTypeToken$0 = function (type, /* ref */ typeToken) {
	try {
		var num = new JSIL.Variable($asm02.MS.Internal.CoreTypes.GetCoreTypeId(type));
		if (num.value !== -1) {
			typeToken.value = new $asm02.MS.Internal.XamlTypeToken($asm02.MS.Internal.XamlTypeInfoProviderKind.tpkNative, num.value);
		} else {
			if (!$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._types.TryGetValue(type, /* ref */ num)) {
				num.value = $asm02.MS.Internal.TypeProxy.RegisterType(type);
				$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._types.Add(type, num.value);
			}
			typeToken.value = new $asm02.MS.Internal.XamlTypeToken($asm02.MS.Internal.XamlTypeInfoProviderKind.tpkManaged, num.value);
		}
	} catch ($exception) {
		typeToken.value = new $asm02.MS.Internal.XamlTypeToken();
	}
};
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetTypeToken$1 = function (type) {
	var result = new JSIL.Variable(new $asm02.MS.Internal.XamlTypeToken());
	$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetTypeToken$0(type, /* ref */ result);
	return result.value;
};
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetTypeFromToken = function (typeToken) {
	var result = new JSIL.Variable(null);
	if (typeToken._handle.TypeInfoProviderKind === $asm02.MS.Internal.XamlTypeInfoProviderKind.tpkNative) {
		result.value = $asm02.MS.Internal.CoreTypes.GetCoreType(typeToken._handle.Handle);
	} else {
		$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._types.TryGetKey(typeToken._handle.Handle, /* ref */ result);
	}
	return result.value;
};
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetTypeNamespace$0 = function (assemblyToken, typeNamespaceName) {
	var num = new JSIL.Variable(0);
	var handle = assemblyToken._handle.Handle;
	if (!($asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._namespaceNameMapping.get_Item((handle - 1))).TryGetValue(typeNamespaceName, /* ref */ num)) {
		num.value = $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._uptoNamespaceIndex++;
		($asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._namespaceNameMapping.get_Item((handle - 1))).Add(typeNamespaceName, num.value);
	}
	return new $asm02.MS.Internal.XamlTypeNamespaceToken($asm02.MS.Internal.XamlTypeInfoProviderKind.tpkManaged, handle, num.value);
};
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetTypeNamespace$1 = function (inAssemblyName, inTypeNamespace, /* ref */ retValue) {
	var assemblyToken = new JSIL.Variable(new $asm02.MS.Internal.XamlAssemblyToken());
	try {
		if ($asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.HelperTryGetAssemblyToken(inAssemblyName, /* ref */ assemblyToken)) {
			retValue.value = $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetTypeNamespace$0(assemblyToken.value.MemberwiseClone(), inTypeNamespace).MemberwiseClone();
			var result = 0;
		} else {
			retValue.value = new $asm02.MS.Internal.XamlTypeNamespaceToken();
			result = -2147467259;
		}
	} catch ($exception) {
		var arg_2A_0 = $exception;
		retValue.value = new $asm02.MS.Internal.XamlTypeNamespaceToken();
		result = $asm02.MS.Internal.Error.GetXresultForException(arg_2A_0);
	}
	return result;
};
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.LookupTypeFlags = function (sTypeToken, btbLookupValues, /* ref */ btbBitsChecked, /* ref */ btbReturnValues) {
	var type = new JSIL.Variable(null);
	btbBitsChecked.value = $asm02.MS.Internal.BoolTypeBits.btbNone;
	btbReturnValues.value = $asm02.MS.Internal.BoolTypeBits.btbNone;
	try {
		if (!$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._types.TryGetKey(sTypeToken._handle.Handle, /* ref */ type)) {
			var result = -2147467259;
		} else {
			btbReturnValues.value = (btbReturnValues.value | $asm02.MS.Internal.TypeReflector.LookupTypeBits(type.value, $asm02.MS.Internal.BoolTypeBits.btbString) ? $asm02.MS.Internal.BoolTypeBits.btbString : $asm02.MS.Internal.BoolTypeBits.btbNone);
			btbBitsChecked.value = (btbBitsChecked.value | $asm02.MS.Internal.BoolTypeBits.btbString);
			btbReturnValues.value = (btbReturnValues.value | $asm02.MS.Internal.TypeReflector.LookupTypeBits(type.value, $asm02.MS.Internal.BoolTypeBits.btbConstructible) ? $asm02.MS.Internal.BoolTypeBits.btbConstructible : $asm02.MS.Internal.BoolTypeBits.btbNone);
			btbBitsChecked.value = (btbBitsChecked.value | $asm02.MS.Internal.BoolTypeBits.btbConstructible);
			btbReturnValues.value = (btbReturnValues.value | $asm02.MS.Internal.TypeReflector.LookupTypeBits(type.value, $asm02.MS.Internal.BoolTypeBits.btbCollection) ? $asm02.MS.Internal.BoolTypeBits.btbCollection : $asm02.MS.Internal.BoolTypeBits.btbNone);
			btbBitsChecked.value = (btbBitsChecked.value | $asm02.MS.Internal.BoolTypeBits.btbCollection);
			btbReturnValues.value = (btbReturnValues.value | $asm02.MS.Internal.TypeReflector.LookupTypeBits(type.value, $asm02.MS.Internal.BoolTypeBits.btbList) ? $asm02.MS.Internal.BoolTypeBits.btbList : $asm02.MS.Internal.BoolTypeBits.btbNone);
			btbBitsChecked.value = (btbBitsChecked.value | $asm02.MS.Internal.BoolTypeBits.btbList);
			btbReturnValues.value = (btbReturnValues.value | $asm02.MS.Internal.TypeReflector.LookupTypeBits(type.value, $asm02.MS.Internal.BoolTypeBits.btbDictionary) ? $asm02.MS.Internal.BoolTypeBits.btbDictionary : $asm02.MS.Internal.BoolTypeBits.btbNone);
			btbBitsChecked.value = (btbBitsChecked.value | $asm02.MS.Internal.BoolTypeBits.btbDictionary);
			btbReturnValues.value = (btbReturnValues.value | $asm02.MS.Internal.TypeReflector.LookupTypeBits(type.value, $asm02.MS.Internal.BoolTypeBits.btbArray) ? $asm02.MS.Internal.BoolTypeBits.btbArray : $asm02.MS.Internal.BoolTypeBits.btbNone);
			btbBitsChecked.value = (btbBitsChecked.value | $asm02.MS.Internal.BoolTypeBits.btbArray);
			btbReturnValues.value = (btbReturnValues.value | $asm02.MS.Internal.TypeReflector.LookupTypeBits(type.value, $asm02.MS.Internal.BoolTypeBits.btbIsPublic) ? $asm02.MS.Internal.BoolTypeBits.btbIsPublic : $asm02.MS.Internal.BoolTypeBits.btbNone);
			btbBitsChecked.value = (btbBitsChecked.value | $asm02.MS.Internal.BoolTypeBits.btbIsPublic);
			btbReturnValues.value = (btbReturnValues.value | $asm02.MS.Internal.TypeReflector.LookupTypeBits(type.value, $asm02.MS.Internal.BoolTypeBits.btbMarkupExtension) ? $asm02.MS.Internal.BoolTypeBits.btbMarkupExtension : $asm02.MS.Internal.BoolTypeBits.btbNone);
			btbBitsChecked.value = (btbBitsChecked.value | $asm02.MS.Internal.BoolTypeBits.btbMarkupExtension);
			btbReturnValues.value = (btbReturnValues.value | $asm02.MS.Internal.TypeReflector.LookupTypeBits(type.value, $asm02.MS.Internal.BoolTypeBits.btbTemplate) ? $asm02.MS.Internal.BoolTypeBits.btbTemplate : $asm02.MS.Internal.BoolTypeBits.btbNone);
			btbBitsChecked.value = (btbBitsChecked.value | $asm02.MS.Internal.BoolTypeBits.btbTemplate);
			btbReturnValues.value = (btbReturnValues.value | $asm02.MS.Internal.TypeReflector.LookupTypeBits(type.value, $asm02.MS.Internal.BoolTypeBits.btbIsISupportInitialize) ? $asm02.MS.Internal.BoolTypeBits.btbIsISupportInitialize : $asm02.MS.Internal.BoolTypeBits.btbNone);
			btbBitsChecked.value = (btbBitsChecked.value | $asm02.MS.Internal.BoolTypeBits.btbIsISupportInitialize);
			btbReturnValues.value = (btbReturnValues.value | $asm02.MS.Internal.TypeReflector.LookupTypeBits(type.value, $asm02.MS.Internal.BoolTypeBits.btbWhitespaceSignificantCollection) ? $asm02.MS.Internal.BoolTypeBits.btbWhitespaceSignificantCollection : $asm02.MS.Internal.BoolTypeBits.btbNone);
			btbBitsChecked.value = (btbBitsChecked.value | $asm02.MS.Internal.BoolTypeBits.btbWhitespaceSignificantCollection);
			btbReturnValues.value = (btbReturnValues.value | $asm02.MS.Internal.TypeReflector.LookupTypeBits(type.value, $asm02.MS.Internal.BoolTypeBits.btbTrimSurroundingWhitespace) ? $asm02.MS.Internal.BoolTypeBits.btbTrimSurroundingWhitespace : $asm02.MS.Internal.BoolTypeBits.btbNone);
			btbBitsChecked.value = (btbBitsChecked.value | $asm02.MS.Internal.BoolTypeBits.btbTrimSurroundingWhitespace);
			result = 0;
		}
	} catch ($exception) {
		var arg_19D_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForException(arg_19D_0);
	}
	return result;
};
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.LookupPropertyFlags = function (sPropertyToken, bpbLookupValues, /* ref */ bpbBitsChecked, /* ref */ bpbReturnValues) {
	var xamlMemberInfo = new JSIL.Variable(new $asm02.MS.Internal.XamlMemberInfo());
	bpbReturnValues.value = $asm02.MS.Internal.BoolPropertyBits.bpbNone;
	bpbBitsChecked.value = $asm02.MS.Internal.BoolPropertyBits.bpbNone;
	try {
		if (!$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._properties.TryGetKey(sPropertyToken._handle.Handle, /* ref */ xamlMemberInfo)) {
			var result = -2147467259;
		} else {
			bpbReturnValues.value = (bpbReturnValues.value | $asm02.MS.Internal.TypeReflector.LookupPropertyBits(xamlMemberInfo.value.Member, $asm02.MS.Internal.BoolPropertyBits.bpbIsBrowsable) ? $asm02.MS.Internal.BoolPropertyBits.bpbIsBrowsable : $asm02.MS.Internal.BoolPropertyBits.bpbNone);
			bpbBitsChecked.value = (bpbBitsChecked.value | $asm02.MS.Internal.BoolPropertyBits.bpbIsBrowsable);
			bpbReturnValues.value = (bpbReturnValues.value | $asm02.MS.Internal.TypeReflector.LookupPropertyBits(xamlMemberInfo.value.Member, $asm02.MS.Internal.BoolPropertyBits.bpbIsAmbient) ? $asm02.MS.Internal.BoolPropertyBits.bpbIsAmbient : $asm02.MS.Internal.BoolPropertyBits.bpbNone);
			bpbBitsChecked.value = (bpbBitsChecked.value | $asm02.MS.Internal.BoolPropertyBits.bpbIsAmbient);
			bpbReturnValues.value = (bpbReturnValues.value | $asm02.MS.Internal.TypeReflector.LookupPropertyBits(xamlMemberInfo.value.Member, $asm02.MS.Internal.BoolPropertyBits.bpbIsObsolete) ? $asm02.MS.Internal.BoolPropertyBits.bpbIsObsolete : $asm02.MS.Internal.BoolPropertyBits.bpbNone);
			bpbBitsChecked.value = (bpbBitsChecked.value | $asm02.MS.Internal.BoolPropertyBits.bpbIsObsolete);
			bpbReturnValues.value = (bpbReturnValues.value | $asm02.MS.Internal.TypeReflector.LookupPropertyBits(xamlMemberInfo.value.Member, $asm02.MS.Internal.BoolPropertyBits.bpbIsPublic) ? $asm02.MS.Internal.BoolPropertyBits.bpbIsPublic : $asm02.MS.Internal.BoolPropertyBits.bpbNone);
			bpbBitsChecked.value = (bpbBitsChecked.value | $asm02.MS.Internal.BoolPropertyBits.bpbIsPublic);
			bpbReturnValues.value = (bpbReturnValues.value | $asm02.MS.Internal.TypeReflector.LookupPropertyBits(xamlMemberInfo.value.Member, $asm02.MS.Internal.BoolPropertyBits.bpbIsReadOnly) ? $asm02.MS.Internal.BoolPropertyBits.bpbIsReadOnly : $asm02.MS.Internal.BoolPropertyBits.bpbNone);
			bpbBitsChecked.value = (bpbBitsChecked.value | $asm02.MS.Internal.BoolPropertyBits.bpbIsReadOnly);
			bpbReturnValues.value = (bpbReturnValues.value | $asm02.MS.Internal.TypeReflector.LookupPropertyBits(xamlMemberInfo.value.Member, $asm02.MS.Internal.BoolPropertyBits.bpbIsStatic) ? $asm02.MS.Internal.BoolPropertyBits.bpbIsStatic : $asm02.MS.Internal.BoolPropertyBits.bpbNone);
			bpbBitsChecked.value = (bpbBitsChecked.value | $asm02.MS.Internal.BoolPropertyBits.bpbIsStatic);
			bpbReturnValues.value = (bpbReturnValues.value | (xamlMemberInfo.value.MemberKind === $asm02.MS.Internal.XamlMemberKind.Attachable) ? $asm02.MS.Internal.BoolPropertyBits.bpbIsAttachable : $asm02.MS.Internal.BoolPropertyBits.bpbNone);
			bpbBitsChecked.value = (bpbBitsChecked.value | $asm02.MS.Internal.BoolPropertyBits.bpbIsAttachable);
			bpbReturnValues.value = (bpbReturnValues.value | (xamlMemberInfo.value.MemberKind === $asm02.MS.Internal.XamlMemberKind.Event) ? $asm02.MS.Internal.BoolPropertyBits.bpbIsEvent : $asm02.MS.Internal.BoolPropertyBits.bpbNone);
			bpbBitsChecked.value = (bpbBitsChecked.value | $asm02.MS.Internal.BoolPropertyBits.bpbIsEvent);
			result = 0;
		}
	} catch ($exception) {
		var arg_125_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForException(arg_125_0);
	}
	return result;
};
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.ResolveTypeName = function (inNamespaceToken, inTypeName, /* ref */ retValue) {
	var str = new JSIL.Variable(null);
	try {
		var assembly = $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._assemblies.get_Item((inNamespaceToken._assemblyHandle.Handle - 1));
		if (inNamespaceToken._namespaceHandle.Handle === 0) {
			if (!(!$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.TryGetTypeWithSpecifiedNamespace(assembly, "System.Windows.Controls", inTypeName, /* ref */ retValue) && 
					!$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.TryGetTypeWithSpecifiedNamespace(assembly, "System.Windows.Data", inTypeName, /* ref */ retValue) && 
					!$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.TryGetTypeWithSpecifiedNamespace(assembly, "System.Windows", inTypeName, /* ref */ retValue) && 
					!$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.TryGetTypeWithSpecifiedNamespace(assembly, "System.Windows.Controls.Primitives", inTypeName, /* ref */ retValue) && 
					!$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.TryGetTypeWithSpecifiedNamespace(assembly, "System.Windows.Automation", inTypeName, /* ref */ retValue) && 
					!$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.TryGetTypeWithSpecifiedNamespace(assembly, "System.Windows.Shapes", inTypeName, /* ref */ retValue) && 
					!$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.TryGetTypeWithSpecifiedNamespace(assembly, "System.Windows.Media.Media3D", inTypeName, /* ref */ retValue) && 
					!$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.TryGetTypeWithSpecifiedNamespace(assembly, "System.Windows.Media.Imaging", inTypeName, /* ref */ retValue) && 
					!$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.TryGetTypeWithSpecifiedNamespace(assembly, "System.Windows.Media.Effects", inTypeName, /* ref */ retValue) && 
					!$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.TryGetTypeWithSpecifiedNamespace(assembly, "System.Windows.Media.Animation", inTypeName, /* ref */ retValue) && 
					!$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.TryGetTypeWithSpecifiedNamespace(assembly, "System.Windows.Media", inTypeName, /* ref */ retValue) && 
					!$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.TryGetTypeWithSpecifiedNamespace(assembly, "System.Windows.Input", inTypeName, /* ref */ retValue) && 
					!$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.TryGetTypeWithSpecifiedNamespace(assembly, "System.Windows.Ink", inTypeName, /* ref */ retValue) && !$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.TryGetTypeWithSpecifiedNamespace(assembly, "System.Windows.Documents", inTypeName, /* ref */ retValue))) {
				var result = 0;
				return result;
			}
		} else if (($asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._namespaceNameMapping.get_Item((inNamespaceToken._assemblyHandle.Handle - 1))).TryGetKey(inNamespaceToken._namespaceHandle.Handle, /* ref */ str)) {
			var type = assembly.GetType$0((str.value + "." + inTypeName));
			if (type !== null) {
				$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetTypeToken$0(type, /* ref */ retValue);
				result = 0;
				return result;
			}
		}
		retValue.value = new $asm02.MS.Internal.XamlTypeToken();
		result = 0;
	} catch ($exception) {
		var arg_16B_0 = $exception;
		retValue.value = new $asm02.MS.Internal.XamlTypeToken();
		result = $asm02.MS.Internal.Error.GetXresultForException(arg_16B_0);
	}
	return result;
};
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.TryGetTypeWithSpecifiedNamespace = function (assembly, namespaceName, typeName, /* ref */ retValue) {
	var name = ((namespaceName + "." + typeName));
	var type = assembly.GetType$0(name);
	if (type !== null) {
		$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetTypeToken$0(type, /* ref */ retValue);
		return true;
	}
	retValue.value = new $asm02.MS.Internal.XamlTypeToken();
	return false;
};
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.ResolvePropertyName = function (sTypeToken, inPropertyName, /* ref */ outProperty, /* ref */ outPropertyTypeToken) {
	var typeToken = new JSIL.Variable(new $asm02.MS.Internal.XamlTypeToken());
	try {
		var typeFromToken = $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetTypeFromToken(sTypeToken.MemberwiseClone());
		if (typeFromToken === null) {
			outProperty.value = new $asm02.MS.Internal.XamlPropertyToken();
			outPropertyTypeToken.value = new $asm02.MS.Internal.XamlTypeToken();
			var result = 0;
		} else {
			var prop = $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.LookupProperty(typeFromToken, inPropertyName).MemberwiseClone();
			if (prop.Member === null) {
				outProperty.value = new $asm02.MS.Internal.XamlPropertyToken();
				outPropertyTypeToken.value = new $asm02.MS.Internal.XamlTypeToken();
				result = 0;
			} else {
				if (sTypeToken._handle.TypeInfoProviderKind === $asm02.MS.Internal.XamlTypeInfoProviderKind.tpkManaged) {
					var declaringType = prop.DeclaringType;
					$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetTypeToken$0(declaringType, /* ref */ typeToken);
					if (typeToken.value._handle.TypeInfoProviderKind !== $asm02.MS.Internal.XamlTypeInfoProviderKind.tpkManaged) {
						$asm02.MS.Internal.XcpImports.XamlSchemaContext_ResolvePropertyName(typeToken.value.MemberwiseClone(), inPropertyName, /* ref */ outProperty, /* ref */ outPropertyTypeToken);
						result = 0;
						return result;
					}
				}
				$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetPropertyToken$1(prop.MemberwiseClone(), /* ref */ outProperty);
				$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetTypeToken$0(prop.MemberType, /* ref */ outPropertyTypeToken);
				result = 0;
			}
		}
	} catch ($exception) {
		var arg_99_0 = $exception;
		outProperty.value = new $asm02.MS.Internal.XamlPropertyToken();
		outPropertyTypeToken.value = new $asm02.MS.Internal.XamlTypeToken();
		result = $asm02.MS.Internal.Error.GetXresultForException(arg_99_0);
	}
	return result;
};
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.ResolveDependencyPropertyName = function (sTypeToken, inPropertyName, /* ref */ outProperty, /* ref */ outPropertyTypeToken) {
	try {
		var typeFromToken = $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetTypeFromToken(sTypeToken);
		if (typeFromToken === null) {
			outProperty.value = new $asm02.MS.Internal.XamlPropertyToken();
			outPropertyTypeToken.value = new $asm02.MS.Internal.XamlTypeToken();
			var result = 0;
		} else {
			var prop = $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.LookupDependencyProperty(typeFromToken, inPropertyName).MemberwiseClone();
			if (prop.DependencyProperty === null) {
				outProperty.value = new $asm02.MS.Internal.XamlPropertyToken();
				outPropertyTypeToken.value = new $asm02.MS.Internal.XamlTypeToken();
				result = 0;
			} else {
				$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetPropertyToken$1(prop.MemberwiseClone(), /* ref */ outProperty);
				$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetTypeToken$0(prop.MemberType, /* ref */ outPropertyTypeToken);
				result = 0;
			}
		}
	} catch ($exception) {
		var arg_57_0 = $exception;
		outProperty.value = new $asm02.MS.Internal.XamlPropertyToken();
		outPropertyTypeToken.value = new $asm02.MS.Internal.XamlTypeToken();
		result = $asm02.MS.Internal.Error.GetXresultForException(arg_57_0);
	}
	return result;
};
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetPropertyToken$2 = function (property) {
	var xamlTypeToken = new JSIL.Variable(new $asm02.MS.Internal.XamlTypeToken());
	if (!((property === null) || !property.IsCoreProperty)) {
		var result = new JSIL.Variable(new $asm02.MS.Internal.XamlPropertyToken($asm02.MS.Internal.XamlTypeInfoProviderKind.tpkNative, property.m_nKnownId));
	} else {
		var customDependencyProperty = JSIL.TryCast(property, $asm02.System.Windows.CustomDependencyProperty);
		if (customDependencyProperty !== null) {
			var typeToken = $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetTypeToken$1(customDependencyProperty._ownerType).MemberwiseClone();
			$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.ResolveDependencyPropertyName(typeToken.MemberwiseClone(), property._name, /* ref */ result, /* ref */ xamlTypeToken);
		} else {
			result.value = new $asm02.MS.Internal.XamlPropertyToken($asm02.MS.Internal.XamlTypeInfoProviderKind.tpkUnknown, 0);
		}
	}
	return result.value;
};
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetTypeName = function (sTypeToken, /* ref */ retName, /* ref */ retNameLength) {
	var type = new JSIL.Variable(null);
	retName.value = System.IntPtr.Zero;
	retNameLength.value = 0;
	try {
		if (!$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._types.TryGetKey(sTypeToken._handle.Handle, /* ref */ type)) {
			var result = -2147467259;
		} else {
			var name = type.value.Name;
			retName.value = $asm02.MS.Internal.FrameworkCallbacks.MarshalStringToNative(name);
			retNameLength.value = name.length;
			result = 0;
		}
	} catch ($exception) {
		var arg_4F_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForException(arg_4F_0);
	}
	return result;
};
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetTypeFullName = function (sTypeToken, /* ref */ retName, /* ref */ retNameLength) {
	var type = new JSIL.Variable(null);
	retName.value = System.IntPtr.Zero;
	retNameLength.value = 0;
	try {
		if (!$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._types.TryGetKey(sTypeToken._handle.Handle, /* ref */ type)) {
			var result = -2147467259;
		} else {
			var fullName = type.value.FullName;
			retName.value = $asm02.MS.Internal.FrameworkCallbacks.MarshalStringToNative(fullName);
			retNameLength.value = fullName.length;
			result = 0;
		}
	} catch ($exception) {
		var arg_4F_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForException(arg_4F_0);
	}
	return result;
};
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetPropertyName = function (sPropertyToken, /* ref */ retName, /* ref */ retNameLength) {
	var xamlMemberInfo = new JSIL.Variable(new $asm02.MS.Internal.XamlMemberInfo());
	retName.value = System.IntPtr.Zero;
	retNameLength.value = 0;
	try {
		if (!$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._properties.TryGetKey(sPropertyToken._handle.Handle, /* ref */ xamlMemberInfo)) {
			var result = -2147467259;
		} else {
			retName.value = $asm02.MS.Internal.FrameworkCallbacks.MarshalStringToNative(xamlMemberInfo.value.Name);
			retNameLength.value = xamlMemberInfo.value.Name.length;
			result = 0;
		}
	} catch ($exception) {
		var arg_54_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForException(arg_54_0);
	}
	return result;
};
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetBaseType = function (sTypeToken, /* ref */ retValue) {
	try {
		var assembly = System.Windows.DependencyObject.Assembly;
		retValue.value = new $asm02.MS.Internal.XamlTypeToken();
		if (!$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._types.TryGetKey(sTypeToken._handle.Handle, /* ref */ baseType)) {
			var result = -2147467259;
		} else {
		__loop0__: 
			while (baseType.value) {
				if (baseType.value.Assembly === assembly) {
					$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetTypeToken$0(baseType.value, /* ref */ retValue);
					if (retValue.value._handle.TypeInfoProviderKind === $asm02.MS.Internal.XamlTypeInfoProviderKind.tpkNative) {
						break __loop0__;
					}
					retValue.value = new $asm02.MS.Internal.XamlTypeToken();
				}
				var baseType = new JSIL.Variable(baseType.value.BaseType);
			}
			result = 0;
		}
	} catch ($exception) {
		var arg_6C_0 = $exception;
		retValue.value = new $asm02.MS.Internal.XamlTypeToken();
		result = $asm02.MS.Internal.Error.GetXresultForException(arg_6C_0);
	}
	return result;
};
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetDeclaringType = function (sPropertyToken, /* ref */ retValue) {
	var xamlMemberInfo = new JSIL.Variable(new $asm02.MS.Internal.XamlMemberInfo());
	try {
		retValue.value = new $asm02.MS.Internal.XamlTypeToken();
		if (!$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._properties.TryGetKey(sPropertyToken._handle.Handle, /* ref */ xamlMemberInfo)) {
			var result = -2147467259;
		} else {
			var declaringType = xamlMemberInfo.value.DeclaringType;
			$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetTypeToken$0(declaringType, /* ref */ retValue);
			result = 0;
		}
	} catch ($exception) {
		var arg_3C_0 = $exception;
		retValue.value = new $asm02.MS.Internal.XamlTypeToken();
		result = $asm02.MS.Internal.Error.GetXresultForException(arg_3C_0);
	}
	return result;
};
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.IsAssignableFrom = function (sDerivedTypeToken, rxtBaseType, /* ref */ retValue) {
	retValue.value = false;
	try {
		var typeFromToken = $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetTypeFromToken(rxtBaseType);
		var typeFromToken2 = $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetTypeFromToken(sDerivedTypeToken);
		if (!((typeFromToken === null) || (typeFromToken2 === null))) {
			retValue.value = typeFromToken.IsAssignableFrom(typeFromToken2);
		}
		var result = 0;
	} catch ($exception) {
		var arg_24_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForException(arg_24_0);
	}
	return result;
};
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetContentProperty = function (sTypeToken, /* ref */ rPropertyToken, /* ref */ rContentPropertyTypeToken) {
	var type = new JSIL.Variable(null);
	try {
		rPropertyToken.value = new $asm02.MS.Internal.XamlPropertyToken();
		rContentPropertyTypeToken.value = new $asm02.MS.Internal.XamlTypeToken();
		if (!$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._types.TryGetKey(sTypeToken._handle.Handle, /* ref */ type)) {
			var result = -2147467259;
		} else {
			var customAttributes = type.value.GetCustomAttributes$1(System.Windows.Markup.ContentPropertyAttribute, true);
			if (customAttributes.length > 0) {
				var name = JSIL.Cast(customAttributes[0], System.Windows.Markup.ContentPropertyAttribute).Name;
				var prop = $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.LookupProperty(type.value, name).MemberwiseClone();
				if (prop.MemberKind !== $asm02.MS.Internal.XamlMemberKind.Property) {
					result = -2147467259;
				} else {
					$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetPropertyToken$1(prop.MemberwiseClone(), /* ref */ rPropertyToken);
					$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetTypeToken$0(prop.MemberType, /* ref */ rContentPropertyTypeToken);
					result = 0;
				}
			} else {
				result = 0;
			}
		}
	} catch ($exception) {
		var arg_92_0 = $exception;
		rPropertyToken.value = new $asm02.MS.Internal.XamlPropertyToken();
		rContentPropertyTypeToken.value = new $asm02.MS.Internal.XamlTypeToken();
		result = $asm02.MS.Internal.Error.GetXresultForException(arg_92_0);
	}
	return result;
};
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetCollectionItemType = function (sCollectionTypeToken, /* ref */ retValue) {
	try {
		retValue.value = new $asm02.MS.Internal.XamlTypeToken();
		var result = -2147467263;
	} catch ($exception) {
		var arg_0F_0 = $exception;
		retValue.value = new $asm02.MS.Internal.XamlTypeToken();
		result = $asm02.MS.Internal.Error.GetXresultForException(arg_0F_0);
	}
	return result;
};
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetTextSyntaxForType = function (sTypeToken, /* ref */ retValue) {
	var type = new JSIL.Variable(null);
	try {
		retValue.value = new $asm02.MS.Internal.XamlTypeToken();
		if (!$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._types.TryGetKey(sTypeToken._handle.Handle, /* ref */ type)) {
			var result = -2147467259;
		} else {
			var type2 = $asm02.MS.Internal.TypeReflector.LookupTypeConverterForType(type.value);
			if (type2 !== null) {
				$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetTypeToken$0(type2, /* ref */ retValue);
			}
			result = 0;
		}
	} catch ($exception) {
		var arg_3E_0 = $exception;
		retValue.value = new $asm02.MS.Internal.XamlTypeToken();
		result = $asm02.MS.Internal.Error.GetXresultForException(arg_3E_0);
	}
	return result;
};
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetTextSyntaxForProperty = function (sPropertyToken, /* ref */ retValue) {
	var member = new JSIL.Variable(new $asm02.MS.Internal.XamlMemberInfo());
	try {
		retValue.value = new $asm02.MS.Internal.XamlTypeToken();
		if (!$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._properties.TryGetKey(sPropertyToken._handle.Handle, /* ref */ member)) {
			var result = -2147467259;
		} else {
			var type = $asm02.MS.Internal.TypeReflector.LookupTypeConverterForProperty(member.value.MemberwiseClone());
			if (type !== null) {
				$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetTypeToken$0(type, /* ref */ retValue);
			}
			result = 0;
		}
	} catch ($exception) {
		var arg_3E_0 = $exception;
		retValue.value = new $asm02.MS.Internal.XamlTypeToken();
		result = $asm02.MS.Internal.Error.GetXresultForException(arg_3E_0);
	}
	return result;
};
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.LookupProperty = function (type, name) {
	var result = new $asm02.MS.Internal.XamlMemberInfo();
	var propertyInfo = null;
	var method = type.GetMethod$4(("Get" + name), (System.Reflection.BindingFlags.FlattenHierarchy | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
	var method2 = type.GetMethod$4(("Set" + name), (System.Reflection.BindingFlags.FlattenHierarchy | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
	try {
		propertyInfo = type.GetProperty$2(name, (System.Reflection.BindingFlags.GetProperty | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.Reflection.AmbiguousMatchException)) {
			propertyInfo = $asm02.MS.Internal.TypeReflector.ResolveAmbiguousProperty$0(type, name);
		} else {
			throw $exception;
		}
	}
	if (!((propertyInfo === null) && 
			(method === null) && (method2 === null))) {
		result._ctor$1(propertyInfo, method2, method);
	} else {
		var event = type.GetEvent$1(name, (System.Reflection.BindingFlags.GetProperty | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
		if (event !== null) {
			result._ctor$0(event);
		}
	}
	return result;
};
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.LookupDependencyProperty = function (type, name) {
	var dependencyProperty = System.Windows.DependencyProperty.QueryRegisteredProperty$0(name, type);
	if (dependencyProperty === null) {
		dependencyProperty = System.Windows.DependencyProperty.LookupCoreProperty(name, type);
		if (dependencyProperty === null) {
			return new $asm02.MS.Internal.XamlMemberInfo();
		}
	}
	return JSIL.New($asm02.MS.Internal.XamlMemberInfo, "_ctor$3", [name, dependencyProperty]);
};
JSIL.OverloadedMethod($asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes, "GetPropertyToken", [
		["GetPropertyToken$0", [System.Reflection.PropertyInfo, JSIL.Reference.Of($asm02.MS.Internal.XamlPropertyToken)]], 
		["GetPropertyToken$1", [$asm02.MS.Internal.XamlMemberInfo, JSIL.Reference.Of($asm02.MS.Internal.XamlPropertyToken)]], 
		["GetPropertyToken$2", [System.Windows.DependencyProperty]]
	]);
JSIL.OverloadedMethod($asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes, "GetTypeToken", [
		["GetTypeToken$0", [System.Type, JSIL.Reference.Of($asm02.MS.Internal.XamlTypeToken)]], 
		["GetTypeToken$1", [System.Type]]
	]);
JSIL.OverloadedMethod($asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes, "GetTypeNamespace", [
		["GetTypeNamespace$0", [$asm02.MS.Internal.XamlAssemblyToken, System.String]], 
		["GetTypeNamespace$1", [System.String, System.String, JSIL.Reference.Of($asm02.MS.Internal.XamlTypeNamespaceToken)]]
	]);
JSIL.MakeProperty($asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes, "InitializeDelegateInstance", 
	$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.get_InitializeDelegateInstance, null);
JSIL.MakeProperty($asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes, "ResolveAssemblyDelegateInstance", 
	$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.get_ResolveAssemblyDelegateInstance, null);
JSIL.MakeProperty($asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes, "GetTypeNamespaceDelegateInstance", 
	$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.get_GetTypeNamespaceDelegateInstance, null);
JSIL.MakeProperty($asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes, "LookupTypeFlagsDelegateInstance", 
	$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.get_LookupTypeFlagsDelegateInstance, null);
JSIL.MakeProperty($asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes, "LookupPropertyFlagsDelegateInstance", 
	$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.get_LookupPropertyFlagsDelegateInstance, null);
JSIL.MakeProperty($asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes, "ResolveTypeNameDelegateInstance", 
	$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.get_ResolveTypeNameDelegateInstance, null);
JSIL.MakeProperty($asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes, "ResolvePropertyNameDelegateInstance", 
	$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.get_ResolvePropertyNameDelegateInstance, null);
JSIL.MakeProperty($asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes, "ResolveDependencyPropertyNameDelegateInstance", 
	$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.get_ResolveDependencyPropertyNameDelegateInstance, null);
JSIL.MakeProperty($asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes, "GetTypeNameDelegateInstance", 
	$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.get_GetTypeNameDelegateInstance, null);
JSIL.MakeProperty($asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes, "GetTypeFullNameDelegateInstance", 
	$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.get_GetTypeFullNameDelegateInstance, null);
JSIL.MakeProperty($asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes, "GetPropertyNameDelegateInstance", 
	$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.get_GetPropertyNameDelegateInstance, null);
JSIL.MakeProperty($asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes, "GetBaseTypeDelegateInstance", 
	$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.get_GetBaseTypeDelegateInstance, null);
JSIL.MakeProperty($asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes, "GetDeclaringTypeDelegateInstance", 
	$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.get_GetDeclaringTypeDelegateInstance, null);
JSIL.MakeProperty($asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes, "IsAssignableFromDelegateInstance", 
	$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.get_IsAssignableFromDelegateInstance, null);
JSIL.MakeProperty($asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes, "GetContentPropertyDelegateInstance", 
	$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.get_GetContentPropertyDelegateInstance, null);
JSIL.MakeProperty($asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes, "GetCollectionItemTypeDelegateInstance", 
	$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.get_GetCollectionItemTypeDelegateInstance, null);
JSIL.MakeProperty($asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes, "GetTextSyntaxForTypeDelegateInstance", 
	$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.get_GetTextSyntaxForTypeDelegateInstance, null);
JSIL.MakeProperty($asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes, "GetTextSyntaxForPropertyDelegateInstance", 
	$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.get_GetTextSyntaxForPropertyDelegateInstance, null);
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._shouldResetOnlyXmlnsDefinitions = false;
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._assemblyNameMapping = null;
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._assemblies = null;
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._namespaceNameMapping = null;
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._assemblyIds = null;
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._types = null;
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._properties = null;
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._uptoNamespaceIndex = 0;
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._initializeDelegate = null;
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._resolveAssemblyDelegate = null;
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._getTypeNamespaceDelegate = null;
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._lookupTypeFlagsDelegate = null;
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._lookupPropertyFlagsDelegate = null;
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._resolveTypeNameDelegate = null;
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._resolvePropertyNameDelegate = null;
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._resolveDependencyPropertyNameDelegate = null;
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._getTypeNameDelegate = null;
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._getTypeFullNameDelegate = null;
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._getPropertyNameDelegate = null;
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._getBaseTypeDelegate = null;
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._getDeclaringTypeDelegate = null;
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._isAssignableFromDelegate = null;
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._getContentPropertyDelegate = null;
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._getCollectionItemTypeDelegate = null;
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._getTextSyntaxForTypeDelegate = null;
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._getTextSyntaxForPropertyDelegate = null;
$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._cctor = function () {
	$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._shouldResetOnlyXmlnsDefinitions = false;
	$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._initializeDelegate = JSIL.Delegate.New("MS.Internal.ManagedTypeInfoProviderRPInvokes/InitializeDelegate", null, $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.Initialize);
	$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._resolveAssemblyDelegate = JSIL.Delegate.New("MS.Internal.ManagedTypeInfoProviderRPInvokes/ResolveAssemblyDelegate", null, $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.ResolveAssembly);
	$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._getTypeNamespaceDelegate = JSIL.Delegate.New("MS.Internal.ManagedTypeInfoProviderRPInvokes/GetTypeNamespaceDelegate", null, $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetTypeNamespace$1);
	$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._lookupTypeFlagsDelegate = JSIL.Delegate.New("MS.Internal.ManagedTypeInfoProviderRPInvokes/LookupTypeFlagsDelegate", null, $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.LookupTypeFlags);
	$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._lookupPropertyFlagsDelegate = JSIL.Delegate.New("MS.Internal.ManagedTypeInfoProviderRPInvokes/LookupPropertyFlagsDelegate", null, $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.LookupPropertyFlags);
	$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._resolveTypeNameDelegate = JSIL.Delegate.New("MS.Internal.ManagedTypeInfoProviderRPInvokes/ResolveTypeNameDelegate", null, $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.ResolveTypeName);
	$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._resolvePropertyNameDelegate = JSIL.Delegate.New("MS.Internal.ManagedTypeInfoProviderRPInvokes/ResolvePropertyNameDelegate", null, $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.ResolvePropertyName);
	$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._resolveDependencyPropertyNameDelegate = JSIL.Delegate.New("MS.Internal.ManagedTypeInfoProviderRPInvokes/ResolveDependencyPropertyNameDelegate", null, $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.ResolveDependencyPropertyName);
	$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._getTypeNameDelegate = JSIL.Delegate.New("MS.Internal.ManagedTypeInfoProviderRPInvokes/GetTypeNameDelegate", null, $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetTypeName);
	$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._getTypeFullNameDelegate = JSIL.Delegate.New("MS.Internal.ManagedTypeInfoProviderRPInvokes/GetTypeFullNameDelegate", null, $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetTypeFullName);
	$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._getPropertyNameDelegate = JSIL.Delegate.New("MS.Internal.ManagedTypeInfoProviderRPInvokes/GetPropertyNameDelegate", null, $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetPropertyName);
	$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._getBaseTypeDelegate = JSIL.Delegate.New("MS.Internal.ManagedTypeInfoProviderRPInvokes/GetBaseTypeDelegate", null, $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetBaseType);
	$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._getDeclaringTypeDelegate = JSIL.Delegate.New("MS.Internal.ManagedTypeInfoProviderRPInvokes/GetDeclaringTypeDelegate", null, $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetDeclaringType);
	$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._isAssignableFromDelegate = JSIL.Delegate.New("MS.Internal.ManagedTypeInfoProviderRPInvokes/IsAssignableFromDelegate", null, $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.IsAssignableFrom);
	$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._getContentPropertyDelegate = JSIL.Delegate.New("MS.Internal.ManagedTypeInfoProviderRPInvokes/GetContentPropertyDelegate", null, $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetContentProperty);
	$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._getCollectionItemTypeDelegate = JSIL.Delegate.New("MS.Internal.ManagedTypeInfoProviderRPInvokes/GetCollectionItemTypeDelegate", null, $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetCollectionItemType);
	$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._getTextSyntaxForTypeDelegate = JSIL.Delegate.New("MS.Internal.ManagedTypeInfoProviderRPInvokes/GetTextSyntaxForTypeDelegate", null, $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetTextSyntaxForType);
	$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes._getTextSyntaxForPropertyDelegate = JSIL.Delegate.New("MS.Internal.ManagedTypeInfoProviderRPInvokes/GetTextSyntaxForPropertyDelegate", null, $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetTextSyntaxForProperty);
};

$asm02.MS.Internal.XamlMemberInfo.prototype._ctor$0 = function (ei) {
	this._member = ei;
	this._memberKind = $asm02.MS.Internal.XamlMemberKind.Event;
	this._getter = null;
	this._setter = null;
	this._hashCode = 0;
	this._name = null;
	this._fullName = null;
	this._dp = null;
};
$asm02.MS.Internal.XamlMemberInfo.prototype._ctor$1 = function (pi, setter, getter) {
	this._memberKind = ((setter === null) && 
		(getter === null)) ? $asm02.MS.Internal.XamlMemberKind.Property : $asm02.MS.Internal.XamlMemberKind.Attachable;
	this._setter = setter;
	this._getter = getter;
	this._member = pi;
	this._hashCode = 0;
	this._name = null;
	this._fullName = null;
	this._dp = null;
};
$asm02.MS.Internal.XamlMemberInfo.prototype._ctor$2 = function (mi) {
	this._memberKind = $asm02.MS.Internal.XamlMemberKind.None;
	if (JSIL.TryCast(mi, System.Reflection.MethodInfo) !== null) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
	}
	this._member = mi;
	this._setter = null;
	this._getter = null;
	this._hashCode = 0;
	this._name = null;
	this._fullName = null;
	this._dp = null;
};
$asm02.MS.Internal.XamlMemberInfo.prototype._ctor$3 = function (name, dp) {
	this._name = name;
	this._dp = dp;
	this._memberKind = $asm02.MS.Internal.XamlMemberKind.DependencyProperty;
	this._setter = null;
	this._getter = null;
	this._hashCode = 0;
	this._fullName = null;
	this._member = null;
};
$asm02.MS.Internal.XamlMemberInfo.prototype.get_Member = function () {
	if (this._member !== null) {
		return this._member;
	}
	if (this._getter === null) {
		return this._setter;
	}
	return this._getter;
};
$asm02.MS.Internal.XamlMemberInfo.prototype.get_MemberKind = function () {
	return this._memberKind;
};
$asm02.MS.Internal.XamlMemberInfo.prototype.get_DependencyProperty = function () {
	return this._dp;
};
$asm02.MS.Internal.XamlMemberInfo.prototype.get_Name = function () {
	if (this._name !== null) {
		return this._name;
	}
	if (this._member !== null) {
		this._name = this._member.Name;
	} else if (this._getter !== null) {
		this._name = this._getter.Name.Substring$0(3);
	}
	return this._name;
};
$asm02.MS.Internal.XamlMemberInfo.prototype.get_FullName = function () {
	if (this._fullName === null) {
		var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
		var declaringType = this.DeclaringType;
		if (declaringType !== null) {
			stringBuilder.Append$2(declaringType.FullName);
			stringBuilder.Append$7(".");
		}
		stringBuilder.Append$2(this.Name);
		this._fullName = stringBuilder.toString();
	}
	return this._fullName;
};
$asm02.MS.Internal.XamlMemberInfo.prototype.get_Getter = function () {
	if (!(this._getter || (this._member === null))) {
		var memberType = this._member.MemberType;
		if (memberType === System.Reflection.MemberTypes.Event) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
		}
		if (memberType !== System.Reflection.MemberTypes.Property) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
		}
		this._getter = JSIL.Cast(this._member, System.Reflection.PropertyInfo).GetGetMethod$0(false);
	}
	return this._getter;
};
$asm02.MS.Internal.XamlMemberInfo.prototype.get_Setter = function () {
	if (!(this._setter || (this._member === null))) {
		var memberType = this._member.MemberType;
		if (memberType !== System.Reflection.MemberTypes.Event) {
			if (memberType === System.Reflection.MemberTypes.Property) {
				this._setter = JSIL.Cast(this._member, System.Reflection.PropertyInfo).GetSetMethod$0(false);
			}
		} else {
			this._setter = JSIL.Cast(this._member, System.Reflection.EventInfo).GetAddMethod$0(false);
		}
	}
	return this._setter;
};
$asm02.MS.Internal.XamlMemberInfo.prototype.SetValue = function (target, value) {
	var setter = this.Setter;
	if (!(this._dp || setter)) {
		throw JSIL.New(System.NotSupportedException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("Parser_SetValue_NoSetter", [this.FullName])]);
	}
	switch (Number(this._memberKind)) {
		case 1: 
			JSIL.Cast(this._member, System.Reflection.PropertyInfo).SetValue$1(target, value, null);
			return;
		case 2: 
			this.Setter.Invoke$1(null, [target, value]);
			return;
		case 3: 
			this.Setter.Invoke$1(target, [value]);
			return;
		case 4: 
			var dependencyObject = JSIL.TryCast(target, System.Windows.DependencyObject);
			if (dependencyObject === null) {
				throw JSIL.New(System.NotSupportedException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("Parser_SetValue_NoSetter", [this.FullName])]);
			}
			dependencyObject.SetValue(this._dp, value);
			return;
		default: 
			return;
	}
};
$asm02.MS.Internal.XamlMemberInfo.prototype.GetValue = function (target) {
	var getter = this.Getter;
	if (!(this._dp || getter)) {
		throw JSIL.New(System.NotSupportedException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("Parser_GetValue_NoGetter", [this.FullName])]);
	}
	switch (Number(this._memberKind)) {
		case 1: 
			return JSIL.Cast(this._member, System.Reflection.PropertyInfo).GetValue$0(target, null);
		case 2: 
			return getter.Invoke$1(null, [target]);
		case 4: 
			var dependencyObject = JSIL.TryCast(target, System.Windows.DependencyObject);
			if (dependencyObject === null) {
				throw JSIL.New(System.NotSupportedException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("Parser_GetValue_NoGetter", [this.FullName])]);
			}
			return dependencyObject.GetValue(this._dp);
	}
	throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
};
$asm02.MS.Internal.XamlMemberInfo.prototype.get_DeclaringType = function () {
	var member = this.Member;
	if (member !== null) {
		return member.DeclaringType;
	}
	if (this._dp === null) {
		return null;
	}
	var customDependencyProperty = JSIL.TryCast(this._dp, $asm02.System.Windows.CustomDependencyProperty);
	if (customDependencyProperty === null) {
		return null;
	}
	return customDependencyProperty._ownerType;
};
$asm02.MS.Internal.XamlMemberInfo.prototype.get_MemberType = function () {
	var member = this.Member;
	var propertyInfo = JSIL.TryCast(member, System.Reflection.PropertyInfo);
	if (propertyInfo !== null) {
		return propertyInfo.PropertyType;
	}
	var eventInfo = JSIL.TryCast(member, System.Reflection.EventInfo);
	if (eventInfo !== null) {
		return eventInfo.EventHandlerType;
	}
	var methodInfo = JSIL.TryCast(member, System.Reflection.MethodInfo);
	if (methodInfo !== null) {
		if (!((methodInfo.ReturnType === null) || (methodInfo.ReturnType === System.Void))) {
			return methodInfo.ReturnType;
		}
		var parameters = methodInfo.GetParameters();
		if (parameters.length === 2) {
			return parameters[1].ParameterType;
		}
	}
	if (this._dp !== null) {
		return this._dp._propertyType;
	}
	throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
};
$asm02.MS.Internal.XamlMemberInfo.prototype.GetHashCode = function () {
	if (this._hashCode !== 0) {
		return this._hashCode;
	}
	var member = this.Member;
	if (member !== null) {
		this._hashCode = member.MetadataToken.GetHashCode();
	}
	if (this._dp !== null) {
		this._hashCode = this._dp.GetHashCode();
	}
	if (this._hashCode === 0) {
		this._hashCode = 1;
	}
	return this._hashCode;
};
$asm02.MS.Internal.XamlMemberInfo.prototype.Equals = function (obj) {
	if (JSIL.TryCast(obj, $asm02.MS.Internal.XamlMemberInfo) === new $asm02.MS.Internal.XamlMemberInfo()) {
		return false;
	}
	if (this._dp !== null) {
		return this.AreDependencyPropertiesEqual(this.DependencyProperty, JSIL.Cast(obj, $asm02.MS.Internal.XamlMemberInfo).DependencyProperty);
	}
	return this.AreMemberInfosEqual(this.Member, JSIL.Cast(obj, $asm02.MS.Internal.XamlMemberInfo).Member);
};
$asm02.MS.Internal.XamlMemberInfo.prototype.AreDependencyPropertiesEqual = function (a, b) {
	if (a === null) {
		return (b === null);
	}
	if (b === null) {
		return false;
	}
	if (a === b) {
		return true;
	}
	var coreDependencyProperty = JSIL.TryCast(a, $asm02.System.Windows.CoreDependencyProperty);
	var coreDependencyProperty2 = JSIL.TryCast(b, $asm02.System.Windows.CoreDependencyProperty);
	return ((coreDependencyProperty !== null) && 
		coreDependencyProperty2 && (coreDependencyProperty.m_nKnownId === coreDependencyProperty2.m_nKnownId));
};
$asm02.MS.Internal.XamlMemberInfo.prototype.AreMemberInfosEqual = function (a, b) {
	if (a === null) {
		return (b === null);
	}
	return (b && 
		(a.DeclaringType === b.DeclaringType) && (a.Name == b.Name));
};
$asm02.MS.Internal.XamlMemberInfo.op_Equality = function (xipi0, xipi1) {
	return xipi0.Equals(xipi1.MemberwiseClone());
};
$asm02.MS.Internal.XamlMemberInfo.op_Inequality = function (xipi0, xipi1) {
	return !$asm02.MS.Internal.XamlMemberInfo.op_Equality(xipi0, xipi1);
};
JSIL.OverloadedMethod($asm02.MS.Internal.XamlMemberInfo.prototype, "_ctor", [
		["_ctor$0", [System.Reflection.EventInfo]], 
		["_ctor$1", [System.Reflection.PropertyInfo, System.Reflection.MethodInfo, System.Reflection.MethodInfo]], 
		["_ctor$2", [System.Reflection.MemberInfo]], 
		["_ctor$3", [System.String, System.Windows.DependencyProperty]]
	]);
JSIL.MakeProperty($asm02.MS.Internal.XamlMemberInfo.prototype, "Member", 
	$asm02.MS.Internal.XamlMemberInfo.prototype.get_Member, null);
JSIL.MakeProperty($asm02.MS.Internal.XamlMemberInfo.prototype, "MemberKind", 
	$asm02.MS.Internal.XamlMemberInfo.prototype.get_MemberKind, null);
JSIL.MakeProperty($asm02.MS.Internal.XamlMemberInfo.prototype, "DependencyProperty", 
	$asm02.MS.Internal.XamlMemberInfo.prototype.get_DependencyProperty, null);
JSIL.MakeProperty($asm02.MS.Internal.XamlMemberInfo.prototype, "Name", 
	$asm02.MS.Internal.XamlMemberInfo.prototype.get_Name, null);
JSIL.MakeProperty($asm02.MS.Internal.XamlMemberInfo.prototype, "FullName", 
	$asm02.MS.Internal.XamlMemberInfo.prototype.get_FullName, null);
JSIL.MakeProperty($asm02.MS.Internal.XamlMemberInfo.prototype, "Getter", 
	$asm02.MS.Internal.XamlMemberInfo.prototype.get_Getter, null);
JSIL.MakeProperty($asm02.MS.Internal.XamlMemberInfo.prototype, "Setter", 
	$asm02.MS.Internal.XamlMemberInfo.prototype.get_Setter, null);
JSIL.MakeProperty($asm02.MS.Internal.XamlMemberInfo.prototype, "DeclaringType", 
	$asm02.MS.Internal.XamlMemberInfo.prototype.get_DeclaringType, null);
JSIL.MakeProperty($asm02.MS.Internal.XamlMemberInfo.prototype, "MemberType", 
	$asm02.MS.Internal.XamlMemberInfo.prototype.get_MemberType, null);
$asm02.MS.Internal.XamlMemberInfo.s_ArrayOfNull = null;
$asm02.MS.Internal.XamlMemberInfo.s_ArrayOfNullNull = null;
$asm02.MS.Internal.XamlMemberInfo.prototype._hashCode = 0;
$asm02.MS.Internal.XamlMemberInfo.prototype._memberKind = 0;
$asm02.MS.Internal.XamlMemberInfo.prototype._name = null;
$asm02.MS.Internal.XamlMemberInfo.prototype._fullName = null;
$asm02.MS.Internal.XamlMemberInfo.prototype._getter = null;
$asm02.MS.Internal.XamlMemberInfo.prototype._setter = null;
$asm02.MS.Internal.XamlMemberInfo.prototype._member = null;
$asm02.MS.Internal.XamlMemberInfo.prototype._dp = null;
$asm02.MS.Internal.XamlMemberInfo._cctor = function () {
	var array = JSIL.Array.New(System.Object, 1);
	$asm02.MS.Internal.XamlMemberInfo.s_ArrayOfNull = array;
	var array2 = JSIL.Array.New(System.Object, 2);
	$asm02.MS.Internal.XamlMemberInfo.s_ArrayOfNullNull = array2;
};

$asm02.MS.Internal.XamlTokenHandle.prototype.toString = function () {
	return System.String.Format("[{0}, {1}]", this.TypeInfoProviderKind, this.Handle);
};
$asm02.MS.Internal.XamlTokenHandle.prototype.GetAsUInt32 = function () {
	return this._handle;
};
$asm02.MS.Internal.XamlTokenHandle.prototype._ctor = function (typeInfoProviderKind, handle) {
	this._handle = ((handle & 268435455) | (Math.floor(typeInfoProviderKind) << 28));
};
$asm02.MS.Internal.XamlTokenHandle.prototype.get_TypeInfoProviderKind = function () {
	return (this._handle >>> 28);
};
$asm02.MS.Internal.XamlTokenHandle.prototype.set_TypeInfoProviderKind = function (value) {
	this._handle = ((this._handle & 268435455) | (Math.floor(value) << 28));
};
$asm02.MS.Internal.XamlTokenHandle.prototype.get_Handle = function () {
	return (this._handle & 268435455);
};
$asm02.MS.Internal.XamlTokenHandle.prototype.set_Handle = function (value) {
	this._handle = ((this._handle & -268435456) | value);
};
JSIL.MakeProperty($asm02.MS.Internal.XamlTokenHandle.prototype, "TypeInfoProviderKind", 
	$asm02.MS.Internal.XamlTokenHandle.prototype.get_TypeInfoProviderKind, $asm02.MS.Internal.XamlTokenHandle.prototype.set_TypeInfoProviderKind);
JSIL.MakeProperty($asm02.MS.Internal.XamlTokenHandle.prototype, "Handle", 
	$asm02.MS.Internal.XamlTokenHandle.prototype.get_Handle, $asm02.MS.Internal.XamlTokenHandle.prototype.set_Handle);
Object.defineProperty($asm02.MS.Internal.XamlTokenHandle, "TypeProviderBitCount", {
		"value": 4}
);
Object.defineProperty($asm02.MS.Internal.XamlTokenHandle, "TypeProviderBitOffset", {
		"value": 28}
);
Object.defineProperty($asm02.MS.Internal.XamlTokenHandle, "HandleMask", {
		"value": 268435455}
);
$asm02.MS.Internal.XamlTokenHandle.prototype._handle = 0;

$asm02.MS.Internal.XamlAssemblyToken.prototype._ctor = function (typeInfoProviderKind, handle) {
	this._handle = new $asm02.MS.Internal.XamlTokenHandle(typeInfoProviderKind, handle);
};

$asm02.MS.Internal.XamlTypeNamespaceToken.prototype._ctor = function (typeInfoProviderKind, assemblyHandle, namespaceHandle) {
	this._assemblyHandle = new $asm02.MS.Internal.XamlTokenHandle(typeInfoProviderKind, assemblyHandle);
	this._namespaceHandle = new $asm02.MS.Internal.XamlTokenHandle(typeInfoProviderKind, namespaceHandle);
};

$asm02.MS.Internal.XamlTypeToken.prototype._ctor = function (typeInfoProviderKind, handle) {
	this._handle = new $asm02.MS.Internal.XamlTokenHandle(typeInfoProviderKind, handle);
};

$asm02.MS.Internal.XamlPropertyToken.prototype._ctor = function (typeInfoProviderKind, handle) {
	this._handle = new $asm02.MS.Internal.XamlTokenHandle(typeInfoProviderKind, handle);
};

System.Windows.Media.Matrix.Create = function (o) {
	if (o !== null) {
		var array = JSIL.Cast(o, System.Array.Of(System.Single));
		if (array.length === 6) {
			return new System.Windows.Media.Matrix(array[0], array[1], array[2], array[3], array[4], array[5]);
		}
	}
	return System.Windows.Media.Matrix.s_identity;
};
System.Windows.Media.Matrix.prototype._ctor = function (m11, m12, m21, m22, offsetX, offsetY) {
	this._m11 = m11;
	this._m12 = m12;
	this._m21 = m21;
	this._m22 = m22;
	this._offsetX = offsetX;
	this._offsetY = offsetY;
	this._type = $asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_UNKNOWN;
	this.DeriveMatrixType();
};
System.Windows.Media.Matrix.prototype.get_M11 = function () {
	if (this._type === 0) {
		return 1;
	}
	return this._m11;
};
System.Windows.Media.Matrix.prototype.set_M11 = function (value) {
	if (this._type === 0) {
		this.SetMatrix(
			value, 
			0, 
			0, 
			1, 
			0, 
			0, 
			$asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_SCALING
		);
		return;
	}
	this._m11 = value;
	if (this._type !== $asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_UNKNOWN) {
		this._type = (this._type | $asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_SCALING);
	}
};
System.Windows.Media.Matrix.prototype.get_M12 = function () {
	if (this._type === 0) {
		return 0;
	}
	return this._m12;
};
System.Windows.Media.Matrix.prototype.set_M12 = function (value) {
	if (this._type === 0) {
		this.SetMatrix(
			1, 
			value, 
			0, 
			1, 
			0, 
			0, 
			$asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_UNKNOWN
		);
		return;
	}
	this._m12 = value;
	this._type = $asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_UNKNOWN;
};
System.Windows.Media.Matrix.prototype.get_M21 = function () {
	if (this._type === 0) {
		return 0;
	}
	return this._m21;
};
System.Windows.Media.Matrix.prototype.set_M21 = function (value) {
	if (this._type === 0) {
		this.SetMatrix(
			1, 
			0, 
			value, 
			1, 
			0, 
			0, 
			$asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_UNKNOWN
		);
		return;
	}
	this._m21 = value;
	this._type = $asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_UNKNOWN;
};
System.Windows.Media.Matrix.prototype.get_M22 = function () {
	if (this._type === 0) {
		return 1;
	}
	return this._m22;
};
System.Windows.Media.Matrix.prototype.set_M22 = function (value) {
	if (this._type === 0) {
		this.SetMatrix(
			1, 
			0, 
			0, 
			value, 
			0, 
			0, 
			$asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_SCALING
		);
		return;
	}
	this._m22 = value;
	if (this._type !== $asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_UNKNOWN) {
		this._type = (this._type | $asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_SCALING);
	}
};
System.Windows.Media.Matrix.prototype.get_OffsetX = function () {
	if (this._type === 0) {
		return 0;
	}
	return this._offsetX;
};
System.Windows.Media.Matrix.prototype.set_OffsetX = function (value) {
	if (this._type === 0) {
		this.SetMatrix(
			1, 
			0, 
			0, 
			1, 
			value, 
			0, 
			$asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_TRANSLATION
		);
		return;
	}
	this._offsetX = value;
	if (this._type !== $asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_UNKNOWN) {
		this._type = (this._type | $asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_TRANSLATION);
	}
};
System.Windows.Media.Matrix.prototype.get_OffsetY = function () {
	if (this._type === 0) {
		return 0;
	}
	return this._offsetY;
};
System.Windows.Media.Matrix.prototype.set_OffsetY = function (value) {
	if (this._type === 0) {
		this.SetMatrix(
			1, 
			0, 
			0, 
			1, 
			0, 
			value, 
			$asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_TRANSLATION
		);
		return;
	}
	this._offsetY = value;
	if (this._type !== $asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_UNKNOWN) {
		this._type = (this._type | $asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_TRANSLATION);
	}
};
System.Windows.Media.Matrix.get_Identity = function () {
	return System.Windows.Media.Matrix.s_identity;
};
System.Windows.Media.Matrix.prototype.get_IsIdentity = function () {
	return ((this._type === 0) || (!((this._m11 !== 1) || 
				(this._m12 !== 0) || 
				(this._m21 !== 0) || 
				(this._m22 !== 1) || 
				(this._offsetX !== 0)) && 
			(this._offsetY === 0)));
};
System.Windows.Media.Matrix.prototype.toString = function () {
	return this.ConvertToString(null, null);
};
System.Windows.Media.Matrix.prototype.ToString = function (provider) {
	return this.ConvertToString(null, provider);
};
System.Windows.Media.Matrix.prototype.IFormattable_ToString = function (format, provider) {
	return this.ConvertToString(format, provider);
};
System.Windows.Media.Matrix.prototype.ConvertToString = function (format, provider) {
	if (this.IsIdentity) {
		return "Identity";
	}
	var numericListSeparator = $asm02.MS.Internal.TokenizerHelper.GetNumericListSeparator(provider);
	return System.String.Format(provider, JSIL.ConcatString.apply(null, JSIL.Array.New(System.String, ["{1:", format, "}{0}{2:", format, "}{0}{3:", format, "}{0}{4:", format, "}{0}{5:", format, "}{0}{6:", format, "}"])), [numericListSeparator, this._m11, this._m12, this._m21, this._m22, this._offsetX, this._offsetY]);
};
System.Windows.Media.Matrix.prototype.Transform = function (point) {
	var result = point;
	this.MultiplyPoint(/* ref */ new JSIL.MemberReference(result, "_x"), /* ref */ new JSIL.MemberReference(result, "_y"));
	return result;
};
System.Windows.Media.Matrix.prototype.GetHashCode = function () {
	if (this.IsDistinguishedIdentity) {
		return 0;
	}
	return (((((this.M11.GetHashCode() ^ this.M12.GetHashCode()) ^ this.M21.GetHashCode()) ^ this.M22.GetHashCode()) ^ this.OffsetX.GetHashCode()) ^ this.OffsetY.GetHashCode());
};
System.Windows.Media.Matrix.prototype.Equals$0 = function (o) {
	if (!((o !== null) && JSIL.TryCast(o, System.Windows.Media.Matrix))) {
		return false;
	}
	var matrix = JSIL.Cast(o, System.Windows.Media.Matrix).MemberwiseClone();
	return System.Windows.Media.Matrix.Equals(this.MemberwiseClone(), matrix.MemberwiseClone());
};
System.Windows.Media.Matrix.prototype.Equals$1 = function (value) {
	return System.Windows.Media.Matrix.Equals(this.MemberwiseClone(), value);
};
System.Windows.Media.Matrix.op_Equality = function (matrix1, matrix2) {
	if (!(!matrix1.IsDistinguishedIdentity && !matrix2.IsDistinguishedIdentity)) {
		return (matrix1.IsIdentity === matrix2.IsIdentity);
	}
	return (!((matrix1.M11 !== matrix2.M11) || 
			(matrix1.M12 !== matrix2.M12) || 
			(matrix1.M21 !== matrix2.M21) || 
			(matrix1.M22 !== matrix2.M22) || 
			(matrix1.OffsetX !== matrix2.OffsetX)) && (matrix1.OffsetY === matrix2.OffsetY));
};
System.Windows.Media.Matrix.op_Inequality = function (matrix1, matrix2) {
	return !System.Windows.Media.Matrix.op_Equality(matrix1, matrix2);
};
System.Windows.Media.Matrix.CreateIdentity = function () {
	var result = new System.Windows.Media.Matrix();
	result.SetMatrix(
		1, 
		0, 
		0, 
		1, 
		0, 
		0, 
		$asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_IDENTITY
	);
	return result;
};
System.Windows.Media.Matrix.prototype.SetMatrix = function (m11, m12, m21, m22, offsetX, offsetY, type) {
	this._m11 = m11;
	this._m12 = m12;
	this._m21 = m21;
	this._m22 = m22;
	this._offsetX = offsetX;
	this._offsetY = offsetY;
	this._type = type;
};
System.Windows.Media.Matrix.prototype.DeriveMatrixType = function () {
	this._type = $asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_IDENTITY;
	if (!((this._m21 === 0) && (this._m12 === 0))) {
		this._type = $asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_UNKNOWN;
		return;
	}
	if (!((this._m11 === 1) && (this._m22 === 1))) {
		this._type = $asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_SCALING;
	}
	if (!((this._offsetX === 0) && (this._offsetY === 0))) {
		this._type = (this._type | $asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_TRANSLATION);
	}
	if (!(this._type & ($asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_SCALING | $asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_TRANSLATION))) {
		this._type = $asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_IDENTITY;
	}
};
System.Windows.Media.Matrix.prototype.MultiplyPoint = function (/* ref */ x, /* ref */ y) {
	switch (Number(this._type)) {
		case 0: 
			return;
		case 1: 
			x.value += this._offsetX;
			y.value += this._offsetY;
			return;
		case 2: 
			x.value *= this._m11;
			y.value *= this._m22;
			return;
		case 3: 
			x.value *= this._m11;
			x.value += this._offsetX;
			y.value *= this._m22;
			y.value += this._offsetY;
			return;
		default: 
			var num = ((y.value * this._m21) + this._offsetX);
			var num2 = ((x.value * this._m12) + this._offsetY);
			x.value *= this._m11;
			x.value += num;
			y.value *= this._m22;
			y.value += num2;
			return;
	}
};
System.Windows.Media.Matrix.Equals = function (matrix1, matrix2) {
	if (!(!matrix1.IsDistinguishedIdentity && !matrix2.IsDistinguishedIdentity)) {
		return (matrix1.IsIdentity === matrix2.IsIdentity);
	}
	return (!(!matrix1.M11.Equals$1(matrix2.M11) || 
			!matrix1.M12.Equals$1(matrix2.M12) || 
			!matrix1.M21.Equals$1(matrix2.M21) || 
			!matrix1.M22.Equals$1(matrix2.M22) || 
			!matrix1.OffsetX.Equals$1(matrix2.OffsetX)) && matrix1.OffsetY.Equals$1(matrix2.OffsetY));
};
System.Windows.Media.Matrix.prototype.get_IsDistinguishedIdentity = function () {
	return (this._type === $asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_IDENTITY);
};
System.Windows.Media.Matrix.prototype.Invert = function () {
	var num = ((this.M11 * this.M22) - (this.M12 * this.M21));
	if (num === 0) {
		return false;
	}
	var matrix = this.MemberwiseClone();
	this.M11 = (matrix.M22 / num);
	this.M12 = ((-1 * matrix.M12) / num);
	this.M21 = ((-1 * matrix.M21) / num);
	this.M22 = (matrix.M11 / num);
	this.OffsetX = (((matrix.OffsetY * matrix.M21) - (matrix.OffsetX * matrix.M22)) / num);
	this.OffsetY = (((matrix.OffsetX * matrix.M12) - (matrix.OffsetY * matrix.M11)) / num);
	return true;
};
JSIL.OverloadedMethod(System.Windows.Media.Matrix.prototype, "Equals", [
		["Equals$0", [System.Object]], 
		["Equals$1", [System.Windows.Media.Matrix]]
	]);
JSIL.MakeProperty(System.Windows.Media.Matrix.prototype, "M11", 
	System.Windows.Media.Matrix.prototype.get_M11, System.Windows.Media.Matrix.prototype.set_M11);
JSIL.MakeProperty(System.Windows.Media.Matrix.prototype, "M12", 
	System.Windows.Media.Matrix.prototype.get_M12, System.Windows.Media.Matrix.prototype.set_M12);
JSIL.MakeProperty(System.Windows.Media.Matrix.prototype, "M21", 
	System.Windows.Media.Matrix.prototype.get_M21, System.Windows.Media.Matrix.prototype.set_M21);
JSIL.MakeProperty(System.Windows.Media.Matrix.prototype, "M22", 
	System.Windows.Media.Matrix.prototype.get_M22, System.Windows.Media.Matrix.prototype.set_M22);
JSIL.MakeProperty(System.Windows.Media.Matrix.prototype, "OffsetX", 
	System.Windows.Media.Matrix.prototype.get_OffsetX, System.Windows.Media.Matrix.prototype.set_OffsetX);
JSIL.MakeProperty(System.Windows.Media.Matrix.prototype, "OffsetY", 
	System.Windows.Media.Matrix.prototype.get_OffsetY, System.Windows.Media.Matrix.prototype.set_OffsetY);
JSIL.MakeProperty(System.Windows.Media.Matrix, "Identity", 
	System.Windows.Media.Matrix.get_Identity, null);
JSIL.MakeProperty(System.Windows.Media.Matrix.prototype, "IsIdentity", 
	System.Windows.Media.Matrix.prototype.get_IsIdentity, null);
JSIL.MakeProperty(System.Windows.Media.Matrix.prototype, "IsDistinguishedIdentity", 
	System.Windows.Media.Matrix.prototype.get_IsDistinguishedIdentity, null);
Object.defineProperty(System.Windows.Media.Matrix, "c_identityHashCode", {
		"value": 0}
);
System.Windows.Media.Matrix.prototype._m11 = 0;
System.Windows.Media.Matrix.prototype._m12 = 0;
System.Windows.Media.Matrix.prototype._m21 = 0;
System.Windows.Media.Matrix.prototype._m22 = 0;
System.Windows.Media.Matrix.prototype._offsetX = 0;
System.Windows.Media.Matrix.prototype._offsetY = 0;
System.Windows.Media.Matrix.prototype._type = 0;
System.Windows.Media.Matrix._cctor = function () {
	System.Windows.Media.Matrix.s_identity = new System.Windows.Media.Matrix();
	System.Windows.Media.Matrix.s_identity = System.Windows.Media.Matrix.CreateIdentity().MemberwiseClone();
};

$asm02.MS.Internal.ModifiedValue.prototype.get_BaseValue = function () {
	return this._baseValue;
};
$asm02.MS.Internal.ModifiedValue.prototype.set_BaseValue = function (value) {
	this._baseValue = value;
};
$asm02.MS.Internal.ModifiedValue.prototype.get_ExpressionValue = function () {
	return this._expressionValue;
};
$asm02.MS.Internal.ModifiedValue.prototype.set_ExpressionValue = function (value) {
	this._expressionValue = value;
};
$asm02.MS.Internal.ModifiedValue.prototype.get_AnimatedValue = function () {
	return this._animatedValue;
};
$asm02.MS.Internal.ModifiedValue.prototype.set_AnimatedValue = function (value) {
	this._animatedValue = value;
};
$asm02.MS.Internal.ModifiedValue.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
JSIL.MakeProperty($asm02.MS.Internal.ModifiedValue.prototype, "BaseValue", 
	$asm02.MS.Internal.ModifiedValue.prototype.get_BaseValue, $asm02.MS.Internal.ModifiedValue.prototype.set_BaseValue);
JSIL.MakeProperty($asm02.MS.Internal.ModifiedValue.prototype, "ExpressionValue", 
	$asm02.MS.Internal.ModifiedValue.prototype.get_ExpressionValue, $asm02.MS.Internal.ModifiedValue.prototype.set_ExpressionValue);
JSIL.MakeProperty($asm02.MS.Internal.ModifiedValue.prototype, "AnimatedValue", 
	$asm02.MS.Internal.ModifiedValue.prototype.get_AnimatedValue, $asm02.MS.Internal.ModifiedValue.prototype.set_AnimatedValue);
$asm02.MS.Internal.ModifiedValue.prototype._baseValue = null;
$asm02.MS.Internal.ModifiedValue.prototype._expressionValue = null;
$asm02.MS.Internal.ModifiedValue.prototype._animatedValue = null;

$asm02.MS.Internal.NativeObjectSafeHandle.prototype.ReleaseHandle = function () {
	if (!this.IsInvalid) {
		$asm02.MS.Internal.ManagedPeerTable.TryRemove(this.handle);
		$asm02.MS.Internal.XcpImports.FinalizerReleaseMNative(this.handle, Math.floor(this.NativeObjectType));
		this.handle = System.IntPtr.Zero;
	}
	return true;
};
$asm02.MS.Internal.NativeObjectSafeHandle.prototype.get_IsInvalid = function () {
	return System.IntPtr.op_Equality(this.handle, System.IntPtr.Zero);
};
$asm02.MS.Internal.NativeObjectSafeHandle.prototype.get_NativeObject = function () {
	if (!this.IsInvalid) {
		return this.handle;
	}
	if ($asm02.MS.Internal.JoltHelper.m_customCLR) {
		throw JSIL.New(System.ObjectDisposedException, "_ctor$1", ["NativeObject"]);
	}
	throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
};
$asm02.MS.Internal.NativeObjectSafeHandle.prototype.set_NativeObject = function (value) {
	this.handle = value;
};
$asm02.MS.Internal.NativeObjectSafeHandle.prototype.get_NativeObjectType = function () {
	return this.m_nativeObjectType;
};
$asm02.MS.Internal.NativeObjectSafeHandle.prototype.set_NativeObjectType = function (value) {
	this.m_nativeObjectType = value;
};
$asm02.MS.Internal.NativeObjectSafeHandle.ValidateNativePtr = function (nativePtr) {
	if (nativePtr !== null) {
		return;
	}
	if ($asm02.MS.Internal.JoltHelper.m_customCLR) {
		throw JSIL.New(System.ObjectDisposedException, "_ctor$1", ["NativeObject"]);
	}
	throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
};
JSIL.MakeProperty($asm02.MS.Internal.NativeObjectSafeHandle.prototype, "IsInvalid", 
	$asm02.MS.Internal.NativeObjectSafeHandle.prototype.get_IsInvalid, null);
JSIL.MakeProperty($asm02.MS.Internal.NativeObjectSafeHandle.prototype, "NativeObject", 
	$asm02.MS.Internal.NativeObjectSafeHandle.prototype.get_NativeObject, $asm02.MS.Internal.NativeObjectSafeHandle.prototype.set_NativeObject);
JSIL.MakeProperty($asm02.MS.Internal.NativeObjectSafeHandle.prototype, "NativeObjectType", 
	$asm02.MS.Internal.NativeObjectSafeHandle.prototype.get_NativeObjectType, $asm02.MS.Internal.NativeObjectSafeHandle.prototype.set_NativeObjectType);
$asm02.MS.Internal.NativeObjectSafeHandle.prototype.m_nativeObjectType = 0;

System.Collections.Specialized.NotifyCollectionChangedEventArgs.prototype._ctor$0 = function (action) {
	this._newStartingIndex = -1;
	this._oldStartingIndex = -1;
	System.EventArgs.prototype._ctor.call(this);
	if (action !== System.Collections.Specialized.NotifyCollectionChangedAction.Reset) {
		var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
		stringBuilder.AppendFormat$0($asm02.System.Windows.Resx.GetString$2("NotifyCollectionChangedEventArgs_UnSupportedConstructorAction"), [System.Collections.Specialized.NotifyCollectionChangedAction.Reset]);
		throw JSIL.New(System.NotSupportedException, "_ctor$1", [stringBuilder.toString()]);
	}
	this._action = action;
};
System.Collections.Specialized.NotifyCollectionChangedEventArgs.prototype._ctor$1 = function (action, changedItem, index) {
	this._newStartingIndex = -1;
	this._oldStartingIndex = -1;
	System.EventArgs.prototype._ctor.call(this);
	if (!(!JSIL.Cast(action, System.Boolean) || (action === System.Collections.Specialized.NotifyCollectionChangedAction.Remove))) {
		throw JSIL.New(System.NotSupportedException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("NotifyCollectionChangedEventArgs_ConstructorOnlySupportsEitherAddOrRemove")]);
	}
	this._action = action;
	if (!JSIL.Cast(action, System.Boolean)) {
		this._newItems = [changedItem];
		this._newStartingIndex = index;
		return;
	}
	this._oldItems = [changedItem];
	this._oldStartingIndex = index;
};
System.Collections.Specialized.NotifyCollectionChangedEventArgs.prototype._ctor$2 = function (action, newItem, oldItem, index) {
	this._newStartingIndex = -1;
	this._oldStartingIndex = -1;
	System.EventArgs.prototype._ctor.call(this);
	if (action !== System.Collections.Specialized.NotifyCollectionChangedAction.Replace) {
		var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
		stringBuilder.AppendFormat$0($asm02.System.Windows.Resx.GetString$2("NotifyCollectionChangedEventArgs_UnSupportedConstructorAction"), [System.Collections.Specialized.NotifyCollectionChangedAction.Replace]);
		throw JSIL.New(System.NotSupportedException, "_ctor$1", [stringBuilder.toString()]);
	}
	this._action = action;
	this._newItems = [newItem];
	this._oldItems = [oldItem];
	this._newStartingIndex = index;
};
System.Collections.Specialized.NotifyCollectionChangedEventArgs.prototype.get_Action = function () {
	return this._action;
};
System.Collections.Specialized.NotifyCollectionChangedEventArgs.prototype.get_NewItems = function () {
	return this._newItems;
};
System.Collections.Specialized.NotifyCollectionChangedEventArgs.prototype.get_OldItems = function () {
	return this._oldItems;
};
System.Collections.Specialized.NotifyCollectionChangedEventArgs.prototype.get_NewStartingIndex = function () {
	return this._newStartingIndex;
};
System.Collections.Specialized.NotifyCollectionChangedEventArgs.prototype.get_OldStartingIndex = function () {
	return this._oldStartingIndex;
};
JSIL.OverloadedMethod(System.Collections.Specialized.NotifyCollectionChangedEventArgs.prototype, "_ctor", [
		["_ctor$0", [System.Collections.Specialized.NotifyCollectionChangedAction]], 
		["_ctor$1", [System.Collections.Specialized.NotifyCollectionChangedAction, System.Object, System.Int32]], 
		["_ctor$2", [System.Collections.Specialized.NotifyCollectionChangedAction, System.Object, System.Object, System.Int32]]
	]);
JSIL.MakeProperty(System.Collections.Specialized.NotifyCollectionChangedEventArgs.prototype, "Action", 
	System.Collections.Specialized.NotifyCollectionChangedEventArgs.prototype.get_Action, null);
JSIL.MakeProperty(System.Collections.Specialized.NotifyCollectionChangedEventArgs.prototype, "NewItems", 
	System.Collections.Specialized.NotifyCollectionChangedEventArgs.prototype.get_NewItems, null);
JSIL.MakeProperty(System.Collections.Specialized.NotifyCollectionChangedEventArgs.prototype, "OldItems", 
	System.Collections.Specialized.NotifyCollectionChangedEventArgs.prototype.get_OldItems, null);
JSIL.MakeProperty(System.Collections.Specialized.NotifyCollectionChangedEventArgs.prototype, "NewStartingIndex", 
	System.Collections.Specialized.NotifyCollectionChangedEventArgs.prototype.get_NewStartingIndex, null);
JSIL.MakeProperty(System.Collections.Specialized.NotifyCollectionChangedEventArgs.prototype, "OldStartingIndex", 
	System.Collections.Specialized.NotifyCollectionChangedEventArgs.prototype.get_OldStartingIndex, null);
System.Collections.Specialized.NotifyCollectionChangedEventArgs.prototype._action = 0;
System.Collections.Specialized.NotifyCollectionChangedEventArgs.prototype._newItems = null;
System.Collections.Specialized.NotifyCollectionChangedEventArgs.prototype._oldItems = null;
System.Collections.Specialized.NotifyCollectionChangedEventArgs.prototype._newStartingIndex = 0;
System.Collections.Specialized.NotifyCollectionChangedEventArgs.prototype._oldStartingIndex = 0;

$asm02.MS.Internal.FrameworkCallbacks.Initialize = function () {
	if ($asm02.MS.Internal.FrameworkCallbacks._callbacksSet) {
		return 0;
	}
	$asm02.MS.Internal.FrameworkCallbacks._callbacksSet = true;
	return $asm02.MS.Internal.XcpImports.SetFrameworkCallbacksNative(
		$asm02.MS.Internal.JoltHelper.Context, 
		System.Threading.Thread.CurrentThread.CurrentCulture.Name, 
		$asm02.MS.Internal.FrameworkCallbacks._createUnknownObjectDelegate, 
		$asm02.MS.Internal.FrameworkCallbacks._createKnownObjectDelegate, 
		$asm02.MS.Internal.FrameworkCallbacks._createWrapperObjectDelegate, 
		$asm02.MS.Internal.FrameworkCallbacks._invalidatePropertyDelegate, 
		$asm02.MS.Internal.FrameworkCallbacks._setPropertyAttributeDelegate, 
		$asm02.MS.Internal.FrameworkCallbacks._setEventAttributeDelegate, 
		$asm02.MS.Internal.FrameworkCallbacks._setPropertyDelegate, 
		$asm02.MS.Internal.FrameworkCallbacks._checkPeerTypeDelegate, 
		$asm02.MS.Internal.FrameworkCallbacks._setContentDelegate, 
		$asm02.MS.Internal.FrameworkCallbacks._getTypeFlagsDelegate, 
		$asm02.MS.Internal.FrameworkCallbacks._getRootAssemblyNameDelegate, 
		$asm02.MS.Internal.FrameworkCallbacks._supportInitializeEndInitDelegate, 
		$asm02.MS.Internal.FrameworkCallbacks._shutdownAllPeersDelegate, 
		$asm02.MS.Internal.FrameworkCallbacks._peerTreeUpdateDelegate, 
		$asm02.MS.Internal.FrameworkCallbacks._createManagedPeerDelegate, 
		$asm02.MS.Internal.FrameworkCallbacks._unpegManagedPeerNoRefDelegate, 
		$asm02.MS.Internal.FrameworkCallbacks._pegManagedPeerNoRefDelegate, 
		$asm02.MS.Internal.FrameworkCallbacks._loadAssemblyDelegate, 
		$asm02.MS.Internal.FrameworkCallbacks._loadAssemblyNativeDelegate, 
		$asm02.MS.Internal.FrameworkCallbacks._fireEventDelegate, 
		$asm02.MS.Internal.FrameworkCallbacks._pegManagedPeerDelegate, 
		$asm02.MS.Internal.FrameworkCallbacks._unpegManagedPeerDelegate, 
		$asm02.MS.Internal.FrameworkCallbacks._setCultureDelegate, 
		$asm02.MS.Internal.FrameworkCallbacks._getResourceFromAssemblyDelegate, 
		$asm02.MS.Internal.FrameworkCallbacks._setBindingForObjectDelegate, 
		$asm02.MS.Internal.FrameworkCallbacks._frameworkElement_OnApplyTemplateDelegate, 
		$asm02.MS.Internal.FrameworkCallbacks._control_GetBuiltInStyleDelegate, 
		$asm02.MS.Internal.FrameworkCallbacks._raiseEventDelegate, 
		$asm02.MS.Internal.FrameworkCallbacks._setTemplateBinding, 
		$asm02.MS.Internal.FrameworkCallbacks._setTemplateBindingCustomToCore, 
		$asm02.MS.Internal.FrameworkCallbacks._setTemplateBindingCoreToCustom, 
		$asm02.MS.Internal.FrameworkCallbacks._setTemplateBindingCustomToCustom, 
		$asm02.MS.Internal.FrameworkCallbacks._displayMemberTemplate_BindText, 
		$asm02.MS.Internal.FrameworkCallbacks._itemsControl_ClearVisualChildren, 
		$asm02.MS.Internal.FrameworkCallbacks._itemsControl_DisplayMemberPathChanged, 
		$asm02.MS.Internal.FrameworkCallbacks._itemsControl_RecreateVisualChildren, 
		$asm02.MS.Internal.FrameworkCallbacks._itemsControl_NotifyAllItemsAdded, 
		$asm02.MS.Internal.FrameworkCallbacks._itemsControl_SetItemCollection, 
		$asm02.MS.Internal.FrameworkCallbacks._resolveTypeNameDelegate, 
		$asm02.MS.Internal.FrameworkCallbacks._ensureIsObjectOfType, 
		$asm02.MS.Internal.FrameworkCallbacks._typeIsAssignableFrom, 
		$asm02.MS.Internal.FrameworkCallbacks._measureOverride, 
		$asm02.MS.Internal.FrameworkCallbacks._arrangeOverride, 
		$asm02.MS.Internal.FrameworkCallbacks._updateResourceDelegate, 
		$asm02.MS.Internal.FrameworkCallbacks._createBindingExtensionDelegate, 
		$asm02.MS.Internal.FrameworkCallbacks._onCreateAutomationPeer, 
		$asm02.MS.Internal.FrameworkCallbacks._getAutomationPeerStringValue, 
		$asm02.MS.Internal.FrameworkCallbacks._getAutomationPeerIntValue, 
		$asm02.MS.Internal.FrameworkCallbacks._getAutomationPeerPointValue, 
		$asm02.MS.Internal.FrameworkCallbacks._getAutomationPeerRectValue, 
		$asm02.MS.Internal.FrameworkCallbacks._getAutomationPeerAPValue, 
		$asm02.MS.Internal.FrameworkCallbacks._callAutomationPeerMethod, 
		$asm02.MS.Internal.FrameworkCallbacks._getAutomationPeerChildrenMethod, 
		$asm02.MS.Internal.FrameworkCallbacks._automationPeerGetPattern, 
		$asm02.MS.Internal.FrameworkCallbacks._uiaPatternInvoke, 
		$asm02.MS.Internal.FrameworkCallbacks._uiaTextRangeInvoke, 
		$asm02.MS.Internal.FrameworkCallbacks._setTemplateEventRoot, 
		$asm02.MS.Internal.FrameworkCallbacks._getTemplateEventRoot, 
		$asm02.MS.Internal.FrameworkCallbacks._dependencyObject_EnterImplDelegate, 
		$asm02.MS.Internal.FrameworkCallbacks._dependencyObject_LeaveImplDelegate, 
		$asm02.MS.Internal.FrameworkCallbacks._triggerGCCollect, 
		$asm02.MS.Internal.FrameworkCallbacks._mediaStreamSource_OpenMedia, 
		$asm02.MS.Internal.FrameworkCallbacks._mediaStreamSource_CloseMedia, 
		$asm02.MS.Internal.FrameworkCallbacks._mediaStreamSource_Seek, 
		$asm02.MS.Internal.FrameworkCallbacks._mediaStreamSource_GetSample, 
		$asm02.MS.Internal.FrameworkCallbacks._mediaStreamSource_GetDiagnostic, 
		$asm02.MS.Internal.FrameworkCallbacks._mediaStreamSource_SwitchMediaStream, 
		$asm02.MS.Internal.FrameworkCallbacks._mediaStreamSource_GetAudioBufferLength, 
		$asm02.MS.Internal.FrameworkCallbacks._processMarkupExtensionDelegate, 
		$asm02.MS.Internal.FrameworkCallbacks._getCustomTypeIDFromObjectDelegate, 
		$asm02.MS.Internal.FrameworkCallbacks._getCustomTypeFullNameDelegate, 
		$asm02.MS.Internal.FrameworkCallbacks._getCustomPropertyIDDelegate, 
		$asm02.MS.Internal.FrameworkCallbacks._hasManagedNameProperty, 
		$asm02.MS.Internal.FrameworkCallbacks._getCustomPropertyDelegate, 
		$asm02.MS.Internal.FrameworkCallbacks._setCustomPropertyDelegate, 
		$asm02.MS.Internal.FrameworkCallbacks._setAnimatedValueDelegate, 
		$asm02.MS.Internal.FrameworkCallbacks._clearAnimatedValueDelegate, 
		$asm02.MS.Internal.FrameworkCallbacks._getTileLayerUrlDelegate, 
		$asm02.MS.Internal.FrameworkCallbacks._getTileLayerCountDelegate, 
		$asm02.MS.Internal.FrameworkCallbacks._getMSITileSourceInitParamsDelegate, 
		$asm02.MS.Internal.FrameworkCallbacks._getMaxTileBlendTimeDelegate, 
		$asm02.MS.Internal.FrameworkCallbacks._contentControl_OnContentChanged, 
		$asm02.MS.Internal.FrameworkCallbacks._isCustomEventDelegate, 
		$asm02.MS.Internal.FrameworkCallbacks._textBox_EnableScrollViewerIntegration, 
		$asm02.MS.Internal.FrameworkCallbacks._textBox_SetScrollOffsetOnScrollViewer, 
		$asm02.MS.Internal.FrameworkCallbacks._textBox_TextWrappingChanged, 
		$asm02.MS.Internal.FrameworkCallbacks._textBox_GetViewportSize, 
		$asm02.MS.Internal.FrameworkCallbacks._navigationHelper_Navigate, 
		$asm02.MS.Internal.FrameworkCallbacks._hyperlink_OnClick, 
		$asm02.MS.Internal.FrameworkCallbacks._visualStateHelper_ChangeVisualState, 
		$asm02.MS.Internal.FrameworkCallbacks._error_ClearException, 
		$asm02.MS.Internal.FrameworkCallbacks._error_GetExceptionText, 
		$asm02.MS.Internal.FrameworkCallbacks._error_CallApplicationUEHandler, 
		$asm02.MS.Internal.FrameworkCallbacks._mediaElement_AcquireLicenseBegin, 
		$asm02.MS.Internal.FrameworkCallbacks._mediaElement_AcquireLicenseAbort, 
		$asm02.MS.Internal.FrameworkCallbacks._licenseAcquirer_AbortComplete, 
		$asm02.MS.Internal.FrameworkCallbacks._licenseAcquirer_DomainJoinRequired, 
		$asm02.MS.Internal.FrameworkCallbacks._licenseAcquirer_Complete, 
		$asm02.MS.Internal.FrameworkCallbacks._licenseAcquirer_ChallengeGenerated, 
		$asm02.MS.Internal.FrameworkCallbacks._clearPropertyDelegate, 
		$asm02.MS.Internal.FrameworkCallbacks._popup_OnChildChanged, 
		$asm02.MS.Internal.FrameworkCallbacks._popup_AddManagedPeerReference, 
		$asm02.MS.Internal.FrameworkCallbacks._popup_RemoveManagedPeerReference, 
		$asm02.MS.Internal.FrameworkCallbacks._getCustomAttachedPropertyID, 
		$asm02.MS.Internal.FrameworkCallbacks._dependencyObject_setPeerReferenceToProperty, 
		$asm02.MS.Internal.FrameworkCallbacks._dependencyObject_addPeerReferenceToItemDelegate, 
		$asm02.MS.Internal.FrameworkCallbacks._dependencyObject_removePeerReferenceToItemDelegate, 
		$asm02.MS.Internal.FrameworkCallbacks._setRelativeSourceDelegate, 
		$asm02.MS.Internal.FrameworkCallbacks._dependencyObject_getManagedReferenceDelegate, 
		$asm02.MS.Internal.FrameworkCallbacks._dependencyObject_storeManagedReferenceToValueDelegate, 
		$asm02.MS.Internal.FrameworkCallbacks._easingFunction_easeDelegate, 
		$asm02.MS.Internal.FrameworkCallbacks._effect_getEffectMapping, 
		$asm02.MS.Internal.FrameworkCallbacks._effect_mapPoint, 
		$asm02.MS.Internal.FrameworkCallbacks._effect_mapPointInverse, 
		$asm02.MS.Internal.FrameworkCallbacks._effect_mapRect, 
		$asm02.MS.Internal.FrameworkCallbacks._effect_mapRectInverse, 
		$asm02.MS.Internal.FrameworkCallbacks._isoStorageIncreaseQuotaToDelegate, 
		$asm02.MS.Internal.FrameworkCallbacks._richTextBox_EnableScrollViewerIntegration, 
		$asm02.MS.Internal.FrameworkCallbacks._richTextBox_GetViewportSize, 
		$asm02.MS.Internal.FrameworkCallbacks._richTextBox_TextWrappingChanged, 
		$asm02.MS.Internal.FrameworkCallbacks._richTextBox_Clipboard_Element, 
		$asm02.MS.Internal.FrameworkCallbacks._richTextBox_Clipboard_String, 
		$asm02.MS.Internal.FrameworkCallbacks._richTextBox_Clipboard_End, 
		$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.InitializeDelegateInstance, 
		$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.ResolveAssemblyDelegateInstance, 
		$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetTypeNamespaceDelegateInstance, 
		$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.LookupTypeFlagsDelegateInstance, 
		$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.LookupPropertyFlagsDelegateInstance, 
		$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.ResolveTypeNameDelegateInstance, 
		$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.ResolvePropertyNameDelegateInstance, 
		$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.ResolveDependencyPropertyNameDelegateInstance, 
		$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetTypeNameDelegateInstance, 
		$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetTypeFullNameDelegateInstance, 
		$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetPropertyNameDelegateInstance, 
		$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetBaseTypeDelegateInstance, 
		$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetDeclaringTypeDelegateInstance, 
		$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.IsAssignableFromDelegateInstance, 
		$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetContentPropertyDelegateInstance, 
		$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetCollectionItemTypeDelegateInstance, 
		$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetTextSyntaxForTypeDelegateInstance, 
		$asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetTextSyntaxForPropertyDelegateInstance, 
		$asm02.MS.Internal.XamlManagedRuntimeRPInvokes.CreateInstanceDelegateInstance, 
		$asm02.MS.Internal.XamlManagedRuntimeRPInvokes.CreateFromValueDelegateInstance, 
		$asm02.MS.Internal.XamlManagedRuntimeRPInvokes.CreateFromXmlTextDelegateInstance, 
		$asm02.MS.Internal.XamlManagedRuntimeRPInvokes.GetValueDelegateInstance, 
		$asm02.MS.Internal.XamlManagedRuntimeRPInvokes.SetValueDelegateInstance, 
		$asm02.MS.Internal.XamlManagedRuntimeRPInvokes.AddDelegateInstance, 
		$asm02.MS.Internal.XamlManagedRuntimeRPInvokes.AddToDictionaryDelegateInstance, 
		$asm02.MS.Internal.FrameworkCallbacks._xamlSchemaContext_EnsureManagedAssemblyAttributesLoaded, 
		$asm02.MS.Internal.FrameworkCallbacks._window_FireClosingEvent, 
		$asm02.MS.Internal.FrameworkCallbacks._isWellFormedUriStringDelegateInstance, 
		$asm02.MS.Internal.FrameworkCallbacks._getCollectionForDependencyObjectCollection
	);
};
$asm02.MS.Internal.FrameworkCallbacks.CreateUnknownObject = function (assemblyName, typeName, nativeRootPeer, initializationString, /* ref */ customTypeId, /* ref */ coreTypeId, /* ref */ typeFlags, /* ref */ nativePeer) {
	nativePeer.value = System.IntPtr.Zero;
	customTypeId.value = 0;
	coreTypeId.value = 0;
	typeFlags.value = 0;
	try {
		var type = null;
		try {
			type = $asm02.MS.Internal.FrameworkCallbacks.SafeGetTypeFor(assemblyName, typeName, nativeRootPeer, true);
		} catch ($exception) {
			if (JSIL.CheckType($exception, System.Collections.Generic.KeyNotFoundException)) {
				var result = -2146498341;
				return result;
			} else {
				throw $exception;
			}
		}
		if (type === null) {
			result = -2146498354;
		} else {
			customTypeId.value = $asm02.MS.Internal.TypeProxy.RegisterType(type);
			coreTypeId.value = $asm02.MS.Internal.FrameworkCallbacks.GetCoreTypeId(type);
			typeFlags.value = Math.floor($asm02.MS.Internal.TypeProxy.GetTypeFlags$0(type));
			result = $asm02.MS.Internal.FrameworkCallbacks.CreateKnownObject(
				nativeRootPeer, 
				customTypeId.value, 
				initializationString, 
				/* ref */ nativePeer, 
				0
			);
		}
	} catch ($exception) {
		var arg_65_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForException(arg_65_0);
	}
	return result;
};
$asm02.MS.Internal.FrameworkCallbacks.CreateKnownObject = function (nativeRootPeer, customTypeId, initializationString, /* ref */ nativePeer, isCreatedByParser) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				nativePeer.value = System.IntPtr.Zero;
				var flag = false;
				try {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								try {
									var __label2__ = "__entry2__";
								__step2__: 
									while (true) {
										switch (__label2__) {
											case "__entry2__":
												var obj = null;
												flag = $asm02.MS.Internal.JoltHelper.EnsureSynchronizationContext();
												try {
													var __label3__ = "__entry3__";
												__step3__: 
													while (true) {
														switch (__label3__) {
															case "__entry3__":
																if (!System.String.IsNullOrEmpty(initializationString)) {
																	var type = $asm02.MS.Internal.TypeProxy.QueryRegisteredType(customTypeId);
																	if (!type.IsEnum) {
																		var typeConverterForType = $asm02.MS.Internal.FrameworkCallbacks.GetTypeConverterForType$1(type, true);
																		if (typeConverterForType.CanConvertFrom$0(System.String)) {
																			try {
																				obj = typeConverterForType.ConvertFrom$1(null, $asm02.MS.Internal.FrameworkCallbacks.EnglishUSCulture, initializationString);
																				__label3__ = "IL_98";
																				continue __step3__;
																			} catch ($exception) {
																				if (JSIL.CheckType($exception, System.Windows.Markup.XamlParseException)) {
																					var result = -2146498340;
																					return result;
																				} else {
																					throw $exception;
																				}
																			}
																		}
																		result = -2146498340;
																		return result;
																	}
																	obj = System.Enum.Parse(type, initializationString, true);
																} else {
																	obj = $asm02.MS.Internal.TypeProxy.CreateInstance(customTypeId);
																	if (isCreatedByParser !== 0) {
																		var supportInitialize = JSIL.TryCast(obj, System.ComponentModel.ISupportInitialize);
																		if (supportInitialize !== null) {
																			supportInitialize.ISupportInitialize_BeginInit();
																		}
																	}
																}
																__label3__ = "IL_98";
																continue __step3__;
																break;
															case "IL_98":
																if (obj === null) {
																	result = -2146498354;
																	return result;
																}
																break __step3__;
														}
													}
												} catch ($exception) {
													if (JSIL.CheckType($exception, System.ArgumentOutOfRangeException)) {
														var arg_A6_0 = $exception;
														result = $asm02.MS.Internal.Error.GetXresultForException(arg_A6_0);
														return result;
													} else {
														throw $exception;
													}
												}
												var managedPeer = $asm02.MS.Internal.ManagedObjectReference.ConditionalWrap(obj);
												var dependencyObject = JSIL.TryCast(managedPeer, System.Windows.DependencyObject);
												if (dependencyObject !== null) {
													dependencyObject.PegManagedPeerNoRef();
												}
												nativePeer.value = managedPeer.IManagedPeerBase_NativeObject;
												$asm02.MS.Internal.XcpImports.AddRefNativeObject$0(managedPeer);
												break __step2__;
										}
									}
								} catch ($exception) {
									var arg_E5_0 = $exception;
									result = $asm02.MS.Internal.Error.GetXresultForUserException(arg_E5_0);
									return result;
								}
								break __step1__;
						}
					}
				} finally {
					if (flag) {
						$asm02.MS.Internal.JoltHelper.RestoreSynchronizationContext();
					}
				}
				return 0;
				break __step0__;
		}
	}
};
$asm02.MS.Internal.FrameworkCallbacks.CreateWrapperObject = function (nativePeer, typeIndex) {
	try {
		System.Windows.DependencyObject.StaticNativePointer = nativePeer;
		try {
			var coreWrapper = $asm02.MS.Internal.CoreTypes.GetCoreWrapper(typeIndex);
			coreWrapper.PegManagedPeerNoRef();
		} finally {
			System.Windows.DependencyObject.StaticNativePointer = System.IntPtr.Zero;
		}
		var result = (coreWrapper === null) ? -2146498353 : 0;
	} catch ($exception) {
		var arg_2E_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForUserException(arg_2E_0);
	}
	return result;
};
$asm02.MS.Internal.FrameworkCallbacks.SetValueToProperty = function (target, propertyName, propertyValue, typeIndex, attachedDPOwnerNamespace, attachedDPOwnerAssembly) {
	var result = -2146498358;
	var flag = false;
	if (!((target !== null) && !System.String.IsNullOrEmpty(propertyName))) {
		return -2146498358;
	}
	var array = propertyName.Split(JSIL.Array.New(System.Char, ["."]));
	if (!((array === null) || (array.length !== 2))) {
		flag = true;
	}
	if (flag) {
		var dependencyObject = JSIL.TryCast(target, System.Windows.DependencyObject);
		if (dependencyObject !== null) {
			result = $asm02.MS.Internal.FrameworkCallbacks.SetAttachedProperty(
				dependencyObject, 
				propertyName, 
				propertyValue, 
				typeIndex, 
				attachedDPOwnerNamespace, 
				attachedDPOwnerAssembly
			);
		}
	} else {
		result = $asm02.MS.Internal.FrameworkCallbacks.SetNonAttachedProperty(target, propertyName, propertyValue, typeIndex);
	}
	return result;
};
$asm02.MS.Internal.FrameworkCallbacks.InvalidateProperty = function (nativeTarget, propertyId) {
	var propertyToken = new $asm02.MS.Internal.XamlPropertyToken();
	try {
		var dependencyObject = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeTarget), System.Windows.DependencyObject);
		if (dependencyObject === null) {
			var result = -2146498358;
			return result;
		}
		if ($asm02.MS.Internal.QuirksMode.ShouldUseXamlPropertyTokenForProperties()) {
			propertyToken._ctor($asm02.MS.Internal.XamlTypeInfoProviderKind.tpkManaged, propertyId);
			var property = $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetDependencyPropertyFromToken(propertyToken.MemberwiseClone());
		} else {
			property = System.Windows.DependencyProperty.QueryRegisteredProperty$1(propertyId);
		}
		dependencyObject.InvalidateProperty(property);
	} catch ($exception) {
		var arg_41_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForUserException(arg_41_0);
		return result;
	}
	return 0;
};
$asm02.MS.Internal.FrameworkCallbacks.SetPropertyAttribute = function (nativeTarget, attrName, attrValue, attachedDPOwnerNamespace, attachedDPOwnerAssembly) {
	try {
		var managedPeer = $asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeTarget);
		if (managedPeer === null) {
			var result = -2146498358;
		} else {
			result = $asm02.MS.Internal.FrameworkCallbacks.SetValueToProperty(
				managedPeer, 
				attrName, 
				attrValue, 
				0, 
				attachedDPOwnerNamespace, 
				attachedDPOwnerAssembly
			);
		}
	} catch ($exception) {
		var arg_21_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForUserException(arg_21_0);
	}
	return result;
};
$asm02.MS.Internal.FrameworkCallbacks.SetEventAttribute = function (nativeRoot, nativeTarget, attrName, attrValue) {
	try {
		var managedPeer = $asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeTarget);
		var num = 0;
		var flag = false;
		var array = attrName.Split(JSIL.Array.New(System.Char, ["."]));
		if (!((array === null) || (array.length !== 2))) {
			flag = true;
		}
		if (!flag) {
			var root = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeRoot), $asm02.MS.Internal.IManagedPeer);
			num = $asm02.MS.Internal.FrameworkCallbacks.AttachEvent(root, managedPeer, attrName, attrValue);
		}
		var result = num;
	} catch ($exception) {
		var arg_4D_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForUserException(arg_4D_0);
	}
	return result;
};
$asm02.MS.Internal.FrameworkCallbacks.SetBindingForObject = function (nativeTarget, propertyName, nKnownIndex, nativeBinding, attachedDPOwnerNamespace, attachedDPOwnerAssembly) {
	var managedPeer = $asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeTarget);
	if (managedPeer === null) {
		return -2146498358;
	}
	try {
		var binding = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeBinding), System.Windows.Data.Binding);
		if (binding === null) {
			var result = -2146498358;
		} else {
			var dependencyProperty = null;
			var dependencyObject = JSIL.TryCast(managedPeer, System.Windows.DependencyObject);
			if (dependencyObject !== null) {
				if (nKnownIndex !== 0) {
					dependencyProperty = System.Windows.DependencyProperty.QueryRegisteredCoreProperty$1(nKnownIndex, propertyName, JSIL.GetType(dependencyObject));
					if (!(dependencyProperty || $asm02.MS.Internal.QuirksMode.ShouldDoDeepLookupOfCoreDPs())) {
						dependencyProperty = System.Windows.DependencyProperty.LookupCoreProperty(propertyName, JSIL.GetType(dependencyObject));
						if (dependencyProperty === null) {
							result = -2146498358;
							return result;
						}
					}
				} else {
					dependencyProperty = System.Windows.DependencyProperty.GetRegisteredDependencyProperty(dependencyObject, propertyName, attachedDPOwnerNamespace, attachedDPOwnerAssembly);
				}
			}
			var markupExtension = binding;
			if (markupExtension.IMarkupExtension_IsValidTargetForExtension(dependencyObject, dependencyProperty)) {
				markupExtension.IMarkupExtension_SetupExtension(dependencyObject, dependencyProperty);
				result = 0;
			} else {
				result = $asm02.MS.Internal.FrameworkCallbacks.SetPropertyValue(managedPeer, propertyName, markupExtension);
			}
		}
	} catch ($exception) {
		var e = $exception;
		if ($asm02.MS.Internal.Error.IsCriticalException(e)) {
			throw $exception;
		}
		result = -2146498348;
	}
	return result;
};
$asm02.MS.Internal.FrameworkCallbacks.SetRelativeSource = function (nativeBindingExpression, relativeSourceMode) {
	var binding = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeBindingExpression), System.Windows.Data.Binding);
	if (binding === null) {
		return -2146498358;
	}
	try {
		var mode = JSIL.Cast(System.Enum.Parse(System.Windows.Data.RelativeSourceMode, relativeSourceMode, true), System.Windows.Data.RelativeSourceMode);
		binding.RelativeSource = JSIL.New(System.Windows.Data.RelativeSource, "_ctor$1", [mode]);
	} catch ($exception) {
		var arg_3A_0 = $exception;
		return $asm02.MS.Internal.Error.GetXresultForException(arg_3A_0);
	}
	return 0;
};
$asm02.MS.Internal.FrameworkCallbacks.SetTemplateBinding = function (source, tokSourceProperty, target, tokTargetProperty) {
	var dependencyObject = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(source), System.Windows.DependencyObject);
	var dependencyObject2 = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(target), System.Windows.DependencyObject);
	if (!((dependencyObject !== null) && dependencyObject2)) {
		return -2146498358;
	}
	try {
		var dependencyPropertyFromToken = $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetDependencyPropertyFromToken(tokSourceProperty);
		var dependencyPropertyFromToken2 = $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetDependencyPropertyFromToken(tokTargetProperty);
		var flag = new JSIL.Variable(false);
		if (!System.Windows.TemplateBindingExpression.PropertyTypesCompatible(dependencyPropertyFromToken._propertyType, dependencyPropertyFromToken2._propertyType, /* ref */ flag)) {
			var result = 0;
			return result;
		}
		if (dependencyPropertyFromToken2.IsCoreProperty) {
			dependencyObject2.SetValue(dependencyPropertyFromToken2, JSIL.New(System.Windows.TemplateBindingExpression, "_ctor$1", [JSIL.TryCast(dependencyObject, System.Windows.Controls.Control), dependencyPropertyFromToken, flag.value]));
		} else {
			dependencyObject2.SetValue(dependencyPropertyFromToken2, new $asm02.System.Windows.TemplateBindingExpressionForCore(JSIL.TryCast(dependencyObject, System.Windows.Controls.Control), dependencyPropertyFromToken, flag.value));
		}
	} catch ($exception) {
		var e = $exception;
		if ($asm02.MS.Internal.Error.IsCriticalException(e)) {
			throw $exception;
		}
		result = -2147418113;
		return result;
	}
	return 0;
};
$asm02.MS.Internal.FrameworkCallbacks.SetTemplateBindingCustomToCore = function (source, nCustomPropertyID, target, targetPropertyName, nTargetUserIndexID) {
	var dependencyObject = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(source), System.Windows.DependencyObject);
	var dependencyObject2 = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(target), System.Windows.DependencyObject);
	if (!((dependencyObject !== null) && dependencyObject2)) {
		return -2146498358;
	}
	try {
		var dependencyProperty = System.Windows.DependencyProperty.QueryRegisteredProperty$1(nCustomPropertyID);
		var runtimeCheck = new JSIL.Variable(false);
		var dependencyProperty2 = System.Windows.DependencyProperty.QueryRegisteredCoreProperty$1(nTargetUserIndexID, targetPropertyName, JSIL.GetType(dependencyObject2));
		if (!(dependencyProperty2 || $asm02.MS.Internal.QuirksMode.ShouldDoDeepLookupOfCoreDPs())) {
			dependencyProperty2 = System.Windows.DependencyProperty.LookupCoreProperty(targetPropertyName, JSIL.GetType(dependencyObject2));
			if (dependencyProperty2 === null) {
				var result = -2147418113;
				return result;
			}
		}
		if (!System.Windows.TemplateBindingExpression.PropertyTypesCompatible(dependencyProperty._propertyType, dependencyProperty2._propertyType, /* ref */ runtimeCheck)) {
			result = 0;
			return result;
		}
		dependencyObject2.SetValue(dependencyProperty2, JSIL.New(System.Windows.TemplateBindingExpression, "_ctor$1", [JSIL.TryCast(dependencyObject, System.Windows.Controls.Control), dependencyProperty, runtimeCheck.value]));
	} catch ($exception) {
		var e = $exception;
		if ($asm02.MS.Internal.Error.IsCriticalException(e)) {
			throw $exception;
		}
		result = -2147418113;
		return result;
	}
	return 0;
};
$asm02.MS.Internal.FrameworkCallbacks.SetTemplateBindingCoreToCustom = function (source, sourcePropertyName, nSourcePropertyUserIndex, target, nTargetPropertyId) {
	var dependencyObject = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(source), System.Windows.DependencyObject);
	var dependencyObject2 = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(target), System.Windows.DependencyObject);
	var fRuntimeCheck = new JSIL.Variable(false);
	if (!((dependencyObject !== null) && dependencyObject2)) {
		return -2146498358;
	}
	try {
		var dependencyProperty = System.Windows.DependencyProperty.QueryRegisteredCoreProperty$1(nSourcePropertyUserIndex, sourcePropertyName, JSIL.GetType(dependencyObject));
		if (!(dependencyProperty || $asm02.MS.Internal.QuirksMode.ShouldDoDeepLookupOfCoreDPs())) {
			dependencyProperty = System.Windows.DependencyProperty.LookupCoreProperty(sourcePropertyName, JSIL.GetType(dependencyObject));
			if (dependencyProperty === null) {
				var result = -2147418113;
				return result;
			}
		}
		var dependencyProperty2 = System.Windows.DependencyProperty.QueryRegisteredProperty$1(nTargetPropertyId);
		if (!System.Windows.TemplateBindingExpression.PropertyTypesCompatible(dependencyProperty._propertyType, dependencyProperty2._propertyType, /* ref */ fRuntimeCheck)) {
			result = 0;
			return result;
		}
		dependencyObject2.SetValue(dependencyProperty2, new $asm02.System.Windows.TemplateBindingExpressionForCore(JSIL.TryCast(dependencyObject, System.Windows.Controls.Control), dependencyProperty, fRuntimeCheck.value));
	} catch ($exception) {
		var e = $exception;
		if ($asm02.MS.Internal.Error.IsCriticalException(e)) {
			throw $exception;
		}
		result = -2147418113;
		return result;
	}
	return 0;
};
$asm02.MS.Internal.FrameworkCallbacks.SetTemplateBindingCustomToCustom = function (source, nSourcePropertyID, target, nTargetPropertyID) {
	var dependencyObject = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(source), System.Windows.DependencyObject);
	var dependencyObject2 = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(target), System.Windows.DependencyObject);
	if (!((dependencyObject !== null) && dependencyObject2)) {
		return -2146498358;
	}
	try {
		var dependencyProperty = System.Windows.DependencyProperty.QueryRegisteredProperty$1(nSourcePropertyID);
		var dependencyProperty2 = System.Windows.DependencyProperty.QueryRegisteredProperty$1(nTargetPropertyID);
		var runtimeCheck = new JSIL.Variable(false);
		if (!System.Windows.TemplateBindingExpression.PropertyTypesCompatible(dependencyProperty._propertyType, dependencyProperty2._propertyType, /* ref */ runtimeCheck)) {
			var result = 0;
			return result;
		}
		dependencyObject2.SetValue(dependencyProperty2, JSIL.New(System.Windows.TemplateBindingExpression, "_ctor$1", [JSIL.TryCast(dependencyObject, System.Windows.Controls.Control), dependencyProperty, runtimeCheck.value]));
	} catch ($exception) {
		var e = $exception;
		if ($asm02.MS.Internal.Error.IsCriticalException(e)) {
			throw $exception;
		}
		result = -2147418113;
		return result;
	}
	return 0;
};
$asm02.MS.Internal.FrameworkCallbacks.GetCoreTypeId = function (type) {
	var type2 = type;
__loop0__: 
	for (var num = $asm02.MS.Internal.CoreTypes.GetCoreTypeId(type2); (type2 !== null) && (num === -1); ) {
		type2 = type2.BaseType;
		if (type2 !== null) {
			num = $asm02.MS.Internal.CoreTypes.GetCoreTypeId(type2);
		} else {
			num = 0;
		}
	}
	return num;
};
$asm02.MS.Internal.FrameworkCallbacks.ResolveTypeName = function (assemblyName, rootObjectPtr, typeName, bShouldReturnFullName, /* ref */ fullName, /* ref */ fullNameLength, /* ref */ typeID, /* ref */ coreTypeId, /* ref */ typeFlags) {
	fullName.value = System.IntPtr.Zero;
	fullNameLength.value = 0;
	try {
		var type = $asm02.MS.Internal.FrameworkCallbacks.SafeGetTypeFor(assemblyName, typeName, rootObjectPtr, false);
		if (type === null) {
			var result = -2146498353;
			return result;
		}
		typeID.value = $asm02.MS.Internal.TypeProxy.RegisterType(type);
		coreTypeId.value = $asm02.MS.Internal.FrameworkCallbacks.GetCoreTypeId(type);
		typeFlags.value = Math.floor($asm02.MS.Internal.TypeProxy.GetTypeFlags$0(type));
		if (bShouldReturnFullName !== 0) {
			fullName.value = $asm02.MS.Internal.FrameworkCallbacks.MarshalStringToNative(type.FullName);
			fullNameLength.value = type.FullName.length;
		}
	} catch ($exception) {
		var e = $exception;
		if ($asm02.MS.Internal.Error.IsCriticalException(e)) {
			throw $exception;
		}
		result = -2147418113;
		return result;
	}
	return 0;
};
$asm02.MS.Internal.FrameworkCallbacks.EnsureIsObjectOfType = function (target, targetType) {
	try {
		var managedPeer = $asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(target);
		var typeProxy = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(targetType), $asm02.MS.Internal.TypeProxy);
		if (!((managedPeer !== null) && typeProxy)) {
			var result = -2147418113;
			return result;
		}
		if (typeProxy.GetWrappedType().IsInstanceOfType(managedPeer)) {
			result = 0;
			return result;
		}
	} catch ($exception) {
		var arg_35_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForException(arg_35_0);
		return result;
	}
	return -2146498353;
};
$asm02.MS.Internal.FrameworkCallbacks.TypeIsAssignableFrom = function (baseTypeId, derivedTypeId) {
	try {
		var type = $asm02.MS.Internal.TypeProxy.QueryRegisteredType(baseTypeId);
		var type2 = $asm02.MS.Internal.TypeProxy.QueryRegisteredType(derivedTypeId);
		if (!((type !== null) && type2)) {
			var result = -2147418113;
			return result;
		}
		if (type.IsAssignableFrom(type2)) {
			result = 0;
			return result;
		}
	} catch ($exception) {
		var arg_2B_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForException(arg_2B_0);
		return result;
	}
	return -2146498353;
};
$asm02.MS.Internal.FrameworkCallbacks.GetCustomTypeIDFromObject = function (target, /* ref */ typeID) {
	typeID.value = 0;
	try {
		var dependencyObject = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(target), System.Windows.DependencyObject);
		if (dependencyObject === null) {
			var result = -2147418113;
			return result;
		}
		var type = (JSIL.GetType(dependencyObject));
		if ($asm02.MS.Internal.TypeProxy.IsCoreType(type)) {
			typeID.value = 0;
		} else {
			typeID.value = $asm02.MS.Internal.TypeProxy.RegisterType(type);
		}
	} catch ($exception) {
		var arg_38_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForException(arg_38_0);
		return result;
	}
	return 0;
};
$asm02.MS.Internal.FrameworkCallbacks.GetCustomTypeFullName = function (target, /* ref */ fullName, /* ref */ fullNameLength) {
	fullName.value = System.IntPtr.Zero;
	fullNameLength.value = 0;
	try {
		var dependencyObject = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(target), System.Windows.DependencyObject);
		if (dependencyObject === null) {
			var result = -2147418113;
			return result;
		}
		var type = (JSIL.GetType(dependencyObject));
		if ($asm02.MS.Internal.TypeProxy.IsCoreType(type)) {
			result = 0;
			return result;
		}
		$asm02.MS.Internal.TypeProxy.RegisterType(type);
		fullName.value = $asm02.MS.Internal.FrameworkCallbacks.MarshalStringToNative(type.FullName);
		fullNameLength.value = type.FullName.length;
	} catch ($exception) {
		var arg_5F_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForException(arg_5F_0);
		return result;
	}
	return 0;
};
$asm02.MS.Internal.FrameworkCallbacks.GetCustomPropertyID = function (typeID, isCoreType, propertyName, /* ref */ customPropertyID) {
	customPropertyID.value = 0;
	try {
		if (isCoreType === 1) {
			var ownerType = $asm02.MS.Internal.TypeProxy.QueryCoreType(typeID);
		} else {
			ownerType = $asm02.MS.Internal.TypeProxy.QueryRegisteredType(typeID);
		}
		var dependencyProperty = System.Windows.DependencyProperty.QueryRegisteredProperty$0(propertyName, ownerType);
		if (dependencyProperty !== null) {
			customPropertyID.value = dependencyProperty.m_nKnownId;
		}
		var result = 0;
	} catch ($exception) {
		var e = $exception;
		if ($asm02.MS.Internal.Error.IsCriticalException(e)) {
			throw $exception;
		}
		result = -2146498348;
	}
	return result;
};
$asm02.MS.Internal.FrameworkCallbacks.GetCustomAttachedPropertyID = function (attachedDPOwnerNamespace, attachedDPOwnerAssembly, propertyName, /* ref */ customAttachedPropertyID) {
	customAttachedPropertyID.value = 0;
	try {
		var registeredDependencyProperty = System.Windows.DependencyProperty.GetRegisteredDependencyProperty(null, propertyName, attachedDPOwnerNamespace, attachedDPOwnerAssembly);
		if (registeredDependencyProperty === null) {
			var result = -2146498350;
		} else {
			customAttachedPropertyID.value = registeredDependencyProperty.m_nKnownId;
			result = 0;
		}
	} catch ($exception) {
		var e = $exception;
		if ($asm02.MS.Internal.Error.IsCriticalException(e)) {
			throw $exception;
		}
		result = -2146498350;
	}
	return result;
};
$asm02.MS.Internal.FrameworkCallbacks.SetCustomProperty = function (nativeTarget, customPropertyID, /* ref */ propertyValue, typeIndex) {
	var dp = new JSIL.Variable(null), value = new JSIL.Variable(null);
	try {
		try {
			var dependencyObject = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeTarget), System.Windows.DependencyObject);
			if (dependencyObject === null) {
				var result = -2146498358;
			} else {
				$asm02.MS.Internal.FrameworkCallbacks.GetPropertyAndConvertedValue(
					customPropertyID, 
					/* ref */ propertyValue, 
					typeIndex, 
					/* ref */ dp, 
					/* ref */ value
				);
				dependencyObject.SetValue(dp.value, value.value);
				result = 0;
			}
		} finally {
			$asm02.MS.Internal.ManagedPeerTable.UnpegManagedPeerNoRef$0(propertyValue.value.MemberwiseClone());
		}
	} catch ($exception) {
		var e = $exception;
		if ($asm02.MS.Internal.Error.IsCriticalException(e)) {
			throw $exception;
		}
		result = -2146498348;
	}
	return result;
};
$asm02.MS.Internal.FrameworkCallbacks.GetPropertyAndConvertedValue = function (customPropertyID, /* ref */ propertyValue, typeIndex, /* ref */ dp, /* ref */ convertedValue) {
	dp.value = System.Windows.DependencyProperty.QueryRegisteredProperty$1(customPropertyID);
	convertedValue.value = null;
	if (!(!dp.value._propertyType.IsGenericType || (dp.value._propertyType.GetGenericTypeDefinition() !== System.Nullable$b1))) {
		var type = System.Nullable.GetUnderlyingType(dp.value._propertyType);
	} else {
		type = dp.value._propertyType;
	}
	var typeHandle = type.TypeHandle.MemberwiseClone();
	if (!((propertyValue.value.Type !== MS.Internal.VType.valueEnum) || !type.IsEnum)) {
		convertedValue.value = $asm02.MS.Internal.XcpImports.ConvertEnum(propertyValue.value.MemberwiseClone(), dp.value);
		return;
	}
	if (!((propertyValue.value.Type !== MS.Internal.VType.valueEnum) || !System.Boolean.Equals$1(type))) {
		convertedValue.value = System.Convert.ToBoolean$9(propertyValue.value.m_nValue);
		return;
	}
	if (!((propertyValue.value.Type === MS.Internal.VType.valueEnum) && $asm02.MS.Internal.XcpImports.TryConvertPseudoEnum(typeHandle.MemberwiseClone(), propertyValue.value.m_nValue, /* ref */ convertedValue))) {
		convertedValue.value = $asm02.MS.Internal.XcpImports.ConvertType$0(propertyValue.value.MemberwiseClone(), typeIndex, false, null);
	}
};
$asm02.MS.Internal.FrameworkCallbacks.HasManagedNameProperty = function (nativeTarget, /* ref */ hasManagedNameProperty) {
	hasManagedNameProperty.value = 0;
	try {
		var managedPeer = $asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeTarget);
		if (!((managedPeer === null) || (JSIL.GetType(managedPeer).GetProperty$2("Name", (System.Reflection.BindingFlags.GetProperty | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static)) === null))) {
			hasManagedNameProperty.value = 1;
		}
		var result = 0;
	} catch ($exception) {
		var e = $exception;
		if ($asm02.MS.Internal.Error.IsCriticalException(e)) {
			throw $exception;
		}
		result = -2147467259;
	}
	return result;
};
$asm02.MS.Internal.FrameworkCallbacks.GetCustomProperty = function (nativeTarget, customPropertyID, /* ref */ propertyValue) {
	propertyValue.value = new $asm02.MS.Internal.CValue();
	try {
		var dependencyObject = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeTarget), System.Windows.DependencyObject);
		if (dependencyObject === null) {
			var result = -2146498358;
		} else {
			var dependencyProperty = System.Windows.DependencyProperty.QueryRegisteredProperty$1(customPropertyID);
			if (dependencyProperty === null) {
				result = -2147418113;
			} else {
				var value = dependencyObject.GetValue(dependencyProperty);
				propertyValue.value.SetValue(value);
				result = 0;
			}
		}
	} catch ($exception) {
		var e = $exception;
		if ($asm02.MS.Internal.Error.IsCriticalException(e)) {
			throw $exception;
		}
		result = -2146498348;
	}
	return result;
};
$asm02.MS.Internal.FrameworkCallbacks.SetAnimatedValue = function (nativeTarget, customPropertyID, /* ref */ propertyValue, typeIndex) {
	var property = new JSIL.Variable(null), animatedValue = new JSIL.Variable(null), obj = null;
	var flag = false;
	try {
		try {
			flag = $asm02.MS.Internal.JoltHelper.EnsureSynchronizationContext();
			$asm02.MS.Internal.FrameworkCallbacks.GetPropertyAndConvertedValue(
				customPropertyID, 
				/* ref */ propertyValue, 
				typeIndex, 
				/* ref */ property, 
				/* ref */ animatedValue
			);
			if ((true) === null) {
				var result = 0;
			} else {
				var dependencyObject = JSIL.TryCast(obj, System.Windows.DependencyObject);
				if (dependencyObject === null) {
					result = -2146498358;
				} else {
					dependencyObject.SetAnimatedValue(property.value, animatedValue.value);
					result = 0;
				}
			}
		} catch ($exception) {
			var e = $exception;
			if ($asm02.MS.Internal.Error.IsCriticalException(e)) {
				throw $exception;
			}
			result = -2146498348;
		}
	} finally {
		if (flag) {
			$asm02.MS.Internal.JoltHelper.RestoreSynchronizationContext();
		}
	}
	return result;
};
$asm02.MS.Internal.FrameworkCallbacks.ClearAnimatedValue = function (nativeTarget, customPropertyID, hasHoldEndValue, /* ref */ holdEndValue, typeIndex) {
	var obj = null, property = new JSIL.Variable(null), holdEndValue2 = new JSIL.Variable(null);
	try {
		if ((true) === null) {
			var result = 0;
		} else {
			var dependencyObject = JSIL.TryCast(obj, System.Windows.DependencyObject);
			if (dependencyObject === null) {
				result = -2146498358;
			} else {
				$asm02.MS.Internal.FrameworkCallbacks.GetPropertyAndConvertedValue(
					customPropertyID, 
					/* ref */ holdEndValue, 
					typeIndex, 
					/* ref */ property, 
					/* ref */ holdEndValue2
				);
				dependencyObject.ClearAnimatedValue(property.value, hasHoldEndValue, holdEndValue2.value);
				result = 0;
			}
		}
	} catch ($exception) {
		var e = $exception;
		if ($asm02.MS.Internal.Error.IsCriticalException(e)) {
			throw $exception;
		}
		result = -2146498348;
	}
	return result;
};
$asm02.MS.Internal.FrameworkCallbacks.SetPropertyValue = function (target, propertyName, value) {
	var propertyInfo = $asm02.MS.Internal.FrameworkCallbacks.ResolvePropertyName(JSIL.GetType(target), propertyName, (System.Reflection.BindingFlags.GetProperty | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
	if (propertyInfo === null) {
		return -2146498350;
	}
	if (!((JSIL.TryCast(value, System.Windows.Data.Binding) === null) || (propertyInfo.PropertyType === System.Windows.Data.Binding))) {
		return -2146498348;
	}
	propertyInfo.SetValue$1(target, value, null);
	return 0;
};
$asm02.MS.Internal.FrameworkCallbacks.SetProperty = function (nativeTarget, propertyName, /* ref */ propertyValue, typeIndex, attachedDPOwnerNamespace, attachedDPOwnerAssembly) {
	var flag = false;
	try {
		try {
			flag = $asm02.MS.Internal.JoltHelper.EnsureSynchronizationContext();
			try {
				var managedPeer = $asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeTarget);
				if (!((managedPeer !== null) && !System.String.IsNullOrEmpty(propertyName))) {
					var result = -2146498358;
				} else {
					var num = $asm02.MS.Internal.FrameworkCallbacks.SetValueToProperty(
						managedPeer, 
						propertyName, 
						propertyValue.value.MemberwiseClone(), 
						typeIndex, 
						attachedDPOwnerNamespace, 
						attachedDPOwnerAssembly
					);
					result = num;
				}
			} finally {
				$asm02.MS.Internal.ManagedPeerTable.UnpegManagedPeerNoRef$0(propertyValue.value.MemberwiseClone());
			}
		} catch ($exception) {
			var e = $exception;
			if ($asm02.MS.Internal.Error.IsCriticalException(e)) {
				throw $exception;
			}
			result = -2146498348;
		}
	} finally {
		if (flag) {
			$asm02.MS.Internal.JoltHelper.RestoreSynchronizationContext();
		}
	}
	return result;
};
$asm02.MS.Internal.FrameworkCallbacks.ClearProperty = function (nativeTarget, propertyName, nPropertyId) {
	var dependencyObject = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeTarget), System.Windows.DependencyObject);
	if (dependencyObject === null) {
		return -2146498358;
	}
	try {
		var dependencyProperty = System.Windows.DependencyProperty.QueryRegisteredCoreProperty$1(nPropertyId, propertyName, JSIL.GetType(dependencyObject));
		if (!(dependencyProperty || $asm02.MS.Internal.QuirksMode.ShouldDoDeepLookupOfCoreDPs())) {
			dependencyProperty = System.Windows.DependencyProperty.LookupCoreProperty(propertyName, JSIL.GetType(dependencyObject));
			if (dependencyProperty === null) {
				var result = -2146498358;
				return result;
			}
		}
		dependencyObject.ClearValue(dependencyProperty);
	} catch ($exception) {
		var e = $exception;
		if ($asm02.MS.Internal.Error.IsCriticalException(e)) {
			throw $exception;
		}
		result = -2147467259;
		return result;
	}
	return 0;
};
$asm02.MS.Internal.FrameworkCallbacks.SetPropertyOrAddItem = function (target, propertyInfo, value, typeIndex, propertyName) {
	var list = null;
	try {
		var dp = null;
		var type = null;
		if (propertyInfo === null) {
			list = JSIL.TryCast(target, System.Collections.IList);
			if (list === null) {
				var result = -2146498350;
				return result;
			}
			type = System.Object;
		} else {
			type = propertyInfo.PropertyType;
		}
		var obj = $asm02.MS.Internal.FrameworkCallbacks.ConvertValueToPropertyType(propertyInfo, propertyName, value, typeIndex);
		if (!(list || 
				!System.Collections.IList.IsAssignableFrom(propertyInfo.PropertyType) || (propertyInfo.CanWrite && 
					type.IsAssignableFrom((obj === null) ? null : JSIL.GetType(obj))))) {
			list = JSIL.Cast(propertyInfo.GetValue$0(target, null), System.Collections.IList);
		}
		var markupExtension = JSIL.TryCast(obj, $asm02.MS.Internal.IMarkupExtension);
		if (markupExtension !== null) {
			dp = System.Windows.DependencyProperty.QueryRegisteredProperty$0(propertyName, JSIL.GetType(target));
		}
		if (!((markupExtension === null) || !markupExtension.IMarkupExtension_IsValidTargetForExtension(target, dp))) {
			markupExtension.IMarkupExtension_SetupExtension(target, dp);
			list = null;
		} else if (list === null) {
			var setMethod = propertyInfo.GetSetMethod$0(false);
			if (setMethod === null) {
				result = -2146498339;
				return result;
			}
			setMethod.Invoke$1(target, [obj]);
		} else {
			list.IList_Add(obj);
		}
	} catch ($exception) {
		var exception = $exception;
		if ($asm02.MS.Internal.Error.IsCriticalException(exception)) {
			throw $exception;
		}
		if (list === null) {
			result = -2146498348;
			return result;
		}
		result = $asm02.MS.Internal.Error.GetXresultForUserException(exception);
		return result;
	}
	return 0;
};
$asm02.MS.Internal.FrameworkCallbacks.SetContent = function (nativeTarget, /* ref */ propertyValue, typeIndex) {
	var flag = false;
	try {
		try {
			flag = $asm02.MS.Internal.JoltHelper.EnsureSynchronizationContext();
			try {
				var managedPeer = $asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeTarget);
				var propertyInfo = null;
				var propertyName = null;
				if (managedPeer === null) {
					var result = -2146498358;
				} else {
					var customAttributes = JSIL.GetType(managedPeer).GetCustomAttributes$1(System.Windows.Markup.ContentPropertyAttribute, true);
					if (customAttributes.length > 0) {
						propertyName = JSIL.Cast(customAttributes[0], System.Windows.Markup.ContentPropertyAttribute).Name;
						propertyInfo = $asm02.MS.Internal.FrameworkCallbacks.ResolvePropertyName(JSIL.GetType(managedPeer), propertyName, (System.Reflection.BindingFlags.GetProperty | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
					}
					result = $asm02.MS.Internal.FrameworkCallbacks.SetPropertyOrAddItem(
						managedPeer, 
						propertyInfo, 
						propertyValue.value.MemberwiseClone(), 
						typeIndex, 
						propertyName
					);
				}
			} finally {
				$asm02.MS.Internal.ManagedPeerTable.UnpegManagedPeerNoRef$0(propertyValue.value.MemberwiseClone());
			}
		} catch ($exception) {
			var arg_83_0 = $exception;
			result = $asm02.MS.Internal.Error.GetXresultForUserException(arg_83_0);
		}
	} finally {
		if (flag) {
			$asm02.MS.Internal.JoltHelper.RestoreSynchronizationContext();
		}
	}
	return result;
};
$asm02.MS.Internal.FrameworkCallbacks.CreateBindingExtension = function (constructorArgument, /* ref */ nativeOutValue) {
	nativeOutValue.value = System.IntPtr.Zero;
	try {
		var target = JSIL.New(System.Windows.Data.Binding, "_ctor$0", [constructorArgument, true]);
		var managedObjectReference = JSIL.New($asm02.MS.Internal.ManagedObjectReference, "_ctor$1", [target]);
		managedObjectReference.PegManagedPeerNoRef();
		nativeOutValue.value = managedObjectReference.NativeObject;
		$asm02.MS.Internal.XcpImports.AddRefNativeObject$0(managedObjectReference);
	} catch ($exception) {
		var arg_34_0 = $exception;
		return $asm02.MS.Internal.Error.GetXresultForUserException(arg_34_0);
	}
	return 0;
};
$asm02.MS.Internal.FrameworkCallbacks.GetTypeFlags = function (nativeTarget, customTypeId, /* ref */ typeFlags) {
	typeFlags.value = $asm02.MS.Internal.TypeFlags.None;
	try {
		if (System.IntPtr.op_Equality(nativeTarget, System.IntPtr.Zero)) {
			typeFlags.value = $asm02.MS.Internal.TypeProxy.GetTypeFlags$1(customTypeId);
		} else {
			var managedPeer = $asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeTarget);
			if (managedPeer === null) {
				var result = -2146498358;
				return result;
			}
			typeFlags.value = $asm02.MS.Internal.TypeProxy.GetTypeFlags$0(JSIL.GetType(managedPeer));
		}
	} catch ($exception) {
		var arg_3B_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForException(arg_3B_0);
		return result;
	}
	return 0;
};
$asm02.MS.Internal.FrameworkCallbacks.SupportInitializeEndInit = function (nativeTarget) {
	try {
		var managedPeer = $asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeTarget);
		var supportInitialize = JSIL.TryCast(managedPeer, System.ComponentModel.ISupportInitialize);
		if (supportInitialize !== null) {
			supportInitialize.ISupportInitialize_EndInit();
		}
	} catch ($exception) {
		var arg_19_0 = $exception;
		return $asm02.MS.Internal.Error.GetXresultForException(arg_19_0);
	}
	return 0;
};
$asm02.MS.Internal.FrameworkCallbacks.MarshalStringToNative = function (managedString) {
	var intPtr = System.IntPtr.Zero;
	var length = managedString.length;
	intPtr = $asm02.MS.Internal.XcpImports.AllocateNativeBuffer(MS.Internal.VType.valueString, (length + 1));
	var array = JSIL.Array.New(System.Char, (length + 1));
__loop0__: 
	for (var i = 0; i < length; ++i) {
		array[i] = (managedString[i]);
	}
	array[length] = "\0";
	System.Runtime.InteropServices.Marshal.Copy$1(array, 0, intPtr, (length + 1));
	return intPtr;
};
$asm02.MS.Internal.FrameworkCallbacks.GetRootAssemblyName = function (rootObjectPtr, /* ref */ assemblyName, /* ref */ assemblyNameLength) {
	assemblyName.value = System.IntPtr.Zero;
	assemblyNameLength.value = 0;
	try {
		var managedPeer = $asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(rootObjectPtr);
		if (managedPeer !== null) {
			var assembly = JSIL.GetType(managedPeer).Assembly;
			var name = assembly.GetName$0().Name;
			assemblyNameLength.value = name.length;
			assemblyName.value = $asm02.MS.Internal.FrameworkCallbacks.MarshalStringToNative(name);
		}
	} catch ($exception) {
		var arg_46_0 = $exception;
		return $asm02.MS.Internal.Error.GetXresultForUserException(arg_46_0);
	}
	return 0;
};
$asm02.MS.Internal.FrameworkCallbacks.CheckPeerType = function (nativeRoot, peerType, bCheckExact) {
	try {
		var managedPeer = $asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeRoot);
		if (managedPeer === null) {
			var result = -2146498358;
		} else {
			if (bCheckExact) {
				if (JSIL.GetType(managedPeer).toString() == peerType) {
					result = 0;
					return result;
				}
			} else {
				var type = (JSIL.GetType(managedPeer));
				var flag = peerType.Contains(".");
			__loop0__: 
				while (type) {
					var text = type.toString();
					if (flag) {
						if (text == peerType) {
							result = 0;
							return result;
						}
					} else if (text.EndsWith$0(peerType)) {
					__loop1__: 
						for (var i = 0; i < System.Windows.DependencyProperty.KnownNamespaces.length; ++i) {
							if (text == (System.Windows.DependencyProperty.KnownNamespaces[i] + "." + peerType)) {
								result = 0;
								return result;
							}
						}
					}
					type = type.BaseType;
				}
			}
			result = -2146498353;
		}
	} catch ($exception) {
		var arg_B3_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForUserException(arg_B3_0);
	}
	return result;
};
$asm02.MS.Internal.FrameworkCallbacks.ManagedPeerTreeUpdate = function (oldParentElement, parentElement, childElement, bIsParentAlive, bKeepReferenceToParent, bCanCreateParent) {
	var obj = null, obj2 = null, obj3 = null;
	try {
		var newParent = null;
		if (bCanCreateParent !== 0) {
			newParent = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(parentElement), $asm02.MS.Internal.IManagedPeer);
		} else if ((true) !== null) {
			newParent = JSIL.TryCast(obj, $asm02.MS.Internal.IManagedPeer);
		}
		true;
		var dependencyObject = JSIL.TryCast(obj2, System.Windows.DependencyObject);
		true;
		var oldParent = JSIL.TryCast(obj3, $asm02.MS.Internal.IManagedPeer);
		if (dependencyObject !== null) {
			dependencyObject.UpdateTreeParent(oldParent, newParent, (bIsParentAlive !== 0), (bKeepReferenceToParent !== 0));
		}
		var result = 0;
	} catch ($exception) {
		var arg_69_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForUserException(arg_69_0);
	}
	return result;
};
$asm02.MS.Internal.FrameworkCallbacks.CreateManagedPeer = function (element, typeIndex, fPeggedNoRef) {
	try {
		var obj = $asm02.MS.Internal.ManagedPeerTable.EnsureManagedPeer$0(element, typeIndex, null);
		if (!((obj === null) || (fPeggedNoRef === 0))) {
			$asm02.MS.Internal.ManagedPeerTable.PegManagedPeerNoRef$0(JSIL.TryCast(obj, $asm02.MS.Internal.IManagedPeer));
		}
		var result = 0;
	} catch ($exception) {
		var arg_1E_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForException(arg_1E_0);
	}
	return result;
};
$asm02.MS.Internal.FrameworkCallbacks.UnpegManagedPeerNoRef = function (element) {
	try {
		$asm02.MS.Internal.ManagedPeerTable.UnpegManagedPeerNoRef$2(element);
		var result = 0;
	} catch ($exception) {
		var arg_0A_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForException(arg_0A_0);
	}
	return result;
};
$asm02.MS.Internal.FrameworkCallbacks.PegManagedPeerNoRef = function (element) {
	try {
		$asm02.MS.Internal.ManagedPeerTable.PegManagedPeerNoRef$1(element);
		var result = 0;
	} catch ($exception) {
		var arg_0A_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForException(arg_0A_0);
	}
	return result;
};
$asm02.MS.Internal.FrameworkCallbacks.ShutdownAllPeers = function () {
	try {
		$asm02.MS.Internal.ManagedPeerTable.ShutdownAllPeers();
		$asm02.MS.Internal.JoltHelper.CleanupAppDomain();
		$asm02.MS.Internal.FrameworkCallbacks._callbacksSet = false;
		var result = 0;
	} catch ($exception) {
		var arg_14_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForException(arg_14_0);
	}
	return result;
};
$asm02.MS.Internal.FrameworkCallbacks.SetTemplateEventRoot = function (nativeTemplate, nativeEventRoot) {
	var frameworkTemplate = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeTemplate), System.Windows.FrameworkTemplate);
	var managedPeerBase = System.IntPtr.op_Inequality(nativeEventRoot, System.IntPtr.Zero) ? JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeEventRoot), $asm02.MS.Internal.IManagedPeerBase) : null;
	if (frameworkTemplate === null) {
		return -2146498358;
	}
	if (frameworkTemplate._eventRoot !== null) {
		return -2146498358;
	}
	if (managedPeerBase === null) {
		return 0;
	}
	try {
		frameworkTemplate._eventRoot = managedPeerBase;
	} catch ($exception) {
		var arg_4D_0 = $exception;
		return $asm02.MS.Internal.Error.GetXresultForException(arg_4D_0);
	}
	return 0;
};
$asm02.MS.Internal.FrameworkCallbacks.GetTemplateEventRoot = function (nativeTemplate, /* ref */ nativeEventRoot) {
	var frameworkTemplate = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeTemplate), System.Windows.FrameworkTemplate);
	nativeEventRoot.value = System.IntPtr.Zero;
	if (frameworkTemplate === null) {
		return -2146498358;
	}
	if (frameworkTemplate._eventRoot === null) {
		return 0;
	}
	try {
		nativeEventRoot.value = frameworkTemplate._eventRoot.IManagedPeerBase_NativeObject;
		$asm02.MS.Internal.XcpImports.AddRefNativeObject$0(frameworkTemplate._eventRoot);
	} catch ($exception) {
		var arg_48_0 = $exception;
		return $asm02.MS.Internal.Error.GetXresultForException(arg_48_0);
	}
	return 0;
};
$asm02.MS.Internal.FrameworkCallbacks.ProcessMarkupExtension = function (doTarget, nTargetPropertyID, targetPropertyName, markupExtension) {
	var dependencyObject = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(doTarget), System.Windows.DependencyObject);
	var markupExtension2 = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(markupExtension), $asm02.MS.Internal.IMarkupExtension);
	if (!((dependencyObject !== null) && markupExtension2)) {
		return -2146498358;
	}
	try {
		var dependencyProperty = System.Windows.DependencyProperty.QueryRegisteredCoreProperty$1(nTargetPropertyID, targetPropertyName, JSIL.GetType(dependencyObject));
		if (!(dependencyProperty || $asm02.MS.Internal.QuirksMode.ShouldDoDeepLookupOfCoreDPs())) {
			dependencyProperty = System.Windows.DependencyProperty.LookupCoreProperty(targetPropertyName, JSIL.GetType(dependencyObject));
			if (dependencyProperty === null) {
				var result = -2146498350;
				return result;
			}
		}
		if (markupExtension2.IMarkupExtension_IsValidTargetForExtension(dependencyObject, dependencyProperty)) {
			markupExtension2.IMarkupExtension_SetupExtension(dependencyObject, dependencyProperty);
		} else {
			dependencyObject.SetValue(dependencyProperty, markupExtension2);
		}
	} catch ($exception) {
		var arg_73_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForException(arg_73_0);
		return result;
	}
	return 0;
};
$asm02.MS.Internal.FrameworkCallbacks.IsCustomEvent = function (doTarget, targetPropertyName, /* ref */ bIsCustomEvent) {
	var managedPeer = $asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(doTarget);
	bIsCustomEvent.value = JSIL.GetType(managedPeer).GetEvent$1(targetPropertyName, (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public)) ? 1 : 0;
	return 0;
};
$asm02.MS.Internal.FrameworkCallbacks.IsoStorageIncreaseQuotaTo = function (quotaSize) {
	try {
		if (System.IO.IsolatedStorage.IsolatedStorageFile.GetUserStoreForApplication().Quota < quotaSize) {
			System.IO.IsolatedStorage.IsolatedStorageFile.GetUserStoreForApplication().IncreaseQuotaTo(quotaSize);
		}
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.IO.IsolatedStorage.IsolatedStorageException)) {
			var result = 0;
			return result;
		} else {
			var arg_20_0 = $exception;
			result = $asm02.MS.Internal.Error.GetXresultForException(arg_20_0);
			return result;
		}
	}
	return 0;
};
$asm02.MS.Internal.FrameworkCallbacks.NavigationHelper_Navigate = function (nativeHost, targetName, navigationUri) {
	try {
		var frameworkElement = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeHost), System.Windows.FrameworkElement);
		if (frameworkElement !== null) {
			var navigationHelper = new $asm02.MS.Internal.NavigationHelper(frameworkElement, targetName, JSIL.New(System.Uri, "_ctor$1", [navigationUri, System.UriKind.RelativeOrAbsolute]));
			navigationHelper.Navigate(true);
		}
	} catch ($exception) {
		var arg_27_0 = $exception;
		return $asm02.MS.Internal.Error.GetXresultForException(arg_27_0);
	}
	return 0;
};
$asm02.MS.Internal.FrameworkCallbacks.Hyperlink_OnClick = function (nativeHost) {
	try {
		var hyperlink = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeHost), System.Windows.Documents.Hyperlink);
		if (hyperlink === null) {
			var result = -2146498358;
			return result;
		}
		hyperlink.OnClick();
	} catch ($exception) {
		var arg_1F_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForException(arg_1F_0);
		return result;
	}
	return 0;
};
$asm02.MS.Internal.FrameworkCallbacks.IsWellFormedUriString = function (uriString) {
	try {
		if (!System.Uri.IsWellFormedUriString(uriString, System.UriKind.RelativeOrAbsolute)) {
			throw JSIL.New(System.UriFormatException, "_ctor$0", []);
		}
	} catch ($exception) {
		var arg_11_0 = $exception;
		return $asm02.MS.Internal.Error.GetXresultForException(arg_11_0);
	}
	return 0;
};
$asm02.MS.Internal.FrameworkCallbacks.GetCollectionForDependencyObjectCollection = function (nativeDO, /* ref */ nativeCollection) {
	var dependencyObject = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeDO), System.Windows.DependencyObject);
	if (dependencyObject === null) {
		return -2147467259;
	}
	try {
		var nativeCollectionWrapper = JSIL.TryCast(dependencyObject, $asm02.System.Windows.INativeCollectionWrapper);
		if (nativeCollectionWrapper === null) {
			var result = -2146498358;
			return result;
		}
		var collection = nativeCollectionWrapper.INativeCollectionWrapper_GetCollection();
		if (collection === null) {
			result = -2146498358;
			return result;
		}
		$asm02.MS.Internal.XcpImports.AddRefNativeObject$0(collection);
		nativeCollection.value = collection.NativeObject;
	} catch ($exception) {
		var arg_4F_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForException(arg_4F_0);
		return result;
	}
	return 0;
};
$asm02.MS.Internal.FrameworkCallbacks.SetAttachedProperty = function (target, propertyName, propertyValue, typeIndex, attachedDPOwnerNamespace, attachedDPOwnerAssembly) {
	if (!((target !== null) && !System.String.IsNullOrEmpty(propertyName))) {
		return -2146498358;
	}
	var list = null;
	try {
		var customAttachedDependencyProperty = JSIL.TryCast(System.Windows.DependencyProperty.GetRegisteredDependencyProperty(target, propertyName, attachedDPOwnerNamespace, attachedDPOwnerAssembly), $asm02.System.Windows.CustomAttachedDependencyProperty);
		if (customAttachedDependencyProperty === null) {
			var result = -2146498350;
		} else {
			var obj = $asm02.MS.Internal.FrameworkCallbacks.ConvertValueToPropertyType(customAttachedDependencyProperty, propertyName, propertyValue, typeIndex);
			var markupExtension = JSIL.TryCast(obj, $asm02.MS.Internal.IMarkupExtension);
			if (!((markupExtension === null) || !markupExtension.IMarkupExtension_IsValidTargetForExtension(target, customAttachedDependencyProperty))) {
				markupExtension.IMarkupExtension_SetupExtension(target, customAttachedDependencyProperty);
			} else {
				if (!(!System.Collections.IList.IsAssignableFrom(customAttachedDependencyProperty._propertyType) || ((customAttachedDependencyProperty.SetterMethodInfo !== null) && 
							customAttachedDependencyProperty._propertyType.IsAssignableFrom(JSIL.GetType(obj))))) {
					if (customAttachedDependencyProperty.GetterMethodInfo === null) {
						result = -2146498350;
						return result;
					}
					list = JSIL.Cast(customAttachedDependencyProperty.GetterMethodInfo.Invoke$1(null, [target]), System.Collections.IList);
				}
				if (list !== null) {
					list.IList_Add(obj);
				} else {
					if (customAttachedDependencyProperty.SetterMethodInfo === null) {
						result = -2146498350;
						return result;
					}
					customAttachedDependencyProperty.SetterMethodInfo.Invoke$1(null, [target, obj]);
				}
			}
			result = 0;
		}
	} catch ($exception) {
		var e = $exception;
		if ($asm02.MS.Internal.Error.IsCriticalException(e)) {
			throw $exception;
		}
		if (list === null) {
			result = -2146498348;
		} else {
			result = -2146498348;
		}
	}
	return result;
};
$asm02.MS.Internal.FrameworkCallbacks.SetNonAttachedProperty = function (target, propertyName, propertyValue, typeIndex) {
	if (target === null) {
		return -2146498358;
	}
	var propertyInfo = $asm02.MS.Internal.FrameworkCallbacks.ResolvePropertyName(JSIL.GetType(target), propertyName, (System.Reflection.BindingFlags.GetProperty | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public));
	if (propertyInfo === null) {
		return -2146498350;
	}
	try {
		var result = $asm02.MS.Internal.FrameworkCallbacks.SetPropertyOrAddItem(
			target, 
			propertyInfo, 
			propertyValue, 
			typeIndex, 
			propertyName
		);
	} catch ($exception) {
		var e = $exception;
		if ($asm02.MS.Internal.Error.IsCriticalException(e)) {
			throw $exception;
		}
		result = -2146498348;
	}
	return result;
};
$asm02.MS.Internal.FrameworkCallbacks.GetTypeConverterByName = function (converterTypeName) {
	var type = System.Type.GetType$2(converterTypeName);
	return JSIL.TryCast(System.Activator.CreateInstance$3(type), System.ComponentModel.TypeConverter);
};
$asm02.MS.Internal.FrameworkCallbacks.GetTypeConverterForProperty = function (dpOrPiOrMi) {
	var typeConverter = new JSIL.Variable(null);
	var array = null;
	var memberInfo = JSIL.TryCast(dpOrPiOrMi, System.Reflection.PropertyInfo);
	var dependencyProperty = JSIL.TryCast(dpOrPiOrMi, System.Windows.DependencyProperty);
	if (!$asm02.MS.Internal.FrameworkCallbacks._cachedTypeConverterForMember.TryGetValue(dpOrPiOrMi, /* ref */ typeConverter)) {
		if (memberInfo === null) {
			var customDependencyProperty = JSIL.TryCast(dpOrPiOrMi, $asm02.System.Windows.CustomDependencyProperty);
			if (customDependencyProperty !== null) {
				memberInfo = $asm02.MS.Internal.FrameworkCallbacks.ResolvePropertyName(customDependencyProperty._ownerType, customDependencyProperty._name, (System.Reflection.BindingFlags.FlattenHierarchy | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public));
				if (memberInfo === null) {
					memberInfo = customDependencyProperty._ownerType.GetMethod$4(("Get" + customDependencyProperty._name), (System.Reflection.BindingFlags.FlattenHierarchy | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
				}
			}
		}
		if (memberInfo !== null) {
			array = memberInfo.GetCustomAttributes$1(System.ComponentModel.TypeConverterAttribute, true);
		}
		if (!((array === null) || (array.length <= 0))) {
			typeConverter.value = $asm02.MS.Internal.FrameworkCallbacks.GetTypeConverterByName(JSIL.Cast(array[0], System.ComponentModel.TypeConverterAttribute).ConverterTypeName);
		}
		$asm02.MS.Internal.FrameworkCallbacks._cachedTypeConverterForMember.set_Item(dpOrPiOrMi, typeConverter.value);
	}
	if (typeConverter.value === null) {
		if (dependencyProperty !== null) {
			typeConverter.value = $asm02.MS.Internal.FrameworkCallbacks.GetTypeConverterForType$0(dependencyProperty._propertyType);
		} else {
			var propertyInfo = JSIL.TryCast(memberInfo, System.Reflection.PropertyInfo);
			if (propertyInfo !== null) {
				typeConverter.value = $asm02.MS.Internal.FrameworkCallbacks.GetTypeConverterForType$0(propertyInfo.PropertyType);
			}
		}
	}
	return typeConverter.value;
};
$asm02.MS.Internal.FrameworkCallbacks.GetTypeConverterForType$0 = function (propertyType) {
	return $asm02.MS.Internal.FrameworkCallbacks.GetTypeConverterForType$1(propertyType, false);
};
$asm02.MS.Internal.FrameworkCallbacks.GetTypeConverterForType$1 = function (propertyType, strict) {
	var typeConverter = new JSIL.Variable(null);
	if (!$asm02.MS.Internal.FrameworkCallbacks._cachedTypeConverterForType.TryGetValue(propertyType, /* ref */ typeConverter)) {
		var customAttributes = propertyType.GetCustomAttributes$1(System.ComponentModel.TypeConverterAttribute, true);
		if (!((customAttributes !== null) && (customAttributes.length > 0))) {
			if (!(!strict || ($asm02.MS.Internal.CoreTypes.GetCoreTypeId(propertyType) !== 0))) {
				return null;
			}
			typeConverter.value = new $asm02.MS.Internal.SilverlightTypeConverter(propertyType);
		} else {
			typeConverter.value = $asm02.MS.Internal.FrameworkCallbacks.GetTypeConverterByName(JSIL.Cast(customAttributes[0], System.ComponentModel.TypeConverterAttribute).ConverterTypeName);
		}
		$asm02.MS.Internal.FrameworkCallbacks._cachedTypeConverterForType.set_Item(propertyType, typeConverter.value);
	}
	return typeConverter.value;
};
$asm02.MS.Internal.FrameworkCallbacks.ConvertValueToPropertyType = function (dpOrPi, propertyName, propertyValue, typeIndex) {
	var obj = null;
	var type = System.Object;
	if (JSIL.TryCast(dpOrPi, System.Reflection.PropertyInfo) !== null) {
		type = JSIL.Cast(dpOrPi, System.Reflection.PropertyInfo).PropertyType;
	} else if (JSIL.TryCast(dpOrPi, System.Windows.DependencyProperty) !== null) {
		type = JSIL.Cast(dpOrPi, System.Windows.DependencyProperty)._propertyType;
	}
	if (!(JSIL.TryCast(propertyValue, $asm02.MS.Internal.CValue) || !type.IsInstanceOfType(propertyValue))) {
		obj = propertyValue;
	} else if (!((type.BaseType === null) || 
			!type.BaseType.Equals$1(System.Enum) || (JSIL.TryCast(propertyValue, System.String) === null))) {
		var value = JSIL.Cast(propertyValue, System.String);
		obj = System.Enum.Parse(type, value, true);
	} else if (type === System.Globalization.CultureInfo) {
		obj = JSIL.New(System.Globalization.CultureInfo, "_ctor$0", [JSIL.TryCast(propertyValue, System.String)]);
	} else {
		var outVal = new $asm02.MS.Internal.CValue();
		if (JSIL.TryCast(propertyValue, System.String) !== null) {
			var text = JSIL.Cast(propertyValue, System.String);
			var typeConverter = null;
			if (dpOrPi !== null) {
				typeConverter = $asm02.MS.Internal.FrameworkCallbacks.GetTypeConverterForProperty(dpOrPi);
			}
			if (typeConverter !== null) {
				if (!typeConverter.CanConvertFrom$0(System.String)) {
					throw JSIL.New(System.InvalidOperationException, "_ctor$1", [System.String.Format($asm02.System.Windows.Resx.GetString$2("TypeConverters_UnableToConvertToPropertyType"), propertyName, text)]);
				}
				obj = typeConverter.ConvertFrom$1(null, $asm02.MS.Internal.FrameworkCallbacks.EnglishUSCulture, text);
			} else {
				obj = text;
			}
		} else if (JSIL.TryCast(propertyValue, $asm02.MS.Internal.CValue) !== new $asm02.MS.Internal.CValue()) {
			outVal = JSIL.Cast(propertyValue, $asm02.MS.Internal.CValue).MemberwiseClone();
			obj = $asm02.MS.Internal.XcpImports.ConvertType$0(outVal.MemberwiseClone(), typeIndex, false, null);
		}
		if (JSIL.TryCast(obj, $asm02.MS.Internal.IMarkupExtension) === null) {
			if (type.IsEnum) {
				obj = System.Convert.ToInt32$0(obj);
			}
			if (type.Equals$1(System.Boolean)) {
				obj = System.Convert.ToBoolean$0(obj);
			}
		}
	}
	return obj;
};
$asm02.MS.Internal.FrameworkCallbacks.AttachEvent = function (root, eventSource, eventName, methodName) {
	if (root === null) {
		return -2146498347;
	}
	if (eventSource === null) {
		return -2146498358;
	}
	var event = JSIL.GetType(eventSource).GetEvent$1(eventName, (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public));
	if (event === null) {
		return -2146498350;
	}
	try {
		var method = JSIL.GetType(root).GetMethod$4(methodName, (System.Reflection.BindingFlags.DeclaredOnly | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public));
		if (method === null) {
			var result = -2146498348;
		} else {
			var handler = System.Delegate.CreateDelegate$7(event.EventHandlerType, root, method);
			event.AddEventHandler(eventSource, handler);
			result = 0;
		}
	} catch ($exception) {
		var e = $exception;
		if ($asm02.MS.Internal.Error.IsCriticalException(e)) {
			throw $exception;
		}
		result = -2146498348;
	}
	return result;
};
$asm02.MS.Internal.FrameworkCallbacks.CrackXmlns = function (xmlns, /* ref */ clrNamespace, /* ref */ assemblyName) {
	var text = null;
	assemblyName.value = (text = null);
	clrNamespace.value = text;
	var array = xmlns.Split(JSIL.Array.New(System.Char, [";"]));
	if (array.length !== 2) {
		return false;
	}
	var array2 = (array[0]).Split(JSIL.Array.New(System.Char, [":"]));
	if (array2.length !== 2) {
		return false;
	}
	if (System.String.Compare$1(array2[0], "clr-namespace", System.StringComparison.OrdinalIgnoreCase) !== 0) {
		return false;
	}
	clrNamespace.value = array2[1];
	var array3 = (array[1]).Split(JSIL.Array.New(System.Char, ["="]));
	if (array3.length !== 2) {
		return false;
	}
	if (System.String.Compare$1(array3[0], "assembly", System.StringComparison.OrdinalIgnoreCase) === 0) {
		assemblyName.value = array3[1];
		return ((clrNamespace.value !== null) && !System.String.IsNullOrEmpty(assemblyName.value));
	}
	return false;
};
$asm02.MS.Internal.FrameworkCallbacks.GetTypeForControl = function (typeName, assembly) {
	var arg_3B_0 = null;
	if ((arg_3B_0 = assembly.GetType$0(("System.Windows.Controls." + typeName))) === null) {
		arg_3B_0 = JSIL.Coalesce(assembly.GetType$0(("System.Windows." + typeName)), assembly.GetType$0(("System.Windows.Controls.Primitives." + typeName)));
	}
	return arg_3B_0;
};
$asm02.MS.Internal.FrameworkCallbacks.GetTypeForCoreManagedType = function (typeName, assembly) {
	if (typeName == "Binding") {
		var result = System.Windows.Data.Binding;
	} else if (typeName == "PropertyGroupDescription") {
		result = System.Windows.Data.PropertyGroupDescription;
	} else {
		result = $asm02.MS.Internal.FrameworkCallbacks.GetTypeForControl(typeName, assembly);
	}
	return result;
};
$asm02.MS.Internal.FrameworkCallbacks.GetTypeFor = function (assemblyName, typeName, rootNativePeer, checkCoreTypes) {
	var type = new JSIL.Variable(null);
	if (System.String.IsNullOrEmpty(assemblyName)) {
		var assembly = new JSIL.Variable($asm02.MS.Internal.JoltHelper.GetLoadedAssemblyByName("system.windows"));
		if (checkCoreTypes) {
			type.value = assembly.value.GetType$0(typeName);
		}
		if (!(type.value || 
				!System.IntPtr.op_Equality(rootNativePeer, System.IntPtr.Zero) || $asm02.MS.Internal.FrameworkCallbacks._defaultManagedTypeMap.TryGetValue(typeName, /* ref */ type))) {
			type.value = $asm02.MS.Internal.FrameworkCallbacks.GetTypeForCoreManagedType(typeName, assembly.value);
			if (type.value !== null) {
				$asm02.MS.Internal.FrameworkCallbacks._defaultManagedTypeMap.set_Item(typeName, type.value);
			}
		}
	} else if ($asm02.MS.Internal.JoltHelper.TryGetLoadedAssemblyByName(assemblyName, /* ref */ assembly)) {
		type.value = assembly.value.GetType$0(typeName);
	}
	if (!(type.value || !System.IntPtr.op_Inequality(rootNativePeer, System.IntPtr.Zero))) {
		var managedPeer = $asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(rootNativePeer);
		if (managedPeer !== null) {
			assembly.value = JSIL.GetType(managedPeer).Assembly;
			type.value = assembly.value.GetType$0(typeName);
		}
	}
	return type.value;
};
$asm02.MS.Internal.FrameworkCallbacks.SafeGetTypeFor = function (assemblyName, typeName, rootNativePeer, checkCoreTypes) {
	var type = $asm02.MS.Internal.FrameworkCallbacks.GetTypeFor(assemblyName, typeName, rootNativePeer, checkCoreTypes);
	if (!((type === null) || type.IsPublic)) {
		type = null;
	}
	return type;
};
$asm02.MS.Internal.FrameworkCallbacks.ResolvePropertyName = function (type, propertyName, bindingFlags) {
	var result = null;
	try {
		result = type.GetProperty$2(propertyName, bindingFlags);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.Reflection.AmbiguousMatchException)) {
			result = $asm02.MS.Internal.TypeReflector.ResolveAmbiguousProperty$1(type, propertyName, bindingFlags);
		} else {
			throw $exception;
		}
	}
	return result;
};
JSIL.OverloadedMethod($asm02.MS.Internal.FrameworkCallbacks, "GetTypeConverterForType", [
		["GetTypeConverterForType$0", [System.Type]], 
		["GetTypeConverterForType$1", [System.Type, System.Boolean]]
	]);
Object.defineProperty($asm02.MS.Internal.FrameworkCallbacks, "ClrNamespaceKey", {
		"value": "clr-namespace"}
);
Object.defineProperty($asm02.MS.Internal.FrameworkCallbacks, "AssemblyKey", {
		"value": "assembly"}
);
$asm02.MS.Internal.FrameworkCallbacks._defaultManagedTypeMap = null;
$asm02.MS.Internal.FrameworkCallbacks._cachedTypeConverterForMember = null;
$asm02.MS.Internal.FrameworkCallbacks._cachedTypeConverterForType = null;
$asm02.MS.Internal.FrameworkCallbacks.EnglishUSCulture = null;
$asm02.MS.Internal.FrameworkCallbacks._callbacksSet = false;
$asm02.MS.Internal.FrameworkCallbacks._createUnknownObjectDelegate = null;
$asm02.MS.Internal.FrameworkCallbacks._createKnownObjectDelegate = null;
$asm02.MS.Internal.FrameworkCallbacks._createWrapperObjectDelegate = null;
$asm02.MS.Internal.FrameworkCallbacks._invalidatePropertyDelegate = null;
$asm02.MS.Internal.FrameworkCallbacks._setPropertyAttributeDelegate = null;
$asm02.MS.Internal.FrameworkCallbacks._setEventAttributeDelegate = null;
$asm02.MS.Internal.FrameworkCallbacks._setPropertyDelegate = null;
$asm02.MS.Internal.FrameworkCallbacks._checkPeerTypeDelegate = null;
$asm02.MS.Internal.FrameworkCallbacks._setContentDelegate = null;
$asm02.MS.Internal.FrameworkCallbacks._getTypeFlagsDelegate = null;
$asm02.MS.Internal.FrameworkCallbacks._getRootAssemblyNameDelegate = null;
$asm02.MS.Internal.FrameworkCallbacks._supportInitializeEndInitDelegate = null;
$asm02.MS.Internal.FrameworkCallbacks._shutdownAllPeersDelegate = null;
$asm02.MS.Internal.FrameworkCallbacks._peerTreeUpdateDelegate = null;
$asm02.MS.Internal.FrameworkCallbacks._createManagedPeerDelegate = null;
$asm02.MS.Internal.FrameworkCallbacks._unpegManagedPeerNoRefDelegate = null;
$asm02.MS.Internal.FrameworkCallbacks._pegManagedPeerNoRefDelegate = null;
$asm02.MS.Internal.FrameworkCallbacks._fireEventDelegate = null;
$asm02.MS.Internal.FrameworkCallbacks._pegManagedPeerDelegate = null;
$asm02.MS.Internal.FrameworkCallbacks._unpegManagedPeerDelegate = null;
$asm02.MS.Internal.FrameworkCallbacks._loadAssemblyDelegate = null;
$asm02.MS.Internal.FrameworkCallbacks._loadAssemblyNativeDelegate = null;
$asm02.MS.Internal.FrameworkCallbacks._setCultureDelegate = null;
$asm02.MS.Internal.FrameworkCallbacks._getResourceFromAssemblyDelegate = null;
$asm02.MS.Internal.FrameworkCallbacks._setBindingForObjectDelegate = null;
$asm02.MS.Internal.FrameworkCallbacks._frameworkElement_OnApplyTemplateDelegate = null;
$asm02.MS.Internal.FrameworkCallbacks._control_GetBuiltInStyleDelegate = null;
$asm02.MS.Internal.FrameworkCallbacks._raiseEventDelegate = null;
$asm02.MS.Internal.FrameworkCallbacks._setTemplateBinding = null;
$asm02.MS.Internal.FrameworkCallbacks._setTemplateBindingCustomToCore = null;
$asm02.MS.Internal.FrameworkCallbacks._setTemplateBindingCoreToCustom = null;
$asm02.MS.Internal.FrameworkCallbacks._setTemplateBindingCustomToCustom = null;
$asm02.MS.Internal.FrameworkCallbacks._displayMemberTemplate_BindText = null;
$asm02.MS.Internal.FrameworkCallbacks._itemsControl_ClearVisualChildren = null;
$asm02.MS.Internal.FrameworkCallbacks._itemsControl_DisplayMemberPathChanged = null;
$asm02.MS.Internal.FrameworkCallbacks._itemsControl_RecreateVisualChildren = null;
$asm02.MS.Internal.FrameworkCallbacks._itemsControl_NotifyAllItemsAdded = null;
$asm02.MS.Internal.FrameworkCallbacks._itemsControl_SetItemCollection = null;
$asm02.MS.Internal.FrameworkCallbacks._resolveTypeNameDelegate = null;
$asm02.MS.Internal.FrameworkCallbacks._ensureIsObjectOfType = null;
$asm02.MS.Internal.FrameworkCallbacks._typeIsAssignableFrom = null;
$asm02.MS.Internal.FrameworkCallbacks._measureOverride = null;
$asm02.MS.Internal.FrameworkCallbacks._arrangeOverride = null;
$asm02.MS.Internal.FrameworkCallbacks._updateResourceDelegate = null;
$asm02.MS.Internal.FrameworkCallbacks._createBindingExtensionDelegate = null;
$asm02.MS.Internal.FrameworkCallbacks._onCreateAutomationPeer = null;
$asm02.MS.Internal.FrameworkCallbacks._getAutomationPeerStringValue = null;
$asm02.MS.Internal.FrameworkCallbacks._getAutomationPeerIntValue = null;
$asm02.MS.Internal.FrameworkCallbacks._getAutomationPeerPointValue = null;
$asm02.MS.Internal.FrameworkCallbacks._getAutomationPeerRectValue = null;
$asm02.MS.Internal.FrameworkCallbacks._callAutomationPeerMethod = null;
$asm02.MS.Internal.FrameworkCallbacks._getAutomationPeerChildrenMethod = null;
$asm02.MS.Internal.FrameworkCallbacks._getAutomationPeerAPValue = null;
$asm02.MS.Internal.FrameworkCallbacks._automationPeerGetPattern = null;
$asm02.MS.Internal.FrameworkCallbacks._uiaPatternInvoke = null;
$asm02.MS.Internal.FrameworkCallbacks._uiaTextRangeInvoke = null;
$asm02.MS.Internal.FrameworkCallbacks._setTemplateEventRoot = null;
$asm02.MS.Internal.FrameworkCallbacks._getTemplateEventRoot = null;
$asm02.MS.Internal.FrameworkCallbacks._dependencyObject_EnterImplDelegate = null;
$asm02.MS.Internal.FrameworkCallbacks._dependencyObject_LeaveImplDelegate = null;
$asm02.MS.Internal.FrameworkCallbacks._triggerGCCollect = null;
$asm02.MS.Internal.FrameworkCallbacks._mediaStreamSource_OpenMedia = null;
$asm02.MS.Internal.FrameworkCallbacks._mediaStreamSource_CloseMedia = null;
$asm02.MS.Internal.FrameworkCallbacks._mediaStreamSource_Seek = null;
$asm02.MS.Internal.FrameworkCallbacks._mediaStreamSource_GetSample = null;
$asm02.MS.Internal.FrameworkCallbacks._mediaStreamSource_GetDiagnostic = null;
$asm02.MS.Internal.FrameworkCallbacks._mediaStreamSource_SwitchMediaStream = null;
$asm02.MS.Internal.FrameworkCallbacks._mediaStreamSource_GetAudioBufferLength = null;
$asm02.MS.Internal.FrameworkCallbacks._processMarkupExtensionDelegate = null;
$asm02.MS.Internal.FrameworkCallbacks._getCustomTypeIDFromObjectDelegate = null;
$asm02.MS.Internal.FrameworkCallbacks._getCustomTypeFullNameDelegate = null;
$asm02.MS.Internal.FrameworkCallbacks._getCustomPropertyIDDelegate = null;
$asm02.MS.Internal.FrameworkCallbacks._hasManagedNameProperty = null;
$asm02.MS.Internal.FrameworkCallbacks._getCustomPropertyDelegate = null;
$asm02.MS.Internal.FrameworkCallbacks._setCustomPropertyDelegate = null;
$asm02.MS.Internal.FrameworkCallbacks._setAnimatedValueDelegate = null;
$asm02.MS.Internal.FrameworkCallbacks._clearAnimatedValueDelegate = null;
$asm02.MS.Internal.FrameworkCallbacks._getTileLayerUrlDelegate = null;
$asm02.MS.Internal.FrameworkCallbacks._getTileLayerCountDelegate = null;
$asm02.MS.Internal.FrameworkCallbacks._getMSITileSourceInitParamsDelegate = null;
$asm02.MS.Internal.FrameworkCallbacks._getMaxTileBlendTimeDelegate = null;
$asm02.MS.Internal.FrameworkCallbacks._contentControl_OnContentChanged = null;
$asm02.MS.Internal.FrameworkCallbacks._popup_OnChildChanged = null;
$asm02.MS.Internal.FrameworkCallbacks._popup_AddManagedPeerReference = null;
$asm02.MS.Internal.FrameworkCallbacks._popup_RemoveManagedPeerReference = null;
$asm02.MS.Internal.FrameworkCallbacks._isCustomEventDelegate = null;
$asm02.MS.Internal.FrameworkCallbacks._textBox_EnableScrollViewerIntegration = null;
$asm02.MS.Internal.FrameworkCallbacks._textBox_SetScrollOffsetOnScrollViewer = null;
$asm02.MS.Internal.FrameworkCallbacks._textBox_TextWrappingChanged = null;
$asm02.MS.Internal.FrameworkCallbacks._textBox_GetViewportSize = null;
$asm02.MS.Internal.FrameworkCallbacks._navigationHelper_Navigate = null;
$asm02.MS.Internal.FrameworkCallbacks._hyperlink_OnClick = null;
$asm02.MS.Internal.FrameworkCallbacks._visualStateHelper_ChangeVisualState = null;
$asm02.MS.Internal.FrameworkCallbacks._error_ClearException = null;
$asm02.MS.Internal.FrameworkCallbacks._error_GetExceptionText = null;
$asm02.MS.Internal.FrameworkCallbacks._error_CallApplicationUEHandler = null;
$asm02.MS.Internal.FrameworkCallbacks._mediaElement_AcquireLicenseBegin = null;
$asm02.MS.Internal.FrameworkCallbacks._mediaElement_AcquireLicenseAbort = null;
$asm02.MS.Internal.FrameworkCallbacks._licenseAcquirer_AbortComplete = null;
$asm02.MS.Internal.FrameworkCallbacks._licenseAcquirer_DomainJoinRequired = null;
$asm02.MS.Internal.FrameworkCallbacks._licenseAcquirer_Complete = null;
$asm02.MS.Internal.FrameworkCallbacks._licenseAcquirer_ChallengeGenerated = null;
$asm02.MS.Internal.FrameworkCallbacks._clearPropertyDelegate = null;
$asm02.MS.Internal.FrameworkCallbacks._getCustomAttachedPropertyID = null;
$asm02.MS.Internal.FrameworkCallbacks._dependencyObject_setPeerReferenceToProperty = null;
$asm02.MS.Internal.FrameworkCallbacks._dependencyObject_addPeerReferenceToItemDelegate = null;
$asm02.MS.Internal.FrameworkCallbacks._dependencyObject_removePeerReferenceToItemDelegate = null;
$asm02.MS.Internal.FrameworkCallbacks._setRelativeSourceDelegate = null;
$asm02.MS.Internal.FrameworkCallbacks._dependencyObject_getManagedReferenceDelegate = null;
$asm02.MS.Internal.FrameworkCallbacks._dependencyObject_storeManagedReferenceToValueDelegate = null;
$asm02.MS.Internal.FrameworkCallbacks._easingFunction_easeDelegate = null;
$asm02.MS.Internal.FrameworkCallbacks._effect_getEffectMapping = null;
$asm02.MS.Internal.FrameworkCallbacks._effect_mapPoint = null;
$asm02.MS.Internal.FrameworkCallbacks._effect_mapPointInverse = null;
$asm02.MS.Internal.FrameworkCallbacks._effect_mapRect = null;
$asm02.MS.Internal.FrameworkCallbacks._effect_mapRectInverse = null;
$asm02.MS.Internal.FrameworkCallbacks._isoStorageIncreaseQuotaToDelegate = null;
$asm02.MS.Internal.FrameworkCallbacks._richTextBox_EnableScrollViewerIntegration = null;
$asm02.MS.Internal.FrameworkCallbacks._richTextBox_GetViewportSize = null;
$asm02.MS.Internal.FrameworkCallbacks._richTextBox_TextWrappingChanged = null;
$asm02.MS.Internal.FrameworkCallbacks._richTextBox_Clipboard_Element = null;
$asm02.MS.Internal.FrameworkCallbacks._richTextBox_Clipboard_String = null;
$asm02.MS.Internal.FrameworkCallbacks._richTextBox_Clipboard_End = null;
$asm02.MS.Internal.FrameworkCallbacks._window_FireClosingEvent = null;
$asm02.MS.Internal.FrameworkCallbacks._isWellFormedUriStringDelegateInstance = null;
$asm02.MS.Internal.FrameworkCallbacks._xamlSchemaContext_EnsureManagedAssemblyAttributesLoaded = null;
$asm02.MS.Internal.FrameworkCallbacks._getCollectionForDependencyObjectCollection = null;
$asm02.MS.Internal.FrameworkCallbacks._cctor = function () {
	$asm02.MS.Internal.FrameworkCallbacks.EnglishUSCulture = JSIL.New(System.Globalization.CultureInfo, "_ctor$0", ["en-us"]);
	$asm02.MS.Internal.FrameworkCallbacks._callbacksSet = false;
	$asm02.MS.Internal.FrameworkCallbacks._defaultManagedTypeMap = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.String, System.Type), "_ctor$0", []);
	$asm02.MS.Internal.FrameworkCallbacks._cachedTypeConverterForMember = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.Object, System.ComponentModel.TypeConverter), "_ctor$0", []);
	$asm02.MS.Internal.FrameworkCallbacks._cachedTypeConverterForType = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.Type, System.ComponentModel.TypeConverter), "_ctor$0", []);
	$asm02.MS.Internal.FrameworkCallbacks._createUnknownObjectDelegate = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/CreateUnknownObjectDelegate", null, $asm02.MS.Internal.FrameworkCallbacks.CreateUnknownObject);
	$asm02.MS.Internal.FrameworkCallbacks._createKnownObjectDelegate = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/CreateKnownObjectDelegate", null, $asm02.MS.Internal.FrameworkCallbacks.CreateKnownObject);
	$asm02.MS.Internal.FrameworkCallbacks._createWrapperObjectDelegate = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/CreateWrapperObjectDelegate", null, $asm02.MS.Internal.FrameworkCallbacks.CreateWrapperObject);
	$asm02.MS.Internal.FrameworkCallbacks._invalidatePropertyDelegate = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/InvalidatePropertyDelegate", null, $asm02.MS.Internal.FrameworkCallbacks.InvalidateProperty);
	$asm02.MS.Internal.FrameworkCallbacks._setPropertyAttributeDelegate = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/SetPropertyAttributeDelegate", null, $asm02.MS.Internal.FrameworkCallbacks.SetPropertyAttribute);
	$asm02.MS.Internal.FrameworkCallbacks._setEventAttributeDelegate = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/SetEventAttributeDelegate", null, $asm02.MS.Internal.FrameworkCallbacks.SetEventAttribute);
	$asm02.MS.Internal.FrameworkCallbacks._setPropertyDelegate = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/SetPropertyDelegate", null, $asm02.MS.Internal.FrameworkCallbacks.SetProperty);
	$asm02.MS.Internal.FrameworkCallbacks._checkPeerTypeDelegate = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/CheckPeerTypeDelegate", null, $asm02.MS.Internal.FrameworkCallbacks.CheckPeerType);
	$asm02.MS.Internal.FrameworkCallbacks._setContentDelegate = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/SetContentDelegate", null, $asm02.MS.Internal.FrameworkCallbacks.SetContent);
	$asm02.MS.Internal.FrameworkCallbacks._getTypeFlagsDelegate = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/GetTypeFlagsDelegate", null, $asm02.MS.Internal.FrameworkCallbacks.GetTypeFlags);
	$asm02.MS.Internal.FrameworkCallbacks._getRootAssemblyNameDelegate = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/GetRootAssemblyNameDelegate", null, $asm02.MS.Internal.FrameworkCallbacks.GetRootAssemblyName);
	$asm02.MS.Internal.FrameworkCallbacks._supportInitializeEndInitDelegate = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/SupportInitializeEndInitDelegate", null, $asm02.MS.Internal.FrameworkCallbacks.SupportInitializeEndInit);
	$asm02.MS.Internal.FrameworkCallbacks._shutdownAllPeersDelegate = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/ShutdownAllPeersDelegate", null, $asm02.MS.Internal.FrameworkCallbacks.ShutdownAllPeers);
	$asm02.MS.Internal.FrameworkCallbacks._peerTreeUpdateDelegate = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/PeerTreeUpdateDelegate", null, $asm02.MS.Internal.FrameworkCallbacks.ManagedPeerTreeUpdate);
	$asm02.MS.Internal.FrameworkCallbacks._createManagedPeerDelegate = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/CreateManagedPeerDelegate", null, $asm02.MS.Internal.FrameworkCallbacks.CreateManagedPeer);
	$asm02.MS.Internal.FrameworkCallbacks._unpegManagedPeerNoRefDelegate = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/UnpegManagedPeerNoRefDelegate", null, $asm02.MS.Internal.FrameworkCallbacks.UnpegManagedPeerNoRef);
	$asm02.MS.Internal.FrameworkCallbacks._pegManagedPeerNoRefDelegate = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/PegManagedPeerNoRefDelegate", null, $asm02.MS.Internal.FrameworkCallbacks.PegManagedPeerNoRef);
	$asm02.MS.Internal.FrameworkCallbacks._fireEventDelegate = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/FireEventDelegate", null, $asm02.MS.Internal.JoltHelper.FireEvent);
	$asm02.MS.Internal.FrameworkCallbacks._pegManagedPeerDelegate = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/PegManagedPeerDelegate", null, $asm02.MS.Internal.ManagedPeerTable.PegManagedPeer);
	$asm02.MS.Internal.FrameworkCallbacks._unpegManagedPeerDelegate = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/UnpegManagedPeerDelegate", null, $asm02.MS.Internal.ManagedPeerTable.UnpegManagedPeer);
	$asm02.MS.Internal.FrameworkCallbacks._loadAssemblyDelegate = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/LoadAssemblyDelegate", null, $asm02.MS.Internal.JoltHelper.LoadAssembly$0);
	$asm02.MS.Internal.FrameworkCallbacks._loadAssemblyNativeDelegate = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/LoadAssemblyDelegate", null, $asm02.MS.Internal.JoltHelper.LoadAssemblyNative);
	$asm02.MS.Internal.FrameworkCallbacks._setCultureDelegate = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/SetCultureDelegate", null, $asm02.MS.Internal.JoltHelper.SetCulture);
	$asm02.MS.Internal.FrameworkCallbacks._getResourceFromAssemblyDelegate = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/GetResourceFromAssemblyDelegate", null, $asm02.MS.Internal.JoltHelper.GetResourceFromAssembly);
	$asm02.MS.Internal.FrameworkCallbacks._setBindingForObjectDelegate = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/SetBindingForObjectDelegate", null, $asm02.MS.Internal.FrameworkCallbacks.SetBindingForObject);
	$asm02.MS.Internal.FrameworkCallbacks._frameworkElement_OnApplyTemplateDelegate = JSIL.Delegate.New("System.Windows.FrameworkElement/OnApplyTemplateDelegate", null, System.Windows.FrameworkElement.OnApplyTemplate);
	$asm02.MS.Internal.FrameworkCallbacks._control_GetBuiltInStyleDelegate = JSIL.Delegate.New("System.Windows.Controls.Control/GetBuiltInStyleDelegate", null, System.Windows.Controls.Control.GetBuiltInStyle);
	$asm02.MS.Internal.FrameworkCallbacks._raiseEventDelegate = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/RaiseEventDelegate", null, $asm02.MS.Internal.JoltHelper.RaiseEvent);
	$asm02.MS.Internal.FrameworkCallbacks._setTemplateBinding = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/SetTemplateBindingDelegate", null, $asm02.MS.Internal.FrameworkCallbacks.SetTemplateBinding);
	$asm02.MS.Internal.FrameworkCallbacks._setTemplateBindingCustomToCore = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/SetTemplateBindingCustomToCoreDelegate", null, $asm02.MS.Internal.FrameworkCallbacks.SetTemplateBindingCustomToCore);
	$asm02.MS.Internal.FrameworkCallbacks._setTemplateBindingCoreToCustom = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/SetTemplateBindingCoreToCustomDelegate", null, $asm02.MS.Internal.FrameworkCallbacks.SetTemplateBindingCoreToCustom);
	$asm02.MS.Internal.FrameworkCallbacks._setTemplateBindingCustomToCustom = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/SetTemplateBindingCustomToCustomDelegate", null, $asm02.MS.Internal.FrameworkCallbacks.SetTemplateBindingCustomToCustom);
	$asm02.MS.Internal.FrameworkCallbacks._displayMemberTemplate_BindText = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/DisplayMemberTemplate_BindTextDelegate", null, $asm02.MS.Internal.DisplayMemberTemplate.BindText);
	$asm02.MS.Internal.FrameworkCallbacks._itemsControl_ClearVisualChildren = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/ItemsControl_ClearVisualChildrenDelegate", null, System.Windows.Controls.ItemsControl.ClearVisualChildren);
	$asm02.MS.Internal.FrameworkCallbacks._itemsControl_DisplayMemberPathChanged = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/ItemsControl_DisplayMemberPathChangedDelegate", null, System.Windows.Controls.ItemsControl.DisplayMemberPathChanged);
	$asm02.MS.Internal.FrameworkCallbacks._itemsControl_RecreateVisualChildren = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/ItemsControl_RecreateVisualChildrenDelegate", null, System.Windows.Controls.ItemsControl.RecreateVisualChildren);
	$asm02.MS.Internal.FrameworkCallbacks._itemsControl_NotifyAllItemsAdded = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/ItemsControl_NotifyAllItemsAddedDelegate", null, System.Windows.Controls.ItemsControl.NotifyAllItemsAdded);
	$asm02.MS.Internal.FrameworkCallbacks._itemsControl_SetItemCollection = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/ItemsControl_SetItemCollectionDelegate", null, System.Windows.Controls.ItemsControl.SetItemCollection);
	$asm02.MS.Internal.FrameworkCallbacks._resolveTypeNameDelegate = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/ResolveTypeNameDelegate", null, $asm02.MS.Internal.FrameworkCallbacks.ResolveTypeName);
	$asm02.MS.Internal.FrameworkCallbacks._ensureIsObjectOfType = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/EnsureIsObjectOfTypeDelegate", null, $asm02.MS.Internal.FrameworkCallbacks.EnsureIsObjectOfType);
	$asm02.MS.Internal.FrameworkCallbacks._typeIsAssignableFrom = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/TypeIsAssignableFromDelegate", null, $asm02.MS.Internal.FrameworkCallbacks.TypeIsAssignableFrom);
	$asm02.MS.Internal.FrameworkCallbacks._measureOverride = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/MeasureArrangeOverrideDelegate", null, System.Windows.FrameworkElement.MeasureOverride);
	$asm02.MS.Internal.FrameworkCallbacks._arrangeOverride = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/MeasureArrangeOverrideDelegate", null, System.Windows.FrameworkElement.ArrangeOverride);
	$asm02.MS.Internal.FrameworkCallbacks._updateResourceDelegate = JSIL.Delegate.New("System.Windows.ResourceDictionary/UpdateResourceDelegate", null, System.Windows.ResourceDictionary.UpdateResource);
	$asm02.MS.Internal.FrameworkCallbacks._createBindingExtensionDelegate = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/CreateBindingExtensionDelegate", null, $asm02.MS.Internal.FrameworkCallbacks.CreateBindingExtension);
	$asm02.MS.Internal.FrameworkCallbacks._onCreateAutomationPeer = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/OnCreateAutomationPeerDelegate", null, System.Windows.UIElement.OnCreateAutomationPeer);
	$asm02.MS.Internal.FrameworkCallbacks._getAutomationPeerStringValue = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/GetAutomationPeerStringValueDelegate", null, System.Windows.Automation.Peers.AutomationPeer.GetAutomationPeerStringValue);
	$asm02.MS.Internal.FrameworkCallbacks._getAutomationPeerIntValue = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/GetAutomationPeerIntValueDelegate", null, System.Windows.Automation.Peers.AutomationPeer.GetAutomationPeerIntValue);
	$asm02.MS.Internal.FrameworkCallbacks._getAutomationPeerPointValue = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/GetAutomationPeerPointValueDelegate", null, System.Windows.Automation.Peers.AutomationPeer.GetAutomationPeerPointValue);
	$asm02.MS.Internal.FrameworkCallbacks._getAutomationPeerRectValue = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/GetAutomationPeerRectValueDelegate", null, System.Windows.Automation.Peers.AutomationPeer.GetAutomationPeerRectValue);
	$asm02.MS.Internal.FrameworkCallbacks._getAutomationPeerAPValue = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/GetAutomationPeerAPValueDelegate", null, System.Windows.Automation.Peers.AutomationPeer.GetAutomationPeerAPValue);
	$asm02.MS.Internal.FrameworkCallbacks._callAutomationPeerMethod = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/CallAutomationPeerMethodDelegate", null, System.Windows.Automation.Peers.AutomationPeer.CallAutomationPeerMethod);
	$asm02.MS.Internal.FrameworkCallbacks._getAutomationPeerChildrenMethod = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/GetAutomationPeerChildren", null, System.Windows.Automation.Peers.AutomationPeer.GetAutomationPeerChildren);
	$asm02.MS.Internal.FrameworkCallbacks._automationPeerGetPattern = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/AutomationPeerGetPatternDelegate", null, System.Windows.Automation.Peers.AutomationPeer.GetPattern);
	$asm02.MS.Internal.FrameworkCallbacks._uiaPatternInvoke = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/UIAPatternInvokeDelegate", null, System.Windows.Automation.Peers.AutomationPeer.UIAPatternInvoke);
	$asm02.MS.Internal.FrameworkCallbacks._uiaTextRangeInvoke = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/UIATextRangeInvokeDelegate", null, System.Windows.Automation.Peers.AutomationPeer.UIATextRangeInvoke);
	$asm02.MS.Internal.FrameworkCallbacks._setTemplateEventRoot = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/SetTemplateEventRootDelegate", null, $asm02.MS.Internal.FrameworkCallbacks.SetTemplateEventRoot);
	$asm02.MS.Internal.FrameworkCallbacks._getTemplateEventRoot = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/GetTemplateEventRootDelegate", null, $asm02.MS.Internal.FrameworkCallbacks.GetTemplateEventRoot);
	$asm02.MS.Internal.FrameworkCallbacks._dependencyObject_EnterImplDelegate = JSIL.Delegate.New("System.Windows.DependencyObject/EnterImplDelegate", null, System.Windows.DependencyObject.EnterImpl);
	$asm02.MS.Internal.FrameworkCallbacks._dependencyObject_LeaveImplDelegate = JSIL.Delegate.New("System.Windows.DependencyObject/LeaveImplDelegate", null, System.Windows.DependencyObject.LeaveImpl);
	$asm02.MS.Internal.FrameworkCallbacks._triggerGCCollect = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/TriggerGCCollectDelegate", null, $asm02.MS.Internal.JoltHelper.TriggerGCCollect);
	$asm02.MS.Internal.FrameworkCallbacks._mediaStreamSource_OpenMedia = JSIL.Delegate.New("System.Windows.Controls.MediaElement/OpenMediaDelegate", null, System.Windows.Controls.MediaElement._OpenMedia);
	$asm02.MS.Internal.FrameworkCallbacks._mediaStreamSource_CloseMedia = JSIL.Delegate.New("System.Windows.Controls.MediaElement/CloseMediaDelegate", null, System.Windows.Controls.MediaElement._CloseMedia);
	$asm02.MS.Internal.FrameworkCallbacks._mediaStreamSource_Seek = JSIL.Delegate.New("System.Windows.Controls.MediaElement/SeekDelegate", null, System.Windows.Controls.MediaElement._Seek);
	$asm02.MS.Internal.FrameworkCallbacks._mediaStreamSource_GetSample = JSIL.Delegate.New("System.Windows.Controls.MediaElement/GetSampleDelegate", null, System.Windows.Controls.MediaElement._GetSample);
	$asm02.MS.Internal.FrameworkCallbacks._mediaStreamSource_GetDiagnostic = JSIL.Delegate.New("System.Windows.Controls.MediaElement/GetDiagnosticDelegate", null, System.Windows.Controls.MediaElement._GetDiagnostic);
	$asm02.MS.Internal.FrameworkCallbacks._mediaStreamSource_SwitchMediaStream = JSIL.Delegate.New("System.Windows.Controls.MediaElement/SwitchMediaStreamDelegate", null, System.Windows.Controls.MediaElement._SwitchMediaStream);
	$asm02.MS.Internal.FrameworkCallbacks._mediaStreamSource_GetAudioBufferLength = JSIL.Delegate.New("System.Windows.Controls.MediaElement/GetAudioBufferLengthDelegate", null, System.Windows.Controls.MediaElement._GetAudioBufferLength);
	$asm02.MS.Internal.FrameworkCallbacks._processMarkupExtensionDelegate = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/ProcessMarkupExtensionDelegate", null, $asm02.MS.Internal.FrameworkCallbacks.ProcessMarkupExtension);
	$asm02.MS.Internal.FrameworkCallbacks._getCustomTypeIDFromObjectDelegate = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/GetCustomTypeIDFromObjectDelegate", null, $asm02.MS.Internal.FrameworkCallbacks.GetCustomTypeIDFromObject);
	$asm02.MS.Internal.FrameworkCallbacks._getCustomTypeFullNameDelegate = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/GetCustomTypeFullNameDelegate", null, $asm02.MS.Internal.FrameworkCallbacks.GetCustomTypeFullName);
	$asm02.MS.Internal.FrameworkCallbacks._getCustomPropertyIDDelegate = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/GetCustomPropertyIDDelegate", null, $asm02.MS.Internal.FrameworkCallbacks.GetCustomPropertyID);
	$asm02.MS.Internal.FrameworkCallbacks._hasManagedNameProperty = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/HasManagedNamePropertyDelegate", null, $asm02.MS.Internal.FrameworkCallbacks.HasManagedNameProperty);
	$asm02.MS.Internal.FrameworkCallbacks._getCustomPropertyDelegate = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/GetCustomPropertyDelegate", null, $asm02.MS.Internal.FrameworkCallbacks.GetCustomProperty);
	$asm02.MS.Internal.FrameworkCallbacks._setCustomPropertyDelegate = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/SetCustomPropertyDelegate", null, $asm02.MS.Internal.FrameworkCallbacks.SetCustomProperty);
	$asm02.MS.Internal.FrameworkCallbacks._setAnimatedValueDelegate = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/SetAnimatedValueDelegate", null, $asm02.MS.Internal.FrameworkCallbacks.SetAnimatedValue);
	$asm02.MS.Internal.FrameworkCallbacks._clearAnimatedValueDelegate = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/ClearAnimatedValueDelegate", null, $asm02.MS.Internal.FrameworkCallbacks.ClearAnimatedValue);
	$asm02.MS.Internal.FrameworkCallbacks._getTileLayerUrlDelegate = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/GetTileLayerUrlDelegate", null, System.Windows.Media.MultiScaleTileSource.GetTileLayerUrl);
	$asm02.MS.Internal.FrameworkCallbacks._getTileLayerCountDelegate = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/GetTileLayerCountDelegate", null, System.Windows.Media.MultiScaleTileSource.GetTileLayerCount);
	$asm02.MS.Internal.FrameworkCallbacks._getMSITileSourceInitParamsDelegate = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/GetMSITileSourceInitParamsDelegate", null, System.Windows.Media.MultiScaleTileSource.GetMSITileSourceInitParams);
	$asm02.MS.Internal.FrameworkCallbacks._getMaxTileBlendTimeDelegate = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/GetMaxTileBlendTimeDelegate", null, System.Windows.Media.MultiScaleTileSource.GetMaxTileBlendTime);
	$asm02.MS.Internal.FrameworkCallbacks._contentControl_OnContentChanged = JSIL.Delegate.New("System.Windows.Controls.ContentControl/OnContentChangedDelegate", null, System.Windows.Controls.ContentControl.OnContentChanged);
	$asm02.MS.Internal.FrameworkCallbacks._popup_OnChildChanged = JSIL.Delegate.New("System.Windows.Controls.Primitives.Popup/OnChildChangedDelegate", null, System.Windows.Controls.Primitives.Popup.OnChildChanged);
	$asm02.MS.Internal.FrameworkCallbacks._popup_AddManagedPeerReference = JSIL.Delegate.New("System.Windows.Controls.Primitives.Popup/AddRemoveManagedPeerReferenceDelegate", null, System.Windows.Controls.Primitives.Popup.AddManagedPeerReference);
	$asm02.MS.Internal.FrameworkCallbacks._popup_RemoveManagedPeerReference = JSIL.Delegate.New("System.Windows.Controls.Primitives.Popup/AddRemoveManagedPeerReferenceDelegate", null, System.Windows.Controls.Primitives.Popup.RemoveManagedPeerReference);
	$asm02.MS.Internal.FrameworkCallbacks._isCustomEventDelegate = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/IsCustomEventDelegate", null, $asm02.MS.Internal.FrameworkCallbacks.IsCustomEvent);
	$asm02.MS.Internal.FrameworkCallbacks._textBox_EnableScrollViewerIntegration = JSIL.Delegate.New("System.Windows.Controls.TextBox/EnableScrollViewerIntegrationDelegate", null, System.Windows.Controls.TextBox.EnableScrollViewerIntegration);
	$asm02.MS.Internal.FrameworkCallbacks._textBox_SetScrollOffsetOnScrollViewer = JSIL.Delegate.New("System.Windows.Controls.TextBox/SetScrollOffsetOnScrollViewerDelegate", null, System.Windows.Controls.TextBox.SetScrollOffsetOnScrollViewer);
	$asm02.MS.Internal.FrameworkCallbacks._textBox_TextWrappingChanged = JSIL.Delegate.New("System.Windows.Controls.TextBox/TextWrappingChangedDelegate", null, System.Windows.Controls.TextBox.TextWrappingChanged);
	$asm02.MS.Internal.FrameworkCallbacks._textBox_GetViewportSize = JSIL.Delegate.New("System.Windows.Controls.TextBox/GetViewportSizeDelegate", null, System.Windows.Controls.TextBox.GetViewportSize);
	$asm02.MS.Internal.FrameworkCallbacks._navigationHelper_Navigate = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/NavigationHelper_NavigateDelegate", null, $asm02.MS.Internal.FrameworkCallbacks.NavigationHelper_Navigate);
	$asm02.MS.Internal.FrameworkCallbacks._hyperlink_OnClick = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/Hyperlink_OnClickDelegate", null, $asm02.MS.Internal.FrameworkCallbacks.Hyperlink_OnClick);
	$asm02.MS.Internal.FrameworkCallbacks._visualStateHelper_ChangeVisualState = JSIL.Delegate.New("System.Windows.Controls.VisualStates/ChangeVisualStateDelegate", null, $asm02.System.Windows.Controls.VisualStates.ChangeControlVisualState);
	$asm02.MS.Internal.FrameworkCallbacks._error_ClearException = JSIL.Delegate.New("MS.Internal.Error/ClearExceptionDelegate", null, $asm02.MS.Internal.Error.ClearException);
	$asm02.MS.Internal.FrameworkCallbacks._error_GetExceptionText = JSIL.Delegate.New("MS.Internal.Error/GetExceptionTextDelegate", null, $asm02.MS.Internal.Error.GetExceptionText);
	$asm02.MS.Internal.FrameworkCallbacks._error_CallApplicationUEHandler = JSIL.Delegate.New("MS.Internal.Error/CallAUEHandlerDelegate", null, $asm02.MS.Internal.Error.CallAUEHandler);
	$asm02.MS.Internal.FrameworkCallbacks._mediaElement_AcquireLicenseBegin = JSIL.Delegate.New("System.Windows.Controls.MediaElement/AcquireLicenseBeginDelegate", null, System.Windows.Controls.MediaElement._AcquireLicenseBegin);
	$asm02.MS.Internal.FrameworkCallbacks._mediaElement_AcquireLicenseAbort = JSIL.Delegate.New("System.Windows.Controls.MediaElement/AcquireLicenseAbortDelegate", null, System.Windows.Controls.MediaElement._AcquireLicenseAbort);
	$asm02.MS.Internal.FrameworkCallbacks._licenseAcquirer_AbortComplete = JSIL.Delegate.New("System.Windows.Media.LicenseAcquirer/AbortCompleteDelegate", null, System.Windows.Media.LicenseAcquirer._AbortComplete);
	$asm02.MS.Internal.FrameworkCallbacks._licenseAcquirer_DomainJoinRequired = JSIL.Delegate.New("System.Windows.Media.LicenseAcquirer/DomainJoinRequiredDelegate", null, System.Windows.Media.LicenseAcquirer._DomainJoinRequired);
	$asm02.MS.Internal.FrameworkCallbacks._licenseAcquirer_Complete = JSIL.Delegate.New("System.Windows.Media.LicenseAcquirer/CompleteDelegate", null, System.Windows.Media.LicenseAcquirer._Complete);
	$asm02.MS.Internal.FrameworkCallbacks._licenseAcquirer_ChallengeGenerated = JSIL.Delegate.New("System.Windows.Media.LicenseAcquirer/ChallengeGeneratedDelegate", null, System.Windows.Media.LicenseAcquirer._ChallengeGenerated);
	$asm02.MS.Internal.FrameworkCallbacks._clearPropertyDelegate = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/ClearPropertyDelegate", null, $asm02.MS.Internal.FrameworkCallbacks.ClearProperty);
	$asm02.MS.Internal.FrameworkCallbacks._getCustomAttachedPropertyID = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/GetCustomAttachedPropertyIDDelegate", null, $asm02.MS.Internal.FrameworkCallbacks.GetCustomAttachedPropertyID);
	$asm02.MS.Internal.FrameworkCallbacks._dependencyObject_setPeerReferenceToProperty = JSIL.Delegate.New("System.Windows.DependencyObject/SetPeerReferenceToPropertyDelegate", null, System.Windows.DependencyObject.SetPeerReferenceToProperty);
	$asm02.MS.Internal.FrameworkCallbacks._dependencyObject_addPeerReferenceToItemDelegate = JSIL.Delegate.New("System.Windows.DependencyObject/AddPeerReferenceToItemDelegate", null, System.Windows.DependencyObject.AddPeerReferenceToItem);
	$asm02.MS.Internal.FrameworkCallbacks._dependencyObject_removePeerReferenceToItemDelegate = JSIL.Delegate.New("System.Windows.DependencyObject/RemovePeerReferenceToItemDelegate", null, System.Windows.DependencyObject.RemovePeerReferenceToItem);
	$asm02.MS.Internal.FrameworkCallbacks._setRelativeSourceDelegate = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/SetRelativeSourceDelegate", null, $asm02.MS.Internal.FrameworkCallbacks.SetRelativeSource);
	$asm02.MS.Internal.FrameworkCallbacks._dependencyObject_getManagedReferenceDelegate = JSIL.Delegate.New("System.Windows.DependencyObject/GetManagedReferenceDelegate", null, System.Windows.DependencyObject.GetManagedReference);
	$asm02.MS.Internal.FrameworkCallbacks._dependencyObject_storeManagedReferenceToValueDelegate = JSIL.Delegate.New("System.Windows.DependencyObject/StoreManagedReferenceToValueDelegate", null, System.Windows.DependencyObject.StoreManagedReferenceToValue);
	$asm02.MS.Internal.FrameworkCallbacks._easingFunction_easeDelegate = JSIL.Delegate.New("System.Windows.Media.Animation.EasingFunctionBase/EaseDelegate", null, System.Windows.Media.Animation.EasingFunctionBase.EaseManaged);
	$asm02.MS.Internal.FrameworkCallbacks._effect_getEffectMapping = JSIL.Delegate.New("System.Windows.Media.Effects.Effect/GetEffectMappingDelegate", null, System.Windows.Media.Effects.Effect.GetEffectMapping);
	$asm02.MS.Internal.FrameworkCallbacks._effect_mapPoint = JSIL.Delegate.New("System.Windows.Media.Effects.Effect/MapPointDelegate", null, System.Windows.Media.Effects.Effect.MapPoint$1);
	$asm02.MS.Internal.FrameworkCallbacks._effect_mapPointInverse = JSIL.Delegate.New("System.Windows.Media.Effects.Effect/MapPointInverseDelegate", null, System.Windows.Media.Effects.Effect.MapPointInverse);
	$asm02.MS.Internal.FrameworkCallbacks._effect_mapRect = JSIL.Delegate.New("System.Windows.Media.Effects.Effect/MapRectDelegate", null, System.Windows.Media.Effects.Effect.MapRect$1);
	$asm02.MS.Internal.FrameworkCallbacks._effect_mapRectInverse = JSIL.Delegate.New("System.Windows.Media.Effects.Effect/MapRectInverseDelegate", null, System.Windows.Media.Effects.Effect.MapRectInverse);
	$asm02.MS.Internal.FrameworkCallbacks._isoStorageIncreaseQuotaToDelegate = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/IsoStorageIncreaseQuotaToDelegate", null, $asm02.MS.Internal.FrameworkCallbacks.IsoStorageIncreaseQuotaTo);
	$asm02.MS.Internal.FrameworkCallbacks._richTextBox_EnableScrollViewerIntegration = JSIL.Delegate.New("System.Windows.Controls.RichTextBox/EnableScrollViewerIntegrationDelegate", null, System.Windows.Controls.RichTextBox.EnableScrollViewerIntegration);
	$asm02.MS.Internal.FrameworkCallbacks._richTextBox_GetViewportSize = JSIL.Delegate.New("System.Windows.Controls.RichTextBox/GetViewportSizeDelegate", null, System.Windows.Controls.RichTextBox.GetViewportSize);
	$asm02.MS.Internal.FrameworkCallbacks._richTextBox_TextWrappingChanged = JSIL.Delegate.New("System.Windows.Controls.RichTextBox/TextWrappingChangedDelegate", null, System.Windows.Controls.RichTextBox.TextWrappingChanged);
	$asm02.MS.Internal.FrameworkCallbacks._richTextBox_Clipboard_Element = JSIL.Delegate.New("System.Windows.Controls.RichTextBox/ClipboardElementDelegate", null, System.Windows.Controls.RichTextBox.ClipboardElement);
	$asm02.MS.Internal.FrameworkCallbacks._richTextBox_Clipboard_String = JSIL.Delegate.New("System.Windows.Controls.RichTextBox/ClipboardStringDelegate", null, System.Windows.Controls.RichTextBox.ClipboardString);
	$asm02.MS.Internal.FrameworkCallbacks._richTextBox_Clipboard_End = JSIL.Delegate.New("System.Windows.Controls.RichTextBox/ClipboardEndDelegate", null, System.Windows.Controls.RichTextBox.ClipboardEnd);
	$asm02.MS.Internal.FrameworkCallbacks._window_FireClosingEvent = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/Window_FireClosingEventDelegate", null, System.Windows.Window.FireClosingEvent);
	$asm02.MS.Internal.FrameworkCallbacks._isWellFormedUriStringDelegateInstance = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/IsWellFormedUriStringDelegate", null, $asm02.MS.Internal.FrameworkCallbacks.IsWellFormedUriString);
	$asm02.MS.Internal.FrameworkCallbacks._xamlSchemaContext_EnsureManagedAssemblyAttributesLoaded = JSIL.Delegate.New("MS.Internal.XamlSchemaContext/EnsureManagedAssemblyAttributesLoadedDelegate", null, $asm02.MS.Internal.XamlSchemaContext.EnsureManagedAssemblyAttributesLoaded);
	$asm02.MS.Internal.FrameworkCallbacks._getCollectionForDependencyObjectCollection = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/GetCollectionForDependencyObjectCollectionDelegate", null, $asm02.MS.Internal.FrameworkCallbacks.GetCollectionForDependencyObjectCollection);
};

System.Collections.ObjectModel.ObservableCollection$b1.prototype.add_CollectionChanged = function (value) {
	this.CollectionChanged = System.Delegate.Combine(this.CollectionChanged, value);
};
System.Collections.ObjectModel.ObservableCollection$b1.prototype.remove_CollectionChanged = function (value) {
	this.CollectionChanged = System.Delegate.Remove(this.CollectionChanged, value);
};
System.Collections.ObjectModel.ObservableCollection$b1.prototype._ctor$0 = function () {
	System.Collections.ObjectModel.Collection$b1.Of(this.T).prototype._ctor$0.call(this);
};
System.Collections.ObjectModel.ObservableCollection$b1.prototype._ctor$1 = function (collection) {
	System.Collections.ObjectModel.Collection$b1.Of(this.T).prototype._ctor$0.call(this);
	if (collection === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["collection"]);
	}
	this.CopyFrom(collection);
};
System.Collections.ObjectModel.ObservableCollection$b1.prototype._ctor$2 = function (list) {
	System.Collections.ObjectModel.Collection$b1.Of(this.T).prototype._ctor$1.call(this, list ? new (System.Collections.Generic.List$b1.Of(this.T)) (list.Count) : list);
	this.CopyFrom(list);
};
System.Collections.ObjectModel.ObservableCollection$b1.prototype.CopyFrom = function (collection) {
	var items = System.Collections.ObjectModel.Collection$b1.Of(this.T).prototype.get_Items.call(this);
	if (!((collection === null) || (items === null))) {
		var enumerator = collection.IEnumerable$b1_GetEnumerator();
		try {
		__loop0__: 
			while (enumerator.IEnumerator_MoveNext()) {
				items.ICollection$b1_Add(enumerator.IEnumerator$b1_Current);
			}
		} finally {
			if (enumerator !== null) {
				enumerator.IDisposable_Dispose();
			}
		}
	}
};
System.Collections.ObjectModel.ObservableCollection$b1.prototype.OnCollectionChanged = function (e) {
	if (this.CollectionChanged !== null) {
		this._busy = true;
		try {
			this.CollectionChanged(this, e);
		} finally {
			this._busy = false;
		}
	}
};
System.Collections.ObjectModel.ObservableCollection$b1.prototype.CheckReentrancy = function () {
	if (this._busy) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("ObservableCollection_CannotChangeObservableCollection")]);
	}
};
System.Collections.ObjectModel.ObservableCollection$b1.prototype.INotifyPropertyChanged_add_PropertyChanged = function (value) {
	this.PropertyChanged = System.Delegate.Combine(this.PropertyChanged, value);
};
System.Collections.ObjectModel.ObservableCollection$b1.prototype.INotifyPropertyChanged_remove_PropertyChanged = function (value) {
	this.PropertyChanged = System.Delegate.Remove(this.PropertyChanged, value);
};
System.Collections.ObjectModel.ObservableCollection$b1.prototype.add_PropertyChanged = function (value) {
	this.PropertyChanged = System.Delegate.Combine(this.PropertyChanged, value);
};
System.Collections.ObjectModel.ObservableCollection$b1.prototype.remove_PropertyChanged = function (value) {
	this.PropertyChanged = System.Delegate.Remove(this.PropertyChanged, value);
};
System.Collections.ObjectModel.ObservableCollection$b1.prototype.OnPropertyChanged$0 = function (e) {
	if (this.PropertyChanged !== null) {
		this._busy = true;
		try {
			this.PropertyChanged(this, e);
		} finally {
			this._busy = false;
		}
	}
};
System.Collections.ObjectModel.ObservableCollection$b1.prototype.OnPropertyChanged$1 = function (propertyName) {
	this.OnPropertyChanged$0(new System.ComponentModel.PropertyChangedEventArgs(propertyName));
};
System.Collections.ObjectModel.ObservableCollection$b1.prototype.ClearItems = function () {
	this.CheckReentrancy();
	System.Collections.ObjectModel.Collection$b1.Of(this.T).prototype.ClearItems.call(this);
	this.OnPropertyChanged$1("Count");
	this.OnPropertyChanged$1("Item[]");
	this.OnCollectionChanged(JSIL.New(System.Collections.Specialized.NotifyCollectionChangedEventArgs, "_ctor$0", [System.Collections.Specialized.NotifyCollectionChangedAction.Reset]));
};
System.Collections.ObjectModel.ObservableCollection$b1.prototype.RemoveItem = function (index) {
	this.CheckReentrancy();
	var t = System.Collections.ObjectModel.Collection$b1.Of(this.T).prototype.get_Item.call(this, index);
	System.Collections.ObjectModel.Collection$b1.Of(this.T).prototype.RemoveItem.call(this, index);
	this.OnPropertyChanged$1("Count");
	this.OnPropertyChanged$1("Item[]");
	this.OnCollectionChanged(JSIL.New(System.Collections.Specialized.NotifyCollectionChangedEventArgs, "_ctor$1", [System.Collections.Specialized.NotifyCollectionChangedAction.Remove, t, index]));
};
System.Collections.ObjectModel.ObservableCollection$b1.prototype.InsertItem = function (index, item) {
	this.CheckReentrancy();
	System.Collections.ObjectModel.Collection$b1.Of(this.T).prototype.InsertItem.call(this, index, item);
	this.OnPropertyChanged$1("Count");
	this.OnPropertyChanged$1("Item[]");
	this.OnCollectionChanged(JSIL.New(System.Collections.Specialized.NotifyCollectionChangedEventArgs, "_ctor$1", [System.Collections.Specialized.NotifyCollectionChangedAction.Add, item, index]));
};
System.Collections.ObjectModel.ObservableCollection$b1.prototype.SetItem = function (index, item) {
	this.CheckReentrancy();
	var t = System.Collections.ObjectModel.Collection$b1.Of(this.T).prototype.get_Item.call(this, index);
	System.Collections.ObjectModel.Collection$b1.Of(this.T).prototype.SetItem.call(this, index, item);
	this.OnPropertyChanged$1("Item[]");
	this.OnCollectionChanged(JSIL.New(System.Collections.Specialized.NotifyCollectionChangedEventArgs, "_ctor$2", [System.Collections.Specialized.NotifyCollectionChangedAction.Replace, item, t, index]));
};
JSIL.OverloadedMethod(System.Collections.ObjectModel.ObservableCollection$b1.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType)]], 
		["_ctor$2", [System.Collections.Generic.List$b1.Of(JSIL.AnyType)]]
	]);
JSIL.OverloadedMethod(System.Collections.ObjectModel.ObservableCollection$b1.prototype, "OnPropertyChanged", [
		["OnPropertyChanged$0", [System.ComponentModel.PropertyChangedEventArgs]], 
		["OnPropertyChanged$1", [System.String]]
	]);
System.Collections.ObjectModel.ObservableCollection$b1.prototype.CollectionChanged = null;
System.Collections.ObjectModel.ObservableCollection$b1.prototype._busy = false;
System.Collections.ObjectModel.ObservableCollection$b1.prototype.PropertyChanged = null;

$asm02.MS.Internal.Silverlight.Test.OutOfBrowserTestHelper.TakeOutOfBrowser = function () {
	return $asm02.MS.Internal.XcpImports.Application_Install(System.Windows.Application.Current, true);
};
$asm02.MS.Internal.Silverlight.Test.OutOfBrowserTestHelper.VerifyAuthenticodeSignature = function (/* ref */ signatureResult, /* ref */ trustResult, /* ref */ subjectName) {
	$asm02.MS.Internal.XcpImports.Application_VerifyAuthenticodeSignature(/* ref */ signatureResult, /* ref */ trustResult, /* ref */ subjectName);
};

System.Windows.Point.prototype._ctor = function (x, y) {
	this._x = x;
	this._y = y;
};
System.Windows.Point.prototype.toString = function () {
	return this.ConvertToString(null, null);
};
System.Windows.Point.prototype.ToString = function (provider) {
	return this.ConvertToString(null, provider);
};
System.Windows.Point.prototype.IFormattable_ToString = function (format, provider) {
	return this.ConvertToString(format, provider);
};
System.Windows.Point.prototype.ConvertToString = function (format, provider) {
	var numericListSeparator = $asm02.MS.Internal.TokenizerHelper.GetNumericListSeparator(provider);
	return System.String.Format(provider, JSIL.ConcatString.apply(null, JSIL.Array.New(System.String, ["{1:", format, "}{0}{2:", format, "}"])), [numericListSeparator, this._x, this._y]);
};
System.Windows.Point.op_Equality = function (point1, point2) {
	return ((point1.X === point2.X) && (point1.Y === point2.Y));
};
System.Windows.Point.op_Inequality = function (point1, point2) {
	return !System.Windows.Point.op_Equality(point1, point2);
};
System.Windows.Point.prototype.Equals$0 = function (o) {
	if (!((o !== null) && JSIL.TryCast(o, System.Windows.Point))) {
		return false;
	}
	var point = JSIL.Cast(o, System.Windows.Point).MemberwiseClone();
	return System.Windows.Point.op_Equality(this.MemberwiseClone(), point.MemberwiseClone());
};
System.Windows.Point.prototype.Equals$1 = function (value) {
	return System.Windows.Point.op_Equality(this.MemberwiseClone(), value);
};
System.Windows.Point.prototype.GetHashCode = function () {
	return (this.X.GetHashCode() ^ this.Y.GetHashCode());
};
System.Windows.Point.prototype.get_X = function () {
	return this._x;
};
System.Windows.Point.prototype.set_X = function (value) {
	this._x = value;
};
System.Windows.Point.prototype.get_Y = function () {
	return this._y;
};
System.Windows.Point.prototype.set_Y = function (value) {
	this._y = value;
};
JSIL.OverloadedMethod(System.Windows.Point.prototype, "Equals", [
		["Equals$0", [System.Object]], 
		["Equals$1", [System.Windows.Point]]
	]);
JSIL.MakeProperty(System.Windows.Point.prototype, "X", 
	System.Windows.Point.prototype.get_X, System.Windows.Point.prototype.set_X);
JSIL.MakeProperty(System.Windows.Point.prototype, "Y", 
	System.Windows.Point.prototype.get_Y, System.Windows.Point.prototype.set_Y);
System.Windows.Point.prototype._x = 0;
System.Windows.Point.prototype._y = 0;

$asm02.System.Windows.PropertyAccessPathStep.prototype._ctor$0 = function (listener, source, propertyName, listenToChanges) {
	$asm02.System.Windows.PropertyPathStep.prototype._ctor.call(this, listener);
	this._source = source;
	this._propertyName = propertyName;
	this._listenToChanges = listenToChanges;
	this.ConnectToProperty();
};
$asm02.System.Windows.PropertyAccessPathStep.prototype._ctor$1 = function (listener, source, property, listenToChanges) {
	$asm02.System.Windows.PropertyPathStep.prototype._ctor.call(this, listener);
	this._source = JSIL.TryCast(source, System.Windows.DependencyObject);
	this._property = property;
	this._propertyName = property.Name;
	this._listenToChanges = listenToChanges;
	this.ConnectToProperty();
};
$asm02.System.Windows.PropertyAccessPathStep.prototype.ReConnect = function (newSource) {
	this.Disconnect();
	this._source = newSource;
	this.ConnectToProperty();
};
$asm02.System.Windows.PropertyAccessPathStep.prototype.ConnectToProperty = function () {
	if (!((this._source !== null) && (this._source !== System.Windows.DependencyProperty.UnsetValue))) {
		return;
	}
	this.ConnectToPropertyInSource(false);
};
$asm02.System.Windows.PropertyAccessPathStep.prototype.GetRegisteredDependencyProperty = function (d, propertyName) {
	return System.Windows.DependencyProperty.GetRegisteredDependencyProperty(d, this._propertyName, null, null);
};
$asm02.System.Windows.PropertyAccessPathStep.prototype.ConnectToPropertyInSource = function (isSourceCollectionViewCurrentItem) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				if (!((this._source !== null) && (this._source !== System.Windows.DependencyProperty.UnsetValue))) {
					return false;
				}
				if (!((this._property === null) || (JSIL.TryCast(this._source, System.Windows.DependencyObject) === null))) {
					this._propertyListener = new $asm02.System.Windows.DependencyPropertyListener(this, this._property, JSIL.Cast(this._source, System.Windows.DependencyObject), this._listenToChanges);
				} else if (!((JSIL.TryCast(this._source, System.Windows.DependencyObject) === null) || !$asm02.MS.Internal.QuirksMode.ShouldSupportDependencyObjectAsPropertyPathSource())) {
					var dependencyObject = JSIL.Cast(this._source, System.Windows.DependencyObject);
					var dependencyProperty = System.Windows.DependencyProperty.LookupCoreProperty(this._propertyName, JSIL.GetType(dependencyObject));
					if (dependencyProperty === null) {
						dependencyProperty = this.GetRegisteredDependencyProperty(dependencyObject, this._propertyName);
					}
					if (dependencyProperty !== null) {
						this._propertyListener = new $asm02.System.Windows.DependencyPropertyListener(this, dependencyProperty, dependencyObject, this._listenToChanges);
					}
				}
				if (!(this._propertyListener || (this._propertyName === null))) {
					this._propertyListener = $asm02.System.Windows.CLRPropertyListener.CreateListener(this, this._propertyName, this._source, this._listenToChanges);
				}
				if (this._propertyListener !== null) {
					try {
						var arg_F1_0 = this._propertyListener.Value;
						__label0__ = "IL_2B9";
						continue __step0__;
					} catch ($exception) {
						var exception = $exception;
						if ($asm02.MS.Internal.Error.IsCriticalException(exception)) {
							throw $exception;
						}
						var propertyName = this._propertyListener.PropertyName;
						var text = this._propertyListener.Type.toString();
						var text2 = this._source ? this._source.toString() : "null";
						var text3 = this._source ? JSIL.GetType(this._source).toString() : "null";
						this.Disconnect();
						$asm02.MS.Internal.Trace.WriteLine(System.String.Format(System.Globalization.CultureInfo.CurrentCulture, $asm02.System.Windows.Resx.GetString$2("BindingExpression_GetterFailure"), [propertyName, text, text2, text3, $asm02.System.Windows.PropertyPathStep.prototype.get_Listener.call(this).TraceContext, $asm02.MS.Internal.InternalUtils.GetExceptionString(exception)]));
						__label0__ = "IL_2B9";
						continue __step0__;
					}
				}
				if (!isSourceCollectionViewCurrentItem) {
					var collectionView = JSIL.TryCast(this._source, System.ComponentModel.ICollectionView);
					if (collectionView !== null) {
						this._source = collectionView.ICollectionView_CurrentItem;
						this._collectionView = collectionView;
						this._collectionView.ICollectionView_add_CurrentChanged(JSIL.Delegate.New("System.EventHandler", this, $asm02.System.Windows.PropertyAccessPathStep.prototype.CurrentItemChanged));
						return this.ConnectToPropertyInSource(true);
					}
				}
				var text4 = this._source ? this._source.toString() : "null";
				var text5 = this._source ? JSIL.GetType(this._source).toString() : "null";
				var text6 = this._source ? (this._source.GetHashCode()).toString() : "0";
				$asm02.MS.Internal.Trace.WriteLine(System.String.Format(System.Globalization.CultureInfo.CurrentCulture, $asm02.System.Windows.Resx.GetString$2("BindingExpression_SourceConnectionFailure"), [this._propertyName, text4, text5, text6, $asm02.System.Windows.PropertyPathStep.prototype.get_Listener.call(this).TraceContext]));
				__label0__ = "IL_2B9";
				continue __step0__;
				break;
			case "IL_2B9":
				return (this._propertyListener !== null);
				break __step0__;
		}
	}
};
$asm02.System.Windows.PropertyAccessPathStep.prototype.RaisePropertyPathStepChanged = function (source) {
	$asm02.System.Windows.PropertyPathStep.prototype.get_Listener.call(this).RaisePropertyPathStepChanged(this);
};
$asm02.System.Windows.PropertyAccessPathStep.prototype.Disconnect = function () {
	this.DisconnectListener();
	if (this._collectionView !== null) {
		this._collectionView.ICollectionView_remove_CurrentChanged(JSIL.Delegate.New("System.EventHandler", this, $asm02.System.Windows.PropertyAccessPathStep.prototype.CurrentItemChanged));
	}
	this._collectionView = null;
	this._source = null;
};
$asm02.System.Windows.PropertyAccessPathStep.prototype.DisconnectListener = function () {
	if (this._propertyListener !== null) {
		this._propertyListener.Disconnect();
	}
	this._propertyListener = null;
};
$asm02.System.Windows.PropertyAccessPathStep.prototype.get_Value = function () {
	if (this._propertyListener !== null) {
		return this._propertyListener.Value;
	}
	return System.Windows.DependencyProperty.UnsetValue;
};
$asm02.System.Windows.PropertyAccessPathStep.prototype.set_Value = function (value) {
	this._propertyListener.Value = value;
};
$asm02.System.Windows.PropertyAccessPathStep.prototype.get_Source = function () {
	return this._source;
};
$asm02.System.Windows.PropertyAccessPathStep.prototype.get_Type = function () {
	return this._propertyListener.Type;
};
$asm02.System.Windows.PropertyAccessPathStep.prototype.get_IsConnected = function () {
	return (this._propertyListener !== null);
};
$asm02.System.Windows.PropertyAccessPathStep.prototype.get_Property = function () {
	return this._propertyListener.Property;
};
$asm02.System.Windows.PropertyAccessPathStep.prototype.get_PropertyName = function () {
	var propertyInfo = JSIL.TryCast(this.Property, System.Reflection.PropertyInfo);
	if (propertyInfo !== null) {
		return propertyInfo.Name;
	}
	var dependencyProperty = JSIL.TryCast(this.Property, System.Windows.DependencyProperty);
	if (dependencyProperty !== null) {
		return dependencyProperty.Name;
	}
	return System.String.Empty;
};
$asm02.System.Windows.PropertyAccessPathStep.prototype.CurrentItemChanged = function (o, e) {
	this.DisconnectListener();
	this._source = this._collectionView.ICollectionView_CurrentItem;
	this.ConnectToPropertyInSource(true);
	this.RaisePropertyPathStepChanged(null);
};
JSIL.OverloadedMethod($asm02.System.Windows.PropertyAccessPathStep.prototype, "_ctor", [
		["_ctor$0", [$asm02.System.Windows.PropertyPathListener, System.Object, System.String, System.Boolean]], 
		["_ctor$1", [$asm02.System.Windows.PropertyPathListener, System.Object, System.Windows.DependencyProperty, System.Boolean]]
	]);
JSIL.MakeProperty($asm02.System.Windows.PropertyAccessPathStep.prototype, "Value", 
	$asm02.System.Windows.PropertyAccessPathStep.prototype.get_Value, $asm02.System.Windows.PropertyAccessPathStep.prototype.set_Value);
JSIL.MakeProperty($asm02.System.Windows.PropertyAccessPathStep.prototype, "Source", 
	$asm02.System.Windows.PropertyAccessPathStep.prototype.get_Source, null);
JSIL.MakeProperty($asm02.System.Windows.PropertyAccessPathStep.prototype, "Type", 
	$asm02.System.Windows.PropertyAccessPathStep.prototype.get_Type, null);
JSIL.MakeProperty($asm02.System.Windows.PropertyAccessPathStep.prototype, "IsConnected", 
	$asm02.System.Windows.PropertyAccessPathStep.prototype.get_IsConnected, null);
JSIL.MakeProperty($asm02.System.Windows.PropertyAccessPathStep.prototype, "Property", 
	$asm02.System.Windows.PropertyAccessPathStep.prototype.get_Property, null);
JSIL.MakeProperty($asm02.System.Windows.PropertyAccessPathStep.prototype, "PropertyName", 
	$asm02.System.Windows.PropertyAccessPathStep.prototype.get_PropertyName, null);
$asm02.System.Windows.PropertyAccessPathStep.prototype._source = null;
$asm02.System.Windows.PropertyAccessPathStep.prototype._collectionView = null;
$asm02.System.Windows.PropertyAccessPathStep.prototype._propertyName = null;
$asm02.System.Windows.PropertyAccessPathStep.prototype._property = null;
$asm02.System.Windows.PropertyAccessPathStep.prototype._listenToChanges = false;
$asm02.System.Windows.PropertyAccessPathStep.prototype._propertyListener = null;

$asm02.System.Windows.PropertyListener.prototype._ctor = function (pathStep, listenToChanges) {
	System.Object.prototype._ctor.call(this);
	this._pathStep = pathStep;
	this._listenToChanges = listenToChanges;
};
$asm02.System.Windows.PropertyListener.prototype.get_PropertyName = function () {
	return JSIL.Cast(this._pathStep, $asm02.System.Windows.PropertyPathStep).PropertyName;
};
JSIL.MakeProperty($asm02.System.Windows.PropertyListener.prototype, "Value", 
	$asm02.System.Windows.PropertyListener.prototype.get_Value, $asm02.System.Windows.PropertyListener.prototype.set_Value);
JSIL.MakeProperty($asm02.System.Windows.PropertyListener.prototype, "Type", 
	$asm02.System.Windows.PropertyListener.prototype.get_Type, null);
JSIL.MakeProperty($asm02.System.Windows.PropertyListener.prototype, "Property", 
	$asm02.System.Windows.PropertyListener.prototype.get_Property, null);
JSIL.MakeProperty($asm02.System.Windows.PropertyListener.prototype, "PropertyName", 
	$asm02.System.Windows.PropertyListener.prototype.get_PropertyName, null);
$asm02.System.Windows.PropertyListener.prototype._pathStep = null;
$asm02.System.Windows.PropertyListener.prototype._listenToChanges = false;

$asm02.System.Windows.DependencyPropertyListener.prototype._ctor = function (pathStep, dp, currentObject, listenToChanges) {
	this._value = System.Windows.DependencyProperty.UnsetValue;
	$asm02.System.Windows.PropertyListener.prototype._ctor.call(this, pathStep, listenToChanges);
	this._property = dp;
	this._source = currentObject;
	this.ConnectToProperty();
};
$asm02.System.Windows.DependencyPropertyListener.prototype.ConnectToProperty = function () {
	if (this._listenToChanges) {
		this._propertyChangedListener = $asm02.System.Windows.Data.WeakDependencyPropertyChangedListener.CreateIfNecessary(this._source, this._property.IsCoreProperty, this);
	}
};
$asm02.System.Windows.DependencyPropertyListener.prototype.Disconnect = function () {
	if (this._listenToChanges) {
		this._propertyChangedListener.Disconnect();
	}
	this._value = System.Windows.DependencyProperty.UnsetValue;
	this._propertyChangedListener = null;
};
$asm02.System.Windows.DependencyPropertyListener.prototype.SourcePropertyChanged = function (sender, dp) {
	if (!((this._property !== dp) && (!this._property.IsCoreProperty || 
				!dp.IsCoreProperty || 
				(this._property.m_nKnownId !== dp.m_nKnownId)))) {
		this._value = System.Windows.DependencyProperty.UnsetValue;
		this._pathStep.IRaisePropertyPathStepChanged_RaisePropertyPathStepChanged(this);
	}
};
$asm02.System.Windows.DependencyPropertyListener.prototype.get_Value = function () {
	if (this._value === System.Windows.DependencyProperty.UnsetValue) {
		this._value = this._source.GetValue(this._property);
	}
	return this._value;
};
$asm02.System.Windows.DependencyPropertyListener.prototype.set_Value = function (value) {
	this._value = value;
	this._source.SetValue(this._property, this._value);
};
$asm02.System.Windows.DependencyPropertyListener.prototype.get_Type = function () {
	return this._property._propertyType;
};
$asm02.System.Windows.DependencyPropertyListener.prototype.get_Property = function () {
	return this._property;
};
JSIL.MakeProperty($asm02.System.Windows.DependencyPropertyListener.prototype, "Value", 
	$asm02.System.Windows.DependencyPropertyListener.prototype.get_Value, $asm02.System.Windows.DependencyPropertyListener.prototype.set_Value);
JSIL.MakeProperty($asm02.System.Windows.DependencyPropertyListener.prototype, "Type", 
	$asm02.System.Windows.DependencyPropertyListener.prototype.get_Type, null);
JSIL.MakeProperty($asm02.System.Windows.DependencyPropertyListener.prototype, "Property", 
	$asm02.System.Windows.DependencyPropertyListener.prototype.get_Property, null);
$asm02.System.Windows.DependencyPropertyListener.prototype._property = null;
$asm02.System.Windows.DependencyPropertyListener.prototype._source = null;
$asm02.System.Windows.DependencyPropertyListener.prototype._value = null;
$asm02.System.Windows.DependencyPropertyListener.prototype._propertyChangedListener = null;

$asm02.System.Windows.CLRPropertyListener.prototype._ctor = function (pathStep, property, source, listenToChanges) {
	this._value = System.Windows.DependencyProperty.UnsetValue;
	$asm02.System.Windows.PropertyListener.prototype._ctor.call(this, pathStep, listenToChanges);
	this._propertyInfo = property;
	this._source = source;
	this.ConnectToProperty();
};
$asm02.System.Windows.CLRPropertyListener.CreateListener = function (pathStep, name, source, listenToChanges) {
	var property = $asm02.System.Windows.CLRPropertyListener.GetProperty(JSIL.GetType(source), name);
	if (property === null) {
		return null;
	}
	return new $asm02.System.Windows.CLRPropertyListener(pathStep, property, source, listenToChanges);
};
$asm02.System.Windows.CLRPropertyListener.GetProperty = function (type, propertyName) {
	try {
		var result = type.GetProperty$6(propertyName);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.Reflection.AmbiguousMatchException)) {
			result = $asm02.System.Windows.CLRPropertyListener.GetShadowedProperty(type, propertyName);
		} else {
			throw $exception;
		}
	}
	return result;
};
$asm02.System.Windows.CLRPropertyListener.GetShadowedProperty = function (type, propertyName) {
	var type2 = type;
__loop0__: 
	while (type2) {
		var property = type2.GetProperty$2(propertyName, (System.Reflection.BindingFlags.DeclaredOnly | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public));
		if (property !== null) {
			return property;
		}
		type2 = type2.BaseType;
	}
	return null;
};
$asm02.System.Windows.CLRPropertyListener.prototype.get_Value = function () {
	if (this._value === System.Windows.DependencyProperty.UnsetValue) {
		this._value = this._propertyInfo.GetValue$0(this._source, null);
	}
	return this._value;
};
$asm02.System.Windows.CLRPropertyListener.prototype.set_Value = function (value) {
	this._value = value;
	this._propertyInfo.SetValue$1(this._source, this._value, null);
};
$asm02.System.Windows.CLRPropertyListener.prototype.get_Type = function () {
	return this._propertyInfo.PropertyType;
};
$asm02.System.Windows.CLRPropertyListener.prototype.get_Property = function () {
	return this._propertyInfo;
};
$asm02.System.Windows.CLRPropertyListener.prototype.SourcePropertyChanged = function (sender, args) {
	if (!(!System.String.IsNullOrEmpty(args.PropertyName) && !(args.PropertyName == this._propertyInfo.Name))) {
		this._value = System.Windows.DependencyProperty.UnsetValue;
		this._pathStep.IRaisePropertyPathStepChanged_RaisePropertyPathStepChanged(this);
	}
};
$asm02.System.Windows.CLRPropertyListener.prototype.ConnectToProperty = function () {
	if (this._listenToChanges) {
		this._propertyChangedListener = $asm02.System.Windows.Data.WeakPropertyChangedListener.CreateIfNecessary(this._source, this);
	}
};
$asm02.System.Windows.CLRPropertyListener.prototype.Disconnect = function () {
	if (this._propertyChangedListener !== null) {
		this._propertyChangedListener.Disconnect();
	}
	this._value = System.Windows.DependencyProperty.UnsetValue;
	this._propertyInfo = null;
	this._propertyChangedListener = null;
};
JSIL.MakeProperty($asm02.System.Windows.CLRPropertyListener.prototype, "Value", 
	$asm02.System.Windows.CLRPropertyListener.prototype.get_Value, $asm02.System.Windows.CLRPropertyListener.prototype.set_Value);
JSIL.MakeProperty($asm02.System.Windows.CLRPropertyListener.prototype, "Type", 
	$asm02.System.Windows.CLRPropertyListener.prototype.get_Type, null);
JSIL.MakeProperty($asm02.System.Windows.CLRPropertyListener.prototype, "Property", 
	$asm02.System.Windows.CLRPropertyListener.prototype.get_Property, null);
$asm02.System.Windows.CLRPropertyListener.prototype._source = null;
$asm02.System.Windows.CLRPropertyListener.prototype._propertyChangedListener = null;
$asm02.System.Windows.CLRPropertyListener.prototype._propertyInfo = null;
$asm02.System.Windows.CLRPropertyListener.prototype._value = null;

$asm02.System.Windows.IndexerListener.prototype._ctor = function (pathStep, source, index, intIndexer, propertyInfo, listenToChanges) {
	this._value = System.Windows.DependencyProperty.UnsetValue;
	$asm02.System.Windows.PropertyListener.prototype._ctor.call(this, pathStep, listenToChanges);
	this._propertyInfo = propertyInfo;
	this._source = source;
	this._index = index;
	this._intIndexer = intIndexer;
	this.ConnectToProperty();
};
$asm02.System.Windows.IndexerListener.CreateListener = function (pathStep, source, index, intIndexer, propertyInfo, listenToChanges) {
	return new $asm02.System.Windows.IndexerListener(pathStep, source, index, intIndexer, propertyInfo, listenToChanges);
};
$asm02.System.Windows.IndexerListener.prototype.get_Value = function () {
	if (this._propertyInfo !== null) {
		try {
			if (this._intIndexer) {
				this._value = this._propertyInfo.GetValue$0(this._source, [System.Int32.Parse(this._index.toString().Trim$1(), System.Globalization.CultureInfo.InvariantCulture)]);
			} else {
				this._value = this._propertyInfo.GetValue$0(this._source, [this._index]);
			}
		} catch ($exception) {
			return System.Windows.DependencyProperty.UnsetValue;
		}
	}
	return this._value;
};
$asm02.System.Windows.IndexerListener.prototype.set_Value = function (value) {
	if (this._intIndexer) {
		this._propertyInfo.SetValue$1(this._source, value, [System.Int32.Parse(this._index.toString().Trim$1(), System.Globalization.CultureInfo.InvariantCulture)]);
	} else {
		this._propertyInfo.SetValue$1(this._source, value, [this._index]);
	}
	this._value = value;
};
$asm02.System.Windows.IndexerListener.prototype.get_Type = function () {
	return this._propertyInfo.PropertyType;
};
$asm02.System.Windows.IndexerListener.prototype.get_Property = function () {
	return this._propertyInfo;
};
$asm02.System.Windows.IndexerListener.prototype.SourcePropertyChanged = function (sender, args) {
	var flag = (System.String.IsNullOrEmpty(args.PropertyName) || 
		(args.PropertyName == (this._propertyInfo.Name + "[]")));
	if (!(flag || !$asm02.MS.Internal.QuirksMode.ShouldAcceptPropertyChangedNotificationWithIndexer())) {
		flag = (args.PropertyName == $asm02.System.Windows.PropertyListener.prototype.get_PropertyName.call(this));
	}
	if (flag) {
		this._value = System.Windows.DependencyProperty.UnsetValue;
		this._pathStep.IRaisePropertyPathStepChanged_RaisePropertyPathStepChanged(this);
	}
};
$asm02.System.Windows.IndexerListener.prototype.ConnectToProperty = function () {
	if (this._listenToChanges) {
		this._propertyChangedListener = $asm02.System.Windows.Data.WeakPropertyChangedListener.CreateIfNecessary(this._source, this);
	}
};
$asm02.System.Windows.IndexerListener.prototype.Disconnect = function () {
	if (this._propertyChangedListener !== null) {
		this._propertyChangedListener.Disconnect();
	}
	this._value = System.Windows.DependencyProperty.UnsetValue;
	this._propertyInfo = null;
	this._propertyChangedListener = null;
};
JSIL.MakeProperty($asm02.System.Windows.IndexerListener.prototype, "Value", 
	$asm02.System.Windows.IndexerListener.prototype.get_Value, $asm02.System.Windows.IndexerListener.prototype.set_Value);
JSIL.MakeProperty($asm02.System.Windows.IndexerListener.prototype, "Type", 
	$asm02.System.Windows.IndexerListener.prototype.get_Type, null);
JSIL.MakeProperty($asm02.System.Windows.IndexerListener.prototype, "Property", 
	$asm02.System.Windows.IndexerListener.prototype.get_Property, null);
$asm02.System.Windows.IndexerListener.prototype._source = null;
$asm02.System.Windows.IndexerListener.prototype._propertyChangedListener = null;
$asm02.System.Windows.IndexerListener.prototype._propertyInfo = null;
$asm02.System.Windows.IndexerListener.prototype._value = null;
$asm02.System.Windows.IndexerListener.prototype._index = null;
$asm02.System.Windows.IndexerListener.prototype._intIndexer = false;

$asm02.System.Windows.PropertyPathStepDescriptor.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};

$asm02.System.Windows.SourcePathStepDescriptor.prototype.CreateStep = function (listener, source, listenToChanges) {
	return new $asm02.System.Windows.SourcePropertyPathStep(listener, source);
};
$asm02.System.Windows.SourcePathStepDescriptor.prototype._ctor = function () {
	$asm02.System.Windows.PropertyPathStepDescriptor.prototype._ctor.call(this);
};

$asm02.System.Windows.PropertyAccessPathStepDescriptor.prototype._ctor = function (name) {
	$asm02.System.Windows.PropertyPathStepDescriptor.prototype._ctor.call(this);
	this._name = name;
};
$asm02.System.Windows.PropertyAccessPathStepDescriptor.prototype.CreateStep = function (listener, source, listenToChanges) {
	return JSIL.New($asm02.System.Windows.PropertyAccessPathStep, "_ctor$0", [listener, source, this._name, listenToChanges]);
};
$asm02.System.Windows.PropertyAccessPathStepDescriptor.prototype._name = null;

$asm02.System.Windows.DependencyPropertyAccessStepDescriptor.prototype._ctor = function (property) {
	$asm02.System.Windows.PropertyPathStepDescriptor.prototype._ctor.call(this);
	this._property = property;
};
$asm02.System.Windows.DependencyPropertyAccessStepDescriptor.prototype.CreateStep = function (listener, source, listenToChanges) {
	return JSIL.New($asm02.System.Windows.PropertyAccessPathStep, "_ctor$1", [listener, source, this._property, listenToChanges]);
};
$asm02.System.Windows.DependencyPropertyAccessStepDescriptor.prototype._property = null;

$asm02.System.Windows.IndexerPathStepDescriptor.prototype._ctor = function (index) {
	$asm02.System.Windows.PropertyPathStepDescriptor.prototype._ctor.call(this);
	this._index = index;
};
$asm02.System.Windows.IndexerPathStepDescriptor.prototype.CreateStep = function (listener, source, listenToChanges) {
	return new $asm02.System.Windows.IndexerPathStep(listener, source, this._index, listenToChanges);
};
$asm02.System.Windows.IndexerPathStepDescriptor.prototype._index = null;

System.Windows.PropertyPath.prototype._ctor$0 = function (path, pathParameters) {
	System.Object.prototype._ctor.call(this);
	if (pathParameters.length !== 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["pathParameters"]);
	}
	this.Path = path;
};
System.Windows.PropertyPath.prototype._ctor$1 = function (parameter) {
	System.Object.prototype._ctor.call(this);
	this._dp = JSIL.TryCast(parameter, System.Windows.DependencyProperty);
	if (this._dp !== null) {
		this._path = "(0)";
	}
};
System.Windows.PropertyPath.prototype.get_Path = function () {
	return this._path;
};
System.Windows.PropertyPath.prototype.set_Path = function (value) {
	this._path = value;
	this._dp = null;
};
System.Windows.PropertyPath.prototype.get_Descriptors = function () {
	return this._descriptors;
};
System.Windows.PropertyPath.prototype.ParsePathInternal = function (calledFromParser) {
	this._descriptors = System.Windows.PropertyPath.ParsePath(this._path, calledFromParser);
};
System.Windows.PropertyPath.prototype.get_IsPathToSource = function () {
	return JSIL.CheckType(this._descriptors.get_Item(0), $asm02.System.Windows.SourcePathStepDescriptor);
};
System.Windows.PropertyPath.prototype.GetListener = function (source, listenToChanges, exp) {
	return new $asm02.System.Windows.PropertyPathListener(this, source, listenToChanges, exp);
};
System.Windows.PropertyPath.ParsePath = function (path, calledFromParser) {
	var propertyPathParser = new $asm02.System.Windows.PropertyPathParser(path, calledFromParser);
	return propertyPathParser.Parse();
};
System.Windows.PropertyPath.prototype.HasDependencyProperty = function () {
	return (this._dp !== null);
};
System.Windows.PropertyPath.prototype.GetDependencyProperty = function () {
	return this._dp;
};
JSIL.OverloadedMethod(System.Windows.PropertyPath.prototype, "_ctor", [
		["_ctor$0", [System.String, System.Array.Of(System.Object)]], 
		["_ctor$1", [System.Object]]
	]);
JSIL.MakeProperty(System.Windows.PropertyPath.prototype, "Path", 
	System.Windows.PropertyPath.prototype.get_Path, System.Windows.PropertyPath.prototype.set_Path);
JSIL.MakeProperty(System.Windows.PropertyPath.prototype, "Descriptors", 
	System.Windows.PropertyPath.prototype.get_Descriptors, null);
JSIL.MakeProperty(System.Windows.PropertyPath.prototype, "IsPathToSource", 
	System.Windows.PropertyPath.prototype.get_IsPathToSource, null);
System.Windows.PropertyPath.prototype._path = null;
System.Windows.PropertyPath.prototype._descriptors = null;
System.Windows.PropertyPath.prototype._dp = null;

System.Windows.PropertyPathConverter.prototype.CanConvertFrom = function (context, sourceType) {
	return (sourceType === System.String);
};
System.Windows.PropertyPathConverter.prototype.ConvertFrom = function (context, culture, value) {
	if (!((value !== null) && (JSIL.TryCast(value, System.String) === null))) {
		return JSIL.New(System.Windows.PropertyPath, "_ctor$0", [JSIL.TryCast(value, System.String), JSIL.Array.New(System.Object, 0)]);
	}
	if (JSIL.TryCast(value, System.Windows.PropertyPath) === null) {
		throw JSIL.New(System.NotSupportedException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("PropertyPath_CannotConvertToPropertyPathFromObject")]);
	}
	return value;
};
System.Windows.PropertyPathConverter.prototype._ctor = function () {
	System.ComponentModel.TypeConverter.prototype._ctor.call(this);
};

$asm02.System.Windows.PropertyPathChangedEventArgs.prototype._ctor = function (source) {
	System.Object.prototype._ctor.call(this);
	this.ChangedPart = source;
};
$asm02.System.Windows.PropertyPathChangedEventArgs.prototype.get_ChangedPart = function () {
	return this.ChangedPart$value;
};
$asm02.System.Windows.PropertyPathChangedEventArgs.prototype.set_ChangedPart = function (value) {
	this.ChangedPart$value = value;
};
JSIL.MakeProperty($asm02.System.Windows.PropertyPathChangedEventArgs.prototype, "ChangedPart", 
	$asm02.System.Windows.PropertyPathChangedEventArgs.prototype.get_ChangedPart, $asm02.System.Windows.PropertyPathChangedEventArgs.prototype.set_ChangedPart);
$asm02.System.Windows.PropertyPathChangedEventArgs.prototype.ChangedPart$value = null;

$asm02.System.Windows.PropertyPathListener.prototype._ctor = function (path, source, listenToChanges, exp) {
	System.Object.prototype._ctor.call(this);
	this._expression = exp;
	this.ConnectToSource(path, source, listenToChanges);
};
$asm02.System.Windows.PropertyPathListener.prototype.Disconnect = function () {
	var propertyPathStep = this._first;
__loop0__: 
	while (propertyPathStep) {
		propertyPathStep.Disconnect();
		propertyPathStep = propertyPathStep.NextStep;
	}
};
$asm02.System.Windows.PropertyPathListener.prototype.get_LeafValue = function () {
	return this._last.Value;
};
$asm02.System.Windows.PropertyPathListener.prototype.set_LeafValue = function (value) {
	this._last.Value = value;
};
$asm02.System.Windows.PropertyPathListener.prototype.get_LeafItem = function () {
	return this._last.Source;
};
$asm02.System.Windows.PropertyPathListener.prototype.get_LeafType = function () {
	return this._last.Type;
};
$asm02.System.Windows.PropertyPathListener.prototype.get_LeafProperty = function () {
	return this._last.Property;
};
$asm02.System.Windows.PropertyPathListener.prototype.get_LeafPropertyName = function () {
	return this._last.PropertyName;
};
$asm02.System.Windows.PropertyPathListener.prototype.get_FullPathExists = function () {
	return this._last.IsConnected;
};
$asm02.System.Windows.PropertyPathListener.prototype.get_TraceContext = function () {
	if (this._traceContext === null) {
		if (this._expression !== null) {
			this._traceContext = this._expression.GetExpressionTraceString();
		} else {
			this._traceContext = "";
		}
	}
	return this._traceContext;
};
$asm02.System.Windows.PropertyPathListener.prototype.ConnectToSource = function (path, source, listenToChanges) {
	this._source = source;
	var propertyPathStep = null;
	var propertyPathStep2 = null;
	var source2 = source;
	var i = 1;
	propertyPathStep2 = (propertyPathStep = (this._first = (path.Descriptors.IList$b1_get_Item(0)).CreateStep(this, source2, listenToChanges)));
	source2 = propertyPathStep.Value;
__loop0__: 
	for (i = 1; i < JSIL.Cast(path.Descriptors, System.Collections.Generic.ICollection$b1.Of($asm02.System.Windows.PropertyPathStepDescriptor)).ICollection$b1_Count; ++i) {
		propertyPathStep = path.Descriptors.IList$b1_get_Item(i).CreateStep(this, source2, listenToChanges);
		propertyPathStep2.NextStep = propertyPathStep;
		propertyPathStep2 = propertyPathStep;
		source2 = propertyPathStep.Value;
	}
	this._last = propertyPathStep;
};
$asm02.System.Windows.PropertyPathListener.prototype.ReConnect = function (source) {
	var propertyPathStep = this._first;
__loop0__: 
	while (propertyPathStep) {
		propertyPathStep.ReConnect(source);
		source = propertyPathStep.Value;
		propertyPathStep = propertyPathStep.NextStep;
	}
};
$asm02.System.Windows.PropertyPathListener.prototype.RaisePropertyPathStepChanged = function (source) {
	var nextStep = source.NextStep;
	var value = source.Value;
__loop0__: 
	while (nextStep) {
		nextStep.ReConnect(value);
		value = nextStep.Value;
		nextStep = nextStep.NextStep;
	}
	if (this.PropertyPathChanged !== null) {
		this.PropertyPathChanged(this, new $asm02.System.Windows.PropertyPathChangedEventArgs(source));
	}
};
$asm02.System.Windows.PropertyPathListener.prototype.add_PropertyPathChanged = function (value) {
	this.PropertyPathChanged = System.Delegate.Combine(this.PropertyPathChanged, value);
};
$asm02.System.Windows.PropertyPathListener.prototype.remove_PropertyPathChanged = function (value) {
	this.PropertyPathChanged = System.Delegate.Remove(this.PropertyPathChanged, value);
};
JSIL.MakeProperty($asm02.System.Windows.PropertyPathListener.prototype, "LeafValue", 
	$asm02.System.Windows.PropertyPathListener.prototype.get_LeafValue, $asm02.System.Windows.PropertyPathListener.prototype.set_LeafValue);
JSIL.MakeProperty($asm02.System.Windows.PropertyPathListener.prototype, "LeafItem", 
	$asm02.System.Windows.PropertyPathListener.prototype.get_LeafItem, null);
JSIL.MakeProperty($asm02.System.Windows.PropertyPathListener.prototype, "LeafType", 
	$asm02.System.Windows.PropertyPathListener.prototype.get_LeafType, null);
JSIL.MakeProperty($asm02.System.Windows.PropertyPathListener.prototype, "LeafProperty", 
	$asm02.System.Windows.PropertyPathListener.prototype.get_LeafProperty, null);
JSIL.MakeProperty($asm02.System.Windows.PropertyPathListener.prototype, "LeafPropertyName", 
	$asm02.System.Windows.PropertyPathListener.prototype.get_LeafPropertyName, null);
JSIL.MakeProperty($asm02.System.Windows.PropertyPathListener.prototype, "FullPathExists", 
	$asm02.System.Windows.PropertyPathListener.prototype.get_FullPathExists, null);
JSIL.MakeProperty($asm02.System.Windows.PropertyPathListener.prototype, "TraceContext", 
	$asm02.System.Windows.PropertyPathListener.prototype.get_TraceContext, null);
$asm02.System.Windows.PropertyPathListener.prototype._traceContext = null;
$asm02.System.Windows.PropertyPathListener.prototype.PropertyPathChanged = null;
$asm02.System.Windows.PropertyPathListener.prototype._first = null;
$asm02.System.Windows.PropertyPathListener.prototype._last = null;
$asm02.System.Windows.PropertyPathListener.prototype._source = null;
$asm02.System.Windows.PropertyPathListener.prototype._expression = null;

$asm02.System.Windows.PropertyPathParser.prototype._ctor = function (propertyPath, calledFromParser) {
	System.Object.prototype._ctor.call(this);
	this._propertyPath = propertyPath;
	this._calledFromParser = calledFromParser;
};
$asm02.System.Windows.PropertyPathParser.prototype.Parse = function () {
	var list = new (System.Collections.Generic.List$b1.Of($asm02.System.Windows.PropertyPathStepDescriptor)) ();
	if (!(!System.String.IsNullOrEmpty(this._propertyPath) && !(this._propertyPath == "."))) {
		list.Add(new $asm02.System.Windows.SourcePathStepDescriptor());
		return list;
	}
__loop0__: 
	while (!this.Eof()) {
		list.Add(this.ReadStepDescriptor(this._calledFromParser));
	}
	return list;
};
$asm02.System.Windows.PropertyPathParser.prototype.IsStartOfPropertyChar = function (current) {
	return (System.Char.IsLetter$0(current) || (current === "_"));
};
$asm02.System.Windows.PropertyPathParser.prototype.ReadStepDescriptor = function (calledFromParser) {
	var c = this.ReadChar();
	if (this.IsStartOfPropertyChar(c)) {
		return this.ReadPropertyAccessStepDescriptor(c);
	}
	if (c === "(") {
		return this.ReadAttachedPropertyStepDescriptor(calledFromParser);
	}
	if (c === "[") {
		return this.ReadIndexerPathStepDescriptor();
	}
	var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
	stringBuilder.AppendFormat$0($asm02.System.Windows.Resx.GetString$2("PropertyPath_InvalidBindingPath"), [c, this._propertyPath]);
	throw JSIL.New(System.ArgumentException, "_ctor$1", [stringBuilder.toString()]);
};
$asm02.System.Windows.PropertyPathParser.prototype.IsPropertyChar = function (current) {
	return (this.IsStartOfPropertyChar(current) || 
		System.Char.IsDigit$0(current) || System.Char.IsWhiteSpace$0(current));
};
$asm02.System.Windows.PropertyPathParser.prototype.ReadPropertyAccessStepDescriptor = function (current) {
	var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
__loop0__: 
	do {
		stringBuilder.Append$7(current);
		if (this.Eof()) {
			break __loop0__;
		}
		current = this.ReadChar();
	} while (this.IsPropertyChar(current));
	if (!(this.Eof() || (current === "."))) {
		this.Unread();
	}
	return new $asm02.System.Windows.PropertyAccessPathStepDescriptor(stringBuilder.toString().Trim$1());
};
$asm02.System.Windows.PropertyPathParser.prototype.IsValidAttachedPropertyChar = function (current) {
	return (this.IsPropertyChar(current) || (current === "."));
};
$asm02.System.Windows.PropertyPathParser.prototype.ReadAttachedPropertyStepDescriptor = function (calledFromParser) {
	var c = this.ReadChar();
	var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
__loop0__: 
	while (c !== ")") {
		stringBuilder.Append$7(c);
		if (this.Eof()) {
			break __loop0__;
		}
		c = this.ReadChar();
	}
	if (c !== ")") {
		var stringBuilder2 = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
		stringBuilder2.AppendFormat$0($asm02.System.Windows.Resx.GetString$2("PropertyPath_InvalidBindingPathNoChar"), [this._propertyPath]);
		throw JSIL.New(System.ArgumentException, "_ctor$1", [stringBuilder2.toString()]);
	}
	var dpFromName = this.GetDpFromName(stringBuilder.toString().Trim$1(), calledFromParser);
	if (dpFromName === null) {
		var stringBuilder3 = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
		stringBuilder3.AppendFormat$0($asm02.System.Windows.Resx.GetString$2("PropertyPath_CannotResolveAttachedDp"), [stringBuilder.toString().Trim$1(), this._propertyPath]);
		throw JSIL.New(System.ArgumentException, "_ctor$1", [stringBuilder3.toString()]);
	}
	if (!this.Eof()) {
		c = this.ReadChar();
		if (c !== ".") {
			this.Unread();
		}
	}
	return new $asm02.System.Windows.DependencyPropertyAccessStepDescriptor(dpFromName);
};
$asm02.System.Windows.PropertyPathParser.prototype.GetDpFromName = function ($name, namespaceMappingAvailable) {
	var name = new JSIL.Variable($name);
	var text = new JSIL.Variable(null);
	var text2 = new JSIL.Variable(null);
	var dependencyProperty = null;
	if (namespaceMappingAvailable) {
		if ($asm02.MS.Internal.QuirksMode.ShouldUseSL3Parser()) {
			this.GetNamespaceForProperty(/* ref */ name, /* ref */ text, /* ref */ text2);
		} else {
			dependencyProperty = $asm02.MS.Internal.XcpImports.GetPropertyUsingCurrentOWContext(name.value);
		}
	}
	if (dependencyProperty === null) {
		if (!((text.value !== null) && text2.value)) {
			dependencyProperty = System.Windows.DependencyProperty.LookupAttachedCoreProperty(name.value);
		} else {
			dependencyProperty = System.Windows.DependencyProperty.GetRegisteredDependencyProperty(null, name.value, text.value, text2.value);
		}
	}
	return dependencyProperty;
};
$asm02.System.Windows.PropertyPathParser.prototype.GetNamespaceForProperty = function (/* ref */ name, /* ref */ propertyNamespace, /* ref */ propertyAssembly) {
	var text = null;
	propertyAssembly.value = (text = null);
	propertyNamespace.value = text;
	var array = name.value.Split(JSIL.Array.New(System.Char, [":"]));
	if (!((array !== null) && (array.length === 2))) {
		return;
	}
	$asm02.MS.Internal.XcpImports.ResolveXamlPrefix(array[0], /* ref */ propertyNamespace, /* ref */ propertyAssembly);
	name.value = array[1];
};
$asm02.System.Windows.PropertyPathParser.prototype.ReadIndexerPathStepDescriptor = function () {
	var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
__loop0__: 
	for (var c = this.ReadChar(); c !== "]"; ) {
		stringBuilder.Append$7(c);
		if (this.Eof()) {
			break __loop0__;
		}
		c = this.ReadChar();
	}
	if (c !== "]") {
		var stringBuilder2 = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
		stringBuilder2.AppendFormat$0($asm02.System.Windows.Resx.GetString$2("PropertyPath_InvalidBindingPathNoChar"), [this._propertyPath]);
		throw JSIL.New(System.ArgumentException, "_ctor$1", [stringBuilder2.toString()]);
	}
	if (!this.Eof()) {
		c = this.ReadChar();
		if (c !== ".") {
			this.Unread();
		}
	}
	return new $asm02.System.Windows.IndexerPathStepDescriptor(stringBuilder.toString().Trim$1());
};
$asm02.System.Windows.PropertyPathParser.prototype.ReadChar = function () {
	if (this.Eof()) {
		var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
		stringBuilder.AppendFormat$0($asm02.System.Windows.Resx.GetString$2("PropertyPath_InvalidBindingPathNoChar"), [this._propertyPath]);
		throw JSIL.New(System.ArgumentException, "_ctor$1", [stringBuilder.toString()]);
	}
	var result = (this._propertyPath[this._index]);
	++this._index;
	return result;
};
$asm02.System.Windows.PropertyPathParser.prototype.Unread = function () {
	--this._index;
};
$asm02.System.Windows.PropertyPathParser.prototype.Eof = function () {
	return (this._index >= this._propertyPath.length);
};
$asm02.System.Windows.PropertyPathParser.prototype._propertyPath = null;
$asm02.System.Windows.PropertyPathParser.prototype._calledFromParser = false;
$asm02.System.Windows.PropertyPathParser.prototype._index = 0;

$asm02.MS.Internal.QuirksMode.ShouldItemsControlSendExtraEvents = function () {
	return ($asm02.MS.Internal.QuirksMode.GetAppMajorVersion() < 3);
};
$asm02.MS.Internal.QuirksMode.ShouldSupportDependencyObjectAsPropertyPathSource = function () {
	return ($asm02.MS.Internal.QuirksMode.GetAppMajorVersion() > 2);
};
$asm02.MS.Internal.QuirksMode.ShouldGetVisualRootUsingVisualTreeHelper = function () {
	return ($asm02.MS.Internal.QuirksMode.GetAppMajorVersion() > 2);
};
$asm02.MS.Internal.QuirksMode.ShouldUsePanelsToGroupRadioButtons = function () {
	return ($asm02.MS.Internal.QuirksMode.GetAppMajorVersion() < 3);
};
$asm02.MS.Internal.QuirksMode.ShouldListboxUseVirtualization = function () {
	return ($asm02.MS.Internal.QuirksMode.GetAppMajorVersion() > 2);
};
$asm02.MS.Internal.QuirksMode.ShouldFrameworkElementAutomationPeerConstructorThrowNullRefForNullOwner = function () {
	return ($asm02.MS.Internal.QuirksMode.GetAppMajorVersion() < 3);
};
$asm02.MS.Internal.QuirksMode.ShouldLoadComponentUseComponentAssemblyInsteadOfUriAssembly = function () {
	return ($asm02.MS.Internal.QuirksMode.GetAppMajorVersion() < 3);
};
$asm02.MS.Internal.QuirksMode.SkipEventComparisonDuringRemoveEventListener = function () {
	return ($asm02.MS.Internal.QuirksMode.GetAppMajorVersion() < 3);
};
$asm02.MS.Internal.QuirksMode.ShouldComboboxSelectedItemReceiveFocus = function () {
	return ($asm02.MS.Internal.QuirksMode.GetAppMajorVersion() < 3);
};
$asm02.MS.Internal.QuirksMode.ShouldScrollViewerClampOffset = function () {
	return ($asm02.MS.Internal.QuirksMode.GetAppMajorVersion() > 2);
};
$asm02.MS.Internal.QuirksMode.ShouldComputeDragRelativeToParent = function () {
	return ($asm02.MS.Internal.QuirksMode.GetAppMajorVersion() < 3);
};
$asm02.MS.Internal.QuirksMode.ShouldBindingUseLateSealing = function () {
	return ($asm02.MS.Internal.QuirksMode.GetAppMajorVersion() < 3);
};
$asm02.MS.Internal.QuirksMode.ShouldChangeControlUIValidationState = function () {
	return ($asm02.MS.Internal.QuirksMode.GetAppMajorVersion() > 2);
};
$asm02.MS.Internal.QuirksMode.ShouldControlsHandleMouseWheelEvent = function () {
	return ($asm02.MS.Internal.QuirksMode.GetAppMajorVersion() > 3);
};
$asm02.MS.Internal.QuirksMode.ShouldPreventSelectionOfDisabledItemsInSelector = function () {
	return ($asm02.MS.Internal.QuirksMode.GetAppMajorVersion() > 3);
};
$asm02.MS.Internal.QuirksMode.ShouldUseTypeFullNameForBuiltinStyleLookup = function () {
	return ($asm02.MS.Internal.QuirksMode.GetAppMajorVersion() < 4);
};
$asm02.MS.Internal.QuirksMode.ShouldUseLoadedStatesInItemsControl = function () {
	return ($asm02.MS.Internal.QuirksMode.GetAppMajorVersion() > 3);
};
$asm02.MS.Internal.QuirksMode.ShouldReturnImageBrushImageSourceAsBitmapImage = function () {
	return ($asm02.MS.Internal.QuirksMode.GetAppMajorVersion() < 4);
};
$asm02.MS.Internal.QuirksMode.ShouldImageAlwaysReturnSourceAsBitmapImage = function () {
	return ($asm02.MS.Internal.QuirksMode.GetAppMajorVersion() < 3);
};
$asm02.MS.Internal.QuirksMode.ShouldSystemParametersWheelScrollLinesPropertyReturnOne = function () {
	return ($asm02.MS.Internal.QuirksMode.GetAppMajorVersion() < 4);
};
$asm02.MS.Internal.QuirksMode.ShouldReadLocalValueReturnAnimatedValue = function () {
	return ($asm02.MS.Internal.QuirksMode.GetAppMajorVersion() <= 3);
};
$asm02.MS.Internal.QuirksMode.ShouldAttachBindingOnDependencyObjectInXaml = function () {
	return ($asm02.MS.Internal.QuirksMode.GetAppMajorVersion() >= 4);
};
$asm02.MS.Internal.QuirksMode.ShouldRunTextReturnsNullObjectForEmptyString = function () {
	return ($asm02.MS.Internal.QuirksMode.GetAppMajorVersion() < 4);
};
$asm02.MS.Internal.QuirksMode.ShouldUseSL3Parser = function () {
	return ($asm02.MS.Internal.QuirksMode.GetAppMajorVersion() < 4);
};
$asm02.MS.Internal.QuirksMode.ShouldUseXamlPropertyTokenForProperties = function () {
	return !$asm02.MS.Internal.QuirksMode.ShouldUseSL3Parser();
};
$asm02.MS.Internal.QuirksMode.ShouldDoDeepLookupOfCoreDPs = function () {
	return ($asm02.MS.Internal.QuirksMode.GetAppMajorVersion() >= 4);
};
$asm02.MS.Internal.QuirksMode.ShouldUseDefaultCredentialsByDefault = function () {
	return ($asm02.MS.Internal.QuirksMode.GetAppMajorVersion() >= 4);
};
$asm02.MS.Internal.QuirksMode.ShouldSelectorAssumeItemTemplateAndListBoxItemMutuallyExclusive = function () {
	return ($asm02.MS.Internal.QuirksMode.GetAppMajorVersion() > 3);
};
$asm02.MS.Internal.QuirksMode.GetAppMajorVersion = function () {
	var num = new JSIL.Variable(0);
	var result = new JSIL.Variable(1);
	$asm02.MS.Internal.XcpImports.GetAppVersion(/* ref */ result, /* ref */ num);
	return result.value;
};
$asm02.MS.Internal.QuirksMode.ShouldAllowComplexFileDialogFilters = function () {
	return ($asm02.MS.Internal.QuirksMode.GetAppMajorVersion() < 4);
};
$asm02.MS.Internal.QuirksMode.ShouldPathGeometryOverrideToString = function () {
	return (3 < $asm02.MS.Internal.QuirksMode.GetAppMajorVersion());
};
$asm02.MS.Internal.QuirksMode.ShouldUseOldMousePosition = function () {
	return ($asm02.MS.Internal.QuirksMode.GetAppMajorVersion() < 4);
};
$asm02.MS.Internal.QuirksMode.ShouldAdjustToolTipForRTL = function () {
	return ($asm02.MS.Internal.QuirksMode.GetAppMajorVersion() > 3);
};
$asm02.MS.Internal.QuirksMode.ShouldAcceptPropertyChangedNotificationWithIndexer = function () {
	return ($asm02.MS.Internal.QuirksMode.GetAppMajorVersion() > 3);
};
$asm02.MS.Internal.QuirksMode.ShouldListBoxUpdateIsSelectionActiveWhenFocusChanges = function () {
	return ($asm02.MS.Internal.QuirksMode.GetAppMajorVersion() >= 4);
};
$asm02.MS.Internal.QuirksMode.ShouldApplyThumbDragDeltaWithZoomFactor = function () {
	return ($asm02.MS.Internal.QuirksMode.GetAppMajorVersion() > 3);
};
$asm02.MS.Internal.QuirksMode.ShouldUseLowLatencyNetworking = function () {
	if (({}) !== null) {
		try {
			var appMajorVersion = $asm02.MS.Internal.QuirksMode.GetAppMajorVersion();
			if (appMajorVersion > 4) {
				var result = true;
				return result;
			}
			if (!((appMajorVersion !== 4) || $asm02.System.Windows.Hosting.NativeHost.IsCustomHost)) {
				var runtimeVersion = {}.RuntimeVersion;
				var array = runtimeVersion.Split(JSIL.Array.New(System.Char, ["."]));
				var num = System.UInt32.Parse(array[2]);
				result = (num > 60126);
				return result;
			}
		} catch ($exception) {
			result = false;
			return result;
		}
		return false;
	}
	return false;
};
$asm02.MS.Internal.QuirksMode.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};

$asm02.System.Windows.SourcePropertyPathStep.prototype._ctor = function (listener, source) {
	$asm02.System.Windows.PropertyPathStep.prototype._ctor.call(this, listener);
	this._source = source;
};
$asm02.System.Windows.SourcePropertyPathStep.prototype.get_Value = function () {
	return this._source;
};
$asm02.System.Windows.SourcePropertyPathStep.prototype.set_Value = function (value) {
	throw JSIL.New(System.NotImplementedException, "_ctor$0", []);
};
$asm02.System.Windows.SourcePropertyPathStep.prototype.get_Source = function () {
	return this._source;
};
$asm02.System.Windows.SourcePropertyPathStep.prototype.Disconnect = function () {
	this._source = null;
};
$asm02.System.Windows.SourcePropertyPathStep.prototype.ReConnect = function (newSource) {
	this._source = newSource;
};
$asm02.System.Windows.SourcePropertyPathStep.prototype.get_Type = function () {
	throw JSIL.New(System.NotImplementedException, "_ctor$0", []);
};
$asm02.System.Windows.SourcePropertyPathStep.prototype.get_IsConnected = function () {
	return (this._source !== null);
};
$asm02.System.Windows.SourcePropertyPathStep.prototype.get_Property = function () {
	return null;
};
$asm02.System.Windows.SourcePropertyPathStep.prototype.get_PropertyName = function () {
	return System.String.Empty;
};
JSIL.MakeProperty($asm02.System.Windows.SourcePropertyPathStep.prototype, "Value", 
	$asm02.System.Windows.SourcePropertyPathStep.prototype.get_Value, $asm02.System.Windows.SourcePropertyPathStep.prototype.set_Value);
JSIL.MakeProperty($asm02.System.Windows.SourcePropertyPathStep.prototype, "Source", 
	$asm02.System.Windows.SourcePropertyPathStep.prototype.get_Source, null);
JSIL.MakeProperty($asm02.System.Windows.SourcePropertyPathStep.prototype, "Type", 
	$asm02.System.Windows.SourcePropertyPathStep.prototype.get_Type, null);
JSIL.MakeProperty($asm02.System.Windows.SourcePropertyPathStep.prototype, "IsConnected", 
	$asm02.System.Windows.SourcePropertyPathStep.prototype.get_IsConnected, null);
JSIL.MakeProperty($asm02.System.Windows.SourcePropertyPathStep.prototype, "Property", 
	$asm02.System.Windows.SourcePropertyPathStep.prototype.get_Property, null);
JSIL.MakeProperty($asm02.System.Windows.SourcePropertyPathStep.prototype, "PropertyName", 
	$asm02.System.Windows.SourcePropertyPathStep.prototype.get_PropertyName, null);
$asm02.System.Windows.SourcePropertyPathStep.prototype._source = null;

System.Windows.Rect.prototype._ctor$0 = function (x, y, width, height) {
	if (width < 0) {
		throw JSIL.New(System.ArgumentException, "_ctor$4", ["", "width"]);
	}
	if (height < 0) {
		throw JSIL.New(System.ArgumentException, "_ctor$4", ["", "height"]);
	}
	this._x = x;
	this._y = y;
	this._width = width;
	this._height = height;
};
System.Windows.Rect.prototype._ctor$1 = function (point1, point2) {
	this._x = System.Math.Min(point1._x, point2._x);
	this._y = System.Math.Min(point1._y, point2._y);
	this._width = System.Math.Max((System.Math.Max(point1._x, point2._x) - this._x), 0);
	this._height = System.Math.Max((System.Math.Max(point1._y, point2._y) - this._y), 0);
};
System.Windows.Rect.prototype._ctor$2 = function (location, size) {
	if (size.IsEmpty) {
		JSIL.CopyMembers(System.Windows.Rect.s_empty.MemberwiseClone(), this);
		return;
	}
	this._x = location._x;
	this._y = location._y;
	this._width = size._width;
	this._height = size._height;
};
System.Windows.Rect.Create = function (x, y, width, height) {
	if (!((x !== Infinity) || 
			(y !== Infinity) || 
			(width !== -Infinity) || (height !== -Infinity))) {
		return System.Windows.Rect.Empty;
	}
	return JSIL.New(System.Windows.Rect, "_ctor$0", [x, y, width, height]);
};
System.Windows.Rect.prototype.get_X = function () {
	return this._x;
};
System.Windows.Rect.prototype.set_X = function (value) {
	this._x = value;
};
System.Windows.Rect.prototype.get_Y = function () {
	return this._y;
};
System.Windows.Rect.prototype.set_Y = function (value) {
	this._y = value;
};
System.Windows.Rect.prototype.get_Width = function () {
	return this._width;
};
System.Windows.Rect.prototype.set_Width = function (value) {
	if (value < 0) {
		throw JSIL.New(System.ArgumentException, "_ctor$0", []);
	}
	this._width = value;
};
System.Windows.Rect.prototype.get_Height = function () {
	return this._height;
};
System.Windows.Rect.prototype.set_Height = function (value) {
	if (value < 0) {
		throw JSIL.New(System.ArgumentException, "_ctor$0", []);
	}
	this._height = value;
};
System.Windows.Rect.prototype.get_Left = function () {
	return this._x;
};
System.Windows.Rect.prototype.get_Top = function () {
	return this._y;
};
System.Windows.Rect.prototype.get_Right = function () {
	if (this.IsEmpty) {
		return -Infinity;
	}
	return (this._x + this._width);
};
System.Windows.Rect.prototype.get_Bottom = function () {
	if (this.IsEmpty) {
		return -Infinity;
	}
	return (this._y + this._height);
};
System.Windows.Rect.get_Empty = function () {
	return System.Windows.Rect.s_empty;
};
System.Windows.Rect.prototype.get_IsEmpty = function () {
	return (this._width < 0);
};
System.Windows.Rect.prototype.toString = function () {
	return this.ConvertToString(null, null);
};
System.Windows.Rect.prototype.ToString = function (provider) {
	return this.ConvertToString(null, provider);
};
System.Windows.Rect.prototype.IFormattable_ToString = function (format, provider) {
	return this.ConvertToString(format, provider);
};
System.Windows.Rect.prototype.Equals$0 = function (value) {
	return System.Windows.Rect.op_Equality(this.MemberwiseClone(), value);
};
System.Windows.Rect.op_Equality = function (rect1, rect2) {
	return (!((rect1.X !== rect2.X) || 
			(rect1.Y !== rect2.Y) || 
			(rect1.Width !== rect2.Width)) && (rect1.Height === rect2.Height));
};
System.Windows.Rect.op_Inequality = function (rect1, rect2) {
	return !System.Windows.Rect.op_Equality(rect1, rect2);
};
System.Windows.Rect.prototype.Equals$1 = function (o) {
	if (!((o !== null) && JSIL.TryCast(o, System.Windows.Rect))) {
		return false;
	}
	var rect = JSIL.Cast(o, System.Windows.Rect).MemberwiseClone();
	return System.Windows.Rect.op_Equality(this.MemberwiseClone(), rect.MemberwiseClone());
};
System.Windows.Rect.prototype.GetHashCode = function () {
	return (((this.X.GetHashCode() ^ this.Y.GetHashCode()) ^ this.Width.GetHashCode()) ^ this.Height.GetHashCode());
};
System.Windows.Rect.prototype.Contains = function (point) {
	return this.ContainsInternal(point._x, point._y);
};
System.Windows.Rect.prototype.Intersect = function (rect) {
	if (!this.IntersectsWith(rect.MemberwiseClone())) {
		JSIL.CopyMembers(System.Windows.Rect.s_empty.MemberwiseClone(), this);
		return;
	}
	var num = System.Math.Max(this._x, rect.X);
	var num2 = System.Math.Max(this._y, rect.Y);
	this._width = System.Math.Max((System.Math.Min((this._x + this._width), (rect.X + rect.Width)) - num), 0);
	this._height = System.Math.Max((System.Math.Min((this._y + this._height), (rect.Y + rect.Height)) - num2), 0);
	this._x = num;
	this._y = num2;
};
System.Windows.Rect.prototype.Union$0 = function (rect) {
	if (this.IsEmpty) {
		JSIL.CopyMembers(rect.MemberwiseClone(), this);
		return;
	}
	if (!rect.IsEmpty) {
		var num = System.Math.Min(this.Left, rect.Left);
		var num2 = System.Math.Min(this.Top, rect.Top);
		if (!((rect.Width !== Infinity) && (this.Width !== Infinity))) {
			this._width = Infinity;
		} else {
			var num3 = System.Math.Max(this.Right, rect.Right);
			this._width = System.Math.Max((num3 - num), 0);
		}
		if (!((rect.Height !== Infinity) && (this.Height !== Infinity))) {
			this._height = Infinity;
		} else {
			var num4 = System.Math.Max(this.Bottom, rect.Bottom);
			this._height = System.Math.Max((num4 - num2), 0);
		}
		this._x = num;
		this._y = num2;
	}
};
System.Windows.Rect.prototype.Union$1 = function (point) {
	this.Union$0(JSIL.New(System.Windows.Rect, "_ctor$1", [point, point]));
};
System.Windows.Rect.prototype.ContainsInternal = function (x, y) {
	return (!((x < this._x) || 
			((x - this._width) > this._x) || 
			(y < this._y)) && ((y - this._height) <= this._y));
};
System.Windows.Rect.prototype.IntersectsWith = function (rect) {
	return ((this._width >= 0) && 
		(rect.Width >= 0) && 
		!((rect.X > (this._x + this._width)) || 
			((rect.X + rect.Width) < this._x) || 
			(rect.Y > (this._y + this._height))) && ((rect.Y + rect.Height) >= this._y));
};
System.Windows.Rect.CreateEmptyRect = function () {
	var result = new System.Windows.Rect();
	result._x = Infinity;
	result._y = Infinity;
	result._width = -Infinity;
	result._height = -Infinity;
	return result;
};
System.Windows.Rect.prototype.ConvertToString = function (format, provider) {
	if (this.IsEmpty) {
		return "Empty";
	}
	var numericListSeparator = $asm02.MS.Internal.TokenizerHelper.GetNumericListSeparator(provider);
	return System.String.Format(provider, JSIL.ConcatString.apply(null, JSIL.Array.New(System.String, ["{1:", format, "}{0}{2:", format, "}{0}{3:", format, "}{0}{4:", format, "}"])), [numericListSeparator, this._x, this._y, this._width, this._height]);
};
JSIL.OverloadedMethod(System.Windows.Rect.prototype, "_ctor", [
		["_ctor$0", [System.Double, System.Double, System.Double, System.Double]], 
		["_ctor$1", [System.Windows.Point, System.Windows.Point]], 
		["_ctor$2", [System.Windows.Point, System.Windows.Size]]
	]);
JSIL.OverloadedMethod(System.Windows.Rect.prototype, "Equals", [
		["Equals$0", [System.Windows.Rect]], 
		["Equals$1", [System.Object]]
	]);
JSIL.OverloadedMethod(System.Windows.Rect.prototype, "Union", [
		["Union$0", [System.Windows.Rect]], 
		["Union$1", [System.Windows.Point]]
	]);
JSIL.MakeProperty(System.Windows.Rect.prototype, "X", 
	System.Windows.Rect.prototype.get_X, System.Windows.Rect.prototype.set_X);
JSIL.MakeProperty(System.Windows.Rect.prototype, "Y", 
	System.Windows.Rect.prototype.get_Y, System.Windows.Rect.prototype.set_Y);
JSIL.MakeProperty(System.Windows.Rect.prototype, "Width", 
	System.Windows.Rect.prototype.get_Width, System.Windows.Rect.prototype.set_Width);
JSIL.MakeProperty(System.Windows.Rect.prototype, "Height", 
	System.Windows.Rect.prototype.get_Height, System.Windows.Rect.prototype.set_Height);
JSIL.MakeProperty(System.Windows.Rect.prototype, "Left", 
	System.Windows.Rect.prototype.get_Left, null);
JSIL.MakeProperty(System.Windows.Rect.prototype, "Top", 
	System.Windows.Rect.prototype.get_Top, null);
JSIL.MakeProperty(System.Windows.Rect.prototype, "Right", 
	System.Windows.Rect.prototype.get_Right, null);
JSIL.MakeProperty(System.Windows.Rect.prototype, "Bottom", 
	System.Windows.Rect.prototype.get_Bottom, null);
JSIL.MakeProperty(System.Windows.Rect, "Empty", 
	System.Windows.Rect.get_Empty, null);
JSIL.MakeProperty(System.Windows.Rect.prototype, "IsEmpty", 
	System.Windows.Rect.prototype.get_IsEmpty, null);
Object.defineProperty(System.Windows.Rect, "EmptyX", {
		"value": Infinity}
);
Object.defineProperty(System.Windows.Rect, "EmptyY", {
		"value": Infinity}
);
Object.defineProperty(System.Windows.Rect, "EmptyWidth", {
		"value": -Infinity}
);
Object.defineProperty(System.Windows.Rect, "EmptyHeight", {
		"value": -Infinity}
);
System.Windows.Rect.prototype._x = 0;
System.Windows.Rect.prototype._y = 0;
System.Windows.Rect.prototype._width = 0;
System.Windows.Rect.prototype._height = 0;
System.Windows.Rect._cctor = function () {
	System.Windows.Rect.s_empty = new System.Windows.Rect();
	System.Windows.Rect.s_empty = System.Windows.Rect.CreateEmptyRect().MemberwiseClone();
};

System.Windows.Media.Animation.RepeatBehavior.Create = function (o) {
	if (o === null) {
		return JSIL.New(System.Windows.Media.Animation.RepeatBehavior, "_ctor$1", [new System.TimeSpan()]);
	}
	var text = JSIL.TryCast(o, System.String);
	if (text !== null) {
		if (text.Equals$1("Forever")) {
			return System.Windows.Media.Animation.RepeatBehavior.Forever;
		}
		if (text.Contains("x")) {
			var array = text.Split(JSIL.Array.New(System.Char, ["x"]));
			return JSIL.New(System.Windows.Media.Animation.RepeatBehavior, "_ctor$0", [System.Convert.ToDouble$15(array[0], System.Windows.Media.Animation.RepeatBehavior.s_enusCultureInfo)]);
		}
	}
	var duration = System.TimeSpan.FromSeconds(JSIL.Cast(o, System.Double)).MemberwiseClone();
	return JSIL.New(System.Windows.Media.Animation.RepeatBehavior, "_ctor$1", [duration]);
};
System.Windows.Media.Animation.RepeatBehavior.prototype._ctor$0 = function (count) {
	if (!(!System.Double.IsInfinity(count) && 
			!System.Double.IsNaN(count) && (count >= 0))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["count"]);
	}
	this._repeatDuration = JSIL.New(System.TimeSpan, "_ctor$0", [0]);
	this._iterationCount = count;
	this._type = System.Windows.Media.Animation.RepeatBehavior.RepeatBehaviorType.IterationCount;
};
System.Windows.Media.Animation.RepeatBehavior.prototype._ctor$1 = function (duration) {
	if (System.TimeSpan.op_LessThan(duration.MemberwiseClone(), JSIL.New(System.TimeSpan, "_ctor$0", [0]))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["duration"]);
	}
	this._iterationCount = 0;
	this._repeatDuration = duration.MemberwiseClone();
	this._type = System.Windows.Media.Animation.RepeatBehavior.RepeatBehaviorType.RepeatDuration;
};
System.Windows.Media.Animation.RepeatBehavior.get_Forever = function () {
	var result = new System.Windows.Media.Animation.RepeatBehavior();
	result._type = System.Windows.Media.Animation.RepeatBehavior.RepeatBehaviorType.Forever;
	return result;
};
System.Windows.Media.Animation.RepeatBehavior.prototype.get_HasCount = function () {
	return (this._type === System.Windows.Media.Animation.RepeatBehavior.RepeatBehaviorType.IterationCount);
};
System.Windows.Media.Animation.RepeatBehavior.prototype.get_HasDuration = function () {
	return (this._type === System.Windows.Media.Animation.RepeatBehavior.RepeatBehaviorType.RepeatDuration);
};
System.Windows.Media.Animation.RepeatBehavior.prototype.get_Count = function () {
	if (this._type !== 0) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
	}
	return this._iterationCount;
};
System.Windows.Media.Animation.RepeatBehavior.prototype.get_Duration = function () {
	if (this._type !== System.Windows.Media.Animation.RepeatBehavior.RepeatBehaviorType.RepeatDuration) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
	}
	return this._repeatDuration;
};
System.Windows.Media.Animation.RepeatBehavior.prototype.Equals$0 = function (value) {
	return ((JSIL.TryCast(value, System.Windows.Media.Animation.RepeatBehavior) !== new System.Windows.Media.Animation.RepeatBehavior()) && this.Equals$1(JSIL.Cast(value, System.Windows.Media.Animation.RepeatBehavior).MemberwiseClone()));
};
System.Windows.Media.Animation.RepeatBehavior.prototype.Equals$1 = function (repeatBehavior) {
	if (this._type !== repeatBehavior._type) {
		return false;
	}
	switch (Number(this._type)) {
		case 0: 
			return (this._iterationCount === repeatBehavior._iterationCount);
		case 1: 
			return System.TimeSpan.op_Equality(this._repeatDuration.MemberwiseClone(), repeatBehavior._repeatDuration.MemberwiseClone());
		case 2: 
			return true;
		default: 
			return false;
	}
};
System.Windows.Media.Animation.RepeatBehavior.Equals = function (repeatBehavior1, repeatBehavior2) {
	return repeatBehavior1.Equals$1(repeatBehavior2);
};
System.Windows.Media.Animation.RepeatBehavior.prototype.GetHashCode = function () {
	switch (Number(this._type)) {
		case 0: 
			return this._iterationCount.GetHashCode();
		case 1: 
			return this._repeatDuration.GetHashCode();
		case 2: 
			return 2147483605;
		default: 
			return this.GetHashCode();
	}
};
System.Windows.Media.Animation.RepeatBehavior.prototype.toString = function () {
	return this.InternalToString(null, null);
};
System.Windows.Media.Animation.RepeatBehavior.prototype.ToString = function (formatProvider) {
	return this.InternalToString(null, formatProvider);
};
System.Windows.Media.Animation.RepeatBehavior.prototype.IFormattable_ToString = function (format, formatProvider) {
	return this.InternalToString(format, formatProvider);
};
System.Windows.Media.Animation.RepeatBehavior.prototype.InternalToString = function (format, formatProvider) {
	switch (Number(this._type)) {
		case 0: 
			var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
			stringBuilder.AppendFormat$1(formatProvider, ("{0:" + format + "}x"), [this._iterationCount]);
			return stringBuilder.toString();
		case 1: 
			return this._repeatDuration.toString();
		case 2: 
			return "Forever";
		default: 
			return null;
	}
};
System.Windows.Media.Animation.RepeatBehavior.op_Equality = function (repeatBehavior1, repeatBehavior2) {
	return repeatBehavior1.Equals$1(repeatBehavior2);
};
System.Windows.Media.Animation.RepeatBehavior.op_Inequality = function (repeatBehavior1, repeatBehavior2) {
	return !repeatBehavior1.Equals$1(repeatBehavior2);
};
JSIL.OverloadedMethod(System.Windows.Media.Animation.RepeatBehavior.prototype, "_ctor", [
		["_ctor$0", [System.Double]], 
		["_ctor$1", [System.TimeSpan]]
	]);
JSIL.OverloadedMethod(System.Windows.Media.Animation.RepeatBehavior.prototype, "Equals", [
		["Equals$0", [System.Object]], 
		["Equals$1", [System.Windows.Media.Animation.RepeatBehavior]]
	]);
JSIL.MakeProperty(System.Windows.Media.Animation.RepeatBehavior, "Forever", 
	System.Windows.Media.Animation.RepeatBehavior.get_Forever, null);
JSIL.MakeProperty(System.Windows.Media.Animation.RepeatBehavior.prototype, "HasCount", 
	System.Windows.Media.Animation.RepeatBehavior.prototype.get_HasCount, null);
JSIL.MakeProperty(System.Windows.Media.Animation.RepeatBehavior.prototype, "HasDuration", 
	System.Windows.Media.Animation.RepeatBehavior.prototype.get_HasDuration, null);
JSIL.MakeProperty(System.Windows.Media.Animation.RepeatBehavior.prototype, "Count", 
	System.Windows.Media.Animation.RepeatBehavior.prototype.get_Count, null);
JSIL.MakeProperty(System.Windows.Media.Animation.RepeatBehavior.prototype, "Duration", 
	System.Windows.Media.Animation.RepeatBehavior.prototype.get_Duration, null);
System.Windows.Media.Animation.RepeatBehavior.prototype._iterationCount = 0;
System.Windows.Media.Animation.RepeatBehavior.prototype._type = 0;
System.Windows.Media.Animation.RepeatBehavior.s_enusCultureInfo = null;
System.Windows.Media.Animation.RepeatBehavior._cctor = function () {
	System.Windows.Media.Animation.RepeatBehavior.s_enusCultureInfo = JSIL.New(System.Globalization.CultureInfo, "_ctor$0", ["en-US"]);
};

$asm02.System.Windows.ResourceManagerWrapper.GetResourceForUri$0 = function (xamlUri) {
	return $asm02.System.Windows.ResourceManagerWrapper.GetResourceForUri$1(xamlUri, null);
};
$asm02.System.Windows.ResourceManagerWrapper.GetResourceForUri$1 = function (xamlUri, componentType) {
	var text2 = new JSIL.Variable(null), text3 = new JSIL.Variable(null), text4 = new JSIL.Variable(null);
	var result = null;
	var resourceManager = null;
	$asm02.System.Windows.ResourceManagerWrapper.GetAssemblyNameAndPart(
		xamlUri, 
		/* ref */ text, 
		/* ref */ text2, 
		/* ref */ text3, 
		/* ref */ text4
	);
	try {
		var key = ((text2.value + text3.value + text4.value));
		if (!$asm02.System.Windows.ResourceManagerWrapper._ResourceManagerTable.ContainsKey(key)) {
			var assembly = null;
			if (!((componentType === null) || !$asm02.MS.Internal.QuirksMode.ShouldLoadComponentUseComponentAssemblyInsteadOfUriAssembly())) {
				assembly = componentType.Assembly;
			} else {
				assembly = $asm02.MS.Internal.JoltHelper.GetLoadedAssemblyByFullName(text2.value, text3.value, text4.value);
			}
			if (assembly !== null) {
				resourceManager = JSIL.New(System.Resources.ResourceManager, "_ctor$1", [(text2.value + ".g"), assembly]);
				$asm02.System.Windows.ResourceManagerWrapper._ResourceManagerTable.set_Item(key, resourceManager);
			}
		} else {
			resourceManager = $asm02.System.Windows.ResourceManagerWrapper._ResourceManagerTable.get_Item(key);
		}
		if (resourceManager !== null) {
			var text = new JSIL.Variable(text.value.ToLower$1(System.Globalization.CultureInfo.InvariantCulture));
			result = resourceManager.GetStream$1(text.value, System.Globalization.CultureInfo.CurrentUICulture);
		}
	} catch ($exception) {
		var arg_A4_0 = $exception;
		$asm02.MS.Internal.Error.GetXresultForException(arg_A4_0);
		result = null;
	}
	return result;
};
$asm02.System.Windows.ResourceManagerWrapper.GetAssemblyNameAndPart = function (uri, /* ref */ partName, /* ref */ assemblyName, /* ref */ assemblyVersion, /* ref */ assemblyKey) {
	var text = uri.toString();
	var num = 0;
	if ((text[0]) === "/") {
		num = 1;
	}
	var relativeUri = text.Substring$0(num).Replace$1("#", "%23");
	var uri2 = JSIL.New(System.Uri, "_ctor$2", [JSIL.New(System.Uri, "_ctor$0", ["http://temp/"]), relativeUri]);
	partName.value = uri2.GetComponents(System.UriComponents.Path, System.UriFormat.UriEscaped);
	assemblyName.value = System.String.Empty;
	assemblyVersion.value = System.String.Empty;
	assemblyKey.value = System.String.Empty;
	var num2 = text.IndexOf$1("/", num);
	var text2 = System.String.Empty;
	var flag = false;
	if (num2 > 0) {
		text2 = text.Substring$1(num, (num2 - num));
		if (text2.EndsWith$1(";component", System.StringComparison.OrdinalIgnoreCase)) {
			relativeUri = (text.Substring$0((num2 + 1))).Replace$1("#", "%23");
			uri2 = JSIL.New(System.Uri, "_ctor$2", [JSIL.New(System.Uri, "_ctor$0", ["http://temp/"]), relativeUri]);
			partName.value = uri2.GetComponents(System.UriComponents.Path, System.UriFormat.UriEscaped);
			flag = true;
		}
	}
	if (flag) {
		var array = text2.Split(JSIL.Array.New(System.Char, [";"]));
		var num3 = array.length;
		if (!((num3 <= 4) && (num3 >= 2))) {
			return;
		}
		assemblyName.value = System.Uri.UnescapeDataString(array[0]);
	__loop0__: 
		for (var i = 1; i < (num3 - 1); ++i) {
			if (array[i].StartsWith$1("v", System.StringComparison.OrdinalIgnoreCase)) {
				if (!System.String.IsNullOrEmpty(assemblyVersion.value)) {
					return;
				}
				assemblyVersion.value = array[i].Substring$0(1);
			} else {
				if (!System.String.IsNullOrEmpty(assemblyKey.value)) {
					return;
				}
				assemblyKey.value = array[i];
			}
		}
	}
};
$asm02.System.Windows.ResourceManagerWrapper.ClearCacheForAssembly = function (assemblyName) {
	return $asm02.System.Windows.ResourceManagerWrapper._ResourceManagerTable.Remove(assemblyName);
};
JSIL.OverloadedMethod($asm02.System.Windows.ResourceManagerWrapper, "GetResourceForUri", [
		["GetResourceForUri$0", [System.Uri]], 
		["GetResourceForUri$1", [System.Uri, System.Type]]
	]);
Object.defineProperty($asm02.System.Windows.ResourceManagerWrapper, "COMPONENT", {
		"value": ";component"}
);
Object.defineProperty($asm02.System.Windows.ResourceManagerWrapper, "VERSION", {
		"value": "v"}
);
Object.defineProperty($asm02.System.Windows.ResourceManagerWrapper, "COMPONENT_DELIMITER", {
		"value": ";"}
);
$asm02.System.Windows.ResourceManagerWrapper._ResourceManagerTable = null;
$asm02.System.Windows.ResourceManagerWrapper._cctor = function () {
	$asm02.System.Windows.ResourceManagerWrapper._ResourceManagerTable = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.String, System.Resources.ResourceManager), "_ctor$0", []);
};

System.Windows.Size.prototype._ctor = function (width, height) {
	if (!((width >= 0) && (height >= 0))) {
		throw JSIL.New(System.ArgumentException, "_ctor$0", []);
	}
	this._width = width;
	this._height = height;
};
System.Windows.Size.prototype.get_Width = function () {
	return this._width;
};
System.Windows.Size.prototype.set_Width = function (value) {
	if (value < 0) {
		throw JSIL.New(System.ArgumentException, "_ctor$0", []);
	}
	this._width = value;
};
System.Windows.Size.prototype.get_Height = function () {
	return this._height;
};
System.Windows.Size.prototype.set_Height = function (value) {
	if (value < 0) {
		throw JSIL.New(System.ArgumentException, "_ctor$0", []);
	}
	this._height = value;
};
System.Windows.Size.get_Empty = function () {
	return System.Windows.Size.s_empty;
};
System.Windows.Size.prototype.get_IsEmpty = function () {
	return (this._width < 0);
};
System.Windows.Size.op_Equality = function (size1, size2) {
	return ((size1.Width === size2.Width) && (size1.Height === size2.Height));
};
System.Windows.Size.op_Inequality = function (size1, size2) {
	return !System.Windows.Size.op_Equality(size1, size2);
};
System.Windows.Size.prototype.Equals$0 = function (o) {
	if (!((o !== null) && JSIL.TryCast(o, System.Windows.Size))) {
		return false;
	}
	var size = JSIL.Cast(o, System.Windows.Size).MemberwiseClone();
	return System.Windows.Size.Equals(this.MemberwiseClone(), size.MemberwiseClone());
};
System.Windows.Size.prototype.Equals$1 = function (value) {
	return System.Windows.Size.Equals(this.MemberwiseClone(), value);
};
System.Windows.Size.prototype.GetHashCode = function () {
	if (this.IsEmpty) {
		return 0;
	}
	return (this.Width.GetHashCode() ^ this.Height.GetHashCode());
};
System.Windows.Size.Equals = function (size1, size2) {
	if (size1.IsEmpty) {
		return size2.IsEmpty;
	}
	return (size1.Width.Equals$1(size2.Width) && size1.Height.Equals$1(size2.Height));
};
System.Windows.Size.CreateEmptySize = function () {
	var result = new System.Windows.Size();
	result._width = -Infinity;
	result._height = -Infinity;
	return result;
};
System.Windows.Size.prototype.toString = function () {
	if (this.IsEmpty) {
		return "Empty";
	}
	return System.String.Format("{0},{1}", this._width, this._height);
};
JSIL.OverloadedMethod(System.Windows.Size.prototype, "Equals", [
		["Equals$0", [System.Object]], 
		["Equals$1", [System.Windows.Size]]
	]);
JSIL.MakeProperty(System.Windows.Size.prototype, "Width", 
	System.Windows.Size.prototype.get_Width, System.Windows.Size.prototype.set_Width);
JSIL.MakeProperty(System.Windows.Size.prototype, "Height", 
	System.Windows.Size.prototype.get_Height, System.Windows.Size.prototype.set_Height);
JSIL.MakeProperty(System.Windows.Size, "Empty", 
	System.Windows.Size.get_Empty, null);
JSIL.MakeProperty(System.Windows.Size.prototype, "IsEmpty", 
	System.Windows.Size.prototype.get_IsEmpty, null);
System.Windows.Size.prototype._width = 0;
System.Windows.Size.prototype._height = 0;
System.Windows.Size._cctor = function () {
	System.Windows.Size.s_empty = new System.Windows.Size();
	System.Windows.Size.s_empty = System.Windows.Size.CreateEmptySize().MemberwiseClone();
};

System.Windows.Resources.StreamResourceInfo.prototype._ctor = function (stream, contentType) {
	System.Object.prototype._ctor.call(this);
	if (stream === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["stream"]);
	}
	this._contentType = contentType;
	this._stream = stream;
};
System.Windows.Resources.StreamResourceInfo.prototype.get_Stream = function () {
	return this._stream;
};
System.Windows.Resources.StreamResourceInfo.prototype.get_ContentType = function () {
	return this._contentType;
};
JSIL.MakeProperty(System.Windows.Resources.StreamResourceInfo.prototype, "Stream", 
	System.Windows.Resources.StreamResourceInfo.prototype.get_Stream, null);
JSIL.MakeProperty(System.Windows.Resources.StreamResourceInfo.prototype, "ContentType", 
	System.Windows.Resources.StreamResourceInfo.prototype.get_ContentType, null);
System.Windows.Resources.StreamResourceInfo.prototype._contentType = null;
System.Windows.Resources.StreamResourceInfo.prototype._stream = null;

$asm02.System.Windows.DependencyPropertyChangedWeakListener.prototype._ctor = function (source, expression) {
	System.Object.prototype._ctor.call(this);
	this._source = source;
	this._expression = JSIL.New(System.WeakReference, "_ctor$1", [expression]);
	this._source.add_DPChanged(JSIL.Delegate.New("System.Windows.DPChangedEventHandler", this, $asm02.System.Windows.DependencyPropertyChangedWeakListener.prototype.SourcePropertyChanged));
};
$asm02.System.Windows.DependencyPropertyChangedWeakListener.prototype.SourcePropertyChanged = function (c, dp) {
	var templateBindingExpression = this._expression ? JSIL.TryCast(this._expression.Target, System.Windows.TemplateBindingExpression) : null;
	if (templateBindingExpression !== null) {
		templateBindingExpression.SourcePropertyChanged(c, dp);
		return;
	}
	this.Disconnect();
};
$asm02.System.Windows.DependencyPropertyChangedWeakListener.prototype.Disconnect = function () {
	if (this._source === null) {
		return;
	}
	this._source.remove_DPChanged(JSIL.Delegate.New("System.Windows.DPChangedEventHandler", this, $asm02.System.Windows.DependencyPropertyChangedWeakListener.prototype.SourcePropertyChanged));
	this._source = null;
	this._expression = null;
};
$asm02.System.Windows.DependencyPropertyChangedWeakListener.prototype._source = null;
$asm02.System.Windows.DependencyPropertyChangedWeakListener.prototype._expression = null;

$asm02.System.Windows.CorePropertyChangedWeakListener.prototype._ctor = function (source, expression) {
	System.Object.prototype._ctor.call(this);
	this._source = source;
	this._expression = JSIL.New(System.WeakReference, "_ctor$1", [expression]);
	this._source.add_CorePropertyChanged(JSIL.Delegate.New("MS.Internal.CorePropertyChangedEventHandler", this, $asm02.System.Windows.CorePropertyChangedWeakListener.prototype.CorePropertyChanged));
};
$asm02.System.Windows.CorePropertyChangedWeakListener.prototype.CorePropertyChanged = function (c, args) {
	var templateBindingExpressionForCore = this._expression ? JSIL.TryCast(this._expression.Target, $asm02.System.Windows.TemplateBindingExpressionForCore) : null;
	if (templateBindingExpressionForCore !== null) {
		templateBindingExpressionForCore.CorePropertyChanged(c, args);
		return;
	}
	this.Disconnect();
};
$asm02.System.Windows.CorePropertyChangedWeakListener.prototype.Disconnect = function () {
	if (this._source === null) {
		return;
	}
	this._source.remove_CorePropertyChanged(JSIL.Delegate.New("MS.Internal.CorePropertyChangedEventHandler", this, $asm02.System.Windows.CorePropertyChangedWeakListener.prototype.CorePropertyChanged));
	this._source = null;
	this._expression = null;
};
$asm02.System.Windows.CorePropertyChangedWeakListener.prototype._source = null;
$asm02.System.Windows.CorePropertyChangedWeakListener.prototype._expression = null;

System.Windows.TemplateBindingExpression.prototype._ctor$0 = function () {
	System.Windows.Expression.prototype._ctor.call(this);
};
System.Windows.TemplateBindingExpression.prototype._ctor$1 = function (source, sourceDp, runtimeCheck) {
	System.Windows.Expression.prototype._ctor.call(this);
	this._source = source;
	this._sourceProperty = sourceDp;
	this._runtimeCheck = runtimeCheck;
};
System.Windows.TemplateBindingExpression.prototype.GetValue = function (d, dp) {
	var value = this._source.GetValue(this._sourceProperty);
	if (!(this._runtimeCheck && !System.Windows.Expression.prototype.IsValidValueForUpdate.call(this, value, this._targetProperty._propertyType))) {
		return value;
	}
	return this._targetProperty.GetDefaultValue(this._target);
};
System.Windows.TemplateBindingExpression.prototype.OnAttach = function (d, dp) {
	this._target = JSIL.TryCast(d, System.Windows.FrameworkElement);
	this._targetProperty = dp;
	if (dp === System.Windows.Controls.ContentControl.ContentProperty) {
		$asm02.MS.Internal.XcpImports.ContentControl_SetContentIsTemplateBoundManaged(JSIL.Cast(d, System.Windows.Controls.ContentControl), true);
	}
	this._listener = new $asm02.System.Windows.DependencyPropertyChangedWeakListener(this._source, this);
};
System.Windows.TemplateBindingExpression.prototype.OnDetach = function () {
	if (this._targetProperty === System.Windows.Controls.ContentControl.ContentProperty) {
		$asm02.MS.Internal.XcpImports.ContentControl_SetContentIsTemplateBoundManaged(JSIL.Cast(this._target, System.Windows.Controls.ContentControl), false);
	}
	this._listener.Disconnect();
};
System.Windows.TemplateBindingExpression.prototype.SourcePropertyChanged = function (c, dp) {
	if (dp === this._sourceProperty) {
		this._target.RefreshExpression(this._targetProperty);
	}
};
System.Windows.TemplateBindingExpression.prototype.get_CanSetValue = function () {
	return false;
};
System.Windows.TemplateBindingExpression.prototype.get_IsAssociated = function () {
	return (this._target !== null);
};
System.Windows.TemplateBindingExpression.PropertyTypesCompatible = function (sourceType, targetType, /* ref */ fRuntimeCheck) {
	if (!((sourceType !== targetType) && !targetType.IsAssignableFrom(sourceType))) {
		fRuntimeCheck.value = false;
		return true;
	}
	if (sourceType.IsAssignableFrom(targetType)) {
		fRuntimeCheck.value = true;
		return true;
	}
	fRuntimeCheck.value = false;
	return false;
};
JSIL.OverloadedMethod(System.Windows.TemplateBindingExpression.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Windows.Controls.Control, System.Windows.DependencyProperty, System.Boolean]]
	]);
JSIL.MakeProperty(System.Windows.TemplateBindingExpression.prototype, "CanSetValue", 
	System.Windows.TemplateBindingExpression.prototype.get_CanSetValue, null);
JSIL.MakeProperty(System.Windows.TemplateBindingExpression.prototype, "IsAssociated", 
	System.Windows.TemplateBindingExpression.prototype.get_IsAssociated, null);
System.Windows.TemplateBindingExpression.prototype._source = null;
System.Windows.TemplateBindingExpression.prototype._sourceProperty = null;
System.Windows.TemplateBindingExpression.prototype._target = null;
System.Windows.TemplateBindingExpression.prototype._targetProperty = null;
System.Windows.TemplateBindingExpression.prototype._listener = null;
System.Windows.TemplateBindingExpression.prototype._runtimeCheck = false;

$asm02.System.Windows.TemplateBindingExpressionForCore.prototype._ctor = function (source, sourceDp, fRuntimeCheck) {
	System.Windows.TemplateBindingExpression.prototype._ctor$1.call(this, source, sourceDp, fRuntimeCheck);
};
$asm02.System.Windows.TemplateBindingExpressionForCore.prototype.OnAttach = function (d, dp) {
	System.Windows.TemplateBindingExpression.prototype.OnAttach.call(this, d, dp);
	this._coreListener = new $asm02.System.Windows.CorePropertyChangedWeakListener(this._source, this);
};
$asm02.System.Windows.TemplateBindingExpressionForCore.prototype.OnDetach = function () {
	System.Windows.TemplateBindingExpression.prototype.OnDetach.call(this);
	this._coreListener.Disconnect();
};
$asm02.System.Windows.TemplateBindingExpressionForCore.prototype.CorePropertyChanged = function (sender, e) {
	var dp = System.Windows.DependencyProperty.QueryRegisteredCoreProperty$0(e.Property);
	System.Windows.TemplateBindingExpression.prototype.SourcePropertyChanged.call(this, JSIL.TryCast(sender, System.Windows.DependencyObject), dp);
};
$asm02.System.Windows.TemplateBindingExpressionForCore.prototype._coreListener = null;

System.Windows.Thickness.prototype._ctor$0 = function (uniformLength) {
	this._Bottom = uniformLength;
	this._Right = uniformLength;
	this._Top = uniformLength;
	this._Left = uniformLength;
};
System.Windows.Thickness.prototype._ctor$1 = function (left, top, right, bottom) {
	this._Left = left;
	this._Top = top;
	this._Right = right;
	this._Bottom = bottom;
};
System.Windows.Thickness.prototype.toString = function () {
	return this.ToString(System.Globalization.CultureInfo.InvariantCulture);
};
System.Windows.Thickness.prototype.ToString = function (cultureInfo) {
	var numericListSeparator = $asm02.MS.Internal.TokenizerHelper.GetNumericListSeparator(cultureInfo);
	var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$1", [64]);
	stringBuilder.Append$2(this.InternalToString(this._Left, cultureInfo));
	stringBuilder.Append$7(numericListSeparator);
	stringBuilder.Append$2(this.InternalToString(this._Top, cultureInfo));
	stringBuilder.Append$7(numericListSeparator);
	stringBuilder.Append$2(this.InternalToString(this._Right, cultureInfo));
	stringBuilder.Append$7(numericListSeparator);
	stringBuilder.Append$2(this.InternalToString(this._Bottom, cultureInfo));
	return stringBuilder.toString();
};
System.Windows.Thickness.prototype.InternalToString = function (l, cultureInfo) {
	if (System.Double.IsNaN(l)) {
		return "Auto";
	}
	return System.Convert.ToString$25(l, cultureInfo);
};
System.Windows.Thickness.prototype.Equals$0 = function (obj) {
	if (JSIL.TryCast(obj, System.Windows.Thickness) !== new System.Windows.Thickness()) {
		var t = JSIL.Cast(obj, System.Windows.Thickness).MemberwiseClone();
		return System.Windows.Thickness.op_Equality(this.MemberwiseClone(), t.MemberwiseClone());
	}
	return false;
};
System.Windows.Thickness.prototype.Equals$1 = function (thickness) {
	return System.Windows.Thickness.op_Equality(this.MemberwiseClone(), thickness);
};
System.Windows.Thickness.prototype.GetHashCode = function () {
	return (((this._Left.GetHashCode() ^ this._Top.GetHashCode()) ^ this._Right.GetHashCode()) ^ this._Bottom.GetHashCode());
};
System.Windows.Thickness.op_Equality = function (t1, t2) {
	return (!((t1._Left !== t2._Left) || 
			(t1._Top !== t2._Top) || 
			(t1._Right !== t2._Right)) && (t1._Bottom === t2._Bottom));
};
System.Windows.Thickness.op_Inequality = function (t1, t2) {
	return !System.Windows.Thickness.op_Equality(t1, t2);
};
System.Windows.Thickness.prototype.get_Left = function () {
	return this._Left;
};
System.Windows.Thickness.prototype.set_Left = function (value) {
	this._Left = value;
};
System.Windows.Thickness.prototype.get_Top = function () {
	return this._Top;
};
System.Windows.Thickness.prototype.set_Top = function (value) {
	this._Top = value;
};
System.Windows.Thickness.prototype.get_Right = function () {
	return this._Right;
};
System.Windows.Thickness.prototype.set_Right = function (value) {
	this._Right = value;
};
System.Windows.Thickness.prototype.get_Bottom = function () {
	return this._Bottom;
};
System.Windows.Thickness.prototype.set_Bottom = function (value) {
	this._Bottom = value;
};
JSIL.OverloadedMethod(System.Windows.Thickness.prototype, "_ctor", [
		["_ctor$0", [System.Double]], 
		["_ctor$1", [System.Double, System.Double, System.Double, System.Double]]
	]);
JSIL.OverloadedMethod(System.Windows.Thickness.prototype, "Equals", [
		["Equals$0", [System.Object]], 
		["Equals$1", [System.Windows.Thickness]]
	]);
JSIL.MakeProperty(System.Windows.Thickness.prototype, "Left", 
	System.Windows.Thickness.prototype.get_Left, System.Windows.Thickness.prototype.set_Left);
JSIL.MakeProperty(System.Windows.Thickness.prototype, "Top", 
	System.Windows.Thickness.prototype.get_Top, System.Windows.Thickness.prototype.set_Top);
JSIL.MakeProperty(System.Windows.Thickness.prototype, "Right", 
	System.Windows.Thickness.prototype.get_Right, System.Windows.Thickness.prototype.set_Right);
JSIL.MakeProperty(System.Windows.Thickness.prototype, "Bottom", 
	System.Windows.Thickness.prototype.get_Bottom, System.Windows.Thickness.prototype.set_Bottom);
System.Windows.Thickness.prototype._Left = 0;
System.Windows.Thickness.prototype._Top = 0;
System.Windows.Thickness.prototype._Right = 0;
System.Windows.Thickness.prototype._Bottom = 0;

$asm02.MS.Internal.TracingServices.TraceEvent = function (marker, type) {
	if (!$asm02.MS.Internal.TracingServices.s_IsInitialized) {
		$asm02.MS.Internal.TracingServices.Initialize();
	}
	if ($asm02.MS.Internal.TracingServices.s_IsInitialized) {
		$asm02.MS.Internal.XcpImports.TraceXcpEvent(marker, type);
	}
};
$asm02.MS.Internal.TracingServices.TraceEventVerbose = function (marker, data, type, level, suite) {
	if (!$asm02.MS.Internal.TracingServices.s_IsInitialized) {
		$asm02.MS.Internal.TracingServices.Initialize();
	}
	if (!(!$asm02.MS.Internal.TracingServices.s_IsInitialized || 
			(level > $asm02.MS.Internal.TracingServices.s_EnabledLevel) || ((suite & $asm02.MS.Internal.TracingServices.s_EnabledSuites) <= 0))) {
		$asm02.MS.Internal.XcpImports.TraceXcpEventVerbose(marker, ((suite & 1) > 0) ? data : null, type);
	}
};
$asm02.MS.Internal.TracingServices.Initialize = function () {
	var b = new JSIL.Variable(0), num = new JSIL.Variable(0), num2 = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.GetXcpTraceState(/* ref */ b, /* ref */ num, /* ref */ num2);
	if (b.value <= 6) {
		$asm02.MS.Internal.TracingServices.s_EnabledLevel = b.value;
		$asm02.MS.Internal.TracingServices.s_EnabledSuites = num.value;
		$asm02.MS.Internal.TracingServices.s_IsInitialized = true;
	}
};
Object.defineProperty($asm02.MS.Internal.TracingServices, "XCP_EVENT_TRACE_FLAGS_DETAILED", {
		"value": 1}
);
Object.defineProperty($asm02.MS.Internal.TracingServices, "XCP_EVENT_TRACE_FLAGS_TEMPORARY", {
		"value": 2}
);
Object.defineProperty($asm02.MS.Internal.TracingServices, "XCP_EVENT_TRACE_FLAGS_CORE", {
		"value": 4}
);
Object.defineProperty($asm02.MS.Internal.TracingServices, "XCP_EVENT_TRACE_FLAGS_MANAGED", {
		"value": 8}
);
Object.defineProperty($asm02.MS.Internal.TracingServices, "XCP_EVENT_TRACE_FLAGS_PARSER", {
		"value": 16}
);
Object.defineProperty($asm02.MS.Internal.TracingServices, "XCP_EVENT_TRACE_FLAGS_TEXT", {
		"value": 32}
);
Object.defineProperty($asm02.MS.Internal.TracingServices, "XCP_EVENT_TRACE_FLAGS_LAYOUT", {
		"value": 64}
);
Object.defineProperty($asm02.MS.Internal.TracingServices, "XCP_EVENT_TRACE_FLAGS_CONTROLS", {
		"value": 128}
);
Object.defineProperty($asm02.MS.Internal.TracingServices, "XCP_EVENT_TRACE_FLAGS_APPMODEL", {
		"value": 256}
);
Object.defineProperty($asm02.MS.Internal.TracingServices, "XCP_EVENT_TRACE_FLAGS_DATABINDING", {
		"value": 512}
);
Object.defineProperty($asm02.MS.Internal.TracingServices, "XCP_EVENT_TRACE_FLAGS_TEMPLATES", {
		"value": 1024}
);
Object.defineProperty($asm02.MS.Internal.TracingServices, "XCP_EVENT_TRACE_FLAGS_ALL", {
		"value": 4294967295}
);
$asm02.MS.Internal.TracingServices.s_EnabledLevel = 0;
$asm02.MS.Internal.TracingServices.s_EnabledSuites = 0;
$asm02.MS.Internal.TracingServices.s_IsInitialized = false;
$asm02.MS.Internal.TracingServices._cctor = function () {
	$asm02.MS.Internal.TracingServices.s_IsInitialized = false;
};

$asm02.MS.Internal.TwoWayDictionary$b2.prototype._ctor$0 = function () {
	System.Object.prototype._ctor.call(this);
	this.forwardLookup = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(this.TKey, this.TValue), "_ctor$0", []);
	this.reverseLookup = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(this.TValue, this.TKey), "_ctor$0", []);
};
$asm02.MS.Internal.TwoWayDictionary$b2.prototype._ctor$1 = function (allowDuplicateValues) {
	System.Object.prototype._ctor.call(this);
	this.allowDuplicateValues = allowDuplicateValues;
	this.forwardLookup = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(this.TKey, this.TValue), "_ctor$0", []);
	this.reverseLookup = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(this.TValue, this.TKey), "_ctor$0", []);
};
$asm02.MS.Internal.TwoWayDictionary$b2.prototype.Add = function (key, value) {
	this.forwardLookup.Add(key, value);
	try {
		this.reverseLookup.Add(value, key);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.ArgumentException)) {
			if (!this.allowDuplicateValues) {
				this.forwardLookup.Remove(key);
				throw $exception;
			}
		} else {
			throw $exception;
		}
	}
};
$asm02.MS.Internal.TwoWayDictionary$b2.prototype.get_Count = function () {
	return this.forwardLookup.Count;
};
$asm02.MS.Internal.TwoWayDictionary$b2.prototype.get_Keys = function () {
	return this.forwardLookup.Keys;
};
$asm02.MS.Internal.TwoWayDictionary$b2.prototype.ContainsKey = function (key) {
	return this.forwardLookup.ContainsKey(key);
};
$asm02.MS.Internal.TwoWayDictionary$b2.prototype.ContainsValue = function (value) {
	return this.reverseLookup.ContainsKey(value);
};
$asm02.MS.Internal.TwoWayDictionary$b2.prototype.GetKey = function (value) {
	return this.reverseLookup.get_Item(value);
};
$asm02.MS.Internal.TwoWayDictionary$b2.prototype.GetValue = function (key) {
	return this.forwardLookup.get_Item(key);
};
$asm02.MS.Internal.TwoWayDictionary$b2.prototype.TryGetKey = function (value, /* ref */ key) {
	return this.reverseLookup.TryGetValue(value, /* ref */ key);
};
$asm02.MS.Internal.TwoWayDictionary$b2.prototype.TryGetValue = function (key, /* ref */ value) {
	return this.forwardLookup.TryGetValue(key, /* ref */ value);
};
JSIL.OverloadedMethod($asm02.MS.Internal.TwoWayDictionary$b2.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Boolean]]
	]);
JSIL.MakeProperty($asm02.MS.Internal.TwoWayDictionary$b2.prototype, "Count", 
	$asm02.MS.Internal.TwoWayDictionary$b2.prototype.get_Count, null);
JSIL.MakeProperty($asm02.MS.Internal.TwoWayDictionary$b2.prototype, "Keys", 
	$asm02.MS.Internal.TwoWayDictionary$b2.prototype.get_Keys, null);
$asm02.MS.Internal.TwoWayDictionary$b2.prototype.forwardLookup = null;
$asm02.MS.Internal.TwoWayDictionary$b2.prototype.reverseLookup = null;
$asm02.MS.Internal.TwoWayDictionary$b2.prototype.allowDuplicateValues = false;

$asm02.MS.Internal.TypeReflector.LookupTypeBits = function (type, bits) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				if (bits > $asm02.MS.Internal.BoolTypeBits.btbTemplate) {
					if (bits <= $asm02.MS.Internal.BoolTypeBits.btbTrimSurroundingWhitespace) {
						if (bits <= $asm02.MS.Internal.BoolTypeBits.btbNameScope) {
							if (!((bits === $asm02.MS.Internal.BoolTypeBits.btbNullable) || (bits === $asm02.MS.Internal.BoolTypeBits.btbNameScope))) {
								__label0__ = "IL_157";
								continue __step0__;
							}
							__label0__ = "IL_122";
							continue __step0__;
						} else {
							if (bits === $asm02.MS.Internal.BoolTypeBits.btbObsolete) {
								__label0__ = "IL_122";
								continue __step0__;
							}
							if (bits !== $asm02.MS.Internal.BoolTypeBits.btbTrimSurroundingWhitespace) {
								__label0__ = "IL_157";
								continue __step0__;
							}
						}
					} else if (bits <= $asm02.MS.Internal.BoolTypeBits.btbUsableDuringInitialization) {
						if (bits !== $asm02.MS.Internal.BoolTypeBits.btbWhitespaceSignificantCollection) {
							if (bits !== $asm02.MS.Internal.BoolTypeBits.btbUsableDuringInitialization) {
								__label0__ = "IL_157";
								continue __step0__;
							}
							__label0__ = "IL_122";
							continue __step0__;
						}
					} else {
						if (bits === $asm02.MS.Internal.BoolTypeBits.btbIsPublic) {
							return type.IsPublic;
						}
						if (bits !== $asm02.MS.Internal.BoolTypeBits.btbIsISupportInitialize) {
							__label0__ = "IL_157";
							continue __step0__;
						}
						return System.ComponentModel.ISupportInitialize.IsAssignableFrom(type);
					}
					return false;
				}
				if (bits <= $asm02.MS.Internal.BoolTypeBits.btbDictionary) {
					switch (Number(bits)) {
						case 1: 
							return (type === System.String);
						case 2: 
							return $asm02.MS.Internal.TypeReflector.LookupIsConstructible(type);
						case 3: 
							__label0__ = "IL_157";
							continue __step0__;
						case 4: 
							break;
						default: 
							if (bits !== $asm02.MS.Internal.BoolTypeBits.btbList) {
								if (bits !== $asm02.MS.Internal.BoolTypeBits.btbDictionary) {
									__label0__ = "IL_157";
									continue __step0__;
								}
								return $asm02.MS.Internal.TypeReflector.IsDictionary(type);
							}
							break;
					}
					return $asm02.MS.Internal.TypeReflector.IsCollection(type);
				}
				if (bits <= $asm02.MS.Internal.BoolTypeBits.btbXmlData) {
					if (bits === $asm02.MS.Internal.BoolTypeBits.btbArray) {
						return type.IsArray;
					}
					if (bits !== $asm02.MS.Internal.BoolTypeBits.btbXmlData) {
						__label0__ = "IL_157";
						continue __step0__;
					}
				} else {
					if (bits === $asm02.MS.Internal.BoolTypeBits.btbMarkupExtension) {
						return $asm02.MS.Internal.IMarkupExtension.IsAssignableFrom(type);
					}
					if (bits !== $asm02.MS.Internal.BoolTypeBits.btbTemplate) {
						__label0__ = "IL_157";
						continue __step0__;
					}
					return false;
				}
				__label0__ = "IL_122";
				continue __step0__;
				break;
			case "IL_122":
				throw new System.Exception(("Unexpected type bit " + bits.toString()));
				__label0__ = "IL_157";
				continue __step0__;
				break;
			case "IL_157":
				throw new System.Exception(("Unexpected type bit " + bits.toString()));
				break __step0__;
		}
	}
};
$asm02.MS.Internal.TypeReflector.LookupPropertyBits = function (prop, bits) {
	if (bits <= $asm02.MS.Internal.BoolPropertyBits.bpbIsReadOnly) {
		switch (Number(bits)) {
			case 1: 
				return $asm02.MS.Internal.TypeReflector.LookupIsBrowsable(prop);
			case 2: 
				return $asm02.MS.Internal.TypeReflector.LookupIsAmbient(prop);
			case 3: 
				break;
			case 4: 
				return $asm02.MS.Internal.TypeReflector.LookupIsObsolete(prop);
			default: 
				if (bits === $asm02.MS.Internal.BoolPropertyBits.bpbIsPublic) {
					return ($asm02.MS.Internal.TypeReflector.LookupIsPublic$0(JSIL.TryCast(prop, System.Reflection.PropertyInfo)) || $asm02.MS.Internal.TypeReflector.LookupIsPublic$1(JSIL.TryCast(prop, System.Reflection.EventInfo)));
				}
				if (bits === $asm02.MS.Internal.BoolPropertyBits.bpbIsReadOnly) {
					return ((JSIL.TryCast(prop, System.Reflection.PropertyInfo) !== null) && !JSIL.Cast(prop, System.Reflection.PropertyInfo).CanWrite);
				}
				break;
		}
	} else {
		if (bits === $asm02.MS.Internal.BoolPropertyBits.bpbIsStatic) {
			return ($asm02.MS.Internal.TypeReflector.LookupIsStatic$0(JSIL.TryCast(prop, System.Reflection.PropertyInfo)) || $asm02.MS.Internal.TypeReflector.LookupIsStatic$1(JSIL.TryCast(prop, System.Reflection.EventInfo)));
		}
		if (bits === $asm02.MS.Internal.BoolPropertyBits.bpbIsAttachable) {
			return $asm02.MS.Internal.TypeReflector.LookupIsAttachable(prop);
		}
		if (bits === $asm02.MS.Internal.BoolPropertyBits.bpbIsEvent) {
			return JSIL.CheckType(prop, System.Reflection.EventInfo);
		}
	}
	throw new System.Exception(("Unexpected type bit " + bits.toString()));
};
$asm02.MS.Internal.TypeReflector.LookupIsPublic$0 = function (prop) {
	if (prop === null) {
		return false;
	}
	var getMethod = prop.GetGetMethod$1();
	var setMethod = prop.GetSetMethod$1();
	return ((prop.CanRead && 
			(getMethod !== null) && 
			getMethod.IsPublic) || (!(!prop.CanWrite || 
				(setMethod === null)) && 
			setMethod.IsPublic));
};
$asm02.MS.Internal.TypeReflector.LookupIsPublic$1 = function (prop) {
	return ((prop !== null) && prop.GetAddMethod$1().IsPublic);
};
$asm02.MS.Internal.TypeReflector.LookupIsStatic$0 = function (prop) {
	if (prop === null) {
		return false;
	}
	var getMethod = prop.GetGetMethod$1();
	var setMethod = prop.GetSetMethod$1();
	return ((prop.CanRead && 
			(getMethod !== null) && 
			getMethod.IsStatic) || (!(!prop.CanWrite || 
				(setMethod === null)) && 
			setMethod.IsStatic));
};
$asm02.MS.Internal.TypeReflector.LookupIsStatic$1 = function (prop) {
	return ((prop !== null) && prop.GetAddMethod$1().IsStatic);
};
$asm02.MS.Internal.TypeReflector.LookupIsAmbient = function (prop) {
	return false;
};
$asm02.MS.Internal.TypeReflector.LookupIsAttachable = function (prop) {
	return false;
};
$asm02.MS.Internal.TypeReflector.LookupIsObsolete = function (prop) {
	return ($asm02.MS.Internal.TypeReflector.LookupCustomAttribute(prop, System.ObsoleteAttribute) !== null);
};
$asm02.MS.Internal.TypeReflector.LookupCustomAttribute = function (prop, attrType) {
	var array = $asm02.MS.Internal.TypeReflector.LookupCustomAttributes(prop, attrType);
	if (array.length === 0) {
		return null;
	}
	if (array.length > 1) {
		throw new System.Exception("Too many attributes");
	}
	return array[0];
};
$asm02.MS.Internal.TypeReflector.LookupCustomAttributes = function (prop, attrType) {
	return prop.GetCustomAttributes$1(attrType, true);
};
$asm02.MS.Internal.TypeReflector.LookupIsBrowsable = function (prop) {
	return false;
};
$asm02.MS.Internal.TypeReflector.LookupIsConstructible = function (type) {
	if (!(!type.IsAbstract && 
			!type.IsInterface && 
			!type.IsGenericParameter && !type.IsGenericTypeDefinition)) {
		return false;
	}
	if (type.IsValueType) {
		return true;
	}
	var constructors = type.GetConstructors$1((System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public));
	if (constructors.length > 0) {
		return true;
	}
	if (!type.IsPublic) {
		constructors = type.GetConstructors$1((System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic));
		var array = constructors;
	__loop0__: 
		for (var i = 0; i < array.length; ++i) {
			var constructorInfo = array[i];
			if (!(!constructorInfo.IsAssembly && !constructorInfo.IsFamilyOrAssembly)) {
				return true;
			}
		}
	}
	return false;
};
$asm02.MS.Internal.TypeReflector.LookupTypeConverterForType = function (type) {
	var type2 = null;
	var obj = $asm02.MS.Internal.TypeReflector.LookupCustomAttribute(type, System.ComponentModel.TypeConverterAttribute);
	var typeConverterAttribute = JSIL.Cast(obj, System.ComponentModel.TypeConverterAttribute);
	if (typeConverterAttribute !== null) {
		type2 = $asm02.MS.Internal.TypeReflector.GetTypeFromFullTypeName(typeConverterAttribute.ConverterTypeName);
	} else {
		type2 = $asm02.MS.Internal.TypeReflector.LookupBaseSystemTypeConverterForType(type);
	}
	if (type2 === null) {
		if (type.TypeHandle.Equals$1(System.String.TypeHandle.MemberwiseClone())) {
			type2 = System.String;
		} else if (!(!type.TypeHandle.Equals$1(System.Object.TypeHandle.MemberwiseClone()) && !type.TypeHandle.Equals$1(System.Collections.IEnumerable.TypeHandle.MemberwiseClone()))) {
			type2 = System.String;
		} else if ($asm02.MS.Internal.TypeReflector.IsNullableGeneric(type)) {
			var genericArguments = type.GetGenericArguments();
			type2 = genericArguments[0];
		} else {
			type2 = null;
		}
	}
	return type2;
};
$asm02.MS.Internal.TypeReflector.LookupTypeConverterForProperty = function (member) {
	var result = null;
	var obj = $asm02.MS.Internal.TypeReflector.LookupCustomAttribute(member.Member, System.ComponentModel.TypeConverterAttribute);
	var typeConverterAttribute = JSIL.Cast(obj, System.ComponentModel.TypeConverterAttribute);
	if (typeConverterAttribute !== null) {
		result = $asm02.MS.Internal.TypeReflector.GetTypeFromFullTypeName(typeConverterAttribute.ConverterTypeName);
	} else if (member.MemberKind === $asm02.MS.Internal.XamlMemberKind.Event) {
		result = System.EventHandler;
	} else {
		result = $asm02.MS.Internal.TypeReflector.LookupTypeConverterForType(member.MemberType);
	}
	return result;
};
$asm02.MS.Internal.TypeReflector.LookupBaseSystemTypeConverterForType = function (type) {
	if (type.IsEnum) {
		return type;
	}
	if (type === System.Globalization.CultureInfo) {
		return type;
	}
	return null;
};
$asm02.MS.Internal.TypeReflector.ResolveAmbiguousProperty$0 = function (type, name) {
	return $asm02.MS.Internal.TypeReflector.ResolveAmbiguousProperty$1(type, name, (System.Reflection.BindingFlags.GetProperty | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
};
$asm02.MS.Internal.TypeReflector.ResolveAmbiguousProperty$1 = function (type, name, bindingFlags) {
	var propertyInfo = null;
	var properties = type.GetProperties$0(bindingFlags);
	var array = properties;
__loop0__: 
	for (var i = 0; i < array.length; ++i) {
		var propertyInfo2 = array[i];
		if (!((propertyInfo2.GetIndexParameters().length !== 0) || 
				!(propertyInfo2.Name == name) || ((propertyInfo !== null) && 
					!propertyInfo.DeclaringType.IsAssignableFrom(propertyInfo2.DeclaringType)))) {
			propertyInfo = propertyInfo2;
		}
	}
	return propertyInfo;
};
$asm02.MS.Internal.TypeReflector.IsCollection = function (type) {
	return $asm02.MS.Internal.TypeReflector.LookupIsCollection(type);
};
$asm02.MS.Internal.TypeReflector.IsDictionary = function (type) {
	return $asm02.MS.Internal.TypeReflector.LookupIsDictionary(type);
};
$asm02.MS.Internal.TypeReflector.LookupIsCollection = function (type) {
	return System.Collections.IList.IsAssignableFrom(type);
};
$asm02.MS.Internal.TypeReflector.LookupIsDictionary = function (type) {
	return System.Collections.IDictionary.IsAssignableFrom(type);
};
$asm02.MS.Internal.TypeReflector.get_IEnumerableGetEnumeratorMethod = function () {
	return System.Collections.IEnumerable.GetMethod$5("GetEnumerator");
};
$asm02.MS.Internal.TypeReflector.get_IListAddMethod = function () {
	return System.Collections.IList.GetMethod$5("Add");
};
$asm02.MS.Internal.TypeReflector.get_IDictionaryAddMethod = function () {
	return System.Collections.IDictionary.GetMethod$5("Add");
};
$asm02.MS.Internal.TypeReflector.GetGenericInterface = function (type, interfaceType, /* ref */ hasMultiple) {
	var type2 = null;
	hasMultiple.value = false;
	var interfaces = type.GetInterfaces();
__loop0__: 
	for (var i = 0; i < interfaces.length; ++i) {
		var type3 = interfaces[i];
		if (!(!type3.IsGenericType || (type3.GetGenericTypeDefinition() !== interfaceType))) {
			if (type2 !== null) {
				hasMultiple.value = true;
				return null;
			}
			type2 = type3;
		}
	}
	return type2;
};
$asm02.MS.Internal.TypeReflector.GetMethod = function (type, name, argTypes) {
	var methodInfo = type.GetMethod$1(
		name, 
		$asm02.MS.Internal.TypeReflector.GetBindingFlags(type), 
		null, 
		argTypes, 
		null
	);
	if (!((methodInfo === null) || !$asm02.MS.Internal.TypeReflector.IsPrivateOrProtected(methodInfo))) {
		methodInfo = null;
	}
	return methodInfo;
};
$asm02.MS.Internal.TypeReflector.GetBindingFlags = function (type) {
	var bindingFlags = (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public);
	if (!type.IsPublic) {
		bindingFlags = (bindingFlags | System.Reflection.BindingFlags.NonPublic);
	}
	return bindingFlags;
};
$asm02.MS.Internal.TypeReflector.GetPublicMethod = function (type, name, argCount) {
	var member = type.GetMember$2(name, System.Reflection.MemberTypes.Method, (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public));
__loop0__: 
	for (var i = 0; i < member.length; ++i) {
		var methodInfo = JSIL.Cast(member[i], System.Reflection.MethodInfo);
		if (methodInfo.GetParameters().length === argCount) {
			return methodInfo;
		}
	}
	return null;
};
$asm02.MS.Internal.TypeReflector.GetTypeFromFullTypeName = function (fullName) {
	return System.Type.GetType$1(fullName, true);
};
$asm02.MS.Internal.TypeReflector.IsPrivateOrProtected = function (method) {
	return (method.IsFamily || 
		method.IsFamilyAndAssembly || method.IsPrivate);
};
$asm02.MS.Internal.TypeReflector.IsNullableGeneric = function (type) {
	return (!(!$asm02.MS.Internal.Xaml.MS.Impl.KS.Eq(type.Name, "Nullable`1") || 
			(type.Assembly !== System.Nullable$b1.Assembly)) && (type.Namespace == System.Nullable$b1.Namespace));
};
$asm02.MS.Internal.TypeReflector.get_TypeOfObjectArray = function () {
	return JSIL.Array.New(System.Type, [System.Object]);
};
$asm02.MS.Internal.TypeReflector.get_TypeOfTwoObjectArray = function () {
	return JSIL.Array.New(System.Type, [System.Object, System.Object]);
};
JSIL.OverloadedMethod($asm02.MS.Internal.TypeReflector, "LookupIsPublic", [
		["LookupIsPublic$0", [System.Reflection.PropertyInfo]], 
		["LookupIsPublic$1", [System.Reflection.EventInfo]]
	]);
JSIL.OverloadedMethod($asm02.MS.Internal.TypeReflector, "LookupIsStatic", [
		["LookupIsStatic$0", [System.Reflection.PropertyInfo]], 
		["LookupIsStatic$1", [System.Reflection.EventInfo]]
	]);
JSIL.OverloadedMethod($asm02.MS.Internal.TypeReflector, "ResolveAmbiguousProperty", [
		["ResolveAmbiguousProperty$0", [System.Type, System.String]], 
		["ResolveAmbiguousProperty$1", [System.Type, System.String, System.Reflection.BindingFlags]]
	]);
JSIL.MakeProperty($asm02.MS.Internal.TypeReflector, "IEnumerableGetEnumeratorMethod", 
	$asm02.MS.Internal.TypeReflector.get_IEnumerableGetEnumeratorMethod, null);
JSIL.MakeProperty($asm02.MS.Internal.TypeReflector, "IListAddMethod", 
	$asm02.MS.Internal.TypeReflector.get_IListAddMethod, null);
JSIL.MakeProperty($asm02.MS.Internal.TypeReflector, "IDictionaryAddMethod", 
	$asm02.MS.Internal.TypeReflector.get_IDictionaryAddMethod, null);
JSIL.MakeProperty($asm02.MS.Internal.TypeReflector, "TypeOfObjectArray", 
	$asm02.MS.Internal.TypeReflector.get_TypeOfObjectArray, null);
JSIL.MakeProperty($asm02.MS.Internal.TypeReflector, "TypeOfTwoObjectArray", 
	$asm02.MS.Internal.TypeReflector.get_TypeOfTwoObjectArray, null);

$asm02.System.Windows.Data.WeakPropertyChangedListener.prototype._ctor = function (notify, sourcePropertyChanged) {
	System.Object.prototype._ctor.call(this);
	this._notifyPropertyChanged = notify;
	notify.INotifyPropertyChanged_add_PropertyChanged(JSIL.Delegate.New("System.ComponentModel.PropertyChangedEventHandler", this, $asm02.System.Windows.Data.WeakPropertyChangedListener.prototype.PropertyChangedCallback));
	this._weakclrPropertyListener = JSIL.New(System.WeakReference, "_ctor$1", [sourcePropertyChanged]);
};
$asm02.System.Windows.Data.WeakPropertyChangedListener.CreateIfNecessary = function (source, sourcePropertyChanged) {
	var notifyPropertyChanged = JSIL.TryCast(source, System.ComponentModel.INotifyPropertyChanged);
	if (notifyPropertyChanged !== null) {
		return new $asm02.System.Windows.Data.WeakPropertyChangedListener(notifyPropertyChanged, sourcePropertyChanged);
	}
	return null;
};
$asm02.System.Windows.Data.WeakPropertyChangedListener.prototype.get_Source = function () {
	return this._notifyPropertyChanged;
};
$asm02.System.Windows.Data.WeakPropertyChangedListener.prototype.PropertyChangedCallback = function (sender, args) {
	if (this._weakclrPropertyListener === null) {
		return;
	}
	var sourcePropertyChanged = JSIL.TryCast(this._weakclrPropertyListener.Target, $asm02.System.Windows.ISourcePropertyChanged);
	if (sourcePropertyChanged !== null) {
		sourcePropertyChanged.ISourcePropertyChanged_SourcePropertyChanged(sender, args);
		return;
	}
	this.Disconnect();
};
$asm02.System.Windows.Data.WeakPropertyChangedListener.prototype.Disconnect = function () {
	if (this._notifyPropertyChanged === null) {
		return;
	}
	this._notifyPropertyChanged.INotifyPropertyChanged_remove_PropertyChanged(JSIL.Delegate.New("System.ComponentModel.PropertyChangedEventHandler", this, $asm02.System.Windows.Data.WeakPropertyChangedListener.prototype.PropertyChangedCallback));
	this._notifyPropertyChanged = null;
	this._weakclrPropertyListener = null;
};
JSIL.MakeProperty($asm02.System.Windows.Data.WeakPropertyChangedListener.prototype, "Source", 
	$asm02.System.Windows.Data.WeakPropertyChangedListener.prototype.get_Source, null);
$asm02.System.Windows.Data.WeakPropertyChangedListener.prototype._weakclrPropertyListener = null;
$asm02.System.Windows.Data.WeakPropertyChangedListener.prototype._notifyPropertyChanged = null;

$asm02.System.Windows.WeakDataContextChangedListener.prototype._ctor = function (source, listener) {
	System.Object.prototype._ctor.call(this);
	this._mentor = source;
	this._mentor.add_DataContextChanged(JSIL.Delegate.New("System.Windows.DataContextChangedEventHandler", this, $asm02.System.Windows.WeakDataContextChangedListener.prototype.MentorDataContextChanged));
	this._weakListener = JSIL.New(System.WeakReference, "_ctor$1", [listener]);
};
$asm02.System.Windows.WeakDataContextChangedListener.CreateIfNecessary = function (source, listener) {
	if (JSIL.TryCast(source, System.Windows.FrameworkElement) !== null) {
		return new $asm02.System.Windows.WeakDataContextChangedListener(JSIL.TryCast(source, System.Windows.FrameworkElement), listener);
	}
	return null;
};
$asm02.System.Windows.WeakDataContextChangedListener.prototype.MentorDataContextChanged = function (sender, e) {
	if (this._weakListener === null) {
		return;
	}
	var dataContextChangedListener = JSIL.TryCast(this._weakListener.Target, $asm02.System.Windows.IDataContextChangedListener);
	if (dataContextChangedListener !== null) {
		dataContextChangedListener.IDataContextChangedListener_OnDataContextChanged(sender, e);
		return;
	}
	this.Disconnect();
};
$asm02.System.Windows.WeakDataContextChangedListener.prototype.Disconnect = function () {
	if (this._mentor === null) {
		return;
	}
	this._mentor.remove_DataContextChanged(JSIL.Delegate.New("System.Windows.DataContextChangedEventHandler", this, $asm02.System.Windows.WeakDataContextChangedListener.prototype.MentorDataContextChanged));
	this._mentor = null;
	this._weakListener = null;
};
$asm02.System.Windows.WeakDataContextChangedListener.prototype._weakListener = null;
$asm02.System.Windows.WeakDataContextChangedListener.prototype._mentor = null;

$asm02.System.Windows.Data.WeakDependencyPropertyChangedListener.prototype._ctor = function (source, isCoreProperty, dependencyPropertyListener) {
	System.Object.prototype._ctor.call(this);
	this._source = source;
	this._needToAttachCoreEvent = (isCoreProperty && 
		JSIL.CheckType(source, System.Windows.FrameworkElement));
	this._source.add_DPChanged(JSIL.Delegate.New("System.Windows.DPChangedEventHandler", this, $asm02.System.Windows.Data.WeakDependencyPropertyChangedListener.prototype.SourcePropertyChanged));
	if (this._needToAttachCoreEvent) {
		JSIL.Cast(this._source, System.Windows.FrameworkElement).add_CorePropertyChanged(JSIL.Delegate.New("MS.Internal.CorePropertyChangedEventHandler", this, $asm02.System.Windows.Data.WeakDependencyPropertyChangedListener.prototype.SourceCorePropertyChanged));
	}
	this._weakDependencyPropertyListener = JSIL.New(System.WeakReference, "_ctor$1", [dependencyPropertyListener]);
};
$asm02.System.Windows.Data.WeakDependencyPropertyChangedListener.CreateIfNecessary = function (source, isCoreProperty, dependencyPropertyListener) {
	return new $asm02.System.Windows.Data.WeakDependencyPropertyChangedListener(source, isCoreProperty, dependencyPropertyListener);
};
$asm02.System.Windows.Data.WeakDependencyPropertyChangedListener.prototype.SourcePropertyChanged = function (sender, dp) {
	if (this._weakDependencyPropertyListener === null) {
		return;
	}
	var dependencyPropertyListener = JSIL.TryCast(this._weakDependencyPropertyListener.Target, $asm02.System.Windows.DependencyPropertyListener);
	if (dependencyPropertyListener !== null) {
		dependencyPropertyListener.SourcePropertyChanged(sender, dp);
		return;
	}
	this.Disconnect();
};
$asm02.System.Windows.Data.WeakDependencyPropertyChangedListener.prototype.SourceCorePropertyChanged = function (sender, e) {
	var dependencyProperty = System.Windows.DependencyProperty.QueryRegisteredCoreProperty$0(e.Property);
	if (dependencyProperty === null) {
		dependencyProperty = System.Windows.DependencyProperty.RegisterCoreProperty(e.Property, System.Object);
	}
	this.SourcePropertyChanged(JSIL.TryCast(sender, System.Windows.DependencyObject), dependencyProperty);
};
$asm02.System.Windows.Data.WeakDependencyPropertyChangedListener.prototype.Disconnect = function () {
	if (this._source === null) {
		return;
	}
	this._source.remove_DPChanged(JSIL.Delegate.New("System.Windows.DPChangedEventHandler", this, $asm02.System.Windows.Data.WeakDependencyPropertyChangedListener.prototype.SourcePropertyChanged));
	if (this._needToAttachCoreEvent) {
		JSIL.Cast(this._source, System.Windows.FrameworkElement).remove_CorePropertyChanged(JSIL.Delegate.New("MS.Internal.CorePropertyChangedEventHandler", this, $asm02.System.Windows.Data.WeakDependencyPropertyChangedListener.prototype.SourceCorePropertyChanged));
	}
	this._source = null;
	this._weakDependencyPropertyListener = null;
};
$asm02.System.Windows.Data.WeakDependencyPropertyChangedListener.prototype._weakDependencyPropertyListener = null;
$asm02.System.Windows.Data.WeakDependencyPropertyChangedListener.prototype._source = null;
$asm02.System.Windows.Data.WeakDependencyPropertyChangedListener.prototype._needToAttachCoreEvent = false;

$asm02.System.Windows.Data.WeakErrorsChangedListener.prototype._ctor = function (notifyDataErrorInfo, notifyChild, errorsChangedListener) {
	System.Object.prototype._ctor.call(this);
	this._notifyDataErrorInfo = notifyDataErrorInfo;
	this._notifyChild = notifyChild;
	notifyDataErrorInfo.INotifyDataErrorInfo_add_ErrorsChanged(JSIL.Delegate.New("System.EventHandler`1[System.ComponentModel.DataErrorsChangedEventArgs]", this, $asm02.System.Windows.Data.WeakErrorsChangedListener.prototype.ErrorsChangedCallback));
	this._weakErrorsChangedListener = JSIL.New(System.WeakReference, "_ctor$1", [errorsChangedListener]);
};
$asm02.System.Windows.Data.WeakErrorsChangedListener.prototype.ErrorsChangedCallback = function (sender, args) {
	if (this._weakErrorsChangedListener === null) {
		return;
	}
	var errorsChangedListener = JSIL.TryCast(this._weakErrorsChangedListener.Target, $asm02.System.Windows.Data.IErrorsChangedListener);
	if (errorsChangedListener !== null) {
		errorsChangedListener.IErrorsChangedListener_OnErrorsChanged(sender, this._notifyChild, args);
		return;
	}
	this.Disconnect();
};
$asm02.System.Windows.Data.WeakErrorsChangedListener.prototype.Disconnect = function () {
	if (this._notifyDataErrorInfo === null) {
		return;
	}
	this._notifyDataErrorInfo.INotifyDataErrorInfo_remove_ErrorsChanged(JSIL.Delegate.New("System.EventHandler`1[System.ComponentModel.DataErrorsChangedEventArgs]", this, $asm02.System.Windows.Data.WeakErrorsChangedListener.prototype.ErrorsChangedCallback));
	this._notifyDataErrorInfo = null;
	this._weakErrorsChangedListener = null;
};
$asm02.System.Windows.Data.WeakErrorsChangedListener.prototype._weakErrorsChangedListener = null;
$asm02.System.Windows.Data.WeakErrorsChangedListener.prototype._notifyDataErrorInfo = null;
$asm02.System.Windows.Data.WeakErrorsChangedListener.prototype._notifyChild = false;

System.Windows.Application.prototype._ctor$0 = function () {
	this._ctor$1(166);
};
System.Windows.Application.prototype._ctor$1 = function (nativeTypeIndex) {
	System.Object.prototype._ctor.call(this);
	System.Windows.Application._current = this;
	var intPtr = System.IntPtr.Zero;
	intPtr = (0);
	this.m_nativePtr = new $asm02.MS.Internal.NativeObjectSafeHandle();
	this.m_nativePtr.NativeObject = intPtr;
	;
	this._coreTypeEventHelper = new $asm02.MS.Internal.CoreTypeEventHelper();
	var type = (JSIL.GetType(this));
	var isCustomType = 0;
	if (!$asm02.MS.Internal.TypeProxy.IsCoreType(type)) {
		isCustomType = 1;
	}
	;
	this._hasElevatedPermissions = (false);
	var arg_6E_0 = ({});
	this.add_Starting(JSIL.Delegate.New("System.Windows.StartupEventHandler", this, System.Windows.Application.prototype.Application_Starting));
	this.add_Started(JSIL.Delegate.New("System.EventHandler", this, System.Windows.Application.prototype.Application_Started));
	this.add_Exiting(JSIL.Delegate.New("System.EventHandler", this, System.Windows.Application.prototype.Application_Exiting));
	this.add_Exited(JSIL.Delegate.New("System.EventHandler", this, System.Windows.Application.prototype.Application_Exited));
};
System.Windows.Application.prototype.IManagedPeer_BeginShutdown = function () {
	System.GC.SuppressFinalize(this.m_nativePtr);
	$asm02.MS.Internal.XcpImports.DisconnectManagedPeer(this);
};
System.Windows.Application.prototype.IManagedPeer_EndShutdown = function () {
	$asm02.MS.Internal.XcpImports.ReleaseNativeObject$0(this);
	this.m_nativePtr = null;
};
System.Windows.Application.prototype.IManagedPeer_RemovePeerReferenceToItem = function (child) {
	this._treeChildren.Remove(child);
};
System.Windows.Application.prototype.IManagedPeer_AddPeerReferenceToItem = function (child) {
	if (this._treeChildren === null) {
		this._treeChildren = JSIL.New(System.Collections.Generic.Dictionary$b2.Of($asm02.MS.Internal.IManagedPeerBase, System.Object), "_ctor$1", [1]);
	}
	this._treeChildren.set_Item(child, null);
};
System.Windows.Application.prototype.IManagedPeerBase_get_NativeObject = function () {
	if (this.m_nativePtr === null) {
		return System.IntPtr.Zero;
	}
	return this.m_nativePtr.NativeObject;
};
System.Windows.Application.prototype.IManagedPeer_GetInstanceEventDelegate = function (eventName) {
	return this._coreTypeEventHelper.GetInstanceEventDelegate(eventName);
};
System.Windows.Application.prototype.Install = function () {
	if (!System.Windows.Application.Current.Host.Source.Scheme.Equals$2("http", System.StringComparison.OrdinalIgnoreCase) && 
		!System.Windows.Application.Current.Host.Source.Scheme.Equals$2("https", System.StringComparison.OrdinalIgnoreCase) && !System.Windows.Application.Current.Host.Source.Scheme.Equals$2("file", System.StringComparison.OrdinalIgnoreCase)) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("Application_CannotBeInstalled")]);
	}
	if (System.Windows.InstallState.Installed === this.InstallState) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("Application_AlreadyInstalled")]);
	}
	return $asm02.MS.Internal.XcpImports.Application_Install(this, false);
};
System.Windows.Application.prototype.CheckAndDownloadUpdateAsync = function () {
	$asm02.MS.Internal.XcpImports.Application_CheckAndDownloadUpdate(this);
};
System.Windows.Application.prototype.add_Startup = function (value) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	this.AddEventListener(System.Windows.DependencyProperty.RegisterCoreProperty(24500, null), value);
};
System.Windows.Application.prototype.remove_Startup = function (value) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	this.RemoveEventListener(System.Windows.DependencyProperty.RegisterCoreProperty(24500, null), value);
};
System.Windows.Application.prototype.add_Exit = function (value) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	this.AddEventListener(System.Windows.DependencyProperty.RegisterCoreProperty(24501, null), value);
};
System.Windows.Application.prototype.remove_Exit = function (value) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	this.RemoveEventListener(System.Windows.DependencyProperty.RegisterCoreProperty(24501, null), value);
};
System.Windows.Application.prototype.add_UnhandledException = function (value) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	this._appUnhandledException = System.Delegate.Combine(this._appUnhandledException, value);
};
System.Windows.Application.prototype.remove_UnhandledException = function (value) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	if (this._appUnhandledException !== null) {
		this._appUnhandledException = System.Delegate.Remove(this._appUnhandledException, value);
	}
};
System.Windows.Application.prototype.add_InstallStateChanged = function (value) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	this.AddEventListener(System.Windows.DependencyProperty.RegisterCoreProperty(24512, null), value);
};
System.Windows.Application.prototype.remove_InstallStateChanged = function (value) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	this.RemoveEventListener(System.Windows.DependencyProperty.RegisterCoreProperty(24512, null), value);
};
System.Windows.Application.prototype.add_CheckAndDownloadUpdateCompleted = function (value) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	this.AddEventListener(System.Windows.DependencyProperty.RegisterCoreProperty(24513, null), value);
};
System.Windows.Application.prototype.remove_CheckAndDownloadUpdateCompleted = function (value) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	this.RemoveEventListener(System.Windows.DependencyProperty.RegisterCoreProperty(24513, null), value);
};
System.Windows.Application.prototype.add_Starting = function (value) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	this.AddEventListener(System.Windows.DependencyProperty.RegisterCoreProperty(24508, null), value);
};
System.Windows.Application.prototype.remove_Starting = function (value) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	this.RemoveEventListener(System.Windows.DependencyProperty.RegisterCoreProperty(24508, null), value);
};
System.Windows.Application.prototype.add_Started = function (value) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	this.AddEventListener(System.Windows.DependencyProperty.RegisterCoreProperty(24509, null), value);
};
System.Windows.Application.prototype.remove_Started = function (value) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	this.RemoveEventListener(System.Windows.DependencyProperty.RegisterCoreProperty(24509, null), value);
};
System.Windows.Application.prototype.add_Exiting = function (value) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	this.AddEventListener(System.Windows.DependencyProperty.RegisterCoreProperty(24510, null), value);
};
System.Windows.Application.prototype.remove_Exiting = function (value) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	this.RemoveEventListener(System.Windows.DependencyProperty.RegisterCoreProperty(24510, null), value);
};
System.Windows.Application.prototype.add_Exited = function (value) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	this.AddEventListener(System.Windows.DependencyProperty.RegisterCoreProperty(24511, null), value);
};
System.Windows.Application.prototype.remove_Exited = function (value) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	this.RemoveEventListener(System.Windows.DependencyProperty.RegisterCoreProperty(24511, null), value);
};
System.Windows.Application.prototype.Application_Exiting = function (sender, e) {
	this.Host.OnApplicationExiting();
	var current = System.Windows.NotificationWindow.Current;
	if (current !== null) {
		current.Close();
	}
	var enumerator = this.ApplicationLifetimeObjects.IEnumerable_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var applicationService = JSIL.Cast(enumerator.IEnumerator_Current, System.Windows.IApplicationService);
			if (JSIL.TryCast(applicationService, System.Windows.IApplicationLifetimeAware) !== null) {
				var applicationLifetimeAware = JSIL.Cast(applicationService, System.Windows.IApplicationLifetimeAware);
				try {
					applicationLifetimeAware.IApplicationLifetimeAware_Exiting();
				} catch ($exception) {
					var exception = $exception;
					if ($asm02.MS.Internal.Error.IsCriticalException(exception)) {
						throw $exception;
					}
					var e2 = new System.Windows.ApplicationUnhandledExceptionEventArgs(exception, false);
					this._appUnhandledException(this, e2);
				}
			}
		}
	} finally {
		var disposable = JSIL.TryCast(enumerator, System.IDisposable);
		if (disposable !== null) {
			disposable.IDisposable_Dispose();
		}
	}
};
System.Windows.Application.prototype.Application_Exited = function (sender, e) {
	var enumerator = this.ApplicationLifetimeObjects.IEnumerable_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var applicationService = JSIL.Cast(enumerator.IEnumerator_Current, System.Windows.IApplicationService);
			if (JSIL.TryCast(applicationService, System.Windows.IApplicationLifetimeAware) !== null) {
				var applicationLifetimeAware = JSIL.Cast(applicationService, System.Windows.IApplicationLifetimeAware);
				try {
					applicationLifetimeAware.IApplicationLifetimeAware_Exited();
				} catch ($exception) {
					var exception = $exception;
					if ($asm02.MS.Internal.Error.IsCriticalException(exception)) {
						throw $exception;
					}
					var e2 = new System.Windows.ApplicationUnhandledExceptionEventArgs(exception, false);
					this._appUnhandledException(this, e2);
				}
			}
		}
	} finally {
		var disposable = JSIL.TryCast(enumerator, System.IDisposable);
		if (disposable !== null) {
			disposable.IDisposable_Dispose();
		}
	}
__loop1__: 
	for (var i = (this.ApplicationLifetimeObjects.ICollection_Count - 1); i >= 0; --i) {
		try {
			var applicationService2 = JSIL.TryCast(this.ApplicationLifetimeObjects.IList_get_Item(i), System.Windows.IApplicationService);
			if (applicationService2 !== null) {
				applicationService2.IApplicationService_StopService();
			}
		} catch ($exception) {
			var arg_A7_0 = $exception;
			var e3 = new System.Windows.ApplicationUnhandledExceptionEventArgs(arg_A7_0, false);
			this._appUnhandledException(this, e3);
		}
	}
};
System.Windows.Application.prototype.get_Resources = function () {
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.Application.ResourcesProperty), System.Windows.ResourceDictionary);
};
System.Windows.Application.prototype.set_Resources = function (value) {
	$asm02.MS.Internal.XcpImports.SetValue(this, System.Windows.Application.ResourcesProperty, value);
};
System.Windows.Application.prototype.set_RootVisual = function (value) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	if (!((value !== null) && $asm02.MS.Internal.XcpImports.DependencyObject_IsPointerValid(value))) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("Application_InvalidRootVisual")]);
	}
	$asm02.MS.Internal.XcpImports.Application_SetVisualRoot(value);
	this._rootVisual = value;
};
System.Windows.Application.prototype.get_RootVisual = function () {
	return JSIL.TryCast($asm02.MS.Internal.XcpImports.Application_GetVisualRoot(), System.Windows.UIElement);
};
System.Windows.Application.prototype.get_MainWindow = function () {
	$asm02.MS.Internal.XcpImports.CheckThread();
	if (!System.Windows.Application.Current.IsRunningOutOfBrowser) {
		throw JSIL.New(System.NotSupportedException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("Window_NotSupportedForInBrowser")]);
	}
	return $asm02.MS.Internal.XcpImports.Application_GetWindow();
};
System.Windows.Application.prototype.get_ApplicationLifetimeObjects = function () {
	$asm02.MS.Internal.XcpImports.CheckThread();
	return this.PrivateServiceCollection;
};
System.Windows.Application.prototype.get_Host = function () {
	$asm02.MS.Internal.XcpImports.CheckThread();
	if (this._host === null) {
		this._host = new System.Windows.Interop.SilverlightHost();
	}
	return this._host;
};
System.Windows.Application.prototype.get_InstallState = function () {
	$asm02.MS.Internal.XcpImports.CheckThread();
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.Application.InstallStateProperty), System.Windows.InstallState);
};
System.Windows.Application.prototype.get_IsRunningOutOfBrowser = function () {
	$asm02.MS.Internal.XcpImports.CheckThread();
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.Application.IsRunningOutOfBrowserProperty), System.Boolean);
};
System.Windows.Application.prototype.get_HasElevatedPermissions = function () {
	return this._hasElevatedPermissions;
};
System.Windows.Application.prototype.set_HasElevatedPermissions = function (value) {
	$asm02.MS.Internal.XcpImports.Application_SetHasElevatedPermissions(value);
	this._hasElevatedPermissions = value;
};
System.Windows.Application.prototype.get_ApplicationStarted = function () {
	$asm02.MS.Internal.XcpImports.CheckThread();
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.Application.ApplicationStartedProperty), System.Boolean);
};
System.Windows.Application.prototype.get_PrivateServiceCollection = function () {
	if (this._collection === null) {
		this._collection = new $asm02.MS.Internal.ApplicationLifetimeObjectsCollection();
	}
	return this._collection;
};
System.Windows.Application.prototype.get_AllowNavigation = function () {
	if (!this._allowNavigation.HasValue) {
		this._allowNavigation = new (System.Nullable$b1.Of(System.Boolean)) ($asm02.MS.Internal.XcpImports.Application_GetAllowNavigation());
	}
	return this._allowNavigation.Value;
};
System.Windows.Application.GetResourceStream$0 = function (zipPackageStreamResourceInfo, uriResource) {
	var current = System.Windows.Application.Current;
	if (current === null) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("Application_ApplicationNotInitialized")]);
	}
	return current.GetResourceStreamInternal$0(zipPackageStreamResourceInfo, uriResource);
};
System.Windows.Application.prototype.GetResourceStreamInternal$0 = function (zipPackageStreamResourceInfo, resourceUri) {
	var result = null;
	if (zipPackageStreamResourceInfo === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["zipPackageStreamResourceInfo"]);
	}
	if (System.Uri.op_Equality(resourceUri, null)) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["resourceUri"]);
	}
	if (resourceUri.IsAbsoluteUri) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("Application_ExpectedRelativeUri")]);
	}
	var internalMemoryStream = JSIL.TryCast(zipPackageStreamResourceInfo.Stream, $asm02.MS.Internal.InternalMemoryStream);
	if (internalMemoryStream !== null) {
		var stream = $asm02.MS.Internal.XcpImports.Application_GetResourceStream$0(this, internalMemoryStream, resourceUri);
		if (stream !== null) {
			result = new System.Windows.Resources.StreamResourceInfo(stream, null);
		}
	} else {
		var stream2 = zipPackageStreamResourceInfo.Stream;
		if (stream2 !== null) {
			var position = stream2.Position;
			var i = stream2.Length;
			var num = 0;
			var array = JSIL.Array.New(System.Byte, i);
		__loop0__: 
			while (i > 0) {
				var num2 = stream2.Read(array, num, i);
				if (num2 === 0) {
					break __loop0__;
				}
				num += num2;
				i -= num2;
			}
			if (stream2.CanSeek) {
				stream2.Seek(position, System.IO.SeekOrigin.Begin);
			}
			stream = $asm02.MS.Internal.XcpImports.Application_GetResourceStream$1(this, num, array, resourceUri);
			if (stream !== null) {
				result = new System.Windows.Resources.StreamResourceInfo(stream, null);
			}
		}
	}
	return result;
};
System.Windows.Application.GetResourceStream$1 = function (uriResource) {
	var current = System.Windows.Application.Current;
	if (current === null) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("Application_ApplicationNotInitialized")]);
	}
	return current.GetResourceStreamInternal$1(uriResource);
};
System.Windows.Application.prototype.GetResourceStreamInternal$1 = function (resourceUri) {
	var stream = null;
	var result = null;
	if (System.Uri.op_Equality(resourceUri, null)) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["resourceUri"]);
	}
	if (resourceUri.IsAbsoluteUri) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("Application_ExpectedRelativeUri")]);
	}
	if (System.Windows.Application.IsComponentUri(resourceUri)) {
		stream = JSIL.TryCast($asm02.System.Windows.ResourceManagerWrapper.GetResourceForUri$0(resourceUri), System.IO.Stream);
	} else {
		stream = $asm02.MS.Internal.XcpImports.Application_GetResourceFromApplication(this, resourceUri);
	}
	if (stream !== null) {
		result = new System.Windows.Resources.StreamResourceInfo(stream, null);
	}
	return result;
};
System.Windows.Application.IsComponentUri = function (xamlUri) {
	var text = xamlUri.toString();
	var result = false;
	var text2 = System.String.Empty;
	var num = 0;
	if ((text[0]) === "/") {
		num = 1;
	}
	var num2 = text.IndexOf$1("/", num);
	if (num2 > 0) {
		text2 = text.Substring$1(num, (num2 - num));
		if (text2.EndsWith$1(";component", System.StringComparison.OrdinalIgnoreCase)) {
			result = true;
		}
	}
	return result;
};
System.Windows.Application.get_Current = function () {
	var intPtr = new JSIL.Variable(0);
	if (System.Windows.Application._current !== null) {
		return System.Windows.Application._current;
	}
	$asm02.MS.Internal.XcpImports.Application_GetCurrent(/* ref */ intPtr);
	if (System.IntPtr.op_Inequality(intPtr.value, System.IntPtr.Zero)) {
		var result = JSIL.Cast($asm02.MS.Internal.ManagedPeerTable.EnsureManagedPeer$0(intPtr.value, 0, System.Windows.Application), System.Windows.Application);
		$asm02.MS.Internal.XcpImports.ReleaseNativeObject$1(/* ref */ intPtr);
		return result;
	}
	return null;
};
System.Windows.Application.ParseInitParams = function () {
	var dictionary = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.String, System.String), "_ctor$0", []);
	var text = $asm02.MS.Internal.XcpImports.Application_GetInitParams();
	if (!System.String.IsNullOrEmpty(text)) {
		var array = text.Split(JSIL.Array.New(System.Char, [","]));
		var array2 = array;
	__loop0__: 
		for (var i = 0; i < array2.length; ++i) {
			var text2 = array2[i];
			var num = text2.IndexOf$0("=");
			if (num === -1) {
				var text3 = text2.Trim$1();
				var value = System.String.Empty;
			} else {
				text3 = (text2.Substring$1(0, num)).Trim$1();
				value = (num < (text2.length - 1)) ? (text2.Substring$0((num + 1))).Trim$1() : System.String.Empty;
			}
			if (text3.length !== 0) {
				dictionary.set_Item(text3, value);
			}
		}
	}
	return dictionary;
};
System.Windows.Application.prototype.AddEventListener = function (property, handler) {
	if ((true) === null) {
		;
	}
	this._coreTypeEventHelper.AddEventListener(this, property, handler);
};
System.Windows.Application.prototype.RemoveEventListener = function (property, handler) {
	this._coreTypeEventHelper.RemoveEventListener(this, property, handler);
};
JSIL.OverloadedMethod(System.Windows.Application.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);
JSIL.OverloadedMethod(System.Windows.Application, "GetResourceStream", [
		["GetResourceStream$0", [System.Windows.Resources.StreamResourceInfo, System.Uri]], 
		["GetResourceStream$1", [System.Uri]]
	]);
JSIL.OverloadedMethod(System.Windows.Application.prototype, "GetResourceStreamInternal", [
		["GetResourceStreamInternal$0", [System.Windows.Resources.StreamResourceInfo, System.Uri]], 
		["GetResourceStreamInternal$1", [System.Uri]]
	]);
JSIL.MakeProperty(System.Windows.Application.prototype, "IManagedPeerBase_NativeObject", 
	System.Windows.Application.prototype.IManagedPeerBase_get_NativeObject, null);
JSIL.MakeProperty(System.Windows.Application.prototype, "Resources", 
	System.Windows.Application.prototype.get_Resources, System.Windows.Application.prototype.set_Resources);
JSIL.MakeProperty(System.Windows.Application.prototype, "RootVisual", 
	System.Windows.Application.prototype.get_RootVisual, System.Windows.Application.prototype.set_RootVisual);
JSIL.MakeProperty(System.Windows.Application.prototype, "MainWindow", 
	System.Windows.Application.prototype.get_MainWindow, null);
JSIL.MakeProperty(System.Windows.Application.prototype, "ApplicationLifetimeObjects", 
	System.Windows.Application.prototype.get_ApplicationLifetimeObjects, null);
JSIL.MakeProperty(System.Windows.Application.prototype, "Host", 
	System.Windows.Application.prototype.get_Host, null);
JSIL.MakeProperty(System.Windows.Application.prototype, "InstallState", 
	System.Windows.Application.prototype.get_InstallState, null);
JSIL.MakeProperty(System.Windows.Application.prototype, "IsRunningOutOfBrowser", 
	System.Windows.Application.prototype.get_IsRunningOutOfBrowser, null);
JSIL.MakeProperty(System.Windows.Application.prototype, "HasElevatedPermissions", 
	System.Windows.Application.prototype.get_HasElevatedPermissions, System.Windows.Application.prototype.set_HasElevatedPermissions);
JSIL.MakeProperty(System.Windows.Application.prototype, "ApplicationStarted", 
	System.Windows.Application.prototype.get_ApplicationStarted, null);
JSIL.MakeProperty(System.Windows.Application.prototype, "PrivateServiceCollection", 
	System.Windows.Application.prototype.get_PrivateServiceCollection, null);
JSIL.MakeProperty(System.Windows.Application.prototype, "AllowNavigation", 
	System.Windows.Application.prototype.get_AllowNavigation, null);
JSIL.MakeProperty(System.Windows.Application, "Current", 
	System.Windows.Application.get_Current, null);
Object.defineProperty(System.Windows.Application, "COMPONENT", {
		"value": ";component"}
);
Object.defineProperty(System.Windows.Application, "native_INDEX_APPLICATION", {
		"value": 166}
);
Object.defineProperty(System.Windows.Application, "native_PROPERTYINDEX_APPLICATION_STARTUP", {
		"value": 24500}
);
Object.defineProperty(System.Windows.Application, "native_PROPERTYINDEX_APPLICATION_EXIT", {
		"value": 24501}
);
Object.defineProperty(System.Windows.Application, "native_PROPERTYINDEX_APPLICATION_RESOURCES", {
		"value": 19101}
);
Object.defineProperty(System.Windows.Application, "native_PROPERTYINDEX_APPLICATION_INSTALLSTATE", {
		"value": 19103}
);
Object.defineProperty(System.Windows.Application, "native_PROPERTYINDEX_APPLICATION_APPLICATIONSTARTED", {
		"value": 19104}
);
Object.defineProperty(System.Windows.Application, "native_PROPERTYINDEX_APPLICATION_STARTING", {
		"value": 24508}
);
Object.defineProperty(System.Windows.Application, "native_PROPERTYINDEX_APPLICATION_STARTED", {
		"value": 24509}
);
Object.defineProperty(System.Windows.Application, "native_PROPERTYINDEX_APPLICATION_EXITING", {
		"value": 24510}
);
Object.defineProperty(System.Windows.Application, "native_PROPERTYINDEX_APPLICATION_EXITED", {
		"value": 24511}
);
Object.defineProperty(System.Windows.Application, "native_PROPERTYINDEX_APPLICATION_INSTALLSTATECHANGED", {
		"value": 24512}
);
Object.defineProperty(System.Windows.Application, "native_PROPERTYINDEX_APPLICATION_ISRUNNINGOUTOFBROWSER", {
		"value": 22101}
);
Object.defineProperty(System.Windows.Application, "native_PROPERTYINDEX_APPLICATION_UPDATE_COMPLETED", {
		"value": 24513}
);
System.Windows.Application.ApplicationStartedProperty = null;
System.Windows.Application.ResourcesProperty = null;
System.Windows.Application.InstallStateProperty = null;
System.Windows.Application.IsRunningOutOfBrowserProperty = null;
System.Windows.Application.prototype._host = null;
System.Windows.Application.prototype._appUnhandledException = null;
System.Windows.Application.prototype.m_nativePtr = null;
System.Windows.Application.prototype._coreTypeEventHelper = null;
System.Windows.Application._current = null;
System.Windows.Application.prototype._rootVisual = null;
System.Windows.Application.prototype._hasElevatedPermissions = false;
System.Windows.Application.prototype._treeChildren = null;
System.Windows.Application.prototype._collection = null;
System.Windows.Application._cctor = function () {
	System.Windows.Application.ApplicationStartedProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19104, System.Boolean);
	System.Windows.Application.ResourcesProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19101, System.Windows.ResourceDictionary);
	System.Windows.Application.InstallStateProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19103, System.Windows.InstallState);
	System.Windows.Application.IsRunningOutOfBrowserProperty = System.Windows.DependencyProperty.RegisterCoreProperty(22101, System.Boolean);
	System.Windows.Application._current = null;
};

System.Windows.ApplicationUnhandledExceptionEventArgs.prototype.get_ExceptionObject = function () {
	return this._exception;
};
System.Windows.ApplicationUnhandledExceptionEventArgs.prototype.set_ExceptionObject = function (value) {
	this._exception = value;
};
System.Windows.ApplicationUnhandledExceptionEventArgs.prototype.get_Handled = function () {
	return this._handled;
};
System.Windows.ApplicationUnhandledExceptionEventArgs.prototype.set_Handled = function (value) {
	this._handled = value;
};
System.Windows.ApplicationUnhandledExceptionEventArgs.prototype._ctor = function (ex, handled) {
	System.EventArgs.prototype._ctor.call(this);
	this._exception = ex;
	this._handled = handled;
};
JSIL.MakeProperty(System.Windows.ApplicationUnhandledExceptionEventArgs.prototype, "ExceptionObject", 
	System.Windows.ApplicationUnhandledExceptionEventArgs.prototype.get_ExceptionObject, System.Windows.ApplicationUnhandledExceptionEventArgs.prototype.set_ExceptionObject);
JSIL.MakeProperty(System.Windows.ApplicationUnhandledExceptionEventArgs.prototype, "Handled", 
	System.Windows.ApplicationUnhandledExceptionEventArgs.prototype.get_Handled, System.Windows.ApplicationUnhandledExceptionEventArgs.prototype.set_Handled);
System.Windows.ApplicationUnhandledExceptionEventArgs.prototype._exception = null;
System.Windows.ApplicationUnhandledExceptionEventArgs.prototype._handled = false;

$asm02.MS.Internal.JoltHelperEx.prototype.SetContextEx = function (context) {
	$asm02.MS.Internal.JoltHelper.SetContext(context);
	$asm02.MS.Internal.JoltHelper.m_customCLR = true;
};
$asm02.MS.Internal.JoltHelperEx.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};

$asm02.MS.Internal.JoltHelper.ResolveAssembly = function (sender, args) {
	var result = new JSIL.Variable(null);
	if (System.String.Equals$0(args.Name, System.Reflection.Assembly.GetExecutingAssembly().toString())) {
		return System.Reflection.Assembly.GetExecutingAssembly();
	}
	if (System.String.Equals$0(args.Name, "System, Version=2.1.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089")) {
		return System.Reflection.Assembly.Load$0("System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089");
	}
	$asm02.MS.Internal.JoltHelper._AssemblyByFullName.TryGetValue(args.Name, /* ref */ result);
	return result.value;
};
$asm02.MS.Internal.JoltHelper.OnUnhandledException = function (sender, args) {
	var exception = JSIL.Cast(args.ExceptionObject, System.Exception);
	if (!$asm02.MS.Internal.Error.CallApplicationUEHandler(exception)) {
		$asm02.MS.Internal.Error.ProcessException(exception, true);
	}
};
$asm02.MS.Internal.JoltHelper.EnsureSynchronizationContext = function () {
	var result = false;
	if (System.Threading.SynchronizationContext.Current === null) {
		if ($asm02.MS.Internal.JoltHelper.HostSynchronizationContext === null) {
			$asm02.MS.Internal.JoltHelper.HostSynchronizationContext = JSIL.New(System.Windows.Threading.DispatcherSynchronizationContext, "_ctor$0", []);
		}
		System.Threading.SynchronizationContext.SetSynchronizationContext$0($asm02.MS.Internal.JoltHelper.HostSynchronizationContext);
		result = true;
	}
	return result;
};
$asm02.MS.Internal.JoltHelper.RestoreSynchronizationContext = function () {
	System.Threading.SynchronizationContext.SetSynchronizationContext$0(null);
};
$asm02.MS.Internal.JoltHelper.FireEvent = function (unmanagedObj, unmanagedObjArgs, argsTypeIndex, actualArgsTypeIndex, eventName) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				var flag = false;
				try {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								try {
									var __label2__ = "__entry2__";
								__step2__: 
									while (true) {
										switch (__label2__) {
											case "__entry2__":
												flag = $asm02.MS.Internal.JoltHelper.EnsureSynchronizationContext();
												var eventArgs = $asm02.MS.Internal.JoltHelper.GetEventArgs(actualArgsTypeIndex, unmanagedObjArgs);
												var managedPeer = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.EnsureManagedPeer$0(unmanagedObj, 0, null), $asm02.MS.Internal.IManagedPeer);
												$asm02.MS.Internal.ManagedPeerTable.PeggedManagedPeersWithRefs.Remove(managedPeer);
												try {
													if (eventName == "M@Resize") {
														var current = System.Windows.Application.Current;
														if (current !== null) {
															current.Host.FireResized(managedPeer, eventArgs);
														}
														var result = 0;
														return result;
													}
													if (eventName == "M@FullScreenChange") {
														var current2 = System.Windows.Application.Current;
														if (current2 !== null) {
															current2.Host.FireFullScreenChanged(managedPeer, eventArgs);
														}
														result = 0;
														return result;
													}
													if (eventName == "M@Zoom") {
														var current3 = System.Windows.Application.Current;
														if (current3 !== null) {
															current3.Host.FireZoomed(managedPeer, eventArgs);
														}
														result = 0;
														return result;
													}
												} catch ($exception) {
													var arg_B6_0 = $exception;
													result = $asm02.MS.Internal.Error.GetXresultForUserException(arg_B6_0);
													return result;
												}
												if (managedPeer !== null) {
													if (eventName.StartsWith$0("M@@")) {
														var control = JSIL.TryCast(managedPeer, System.Windows.Controls.Control);
														if (control === null) {
															__label2__ = "IL_187";
															continue __step2__;
														}
														var s = eventName.Substring$0("M@@".length);
														var b = System.Byte.Parse(s);
														try {
															System.Windows.Controls.Control.OnEvent[b](control, eventArgs);
															if (System.ComponentModel.DesignerProperties.InternalIsInDesignMode) {
																$asm02.MS.Internal.XcpImports.LayoutManager_ClearErrorOccurredDuringLayout();
															}
															__label2__ = "IL_187";
															continue __step2__;
														} catch ($exception) {
															var arg_123_0 = $exception;
															result = $asm02.MS.Internal.Error.GetXresultForUserException(arg_123_0);
															return result;
														}
													}
													var instanceEventDelegate = managedPeer.IManagedPeer_GetInstanceEventDelegate(eventName);
													if (instanceEventDelegate !== null) {
														try {
															if (!(!$asm02.MS.Internal.JoltHelper.EventSenderOverrides.ContainsKey(managedPeer.toString()) || (JSIL.Cast(eventArgs, System.Windows.VisualStateChangedEventArgs).Control === null))) {
																managedPeer = JSIL.Cast(eventArgs, System.Windows.VisualStateChangedEventArgs).Control.ImplementationRoot;
															}
															$asm02.MS.Internal.CoreInvokeHandler.InvokeEventHandler(argsTypeIndex, instanceEventDelegate, managedPeer, eventArgs);
														} catch ($exception) {
															var arg_17A_0 = $exception;
															result = $asm02.MS.Internal.Error.GetXresultForUserException(arg_17A_0);
															return result;
														}
													}
												}
												__label2__ = "IL_187";
												continue __step2__;
												break;
											case "IL_187":
												break __step2__;
										}
									}
								} catch ($exception) {
									var arg_189_0 = $exception;
									result = $asm02.MS.Internal.Error.GetXresultForException(arg_189_0);
									return result;
								}
								break __step1__;
						}
					}
				} finally {
					if (flag) {
						$asm02.MS.Internal.JoltHelper.RestoreSynchronizationContext();
					}
				}
				return 0;
				break __step0__;
		}
	}
};
$asm02.MS.Internal.JoltHelper.RaiseEvent = function (target, eventId, coreEventArgs, eventArgsTypeIndex) {
	var obj = null;
	try {
		var $l$gc__DisplayClass = new $asm02.MS.Internal.JoltHelper.$l$gc__DisplayClass2();
		$l$gc__DisplayClass.eventArgs = $asm02.MS.Internal.JoltHelper.GetEventArgs(eventArgsTypeIndex, coreEventArgs);
		if (eventId === 6) {
			if ((true) !== null) {
				var $l$gc__DisplayClass2 = new $asm02.MS.Internal.JoltHelper.$l$gc__DisplayClass4();
				$l$gc__DisplayClass2.$locals3 = $l$gc__DisplayClass;
				$l$gc__DisplayClass2.DO = JSIL.Cast(obj, System.Windows.DependencyObject);
				$l$gc__DisplayClass2.DO.Dispatcher.BeginInvoke$0(function () {
						$l$gc__DisplayClass2.DO.OnInheritanceContextChanged($l$gc__DisplayClass2.DO, $l$gc__DisplayClass2.$locals3.eventArgs);
					});
			}
		} else {
			var managedPeer = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.EnsureManagedPeer$0(target, 0, null), $asm02.MS.Internal.IManagedPeer);
			try {
				switch (eventId) {
					case 1: 
						JSIL.Cast(managedPeer, System.Windows.FrameworkElement).OnSizeChanged(managedPeer, JSIL.Cast($l$gc__DisplayClass.eventArgs, System.Windows.SizeChangedEventArgs));
						break;
					case 2: 
						System.Windows.FrameworkElement.OnLayoutUpdated(null, $l$gc__DisplayClass.eventArgs);
						break;
					case 3: 
						System.Windows.Media.CompositionTarget.OnRendering(System.Windows.Threading.Dispatcher.MainDispatcher, JSIL.Cast($l$gc__DisplayClass.eventArgs, System.Windows.Media.RenderingEventArgs));
						break;
					case 4: 
						$asm02.System.Net.NetworkInformation.InternalNetworkChange.FireNetworkAddressChangedEvent(null, $l$gc__DisplayClass.eventArgs);
						break;
					case 5: 
						System.Windows.Input.Touch.OnTouch(null, JSIL.Cast($l$gc__DisplayClass.eventArgs, System.Windows.Input.TouchFrameEventArgs));
						break;
				}
			} catch ($exception) {
				var arg_F6_0 = $exception;
				var result = $asm02.MS.Internal.Error.GetXresultForUserException(arg_F6_0);
				return result;
			}
		}
	} catch ($exception) {
		var arg_103_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForException(arg_103_0);
		return result;
	}
	return 0;
};
$asm02.MS.Internal.JoltHelper.GetEventArgs = function (eventArgsTypeIndex, $coreEventArgs) {
	var coreEventArgs = new JSIL.Variable($coreEventArgs);
	var eventArgs = null;
	if (System.IntPtr.op_Inequality(coreEventArgs.value, System.IntPtr.Zero)) {
		eventArgs = $asm02.MS.Internal.CoreEventArgs.CreateEventArgs(eventArgsTypeIndex, coreEventArgs.value);
		if (eventArgs === null) {
			$asm02.MS.Internal.XcpImports.ReleaseNativeObject$1(/* ref */ coreEventArgs);
		}
	}
	if (eventArgs === null) {
		eventArgs = $asm02.MS.Internal.JoltHelper._eventArgs;
	}
	return eventArgs;
};
$asm02.MS.Internal.JoltHelper.GetLoadedAssemblyByName = function (assemblyShortName) {
	return $asm02.MS.Internal.JoltHelper._AssemblyByAssemblyName.get_Item(assemblyShortName);
};
$asm02.MS.Internal.JoltHelper.TryGetLoadedAssemblyByName = function (assemblyShortName, /* ref */ assembly) {
	return $asm02.MS.Internal.JoltHelper._AssemblyByAssemblyName.TryGetValue(assemblyShortName, /* ref */ assembly);
};
$asm02.MS.Internal.JoltHelper.GetLoadedAssemblyByFullName = function (assemblyName, assemblyVersion, assemblyKey) {
	return $asm02.MS.Internal.JoltHelper._AssemblyByAssemblyName.get_Item(assemblyName);
};
$asm02.MS.Internal.JoltHelper.GetResourceFromAssembly = function (Uri, /* ref */ resourceStream, /* ref */ nCount) {
	try {
		var xamlUri = JSIL.New(System.Uri, "_ctor$1", [Uri, System.UriKind.Relative]);
		var unmanagedMemoryStream = JSIL.TryCast($asm02.System.Windows.ResourceManagerWrapper.GetResourceForUri$0(xamlUri), System.IO.UnmanagedMemoryStream);
		if (unmanagedMemoryStream !== null) {
			var num = unmanagedMemoryStream.Length;
			JSIL.UntranslatableInstruction("stfld:uint8*(CValue::m_peByteValue, ldloc:valuetype MS.Internal.CValue&[exp:CValue](resourceStream), callvirtgetter:uint8*(UnmanagedMemoryStream::get_PositionPointer, ldloc:UnmanagedMemoryStream(unmanagedMemoryStream)))");
			resourceStream.value.SetCountAndType(num, MS.Internal.VType.valueByteArray);
			nCount.value = num;
			$asm02.MS.Internal.JoltHelper.s_resourceStreamList.Add(unmanagedMemoryStream);
		}
	} catch ($exception) {
		var arg_44_0 = $exception;
		return $asm02.MS.Internal.Error.GetXresultForException(arg_44_0);
	}
	return 0;
};
$asm02.MS.Internal.JoltHelper.TriggerGCCollect = function () {
	var weakRefCount = $asm02.MS.Internal.ManagedPeerTable.GetWeakRefCount();
	if ($asm02.MS.Internal.JoltHelper._prevCount === weakRefCount) {
		$asm02.MS.Internal.JoltHelper._maxCount = 500;
		$asm02.MS.Internal.JoltHelper._prevCount = 0;
		return;
	}
	$asm02.MS.Internal.JoltHelper._prevCount = weakRefCount;
	if (weakRefCount > $asm02.MS.Internal.JoltHelper._maxCount) {
		System.GC.Collect();
		$asm02.MS.Internal.XcpImports.PostGCCollectMessage();
		$asm02.MS.Internal.JoltHelper._maxCount = 10;
	}
};
$asm02.MS.Internal.JoltHelper.LoadAssemblyNative = function (assemblyBytes, size, assemblyPDBBytes, sizePDB) {
	try {
		var array = JSIL.Array.New(System.Byte, size);
		System.Runtime.InteropServices.Marshal.Copy$13(assemblyBytes, array, 0, size);
		if (sizePDB !== 0) {
			var array2 = JSIL.Array.New(System.Byte, sizePDB);
			System.Runtime.InteropServices.Marshal.Copy$13(assemblyPDBBytes, array2, 0, sizePDB);
			var assembly = System.Reflection.Assembly.Load$3(array, array2);
		} else {
			assembly = System.Reflection.Assembly.Load$2(array);
		}
		$asm02.MS.Internal.JoltHelper.CacheAssembly(assembly, false);
		var result = 0;
	} catch ($exception) {
		var arg_40_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForException(arg_40_0);
	}
	return result;
};
$asm02.MS.Internal.JoltHelper.LoadAssembly$0 = function (assemblyBytes, size, assemblyPDBBytes, sizePDB) {
	try {
		var assemblyStream = $asm02.MS.Internal.JoltHelper.GetAssemblyStream(assemblyBytes, size);
		if (sizePDB !== 0) {
			var assemblyStream2 = $asm02.MS.Internal.JoltHelper.GetAssemblyStream(assemblyPDBBytes, sizePDB);
			var assembly = System.Reflection.Assembly.Load$4(assemblyStream, assemblyStream2);
		} else {
			assembly = System.Reflection.Assembly.Load$5(assemblyStream);
		}
		$asm02.MS.Internal.JoltHelper.CacheAssembly(assembly, false);
		var result = 0;
	} catch ($exception) {
		var arg_30_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForException(arg_30_0);
	}
	return result;
};
$asm02.MS.Internal.JoltHelper.GetAssemblyStream = function (assemblyBytes, size) {
	return JSIL.IgnoredMember(".ctor(pointer, length, capacity, access, skipSecurityCheck)", size, size, System.IO.FileAccess.Read, true);
};
$asm02.MS.Internal.JoltHelper.LoadAssembly$1 = function (buffdata, /* ref */ loadedAssembly) {
	try {
		loadedAssembly.value = System.Reflection.Assembly.Load$2(buffdata);
		$asm02.MS.Internal.JoltHelper.CacheAssembly(loadedAssembly.value, false);
		var result = 0;
	} catch ($exception) {
		var arg_14_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForException(arg_14_0);
	}
	return result;
};
$asm02.MS.Internal.JoltHelper.CacheAssembly = function (assembly, allowReplaceExisting) {
	$asm02.MS.Internal.JoltHelper._AssemblyByFullName.set_Item(assembly.FullName, assembly);
	try {
		var name = assembly.GetName$0();
	} catch ($exception) {
		var e = $exception;
		if ($asm02.MS.Internal.Error.IsCriticalException(e)) {
			throw $exception;
		}
		return;
	}
	if (!name.CultureInfo.Equals(System.Globalization.CultureInfo.InvariantCulture)) {
		return;
	}
	var name2 = name.Name;
	var flag = false;
	var assembly2 = new JSIL.Variable(null);
	if ($asm02.MS.Internal.JoltHelper._AssemblyByAssemblyName.TryGetValue(name2, /* ref */ assembly2)) {
		if (!allowReplaceExisting) {
			return;
		}
		if (assembly === assembly2.value) {
			return;
		}
		$asm02.MS.Internal.JoltHelper._AssemblyByAssemblyName.Remove(name2);
		$asm02.MS.Internal.XcpImports.ClearCustomTypeFactoryCache();
		flag = true;
		if (!$asm02.System.Windows.ResourceManagerWrapper.ClearCacheForAssembly(name2)) {
			$asm02.System.Windows.ResourceManagerWrapper.ClearCacheForAssembly(assembly.FullName);
		}
	}
	$asm02.MS.Internal.JoltHelper._AssemblyByAssemblyName.Add(name2, assembly);
	if (flag) {
		$asm02.MS.Internal.JoltHelper.RefreshXamlSchemaContext();
		return;
	}
	if (assembly !== System.Reflection.Assembly.GetExecutingAssembly()) {
		$asm02.MS.Internal.XamlSchemaContext.DeferRegisterManagedAssemblyHelper(assembly, name2);
	}
};
$asm02.MS.Internal.JoltHelper.RefreshXamlSchemaContext = function () {
	var executingAssembly = System.Reflection.Assembly.GetExecutingAssembly();
	$asm02.MS.Internal.XcpImports.RefreshXamlSchemaContext($asm02.MS.Internal.XamlSchemaContext.ShouldResetOnlyXmlnsDefinitions());
	$asm02.MS.Internal.XamlSchemaContext.ClearDeferredManagedAssembliesHelper();
	var enumerator = $asm02.MS.Internal.JoltHelper._AssemblyByAssemblyName.GetEnumerator().MemberwiseClone();
	try {
	__loop0__: 
		while (enumerator.MoveNext()) {
			var current = JSIL.Cast(enumerator.Current.MemberwiseClone(), System.Collections.Generic.KeyValuePair$b2.Of(System.String, System.Reflection.Assembly)).MemberwiseClone();
			if (current.Value !== executingAssembly) {
				$asm02.MS.Internal.XamlSchemaContext.DeferRegisterManagedAssemblyHelper(current.Value, current.Key);
			}
		}
	} finally {
		enumerator.IDisposable_Dispose();
	}
};
$asm02.MS.Internal.JoltHelper.RegisterAssembly = function (loadedAssembly, allowReplaceExisting) {
	try {
		$asm02.MS.Internal.JoltHelper.CacheAssembly(loadedAssembly, allowReplaceExisting);
		var result = 0;
	} catch ($exception) {
		var arg_0B_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForException(arg_0B_0);
	}
	return result;
};
$asm02.MS.Internal.JoltHelper.CleanupAppDomain = function () {
	$asm02.MS.Internal.JoltHelper._AssemblyByAssemblyName.Clear();
	$asm02.MS.Internal.JoltHelper._AssemblyByFullName.Clear();
	$asm02.MS.Internal.XamlSchemaContext.ClearDeferredManagedAssembliesHelper();
	System.Windows.Controls.Control.ResetStaticData();
	$asm02.MS.Internal.JoltHelper.RegisterAssembly($asm02.MS.Internal.JoltHelper.Assembly, false);
	var enumerator = ($asm02.MS.Internal.JoltHelper.s_resourceStreamList.GetEnumerator());
	try {
	__loop0__: 
		while (enumerator.MoveNext()) {
			var current = enumerator.Current;
			current.Close();
		}
	} finally {
		enumerator.IDisposable_Dispose();
	}
	$asm02.MS.Internal.JoltHelper.s_resourceStreamList.Clear();
	$asm02.MS.Internal.JoltHelper.m_context = 0;
	$asm02.MS.Internal.JoltHelper.HostSynchronizationContext = null;
	if ($asm02.System.Windows.Hosting.NativeHost.IsCustomHost) {
		System.Windows.Threading.Dispatcher.ResetMainDispatcher();
	}
};
$asm02.MS.Internal.JoltHelper.get_ThreadID = function () {
	return $asm02.MS.Internal.JoltHelper.m_threadID;
};
$asm02.MS.Internal.JoltHelper.get_Context = function () {
	return $asm02.MS.Internal.JoltHelper.m_context;
};
$asm02.MS.Internal.JoltHelper.SetContext = function (context) {
	$asm02.MS.Internal.JoltHelper.m_context = context;
	$asm02.MS.Internal.JoltHelper.m_threadID = System.Threading.Thread.CurrentThread.ManagedThreadId;
	$asm02.MS.Internal.FrameworkCallbacks.Initialize();
};
$asm02.MS.Internal.JoltHelper.SetCulture = function (strCultureName, strUICultureName) {
	if (strCultureName !== null) {
		try {
			System.Threading.Thread.CurrentThread.CurrentCulture = JSIL.New(System.Globalization.CultureInfo, "_ctor$0", [strCultureName]);
		} catch ($exception) {
			if (JSIL.CheckType($exception, System.ArgumentException)) {
				var arg_15_0 = $exception;
				var xresultForException = $asm02.MS.Internal.Error.GetXresultForException(arg_15_0);
				return xresultForException;
			} else {
				throw $exception;
			}
		}
	}
	if (strUICultureName !== null) {
		try {
			System.Threading.Thread.CurrentThread.CurrentUICulture = JSIL.New(System.Globalization.CultureInfo, "_ctor$0", [strUICultureName]);
		} catch ($exception) {
			if (JSIL.CheckType($exception, System.ArgumentException)) {
				var arg_34_0 = $exception;
				xresultForException = $asm02.MS.Internal.Error.GetXresultForException(arg_34_0);
				return xresultForException;
			} else {
				throw $exception;
			}
		}
	}
	return 0;
};
JSIL.OverloadedMethod($asm02.MS.Internal.JoltHelper, "LoadAssembly", [
		["LoadAssembly$0", [System.IntPtr, System.Int32, System.IntPtr, System.Int32]], 
		["LoadAssembly$1", [System.Array.Of(System.Byte), JSIL.Reference.Of(System.Reflection.Assembly)]]
	]);
JSIL.MakeProperty($asm02.MS.Internal.JoltHelper, "ThreadID", 
	$asm02.MS.Internal.JoltHelper.get_ThreadID, null);
JSIL.MakeProperty($asm02.MS.Internal.JoltHelper, "Context", 
	$asm02.MS.Internal.JoltHelper.get_Context, null);
Object.defineProperty($asm02.MS.Internal.JoltHelper, "MANAGED_DELEGATE_VIRTUALS_MANGLE_PREFIX", {
		"value": "M@@"}
);
Object.defineProperty($asm02.MS.Internal.JoltHelper, "MAX_WEAKREF_COUNT", {
		"value": 500}
);
Object.defineProperty($asm02.MS.Internal.JoltHelper, "MIN_WEAKREF_COUNT", {
		"value": 10}
);
Object.defineProperty($asm02.MS.Internal.JoltHelper, "DESKTOP_SYSTEM_DLL", {
		"value": "System, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"}
);
Object.defineProperty($asm02.MS.Internal.JoltHelper, "TELESTO_SYSTEM_DLL", {
		"value": "System, Version=2.1.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089"}
);
$asm02.MS.Internal.JoltHelper.EventSenderOverrides = null;
$asm02.MS.Internal.JoltHelper._AssemblyByFullName = null;
$asm02.MS.Internal.JoltHelper.HostSynchronizationContext = null;
$asm02.MS.Internal.JoltHelper.s_resourceStreamList = null;
$asm02.MS.Internal.JoltHelper._maxCount = 0;
$asm02.MS.Internal.JoltHelper._prevCount = 0;
$asm02.MS.Internal.JoltHelper.m_context = 0;
$asm02.MS.Internal.JoltHelper.m_threadID = 0;
$asm02.MS.Internal.JoltHelper.m_customCLR = false;
$asm02.MS.Internal.JoltHelper._AssemblyByAssemblyName = null;
$asm02.MS.Internal.JoltHelper._eventArgs = null;
$asm02.MS.Internal.JoltHelper._cctor = function () {
	$asm02.MS.Internal.JoltHelper.EventSenderOverrides = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.String, System.Int32), "_ctor$2", [System.StringComparer.OrdinalIgnoreCase]).__Initialize__(["System.Windows.VisualStateGroup"]);
	$asm02.MS.Internal.JoltHelper._AssemblyByFullName = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.String, System.Reflection.Assembly), "_ctor$0", []);
	$asm02.MS.Internal.JoltHelper.HostSynchronizationContext = null;
	$asm02.MS.Internal.JoltHelper.s_resourceStreamList = new (System.Collections.Generic.List$b1.Of(System.IO.UnmanagedMemoryStream)) ();
	$asm02.MS.Internal.JoltHelper._maxCount = 500;
	$asm02.MS.Internal.JoltHelper._prevCount = 0;
	$asm02.MS.Internal.JoltHelper.m_context = System.IntPtr.op_Explicit$0(0);
	$asm02.MS.Internal.JoltHelper.m_threadID = 0;
	$asm02.MS.Internal.JoltHelper.m_customCLR = false;
	$asm02.MS.Internal.JoltHelper._eventArgs = new System.EventArgs();
	$asm02.MS.Internal.JoltHelper._AssemblyByAssemblyName = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.String, System.Reflection.Assembly), "_ctor$2", [System.StringComparer.OrdinalIgnoreCase]);
	$asm02.MS.Internal.JoltHelper.RegisterAssembly($asm02.MS.Internal.JoltHelper.Assembly, false);
	$asm02.MS.Internal.JoltHelper.m_context = System.IntPtr.Zero;
	$asm02.MS.Internal.JoltHelper.m_threadID = 0;
	System.AppDomain.CurrentDomain.add_AssemblyResolve(JSIL.Delegate.New("System.ResolveEventHandler", null, $asm02.MS.Internal.JoltHelper.ResolveAssembly));
	System.AppDomain.CurrentDomain.add_UnhandledException(JSIL.Delegate.New("System.UnhandledExceptionEventHandler", null, $asm02.MS.Internal.JoltHelper.OnUnhandledException));
	var creator = new $asm02.System.Net.Browser.BrowserHttpWebRequestCreator();
	System.Net.WebRequest.RegisterPrefix("http:", creator);
	System.Net.WebRequest.RegisterPrefix("https:", creator);
	System.Net.WebRequest.RegisterPortableWebRequestCreator(new $asm02.System.Net.Browser.ClientHttpWebRequestCreator());
	System.Xml.XmlXapResolver.RegisterApplicationResourceStreamResolver(new $asm02.MS.Internal.JoltHelper.ApplicationResourceStreamResolver());
	$asm02.System.Net.NetworkInformation.InternalNetworkChange.RegisterInternalNetworkChange(new $asm02.System.Net.NetworkInformation.InternalNetworkChange());
	System.Net.Sockets.HttpPolicyDownloaderProtocol.RegisterUnsafeWebRequestCreator(new $asm02.System.Net.Browser.UnsafeClientHttpWebRequestCreator());
};

$asm02.MS.Internal.JoltHelper.ApplicationResourceStreamResolver.prototype.GetApplicationResourceStream = function (relativeUri) {
	var resourceStream = System.Windows.Application.GetResourceStream$1(relativeUri);
	if (resourceStream !== null) {
		return resourceStream.Stream;
	}
	return null;
};
$asm02.MS.Internal.JoltHelper.ApplicationResourceStreamResolver.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};

$asm02.MS.Internal.JoltHelper.$l$gc__DisplayClass2.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm02.MS.Internal.JoltHelper.$l$gc__DisplayClass2.prototype.eventArgs = null;

$asm02.MS.Internal.JoltHelper.$l$gc__DisplayClass4.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm02.MS.Internal.JoltHelper.$l$gc__DisplayClass4.prototype.$locals3 = null;
$asm02.MS.Internal.JoltHelper.$l$gc__DisplayClass4.prototype.DO = null;

$asm02.MS.Internal.TokenizerHelper.GetNumericListSeparator = function (provider) {
	var c = ",";
	var instance = System.Globalization.NumberFormatInfo.GetInstance(provider);
	if (!((instance.NumberDecimalSeparator.length <= 0) || (c !== (instance.NumberDecimalSeparator[0])))) {
		c = ";";
	}
	return c;
};

$asm02.MS.Internal.SilverlightTypeConverter.prototype._ctor = function (targetType) {
	System.ComponentModel.TypeConverter.prototype._ctor.call(this);
	this.targetType = targetType;
};
$asm02.MS.Internal.SilverlightTypeConverter.prototype.CanConvertTo = function (context, destinationType) {
	return ((destinationType === System.String) || System.ComponentModel.TypeConverter.prototype.CanConvertTo$1.call(this, context, destinationType));
};
$asm02.MS.Internal.SilverlightTypeConverter.prototype.ConvertTo = function (context, culture, value, destinationType) {
	if (destinationType !== System.String) {
		return System.ComponentModel.TypeConverter.prototype.ConvertTo$0.call(this, context, culture, value, destinationType);
	}
	if (value === null) {
		return System.String.Empty;
	}
	return value.toString();
};
$asm02.MS.Internal.SilverlightTypeConverter.prototype.CanConvertFrom = function (context, sourceType) {
	return ((sourceType === System.String) || System.ComponentModel.TypeConverter.prototype.CanConvertFrom$1.call(this, context, sourceType));
};
$asm02.MS.Internal.SilverlightTypeConverter.prototype.ConvertFrom = function (context, culture, value) {
	var outDOType = new JSIL.Variable(0);
	if (this.targetType === null) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("TypeConverters_NoTypeToConvertFrom")]);
	}
	var text = JSIL.TryCast(value, System.String);
	if (text === null) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("TypeConverters_CanOnlyConvertFromString")]);
	}
	var name = this.targetType.Name;
	var obj = null;
	if (this.targetType.IsEnum) {
		obj = System.Enum.Parse(this.targetType, text, true);
	} else {
		var cValue = new JSIL.Variable(new $asm02.MS.Internal.CValue());
		$asm02.MS.Internal.XcpImports.ConvertStringToTypedCValue(
			$asm02.MS.Internal.JoltHelper.Context, 
			name.length, 
			name, 
			text.length, 
			text, 
			/* ref */ cValue, 
			/* ref */ outDOType
		);
		obj = $asm02.MS.Internal.XcpImports.ConvertCValueForManagedWithType$0(this.targetType, /* ref */ cValue, outDOType.value, null);
		if (System.Boolean.Equals$1(this.targetType)) {
			obj = System.Convert.ToBoolean$0(obj);
		}
	}
	return obj;
};
$asm02.MS.Internal.SilverlightTypeConverter.prototype.targetType = null;

System.Windows.Controls.UserControl.prototype._ctor$0 = function () {
	System.Windows.Controls.Control.prototype._ctor$1.call(this, 189);
};
System.Windows.Controls.UserControl.prototype._ctor$1 = function (nKnownTypeIndex) {
	System.Windows.Controls.Control.prototype._ctor$1.call(this, nKnownTypeIndex);
};
System.Windows.Controls.UserControl.prototype.get_Content = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.UserControl.ContentProperty), System.Windows.UIElement);
};
System.Windows.Controls.UserControl.prototype.set_Content = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.UserControl.ContentProperty, value);
};
System.Windows.Controls.UserControl.prototype.FindNameInPage = function (name, calledFromUserControl) {
	if (calledFromUserControl) {
		return this.findElement(name);
	}
	var frameworkElement = JSIL.TryCast($asm02.MS.Internal.XcpImports.GetInheritanceParent(this), System.Windows.FrameworkElement);
	if (frameworkElement === null) {
		return null;
	}
	return frameworkElement.FindNameInPage(name, true);
};
JSIL.OverloadedMethod(System.Windows.Controls.UserControl.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);
JSIL.MakeProperty(System.Windows.Controls.UserControl.prototype, "Content", 
	System.Windows.Controls.UserControl.prototype.get_Content, System.Windows.Controls.UserControl.prototype.set_Content);
System.Windows.Controls.UserControl.ContentProperty = null;
System.Windows.Controls.UserControl._cctor = function () {
	System.Windows.Controls.UserControl.ContentProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19701, System.Windows.UIElement);
};

System.Windows.TemplatePartAttribute.prototype._ctor = function () {
	System.Attribute.prototype._ctor.call(this);
};
System.Windows.TemplatePartAttribute.prototype.get_Name = function () {
	return this._name;
};
System.Windows.TemplatePartAttribute.prototype.set_Name = function (value) {
	this._name = value;
};
System.Windows.TemplatePartAttribute.prototype.get_Type = function () {
	return this._type;
};
System.Windows.TemplatePartAttribute.prototype.set_Type = function (value) {
	this._type = value;
};
JSIL.MakeProperty(System.Windows.TemplatePartAttribute.prototype, "Name", 
	System.Windows.TemplatePartAttribute.prototype.get_Name, System.Windows.TemplatePartAttribute.prototype.set_Name);
JSIL.MakeProperty(System.Windows.TemplatePartAttribute.prototype, "Type", 
	System.Windows.TemplatePartAttribute.prototype.get_Type, System.Windows.TemplatePartAttribute.prototype.set_Type);
System.Windows.TemplatePartAttribute.prototype._name = null;
System.Windows.TemplatePartAttribute.prototype._type = null;

System.Windows.DependencyProperty.prototype._ctor = function (propertyType) {
	System.Object.prototype._ctor.call(this);
	this._propertyType = propertyType;
};
System.Windows.DependencyProperty.prototype.get_Name = function () {
	throw JSIL.New(System.NotImplementedException, "_ctor$0", []);
};
System.Windows.DependencyProperty.Register$0 = function (name, propertyType, ownerType, typeMetadata) {
	return System.Windows.DependencyProperty.Register$1(
		false, 
		name, 
		propertyType, 
		ownerType, 
		typeMetadata, 
		false
	);
};
System.Windows.DependencyProperty.RegisterReadOnly = function (name, propertyType, ownerType, typeMetadata) {
	return System.Windows.DependencyProperty.Register$1(
		false, 
		name, 
		propertyType, 
		ownerType, 
		typeMetadata, 
		true
	);
};
System.Windows.DependencyProperty.RegisterAttached = function (name, propertyType, ownerType, defaultMetadata) {
	return System.Windows.DependencyProperty.Register$1(
		true, 
		name, 
		propertyType, 
		ownerType, 
		defaultMetadata, 
		false
	);
};
System.Windows.DependencyProperty.RegisterAttachedReadOnly = function (name, propertyType, ownerType, defaultMetadata) {
	return System.Windows.DependencyProperty.Register$1(
		true, 
		name, 
		propertyType, 
		ownerType, 
		defaultMetadata, 
		true
	);
};
System.Windows.DependencyProperty.Register$1 = function (fIsAttachedDP, name, propertyType, ownerType, propertyMetadata, readOnly) {
	if (name === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["name"]);
	}
	if (name == System.String.Empty) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("DP_NameCannotBeEmpty")]);
	}
	if (propertyType === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["propertyType"]);
	}
	if (ownerType === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["ownerType"]);
	}
	if (fIsAttachedDP) {
		var customDependencyProperty = new $asm02.System.Windows.CustomAttachedDependencyProperty(propertyType);
	} else {
		customDependencyProperty = new $asm02.System.Windows.CustomDependencyProperty(propertyType);
	}
	customDependencyProperty._name = name;
	customDependencyProperty._ownerType = ownerType;
	customDependencyProperty._readOnly = readOnly;
	if (propertyMetadata !== null) {
		customDependencyProperty._propertyChangedCallback = propertyMetadata.PropertyChangedCallback;
	}
	if (!((propertyMetadata === null) || (propertyMetadata.DefaultValue === System.Windows.DependencyProperty.UnsetValue))) {
		if (!customDependencyProperty.IsValidType(propertyMetadata.DefaultValue)) {
			throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("DP_DefaultValueTypeDoesNotMatchPropertyType")]);
		}
		customDependencyProperty._defaultValue = propertyMetadata.DefaultValue;
	} else if (propertyType.IsValueType) {
		customDependencyProperty._defaultValue = System.Activator.CreateInstance$3(propertyType);
	}
	System.Windows.DependencyProperty.RememberRegisteredProperty(name, ownerType, customDependencyProperty);
	return customDependencyProperty;
};
System.Windows.DependencyProperty.prototype.GetMetadata = function (forType) {
	return this.GetMetadataCore(forType);
};
System.Windows.DependencyProperty.prototype.GetMetadataCore = function (forType) {
	throw JSIL.New(System.NotImplementedException, "_ctor$0", []);
};
System.Windows.DependencyProperty.prototype.AddOwner = function (ownerType) {
	if (ownerType === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["ownerType"]);
	}
	System.Windows.DependencyProperty.RememberRegisteredProperty(this._name, ownerType, this);
	return this;
};
System.Windows.DependencyProperty.RememberRegisteredProperty = function (name, ownerType, dp) {
	if (!System.Windows.DependencyProperty._registeredProperties.TryGetValue(ownerType, /* ref */ dictionary)) {
		var dictionary = new JSIL.Variable(JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.String, System.Windows.DependencyProperty), "_ctor$0", []));
		System.Windows.DependencyProperty._registeredProperties.set_Item(ownerType, dictionary.value);
	}
	dictionary.value.set_Item(name, dp);
	if (dp.m_nKnownId === 0) {
		if (System.Windows.DependencyProperty._customProperties.Count === 0) {
			System.Windows.DependencyProperty._customProperties.Add(null);
		}
		dp.m_nKnownId = System.Windows.DependencyProperty._customProperties.Count;
		System.Windows.DependencyProperty._customProperties.Add(dp);
	}
};
System.Windows.DependencyProperty.QueryRegisteredProperty$0 = function (name, ownerType) {
	var __label0__ = null;
__step0__: 
	while (true) {
		switch (__label0__) {
			case null:
				var dictionary = new JSIL.Variable(null), result = new JSIL.Variable(null);
				__label0__ = "__entry0__";
				continue __step0__;
				break;
			case "__entry0__":
			__loop0__: 
				while (true) {
					System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(ownerType.TypeHandle.MemberwiseClone());
					if (!(!System.Windows.DependencyProperty._registeredProperties.TryGetValue(ownerType, /* ref */ dictionary) || !dictionary.value.TryGetValue(name, /* ref */ result))) {
						break __loop0__;
					}
					ownerType = ownerType.BaseType;
					if (!((ownerType !== null) && (ownerType !== System.Windows.DependencyObject))) {
						__label0__ = "IL_3F";
						continue __step0__;
					}
				}
				return result.value;
				__label0__ = "IL_3F";
				continue __step0__;
				break;
			case "IL_3F":
				return null;
				break __step0__;
		}
	}
};
System.Windows.DependencyProperty.QueryRegisteredProperty$1 = function (nCustomPropertyID) {
	return System.Windows.DependencyProperty._customProperties.get_Item(nCustomPropertyID);
};
System.Windows.DependencyProperty.RegisterCoreProperty = function (id, propertyType) {
	var coreDependencyProperty = new $asm02.System.Windows.CoreDependencyProperty(propertyType);
	coreDependencyProperty.m_nKnownId = id;
	System.Windows.DependencyProperty._registeredCoreProperties.set_Item(id, coreDependencyProperty);
	return coreDependencyProperty;
};
System.Windows.DependencyProperty.RememberRegisteredCoreProperty = function (dp) {
	System.Windows.DependencyProperty._registeredCoreProperties.set_Item(dp.m_nKnownId, dp);
};
System.Windows.DependencyProperty.QueryRegisteredCoreProperty$0 = function (id) {
	return System.Windows.DependencyProperty.QueryRegisteredCoreProperty$1(id, null, null);
};
System.Windows.DependencyProperty.QueryRegisteredCoreProperty$1 = function (id, $propertyName, ownerType) {
	var propertyName = new JSIL.Variable($propertyName);
	var result = new JSIL.Variable(null), name = new JSIL.Variable(null);
	if (System.Windows.DependencyProperty._registeredCoreProperties.TryGetValue(id, /* ref */ result)) {
		return result.value;
	}
	if ($asm02.MS.Internal.QuirksMode.ShouldDoDeepLookupOfCoreDPs()) {
		if (!(!System.String.IsNullOrEmpty(propertyName.value) && ownerType)) {
			$asm02.MS.Internal.XcpImports.GetCoreDependencyPropertyNameAndTypeByIndex(id, /* ref */ propertyName, /* ref */ name);
			ownerType = System.Reflection.Assembly.GetExecutingAssembly().GetType$1(name.value, true);
		}
		return System.Windows.DependencyProperty.LookupCoreProperty(propertyName.value, ownerType);
	}
	return null;
};
System.Windows.DependencyProperty.LookupAttachedCoreProperty = function (propertyName) {
	var array = propertyName.Split(JSIL.Array.New(System.Char, ["."]));
	var classFullName = $asm02.MS.Internal.XcpImports.GetClassFullName(array[0]);
	var type = System.Reflection.Assembly.GetExecutingAssembly().GetType$0(classFullName);
	return System.Windows.DependencyProperty.LookupCorePropertyInType(array[1], type);
};
System.Windows.DependencyProperty.LookupCorePropertyInType = function (propertyName, ownerType) {
	var result = null;
	if (ownerType !== null) {
		var name = ((propertyName + "Property"));
		var field = ownerType.GetField$0(name, (System.Reflection.BindingFlags.FlattenHierarchy | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
		if (field !== null) {
			result = JSIL.TryCast(field.GetValue(null), System.Windows.DependencyProperty);
		}
	}
	return result;
};
System.Windows.DependencyProperty.LookupCoreProperty = function (propertyName, ownerType) {
	var dependencyProperty = null;
	if (propertyName.IndexOf$0(".") !== -1) {
		dependencyProperty = System.Windows.DependencyProperty.LookupAttachedCoreProperty(propertyName);
	} else {
		dependencyProperty = System.Windows.DependencyProperty.LookupCorePropertyInType(propertyName, ownerType);
	}
	if (dependencyProperty === null) {
		return null;
	}
	var coreDependencyProperty = JSIL.TryCast(dependencyProperty, $asm02.System.Windows.CoreDependencyProperty);
	if (coreDependencyProperty !== null) {
		System.Windows.DependencyProperty.RememberRegisteredCoreProperty(coreDependencyProperty);
	}
	return dependencyProperty;
};
System.Windows.DependencyProperty.GetRegisteredDependencyProperty = function (target, propertyName, attachedDPOwnerNamespace, attachedDPOwnerAssembly) {
	var result = null;
	var flag = false;
	var name = null;
	var type = null;
	var array = propertyName.Split(JSIL.Array.New(System.Char, ["."]));
	if (!((array === null) || (array.length !== 2))) {
		flag = true;
		name = array[1];
	} else {
		if (array.length > 2) {
			return null;
		}
		name = propertyName;
	}
	if (flag) {
		var str = array[0];
		if (!System.String.IsNullOrEmpty(attachedDPOwnerAssembly)) {
			var assembly = $asm02.MS.Internal.JoltHelper.GetLoadedAssemblyByName(attachedDPOwnerAssembly);
		} else {
			assembly = System.Reflection.Assembly.GetExecutingAssembly();
		}
		if (assembly === null) {
			return null;
		}
		if (System.String.IsNullOrEmpty(attachedDPOwnerNamespace)) {
		__loop0__: 
			for (var i = 0; i < System.Windows.DependencyProperty.KnownNamespaces.length; ++i) {
				var name2 = ((System.Windows.DependencyProperty.KnownNamespaces[i] + "." + str));
				type = assembly.GetType$0(name2);
				if (type !== null) {
					break __loop0__;
				}
			}
		} else {
			name2 = ((attachedDPOwnerNamespace + "." + str));
			type = assembly.GetType$0(name2);
		}
	} else {
		type = (JSIL.GetType(target));
	}
	if (type !== null) {
		result = JSIL.TryCast(System.Windows.DependencyProperty.QueryRegisteredProperty$0(name, type), $asm02.System.Windows.CustomDependencyProperty);
	}
	return result;
};
System.Windows.DependencyProperty.prototype.get_IsCoreProperty = function () {
	return false;
};
System.Windows.DependencyProperty.prototype.get_IsCustomAttachedProperty = function () {
	return false;
};
System.Windows.DependencyProperty.prototype.get_IsAnyTypeProperty = function () {
	return false;
};
System.Windows.DependencyProperty.prototype.GetDefaultValue = function (forTypeOfObject) {
	throw JSIL.New(System.NotImplementedException, "_ctor$0", []);
};
System.Windows.DependencyProperty.prototype.IsValidType = function (value) {
	if (value === null) {
		if (!(!this._propertyType.IsValueType || (this._propertyType.IsGenericType && 
					(this._propertyType.GetGenericTypeDefinition() === System.Windows.DependencyProperty.NullableType)))) {
			return false;
		}
	} else if (!this._propertyType.IsInstanceOfType(value)) {
		return false;
	}
	return true;
};
JSIL.OverloadedMethod(System.Windows.DependencyProperty, "Register", [
		["Register$0", [System.String, System.Type, System.Type, System.Windows.PropertyMetadata]], 
		["Register$1", [System.Boolean, System.String, System.Type, System.Type, System.Windows.PropertyMetadata, System.Boolean]]
	]);
JSIL.OverloadedMethod(System.Windows.DependencyProperty, "QueryRegisteredProperty", [
		["QueryRegisteredProperty$0", [System.String, System.Type]], 
		["QueryRegisteredProperty$1", [System.UInt32]]
	]);
JSIL.OverloadedMethod(System.Windows.DependencyProperty, "QueryRegisteredCoreProperty", [
		["QueryRegisteredCoreProperty$0", [System.UInt32]], 
		["QueryRegisteredCoreProperty$1", [System.UInt32, System.String, System.Type]]
	]);
JSIL.MakeProperty(System.Windows.DependencyProperty.prototype, "Name", 
	System.Windows.DependencyProperty.prototype.get_Name, null);
JSIL.MakeProperty(System.Windows.DependencyProperty.prototype, "IsCoreProperty", 
	System.Windows.DependencyProperty.prototype.get_IsCoreProperty, null);
JSIL.MakeProperty(System.Windows.DependencyProperty.prototype, "IsCustomAttachedProperty", 
	System.Windows.DependencyProperty.prototype.get_IsCustomAttachedProperty, null);
JSIL.MakeProperty(System.Windows.DependencyProperty.prototype, "IsAnyTypeProperty", 
	System.Windows.DependencyProperty.prototype.get_IsAnyTypeProperty, null);
System.Windows.DependencyProperty.NullableType = null;
System.Windows.DependencyProperty.UnsetValue = null;
System.Windows.DependencyProperty.prototype._propertyType = null;
System.Windows.DependencyProperty.prototype.m_nKnownId = 0;
System.Windows.DependencyProperty.prototype._name = null;
System.Windows.DependencyProperty._registeredProperties = null;
System.Windows.DependencyProperty._customProperties = null;
System.Windows.DependencyProperty._registeredCoreProperties = null;
System.Windows.DependencyProperty.KnownNamespaces = null;
System.Windows.DependencyProperty._cctor = function () {
	System.Windows.DependencyProperty.NullableType = System.Nullable$b1;
	System.Windows.DependencyProperty.UnsetValue = new System.Object();
	System.Windows.DependencyProperty._registeredProperties = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.Type, System.Collections.Generic.Dictionary$b2.Of(System.String, System.Windows.DependencyProperty)), "_ctor$0", []);
	System.Windows.DependencyProperty._customProperties = new (System.Collections.Generic.List$b1.Of(System.Windows.DependencyProperty)) ();
	System.Windows.DependencyProperty._registeredCoreProperties = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.UInt32, System.Windows.DependencyProperty), "_ctor$0", []);
	System.Windows.DependencyProperty.KnownNamespaces = JSIL.Array.New(System.String, ["System.Windows", "System.Windows.Controls", "System.Windows.Controls.Primitives", "System.Windows.Data", "System.Windows.Documents", "System.Windows.Ink", "System.Windows.Input", "System.Windows.Media", "System.Windows.Media.Animation", "System.Windows.Media.Imaging", "System.Windows.Shapes"]);
};

$asm02.System.Windows.CoreDependencyProperty.prototype._ctor = function (propertyType) {
	System.Windows.DependencyProperty.prototype._ctor.call(this, propertyType);
};
$asm02.System.Windows.CoreDependencyProperty.prototype.get_IsCoreProperty = function () {
	return true;
};
$asm02.System.Windows.CoreDependencyProperty.prototype.get_Name = function () {
	if (this._name === null) {
		this._name = $asm02.MS.Internal.XcpImports.DependencyProperty_GetName(this);
	}
	return this._name;
};
$asm02.System.Windows.CoreDependencyProperty.prototype.get_IsAnyTypeProperty = function () {
	if (!this._isAnyTypeProperty.HasValue) {
		this._isAnyTypeProperty = new (System.Nullable$b1.Of(System.Boolean)) (((this.m_nKnownId === 19707) || 
				(this.m_nKnownId === 19704)));
	}
	return this._isAnyTypeProperty.Value;
};
$asm02.System.Windows.CoreDependencyProperty.prototype.GetMetadataCore = function (forType) {
	if (forType === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["forType"]);
	}
	var coreTypeId = $asm02.MS.Internal.FrameworkCallbacks.GetCoreTypeId(forType);
	if (!((coreTypeId !== -1) && (coreTypeId !== 0))) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", ["forType"]);
	}
	return this.GetMetadata(coreTypeId);
};
$asm02.System.Windows.CoreDependencyProperty.prototype.GetMetadata = function (propertyOwnerTypeId) {
	var obj = this.GetDefaultValue$1(propertyOwnerTypeId);
	if (obj === null) {
		obj = System.Windows.DependencyProperty.UnsetValue;
	}
	return JSIL.New(System.Windows.PropertyMetadata, "_ctor$1", [obj]);
};
$asm02.System.Windows.CoreDependencyProperty.prototype.GetDefaultValue$0 = function (propertyOwner) {
	return $asm02.MS.Internal.XcpImports.DependencyProperty_GetDefaultValue(this, propertyOwner, 0);
};
$asm02.System.Windows.CoreDependencyProperty.prototype.GetDefaultValue$1 = function (propertyOwnerTypeId) {
	return $asm02.MS.Internal.XcpImports.DependencyProperty_GetDefaultValue(this, null, propertyOwnerTypeId);
};
JSIL.OverloadedMethod(System.Windows.CoreDependencyProperty.prototype, "GetDefaultValue", [
		["GetDefaultValue$0", [System.Windows.DependencyObject]], 
		["GetDefaultValue$1", [System.UInt32]]
	]);
JSIL.MakeProperty($asm02.System.Windows.CoreDependencyProperty.prototype, "IsCoreProperty", 
	$asm02.System.Windows.CoreDependencyProperty.prototype.get_IsCoreProperty, null);
JSIL.MakeProperty($asm02.System.Windows.CoreDependencyProperty.prototype, "Name", 
	$asm02.System.Windows.CoreDependencyProperty.prototype.get_Name, null);
JSIL.MakeProperty($asm02.System.Windows.CoreDependencyProperty.prototype, "IsAnyTypeProperty", 
	$asm02.System.Windows.CoreDependencyProperty.prototype.get_IsAnyTypeProperty, null);

$asm02.System.Windows.CustomDependencyProperty.prototype._ctor = function (propertyType) {
	System.Windows.DependencyProperty.prototype._ctor.call(this, propertyType);
	this._getterMethodInfo = null;
	this._setterMethodInfo = null;
};
$asm02.System.Windows.CustomDependencyProperty.prototype.get_GetterMethodInfo = function () {
	if (this._getterMethodInfo === null) {
		this._getterMethodInfo = this._ownerType.GetMethod$4(("Get" + this._name), (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
	}
	return this._getterMethodInfo;
};
$asm02.System.Windows.CustomDependencyProperty.prototype.get_SetterMethodInfo = function () {
	if (this._setterMethodInfo === null) {
		this._setterMethodInfo = this._ownerType.GetMethod$4(("Set" + this._name), (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
	}
	return this._setterMethodInfo;
};
$asm02.System.Windows.CustomDependencyProperty.prototype.get_Name = function () {
	return this._name;
};
$asm02.System.Windows.CustomDependencyProperty.prototype.GetDefaultValue = function (forTypeObject) {
	return this._defaultValue;
};
$asm02.System.Windows.CustomDependencyProperty.prototype.IsReadOnly = function () {
	return this._readOnly;
};
$asm02.System.Windows.CustomDependencyProperty.prototype.GetDefaultMetadata = function () {
	if (this._defaultPropertyMetadata === null) {
		var obj = this.GetDefaultValue(null);
		if (obj === null) {
			obj = System.Windows.DependencyProperty.UnsetValue;
		}
		this._defaultPropertyMetadata = JSIL.New(System.Windows.PropertyMetadata, "_ctor$1", [obj]);
	}
	return this._defaultPropertyMetadata;
};
$asm02.System.Windows.CustomDependencyProperty.prototype.GetMetadataCore = function (forType) {
	if (forType === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["forType"]);
	}
	return this.GetDefaultMetadata();
};
JSIL.MakeProperty($asm02.System.Windows.CustomDependencyProperty.prototype, "GetterMethodInfo", 
	$asm02.System.Windows.CustomDependencyProperty.prototype.get_GetterMethodInfo, null);
JSIL.MakeProperty($asm02.System.Windows.CustomDependencyProperty.prototype, "SetterMethodInfo", 
	$asm02.System.Windows.CustomDependencyProperty.prototype.get_SetterMethodInfo, null);
JSIL.MakeProperty($asm02.System.Windows.CustomDependencyProperty.prototype, "Name", 
	$asm02.System.Windows.CustomDependencyProperty.prototype.get_Name, null);
$asm02.System.Windows.CustomDependencyProperty.prototype._readOnly = false;
$asm02.System.Windows.CustomDependencyProperty.prototype._ownerType = null;
$asm02.System.Windows.CustomDependencyProperty.prototype._propertyChangedCallback = null;
$asm02.System.Windows.CustomDependencyProperty.prototype._defaultValue = null;
$asm02.System.Windows.CustomDependencyProperty.prototype._getterMethodInfo = null;
$asm02.System.Windows.CustomDependencyProperty.prototype._setterMethodInfo = null;
$asm02.System.Windows.CustomDependencyProperty.prototype._defaultPropertyMetadata = null;

$asm02.System.Windows.CustomAttachedDependencyProperty.prototype._ctor = function (propertyType) {
	$asm02.System.Windows.CustomDependencyProperty.prototype._ctor.call(this, propertyType);
};
$asm02.System.Windows.CustomAttachedDependencyProperty.prototype.get_IsCustomAttachedProperty = function () {
	return true;
};
JSIL.MakeProperty($asm02.System.Windows.CustomAttachedDependencyProperty.prototype, "IsCustomAttachedProperty", 
	$asm02.System.Windows.CustomAttachedDependencyProperty.prototype.get_IsCustomAttachedProperty, null);

System.Windows.Deployment.SetCurrentApplication = function (application) {
	if (application === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["application"]);
	}
	$asm02.MS.Internal.XcpImports.Deployment_SetCurrentApplication(application);
};
System.Windows.Deployment.GetAppIdForUri = function (AppUri, /* ref */ xapLocationStr) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	if (!(!System.Uri.op_Equality(AppUri, null) && AppUri.IsAbsoluteUri)) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["appUri"]);
	}
	return $asm02.MS.Internal.XcpImports.Application_GetAppIDForURI(AppUri.OriginalString, /* ref */ xapLocationStr);
};
System.Windows.Deployment.RegisterAssembly = function (assembly) {
	if (assembly === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["assembly"]);
	}
	$asm02.MS.Internal.JoltHelper.RegisterAssembly(assembly, true);
};
System.Windows.Deployment.prototype._ctor = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 161);
	if (System.Windows.Deployment._current !== null) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("Deployment_UseCurrentToAccessDeployment")]);
	}
	System.Windows.Deployment._current = this;
};
System.Windows.Deployment.prototype.get_Parts = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Deployment.PartsProperty), System.Windows.AssemblyPartCollection);
};
System.Windows.Deployment.prototype.get_ExternalParts = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Deployment.ExternalPartsProperty), System.Windows.ExternalPartCollection);
};
System.Windows.Deployment.prototype.get_EntryPointAssembly = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Deployment.EntryPointAssemblyProperty), System.String);
};
System.Windows.Deployment.prototype.get_EntryPointType = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Deployment.EntryPointTypeProperty), System.String);
};
System.Windows.Deployment.prototype.get_RuntimeVersion = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Deployment.RuntimeVersionProperty), System.String);
};
System.Windows.Deployment.prototype.get_ExternalCallersFromCrossDomain = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Deployment.ExternalCallersFromCrossDomainProperty), System.Windows.CrossDomainAccess);
};
System.Windows.Deployment.prototype.get_OutOfBrowserSettings = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Deployment.OutOfBrowserSettingsProperty), System.Windows.OutOfBrowserSettings);
};
JSIL.MakeProperty(System.Windows.Deployment, "Current", 
	System.Windows.Deployment.get_Current, null);
JSIL.MakeProperty(System.Windows.Deployment.prototype, "Parts", 
	System.Windows.Deployment.prototype.get_Parts, null);
JSIL.MakeProperty(System.Windows.Deployment.prototype, "ExternalParts", 
	System.Windows.Deployment.prototype.get_ExternalParts, null);
JSIL.MakeProperty(System.Windows.Deployment.prototype, "EntryPointAssembly", 
	System.Windows.Deployment.prototype.get_EntryPointAssembly, null);
JSIL.MakeProperty(System.Windows.Deployment.prototype, "EntryPointType", 
	System.Windows.Deployment.prototype.get_EntryPointType, null);
JSIL.MakeProperty(System.Windows.Deployment.prototype, "RuntimeVersion", 
	System.Windows.Deployment.prototype.get_RuntimeVersion, null);
JSIL.MakeProperty(System.Windows.Deployment.prototype, "ExternalCallersFromCrossDomain", 
	System.Windows.Deployment.prototype.get_ExternalCallersFromCrossDomain, null);
JSIL.MakeProperty(System.Windows.Deployment.prototype, "OutOfBrowserSettings", 
	System.Windows.Deployment.prototype.get_OutOfBrowserSettings, null);
System.Windows.Deployment.PartsProperty = null;
System.Windows.Deployment.ExternalPartsProperty = null;
System.Windows.Deployment.EntryPointAssemblyProperty = null;
System.Windows.Deployment.EntryPointTypeProperty = null;
System.Windows.Deployment.RuntimeVersionProperty = null;
System.Windows.Deployment.ExternalCallersFromCrossDomainProperty = null;
System.Windows.Deployment.OutOfBrowserSettingsProperty = null;
System.Windows.Deployment._current = null;
System.Windows.Deployment._cctor = function () {
	System.Windows.Deployment.PartsProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19000, System.Windows.AssemblyPartCollection);
	System.Windows.Deployment.ExternalPartsProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19312, System.Windows.ExternalPartCollection);
	System.Windows.Deployment.EntryPointAssemblyProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19001, System.String);
	System.Windows.Deployment.EntryPointTypeProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19002, System.String);
	System.Windows.Deployment.RuntimeVersionProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19005, System.String);
	System.Windows.Deployment.ExternalCallersFromCrossDomainProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19004, System.Windows.CrossDomainAccess);
	System.Windows.Deployment.OutOfBrowserSettingsProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19007, System.Windows.OutOfBrowserSettings);
	System.Windows.Deployment._current = null;
};

System.Windows.Threading.DispatcherTimer.prototype._ctor$0 = function () {
	this._ctor$1(212);
	(this.Interval = JSIL.New(System.TimeSpan, "_ctor$0", [0]));
};
System.Windows.Threading.DispatcherTimer.prototype._ctor$1 = function (nativeTypeIndex) {
	System.Object.prototype._ctor.call(this);
	var intPtr = System.IntPtr.Zero;
	intPtr = (0);
	this.m_nativePtr = new $asm02.MS.Internal.NativeObjectSafeHandle();
	this.m_nativePtr.NativeObject = intPtr;
	;
	this._coreTypeEventHelper = new $asm02.MS.Internal.CoreTypeEventHelper();
	var type = (JSIL.GetType(this));
	var isCustomType = 0;
	if (!$asm02.MS.Internal.TypeProxy.IsCoreType(type)) {
		isCustomType = 1;
	}
	;
};
System.Windows.Threading.DispatcherTimer.prototype.Start = function () {
	this._isEnabled = true;
	$asm02.MS.Internal.XcpImports.DispatcherTimer_Start(this);
};
System.Windows.Threading.DispatcherTimer.prototype.Stop = function () {
	this._isEnabled = false;
	$asm02.MS.Internal.XcpImports.DispatcherTimer_Stop(this);
};
System.Windows.Threading.DispatcherTimer.prototype.get_Interval = function () {
	var value = $asm02.MS.Internal.XcpImports.GetValue(this, System.Windows.Threading.DispatcherTimer.IntervalProperty);
	if (value === null) {
		return new System.TimeSpan();
	}
	return JSIL.Cast(value, System.TimeSpan);
};
System.Windows.Threading.DispatcherTimer.prototype.set_Interval = function (value) {
	if (value.Seconds < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$0", []);
	}
	$asm02.MS.Internal.XcpImports.SetValue(this, System.Windows.Threading.DispatcherTimer.IntervalProperty, value.toString());
};
System.Windows.Threading.DispatcherTimer.prototype.get_IsEnabled = function () {
	return this._isEnabled;
};
System.Windows.Threading.DispatcherTimer.prototype.add_Tick = function (value) {
	this.AddEventListener(System.Windows.DependencyProperty.RegisterCoreProperty(26010, null), value);
};
System.Windows.Threading.DispatcherTimer.prototype.remove_Tick = function (value) {
	this.RemoveEventListener(System.Windows.DependencyProperty.RegisterCoreProperty(26010, null), value);
};
System.Windows.Threading.DispatcherTimer.prototype.IManagedPeer_BeginShutdown = function () {
	System.GC.SuppressFinalize(this.NativeObjectSafeHandle);
	$asm02.MS.Internal.XcpImports.DisconnectManagedPeer(this);
};
System.Windows.Threading.DispatcherTimer.prototype.IManagedPeer_EndShutdown = function () {
	$asm02.MS.Internal.XcpImports.ReleaseNativeObject$0(this);
	this.m_nativePtr = null;
};
System.Windows.Threading.DispatcherTimer.prototype.IManagedPeer_RemovePeerReferenceToItem = function (child) {
	throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
};
System.Windows.Threading.DispatcherTimer.prototype.IManagedPeer_AddPeerReferenceToItem = function (child) {
	throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
};
System.Windows.Threading.DispatcherTimer.prototype.IManagedPeerBase_get_NativeObject = function () {
	return this.NativeObjectSafeHandle.NativeObject;
};
System.Windows.Threading.DispatcherTimer.prototype.IManagedPeer_GetInstanceEventDelegate = function (eventName) {
	return this._coreTypeEventHelper.GetInstanceEventDelegate(eventName);
};
System.Windows.Threading.DispatcherTimer.prototype.AddEventListener = function (property, handler) {
	if ((true) === null) {
		;
	}
	this._coreTypeEventHelper.AddEventListener(this, property, handler);
};
System.Windows.Threading.DispatcherTimer.prototype.RemoveEventListener = function (property, handler) {
	this._coreTypeEventHelper.RemoveEventListener(this, property, handler);
};
System.Windows.Threading.DispatcherTimer.prototype.get_NativeObjectSafeHandle = function () {
	$asm02.MS.Internal.NativeObjectSafeHandle.ValidateNativePtr(this.m_nativePtr);
	return this.m_nativePtr;
};
JSIL.OverloadedMethod(System.Windows.Threading.DispatcherTimer.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);
JSIL.MakeProperty(System.Windows.Threading.DispatcherTimer.prototype, "Interval", 
	System.Windows.Threading.DispatcherTimer.prototype.get_Interval, System.Windows.Threading.DispatcherTimer.prototype.set_Interval);
JSIL.MakeProperty(System.Windows.Threading.DispatcherTimer.prototype, "IsEnabled", 
	System.Windows.Threading.DispatcherTimer.prototype.get_IsEnabled, null);
JSIL.MakeProperty(System.Windows.Threading.DispatcherTimer.prototype, "IManagedPeerBase_NativeObject", 
	System.Windows.Threading.DispatcherTimer.prototype.IManagedPeerBase_get_NativeObject, null);
JSIL.MakeProperty(System.Windows.Threading.DispatcherTimer.prototype, "NativeObjectSafeHandle", 
	System.Windows.Threading.DispatcherTimer.prototype.get_NativeObjectSafeHandle, null);
Object.defineProperty(System.Windows.Threading.DispatcherTimer, "native_INDEX_DISPATCHERTIMER", {
		"value": 212}
);
Object.defineProperty(System.Windows.Threading.DispatcherTimer, "native_PROPERTYINDEX_DISPATCHERTIMER_TICK", {
		"value": 26010}
);
Object.defineProperty(System.Windows.Threading.DispatcherTimer, "native_PROPERTYINDEX_DISPATCHERTIMER_INTERVAL", {
		"value": 26011}
);
System.Windows.Threading.DispatcherTimer.prototype.m_nativePtr = null;
System.Windows.Threading.DispatcherTimer.prototype._coreTypeEventHelper = null;
System.Windows.Threading.DispatcherTimer.prototype._isEnabled = false;
System.Windows.Threading.DispatcherTimer.IntervalProperty = null;
System.Windows.Threading.DispatcherTimer._cctor = function () {
	System.Windows.Threading.DispatcherTimer.IntervalProperty = System.Windows.DependencyProperty.RegisterCoreProperty(26011, System.TimeSpan);
};

$asm02.MS.Internal.Error.Succeeded = function (hr) {
	return ((-2147483648 & hr) === 0);
};
$asm02.MS.Internal.Error.get_TheException = function () {
	return $asm02.MS.Internal.Error._theException;
};
$asm02.MS.Internal.Error.ClearException = function () {
	$asm02.MS.Internal.Error._theException = null;
	return 0;
};
$asm02.MS.Internal.Error.GetExceptionText = function (/* ref */ text, /* ref */ textLength) {
	var result = 0;
	text.value = System.IntPtr.Zero;
	textLength.value = 0;
	try {
		if ($asm02.MS.Internal.Error._theException !== null) {
			var text2 = $asm02.MS.Internal.Error._theException.toString();
			text.value = $asm02.MS.Internal.FrameworkCallbacks.MarshalStringToNative(text2);
			textLength.value = System.Convert.ToUInt32$8(text2.length);
		}
	} catch ($exception) {
		result = -2147418113;
	}
	return result;
};
$asm02.MS.Internal.Error.CallAUEHandler = function (hr, /* ref */ bIsHandled) {
	bIsHandled.value = $asm02.MS.Internal.Error.CallApplicationUEHandler($asm02.MS.Internal.Error.MarshalXresultAsException$0(hr)) ? 1 : 0;
	return 0;
};
$asm02.MS.Internal.Error.IsCriticalException = function (e) {
	return (JSIL.TryCast(e, System.OutOfMemoryException) || 
		JSIL.TryCast(e, System.StackOverflowException) || 
		JSIL.TryCast(e, System.AccessViolationException) || JSIL.CheckType(e, System.Threading.ThreadAbortException));
};
$asm02.MS.Internal.Error.MarshalXresultAsException$0 = function (hr) {
	return $asm02.MS.Internal.Error.MarshalXresultAsException$1(hr, $asm02.MS.Internal.Error.COMExceptionBehavior.HideCOMExceptions);
};
$asm02.MS.Internal.Error.MarshalXresultAsException$1 = function (hr, comExceptionBehavior) {
	if (!((hr !== -2146492416) || ($asm02.MS.Internal.Error._theException === null))) {
		var result = new $asm02.MS.Internal.WrappedException($asm02.MS.Internal.Error._theException.Message, $asm02.MS.Internal.Error._theException);
		$asm02.MS.Internal.Error._theException = null;
		return result;
	}
	if (hr <= -2147024882) {
		if (hr <= -2147483627) {
			if (hr <= -2147483643) {
				if (hr === 0) {
					return null;
				}
				switch (hr) {
					case -2147483644: 
					case -2147483643: 
						return JSIL.New(System.PlatformNotSupportedException, "_ctor$0", []);
				}
			} else if (hr !== -2147483638) {
				switch (hr) {
					case -2147483628: 
						return JSIL.New(System.Security.SecurityException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("TrustedApplications_ElevationStatusMustMatch")]);
					case -2147483627: 
						return JSIL.New(System.Security.SecurityException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("TrustedApplications_CertificatesMustMatch")]);
				}
			}
		} else if (hr <= -2147418113) {
			switch (hr) {
				case -2147467263: 
				case -2147467262: 
				case -2147467261: 
				case -2147467260: 
				case -2147467259: 
					break;
				default: 
					if (hr !== -2147418113) {
					}
					break;
			}
		} else {
			switch (hr) {
				case -2147024891: 
					return JSIL.New(System.UnauthorizedAccessException, "_ctor$0", []);
				case -2147024890: 
					break;
				default: 
					if (hr !== -2147024882) {
					}
					break;
			}
		}
	} else if (hr <= -2142240762) {
		if (hr <= -2146498339) {
			if (hr !== -2147024809) {
				switch (hr) {
					case -2146498358: 
					case -2146498357: 
					case -2146498356: 
					case -2146498355: 
					case -2146498354: 
					case -2146498353: 
					case -2146498352: 
					case -2146498351: 
					case -2146498350: 
					case -2146498349: 
					case -2146498348: 
					case -2146498347: 
					case -2146498346: 
					case -2146498345: 
					case -2146498344: 
					case -2146498343: 
					case -2146498340: 
					case -2146498339: 
						return System.Windows.Markup.XamlParseException.CreateFromCore(hr);
				}
			}
		} else {
			switch (hr) {
				case -2146496512: 
					return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.MS.Internal.Error.GetLastReportedNativeErrorMessage()]);
				case -2146496511: 
					return JSIL.New(System.ArgumentException, "_ctor$1", [$asm02.MS.Internal.Error.GetLastReportedNativeErrorMessage()]);
				default: 
					switch (hr) {
						case -2142240767: 
							throw JSIL.New(System.NotSupportedException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("ComAutomation_FeatureBlocked")]);
						case -2142240766: 
							throw new System.Exception($asm02.System.Windows.Resx.GetString$2("ComAutomation_ProgIDNotRegistered"));
						case -2142240765: 
							throw new System.Exception($asm02.System.Windows.Resx.GetString$2("ComAutomation_CreateInstance"));
						case -2142240764: 
							throw new System.Exception($asm02.System.Windows.Resx.GetString$2("ComAutomation_GetActiveObject"));
						case -2142240763: 
							throw new System.Exception($asm02.System.Windows.Resx.GetString$2("ComAutomation_NoEvent"));
						case -2142240762: 
							throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("InvalidCrossThreadAccess")]);
					}
					break;
			}
		}
	} else if (hr <= -2013261912) {
		if (hr === -2013263519) {
			return new System.Windows.Messaging.ListenFailedException($asm02.System.Windows.Resx.GetString$2("LocalMessage_CouldNotRegisterReceiver"));
		}
		if (hr === -2013261912) {
			return JSIL.New(System.Windows.LayoutCycleException, "_ctor$0", []);
		}
	} else {
		if (hr === -2013261904) {
			return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("NotificationWindow_NotOutOfBrowser")]);
		}
		switch (hr) {
			case -1072759040: 
				return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("MediaStreamSource_UnexpectedSeekReport")]);
			case -1072759039: 
				return JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("MediaStreamSource_UnexpectedSampleReport")]);
		}
	}
	if (!((-2147174400 !== (hr & -256)) && 
			(-1072824320 !== (hr & -65536)) && (-1072873830 !== hr))) {
		return $asm02.System.Windows.Media.DrmException.CreateDrmException(hr);
	}
	var exception = System.Runtime.InteropServices.Marshal.GetExceptionForHR(hr);
	if (!(JSIL.Cast(comExceptionBehavior, System.Boolean) || (JSIL.TryCast(exception, System.Runtime.InteropServices.COMException) === null))) {
		exception = new System.Exception(exception.Message);
	}
	return exception;
};
$asm02.MS.Internal.Error.MarshalExceptionAsXresult = function (ex) {
	if (JSIL.TryCast(ex, $asm02.MS.Internal.WrappedException) !== null) {
		ex = ex.InnerException;
	} else if (JSIL.TryCast(ex, $asm02.MS.Internal.NativeParseException) !== null) {
		$asm02.MS.Internal.Error.ProcessException(ex, false);
		ex = ex.InnerException;
		if (JSIL.TryCast(ex, System.Reflection.TargetInvocationException) !== null) {
			ex = ex.InnerException;
		}
	}
	if ($asm02.MS.Internal.Error._theException === null) {
		$asm02.MS.Internal.Error._theException = ex;
	}
	var xamlParseException = JSIL.TryCast(ex, System.Windows.Markup.XamlParseException);
	if (xamlParseException !== null) {
		return xamlParseException.ErrorCode;
	}
	if (JSIL.TryCast(ex, System.NotImplementedException) !== null) {
		return -2147467263;
	}
	if (JSIL.TryCast(ex, System.OutOfMemoryException) !== null) {
		return -2147024882;
	}
	if (JSIL.TryCast(ex, System.ArgumentException) !== null) {
		return -2147024809;
	}
	if (JSIL.TryCast(ex, System.InvalidCastException) !== null) {
		return -2147467262;
	}
	if (JSIL.TryCast(ex, System.NullReferenceException) !== null) {
		return -2147467261;
	}
	if (JSIL.TryCast(ex, System.UnauthorizedAccessException) !== null) {
		return -2147024891;
	}
	if (JSIL.TryCast(ex, $asm02.System.Windows.Media.DrmException) !== null) {
		var drmException = JSIL.TryCast(ex, $asm02.System.Windows.Media.DrmException);
		return drmException.HRESULT;
	}
	return -2146492416;
};
$asm02.MS.Internal.Error.GetXresultForException = function (ex) {
	if (JSIL.TryCast(ex, System.Reflection.TargetInvocationException) !== null) {
		ex = ex.InnerException;
	}
	if ($asm02.MS.Internal.Error.IsCriticalException(ex)) {
		throw ex;
	}
	return $asm02.MS.Internal.Error.MarshalExceptionAsXresult(ex);
};
$asm02.MS.Internal.Error.GetXresultForUserException = function (ex) {
	if (JSIL.TryCast(ex, System.Reflection.TargetInvocationException) !== null) {
		ex = ex.InnerException;
	}
	if ($asm02.MS.Internal.Error.IsCriticalException(ex)) {
		throw ex;
	}
	if (JSIL.TryCast(ex, $asm02.MS.Internal.WrappedException) !== null) {
		ex = ex.InnerException;
	}
	if (!((JSIL.TryCast(ex, System.AccessViolationException) === null) && 
			(JSIL.TryCast(ex, $asm02.MS.Internal.NativeParseException) === null) && (JSIL.TryCast(ex, $asm02.MS.Internal.ApplicationLifetimeObjectsCollection.AppServiceIntfNotImplementedException) === null))) {
		return $asm02.MS.Internal.Error.MarshalExceptionAsXresult(ex);
	}
	var flag = false;
	try {
		flag = $asm02.MS.Internal.Error.CallApplicationUEHandler(ex);
	} catch ($exception) {
		var ex2 = $exception;
		$asm02.MS.Internal.Error.ProcessException(ex2, true);
		var result = $asm02.MS.Internal.Error.MarshalExceptionAsXresult(ex2);
		return result;
	}
	if (!(!flag || 
			(JSIL.TryCast(ex, System.Windows.Markup.XamlParseException) === null) || 
			(ex.InnerException === null) || (JSIL.TryCast(ex.InnerException, $asm02.MS.Internal.ApplicationLifetimeObjectsCollection.AppServiceIntfNotImplementedException) === null))) {
		return -2146498338;
	}
	if (!(flag && ((System.Threading.Thread.CurrentThread.ManagedThreadId !== $asm02.MS.Internal.JoltHelper.ThreadID) || 
				!$asm02.MS.Internal.XcpImports.LayoutManager_DidErrorOccurDuringLayout() || 
				System.ComponentModel.DesignerProperties.InternalIsInDesignMode))) {
		$asm02.MS.Internal.Error.ProcessException(ex, true);
		return $asm02.MS.Internal.Error.MarshalExceptionAsXresult(ex);
	}
	if (System.Threading.Thread.CurrentThread.ManagedThreadId === $asm02.MS.Internal.JoltHelper.ThreadID) {
		$asm02.MS.Internal.XcpImports.LayoutManager_ClearErrorOccurredDuringLayout();
	}
	return 0;
};
$asm02.MS.Internal.Error.CallApplicationUEHandler = function (e) {
	if (!((System.Windows.Application.Current === null) || (System.Windows.Application.Current._appUnhandledException === null))) {
		var applicationUnhandledExceptionEventArgs = new System.Windows.ApplicationUnhandledExceptionEventArgs(e, false);
		System.Windows.Application.Current._appUnhandledException(System.Windows.Application.Current, applicationUnhandledExceptionEventArgs);
		return applicationUnhandledExceptionEventArgs.Handled;
	}
	return false;
};
$asm02.MS.Internal.Error.ProcessException = function (ex, fShutdown) {
	$asm02.MS.Internal.XcpImports.CreateNativeErrorObject(ex, fShutdown);
};
$asm02.MS.Internal.Error.GetLastReportedNativeErrorMessage = function () {
	var result = new JSIL.Variable(null), num = new JSIL.Variable(0), num2 = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.GetErrorDetails(/* ref */ result, /* ref */ num, /* ref */ num2);
	return result.value;
};
JSIL.OverloadedMethod($asm02.MS.Internal.Error, "MarshalXresultAsException", [
		["MarshalXresultAsException$0", [System.UInt32]], 
		["MarshalXresultAsException$1", [System.UInt32, $asm02.MS.Internal.Error.COMExceptionBehavior]]
	]);
JSIL.MakeProperty($asm02.MS.Internal.Error, "TheException", 
	$asm02.MS.Internal.Error.get_TheException, null);
Object.defineProperty($asm02.MS.Internal.Error, "None", {
		"value": 0}
);
Object.defineProperty($asm02.MS.Internal.Error, "Unknown", {
		"value": 2148468938}
);
Object.defineProperty($asm02.MS.Internal.Error, "Activation", {
		"value": 2148468939}
);
Object.defineProperty($asm02.MS.Internal.Error, "AssemblyDownload", {
		"value": 2148468940}
);
Object.defineProperty($asm02.MS.Internal.Error, "AssemblyLoad", {
		"value": 2148468941}
);
Object.defineProperty($asm02.MS.Internal.Error, "UnknownType", {
		"value": 2148468942}
);
Object.defineProperty($asm02.MS.Internal.Error, "BadType", {
		"value": 2148468943}
);
Object.defineProperty($asm02.MS.Internal.Error, "BadNativeType", {
		"value": 2148468944}
);
Object.defineProperty($asm02.MS.Internal.Error, "CreateObjectFailed", {
		"value": 2148468945}
);
Object.defineProperty($asm02.MS.Internal.Error, "PropertyNotFound", {
		"value": 2148468946}
);
Object.defineProperty($asm02.MS.Internal.Error, "BadPropertyType", {
		"value": 2148468947}
);
Object.defineProperty($asm02.MS.Internal.Error, "BadPropertyValue", {
		"value": 2148468948}
);
Object.defineProperty($asm02.MS.Internal.Error, "RootNotCustom", {
		"value": 2148468949}
);
Object.defineProperty($asm02.MS.Internal.Error, "NamespaceNotSupported", {
		"value": 2148468950}
);
Object.defineProperty($asm02.MS.Internal.Error, "MissingDefaultNamespace", {
		"value": 2148468951}
);
Object.defineProperty($asm02.MS.Internal.Error, "InvalidXmlns", {
		"value": 2148468952}
);
Object.defineProperty($asm02.MS.Internal.Error, "InvalidClass", {
		"value": 2148468953}
);
Object.defineProperty($asm02.MS.Internal.Error, "ElevationStatusMustMatch", {
		"value": 2147483668}
);
Object.defineProperty($asm02.MS.Internal.Error, "CertificatesMustMatch", {
		"value": 2147483669}
);
Object.defineProperty($asm02.MS.Internal.Error, "AssemblyNotFound", {
		"value": 2148468955}
);
Object.defineProperty($asm02.MS.Internal.Error, "InvalidContent", {
		"value": 2148468956}
);
Object.defineProperty($asm02.MS.Internal.Error, "PropertyReadOnly", {
		"value": 2148468957}
);
Object.defineProperty($asm02.MS.Internal.Error, "LocalMessageExistingReceiver", {
		"value": 2281703777}
);
Object.defineProperty($asm02.MS.Internal.Error, "NERInvalidOperation", {
		"value": 2148470784}
);
Object.defineProperty($asm02.MS.Internal.Error, "NERArgumentException", {
		"value": 2148470785}
);
Object.defineProperty($asm02.MS.Internal.Error, "FailManaged", {
		"value": 2148474880}
);
Object.defineProperty($asm02.MS.Internal.Error, "RuntimeOldVersion", {
		"value": 2147483652}
);
Object.defineProperty($asm02.MS.Internal.Error, "RuntimeNewVersion", {
		"value": 2147483653}
);
Object.defineProperty($asm02.MS.Internal.Error, "Unexpected", {
		"value": 2147549183}
);
Object.defineProperty($asm02.MS.Internal.Error, "NotImpl", {
		"value": 2147500033}
);
Object.defineProperty($asm02.MS.Internal.Error, "OutOfMemory", {
		"value": 2147942414}
);
Object.defineProperty($asm02.MS.Internal.Error, "InvalidArg", {
		"value": 2147942487}
);
Object.defineProperty($asm02.MS.Internal.Error, "NoInterface", {
		"value": 2147500034}
);
Object.defineProperty($asm02.MS.Internal.Error, "InvalidPointer", {
		"value": 2147500035}
);
Object.defineProperty($asm02.MS.Internal.Error, "InvalidHandle", {
		"value": 2147942406}
);
Object.defineProperty($asm02.MS.Internal.Error, "Abort", {
		"value": 2147500036}
);
Object.defineProperty($asm02.MS.Internal.Error, "Fail", {
		"value": 2147500037}
);
Object.defineProperty($asm02.MS.Internal.Error, "AccessDenied", {
		"value": 2147942405}
);
Object.defineProperty($asm02.MS.Internal.Error, "Pending", {
		"value": 2147483658}
);
Object.defineProperty($asm02.MS.Internal.Error, "ResourceKeyConflict", {
		"value": 2148468994}
);
Object.defineProperty($asm02.MS.Internal.Error, "InheritanceContextNeeded", {
		"value": 2148468997}
);
Object.defineProperty($asm02.MS.Internal.Error, "NotSupported", {
		"value": 2148734229}
);
Object.defineProperty($asm02.MS.Internal.Error, "AppServiceIntfNotImplemented", {
		"value": 2148468958}
);
Object.defineProperty($asm02.MS.Internal.Error, "LayoutCycle", {
		"value": 2281705384}
);
Object.defineProperty($asm02.MS.Internal.Error, "NotOutOfBrowser", {
		"value": 2281705392}
);
Object.defineProperty($asm02.MS.Internal.Error, "DRMMSPRErrorMask", {
		"value": 2147792896}
);
Object.defineProperty($asm02.MS.Internal.Error, "DRMSLErrorMask", {
		"value": 3222142976}
);
Object.defineProperty($asm02.MS.Internal.Error, "DRMContentNotProtected", {
		"value": 3222093466}
);
Object.defineProperty($asm02.MS.Internal.Error, "DRMNoRights", {
		"value": 2147792939}
);
Object.defineProperty($asm02.MS.Internal.Error, "DRMNeedsIndiv", {
		"value": 2147792930}
);
Object.defineProperty($asm02.MS.Internal.Error, "MSSUnexpectedSeekReport", {
		"value": 3222208256}
);
Object.defineProperty($asm02.MS.Internal.Error, "MSSUnexpectedSampleReport", {
		"value": 3222208257}
);
Object.defineProperty($asm02.MS.Internal.Error, "ComAutomationFeatureBlocked", {
		"value": 2152726529}
);
Object.defineProperty($asm02.MS.Internal.Error, "ComAutomationProgIDNotRegistered", {
		"value": 2152726530}
);
Object.defineProperty($asm02.MS.Internal.Error, "ComAutomationCreateInstance", {
		"value": 2152726531}
);
Object.defineProperty($asm02.MS.Internal.Error, "ComAutomationGetActiveObject", {
		"value": 2152726532}
);
Object.defineProperty($asm02.MS.Internal.Error, "ComAutomationNoEvent", {
		"value": 2152726533}
);
Object.defineProperty($asm02.MS.Internal.Error, "ComAutomationCrossApartmentAccess", {
		"value": 2152726534}
);
$asm02.MS.Internal.Error._theException = null;

$asm02.MS.Internal.WrappedException.prototype._ctor = function (message, innerException) {
	System.Exception.prototype._ctor.call(this, message, innerException);
};

$asm02.MS.Internal.NativeParseException.prototype._ctor = function (innerException, resourceKey, arguments) {
	System.Exception.prototype._ctor.call(this, $asm02.System.Windows.Resx.GetString$0(resourceKey, arguments), innerException);
};
$asm02.MS.Internal.NativeParseException.prototype.toString = function () {
	return this.Message;
};

System.Windows.Markup.XamlParseException.CreateFromCore = function (hr) {
	var text = new JSIL.Variable(null), num = new JSIL.Variable(0), num2 = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.GetErrorDetails(/* ref */ text, /* ref */ num, /* ref */ num2);
	var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
	stringBuilder.AppendFormat$0("{0} [Line: {1} Position: {2}]", [text.value, num.value, num2.value]);
	var result = new System.Windows.Markup.XamlParseException(num.value, num2.value, hr, stringBuilder.toString(), $asm02.MS.Internal.Error.TheException);
	$asm02.MS.Internal.Error.ClearException();
	return result;
};
System.Windows.Markup.XamlParseException.prototype._ctor = function (lineNumber, linePosition, errorCode, message, innerException) {
	System.SystemException.prototype._ctor$2.call(this, message, innerException);
	this._lineNumber = lineNumber;
	this._linePosition = linePosition;
	this._errorCode = errorCode;
};
System.Windows.Markup.XamlParseException.prototype.get_LineNumber = function () {
	return this._lineNumber;
};
System.Windows.Markup.XamlParseException.prototype.get_LinePosition = function () {
	return this._linePosition;
};
System.Windows.Markup.XamlParseException.prototype.get_ErrorCode = function () {
	return this._errorCode;
};
JSIL.MakeProperty(System.Windows.Markup.XamlParseException.prototype, "LineNumber", 
	System.Windows.Markup.XamlParseException.prototype.get_LineNumber, null);
JSIL.MakeProperty(System.Windows.Markup.XamlParseException.prototype, "LinePosition", 
	System.Windows.Markup.XamlParseException.prototype.get_LinePosition, null);
JSIL.MakeProperty(System.Windows.Markup.XamlParseException.prototype, "ErrorCode", 
	System.Windows.Markup.XamlParseException.prototype.get_ErrorCode, null);
System.Windows.Markup.XamlParseException.prototype._lineNumber = 0;
System.Windows.Markup.XamlParseException.prototype._linePosition = 0;
System.Windows.Markup.XamlParseException.prototype._errorCode = 0;

$asm02.MS.Internal.XSIZEF.prototype.width = 0;
$asm02.MS.Internal.XSIZEF.prototype.height = 0;

$asm02.MS.Internal.XGRIDLENGTH.prototype.type = 0;
$asm02.MS.Internal.XGRIDLENGTH.prototype.value = 0;

$asm02.MS.Internal.CValue.prototype.get_Count = function () {
	return (this.m_count_type & $asm02.MS.Internal.CValue.m_countMask);
};
$asm02.MS.Internal.CValue.prototype.set_Count = function (value) {
	this.m_count_type = ((value & $asm02.MS.Internal.CValue.m_countMask) | (this.m_count_type & ~$asm02.MS.Internal.CValue.m_countMask));
};
$asm02.MS.Internal.CValue.prototype.get_Type = function () {
	return ((this.m_count_type & $asm02.MS.Internal.CValue.m_typeMask) >>> ($asm02.MS.Internal.CValue.m_typeBitShift & 31));
};
$asm02.MS.Internal.CValue.prototype.set_Type = function (value) {
	var num = (Math.floor(value) << ($asm02.MS.Internal.CValue.m_typeBitShift & 31));
	this.m_count_type = (((this.m_count_type & $asm02.MS.Internal.CValue.m_countMask) | num) | (this.m_count_type & $asm02.MS.Internal.CValue.m_needsFreeValuePointerMask));
};
$asm02.MS.Internal.CValue.prototype.get_NeedsFreeValuePointer = function () {
	return ((this.m_count_type & $asm02.MS.Internal.CValue.m_needsFreeValuePointerMask) !== 0);
};
$asm02.MS.Internal.CValue.prototype.set_NeedsFreeValuePointer = function (value) {
	if (value) {
		this.m_count_type = (this.m_count_type | $asm02.MS.Internal.CValue.m_needsFreeValuePointerMask);
		return;
	}
	this.m_count_type = (this.m_count_type & ~$asm02.MS.Internal.CValue.m_needsFreeValuePointerMask);
};
$asm02.MS.Internal.CValue.prototype.SetCountAndType = function (count, type) {
	var num2 = (Math.floor(type) << ($asm02.MS.Internal.CValue.m_typeBitShift & 31));
	this.m_count_type = ((count & $asm02.MS.Internal.CValue.m_countMask) | num2);
};
$asm02.MS.Internal.CValue.prototype.SetValue = JSIL.UntranslatableFunction("System.Void MS.Internal.CValue::SetValue(System.Object)");
JSIL.MakeProperty($asm02.MS.Internal.CValue.prototype, "Count", 
	$asm02.MS.Internal.CValue.prototype.get_Count, $asm02.MS.Internal.CValue.prototype.set_Count);
JSIL.MakeProperty($asm02.MS.Internal.CValue.prototype, "Type", 
	$asm02.MS.Internal.CValue.prototype.get_Type, $asm02.MS.Internal.CValue.prototype.set_Type);
JSIL.MakeProperty($asm02.MS.Internal.CValue.prototype, "NeedsFreeValuePointer", 
	$asm02.MS.Internal.CValue.prototype.get_NeedsFreeValuePointer, $asm02.MS.Internal.CValue.prototype.set_NeedsFreeValuePointer);
$asm02.MS.Internal.CValue.prototype.m_count_type = 0;
$asm02.MS.Internal.CValue.prototype.m_eValue = 0;
$asm02.MS.Internal.CValue.prototype.m_iValue = 0;
$asm02.MS.Internal.CValue.prototype.m_nValue = 0;
$asm02.MS.Internal.CValue.prototype.m_pdoValue = 0;
$asm02.MS.Internal.CValue.prototype.m_psoValue = 0;
$asm02.MS.Internal.CValue.prototype.m_pvValue = 0;
$asm02.MS.Internal.CValue.m_countMask = 0;
$asm02.MS.Internal.CValue.m_typeMask = 0;
$asm02.MS.Internal.CValue.m_needsFreeValuePointerMask = 0;
$asm02.MS.Internal.CValue.m_typeBitShift = 0;
MS.Internal.CValue._cctor = function () {
	MS.Internal.CValue.m_countMask = 16777215;
	MS.Internal.CValue.m_typeMask = 2130706432;
	MS.Internal.CValue.m_needsFreeValuePointerMask = -2147483648;
	MS.Internal.CValue.m_typeBitShift = 24;
};

$asm02.MS.Internal.PointF.prototype.x = 0;
$asm02.MS.Internal.PointF.prototype.y = 0;

$asm02.MS.Internal.RectF.prototype.x = 0;
$asm02.MS.Internal.RectF.prototype.y = 0;
$asm02.MS.Internal.RectF.prototype.width = 0;
$asm02.MS.Internal.RectF.prototype.height = 0;

$asm02.MS.Internal.XcpImports.ConvertDO = function ($doPointer, typeIndex, releaseObjectReference) {
	var doPointer = new JSIL.Variable($doPointer);
	var result = null;
	if (System.IntPtr.op_Inequality(doPointer.value, System.IntPtr.Zero)) {
		result = $asm02.MS.Internal.ManagedPeerTable.EnsureManagedPeer$0(doPointer.value, typeIndex, null);
		if (releaseObjectReference) {
			$asm02.MS.Internal.XcpImports.ReleaseNativeObject$1(/* ref */ doPointer);
		}
	}
	return result;
};
$asm02.MS.Internal.XcpImports.DependencyObject_FindName = function (referenceDO, name) {
	var typeIndex = new JSIL.Variable(0), doPointer = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	if (name === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["name"]);
	}
	var num = $asm02.MS.Internal.XcpImports.FindNameNative(
		$asm02.MS.Internal.JoltHelper.Context, 
		name.length, 
		name, 
		referenceDO.NativeObject, 
		/* ref */ typeIndex, 
		/* ref */ doPointer
	);
	System.GC.KeepAlive(referenceDO);
	if (!((num === 0) || (num === -2147467259))) {
		throw $asm02.MS.Internal.Error.MarshalXresultAsException$0(num);
	}
	return JSIL.Cast($asm02.MS.Internal.XcpImports.ConvertDO(doPointer.value, typeIndex.value, true), System.Windows.DependencyObject);
};
$asm02.MS.Internal.XcpImports.Application_GetVisualRoot = function () {
	var typeIndex = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	var outVal = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.GetVisualRootNative($asm02.MS.Internal.JoltHelper.Context, /* ref */ outVal, /* ref */ typeIndex));
	return JSIL.Cast($asm02.MS.Internal.XcpImports.ConvertType$0(outVal.value.MemberwiseClone(), typeIndex.value, true, null), System.Windows.DependencyObject);
};
$asm02.MS.Internal.XcpImports.CreateObjectByTypeIndexWithDO = function (typeIndex, pDO) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var zero = new JSIL.Variable(System.IntPtr.Zero);
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.CreateObjectByTypeIndexWithDONative($asm02.MS.Internal.JoltHelper.Context, typeIndex, pDO, /* ref */ zero));
	return zero.value;
};
$asm02.MS.Internal.XcpImports.GetManagedPropertyValueFromStyle = function (useBuiltInStyle, obj, property, /* ref */ value) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var cValue = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	var outDOType = new JSIL.Variable(0);
	var flag = new JSIL.Variable(false);
	value.value = null;
	if ($asm02.MS.Internal.QuirksMode.ShouldUseXamlPropertyTokenForProperties()) {
		var propertyToken = $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetPropertyToken$2(property).MemberwiseClone();
		if (JSIL.Cast(propertyToken._handle.TypeInfoProviderKind, System.Boolean)) {
			$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.GetManagedPropertyValueFromStyleNative(
					useBuiltInStyle, 
					obj.IManagedPeerBase_NativeObject, 
					propertyToken.MemberwiseClone(), 
					/* ref */ cValue, 
					/* ref */ outDOType, 
					/* ref */ flag
				));
			System.GC.KeepAlive(obj);
		}
	} else {
		$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.SL3GetManagedPropertyValueFromStyleNative(
				useBuiltInStyle, 
				obj.IManagedPeerBase_NativeObject, 
				property.m_nKnownId, 
				/* ref */ cValue, 
				/* ref */ outDOType, 
				/* ref */ flag
			));
		System.GC.KeepAlive(obj);
	}
	if (flag.value) {
		var type = cValue.value.Type;
		if (type === MS.Internal.VType.valueString) {
			var propertyType = property._propertyType;
			var text = JSIL.Cast(JSIL.IgnoredMember(".ctor(value)"), System.String);
			$asm02.MS.Internal.XcpImports.ReleaseNativeValue(JSIL.IgnoredMember(".ctor(value)"), Math.floor(type));
			if (!(!propertyType.Equals$1(System.String) && !propertyType.Equals$1(System.Object))) {
				value.value = text;
			} else {
				var typeConverterForProperty = $asm02.MS.Internal.FrameworkCallbacks.GetTypeConverterForProperty(property);
				value.value = typeConverterForProperty.ConvertFrom$1(null, $asm02.MS.Internal.XcpImports.EnglishUSCulture, text);
			}
		} else {
			value.value = $asm02.MS.Internal.XcpImports.ConvertCValueForManaged(property, /* ref */ cValue, outDOType.value, obj);
		}
	}
	return flag.value;
};
$asm02.MS.Internal.XcpImports.TryConvertPseudoEnum = function (typeHandle, value, /* ref */ result) {
	var result2 = false;
	if (typeHandle.Equals$1(System.Windows.FontStretch.TypeHandle.MemberwiseClone())) {
		var stretch = JSIL.Cast(System.Enum.ToObject$0($asm02.System.Windows.FontStretchType, value), $asm02.System.Windows.FontStretchType);
		result.value = System.Windows.FontStretches.EnsureFontStretch(stretch);
		result2 = true;
	} else if (typeHandle.Equals$1(System.Windows.Input.Cursor.TypeHandle.MemberwiseClone())) {
		var cursorType = JSIL.Cast(System.Enum.ToObject$0($asm02.System.Windows.Input.CursorType, value), $asm02.System.Windows.Input.CursorType);
		result.value = System.Windows.Input.Cursors.EnsureCursor(cursorType);
		result2 = true;
	} else if (typeHandle.Equals$1(System.Windows.FontStyle.TypeHandle.MemberwiseClone())) {
		var style = JSIL.Cast(System.Enum.ToObject$0($asm02.System.Windows.FontStyleType, value), $asm02.System.Windows.FontStyleType);
		result.value = System.Windows.FontStyles.EnsureFontStyle(style);
		result2 = true;
	} else if (typeHandle.Equals$1(System.Windows.FontWeight.TypeHandle.MemberwiseClone())) {
		var weight = JSIL.Cast(System.Enum.ToObject$0($asm02.System.Windows.FontWeightType, value), $asm02.System.Windows.FontWeightType);
		result.value = System.Windows.FontWeights.EnsureFontWeight(weight);
		result2 = true;
	} else if (typeHandle.Equals$1(System.Windows.TextDecorationCollection.TypeHandle.MemberwiseClone())) {
		var textDecorationLocation = JSIL.Cast(System.Enum.ToObject$0($asm02.System.Windows.TextDecorationLocation, value), $asm02.System.Windows.TextDecorationLocation);
		var textDecorationCollection = null;
		if (textDecorationLocation === $asm02.System.Windows.TextDecorationLocation.Underline) {
			textDecorationCollection = System.Windows.TextDecorations.Underline;
		}
		result.value = textDecorationCollection;
		result2 = true;
	}
	return result2;
};
$asm02.MS.Internal.XcpImports.ConvertCValueForManaged = function (property, /* ref */ outVal, outDOType, fromObject) {
	return $asm02.MS.Internal.XcpImports.ConvertCValueForManagedWithType$2(
		property._propertyType, 
		/* ref */ outVal, 
		outDOType, 
		true, 
		true, 
		fromObject
	);
};
$asm02.MS.Internal.XcpImports.ConvertCValueForManagedWithType$0 = function (propertyType, /* ref */ outVal, outDOType, fromObject) {
	return $asm02.MS.Internal.XcpImports.ConvertCValueForManagedWithType$2(
		propertyType, 
		/* ref */ outVal, 
		outDOType, 
		true, 
		true, 
		fromObject
	);
};
$asm02.MS.Internal.XcpImports.ConvertCValueForManagedWithType$1 = function (propertyType, /* ref */ outVal, outDOType, releaseObjectReference, fromValue) {
	return $asm02.MS.Internal.XcpImports.ConvertCValueForManagedWithType$2(
		propertyType, 
		/* ref */ outVal, 
		outDOType, 
		releaseObjectReference, 
		false, 
		fromValue
	);
};
$asm02.MS.Internal.XcpImports.ConvertCValueForManagedWithType$2 = function (propertyType, /* ref */ outVal, outDOType, releaseObjectReference, deleteBuffer, fromObject) {
	var type = propertyType;
	var result = new JSIL.Variable(null);
	if (propertyType !== null) {
		if (!(!propertyType.IsGenericType || (propertyType.GetGenericTypeDefinition() !== System.Nullable$b1))) {
			type = System.Nullable.GetUnderlyingType(propertyType);
		}
		var typeHandle = type.TypeHandle.MemberwiseClone();
	} else {
		typeHandle = $asm02.MS.Internal.XcpImports.TypeHandle.MemberwiseClone();
	}
	if (!((outVal.value.Type !== MS.Internal.VType.valueEnum) || !$asm02.MS.Internal.XcpImports.TryConvertPseudoEnum(typeHandle.MemberwiseClone(), outVal.value.m_nValue, /* ref */ result))) {
		return result.value;
	}
	if (outVal.value.Type === MS.Internal.VType.valueEnum) {
		if (type !== null) {
			if (type.IsEnum) {
				return $asm02.MS.Internal.XcpImports.ConvertEnumWithType(outVal.value.MemberwiseClone(), type);
			}
			if (typeHandle.Equals$1(System.Boolean.TypeHandle.MemberwiseClone())) {
				return System.Convert.ToBoolean$9(outVal.value.m_nValue);
			}
		}
		return $asm02.MS.Internal.XcpImports.ConvertType$1(
			outVal.value.MemberwiseClone(), 
			outDOType, 
			false, 
			false, 
			fromObject
		);
	}
	if (outVal.value.Type === MS.Internal.VType.valueBool) {
		return $asm02.MS.Internal.XcpImports.ConvertType$1(
			outVal.value.MemberwiseClone(), 
			outDOType, 
			false, 
			false, 
			fromObject
		);
	}
	var obj = $asm02.MS.Internal.XcpImports.ConvertType$1(
		outVal.value.MemberwiseClone(), 
		outDOType, 
		false, 
		false, 
		fromObject
	);
	if (!(!((outDOType !== 112) && 
				typeHandle.Equals$1(System.Object.TypeHandle.MemberwiseClone())) && ((obj === null) || 
				!typeHandle.Equals$1(JSIL.GetType(obj).TypeHandle.MemberwiseClone())))) {
		$asm02.MS.Internal.XcpImports.ReleaseValue(/* ref */ outVal, releaseObjectReference, deleteBuffer);
		return obj;
	}
	if (!((outDOType !== 112) && !typeHandle.Equals$1(System.Windows.Media.FontFamily.TypeHandle.MemberwiseClone()))) {
		if (outVal.value.Type === MS.Internal.VType.valueObject) {
			$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.FontFamily_GetFamilyNameNative(/* ref */ outVal));
		}
		var text = JSIL.Cast($asm02.MS.Internal.XcpImports.ConvertType$1(
				outVal.value.MemberwiseClone(), 
				outDOType, 
				releaseObjectReference, 
				deleteBuffer, 
				fromObject
			), System.String);
		var result2 = null;
		if (!System.String.IsNullOrEmpty(text)) {
			result2 = new System.Windows.Media.FontFamily(text);
		}
		return result2;
	}
	$asm02.MS.Internal.XcpImports.ReleaseValue(/* ref */ outVal, releaseObjectReference, deleteBuffer);
	if (typeHandle.Equals$1(System.Windows.Media.Matrix.TypeHandle.MemberwiseClone())) {
		return System.Windows.Media.Matrix.Create(obj);
	}
	if (typeHandle.Equals$1(System.Windows.Media.Media3D.Matrix3D.TypeHandle.MemberwiseClone())) {
		return System.Windows.Media.Media3D.Matrix3D.Create(obj);
	}
	if (typeHandle.Equals$1(System.Windows.Media.Animation.RepeatBehavior.TypeHandle.MemberwiseClone())) {
		return System.Windows.Media.Animation.RepeatBehavior.Create(obj);
	}
	if (typeHandle.Equals$1(System.Windows.Media.Animation.KeyTime.TypeHandle.MemberwiseClone())) {
		return System.Windows.Media.Animation.KeyTime.Create(obj);
	}
	if (typeHandle.Equals$1(System.Windows.Duration.TypeHandle.MemberwiseClone())) {
		return System.Windows.Duration.Create(obj);
	}
	if (typeHandle.Equals$1(System.Uri.TypeHandle.MemberwiseClone())) {
		if (obj === null) {
			return null;
		}
		return JSIL.New(System.Uri, "_ctor$1", [JSIL.Cast(obj, System.String), System.UriKind.RelativeOrAbsolute]);
	} else if (typeHandle.Equals$1(System.Windows.PropertyPath.TypeHandle.MemberwiseClone())) {
		if (obj === null) {
			return null;
		}
		return JSIL.New(System.Windows.PropertyPath, "_ctor$0", [JSIL.Cast(obj, System.String), JSIL.Array.New(System.Object, 0)]);
	} else if (typeHandle.Equals$1(System.TimeSpan.TypeHandle.MemberwiseClone())) {
		if (obj === null) {
			return new System.TimeSpan();
		}
		return System.TimeSpan.FromSeconds(JSIL.Cast(obj, System.Double));
	} else if (typeHandle.Equals$1(System.Windows.Duration.TypeHandle.MemberwiseClone())) {
		if (obj === null) {
			return System.Windows.Duration.Automatic;
		}
		return new System.Windows.Duration(System.TimeSpan.FromSeconds(JSIL.Cast(obj, System.Double)));
	} else if (typeHandle.Equals$1(System.Windows.RoutedEvent.TypeHandle.MemberwiseClone())) {
		var text2 = JSIL.TryCast(obj, System.String);
		if (!((obj !== null) && text2)) {
			return null;
		}
		return System.Windows.FrameworkElement.LoadedEvent;
	} else if (typeHandle.Equals$1(System.Char.TypeHandle.MemberwiseClone())) {
		var text3 = JSIL.TryCast(obj, System.String);
		if (System.String.IsNullOrEmpty(text3)) {
			return "\0";
		}
		return text3[0];
	} else {
		if (!typeHandle.Equals$1(System.Windows.Markup.XmlLanguage.TypeHandle.MemberwiseClone())) {
			return obj;
		}
		if (obj === null) {
			return null;
		}
		return System.Windows.Markup.XmlLanguage.GetLanguage(JSIL.Cast(obj, System.String));
	}
};
$asm02.MS.Internal.XcpImports.SetValueWithDoublePrecision$0 = JSIL.UntranslatableFunction("System.Void MS.Internal.XcpImports::SetValueWithDoublePrecision(MS.Internal.IManagedPeerBase,System.Windows.DependencyProperty,System.Double)");
$asm02.MS.Internal.XcpImports.SetValueWithDoublePrecision$1 = JSIL.UntranslatableFunction("System.Void MS.Internal.XcpImports::SetValueWithDoublePrecision(MS.Internal.IManagedPeerBase,System.Windows.DependencyProperty,System.Windows.Point)");
$asm02.MS.Internal.XcpImports.ClearValue = function (doh, property) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.ClearValueNative(doh.IManagedPeerBase_NativeObject, property.m_nKnownId));
	System.GC.KeepAlive(doh);
};
$asm02.MS.Internal.XcpImports.DependencyObject_ReadLocalValue = function (doh, property) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var cValue = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	var outDOType = new JSIL.Variable(0);
	var num = new JSIL.Variable(0);
	var num2 = new JSIL.Variable(0);
	var nKnownId = JSIL.TryCast(property, $asm02.System.Windows.CoreDependencyProperty).m_nKnownId;
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.ReadLocalValueNative(
			doh.NativeObject, 
			nKnownId, 
			/* ref */ cValue, 
			/* ref */ outDOType, 
			/* ref */ num, 
			/* ref */ num2
		));
	System.GC.KeepAlive(doh);
	if (num.value === 0) {
		return System.Windows.DependencyProperty.UnsetValue;
	}
	if (num2.value !== 0) {
		return JSIL.New(System.Windows.TemplateBindingExpression, "_ctor$0", []);
	}
	return $asm02.MS.Internal.XcpImports.ConvertCValueForManaged(property, /* ref */ cValue, outDOType.value, doh);
};
$asm02.MS.Internal.XcpImports.DependencyObject_IsPropertyDefault = function (doh, property) {
	var result = new JSIL.Variable(false);
	$asm02.MS.Internal.XcpImports.CheckThread();
	var nKnownId = JSIL.TryCast(property, $asm02.System.Windows.CoreDependencyProperty).m_nKnownId;
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.IsPropertyDefaultNative(doh.NativeObject, nKnownId, /* ref */ result));
	System.GC.KeepAlive(doh);
	return result.value;
};
$asm02.MS.Internal.XcpImports.DependencyObject_GetAnimationBaseValue = function (doh, property) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var outVal = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.GetAnimationBaseValueNative(doh.NativeObject, property.m_nKnownId, /* ref */ outVal));
	System.GC.KeepAlive(doh);
	return $asm02.MS.Internal.XcpImports.ConvertType$0(outVal.value.MemberwiseClone(), 0, true, doh);
};
$asm02.MS.Internal.XcpImports.DependencyObject_GetMentor = function (doh) {
	var nativeObject = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.GetMentorNative(doh.NativeObject, /* ref */ nativeObject));
	System.GC.KeepAlive(doh);
	return JSIL.Cast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeObject.value), System.Windows.FrameworkElement);
};
$asm02.MS.Internal.XcpImports.DependencyObject_SetParentForInheritanceContextOnly = function (doh, parentDO) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.SetParentForInheritanceContextOnlyNative(doh.NativeObject, (parentDO === null) ? System.IntPtr.Zero : parentDO.NativeObject));
	System.GC.KeepAlive(doh);
	System.GC.KeepAlive(parentDO);
};
$asm02.MS.Internal.XcpImports.GetDownloaderBytes = function (element, /* ref */ outBytes, /* ref */ outSize) {
	var globalLock = null;
	System.Threading.Monitor.Enter((globalLock = $asm02.MS.Internal.XcpImports._globalLock));
	try {
		$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.GetDownloaderBytesNative(element, /* ref */ outBytes, /* ref */ outSize));
	} finally {
		System.Threading.Monitor.Exit(globalLock);
	}
};
$asm02.MS.Internal.XcpImports.GetRequestStream = function (element, /* ref */ outStream) {
	var globalLock = null;
	System.Threading.Monitor.Enter((globalLock = $asm02.MS.Internal.XcpImports._globalLock));
	try {
		$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.GetRequestStreamNative(element, /* ref */ outStream));
	} finally {
		System.Threading.Monitor.Exit(globalLock);
	}
};
$asm02.MS.Internal.XcpImports.Application_GetResourceStream$0 = function (app, stream, uri) {
	var intPtr = new JSIL.Variable(0), size = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.Application_GetResourceStreamNative(
		app.IManagedPeerBase_NativeObject, 
		stream.NativeObject, 
		uri.OriginalString.length, 
		uri.OriginalString, 
		/* ref */ intPtr, 
		/* ref */ size
	);
	System.GC.KeepAlive(app);
	System.GC.KeepAlive(stream);
	if (System.IntPtr.op_Inequality(intPtr.value, System.IntPtr.Zero)) {
		return new $asm02.MS.Internal.InternalMemoryStream(intPtr.value, size.value, uri);
	}
	return null;
};
$asm02.MS.Internal.XcpImports.Application_GetResourceStream$1 = JSIL.UntranslatableFunction("System.IO.Stream MS.Internal.XcpImports::Application_GetResourceStream(System.Windows.Application,System.UInt32,System.Byte[],System.Uri)");
$asm02.MS.Internal.XcpImports.Deployment_SetCurrentApplication = function (app) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Deployment_SetCurrentApplicationNative($asm02.MS.Internal.JoltHelper.Context, app.IManagedPeerBase_NativeObject));
	System.GC.KeepAlive(app);
};
$asm02.MS.Internal.XcpImports.Application_GetResourceFromApplication = function (app, resourceUri) {
	var intPtr = new JSIL.Variable(0), size = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.Application_GetResourceFromApplicationNative(
		app.IManagedPeerBase_NativeObject, 
		resourceUri.OriginalString.length, 
		resourceUri.OriginalString, 
		/* ref */ intPtr, 
		/* ref */ size
	);
	System.GC.KeepAlive(app);
	if (System.IntPtr.op_Inequality(intPtr.value, System.IntPtr.Zero)) {
		return new $asm02.MS.Internal.InternalMemoryStream(intPtr.value, size.value, resourceUri);
	}
	return null;
};
$asm02.MS.Internal.XcpImports.ReleaseInternalMemory = function (element) {
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.ReleaseInternalMemoryNative(element));
};
$asm02.MS.Internal.XcpImports.ReleaseInternalStream = function (element) {
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.ReleaseInternalStreamNative(element));
};
$asm02.MS.Internal.XcpImports.ReadInternalMemory = function (element, offset, len, /* ref */ pBytes, /* ref */ bytesRead) {
	var globalLock = null;
	System.Threading.Monitor.Enter((globalLock = $asm02.MS.Internal.XcpImports._globalLock));
	try {
		$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.ReadInternalMemoryNative(
				element, 
				offset, 
				len, 
				/* ref */ pBytes, 
				/* ref */ bytesRead
			));
	} finally {
		System.Threading.Monitor.Exit(globalLock);
	}
};
$asm02.MS.Internal.XcpImports.ReadInternalStream = function (element, len, /* ref */ pMemRef, /* ref */ pBytes, /* ref */ bytesRead) {
	var globalLock = null;
	System.Threading.Monitor.Enter((globalLock = $asm02.MS.Internal.XcpImports._globalLock));
	try {
		$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.ReadInternalStreamNative(
				element, 
				len, 
				/* ref */ pMemRef, 
				/* ref */ pBytes, 
				/* ref */ bytesRead
			));
	} finally {
		System.Threading.Monitor.Exit(globalLock);
	}
};
$asm02.MS.Internal.XcpImports.GetStreamPosition = function (element, /* ref */ position) {
	var globalLock = null;
	System.Threading.Monitor.Enter((globalLock = $asm02.MS.Internal.XcpImports._globalLock));
	try {
		$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.GetStreamPositionNative(element, /* ref */ position));
	} finally {
		System.Threading.Monitor.Exit(globalLock);
	}
};
$asm02.MS.Internal.XcpImports.SeekInternalStream = function (element, offset, origin, /* ref */ newPosition) {
	var globalLock = null;
	System.Threading.Monitor.Enter((globalLock = $asm02.MS.Internal.XcpImports._globalLock));
	try {
		$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.SeekInternalStreamNative(element, offset, Math.floor(origin), /* ref */ newPosition));
	} finally {
		System.Threading.Monitor.Exit(globalLock);
	}
};
$asm02.MS.Internal.XcpImports.FrameworkElement_MeasureOverride = function (element, availableSize) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var num = new JSIL.Variable(0);
	var num2 = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.MeasureOverrideNative(
			element.NativeObject, 
			availableSize.Width, 
			availableSize.Height, 
			/* ref */ num, 
			/* ref */ num2
		));
	System.GC.KeepAlive(element);
	return new System.Windows.Size(num.value, num2.value);
};
$asm02.MS.Internal.XcpImports.FrameworkElement_ArrangeOverride = function (element, finalSize) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var num = new JSIL.Variable(0);
	var num2 = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.ArrangeOverrideNative(
			element.NativeObject, 
			finalSize.Width, 
			finalSize.Height, 
			/* ref */ num, 
			/* ref */ num2
		));
	System.GC.KeepAlive(element);
	return new System.Windows.Size(num.value, num2.value);
};
$asm02.MS.Internal.XcpImports.UIElement_BringIntoView = function (element, rectangle) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var ptHit = new $asm02.MS.Internal.RectF();
	ptHit.x = rectangle.X;
	ptHit.y = rectangle.Y;
	ptHit.width = rectangle.Width;
	ptHit.height = rectangle.Height;
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.UIElement_BringIntoViewNative(element.NativeObject, ptHit.MemberwiseClone()));
	System.GC.KeepAlive(element);
};
$asm02.MS.Internal.XcpImports.UIElement_Measure = function (element, availableSize) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.MeasureNative(element.NativeObject, availableSize.Width, availableSize.Height));
	System.GC.KeepAlive(element);
};
$asm02.MS.Internal.XcpImports.UIElement_Arrange = function (element, finalRect) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.ArrangeNative(
			element.NativeObject, 
			finalRect.X, 
			finalRect.Y, 
			finalRect.Width, 
			finalRect.Height
		));
	System.GC.KeepAlive(element);
};
$asm02.MS.Internal.XcpImports.UIElement_GetDesiredSize = function (element) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var num = new JSIL.Variable(0);
	var num2 = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.GetDesiredSizeNative(element.NativeObject, /* ref */ num, /* ref */ num2));
	System.GC.KeepAlive(element);
	return new System.Windows.Size(num.value, num2.value);
};
$asm02.MS.Internal.XcpImports.MethodEx$0 = JSIL.UntranslatableFunction("System.Object MS.Internal.XcpImports::MethodEx(System.IntPtr,System.String,MS.Internal.CValue[])");
$asm02.MS.Internal.XcpImports.MethodEx$1 = function (obj, name) {
	var result = $asm02.MS.Internal.XcpImports.MethodEx$0(obj.NativeObject, name, null);
	System.GC.KeepAlive(obj);
	return result;
};
$asm02.MS.Internal.XcpImports.PackDependencyObject = function (ptr) {
	var result = new $asm02.MS.Internal.CValue();
	result.SetCountAndType(1, MS.Internal.VType.valueObject);
	result.m_pdoValue = ptr.ToInt32();
	return result;
};
$asm02.MS.Internal.XcpImports.PackDouble = function (value) {
	var result = new $asm02.MS.Internal.CValue();
	result.SetCountAndType(1, MS.Internal.VType.valueFloat);
	result.m_eValue = value;
	return result;
};
$asm02.MS.Internal.XcpImports.MethodPack = JSIL.UntranslatableFunction("System.Object MS.Internal.XcpImports::MethodPack(System.IntPtr,System.String,System.Object[])");
$asm02.MS.Internal.XcpImports.AddEventListener = JSIL.UntranslatableFunction("System.Void MS.Internal.XcpImports::AddEventListener(MS.Internal.IManagedPeerBase,System.Windows.DependencyProperty,System.String,System.Boolean)");
$asm02.MS.Internal.XcpImports.RemoveEventListener = JSIL.UntranslatableFunction("System.Void MS.Internal.XcpImports::RemoveEventListener(MS.Internal.IManagedPeerBase,System.Windows.DependencyProperty,System.String)");
$asm02.MS.Internal.XcpImports.CheckThread = function () {
	if (System.Threading.Thread.CurrentThread.ManagedThreadId !== $asm02.MS.Internal.JoltHelper.ThreadID) {
		throw JSIL.New(System.UnauthorizedAccessException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("InvalidCrossThreadAccess")]);
	}
};
$asm02.MS.Internal.XcpImports.OnMainThread = function () {
	return (System.Threading.Thread.CurrentThread.ManagedThreadId === $asm02.MS.Internal.JoltHelper.ThreadID);
};
$asm02.MS.Internal.XcpImports.CheckHResult = function (hr) {
	if (!((hr === 0) || 
			(hr === 1) || 
			(hr === -2147174366) || (hr === -2147174357))) {
		throw $asm02.MS.Internal.Error.MarshalXresultAsException$0(hr);
	}
	return hr;
};
$asm02.MS.Internal.XcpImports.CheckDRMHResult = function (hr) {
	if (!((hr === 0) || 
			(hr === 1) || 
			(hr === -2147174366) || (hr === -2147174357))) {
		throw $asm02.System.Windows.Media.DrmException.CreateDrmException(hr);
	}
	return hr;
};
$asm02.MS.Internal.XcpImports.ConvertEnum = function (outVal, property) {
	return $asm02.MS.Internal.XcpImports.ConvertEnumWithType(outVal, property._propertyType);
};
$asm02.MS.Internal.XcpImports.ConvertEnumWithType = function (outVal, PropertyType) {
	var nValue = outVal.m_nValue;
	return System.Enum.ToObject$0(PropertyType, nValue);
};
$asm02.MS.Internal.XcpImports.ConvertType$0 = function (outVal, typeIndex, releaseObjectReference, fromObject) {
	return $asm02.MS.Internal.XcpImports.ConvertType$1(
		outVal, 
		typeIndex, 
		releaseObjectReference, 
		true, 
		fromObject
	);
};
$asm02.MS.Internal.XcpImports.ConvertType$1 = JSIL.UntranslatableFunction("System.Object MS.Internal.XcpImports::ConvertType(MS.Internal.CValue,System.Int32,System.Boolean,System.Boolean,MS.Internal.IManagedPeerBase)");
$asm02.MS.Internal.XcpImports.ReleaseValue = function (/* ref */ outVal, releaseObjectReference, deleteBuffer) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var type = outVal.value.Type;
	switch (Number(type)) {
		case 6: 
			if (deleteBuffer) {
				$asm02.MS.Internal.XcpImports.ReleaseNativeValue(JSIL.IgnoredMember(".ctor(value)"), Math.floor(type));
			}
			break;
		case 7: 
		case 8: 
		case 9: 
		case 14: 
		case 16: 
		case 17: 
		case 19: 
		case 20: 
			if (deleteBuffer) {
				$asm02.MS.Internal.XcpImports.ReleaseNativeValue(JSIL.IgnoredMember(".ctor(value)"), Math.floor(type));
			}
			break;
		case 11: 
			if (releaseObjectReference) {
				$asm02.MS.Internal.XcpImports.ReleaseNativeValue(JSIL.New(System.IntPtr, "_ctor$0", [outVal.value.m_pdoValue]), Math.floor(type));
			}
			break;
		case 23: 
		case 24: 
			if (deleteBuffer) {
				$asm02.MS.Internal.XcpImports.ReleaseNativeValue(JSIL.IgnoredMember(".ctor(value)"), Math.floor(type));
			}
			break;
	}
	if (!(!deleteBuffer && !releaseObjectReference)) {
		outVal.value = new $asm02.MS.Internal.CValue();
	}
};
$asm02.MS.Internal.XcpImports.ConvertStringToTypedCValue = function (pContext, cClrTypeName, clrTypeName, cValue, value, /* ref */ outVal, /* ref */ typeIndex) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.ConvertStringToTypedCValueNative(
			pContext, 
			cClrTypeName, 
			clrTypeName, 
			cValue, 
			value, 
			/* ref */ outVal, 
			/* ref */ typeIndex
		));
};
$asm02.MS.Internal.XcpImports.GetAnimationTargetHandles = function (animation, /* ref */ targetElementToken, /* ref */ targetPropertyToken) {
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.GetAnimationTargetHandlesNative(animation.NativeObject, /* ref */ targetElementToken, /* ref */ targetPropertyToken));
	System.GC.KeepAlive(animation);
};
$asm02.MS.Internal.XcpImports.SetParticipatesInManagedTreeDefault = function (obj) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.SetParticipatesInManagedTreeDefaultNative(obj.IManagedPeerBase_NativeObject));
	System.GC.KeepAlive(obj);
};
$asm02.MS.Internal.XcpImports.DisconnectManagedPeer = function (managedPeer) {
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.DisconnectManagedPeerNative(managedPeer.IManagedPeerBase_NativeObject));
	System.GC.KeepAlive(managedPeer);
};
$asm02.MS.Internal.XcpImports.WantsEvent = function (element, eventId, flag) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.WantsEventNative(element.NativeObject, eventId, flag));
	System.GC.KeepAlive(element);
};
$asm02.MS.Internal.XcpImports.WantsEventStatic = function (eventId, flag) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.WantsEventStaticNative($asm02.MS.Internal.JoltHelper.Context, eventId, flag));
};
$asm02.MS.Internal.XcpImports.GetNativeTypeIndex = function (element) {
	return $asm02.MS.Internal.XcpImports.GetNativeTypeIndexNative(element);
};
$asm02.MS.Internal.XcpImports.AddRefNativeObject$0 = function (o) {
	$asm02.MS.Internal.XcpImports.AddRefNativeObjectNative(o.IManagedPeerBase_NativeObject);
	System.GC.KeepAlive(o);
};
$asm02.MS.Internal.XcpImports.AddRefNativeObject$1 = function (element) {
	$asm02.MS.Internal.XcpImports.AddRefNativeObjectNative(element);
};
$asm02.MS.Internal.XcpImports.ReleaseNativeObject$0 = function (managedPeer) {
	$asm02.MS.Internal.XcpImports.ReleaseMNative(managedPeer.IManagedPeerBase_NativeObject, 11);
	System.GC.KeepAlive(managedPeer);
};
$asm02.MS.Internal.XcpImports.ReleaseNativeObject$1 = function (/* ref */ element) {
	$asm02.MS.Internal.XcpImports.ReleaseMNative(element.value, 11);
	element.value = System.IntPtr.Zero;
};
$asm02.MS.Internal.XcpImports.ReleaseNativeValue = function (element, iType) {
	$asm02.MS.Internal.XcpImports.ReleaseMNative(element, iType);
};
$asm02.MS.Internal.XcpImports.CleanupNativePeers = function () {
	$asm02.MS.Internal.XcpImports.CleanupNativePeersNative($asm02.MS.Internal.JoltHelper.Context);
};
$asm02.MS.Internal.XcpImports.RenderTargetBitmapCreate = function (context, background, width, height, bits, /* ref */ nativePtr) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.RenderTargetBitmapCreateNative(
			context, 
			background, 
			0, 
			0, 
			width, 
			height, 
			bits, 
			/* ref */ nativePtr
		));
};
$asm02.MS.Internal.XcpImports.RenderTargetBitmapRender = function (bitmap, visual, /* ref */ dirtyX, /* ref */ dirtyY, /* ref */ dirtyWidth, /* ref */ dirtyHeight) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.RenderTargetBitmapRenderNative(
			bitmap.IManagedPeerBase_NativeObject, 
			visual.NativeObject, 
			/* ref */ dirtyX, 
			/* ref */ dirtyY, 
			/* ref */ dirtyWidth, 
			/* ref */ dirtyHeight
		));
	System.GC.KeepAlive(bitmap);
	System.GC.KeepAlive(visual);
};
$asm02.MS.Internal.XcpImports.DependencyObject_Enter = function (target, pNativeNamescope, bSkipNameRegistration, bCoercedIsEnabled, bUseLayoutRounding, bIsRightToLeft, nTextOptionsTextHintingMode) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.DependencyObject_EnterNative(
			target.NativeObject, 
			pNativeNamescope, 
			bSkipNameRegistration, 
			bCoercedIsEnabled, 
			bUseLayoutRounding, 
			bIsRightToLeft, 
			nTextOptionsTextHintingMode
		));
	System.GC.KeepAlive(target);
};
$asm02.MS.Internal.XcpImports.DependencyObject_Leave = function (target, pNativeNamescope, bSkipNameRegistration, bCoercedIsEnabled, bVisualTreeBeingReset, nTextOptionsTextHintingMode) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.DependencyObject_LeaveNative(
			target.NativeObject, 
			pNativeNamescope, 
			bSkipNameRegistration, 
			bCoercedIsEnabled, 
			bVisualTreeBeingReset, 
			nTextOptionsTextHintingMode
		));
	System.GC.KeepAlive(target);
};
$asm02.MS.Internal.XcpImports.CreateFromXaml$0 = function (xamlString, createNamescope, requireDefaultNamespace, allowEventHandlers, expandTemplatesDuringParse) {
	var typeIndex = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	var outVal = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	var num = $asm02.MS.Internal.XcpImports.CreateFromXamlNative(
		$asm02.MS.Internal.JoltHelper.Context, 
		xamlString.length, 
		xamlString, 
		createNamescope ? 1 : 0, 
		requireDefaultNamespace ? 1 : 0, 
		allowEventHandlers ? 1 : 0, 
		expandTemplatesDuringParse ? 1 : 0, 
		/* ref */ outVal, 
		/* ref */ typeIndex
	);
	if (num !== 0) {
		throw System.Windows.Markup.XamlParseException.CreateFromCore(num);
	}
	var result = $asm02.MS.Internal.XcpImports.ConvertType$0(outVal.value.MemberwiseClone(), typeIndex.value, true, null);
	if (outVal.value.Type === MS.Internal.VType.valueObject) {
		$asm02.MS.Internal.ManagedPeerTable.UnpegManagedPeerNoRef$2(JSIL.New(System.IntPtr, "_ctor$0", [outVal.value.m_pdoValue]));
	}
	return result;
};
$asm02.MS.Internal.XcpImports.CreateFromXaml$1 = function (xamlString, createNamescope, requireDefaultNamespace, allowEventHandlers) {
	return $asm02.MS.Internal.XcpImports.CreateFromXaml$0(
		xamlString, 
		createNamescope, 
		requireDefaultNamespace, 
		allowEventHandlers, 
		false
	);
};
$asm02.MS.Internal.XcpImports.CreateFromXaml$2 = function (stream, createNamescope, requireDefaultNamespace, allowEventHandlers) {
	return $asm02.MS.Internal.XcpImports.CreateFromXaml$3(
		stream, 
		System.String.Empty, 
		createNamescope, 
		requireDefaultNamespace, 
		allowEventHandlers
	);
};
$asm02.MS.Internal.XcpImports.CreateFromXaml$3 = function (stream, sourceAssemblyName, createNamescope, requireDefaultNamespace, allowEventHandlers) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var outVal = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	var typeIndex = new JSIL.Variable(0);
	var num = JSIL.Cast(JSIL.IgnoredMember("CreateFromXamlNative(pContext, cXamlBuffer, xamlBuffer, cSourceAssemblyName, sourceAssemblyName, fCreateNamescope, fRequiresDefaultNamespace, fAllowEventHandlers, outval, typeIndex)", $asm02.MS.Internal.JoltHelper.Context, stream.Length, sourceAssemblyName.length, sourceAssemblyName, createNamescope ? 1 : 0, requireDefaultNamespace ? 1 : 0, allowEventHandlers ? 1 : 0, /* ref */ outVal, /* ref */ typeIndex), System.UInt32);
	if (num !== 0) {
		throw System.Windows.Markup.XamlParseException.CreateFromCore(num);
	}
	var result = $asm02.MS.Internal.XcpImports.ConvertType$0(outVal.value.MemberwiseClone(), typeIndex.value, true, null);
	if (outVal.value.Type === MS.Internal.VType.valueObject) {
		$asm02.MS.Internal.ManagedPeerTable.UnpegManagedPeerNoRef$2(JSIL.New(System.IntPtr, "_ctor$0", [outVal.value.m_pdoValue]));
	}
	return result;
};
$asm02.MS.Internal.XcpImports.UIElement_MakeList$b1 = JSIL.GenericMethod(
	["T"], 
	JSIL.UntranslatableFunction("System.Collections.Generic.IEnumerable`1<T> MS.Internal.XcpImports::UIElement_MakeList(System.IntPtr,System.Int32)")
);
$asm02.MS.Internal.XcpImports.GetOpenPopups = function () {
	var cResult = new JSIL.Variable(0), pResult = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.GetOpenPopupsNative($asm02.MS.Internal.JoltHelper.Context, /* ref */ cResult, /* ref */ pResult));
	return $asm02.MS.Internal.XcpImports.UIElement_MakeList$b1(System.Windows.Controls.Primitives.Popup)(pResult.value, cResult.value);
};
$asm02.MS.Internal.XcpImports.UIElement_HitTestPoint = function (element, ptHit) {
	var cResult = new JSIL.Variable(0), pResult = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	var ptHit2 = new $asm02.MS.Internal.PointF();
	ptHit2.x = ptHit.X;
	ptHit2.y = ptHit.Y;
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.UIElement_HitTestPointNative(
			(element === null) ? System.IntPtr.Zero : element.NativeObject, 
			$asm02.MS.Internal.JoltHelper.Context, 
			ptHit2.MemberwiseClone(), 
			/* ref */ cResult, 
			/* ref */ pResult
		));
	System.GC.KeepAlive(element);
	return $asm02.MS.Internal.XcpImports.UIElement_MakeList$b1(System.Windows.UIElement)(pResult.value, cResult.value);
};
$asm02.MS.Internal.XcpImports.UIElement_HitTestRect = function (element, rcHit) {
	var cResult = new JSIL.Variable(0), pResult = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	var ptHit = new $asm02.MS.Internal.RectF();
	ptHit.x = rcHit.X;
	ptHit.y = rcHit.Y;
	ptHit.width = rcHit.Width;
	ptHit.height = rcHit.Height;
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.UIElement_HitTestRectNative(
			(element === null) ? System.IntPtr.Zero : element.NativeObject, 
			$asm02.MS.Internal.JoltHelper.Context, 
			ptHit.MemberwiseClone(), 
			/* ref */ cResult, 
			/* ref */ pResult
		));
	System.GC.KeepAlive(element);
	return $asm02.MS.Internal.XcpImports.UIElement_MakeList$b1(System.Windows.UIElement)(pResult.value, cResult.value);
};
$asm02.MS.Internal.XcpImports.InternalTransform_Transform = function (internalTransform, point, /* ref */ pResult) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var ptHit = new $asm02.MS.Internal.PointF();
	var pointF = new JSIL.Variable(new $asm02.MS.Internal.PointF());
	ptHit.x = point.X;
	ptHit.y = point.Y;
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.InternalTransform_TransformNative(internalTransform.NativeObject, ptHit.MemberwiseClone(), /* ref */ pointF));
	System.GC.KeepAlive(internalTransform);
	pResult.value = new System.Windows.Point();
	pResult.value.X = pointF.value.x;
	pResult.value.Y = pointF.value.y;
};
$asm02.MS.Internal.XcpImports.InternalTransform_TransformBounds = function (internalTransform, rectHit, /* ref */ pResult) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var rectHit2 = new $asm02.MS.Internal.RectF();
	var rectF = new JSIL.Variable(new $asm02.MS.Internal.RectF());
	rectHit2.x = rectHit.X;
	rectHit2.y = rectHit.Y;
	rectHit2.height = rectHit.Height;
	rectHit2.width = rectHit.Width;
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.InternalTransform_TransformBoundsNative(internalTransform.NativeObject, rectHit2.MemberwiseClone(), /* ref */ rectF));
	System.GC.KeepAlive(internalTransform);
	pResult.value = new System.Windows.Rect();
	pResult.value.X = rectF.value.x;
	pResult.value.Y = rectF.value.y;
	pResult.value.Height = rectF.value.height;
	pResult.value.Width = rectF.value.width;
};
$asm02.MS.Internal.XcpImports.InternalTransform_Inverse$1 = function (internalTransform) {
	var unmanagedPointer = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.InternalTransform_Inverse$0(internalTransform.NativeObject, /* ref */ unmanagedPointer));
	System.GC.KeepAlive(internalTransform);
	var obj = $asm02.MS.Internal.ManagedPeerTable.EnsureManagedPeer$0(unmanagedPointer.value, 0, $asm02.MS.Internal.InternalTransform);
	return JSIL.TryCast(obj, System.Windows.Media.GeneralTransform);
};
$asm02.MS.Internal.XcpImports.Transform_Transform = function (transform, point, /* ref */ pResult) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var ptHit = new $asm02.MS.Internal.PointF();
	var pointF = new JSIL.Variable(new $asm02.MS.Internal.PointF());
	ptHit.x = point.X;
	ptHit.y = point.Y;
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Transform_TransformNative(transform.NativeObject, ptHit.MemberwiseClone(), /* ref */ pointF));
	System.GC.KeepAlive(transform);
	pResult.value = new System.Windows.Point();
	pResult.value.X = pointF.value.x;
	pResult.value.Y = pointF.value.y;
};
$asm02.MS.Internal.XcpImports.Transform_TransformBounds = function (transform, rectHit, /* ref */ pResult) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var rectHit2 = new $asm02.MS.Internal.RectF();
	var rectF = new JSIL.Variable(new $asm02.MS.Internal.RectF());
	rectHit2.x = rectHit.X;
	rectHit2.y = rectHit.Y;
	rectHit2.height = rectHit.Height;
	rectHit2.width = rectHit.Width;
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Transform_TransformBoundsNative(transform.NativeObject, rectHit2.MemberwiseClone(), /* ref */ rectF));
	System.GC.KeepAlive(transform);
	pResult.value = new System.Windows.Rect();
	pResult.value.X = rectF.value.x;
	pResult.value.Y = rectF.value.y;
	pResult.value.Height = rectF.value.height;
	pResult.value.Width = rectF.value.width;
};
$asm02.MS.Internal.XcpImports.Transform_Inverse$1 = function (transform) {
	var unmanagedPointer = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Transform_Inverse$0(transform.NativeObject, /* ref */ unmanagedPointer));
	System.GC.KeepAlive(transform);
	var obj = $asm02.MS.Internal.ManagedPeerTable.EnsureManagedPeer$0(unmanagedPointer.value, 0, System.Windows.Media.MatrixTransform);
	$asm02.MS.Internal.XcpImports.ReleaseNativeObject$1(/* ref */ unmanagedPointer);
	return JSIL.TryCast(obj, System.Windows.Media.GeneralTransform);
};
$asm02.MS.Internal.XcpImports.Storyboard_SeekAlignedToLastTick = function (storyboard, seekTime) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Storyboard_SeekAlignedToLastTickNative(storyboard.NativeObject, seekTime));
	System.GC.KeepAlive(storyboard);
};
$asm02.MS.Internal.XcpImports.Storyboard_SetTarget = function (timeline, target) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Storyboard_SetTargetNative(timeline.NativeObject, target.NativeObject));
	System.GC.KeepAlive(timeline);
	System.GC.KeepAlive(target);
};
$asm02.MS.Internal.XcpImports.Storyboard_SetTargetDependencyProperty = function (timeline, targetProperty) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var typeProxy = null;
	if (targetProperty === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["targetProperty"]);
	}
	var nativePtrManagedOwnerType = System.IntPtr.Zero;
	if (!targetProperty.IsCoreProperty) {
		typeProxy = $asm02.MS.Internal.TypeProxy.CreateProxyForType(JSIL.Cast(targetProperty, $asm02.System.Windows.CustomDependencyProperty)._ownerType);
		if (typeProxy !== null) {
			nativePtrManagedOwnerType = typeProxy.NativeObject;
		}
	}
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Storyboard_SetTargetDependencyPropertyNative(timeline.NativeObject, nativePtrManagedOwnerType, targetProperty.m_nKnownId));
	System.GC.KeepAlive(typeProxy);
	System.GC.KeepAlive(timeline);
};
$asm02.MS.Internal.XcpImports.Storyboard_SkipToFill = function (storyboard) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Storyboard_SkipToFillNative(storyboard.NativeObject));
	System.GC.KeepAlive(storyboard);
};
$asm02.MS.Internal.XcpImports.Timeline_GetCurrentTime = function (timeline) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var num = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Timeline_GetCurrentTimeNative(timeline.NativeObject, /* ref */ num));
	System.GC.KeepAlive(timeline);
	return System.TimeSpan.FromSeconds(num.value);
};
$asm02.MS.Internal.XcpImports.Timeline_GetClockState = function (timeline) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var result = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Timeline_GetClockStateNative(timeline.NativeObject, /* ref */ result));
	System.GC.KeepAlive(timeline);
	return result.value;
};
$asm02.MS.Internal.XcpImports.VideoBrush_SetMediaElementSource = function (videoBrush, mediaElement) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.VideoBrush_SetMediaElementSourceNative(videoBrush.NativeObject, mediaElement.NativeObject));
	System.GC.KeepAlive(videoBrush);
	System.GC.KeepAlive(mediaElement);
};
$asm02.MS.Internal.XcpImports.VideoBrush_SetCaptureGraphSource = function (videoBrush, source) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.VideoBrush_SetCaptureGraphSourceNative(videoBrush.NativeObject, source.NativeObject));
	System.GC.KeepAlive(videoBrush);
	System.GC.KeepAlive(source);
};
$asm02.MS.Internal.XcpImports.BitmapSource_SetSource = function (bitmapSource, /* ref */ byteStream) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.BitmapSource_SetSourceNative(bitmapSource.NativeObject, /* ref */ byteStream));
	System.GC.KeepAlive(bitmapSource);
};
$asm02.MS.Internal.XcpImports.CreateNativeObjectForManagedPeer = function (managedClassName, unpegManagedPeerNoRefFn, pegManagedPeerNoRefFn) {
	var result = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.CreateNativeInteropWrapperNative(
			managedClassName.length, 
			managedClassName, 
			unpegManagedPeerNoRefFn, 
			pegManagedPeerNoRefFn, 
			/* ref */ result
		));
	return result.value;
};
$asm02.MS.Internal.XcpImports.SetCallbackCountToNativeWrapper = function (managedPeer, iCallbackCount) {
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.SetManagedCallbackCountNative(managedPeer.IManagedPeerBase_NativeObject, iCallbackCount));
	System.GC.KeepAlive(managedPeer);
};
$asm02.MS.Internal.XcpImports.SetCallbackFunctionToNativeWrapper = function (managedPeer, indexDelegate, callback) {
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.SetManagedCallbackFunctionNative(managedPeer.IManagedPeerBase_NativeObject, indexDelegate, callback));
	System.GC.KeepAlive(managedPeer);
};
$asm02.MS.Internal.XcpImports.GetFullNameForCoreManagedClass = function (className) {
	if (className !== null) {
		if (className == "AutomationProperties") {
			return "System.Windows.Automation.AutomationProperties";
		}
		if (className == "Validation") {
			return "System.Windows.Controls.Validation";
		}
		if (className == "Selector") {
			return "System.Windows.Controls.Primitives.Selector";
		}
		if (className == "ToolTipService") {
			return "System.Windows.Controls.ToolTipService";
		}
		if (className == "ScrollViewer") {
			return "System.Windows.Controls.ScrollViewer";
		}
	}
	return null;
};
$asm02.MS.Internal.XcpImports.GetClassFullName = function (coreClassName) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var fullNameForCoreManagedClass = $asm02.MS.Internal.XcpImports.GetFullNameForCoreManagedClass(coreClassName);
	if (fullNameForCoreManagedClass !== null) {
		return fullNameForCoreManagedClass;
	}
	var cValue = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	var classFullNameNative = $asm02.MS.Internal.XcpImports.GetClassFullNameNative($asm02.MS.Internal.JoltHelper.Context, coreClassName, /* ref */ cValue);
	if (classFullNameNative !== 0) {
		throw $asm02.MS.Internal.Error.MarshalXresultAsException$0(classFullNameNative);
	}
	if (cValue.value.Type !== MS.Internal.VType.valueString) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("InvalidReturnValue")]);
	}
	$asm02.MS.Internal.XcpImports.ReleaseNativeValue(JSIL.IgnoredMember(".ctor(value)"), 6);
	return JSIL.Cast(JSIL.IgnoredMember(".ctor(value, startIndex, length)", 0, cValue.value.Count), System.String);
};
$asm02.MS.Internal.XcpImports.GetClassFullNameByIndex = JSIL.UntranslatableFunction("System.String MS.Internal.XcpImports::GetClassFullNameByIndex(System.UInt32)");
$asm02.MS.Internal.XcpImports.GetCoreDependencyPropertyNameAndTypeByIndex = function (nCoreDPIndex, /* ref */ propertyName, /* ref */ ownerTypeName) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var outVal = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	var outVal2 = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.GetCoreDependencyPropertyNameAndTypeByIndexNative($asm02.MS.Internal.JoltHelper.Context, nCoreDPIndex, /* ref */ outVal, /* ref */ outVal2));
	if (!((outVal.value.Type === MS.Internal.VType.valueString) && (outVal2.value.Type === MS.Internal.VType.valueString))) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("InvalidReturnValue")]);
	}
	ownerTypeName.value = JSIL.Cast($asm02.MS.Internal.XcpImports.ConvertType$0(outVal.value.MemberwiseClone(), 0, true, null), System.String);
	propertyName.value = JSIL.Cast($asm02.MS.Internal.XcpImports.ConvertType$0(outVal2.value.MemberwiseClone(), 0, true, null), System.String);
};
$asm02.MS.Internal.XcpImports.DispatcherTimer_Start = function (timer) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.DispatcherTimer_StartNative(timer.IManagedPeerBase_NativeObject));
	System.GC.KeepAlive(timer);
};
$asm02.MS.Internal.XcpImports.DispatcherTimer_Stop = function (timer) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.DispatcherTimer_StopNative(timer.IManagedPeerBase_NativeObject));
	System.GC.KeepAlive(timer);
};
$asm02.MS.Internal.XcpImports.CreateNativeErrorObject = function (e, fShutdown) {
	var exception = e.toString();
	$asm02.MS.Internal.XcpImports.CreateNativeErrorObjectNative($asm02.MS.Internal.JoltHelper.Context, exception, fShutdown ? 1 : 0);
};
$asm02.MS.Internal.XcpImports.SaveFileDialog_GetIEProtectedModeTempFileName = JSIL.UntranslatableFunction("System.UInt32 MS.Internal.XcpImports::SaveFileDialog_GetIEProtectedModeTempFileName(System.String&)");
$asm02.MS.Internal.XcpImports.FrameworkElement_OnApplyTemplate = function (frameworkElement) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.FrameworkElement_OnApplyTemplateNative(frameworkElement.NativeObject));
	System.GC.KeepAlive(frameworkElement);
};
$asm02.MS.Internal.XcpImports.FrameworkElement_ApplyTemplate = function (frameworkElement) {
	return JSIL.Cast($asm02.MS.Internal.XcpImports.MethodEx$1(frameworkElement, "ApplyTemplate"), System.Boolean);
};
$asm02.MS.Internal.XcpImports.Control_Raise = function (control, arguments, nDelegate) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Control_RaiseNative(control.NativeObject, arguments.IManagedPeerBase_NativeObject, nDelegate));
	System.GC.KeepAlive(control);
	System.GC.KeepAlive(arguments);
};
$asm02.MS.Internal.XcpImports.MediaElement_SetMediaStreamSource = function (mediaElement) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.MediaElement_SetMediaStreamSourceNative(mediaElement.NativeObject));
	System.GC.KeepAlive(mediaElement);
};
$asm02.MS.Internal.XcpImports.MediaStreamSource_OnOpenMediaCompleted = function (mediaElement) {
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.MediaStreamSource_OnOpenMediaCompletedNative(mediaElement.NativeObject));
	System.GC.KeepAlive(mediaElement);
};
$asm02.MS.Internal.XcpImports.MediaStreamSource_SetMediaOpenAttribute = function (mediaElement, nStreamDescriptionIndex, attributeKey, attributeValue) {
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.MediaStreamSource_SetMediaOpenAttributeNative(
			mediaElement.NativeObject, 
			nStreamDescriptionIndex, 
			attributeKey.length, 
			attributeKey, 
			attributeValue.length, 
			attributeValue
		));
	System.GC.KeepAlive(mediaElement);
};
$asm02.MS.Internal.XcpImports.MediaStreamSource_SetMediaOpenStreamDescription = function (mediaElement, streamDescriptionIndex, type) {
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.MediaStreamSource_SetMediaOpenStreamDescriptionNative(mediaElement.NativeObject, streamDescriptionIndex, type));
	System.GC.KeepAlive(mediaElement);
};
$asm02.MS.Internal.XcpImports.MediaStreamSource_OnSeekCompleted = function (mediaElement, actualSeekTimeInHundredNanoSeconds) {
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.MediaStreamSource_OnSeekCompletedNative(mediaElement.NativeObject, actualSeekTimeInHundredNanoSeconds));
	System.GC.KeepAlive(mediaElement);
};
$asm02.MS.Internal.XcpImports.MediaStreamSource_OnGetSampleCompleted = function (mediaElement, streamIndex, streamWrapper, internalStream, offset, count, timeInHundredNanoseconds, durationInHundredNanoseconds, attributeCount, attributeLengths, attributes) {
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.MediaStreamSource_OnGetSampleCompletedNative(
			mediaElement.NativeObject, 
			streamIndex, 
			(streamWrapper === null) ? System.IntPtr.Zero : streamWrapper.IManagedPeerBase_NativeObject, 
			(internalStream === null) ? System.IntPtr.Zero : internalStream.NativeObject, 
			offset, 
			count, 
			timeInHundredNanoseconds, 
			durationInHundredNanoseconds, 
			attributeCount, 
			attributeLengths, 
			attributes.length, 
			attributes
		));
	System.GC.KeepAlive(mediaElement);
	System.GC.KeepAlive(streamWrapper);
	System.GC.KeepAlive(internalStream);
};
$asm02.MS.Internal.XcpImports.MediaStreamSource_OnGetSampleProgress = function (mediaElement, bufferingProgress) {
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.MediaStreamSource_OnGetSampleProgressNative(mediaElement.NativeObject, bufferingProgress));
	System.GC.KeepAlive(mediaElement);
};
$asm02.MS.Internal.XcpImports.MediaStreamSource_OnGetDiagonosticCompleted = function (mediaElement, diagnosticKind, diagnosticValue) {
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.MediaStreamSource_OnGetDiagonosticCompletedNative(mediaElement.NativeObject, diagnosticKind, diagnosticValue));
	System.GC.KeepAlive(mediaElement);
};
$asm02.MS.Internal.XcpImports.MediaStreamSource_OnSwitchMediaStreamCompleted = function (mediaElement, streamIndex) {
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.MediaStreamSource_OnSwitchMediaStreamCompletedNative(mediaElement.NativeObject, streamIndex));
	System.GC.KeepAlive(mediaElement);
};
$asm02.MS.Internal.XcpImports.MediaStreamSource_OnMediaStreamError = function (mediaElement, errorMessage) {
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.MediaStreamSource_OnMediaStreamErrorNative(mediaElement.NativeObject, errorMessage.length, errorMessage));
	System.GC.KeepAlive(mediaElement);
};
$asm02.MS.Internal.XcpImports.AllocateNativeBuffer = function (valueType, cEntries) {
	var zero = new JSIL.Variable(System.IntPtr.Zero);
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.AllocateNativeBufferNative(valueType, cEntries, /* ref */ zero));
	return zero.value;
};
$asm02.MS.Internal.XcpImports.OnCreateAutomationPeer = function (element) {
	var intPtr = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.OnCreateAutomationPeerNative(element.NativeObject, /* ref */ intPtr));
	System.GC.KeepAlive(element);
	if (System.IntPtr.op_Inequality(intPtr.value, System.IntPtr.Zero)) {
		var dependencyObject = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetOrCreateAutomationPeer(intPtr.value, element), System.Windows.DependencyObject);
		$asm02.MS.Internal.XcpImports.ReleaseNativeObject$1(/* ref */ intPtr);
		return JSIL.TryCast(dependencyObject, System.Windows.Automation.Peers.AutomationPeer);
	}
	return null;
};
$asm02.MS.Internal.XcpImports.SetAutomationPeerParent = function (element, parent) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.SetAutomationPeerParentNative(element.NativeObject, parent.NativeObject));
	System.GC.KeepAlive(element);
	System.GC.KeepAlive(parent);
};
$asm02.MS.Internal.XcpImports.GetAutomationPeerValue = function (peer, ePropertyId) {
	var typeIndex = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	var outVal = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.GetAutomationPeerValueNative(peer.NativeObject, ePropertyId, /* ref */ outVal, /* ref */ typeIndex));
	System.GC.KeepAlive(peer);
	if (outVal.value.Type !== MS.Internal.VType.valueEnum) {
		return $asm02.MS.Internal.XcpImports.ConvertType$0(outVal.value.MemberwiseClone(), typeIndex.value, true, peer);
	}
	if (ePropertyId === System.Windows.AutomationPropertiesEnum.ControlTypeProperty) {
		return System.Enum.ToObject$0(System.Windows.Automation.Peers.AutomationControlType, outVal.value.m_nValue);
	}
	if (ePropertyId !== System.Windows.AutomationPropertiesEnum.OrientationProperty) {
		return null;
	}
	return System.Enum.ToObject$0(System.Windows.Automation.Peers.AutomationOrientation, outVal.value.m_nValue);
};
$asm02.MS.Internal.XcpImports.AutomationListenerExists = function (eEvent) {
	var result = new JSIL.Variable(false);
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.AutomationListenerExistsNative($asm02.MS.Internal.JoltHelper.Context, eEvent, /* ref */ result));
	return result.value;
};
$asm02.MS.Internal.XcpImports.AutomationRaiseAutomationEvent = function (peer, eEvent) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.AutomationRaiseAutomationEventNative(peer.NativeObject, eEvent));
	System.GC.KeepAlive(peer);
};
$asm02.MS.Internal.XcpImports.DependencyObject_GetVisualRelative = function (referenceObject, linkType) {
	var typeIndex = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	var outVal = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.GetVisualRelativeNative(referenceObject.NativeObject, linkType, /* ref */ outVal, /* ref */ typeIndex));
	System.GC.KeepAlive(referenceObject);
	return JSIL.Cast($asm02.MS.Internal.XcpImports.ConvertType$0(outVal.value.MemberwiseClone(), typeIndex.value, true, referenceObject), System.Windows.DependencyObject);
};
$asm02.MS.Internal.XcpImports.Hyperlink_FindHostFrameworkElement = function (hyperlink) {
	var typeIndex = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	var outVal = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Hyperlink_FindHostFrameworkElementNative(hyperlink.NativeObject, /* ref */ outVal, /* ref */ typeIndex));
	System.GC.KeepAlive(hyperlink);
	return JSIL.TryCast($asm02.MS.Internal.XcpImports.ConvertType$0(outVal.value.MemberwiseClone(), typeIndex.value, true, hyperlink), System.Windows.FrameworkElement);
};
$asm02.MS.Internal.XcpImports.RichTextBox_GetDocumentEdge = function (richTextBox, edge) {
	var typeIndex = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	var outVal = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.RichTextBox_GetDocumentEdgeNative(richTextBox.NativeObject, Math.floor(edge), /* ref */ outVal, /* ref */ typeIndex));
	System.GC.KeepAlive(richTextBox);
	var textPointer = JSIL.Cast($asm02.MS.Internal.XcpImports.ConvertType$0(outVal.value.MemberwiseClone(), typeIndex.value, true, richTextBox), $asm02.MS.Internal.TextPointerWrapper);
	return new System.Windows.Documents.TextPointer(textPointer);
};
$asm02.MS.Internal.XcpImports.TextElement_GetEdge = function (textElement, edge) {
	var typeIndex = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	var outVal = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	var num = $asm02.MS.Internal.XcpImports.TextElement_GetEdgeNative(textElement.NativeObject, Math.floor(edge), /* ref */ outVal, /* ref */ typeIndex);
	System.GC.KeepAlive(textElement);
	if (num === -2146233067) {
		throw JSIL.New(System.NotSupportedException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("TextElement_OperationNotSupportedOutsideRTB")]);
	}
	$asm02.MS.Internal.XcpImports.CheckHResult(num);
	var textPointer = JSIL.TryCast($asm02.MS.Internal.XcpImports.ConvertType$0(outVal.value.MemberwiseClone(), typeIndex.value, true, textElement), $asm02.MS.Internal.TextPointerWrapper);
	return new System.Windows.Documents.TextPointer(textPointer);
};
$asm02.MS.Internal.XcpImports.TextPointer_GetLogicalDirection = function (textPointer) {
	var num = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	var outVal = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.TextPointer_GetLogicalDirectionNative(textPointer.InternalPointer.NativeObject, /* ref */ outVal, /* ref */ num));
	System.GC.KeepAlive(textPointer);
	return JSIL.Cast($asm02.MS.Internal.XcpImports.ConvertEnumWithType(outVal.value.MemberwiseClone(), System.Windows.Documents.LogicalDirection), System.Windows.Documents.LogicalDirection);
};
$asm02.MS.Internal.XcpImports.TextPointer_GetCharacterRect = function (textPointer, direction) {
	var rectF = new JSIL.Variable(new $asm02.MS.Internal.RectF());
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.TextPointer_GetCharacterRectNative(textPointer.InternalPointer.NativeObject, Math.floor(direction), /* ref */ rectF));
	System.GC.KeepAlive(textPointer);
	if (!((rectF.value.x !== 0) || 
			(rectF.value.y !== 0) || 
			(rectF.value.width !== 0) || (rectF.value.height !== 0))) {
		return System.Windows.Rect.Empty;
	}
	return JSIL.New(System.Windows.Rect, "_ctor$0", [rectF.value.x, rectF.value.y, rectF.value.width, rectF.value.height]);
};
$asm02.MS.Internal.XcpImports.TextPointer_CompareTo = function (thisPosition, position) {
	var result = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.TextPointer_CompareToNative(thisPosition.InternalPointer.NativeObject, position.InternalPointer.NativeObject, /* ref */ result));
	System.GC.KeepAlive(thisPosition);
	System.GC.KeepAlive(position);
	return result.value;
};
$asm02.MS.Internal.XcpImports.TextPointer_GetOffset = function (textPointer) {
	var result = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.TextPointer_GetOffsetNative(textPointer.InternalPointer.NativeObject, /* ref */ result));
	System.GC.KeepAlive(textPointer);
	return result.value;
};
$asm02.MS.Internal.XcpImports.TextPointer_GetNormalizedPosition = function (textPointer) {
	var typeIndex = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	var outVal = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.TextPointer_GetNormalizedPositionNative(textPointer.InternalPointer.NativeObject, /* ref */ outVal, /* ref */ typeIndex));
	System.GC.KeepAlive(textPointer);
	var textPointer2 = JSIL.TryCast($asm02.MS.Internal.XcpImports.ConvertType$0(outVal.value.MemberwiseClone(), typeIndex.value, true, null), $asm02.MS.Internal.TextPointerWrapper);
	return new System.Windows.Documents.TextPointer(textPointer2);
};
$asm02.MS.Internal.XcpImports.TextPointer_GetParent = function (textPointer) {
	var typeIndex = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	var outVal = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.TextPointer_GetParentNative(textPointer.InternalPointer.NativeObject, /* ref */ outVal, /* ref */ typeIndex));
	System.GC.KeepAlive(textPointer);
	return JSIL.Cast($asm02.MS.Internal.XcpImports.ConvertType$0(outVal.value.MemberwiseClone(), typeIndex.value, true, null), System.Windows.DependencyObject);
};
$asm02.MS.Internal.XcpImports.TextPointer_IsAtInsertionPosition = function (textPointer) {
	var result = new JSIL.Variable(false);
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.TextPointer_IsAtInsertionPositionNative(textPointer.InternalPointer.NativeObject, /* ref */ result));
	System.GC.KeepAlive(textPointer);
	return result.value;
};
$asm02.MS.Internal.XcpImports.TextPointer_GetNextInsertionPosition = function (textPointer, direction) {
	var typeIndex = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	var outVal = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.TextPointer_GetNextInsertionPositionNative(textPointer.InternalPointer.NativeObject, Math.floor(direction), /* ref */ outVal, /* ref */ typeIndex));
	System.GC.KeepAlive(textPointer);
	var textPointerWrapper = JSIL.TryCast($asm02.MS.Internal.XcpImports.ConvertType$0(outVal.value.MemberwiseClone(), typeIndex.value, true, null), $asm02.MS.Internal.TextPointerWrapper);
	if (textPointerWrapper === null) {
		return null;
	}
	return new System.Windows.Documents.TextPointer(textPointerWrapper);
};
$asm02.MS.Internal.XcpImports.TextPointer_GetPositionAtOffset = function (textPointer, offset, direction) {
	var typeIndex = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	var outVal = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.TextPointer_GetPositionAtOffsetNative(
			textPointer.InternalPointer.NativeObject, 
			offset, 
			Math.floor(direction), 
			/* ref */ outVal, 
			/* ref */ typeIndex
		));
	System.GC.KeepAlive(textPointer);
	var textPointerWrapper = JSIL.TryCast($asm02.MS.Internal.XcpImports.ConvertType$0(outVal.value.MemberwiseClone(), typeIndex.value, true, null), $asm02.MS.Internal.TextPointerWrapper);
	if (textPointerWrapper === null) {
		return null;
	}
	return new System.Windows.Documents.TextPointer(textPointerWrapper);
};
$asm02.MS.Internal.XcpImports.TextPointer_GetNextWordBoundaryPosition = function (textPointer, direction) {
	var typeIndex = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	var outVal = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.TextPointer_GetNextWordBoundaryPositionNative(textPointer.InternalPointer.NativeObject, Math.floor(direction), /* ref */ outVal, /* ref */ typeIndex));
	System.GC.KeepAlive(textPointer);
	var textPointerWrapper = JSIL.TryCast($asm02.MS.Internal.XcpImports.ConvertType$0(outVal.value.MemberwiseClone(), typeIndex.value, true, null), $asm02.MS.Internal.TextPointerWrapper);
	if (textPointerWrapper === null) {
		return null;
	}
	return new System.Windows.Documents.TextPointer(textPointerWrapper);
};
$asm02.MS.Internal.XcpImports.TextPointer_GetRichTextBox$1 = function (textPointer) {
	var typeIndex = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	var outVal = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.TextPointer_GetRichTextBox$0(textPointer.InternalPointer.NativeObject, /* ref */ outVal, /* ref */ typeIndex));
	System.GC.KeepAlive(textPointer);
	return JSIL.Cast($asm02.MS.Internal.XcpImports.ConvertType$0(outVal.value.MemberwiseClone(), typeIndex.value, true, null), System.Windows.Controls.RichTextBox);
};
$asm02.MS.Internal.XcpImports.TextRange_GetText = JSIL.UntranslatableFunction("System.String MS.Internal.XcpImports::TextRange_GetText(System.Windows.Documents.TextPointer,System.Windows.Documents.TextPointer,System.Int32)");
$asm02.MS.Internal.XcpImports.RichTextBox_GetTextPositionFromPoint = function (richTextBox, point) {
	var typeIndex = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	var outVal = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.RichTextBox_GetTextPositionFromPointNative(richTextBox.NativeObject, point, /* ref */ outVal, /* ref */ typeIndex));
	System.GC.KeepAlive(richTextBox);
	var textPointer = JSIL.Cast($asm02.MS.Internal.XcpImports.ConvertType$0(outVal.value.MemberwiseClone(), typeIndex.value, true, richTextBox), $asm02.MS.Internal.TextPointerWrapper);
	return new System.Windows.Documents.TextPointer(textPointer);
};
$asm02.MS.Internal.XcpImports.UIATextRange_GetEnclosingElement = function (start, end) {
	var typeIndex = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	var outVal = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.UIATextRange_GetEnclosingElementNative(start.InternalPointer.NativeObject, end.InternalPointer.NativeObject, /* ref */ outVal, /* ref */ typeIndex));
	var result = JSIL.Cast($asm02.MS.Internal.XcpImports.ConvertType$0(outVal.value.MemberwiseClone(), typeIndex.value, true, null), System.Windows.Documents.TextElement);
	System.GC.KeepAlive(start);
	System.GC.KeepAlive(end);
	return result;
};
$asm02.MS.Internal.XcpImports.UIATextRange_GetChildren = JSIL.UntranslatableFunction("System.Collections.Generic.List`1<System.Windows.Documents.TextElement> MS.Internal.XcpImports::UIATextRange_GetChildren(System.Windows.Documents.TextPointer,System.Windows.Documents.TextPointer)");
$asm02.MS.Internal.XcpImports.UIATextRange_GetBoundingRectangles = JSIL.UntranslatableFunction("System.Collections.Generic.List`1<System.Windows.Rect> MS.Internal.XcpImports::UIATextRange_GetBoundingRectangles(System.Windows.Documents.TextPointer,System.Windows.Documents.TextPointer)");
$asm02.MS.Internal.XcpImports.StylusPointCollection_AddItem = function (collection, sp) {
	var result = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.StylusPointCollection_AddItemNative(
			collection.NativeObject, 
			sp.X, 
			sp.Y, 
			sp.PressureFactor, 
			/* ref */ result
		));
	System.GC.KeepAlive(collection);
	return result.value;
};
$asm02.MS.Internal.XcpImports.StylusPointCollection_GetItem = JSIL.UntranslatableFunction("System.Windows.Input.StylusPoint MS.Internal.XcpImports::StylusPointCollection_GetItem(System.Windows.Input.StylusPointCollection,System.Int32)");
$asm02.MS.Internal.XcpImports.StylusPointCollection_InsertItem = function (collection, index, sp) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.StylusPointCollection_InsertItemNative(
			collection.NativeObject, 
			index, 
			sp.X, 
			sp.Y, 
			sp.PressureFactor
		));
	System.GC.KeepAlive(collection);
	return sp;
};
$asm02.MS.Internal.XcpImports.StylusPointCollection_IndexOfItem = function (collection, sp) {
	var result = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.StylusPointCollection_IndexOfItemNative(
			collection.NativeObject, 
			sp.X, 
			sp.Y, 
			sp.PressureFactor, 
			/* ref */ result
		));
	System.GC.KeepAlive(collection);
	return result.value;
};
$asm02.MS.Internal.XcpImports.StylusPointCollection_RemoveItem = function (collection, sp) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.StylusPointCollection_RemoveItemNative(collection.NativeObject, sp.X, sp.Y, sp.PressureFactor));
	System.GC.KeepAlive(collection);
};
$asm02.MS.Internal.XcpImports.AutomationRaiseAutomationPropertyChanged = function (peer, eProperty, /* ref */ v1, /* ref */ v2) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.AutomationRaiseAutomationPropertyChangedNative(peer.NativeObject, eProperty, /* ref */ v1, /* ref */ v2));
	System.GC.KeepAlive(peer);
};
$asm02.MS.Internal.XcpImports.CallAutomationPeerMethod = function (peer, methodIndex) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.CallAutomationPeerMethodNative(peer.NativeObject, methodIndex));
	System.GC.KeepAlive(peer);
};
$asm02.MS.Internal.XcpImports.ContentControl_SetContentIsNotLogical = function (control) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.SetContentIsNotLogicalNative(control.NativeObject));
	System.GC.KeepAlive(control);
};
$asm02.MS.Internal.XcpImports.ContentControl_SetContentIsTemplateBoundManaged = function (control, isTemplateBound) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.SetContentIsTemplateBoundManagedNative(control.NativeObject, isTemplateBound));
	System.GC.KeepAlive(control);
};
$asm02.MS.Internal.XcpImports.MediaElement_AcquireLicenseComplete$1 = function (f_Element, f_LicenseEnumerator, f_hrResult) {
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.MediaElement_AcquireLicenseComplete$0(f_Element.NativeObject, f_LicenseEnumerator, f_hrResult));
	System.GC.KeepAlive(f_Element);
};
$asm02.MS.Internal.XcpImports.MediaElement_RequestLog = function (element) {
	if (element !== null) {
		$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.MediaElement_RequestLogNative(element.NativeObject));
		System.GC.KeepAlive(element);
	}
};
$asm02.MS.Internal.XcpImports.MessageBox_ShowCore = function (messageBoxText, caption, type) {
	var result = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.MessageBox_ShowCoreNative(
			$asm02.MS.Internal.JoltHelper.Context, 
			messageBoxText, 
			caption, 
			type, 
			/* ref */ result
		));
	return result.value;
};
$asm02.MS.Internal.XcpImports.NavigateToSafeURI = function (location, target, checkUserInitiatedAction) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	if (System.String.IsNullOrEmpty(location)) {
		throw JSIL.New(System.NullReferenceException, "_ctor$1", ["location"]);
	}
	if (System.String.IsNullOrEmpty(target)) {
		throw JSIL.New(System.NullReferenceException, "_ctor$1", ["target"]);
	}
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.NavigateToSafeURINative($asm02.MS.Internal.JoltHelper.Context, location, target, checkUserInitiatedAction ? 1 : 0));
};
$asm02.MS.Internal.XcpImports.DependencyProperty_GetName = function (property) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var outVal = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.GetPropertyNameNative($asm02.MS.Internal.JoltHelper.Context, property.m_nKnownId, /* ref */ outVal));
	if (outVal.value.Type !== MS.Internal.VType.valueString) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("InvalidReturnValue")]);
	}
	return JSIL.Cast($asm02.MS.Internal.XcpImports.ConvertType$0(outVal.value.MemberwiseClone(), 0, true, null), System.String);
};
$asm02.MS.Internal.XcpImports.DependencyProperty_GetDefaultValue = function (dp, propertyOwner, propertyOwnerTypeId) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var cValue = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	var outDOType = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.GetDefaultValueNative(
			$asm02.MS.Internal.JoltHelper.Context, 
			propertyOwner ? propertyOwner.NativeObject : System.IntPtr.Zero, 
			propertyOwnerTypeId, 
			dp.m_nKnownId, 
			/* ref */ cValue, 
			/* ref */ outDOType
		));
	System.GC.KeepAlive(propertyOwner);
	return $asm02.MS.Internal.XcpImports.ConvertCValueForManaged(dp, /* ref */ cValue, outDOType.value, propertyOwner);
};
$asm02.MS.Internal.XcpImports.DependencyObject_IsPropertyLocal = function (obj, dp) {
	var result = JSIL.Cast($asm02.MS.Internal.XcpImports.MethodPack(obj.NativeObject, "IsPropertyLocal", [dp.m_nKnownId]), System.Boolean);
	System.GC.KeepAlive(obj);
	return result;
};
$asm02.MS.Internal.XcpImports.UIElement_CaptureMouse = function (element) {
	return JSIL.Cast($asm02.MS.Internal.XcpImports.MethodEx$1(element, "CaptureMouse"), System.Boolean);
};
$asm02.MS.Internal.XcpImports.UIElement_ReleaseMouseCapture = function (element) {
	$asm02.MS.Internal.XcpImports.MethodEx$1(element, "ReleaseMouseCapture");
};
$asm02.MS.Internal.XcpImports.UIElement_InvalidateMeasure = function (element) {
	$asm02.MS.Internal.XcpImports.MethodEx$1(element, "InvalidateMeasure");
};
$asm02.MS.Internal.XcpImports.UIElement_InvalidateArrange = function (element) {
	$asm02.MS.Internal.XcpImports.MethodEx$1(element, "InvalidateArrange");
};
$asm02.MS.Internal.XcpImports.UIElement_UpdateLayout = function (element) {
	$asm02.MS.Internal.XcpImports.MethodEx$1(element, "UpdateLayout");
};
$asm02.MS.Internal.XcpImports.UIElement_TransformToVisual = function (element, visual) {
	var result = JSIL.Cast($asm02.MS.Internal.XcpImports.MethodPack(element.NativeObject, "TransformToVisual", [visual]), System.Windows.Media.GeneralTransform);
	System.GC.KeepAlive(element);
	return result;
};
$asm02.MS.Internal.XcpImports.Collection_Add$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, collection, value) {
		var result = Math.floor(JSIL.Cast($asm02.MS.Internal.XcpImports.MethodPack(collection.NativeObject, "Add", [value]), System.Double));
		System.GC.KeepAlive(collection);
		return result;
	}
);
$asm02.MS.Internal.XcpImports.Collection_AddValue$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, collection, $value) {
		var value = new JSIL.Variable($value);
		$asm02.MS.Internal.XcpImports.CheckThread();
		$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Collection_AddNative(collection.NativeObject, /* ref */ value));
		System.GC.KeepAlive(collection);
	}
);
$asm02.MS.Internal.XcpImports.Collection_AddDependencyObject$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, collection, value) {
		$asm02.MS.Internal.XcpImports.Collection_AddValue$b1(T)(collection, $asm02.MS.Internal.XcpImports.PackDependencyObject(value.NativeObject).MemberwiseClone());
		System.GC.KeepAlive(value);
	}
);
$asm02.MS.Internal.XcpImports.Collection_AddDouble$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, collection, value) {
		$asm02.MS.Internal.XcpImports.Collection_AddValue$b1(T)(collection, $asm02.MS.Internal.XcpImports.PackDouble(value).MemberwiseClone());
	}
);
$asm02.MS.Internal.XcpImports.Collection_AddPoint$b1 = JSIL.GenericMethod(
	["T"], 
	JSIL.UntranslatableFunction("System.Void MS.Internal.XcpImports::Collection_AddPoint(System.Windows.PresentationFrameworkCollection`1<T>,System.Windows.Point)")
);
$asm02.MS.Internal.XcpImports.Collection_IndexOf$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, collection, value) {
		var result = JSIL.Cast($asm02.MS.Internal.XcpImports.MethodPack(collection.NativeObject, "IndexOf", [value]), System.Int32);
		System.GC.KeepAlive(collection);
		return result;
	}
);
$asm02.MS.Internal.XcpImports.Collection_IndexOfValue$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, collection, $value) {
		var value = new JSIL.Variable($value);
		var result = new JSIL.Variable(0);
		$asm02.MS.Internal.XcpImports.CheckThread();
		$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Collection_IndexOfNative(collection.NativeObject, /* ref */ value, /* ref */ result));
		System.GC.KeepAlive(collection);
		return result.value;
	}
);
$asm02.MS.Internal.XcpImports.Collection_IndexOfDependencyObject$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, collection, value) {
		var result = $asm02.MS.Internal.XcpImports.Collection_IndexOfValue$b1(T)(collection, $asm02.MS.Internal.XcpImports.PackDependencyObject(value.NativeObject).MemberwiseClone());
		System.GC.KeepAlive(collection);
		System.GC.KeepAlive(value);
		return result;
	}
);
$asm02.MS.Internal.XcpImports.Collection_IndexOfDouble$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, collection, value) {
		return $asm02.MS.Internal.XcpImports.Collection_IndexOfValue$b1(T)(collection, $asm02.MS.Internal.XcpImports.PackDouble(value).MemberwiseClone());
	}
);
$asm02.MS.Internal.XcpImports.Collection_IndexOfPoint$b1 = JSIL.GenericMethod(
	["T"], 
	JSIL.UntranslatableFunction("System.Int32 MS.Internal.XcpImports::Collection_IndexOfPoint(System.Windows.PresentationFrameworkCollection`1<T>,System.Windows.Point)")
);
$asm02.MS.Internal.XcpImports.Collection_Insert$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, collection, index, value) {
		$asm02.MS.Internal.XcpImports.MethodPack(collection.NativeObject, "Insert", [index, value]);
		System.GC.KeepAlive(collection);
	}
);
$asm02.MS.Internal.XcpImports.Collection_InsertValue$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, collection, index, $value) {
		var value = new JSIL.Variable($value);
		$asm02.MS.Internal.XcpImports.CheckThread();
		$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Collection_InsertNative(collection.NativeObject, index, /* ref */ value));
		System.GC.KeepAlive(collection);
	}
);
$asm02.MS.Internal.XcpImports.Collection_InsertDependencyObject$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, collection, index, value) {
		$asm02.MS.Internal.XcpImports.Collection_InsertValue$b1(T)(collection, index, $asm02.MS.Internal.XcpImports.PackDependencyObject(value.NativeObject).MemberwiseClone());
		System.GC.KeepAlive(value);
	}
);
$asm02.MS.Internal.XcpImports.Collection_InsertDouble$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, collection, index, value) {
		$asm02.MS.Internal.XcpImports.Collection_InsertValue$b1(T)(collection, index, $asm02.MS.Internal.XcpImports.PackDouble(value).MemberwiseClone());
	}
);
$asm02.MS.Internal.XcpImports.Collection_InsertPoint$b1 = JSIL.GenericMethod(
	["T"], 
	JSIL.UntranslatableFunction("System.Void MS.Internal.XcpImports::Collection_InsertPoint(System.Windows.PresentationFrameworkCollection`1<T>,System.UInt32,System.Windows.Point)")
);
$asm02.MS.Internal.XcpImports.Collection_Remove$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, collection, value) {
		$asm02.MS.Internal.XcpImports.MethodPack(collection.NativeObject, "Remove", [value]);
		System.GC.KeepAlive(collection);
	}
);
$asm02.MS.Internal.XcpImports.Collection_RemoveValue$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, collection, $value) {
		var value = new JSIL.Variable($value);
		var num = new JSIL.Variable(0);
		$asm02.MS.Internal.XcpImports.CheckThread();
		$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Collection_RemoveNative(collection.NativeObject, /* ref */ value, /* ref */ num));
		System.GC.KeepAlive(collection);
		return (num.value !== 0);
	}
);
$asm02.MS.Internal.XcpImports.Collection_RemoveDependencyObject$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, collection, value) {
		var result = $asm02.MS.Internal.XcpImports.Collection_RemoveValue$b1(T)(collection, $asm02.MS.Internal.XcpImports.PackDependencyObject(value.NativeObject).MemberwiseClone());
		System.GC.KeepAlive(value);
		return result;
	}
);
$asm02.MS.Internal.XcpImports.Collection_RemoveDouble$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, collection, value) {
		return $asm02.MS.Internal.XcpImports.Collection_RemoveValue$b1(T)(collection, $asm02.MS.Internal.XcpImports.PackDouble(value).MemberwiseClone());
	}
);
$asm02.MS.Internal.XcpImports.Collection_RemovePoint$b1 = JSIL.GenericMethod(
	["T"], 
	JSIL.UntranslatableFunction("System.Boolean MS.Internal.XcpImports::Collection_RemovePoint(System.Windows.PresentationFrameworkCollection`1<T>,System.Windows.Point)")
);
$asm02.MS.Internal.XcpImports.Collection_RemoveAt$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, collection, index) {
		$asm02.MS.Internal.XcpImports.CheckThread();
		$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Collection_RemoveAtNative(collection.NativeObject, index));
		System.GC.KeepAlive(collection);
	}
);
$asm02.MS.Internal.XcpImports.Collection_GetItem$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, collection, index) {
		var result = JSIL.Cast($asm02.MS.Internal.XcpImports.MethodPack(collection.NativeObject, "GetItem", [index]), T);
		System.GC.KeepAlive(collection);
		return result;
	}
);
$asm02.MS.Internal.XcpImports.Collection_GetItemDependencyObject$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, collection, index) {
		var typeIndex = new JSIL.Variable(0);
		$asm02.MS.Internal.XcpImports.CheckThread();
		var outVal = new JSIL.Variable(new $asm02.MS.Internal.CValue());
		$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Collection_GetItemNative(collection.NativeObject, index, /* ref */ outVal, /* ref */ typeIndex));
		System.GC.KeepAlive(collection);
		return JSIL.TryCast($asm02.MS.Internal.XcpImports.ConvertType$0(outVal.value.MemberwiseClone(), typeIndex.value, true, collection), System.Windows.DependencyObject);
	}
);
$asm02.MS.Internal.XcpImports.Collection_GetItemPoint$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, collection, index) {
		var num = new JSIL.Variable(0);
		$asm02.MS.Internal.XcpImports.CheckThread();
		var cValue = new JSIL.Variable(new $asm02.MS.Internal.CValue());
		$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Collection_GetItemNative(collection.NativeObject, index, /* ref */ cValue, /* ref */ num));
		System.GC.KeepAlive(collection);
		return new System.Windows.Point(JSIL.Cast(JSIL.UntranslatableInstruction("ldobj:Single[exp:Double]([mscorlib]System.Single, ldfld:float32*(CValue::m_peValue, ldloca:valuetype MS.Internal.CValue&[exp:CValue](cValue)))"), System.Double), JSIL.Cast(JSIL.UntranslatableInstruction("ldobj:Single[exp:Double]([mscorlib]System.Single, add:float32*(ldfld:float32*(CValue::m_peValue, ldloca:valuetype MS.Internal.CValue&[exp:CValue](cValue)), conv.i:IntPtr(ldc.i4:Int32[exp:IntPtr](4))))"), System.Double));
	}
);
$asm02.MS.Internal.XcpImports.Collection_GetItemDouble$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, collection, index) {
		var num = new JSIL.Variable(0);
		$asm02.MS.Internal.XcpImports.CheckThread();
		var cValue = new JSIL.Variable(new $asm02.MS.Internal.CValue());
		$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Collection_GetItemNative(collection.NativeObject, index, /* ref */ cValue, /* ref */ num));
		System.GC.KeepAlive(collection);
		return cValue.value.m_eValue;
	}
);
$asm02.MS.Internal.XcpImports.Collection_Clear$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, collection) {
		$asm02.MS.Internal.XcpImports.CheckThread();
		$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Collection_ClearNative(collection.NativeObject));
		System.GC.KeepAlive(collection);
	}
);
$asm02.MS.Internal.XcpImports.DataTemplate_LoadContent = function (template) {
	var dependencyObject = JSIL.Cast($asm02.MS.Internal.XcpImports.MethodEx$1(template, "LoadContent"), System.Windows.DependencyObject);
	if (dependencyObject !== null) {
		$asm02.MS.Internal.ManagedPeerTable.UnpegManagedPeerNoRef$1(dependencyObject);
	}
	return dependencyObject;
};
$asm02.MS.Internal.XcpImports.Style_Seal = function (style) {
	$asm02.MS.Internal.XcpImports.MethodEx$1(style, "Seal");
};
$asm02.MS.Internal.XcpImports.StrokeCollection_GetBounds = function (collection) {
	return JSIL.Cast($asm02.MS.Internal.XcpImports.MethodEx$1(collection, "GetBounds"), System.Windows.Rect);
};
$asm02.MS.Internal.XcpImports.StrokeCollection_HitTest = function (collection, stylusPointCollection) {
	var result = JSIL.Cast($asm02.MS.Internal.XcpImports.MethodPack(collection.NativeObject, "HitTest", [stylusPointCollection]), System.Windows.Ink.StrokeCollection);
	System.GC.KeepAlive(collection);
	return result;
};
$asm02.MS.Internal.XcpImports.Storyboard_Seek = function (storyboard, timespan) {
	$asm02.MS.Internal.XcpImports.MethodPack(storyboard.NativeObject, "Seek", [timespan]);
	System.GC.KeepAlive(storyboard);
};
$asm02.MS.Internal.XcpImports.Storyboard_Stop = function (storyboard) {
	$asm02.MS.Internal.XcpImports.MethodEx$1(storyboard, "Stop");
};
$asm02.MS.Internal.XcpImports.Storyboard_Begin = function (storyboard) {
	$asm02.MS.Internal.XcpImports.MethodEx$1(storyboard, "Begin");
};
$asm02.MS.Internal.XcpImports.Storyboard_Pause = function (storyboard) {
	$asm02.MS.Internal.XcpImports.MethodEx$1(storyboard, "Pause");
};
$asm02.MS.Internal.XcpImports.Storyboard_Resume = function (storyboard) {
	$asm02.MS.Internal.XcpImports.MethodEx$1(storyboard, "Resume");
};
$asm02.MS.Internal.XcpImports.MouseEventArgs_GetPosition = function (args, relativeTo) {
	var result = JSIL.Cast($asm02.MS.Internal.XcpImports.MethodPack(args.m_objectPtr.NativeObject, "GetPosition", [relativeTo]), System.Windows.Point).MemberwiseClone();
	System.GC.KeepAlive(args);
	return result;
};
$asm02.MS.Internal.XcpImports.TouchFrameEventArgs_SuspendMousePromotionUntilTouchUp = function (args) {
	$asm02.MS.Internal.XcpImports.MethodPack(args.m_objectPtr.NativeObject, "SuspendMousePromotionUntilTouchUp", JSIL.Array.New(System.Object, 0));
	System.GC.KeepAlive(args);
};
$asm02.MS.Internal.XcpImports.DragEventArgs_GetPosition = function (args, relativeTo) {
	var result = JSIL.Cast($asm02.MS.Internal.XcpImports.MethodPack(args.m_objectPtr.NativeObject, "GetPosition", [relativeTo]), System.Windows.Point).MemberwiseClone();
	System.GC.KeepAlive(args);
	return result;
};
$asm02.MS.Internal.XcpImports.TouchFrameEventArgs_GetTouchPoints = function (args, relativeTo) {
	var result = JSIL.Cast($asm02.MS.Internal.XcpImports.MethodPack(args.m_objectPtr.NativeObject, "GetTouchPoints", [relativeTo]), System.Windows.Input.TouchPointCollection);
	System.GC.KeepAlive(args);
	return result;
};
$asm02.MS.Internal.XcpImports.TouchFrameEventArgs_GetPrimaryTouchPoint = function (args, relativeTo) {
	var result = JSIL.Cast($asm02.MS.Internal.XcpImports.MethodPack(args.m_objectPtr.NativeObject, "GetPrimaryTouchPoint", [relativeTo]), System.Windows.Input.TouchPoint);
	System.GC.KeepAlive(args);
	return result;
};
$asm02.MS.Internal.XcpImports.StylusPointCollection_AddStylusPoints = function (collection, stylusPoints) {
	$asm02.MS.Internal.XcpImports.MethodPack(collection.NativeObject, "AddStylusPoints", [stylusPoints]);
	System.GC.KeepAlive(collection);
};
$asm02.MS.Internal.XcpImports.Control_GetImplementationRoot = function (control) {
	return JSIL.Cast($asm02.MS.Internal.XcpImports.MethodEx$1(control, "Control_GetImplementationRoot"), System.Windows.FrameworkElement);
};
$asm02.MS.Internal.XcpImports.Control_SetImplementationRoot = function (control, value) {
	$asm02.MS.Internal.XcpImports.MethodPack(control.NativeObject, "Control_SetImplementationRoot", [value]);
	System.GC.KeepAlive(control);
};
$asm02.MS.Internal.XcpImports.Control_Focus = function (control) {
	return JSIL.Cast($asm02.MS.Internal.XcpImports.MethodEx$1(control, "Focus"), System.Boolean);
};
$asm02.MS.Internal.XcpImports.Control_GetTemplateChild = function (control, childName) {
	var result = JSIL.Cast($asm02.MS.Internal.XcpImports.MethodPack(control.NativeObject, "GetTemplateChild", [childName]), System.Windows.DependencyObject);
	System.GC.KeepAlive(control);
	return result;
};
$asm02.MS.Internal.XcpImports.Control_RemoveTemplateBinding = function (control, target, targetProperty) {
	$asm02.MS.Internal.XcpImports.MethodPack(control.NativeObject, "RemoveTemplateBinding", [target, targetProperty.m_nKnownId]);
	System.GC.KeepAlive(control);
};
$asm02.MS.Internal.XcpImports.SetFontSource$0 = JSIL.UntranslatableFunction("System.Void MS.Internal.XcpImports::SetFontSource(System.Windows.DependencyObject,MS.Internal.InternalMemoryStream)");
$asm02.MS.Internal.XcpImports.SetFontSource$1 = function (obj, glyphtypeface) {
	var cValue = new $asm02.MS.Internal.CValue();
	cValue.Type = MS.Internal.VType.valueIntPtr;
	cValue.m_pvValue = glyphtypeface.NativeObject.ToInt32();
	$asm02.MS.Internal.XcpImports.MethodEx$0(obj.NativeObject, "SetFontSource", JSIL.Array.New($asm02.MS.Internal.CValue, [cValue]));
	System.GC.KeepAlive(glyphtypeface);
	System.GC.KeepAlive(obj);
};
$asm02.MS.Internal.XcpImports.SetFontSource$2 = JSIL.UntranslatableFunction("System.Void MS.Internal.XcpImports::SetFontSource(System.Windows.DependencyObject,System.Byte[],System.Int32,System.String)");
$asm02.MS.Internal.XcpImports.StylusDevice_GetStylusInfo = function (device) {
	var result = JSIL.Cast($asm02.MS.Internal.XcpImports.MethodEx$0(device._nativeResource.NativeObject, "GetStylusInfo", JSIL.Array.New($asm02.MS.Internal.CValue, 0)), $asm02.MS.Internal.StylusInfo);
	System.GC.KeepAlive(device);
	return result;
};
$asm02.MS.Internal.XcpImports.StylusDevice_GetStylusPoints = function (device, relativeTo) {
	var result = JSIL.Cast($asm02.MS.Internal.XcpImports.MethodPack(device._nativeResource.NativeObject, "GetStylusPoints", [relativeTo]), System.Windows.Input.StylusPointCollection);
	System.GC.KeepAlive(device);
	return result;
};
$asm02.MS.Internal.XcpImports.SetFontSourceNull = function (obj) {
	$asm02.MS.Internal.XcpImports.MethodPack(obj.NativeObject, "SetFontSource", null);
	System.GC.KeepAlive(obj);
};
$asm02.MS.Internal.XcpImports.PasswordBox_SelectAll = function (pb) {
	$asm02.MS.Internal.XcpImports.MethodEx$1(pb, "SelectAll");
};
$asm02.MS.Internal.XcpImports.TextBox_SelectAll = function (tb) {
	$asm02.MS.Internal.XcpImports.MethodEx$1(tb, "SelectAll");
};
$asm02.MS.Internal.XcpImports.RichTextBox_SelectAll = function (rtb) {
	$asm02.MS.Internal.XcpImports.MethodEx$1(rtb, "SelectAll");
};
$asm02.MS.Internal.XcpImports.TextBox_Select = function (tb, start, length) {
	$asm02.MS.Internal.XcpImports.MethodPack(tb.NativeObject, "Select", [start, length]);
	System.GC.KeepAlive(tb);
};
$asm02.MS.Internal.XcpImports.WebRequest_Open = function (request, verb, uri) {
	$asm02.MS.Internal.XcpImports.MethodPack(request.NativeObject, "Open", [verb, uri.OriginalString]);
	System.GC.KeepAlive(request);
};
$asm02.MS.Internal.XcpImports.WebRequest_Send = function (request) {
	$asm02.MS.Internal.XcpImports.MethodEx$1(request, "Send");
};
$asm02.MS.Internal.XcpImports.WebRequest_Abort = function (request) {
	$asm02.MS.Internal.XcpImports.MethodEx$1(request, "Abort");
};
$asm02.MS.Internal.XcpImports.WebRequest_GetSize = function (request) {
	var result = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.WebRequest_GetSizeNative(request.NativeObject, /* ref */ result));
	System.GC.KeepAlive(request);
	return result.value;
};
$asm02.MS.Internal.XcpImports.WebRequest_GetTotalSize = function (request) {
	var result = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.WebRequest_GetTotalSizeNative(request.NativeObject, /* ref */ result));
	System.GC.KeepAlive(request);
	return result.value;
};
$asm02.MS.Internal.XcpImports.WebRequest_GetShouldEnableMemoryAsIPALStream = function (request) {
	var result = new JSIL.Variable(false);
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.WebRequest_GetShouldEnableMemoryAsIPALStreamNative(request.NativeObject, /* ref */ result));
	System.GC.KeepAlive(request);
	return result.value;
};
$asm02.MS.Internal.XcpImports.WebRequest_SetBuffer = JSIL.UntranslatableFunction("System.Void MS.Internal.XcpImports::WebRequest_SetBuffer(MS.Internal.InternalWebRequest,System.Byte[],System.Int32)");
$asm02.MS.Internal.XcpImports.WebRequest_GetDownloaderBytes = function (request, uri) {
	var pMemory = new JSIL.Variable(0), size = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.GetDownloaderBytes(request.NativeObject, /* ref */ pMemory, /* ref */ size);
	System.GC.KeepAlive(request);
	return new $asm02.MS.Internal.InternalMemoryStream(pMemory.value, size.value, uri);
};
$asm02.MS.Internal.XcpImports.WebRequest_GetNetworkStream = function (request) {
	var pStream = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.GetRequestStream(request.NativeObject, /* ref */ pStream);
	System.GC.KeepAlive(request);
	return new $asm02.MS.Internal.InternalNetworkStream(pStream.value);
};
$asm02.MS.Internal.XcpImports.WebRequest_GetStreamWrapper = function (request, size) {
	var pStream = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.GetRequestStream(request.NativeObject, /* ref */ pStream);
	System.GC.KeepAlive(request);
	return new $asm02.MS.Internal.InternalStreamWrapper(pStream.value, size);
};
$asm02.MS.Internal.XcpImports.WebRequest_SetHeaders = function (request, headers) {
	var cHeaders = 0;
	var text = null;
	if (headers === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["headers"]);
	}
	if (headers.Value !== null) {
		text = headers.Value;
		cHeaders = text.length;
	}
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.WebRequest_SetHeadersNative(request.NativeObject, cHeaders, text));
	System.GC.KeepAlive(request);
};
$asm02.MS.Internal.XcpImports.WebRequest_AddUploadDataChunk = JSIL.UntranslatableFunction("System.Void MS.Internal.XcpImports::WebRequest_AddUploadDataChunk(MS.Internal.InternalWebRequest,System.Byte[],System.Int32,System.Int32)");
$asm02.MS.Internal.XcpImports.WebRequest_EndUploadData = function (request) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.WebRequest_EndUploadDataNative(request.NativeObject));
	System.GC.KeepAlive(request);
};
$asm02.MS.Internal.XcpImports.WebRequest_GetResponseHeaders = JSIL.UntranslatableFunction("MS.Internal.SecurityCriticalDataForMultipleGetAndSet`1<System.String> MS.Internal.XcpImports::WebRequest_GetResponseHeaders(MS.Internal.InternalWebRequest)");
$asm02.MS.Internal.XcpImports.Stroke_GetBounds = function (stroke) {
	return JSIL.Cast($asm02.MS.Internal.XcpImports.MethodEx$1(stroke, "GetBounds"), System.Windows.Rect);
};
$asm02.MS.Internal.XcpImports.Stroke_HitTest = function (stroke, stylusPointCollection) {
	var result = JSIL.Cast($asm02.MS.Internal.XcpImports.MethodPack(stroke.NativeObject, "HitTest", [stylusPointCollection]), System.Boolean);
	System.GC.KeepAlive(stroke);
	return result;
};
$asm02.MS.Internal.XcpImports.Downloader_Open = function (downloader, verb, uri) {
	$asm02.MS.Internal.XcpImports.MethodPack(downloader.NativeObject, "Open", [verb, uri.OriginalString]);
	System.GC.KeepAlive(downloader);
};
$asm02.MS.Internal.XcpImports.Downloader_Send = function (downloader) {
	$asm02.MS.Internal.XcpImports.MethodEx$1(downloader, "Send");
};
$asm02.MS.Internal.XcpImports.Downloader_Abort = function (downloader) {
	$asm02.MS.Internal.XcpImports.MethodEx$1(downloader, "Abort");
};
$asm02.MS.Internal.XcpImports.Downloader_GetResponseText = function (downloader, partName) {
	var result = JSIL.Cast($asm02.MS.Internal.XcpImports.MethodPack(downloader.NativeObject, "GetResponseText", [partName]), System.String);
	System.GC.KeepAlive(downloader);
	return result;
};
$asm02.MS.Internal.XcpImports.Downloader_GetResponseStream = function (downloader) {
	var pMemory = new JSIL.Variable(0), size = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.GetDownloaderBytes(downloader.NativeObject, /* ref */ pMemory, /* ref */ size);
	System.GC.KeepAlive(downloader);
	return new $asm02.MS.Internal.InternalMemoryStream(pMemory.value, size.value, downloader.FinalUri);
};
$asm02.MS.Internal.XcpImports.Downloader_GetSize = function (downloader) {
	return JSIL.Cast($asm02.MS.Internal.XcpImports.MethodEx$1(downloader, "Downloader_GetSize"), System.Double);
};
$asm02.MS.Internal.XcpImports.Downloader_GetTotalSize = function (downloader) {
	return JSIL.Cast($asm02.MS.Internal.XcpImports.MethodEx$1(downloader, "Downloader_GetTotalSize"), System.Double);
};
$asm02.MS.Internal.XcpImports.MediaElement_Play = function (element) {
	$asm02.MS.Internal.XcpImports.MethodEx$1(element, "Play");
};
$asm02.MS.Internal.XcpImports.MediaElement_Stop = function (element) {
	$asm02.MS.Internal.XcpImports.MethodEx$1(element, "Stop");
};
$asm02.MS.Internal.XcpImports.MediaElement_Pause = function (element) {
	$asm02.MS.Internal.XcpImports.MethodEx$1(element, "Pause");
};
$asm02.MS.Internal.XcpImports.MediaElement_SetStreamSource = function (element, stream) {
	var array = JSIL.Array.New($asm02.MS.Internal.CValue, 1);
	var streamInteropWrapper = new $asm02.MS.Internal.Interop.StreamInteropWrapper(stream);
	$asm02.MS.Internal.XcpImports.CheckHResult(streamInteropWrapper.Initialize());
	var nativeObject = streamInteropWrapper.IManagedPeerBase_NativeObject;
	array[0].Type = MS.Internal.VType.valueInteropObject;
	array[0].m_pvValue = nativeObject.ToInt32();
	$asm02.MS.Internal.XcpImports.MethodEx$0(element.NativeObject, "MediaElement_SetStreamSource", array);
	System.GC.KeepAlive(streamInteropWrapper);
	System.GC.KeepAlive(element);
	return streamInteropWrapper;
};
$asm02.MS.Internal.XcpImports.MediaStreamSource_SetMediaOpenStreamCount = function (element, count) {
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.MediaStreamSource_SetMediaOpenStreamCountNative(element.NativeObject, count));
	System.GC.KeepAlive(element);
};
$asm02.MS.Internal.XcpImports.MediaAttributeCollection_GetItemByName = function (collection, attributeName) {
	var result = JSIL.Cast($asm02.MS.Internal.XcpImports.MethodPack(collection.NativeObject, "GetItemByName", [attributeName]), System.Windows.DependencyObject);
	System.GC.KeepAlive(collection);
	return result;
};
$asm02.MS.Internal.XcpImports.Application_RequestStartupEvent = function (app) {
	$asm02.MS.Internal.XcpImports.MethodPack(app.IManagedPeerBase_NativeObject, "RequestStartupEvent", JSIL.Array.New(System.Object, 0));
	System.GC.KeepAlive(app);
};
$asm02.MS.Internal.XcpImports.Application_RequestStartedEvent = function (app) {
	$asm02.MS.Internal.XcpImports.MethodPack(app.IManagedPeerBase_NativeObject, "RequestStartedEvent", JSIL.Array.New(System.Object, 0));
	System.GC.KeepAlive(app);
};
$asm02.MS.Internal.XcpImports.Application_Install = function (app, programmaticDetach) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var num = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Application_InstallNative(app.IManagedPeerBase_NativeObject, programmaticDetach, /* ref */ num));
	System.GC.KeepAlive(app);
	return (num.value !== 0);
};
$asm02.MS.Internal.XcpImports.Application_VerifyAuthenticodeSignature = function (/* ref */ signatureResult, /* ref */ trustResult, /* ref */ subjectName) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var zero = new JSIL.Variable(System.IntPtr.Zero);
	try {
		$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Application_VerifyAuthenticodeSignatureNative($asm02.MS.Internal.JoltHelper.Context, /* ref */ signatureResult, /* ref */ trustResult, /* ref */ zero));
		if (System.IntPtr.op_Inequality(System.IntPtr.Zero, zero.value)) {
			subjectName.value = System.Runtime.InteropServices.Marshal.PtrToStringUni$1(zero.value);
		} else {
			subjectName.value = null;
		}
	} finally {
		if (System.IntPtr.op_Inequality(System.IntPtr.Zero, zero.value)) {
			$asm02.MS.Internal.XcpImports.ReleaseNativeValue(zero.value, 6);
		}
	}
};
$asm02.MS.Internal.XcpImports.Application_CheckAndDownloadUpdate = function (app) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Application_CheckAndDownloadUpdateNative(app.IManagedPeerBase_NativeObject));
	System.GC.KeepAlive(app);
};
$asm02.MS.Internal.XcpImports.Application_GetAppIDForURI = function (AppUri, /* ref */ xapLocationStr) {
	var cValue = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	var cValue2 = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Application_GetAppIDForURINative(
			$asm02.MS.Internal.JoltHelper.Context, 
			AppUri.length, 
			AppUri, 
			/* ref */ cValue, 
			/* ref */ cValue2
		));
	xapLocationStr.value = JSIL.IgnoredMember(".ctor(value)");
	$asm02.MS.Internal.XcpImports.ReleaseNativeValue(JSIL.IgnoredMember(".ctor(value)"), 6);
	$asm02.MS.Internal.XcpImports.ReleaseNativeValue(JSIL.IgnoredMember(".ctor(value)"), 6);
	return JSIL.Cast(JSIL.IgnoredMember(".ctor(value)"), System.String);
};
$asm02.MS.Internal.XcpImports.FrameworkElement_GetLayoutClip = function (element) {
	return JSIL.Cast($asm02.MS.Internal.XcpImports.MethodEx$1(element, "GetLayoutClip"), System.Windows.Media.Geometry);
};
$asm02.MS.Internal.XcpImports.FrameworkElement_GetRawLayoutData = function (element) {
	if (System.IntPtr.op_Equality(element.NativeObject, System.IntPtr.Zero)) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", ["element"]);
	}
	var result = JSIL.Cast($asm02.MS.Internal.XcpImports.MethodEx$0(element.NativeObject, "GetLayoutInformation", JSIL.Array.New($asm02.MS.Internal.CValue, [new $asm02.MS.Internal.CValue()])), System.Array.Of(System.Single));
	System.GC.KeepAlive(element);
	return result;
};
$asm02.MS.Internal.XcpImports.MultiScaleImage_ZoomAboutLogicalPoint = JSIL.UntranslatableFunction("System.Void MS.Internal.XcpImports::MultiScaleImage_ZoomAboutLogicalPoint(System.Windows.Controls.MultiScaleImage,System.Double,System.Double,System.Double)");
$asm02.MS.Internal.XcpImports.MultiScaleImage_ElementToLogicalPoint = JSIL.UntranslatableFunction("System.Windows.Point MS.Internal.XcpImports::MultiScaleImage_ElementToLogicalPoint(System.Windows.Controls.MultiScaleImage,System.Windows.Point)");
$asm02.MS.Internal.XcpImports.MultiScaleImage_LogicalToElementPoint = JSIL.UntranslatableFunction("System.Windows.Point MS.Internal.XcpImports::MultiScaleImage_LogicalToElementPoint(System.Windows.Controls.MultiScaleImage,System.Windows.Point)");
$asm02.MS.Internal.XcpImports.MultiScaleTileSource_InvalidateTileLayer = function (source, level, tilePositionX, tilePositionY, tileLayer) {
	$asm02.MS.Internal.XcpImports.MethodPack(source.NativeObject, "InvalidateTileLayer", [level, tilePositionX, tilePositionY, tileLayer]);
	System.GC.KeepAlive(source);
};
$asm02.MS.Internal.XcpImports.TextBoxView_SetScrollOffset = function (textBoxView, offset) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.TextBoxView_SetScrollOffsetNative(textBoxView.NativeObject, offset.x, offset.y));
	System.GC.KeepAlive(textBoxView);
};
$asm02.MS.Internal.XcpImports.TextBoxView_EnableInternalScrolling = function (textBoxView, enableInternalHorizontalScrolling, enableInternalVerticalScrolling) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.TextBoxView_EnableInternalScrollingNative(textBoxView.NativeObject, enableInternalHorizontalScrolling, enableInternalVerticalScrolling));
	System.GC.KeepAlive(textBoxView);
};
$asm02.MS.Internal.XcpImports.GetErrorDetails = function (/* ref */ message, /* ref */ line, /* ref */ column) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var cValue = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	$asm02.MS.Internal.XcpImports.GetErrorDetailsNative($asm02.MS.Internal.JoltHelper.Context, /* ref */ line, /* ref */ column, /* ref */ cValue);
	message.value = JSIL.IgnoredMember(".ctor(value)");
	$asm02.MS.Internal.XcpImports.ReleaseNativeValue(JSIL.IgnoredMember(".ctor(value)"), 6);
};
$asm02.MS.Internal.XcpImports.Input_GetKeyboardModifiers = function () {
	var result = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Input_GetKeyboardModifiersNative(/* ref */ result));
	return result.value;
};
$asm02.MS.Internal.XcpImports.Host_GetIsWindowless = function () {
	var num = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Host_GetIsWindowlessNative($asm02.MS.Internal.JoltHelper.Context, /* ref */ num));
	return (num.value !== 0);
};
$asm02.MS.Internal.XcpImports.Host_GetEnableHTMLAccess = function () {
	var num = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Host_GetEnableHTMLAccessNative($asm02.MS.Internal.JoltHelper.Context, /* ref */ num));
	return (num.value !== 0);
};
$asm02.MS.Internal.XcpImports.Host_GetMaxFrameRate = function () {
	var result = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Host_GetMaxFrameRateNative($asm02.MS.Internal.JoltHelper.Context, /* ref */ result));
	return result.value;
};
$asm02.MS.Internal.XcpImports.Host_SetMaxFrameRate = function (maxFrameRate) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Host_SetMaxFrameRateNative($asm02.MS.Internal.JoltHelper.Context, maxFrameRate));
};
$asm02.MS.Internal.XcpImports.Host_GetEnableFrameRateCounter = function () {
	var num = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Host_GetEnableFrameRateCounterNative($asm02.MS.Internal.JoltHelper.Context, /* ref */ num));
	return (num.value !== 0);
};
$asm02.MS.Internal.XcpImports.Host_SetEnableFrameRateCounter = function (enable) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Host_SetEnableFrameRateCounterNative($asm02.MS.Internal.JoltHelper.Context, enable ? 1 : 0));
};
$asm02.MS.Internal.XcpImports.Host_GetEnableRedrawRegions = function () {
	var num = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Host_GetEnableRedrawRegionsNative($asm02.MS.Internal.JoltHelper.Context, /* ref */ num));
	return (num.value === 1);
};
$asm02.MS.Internal.XcpImports.Host_SetEnableRedrawRegions = function (enable) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Host_SetEnableRedrawRegionsNative($asm02.MS.Internal.JoltHelper.Context, enable ? 1 : 0));
};
$asm02.MS.Internal.XcpImports.Host_GetActualWidth = function () {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var num = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Host_GetActualWidthNative($asm02.MS.Internal.JoltHelper.Context, /* ref */ num));
	return num.value;
};
$asm02.MS.Internal.XcpImports.Host_GetActualHeight = function () {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var num = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Host_GetActualHeightNative($asm02.MS.Internal.JoltHelper.Context, /* ref */ num));
	return num.value;
};
$asm02.MS.Internal.XcpImports.Host_GetIsFullScreen = function () {
	var num = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Host_GetIsFullScreenNative($asm02.MS.Internal.JoltHelper.Context, /* ref */ num));
	return (num.value === 1);
};
$asm02.MS.Internal.XcpImports.Host_GetFullScreenOptions = function () {
	var result = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Host_GetFullScreenOptionsNative($asm02.MS.Internal.JoltHelper.Context, /* ref */ result));
	return result.value;
};
$asm02.MS.Internal.XcpImports.Host_SetFullScreenOptions = function (fullScreenOptions) {
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Host_SetFullScreenOptionsNative($asm02.MS.Internal.JoltHelper.Context, Math.floor(fullScreenOptions)));
};
$asm02.MS.Internal.XcpImports.Host_SetIsFullScreen = function (isFullScreen) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Host_SetIsFullScreenNative($asm02.MS.Internal.JoltHelper.Context, isFullScreen ? 1 : 0));
};
$asm02.MS.Internal.XcpImports.Host_GetIsLoaded = function () {
	var num = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Host_GetIsLoadedNative($asm02.MS.Internal.JoltHelper.Context, /* ref */ num));
	return (num.value === 1);
};
$asm02.MS.Internal.XcpImports.Host_GetBackground = function () {
	var num = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Host_GetBackgroundNative($asm02.MS.Internal.JoltHelper.Context, /* ref */ num));
	var a = ((num.value & -16777216) >>> 24);
	var r = ((num.value & 16711680) >>> 16);
	var g = ((num.value & 65280) >>> 8);
	var b = (num.value & 255);
	return System.Windows.Media.Color.FromArgb(a, r, g, b);
};
$asm02.MS.Internal.XcpImports.Host_IsVersionSupported = function (versionStr) {
	var num = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Host_IsVersionSupportedNative($asm02.MS.Internal.JoltHelper.Context, versionStr.length, versionStr, /* ref */ num));
	return (num.value === 1);
};
$asm02.MS.Internal.XcpImports.Host_GetSource = JSIL.UntranslatableFunction("System.String MS.Internal.XcpImports::Host_GetSource()");
$asm02.MS.Internal.XcpImports.Host_GetFinalSource = JSIL.UntranslatableFunction("System.String MS.Internal.XcpImports::Host_GetFinalSource()");
$asm02.MS.Internal.XcpImports.Host_GetEnableGPUAcceleration = function () {
	var num = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Host_GetEnableGPUAccelerationNative($asm02.MS.Internal.JoltHelper.Context, /* ref */ num));
	return (num.value !== 0);
};
$asm02.MS.Internal.XcpImports.Host_GetAutoZoom = function () {
	var num = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Host_GetAutoZoomNative($asm02.MS.Internal.JoltHelper.Context, /* ref */ num));
	return (num.value !== 0);
};
$asm02.MS.Internal.XcpImports.Host_SetAutoZoom = function (AutoZoom) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Host_SetAutoZoomNative($asm02.MS.Internal.JoltHelper.Context, AutoZoom));
};
$asm02.MS.Internal.XcpImports.Host_GetZoomFactor = function () {
	var num = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Host_GetZoomFactorNative($asm02.MS.Internal.JoltHelper.Context, /* ref */ num));
	return num.value;
};
$asm02.MS.Internal.XcpImports.Host_AddedManagedZoomedListener = function () {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Host_AddedManagedZoomedListenerNative($asm02.MS.Internal.JoltHelper.Context));
};
$asm02.MS.Internal.XcpImports.Host_RemovedManagedZoomedListener = function () {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Host_RemovedManagedZoomedListenerNative($asm02.MS.Internal.JoltHelper.Context));
};
$asm02.MS.Internal.XcpImports.Host_GetFileSystemAccessAllowed = function () {
	var result = new JSIL.Variable(false);
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Host_GetFileSystemAccessAllowedNative($asm02.MS.Internal.JoltHelper.Context, /* ref */ result));
	return result.value;
};
$asm02.MS.Internal.XcpImports.Host_GetNetworkingUnrestricted = function () {
	var result = new JSIL.Variable(false);
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Host_GetNetworkingUnrestrictedNative($asm02.MS.Internal.JoltHelper.Context, /* ref */ result));
	return result.value;
};
$asm02.MS.Internal.XcpImports.Xml_ValidateXmlLanguage = function (ietfLanguageTag) {
	var num = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Xml_ValidateXmlLanguageNative(ietfLanguageTag.length, ietfLanguageTag, /* ref */ num));
	return (num.value !== 0);
};
$asm02.MS.Internal.XcpImports.ResourceDictionary_Add = function (dictionary, key, doVal, isImplicitStyle) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var num = $asm02.MS.Internal.XcpImports.ResourceDictionary_AddNative(dictionary.NativeObject, key, doVal.NativeObject, isImplicitStyle);
	System.GC.KeepAlive(dictionary);
	System.GC.KeepAlive(doVal);
	if (num === -2146498302) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("ResourceDictionary_ItemWithSameKeyExists")]);
	}
	$asm02.MS.Internal.XcpImports.CheckHResult(num);
};
$asm02.MS.Internal.XcpImports.ResourceDictionary_Remove = function (dictionary, key, isImplicitStyle) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var num = $asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.ResourceDictionary_RemoveNative(dictionary.NativeObject, key, isImplicitStyle));
	System.GC.KeepAlive(dictionary);
	return (num === 0);
};
$asm02.MS.Internal.XcpImports.ResourceDictionary_Clear = function (dictionary) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.ResourceDictionary_ClearNative(dictionary.NativeObject));
	System.GC.KeepAlive(dictionary);
};
$asm02.MS.Internal.XcpImports.ResourceDictionary_Count = function (dictionary) {
	var result = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.ResourceDictionary_CountNative(dictionary.NativeObject, /* ref */ result));
	System.GC.KeepAlive(dictionary);
	return result.value;
};
$asm02.MS.Internal.XcpImports.ResourceDictionary_GetKey = function (dictionary, index) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var cValue = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	var flag = new JSIL.Variable(false);
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.ResourceDictionary_GetKeyNative(dictionary.NativeObject, index, /* ref */ cValue, /* ref */ flag));
	System.GC.KeepAlive(dictionary);
	var result = null;
	var text = JSIL.Cast(JSIL.IgnoredMember(".ctor(value)"), System.String);
	if (flag.value) {
		var style = JSIL.TryCast($asm02.MS.Internal.XcpImports.ResourceDictionary_GetItem(dictionary, text, true, true), System.Windows.Style);
		result = style.TargetType;
	} else {
		result = text;
	}
	return result;
};
$asm02.MS.Internal.XcpImports.ResourceDictionary_GetItem = function (dictionary, key, bShouldCheckMergedDictionaries, isImplicitStyle) {
	var num2 = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	var cValue = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	var num = $asm02.MS.Internal.XcpImports.ResourceDictionary_GetItemNative(
		dictionary.NativeObject, 
		key, 
		/* ref */ num2, 
		/* ref */ cValue, 
		bShouldCheckMergedDictionaries, 
		isImplicitStyle
	);
	System.GC.KeepAlive(dictionary);
	if (!((num === 0) || (num === -2147467259))) {
		throw $asm02.MS.Internal.Error.MarshalXresultAsException$0(num);
	}
	if (num !== -2147467259) {
		var propertyType = $asm02.MS.Internal.TypeProxy.QueryCoreType(num2.value);
		return $asm02.MS.Internal.XcpImports.ConvertCValueForManagedWithType$0(propertyType, /* ref */ cValue, num2.value, dictionary);
	}
	return null;
};
$asm02.MS.Internal.XcpImports.TraceXcpEvent = function (marker, type) {
	$asm02.MS.Internal.XcpImports.TraceXcpEventNative(Math.floor(marker), Math.floor(type));
};
$asm02.MS.Internal.XcpImports.TraceXcpEventVerbose = function (marker, data, type) {
	$asm02.MS.Internal.XcpImports.TraceXcpEventVerboseNative(Math.floor(marker), data, Math.floor(type));
};
$asm02.MS.Internal.XcpImports.GetXcpTraceState = function (/* ref */ level, /* ref */ suite, /* ref */ traceFlags) {
	$asm02.MS.Internal.XcpImports.GetXcpTraceStateNative(/* ref */ level, /* ref */ suite, /* ref */ traceFlags);
};
$asm02.MS.Internal.XcpImports.Application_SetVisualRoot = function (value) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Application_SetVisualRootNative($asm02.MS.Internal.JoltHelper.Context, value.NativeObject));
	System.GC.KeepAlive(value);
};
$asm02.MS.Internal.XcpImports.Application_GetWindow = function () {
	var typeIndex = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	var outVal = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Application_GetWindowNative($asm02.MS.Internal.JoltHelper.Context, /* ref */ outVal, /* ref */ typeIndex));
	return JSIL.Cast($asm02.MS.Internal.XcpImports.ConvertType$0(outVal.value.MemberwiseClone(), typeIndex.value, true, null), System.Windows.Window);
};
$asm02.MS.Internal.XcpImports.Application_LoadComponent = JSIL.UntranslatableFunction("System.UInt32 MS.Internal.XcpImports::Application_LoadComponent(MS.Internal.IManagedPeerBase,System.String,System.IO.UnmanagedMemoryStream,System.UInt32,System.String)");
$asm02.MS.Internal.XcpImports.Application_GetAllowNavigation = function () {
	var result = new JSIL.Variable(false);
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Application_GetAllowNavigationNative($asm02.MS.Internal.JoltHelper.Context, /* ref */ result));
	return result.value;
};
$asm02.MS.Internal.XcpImports.Application_SetHasElevatedPermissions = function (hasElevatedPermisisons) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Application_SetHasElevatedPermissionsNative($asm02.MS.Internal.JoltHelper.Context, hasElevatedPermisisons));
};
$asm02.MS.Internal.XcpImports.Application_GetCurrent = function (/* ref */ pApp) {
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Application_GetCurrentNative($asm02.MS.Internal.JoltHelper.Context, /* ref */ pApp));
};
$asm02.MS.Internal.XcpImports.Application_GetInitParams = JSIL.UntranslatableFunction("System.String MS.Internal.XcpImports::Application_GetInitParams()");
$asm02.MS.Internal.XcpImports.Host_GetIsMouseInNotificationWindow = function () {
	var result = new JSIL.Variable(false);
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Host_GetIsMouseInNotificationWindowNative($asm02.MS.Internal.JoltHelper.Context, /* ref */ result));
	return result.value;
};
$asm02.MS.Internal.XcpImports.Host_GetNavigationState = JSIL.UntranslatableFunction("System.String MS.Internal.XcpImports::Host_GetNavigationState()");
$asm02.MS.Internal.XcpImports.Host_HasNavigationStateChanged = JSIL.UntranslatableFunction("System.Boolean MS.Internal.XcpImports::Host_HasNavigationStateChanged(System.String&)");
$asm02.MS.Internal.XcpImports.Host_SetNavigationState = function (state) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Host_SetNavigationStateNative($asm02.MS.Internal.JoltHelper.Context, state));
};
$asm02.MS.Internal.XcpImports.Deployment_GetCurrent = function (/* ref */ pDeployment) {
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Deployment_GetCurrentNative($asm02.MS.Internal.JoltHelper.Context, /* ref */ pDeployment));
};
$asm02.MS.Internal.XcpImports.PostGCCollectMessage = function () {
	$asm02.MS.Internal.XcpImports.PostGCCollectMessageNative($asm02.MS.Internal.JoltHelper.Context);
};
$asm02.MS.Internal.XcpImports.FocusManager_GetFocusedElement = function () {
	var typeIndex = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	var outVal = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.FocusManager_GetFocusedElementNative($asm02.MS.Internal.JoltHelper.Context, /* ref */ outVal, /* ref */ typeIndex));
	return $asm02.MS.Internal.XcpImports.ConvertType$0(outVal.value.MemberwiseClone(), typeIndex.value, true, null);
};
$asm02.MS.Internal.XcpImports.FocusManager_SetFocusedElement = function (pDO) {
	var result = new JSIL.Variable(false);
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.FocusManager_SetFocusedElementNative($asm02.MS.Internal.JoltHelper.Context, pDO, /* ref */ result));
	return result.value;
};
$asm02.MS.Internal.XcpImports.LayoutInformation_GetLayoutExceptionElement = function () {
	var typeIndex = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	var outVal = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.LayoutInformation_GetLayoutExceptionElementNative($asm02.MS.Internal.JoltHelper.Context, /* ref */ outVal, /* ref */ typeIndex));
	return $asm02.MS.Internal.XcpImports.ConvertType$0(outVal.value.MemberwiseClone(), typeIndex.value, true, null);
};
$asm02.MS.Internal.XcpImports.LayoutInformation_SetLayoutExceptionElement = function (element) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.LayoutInformation_SetLayoutExceptionElementNative($asm02.MS.Internal.JoltHelper.Context, element.NativeObject));
	System.GC.KeepAlive(element);
};
$asm02.MS.Internal.XcpImports.SystemSetting_GetIsHighContrastEnabled = function () {
	var num = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.SystemSetting_GetIsHighContrastEnabledNative(/* ref */ num));
	return (num.value === 1);
};
$asm02.MS.Internal.XcpImports.SystemSetting_GetSystemColor = function (colorIndex) {
	var result = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.SystemSetting_GetSystemColorNative(colorIndex, /* ref */ result));
	return result.value;
};
$asm02.MS.Internal.XcpImports.DependencyObject_IsPointerValid = function (obj) {
	return ((obj.NativeObjectSafeHandle !== null) && !obj.NativeObjectSafeHandle.IsInvalid);
};
$asm02.MS.Internal.XcpImports.GetIsNativeHosted = function () {
	var num = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.GetIsNativeHostedNative($asm02.MS.Internal.JoltHelper.Context, /* ref */ num));
	return (num.value === 1);
};
$asm02.MS.Internal.XcpImports.LocalMessageSenderCreate = function (sendCompletedFn, /* ref */ nativePtr) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.LocalMessageSenderCreateNative($asm02.MS.Internal.JoltHelper.Context, sendCompletedFn, /* ref */ nativePtr));
};
$asm02.MS.Internal.XcpImports.LocalMessageReceiverCreate = function (messageReceivedFn, /* ref */ nativePtr) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.LocalMessageReceiverCreateNative($asm02.MS.Internal.JoltHelper.Context, messageReceivedFn, /* ref */ nativePtr));
};
$asm02.MS.Internal.XcpImports.LocalMessageSend = function (managedPeer, message, receiverName, receiverDomain, managedKey) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.LocalMessageSendNative(
			managedPeer.IManagedPeerBase_NativeObject, 
			(message === null) ? 0 : message.length, 
			message, 
			(receiverName === null) ? 0 : receiverName.length, 
			receiverName, 
			(receiverDomain === null) ? 0 : receiverDomain.length, 
			receiverDomain, 
			managedKey
		));
	System.GC.KeepAlive(managedPeer);
};
$asm02.MS.Internal.XcpImports.LocalMessageReceive = function (managedPeer, receiverName, nameScope, allowedSenderDomains, disableSenderTrustCheck) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
	if (allowedSenderDomains !== null) {
		var enumerator = allowedSenderDomains.IEnumerable$b1_GetEnumerator();
		try {
		__loop0__: 
			while (enumerator.IEnumerator_MoveNext()) {
				var current = enumerator.IEnumerator$b1_Current;
				if (stringBuilder.Length > 0) {
					stringBuilder.Append$7(",");
				}
				stringBuilder.Append$2(current);
			}
		} finally {
			if (enumerator !== null) {
				enumerator.IDisposable_Dispose();
			}
		}
	}
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.LocalMessageReceiveNative(
			managedPeer.IManagedPeerBase_NativeObject, 
			receiverName.length, 
			receiverName, 
			!JSIL.Cast(nameScope, System.Boolean) ? 0 : 1, 
			stringBuilder.Length, 
			stringBuilder.toString(), 
			disableSenderTrustCheck ? 1 : 0
		));
	System.GC.KeepAlive(managedPeer);
};
$asm02.MS.Internal.XcpImports.LocalMessageStopReceive = function (managedPeer) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.LocalMessageStopReceiveNative(managedPeer.IManagedPeerBase_NativeObject));
	System.GC.KeepAlive(managedPeer);
};
$asm02.MS.Internal.XcpImports.ClearCustomTypeFactoryCache = function () {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.ClearCustomTypeFactoryCacheNative($asm02.MS.Internal.JoltHelper.Context));
};
$asm02.MS.Internal.XcpImports.RefreshXamlSchemaContext = function (bRefreshOnlyXmlnsDefinitions) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.RefreshXamlSchemaContextNative($asm02.MS.Internal.JoltHelper.Context, bRefreshOnlyXmlnsDefinitions));
	System.Windows.Controls.Control.ResetStaticData();
};
$asm02.MS.Internal.XcpImports.VisualStateManager_GoToState = function (reference, StateName, useTransitions, /* ref */ refreshInheritanceContext) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var num = $asm02.MS.Internal.XcpImports.GoToStateNative(reference.NativeObject, StateName, useTransitions);
	System.GC.KeepAlive(reference);
	refreshInheritanceContext.value = (num === -2146498299);
	if (num === 0) {
		return true;
	}
	if (!((num !== 1) && !refreshInheritanceContext.value)) {
		return false;
	}
	throw $asm02.MS.Internal.Error.MarshalXresultAsException$0(num);
};
$asm02.MS.Internal.XcpImports.VisualStateManager_GoToStateInternal = function (reference, root, group, state, useTransitions, /* ref */ refreshInheritanceContext) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var pControl = reference ? reference.NativeObject : System.IntPtr.Zero;
	var num = $asm02.MS.Internal.XcpImports.GoToStateInternalNative(
		pControl, 
		root.NativeObject, 
		group.NativeObject, 
		state.NativeObject, 
		useTransitions
	);
	System.GC.KeepAlive(reference);
	System.GC.KeepAlive(root);
	System.GC.KeepAlive(group);
	System.GC.KeepAlive(state);
	refreshInheritanceContext.value = (num === -2146498299);
	if (num === 0) {
		return true;
	}
	if (!((num !== 1) && !refreshInheritanceContext.value)) {
		return false;
	}
	throw $asm02.MS.Internal.Error.MarshalXresultAsException$0(num);
};
$asm02.MS.Internal.XcpImports.VisualStateGroup_GetCurrentState = function (reference) {
	var typeIndex = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	var outVal = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.GetCurrentStateNative(reference.NativeObject, /* ref */ outVal, /* ref */ typeIndex));
	System.GC.KeepAlive(reference);
	return JSIL.TryCast($asm02.MS.Internal.XcpImports.ConvertType$0(outVal.value.MemberwiseClone(), typeIndex.value, true, reference), System.Windows.VisualState);
};
$asm02.MS.Internal.XcpImports.SuppressIsEnabled = function (control, suppress) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.SuppressIsEnabledNative(control.NativeObject, suppress);
	System.GC.KeepAlive(control);
};
$asm02.MS.Internal.XcpImports.GetTemplatedParent = function (obj) {
	var typeIndex = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	var outVal = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.GetTemplatedParentNative(obj.NativeObject, /* ref */ outVal, /* ref */ typeIndex));
	System.GC.KeepAlive(obj);
	return JSIL.Cast($asm02.MS.Internal.XcpImports.ConvertType$0(outVal.value.MemberwiseClone(), typeIndex.value, true, obj), System.Windows.DependencyObject);
};
$asm02.MS.Internal.XcpImports.ResolveXamlPrefix = function (prefix, /* ref */ clrNamespace, /* ref */ clrAssembly) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var outVal = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	var outVal2 = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.ResolveXamlPrefixNative($asm02.MS.Internal.JoltHelper.Context, prefix, /* ref */ outVal, /* ref */ outVal2));
	clrNamespace.value = JSIL.Cast($asm02.MS.Internal.XcpImports.ConvertType$0(outVal.value.MemberwiseClone(), 0, true, null), System.String);
	clrAssembly.value = JSIL.Cast($asm02.MS.Internal.XcpImports.ConvertType$0(outVal2.value.MemberwiseClone(), 0, true, null), System.String);
};
$asm02.MS.Internal.XcpImports.GetPropertyUsingCurrentOWContext = function (fullyQualifiedName) {
	var propertyToken = new JSIL.Variable(new $asm02.MS.Internal.XamlPropertyToken());
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.GetPropertyUsingCurrentOWContextNative($asm02.MS.Internal.JoltHelper.Context, fullyQualifiedName, /* ref */ propertyToken));
	return $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetDependencyPropertyFromToken(propertyToken.value.MemberwiseClone());
};
$asm02.MS.Internal.XcpImports.GetNativePropertyInfo = function (propertyToken, /* ref */ propertyName, /* ref */ ownerTypeToken) {
	var handle = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	var outVal = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.GetNativePropertyInfoNative($asm02.MS.Internal.JoltHelper.Context, propertyToken._handle.Handle, /* ref */ outVal, /* ref */ handle));
	propertyName.value = JSIL.Cast($asm02.MS.Internal.XcpImports.ConvertType$0(outVal.value.MemberwiseClone(), 0, true, null), System.String);
	ownerTypeToken.value = new $asm02.MS.Internal.XamlTypeToken($asm02.MS.Internal.XamlTypeInfoProviderKind.tpkNative, handle.value);
};
$asm02.MS.Internal.XcpImports.XamlSchemaContext_ResolvePropertyName = function (typeToken, propertyName, /* ref */ propertyToken, /* ref */ propertyTypeToken) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var length = propertyName.length;
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.XamlSchemaContext_ResolvePropertyNameNative(
			$asm02.MS.Internal.JoltHelper.Context, 
			typeToken, 
			propertyName, 
			length, 
			/* ref */ propertyToken, 
			/* ref */ propertyTypeToken
		));
};
$asm02.MS.Internal.XcpImports.XamlSchemaContext_AddAssembly = function (assemblyToken, assemblyName) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var length = assemblyName.length;
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.XamlSchemaContext_AddAssemblyNative($asm02.MS.Internal.JoltHelper.Context, assemblyToken, assemblyName, length));
};
$asm02.MS.Internal.XcpImports.XamlSchemaContext_AddAssemblyXmlnsDefinition = function (assemblyToken, xmlNamespace, typeNamespaceToken, typeNamespace) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var length = xmlNamespace.length;
	var length2 = typeNamespace.length;
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.XamlSchemaContext_AddAssemblyXmlnsDefinitionNative(
			$asm02.MS.Internal.JoltHelper.Context, 
			assemblyToken, 
			xmlNamespace, 
			length, 
			typeNamespaceToken, 
			typeNamespace, 
			length2
		));
};
$asm02.MS.Internal.XcpImports.GetInheritanceParent = function (obj) {
	var typeIndex = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	var outVal = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.GetInheritanceParentNative(obj.NativeObject, /* ref */ outVal, /* ref */ typeIndex));
	System.GC.KeepAlive(obj);
	return JSIL.Cast($asm02.MS.Internal.XcpImports.ConvertType$0(outVal.value.MemberwiseClone(), typeIndex.value, true, obj), System.Windows.DependencyObject);
};
$asm02.MS.Internal.XcpImports.GetIsActive = function (o) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var num = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.GetIsActiveNative(o.NativeObject, /* ref */ num));
	System.GC.KeepAlive(o);
	return (num.value === 1);
};
$asm02.MS.Internal.XcpImports.GetAppVersion = function (/* ref */ majorVersion, /* ref */ minorVersion) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.GetAppVersionNative($asm02.MS.Internal.JoltHelper.Context, /* ref */ majorVersion, /* ref */ minorVersion));
};
$asm02.MS.Internal.XcpImports.EasingFunction_EaseInCore = function (easingFunction, normalizedTime) {
	var result = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.EasingFunction_EaseInCoreNative(easingFunction.NativeObject, /* ref */ result, normalizedTime));
	System.GC.KeepAlive(easingFunction);
	return result.value;
};
$asm02.MS.Internal.XcpImports.Analytics_Start$1 = function () {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Analytics_Start$0($asm02.MS.Internal.JoltHelper.Context));
};
$asm02.MS.Internal.XcpImports.Analytics_Stop$1 = function () {
	if (!$asm02.MS.Internal.JoltHelper.Context.IsNull()) {
		$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Analytics_Stop$0($asm02.MS.Internal.JoltHelper.Context));
	}
};
$asm02.MS.Internal.XcpImports.Analytics_GetAverageProcessLoad$1 = function () {
	var result = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Analytics_GetAverageProcessLoad$0($asm02.MS.Internal.JoltHelper.Context, /* ref */ result));
	return result.value;
};
$asm02.MS.Internal.XcpImports.Analytics_GetAverageProcessorLoad$1 = function () {
	var result = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Analytics_GetAverageProcessorLoad$0($asm02.MS.Internal.JoltHelper.Context, /* ref */ result));
	return result.value;
};
$asm02.MS.Internal.XcpImports.Analytics_GetGpuInformation = JSIL.UntranslatableFunction("System.Collections.ObjectModel.ReadOnlyCollection`1<System.Windows.GpuInformation> MS.Internal.XcpImports::Analytics_GetGpuInformation()");
$asm02.MS.Internal.XcpImports.ShaderEffect_SetConstant = function (obj, register, shaderConstants) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var num = $asm02.MS.Internal.XcpImports.ShaderEffect_SetConstantNative(obj.NativeObject, register, shaderConstants);
	System.GC.KeepAlive(obj);
	if (num !== 0) {
		throw $asm02.MS.Internal.Error.MarshalXresultAsException$0(num);
	}
};
$asm02.MS.Internal.XcpImports.WriteableBitmap_CopyPixels = function (wb, ptrPixels) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.WriteableBitmap_CopyPixelsNative(wb.NativeObject, ptrPixels));
	System.GC.KeepAlive(wb);
};
$asm02.MS.Internal.XcpImports.WriteableBitmap_Create = function (wb, ptrMemory, nWidth, nHeight) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.WriteableBitmap_CreateNative(wb.NativeObject, ptrMemory, nWidth, nHeight));
	System.GC.KeepAlive(wb);
};
$asm02.MS.Internal.XcpImports.WriteableBitmap_CreateFromSource = function (wb, ptrMemory, source, /* ref */ bHasProtectedContent) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var num = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.WriteableBitmap_CreateFromSourceNative(wb.NativeObject, ptrMemory, source.NativeObject, /* ref */ num));
	System.GC.KeepAlive(wb);
	System.GC.KeepAlive(source);
	bHasProtectedContent.value = (num.value !== 0);
};
$asm02.MS.Internal.XcpImports.WriteableBitmap_CreateFromUIElement = function (wb, element, transform, ptrPixels, /* ref */ bHasProtectedContent) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var num = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.WriteableBitmap_CreateFromUIElementNative(
			wb.NativeObject, 
			element.NativeObject, 
			transform.NativeObject, 
			ptrPixels, 
			/* ref */ num
		));
	System.GC.KeepAlive(wb);
	System.GC.KeepAlive(element);
	System.GC.KeepAlive(transform);
	bHasProtectedContent.value = (num.value !== 0);
};
$asm02.MS.Internal.XcpImports.WriteableBitmap_CalculateSize = function (wb, element, transform) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.WriteableBitmap_CalculateSizeNative(wb.NativeObject, element.NativeObject, transform.NativeObject));
	System.GC.KeepAlive(wb);
	System.GC.KeepAlive(element);
	System.GC.KeepAlive(transform);
};
$asm02.MS.Internal.XcpImports.WriteableBitmap_Invalidate = function (wb) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.WriteableBitmap_InvalidateNative(wb.NativeObject));
	System.GC.KeepAlive(wb);
};
$asm02.MS.Internal.XcpImports.WriteableBitmap_Render = function (wb, element, transform, /* ref */ bHasProtectedContent) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var num = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.WriteableBitmap_RenderNative(wb.NativeObject, element.NativeObject, transform.NativeObject, /* ref */ num));
	System.GC.KeepAlive(wb);
	System.GC.KeepAlive(element);
	System.GC.KeepAlive(transform);
	bHasProtectedContent.value = (num.value !== 0);
};
$asm02.MS.Internal.XcpImports.GetResourceString = function (nStringID) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var outVal = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.GetResourceStringNative($asm02.MS.Internal.JoltHelper.Context, nStringID, /* ref */ outVal));
	return JSIL.Cast($asm02.MS.Internal.XcpImports.ConvertType$0(outVal.value.MemberwiseClone(), 0, true, null), System.String);
};
$asm02.MS.Internal.XcpImports.DesignerProperties_SetIsInDesignMode = function (value) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.DesignerProperties_SetIsInDesignModeNative($asm02.MS.Internal.JoltHelper.Context, value));
};
$asm02.MS.Internal.XcpImports.LayoutManager_ClearErrorOccurredDuringLayout = function () {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.LayoutManager_ClearErrorOccurredDuringLayoutNative($asm02.MS.Internal.JoltHelper.Context));
};
$asm02.MS.Internal.XcpImports.LayoutManager_DidErrorOccurDuringLayout = function () {
	var result = new JSIL.Variable(false);
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.LayoutManager_DidErrorOccurDuringLayoutNative($asm02.MS.Internal.JoltHelper.Context, /* ref */ result));
	return result.value;
};
$asm02.MS.Internal.XcpImports.PrintDocument_ProcessPrintRequest = function (pd, ppes) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.PrintDocument_ProcessPrintRequestNative(pd.NativeObject, ppes.NativeObject));
	System.GC.KeepAlive(pd);
	System.GC.KeepAlive(ppes);
};
$asm02.MS.Internal.XcpImports.PrintDocument_LaunchPrintDialog = function (pd, hwnd, documentName) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.PrintDocument_LaunchPrintDialogNative(pd.NativeObject, hwnd, System.String.IsNullOrEmpty(documentName) ? 0 : documentName.length, documentName));
	System.GC.KeepAlive(pd);
};
$asm02.MS.Internal.XcpImports.PrintDocument_Reset = function (pd) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.PrintDocument_ResetNative(pd.NativeObject));
	System.GC.KeepAlive(pd);
};
$asm02.MS.Internal.XcpImports.RichTextBoxView_SetScrollOffset = function (richTextBoxView, offset) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.RichTextBoxView_SetScrollOffsetNative(richTextBoxView.NativeObject, offset.x, offset.y));
	System.GC.KeepAlive(richTextBoxView);
};
$asm02.MS.Internal.XcpImports.RichTextSelection_GetEdge = function (richTextBox, edge) {
	var typeIndex = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	var outVal = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.RichTextSelection_GetEdgeNative(richTextBox.NativeObject, Math.floor(edge), /* ref */ outVal, /* ref */ typeIndex));
	System.GC.KeepAlive(richTextBox);
	var textPointer = JSIL.TryCast($asm02.MS.Internal.XcpImports.ConvertType$0(outVal.value.MemberwiseClone(), typeIndex.value, true, richTextBox), $asm02.MS.Internal.TextPointerWrapper);
	return new System.Windows.Documents.TextPointer(textPointer);
};
$asm02.MS.Internal.XcpImports.RichTextSelection_SetPropertyValue = JSIL.UntranslatableFunction("System.Void MS.Internal.XcpImports::RichTextSelection_SetPropertyValue(System.Windows.Controls.RichTextBox,System.Windows.DependencyProperty,System.Object)");
$asm02.MS.Internal.XcpImports.RichTextSelection_GetPropertyValue = function (richTextBox, property) {
	var num = new JSIL.Variable(0), outDOType = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	var cValue = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.RichTextSelection_GetPropertyValueNative(
			richTextBox.NativeObject, 
			property.m_nKnownId, 
			/* ref */ num, 
			/* ref */ cValue, 
			/* ref */ outDOType
		));
	System.GC.KeepAlive(richTextBox);
	if (num.value !== 0) {
		return $asm02.MS.Internal.XcpImports.ConvertCValueForManaged(property, /* ref */ cValue, outDOType.value, richTextBox);
	}
	return System.Windows.DependencyProperty.UnsetValue;
};
$asm02.MS.Internal.XcpImports.RichTextSelection_GetText = JSIL.UntranslatableFunction("System.String MS.Internal.XcpImports::RichTextSelection_GetText(System.Windows.Controls.RichTextBox,System.Boolean)");
$asm02.MS.Internal.XcpImports.RichTextSelection_SetText = JSIL.UntranslatableFunction("System.Void MS.Internal.XcpImports::RichTextSelection_SetText(System.Windows.Controls.RichTextBox,System.Boolean,System.String)");
$asm02.MS.Internal.XcpImports.RichTextSelection_Insert = function (richTextBox, element) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var cValue = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	cValue.value.SetValue(element);
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.RichTextSelection_InsertNative(richTextBox.NativeObject, /* ref */ cValue));
	System.GC.KeepAlive(richTextBox);
};
$asm02.MS.Internal.XcpImports.RichTextSelection_Select = function (richTextBox, anchorPosition, movingPosition) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var cValue = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	cValue.value.SetValue(anchorPosition.InternalPointer);
	var cValue2 = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	cValue2.value.SetValue(movingPosition.InternalPointer);
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.RichTextSelection_SelectNative(richTextBox.NativeObject, /* ref */ cValue, /* ref */ cValue2));
	System.GC.KeepAlive(richTextBox);
};
$asm02.MS.Internal.XcpImports.TextBox_GetBaselineOffset = function (textBox) {
	var result = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Text_GetBaselineOffsetNative(textBox.NativeObject, /* ref */ result));
	System.GC.KeepAlive(textBox);
	return result.value;
};
$asm02.MS.Internal.XcpImports.PasswordBox_GetBaselineOffset = function (passwordBox) {
	var result = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Text_GetBaselineOffsetNative(passwordBox.NativeObject, /* ref */ result));
	System.GC.KeepAlive(passwordBox);
	return result.value;
};
$asm02.MS.Internal.XcpImports.RichTextBox_GetBaselineOffset = function (richTextBox) {
	var result = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Text_GetBaselineOffsetNative(richTextBox.NativeObject, /* ref */ result));
	System.GC.KeepAlive(richTextBox);
	return result.value;
};
$asm02.MS.Internal.XcpImports.TextBlock_GetBaselineOffset = function (textBlock) {
	var result = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Text_GetBaselineOffsetNative(textBlock.NativeObject, /* ref */ result));
	System.GC.KeepAlive(textBlock);
	return result.value;
};
$asm02.MS.Internal.XcpImports.Window_Activate = function (element) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var cValue = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Window_ActivateNative(element.NativeObject, /* ref */ cValue));
	System.GC.KeepAlive(element);
	return System.Convert.ToBoolean$9(cValue.value.m_nValue);
};
$asm02.MS.Internal.XcpImports.Window_Close = function (window) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Window_CloseNative(window.NativeObject));
	System.GC.KeepAlive(window);
};
$asm02.MS.Internal.XcpImports.Window_DragMove = function (window) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Window_DragMoveNative(window.NativeObject));
	System.GC.KeepAlive(window);
};
$asm02.MS.Internal.XcpImports.Window_DragResize = function (window, resizeEdge) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Window_DragResizeNative(window.NativeObject, Math.floor(resizeEdge)));
	System.GC.KeepAlive(window);
};
$asm02.MS.Internal.XcpImports.Window_Minimize = function (element) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var cValue = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Window_MinimizeNative(element.NativeObject, /* ref */ cValue));
	System.GC.KeepAlive(element);
	return System.Convert.ToBoolean$9(cValue.value.m_nValue);
};
$asm02.MS.Internal.XcpImports.Window_Maximize = function (element) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var cValue = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Window_MaximizeNative(element.NativeObject, /* ref */ cValue));
	System.GC.KeepAlive(element);
	return System.Convert.ToBoolean$9(cValue.value.m_nValue);
};
$asm02.MS.Internal.XcpImports.Window_Restore = function (element) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var cValue = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Window_RestoreNative(element.NativeObject, /* ref */ cValue));
	System.GC.KeepAlive(element);
	return System.Convert.ToBoolean$9(cValue.value.m_nValue);
};
$asm02.MS.Internal.XcpImports.CaptureGraph_Start = function (Source) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.CaptureGraph_StartNative(Source.NativeObject));
	System.GC.KeepAlive(Source);
};
$asm02.MS.Internal.XcpImports.CaptureGraph_Stop = function (Source) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.CaptureGraph_StopNative(Source.NativeObject));
	System.GC.KeepAlive(Source);
};
$asm02.MS.Internal.XcpImports.CaptureGraph_GetState = function (Source) {
	var result = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.CaptureGraph_GetStateNative(Source.NativeObject, /* ref */ result));
	System.GC.KeepAlive(Source);
	return result.value;
};
$asm02.MS.Internal.XcpImports.CaptureGraph_GetHasDeviceAccess = function () {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var result = new JSIL.Variable(false);
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.CaptureGraph_GetHasDeviceAccessNative($asm02.MS.Internal.JoltHelper.Context, /* ref */ result));
	return result.value;
};
$asm02.MS.Internal.XcpImports.CaptureGraph_RequestDeviceAccess = function () {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var result = new JSIL.Variable(false);
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.CaptureGraph_RequestDeviceAccessNative($asm02.MS.Internal.JoltHelper.Context, /* ref */ result));
	return result.value;
};
$asm02.MS.Internal.XcpImports.CaptureGraph_GetAvailableVideoCaptureDevices = function () {
	var typeIndex = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	var outVal = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.CaptureGraph_GetAvailableVideoCaptureDevicesNative($asm02.MS.Internal.JoltHelper.Context, /* ref */ typeIndex, /* ref */ outVal));
	return JSIL.New(System.Collections.ObjectModel.Collection$b1.Of(System.Windows.Media.VideoCaptureDevice), "_ctor$1", [JSIL.Cast($asm02.MS.Internal.XcpImports.ConvertType$0(outVal.value.MemberwiseClone(), typeIndex.value, true, null), System.Collections.Generic.IList$b1.Of(System.Windows.Media.VideoCaptureDevice))]);
};
$asm02.MS.Internal.XcpImports.CaptureGraph_GetAvailableAudioCaptureDevices = function () {
	var typeIndex = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	var outVal = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.CaptureGraph_GetAvailableAudioCaptureDevicesNative($asm02.MS.Internal.JoltHelper.Context, /* ref */ typeIndex, /* ref */ outVal));
	return JSIL.New(System.Collections.ObjectModel.Collection$b1.Of(System.Windows.Media.AudioCaptureDevice), "_ctor$1", [JSIL.Cast($asm02.MS.Internal.XcpImports.ConvertType$0(outVal.value.MemberwiseClone(), typeIndex.value, true, null), System.Windows.Media.AudioCaptureDeviceCollection)]);
};
$asm02.MS.Internal.XcpImports.VideoSink_SetSource = function (Sink, Source) {
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.VideoSink_SetSourceNative(Sink.NativeObject, Source ? Source.NativeObject : System.IntPtr.Zero));
	System.GC.KeepAlive(Sink);
	System.GC.KeepAlive(Source);
};
$asm02.MS.Internal.XcpImports.VideoSink_GetSource = function (Sink) {
	var typeIndex = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	var outVal = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.VideoSink_GetSourceNative(Sink.NativeObject, /* ref */ typeIndex, /* ref */ outVal));
	System.GC.KeepAlive(Sink);
	return JSIL.Cast($asm02.MS.Internal.XcpImports.ConvertType$0(outVal.value.MemberwiseClone(), typeIndex.value, true, null), System.Windows.Media.CaptureSource);
};
$asm02.MS.Internal.XcpImports.AudioSink_SetSource = function (Sink, Source) {
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.AudioSink_SetSourceNative(Sink.NativeObject, Source ? Source.NativeObject : System.IntPtr.Zero));
	System.GC.KeepAlive(Sink);
	System.GC.KeepAlive(Source);
};
$asm02.MS.Internal.XcpImports.AudioSink_GetSource = function (Sink) {
	var typeIndex = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	var outVal = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.AudioSink_GetSourceNative(Sink.NativeObject, /* ref */ typeIndex, /* ref */ outVal));
	System.GC.KeepAlive(Sink);
	return JSIL.Cast($asm02.MS.Internal.XcpImports.ConvertType$0(outVal.value.MemberwiseClone(), typeIndex.value, true, null), System.Windows.Media.CaptureSource);
};
$asm02.MS.Internal.XcpImports.VideoCaptureDevice_SetDesiredFormat = function (Device, Format) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	if (Format !== null) {
		var internalFormat = new JSIL.Variable(Format.InternalFormat.MemberwiseClone());
		$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.VideoCaptureDevice_SetDesiredFormatNative$0(Device.NativeObject, /* ref */ internalFormat));
		System.GC.KeepAlive(Device);
		return;
	}
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.VideoCaptureDevice_SetDesiredFormatNative$1(Device.NativeObject, System.IntPtr.Zero));
	System.GC.KeepAlive(Device);
};
$asm02.MS.Internal.XcpImports.VideoCaptureDevice_GetDesiredFormat = function (Device) {
	var flag = new JSIL.Variable(false);
	$asm02.MS.Internal.XcpImports.CheckThread();
	var result = null;
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.VideoCaptureDevice_HasDesiredFormatNative(Device.NativeObject, /* ref */ flag));
	System.GC.KeepAlive(Device);
	if (flag.value) {
		var format = new JSIL.Variable(new $asm02.System.Windows.Media.PALVideoFormat());
		$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.VideoCaptureDevice_GetDesiredFormatNative(Device.NativeObject, /* ref */ format));
		System.GC.KeepAlive(Device);
		result = JSIL.New(System.Windows.Media.VideoFormat, "_ctor$0", [format.value]);
	}
	return result;
};
$asm02.MS.Internal.XcpImports.VideoCaptureDevice_GetSupportedFormats = function (Device) {
	var num = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.VideoCaptureDevice_GetSupportedFormatCountNative(Device.NativeObject, /* ref */ num));
	System.GC.KeepAlive(Device);
	var array = JSIL.Array.New($asm02.System.Windows.Media.PALVideoFormat, num.value);
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.VideoCaptureDevice_GetSupportedFormatsNative(Device.NativeObject, num.value, array));
	System.GC.KeepAlive(Device);
	var collection = JSIL.New(System.Collections.ObjectModel.Collection$b1.Of(System.Windows.Media.VideoFormat), "_ctor$0", []);
	var array2 = array;
__loop0__: 
	for (var i = 0; i < array2.length; ++i) {
		var format = array2[i].MemberwiseClone();
		collection.Add(JSIL.New(System.Windows.Media.VideoFormat, "_ctor$0", [format]));
	}
	return collection;
};
$asm02.MS.Internal.XcpImports.AudioCaptureDevice_SetDesiredFormat = function (Device, Format) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	if (Format !== null) {
		var internalFormat = new JSIL.Variable(Format.InternalFormat.MemberwiseClone());
		$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.AudioCaptureDevice_SetDesiredFormatNative$0(Device.NativeObject, /* ref */ internalFormat));
		System.GC.KeepAlive(Device);
		return;
	}
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.AudioCaptureDevice_SetDesiredFormatNative$1(Device.NativeObject, System.IntPtr.Zero));
	System.GC.KeepAlive(Device);
};
$asm02.MS.Internal.XcpImports.AudioCaptureDevice_GetDesiredFormat = function (Device) {
	var flag = new JSIL.Variable(false);
	$asm02.MS.Internal.XcpImports.CheckThread();
	var result = null;
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.AudioCaptureDevice_HasDesiredFormatNative(Device.NativeObject, /* ref */ flag));
	System.GC.KeepAlive(Device);
	if (flag.value) {
		var format = new JSIL.Variable(new $asm02.System.Windows.Media.PALAudioFormat());
		$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.AudioCaptureDevice_GetDesiredFormatNative(Device.NativeObject, /* ref */ format));
		System.GC.KeepAlive(Device);
		result = JSIL.New(System.Windows.Media.AudioFormat, "_ctor$0", [format.value]);
	}
	return result;
};
$asm02.MS.Internal.XcpImports.AudioCaptureDevice_GetSupportedFormats = function (Device) {
	var num = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.AudioCaptureDevice_GetSupportedFormatCountNative(Device.NativeObject, /* ref */ num));
	System.GC.KeepAlive(Device);
	var array = JSIL.Array.New($asm02.System.Windows.Media.PALAudioFormat, num.value);
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.AudioCaptureDevice_GetSupportedFormatsNative(Device.NativeObject, num.value, array));
	System.GC.KeepAlive(Device);
	var collection = JSIL.New(System.Collections.ObjectModel.Collection$b1.Of(System.Windows.Media.AudioFormat), "_ctor$0", []);
	var array2 = array;
__loop0__: 
	for (var i = 0; i < array2.length; ++i) {
		var format = array2[i].MemberwiseClone();
		collection.Add(JSIL.New(System.Windows.Media.AudioFormat, "_ctor$0", [format]));
	}
	return collection;
};
$asm02.MS.Internal.XcpImports.WebBrowser_Navigate = function (obj, source) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.WebBrowser_NavigateNative(obj.NativeObject, source.OriginalString.length, source.OriginalString));
	System.GC.KeepAlive(obj);
};
$asm02.MS.Internal.XcpImports.WebBrowser_NavigateToString = function (obj, text) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.WebBrowser_NavigateToStringNative(obj.NativeObject, text ? text.length : 0, text));
	System.GC.KeepAlive(obj);
};
$asm02.MS.Internal.XcpImports.WebBrowser_SaveToString = function (obj) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var outVal = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.WebBrowser_SaveToStringNative(obj.NativeObject, /* ref */ outVal));
	System.GC.KeepAlive(obj);
	return JSIL.Cast($asm02.MS.Internal.XcpImports.ConvertType$0(outVal.value.MemberwiseClone(), 0, true, obj), System.String);
};
$asm02.MS.Internal.XcpImports.WebBrowserBrush_Redraw = function (obj) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.WebBrowserBrush_RedrawNative(obj.NativeObject));
	System.GC.KeepAlive(obj);
};
$asm02.MS.Internal.XcpImports.WebBrowserBrush_SetSource = function (obj, source) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.WebBrowserBrush_SetSourceNative(obj.NativeObject, source.NativeObject));
	System.GC.KeepAlive(obj);
	System.GC.KeepAlive(source);
};
$asm02.MS.Internal.XcpImports.WebBrowser_InvokeScript = JSIL.UntranslatableFunction("System.Object MS.Internal.XcpImports::WebBrowser_InvokeScript(System.Windows.DependencyObject,System.String,System.String[])");
$asm02.MS.Internal.XcpImports.DrmLicense_GetExpirationDate = function (nativePtr, /* ref */ expirationDate) {
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.DrmLicense_GetExpirationDate_Native(nativePtr, /* ref */ expirationDate));
};
$asm02.MS.Internal.XcpImports.DrmLicense_GetKeyId = function (nativePtr, /* ref */ keyId) {
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.DrmLicense_GetKeyId_Native(nativePtr, /* ref */ keyId));
};
$asm02.MS.Internal.XcpImports.DrmLicense_GetUplinkKeyId = function (nativePtr, /* ref */ uplinkKeyId) {
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.DrmLicense_GetUplinkKeyId_Native(nativePtr, /* ref */ uplinkKeyId));
};
$asm02.MS.Internal.XcpImports.DrmLicense_IsUsable = function (nativePtr, /* ref */ isUsable) {
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.DrmLicense_IsUsable_Native(nativePtr, /* ref */ isUsable));
};
$asm02.MS.Internal.XcpImports.DrmLicenseEnumerator_CreateNative$0 = function ($keyId, /* ref */ nativePtr) {
	var keyId = new JSIL.Variable($keyId);
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.DrmLicenseEnumerator_CreateNativePeerByKID_Native($asm02.MS.Internal.JoltHelper.Context, /* ref */ keyId, /* ref */ nativePtr));
};
$asm02.MS.Internal.XcpImports.DrmLicenseEnumerator_CreateNative$1 = function (mediaStream, /* ref */ nativePtr) {
	var streamInteropWrapper = new $asm02.MS.Internal.Interop.StreamInteropWrapper(mediaStream);
	$asm02.MS.Internal.XcpImports.CheckHResult(streamInteropWrapper.Initialize());
	var nativeObject = streamInteropWrapper.IManagedPeerBase_NativeObject;
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.DrmLicenseEnumerator_CreateNativePeerByStream_Native($asm02.MS.Internal.JoltHelper.Context, nativeObject, /* ref */ nativePtr));
	System.GC.KeepAlive(streamInteropWrapper);
};
$asm02.MS.Internal.XcpImports.DrmLicenseEnumerator_MoveNext = function (managedPeer) {
	var result = $asm02.MS.Internal.XcpImports.DrmLicenseEnumerator_MoveNext_Native(managedPeer.IManagedPeerBase_NativeObject);
	System.GC.KeepAlive(managedPeer);
	return result;
};
$asm02.MS.Internal.XcpImports.DrmLicenseEnumerator_Reset = function (managedPeer) {
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.DrmLicenseEnumerator_Reset_Native(managedPeer.IManagedPeerBase_NativeObject));
	System.GC.KeepAlive(managedPeer);
};
$asm02.MS.Internal.XcpImports.DrmLicenseEnumerator_GetCurrent = function (managedPeer, /* ref */ nativeMSPRLicensePtr) {
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.DrmLicenseEnumerator_GetCurrent_Native($asm02.MS.Internal.JoltHelper.Context, managedPeer.IManagedPeerBase_NativeObject, /* ref */ nativeMSPRLicensePtr));
	System.GC.KeepAlive(managedPeer);
};
$asm02.MS.Internal.XcpImports.DrmReleaseLicenseWrapper = function (nativeLicenseWrapperPtr) {
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.DrmReleaseLicenseWrapper_Native(nativeLicenseWrapperPtr));
};
$asm02.MS.Internal.XcpImports.DrmLicenseAcquirer_CreateNativePeer = function (/* ref */ nativePtr) {
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.DrmLicenseAcquirer_CreateNativePeer_Entry($asm02.MS.Internal.JoltHelper.Context, /* ref */ nativePtr));
};
$asm02.MS.Internal.XcpImports.DrmLicenseAcquirer_GenerateChallengeByHeaderComponentsAsync = function (nativePtr, /* ref */ kid, contentKeyType, /* ref */ serviceId, customData) {
	$asm02.MS.Internal.XcpImports.CheckDRMHResult($asm02.MS.Internal.XcpImports.DrmLicenseAcquirer_GenerateChallengeByHeaderComponentsAsync_Native(
			nativePtr, 
			/* ref */ kid, 
			contentKeyType, 
			/* ref */ serviceId, 
			customData
		));
};
$asm02.MS.Internal.XcpImports.DrmLicenseAcquirer_GenerateChallengeByHeaderBytesAsync = JSIL.UntranslatableFunction("System.Void MS.Internal.XcpImports::DrmLicenseAcquirer_GenerateChallengeByHeaderBytesAsync(System.IntPtr,System.Byte[],System.String)");
$asm02.MS.Internal.XcpImports.DrmLicenseAcquirer_GenerateChallengeByHeaderAsync = function (nativePtr, mediaStream, customData) {
	var streamInteropWrapper = new $asm02.MS.Internal.Interop.StreamInteropWrapper(mediaStream);
	$asm02.MS.Internal.XcpImports.CheckHResult(streamInteropWrapper.Initialize());
	var nativeObject = streamInteropWrapper.IManagedPeerBase_NativeObject;
	$asm02.MS.Internal.XcpImports.CheckDRMHResult($asm02.MS.Internal.XcpImports.DrmLicenseAcquirer_GenerateChallengeByHeaderAsync_Native(nativePtr, nativeObject, customData));
	System.GC.KeepAlive(streamInteropWrapper);
};
$asm02.MS.Internal.XcpImports.DrmLicenseAcquirer_AcquireAsync = function (nativePtr, challengeStream, urlOverride) {
	var streamInteropWrapper = new $asm02.MS.Internal.Interop.StreamInteropWrapper(challengeStream);
	$asm02.MS.Internal.XcpImports.CheckHResult(streamInteropWrapper.Initialize());
	var nativeObject = streamInteropWrapper.IManagedPeerBase_NativeObject;
	$asm02.MS.Internal.XcpImports.CheckDRMHResult($asm02.MS.Internal.XcpImports.DrmLicenseAcquirer_AcquireAsync_Native(nativePtr, nativeObject, urlOverride));
	System.GC.KeepAlive(streamInteropWrapper);
};
$asm02.MS.Internal.XcpImports.DrmLicenseAcquirer_SetLicenseResponse = function (nativePtr, responseStream) {
	var streamInteropWrapper = new $asm02.MS.Internal.Interop.StreamInteropWrapper(responseStream);
	$asm02.MS.Internal.XcpImports.CheckHResult(streamInteropWrapper.Initialize());
	var nativeObject = streamInteropWrapper.IManagedPeerBase_NativeObject;
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.DrmLicenseAcquirer_SetLicenseResponse_Native(nativePtr, nativeObject));
	System.GC.KeepAlive(streamInteropWrapper);
};
$asm02.MS.Internal.XcpImports.DrmLicenseAcquirer_Abort = function (nativePtr) {
	$asm02.MS.Internal.XcpImports.DrmLicenseAcquirer_Abort_Entry(nativePtr);
};
$asm02.MS.Internal.XcpImports.DrmLicenseAcquirer_DomainJoinComplete = function (f_nativePtr, f_hrResult) {
	$asm02.MS.Internal.XcpImports.DrmLicenseAcquirer_DomainJoinComplete_Entry(f_nativePtr, f_hrResult);
};
$asm02.MS.Internal.XcpImports.DrmDomainAcquirer_CreateNativePeer = function (callback, /* ref */ nativePtr) {
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.DrmDomainAcquirer_CreateNativePeer_Native($asm02.MS.Internal.JoltHelper.Context, callback, /* ref */ nativePtr));
};
$asm02.MS.Internal.XcpImports.DrmDomainAcquirer_DomainOpGenerateChallengeAsync = function (nativePtr, isDomainJoin, url, friendlyName, /* ref */ serviceId, /* ref */ accountId, customData) {
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.DrmDomainAcquirer_DomainOpGenerateChallengeAsync_Native(
			nativePtr, 
			isDomainJoin, 
			url, 
			friendlyName, 
			/* ref */ serviceId, 
			/* ref */ accountId, 
			customData
		));
};
$asm02.MS.Internal.XcpImports.DrmDomainAcquirer_DomainOpAsync = function (nativePtr, isDomainJoin, challengeStream, urlOverride) {
	var streamInteropWrapper = new $asm02.MS.Internal.Interop.StreamInteropWrapper(challengeStream);
	$asm02.MS.Internal.XcpImports.CheckHResult(streamInteropWrapper.Initialize());
	var nativeObject = streamInteropWrapper.IManagedPeerBase_NativeObject;
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.DrmDomainAcquirer_DomainOpAsync_Native(nativePtr, isDomainJoin, nativeObject, urlOverride));
	System.GC.KeepAlive(streamInteropWrapper);
};
$asm02.MS.Internal.XcpImports.DrmDomainAcquirer_DomainOpSetResponse = function (nativePtr, isDomainJoin, continueHttp, responseStream) {
	var streamInteropWrapper = new $asm02.MS.Internal.Interop.StreamInteropWrapper(responseStream);
	$asm02.MS.Internal.XcpImports.CheckHResult(streamInteropWrapper.Initialize());
	var nativeObject = streamInteropWrapper.IManagedPeerBase_NativeObject;
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.DrmDomainAcquirer_DomainOpSetResponse_Native(nativePtr, isDomainJoin, continueHttp, nativeObject));
	System.GC.KeepAlive(streamInteropWrapper);
};
$asm02.MS.Internal.XcpImports.DrmDomainAcquirer_DomainOpAsyncCancel = function (nativePtr) {
	$asm02.MS.Internal.XcpImports.DrmDomainAcquirer_DomainOpAsyncCancel_Native(nativePtr);
};
$asm02.MS.Internal.XcpImports.DrmException_GetErrorDataFromHResult = function (f_hrResult, /* ref */ f_strErrorMsg, /* ref */ f_uiSLErrorCode) {
	if ($asm02.MS.Internal.Error.Succeeded(f_hrResult)) {
		f_strErrorMsg.value = null;
		f_uiSLErrorCode.value = 0;
		return;
	}
	var outVal = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	outVal.value.SetValue(null);
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.DrmException_GetErrorDataFromHResult_Native($asm02.MS.Internal.JoltHelper.Context, f_hrResult, /* ref */ outVal, /* ref */ f_uiSLErrorCode));
	if (MS.Internal.VType.valueNull === outVal.value.Type) {
		f_strErrorMsg.value = null;
		return;
	}
	if (outVal.value.Type === MS.Internal.VType.valueString) {
		f_strErrorMsg.value = JSIL.Cast($asm02.MS.Internal.XcpImports.ConvertType$0(outVal.value.MemberwiseClone(), 0, true, null), System.String);
		return;
	}
	throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("InvalidReturnValue")]);
};
$asm02.MS.Internal.XcpImports.IsUserInitiatedAction = function () {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var result = new JSIL.Variable(false);
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.IsUserInitiatedAction_Native($asm02.MS.Internal.JoltHelper.Context, /* ref */ result));
	return result.value;
};
$asm02.MS.Internal.XcpImports.Clipboard_AccessAllowed = function () {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var result = new JSIL.Variable(false);
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Clipboard_AccessAllowedNative($asm02.MS.Internal.JoltHelper.Context, /* ref */ result));
	return result.value;
};
$asm02.MS.Internal.XcpImports.Clipboard_ContainsText = function () {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var result = new JSIL.Variable(false);
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Clipboard_ContainsTextNative($asm02.MS.Internal.JoltHelper.Context, /* ref */ result));
	return result.value;
};
$asm02.MS.Internal.XcpImports.Clipboard_GetText = JSIL.UntranslatableFunction("System.String MS.Internal.XcpImports::Clipboard_GetText()");
$asm02.MS.Internal.XcpImports.Clipboard_SetText = function (text) {
	if (text === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["text"]);
	}
	if (!$asm02.MS.Internal.XcpImports.Clipboard_AccessAllowed()) {
		throw JSIL.New(System.Security.SecurityException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("Clipboard_AccessNotAllowed")]);
	}
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Clipboard_SetTextNative($asm02.MS.Internal.JoltHelper.Context, text.length, text));
};
$asm02.MS.Internal.XcpImports.NotificationWindow_Show = function (element) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.NotificationWindow_ShowNative(element.NativeObject, 0));
	System.GC.KeepAlive(element);
};
$asm02.MS.Internal.XcpImports.NotificationWindow_Close = function (element) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.NotificationWindow_CloseNative(element.NativeObject));
	System.GC.KeepAlive(element);
};
$asm02.MS.Internal.XcpImports.GetAvailableVideoConnectors = function () {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var array = JSIL.Array.New($asm02.MS.Internal.XcpImports.ConnectorInfo, 64);
	var num = new JSIL.Variable(array.length);
	var collection = JSIL.New(System.Collections.ObjectModel.Collection$b1.Of(System.Windows.Media.VideoOutputConnector), "_ctor$0", []);
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.GetConnectorInfoNative($asm02.MS.Internal.JoltHelper.Context, /* ref */ num, array));
__loop0__: 
	for (var i = 0; i < num.value; ++i) {
		var connectorInfo = array[i].MemberwiseClone();
		collection.Add(new System.Windows.Media.VideoOutputConnector(connectorInfo.SupportsHDCP, connectorInfo.SupportsCGMSA, connectorInfo.ConnectorType));
	}
	return collection;
};
$asm02.MS.Internal.XcpImports.GetClientInformation = function () {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var array = JSIL.Array.New(System.String, 3);
	var num = new JSIL.Variable(array.length);
	var collection = JSIL.New(System.Collections.ObjectModel.Collection$b1.Of(System.String), "_ctor$0", []);
	var flag = new JSIL.Variable(true);
__loop0__: 
	for (var i = 0; i < num.value; ++i) {
		array[i] = JSIL.New(System.String, "_ctor$2", ["0", 1024]);
	}
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.GetClientInfoNative(
			$asm02.MS.Internal.JoltHelper.Context, 
			array, 
			3, 
			/* ref */ num, 
			/* ref */ flag
		));
	if (flag.value) {
		var bytes = System.Text.Encoding.Unicode.GetBytes$3($asm02.System.Windows.Hosting.NativeHost.Current.FinalSource.Host);
		if (num.value >= 2) {
			if (!((array[0].length === 0) || (array[1].length === 0))) {
				collection.Add($asm02.MS.Internal.XcpImports.GetHash256(bytes, (array[0] + array[1])));
			} else {
				collection.Add(null);
			}
		}
		if (num.value === 3) {
			if (!((array[1].length === 0) || (array[2].length === 0))) {
				collection.Add($asm02.MS.Internal.XcpImports.GetHash256(bytes, (array[1] + array[2])));
			} else {
				collection.Add(null);
			}
			if (!((array[0].length === 0) || (array[2].length === 0))) {
				collection.Add($asm02.MS.Internal.XcpImports.GetHash256(bytes, (array[0] + array[2])));
			} else {
				collection.Add(null);
			}
		}
		return new (System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(System.String)) (collection);
	}
	return null;
};
$asm02.MS.Internal.XcpImports.GetHash256 = function (key, fromValue) {
	var bytes = System.Text.Encoding.Unicode.GetBytes$3(fromValue);
	var hMACSHA = JSIL.New(System.Security.Cryptography.HMACSHA256, "_ctor$1", [key]);
	var inArray = hMACSHA.ComputeHash$1(bytes);
	return System.Convert.ToBase64String$0(inArray);
};
$asm02.MS.Internal.XcpImports.ControlHost_GetDefaultThemeResourceDictionary = JSIL.UntranslatableFunction("System.String MS.Internal.XcpImports::ControlHost_GetDefaultThemeResourceDictionary(System.String)");
$asm02.MS.Internal.XcpImports.Font_GetSystemGlyphTypefaces = function () {
	var typeIndex = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.CheckThread();
	var outVal = new JSIL.Variable(new $asm02.MS.Internal.CValue());
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.Font_GetSystemGlyphTypefacesNative($asm02.MS.Internal.JoltHelper.Context, /* ref */ outVal, /* ref */ typeIndex));
	return JSIL.Cast($asm02.MS.Internal.XcpImports.ConvertType$0(outVal.value.MemberwiseClone(), typeIndex.value, true, null), $asm02.MS.Internal.GlyphTypefaceCollection);
};
$asm02.MS.Internal.XcpImports.InputManager_GetLastMousePosition = function (/* ref */ lastX, /* ref */ lastY) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.XcpImports.InputManager_GetLastMousePositionNative($asm02.MS.Internal.JoltHelper.Context, /* ref */ lastX, /* ref */ lastY));
};
$asm02.MS.Internal.XcpImports.PathGeometry_ToString = JSIL.UntranslatableFunction("System.String MS.Internal.XcpImports::PathGeometry_ToString(System.Windows.Media.PathGeometry)");
$asm02.MS.Internal.XcpImports.InlineCollection_IsInTextBlock = function (collection) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var result = $asm02.MS.Internal.XcpImports.InlineCollection_IsInTextBlockNative(collection.NativeObject);
	System.GC.KeepAlive(collection);
	return result;
};
$asm02.MS.Internal.XcpImports.InlineCollection_IsInHyperlink = function (collection) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var result = $asm02.MS.Internal.XcpImports.InlineCollection_IsInHyperlinkNative(collection.NativeObject);
	System.GC.KeepAlive(collection);
	return result;
};
JSIL.OverloadedMethod($asm02.MS.Internal.XcpImports, "ConvertCValueForManagedWithType", [
		["ConvertCValueForManagedWithType$0", [System.Type, JSIL.Reference.Of($asm02.MS.Internal.CValue), System.Int32, $asm02.MS.Internal.IManagedPeerBase]], 
		["ConvertCValueForManagedWithType$1", [System.Type, JSIL.Reference.Of($asm02.MS.Internal.CValue), System.Int32, System.Boolean, $asm02.MS.Internal.IManagedPeerBase]], 
		["ConvertCValueForManagedWithType$2", [System.Type, JSIL.Reference.Of($asm02.MS.Internal.CValue), System.Int32, System.Boolean, System.Boolean, $asm02.MS.Internal.IManagedPeerBase]]
	]);
JSIL.OverloadedMethod($asm02.MS.Internal.XcpImports, "SetValueWithDoublePrecision", [
		["SetValueWithDoublePrecision$0", [$asm02.MS.Internal.IManagedPeerBase, System.Windows.DependencyProperty, System.Double]], 
		["SetValueWithDoublePrecision$1", [$asm02.MS.Internal.IManagedPeerBase, System.Windows.DependencyProperty, System.Windows.Point]]
	]);
JSIL.OverloadedMethod($asm02.MS.Internal.XcpImports, "Application_GetResourceStream", [
		["Application_GetResourceStream$0", [System.Windows.Application, $asm02.MS.Internal.InternalMemoryStream, System.Uri]], 
		["Application_GetResourceStream$1", [System.Windows.Application, System.UInt32, System.Array.Of(System.Byte), System.Uri]]
	]);
JSIL.OverloadedMethod($asm02.MS.Internal.XcpImports, "MethodEx", [
		["MethodEx$0", [System.IntPtr, System.String, System.Array.Of($asm02.MS.Internal.CValue)]], 
		["MethodEx$1", [System.Windows.DependencyObject, System.String]]
	]);
JSIL.OverloadedMethod($asm02.MS.Internal.XcpImports, "ConvertType", [
		["ConvertType$0", [$asm02.MS.Internal.CValue, System.Int32, System.Boolean, $asm02.MS.Internal.IManagedPeerBase]], 
		["ConvertType$1", [$asm02.MS.Internal.CValue, System.Int32, System.Boolean, System.Boolean, $asm02.MS.Internal.IManagedPeerBase]]
	]);
JSIL.OverloadedMethod($asm02.MS.Internal.XcpImports, "AddRefNativeObject", [
		["AddRefNativeObject$0", [$asm02.MS.Internal.IManagedPeerBase]], 
		["AddRefNativeObject$1", [System.IntPtr]]
	]);
JSIL.OverloadedMethod($asm02.MS.Internal.XcpImports, "ReleaseNativeObject", [
		["ReleaseNativeObject$0", [$asm02.MS.Internal.IManagedPeerBase]], 
		["ReleaseNativeObject$1", [JSIL.Reference.Of(System.IntPtr)]]
	]);
JSIL.OverloadedMethod($asm02.MS.Internal.XcpImports, "CreateFromXaml", [
		["CreateFromXaml$0", [System.String, System.Boolean, System.Boolean, System.Boolean, System.Boolean]], 
		["CreateFromXaml$1", [System.String, System.Boolean, System.Boolean, System.Boolean]], 
		["CreateFromXaml$2", [System.IO.UnmanagedMemoryStream, System.Boolean, System.Boolean, System.Boolean]], 
		["CreateFromXaml$3", [System.IO.UnmanagedMemoryStream, System.String, System.Boolean, System.Boolean, System.Boolean]]
	]);
JSIL.OverloadedMethod($asm02.MS.Internal.XcpImports, "InternalTransform_Inverse", [
		["InternalTransform_Inverse$0", [System.IntPtr, JSIL.Reference.Of(System.IntPtr)]], 
		["InternalTransform_Inverse$1", [$asm02.MS.Internal.InternalTransform]]
	]);
JSIL.OverloadedMethod($asm02.MS.Internal.XcpImports, "Transform_Inverse", [
		["Transform_Inverse$0", [System.IntPtr, JSIL.Reference.Of(System.IntPtr)]], 
		["Transform_Inverse$1", [System.Windows.Media.Transform]]
	]);
JSIL.OverloadedMethod($asm02.MS.Internal.XcpImports, "TextPointer_GetRichTextBox", [
		["TextPointer_GetRichTextBox$0", [System.IntPtr, JSIL.Reference.Of($asm02.MS.Internal.CValue), JSIL.Reference.Of(System.Int32)]], 
		["TextPointer_GetRichTextBox$1", [System.Windows.Documents.TextPointer]]
	]);
JSIL.OverloadedMethod($asm02.MS.Internal.XcpImports, "MediaElement_AcquireLicenseComplete", [
		["MediaElement_AcquireLicenseComplete$0", [System.IntPtr, System.IntPtr, System.UInt32]], 
		["MediaElement_AcquireLicenseComplete$1", [System.Windows.Controls.MediaElement, System.IntPtr, System.UInt32]]
	]);
JSIL.OverloadedMethod($asm02.MS.Internal.XcpImports, "SetFontSource", [
		["SetFontSource$0", [System.Windows.DependencyObject, $asm02.MS.Internal.InternalMemoryStream]], 
		["SetFontSource$1", [System.Windows.DependencyObject, $asm02.MS.Internal.GlyphTypeface]], 
		["SetFontSource$2", [System.Windows.DependencyObject, System.Array.Of(System.Byte), System.Int32, System.String]]
	]);
JSIL.OverloadedMethod($asm02.MS.Internal.XcpImports, "Analytics_Start", [
		["Analytics_Start$0", [System.IntPtr]], 
		["Analytics_Start$1", []]
	]);
JSIL.OverloadedMethod($asm02.MS.Internal.XcpImports, "Analytics_Stop", [
		["Analytics_Stop$0", [System.IntPtr]], 
		["Analytics_Stop$1", []]
	]);
JSIL.OverloadedMethod($asm02.MS.Internal.XcpImports, "Analytics_GetAverageProcessLoad", [
		["Analytics_GetAverageProcessLoad$0", [System.IntPtr, JSIL.Reference.Of(System.Single)]], 
		["Analytics_GetAverageProcessLoad$1", []]
	]);
JSIL.OverloadedMethod($asm02.MS.Internal.XcpImports, "Analytics_GetAverageProcessorLoad", [
		["Analytics_GetAverageProcessorLoad$0", [System.IntPtr, JSIL.Reference.Of(System.Single)]], 
		["Analytics_GetAverageProcessorLoad$1", []]
	]);
JSIL.OverloadedMethod($asm02.MS.Internal.XcpImports, "VideoCaptureDevice_SetDesiredFormatNative", [
		["VideoCaptureDevice_SetDesiredFormatNative$0", [System.IntPtr, JSIL.Reference.Of($asm02.System.Windows.Media.PALVideoFormat)]], 
		["VideoCaptureDevice_SetDesiredFormatNative$1", [System.IntPtr, System.IntPtr]]
	]);
JSIL.OverloadedMethod($asm02.MS.Internal.XcpImports, "AudioCaptureDevice_SetDesiredFormatNative", [
		["AudioCaptureDevice_SetDesiredFormatNative$0", [System.IntPtr, JSIL.Reference.Of($asm02.System.Windows.Media.PALAudioFormat)]], 
		["AudioCaptureDevice_SetDesiredFormatNative$1", [System.IntPtr, System.IntPtr]]
	]);
JSIL.OverloadedMethod($asm02.MS.Internal.XcpImports, "DrmLicenseEnumerator_CreateNative", [
		["DrmLicenseEnumerator_CreateNative$0", [System.Guid, JSIL.Reference.Of(System.IntPtr)]], 
		["DrmLicenseEnumerator_CreateNative$1", [System.IO.Stream, JSIL.Reference.Of(System.IntPtr)]]
	]);
Object.defineProperty($asm02.MS.Internal.XcpImports, "CLIENTINFO_BUFSIZE", {
		"value": 1024}
);
Object.defineProperty($asm02.MS.Internal.XcpImports, "CLIENTINFO_MAX_IDENTIFIERS", {
		"value": 3}
);
$asm02.MS.Internal.XcpImports._globalLock = null;
$asm02.MS.Internal.XcpImports.EnglishUSCulture = null;
$asm02.MS.Internal.XcpImports._cctor = function () {
	$asm02.MS.Internal.XcpImports.EnglishUSCulture = JSIL.New(System.Globalization.CultureInfo, "_ctor$0", ["en-us"]);
	$asm02.MS.Internal.XcpImports._globalLock = new System.Object();
};

$asm02.MS.Internal.XcpImports.ConnectorInfo.prototype.ConnectorType = 0;
$asm02.MS.Internal.XcpImports.ConnectorInfo.prototype.SupportsHDCP = false;
$asm02.MS.Internal.XcpImports.ConnectorInfo.prototype.SupportsCGMSA = false;

System.Windows.Controls.ValidationErrorEventArgs.prototype._ctor = function (action, error) {
	System.Windows.RoutedEventArgs.prototype._ctor.call(this);
	this.Action = action;
	this.Error = error;
	this.Handled = false;
};
System.Windows.Controls.ValidationErrorEventArgs.prototype.get_Action = function () {
	return this.Action$value;
};
System.Windows.Controls.ValidationErrorEventArgs.prototype.set_Action = function (value) {
	this.Action$value = value;
};
System.Windows.Controls.ValidationErrorEventArgs.prototype.get_Error = function () {
	return this.Error$value;
};
System.Windows.Controls.ValidationErrorEventArgs.prototype.set_Error = function (value) {
	this.Error$value = value;
};
System.Windows.Controls.ValidationErrorEventArgs.prototype.get_Handled = function () {
	return this.Handled$value;
};
System.Windows.Controls.ValidationErrorEventArgs.prototype.set_Handled = function (value) {
	this.Handled$value = value;
};
JSIL.MakeProperty(System.Windows.Controls.ValidationErrorEventArgs.prototype, "Action", 
	System.Windows.Controls.ValidationErrorEventArgs.prototype.get_Action, System.Windows.Controls.ValidationErrorEventArgs.prototype.set_Action);
JSIL.MakeProperty(System.Windows.Controls.ValidationErrorEventArgs.prototype, "Error", 
	System.Windows.Controls.ValidationErrorEventArgs.prototype.get_Error, System.Windows.Controls.ValidationErrorEventArgs.prototype.set_Error);
JSIL.MakeProperty(System.Windows.Controls.ValidationErrorEventArgs.prototype, "Handled", 
	System.Windows.Controls.ValidationErrorEventArgs.prototype.get_Handled, System.Windows.Controls.ValidationErrorEventArgs.prototype.set_Handled);
System.Windows.Controls.ValidationErrorEventArgs.prototype.Action$value = 0;
System.Windows.Controls.ValidationErrorEventArgs.prototype.Error$value = null;
System.Windows.Controls.ValidationErrorEventArgs.prototype.Handled$value = false;

System.Windows.Markup.XamlReader.Load = function (xaml) {
	return $asm02.MS.Internal.XcpImports.CreateFromXaml$1(xaml, true, true, false);
};
System.Windows.Markup.XamlReader.LoadWithInitialTemplateValidation = function (xaml) {
	return $asm02.MS.Internal.XcpImports.CreateFromXaml$0(
		xaml, 
		true, 
		true, 
		false, 
		true
	);
};

System.Windows.Input.StylusDevice.prototype._ctor = function (nativeresource) {
	System.Object.prototype._ctor.call(this);
	this._nativeResource = nativeresource;
	this._stylusInfo = $asm02.MS.Internal.XcpImports.StylusDevice_GetStylusInfo(this);
};
System.Windows.Input.StylusDevice.prototype.get_Inverted = function () {
	return this._stylusInfo.IsInverted;
};
System.Windows.Input.StylusDevice.prototype.GetStylusPoints = function (relativeTo) {
	return $asm02.MS.Internal.XcpImports.StylusDevice_GetStylusPoints(this, relativeTo);
};
System.Windows.Input.StylusDevice.prototype.get_DeviceType = function () {
	return this._stylusInfo.DeviceType;
};
JSIL.MakeProperty(System.Windows.Input.StylusDevice.prototype, "Inverted", 
	System.Windows.Input.StylusDevice.prototype.get_Inverted, null);
JSIL.MakeProperty(System.Windows.Input.StylusDevice.prototype, "DeviceType", 
	System.Windows.Input.StylusDevice.prototype.get_DeviceType, null);
System.Windows.Input.StylusDevice.prototype._stylusInfo = null;
System.Windows.Input.StylusDevice.prototype._nativeResource = null;

System.Windows.Input.StylusPoint.prototype._ctor = function (x, y) {
	this._x = x;
	this._y = y;
	this._pressurefactor = 0.5;
};
System.Windows.Input.StylusPoint.prototype.get_X = function () {
	return this._x;
};
System.Windows.Input.StylusPoint.prototype.set_X = function (value) {
	if (System.Double.IsNaN(value)) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["X"]);
	}
	this._x = value;
};
System.Windows.Input.StylusPoint.prototype.get_Y = function () {
	return this._y;
};
System.Windows.Input.StylusPoint.prototype.set_Y = function (value) {
	if (System.Double.IsNaN(value)) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["Y"]);
	}
	this._y = value;
};
System.Windows.Input.StylusPoint.prototype.get_PressureFactor = function () {
	if (this._pressurefactor > 1) {
		return 1;
	}
	if (this._pressurefactor < 0) {
		return 0;
	}
	return this._pressurefactor;
};
System.Windows.Input.StylusPoint.prototype.set_PressureFactor = function (value) {
	if (!((value >= 0) && (value <= 1))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["PressureFactor"]);
	}
	this._pressurefactor = value;
};
JSIL.MakeProperty(System.Windows.Input.StylusPoint.prototype, "X", 
	System.Windows.Input.StylusPoint.prototype.get_X, System.Windows.Input.StylusPoint.prototype.set_X);
JSIL.MakeProperty(System.Windows.Input.StylusPoint.prototype, "Y", 
	System.Windows.Input.StylusPoint.prototype.get_Y, System.Windows.Input.StylusPoint.prototype.set_Y);
JSIL.MakeProperty(System.Windows.Input.StylusPoint.prototype, "PressureFactor", 
	System.Windows.Input.StylusPoint.prototype.get_PressureFactor, System.Windows.Input.StylusPoint.prototype.set_PressureFactor);
System.Windows.Input.StylusPoint.prototype._x = 0;
System.Windows.Input.StylusPoint.prototype._y = 0;
System.Windows.Input.StylusPoint.prototype._pressurefactor = 0;

System.Windows.ApplicationServiceContext.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
System.Windows.ApplicationServiceContext.prototype.get_ApplicationInitParams = function () {
	return JSIL.Cast(System.Windows.Application.Current.Host.InitParams, System.Collections.Generic.Dictionary$b2.Of(System.String, System.String));
};
JSIL.MakeProperty(System.Windows.ApplicationServiceContext.prototype, "ApplicationInitParams", 
	System.Windows.ApplicationServiceContext.prototype.get_ApplicationInitParams, null);

$asm02.MS.Internal.ApplicationLifetimeObjectsCollection.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
	this._readonly = false;
	this._arrayStore = new (System.Collections.Generic.List$b1.Of(System.Object)) ();
};
$asm02.MS.Internal.ApplicationLifetimeObjectsCollection.prototype.Add = function (value) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	if (JSIL.TryCast(value, System.Windows.IApplicationService) === null) {
		throw new $asm02.MS.Internal.ApplicationLifetimeObjectsCollection.AppServiceIntfNotImplementedException();
	}
	return this.PrivateAdd(JSIL.TryCast(value, System.Windows.IApplicationService));
};
$asm02.MS.Internal.ApplicationLifetimeObjectsCollection.prototype.Clear = function () {
	throw JSIL.New(System.NotImplementedException, "_ctor$0", []);
};
$asm02.MS.Internal.ApplicationLifetimeObjectsCollection.prototype.Contains = function (value) {
	throw JSIL.New(System.NotImplementedException, "_ctor$0", []);
};
$asm02.MS.Internal.ApplicationLifetimeObjectsCollection.prototype.IndexOf = function (value) {
	throw JSIL.New(System.NotImplementedException, "_ctor$0", []);
};
$asm02.MS.Internal.ApplicationLifetimeObjectsCollection.prototype.Insert = function (index, value) {
	throw JSIL.New(System.NotImplementedException, "_ctor$0", []);
};
$asm02.MS.Internal.ApplicationLifetimeObjectsCollection.prototype.get_IsFixedSize = function () {
	return false;
};
$asm02.MS.Internal.ApplicationLifetimeObjectsCollection.prototype.get_IsReadOnly = function () {
	return this._readonly;
};
$asm02.MS.Internal.ApplicationLifetimeObjectsCollection.prototype.Remove = function (value) {
	throw JSIL.New(System.NotImplementedException, "_ctor$0", []);
};
$asm02.MS.Internal.ApplicationLifetimeObjectsCollection.prototype.RemoveAt = function (index) {
	throw JSIL.New(System.NotImplementedException, "_ctor$0", []);
};
$asm02.MS.Internal.ApplicationLifetimeObjectsCollection.prototype.CopyTo = function (array, index) {
	throw JSIL.New(System.NotImplementedException, "_ctor$0", []);
};
$asm02.MS.Internal.ApplicationLifetimeObjectsCollection.prototype.get_Count = function () {
	return this._arrayStore.Count;
};
$asm02.MS.Internal.ApplicationLifetimeObjectsCollection.prototype.get_IsSynchronized = function () {
	return false;
};
$asm02.MS.Internal.ApplicationLifetimeObjectsCollection.prototype.get_SyncRoot = function () {
	throw JSIL.New(System.NotImplementedException, "_ctor$0", []);
};
$asm02.MS.Internal.ApplicationLifetimeObjectsCollection.prototype.get_Item = function (index) {
	return this._arrayStore.get_Item(index);
};
$asm02.MS.Internal.ApplicationLifetimeObjectsCollection.prototype.set_Item = function (index, value) {
	throw JSIL.New(System.NotImplementedException, "_ctor$0", []);
};
$asm02.MS.Internal.ApplicationLifetimeObjectsCollection.prototype.GetEnumerator = function () {
	return this._arrayStore.GetEnumerator();
};
$asm02.MS.Internal.ApplicationLifetimeObjectsCollection.prototype.RemoveItem = function (value) {
	this._arrayStore.Remove(value);
};
$asm02.MS.Internal.ApplicationLifetimeObjectsCollection.prototype.MakeReadOnly = function () {
	this._readonly = true;
};
$asm02.MS.Internal.ApplicationLifetimeObjectsCollection.prototype.PrivateAdd = function (value) {
	if (this._readonly) {
		throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
	}
	return this._arrayStore.IList_Add(value);
};
JSIL.MakeProperty($asm02.MS.Internal.ApplicationLifetimeObjectsCollection.prototype, "IsFixedSize", 
	$asm02.MS.Internal.ApplicationLifetimeObjectsCollection.prototype.get_IsFixedSize, null);
JSIL.MakeProperty($asm02.MS.Internal.ApplicationLifetimeObjectsCollection.prototype, "IsReadOnly", 
	$asm02.MS.Internal.ApplicationLifetimeObjectsCollection.prototype.get_IsReadOnly, null);
JSIL.MakeProperty($asm02.MS.Internal.ApplicationLifetimeObjectsCollection.prototype, "Count", 
	$asm02.MS.Internal.ApplicationLifetimeObjectsCollection.prototype.get_Count, null);
JSIL.MakeProperty($asm02.MS.Internal.ApplicationLifetimeObjectsCollection.prototype, "IsSynchronized", 
	$asm02.MS.Internal.ApplicationLifetimeObjectsCollection.prototype.get_IsSynchronized, null);
JSIL.MakeProperty($asm02.MS.Internal.ApplicationLifetimeObjectsCollection.prototype, "SyncRoot", 
	$asm02.MS.Internal.ApplicationLifetimeObjectsCollection.prototype.get_SyncRoot, null);
JSIL.MakeProperty($asm02.MS.Internal.ApplicationLifetimeObjectsCollection.prototype, "Item", 
	$asm02.MS.Internal.ApplicationLifetimeObjectsCollection.prototype.get_Item, $asm02.MS.Internal.ApplicationLifetimeObjectsCollection.prototype.set_Item);
$asm02.MS.Internal.ApplicationLifetimeObjectsCollection.prototype._readonly = false;
$asm02.MS.Internal.ApplicationLifetimeObjectsCollection.prototype._arrayStore = null;

$asm02.MS.Internal.ApplicationLifetimeObjectsCollection.AppServiceIntfNotImplementedException.prototype._ctor = function () {
	System.Exception.prototype._ctor.call(this, $asm02.System.Windows.Resx.GetString$2("AppExt_InterfaceNotImplemented"));
};

System.Windows.Data.RelativeSource.prototype._ctor$0 = function () {
	this._mode = System.Windows.Data.RelativeSourceMode.TemplatedParent;
	System.Object.prototype._ctor.call(this);
};
System.Windows.Data.RelativeSource.prototype._ctor$1 = function (mode) {
	this._mode = System.Windows.Data.RelativeSourceMode.TemplatedParent;
	System.Object.prototype._ctor.call(this);
	this.Mode = mode;
};
System.Windows.Data.RelativeSource.prototype.get_Mode = function () {
	return this._mode;
};
System.Windows.Data.RelativeSource.prototype.set_Mode = function (value) {
	if (!this._isInitialized) {
		this._mode = value;
		this._isInitialized = true;
		return;
	}
	if (this._mode !== value) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
	}
};
System.Windows.Data.RelativeSource.prototype.IMarkupExtension_SetupExtension = function (target, property) {
};
System.Windows.Data.RelativeSource.prototype.IMarkupExtension_IsValidTargetForExtension = function (target, property) {
	return false;
};
JSIL.OverloadedMethod(System.Windows.Data.RelativeSource.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Windows.Data.RelativeSourceMode]]
	]);
JSIL.MakeProperty(System.Windows.Data.RelativeSource.prototype, "Mode", 
	System.Windows.Data.RelativeSource.prototype.get_Mode, System.Windows.Data.RelativeSource.prototype.set_Mode);
System.Windows.Data.RelativeSource.prototype._isInitialized = false;
System.Windows.Data.RelativeSource.prototype._mode = 0;

System.Windows.Controls.Validation.GetErrors = function (element) {
	if (element === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["element"]);
	}
	return JSIL.Cast(element.GetValue(System.Windows.Controls.Validation.ErrorsProperty), System.Collections.ObjectModel.ReadOnlyObservableCollection$b1.Of(System.Windows.Controls.ValidationError));
};
System.Windows.Controls.Validation.GetHasError = function (element) {
	if (element === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["element"]);
	}
	return JSIL.Cast(element.GetValue(System.Windows.Controls.Validation.HasErrorProperty), System.Boolean);
};
System.Windows.Controls.Validation.GetInternalErrors = function (d) {
	return JSIL.Cast(d.GetValue(System.Windows.Controls.Validation.InternalErrorsProperty), System.Collections.ObjectModel.ObservableCollection$b1.Of(System.Windows.Controls.ValidationError));
};
System.Windows.Controls.Validation.AddValidationError = function (fe, error) {
	var observableCollection = System.Windows.Controls.Validation.GetInternalErrors(fe);
	var value = System.Windows.Controls.Validation.GetErrors(fe);
	var hasError = System.Windows.Controls.Validation.GetHasError(fe);
	if (observableCollection === null) {
		observableCollection = JSIL.New(System.Collections.ObjectModel.ObservableCollection$b1.Of(System.Windows.Controls.ValidationError), "_ctor$0", []);
		value = new (System.Collections.ObjectModel.ReadOnlyObservableCollection$b1.Of(System.Windows.Controls.ValidationError)) (observableCollection);
		fe.SetValue(System.Windows.Controls.Validation.InternalErrorsProperty, observableCollection);
		fe.SetValue(System.Windows.Controls.Validation.ErrorsProperty, value);
	}
	observableCollection.Add(error);
	fe.SetValue(System.Windows.Controls.Validation.HasErrorProperty, true);
	if (!(hasError || 
			(JSIL.TryCast(fe, System.Windows.Controls.Control) === null) || !$asm02.MS.Internal.QuirksMode.ShouldChangeControlUIValidationState())) {
		var control = JSIL.Cast(fe, System.Windows.Controls.Control);
		control.ShowValidationError();
	}
};
System.Windows.Controls.Validation.RemoveValidationError = function (fe, error) {
	var internalErrors = System.Windows.Controls.Validation.GetInternalErrors(fe);
	if (!((internalErrors !== null) && (internalErrors.Count !== 0))) {
		return;
	}
	internalErrors.Remove(error);
	if (internalErrors.Count === 0) {
		fe.SetValue(System.Windows.Controls.Validation.HasErrorProperty, false);
		if (!((JSIL.TryCast(fe, System.Windows.Controls.Control) === null) || !$asm02.MS.Internal.QuirksMode.ShouldChangeControlUIValidationState())) {
			var control = JSIL.Cast(fe, System.Windows.Controls.Control);
			control.HideValidationError();
		}
	}
};
System.Windows.Controls.Validation.ErrorsProperty = null;
System.Windows.Controls.Validation.HasErrorProperty = null;
System.Windows.Controls.Validation.InternalErrorsProperty = null;
System.Windows.Controls.Validation._cctor = function () {
	System.Windows.Controls.Validation.ErrorsProperty = System.Windows.DependencyProperty.RegisterAttached("Errors", System.Collections.ObjectModel.ReadOnlyObservableCollection$b1.Of(System.Windows.Controls.ValidationError), System.Windows.Controls.Validation, JSIL.New(System.Windows.PropertyMetadata, "_ctor$1", [new (System.Collections.ObjectModel.ReadOnlyObservableCollection$b1.Of(System.Windows.Controls.ValidationError)) (JSIL.New(System.Collections.ObjectModel.ObservableCollection$b1.Of(System.Windows.Controls.ValidationError), "_ctor$0", []))]));
	System.Windows.Controls.Validation.HasErrorProperty = System.Windows.DependencyProperty.RegisterAttached("HasErrors", System.Boolean, System.Windows.Controls.Validation, null);
	System.Windows.Controls.Validation.InternalErrorsProperty = System.Windows.DependencyProperty.RegisterAttached("InternalErrors", System.Collections.ObjectModel.ObservableCollection$b1.Of(System.Windows.Controls.ValidationError), System.Windows.Controls.Validation, null);
};

System.Windows.Controls.ValidationError.prototype._ctor$0 = function (exception, useDefaultString) {
	System.Object.prototype._ctor.call(this);
	this.Exception = exception;
	if (useDefaultString) {
		this.ErrorContent = $asm02.MS.Internal.NativeResourceStrings.GetResourceString(5200);
		return;
	}
	this.ErrorContent = exception.Message;
};
System.Windows.Controls.ValidationError.prototype._ctor$1 = function (errorContent) {
	System.Object.prototype._ctor.call(this);
	this.ErrorContent = errorContent;
};
System.Windows.Controls.ValidationError.prototype.get_Exception = function () {
	return this.Exception$value;
};
System.Windows.Controls.ValidationError.prototype.set_Exception = function (value) {
	this.Exception$value = value;
};
System.Windows.Controls.ValidationError.prototype.get_ErrorContent = function () {
	return this.ErrorContent$value;
};
System.Windows.Controls.ValidationError.prototype.set_ErrorContent = function (value) {
	this.ErrorContent$value = value;
};
JSIL.OverloadedMethod(System.Windows.Controls.ValidationError.prototype, "_ctor", [
		["_ctor$0", [System.Exception, System.Boolean]], 
		["_ctor$1", [System.Object]]
	]);
JSIL.MakeProperty(System.Windows.Controls.ValidationError.prototype, "Exception", 
	System.Windows.Controls.ValidationError.prototype.get_Exception, System.Windows.Controls.ValidationError.prototype.set_Exception);
JSIL.MakeProperty(System.Windows.Controls.ValidationError.prototype, "ErrorContent", 
	System.Windows.Controls.ValidationError.prototype.get_ErrorContent, System.Windows.Controls.ValidationError.prototype.set_ErrorContent);
System.Windows.Controls.ValidationError.prototype.Exception$value = null;
System.Windows.Controls.ValidationError.prototype.ErrorContent$value = null;

$asm02.MS.Internal.XamlManagedRuntimeRPInvokes.get_CreateInstanceDelegateInstance = function () {
	return $asm02.MS.Internal.XamlManagedRuntimeRPInvokes._createInstanceDelegate;
};
$asm02.MS.Internal.XamlManagedRuntimeRPInvokes.get_CreateFromValueDelegateInstance = function () {
	return $asm02.MS.Internal.XamlManagedRuntimeRPInvokes._createFromValueDelegate;
};
$asm02.MS.Internal.XamlManagedRuntimeRPInvokes.get_CreateFromXmlTextDelegateInstance = function () {
	return $asm02.MS.Internal.XamlManagedRuntimeRPInvokes._createFromXmlTextDelegate;
};
$asm02.MS.Internal.XamlManagedRuntimeRPInvokes.get_GetValueDelegateInstance = function () {
	return $asm02.MS.Internal.XamlManagedRuntimeRPInvokes._getValueDelegate;
};
$asm02.MS.Internal.XamlManagedRuntimeRPInvokes.get_SetValueDelegateInstance = function () {
	return $asm02.MS.Internal.XamlManagedRuntimeRPInvokes._setValueDelegate;
};
$asm02.MS.Internal.XamlManagedRuntimeRPInvokes.get_AddDelegateInstance = function () {
	return $asm02.MS.Internal.XamlManagedRuntimeRPInvokes._addDelegate;
};
$asm02.MS.Internal.XamlManagedRuntimeRPInvokes.get_AddToDictionaryDelegateInstance = function () {
	return $asm02.MS.Internal.XamlManagedRuntimeRPInvokes._addToDictionaryDelegate;
};
$asm02.MS.Internal.XamlManagedRuntimeRPInvokes.CreateInstance = function (inXamlType, /* ref */ newObject) {
	var flag = false;
	try {
		try {
			flag = $asm02.MS.Internal.JoltHelper.EnsureSynchronizationContext();
			var obj = null;
			var typeFromToken = $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetTypeFromToken(inXamlType);
			if (typeFromToken !== null) {
				if (!typeFromToken.IsPublic) {
					throw new $asm02.MS.Internal.NativeParseException(null, "Parser_CreateInstance_NoConstructor", [typeFromToken.FullName]);
				}
				try {
					obj = System.Activator.CreateInstance$3(typeFromToken);
					if (JSIL.TryCast(obj, System.Enum) !== null) {
						obj = $asm02.MS.Internal.ManagedObjectReference.ConditionalWrap(obj);
					}
				} catch ($exception) {
					if (JSIL.CheckType($exception, System.MissingMethodException)) {
						var arg_57_0 = $exception;
						throw new $asm02.MS.Internal.NativeParseException(arg_57_0, "Parser_CreateInstance_NoConstructor", [typeFromToken.FullName]);
					} else {
						var arg_78_0 = $exception;
						throw new $asm02.MS.Internal.NativeParseException(arg_78_0, "Parser_CreateInstance_ConstructorInvocation", [typeFromToken.FullName]);
					}
				}
			}
			var supportInitialize = JSIL.TryCast(obj, System.ComponentModel.ISupportInitialize);
			if (supportInitialize !== null) {
				supportInitialize.ISupportInitialize_BeginInit();
			}
			newObject.value = JSIL.New($asm02.MS.Internal.XamlQualifiedObject, "_ctor$0", [obj, true]);
			var result = 0;
		} catch ($exception) {
			var arg_C0_0 = $exception;
			newObject.value = JSIL.New($asm02.MS.Internal.XamlQualifiedObject, "_ctor$1", [null]);
			result = $asm02.MS.Internal.Error.GetXresultForException(arg_C0_0);
		}
	} finally {
		if (flag) {
			$asm02.MS.Internal.JoltHelper.RestoreSynchronizationContext();
		}
	}
	return result;
};
$asm02.MS.Internal.XamlManagedRuntimeRPInvokes.CreateFromValue = function (inServiceContext, inTs, /* ref */ qoValue, inProperty, inType, /* ref */ qoRootInstance, /* ref */ qo) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				var obj = null;
				var text = null;
				var flag = false;
				try {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								try {
									var __label2__ = "__entry2__";
								__step2__: 
									while (true) {
										switch (__label2__) {
											case "__entry2__":
												flag = $asm02.MS.Internal.JoltHelper.EnsureSynchronizationContext();
												text = JSIL.TryCast(qoValue.value.GetObject(), System.String);
												var typeFromToken = $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetTypeFromToken(inTs);
												if (typeFromToken.IsEnum) {
													try {
														obj = System.Enum.Parse(typeFromToken, text, true);
														obj = $asm02.MS.Internal.ManagedObjectReference.ConditionalWrap(obj);
														__label2__ = "IL_1D0";
														continue __step2__;
													} catch ($exception) {
														var arg_3C_0 = $exception;
														throw new $asm02.MS.Internal.NativeParseException(arg_3C_0, "Parser_CreateFromValue_CannotConvertInitializationText", [text, typeFromToken.FullName]);
													}
												}
												if (typeFromToken === System.Globalization.CultureInfo) {
													try {
														obj = JSIL.New(System.Globalization.CultureInfo, "_ctor$0", [text]);
														__label2__ = "IL_1D0";
														continue __step2__;
													} catch ($exception) {
														var arg_7D_0 = $exception;
														throw new $asm02.MS.Internal.NativeParseException(arg_7D_0, "Parser_CreateFromValue_CannotConvertInitializationText", [text, System.Globalization.CultureInfo.FullName]);
													}
												}
												if (typeFromToken !== null) {
													var typeConverter = null;
													try {
														if (!System.ComponentModel.TypeConverter.IsAssignableFrom(typeFromToken)) {
															throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("Parser_CreateFromValue_ConverterMustDeriveFromBase", [typeFromToken.FullName, System.ComponentModel.TypeConverter.FullName])]);
														}
														try {
															typeConverter = JSIL.TryCast(System.Activator.CreateInstance$3(typeFromToken), System.ComponentModel.TypeConverter);
														} catch ($exception) {
															var arg_10F_0 = $exception;
															throw JSIL.New(System.InvalidOperationException, "_ctor$2", [$asm02.System.Windows.Resx.GetString$0("Parser_CreateFromValue_FailedToCreateTypeConverter", [typeFromToken.FullName]), arg_10F_0]);
														}
														obj = typeConverter.ConvertFrom$1(null, $asm02.MS.Internal.XamlManagedRuntimeRPInvokes.InvariantEnglishUSCulture, text);
													} catch ($exception) {
														var arg_14B_0 = $exception;
														var text2 = null;
														if (JSIL.Cast(inProperty._handle.TypeInfoProviderKind, System.Boolean)) {
															var memberType = $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetPropertyFromToken(inProperty.MemberwiseClone()).MemberType;
															if (memberType !== null) {
																text2 = memberType.FullName;
															}
														} else if (JSIL.Cast(inType._handle.TypeInfoProviderKind, System.Boolean)) {
															var typeFromToken2 = $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetTypeFromToken(inType.MemberwiseClone());
															if (typeFromToken2 !== null) {
																text2 = typeFromToken2.FullName;
															}
														}
														if (text2 === null) {
															text2 = typeFromToken.FullName;
														}
														throw new $asm02.MS.Internal.NativeParseException(arg_14B_0, "Parser_CreateFromValue_CannotConvertInitializationText", [text, text2]);
													}
												}
												__label2__ = "IL_1D0";
												continue __step2__;
												break;
											case "IL_1D0":
												qo.value = JSIL.New($asm02.MS.Internal.XamlQualifiedObject, "_ctor$0", [obj, true]);
												var result = 0;
												break __step2__;
										}
									}
								} catch ($exception) {
									var arg_1E3_0 = $exception;
									qo.value = JSIL.New($asm02.MS.Internal.XamlQualifiedObject, "_ctor$1", [null]);
									result = $asm02.MS.Internal.Error.GetXresultForException(arg_1E3_0);
								}
								break __step1__;
						}
					}
				} finally {
					if (flag) {
						$asm02.MS.Internal.JoltHelper.RestoreSynchronizationContext();
					}
				}
				return result;
				break __step0__;
		}
	}
};
$asm02.MS.Internal.XamlManagedRuntimeRPInvokes.CreateFromXmlText = function (inXamlType, inText, /* ref */ qo) {
	var xamlQualifiedObject = new $asm02.MS.Internal.XamlQualifiedObject();
	xamlQualifiedObject._ctor$1(null);
	qo.value = xamlQualifiedObject.MemberwiseClone();
	return -2147467263;
};
$asm02.MS.Internal.XamlManagedRuntimeRPInvokes.GetValue = function (/* ref */ qoObj, inProperty, /* ref */ outValue) {
	try {
		outValue.value = JSIL.New($asm02.MS.Internal.XamlQualifiedObject, "_ctor$1", [null]);
		qoObj.value.GetObject();
		var propertyFromToken = $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetPropertyFromToken(inProperty).MemberwiseClone();
		try {
			var value = propertyFromToken.GetValue(qoObj.value.GetObject());
			outValue.value = JSIL.New($asm02.MS.Internal.XamlQualifiedObject, "_ctor$1", [value]);
			outValue.value.PegManagedPeerNoRef();
			var result = 0;
		} catch ($exception) {
			var arg_3F_0 = $exception;
			throw new $asm02.MS.Internal.NativeParseException(arg_3F_0, "Parser_GetValue_Exception", [propertyFromToken.FullName]);
		}
	} catch ($exception) {
		var arg_61_0 = $exception;
		outValue.value = JSIL.New($asm02.MS.Internal.XamlQualifiedObject, "_ctor$1", [null]);
		result = $asm02.MS.Internal.Error.GetXresultForException(arg_61_0);
	}
	return result;
};
$asm02.MS.Internal.XamlManagedRuntimeRPInvokes.SetValue = function (inType, /* ref */ inObj, inProperty, /* ref */ inValue) {
	var flag = false;
	try {
		try {
			flag = $asm02.MS.Internal.JoltHelper.EnsureSynchronizationContext();
			var object = inObj.value.GetObject();
			var object2 = inValue.value.GetObject();
			try {
				if ($asm02.MS.Internal.XamlManagedRuntimeRPInvokes.TryApplyMarkupExtensionValue(object, inProperty.MemberwiseClone(), object2)) {
					var result = 0;
					return result;
				}
			} catch ($exception) {
				var arg_27_0 = $exception;
				throw new $asm02.MS.Internal.NativeParseException(arg_27_0, "Parser_SetValue_ProvideValueException", [object2 ? JSIL.GetType(object2).FullName : null]);
			}
			var propertyFromToken = $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetPropertyFromToken(inProperty.MemberwiseClone()).MemberwiseClone();
			try {
				propertyFromToken.SetValue(object, object2);
				result = 0;
			} catch ($exception) {
				var arg_69_0 = $exception;
				throw new $asm02.MS.Internal.NativeParseException(arg_69_0, "Parser_SetValue_Exception", [propertyFromToken.FullName]);
			}
		} catch ($exception) {
			var arg_8D_0 = $exception;
			result = $asm02.MS.Internal.Error.GetXresultForException(arg_8D_0);
		}
	} finally {
		if (flag) {
			$asm02.MS.Internal.JoltHelper.RestoreSynchronizationContext();
		}
	}
	return result;
};
$asm02.MS.Internal.XamlManagedRuntimeRPInvokes.Add = function (/* ref */ qoCollection, inCollectionProperty, /* ref */ inValue) {
	try {
		var object = qoCollection.value.GetObject();
		var object2 = inValue.value.GetObject();
		var list = JSIL.TryCast(object, System.Collections.IList);
		if (list === null) {
			var text = System.String.Empty;
			text = $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetPropertyFromToken(inCollectionProperty).FullName;
			throw new $asm02.MS.Internal.NativeParseException(null, "Parser_Add_CollectionIsNull", [text]);
		}
		try {
			list.IList_Add(object2);
			var result = 0;
		} catch ($exception) {
			var arg_56_0 = $exception;
			throw new $asm02.MS.Internal.NativeParseException(arg_56_0, "Parser_Add_Exception", [JSIL.GetType(object).FullName]);
		}
	} catch ($exception) {
		var arg_7E_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForException(arg_7E_0);
	}
	return result;
};
$asm02.MS.Internal.XamlManagedRuntimeRPInvokes.AddToDictionary = function (/* ref */ dictionary, property, /* ref */ inKey, /* ref */ inValue) {
	try {
		var object = inKey.value.GetObject();
		var object2 = inValue.value.GetObject();
		var dictionary2 = JSIL.TryCast(dictionary.value.GetObject(), System.Collections.IDictionary);
		if (dictionary2 === null) {
			var text = System.String.Empty;
			text = $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetPropertyFromToken(property).FullName;
			throw new $asm02.MS.Internal.NativeParseException(null, "Parser_Add_CollectionIsNull", [text]);
		}
		try {
			dictionary2.IDictionary_Add(object, object2);
			var result = 0;
		} catch ($exception) {
			var arg_5B_0 = $exception;
			throw new $asm02.MS.Internal.NativeParseException(arg_5B_0, "Parser_AddToDictionary_Exception", [JSIL.GetType(dictionary2).FullName]);
		}
	} catch ($exception) {
		var arg_83_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForException(arg_83_0);
	}
	return result;
};
$asm02.MS.Internal.XamlManagedRuntimeRPInvokes.TryApplyMarkupExtensionValue = function (target, propertyToken, value) {
	var markupExtension = JSIL.TryCast(value, $asm02.MS.Internal.IMarkupExtension);
	if (!((JSIL.TryCast(target, System.Windows.Data.Binding) === null) || (JSIL.TryCast(value, System.Windows.Data.Binding) === null))) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
	}
	if (!((target === null) || (markupExtension === null))) {
		var dependencyPropertyFromToken = $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetDependencyPropertyFromToken(propertyToken);
		if (markupExtension.IMarkupExtension_IsValidTargetForExtension(target, dependencyPropertyFromToken)) {
			markupExtension.IMarkupExtension_SetupExtension(target, dependencyPropertyFromToken);
			return true;
		}
	}
	return false;
};
JSIL.MakeProperty($asm02.MS.Internal.XamlManagedRuntimeRPInvokes, "CreateInstanceDelegateInstance", 
	$asm02.MS.Internal.XamlManagedRuntimeRPInvokes.get_CreateInstanceDelegateInstance, null);
JSIL.MakeProperty($asm02.MS.Internal.XamlManagedRuntimeRPInvokes, "CreateFromValueDelegateInstance", 
	$asm02.MS.Internal.XamlManagedRuntimeRPInvokes.get_CreateFromValueDelegateInstance, null);
JSIL.MakeProperty($asm02.MS.Internal.XamlManagedRuntimeRPInvokes, "CreateFromXmlTextDelegateInstance", 
	$asm02.MS.Internal.XamlManagedRuntimeRPInvokes.get_CreateFromXmlTextDelegateInstance, null);
JSIL.MakeProperty($asm02.MS.Internal.XamlManagedRuntimeRPInvokes, "GetValueDelegateInstance", 
	$asm02.MS.Internal.XamlManagedRuntimeRPInvokes.get_GetValueDelegateInstance, null);
JSIL.MakeProperty($asm02.MS.Internal.XamlManagedRuntimeRPInvokes, "SetValueDelegateInstance", 
	$asm02.MS.Internal.XamlManagedRuntimeRPInvokes.get_SetValueDelegateInstance, null);
JSIL.MakeProperty($asm02.MS.Internal.XamlManagedRuntimeRPInvokes, "AddDelegateInstance", 
	$asm02.MS.Internal.XamlManagedRuntimeRPInvokes.get_AddDelegateInstance, null);
JSIL.MakeProperty($asm02.MS.Internal.XamlManagedRuntimeRPInvokes, "AddToDictionaryDelegateInstance", 
	$asm02.MS.Internal.XamlManagedRuntimeRPInvokes.get_AddToDictionaryDelegateInstance, null);
$asm02.MS.Internal.XamlManagedRuntimeRPInvokes._createInstanceDelegate = null;
$asm02.MS.Internal.XamlManagedRuntimeRPInvokes._createFromValueDelegate = null;
$asm02.MS.Internal.XamlManagedRuntimeRPInvokes._createFromXmlTextDelegate = null;
$asm02.MS.Internal.XamlManagedRuntimeRPInvokes._getValueDelegate = null;
$asm02.MS.Internal.XamlManagedRuntimeRPInvokes._setValueDelegate = null;
$asm02.MS.Internal.XamlManagedRuntimeRPInvokes._addDelegate = null;
$asm02.MS.Internal.XamlManagedRuntimeRPInvokes._addToDictionaryDelegate = null;
$asm02.MS.Internal.XamlManagedRuntimeRPInvokes.InvariantEnglishUSCulture = null;
$asm02.MS.Internal.XamlManagedRuntimeRPInvokes._cctor = function () {
	$asm02.MS.Internal.XamlManagedRuntimeRPInvokes.InvariantEnglishUSCulture = System.Globalization.CultureInfo.ReadOnly(JSIL.New(System.Globalization.CultureInfo, "_ctor$0", ["en-us"]));
	$asm02.MS.Internal.XamlManagedRuntimeRPInvokes._createInstanceDelegate = JSIL.Delegate.New("MS.Internal.XamlManagedRuntimeRPInvokes/CreateInstanceDelegate", null, $asm02.MS.Internal.XamlManagedRuntimeRPInvokes.CreateInstance);
	$asm02.MS.Internal.XamlManagedRuntimeRPInvokes._createFromValueDelegate = JSIL.Delegate.New("MS.Internal.XamlManagedRuntimeRPInvokes/CreateFromValueDelegate", null, $asm02.MS.Internal.XamlManagedRuntimeRPInvokes.CreateFromValue);
	$asm02.MS.Internal.XamlManagedRuntimeRPInvokes._createFromXmlTextDelegate = JSIL.Delegate.New("MS.Internal.XamlManagedRuntimeRPInvokes/CreateFromXmlTextDelegate", null, $asm02.MS.Internal.XamlManagedRuntimeRPInvokes.CreateFromXmlText);
	$asm02.MS.Internal.XamlManagedRuntimeRPInvokes._getValueDelegate = JSIL.Delegate.New("MS.Internal.XamlManagedRuntimeRPInvokes/GetValueDelegate", null, $asm02.MS.Internal.XamlManagedRuntimeRPInvokes.GetValue);
	$asm02.MS.Internal.XamlManagedRuntimeRPInvokes._setValueDelegate = JSIL.Delegate.New("MS.Internal.XamlManagedRuntimeRPInvokes/SetValueDelegate", null, $asm02.MS.Internal.XamlManagedRuntimeRPInvokes.SetValue);
	$asm02.MS.Internal.XamlManagedRuntimeRPInvokes._addDelegate = JSIL.Delegate.New("MS.Internal.XamlManagedRuntimeRPInvokes/AddDelegate", null, $asm02.MS.Internal.XamlManagedRuntimeRPInvokes.Add);
	$asm02.MS.Internal.XamlManagedRuntimeRPInvokes._addToDictionaryDelegate = JSIL.Delegate.New("MS.Internal.XamlManagedRuntimeRPInvokes/AddToDictionaryDelegate", null, $asm02.MS.Internal.XamlManagedRuntimeRPInvokes.AddToDictionary);
};

$asm02.MS.Internal.XamlQualifiedObject.prototype._ctor$0 = function (obj, isNewlyCreated) {
	this._ctor$2(obj, obj ? $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetTypeToken$1(JSIL.GetType(obj)) : new $asm02.MS.Internal.XamlTypeToken().MemberwiseClone(), isNewlyCreated);
};
$asm02.MS.Internal.XamlQualifiedObject.prototype._ctor$1 = function (obj) {
	this._ctor$2(obj, obj ? $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetTypeToken$1(JSIL.GetType(obj)) : new $asm02.MS.Internal.XamlTypeToken().MemberwiseClone(), false);
};
$asm02.MS.Internal.XamlQualifiedObject.prototype._ctor$2 = function (obj, typeToken, isNewlyCreated) {
	this._value = new $asm02.MS.Internal.CValue();
	this._flags = $asm02.MS.Internal.XamlQualifiedObject.XQBFlags.fNone;
	this._typeToken = typeToken;
	this._value.SetValue(obj);
	if (JSIL.TryCast(obj, System.IntPtr) !== 0) {
		var value = $asm02.MS.Internal.ManagedObjectReference.ConditionalWrap(obj);
		this._value.SetValue(value);
	}
	if (obj !== null) {
		this._value.NeedsFreeValuePointer = true;
	}
	if (isNewlyCreated) {
		this.PegManagedPeerNoRef();
	}
};
$asm02.MS.Internal.XamlQualifiedObject.prototype.GetObject = function () {
	var objectType = this.GetObjectType();
	var obj = $asm02.MS.Internal.XcpImports.ConvertCValueForManagedWithType$2(
		objectType, 
		/* ref */ new JSIL.MemberReference(this, "_value"), 
		0, 
		false, 
		false, 
		null
	);
	if (System.Single === objectType) {
		obj = System.Convert.ToSingle$0(obj);
	}
	return obj;
};
$asm02.MS.Internal.XamlQualifiedObject.prototype.GetObjectType = function () {
	return $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetTypeFromToken(this._typeToken.MemberwiseClone());
};
$asm02.MS.Internal.XamlQualifiedObject.prototype.PegManagedPeerNoRef = function () {
	if (this._value.Type === MS.Internal.VType.valueObject) {
		$asm02.MS.Internal.ManagedPeerTable.PegManagedPeerNoRef$1(JSIL.New(System.IntPtr, "_ctor$0", [this._value.m_pdoValue]));
		this._flags = (this._flags | $asm02.MS.Internal.XamlQualifiedObject.XQBFlags.fHasPeggedManagedPeer);
	}
};
JSIL.OverloadedMethod($asm02.MS.Internal.XamlQualifiedObject.prototype, "_ctor", [
		["_ctor$0", [System.Object, System.Boolean]], 
		["_ctor$1", [System.Object]], 
		["_ctor$2", [System.Object, $asm02.MS.Internal.XamlTypeToken, System.Boolean]]
	]);
$asm02.MS.Internal.XamlQualifiedObject.prototype._flags = 0;

$asm02.MS.Internal.XamlSchemaContext.ShouldResetOnlyXmlnsDefinitions = function () {
	return System.ComponentModel.DesignerProperties.RefreshOnlyXmlnsDefinitionsOnAssemblyReplace;
};
$asm02.MS.Internal.XamlSchemaContext.EnsureManagedAssemblyAttributesLoaded = function () {
	try {
	__loop0__: 
		while ($asm02.MS.Internal.XamlSchemaContext.s_assembliesToProcess.Count > 0) {
			$asm02.MS.Internal.XamlSchemaContext.s_assembliesToProcess = new (System.Collections.Generic.List$b1.Of($asm02.MS.Internal.XamlSchemaContext.AssemblyEntry)) (16);
			var enumerator = ($asm02.MS.Internal.XamlSchemaContext.s_assembliesToProcess.GetEnumerator());
			try {
			__loop1__: 
				while (enumerator.MoveNext()) {
					var current = enumerator.Current.MemberwiseClone();
					$asm02.MS.Internal.XamlSchemaContext.ProcessXmlnsDefinitions(current._assembly, current._assemblyName);
				}
			} finally {
				enumerator.IDisposable_Dispose();
			}
		}
	} catch ($exception) {
		var arg_61_0 = $exception;
		return $asm02.MS.Internal.Error.GetXresultForException(arg_61_0);
	}
	return 0;
};
$asm02.MS.Internal.XamlSchemaContext.AddAssembly = function (assemblyToken, assemblyName) {
	if (System.String.IsNullOrEmpty(assemblyName)) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", ["assemblyName"]);
	}
	$asm02.MS.Internal.XcpImports.XamlSchemaContext_AddAssembly(assemblyToken, assemblyName);
};
$asm02.MS.Internal.XamlSchemaContext.DeferRegisterManagedAssemblyHelper = function (assembly, assemblyName) {
	$asm02.MS.Internal.XamlSchemaContext.s_assembliesToProcess.Add(new $asm02.MS.Internal.XamlSchemaContext.AssemblyEntry(assembly, assemblyName));
};
$asm02.MS.Internal.XamlSchemaContext.ClearDeferredManagedAssembliesHelper = function () {
	$asm02.MS.Internal.XamlSchemaContext.s_assembliesToProcess.Clear();
};
$asm02.MS.Internal.XamlSchemaContext.ProcessXmlnsDefinitions = function (assembly, assemblyName) {
	JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.String, System.Collections.Generic.IList$b1.Of(System.String)), "_ctor$2", [System.StringComparer.Ordinal]);
	var customAttributes = System.Attribute.GetCustomAttributes$12(assembly, System.Windows.Markup.XmlnsDefinitionAttribute);
	var assemblyToken = $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.RegisterAssembly(assembly, assemblyName).MemberwiseClone();
	$asm02.MS.Internal.XamlSchemaContext.AddAssembly(assemblyToken.MemberwiseClone(), assemblyName);
	var array = customAttributes;
__loop0__: 
	for (var i = 0; i < array.length; ++i) {
		var xmlnsDefinitionAttribute = JSIL.Cast(array[i], System.Windows.Markup.XmlnsDefinitionAttribute);
		var xmlNamespace = xmlnsDefinitionAttribute.XmlNamespace;
		var clrNamespace = xmlnsDefinitionAttribute.ClrNamespace;
		if (!(!System.String.IsNullOrEmpty(xmlNamespace) && !System.String.IsNullOrEmpty(clrNamespace))) {
			throw JSIL.New(System.ArgumentException, "_ctor$1", ["XmlnsDefinitionAttribute"]);
		}
		var typeNamespace = $asm02.MS.Internal.ManagedTypeInfoProviderRPInvokes.GetTypeNamespace$0(assemblyToken.MemberwiseClone(), clrNamespace).MemberwiseClone();
		$asm02.MS.Internal.XcpImports.XamlSchemaContext_AddAssemblyXmlnsDefinition(assemblyToken.MemberwiseClone(), xmlNamespace, typeNamespace.MemberwiseClone(), clrNamespace);
	}
};
Object.defineProperty($asm02.MS.Internal.XamlSchemaContext, "DefaultAssemblyListSize", {
		"value": 16}
);
$asm02.MS.Internal.XamlSchemaContext.s_assembliesToProcess = null;
$asm02.MS.Internal.XamlSchemaContext._cctor = function () {
	$asm02.MS.Internal.XamlSchemaContext.s_assembliesToProcess = new (System.Collections.Generic.List$b1.Of($asm02.MS.Internal.XamlSchemaContext.AssemblyEntry)) (16);
};

$asm02.MS.Internal.XamlSchemaContext.AssemblyEntry.prototype._ctor = function (assembly, assemblyName) {
	if (assembly === null) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", ["assembly"]);
	}
	if (assemblyName === null) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", ["assemblyName"]);
	}
	this._assembly = assembly;
	this._assemblyName = assemblyName;
};
$asm02.MS.Internal.XamlSchemaContext.AssemblyEntry.prototype._assembly = null;
$asm02.MS.Internal.XamlSchemaContext.AssemblyEntry.prototype._assemblyName = null;

$asm02.System.Net.NetworkInformation.InternalNetworkChange.RegisterInternalNetworkChange = function (nc) {
	System.Net.NetworkInformation.NetworkChange.RegisterNetworkChange(nc);
};
$asm02.System.Net.NetworkInformation.InternalNetworkChange.FireNetworkAddressChangedEvent = function (sender, e) {
	var internalAddressChanged = $asm02.System.Net.NetworkInformation.InternalNetworkChange._internalAddressChanged;
	if (internalAddressChanged !== null) {
		internalAddressChanged(sender, e);
	}
};
$asm02.System.Net.NetworkInformation.InternalNetworkChange.prototype.AddNetworkAddressChanged = function (value) {
	System.Threading.Monitor.Enter(this);
	try {
		if ($asm02.System.Net.NetworkInformation.InternalNetworkChange._internalAddressChanged === null) {
			$asm02.MS.Internal.XcpImports.WantsEventStatic(4, 1);
		}
		$asm02.System.Net.NetworkInformation.InternalNetworkChange._internalAddressChanged = System.Delegate.Combine($asm02.System.Net.NetworkInformation.InternalNetworkChange._internalAddressChanged, value);
	} finally {
		System.Threading.Monitor.Exit(this);
	}
};
$asm02.System.Net.NetworkInformation.InternalNetworkChange.prototype.RemoveNetworkAddressChanged = function (value) {
	System.Threading.Monitor.Enter(this);
	try {
		$asm02.System.Net.NetworkInformation.InternalNetworkChange._internalAddressChanged = System.Delegate.Remove($asm02.System.Net.NetworkInformation.InternalNetworkChange._internalAddressChanged, value);
		if ($asm02.System.Net.NetworkInformation.InternalNetworkChange._internalAddressChanged === null) {
			$asm02.MS.Internal.XcpImports.WantsEventStatic(4, 0);
		}
	} finally {
		System.Threading.Monitor.Exit(this);
	}
};
$asm02.System.Net.NetworkInformation.InternalNetworkChange.add__internalAddressChanged = function (value) {
	$asm02.System.Net.NetworkInformation.InternalNetworkChange._internalAddressChanged = System.Delegate.Combine($asm02.System.Net.NetworkInformation.InternalNetworkChange._internalAddressChanged, value);
};
$asm02.System.Net.NetworkInformation.InternalNetworkChange.remove__internalAddressChanged = function (value) {
	$asm02.System.Net.NetworkInformation.InternalNetworkChange._internalAddressChanged = System.Delegate.Remove($asm02.System.Net.NetworkInformation.InternalNetworkChange._internalAddressChanged, value);
};
$asm02.System.Net.NetworkInformation.InternalNetworkChange.prototype._ctor = function () {
	System.Net.NetworkInformation.NetworkChange.prototype._ctor.call(this);
};
$asm02.System.Net.NetworkInformation.InternalNetworkChange._internalAddressChanged = null;

$asm02.MS.Internal.NativeResourceStrings.GetResourceString = function (nStringID) {
	if (!$asm02.MS.Internal.NativeResourceStrings._resourceStrings.TryGetValue(nStringID, /* ref */ resourceString)) {
		var resourceString = new JSIL.Variable($asm02.MS.Internal.XcpImports.GetResourceString(nStringID));
		$asm02.MS.Internal.NativeResourceStrings._resourceStrings.Add(nStringID, resourceString.value);
	}
	return resourceString.value;
};
Object.defineProperty($asm02.MS.Internal.NativeResourceStrings, "IDS_DATABINDING_TYPECONVERTERERROR", {
		"value": 5200}
);
$asm02.MS.Internal.NativeResourceStrings._resourceStrings = null;
$asm02.MS.Internal.NativeResourceStrings._cctor = function () {
	$asm02.MS.Internal.NativeResourceStrings._resourceStrings = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.UInt32, System.String), "_ctor$0", []);
};

$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode = function () {
	if (!System.ComponentModel.DesignerProperties.InternalIsInDesignMode) {
		throw JSIL.New(System.NotImplementedException, "_ctor$0", []);
	}
};

System.Windows.Navigation.NavigatingCancelEventArgs.prototype._ctor$0 = function (uri, mode, IsCancelable, IsNavigationInitiator) {
	System.ComponentModel.CancelEventArgs.prototype._ctor$0.call(this);
	$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
};
System.Windows.Navigation.NavigatingCancelEventArgs.prototype.get_IsCancelable = function () {
	$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
	return true;
};
System.Windows.Navigation.NavigatingCancelEventArgs.prototype.set_IsCancelable = function (value) {
};
System.Windows.Navigation.NavigatingCancelEventArgs.prototype.get_IsNavigationInitiator = function () {
	$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
	return true;
};
System.Windows.Navigation.NavigatingCancelEventArgs.prototype.set_IsNavigationInitiator = function (value) {
};
System.Windows.Navigation.NavigatingCancelEventArgs.prototype._ctor$1 = function (uri, mode) {
	System.ComponentModel.CancelEventArgs.prototype._ctor$0.call(this);
	this.Uri = uri;
	this.NavigationMode = mode;
};
System.Windows.Navigation.NavigatingCancelEventArgs.prototype.get_Uri = function () {
	return this.Uri$value;
};
System.Windows.Navigation.NavigatingCancelEventArgs.prototype.set_Uri = function (value) {
	this.Uri$value = value;
};
System.Windows.Navigation.NavigatingCancelEventArgs.prototype.get_NavigationMode = function () {
	return this.NavigationMode$value;
};
System.Windows.Navigation.NavigatingCancelEventArgs.prototype.set_NavigationMode = function (value) {
	this.NavigationMode$value = value;
};
JSIL.OverloadedMethod(System.Windows.Navigation.NavigatingCancelEventArgs.prototype, "_ctor", [
		["_ctor$0", [System.Uri, System.Windows.Navigation.NavigationMode, System.Boolean, System.Boolean]], 
		["_ctor$1", [System.Uri, System.Windows.Navigation.NavigationMode]]
	]);
JSIL.MakeProperty(System.Windows.Navigation.NavigatingCancelEventArgs.prototype, "IsCancelable", 
	System.Windows.Navigation.NavigatingCancelEventArgs.prototype.get_IsCancelable, System.Windows.Navigation.NavigatingCancelEventArgs.prototype.set_IsCancelable);
JSIL.MakeProperty(System.Windows.Navigation.NavigatingCancelEventArgs.prototype, "IsNavigationInitiator", 
	System.Windows.Navigation.NavigatingCancelEventArgs.prototype.get_IsNavigationInitiator, System.Windows.Navigation.NavigatingCancelEventArgs.prototype.set_IsNavigationInitiator);
JSIL.MakeProperty(System.Windows.Navigation.NavigatingCancelEventArgs.prototype, "Uri", 
	System.Windows.Navigation.NavigatingCancelEventArgs.prototype.get_Uri, System.Windows.Navigation.NavigatingCancelEventArgs.prototype.set_Uri);
JSIL.MakeProperty(System.Windows.Navigation.NavigatingCancelEventArgs.prototype, "NavigationMode", 
	System.Windows.Navigation.NavigatingCancelEventArgs.prototype.get_NavigationMode, System.Windows.Navigation.NavigatingCancelEventArgs.prototype.set_NavigationMode);
System.Windows.Navigation.NavigatingCancelEventArgs.prototype.Uri$value = null;
System.Windows.Navigation.NavigatingCancelEventArgs.prototype.NavigationMode$value = 0;

System.Windows.Input.InputScopeConverter.prototype.CanConvertFrom = function (context, sourceType) {
	return (sourceType === System.String);
};
System.Windows.Input.InputScopeConverter.prototype.CanConvertTo = function (context, destinationType) {
	return false;
};
System.Windows.Input.InputScopeConverter.prototype.ConvertFrom = function (context, culture, source) {
	var text = JSIL.TryCast(source, System.String);
	var nameValue = System.Windows.Input.InputScopeNameValue.Default;
	if (text !== null) {
		text = text.Trim$1();
		if (-1 !== text.LastIndexOf$0(".")) {
			text = text.Substring$0((text.LastIndexOf$0(".") + 1));
		}
		if (!text.Equals$1(System.String.Empty)) {
			nameValue = JSIL.Cast(System.Enum.Parse(System.Windows.Input.InputScopeNameValue, text, false), System.Windows.Input.InputScopeNameValue);
		}
	}
	return new System.Windows.Input.InputScope().__Initialize__({
			Names: new JSIL.CollectionInitializer(JSIL.New(System.Windows.Input.InputScopeName, "_ctor$1", [nameValue]))}
	);
};
System.Windows.Input.InputScopeConverter.prototype.ConvertTo = function (context, culture, value, destinationType) {
	var inputScope = JSIL.TryCast(value, System.Windows.Input.InputScope);
	if (!((destinationType === null) || 
			(inputScope === null) || 
			(inputScope.Names.ICollection_Count <= 0) || (destinationType !== System.String))) {
		return System.Enum.GetName(System.Windows.Input.InputScopeNameValue, JSIL.Cast(inputScope.Names.IList_get_Item(0), System.Windows.Input.InputScopeName).NameValue);
	}
	return System.ComponentModel.TypeConverter.prototype.ConvertTo$0.call(this, context, culture, value, destinationType);
};
System.Windows.Input.InputScopeConverter.prototype._ctor = function () {
	System.ComponentModel.TypeConverter.prototype._ctor.call(this);
};

System.Windows.Input.InputScopeNameConverter.prototype.CanConvertFrom = function (context, sourceType) {
	return (sourceType === System.String);
};
System.Windows.Input.InputScopeNameConverter.prototype.CanConvertTo = function (context, destinationType) {
	return !((System.String !== destinationType) || 
		(context === null) || 
		(context.ITypeDescriptorContext_Instance === null) || (JSIL.TryCast(context.ITypeDescriptorContext_Instance, System.Windows.Input.InputScopeName) === null));
};
System.Windows.Input.InputScopeNameConverter.prototype.ConvertFrom = function (context, culture, source) {
	var text = JSIL.TryCast(source, System.String);
	var nameValue = System.Windows.Input.InputScopeNameValue.Default;
	if (text !== null) {
		text = text.Trim$1();
		if (-1 !== text.LastIndexOf$0(".")) {
			text = text.Substring$0((text.LastIndexOf$0(".") + 1));
		}
		if (!text.Equals$1(System.String.Empty)) {
			nameValue = JSIL.Cast(System.Enum.Parse(System.Windows.Input.InputScopeNameValue, text, false), System.Windows.Input.InputScopeNameValue);
		}
	}
	return JSIL.New(System.Windows.Input.InputScopeName, "_ctor$0", []).__Initialize__({
			NameValue: nameValue}
	);
};
System.Windows.Input.InputScopeNameConverter.prototype.ConvertTo = function (context, culture, value, destinationType) {
	var inputScopeName = JSIL.TryCast(value, System.Windows.Input.InputScopeName);
	if (!((destinationType === null) || 
			(inputScopeName === null) || (destinationType !== System.String))) {
		return System.Enum.GetName(System.Windows.Input.InputScopeNameValue, inputScopeName.NameValue);
	}
	return System.ComponentModel.TypeConverter.prototype.ConvertTo$0.call(this, context, culture, value, destinationType);
};
System.Windows.Input.InputScopeNameConverter.prototype._ctor = function () {
	System.ComponentModel.TypeConverter.prototype._ctor.call(this);
};

System.Windows.Input.InputScope.prototype._ctor = function () {
	this._scopeNames = new (System.Collections.Generic.List$b1.Of(System.Windows.Input.InputScopeName)) ();
	System.Windows.DependencyObject.prototype._ctor$0.call(this);
	$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
};
System.Windows.Input.InputScope.prototype.get_Names = function () {
	return this._scopeNames;
};
JSIL.MakeProperty(System.Windows.Input.InputScope.prototype, "Names", 
	System.Windows.Input.InputScope.prototype.get_Names, null);
System.Windows.Input.InputScope.prototype._scopeNames = null;

System.Windows.Input.InputScopeName.prototype._ctor$0 = function () {
	System.Windows.DependencyObject.prototype._ctor$0.call(this);
	$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
};
System.Windows.Input.InputScopeName.prototype._ctor$1 = function (nameValue) {
	System.Windows.DependencyObject.prototype._ctor$0.call(this);
	$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
	this.NameValue = nameValue;
};
System.Windows.Input.InputScopeName.prototype.get_NameValue = function () {
	return this.NameValue$value;
};
System.Windows.Input.InputScopeName.prototype.set_NameValue = function (value) {
	this.NameValue$value = value;
};
JSIL.OverloadedMethod(System.Windows.Input.InputScopeName.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Windows.Input.InputScopeNameValue]]
	]);
JSIL.MakeProperty(System.Windows.Input.InputScopeName.prototype, "NameValue", 
	System.Windows.Input.InputScopeName.prototype.get_NameValue, System.Windows.Input.InputScopeName.prototype.set_NameValue);
System.Windows.Input.InputScopeName.prototype.NameValue$value = 0;

System.Windows.Input.ManipulationStartedEventArgs.prototype._ctor = function () {
	System.Windows.RoutedEventArgs.prototype._ctor.call(this);
	$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
};
System.Windows.Input.ManipulationStartedEventArgs.prototype.get_Handled = function () {
	return this.Handled$value;
};
System.Windows.Input.ManipulationStartedEventArgs.prototype.set_Handled = function (value) {
	this.Handled$value = value;
};
System.Windows.Input.ManipulationStartedEventArgs.prototype.get_ManipulationContainer = function () {
	return this.ManipulationContainer$value;
};
System.Windows.Input.ManipulationStartedEventArgs.prototype.set_ManipulationContainer = function (value) {
	this.ManipulationContainer$value = value;
};
System.Windows.Input.ManipulationStartedEventArgs.prototype.get_ManipulationOrigin = function () {
	return this.ManipulationOrigin$value;
};
System.Windows.Input.ManipulationStartedEventArgs.prototype.set_ManipulationOrigin = function (value) {
	this.ManipulationOrigin$value = value;
};
System.Windows.Input.ManipulationStartedEventArgs.prototype.Complete = function () {
};
JSIL.MakeProperty(System.Windows.Input.ManipulationStartedEventArgs.prototype, "Handled", 
	System.Windows.Input.ManipulationStartedEventArgs.prototype.get_Handled, System.Windows.Input.ManipulationStartedEventArgs.prototype.set_Handled);
JSIL.MakeProperty(System.Windows.Input.ManipulationStartedEventArgs.prototype, "ManipulationContainer", 
	System.Windows.Input.ManipulationStartedEventArgs.prototype.get_ManipulationContainer, System.Windows.Input.ManipulationStartedEventArgs.prototype.set_ManipulationContainer);
JSIL.MakeProperty(System.Windows.Input.ManipulationStartedEventArgs.prototype, "ManipulationOrigin", 
	System.Windows.Input.ManipulationStartedEventArgs.prototype.get_ManipulationOrigin, System.Windows.Input.ManipulationStartedEventArgs.prototype.set_ManipulationOrigin);
System.Windows.Input.ManipulationStartedEventArgs.prototype.Handled$value = false;
System.Windows.Input.ManipulationStartedEventArgs.prototype.ManipulationContainer$value = null;

System.Windows.Input.ManipulationDeltaEventArgs.prototype._ctor = function () {
	System.Windows.RoutedEventArgs.prototype._ctor.call(this);
	$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
};
System.Windows.Input.ManipulationDeltaEventArgs.prototype.get_Handled = function () {
	return this.Handled$value;
};
System.Windows.Input.ManipulationDeltaEventArgs.prototype.set_Handled = function (value) {
	this.Handled$value = value;
};
System.Windows.Input.ManipulationDeltaEventArgs.prototype.get_IsInertial = function () {
	return this.IsInertial$value;
};
System.Windows.Input.ManipulationDeltaEventArgs.prototype.set_IsInertial = function (value) {
	this.IsInertial$value = value;
};
System.Windows.Input.ManipulationDeltaEventArgs.prototype.get_ManipulationContainer = function () {
	return this.ManipulationContainer$value;
};
System.Windows.Input.ManipulationDeltaEventArgs.prototype.set_ManipulationContainer = function (value) {
	this.ManipulationContainer$value = value;
};
System.Windows.Input.ManipulationDeltaEventArgs.prototype.get_ManipulationOrigin = function () {
	return this.ManipulationOrigin$value;
};
System.Windows.Input.ManipulationDeltaEventArgs.prototype.set_ManipulationOrigin = function (value) {
	this.ManipulationOrigin$value = value;
};
System.Windows.Input.ManipulationDeltaEventArgs.prototype.get_DeltaManipulation = function () {
	return this.DeltaManipulation$value;
};
System.Windows.Input.ManipulationDeltaEventArgs.prototype.set_DeltaManipulation = function (value) {
	this.DeltaManipulation$value = value;
};
System.Windows.Input.ManipulationDeltaEventArgs.prototype.get_CumulativeManipulation = function () {
	return this.CumulativeManipulation$value;
};
System.Windows.Input.ManipulationDeltaEventArgs.prototype.set_CumulativeManipulation = function (value) {
	this.CumulativeManipulation$value = value;
};
System.Windows.Input.ManipulationDeltaEventArgs.prototype.get_Velocities = function () {
	return this.Velocities$value;
};
System.Windows.Input.ManipulationDeltaEventArgs.prototype.set_Velocities = function (value) {
	this.Velocities$value = value;
};
System.Windows.Input.ManipulationDeltaEventArgs.prototype.Complete = function () {
};
System.Windows.Input.ManipulationDeltaEventArgs.prototype.StartInertia = function () {
};
JSIL.MakeProperty(System.Windows.Input.ManipulationDeltaEventArgs.prototype, "Handled", 
	System.Windows.Input.ManipulationDeltaEventArgs.prototype.get_Handled, System.Windows.Input.ManipulationDeltaEventArgs.prototype.set_Handled);
JSIL.MakeProperty(System.Windows.Input.ManipulationDeltaEventArgs.prototype, "IsInertial", 
	System.Windows.Input.ManipulationDeltaEventArgs.prototype.get_IsInertial, System.Windows.Input.ManipulationDeltaEventArgs.prototype.set_IsInertial);
JSIL.MakeProperty(System.Windows.Input.ManipulationDeltaEventArgs.prototype, "ManipulationContainer", 
	System.Windows.Input.ManipulationDeltaEventArgs.prototype.get_ManipulationContainer, System.Windows.Input.ManipulationDeltaEventArgs.prototype.set_ManipulationContainer);
JSIL.MakeProperty(System.Windows.Input.ManipulationDeltaEventArgs.prototype, "ManipulationOrigin", 
	System.Windows.Input.ManipulationDeltaEventArgs.prototype.get_ManipulationOrigin, System.Windows.Input.ManipulationDeltaEventArgs.prototype.set_ManipulationOrigin);
JSIL.MakeProperty(System.Windows.Input.ManipulationDeltaEventArgs.prototype, "DeltaManipulation", 
	System.Windows.Input.ManipulationDeltaEventArgs.prototype.get_DeltaManipulation, System.Windows.Input.ManipulationDeltaEventArgs.prototype.set_DeltaManipulation);
JSIL.MakeProperty(System.Windows.Input.ManipulationDeltaEventArgs.prototype, "CumulativeManipulation", 
	System.Windows.Input.ManipulationDeltaEventArgs.prototype.get_CumulativeManipulation, System.Windows.Input.ManipulationDeltaEventArgs.prototype.set_CumulativeManipulation);
JSIL.MakeProperty(System.Windows.Input.ManipulationDeltaEventArgs.prototype, "Velocities", 
	System.Windows.Input.ManipulationDeltaEventArgs.prototype.get_Velocities, System.Windows.Input.ManipulationDeltaEventArgs.prototype.set_Velocities);
System.Windows.Input.ManipulationDeltaEventArgs.prototype.Handled$value = false;
System.Windows.Input.ManipulationDeltaEventArgs.prototype.IsInertial$value = false;
System.Windows.Input.ManipulationDeltaEventArgs.prototype.ManipulationContainer$value = null;
System.Windows.Input.ManipulationDeltaEventArgs.prototype.DeltaManipulation$value = null;
System.Windows.Input.ManipulationDeltaEventArgs.prototype.CumulativeManipulation$value = null;
System.Windows.Input.ManipulationDeltaEventArgs.prototype.Velocities$value = null;

System.Windows.Input.ManipulationCompletedEventArgs.prototype._ctor = function () {
	System.Windows.RoutedEventArgs.prototype._ctor.call(this);
	$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
};
System.Windows.Input.ManipulationCompletedEventArgs.prototype.get_Handled = function () {
	return this.Handled$value;
};
System.Windows.Input.ManipulationCompletedEventArgs.prototype.set_Handled = function (value) {
	this.Handled$value = value;
};
System.Windows.Input.ManipulationCompletedEventArgs.prototype.get_IsInertial = function () {
	return this.IsInertial$value;
};
System.Windows.Input.ManipulationCompletedEventArgs.prototype.set_IsInertial = function (value) {
	this.IsInertial$value = value;
};
System.Windows.Input.ManipulationCompletedEventArgs.prototype.get_ManipulationContainer = function () {
	return this.ManipulationContainer$value;
};
System.Windows.Input.ManipulationCompletedEventArgs.prototype.set_ManipulationContainer = function (value) {
	this.ManipulationContainer$value = value;
};
System.Windows.Input.ManipulationCompletedEventArgs.prototype.get_ManipulationOrigin = function () {
	return this.ManipulationOrigin$value;
};
System.Windows.Input.ManipulationCompletedEventArgs.prototype.set_ManipulationOrigin = function (value) {
	this.ManipulationOrigin$value = value;
};
System.Windows.Input.ManipulationCompletedEventArgs.prototype.get_TotalManipulation = function () {
	return this.TotalManipulation$value;
};
System.Windows.Input.ManipulationCompletedEventArgs.prototype.set_TotalManipulation = function (value) {
	this.TotalManipulation$value = value;
};
System.Windows.Input.ManipulationCompletedEventArgs.prototype.get_FinalVelocities = function () {
	return this.FinalVelocities$value;
};
System.Windows.Input.ManipulationCompletedEventArgs.prototype.set_FinalVelocities = function (value) {
	this.FinalVelocities$value = value;
};
JSIL.MakeProperty(System.Windows.Input.ManipulationCompletedEventArgs.prototype, "Handled", 
	System.Windows.Input.ManipulationCompletedEventArgs.prototype.get_Handled, System.Windows.Input.ManipulationCompletedEventArgs.prototype.set_Handled);
JSIL.MakeProperty(System.Windows.Input.ManipulationCompletedEventArgs.prototype, "IsInertial", 
	System.Windows.Input.ManipulationCompletedEventArgs.prototype.get_IsInertial, System.Windows.Input.ManipulationCompletedEventArgs.prototype.set_IsInertial);
JSIL.MakeProperty(System.Windows.Input.ManipulationCompletedEventArgs.prototype, "ManipulationContainer", 
	System.Windows.Input.ManipulationCompletedEventArgs.prototype.get_ManipulationContainer, System.Windows.Input.ManipulationCompletedEventArgs.prototype.set_ManipulationContainer);
JSIL.MakeProperty(System.Windows.Input.ManipulationCompletedEventArgs.prototype, "ManipulationOrigin", 
	System.Windows.Input.ManipulationCompletedEventArgs.prototype.get_ManipulationOrigin, System.Windows.Input.ManipulationCompletedEventArgs.prototype.set_ManipulationOrigin);
JSIL.MakeProperty(System.Windows.Input.ManipulationCompletedEventArgs.prototype, "TotalManipulation", 
	System.Windows.Input.ManipulationCompletedEventArgs.prototype.get_TotalManipulation, System.Windows.Input.ManipulationCompletedEventArgs.prototype.set_TotalManipulation);
JSIL.MakeProperty(System.Windows.Input.ManipulationCompletedEventArgs.prototype, "FinalVelocities", 
	System.Windows.Input.ManipulationCompletedEventArgs.prototype.get_FinalVelocities, System.Windows.Input.ManipulationCompletedEventArgs.prototype.set_FinalVelocities);
System.Windows.Input.ManipulationCompletedEventArgs.prototype.Handled$value = false;
System.Windows.Input.ManipulationCompletedEventArgs.prototype.IsInertial$value = false;
System.Windows.Input.ManipulationCompletedEventArgs.prototype.ManipulationContainer$value = null;
System.Windows.Input.ManipulationCompletedEventArgs.prototype.TotalManipulation$value = null;
System.Windows.Input.ManipulationCompletedEventArgs.prototype.FinalVelocities$value = null;

System.Windows.Input.ManipulationDelta.prototype._ctor = function (translation, scale) {
	System.Windows.DependencyObject.prototype._ctor$0.call(this);
	$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
	(this.Translation = translation);
	(this.Scale = scale);
};
System.Windows.Input.ManipulationDelta.prototype.get_Translation = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Input.ManipulationDelta.TranslationProperty), System.Windows.Point);
};
System.Windows.Input.ManipulationDelta.prototype.set_Translation = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Input.ManipulationDelta.TranslationProperty, value);
};
System.Windows.Input.ManipulationDelta.prototype.get_Scale = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Input.ManipulationDelta.ScaleProperty), System.Windows.Point);
};
System.Windows.Input.ManipulationDelta.prototype.set_Scale = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Input.ManipulationDelta.ScaleProperty, value);
};
JSIL.MakeProperty(System.Windows.Input.ManipulationDelta.prototype, "Translation", 
	System.Windows.Input.ManipulationDelta.prototype.get_Translation, System.Windows.Input.ManipulationDelta.prototype.set_Translation);
JSIL.MakeProperty(System.Windows.Input.ManipulationDelta.prototype, "Scale", 
	System.Windows.Input.ManipulationDelta.prototype.get_Scale, System.Windows.Input.ManipulationDelta.prototype.set_Scale);
System.Windows.Input.ManipulationDelta.ScaleProperty = null;
System.Windows.Input.ManipulationDelta.TranslationProperty = null;
System.Windows.Input.ManipulationDelta.$CachedAnonymousMethodDelegate2 = null;
System.Windows.Input.ManipulationDelta.$CachedAnonymousMethodDelegate3 = null;
System.Windows.Input.ManipulationDelta._cctor = function () {
	System.Windows.Input.ManipulationDelta.ScaleProperty = System.Windows.DependencyProperty.Register$0("Scale", System.Windows.Point, System.Windows.Input.ManipulationDelta, JSIL.New(System.Windows.PropertyMetadata, "_ctor$0", [function (o, a) {
				MS.Internal.StubHelper.ThrowIfNotInDesignMode();
			}]));
	System.Windows.Input.ManipulationDelta.TranslationProperty = System.Windows.DependencyProperty.Register$0("Translation", System.Windows.Point, System.Windows.Input.ManipulationDelta, JSIL.New(System.Windows.PropertyMetadata, "_ctor$0", [function (o, a) {
				MS.Internal.StubHelper.ThrowIfNotInDesignMode();
			}]));
};

System.Windows.Input.ManipulationVelocities.prototype._ctor = function (linear, expansion) {
	System.Windows.DependencyObject.prototype._ctor$0.call(this);
	$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
	(this.LinearVelocity = linear);
	(this.ExpansionVelocity = expansion);
};
System.Windows.Input.ManipulationVelocities.prototype.get_ExpansionVelocity = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Input.ManipulationVelocities.ExpansionVelocityProperty), System.Windows.Point);
};
System.Windows.Input.ManipulationVelocities.prototype.set_ExpansionVelocity = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Input.ManipulationVelocities.ExpansionVelocityProperty, value);
};
System.Windows.Input.ManipulationVelocities.prototype.get_LinearVelocity = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Input.ManipulationVelocities.LinearVelocityProperty), System.Windows.Point);
};
System.Windows.Input.ManipulationVelocities.prototype.set_LinearVelocity = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Input.ManipulationVelocities.LinearVelocityProperty, value);
};
JSIL.MakeProperty(System.Windows.Input.ManipulationVelocities.prototype, "ExpansionVelocity", 
	System.Windows.Input.ManipulationVelocities.prototype.get_ExpansionVelocity, System.Windows.Input.ManipulationVelocities.prototype.set_ExpansionVelocity);
JSIL.MakeProperty(System.Windows.Input.ManipulationVelocities.prototype, "LinearVelocity", 
	System.Windows.Input.ManipulationVelocities.prototype.get_LinearVelocity, System.Windows.Input.ManipulationVelocities.prototype.set_LinearVelocity);
System.Windows.Input.ManipulationVelocities.ExpansionVelocityProperty = null;
System.Windows.Input.ManipulationVelocities.LinearVelocityProperty = null;
System.Windows.Input.ManipulationVelocities.$CachedAnonymousMethodDelegate2 = null;
System.Windows.Input.ManipulationVelocities.$CachedAnonymousMethodDelegate3 = null;
System.Windows.Input.ManipulationVelocities._cctor = function () {
	System.Windows.Input.ManipulationVelocities.ExpansionVelocityProperty = System.Windows.DependencyProperty.Register$0("ExpansionVelocity", System.Windows.Point, System.Windows.Input.ManipulationVelocities, JSIL.New(System.Windows.PropertyMetadata, "_ctor$0", [function (o, a) {
				MS.Internal.StubHelper.ThrowIfNotInDesignMode();
			}]));
	System.Windows.Input.ManipulationVelocities.LinearVelocityProperty = System.Windows.DependencyProperty.Register$0("LinearVelocity", System.Windows.Point, System.Windows.Input.ManipulationVelocities, JSIL.New(System.Windows.PropertyMetadata, "_ctor$0", [function (o, a) {
				MS.Internal.StubHelper.ThrowIfNotInDesignMode();
			}]));
};

System.Windows.Input.GestureEventArgs.prototype._ctor = function () {
	System.Windows.RoutedEventArgs.prototype._ctor.call(this);
	$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
};
System.Windows.Input.GestureEventArgs.prototype.GetPosition = function (relativeTo) {
	$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
	return new System.Windows.Point(0, 0);
};
System.Windows.Input.GestureEventArgs.prototype.get_Handled = function () {
	$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
	return false;
};
System.Windows.Input.GestureEventArgs.prototype.set_Handled = function (value) {
	$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
};
JSIL.MakeProperty(System.Windows.Input.GestureEventArgs.prototype, "Handled", 
	System.Windows.Input.GestureEventArgs.prototype.get_Handled, System.Windows.Input.GestureEventArgs.prototype.set_Handled);
System.Windows.Input.GestureEventArgs.HandledProperty = null;
System.Windows.Input.GestureEventArgs.$CachedAnonymousMethodDelegate1 = null;
System.Windows.Input.GestureEventArgs._cctor = function () {
	System.Windows.Input.GestureEventArgs.HandledProperty = System.Windows.DependencyProperty.Register$0("Handled", System.Boolean, System.Windows.Input.GestureEventArgs, JSIL.New(System.Windows.PropertyMetadata, "_ctor$0", [function (o, a) {
				MS.Internal.StubHelper.ThrowIfNotInDesignMode();
			}]));
};

System.Windows.Controls.ScrollViewer.prototype.get_ManipulationMode = function () {
	$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.ScrollViewer.ManipulationModeProperty), System.Windows.Controls.ManipulationMode);
};
System.Windows.Controls.ScrollViewer.prototype.set_ManipulationMode = function (value) {
	$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.ScrollViewer.ManipulationModeProperty, value);
};
System.Windows.Controls.ScrollViewer.GetManipulationMode = function (element) {
	$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
	return JSIL.Cast(element.GetValue(System.Windows.Controls.ScrollViewer.ManipulationModeProperty), System.Windows.Controls.ManipulationMode);
};
System.Windows.Controls.ScrollViewer.SetManipulationMode = function (element, manipulationMode) {
	$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
	if (element === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["element"]);
	}
	element.SetValue(System.Windows.Controls.ScrollViewer.ManipulationModeProperty, manipulationMode);
};
System.Windows.Controls.ScrollViewer.prototype.get_HorizontalScrollBarVisibility = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty), System.Windows.Controls.ScrollBarVisibility);
};
System.Windows.Controls.ScrollViewer.prototype.set_HorizontalScrollBarVisibility = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty, value);
};
System.Windows.Controls.ScrollViewer.prototype.get_VerticalScrollBarVisibility = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty), System.Windows.Controls.ScrollBarVisibility);
};
System.Windows.Controls.ScrollViewer.prototype.set_VerticalScrollBarVisibility = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty, value);
};
System.Windows.Controls.ScrollViewer.prototype.get_HorizontalOffset = function () {
	return this._xOffset;
};
System.Windows.Controls.ScrollViewer.prototype.set_HorizontalOffset = function (value) {
	this._xOffset = value;
	System.Windows.DependencyObject.prototype.SetValueInternal$1.call(this, System.Windows.Controls.ScrollViewer.HorizontalOffsetProperty, value, true);
};
System.Windows.Controls.ScrollViewer.prototype.get_ViewportWidth = function () {
	return this._xViewport;
};
System.Windows.Controls.ScrollViewer.prototype.set_ViewportWidth = function (value) {
	this._xViewport = value;
	System.Windows.DependencyObject.prototype.SetValueInternal$1.call(this, System.Windows.Controls.ScrollViewer.ViewportWidthProperty, value, true);
};
System.Windows.Controls.ScrollViewer.prototype.get_ScrollableWidth = function () {
	return System.Math.Max(0, (this.ExtentWidth - this.ViewportWidth));
};
System.Windows.Controls.ScrollViewer.prototype.set_ScrollableWidth = function (value) {
	System.Windows.DependencyObject.prototype.SetValueInternal$1.call(this, System.Windows.Controls.ScrollViewer.ScrollableWidthProperty, value, true);
};
System.Windows.Controls.ScrollViewer.prototype.get_ComputedHorizontalScrollBarVisibility = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.ScrollViewer.ComputedHorizontalScrollBarVisibilityProperty), System.Windows.Visibility);
};
System.Windows.Controls.ScrollViewer.prototype.set_ComputedHorizontalScrollBarVisibility = function (value) {
	System.Windows.DependencyObject.prototype.SetValueInternal$1.call(this, System.Windows.Controls.ScrollViewer.ComputedHorizontalScrollBarVisibilityProperty, value, true);
};
System.Windows.Controls.ScrollViewer.prototype.get_VerticalOffset = function () {
	return this._yOffset;
};
System.Windows.Controls.ScrollViewer.prototype.set_VerticalOffset = function (value) {
	this._yOffset = value;
	System.Windows.DependencyObject.prototype.SetValueInternal$1.call(this, System.Windows.Controls.ScrollViewer.VerticalOffsetProperty, value, true);
};
System.Windows.Controls.ScrollViewer.prototype.get_ViewportHeight = function () {
	return this._yViewport;
};
System.Windows.Controls.ScrollViewer.prototype.set_ViewportHeight = function (value) {
	this._yViewport = value;
	System.Windows.DependencyObject.prototype.SetValueInternal$1.call(this, System.Windows.Controls.ScrollViewer.ViewportHeightProperty, value, true);
};
System.Windows.Controls.ScrollViewer.prototype.get_ScrollableHeight = function () {
	return System.Math.Max(0, (this.ExtentHeight - this.ViewportHeight));
};
System.Windows.Controls.ScrollViewer.prototype.set_ScrollableHeight = function (value) {
	System.Windows.DependencyObject.prototype.SetValueInternal$1.call(this, System.Windows.Controls.ScrollViewer.ScrollableHeightProperty, value, true);
};
System.Windows.Controls.ScrollViewer.prototype.get_ComputedVerticalScrollBarVisibility = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.ScrollViewer.ComputedVerticalScrollBarVisibilityProperty), System.Windows.Visibility);
};
System.Windows.Controls.ScrollViewer.prototype.set_ComputedVerticalScrollBarVisibility = function (value) {
	System.Windows.DependencyObject.prototype.SetValueInternal$1.call(this, System.Windows.Controls.ScrollViewer.ComputedVerticalScrollBarVisibilityProperty, value, true);
};
System.Windows.Controls.ScrollViewer.prototype.get_ExtentHeight = function () {
	return this._yExtent;
};
System.Windows.Controls.ScrollViewer.prototype.set_ExtentHeight = function (value) {
	this._yExtent = value;
	System.Windows.DependencyObject.prototype.SetValueInternal$1.call(this, System.Windows.Controls.ScrollViewer.ExtentHeightProperty, value, true);
};
System.Windows.Controls.ScrollViewer.prototype.get_ExtentWidth = function () {
	return this._xExtent;
};
System.Windows.Controls.ScrollViewer.prototype.set_ExtentWidth = function (value) {
	this._xExtent = value;
	System.Windows.DependencyObject.prototype.SetValueInternal$1.call(this, System.Windows.Controls.ScrollViewer.ExtentWidthProperty, value, true);
};
System.Windows.Controls.ScrollViewer.prototype.get_TemplatedParentHandlesMouseButton = function () {
	return this._templatedParentHandlesMouseButton;
};
System.Windows.Controls.ScrollViewer.prototype.set_TemplatedParentHandlesMouseButton = function (value) {
	this._templatedParentHandlesMouseButton = value;
};
System.Windows.Controls.ScrollViewer.prototype.get_TemplatedParentHandlesScrolling = function () {
	return this._templatedParentHandlesScrolling;
};
System.Windows.Controls.ScrollViewer.prototype.set_TemplatedParentHandlesScrolling = function (value) {
	this._templatedParentHandlesScrolling = value;
	System.Windows.Controls.Control.prototype.set_IsTabStop.call(this, !this._templatedParentHandlesScrolling);
};
System.Windows.Controls.ScrollViewer.prototype.get_ScrollInfo = function () {
	return this._scrollInfo;
};
System.Windows.Controls.ScrollViewer.prototype.set_ScrollInfo = function (value) {
	this._scrollInfo = value;
	if (this._scrollInfo !== null) {
		this._scrollInfo.IScrollInfo_CanHorizontallyScroll = (this.HorizontalScrollBarVisibility !== System.Windows.Controls.ScrollBarVisibility.Disabled);
		this._scrollInfo.IScrollInfo_CanVerticallyScroll = (this.VerticalScrollBarVisibility !== System.Windows.Controls.ScrollBarVisibility.Disabled);
	}
};
System.Windows.Controls.ScrollViewer.prototype.get_ElementScrollContentPresenter = function () {
	return this.ElementScrollContentPresenter$value;
};
System.Windows.Controls.ScrollViewer.prototype.set_ElementScrollContentPresenter = function (value) {
	this.ElementScrollContentPresenter$value = value;
};
System.Windows.Controls.ScrollViewer.prototype.get_ElementHorizontalScrollBar = function () {
	return this.ElementHorizontalScrollBar$value;
};
System.Windows.Controls.ScrollViewer.prototype.set_ElementHorizontalScrollBar = function (value) {
	this.ElementHorizontalScrollBar$value = value;
};
System.Windows.Controls.ScrollViewer.prototype.get_ElementVerticalScrollBar = function () {
	return this.ElementVerticalScrollBar$value;
};
System.Windows.Controls.ScrollViewer.prototype.set_ElementVerticalScrollBar = function (value) {
	this.ElementVerticalScrollBar$value = value;
};
System.Windows.Controls.ScrollViewer.GetHorizontalScrollBarVisibility = function (element) {
	if (element === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["element"]);
	}
	return JSIL.Cast(element.GetValue(System.Windows.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty), System.Windows.Controls.ScrollBarVisibility);
};
System.Windows.Controls.ScrollViewer.SetHorizontalScrollBarVisibility = function (element, horizontalScrollBarVisibility) {
	if (element === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["element"]);
	}
	element.SetValue(System.Windows.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty, horizontalScrollBarVisibility);
};
System.Windows.Controls.ScrollViewer.GetVerticalScrollBarVisibility = function (element) {
	if (element === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["element"]);
	}
	return JSIL.Cast(element.GetValue(System.Windows.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty), System.Windows.Controls.ScrollBarVisibility);
};
System.Windows.Controls.ScrollViewer.SetVerticalScrollBarVisibility = function (element, verticalScrollBarVisibility) {
	if (element === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["element"]);
	}
	element.SetValue(System.Windows.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty, verticalScrollBarVisibility);
};
System.Windows.Controls.ScrollViewer.prototype._ctor = function () {
	System.Windows.Controls.ContentControl.prototype._ctor$0.call(this);
	System.Windows.Controls.Control.prototype.set_DefaultStyleKey.call(this, System.Windows.Controls.ScrollViewer);
	System.Windows.UIElement.prototype.add_RequestBringIntoView.call(this, JSIL.Delegate.New("MS.Internal.RequestBringIntoViewEventHandler", this, System.Windows.Controls.ScrollViewer.prototype.OnRequestBringIntoView));
};
System.Windows.Controls.ScrollViewer.prototype.OnApplyTemplate = function () {
	System.Windows.FrameworkElement.prototype.OnApplyTemplate.call(this);
	this.ElementScrollContentPresenter = JSIL.TryCast(System.Windows.Controls.Control.prototype.GetTemplateChild.call(this, "ScrollContentPresenter"), System.Windows.Controls.ScrollContentPresenter);
	this.ElementHorizontalScrollBar = JSIL.TryCast(System.Windows.Controls.Control.prototype.GetTemplateChild.call(this, "HorizontalScrollBar"), System.Windows.Controls.Primitives.ScrollBar);
	if (this.ElementHorizontalScrollBar !== null) {
		this.ElementHorizontalScrollBar.add_Scroll(function (sender, e) {
				this.HandleHorizontalScroll(e);
			});
	}
	this.ElementVerticalScrollBar = JSIL.TryCast(System.Windows.Controls.Control.prototype.GetTemplateChild.call(this, "VerticalScrollBar"), System.Windows.Controls.Primitives.ScrollBar);
	if (this.ElementVerticalScrollBar !== null) {
		this.ElementVerticalScrollBar.add_Scroll(function (sender, e) {
				this.HandleVerticalScroll(e);
			});
	}
};
System.Windows.Controls.ScrollViewer.prototype.OnCreateAutomationPeer = function () {
	return new System.Windows.Automation.Peers.ScrollViewerAutomationPeer(this);
};
System.Windows.Controls.ScrollViewer.prototype.MakeVisible = function (element, targetRect) {
	var elementScrollContentPresenter = this.ElementScrollContentPresenter;
	var elementScrollContentPresenter2 = this.ElementScrollContentPresenter;
	if (!((element === null) || 
			(elementScrollContentPresenter2 === null) || 
			((elementScrollContentPresenter2 !== element) && 
				!elementScrollContentPresenter2.IsAncestorOf(element)) || 
			!System.Windows.UIElement.prototype.IsAncestorOf.call(this, elementScrollContentPresenter2) || !this.IsInLiveTree)) {
		if (targetRect.IsEmpty) {
			targetRect._ctor$0(0, 0, element.RenderSize.Width, element.RenderSize.Height);
		}
		var targetRectangle = elementScrollContentPresenter.IScrollInfo_MakeVisible(element, targetRect.MemberwiseClone()).MemberwiseClone();
		if (!targetRectangle.IsEmpty) {
			var generalTransform = elementScrollContentPresenter2.TransformToVisual(this);
			var point = generalTransform.Transform(new System.Windows.Point(targetRectangle.X, targetRectangle.Y)).MemberwiseClone();
			targetRectangle.X = point.X;
			targetRectangle.Y = point.Y;
		}
		System.Windows.UIElement.prototype.BringIntoView$1.call(this, targetRectangle.MemberwiseClone());
	}
};
System.Windows.Controls.ScrollViewer.prototype.OnRequestBringIntoView = function (sender, e) {
	var scrollViewer = JSIL.TryCast(sender, System.Windows.Controls.ScrollViewer);
	var targetObject = e.TargetObject;
	if (!((targetObject === null) || 
			(scrollViewer === null) || 
			(scrollViewer === JSIL.Cast(targetObject, System.Windows.Controls.ScrollViewer)) || !scrollViewer.IsAncestorOf(targetObject))) {
		scrollViewer.MakeVisible(targetObject, e.TargetRect.MemberwiseClone());
	}
};
System.Windows.Controls.ScrollViewer.prototype.MeasureOverride = function (constraint) {
	this._inChildInvalidateMeasure = false;
	var uIElement = (System.Windows.Media.VisualTreeHelper.GetChildrenCount(this) === 0) ? null : JSIL.TryCast(System.Windows.Media.VisualTreeHelper.GetChild(this, 0), System.Windows.UIElement);
	if (uIElement === null) {
		return new System.Windows.Size();
	}
	var scrollInfo = this.ScrollInfo;
	var verticalScrollBarVisibility = this.VerticalScrollBarVisibility;
	var horizontalScrollBarVisibility = this.HorizontalScrollBarVisibility;
	var flag = (verticalScrollBarVisibility === System.Windows.Controls.ScrollBarVisibility.Auto);
	var flag2 = (horizontalScrollBarVisibility === System.Windows.Controls.ScrollBarVisibility.Auto);
	var visibility = (verticalScrollBarVisibility === System.Windows.Controls.ScrollBarVisibility.Visible) ? System.Windows.Visibility.Visible : System.Windows.Visibility.Collapsed;
	var visibility2 = (horizontalScrollBarVisibility === System.Windows.Controls.ScrollBarVisibility.Visible) ? System.Windows.Visibility.Visible : System.Windows.Visibility.Collapsed;
	try {
		this._inMeasure = true;
		if (this._scrollVisibilityY !== visibility) {
			this._scrollVisibilityY = visibility;
			this.ComputedVerticalScrollBarVisibility = this._scrollVisibilityY;
		}
		if (this._scrollVisibilityX !== visibility2) {
			this._scrollVisibilityX = visibility2;
			this.ComputedHorizontalScrollBarVisibility = this._scrollVisibilityX;
		}
		if (scrollInfo !== null) {
			scrollInfo.IScrollInfo_CanHorizontallyScroll = (horizontalScrollBarVisibility !== System.Windows.Controls.ScrollBarVisibility.Disabled);
			scrollInfo.IScrollInfo_CanVerticallyScroll = (verticalScrollBarVisibility !== System.Windows.Controls.ScrollBarVisibility.Disabled);
		}
		uIElement.Measure(constraint.MemberwiseClone());
		scrollInfo = this.ScrollInfo;
		if (!((scrollInfo === null) || (!flag && 
					!flag2))) {
			var flag3 = (flag2 && 
				(scrollInfo.IScrollInfo_ExtentWidth > scrollInfo.IScrollInfo_ViewportWidth));
			var flag4 = (flag && 
				(scrollInfo.IScrollInfo_ExtentHeight > scrollInfo.IScrollInfo_ViewportHeight));
			if (!(!flag3 || (this._scrollVisibilityX === 0))) {
				this._scrollVisibilityX = System.Windows.Visibility.Visible;
				this.ComputedHorizontalScrollBarVisibility = this._scrollVisibilityX;
			}
			if (!(!flag4 || (this._scrollVisibilityY === 0))) {
				this._scrollVisibilityY = System.Windows.Visibility.Visible;
				this.ComputedVerticalScrollBarVisibility = this._scrollVisibilityY;
			}
			if (!(!flag3 && !flag4)) {
				this._inChildInvalidateMeasure = true;
				uIElement.InvalidateMeasure();
				uIElement.Measure(constraint.MemberwiseClone());
			}
			if (!(!flag2 || 
					!flag || (flag3 === flag4))) {
				var flag5 = (!flag3 && 
					(scrollInfo.IScrollInfo_ExtentWidth > scrollInfo.IScrollInfo_ViewportWidth));
				var flag6 = (!flag4 && 
					(scrollInfo.IScrollInfo_ExtentHeight > scrollInfo.IScrollInfo_ViewportHeight));
				if (flag5) {
					if (this._scrollVisibilityX !== 0) {
						this._scrollVisibilityX = System.Windows.Visibility.Visible;
						this.ComputedHorizontalScrollBarVisibility = this._scrollVisibilityX;
					}
				} else if (!(!flag6 || (this._scrollVisibilityY === 0))) {
					this._scrollVisibilityY = System.Windows.Visibility.Visible;
					this.ComputedVerticalScrollBarVisibility = this._scrollVisibilityY;
				}
				if (!(!flag5 && !flag6)) {
					this._inChildInvalidateMeasure = true;
					uIElement.InvalidateMeasure();
					uIElement.Measure(constraint.MemberwiseClone());
				}
			}
		}
	} finally {
		this._inMeasure = false;
	}
	return uIElement.DesiredSize;
};
System.Windows.Controls.ScrollViewer.prototype.HandleScroll = function (orientation, e) {
	if (orientation === System.Windows.Controls.Orientation.Horizontal) {
		this.HandleHorizontalScroll(e);
		return;
	}
	this.HandleVerticalScroll(e);
};
System.Windows.Controls.ScrollViewer.prototype.HandleVerticalScroll = function (e) {
	if (this.ScrollInfo === null) {
		return;
	}
	var verticalOffset = this.ScrollInfo.IScrollInfo_VerticalOffset;
	var num = verticalOffset;
	switch (Number(e.ScrollEventType)) {
		case 0: 
			this.ScrollInfo.IScrollInfo_LineUp();
			break;
		case 1: 
			this.ScrollInfo.IScrollInfo_LineDown();
			break;
		case 2: 
			this.ScrollInfo.IScrollInfo_PageUp();
			break;
		case 3: 
			this.ScrollInfo.IScrollInfo_PageDown();
			break;
		case 4: 
		case 5: 
			num = e.NewValue;
			break;
		case 6: 
			num = -1.7976931348623157E+308;
			break;
		case 7: 
			num = 1.7976931348623157E+308;
			break;
	}
	num = System.Math.Max(num, 0);
	if ($asm02.MS.Internal.QuirksMode.ShouldScrollViewerClampOffset()) {
		num = System.Math.Min(this.ScrollableHeight, num);
	}
	if (!$asm02.MS.Internal.DoubleUtil.AreClose$0(verticalOffset, num)) {
		this.ScrollInfo.IScrollInfo_SetVerticalOffset(num);
	}
};
System.Windows.Controls.ScrollViewer.prototype.HandleHorizontalScroll = function (e) {
	if (this.ScrollInfo === null) {
		return;
	}
	var horizontalOffset = this.ScrollInfo.IScrollInfo_HorizontalOffset;
	var num = horizontalOffset;
	switch (Number(e.ScrollEventType)) {
		case 0: 
			this.ScrollInfo.IScrollInfo_LineLeft();
			break;
		case 1: 
			this.ScrollInfo.IScrollInfo_LineRight();
			break;
		case 2: 
			this.ScrollInfo.IScrollInfo_PageLeft();
			break;
		case 3: 
			this.ScrollInfo.IScrollInfo_PageRight();
			break;
		case 4: 
		case 5: 
			num = e.NewValue;
			break;
		case 6: 
			num = -1.7976931348623157E+308;
			break;
		case 7: 
			num = 1.7976931348623157E+308;
			break;
	}
	num = System.Math.Max(num, 0);
	if ($asm02.MS.Internal.QuirksMode.ShouldScrollViewerClampOffset()) {
		num = System.Math.Min(this.ScrollableWidth, num);
	}
	if (!$asm02.MS.Internal.DoubleUtil.AreClose$0(horizontalOffset, num)) {
		this.ScrollInfo.IScrollInfo_SetHorizontalOffset(num);
	}
};
System.Windows.Controls.ScrollViewer.prototype.OnKeyDown = function (e) {
	this.HandleKeyDown(e);
};
System.Windows.Controls.ScrollViewer.prototype.HandleKeyDown = function (e) {
	System.Windows.Controls.Control.prototype.OnKeyDown.call(this, e);
	if (e.Handled) {
		return;
	}
	if (this.TemplatedParentHandlesScrolling) {
		return;
	}
	var flag = (System.Windows.Input.ModifierKeys.Control === (System.Windows.Input.Keyboard.Modifiers & System.Windows.Input.ModifierKeys.Control));
	var orientation = System.Windows.Controls.Orientation.Vertical;
	var scrollEventType = System.Windows.Controls.Primitives.ScrollEventType.ThumbTrack;
	var flag2 = (System.Windows.FrameworkElement.prototype.get_FlowDirection.call(this) === System.Windows.FlowDirection.RightToLeft);
	switch (Number(e.Key)) {
		case 10: 
			scrollEventType = System.Windows.Controls.Primitives.ScrollEventType.LargeDecrement;
			break;
		case 11: 
			scrollEventType = System.Windows.Controls.Primitives.ScrollEventType.LargeIncrement;
			break;
		case 12: 
			if (!flag) {
				orientation = System.Windows.Controls.Orientation.Horizontal;
			}
			scrollEventType = System.Windows.Controls.Primitives.ScrollEventType.Last;
			break;
		case 13: 
			if (!flag) {
				orientation = System.Windows.Controls.Orientation.Horizontal;
			}
			scrollEventType = System.Windows.Controls.Primitives.ScrollEventType.First;
			break;
		case 14: 
			orientation = System.Windows.Controls.Orientation.Horizontal;
			if (flag2) {
				scrollEventType = System.Windows.Controls.Primitives.ScrollEventType.SmallIncrement;
			} else {
				scrollEventType = System.Windows.Controls.Primitives.ScrollEventType.SmallDecrement;
			}
			break;
		case 15: 
			scrollEventType = System.Windows.Controls.Primitives.ScrollEventType.SmallDecrement;
			break;
		case 16: 
			orientation = System.Windows.Controls.Orientation.Horizontal;
			if (flag2) {
				scrollEventType = System.Windows.Controls.Primitives.ScrollEventType.SmallDecrement;
			} else {
				scrollEventType = System.Windows.Controls.Primitives.ScrollEventType.SmallIncrement;
			}
			break;
		case 17: 
			scrollEventType = System.Windows.Controls.Primitives.ScrollEventType.SmallIncrement;
			break;
	}
	if (System.Windows.Controls.Primitives.ScrollEventType.ThumbTrack !== scrollEventType) {
		this.HandleScroll(orientation, new System.Windows.Controls.Primitives.ScrollEventArgs(scrollEventType, 0));
		e.Handled = true;
	}
};
System.Windows.Controls.ScrollViewer.prototype.OnMouseLeftButtonDown = function (e) {
	System.Windows.Controls.Control.prototype.OnMouseLeftButtonDown.call(this, e);
	if (e.Handled) {
		return;
	}
	if (this.TemplatedParentHandlesMouseButton) {
		return;
	}
	if (System.Windows.Controls.Control.prototype.Focus.call(this)) {
		e.Handled = true;
	}
};
System.Windows.Controls.ScrollViewer.prototype.OnMouseWheel = function (e) {
	if ($asm02.MS.Internal.QuirksMode.ShouldControlsHandleMouseWheelEvent()) {
		if (!(e.Handled || 
				(this.ScrollInfo === null) || (!((e.Delta > 0) && 
						(this.ScrollInfo.IScrollInfo_VerticalOffset !== 0)) && 
					((e.Delta >= 0) || 
						(this.ScrollInfo.IScrollInfo_VerticalOffset >= this.ScrollableHeight))))) {
			if (e.Delta < 0) {
				this.ScrollInfo.IScrollInfo_MouseWheelDown();
			} else {
				this.ScrollInfo.IScrollInfo_MouseWheelUp();
			}
			e.Handled = true;
			return;
		}
	} else {
		System.Windows.Controls.Control.prototype.OnMouseWheel.call(this, e);
	}
};
System.Windows.Controls.ScrollViewer.prototype.ScrollInDirection = function (key) {
	var flag = (System.Windows.FrameworkElement.prototype.get_FlowDirection.call(this) === System.Windows.FlowDirection.RightToLeft);
	switch (Number(key)) {
		case 10: 
			this.PageUp();
			return;
		case 11: 
			this.PageDown();
			return;
		case 12: 
			this.PageEnd();
			return;
		case 13: 
			this.PageHome();
			return;
		case 14: 
			if (flag) {
				this.LineRight();
				return;
			}
			this.LineLeft();
			return;
		case 15: 
			this.LineUp();
			return;
		case 16: 
			if (flag) {
				this.LineLeft();
				return;
			}
			this.LineRight();
			return;
		case 17: 
			this.LineDown();
			return;
		default: 
			return;
	}
};
System.Windows.Controls.ScrollViewer.prototype.ScrollToHorizontalOffset = function (offset) {
	this.HandleHorizontalScroll(new System.Windows.Controls.Primitives.ScrollEventArgs(System.Windows.Controls.Primitives.ScrollEventType.ThumbPosition, offset));
};
System.Windows.Controls.ScrollViewer.prototype.ScrollToVerticalOffset = function (offset) {
	this.HandleVerticalScroll(new System.Windows.Controls.Primitives.ScrollEventArgs(System.Windows.Controls.Primitives.ScrollEventType.ThumbPosition, offset));
};
System.Windows.Controls.ScrollViewer.OnScrollBarVisibilityChanged = function (d, e) {
	var scrollViewer = JSIL.TryCast(d, System.Windows.Controls.ScrollViewer);
	if (scrollViewer !== null) {
		if (scrollViewer.ScrollInfo !== null) {
			scrollViewer.ScrollInfo.IScrollInfo_CanHorizontallyScroll = (scrollViewer.HorizontalScrollBarVisibility !== System.Windows.Controls.ScrollBarVisibility.Disabled);
			scrollViewer.ScrollInfo.IScrollInfo_CanVerticallyScroll = (scrollViewer.VerticalScrollBarVisibility !== System.Windows.Controls.ScrollBarVisibility.Disabled);
		}
		scrollViewer.InvalidateMeasure();
	}
};
System.Windows.Controls.ScrollViewer.prototype.CanForwardPropertyValue = function (property) {
	return (System.Windows.DependencyObject.prototype.ReadLocalValue.call(this, property) === System.Windows.DependencyProperty.UnsetValue);
};
System.Windows.Controls.ScrollViewer.prototype.InvalidateScrollInfo = function () {
	if (this.ScrollInfo === null) {
		return;
	}
	if (!this._inMeasure) {
		var num = this.ScrollInfo.IScrollInfo_ExtentWidth;
		var num2 = this.ScrollInfo.IScrollInfo_ViewportWidth;
		if (!((this.HorizontalScrollBarVisibility !== System.Windows.Controls.ScrollBarVisibility.Auto) || (!((this._scrollVisibilityX === System.Windows.Visibility.Collapsed) && 
						(num > num2)) && 
					(this._scrollVisibilityX || 
						(num >= num2))))) {
			System.Windows.UIElement.prototype.InvalidateMeasure.call(this);
		} else {
			num = this.ScrollInfo.IScrollInfo_ExtentHeight;
			num2 = this.ScrollInfo.IScrollInfo_ViewportHeight;
			if (!((this.VerticalScrollBarVisibility !== System.Windows.Controls.ScrollBarVisibility.Auto) || (!((this._scrollVisibilityY === System.Windows.Visibility.Collapsed) && 
							(num > num2)) && 
						(this._scrollVisibilityY || 
							(num >= num2))))) {
				System.Windows.UIElement.prototype.InvalidateMeasure.call(this);
			}
		}
	}
	var horizontalOffset = this.ScrollInfo.IScrollInfo_HorizontalOffset;
	var verticalOffset = this.ScrollInfo.IScrollInfo_VerticalOffset;
	var viewportWidth = this.ScrollInfo.IScrollInfo_ViewportWidth;
	var viewportHeight = this.ScrollInfo.IScrollInfo_ViewportHeight;
	var extentWidth = this.ScrollInfo.IScrollInfo_ExtentWidth;
	var extentHeight = this.ScrollInfo.IScrollInfo_ExtentHeight;
	if (!($asm02.MS.Internal.DoubleUtil.AreClose$0(this._xOffset, horizontalOffset) && 
			$asm02.MS.Internal.DoubleUtil.AreClose$0(this._yOffset, verticalOffset) && 
			$asm02.MS.Internal.DoubleUtil.AreClose$0(this._xViewport, viewportWidth) && 
			$asm02.MS.Internal.DoubleUtil.AreClose$0(this._yViewport, viewportHeight) && 
			$asm02.MS.Internal.DoubleUtil.AreClose$0(this._xExtent, extentWidth) && $asm02.MS.Internal.DoubleUtil.AreClose$0(this._yExtent, extentHeight))) {
		var xOffset = this._xOffset;
		var yOffset = this._yOffset;
		var xViewport = this._xViewport;
		var yViewport = this._yViewport;
		var xExtent = this._xExtent;
		var yExtent = this._yExtent;
		var scrollableWidth = this.ScrollableWidth;
		var scrollableHeight = this.ScrollableHeight;
		var flag = false;
		try {
			if (!$asm02.MS.Internal.DoubleUtil.AreClose$0(xOffset, horizontalOffset)) {
				this.HorizontalOffset = horizontalOffset;
				flag = true;
			}
			if (!$asm02.MS.Internal.DoubleUtil.AreClose$0(yOffset, verticalOffset)) {
				this.VerticalOffset = verticalOffset;
				flag = true;
			}
			if (!$asm02.MS.Internal.DoubleUtil.AreClose$0(xViewport, viewportWidth)) {
				this.ViewportWidth = viewportWidth;
				flag = true;
			}
			if (!$asm02.MS.Internal.DoubleUtil.AreClose$0(yViewport, viewportHeight)) {
				this.ViewportHeight = viewportHeight;
				flag = true;
			}
			if (!$asm02.MS.Internal.DoubleUtil.AreClose$0(xExtent, extentWidth)) {
				this.ExtentWidth = extentWidth;
				flag = true;
			}
			if (!$asm02.MS.Internal.DoubleUtil.AreClose$0(yExtent, extentHeight)) {
				this.ExtentHeight = extentHeight;
				flag = true;
			}
			var scrollableWidth2 = this.ScrollableWidth;
			if (!$asm02.MS.Internal.DoubleUtil.AreClose$0(scrollableWidth, scrollableWidth2)) {
				this.ScrollableWidth = scrollableWidth2;
				flag = true;
			}
			var scrollableHeight2 = this.ScrollableHeight;
			if (!$asm02.MS.Internal.DoubleUtil.AreClose$0(scrollableHeight, scrollableHeight2)) {
				this.ScrollableHeight = scrollableHeight2;
				flag = true;
			}
		} finally {
			if (flag) {
				if (!($asm02.MS.Internal.DoubleUtil.AreClose$0(xOffset, this._xOffset) || 
						(this.ElementHorizontalScrollBar === null) || this.ElementHorizontalScrollBar.IsDragging)) {
					this.ElementHorizontalScrollBar.Value = this._xOffset;
				}
				if (!($asm02.MS.Internal.DoubleUtil.AreClose$0(yOffset, this._yOffset) || 
						(this.ElementVerticalScrollBar === null) || this.ElementVerticalScrollBar.IsDragging)) {
					this.ElementVerticalScrollBar.Value = this._yOffset;
				}
				if (this.ScrollChanged !== null) {
					this.ScrollChanged(this.HorizontalOffset, this.VerticalOffset);
				}
				if (System.Windows.Automation.Peers.AutomationPeer.ListenerExists(System.Windows.Automation.Peers.AutomationEvents.PropertyChanged)) {
					var scrollViewerAutomationPeer = JSIL.TryCast(System.Windows.UIElement.prototype.GetOrCreateAutomationPeer.call(this), System.Windows.Automation.Peers.ScrollViewerAutomationPeer);
					if (scrollViewerAutomationPeer !== null) {
						scrollViewerAutomationPeer.RaiseAutomationEvents(
							xExtent, 
							yExtent, 
							xViewport, 
							yViewport, 
							xOffset, 
							yOffset
						);
					}
				}
			}
		}
	}
};
System.Windows.Controls.ScrollViewer.prototype.add_ScrollChanged = function (value) {
	this.ScrollChanged = System.Delegate.Combine(this.ScrollChanged, value);
};
System.Windows.Controls.ScrollViewer.prototype.remove_ScrollChanged = function (value) {
	this.ScrollChanged = System.Delegate.Remove(this.ScrollChanged, value);
};
System.Windows.Controls.ScrollViewer.prototype.PageLeft = function () {
	this.HandleHorizontalScroll(new System.Windows.Controls.Primitives.ScrollEventArgs(System.Windows.Controls.Primitives.ScrollEventType.LargeDecrement, 0));
};
System.Windows.Controls.ScrollViewer.prototype.LineLeft = function () {
	this.HandleHorizontalScroll(new System.Windows.Controls.Primitives.ScrollEventArgs(System.Windows.Controls.Primitives.ScrollEventType.SmallDecrement, 0));
};
System.Windows.Controls.ScrollViewer.prototype.LineRight = function () {
	this.HandleHorizontalScroll(new System.Windows.Controls.Primitives.ScrollEventArgs(System.Windows.Controls.Primitives.ScrollEventType.SmallIncrement, 0));
};
System.Windows.Controls.ScrollViewer.prototype.PageRight = function () {
	this.HandleHorizontalScroll(new System.Windows.Controls.Primitives.ScrollEventArgs(System.Windows.Controls.Primitives.ScrollEventType.LargeIncrement, 0));
};
System.Windows.Controls.ScrollViewer.prototype.PageUp = function () {
	this.HandleVerticalScroll(new System.Windows.Controls.Primitives.ScrollEventArgs(System.Windows.Controls.Primitives.ScrollEventType.LargeDecrement, 0));
};
System.Windows.Controls.ScrollViewer.prototype.LineUp = function () {
	this.HandleVerticalScroll(new System.Windows.Controls.Primitives.ScrollEventArgs(System.Windows.Controls.Primitives.ScrollEventType.SmallDecrement, 0));
};
System.Windows.Controls.ScrollViewer.prototype.LineDown = function () {
	this.HandleVerticalScroll(new System.Windows.Controls.Primitives.ScrollEventArgs(System.Windows.Controls.Primitives.ScrollEventType.SmallIncrement, 0));
};
System.Windows.Controls.ScrollViewer.prototype.PageDown = function () {
	this.HandleVerticalScroll(new System.Windows.Controls.Primitives.ScrollEventArgs(System.Windows.Controls.Primitives.ScrollEventType.LargeIncrement, 0));
};
System.Windows.Controls.ScrollViewer.prototype.PageHome = function () {
	this.HandleHorizontalScroll(new System.Windows.Controls.Primitives.ScrollEventArgs(System.Windows.Controls.Primitives.ScrollEventType.First, 0));
};
System.Windows.Controls.ScrollViewer.prototype.PageEnd = function () {
	this.HandleHorizontalScroll(new System.Windows.Controls.Primitives.ScrollEventArgs(System.Windows.Controls.Primitives.ScrollEventType.Last, 0));
};
System.Windows.Controls.ScrollViewer.prototype.get_InChildInvalidateMeasure = function () {
	return this._inChildInvalidateMeasure;
};
System.Windows.Controls.ScrollViewer.prototype.set_InChildInvalidateMeasure = function (value) {
	this._inChildInvalidateMeasure = value;
};
JSIL.MakeProperty(System.Windows.Controls.ScrollViewer.prototype, "ManipulationMode", 
	System.Windows.Controls.ScrollViewer.prototype.get_ManipulationMode, System.Windows.Controls.ScrollViewer.prototype.set_ManipulationMode);
JSIL.MakeProperty(System.Windows.Controls.ScrollViewer.prototype, "HorizontalScrollBarVisibility", 
	System.Windows.Controls.ScrollViewer.prototype.get_HorizontalScrollBarVisibility, System.Windows.Controls.ScrollViewer.prototype.set_HorizontalScrollBarVisibility);
JSIL.MakeProperty(System.Windows.Controls.ScrollViewer.prototype, "VerticalScrollBarVisibility", 
	System.Windows.Controls.ScrollViewer.prototype.get_VerticalScrollBarVisibility, System.Windows.Controls.ScrollViewer.prototype.set_VerticalScrollBarVisibility);
JSIL.MakeProperty(System.Windows.Controls.ScrollViewer.prototype, "HorizontalOffset", 
	System.Windows.Controls.ScrollViewer.prototype.get_HorizontalOffset, System.Windows.Controls.ScrollViewer.prototype.set_HorizontalOffset);
JSIL.MakeProperty(System.Windows.Controls.ScrollViewer.prototype, "ViewportWidth", 
	System.Windows.Controls.ScrollViewer.prototype.get_ViewportWidth, System.Windows.Controls.ScrollViewer.prototype.set_ViewportWidth);
JSIL.MakeProperty(System.Windows.Controls.ScrollViewer.prototype, "ScrollableWidth", 
	System.Windows.Controls.ScrollViewer.prototype.get_ScrollableWidth, System.Windows.Controls.ScrollViewer.prototype.set_ScrollableWidth);
JSIL.MakeProperty(System.Windows.Controls.ScrollViewer.prototype, "ComputedHorizontalScrollBarVisibility", 
	System.Windows.Controls.ScrollViewer.prototype.get_ComputedHorizontalScrollBarVisibility, System.Windows.Controls.ScrollViewer.prototype.set_ComputedHorizontalScrollBarVisibility);
JSIL.MakeProperty(System.Windows.Controls.ScrollViewer.prototype, "VerticalOffset", 
	System.Windows.Controls.ScrollViewer.prototype.get_VerticalOffset, System.Windows.Controls.ScrollViewer.prototype.set_VerticalOffset);
JSIL.MakeProperty(System.Windows.Controls.ScrollViewer.prototype, "ViewportHeight", 
	System.Windows.Controls.ScrollViewer.prototype.get_ViewportHeight, System.Windows.Controls.ScrollViewer.prototype.set_ViewportHeight);
JSIL.MakeProperty(System.Windows.Controls.ScrollViewer.prototype, "ScrollableHeight", 
	System.Windows.Controls.ScrollViewer.prototype.get_ScrollableHeight, System.Windows.Controls.ScrollViewer.prototype.set_ScrollableHeight);
JSIL.MakeProperty(System.Windows.Controls.ScrollViewer.prototype, "ComputedVerticalScrollBarVisibility", 
	System.Windows.Controls.ScrollViewer.prototype.get_ComputedVerticalScrollBarVisibility, System.Windows.Controls.ScrollViewer.prototype.set_ComputedVerticalScrollBarVisibility);
JSIL.MakeProperty(System.Windows.Controls.ScrollViewer.prototype, "ExtentHeight", 
	System.Windows.Controls.ScrollViewer.prototype.get_ExtentHeight, System.Windows.Controls.ScrollViewer.prototype.set_ExtentHeight);
JSIL.MakeProperty(System.Windows.Controls.ScrollViewer.prototype, "ExtentWidth", 
	System.Windows.Controls.ScrollViewer.prototype.get_ExtentWidth, System.Windows.Controls.ScrollViewer.prototype.set_ExtentWidth);
JSIL.MakeProperty(System.Windows.Controls.ScrollViewer.prototype, "TemplatedParentHandlesMouseButton", 
	System.Windows.Controls.ScrollViewer.prototype.get_TemplatedParentHandlesMouseButton, System.Windows.Controls.ScrollViewer.prototype.set_TemplatedParentHandlesMouseButton);
JSIL.MakeProperty(System.Windows.Controls.ScrollViewer.prototype, "TemplatedParentHandlesScrolling", 
	System.Windows.Controls.ScrollViewer.prototype.get_TemplatedParentHandlesScrolling, System.Windows.Controls.ScrollViewer.prototype.set_TemplatedParentHandlesScrolling);
JSIL.MakeProperty(System.Windows.Controls.ScrollViewer.prototype, "ScrollInfo", 
	System.Windows.Controls.ScrollViewer.prototype.get_ScrollInfo, System.Windows.Controls.ScrollViewer.prototype.set_ScrollInfo);
JSIL.MakeProperty(System.Windows.Controls.ScrollViewer.prototype, "ElementScrollContentPresenter", 
	System.Windows.Controls.ScrollViewer.prototype.get_ElementScrollContentPresenter, System.Windows.Controls.ScrollViewer.prototype.set_ElementScrollContentPresenter);
JSIL.MakeProperty(System.Windows.Controls.ScrollViewer.prototype, "ElementHorizontalScrollBar", 
	System.Windows.Controls.ScrollViewer.prototype.get_ElementHorizontalScrollBar, System.Windows.Controls.ScrollViewer.prototype.set_ElementHorizontalScrollBar);
JSIL.MakeProperty(System.Windows.Controls.ScrollViewer.prototype, "ElementVerticalScrollBar", 
	System.Windows.Controls.ScrollViewer.prototype.get_ElementVerticalScrollBar, System.Windows.Controls.ScrollViewer.prototype.set_ElementVerticalScrollBar);
JSIL.MakeProperty(System.Windows.Controls.ScrollViewer.prototype, "InChildInvalidateMeasure", 
	System.Windows.Controls.ScrollViewer.prototype.get_InChildInvalidateMeasure, System.Windows.Controls.ScrollViewer.prototype.set_InChildInvalidateMeasure);
Object.defineProperty(System.Windows.Controls.ScrollViewer, "ElementScrollContentPresenterName", {
		"value": "ScrollContentPresenter"}
);
Object.defineProperty(System.Windows.Controls.ScrollViewer, "ElementHorizontalScrollBarName", {
		"value": "HorizontalScrollBar"}
);
Object.defineProperty(System.Windows.Controls.ScrollViewer, "ElementVerticalScrollBarName", {
		"value": "VerticalScrollBar"}
);
Object.defineProperty(System.Windows.Controls.ScrollViewer, "_scrollLineDelta", {
		"value": 16}
);
Object.defineProperty(System.Windows.Controls.ScrollViewer, "_mouseWheelDelta", {
		"value": 48}
);
System.Windows.Controls.ScrollViewer.ManipulationModeProperty = null;
System.Windows.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty = null;
System.Windows.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty = null;
System.Windows.Controls.ScrollViewer.HorizontalOffsetProperty = null;
System.Windows.Controls.ScrollViewer.ViewportWidthProperty = null;
System.Windows.Controls.ScrollViewer.ScrollableWidthProperty = null;
System.Windows.Controls.ScrollViewer.ComputedHorizontalScrollBarVisibilityProperty = null;
System.Windows.Controls.ScrollViewer.VerticalOffsetProperty = null;
System.Windows.Controls.ScrollViewer.ViewportHeightProperty = null;
System.Windows.Controls.ScrollViewer.ScrollableHeightProperty = null;
System.Windows.Controls.ScrollViewer.ComputedVerticalScrollBarVisibilityProperty = null;
System.Windows.Controls.ScrollViewer.ExtentHeightProperty = null;
System.Windows.Controls.ScrollViewer.ExtentWidthProperty = null;
System.Windows.Controls.ScrollViewer.prototype._templatedParentHandlesMouseButton = false;
System.Windows.Controls.ScrollViewer.prototype._templatedParentHandlesScrolling = false;
System.Windows.Controls.ScrollViewer.prototype.ScrollChanged = null;
System.Windows.Controls.ScrollViewer.prototype._scrollInfo = null;
System.Windows.Controls.ScrollViewer.prototype._inMeasure = false;
System.Windows.Controls.ScrollViewer.prototype._inChildInvalidateMeasure = false;
System.Windows.Controls.ScrollViewer.prototype._scrollVisibilityX = 0;
System.Windows.Controls.ScrollViewer.prototype._scrollVisibilityY = 0;
System.Windows.Controls.ScrollViewer.prototype._xOffset = 0;
System.Windows.Controls.ScrollViewer.prototype._yOffset = 0;
System.Windows.Controls.ScrollViewer.prototype._xViewport = 0;
System.Windows.Controls.ScrollViewer.prototype._yViewport = 0;
System.Windows.Controls.ScrollViewer.prototype._xExtent = 0;
System.Windows.Controls.ScrollViewer.prototype._yExtent = 0;
System.Windows.Controls.ScrollViewer.prototype.ElementScrollContentPresenter$value = null;
System.Windows.Controls.ScrollViewer.prototype.ElementHorizontalScrollBar$value = null;
System.Windows.Controls.ScrollViewer.prototype.ElementVerticalScrollBar$value = null;
System.Windows.Controls.ScrollViewer.$CachedAnonymousMethodDelegate5 = null;
System.Windows.Controls.ScrollViewer._cctor = function () {
	System.Windows.Controls.ScrollViewer.ManipulationModeProperty = System.Windows.DependencyProperty.RegisterAttached("ManipulationMode", System.Windows.Controls.ManipulationMode, System.Windows.Controls.ScrollViewer, JSIL.New(System.Windows.PropertyMetadata, "_ctor$0", [function (o, a) {
				$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
			}]));
	System.Windows.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty = System.Windows.DependencyProperty.RegisterAttached("HorizontalScrollBarVisibility", System.Windows.Controls.ScrollBarVisibility, System.Windows.Controls.ScrollViewer, JSIL.New(System.Windows.PropertyMetadata, "_ctor$0", [JSIL.Delegate.New("System.Windows.PropertyChangedCallback", null, System.Windows.Controls.ScrollViewer.OnScrollBarVisibilityChanged)]));
	System.Windows.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty = System.Windows.DependencyProperty.RegisterAttached("VerticalScrollBarVisibility", System.Windows.Controls.ScrollBarVisibility, System.Windows.Controls.ScrollViewer, JSIL.New(System.Windows.PropertyMetadata, "_ctor$0", [JSIL.Delegate.New("System.Windows.PropertyChangedCallback", null, System.Windows.Controls.ScrollViewer.OnScrollBarVisibilityChanged)]));
	System.Windows.Controls.ScrollViewer.HorizontalOffsetProperty = System.Windows.DependencyProperty.RegisterReadOnly("HorizontalOffset", System.Double, System.Windows.Controls.ScrollViewer, null);
	System.Windows.Controls.ScrollViewer.ViewportWidthProperty = System.Windows.DependencyProperty.RegisterReadOnly("ViewportWidth", System.Double, System.Windows.Controls.ScrollViewer, null);
	System.Windows.Controls.ScrollViewer.ScrollableWidthProperty = System.Windows.DependencyProperty.RegisterReadOnly("ScrollableWidth", System.Double, System.Windows.Controls.ScrollViewer, null);
	System.Windows.Controls.ScrollViewer.ComputedHorizontalScrollBarVisibilityProperty = System.Windows.DependencyProperty.RegisterReadOnly("ComputedHorizontalScrollBarVisibility", System.Windows.Visibility, System.Windows.Controls.ScrollViewer, null);
	System.Windows.Controls.ScrollViewer.VerticalOffsetProperty = System.Windows.DependencyProperty.RegisterReadOnly("VerticalOffset", System.Double, System.Windows.Controls.ScrollViewer, null);
	System.Windows.Controls.ScrollViewer.ViewportHeightProperty = System.Windows.DependencyProperty.RegisterReadOnly("ViewportHeight", System.Double, System.Windows.Controls.ScrollViewer, null);
	System.Windows.Controls.ScrollViewer.ScrollableHeightProperty = System.Windows.DependencyProperty.RegisterReadOnly("ScrollableHeight", System.Double, System.Windows.Controls.ScrollViewer, null);
	System.Windows.Controls.ScrollViewer.ComputedVerticalScrollBarVisibilityProperty = System.Windows.DependencyProperty.RegisterReadOnly("ComputedVerticalScrollBarVisibility", System.Windows.Visibility, System.Windows.Controls.ScrollViewer, null);
	System.Windows.Controls.ScrollViewer.ExtentHeightProperty = System.Windows.DependencyProperty.RegisterReadOnly("ExtentHeight", System.Double, System.Windows.Controls.ScrollViewer, null);
	System.Windows.Controls.ScrollViewer.ExtentWidthProperty = System.Windows.DependencyProperty.RegisterReadOnly("ExtentWidth", System.Double, System.Windows.Controls.ScrollViewer, null);
};

$asm02.MS.Internal.ProgressiveUploadStream.prototype._ctor = function (request, contentLength) {
	System.IO.Stream.prototype._ctor.call(this);
	this._closed = false;
	this._req = request;
	this._length = contentLength;
	this._written = 0;
};
$asm02.MS.Internal.ProgressiveUploadStream.prototype.Finalize = function () {
	try {
	} finally {
		System.Object.prototype.Finalize.call(this);
	}
};
$asm02.MS.Internal.ProgressiveUploadStream.prototype.get_CanRead = function () {
	return false;
};
$asm02.MS.Internal.ProgressiveUploadStream.prototype.get_CanSeek = function () {
	return false;
};
$asm02.MS.Internal.ProgressiveUploadStream.prototype.get_CanWrite = function () {
	return !this._closed;
};
$asm02.MS.Internal.ProgressiveUploadStream.prototype.Close = function () {
	this._closed = true;
};
$asm02.MS.Internal.ProgressiveUploadStream.prototype.get_Length = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm02.MS.Internal.ProgressiveUploadStream.prototype.get_Position = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm02.MS.Internal.ProgressiveUploadStream.prototype.set_Position = function (value) {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm02.MS.Internal.ProgressiveUploadStream.prototype.Flush = function () {
};
$asm02.MS.Internal.ProgressiveUploadStream.prototype.Seek = function (offset, origin) {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm02.MS.Internal.ProgressiveUploadStream.prototype.SetLength = function (value) {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm02.MS.Internal.ProgressiveUploadStream.prototype.Read = function (buffer, offset, count) {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm02.MS.Internal.ProgressiveUploadStream.prototype.Write = function (buffer, offset, count) {
	if ((this._written + count) > this._length) {
		throw JSIL.New(System.Net.ProtocolViolationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("HttpWebRequest_ContentTooLong")]);
	}
	if (count < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["count"]);
	}
	if (count === 0) {
		return;
	}
	this._req.WriteRequestStream(buffer, offset, count);
	this._written += count;
};
JSIL.MakeProperty($asm02.MS.Internal.ProgressiveUploadStream.prototype, "CanRead", 
	$asm02.MS.Internal.ProgressiveUploadStream.prototype.get_CanRead, null);
JSIL.MakeProperty($asm02.MS.Internal.ProgressiveUploadStream.prototype, "CanSeek", 
	$asm02.MS.Internal.ProgressiveUploadStream.prototype.get_CanSeek, null);
JSIL.MakeProperty($asm02.MS.Internal.ProgressiveUploadStream.prototype, "CanWrite", 
	$asm02.MS.Internal.ProgressiveUploadStream.prototype.get_CanWrite, null);
JSIL.MakeProperty($asm02.MS.Internal.ProgressiveUploadStream.prototype, "Length", 
	$asm02.MS.Internal.ProgressiveUploadStream.prototype.get_Length, null);
JSIL.MakeProperty($asm02.MS.Internal.ProgressiveUploadStream.prototype, "Position", 
	$asm02.MS.Internal.ProgressiveUploadStream.prototype.get_Position, $asm02.MS.Internal.ProgressiveUploadStream.prototype.set_Position);
$asm02.MS.Internal.ProgressiveUploadStream.prototype._closed = false;
$asm02.MS.Internal.ProgressiveUploadStream.prototype._req = null;
$asm02.MS.Internal.ProgressiveUploadStream.prototype._length = 0;
$asm02.MS.Internal.ProgressiveUploadStream.prototype._written = 0;

$asm02.MS.Internal.Controls.ScrollData.prototype.ClearLayout = function () {
	this._offset = new $asm02.MS.Internal.Controls.Vector(0, 0);
	this._viewport = (this._extent = (this._maxDesiredSize = new System.Windows.Size(0, 0)).MemberwiseClone()).MemberwiseClone();
};
$asm02.MS.Internal.Controls.ScrollData.prototype._ctor = function () {
	this._offset = new $asm02.MS.Internal.Controls.Vector(0, 0);
	this._computedOffset = new $asm02.MS.Internal.Controls.Vector(0, 0);
	this._viewport = new System.Windows.Size(0, 0);
	this._extent = new System.Windows.Size(0, 0);
	this._maxDesiredSize = new System.Windows.Size(0, 0);
	System.Object.prototype._ctor.call(this);
};
$asm02.MS.Internal.Controls.ScrollData.prototype._scrollOwner = null;
$asm02.MS.Internal.Controls.ScrollData.prototype._canHorizontallyScroll = false;
$asm02.MS.Internal.Controls.ScrollData.prototype._canVerticallyScroll = false;

$asm02.MS.Internal.Controls.Vector.prototype._ctor = function (x, y) {
	this._x = x;
	this._y = y;
};
$asm02.MS.Internal.Controls.Vector.prototype.get_X = function () {
	return this._x;
};
$asm02.MS.Internal.Controls.Vector.prototype.set_X = function (value) {
	this._x = value;
};
$asm02.MS.Internal.Controls.Vector.prototype.get_Y = function () {
	return this._y;
};
$asm02.MS.Internal.Controls.Vector.prototype.set_Y = function (value) {
	this._y = value;
};
JSIL.MakeProperty($asm02.MS.Internal.Controls.Vector.prototype, "X", 
	$asm02.MS.Internal.Controls.Vector.prototype.get_X, $asm02.MS.Internal.Controls.Vector.prototype.set_X);
JSIL.MakeProperty($asm02.MS.Internal.Controls.Vector.prototype, "Y", 
	$asm02.MS.Internal.Controls.Vector.prototype.get_Y, $asm02.MS.Internal.Controls.Vector.prototype.set_Y);
$asm02.MS.Internal.Controls.Vector.prototype._x = 0;
$asm02.MS.Internal.Controls.Vector.prototype._y = 0;

System.Windows.Data.CollectionViewGroup.prototype._ctor = function (name) {
	System.Object.prototype._ctor.call(this);
	this._name = name;
	this._itemsRW = JSIL.New(System.Collections.ObjectModel.ObservableCollection$b1.Of(System.Object), "_ctor$0", []);
	this._itemsRO = new (System.Collections.ObjectModel.ReadOnlyObservableCollection$b1.Of(System.Object)) (this._itemsRW);
};
System.Windows.Data.CollectionViewGroup.prototype.get_Name = function () {
	return this._name;
};
System.Windows.Data.CollectionViewGroup.prototype.get_Items = function () {
	return this._itemsRO;
};
System.Windows.Data.CollectionViewGroup.prototype.get_ItemCount = function () {
	return this._itemCount;
};
System.Windows.Data.CollectionViewGroup.prototype.INotifyPropertyChanged_add_PropertyChanged = function (value) {
	this.PropertyChanged = System.Delegate.Combine(this.PropertyChanged, value);
};
System.Windows.Data.CollectionViewGroup.prototype.INotifyPropertyChanged_remove_PropertyChanged = function (value) {
	this.PropertyChanged = System.Delegate.Remove(this.PropertyChanged, value);
};
System.Windows.Data.CollectionViewGroup.prototype.add_PropertyChanged = function (value) {
	this.PropertyChanged = System.Delegate.Combine(this.PropertyChanged, value);
};
System.Windows.Data.CollectionViewGroup.prototype.remove_PropertyChanged = function (value) {
	this.PropertyChanged = System.Delegate.Remove(this.PropertyChanged, value);
};
System.Windows.Data.CollectionViewGroup.prototype.OnPropertyChanged = function (e) {
	if (this.PropertyChanged !== null) {
		this.PropertyChanged(this, e);
	}
};
System.Windows.Data.CollectionViewGroup.prototype.get_ProtectedItems = function () {
	return this._itemsRW;
};
System.Windows.Data.CollectionViewGroup.prototype.get_ProtectedItemCount = function () {
	return this._itemCount;
};
System.Windows.Data.CollectionViewGroup.prototype.set_ProtectedItemCount = function (value) {
	this._itemCount = value;
	this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("ItemCount"));
};
JSIL.MakeProperty(System.Windows.Data.CollectionViewGroup.prototype, "Name", 
	System.Windows.Data.CollectionViewGroup.prototype.get_Name, null);
JSIL.MakeProperty(System.Windows.Data.CollectionViewGroup.prototype, "Items", 
	System.Windows.Data.CollectionViewGroup.prototype.get_Items, null);
JSIL.MakeProperty(System.Windows.Data.CollectionViewGroup.prototype, "ItemCount", 
	System.Windows.Data.CollectionViewGroup.prototype.get_ItemCount, null);
JSIL.MakeProperty(System.Windows.Data.CollectionViewGroup.prototype, "IsBottomLevel", 
	System.Windows.Data.CollectionViewGroup.prototype.get_IsBottomLevel, null);
JSIL.MakeProperty(System.Windows.Data.CollectionViewGroup.prototype, "ProtectedItems", 
	System.Windows.Data.CollectionViewGroup.prototype.get_ProtectedItems, null);
JSIL.MakeProperty(System.Windows.Data.CollectionViewGroup.prototype, "ProtectedItemCount", 
	System.Windows.Data.CollectionViewGroup.prototype.get_ProtectedItemCount, System.Windows.Data.CollectionViewGroup.prototype.set_ProtectedItemCount);
System.Windows.Data.CollectionViewGroup.prototype.PropertyChanged = null;
System.Windows.Data.CollectionViewGroup.prototype._name = null;
System.Windows.Data.CollectionViewGroup.prototype._itemsRW = null;
System.Windows.Data.CollectionViewGroup.prototype._itemsRO = null;
System.Windows.Data.CollectionViewGroup.prototype._itemCount = 0;

$asm02.MS.Internal.CollectionViewGroupInternal.prototype._ctor = function (name, parent) {
	this._fullCount = 1;
	System.Windows.Data.CollectionViewGroup.prototype._ctor.call(this, name);
	this._parentGroup = parent;
};
$asm02.MS.Internal.CollectionViewGroupInternal.prototype.get_IsBottomLevel = function () {
	return (this._groupBy === null);
};
$asm02.MS.Internal.CollectionViewGroupInternal.prototype.get_GroupBy = function () {
	return this._groupBy;
};
$asm02.MS.Internal.CollectionViewGroupInternal.prototype.set_GroupBy = function (value) {
	var isBottomLevel = this.IsBottomLevel;
	if (this._groupBy !== null) {
		this._groupBy.INotifyPropertyChanged_remove_PropertyChanged(JSIL.Delegate.New("System.ComponentModel.PropertyChangedEventHandler", this, $asm02.MS.Internal.CollectionViewGroupInternal.prototype.OnGroupByChanged$1));
	}
	this._groupBy = value;
	if (this._groupBy !== null) {
		this._groupBy.INotifyPropertyChanged_add_PropertyChanged(JSIL.Delegate.New("System.ComponentModel.PropertyChangedEventHandler", this, $asm02.MS.Internal.CollectionViewGroupInternal.prototype.OnGroupByChanged$1));
	}
	if (isBottomLevel !== this.IsBottomLevel) {
		this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("IsBottomLevel"));
	}
};
$asm02.MS.Internal.CollectionViewGroupInternal.prototype.get_FullCount = function () {
	return this._fullCount;
};
$asm02.MS.Internal.CollectionViewGroupInternal.prototype.set_FullCount = function (value) {
	this._fullCount = value;
};
$asm02.MS.Internal.CollectionViewGroupInternal.prototype.get_LastIndex = function () {
	return this._lastIndex;
};
$asm02.MS.Internal.CollectionViewGroupInternal.prototype.set_LastIndex = function (value) {
	this._lastIndex = value;
};
$asm02.MS.Internal.CollectionViewGroupInternal.prototype.get_SeedItem = function () {
	if (!((System.Windows.Data.CollectionViewGroup.prototype.get_ItemCount.call(this) <= 0) || ((this.GroupBy !== null) && 
				(this.GroupBy.GroupNames.Count !== 0)))) {
		var i = 0;
		var count = System.Windows.Data.CollectionViewGroup.prototype.get_Items.call(this).Count;
	__loop0__: 
		while (i < count) {
			var collectionViewGroupInternal = JSIL.TryCast(System.Windows.Data.CollectionViewGroup.prototype.get_Items.call(this).get_Item(i), $asm02.MS.Internal.CollectionViewGroupInternal);
			if (collectionViewGroupInternal === null) {
				return System.Windows.Data.CollectionViewGroup.prototype.get_Items.call(this).get_Item(i);
			}
			if (collectionViewGroupInternal.ItemCount > 0) {
				return collectionViewGroupInternal.SeedItem;
			}
			++i;
		}
		return System.Windows.DependencyProperty.UnsetValue;
	}
	return System.Windows.DependencyProperty.UnsetValue;
};
$asm02.MS.Internal.CollectionViewGroupInternal.prototype.Add = function (item) {
	this.ChangeCounts(item, 1);
	System.Windows.Data.CollectionViewGroup.prototype.get_ProtectedItems.call(this).Add(item);
};
$asm02.MS.Internal.CollectionViewGroupInternal.prototype.Remove = function (item, returnLeafIndex) {
	var result = -1;
	var num = System.Windows.Data.CollectionViewGroup.prototype.get_ProtectedItems.call(this).IndexOf(item);
	if (num >= 0) {
		if (returnLeafIndex) {
			result = this.LeafIndexFromItem(null, num);
		}
		this.ChangeCounts(item, -1);
		System.Windows.Data.CollectionViewGroup.prototype.get_ProtectedItems.call(this).RemoveAt(num);
	}
	return result;
};
$asm02.MS.Internal.CollectionViewGroupInternal.prototype.Clear = function () {
	System.Windows.Data.CollectionViewGroup.prototype.get_ProtectedItems.call(this).Clear();
	this.FullCount = 1;
	System.Windows.Data.CollectionViewGroup.prototype.set_ProtectedItemCount.call(this, 0);
};
$asm02.MS.Internal.CollectionViewGroupInternal.prototype.LeafIndexOf = function (item) {
	var num = 0;
	var i = 0;
	var count = System.Windows.Data.CollectionViewGroup.prototype.get_Items.call(this).Count;
__loop0__: 
	while (i < count) {
		var collectionViewGroupInternal = JSIL.TryCast(System.Windows.Data.CollectionViewGroup.prototype.get_Items.call(this).get_Item(i), $asm02.MS.Internal.CollectionViewGroupInternal);
		if (collectionViewGroupInternal !== null) {
			var num2 = collectionViewGroupInternal.LeafIndexOf(item);
			if (num2 >= 0) {
				return (num + num2);
			}
			num += collectionViewGroupInternal.ItemCount;
		} else {
			if (System.Object.Equals(item, System.Windows.Data.CollectionViewGroup.prototype.get_Items.call(this).get_Item(i))) {
				return num;
			}
			++num;
		}
		++i;
	}
	return -1;
};
$asm02.MS.Internal.CollectionViewGroupInternal.prototype.LeafIndexFromItem = function (item, index) {
	var num = 0;
	var collectionViewGroupInternal = this;
__loop0__: 
	while (collectionViewGroupInternal) {
		var num2 = 0;
		var count = collectionViewGroupInternal.Items.Count;
	__loop1__: 
		while (!((num2 >= count) || 
				((index < 0) && 
					System.Object.Equals(item, collectionViewGroupInternal.Items.get_Item(num2))) || (index === num2))) {
			var collectionViewGroupInternal2 = JSIL.TryCast(collectionViewGroupInternal.Items.get_Item(num2), $asm02.MS.Internal.CollectionViewGroupInternal);
			num += (collectionViewGroupInternal2 === null) ? 1 : collectionViewGroupInternal2.ItemCount;
			++num2;
		}
		item = collectionViewGroupInternal;
		collectionViewGroupInternal = collectionViewGroupInternal.Parent;
		index = -1;
	}
	return num;
};
$asm02.MS.Internal.CollectionViewGroupInternal.prototype.LeafAt = function (index) {
	var i = 0;
	var count = System.Windows.Data.CollectionViewGroup.prototype.get_Items.call(this).Count;
__loop0__: 
	while (i < count) {
		var collectionViewGroupInternal = JSIL.TryCast(System.Windows.Data.CollectionViewGroup.prototype.get_Items.call(this).get_Item(i), $asm02.MS.Internal.CollectionViewGroupInternal);
		if (collectionViewGroupInternal !== null) {
			if (index < collectionViewGroupInternal.ItemCount) {
				return collectionViewGroupInternal.LeafAt(index);
			}
			index -= collectionViewGroupInternal.ItemCount;
		} else {
			if (index === 0) {
				return System.Windows.Data.CollectionViewGroup.prototype.get_Items.call(this).get_Item(i);
			}
			--index;
		}
		++i;
	}
	throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["index"]);
};
$asm02.MS.Internal.CollectionViewGroupInternal.prototype.GetLeafEnumerator = function () {
	return new $asm02.MS.Internal.CollectionViewGroupInternal.LeafEnumerator(this);
};
$asm02.MS.Internal.CollectionViewGroupInternal.prototype.Insert = function (item, seed, comparer) {
	var low = (this.GroupBy === null) ? 0 : this.GroupBy.GroupNames.Count;
	var num = this.FindIndex(
		item, 
		seed, 
		comparer, 
		low, 
		System.Windows.Data.CollectionViewGroup.prototype.get_ProtectedItems.call(this).Count
	);
	this.ChangeCounts(item, 1);
	System.Windows.Data.CollectionViewGroup.prototype.get_ProtectedItems.call(this).Insert(num, item);
	return num;
};
$asm02.MS.Internal.CollectionViewGroupInternal.prototype.FindIndex = function (item, seed, comparer, low, high) {
	if (comparer !== null) {
		var listComparer = JSIL.TryCast(comparer, $asm02.MS.Internal.CollectionViewGroupInternal.IListComparer);
		if (listComparer !== null) {
			listComparer.Reset();
		}
	__loop0__: 
		for (var i = low; i < high; ++i) {
			var collectionViewGroupInternal = JSIL.TryCast(System.Windows.Data.CollectionViewGroup.prototype.get_ProtectedItems.call(this).get_Item(i), $asm02.MS.Internal.CollectionViewGroupInternal);
			var obj = collectionViewGroupInternal ? collectionViewGroupInternal.SeedItem : System.Windows.Data.CollectionViewGroup.prototype.get_ProtectedItems.call(this).get_Item(i);
			if ((obj !== System.Windows.DependencyProperty.UnsetValue) && (comparer.IComparer$b1_Compare(seed, obj) < 0)) {
				break __loop0__;
			}
		}
	} else {
		i = high;
	}
	return i;
};
$asm02.MS.Internal.CollectionViewGroupInternal.prototype.OnGroupByChanged$0 = function () {
	if (this.Parent !== null) {
		this.Parent.OnGroupByChanged$0();
	}
};
$asm02.MS.Internal.CollectionViewGroupInternal.prototype.get_Parent = function () {
	return this._parentGroup;
};
$asm02.MS.Internal.CollectionViewGroupInternal.prototype.ChangeCounts = function (item, delta) {
	var flag = !JSIL.CheckType(item, System.Windows.Data.CollectionViewGroup);
	var collectionViewGroupInternal = this;
__loop0__: 
	while (collectionViewGroupInternal) {
		collectionViewGroupInternal.FullCount += delta;
		if (flag) {
			collectionViewGroupInternal.ProtectedItemCount += delta;
			if (collectionViewGroupInternal.ProtectedItemCount === 0) {
				this.RemoveEmptyGroup(collectionViewGroupInternal);
			}
		}
		collectionViewGroupInternal = collectionViewGroupInternal._parentGroup;
	}
	++this._version;
};
$asm02.MS.Internal.CollectionViewGroupInternal.prototype.RemoveEmptyGroup = function (group) {
	var parent = group.Parent;
	if (parent !== null) {
		var groupBy = parent.GroupBy;
		var num = parent.ProtectedItems.IndexOf(group);
		if (num >= groupBy.GroupNames.Count) {
			parent.Remove(group, false);
		}
	}
};
$asm02.MS.Internal.CollectionViewGroupInternal.prototype.OnGroupByChanged$1 = function (sender, e) {
	this.OnGroupByChanged$0();
};
JSIL.OverloadedMethod($asm02.MS.Internal.CollectionViewGroupInternal.prototype, "OnGroupByChanged", [
		["OnGroupByChanged$0", []], 
		["OnGroupByChanged$1", [System.Object, System.ComponentModel.PropertyChangedEventArgs]]
	]);
JSIL.MakeProperty($asm02.MS.Internal.CollectionViewGroupInternal.prototype, "IsBottomLevel", 
	$asm02.MS.Internal.CollectionViewGroupInternal.prototype.get_IsBottomLevel, null);
JSIL.MakeProperty($asm02.MS.Internal.CollectionViewGroupInternal.prototype, "GroupBy", 
	$asm02.MS.Internal.CollectionViewGroupInternal.prototype.get_GroupBy, $asm02.MS.Internal.CollectionViewGroupInternal.prototype.set_GroupBy);
JSIL.MakeProperty($asm02.MS.Internal.CollectionViewGroupInternal.prototype, "FullCount", 
	$asm02.MS.Internal.CollectionViewGroupInternal.prototype.get_FullCount, $asm02.MS.Internal.CollectionViewGroupInternal.prototype.set_FullCount);
JSIL.MakeProperty($asm02.MS.Internal.CollectionViewGroupInternal.prototype, "LastIndex", 
	$asm02.MS.Internal.CollectionViewGroupInternal.prototype.get_LastIndex, $asm02.MS.Internal.CollectionViewGroupInternal.prototype.set_LastIndex);
JSIL.MakeProperty($asm02.MS.Internal.CollectionViewGroupInternal.prototype, "SeedItem", 
	$asm02.MS.Internal.CollectionViewGroupInternal.prototype.get_SeedItem, null);
JSIL.MakeProperty($asm02.MS.Internal.CollectionViewGroupInternal.prototype, "Parent", 
	$asm02.MS.Internal.CollectionViewGroupInternal.prototype.get_Parent, null);
$asm02.MS.Internal.CollectionViewGroupInternal.prototype._groupBy = null;
$asm02.MS.Internal.CollectionViewGroupInternal.prototype._parentGroup = null;
$asm02.MS.Internal.CollectionViewGroupInternal.prototype._fullCount = 0;
$asm02.MS.Internal.CollectionViewGroupInternal.prototype._lastIndex = 0;
$asm02.MS.Internal.CollectionViewGroupInternal.prototype._version = 0;

$asm02.MS.Internal.CollectionViewGroupInternal.IListComparer.prototype._ctor = function (list) {
	System.Object.prototype._ctor.call(this);
	this.ResetList(list);
};
$asm02.MS.Internal.CollectionViewGroupInternal.IListComparer.prototype.Reset = function () {
	this._index = 0;
};
$asm02.MS.Internal.CollectionViewGroupInternal.IListComparer.prototype.ResetList = function (list) {
	this._list = list;
	this._index = 0;
};
$asm02.MS.Internal.CollectionViewGroupInternal.IListComparer.prototype.Compare = function (x, y) {
	if (System.Object.Equals(x, y)) {
		return 0;
	}
__loop0__: 
	for (var num = this._list ? this._list.ICollection_Count : 0; this._index < num; ) {
		var objB = this._list.IList_get_Item(this._index);
		if (System.Object.Equals(x, objB)) {
			return -1;
		}
		if (System.Object.Equals(y, objB)) {
			return 1;
		}
		++this._index;
	}
	return 1;
};
$asm02.MS.Internal.CollectionViewGroupInternal.IListComparer.prototype._index = 0;
$asm02.MS.Internal.CollectionViewGroupInternal.IListComparer.prototype._list = null;

$asm02.MS.Internal.CollectionViewGroupInternal.LeafEnumerator.prototype._ctor = function (group) {
	System.Object.prototype._ctor.call(this);
	this._group = group;
	this.DoReset();
};
$asm02.MS.Internal.CollectionViewGroupInternal.LeafEnumerator.prototype.IEnumerator_Reset = function () {
	this.DoReset();
};
$asm02.MS.Internal.CollectionViewGroupInternal.LeafEnumerator.prototype.DoReset = function () {
	this._version = this._group._version;
	this._index = -1;
	this._subEnum = null;
};
$asm02.MS.Internal.CollectionViewGroupInternal.LeafEnumerator.prototype.IEnumerator_MoveNext = function () {
	if (this._group._version !== this._version) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
	}
__loop0__: 
	while ((this._subEnum === null) || !this._subEnum.IEnumerator_MoveNext()) {
		++this._index;
		if (this._index >= this._group.Items.Count) {
			return false;
		}
		var collectionViewGroupInternal = JSIL.TryCast(this._group.Items.get_Item(this._index), $asm02.MS.Internal.CollectionViewGroupInternal);
		if (collectionViewGroupInternal === null) {
			this._current = this._group.Items.get_Item(this._index);
			this._subEnum = null;
			return true;
		}
		this._subEnum = collectionViewGroupInternal.GetLeafEnumerator();
	}
	this._current = this._subEnum.IEnumerator_Current;
	return true;
};
$asm02.MS.Internal.CollectionViewGroupInternal.LeafEnumerator.prototype.IEnumerator_get_Current = function () {
	if (!((this._index >= 0) && (this._index < this._group.Items.Count))) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
	}
	return this._current;
};
JSIL.MakeProperty($asm02.MS.Internal.CollectionViewGroupInternal.LeafEnumerator.prototype, "IEnumerator_Current", 
	$asm02.MS.Internal.CollectionViewGroupInternal.LeafEnumerator.prototype.IEnumerator_get_Current, null);
$asm02.MS.Internal.CollectionViewGroupInternal.LeafEnumerator.prototype._group = null;
$asm02.MS.Internal.CollectionViewGroupInternal.LeafEnumerator.prototype._version = 0;
$asm02.MS.Internal.CollectionViewGroupInternal.LeafEnumerator.prototype._index = 0;
$asm02.MS.Internal.CollectionViewGroupInternal.LeafEnumerator.prototype._subEnum = null;
$asm02.MS.Internal.CollectionViewGroupInternal.LeafEnumerator.prototype._current = null;

$asm02.MS.Internal.CollectionViewGroupRoot.prototype._ctor = function (view) {
	this._groupBy = JSIL.New(System.Collections.ObjectModel.ObservableCollection$b1.Of(System.ComponentModel.GroupDescription), "_ctor$0", []);
	$asm02.MS.Internal.CollectionViewGroupInternal.prototype._ctor.call(this, "Root", null);
	this._view = view;
};
$asm02.MS.Internal.CollectionViewGroupRoot.prototype.add_CollectionChanged = function (value) {
	this.CollectionChanged = System.Delegate.Combine(this.CollectionChanged, value);
};
$asm02.MS.Internal.CollectionViewGroupRoot.prototype.remove_CollectionChanged = function (value) {
	this.CollectionChanged = System.Delegate.Remove(this.CollectionChanged, value);
};
$asm02.MS.Internal.CollectionViewGroupRoot.prototype.OnCollectionChanged = function (args) {
	if (args === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["args"]);
	}
	if (this.CollectionChanged !== null) {
		this.CollectionChanged(this, args);
	}
};
$asm02.MS.Internal.CollectionViewGroupRoot.prototype.get_GroupDescriptions = function () {
	return this._groupBy;
};
$asm02.MS.Internal.CollectionViewGroupRoot.prototype.OnGroupByChanged = function () {
	if (this.GroupDescriptionChanged !== null) {
		this.GroupDescriptionChanged(this, System.EventArgs.Empty);
	}
};
$asm02.MS.Internal.CollectionViewGroupRoot.prototype.add_GroupDescriptionChanged = function (value) {
	this.GroupDescriptionChanged = System.Delegate.Combine(this.GroupDescriptionChanged, value);
};
$asm02.MS.Internal.CollectionViewGroupRoot.prototype.remove_GroupDescriptionChanged = function (value) {
	this.GroupDescriptionChanged = System.Delegate.Remove(this.GroupDescriptionChanged, value);
};
$asm02.MS.Internal.CollectionViewGroupRoot.prototype.get_ActiveComparer = function () {
	return this._comparer;
};
$asm02.MS.Internal.CollectionViewGroupRoot.prototype.set_ActiveComparer = function (value) {
	this._comparer = value;
};
$asm02.MS.Internal.CollectionViewGroupRoot.prototype.get_Culture = function () {
	return this._view.Culture;
};
$asm02.MS.Internal.CollectionViewGroupRoot.prototype.Initialize = function () {
	this.InitializeGroup(this, 0);
};
$asm02.MS.Internal.CollectionViewGroupRoot.prototype.AddToSubgroups$0 = function (item, loading) {
	this.AddToSubgroups$1(item, this, 0, loading);
};
$asm02.MS.Internal.CollectionViewGroupRoot.prototype.RemoveFromSubgroups$0 = function (item) {
	return this.RemoveFromSubgroups$1(item, this, 0);
};
$asm02.MS.Internal.CollectionViewGroupRoot.prototype.RemoveItemFromSubgroupsByExhaustiveSearch$0 = function (item) {
	this.RemoveItemFromSubgroupsByExhaustiveSearch$1(this, item);
};
$asm02.MS.Internal.CollectionViewGroupRoot.prototype.InsertSpecialItem = function (index, item, loading) {
	$asm02.MS.Internal.CollectionViewGroupInternal.prototype.ChangeCounts.call(this, item, 1);
	System.Windows.Data.CollectionViewGroup.prototype.get_ProtectedItems.call(this).Insert(index, item);
	if (!loading) {
		var index2 = $asm02.MS.Internal.CollectionViewGroupInternal.prototype.LeafIndexFromItem.call(this, item, index);
		this.OnCollectionChanged(JSIL.New(System.Collections.Specialized.NotifyCollectionChangedEventArgs, "_ctor$1", [System.Collections.Specialized.NotifyCollectionChangedAction.Add, item, index2]));
	}
};
$asm02.MS.Internal.CollectionViewGroupRoot.prototype.RemoveSpecialItem = function (index, item, loading) {
	var index2 = -1;
	if (!loading) {
		index2 = $asm02.MS.Internal.CollectionViewGroupInternal.prototype.LeafIndexFromItem.call(this, item, index);
	}
	$asm02.MS.Internal.CollectionViewGroupInternal.prototype.ChangeCounts.call(this, item, -1);
	System.Windows.Data.CollectionViewGroup.prototype.get_ProtectedItems.call(this).RemoveAt(index);
	if (!loading) {
		this.OnCollectionChanged(JSIL.New(System.Collections.Specialized.NotifyCollectionChangedEventArgs, "_ctor$1", [System.Collections.Specialized.NotifyCollectionChangedAction.Remove, item, index2]));
	}
};
$asm02.MS.Internal.CollectionViewGroupRoot.prototype.FindIndex = function (item, seed, comparer, low, high) {
	var editableCollectionView = JSIL.TryCast(this._view, System.ComponentModel.IEditableCollectionView);
	if (!((editableCollectionView === null) || !editableCollectionView.IEditableCollectionView_IsAddingNew)) {
		--high;
	}
	return $asm02.MS.Internal.CollectionViewGroupInternal.prototype.FindIndex.call(
		this, item, 
		seed, 
		comparer, 
		low, 
		high
	);
};
$asm02.MS.Internal.CollectionViewGroupRoot.prototype.InitializeGroup = function (group, level) {
	var groupDescription = (level < this.GroupDescriptions.Count) ? this.GroupDescriptions.get_Item(level) : null;
	group.GroupBy = groupDescription;
	var observableCollection = groupDescription ? groupDescription.GroupNames : null;
	if (observableCollection !== null) {
		var i = 0;
		var count = observableCollection.Count;
	__loop0__: 
		while (i < count) {
			var collectionViewGroupInternal = new $asm02.MS.Internal.CollectionViewGroupInternal(observableCollection.get_Item(i), group);
			this.InitializeGroup(collectionViewGroupInternal, (level + 1));
			group.Add(collectionViewGroupInternal);
			++i;
		}
	}
	group.LastIndex = 0;
};
$asm02.MS.Internal.CollectionViewGroupRoot.prototype.AddToSubgroups$1 = function (item, group, level, loading) {
	var collection = null;
	var groupName = this.GetGroupName(item, group.GroupBy, level);
	if (groupName === $asm02.MS.Internal.CollectionViewGroupRoot.UseAsItemDirectly) {
		if (loading) {
			group.Add(item);
			return;
		}
		var index = group.Insert(item, item, this.ActiveComparer);
		var index2 = group.LeafIndexFromItem(item, index);
		this.OnCollectionChanged(JSIL.New(System.Collections.Specialized.NotifyCollectionChangedEventArgs, "_ctor$1", [System.Collections.Specialized.NotifyCollectionChangedAction.Add, item, index2]));
		return;
	} else {
		if ((collection = JSIL.TryCast(groupName, System.Collections.ICollection)) === null) {
			this.AddToSubgroup(
				item, 
				group, 
				level, 
				groupName, 
				loading
			);
			return;
		}
		var enumerator = collection.IEnumerable_GetEnumerator();
		try {
		__loop0__: 
			while (enumerator.IEnumerator_MoveNext()) {
				var current = enumerator.IEnumerator_Current;
				this.AddToSubgroup(
					item, 
					group, 
					level, 
					current, 
					loading
				);
			}
		} finally {
			var disposable = JSIL.TryCast(enumerator, System.IDisposable);
			if (disposable !== null) {
				disposable.IDisposable_Dispose();
			}
		}
		return;
	}
};
$asm02.MS.Internal.CollectionViewGroupRoot.prototype.AddToSubgroup = function (item, group, level, name, loading) {
	var i = 0;
	var count = group.Items.Count;
__loop0__: 
	while (i < count) {
		var collectionViewGroupInternal = JSIL.TryCast(group.Items.get_Item(i), $asm02.MS.Internal.CollectionViewGroupInternal);
		if (!((collectionViewGroupInternal === null) || !group.GroupBy.NamesMatch(collectionViewGroupInternal.Name, name))) {
			group.LastIndex = i;
			this.AddToSubgroups$1(item, collectionViewGroupInternal, (level + 1), loading);
			return;
		}
		++i;
	}
	collectionViewGroupInternal = new $asm02.MS.Internal.CollectionViewGroupInternal(name, group);
	this.InitializeGroup(collectionViewGroupInternal, (level + 1));
	if (loading) {
		group.Add(collectionViewGroupInternal);
		group.LastIndex = i;
	} else {
		group.Insert(collectionViewGroupInternal, item, this.ActiveComparer);
	}
	this.AddToSubgroups$1(item, collectionViewGroupInternal, (level + 1), loading);
};
$asm02.MS.Internal.CollectionViewGroupRoot.prototype.RemoveFromSubgroups$1 = function (item, group, level) {
	var collection = null;
	var result = false;
	var groupName = this.GetGroupName(item, group.GroupBy, level);
	if (groupName === $asm02.MS.Internal.CollectionViewGroupRoot.UseAsItemDirectly) {
		result = this.RemoveFromGroupDirectly(group, item);
	} else if ((collection = JSIL.TryCast(groupName, System.Collections.ICollection)) === null) {
		if (this.RemoveFromSubgroup(item, group, level, groupName)) {
			result = true;
		}
	} else {
		var enumerator = collection.IEnumerable_GetEnumerator();
		try {
		__loop0__: 
			while (enumerator.IEnumerator_MoveNext()) {
				var current = enumerator.IEnumerator_Current;
				if (this.RemoveFromSubgroup(item, group, level, current)) {
					result = true;
				}
			}
		} finally {
			var disposable = JSIL.TryCast(enumerator, System.IDisposable);
			if (disposable !== null) {
				disposable.IDisposable_Dispose();
			}
		}
	}
	return result;
};
$asm02.MS.Internal.CollectionViewGroupRoot.prototype.RemoveFromSubgroup = function (item, group, level, name) {
	var result = false;
	var i = 0;
	var count = group.Items.Count;
__loop0__: 
	while (i < count) {
		var collectionViewGroupInternal = JSIL.TryCast(group.Items.get_Item(i), $asm02.MS.Internal.CollectionViewGroupInternal);
		if (!((collectionViewGroupInternal === null) || !group.GroupBy.NamesMatch(collectionViewGroupInternal.Name, name))) {
			if (this.RemoveFromSubgroups$1(item, collectionViewGroupInternal, (level + 1))) {
				result = true;
			}
			return result;
		}
		++i;
	}
	return true;
};
$asm02.MS.Internal.CollectionViewGroupRoot.prototype.RemoveFromGroupDirectly = function (group, item) {
	var num = group.Remove(item, true);
	if (num >= 0) {
		this.OnCollectionChanged(JSIL.New(System.Collections.Specialized.NotifyCollectionChangedEventArgs, "_ctor$1", [System.Collections.Specialized.NotifyCollectionChangedAction.Remove, item, num]));
		return false;
	}
	return true;
};
$asm02.MS.Internal.CollectionViewGroupRoot.prototype.RemoveItemFromSubgroupsByExhaustiveSearch$1 = function (group, item) {
	if (this.RemoveFromGroupDirectly(group, item)) {
	__loop0__: 
		for (var i = (group.Items.Count - 1); i >= 0; --i) {
			var collectionViewGroupInternal = JSIL.TryCast(group.Items.get_Item(i), $asm02.MS.Internal.CollectionViewGroupInternal);
			if (collectionViewGroupInternal !== null) {
				this.RemoveItemFromSubgroupsByExhaustiveSearch$1(collectionViewGroupInternal, item);
			}
		}
	}
};
$asm02.MS.Internal.CollectionViewGroupRoot.prototype.GetGroupName = function (item, groupDescription, level) {
	if (groupDescription !== null) {
		return groupDescription.GroupNameFromItem(item, level, this.Culture);
	}
	return $asm02.MS.Internal.CollectionViewGroupRoot.UseAsItemDirectly;
};
JSIL.OverloadedMethod($asm02.MS.Internal.CollectionViewGroupRoot.prototype, "AddToSubgroups", [
		["AddToSubgroups$0", [System.Object, System.Boolean]], 
		["AddToSubgroups$1", [System.Object, $asm02.MS.Internal.CollectionViewGroupInternal, System.Int32, System.Boolean]]
	]);
JSIL.OverloadedMethod($asm02.MS.Internal.CollectionViewGroupRoot.prototype, "RemoveFromSubgroups", [
		["RemoveFromSubgroups$0", [System.Object]], 
		["RemoveFromSubgroups$1", [System.Object, $asm02.MS.Internal.CollectionViewGroupInternal, System.Int32]]
	]);
JSIL.OverloadedMethod($asm02.MS.Internal.CollectionViewGroupRoot.prototype, "RemoveItemFromSubgroupsByExhaustiveSearch", [
		["RemoveItemFromSubgroupsByExhaustiveSearch$0", [System.Object]], 
		["RemoveItemFromSubgroupsByExhaustiveSearch$1", [$asm02.MS.Internal.CollectionViewGroupInternal, System.Object]]
	]);
JSIL.MakeProperty($asm02.MS.Internal.CollectionViewGroupRoot.prototype, "GroupDescriptions", 
	$asm02.MS.Internal.CollectionViewGroupRoot.prototype.get_GroupDescriptions, null);
JSIL.MakeProperty($asm02.MS.Internal.CollectionViewGroupRoot.prototype, "ActiveComparer", 
	$asm02.MS.Internal.CollectionViewGroupRoot.prototype.get_ActiveComparer, $asm02.MS.Internal.CollectionViewGroupRoot.prototype.set_ActiveComparer);
JSIL.MakeProperty($asm02.MS.Internal.CollectionViewGroupRoot.prototype, "Culture", 
	$asm02.MS.Internal.CollectionViewGroupRoot.prototype.get_Culture, null);
$asm02.MS.Internal.CollectionViewGroupRoot.prototype.CollectionChanged = null;
$asm02.MS.Internal.CollectionViewGroupRoot.prototype.GroupDescriptionChanged = null;
$asm02.MS.Internal.CollectionViewGroupRoot.prototype._view = null;
$asm02.MS.Internal.CollectionViewGroupRoot.prototype._comparer = null;
$asm02.MS.Internal.CollectionViewGroupRoot.prototype._groupBy = null;
$asm02.MS.Internal.CollectionViewGroupRoot.UseAsItemDirectly = null;
$asm02.MS.Internal.CollectionViewGroupRoot._cctor = function () {
	$asm02.MS.Internal.CollectionViewGroupRoot.UseAsItemDirectly = new System.Object();
};

$asm02.MS.Internal.CollectionViewProxy.prototype._ctor = function (view) {
	System.Object.prototype._ctor.call(this);
	this._view = view;
	view.INotifyCollectionChanged_add_CollectionChanged(JSIL.Delegate.New("System.Collections.Specialized.NotifyCollectionChangedEventHandler", this, $asm02.MS.Internal.CollectionViewProxy.prototype._OnCollectionChanged));
	view.ICollectionView_add_CurrentChanging(JSIL.Delegate.New("System.ComponentModel.CurrentChangingEventHandler", this, $asm02.MS.Internal.CollectionViewProxy.prototype._OnCurrentChanging));
	view.ICollectionView_add_CurrentChanged(JSIL.Delegate.New("System.EventHandler", this, $asm02.MS.Internal.CollectionViewProxy.prototype._OnCurrentChanged));
	var notifyPropertyChanged = JSIL.TryCast(view, System.ComponentModel.INotifyPropertyChanged);
	if (notifyPropertyChanged !== null) {
		notifyPropertyChanged.INotifyPropertyChanged_add_PropertyChanged(JSIL.Delegate.New("System.ComponentModel.PropertyChangedEventHandler", this, $asm02.MS.Internal.CollectionViewProxy.prototype._OnPropertyChanged));
	}
};
$asm02.MS.Internal.CollectionViewProxy.prototype.get_Culture = function () {
	return this.ProxiedView.ICollectionView_Culture;
};
$asm02.MS.Internal.CollectionViewProxy.prototype.set_Culture = function (value) {
	this.ProxiedView.ICollectionView_Culture = value;
};
$asm02.MS.Internal.CollectionViewProxy.prototype.Contains = function (item) {
	return this.ProxiedView.ICollectionView_Contains(item);
};
$asm02.MS.Internal.CollectionViewProxy.prototype.get_SourceCollection = function () {
	return this.ProxiedView.ICollectionView_SourceCollection;
};
$asm02.MS.Internal.CollectionViewProxy.prototype.get_Filter = function () {
	return this.ProxiedView.ICollectionView_Filter;
};
$asm02.MS.Internal.CollectionViewProxy.prototype.set_Filter = function (value) {
	this.ProxiedView.ICollectionView_Filter = value;
};
$asm02.MS.Internal.CollectionViewProxy.prototype.get_CanFilter = function () {
	return this.ProxiedView.ICollectionView_CanFilter;
};
$asm02.MS.Internal.CollectionViewProxy.prototype.get_SortDescriptions = function () {
	return this.ProxiedView.ICollectionView_SortDescriptions;
};
$asm02.MS.Internal.CollectionViewProxy.prototype.get_CanSort = function () {
	return this.ProxiedView.ICollectionView_CanSort;
};
$asm02.MS.Internal.CollectionViewProxy.prototype.get_CanGroup = function () {
	return this.ProxiedView.ICollectionView_CanGroup;
};
$asm02.MS.Internal.CollectionViewProxy.prototype.get_GroupDescriptions = function () {
	return this.ProxiedView.ICollectionView_GroupDescriptions;
};
$asm02.MS.Internal.CollectionViewProxy.prototype.get_Groups = function () {
	return this.ProxiedView.ICollectionView_Groups;
};
$asm02.MS.Internal.CollectionViewProxy.prototype.Refresh = function () {
	this.ProxiedView.ICollectionView_Refresh();
};
$asm02.MS.Internal.CollectionViewProxy.prototype.DeferRefresh = function () {
	return this.ProxiedView.ICollectionView_DeferRefresh();
};
$asm02.MS.Internal.CollectionViewProxy.prototype.get_CurrentItem = function () {
	return this.ProxiedView.ICollectionView_CurrentItem;
};
$asm02.MS.Internal.CollectionViewProxy.prototype.get_CurrentPosition = function () {
	return this.ProxiedView.ICollectionView_CurrentPosition;
};
$asm02.MS.Internal.CollectionViewProxy.prototype.get_IsCurrentAfterLast = function () {
	return this.ProxiedView.ICollectionView_IsCurrentAfterLast;
};
$asm02.MS.Internal.CollectionViewProxy.prototype.get_IsCurrentBeforeFirst = function () {
	return this.ProxiedView.ICollectionView_IsCurrentBeforeFirst;
};
$asm02.MS.Internal.CollectionViewProxy.prototype.get_IsEmpty = function () {
	return this.ProxiedView.ICollectionView_IsEmpty;
};
$asm02.MS.Internal.CollectionViewProxy.prototype.MoveCurrentToFirst = function () {
	return this.ProxiedView.ICollectionView_MoveCurrentToFirst();
};
$asm02.MS.Internal.CollectionViewProxy.prototype.MoveCurrentToPrevious = function () {
	return this.ProxiedView.ICollectionView_MoveCurrentToPrevious();
};
$asm02.MS.Internal.CollectionViewProxy.prototype.MoveCurrentToNext = function () {
	return this.ProxiedView.ICollectionView_MoveCurrentToNext();
};
$asm02.MS.Internal.CollectionViewProxy.prototype.MoveCurrentToLast = function () {
	return this.ProxiedView.ICollectionView_MoveCurrentToLast();
};
$asm02.MS.Internal.CollectionViewProxy.prototype.MoveCurrentTo = function (item) {
	return this.ProxiedView.ICollectionView_MoveCurrentTo(item);
};
$asm02.MS.Internal.CollectionViewProxy.prototype.MoveCurrentToPosition = function (position) {
	return this.ProxiedView.ICollectionView_MoveCurrentToPosition(position);
};
$asm02.MS.Internal.CollectionViewProxy.prototype.add_CurrentChanging = function (value) {
	this._currentChanging = System.Delegate.Combine(this._currentChanging, value);
};
$asm02.MS.Internal.CollectionViewProxy.prototype.remove_CurrentChanging = function (value) {
	this._currentChanging = System.Delegate.Remove(this._currentChanging, value);
};
$asm02.MS.Internal.CollectionViewProxy.prototype.add_CurrentChanged = function (value) {
	this._currentChanged = System.Delegate.Combine(this._currentChanged, value);
};
$asm02.MS.Internal.CollectionViewProxy.prototype.remove_CurrentChanged = function (value) {
	this._currentChanged = System.Delegate.Remove(this._currentChanged, value);
};
$asm02.MS.Internal.CollectionViewProxy.prototype.IEditableCollectionView_get_NewItemPlaceholderPosition = function () {
	var editableCollectionView = JSIL.TryCast(this.ProxiedView, System.ComponentModel.IEditableCollectionView);
	if (editableCollectionView !== null) {
		return editableCollectionView.IEditableCollectionView_NewItemPlaceholderPosition;
	}
	return System.ComponentModel.NewItemPlaceholderPosition.None;
};
$asm02.MS.Internal.CollectionViewProxy.prototype.IEditableCollectionView_set_NewItemPlaceholderPosition = function (value) {
	var editableCollectionView = JSIL.TryCast(this.ProxiedView, System.ComponentModel.IEditableCollectionView);
	if (editableCollectionView !== null) {
		editableCollectionView.IEditableCollectionView_NewItemPlaceholderPosition = value;
		return;
	}
	throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("ListCollectionView_MemberNotAllowedForView", ["NewItemPlaceholderPosition"])]);
};
$asm02.MS.Internal.CollectionViewProxy.prototype.IEditableCollectionView_get_CanAddNew = function () {
	var editableCollectionView = JSIL.TryCast(this.ProxiedView, System.ComponentModel.IEditableCollectionView);
	return ((editableCollectionView !== null) && editableCollectionView.IEditableCollectionView_CanAddNew);
};
$asm02.MS.Internal.CollectionViewProxy.prototype.IEditableCollectionView_AddNew = function () {
	var editableCollectionView = JSIL.TryCast(this.ProxiedView, System.ComponentModel.IEditableCollectionView);
	if (editableCollectionView !== null) {
		return editableCollectionView.IEditableCollectionView_AddNew();
	}
	throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("ListCollectionView_MemberNotAllowedForView", ["AddNew"])]);
};
$asm02.MS.Internal.CollectionViewProxy.prototype.IEditableCollectionView_CommitNew = function () {
	var editableCollectionView = JSIL.TryCast(this.ProxiedView, System.ComponentModel.IEditableCollectionView);
	if (editableCollectionView !== null) {
		editableCollectionView.IEditableCollectionView_CommitNew();
		return;
	}
	throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("ListCollectionView_MemberNotAllowedForView", ["CommitNew"])]);
};
$asm02.MS.Internal.CollectionViewProxy.prototype.IEditableCollectionView_CancelNew = function () {
	var editableCollectionView = JSIL.TryCast(this.ProxiedView, System.ComponentModel.IEditableCollectionView);
	if (editableCollectionView !== null) {
		editableCollectionView.IEditableCollectionView_CancelNew();
		return;
	}
	throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("ListCollectionView_MemberNotAllowedForView", ["CancelNew"])]);
};
$asm02.MS.Internal.CollectionViewProxy.prototype.IEditableCollectionView_get_IsAddingNew = function () {
	var editableCollectionView = JSIL.TryCast(this.ProxiedView, System.ComponentModel.IEditableCollectionView);
	return ((editableCollectionView !== null) && editableCollectionView.IEditableCollectionView_IsAddingNew);
};
$asm02.MS.Internal.CollectionViewProxy.prototype.IEditableCollectionView_get_CurrentAddItem = function () {
	var editableCollectionView = JSIL.TryCast(this.ProxiedView, System.ComponentModel.IEditableCollectionView);
	if (editableCollectionView !== null) {
		return editableCollectionView.IEditableCollectionView_CurrentAddItem;
	}
	return null;
};
$asm02.MS.Internal.CollectionViewProxy.prototype.IEditableCollectionView_get_CanRemove = function () {
	var editableCollectionView = JSIL.TryCast(this.ProxiedView, System.ComponentModel.IEditableCollectionView);
	return ((editableCollectionView !== null) && editableCollectionView.IEditableCollectionView_CanRemove);
};
$asm02.MS.Internal.CollectionViewProxy.prototype.IEditableCollectionView_RemoveAt = function (index) {
	var editableCollectionView = JSIL.TryCast(this.ProxiedView, System.ComponentModel.IEditableCollectionView);
	if (editableCollectionView !== null) {
		editableCollectionView.IEditableCollectionView_RemoveAt(index);
		return;
	}
	throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("ListCollectionView_MemberNotAllowedForView", ["RemoveAt"])]);
};
$asm02.MS.Internal.CollectionViewProxy.prototype.IEditableCollectionView_Remove = function (item) {
	var editableCollectionView = JSIL.TryCast(this.ProxiedView, System.ComponentModel.IEditableCollectionView);
	if (editableCollectionView !== null) {
		editableCollectionView.IEditableCollectionView_Remove(item);
		return;
	}
	throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("ListCollectionView_MemberNotAllowedForView", ["Remove"])]);
};
$asm02.MS.Internal.CollectionViewProxy.prototype.IEditableCollectionView_EditItem = function (item) {
	var editableCollectionView = JSIL.TryCast(this.ProxiedView, System.ComponentModel.IEditableCollectionView);
	if (editableCollectionView !== null) {
		editableCollectionView.IEditableCollectionView_EditItem(item);
		return;
	}
	throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("ListCollectionView_MemberNotAllowedForView", ["EditItem"])]);
};
$asm02.MS.Internal.CollectionViewProxy.prototype.IEditableCollectionView_CommitEdit = function () {
	var editableCollectionView = JSIL.TryCast(this.ProxiedView, System.ComponentModel.IEditableCollectionView);
	if (editableCollectionView !== null) {
		editableCollectionView.IEditableCollectionView_CommitEdit();
		return;
	}
	throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("ListCollectionView_MemberNotAllowedForView", ["CommitEdit"])]);
};
$asm02.MS.Internal.CollectionViewProxy.prototype.IEditableCollectionView_CancelEdit = function () {
	var editableCollectionView = JSIL.TryCast(this.ProxiedView, System.ComponentModel.IEditableCollectionView);
	if (editableCollectionView !== null) {
		editableCollectionView.IEditableCollectionView_CancelEdit();
		return;
	}
	throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("ListCollectionView_MemberNotAllowedForView", ["CancelEdit"])]);
};
$asm02.MS.Internal.CollectionViewProxy.prototype.IEditableCollectionView_get_CanCancelEdit = function () {
	var editableCollectionView = JSIL.TryCast(this.ProxiedView, System.ComponentModel.IEditableCollectionView);
	return ((editableCollectionView !== null) && editableCollectionView.IEditableCollectionView_CanCancelEdit);
};
$asm02.MS.Internal.CollectionViewProxy.prototype.IEditableCollectionView_get_IsEditingItem = function () {
	var editableCollectionView = JSIL.TryCast(this.ProxiedView, System.ComponentModel.IEditableCollectionView);
	return ((editableCollectionView !== null) && editableCollectionView.IEditableCollectionView_IsEditingItem);
};
$asm02.MS.Internal.CollectionViewProxy.prototype.IEditableCollectionView_get_CurrentEditItem = function () {
	var editableCollectionView = JSIL.TryCast(this.ProxiedView, System.ComponentModel.IEditableCollectionView);
	if (editableCollectionView !== null) {
		return editableCollectionView.IEditableCollectionView_CurrentEditItem;
	}
	return null;
};
$asm02.MS.Internal.CollectionViewProxy.prototype.GetEnumerator = function () {
	return this.ProxiedView.IEnumerable_GetEnumerator();
};
$asm02.MS.Internal.CollectionViewProxy.prototype.add_PropertyChanged = function (value) {
	this._propertyChanged = System.Delegate.Combine(this._propertyChanged, value);
};
$asm02.MS.Internal.CollectionViewProxy.prototype.remove_PropertyChanged = function (value) {
	this._propertyChanged = System.Delegate.Remove(this._propertyChanged, value);
};
$asm02.MS.Internal.CollectionViewProxy.prototype.add_CollectionChanged = function (value) {
	this._collectionChanged = System.Delegate.Combine(this._collectionChanged, value);
};
$asm02.MS.Internal.CollectionViewProxy.prototype.remove_CollectionChanged = function (value) {
	this._collectionChanged = System.Delegate.Remove(this._collectionChanged, value);
};
$asm02.MS.Internal.CollectionViewProxy.prototype.get_ViewManagerData = function () {
	return this.ViewManagerData$value;
};
$asm02.MS.Internal.CollectionViewProxy.prototype.set_ViewManagerData = function (value) {
	this.ViewManagerData$value = value;
};
$asm02.MS.Internal.CollectionViewProxy.prototype.get_ProxiedView = function () {
	return this._view;
};
$asm02.MS.Internal.CollectionViewProxy.prototype._OnCollectionChanged = function (sender, args) {
	var collectionChanged = this._collectionChanged;
	if (collectionChanged !== null) {
		collectionChanged(this, args);
	}
};
$asm02.MS.Internal.CollectionViewProxy.prototype._OnCurrentChanging = function (sender, args) {
	var currentChanging = this._currentChanging;
	if (currentChanging !== null) {
		currentChanging(this, args);
	}
};
$asm02.MS.Internal.CollectionViewProxy.prototype._OnCurrentChanged = function (sender, args) {
	var currentChanged = this._currentChanged;
	if (currentChanged !== null) {
		currentChanged(this, args);
	}
};
$asm02.MS.Internal.CollectionViewProxy.prototype._OnPropertyChanged = function (sender, args) {
	var propertyChanged = this._propertyChanged;
	if (propertyChanged !== null) {
		propertyChanged(this, args);
	}
};
$asm02.MS.Internal.CollectionViewProxy.prototype.add__collectionChanged = function (value) {
	this._collectionChanged = System.Delegate.Combine(this._collectionChanged, value);
};
$asm02.MS.Internal.CollectionViewProxy.prototype.remove__collectionChanged = function (value) {
	this._collectionChanged = System.Delegate.Remove(this._collectionChanged, value);
};
$asm02.MS.Internal.CollectionViewProxy.prototype.add__currentChanging = function (value) {
	this._currentChanging = System.Delegate.Combine(this._currentChanging, value);
};
$asm02.MS.Internal.CollectionViewProxy.prototype.remove__currentChanging = function (value) {
	this._currentChanging = System.Delegate.Remove(this._currentChanging, value);
};
$asm02.MS.Internal.CollectionViewProxy.prototype.add__currentChanged = function (value) {
	this._currentChanged = System.Delegate.Combine(this._currentChanged, value);
};
$asm02.MS.Internal.CollectionViewProxy.prototype.remove__currentChanged = function (value) {
	this._currentChanged = System.Delegate.Remove(this._currentChanged, value);
};
$asm02.MS.Internal.CollectionViewProxy.prototype.add__propertyChanged = function (value) {
	this._propertyChanged = System.Delegate.Combine(this._propertyChanged, value);
};
$asm02.MS.Internal.CollectionViewProxy.prototype.remove__propertyChanged = function (value) {
	this._propertyChanged = System.Delegate.Remove(this._propertyChanged, value);
};
JSIL.MakeProperty($asm02.MS.Internal.CollectionViewProxy.prototype, "Culture", 
	$asm02.MS.Internal.CollectionViewProxy.prototype.get_Culture, $asm02.MS.Internal.CollectionViewProxy.prototype.set_Culture);
JSIL.MakeProperty($asm02.MS.Internal.CollectionViewProxy.prototype, "SourceCollection", 
	$asm02.MS.Internal.CollectionViewProxy.prototype.get_SourceCollection, null);
JSIL.MakeProperty($asm02.MS.Internal.CollectionViewProxy.prototype, "Filter", 
	$asm02.MS.Internal.CollectionViewProxy.prototype.get_Filter, $asm02.MS.Internal.CollectionViewProxy.prototype.set_Filter);
JSIL.MakeProperty($asm02.MS.Internal.CollectionViewProxy.prototype, "CanFilter", 
	$asm02.MS.Internal.CollectionViewProxy.prototype.get_CanFilter, null);
JSIL.MakeProperty($asm02.MS.Internal.CollectionViewProxy.prototype, "SortDescriptions", 
	$asm02.MS.Internal.CollectionViewProxy.prototype.get_SortDescriptions, null);
JSIL.MakeProperty($asm02.MS.Internal.CollectionViewProxy.prototype, "CanSort", 
	$asm02.MS.Internal.CollectionViewProxy.prototype.get_CanSort, null);
JSIL.MakeProperty($asm02.MS.Internal.CollectionViewProxy.prototype, "CanGroup", 
	$asm02.MS.Internal.CollectionViewProxy.prototype.get_CanGroup, null);
JSIL.MakeProperty($asm02.MS.Internal.CollectionViewProxy.prototype, "GroupDescriptions", 
	$asm02.MS.Internal.CollectionViewProxy.prototype.get_GroupDescriptions, null);
JSIL.MakeProperty($asm02.MS.Internal.CollectionViewProxy.prototype, "Groups", 
	$asm02.MS.Internal.CollectionViewProxy.prototype.get_Groups, null);
JSIL.MakeProperty($asm02.MS.Internal.CollectionViewProxy.prototype, "CurrentItem", 
	$asm02.MS.Internal.CollectionViewProxy.prototype.get_CurrentItem, null);
JSIL.MakeProperty($asm02.MS.Internal.CollectionViewProxy.prototype, "CurrentPosition", 
	$asm02.MS.Internal.CollectionViewProxy.prototype.get_CurrentPosition, null);
JSIL.MakeProperty($asm02.MS.Internal.CollectionViewProxy.prototype, "IsCurrentAfterLast", 
	$asm02.MS.Internal.CollectionViewProxy.prototype.get_IsCurrentAfterLast, null);
JSIL.MakeProperty($asm02.MS.Internal.CollectionViewProxy.prototype, "IsCurrentBeforeFirst", 
	$asm02.MS.Internal.CollectionViewProxy.prototype.get_IsCurrentBeforeFirst, null);
JSIL.MakeProperty($asm02.MS.Internal.CollectionViewProxy.prototype, "IsEmpty", 
	$asm02.MS.Internal.CollectionViewProxy.prototype.get_IsEmpty, null);
JSIL.MakeProperty($asm02.MS.Internal.CollectionViewProxy.prototype, "IEditableCollectionView_NewItemPlaceholderPosition", 
	$asm02.MS.Internal.CollectionViewProxy.prototype.IEditableCollectionView_get_NewItemPlaceholderPosition, $asm02.MS.Internal.CollectionViewProxy.prototype.IEditableCollectionView_set_NewItemPlaceholderPosition);
JSIL.MakeProperty($asm02.MS.Internal.CollectionViewProxy.prototype, "IEditableCollectionView_CanAddNew", 
	$asm02.MS.Internal.CollectionViewProxy.prototype.IEditableCollectionView_get_CanAddNew, null);
JSIL.MakeProperty($asm02.MS.Internal.CollectionViewProxy.prototype, "IEditableCollectionView_IsAddingNew", 
	$asm02.MS.Internal.CollectionViewProxy.prototype.IEditableCollectionView_get_IsAddingNew, null);
JSIL.MakeProperty($asm02.MS.Internal.CollectionViewProxy.prototype, "IEditableCollectionView_CurrentAddItem", 
	$asm02.MS.Internal.CollectionViewProxy.prototype.IEditableCollectionView_get_CurrentAddItem, null);
JSIL.MakeProperty($asm02.MS.Internal.CollectionViewProxy.prototype, "IEditableCollectionView_CanRemove", 
	$asm02.MS.Internal.CollectionViewProxy.prototype.IEditableCollectionView_get_CanRemove, null);
JSIL.MakeProperty($asm02.MS.Internal.CollectionViewProxy.prototype, "IEditableCollectionView_CanCancelEdit", 
	$asm02.MS.Internal.CollectionViewProxy.prototype.IEditableCollectionView_get_CanCancelEdit, null);
JSIL.MakeProperty($asm02.MS.Internal.CollectionViewProxy.prototype, "IEditableCollectionView_IsEditingItem", 
	$asm02.MS.Internal.CollectionViewProxy.prototype.IEditableCollectionView_get_IsEditingItem, null);
JSIL.MakeProperty($asm02.MS.Internal.CollectionViewProxy.prototype, "IEditableCollectionView_CurrentEditItem", 
	$asm02.MS.Internal.CollectionViewProxy.prototype.IEditableCollectionView_get_CurrentEditItem, null);
JSIL.MakeProperty($asm02.MS.Internal.CollectionViewProxy.prototype, "ViewManagerData", 
	$asm02.MS.Internal.CollectionViewProxy.prototype.get_ViewManagerData, $asm02.MS.Internal.CollectionViewProxy.prototype.set_ViewManagerData);
JSIL.MakeProperty($asm02.MS.Internal.CollectionViewProxy.prototype, "ProxiedView", 
	$asm02.MS.Internal.CollectionViewProxy.prototype.get_ProxiedView, null);
$asm02.MS.Internal.CollectionViewProxy.prototype._view = null;
$asm02.MS.Internal.CollectionViewProxy.prototype._collectionChanged = null;
$asm02.MS.Internal.CollectionViewProxy.prototype._currentChanging = null;
$asm02.MS.Internal.CollectionViewProxy.prototype._currentChanged = null;
$asm02.MS.Internal.CollectionViewProxy.prototype._propertyChanged = null;
$asm02.MS.Internal.CollectionViewProxy.prototype.ViewManagerData$value = null;

$asm02.MS.Internal.CoreTypeEventHelper.prototype.GetInstanceEventDelegate = function (eventName) {
	var eventAndDelegate = new JSIL.Variable(null);
	if (eventName.StartsWith$0("M@")) {
		var key = System.Convert.ToInt32$15(eventName.Substring$0("M@".length));
		this.EventAndDelegateTable.TryGetValue(key, /* ref */ eventAndDelegate);
		if (eventAndDelegate.value !== null) {
			return eventAndDelegate.value.WrappedDelegate;
		}
	}
	return null;
};
$asm02.MS.Internal.CoreTypeEventHelper.prototype.get_EventAndDelegateTable = function () {
	if (this._eventAndDelegateTable === null) {
		this._eventAndDelegateTable = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.Int32, $asm02.MS.Internal.CoreTypeEventHelper.EventAndDelegate), "_ctor$0", []);
	}
	return this._eventAndDelegateTable;
};
JSIL.MakeProperty($asm02.MS.Internal.CoreTypeEventHelper.prototype, "EventAndDelegateTable", 
	$asm02.MS.Internal.CoreTypeEventHelper.prototype.get_EventAndDelegateTable, null);
Object.defineProperty($asm02.MS.Internal.CoreTypeEventHelper, "DelegateManglePrefix", {
		"value": "M@"}
);
$asm02.MS.Internal.CoreTypeEventHelper._nextAvailableTableIndex = 0;
$asm02.MS.Internal.CoreTypeEventHelper.prototype._eventAndDelegateTable = null;
MS.Internal.CoreTypeEventHelper._cctor = function () {
};

$asm02.MS.Internal.CoreTypeEventHelper.EventAndDelegate.prototype._ctor = function (wrappedEvent, wrappedDelegate) {
	System.Object.prototype._ctor.call(this);
	this._wrappedEvent = wrappedEvent;
	this._wrappedDelegate = wrappedDelegate;
};
$asm02.MS.Internal.CoreTypeEventHelper.EventAndDelegate.prototype.get_WrappedEvent = function () {
	return this._wrappedEvent;
};
$asm02.MS.Internal.CoreTypeEventHelper.EventAndDelegate.prototype.get_WrappedDelegate = function () {
	return this._wrappedDelegate;
};
JSIL.MakeProperty($asm02.MS.Internal.CoreTypeEventHelper.EventAndDelegate.prototype, "WrappedEvent", 
	$asm02.MS.Internal.CoreTypeEventHelper.EventAndDelegate.prototype.get_WrappedEvent, null);
JSIL.MakeProperty($asm02.MS.Internal.CoreTypeEventHelper.EventAndDelegate.prototype, "WrappedDelegate", 
	$asm02.MS.Internal.CoreTypeEventHelper.EventAndDelegate.prototype.get_WrappedDelegate, null);
$asm02.MS.Internal.CoreTypeEventHelper.EventAndDelegate.prototype._wrappedEvent = null;
$asm02.MS.Internal.CoreTypeEventHelper.EventAndDelegate.prototype._wrappedDelegate = null;

$asm02.MS.Internal.DoubleUtil.AreClose$0 = function (value1, value2) {
	if (value1 === value2) {
		return true;
	}
	var num = ((((Math.abs(value1)) + (Math.abs(value2))) + 10) * 1.1102230246251568E-16);
	var num2 = (value1 - value2);
	return ((-num < num2) && (num > num2));
};
$asm02.MS.Internal.DoubleUtil.AreClose$1 = function (size1, size2) {
	return ($asm02.MS.Internal.DoubleUtil.AreClose$0(size1.Width, size2.Width) && $asm02.MS.Internal.DoubleUtil.AreClose$0(size1.Height, size2.Height));
};
$asm02.MS.Internal.DoubleUtil.AreClose$2 = function (vector1, vector2) {
	return ($asm02.MS.Internal.DoubleUtil.AreClose$0(vector1.X, vector2.X) && $asm02.MS.Internal.DoubleUtil.AreClose$0(vector1.Y, vector2.Y));
};
$asm02.MS.Internal.DoubleUtil.AreClose$3 = function (rect1, rect2) {
	if (rect1.IsEmpty) {
		return rect2.IsEmpty;
	}
	return (!(rect2.IsEmpty || 
			!$asm02.MS.Internal.DoubleUtil.AreClose$0(rect1.X, rect2.X) || 
			!$asm02.MS.Internal.DoubleUtil.AreClose$0(rect1.Y, rect2.Y) || 
			!$asm02.MS.Internal.DoubleUtil.AreClose$0(rect1.Height, rect2.Height)) && $asm02.MS.Internal.DoubleUtil.AreClose$0(rect1.Width, rect2.Width));
};
$asm02.MS.Internal.DoubleUtil.GreaterThan = function (value1, value2) {
	return ((value1 > value2) && !$asm02.MS.Internal.DoubleUtil.AreClose$0(value1, value2));
};
$asm02.MS.Internal.DoubleUtil.GreaterThanOrClose = function (value1, value2) {
	return ((value1 > value2) || $asm02.MS.Internal.DoubleUtil.AreClose$0(value1, value2));
};
$asm02.MS.Internal.DoubleUtil.IsZero = function (value) {
	return ((Math.abs(value)) < 1.1102230246251567E-15);
};
$asm02.MS.Internal.DoubleUtil.LessThan = function (value1, value2) {
	return ((value1 < value2) && !$asm02.MS.Internal.DoubleUtil.AreClose$0(value1, value2));
};
$asm02.MS.Internal.DoubleUtil.LessThanOrClose = function (value1, value2) {
	return ((value1 < value2) || $asm02.MS.Internal.DoubleUtil.AreClose$0(value1, value2));
};
JSIL.OverloadedMethod($asm02.MS.Internal.DoubleUtil, "AreClose", [
		["AreClose$0", [System.Double, System.Double]], 
		["AreClose$1", [System.Windows.Size, System.Windows.Size]], 
		["AreClose$2", [$asm02.MS.Internal.Controls.Vector, $asm02.MS.Internal.Controls.Vector]], 
		["AreClose$3", [System.Windows.Rect, System.Windows.Rect]]
	]);
Object.defineProperty($asm02.MS.Internal.DoubleUtil, "DBL_EPSILON_RELATIVE_1", {
		"value": 1.1102230246251568E-16}
);

$asm02.MS.Internal.Interop.InteropWrapper.prototype._ctor$0 = function (managedObject) {
	System.Object.prototype._ctor.call(this);
	this.m_managedObject = managedObject;
};
$asm02.MS.Internal.Interop.InteropWrapper.prototype._ctor$1 = function (managedObject, nativeReferenceType) {
	this._ctor$0(managedObject);
	this.m_nativeReferenceType = nativeReferenceType;
};
$asm02.MS.Internal.Interop.InteropWrapper.prototype.Initialize = function () {
	var result = 0;
	try {
		var intPtr = $asm02.MS.Internal.XcpImports.CreateNativeObjectForManagedPeer(this.BaseClassName, $asm02.MS.Internal.Interop.InteropWrapper._unpegManagedPeerNoRefDelegate, $asm02.MS.Internal.Interop.InteropWrapper._pegManagedPeerNoRefDelegate);
		this.m_nativePtr = new $asm02.MS.Internal.NativeObjectSafeHandle();
		this.m_nativePtr.NativeObject = intPtr;
		this.m_nativePtr.NativeObjectType = MS.Internal.VType.valueInteropObject;
		if ($asm02.MS.Internal.ManagedPeerTable.TryAdd$0(intPtr, this)) {
			;
		} else {
			this.m_nativePtr = null;
		}
	} catch ($exception) {
		var arg_59_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForUserException(arg_59_0);
	}
	return result;
};
$asm02.MS.Internal.Interop.InteropWrapper.prototype.IManagedPeer_BeginShutdown = function () {
	if (this.m_nativePtr !== null) {
		System.GC.SuppressFinalize(this.m_nativePtr);
		$asm02.MS.Internal.XcpImports.DisconnectManagedPeer(this);
	}
};
$asm02.MS.Internal.Interop.InteropWrapper.prototype.IManagedPeer_EndShutdown = function () {
	if (this.m_nativePtr !== null) {
		$asm02.MS.Internal.XcpImports.ReleaseNativeValue(this.IManagedPeerBase_NativeObject, 18);
		System.GC.KeepAlive(this);
		this.m_nativePtr = null;
	}
};
$asm02.MS.Internal.Interop.InteropWrapper.prototype.IManagedPeer_RemovePeerReferenceToItem = function (child) {
	throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
};
$asm02.MS.Internal.Interop.InteropWrapper.prototype.IManagedPeer_AddPeerReferenceToItem = function (child) {
	throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
};
$asm02.MS.Internal.Interop.InteropWrapper.prototype.IManagedPeer_GetInstanceEventDelegate = function (eventName) {
	throw JSIL.New(System.NotImplementedException, "_ctor$0", []);
};
$asm02.MS.Internal.Interop.InteropWrapper.prototype.SetCallbackCountToNativeWrapper = function (iCallbackCount) {
	var result = 0;
	try {
		if (this.m_nativePtr === null) {
			throw JSIL.New(System.NullReferenceException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("InteropWrapper_NativeObjectShouldNotBeNull")]);
		}
		var arg_15_0 = this.m_nativePtr.NativeObject;
		$asm02.MS.Internal.XcpImports.SetCallbackCountToNativeWrapper(this, iCallbackCount);
	} catch ($exception) {
		var arg_31_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForUserException(arg_31_0);
	}
	return result;
};
$asm02.MS.Internal.Interop.InteropWrapper.prototype.SetCallbackFunctionToNativeWrapper = function (indexDelegate, callback) {
	var result = 0;
	try {
		if (this.m_nativePtr === null) {
			throw JSIL.New(System.NullReferenceException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("InteropWrapper_NativeObjectShouldNotBeNull")]);
		}
		var arg_15_0 = this.m_nativePtr.NativeObject;
		$asm02.MS.Internal.XcpImports.SetCallbackFunctionToNativeWrapper(this, indexDelegate, callback);
	} catch ($exception) {
		var arg_32_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForUserException(arg_32_0);
	}
	return result;
};
$asm02.MS.Internal.Interop.InteropWrapper.prototype.IsNativePointerValid = function () {
	return ((this.m_nativePtr !== null) && !this.m_nativePtr.IsInvalid);
};
$asm02.MS.Internal.Interop.InteropWrapper.prototype.IManagedPeerBase_get_NativeObject = function () {
	if (this.m_nativePtr !== null) {
		return this.m_nativePtr.NativeObject;
	}
	return System.IntPtr.Zero;
};
$asm02.MS.Internal.Interop.InteropWrapper.prototype.get_ManagedObject = function () {
	return this.m_managedObject;
};
$asm02.MS.Internal.Interop.InteropWrapper.prototype.get_BaseClassName = function () {
	if (this.m_nativeReferenceType !== null) {
		return this.m_nativeReferenceType.FullName;
	}
	return JSIL.GetType(this.m_managedObject).FullName;
};
$asm02.MS.Internal.Interop.InteropWrapper.GetManagedObjectFromNativePeer = function (nativePeer) {
	if ((true) !== null) {
		var interopWrapper = JSIL.TryCast(null, $asm02.MS.Internal.Interop.InteropWrapper);
		if (interopWrapper !== null) {
			return interopWrapper.ManagedObject;
		}
	}
	return null;
};
JSIL.OverloadedMethod($asm02.MS.Internal.Interop.InteropWrapper.prototype, "_ctor", [
		["_ctor$0", [System.Object]], 
		["_ctor$1", [System.Object, System.Type]]
	]);
JSIL.MakeProperty($asm02.MS.Internal.Interop.InteropWrapper.prototype, "IManagedPeerBase_NativeObject", 
	$asm02.MS.Internal.Interop.InteropWrapper.prototype.IManagedPeerBase_get_NativeObject, null);
JSIL.MakeProperty($asm02.MS.Internal.Interop.InteropWrapper.prototype, "ManagedObject", 
	$asm02.MS.Internal.Interop.InteropWrapper.prototype.get_ManagedObject, null);
JSIL.MakeProperty($asm02.MS.Internal.Interop.InteropWrapper.prototype, "BaseClassName", 
	$asm02.MS.Internal.Interop.InteropWrapper.prototype.get_BaseClassName, null);
$asm02.MS.Internal.Interop.InteropWrapper.prototype.m_nativePtr = null;
$asm02.MS.Internal.Interop.InteropWrapper.prototype.m_managedObject = null;
$asm02.MS.Internal.Interop.InteropWrapper.prototype.m_nativeReferenceType = null;
$asm02.MS.Internal.Interop.InteropWrapper._unpegManagedPeerNoRefDelegate = null;
$asm02.MS.Internal.Interop.InteropWrapper._pegManagedPeerNoRefDelegate = null;
$asm02.MS.Internal.Interop.InteropWrapper._cctor = function () {
	$asm02.MS.Internal.Interop.InteropWrapper._unpegManagedPeerNoRefDelegate = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/UnpegManagedPeerNoRefDelegate", null, $asm02.MS.Internal.FrameworkCallbacks.UnpegManagedPeerNoRef);
	$asm02.MS.Internal.Interop.InteropWrapper._pegManagedPeerNoRefDelegate = JSIL.Delegate.New("MS.Internal.FrameworkCallbacks/PegManagedPeerNoRefDelegate", null, $asm02.MS.Internal.FrameworkCallbacks.PegManagedPeerNoRef);
};

$asm02.MS.Internal.Interop.StreamInteropWrapper.prototype._ctor = function (managedObject) {
	$asm02.MS.Internal.Interop.InteropWrapper.prototype._ctor$0.call(this, managedObject);
};
$asm02.MS.Internal.Interop.StreamInteropWrapper.prototype.Initialize = function () {
	var num = 0;
	try {
		num = $asm02.MS.Internal.Interop.InteropWrapper.prototype.Initialize.call(this);
		if (!((num !== 0) || !$asm02.MS.Internal.Interop.InteropWrapper.prototype.IsNativePointerValid.call(this))) {
			num = $asm02.MS.Internal.Interop.InteropWrapper.prototype.SetCallbackCountToNativeWrapper.call(this, 5);
			if (num === 0) {
				num = $asm02.MS.Internal.Interop.InteropWrapper.prototype.SetCallbackFunctionToNativeWrapper.call(this, 0, $asm02.MS.Internal.Interop.StreamInteropWrapper._readDelegate);
			}
			if (num === 0) {
				num = $asm02.MS.Internal.Interop.InteropWrapper.prototype.SetCallbackFunctionToNativeWrapper.call(this, 1, $asm02.MS.Internal.Interop.StreamInteropWrapper._seekDelegate);
			}
			if (num === 0) {
				num = $asm02.MS.Internal.Interop.InteropWrapper.prototype.SetCallbackFunctionToNativeWrapper.call(this, 2, $asm02.MS.Internal.Interop.StreamInteropWrapper._getSizeDelegate);
			}
			if (num === 0) {
				num = $asm02.MS.Internal.Interop.InteropWrapper.prototype.SetCallbackFunctionToNativeWrapper.call(this, 3, $asm02.MS.Internal.Interop.StreamInteropWrapper._setSizeDelegate);
			}
			if (num === 0) {
				num = $asm02.MS.Internal.Interop.InteropWrapper.prototype.SetCallbackFunctionToNativeWrapper.call(this, 4, $asm02.MS.Internal.Interop.StreamInteropWrapper._closeDelegate);
			}
		}
	} catch ($exception) {
		var arg_6E_0 = $exception;
		num = $asm02.MS.Internal.Error.GetXresultForUserException(arg_6E_0);
	}
	return num;
};
$asm02.MS.Internal.Interop.StreamInteropWrapper.prototype.get_BaseClassName = function () {
	return "System.IO.Stream";
};
$asm02.MS.Internal.Interop.StreamInteropWrapper.Stream_Read = function (nativePeer, buffer, cb, /* ref */ cbRead) {
	cbRead.value = 0;
	try {
		var stream = JSIL.TryCast($asm02.MS.Internal.Interop.InteropWrapper.GetManagedObjectFromNativePeer(nativePeer), System.IO.Stream);
		if (stream === null) {
			var result = -2147418113;
		} else {
			cbRead.value = stream.Read(buffer, 0, cb);
			result = 0;
		}
	} catch ($exception) {
		var arg_29_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForUserException(arg_29_0);
	}
	return result;
};
$asm02.MS.Internal.Interop.StreamInteropWrapper.Stream_Seek = function (nativePeer, qwMove, eSeekOrigin, /* ref */ qwNewPosition) {
	var result = 0;
	var num = 0;
	qwNewPosition.value = num;
	try {
		var stream = JSIL.TryCast($asm02.MS.Internal.Interop.InteropWrapper.GetManagedObjectFromNativePeer(nativePeer), System.IO.Stream);
		if (stream === null) {
			return -2147418113;
		}
		if (stream.CanSeek) {
			num = stream.Seek(qwMove, eSeekOrigin);
			qwNewPosition.value = num;
		}
	} catch ($exception) {
		var arg_36_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForUserException(arg_36_0);
	}
	return result;
};
$asm02.MS.Internal.Interop.StreamInteropWrapper.Stream_SetSize = function (nativePeer, qwNewSize) {
	try {
		var stream = JSIL.TryCast($asm02.MS.Internal.Interop.InteropWrapper.GetManagedObjectFromNativePeer(nativePeer), System.IO.Stream);
		if (stream === null) {
			var result = -2147418113;
		} else {
			stream.SetLength(qwNewSize);
			result = 0;
		}
	} catch ($exception) {
		var arg_22_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForUserException(arg_22_0);
	}
	return result;
};
$asm02.MS.Internal.Interop.StreamInteropWrapper.Stream_GetSize = function (nativePeer, /* ref */ qwNewSize) {
	qwNewSize.value = 0;
	try {
		var stream = JSIL.TryCast($asm02.MS.Internal.Interop.InteropWrapper.GetManagedObjectFromNativePeer(nativePeer), System.IO.Stream);
		if (stream === null) {
			var result = -2147418113;
		} else {
			qwNewSize.value = stream.Length;
			result = 0;
		}
	} catch ($exception) {
		var arg_27_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForUserException(arg_27_0);
	}
	return result;
};
$asm02.MS.Internal.Interop.StreamInteropWrapper.Stream_Close = function (nativePeer) {
	try {
		var stream = JSIL.TryCast($asm02.MS.Internal.Interop.InteropWrapper.GetManagedObjectFromNativePeer(nativePeer), System.IO.Stream);
		if (stream === null) {
			var result = -2147418113;
		} else {
			stream.Close();
			result = 0;
		}
	} catch ($exception) {
		var arg_21_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForUserException(arg_21_0);
	}
	return result;
};
JSIL.MakeProperty($asm02.MS.Internal.Interop.StreamInteropWrapper.prototype, "BaseClassName", 
	$asm02.MS.Internal.Interop.StreamInteropWrapper.prototype.get_BaseClassName, null);
$asm02.MS.Internal.Interop.StreamInteropWrapper._readDelegate = null;
$asm02.MS.Internal.Interop.StreamInteropWrapper._seekDelegate = null;
$asm02.MS.Internal.Interop.StreamInteropWrapper._setSizeDelegate = null;
$asm02.MS.Internal.Interop.StreamInteropWrapper._getSizeDelegate = null;
$asm02.MS.Internal.Interop.StreamInteropWrapper._closeDelegate = null;
$asm02.MS.Internal.Interop.StreamInteropWrapper._cctor = function () {
	$asm02.MS.Internal.Interop.StreamInteropWrapper._readDelegate = JSIL.Delegate.New("MS.Internal.Interop.StreamInteropWrapper/ReadDelegate", null, $asm02.MS.Internal.Interop.StreamInteropWrapper.Stream_Read);
	$asm02.MS.Internal.Interop.StreamInteropWrapper._seekDelegate = JSIL.Delegate.New("MS.Internal.Interop.StreamInteropWrapper/SeekDelegate", null, $asm02.MS.Internal.Interop.StreamInteropWrapper.Stream_Seek);
	$asm02.MS.Internal.Interop.StreamInteropWrapper._setSizeDelegate = JSIL.Delegate.New("MS.Internal.Interop.StreamInteropWrapper/SetSizeDelegate", null, $asm02.MS.Internal.Interop.StreamInteropWrapper.Stream_SetSize);
	$asm02.MS.Internal.Interop.StreamInteropWrapper._getSizeDelegate = JSIL.Delegate.New("MS.Internal.Interop.StreamInteropWrapper/GetSizeDelegate", null, $asm02.MS.Internal.Interop.StreamInteropWrapper.Stream_GetSize);
	$asm02.MS.Internal.Interop.StreamInteropWrapper._closeDelegate = JSIL.Delegate.New("MS.Internal.Interop.StreamInteropWrapper/CloseDelegate", null, $asm02.MS.Internal.Interop.StreamInteropWrapper.Stream_Close);
};

$asm02.MS.Internal.ComAutomation.ComAutomationObjectException.prototype._ctor = function (message, hr) {
	System.Runtime.InteropServices.ExternalException.prototype._ctor$1.call(this, message);
	System.Exception.prototype.set_HResult.call(this, hr);
};

$asm02.MS.Internal.ComAutomation.ComAutomationNative.IsPlatformSupported = function () {
	return (System.PlatformID.Win32NT === System.Environment.OSVersion.Platform);
};
$asm02.MS.Internal.ComAutomation.ComAutomationNative.CheckPlatform = function () {
	if (!$asm02.MS.Internal.ComAutomation.ComAutomationNative.IsPlatformSupported()) {
		throw JSIL.New(System.PlatformNotSupportedException, "_ctor$0", []);
	}
};
$asm02.MS.Internal.ComAutomation.ComAutomationNative.IsAllowed = function () {
	var result = new JSIL.Variable(false);
	if (!$asm02.MS.Internal.ComAutomation.ComAutomationNative.IsPlatformSupported()) {
		return false;
	}
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.ComAutomation.ComAutomationNative.IsAllowedNative($asm02.MS.Internal.JoltHelper.Context, /* ref */ result));
	return result.value;
};
$asm02.MS.Internal.ComAutomation.ComAutomationNative.GetEnumerator = function (nativePtr, /* ref */ enumPtr) {
	$asm02.MS.Internal.ComAutomation.ComAutomationNative.CheckPlatform();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.ComAutomation.ComAutomationNative.GetEnumeratorNative(nativePtr, /* ref */ enumPtr));
};
$asm02.MS.Internal.ComAutomation.ComAutomationNative.MoveNext = function (nativePtr, /* ref */ hasNext) {
	$asm02.MS.Internal.ComAutomation.ComAutomationNative.CheckPlatform();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.ComAutomation.ComAutomationNative.MoveNextNative(nativePtr, /* ref */ hasNext));
};
$asm02.MS.Internal.ComAutomation.ComAutomationNative.GetCurrent = function (nativePtr, /* ref */ outVal) {
	$asm02.MS.Internal.ComAutomation.ComAutomationNative.CheckPlatform();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.ComAutomation.ComAutomationNative.GetCurrentNative(nativePtr, /* ref */ outVal));
};
$asm02.MS.Internal.ComAutomation.ComAutomationNative.Reset = function (nativePtr) {
	$asm02.MS.Internal.ComAutomation.ComAutomationNative.CheckPlatform();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.ComAutomation.ComAutomationNative.ResetNative(nativePtr));
};
$asm02.MS.Internal.ComAutomation.ComAutomationNative.CreateObject = function (progID, /* ref */ nativeObject) {
	$asm02.MS.Internal.ComAutomation.ComAutomationNative.CheckPlatform();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.ComAutomation.ComAutomationNative.GetObjectNative($asm02.MS.Internal.JoltHelper.Context, progID, 2, /* ref */ nativeObject));
};
$asm02.MS.Internal.ComAutomation.ComAutomationNative.GetObject = function (progID, /* ref */ nativeObject) {
	$asm02.MS.Internal.ComAutomation.ComAutomationNative.CheckPlatform();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.ComAutomation.ComAutomationNative.GetObjectNative($asm02.MS.Internal.JoltHelper.Context, progID, 1, /* ref */ nativeObject));
};
$asm02.MS.Internal.ComAutomation.ComAutomationNative.Invoke = function (tryInvoke, memberName, invokeType, rgParams, nativePeer, /* ref */ returnValue) {
	var exceptionHelpContext = new JSIL.Variable(0);
	$asm02.MS.Internal.ComAutomation.ComAutomationNative.CheckPlatform();
	var zero = new JSIL.Variable(System.IntPtr.Zero);
	var zero2 = new JSIL.Variable(System.IntPtr.Zero);
	var zero3 = new JSIL.Variable(System.IntPtr.Zero);
	try {
		var num = $asm02.MS.Internal.ComAutomation.ComAutomationNative.InvokeNative(
			memberName, 
			Math.floor(invokeType), 
			rgParams.length, 
			rgParams, 
			nativePeer, 
			/* ref */ returnValue, 
			/* ref */ zero, 
			/* ref */ zero2, 
			/* ref */ zero3, 
			/* ref */ exceptionHelpContext
		);
		if (!(!tryInvoke || (-2147352570 !== num))) {
			var result = false;
		} else {
			var exceptionSource = null;
			if (System.IntPtr.op_Inequality(System.IntPtr.Zero, zero.value)) {
				exceptionSource = System.Runtime.InteropServices.Marshal.PtrToStringUni$1(zero.value);
			}
			var exceptionDescription = null;
			if (System.IntPtr.op_Inequality(System.IntPtr.Zero, zero2.value)) {
				exceptionDescription = System.Runtime.InteropServices.Marshal.PtrToStringUni$1(zero2.value);
			}
			var exceptionHelpFile = null;
			if (System.IntPtr.op_Inequality(System.IntPtr.Zero, zero3.value)) {
				exceptionHelpFile = System.Runtime.InteropServices.Marshal.PtrToStringUni$1(zero3.value);
			}
			$asm02.MS.Internal.ComAutomation.ComAutomationNative.CheckInvokeHResult(
				num, 
				memberName, 
				exceptionSource, 
				exceptionDescription, 
				exceptionHelpFile, 
				exceptionHelpContext.value
			);
			result = true;
		}
	} finally {
		if (System.IntPtr.op_Inequality(System.IntPtr.Zero, zero.value)) {
			$asm02.MS.Internal.XcpImports.ReleaseNativeValue(zero.value, 6);
		}
		if (System.IntPtr.op_Inequality(System.IntPtr.Zero, zero2.value)) {
			$asm02.MS.Internal.XcpImports.ReleaseNativeValue(zero2.value, 6);
		}
		if (System.IntPtr.op_Inequality(System.IntPtr.Zero, zero3.value)) {
			$asm02.MS.Internal.XcpImports.ReleaseNativeValue(zero3.value, 6);
		}
	}
	return result;
};
$asm02.MS.Internal.ComAutomation.ComAutomationNative.ConnectEvent = function (nativePeer, eventName, raiseComAutomationEventDelegate) {
	$asm02.MS.Internal.ComAutomation.ComAutomationNative.CheckPlatform();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.ComAutomation.ComAutomationNative.ConnectEventNative(nativePeer, eventName, raiseComAutomationEventDelegate));
};
$asm02.MS.Internal.ComAutomation.ComAutomationNative.DisconnectEvent = function (nativePeer, eventName) {
	$asm02.MS.Internal.ComAutomation.ComAutomationNative.CheckPlatform();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.ComAutomation.ComAutomationNative.DisconnectEventNative(nativePeer, eventName));
};
$asm02.MS.Internal.ComAutomation.ComAutomationNative.CreateNativeString = function (managedString, /* ref */ nativeString) {
	$asm02.MS.Internal.ComAutomation.ComAutomationNative.CheckPlatform();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.ComAutomation.ComAutomationNative.CreateNativeStringNative(managedString, managedString.length, /* ref */ nativeString));
};
$asm02.MS.Internal.ComAutomation.ComAutomationNative.CreateNativeArray = function (valueType, cElements, managedArray, /* ref */ nativeArray, makeCopy) {
	$asm02.MS.Internal.ComAutomation.ComAutomationNative.CheckPlatform();
	var gCHandle = new System.Runtime.InteropServices.GCHandle();
	if (managedArray !== null) {
		gCHandle = System.Runtime.InteropServices.GCHandle.Alloc$1(managedArray, System.Runtime.InteropServices.GCHandleType.Pinned).MemberwiseClone();
	}
	try {
		var managedArray2 = System.IntPtr.Zero;
		if (managedArray !== null) {
			managedArray2 = gCHandle.AddrOfPinnedObject();
		}
		$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.ComAutomation.ComAutomationNative.CreateNativeArrayNative(
				valueType, 
				cElements, 
				managedArray2, 
				/* ref */ nativeArray, 
				System.Convert.ToUInt32$2(makeCopy)
			));
	} finally {
		if (managedArray !== null) {
			gCHandle.Free();
		}
	}
};
$asm02.MS.Internal.ComAutomation.ComAutomationNative.SetStringArrayElement = function (wszValue, iElement, nativeArray) {
	$asm02.MS.Internal.ComAutomation.ComAutomationNative.CheckPlatform();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.ComAutomation.ComAutomationNative.SetStringArrayElementNative(wszValue, iElement, nativeArray));
};
$asm02.MS.Internal.ComAutomation.ComAutomationNative.CopyNativeArrayToManagedArray = function (nativeArray, managedArray, makeCopy) {
	$asm02.MS.Internal.ComAutomation.ComAutomationNative.CheckPlatform();
	var gCHandle = System.Runtime.InteropServices.GCHandle.Alloc$1(managedArray, System.Runtime.InteropServices.GCHandleType.Pinned).MemberwiseClone();
	try {
		var managedArray2 = gCHandle.AddrOfPinnedObject();
		$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.ComAutomation.ComAutomationNative.CopyNativeArrayToManagedArrayNative($asm02.MS.Internal.JoltHelper.Context, nativeArray, managedArray2, System.Convert.ToUInt32$2(makeCopy)));
	} finally {
		gCHandle.Free();
	}
};
$asm02.MS.Internal.ComAutomation.ComAutomationNative.CleanupInteropValue = function (/* ref */ value) {
	$asm02.MS.Internal.ComAutomation.ComAutomationNative.CheckPlatform();
	var flag = (((value.value.type & $asm02.MS.Internal.ComAutomation.VarType.Flag_Array) !== 0) || 
		($asm02.MS.Internal.ComAutomation.VarType.String === value.value.type) || 
		($asm02.MS.Internal.ComAutomation.VarType.COMObject === value.value.type) || 
		($asm02.MS.Internal.ComAutomation.VarType.AutomationObject === value.value.type));
	if (!(!flag || 
			!value.value.OwnsResource || !System.IntPtr.op_Inequality(System.IntPtr.Zero, value.value.pNativePtrValue))) {
		$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.ComAutomation.ComAutomationNative.CleanupInteropValueNative(/* ref */ value));
	}
	value.value.type = $asm02.MS.Internal.ComAutomation.VarType.Empty;
};
$asm02.MS.Internal.ComAutomation.ComAutomationNative.CleanupInteropValues = function (values) {
	$asm02.MS.Internal.ComAutomation.ComAutomationNative.CheckPlatform();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.ComAutomation.ComAutomationNative.CleanupInteropValuesNative(values.length, values));
};
$asm02.MS.Internal.ComAutomation.ComAutomationNative.CheckCrossApartmentAccess = function (nativePeer, nativePeerType) {
	$asm02.MS.Internal.ComAutomation.ComAutomationNative.CheckPlatform();
	$asm02.MS.Internal.XcpImports.CheckHResult($asm02.MS.Internal.ComAutomation.ComAutomationNative.CheckCrossApartmentAccessNative(nativePeer, Math.floor(nativePeerType)));
};
$asm02.MS.Internal.ComAutomation.ComAutomationNative.CheckInvokeHResult = function (hr, memberName, exceptionSource, exceptionDescription, exceptionHelpFile, exceptionHelpContext) {
	if ($asm02.MS.Internal.Error.Succeeded(hr)) {
		return;
	}
	switch (hr) {
		case -2147352573: 
		case -2147352570: 
			throw JSIL.New(System.MissingMemberException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("ComAutomation_MemberNotFound", [memberName])]);
		case -2147352572: 
			break;
		case -2147352571: 
			throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("ComAutomation_TypeMismatch", [memberName])]);
		default: 
			if (hr === -2147352566) {
				throw JSIL.New(System.OverflowException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("ComAutomation_Overflow", [memberName])]);
			}
			switch (hr) {
				case -2147352562: 
					throw JSIL.New(System.Reflection.TargetParameterCountException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("ComAutomation_BadParamCount", [memberName])]);
				case -2147352561: 
					throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("ComAutomation_ParamNotOptional", [memberName])]);
			}
			break;
	}
	var exception = $asm02.MS.Internal.Error.MarshalXresultAsException$1(hr, $asm02.MS.Internal.Error.COMExceptionBehavior.ExposeCOMExceptions);
	if (!((exceptionSource === null) && 
			(exceptionDescription === null) && (exceptionHelpFile === null))) {
		var message = $asm02.MS.Internal.ComAutomation.ComAutomationNative.BuildExceptionMessage(
			exception.Message, 
			exceptionSource, 
			exceptionDescription, 
			exceptionHelpFile, 
			exceptionHelpContext
		);
		var inner = new $asm02.MS.Internal.ComAutomation.ComAutomationObjectException(message, hr);
		$asm02.MS.Internal.ComAutomation.ComAutomationNative.SetInnerException(exception, inner);
	}
	throw exception;
};
$asm02.MS.Internal.ComAutomation.ComAutomationNative.BuildExceptionMessage = function (originalMessage, exceptionSource, exceptionDescription, exceptionHelpFile, exceptionHelpContext) {
	if (!(exceptionDescription || 
			exceptionSource || exceptionHelpFile)) {
		return originalMessage;
	}
	var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
	if (exceptionDescription !== null) {
		stringBuilder.Append$2(exceptionDescription);
	} else {
		stringBuilder.Append$2(originalMessage);
	}
	if (exceptionSource !== null) {
		stringBuilder.Append$2((System.Environment.NewLine + System.String.Format($asm02.System.Windows.Resx.GetString$0("ComAutomation_InvokeException_Source", [exceptionSource]), JSIL.Array.New(System.Object, 0))));
	}
	if (exceptionHelpFile !== null) {
		if (exceptionHelpContext !== 0) {
			stringBuilder.Append$2((System.Environment.NewLine + System.String.Format($asm02.System.Windows.Resx.GetString$0("ComAutomation_InvokeException_HelpFileWithContext", [exceptionHelpFile, exceptionHelpContext]), JSIL.Array.New(System.Object, 0))));
		} else {
			stringBuilder.Append$2((System.Environment.NewLine + System.String.Format($asm02.System.Windows.Resx.GetString$0("ComAutomation_InvokeException_HelpFileNoContext", [exceptionHelpFile]), JSIL.Array.New(System.Object, 0))));
		}
	}
	return stringBuilder.toString();
};
$asm02.MS.Internal.ComAutomation.ComAutomationNative.SetInnerException = function (outer, inner) {
	try {
	__loop0__: 
		for (; outer.InnerException; outer = outer.InnerException) {
		}
		var field = System.Exception.GetField$0("_innerException", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic));
		if (field !== null) {
			field.SetValue$1(outer, inner);
		}
	} catch ($exception) {
	}
};
Object.defineProperty($asm02.MS.Internal.ComAutomation.ComAutomationNative, "DISP_E_UNKNOWNNAME", {
		"value": 2147614726}
);
Object.defineProperty($asm02.MS.Internal.ComAutomation.ComAutomationNative, "DISP_E_MEMBERNOTFOUND", {
		"value": 2147614723}
);
Object.defineProperty($asm02.MS.Internal.ComAutomation.ComAutomationNative, "DISP_E_TYPEMISMATCH", {
		"value": 2147614725}
);
Object.defineProperty($asm02.MS.Internal.ComAutomation.ComAutomationNative, "DISP_E_OVERFLOW", {
		"value": 2147614730}
);
Object.defineProperty($asm02.MS.Internal.ComAutomation.ComAutomationNative, "DISP_E_BADPARAMCOUNT", {
		"value": 2147614734}
);
Object.defineProperty($asm02.MS.Internal.ComAutomation.ComAutomationNative, "DISP_E_PARAMNOTOPTIONAL", {
		"value": 2147614735}
);
Object.defineProperty($asm02.MS.Internal.ComAutomation.ComAutomationNative, "GetObjectFlag_Get", {
		"value": 1}
);
Object.defineProperty($asm02.MS.Internal.ComAutomation.ComAutomationNative, "GetObjectFlag_Create", {
		"value": 2}
);

$asm02.MS.Internal.ComAutomation.ComAutomationManagedPeerBase.prototype._ctor = function (nativePeerPtr, nativePeerType) {
	System.Object.prototype._ctor.call(this);
	this.m_nativePeer = new $asm02.MS.Internal.NativeObjectSafeHandle();
	this.m_nativePeer.NativeObject = nativePeerPtr;
	this.m_nativePeerType = nativePeerType;
	;
	;
};
$asm02.MS.Internal.ComAutomation.ComAutomationManagedPeerBase.prototype.IManagedPeerBase_get_NativeObject = function () {
	this.ThrowIfDisposed();
	return this.m_nativePeer.NativeObject;
};
$asm02.MS.Internal.ComAutomation.ComAutomationManagedPeerBase.prototype.get_NativeObject = function () {
	return this.IManagedPeerBase_NativeObject;
};
$asm02.MS.Internal.ComAutomation.ComAutomationManagedPeerBase.prototype.ThrowIfDisposed = function () {
	if (this.m_disposed) {
		throw JSIL.New(System.ObjectDisposedException, "_ctor$1", [JSIL.GetType(this).FullName]);
	}
};
$asm02.MS.Internal.ComAutomation.ComAutomationManagedPeerBase.prototype.BeginShutdown = function () {
	$asm02.MS.Internal.XcpImports.DisconnectManagedPeer(this);
};
$asm02.MS.Internal.ComAutomation.ComAutomationManagedPeerBase.prototype.EndShutdown = function () {
	System.GC.SuppressFinalize(this.m_nativePeer);
	$asm02.MS.Internal.XcpImports.FinalizerReleaseMNative(this.NativeObject, 18);
	System.GC.KeepAlive(this);
	this.m_nativePeer = null;
};
$asm02.MS.Internal.ComAutomation.ComAutomationManagedPeerBase.prototype.RemovePeerReferenceToItem = function (child) {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm02.MS.Internal.ComAutomation.ComAutomationManagedPeerBase.prototype.AddPeerReferenceToItem = function (child) {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm02.MS.Internal.ComAutomation.ComAutomationManagedPeerBase.prototype.Dispose = function () {
	if (this.m_disposed) {
		return;
	}
	$asm02.MS.Internal.ComAutomation.ComAutomationNative.CheckCrossApartmentAccess(this.NativeObject, this.m_nativePeerType);
	this.m_nativePeer.Dispose$0();
	this.m_disposed = true;
};
JSIL.MakeProperty($asm02.MS.Internal.ComAutomation.ComAutomationManagedPeerBase.prototype, "IManagedPeerBase_NativeObject", 
	$asm02.MS.Internal.ComAutomation.ComAutomationManagedPeerBase.prototype.IManagedPeerBase_get_NativeObject, null);
JSIL.MakeProperty($asm02.MS.Internal.ComAutomation.ComAutomationManagedPeerBase.prototype, "NativeObject", 
	$asm02.MS.Internal.ComAutomation.ComAutomationManagedPeerBase.prototype.get_NativeObject, null);
$asm02.MS.Internal.ComAutomation.ComAutomationManagedPeerBase.prototype.m_nativePeer = null;
$asm02.MS.Internal.ComAutomation.ComAutomationManagedPeerBase.prototype.m_nativePeerType = 0;
$asm02.MS.Internal.ComAutomation.ComAutomationManagedPeerBase.prototype.m_disposed = false;

$asm02.MS.Internal.ComAutomation.ComAutomationObject.prototype._ctor = function (nativePeerPtr, paramWrapService) {
	this._eventsLock = new System.Object();
	this._events = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.String, System.Runtime.InteropServices.Automation.AutomationEvent), "_ctor$2", [System.StringComparer.OrdinalIgnoreCase]);
	$asm02.MS.Internal.ComAutomation.ComAutomationManagedPeerBase.prototype._ctor.call(this, nativePeerPtr, $asm02.MS.Internal.ComAutomation.ComAutomationNativePeerType.ComAutomationObject);
	if (paramWrapService !== null) {
		this._paramWrapService = paramWrapService;
		return;
	}
	this._paramWrapService = new $asm02.MS.Internal.ComAutomation.ComAutomationObject.NullComAutomationParamWrapService();
};
$asm02.MS.Internal.ComAutomation.ComAutomationObject.prototype.TryGetEnumerator = function (/* ref */ comAutomationEnumerator) {
	var intPtr = new JSIL.Variable(0);
	comAutomationEnumerator.value = null;
	$asm02.MS.Internal.ComAutomation.ComAutomationNative.GetEnumerator($asm02.MS.Internal.ComAutomation.ComAutomationManagedPeerBase.prototype.get_NativeObject.call(this), /* ref */ intPtr);
	System.GC.KeepAlive(this);
	if (System.IntPtr.op_Inequality(intPtr.value, System.IntPtr.Zero)) {
		comAutomationEnumerator.value = new $asm02.MS.Internal.ComAutomation.ComAutomationEnumerator(intPtr.value, this._paramWrapService);
		return true;
	}
	return false;
};
$asm02.MS.Internal.ComAutomation.ComAutomationObject.prototype.SetProperty$0 = function (name, value) {
	this.Invoke(name, $asm02.MS.Internal.ComAutomation.ComAutomationInvokeType.PropertyPutBasedOnParamType, [value]);
};
$asm02.MS.Internal.ComAutomation.ComAutomationObject.prototype.TrySetProperty$0 = function (name, value) {
	var obj = new JSIL.Variable(null);
	return this.TryInvoke(name, $asm02.MS.Internal.ComAutomation.ComAutomationInvokeType.PropertyPutBasedOnParamType, /* ref */ obj, [value]);
};
$asm02.MS.Internal.ComAutomation.ComAutomationObject.prototype.CombineSetPropertyValueAndArguments = function (value, args) {
	var array = JSIL.Array.New(System.Object, args ? (args.length + 1) : 1);
	if (args !== null) {
		args.CopyTo(array, 0);
	}
	array[(array.length - 1)] = value;
	return array;
};
$asm02.MS.Internal.ComAutomation.ComAutomationObject.prototype.SetProperty$1 = function (name, value, args) {
	this.Invoke(name, $asm02.MS.Internal.ComAutomation.ComAutomationInvokeType.PropertyPutBasedOnParamType, this.CombineSetPropertyValueAndArguments(value, args));
};
$asm02.MS.Internal.ComAutomation.ComAutomationObject.prototype.TrySetProperty$1 = function (name, value, args) {
	var obj = new JSIL.Variable(null);
	return this.TryInvoke(name, $asm02.MS.Internal.ComAutomation.ComAutomationInvokeType.PropertyPutBasedOnParamType, /* ref */ obj, this.CombineSetPropertyValueAndArguments(value, args));
};
$asm02.MS.Internal.ComAutomation.ComAutomationObject.prototype.GetProperty$0 = function (name) {
	return this.GetProperty$1(name, JSIL.Array.New(System.Object, 0));
};
$asm02.MS.Internal.ComAutomation.ComAutomationObject.prototype.TryGetProperty$0 = function (name, /* ref */ returnValue) {
	return this.TryGetProperty$1(name, /* ref */ returnValue, JSIL.Array.New(System.Object, 0));
};
$asm02.MS.Internal.ComAutomation.ComAutomationObject.prototype.GetProperty$1 = function (name, args) {
	return this.Invoke(name, $asm02.MS.Internal.ComAutomation.ComAutomationInvokeType.PropertyGet, args);
};
$asm02.MS.Internal.ComAutomation.ComAutomationObject.prototype.TryGetProperty$1 = function (name, /* ref */ returnValue, args) {
	return this.TryInvoke(name, $asm02.MS.Internal.ComAutomation.ComAutomationInvokeType.PropertyGet, /* ref */ returnValue, args);
};
$asm02.MS.Internal.ComAutomation.ComAutomationObject.prototype.InvokeMethod = function (name, args) {
	return this.Invoke(name, $asm02.MS.Internal.ComAutomation.ComAutomationInvokeType.MethodCall, args);
};
$asm02.MS.Internal.ComAutomation.ComAutomationObject.prototype.TryInvokeMethod = function (name, /* ref */ returnValue, args) {
	return this.TryInvoke(name, $asm02.MS.Internal.ComAutomation.ComAutomationInvokeType.MethodCall, /* ref */ returnValue, args);
};
$asm02.MS.Internal.ComAutomation.ComAutomationObject.prototype.InvokeMethodOrGetProperty$0 = function (name) {
	return this.InvokeMethodOrGetProperty$1(name, JSIL.Array.New(System.Object, 0));
};
$asm02.MS.Internal.ComAutomation.ComAutomationObject.prototype.TryInvokeMethodOrGetProperty$0 = function (name, /* ref */ returnValue) {
	return this.TryInvokeMethodOrGetProperty$1(name, /* ref */ returnValue, JSIL.Array.New(System.Object, 0));
};
$asm02.MS.Internal.ComAutomation.ComAutomationObject.prototype.InvokeMethodOrGetProperty$1 = function (name, args) {
	return this.Invoke(name, $asm02.MS.Internal.ComAutomation.ComAutomationInvokeType.MethodCallOrPropertyGet, args);
};
$asm02.MS.Internal.ComAutomation.ComAutomationObject.prototype.TryInvokeMethodOrGetProperty$1 = function (name, /* ref */ returnValue, args) {
	return this.TryInvoke(name, $asm02.MS.Internal.ComAutomation.ComAutomationInvokeType.MethodCallOrPropertyGet, /* ref */ returnValue, args);
};
$asm02.MS.Internal.ComAutomation.ComAutomationObject.prototype.Invoke = function (name, invokeType, args) {
	var result = new JSIL.Variable(null);
	this.InvokeImpl(
		false, 
		name, 
		invokeType, 
		/* ref */ result, 
		args
	);
	return result.value;
};
$asm02.MS.Internal.ComAutomation.ComAutomationObject.prototype.TryInvoke = function (name, invokeType, /* ref */ returnValue, args) {
	return this.InvokeImpl(
		true, 
		name, 
		invokeType, 
		/* ref */ returnValue, 
		args
	);
};
$asm02.MS.Internal.ComAutomation.ComAutomationObject.prototype.InvokeImpl = function (tryInvoke, name, invokeType, /* ref */ returnValue, args) {
	$asm02.MS.Internal.ComAutomation.ComAutomationManagedPeerBase.prototype.ThrowIfDisposed.call(this);
	var array = JSIL.Array.New($asm02.MS.Internal.ComAutomation.ComAutomationInteropValue, args.length);
	var comAutomationInteropValue = new JSIL.Variable(new $asm02.MS.Internal.ComAutomation.ComAutomationInteropValue());
	try {
	__loop0__: 
		for (var i = 0; i < args.length; ++i) {
			$asm02.MS.Internal.ComAutomation.ManagedObjectMarshaler.MarshalObject(args[i], this._paramWrapService, JSIL.UnmaterializedReference(), false);
		}
		var flag = $asm02.MS.Internal.ComAutomation.ComAutomationNative.Invoke(
			tryInvoke, 
			name, 
			invokeType, 
			array, 
			$asm02.MS.Internal.ComAutomation.ComAutomationManagedPeerBase.prototype.get_NativeObject.call(this), 
			/* ref */ comAutomationInteropValue
		);
		System.GC.KeepAlive(this);
		if (flag) {
		__loop1__: 
			for (var j = 0; j < args.length; ++j) {
				if (array[j].IsByRef) {
					var comAutomationParam = JSIL.Cast(args[j], $asm02.MS.Internal.ComAutomation.ComAutomationParam);
					comAutomationParam.Value = $asm02.MS.Internal.ComAutomation.NativeObjectMarshaler.MarshalByRefInteropValue(JSIL.UnmaterializedReference(), this._paramWrapService, false);
				}
			}
			if (comAutomationInteropValue.value.IsByRef) {
				returnValue.value = $asm02.MS.Internal.ComAutomation.NativeObjectMarshaler.MarshalByRefInteropValue(/* ref */ comAutomationInteropValue, this._paramWrapService, false);
			} else {
				returnValue.value = $asm02.MS.Internal.ComAutomation.NativeObjectMarshaler.MarshalInteropValue(/* ref */ comAutomationInteropValue, this._paramWrapService, false);
			}
		} else {
			returnValue.value = null;
		}
	} finally {
	__loop2__: 
		for (var k = 0; k < array.length; ++k) {
			$asm02.MS.Internal.ComAutomation.ComAutomationNative.CleanupInteropValue(JSIL.UnmaterializedReference());
		}
		$asm02.MS.Internal.ComAutomation.ComAutomationNative.CleanupInteropValue(/* ref */ comAutomationInteropValue);
	}
	return flag;
};
$asm02.MS.Internal.ComAutomation.ComAutomationObject.prototype.GetOrCreateAutomationEvent = function (eventName) {
	var eventsLock = null;
	System.Threading.Monitor.Enter((eventsLock = this._eventsLock));
	try {
		if (!this._events.TryGetValue(eventName, /* ref */ automationEvent)) {
			var automationEvent = new JSIL.Variable(new System.Runtime.InteropServices.Automation.AutomationEvent(this, eventName));
			this._events.set_Item(eventName, automationEvent.value);
		}
	} finally {
		System.Threading.Monitor.Exit(eventsLock);
	}
	return automationEvent.value;
};
$asm02.MS.Internal.ComAutomation.ComAutomationObject.prototype.ConnectEvent = function (name) {
	$asm02.MS.Internal.ComAutomation.ComAutomationManagedPeerBase.prototype.ThrowIfDisposed.call(this);
	$asm02.MS.Internal.ComAutomation.ComAutomationNative.ConnectEvent($asm02.MS.Internal.ComAutomation.ComAutomationManagedPeerBase.prototype.get_NativeObject.call(this), name, $asm02.MS.Internal.ComAutomation.ComAutomationObject._raiseComAutomationDelegate);
	System.GC.KeepAlive(this);
};
$asm02.MS.Internal.ComAutomation.ComAutomationObject.prototype.DisconnectEvent = function (name) {
	$asm02.MS.Internal.ComAutomation.ComAutomationManagedPeerBase.prototype.ThrowIfDisposed.call(this);
	$asm02.MS.Internal.ComAutomation.ComAutomationNative.DisconnectEvent($asm02.MS.Internal.ComAutomation.ComAutomationManagedPeerBase.prototype.get_NativeObject.call(this), name);
	System.GC.KeepAlive(this);
};
$asm02.MS.Internal.ComAutomation.ComAutomationObject.RaiseComAutomationEvent = function (nativePeer, eventName, argCount, $args) {
	var args = new JSIL.Variable($args);
	try {
		var comAutomationObject = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativePeer), $asm02.MS.Internal.ComAutomation.ComAutomationObject);
		if (comAutomationObject === null) {
			var result = 0;
		} else {
			result = comAutomationObject.RaiseComAutomationEvent(eventName, argCount, /* ref */ args);
		}
	} catch ($exception) {
		var arg_20_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForUserException(arg_20_0);
	}
	return result;
};
$asm02.MS.Internal.ComAutomation.ComAutomationObject.prototype.RaiseComAutomationEvent = function (eventName, argCount, /* ref */ args) {
	var eventsLock = null, automationEvent = new JSIL.Variable(null);
	try {
		System.Threading.Monitor.Enter((eventsLock = this._eventsLock));
		try {
			if (!this._events.TryGetValue(eventName, /* ref */ automationEvent)) {
				var result = 0;
				return result;
			}
		} finally {
			System.Threading.Monitor.Exit(eventsLock);
		}
		var array = null;
		if (argCount > 0) {
			array = JSIL.Array.New(System.Object, argCount);
		__loop0__: 
			for (var num = 0; num < argCount; ++num) {
				if (args.value[num].IsByRef) {
					array[num] = $asm02.MS.Internal.ComAutomation.NativeObjectMarshaler.MarshalByRefInteropValue(JSIL.UnmaterializedReference(), this._paramWrapService, false);
				} else {
					array[num] = $asm02.MS.Internal.ComAutomation.NativeObjectMarshaler.MarshalInteropValue(JSIL.UnmaterializedReference(), this._paramWrapService, false);
				}
			}
		}
		automationEvent.value.RaiseComAutomationEvent(array);
		if (argCount > 0) {
		__loop1__: 
			for (var num2 = 0; num2 < argCount; ++num2) {
				if (args.value[num2].IsByRef) {
					var varType = (args.value[num2].type & 49151);
					$asm02.MS.Internal.ComAutomation.ManagedObjectMarshaler.MarshalByRefObject(array[num2], this._paramWrapService, JSIL.UnmaterializedReference(), false);
					if (!(!JSIL.Cast(varType, System.Boolean) || ((args.value[num2].type & 49151) === varType))) {
						throw JSIL.New(System.ArgumentException, "_ctor$1", [System.String.Format(System.Globalization.CultureInfo.CurrentCulture, $asm02.System.Windows.Resx.GetString$2("ComAutomation_EventHandlerOutParamValueTypeMismatch"), [(num2).toString()])]);
					}
				}
			}
		}
	} catch ($exception) {
		var arg_13C_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForUserException(arg_13C_0);
		return result;
	}
	return 0;
};
$asm02.MS.Internal.ComAutomation.ComAutomationObject.prototype.get_ParamWrapService = function () {
	return this._paramWrapService;
};
JSIL.OverloadedMethod($asm02.MS.Internal.ComAutomation.ComAutomationObject.prototype, "SetProperty", [
		["SetProperty$0", [System.String, System.Object]], 
		["SetProperty$1", [System.String, System.Object, System.Array.Of(System.Object)]]
	]);
JSIL.OverloadedMethod($asm02.MS.Internal.ComAutomation.ComAutomationObject.prototype, "TrySetProperty", [
		["TrySetProperty$0", [System.String, System.Object]], 
		["TrySetProperty$1", [System.String, System.Object, System.Array.Of(System.Object)]]
	]);
JSIL.OverloadedMethod($asm02.MS.Internal.ComAutomation.ComAutomationObject.prototype, "GetProperty", [
		["GetProperty$0", [System.String]], 
		["GetProperty$1", [System.String, System.Array.Of(System.Object)]]
	]);
JSIL.OverloadedMethod($asm02.MS.Internal.ComAutomation.ComAutomationObject.prototype, "TryGetProperty", [
		["TryGetProperty$0", [System.String, JSIL.Reference.Of(System.Object)]], 
		["TryGetProperty$1", [System.String, JSIL.Reference.Of(System.Object), System.Array.Of(System.Object)]]
	]);
JSIL.OverloadedMethod($asm02.MS.Internal.ComAutomation.ComAutomationObject.prototype, "InvokeMethodOrGetProperty", [
		["InvokeMethodOrGetProperty$0", [System.String]], 
		["InvokeMethodOrGetProperty$1", [System.String, System.Array.Of(System.Object)]]
	]);
JSIL.OverloadedMethod($asm02.MS.Internal.ComAutomation.ComAutomationObject.prototype, "TryInvokeMethodOrGetProperty", [
		["TryInvokeMethodOrGetProperty$0", [System.String, JSIL.Reference.Of(System.Object)]], 
		["TryInvokeMethodOrGetProperty$1", [System.String, JSIL.Reference.Of(System.Object), System.Array.Of(System.Object)]]
	]);
JSIL.MakeProperty($asm02.MS.Internal.ComAutomation.ComAutomationObject.prototype, "ParamWrapService", 
	$asm02.MS.Internal.ComAutomation.ComAutomationObject.prototype.get_ParamWrapService, null);
$asm02.MS.Internal.ComAutomation.ComAutomationObject.prototype._eventsLock = null;
$asm02.MS.Internal.ComAutomation.ComAutomationObject.prototype._events = null;
$asm02.MS.Internal.ComAutomation.ComAutomationObject._raiseComAutomationDelegate = null;
$asm02.MS.Internal.ComAutomation.ComAutomationObject.prototype._paramWrapService = null;
$asm02.MS.Internal.ComAutomation.ComAutomationObject._cctor = function () {
	$asm02.MS.Internal.ComAutomation.ComAutomationObject._raiseComAutomationDelegate = JSIL.Delegate.New("MS.Internal.ComAutomation.ComAutomationObject/RaiseComAutomationEventDelegate", null, $asm02.MS.Internal.ComAutomation.ComAutomationObject.RaiseComAutomationEvent);
};

$asm02.MS.Internal.ComAutomation.ComAutomationObject.NullComAutomationParamWrapService.prototype.Wrap = function (param) {
	return param;
};
$asm02.MS.Internal.ComAutomation.ComAutomationObject.NullComAutomationParamWrapService.prototype.Unwrap = function (param) {
	return param;
};
$asm02.MS.Internal.ComAutomation.ComAutomationObject.NullComAutomationParamWrapService.prototype._ctor = function () {
	$asm02.MS.Internal.ComAutomation.ComAutomationParamWrapService.prototype._ctor.call(this);
};

$asm02.MS.Internal.ComAutomation.ComAutomationParamWrapService.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};

$asm02.MS.Internal.ComAutomation.ComAutomationEnumerator.prototype._ctor = function (nativePeerPtr, paramWrapService) {
	$asm02.MS.Internal.ComAutomation.ComAutomationManagedPeerBase.prototype._ctor.call(this, nativePeerPtr, $asm02.MS.Internal.ComAutomation.ComAutomationNativePeerType.ComEnum);
	this._paramWrapService = paramWrapService;
};
$asm02.MS.Internal.ComAutomation.ComAutomationEnumerator.prototype.IEnumerator_get_Current = function () {
	var comAutomationInteropValue = new JSIL.Variable(new $asm02.MS.Internal.ComAutomation.ComAutomationInteropValue());
	$asm02.MS.Internal.ComAutomation.ComAutomationNative.GetCurrent($asm02.MS.Internal.ComAutomation.ComAutomationManagedPeerBase.prototype.get_NativeObject.call(this), /* ref */ comAutomationInteropValue);
	System.GC.KeepAlive(this);
	try {
		if (comAutomationInteropValue.value.IsByRef) {
			var result = $asm02.MS.Internal.ComAutomation.NativeObjectMarshaler.MarshalByRefInteropValue(/* ref */ comAutomationInteropValue, this._paramWrapService, false);
		} else {
			result = $asm02.MS.Internal.ComAutomation.NativeObjectMarshaler.MarshalInteropValue(/* ref */ comAutomationInteropValue, this._paramWrapService, false);
		}
	} finally {
		$asm02.MS.Internal.ComAutomation.ComAutomationNative.CleanupInteropValue(/* ref */ comAutomationInteropValue);
	}
	return result;
};
$asm02.MS.Internal.ComAutomation.ComAutomationEnumerator.prototype.IEnumerator_MoveNext = function () {
	var result = new JSIL.Variable(false);
	$asm02.MS.Internal.ComAutomation.ComAutomationNative.MoveNext($asm02.MS.Internal.ComAutomation.ComAutomationManagedPeerBase.prototype.get_NativeObject.call(this), /* ref */ result);
	System.GC.KeepAlive(this);
	return result.value;
};
$asm02.MS.Internal.ComAutomation.ComAutomationEnumerator.prototype.IEnumerator_Reset = function () {
	$asm02.MS.Internal.ComAutomation.ComAutomationNative.Reset($asm02.MS.Internal.ComAutomation.ComAutomationManagedPeerBase.prototype.get_NativeObject.call(this));
	System.GC.KeepAlive(this);
};
JSIL.MakeProperty($asm02.MS.Internal.ComAutomation.ComAutomationEnumerator.prototype, "IEnumerator_Current", 
	$asm02.MS.Internal.ComAutomation.ComAutomationEnumerator.prototype.IEnumerator_get_Current, null);
$asm02.MS.Internal.ComAutomation.ComAutomationEnumerator.prototype._paramWrapService = null;

$asm02.MS.Internal.ComAutomation.InternalCOMObject.prototype._ctor = function (nativePeerPtr) {
	$asm02.MS.Internal.ComAutomation.ComAutomationManagedPeerBase.prototype._ctor.call(this, nativePeerPtr, $asm02.MS.Internal.ComAutomation.ComAutomationNativePeerType.ComObject);
};

$asm02.MS.Internal.ComAutomation.ComAutomationServices.IsAvailable = function () {
	return $asm02.MS.Internal.ComAutomation.ComAutomationNative.IsAllowed();
};
$asm02.MS.Internal.ComAutomation.ComAutomationServices.CreateObject = function (progID, paramWrapService) {
	var nativePeerPtr = new JSIL.Variable(0);
	$asm02.MS.Internal.ComAutomation.ComAutomationNative.CreateObject(progID, /* ref */ nativePeerPtr);
	return new $asm02.MS.Internal.ComAutomation.ComAutomationObject(nativePeerPtr.value, paramWrapService);
};
$asm02.MS.Internal.ComAutomation.ComAutomationServices.GetObject = function (progID, paramWrapService) {
	var nativePeerPtr = new JSIL.Variable(0);
	$asm02.MS.Internal.ComAutomation.ComAutomationNative.GetObject(progID, /* ref */ nativePeerPtr);
	return new $asm02.MS.Internal.ComAutomation.ComAutomationObject(nativePeerPtr.value, paramWrapService);
};
$asm02.MS.Internal.ComAutomation.ComAutomationServices.GetEvent = function (comAutoObject, eventName) {
	if (!((comAutoObject !== null) && !System.String.IsNullOrEmpty(eventName))) {
		throw JSIL.New(System.ArgumentException, "_ctor$0", []);
	}
	return comAutoObject.GetOrCreateAutomationEvent(eventName);
};

$asm02.MS.Internal.ComAutomation.ComAutomationInteropValue.prototype.get_OwnsResource = function () {
	return ((this.flags & 1) !== 0);
};
$asm02.MS.Internal.ComAutomation.ComAutomationInteropValue.prototype.set_OwnsResource = function (value) {
	if (value) {
		this.flags = (this.flags | 1);
		return;
	}
	this.flags = (this.flags & -2);
};
$asm02.MS.Internal.ComAutomation.ComAutomationInteropValue.prototype.get_ShouldBeCharacter = function () {
	return ((this.flags & 2) !== 0);
};
$asm02.MS.Internal.ComAutomation.ComAutomationInteropValue.prototype.set_ShouldBeCharacter = function (value) {
	if (value) {
		this.flags = (this.flags | 2);
		return;
	}
	this.flags = (this.flags & -3);
};
$asm02.MS.Internal.ComAutomation.ComAutomationInteropValue.prototype.get_IsByRef = function () {
	return ((this.type & $asm02.MS.Internal.ComAutomation.VarType.Flag_ByRef) !== 0);
};
JSIL.MakeProperty($asm02.MS.Internal.ComAutomation.ComAutomationInteropValue.prototype, "OwnsResource", 
	$asm02.MS.Internal.ComAutomation.ComAutomationInteropValue.prototype.get_OwnsResource, $asm02.MS.Internal.ComAutomation.ComAutomationInteropValue.prototype.set_OwnsResource);
JSIL.MakeProperty($asm02.MS.Internal.ComAutomation.ComAutomationInteropValue.prototype, "ShouldBeCharacter", 
	$asm02.MS.Internal.ComAutomation.ComAutomationInteropValue.prototype.get_ShouldBeCharacter, $asm02.MS.Internal.ComAutomation.ComAutomationInteropValue.prototype.set_ShouldBeCharacter);
JSIL.MakeProperty($asm02.MS.Internal.ComAutomation.ComAutomationInteropValue.prototype, "IsByRef", 
	$asm02.MS.Internal.ComAutomation.ComAutomationInteropValue.prototype.get_IsByRef, null);
Object.defineProperty($asm02.MS.Internal.ComAutomation.ComAutomationInteropValue, "FlagOwnsResource", {
		"value": 1}
);
Object.defineProperty($asm02.MS.Internal.ComAutomation.ComAutomationInteropValue, "FlagShouldBeChar", {
		"value": 2}
);
$asm02.MS.Internal.ComAutomation.ComAutomationInteropValue.prototype.type = 0;
$asm02.MS.Internal.ComAutomation.ComAutomationInteropValue.prototype.flags = 0;
$asm02.MS.Internal.ComAutomation.ComAutomationInteropValue.prototype.decSignScale = 0;
$asm02.MS.Internal.ComAutomation.ComAutomationInteropValue.prototype.count = 0;
$asm02.MS.Internal.ComAutomation.ComAutomationInteropValue.prototype.decHi = 0;
$asm02.MS.Internal.ComAutomation.ComAutomationInteropValue.prototype.decLo = 0;
$asm02.MS.Internal.ComAutomation.ComAutomationInteropValue.prototype.decMid = 0;
$asm02.MS.Internal.ComAutomation.ComAutomationInteropValue.prototype.ui8Value = 0;
$asm02.MS.Internal.ComAutomation.ComAutomationInteropValue.prototype.ui16Value = 0;
$asm02.MS.Internal.ComAutomation.ComAutomationInteropValue.prototype.ui32Value = 0;
$asm02.MS.Internal.ComAutomation.ComAutomationInteropValue.prototype.ui64Value = 0;
$asm02.MS.Internal.ComAutomation.ComAutomationInteropValue.prototype.i8Value = 0;
$asm02.MS.Internal.ComAutomation.ComAutomationInteropValue.prototype.i16Value = 0;
$asm02.MS.Internal.ComAutomation.ComAutomationInteropValue.prototype.i32Value = 0;
$asm02.MS.Internal.ComAutomation.ComAutomationInteropValue.prototype.i64Value = 0;
$asm02.MS.Internal.ComAutomation.ComAutomationInteropValue.prototype.fltValue = 0;
$asm02.MS.Internal.ComAutomation.ComAutomationInteropValue.prototype.dblValue = 0;
$asm02.MS.Internal.ComAutomation.ComAutomationInteropValue.prototype.boolValue = 0;
$asm02.MS.Internal.ComAutomation.ComAutomationInteropValue.prototype.errorCodeValue = 0;
$asm02.MS.Internal.ComAutomation.ComAutomationInteropValue.prototype.pNativePtrValue = 0;

$asm02.MS.Internal.ComAutomation.ComAutomationInterop.VarTypeToManagedType = function (vt, shouldBeCharacter) {
	switch (Number(vt)) {
		case 2: 
			return System.Int16;
		case 3: 
			return System.Int32;
		case 4: 
			return System.Single;
		case 5: 
			return System.Double;
		case 7: 
			return System.DateTime;
		case 8: 
			return System.String;
		case 9: 
			return $asm02.MS.Internal.ComAutomation.ComAutomationObject;
		case 11: 
			return System.Boolean;
		case 12: 
			return System.Object;
		case 13: 
			return $asm02.MS.Internal.ComAutomation.InternalCOMObject;
		case 14: 
			return System.Decimal;
		case 16: 
			return System.SByte;
		case 17: 
			return System.Byte;
		case 18: 
			if (shouldBeCharacter) {
				return System.Char;
			}
			return System.UInt16;
		case 19: 
			return System.UInt32;
		case 20: 
			return System.Int64;
		case 21: 
			return System.UInt64;
	}
	return null;
};
$asm02.MS.Internal.ComAutomation.ComAutomationInterop.ManagedTypeToVarType = function (type) {
	if (System.Byte === type) {
		return $asm02.MS.Internal.ComAutomation.VarType.UInt8;
	}
	if (System.UInt16 === type) {
		return $asm02.MS.Internal.ComAutomation.VarType.UInt16;
	}
	if (System.UInt32 === type) {
		return $asm02.MS.Internal.ComAutomation.VarType.UInt32;
	}
	if (System.UInt64 === type) {
		return $asm02.MS.Internal.ComAutomation.VarType.UInt64;
	}
	if (System.SByte === type) {
		return $asm02.MS.Internal.ComAutomation.VarType.Int8;
	}
	if (System.Int16 === type) {
		return $asm02.MS.Internal.ComAutomation.VarType.Int16;
	}
	if (System.Int32 === type) {
		return $asm02.MS.Internal.ComAutomation.VarType.Int32;
	}
	if (System.Int64 === type) {
		return $asm02.MS.Internal.ComAutomation.VarType.Int64;
	}
	if (System.Char === type) {
		return $asm02.MS.Internal.ComAutomation.VarType.UInt16;
	}
	if (System.Single === type) {
		return $asm02.MS.Internal.ComAutomation.VarType.Float;
	}
	if (System.Double === type) {
		return $asm02.MS.Internal.ComAutomation.VarType.Double;
	}
	if (System.Decimal === type) {
		return $asm02.MS.Internal.ComAutomation.VarType.Decimal;
	}
	if (System.Boolean === type) {
		return $asm02.MS.Internal.ComAutomation.VarType.Boolean;
	}
	if (System.DateTime === type) {
		return $asm02.MS.Internal.ComAutomation.VarType.Date;
	}
	if (System.String === type) {
		return $asm02.MS.Internal.ComAutomation.VarType.String;
	}
	if ($asm02.MS.Internal.ComAutomation.ComAutomationObject === type) {
		return $asm02.MS.Internal.ComAutomation.VarType.AutomationObject;
	}
	if ($asm02.MS.Internal.ComAutomation.InternalCOMObject === type) {
		return $asm02.MS.Internal.ComAutomation.VarType.COMObject;
	}
	if (System.Object === type) {
		return $asm02.MS.Internal.ComAutomation.VarType.Variant;
	}
	return $asm02.MS.Internal.ComAutomation.VarType.UnknownType;
};
Object.defineProperty($asm02.MS.Internal.ComAutomation.ComAutomationInterop, "DISP_E_PARAMNOTFOUND", {
		"value": 2147614724}
);

$asm02.MS.Internal.ComAutomation.ManagedObjectMarshaler.MarshalByRefObject = function (actualParamValue, paramWrapService, /* ref */ interopValue, makeCopy) {
	var obj = new $asm02.MS.Internal.ComAutomation.ComAutomationParam(actualParamValue, true);
	$asm02.MS.Internal.ComAutomation.ManagedObjectMarshaler.MarshalObject(obj, paramWrapService, /* ref */ interopValue, makeCopy);
};
$asm02.MS.Internal.ComAutomation.ManagedObjectMarshaler.MarshalObject = function (obj, paramWrapService, /* ref */ value, makeCopy) {
	value.value = new $asm02.MS.Internal.ComAutomation.ComAutomationInteropValue();
	obj = paramWrapService.Unwrap(obj);
	if ($asm02.MS.Internal.ComAutomation.ManagedObjectMarshaler.TryMarshalSpecialValue(obj, /* ref */ value)) {
		return;
	}
	if (JSIL.TryCast(obj, System.Array) !== null) {
		$asm02.MS.Internal.ComAutomation.ManagedObjectMarshaler.MarshalArray(JSIL.Cast(obj, System.Array), paramWrapService, /* ref */ value);
		return;
	}
	if (JSIL.TryCast(obj, $asm02.MS.Internal.ComAutomation.ComAutomationParam) !== null) {
		$asm02.MS.Internal.ComAutomation.ManagedObjectMarshaler.MarshalParamWrapper(JSIL.Cast(obj, $asm02.MS.Internal.ComAutomation.ComAutomationParam), paramWrapService, /* ref */ value, makeCopy);
		return;
	}
	value.value.type = $asm02.MS.Internal.ComAutomation.ComAutomationInterop.ManagedTypeToVarType(JSIL.GetType(obj));
	switch (Number(value.value.type)) {
		case 2: 
			value.value.i16Value = JSIL.Cast(obj, System.Int16);
			return;
		case 3: 
			value.value.i32Value = JSIL.Cast(obj, System.Int32);
			return;
		case 4: 
			value.value.fltValue = JSIL.Cast(obj, System.Single);
			return;
		case 5: 
			value.value.dblValue = JSIL.Cast(obj, System.Double);
			return;
		case 7: 
			value.value.dblValue = JSIL.Cast(obj, System.DateTime).ToOADate();
			return;
		case 8: 
			$asm02.MS.Internal.ComAutomation.ManagedObjectMarshaler.MarshalString(JSIL.Cast(obj, System.String), /* ref */ value);
			return;
		case 9: 
			$asm02.MS.Internal.ComAutomation.ManagedObjectMarshaler.MarshalAutomationObject(JSIL.Cast(obj, $asm02.MS.Internal.ComAutomation.ComAutomationObject), /* ref */ value, makeCopy);
			return;
		case 11: 
			value.value.boolValue = System.Convert.ToByte$2(JSIL.Cast(obj, System.Boolean));
			return;
		case 13: 
			$asm02.MS.Internal.ComAutomation.ManagedObjectMarshaler.MarshalCOMObject(JSIL.Cast(obj, $asm02.MS.Internal.ComAutomation.InternalCOMObject), /* ref */ value, makeCopy);
			return;
		case 14: 
			$asm02.MS.Internal.ComAutomation.ManagedObjectMarshaler.MarshalDecimal(JSIL.Cast(obj, System.Decimal).MemberwiseClone(), /* ref */ value);
			return;
		case 16: 
			value.value.i8Value = JSIL.Cast(obj, System.SByte);
			return;
		case 17: 
			value.value.ui8Value = JSIL.Cast(obj, System.Byte);
			return;
		case 18: 
			if (JSIL.TryCast(obj, System.UInt16) !== 0) {
				value.value.ui16Value = JSIL.Cast(obj, System.UInt16);
				return;
			}
			if (JSIL.TryCast(obj, System.Char) !== 0) {
				value.value.ui16Value = String.fromCharCode(obj);
				value.value.ShouldBeCharacter = true;
				return;
			}
			break;
		case 19: 
			value.value.ui32Value = JSIL.Cast(obj, System.UInt32);
			return;
		case 20: 
			value.value.i64Value = JSIL.Cast(obj, System.Int64);
			return;
		case 21: 
			value.value.ui64Value = JSIL.Cast(obj, System.UInt64);
			return;
	}
	throw new System.Exception(JSIL.ConcatString("unhandled object type [", JSIL.GetType(obj), "] in ConvertObjectToInteropValue"));
};
$asm02.MS.Internal.ComAutomation.ManagedObjectMarshaler.TryMarshalSpecialValue = function (obj, /* ref */ value) {
	if (obj === null) {
		value.value.type = $asm02.MS.Internal.ComAutomation.VarType.Empty;
		return true;
	}
	if (obj === System.DBNull.Value) {
		value.value.type = $asm02.MS.Internal.ComAutomation.VarType.DBNull;
		return true;
	}
	if (obj === System.Type.Missing) {
		value.value.type = $asm02.MS.Internal.ComAutomation.VarType.ErrorCode;
		value.value.errorCodeValue = -2147352572;
		return true;
	}
	return false;
};
$asm02.MS.Internal.ComAutomation.ManagedObjectMarshaler.MarshalParamWrapper = function (param, paramWrapService, /* ref */ value, makeCopy) {
	$asm02.MS.Internal.ComAutomation.ManagedObjectMarshaler.MarshalObject(param.Value, paramWrapService, /* ref */ value, makeCopy);
	if (param.ByRef) {
		value.value.type = (value.value.type | $asm02.MS.Internal.ComAutomation.VarType.Flag_ByRef);
	}
};
$asm02.MS.Internal.ComAutomation.ManagedObjectMarshaler.MarshalDecimal = function (d, /* ref */ value) {
	var bits = System.Decimal.GetBits(d);
	value.value.type = $asm02.MS.Internal.ComAutomation.VarType.Decimal;
	value.value.decSignScale = (bits[3] >> 16);
	value.value.decHi = bits[2];
	value.value.decLo = bits[0];
	value.value.decMid = bits[1];
};
$asm02.MS.Internal.ComAutomation.ManagedObjectMarshaler.MarshalString = function (s, /* ref */ value) {
	value.value.type = $asm02.MS.Internal.ComAutomation.VarType.String;
	if (s.length === 0) {
		value.value.pNativePtrValue = System.IntPtr.Zero;
		return;
	}
	$asm02.MS.Internal.ComAutomation.ComAutomationNative.CreateNativeString(s, /* ref */ new JSIL.MemberReference(value.value, "pNativePtrValue"));
	value.value.OwnsResource = true;
	value.value.count = s.length;
};
$asm02.MS.Internal.ComAutomation.ManagedObjectMarshaler.MarshalArray = function (array, paramWrapService, /* ref */ value) {
	var flag = new JSIL.Variable(false), pNativePtrValue = new JSIL.Variable(0);
	if (1 !== array.Rank) {
		throw new System.Exception(JSIL.ConcatString("can't convert an array of rank [", array.Rank, "]"));
	}
	var elementType = JSIL.GetType(array).GetElementType();
	var varType = $asm02.MS.Internal.ComAutomation.ComAutomationInterop.ManagedTypeToVarType(elementType);
	if ($asm02.MS.Internal.ComAutomation.VarType.UnknownType === varType) {
		throw new System.Exception(JSIL.ConcatString("can't convert an array of element type [", elementType, "]"));
	}
	var arrayToMarshal = $asm02.MS.Internal.ComAutomation.ManagedObjectMarshaler.GetArrayToMarshal(varType, array, paramWrapService, /* ref */ flag);
	try {
		var makeCopy = !flag.value;
		$asm02.MS.Internal.ComAutomation.ComAutomationNative.CreateNativeArray(
			varType, 
			array.length, 
			arrayToMarshal, 
			/* ref */ pNativePtrValue, 
			makeCopy
		);
		value.value.type = (varType | $asm02.MS.Internal.ComAutomation.VarType.Flag_Array);
		value.value.OwnsResource = true;
		value.value.pNativePtrValue = pNativePtrValue.value;
		if ($asm02.MS.Internal.ComAutomation.VarType.String === varType) {
		__loop0__: 
			for (var i = 0; i < array.length; ++i) {
				var wszValue = JSIL.Cast(array.GetValue(i), System.String);
				$asm02.MS.Internal.ComAutomation.ComAutomationNative.SetStringArrayElement(wszValue, i, value.value.pNativePtrValue);
			}
		}
	} finally {
		$asm02.MS.Internal.ComAutomation.ManagedObjectMarshaler.CleanupArrayToMarshal(varType, arrayToMarshal);
	}
};
$asm02.MS.Internal.ComAutomation.ManagedObjectMarshaler.GetArrayToMarshal = function (vt, arrayIn, paramWrapService, /* ref */ okToModifyArrayToMarshal) {
	if ($asm02.MS.Internal.ComAutomation.VarType.Date === vt) {
		var array = JSIL.Array.New(System.Double, arrayIn.length);
	__loop0__: 
		for (var i = 0; i < arrayIn.length; ++i) {
			array[i] = JSIL.Cast(arrayIn.GetValue(i), System.DateTime).ToOADate();
		}
		okToModifyArrayToMarshal.value = true;
		return array;
	}
	if ($asm02.MS.Internal.ComAutomation.VarType.String === vt) {
		okToModifyArrayToMarshal.value = false;
		return null;
	}
	if (!(($asm02.MS.Internal.ComAutomation.VarType.AutomationObject !== vt) && ($asm02.MS.Internal.ComAutomation.VarType.COMObject !== vt))) {
		var array2 = JSIL.Array.New(System.IntPtr, arrayIn.length);
	__loop1__: 
		for (var j = 0; j < arrayIn.length; ++j) {
			var comAutomationManagedPeerBase = JSIL.Cast(arrayIn.GetValue(j), $asm02.MS.Internal.ComAutomation.ComAutomationManagedPeerBase);
			array2[j] = comAutomationManagedPeerBase ? comAutomationManagedPeerBase.NativeObject : System.IntPtr.Zero;
		}
		okToModifyArrayToMarshal.value = true;
		return array2;
	}
	if ($asm02.MS.Internal.ComAutomation.VarType.Variant === vt) {
		var array3 = JSIL.Array.New($asm02.MS.Internal.ComAutomation.ComAutomationInteropValue, arrayIn.length);
	__loop2__: 
		for (var k = 0; k < arrayIn.length; ++k) {
			var value = arrayIn.GetValue(k);
			$asm02.MS.Internal.ComAutomation.ManagedObjectMarshaler.MarshalObject(value, paramWrapService, JSIL.UnmaterializedReference(), false);
		}
		okToModifyArrayToMarshal.value = true;
		return array3;
	}
	okToModifyArrayToMarshal.value = false;
	return arrayIn;
};
$asm02.MS.Internal.ComAutomation.ManagedObjectMarshaler.CleanupArrayToMarshal = function (vt, arrayToMarshal) {
	if ($asm02.MS.Internal.ComAutomation.VarType.Variant === vt) {
		var values = JSIL.Cast(arrayToMarshal, System.Array.Of($asm02.MS.Internal.ComAutomation.ComAutomationInteropValue));
		$asm02.MS.Internal.ComAutomation.ComAutomationNative.CleanupInteropValues(values);
	}
};
$asm02.MS.Internal.ComAutomation.ManagedObjectMarshaler.MarshalAutomationObject = function (autoObject, /* ref */ value, makeCopy) {
	if (makeCopy) {
		throw new System.Exception("unexpected");
	}
	value.value.type = $asm02.MS.Internal.ComAutomation.VarType.AutomationObject;
	value.value.pNativePtrValue = autoObject.NativeObject;
	value.value.OwnsResource = false;
};
$asm02.MS.Internal.ComAutomation.ManagedObjectMarshaler.MarshalCOMObject = function (comObject, /* ref */ value, makeCopy) {
	if (makeCopy) {
		throw new System.Exception("unexpected");
	}
	value.value.type = $asm02.MS.Internal.ComAutomation.VarType.COMObject;
	value.value.pNativePtrValue = comObject.NativeObject;
	value.value.OwnsResource = false;
};

$asm02.MS.Internal.ComAutomation.NativeObjectMarshaler.MarshalByRefInteropValue = function (/* ref */ interopValue, paramWrapService, makeCopy) {
	interopValue.value.type = (interopValue.value.type & 49151);
	try {
		var result = $asm02.MS.Internal.ComAutomation.NativeObjectMarshaler.MarshalInteropValue(/* ref */ interopValue, paramWrapService, makeCopy);
	} finally {
		interopValue.value.type = (interopValue.value.type | $asm02.MS.Internal.ComAutomation.VarType.Flag_ByRef);
	}
	return result;
};
$asm02.MS.Internal.ComAutomation.NativeObjectMarshaler.MarshalInteropValue = function (/* ref */ value, paramWrapService, makeCopy) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				var param = null;
				if (($asm02.MS.Internal.ComAutomation.VarType.Flag_Array & value.value.type) === 0) {
					switch (Number(value.value.type)) {
						case 0: 
							param = null;
							__label0__ = "IL_1EE";
							continue __step0__;
						case 1: 
							param = System.DBNull.Value;
							__label0__ = "IL_1EE";
							continue __step0__;
						case 2: 
							param = value.value.i16Value;
							__label0__ = "IL_1EE";
							continue __step0__;
						case 3: 
							param = value.value.i32Value;
							__label0__ = "IL_1EE";
							continue __step0__;
						case 4: 
							param = value.value.fltValue;
							__label0__ = "IL_1EE";
							continue __step0__;
						case 5: 
							param = value.value.dblValue;
							__label0__ = "IL_1EE";
							continue __step0__;
						case 7: 
							param = System.DateTime.FromOADate(value.value.dblValue);
							__label0__ = "IL_1EE";
							continue __step0__;
						case 8: 
							param = $asm02.MS.Internal.ComAutomation.NativeObjectMarshaler.MarshalString(/* ref */ value);
							__label0__ = "IL_1EE";
							continue __step0__;
						case 9: 
							param = $asm02.MS.Internal.ComAutomation.NativeObjectMarshaler.MarshalAutomationObject$0(/* ref */ value, paramWrapService, makeCopy);
							__label0__ = "IL_1EE";
							continue __step0__;
						case 10: 
							if (-2147352572 === value.value.errorCodeValue) {
								param = System.Type.Missing;
								__label0__ = "IL_1EE";
								continue __step0__;
							}
							break;
						case 11: 
							param = System.Convert.ToBoolean$5(value.value.boolValue);
							__label0__ = "IL_1EE";
							continue __step0__;
						case 13: 
							param = $asm02.MS.Internal.ComAutomation.NativeObjectMarshaler.MarshalCOMObject$0(/* ref */ value, paramWrapService, makeCopy);
							__label0__ = "IL_1EE";
							continue __step0__;
						case 14: 
							param = $asm02.MS.Internal.ComAutomation.NativeObjectMarshaler.MarshalDecimal(/* ref */ value);
							__label0__ = "IL_1EE";
							continue __step0__;
						case 16: 
							param = value.value.i8Value;
							__label0__ = "IL_1EE";
							continue __step0__;
						case 17: 
							param = value.value.ui8Value;
							__label0__ = "IL_1EE";
							continue __step0__;
						case 18: 
							if (value.value.ShouldBeCharacter) {
								param = System.Convert.ToChar$6(value.value.ui16Value);
								__label0__ = "IL_1EE";
								continue __step0__;
							}
							param = value.value.ui16Value;
							__label0__ = "IL_1EE";
							continue __step0__;
						case 19: 
							param = value.value.ui32Value;
							__label0__ = "IL_1EE";
							continue __step0__;
						case 20: 
							param = value.value.i64Value;
							__label0__ = "IL_1EE";
							continue __step0__;
						case 21: 
							param = value.value.ui64Value;
							__label0__ = "IL_1EE";
							continue __step0__;
					}
					throw new System.Exception(JSIL.ConcatString("unhandled type [", value.value.type, "] in ConvertInteropValueToObject"));
				}
				param = $asm02.MS.Internal.ComAutomation.NativeObjectMarshaler.MarshalArray(/* ref */ value, paramWrapService, makeCopy);
				__label0__ = "IL_1EE";
				continue __step0__;
				break;
			case "IL_1EE":
				return paramWrapService.Wrap(param);
				break __step0__;
		}
	}
};
$asm02.MS.Internal.ComAutomation.NativeObjectMarshaler.MarshalDecimal = function (/* ref */ value) {
	return JSIL.New(System.Decimal, "_ctor$8", [value.value.decLo, value.value.decMid, value.value.decHi, ((value.value.decSignScale & 32768) !== 0), (value.value.decSignScale & 255)]);
};
$asm02.MS.Internal.ComAutomation.NativeObjectMarshaler.MarshalString = function (/* ref */ value) {
	if (System.IntPtr.op_Equality(value.value.pNativePtrValue, System.IntPtr.Zero)) {
		return System.String.Empty;
	}
	return System.Runtime.InteropServices.Marshal.PtrToStringUni$0(value.value.pNativePtrValue, value.value.count);
};
$asm02.MS.Internal.ComAutomation.NativeObjectMarshaler.MarshalArray = function (/* ref */ value, paramWrapService, makeCopy) {
	var varType = (value.value.type & 57343);
	var type = null;
	if (!(($asm02.MS.Internal.ComAutomation.VarType.AutomationObject !== varType) && ($asm02.MS.Internal.ComAutomation.VarType.COMObject !== varType))) {
		type = System.Object;
	} else if ($asm02.MS.Internal.ComAutomation.VarType.Currency === varType) {
		varType = $asm02.MS.Internal.ComAutomation.VarType.Decimal;
	} else {
		type = $asm02.MS.Internal.ComAutomation.ComAutomationInterop.VarTypeToManagedType(varType, value.value.ShouldBeCharacter);
		if (type === null) {
			throw new System.Exception(JSIL.ConcatString("unhandled element type [", varType, "] in MarshalToArray"));
		}
	}
	var array = (JSIL.Array.New(type, value.value.count));
	var arrayToMarshal = $asm02.MS.Internal.ComAutomation.NativeObjectMarshaler.GetArrayToMarshal(varType, array);
	try {
		$asm02.MS.Internal.ComAutomation.ComAutomationNative.CopyNativeArrayToManagedArray(value.value.pNativePtrValue, arrayToMarshal, makeCopy);
		$asm02.MS.Internal.ComAutomation.NativeObjectMarshaler.ProcessArrayToMarshal(varType, arrayToMarshal, array, paramWrapService);
	} finally {
		$asm02.MS.Internal.ComAutomation.NativeObjectMarshaler.CleanupArrayToMarshal(varType, arrayToMarshal);
	}
	return array;
};
$asm02.MS.Internal.ComAutomation.NativeObjectMarshaler.GetArrayToMarshal = function (vt, arrayIn) {
	if ($asm02.MS.Internal.ComAutomation.VarType.Date === vt) {
		return JSIL.Array.New(System.Double, arrayIn.length);
	}
	if (!(($asm02.MS.Internal.ComAutomation.VarType.String !== vt) && ($asm02.MS.Internal.ComAutomation.VarType.AutomationObject !== vt))) {
		return JSIL.Array.New(System.IntPtr, arrayIn.length);
	}
	if (!(($asm02.MS.Internal.ComAutomation.VarType.COMObject !== vt) && ($asm02.MS.Internal.ComAutomation.VarType.Variant !== vt))) {
		return JSIL.Array.New($asm02.MS.Internal.ComAutomation.ComAutomationInteropValue, arrayIn.length);
	}
	return arrayIn;
};
$asm02.MS.Internal.ComAutomation.NativeObjectMarshaler.ProcessArrayToMarshal = function (vt, arrayToMarshal, returnArray, paramWrapService) {
	if ($asm02.MS.Internal.ComAutomation.VarType.Date === vt) {
		var array = JSIL.Cast(arrayToMarshal, System.Array.Of(System.Double));
		var array2 = JSIL.Cast(returnArray, System.Array.Of(System.DateTime));
	__loop0__: 
		for (var i = 0; i < array.length; ++i) {
			array2[i] = System.DateTime.FromOADate(array[i]).MemberwiseClone();
		}
		return;
	}
	if ($asm02.MS.Internal.ComAutomation.VarType.String === vt) {
		var array3 = JSIL.Cast(arrayToMarshal, System.Array.Of(System.IntPtr));
		var array4 = JSIL.Cast(returnArray, System.Array.Of(System.String));
	__loop1__: 
		for (var j = 0; j < array3.length; ++j) {
			array4[j] = System.Runtime.InteropServices.Marshal.PtrToStringUni$1(array3[j]);
		}
		return;
	}
	if ($asm02.MS.Internal.ComAutomation.VarType.AutomationObject === vt) {
		var array5 = JSIL.Cast(arrayToMarshal, System.Array.Of(System.IntPtr));
		var array6 = JSIL.Cast(returnArray, System.Array.Of(System.Object));
	__loop2__: 
		for (var k = 0; k < array5.length; ++k) {
			array6[k] = $asm02.MS.Internal.ComAutomation.NativeObjectMarshaler.MarshalAutomationObject$1(array5[k], paramWrapService, false);
			array5[k] = System.IntPtr.Zero;
		}
		return;
	}
	if (!(($asm02.MS.Internal.ComAutomation.VarType.COMObject !== vt) && ($asm02.MS.Internal.ComAutomation.VarType.Variant !== vt))) {
		var array7 = JSIL.Cast(arrayToMarshal, System.Array.Of($asm02.MS.Internal.ComAutomation.ComAutomationInteropValue));
		var array8 = JSIL.Cast(returnArray, System.Array.Of(System.Object));
	__loop3__: 
		for (var l = 0; l < array7.length; ++l) {
			array8[l] = $asm02.MS.Internal.ComAutomation.NativeObjectMarshaler.MarshalInteropValue(JSIL.UnmaterializedReference(), paramWrapService, false);
		}
	}
};
$asm02.MS.Internal.ComAutomation.NativeObjectMarshaler.CleanupArrayToMarshal = function (vt, arrayToMarshal) {
	if ($asm02.MS.Internal.ComAutomation.VarType.AutomationObject === vt) {
		var array = JSIL.Cast(arrayToMarshal, System.Array.Of(System.IntPtr));
	__loop0__: 
		for (var i = 0; i < array.length; ++i) {
			if (System.IntPtr.op_Inequality(System.IntPtr.Zero, array[i])) {
				$asm02.MS.Internal.XcpImports.ReleaseNativeValue(array[i], 18);
				array[i] = System.IntPtr.Zero;
			}
		}
		return;
	}
	if (!(($asm02.MS.Internal.ComAutomation.VarType.COMObject !== vt) && ($asm02.MS.Internal.ComAutomation.VarType.Variant !== vt))) {
		var values = JSIL.Cast(arrayToMarshal, System.Array.Of($asm02.MS.Internal.ComAutomation.ComAutomationInteropValue));
		$asm02.MS.Internal.ComAutomation.ComAutomationNative.CleanupInteropValues(values);
	}
};
$asm02.MS.Internal.ComAutomation.NativeObjectMarshaler.MarshalAutomationObject$0 = function (/* ref */ value, paramWrapService, makeCopy) {
	var flag = (!makeCopy && 
		value.value.OwnsResource);
	var result = $asm02.MS.Internal.ComAutomation.NativeObjectMarshaler.MarshalAutomationObject$1(value.value.pNativePtrValue, paramWrapService, !flag);
	if (flag) {
		value.value.pNativePtrValue = System.IntPtr.Zero;
		value.value.type = $asm02.MS.Internal.ComAutomation.VarType.Empty;
	}
	return result;
};
$asm02.MS.Internal.ComAutomation.NativeObjectMarshaler.MarshalAutomationObject$1 = function (value, paramWrapService, makeCopy) {
	if (System.IntPtr.op_Equality(System.IntPtr.Zero, value)) {
		return null;
	}
	if (makeCopy) {
		throw new System.Exception("unexpected");
	}
	return paramWrapService.Wrap(new $asm02.MS.Internal.ComAutomation.ComAutomationObject(value, paramWrapService));
};
$asm02.MS.Internal.ComAutomation.NativeObjectMarshaler.MarshalCOMObject$0 = function (/* ref */ value, paramWrapService, makeCopy) {
	var flag = (!makeCopy && 
		value.value.OwnsResource);
	var result = $asm02.MS.Internal.ComAutomation.NativeObjectMarshaler.MarshalCOMObject$1(value.value.pNativePtrValue, paramWrapService, !flag);
	if (flag) {
		value.value.pNativePtrValue = System.IntPtr.Zero;
		value.value.type = $asm02.MS.Internal.ComAutomation.VarType.Empty;
	}
	return result;
};
$asm02.MS.Internal.ComAutomation.NativeObjectMarshaler.MarshalCOMObject$1 = function (value, paramWrapService, makeCopy) {
	if (System.IntPtr.op_Equality(System.IntPtr.Zero, value)) {
		return null;
	}
	if (makeCopy) {
		throw new System.Exception("unexpected");
	}
	return paramWrapService.Wrap(new $asm02.MS.Internal.ComAutomation.InternalCOMObject(value));
};
JSIL.OverloadedMethod($asm02.MS.Internal.ComAutomation.NativeObjectMarshaler, "MarshalAutomationObject", [
		["MarshalAutomationObject$0", [JSIL.Reference.Of($asm02.MS.Internal.ComAutomation.ComAutomationInteropValue), $asm02.MS.Internal.ComAutomation.ComAutomationParamWrapService, System.Boolean]], 
		["MarshalAutomationObject$1", [System.IntPtr, $asm02.MS.Internal.ComAutomation.ComAutomationParamWrapService, System.Boolean]]
	]);
JSIL.OverloadedMethod($asm02.MS.Internal.ComAutomation.NativeObjectMarshaler, "MarshalCOMObject", [
		["MarshalCOMObject$0", [JSIL.Reference.Of($asm02.MS.Internal.ComAutomation.ComAutomationInteropValue), $asm02.MS.Internal.ComAutomation.ComAutomationParamWrapService, System.Boolean]], 
		["MarshalCOMObject$1", [System.IntPtr, $asm02.MS.Internal.ComAutomation.ComAutomationParamWrapService, System.Boolean]]
	]);

$asm02.MS.Internal.ComAutomation.ComAutomationParam.prototype.get_Value = function () {
	return this.Value$value;
};
$asm02.MS.Internal.ComAutomation.ComAutomationParam.prototype.set_Value = function (value) {
	this.Value$value = value;
};
$asm02.MS.Internal.ComAutomation.ComAutomationParam.prototype.get_ByRef = function () {
	return this.ByRef$value;
};
$asm02.MS.Internal.ComAutomation.ComAutomationParam.prototype.set_ByRef = function (value) {
	this.ByRef$value = value;
};
$asm02.MS.Internal.ComAutomation.ComAutomationParam.prototype._ctor = function (value, byRef) {
	System.Object.prototype._ctor.call(this);
	this.Value = value;
	this.ByRef = byRef;
};
JSIL.MakeProperty($asm02.MS.Internal.ComAutomation.ComAutomationParam.prototype, "Value", 
	$asm02.MS.Internal.ComAutomation.ComAutomationParam.prototype.get_Value, $asm02.MS.Internal.ComAutomation.ComAutomationParam.prototype.set_Value);
JSIL.MakeProperty($asm02.MS.Internal.ComAutomation.ComAutomationParam.prototype, "ByRef", 
	$asm02.MS.Internal.ComAutomation.ComAutomationParam.prototype.get_ByRef, $asm02.MS.Internal.ComAutomation.ComAutomationParam.prototype.set_ByRef);
$asm02.MS.Internal.ComAutomation.ComAutomationParam.prototype.Value$value = null;
$asm02.MS.Internal.ComAutomation.ComAutomationParam.prototype.ByRef$value = false;

System.Windows.Controls.ItemCollection.prototype._ctor = function () {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Object).prototype._ctor$1.call(this, 200);
};
System.Windows.Controls.ItemCollection.prototype.get_ManagedPeerCollection = function () {
	if (this._treeItems === null) {
		this._treeItems = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.Windows.UIElement, System.Object), "_ctor$0", []);
	}
	return this._treeItems;
};
System.Windows.Controls.ItemCollection.prototype.AddInternal = function (value) {
	this.AddImpl(value);
};
System.Windows.Controls.ItemCollection.prototype.AddImpl = function (value) {
	this.CheckReentrancy();
	if (this.ItemsSourceActive()) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("ItemCollection_NotSupportedReadOnlyCollection")]);
	}
	var num = System.Windows.PresentationFrameworkCollection$b1.Of(System.Object).prototype.AddImpl.call(this, $asm02.MS.Internal.ManagedObjectReference.ConditionalWrap(value));
	if (JSIL.TryCast(value, System.Windows.UIElement) !== null) {
		this.ManagedPeerCollection.set_Item(JSIL.TryCast(value, System.Windows.UIElement), null);
	}
	this.NotifyCollectionChanged(JSIL.New(System.Collections.Specialized.NotifyCollectionChangedEventArgs, "_ctor$1", [System.Collections.Specialized.NotifyCollectionChangedAction.Add, value, num]));
	return num;
};
System.Windows.Controls.ItemCollection.prototype.IndexOfInternal = function (value) {
	return this.IndexOfImpl(value);
};
System.Windows.Controls.ItemCollection.prototype.IndexOfImpl = function (value) {
	if (this.ItemsSourceActive()) {
		if (this._itemsSourceAsList !== null) {
			return this._itemsSourceAsList.IList_IndexOf(value);
		}
		return this.GetIndexOf(value);
	} else {
		if (!((JSIL.TryCast(value, $asm02.MS.Internal.IManagedPeerBase) === null) && value)) {
			return System.Windows.PresentationFrameworkCollection$b1.Of(System.Object).prototype.IndexOfImpl.call(this, value);
		}
		return this.IndexOfWrapped(value);
	}
};
System.Windows.Controls.ItemCollection.prototype.RemoveInternal = function (value) {
	return this.RemoveImpl(value);
};
System.Windows.Controls.ItemCollection.prototype.RemoveImpl = function (value) {
	this.CheckReentrancy();
	if (this.ItemsSourceActive()) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("ItemCollection_NotSupportedReadOnlyCollection")]);
	}
	var num = this.IndexOfImpl(value);
	if (num !== -1) {
		System.Windows.PresentationFrameworkCollection$b1.Of(System.Object).prototype.RemoveAt.call(this, num);
	}
	++this._version;
	return true;
};
System.Windows.Controls.ItemCollection.prototype.RemoveAtImpl = function (index) {
	this.CheckReentrancy();
	if (this.ItemsSourceActive()) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("ItemCollection_NotSupportedReadOnlyCollection")]);
	}
	var obj = System.Windows.PresentationFrameworkCollection$b1.Of(System.Object).prototype.get_Item.call(this, index);
	if (JSIL.TryCast(obj, System.Windows.UIElement) !== null) {
		this.ManagedPeerCollection.Remove(JSIL.TryCast(obj, System.Windows.UIElement));
	}
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Object).prototype.RemoveAtImpl.call(this, index);
	var e = JSIL.New(System.Collections.Specialized.NotifyCollectionChangedEventArgs, "_ctor$1", [System.Collections.Specialized.NotifyCollectionChangedAction.Remove, obj, index]);
	if (!this._inItemChanging) {
		this.NotifyCollectionChanged(e);
		return;
	}
	this.NotifyExtraEventCollectionChanged(e);
};
System.Windows.Controls.ItemCollection.prototype.ContainsInternal = function (value) {
	return this.ContainsImpl(value);
};
System.Windows.Controls.ItemCollection.prototype.ContainsImpl = function (value) {
	return (this.IndexOfImpl(value) !== -1);
};
System.Windows.Controls.ItemCollection.prototype.IndexOfWrapped = function (value) {
	var count = System.Windows.PresentationFrameworkCollection$b1.Of(System.Object).prototype.get_Count.call(this);
__loop0__: 
	for (var i = 0; i < count; ++i) {
		if (this.ManagedObjectReferenceIsEquals(JSIL.New($asm02.MS.Internal.ManagedObjectReference, "_ctor$1", [System.Windows.PresentationFrameworkCollection$b1.Of(System.Object).prototype.get_Item.call(this, i)]), JSIL.New($asm02.MS.Internal.ManagedObjectReference, "_ctor$1", [value]))) {
			return i;
		}
	}
	return -1;
};
System.Windows.Controls.ItemCollection.prototype.ManagedObjectReferenceIsEquals = function (ref1, ref2) {
	if (ref1 === ref2) {
		return true;
	}
	if (!((ref1 !== null) && ref2)) {
		return false;
	}
	if ((JSIL.GetType(ref1)) !== (JSIL.GetType(ref2))) {
		return false;
	}
	if (!(!JSIL.GetType(ref1.Target).IsValueType && ((JSIL.GetType(ref1.Target)) !== System.String))) {
		return System.Object.Equals(ref1.Target, ref2.Target);
	}
	return System.Object.ReferenceEquals(ref1.Target, ref2.Target);
};
System.Windows.Controls.ItemCollection.prototype.InsertInternal = function (index, value) {
	this.InsertImpl(index, value);
};
System.Windows.Controls.ItemCollection.prototype.InsertImpl = function (index, value) {
	this.CheckReentrancy();
	if (this.ItemsSourceActive()) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("ItemCollection_NotSupportedReadOnlyCollection")]);
	}
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Object).prototype.InsertImpl.call(this, index, $asm02.MS.Internal.ManagedObjectReference.ConditionalWrap(value));
	if (JSIL.TryCast(value, System.Windows.UIElement) !== null) {
		this.ManagedPeerCollection.set_Item(JSIL.TryCast(value, System.Windows.UIElement), null);
	}
	var e = JSIL.New(System.Collections.Specialized.NotifyCollectionChangedEventArgs, "_ctor$1", [System.Collections.Specialized.NotifyCollectionChangedAction.Add, value, index]);
	if (!this._inItemChanging) {
		this.NotifyCollectionChanged(e);
		return;
	}
	this.NotifyExtraEventCollectionChanged(e);
};
System.Windows.Controls.ItemCollection.prototype.ClearImpl = function () {
	this.CheckReentrancy();
	if (this.ItemsSourceActive()) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("ItemCollection_NotSupportedReadOnlyCollection")]);
	}
	if (this._treeItems !== null) {
		this._treeItems.Clear();
	}
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Object).prototype.ClearImpl.call(this);
	this.NotifyCollectionChanged(JSIL.New(System.Collections.Specialized.NotifyCollectionChangedEventArgs, "_ctor$0", [System.Collections.Specialized.NotifyCollectionChangedAction.Reset]));
};
System.Windows.Controls.ItemCollection.prototype.get_IsFixedSizeImpl = function () {
	return (this.ItemsSourceActive() || System.Windows.PresentationFrameworkCollection$b1.Of(System.Object).prototype.get_IsFixedSizeImpl.call(this));
};
System.Windows.Controls.ItemCollection.prototype.get_IsReadOnlyImpl = function () {
	return (this.ItemsSourceActive() || System.Windows.PresentationFrameworkCollection$b1.Of(System.Object).prototype.get_IsReadOnlyImpl.call(this));
};
System.Windows.Controls.ItemCollection.prototype.GetItemImpl = function (index) {
	if (!this.ItemsSourceActive()) {
		return System.Windows.PresentationFrameworkCollection$b1.Of(System.Object).prototype.GetItemImpl.call(this, index);
	}
	if (this._itemsSourceAsList !== null) {
		return this._itemsSourceAsList.IList_get_Item(index);
	}
	return this.GetItem(index);
};
System.Windows.Controls.ItemCollection.prototype.SetItemImpl = function (index, value) {
	this.CheckReentrancy();
	if (this.ItemsSourceActive()) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("ItemCollection_NotSupportedReadOnlyCollection")]);
	}
	var oldItem = System.Windows.PresentationFrameworkCollection$b1.Of(System.Object).prototype.get_Item.call(this, index);
	this._inItemChanging = true;
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Object).prototype.RemoveAt.call(this, index);
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Object).prototype.Insert.call(this, index, value);
	this._inItemChanging = false;
	this.NotifyCollectionChanged(JSIL.New(System.Collections.Specialized.NotifyCollectionChangedEventArgs, "_ctor$2", [System.Collections.Specialized.NotifyCollectionChangedAction.Replace, value, oldItem, index]));
};
System.Windows.Controls.ItemCollection.prototype.GetValueInternal = function (dp) {
	if ((dp !== System.Windows.PresentationFrameworkCollection$b1.Of(System.Object).CountProperty) || !this.ItemsSourceActive()) {
		return System.Windows.DependencyObject.prototype.GetValueInternal.call(this, dp);
	}
	$asm02.MS.Internal.XcpImports.CheckThread();
	if (this._itemsSourceAsList !== null) {
		return this._itemsSourceAsList.ICollection_Count;
	}
	return this.GetItemCount();
};
System.Windows.Controls.ItemCollection.prototype.GetTypedEnumeratorImpl = function () {
	if (this.ItemsSourceActive()) {
		return this.GetTypedEnumerator();
	}
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Object).prototype.GetTypedEnumeratorImpl.call(this);
};
System.Windows.Controls.ItemCollection.prototype.GetEnumeratorImpl = function () {
	if (!this.ItemsSourceActive()) {
		return System.Windows.PresentationFrameworkCollection$b1.Of(System.Object).prototype.GetEnumeratorImpl.call(this);
	}
	if (this._itemsSourceAsList !== null) {
		return this._itemsSourceAsList.IEnumerable_GetEnumerator();
	}
	return this._itemsSource.IEnumerable_GetEnumerator();
};
System.Windows.Controls.ItemCollection.prototype.GetTypedEnumerator = function () {
	if (this._miGetGenericEnumerator === null) {
		this._miGetGenericEnumerator = System.Windows.Controls.ItemCollection.GetMethod$4("GetGenericEnumerator", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic));
		this._miGetGenericEnumerator = this._miGetGenericEnumerator.MakeGenericMethod(JSIL.Array.New(System.Type, [(this._itemsType === null) ? System.Object : this._itemsType]));
	}
	return JSIL.Cast(this._miGetGenericEnumerator.Invoke$1(this, null), System.Collections.Generic.IEnumerator$b1.Of(System.Object));
};
System.Windows.Controls.ItemCollection.prototype.GetGenericEnumerator$b1 = JSIL.GenericMethod(
	["T"], 
	function (T) {
		return new ($asm02.System.Windows.Controls.ItemCollection.TypedEnumerable$b1.Of(T)) (JSIL.TryCast(this._itemsSource, System.Collections.Generic.IList$b1.Of(T)), this._itemsSourceAsList).GetEnumerator();
	}
);
System.Windows.Controls.ItemCollection.prototype.GetIndexOf = function (item) {
	if (this._miGetGenericIndexOf === null) {
		this._miGetGenericIndexOf = System.Windows.Controls.ItemCollection.GetMethod$4("GetGenericIndexOf", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic));
		this._miGetGenericIndexOf = this._miGetGenericIndexOf.MakeGenericMethod(JSIL.Array.New(System.Type, [this._itemsType]));
	}
	return JSIL.Cast(this._miGetGenericIndexOf.Invoke$1(this, [item]), System.Int32);
};
System.Windows.Controls.ItemCollection.prototype.GetGenericIndexOf$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, item) {
		return JSIL.TryCast(this._itemsSource, System.Collections.Generic.IList$b1.Of(T)).IList$b1_IndexOf(item);
	}
);
System.Windows.Controls.ItemCollection.prototype.GetItem = function (index) {
	if (this._miGetGenericItem === null) {
		this._miGetGenericItem = System.Windows.Controls.ItemCollection.GetMethod$4("GetGenericItem", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic));
		this._miGetGenericItem = this._miGetGenericItem.MakeGenericMethod(JSIL.Array.New(System.Type, [this._itemsType]));
	}
	return this._miGetGenericItem.Invoke$1(this, [index]);
};
System.Windows.Controls.ItemCollection.prototype.GetGenericItem$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, index) {
		return JSIL.TryCast(this._itemsSource, System.Collections.Generic.IList$b1.Of(T)).IList$b1_get_Item(index);
	}
);
System.Windows.Controls.ItemCollection.prototype.GetItemCount = function () {
	if (this._miGetGenericItemCount === null) {
		this._miGetGenericItemCount = System.Windows.Controls.ItemCollection.GetMethod$4("GetGenericItemCount", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic));
		this._miGetGenericItemCount = this._miGetGenericItemCount.MakeGenericMethod(JSIL.Array.New(System.Type, [this._itemsType]));
	}
	return JSIL.Cast(this._miGetGenericItemCount.Invoke$1(this, null), System.Int32);
};
System.Windows.Controls.ItemCollection.prototype.GetGenericItemCount$b1 = JSIL.GenericMethod(
	["T"], 
	function (T) {
		return JSIL.TryCast(this._itemsSource, System.Collections.Generic.IList$b1.Of(T)).ICollection$b1_Count;
	}
);
System.Windows.Controls.ItemCollection.prototype.UpdateItemsSourceList = function (newItemsSource) {
	if (this._collectionChangedListener !== null) {
		this._collectionChangedListener.Disconnect();
		this._collectionChangedListener = null;
	}
	this._miGetGenericEnumerator = null;
	this._miGetGenericIndexOf = null;
	this._miGetGenericItem = null;
	this._miGetGenericItemCount = null;
	if (newItemsSource === null) {
		this._itemsSourceAsList = null;
		this._itemsSource = null;
		this._itemsType = null;
	} else {
		var list = JSIL.TryCast(newItemsSource, System.Collections.IList);
		var listener = null;
		if (list === null) {
			this._itemsType = $asm02.MS.Internal.TypeHelper.GetListItemType(JSIL.GetType(newItemsSource));
			if (this._itemsType === null) {
				var enumerableCollectionView = new $asm02.System.Windows.Controls.ItemCollection.EnumerableCollectionView(newItemsSource, this);
				this._itemsSourceAsList = enumerableCollectionView;
				listener = enumerableCollectionView;
			} else {
				this._itemsSource = newItemsSource;
				listener = this;
			}
		} else {
			this._itemsSourceAsList = list;
			listener = this;
		}
		this._collectionChangedListener = $asm02.System.Windows.Controls.WeakCollectionChangedListener.CreateIfNecessary(newItemsSource, listener);
	}
	this.NotifyCountChanged();
	this.NotifyCollectionChanged(JSIL.New(System.Collections.Specialized.NotifyCollectionChangedEventArgs, "_ctor$0", [System.Collections.Specialized.NotifyCollectionChangedAction.Reset]));
};
System.Windows.Controls.ItemCollection.prototype.ItemsSourceActive = function () {
	return (this._itemsSourceAsList || (this._itemsType !== null));
};
System.Windows.Controls.ItemCollection.prototype.CheckReentrancy = function () {
	if (this._busy) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("ItemCollection_CannotChangeItemCollectionDuringOnItemsChanged")]);
	}
};
System.Windows.Controls.ItemCollection.prototype.NotifyCollectionChanged = function (e) {
	this._busy = true;
	try {
		if (this.CollectionChanged !== null) {
			this.CollectionChanged(this, e);
		}
	} finally {
		this._busy = false;
	}
};
System.Windows.Controls.ItemCollection.prototype.NotifyExtraEventCollectionChanged = function (e) {
	this._busy = true;
	try {
		if (this.ExtraEventCollectionChanged !== null) {
			this.ExtraEventCollectionChanged(this, e);
		}
	} finally {
		this._busy = false;
	}
};
System.Windows.Controls.ItemCollection.prototype.add_CollectionChanged = function (value) {
	this.CollectionChanged = System.Delegate.Combine(this.CollectionChanged, value);
};
System.Windows.Controls.ItemCollection.prototype.remove_CollectionChanged = function (value) {
	this.CollectionChanged = System.Delegate.Remove(this.CollectionChanged, value);
};
System.Windows.Controls.ItemCollection.prototype.add_ExtraEventCollectionChanged = function (value) {
	this.ExtraEventCollectionChanged = System.Delegate.Combine(this.ExtraEventCollectionChanged, value);
};
System.Windows.Controls.ItemCollection.prototype.remove_ExtraEventCollectionChanged = function (value) {
	this.ExtraEventCollectionChanged = System.Delegate.Remove(this.ExtraEventCollectionChanged, value);
};
System.Windows.Controls.ItemCollection.prototype.INotifyCollectionChanged_add_CollectionChanged = function (value) {
	this.CollectionChanged = System.Delegate.Combine(this.CollectionChanged, value);
};
System.Windows.Controls.ItemCollection.prototype.INotifyCollectionChanged_remove_CollectionChanged = function (value) {
	this.CollectionChanged = System.Delegate.Remove(this.CollectionChanged, value);
};
System.Windows.Controls.ItemCollection.prototype.ICollectionChangedListener_OnCollectionChanged = function (sender, e) {
	if (e.Action !== System.Collections.Specialized.NotifyCollectionChangedAction.Replace) {
		this.NotifyCountChanged();
	}
	this.NotifyCollectionChanged(e);
};
System.Windows.Controls.ItemCollection.prototype.NotifyCollectionReady = function () {
	this._busy = true;
	try {
	__loop0__: 
		for (var i = 0; i < System.Windows.PresentationFrameworkCollection$b1.Of(System.Object).prototype.get_Count.call(this); ++i) {
			var obj = System.Windows.PresentationFrameworkCollection$b1.Of(System.Object).prototype.get_Item.call(this, i);
			if (JSIL.TryCast(obj, System.Windows.UIElement) !== null) {
				this.ManagedPeerCollection.set_Item(JSIL.TryCast(obj, System.Windows.UIElement), null);
			}
			this.NotifyCollectionChanged(JSIL.New(System.Collections.Specialized.NotifyCollectionChangedEventArgs, "_ctor$1", [System.Collections.Specialized.NotifyCollectionChangedAction.Add, obj, i]));
		}
	} finally {
		this._busy = false;
	}
};
System.Windows.Controls.ItemCollection.prototype.NotifyCountChanged = function () {
	this.OnPropertyChanged(System.Windows.PresentationFrameworkCollection$b1.Of(System.Object).CountProperty);
};
System.Windows.Controls.ItemCollection.prototype.GetItemImplSkipMethodPack = function (index) {
	return this.GetItemImpl(index);
};
System.Windows.Controls.ItemCollection.prototype.SetItemImplSkipMethodPack = function (index, value) {
	this.SetItemImpl(index, value);
};
JSIL.MakeProperty(System.Windows.Controls.ItemCollection.prototype, "ManagedPeerCollection", 
	System.Windows.Controls.ItemCollection.prototype.get_ManagedPeerCollection, null);
JSIL.MakeProperty(System.Windows.Controls.ItemCollection.prototype, "IsFixedSizeImpl", 
	System.Windows.Controls.ItemCollection.prototype.get_IsFixedSizeImpl, null);
JSIL.MakeProperty(System.Windows.Controls.ItemCollection.prototype, "IsReadOnlyImpl", 
	System.Windows.Controls.ItemCollection.prototype.get_IsReadOnlyImpl, null);
System.Windows.Controls.ItemCollection.prototype._itemsType = null;
System.Windows.Controls.ItemCollection.prototype._itemsSource = null;
System.Windows.Controls.ItemCollection.prototype._miGetGenericItemCount = null;
System.Windows.Controls.ItemCollection.prototype._miGetGenericEnumerator = null;
System.Windows.Controls.ItemCollection.prototype._miGetGenericIndexOf = null;
System.Windows.Controls.ItemCollection.prototype._miGetGenericItem = null;
System.Windows.Controls.ItemCollection.prototype._itemsSourceAsList = null;
System.Windows.Controls.ItemCollection.prototype._collectionChangedListener = null;
System.Windows.Controls.ItemCollection.prototype._busy = false;
System.Windows.Controls.ItemCollection.prototype._inItemChanging = false;
System.Windows.Controls.ItemCollection.prototype._treeItems = null;
System.Windows.Controls.ItemCollection.prototype.CollectionChanged = null;
System.Windows.Controls.ItemCollection.prototype.ExtraEventCollectionChanged = null;

$asm02.System.Windows.Controls.ItemCollection.EnumerableCollectionView.prototype._ctor = function (sourceCollection, collectionOwner) {
	System.Collections.ObjectModel.Collection$b1.Of(System.Object).prototype._ctor$0.call(this);
	this._sourceCollection = sourceCollection;
	this._collectionOwner = collectionOwner;
	this.InitializeSnapshot();
};
$asm02.System.Windows.Controls.ItemCollection.EnumerableCollectionView.prototype.InitializeSnapshot = function () {
	System.Collections.ObjectModel.Collection$b1.Of(System.Object).prototype.Clear.call(this);
	var enumerator = this._sourceCollection.IEnumerable_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator_Current;
			System.Collections.ObjectModel.Collection$b1.Of(System.Object).prototype.Add.call(this, current);
		}
	} finally {
		var disposable = JSIL.TryCast(enumerator, System.IDisposable);
		if (disposable !== null) {
			disposable.IDisposable_Dispose();
		}
	}
};
$asm02.System.Windows.Controls.ItemCollection.EnumerableCollectionView.prototype.HandleCollectionChanged = function (e) {
	switch (Number(e.Action)) {
		case 0: 
			if (e.NewStartingIndex === System.Collections.ObjectModel.Collection$b1.Of(System.Object).prototype.get_Count.call(this)) {
				System.Collections.ObjectModel.Collection$b1.Of(System.Object).prototype.Add.call(this, e.NewItems.IList_get_Item(0));
				return;
			}
			System.Collections.ObjectModel.Collection$b1.Of(System.Object).prototype.Insert.call(this, e.NewStartingIndex, e.NewItems.IList_get_Item(0));
			return;
		case 1: 
			System.Collections.ObjectModel.Collection$b1.Of(System.Object).prototype.RemoveAt.call(this, e.OldStartingIndex);
			return;
		case 2: 
			System.Collections.ObjectModel.Collection$b1.Of(System.Object).prototype.set_Item.call(this, e.NewStartingIndex, e.NewItems.IList_get_Item(0));
			return;
		case 3: 
			break;
		case 4: 
			this.InitializeSnapshot();
			break;
		default: 
			return;
	}
};
$asm02.System.Windows.Controls.ItemCollection.EnumerableCollectionView.prototype.ICollectionChangedListener_OnCollectionChanged = function (sender, e) {
	if (!(!((e.NewItems !== null) && 
				(e.NewItems.ICollection_Count !== 1)) && ((e.OldItems === null) || 
				(e.OldItems.ICollection_Count === 1)))) {
		throw JSIL.New(System.NotSupportedException, "_ctor$1", [""]);
	}
	this.HandleCollectionChanged(e);
	this._collectionOwner.ICollectionChangedListener_OnCollectionChanged(this, e);
};
$asm02.System.Windows.Controls.ItemCollection.EnumerableCollectionView.prototype._sourceCollection = null;
$asm02.System.Windows.Controls.ItemCollection.EnumerableCollectionView.prototype._collectionOwner = null;

$asm02.System.Windows.Controls.ItemCollection.TypedEnumerable$b1.prototype._ctor = function (listT, list) {
	System.Object.prototype._ctor.call(this);
	this._listT = listT;
	this._list = list;
};
$asm02.System.Windows.Controls.ItemCollection.TypedEnumerable$b1.prototype.GetEnumerator = function () {
	var list = JSIL.TryCast(this._list, System.Collections.Generic.IList$b1.Of(System.Object));
	if (list !== null) {
		return list.IEnumerable$b1_GetEnumerator();
	}
	list = JSIL.TryCast(this._listT, System.Collections.Generic.IList$b1.Of(System.Object));
	if (list !== null) {
		return list.IEnumerable$b1_GetEnumerator();
	}
	return this.GetEnumeratorInternal();
};
$asm02.System.Windows.Controls.ItemCollection.TypedEnumerable$b1.prototype.IEnumerable_GetEnumerator = function () {
	return this.GetEnumeratorInternal();
};
$asm02.System.Windows.Controls.ItemCollection.TypedEnumerable$b1.prototype.GetEnumeratorInternal = function () {
	var $lGetEnumeratorInternal$gd__ = new ($asm02.System.Windows.Controls.ItemCollection.TypedEnumerable$b1.$lGetEnumeratorInternal$gd__0.Of(this.T)) (0);
	$lGetEnumeratorInternal$gd__.$this = this;
	return $lGetEnumeratorInternal$gd__;
};
$asm02.System.Windows.Controls.ItemCollection.TypedEnumerable$b1.prototype._listT = null;
$asm02.System.Windows.Controls.ItemCollection.TypedEnumerable$b1.prototype._list = null;

$asm02.System.Windows.Controls.ItemCollection.TypedEnumerable$b1.$lGetEnumeratorInternal$gd__0.prototype.IEnumerator_MoveNext = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				try {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								switch (this.$state) {
									case 0: 
										this.$state = -1;
										if (this.$this._list !== null) {
											var arg_4D_1 = this.$this._list;
										} else {
											arg_4D_1 = this.$this._listT;
										}
										this.list = arg_4D_1;
										this.$wrap3 = this.list.IEnumerable_GetEnumerator();
										this.$state = 1;
										break;
									case 1: 
										__label1__ = "IL_AE";
										continue __step1__;
									case 2: 
										this.$state = 1;
										break;
									default: 
										__label1__ = "IL_AE";
										continue __step1__;
								}
								if (this.$wrap3.IEnumerator_MoveNext()) {
									this.item = this.$wrap3.IEnumerator_Current;
									this.$current = this.item;
									this.$state = 2;
									var result = true;
									return result;
								}
								this.$l$gm__Finally5();
								__label1__ = "IL_AE";
								continue __step1__;
								break;
							case "IL_AE":
								result = false;
								break __step1__;
						}
					}
				} catch ($exception) {
					this.IDisposable_Dispose();
					throw $exception;
				}
				return result;
				break __step0__;
		}
	}
};
$asm02.System.Windows.Controls.ItemCollection.TypedEnumerable$b1.$lGetEnumeratorInternal$gd__0.prototype.IEnumerator$b1_get_Current = function () {
	return this.$current;
};
$asm02.System.Windows.Controls.ItemCollection.TypedEnumerable$b1.$lGetEnumeratorInternal$gd__0.prototype.IEnumerator_Reset = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm02.System.Windows.Controls.ItemCollection.TypedEnumerable$b1.$lGetEnumeratorInternal$gd__0.prototype.IDisposable_Dispose = function () {
	switch (this.$state) {
		case 1: 
		case 2: 
			try {
			} finally {
				this.$l$gm__Finally5();
			}
			return;
		default: 
			return;
	}
};
$asm02.System.Windows.Controls.ItemCollection.TypedEnumerable$b1.$lGetEnumeratorInternal$gd__0.prototype.IEnumerator_get_Current = function () {
	return this.$current;
};
$asm02.System.Windows.Controls.ItemCollection.TypedEnumerable$b1.$lGetEnumeratorInternal$gd__0.prototype._ctor = function ($l$g1__state) {
	System.Object.prototype._ctor.call(this);
	this.$state = $l$g1__state;
};
$asm02.System.Windows.Controls.ItemCollection.TypedEnumerable$b1.$lGetEnumeratorInternal$gd__0.prototype.$l$gm__Finally5 = function () {
	this.$state = -1;
	this.$wrap4 = JSIL.TryCast(this.$wrap3, System.IDisposable);
	if (this.$wrap4 !== null) {
		this.$wrap4.IDisposable_Dispose();
	}
};
JSIL.MakeProperty($asm02.System.Windows.Controls.ItemCollection.TypedEnumerable$b1.$lGetEnumeratorInternal$gd__0.prototype, "IEnumerator$b1_Current", 
	$asm02.System.Windows.Controls.ItemCollection.TypedEnumerable$b1.$lGetEnumeratorInternal$gd__0.prototype.IEnumerator$b1_get_Current, null);
JSIL.MakeProperty($asm02.System.Windows.Controls.ItemCollection.TypedEnumerable$b1.$lGetEnumeratorInternal$gd__0.prototype, "IEnumerator_Current", 
	$asm02.System.Windows.Controls.ItemCollection.TypedEnumerable$b1.$lGetEnumeratorInternal$gd__0.prototype.IEnumerator_get_Current, null);
$asm02.System.Windows.Controls.ItemCollection.TypedEnumerable$b1.$lGetEnumeratorInternal$gd__0.prototype.$current = null;
$asm02.System.Windows.Controls.ItemCollection.TypedEnumerable$b1.$lGetEnumeratorInternal$gd__0.prototype.$state = 0;
$asm02.System.Windows.Controls.ItemCollection.TypedEnumerable$b1.$lGetEnumeratorInternal$gd__0.prototype.$this = null;
$asm02.System.Windows.Controls.ItemCollection.TypedEnumerable$b1.$lGetEnumeratorInternal$gd__0.prototype.list = null;
$asm02.System.Windows.Controls.ItemCollection.TypedEnumerable$b1.$lGetEnumeratorInternal$gd__0.prototype.item = null;
$asm02.System.Windows.Controls.ItemCollection.TypedEnumerable$b1.$lGetEnumeratorInternal$gd__0.prototype.$wrap3 = null;
$asm02.System.Windows.Controls.ItemCollection.TypedEnumerable$b1.$lGetEnumeratorInternal$gd__0.prototype.$wrap4 = null;

$asm02.MS.Internal.Trace.WriteLine = function (sLine) {
	System.Diagnostics.Debug.WriteLine$0(sLine);
};
$asm02.MS.Internal.Trace.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};

$asm02.MS.Internal.TypeHelper.GetListItemType = function (listType) {
	var type = $asm02.MS.Internal.TypeHelper.FindGenericType(System.Collections.Generic.IList$b1, listType);
	if (type !== null) {
		return type.GetGenericArguments()[0];
	}
	return null;
};
$asm02.MS.Internal.TypeHelper.FindGenericType = function (definition, type) {
__loop0__: 
	for (; (type !== null) && (type !== System.Object); type = type.BaseType) {
		if (!(!type.IsGenericType || (type.GetGenericTypeDefinition() !== definition))) {
			return type;
		}
		if (definition.IsInterface) {
			var interfaces = type.GetInterfaces();
		__loop1__: 
			for (var i = 0; i < interfaces.length; ++i) {
				var type3 = $asm02.MS.Internal.TypeHelper.FindGenericType(definition, interfaces[i]);
				if (type3 !== null) {
					return type3;
				}
			}
		}
	}
	return null;
};

$asm02.MS.Internal.NavigationHelper.prototype._ctor = function (navigationStart, targetName, navigateUri) {
	System.Object.prototype._ctor.call(this);
	this._navigationStart = navigationStart;
	this._targetName = targetName;
	this._navigateUri = navigateUri;
};
$asm02.MS.Internal.NavigationHelper.prototype.get_NavigationStart = function () {
	return this._navigationStart;
};
$asm02.MS.Internal.NavigationHelper.prototype.get_NavigateUri = function () {
	return this._navigateUri;
};
$asm02.MS.Internal.NavigationHelper.prototype.get_TargetName = function () {
	return this._targetName;
};
$asm02.MS.Internal.NavigationHelper.prototype.GetAbsoluteUri = function () {
	var uri = this.NavigateUri;
	if (!uri.IsAbsoluteUri) {
		var originalString = uri.OriginalString;
		if (!(System.String.IsNullOrEmpty(originalString) || ((originalString[0]) === "/"))) {
			throw JSIL.New(System.NotSupportedException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("HyperlinkButton_GetAbsoluteUri_PageRelativeUri")]);
		}
		if (System.Windows.Application.Current === null) {
			throw JSIL.New(System.NotSupportedException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("HyperlinkButton_GetAbsoluteUri_NoApplication")]);
		}
		uri = JSIL.New(System.Uri, "_ctor$3", [System.Windows.Application.Current.Host.Source, uri]);
	}
	return uri;
};
$asm02.MS.Internal.NavigationHelper.prototype.IsUriValidForExternalNav = function () {
	if (!this.NavigateUri.IsAbsoluteUri) {
		var originalString = this.NavigateUri.OriginalString;
		if (!(System.String.IsNullOrEmpty(originalString) || ((originalString[0]) === "/"))) {
			return false;
		}
		if (System.Windows.Application.Current === null) {
			return false;
		}
	}
	return true;
};
$asm02.MS.Internal.NavigationHelper.prototype.IsExternalTarget = function () {
	return (System.String.Equals$0(this.TargetName, "_blank") || 
		System.String.Equals$0(this.TargetName, "_media") || 
		System.String.Equals$0(this.TargetName, "_search") || 
		System.String.Equals$0(this.TargetName, "_parent") || 
		System.String.Equals$0(this.TargetName, "_self") || System.String.Equals$0(this.TargetName, "_top"));
};
$asm02.MS.Internal.NavigationHelper.prototype.TryInternalNavigate = function () {
	var dependencyObject = this.NavigationStart;
	var dependencyObject2 = null;
	var lastSearchedSubtree = this.NavigationStart;
__loop0__: 
	while (true) {
		dependencyObject2 = System.Windows.Media.VisualTreeHelper.GetParent(dependencyObject);
		if (!(dependencyObject2 || (JSIL.TryCast(dependencyObject, System.Windows.FrameworkElement) === null))) {
			dependencyObject2 = JSIL.Cast(dependencyObject, System.Windows.FrameworkElement).Parent;
		}
		if (!((dependencyObject2 === null) || ((JSIL.TryCast(dependencyObject2, System.Windows.Controls.INavigate) === null) && 
					System.Windows.Media.VisualTreeHelper.GetParent(dependencyObject2)))) {
			var navigate = this.FindNavigator(JSIL.TryCast(dependencyObject2, System.Windows.FrameworkElement), lastSearchedSubtree);
			if (navigate !== null) {
				break __loop0__;
			}
			lastSearchedSubtree = dependencyObject2;
		}
		dependencyObject = dependencyObject2;
		if (dependencyObject === null) {
			return false;
		}
	}
	return navigate.INavigate_Navigate(this.NavigateUri);
};
$asm02.MS.Internal.NavigationHelper.prototype.FindNavigator = function (baseFE, lastSearchedSubtree) {
	if (baseFE === null) {
		return null;
	}
	if (!((JSIL.TryCast(baseFE, System.Windows.Controls.INavigate) === null) || (!System.String.Equals$0(baseFE.Name, this.TargetName) && 
				!System.String.IsNullOrEmpty(this.TargetName)))) {
		return JSIL.TryCast(baseFE, System.Windows.Controls.INavigate);
	}
	var flag = JSIL.CheckType(baseFE, System.Windows.Controls.Primitives.Popup);
	var num = flag ? 1 : System.Windows.Media.VisualTreeHelper.GetChildrenCount(baseFE);
__loop0__: 
	for (var i = 0; i < num; ++i) {
		var dependencyObject = flag ? JSIL.Cast(baseFE, System.Windows.Controls.Primitives.Popup).Child : System.Windows.Media.VisualTreeHelper.GetChild(baseFE, i);
		if (!System.Object.ReferenceEquals(dependencyObject, lastSearchedSubtree)) {
			var navigate = this.FindNavigator(JSIL.TryCast(dependencyObject, System.Windows.FrameworkElement), lastSearchedSubtree);
			if (navigate !== null) {
				return navigate;
			}
		}
	}
	return null;
};
$asm02.MS.Internal.NavigationHelper.prototype.Navigate = function (checkUserInitiatedAction) {
	if (!this.IsExternalTarget()) {
		if (this.TryInternalNavigate()) {
			return;
		}
		if (!this.IsUriValidForExternalNav()) {
			throw JSIL.New(System.NotSupportedException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("HyperlinkButton_Internal_Navigate_Failed")]);
		}
	}
	if (!System.Windows.Application.Current.AllowNavigation) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("HyperlinkButton_Navigation_Not_Allowed")]);
	}
	var absoluteUri = this.GetAbsoluteUri();
	var targetName = this.TargetName;
	if (!(absoluteUri.IsAbsoluteUri && this.IsSafeDestination(absoluteUri))) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$2", [System.String.Format(System.Globalization.CultureInfo.InvariantCulture, $asm02.System.Windows.Resx.GetString$2("HyperlinkButton_Navigate_Failed"), [absoluteUri.toString()]), null]);
	}
	try {
		if (!System.String.IsNullOrEmpty(targetName)) {
			$asm02.MS.Internal.XcpImports.NavigateToSafeURI(absoluteUri.OriginalString, targetName, checkUserInitiatedAction);
		} else {
			$asm02.MS.Internal.XcpImports.NavigateToSafeURI(absoluteUri.OriginalString, "_self", checkUserInitiatedAction);
		}
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.InvalidOperationException)) {
			var arg_BA_0 = $exception;
			throw JSIL.New(System.InvalidOperationException, "_ctor$2", [System.String.Format(System.Globalization.CultureInfo.InvariantCulture, $asm02.System.Windows.Resx.GetString$2("HyperlinkButton_Navigate_Failed"), [absoluteUri.toString()]), arg_BA_0]);
		} else {
			throw $exception;
		}
	}
};
$asm02.MS.Internal.NavigationHelper.prototype.IsSafeDestination = function (destination) {
	var scheme = destination.Scheme;
	if (!(!scheme.Equals$2("http", System.StringComparison.OrdinalIgnoreCase) && 
			!scheme.Equals$2("https", System.StringComparison.OrdinalIgnoreCase) && 
			!scheme.Equals$2("mailto", System.StringComparison.OrdinalIgnoreCase) && !scheme.Equals$2("mms", System.StringComparison.OrdinalIgnoreCase))) {
		return true;
	}
	if (!scheme.Equals$2("file", System.StringComparison.OrdinalIgnoreCase)) {
		return false;
	}
	if (!System.Windows.Application.Current.IsRunningOutOfBrowser) {
		return true;
	}
	if (System.Windows.Application.Current.HasElevatedPermissions) {
		try {
			JSIL.New($asm02.MS.Internal.NavigationSecurityState, "_ctor$1", [destination]).EnsureState();
			var result = true;
			return result;
		} catch ($exception) {
			result = false;
			return result;
		}
		return false;
	}
	return false;
};
JSIL.MakeProperty($asm02.MS.Internal.NavigationHelper.prototype, "NavigationStart", 
	$asm02.MS.Internal.NavigationHelper.prototype.get_NavigationStart, null);
JSIL.MakeProperty($asm02.MS.Internal.NavigationHelper.prototype, "NavigateUri", 
	$asm02.MS.Internal.NavigationHelper.prototype.get_NavigateUri, null);
JSIL.MakeProperty($asm02.MS.Internal.NavigationHelper.prototype, "TargetName", 
	$asm02.MS.Internal.NavigationHelper.prototype.get_TargetName, null);
$asm02.MS.Internal.NavigationHelper.prototype._navigationStart = null;
$asm02.MS.Internal.NavigationHelper.prototype._targetName = null;
$asm02.MS.Internal.NavigationHelper.prototype._navigateUri = null;

$asm02.MS.Internal.NavigationSecurityState.prototype._ctor$0 = function () {
	System.Security.SecurityState.prototype._ctor.call(this);
};
$asm02.MS.Internal.NavigationSecurityState.prototype._ctor$1 = function (navigationUri) {
	System.Security.SecurityState.prototype._ctor.call(this);
	if (System.Uri.op_Equality(navigationUri, null)) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["navigationUri"]);
	}
	this._navUri = navigationUri;
};
$asm02.MS.Internal.NavigationSecurityState.prototype.get_NavigationUri = function () {
	return this._navUri;
};
$asm02.MS.Internal.NavigationSecurityState.prototype.EnsureState = function () {
	if (!System.Security.SecurityState.prototype.IsStateAvailable.call(this)) {
		throw JSIL.New(System.Security.SecurityException, "_ctor$0", []);
	}
};
JSIL.OverloadedMethod($asm02.MS.Internal.NavigationSecurityState.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Uri]]
	]);
JSIL.MakeProperty($asm02.MS.Internal.NavigationSecurityState.prototype, "NavigationUri", 
	$asm02.MS.Internal.NavigationSecurityState.prototype.get_NavigationUri, null);
$asm02.MS.Internal.NavigationSecurityState.prototype._navUri = null;

$asm02.System.Windows.Controls.WeakCollectionChangedListener.prototype._ctor = function (source, listener) {
	System.Object.prototype._ctor.call(this);
	this._source = source;
	this._source.INotifyCollectionChanged_add_CollectionChanged(JSIL.Delegate.New("System.Collections.Specialized.NotifyCollectionChangedEventHandler", this, $asm02.System.Windows.Controls.WeakCollectionChangedListener.prototype.SourceCollectionChanged));
	this._weakListener = JSIL.New(System.WeakReference, "_ctor$1", [listener]);
};
$asm02.System.Windows.Controls.WeakCollectionChangedListener.CreateIfNecessary = function (source, listener) {
	if (JSIL.TryCast(source, System.Collections.Specialized.INotifyCollectionChanged) !== null) {
		return new $asm02.System.Windows.Controls.WeakCollectionChangedListener(JSIL.TryCast(source, System.Collections.Specialized.INotifyCollectionChanged), listener);
	}
	return null;
};
$asm02.System.Windows.Controls.WeakCollectionChangedListener.prototype.SourceCollectionChanged = function (sender, e) {
	if (this._weakListener === null) {
		return;
	}
	var collectionChangedListener = JSIL.TryCast(this._weakListener.Target, $asm02.System.Windows.Controls.ICollectionChangedListener);
	if (collectionChangedListener !== null) {
		collectionChangedListener.ICollectionChangedListener_OnCollectionChanged(sender, e);
		return;
	}
	this.Disconnect();
};
$asm02.System.Windows.Controls.WeakCollectionChangedListener.prototype.Disconnect = function () {
	if (this._source === null) {
		return;
	}
	this._source.INotifyCollectionChanged_remove_CollectionChanged(JSIL.Delegate.New("System.Collections.Specialized.NotifyCollectionChangedEventHandler", this, $asm02.System.Windows.Controls.WeakCollectionChangedListener.prototype.SourceCollectionChanged));
	this._source = null;
	this._weakListener = null;
};
$asm02.System.Windows.Controls.WeakCollectionChangedListener.prototype._weakListener = null;
$asm02.System.Windows.Controls.WeakCollectionChangedListener.prototype._source = null;

$asm02.MS.Internal.ViewManager.prototype.get_Item = function (o) {
	var key = new $asm02.MS.Internal.WeakRefKey();
	key._ctor(o);
	var weakReference = new JSIL.Variable(null);
	var viewTable = null;
	if (this._objectsToViewTables.TryGetValue(key.MemberwiseClone(), /* ref */ weakReference)) {
		viewTable = JSIL.Cast(weakReference.value.Target, $asm02.MS.Internal.ViewTable);
		if (viewTable === null) {
			this._objectsToViewTables.Remove(key.MemberwiseClone());
		}
	}
	return viewTable;
};
$asm02.MS.Internal.ViewManager.prototype.set_Item = function (o, value) {
	var key = new $asm02.MS.Internal.WeakRefKey();
	key._ctor(o);
	this._objectsToViewTables.set_Item(key.MemberwiseClone(), JSIL.New(System.WeakReference, "_ctor$1", [value]));
};
$asm02.MS.Internal.ViewManager.prototype.GetViewRecord = function (collection, cvs) {
	var viewTable = this.get_Item(collection);
	if (viewTable !== null) {
		var viewRecord = viewTable.get_Item(cvs);
		if (viewRecord !== null) {
			return viewRecord;
		}
	}
	return this.CreateAndCacheNewView(collection, cvs);
};
$asm02.MS.Internal.ViewManager.prototype.CreateNewView = function (collection) {
	var collectionViewFactory = JSIL.TryCast(collection, System.ComponentModel.ICollectionViewFactory);
	if (collectionViewFactory !== null) {
		var collectionView = collectionViewFactory.ICollectionViewFactory_CreateView();
		if (collectionView === null) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("ViewManager_UnsupportedNullCollectionView")]);
		}
		if (JSIL.TryCast(collectionView, $asm02.System.Windows.Data.IViewLifetime) === null) {
			return new $asm02.MS.Internal.CollectionViewProxy(collectionView);
		}
		return collectionView;
	} else {
		var list = JSIL.TryCast(collection, System.Collections.IList);
		if (list !== null) {
			return new $asm02.System.Windows.Data.ListCollectionView(list);
		}
		var enumerable = JSIL.TryCast(collection, System.Collections.IEnumerable);
		if (enumerable !== null) {
			return new $asm02.MS.Internal.EnumerableCollectionView(enumerable);
		}
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("ViewManager_UnsupportedSourceType")]);
	}
};
$asm02.MS.Internal.ViewManager.prototype.EnsureViewTableForCollection = function (collection) {
	var viewTable = this.get_Item(collection);
	if (viewTable === null) {
		viewTable = new $asm02.MS.Internal.ViewTable();
		this.set_Item(collection, viewTable);
	}
	return viewTable;
};
$asm02.MS.Internal.ViewManager.prototype.CreateAndCacheNewView = function (collection, cvs) {
	var collectionView = this.CreateNewView(collection);
	var viewTable = this.EnsureViewTableForCollection(collection);
	var viewRecord = new $asm02.MS.Internal.ViewRecord(collectionView);
	viewTable.set_Item(cvs, viewRecord);
	var viewLifetime = JSIL.Cast(collectionView, $asm02.System.Windows.Data.IViewLifetime);
	viewLifetime.IViewLifetime_ViewManagerData = viewTable;
	this.Cleanup();
	return viewRecord;
};
$asm02.MS.Internal.ViewManager.get_Current = function () {
	if ($asm02.MS.Internal.ViewManager._currentViewManager === null) {
		$asm02.MS.Internal.ViewManager._currentViewManager = new $asm02.MS.Internal.ViewManager();
	}
	return $asm02.MS.Internal.ViewManager._currentViewManager;
};
$asm02.MS.Internal.ViewManager.prototype.Cleanup = function () {
	var list = new (System.Collections.Generic.List$b1.Of($asm02.MS.Internal.WeakRefKey)) ();
	var enumerator = JSIL.Cast(this._objectsToViewTables.Keys, System.Collections.Generic.Dictionary$b2.KeyCollection.Of($asm02.MS.Internal.WeakRefKey, System.WeakReference)).GetEnumerator().MemberwiseClone();
	try {
	__loop0__: 
		while (enumerator.MoveNext()) {
			var current = enumerator.Current.MemberwiseClone();
			if (current.Target === null) {
				list.Add(current.MemberwiseClone());
			}
		}
	} finally {
		enumerator.IDisposable_Dispose();
	}
	var enumerator2 = (list.GetEnumerator());
	try {
	__loop1__: 
		while (enumerator2.MoveNext()) {
			var current2 = enumerator2.Current.MemberwiseClone();
			this._objectsToViewTables.Remove(current2.MemberwiseClone());
		}
	} finally {
		enumerator2.IDisposable_Dispose();
	}
};
$asm02.MS.Internal.ViewManager.prototype._ctor = function () {
	this._objectsToViewTables = JSIL.New(System.Collections.Generic.Dictionary$b2.Of($asm02.MS.Internal.WeakRefKey, System.WeakReference), "_ctor$0", []);
	System.Object.prototype._ctor.call(this);
};
JSIL.MakeProperty($asm02.MS.Internal.ViewManager.prototype, "Item", 
	$asm02.MS.Internal.ViewManager.prototype.get_Item, $asm02.MS.Internal.ViewManager.prototype.set_Item);
JSIL.MakeProperty($asm02.MS.Internal.ViewManager, "Current", 
	$asm02.MS.Internal.ViewManager.get_Current, null);
$asm02.MS.Internal.ViewManager._currentViewManager = null;
$asm02.MS.Internal.ViewManager.prototype._objectsToViewTables = null;

$asm02.MS.Internal.ViewTable.prototype.get_Item = function (o) {
	var result = new JSIL.Variable(null);
	this._cvsToViewRecord.TryGetValue(new $asm02.MS.Internal.WeakRefKey(o), /* ref */ result);
	return result.value;
};
$asm02.MS.Internal.ViewTable.prototype.set_Item = function (o, value) {
	this._cvsToViewRecord.set_Item(new $asm02.MS.Internal.WeakRefKey(o), value);
};
$asm02.MS.Internal.ViewTable.prototype._ctor = function () {
	this._cvsToViewRecord = JSIL.New(System.Collections.Generic.Dictionary$b2.Of($asm02.MS.Internal.WeakRefKey, $asm02.MS.Internal.ViewRecord), "_ctor$0", []);
	System.Object.prototype._ctor.call(this);
};
JSIL.MakeProperty($asm02.MS.Internal.ViewTable.prototype, "Item", 
	$asm02.MS.Internal.ViewTable.prototype.get_Item, $asm02.MS.Internal.ViewTable.prototype.set_Item);
$asm02.MS.Internal.ViewTable.prototype._cvsToViewRecord = null;

$asm02.MS.Internal.ViewRecord.prototype._ctor = function (view) {
	System.Object.prototype._ctor.call(this);
	this.View = view;
	this.IsInitialized = false;
	this.Version = -1;
};
$asm02.MS.Internal.ViewRecord.prototype.get_IsInitialized = function () {
	return this.IsInitialized$value;
};
$asm02.MS.Internal.ViewRecord.prototype.set_IsInitialized = function (value) {
	this.IsInitialized$value = value;
};
$asm02.MS.Internal.ViewRecord.prototype.get_Version = function () {
	return this.Version$value;
};
$asm02.MS.Internal.ViewRecord.prototype.set_Version = function (value) {
	this.Version$value = value;
};
$asm02.MS.Internal.ViewRecord.prototype.get_View = function () {
	return this.View$value;
};
$asm02.MS.Internal.ViewRecord.prototype.set_View = function (value) {
	this.View$value = value;
};
JSIL.MakeProperty($asm02.MS.Internal.ViewRecord.prototype, "IsInitialized", 
	$asm02.MS.Internal.ViewRecord.prototype.get_IsInitialized, $asm02.MS.Internal.ViewRecord.prototype.set_IsInitialized);
JSIL.MakeProperty($asm02.MS.Internal.ViewRecord.prototype, "Version", 
	$asm02.MS.Internal.ViewRecord.prototype.get_Version, $asm02.MS.Internal.ViewRecord.prototype.set_Version);
JSIL.MakeProperty($asm02.MS.Internal.ViewRecord.prototype, "View", 
	$asm02.MS.Internal.ViewRecord.prototype.get_View, $asm02.MS.Internal.ViewRecord.prototype.set_View);
$asm02.MS.Internal.ViewRecord.prototype.IsInitialized$value = false;
$asm02.MS.Internal.ViewRecord.prototype.Version$value = 0;
$asm02.MS.Internal.ViewRecord.prototype.View$value = null;

$asm02.MS.Internal.WeakRefKey.prototype._ctor = function (target) {
	this._weakRef = JSIL.New(System.WeakReference, "_ctor$1", [target]);
	this._hashCode = target ? target.GetHashCode() : 314159;
};
$asm02.MS.Internal.WeakRefKey.prototype.get_Target = function () {
	return this._weakRef.Target;
};
$asm02.MS.Internal.WeakRefKey.prototype.GetHashCode = function () {
	return this._hashCode;
};
$asm02.MS.Internal.WeakRefKey.prototype.Equals = function (o) {
	if (JSIL.TryCast(o, $asm02.MS.Internal.WeakRefKey) === new $asm02.MS.Internal.WeakRefKey()) {
		return false;
	}
	var weakRefKey = JSIL.Cast(o, $asm02.MS.Internal.WeakRefKey).MemberwiseClone();
	var target = this.Target;
	var target2 = weakRefKey.Target;
	if (!((target === null) || (target2 === null))) {
		return (target === target2);
	}
	return (this._weakRef === weakRefKey._weakRef);
};
$asm02.MS.Internal.WeakRefKey.op_Equality = function (left, right) {
	if (left === new $asm02.MS.Internal.WeakRefKey()) {
		return (right === null);
	}
	return left.Equals(right.MemberwiseClone());
};
$asm02.MS.Internal.WeakRefKey.op_Inequality = function (left, right) {
	return !$asm02.MS.Internal.WeakRefKey.op_Equality(left, right);
};
JSIL.MakeProperty($asm02.MS.Internal.WeakRefKey.prototype, "Target", 
	$asm02.MS.Internal.WeakRefKey.prototype.get_Target, null);
$asm02.MS.Internal.WeakRefKey.prototype._weakRef = null;
$asm02.MS.Internal.WeakRefKey.prototype._hashCode = 0;

$asm02.MS.Internal.SortFieldComparer.prototype._ctor = function (sortFields, culture) {
	System.Object.prototype._ctor.call(this);
	this._sortFields = sortFields;
	this._fields = this.CreatePropertyInfo(this._sortFields);
	this._comparer = new $asm02.MS.Internal.Comparer(culture);
};
$asm02.MS.Internal.SortFieldComparer.prototype.Compare = function (o1, o2) {
	var num = 0;
__loop0__: 
	for (var i = 0; i < this._fields.length; ++i) {
		var value = this._fields[i].GetValue(o1);
		var value2 = this._fields[i].GetValue(o2);
		num = this._comparer.Compare(value, value2);
		if (this._fields[i].descending) {
			num = -num;
		}
		if (num !== 0) {
			break __loop0__;
		}
	}
	return num;
};
$asm02.MS.Internal.SortFieldComparer.prototype.CreatePropertyInfo = function (sortFields) {
	var array = JSIL.Array.New($asm02.MS.Internal.SortFieldComparer.SortPropertyInfo, sortFields.Count);
__loop0__: 
	for (var i = 0; i < sortFields.Count; ++i) {
		if (System.String.IsNullOrEmpty(sortFields.get_Item(i).PropertyName)) {
			var propertyPath = null;
		} else {
			propertyPath = JSIL.New(System.Windows.PropertyPath, "_ctor$0", [sortFields.get_Item(i).PropertyName, JSIL.Array.New(System.Object, 0)]);
			propertyPath.ParsePathInternal(false);
		}
		array[i].info = propertyPath;
		array[i].descending = (sortFields.get_Item(i).Direction === System.ComponentModel.ListSortDirection.Descending);
	}
	return array;
};
$asm02.MS.Internal.SortFieldComparer.prototype._fields = null;
$asm02.MS.Internal.SortFieldComparer.prototype._sortFields = null;
$asm02.MS.Internal.SortFieldComparer.prototype._comparer = null;

$asm02.MS.Internal.SortFieldComparer.SortPropertyInfo.prototype.GetValue = function (o) {
	if (this.info === null) {
		var result = o;
	} else {
		var listener = this.info.GetListener(o, false, null);
		if (listener.FullPathExists) {
			result = listener.LeafValue;
		} else {
			result = null;
		}
	}
	return result;
};
$asm02.MS.Internal.SortFieldComparer.SortPropertyInfo.prototype.info = null;
$asm02.MS.Internal.SortFieldComparer.SortPropertyInfo.prototype.descending = false;

$asm02.System.Windows.Data.CollectionView.prototype._ctor = function (collection) {
	this._flags = ($asm02.System.Windows.Data.CollectionView.CollectionViewFlags.NeedsRefresh | $asm02.System.Windows.Data.CollectionView.CollectionViewFlags.ShouldProcessCollectionChanged);
	this._currentChangedMonitor = new $asm02.System.Windows.Data.CollectionView.SimpleMonitor();
	System.Object.prototype._ctor.call(this);
	if (collection === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["collection"]);
	}
	this._sourceCollection = collection;
	var notifyCollectionChanged = JSIL.TryCast(collection, System.Collections.Specialized.INotifyCollectionChanged);
	if (notifyCollectionChanged !== null) {
		notifyCollectionChanged.INotifyCollectionChanged_add_CollectionChanged(JSIL.Delegate.New("System.Collections.Specialized.NotifyCollectionChangedEventHandler", this, $asm02.System.Windows.Data.CollectionView.prototype.OnCollectionChanged$1));
	}
	this._currentItem = null;
	this._currentPosition = -1;
	this.SetFlag($asm02.System.Windows.Data.CollectionView.CollectionViewFlags.IsCurrentBeforeFirst, (this._currentPosition < 0));
	this.SetFlag($asm02.System.Windows.Data.CollectionView.CollectionViewFlags.IsCurrentAfterLast, (this._currentPosition < 0));
	this.SetFlag($asm02.System.Windows.Data.CollectionView.CollectionViewFlags.CachedIsEmpty, (this._currentPosition < 0));
};
$asm02.System.Windows.Data.CollectionView.prototype.get_ViewManagerData = function () {
	return this.ViewManagerData$value;
};
$asm02.System.Windows.Data.CollectionView.prototype.set_ViewManagerData = function (value) {
	this.ViewManagerData$value = value;
};
$asm02.System.Windows.Data.CollectionView.prototype.get_Culture = function () {
	return this._culture;
};
$asm02.System.Windows.Data.CollectionView.prototype.set_Culture = function (value) {
	if (value === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["value"]);
	}
	if (this._culture !== value) {
		this._culture = value;
		this.OnPropertyChanged$1("Culture");
	}
};
$asm02.System.Windows.Data.CollectionView.prototype.get_SourceCollection = function () {
	return this._sourceCollection;
};
$asm02.System.Windows.Data.CollectionView.prototype.get_Filter = function () {
	return this._filter;
};
$asm02.System.Windows.Data.CollectionView.prototype.set_Filter = function (value) {
	if (!this.CanFilter) {
		throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
	}
	this._filter = value;
	this.RefreshOrDefer();
};
$asm02.System.Windows.Data.CollectionView.prototype.Refresh = function () {
	var editableCollectionView = JSIL.TryCast(this, System.ComponentModel.IEditableCollectionView);
	if (!((editableCollectionView === null) || (!editableCollectionView.IEditableCollectionView_IsAddingNew && 
				!editableCollectionView.IEditableCollectionView_IsEditingItem))) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("CollectionView_MemberNotAllowedDuringAddOrEdit", ["Refresh"])]);
	}
	this.RefreshInternal();
};
$asm02.System.Windows.Data.CollectionView.prototype.DeferRefresh = function () {
	var editableCollectionView = JSIL.TryCast(this, System.ComponentModel.IEditableCollectionView);
	if (!((editableCollectionView === null) || (!editableCollectionView.IEditableCollectionView_IsAddingNew && 
				!editableCollectionView.IEditableCollectionView_IsEditingItem))) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("CollectionView_MemberNotAllowedDuringAddOrEdit", ["DeferRefresh"])]);
	}
	++this._deferLevel;
	return new $asm02.System.Windows.Data.CollectionView.DeferHelper(this);
};
$asm02.System.Windows.Data.CollectionView.prototype.get_CurrentItem = function () {
	this.VerifyRefreshNotDeferred();
	return this._currentItem;
};
$asm02.System.Windows.Data.CollectionView.prototype.get_CurrentPosition = function () {
	this.VerifyRefreshNotDeferred();
	return this._currentPosition;
};
$asm02.System.Windows.Data.CollectionView.prototype.get_IsCurrentAfterLast = function () {
	this.VerifyRefreshNotDeferred();
	return this.CheckFlag($asm02.System.Windows.Data.CollectionView.CollectionViewFlags.IsCurrentAfterLast);
};
$asm02.System.Windows.Data.CollectionView.prototype.get_IsCurrentBeforeFirst = function () {
	this.VerifyRefreshNotDeferred();
	return this.CheckFlag($asm02.System.Windows.Data.CollectionView.CollectionViewFlags.IsCurrentBeforeFirst);
};
$asm02.System.Windows.Data.CollectionView.prototype.MoveCurrentToFirst = function () {
	this.VerifyRefreshNotDeferred();
	return this.MoveCurrentToPosition(0);
};
$asm02.System.Windows.Data.CollectionView.prototype.MoveCurrentToLast = function () {
	this.VerifyRefreshNotDeferred();
	return this.MoveCurrentToPosition((this.Count - 1));
};
$asm02.System.Windows.Data.CollectionView.prototype.MoveCurrentToNext = function () {
	this.VerifyRefreshNotDeferred();
	return ((this.CurrentPosition < this.Count) && this.MoveCurrentToPosition((this.CurrentPosition + 1)));
};
$asm02.System.Windows.Data.CollectionView.prototype.MoveCurrentToPrevious = function () {
	this.VerifyRefreshNotDeferred();
	return ((this.CurrentPosition >= 0) && this.MoveCurrentToPosition((this.CurrentPosition - 1)));
};
$asm02.System.Windows.Data.CollectionView.prototype.MoveCurrentTo = function (item) {
	this.VerifyRefreshNotDeferred();
	if (!(!System.Object.Equals(this.CurrentItem, item) || ((item === null) && 
				!this.IsCurrentInView))) {
		return this.IsCurrentInView;
	}
	var position = -1;
	var editableCollectionView = JSIL.TryCast(this, System.ComponentModel.IEditableCollectionView);
	if (!(!(!((editableCollectionView === null) || 
					!editableCollectionView.IEditableCollectionView_IsAddingNew) && 
				System.Object.Equals(item, editableCollectionView.IEditableCollectionView_CurrentAddItem)) && 
			(item !== null) && !this.PassesFilter(item))) {
		position = this.IndexOf(item);
	}
	return this.MoveCurrentToPosition(position);
};
$asm02.System.Windows.Data.CollectionView.prototype.add_CurrentChanging = function (value) {
	this.CurrentChanging = System.Delegate.Combine(this.CurrentChanging, value);
};
$asm02.System.Windows.Data.CollectionView.prototype.remove_CurrentChanging = function (value) {
	this.CurrentChanging = System.Delegate.Remove(this.CurrentChanging, value);
};
$asm02.System.Windows.Data.CollectionView.prototype.add_CurrentChanged = function (value) {
	this.CurrentChanged = System.Delegate.Combine(this.CurrentChanged, value);
};
$asm02.System.Windows.Data.CollectionView.prototype.remove_CurrentChanged = function (value) {
	this.CurrentChanged = System.Delegate.Remove(this.CurrentChanged, value);
};
$asm02.System.Windows.Data.CollectionView.prototype.IEnumerable_GetEnumerator = function () {
	return this.GetEnumerator();
};
$asm02.System.Windows.Data.CollectionView.prototype.get_Comparer = function () {
	return JSIL.TryCast(this, System.Collections.IComparer);
};
$asm02.System.Windows.Data.CollectionView.prototype.get_NeedsRefresh = function () {
	return this.CheckFlag($asm02.System.Windows.Data.CollectionView.CollectionViewFlags.NeedsRefresh);
};
$asm02.System.Windows.Data.CollectionView.prototype.add_CollectionChanged = function (value) {
	this.CollectionChanged = System.Delegate.Combine(this.CollectionChanged, value);
};
$asm02.System.Windows.Data.CollectionView.prototype.remove_CollectionChanged = function (value) {
	this.CollectionChanged = System.Delegate.Remove(this.CollectionChanged, value);
};
$asm02.System.Windows.Data.CollectionView.prototype.INotifyCollectionChanged_add_CollectionChanged = function (value) {
	this.CollectionChanged = System.Delegate.Combine(this.CollectionChanged, value);
};
$asm02.System.Windows.Data.CollectionView.prototype.INotifyCollectionChanged_remove_CollectionChanged = function (value) {
	this.CollectionChanged = System.Delegate.Remove(this.CollectionChanged, value);
};
$asm02.System.Windows.Data.CollectionView.prototype.INotifyPropertyChanged_add_PropertyChanged = function (value) {
	this.PropertyChanged = System.Delegate.Combine(this.PropertyChanged, value);
};
$asm02.System.Windows.Data.CollectionView.prototype.INotifyPropertyChanged_remove_PropertyChanged = function (value) {
	this.PropertyChanged = System.Delegate.Remove(this.PropertyChanged, value);
};
$asm02.System.Windows.Data.CollectionView.prototype.OnPropertyChanged$0 = function (e) {
	if (this.PropertyChanged !== null) {
		this.PropertyChanged(this, e);
	}
};
$asm02.System.Windows.Data.CollectionView.prototype.add_PropertyChanged = function (value) {
	this.PropertyChanged = System.Delegate.Combine(this.PropertyChanged, value);
};
$asm02.System.Windows.Data.CollectionView.prototype.remove_PropertyChanged = function (value) {
	this.PropertyChanged = System.Delegate.Remove(this.PropertyChanged, value);
};
$asm02.System.Windows.Data.CollectionView.prototype.OnCollectionChanged$0 = function (args) {
	if (args === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["args"]);
	}
	++this._timestamp;
	if (this.CollectionChanged !== null) {
		this.CollectionChanged(this, args);
	}
	if (args.Action !== System.Collections.Specialized.NotifyCollectionChangedAction.Replace) {
		this.OnPropertyChanged$1("Count");
	}
	var isEmpty = this.IsEmpty;
	if (isEmpty !== this.CheckFlag($asm02.System.Windows.Data.CollectionView.CollectionViewFlags.CachedIsEmpty)) {
		this.SetFlag($asm02.System.Windows.Data.CollectionView.CollectionViewFlags.CachedIsEmpty, isEmpty);
		this.OnPropertyChanged$1("IsEmpty");
	}
};
$asm02.System.Windows.Data.CollectionView.prototype.SetCurrent$0 = function (newItem, newPosition) {
	var count = newItem ? 0 : this.IsEmpty ? 0 : this.Count;
	this.SetCurrent$1(newItem, newPosition, count);
};
$asm02.System.Windows.Data.CollectionView.prototype.SetCurrent$1 = function (newItem, newPosition, count) {
	if (newItem !== null) {
		this.SetFlag($asm02.System.Windows.Data.CollectionView.CollectionViewFlags.IsCurrentBeforeFirst, false);
		this.SetFlag($asm02.System.Windows.Data.CollectionView.CollectionViewFlags.IsCurrentAfterLast, false);
	} else if (count === 0) {
		this.SetFlag($asm02.System.Windows.Data.CollectionView.CollectionViewFlags.IsCurrentBeforeFirst, true);
		this.SetFlag($asm02.System.Windows.Data.CollectionView.CollectionViewFlags.IsCurrentAfterLast, true);
		newPosition = -1;
	} else {
		this.SetFlag($asm02.System.Windows.Data.CollectionView.CollectionViewFlags.IsCurrentBeforeFirst, (newPosition < 0));
		this.SetFlag($asm02.System.Windows.Data.CollectionView.CollectionViewFlags.IsCurrentAfterLast, (newPosition >= count));
	}
	this._currentItem = newItem;
	this._currentPosition = newPosition;
};
$asm02.System.Windows.Data.CollectionView.prototype.OKToChangeCurrent = function () {
	var currentChangingEventArgs = JSIL.New(System.ComponentModel.CurrentChangingEventArgs, "_ctor$0", []);
	this.OnCurrentChanging$1(currentChangingEventArgs);
	return !currentChangingEventArgs.Cancel;
};
$asm02.System.Windows.Data.CollectionView.prototype.OnCurrentChanging$0 = function () {
	this._currentPosition = -1;
	this.OnCurrentChanging$1($asm02.System.Windows.Data.CollectionView.uncancelableCurrentChangingEventArgs);
};
$asm02.System.Windows.Data.CollectionView.prototype.OnCurrentChanging$1 = function (args) {
	if (args === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["args"]);
	}
	if (this._currentChangedMonitor.Busy) {
		if (args.IsCancelable) {
			args.Cancel = true;
		}
		return;
	}
	if (this.CurrentChanging !== null) {
		this.CurrentChanging(this, args);
	}
};
$asm02.System.Windows.Data.CollectionView.prototype.OnCurrentChanged = function () {
	if (!((this.CurrentChanged === null) || !this._currentChangedMonitor.Enter())) {
		var currentChangedMonitor = this._currentChangedMonitor;
		try {
			this.CurrentChanged(this, System.EventArgs.Empty);
		} finally {
			if (currentChangedMonitor !== null) {
				currentChangedMonitor.IDisposable_Dispose();
			}
		}
	}
};
$asm02.System.Windows.Data.CollectionView.prototype.OnCollectionChanged$1 = function (sender, args) {
	if (this.CheckFlag($asm02.System.Windows.Data.CollectionView.CollectionViewFlags.ShouldProcessCollectionChanged)) {
		this.ProcessCollectionChanged(args);
	}
};
$asm02.System.Windows.Data.CollectionView.prototype.RefreshOrDefer = function () {
	if (this.IsRefreshDeferred) {
		this.SetFlag($asm02.System.Windows.Data.CollectionView.CollectionViewFlags.NeedsRefresh, true);
		return;
	}
	this.RefreshInternal();
};
$asm02.System.Windows.Data.CollectionView.prototype.get_IsRefreshDeferred = function () {
	return (this._deferLevel > 0);
};
$asm02.System.Windows.Data.CollectionView.prototype.get_IsCurrentInSync = function () {
	if (this.IsCurrentInView) {
		return (this.GetItemAt(this.CurrentPosition) === this.CurrentItem);
	}
	return (this.CurrentItem === null);
};
$asm02.System.Windows.Data.CollectionView.prototype.GetItemType = function (useRepresentativeItem) {
	var type = (JSIL.GetType(this.SourceCollection));
	var interfaces = type.GetInterfaces();
__loop0__: 
	for (var i = 0; i < interfaces.length; ++i) {
		var type2 = interfaces[i];
		if (type2.Name == $asm02.System.Windows.Data.CollectionView.IEnumerableT) {
			var genericArguments = type2.GetGenericArguments();
			if (genericArguments.length === 1) {
				return genericArguments[0];
			}
		}
	}
	if (useRepresentativeItem) {
		var representativeItem = this.GetRepresentativeItem();
		if (representativeItem !== null) {
			return JSIL.GetType(representativeItem);
		}
	}
	return null;
};
$asm02.System.Windows.Data.CollectionView.prototype.GetRepresentativeItem = function () {
	if (this.IsEmpty) {
		return null;
	}
__loop0__: 
	for (var enumerator = this.GetEnumerator(); enumerator.IEnumerator_MoveNext(); ) {
		var current = enumerator.IEnumerator_Current;
		if (current !== null) {
			return current;
		}
	}
	return null;
};
$asm02.System.Windows.Data.CollectionView.prototype.RefreshInternal = function () {
	this.RefreshOverride();
	this.SetFlag($asm02.System.Windows.Data.CollectionView.CollectionViewFlags.NeedsRefresh, false);
};
$asm02.System.Windows.Data.CollectionView.prototype.VerifyRefreshNotDeferred = function () {
	if (this.IsRefreshDeferred) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("CollectionView_NoAccessWhileChangesAreDeferred")]);
	}
};
$asm02.System.Windows.Data.CollectionView.prototype.get_SyncRoot = function () {
	var collection = JSIL.TryCast(this.SourceCollection, System.Collections.ICollection);
	if (!((collection === null) || (collection.ICollection_SyncRoot === null))) {
		return collection.ICollection_SyncRoot;
	}
	return this.SourceCollection;
};
$asm02.System.Windows.Data.CollectionView.prototype.get_Timestamp = function () {
	return this._timestamp;
};
$asm02.System.Windows.Data.CollectionView.prototype.get_IsCurrentInView = function () {
	this.VerifyRefreshNotDeferred();
	return ((0 <= this.CurrentPosition) && (this.CurrentPosition < this.Count));
};
$asm02.System.Windows.Data.CollectionView.prototype.CheckFlag = function (flags) {
	return ((this._flags & flags) !== 0);
};
$asm02.System.Windows.Data.CollectionView.prototype.SetFlag = function (flags, value) {
	if (value) {
		this._flags = (this._flags | flags);
		return;
	}
	this._flags = (this._flags & ~flags);
};
$asm02.System.Windows.Data.CollectionView.prototype.EndDefer = function () {
	--this._deferLevel;
	if (!(this._deferLevel || !this.CheckFlag($asm02.System.Windows.Data.CollectionView.CollectionViewFlags.NeedsRefresh))) {
		this.Refresh();
	}
};
$asm02.System.Windows.Data.CollectionView.prototype.OnPropertyChanged$1 = function (propertyName) {
	this.OnPropertyChanged$0(new System.ComponentModel.PropertyChangedEventArgs(propertyName));
};
JSIL.OverloadedMethod($asm02.System.Windows.Data.CollectionView.prototype, "OnPropertyChanged", [
		["OnPropertyChanged$0", [System.ComponentModel.PropertyChangedEventArgs]], 
		["OnPropertyChanged$1", [System.String]]
	]);
JSIL.OverloadedMethod($asm02.System.Windows.Data.CollectionView.prototype, "OnCollectionChanged", [
		["OnCollectionChanged$0", [System.Collections.Specialized.NotifyCollectionChangedEventArgs]], 
		["OnCollectionChanged$1", [System.Object, System.Collections.Specialized.NotifyCollectionChangedEventArgs]]
	]);
JSIL.OverloadedMethod($asm02.System.Windows.Data.CollectionView.prototype, "SetCurrent", [
		["SetCurrent$0", [System.Object, System.Int32]], 
		["SetCurrent$1", [System.Object, System.Int32, System.Int32]]
	]);
JSIL.OverloadedMethod($asm02.System.Windows.Data.CollectionView.prototype, "OnCurrentChanging", [
		["OnCurrentChanging$0", []], 
		["OnCurrentChanging$1", [System.ComponentModel.CurrentChangingEventArgs]]
	]);
JSIL.MakeProperty($asm02.System.Windows.Data.CollectionView.prototype, "ViewManagerData", 
	$asm02.System.Windows.Data.CollectionView.prototype.get_ViewManagerData, $asm02.System.Windows.Data.CollectionView.prototype.set_ViewManagerData);
JSIL.MakeProperty($asm02.System.Windows.Data.CollectionView.prototype, "Culture", 
	$asm02.System.Windows.Data.CollectionView.prototype.get_Culture, $asm02.System.Windows.Data.CollectionView.prototype.set_Culture);
JSIL.MakeProperty($asm02.System.Windows.Data.CollectionView.prototype, "SourceCollection", 
	$asm02.System.Windows.Data.CollectionView.prototype.get_SourceCollection, null);
JSIL.MakeProperty($asm02.System.Windows.Data.CollectionView.prototype, "Filter", 
	$asm02.System.Windows.Data.CollectionView.prototype.get_Filter, $asm02.System.Windows.Data.CollectionView.prototype.set_Filter);
JSIL.MakeProperty($asm02.System.Windows.Data.CollectionView.prototype, "CanFilter", 
	$asm02.System.Windows.Data.CollectionView.prototype.get_CanFilter, null);
JSIL.MakeProperty($asm02.System.Windows.Data.CollectionView.prototype, "SortDescriptions", 
	$asm02.System.Windows.Data.CollectionView.prototype.get_SortDescriptions, null);
JSIL.MakeProperty($asm02.System.Windows.Data.CollectionView.prototype, "CanSort", 
	$asm02.System.Windows.Data.CollectionView.prototype.get_CanSort, null);
JSIL.MakeProperty($asm02.System.Windows.Data.CollectionView.prototype, "CanGroup", 
	$asm02.System.Windows.Data.CollectionView.prototype.get_CanGroup, null);
JSIL.MakeProperty($asm02.System.Windows.Data.CollectionView.prototype, "GroupDescriptions", 
	$asm02.System.Windows.Data.CollectionView.prototype.get_GroupDescriptions, null);
JSIL.MakeProperty($asm02.System.Windows.Data.CollectionView.prototype, "Groups", 
	$asm02.System.Windows.Data.CollectionView.prototype.get_Groups, null);
JSIL.MakeProperty($asm02.System.Windows.Data.CollectionView.prototype, "CurrentItem", 
	$asm02.System.Windows.Data.CollectionView.prototype.get_CurrentItem, null);
JSIL.MakeProperty($asm02.System.Windows.Data.CollectionView.prototype, "CurrentPosition", 
	$asm02.System.Windows.Data.CollectionView.prototype.get_CurrentPosition, null);
JSIL.MakeProperty($asm02.System.Windows.Data.CollectionView.prototype, "IsCurrentAfterLast", 
	$asm02.System.Windows.Data.CollectionView.prototype.get_IsCurrentAfterLast, null);
JSIL.MakeProperty($asm02.System.Windows.Data.CollectionView.prototype, "IsCurrentBeforeFirst", 
	$asm02.System.Windows.Data.CollectionView.prototype.get_IsCurrentBeforeFirst, null);
JSIL.MakeProperty($asm02.System.Windows.Data.CollectionView.prototype, "Count", 
	$asm02.System.Windows.Data.CollectionView.prototype.get_Count, null);
JSIL.MakeProperty($asm02.System.Windows.Data.CollectionView.prototype, "IsEmpty", 
	$asm02.System.Windows.Data.CollectionView.prototype.get_IsEmpty, null);
JSIL.MakeProperty($asm02.System.Windows.Data.CollectionView.prototype, "Comparer", 
	$asm02.System.Windows.Data.CollectionView.prototype.get_Comparer, null);
JSIL.MakeProperty($asm02.System.Windows.Data.CollectionView.prototype, "NeedsRefresh", 
	$asm02.System.Windows.Data.CollectionView.prototype.get_NeedsRefresh, null);
JSIL.MakeProperty($asm02.System.Windows.Data.CollectionView.prototype, "IsRefreshDeferred", 
	$asm02.System.Windows.Data.CollectionView.prototype.get_IsRefreshDeferred, null);
JSIL.MakeProperty($asm02.System.Windows.Data.CollectionView.prototype, "IsCurrentInSync", 
	$asm02.System.Windows.Data.CollectionView.prototype.get_IsCurrentInSync, null);
JSIL.MakeProperty($asm02.System.Windows.Data.CollectionView.prototype, "SyncRoot", 
	$asm02.System.Windows.Data.CollectionView.prototype.get_SyncRoot, null);
JSIL.MakeProperty($asm02.System.Windows.Data.CollectionView.prototype, "Timestamp", 
	$asm02.System.Windows.Data.CollectionView.prototype.get_Timestamp, null);
JSIL.MakeProperty($asm02.System.Windows.Data.CollectionView.prototype, "IsCurrentInView", 
	$asm02.System.Windows.Data.CollectionView.prototype.get_IsCurrentInView, null);
Object.defineProperty($asm02.System.Windows.Data.CollectionView, "CountPropertyName", {
		"value": "Count"}
);
Object.defineProperty($asm02.System.Windows.Data.CollectionView, "IsEmptyPropertyName", {
		"value": "IsEmpty"}
);
Object.defineProperty($asm02.System.Windows.Data.CollectionView, "CulturePropertyName", {
		"value": "Culture"}
);
Object.defineProperty($asm02.System.Windows.Data.CollectionView, "CurrentPositionPropertyName", {
		"value": "CurrentPosition"}
);
Object.defineProperty($asm02.System.Windows.Data.CollectionView, "CurrentItemPropertyName", {
		"value": "CurrentItem"}
);
Object.defineProperty($asm02.System.Windows.Data.CollectionView, "IsCurrentBeforeFirstPropertyName", {
		"value": "IsCurrentBeforeFirst"}
);
Object.defineProperty($asm02.System.Windows.Data.CollectionView, "IsCurrentAfterLastPropertyName", {
		"value": "IsCurrentAfterLast"}
);
$asm02.System.Windows.Data.CollectionView.prototype.CurrentChanging = null;
$asm02.System.Windows.Data.CollectionView.prototype.CurrentChanged = null;
$asm02.System.Windows.Data.CollectionView.prototype.CollectionChanged = null;
$asm02.System.Windows.Data.CollectionView.prototype.PropertyChanged = null;
$asm02.System.Windows.Data.CollectionView.prototype._sourceCollection = null;
$asm02.System.Windows.Data.CollectionView.prototype._flags = 0;
$asm02.System.Windows.Data.CollectionView.prototype._timestamp = 0;
$asm02.System.Windows.Data.CollectionView.prototype._currentItem = null;
$asm02.System.Windows.Data.CollectionView.prototype._filter = null;
$asm02.System.Windows.Data.CollectionView.prototype._currentPosition = 0;
$asm02.System.Windows.Data.CollectionView.prototype._culture = null;
$asm02.System.Windows.Data.CollectionView.prototype._deferLevel = 0;
$asm02.System.Windows.Data.CollectionView.prototype._currentChangedMonitor = null;
$asm02.System.Windows.Data.CollectionView.uncancelableCurrentChangingEventArgs = null;
$asm02.System.Windows.Data.CollectionView.IEnumerableT = null;
$asm02.System.Windows.Data.CollectionView.NoNewItem = null;
$asm02.System.Windows.Data.CollectionView.prototype.ViewManagerData$value = null;
$asm02.System.Windows.Data.CollectionView._cctor = function () {
	$asm02.System.Windows.Data.CollectionView.uncancelableCurrentChangingEventArgs = JSIL.New(System.ComponentModel.CurrentChangingEventArgs, "_ctor$1", [false]);
	$asm02.System.Windows.Data.CollectionView.IEnumerableT = System.Collections.Generic.IEnumerable$b1.Name;
	$asm02.System.Windows.Data.CollectionView.NoNewItem = new System.Object();
};

$asm02.System.Windows.Data.CollectionView.PlaceholderAwareEnumerator.prototype._ctor = function (collectionView, baseEnumerator, newItem) {
	System.Object.prototype._ctor.call(this);
	this._collectionView = collectionView;
	this._timestamp = collectionView.Timestamp;
	this._baseEnumerator = baseEnumerator;
	this._newItem = newItem;
};
$asm02.System.Windows.Data.CollectionView.PlaceholderAwareEnumerator.prototype.MoveNext = function () {
	if (this._timestamp !== this._collectionView.Timestamp) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("CollectionView_EnumeratorVersionChanged")]);
	}
	if (this._position === 0) {
		if (!(this._baseEnumerator.IEnumerator_MoveNext() && ((this._newItem === $asm02.System.Windows.Data.CollectionView.NoNewItem) || 
					(this._baseEnumerator.IEnumerator_Current !== this._newItem) || 
					this._baseEnumerator.IEnumerator_MoveNext()))) {
			if (this._newItem === $asm02.System.Windows.Data.CollectionView.NoNewItem) {
				return false;
			}
			this._position = $asm02.System.Windows.Data.CollectionView.PlaceholderAwareEnumerator.Position.OnNewItem;
		}
		return true;
	}
	this._position = $asm02.System.Windows.Data.CollectionView.PlaceholderAwareEnumerator.Position.AfterNewItem;
	return (this._baseEnumerator.IEnumerator_MoveNext() && ((this._newItem === $asm02.System.Windows.Data.CollectionView.NoNewItem) || 
			(this._baseEnumerator.IEnumerator_Current !== this._newItem) || 
			this._baseEnumerator.IEnumerator_MoveNext()));
};
$asm02.System.Windows.Data.CollectionView.PlaceholderAwareEnumerator.prototype.get_Current = function () {
	if (this._position !== $asm02.System.Windows.Data.CollectionView.PlaceholderAwareEnumerator.Position.OnNewItem) {
		return this._baseEnumerator.IEnumerator_Current;
	}
	return this._newItem;
};
$asm02.System.Windows.Data.CollectionView.PlaceholderAwareEnumerator.prototype.Reset = function () {
	this._position = $asm02.System.Windows.Data.CollectionView.PlaceholderAwareEnumerator.Position.BeforeNewItem;
	this._baseEnumerator.IEnumerator_Reset();
};
JSIL.MakeProperty($asm02.System.Windows.Data.CollectionView.PlaceholderAwareEnumerator.prototype, "Current", 
	$asm02.System.Windows.Data.CollectionView.PlaceholderAwareEnumerator.prototype.get_Current, null);
$asm02.System.Windows.Data.CollectionView.PlaceholderAwareEnumerator.prototype._collectionView = null;
$asm02.System.Windows.Data.CollectionView.PlaceholderAwareEnumerator.prototype._baseEnumerator = null;
$asm02.System.Windows.Data.CollectionView.PlaceholderAwareEnumerator.prototype._position = 0;
$asm02.System.Windows.Data.CollectionView.PlaceholderAwareEnumerator.prototype._newItem = null;
$asm02.System.Windows.Data.CollectionView.PlaceholderAwareEnumerator.prototype._timestamp = 0;

$asm02.System.Windows.Data.CollectionView.DeferHelper.prototype._ctor = function (collectionView) {
	System.Object.prototype._ctor.call(this);
	this._collectionView = collectionView;
};
$asm02.System.Windows.Data.CollectionView.DeferHelper.prototype.Dispose = function () {
	if (this._collectionView !== null) {
		this._collectionView.EndDefer();
		this._collectionView = null;
	}
	System.GC.SuppressFinalize(this);
};
$asm02.System.Windows.Data.CollectionView.DeferHelper.prototype._collectionView = null;

$asm02.System.Windows.Data.CollectionView.SimpleMonitor.prototype.Enter = function () {
	if (this._entered) {
		return false;
	}
	this._entered = true;
	return true;
};
$asm02.System.Windows.Data.CollectionView.SimpleMonitor.prototype.Dispose = function () {
	this._entered = false;
	System.GC.SuppressFinalize(this);
};
$asm02.System.Windows.Data.CollectionView.SimpleMonitor.prototype.get_Busy = function () {
	return this._entered;
};
$asm02.System.Windows.Data.CollectionView.SimpleMonitor.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
JSIL.MakeProperty($asm02.System.Windows.Data.CollectionView.SimpleMonitor.prototype, "Busy", 
	$asm02.System.Windows.Data.CollectionView.SimpleMonitor.prototype.get_Busy, null);
$asm02.System.Windows.Data.CollectionView.SimpleMonitor.prototype._entered = false;

$asm02.MS.Internal.EnumerableCollectionView.prototype._ctor = function (source) {
	$asm02.System.Windows.Data.CollectionView.prototype._ctor.call(this, source);
	this._snapshot = JSIL.New(System.Collections.ObjectModel.ObservableCollection$b1.Of(System.Object), "_ctor$0", []);
	this.LoadSnapshotCore(source);
	if (this._snapshot.Count > 0) {
		$asm02.System.Windows.Data.CollectionView.prototype.SetCurrent$1.call(this, this._snapshot.get_Item(0), 0, 1);
	} else {
		$asm02.System.Windows.Data.CollectionView.prototype.SetCurrent$1.call(this, null, -1, 0);
	}
	this._pollForChanges = !JSIL.CheckType(source, System.Collections.Specialized.INotifyCollectionChanged);
	this._view = new $asm02.System.Windows.Data.ListCollectionView(this._snapshot);
	this._view.INotifyCollectionChanged_add_CollectionChanged(JSIL.Delegate.New("System.Collections.Specialized.NotifyCollectionChangedEventHandler", this, $asm02.MS.Internal.EnumerableCollectionView.prototype._OnViewChanged));
	this._view.INotifyPropertyChanged_add_PropertyChanged(JSIL.Delegate.New("System.ComponentModel.PropertyChangedEventHandler", this, $asm02.MS.Internal.EnumerableCollectionView.prototype._OnPropertyChanged));
	this._view.add_CurrentChanging(JSIL.Delegate.New("System.ComponentModel.CurrentChangingEventHandler", this, $asm02.MS.Internal.EnumerableCollectionView.prototype._OnCurrentChanging));
	this._view.add_CurrentChanged(JSIL.Delegate.New("System.EventHandler", this, $asm02.MS.Internal.EnumerableCollectionView.prototype._OnCurrentChanged));
};
$asm02.MS.Internal.EnumerableCollectionView.prototype.get_Culture = function () {
	return this._view.Culture;
};
$asm02.MS.Internal.EnumerableCollectionView.prototype.set_Culture = function (value) {
	this._view.Culture = value;
};
$asm02.MS.Internal.EnumerableCollectionView.prototype.Contains = function (item) {
	this.EnsureSnapshot();
	return this._view.Contains(item);
};
$asm02.MS.Internal.EnumerableCollectionView.prototype.get_Filter = function () {
	return this._view.Filter;
};
$asm02.MS.Internal.EnumerableCollectionView.prototype.set_Filter = function (value) {
	this._view.Filter = value;
};
$asm02.MS.Internal.EnumerableCollectionView.prototype.get_CanFilter = function () {
	return this._view.CanFilter;
};
$asm02.MS.Internal.EnumerableCollectionView.prototype.get_SortDescriptions = function () {
	return this._view.SortDescriptions;
};
$asm02.MS.Internal.EnumerableCollectionView.prototype.get_CanSort = function () {
	return this._view.CanSort;
};
$asm02.MS.Internal.EnumerableCollectionView.prototype.get_CanGroup = function () {
	return this._view.CanGroup;
};
$asm02.MS.Internal.EnumerableCollectionView.prototype.get_GroupDescriptions = function () {
	return this._view.GroupDescriptions;
};
$asm02.MS.Internal.EnumerableCollectionView.prototype.get_Groups = function () {
	return this._view.Groups;
};
$asm02.MS.Internal.EnumerableCollectionView.prototype.DeferRefresh = function () {
	return this._view.DeferRefresh();
};
$asm02.MS.Internal.EnumerableCollectionView.prototype.get_CurrentItem = function () {
	return this._view.CurrentItem;
};
$asm02.MS.Internal.EnumerableCollectionView.prototype.get_CurrentPosition = function () {
	return this._view.CurrentPosition;
};
$asm02.MS.Internal.EnumerableCollectionView.prototype.get_IsCurrentAfterLast = function () {
	return this._view.IsCurrentAfterLast;
};
$asm02.MS.Internal.EnumerableCollectionView.prototype.get_IsCurrentBeforeFirst = function () {
	return this._view.IsCurrentBeforeFirst;
};
$asm02.MS.Internal.EnumerableCollectionView.prototype.MoveCurrentToFirst = function () {
	return this._view.MoveCurrentToFirst();
};
$asm02.MS.Internal.EnumerableCollectionView.prototype.MoveCurrentToPrevious = function () {
	return this._view.MoveCurrentToPrevious();
};
$asm02.MS.Internal.EnumerableCollectionView.prototype.MoveCurrentToNext = function () {
	return this._view.MoveCurrentToNext();
};
$asm02.MS.Internal.EnumerableCollectionView.prototype.MoveCurrentToLast = function () {
	return this._view.MoveCurrentToLast();
};
$asm02.MS.Internal.EnumerableCollectionView.prototype.MoveCurrentTo = function (item) {
	return this._view.MoveCurrentTo(item);
};
$asm02.MS.Internal.EnumerableCollectionView.prototype.MoveCurrentToPosition = function (position) {
	return this._view.MoveCurrentToPosition(position);
};
$asm02.MS.Internal.EnumerableCollectionView.prototype.get_Count = function () {
	this.EnsureSnapshot();
	return this._view.Count;
};
$asm02.MS.Internal.EnumerableCollectionView.prototype.get_IsEmpty = function () {
	this.EnsureSnapshot();
	return ((this._view === null) || this._view.IsEmpty);
};
$asm02.MS.Internal.EnumerableCollectionView.prototype.get_NeedsRefresh = function () {
	return this._view.NeedsRefresh;
};
$asm02.MS.Internal.EnumerableCollectionView.prototype.IndexOf = function (item) {
	this.EnsureSnapshot();
	return this._view.IndexOf(item);
};
$asm02.MS.Internal.EnumerableCollectionView.prototype.PassesFilter = function (item) {
	return (!this._view.CanFilter || 
		(this._view.Filter === null) || this._view.Filter(item));
};
$asm02.MS.Internal.EnumerableCollectionView.prototype.GetItemAt = function (index) {
	this.EnsureSnapshot();
	return this._view.GetItemAt(index);
};
$asm02.MS.Internal.EnumerableCollectionView.prototype.GetEnumerator = function () {
	this.EnsureSnapshot();
	return this._view.IEnumerable_GetEnumerator();
};
$asm02.MS.Internal.EnumerableCollectionView.prototype.RefreshOverride = function () {
	this.LoadSnapshot(this.SourceCollection);
};
$asm02.MS.Internal.EnumerableCollectionView.prototype.ProcessCollectionChanged = function (args) {
	switch (Number(args.Action)) {
		case 0: 
			if (!((args.NewStartingIndex >= 0) && (this._snapshot.Count > args.NewStartingIndex))) {
			__loop0__: 
				for (var i = 0; i < args.NewItems.ICollection_Count; ++i) {
					this._snapshot.Add(args.NewItems.IList_get_Item(i));
				}
				return;
			}
		__loop1__: 
			for (var j = (args.NewItems.ICollection_Count - 1); j >= 0; --j) {
				this._snapshot.Insert(args.NewStartingIndex, args.NewItems.IList_get_Item(j));
			}
			return;
		case 1: 
			if (args.OldStartingIndex < 0) {
				throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("EnumerableCollectionView_AddedItemNotFound")]);
			}
			var k = (args.OldItems.ICollection_Count - 1);
			var num = (args.OldStartingIndex + k);
		__loop2__: 
			while (k >= 0) {
				if (!System.Object.Equals(args.OldItems.IList_get_Item(k), this._snapshot.get_Item(num))) {
					throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("ListCollectionView_AddedItemNotAtIndex")]);
				}
				this._snapshot.RemoveAt(num);
				--k;
				--num;
			}
			return;
		case 2: 
			var l = (args.NewItems.ICollection_Count - 1);
			var num2 = (args.NewStartingIndex + l);
		__loop3__: 
			while (l >= 0) {
				if (!System.Object.Equals(args.OldItems.IList_get_Item(l), this._snapshot.get_Item(num2))) {
					throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("ListCollectionView_AddedItemNotAtIndex")]);
				}
				this._snapshot.set_Item(num2, args.NewItems.IList_get_Item(l));
				--l;
				--num2;
			}
			return;
		case 3: 
			break;
		case 4: 
			this.LoadSnapshot(this.SourceCollection);
			break;
		default: 
			return;
	}
};
$asm02.MS.Internal.EnumerableCollectionView.prototype.LoadSnapshot = function (source) {
	$asm02.System.Windows.Data.CollectionView.prototype.OnCurrentChanging$0.call(this);
	var currentItem = this.CurrentItem;
	var currentPosition = this.CurrentPosition;
	var isCurrentBeforeFirst = this.IsCurrentBeforeFirst;
	var isCurrentAfterLast = this.IsCurrentAfterLast;
	this.LoadSnapshotCore(source);
	this.OnCollectionChanged$0(JSIL.New(System.Collections.Specialized.NotifyCollectionChangedEventArgs, "_ctor$0", [System.Collections.Specialized.NotifyCollectionChangedAction.Reset]));
	this.OnCurrentChanged();
	if (this.IsCurrentAfterLast !== isCurrentAfterLast) {
		this.OnPropertyChanged$0(new System.ComponentModel.PropertyChangedEventArgs("IsCurrentAfterLast"));
	}
	if (this.IsCurrentBeforeFirst !== isCurrentBeforeFirst) {
		this.OnPropertyChanged$0(new System.ComponentModel.PropertyChangedEventArgs("IsCurrentBeforeFirst"));
	}
	if (currentPosition !== this.CurrentPosition) {
		this.OnPropertyChanged$0(new System.ComponentModel.PropertyChangedEventArgs("CurrentPosition"));
	}
	if (currentItem !== this.CurrentItem) {
		this.OnPropertyChanged$0(new System.ComponentModel.PropertyChangedEventArgs("CurrentItem"));
	}
};
$asm02.MS.Internal.EnumerableCollectionView.prototype.LoadSnapshotCore = function (source) {
	this._trackingEnumerator = source.IEnumerable_GetEnumerator();
	var disposable = this.IgnoreViewEvents();
	try {
		this._snapshot.Clear();
	__loop0__: 
		while (this._trackingEnumerator.IEnumerator_MoveNext()) {
			this._snapshot.Add(this._trackingEnumerator.IEnumerator_Current);
		}
	} finally {
		if (disposable !== null) {
			disposable.IDisposable_Dispose();
		}
	}
};
$asm02.MS.Internal.EnumerableCollectionView.prototype.EnsureSnapshot = function () {
	if (this._pollForChanges) {
		try {
			this._trackingEnumerator.IEnumerator_MoveNext();
		} catch ($exception) {
			if (JSIL.CheckType($exception, System.InvalidOperationException)) {
				this.LoadSnapshotCore(this.SourceCollection);
			} else {
				throw $exception;
			}
		}
	}
};
$asm02.MS.Internal.EnumerableCollectionView.prototype.IgnoreViewEvents = function () {
	return new $asm02.MS.Internal.EnumerableCollectionView.IgnoreViewEventsHelper(this);
};
$asm02.MS.Internal.EnumerableCollectionView.prototype.BeginIgnoreEvents = function () {
	++this._ignoreEventsLevel;
};
$asm02.MS.Internal.EnumerableCollectionView.prototype.EndIgnoreEvents = function () {
	--this._ignoreEventsLevel;
};
$asm02.MS.Internal.EnumerableCollectionView.prototype._OnPropertyChanged = function (sender, args) {
	var propertyName = null, num = new JSIL.Variable(0);
	if (this._ignoreEventsLevel !== 0) {
		return;
	}
	if ((propertyName = args.PropertyName) !== null) {
		if (JSIL.IgnoredMember("$$method0x6001952-1") === null) {
			var expr_25 = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.String, System.Int32), "_ctor$1", [7]);
			expr_25.Add("CanAddNew", 0);
			expr_25.Add("CanCancelEdit", 1);
			expr_25.Add("CanRemove", 2);
			expr_25.Add("CurrentAddItem", 3);
			expr_25.Add("CurrentEditItem", 4);
			expr_25.Add("IsAddingNew", 5);
			expr_25.Add("IsEditingItem", 6);
			JSIL.IgnoredMember("$$method0x6001952-1") = expr_25;
		}
		if (JSIL.IgnoredMember("$$method0x6001952-1").TryGetValue(propertyName, /* ref */ num)) {
			switch (num.value) {
				case 0: 
				case 1: 
				case 2: 
				case 3: 
				case 4: 
				case 5: 
				case 6: 
					return;
			}
		}
	}
	this.OnPropertyChanged$0(args);
};
$asm02.MS.Internal.EnumerableCollectionView.prototype._OnViewChanged = function (sender, args) {
	if (this._ignoreEventsLevel !== 0) {
		return;
	}
	this.OnCollectionChanged$0(args);
};
$asm02.MS.Internal.EnumerableCollectionView.prototype._OnCurrentChanging = function (sender, args) {
	if (this._ignoreEventsLevel !== 0) {
		return;
	}
	this.OnCurrentChanging$1(args);
};
$asm02.MS.Internal.EnumerableCollectionView.prototype._OnCurrentChanged = function (sender, args) {
	if (this._ignoreEventsLevel !== 0) {
		return;
	}
	this.OnCurrentChanged();
};
JSIL.MakeProperty($asm02.MS.Internal.EnumerableCollectionView.prototype, "Culture", 
	$asm02.MS.Internal.EnumerableCollectionView.prototype.get_Culture, $asm02.MS.Internal.EnumerableCollectionView.prototype.set_Culture);
JSIL.MakeProperty($asm02.MS.Internal.EnumerableCollectionView.prototype, "Filter", 
	$asm02.MS.Internal.EnumerableCollectionView.prototype.get_Filter, $asm02.MS.Internal.EnumerableCollectionView.prototype.set_Filter);
JSIL.MakeProperty($asm02.MS.Internal.EnumerableCollectionView.prototype, "CanFilter", 
	$asm02.MS.Internal.EnumerableCollectionView.prototype.get_CanFilter, null);
JSIL.MakeProperty($asm02.MS.Internal.EnumerableCollectionView.prototype, "SortDescriptions", 
	$asm02.MS.Internal.EnumerableCollectionView.prototype.get_SortDescriptions, null);
JSIL.MakeProperty($asm02.MS.Internal.EnumerableCollectionView.prototype, "CanSort", 
	$asm02.MS.Internal.EnumerableCollectionView.prototype.get_CanSort, null);
JSIL.MakeProperty($asm02.MS.Internal.EnumerableCollectionView.prototype, "CanGroup", 
	$asm02.MS.Internal.EnumerableCollectionView.prototype.get_CanGroup, null);
JSIL.MakeProperty($asm02.MS.Internal.EnumerableCollectionView.prototype, "GroupDescriptions", 
	$asm02.MS.Internal.EnumerableCollectionView.prototype.get_GroupDescriptions, null);
JSIL.MakeProperty($asm02.MS.Internal.EnumerableCollectionView.prototype, "Groups", 
	$asm02.MS.Internal.EnumerableCollectionView.prototype.get_Groups, null);
JSIL.MakeProperty($asm02.MS.Internal.EnumerableCollectionView.prototype, "CurrentItem", 
	$asm02.MS.Internal.EnumerableCollectionView.prototype.get_CurrentItem, null);
JSIL.MakeProperty($asm02.MS.Internal.EnumerableCollectionView.prototype, "CurrentPosition", 
	$asm02.MS.Internal.EnumerableCollectionView.prototype.get_CurrentPosition, null);
JSIL.MakeProperty($asm02.MS.Internal.EnumerableCollectionView.prototype, "IsCurrentAfterLast", 
	$asm02.MS.Internal.EnumerableCollectionView.prototype.get_IsCurrentAfterLast, null);
JSIL.MakeProperty($asm02.MS.Internal.EnumerableCollectionView.prototype, "IsCurrentBeforeFirst", 
	$asm02.MS.Internal.EnumerableCollectionView.prototype.get_IsCurrentBeforeFirst, null);
JSIL.MakeProperty($asm02.MS.Internal.EnumerableCollectionView.prototype, "Count", 
	$asm02.MS.Internal.EnumerableCollectionView.prototype.get_Count, null);
JSIL.MakeProperty($asm02.MS.Internal.EnumerableCollectionView.prototype, "IsEmpty", 
	$asm02.MS.Internal.EnumerableCollectionView.prototype.get_IsEmpty, null);
JSIL.MakeProperty($asm02.MS.Internal.EnumerableCollectionView.prototype, "NeedsRefresh", 
	$asm02.MS.Internal.EnumerableCollectionView.prototype.get_NeedsRefresh, null);
$asm02.MS.Internal.EnumerableCollectionView.prototype._view = null;
$asm02.MS.Internal.EnumerableCollectionView.prototype._snapshot = null;
$asm02.MS.Internal.EnumerableCollectionView.prototype._trackingEnumerator = null;
$asm02.MS.Internal.EnumerableCollectionView.prototype._ignoreEventsLevel = 0;
$asm02.MS.Internal.EnumerableCollectionView.prototype._pollForChanges = false;

$asm02.MS.Internal.EnumerableCollectionView.IgnoreViewEventsHelper.prototype._ctor = function (parent) {
	System.Object.prototype._ctor.call(this);
	this._parent = parent;
	this._parent.BeginIgnoreEvents();
};
$asm02.MS.Internal.EnumerableCollectionView.IgnoreViewEventsHelper.prototype.Dispose = function () {
	if (this._parent !== null) {
		this._parent.EndIgnoreEvents();
		this._parent = null;
	}
	System.GC.SuppressFinalize(this);
};
$asm02.MS.Internal.EnumerableCollectionView.IgnoreViewEventsHelper.prototype._parent = null;

$asm02.MS.Internal.ClipboardXAMLSerializer.IsForbiddenNavigateUri = function (property, value) {
	if (property.Equals$2("NavigateUri", System.StringComparison.OrdinalIgnoreCase)) {
		var uri = JSIL.New(System.Uri, "_ctor$1", [value, System.UriKind.RelativeOrAbsolute]);
		if (!(!uri.IsAbsoluteUri || !uri.Scheme.Equals$2("file", System.StringComparison.OrdinalIgnoreCase))) {
			return true;
		}
	}
	return false;
};
$asm02.MS.Internal.ClipboardXAMLSerializer.prototype.StartDocument = function (hasTrailingParagraphBreakOnPaste) {
	this.stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
	var xmlWriterSettings = new System.Xml.XmlWriterSettings();
	xmlWriterSettings.CheckCharacters = true;
	xmlWriterSettings.ConformanceLevel = System.Xml.ConformanceLevel.Document;
	xmlWriterSettings.Encoding = System.Text.Encoding.Unicode;
	xmlWriterSettings.Indent = false;
	xmlWriterSettings.NamespaceHandling = System.Xml.NamespaceHandling.OmitDuplicates;
	xmlWriterSettings.NewLineHandling = System.Xml.NewLineHandling.None;
	xmlWriterSettings.NewLineOnAttributes = false;
	xmlWriterSettings.OmitXmlDeclaration = true;
	this.xmlWriter = System.Xml.XmlWriter.Create$5(this.stringBuilder, xmlWriterSettings);
	this.xmlWriter.WriteStartDocument$0();
	this.xmlWriter.WriteStartElement$0("Section", $asm02.MS.Internal.ClipboardXAMLSerializer.XamlNamespace);
	this.xmlWriter.WriteAttributeString$2("xml", "space", null, "preserve");
	if (!hasTrailingParagraphBreakOnPaste) {
		this.xmlWriter.WriteAttributeString$1("HasTrailingParagraphBreakOnPaste", hasTrailingParagraphBreakOnPaste.toString());
	}
};
$asm02.MS.Internal.ClipboardXAMLSerializer.prototype.StartElement = function (textElement) {
	var localName = JSIL.GetType(textElement).Name;
	if (System.Windows.Documents.InlineUIContainer.IsInstanceOfType(textElement)) {
		localName = "Run";
	}
	this.xmlWriter.WriteStartElement$2(localName);
};
$asm02.MS.Internal.ClipboardXAMLSerializer.prototype.WriteAttribute$0 = function (property, value) {
	var propertyType = property._propertyType;
	if (System.Windows.Media.Brush.IsAssignableFrom(propertyType)) {
		if (System.Windows.Media.SolidColorBrush.IsInstanceOfType(value)) {
			var solidColorBrush = JSIL.Cast(value, System.Windows.Media.SolidColorBrush);
			this.xmlWriter.WriteAttributeString$1(property.Name, solidColorBrush.Color.ConvertToString(null, System.Globalization.CultureInfo.InvariantCulture));
			return;
		}
	} else {
		this.xmlWriter.WriteAttributeString$1(property.Name, value.toString());
	}
};
$asm02.MS.Internal.ClipboardXAMLSerializer.prototype.WriteAttribute$1 = function (property, value) {
	if ($asm02.MS.Internal.ClipboardXAMLSerializer.IsForbiddenNavigateUri(property, value)) {
		return;
	}
	this.xmlWriter.WriteAttributeString$1(property, value);
};
$asm02.MS.Internal.ClipboardXAMLSerializer.prototype.WriteString = function (content) {
	this.xmlWriter.WriteString(content);
};
$asm02.MS.Internal.ClipboardXAMLSerializer.prototype.EndElement = function () {
	this.xmlWriter.WriteEndElement();
};
$asm02.MS.Internal.ClipboardXAMLSerializer.prototype.EndDocument = function (/* ref */ resultXAML) {
	this.xmlWriter.WriteEndDocument();
	this.xmlWriter.Close();
	resultXAML.value = this.stringBuilder.toString();
	this.stringBuilder = null;
	this.xmlWriter = null;
};
$asm02.MS.Internal.ClipboardXAMLSerializer.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
JSIL.OverloadedMethod($asm02.MS.Internal.ClipboardXAMLSerializer.prototype, "WriteAttribute", [
		["WriteAttribute$0", [System.Windows.DependencyProperty, System.Object]], 
		["WriteAttribute$1", [System.String, System.String]]
	]);
Object.defineProperty($asm02.MS.Internal.ClipboardXAMLSerializer, "DoStartDocument", {
		"value": 1}
);
Object.defineProperty($asm02.MS.Internal.ClipboardXAMLSerializer, "DoStartElement", {
		"value": 2}
);
Object.defineProperty($asm02.MS.Internal.ClipboardXAMLSerializer, "DoWriteAttribute", {
		"value": 3}
);
Object.defineProperty($asm02.MS.Internal.ClipboardXAMLSerializer, "DoEndElement", {
		"value": 4}
);
$asm02.MS.Internal.ClipboardXAMLSerializer.prototype.xmlWriter = null;
$asm02.MS.Internal.ClipboardXAMLSerializer.prototype.stringBuilder = null;
$asm02.MS.Internal.ClipboardXAMLSerializer.XamlNamespace = null;
$asm02.MS.Internal.ClipboardXAMLSerializer._cctor = function () {
	$asm02.MS.Internal.ClipboardXAMLSerializer.XamlNamespace = "http://schemas.microsoft.com/winfx/2006/xaml/presentation";
};

$asm02.MS.Internal.RichTextXAMLValidator.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
	this.xmlReader = null;
};
$asm02.MS.Internal.RichTextXAMLValidator.prototype.SetupXmlReader = function (inputXAML) {
	var xmlReaderSettings = new System.Xml.XmlReaderSettings();
	xmlReaderSettings.CheckCharacters = true;
	xmlReaderSettings.CloseInput = true;
	xmlReaderSettings.ConformanceLevel = System.Xml.ConformanceLevel.Document;
	xmlReaderSettings.XmlResolver = null;
	this.xmlReader = System.Xml.XmlReader.Create$8(new System.IO.StringReader(inputXAML), xmlReaderSettings);
};
$asm02.MS.Internal.RichTextXAMLValidator.prototype.IsAllowed = function (allowedArray) {
	return allowedArray.IList_Contains(this.xmlReader.Name);
};
$asm02.MS.Internal.RichTextXAMLValidator.prototype.ValidateRootElement = function () {
	if (!((this.xmlReader.NodeType === System.Xml.XmlNodeType.Element) && 
			this.xmlReader.Name.Equals$2("Section", System.StringComparison.Ordinal) && 
			!(this.xmlReader.Prefix != System.String.Empty) && !(this.xmlReader.LookupNamespace(System.String.Empty) != $asm02.MS.Internal.ClipboardXAMLSerializer.XamlNamespace))) {
		throw JSIL.New(System.ArgumentException, "_ctor$0", []);
	}
	return this.ValidateAttributes();
};
$asm02.MS.Internal.RichTextXAMLValidator.prototype.ValidateAttributes = function () {
__loop0__: 
	while (this.xmlReader.MoveToNextAttribute()) {
		if (!this.IsAllowed($asm02.MS.Internal.RichTextXAMLValidator.permittedAttributes)) {
			throw JSIL.New(System.ArgumentException, "_ctor$0", []);
		}
		var text = this.xmlReader.Value.Trim$1();
		if (!(!text.StartsWith$0("{") || !text.EndsWith$0("}"))) {
			throw JSIL.New(System.ArgumentException, "_ctor$0", []);
		}
		if ($asm02.MS.Internal.ClipboardXAMLSerializer.IsForbiddenNavigateUri(this.xmlReader.Name, text)) {
			throw JSIL.New(System.ArgumentException, "_ctor$0", []);
		}
	}
	return true;
};
$asm02.MS.Internal.RichTextXAMLValidator.prototype.ValidateXAML = function (inputXAML) {
	var result = false;
	try {
		this.SetupXmlReader(inputXAML);
		if (!((this.xmlReader.MoveToContent() !== System.Xml.XmlNodeType.Element) || !this.ValidateRootElement())) {
		__loop0__: 
			while (this.xmlReader.Read()) {
				var nodeType = this.xmlReader.NodeType;
				if (nodeType === System.Xml.XmlNodeType.Element) {
					if (!this.IsAllowed($asm02.MS.Internal.RichTextXAMLValidator.permittedTextElements) || 
						!(this.xmlReader.Prefix == System.String.Empty) || !(this.xmlReader.LookupNamespace(System.String.Empty) == $asm02.MS.Internal.ClipboardXAMLSerializer.XamlNamespace)) {
						throw JSIL.New(System.ArgumentException, "_ctor$0", []);
					}
					this.ValidateAttributes();
				}
			}
			result = true;
		}
	} catch ($exception) {
	}
	if (this.xmlReader !== null) {
		this.xmlReader.Close();
		this.xmlReader = null;
	}
	return result;
};
$asm02.MS.Internal.RichTextXAMLValidator.permittedTextElements = null;
$asm02.MS.Internal.RichTextXAMLValidator.permittedAttributes = null;
$asm02.MS.Internal.RichTextXAMLValidator.prototype.xmlReader = null;
$asm02.MS.Internal.RichTextXAMLValidator._cctor = function () {
	$asm02.MS.Internal.RichTextXAMLValidator.permittedTextElements = JSIL.Array.New(System.String, ["Paragraph", "Run", "LineBreak", "Span", "Bold", "Italic", "Underline", "Hyperlink"]);
	$asm02.MS.Internal.RichTextXAMLValidator.permittedAttributes = JSIL.Array.New(System.String, ["xml:space", "xml:lang", "xmlns", "FontSize", "FontFamily", "Foreground", "FontWeight", "FontStyle", "FontStretch", "TextDecorations", "FlowDirection", "Text", "HasTrailingParagraphBreakOnPaste", "TextAlignment", "TargetName", "NavigateUri", "MouseOverForeground", "MouseOverTextDecorations"]);
};

$asm02.MS.Internal.Comparer.prototype._ctor = function (culture) {
	System.Object.prototype._ctor.call(this);
	this._culture = culture;
};
$asm02.MS.Internal.Comparer.prototype.Compare = function (a, b) {
	if (!((JSIL.TryCast(a, System.String) === null) || 
			(JSIL.TryCast(b, System.String) === null) || (this._culture === null))) {
		var stringComparer = System.StringComparer.Create(this._culture, false);
		return stringComparer.Compare$1(JSIL.TryCast(a, System.String), JSIL.TryCast(b, System.String));
	}
	return System.Collections.Generic.Comparer$b1.Of(System.Object).Default.Compare(a, b);
};
$asm02.MS.Internal.Comparer.prototype._culture = null;

$asm02.MS.Internal.SecurityCriticalData$b1.prototype._ctor = function (value) {
	this._value = value;
};
$asm02.MS.Internal.SecurityCriticalData$b1.prototype.get_Value = function () {
	return this._value;
};
JSIL.MakeProperty($asm02.MS.Internal.SecurityCriticalData$b1.prototype, "Value", 
	$asm02.MS.Internal.SecurityCriticalData$b1.prototype.get_Value, null);
$asm02.MS.Internal.SecurityCriticalData$b1.prototype._value = null;

$asm02.MS.Internal.SecurityCriticalDataForMultipleGetAndSet$b1.prototype._ctor = function (value) {
	System.Object.prototype._ctor.call(this);
	this._value = value;
};
$asm02.MS.Internal.SecurityCriticalDataForMultipleGetAndSet$b1.prototype.get_Value = function () {
	return this._value;
};
$asm02.MS.Internal.SecurityCriticalDataForMultipleGetAndSet$b1.prototype.set_Value = function (value) {
	this._value = value;
};
JSIL.MakeProperty($asm02.MS.Internal.SecurityCriticalDataForMultipleGetAndSet$b1.prototype, "Value", 
	$asm02.MS.Internal.SecurityCriticalDataForMultipleGetAndSet$b1.prototype.get_Value, $asm02.MS.Internal.SecurityCriticalDataForMultipleGetAndSet$b1.prototype.set_Value);
$asm02.MS.Internal.SecurityCriticalDataForMultipleGetAndSet$b1.prototype._value = null;

Object.defineProperty($asm02.MS.Internal.Xaml.MS.Impl.KnownStrings, "XmlPrefix", {
		"value": "xml"}
);
Object.defineProperty($asm02.MS.Internal.Xaml.MS.Impl.KnownStrings, "XmlNsPrefix", {
		"value": "xmlns"}
);
Object.defineProperty($asm02.MS.Internal.Xaml.MS.Impl.KnownStrings, "Preserve", {
		"value": "preserve"}
);
Object.defineProperty($asm02.MS.Internal.Xaml.MS.Impl.KnownStrings, "Default", {
		"value": "default"}
);
Object.defineProperty($asm02.MS.Internal.Xaml.MS.Impl.KnownStrings, "UriClrNamespace", {
		"value": "clr-namespace"}
);
Object.defineProperty($asm02.MS.Internal.Xaml.MS.Impl.KnownStrings, "UriAssembly", {
		"value": "assembly"}
);
Object.defineProperty($asm02.MS.Internal.Xaml.MS.Impl.KnownStrings, "StringType", {
		"value": "String"}
);
Object.defineProperty($asm02.MS.Internal.Xaml.MS.Impl.KnownStrings, "ObjectType", {
		"value": "Object"}
);
Object.defineProperty($asm02.MS.Internal.Xaml.MS.Impl.KnownStrings, "Get", {
		"value": "Get"}
);
Object.defineProperty($asm02.MS.Internal.Xaml.MS.Impl.KnownStrings, "Set", {
		"value": "Set"}
);
Object.defineProperty($asm02.MS.Internal.Xaml.MS.Impl.KnownStrings, "Add", {
		"value": "Add"}
);
Object.defineProperty($asm02.MS.Internal.Xaml.MS.Impl.KnownStrings, "Remove", {
		"value": "Remove"}
);
Object.defineProperty($asm02.MS.Internal.Xaml.MS.Impl.KnownStrings, "Handler", {
		"value": "Handler"}
);
Object.defineProperty($asm02.MS.Internal.Xaml.MS.Impl.KnownStrings, "Extension", {
		"value": "Extension"}
);
Object.defineProperty($asm02.MS.Internal.Xaml.MS.Impl.KnownStrings, "IsReadOnly", {
		"value": "IsReadOnly"}
);
Object.defineProperty($asm02.MS.Internal.Xaml.MS.Impl.KnownStrings, "FrameworkElement", {
		"value": "FrameworkElement"}
);
Object.defineProperty($asm02.MS.Internal.Xaml.MS.Impl.KnownStrings, "TypeExtension", {
		"value": "TypeExtension"}
);
Object.defineProperty($asm02.MS.Internal.Xaml.MS.Impl.KnownStrings, "GraveQuote", {
		"value": "`"}
);
Object.defineProperty($asm02.MS.Internal.Xaml.MS.Impl.KnownStrings, "GetEnumerator", {
		"value": "GetEnumerator"}
);
Object.defineProperty($asm02.MS.Internal.Xaml.MS.Impl.KnownStrings, "ICollectionOfT", {
		"value": "System.Collections.Generic.ICollection`1"}
);
Object.defineProperty($asm02.MS.Internal.Xaml.MS.Impl.KnownStrings, "IDictionary", {
		"value": "System.Collections.IDictionary"}
);
Object.defineProperty($asm02.MS.Internal.Xaml.MS.Impl.KnownStrings, "IDictionaryOfKT", {
		"value": "System.Collections.Generic.IDictionary`2"}
);
Object.defineProperty($asm02.MS.Internal.Xaml.MS.Impl.KnownStrings, "NullableOfT", {
		"value": "Nullable`1"}
);
Object.defineProperty($asm02.MS.Internal.Xaml.MS.Impl.KnownStrings, "KeyValuePairOfTT", {
		"value": "KeyValuePair`2"}
);
Object.defineProperty($asm02.MS.Internal.Xaml.MS.Impl.KnownStrings, "UnknownContentProperty", {
		"value": "_UnknownContent"}
);
Object.defineProperty($asm02.MS.Internal.Xaml.MS.Impl.KnownStrings, "AmbientPropertyAttribute", {
		"value": "AmbientPropertyAttribute"}
);
Object.defineProperty($asm02.MS.Internal.Xaml.MS.Impl.KnownStrings, "DependencyPropertySuffix", {
		"value": "Property"}
);
Object.defineProperty($asm02.MS.Internal.Xaml.MS.Impl.KnownStrings, "XpsNamespace", {
		"value": "http://schemas.microsoft.com/xps/2005/06"}
);
Object.defineProperty($asm02.MS.Internal.Xaml.MS.Impl.KnownStrings, "LocalPrefix", {
		"value": "local"}
);
Object.defineProperty($asm02.MS.Internal.Xaml.MS.Impl.KnownStrings, "DefaultPrefix", {
		"value": "p"}
);
Object.defineProperty($asm02.MS.Internal.Xaml.MS.Impl.KnownStrings, "ReferenceName", {
		"value": "__ Reference ID "}
);
Object.defineProperty($asm02.MS.Internal.Xaml.MS.Impl.KnownStrings, "ClrNamespaceFormat", {
		"value": "clr-namespace:{0};assembly={1}"}
);
$asm02.MS.Internal.Xaml.MS.Impl.KnownStrings.WhitespaceChars = null;
$asm02.MS.Internal.Xaml.MS.Impl.KnownStrings._cctor = function () {
	$asm02.MS.Internal.Xaml.MS.Impl.KnownStrings.WhitespaceChars = JSIL.Array.New(System.Char, [" ", "\t", "\n"]);
};

$asm02.MS.Internal.Xaml.MS.Impl.KS.Eq = function (a, b) {
	return System.String.Equals$1(a, b, System.StringComparison.Ordinal);
};
$asm02.MS.Internal.Xaml.MS.Impl.KS.IndexOf = function (src, chars) {
	return src.IndexOf$6(chars, System.StringComparison.Ordinal);
};
$asm02.MS.Internal.Xaml.MS.Impl.KS.StartsWith = function (src, target) {
	return src.StartsWith$1(target, System.StringComparison.Ordinal);
};
$asm02.MS.Internal.Xaml.MS.Impl.KS.Fmt = function (formatString, otherArgs) {
	var invariantCulture = System.Globalization.CultureInfo.InvariantCulture;
	return System.String.Format(invariantCulture, formatString, otherArgs);
};

System.IO.IsolatedStorage.IsolatedStorageSettings.get_ApplicationSettings = function () {
	if (System.IO.IsolatedStorage.IsolatedStorageSettings.s_appSettings === null) {
		System.IO.IsolatedStorage.IsolatedStorageSettings.s_appSettings = new System.IO.IsolatedStorage.IsolatedStorageSettings(false);
	}
	return System.IO.IsolatedStorage.IsolatedStorageSettings.s_appSettings;
};
System.IO.IsolatedStorage.IsolatedStorageSettings.get_SiteSettings = function () {
	if (System.IO.IsolatedStorage.IsolatedStorageSettings.s_siteSettings === null) {
		System.IO.IsolatedStorage.IsolatedStorageSettings.s_siteSettings = new System.IO.IsolatedStorage.IsolatedStorageSettings(true);
	}
	return System.IO.IsolatedStorage.IsolatedStorageSettings.s_siteSettings;
};
System.IO.IsolatedStorage.IsolatedStorageSettings.prototype.get_Count = function () {
	return this._settings.Count;
};
System.IO.IsolatedStorage.IsolatedStorageSettings.prototype.get_Keys = function () {
	return this._settings.Keys;
};
System.IO.IsolatedStorage.IsolatedStorageSettings.prototype.get_Values = function () {
	return this._settings.Values;
};
System.IO.IsolatedStorage.IsolatedStorageSettings.prototype.get_Item = function (key) {
	this.CheckNullKey(key);
	return this._settings.get_Item(key);
};
System.IO.IsolatedStorage.IsolatedStorageSettings.prototype.set_Item = function (key, value) {
	this.CheckNullKey(key);
	this._settings.set_Item(key, value);
};
System.IO.IsolatedStorage.IsolatedStorageSettings.prototype._ctor = function (useSiteSettings) {
	System.Object.prototype._ctor.call(this);
	if (useSiteSettings) {
		this._appStore = System.IO.IsolatedStorage.IsolatedStorageFile.GetUserStoreForSite();
	} else {
		this._appStore = System.IO.IsolatedStorage.IsolatedStorageFile.GetUserStoreForApplication();
	}
	this.Reload();
};
System.IO.IsolatedStorage.IsolatedStorageSettings.prototype.Finalize = function () {
	try {
		if (this._appStore !== null) {
			try {
				this.Save();
			} catch ($exception) {
			}
			this._appStore.Dispose();
		}
	} finally {
		System.Object.prototype.Finalize.call(this);
	}
};
System.IO.IsolatedStorage.IsolatedStorageSettings.prototype.Add = function (key, value) {
	this.CheckNullKey(key);
	this._settings.Add(key, value);
};
System.IO.IsolatedStorage.IsolatedStorageSettings.prototype.Clear = function () {
	this._settings.Clear();
	this.Save();
};
System.IO.IsolatedStorage.IsolatedStorageSettings.prototype.Contains = function (key) {
	this.CheckNullKey(key);
	return this._settings.ContainsKey(key);
};
System.IO.IsolatedStorage.IsolatedStorageSettings.prototype.Reload = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				var isolatedStorageFileStream = this._appStore.OpenFile$0("__LocalSettings", System.IO.FileMode.OpenOrCreate);
				try {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								var streamReader = JSIL.New(System.IO.StreamReader, "_ctor$1", [isolatedStorageFileStream]);
								try {
									var __label2__ = "__entry2__";
								__step2__: 
									while (true) {
										switch (__label2__) {
											case "__entry2__":
												if (isolatedStorageFileStream.Length > 0) {
													try {
														var list = new (System.Collections.Generic.List$b1.Of(System.Type)) ();
														var text = streamReader.ReadLine();
														var separator = JSIL.Array.New(System.Char, 1);
														var array = text.Split(separator);
													__loop0__: 
														for (var i = 0; i < array.length; ++i) {
															var type = System.Type.GetType$1(array[i], false);
															if (type !== null) {
																list.Add(type);
															}
														}
														isolatedStorageFileStream.Position = (text.length + System.Environment.NewLine.length);
														var dataContractSerializer = JSIL.New(System.Runtime.Serialization.DataContractSerializer, "_ctor$1", [System.Collections.Generic.Dictionary$b2.Of(System.String, System.Object), list]);
														this._settings = JSIL.Cast(dataContractSerializer.ReadObject$0(isolatedStorageFileStream), System.Collections.Generic.Dictionary$b2.Of(System.String, System.Object));
														__label2__ = "IL_CD";
														continue __step2__;
													} catch ($exception) {
														this._settings = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.String, System.Object), "_ctor$0", []);
														__label2__ = "IL_CD";
														continue __step2__;
													}
												}
												this._settings = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.String, System.Object), "_ctor$0", []);
												__label2__ = "IL_CD";
												continue __step2__;
												break;
											case "IL_CD":
												break __step2__;
										}
									}
								} finally {
									if (streamReader !== null) {
										streamReader.IDisposable_Dispose();
									}
								}
								break __step1__;
						}
					}
				} finally {
					if (isolatedStorageFileStream !== null) {
						isolatedStorageFileStream.IDisposable_Dispose();
					}
				}
				break __step0__;
		}
	}
};
System.IO.IsolatedStorage.IsolatedStorageSettings.prototype.Remove = function (key) {
	this.CheckNullKey(key);
	return this._settings.Remove(key);
};
System.IO.IsolatedStorage.IsolatedStorageSettings.prototype.Save = function () {
	var isolatedStorageFileStream = this._appStore.OpenFile$0("__LocalSettings", System.IO.FileMode.OpenOrCreate);
	try {
		var memoryStream = JSIL.New(System.IO.MemoryStream, "_ctor$0", []);
		try {
			var dictionary = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.Type, System.Boolean), "_ctor$0", []);
			var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
			var enumerator = JSIL.Cast(this._settings.Values, System.Collections.Generic.Dictionary$b2.ValueCollection.Of(System.String, System.Object)).GetEnumerator().MemberwiseClone();
			try {
			__loop0__: 
				while (enumerator.MoveNext()) {
					var current = enumerator.Current;
					if (current !== null) {
						var type = (JSIL.GetType(current));
						if (!(type.IsPrimitive || (type === System.String))) {
							dictionary.set_Item(type, true);
							if (stringBuilder.Length > 0) {
								stringBuilder.Append$7("\0");
							}
							stringBuilder.Append$2(type.AssemblyQualifiedName);
						}
					}
				}
			} finally {
				enumerator.IDisposable_Dispose();
			}
			stringBuilder.Append$2(System.Environment.NewLine);
			var bytes = System.Text.Encoding.UTF8.GetBytes$3(stringBuilder.toString());
			memoryStream.Write(bytes, 0, bytes.length);
			var dataContractSerializer = JSIL.New(System.Runtime.Serialization.DataContractSerializer, "_ctor$1", [System.Collections.Generic.Dictionary$b2.Of(System.String, System.Object), JSIL.Cast(dictionary.Keys, System.Collections.Generic.IEnumerable$b1.Of(System.Type))]);
			dataContractSerializer.WriteObject$0(memoryStream, this._settings);
			if (memoryStream.Length > (this._appStore.AvailableFreeSpace + isolatedStorageFileStream.Length)) {
				throw JSIL.New(System.IO.IsolatedStorage.IsolatedStorageException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("IsolatedStorageSettings_NotEnoughSpace")]);
			}
			isolatedStorageFileStream.SetLength(0);
			var array = memoryStream.ToArray();
			isolatedStorageFileStream.Write(array, 0, array.length);
		} finally {
			if (memoryStream !== null) {
				memoryStream.IDisposable_Dispose();
			}
		}
	} finally {
		if (isolatedStorageFileStream !== null) {
			isolatedStorageFileStream.IDisposable_Dispose();
		}
	}
};
System.IO.IsolatedStorage.IsolatedStorageSettings.prototype.TryGetValue$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, key, /* ref */ value) {
		var obj = new JSIL.Variable(null);
		this.CheckNullKey(key);
		if (this._settings.TryGetValue(key, /* ref */ obj)) {
			value.value = JSIL.Cast(obj.value, T);
			return true;
		}
		value.value = null;
		return false;
	}
);
System.IO.IsolatedStorage.IsolatedStorageSettings.prototype.CheckNullKey = function (key) {
	if (key === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["key"]);
	}
};
System.IO.IsolatedStorage.IsolatedStorageSettings.prototype.IDictionary$b2_ContainsKey = function (key) {
	this.CheckNullKey(key);
	return this._settings.ContainsKey(key);
};
System.IO.IsolatedStorage.IsolatedStorageSettings.prototype.IDictionary$b2_get_Keys = function () {
	return JSIL.Cast(this._settings.Keys, System.Collections.Generic.ICollection$b1.Of(System.String));
};
System.IO.IsolatedStorage.IsolatedStorageSettings.prototype.IDictionary$b2_TryGetValue = function (key, /* ref */ value) {
	this.CheckNullKey(key);
	return this._settings.TryGetValue(key, /* ref */ value);
};
System.IO.IsolatedStorage.IsolatedStorageSettings.prototype.IDictionary$b2_get_Values = function () {
	return JSIL.Cast(this._settings.Values, System.Collections.Generic.ICollection$b1.Of(System.Object));
};
System.IO.IsolatedStorage.IsolatedStorageSettings.prototype.ICollection$b1_Add = function (item) {
	this._settings.ICollection$b1_Add(item);
};
System.IO.IsolatedStorage.IsolatedStorageSettings.prototype.ICollection$b1_Clear = function () {
	this._settings.Clear();
};
System.IO.IsolatedStorage.IsolatedStorageSettings.prototype.ICollection$b1_Contains = function (item) {
	return this._settings.ICollection$b1_Contains(item);
};
System.IO.IsolatedStorage.IsolatedStorageSettings.prototype.ICollection$b1_CopyTo = function (array, arrayIndex) {
	this._settings.ICollection$b1_CopyTo(array, arrayIndex);
};
System.IO.IsolatedStorage.IsolatedStorageSettings.prototype.ICollection$b1_get_IsReadOnly = function () {
	return false;
};
System.IO.IsolatedStorage.IsolatedStorageSettings.prototype.ICollection$b1_Remove = function (item) {
	return this._settings.ICollection$b1_Remove(item);
};
System.IO.IsolatedStorage.IsolatedStorageSettings.prototype.IEnumerable$b1_GetEnumerator = function () {
	return this._settings.GetEnumerator();
};
System.IO.IsolatedStorage.IsolatedStorageSettings.prototype.IEnumerable_GetEnumerator = function () {
	return this._settings.GetEnumerator();
};
System.IO.IsolatedStorage.IsolatedStorageSettings.prototype.IDictionary_Add = function (key, value) {
	this.CheckNullKey(key);
	this._settings.IDictionary_Add(key, value);
};
System.IO.IsolatedStorage.IsolatedStorageSettings.prototype.IDictionary_Clear = function () {
	this._settings.IDictionary_Clear();
};
System.IO.IsolatedStorage.IsolatedStorageSettings.prototype.IDictionary_Contains = function (key) {
	this.CheckNullKey(key);
	return this._settings.IDictionary_Contains(key);
};
System.IO.IsolatedStorage.IsolatedStorageSettings.prototype.IDictionary_GetEnumerator = function () {
	return this._settings.IDictionary_GetEnumerator();
};
System.IO.IsolatedStorage.IsolatedStorageSettings.prototype.IDictionary_get_IsFixedSize = function () {
	return false;
};
System.IO.IsolatedStorage.IsolatedStorageSettings.prototype.IDictionary_get_IsReadOnly = function () {
	return false;
};
System.IO.IsolatedStorage.IsolatedStorageSettings.prototype.IDictionary_Remove = function (key) {
	this.CheckNullKey(key);
	this._settings.IDictionary_Remove(key);
};
System.IO.IsolatedStorage.IsolatedStorageSettings.prototype.IDictionary_get_Item = function (key) {
	this.CheckNullKey(key);
	return this._settings.IDictionary_get_Item(key);
};
System.IO.IsolatedStorage.IsolatedStorageSettings.prototype.IDictionary_set_Item = function (key, value) {
	this.CheckNullKey(key);
	this._settings.IDictionary_set_Item(key, value);
};
System.IO.IsolatedStorage.IsolatedStorageSettings.prototype.ICollection_CopyTo = function (array, index) {
	this._settings.ICollection_CopyTo(array, index);
};
System.IO.IsolatedStorage.IsolatedStorageSettings.prototype.ICollection_get_Count = function () {
	return this._settings.Count;
};
System.IO.IsolatedStorage.IsolatedStorageSettings.prototype.ICollection_get_IsSynchronized = function () {
	return this._settings.ICollection_IsSynchronized;
};
System.IO.IsolatedStorage.IsolatedStorageSettings.prototype.ICollection_get_SyncRoot = function () {
	return this._settings.ICollection_SyncRoot;
};
JSIL.MakeProperty(System.IO.IsolatedStorage.IsolatedStorageSettings, "ApplicationSettings", 
	System.IO.IsolatedStorage.IsolatedStorageSettings.get_ApplicationSettings, null);
JSIL.MakeProperty(System.IO.IsolatedStorage.IsolatedStorageSettings, "SiteSettings", 
	System.IO.IsolatedStorage.IsolatedStorageSettings.get_SiteSettings, null);
JSIL.MakeProperty(System.IO.IsolatedStorage.IsolatedStorageSettings.prototype, "Count", 
	System.IO.IsolatedStorage.IsolatedStorageSettings.prototype.get_Count, null);
JSIL.MakeProperty(System.IO.IsolatedStorage.IsolatedStorageSettings.prototype, "Keys", 
	System.IO.IsolatedStorage.IsolatedStorageSettings.prototype.get_Keys, null);
JSIL.MakeProperty(System.IO.IsolatedStorage.IsolatedStorageSettings.prototype, "Values", 
	System.IO.IsolatedStorage.IsolatedStorageSettings.prototype.get_Values, null);
JSIL.MakeProperty(System.IO.IsolatedStorage.IsolatedStorageSettings.prototype, "Item", 
	System.IO.IsolatedStorage.IsolatedStorageSettings.prototype.get_Item, System.IO.IsolatedStorage.IsolatedStorageSettings.prototype.set_Item);
JSIL.MakeProperty(System.IO.IsolatedStorage.IsolatedStorageSettings.prototype, "IDictionary$b2_Keys", 
	System.IO.IsolatedStorage.IsolatedStorageSettings.prototype.IDictionary$b2_get_Keys, null);
JSIL.MakeProperty(System.IO.IsolatedStorage.IsolatedStorageSettings.prototype, "IDictionary$b2_Values", 
	System.IO.IsolatedStorage.IsolatedStorageSettings.prototype.IDictionary$b2_get_Values, null);
JSIL.MakeProperty(System.IO.IsolatedStorage.IsolatedStorageSettings.prototype, "ICollection$b1_IsReadOnly", 
	System.IO.IsolatedStorage.IsolatedStorageSettings.prototype.ICollection$b1_get_IsReadOnly, null);
JSIL.MakeProperty(System.IO.IsolatedStorage.IsolatedStorageSettings.prototype, "IDictionary_IsFixedSize", 
	System.IO.IsolatedStorage.IsolatedStorageSettings.prototype.IDictionary_get_IsFixedSize, null);
JSIL.MakeProperty(System.IO.IsolatedStorage.IsolatedStorageSettings.prototype, "IDictionary_IsReadOnly", 
	System.IO.IsolatedStorage.IsolatedStorageSettings.prototype.IDictionary_get_IsReadOnly, null);
JSIL.MakeProperty(System.IO.IsolatedStorage.IsolatedStorageSettings.prototype, "IDictionary_Item", 
	System.IO.IsolatedStorage.IsolatedStorageSettings.prototype.IDictionary_get_Item, System.IO.IsolatedStorage.IsolatedStorageSettings.prototype.IDictionary_set_Item);
JSIL.MakeProperty(System.IO.IsolatedStorage.IsolatedStorageSettings.prototype, "ICollection_Count", 
	System.IO.IsolatedStorage.IsolatedStorageSettings.prototype.ICollection_get_Count, null);
JSIL.MakeProperty(System.IO.IsolatedStorage.IsolatedStorageSettings.prototype, "ICollection_IsSynchronized", 
	System.IO.IsolatedStorage.IsolatedStorageSettings.prototype.ICollection_get_IsSynchronized, null);
JSIL.MakeProperty(System.IO.IsolatedStorage.IsolatedStorageSettings.prototype, "ICollection_SyncRoot", 
	System.IO.IsolatedStorage.IsolatedStorageSettings.prototype.ICollection_get_SyncRoot, null);
Object.defineProperty(System.IO.IsolatedStorage.IsolatedStorageSettings, "LocalSettingsPath", {
		"value": "__LocalSettings"}
);
System.IO.IsolatedStorage.IsolatedStorageSettings.s_appSettings = null;
System.IO.IsolatedStorage.IsolatedStorageSettings.s_siteSettings = null;
System.IO.IsolatedStorage.IsolatedStorageSettings.prototype._settings = null;
System.IO.IsolatedStorage.IsolatedStorageSettings.prototype._appStore = null;

System.ComponentModel.AlternateContentPropertyAttribute.prototype._ctor = function () {
	System.Attribute.prototype._ctor.call(this);
};

System.ComponentModel.CurrentChangingEventArgs.prototype._ctor$0 = function () {
	System.EventArgs.prototype._ctor.call(this);
	this.Initialize(true);
};
System.ComponentModel.CurrentChangingEventArgs.prototype._ctor$1 = function (isCancelable) {
	System.EventArgs.prototype._ctor.call(this);
	this.Initialize(isCancelable);
};
System.ComponentModel.CurrentChangingEventArgs.prototype.Initialize = function (isCancelable) {
	this._isCancelable = isCancelable;
};
System.ComponentModel.CurrentChangingEventArgs.prototype.get_IsCancelable = function () {
	return this._isCancelable;
};
System.ComponentModel.CurrentChangingEventArgs.prototype.get_Cancel = function () {
	return this._cancel;
};
System.ComponentModel.CurrentChangingEventArgs.prototype.set_Cancel = function (value) {
	if (this.IsCancelable) {
		this._cancel = value;
		return;
	}
	if (value) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("ComponentModel_CurrentChangingCannotBeCanceled")]);
	}
};
JSIL.OverloadedMethod(System.ComponentModel.CurrentChangingEventArgs.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Boolean]]
	]);
JSIL.MakeProperty(System.ComponentModel.CurrentChangingEventArgs.prototype, "IsCancelable", 
	System.ComponentModel.CurrentChangingEventArgs.prototype.get_IsCancelable, null);
JSIL.MakeProperty(System.ComponentModel.CurrentChangingEventArgs.prototype, "Cancel", 
	System.ComponentModel.CurrentChangingEventArgs.prototype.get_Cancel, System.ComponentModel.CurrentChangingEventArgs.prototype.set_Cancel);
System.ComponentModel.CurrentChangingEventArgs.prototype._cancel = false;
System.ComponentModel.CurrentChangingEventArgs.prototype._isCancelable = false;

System.ComponentModel.ClosingEventArgs.prototype._ctor = function (isCancelable) {
	System.ComponentModel.CancelEventArgs.prototype._ctor$0.call(this);
	this._isCancelable = isCancelable;
};
System.ComponentModel.ClosingEventArgs.prototype.get_IsCancelable = function () {
	return this._isCancelable;
};
JSIL.MakeProperty(System.ComponentModel.ClosingEventArgs.prototype, "IsCancelable", 
	System.ComponentModel.ClosingEventArgs.prototype.get_IsCancelable, null);
System.ComponentModel.ClosingEventArgs.prototype._isCancelable = false;

System.ComponentModel.DataErrorsChangedEventArgs.prototype._ctor = function (propertyName) {
	System.EventArgs.prototype._ctor.call(this);
	this.PropertyName = propertyName;
};
System.ComponentModel.DataErrorsChangedEventArgs.prototype.get_PropertyName = function () {
	return this.PropertyName$value;
};
System.ComponentModel.DataErrorsChangedEventArgs.prototype.set_PropertyName = function (value) {
	this.PropertyName$value = value;
};
JSIL.MakeProperty(System.ComponentModel.DataErrorsChangedEventArgs.prototype, "PropertyName", 
	System.ComponentModel.DataErrorsChangedEventArgs.prototype.get_PropertyName, System.ComponentModel.DataErrorsChangedEventArgs.prototype.set_PropertyName);
System.ComponentModel.DataErrorsChangedEventArgs.prototype.PropertyName$value = null;

System.ComponentModel.GroupDescription.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
	this._explicitGroupNames = JSIL.New(System.Collections.ObjectModel.ObservableCollection$b1.Of(System.Object), "_ctor$0", []);
	this._explicitGroupNames.add_CollectionChanged(JSIL.Delegate.New("System.Collections.Specialized.NotifyCollectionChangedEventHandler", this, System.ComponentModel.GroupDescription.prototype.OnGroupNamesChanged));
};
System.ComponentModel.GroupDescription.prototype.INotifyPropertyChanged_add_PropertyChanged = function (value) {
	this.PropertyChanged = System.Delegate.Combine(this.PropertyChanged, value);
};
System.ComponentModel.GroupDescription.prototype.INotifyPropertyChanged_remove_PropertyChanged = function (value) {
	this.PropertyChanged = System.Delegate.Remove(this.PropertyChanged, value);
};
System.ComponentModel.GroupDescription.prototype.add_PropertyChanged = function (value) {
	this.PropertyChanged = System.Delegate.Combine(this.PropertyChanged, value);
};
System.ComponentModel.GroupDescription.prototype.remove_PropertyChanged = function (value) {
	this.PropertyChanged = System.Delegate.Remove(this.PropertyChanged, value);
};
System.ComponentModel.GroupDescription.prototype.OnPropertyChanged = function (e) {
	if (this.PropertyChanged !== null) {
		this.PropertyChanged(this, e);
	}
};
System.ComponentModel.GroupDescription.prototype.get_GroupNames = function () {
	return this._explicitGroupNames;
};
System.ComponentModel.GroupDescription.prototype.ShouldSerializeGroupNames = function () {
	return (this._explicitGroupNames.Count > 0);
};
System.ComponentModel.GroupDescription.prototype.NamesMatch = function (groupName, itemName) {
	return System.Object.Equals(groupName, itemName);
};
System.ComponentModel.GroupDescription.prototype.OnGroupNamesChanged = function (sender, e) {
	this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs("GroupNames"));
};
JSIL.MakeProperty(System.ComponentModel.GroupDescription.prototype, "GroupNames", 
	System.ComponentModel.GroupDescription.prototype.get_GroupNames, null);
System.ComponentModel.GroupDescription.prototype.PropertyChanged = null;
System.ComponentModel.GroupDescription.prototype._explicitGroupNames = null;

System.ComponentModel.SortDescription.prototype._ctor = function (propertyName, direction) {
	if (!((direction >= System.ComponentModel.ListSortDirection.Ascending) && (direction <= System.ComponentModel.ListSortDirection.Descending))) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", ["direction"]);
	}
	this._propertyName = propertyName;
	this._direction = direction;
	this._sealed = false;
};
System.ComponentModel.SortDescription.prototype.get_PropertyName = function () {
	return this._propertyName;
};
System.ComponentModel.SortDescription.prototype.set_PropertyName = function (value) {
	if (this._sealed) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("ComponentModel_CannotChangeAfterSealed", ["SortDescription"])]);
	}
	this._propertyName = value;
};
System.ComponentModel.SortDescription.prototype.get_Direction = function () {
	return this._direction;
};
System.ComponentModel.SortDescription.prototype.set_Direction = function (value) {
	if (this._sealed) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("ComponentModel_CannotChangeAfterSealed", ["SortDescription"])]);
	}
	if (!((value >= System.ComponentModel.ListSortDirection.Ascending) && (value <= System.ComponentModel.ListSortDirection.Descending))) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", ["value"]);
	}
	this._direction = value;
};
System.ComponentModel.SortDescription.prototype.get_IsSealed = function () {
	return this._sealed;
};
System.ComponentModel.SortDescription.prototype.Equals = function (obj) {
	return (JSIL.TryCast(obj, System.ComponentModel.SortDescription) && System.ComponentModel.SortDescription.op_Equality(this.MemberwiseClone(), JSIL.Cast(obj, System.ComponentModel.SortDescription).MemberwiseClone()));
};
System.ComponentModel.SortDescription.op_Equality = function (sd1, sd2) {
	return ((sd1.PropertyName == sd2.PropertyName) && (sd1.Direction === sd2.Direction));
};
System.ComponentModel.SortDescription.op_Inequality = function (sd1, sd2) {
	return !System.ComponentModel.SortDescription.op_Equality(sd1, sd2);
};
System.ComponentModel.SortDescription.prototype.GetHashCode = function () {
	var num = this.Direction.GetHashCode();
	if (this.PropertyName !== null) {
		num = (this.PropertyName.GetHashCode() + num);
	}
	return num;
};
System.ComponentModel.SortDescription.prototype.Seal = function () {
	this._sealed = true;
};
JSIL.MakeProperty(System.ComponentModel.SortDescription.prototype, "PropertyName", 
	System.ComponentModel.SortDescription.prototype.get_PropertyName, System.ComponentModel.SortDescription.prototype.set_PropertyName);
JSIL.MakeProperty(System.ComponentModel.SortDescription.prototype, "Direction", 
	System.ComponentModel.SortDescription.prototype.get_Direction, System.ComponentModel.SortDescription.prototype.set_Direction);
JSIL.MakeProperty(System.ComponentModel.SortDescription.prototype, "IsSealed", 
	System.ComponentModel.SortDescription.prototype.get_IsSealed, null);
System.ComponentModel.SortDescription.prototype._propertyName = null;
System.ComponentModel.SortDescription.prototype._direction = 0;
System.ComponentModel.SortDescription.prototype._sealed = false;

System.ComponentModel.SortDescriptionCollection.prototype.INotifyCollectionChanged_add_CollectionChanged = function (value) {
	this.CollectionChanged = System.Delegate.Combine(this.CollectionChanged, value);
};
System.ComponentModel.SortDescriptionCollection.prototype.INotifyCollectionChanged_remove_CollectionChanged = function (value) {
	this.CollectionChanged = System.Delegate.Remove(this.CollectionChanged, value);
};
System.ComponentModel.SortDescriptionCollection.prototype.add_CollectionChanged = function (value) {
	this.CollectionChanged = System.Delegate.Combine(this.CollectionChanged, value);
};
System.ComponentModel.SortDescriptionCollection.prototype.remove_CollectionChanged = function (value) {
	this.CollectionChanged = System.Delegate.Remove(this.CollectionChanged, value);
};
System.ComponentModel.SortDescriptionCollection.prototype.ClearItems = function () {
	System.Collections.ObjectModel.Collection$b1.Of(System.ComponentModel.SortDescription).prototype.ClearItems.call(this);
	this.OnCollectionChanged$1(System.Collections.Specialized.NotifyCollectionChangedAction.Reset);
};
System.ComponentModel.SortDescriptionCollection.prototype.RemoveItem = function (index) {
	var sortDescription = System.Collections.ObjectModel.Collection$b1.Of(System.ComponentModel.SortDescription).prototype.get_Item.call(this, index).MemberwiseClone();
	System.Collections.ObjectModel.Collection$b1.Of(System.ComponentModel.SortDescription).prototype.RemoveItem.call(this, index);
	this.OnCollectionChanged$0(System.Collections.Specialized.NotifyCollectionChangedAction.Remove, sortDescription.MemberwiseClone(), index);
};
System.ComponentModel.SortDescriptionCollection.prototype.InsertItem = function (index, item) {
	item.Seal();
	System.Collections.ObjectModel.Collection$b1.Of(System.ComponentModel.SortDescription).prototype.InsertItem.call(this, index, item.MemberwiseClone());
	this.OnCollectionChanged$0(System.Collections.Specialized.NotifyCollectionChangedAction.Add, item.MemberwiseClone(), index);
};
System.ComponentModel.SortDescriptionCollection.prototype.SetItem = function (index, item) {
	item.Seal();
	var sortDescription = System.Collections.ObjectModel.Collection$b1.Of(System.ComponentModel.SortDescription).prototype.get_Item.call(this, index).MemberwiseClone();
	System.Collections.ObjectModel.Collection$b1.Of(System.ComponentModel.SortDescription).prototype.SetItem.call(this, index, item.MemberwiseClone());
	this.OnCollectionChanged$0(System.Collections.Specialized.NotifyCollectionChangedAction.Remove, sortDescription.MemberwiseClone(), index);
	this.OnCollectionChanged$0(System.Collections.Specialized.NotifyCollectionChangedAction.Add, item.MemberwiseClone(), index);
};
System.ComponentModel.SortDescriptionCollection.prototype.OnCollectionChanged$0 = function (action, item, index) {
	if (this.CollectionChanged !== null) {
		this.CollectionChanged(this, JSIL.New(System.Collections.Specialized.NotifyCollectionChangedEventArgs, "_ctor$1", [action, item, index]));
	}
};
System.ComponentModel.SortDescriptionCollection.prototype.OnCollectionChanged$1 = function (action) {
	if (this.CollectionChanged !== null) {
		this.CollectionChanged(this, JSIL.New(System.Collections.Specialized.NotifyCollectionChangedEventArgs, "_ctor$0", [action]));
	}
};
System.ComponentModel.SortDescriptionCollection.prototype._ctor = function () {
	System.Collections.ObjectModel.Collection$b1.Of(System.ComponentModel.SortDescription).prototype._ctor$0.call(this);
};
JSIL.OverloadedMethod(System.ComponentModel.SortDescriptionCollection.prototype, "OnCollectionChanged", [
		["OnCollectionChanged$0", [System.Collections.Specialized.NotifyCollectionChangedAction, System.Object, System.Int32]], 
		["OnCollectionChanged$1", [System.Collections.Specialized.NotifyCollectionChangedAction]]
	]);
System.ComponentModel.SortDescriptionCollection.prototype.CollectionChanged = null;
System.ComponentModel.SortDescriptionCollection.Empty = null;
System.ComponentModel.SortDescriptionCollection._cctor = function () {
	System.ComponentModel.SortDescriptionCollection.Empty = new $asm02.System.ComponentModel.SortDescriptionCollection.EmptySortDescriptionCollection();
};

$asm02.System.ComponentModel.SortDescriptionCollection.EmptySortDescriptionCollection.prototype.ClearItems = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm02.System.ComponentModel.SortDescriptionCollection.EmptySortDescriptionCollection.prototype.RemoveItem = function (index) {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm02.System.ComponentModel.SortDescriptionCollection.EmptySortDescriptionCollection.prototype.InsertItem = function (index, item) {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm02.System.ComponentModel.SortDescriptionCollection.EmptySortDescriptionCollection.prototype.SetItem = function (index, item) {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm02.System.ComponentModel.SortDescriptionCollection.EmptySortDescriptionCollection.prototype.IList_get_IsFixedSize = function () {
	return true;
};
$asm02.System.ComponentModel.SortDescriptionCollection.EmptySortDescriptionCollection.prototype.IList_get_IsReadOnly = function () {
	return true;
};
$asm02.System.ComponentModel.SortDescriptionCollection.EmptySortDescriptionCollection.prototype._ctor = function () {
	System.ComponentModel.SortDescriptionCollection.prototype._ctor.call(this);
};
JSIL.MakeProperty($asm02.System.ComponentModel.SortDescriptionCollection.EmptySortDescriptionCollection.prototype, "IList_IsFixedSize", 
	$asm02.System.ComponentModel.SortDescriptionCollection.EmptySortDescriptionCollection.prototype.IList_get_IsFixedSize, null);
JSIL.MakeProperty($asm02.System.ComponentModel.SortDescriptionCollection.EmptySortDescriptionCollection.prototype, "IList_IsReadOnly", 
	$asm02.System.ComponentModel.SortDescriptionCollection.EmptySortDescriptionCollection.prototype.IList_get_IsReadOnly, null);

System.Runtime.InteropServices.Automation.AutomationFactory.get_IsAvailable = function () {
	return $asm02.MS.Internal.ComAutomation.ComAutomationServices.IsAvailable();
};
System.Runtime.InteropServices.Automation.AutomationFactory.CreateObject$b1 = JSIL.GenericMethod(
	["T"], 
	function (T) {
		$asm02.MS.Internal.StubHelper.ThrowIfNotInDesignMode();
		return null;
	}
);
System.Runtime.InteropServices.Automation.AutomationFactory.CreateObject = function (progID) {
	return JSIL.New($asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProvider, "_ctor$0", [progID, true]);
};
System.Runtime.InteropServices.Automation.AutomationFactory.GetObject = function (progID) {
	return JSIL.New($asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProvider, "_ctor$0", [progID, false]);
};
System.Runtime.InteropServices.Automation.AutomationFactory.GetEvent = function (automationObject, eventName) {
	var automationMetaObjectProvider = JSIL.TryCast(automationObject, $asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProvider);
	if (automationMetaObjectProvider === null) {
		throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm02.System.Windows.Resx.GetString$2("ComAutomation_MustBeAnAutomationObject"), "automationObject"]);
	}
	return $asm02.MS.Internal.ComAutomation.ComAutomationServices.GetEvent(automationMetaObjectProvider.ComAutomationObject, eventName);
};
JSIL.MakeProperty(System.Runtime.InteropServices.Automation.AutomationFactory, "IsAvailable", 
	System.Runtime.InteropServices.Automation.AutomationFactory.get_IsAvailable, null);

$asm02.System.Runtime.InteropServices.Automation.DynamicComAutomationParamWrapService.prototype.Wrap = function (param) {
	if (JSIL.TryCast(param, $asm02.MS.Internal.ComAutomation.ComAutomationObject) !== null) {
		return JSIL.New($asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProvider, "_ctor$1", [JSIL.TryCast(param, $asm02.MS.Internal.ComAutomation.ComAutomationObject)]);
	}
	if (JSIL.TryCast(param, System.Runtime.InteropServices.Automation.AutomationEvent) !== null) {
		return new $asm02.System.Runtime.InteropServices.Automation.AutomationEventMetaObjectProvider(JSIL.TryCast(param, System.Runtime.InteropServices.Automation.AutomationEvent));
	}
	return param;
};
$asm02.System.Runtime.InteropServices.Automation.DynamicComAutomationParamWrapService.prototype.Unwrap = function (param) {
	if (JSIL.TryCast(param, $asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProvider) !== null) {
		return JSIL.TryCast(param, $asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProvider).ComAutomationObject;
	}
	if (JSIL.TryCast(param, $asm02.System.Runtime.InteropServices.Automation.AutomationEventMetaObjectProvider) !== null) {
		return JSIL.TryCast(param, $asm02.System.Runtime.InteropServices.Automation.AutomationEventMetaObjectProvider).AutomationEvent;
	}
	return param;
};
$asm02.System.Runtime.InteropServices.Automation.DynamicComAutomationParamWrapService.prototype._ctor = function () {
	$asm02.MS.Internal.ComAutomation.ComAutomationParamWrapService.prototype._ctor.call(this);
};

$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.prototype.TryGetMember = function (binder, /* ref */ result) {
	result.value = null;
	return false;
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.prototype.TrySetMember = function (binder, value) {
	return false;
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.prototype.TryInvokeMember = function (binder, args, /* ref */ result) {
	result.value = null;
	return false;
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.prototype.TryInvoke = function (binder, args, /* ref */ result) {
	result.value = null;
	return false;
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.prototype.TryBinaryOperation = function (binder, arg, /* ref */ result) {
	result.value = null;
	return false;
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.prototype.TryGetIndex = function (binder, indexes, /* ref */ result) {
	result.value = null;
	return false;
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.prototype.TrySetIndex = function (binder, indexes, value) {
	return false;
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.prototype.GetDynamicMemberNames = function () {
	return JSIL.Array.New(System.String, 0);
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.prototype.GetMetaObject = function (parameter) {
	return new $asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic(parameter, this);
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.ConvertChangeTypeMethod = null;
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.CreateComAutomationParamFunc = null;
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.GetComAutomationParamValueFunc = null;
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.TryGetMemberFunc = null;
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.TrySetMemberFunc = null;
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.TryInvokeMemberFunc = null;
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.TryInvokeFunc = null;
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.TryGetIndexFunc = null;
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.TryBinaryOperationFunc = null;
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.TrySetIndexFunc = null;
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.ParamWrapService = null;
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.$CachedAnonymousMethodDelegate9 = null;
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.$CachedAnonymousMethodDelegatea = null;
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.$CachedAnonymousMethodDelegateb = null;
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.$CachedAnonymousMethodDelegatec = null;
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.$CachedAnonymousMethodDelegated = null;
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.$CachedAnonymousMethodDelegatee = null;
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.$CachedAnonymousMethodDelegatef = null;
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.$CachedAnonymousMethodDelegate10 = null;
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.$CachedAnonymousMethodDelegate11 = null;
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase._cctor = function () {
	$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.ConvertChangeTypeMethod = System.Convert.GetMethod$1(
		"ChangeType", 
		(System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static), 
		null, 
		JSIL.Array.New(System.Type, [System.Object, System.Type, System.IFormatProvider]), 
		null
	);
	$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.CreateComAutomationParamFunc = function (obj, isByRef) {
		return new $asm02.MS.Internal.ComAutomation.ComAutomationParam(obj, isByRef);
	};
	$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.GetComAutomationParamValueFunc = function (strongBox) {
		return strongBox.IStrongBox_Value;
	};
	$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.TryGetMemberFunc = function (obj, binder) {
		var item = new JSIL.Variable(null);
		var automationMetaObjectProviderBase = JSIL.TryCast(obj, $asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase);
		if (automationMetaObjectProviderBase.TryGetMember(binder, /* ref */ item)) {
			return new (System.Tuple$b2.Of(System.Object, System.Boolean)) (item.value, true);
		}
		return new (System.Tuple$b2.Of(System.Object, System.Boolean)) (null, false);
	};
	$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.TrySetMemberFunc = function (obj, binder, value) {
		var automationMetaObjectProviderBase = JSIL.TryCast(obj, $asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase);
		return automationMetaObjectProviderBase.TrySetMember(binder, value);
	};
	$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.TryInvokeMemberFunc = function (obj, binder, args) {
		var item = new JSIL.Variable(null);
		var automationMetaObjectProviderBase = JSIL.TryCast(obj, $asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase);
		if (automationMetaObjectProviderBase.TryInvokeMember(binder, args, /* ref */ item)) {
			return new (System.Tuple$b2.Of(System.Object, System.Boolean)) (item.value, true);
		}
		return new (System.Tuple$b2.Of(System.Object, System.Boolean)) (null, false);
	};
	$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.TryInvokeFunc = function (obj, binder, args) {
		var item = new JSIL.Variable(null);
		var automationMetaObjectProviderBase = JSIL.TryCast(obj, $asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase);
		if (automationMetaObjectProviderBase.TryInvoke(binder, args, /* ref */ item)) {
			return new (System.Tuple$b2.Of(System.Object, System.Boolean)) (item.value, true);
		}
		return new (System.Tuple$b2.Of(System.Object, System.Boolean)) (null, false);
	};
	$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.TryGetIndexFunc = function (obj, binder, indexes) {
		var item = new JSIL.Variable(null);
		var automationMetaObjectProviderBase = JSIL.TryCast(obj, $asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase);
		if (automationMetaObjectProviderBase.TryGetIndex(binder, indexes, /* ref */ item)) {
			return new (System.Tuple$b2.Of(System.Object, System.Boolean)) (item.value, true);
		}
		return new (System.Tuple$b2.Of(System.Object, System.Boolean)) (null, false);
	};
	$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.TryBinaryOperationFunc = function (obj, binder, arg) {
		var item = new JSIL.Variable(null);
		var automationMetaObjectProviderBase = JSIL.TryCast(obj, $asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase);
		if (automationMetaObjectProviderBase.TryBinaryOperation(binder, arg, /* ref */ item)) {
			return new (System.Tuple$b2.Of(System.Object, System.Boolean)) (item.value, true);
		}
		return new (System.Tuple$b2.Of(System.Object, System.Boolean)) (null, false);
	};
	$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.TrySetIndexFunc = function (obj, binder, indexes, value) {
		var automationMetaObjectProviderBase = JSIL.TryCast(obj, $asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase);
		return automationMetaObjectProviderBase.TrySetIndex(binder, indexes, value);
	};
	$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.ParamWrapService = new $asm02.System.Runtime.InteropServices.Automation.DynamicComAutomationParamWrapService();
};

$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.prototype._ctor = function (expression, value) {
	System.Dynamic.DynamicMetaObject.prototype._ctor$1.call(this, expression, System.Dynamic.BindingRestrictions.Empty, value);
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.prototype.GetDynamicMemberNames = function () {
	return this.Value.GetDynamicMemberNames();
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.prototype.BindGetMember = function (binder) {
	var $l$gc__DisplayClass = new $asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.$l$gc__DisplayClass14();
	$l$gc__DisplayClass.binder = binder;
	$l$gc__DisplayClass.$this = this;
	if (this.IsOverridden("TryGetMember")) {
		var cOMBindContext = this.PrepareContext(
			true, 
			$l$gc__DisplayClass.binder, 
			null, 
			function (e) {
				return $l$gc__DisplayClass.binder.FallbackGetMember$1($l$gc__DisplayClass.$this, e);
			}, 
			null
		);
		cOMBindContext.CallMethodExpression = System.Linq.Expressions.Expression.Invoke$0(System.Linq.Expressions.Expression.Constant$0($asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.TryGetMemberFunc), JSIL.Array.New(System.Linq.Expressions.Expression, [System.Dynamic.DynamicMetaObject.prototype.get_Expression.call(this), System.Linq.Expressions.Expression.Constant$0(cOMBindContext.Binder)]));
		return cOMBindContext.Fallback(this.ConstructDynamicCall(cOMBindContext));
	}
	return System.Dynamic.DynamicMetaObject.prototype.BindGetMember.call(this, $l$gc__DisplayClass.binder);
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.prototype.BindSetMember = function (binder, value) {
	var $l$gc__DisplayClass = new $asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.$l$gc__DisplayClass18();
	$l$gc__DisplayClass.binder = binder;
	$l$gc__DisplayClass.value = value;
	$l$gc__DisplayClass.$this = this;
	if (this.IsOverridden("TrySetMember")) {
		var cOMBindContext = this.PrepareContext(
			false, 
			$l$gc__DisplayClass.binder, 
			null, 
			function (e) {
				return $l$gc__DisplayClass.binder.FallbackSetMember$1($l$gc__DisplayClass.$this, $l$gc__DisplayClass.value, e);
			}, 
			null
		);
		cOMBindContext.CallMethodExpression = System.Linq.Expressions.Expression.Invoke$0(System.Linq.Expressions.Expression.Constant$0($asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.TrySetMemberFunc), JSIL.Array.New(System.Linq.Expressions.Expression, [System.Dynamic.DynamicMetaObject.prototype.get_Expression.call(this), System.Linq.Expressions.Expression.Constant$0(cOMBindContext.Binder), System.Linq.Expressions.Expression.Assign(cOMBindContext.Result, $asm02.System.Runtime.InteropServices.Automation.Helpers.Convert($l$gc__DisplayClass.value.Expression, System.Object))]));
		return cOMBindContext.Fallback(this.ConstructDynamicCall(cOMBindContext));
	}
	return System.Dynamic.DynamicMetaObject.prototype.BindSetMember.call(this, $l$gc__DisplayClass.binder, $l$gc__DisplayClass.value);
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.IsByRef = function (mo) {
	var parameterExpression = JSIL.TryCast(mo.Expression, System.Linq.Expressions.ParameterExpression);
	return (!((parameterExpression === null) || 
			!parameterExpression.IsByRef) && (mo.Value !== System.Type.Missing));
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.UsesNamedParameters = function (callInfo) {
	return (!((callInfo === null) || 
			(callInfo.ArgumentNames === null)) && (callInfo.ArgumentNames.Count > 0));
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.prototype.BindInvokeMember = function (binder, args) {
	var $l$gc__DisplayClass1c = new $asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.$l$gc__DisplayClass1c();
	$l$gc__DisplayClass1c.binder = binder;
	$l$gc__DisplayClass1c.args = args;
	$l$gc__DisplayClass1c.$this = this;
	if ($asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.UsesNamedParameters($l$gc__DisplayClass1c.binder.CallInfo)) {
		return this.FailDueToNamedParameterUsage($l$gc__DisplayClass1c.binder);
	}
	if (this.IsOverridden("TryInvokeMember")) {
		var cOMBindContext = this.PrepareContext(
			true, 
			$l$gc__DisplayClass1c.binder, 
			$l$gc__DisplayClass1c.args, 
			function (e) {
				return $l$gc__DisplayClass1c.binder.FallbackInvokeMember$1($l$gc__DisplayClass1c.$this, $l$gc__DisplayClass1c.args, e);
			}, 
			null
		);
		cOMBindContext.CallMethodExpression = System.Linq.Expressions.Expression.Invoke$0(System.Linq.Expressions.Expression.Constant$0($asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.TryInvokeMemberFunc), JSIL.Array.New(System.Linq.Expressions.Expression, [System.Dynamic.DynamicMetaObject.prototype.get_Expression.call(this), System.Linq.Expressions.Expression.Constant$0(cOMBindContext.Binder), cOMBindContext.WrappedArgsArray]));
		return cOMBindContext.Fallback(this.ConstructDynamicCall(cOMBindContext));
	}
	return System.Dynamic.DynamicMetaObject.prototype.BindInvokeMember.call(this, $l$gc__DisplayClass1c.binder, $l$gc__DisplayClass1c.args);
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.prototype.BindInvoke = function (binder, args) {
	var $l$gc__DisplayClass = new $asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.$l$gc__DisplayClass20();
	$l$gc__DisplayClass.binder = binder;
	$l$gc__DisplayClass.args = args;
	$l$gc__DisplayClass.$this = this;
	if ($asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.UsesNamedParameters($l$gc__DisplayClass.binder.CallInfo)) {
		return this.FailDueToNamedParameterUsage($l$gc__DisplayClass.binder);
	}
	if (this.IsOverridden("TryInvoke")) {
		var cOMBindContext = this.PrepareContext(
			true, 
			$l$gc__DisplayClass.binder, 
			$l$gc__DisplayClass.args, 
			function (e) {
				return $l$gc__DisplayClass.binder.FallbackInvoke$1($l$gc__DisplayClass.$this, $l$gc__DisplayClass.args, e);
			}, 
			null
		);
		cOMBindContext.CallMethodExpression = System.Linq.Expressions.Expression.Invoke$0(System.Linq.Expressions.Expression.Constant$0($asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.TryInvokeFunc), JSIL.Array.New(System.Linq.Expressions.Expression, [System.Dynamic.DynamicMetaObject.prototype.get_Expression.call(this), System.Linq.Expressions.Expression.Constant$0(cOMBindContext.Binder), cOMBindContext.WrappedArgsArray]));
		return cOMBindContext.Fallback(this.ConstructDynamicCall(cOMBindContext));
	}
	return System.Dynamic.DynamicMetaObject.prototype.BindInvoke.call(this, $l$gc__DisplayClass.binder, $l$gc__DisplayClass.args);
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.prototype.BindBinaryOperation = function (binder, arg) {
	var $l$gc__DisplayClass = new $asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.$l$gc__DisplayClass24();
	$l$gc__DisplayClass.binder = binder;
	$l$gc__DisplayClass.arg = arg;
	$l$gc__DisplayClass.$this = this;
	if (this.IsOverridden("TryBinaryOperation")) {
		var cOMBindContext = this.PrepareContext(
			true, 
			$l$gc__DisplayClass.binder, 
			JSIL.Array.New(System.Dynamic.DynamicMetaObject, [$l$gc__DisplayClass.arg]), 
			function (e) {
				return $l$gc__DisplayClass.binder.FallbackBinaryOperation$1($l$gc__DisplayClass.$this, $l$gc__DisplayClass.arg, e);
			}, 
			null
		);
		cOMBindContext.CallMethodExpression = System.Linq.Expressions.Expression.Invoke$0(System.Linq.Expressions.Expression.Constant$0($asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.TryBinaryOperationFunc), JSIL.Array.New(System.Linq.Expressions.Expression, [System.Dynamic.DynamicMetaObject.prototype.get_Expression.call(this), System.Linq.Expressions.Expression.Constant$0(cOMBindContext.Binder), cOMBindContext.WrappedArgsArray]));
		return cOMBindContext.Fallback(this.ConstructDynamicCall(cOMBindContext));
	}
	return System.Dynamic.DynamicMetaObject.prototype.BindBinaryOperation.call(this, $l$gc__DisplayClass.binder, $l$gc__DisplayClass.arg);
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.prototype.BindGetIndex = function (binder, indexes) {
	var $l$gc__DisplayClass = new $asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.$l$gc__DisplayClass28();
	$l$gc__DisplayClass.binder = binder;
	$l$gc__DisplayClass.indexes = indexes;
	$l$gc__DisplayClass.$this = this;
	if ($asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.UsesNamedParameters($l$gc__DisplayClass.binder.CallInfo)) {
		return this.FailDueToNamedParameterUsage($l$gc__DisplayClass.binder);
	}
	if (this.IsOverridden("TryGetIndex")) {
		var cOMBindContext = this.PrepareContext(
			true, 
			$l$gc__DisplayClass.binder, 
			$l$gc__DisplayClass.indexes, 
			function (e) {
				return $l$gc__DisplayClass.binder.FallbackGetIndex$1($l$gc__DisplayClass.$this, $l$gc__DisplayClass.indexes, e);
			}, 
			null
		);
		cOMBindContext.CallMethodExpression = System.Linq.Expressions.Expression.Invoke$0(System.Linq.Expressions.Expression.Constant$0($asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.TryGetIndexFunc), JSIL.Array.New(System.Linq.Expressions.Expression, [System.Dynamic.DynamicMetaObject.prototype.get_Expression.call(this), System.Linq.Expressions.Expression.Constant$0(cOMBindContext.Binder), cOMBindContext.WrappedArgsArray]));
		return cOMBindContext.Fallback(this.ConstructDynamicCall(cOMBindContext));
	}
	return System.Dynamic.DynamicMetaObject.prototype.BindGetIndex.call(this, $l$gc__DisplayClass.binder, $l$gc__DisplayClass.indexes);
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.prototype.BindSetIndex = function (binder, indexes, value) {
	var $l$gc__DisplayClass2c = new $asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.$l$gc__DisplayClass2c();
	$l$gc__DisplayClass2c.binder = binder;
	$l$gc__DisplayClass2c.indexes = indexes;
	$l$gc__DisplayClass2c.value = value;
	$l$gc__DisplayClass2c.$this = this;
	if ($asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.UsesNamedParameters($l$gc__DisplayClass2c.binder.CallInfo)) {
		return this.FailDueToNamedParameterUsage($l$gc__DisplayClass2c.binder);
	}
	if (this.IsOverridden("TrySetIndex")) {
		var cOMBindContext = this.PrepareContext(
			false, 
			$l$gc__DisplayClass2c.binder, 
			$l$gc__DisplayClass2c.indexes, 
			function (e) {
				return $l$gc__DisplayClass2c.binder.FallbackSetIndex$1($l$gc__DisplayClass2c.$this, $l$gc__DisplayClass2c.indexes, $l$gc__DisplayClass2c.value, e);
			}, 
			null
		);
		cOMBindContext.CallMethodExpression = System.Linq.Expressions.Expression.Invoke$0(System.Linq.Expressions.Expression.Constant$0($asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.TrySetIndexFunc), JSIL.Array.New(System.Linq.Expressions.Expression, [System.Dynamic.DynamicMetaObject.prototype.get_Expression.call(this), System.Linq.Expressions.Expression.Constant$0(cOMBindContext.Binder), cOMBindContext.WrappedArgsArray, System.Linq.Expressions.Expression.Assign(cOMBindContext.Result, $asm02.System.Runtime.InteropServices.Automation.Helpers.Convert($l$gc__DisplayClass2c.value.Expression, System.Object))]));
		return cOMBindContext.Fallback(this.ConstructDynamicCall(cOMBindContext));
	}
	return System.Dynamic.DynamicMetaObject.prototype.BindSetIndex.call(this, $l$gc__DisplayClass2c.binder, $l$gc__DisplayClass2c.indexes, $l$gc__DisplayClass2c.value);
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.Constant = function (binder) {
__loop0__: 
	for (var type = (JSIL.GetType(binder)); !type.IsVisible; type = type.BaseType) {
	}
	return System.Linq.Expressions.Expression.Constant$1(binder, type);
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.prototype.SetupByRefVariable = function (byRefArgMetaObject, byRefArgNumber, scopeVariables, assignByRefArgs, copyBackByRefArgs) {
	var parameterExpression = System.Linq.Expressions.Expression.Variable$1(System.Runtime.CompilerServices.IStrongBox, JSIL.ConcatString("ByRefArg", byRefArgNumber));
	var right = System.Linq.Expressions.Expression.Invoke$0(System.Linq.Expressions.Expression.Constant$0($asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.CreateComAutomationParamFunc), JSIL.Array.New(System.Linq.Expressions.Expression, [$asm02.System.Runtime.InteropServices.Automation.Helpers.Convert(byRefArgMetaObject.Expression, System.Object), System.Linq.Expressions.Expression.Constant$0(true)]));
	var item = System.Linq.Expressions.Expression.Assign(parameterExpression, right);
	scopeVariables.Add(parameterExpression);
	assignByRefArgs.Add(item);
	var invocationExpression = System.Linq.Expressions.Expression.Invoke$0(System.Linq.Expressions.Expression.Constant$0($asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.GetComAutomationParamValueFunc), JSIL.Array.New(System.Linq.Expressions.Expression, [$asm02.System.Runtime.InteropServices.Automation.Helpers.Convert(parameterExpression, System.Runtime.CompilerServices.IStrongBox)]));
	var expression = null;
	if (!(!byRefArgMetaObject.LimitType.IsArray && 
			!byRefArgMetaObject.LimitType.IsSubclassOf($asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase) && (byRefArgMetaObject.LimitType !== $asm02.MS.Internal.ComAutomation.InternalCOMObject))) {
		expression = invocationExpression;
	} else {
		expression = System.Linq.Expressions.Expression.Call$2($asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.ConvertChangeTypeMethod, invocationExpression, System.Linq.Expressions.Expression.Constant$1(byRefArgMetaObject.Expression.Type, System.Type), System.Linq.Expressions.Expression.Constant$0(System.Globalization.CultureInfo.CurrentCulture));
	}
	copyBackByRefArgs.Add(System.Linq.Expressions.Expression.Assign(byRefArgMetaObject.Expression, $asm02.System.Runtime.InteropServices.Automation.Helpers.Convert(expression, byRefArgMetaObject.Expression.Type)));
	return parameterExpression;
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.prototype.WrapArguments = function (args, scopeVariables, assignByRefArgs, copyBackByRefArgs) {
	var array = JSIL.Array.New(System.Linq.Expressions.Expression, args.length);
__loop0__: 
	for (var i = 0; i < args.length; ++i) {
		if ($asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.IsByRef(args[i])) {
			var expression = this.SetupByRefVariable(
				args[i], 
				i, 
				scopeVariables, 
				assignByRefArgs, 
				copyBackByRefArgs
			);
			array[i] = $asm02.System.Runtime.InteropServices.Automation.Helpers.Convert(expression, System.Object);
		} else {
			array[i] = $asm02.System.Runtime.InteropServices.Automation.Helpers.Convert(args[i].Expression, System.Object);
		}
	}
	return array;
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.prototype.ConstructConditionalCall = function (context) {
	var num = context.HasReturnValue ? 2 : 1;
	var array = JSIL.Array.New(System.Linq.Expressions.Expression, (context.CopyBackByRefArgs.Count + num));
__loop0__: 
	for (var i = 0; i < context.CopyBackByRefArgs.Count; ++i) {
		array[i] = context.CopyBackByRefArgs.get_Item(i);
	}
	if (context.HasReturnValue) {
		array[(array.length - 2)] = context.ReturnValueExpression;
	}
	array[(array.length - 1)] = context.ResultMO.Expression;
	return System.Linq.Expressions.Expression.Condition$1(context.ConditionalExpression, System.Linq.Expressions.Expression.Block$4(array), context.FallbackResult.Expression, context.Binder.ReturnType);
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.prototype.ConstructFullDynamicBlock = function (context) {
	var expression = this.ConstructConditionalCall(context);
	var array = JSIL.Array.New(System.Linq.Expressions.Expression, (context.AssignByRefArgs.Count + 2));
__loop0__: 
	for (var i = 0; i < context.AssignByRefArgs.Count; ++i) {
		array[i] = context.AssignByRefArgs.get_Item(i);
	}
	array[(array.length - 2)] = System.Linq.Expressions.Expression.Assign(context.CallMethodResult, context.CallMethodExpression);
	array[(array.length - 1)] = expression;
	return System.Linq.Expressions.Expression.Block$8(context.ScopeVariables.ToArray(), array);
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.prototype.ConstructDynamicCall = function (context) {
	var expression = this.ConstructFullDynamicBlock(context);
	return JSIL.New(System.Dynamic.DynamicMetaObject, "_ctor$0", [expression, this.GetRestrictions().Merge(context.ResultMO.Restrictions).Merge(context.FallbackResult.Restrictions)]);
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.prototype.PrepareContext = function (hasReturnValue, binder, args, fallback, fallbackInvoke) {
	var cOMBindContext = new $asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext(hasReturnValue, binder).__Initialize__({
			Fallback: fallback, 
			FallbackResult: fallback(null), 
			Result: System.Linq.Expressions.Expression.Parameter$1(System.Object, "result")}
	);
	cOMBindContext.ScopeVariables.Add(cOMBindContext.Result);
	cOMBindContext.ScopeVariables.Add(cOMBindContext.CallMethodResult);
	if (args !== null) {
		var initializers = this.WrapArguments(args, cOMBindContext.ScopeVariables, cOMBindContext.AssignByRefArgs, cOMBindContext.CopyBackByRefArgs);
		cOMBindContext.WrappedArgsArray = System.Linq.Expressions.Expression.NewArrayInit$0(System.Object, initializers);
	}
	return cOMBindContext;
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.prototype.FailDueToNamedParameterUsage = function (binder) {
	var expression = System.Linq.Expressions.Expression.Throw$1(System.Linq.Expressions.Expression.Constant$0(JSIL.New(System.NotSupportedException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("ComAutomation_NamedParametersNotSupported")])), binder.ReturnType);
	return JSIL.New(System.Dynamic.DynamicMetaObject, "_ctor$0", [expression, this.GetRestrictions()]);
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.prototype.IsOverridden = function (method) {
	var member = JSIL.GetType(this.Value).GetMember$2(method, System.Reflection.MemberTypes.Method, (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public));
	var array = member;
__loop0__: 
	for (var i = 0; i < array.length; ++i) {
		var methodInfo = JSIL.Cast(array[i], System.Reflection.MethodInfo);
		if (!((methodInfo.DeclaringType === $asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase) || (methodInfo.GetBaseDefinition().DeclaringType !== $asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase))) {
			return true;
		}
	}
	return false;
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.prototype.GetRestrictions = function () {
	return System.Dynamic.BindingRestrictions.GetInstanceRestriction(System.Dynamic.DynamicMetaObject.prototype.get_Expression.call(this), this.Value);
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.prototype.GetLimitedSelf = function () {
	if (System.Dynamic.DynamicMetaObject.prototype.get_Expression.call(this).Type === System.Dynamic.DynamicMetaObject.prototype.get_LimitType.call(this)) {
		return System.Dynamic.DynamicMetaObject.prototype.get_Expression.call(this);
	}
	return System.Linq.Expressions.Expression.Convert$0(System.Dynamic.DynamicMetaObject.prototype.get_Expression.call(this), System.Dynamic.DynamicMetaObject.prototype.get_LimitType.call(this));
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.prototype.get_Value = function () {
	return JSIL.Cast(System.Dynamic.DynamicMetaObject.prototype.get_Value.call(this), $asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase);
};
JSIL.MakeProperty($asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.prototype, "Value", 
	$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.prototype.get_Value, null);

$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype._ctor = function (hasReturnValue, binder) {
	System.Object.prototype._ctor.call(this);
	this.HasReturnValue = hasReturnValue;
	this.Binder = binder;
	this.ScopeVariables = new (System.Collections.Generic.List$b1.Of(System.Linq.Expressions.ParameterExpression)) ();
	this.CopyBackByRefArgs = new (System.Collections.Generic.List$b1.Of(System.Linq.Expressions.Expression)) ();
	this.AssignByRefArgs = new (System.Collections.Generic.List$b1.Of(System.Linq.Expressions.Expression)) ();
	this.CallMethodResult = hasReturnValue ? System.Linq.Expressions.Expression.Parameter$1(System.Object, "callMethodResult") : System.Linq.Expressions.Expression.Parameter$1(System.Boolean, "callMethodResult");
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.get_Result = function () {
	return this._result;
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.set_Result = function (value) {
	this._result = value;
	this.ResultMO = JSIL.New(System.Dynamic.DynamicMetaObject, "_ctor$0", [this._result, System.Dynamic.BindingRestrictions.Empty]);
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.get_Fallback = function () {
	return this.Fallback$value;
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.set_Fallback = function (value) {
	this.Fallback$value = value;
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.get_FallbackResult = function () {
	return this.FallbackResult$value;
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.set_FallbackResult = function (value) {
	this.FallbackResult$value = value;
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.get_ScopeVariables = function () {
	return this.ScopeVariables$value;
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.set_ScopeVariables = function (value) {
	this.ScopeVariables$value = value;
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.get_AssignByRefArgs = function () {
	return this.AssignByRefArgs$value;
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.set_AssignByRefArgs = function (value) {
	this.AssignByRefArgs$value = value;
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.get_CopyBackByRefArgs = function () {
	return this.CopyBackByRefArgs$value;
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.set_CopyBackByRefArgs = function (value) {
	this.CopyBackByRefArgs$value = value;
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.get_CallMethodExpression = function () {
	return this.CallMethodExpression$value;
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.set_CallMethodExpression = function (value) {
	this.CallMethodExpression$value = value;
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.get_CallMethodResult = function () {
	return this.CallMethodResult$value;
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.set_CallMethodResult = function (value) {
	this.CallMethodResult$value = value;
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.get_WrappedArgsArray = function () {
	return this.WrappedArgsArray$value;
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.set_WrappedArgsArray = function (value) {
	this.WrappedArgsArray$value = value;
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.get_Binder = function () {
	return this.Binder$value;
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.set_Binder = function (value) {
	this.Binder$value = value;
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.get_HasReturnValue = function () {
	return this.HasReturnValue$value;
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.set_HasReturnValue = function (value) {
	this.HasReturnValue$value = value;
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.get_ResultMO = function () {
	return this.ResultMO$value;
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.set_ResultMO = function (value) {
	this.ResultMO$value = value;
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.get_ConditionalExpression = function () {
	if (this.HasReturnValue) {
		return System.Linq.Expressions.Expression.Property$5($asm02.System.Runtime.InteropServices.Automation.Helpers.Convert(this.CallMethodResult, System.Tuple$b2.Of(System.Object, System.Boolean)), System.Tuple$b2.Of(System.Object, System.Boolean).GetProperty$6("Item2"));
	}
	return $asm02.System.Runtime.InteropServices.Automation.Helpers.Convert(this.CallMethodResult, System.Boolean);
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.get_ReturnValueExpression = function () {
	if (this.HasReturnValue) {
		return System.Linq.Expressions.Expression.Assign(this.Result, System.Linq.Expressions.Expression.Property$5($asm02.System.Runtime.InteropServices.Automation.Helpers.Convert(this.CallMethodResult, System.Tuple$b2.Of(System.Object, System.Boolean)), System.Tuple$b2.Of(System.Object, System.Boolean).GetProperty$6("Item1")));
	}
	return null;
};
JSIL.MakeProperty($asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype, "Result", 
	$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.get_Result, $asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.set_Result);
JSIL.MakeProperty($asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype, "Fallback", 
	$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.get_Fallback, $asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.set_Fallback);
JSIL.MakeProperty($asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype, "FallbackResult", 
	$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.get_FallbackResult, $asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.set_FallbackResult);
JSIL.MakeProperty($asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype, "ScopeVariables", 
	$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.get_ScopeVariables, $asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.set_ScopeVariables);
JSIL.MakeProperty($asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype, "AssignByRefArgs", 
	$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.get_AssignByRefArgs, $asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.set_AssignByRefArgs);
JSIL.MakeProperty($asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype, "CopyBackByRefArgs", 
	$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.get_CopyBackByRefArgs, $asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.set_CopyBackByRefArgs);
JSIL.MakeProperty($asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype, "CallMethodExpression", 
	$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.get_CallMethodExpression, $asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.set_CallMethodExpression);
JSIL.MakeProperty($asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype, "CallMethodResult", 
	$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.get_CallMethodResult, $asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.set_CallMethodResult);
JSIL.MakeProperty($asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype, "WrappedArgsArray", 
	$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.get_WrappedArgsArray, $asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.set_WrappedArgsArray);
JSIL.MakeProperty($asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype, "Binder", 
	$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.get_Binder, $asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.set_Binder);
JSIL.MakeProperty($asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype, "HasReturnValue", 
	$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.get_HasReturnValue, $asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.set_HasReturnValue);
JSIL.MakeProperty($asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype, "ResultMO", 
	$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.get_ResultMO, $asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.set_ResultMO);
JSIL.MakeProperty($asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype, "ConditionalExpression", 
	$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.get_ConditionalExpression, null);
JSIL.MakeProperty($asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype, "ReturnValueExpression", 
	$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.get_ReturnValueExpression, null);
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype._result = null;
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.Fallback$value = null;
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.FallbackResult$value = null;
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.ScopeVariables$value = null;
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.AssignByRefArgs$value = null;
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.CopyBackByRefArgs$value = null;
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.CallMethodExpression$value = null;
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.CallMethodResult$value = null;
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.WrappedArgsArray$value = null;
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.Binder$value = null;
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.HasReturnValue$value = false;
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.COMBindContext.prototype.ResultMO$value = null;

$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.$l$gc__DisplayClass14.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.$l$gc__DisplayClass14.prototype.$this = null;
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.$l$gc__DisplayClass14.prototype.binder = null;

$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.$l$gc__DisplayClass18.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.$l$gc__DisplayClass18.prototype.$this = null;
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.$l$gc__DisplayClass18.prototype.binder = null;
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.$l$gc__DisplayClass18.prototype.value = null;

$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.$l$gc__DisplayClass1c.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.$l$gc__DisplayClass1c.prototype.$this = null;
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.$l$gc__DisplayClass1c.prototype.binder = null;
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.$l$gc__DisplayClass1c.prototype.args = null;

$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.$l$gc__DisplayClass20.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.$l$gc__DisplayClass20.prototype.$this = null;
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.$l$gc__DisplayClass20.prototype.binder = null;
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.$l$gc__DisplayClass20.prototype.args = null;

$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.$l$gc__DisplayClass24.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.$l$gc__DisplayClass24.prototype.$this = null;
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.$l$gc__DisplayClass24.prototype.binder = null;
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.$l$gc__DisplayClass24.prototype.arg = null;

$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.$l$gc__DisplayClass28.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.$l$gc__DisplayClass28.prototype.$this = null;
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.$l$gc__DisplayClass28.prototype.binder = null;
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.$l$gc__DisplayClass28.prototype.indexes = null;

$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.$l$gc__DisplayClass2c.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.$l$gc__DisplayClass2c.prototype.$this = null;
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.$l$gc__DisplayClass2c.prototype.binder = null;
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.$l$gc__DisplayClass2c.prototype.indexes = null;
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.MetaDynamic.$l$gc__DisplayClass2c.prototype.value = null;

$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProvider.prototype.get_ComAutomationObject = function () {
	return this._comAutomationObject;
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProvider.prototype._ctor$0 = function (progID, create) {
	$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.prototype._ctor.call(this);
	if (create) {
		this._comAutomationObject = $asm02.MS.Internal.ComAutomation.ComAutomationServices.CreateObject(progID, $asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.ParamWrapService);
		return;
	}
	this._comAutomationObject = $asm02.MS.Internal.ComAutomation.ComAutomationServices.GetObject(progID, $asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.ParamWrapService);
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProvider.prototype._ctor$1 = function (comAutomationObject) {
	$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.prototype._ctor.call(this);
	this._comAutomationObject = comAutomationObject;
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProvider.prototype.TryGetMember = function (binder, /* ref */ result) {
	var invokeOnGetBinder = JSIL.TryCast(binder, System.Dynamic.IInvokeOnGetBinder);
	if (!((invokeOnGetBinder === null) || invokeOnGetBinder.IInvokeOnGetBinder_InvokeOnGet)) {
		result.value = new $asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderInvokeOnGetProxy(this._comAutomationObject, binder.Name);
		return true;
	}
	if (!this._comAutomationObject.TryInvokeMethodOrGetProperty$0(binder.Name, /* ref */ result)) {
		result.value = new $asm02.System.Runtime.InteropServices.Automation.AutomationEventMetaObjectProvider($asm02.MS.Internal.ComAutomation.ComAutomationServices.GetEvent(this._comAutomationObject, binder.Name));
	}
	return true;
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProvider.prototype.TrySetMember = function (binder, value) {
	if (JSIL.TryCast(value, $asm02.System.Runtime.InteropServices.Automation.AutomationEventMetaObjectProvider) === null) {
		this._comAutomationObject.SetProperty$0(binder.Name, value);
	}
	return true;
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProvider.prototype.TryInvokeMember = function (binder, args, /* ref */ result) {
	result.value = this._comAutomationObject.InvokeMethodOrGetProperty$1(binder.Name, args);
	return true;
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProvider.prototype.TryGetIndex = function (binder, indexes, /* ref */ result) {
	result.value = this._comAutomationObject.InvokeMethodOrGetProperty$1(null, indexes);
	return true;
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProvider.prototype.TrySetIndex = function (binder, indexes, value) {
	this._comAutomationObject.SetProperty$1(null, value, indexes);
	return true;
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProvider.prototype.IDisposable_Dispose = function () {
	if (this._comAutomationObject !== null) {
		this._comAutomationObject.Dispose();
	}
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProvider.prototype.IEnumerable_GetEnumerator = function () {
	var result = new JSIL.Variable(null);
	if (this._comAutomationObject.TryGetEnumerator(/* ref */ result)) {
		return result.value;
	}
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
JSIL.OverloadedMethod($asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProvider.prototype, "_ctor", [
		["_ctor$0", [System.String, System.Boolean]], 
		["_ctor$1", [$asm02.MS.Internal.ComAutomation.ComAutomationObject]]
	]);
JSIL.MakeProperty($asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProvider.prototype, "ComAutomationObject", 
	$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProvider.prototype.get_ComAutomationObject, null);
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProvider.prototype._comAutomationObject = null;

$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderInvokeOnGetProxy.prototype._ctor = function (comAutomationObject, memberName) {
	$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProvider.prototype._ctor$1.call(this, comAutomationObject);
	if (System.String.IsNullOrEmpty(memberName)) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["memberName"]);
	}
	this._memberName = memberName;
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderInvokeOnGetProxy.prototype.TryGetIndex = function (binder, indexes, /* ref */ result) {
	try {
		result.value = $asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProvider.prototype.get_ComAutomationObject.call(this).InvokeMethodOrGetProperty$1(this._memberName, indexes);
	} finally {
		this._memberName = null;
	}
	return true;
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderInvokeOnGetProxy.prototype.TrySetIndex = function (binder, indexes, value) {
	try {
		$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProvider.prototype.get_ComAutomationObject.call(this).SetProperty$1(this._memberName, value, indexes);
	} finally {
		this._memberName = null;
	}
	return true;
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderInvokeOnGetProxy.prototype.TryInvoke = function (binder, args, /* ref */ result) {
	try {
		result.value = $asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProvider.prototype.get_ComAutomationObject.call(this).InvokeMethodOrGetProperty$1(this._memberName, args);
	} finally {
		this._memberName = null;
	}
	return true;
};
$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderInvokeOnGetProxy.prototype._memberName = null;

$asm02.System.Runtime.InteropServices.Automation.AutomationEventMetaObjectProvider.prototype.get_AutomationEvent = function () {
	return this._automationEvent;
};
$asm02.System.Runtime.InteropServices.Automation.AutomationEventMetaObjectProvider.prototype._ctor = function (automationEvent) {
	$asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase.prototype._ctor.call(this);
	this._automationEvent = automationEvent;
};
$asm02.System.Runtime.InteropServices.Automation.AutomationEventMetaObjectProvider.prototype.TryBinaryOperation = function (binder, arg, /* ref */ result) {
	var delegate = JSIL.TryCast(JSIL.TryCast(arg, System.Array.Of(System.Object))[0], System.Delegate);
	if (binder.Operation === System.Linq.Expressions.ExpressionType.AddAssign) {
		if (delegate !== null) {
			this._automationEvent.AddEventHandler(delegate);
			result.value = this;
			return true;
		}
		throw JSIL.New(System.ArgumentException, "_ctor$0", []);
	} else {
		if (binder.Operation !== System.Linq.Expressions.ExpressionType.SubtractAssign) {
			throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
		}
		if (delegate !== null) {
			this._automationEvent.RemoveEventHandler(delegate);
			result.value = this;
			return true;
		}
		throw JSIL.New(System.ArgumentException, "_ctor$0", []);
	}
};
JSIL.MakeProperty($asm02.System.Runtime.InteropServices.Automation.AutomationEventMetaObjectProvider.prototype, "AutomationEvent", 
	$asm02.System.Runtime.InteropServices.Automation.AutomationEventMetaObjectProvider.prototype.get_AutomationEvent, null);
$asm02.System.Runtime.InteropServices.Automation.AutomationEventMetaObjectProvider.prototype._automationEvent = null;

$asm02.System.Runtime.InteropServices.Automation.Helpers.Convert = function (expression, type) {
	if (expression.Type === type) {
		return expression;
	}
	return System.Linq.Expressions.Expression.Convert$0(expression, type);
};

System.Runtime.InteropServices.Automation.AutomationEvent.prototype._ctor = function (comAutoObject, eventName) {
	this._handlerLock = new System.Object();
	this._connectionLock = new System.Object();
	this._delegates = new (System.Collections.Generic.List$b1.Of(System.Delegate)) ();
	System.Object.prototype._ctor.call(this);
	this._owner = comAutoObject;
	this._eventName = eventName;
};
System.Runtime.InteropServices.Automation.AutomationEvent.prototype.add__EventRaised = function (value) {
	this._EventRaised = System.Delegate.Combine(this._EventRaised, value);
};
System.Runtime.InteropServices.Automation.AutomationEvent.prototype.remove__EventRaised = function (value) {
	this._EventRaised = System.Delegate.Remove(this._EventRaised, value);
};
System.Runtime.InteropServices.Automation.AutomationEvent.prototype.add_EventRaised = function (value) {
	var connectionLock = null, handlerLock = null;
	System.Threading.Monitor.Enter((connectionLock = this._connectionLock));
	try {
		System.Threading.Monitor.Enter((handlerLock = this._handlerLock));
		try {
			this._EventRaised = System.Delegate.Combine(this._EventRaised, value);
			++this._handlerCount;
		} finally {
			System.Threading.Monitor.Exit(handlerLock);
		}
		this.UpdateConnection();
	} finally {
		System.Threading.Monitor.Exit(connectionLock);
	}
};
System.Runtime.InteropServices.Automation.AutomationEvent.prototype.remove_EventRaised = function (value) {
	var connectionLock = null, handlerLock = null;
	System.Threading.Monitor.Enter((connectionLock = this._connectionLock));
	try {
		System.Threading.Monitor.Enter((handlerLock = this._handlerLock));
		try {
			this._EventRaised = System.Delegate.Remove(this._EventRaised, value);
			--this._handlerCount;
		} finally {
			System.Threading.Monitor.Exit(handlerLock);
		}
		this.UpdateConnection();
	} finally {
		System.Threading.Monitor.Exit(connectionLock);
	}
};
System.Runtime.InteropServices.Automation.AutomationEvent.prototype.AddEventHandler = function (handler) {
	var connectionLock = null, handlerLock = null;
	System.Threading.Monitor.Enter((connectionLock = this._connectionLock));
	try {
		System.Threading.Monitor.Enter((handlerLock = this._handlerLock));
		try {
			this._delegates.Add(handler);
			++this._handlerCount;
		} finally {
			System.Threading.Monitor.Exit(handlerLock);
		}
		this.UpdateConnection();
	} finally {
		System.Threading.Monitor.Exit(connectionLock);
	}
};
System.Runtime.InteropServices.Automation.AutomationEvent.prototype.RemoveEventHandler = function (handler) {
	var connectionLock = null, handlerLock = null;
	System.Threading.Monitor.Enter((connectionLock = this._connectionLock));
	try {
		System.Threading.Monitor.Enter((handlerLock = this._handlerLock));
		try {
			this._delegates.Remove(handler);
			--this._handlerCount;
		} finally {
			System.Threading.Monitor.Exit(handlerLock);
		}
		this.UpdateConnection();
	} finally {
		System.Threading.Monitor.Exit(connectionLock);
	}
};
System.Runtime.InteropServices.Automation.AutomationEvent.prototype.UpdateConnection = function () {
	if (this._handlerCount === 1) {
		this._owner.ConnectEvent(this._eventName);
		return;
	}
	if (this._handlerCount === 0) {
		this._owner.DisconnectEvent(this._eventName);
	}
};
System.Runtime.InteropServices.Automation.AutomationEvent.prototype.RaiseComAutomationEvent = function (args) {
	var handlerLock = null;
	if (this._owner !== null) {
		var array = null;
		var array2 = null;
		System.Threading.Monitor.Enter((handlerLock = this._handlerLock));
		try {
			if (this._EventRaised !== null) {
				array = this._EventRaised.GetInvocationList();
			}
			array2 = this._delegates.ToArray();
		} finally {
			System.Threading.Monitor.Exit(handlerLock);
		}
		if (array !== null) {
			var obj = this._owner.ParamWrapService.Wrap(this._owner);
			var automationEventArgs = new System.Runtime.InteropServices.Automation.AutomationEventArgs(args);
			var array3 = array;
		__loop0__: 
			for (var i = 0; i < array3.length; ++i) {
				array3[i].DynamicInvoke([obj, automationEventArgs]);
			}
		}
		var array4 = array2;
	__loop1__: 
		for (var j = 0; j < array4.length; ++j) {
			array4[j].DynamicInvoke(args);
		}
	}
};
System.Runtime.InteropServices.Automation.AutomationEvent.prototype._EventRaised = null;
System.Runtime.InteropServices.Automation.AutomationEvent.prototype._handlerLock = null;
System.Runtime.InteropServices.Automation.AutomationEvent.prototype._connectionLock = null;
System.Runtime.InteropServices.Automation.AutomationEvent.prototype._owner = null;
System.Runtime.InteropServices.Automation.AutomationEvent.prototype._eventName = null;
System.Runtime.InteropServices.Automation.AutomationEvent.prototype._delegates = null;
System.Runtime.InteropServices.Automation.AutomationEvent.prototype._handlerCount = 0;

System.Runtime.InteropServices.Automation.AutomationEventArgs.prototype._ctor = function (args) {
	System.EventArgs.prototype._ctor.call(this);
	this.Arguments = args;
};
System.Runtime.InteropServices.Automation.AutomationEventArgs.prototype.get_Arguments = function () {
	return this.Arguments$value;
};
System.Runtime.InteropServices.Automation.AutomationEventArgs.prototype.set_Arguments = function (value) {
	this.Arguments$value = value;
};
JSIL.MakeProperty(System.Runtime.InteropServices.Automation.AutomationEventArgs.prototype, "Arguments", 
	System.Runtime.InteropServices.Automation.AutomationEventArgs.prototype.get_Arguments, System.Runtime.InteropServices.Automation.AutomationEventArgs.prototype.set_Arguments);
System.Runtime.InteropServices.Automation.AutomationEventArgs.prototype.Arguments$value = null;

System.Windows.Controls.Primitives.ButtonBase.prototype.get_ClickMode = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Primitives.ButtonBase.ClickModeProperty), System.Windows.Controls.ClickMode);
};
System.Windows.Controls.Primitives.ButtonBase.prototype.set_ClickMode = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Primitives.ButtonBase.ClickModeProperty, value);
};
System.Windows.Controls.Primitives.ButtonBase.OnClickModePropertyChanged = function (d, e) {
	var clickMode = JSIL.Cast(e.NewValue, System.Windows.Controls.ClickMode);
	if (!(!JSIL.Cast(clickMode, System.Boolean) || 
			(clickMode === System.Windows.Controls.ClickMode.Press) || (clickMode === System.Windows.Controls.ClickMode.Hover))) {
		throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm02.System.Windows.Resx.GetString$2("ButtonBase_OnClickModePropertyChanged_InvalidValue"), "value"]);
	}
};
System.Windows.Controls.Primitives.ButtonBase.prototype.get_IsFocused = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Primitives.ButtonBase.IsFocusedProperty), System.Boolean);
};
System.Windows.Controls.Primitives.ButtonBase.prototype.set_IsFocused = function (value) {
	System.Windows.DependencyObject.prototype.SetValueInternal$1.call(this, System.Windows.Controls.Primitives.ButtonBase.IsFocusedProperty, value, true);
};
System.Windows.Controls.Primitives.ButtonBase.prototype.get_IsMouseOver = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Primitives.ButtonBase.IsMouseOverProperty), System.Boolean);
};
System.Windows.Controls.Primitives.ButtonBase.prototype.set_IsMouseOver = function (value) {
	System.Windows.DependencyObject.prototype.SetValueInternal$1.call(this, System.Windows.Controls.Primitives.ButtonBase.IsMouseOverProperty, value, true);
};
System.Windows.Controls.Primitives.ButtonBase.prototype.get_IsPressed = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Primitives.ButtonBase.IsPressedProperty), System.Boolean);
};
System.Windows.Controls.Primitives.ButtonBase.prototype.set_IsPressed = function (value) {
	System.Windows.DependencyObject.prototype.SetValueInternal$1.call(this, System.Windows.Controls.Primitives.ButtonBase.IsPressedProperty, value, true);
};
System.Windows.Controls.Primitives.ButtonBase.OnIsPressedPropertyChanged = function (d, e) {
	var buttonBase = JSIL.TryCast(d, System.Windows.Controls.Primitives.ButtonBase);
	buttonBase.OnIsPressedChanged(e);
};
System.Windows.Controls.Primitives.ButtonBase.prototype.get_Command = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Primitives.ButtonBase.CommandProperty), System.Windows.Input.ICommand);
};
System.Windows.Controls.Primitives.ButtonBase.prototype.set_Command = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Primitives.ButtonBase.CommandProperty, value);
};
System.Windows.Controls.Primitives.ButtonBase.OnCommandPropertyChanged = function (d, e) {
	var buttonBase = JSIL.TryCast(d, System.Windows.Controls.Primitives.ButtonBase);
	buttonBase.OnCommandChanged(e);
};
System.Windows.Controls.Primitives.ButtonBase.prototype.get_CommandParameter = function () {
	return System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Primitives.ButtonBase.CommandParameterProperty);
};
System.Windows.Controls.Primitives.ButtonBase.prototype.set_CommandParameter = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Primitives.ButtonBase.CommandParameterProperty, value);
};
System.Windows.Controls.Primitives.ButtonBase.OnCommandParameterPropertyChanged = function (d, e) {
	var buttonBase = JSIL.TryCast(d, System.Windows.Controls.Primitives.ButtonBase);
	buttonBase.OnCommandParameterChanged(e);
};
System.Windows.Controls.Primitives.ButtonBase.prototype.add_Click = function (value) {
	this.Click = System.Delegate.Combine(this.Click, value);
};
System.Windows.Controls.Primitives.ButtonBase.prototype.remove_Click = function (value) {
	this.Click = System.Delegate.Remove(this.Click, value);
};
System.Windows.Controls.Primitives.ButtonBase.prototype._ctor = function () {
	System.Windows.Controls.ContentControl.prototype._ctor$0.call(this);
	$asm02.System.Windows.Input.KeyboardNavigation.SetAcceptsReturn(this, true);
	System.Windows.FrameworkElement.prototype.add_Loaded.call(this, function (obj, routedEventArgs) {
			this._isLoaded = true;
			this.UpdateVisualState$1(false);
		});
};
System.Windows.Controls.Primitives.ButtonBase.prototype.AutomationButtonBaseClick = function () {
	this.OnClick();
};
System.Windows.Controls.Primitives.ButtonBase.prototype.UpdateVisualState$0 = function () {
	this.UpdateVisualState$1(true);
};
System.Windows.Controls.Primitives.ButtonBase.prototype.UpdateVisualState$1 = function (useTransitions) {
	if (!this._suspendStateChanges) {
		this.ChangeVisualState(useTransitions);
	}
};
System.Windows.Controls.Primitives.ButtonBase.prototype.ChangeVisualState = function (useTransitions) {
};
System.Windows.Controls.Primitives.ButtonBase.prototype.CaptureMouseInternal = function () {
	if (!this._isMouseCaptured) {
		this._isMouseCaptured = System.Windows.UIElement.prototype.CaptureMouse.call(this);
	}
};
System.Windows.Controls.Primitives.ButtonBase.prototype.ReleaseMouseCaptureInternal = function () {
	System.Windows.UIElement.prototype.ReleaseMouseCapture.call(this);
	this._isMouseCaptured = false;
};
System.Windows.Controls.Primitives.ButtonBase.prototype.OnClickInternal = function () {
	this.OnClick();
};
System.Windows.Controls.Primitives.ButtonBase.prototype.OnClick = function () {
	var click = this.Click;
	if (click !== null) {
		click(this, new System.Windows.RoutedEventArgs().__Initialize__({
					OriginalSource: this}
			));
	}
	this.ExecuteCommand();
};
System.Windows.Controls.Primitives.ButtonBase.prototype.OnIsEnabledChanged = function (e) {
	System.Windows.Controls.Control.prototype.OnIsEnabledChanged.call(this, e);
	this._suspendStateChanges = true;
	try {
		if (!System.Windows.Controls.Control.prototype.get_IsEnabled.call(this)) {
			this.IsPressed = false;
			this.IsMouseOver = false;
			this._isMouseCaptured = false;
			this._isSpaceOrEnterKeyDown = false;
			this._isMouseLeftButtonDown = false;
		}
	} finally {
		this._suspendStateChanges = false;
		this.UpdateVisualState$0();
	}
};
System.Windows.Controls.Primitives.ButtonBase.prototype.OnIsPressedChanged = function (e) {
	this.UpdateVisualState$0();
};
System.Windows.Controls.Primitives.ButtonBase.prototype.OnCommandChanged = function (e) {
	var command = JSIL.TryCast(e.OldValue, System.Windows.Input.ICommand);
	var command2 = JSIL.TryCast(e.NewValue, System.Windows.Input.ICommand);
	if (command !== null) {
		command.ICommand_remove_CanExecuteChanged(JSIL.Delegate.New("System.EventHandler", this, System.Windows.Controls.Primitives.ButtonBase.prototype.CanExecuteChanged));
	}
	if (command2 !== null) {
		command2.ICommand_add_CanExecuteChanged(JSIL.Delegate.New("System.EventHandler", this, System.Windows.Controls.Primitives.ButtonBase.prototype.CanExecuteChanged));
	}
	this.UpdateCanExecute();
};
System.Windows.Controls.Primitives.ButtonBase.prototype.OnCommandParameterChanged = function (e) {
	this.UpdateCanExecute();
};
System.Windows.Controls.Primitives.ButtonBase.prototype.CanExecuteChanged = function (sender, e) {
	this.UpdateCanExecute();
};
System.Windows.Controls.Primitives.ButtonBase.prototype.UpdateCanExecute = function () {
	var command = this.Command;
	var commandParameter = this.CommandParameter;
	var flag = ((command !== null) && 
		!command.ICommand_CanExecute(commandParameter));
	if (this._isSuspendingIsEnabled !== flag) {
		$asm02.MS.Internal.XcpImports.SuppressIsEnabled(this, flag);
		this._isSuspendingIsEnabled = flag;
	}
};
System.Windows.Controls.Primitives.ButtonBase.prototype.ExecuteCommand = function () {
	var commandParameter = this.CommandParameter;
	var command = this.Command;
	if (!((command === null) || !command.ICommand_CanExecute(commandParameter))) {
		command.ICommand_Execute(commandParameter);
	}
};
System.Windows.Controls.Primitives.ButtonBase.prototype.OnGotFocus = function (e) {
	System.Windows.Controls.Control.prototype.OnGotFocus.call(this, e);
	this.IsFocused = true;
	this.UpdateVisualState$0();
};
System.Windows.Controls.Primitives.ButtonBase.prototype.OnLostFocus = function (e) {
	System.Windows.Controls.Control.prototype.OnLostFocus.call(this, e);
	this.IsFocused = false;
	this._suspendStateChanges = true;
	try {
		if (this.ClickMode !== System.Windows.Controls.ClickMode.Hover) {
			this.IsPressed = false;
			this.ReleaseMouseCaptureInternal();
			this._isSpaceOrEnterKeyDown = false;
		}
	} finally {
		this._suspendStateChanges = false;
		this.UpdateVisualState$0();
	}
};
System.Windows.Controls.Primitives.ButtonBase.prototype.OnKeyDown = function (e) {
	System.Windows.Controls.Control.prototype.OnKeyDown.call(this, e);
	if (e.Handled) {
		return;
	}
	if (this.OnKeyDownInternal(e.Key)) {
		e.Handled = true;
	}
};
System.Windows.Controls.Primitives.ButtonBase.prototype.OnKeyDownInternal = function (key) {
	var result = false;
	if (!(!System.Windows.Controls.Control.prototype.get_IsEnabled.call(this) || (this.ClickMode === System.Windows.Controls.ClickMode.Hover))) {
		if (!((key !== System.Windows.Input.Key.Space) && ((key !== System.Windows.Input.Key.Enter) || 
					!$asm02.System.Windows.Input.KeyboardNavigation.GetAcceptsReturn(this)))) {
			if (!(this._isMouseCaptured || this._isSpaceOrEnterKeyDown)) {
				this._isSpaceOrEnterKeyDown = true;
				this.IsPressed = true;
				if (this.ClickMode === System.Windows.Controls.ClickMode.Press) {
					this.OnClick();
				}
				result = true;
			}
		} else if (this._isSpaceOrEnterKeyDown) {
			this.IsPressed = false;
			this._isSpaceOrEnterKeyDown = false;
		}
	}
	return result;
};
System.Windows.Controls.Primitives.ButtonBase.prototype.OnKeyUp = function (e) {
	System.Windows.Controls.Control.prototype.OnKeyUp.call(this, e);
	if (e.Handled) {
		return;
	}
	if (this.OnKeyUpInternal(e.Key)) {
		e.Handled = true;
	}
};
System.Windows.Controls.Primitives.ButtonBase.prototype.OnKeyUpInternal = function (key) {
	var result = false;
	if (!(!System.Windows.Controls.Control.prototype.get_IsEnabled.call(this) || 
			(this.ClickMode === System.Windows.Controls.ClickMode.Hover) || ((key !== System.Windows.Input.Key.Space) && 
				((key !== System.Windows.Input.Key.Enter) || 
					!$asm02.System.Windows.Input.KeyboardNavigation.GetAcceptsReturn(this))))) {
		this._isSpaceOrEnterKeyDown = false;
		if (!this._isMouseLeftButtonDown) {
			if (!(!this.IsPressed || JSIL.Cast(this.ClickMode, System.Boolean))) {
				this.OnClick();
			}
			this.IsPressed = false;
		}
		result = true;
	}
	return result;
};
System.Windows.Controls.Primitives.ButtonBase.prototype.OnMouseEnter = function (e) {
	System.Windows.Controls.Control.prototype.OnMouseEnter.call(this, e);
	this.IsMouseOver = true;
	this._suspendStateChanges = true;
	try {
		if (!((this.ClickMode !== System.Windows.Controls.ClickMode.Hover) || !System.Windows.Controls.Control.prototype.get_IsEnabled.call(this))) {
			this.IsPressed = true;
			this.OnClick();
		}
	} finally {
		this._suspendStateChanges = false;
		this.UpdateVisualState$0();
	}
};
System.Windows.Controls.Primitives.ButtonBase.prototype.OnMouseLeave = function (e) {
	System.Windows.Controls.Control.prototype.OnMouseLeave.call(this, e);
	this.IsMouseOver = false;
	this._suspendStateChanges = true;
	try {
		if (!((this.ClickMode !== System.Windows.Controls.ClickMode.Hover) || !System.Windows.Controls.Control.prototype.get_IsEnabled.call(this))) {
			this.IsPressed = false;
		}
	} finally {
		this._suspendStateChanges = false;
		this.UpdateVisualState$0();
	}
};
System.Windows.Controls.Primitives.ButtonBase.prototype.OnMouseLeftButtonDown = function (e) {
	System.Windows.Controls.Control.prototype.OnMouseLeftButtonDown.call(this, e);
	if (e.Handled) {
		return;
	}
	this._isMouseLeftButtonDown = true;
	if (!(System.Windows.Controls.Control.prototype.get_IsEnabled.call(this) && (this.ClickMode !== System.Windows.Controls.ClickMode.Hover))) {
		return;
	}
	e.Handled = true;
	this._suspendStateChanges = true;
	try {
		System.Windows.Controls.Control.prototype.Focus.call(this);
		this.CaptureMouseInternal();
		if (this._isMouseCaptured) {
			this.IsPressed = true;
		}
	} finally {
		this._suspendStateChanges = false;
		this.UpdateVisualState$0();
	}
	if (this.ClickMode === System.Windows.Controls.ClickMode.Press) {
		this.OnClick();
	}
};
System.Windows.Controls.Primitives.ButtonBase.prototype.OnMouseLeftButtonUp = function (e) {
	System.Windows.Controls.Control.prototype.OnMouseLeftButtonUp.call(this, e);
	if (e.Handled) {
		return;
	}
	this._isMouseLeftButtonDown = false;
	if (!(System.Windows.Controls.Control.prototype.get_IsEnabled.call(this) && (this.ClickMode !== System.Windows.Controls.ClickMode.Hover))) {
		return;
	}
	e.Handled = true;
	if (!(this._isSpaceOrEnterKeyDown || 
			!this.IsPressed || JSIL.Cast(this.ClickMode, System.Boolean))) {
		this.OnClick();
	}
	if (!this._isSpaceOrEnterKeyDown) {
		this.ReleaseMouseCaptureInternal();
		this.IsPressed = false;
	}
};
System.Windows.Controls.Primitives.ButtonBase.prototype.OnLostMouseCapture = function (e) {
	this.ReleaseMouseCaptureInternal();
	this.IsPressed = false;
};
System.Windows.Controls.Primitives.ButtonBase.prototype.OnMouseMove = function (e) {
	System.Windows.Controls.Control.prototype.OnMouseMove.call(this, e);
	this._mousePosition = e.GetPosition(this).MemberwiseClone();
	if (!(!this._isMouseLeftButtonDown || 
			!System.Windows.Controls.Control.prototype.get_IsEnabled.call(this) || 
			(this.ClickMode === System.Windows.Controls.ClickMode.Hover) || 
			!this._isMouseCaptured || this._isSpaceOrEnterKeyDown)) {
		this.IsPressed = this.IsValidMousePosition();
	}
};
System.Windows.Controls.Primitives.ButtonBase.prototype.IsValidMousePosition = function () {
	return (!((this._mousePosition.X < 0) || 
			(this._mousePosition.X > System.Windows.FrameworkElement.prototype.get_ActualWidth.call(this)) || 
			(this._mousePosition.Y < 0)) && (this._mousePosition.Y <= System.Windows.FrameworkElement.prototype.get_ActualHeight.call(this)));
};
JSIL.OverloadedMethod(System.Windows.Controls.Primitives.ButtonBase.prototype, "UpdateVisualState", [
		["UpdateVisualState$0", []], 
		["UpdateVisualState$1", [System.Boolean]]
	]);
JSIL.MakeProperty(System.Windows.Controls.Primitives.ButtonBase.prototype, "ClickMode", 
	System.Windows.Controls.Primitives.ButtonBase.prototype.get_ClickMode, System.Windows.Controls.Primitives.ButtonBase.prototype.set_ClickMode);
JSIL.MakeProperty(System.Windows.Controls.Primitives.ButtonBase.prototype, "IsFocused", 
	System.Windows.Controls.Primitives.ButtonBase.prototype.get_IsFocused, System.Windows.Controls.Primitives.ButtonBase.prototype.set_IsFocused);
JSIL.MakeProperty(System.Windows.Controls.Primitives.ButtonBase.prototype, "IsMouseOver", 
	System.Windows.Controls.Primitives.ButtonBase.prototype.get_IsMouseOver, System.Windows.Controls.Primitives.ButtonBase.prototype.set_IsMouseOver);
JSIL.MakeProperty(System.Windows.Controls.Primitives.ButtonBase.prototype, "IsPressed", 
	System.Windows.Controls.Primitives.ButtonBase.prototype.get_IsPressed, System.Windows.Controls.Primitives.ButtonBase.prototype.set_IsPressed);
JSIL.MakeProperty(System.Windows.Controls.Primitives.ButtonBase.prototype, "Command", 
	System.Windows.Controls.Primitives.ButtonBase.prototype.get_Command, System.Windows.Controls.Primitives.ButtonBase.prototype.set_Command);
JSIL.MakeProperty(System.Windows.Controls.Primitives.ButtonBase.prototype, "CommandParameter", 
	System.Windows.Controls.Primitives.ButtonBase.prototype.get_CommandParameter, System.Windows.Controls.Primitives.ButtonBase.prototype.set_CommandParameter);
Object.defineProperty(System.Windows.Controls.Primitives.ButtonBase, "StateNormal", {
		"value": "Normal"}
);
Object.defineProperty(System.Windows.Controls.Primitives.ButtonBase, "StateMouseOver", {
		"value": "MouseOver"}
);
Object.defineProperty(System.Windows.Controls.Primitives.ButtonBase, "StatePressed", {
		"value": "Pressed"}
);
Object.defineProperty(System.Windows.Controls.Primitives.ButtonBase, "StateDisabled", {
		"value": "Disabled"}
);
Object.defineProperty(System.Windows.Controls.Primitives.ButtonBase, "GroupCommon", {
		"value": "CommonStates"}
);
Object.defineProperty(System.Windows.Controls.Primitives.ButtonBase, "StateFocused", {
		"value": "Focused"}
);
Object.defineProperty(System.Windows.Controls.Primitives.ButtonBase, "StateUnfocused", {
		"value": "Unfocused"}
);
Object.defineProperty(System.Windows.Controls.Primitives.ButtonBase, "GroupFocus", {
		"value": "FocusStates"}
);
System.Windows.Controls.Primitives.ButtonBase.ClickModeProperty = null;
System.Windows.Controls.Primitives.ButtonBase.IsFocusedProperty = null;
System.Windows.Controls.Primitives.ButtonBase.IsMouseOverProperty = null;
System.Windows.Controls.Primitives.ButtonBase.IsPressedProperty = null;
System.Windows.Controls.Primitives.ButtonBase.CommandProperty = null;
System.Windows.Controls.Primitives.ButtonBase.CommandParameterProperty = null;
System.Windows.Controls.Primitives.ButtonBase.prototype._isLoaded = false;
System.Windows.Controls.Primitives.ButtonBase.prototype._isMouseCaptured = false;
System.Windows.Controls.Primitives.ButtonBase.prototype._isSpaceOrEnterKeyDown = false;
System.Windows.Controls.Primitives.ButtonBase.prototype._isMouseLeftButtonDown = false;
System.Windows.Controls.Primitives.ButtonBase.prototype._currentState = null;
System.Windows.Controls.Primitives.ButtonBase.prototype._suspendStateChanges = false;
System.Windows.Controls.Primitives.ButtonBase.prototype._isSuspendingIsEnabled = false;
System.Windows.Controls.Primitives.ButtonBase.prototype.Click = null;
System.Windows.Controls.Primitives.ButtonBase._cctor = function () {
	System.Windows.Controls.Primitives.ButtonBase.ClickModeProperty = System.Windows.DependencyProperty.Register$0("ClickMode", System.Windows.Controls.ClickMode, System.Windows.Controls.Primitives.ButtonBase, JSIL.New(System.Windows.PropertyMetadata, "_ctor$0", [JSIL.Delegate.New("System.Windows.PropertyChangedCallback", null, System.Windows.Controls.Primitives.ButtonBase.OnClickModePropertyChanged)]));
	System.Windows.Controls.Primitives.ButtonBase.IsFocusedProperty = System.Windows.DependencyProperty.RegisterReadOnly("IsFocused", System.Boolean, System.Windows.Controls.Primitives.ButtonBase, null);
	System.Windows.Controls.Primitives.ButtonBase.IsMouseOverProperty = System.Windows.DependencyProperty.RegisterReadOnly("IsMouseOver", System.Boolean, System.Windows.Controls.Primitives.ButtonBase, null);
	System.Windows.Controls.Primitives.ButtonBase.IsPressedProperty = System.Windows.DependencyProperty.RegisterReadOnly("IsPressed", System.Boolean, System.Windows.Controls.Primitives.ButtonBase, JSIL.New(System.Windows.PropertyMetadata, "_ctor$0", [JSIL.Delegate.New("System.Windows.PropertyChangedCallback", null, System.Windows.Controls.Primitives.ButtonBase.OnIsPressedPropertyChanged)]));
	System.Windows.Controls.Primitives.ButtonBase.CommandProperty = System.Windows.DependencyProperty.Register$0("Command", System.Windows.Input.ICommand, System.Windows.Controls.Primitives.ButtonBase, JSIL.New(System.Windows.PropertyMetadata, "_ctor$2", [null, JSIL.Delegate.New("System.Windows.PropertyChangedCallback", null, System.Windows.Controls.Primitives.ButtonBase.OnCommandPropertyChanged)]));
	System.Windows.Controls.Primitives.ButtonBase.CommandParameterProperty = System.Windows.DependencyProperty.Register$0("CommandParameter", System.Object, System.Windows.Controls.Primitives.ButtonBase, JSIL.New(System.Windows.PropertyMetadata, "_ctor$2", [null, JSIL.Delegate.New("System.Windows.PropertyChangedCallback", null, System.Windows.Controls.Primitives.ButtonBase.OnCommandParameterPropertyChanged)]));
};

System.Windows.Controls.Button.prototype._ctor = function () {
	System.Windows.Controls.Primitives.ButtonBase.prototype._ctor.call(this);
	System.Windows.Controls.Control.prototype.set_DefaultStyleKey.call(this, System.Windows.Controls.Button);
};
System.Windows.Controls.Button.prototype.OnCreateAutomationPeer = function () {
	return new System.Windows.Automation.Peers.ButtonAutomationPeer(this);
};
System.Windows.Controls.Button.prototype.OnApplyTemplate = function () {
	System.Windows.FrameworkElement.prototype.OnApplyTemplate.call(this);
	System.Windows.Controls.Primitives.ButtonBase.prototype.UpdateVisualState$1.call(this, false);
};
System.Windows.Controls.Button.prototype.ChangeVisualState = function (useTransitions) {
	if (!System.Windows.Controls.Control.prototype.get_IsEnabled.call(this)) {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "Disabled");
	} else if (System.Windows.Controls.Primitives.ButtonBase.prototype.get_IsPressed.call(this)) {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "Pressed");
	} else if (System.Windows.Controls.Primitives.ButtonBase.prototype.get_IsMouseOver.call(this)) {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "MouseOver");
	} else {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "Normal");
	}
	if (!(!System.Windows.Controls.Primitives.ButtonBase.prototype.get_IsFocused.call(this) || !System.Windows.Controls.Control.prototype.get_IsEnabled.call(this))) {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "Focused");
		return;
	}
	System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "Unfocused");
};
System.Windows.Controls.Button.prototype.OnClick = function () {
	if (System.Windows.Automation.Peers.AutomationPeer.ListenerExists(System.Windows.Automation.Peers.AutomationEvents.InvokePatternOnInvoked)) {
		var orCreateAutomationPeer = System.Windows.UIElement.prototype.GetOrCreateAutomationPeer.call(this);
		if (orCreateAutomationPeer !== null) {
			orCreateAutomationPeer.RaiseAutomationEvent(System.Windows.Automation.Peers.AutomationEvents.InvokePatternOnInvoked);
		}
	}
	System.Windows.Controls.Primitives.ButtonBase.prototype.OnClick.call(this);
};

System.Windows.Controls.Primitives.ToggleButton.prototype.get_IsChecked = function () {
	return JSIL.Cast(JSIL.TryCast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Primitives.ToggleButton.IsCheckedProperty), System.Nullable$b1.Of(System.Boolean)), System.Nullable$b1.Of(System.Boolean));
};
System.Windows.Controls.Primitives.ToggleButton.prototype.set_IsChecked = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Primitives.ToggleButton.IsCheckedProperty, value.MemberwiseClone());
};
System.Windows.Controls.Primitives.ToggleButton.OnIsCheckedPropertyChanged = function (d, e) {
	var toggleButton = JSIL.TryCast(d, System.Windows.Controls.Primitives.ToggleButton);
	var flag = JSIL.Cast(e.NewValue, System.Nullable$b1.Of(System.Boolean)).MemberwiseClone();
	var toggleButtonAutomationPeer = JSIL.TryCast(toggleButton.GetAutomationPeer(), System.Windows.Automation.Peers.ToggleButtonAutomationPeer);
	if (toggleButtonAutomationPeer !== null) {
		toggleButtonAutomationPeer.RaiseToggleStatePropertyChangedEvent(JSIL.Cast(e.OldValue, System.Nullable$b1.Of(System.Boolean)).MemberwiseClone(), flag.MemberwiseClone());
	}
	var routedEventArgs = new System.Windows.RoutedEventArgs();
	routedEventArgs.OriginalSource = toggleButton;
	var flag2 = flag.MemberwiseClone();
	if (flag2.GetValueOrDefault$0() && flag2.HasValue) {
		toggleButton.OnChecked(routedEventArgs);
		return;
	}
	var flag3 = flag.MemberwiseClone();
	if (!flag3.GetValueOrDefault$0() && flag3.HasValue) {
		toggleButton.OnUnchecked(routedEventArgs);
		return;
	}
	toggleButton.OnIndeterminate(routedEventArgs);
};
System.Windows.Controls.Primitives.ToggleButton.prototype.get_IsThreeState = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Primitives.ToggleButton.IsThreeStateProperty), System.Boolean);
};
System.Windows.Controls.Primitives.ToggleButton.prototype.set_IsThreeState = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Primitives.ToggleButton.IsThreeStateProperty, value);
};
System.Windows.Controls.Primitives.ToggleButton.prototype.add_Checked = function (value) {
	this.Checked = System.Delegate.Combine(this.Checked, value);
};
System.Windows.Controls.Primitives.ToggleButton.prototype.remove_Checked = function (value) {
	this.Checked = System.Delegate.Remove(this.Checked, value);
};
System.Windows.Controls.Primitives.ToggleButton.prototype.add_Indeterminate = function (value) {
	this.Indeterminate = System.Delegate.Combine(this.Indeterminate, value);
};
System.Windows.Controls.Primitives.ToggleButton.prototype.remove_Indeterminate = function (value) {
	this.Indeterminate = System.Delegate.Remove(this.Indeterminate, value);
};
System.Windows.Controls.Primitives.ToggleButton.prototype.add_Unchecked = function (value) {
	this.Unchecked = System.Delegate.Combine(this.Unchecked, value);
};
System.Windows.Controls.Primitives.ToggleButton.prototype.remove_Unchecked = function (value) {
	this.Unchecked = System.Delegate.Remove(this.Unchecked, value);
};
System.Windows.Controls.Primitives.ToggleButton.prototype._ctor = function () {
	System.Windows.Controls.Primitives.ButtonBase.prototype._ctor.call(this);
	System.Windows.Controls.Control.prototype.set_DefaultStyleKey.call(this, System.Windows.Controls.Primitives.ToggleButton);
};
System.Windows.Controls.Primitives.ToggleButton.prototype.OnApplyTemplate = function () {
	System.Windows.FrameworkElement.prototype.OnApplyTemplate.call(this);
	System.Windows.Controls.Primitives.ButtonBase.prototype.UpdateVisualState$1.call(this, false);
};
System.Windows.Controls.Primitives.ToggleButton.prototype.ChangeVisualState = function (useTransitions) {
	var isChecked = this.IsChecked.MemberwiseClone();
	var isEnabled = System.Windows.Controls.Control.prototype.get_IsEnabled.call(this);
	if (!isEnabled) {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "Disabled");
	} else if (System.Windows.Controls.Primitives.ButtonBase.prototype.get_IsPressed.call(this)) {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "Pressed");
	} else if (System.Windows.Controls.Primitives.ButtonBase.prototype.get_IsMouseOver.call(this)) {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "MouseOver");
	} else {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "Normal");
	}
	var flag = isChecked.MemberwiseClone();
	if (flag.GetValueOrDefault$0() && flag.HasValue) {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "Checked");
	} else {
		var flag2 = isChecked.MemberwiseClone();
		if (!flag2.GetValueOrDefault$0() && flag2.HasValue) {
			System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "Unchecked");
		} else if (!System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "Indeterminate")) {
			System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "Unchecked");
		}
	}
	if (!(!System.Windows.Controls.Primitives.ButtonBase.prototype.get_IsFocused.call(this) || !isEnabled)) {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "Focused");
		return;
	}
	System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "Unfocused");
};
System.Windows.Controls.Primitives.ToggleButton.prototype.OnChecked = function (e) {
	System.Windows.Controls.Primitives.ButtonBase.prototype.UpdateVisualState$0.call(this);
	var checked = this.Checked;
	if (checked !== null) {
		checked(this, e);
	}
};
System.Windows.Controls.Primitives.ToggleButton.prototype.OnIndeterminate = function (e) {
	System.Windows.Controls.Primitives.ButtonBase.prototype.UpdateVisualState$0.call(this);
	var indeterminate = this.Indeterminate;
	if (indeterminate !== null) {
		indeterminate(this, e);
	}
};
System.Windows.Controls.Primitives.ToggleButton.prototype.OnUnchecked = function (e) {
	System.Windows.Controls.Primitives.ButtonBase.prototype.UpdateVisualState$0.call(this);
	var unchecked = this.Unchecked;
	if (unchecked !== null) {
		unchecked(this, e);
	}
};
System.Windows.Controls.Primitives.ToggleButton.prototype.OnToggle = function () {
	var isChecked = this.IsChecked.MemberwiseClone();
	var flag = isChecked.MemberwiseClone();
	if (flag.GetValueOrDefault$0() && flag.HasValue) {
		(this.IsChecked = this.IsThreeState ? new (System.Nullable$b1.Of(System.Boolean)) () : new (System.Nullable$b1.Of(System.Boolean)) (false).MemberwiseClone());
		return;
	}
	(this.IsChecked = new (System.Nullable$b1.Of(System.Boolean)) (isChecked.HasValue));
};
System.Windows.Controls.Primitives.ToggleButton.prototype.OnContentChanged = function (oldContent, newContent) {
	System.Windows.Controls.ContentControl.prototype.OnContentChanged.call(this, oldContent, newContent);
	System.Windows.Controls.Primitives.ButtonBase.prototype.UpdateVisualState$0.call(this);
};
System.Windows.Controls.Primitives.ToggleButton.prototype.OnClick = function () {
	this.OnToggle();
	System.Windows.Controls.Primitives.ButtonBase.prototype.OnClick.call(this);
};
System.Windows.Controls.Primitives.ToggleButton.prototype.OnCreateAutomationPeer = function () {
	if (!this._skipCreateAutomationPeer) {
		return new System.Windows.Automation.Peers.ToggleButtonAutomationPeer(this);
	}
	return null;
};
System.Windows.Controls.Primitives.ToggleButton.prototype.toString = function () {
	var text = System.Object.prototype.toString.call(this);
	var text2 = (JSIL.Coalesce(System.Windows.Controls.ContentControl.prototype.get_Content.call(this), "")).toString();
	var isChecked = this.IsChecked.MemberwiseClone();
	return System.String.Format(System.Globalization.CultureInfo.InvariantCulture, $asm02.System.Windows.Resx.GetString$2("ToggleButton_ToString_FormatString"), [text, text2, isChecked.HasValue ? isChecked.Value.toString() : "null"]);
};
System.Windows.Controls.Primitives.ToggleButton.prototype.SetSkipAutomationPeerCreation = function () {
	this._skipCreateAutomationPeer = true;
};
JSIL.MakeProperty(System.Windows.Controls.Primitives.ToggleButton.prototype, "IsChecked", 
	System.Windows.Controls.Primitives.ToggleButton.prototype.get_IsChecked, System.Windows.Controls.Primitives.ToggleButton.prototype.set_IsChecked);
JSIL.MakeProperty(System.Windows.Controls.Primitives.ToggleButton.prototype, "IsThreeState", 
	System.Windows.Controls.Primitives.ToggleButton.prototype.get_IsThreeState, System.Windows.Controls.Primitives.ToggleButton.prototype.set_IsThreeState);
Object.defineProperty(System.Windows.Controls.Primitives.ToggleButton, "StateChecked", {
		"value": "Checked"}
);
Object.defineProperty(System.Windows.Controls.Primitives.ToggleButton, "StateUnchecked", {
		"value": "Unchecked"}
);
Object.defineProperty(System.Windows.Controls.Primitives.ToggleButton, "StateIndeterminate", {
		"value": "Indeterminate"}
);
Object.defineProperty(System.Windows.Controls.Primitives.ToggleButton, "GroupCheck", {
		"value": "CheckStates"}
);
System.Windows.Controls.Primitives.ToggleButton.IsCheckedProperty = null;
System.Windows.Controls.Primitives.ToggleButton.IsThreeStateProperty = null;
System.Windows.Controls.Primitives.ToggleButton.prototype.Checked = null;
System.Windows.Controls.Primitives.ToggleButton.prototype.Indeterminate = null;
System.Windows.Controls.Primitives.ToggleButton.prototype.Unchecked = null;
System.Windows.Controls.Primitives.ToggleButton.prototype._skipCreateAutomationPeer = false;
System.Windows.Controls.Primitives.ToggleButton._cctor = function () {
	System.Windows.Controls.Primitives.ToggleButton.IsCheckedProperty = System.Windows.DependencyProperty.Register$0("IsChecked", System.Nullable$b1.Of(System.Boolean), System.Windows.Controls.Primitives.ToggleButton, JSIL.New(System.Windows.PropertyMetadata, "_ctor$2", [false, JSIL.Delegate.New("System.Windows.PropertyChangedCallback", null, System.Windows.Controls.Primitives.ToggleButton.OnIsCheckedPropertyChanged)]));
	System.Windows.Controls.Primitives.ToggleButton.IsThreeStateProperty = System.Windows.DependencyProperty.Register$0("IsThreeState", System.Boolean, System.Windows.Controls.Primitives.ToggleButton, null);
};

System.Windows.Controls.CheckBox.prototype._ctor = function () {
	System.Windows.Controls.Primitives.ToggleButton.prototype._ctor.call(this);
	$asm02.System.Windows.Input.KeyboardNavigation.SetAcceptsReturn(this, false);
	System.Windows.Controls.Control.prototype.set_DefaultStyleKey.call(this, System.Windows.Controls.CheckBox);
};
System.Windows.Controls.CheckBox.prototype.OnKeyDownInternal = function (key) {
	var result = System.Windows.Controls.Primitives.ButtonBase.prototype.OnKeyDownInternal.call(this, key);
	if (!(System.Windows.Controls.Primitives.ToggleButton.prototype.get_IsThreeState.call(this) || !System.Windows.Controls.Control.prototype.get_IsEnabled.call(this))) {
		if (key === System.Windows.Input.Key.Add) {
			result = true;
			System.Windows.Controls.Primitives.ButtonBase.prototype.set_IsPressed.call(this, false);
			System.Windows.Controls.Primitives.ToggleButton.prototype.set_IsChecked.call(this, new (System.Nullable$b1.Of(System.Boolean)) (true));
		} else if (key === System.Windows.Input.Key.Subtract) {
			result = true;
			System.Windows.Controls.Primitives.ButtonBase.prototype.set_IsPressed.call(this, false);
			System.Windows.Controls.Primitives.ToggleButton.prototype.set_IsChecked.call(this, new (System.Nullable$b1.Of(System.Boolean)) (false));
		}
	}
	return result;
};
System.Windows.Controls.CheckBox.prototype.OnCreateAutomationPeer = function () {
	return new System.Windows.Automation.Peers.CheckBoxAutomationPeer(this);
};

System.Windows.Controls.CleanUpVirtualizedItemEventArgs.prototype._ctor = function (value, element) {
	System.Windows.RoutedEventArgs.prototype._ctor.call(this);
	this._value = value;
	this._element = element;
};
System.Windows.Controls.CleanUpVirtualizedItemEventArgs.prototype.get_Value = function () {
	return this._value;
};
System.Windows.Controls.CleanUpVirtualizedItemEventArgs.prototype.get_UIElement = function () {
	return this._element;
};
System.Windows.Controls.CleanUpVirtualizedItemEventArgs.prototype.get_Cancel = function () {
	return this._cancel;
};
System.Windows.Controls.CleanUpVirtualizedItemEventArgs.prototype.set_Cancel = function (value) {
	this._cancel = value;
};
JSIL.MakeProperty(System.Windows.Controls.CleanUpVirtualizedItemEventArgs.prototype, "Value", 
	System.Windows.Controls.CleanUpVirtualizedItemEventArgs.prototype.get_Value, null);
JSIL.MakeProperty(System.Windows.Controls.CleanUpVirtualizedItemEventArgs.prototype, "UIElement", 
	System.Windows.Controls.CleanUpVirtualizedItemEventArgs.prototype.get_UIElement, null);
JSIL.MakeProperty(System.Windows.Controls.CleanUpVirtualizedItemEventArgs.prototype, "Cancel", 
	System.Windows.Controls.CleanUpVirtualizedItemEventArgs.prototype.get_Cancel, System.Windows.Controls.CleanUpVirtualizedItemEventArgs.prototype.set_Cancel);
System.Windows.Controls.CleanUpVirtualizedItemEventArgs.prototype._value = null;
System.Windows.Controls.CleanUpVirtualizedItemEventArgs.prototype._element = null;
System.Windows.Controls.CleanUpVirtualizedItemEventArgs.prototype._cancel = false;

System.Windows.Controls.Primitives.Selector.prototype._ctor = function () {
	this._synchronizeCurrentItem = true;
	System.Windows.Controls.ItemsControl.prototype._ctor$0.call(this);
	this._selectedItemsImpl = JSIL.New(System.Collections.ObjectModel.ObservableCollection$b1.Of(System.Object), "_ctor$0", []);
	this._selectedItemsImpl.add_CollectionChanged(JSIL.Delegate.New("System.Collections.Specialized.NotifyCollectionChangedEventHandler", this, System.Windows.Controls.Primitives.Selector.prototype.OnSelectedItemsCollectionChanged));
	this._selectedItems = JSIL.New($asm02.System.Windows.Controls.Primitives.Selector.InternalSelectedItemsStorage, "_ctor$0", [1]);
	this._selectionChanger = new $asm02.System.Windows.Controls.Primitives.Selector.SelectionChanger(this);
	this._selectedItemsStale = false;
};
System.Windows.Controls.Primitives.Selector.prototype.OnApplyTemplate = function () {
	System.Windows.FrameworkElement.prototype.OnApplyTemplate.call(this);
	this.ElementScrollViewer = System.Windows.Controls.Control.prototype.get_Template.call(this) ? JSIL.TryCast(System.Windows.Controls.Control.prototype.GetTemplateChild.call(this, "ScrollViewer"), System.Windows.Controls.ScrollViewer) : null;
	if (this.ElementScrollViewer !== null) {
		this.ElementScrollViewer.TemplatedParentHandlesScrolling = true;
		if (this.ElementScrollViewer.CanForwardPropertyValue(System.Windows.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty)) {
			this.ElementScrollViewer.HorizontalScrollBarVisibility = System.Windows.Controls.ScrollViewer.GetHorizontalScrollBarVisibility(this);
			this._forwardHorizontalScrollBarVisibility = true;
		}
		if (this.ElementScrollViewer.CanForwardPropertyValue(System.Windows.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty)) {
			this.ElementScrollViewer.VerticalScrollBarVisibility = System.Windows.Controls.ScrollViewer.GetVerticalScrollBarVisibility(this);
			this._forwardVerticalScrollBarVisibility = true;
		}
	}
};
System.Windows.Controls.Primitives.Selector.prototype.OnPropertyChanged = function (dp) {
	System.Windows.FrameworkElement.prototype.OnPropertyChanged.call(this, dp);
	if (!((dp !== System.Windows.Controls.ScrollViewer.HorizontalScrollBarVisibilityProperty) || !this._forwardHorizontalScrollBarVisibility)) {
		this.ElementScrollViewer.HorizontalScrollBarVisibility = System.Windows.Controls.ScrollViewer.GetHorizontalScrollBarVisibility(this);
		return;
	}
	if (!((dp !== System.Windows.Controls.ScrollViewer.VerticalScrollBarVisibilityProperty) || !this._forwardVerticalScrollBarVisibility)) {
		this.ElementScrollViewer.VerticalScrollBarVisibility = System.Windows.Controls.ScrollViewer.GetVerticalScrollBarVisibility(this);
	}
};
System.Windows.Controls.Primitives.Selector.GetIsSelected = function (element) {
	if (element === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["element"]);
	}
	var value = element.GetValue(System.Windows.Controls.Primitives.Selector.IsSelectedProperty);
	return ((value !== null) && JSIL.Cast(value, System.Boolean));
};
System.Windows.Controls.Primitives.Selector.SetIsSelected = function (element, isSelected) {
	if (element === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["element"]);
	}
	element.SetValue(System.Windows.Controls.Primitives.Selector.IsSelectedProperty, isSelected);
};
System.Windows.Controls.Primitives.Selector.prototype.RaiseIsSelectedChangedAutomationEvent = function (container, isSelected) {
	var listBoxItem = JSIL.TryCast(container, System.Windows.Controls.ListBoxItem);
	if (listBoxItem !== null) {
		var selectorAutomationPeer = JSIL.Cast(System.Windows.UIElement.prototype.GetOrCreateAutomationPeer.call(this), System.Windows.Automation.Peers.SelectorAutomationPeer);
		if (selectorAutomationPeer !== null) {
			selectorAutomationPeer.GetChildren();
			var selectorItemAutomationPeer = JSIL.TryCast(listBoxItem.GetAutomationPeer(), System.Windows.Automation.Peers.SelectorItemAutomationPeer);
			if (selectorItemAutomationPeer !== null) {
				selectorItemAutomationPeer.RaiseAutomationIsSelectedChanged(isSelected);
			}
		}
	}
};
System.Windows.Controls.Primitives.Selector.OnIsSelectedChanged = function (d, e) {
	var listBoxItem = JSIL.TryCast(d, System.Windows.Controls.ListBoxItem);
	if (listBoxItem !== null) {
		var flag = JSIL.Cast(e.NewValue, System.Boolean);
		if (System.Windows.Automation.Peers.AutomationPeer.ListenerExists(System.Windows.Automation.Peers.AutomationEvents.SelectionItemPatternOnElementSelected)) {
			var parentSelector = listBoxItem._parentSelector;
			if (parentSelector !== null) {
				parentSelector.RaiseIsSelectedChangedAutomationEvent(listBoxItem, flag);
			}
		}
		listBoxItem.OnIsSelectedChanged(JSIL.Cast(e.OldValue, System.Boolean), flag);
	}
};
System.Windows.Controls.Primitives.Selector.GetIsSelectionActive = function (element) {
	if (element === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["element"]);
	}
	var value = element.GetValue(System.Windows.Controls.Primitives.Selector.IsSelectionActiveProperty);
	return ((value !== null) && JSIL.Cast(value, System.Boolean));
};
System.Windows.Controls.Primitives.Selector.OnIsSelectionActiveChanged = function (d, e) {
	var selector = JSIL.TryCast(d, System.Windows.Controls.Primitives.Selector);
	if (selector !== null) {
		selector.OnIsSelectionActiveChanged(JSIL.Cast(e.OldValue, System.Boolean), JSIL.Cast(e.NewValue, System.Boolean));
		return;
	}
	throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("Selector_OnIsSelectionActiveChanged_ReadOnly")]);
};
System.Windows.Controls.Primitives.Selector.prototype.OnIsSelectionActiveChanged = function (oldValue, newValue) {
};
System.Windows.Controls.Primitives.Selector.prototype.get_SelectedIndex = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Primitives.Selector.SelectedIndexProperty), System.Int32);
};
System.Windows.Controls.Primitives.Selector.prototype.set_SelectedIndex = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Primitives.Selector.SelectedIndexProperty, value);
};
System.Windows.Controls.Primitives.Selector.OnSelectedIndexChanged = function (d, e) {
	JSIL.Cast(d, System.Windows.Controls.Primitives.Selector).OnSelectedIndexChanged(JSIL.Cast(e.OldValue, System.Int32), JSIL.Cast(e.NewValue, System.Int32));
};
System.Windows.Controls.Primitives.Selector.prototype.OnSelectedIndexChanged = function (oldIndex, newIndex) {
	if (this._selectionChanger.IsActive) {
		return;
	}
	if (this.IsInit) {
		this._initializingData.IsIndexSet = true;
		return;
	}
	var flag = false;
	var flag2 = false;
	if (!((newIndex < -1) || (newIndex >= System.Windows.Controls.ItemsControl.prototype.get_Items.call(this).Count))) {
		flag = !this._selectionChanger.SelectJustThisItem$1(oldIndex, newIndex);
	} else {
		flag = true;
		flag2 = true;
	}
	if (flag) {
		try {
			this._selectionChanger.Begin();
			this.SelectedIndex = oldIndex;
		} finally {
			this._selectionChanger.Cancel();
		}
		if (flag2) {
			throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["SelectedIndex"]);
		}
	}
};
System.Windows.Controls.Primitives.Selector.prototype.get_SelectedValue = function () {
	return System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Primitives.Selector.SelectedValueProperty);
};
System.Windows.Controls.Primitives.Selector.prototype.set_SelectedValue = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Primitives.Selector.SelectedValueProperty, value);
};
System.Windows.Controls.Primitives.Selector.OnSelectedValuePropertyChanged = function (d, e) {
	var selector = JSIL.Cast(d, System.Windows.Controls.Primitives.Selector);
	selector.OnSelectedValuePropertyChanged(e.NewValue);
};
System.Windows.Controls.Primitives.Selector.prototype.OnSelectedValuePropertyChanged = function (value) {
	if (!this.coercingSelectedeValueToNull) {
		if (!(!this._selectionChanger.IsActive && !this.IsInit)) {
			return;
		}
		var num = this.FindIndexOfItemWithValue(value);
		this._selectionChanger.SelectJustThisItem$1(this.SelectedIndex, num);
		if (!((value === null) || (num !== -1))) {
			this.coercingSelectedeValueToNull = true;
			try {
				this.SelectedValue = null;
			} finally {
				this.coercingSelectedeValueToNull = false;
			}
		}
	}
};
System.Windows.Controls.Primitives.Selector.prototype.get_SelectedValuePath = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Primitives.Selector.SelectedValuePathProperty), System.String);
};
System.Windows.Controls.Primitives.Selector.prototype.set_SelectedValuePath = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Primitives.Selector.SelectedValuePathProperty, value);
};
System.Windows.Controls.Primitives.Selector.OnSelectedValuePathPropertyChanged = function (d, e) {
	var selector = JSIL.Cast(d, System.Windows.Controls.Primitives.Selector);
	selector.OnSelectedValuePathPropertyChanged(JSIL.Cast(e.NewValue, System.String));
};
System.Windows.Controls.Primitives.Selector.prototype.OnSelectedValuePathPropertyChanged = function (value) {
	if (!System.String.IsNullOrEmpty(value)) {
		this._selectedValuePropertyPath = JSIL.New(System.Windows.PropertyPath, "_ctor$0", [value, JSIL.Array.New(System.Object, 0)]);
		this._selectedValuePropertyPath.ParsePathInternal(false);
		this._selectedValuePropertyPathListener = new $asm02.System.Windows.PropertyPathListener(this._selectedValuePropertyPath, null, false, null);
	} else {
		this._selectedValuePropertyPath = null;
		this._selectedValuePropertyPathListener = null;
	}
	if (this.IsInit) {
		return;
	}
	this.selectionChangeCausedBySelectedValuePathPropertyChange = true;
	try {
		this._selectionChanger.SelectJustThisItem$1(this.SelectedIndex, this.FindIndexOfItemWithValue(this.SelectedValue));
	} finally {
		this.selectionChangeCausedBySelectedValuePathPropertyChange = false;
	}
};
System.Windows.Controls.Primitives.Selector.prototype.get_SelectedItem = function () {
	return System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Primitives.Selector.SelectedItemProperty);
};
System.Windows.Controls.Primitives.Selector.prototype.set_SelectedItem = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Primitives.Selector.SelectedItemProperty, value);
};
System.Windows.Controls.Primitives.Selector.OnSelectedItemChanged = function (d, e) {
	JSIL.Cast(d, System.Windows.Controls.Primitives.Selector).OnSelectedItemChanged(e.OldValue, e.NewValue);
};
System.Windows.Controls.Primitives.Selector.prototype.OnSelectedItemChanged = function (oldValue, newValue) {
	if (!(!this._selectionChanger.IsActive && !this.IsInit)) {
		return;
	}
	try {
		var num = System.Windows.Controls.ItemsControl.prototype.get_Items.call(this).IndexOf(newValue);
		var flag = false;
		flag = (!((num !== -1) || 
				(newValue === null)) || 
			!this._selectionChanger.SelectJustThisItem$0(newValue));
		if (flag) {
			try {
				this._selectionChanger.Begin();
				this.SelectedItem = oldValue;
			} finally {
				this._selectionChanger.Cancel();
			}
		}
	} finally {
		if (this._selectionChanger.IsActive) {
			this._selectionChanger.Cancel();
		}
	}
};
System.Windows.Controls.Primitives.Selector.prototype.get_SelectedItemsImpl = function () {
	if (this._selectedItemsStale) {
		this.UpdateSelectedItems();
	}
	return this._selectedItemsImpl;
};
System.Windows.Controls.Primitives.Selector.prototype.get_CanSelectMultiple = function () {
	return false;
};
System.Windows.Controls.Primitives.Selector.prototype.OnSelectedItemsCollectionChanged = function (sender, e) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				if (this._selectionChanger.IsActive) {
					return;
				}
				this._selectedItemsStale = true;
				if (!this.CanSelectMultiple) {
					throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("Selector_CannotModifySelectedItems")]);
				}
				if (this.IsInit) {
					return;
				}
				try {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								this._selectionChanger.Begin();
								switch (Number(e.Action)) {
									case 0: 
										if (e.NewItems.ICollection_Count !== 1) {
											throw JSIL.New(System.NotSupportedException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("Selector_RangeActionsNotPermitted")]);
										}
										this._selectionChanger.Select(System.Windows.Controls.ItemsControl.prototype.get_Items.call(this).IndexOf(e.NewItems.IList_get_Item(0)), e.NewItems.IList_get_Item(0));
										__label1__ = "IL_1F9";
										continue __step1__;
									case 1: 
										if (e.OldItems.ICollection_Count !== 1) {
											throw JSIL.New(System.NotSupportedException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("Selector_RangeActionsNotPermitted")]);
										}
										this._selectionChanger.Unselect(e.OldItems.IList_get_Item(0));
										__label1__ = "IL_1F9";
										continue __step1__;
									case 2: 
										if (!((e.NewItems.ICollection_Count === 1) && (e.OldItems.ICollection_Count === 1))) {
											throw JSIL.New(System.NotSupportedException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("Selector_RangeActionsNotPermitted")]);
										}
										this._selectionChanger.Unselect(e.OldItems.IList_get_Item(0));
										this._selectionChanger.Select(System.Windows.Controls.ItemsControl.prototype.get_Items.call(this).IndexOf(e.NewItems.IList_get_Item(0)), e.NewItems.IList_get_Item(0));
										__label1__ = "IL_1F9";
										continue __step1__;
									case 4: 
									__loop0__: 
										for (var i = 0; i < this._selectedItems.Count; ++i) {
											this._selectionChanger.Unselect(this._selectedItems.get_Item(i));
										}
										if (e.NewItems !== null) {
										__loop1__: 
											for (var j = 0; j < e.NewItems.ICollection_Count; ++j) {
												this._selectionChanger.Select(System.Windows.Controls.ItemsControl.prototype.get_Items.call(this).IndexOf(e.NewItems.IList_get_Item(j)), e.NewItems.IList_get_Item(j));
											}
											__label1__ = "IL_1F9";
											continue __step1__;
										}
										__label1__ = "IL_1F9";
										continue __step1__;
								}
								throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("Selector_UnknownCollectionAction")]);
								__label1__ = "IL_1F9";
								continue __step1__;
								break;
							case "IL_1F9":
								this._selectionChanger.End();
								break __step1__;
						}
					}
				} finally {
					if (this._selectionChanger.IsActive) {
						this._selectionChanger.Cancel();
					}
				}
				break __step0__;
		}
	}
};
System.Windows.Controls.Primitives.Selector.prototype.FindIndexOfItemWithValue = function (value) {
__loop0__: 
	for (var i = 0; i < System.Windows.Controls.ItemsControl.prototype.get_Items.call(this).Count; ++i) {
		var item = System.Windows.Controls.ItemsControl.prototype.get_Items.call(this).get_Item(i);
		if ($asm02.MS.Internal.InternalUtils.AreValuesEqual(this.SelectedValue, this.GetSelectedValue(item))) {
			return i;
		}
	}
	return -1;
};
System.Windows.Controls.Primitives.Selector.prototype.add_SelectionChanged = function (value) {
	this.SelectionChanged = System.Delegate.Combine(this.SelectionChanged, value);
};
System.Windows.Controls.Primitives.Selector.prototype.remove_SelectionChanged = function (value) {
	this.SelectionChanged = System.Delegate.Remove(this.SelectionChanged, value);
};
System.Windows.Controls.Primitives.Selector.prototype.InvokeSelectionChanged = function (unselectedItems, selectedItems) {
	var e = new System.Windows.Controls.SelectionChangedEventArgs(unselectedItems, selectedItems);
	this.OnSelectionChanged$0(e);
	if (!(!System.Windows.Automation.Peers.AutomationPeer.ListenerExists(System.Windows.Automation.Peers.AutomationEvents.SelectionPatternOnInvalidated) && 
			!System.Windows.Automation.Peers.AutomationPeer.ListenerExists(System.Windows.Automation.Peers.AutomationEvents.SelectionItemPatternOnElementSelected) && 
			!System.Windows.Automation.Peers.AutomationPeer.ListenerExists(System.Windows.Automation.Peers.AutomationEvents.SelectionItemPatternOnElementAddedToSelection) && !System.Windows.Automation.Peers.AutomationPeer.ListenerExists(System.Windows.Automation.Peers.AutomationEvents.SelectionItemPatternOnElementRemovedFromSelection))) {
		var selectorAutomationPeer = JSIL.TryCast(System.Windows.UIElement.prototype.GetAutomationPeer.call(this), System.Windows.Automation.Peers.SelectorAutomationPeer);
		if (selectorAutomationPeer !== null) {
			selectorAutomationPeer.RaiseSelectionEvents(e);
		}
	}
};
System.Windows.Controls.Primitives.Selector.prototype.OnSelectionChanged$0 = function (e) {
	if (this.SelectionChanged !== null) {
		this.SelectionChanged(this, e);
	}
};
System.Windows.Controls.Primitives.Selector.prototype.OnSelectionChanged$1 = function (oldIndex, newIndex, oldValue, newValue) {
};
System.Windows.Controls.Primitives.Selector.prototype.OnItemsSourceChanged = function (oldValue, newValue) {
	if (this._monitoredICV !== null) {
		this._monitoredICV.ICollectionView_remove_CurrentChanged(JSIL.Delegate.New("System.EventHandler", this, System.Windows.Controls.Primitives.Selector.prototype.CollectionViewCurrentChanged));
		this._monitoredICV = null;
	}
};
System.Windows.Controls.Primitives.Selector.prototype.OnItemsChanged = function (e) {
	System.Windows.Controls.ItemsControl.prototype.OnItemsChanged.call(this, e);
	var selectedIndex = this.SelectedIndex;
	switch (Number(e.Action)) {
		case 0: 
			try {
				this._selectedItems.InvalidateStoredIndexes(e.NewStartingIndex);
				this._selectionChanger.Begin();
				var flag = false;
			__loop0__: 
				for (var i = 0; i < e.NewItems.ICollection_Count; ++i) {
					var listBoxItem = JSIL.TryCast(e.NewItems.IList_get_Item(i), System.Windows.Controls.ListBoxItem);
					if (!((listBoxItem === null) || !listBoxItem.IsSelected)) {
						flag = true;
						this._selectionChanger.Select((e.NewStartingIndex + i), listBoxItem);
					}
				}
				if (flag) {
					this._selectionChanger.End();
				}
			} finally {
				if (this._selectionChanger.IsActive) {
					if (!((e.NewStartingIndex > selectedIndex) || this.IsInit)) {
						this.UpdatePublicSelectionProperties(this.SelectedIndex, (selectedIndex + e.NewItems.ICollection_Count), this.SelectedItem, this.SelectedItem);
					}
					this._selectionChanger.Cancel();
				}
			}
			if (e.NewStartingIndex <= this._focusedIndex) {
				this.SetFocusedItem((this._focusedIndex + e.NewItems.ICollection_Count), false);
				return;
			}
			return;
		case 1: 
			try {
				this._selectedItems.InvalidateStoredIndexes(e.OldStartingIndex);
				this._selectionChanger.Begin();
				var enumerator = e.OldItems.IEnumerable_GetEnumerator();
				try {
				__loop1__: 
					while (enumerator.IEnumerator_MoveNext()) {
						var current = enumerator.IEnumerator_Current;
						if (this._selectedItems.Contains(current)) {
							this._selectionChanger.Unselect(current);
						}
					}
				} finally {
					var disposable = JSIL.TryCast(enumerator, System.IDisposable);
					if (disposable !== null) {
						disposable.IDisposable_Dispose();
					}
				}
			} finally {
				this._selectionChanger.End();
			}
			if (!((e.OldStartingIndex > this._focusedIndex) || (this._focusedIndex >= (e.OldStartingIndex + e.OldItems.ICollection_Count)))) {
				this.SetFocusedItem(-1, false);
				return;
			}
			if (e.OldStartingIndex < selectedIndex) {
				this.SetFocusedItem((this._focusedIndex - e.OldItems.ICollection_Count), false);
				return;
			}
			return;
		case 2: 
			try {
				this._selectedItems.InvalidateStoredIndexes(e.NewStartingIndex);
				this._selectionChanger.Begin();
				var enumerator2 = e.OldItems.IEnumerable_GetEnumerator();
				try {
				__loop2__: 
					while (enumerator2.IEnumerator_MoveNext()) {
						var current2 = enumerator2.IEnumerator_Current;
						if (this._selectedItems.Contains(current2)) {
							this._selectionChanger.Unselect(current2);
						}
					}
				} finally {
					var disposable2 = JSIL.TryCast(enumerator2, System.IDisposable);
					if (disposable2 !== null) {
						disposable2.IDisposable_Dispose();
					}
				}
			__loop3__: 
				for (var j = 0; j < e.NewItems.ICollection_Count; ++j) {
					var listBoxItem2 = JSIL.TryCast(e.NewItems.IList_get_Item(j), System.Windows.Controls.ListBoxItem);
					if (!((listBoxItem2 === null) || !listBoxItem2.IsSelected)) {
						this._selectionChanger.Select((e.NewStartingIndex + j), listBoxItem2);
					}
				}
			} finally {
				this._selectionChanger.End();
			}
			if (!((e.OldStartingIndex > this._focusedIndex) || (this._focusedIndex >= (e.OldStartingIndex + e.OldItems.ICollection_Count)))) {
				this.SetFocusedItem(-1, false);
				return;
			}
			return;
		case 4: 
			try {
				this._selectionChanger.Begin();
				var enumerator3 = this._selectedItems.IEnumerable_GetEnumerator();
				try {
				__loop4__: 
					while (enumerator3.IEnumerator_MoveNext()) {
						var current3 = enumerator3.IEnumerator_Current;
						this._selectionChanger.Unselect(current3);
					}
				} finally {
					var disposable3 = JSIL.TryCast(enumerator3, System.IDisposable);
					if (disposable3 !== null) {
						disposable3.IDisposable_Dispose();
					}
				}
				var collectionView = JSIL.TryCast(System.Windows.Controls.ItemsControl.prototype.get_ItemsSource.call(this), System.ComponentModel.ICollectionView);
				if (this._monitoredICV !== collectionView) {
					if (this._monitoredICV !== null) {
						this._monitoredICV.ICollectionView_remove_CurrentChanged(JSIL.Delegate.New("System.EventHandler", this, System.Windows.Controls.Primitives.Selector.prototype.CollectionViewCurrentChanged));
					}
					this._monitoredICV = collectionView;
					if (this._monitoredICV !== null) {
						this._monitoredICV.ICollectionView_add_CurrentChanged(JSIL.Delegate.New("System.EventHandler", this, System.Windows.Controls.Primitives.Selector.prototype.CollectionViewCurrentChanged));
					}
					this.UpdateIsSynchronized();
				}
				if (!(!this._synchronizeCurrentItem || 
						(this._monitoredICV === null) || (this._monitoredICV.ICollectionView_CurrentItem === null))) {
					this._selectionChanger.Select(this._monitoredICV.ICollectionView_CurrentPosition, this._monitoredICV.ICollectionView_CurrentItem);
				}
				if (!($asm02.MS.Internal.QuirksMode.ShouldSelectorAssumeItemTemplateAndListBoxItemMutuallyExclusive() && System.Windows.Controls.ItemsControl.prototype.get_ItemTemplate.call(this))) {
				__loop5__: 
					for (var k = 0; k < System.Windows.Controls.ItemsControl.prototype.get_Items.call(this).Count; ++k) {
						var listBoxItem3 = this.GetListBoxItem(k);
						if (!((listBoxItem3 === null) || !listBoxItem3.IsSelected)) {
							this._selectionChanger.Select(k, System.Windows.Controls.ItemsControl.prototype.get_Items.call(this).get_Item(k));
						}
					}
				}
			} finally {
				this._selectionChanger.End();
			}
			this.SetFocusedItem(-1, false);
			return;
	}
	throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
};
System.Windows.Controls.Primitives.Selector.prototype.CollectionViewCurrentChanged = function (o, e) {
	if (!(this._updatingCurrentItemInCollectionView || 
			!this._synchronizeCurrentItem || $asm02.MS.Internal.InternalUtils.AreValuesEqual(this.SelectedItem, this._monitoredICV.ICollectionView_CurrentItem))) {
		this.SelectedItem = this._monitoredICV.ICollectionView_CurrentItem;
	}
};
System.Windows.Controls.Primitives.Selector.prototype.PrepareContainerForItemOverride = function (element, item) {
	System.Windows.Controls.ItemsControl.prototype.PrepareContainerForItemOverride.call(this, element, item);
	var listBoxItem = JSIL.Cast(element, System.Windows.Controls.ListBoxItem);
	listBoxItem._parentSelector = this;
	if (!System.Object.ReferenceEquals(element, item)) {
		listBoxItem.Item = item;
	}
	var num = System.Windows.Controls.ItemsControl.prototype.get_ItemContainerGenerator.call(this).IndexFromContainer$0(element);
	if (num !== -1) {
		if (this._selectedItems.Contains(item)) {
			listBoxItem.IsSelected = true;
		} else {
			listBoxItem.IsSelected = false;
		}
		if (num === this._focusedIndex) {
			this.SetFocusedItem(num, true);
		}
	}
};
System.Windows.Controls.Primitives.Selector.prototype.ClearContainerForItemOverride = function (element, item) {
	System.Windows.Controls.ItemsControl.prototype.ClearContainerForItemOverride.call(this, element, item);
	var listBoxItem = JSIL.Cast(element, System.Windows.Controls.ListBoxItem);
	if (!listBoxItem.Equals(item)) {
		listBoxItem.ClearValue(System.Windows.Controls.ContentControl.ContentProperty);
	}
	listBoxItem.Item = null;
};
System.Windows.Controls.Primitives.Selector.prototype.GetListBoxItem = function (index) {
	if (!((index >= 0) && (System.Windows.Controls.ItemsControl.prototype.get_Items.call(this).Count > index))) {
		return null;
	}
	var listBoxItem = JSIL.TryCast(System.Windows.Controls.ItemsControl.prototype.get_Items.call(this).get_Item(index), System.Windows.Controls.ListBoxItem);
	if (listBoxItem !== null) {
		return listBoxItem;
	}
	return JSIL.TryCast(System.Windows.Controls.ItemsControl.prototype.get_ItemContainerGenerator.call(this).ContainerFromIndex$0(index), System.Windows.Controls.ListBoxItem);
};
System.Windows.Controls.Primitives.Selector.prototype.OnListBoxItemClicked = function (item) {
	if (System.Windows.Input.Keyboard.Modifiers & System.Windows.Input.ModifierKeys.Control) {
		item.IsSelected = !item.IsSelected;
		return;
	}
	item.IsSelected = true;
};
System.Windows.Controls.Primitives.Selector.prototype.CanScrollIntoView = function () {
	return (!((System.Windows.Controls.ItemsControl.prototype.get_ItemsHost.call(this) === null) || 
			System.Windows.Controls.ItemsControl.prototype.get_IsItemsHostInvalid.call(this)) && this.IsInLiveTree);
};
System.Windows.Controls.Primitives.Selector.prototype.NotifyListItemSelected = function (listBoxItem, isSelected) {
	if (!this._selectionChanger.IsActive) {
		var num = System.Windows.Controls.ItemsControl.prototype.get_ItemContainerGenerator.call(this).IndexFromContainer$0(listBoxItem);
		if (!((num >= 0) && (num < System.Windows.Controls.ItemsControl.prototype.get_Items.call(this).Count))) {
			return;
		}
		var o = JSIL.Coalesce(listBoxItem.Item, listBoxItem);
		try {
			this._selectionChanger.Begin();
			if (isSelected) {
				this._selectionChanger.Select(num, o);
			} else {
				this._selectionChanger.Unselect(o);
			}
		} finally {
			this._selectionChanger.End();
		}
	}
};
System.Windows.Controls.Primitives.Selector.prototype.SetItemIsSelected = function (item, value) {
	var listBoxItem = JSIL.TryCast(item, System.Windows.Controls.ListBoxItem) ? JSIL.TryCast(item, System.Windows.Controls.ListBoxItem) : JSIL.TryCast(System.Windows.Controls.ItemsControl.prototype.get_ItemContainerGenerator.call(this).ContainerFromItem(item), System.Windows.Controls.ListBoxItem);
	if (listBoxItem !== null) {
		listBoxItem.IsSelected = value;
	}
};
System.Windows.Controls.Primitives.Selector.prototype.UpdateSelectedItems = function () {
	this._selectedItemsStale = false;
	try {
		this._selectionChanger.Begin();
		var selectedItemsImpl = this._selectedItemsImpl;
		if (selectedItemsImpl !== null) {
			var internalSelectedItemsStorage = JSIL.New($asm02.System.Windows.Controls.Primitives.Selector.InternalSelectedItemsStorage, "_ctor$0", [selectedItemsImpl.ICollection_Count]);
		__loop0__: 
			for (var i = 0; i < selectedItemsImpl.ICollection_Count; ++i) {
				var t = selectedItemsImpl.IList_get_Item(i);
				if (!(!this._selectedItems.Contains(t) || internalSelectedItemsStorage.Contains(t))) {
					internalSelectedItemsStorage.Add(t, this._selectedItems.StoredIndexOf(t));
				} else {
					selectedItemsImpl.IList_RemoveAt(i);
					--i;
				}
			}
			var enumerator = this._selectedItems.IEnumerable_GetEnumerator();
			try {
			__loop1__: 
				while (enumerator.IEnumerator_MoveNext()) {
					var current = enumerator.IEnumerator_Current;
					if (!internalSelectedItemsStorage.Contains(current)) {
						selectedItemsImpl.IList_Add(current);
					}
				}
			} finally {
				var disposable = JSIL.TryCast(enumerator, System.IDisposable);
				if (disposable !== null) {
					disposable.IDisposable_Dispose();
				}
			}
		}
	} finally {
		this._selectionChanger.Cancel();
	}
};
System.Windows.Controls.Primitives.Selector.prototype.UpdatePublicSelectionProperties = function (oldSelectedIndex, newSelectedIndex, oldSelectedItem, newSelectedItem) {
	if (!((oldSelectedIndex !== newSelectedIndex) || !$asm02.MS.Internal.InternalUtils.AreValuesEqual(oldSelectedItem, newSelectedItem))) {
		return;
	}
	this.SelectedIndex = newSelectedIndex;
	this.SelectedItem = newSelectedItem;
	var selectedValue = this.GetSelectedValue(newSelectedItem);
	if (!($asm02.MS.Internal.InternalUtils.AreValuesEqual(selectedValue, this.SelectedValue) || this.selectionChangeCausedBySelectedValuePathPropertyChange)) {
		this.SelectedValue = selectedValue;
	}
	this.UpdateCurrentItemInCollectionView(this.SelectedItem);
	this.OnSelectionChanged$1(oldSelectedIndex, this.SelectedIndex, oldSelectedItem, this.SelectedItem);
};
System.Windows.Controls.Primitives.Selector.prototype.GetSelectedValue = function (item) {
	if (this._selectedValuePropertyPathListener === null) {
		return item;
	}
	this._selectedValuePropertyPathListener.ReConnect(item);
	return this._selectedValuePropertyPathListener.LeafValue;
};
System.Windows.Controls.Primitives.Selector.prototype.SelectRange = function (startIndex, endIndex, clearOldSelection) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				try {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								this._selectionChanger.Begin();
								if (!clearOldSelection) {
									__label1__ = "IL_77";
									continue __step1__;
								}
								var enumerator = this._selectedItems.IEnumerable_GetEnumerator();
								try {
								__loop0__: 
									while (enumerator.IEnumerator_MoveNext()) {
										var current = enumerator.IEnumerator_Current;
										this._selectionChanger.Unselect(current);
									}
									__label1__ = "IL_77";
									continue __step1__;
								} finally {
									var disposable = JSIL.TryCast(enumerator, System.IDisposable);
									if (disposable !== null) {
										disposable.IDisposable_Dispose();
									}
								}
								__label1__ = "IL_4B";
								continue __step1__;
								break;
							case "IL_4B":
								if (System.Windows.Controls.ItemsControl.prototype.get_Items.call(this).get_Item(startIndex) !== null) {
									this._selectionChanger.Select(startIndex, System.Windows.Controls.ItemsControl.prototype.get_Items.call(this).get_Item(startIndex));
								}
								++startIndex;
								__label1__ = "IL_77";
								continue __step1__;
								break;
							case "IL_77":
								if (startIndex <= endIndex) {
									__label1__ = "IL_4B";
									continue __step1__;
								}
								break __step1__;
						}
					}
				} finally {
					this._selectionChanger.End();
				}
				break __step0__;
		}
	}
};
System.Windows.Controls.Primitives.Selector.prototype.SetFocusedItem = function (index, scrollIntoView) {
	if (!((index >= 0) && (System.Windows.Controls.ItemsControl.prototype.get_Items.call(this).Count > index))) {
		index = -1;
	}
	this._focusedIndex = index;
	if (this._focusedIndex === -1) {
		if (this.HasFocus()) {
			System.Windows.Controls.Control.prototype.Focus.call(this);
		}
		return;
	}
	if (!(!scrollIntoView || !this.CanScrollIntoView())) {
		this.ScrollIntoView(this._focusedIndex);
	}
	if (this.HasFocus()) {
		var listBoxItem = JSIL.TryCast(System.Windows.Controls.ItemsControl.prototype.get_ItemContainerGenerator.call(this).ContainerFromIndex$0(index), System.Windows.Controls.ListBoxItem);
		if (listBoxItem !== null) {
			listBoxItem.Focus();
		}
	}
};
System.Windows.Controls.Primitives.Selector.prototype.ItemFocused = function (item) {
	var focusedIndex = System.Windows.Controls.ItemsControl.prototype.get_ItemContainerGenerator.call(this).IndexFromContainer$0(item);
	this._focusedIndex = focusedIndex;
};
System.Windows.Controls.Primitives.Selector.prototype.SelectNext = function (current) {
	var count = System.Windows.Controls.ItemsControl.prototype.get_Items.call(this).Count;
	if (!((count <= 0) || (current >= (count - 1)))) {
		return this.SelectItemHelper((current + 1), 1, count);
	}
	return current;
};
System.Windows.Controls.Primitives.Selector.prototype.SelectPrev = function (current) {
	if (!((System.Windows.Controls.ItemsControl.prototype.get_Items.call(this).Count <= 0) || (current <= 0))) {
		return this.SelectItemHelper((current - 1), -1, -1);
	}
	return current;
};
System.Windows.Controls.Primitives.Selector.prototype.SelectItemHelper = function (startIndex, increment, stopIndex) {
__loop0__: 
	for (var num = startIndex; num !== stopIndex; num += increment) {
		var o = System.Windows.Controls.ItemsControl.prototype.get_Items.call(this).get_Item(num);
		if (!(!this.IsSelectableHelper(o) || !this.IsSelectableHelper(System.Windows.Controls.ItemsControl.prototype.get_ItemContainerGenerator.call(this).ContainerFromIndex$0(num)))) {
			return num;
		}
	}
	return startIndex;
};
System.Windows.Controls.Primitives.Selector.prototype.IsSelectableHelper = function (o) {
	var control = JSIL.TryCast(o, System.Windows.Controls.Control);
	return ((control === null) || 
		JSIL.Cast(control.GetValue(System.Windows.Controls.Control.IsEnabledProperty), System.Boolean) || !$asm02.MS.Internal.QuirksMode.ShouldPreventSelectionOfDisabledItemsInSelector());
};
System.Windows.Controls.Primitives.Selector.prototype.IsVerticalOrientation = function () {
	var stackPanel = JSIL.TryCast(System.Windows.Controls.ItemsControl.prototype.get_ItemsHost.call(this), System.Windows.Controls.StackPanel);
	if (stackPanel === null) {
		var virtualizingStackPanel = JSIL.TryCast(System.Windows.Controls.ItemsControl.prototype.get_ItemsHost.call(this), System.Windows.Controls.VirtualizingStackPanel);
		return ((virtualizingStackPanel === null) || (virtualizingStackPanel.Orientation === System.Windows.Controls.Orientation.Vertical));
	}
	return (stackPanel.Orientation === System.Windows.Controls.Orientation.Vertical);
};
System.Windows.Controls.Primitives.Selector.prototype.IsOnCurrentPage$0 = function (index) {
	var rect = new JSIL.Variable(new System.Windows.Rect()), rect2 = new JSIL.Variable(new System.Windows.Rect());
	return this.IsOnCurrentPage$1(index, /* ref */ rect, /* ref */ rect2);
};
System.Windows.Controls.Primitives.Selector.prototype.IsOnCurrentPage$1 = function (index, /* ref */ itemsHostRect, /* ref */ listBoxItemRect) {
	var frameworkElement = (this.ElementScrollViewer === null) ? null : (this.ElementScrollViewer.ElementScrollContentPresenter === null) ? this.ElementScrollViewer : this.ElementScrollViewer.ElementScrollContentPresenter;
	if (frameworkElement === null) {
		itemsHostRect.value = System.Windows.Rect.Empty.MemberwiseClone();
		listBoxItemRect.value = System.Windows.Rect.Empty.MemberwiseClone();
		return true;
	}
	itemsHostRect.value = JSIL.New(System.Windows.Rect, "_ctor$0", [0, 0, frameworkElement.ActualWidth, frameworkElement.ActualHeight]);
	var listBoxItem = JSIL.TryCast(System.Windows.Controls.ItemsControl.prototype.get_ItemContainerGenerator.call(this).ContainerFromIndex$0(index), System.Windows.Controls.ListBoxItem);
	if (listBoxItem === null) {
		listBoxItemRect.value = System.Windows.Rect.Empty.MemberwiseClone();
		return false;
	}
	var generalTransform = listBoxItem.TransformToVisual(frameworkElement);
	listBoxItemRect.value = JSIL.New(System.Windows.Rect, "_ctor$1", [generalTransform.Transform(new System.Windows.Point()), generalTransform.Transform(new System.Windows.Point(listBoxItem.ActualWidth, listBoxItem.ActualHeight))]);
	if (!this.IsVerticalOrientation()) {
		return ((itemsHostRect.value.Left <= listBoxItemRect.value.Left) && (listBoxItemRect.value.Right <= itemsHostRect.value.Right));
	}
	return ((itemsHostRect.value.Top <= listBoxItemRect.value.Top) && (listBoxItemRect.value.Bottom <= itemsHostRect.value.Bottom));
};
System.Windows.Controls.Primitives.Selector.prototype.GetFirstItemOnCurrentPage = function (startingIndex, forward) {
	var num = forward ? 1 : -1;
	var result = -1;
__loop0__: 
	for (var num2 = startingIndex; !((0 > num2) || (num2 >= System.Windows.Controls.ItemsControl.prototype.get_Items.call(this).Count)); num2 += num) {
		if (this.IsOnCurrentPage$0(num2)) {
			break __loop0__;
		}
		result = num2;
	}
__loop1__: 
	for (; (0 <= num2) && 
		(num2 < System.Windows.Controls.ItemsControl.prototype.get_Items.call(this).Count) && this.IsOnCurrentPage$0(num2); num2 += num) {
		result = num2;
	}
	return result;
};
System.Windows.Controls.Primitives.Selector.prototype.NavigateByPage = function (forward) {
	var result = -1;
	var obj = (-1 !== this._focusedIndex) ? System.Windows.Controls.ItemsControl.prototype.get_Items.call(this).get_Item(this._focusedIndex) : null;
	if (!((obj === null) || this.IsOnCurrentPage$0(this._focusedIndex))) {
		this.ScrollIntoView(this._focusedIndex);
		if (this.ElementScrollViewer !== null) {
			this.ElementScrollViewer.UpdateLayout();
		}
	}
	if (obj === null) {
		result = this.GetFirstItemOnCurrentPage(this._focusedIndex, forward);
	} else {
		var firstItemOnCurrentPage = this.GetFirstItemOnCurrentPage(this._focusedIndex, forward);
		if (firstItemOnCurrentPage !== this._focusedIndex) {
			result = firstItemOnCurrentPage;
		} else {
			if (this.ElementScrollViewer !== null) {
				if (this.IsVerticalOrientation()) {
					if (forward) {
						this.ElementScrollViewer.PageDown();
					} else {
						this.ElementScrollViewer.PageUp();
					}
				} else if (forward) {
					this.ElementScrollViewer.PageRight();
				} else {
					this.ElementScrollViewer.PageLeft();
				}
				this.ElementScrollViewer.UpdateLayout();
			}
			result = this.GetFirstItemOnCurrentPage(this._focusedIndex, forward);
		}
	}
	return result;
};
System.Windows.Controls.Primitives.Selector.prototype.ScrollIntoView = function (index) {
	var rect = new JSIL.Variable(new System.Windows.Rect()), rect2 = new JSIL.Variable(new System.Windows.Rect());
	if (!((this.ElementScrollViewer === null) || this.IsOnCurrentPage$1(index, /* ref */ rect, /* ref */ rect2))) {
		if (this.IsVerticalOrientation()) {
			var num = this.ElementScrollViewer.VerticalOffset;
			var num2 = 0;
			if (!System.Windows.Controls.VirtualizingStackPanel.GetIsVirtualizing(this)) {
				if (rect.value.Bottom < rect2.value.Bottom) {
					num2 = (rect2.value.Bottom - rect.value.Bottom);
					num += num2;
				}
				if ((rect2.value.Top - num2) < rect.value.Top) {
					num -= (rect.value.Top - (rect2.value.Top - num2));
				}
				this.ElementScrollViewer.ScrollToVerticalOffset(num);
				return;
			}
			if ((num - this._focusedIndex) > 0) {
				this.ElementScrollViewer.ScrollToVerticalOffset(this._focusedIndex);
				return;
			}
			this.ElementScrollViewer.ScrollToVerticalOffset(((this._focusedIndex - this.ElementScrollViewer.ViewportHeight) + 1));
			return;
		} else {
			var num3 = this.ElementScrollViewer.HorizontalOffset;
			var num4 = 0;
			if (System.Windows.Controls.VirtualizingStackPanel.GetIsVirtualizing(this)) {
				if ((num3 - this._focusedIndex) > 0) {
					this.ElementScrollViewer.ScrollToHorizontalOffset(this._focusedIndex);
					return;
				}
				this.ElementScrollViewer.ScrollToHorizontalOffset(((this._focusedIndex - this.ElementScrollViewer.ViewportWidth) + 1));
				return;
			} else {
				if (rect.value.Right < rect2.value.Right) {
					num4 = (rect2.value.Right - rect.value.Right);
					num3 += num4;
				}
				if ((rect2.value.Left - num4) < rect.value.Left) {
					num3 -= (rect.value.Left - (rect2.value.Left - num4));
				}
				this.ElementScrollViewer.ScrollToHorizontalOffset(num3);
			}
		}
	}
};
System.Windows.Controls.Primitives.Selector.prototype.ElementScrollViewerScrollInDirection = function (key) {
	if (this.ElementScrollViewer !== null) {
		this.ElementScrollViewer.ScrollInDirection(key);
	}
};
System.Windows.Controls.Primitives.Selector.prototype.HandleNavigationKey = function (key, currentIndex, scrollViewport) {
	var flag = (System.Windows.FrameworkElement.prototype.get_FlowDirection.call(this) === System.Windows.FlowDirection.RightToLeft);
	switch (Number(key)) {
		case 10: 
			currentIndex = this.NavigateByPage(false);
			break;
		case 11: 
			currentIndex = this.NavigateByPage(true);
			break;
		case 12: 
			currentIndex = (System.Windows.Controls.ItemsControl.prototype.get_Items.call(this).Count - 1);
			break;
		case 13: 
			currentIndex = 0;
			break;
		case 14: 
			if (!(!this.IsVerticalOrientation() || !scrollViewport)) {
				this.ElementScrollViewerScrollInDirection(System.Windows.Input.Key.Left);
			} else if (flag) {
				currentIndex = this.SelectNext(currentIndex);
			} else {
				currentIndex = this.SelectPrev(currentIndex);
			}
			break;
		case 15: 
			if (!(this.IsVerticalOrientation() || !scrollViewport)) {
				this.ElementScrollViewerScrollInDirection(System.Windows.Input.Key.Up);
			} else {
				currentIndex = this.SelectPrev(currentIndex);
			}
			break;
		case 16: 
			if (!(!this.IsVerticalOrientation() || !scrollViewport)) {
				this.ElementScrollViewerScrollInDirection(System.Windows.Input.Key.Right);
			} else if (flag) {
				currentIndex = this.SelectPrev(currentIndex);
			} else {
				currentIndex = this.SelectNext(currentIndex);
			}
			break;
		case 17: 
			if (!(this.IsVerticalOrientation() || !scrollViewport)) {
				this.ElementScrollViewerScrollInDirection(System.Windows.Input.Key.Down);
			} else {
				currentIndex = this.SelectNext(currentIndex);
			}
			break;
	}
	currentIndex = System.Math.Min(currentIndex, (System.Windows.Controls.ItemsControl.prototype.get_Items.call(this).Count - 1));
	currentIndex = System.Math.Max(currentIndex, -1);
	return currentIndex;
};
System.Windows.Controls.Primitives.Selector.prototype.get_IsSynchronizedWithCurrentItem = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Primitives.Selector.IsSynchronizedWithCurrentItemProperty), System.Nullable$b1.Of(System.Boolean));
};
System.Windows.Controls.Primitives.Selector.prototype.set_IsSynchronizedWithCurrentItem = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Primitives.Selector.IsSynchronizedWithCurrentItemProperty, value.MemberwiseClone());
};
System.Windows.Controls.Primitives.Selector.OnIsSynchronizedWithCurrentItemChanged = function (d, e) {
	var selector = JSIL.Cast(d, System.Windows.Controls.Primitives.Selector);
	var flag = JSIL.Cast(e.NewValue, System.Nullable$b1.Of(System.Boolean)).MemberwiseClone();
	if (!(!flag.HasValue || !flag.Value)) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("Selector_IsSynchronizedWithCurrentItemCannotSetToTrue")]);
	}
	selector.SetIsSynchronized();
};
System.Windows.Controls.Primitives.Selector.prototype.SetIsSynchronized = function () {
	if (this.IsSynchronizedWithCurrentItem.HasValue) {
		this._synchronizeCurrentItem = false;
		this.SelectedIndex = -1;
		return;
	}
	var synchronizeCurrentItem = this._synchronizeCurrentItem;
	this.UpdateIsSynchronized();
	if (!(synchronizeCurrentItem || !this._synchronizeCurrentItem)) {
		var currentItem = this._monitoredICV.ICollectionView_CurrentItem;
		if (currentItem !== null) {
			this.SelectedItem = currentItem;
			return;
		}
		this.SelectedIndex = -1;
	}
};
System.Windows.Controls.Primitives.Selector.prototype.UpdateIsSynchronized = function () {
	if (this.IsSynchronizedWithCurrentItem.HasValue) {
		this._synchronizeCurrentItem = false;
		return;
	}
	var synchronizeCurrentItem = ((JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.ListBox.SelectionModeProperty), System.Windows.Controls.SelectionMode) === 0) && 
		(this._monitoredICV !== null));
	this._synchronizeCurrentItem = synchronizeCurrentItem;
};
System.Windows.Controls.Primitives.Selector.prototype.UpdateCurrentItemInCollectionView = function (o) {
	var result = true;
	try {
		this._updatingCurrentItemInCollectionView = true;
		if (!(!this._synchronizeCurrentItem || 
				(this._monitoredICV === null) || $asm02.MS.Internal.InternalUtils.AreValuesEqual(this._monitoredICV.ICollectionView_CurrentItem, o))) {
			this._monitoredICV.ICollectionView_MoveCurrentTo(o);
			result = $asm02.MS.Internal.InternalUtils.AreValuesEqual(this._monitoredICV.ICollectionView_CurrentItem, o);
		}
	} finally {
		this._updatingCurrentItemInCollectionView = false;
	}
	return result;
};
System.Windows.Controls.Primitives.Selector.prototype.get_IsInit = function () {
	return (this._initializingData !== null);
};
System.Windows.Controls.Primitives.Selector.prototype.ISupportInitialize_BeginInit = function () {
	this._initializingData = new $asm02.System.Windows.Controls.Primitives.Selector.InitializingData().__Initialize__({
			InitialValue: this.SelectedValue, 
			InitialItem: this.SelectedItem, 
			InitialIndex: this.SelectedIndex}
	);
};
System.Windows.Controls.Primitives.Selector.prototype.ISupportInitialize_EndInit = function () {
	if (this._initializingData === null) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
	}
	var selectedIndex = this.SelectedIndex;
	var selectedItem = this.SelectedItem;
	var selectedValue = this.SelectedValue;
	if (this._selectedItems.Count === 0) {
		if (this._initializingData.InitialValue !== selectedValue) {
			this.SelectedValue = this._initializingData.InitialValue;
			this._initializingData = null;
			this.SelectedValue = selectedValue;
		} else if (this._initializingData.InitialIndex !== selectedIndex) {
			this.SelectedIndex = this._initializingData.InitialIndex;
			this._initializingData = null;
			this.SelectedIndex = selectedIndex;
		} else if (!System.Object.ReferenceEquals(this._initializingData.InitialItem, selectedItem)) {
			this.SelectedItem = this._initializingData.InitialItem;
			this._initializingData = null;
			this.SelectedItem = selectedItem;
		}
	}
	this._initializingData = null;
};
System.Windows.Controls.Primitives.Selector.prototype.get_ElementScrollViewer = function () {
	return this._elementScrollViewer;
};
System.Windows.Controls.Primitives.Selector.prototype.set_ElementScrollViewer = function (value) {
	this._elementScrollViewer = value;
};
JSIL.OverloadedMethod(System.Windows.Controls.Primitives.Selector.prototype, "OnSelectionChanged", [
		["OnSelectionChanged$0", [System.Windows.Controls.SelectionChangedEventArgs]], 
		["OnSelectionChanged$1", [System.Int32, System.Int32, System.Object, System.Object]]
	]);
JSIL.OverloadedMethod(System.Windows.Controls.Primitives.Selector.prototype, "IsOnCurrentPage", [
		["IsOnCurrentPage$0", [System.Int32]], 
		["IsOnCurrentPage$1", [System.Int32, JSIL.Reference.Of(System.Windows.Rect), JSIL.Reference.Of(System.Windows.Rect)]]
	]);
JSIL.MakeProperty(System.Windows.Controls.Primitives.Selector.prototype, "SelectedIndex", 
	System.Windows.Controls.Primitives.Selector.prototype.get_SelectedIndex, System.Windows.Controls.Primitives.Selector.prototype.set_SelectedIndex);
JSIL.MakeProperty(System.Windows.Controls.Primitives.Selector.prototype, "SelectedValue", 
	System.Windows.Controls.Primitives.Selector.prototype.get_SelectedValue, System.Windows.Controls.Primitives.Selector.prototype.set_SelectedValue);
JSIL.MakeProperty(System.Windows.Controls.Primitives.Selector.prototype, "SelectedValuePath", 
	System.Windows.Controls.Primitives.Selector.prototype.get_SelectedValuePath, System.Windows.Controls.Primitives.Selector.prototype.set_SelectedValuePath);
JSIL.MakeProperty(System.Windows.Controls.Primitives.Selector.prototype, "SelectedItem", 
	System.Windows.Controls.Primitives.Selector.prototype.get_SelectedItem, System.Windows.Controls.Primitives.Selector.prototype.set_SelectedItem);
JSIL.MakeProperty(System.Windows.Controls.Primitives.Selector.prototype, "SelectedItemsImpl", 
	System.Windows.Controls.Primitives.Selector.prototype.get_SelectedItemsImpl, null);
JSIL.MakeProperty(System.Windows.Controls.Primitives.Selector.prototype, "CanSelectMultiple", 
	System.Windows.Controls.Primitives.Selector.prototype.get_CanSelectMultiple, null);
JSIL.MakeProperty(System.Windows.Controls.Primitives.Selector.prototype, "IsSynchronizedWithCurrentItem", 
	System.Windows.Controls.Primitives.Selector.prototype.get_IsSynchronizedWithCurrentItem, System.Windows.Controls.Primitives.Selector.prototype.set_IsSynchronizedWithCurrentItem);
JSIL.MakeProperty(System.Windows.Controls.Primitives.Selector.prototype, "IsInit", 
	System.Windows.Controls.Primitives.Selector.prototype.get_IsInit, null);
JSIL.MakeProperty(System.Windows.Controls.Primitives.Selector.prototype, "ElementScrollViewer", 
	System.Windows.Controls.Primitives.Selector.prototype.get_ElementScrollViewer, System.Windows.Controls.Primitives.Selector.prototype.set_ElementScrollViewer);
Object.defineProperty(System.Windows.Controls.Primitives.Selector, "ElementScrollViewerName", {
		"value": "ScrollViewer"}
);
System.Windows.Controls.Primitives.Selector.IsSelectedProperty = null;
System.Windows.Controls.Primitives.Selector.IsSelectionActiveProperty = null;
System.Windows.Controls.Primitives.Selector.SelectedIndexProperty = null;
System.Windows.Controls.Primitives.Selector.SelectedValueProperty = null;
System.Windows.Controls.Primitives.Selector.prototype.coercingSelectedeValueToNull = false;
System.Windows.Controls.Primitives.Selector.SelectedValuePathProperty = null;
System.Windows.Controls.Primitives.Selector.prototype.selectionChangeCausedBySelectedValuePathPropertyChange = false;
System.Windows.Controls.Primitives.Selector.SelectedItemProperty = null;
System.Windows.Controls.Primitives.Selector.prototype.SelectionChanged = null;
System.Windows.Controls.Primitives.Selector.IsSynchronizedWithCurrentItemProperty = null;
System.Windows.Controls.Primitives.Selector.prototype._initializingData = null;
System.Windows.Controls.Primitives.Selector.prototype._selectedItems = null;
System.Windows.Controls.Primitives.Selector.prototype._selectedItemsStale = false;
System.Windows.Controls.Primitives.Selector.prototype._synchronizeCurrentItem = false;
System.Windows.Controls.Primitives.Selector.prototype._selectionChanger = null;
System.Windows.Controls.Primitives.Selector.prototype._selectedValuePropertyPath = null;
System.Windows.Controls.Primitives.Selector.prototype._selectedValuePropertyPathListener = null;
System.Windows.Controls.Primitives.Selector.prototype._selectedItemsImpl = null;
System.Windows.Controls.Primitives.Selector.prototype._focusedIndex = 0;
System.Windows.Controls.Primitives.Selector.prototype._forwardHorizontalScrollBarVisibility = false;
System.Windows.Controls.Primitives.Selector.prototype._forwardVerticalScrollBarVisibility = false;
System.Windows.Controls.Primitives.Selector.prototype._elementScrollViewer = null;
System.Windows.Controls.Primitives.Selector.prototype._monitoredICV = null;
System.Windows.Controls.Primitives.Selector.prototype._updatingCurrentItemInCollectionView = false;
System.Windows.Controls.Primitives.Selector._cctor = function () {
	System.Windows.Controls.Primitives.Selector.IsSelectedProperty = System.Windows.DependencyProperty.RegisterAttached("IsSelected", System.Boolean, System.Windows.Controls.Primitives.Selector, JSIL.New(System.Windows.PropertyMetadata, "_ctor$0", [JSIL.Delegate.New("System.Windows.PropertyChangedCallback", null, System.Windows.Controls.Primitives.Selector.OnIsSelectedChanged)]));
	System.Windows.Controls.Primitives.Selector.IsSelectionActiveProperty = System.Windows.DependencyProperty.RegisterAttachedReadOnly("IsSelectionActive", System.Boolean, System.Windows.Controls.Primitives.Selector, JSIL.New(System.Windows.PropertyMetadata, "_ctor$0", [JSIL.Delegate.New("System.Windows.PropertyChangedCallback", null, System.Windows.Controls.Primitives.Selector.OnIsSelectionActiveChanged)]));
	System.Windows.Controls.Primitives.Selector.SelectedIndexProperty = System.Windows.DependencyProperty.Register$0("SelectedIndex", System.Int32, System.Windows.Controls.Primitives.Selector, JSIL.New(System.Windows.PropertyMetadata, "_ctor$2", [-1, JSIL.Delegate.New("System.Windows.PropertyChangedCallback", null, System.Windows.Controls.Primitives.Selector.OnSelectedIndexChanged)]));
	System.Windows.Controls.Primitives.Selector.SelectedValueProperty = System.Windows.DependencyProperty.Register$0("SelectedValue", System.Object, System.Windows.Controls.Primitives.Selector, JSIL.New(System.Windows.PropertyMetadata, "_ctor$2", [null, JSIL.Delegate.New("System.Windows.PropertyChangedCallback", null, System.Windows.Controls.Primitives.Selector.OnSelectedValuePropertyChanged)]));
	System.Windows.Controls.Primitives.Selector.SelectedValuePathProperty = System.Windows.DependencyProperty.Register$0("SelectedValuePath", System.String, System.Windows.Controls.Primitives.Selector, JSIL.New(System.Windows.PropertyMetadata, "_ctor$2", [System.String.Empty, JSIL.Delegate.New("System.Windows.PropertyChangedCallback", null, System.Windows.Controls.Primitives.Selector.OnSelectedValuePathPropertyChanged)]));
	System.Windows.Controls.Primitives.Selector.SelectedItemProperty = System.Windows.DependencyProperty.Register$0("SelectedItem", System.Object, System.Windows.Controls.Primitives.Selector, JSIL.New(System.Windows.PropertyMetadata, "_ctor$0", [JSIL.Delegate.New("System.Windows.PropertyChangedCallback", null, System.Windows.Controls.Primitives.Selector.OnSelectedItemChanged)]));
	System.Windows.Controls.Primitives.Selector.IsSynchronizedWithCurrentItemProperty = System.Windows.DependencyProperty.Register$0("IsSynchronizedWithCurrentItem", System.Nullable$b1.Of(System.Boolean), System.Windows.Controls.Primitives.Selector, JSIL.New(System.Windows.PropertyMetadata, "_ctor$0", [JSIL.Delegate.New("System.Windows.PropertyChangedCallback", null, System.Windows.Controls.Primitives.Selector.OnIsSynchronizedWithCurrentItemChanged)]));
};

$asm02.System.Windows.Controls.Primitives.Selector.InitializingData.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm02.System.Windows.Controls.Primitives.Selector.InitializingData.prototype.IsIndexSet = false;
$asm02.System.Windows.Controls.Primitives.Selector.InitializingData.prototype.InitialIndex = 0;
$asm02.System.Windows.Controls.Primitives.Selector.InitializingData.prototype.InitialItem = null;
$asm02.System.Windows.Controls.Primitives.Selector.InitializingData.prototype.InitialValue = null;

$asm02.System.Windows.Controls.Primitives.Selector.SelectionChanger.prototype._ctor = function (owner) {
	System.Object.prototype._ctor.call(this);
	this._owner = owner;
	this._isActive = false;
	this._toSelect = JSIL.New($asm02.System.Windows.Controls.Primitives.Selector.InternalSelectedItemsStorage, "_ctor$0", [1]);
	this._toUnselect = JSIL.New($asm02.System.Windows.Controls.Primitives.Selector.InternalSelectedItemsStorage, "_ctor$0", [1]);
	this._selectedIndex = new (System.Nullable$b1.Of(System.Int32)) ();
};
$asm02.System.Windows.Controls.Primitives.Selector.SelectionChanger.prototype.get_IsActive = function () {
	return this._isActive;
};
$asm02.System.Windows.Controls.Primitives.Selector.SelectionChanger.prototype.Begin = function () {
	this._isActive = true;
	this._toSelect.Clear();
	this._toUnselect.Clear();
};
$asm02.System.Windows.Controls.Primitives.Selector.SelectionChanger.prototype.End = function () {
	var list = new (System.Collections.Generic.List$b1.Of(System.Object)) ();
	var list2 = new (System.Collections.Generic.List$b1.Of(System.Object)) ();
	try {
		this.ApplyCanSelectMultiple();
		this.CreateDeltaSelectionChange(list, list2);
		var obj = null;
		var num = -1;
		if (this._owner._selectedItems.Count > 0) {
			obj = this._owner._selectedItems.get_Item(0);
			num = this._owner._selectedItems.StoredIndexOf(obj);
			if (num === -1) {
				num = this._owner.Items.IndexOf(obj);
				this._owner._selectedItems.StoreIndex(obj, num);
			}
		}
		this._owner.UpdatePublicSelectionProperties(this._selectedIndex.HasValue ? this._selectedIndex.Value : this._owner.SelectedIndex, num, this._owner.SelectedItem, obj);
	} finally {
		this.Cleanup();
	}
	if (!((list.Count <= 0) && (list2.Count <= 0))) {
		this._owner.InvokeSelectionChanged(list, list2);
	}
};
$asm02.System.Windows.Controls.Primitives.Selector.SelectionChanger.prototype.Select = function (index, o) {
	if (this._toUnselect.Remove(o)) {
		return true;
	}
	if (this._owner._selectedItems.Contains(o)) {
		return false;
	}
	if (this._toSelect.Contains(o)) {
		return false;
	}
	if (index === -1) {
		return false;
	}
	if (!(this._owner.CanSelectMultiple || (this._toSelect.Count <= 0))) {
		var enumerator = this._toSelect.IEnumerable_GetEnumerator();
		try {
		__loop0__: 
			while (enumerator.IEnumerator_MoveNext()) {
				var current = enumerator.IEnumerator_Current;
				this._toUnselect.Add(current, -1);
			}
		} finally {
			var disposable = JSIL.TryCast(enumerator, System.IDisposable);
			if (disposable !== null) {
				disposable.IDisposable_Dispose();
			}
		}
		this._toSelect.Clear();
	}
	this._toSelect.Add(o, index);
	return true;
};
$asm02.System.Windows.Controls.Primitives.Selector.SelectionChanger.prototype.Unselect = function (o) {
	if (this._toSelect.Remove(o)) {
		return true;
	}
	if (!this._owner._selectedItems.Contains(o)) {
		return false;
	}
	if (this._toUnselect.Contains(o)) {
		return false;
	}
	this._toUnselect.Add(o, -1);
	return true;
};
$asm02.System.Windows.Controls.Primitives.Selector.SelectionChanger.prototype.SelectJustThisItem$0 = function (o) {
	if (!this._owner.UpdateCurrentItemInCollectionView(o)) {
		return false;
	}
	try {
		this.Begin();
		var enumerator = this._owner._selectedItems.IEnumerable_GetEnumerator();
		try {
		__loop0__: 
			while (enumerator.IEnumerator_MoveNext()) {
				var current = enumerator.IEnumerator_Current;
				this.Unselect(current);
			}
		} finally {
			var disposable = JSIL.TryCast(enumerator, System.IDisposable);
			if (disposable !== null) {
				disposable.IDisposable_Dispose();
			}
		}
		if (o !== null) {
			this.Select(this._owner.Items.IndexOf(o), o);
		}
	} finally {
		this.End();
	}
	return true;
};
$asm02.System.Windows.Controls.Primitives.Selector.SelectionChanger.prototype.SelectJustThisItem$1 = function (oldIndex, newIndex) {
	var o = (newIndex >= 0) ? this._owner.Items.get_Item(newIndex) : null;
	if (!this._owner.UpdateCurrentItemInCollectionView(o)) {
		return false;
	}
	try {
		this.Begin();
		var enumerator = this._owner._selectedItems.IEnumerable_GetEnumerator();
		try {
		__loop0__: 
			while (enumerator.IEnumerator_MoveNext()) {
				var current = enumerator.IEnumerator_Current;
				this.Unselect(current);
			}
		} finally {
			var disposable = JSIL.TryCast(enumerator, System.IDisposable);
			if (disposable !== null) {
				disposable.IDisposable_Dispose();
			}
		}
		if (newIndex >= 0) {
			this.Select(newIndex, this._owner.Items.get_Item(newIndex));
			this._selectedIndex = new (System.Nullable$b1.Of(System.Int32)) (oldIndex);
		}
	} finally {
		this.End();
	}
	return true;
};
$asm02.System.Windows.Controls.Primitives.Selector.SelectionChanger.prototype.Cancel = function () {
	this.Cleanup();
};
$asm02.System.Windows.Controls.Primitives.Selector.SelectionChanger.prototype.Cleanup = function () {
	this._selectedIndex = new (System.Nullable$b1.Of(System.Int32)) ();
	this._isActive = false;
	this._toSelect.Clear();
	this._toUnselect.Clear();
};
$asm02.System.Windows.Controls.Primitives.Selector.SelectionChanger.prototype.ApplyCanSelectMultiple = function () {
	if (!this._owner.CanSelectMultiple) {
		if (this._toSelect.Count === 1) {
			this._toUnselect = JSIL.New($asm02.System.Windows.Controls.Primitives.Selector.InternalSelectedItemsStorage, "_ctor$1", [this._owner._selectedItems]);
			return;
		}
		if (!((this._owner._selectedItems.Count <= 1) || (this._owner._selectedItems.Count === (this._toUnselect.Count + 1)))) {
			var objB = this._owner._selectedItems.get_Item(0);
			this._toUnselect.Clear();
			var enumerator = this._owner._selectedItems.IEnumerable_GetEnumerator();
			try {
			__loop0__: 
				while (enumerator.IEnumerator_MoveNext()) {
					var current = enumerator.IEnumerator_Current;
					if (!System.Object.Equals(current, objB)) {
						this._toUnselect.Add(current, -1);
					}
				}
			} finally {
				var disposable = JSIL.TryCast(enumerator, System.IDisposable);
				if (disposable !== null) {
					disposable.IDisposable_Dispose();
				}
			}
		}
	}
};
$asm02.System.Windows.Controls.Primitives.Selector.SelectionChanger.prototype.CreateDeltaSelectionChange = function (unselectedItems, selectedItems) {
	if (!((this._toUnselect.Count <= 0) && (this._toSelect.Count <= 0))) {
		var internalSelectedItemsStorage = JSIL.New($asm02.System.Windows.Controls.Primitives.Selector.InternalSelectedItemsStorage, "_ctor$1", [this._owner._selectedItems]);
		this._owner._selectedItems.Clear();
		this._owner._selectedItemsStale = true;
		var enumerator = this._toUnselect.IEnumerable_GetEnumerator();
		try {
		__loop0__: 
			while (enumerator.IEnumerator_MoveNext()) {
				var current = enumerator.IEnumerator_Current;
				this._owner.SetItemIsSelected(current, false);
				if (internalSelectedItemsStorage.Contains(current)) {
					unselectedItems.Add(current);
				}
			}
		} finally {
			var disposable = JSIL.TryCast(enumerator, System.IDisposable);
			if (disposable !== null) {
				disposable.IDisposable_Dispose();
			}
		}
		var enumerator2 = internalSelectedItemsStorage.IEnumerable_GetEnumerator();
		try {
		__loop1__: 
			while (enumerator2.IEnumerator_MoveNext()) {
				var current2 = enumerator2.IEnumerator_Current;
				if (!this._toUnselect.Contains(current2)) {
					this._owner._selectedItems.Add(current2, internalSelectedItemsStorage.StoredIndexOf(current2));
				}
			}
		} finally {
			var disposable2 = JSIL.TryCast(enumerator2, System.IDisposable);
			if (disposable2 !== null) {
				disposable2.IDisposable_Dispose();
			}
		}
		var enumerator3 = this._toSelect.IEnumerable_GetEnumerator();
		try {
		__loop2__: 
			while (enumerator3.IEnumerator_MoveNext()) {
				var current3 = enumerator3.IEnumerator_Current;
				this._owner.SetItemIsSelected(current3, true);
				if (!this._owner._selectedItems.Contains(current3)) {
					this._owner._selectedItems.Add(current3, this._toSelect.StoredIndexOf(current3));
					selectedItems.Add(current3);
				}
			}
		} finally {
			var disposable3 = JSIL.TryCast(enumerator3, System.IDisposable);
			if (disposable3 !== null) {
				disposable3.IDisposable_Dispose();
			}
		}
	}
};
JSIL.OverloadedMethod($asm02.System.Windows.Controls.Primitives.Selector.SelectionChanger.prototype, "SelectJustThisItem", [
		["SelectJustThisItem$0", [System.Object]], 
		["SelectJustThisItem$1", [System.Int32, System.Int32]]
	]);
JSIL.MakeProperty($asm02.System.Windows.Controls.Primitives.Selector.SelectionChanger.prototype, "IsActive", 
	$asm02.System.Windows.Controls.Primitives.Selector.SelectionChanger.prototype.get_IsActive, null);
$asm02.System.Windows.Controls.Primitives.Selector.SelectionChanger.prototype._owner = null;
$asm02.System.Windows.Controls.Primitives.Selector.SelectionChanger.prototype._isActive = false;
$asm02.System.Windows.Controls.Primitives.Selector.SelectionChanger.prototype._toSelect = null;
$asm02.System.Windows.Controls.Primitives.Selector.SelectionChanger.prototype._toUnselect = null;

$asm02.System.Windows.Controls.Primitives.Selector.InternalSelectedItemsStorage.prototype._ctor$0 = function (capacity) {
	System.Object.prototype._ctor.call(this);
	this._list = new (System.Collections.Generic.List$b1.Of(System.Object)) (capacity);
	this._set = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.Object, System.Int32), "_ctor$1", [capacity]);
};
$asm02.System.Windows.Controls.Primitives.Selector.InternalSelectedItemsStorage.prototype._ctor$1 = function (collection) {
	System.Object.prototype._ctor.call(this);
	this._list = new (System.Collections.Generic.List$b1.Of(System.Object)) (collection._list);
	this._set = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.Object, System.Int32), "_ctor$4", [collection._set]);
};
$asm02.System.Windows.Controls.Primitives.Selector.InternalSelectedItemsStorage.prototype.Add = function (t, index) {
	this._set.Add(this.GetStableRef(t), index);
	this._list.Add(t);
};
$asm02.System.Windows.Controls.Primitives.Selector.InternalSelectedItemsStorage.prototype.Remove = function (t) {
	if (this._set.Remove(this.GetStableRef(t))) {
		this._list.Remove(t);
		return true;
	}
	return false;
};
$asm02.System.Windows.Controls.Primitives.Selector.InternalSelectedItemsStorage.prototype.Contains = function (t) {
	return this._set.ContainsKey(this.GetStableRef(t));
};
$asm02.System.Windows.Controls.Primitives.Selector.InternalSelectedItemsStorage.prototype.get_Item = function (index) {
	return this._list.get_Item(index);
};
$asm02.System.Windows.Controls.Primitives.Selector.InternalSelectedItemsStorage.prototype.Clear = function () {
	this._list.Clear();
	this._set.Clear();
};
$asm02.System.Windows.Controls.Primitives.Selector.InternalSelectedItemsStorage.prototype.get_Count = function () {
	return this._list.Count;
};
$asm02.System.Windows.Controls.Primitives.Selector.InternalSelectedItemsStorage.prototype.StoreIndex = function (t, index) {
	if (!this.Contains(t)) {
		return false;
	}
	this._set.set_Item(this.GetStableRef(t), index);
	return true;
};
$asm02.System.Windows.Controls.Primitives.Selector.InternalSelectedItemsStorage.prototype.StoredIndexOf = function (t) {
	if (!this.Contains(t)) {
		return -1;
	}
	return this._set.get_Item(this.GetStableRef(t));
};
$asm02.System.Windows.Controls.Primitives.Selector.InternalSelectedItemsStorage.prototype.InvalidateStoredIndexes = function (index) {
	var enumerator = (this._list.GetEnumerator());
	try {
	__loop0__: 
		while (enumerator.MoveNext()) {
			var current = enumerator.Current;
			var num = this._set.get_Item(this.GetStableRef(current));
			if (num >= index) {
				this._set.set_Item(this.GetStableRef(current), -1);
			}
		}
	} finally {
		enumerator.IDisposable_Dispose();
	}
};
$asm02.System.Windows.Controls.Primitives.Selector.InternalSelectedItemsStorage.prototype.IEnumerable_GetEnumerator = function () {
	return this._list.GetEnumerator();
};
$asm02.System.Windows.Controls.Primitives.Selector.InternalSelectedItemsStorage.prototype.GetStableRef = function (t) {
	if (t === null) {
		return $asm02.System.Windows.Controls.Primitives.Selector.InternalSelectedItemsStorage.nullObject;
	}
	return t;
};
JSIL.OverloadedMethod($asm02.System.Windows.Controls.Primitives.Selector.InternalSelectedItemsStorage.prototype, "_ctor", [
		["_ctor$0", [System.Int32]], 
		["_ctor$1", [$asm02.System.Windows.Controls.Primitives.Selector.InternalSelectedItemsStorage]]
	]);
JSIL.MakeProperty($asm02.System.Windows.Controls.Primitives.Selector.InternalSelectedItemsStorage.prototype, "Item", 
	$asm02.System.Windows.Controls.Primitives.Selector.InternalSelectedItemsStorage.prototype.get_Item, null);
JSIL.MakeProperty($asm02.System.Windows.Controls.Primitives.Selector.InternalSelectedItemsStorage.prototype, "Count", 
	$asm02.System.Windows.Controls.Primitives.Selector.InternalSelectedItemsStorage.prototype.get_Count, null);
$asm02.System.Windows.Controls.Primitives.Selector.InternalSelectedItemsStorage.prototype._list = null;
$asm02.System.Windows.Controls.Primitives.Selector.InternalSelectedItemsStorage.prototype._set = null;
$asm02.System.Windows.Controls.Primitives.Selector.InternalSelectedItemsStorage.nullObject = null;
$asm02.System.Windows.Controls.Primitives.Selector.InternalSelectedItemsStorage._cctor = function () {
	$asm02.System.Windows.Controls.Primitives.Selector.InternalSelectedItemsStorage.nullObject = new System.Object();
};

System.Windows.Controls.ComboBox.prototype.get_IsEditable = function () {
	return false;
};
System.Windows.Controls.ComboBox.prototype.get_IsMouseOver = function () {
	return (this._isMouseOverMain || this._isMouseOverPopup);
};
System.Windows.Controls.ComboBox.prototype.get_IsDropDownOpen = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.ComboBox.IsDropDownOpenProperty), System.Boolean);
};
System.Windows.Controls.ComboBox.prototype.set_IsDropDownOpen = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.ComboBox.IsDropDownOpenProperty, value);
};
System.Windows.Controls.ComboBox.OnIsDropDownOpenChanged = function (d, e) {
	var comboBox = JSIL.Cast(d, System.Windows.Controls.ComboBox);
	var comboBoxAutomationPeer = JSIL.Cast(comboBox.GetAutomationPeer(), System.Windows.Automation.Peers.ComboBoxAutomationPeer);
	if (comboBoxAutomationPeer !== null) {
		comboBoxAutomationPeer.RaiseExpandCollapseAutomationEvent(JSIL.Cast(e.OldValue, System.Boolean), JSIL.Cast(e.NewValue, System.Boolean));
	}
	comboBox.OnIsDropDownOpenChanged(JSIL.Cast(e.NewValue, System.Boolean));
};
System.Windows.Controls.ComboBox.prototype.OnIsDropDownOpenChanged = function (isDropDownOpen) {
	System.Windows.Controls.ItemsControl.prototype.get_ItemContainerGenerator.call(this).StopAnimations();
	if (isDropDownOpen) {
		if (this.ElementPopup !== null) {
			this.ElementPopup.IsOpen = true;
		}
		if (this.ElementDropDownToggle !== null) {
			(this.ElementDropDownToggle.IsChecked = new (System.Nullable$b1.Of(System.Boolean)) (true));
		}
		this.SetContentPresenter(JSIL.TryCast(System.Windows.Controls.Primitives.Selector.prototype.get_SelectedItem.call(this), System.Windows.FrameworkElement) ? -1 : System.Windows.Controls.Primitives.Selector.prototype.get_SelectedIndex.call(this));
		this.OnDropDownOpened(System.EventArgs.Empty);
	} else {
		System.Windows.Controls.Primitives.Selector.prototype.SetFocusedItem.call(this, -1, false);
		this.SetContentPresenter(System.Windows.Controls.Primitives.Selector.prototype.get_SelectedIndex.call(this));
		if (this.ElementDropDownToggle !== null) {
			(this.ElementDropDownToggle.IsChecked = new (System.Nullable$b1.Of(System.Boolean)) (false));
		}
		if (this.ElementPopup !== null) {
			this.ElementPopup.IsOpen = false;
		}
		this.OnDropDownClosed(System.EventArgs.Empty);
	}
	this.UpdateSelectionBoxHighlighted();
	this.ChangeVisualState$0();
};
System.Windows.Controls.ComboBox.prototype.get_IsSelectionBoxHighlighted = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.ComboBox.IsSelectionBoxHighlightedProperty), System.Boolean);
};
System.Windows.Controls.ComboBox.prototype.set_IsSelectionBoxHighlighted = function (value) {
	System.Windows.DependencyObject.prototype.SetValueInternal$1.call(this, System.Windows.Controls.ComboBox.IsSelectionBoxHighlightedProperty, value, true);
};
System.Windows.Controls.ComboBox.prototype.UpdateSelectionBoxHighlighted = function () {
	var isSelectionBoxHighlighted = (!this.IsDropDownOpen && 
		this.HasFocus());
	this.IsSelectionBoxHighlighted = isSelectionBoxHighlighted;
};
System.Windows.Controls.ComboBox.prototype.get_ItemContainerStyle = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.ComboBox.ItemContainerStyleProperty), System.Windows.Style);
};
System.Windows.Controls.ComboBox.prototype.set_ItemContainerStyle = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.ComboBox.ItemContainerStyleProperty, value);
};
System.Windows.Controls.ComboBox.prototype.GetItemContainerStyle = function () {
	return this.ItemContainerStyle;
};
System.Windows.Controls.ComboBox.prototype.get_MaxDropDownHeight = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.ComboBox.MaxDropDownHeightProperty), System.Double);
};
System.Windows.Controls.ComboBox.prototype.set_MaxDropDownHeight = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.ComboBox.MaxDropDownHeightProperty, value);
};
System.Windows.Controls.ComboBox.OnMaxDropDownHeightChanged = function (d, e) {
	JSIL.Cast(d, System.Windows.Controls.ComboBox).OnMaxDropDownHeightChanged(JSIL.Cast(e.NewValue, System.Double));
};
System.Windows.Controls.ComboBox.prototype.OnMaxDropDownHeightChanged = function (newValue) {
	this.ArrangePopup();
	this.ChangeVisualState$0();
};
System.Windows.Controls.ComboBox.prototype.get_SelectionBoxItem = function () {
	return System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.ComboBox.SelectionBoxItemProperty);
};
System.Windows.Controls.ComboBox.prototype.set_SelectionBoxItem = function (value) {
	System.Windows.DependencyObject.prototype.SetValueInternal$1.call(this, System.Windows.Controls.ComboBox.SelectionBoxItemProperty, value, true);
};
System.Windows.Controls.ComboBox.prototype.get_SelectionBoxItemTemplate = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.ComboBox.SelectionBoxItemTemplateProperty), System.Windows.DataTemplate);
};
System.Windows.Controls.ComboBox.prototype.set_SelectionBoxItemTemplate = function (value) {
	System.Windows.DependencyObject.prototype.SetValueInternal$1.call(this, System.Windows.Controls.ComboBox.SelectionBoxItemTemplateProperty, value, true);
};
System.Windows.Controls.ComboBox.prototype.add_DropDownClosed = function (value) {
	this.DropDownClosed = System.Delegate.Combine(this.DropDownClosed, value);
};
System.Windows.Controls.ComboBox.prototype.remove_DropDownClosed = function (value) {
	this.DropDownClosed = System.Delegate.Remove(this.DropDownClosed, value);
};
System.Windows.Controls.ComboBox.prototype.OnDropDownClosed = function (e) {
	if (this.DropDownClosed !== null) {
		this.DropDownClosed(this, e);
	}
};
System.Windows.Controls.ComboBox.prototype.add_DropDownOpened = function (value) {
	this.DropDownOpened = System.Delegate.Combine(this.DropDownOpened, value);
};
System.Windows.Controls.ComboBox.prototype.remove_DropDownOpened = function (value) {
	this.DropDownOpened = System.Delegate.Remove(this.DropDownOpened, value);
};
System.Windows.Controls.ComboBox.prototype.OnDropDownOpened = function (e) {
	if (this.DropDownOpened !== null) {
		this.DropDownOpened(this, e);
	}
};
System.Windows.Controls.ComboBox.prototype._ctor = function () {
	System.Windows.Controls.Primitives.Selector.prototype._ctor.call(this);
	System.Windows.Controls.Control.prototype.set_DefaultStyleKey.call(this, System.Windows.Controls.ComboBox);
};
System.Windows.Controls.ComboBox.prototype.OnApplyTemplate = function () {
	System.Windows.Controls.Primitives.Selector.prototype.OnApplyTemplate.call(this);
	if (!((this.ElementContentPresenter === null) || (this._swappedOutComboBoxItem === null))) {
		this.SetContentPresenter(-1);
	}
	this.IsDropDownOpen = false;
	this.ElementDropDownToggle = JSIL.TryCast(System.Windows.Controls.Control.prototype.GetTemplateChild.call(this, "DropDownToggle"), System.Windows.Controls.Primitives.ToggleButton);
	this.ElementPopup = JSIL.TryCast(System.Windows.Controls.Control.prototype.GetTemplateChild.call(this, "Popup"), System.Windows.Controls.Primitives.Popup);
	this.ElementContentPresenterBorder = JSIL.TryCast(System.Windows.Controls.Control.prototype.GetTemplateChild.call(this, "ContentPresenterBorder"), System.Windows.FrameworkElement);
	this.ElementContentPresenter = JSIL.TryCast(System.Windows.Controls.Control.prototype.GetTemplateChild.call(this, "ContentPresenter"), System.Windows.Controls.ContentPresenter);
	if (this.ElementContentPresenter !== null) {
		if (!($asm02.MS.Internal.QuirksMode.ShouldComboboxSelectedItemReceiveFocus() || !this.ElementContentPresenter.IsPropertyDefault(System.Windows.UIElement.IsHitTestVisibleProperty))) {
			this.ElementContentPresenter.IsHitTestVisible = false;
		}
		this._emptyContent = JSIL.TryCast(this.ElementContentPresenter.Content, System.Windows.FrameworkElement);
		if (System.Windows.Controls.Primitives.Selector.prototype.get_SelectedIndex.call(this) !== -1) {
			this.SetContentPresenter(System.Windows.Controls.Primitives.Selector.prototype.get_SelectedIndex.call(this));
		}
	}
	if (this.ElementDropDownToggle !== null) {
		this.ElementDropDownToggle.IsTabStop = false;
		this.ElementDropDownToggle.add_Click(JSIL.Delegate.New("System.Windows.RoutedEventHandler", this, System.Windows.Controls.ComboBox.prototype.ElementDropDownToggle_Click));
		this.ElementDropDownToggle.SetSkipAutomationPeerCreation();
	}
	if (this.ElementPopup !== null) {
		this.ElementPopupChild = JSIL.TryCast(this.ElementPopup.Child, System.Windows.FrameworkElement);
		this.ElementOutsidePopup = JSIL.New(System.Windows.Controls.Canvas, "_ctor$0", []);
	} else {
		this.ElementPopupChild = null;
		this.ElementOutsidePopup = null;
	}
	if (this.ElementOutsidePopup !== null) {
		this.ElementOutsidePopup.Background = JSIL.New(System.Windows.Media.SolidColorBrush, "_ctor$1", [System.Windows.Media.Colors.Transparent]);
		this.ElementOutsidePopup.add_MouseLeftButtonDown(JSIL.Delegate.New("System.Windows.Input.MouseButtonEventHandler", this, System.Windows.Controls.ComboBox.prototype.ElementOutsidePopup_MouseLeftButtonDown));
	}
	var value = function (sender, e) {
		this.OnKeyDown(e);
	};
	System.Windows.UIElement.prototype.add_KeyDown.call(this, value);
	System.Windows.FrameworkElement.prototype.add_SizeChanged.call(this, JSIL.Delegate.New("System.Windows.SizeChangedEventHandler", this, System.Windows.Controls.ComboBox.prototype.ElementPopupChild_SizeChanged));
	if (this.ElementPopupChild !== null) {
		this.ElementPopupChild.add_KeyDown(value);
		this.ElementPopupChild.add_GotFocus(JSIL.Delegate.New("System.Windows.RoutedEventHandler", this, System.Windows.Controls.ComboBox.prototype.ElementPopupChild_GotFocus));
		this.ElementPopupChild.add_LostFocus(JSIL.Delegate.New("System.Windows.RoutedEventHandler", this, System.Windows.Controls.ComboBox.prototype.ElementPopupChild_LostFocus));
		this.ElementPopupChild.add_MouseEnter(JSIL.Delegate.New("System.Windows.Input.MouseEventHandler", this, System.Windows.Controls.ComboBox.prototype.ElementPopupChild_MouseEnter));
		this.ElementPopupChild.add_MouseLeave(JSIL.Delegate.New("System.Windows.Input.MouseEventHandler", this, System.Windows.Controls.ComboBox.prototype.ElementPopupChild_MouseLeave));
		this.ElementPopupChild.add_SizeChanged(JSIL.Delegate.New("System.Windows.SizeChangedEventHandler", this, System.Windows.Controls.ComboBox.prototype.ElementPopupChild_SizeChanged));
		this.ElementPopupChildCanvas = JSIL.New(System.Windows.Controls.Canvas, "_ctor$0", []);
	} else {
		this.ElementPopupChildCanvas = null;
	}
	if (!((this.ElementPopupChildCanvas === null) || (this.ElementOutsidePopup === null))) {
		this.ElementPopup.Child = this.ElementPopupChildCanvas;
		this.ElementPopupChildCanvas.Children.Add(this.ElementOutsidePopup);
		this.ElementPopupChildCanvas.Children.Add(this.ElementPopupChild);
	}
	this.ChangeVisualState$1(false);
};
System.Windows.Controls.ComboBox.prototype.ArrangeOverride = function (arrangeBounds) {
	var result = System.Windows.FrameworkElement.prototype.ArrangeOverride.call(this, arrangeBounds).MemberwiseClone();
	this.ArrangePopup();
	return result;
};
System.Windows.Controls.ComboBox.prototype.IsItemItsOwnContainerOverride = function (item) {
	return JSIL.CheckType(item, System.Windows.Controls.ComboBoxItem);
};
System.Windows.Controls.ComboBox.prototype.GetContainerForItemOverride = function () {
	return new System.Windows.Controls.ComboBoxItem();
};
System.Windows.Controls.ComboBox.prototype.ClearContainerForItemOverride = function (element, item) {
	if (!(System.Windows.Controls.ItemsControl.prototype.get_IsItemsHostInvalid.call(this) || (element !== this._swappedOutComboBoxItem))) {
		this.SetContentPresenter(-1);
	}
	System.Windows.Controls.Primitives.Selector.prototype.ClearContainerForItemOverride.call(this, element, item);
};
System.Windows.Controls.ComboBox.prototype.PrepareContainerForItemOverride = function (element, item) {
	System.Windows.Controls.Primitives.Selector.prototype.PrepareContainerForItemOverride.call(this, element, item);
	if (!(this._preparingContentPresentersElement || 
			this.IsDropDownOpen || 
			this._swappedOutComboBoxItem || !$asm02.MS.Internal.InternalUtils.AreValuesEqual(System.Windows.Controls.Primitives.Selector.prototype.get_SelectedItem.call(this), item))) {
		this.SetContentPresenter(System.Windows.Controls.Primitives.Selector.prototype.get_SelectedIndex.call(this));
	}
};
System.Windows.Controls.ComboBox.prototype.OnSelectionChanged = function (oldIndex, newIndex, oldValue, newValue) {
	if (this.IsDropDownOpen) {
		if (newIndex !== -1) {
			System.Windows.Controls.Primitives.Selector.prototype.SetFocusedItem.call(this, newIndex, true);
			return;
		}
	} else if (this.ElementContentPresenter !== null) {
		this.SetContentPresenter(newIndex);
	}
};
System.Windows.Controls.ComboBox.prototype.OnIsSelectionActiveChanged = function (oldValue, newValue) {
	this.ChangeVisualState$0();
};
System.Windows.Controls.ComboBox.prototype.OnIsEnabledChanged = function (e) {
	System.Windows.Controls.Control.prototype.OnIsEnabledChanged.call(this, e);
	if (!e.NewValue) {
		this.IsDropDownOpen = false;
		this._isMouseOverMain = false;
		this._isMouseOverPopup = false;
	}
	this.ChangeVisualState$0();
};
System.Windows.Controls.ComboBox.prototype.CanScrollIntoView = function () {
	return (System.Windows.Controls.Primitives.Selector.prototype.CanScrollIntoView.call(this) && this.IsDropDownOpen);
};
System.Windows.Controls.ComboBox.prototype.OnCreateAutomationPeer = function () {
	return new System.Windows.Automation.Peers.ComboBoxAutomationPeer(this);
};
System.Windows.Controls.ComboBox.prototype.OnMouseWheel = function (e) {
	if ($asm02.MS.Internal.QuirksMode.ShouldControlsHandleMouseWheelEvent()) {
		if (!System.Windows.Controls.Control.prototype.get_IsEnabled.call(this)) {
			return;
		}
		if (this.HasFocus()) {
			if (!this.IsDropDownOpen) {
				if (e.Delta < 0) {
					System.Windows.Controls.Primitives.Selector.prototype.set_SelectedIndex.call(this, System.Windows.Controls.Primitives.Selector.prototype.SelectNext.call(this, System.Windows.Controls.Primitives.Selector.prototype.get_SelectedIndex.call(this)));
				} else {
					System.Windows.Controls.Primitives.Selector.prototype.set_SelectedIndex.call(this, System.Windows.Controls.Primitives.Selector.prototype.SelectPrev.call(this, System.Windows.Controls.Primitives.Selector.prototype.get_SelectedIndex.call(this)));
				}
			}
			e.Handled = true;
		}
	}
	System.Windows.Controls.Control.prototype.OnMouseWheel.call(this, e);
};
System.Windows.Controls.ComboBox.prototype.OnGotFocus = function (e) {
	System.Windows.Controls.Control.prototype.OnGotFocus.call(this, e);
	this.FocusChanged(this.HasFocus());
};
System.Windows.Controls.ComboBox.prototype.OnLostFocus = function (e) {
	System.Windows.Controls.Control.prototype.OnLostFocus.call(this, e);
	this.FocusChanged(this.HasFocus());
};
System.Windows.Controls.ComboBox.prototype.FocusChanged = function (hasFocus) {
	this.UpdateSelectionBoxHighlighted();
	System.Windows.DependencyObject.prototype.SetValueInternal$1.call(this, System.Windows.Controls.ComboBox.IsSelectionActiveProperty, hasFocus, true);
	if (!hasFocus) {
		this.IsDropDownOpen = false;
	}
};
System.Windows.Controls.ComboBox.prototype.OnKeyDown = function (e) {
	System.Windows.Controls.Control.prototype.OnKeyDown.call(this, e);
	if (e.Handled) {
		return;
	}
	if (!System.Windows.Controls.Control.prototype.get_IsEnabled.call(this)) {
		return;
	}
	if (this.IsDropDownOpen) {
		this.PopupKeyDown(e);
		return;
	}
	this.MainKeyDown(e);
};
System.Windows.Controls.ComboBox.prototype.OnMouseEnter = function (e) {
	System.Windows.Controls.Control.prototype.OnMouseEnter.call(this, e);
	this._isMouseOverMain = true;
	this.ChangeVisualState$0();
};
System.Windows.Controls.ComboBox.prototype.OnMouseLeave = function (e) {
	System.Windows.Controls.Control.prototype.OnMouseLeave.call(this, e);
	this._isMouseOverMain = false;
	this.ChangeVisualState$0();
};
System.Windows.Controls.ComboBox.prototype.OnMouseLeftButtonDown = function (e) {
	System.Windows.Controls.Control.prototype.OnMouseLeftButtonDown.call(this, e);
	if (!e.Handled) {
		e.Handled = true;
		System.Windows.Controls.Control.prototype.Focus.call(this);
		this.IsDropDownOpen = true;
	}
};
System.Windows.Controls.ComboBox.prototype.ElementDropDownToggle_Click = function (sender, e) {
	if (!System.Windows.Controls.Control.prototype.get_IsEnabled.call(this)) {
		return;
	}
	System.Windows.Controls.Control.prototype.Focus.call(this);
	var isChecked = this.ElementDropDownToggle.IsChecked.MemberwiseClone();
	this.IsDropDownOpen = (isChecked.HasValue && 
		isChecked.GetValueOrDefault$0());
};
System.Windows.Controls.ComboBox.prototype.ElementPopupChild_GotFocus = function (sender, e) {
	this.FocusChanged(this.HasFocus());
};
System.Windows.Controls.ComboBox.prototype.ElementPopupChild_LostFocus = function (sender, e) {
	this.FocusChanged(this.HasFocus());
};
System.Windows.Controls.ComboBox.prototype.ElementPopupChild_MouseEnter = function (sender, e) {
	this._isMouseOverPopup = true;
	this.ChangeVisualState$0();
};
System.Windows.Controls.ComboBox.prototype.ElementPopupChild_MouseLeave = function (sender, e) {
	this._isMouseOverPopup = false;
	this.ChangeVisualState$0();
};
System.Windows.Controls.ComboBox.prototype.ElementPopupChild_SizeChanged = function (sender, e) {
	this.ArrangePopup();
};
System.Windows.Controls.ComboBox.prototype.ElementOutsidePopup_MouseLeftButtonDown = function (sender, e) {
	this.IsDropDownOpen = false;
};
System.Windows.Controls.ComboBox.prototype.ArrangePopup = function () {
	var point = new System.Windows.Point(), point2 = new System.Windows.Point(), point3 = new System.Windows.Point();
	if (!((this.ElementPopup !== null) && 
			(this.ElementPopupChild !== null) && 
			(this.ElementContentPresenterBorder !== null) && this.ElementOutsidePopup)) {
		return;
	}
	var content = System.Windows.Application.Current.Host.Content;
	var actualWidth = content.ActualWidth;
	var actualHeight = content.ActualHeight;
	var num = this.ElementPopupChild.ActualWidth;
	var num2 = this.ElementPopupChild.ActualHeight;
	if (!((actualHeight !== 0) && (actualWidth !== 0))) {
		return;
	}
	var generalTransform = null;
	try {
		generalTransform = this.ElementContentPresenterBorder.TransformToVisual(null);
	} catch ($exception) {
		this.IsDropDownOpen = false;
	}
	if (generalTransform === null) {
		return;
	}
	point._ctor(0, 0);
	point2._ctor(1, 0);
	point3._ctor(0, 1);
	var point4 = generalTransform.Transform(point.MemberwiseClone()).MemberwiseClone();
	var point5 = generalTransform.Transform(point2.MemberwiseClone()).MemberwiseClone();
	var point6 = generalTransform.Transform(point3.MemberwiseClone()).MemberwiseClone();
	var x = point4.X;
	var y = point4.Y;
	var num3 = (Math.abs((point5.X - point4.X)));
	var num4 = (Math.abs((point6.Y - point4.Y)));
	var num5 = (System.Windows.FrameworkElement.prototype.get_ActualHeight.call(this) * num4);
	var num6 = (System.Windows.FrameworkElement.prototype.get_ActualWidth.call(this) * num3);
	if (!((num5 !== 0) && (num6 !== 0))) {
		return;
	}
	num *= num3;
	num2 *= num4;
	var num7 = this.MaxDropDownHeight;
	if (!(!System.Double.IsInfinity(num7) && !System.Double.IsNaN(num7))) {
		num7 = (((actualHeight - num5) * 3) / 5);
	}
	num = System.Math.Min(num, actualWidth);
	num2 = System.Math.Min(num2, num7);
	num = System.Math.Max(num6, num);
	var num8 = 0;
	if (!JSIL.Cast(System.Windows.FrameworkElement.prototype.get_FlowDirection.call(this), System.Boolean)) {
		if (actualWidth < (x + num)) {
			num8 = (actualWidth - (num + x));
		}
	} else if (0 > (x - num)) {
		num8 = (x - num);
	}
	var flag = true;
	var num9 = (y + num5);
	if (actualHeight < (num9 + num2)) {
		flag = false;
		num9 = (y - num2);
		if (num9 < 0) {
			if (y < ((actualHeight - num5) / 2)) {
				flag = true;
				num9 = (y + num5);
			} else {
				flag = false;
				num9 = (y - num2);
			}
		}
	}
	if (num2 !== 0) {
		if (flag) {
			num7 = System.Math.Min((actualHeight - num9), num7);
		} else {
			num7 = System.Math.Min(y, num7);
		}
	}
	this.ElementPopup.HorizontalOffset = 0;
	this.ElementPopup.VerticalOffset = 0;
	this.ElementOutsidePopup.Width = (actualWidth / num3);
	this.ElementOutsidePopup.Height = (actualHeight / num4);
	var identity = System.Windows.Media.Matrix.Identity.MemberwiseClone();
	identity.OffsetX -= (point4.X / num3);
	identity.OffsetY -= (point4.Y / num4);
	var matrixTransform = new System.Windows.Media.MatrixTransform();
	(matrixTransform.Matrix = identity.MemberwiseClone());
	this.ElementOutsidePopup.RenderTransform = matrixTransform;
	var num10 = (num6 / num3);
	this.ElementPopupChild.MinWidth = num10;
	this.ElementPopupChild.MaxWidth = System.Math.Max(num10, (actualWidth / num3));
	this.ElementPopupChild.MinHeight = (num5 / num4);
	this.ElementPopupChild.MaxHeight = System.Math.Max(0, (num7 / num4));
	this.ElementPopupChild.HorizontalAlignment = System.Windows.HorizontalAlignment.Left;
	this.ElementPopupChild.VerticalAlignment = System.Windows.VerticalAlignment.Top;
	System.Windows.Controls.Canvas.SetLeft(this.ElementPopupChild, (num8 / num3));
	System.Windows.Controls.Canvas.SetTop(this.ElementPopupChild, ((num9 - y) / num4));
	if (this.IsDropDownOpen) {
		System.Windows.Controls.Primitives.Selector.prototype.SetFocusedItem.call(this, System.Windows.Controls.Primitives.Selector.prototype.get_SelectedIndex.call(this), true);
	}
};
System.Windows.Controls.ComboBox.prototype.HasFocus = function () {
	var dependencyObject = JSIL.TryCast(System.Windows.Input.FocusManager.GetFocusedElement(), System.Windows.DependencyObject);
	var hyperlink = JSIL.TryCast(dependencyObject, System.Windows.Documents.Hyperlink);
	if (hyperlink !== null) {
		dependencyObject = hyperlink.HostFrameworkElement;
	}
__loop0__: 
	while (dependencyObject) {
		if (System.Object.ReferenceEquals(dependencyObject, this)) {
			return true;
		}
		var parent = System.Windows.Media.VisualTreeHelper.GetParent(dependencyObject);
		if (parent === null) {
			var frameworkElement = JSIL.TryCast(dependencyObject, System.Windows.FrameworkElement);
			if (frameworkElement !== null) {
				parent = frameworkElement.Parent;
			}
		}
		dependencyObject = parent;
	}
	return false;
};
System.Windows.Controls.ComboBox.prototype.MainKeyDown = function (e) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				e.Handled = true;
				var num = -1;
				var key = e.Key;
				switch (Number(key)) {
					case 3: 
					case 9: 
						this.IsDropDownOpen = true;
						__label0__ = "IL_A4";
						continue __step0__;
					case 4: 
					case 5: 
					case 6: 
					case 7: 
					case 8: 
					case 10: 
					case 11: 
						__label0__ = "IL_9D";
						continue __step0__;
					case 12: 
					case 13: 
					case 14: 
					case 15: 
					case 16: 
						break;
					case 17: 
						if (System.Windows.Input.Keyboard.Modifiers & System.Windows.Input.ModifierKeys.Alt) {
							this.IsDropDownOpen = true;
							__label0__ = "IL_A4";
							continue __step0__;
						}
						break;
					default: 
						if (key !== System.Windows.Input.Key.F4) {
							__label0__ = "IL_9D";
							continue __step0__;
						}
						this.IsDropDownOpen = !this.IsDropDownOpen;
						__label0__ = "IL_A4";
						continue __step0__;
				}
				num = System.Windows.Controls.Primitives.Selector.prototype.HandleNavigationKey.call(this, e.Key, System.Windows.Controls.Primitives.Selector.prototype.get_SelectedIndex.call(this), false);
				__label0__ = "IL_A4";
				continue __step0__;
				__label0__ = "IL_9D";
				continue __step0__;
				break;
			case "IL_9D":
				e.Handled = false;
				__label0__ = "IL_A4";
				continue __step0__;
				break;
			case "IL_A4":
				if (0 <= num) {
					System.Windows.Controls.Primitives.Selector.prototype.set_SelectedIndex.call(this, num);
				}
				break __step0__;
		}
	}
};
System.Windows.Controls.ComboBox.prototype.PopupKeyDown = function (e) {
	var flag = false;
	var num = -1;
	switch (Number(e.Key)) {
		case 3: 
		case 9: 
			if (System.Windows.Input.ModifierKeys.Alt !== (System.Windows.Input.Keyboard.Modifiers & (System.Windows.Input.ModifierKeys.Alt | System.Windows.Input.ModifierKeys.Control))) {
				var comboBoxItem = JSIL.TryCast(System.Windows.Input.FocusManager.GetFocusedElement(), System.Windows.Controls.ComboBoxItem);
				if (comboBoxItem !== null) {
					if (!((System.Windows.Input.ModifierKeys.Control !== (System.Windows.Input.Keyboard.Modifiers & System.Windows.Input.ModifierKeys.Control)) || !comboBoxItem.IsSelected)) {
						System.Windows.Controls.Primitives.Selector.prototype.set_SelectedIndex.call(this, -1);
					} else {
						System.Windows.Controls.Primitives.Selector.prototype.set_SelectedIndex.call(this, this._focusedIndex);
						this.IsDropDownOpen = false;
					}
					flag = true;
				}
			}
			break;
		case 8: 
			this.IsDropDownOpen = false;
			break;
		case 10: 
		case 11: 
		case 12: 
		case 13: 
		case 14: 
		case 15: 
		case 16: 
		case 17: 
			num = System.Windows.Controls.Primitives.Selector.prototype.HandleNavigationKey.call(this, e.Key, this._focusedIndex, true);
			break;
	}
	if (num !== -1) {
		flag = true;
		num = System.Math.Min(num, (System.Windows.Controls.ItemsControl.prototype.get_Items.call(this).Count - 1));
		if (0 <= num) {
			System.Windows.Controls.Primitives.Selector.prototype.SetFocusedItem.call(this, num, true);
		}
	}
	if (flag) {
		e.Handled = true;
	}
};
System.Windows.Controls.ComboBox.prototype.SetContentPresenter = function (index) {
	if (this._swappedOutComboBoxItem !== null) {
		var content = null;
		if (this.ElementContentPresenter !== null) {
			content = this.ElementContentPresenter.Content;
			this.ElementContentPresenter.Content = null;
		}
		this._swappedOutComboBoxItem.Content = content;
		this._swappedOutComboBoxItem = null;
	}
	if (index === -1) {
		if (this.ElementContentPresenter !== null) {
			this.ElementContentPresenter.Content = this._emptyContent;
			this.ElementContentPresenter.ContentTemplate = null;
		}
		this.SelectionBoxItem = null;
		this.SelectionBoxItemTemplate = null;
		return;
	}
	if (this.ElementContentPresenter !== null) {
		this.ElementContentPresenter.Content = null;
	}
	var flag = new JSIL.Variable(false);
	var comboBoxItem = JSIL.Cast(System.Windows.Controls.ItemsControl.prototype.get_ItemContainerGenerator.call(this).ContainerFromIndex$0(index), System.Windows.Controls.ComboBoxItem);
	if (comboBoxItem === null) {
		var position = System.Windows.Controls.ItemsControl.prototype.get_ItemContainerGenerator.call(this).GeneratorPositionFromIndex(index).MemberwiseClone();
		var disposable = System.Windows.Controls.ItemsControl.prototype.get_IItemContainerGenerator.call(this).IItemContainerGenerator_StartAt(position.MemberwiseClone(), System.Windows.Controls.Primitives.GeneratorDirection.Forward, true);
		try {
			comboBoxItem = JSIL.Cast(System.Windows.Controls.ItemsControl.prototype.get_IItemContainerGenerator.call(this).IItemContainerGenerator_GenerateNext(/* ref */ flag), System.Windows.Controls.ComboBoxItem);
		} finally {
			if (disposable !== null) {
				disposable.IDisposable_Dispose();
			}
		}
	}
	if (flag.value) {
		this._preparingContentPresentersElement = true;
		System.Windows.Controls.ItemsControl.prototype.get_IItemContainerGenerator.call(this).IItemContainerGenerator_PrepareItemContainer(comboBoxItem);
		this._preparingContentPresentersElement = false;
	}
	var content2 = comboBoxItem.Content;
	if (JSIL.TryCast(content2, System.Windows.UIElement) !== null) {
		comboBoxItem.Content = null;
		this._swappedOutComboBoxItem = comboBoxItem;
	}
	comboBoxItem.IsMouseOver = false;
	comboBoxItem.ChangeVisualState$0();
	var contentTemplate = comboBoxItem.ContentTemplate;
	if (this.ElementContentPresenter !== null) {
		this.ElementContentPresenter.ContentTemplate = contentTemplate;
		this.ElementContentPresenter.Content = content2;
	}
	this.SelectionBoxItem = content2;
	this.SelectionBoxItemTemplate = contentTemplate;
};
System.Windows.Controls.ComboBox.prototype.ChangeVisualState$0 = function () {
	this.ChangeVisualState$1(true);
};
System.Windows.Controls.ComboBox.prototype.ChangeVisualState$1 = function (useTransitions) {
	if (!System.Windows.Controls.Control.prototype.get_IsEnabled.call(this)) {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "Disabled");
	} else if (this.IsMouseOver) {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "MouseOver");
	} else {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "Normal");
	}
	if (!System.Windows.Controls.Primitives.Selector.GetIsSelectionActive(this)) {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "Unfocused");
		return;
	}
	if (this.IsDropDownOpen) {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "FocusedDropDown");
		return;
	}
	System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "Focused");
};
JSIL.OverloadedMethod(System.Windows.Controls.ComboBox.prototype, "ChangeVisualState", [
		["ChangeVisualState$0", []], 
		["ChangeVisualState$1", [System.Boolean]]
	]);
JSIL.MakeProperty(System.Windows.Controls.ComboBox.prototype, "IsEditable", 
	System.Windows.Controls.ComboBox.prototype.get_IsEditable, null);
JSIL.MakeProperty(System.Windows.Controls.ComboBox.prototype, "IsMouseOver", 
	System.Windows.Controls.ComboBox.prototype.get_IsMouseOver, null);
JSIL.MakeProperty(System.Windows.Controls.ComboBox.prototype, "IsDropDownOpen", 
	System.Windows.Controls.ComboBox.prototype.get_IsDropDownOpen, System.Windows.Controls.ComboBox.prototype.set_IsDropDownOpen);
JSIL.MakeProperty(System.Windows.Controls.ComboBox.prototype, "IsSelectionBoxHighlighted", 
	System.Windows.Controls.ComboBox.prototype.get_IsSelectionBoxHighlighted, System.Windows.Controls.ComboBox.prototype.set_IsSelectionBoxHighlighted);
JSIL.MakeProperty(System.Windows.Controls.ComboBox.prototype, "ItemContainerStyle", 
	System.Windows.Controls.ComboBox.prototype.get_ItemContainerStyle, System.Windows.Controls.ComboBox.prototype.set_ItemContainerStyle);
JSIL.MakeProperty(System.Windows.Controls.ComboBox.prototype, "MaxDropDownHeight", 
	System.Windows.Controls.ComboBox.prototype.get_MaxDropDownHeight, System.Windows.Controls.ComboBox.prototype.set_MaxDropDownHeight);
JSIL.MakeProperty(System.Windows.Controls.ComboBox.prototype, "SelectionBoxItem", 
	System.Windows.Controls.ComboBox.prototype.get_SelectionBoxItem, System.Windows.Controls.ComboBox.prototype.set_SelectionBoxItem);
JSIL.MakeProperty(System.Windows.Controls.ComboBox.prototype, "SelectionBoxItemTemplate", 
	System.Windows.Controls.ComboBox.prototype.get_SelectionBoxItemTemplate, System.Windows.Controls.ComboBox.prototype.set_SelectionBoxItemTemplate);
Object.defineProperty(System.Windows.Controls.ComboBox, "ElementDropDownToggleName", {
		"value": "DropDownToggle"}
);
Object.defineProperty(System.Windows.Controls.ComboBox, "ElementPopupName", {
		"value": "Popup"}
);
Object.defineProperty(System.Windows.Controls.ComboBox, "ElementContentPresenterBorderName", {
		"value": "ContentPresenterBorder"}
);
Object.defineProperty(System.Windows.Controls.ComboBox, "ElementContentPresenterName", {
		"value": "ContentPresenter"}
);
System.Windows.Controls.ComboBox.IsDropDownOpenProperty = null;
System.Windows.Controls.ComboBox.IsSelectionActiveProperty = null;
System.Windows.Controls.ComboBox.IsSelectionBoxHighlightedProperty = null;
System.Windows.Controls.ComboBox.ItemContainerStyleProperty = null;
System.Windows.Controls.ComboBox.MaxDropDownHeightProperty = null;
System.Windows.Controls.ComboBox.SelectionBoxItemProperty = null;
System.Windows.Controls.ComboBox.SelectionBoxItemTemplateProperty = null;
System.Windows.Controls.ComboBox.prototype.DropDownClosed = null;
System.Windows.Controls.ComboBox.prototype.DropDownOpened = null;
System.Windows.Controls.ComboBox.prototype._emptyContent = null;
System.Windows.Controls.ComboBox.prototype._isMouseOverMain = false;
System.Windows.Controls.ComboBox.prototype._isMouseOverPopup = false;
System.Windows.Controls.ComboBox.prototype._swappedOutComboBoxItem = null;
System.Windows.Controls.ComboBox.prototype._preparingContentPresentersElement = false;
System.Windows.Controls.ComboBox.prototype.ElementDropDownToggle = null;
System.Windows.Controls.ComboBox.prototype.ElementPopup = null;
System.Windows.Controls.ComboBox.prototype.ElementOutsidePopup = null;
System.Windows.Controls.ComboBox.prototype.ElementPopupChildCanvas = null;
System.Windows.Controls.ComboBox.prototype.ElementPopupChild = null;
System.Windows.Controls.ComboBox.prototype.ElementContentPresenterBorder = null;
System.Windows.Controls.ComboBox.prototype.ElementContentPresenter = null;
System.Windows.Controls.ComboBox._cctor = function () {
	System.Windows.Controls.ComboBox.IsDropDownOpenProperty = System.Windows.DependencyProperty.Register$0("IsDropDownOpen", System.Boolean, System.Windows.Controls.ComboBox, JSIL.New(System.Windows.PropertyMetadata, "_ctor$0", [JSIL.Delegate.New("System.Windows.PropertyChangedCallback", null, System.Windows.Controls.ComboBox.OnIsDropDownOpenChanged)]));
	System.Windows.Controls.ComboBox.IsSelectionActiveProperty = System.Windows.Controls.Primitives.Selector.IsSelectionActiveProperty.AddOwner(System.Windows.Controls.ComboBox);
	System.Windows.Controls.ComboBox.IsSelectionBoxHighlightedProperty = System.Windows.DependencyProperty.RegisterReadOnly("IsSelectionBoxHighlighted", System.Boolean, System.Windows.Controls.ComboBox, null);
	System.Windows.Controls.ComboBox.ItemContainerStyleProperty = System.Windows.DependencyProperty.Register$0("ItemContainerStyle", System.Windows.Style, System.Windows.Controls.ComboBox, JSIL.New(System.Windows.PropertyMetadata, "_ctor$0", [JSIL.Delegate.New("System.Windows.PropertyChangedCallback", null, System.Windows.Controls.ItemsControl.OnItemContainerStyleChanged)]));
	System.Windows.Controls.ComboBox.MaxDropDownHeightProperty = System.Windows.DependencyProperty.Register$0("MaxDropDownHeight", System.Double, System.Windows.Controls.ComboBox, JSIL.New(System.Windows.PropertyMetadata, "_ctor$2", [Infinity, JSIL.Delegate.New("System.Windows.PropertyChangedCallback", null, System.Windows.Controls.ComboBox.OnMaxDropDownHeightChanged)]));
	System.Windows.Controls.ComboBox.SelectionBoxItemProperty = System.Windows.DependencyProperty.RegisterReadOnly("SelectionBoxItem", System.Object, System.Windows.Controls.ComboBox, null);
	System.Windows.Controls.ComboBox.SelectionBoxItemTemplateProperty = System.Windows.DependencyProperty.RegisterReadOnly("SelectionBoxItemTemplate", System.Windows.DataTemplate, System.Windows.Controls.ComboBox, null);
};

System.Windows.Controls.ListBoxItem.prototype.get_IsSelected = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.ListBoxItem.IsSelectedProperty), System.Boolean);
};
System.Windows.Controls.ListBoxItem.prototype.set_IsSelected = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.ListBoxItem.IsSelectedProperty, value);
};
System.Windows.Controls.ListBoxItem.prototype.get_IsMouseOver = function () {
	return this.IsMouseOver$value;
};
System.Windows.Controls.ListBoxItem.prototype.set_IsMouseOver = function (value) {
	this.IsMouseOver$value = value;
};
System.Windows.Controls.ListBoxItem.prototype.get_IsFocused = function () {
	return this.IsFocused$value;
};
System.Windows.Controls.ListBoxItem.prototype.set_IsFocused = function (value) {
	this.IsFocused$value = value;
};
System.Windows.Controls.ListBoxItem.prototype.get_Item = function () {
	return this.Item$value;
};
System.Windows.Controls.ListBoxItem.prototype.set_Item = function (value) {
	this.Item$value = value;
};
System.Windows.Controls.ListBoxItem.prototype._ctor = function () {
	System.Windows.Controls.ContentControl.prototype._ctor$0.call(this);
	System.Windows.FrameworkElement.prototype.add_Loaded.call(this, function (obj, routedEventArgs) {
			this.ChangeVisualState$1(false);
		});
	System.Windows.Controls.Control.prototype.set_DefaultStyleKey.call(this, System.Windows.Controls.ListBoxItem);
};
System.Windows.Controls.ListBoxItem.prototype.OnApplyTemplate = function () {
	System.Windows.FrameworkElement.prototype.OnApplyTemplate.call(this);
	this.ChangeVisualState$1(false);
};
System.Windows.Controls.ListBoxItem.prototype.OnMouseLeftButtonDown = function (e) {
	System.Windows.Controls.Control.prototype.OnMouseLeftButtonDown.call(this, e);
	if (!e.Handled) {
		e.Handled = true;
		System.Windows.Controls.Control.prototype.Focus.call(this);
		if (this._parentSelector !== null) {
			this._parentSelector.OnListBoxItemClicked(this);
		}
	}
};
System.Windows.Controls.ListBoxItem.prototype.OnMouseEnter = function (e) {
	System.Windows.Controls.Control.prototype.OnMouseEnter.call(this, e);
	this.IsMouseOver = true;
	this.ChangeVisualState$0();
};
System.Windows.Controls.ListBoxItem.prototype.OnMouseLeave = function (e) {
	System.Windows.Controls.Control.prototype.OnMouseLeave.call(this, e);
	this.IsMouseOver = false;
	this.ChangeVisualState$0();
};
System.Windows.Controls.ListBoxItem.prototype.OnIsEnabledChanged = function (e) {
	System.Windows.Controls.Control.prototype.OnIsEnabledChanged.call(this, e);
	this.IsMouseOver = false;
	this.ChangeVisualState$0();
};
System.Windows.Controls.ListBoxItem.prototype.OnGotFocus = function (e) {
	System.Windows.Controls.Control.prototype.OnGotFocus.call(this, e);
	var flag = this.HasFocus();
	this.FocusChanged(flag);
	if (!(!flag || 
			!System.Object.ReferenceEquals(this, e.OriginalSource) || (this._parentSelector === null))) {
		this._parentSelector.ItemFocused(this);
	}
};
System.Windows.Controls.ListBoxItem.prototype.OnLostFocus = function (e) {
	System.Windows.Controls.Control.prototype.OnLostFocus.call(this, e);
	this.FocusChanged(this.HasFocus());
};
System.Windows.Controls.ListBoxItem.prototype.FocusChanged = function (haveFocus) {
	this.IsFocused = haveFocus;
	this.ChangeVisualState$0();
};
System.Windows.Controls.ListBoxItem.prototype.OnIsSelectedChanged = function (oldValue, newValue) {
	if (this._parentSelector !== null) {
		this._parentSelector.NotifyListItemSelected(this, newValue);
	}
	this.ChangeVisualState$0();
};
System.Windows.Controls.ListBoxItem.prototype.OnCreateAutomationPeer = function () {
	var selectorAutomationPeer = null;
	if (this._parentSelector !== null) {
		selectorAutomationPeer = JSIL.TryCast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.CreatePeerForElement(this._parentSelector), System.Windows.Automation.Peers.SelectorAutomationPeer);
	}
	return JSIL.New(System.Windows.Automation.Peers.ListBoxItemAutomationPeer, "_ctor$1", [this, selectorAutomationPeer]);
};
System.Windows.Controls.ListBoxItem.prototype.IsParentSelectionActive = function () {
	return ((this._parentSelector !== null) && System.Windows.Controls.Primitives.Selector.GetIsSelectionActive(this._parentSelector));
};
System.Windows.Controls.ListBoxItem.prototype.ChangeVisualState$0 = function () {
	this.ChangeVisualState$1(true);
};
System.Windows.Controls.ListBoxItem.prototype.ChangeVisualState$1 = function (useTransitions) {
	if (this._parentSelector === null) {
		return;
	}
	if (!System.Windows.Controls.Control.prototype.get_IsEnabled.call(this)) {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, JSIL.TryCast(System.Windows.Controls.ContentControl.prototype.get_Content.call(this), System.Windows.Controls.Control) ? "Normal" : "Disabled");
	} else if (this.IsMouseOver) {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "MouseOver");
	} else {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "Normal");
	}
	if (this.IsSelected) {
		if (this.IsParentSelectionActive()) {
			System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "Selected");
		} else if (!System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "SelectedUnfocused")) {
			System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "Selected");
		}
	} else {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "Unselected");
	}
	if (this.IsFocused) {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "Focused");
		return;
	}
	System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "Unfocused");
};
System.Windows.Controls.ListBoxItem.prototype.get_IsStyleSetFromItemsControl = function () {
	return this.IsStyleSetFromItemsControl$value;
};
System.Windows.Controls.ListBoxItem.prototype.set_IsStyleSetFromItemsControl = function (value) {
	this.IsStyleSetFromItemsControl$value = value;
};
System.Windows.Controls.ListBoxItem.prototype.OnPropertyChanged = function (dp) {
	if (dp === System.Windows.FrameworkElement.StyleProperty) {
		this.IsStyleSetFromItemsControl = false;
	}
	System.Windows.FrameworkElement.prototype.OnPropertyChanged.call(this, dp);
};
JSIL.OverloadedMethod(System.Windows.Controls.ListBoxItem.prototype, "ChangeVisualState", [
		["ChangeVisualState$0", []], 
		["ChangeVisualState$1", [System.Boolean]]
	]);
JSIL.MakeProperty(System.Windows.Controls.ListBoxItem.prototype, "IsSelected", 
	System.Windows.Controls.ListBoxItem.prototype.get_IsSelected, System.Windows.Controls.ListBoxItem.prototype.set_IsSelected);
JSIL.MakeProperty(System.Windows.Controls.ListBoxItem.prototype, "IsMouseOver", 
	System.Windows.Controls.ListBoxItem.prototype.get_IsMouseOver, System.Windows.Controls.ListBoxItem.prototype.set_IsMouseOver);
JSIL.MakeProperty(System.Windows.Controls.ListBoxItem.prototype, "IsFocused", 
	System.Windows.Controls.ListBoxItem.prototype.get_IsFocused, System.Windows.Controls.ListBoxItem.prototype.set_IsFocused);
JSIL.MakeProperty(System.Windows.Controls.ListBoxItem.prototype, "Item", 
	System.Windows.Controls.ListBoxItem.prototype.get_Item, System.Windows.Controls.ListBoxItem.prototype.set_Item);
JSIL.MakeProperty(System.Windows.Controls.ListBoxItem.prototype, "IsStyleSetFromItemsControl", 
	System.Windows.Controls.ListBoxItem.prototype.get_IsStyleSetFromItemsControl, System.Windows.Controls.ListBoxItem.prototype.set_IsStyleSetFromItemsControl);
System.Windows.Controls.ListBoxItem.IsSelectedProperty = null;
System.Windows.Controls.ListBoxItem.prototype._parentSelector = null;
System.Windows.Controls.ListBoxItem.prototype.IsMouseOver$value = false;
System.Windows.Controls.ListBoxItem.prototype.IsFocused$value = false;
System.Windows.Controls.ListBoxItem.prototype.Item$value = null;
System.Windows.Controls.ListBoxItem.prototype.IsStyleSetFromItemsControl$value = false;
System.Windows.Controls.ListBoxItem._cctor = function () {
	System.Windows.Controls.ListBoxItem.IsSelectedProperty = System.Windows.Controls.Primitives.Selector.IsSelectedProperty.AddOwner(System.Windows.Controls.ListBoxItem);
};

System.Windows.Controls.ComboBoxItem.prototype.OnMouseLeftButtonUp = function (e) {
	if (e === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["e"]);
	}
	if (e.Handled) {
		return;
	}
	System.Windows.Controls.Control.prototype.OnMouseLeftButtonUp.call(this, e);
	e.Handled = true;
	var comboBox = JSIL.TryCast(this._parentSelector, System.Windows.Controls.ComboBox);
	if (comboBox !== null) {
		comboBox.IsDropDownOpen = false;
	}
};
System.Windows.Controls.ComboBoxItem.prototype._ctor = function () {
	System.Windows.Controls.ListBoxItem.prototype._ctor.call(this);
};

$asm02.System.Windows.Controls.DisplayMemberValueConverter.prototype.Convert = function (value, targetType, parameter, culture) {
	if (value === null) {
		return "";
	}
	return value.toString();
};
$asm02.System.Windows.Controls.DisplayMemberValueConverter.prototype.ConvertBack = function (value, targetType, parameter, culture) {
	throw JSIL.New(System.NotImplementedException, "_ctor$0", []);
};
$asm02.System.Windows.Controls.DisplayMemberValueConverter.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};

System.Windows.Controls.HyperlinkButton.prototype.get_NavigateUri = function () {
	return JSIL.TryCast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.HyperlinkButton.NavigateUriProperty), System.Uri);
};
System.Windows.Controls.HyperlinkButton.prototype.set_NavigateUri = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.HyperlinkButton.NavigateUriProperty, value);
};
System.Windows.Controls.HyperlinkButton.prototype.get_TargetName = function () {
	return JSIL.TryCast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.HyperlinkButton.TargetNameProperty), System.String);
};
System.Windows.Controls.HyperlinkButton.prototype.set_TargetName = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.HyperlinkButton.TargetNameProperty, value);
};
System.Windows.Controls.HyperlinkButton.prototype._ctor = function () {
	System.Windows.Controls.Primitives.ButtonBase.prototype._ctor.call(this);
	System.Windows.Controls.Control.prototype.set_DefaultStyleKey.call(this, System.Windows.Controls.HyperlinkButton);
};
System.Windows.Controls.HyperlinkButton.prototype.OnApplyTemplate = function () {
	System.Windows.FrameworkElement.prototype.OnApplyTemplate.call(this);
	System.Windows.Controls.Primitives.ButtonBase.prototype.UpdateVisualState$1.call(this, false);
};
System.Windows.Controls.HyperlinkButton.prototype.ChangeVisualState = function (useTransitions) {
	if (!System.Windows.Controls.Control.prototype.get_IsEnabled.call(this)) {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "Disabled");
	} else if (System.Windows.Controls.Primitives.ButtonBase.prototype.get_IsPressed.call(this)) {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "Pressed");
	} else if (System.Windows.Controls.Primitives.ButtonBase.prototype.get_IsMouseOver.call(this)) {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "MouseOver");
	} else {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "Normal");
	}
	if (!(!System.Windows.Controls.Primitives.ButtonBase.prototype.get_IsFocused.call(this) || !System.Windows.Controls.Control.prototype.get_IsEnabled.call(this))) {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "Focused");
		return;
	}
	System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "Unfocused");
};
System.Windows.Controls.HyperlinkButton.prototype.OnClick = function () {
	if (System.Windows.Automation.Peers.AutomationPeer.ListenerExists(System.Windows.Automation.Peers.AutomationEvents.InvokePatternOnInvoked)) {
		var orCreateAutomationPeer = System.Windows.UIElement.prototype.GetOrCreateAutomationPeer.call(this);
		if (orCreateAutomationPeer !== null) {
			orCreateAutomationPeer.RaiseAutomationEvent(System.Windows.Automation.Peers.AutomationEvents.InvokePatternOnInvoked);
		}
	}
	System.Windows.Controls.Primitives.ButtonBase.prototype.OnClick.call(this);
	if (!(!System.Uri.op_Inequality(this.NavigateUri, null) || System.ComponentModel.DesignerProperties.GetIsInDesignMode(this))) {
		var navigationHelper = new $asm02.MS.Internal.NavigationHelper(this, this.TargetName, this.NavigateUri);
		navigationHelper.Navigate(this.ShouldVerifyThisIsUserInitiatedAction());
	}
};
System.Windows.Controls.HyperlinkButton.prototype.ShouldVerifyThisIsUserInitiatedAction = function () {
	var hyperlinkButtonAutomationPeer = JSIL.TryCast(System.Windows.UIElement.prototype.GetAutomationPeer.call(this), System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer);
	return ((hyperlinkButtonAutomationPeer === null) || !hyperlinkButtonAutomationPeer.InUIAutomationInvoke);
};
System.Windows.Controls.HyperlinkButton.prototype.OnCreateAutomationPeer = function () {
	return new System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer(this);
};
JSIL.MakeProperty(System.Windows.Controls.HyperlinkButton.prototype, "NavigateUri", 
	System.Windows.Controls.HyperlinkButton.prototype.get_NavigateUri, System.Windows.Controls.HyperlinkButton.prototype.set_NavigateUri);
JSIL.MakeProperty(System.Windows.Controls.HyperlinkButton.prototype, "TargetName", 
	System.Windows.Controls.HyperlinkButton.prototype.get_TargetName, System.Windows.Controls.HyperlinkButton.prototype.set_TargetName);
System.Windows.Controls.HyperlinkButton.NavigateUriProperty = null;
System.Windows.Controls.HyperlinkButton.TargetNameProperty = null;
System.Windows.Controls.HyperlinkButton._cctor = function () {
	System.Windows.Controls.HyperlinkButton.NavigateUriProperty = System.Windows.DependencyProperty.Register$0("NavigateUri", System.Uri, System.Windows.Controls.HyperlinkButton, null);
	System.Windows.Controls.HyperlinkButton.TargetNameProperty = System.Windows.DependencyProperty.Register$0("TargetName", System.String, System.Windows.Controls.HyperlinkButton, null);
};

System.Windows.Controls.ItemContainerGenerator.prototype._ctor = function (host) {
	this._recyclableContainers = JSIL.New(System.Collections.Generic.Queue$b1.Of(System.Windows.DependencyObject), "_ctor$0", []);
	System.Object.prototype._ctor.call(this);
	this._host = host;
	this._peer = JSIL.TryCast(host, System.Windows.DependencyObject);
	this._items = host.IGeneratorHost_View;
	this._unloadingCorrections = JSIL.New(System.Collections.Generic.LinkedList$b1.Of(System.Int32), "_ctor$0", []);
	this._awaitingLoadIndices = JSIL.New(System.Collections.Generic.LinkedList$b1.Of(System.Int32), "_ctor$0", []);
	this.isAllowedToShowAnimations = true;
	this._collectionChangedListener = $asm02.System.Windows.Controls.WeakCollectionChangedListener.CreateIfNecessary(this._items, this);
	this.OnRefresh();
};
System.Windows.Controls.ItemContainerGenerator.prototype.IItemContainerGenerator_GetItemContainerGeneratorForPanel = function (panel) {
	if (panel === null) {
		return null;
	}
	if (!panel.IsItemsHost) {
		throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm02.System.Windows.Resx.GetString$2("ItemContainerGenerator_PanelIsNotItemsHost"), "panel"]);
	}
	if (panel.TemplatedParent !== null) {
		return this;
	}
	return null;
};
System.Windows.Controls.ItemContainerGenerator.prototype.IItemContainerGenerator_StartAt = function (position, direction, allowStartAtRealizedItem) {
	if (this._generator !== null) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("ItemContainerGenerator_GenerationInProgress")]);
	}
	this._generator = new $asm02.System.Windows.Controls.ItemContainerGenerator.Generator(this, position, direction, allowStartAtRealizedItem);
	return this._generator;
};
System.Windows.Controls.ItemContainerGenerator.prototype.IItemContainerGenerator_GenerateNext = function (/* ref */ isNewlyRealized) {
	if (this._generator === null) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("ItemContainerGenerator_GenerationNotInProgress")]);
	}
	return this._generator.GenerateNext(false, /* ref */ isNewlyRealized);
};
System.Windows.Controls.ItemContainerGenerator.prototype.IItemContainerGenerator_PrepareItemContainer = function (container) {
	var item = container.ReadLocalValue(System.Windows.Controls.ItemContainerGenerator.ItemForItemContainerProperty);
	this.Host.IGeneratorHost_PrepareItemContainer(container, item);
	if (!(!$asm02.MS.Internal.QuirksMode.ShouldUseLoadedStatesInItemsControl() || this.Host.IGeneratorHost_IsItemItsOwnContainer(item))) {
		var layoutStatesManager = new $asm02.System.Windows.Controls.ItemContainerGenerator.LayoutStatesManager(container);
		var num = this.IndexFromContainer$1(container, false);
		this._startIndexForUIFromItem = this._startIndexForUIFromItem;
		layoutStatesManager.ShouldGoStraightToLoaded = (!this.isAllowedToShowAnimations || 
			!this._awaitingLoadIndices.Contains(num));
		this.ClearItemFromNewItemsList(num);
		container.SetValue(System.Windows.Controls.ItemContainerGenerator.LayoutStateManagerProperty, layoutStatesManager);
		layoutStatesManager.Load();
	}
};
System.Windows.Controls.ItemContainerGenerator.prototype.IItemContainerGenerator_Remove = function (position, count) {
	this.Remove(position, count, false);
};
System.Windows.Controls.ItemContainerGenerator.prototype.Remove = function (position, count, isRecycling) {
	if (position.Offset !== 0) {
		throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm02.System.Windows.Resx.GetString$0("ItemContainerGenerator_RemoveRequiresOffsetZero", [position.Index, position.Offset]), "position"]);
	}
	if (count <= 0) {
		throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm02.System.Windows.Resx.GetString$0("ItemContainerGenerator_RemoveRequiresPositiveCount", [count]), "count"]);
	}
	var index = position.Index;
	var num = index;
__loop0__: 
	for (var itemBlock = this._itemMap.Next; !((itemBlock === this._itemMap) || (num < itemBlock.ContainerCount)); itemBlock = itemBlock.Next) {
		num -= itemBlock.ContainerCount;
	}
	var realizedItemBlock = JSIL.TryCast(itemBlock, $asm02.System.Windows.Controls.ItemContainerGenerator.RealizedItemBlock);
	var num2 = ((num + count) - 1);
__loop1__: 
	while (itemBlock !== this._itemMap) {
		if (JSIL.TryCast(itemBlock, $asm02.System.Windows.Controls.ItemContainerGenerator.RealizedItemBlock) === null) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("ItemContainerGenerator_CannotRemoveUnrealizedItems", [index, count])]);
		}
		if (num2 < itemBlock.ContainerCount) {
			break __loop1__;
		}
		num2 -= itemBlock.ContainerCount;
		itemBlock = itemBlock.Next;
	}
	var realizedItemBlock2 = JSIL.TryCast(itemBlock, $asm02.System.Windows.Controls.ItemContainerGenerator.RealizedItemBlock);
	var realizedItemBlock3 = realizedItemBlock;
__loop2__: 
	for (var num3 = num; (realizedItemBlock3 !== realizedItemBlock2) || (num3 <= num2); ) {
		var dependencyObject = realizedItemBlock3.ContainerAt(num3);
		this.UnlinkContainerFromItem(dependencyObject, realizedItemBlock3.ItemAt(num3), isRecycling);
		if (isRecycling) {
			if (this._containerType === null) {
				this._containerType = (JSIL.GetType(dependencyObject));
			} else if (this._containerType !== (JSIL.GetType(dependencyObject))) {
				throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("ItemContainerGenerator_CannotRecyleHeterogeneousTypes")]);
			}
			this._recyclableContainers.Enqueue(dependencyObject);
		}
		if (!((++num3 < realizedItemBlock3.ContainerCount) || (realizedItemBlock3 === realizedItemBlock2))) {
			realizedItemBlock3 = JSIL.TryCast(realizedItemBlock3.Next, $asm02.System.Windows.Controls.ItemContainerGenerator.RealizedItemBlock);
			num3 = 0;
		}
	}
	var flag = (num === 0);
	var flag2 = (num2 === (realizedItemBlock2.ItemCount - 1));
	var flag3 = (flag && 
		JSIL.CheckType(realizedItemBlock.Prev, $asm02.System.Windows.Controls.ItemContainerGenerator.UnrealizedItemBlock));
	var flag4 = (flag2 && 
		JSIL.CheckType(realizedItemBlock2.Next, $asm02.System.Windows.Controls.ItemContainerGenerator.UnrealizedItemBlock));
	var itemBlock2 = null;
	if (flag3) {
		var unrealizedItemBlock = JSIL.Cast(realizedItemBlock.Prev, $asm02.System.Windows.Controls.ItemContainerGenerator.UnrealizedItemBlock);
		var num4 = unrealizedItemBlock.ItemCount;
		var num5 = -unrealizedItemBlock.ItemCount;
	} else if (flag4) {
		unrealizedItemBlock = JSIL.Cast(realizedItemBlock2.Next, $asm02.System.Windows.Controls.ItemContainerGenerator.UnrealizedItemBlock);
		num4 = 0;
		num5 = num;
	} else {
		unrealizedItemBlock = new $asm02.System.Windows.Controls.ItemContainerGenerator.UnrealizedItemBlock();
		num4 = 0;
		num5 = num;
		itemBlock2 = flag ? realizedItemBlock.Prev : realizedItemBlock;
	}
__loop3__: 
	for (itemBlock = realizedItemBlock; itemBlock !== realizedItemBlock2; itemBlock = itemBlock.Next) {
		var itemCount = itemBlock.ItemCount;
		this.MoveItems(
			itemBlock, 
			num, 
			(itemCount - num), 
			unrealizedItemBlock, 
			num4, 
			num5
		);
		num4 += (itemCount - num);
		num = 0;
		num5 -= itemCount;
		if (itemBlock.ItemCount === 0) {
			itemBlock.Remove();
		}
	}
	var count2 = ((itemBlock.ItemCount - 1) - num2);
	this.MoveItems(
		itemBlock, 
		num, 
		((num2 - num) + 1), 
		unrealizedItemBlock, 
		num4, 
		num5
	);
	var realizedItemBlock4 = realizedItemBlock2;
	if (!flag2) {
		if (!((realizedItemBlock !== realizedItemBlock2) || flag)) {
			realizedItemBlock4 = new $asm02.System.Windows.Controls.ItemContainerGenerator.RealizedItemBlock();
		}
		this.MoveItems(
			itemBlock, 
			(num2 + 1), 
			count2, 
			realizedItemBlock4, 
			0, 
			(num2 + 1)
		);
	}
	if (itemBlock2 !== null) {
		unrealizedItemBlock.InsertAfter(itemBlock2);
	}
	if (realizedItemBlock4 !== realizedItemBlock2) {
		realizedItemBlock4.InsertAfter(unrealizedItemBlock);
	}
	this.RemoveAndCoalesceBlocksIfNeeded(itemBlock);
};
System.Windows.Controls.ItemContainerGenerator.prototype.RemoveAll = function () {
	this.IItemContainerGenerator_RemoveAll();
	this._unloadingCorrections.Clear();
	this._awaitingLoadIndices.Clear();
};
System.Windows.Controls.ItemContainerGenerator.prototype.IItemContainerGenerator_RemoveAll = function () {
	var itemMap = this._itemMap;
	this._itemMap = null;
	try {
		if (itemMap !== null) {
		__loop0__: 
			for (var next = itemMap.Next; next !== itemMap; next = next.Next) {
				var realizedItemBlock = JSIL.TryCast(next, $asm02.System.Windows.Controls.ItemContainerGenerator.RealizedItemBlock);
				if (realizedItemBlock !== null) {
				__loop1__: 
					for (var i = 0; i < realizedItemBlock.ContainerCount; ++i) {
						this.UnlinkContainerFromItem(realizedItemBlock.ContainerAt(i), realizedItemBlock.ItemAt(i), false);
					}
				}
			}
		}
	} finally {
		this._itemMap = new $asm02.System.Windows.Controls.ItemContainerGenerator.ItemBlock();
		this._itemMap.Prev = (this._itemMap.Next = this._itemMap);
		var unrealizedItemBlock = new $asm02.System.Windows.Controls.ItemContainerGenerator.UnrealizedItemBlock();
		unrealizedItemBlock.InsertAfter(this._itemMap);
		unrealizedItemBlock.ItemCount = this.Items.ICollection_Count;
		this._recyclableContainers = JSIL.New(System.Collections.Generic.Queue$b1.Of(System.Windows.DependencyObject), "_ctor$0", []);
		if (this.MapChanged !== null) {
			this.MapChanged(
				null, 
				-1, 
				0, 
				unrealizedItemBlock, 
				0, 
				0
			);
		}
	}
};
System.Windows.Controls.ItemContainerGenerator.prototype.IRecyclingItemContainerGenerator_Recycle = function (position, count) {
	this.Remove(position, count, true);
};
System.Windows.Controls.ItemContainerGenerator.prototype.GeneratorPositionFromIndex = function (itemIndex) {
	itemIndex = this.TranslateExternalIndexToInternalIndex(itemIndex);
	return this.GeneratorPositionFromInternalIndex(itemIndex);
};
System.Windows.Controls.ItemContainerGenerator.prototype.GeneratorPositionFromInternalIndex = function (itemIndex) {
	var result = new JSIL.Variable(new System.Windows.Controls.Primitives.GeneratorPosition()), itemBlock = new JSIL.Variable(null), num = new JSIL.Variable(0);
	this.GetBlockAndPosition$1(itemIndex, /* ref */ result, /* ref */ itemBlock, /* ref */ num);
	if (!((itemBlock.value !== this._itemMap) || (result.value.Index !== -1))) {
		++result.value.Offset;
	}
	return result.value;
};
System.Windows.Controls.ItemContainerGenerator.prototype.IndexFromGeneratorPosition$0 = function (position) {
	return this.IndexFromGeneratorPosition$1(position, true);
};
System.Windows.Controls.ItemContainerGenerator.prototype.IndexFromGeneratorPosition$1 = function (position, translateForItemsControl) {
	var num = position.Index;
	if (num !== -1) {
		if (this._itemMap !== null) {
			var num2 = 0;
		__loop0__: 
			for (var next = this._itemMap.Next; next !== this._itemMap; ) {
				if (num < next.ContainerCount) {
					if (translateForItemsControl) {
						return this.TranslateInternalIndexToExternalIndex(((num2 + num) + position.Offset));
					}
					return ((num2 + num) + position.Offset);
				} else {
					num2 += next.ItemCount;
					num -= next.ContainerCount;
					next = next.Next;
				}
			}
		}
		return -1;
	}
	if (position.Offset >= 0) {
		return (position.Offset - 1);
	}
	if (translateForItemsControl) {
		return this.TranslateInternalIndexToExternalIndex((this.Items.ICollection_Count + position.Offset));
	}
	return (this.Items.ICollection_Count + position.Offset);
};
System.Windows.Controls.ItemContainerGenerator.prototype.ItemFromContainer = function (container) {
	if (container === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["container"]);
	}
	var obj = container.ReadLocalValue(System.Windows.Controls.ItemContainerGenerator.ItemForItemContainerProperty);
	if (!((obj === System.Windows.DependencyProperty.UnsetValue) || this.Host.IGeneratorHost_IsHostForItemContainer(container))) {
		obj = System.Windows.DependencyProperty.UnsetValue;
	}
	return obj;
};
System.Windows.Controls.ItemContainerGenerator.prototype.ContainerFromItem = function ($item) {
	var item = new JSIL.Variable($item);
	var num = new JSIL.Variable(0);
	var result = new JSIL.Variable(null);
	this.DoLinearSearch(/* ref */ result, /* ref */ item, /* ref */ num);
	return result.value;
};
System.Windows.Controls.ItemContainerGenerator.prototype.IndexFromContainer$0 = function (container) {
	return this.IndexFromContainer$1(container, true);
};
System.Windows.Controls.ItemContainerGenerator.prototype.IndexFromContainer$1 = function ($container, translateForItemsControl) {
	var container = new JSIL.Variable($container);
	var num = new JSIL.Variable(0);
	if (container.value === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["container"]);
	}
	var obj = new JSIL.Variable(null);
	this.DoLinearSearch(/* ref */ container, /* ref */ obj, /* ref */ num);
	if (!translateForItemsControl) {
		return num.value;
	}
	return this.TranslateInternalIndexToExternalIndex(num.value);
};
System.Windows.Controls.ItemContainerGenerator.prototype.DoLinearSearch = function (/* ref */ container, /* ref */ item, /* ref */ itemIndex) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				itemIndex.value = 0;
				if (this._itemMap === null) {
					return false;
				}
				var itemBlock = this._itemMap.Next;
				var num = 0;
			__loop0__: 
				while ((num <= this._startIndexForUIFromItem) && (itemBlock !== this._itemMap)) {
					num += itemBlock.ItemCount;
					itemBlock = itemBlock.Next;
				}
				itemBlock = itemBlock.Prev;
				num -= itemBlock.ItemCount;
				var realizedItemBlock = JSIL.TryCast(itemBlock, $asm02.System.Windows.Controls.ItemContainerGenerator.RealizedItemBlock);
				if (realizedItemBlock !== null) {
					var num2 = (this._startIndexForUIFromItem - num);
					if (num2 >= realizedItemBlock.ItemCount) {
						num2 = 0;
					}
				} else {
					num2 = 0;
				}
				var itemBlock2 = itemBlock;
				var i = num2;
				var num3 = itemBlock.ItemCount;
			__loop1__: 
				while (true) {
					if (realizedItemBlock !== null) {
					__loop2__: 
						for (; i < num3; ++i) {
							var flag = false;
							if (container.value !== null) {
								if (realizedItemBlock.ContainerAt(i) === container.value) {
									flag = true;
									item.value = realizedItemBlock.ItemAt(i);
								}
							} else if (System.Object.Equals(item.value, realizedItemBlock.ItemAt(i))) {
								flag = true;
								container.value = realizedItemBlock.ContainerAt(i);
							}
							if (flag) {
								__label0__ = "Block_9";
								continue __step0__;
							}
						}
						if (!((itemBlock2 !== itemBlock) || (i !== num2))) {
							__label0__ = "Block_12";
							continue __step0__;
						}
					}
					num += itemBlock2.ItemCount;
					i = 0;
					itemBlock2 = itemBlock2.Next;
					if (itemBlock2 === this._itemMap) {
						itemBlock2 = itemBlock2.Next;
						num = 0;
					}
					num3 = itemBlock2.ItemCount;
					realizedItemBlock = JSIL.TryCast(itemBlock2, $asm02.System.Windows.Controls.ItemContainerGenerator.RealizedItemBlock);
					if (itemBlock2 === itemBlock) {
						if (realizedItemBlock === null) {
							__label0__ = "IL_158";
							continue __step0__;
						}
						num3 = num2;
					}
				}
				__label0__ = "Block_9";
				continue __step0__;
				break;
			case "Block_9":
				this._startIndexForUIFromItem = (num + i);
				itemIndex.value += (this.GetRealizedItemBlockCount(realizedItemBlock, i) + this.GetCount$1(itemBlock2));
				return true;
				__label0__ = "Block_12";
				continue __step0__;
				break;
			case "Block_12":
				itemIndex.value = -1;
				return false;
				__label0__ = "IL_158";
				continue __step0__;
				break;
			case "IL_158":
				itemIndex.value = -1;
				return false;
				break __step0__;
		}
	}
};
System.Windows.Controls.ItemContainerGenerator.prototype.GetCount$0 = function () {
	return this.GetCount$1(this._itemMap);
};
System.Windows.Controls.ItemContainerGenerator.prototype.GetCount$1 = function (stop) {
	var num = 0;
__loop0__: 
	for (var next = this._itemMap.Next; next !== stop; next = next.Next) {
		var realizedItemBlock = JSIL.TryCast(next, $asm02.System.Windows.Controls.ItemContainerGenerator.RealizedItemBlock);
		if (realizedItemBlock !== null) {
			num += this.GetRealizedItemBlockCount(realizedItemBlock, realizedItemBlock.ItemCount);
		} else {
			num += next.ItemCount;
		}
	}
	return num;
};
System.Windows.Controls.ItemContainerGenerator.prototype.GetRealizedItemBlockCount = function (rib, end) {
	return end;
};
System.Windows.Controls.ItemContainerGenerator.prototype.ContainerFromIndex$0 = function (index) {
	return this.ContainerFromIndex$1(index, true);
};
System.Windows.Controls.ItemContainerGenerator.prototype.ContainerFromIndex$1 = function (index, translateForItemsControl) {
	if (translateForItemsControl) {
		index = this.TranslateExternalIndexToInternalIndex(index);
	}
	if (index !== -1) {
	__loop0__: 
		for (var next = this._itemMap.Next; next !== this._itemMap; next = next.Next) {
			if (index < next.ItemCount) {
				return next.ContainerAt(index);
			}
			index -= next.ItemCount;
		}
	}
	return null;
};
System.Windows.Controls.ItemContainerGenerator.prototype.add_ItemsChanged = function (value) {
	this.ItemsChanged = System.Delegate.Combine(this.ItemsChanged, value);
};
System.Windows.Controls.ItemContainerGenerator.prototype.remove_ItemsChanged = function (value) {
	this.ItemsChanged = System.Delegate.Remove(this.ItemsChanged, value);
};
System.Windows.Controls.ItemContainerGenerator.prototype.INotifyItemsChanged_add_ItemsChanged = function (value) {
	this.ItemsChanged = System.Delegate.Combine(this.ItemsChanged, value);
};
System.Windows.Controls.ItemContainerGenerator.prototype.INotifyItemsChanged_remove_ItemsChanged = function (value) {
	this.ItemsChanged = System.Delegate.Remove(this.ItemsChanged, value);
};
System.Windows.Controls.ItemContainerGenerator.prototype.Refresh = function () {
	this.OnRefresh();
};
System.Windows.Controls.ItemContainerGenerator.prototype.Release = function () {
	this.RemoveAll();
};
System.Windows.Controls.ItemContainerGenerator.prototype.get_Items = function () {
	return this._items;
};
System.Windows.Controls.ItemContainerGenerator.prototype.set_Items = function (value) {
	if (this._items !== value) {
		if (this._collectionChangedListener !== null) {
			this._collectionChangedListener.Disconnect();
			this._collectionChangedListener = null;
		}
		this._items = value;
		this._collectionChangedListener = $asm02.System.Windows.Controls.WeakCollectionChangedListener.CreateIfNecessary(this._items, this);
	}
};
System.Windows.Controls.ItemContainerGenerator.prototype.add_PanelChanged = function (value) {
	this.PanelChanged = System.Delegate.Combine(this.PanelChanged, value);
};
System.Windows.Controls.ItemContainerGenerator.prototype.remove_PanelChanged = function (value) {
	this.PanelChanged = System.Delegate.Remove(this.PanelChanged, value);
};
System.Windows.Controls.ItemContainerGenerator.prototype.OnPanelChanged = function () {
	if (this.PanelChanged !== null) {
		this.PanelChanged(this, System.EventArgs.Empty);
	}
};
System.Windows.Controls.ItemContainerGenerator.prototype.get_Host = function () {
	return this._host;
};
System.Windows.Controls.ItemContainerGenerator.prototype.get_Peer = function () {
	return this._peer;
};
System.Windows.Controls.ItemContainerGenerator.prototype.MoveToPosition = function (position, direction, allowStartAtRealizedItem, /* ref */ state) {
	var itemBlock = this._itemMap;
	var num = 0;
	if (position.Index !== -1) {
		var num2 = 0;
		var i = position.Index;
	__loop0__: 
		for (itemBlock = itemBlock.Next; i >= itemBlock.ContainerCount; itemBlock = itemBlock.Next) {
			num2 += itemBlock.ItemCount;
			i -= itemBlock.ContainerCount;
			num += itemBlock.ItemCount;
		}
		state.value.Block = itemBlock;
		state.value.Offset = i;
		state.value.Count = num2;
		state.value.ItemIndex = (num + i);
	} else {
		state.value.Block = itemBlock;
		state.value.Offset = 0;
		state.value.Count = 0;
		state.value.ItemIndex = (num - 1);
	}
	var num3 = position.Offset;
	if (!((num3 !== 0) || (allowStartAtRealizedItem && 
				(state.value.Block !== this._itemMap)))) {
		num3 = !JSIL.Cast(direction, System.Boolean) ? 1 : -1;
	}
	if (num3 > 0) {
		state.value.Block.MoveForward(/* ref */ state, true);
	__loop1__: 
		while (--num3 > 0) {
			state.value.Block.MoveForward(/* ref */ state, allowStartAtRealizedItem);
		}
		return;
	}
	if (num3 < 0) {
		if (state.value.Block === this._itemMap) {
			state.value.ItemIndex = (state.value.Count = this.Items.ICollection_Count);
		}
		state.value.Block.MoveBackward(/* ref */ state, true);
	__loop2__: 
		while (++num3 < 0) {
			state.value.Block.MoveBackward(/* ref */ state, allowStartAtRealizedItem);
		}
	}
};
System.Windows.Controls.ItemContainerGenerator.prototype.Realize = function (block, offset, item, container) {
	var realizedItemBlock = null, realizedItemBlock3 = null;
	if (!((offset !== 0) || 
			((realizedItemBlock = JSIL.TryCast(block.Prev, $asm02.System.Windows.Controls.ItemContainerGenerator.RealizedItemBlock)) === null) || (realizedItemBlock.ItemCount >= 16))) {
		var realizedItemBlock2 = realizedItemBlock;
		var num = realizedItemBlock.ItemCount;
		this.MoveItems(
			block, 
			offset, 
			1, 
			realizedItemBlock2, 
			num, 
			-realizedItemBlock.ItemCount
		);
		this.MoveItems(
			block, 
			1, 
			block.ItemCount, 
			block, 
			0, 
			1
		);
	} else if (!((offset !== (block.ItemCount - 1)) || 
			((realizedItemBlock3 = JSIL.TryCast(block.Next, $asm02.System.Windows.Controls.ItemContainerGenerator.RealizedItemBlock)) === null) || (realizedItemBlock3.ItemCount >= 16))) {
		realizedItemBlock2 = realizedItemBlock3;
		num = 0;
		this.MoveItems(
			realizedItemBlock2, 
			0, 
			realizedItemBlock2.ItemCount, 
			realizedItemBlock2, 
			1, 
			-1
		);
		this.MoveItems(
			block, 
			offset, 
			1, 
			realizedItemBlock2, 
			num, 
			offset
		);
	} else {
		realizedItemBlock2 = new $asm02.System.Windows.Controls.ItemContainerGenerator.RealizedItemBlock();
		num = 0;
		if (offset === 0) {
			realizedItemBlock2.InsertBefore(block);
			this.MoveItems(
				block, 
				offset, 
				1, 
				realizedItemBlock2, 
				num, 
				0
			);
			this.MoveItems(
				block, 
				1, 
				block.ItemCount, 
				block, 
				0, 
				1
			);
		} else if (offset === (block.ItemCount - 1)) {
			realizedItemBlock2.InsertAfter(block);
			this.MoveItems(
				block, 
				offset, 
				1, 
				realizedItemBlock2, 
				num, 
				offset
			);
		} else {
			var unrealizedItemBlock = new $asm02.System.Windows.Controls.ItemContainerGenerator.UnrealizedItemBlock();
			unrealizedItemBlock.InsertAfter(block);
			realizedItemBlock2.InsertAfter(block);
			this.MoveItems(
				block, 
				(offset + 1), 
				((block.ItemCount - offset) - 1), 
				unrealizedItemBlock, 
				0, 
				(offset + 1)
			);
			this.MoveItems(
				block, 
				offset, 
				1, 
				realizedItemBlock2, 
				0, 
				offset
			);
		}
	}
	this.RemoveAndCoalesceBlocksIfNeeded(block);
	realizedItemBlock2.RealizeItem(num, item, container);
};
System.Windows.Controls.ItemContainerGenerator.prototype.RemoveAndCoalesceBlocksIfNeeded = function (block) {
	if (!((block === null) || 
			(block === this._itemMap) || (block.ItemCount !== 0))) {
		block.Remove();
		if (!((JSIL.TryCast(block.Prev, $asm02.System.Windows.Controls.ItemContainerGenerator.UnrealizedItemBlock) === null) || (JSIL.TryCast(block.Next, $asm02.System.Windows.Controls.ItemContainerGenerator.UnrealizedItemBlock) === null))) {
			this.MoveItems(
				block.Next, 
				0, 
				block.Next.ItemCount, 
				block.Prev, 
				block.Prev.ItemCount, 
				(-block.Prev.ItemCount - 1)
			);
			block.Next.Remove();
		}
	}
};
System.Windows.Controls.ItemContainerGenerator.prototype.MoveItems = function (block, offset, count, newBlock, newOffset, deltaCount) {
	var realizedItemBlock = JSIL.TryCast(block, $asm02.System.Windows.Controls.ItemContainerGenerator.RealizedItemBlock);
	var realizedItemBlock2 = JSIL.TryCast(newBlock, $asm02.System.Windows.Controls.ItemContainerGenerator.RealizedItemBlock);
	if (!((realizedItemBlock === null) || (realizedItemBlock2 === null))) {
		realizedItemBlock2.CopyEntries(realizedItemBlock, offset, count, newOffset);
	} else if (!((realizedItemBlock === null) || (realizedItemBlock.ItemCount <= count))) {
		realizedItemBlock.ClearEntries(offset, count);
	}
	block.ItemCount -= count;
	newBlock.ItemCount += count;
	if (this.MapChanged !== null) {
		this.MapChanged(
			block, 
			offset, 
			count, 
			newBlock, 
			newOffset, 
			deltaCount
		);
	}
};
System.Windows.Controls.ItemContainerGenerator.prototype.GetBlockAndPosition$0 = function (item, itemIndex, deletedFromItems, /* ref */ position, /* ref */ block, /* ref */ offsetFromBlockStart, /* ref */ correctIndex) {
	if (itemIndex >= 0) {
		this.GetBlockAndPosition$1(itemIndex, /* ref */ position, /* ref */ block, /* ref */ offsetFromBlockStart);
		correctIndex.value = itemIndex;
		return;
	}
	this.GetBlockAndPosition$2(
		item, 
		deletedFromItems, 
		/* ref */ position, 
		/* ref */ block, 
		/* ref */ offsetFromBlockStart, 
		/* ref */ correctIndex
	);
};
System.Windows.Controls.ItemContainerGenerator.prototype.GetBlockAndPosition$1 = function (itemIndex, /* ref */ position, /* ref */ block, /* ref */ offsetFromBlockStart) {
	position.value = new System.Windows.Controls.Primitives.GeneratorPosition(-1, 0);
	block.value = null;
	offsetFromBlockStart.value = itemIndex;
	if (!((this._itemMap !== null) && (itemIndex >= 0))) {
		return;
	}
	var num = 0;
__loop0__: 
	for (block.value = this._itemMap.Next; block.value !== this._itemMap; ) {
		if (offsetFromBlockStart.value >= block.value.ItemCount) {
			num += block.value.ContainerCount;
			offsetFromBlockStart.value -= block.value.ItemCount;
			block.value = block.value.Next;
		} else {
			if (block.value.ContainerCount > 0) {
				position.value = new System.Windows.Controls.Primitives.GeneratorPosition((num + offsetFromBlockStart.value), 0);
				return;
			}
			position.value = new System.Windows.Controls.Primitives.GeneratorPosition((num - 1), (offsetFromBlockStart.value + 1));
			return;
		}
	}
};
System.Windows.Controls.ItemContainerGenerator.prototype.GetBlockAndPosition$2 = function (item, deletedFromItems, /* ref */ position, /* ref */ block, /* ref */ offsetFromBlockStart, /* ref */ correctIndex) {
	correctIndex.value = 0;
	var num = 0;
	offsetFromBlockStart.value = 0;
	var num2 = deletedFromItems ? 1 : 0;
	position.value = new System.Windows.Controls.Primitives.GeneratorPosition(-1, 0);
__loop0__: 
	for (block.value = this._itemMap.Next; block.value !== this._itemMap; block.value = block.value.Next) {
		var realizedItemBlock = JSIL.TryCast(block.value, $asm02.System.Windows.Controls.ItemContainerGenerator.RealizedItemBlock);
		if (realizedItemBlock !== null) {
			offsetFromBlockStart.value = realizedItemBlock.OffsetOfItem(item);
			if (offsetFromBlockStart.value >= 0) {
				position.value = new System.Windows.Controls.Primitives.GeneratorPosition((num + offsetFromBlockStart.value), 0);
				correctIndex.value += offsetFromBlockStart.value;
				break __loop0__;
			}
		} else if (JSIL.TryCast(block.value, $asm02.System.Windows.Controls.ItemContainerGenerator.UnrealizedItemBlock) !== null) {
			var flag = false;
			realizedItemBlock = JSIL.TryCast(block.value.Next, $asm02.System.Windows.Controls.ItemContainerGenerator.RealizedItemBlock);
			if (!((realizedItemBlock === null) || (realizedItemBlock.ContainerCount <= 0))) {
				flag = System.Object.Equals(realizedItemBlock.ItemAt(0), this.Items.IList_get_Item(((correctIndex.value + block.value.ItemCount) - num2)));
			} else if (block.value.Next === this._itemMap) {
				flag = ((block.value.Prev === this._itemMap) || 
					(this.Items.ICollection_Count === ((correctIndex.value + block.value.ItemCount) - num2)));
			}
			if (flag) {
				offsetFromBlockStart.value = 0;
				position.value = new System.Windows.Controls.Primitives.GeneratorPosition((num - 1), 1);
				break __loop0__;
			}
		}
		correctIndex.value += block.value.ItemCount;
		num += block.value.ContainerCount;
	}
	if (block.value === this._itemMap) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("ItemContainerGenerator_CannotFindRemovedItem")]);
	}
};
System.Windows.Controls.ItemContainerGenerator.prototype.LinkContainerToItem = function (container, item) {
	System.Windows.Controls.ItemContainerGenerator.LinkContainerToItem(container, item, false);
};
System.Windows.Controls.ItemContainerGenerator.LinkContainerToItem = function (container, item, isRecycling) {
	container.ClearValue(System.Windows.Controls.ItemContainerGenerator.ItemForItemContainerProperty);
	container.SetValue(System.Windows.Controls.ItemContainerGenerator.ItemForItemContainerProperty, item);
	if (container !== JSIL.Cast(item, System.Windows.DependencyObject)) {
		if (!isRecycling) {
			container.ClearValue(System.Windows.FrameworkElement.DataContextProperty);
		}
		container.SetValue(System.Windows.FrameworkElement.DataContextProperty, item);
	}
};
System.Windows.Controls.ItemContainerGenerator.prototype.UnlinkContainerFromItem = function (container, item, isRecycling) {
	container.ClearValue(System.Windows.Controls.ItemContainerGenerator.ItemForItemContainerProperty);
	if (!(!isRecycling || (container === JSIL.Cast(item, System.Windows.DependencyObject)))) {
		container.ClearValue(System.Windows.FrameworkElement.DataContextProperty);
	}
	this._host.IGeneratorHost_ClearContainerForItem(container, item);
	if ($asm02.MS.Internal.QuirksMode.ShouldUseLoadedStatesInItemsControl()) {
		var layoutStatesManager = JSIL.TryCast(container.GetValue(System.Windows.Controls.ItemContainerGenerator.LayoutStateManagerProperty), $asm02.System.Windows.Controls.ItemContainerGenerator.LayoutStatesManager);
		if (layoutStatesManager !== null) {
			layoutStatesManager.Cancel();
			container.ClearValue(System.Windows.Controls.ItemContainerGenerator.LayoutStateManagerProperty);
		}
	}
};
System.Windows.Controls.ItemContainerGenerator.prototype.ValidateAndCorrectIndex = function (item, /* ref */ index) {
	if (index.value >= 0) {
		return;
	}
	index.value = this.Items.IList_IndexOf(item);
	if (index.value < 0) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("ItemContainerGenerator_CollectionAddEventMissingItem", [item])]);
	}
};
System.Windows.Controls.ItemContainerGenerator.prototype.ICollectionChangedListener_OnCollectionChanged = function (sender, args) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				var num = -1;
				switch (Number(args.Action)) {
					case 0: 
					case 1: 
						if (sender !== this.Items) {
							return;
						}
						if (!JSIL.Cast(args.Action, System.Boolean)) {
							if (args.NewItems.ICollection_Count !== 1) {
								throw JSIL.New(System.NotSupportedException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("ComponentModel_RangeActionsNotSupported")]);
							}
							var item = args.NewItems.IList_get_Item(0);
							num = args.NewStartingIndex;
							__label0__ = "IL_C9";
							continue __step0__;
						} else {
							if (args.OldItems.ICollection_Count !== 1) {
								throw JSIL.New(System.NotSupportedException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("ComponentModel_RangeActionsNotSupported")]);
							}
							item = args.OldItems.IList_get_Item(0);
							num = args.OldStartingIndex;
							__label0__ = "IL_C9";
							continue __step0__;
						}
						break;
					case 2: 
					case 4: 
						item = null;
						__label0__ = "IL_C9";
						continue __step0__;
				}
				throw JSIL.New(System.NotSupportedException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("ComponentModel_UnexpectedCollectionChangeAction", [args.Action])]);
				__label0__ = "IL_C9";
				continue __step0__;
				break;
			case "IL_C9":
				switch (Number(args.Action)) {
					case 0: 
						this.OnItemAdded(item, num, false);
						return;
					case 1: 
						this.OnItemRemoved(item, num, false);
						return;
					case 2: 
						this.OnItemReplaced(args.OldItems.IList_get_Item(0), args.NewItems.IList_get_Item(0), args.NewStartingIndex);
						return;
					case 3: 
						break;
					case 4: 
						this.OnRefresh();
						break;
					default: 
						return;
				}
				break __step0__;
		}
	}
};
System.Windows.Controls.ItemContainerGenerator.prototype.OnItemAdded = function (item, $index, suppressEvent) {
	var index = new JSIL.Variable($index);
	var position = new System.Windows.Controls.Primitives.GeneratorPosition(), realizedItemBlock = null;
	this.ValidateAndCorrectIndex(item, /* ref */ index);
	this.RegisterItemInsertion(index.value);
	index.value = this.TranslateExternalIndexToInternalIndex(index.value);
	if (this.isAllowedToShowAnimations) {
		this.AddToNewItemsList(index.value);
	}
	position._ctor(-1, 0);
	var itemBlock = this._itemMap.Next;
	var num = index.value;
__loop0__: 
	while ((itemBlock !== this._itemMap) && (num >= itemBlock.ItemCount)) {
		num -= itemBlock.ItemCount;
		position.Index += itemBlock.ContainerCount;
		itemBlock = itemBlock.Next;
	}
	position.Offset = (num + 1);
	var unrealizedItemBlock = JSIL.TryCast(itemBlock, $asm02.System.Windows.Controls.ItemContainerGenerator.UnrealizedItemBlock);
	if (unrealizedItemBlock !== null) {
		this.MoveItems(
			unrealizedItemBlock, 
			num, 
			1, 
			unrealizedItemBlock, 
			(num + 1), 
			0
		);
		unrealizedItemBlock.ItemCount += 1;
	} else if (!(((num !== 0) && 
				(itemBlock !== this._itemMap)) || ((unrealizedItemBlock = JSIL.TryCast(itemBlock.Prev, $asm02.System.Windows.Controls.ItemContainerGenerator.UnrealizedItemBlock)) === null))) {
		unrealizedItemBlock.ItemCount += 1;
	} else {
		unrealizedItemBlock = new $asm02.System.Windows.Controls.ItemContainerGenerator.UnrealizedItemBlock();
		unrealizedItemBlock.ItemCount = 1;
		if (!((num <= 0) || ((realizedItemBlock = JSIL.TryCast(itemBlock, $asm02.System.Windows.Controls.ItemContainerGenerator.RealizedItemBlock)) === null))) {
			var realizedItemBlock2 = new $asm02.System.Windows.Controls.ItemContainerGenerator.RealizedItemBlock();
			this.MoveItems(
				realizedItemBlock, 
				num, 
				(realizedItemBlock.ItemCount - num), 
				realizedItemBlock2, 
				0, 
				num
			);
			realizedItemBlock2.InsertAfter(realizedItemBlock);
			position.Index += itemBlock.ContainerCount;
			position.Offset = 1;
			itemBlock = realizedItemBlock2;
		}
		unrealizedItemBlock.InsertBefore(itemBlock);
	}
	if (this.MapChanged !== null) {
		this.MapChanged(
			null, 
			index.value, 
			1, 
			null, 
			0, 
			0
		);
	}
	if (!((this.ItemsChanged === null) || suppressEvent)) {
		this.ItemsChanged(this, JSIL.New(System.Windows.Controls.Primitives.ItemsChangedEventArgs, "_ctor$1", [System.Collections.Specialized.NotifyCollectionChangedAction.Add, position, 1, 0]));
	}
};
System.Windows.Controls.ItemContainerGenerator.prototype.OnItemRemoved = function (item, itemIndex, raiseReplaceInsteadOfRemove) {
	var $l$gc__DisplayClass = new $asm02.System.Windows.Controls.ItemContainerGenerator.$l$gc__DisplayClass2();
	$l$gc__DisplayClass.item = item;
	$l$gc__DisplayClass.itemIndex = itemIndex;
	$l$gc__DisplayClass.raiseReplaceInsteadOfRemove = raiseReplaceInsteadOfRemove;
	$l$gc__DisplayClass.$this = this;
	var itemIndex2 = $l$gc__DisplayClass.itemIndex;
	$l$gc__DisplayClass.itemIndex = ($l$gc__DisplayClass.itemIndex <= this._items.ICollection_Count) ? this.TranslateExternalIndexToInternalIndexPrivate($l$gc__DisplayClass.itemIndex) : -1;
	$l$gc__DisplayClass.container = null;
	$l$gc__DisplayClass.containerCount = 0;
	this.GetBlockAndPosition$0(
		$l$gc__DisplayClass.item, 
		$l$gc__DisplayClass.itemIndex, 
		true, 
		/* ref */ new JSIL.MemberReference($l$gc__DisplayClass, "position"), 
		/* ref */ new JSIL.MemberReference($l$gc__DisplayClass, "block"), 
		/* ref */ new JSIL.MemberReference($l$gc__DisplayClass, "offsetFromBlockStart"), 
		/* ref */ new JSIL.MemberReference($l$gc__DisplayClass, "correctIndex")
	);
	var realizedItemBlock = JSIL.TryCast($l$gc__DisplayClass.block, $asm02.System.Windows.Controls.ItemContainerGenerator.RealizedItemBlock);
	if (realizedItemBlock !== null) {
		$l$gc__DisplayClass.containerCount = 1;
		$l$gc__DisplayClass.container = realizedItemBlock.ContainerAt($l$gc__DisplayClass.offsetFromBlockStart);
	}
	var flag = false;
	if ($l$gc__DisplayClass.container !== null) {
		var layoutStatesManager = JSIL.TryCast($l$gc__DisplayClass.container.GetValue(System.Windows.Controls.ItemContainerGenerator.LayoutStateManagerProperty), $asm02.System.Windows.Controls.ItemContainerGenerator.LayoutStatesManager);
		if (layoutStatesManager !== null) {
			flag = layoutStatesManager.Unload(function () {
					$l$gc__DisplayClass.$this.DoLinearSearch(/* ref */ new JSIL.MemberReference($l$gc__DisplayClass, "container"), /* ref */ new JSIL.MemberReference($l$gc__DisplayClass, "item"), /* ref */ new JSIL.MemberReference($l$gc__DisplayClass, "itemIndex"));
					$l$gc__DisplayClass.$this.GetBlockAndPosition$0(
						$l$gc__DisplayClass.item, 
						$l$gc__DisplayClass.itemIndex, 
						true, 
						/* ref */ new JSIL.MemberReference($l$gc__DisplayClass, "position"), 
						/* ref */ new JSIL.MemberReference($l$gc__DisplayClass, "block"), 
						/* ref */ new JSIL.MemberReference($l$gc__DisplayClass, "offsetFromBlockStart"), 
						/* ref */ new JSIL.MemberReference($l$gc__DisplayClass, "correctIndex")
					);
					$l$gc__DisplayClass.$this.RealizeItemUnloading($l$gc__DisplayClass.itemIndex);
					$l$gc__DisplayClass.$this.RemoveItem(
						$l$gc__DisplayClass.item, 
						$l$gc__DisplayClass.itemIndex, 
						$l$gc__DisplayClass.container, 
						$l$gc__DisplayClass.containerCount, 
						$l$gc__DisplayClass.position.MemberwiseClone().MemberwiseClone(), 
						$l$gc__DisplayClass.block, 
						$l$gc__DisplayClass.offsetFromBlockStart, 
						$l$gc__DisplayClass.raiseReplaceInsteadOfRemove
					);
				});
			if (flag) {
				this.RegisterItemUnloading(itemIndex2);
			}
		}
	}
	if (!flag) {
		this.RemoveItem(
			$l$gc__DisplayClass.item, 
			$l$gc__DisplayClass.itemIndex, 
			$l$gc__DisplayClass.container, 
			$l$gc__DisplayClass.containerCount, 
			$l$gc__DisplayClass.position.MemberwiseClone(), 
			$l$gc__DisplayClass.block, 
			$l$gc__DisplayClass.offsetFromBlockStart, 
			$l$gc__DisplayClass.raiseReplaceInsteadOfRemove
		);
		this.RegisterImmediateItemRemoval(itemIndex2);
	}
};
System.Windows.Controls.ItemContainerGenerator.prototype.RemoveItem = function (item, itemIndex, container, containerCount, position, block, offsetFromBlockStart, raiseReplaceInsteadOfRemove) {
	this.RemoveFromNewItemsList(itemIndex);
	this.MoveItems(
		block, 
		(offsetFromBlockStart + 1), 
		((block.ItemCount - offsetFromBlockStart) - 1), 
		block, 
		offsetFromBlockStart, 
		0
	);
	--block.ItemCount;
	this.RemoveAndCoalesceBlocksIfNeeded(block);
	if (this.MapChanged !== null) {
		this.MapChanged(
			null, 
			itemIndex, 
			-1, 
			null, 
			0, 
			0
		);
	}
	if (this.ItemsChanged !== null) {
		this.ItemsChanged(this, JSIL.New(System.Windows.Controls.Primitives.ItemsChangedEventArgs, "_ctor$1", [raiseReplaceInsteadOfRemove ? System.Collections.Specialized.NotifyCollectionChangedAction.Replace : System.Collections.Specialized.NotifyCollectionChangedAction.Remove, position, 1, containerCount]));
	}
	if (container !== null) {
		this.UnlinkContainerFromItem(container, item, false);
	}
};
System.Windows.Controls.ItemContainerGenerator.prototype.OnItemReplaced = function (oldItem, newItem, index) {
	var itemsControl = JSIL.TryCast(this._host, System.Windows.Controls.ItemsControl);
	var virtualizingPanel = null;
	if (itemsControl !== null) {
		virtualizingPanel = JSIL.TryCast(itemsControl.ItemsHost, System.Windows.Controls.VirtualizingPanel);
	}
	this.OnItemAdded(newItem, index, (virtualizingPanel !== null));
	this.OnItemRemoved(oldItem, (index + 1), (virtualizingPanel !== null));
	if (virtualizingPanel !== null) {
		virtualizingPanel.InvalidateMeasure();
	}
};
System.Windows.Controls.ItemContainerGenerator.prototype.OnRefresh = function () {
	var position = new System.Windows.Controls.Primitives.GeneratorPosition();
	this.RemoveAll();
	if (this.ItemsChanged !== null) {
		position._ctor(0, 0);
		this.ItemsChanged(this, JSIL.New(System.Windows.Controls.Primitives.ItemsChangedEventArgs, "_ctor$1", [System.Collections.Specialized.NotifyCollectionChangedAction.Reset, position, 0, 0]));
	}
};
System.Windows.Controls.ItemContainerGenerator.prototype.TranslateExternalIndexToInternalIndex = function (index) {
	if (index >= this._items.ICollection_Count) {
		return -1;
	}
	return this.TranslateExternalIndexToInternalIndexPrivate(index);
};
System.Windows.Controls.ItemContainerGenerator.prototype.TranslateExternalIndexToInternalIndexPrivate = function (index) {
	if (this._unloadingCorrections.Count > 0) {
		var num = index;
	__loop0__: 
		for (var linkedListNode = JSIL.Cast(this._unloadingCorrections.First, System.Collections.Generic.LinkedListNode$b1.Of(System.Int32)); (linkedListNode !== null) && (num >= linkedListNode.Value); linkedListNode = JSIL.Cast(linkedListNode.Next, System.Collections.Generic.LinkedListNode$b1.Of(System.Int32))) {
			++index;
		}
	}
	return index;
};
System.Windows.Controls.ItemContainerGenerator.prototype.TranslateInternalIndexToExternalIndex = function (index) {
	var num = index;
__loop0__: 
	for (var linkedListNode = JSIL.Cast(this._unloadingCorrections.First, System.Collections.Generic.LinkedListNode$b1.Of(System.Int32)); (linkedListNode !== null) && 
		(linkedListNode.Value < index) && (index !== -1); linkedListNode = JSIL.Cast(linkedListNode.Next, System.Collections.Generic.LinkedListNode$b1.Of(System.Int32))) {
		--index;
	}
	if (this.TranslateExternalIndexToInternalIndex(index) !== num) {
		return -1;
	}
	if (index >= this._items.ICollection_Count) {
		return -1;
	}
	return index;
};
System.Windows.Controls.ItemContainerGenerator.prototype.RegisterItemUnloading = function (uncorrectedIndex) {
	if (this._unloadingCorrections.Count === 0) {
		this._unloadingCorrections.AddFirst$0(uncorrectedIndex);
		return;
	}
	if (uncorrectedIndex >= JSIL.Cast(this._unloadingCorrections.Last, System.Collections.Generic.LinkedListNode$b1.Of(System.Int32)).Value) {
		this._unloadingCorrections.AddLast$0(uncorrectedIndex);
		return;
	}
	var linkedListNode = JSIL.Cast(this._unloadingCorrections.First, System.Collections.Generic.LinkedListNode$b1.Of(System.Int32));
	var flag = false;
__loop0__: 
	while (linkedListNode) {
		if (linkedListNode.Value > uncorrectedIndex) {
			if (!flag) {
				this._unloadingCorrections.AddBefore$0(linkedListNode, uncorrectedIndex);
				flag = true;
			}
			if (flag) {
				linkedListNode.Value -= 1;
			}
		}
		linkedListNode = JSIL.Cast(linkedListNode.Next, System.Collections.Generic.LinkedListNode$b1.Of(System.Int32));
	}
};
System.Windows.Controls.ItemContainerGenerator.prototype.RealizeItemUnloading = function (correctedIndex) {
	var linkedListNode = JSIL.Cast(this._unloadingCorrections.First, System.Collections.Generic.LinkedListNode$b1.Of(System.Int32));
	var num = 0;
__loop0__: 
	while (linkedListNode) {
		if ((linkedListNode.Value + num) === correctedIndex) {
			var arg_21_0 = JSIL.Cast(linkedListNode.Next, System.Collections.Generic.LinkedListNode$b1.Of(System.Int32));
			this._unloadingCorrections.Remove$1(linkedListNode);
			return;
		}
		++num;
		linkedListNode = JSIL.Cast(linkedListNode.Next, System.Collections.Generic.LinkedListNode$b1.Of(System.Int32));
	}
};
System.Windows.Controls.ItemContainerGenerator.prototype.RegisterItemInsertion = function (uncorrectedIndex) {
	var linkedListNode = JSIL.Cast(this._unloadingCorrections.First, System.Collections.Generic.LinkedListNode$b1.Of(System.Int32));
__loop0__: 
	while (linkedListNode) {
		if (linkedListNode.Value > uncorrectedIndex) {
			linkedListNode.Value += 1;
		}
		linkedListNode = JSIL.Cast(linkedListNode.Next, System.Collections.Generic.LinkedListNode$b1.Of(System.Int32));
	}
};
System.Windows.Controls.ItemContainerGenerator.prototype.RegisterImmediateItemRemoval = function (uncorrectedIndex) {
	var linkedListNode = JSIL.Cast(this._unloadingCorrections.First, System.Collections.Generic.LinkedListNode$b1.Of(System.Int32));
__loop0__: 
	while (linkedListNode) {
		if (linkedListNode.Value > uncorrectedIndex) {
			linkedListNode.Value -= 1;
		}
		linkedListNode = JSIL.Cast(linkedListNode.Next, System.Collections.Generic.LinkedListNode$b1.Of(System.Int32));
	}
};
System.Windows.Controls.ItemContainerGenerator.prototype.GetUnloadingCount = function () {
	return this._unloadingCorrections.Count;
};
System.Windows.Controls.ItemContainerGenerator.prototype.IsContainerAnimating = function (container) {
	var layoutStatesManager = JSIL.TryCast(container.GetValue(System.Windows.Controls.ItemContainerGenerator.LayoutStateManagerProperty), $asm02.System.Windows.Controls.ItemContainerGenerator.LayoutStatesManager);
	return ((layoutStatesManager !== null) && layoutStatesManager.IsAnimating);
};
System.Windows.Controls.ItemContainerGenerator.prototype.ForceToLoadedState = function (container) {
	var layoutStatesManager = JSIL.TryCast(container.GetValue(System.Windows.Controls.ItemContainerGenerator.LayoutStateManagerProperty), $asm02.System.Windows.Controls.ItemContainerGenerator.LayoutStatesManager);
	if (layoutStatesManager !== null) {
		layoutStatesManager.ForceToLoad();
	}
};
System.Windows.Controls.ItemContainerGenerator.prototype.CancelUnload = function (container) {
	var layoutStatesManager = JSIL.TryCast(container.GetValue(System.Windows.Controls.ItemContainerGenerator.LayoutStateManagerProperty), $asm02.System.Windows.Controls.ItemContainerGenerator.LayoutStatesManager);
	if (layoutStatesManager !== null) {
		layoutStatesManager.Cancel();
	}
};
System.Windows.Controls.ItemContainerGenerator.prototype.StopAnimations = function () {
	var list = new (System.Collections.Generic.List$b1.Of(System.Windows.DependencyObject)) (this._unloadingCorrections.Count);
	var linkedListNode = JSIL.Cast(this._unloadingCorrections.First, System.Collections.Generic.LinkedListNode$b1.Of(System.Int32));
	var num = 0;
__loop0__: 
	while (linkedListNode) {
		list.Add(this.ContainerFromIndex$1((linkedListNode.Value + num), false));
		++num;
		linkedListNode = JSIL.Cast(linkedListNode.Next, System.Collections.Generic.LinkedListNode$b1.Of(System.Int32));
	}
	var enumerator = (list.GetEnumerator());
	try {
	__loop1__: 
		while (enumerator.MoveNext()) {
			var current = enumerator.Current;
			this.ForceToLoadedState(current);
		}
	} finally {
		enumerator.IDisposable_Dispose();
	}
};
System.Windows.Controls.ItemContainerGenerator.prototype.AddToNewItemsList = function (index) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				var linkedListNode = JSIL.Cast(this._awaitingLoadIndices.First, System.Collections.Generic.LinkedListNode$b1.Of(System.Int32));
				if (linkedListNode === null) {
					this._awaitingLoadIndices.AddFirst$0(index);
					return;
				}
				if (JSIL.Cast(this._awaitingLoadIndices.Last, System.Collections.Generic.LinkedListNode$b1.Of(System.Int32)).Value < index) {
					this._awaitingLoadIndices.AddLast$0(index);
					return;
				}
			__loop0__: 
				while (linkedListNode) {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								if (linkedListNode.Value > index) {
									var __label2__ = "__entry2__";
								__step2__: 
									while (true) {
										switch (__label2__) {
											case "__entry2__":
												this._awaitingLoadIndices.AddBefore$0(linkedListNode, index);
												__label2__ = "IL_78";
												continue __step2__;
												break;
											case "IL_78":
											__loop1__: 
												while (linkedListNode) {
													linkedListNode.Value += 1;
													linkedListNode = JSIL.Cast(linkedListNode.Next, System.Collections.Generic.LinkedListNode$b1.Of(System.Int32));
												}
												return;
												break __step2__;
										}
									}
								}
								linkedListNode = JSIL.Cast(linkedListNode.Next, System.Collections.Generic.LinkedListNode$b1.Of(System.Int32));
								break __step1__;
						}
					}
				}
				JSIL.UntranslatableInstruction("goto", "IL_78");
				break __step0__;
		}
	}
};
System.Windows.Controls.ItemContainerGenerator.prototype.RemoveFromNewItemsList = function (index) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				var linkedListNode = JSIL.Cast(this._awaitingLoadIndices.First, System.Collections.Generic.LinkedListNode$b1.Of(System.Int32));
			__loop0__: 
				while (linkedListNode) {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								if (linkedListNode.Value === index) {
									var node = linkedListNode;
									linkedListNode = JSIL.Cast(linkedListNode.Next, System.Collections.Generic.LinkedListNode$b1.Of(System.Int32));
									this._awaitingLoadIndices.Remove$1(node);
								} else if (linkedListNode.Value <= index) {
									linkedListNode = JSIL.Cast(linkedListNode.Next, System.Collections.Generic.LinkedListNode$b1.Of(System.Int32));
									continue __loop0__;
								}
								__label1__ = "IL_58";
								continue __step1__;
								break;
							case "IL_58":
							__loop1__: 
								while (linkedListNode) {
									linkedListNode.Value -= 1;
									linkedListNode = JSIL.Cast(linkedListNode.Next, System.Collections.Generic.LinkedListNode$b1.Of(System.Int32));
								}
								return;
								break __step1__;
						}
					}
				}
				JSIL.UntranslatableInstruction("goto", "IL_58");
				break __step0__;
		}
	}
};
System.Windows.Controls.ItemContainerGenerator.prototype.ClearItemFromNewItemsList = function (indexToRemove) {
	if (this._awaitingLoadIndices.Contains(indexToRemove)) {
		this._awaitingLoadIndices.Remove$0(indexToRemove);
	}
};
System.Windows.Controls.ItemContainerGenerator.prototype.DiscardNewItemsList = function () {
	this._awaitingLoadIndices.Clear();
};
System.Windows.Controls.ItemContainerGenerator.prototype.add_MapChanged = function (value) {
	this.MapChanged = System.Delegate.Combine(this.MapChanged, value);
};
System.Windows.Controls.ItemContainerGenerator.prototype.remove_MapChanged = function (value) {
	this.MapChanged = System.Delegate.Remove(this.MapChanged, value);
};
JSIL.OverloadedMethod(System.Windows.Controls.ItemContainerGenerator.prototype, "IndexFromGeneratorPosition", [
		["IndexFromGeneratorPosition$0", [System.Windows.Controls.Primitives.GeneratorPosition]], 
		["IndexFromGeneratorPosition$1", [System.Windows.Controls.Primitives.GeneratorPosition, System.Boolean]]
	]);
JSIL.OverloadedMethod(System.Windows.Controls.ItemContainerGenerator.prototype, "IndexFromContainer", [
		["IndexFromContainer$0", [System.Windows.DependencyObject]], 
		["IndexFromContainer$1", [System.Windows.DependencyObject, System.Boolean]]
	]);
JSIL.OverloadedMethod(System.Windows.Controls.ItemContainerGenerator.prototype, "GetCount", [
		["GetCount$0", []], 
		["GetCount$1", [$asm02.System.Windows.Controls.ItemContainerGenerator.ItemBlock]]
	]);
JSIL.OverloadedMethod(System.Windows.Controls.ItemContainerGenerator.prototype, "ContainerFromIndex", [
		["ContainerFromIndex$0", [System.Int32]], 
		["ContainerFromIndex$1", [System.Int32, System.Boolean]]
	]);
JSIL.OverloadedMethod(System.Windows.Controls.ItemContainerGenerator.prototype, "GetBlockAndPosition", [
		["GetBlockAndPosition$0", [System.Object, System.Int32, System.Boolean, JSIL.Reference.Of(System.Windows.Controls.Primitives.GeneratorPosition), JSIL.Reference.Of($asm02.System.Windows.Controls.ItemContainerGenerator.ItemBlock), JSIL.Reference.Of(System.Int32), JSIL.Reference.Of(System.Int32)]], 
		["GetBlockAndPosition$1", [System.Int32, JSIL.Reference.Of(System.Windows.Controls.Primitives.GeneratorPosition), JSIL.Reference.Of($asm02.System.Windows.Controls.ItemContainerGenerator.ItemBlock), JSIL.Reference.Of(System.Int32)]], 
		["GetBlockAndPosition$2", [System.Object, System.Boolean, JSIL.Reference.Of(System.Windows.Controls.Primitives.GeneratorPosition), JSIL.Reference.Of($asm02.System.Windows.Controls.ItemContainerGenerator.ItemBlock), JSIL.Reference.Of(System.Int32), JSIL.Reference.Of(System.Int32)]]
	]);
JSIL.MakeProperty(System.Windows.Controls.ItemContainerGenerator.prototype, "Items", 
	System.Windows.Controls.ItemContainerGenerator.prototype.get_Items, System.Windows.Controls.ItemContainerGenerator.prototype.set_Items);
JSIL.MakeProperty(System.Windows.Controls.ItemContainerGenerator.prototype, "Host", 
	System.Windows.Controls.ItemContainerGenerator.prototype.get_Host, null);
JSIL.MakeProperty(System.Windows.Controls.ItemContainerGenerator.prototype, "Peer", 
	System.Windows.Controls.ItemContainerGenerator.prototype.get_Peer, null);
System.Windows.Controls.ItemContainerGenerator.prototype.isAllowedToShowAnimations = false;
System.Windows.Controls.ItemContainerGenerator.prototype.ItemsChanged = null;
System.Windows.Controls.ItemContainerGenerator.ItemForItemContainerProperty = null;
System.Windows.Controls.ItemContainerGenerator.LayoutStateManagerProperty = null;
System.Windows.Controls.ItemContainerGenerator.prototype._unloadingCorrections = null;
System.Windows.Controls.ItemContainerGenerator.prototype._awaitingLoadIndices = null;
System.Windows.Controls.ItemContainerGenerator.prototype.PanelChanged = null;
System.Windows.Controls.ItemContainerGenerator.prototype._generator = null;
System.Windows.Controls.ItemContainerGenerator.prototype._host = null;
System.Windows.Controls.ItemContainerGenerator.prototype._itemMap = null;
System.Windows.Controls.ItemContainerGenerator.prototype._startIndexForUIFromItem = 0;
System.Windows.Controls.ItemContainerGenerator.prototype._peer = null;
System.Windows.Controls.ItemContainerGenerator.prototype._items = null;
System.Windows.Controls.ItemContainerGenerator.prototype._containerType = null;
System.Windows.Controls.ItemContainerGenerator.prototype._recyclableContainers = null;
System.Windows.Controls.ItemContainerGenerator.prototype.MapChanged = null;
System.Windows.Controls.ItemContainerGenerator.prototype._collectionChangedListener = null;
System.Windows.Controls.ItemContainerGenerator._cctor = function () {
	System.Windows.Controls.ItemContainerGenerator.ItemForItemContainerProperty = System.Windows.DependencyProperty.RegisterAttached("ItemForItemContainer", System.Object, System.Windows.Controls.ItemContainerGenerator, JSIL.New(System.Windows.PropertyMetadata, "_ctor$1", [null]));
	System.Windows.Controls.ItemContainerGenerator.LayoutStateManagerProperty = System.Windows.DependencyProperty.RegisterAttached("LayoutStateManager", $asm02.System.Windows.Controls.ItemContainerGenerator.LayoutStatesManager, System.Windows.Controls.ItemContainerGenerator, JSIL.New(System.Windows.PropertyMetadata, "_ctor$1", [null]));
};

$asm02.System.Windows.Controls.ItemContainerGenerator.Generator.prototype._ctor = function (factory, position, direction, allowStartAtRealizedItem) {
	System.Object.prototype._ctor.call(this);
	this._factory = factory;
	this._direction = direction;
	var expr_1A = this._factory;
	expr_1A.MapChanged = System.Delegate.Combine(expr_1A.MapChanged, JSIL.Delegate.New("System.Windows.Controls.ItemContainerGenerator/MapChangedHandler", this, $asm02.System.Windows.Controls.ItemContainerGenerator.Generator.prototype.OnMapChanged));
	this._factory.MoveToPosition(position, direction, allowStartAtRealizedItem, /* ref */ new JSIL.MemberReference(this, "_cachedState"));
	this._done = (this._factory.Items.ICollection_Count === 0);
};
$asm02.System.Windows.Controls.ItemContainerGenerator.Generator.prototype.GenerateNext = function (stopAtRealized, /* ref */ isNewlyRealized) {
	var dependencyObject = null;
	isNewlyRealized.value = false;
__loop0__: 
	while (dependencyObject === null) {
		var unrealizedItemBlock = JSIL.TryCast(this._cachedState.Block, $asm02.System.Windows.Controls.ItemContainerGenerator.UnrealizedItemBlock);
		var items = this._factory.Items;
		var itemIndex = this._cachedState.ItemIndex;
		var num = this._factory.TranslateInternalIndexToExternalIndex(itemIndex);
		if (this._cachedState.Block === this._factory._itemMap) {
			this._done = true;
		}
		if (!(unrealizedItemBlock || !stopAtRealized)) {
			this._done = true;
		}
		var flag = (num === -1);
		if (!(((0 <= num) && 
					(num < items.ICollection_Count)) || flag)) {
			this._done = true;
		}
		if (this._done) {
			isNewlyRealized.value = false;
			return null;
		}
		var item = null;
		if (!flag) {
			item = items.IList_get_Item(num);
		}
		if (unrealizedItemBlock !== null) {
			isNewlyRealized.value = true;
			if (!((this._factory._recyclableContainers.Count <= 0) || this._factory.Host.IGeneratorHost_IsItemItsOwnContainer(item))) {
				dependencyObject = this._factory._recyclableContainers.Dequeue();
				isNewlyRealized.value = false;
			}
			dependencyObject = this._factory.Host.IGeneratorHost_GetContainerForItem(item, dependencyObject);
			System.Windows.Controls.ItemContainerGenerator.LinkContainerToItem(dependencyObject, item, (JSIL.UntranslatableInstruction("ldobj:SByte([mscorlib]System.SByte, ldloc:bool&[exp:int8&](isNewlyRealized))") === 0));
			if (dependencyObject !== null) {
				this._factory.Realize(unrealizedItemBlock, this._cachedState.Offset, item, dependencyObject);
			}
		} else {
			isNewlyRealized.value = false;
			var realizedItemBlock = JSIL.Cast(this._cachedState.Block, $asm02.System.Windows.Controls.ItemContainerGenerator.RealizedItemBlock);
			dependencyObject = realizedItemBlock.ContainerAt(this._cachedState.Offset);
		}
		this._cachedState.ItemIndex = itemIndex;
		if (this._direction === 0) {
			this._cachedState.Block.MoveForward(/* ref */ new JSIL.MemberReference(this, "_cachedState"), true);
		} else {
			this._cachedState.Block.MoveBackward(/* ref */ new JSIL.MemberReference(this, "_cachedState"), true);
		}
	}
	return dependencyObject;
};
$asm02.System.Windows.Controls.ItemContainerGenerator.Generator.prototype.IDisposable_Dispose = function () {
	if (this._factory !== null) {
		var expr_0E = this._factory;
		expr_0E.MapChanged = System.Delegate.Remove(expr_0E.MapChanged, JSIL.Delegate.New("System.Windows.Controls.ItemContainerGenerator/MapChangedHandler", this, $asm02.System.Windows.Controls.ItemContainerGenerator.Generator.prototype.OnMapChanged));
		this._done = true;
		this._factory._generator = null;
		this._factory = null;
	}
};
$asm02.System.Windows.Controls.ItemContainerGenerator.Generator.prototype.OnMapChanged = function (block, offset, count, newBlock, newOffset, deltaCount) {
	if (block !== null) {
		if (!((block !== this._cachedState.Block) || 
				(offset > this._cachedState.Offset) || (this._cachedState.Offset >= (offset + count)))) {
			this._cachedState.Block = newBlock;
			this._cachedState.Offset += (newOffset - offset);
			this._cachedState.Count += deltaCount;
			return;
		}
	} else if (offset >= 0) {
		if (offset < this._cachedState.Count) {
			this._cachedState.Count += count;
			this._cachedState.ItemIndex += count;
			return;
		}
		if (offset < (this._cachedState.Count + this._cachedState.Offset)) {
			this._cachedState.Offset += count;
			this._cachedState.ItemIndex += count;
			return;
		}
		if (!((offset !== (this._cachedState.Count + this._cachedState.Offset)) || (count <= 0))) {
			this._cachedState.Offset += count;
			this._cachedState.ItemIndex += count;
			return;
		}
	} else {
		this._cachedState.Block = newBlock;
		this._cachedState.Offset += this._cachedState.Count;
		this._cachedState.Count = 0;
	}
};
$asm02.System.Windows.Controls.ItemContainerGenerator.Generator.prototype._factory = null;
$asm02.System.Windows.Controls.ItemContainerGenerator.Generator.prototype._direction = 0;
$asm02.System.Windows.Controls.ItemContainerGenerator.Generator.prototype._done = false;

$asm02.System.Windows.Controls.ItemContainerGenerator.ItemBlock.prototype.get_ItemCount = function () {
	return this._count;
};
$asm02.System.Windows.Controls.ItemContainerGenerator.ItemBlock.prototype.set_ItemCount = function (value) {
	this._count = value;
};
$asm02.System.Windows.Controls.ItemContainerGenerator.ItemBlock.prototype.get_Prev = function () {
	return this._prev;
};
$asm02.System.Windows.Controls.ItemContainerGenerator.ItemBlock.prototype.set_Prev = function (value) {
	this._prev = value;
};
$asm02.System.Windows.Controls.ItemContainerGenerator.ItemBlock.prototype.get_Next = function () {
	return this._next;
};
$asm02.System.Windows.Controls.ItemContainerGenerator.ItemBlock.prototype.set_Next = function (value) {
	this._next = value;
};
$asm02.System.Windows.Controls.ItemContainerGenerator.ItemBlock.prototype.get_ContainerCount = function () {
	return 2147483647;
};
$asm02.System.Windows.Controls.ItemContainerGenerator.ItemBlock.prototype.ContainerAt = function (index) {
	return null;
};
$asm02.System.Windows.Controls.ItemContainerGenerator.ItemBlock.prototype.ItemAt = function (index) {
	return null;
};
$asm02.System.Windows.Controls.ItemContainerGenerator.ItemBlock.prototype.InsertAfter = function (prev) {
	this.Next = prev.Next;
	this.Prev = prev;
	this.Prev.Next = this;
	this.Next.Prev = this;
};
$asm02.System.Windows.Controls.ItemContainerGenerator.ItemBlock.prototype.InsertBefore = function (next) {
	this.InsertAfter(next.Prev);
};
$asm02.System.Windows.Controls.ItemContainerGenerator.ItemBlock.prototype.Remove = function () {
	this.Prev.Next = this.Next;
	this.Next.Prev = this.Prev;
};
$asm02.System.Windows.Controls.ItemContainerGenerator.ItemBlock.prototype.MoveForward = function (/* ref */ state, allowMovePastRealizedItem) {
	if (this.IsMoveAllowed(allowMovePastRealizedItem)) {
		++state.value.ItemIndex;
		if (++state.value.Offset >= this.ItemCount) {
			state.value.Block = this.Next;
			state.value.Offset = 0;
			state.value.Count += this.ItemCount;
		}
	}
};
$asm02.System.Windows.Controls.ItemContainerGenerator.ItemBlock.prototype.MoveBackward = function (/* ref */ state, allowMovePastRealizedItem) {
	if (this.IsMoveAllowed(allowMovePastRealizedItem)) {
		if (--state.value.Offset < 0) {
			state.value.Block = this.Prev;
			state.value.Offset = (state.value.Block.ItemCount - 1);
			state.value.Count -= state.value.Block.ItemCount;
		}
		--state.value.ItemIndex;
	}
};
$asm02.System.Windows.Controls.ItemContainerGenerator.ItemBlock.prototype.IsMoveAllowed = function (allowMovePastRealizedItem) {
	return allowMovePastRealizedItem;
};
$asm02.System.Windows.Controls.ItemContainerGenerator.ItemBlock.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
JSIL.MakeProperty($asm02.System.Windows.Controls.ItemContainerGenerator.ItemBlock.prototype, "ItemCount", 
	$asm02.System.Windows.Controls.ItemContainerGenerator.ItemBlock.prototype.get_ItemCount, $asm02.System.Windows.Controls.ItemContainerGenerator.ItemBlock.prototype.set_ItemCount);
JSIL.MakeProperty($asm02.System.Windows.Controls.ItemContainerGenerator.ItemBlock.prototype, "Prev", 
	$asm02.System.Windows.Controls.ItemContainerGenerator.ItemBlock.prototype.get_Prev, $asm02.System.Windows.Controls.ItemContainerGenerator.ItemBlock.prototype.set_Prev);
JSIL.MakeProperty($asm02.System.Windows.Controls.ItemContainerGenerator.ItemBlock.prototype, "Next", 
	$asm02.System.Windows.Controls.ItemContainerGenerator.ItemBlock.prototype.get_Next, $asm02.System.Windows.Controls.ItemContainerGenerator.ItemBlock.prototype.set_Next);
JSIL.MakeProperty($asm02.System.Windows.Controls.ItemContainerGenerator.ItemBlock.prototype, "ContainerCount", 
	$asm02.System.Windows.Controls.ItemContainerGenerator.ItemBlock.prototype.get_ContainerCount, null);
Object.defineProperty($asm02.System.Windows.Controls.ItemContainerGenerator.ItemBlock, "BlockSize", {
		"value": 16}
);
$asm02.System.Windows.Controls.ItemContainerGenerator.ItemBlock.prototype._count = 0;
$asm02.System.Windows.Controls.ItemContainerGenerator.ItemBlock.prototype._prev = null;
$asm02.System.Windows.Controls.ItemContainerGenerator.ItemBlock.prototype._next = null;

$asm02.System.Windows.Controls.ItemContainerGenerator.UnrealizedItemBlock.prototype.get_ContainerCount = function () {
	return 0;
};
$asm02.System.Windows.Controls.ItemContainerGenerator.UnrealizedItemBlock.prototype.IsMoveAllowed = function (allowMovePastRealizedItem) {
	return true;
};
$asm02.System.Windows.Controls.ItemContainerGenerator.UnrealizedItemBlock.prototype._ctor = function () {
	$asm02.System.Windows.Controls.ItemContainerGenerator.ItemBlock.prototype._ctor.call(this);
};
JSIL.MakeProperty($asm02.System.Windows.Controls.ItemContainerGenerator.UnrealizedItemBlock.prototype, "ContainerCount", 
	$asm02.System.Windows.Controls.ItemContainerGenerator.UnrealizedItemBlock.prototype.get_ContainerCount, null);

$asm02.System.Windows.Controls.ItemContainerGenerator.RealizedItemBlock.prototype.get_ContainerCount = function () {
	return $asm02.System.Windows.Controls.ItemContainerGenerator.ItemBlock.prototype.get_ItemCount.call(this);
};
$asm02.System.Windows.Controls.ItemContainerGenerator.RealizedItemBlock.prototype.ContainerAt = function (index) {
	return this._entry[index].Container;
};
$asm02.System.Windows.Controls.ItemContainerGenerator.RealizedItemBlock.prototype.ItemAt = function (index) {
	return this._entry[index].Item;
};
$asm02.System.Windows.Controls.ItemContainerGenerator.RealizedItemBlock.prototype.CopyEntries = function (src, offset, count, newOffset) {
	if (offset < newOffset) {
	__loop1__: 
		for (var i = (count - 1); i >= 0; --i) {
			this._entry[(newOffset + i)] = src._entry[(offset + i)].MemberwiseClone();
		}
		if (src !== this) {
			src.ClearEntries(offset, count);
			return;
		}
		src.ClearEntries(offset, (newOffset - offset));
		return;
	} else {
	__loop0__: 
		for (i = 0; i < count; ++i) {
			this._entry[(newOffset + i)] = src._entry[(offset + i)].MemberwiseClone();
		}
		if (src !== this) {
			src.ClearEntries(offset, count);
			return;
		}
		src.ClearEntries((newOffset + count), (offset - newOffset));
		return;
	}
};
$asm02.System.Windows.Controls.ItemContainerGenerator.RealizedItemBlock.prototype.ClearEntries = function (offset, count) {
__loop0__: 
	for (var i = 0; i < count; ++i) {
		this._entry[(offset + i)].Item = null;
		this._entry[(offset + i)].Container = null;
	}
};
$asm02.System.Windows.Controls.ItemContainerGenerator.RealizedItemBlock.prototype.RealizeItem = function (index, item, container) {
	this._entry[index].Item = item;
	this._entry[index].Container = container;
};
$asm02.System.Windows.Controls.ItemContainerGenerator.RealizedItemBlock.prototype.OffsetOfItem = function (item) {
__loop0__: 
	for (var i = 0; i < $asm02.System.Windows.Controls.ItemContainerGenerator.ItemBlock.prototype.get_ItemCount.call(this); ++i) {
		if (System.Object.Equals(this._entry[i].Item, item)) {
			return i;
		}
	}
	return -1;
};
$asm02.System.Windows.Controls.ItemContainerGenerator.RealizedItemBlock.prototype._ctor = function () {
	this._entry = JSIL.Array.New($asm02.System.Windows.Controls.ItemContainerGenerator.BlockEntry, 16);
	$asm02.System.Windows.Controls.ItemContainerGenerator.ItemBlock.prototype._ctor.call(this);
};
JSIL.MakeProperty($asm02.System.Windows.Controls.ItemContainerGenerator.RealizedItemBlock.prototype, "ContainerCount", 
	$asm02.System.Windows.Controls.ItemContainerGenerator.RealizedItemBlock.prototype.get_ContainerCount, null);
$asm02.System.Windows.Controls.ItemContainerGenerator.RealizedItemBlock.prototype._entry = null;

$asm02.System.Windows.Controls.ItemContainerGenerator.BlockEntry.prototype.get_Item = function () {
	return this._item;
};
$asm02.System.Windows.Controls.ItemContainerGenerator.BlockEntry.prototype.set_Item = function (value) {
	this._item = value;
};
$asm02.System.Windows.Controls.ItemContainerGenerator.BlockEntry.prototype.get_Container = function () {
	return this._container;
};
$asm02.System.Windows.Controls.ItemContainerGenerator.BlockEntry.prototype.set_Container = function (value) {
	this._container = value;
};
JSIL.MakeProperty($asm02.System.Windows.Controls.ItemContainerGenerator.BlockEntry.prototype, "Item", 
	$asm02.System.Windows.Controls.ItemContainerGenerator.BlockEntry.prototype.get_Item, $asm02.System.Windows.Controls.ItemContainerGenerator.BlockEntry.prototype.set_Item);
JSIL.MakeProperty($asm02.System.Windows.Controls.ItemContainerGenerator.BlockEntry.prototype, "Container", 
	$asm02.System.Windows.Controls.ItemContainerGenerator.BlockEntry.prototype.get_Container, $asm02.System.Windows.Controls.ItemContainerGenerator.BlockEntry.prototype.set_Container);
$asm02.System.Windows.Controls.ItemContainerGenerator.BlockEntry.prototype._item = null;
$asm02.System.Windows.Controls.ItemContainerGenerator.BlockEntry.prototype._container = null;

$asm02.System.Windows.Controls.ItemContainerGenerator.GeneratorState.prototype.get_Block = function () {
	return this._block;
};
$asm02.System.Windows.Controls.ItemContainerGenerator.GeneratorState.prototype.set_Block = function (value) {
	this._block = value;
};
$asm02.System.Windows.Controls.ItemContainerGenerator.GeneratorState.prototype.get_Offset = function () {
	return this._offset;
};
$asm02.System.Windows.Controls.ItemContainerGenerator.GeneratorState.prototype.set_Offset = function (value) {
	this._offset = value;
};
$asm02.System.Windows.Controls.ItemContainerGenerator.GeneratorState.prototype.get_Count = function () {
	return this._count;
};
$asm02.System.Windows.Controls.ItemContainerGenerator.GeneratorState.prototype.set_Count = function (value) {
	this._count = value;
};
$asm02.System.Windows.Controls.ItemContainerGenerator.GeneratorState.prototype.get_ItemIndex = function () {
	return this._itemIndex;
};
$asm02.System.Windows.Controls.ItemContainerGenerator.GeneratorState.prototype.set_ItemIndex = function (value) {
	this._itemIndex = value;
};
JSIL.MakeProperty($asm02.System.Windows.Controls.ItemContainerGenerator.GeneratorState.prototype, "Block", 
	$asm02.System.Windows.Controls.ItemContainerGenerator.GeneratorState.prototype.get_Block, $asm02.System.Windows.Controls.ItemContainerGenerator.GeneratorState.prototype.set_Block);
JSIL.MakeProperty($asm02.System.Windows.Controls.ItemContainerGenerator.GeneratorState.prototype, "Offset", 
	$asm02.System.Windows.Controls.ItemContainerGenerator.GeneratorState.prototype.get_Offset, $asm02.System.Windows.Controls.ItemContainerGenerator.GeneratorState.prototype.set_Offset);
JSIL.MakeProperty($asm02.System.Windows.Controls.ItemContainerGenerator.GeneratorState.prototype, "Count", 
	$asm02.System.Windows.Controls.ItemContainerGenerator.GeneratorState.prototype.get_Count, $asm02.System.Windows.Controls.ItemContainerGenerator.GeneratorState.prototype.set_Count);
JSIL.MakeProperty($asm02.System.Windows.Controls.ItemContainerGenerator.GeneratorState.prototype, "ItemIndex", 
	$asm02.System.Windows.Controls.ItemContainerGenerator.GeneratorState.prototype.get_ItemIndex, $asm02.System.Windows.Controls.ItemContainerGenerator.GeneratorState.prototype.set_ItemIndex);
$asm02.System.Windows.Controls.ItemContainerGenerator.GeneratorState.prototype._block = null;
$asm02.System.Windows.Controls.ItemContainerGenerator.GeneratorState.prototype._offset = 0;
$asm02.System.Windows.Controls.ItemContainerGenerator.GeneratorState.prototype._count = 0;
$asm02.System.Windows.Controls.ItemContainerGenerator.GeneratorState.prototype._itemIndex = 0;

$asm02.System.Windows.Controls.ItemContainerGenerator.LayoutStatesManager.prototype.get_IsAnimating = function () {
	return this._animating;
};
$asm02.System.Windows.Controls.ItemContainerGenerator.LayoutStatesManager.prototype.get_ShouldGoStraightToLoaded = function () {
	return this.ShouldGoStraightToLoaded$value;
};
$asm02.System.Windows.Controls.ItemContainerGenerator.LayoutStatesManager.prototype.set_ShouldGoStraightToLoaded = function (value) {
	this.ShouldGoStraightToLoaded$value = value;
};
$asm02.System.Windows.Controls.ItemContainerGenerator.LayoutStatesManager.prototype.get_LayoutStatesGroup = function () {
	return this._layoutStatesGroups;
};
$asm02.System.Windows.Controls.ItemContainerGenerator.LayoutStatesManager.prototype.set_LayoutStatesGroup = function (value) {
	if (this._layoutStatesGroups !== value) {
		if (this._layoutStatesGroups !== null) {
			this._layoutStatesGroups.remove_CurrentStateChanging(JSIL.Delegate.New("System.EventHandler`1[System.Windows.VisualStateChangedEventArgs]", this, $asm02.System.Windows.Controls.ItemContainerGenerator.LayoutStatesManager.prototype._layoutStatesGroups_CurrentStateChanging));
			this._layoutStatesGroups.remove_CurrentStateChanged(JSIL.Delegate.New("System.EventHandler`1[System.Windows.VisualStateChangedEventArgs]", this, $asm02.System.Windows.Controls.ItemContainerGenerator.LayoutStatesManager.prototype._layoutStatesGroups_CurrentStateChanged));
		}
		this._layoutStatesGroups = value;
		if (this._layoutStatesGroups !== null) {
			this._layoutStatesGroups.add_CurrentStateChanging(JSIL.Delegate.New("System.EventHandler`1[System.Windows.VisualStateChangedEventArgs]", this, $asm02.System.Windows.Controls.ItemContainerGenerator.LayoutStatesManager.prototype._layoutStatesGroups_CurrentStateChanging));
			this._layoutStatesGroups.add_CurrentStateChanged(JSIL.Delegate.New("System.EventHandler`1[System.Windows.VisualStateChangedEventArgs]", this, $asm02.System.Windows.Controls.ItemContainerGenerator.LayoutStatesManager.prototype._layoutStatesGroups_CurrentStateChanged));
		}
	}
};
$asm02.System.Windows.Controls.ItemContainerGenerator.LayoutStatesManager.prototype._ctor = function (container) {
	System.Object.prototype._ctor.call(this);
	this._container = container;
};
$asm02.System.Windows.Controls.ItemContainerGenerator.LayoutStatesManager.prototype.GetElementRoot = function (templatesAreGenerated) {
	var result = null;
	var frameworkElement = JSIL.TryCast(this._container, System.Windows.FrameworkElement);
	if (frameworkElement !== null) {
		if (!templatesAreGenerated) {
			frameworkElement.ApplyTemplateInternal();
		}
		result = JSIL.TryCast(frameworkElement, System.Windows.Controls.Control);
	}
	return result;
};
$asm02.System.Windows.Controls.ItemContainerGenerator.LayoutStatesManager.prototype.Load = function () {
	var layoutStatesGroup = new JSIL.Variable(null), visualState = new JSIL.Variable(null);
	var elementRoot = this.GetElementRoot(false);
	if (elementRoot !== null) {
		var implementationRoot = elementRoot.ImplementationRoot;
		if (implementationRoot !== null) {
			var visualStateGroups = System.Windows.VisualStateManager.GetVisualStateGroups(implementationRoot);
			if (this.ShouldGoStraightToLoaded) {
				System.Windows.VisualStateManager.GoToState(elementRoot, "BeforeLoaded", false);
				System.Windows.VisualStateManager.GoToState(elementRoot, "AfterLoaded", false);
				return;
			}
			if (visualStateGroups === null) {
				this.LayoutStatesGroup = null;
				return;
			}
			if (System.Windows.VisualStateManager.TryGetState(visualStateGroups, "AfterLoaded", /* ref */ layoutStatesGroup, /* ref */ visualState)) {
				this.LayoutStatesGroup = layoutStatesGroup.value;
			}
			System.Windows.VisualStateManager.GoToState(elementRoot, "BeforeLoaded", false);
			System.Windows.VisualStateManager.GoToState(elementRoot, "AfterLoaded", true);
			return;
		} else {
			this.LayoutStatesGroup = null;
		}
	}
};
$asm02.System.Windows.Controls.ItemContainerGenerator.LayoutStatesManager.prototype.Unload = function (callback) {
	var layoutStatesGroup = new JSIL.Variable(null), visualState = new JSIL.Variable(null);
	var elementRoot = this.GetElementRoot(true);
	var result = false;
	if (elementRoot !== null) {
		var implementationRoot = elementRoot.ImplementationRoot;
		if (implementationRoot !== null) {
			var visualStateGroups = System.Windows.VisualStateManager.GetVisualStateGroups(implementationRoot);
			if (visualStateGroups === null) {
				this.LayoutStatesGroup = null;
			} else {
				if (System.Windows.VisualStateManager.TryGetState(visualStateGroups, "AfterLoaded", /* ref */ layoutStatesGroup, /* ref */ visualState)) {
					this.LayoutStatesGroup = layoutStatesGroup.value;
				}
				if (System.Windows.VisualStateManager.GoToState(elementRoot, "BeforeUnloaded", true)) {
					this._unloadCallback = callback;
					result = true;
				} else {
					this._unloadCallback = null;
					this.LayoutStatesGroup = null;
				}
			}
		} else {
			this._unloadCallback = null;
			this.LayoutStatesGroup = null;
		}
	}
	return result;
};
$asm02.System.Windows.Controls.ItemContainerGenerator.LayoutStatesManager.prototype.Cancel = function () {
	this._animating = false;
	this._unloadCallback = null;
	this.LayoutStatesGroup = null;
};
$asm02.System.Windows.Controls.ItemContainerGenerator.LayoutStatesManager.prototype.ForceToLoad = function () {
	this.LayoutStatesGroup = null;
	if (this._unloadCallback !== null) {
		this._unloadCallback = null;
		this._unloadCallback();
	}
	this._animating = false;
	this.ShouldGoStraightToLoaded = true;
	this.Load();
};
$asm02.System.Windows.Controls.ItemContainerGenerator.LayoutStatesManager.prototype._layoutStatesGroups_CurrentStateChanged = function (sender, e) {
	this._animating = false;
	if (e.NewState.Name == "BeforeUnloaded") {
		this._unloadCallback = null;
		this._unloadCallback();
	}
};
$asm02.System.Windows.Controls.ItemContainerGenerator.LayoutStatesManager.prototype._layoutStatesGroups_CurrentStateChanging = function (sender, e) {
	this._animating = true;
};
JSIL.MakeProperty($asm02.System.Windows.Controls.ItemContainerGenerator.LayoutStatesManager.prototype, "IsAnimating", 
	$asm02.System.Windows.Controls.ItemContainerGenerator.LayoutStatesManager.prototype.get_IsAnimating, null);
JSIL.MakeProperty($asm02.System.Windows.Controls.ItemContainerGenerator.LayoutStatesManager.prototype, "ShouldGoStraightToLoaded", 
	$asm02.System.Windows.Controls.ItemContainerGenerator.LayoutStatesManager.prototype.get_ShouldGoStraightToLoaded, $asm02.System.Windows.Controls.ItemContainerGenerator.LayoutStatesManager.prototype.set_ShouldGoStraightToLoaded);
JSIL.MakeProperty($asm02.System.Windows.Controls.ItemContainerGenerator.LayoutStatesManager.prototype, "LayoutStatesGroup", 
	$asm02.System.Windows.Controls.ItemContainerGenerator.LayoutStatesManager.prototype.get_LayoutStatesGroup, $asm02.System.Windows.Controls.ItemContainerGenerator.LayoutStatesManager.prototype.set_LayoutStatesGroup);
$asm02.System.Windows.Controls.ItemContainerGenerator.LayoutStatesManager.prototype._container = null;
$asm02.System.Windows.Controls.ItemContainerGenerator.LayoutStatesManager.prototype._unloadCallback = null;
$asm02.System.Windows.Controls.ItemContainerGenerator.LayoutStatesManager.prototype._animating = false;
$asm02.System.Windows.Controls.ItemContainerGenerator.LayoutStatesManager.prototype._layoutStatesGroups = null;
$asm02.System.Windows.Controls.ItemContainerGenerator.LayoutStatesManager.prototype.ShouldGoStraightToLoaded$value = false;

$asm02.System.Windows.Controls.ItemContainerGenerator.$l$gc__DisplayClass2.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm02.System.Windows.Controls.ItemContainerGenerator.$l$gc__DisplayClass2.prototype.container = null;
$asm02.System.Windows.Controls.ItemContainerGenerator.$l$gc__DisplayClass2.prototype.containerCount = 0;
$asm02.System.Windows.Controls.ItemContainerGenerator.$l$gc__DisplayClass2.prototype.block = null;
$asm02.System.Windows.Controls.ItemContainerGenerator.$l$gc__DisplayClass2.prototype.offsetFromBlockStart = 0;
$asm02.System.Windows.Controls.ItemContainerGenerator.$l$gc__DisplayClass2.prototype.correctIndex = 0;
$asm02.System.Windows.Controls.ItemContainerGenerator.$l$gc__DisplayClass2.prototype.$this = null;
$asm02.System.Windows.Controls.ItemContainerGenerator.$l$gc__DisplayClass2.prototype.item = null;
$asm02.System.Windows.Controls.ItemContainerGenerator.$l$gc__DisplayClass2.prototype.itemIndex = 0;
$asm02.System.Windows.Controls.ItemContainerGenerator.$l$gc__DisplayClass2.prototype.raiseReplaceInsteadOfRemove = false;

System.Windows.Controls.ListBox.prototype.get_ItemContainerStyle = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.ListBox.ItemContainerStyleProperty), System.Windows.Style);
};
System.Windows.Controls.ListBox.prototype.set_ItemContainerStyle = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.ListBox.ItemContainerStyleProperty, value);
};
System.Windows.Controls.ListBox.prototype.GetItemContainerStyle = function () {
	return this.ItemContainerStyle;
};
System.Windows.Controls.ListBox.prototype.ApplyItemContainerStyle = function (container, item) {
	System.Windows.Controls.ItemsControl.prototype.ApplyItemContainerStyle.call(this, container, item);
	var listBoxItem = JSIL.TryCast(container, System.Windows.Controls.ListBoxItem);
	if (!((listBoxItem !== null) && ((listBoxItem.ReadLocalValue(System.Windows.FrameworkElement.StyleProperty) === System.Windows.DependencyProperty.UnsetValue) || 
				listBoxItem.IsStyleSetFromItemsControl))) {
		return;
	}
	var itemContainerStyle = this.GetItemContainerStyle();
	if (itemContainerStyle !== null) {
		listBoxItem.Style = itemContainerStyle;
		listBoxItem.IsStyleSetFromItemsControl = true;
		return;
	}
	listBoxItem.ClearValue(System.Windows.FrameworkElement.StyleProperty);
	listBoxItem.IsStyleSetFromItemsControl = false;
};
System.Windows.Controls.ListBox.prototype.get_SelectionMode = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.ListBox.SelectionModeProperty), System.Windows.Controls.SelectionMode);
};
System.Windows.Controls.ListBox.prototype.set_SelectionMode = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.ListBox.SelectionModeProperty, value);
};
System.Windows.Controls.ListBox.OnSelectionModeChanged = function (d, e) {
	JSIL.Cast(d, System.Windows.Controls.ListBox).SelectionModeChanged(JSIL.Cast(e.OldValue, System.Windows.Controls.SelectionMode), JSIL.Cast(e.NewValue, System.Windows.Controls.SelectionMode));
};
System.Windows.Controls.ListBox.prototype.SelectionModeChanged = function (oldValue, newValue) {
	if (!(JSIL.Cast(newValue, System.Boolean) || (System.Windows.Controls.Primitives.Selector.prototype.get_SelectedIndex.call(this) === -1))) {
		this.MakeSingleSelection(System.Windows.Controls.Primitives.Selector.prototype.get_SelectedIndex.call(this));
	}
};
System.Windows.Controls.ListBox.prototype.get_SelectedItems = function () {
	return System.Windows.Controls.Primitives.Selector.prototype.get_SelectedItemsImpl.call(this);
};
System.Windows.Controls.ListBox.prototype.get_CanSelectMultiple = function () {
	return (this.SelectionMode !== System.Windows.Controls.SelectionMode.Single);
};
System.Windows.Controls.ListBox.prototype._ctor = function () {
	System.Windows.Controls.Primitives.Selector.prototype._ctor.call(this);
	System.Windows.Controls.Control.prototype.set_DefaultStyleKey.call(this, System.Windows.Controls.ListBox);
};
System.Windows.Controls.ListBox.prototype.OnApplyTemplate = function () {
	System.Windows.Controls.Primitives.Selector.prototype.OnApplyTemplate.call(this);
	if (!(System.Windows.Controls.ItemsControl.prototype.get_ItemsPanel.call(this) || !$asm02.MS.Internal.QuirksMode.ShouldListboxUseVirtualization())) {
		System.Windows.Controls.ItemsControl.prototype.set_ItemsHost.call(this, new System.Windows.Controls.VirtualizingStackPanel());
	}
};
System.Windows.Controls.ListBox.prototype.IsItemItsOwnContainerOverride = function (item) {
	return JSIL.CheckType(item, System.Windows.Controls.ListBoxItem);
};
System.Windows.Controls.ListBox.prototype.GetContainerForItemOverride = function () {
	var listBoxItem = new System.Windows.Controls.ListBoxItem();
	if (this.ItemContainerStyle !== null) {
		listBoxItem.Style = this.ItemContainerStyle;
	}
	return listBoxItem;
};
System.Windows.Controls.ListBox.prototype.OnCreateAutomationPeer = function () {
	return new System.Windows.Automation.Peers.ListBoxAutomationPeer(this);
};
System.Windows.Controls.ListBox.prototype.OnGotFocus = function (e) {
	System.Windows.Controls.Control.prototype.OnGotFocus.call(this, e);
	if (e.OriginalSource === this) {
		this.FocusChanged(this.HasFocus());
		return;
	}
	if ($asm02.MS.Internal.QuirksMode.ShouldListBoxUpdateIsSelectionActiveWhenFocusChanges()) {
		this.UpdateIsSelectionActive(this.HasFocus());
	}
};
System.Windows.Controls.ListBox.prototype.OnLostFocus = function (e) {
	System.Windows.Controls.Control.prototype.OnLostFocus.call(this, e);
	if (e.OriginalSource === this) {
		this.FocusChanged(this.HasFocus());
		return;
	}
	if ($asm02.MS.Internal.QuirksMode.ShouldListBoxUpdateIsSelectionActiveWhenFocusChanges()) {
		this.UpdateIsSelectionActive(this.HasFocus());
	}
};
System.Windows.Controls.ListBox.prototype.UpdateIsSelectionActive = function (haveFocus) {
	System.Windows.DependencyObject.prototype.SetValueInternal$1.call(this, System.Windows.Controls.ListBox.IsSelectionActiveProperty, haveFocus, true);
};
System.Windows.Controls.ListBox.prototype.FocusChanged = function (haveFocus) {
	this.UpdateIsSelectionActive(haveFocus);
	if (haveFocus) {
		System.Windows.Controls.Primitives.Selector.prototype.SetFocusedItem.call(this, (this._focusedIndex === -1) ? 0 : this._focusedIndex, true);
	}
};
System.Windows.Controls.ListBox.prototype.OnKeyDown = function (e) {
	System.Windows.Controls.Control.prototype.OnKeyDown.call(this, e);
	if (e.Handled) {
		return;
	}
	var flag = false;
	var num = -1;
	var key = e.Key;
	switch (Number(key)) {
		case 3: 
		case 9: 
			if (!(((System.Windows.Input.Key.Enter === e.Key) && 
						!$asm02.System.Windows.Input.KeyboardNavigation.GetAcceptsReturn(this)) || (System.Windows.Input.ModifierKeys.Alt === (System.Windows.Input.Keyboard.Modifiers & (System.Windows.Input.ModifierKeys.Alt | System.Windows.Input.ModifierKeys.Apple | System.Windows.Input.ModifierKeys.Control | System.Windows.Input.ModifierKeys.Windows))))) {
				var listBoxItem = JSIL.TryCast(System.Windows.Input.FocusManager.GetFocusedElement(), System.Windows.Controls.ListBoxItem);
				if (listBoxItem !== null) {
					this.HandleItemSelection(listBoxItem, false);
					flag = true;
				}
			}
			break;
		case 4: 
		case 5: 
		case 6: 
		case 7: 
		case 8: 
			break;
		case 10: 
		case 11: 
		case 12: 
		case 13: 
		case 14: 
		case 15: 
		case 16: 
		case 17: 
			num = System.Windows.Controls.Primitives.Selector.prototype.HandleNavigationKey.call(this, e.Key, this._focusedIndex, true);
			break;
		default: 
			if (key === System.Windows.Input.Key.A) {
				if (!(!this.IsMultiSelectModifierKeyPressed() || (this.SelectionMode !== System.Windows.Controls.SelectionMode.Extended))) {
					System.Windows.Controls.Primitives.Selector.prototype.SelectRange.call(this, 0, (System.Windows.Controls.ItemsControl.prototype.get_Items.call(this).Count - 1), false);
				}
			}
			break;
	}
	if (num !== -1) {
		flag = true;
		num = System.Math.Min(num, (System.Windows.Controls.ItemsControl.prototype.get_Items.call(this).Count - 1));
		if (0 <= num) {
			if (!((this.SelectionMode !== System.Windows.Controls.SelectionMode.Extended) || !(System.Windows.Input.Keyboard.Modifiers & System.Windows.Input.ModifierKeys.Shift))) {
				this.MakeRangeSelection(num, !this.IsMultiSelectModifierKeyPressed());
				System.Windows.Controls.Primitives.Selector.prototype.SetFocusedItem.call(this, num, true);
			} else if (!(!this.IsMultiSelectModifierKeyPressed() && (this.SelectionMode !== System.Windows.Controls.SelectionMode.Multiple))) {
				System.Windows.Controls.Primitives.Selector.prototype.SetFocusedItem.call(this, num, true);
			} else {
				this.MakeSingleSelection(num);
				System.Windows.Controls.Primitives.Selector.prototype.SetFocusedItem.call(this, num, true);
			}
		}
	}
	if (flag) {
		e.Handled = true;
	}
};
System.Windows.Controls.ListBox.prototype.OnListBoxItemClicked = function (item) {
	this.HandleItemSelection(item, true);
};
System.Windows.Controls.ListBox.prototype.IsMultiSelectModifierKeyPressed = function () {
	return ((System.Windows.Input.Keyboard.Modifiers & (System.Windows.Input.ModifierKeys.Apple | System.Windows.Input.ModifierKeys.Control | System.Windows.Input.ModifierKeys.Windows)) !== System.Windows.Input.ModifierKeys.None);
};
System.Windows.Controls.ListBox.prototype.HandleItemSelection = function (item, isMouseSelection) {
	switch (Number(this.SelectionMode)) {
		case 0: 
			if (this.IsMultiSelectModifierKeyPressed()) {
				this.MakeToggleSelection(System.Windows.Controls.ItemsControl.prototype.get_ItemContainerGenerator.call(this).IndexFromContainer$0(item));
				return;
			}
			this.MakeSingleSelection(System.Windows.Controls.ItemsControl.prototype.get_ItemContainerGenerator.call(this).IndexFromContainer$0(item));
			return;
		case 1: 
			this.MakeToggleSelection(System.Windows.Controls.ItemsControl.prototype.get_ItemContainerGenerator.call(this).IndexFromContainer$0(item));
			return;
		case 2: 
			if (!(!(System.Windows.Input.Keyboard.Modifiers & System.Windows.Input.ModifierKeys.Shift) || !this.IsMultiSelectModifierKeyPressed())) {
				if (isMouseSelection) {
					this.MakeRangeSelection(System.Windows.Controls.ItemsControl.prototype.get_ItemContainerGenerator.call(this).IndexFromContainer$0(item), false);
					return;
				}
			} else {
				if (System.Windows.Input.Keyboard.Modifiers & System.Windows.Input.ModifierKeys.Shift) {
					this.MakeRangeSelection(System.Windows.Controls.ItemsControl.prototype.get_ItemContainerGenerator.call(this).IndexFromContainer$0(item), true);
					return;
				}
				if (this.IsMultiSelectModifierKeyPressed()) {
					this.MakeToggleSelection(System.Windows.Controls.ItemsControl.prototype.get_ItemContainerGenerator.call(this).IndexFromContainer$0(item));
					return;
				}
				this.MakeSingleSelection(System.Windows.Controls.ItemsControl.prototype.get_ItemContainerGenerator.call(this).IndexFromContainer$0(item));
			}
			return;
		default: 
			return;
	}
};
System.Windows.Controls.ListBox.prototype.OnIsSelectionActiveChanged = function (oldValue, newValue) {
	var selectedIndex = System.Windows.Controls.Primitives.Selector.prototype.get_SelectedIndex.call(this);
	if (selectedIndex !== -1) {
		var listBoxItem = System.Windows.Controls.Primitives.Selector.prototype.GetListBoxItem.call(this, selectedIndex);
		if (listBoxItem !== null) {
			listBoxItem.ChangeVisualState$0();
		}
	}
};
System.Windows.Controls.ListBox.prototype.OnSelectionChanged = function (oldIndex, newIndex, oldValue, newValue) {
	if (!(!((newIndex !== -1) && 
				(oldIndex === -1)) && ((newIndex === -1) || 
				(oldIndex === newIndex) || 
				JSIL.Cast(this.SelectionMode, System.Boolean)))) {
		System.Windows.Controls.Primitives.Selector.prototype.SetFocusedItem.call(this, newIndex, true);
	}
};
System.Windows.Controls.ListBox.prototype.OnItemsChanged = function (e) {
	System.Windows.Controls.Primitives.Selector.prototype.OnItemsChanged.call(this, e);
	if (!this._anchorIndex.HasValue) {
		return;
	}
	switch (Number(e.Action)) {
		case 0: 
			var newStartingIndex = e.NewStartingIndex;
			var anchorIndex = this._anchorIndex.MemberwiseClone();
			if ((newStartingIndex <= anchorIndex.GetValueOrDefault$0()) && anchorIndex.HasValue) {
				var anchorIndex2 = this._anchorIndex.MemberwiseClone();
				var count = e.NewItems.ICollection_Count;
				this._anchorIndex = anchorIndex2.HasValue ? new (System.Nullable$b1.Of(System.Int32)) ((anchorIndex2.GetValueOrDefault$0() + count)) : new (System.Nullable$b1.Of(System.Int32)) ().MemberwiseClone();
				return;
			}
			break;
		case 1: 
			var oldStartingIndex = e.OldStartingIndex;
			var anchorIndex3 = this._anchorIndex.MemberwiseClone();
			if ((oldStartingIndex <= anchorIndex3.GetValueOrDefault$0()) && anchorIndex3.HasValue) {
				var num = (e.OldStartingIndex + e.OldItems.ICollection_Count);
				var anchorIndex4 = this._anchorIndex.MemberwiseClone();
				if ((num > anchorIndex4.GetValueOrDefault$0()) && anchorIndex4.HasValue) {
					this._anchorIndex = new (System.Nullable$b1.Of(System.Int32)) ();
					return;
				}
			}
			var oldStartingIndex2 = e.OldStartingIndex;
			var anchorIndex5 = this._anchorIndex.MemberwiseClone();
			if ((oldStartingIndex2 < anchorIndex5.GetValueOrDefault$0()) && anchorIndex5.HasValue) {
				var anchorIndex6 = this._anchorIndex.MemberwiseClone();
				var count2 = e.OldItems.ICollection_Count;
				this._anchorIndex = anchorIndex6.HasValue ? new (System.Nullable$b1.Of(System.Int32)) ((anchorIndex6.GetValueOrDefault$0() - count2)) : new (System.Nullable$b1.Of(System.Int32)) ().MemberwiseClone();
				return;
			}
			break;
		case 2: 
			var newStartingIndex2 = e.NewStartingIndex;
			var anchorIndex7 = this._anchorIndex.MemberwiseClone();
			if ((newStartingIndex2 <= anchorIndex7.GetValueOrDefault$0()) && anchorIndex7.HasValue) {
				var num2 = (e.NewStartingIndex + e.NewItems.ICollection_Count);
				var anchorIndex8 = this._anchorIndex.MemberwiseClone();
				if ((num2 > anchorIndex8.GetValueOrDefault$0()) && anchorIndex8.HasValue) {
					this._anchorIndex = new (System.Nullable$b1.Of(System.Int32)) ();
					return;
				}
			}
			break;
		case 3: 
			break;
		case 4: 
			this._anchorIndex = new (System.Nullable$b1.Of(System.Int32)) ();
			break;
		default: 
			return;
	}
};
System.Windows.Controls.ListBox.prototype.ScrollIntoView = function (item) {
	var num = System.Windows.Controls.ItemsControl.prototype.get_Items.call(this).IndexOf(item);
	if (num !== -1) {
		System.Windows.Controls.Primitives.Selector.prototype.SetFocusedItem.call(this, num, true);
	}
};
System.Windows.Controls.ListBox.prototype.MakeSingleSelection = function (index) {
	if (this.SelectionMode === System.Windows.Controls.SelectionMode.Extended) {
		this._anchorIndex = new (System.Nullable$b1.Of(System.Int32)) (index);
	}
	this._selectionChanger.SelectJustThisItem$1(System.Windows.Controls.Primitives.Selector.prototype.get_SelectedIndex.call(this), index);
};
System.Windows.Controls.ListBox.prototype.MakeToggleSelection = function (index) {
	if (this.SelectionMode === System.Windows.Controls.SelectionMode.Extended) {
		this._anchorIndex = new (System.Nullable$b1.Of(System.Int32)) (index);
	}
	var listBoxItem = JSIL.TryCast(System.Windows.Controls.ItemsControl.prototype.get_ItemContainerGenerator.call(this).ContainerFromIndex$0(index), System.Windows.Controls.ListBoxItem);
	if (listBoxItem !== null) {
		listBoxItem.IsSelected = !listBoxItem.IsSelected;
	}
};
System.Windows.Controls.ListBox.prototype.MakeRangeSelection = function (index, clearOldSelection) {
	if (index === -1) {
		return;
	}
	var num = this._anchorIndex.GetValueOrDefault$1(0);
	var endIndex = index;
	if (num > index) {
		endIndex = num;
		num = index;
	}
	System.Windows.Controls.Primitives.Selector.prototype.SelectRange.call(this, num, endIndex, clearOldSelection);
};
System.Windows.Controls.ListBox.prototype.SelectAll = function () {
	if ((this.SelectionMode !== System.Windows.Controls.SelectionMode.Extended) && (this.SelectionMode !== System.Windows.Controls.SelectionMode.Multiple)) {
		throw JSIL.New(System.NotSupportedException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("ListBox_CannotSelectAllIfSelectionModeNotMultipleOrExtended")]);
	}
	if (System.Windows.Controls.ItemsControl.prototype.get_Items.call(this).Count > 0) {
		System.Windows.Controls.Primitives.Selector.prototype.SelectRange.call(this, 0, (System.Windows.Controls.ItemsControl.prototype.get_Items.call(this).Count - 1), false);
		return;
	}
};
JSIL.MakeProperty(System.Windows.Controls.ListBox.prototype, "ItemContainerStyle", 
	System.Windows.Controls.ListBox.prototype.get_ItemContainerStyle, System.Windows.Controls.ListBox.prototype.set_ItemContainerStyle);
JSIL.MakeProperty(System.Windows.Controls.ListBox.prototype, "SelectionMode", 
	System.Windows.Controls.ListBox.prototype.get_SelectionMode, System.Windows.Controls.ListBox.prototype.set_SelectionMode);
JSIL.MakeProperty(System.Windows.Controls.ListBox.prototype, "SelectedItems", 
	System.Windows.Controls.ListBox.prototype.get_SelectedItems, null);
JSIL.MakeProperty(System.Windows.Controls.ListBox.prototype, "CanSelectMultiple", 
	System.Windows.Controls.ListBox.prototype.get_CanSelectMultiple, null);
System.Windows.Controls.ListBox.IsSelectionActiveProperty = null;
System.Windows.Controls.ListBox.ItemContainerStyleProperty = null;
System.Windows.Controls.ListBox.SelectionModeProperty = null;
System.Windows.Controls.ListBox._cctor = function () {
	System.Windows.Controls.ListBox.IsSelectionActiveProperty = System.Windows.Controls.Primitives.Selector.IsSelectionActiveProperty.AddOwner(System.Windows.Controls.ListBox);
	System.Windows.Controls.ListBox.ItemContainerStyleProperty = System.Windows.DependencyProperty.Register$0("ItemContainerStyle", System.Windows.Style, System.Windows.Controls.ListBox, JSIL.New(System.Windows.PropertyMetadata, "_ctor$0", [JSIL.Delegate.New("System.Windows.PropertyChangedCallback", null, System.Windows.Controls.ItemsControl.OnItemContainerStyleChanged)]));
	System.Windows.Controls.ListBox.SelectionModeProperty = System.Windows.DependencyProperty.Register$0("SelectionMode", System.Windows.Controls.SelectionMode, System.Windows.Controls.ListBox, JSIL.New(System.Windows.PropertyMetadata, "_ctor$2", [System.Windows.Controls.SelectionMode.Single, JSIL.Delegate.New("System.Windows.PropertyChangedCallback", null, System.Windows.Controls.ListBox.OnSelectionModeChanged)]));
};

System.Windows.Controls.OpenFileDialog.prototype.get_Filter = function () {
	$asm02.System.Windows.Hosting.NativeHost.Current.VerifyThread();
	if (this._filter !== null) {
		return this._filter;
	}
	return System.String.Empty;
};
System.Windows.Controls.OpenFileDialog.prototype.set_Filter = function (value) {
	$asm02.System.Windows.Hosting.NativeHost.Current.VerifyThread();
	if (value != this._filter) {
		if (System.String.IsNullOrEmpty(value)) {
			value = null;
		}
		this._cleanFilter = System.Windows.Controls.OpenFileDialog.CleanAndValidateFilter(value);
		this._filter = value;
	}
};
System.Windows.Controls.OpenFileDialog.CleanAndValidateFilter = function (filter) {
	if (System.String.IsNullOrEmpty(filter)) {
		return null;
	}
	var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
	var array = filter.Split(JSIL.Array.New(System.Char, ["|"]));
	if (!((array !== null) && !(array.length % 2))) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("FileDialog_InvalidFilter")]);
	}
__loop0__: 
	for (var i = 0; i < array.length; i += 2) {
		stringBuilder.Append$2(array[i]).Append$7("|");
		var array2 = (array[(i + 1)]).Split(JSIL.Array.New(System.Char, [";"]));
	__loop1__: 
		for (var j = 0; j < array2.length; ++j) {
			var text = array2[j].Trim$1();
			if (!(!(text == "*") && (!(text == System.String.Empty) || 
						(array2.length !== 1)))) {
				text = "*.*";
			}
			if (!(text == System.String.Empty)) {
				if (!($asm02.MS.Internal.QuirksMode.ShouldAllowComplexFileDialogFilters() || 
						!(text != "*.*") || (text.StartsWith$0("*.") && 
							!(text.Substring$0(1)).Contains("*") && 
							!(text.Substring$0(1)).Contains("?")))) {
					throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("FileDialog_InvalidFilter")]);
				}
				stringBuilder.Append$2(text).Append$7(";");
			}
		}
		if (!((stringBuilder.Length <= 0) || (stringBuilder.get_Chars((stringBuilder.Length - 1)) !== ";"))) {
			stringBuilder.Remove$0((stringBuilder.Length - 1), 1);
		}
		stringBuilder.Append$7("|");
	}
	if (!((stringBuilder.Length <= 0) || (stringBuilder.get_Chars((stringBuilder.Length - 1)) !== "|"))) {
		stringBuilder.Remove$0((stringBuilder.Length - 1), 1);
	}
	return stringBuilder.toString();
};
System.Windows.Controls.OpenFileDialog.prototype.get_FilterIndex = function () {
	$asm02.System.Windows.Hosting.NativeHost.Current.VerifyThread();
	return this._filterIndex;
};
System.Windows.Controls.OpenFileDialog.prototype.set_FilterIndex = function (value) {
	$asm02.System.Windows.Hosting.NativeHost.Current.VerifyThread();
	if (value < 1) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["FilterIndex"]);
	}
	this._filterIndex = value;
};
System.Windows.Controls.OpenFileDialog.prototype.get_Multiselect = function () {
	$asm02.System.Windows.Hosting.NativeHost.Current.VerifyThread();
	return (($asm02.System.Windows.Hosting.NativeMethods.OpenFileNameFlags.OFN_ALLOWMULTISELECT & this._flags) !== 0);
};
System.Windows.Controls.OpenFileDialog.prototype.set_Multiselect = function (value) {
	$asm02.System.Windows.Hosting.NativeHost.Current.VerifyThread();
	if (value) {
		this._flags = (this._flags | $asm02.System.Windows.Hosting.NativeMethods.OpenFileNameFlags.OFN_ALLOWMULTISELECT);
		return;
	}
	this._flags = (this._flags & -513);
};
System.Windows.Controls.OpenFileDialog.prototype.get_File = function () {
	$asm02.System.Windows.Hosting.NativeHost.Current.VerifyThread();
	if (!((this._selectedFiles === null) || (this._selectedFiles.length <= 0))) {
		return this._selectedFiles[0];
	}
	return null;
};
System.Windows.Controls.OpenFileDialog.prototype.get_Files = function () {
	$asm02.System.Windows.Hosting.NativeHost.Current.VerifyThread();
	return this._selectedFiles;
};
System.Windows.Controls.OpenFileDialog.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
	$asm02.System.Windows.Hosting.NativeHost.Current.VerifyThread();
	this._flags = 8916996;
};
System.Windows.Controls.OpenFileDialog.prototype.ShowDialog = function () {
	$asm02.System.Windows.Hosting.NativeHost.Current.VerifyThread();
	if ($asm02.System.Windows.Hosting.NativeHost.Current.BrowserService === null) {
		throw JSIL.New(System.Security.SecurityException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("FileDialog_ActiveScripting")]);
	}
	var openFileNameInfo = new JSIL.Variable(new $asm02.System.Windows.Hosting.NativeMethods.OpenFileNameInfo());
	var pszValue = null;
	if (this._cleanFilter !== null) {
		pszValue = System.Windows.Controls.OpenFileDialog.MakeFilterString(this._cleanFilter);
		openFileNameInfo.value.nFilterIndex = this._filterIndex;
	}
	openFileNameInfo.value.lpstrFilter = $asm02.System.Windows.Hosting.NativeHost.Current.RuntimeHost.IManagedRuntimeHost_AllocMemory$0(pszValue);
	openFileNameInfo.value.Flags = this._flags;
	var dialogResult = new JSIL.Variable($asm02.System.Windows.Controls.DialogResult.None);
	var openFileName = $asm02.System.Windows.Hosting.NativeHost.Current.BrowserService.IBrowserService_GetOpenFileName(/* ref */ openFileNameInfo, /* ref */ dialogResult);
	$asm02.System.Windows.Hosting.NativeHost.Current.RuntimeHost.IManagedRuntimeHost_FreeMemory(openFileNameInfo.value.lpstrFilter);
	if (System.IntPtr.op_Inequality(openFileNameInfo.value.lpstrFile, System.IntPtr.Zero)) {
		if (dialogResult.value === $asm02.System.Windows.Controls.DialogResult.OK) {
			this._filterIndex = openFileNameInfo.value.nFilterIndex;
			var file = $asm02.System.Windows.Hosting.NativeHost.Current.RuntimeHost.IManagedRuntimeHost_PtrToStringUni$1(openFileNameInfo.value.lpstrFile, openFileNameInfo.value.nMaxFile);
			this.ParseFileNames(file);
		}
		$asm02.System.Windows.Hosting.NativeHost.Current.RuntimeHost.IManagedRuntimeHost_FreeMemory(openFileNameInfo.value.lpstrFile);
	}
	if (openFileName === -2147024891) {
		throw JSIL.New(System.Security.SecurityException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("FileDialog_UserInitiated")]);
	}
	if (openFileName !== 0) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("FileDialog_ShowDialogFailed")]);
	}
	return new (System.Nullable$b1.Of(System.Boolean)) ((dialogResult.value === $asm02.System.Windows.Controls.DialogResult.OK));
};
System.Windows.Controls.OpenFileDialog.prototype.ParseFileNames = function (file) {
	var num = 0;
	var num2 = 0;
	var array = null;
__loop0__: 
	for (var i = 0; i < file.length; ++i) {
		if (!JSIL.Cast(file[i], System.Boolean)) {
			++num;
			if (!(!(!this.Multiselect || 
						(this.Multiselect && 
							(i === (file.length - 1)))) && (!this.Multiselect || 
						JSIL.Cast(file[(i + 1)], System.Boolean)))) {
				if (num > 1) {
					--num;
				}
				num2 = i;
				break __loop0__;
			}
		}
	}
	if (num > 0) {
		array = JSIL.Array.New(System.IO.FileInfo, num);
		var num3 = 0;
		var text = null;
	__loop1__: 
		for (var j = 0; j < num2; ++j) {
			var text2 = System.Windows.Controls.OpenFileDialog.ParseFileName(file, j);
			j += text2.length;
			if (text === null) {
				text = text2;
			} else {
				var fileName = System.IO.Path.GetFileName(text2);
				text2 = System.IO.Path.Combine$0(text, fileName);
				array[num3++] = System.IO.FileInfo.UnsafeCreateFileInfo(text2);
			}
		}
		if (num3 < num) {
			array[num3++] = System.IO.FileInfo.UnsafeCreateFileInfo(text);
		}
	}
	this._selectedFiles = array;
};
System.Windows.Controls.OpenFileDialog.ParseFileName = function (file, startIndex) {
	var num = file.IndexOf$1("\0", startIndex);
	if (num < 0) {
		return null;
	}
	return file.Substring$1(startIndex, (num - startIndex));
};
System.Windows.Controls.OpenFileDialog.MakeFilterString = function (filter) {
	var length = filter.length;
	var array = JSIL.Array.New(System.Char, (length + 2));
	filter.CopyTo(0, array, 0, length);
__loop0__: 
	for (var i = 0; i < length; ++i) {
		if (array[i] === "|") {
			array[i] = "\0";
		}
	}
	array[(length + 1)] = "\0";
	return JSIL.New(System.String, "_ctor$1", [array]);
};
JSIL.MakeProperty(System.Windows.Controls.OpenFileDialog.prototype, "Filter", 
	System.Windows.Controls.OpenFileDialog.prototype.get_Filter, System.Windows.Controls.OpenFileDialog.prototype.set_Filter);
JSIL.MakeProperty(System.Windows.Controls.OpenFileDialog.prototype, "FilterIndex", 
	System.Windows.Controls.OpenFileDialog.prototype.get_FilterIndex, System.Windows.Controls.OpenFileDialog.prototype.set_FilterIndex);
JSIL.MakeProperty(System.Windows.Controls.OpenFileDialog.prototype, "Multiselect", 
	System.Windows.Controls.OpenFileDialog.prototype.get_Multiselect, System.Windows.Controls.OpenFileDialog.prototype.set_Multiselect);
JSIL.MakeProperty(System.Windows.Controls.OpenFileDialog.prototype, "File", 
	System.Windows.Controls.OpenFileDialog.prototype.get_File, null);
JSIL.MakeProperty(System.Windows.Controls.OpenFileDialog.prototype, "Files", 
	System.Windows.Controls.OpenFileDialog.prototype.get_Files, null);
System.Windows.Controls.OpenFileDialog.prototype._selectedFiles = null;
System.Windows.Controls.OpenFileDialog.prototype._filter = null;
System.Windows.Controls.OpenFileDialog.prototype._filterIndex = 0;
System.Windows.Controls.OpenFileDialog.prototype._flags = 0;
System.Windows.Controls.OpenFileDialog.prototype._cleanFilter = null;

System.Windows.Controls.SaveFileDialog.prototype.get_Filter = function () {
	$asm02.System.Windows.Hosting.NativeHost.Current.VerifyThread();
	return this.m_strFilter;
};
System.Windows.Controls.SaveFileDialog.prototype.set_Filter = function (value) {
	$asm02.System.Windows.Hosting.NativeHost.Current.VerifyThread();
	if (System.String.CompareOrdinal$0(value, this.m_strFilter) !== 0) {
		if (System.String.IsNullOrEmpty(value)) {
			value = System.String.Empty;
		}
		this.m_strCleanFilter = System.Windows.Controls.OpenFileDialog.CleanAndValidateFilter(value);
		this.m_strFilter = value;
		this.m_fGoodFilter = true;
	}
};
System.Windows.Controls.SaveFileDialog.prototype.get_DefaultExt = function () {
	$asm02.System.Windows.Hosting.NativeHost.Current.VerifyThread();
	return this.m_strDefaultExt;
};
System.Windows.Controls.SaveFileDialog.prototype.set_DefaultExt = function (value) {
	$asm02.System.Windows.Hosting.NativeHost.Current.VerifyThread();
	if (value != this.m_strDefaultExt) {
		if (!System.String.IsNullOrEmpty(value)) {
			if (value.StartsWith$1(".", System.StringComparison.Ordinal)) {
				value = value.Substring$0(1);
			}
		} else {
			value = System.String.Empty;
		}
	}
	this.m_strDefaultExt = value;
};
System.Windows.Controls.SaveFileDialog.prototype.get_FilterIndex = function () {
	$asm02.System.Windows.Hosting.NativeHost.Current.VerifyThread();
	return this.m_nFilterIndex;
};
System.Windows.Controls.SaveFileDialog.prototype.set_FilterIndex = function (value) {
	$asm02.System.Windows.Hosting.NativeHost.Current.VerifyThread();
	if (value < 1) {
		this.m_fGoodFilterIndex = false;
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["FilterIndex"]);
	}
	this.m_nFilterIndex = value;
	this.m_fGoodFilterIndex = true;
};
System.Windows.Controls.SaveFileDialog.prototype.get_SafeFileName = function () {
	$asm02.System.Windows.Hosting.NativeHost.Current.VerifyThread();
	if (!((this.m_selectedFile !== null) && !System.String.IsNullOrEmpty(this.m_selectedFile.Name))) {
		var result = System.String.Empty;
	} else {
		result = this.File.Name;
	}
	return result;
};
System.Windows.Controls.SaveFileDialog.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
	$asm02.System.Windows.Hosting.NativeHost.Current.VerifyThread();
	this._flags = 8388614;
	this.m_strFilter = System.String.Empty;
	this.m_strCleanFilter = System.String.Empty;
	this.m_strDefaultExt = System.String.Empty;
	this.m_nFilterIndex = 1;
	this.m_fProtectedMode = false;
	this.m_fOpenFileCalled = false;
	this.m_fGoodFilterIndex = true;
	this.m_fGoodFilter = true;
	this.m_dlgInfo = new $asm02.System.Windows.Hosting.NativeMethods.OpenFileNameInfo();
};
System.Windows.Controls.SaveFileDialog.prototype.ShowDialog = function () {
	$asm02.System.Windows.Hosting.NativeHost.Current.VerifyThread();
	if ($asm02.System.Windows.Hosting.NativeHost.Current.BrowserService === null) {
		throw JSIL.New(System.Security.SecurityException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("FileDialog_ActiveScripting")]);
	}
	var dialogResult = new JSIL.Variable($asm02.System.Windows.Controls.DialogResult.None);
	var num = 0;
	if (!(this.m_fGoodFilter && 
			this.m_fGoodFilterIndex && this.SetupDialog())) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("FileDialog_ShowDialogFailed")]);
	}
	try {
		num = $asm02.System.Windows.Hosting.NativeHost.Current.BrowserService.IBrowserService_GetSaveFileName(/* ref */ new JSIL.MemberReference(this, "m_dlgInfo"), /* ref */ dialogResult);
		if (!(!$asm02.System.Windows.Hosting.NativeMethods.SUCCEEDED(num) || 
				!System.IntPtr.op_Inequality(this.m_dlgInfo.lpstrFile, System.IntPtr.Zero) || (dialogResult.value !== $asm02.System.Windows.Controls.DialogResult.OK))) {
			this.m_nFilterIndex = this.m_dlgInfo.nFilterIndex;
			var text = $asm02.System.Windows.Hosting.NativeHost.Current.RuntimeHost.IManagedRuntimeHost_PtrToStringUni$1(this.m_dlgInfo.lpstrFile, this.m_dlgInfo.nMaxFile);
			text = text.Substring$1(0, text.IndexOf$0("\0"));
			this.m_selectedFile = System.IO.FileInfo.UnsafeCreateFileInfo(text);
			this.m_fOpenFileCalled = false;
		}
	} finally {
		this.DisposeResources();
	}
	if (num === -2147024891) {
		throw JSIL.New(System.Security.SecurityException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("FileDialog_UserInitiated")]);
	}
	if (num !== 0) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("FileDialog_ShowDialogFailed")]);
	}
	return new (System.Nullable$b1.Of(System.Boolean)) ((dialogResult.value === $asm02.System.Windows.Controls.DialogResult.OK));
};
System.Windows.Controls.SaveFileDialog.prototype.OpenFile = function () {
	$asm02.System.Windows.Hosting.NativeHost.Current.VerifyThread();
	if (!((this.m_selectedFile !== null) && 
			!System.String.IsNullOrEmpty(this.m_selectedFile.UnsafeGetFullName) && !this.m_fOpenFileCalled)) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("FileDialog_NoFileSelected")]);
	}
	if (this.m_fProtectedMode) {
		try {
			this.m_strTempFile = System.IO.Path.GetTempFileName();
		} catch ($exception) {
			var e = $exception;
			if ($asm02.MS.Internal.Error.IsCriticalException(e)) {
				throw $exception;
			}
			if ($asm02.MS.Internal.XcpImports.SaveFileDialog_GetIEProtectedModeTempFileName(/* ref */ new JSIL.MemberReference(this, "m_strTempFile")) !== 0) {
				throw $exception;
			}
		}
		var path = this.m_strTempFile;
	} else {
		path = this.m_selectedFile.UnsafeGetFullName;
	}
	this.m_fOpenFileCalled = true;
	return new $asm02.System.Windows.SaveFileStream(path, this);
};
System.Windows.Controls.SaveFileDialog.prototype.get_File = function () {
	$asm02.System.Windows.Hosting.NativeHost.Current.VerifyThread();
	return this.m_selectedFile;
};
System.Windows.Controls.SaveFileDialog.prototype.CloseFile = function () {
	var zero = new JSIL.Variable(System.IntPtr.Zero);
	if ($asm02.System.Windows.Hosting.NativeHost.Current.BrowserService !== null) {
		$asm02.System.Windows.Hosting.NativeHost.Current.BrowserService.IBrowserService_GetDocumentUri(/* ref */ zero);
		if (System.IntPtr.op_Inequality(zero.value, System.IntPtr.Zero)) {
			var appUrl = $asm02.System.Windows.Hosting.NativeHost.Current.RuntimeHost.IManagedRuntimeHost_PtrToStringUni$0(zero.value);
			$asm02.System.Windows.Hosting.NativeHost.Current.BrowserService.IBrowserService_CloseSavedFile(appUrl, this.m_selectedFile.UnsafeGetFullName, this.m_strTempFile);
			$asm02.System.Windows.Hosting.NativeHost.Current.RuntimeHost.IManagedRuntimeHost_FreeMemory(zero.value);
		}
	}
	if (!(!this.m_fProtectedMode || !System.IO.File.UnsafeExists(this.m_strTempFile))) {
		System.IO.File.UnsafeDelete(this.m_strTempFile);
	}
};
System.Windows.Controls.SaveFileDialog.FormatFilterString = function (filter, fProtected) {
	if (fProtected) {
		filter = ((filter + "|"));
	} else {
		filter = filter.Replace$0("|", "\0");
		filter = ((filter + "\0\0"));
	}
	return filter;
};
System.Windows.Controls.SaveFileDialog.prototype.SetupDialog = JSIL.UntranslatableFunction("System.Boolean System.Windows.Controls.SaveFileDialog::SetupDialog()");
System.Windows.Controls.SaveFileDialog.prototype.DisposeResources = function () {
	$asm02.System.Windows.Hosting.NativeHost.Current.RuntimeHost.IManagedRuntimeHost_FreeMemory(this.m_dlgInfo.lpstrFilter);
	$asm02.System.Windows.Hosting.NativeHost.Current.RuntimeHost.IManagedRuntimeHost_FreeMemory(this.m_dlgInfo.lpstrDefExt);
	$asm02.System.Windows.Hosting.NativeHost.Current.RuntimeHost.IManagedRuntimeHost_FreeMemory(this.m_dlgInfo.lpstrFile);
};
JSIL.MakeProperty(System.Windows.Controls.SaveFileDialog.prototype, "Filter", 
	System.Windows.Controls.SaveFileDialog.prototype.get_Filter, System.Windows.Controls.SaveFileDialog.prototype.set_Filter);
JSIL.MakeProperty(System.Windows.Controls.SaveFileDialog.prototype, "DefaultExt", 
	System.Windows.Controls.SaveFileDialog.prototype.get_DefaultExt, System.Windows.Controls.SaveFileDialog.prototype.set_DefaultExt);
JSIL.MakeProperty(System.Windows.Controls.SaveFileDialog.prototype, "FilterIndex", 
	System.Windows.Controls.SaveFileDialog.prototype.get_FilterIndex, System.Windows.Controls.SaveFileDialog.prototype.set_FilterIndex);
JSIL.MakeProperty(System.Windows.Controls.SaveFileDialog.prototype, "SafeFileName", 
	System.Windows.Controls.SaveFileDialog.prototype.get_SafeFileName, null);
JSIL.MakeProperty(System.Windows.Controls.SaveFileDialog.prototype, "File", 
	System.Windows.Controls.SaveFileDialog.prototype.get_File, null);
System.Windows.Controls.SaveFileDialog.prototype.m_selectedFile = null;
System.Windows.Controls.SaveFileDialog.prototype.m_strFilter = null;
System.Windows.Controls.SaveFileDialog.prototype.m_strCleanFilter = null;
System.Windows.Controls.SaveFileDialog.prototype.m_strDefaultExt = null;
System.Windows.Controls.SaveFileDialog.prototype.m_strTempFile = null;
System.Windows.Controls.SaveFileDialog.prototype.m_strInitialFileName = null;
System.Windows.Controls.SaveFileDialog.prototype.m_nFilterIndex = 0;
System.Windows.Controls.SaveFileDialog.prototype.m_fProtectedMode = false;
System.Windows.Controls.SaveFileDialog.prototype.m_fGoodFilter = false;
System.Windows.Controls.SaveFileDialog.prototype.m_fGoodFilterIndex = false;
System.Windows.Controls.SaveFileDialog.prototype.m_fOpenFileCalled = false;
System.Windows.Controls.SaveFileDialog.prototype._flags = 0;

System.Windows.Controls.Primitives.DragCompletedEventArgs.prototype._ctor = function (horizontalChange, verticalChange, canceled) {
	System.Windows.RoutedEventArgs.prototype._ctor.call(this);
	this.Canceled = canceled;
	this.HorizontalChange = horizontalChange;
	this.VerticalChange = verticalChange;
};
System.Windows.Controls.Primitives.DragCompletedEventArgs.prototype.get_HorizontalChange = function () {
	return this.HorizontalChange$value;
};
System.Windows.Controls.Primitives.DragCompletedEventArgs.prototype.set_HorizontalChange = function (value) {
	this.HorizontalChange$value = value;
};
System.Windows.Controls.Primitives.DragCompletedEventArgs.prototype.get_VerticalChange = function () {
	return this.VerticalChange$value;
};
System.Windows.Controls.Primitives.DragCompletedEventArgs.prototype.set_VerticalChange = function (value) {
	this.VerticalChange$value = value;
};
System.Windows.Controls.Primitives.DragCompletedEventArgs.prototype.get_Canceled = function () {
	return this.Canceled$value;
};
System.Windows.Controls.Primitives.DragCompletedEventArgs.prototype.set_Canceled = function (value) {
	this.Canceled$value = value;
};
JSIL.MakeProperty(System.Windows.Controls.Primitives.DragCompletedEventArgs.prototype, "HorizontalChange", 
	System.Windows.Controls.Primitives.DragCompletedEventArgs.prototype.get_HorizontalChange, System.Windows.Controls.Primitives.DragCompletedEventArgs.prototype.set_HorizontalChange);
JSIL.MakeProperty(System.Windows.Controls.Primitives.DragCompletedEventArgs.prototype, "VerticalChange", 
	System.Windows.Controls.Primitives.DragCompletedEventArgs.prototype.get_VerticalChange, System.Windows.Controls.Primitives.DragCompletedEventArgs.prototype.set_VerticalChange);
JSIL.MakeProperty(System.Windows.Controls.Primitives.DragCompletedEventArgs.prototype, "Canceled", 
	System.Windows.Controls.Primitives.DragCompletedEventArgs.prototype.get_Canceled, System.Windows.Controls.Primitives.DragCompletedEventArgs.prototype.set_Canceled);
System.Windows.Controls.Primitives.DragCompletedEventArgs.prototype.HorizontalChange$value = 0;
System.Windows.Controls.Primitives.DragCompletedEventArgs.prototype.VerticalChange$value = 0;
System.Windows.Controls.Primitives.DragCompletedEventArgs.prototype.Canceled$value = false;

System.Windows.Controls.Primitives.DragDeltaEventArgs.prototype._ctor = function (horizontalChange, verticalChange) {
	System.Windows.RoutedEventArgs.prototype._ctor.call(this);
	this.HorizontalChange = horizontalChange;
	this.VerticalChange = verticalChange;
};
System.Windows.Controls.Primitives.DragDeltaEventArgs.prototype.get_HorizontalChange = function () {
	return this.HorizontalChange$value;
};
System.Windows.Controls.Primitives.DragDeltaEventArgs.prototype.set_HorizontalChange = function (value) {
	this.HorizontalChange$value = value;
};
System.Windows.Controls.Primitives.DragDeltaEventArgs.prototype.get_VerticalChange = function () {
	return this.VerticalChange$value;
};
System.Windows.Controls.Primitives.DragDeltaEventArgs.prototype.set_VerticalChange = function (value) {
	this.VerticalChange$value = value;
};
JSIL.MakeProperty(System.Windows.Controls.Primitives.DragDeltaEventArgs.prototype, "HorizontalChange", 
	System.Windows.Controls.Primitives.DragDeltaEventArgs.prototype.get_HorizontalChange, System.Windows.Controls.Primitives.DragDeltaEventArgs.prototype.set_HorizontalChange);
JSIL.MakeProperty(System.Windows.Controls.Primitives.DragDeltaEventArgs.prototype, "VerticalChange", 
	System.Windows.Controls.Primitives.DragDeltaEventArgs.prototype.get_VerticalChange, System.Windows.Controls.Primitives.DragDeltaEventArgs.prototype.set_VerticalChange);
System.Windows.Controls.Primitives.DragDeltaEventArgs.prototype.HorizontalChange$value = 0;
System.Windows.Controls.Primitives.DragDeltaEventArgs.prototype.VerticalChange$value = 0;

System.Windows.Controls.Primitives.DragStartedEventArgs.prototype._ctor = function (horizontalOffset, verticalOffset) {
	System.Windows.RoutedEventArgs.prototype._ctor.call(this);
	this.HorizontalOffset = horizontalOffset;
	this.VerticalOffset = verticalOffset;
};
System.Windows.Controls.Primitives.DragStartedEventArgs.prototype.get_HorizontalOffset = function () {
	return this.HorizontalOffset$value;
};
System.Windows.Controls.Primitives.DragStartedEventArgs.prototype.set_HorizontalOffset = function (value) {
	this.HorizontalOffset$value = value;
};
System.Windows.Controls.Primitives.DragStartedEventArgs.prototype.get_VerticalOffset = function () {
	return this.VerticalOffset$value;
};
System.Windows.Controls.Primitives.DragStartedEventArgs.prototype.set_VerticalOffset = function (value) {
	this.VerticalOffset$value = value;
};
JSIL.MakeProperty(System.Windows.Controls.Primitives.DragStartedEventArgs.prototype, "HorizontalOffset", 
	System.Windows.Controls.Primitives.DragStartedEventArgs.prototype.get_HorizontalOffset, System.Windows.Controls.Primitives.DragStartedEventArgs.prototype.set_HorizontalOffset);
JSIL.MakeProperty(System.Windows.Controls.Primitives.DragStartedEventArgs.prototype, "VerticalOffset", 
	System.Windows.Controls.Primitives.DragStartedEventArgs.prototype.get_VerticalOffset, System.Windows.Controls.Primitives.DragStartedEventArgs.prototype.set_VerticalOffset);
System.Windows.Controls.Primitives.DragStartedEventArgs.prototype.HorizontalOffset$value = 0;
System.Windows.Controls.Primitives.DragStartedEventArgs.prototype.VerticalOffset$value = 0;

System.Windows.Controls.Primitives.GeneratorPosition.prototype.get_Index = function () {
	return this._index;
};
System.Windows.Controls.Primitives.GeneratorPosition.prototype.set_Index = function (value) {
	this._index = value;
};
System.Windows.Controls.Primitives.GeneratorPosition.prototype.get_Offset = function () {
	return this._offset;
};
System.Windows.Controls.Primitives.GeneratorPosition.prototype.set_Offset = function (value) {
	this._offset = value;
};
System.Windows.Controls.Primitives.GeneratorPosition.prototype._ctor = function (index, offset) {
	this._index = index;
	this._offset = offset;
};
System.Windows.Controls.Primitives.GeneratorPosition.prototype.GetHashCode = function () {
	return (this._index.GetHashCode() + this._offset.GetHashCode());
};
System.Windows.Controls.Primitives.GeneratorPosition.prototype.toString = function () {
	return JSIL.ConcatString.apply(null, JSIL.Array.New(System.String, ["GeneratorPosition (", (this._index).toString(), ",", (this._offset).toString(), ")"]));
};
System.Windows.Controls.Primitives.GeneratorPosition.prototype.Equals = function (o) {
	if (JSIL.TryCast(o, System.Windows.Controls.Primitives.GeneratorPosition) !== new System.Windows.Controls.Primitives.GeneratorPosition()) {
		var generatorPosition = JSIL.Cast(o, System.Windows.Controls.Primitives.GeneratorPosition).MemberwiseClone();
		return ((this._index === generatorPosition._index) && (this._offset === generatorPosition._offset));
	}
	return false;
};
System.Windows.Controls.Primitives.GeneratorPosition.op_Equality = function (gp1, gp2) {
	return ((gp1._index === gp2._index) && (gp1._offset === gp2._offset));
};
System.Windows.Controls.Primitives.GeneratorPosition.op_Inequality = function (gp1, gp2) {
	return !System.Windows.Controls.Primitives.GeneratorPosition.op_Equality(gp1, gp2);
};
JSIL.MakeProperty(System.Windows.Controls.Primitives.GeneratorPosition.prototype, "Index", 
	System.Windows.Controls.Primitives.GeneratorPosition.prototype.get_Index, System.Windows.Controls.Primitives.GeneratorPosition.prototype.set_Index);
JSIL.MakeProperty(System.Windows.Controls.Primitives.GeneratorPosition.prototype, "Offset", 
	System.Windows.Controls.Primitives.GeneratorPosition.prototype.get_Offset, System.Windows.Controls.Primitives.GeneratorPosition.prototype.set_Offset);
System.Windows.Controls.Primitives.GeneratorPosition.prototype._index = 0;
System.Windows.Controls.Primitives.GeneratorPosition.prototype._offset = 0;

System.Windows.Controls.Primitives.ItemsChangedEventArgs.prototype._ctor$0 = function (action, position, oldPosition, itemCount, itemUICount) {
	System.EventArgs.prototype._ctor.call(this);
	this._action = action;
	this._position = position;
	this._oldPosition = oldPosition;
	this._itemCount = itemCount;
	this._itemUICount = itemUICount;
};
System.Windows.Controls.Primitives.ItemsChangedEventArgs.prototype._ctor$1 = function (action, position, itemCount, itemUICount) {
	this._ctor$0(
		action, 
		position, 
		new System.Windows.Controls.Primitives.GeneratorPosition(-1, 0), 
		itemCount, 
		itemUICount
	);
};
System.Windows.Controls.Primitives.ItemsChangedEventArgs.prototype.get_Action = function () {
	return this._action;
};
System.Windows.Controls.Primitives.ItemsChangedEventArgs.prototype.get_Position = function () {
	return this._position;
};
System.Windows.Controls.Primitives.ItemsChangedEventArgs.prototype.get_OldPosition = function () {
	return this._oldPosition;
};
System.Windows.Controls.Primitives.ItemsChangedEventArgs.prototype.get_ItemCount = function () {
	return this._itemCount;
};
System.Windows.Controls.Primitives.ItemsChangedEventArgs.prototype.get_ItemUICount = function () {
	return this._itemUICount;
};
JSIL.OverloadedMethod(System.Windows.Controls.Primitives.ItemsChangedEventArgs.prototype, "_ctor", [
		["_ctor$0", [System.Collections.Specialized.NotifyCollectionChangedAction, System.Windows.Controls.Primitives.GeneratorPosition, System.Windows.Controls.Primitives.GeneratorPosition, System.Int32, System.Int32]], 
		["_ctor$1", [System.Collections.Specialized.NotifyCollectionChangedAction, System.Windows.Controls.Primitives.GeneratorPosition, System.Int32, System.Int32]]
	]);
JSIL.MakeProperty(System.Windows.Controls.Primitives.ItemsChangedEventArgs.prototype, "Action", 
	System.Windows.Controls.Primitives.ItemsChangedEventArgs.prototype.get_Action, null);
JSIL.MakeProperty(System.Windows.Controls.Primitives.ItemsChangedEventArgs.prototype, "Position", 
	System.Windows.Controls.Primitives.ItemsChangedEventArgs.prototype.get_Position, null);
JSIL.MakeProperty(System.Windows.Controls.Primitives.ItemsChangedEventArgs.prototype, "OldPosition", 
	System.Windows.Controls.Primitives.ItemsChangedEventArgs.prototype.get_OldPosition, null);
JSIL.MakeProperty(System.Windows.Controls.Primitives.ItemsChangedEventArgs.prototype, "ItemCount", 
	System.Windows.Controls.Primitives.ItemsChangedEventArgs.prototype.get_ItemCount, null);
JSIL.MakeProperty(System.Windows.Controls.Primitives.ItemsChangedEventArgs.prototype, "ItemUICount", 
	System.Windows.Controls.Primitives.ItemsChangedEventArgs.prototype.get_ItemUICount, null);
System.Windows.Controls.Primitives.ItemsChangedEventArgs.prototype._action = 0;
System.Windows.Controls.Primitives.ItemsChangedEventArgs.prototype._itemCount = 0;
System.Windows.Controls.Primitives.ItemsChangedEventArgs.prototype._itemUICount = 0;

System.Windows.Controls.Primitives.RangeBase.prototype.get_Minimum = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Primitives.RangeBase.MinimumProperty), System.Double);
};
System.Windows.Controls.Primitives.RangeBase.prototype.set_Minimum = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Primitives.RangeBase.MinimumProperty, value);
};
System.Windows.Controls.Primitives.RangeBase.OnMinimumPropertyChanged = function (d, e) {
	var rangeBase = JSIL.TryCast(d, System.Windows.Controls.Primitives.RangeBase);
	if (!System.Windows.Controls.Primitives.RangeBase.IsValidDoubleValue(e.NewValue)) {
		throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm02.System.Windows.Resx.GetString$2("RangeBase_InvalidDoubleValue"), System.Windows.Controls.Primitives.RangeBase.MinimumProperty.toString()]);
	}
	if (rangeBase._levelsFromRootCall === 0) {
		rangeBase._initialMax = rangeBase.Maximum;
		rangeBase._initialVal = rangeBase.Value;
	}
	rangeBase._levelsFromRootCall += 1;
	rangeBase.CoerceMaximum();
	rangeBase.CoerceValue();
	rangeBase._levelsFromRootCall -= 1;
	if (rangeBase._levelsFromRootCall === 0) {
		var rangeBaseAutomationPeer = JSIL.TryCast(rangeBase.GetAutomationPeer(), System.Windows.Automation.Peers.RangeBaseAutomationPeer);
		if (rangeBaseAutomationPeer !== null) {
			rangeBaseAutomationPeer.RaiseMinimumPropertyChangedEvent(JSIL.Cast(e.OldValue, System.Double), JSIL.Cast(e.NewValue, System.Double));
		}
		rangeBase.OnMinimumChanged(JSIL.Cast(e.OldValue, System.Double), JSIL.Cast(e.NewValue, System.Double));
		var maximum = rangeBase.Maximum;
		if (!$asm02.MS.Internal.DoubleUtil.AreClose$0(rangeBase._initialMax, maximum)) {
			if (rangeBaseAutomationPeer !== null) {
				rangeBaseAutomationPeer.RaiseMaximumPropertyChangedEvent(rangeBase._initialMax, maximum);
			}
			rangeBase.OnMaximumChanged(rangeBase._initialMax, maximum);
		}
		var value = rangeBase.Value;
		if (!$asm02.MS.Internal.DoubleUtil.AreClose$0(rangeBase._initialVal, value)) {
			if (rangeBaseAutomationPeer !== null) {
				rangeBaseAutomationPeer.RaiseValuePropertyChangedEvent(rangeBase._initialVal, value);
			}
			rangeBase.OnValueChanged(rangeBase._initialVal, value);
		}
	}
};
System.Windows.Controls.Primitives.RangeBase.prototype.get_Maximum = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Primitives.RangeBase.MaximumProperty), System.Double);
};
System.Windows.Controls.Primitives.RangeBase.prototype.set_Maximum = function (value) {
	if (this._levelsFromRootCall === 0) {
		this._requestedMax = value;
	}
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Primitives.RangeBase.MaximumProperty, value);
};
System.Windows.Controls.Primitives.RangeBase.OnMaximumPropertyChanged = function (d, e) {
	var rangeBase = JSIL.TryCast(d, System.Windows.Controls.Primitives.RangeBase);
	if (!System.Windows.Controls.Primitives.RangeBase.IsValidDoubleValue(e.NewValue)) {
		throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm02.System.Windows.Resx.GetString$2("RangeBase_InvalidDoubleValue"), System.Windows.Controls.Primitives.RangeBase.MaximumProperty.toString()]);
	}
	if (rangeBase._levelsFromRootCall === 0) {
		rangeBase._requestedMax = JSIL.Cast(e.NewValue, System.Double);
		rangeBase._initialMax = JSIL.Cast(e.OldValue, System.Double);
		rangeBase._initialVal = rangeBase.Value;
	}
	rangeBase._levelsFromRootCall += 1;
	rangeBase.CoerceMaximum();
	rangeBase.CoerceValue();
	rangeBase._levelsFromRootCall -= 1;
	if (rangeBase._levelsFromRootCall === 0) {
		var rangeBaseAutomationPeer = JSIL.TryCast(rangeBase.GetAutomationPeer(), System.Windows.Automation.Peers.RangeBaseAutomationPeer);
		var maximum = rangeBase.Maximum;
		if (!$asm02.MS.Internal.DoubleUtil.AreClose$0(rangeBase._initialMax, maximum)) {
			if (rangeBaseAutomationPeer !== null) {
				rangeBaseAutomationPeer.RaiseMaximumPropertyChangedEvent(rangeBase._initialMax, maximum);
			}
			rangeBase.OnMaximumChanged(rangeBase._initialMax, maximum);
		}
		var value = rangeBase.Value;
		if (!$asm02.MS.Internal.DoubleUtil.AreClose$0(rangeBase._initialVal, value)) {
			if (rangeBaseAutomationPeer !== null) {
				rangeBaseAutomationPeer.RaiseValuePropertyChangedEvent(rangeBase._initialVal, value);
			}
			rangeBase.OnValueChanged(rangeBase._initialVal, value);
		}
	}
};
System.Windows.Controls.Primitives.RangeBase.prototype.get_LargeChange = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Primitives.RangeBase.LargeChangeProperty), System.Double);
};
System.Windows.Controls.Primitives.RangeBase.prototype.set_LargeChange = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Primitives.RangeBase.LargeChangeProperty, value);
};
System.Windows.Controls.Primitives.RangeBase.OnLargeChangePropertyChanged = function (d, e) {
	if (!System.Windows.Controls.Primitives.RangeBase.IsValidChange(e.NewValue)) {
		throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm02.System.Windows.Resx.GetString$2("RangeBase_InvalidChangeValue"), System.Windows.Controls.Primitives.RangeBase.LargeChangeProperty.toString()]);
	}
};
System.Windows.Controls.Primitives.RangeBase.prototype.get_SmallChange = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Primitives.RangeBase.SmallChangeProperty), System.Double);
};
System.Windows.Controls.Primitives.RangeBase.prototype.set_SmallChange = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Primitives.RangeBase.SmallChangeProperty, value);
};
System.Windows.Controls.Primitives.RangeBase.OnSmallChangePropertyChanged = function (d, e) {
	if (!System.Windows.Controls.Primitives.RangeBase.IsValidChange(e.NewValue)) {
		throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm02.System.Windows.Resx.GetString$2("RangeBase_InvalidChangeValue"), System.Windows.Controls.Primitives.RangeBase.SmallChangeProperty.toString()]);
	}
};
System.Windows.Controls.Primitives.RangeBase.prototype.get_Value = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Primitives.RangeBase.ValueProperty), System.Double);
};
System.Windows.Controls.Primitives.RangeBase.prototype.set_Value = function (value) {
	if (this._levelsFromRootCall === 0) {
		this._requestedVal = value;
	}
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Primitives.RangeBase.ValueProperty, value);
};
System.Windows.Controls.Primitives.RangeBase.OnValuePropertyChanged = function (d, e) {
	var rangeBase = JSIL.TryCast(d, System.Windows.Controls.Primitives.RangeBase);
	if (!System.Windows.Controls.Primitives.RangeBase.IsValidDoubleValue(e.NewValue)) {
		throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm02.System.Windows.Resx.GetString$2("RangeBase_InvalidDoubleValue"), System.Windows.Controls.Primitives.RangeBase.ValueProperty.toString()]);
	}
	if (rangeBase._levelsFromRootCall === 0) {
		rangeBase._requestedVal = JSIL.Cast(e.NewValue, System.Double);
		rangeBase._initialVal = JSIL.Cast(e.OldValue, System.Double);
	}
	rangeBase._levelsFromRootCall += 1;
	rangeBase.CoerceValue();
	rangeBase._levelsFromRootCall -= 1;
	if (rangeBase._levelsFromRootCall === 0) {
		var value = rangeBase.Value;
		if (!$asm02.MS.Internal.DoubleUtil.AreClose$0(rangeBase._initialVal, value)) {
			var rangeBaseAutomationPeer = JSIL.TryCast(rangeBase.GetAutomationPeer(), System.Windows.Automation.Peers.RangeBaseAutomationPeer);
			if (rangeBaseAutomationPeer !== null) {
				rangeBaseAutomationPeer.RaiseValuePropertyChangedEvent(rangeBase._initialVal, value);
			}
			rangeBase.OnValueChanged(rangeBase._initialVal, value);
		}
	}
};
System.Windows.Controls.Primitives.RangeBase.prototype.add_ValueChanged = function (value) {
	this.ValueChanged = System.Delegate.Combine(this.ValueChanged, value);
};
System.Windows.Controls.Primitives.RangeBase.prototype.remove_ValueChanged = function (value) {
	this.ValueChanged = System.Delegate.Remove(this.ValueChanged, value);
};
System.Windows.Controls.Primitives.RangeBase.prototype._ctor = function () {
	System.Windows.Controls.Control.prototype._ctor$0.call(this);
};
System.Windows.Controls.Primitives.RangeBase.prototype.OnMaximumChanged = function (oldMaximum, newMaximum) {
};
System.Windows.Controls.Primitives.RangeBase.prototype.OnMinimumChanged = function (oldMinimum, newMinimum) {
};
System.Windows.Controls.Primitives.RangeBase.prototype.OnValueChanged = function (oldValue, newValue) {
	var valueChanged = this.ValueChanged;
	if (valueChanged !== null) {
		valueChanged(this, new (System.Windows.RoutedPropertyChangedEventArgs$b1.Of(System.Double)) (oldValue, newValue));
	}
};
System.Windows.Controls.Primitives.RangeBase.prototype.CoerceMaximum = function () {
	var minimum = this.Minimum;
	var maximum = this.Maximum;
	if (!($asm02.MS.Internal.DoubleUtil.AreClose$0(this._requestedMax, maximum) || (this._requestedMax < minimum))) {
		System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Primitives.RangeBase.MaximumProperty, this._requestedMax);
		return;
	}
	if (maximum < minimum) {
		System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Primitives.RangeBase.MaximumProperty, minimum);
	}
};
System.Windows.Controls.Primitives.RangeBase.prototype.CoerceValue = function () {
	var minimum = this.Minimum;
	var maximum = this.Maximum;
	var value = this.Value;
	if (!($asm02.MS.Internal.DoubleUtil.AreClose$0(this._requestedVal, value) || 
			(this._requestedVal < minimum) || (this._requestedVal > maximum))) {
		System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Primitives.RangeBase.ValueProperty, this._requestedVal);
		return;
	}
	if (value < minimum) {
		System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Primitives.RangeBase.ValueProperty, minimum);
	}
	if (value > maximum) {
		System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Primitives.RangeBase.ValueProperty, maximum);
	}
};
System.Windows.Controls.Primitives.RangeBase.IsValidDoubleValue = function (value) {
	var d = JSIL.Cast(value, System.Double);
	return (!System.Double.IsNaN(d) && !System.Double.IsInfinity(d));
};
System.Windows.Controls.Primitives.RangeBase.IsValidChange = function (value) {
	return (System.Windows.Controls.Primitives.RangeBase.IsValidDoubleValue(value) && (JSIL.Cast(value, System.Double) >= 0));
};
System.Windows.Controls.Primitives.RangeBase.prototype.toString = function () {
	return System.String.Format(System.Globalization.CultureInfo.InvariantCulture, "{0} Minimum:{1} Maximum:{2} Value:{3}", [System.Object.prototype.toString.call(this), this.Minimum, this.Maximum, this.Value]);
};
JSIL.MakeProperty(System.Windows.Controls.Primitives.RangeBase.prototype, "Minimum", 
	System.Windows.Controls.Primitives.RangeBase.prototype.get_Minimum, System.Windows.Controls.Primitives.RangeBase.prototype.set_Minimum);
JSIL.MakeProperty(System.Windows.Controls.Primitives.RangeBase.prototype, "Maximum", 
	System.Windows.Controls.Primitives.RangeBase.prototype.get_Maximum, System.Windows.Controls.Primitives.RangeBase.prototype.set_Maximum);
JSIL.MakeProperty(System.Windows.Controls.Primitives.RangeBase.prototype, "LargeChange", 
	System.Windows.Controls.Primitives.RangeBase.prototype.get_LargeChange, System.Windows.Controls.Primitives.RangeBase.prototype.set_LargeChange);
JSIL.MakeProperty(System.Windows.Controls.Primitives.RangeBase.prototype, "SmallChange", 
	System.Windows.Controls.Primitives.RangeBase.prototype.get_SmallChange, System.Windows.Controls.Primitives.RangeBase.prototype.set_SmallChange);
JSIL.MakeProperty(System.Windows.Controls.Primitives.RangeBase.prototype, "Value", 
	System.Windows.Controls.Primitives.RangeBase.prototype.get_Value, System.Windows.Controls.Primitives.RangeBase.prototype.set_Value);
Object.defineProperty(System.Windows.Controls.Primitives.RangeBase, "FormatString", {
		"value": "{0} Minimum:{1} Maximum:{2} Value:{3}"}
);
System.Windows.Controls.Primitives.RangeBase.prototype._levelsFromRootCall = 0;
System.Windows.Controls.Primitives.RangeBase.prototype._initialMax = 0;
System.Windows.Controls.Primitives.RangeBase.prototype._initialVal = 0;
System.Windows.Controls.Primitives.RangeBase.prototype._requestedMax = 0;
System.Windows.Controls.Primitives.RangeBase.prototype._requestedVal = 0;
System.Windows.Controls.Primitives.RangeBase.MinimumProperty = null;
System.Windows.Controls.Primitives.RangeBase.MaximumProperty = null;
System.Windows.Controls.Primitives.RangeBase.LargeChangeProperty = null;
System.Windows.Controls.Primitives.RangeBase.SmallChangeProperty = null;
System.Windows.Controls.Primitives.RangeBase.ValueProperty = null;
System.Windows.Controls.Primitives.RangeBase.prototype.ValueChanged = null;
System.Windows.Controls.Primitives.RangeBase._cctor = function () {
	System.Windows.Controls.Primitives.RangeBase.MinimumProperty = System.Windows.DependencyProperty.Register$0("Minimum", System.Double, System.Windows.Controls.Primitives.RangeBase, JSIL.New(System.Windows.PropertyMetadata, "_ctor$2", [0, JSIL.Delegate.New("System.Windows.PropertyChangedCallback", null, System.Windows.Controls.Primitives.RangeBase.OnMinimumPropertyChanged)]));
	System.Windows.Controls.Primitives.RangeBase.MaximumProperty = System.Windows.DependencyProperty.Register$0("Maximum", System.Double, System.Windows.Controls.Primitives.RangeBase, JSIL.New(System.Windows.PropertyMetadata, "_ctor$2", [1, JSIL.Delegate.New("System.Windows.PropertyChangedCallback", null, System.Windows.Controls.Primitives.RangeBase.OnMaximumPropertyChanged)]));
	System.Windows.Controls.Primitives.RangeBase.LargeChangeProperty = System.Windows.DependencyProperty.Register$0("LargeChange", System.Double, System.Windows.Controls.Primitives.RangeBase, JSIL.New(System.Windows.PropertyMetadata, "_ctor$2", [1, JSIL.Delegate.New("System.Windows.PropertyChangedCallback", null, System.Windows.Controls.Primitives.RangeBase.OnLargeChangePropertyChanged)]));
	System.Windows.Controls.Primitives.RangeBase.SmallChangeProperty = System.Windows.DependencyProperty.Register$0("SmallChange", System.Double, System.Windows.Controls.Primitives.RangeBase, JSIL.New(System.Windows.PropertyMetadata, "_ctor$2", [0.1, JSIL.Delegate.New("System.Windows.PropertyChangedCallback", null, System.Windows.Controls.Primitives.RangeBase.OnSmallChangePropertyChanged)]));
	System.Windows.Controls.Primitives.RangeBase.ValueProperty = System.Windows.DependencyProperty.Register$0("Value", System.Double, System.Windows.Controls.Primitives.RangeBase, JSIL.New(System.Windows.PropertyMetadata, "_ctor$2", [0, JSIL.Delegate.New("System.Windows.PropertyChangedCallback", null, System.Windows.Controls.Primitives.RangeBase.OnValuePropertyChanged)]));
};

System.Windows.Controls.Primitives.RepeatButton.prototype.get_Delay = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Primitives.RepeatButton.DelayProperty), System.Int32);
};
System.Windows.Controls.Primitives.RepeatButton.prototype.set_Delay = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Primitives.RepeatButton.DelayProperty, value);
};
System.Windows.Controls.Primitives.RepeatButton.OnDelayPropertyChanged = function (d, e) {
	var num = JSIL.Cast(e.NewValue, System.Int32);
	if (num < 0) {
		throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm02.System.Windows.Resx.GetString$2("RepeatButton_DelayPropertyCannotBeNegative"), System.Windows.Controls.Primitives.RepeatButton.DelayProperty.toString()]);
	}
};
System.Windows.Controls.Primitives.RepeatButton.prototype.get_Interval = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Primitives.RepeatButton.IntervalProperty), System.Int32);
};
System.Windows.Controls.Primitives.RepeatButton.prototype.set_Interval = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Primitives.RepeatButton.IntervalProperty, value);
};
System.Windows.Controls.Primitives.RepeatButton.OnIntervalPropertyChanged = function (d, e) {
	var num = JSIL.Cast(e.NewValue, System.Int32);
	if (num <= 0) {
		throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm02.System.Windows.Resx.GetString$2("RepeatButton_IntervalMustBePositive"), System.Windows.Controls.Primitives.RepeatButton.IntervalProperty.toString()]);
	}
};
System.Windows.Controls.Primitives.RepeatButton.prototype.StartTimer = function () {
	if (this._timer === null) {
		this._timer = JSIL.New(System.Windows.Threading.DispatcherTimer, "_ctor$0", []);
		this._timer.add_Tick(JSIL.Delegate.New("System.EventHandler", this, System.Windows.Controls.Primitives.RepeatButton.prototype.OnTimeout));
	} else if (this._timer.IsEnabled) {
		return;
	}
	(this._timer.Interval = System.TimeSpan.FromMilliseconds(this.Delay).MemberwiseClone());
	this._timer.Start();
};
System.Windows.Controls.Primitives.RepeatButton.prototype.StopTimer = function () {
	if (this._timer !== null) {
		this._timer.Stop();
	}
};
System.Windows.Controls.Primitives.RepeatButton.prototype.OnTimeout = function (sender, e) {
	var interval = this.Interval;
	if (this._timer.Interval.Milliseconds !== interval) {
		(this._timer.Interval = System.TimeSpan.FromMilliseconds(interval).MemberwiseClone());
	}
	if (System.Windows.Controls.Primitives.ButtonBase.prototype.get_IsPressed.call(this)) {
		if (this._keyboardCausingRepeat) {
			this.OnClick();
			return;
		}
		var enumerator = System.Windows.UIElement.prototype.HitTest$0.call(this, this._mousePosition.MemberwiseClone()).IEnumerable$b1_GetEnumerator();
		try {
		__loop0__: 
			while (enumerator.IEnumerator_MoveNext()) {
				var current = enumerator.IEnumerator$b1_Current;
				if (current === this) {
					this.OnClick();
				}
			}
		} finally {
			if (enumerator !== null) {
				enumerator.IDisposable_Dispose();
			}
		}
	}
};
System.Windows.Controls.Primitives.RepeatButton.prototype.UpdateRepeatState = function () {
	if (!(!this._mouseCausingRepeat && !this._keyboardCausingRepeat)) {
		this.StartTimer();
		return;
	}
	this.StopTimer();
};
System.Windows.Controls.Primitives.RepeatButton.prototype.OnIsEnabledChanged = function (e) {
	System.Windows.Controls.Primitives.ButtonBase.prototype.OnIsEnabledChanged.call(this, e);
	this._keyboardCausingRepeat = false;
	this._mouseCausingRepeat = false;
	this.UpdateRepeatState();
};
System.Windows.Controls.Primitives.RepeatButton.prototype.OnLostFocus = function (e) {
	System.Windows.Controls.Primitives.ButtonBase.prototype.OnLostFocus.call(this, e);
	if (System.Windows.Controls.Primitives.ButtonBase.prototype.get_ClickMode.call(this) !== System.Windows.Controls.ClickMode.Hover) {
		this._keyboardCausingRepeat = false;
		this._mouseCausingRepeat = false;
		this.UpdateRepeatState();
	}
};
System.Windows.Controls.Primitives.RepeatButton.prototype._ctor = function () {
	System.Windows.Controls.Primitives.ButtonBase.prototype._ctor.call(this);
	System.Windows.Controls.Control.prototype.set_DefaultStyleKey.call(this, System.Windows.Controls.Primitives.RepeatButton);
	System.Windows.Controls.Primitives.ButtonBase.prototype.set_ClickMode.call(this, System.Windows.Controls.ClickMode.Press);
};
System.Windows.Controls.Primitives.RepeatButton.prototype.OnApplyTemplate = function () {
	System.Windows.Controls.Primitives.ButtonBase.prototype.UpdateVisualState$1.call(this, false);
};
System.Windows.Controls.Primitives.RepeatButton.prototype.ChangeVisualState = function (useTransitions) {
	if (!System.Windows.Controls.Control.prototype.get_IsEnabled.call(this)) {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "Disabled");
	} else if (System.Windows.Controls.Primitives.ButtonBase.prototype.get_IsPressed.call(this)) {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "Pressed");
	} else if (System.Windows.Controls.Primitives.ButtonBase.prototype.get_IsMouseOver.call(this)) {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "MouseOver");
	} else {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "Normal");
	}
	if (!(!System.Windows.Controls.Primitives.ButtonBase.prototype.get_IsFocused.call(this) || !System.Windows.Controls.Control.prototype.get_IsEnabled.call(this))) {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "Focused");
		return;
	}
	System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "Unfocused");
};
System.Windows.Controls.Primitives.RepeatButton.prototype.OnMouseLeftButtonDown = function (e) {
	if (e === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["e"]);
	}
	if (e.Handled) {
		return;
	}
	System.Windows.Controls.Primitives.ButtonBase.prototype.OnMouseLeftButtonDown.call(this, e);
	if (System.Windows.Controls.Primitives.ButtonBase.prototype.get_ClickMode.call(this) !== System.Windows.Controls.ClickMode.Hover) {
		this._mouseCausingRepeat = true;
		this.UpdateRepeatState();
	}
};
System.Windows.Controls.Primitives.RepeatButton.prototype.OnMouseLeftButtonUp = function (e) {
	if (e === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["e"]);
	}
	if (e.Handled) {
		return;
	}
	System.Windows.Controls.Primitives.ButtonBase.prototype.OnMouseLeftButtonUp.call(this, e);
	if (System.Windows.Controls.Primitives.ButtonBase.prototype.get_ClickMode.call(this) !== System.Windows.Controls.ClickMode.Hover) {
		this._mouseCausingRepeat = false;
		this.UpdateRepeatState();
	}
	System.Windows.Controls.Primitives.ButtonBase.prototype.UpdateVisualState$0.call(this);
};
System.Windows.Controls.Primitives.RepeatButton.prototype.OnMouseEnter = function (e) {
	System.Windows.Controls.Primitives.ButtonBase.prototype.OnMouseEnter.call(this, e);
	if (System.Windows.Controls.Primitives.ButtonBase.prototype.get_ClickMode.call(this) === System.Windows.Controls.ClickMode.Hover) {
		this._mouseCausingRepeat = true;
		this.UpdateRepeatState();
	}
	System.Windows.Controls.Primitives.ButtonBase.prototype.UpdateVisualState$0.call(this);
	var obj = this;
__loop0__: 
	while (true) {
		var frameworkElement = JSIL.TryCast(obj, System.Windows.FrameworkElement);
		if (frameworkElement === null) {
			break __loop0__;
		}
		obj = frameworkElement.Parent;
	}
	this._mousePosition = e.GetPosition(JSIL.TryCast(obj, System.Windows.UIElement)).MemberwiseClone();
};
System.Windows.Controls.Primitives.RepeatButton.prototype.OnMouseLeave = function (e) {
	System.Windows.Controls.Primitives.ButtonBase.prototype.OnMouseLeave.call(this, e);
	if (System.Windows.Controls.Primitives.ButtonBase.prototype.get_ClickMode.call(this) === System.Windows.Controls.ClickMode.Hover) {
		this._mouseCausingRepeat = false;
		this.UpdateRepeatState();
	}
	System.Windows.Controls.Primitives.ButtonBase.prototype.UpdateVisualState$0.call(this);
};
System.Windows.Controls.Primitives.RepeatButton.prototype.OnMouseMove = function (e) {
	if (e === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["e"]);
	}
	var obj = this;
__loop0__: 
	while (true) {
		var frameworkElement = JSIL.TryCast(obj, System.Windows.FrameworkElement);
		if (frameworkElement === null) {
			break __loop0__;
		}
		obj = frameworkElement.Parent;
	}
	this._mousePosition = e.GetPosition(JSIL.TryCast(obj, System.Windows.UIElement)).MemberwiseClone();
};
System.Windows.Controls.Primitives.RepeatButton.prototype.OnKeyDown = function (e) {
	if (!((e.Key !== System.Windows.Input.Key.Space) || (System.Windows.Controls.Primitives.ButtonBase.prototype.get_ClickMode.call(this) === System.Windows.Controls.ClickMode.Hover))) {
		this._keyboardCausingRepeat = true;
		this.UpdateRepeatState();
	}
	System.Windows.Controls.Primitives.ButtonBase.prototype.OnKeyDown.call(this, e);
};
System.Windows.Controls.Primitives.RepeatButton.prototype.OnKeyUp = function (e) {
	System.Windows.Controls.Primitives.ButtonBase.prototype.OnKeyUp.call(this, e);
	if (!((e.Key !== System.Windows.Input.Key.Space) || (System.Windows.Controls.Primitives.ButtonBase.prototype.get_ClickMode.call(this) === System.Windows.Controls.ClickMode.Hover))) {
		this._keyboardCausingRepeat = false;
		this.UpdateRepeatState();
	}
	System.Windows.Controls.Primitives.ButtonBase.prototype.UpdateVisualState$0.call(this);
};
System.Windows.Controls.Primitives.RepeatButton.prototype.OnCreateAutomationPeer = function () {
	return new System.Windows.Automation.Peers.RepeatButtonAutomationPeer(this);
};
System.Windows.Controls.Primitives.RepeatButton.prototype.OnClick = function () {
	if (System.Windows.Automation.Peers.AutomationPeer.ListenerExists(System.Windows.Automation.Peers.AutomationEvents.InvokePatternOnInvoked)) {
		var orCreateAutomationPeer = System.Windows.UIElement.prototype.GetOrCreateAutomationPeer.call(this);
		if (orCreateAutomationPeer !== null) {
			orCreateAutomationPeer.RaiseAutomationEvent(System.Windows.Automation.Peers.AutomationEvents.InvokePatternOnInvoked);
		}
	}
	System.Windows.Controls.Primitives.ButtonBase.prototype.OnClick.call(this);
};
JSIL.MakeProperty(System.Windows.Controls.Primitives.RepeatButton.prototype, "Delay", 
	System.Windows.Controls.Primitives.RepeatButton.prototype.get_Delay, System.Windows.Controls.Primitives.RepeatButton.prototype.set_Delay);
JSIL.MakeProperty(System.Windows.Controls.Primitives.RepeatButton.prototype, "Interval", 
	System.Windows.Controls.Primitives.RepeatButton.prototype.get_Interval, System.Windows.Controls.Primitives.RepeatButton.prototype.set_Interval);
System.Windows.Controls.Primitives.RepeatButton.DelayProperty = null;
System.Windows.Controls.Primitives.RepeatButton.IntervalProperty = null;
System.Windows.Controls.Primitives.RepeatButton.prototype._timer = null;
System.Windows.Controls.Primitives.RepeatButton.prototype._keyboardCausingRepeat = false;
System.Windows.Controls.Primitives.RepeatButton.prototype._mouseCausingRepeat = false;
System.Windows.Controls.Primitives.RepeatButton._cctor = function () {
	System.Windows.Controls.Primitives.RepeatButton.DelayProperty = System.Windows.DependencyProperty.Register$0("Delay", System.Int32, System.Windows.Controls.Primitives.RepeatButton, JSIL.New(System.Windows.PropertyMetadata, "_ctor$2", [500, JSIL.Delegate.New("System.Windows.PropertyChangedCallback", null, System.Windows.Controls.Primitives.RepeatButton.OnDelayPropertyChanged)]));
	System.Windows.Controls.Primitives.RepeatButton.IntervalProperty = System.Windows.DependencyProperty.Register$0("Interval", System.Int32, System.Windows.Controls.Primitives.RepeatButton, JSIL.New(System.Windows.PropertyMetadata, "_ctor$2", [33, JSIL.Delegate.New("System.Windows.PropertyChangedCallback", null, System.Windows.Controls.Primitives.RepeatButton.OnIntervalPropertyChanged)]));
};

System.Windows.Controls.Primitives.ScrollBar.prototype._ctor = function () {
	System.Windows.Controls.Primitives.RangeBase.prototype._ctor.call(this);
	System.Windows.FrameworkElement.prototype.add_SizeChanged.call(this, function (obj, sizeChangedEventArgs) {
			this.UpdateTrackLayout(this.GetTrackLength());
		});
	System.Windows.Controls.Control.prototype.set_DefaultStyleKey.call(this, System.Windows.Controls.Primitives.ScrollBar);
};
System.Windows.Controls.Primitives.ScrollBar.prototype.OnApplyTemplate = function () {
	System.Windows.FrameworkElement.prototype.OnApplyTemplate.call(this);
	this.ElementHorizontalTemplate = JSIL.TryCast(System.Windows.Controls.Control.prototype.GetTemplateChild.call(this, "HorizontalRoot"), System.Windows.FrameworkElement);
	this.ElementHorizontalLargeIncrease = JSIL.TryCast(System.Windows.Controls.Control.prototype.GetTemplateChild.call(this, "HorizontalLargeIncrease"), System.Windows.Controls.Primitives.RepeatButton);
	this.ElementHorizontalLargeDecrease = JSIL.TryCast(System.Windows.Controls.Control.prototype.GetTemplateChild.call(this, "HorizontalLargeDecrease"), System.Windows.Controls.Primitives.RepeatButton);
	this.ElementHorizontalSmallIncrease = JSIL.TryCast(System.Windows.Controls.Control.prototype.GetTemplateChild.call(this, "HorizontalSmallIncrease"), System.Windows.Controls.Primitives.RepeatButton);
	this.ElementHorizontalSmallDecrease = JSIL.TryCast(System.Windows.Controls.Control.prototype.GetTemplateChild.call(this, "HorizontalSmallDecrease"), System.Windows.Controls.Primitives.RepeatButton);
	this.ElementHorizontalThumb = JSIL.TryCast(System.Windows.Controls.Control.prototype.GetTemplateChild.call(this, "HorizontalThumb"), System.Windows.Controls.Primitives.Thumb);
	this.ElementVerticalTemplate = JSIL.TryCast(System.Windows.Controls.Control.prototype.GetTemplateChild.call(this, "VerticalRoot"), System.Windows.FrameworkElement);
	this.ElementVerticalLargeIncrease = JSIL.TryCast(System.Windows.Controls.Control.prototype.GetTemplateChild.call(this, "VerticalLargeIncrease"), System.Windows.Controls.Primitives.RepeatButton);
	this.ElementVerticalLargeDecrease = JSIL.TryCast(System.Windows.Controls.Control.prototype.GetTemplateChild.call(this, "VerticalLargeDecrease"), System.Windows.Controls.Primitives.RepeatButton);
	this.ElementVerticalSmallIncrease = JSIL.TryCast(System.Windows.Controls.Control.prototype.GetTemplateChild.call(this, "VerticalSmallIncrease"), System.Windows.Controls.Primitives.RepeatButton);
	this.ElementVerticalSmallDecrease = JSIL.TryCast(System.Windows.Controls.Control.prototype.GetTemplateChild.call(this, "VerticalSmallDecrease"), System.Windows.Controls.Primitives.RepeatButton);
	this.ElementVerticalThumb = JSIL.TryCast(System.Windows.Controls.Control.prototype.GetTemplateChild.call(this, "VerticalThumb"), System.Windows.Controls.Primitives.Thumb);
	if (this.ElementHorizontalThumb !== null) {
		this.ElementHorizontalThumb.add_DragStarted(function (sender, e) {
				this.OnThumbDragStarted();
			});
		this.ElementHorizontalThumb.add_DragDelta(function (sender, e) {
				this.OnThumbDragDelta(e);
			});
		this.ElementHorizontalThumb.add_DragCompleted(function (sender, e) {
				this.OnThumbDragCompleted();
			});
	}
	if (this.ElementHorizontalLargeDecrease !== null) {
		this.ElementHorizontalLargeDecrease.add_Click(function (sender, e) {
				this.LargeDecrement();
			});
	}
	if (this.ElementHorizontalLargeIncrease !== null) {
		this.ElementHorizontalLargeIncrease.add_Click(function (sender, e) {
				this.LargeIncrement();
			});
	}
	if (this.ElementHorizontalSmallDecrease !== null) {
		this.ElementHorizontalSmallDecrease.add_Click(function (sender, e) {
				this.SmallDecrement();
			});
	}
	if (this.ElementHorizontalSmallIncrease !== null) {
		this.ElementHorizontalSmallIncrease.add_Click(function (sender, e) {
				this.SmallIncrement();
			});
	}
	if (this.ElementVerticalThumb !== null) {
		this.ElementVerticalThumb.add_DragStarted(function (sender, e) {
				this.OnThumbDragStarted();
			});
		this.ElementVerticalThumb.add_DragDelta(function (sender, e) {
				this.OnThumbDragDelta(e);
			});
		this.ElementVerticalThumb.add_DragCompleted(function (sender, e) {
				this.OnThumbDragCompleted();
			});
	}
	if (this.ElementVerticalLargeDecrease !== null) {
		this.ElementVerticalLargeDecrease.add_Click(function (sender, e) {
				this.LargeDecrement();
			});
	}
	if (this.ElementVerticalLargeIncrease !== null) {
		this.ElementVerticalLargeIncrease.add_Click(function (sender, e) {
				this.LargeIncrement();
			});
	}
	if (this.ElementVerticalSmallDecrease !== null) {
		this.ElementVerticalSmallDecrease.add_Click(function (sender, e) {
				this.SmallDecrement();
			});
	}
	if (this.ElementVerticalSmallIncrease !== null) {
		this.ElementVerticalSmallIncrease.add_Click(function (sender, e) {
				this.SmallIncrement();
			});
	}
	this.OnOrientationChanged();
	this.UpdateVisualState$1(false);
};
System.Windows.Controls.Primitives.ScrollBar.prototype.SmallDecrement = function () {
	var num = System.Math.Max((System.Windows.Controls.Primitives.RangeBase.prototype.get_Value.call(this) - System.Windows.Controls.Primitives.RangeBase.prototype.get_SmallChange.call(this)), System.Windows.Controls.Primitives.RangeBase.prototype.get_Minimum.call(this));
	if (System.Windows.Controls.Primitives.RangeBase.prototype.get_Value.call(this) !== num) {
		System.Windows.Controls.Primitives.RangeBase.prototype.set_Value.call(this, num);
		this.RaiseScrollEvent(System.Windows.Controls.Primitives.ScrollEventType.SmallDecrement);
	}
};
System.Windows.Controls.Primitives.ScrollBar.prototype.SmallIncrement = function () {
	var num = System.Math.Min((System.Windows.Controls.Primitives.RangeBase.prototype.get_Value.call(this) + System.Windows.Controls.Primitives.RangeBase.prototype.get_SmallChange.call(this)), System.Windows.Controls.Primitives.RangeBase.prototype.get_Maximum.call(this));
	if (System.Windows.Controls.Primitives.RangeBase.prototype.get_Value.call(this) !== num) {
		System.Windows.Controls.Primitives.RangeBase.prototype.set_Value.call(this, num);
		this.RaiseScrollEvent(System.Windows.Controls.Primitives.ScrollEventType.SmallIncrement);
	}
};
System.Windows.Controls.Primitives.ScrollBar.prototype.LargeDecrement = function () {
	var num = System.Math.Max((System.Windows.Controls.Primitives.RangeBase.prototype.get_Value.call(this) - System.Windows.Controls.Primitives.RangeBase.prototype.get_LargeChange.call(this)), System.Windows.Controls.Primitives.RangeBase.prototype.get_Minimum.call(this));
	if (System.Windows.Controls.Primitives.RangeBase.prototype.get_Value.call(this) !== num) {
		System.Windows.Controls.Primitives.RangeBase.prototype.set_Value.call(this, num);
		this.RaiseScrollEvent(System.Windows.Controls.Primitives.ScrollEventType.LargeDecrement);
	}
};
System.Windows.Controls.Primitives.ScrollBar.prototype.LargeIncrement = function () {
	var num = System.Math.Min((System.Windows.Controls.Primitives.RangeBase.prototype.get_Value.call(this) + System.Windows.Controls.Primitives.RangeBase.prototype.get_LargeChange.call(this)), System.Windows.Controls.Primitives.RangeBase.prototype.get_Maximum.call(this));
	if (System.Windows.Controls.Primitives.RangeBase.prototype.get_Value.call(this) !== num) {
		System.Windows.Controls.Primitives.RangeBase.prototype.set_Value.call(this, num);
		this.RaiseScrollEvent(System.Windows.Controls.Primitives.ScrollEventType.LargeIncrement);
	}
};
System.Windows.Controls.Primitives.ScrollBar.prototype.OnThumbDragCompleted = function () {
	this.RaiseScrollEvent(System.Windows.Controls.Primitives.ScrollEventType.EndScroll);
};
System.Windows.Controls.Primitives.ScrollBar.prototype.OnThumbDragStarted = function () {
	this._dragValue = System.Windows.Controls.Primitives.RangeBase.prototype.get_Value.call(this);
};
System.Windows.Controls.Primitives.ScrollBar.prototype.OnThumbDragDelta = function (e) {
	var num = 0;
	var zoomFactor = System.Windows.Application.Current.Host.Content.ZoomFactor;
	if (!((this.Orientation !== System.Windows.Controls.Orientation.Horizontal) || (this.ElementHorizontalThumb === null))) {
		if ($asm02.MS.Internal.QuirksMode.ShouldApplyThumbDragDeltaWithZoomFactor()) {
			num = (((zoomFactor * e.HorizontalChange) / (this.GetTrackLength() - this.ElementHorizontalThumb.ActualWidth)) * (System.Windows.Controls.Primitives.RangeBase.prototype.get_Maximum.call(this) - System.Windows.Controls.Primitives.RangeBase.prototype.get_Minimum.call(this)));
		} else {
			num = ((e.HorizontalChange / (this.GetTrackLength() - this.ElementHorizontalThumb.ActualWidth)) * (System.Windows.Controls.Primitives.RangeBase.prototype.get_Maximum.call(this) - System.Windows.Controls.Primitives.RangeBase.prototype.get_Minimum.call(this)));
		}
	} else if (!(JSIL.Cast(this.Orientation, System.Boolean) || (this.ElementVerticalThumb === null))) {
		if ($asm02.MS.Internal.QuirksMode.ShouldApplyThumbDragDeltaWithZoomFactor()) {
			num = (((zoomFactor * e.VerticalChange) / (this.GetTrackLength() - this.ElementVerticalThumb.ActualHeight)) * (System.Windows.Controls.Primitives.RangeBase.prototype.get_Maximum.call(this) - System.Windows.Controls.Primitives.RangeBase.prototype.get_Minimum.call(this)));
		} else {
			num = ((e.VerticalChange / (this.GetTrackLength() - this.ElementVerticalThumb.ActualHeight)) * (System.Windows.Controls.Primitives.RangeBase.prototype.get_Maximum.call(this) - System.Windows.Controls.Primitives.RangeBase.prototype.get_Minimum.call(this)));
		}
	}
	if (!(System.Double.IsNaN(num) || System.Double.IsInfinity(num))) {
		this._dragValue += num;
		var num2 = System.Math.Min(System.Windows.Controls.Primitives.RangeBase.prototype.get_Maximum.call(this), System.Math.Max(System.Windows.Controls.Primitives.RangeBase.prototype.get_Minimum.call(this), this._dragValue));
		if (num2 !== System.Windows.Controls.Primitives.RangeBase.prototype.get_Value.call(this)) {
			System.Windows.Controls.Primitives.RangeBase.prototype.set_Value.call(this, num2);
			this.RaiseScrollEvent(System.Windows.Controls.Primitives.ScrollEventType.ThumbTrack);
		}
	}
};
System.Windows.Controls.Primitives.ScrollBar.prototype.get_IsDragging = function () {
	if (!((this.Orientation !== System.Windows.Controls.Orientation.Horizontal) || (this.ElementHorizontalThumb === null))) {
		return this.ElementHorizontalThumb.IsDragging;
	}
	return (!(JSIL.Cast(this.Orientation, System.Boolean) || 
			(this.ElementVerticalThumb === null)) && this.ElementVerticalThumb.IsDragging);
};
System.Windows.Controls.Primitives.ScrollBar.prototype.get_Orientation = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Primitives.ScrollBar.OrientationProperty), System.Windows.Controls.Orientation);
};
System.Windows.Controls.Primitives.ScrollBar.prototype.set_Orientation = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Primitives.ScrollBar.OrientationProperty, value);
};
System.Windows.Controls.Primitives.ScrollBar.OnOrientationPropertyChanged = function (d, e) {
	var scrollBar = JSIL.TryCast(d, System.Windows.Controls.Primitives.ScrollBar);
	scrollBar.OnOrientationChanged();
};
System.Windows.Controls.Primitives.ScrollBar.prototype.get_ViewportSize = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Primitives.ScrollBar.ViewportSizeProperty), System.Double);
};
System.Windows.Controls.Primitives.ScrollBar.prototype.set_ViewportSize = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Primitives.ScrollBar.ViewportSizeProperty, value);
};
System.Windows.Controls.Primitives.ScrollBar.OnViewportSizeChanged = function (d, e) {
	var scrollBar = JSIL.TryCast(d, System.Windows.Controls.Primitives.ScrollBar);
	scrollBar.UpdateTrackLayout(scrollBar.GetTrackLength());
};
System.Windows.Controls.Primitives.ScrollBar.prototype.OnIsEnabledChanged = function (e) {
	System.Windows.Controls.Control.prototype.OnIsEnabledChanged.call(this, e);
	if (!System.Windows.Controls.Control.prototype.get_IsEnabled.call(this)) {
		this.IsMouseOver = false;
	}
	this.UpdateVisualState$0();
};
System.Windows.Controls.Primitives.ScrollBar.prototype.OnValueChanged = function (oldValue, newValue) {
	var trackLength = this.GetTrackLength();
	System.Windows.Controls.Primitives.RangeBase.prototype.OnValueChanged.call(this, oldValue, newValue);
	this.UpdateTrackLayout(trackLength);
};
System.Windows.Controls.Primitives.ScrollBar.prototype.OnMaximumChanged = function (oldMaximum, newMaximum) {
	var trackLength = this.GetTrackLength();
	System.Windows.Controls.Primitives.RangeBase.prototype.OnMaximumChanged.call(this, oldMaximum, newMaximum);
	this.UpdateTrackLayout(trackLength);
};
System.Windows.Controls.Primitives.ScrollBar.prototype.OnMinimumChanged = function (oldMinimum, newMinimum) {
	var trackLength = this.GetTrackLength();
	System.Windows.Controls.Primitives.RangeBase.prototype.OnMinimumChanged.call(this, oldMinimum, newMinimum);
	this.UpdateTrackLayout(trackLength);
};
System.Windows.Controls.Primitives.ScrollBar.prototype.OnCreateAutomationPeer = function () {
	return new System.Windows.Automation.Peers.ScrollBarAutomationPeer(this);
};
System.Windows.Controls.Primitives.ScrollBar.prototype.OnMouseEnter = function (e) {
	System.Windows.Controls.Control.prototype.OnMouseEnter.call(this, e);
	this.IsMouseOver = true;
	if (!(!((this.Orientation === System.Windows.Controls.Orientation.Horizontal) && 
				(this.ElementHorizontalThumb !== null) && 
				!this.ElementHorizontalThumb.IsDragging) && (JSIL.Cast(this.Orientation, System.Boolean) || 
				(this.ElementVerticalThumb === null) || 
				this.ElementVerticalThumb.IsDragging))) {
		this.UpdateVisualState$0();
	}
};
System.Windows.Controls.Primitives.ScrollBar.prototype.OnMouseLeave = function (e) {
	System.Windows.Controls.Control.prototype.OnMouseLeave.call(this, e);
	this.IsMouseOver = false;
	if (!(!((this.Orientation === System.Windows.Controls.Orientation.Horizontal) && 
				(this.ElementHorizontalThumb !== null) && 
				!this.ElementHorizontalThumb.IsDragging) && (JSIL.Cast(this.Orientation, System.Boolean) || 
				(this.ElementVerticalThumb === null) || 
				this.ElementVerticalThumb.IsDragging))) {
		this.UpdateVisualState$0();
	}
};
System.Windows.Controls.Primitives.ScrollBar.prototype.OnMouseLeftButtonDown = function (e) {
	System.Windows.Controls.Control.prototype.OnMouseLeftButtonDown.call(this, e);
	if (e.Handled) {
		return;
	}
	e.Handled = true;
	System.Windows.UIElement.prototype.CaptureMouse.call(this);
};
System.Windows.Controls.Primitives.ScrollBar.prototype.OnMouseLeftButtonUp = function (e) {
	System.Windows.Controls.Control.prototype.OnMouseLeftButtonUp.call(this, e);
	if (e.Handled) {
		return;
	}
	e.Handled = true;
};
System.Windows.Controls.Primitives.ScrollBar.prototype.OnLostMouseCapture = function (e) {
	this.UpdateVisualState$0();
};
System.Windows.Controls.Primitives.ScrollBar.prototype.add_Scroll = function (value) {
	this.Scroll = System.Delegate.Combine(this.Scroll, value);
};
System.Windows.Controls.Primitives.ScrollBar.prototype.remove_Scroll = function (value) {
	this.Scroll = System.Delegate.Remove(this.Scroll, value);
};
System.Windows.Controls.Primitives.ScrollBar.prototype.RaiseScrollEvent = function (scrollEventType) {
	if (!((scrollEventType !== System.Windows.Controls.Primitives.ScrollEventType.SmallIncrement) && JSIL.Cast(scrollEventType, System.Boolean))) {
		$asm02.MS.Internal.TracingServices.TraceEvent($asm02.MS.Internal.TracingServices.TraceMarkerType.ExtendedControlsDataGridScroll, MS.Internal.TracingServices.TraceType.Info);
	}
	var scrollEventArgs = new System.Windows.Controls.Primitives.ScrollEventArgs(scrollEventType, System.Windows.Controls.Primitives.RangeBase.prototype.get_Value.call(this));
	scrollEventArgs.OriginalSource = this;
	if (this.Scroll !== null) {
		this.Scroll(this, scrollEventArgs);
	}
};
System.Windows.Controls.Primitives.ScrollBar.prototype.UpdateVisualState$0 = function () {
	this.UpdateVisualState$1(true);
};
System.Windows.Controls.Primitives.ScrollBar.prototype.UpdateVisualState$1 = function (useTransitions) {
	if (!System.Windows.Controls.Control.prototype.get_IsEnabled.call(this)) {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "Disabled");
		return;
	}
	if (this.IsMouseOver) {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "MouseOver");
		return;
	}
	System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "Normal");
};
System.Windows.Controls.Primitives.ScrollBar.prototype.OnOrientationChanged = function () {
	var trackLength = this.GetTrackLength();
	if (this.ElementHorizontalTemplate !== null) {
		this.ElementHorizontalTemplate.Visibility = (this.Orientation === System.Windows.Controls.Orientation.Horizontal) ? System.Windows.Visibility.Visible : System.Windows.Visibility.Collapsed;
	}
	if (this.ElementVerticalTemplate !== null) {
		this.ElementVerticalTemplate.Visibility = (this.Orientation === System.Windows.Controls.Orientation.Horizontal) ? System.Windows.Visibility.Collapsed : System.Windows.Visibility.Visible;
	}
	this.UpdateTrackLayout(trackLength);
};
System.Windows.Controls.Primitives.ScrollBar.prototype.UpdateTrackLayout = function (trackLength) {
	var maximum = System.Windows.Controls.Primitives.RangeBase.prototype.get_Maximum.call(this);
	var minimum = System.Windows.Controls.Primitives.RangeBase.prototype.get_Minimum.call(this);
	var value = System.Windows.Controls.Primitives.RangeBase.prototype.get_Value.call(this);
	var num = ((value - minimum) / (maximum - minimum));
	var num2 = this.UpdateThumbSize(trackLength);
	if (!((this.Orientation !== System.Windows.Controls.Orientation.Horizontal) || 
			(this.ElementHorizontalLargeDecrease === null) || (this.ElementHorizontalThumb === null))) {
		this.ElementHorizontalLargeDecrease.Width = System.Math.Max(0, (num * (trackLength - num2)));
		return;
	}
	if (!(JSIL.Cast(this.Orientation, System.Boolean) || 
			(this.ElementVerticalLargeDecrease === null) || (this.ElementVerticalThumb === null))) {
		this.ElementVerticalLargeDecrease.Height = System.Math.Max(0, (num * (trackLength - num2)));
	}
};
System.Windows.Controls.Primitives.ScrollBar.prototype.GetTrackLength = function () {
	var num = NaN;
	if (this.Orientation === System.Windows.Controls.Orientation.Horizontal) {
		num = System.Windows.FrameworkElement.prototype.get_ActualWidth.call(this);
		if (this.ElementHorizontalSmallDecrease !== null) {
			num -= ((this.ElementHorizontalSmallDecrease.ActualWidth + this.ElementHorizontalSmallDecrease.Margin.Left) + this.ElementHorizontalSmallDecrease.Margin.Right);
		}
		if (this.ElementHorizontalSmallIncrease !== null) {
			num -= ((this.ElementHorizontalSmallIncrease.ActualWidth + this.ElementHorizontalSmallIncrease.Margin.Left) + this.ElementHorizontalSmallIncrease.Margin.Right);
		}
	} else {
		num = System.Windows.FrameworkElement.prototype.get_ActualHeight.call(this);
		if (this.ElementVerticalSmallDecrease !== null) {
			num -= ((this.ElementVerticalSmallDecrease.ActualHeight + this.ElementVerticalSmallDecrease.Margin.Top) + this.ElementVerticalSmallDecrease.Margin.Bottom);
		}
		if (this.ElementVerticalSmallIncrease !== null) {
			num -= ((this.ElementVerticalSmallIncrease.ActualHeight + this.ElementVerticalSmallIncrease.Margin.Top) + this.ElementVerticalSmallIncrease.Margin.Bottom);
		}
	}
	return num;
};
System.Windows.Controls.Primitives.ScrollBar.prototype.ConvertViewportSizeToDisplayUnits = function (trackLength) {
	var num = (System.Windows.Controls.Primitives.RangeBase.prototype.get_Maximum.call(this) - System.Windows.Controls.Primitives.RangeBase.prototype.get_Minimum.call(this));
	return ((trackLength * this.ViewportSize) / (this.ViewportSize + num));
};
System.Windows.Controls.Primitives.ScrollBar.prototype.UpdateThumbSize = function (trackLength) {
	var num = NaN;
	var flag = (trackLength <= 0);
	if (trackLength > 0) {
		if (!((this.Orientation !== System.Windows.Controls.Orientation.Horizontal) || (this.ElementHorizontalThumb === null))) {
			if ((System.Windows.Controls.Primitives.RangeBase.prototype.get_Maximum.call(this) - System.Windows.Controls.Primitives.RangeBase.prototype.get_Minimum.call(this)) !== 0) {
				num = System.Math.Max(this.ElementHorizontalThumb.MinWidth, this.ConvertViewportSizeToDisplayUnits(trackLength));
			}
			if (!(((System.Windows.Controls.Primitives.RangeBase.prototype.get_Maximum.call(this) - System.Windows.Controls.Primitives.RangeBase.prototype.get_Minimum.call(this)) !== 0) && 
					(num <= System.Windows.FrameworkElement.prototype.get_ActualWidth.call(this)) && (trackLength > this.ElementHorizontalThumb.MinWidth))) {
				flag = true;
			} else {
				this.ElementHorizontalThumb.Visibility = System.Windows.Visibility.Visible;
				this.ElementHorizontalThumb.Width = num;
			}
		} else if (!(JSIL.Cast(this.Orientation, System.Boolean) || (this.ElementVerticalThumb === null))) {
			if ((System.Windows.Controls.Primitives.RangeBase.prototype.get_Maximum.call(this) - System.Windows.Controls.Primitives.RangeBase.prototype.get_Minimum.call(this)) !== 0) {
				num = System.Math.Max(this.ElementVerticalThumb.MinHeight, this.ConvertViewportSizeToDisplayUnits(trackLength));
			}
			if (!(((System.Windows.Controls.Primitives.RangeBase.prototype.get_Maximum.call(this) - System.Windows.Controls.Primitives.RangeBase.prototype.get_Minimum.call(this)) !== 0) && 
					(num <= System.Windows.FrameworkElement.prototype.get_ActualHeight.call(this)) && (trackLength > this.ElementVerticalThumb.MinHeight))) {
				flag = true;
			} else {
				this.ElementVerticalThumb.Visibility = System.Windows.Visibility.Visible;
				this.ElementVerticalThumb.Height = num;
			}
		}
	}
	if (flag) {
		if (this.ElementHorizontalThumb !== null) {
			this.ElementHorizontalThumb.Visibility = System.Windows.Visibility.Collapsed;
		}
		if (this.ElementVerticalThumb !== null) {
			this.ElementVerticalThumb.Visibility = System.Windows.Visibility.Collapsed;
		}
	}
	return num;
};
System.Windows.Controls.Primitives.ScrollBar.prototype.get_ElementHorizontalTemplate = function () {
	return this.ElementHorizontalTemplate$value;
};
System.Windows.Controls.Primitives.ScrollBar.prototype.set_ElementHorizontalTemplate = function (value) {
	this.ElementHorizontalTemplate$value = value;
};
System.Windows.Controls.Primitives.ScrollBar.prototype.get_ElementHorizontalLargeIncrease = function () {
	return this.ElementHorizontalLargeIncrease$value;
};
System.Windows.Controls.Primitives.ScrollBar.prototype.set_ElementHorizontalLargeIncrease = function (value) {
	this.ElementHorizontalLargeIncrease$value = value;
};
System.Windows.Controls.Primitives.ScrollBar.prototype.get_ElementHorizontalLargeDecrease = function () {
	return this.ElementHorizontalLargeDecrease$value;
};
System.Windows.Controls.Primitives.ScrollBar.prototype.set_ElementHorizontalLargeDecrease = function (value) {
	this.ElementHorizontalLargeDecrease$value = value;
};
System.Windows.Controls.Primitives.ScrollBar.prototype.get_ElementHorizontalSmallIncrease = function () {
	return this.ElementHorizontalSmallIncrease$value;
};
System.Windows.Controls.Primitives.ScrollBar.prototype.set_ElementHorizontalSmallIncrease = function (value) {
	this.ElementHorizontalSmallIncrease$value = value;
};
System.Windows.Controls.Primitives.ScrollBar.prototype.get_ElementHorizontalSmallDecrease = function () {
	return this.ElementHorizontalSmallDecrease$value;
};
System.Windows.Controls.Primitives.ScrollBar.prototype.set_ElementHorizontalSmallDecrease = function (value) {
	this.ElementHorizontalSmallDecrease$value = value;
};
System.Windows.Controls.Primitives.ScrollBar.prototype.get_ElementHorizontalThumb = function () {
	return this.ElementHorizontalThumb$value;
};
System.Windows.Controls.Primitives.ScrollBar.prototype.set_ElementHorizontalThumb = function (value) {
	this.ElementHorizontalThumb$value = value;
};
System.Windows.Controls.Primitives.ScrollBar.prototype.get_ElementVerticalTemplate = function () {
	return this.ElementVerticalTemplate$value;
};
System.Windows.Controls.Primitives.ScrollBar.prototype.set_ElementVerticalTemplate = function (value) {
	this.ElementVerticalTemplate$value = value;
};
System.Windows.Controls.Primitives.ScrollBar.prototype.get_ElementVerticalLargeIncrease = function () {
	return this.ElementVerticalLargeIncrease$value;
};
System.Windows.Controls.Primitives.ScrollBar.prototype.set_ElementVerticalLargeIncrease = function (value) {
	this.ElementVerticalLargeIncrease$value = value;
};
System.Windows.Controls.Primitives.ScrollBar.prototype.get_ElementVerticalLargeDecrease = function () {
	return this.ElementVerticalLargeDecrease$value;
};
System.Windows.Controls.Primitives.ScrollBar.prototype.set_ElementVerticalLargeDecrease = function (value) {
	this.ElementVerticalLargeDecrease$value = value;
};
System.Windows.Controls.Primitives.ScrollBar.prototype.get_ElementVerticalSmallIncrease = function () {
	return this.ElementVerticalSmallIncrease$value;
};
System.Windows.Controls.Primitives.ScrollBar.prototype.set_ElementVerticalSmallIncrease = function (value) {
	this.ElementVerticalSmallIncrease$value = value;
};
System.Windows.Controls.Primitives.ScrollBar.prototype.get_ElementVerticalSmallDecrease = function () {
	return this.ElementVerticalSmallDecrease$value;
};
System.Windows.Controls.Primitives.ScrollBar.prototype.set_ElementVerticalSmallDecrease = function (value) {
	this.ElementVerticalSmallDecrease$value = value;
};
System.Windows.Controls.Primitives.ScrollBar.prototype.get_ElementVerticalThumb = function () {
	return this.ElementVerticalThumb$value;
};
System.Windows.Controls.Primitives.ScrollBar.prototype.set_ElementVerticalThumb = function (value) {
	this.ElementVerticalThumb$value = value;
};
System.Windows.Controls.Primitives.ScrollBar.prototype.get_IsMouseOver = function () {
	return this.IsMouseOver$value;
};
System.Windows.Controls.Primitives.ScrollBar.prototype.set_IsMouseOver = function (value) {
	this.IsMouseOver$value = value;
};
JSIL.OverloadedMethod(System.Windows.Controls.Primitives.ScrollBar.prototype, "UpdateVisualState", [
		["UpdateVisualState$0", []], 
		["UpdateVisualState$1", [System.Boolean]]
	]);
JSIL.MakeProperty(System.Windows.Controls.Primitives.ScrollBar.prototype, "IsDragging", 
	System.Windows.Controls.Primitives.ScrollBar.prototype.get_IsDragging, null);
JSIL.MakeProperty(System.Windows.Controls.Primitives.ScrollBar.prototype, "Orientation", 
	System.Windows.Controls.Primitives.ScrollBar.prototype.get_Orientation, System.Windows.Controls.Primitives.ScrollBar.prototype.set_Orientation);
JSIL.MakeProperty(System.Windows.Controls.Primitives.ScrollBar.prototype, "ViewportSize", 
	System.Windows.Controls.Primitives.ScrollBar.prototype.get_ViewportSize, System.Windows.Controls.Primitives.ScrollBar.prototype.set_ViewportSize);
JSIL.MakeProperty(System.Windows.Controls.Primitives.ScrollBar.prototype, "ElementHorizontalTemplate", 
	System.Windows.Controls.Primitives.ScrollBar.prototype.get_ElementHorizontalTemplate, System.Windows.Controls.Primitives.ScrollBar.prototype.set_ElementHorizontalTemplate);
JSIL.MakeProperty(System.Windows.Controls.Primitives.ScrollBar.prototype, "ElementHorizontalLargeIncrease", 
	System.Windows.Controls.Primitives.ScrollBar.prototype.get_ElementHorizontalLargeIncrease, System.Windows.Controls.Primitives.ScrollBar.prototype.set_ElementHorizontalLargeIncrease);
JSIL.MakeProperty(System.Windows.Controls.Primitives.ScrollBar.prototype, "ElementHorizontalLargeDecrease", 
	System.Windows.Controls.Primitives.ScrollBar.prototype.get_ElementHorizontalLargeDecrease, System.Windows.Controls.Primitives.ScrollBar.prototype.set_ElementHorizontalLargeDecrease);
JSIL.MakeProperty(System.Windows.Controls.Primitives.ScrollBar.prototype, "ElementHorizontalSmallIncrease", 
	System.Windows.Controls.Primitives.ScrollBar.prototype.get_ElementHorizontalSmallIncrease, System.Windows.Controls.Primitives.ScrollBar.prototype.set_ElementHorizontalSmallIncrease);
JSIL.MakeProperty(System.Windows.Controls.Primitives.ScrollBar.prototype, "ElementHorizontalSmallDecrease", 
	System.Windows.Controls.Primitives.ScrollBar.prototype.get_ElementHorizontalSmallDecrease, System.Windows.Controls.Primitives.ScrollBar.prototype.set_ElementHorizontalSmallDecrease);
JSIL.MakeProperty(System.Windows.Controls.Primitives.ScrollBar.prototype, "ElementHorizontalThumb", 
	System.Windows.Controls.Primitives.ScrollBar.prototype.get_ElementHorizontalThumb, System.Windows.Controls.Primitives.ScrollBar.prototype.set_ElementHorizontalThumb);
JSIL.MakeProperty(System.Windows.Controls.Primitives.ScrollBar.prototype, "ElementVerticalTemplate", 
	System.Windows.Controls.Primitives.ScrollBar.prototype.get_ElementVerticalTemplate, System.Windows.Controls.Primitives.ScrollBar.prototype.set_ElementVerticalTemplate);
JSIL.MakeProperty(System.Windows.Controls.Primitives.ScrollBar.prototype, "ElementVerticalLargeIncrease", 
	System.Windows.Controls.Primitives.ScrollBar.prototype.get_ElementVerticalLargeIncrease, System.Windows.Controls.Primitives.ScrollBar.prototype.set_ElementVerticalLargeIncrease);
JSIL.MakeProperty(System.Windows.Controls.Primitives.ScrollBar.prototype, "ElementVerticalLargeDecrease", 
	System.Windows.Controls.Primitives.ScrollBar.prototype.get_ElementVerticalLargeDecrease, System.Windows.Controls.Primitives.ScrollBar.prototype.set_ElementVerticalLargeDecrease);
JSIL.MakeProperty(System.Windows.Controls.Primitives.ScrollBar.prototype, "ElementVerticalSmallIncrease", 
	System.Windows.Controls.Primitives.ScrollBar.prototype.get_ElementVerticalSmallIncrease, System.Windows.Controls.Primitives.ScrollBar.prototype.set_ElementVerticalSmallIncrease);
JSIL.MakeProperty(System.Windows.Controls.Primitives.ScrollBar.prototype, "ElementVerticalSmallDecrease", 
	System.Windows.Controls.Primitives.ScrollBar.prototype.get_ElementVerticalSmallDecrease, System.Windows.Controls.Primitives.ScrollBar.prototype.set_ElementVerticalSmallDecrease);
JSIL.MakeProperty(System.Windows.Controls.Primitives.ScrollBar.prototype, "ElementVerticalThumb", 
	System.Windows.Controls.Primitives.ScrollBar.prototype.get_ElementVerticalThumb, System.Windows.Controls.Primitives.ScrollBar.prototype.set_ElementVerticalThumb);
JSIL.MakeProperty(System.Windows.Controls.Primitives.ScrollBar.prototype, "IsMouseOver", 
	System.Windows.Controls.Primitives.ScrollBar.prototype.get_IsMouseOver, System.Windows.Controls.Primitives.ScrollBar.prototype.set_IsMouseOver);
Object.defineProperty(System.Windows.Controls.Primitives.ScrollBar, "ElementHorizontalTemplateName", {
		"value": "HorizontalRoot"}
);
Object.defineProperty(System.Windows.Controls.Primitives.ScrollBar, "ElementHorizontalLargeIncreaseName", {
		"value": "HorizontalLargeIncrease"}
);
Object.defineProperty(System.Windows.Controls.Primitives.ScrollBar, "ElementHorizontalLargeDecreaseName", {
		"value": "HorizontalLargeDecrease"}
);
Object.defineProperty(System.Windows.Controls.Primitives.ScrollBar, "ElementHorizontalSmallIncreaseName", {
		"value": "HorizontalSmallIncrease"}
);
Object.defineProperty(System.Windows.Controls.Primitives.ScrollBar, "ElementHorizontalSmallDecreaseName", {
		"value": "HorizontalSmallDecrease"}
);
Object.defineProperty(System.Windows.Controls.Primitives.ScrollBar, "ElementHorizontalThumbName", {
		"value": "HorizontalThumb"}
);
Object.defineProperty(System.Windows.Controls.Primitives.ScrollBar, "ElementVerticalTemplateName", {
		"value": "VerticalRoot"}
);
Object.defineProperty(System.Windows.Controls.Primitives.ScrollBar, "ElementVerticalLargeIncreaseName", {
		"value": "VerticalLargeIncrease"}
);
Object.defineProperty(System.Windows.Controls.Primitives.ScrollBar, "ElementVerticalLargeDecreaseName", {
		"value": "VerticalLargeDecrease"}
);
Object.defineProperty(System.Windows.Controls.Primitives.ScrollBar, "ElementVerticalSmallIncreaseName", {
		"value": "VerticalSmallIncrease"}
);
Object.defineProperty(System.Windows.Controls.Primitives.ScrollBar, "ElementVerticalSmallDecreaseName", {
		"value": "VerticalSmallDecrease"}
);
Object.defineProperty(System.Windows.Controls.Primitives.ScrollBar, "ElementVerticalThumbName", {
		"value": "VerticalThumb"}
);
Object.defineProperty(System.Windows.Controls.Primitives.ScrollBar, "StateNormal", {
		"value": "Normal"}
);
Object.defineProperty(System.Windows.Controls.Primitives.ScrollBar, "StateMouseOver", {
		"value": "MouseOver"}
);
Object.defineProperty(System.Windows.Controls.Primitives.ScrollBar, "StateDisabled", {
		"value": "Disabled"}
);
Object.defineProperty(System.Windows.Controls.Primitives.ScrollBar, "GroupCommon", {
		"value": "CommonStates"}
);
System.Windows.Controls.Primitives.ScrollBar.OrientationProperty = null;
System.Windows.Controls.Primitives.ScrollBar.ViewportSizeProperty = null;
System.Windows.Controls.Primitives.ScrollBar.prototype.Scroll = null;
System.Windows.Controls.Primitives.ScrollBar.prototype._dragValue = 0;
System.Windows.Controls.Primitives.ScrollBar.prototype.ElementHorizontalTemplate$value = null;
System.Windows.Controls.Primitives.ScrollBar.prototype.ElementHorizontalLargeIncrease$value = null;
System.Windows.Controls.Primitives.ScrollBar.prototype.ElementHorizontalLargeDecrease$value = null;
System.Windows.Controls.Primitives.ScrollBar.prototype.ElementHorizontalSmallIncrease$value = null;
System.Windows.Controls.Primitives.ScrollBar.prototype.ElementHorizontalSmallDecrease$value = null;
System.Windows.Controls.Primitives.ScrollBar.prototype.ElementHorizontalThumb$value = null;
System.Windows.Controls.Primitives.ScrollBar.prototype.ElementVerticalTemplate$value = null;
System.Windows.Controls.Primitives.ScrollBar.prototype.ElementVerticalLargeIncrease$value = null;
System.Windows.Controls.Primitives.ScrollBar.prototype.ElementVerticalLargeDecrease$value = null;
System.Windows.Controls.Primitives.ScrollBar.prototype.ElementVerticalSmallIncrease$value = null;
System.Windows.Controls.Primitives.ScrollBar.prototype.ElementVerticalSmallDecrease$value = null;
System.Windows.Controls.Primitives.ScrollBar.prototype.ElementVerticalThumb$value = null;
System.Windows.Controls.Primitives.ScrollBar.prototype.IsMouseOver$value = false;
System.Windows.Controls.Primitives.ScrollBar._cctor = function () {
	System.Windows.Controls.Primitives.ScrollBar.OrientationProperty = System.Windows.DependencyProperty.Register$0("Orientation", System.Windows.Controls.Orientation, System.Windows.Controls.Primitives.ScrollBar, JSIL.New(System.Windows.PropertyMetadata, "_ctor$2", [System.Windows.Controls.Orientation.Vertical, JSIL.Delegate.New("System.Windows.PropertyChangedCallback", null, System.Windows.Controls.Primitives.ScrollBar.OnOrientationPropertyChanged)]));
	System.Windows.Controls.Primitives.ScrollBar.ViewportSizeProperty = System.Windows.DependencyProperty.Register$0("ViewportSize", System.Double, System.Windows.Controls.Primitives.ScrollBar, JSIL.New(System.Windows.PropertyMetadata, "_ctor$2", [0, JSIL.Delegate.New("System.Windows.PropertyChangedCallback", null, System.Windows.Controls.Primitives.ScrollBar.OnViewportSizeChanged)]));
};

System.Windows.Controls.Primitives.ScrollEventArgs.prototype.get_NewValue = function () {
	return this._newValue;
};
System.Windows.Controls.Primitives.ScrollEventArgs.prototype.get_ScrollEventType = function () {
	return this._scrollEventType;
};
System.Windows.Controls.Primitives.ScrollEventArgs.prototype._ctor = function (scrollEventType, newValue) {
	System.Windows.RoutedEventArgs.prototype._ctor.call(this);
	this._scrollEventType = scrollEventType;
	this._newValue = newValue;
};
JSIL.MakeProperty(System.Windows.Controls.Primitives.ScrollEventArgs.prototype, "NewValue", 
	System.Windows.Controls.Primitives.ScrollEventArgs.prototype.get_NewValue, null);
JSIL.MakeProperty(System.Windows.Controls.Primitives.ScrollEventArgs.prototype, "ScrollEventType", 
	System.Windows.Controls.Primitives.ScrollEventArgs.prototype.get_ScrollEventType, null);
System.Windows.Controls.Primitives.ScrollEventArgs.prototype._newValue = 0;
System.Windows.Controls.Primitives.ScrollEventArgs.prototype._scrollEventType = 0;

System.Windows.Controls.Primitives.Thumb.prototype.get_IsDragging = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Primitives.Thumb.IsDraggingProperty), System.Boolean);
};
System.Windows.Controls.Primitives.Thumb.prototype.set_IsDragging = function (value) {
	System.Windows.DependencyObject.prototype.SetValueInternal$1.call(this, System.Windows.Controls.Primitives.Thumb.IsDraggingProperty, value, true);
};
System.Windows.Controls.Primitives.Thumb.OnIsDraggingPropertyChanged = function (d, e) {
	var thumb = JSIL.TryCast(d, System.Windows.Controls.Primitives.Thumb);
	thumb.OnDraggingChanged();
};
System.Windows.Controls.Primitives.Thumb.prototype.OnDraggingChanged = function () {
	this.UpdateVisualState$0();
};
System.Windows.Controls.Primitives.Thumb.prototype.OnIsEnabledChanged = function (e) {
	System.Windows.Controls.Control.prototype.OnIsEnabledChanged.call(this, e);
	if (!System.Windows.Controls.Control.prototype.get_IsEnabled.call(this)) {
		this.IsMouseOver = false;
	}
	this.UpdateVisualState$0();
};
System.Windows.Controls.Primitives.Thumb.prototype.get_IsFocused = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Primitives.Thumb.IsFocusedProperty), System.Boolean);
};
System.Windows.Controls.Primitives.Thumb.prototype.set_IsFocused = function (value) {
	System.Windows.DependencyObject.prototype.SetValueInternal$1.call(this, System.Windows.Controls.Primitives.Thumb.IsFocusedProperty, value, true);
};
System.Windows.Controls.Primitives.Thumb.prototype.add_DragStarted = function (value) {
	this.DragStarted = System.Delegate.Combine(this.DragStarted, value);
};
System.Windows.Controls.Primitives.Thumb.prototype.remove_DragStarted = function (value) {
	this.DragStarted = System.Delegate.Remove(this.DragStarted, value);
};
System.Windows.Controls.Primitives.Thumb.prototype.add_DragDelta = function (value) {
	this.DragDelta = System.Delegate.Combine(this.DragDelta, value);
};
System.Windows.Controls.Primitives.Thumb.prototype.remove_DragDelta = function (value) {
	this.DragDelta = System.Delegate.Remove(this.DragDelta, value);
};
System.Windows.Controls.Primitives.Thumb.prototype.add_DragCompleted = function (value) {
	this.DragCompleted = System.Delegate.Combine(this.DragCompleted, value);
};
System.Windows.Controls.Primitives.Thumb.prototype.remove_DragCompleted = function (value) {
	this.DragCompleted = System.Delegate.Remove(this.DragCompleted, value);
};
System.Windows.Controls.Primitives.Thumb.prototype._ctor = function () {
	System.Windows.Controls.Control.prototype._ctor$0.call(this);
	System.Windows.Controls.Control.prototype.set_DefaultStyleKey.call(this, System.Windows.Controls.Primitives.Thumb);
};
System.Windows.Controls.Primitives.Thumb.prototype.OnApplyTemplate = function () {
	System.Windows.FrameworkElement.prototype.OnApplyTemplate.call(this);
	this.UpdateVisualState$1(false);
};
System.Windows.Controls.Primitives.Thumb.prototype.OnMouseLeftButtonDown = function (e) {
	System.Windows.Controls.Control.prototype.OnMouseLeftButtonDown.call(this, e);
	if (e.Handled) {
		return;
	}
	if (!(this.IsDragging || 
			!System.Windows.Controls.Control.prototype.get_IsEnabled.call(this) || (System.Windows.FrameworkElement.prototype.get_Parent.call(this) === null))) {
		e.Handled = true;
		System.Windows.UIElement.prototype.CaptureMouse.call(this);
		this.IsDragging = true;
		if (JSIL.TryCast(System.Windows.FrameworkElement.prototype.get_Parent.call(this), System.Windows.Controls.Primitives.Popup) !== null) {
			this._transformToOriginal = System.Windows.UIElement.prototype.TransformToVisual.call(this, null).Inverse;
		} else {
			this._transformToOriginal = JSIL.Cast(System.Windows.FrameworkElement.prototype.get_Parent.call(this), System.Windows.UIElement).TransformToVisual(null).Inverse;
		}
		this._origin = (this._previousPosition = $asm02.MS.Internal.QuirksMode.ShouldComputeDragRelativeToParent() ? e.GetPosition(JSIL.Cast(System.Windows.FrameworkElement.prototype.get_Parent.call(this), System.Windows.UIElement)) : this._transformToOriginal.Transform(e.GetPosition(null).MemberwiseClone()).MemberwiseClone()).MemberwiseClone();
		var flag = false;
		try {
			var dragStarted = this.DragStarted;
			if (dragStarted !== null) {
				dragStarted(this, new System.Windows.Controls.Primitives.DragStartedEventArgs(this._origin.X, this._origin.Y));
			}
			flag = true;
		} finally {
			if (!flag) {
				this.CancelDrag();
			}
		}
	}
};
System.Windows.Controls.Primitives.Thumb.prototype.OnLostMouseCapture = function (e) {
	if (!(!this.IsDragging || !System.Windows.Controls.Control.prototype.get_IsEnabled.call(this))) {
		this.IsDragging = false;
		System.Windows.UIElement.prototype.ReleaseMouseCapture.call(this);
		this.RaiseDragCompleted(false);
	}
};
System.Windows.Controls.Primitives.Thumb.prototype.OnMouseEnter = function (e) {
	System.Windows.Controls.Control.prototype.OnMouseEnter.call(this, e);
	if (System.Windows.Controls.Control.prototype.get_IsEnabled.call(this)) {
		this.IsMouseOver = true;
		this.UpdateVisualState$0();
	}
};
System.Windows.Controls.Primitives.Thumb.prototype.OnMouseLeave = function (e) {
	System.Windows.Controls.Control.prototype.OnMouseLeave.call(this, e);
	if (System.Windows.Controls.Control.prototype.get_IsEnabled.call(this)) {
		this.IsMouseOver = false;
		this.UpdateVisualState$0();
	}
};
System.Windows.Controls.Primitives.Thumb.prototype.OnMouseMove = function (e) {
	System.Windows.Controls.Control.prototype.OnMouseMove.call(this, e);
	if (this.IsDragging) {
		var flag = $asm02.MS.Internal.QuirksMode.ShouldComputeDragRelativeToParent();
		if (!(!flag || JSIL.TryCast(System.Windows.FrameworkElement.prototype.get_Parent.call(this), System.Windows.UIElement))) {
			return;
		}
		var point = flag ? e.GetPosition(JSIL.Cast(System.Windows.FrameworkElement.prototype.get_Parent.call(this), System.Windows.UIElement)) : this._transformToOriginal.Transform(e.GetPosition(null).MemberwiseClone()).MemberwiseClone();
		if (System.Windows.Point.op_Inequality(point.MemberwiseClone(), this._previousPosition.MemberwiseClone())) {
			var dragDelta = this.DragDelta;
			if (dragDelta !== null) {
				dragDelta(this, new System.Windows.Controls.Primitives.DragDeltaEventArgs((point.X - this._previousPosition.X), (point.Y - this._previousPosition.Y)));
			}
			this._previousPosition = point.MemberwiseClone();
		}
	}
};
System.Windows.Controls.Primitives.Thumb.prototype.OnGotFocus = function (e) {
	System.Windows.Controls.Control.prototype.OnGotFocus.call(this, e);
	this.FocusChanged(this.HasFocus());
};
System.Windows.Controls.Primitives.Thumb.prototype.OnLostFocus = function (e) {
	System.Windows.Controls.Control.prototype.OnLostFocus.call(this, e);
	this.FocusChanged(this.HasFocus());
};
System.Windows.Controls.Primitives.Thumb.prototype.FocusChanged = function (hasFocus) {
	this.IsFocused = hasFocus;
	this.UpdateVisualState$0();
};
System.Windows.Controls.Primitives.Thumb.prototype.UpdateVisualState$0 = function () {
	this.UpdateVisualState$1(true);
};
System.Windows.Controls.Primitives.Thumb.prototype.UpdateVisualState$1 = function (useTransitions) {
	if (!System.Windows.Controls.Control.prototype.get_IsEnabled.call(this)) {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "Disabled");
	} else if (this.IsDragging) {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "Pressed");
	} else if (this.IsMouseOver) {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "MouseOver");
	} else {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "Normal");
	}
	if (!(!this.IsFocused || !System.Windows.Controls.Control.prototype.get_IsEnabled.call(this))) {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "Focused");
		return;
	}
	System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "Unfocused");
};
System.Windows.Controls.Primitives.Thumb.prototype.CancelDrag = function () {
	if (this.IsDragging) {
		this.IsDragging = false;
		this.RaiseDragCompleted(true);
	}
};
System.Windows.Controls.Primitives.Thumb.prototype.RaiseDragCompleted = function (canceled) {
	var dragCompleted = this.DragCompleted;
	if (dragCompleted !== null) {
		var e = new System.Windows.Controls.Primitives.DragCompletedEventArgs((this._previousPosition.X - this._origin.X), (this._previousPosition.Y - this._origin.Y), canceled);
		dragCompleted(this, e);
	}
};
System.Windows.Controls.Primitives.Thumb.prototype.OnCreateAutomationPeer = function () {
	return new System.Windows.Automation.Peers.ThumbAutomationPeer(this);
};
System.Windows.Controls.Primitives.Thumb.prototype.get_IsMouseOver = function () {
	return this.IsMouseOver$value;
};
System.Windows.Controls.Primitives.Thumb.prototype.set_IsMouseOver = function (value) {
	this.IsMouseOver$value = value;
};
JSIL.OverloadedMethod(System.Windows.Controls.Primitives.Thumb.prototype, "UpdateVisualState", [
		["UpdateVisualState$0", []], 
		["UpdateVisualState$1", [System.Boolean]]
	]);
JSIL.MakeProperty(System.Windows.Controls.Primitives.Thumb.prototype, "IsDragging", 
	System.Windows.Controls.Primitives.Thumb.prototype.get_IsDragging, System.Windows.Controls.Primitives.Thumb.prototype.set_IsDragging);
JSIL.MakeProperty(System.Windows.Controls.Primitives.Thumb.prototype, "IsFocused", 
	System.Windows.Controls.Primitives.Thumb.prototype.get_IsFocused, System.Windows.Controls.Primitives.Thumb.prototype.set_IsFocused);
JSIL.MakeProperty(System.Windows.Controls.Primitives.Thumb.prototype, "IsMouseOver", 
	System.Windows.Controls.Primitives.Thumb.prototype.get_IsMouseOver, System.Windows.Controls.Primitives.Thumb.prototype.set_IsMouseOver);
System.Windows.Controls.Primitives.Thumb.IsDraggingProperty = null;
System.Windows.Controls.Primitives.Thumb.IsFocusedProperty = null;
System.Windows.Controls.Primitives.Thumb.prototype.DragStarted = null;
System.Windows.Controls.Primitives.Thumb.prototype.DragDelta = null;
System.Windows.Controls.Primitives.Thumb.prototype.DragCompleted = null;
System.Windows.Controls.Primitives.Thumb.prototype._transformToOriginal = null;
System.Windows.Controls.Primitives.Thumb.prototype.IsMouseOver$value = false;
System.Windows.Controls.Primitives.Thumb._cctor = function () {
	System.Windows.Controls.Primitives.Thumb.IsDraggingProperty = System.Windows.DependencyProperty.RegisterReadOnly("IsDragging", System.Boolean, System.Windows.Controls.Primitives.Thumb, JSIL.New(System.Windows.PropertyMetadata, "_ctor$0", [JSIL.Delegate.New("System.Windows.PropertyChangedCallback", null, System.Windows.Controls.Primitives.Thumb.OnIsDraggingPropertyChanged)]));
	System.Windows.Controls.Primitives.Thumb.IsFocusedProperty = System.Windows.DependencyProperty.RegisterReadOnly("IsFocused", System.Boolean, System.Windows.Controls.Primitives.Thumb, null);
};

System.Windows.Controls.RadioButton.prototype.get_GroupName = function () {
	return JSIL.TryCast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.RadioButton.GroupNameProperty), System.String);
};
System.Windows.Controls.RadioButton.prototype.set_GroupName = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.RadioButton.GroupNameProperty, value);
};
System.Windows.Controls.RadioButton.OnGroupNamePropertyChanged = function (d, e) {
	var radioButton = JSIL.TryCast(d, System.Windows.Controls.RadioButton);
	var groupName = JSIL.Cast(e.OldValue, System.String);
	System.Windows.Controls.RadioButton.Unregister(groupName, radioButton);
	var groupName2 = JSIL.Cast(e.NewValue, System.String);
	System.Windows.Controls.RadioButton.Register(groupName2, radioButton);
};
System.Windows.Controls.RadioButton.prototype._ctor = function () {
	System.Windows.Controls.Primitives.ToggleButton.prototype._ctor.call(this);
	$asm02.System.Windows.Input.KeyboardNavigation.SetAcceptsReturn(this, false);
	System.Windows.Controls.Control.prototype.set_DefaultStyleKey.call(this, System.Windows.Controls.RadioButton);
	System.Windows.Controls.RadioButton.Register("", this);
};
System.Windows.Controls.RadioButton.prototype.OnToggle = function () {
	System.Windows.Controls.Primitives.ToggleButton.prototype.set_IsChecked.call(this, new (System.Nullable$b1.Of(System.Boolean)) (true));
};
System.Windows.Controls.RadioButton.prototype.OnChecked = function (e) {
	this.UpdateRadioButtonGroup();
	System.Windows.Controls.Primitives.ToggleButton.prototype.OnChecked.call(this, e);
};
System.Windows.Controls.RadioButton.prototype.OnCreateAutomationPeer = function () {
	return new System.Windows.Automation.Peers.RadioButtonAutomationPeer(this);
};
System.Windows.Controls.RadioButton.prototype.UpdateRadioButtonGroup = function () {
	var list2 = new JSIL.Variable(null);
	var groupName = this.GroupName;
	if (!System.String.IsNullOrEmpty(groupName)) {
		var visualRoot = $asm02.System.Windows.Input.KeyboardNavigation.GetVisualRoot(this);
		var list = System.Windows.Controls.RadioButton._groupNameToElements.get_Item(groupName);
	__loop0__: 
		for (var i = 0; i < list.Count; ) {
			var radioButton = JSIL.TryCast(list.get_Item(i).Target, System.Windows.Controls.RadioButton);
			if (radioButton === null) {
				list.RemoveAt(i);
			} else {
				if (radioButton !== this) {
					var isChecked = radioButton.IsChecked.MemberwiseClone();
					if (!(!(isChecked.GetValueOrDefault$0() && 
								isChecked.HasValue) || (visualRoot !== $asm02.System.Windows.Input.KeyboardNavigation.GetVisualRoot(radioButton)))) {
						(radioButton.IsChecked = new (System.Nullable$b1.Of(System.Boolean)) (false));
					}
				}
				++i;
			}
		}
		return;
	}
	if ($asm02.MS.Internal.QuirksMode.ShouldUsePanelsToGroupRadioButtons()) {
		var panel = JSIL.TryCast(System.Windows.FrameworkElement.prototype.get_Parent.call(this), System.Windows.Controls.Panel);
		if (panel === null) {
			return;
		}
		var enumerator = panel.Children.GetEnumerator();
		try {
		__loop1__: 
			while (enumerator.IEnumerator_MoveNext()) {
				var current = enumerator.IEnumerator$b1_Current;
				var radioButton2 = JSIL.TryCast(current, System.Windows.Controls.RadioButton);
				if (!((radioButton2 === null) || 
						(radioButton2 === this) || !System.String.IsNullOrEmpty(radioButton2.GroupName))) {
					var isChecked2 = radioButton2.IsChecked.MemberwiseClone();
					if (isChecked2.GetValueOrDefault$0() && isChecked2.HasValue) {
						(radioButton2.IsChecked = new (System.Nullable$b1.Of(System.Boolean)) (false));
					}
				}
			}
			return;
		} finally {
			if (enumerator !== null) {
				enumerator.IDisposable_Dispose();
			}
		}
	}
	if (!(!System.Windows.Controls.RadioButton._groupNameToElements.TryGetValue("", /* ref */ list2) || (list2.value === null))) {
	__loop2__: 
		for (var j = 0; j < list2.value.Count; ) {
			var radioButton3 = JSIL.TryCast(list2.value.get_Item(j).Target, System.Windows.Controls.RadioButton);
			if (radioButton3 === null) {
				list2.value.RemoveAt(j);
			} else {
				if (radioButton3 !== this) {
					var isChecked3 = radioButton3.IsChecked.MemberwiseClone();
					if (!(!(isChecked3.GetValueOrDefault$0() && 
								isChecked3.HasValue) || (radioButton3.Parent !== System.Windows.FrameworkElement.prototype.get_Parent.call(this)))) {
						(radioButton3.IsChecked = new (System.Nullable$b1.Of(System.Boolean)) (false));
					}
				}
				++j;
			}
		}
	}
};
System.Windows.Controls.RadioButton.Register = function (groupName, radioButton) {
	if (groupName === null) {
		groupName = "";
	}
	if (System.Windows.Controls.RadioButton._groupNameToElements === null) {
		System.Windows.Controls.RadioButton._groupNameToElements = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.String, System.Collections.Generic.List$b1.Of(System.WeakReference)), "_ctor$1", [1]);
	}
	var list = new JSIL.Variable(null);
	if (!(System.Windows.Controls.RadioButton._groupNameToElements.TryGetValue(groupName, /* ref */ list) && list.value)) {
		list.value = new (System.Collections.Generic.List$b1.Of(System.WeakReference)) (1);
		System.Windows.Controls.RadioButton._groupNameToElements.set_Item(groupName, list.value);
	} else {
		System.Windows.Controls.RadioButton.PurgeExpiredReferences(list.value, null);
	}
	list.value.Add(JSIL.New(System.WeakReference, "_ctor$1", [radioButton]));
};
System.Windows.Controls.RadioButton.Unregister = function (groupName, radioButton) {
	var list = new JSIL.Variable(null);
	if (groupName === null) {
		groupName = "";
	}
	if (!((System.Windows.Controls.RadioButton._groupNameToElements === null) || 
			!System.Windows.Controls.RadioButton._groupNameToElements.TryGetValue(groupName, /* ref */ list) || (list.value === null))) {
		System.Windows.Controls.RadioButton.PurgeExpiredReferences(list.value, radioButton);
		if (list.value.Count === 0) {
			System.Windows.Controls.RadioButton._groupNameToElements.Remove(groupName);
		}
	}
};
System.Windows.Controls.RadioButton.PurgeExpiredReferences = function (elements, elementToRemove) {
__loop0__: 
	for (var i = 0; i < elements.Count; ) {
		var target = elements.get_Item(i).Target;
		if (!((target !== null) && (target !== elementToRemove))) {
			elements.RemoveAt(i);
		} else {
			++i;
		}
	}
};
JSIL.MakeProperty(System.Windows.Controls.RadioButton.prototype, "GroupName", 
	System.Windows.Controls.RadioButton.prototype.get_GroupName, System.Windows.Controls.RadioButton.prototype.set_GroupName);
System.Windows.Controls.RadioButton._groupNameToElements = null;
System.Windows.Controls.RadioButton.GroupNameProperty = null;
System.Windows.Controls.RadioButton._cctor = function () {
	System.Windows.Controls.RadioButton.GroupNameProperty = System.Windows.DependencyProperty.Register$0("GroupName", System.String, System.Windows.Controls.RadioButton, JSIL.New(System.Windows.PropertyMetadata, "_ctor$0", [JSIL.Delegate.New("System.Windows.PropertyChangedCallback", null, System.Windows.Controls.RadioButton.OnGroupNamePropertyChanged)]));
};

System.Windows.Controls.ScrollContentPresenter.prototype._ctor = function () {
	System.Windows.Controls.ContentPresenter.prototype._ctor$0.call(this);
	this._isClipPropertySet = false;
	this._scrollData = new $asm02.MS.Internal.Controls.ScrollData();
};
System.Windows.Controls.ScrollContentPresenter.prototype.LineUp = function () {
	if (this.IsScrollClient) {
		this.SetVerticalOffset((this.VerticalOffset - 16));
	}
};
System.Windows.Controls.ScrollContentPresenter.prototype.LineDown = function () {
	if (this.IsScrollClient) {
		this.SetVerticalOffset((this.VerticalOffset + 16));
	}
};
System.Windows.Controls.ScrollContentPresenter.prototype.LineLeft = function () {
	if (this.IsScrollClient) {
		this.SetHorizontalOffset((this.HorizontalOffset - 16));
	}
};
System.Windows.Controls.ScrollContentPresenter.prototype.LineRight = function () {
	if (this.IsScrollClient) {
		this.SetHorizontalOffset((this.HorizontalOffset + 16));
	}
};
System.Windows.Controls.ScrollContentPresenter.prototype.PageUp = function () {
	if (this.IsScrollClient) {
		this.SetVerticalOffset((this.VerticalOffset - this.ViewportHeight));
	}
};
System.Windows.Controls.ScrollContentPresenter.prototype.PageDown = function () {
	if (this.IsScrollClient) {
		this.SetVerticalOffset((this.VerticalOffset + this.ViewportHeight));
	}
};
System.Windows.Controls.ScrollContentPresenter.prototype.PageLeft = function () {
	if (this.IsScrollClient) {
		this.SetHorizontalOffset((this.HorizontalOffset - this.ViewportWidth));
	}
};
System.Windows.Controls.ScrollContentPresenter.prototype.PageRight = function () {
	if (this.IsScrollClient) {
		this.SetHorizontalOffset((this.HorizontalOffset + this.ViewportWidth));
	}
};
System.Windows.Controls.ScrollContentPresenter.prototype.MouseWheelUp = function () {
	if (this.IsScrollClient) {
		this.SetVerticalOffset((this.VerticalOffset - 48));
	}
};
System.Windows.Controls.ScrollContentPresenter.prototype.MouseWheelDown = function () {
	if (this.IsScrollClient) {
		this.SetVerticalOffset((this.VerticalOffset + 48));
	}
};
System.Windows.Controls.ScrollContentPresenter.prototype.MouseWheelLeft = function () {
	if (this.IsScrollClient) {
		this.SetHorizontalOffset((this.HorizontalOffset - 48));
	}
};
System.Windows.Controls.ScrollContentPresenter.prototype.MouseWheelRight = function () {
	if (this.IsScrollClient) {
		this.SetHorizontalOffset((this.HorizontalOffset + 48));
	}
};
System.Windows.Controls.ScrollContentPresenter.prototype.SetHorizontalOffset = function (offset) {
	if (this.CanHorizontallyScroll) {
		var num = System.Windows.Controls.ScrollContentPresenter.ValidateInputOffset(offset);
		if (!$asm02.MS.Internal.DoubleUtil.AreClose$0(this._scrollData._offset.X, num)) {
			this._scrollData._offset.X = num;
			System.Windows.UIElement.prototype.InvalidateArrange.call(this);
		}
	}
};
System.Windows.Controls.ScrollContentPresenter.prototype.SetVerticalOffset = function (offset) {
	if (this.CanVerticallyScroll) {
		var num = System.Windows.Controls.ScrollContentPresenter.ValidateInputOffset(offset);
		if (!$asm02.MS.Internal.DoubleUtil.AreClose$0(this._scrollData._offset.Y, num)) {
			this._scrollData._offset.Y = num;
			System.Windows.UIElement.prototype.InvalidateArrange.call(this);
		}
	}
};
System.Windows.Controls.ScrollContentPresenter.prototype.MakeVisible = function (visual, rectangle) {
	var rect = new System.Windows.Rect();
	if (!(!rectangle.IsEmpty && 
			(visual !== null) && 
			(visual !== this) && System.Windows.UIElement.prototype.IsAncestorOf.call(this, visual))) {
		return System.Windows.Rect.Empty;
	}
	var generalTransform = visual.TransformToVisual(this);
	var point = generalTransform.Transform(new System.Windows.Point(rectangle.X, rectangle.Y)).MemberwiseClone();
	rectangle.X = point.X;
	rectangle.Y = point.Y;
	if (!this.IsScrollClient) {
		return rectangle;
	}
	rect._ctor$0(this.HorizontalOffset, this.VerticalOffset, this.ViewportWidth, this.ViewportHeight);
	rectangle.X += rect.X;
	rectangle.Y += rect.Y;
	var num = System.Windows.Controls.ScrollContentPresenter.ComputeScrollOffsetWithMinimalScroll(rect.Left, rect.Right, rectangle.Left, rectangle.Right);
	var num2 = System.Windows.Controls.ScrollContentPresenter.ComputeScrollOffsetWithMinimalScroll(rect.Top, rect.Bottom, rectangle.Top, rectangle.Bottom);
	this.SetHorizontalOffset(num);
	this.SetVerticalOffset(num2);
	rect.X = num;
	rect.Y = num2;
	rectangle.Intersect(rect.MemberwiseClone());
	if (!rectangle.IsEmpty) {
		rectangle.X -= rect.X;
		rectangle.Y -= rect.Y;
	}
	return rectangle;
};
System.Windows.Controls.ScrollContentPresenter.prototype.get_CanVerticallyScroll = function () {
	return (this.IsScrollClient && this._scrollData._canVerticallyScroll);
};
System.Windows.Controls.ScrollContentPresenter.prototype.set_CanVerticallyScroll = function (value) {
	if (!(!this.IsScrollClient || (this._scrollData._canVerticallyScroll === value))) {
		this._scrollData._canVerticallyScroll = value;
		System.Windows.UIElement.prototype.InvalidateMeasure.call(this);
	}
};
System.Windows.Controls.ScrollContentPresenter.prototype.get_CanHorizontallyScroll = function () {
	return (this.IsScrollClient && this._scrollData._canHorizontallyScroll);
};
System.Windows.Controls.ScrollContentPresenter.prototype.set_CanHorizontallyScroll = function (value) {
	if (!(!this.IsScrollClient || (this._scrollData._canHorizontallyScroll === value))) {
		this._scrollData._canHorizontallyScroll = value;
		System.Windows.UIElement.prototype.InvalidateMeasure.call(this);
	}
};
System.Windows.Controls.ScrollContentPresenter.prototype.get_ExtentWidth = function () {
	if (!this.IsScrollClient) {
		return 0;
	}
	return this._scrollData._extent.Width;
};
System.Windows.Controls.ScrollContentPresenter.prototype.get_ExtentHeight = function () {
	if (!this.IsScrollClient) {
		return 0;
	}
	return this._scrollData._extent.Height;
};
System.Windows.Controls.ScrollContentPresenter.prototype.get_ViewportWidth = function () {
	if (!this.IsScrollClient) {
		return 0;
	}
	return this._scrollData._viewport.Width;
};
System.Windows.Controls.ScrollContentPresenter.prototype.get_ViewportHeight = function () {
	if (!this.IsScrollClient) {
		return 0;
	}
	return this._scrollData._viewport.Height;
};
System.Windows.Controls.ScrollContentPresenter.prototype.get_HorizontalOffset = function () {
	if (!this.IsScrollClient) {
		return 0;
	}
	return this._scrollData._computedOffset.X;
};
System.Windows.Controls.ScrollContentPresenter.prototype.get_VerticalOffset = function () {
	if (!this.IsScrollClient) {
		return 0;
	}
	return this._scrollData._computedOffset.Y;
};
System.Windows.Controls.ScrollContentPresenter.prototype.get_ScrollOwner = function () {
	if (!this.IsScrollClient) {
		return null;
	}
	return this._scrollData._scrollOwner;
};
System.Windows.Controls.ScrollContentPresenter.prototype.set_ScrollOwner = function (value) {
	if (this.IsScrollClient) {
		this._scrollData._scrollOwner = value;
	}
};
System.Windows.Controls.ScrollContentPresenter.prototype.MeasureOverride = function (constraint) {
	var uIElement = (System.Windows.Media.VisualTreeHelper.GetChildrenCount(this) === 0) ? null : JSIL.TryCast(System.Windows.Media.VisualTreeHelper.GetChild(this, 0), System.Windows.UIElement);
	result._ctor(0, 0);
	desiredSize._ctor(0, 0);
	if (uIElement !== null) {
		if (!this.IsScrollClient) {
			var result = System.Windows.FrameworkElement.prototype.MeasureOverride.call(this, constraint.MemberwiseClone()).MemberwiseClone();
		} else {
			var availableSize = constraint.MemberwiseClone();
			if (!(!this._scrollData._canHorizontallyScroll && ((JSIL.TryCast(uIElement, System.Windows.FrameworkElement) === null) || 
						(JSIL.Cast(uIElement, System.Windows.FrameworkElement).FlowDirection === System.Windows.FrameworkElement.prototype.get_FlowDirection.call(this))))) {
				availableSize.Width = Infinity;
			}
			if (this._scrollData._canVerticallyScroll) {
				availableSize.Height = Infinity;
			}
			uIElement.Measure(availableSize.MemberwiseClone());
			result = uIElement.DesiredSize.MemberwiseClone();
		}
		var desiredSize = uIElement.DesiredSize.MemberwiseClone();
	}
	if (this.IsScrollClient) {
		this.VerifyScrollData(constraint.MemberwiseClone(), desiredSize.MemberwiseClone());
	}
	result.Width = System.Math.Min(constraint.Width, result.Width);
	result.Height = System.Math.Min(constraint.Height, result.Height);
	return result;
};
System.Windows.Controls.ScrollContentPresenter.prototype.ArrangeOverride = function (arrangeSize) {
	var finalRect = new System.Windows.Rect();
	if (System.Windows.FrameworkElement.prototype.get_TemplatedParent.call(this) !== null) {
		this.UpdateClip(arrangeSize.MemberwiseClone());
	}
	var uIElement = (System.Windows.Media.VisualTreeHelper.GetChildrenCount(this) === 0) ? null : JSIL.TryCast(System.Windows.Media.VisualTreeHelper.GetChild(this, 0), System.Windows.UIElement);
	if (this.IsScrollClient) {
		this.VerifyScrollData(arrangeSize.MemberwiseClone(), this._scrollData._extent.MemberwiseClone());
	}
	if (uIElement !== null) {
		finalRect._ctor$0(0, 0, uIElement.DesiredSize.Width, uIElement.DesiredSize.Height);
		if (this.IsScrollClient) {
			finalRect.X = -this._scrollData._computedOffset.X;
			finalRect.Y = -this._scrollData._computedOffset.Y;
		}
		finalRect.Width = System.Math.Max(finalRect.Width, arrangeSize.Width);
		finalRect.Height = System.Math.Max(finalRect.Height, arrangeSize.Height);
		uIElement.Arrange(finalRect.MemberwiseClone());
	}
	return arrangeSize;
};
System.Windows.Controls.ScrollContentPresenter.ComputeScrollOffsetWithMinimalScroll = function (topView, bottomView, topChild, bottomChild) {
	var flag = ($asm02.MS.Internal.DoubleUtil.LessThan(topChild, topView) && 
		$asm02.MS.Internal.DoubleUtil.LessThan(bottomChild, bottomView));
	var flag2 = ($asm02.MS.Internal.DoubleUtil.GreaterThan(bottomChild, bottomView) && 
		$asm02.MS.Internal.DoubleUtil.GreaterThan(topChild, topView));
	var flag3 = ((bottomChild - topChild) > (bottomView - topView));
	if (!(!(flag && 
				!flag3) && (!flag2 || 
				!flag3))) {
		return topChild;
	}
	if (!(!flag && !flag2)) {
		return (bottomChild - (bottomView - topView));
	}
	return topView;
};
System.Windows.Controls.ScrollContentPresenter.ValidateInputOffset = function (offset) {
	if (System.Double.IsNaN(offset)) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["offset"]);
	}
	return System.Math.Max(0, offset);
};
System.Windows.Controls.ScrollContentPresenter.prototype.OnApplyTemplate = function () {
	System.Windows.FrameworkElement.prototype.OnApplyTemplate.call(this);
	this.HookupScrollingComponents();
};
System.Windows.Controls.ScrollContentPresenter.prototype.HookupScrollingComponents = function () {
	var scrollViewer = JSIL.TryCast(System.Windows.FrameworkElement.prototype.get_TemplatedParent.call(this), System.Windows.Controls.ScrollViewer);
	if (scrollViewer !== null) {
		var scrollInfo = null;
		scrollInfo = JSIL.TryCast(System.Windows.Controls.ContentPresenter.prototype.get_Content.call(this), System.Windows.Controls.Primitives.IScrollInfo);
		if (scrollInfo === null) {
			var itemsPresenter = JSIL.TryCast(System.Windows.Controls.ContentPresenter.prototype.get_Content.call(this), System.Windows.Controls.ItemsPresenter);
			if (itemsPresenter !== null) {
				itemsPresenter.ApplyTemplateInternal();
				var childrenCount = System.Windows.Media.VisualTreeHelper.GetChildrenCount(itemsPresenter);
				if (childrenCount > 0) {
					scrollInfo = JSIL.TryCast(System.Windows.Media.VisualTreeHelper.GetChild(itemsPresenter, 0), System.Windows.Controls.Primitives.IScrollInfo);
				}
			}
		}
		if (scrollInfo === null) {
			scrollInfo = this;
		}
		if (!((scrollInfo === this._scrollInfo) || (this._scrollInfo === null))) {
			if (this.IsScrollClient) {
				this._scrollData = new $asm02.MS.Internal.Controls.ScrollData();
			} else {
				this._scrollInfo.IScrollInfo_ScrollOwner = null;
			}
		}
		if (scrollInfo !== null) {
			this._scrollInfo = scrollInfo;
			scrollInfo.IScrollInfo_ScrollOwner = scrollViewer;
			scrollViewer.ScrollInfo = scrollInfo;
			return;
		}
	} else if (this._scrollInfo !== null) {
		if (this._scrollInfo.IScrollInfo_ScrollOwner !== null) {
			this._scrollInfo.IScrollInfo_ScrollOwner.ScrollInfo = null;
		}
		this._scrollInfo.IScrollInfo_ScrollOwner = null;
		this._scrollInfo = null;
		this._scrollData = new $asm02.MS.Internal.Controls.ScrollData();
	}
};
System.Windows.Controls.ScrollContentPresenter.prototype.CalculateTextBoxClipRect = function (arrangeSize) {
	var num = 0;
	var num2 = 0;
	var scrollViewer = JSIL.TryCast(System.Windows.FrameworkElement.prototype.get_TemplatedParent.call(this), System.Windows.Controls.ScrollViewer);
	var width = this._scrollData._extent.Width;
	var width2 = this._scrollData._viewport.Width;
	var x = this._scrollData._offset.X;
	var textBox = JSIL.TryCast(scrollViewer.TemplatedParent, System.Windows.Controls.TextBox);
	var richTextBox = JSIL.TryCast(scrollViewer.TemplatedParent, System.Windows.Controls.RichTextBox);
	var textWrapping = System.Windows.TextWrapping.NoWrap;
	var scrollBarVisibility = System.Windows.Controls.ScrollBarVisibility.Disabled;
	if (textBox !== null) {
		textWrapping = textBox.TextWrapping;
		scrollBarVisibility = textBox.HorizontalScrollBarVisibility;
	} else if (richTextBox !== null) {
		textWrapping = richTextBox.TextWrapping;
		scrollBarVisibility = richTextBox.HorizontalScrollBarVisibility;
	}
	if (textWrapping === System.Windows.TextWrapping.Wrap) {
		num = (scrollViewer.Padding.Left + 1);
		num2 = (scrollViewer.Padding.Right + 1);
	} else {
		if (!((width2 <= width) && (x !== 0))) {
			num = (scrollViewer.Padding.Left + 1);
		}
		if (!((width2 <= width) && (!JSIL.Cast(scrollBarVisibility, System.Boolean) || 
					((Math.abs((width - (x + width2)))) > 1)))) {
			num2 = (scrollViewer.Padding.Right + 1);
		}
	}
	num = System.Math.Max(0, num);
	num2 = System.Math.Max(0, num2);
	return JSIL.New(System.Windows.Rect, "_ctor$0", [-num, 0, ((arrangeSize.Width + num) + num2), arrangeSize.Height]);
};
System.Windows.Controls.ScrollContentPresenter.prototype.UpdateClip = function (arrangeSize) {
	if (!this._isClipPropertySet) {
		this._clippingRectangle = new System.Windows.Media.RectangleGeometry();
		System.Windows.UIElement.prototype.set_Clip.call(this, this._clippingRectangle);
		this._isClipPropertySet = true;
	}
	if (!((JSIL.TryCast(System.Windows.FrameworkElement.prototype.get_TemplatedParent.call(this), System.Windows.Controls.ScrollViewer) === null) || ((JSIL.TryCast(System.Windows.Controls.ContentPresenter.prototype.get_Content.call(this), $asm02.MS.Internal.TextBoxView) === null) && 
				(JSIL.TryCast(System.Windows.Controls.ContentPresenter.prototype.get_Content.call(this), $asm02.MS.Internal.RichTextBoxView) === null)))) {
		(this._clippingRectangle.Rect = this.CalculateTextBoxClipRect(arrangeSize.MemberwiseClone()).MemberwiseClone());
		return;
	}
	(this._clippingRectangle.Rect = JSIL.New(System.Windows.Rect, "_ctor$0", [0, 0, arrangeSize.Width, arrangeSize.Height]));
};
System.Windows.Controls.ScrollContentPresenter.prototype.VerifyScrollData = function (viewport, extent) {
	var flag = System.Windows.Size.op_Equality(viewport.MemberwiseClone(), this._scrollData._viewport.MemberwiseClone());
	flag = (flag & System.Windows.Size.op_Equality(extent.MemberwiseClone(), this._scrollData._extent.MemberwiseClone()));
	this._scrollData._viewport = viewport.MemberwiseClone();
	this._scrollData._extent = extent.MemberwiseClone();
	if (!((flag & this.CoerceOffsets()) || (this.ScrollOwner === null))) {
		this.ScrollOwner.InvalidateScrollInfo();
	}
};
System.Windows.Controls.ScrollContentPresenter.CoerceOffset = function (offset, extent, viewport) {
	if (offset > (extent - viewport)) {
		offset = (extent - viewport);
	}
	if (offset < 0) {
		offset = 0;
	}
	return offset;
};
System.Windows.Controls.ScrollContentPresenter.prototype.CoerceOffsets = function () {
	var vector = new $asm02.MS.Internal.Controls.Vector();
	vector._ctor(System.Windows.Controls.ScrollContentPresenter.CoerceOffset(this._scrollData._offset.X, this._scrollData._extent.Width, this._scrollData._viewport.Width), System.Windows.Controls.ScrollContentPresenter.CoerceOffset(this._scrollData._offset.Y, this._scrollData._extent.Height, this._scrollData._viewport.Height));
	var result = $asm02.MS.Internal.DoubleUtil.AreClose$2(this._scrollData._computedOffset.MemberwiseClone(), vector.MemberwiseClone());
	this._scrollData._computedOffset = vector.MemberwiseClone();
	return result;
};
System.Windows.Controls.ScrollContentPresenter.prototype.get_IsScrollClient = function () {
	return (this._scrollInfo === this);
};
JSIL.MakeProperty(System.Windows.Controls.ScrollContentPresenter.prototype, "CanVerticallyScroll", 
	System.Windows.Controls.ScrollContentPresenter.prototype.get_CanVerticallyScroll, System.Windows.Controls.ScrollContentPresenter.prototype.set_CanVerticallyScroll);
JSIL.MakeProperty(System.Windows.Controls.ScrollContentPresenter.prototype, "CanHorizontallyScroll", 
	System.Windows.Controls.ScrollContentPresenter.prototype.get_CanHorizontallyScroll, System.Windows.Controls.ScrollContentPresenter.prototype.set_CanHorizontallyScroll);
JSIL.MakeProperty(System.Windows.Controls.ScrollContentPresenter.prototype, "ExtentWidth", 
	System.Windows.Controls.ScrollContentPresenter.prototype.get_ExtentWidth, null);
JSIL.MakeProperty(System.Windows.Controls.ScrollContentPresenter.prototype, "ExtentHeight", 
	System.Windows.Controls.ScrollContentPresenter.prototype.get_ExtentHeight, null);
JSIL.MakeProperty(System.Windows.Controls.ScrollContentPresenter.prototype, "ViewportWidth", 
	System.Windows.Controls.ScrollContentPresenter.prototype.get_ViewportWidth, null);
JSIL.MakeProperty(System.Windows.Controls.ScrollContentPresenter.prototype, "ViewportHeight", 
	System.Windows.Controls.ScrollContentPresenter.prototype.get_ViewportHeight, null);
JSIL.MakeProperty(System.Windows.Controls.ScrollContentPresenter.prototype, "HorizontalOffset", 
	System.Windows.Controls.ScrollContentPresenter.prototype.get_HorizontalOffset, null);
JSIL.MakeProperty(System.Windows.Controls.ScrollContentPresenter.prototype, "VerticalOffset", 
	System.Windows.Controls.ScrollContentPresenter.prototype.get_VerticalOffset, null);
JSIL.MakeProperty(System.Windows.Controls.ScrollContentPresenter.prototype, "ScrollOwner", 
	System.Windows.Controls.ScrollContentPresenter.prototype.get_ScrollOwner, System.Windows.Controls.ScrollContentPresenter.prototype.set_ScrollOwner);
JSIL.MakeProperty(System.Windows.Controls.ScrollContentPresenter.prototype, "IsScrollClient", 
	System.Windows.Controls.ScrollContentPresenter.prototype.get_IsScrollClient, null);
System.Windows.Controls.ScrollContentPresenter.prototype._clippingRectangle = null;
System.Windows.Controls.ScrollContentPresenter.prototype._isClipPropertySet = false;
System.Windows.Controls.ScrollContentPresenter.prototype._scrollInfo = null;
System.Windows.Controls.ScrollContentPresenter.prototype._scrollData = null;

System.Windows.Controls.SelectionChangedEventArgs.prototype.get_AddedItems = function () {
	return this._addedItems;
};
System.Windows.Controls.SelectionChangedEventArgs.prototype.get_RemovedItems = function () {
	return this._removedItems;
};
System.Windows.Controls.SelectionChangedEventArgs.prototype._ctor = function (removedItems, addedItems) {
	System.Windows.RoutedEventArgs.prototype._ctor.call(this);
	if (removedItems === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["removedItems"]);
	}
	if (addedItems === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["addedItems"]);
	}
	this._removedItems = JSIL.Array.New(System.Object, removedItems.ICollection_Count);
	removedItems.ICollection_CopyTo(this._removedItems, 0);
	this._addedItems = JSIL.Array.New(System.Object, addedItems.ICollection_Count);
	addedItems.ICollection_CopyTo(this._addedItems, 0);
};
JSIL.MakeProperty(System.Windows.Controls.SelectionChangedEventArgs.prototype, "AddedItems", 
	System.Windows.Controls.SelectionChangedEventArgs.prototype.get_AddedItems, null);
JSIL.MakeProperty(System.Windows.Controls.SelectionChangedEventArgs.prototype, "RemovedItems", 
	System.Windows.Controls.SelectionChangedEventArgs.prototype.get_RemovedItems, null);
System.Windows.Controls.SelectionChangedEventArgs.prototype._addedItems = null;
System.Windows.Controls.SelectionChangedEventArgs.prototype._removedItems = null;

System.Windows.Controls.Slider.prototype._ctor = function () {
	System.Windows.Controls.Primitives.RangeBase.prototype._ctor.call(this);
	System.Windows.FrameworkElement.prototype.add_SizeChanged.call(this, function (obj, sizeChangedEventArgs) {
			this.UpdateTrackLayout();
		});
	System.Windows.Controls.Control.prototype.set_DefaultStyleKey.call(this, System.Windows.Controls.Slider);
};
System.Windows.Controls.Slider.prototype.OnApplyTemplate = function () {
	System.Windows.FrameworkElement.prototype.OnApplyTemplate.call(this);
	this.ElementHorizontalTemplate = JSIL.TryCast(System.Windows.Controls.Control.prototype.GetTemplateChild.call(this, "HorizontalTemplate"), System.Windows.FrameworkElement);
	this.ElementHorizontalLargeIncrease = JSIL.TryCast(System.Windows.Controls.Control.prototype.GetTemplateChild.call(this, "HorizontalTrackLargeChangeIncreaseRepeatButton"), System.Windows.Controls.Primitives.RepeatButton);
	this.ElementHorizontalLargeDecrease = JSIL.TryCast(System.Windows.Controls.Control.prototype.GetTemplateChild.call(this, "HorizontalTrackLargeChangeDecreaseRepeatButton"), System.Windows.Controls.Primitives.RepeatButton);
	this.ElementHorizontalThumb = JSIL.TryCast(System.Windows.Controls.Control.prototype.GetTemplateChild.call(this, "HorizontalThumb"), System.Windows.Controls.Primitives.Thumb);
	this.ElementVerticalTemplate = JSIL.TryCast(System.Windows.Controls.Control.prototype.GetTemplateChild.call(this, "VerticalTemplate"), System.Windows.FrameworkElement);
	this.ElementVerticalLargeIncrease = JSIL.TryCast(System.Windows.Controls.Control.prototype.GetTemplateChild.call(this, "VerticalTrackLargeChangeIncreaseRepeatButton"), System.Windows.Controls.Primitives.RepeatButton);
	this.ElementVerticalLargeDecrease = JSIL.TryCast(System.Windows.Controls.Control.prototype.GetTemplateChild.call(this, "VerticalTrackLargeChangeDecreaseRepeatButton"), System.Windows.Controls.Primitives.RepeatButton);
	this.ElementVerticalThumb = JSIL.TryCast(System.Windows.Controls.Control.prototype.GetTemplateChild.call(this, "VerticalThumb"), System.Windows.Controls.Primitives.Thumb);
	if (this.ElementHorizontalThumb !== null) {
		this.ElementHorizontalThumb.add_DragStarted(function (sender, e) {
				System.Windows.Controls.Control.prototype.Focus.call(this);
				this.OnThumbDragStarted();
			});
		this.ElementHorizontalThumb.add_DragDelta(function (sender, e) {
				this.OnThumbDragDelta(e);
			});
	}
	if (this.ElementHorizontalLargeDecrease !== null) {
		this.ElementHorizontalLargeDecrease.add_Click(function (obj, routedEventArgs) {
				System.Windows.Controls.Control.prototype.Focus.call(this);
				System.Windows.Controls.Primitives.RangeBase.prototype.set_Value.call(this, (System.Windows.Controls.Primitives.RangeBase.prototype.get_Value.call(this) - System.Windows.Controls.Primitives.RangeBase.prototype.get_LargeChange.call(this)));
			});
	}
	if (this.ElementHorizontalLargeIncrease !== null) {
		this.ElementHorizontalLargeIncrease.add_Click(function (obj, routedEventArgs) {
				System.Windows.Controls.Control.prototype.Focus.call(this);
				System.Windows.Controls.Primitives.RangeBase.prototype.set_Value.call(this, (System.Windows.Controls.Primitives.RangeBase.prototype.get_Value.call(this) + System.Windows.Controls.Primitives.RangeBase.prototype.get_LargeChange.call(this)));
			});
	}
	if (this.ElementVerticalThumb !== null) {
		this.ElementVerticalThumb.add_DragStarted(function (sender, e) {
				System.Windows.Controls.Control.prototype.Focus.call(this);
				this.OnThumbDragStarted();
			});
		this.ElementVerticalThumb.add_DragDelta(function (sender, e) {
				this.OnThumbDragDelta(e);
			});
	}
	if (this.ElementVerticalLargeDecrease !== null) {
		this.ElementVerticalLargeDecrease.add_Click(function (obj, routedEventArgs) {
				System.Windows.Controls.Control.prototype.Focus.call(this);
				System.Windows.Controls.Primitives.RangeBase.prototype.set_Value.call(this, (System.Windows.Controls.Primitives.RangeBase.prototype.get_Value.call(this) - System.Windows.Controls.Primitives.RangeBase.prototype.get_LargeChange.call(this)));
			});
	}
	if (this.ElementVerticalLargeIncrease !== null) {
		this.ElementVerticalLargeIncrease.add_Click(function (obj, routedEventArgs) {
				System.Windows.Controls.Control.prototype.Focus.call(this);
				System.Windows.Controls.Primitives.RangeBase.prototype.set_Value.call(this, (System.Windows.Controls.Primitives.RangeBase.prototype.get_Value.call(this) + System.Windows.Controls.Primitives.RangeBase.prototype.get_LargeChange.call(this)));
			});
	}
	this.OnOrientationChanged();
	this.ChangeVisualState(false);
};
System.Windows.Controls.Slider.prototype.get_Orientation = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Slider.OrientationProperty), System.Windows.Controls.Orientation);
};
System.Windows.Controls.Slider.prototype.set_Orientation = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Slider.OrientationProperty, value);
};
System.Windows.Controls.Slider.OnOrientationPropertyChanged = function (d, e) {
	var slider = JSIL.TryCast(d, System.Windows.Controls.Slider);
	slider.OnOrientationChanged();
};
System.Windows.Controls.Slider.prototype.get_IsFocused = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Slider.IsFocusedProperty), System.Boolean);
};
System.Windows.Controls.Slider.prototype.set_IsFocused = function (value) {
	System.Windows.DependencyObject.prototype.SetValueInternal$1.call(this, System.Windows.Controls.Slider.IsFocusedProperty, value, true);
};
System.Windows.Controls.Slider.OnIsFocusedPropertyChanged = function (d, e) {
	var slider = JSIL.TryCast(d, System.Windows.Controls.Slider);
	slider.OnIsFocusChanged(e);
};
System.Windows.Controls.Slider.prototype.OnIsFocusChanged = function (e) {
	this.UpdateVisualState();
};
System.Windows.Controls.Slider.prototype.get_IsDirectionReversed = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.Slider.IsDirectionReversedProperty), System.Boolean);
};
System.Windows.Controls.Slider.prototype.set_IsDirectionReversed = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.Slider.IsDirectionReversedProperty, value);
};
System.Windows.Controls.Slider.OnIsDirectionReversedChanged = function (d, e) {
	var slider = JSIL.TryCast(d, System.Windows.Controls.Slider);
	slider.UpdateTrackLayout();
};
System.Windows.Controls.Slider.prototype.OnIsEnabledChanged = function (e) {
	System.Windows.Controls.Control.prototype.OnIsEnabledChanged.call(this, e);
	if (!System.Windows.Controls.Control.prototype.get_IsEnabled.call(this)) {
		this.IsMouseOver = false;
	}
	this.UpdateVisualState();
};
System.Windows.Controls.Slider.prototype.OnValueChanged = function (oldValue, newValue) {
	System.Windows.Controls.Primitives.RangeBase.prototype.OnValueChanged.call(this, oldValue, newValue);
	this.UpdateTrackLayout();
};
System.Windows.Controls.Slider.prototype.OnMinimumChanged = function (oldMinimum, newMinimum) {
	System.Windows.Controls.Primitives.RangeBase.prototype.OnMinimumChanged.call(this, oldMinimum, newMinimum);
	this.UpdateTrackLayout();
};
System.Windows.Controls.Slider.prototype.OnMaximumChanged = function (oldMaximum, newMaximum) {
	System.Windows.Controls.Primitives.RangeBase.prototype.OnMaximumChanged.call(this, oldMaximum, newMaximum);
	this.UpdateTrackLayout();
};
System.Windows.Controls.Slider.prototype.OnCreateAutomationPeer = function () {
	return new System.Windows.Automation.Peers.SliderAutomationPeer(this);
};
System.Windows.Controls.Slider.prototype.OnMouseEnter = function (e) {
	System.Windows.Controls.Control.prototype.OnMouseEnter.call(this, e);
	this.IsMouseOver = true;
	if (!(!((this.Orientation === System.Windows.Controls.Orientation.Horizontal) && 
				(this.ElementHorizontalThumb !== null) && 
				!this.ElementHorizontalThumb.IsDragging) && (JSIL.Cast(this.Orientation, System.Boolean) || 
				(this.ElementVerticalThumb === null) || 
				this.ElementVerticalThumb.IsDragging))) {
		this.UpdateVisualState();
	}
};
System.Windows.Controls.Slider.prototype.OnMouseLeave = function (e) {
	System.Windows.Controls.Control.prototype.OnMouseLeave.call(this, e);
	this.IsMouseOver = false;
	if (!(!((this.Orientation === System.Windows.Controls.Orientation.Horizontal) && 
				(this.ElementHorizontalThumb !== null) && 
				!this.ElementHorizontalThumb.IsDragging) && (JSIL.Cast(this.Orientation, System.Boolean) || 
				(this.ElementVerticalThumb === null) || 
				this.ElementVerticalThumb.IsDragging))) {
		this.UpdateVisualState();
	}
};
System.Windows.Controls.Slider.prototype.OnMouseLeftButtonDown = function (e) {
	System.Windows.Controls.Control.prototype.OnMouseLeftButtonDown.call(this, e);
	if (e.Handled) {
		return;
	}
	e.Handled = true;
	System.Windows.Controls.Control.prototype.Focus.call(this);
	System.Windows.UIElement.prototype.CaptureMouse.call(this);
};
System.Windows.Controls.Slider.prototype.OnLostMouseCapture = function (e) {
	this.UpdateVisualState();
};
System.Windows.Controls.Slider.prototype.OnKeyDown = function (e) {
	System.Windows.Controls.Control.prototype.OnKeyDown.call(this, e);
	if (e.Handled) {
		return;
	}
	if (!System.Windows.Controls.Control.prototype.get_IsEnabled.call(this)) {
		return;
	}
	var flag = (System.Windows.FrameworkElement.prototype.get_FlowDirection.call(this) === System.Windows.FlowDirection.RightToLeft);
	var flag2 = (flag ^ this.IsDirectionReversed);
	if (e.Key === System.Windows.Input.Key.Left) {
		if (flag2) {
			System.Windows.Controls.Primitives.RangeBase.prototype.set_Value.call(this, (System.Windows.Controls.Primitives.RangeBase.prototype.get_Value.call(this) + System.Windows.Controls.Primitives.RangeBase.prototype.get_SmallChange.call(this)));
			return;
		}
		System.Windows.Controls.Primitives.RangeBase.prototype.set_Value.call(this, (System.Windows.Controls.Primitives.RangeBase.prototype.get_Value.call(this) - System.Windows.Controls.Primitives.RangeBase.prototype.get_SmallChange.call(this)));
		return;
	} else if (e.Key === System.Windows.Input.Key.Down) {
		if (this.IsDirectionReversed) {
			System.Windows.Controls.Primitives.RangeBase.prototype.set_Value.call(this, (System.Windows.Controls.Primitives.RangeBase.prototype.get_Value.call(this) + System.Windows.Controls.Primitives.RangeBase.prototype.get_SmallChange.call(this)));
			return;
		}
		System.Windows.Controls.Primitives.RangeBase.prototype.set_Value.call(this, (System.Windows.Controls.Primitives.RangeBase.prototype.get_Value.call(this) - System.Windows.Controls.Primitives.RangeBase.prototype.get_SmallChange.call(this)));
		return;
	} else if (e.Key === System.Windows.Input.Key.Right) {
		if (flag2) {
			System.Windows.Controls.Primitives.RangeBase.prototype.set_Value.call(this, (System.Windows.Controls.Primitives.RangeBase.prototype.get_Value.call(this) - System.Windows.Controls.Primitives.RangeBase.prototype.get_SmallChange.call(this)));
			return;
		}
		System.Windows.Controls.Primitives.RangeBase.prototype.set_Value.call(this, (System.Windows.Controls.Primitives.RangeBase.prototype.get_Value.call(this) + System.Windows.Controls.Primitives.RangeBase.prototype.get_SmallChange.call(this)));
		return;
	} else if (e.Key === System.Windows.Input.Key.Up) {
		if (this.IsDirectionReversed) {
			System.Windows.Controls.Primitives.RangeBase.prototype.set_Value.call(this, (System.Windows.Controls.Primitives.RangeBase.prototype.get_Value.call(this) - System.Windows.Controls.Primitives.RangeBase.prototype.get_SmallChange.call(this)));
			return;
		}
		System.Windows.Controls.Primitives.RangeBase.prototype.set_Value.call(this, (System.Windows.Controls.Primitives.RangeBase.prototype.get_Value.call(this) + System.Windows.Controls.Primitives.RangeBase.prototype.get_SmallChange.call(this)));
		return;
	} else {
		if (e.Key === System.Windows.Input.Key.Home) {
			System.Windows.Controls.Primitives.RangeBase.prototype.set_Value.call(this, System.Windows.Controls.Primitives.RangeBase.prototype.get_Minimum.call(this));
			return;
		}
		if (e.Key === System.Windows.Input.Key.End) {
			System.Windows.Controls.Primitives.RangeBase.prototype.set_Value.call(this, System.Windows.Controls.Primitives.RangeBase.prototype.get_Maximum.call(this));
		}
		return;
	}
};
System.Windows.Controls.Slider.prototype.OnGotFocus = function (e) {
	System.Windows.Controls.Control.prototype.OnGotFocus.call(this, e);
	this.IsFocused = true;
};
System.Windows.Controls.Slider.prototype.OnLostFocus = function (e) {
	System.Windows.Controls.Control.prototype.OnLostFocus.call(this, e);
	this.IsFocused = false;
};
System.Windows.Controls.Slider.prototype.UpdateVisualState = function () {
	this.ChangeVisualState(true);
};
System.Windows.Controls.Slider.prototype.ChangeVisualState = function (useTransitions) {
	if (!System.Windows.Controls.Control.prototype.get_IsEnabled.call(this)) {
		$asm02.System.Windows.Controls.VisualStates.GoToState(this, useTransitions, JSIL.Array.New(System.String, ["Disabled", "Normal"]));
	} else if (this.IsMouseOver) {
		$asm02.System.Windows.Controls.VisualStates.GoToState(this, useTransitions, JSIL.Array.New(System.String, ["MouseOver", "Normal"]));
	} else {
		$asm02.System.Windows.Controls.VisualStates.GoToState(this, useTransitions, JSIL.Array.New(System.String, ["Normal"]));
	}
	if (!(!this.IsFocused || !System.Windows.Controls.Control.prototype.get_IsEnabled.call(this))) {
		$asm02.System.Windows.Controls.VisualStates.GoToState(this, useTransitions, JSIL.Array.New(System.String, ["Focused", "Unfocused"]));
		return;
	}
	$asm02.System.Windows.Controls.VisualStates.GoToState(this, useTransitions, JSIL.Array.New(System.String, ["Unfocused"]));
};
System.Windows.Controls.Slider.prototype.OnThumbDragStarted = function () {
	this._dragValue = System.Windows.Controls.Primitives.RangeBase.prototype.get_Value.call(this);
};
System.Windows.Controls.Slider.prototype.OnThumbDragDelta = function (e) {
	var num = 0;
	var zoomFactor = System.Windows.Application.Current.Host.Content.ZoomFactor;
	if (!((this.Orientation !== System.Windows.Controls.Orientation.Horizontal) || (this.ElementHorizontalThumb === null))) {
		if ($asm02.MS.Internal.QuirksMode.ShouldApplyThumbDragDeltaWithZoomFactor()) {
			num = (((zoomFactor * e.HorizontalChange) / (System.Windows.FrameworkElement.prototype.get_ActualWidth.call(this) - this.ElementHorizontalThumb.ActualWidth)) * (System.Windows.Controls.Primitives.RangeBase.prototype.get_Maximum.call(this) - System.Windows.Controls.Primitives.RangeBase.prototype.get_Minimum.call(this)));
		} else {
			num = ((e.HorizontalChange / (System.Windows.FrameworkElement.prototype.get_ActualWidth.call(this) - this.ElementHorizontalThumb.ActualWidth)) * (System.Windows.Controls.Primitives.RangeBase.prototype.get_Maximum.call(this) - System.Windows.Controls.Primitives.RangeBase.prototype.get_Minimum.call(this)));
		}
	} else if (!(JSIL.Cast(this.Orientation, System.Boolean) || (this.ElementVerticalThumb === null))) {
		if ($asm02.MS.Internal.QuirksMode.ShouldApplyThumbDragDeltaWithZoomFactor()) {
			num = (((zoomFactor * -e.VerticalChange) / (System.Windows.FrameworkElement.prototype.get_ActualHeight.call(this) - this.ElementVerticalThumb.ActualHeight)) * (System.Windows.Controls.Primitives.RangeBase.prototype.get_Maximum.call(this) - System.Windows.Controls.Primitives.RangeBase.prototype.get_Minimum.call(this)));
		} else {
			num = ((-e.VerticalChange / (System.Windows.FrameworkElement.prototype.get_ActualHeight.call(this) - this.ElementVerticalThumb.ActualHeight)) * (System.Windows.Controls.Primitives.RangeBase.prototype.get_Maximum.call(this) - System.Windows.Controls.Primitives.RangeBase.prototype.get_Minimum.call(this)));
		}
	}
	if (!(System.Double.IsNaN(num) || System.Double.IsInfinity(num))) {
		this._dragValue += this.IsDirectionReversed ? -num : num;
		var num2 = System.Math.Min(System.Windows.Controls.Primitives.RangeBase.prototype.get_Maximum.call(this), System.Math.Max(System.Windows.Controls.Primitives.RangeBase.prototype.get_Minimum.call(this), this._dragValue));
		if (num2 !== System.Windows.Controls.Primitives.RangeBase.prototype.get_Value.call(this)) {
			System.Windows.Controls.Primitives.RangeBase.prototype.set_Value.call(this, num2);
		}
	}
};
System.Windows.Controls.Slider.prototype.OnOrientationChanged = function () {
	if (this.ElementHorizontalTemplate !== null) {
		this.ElementHorizontalTemplate.Visibility = (this.Orientation === System.Windows.Controls.Orientation.Horizontal) ? System.Windows.Visibility.Visible : System.Windows.Visibility.Collapsed;
	}
	if (this.ElementVerticalTemplate !== null) {
		this.ElementVerticalTemplate.Visibility = (this.Orientation === System.Windows.Controls.Orientation.Horizontal) ? System.Windows.Visibility.Collapsed : System.Windows.Visibility.Visible;
	}
	this.UpdateTrackLayout();
};
System.Windows.Controls.Slider.prototype.UpdateTrackLayout = function () {
	var maximum = System.Windows.Controls.Primitives.RangeBase.prototype.get_Maximum.call(this);
	var minimum = System.Windows.Controls.Primitives.RangeBase.prototype.get_Minimum.call(this);
	var value = System.Windows.Controls.Primitives.RangeBase.prototype.get_Value.call(this);
	var num = (1 - ((maximum - value) / (maximum - minimum)));
	var grid = (this.Orientation === System.Windows.Controls.Orientation.Horizontal) ? JSIL.TryCast(this.ElementHorizontalTemplate, System.Windows.Controls.Grid) : JSIL.TryCast(this.ElementVerticalTemplate, System.Windows.Controls.Grid);
	if (grid !== null) {
		if (this.Orientation === System.Windows.Controls.Orientation.Horizontal) {
			if (!((grid.ColumnDefinitions === null) || (grid.ColumnDefinitions.Count !== 3))) {
				(grid.ColumnDefinitions.get_Item(0).Width = JSIL.New(System.Windows.GridLength, "_ctor$1", [1, this.IsDirectionReversed ? System.Windows.GridUnitType.Star : System.Windows.GridUnitType.Auto]));
				(grid.ColumnDefinitions.get_Item(2).Width = JSIL.New(System.Windows.GridLength, "_ctor$1", [1, this.IsDirectionReversed ? System.Windows.GridUnitType.Auto : System.Windows.GridUnitType.Star]));
				if (this.ElementHorizontalLargeDecrease !== null) {
					this.ElementHorizontalLargeDecrease.SetValue(System.Windows.Controls.Grid.ColumnProperty, this.IsDirectionReversed ? 2 : 0);
				}
				if (this.ElementHorizontalLargeIncrease !== null) {
					this.ElementHorizontalLargeIncrease.SetValue(System.Windows.Controls.Grid.ColumnProperty, this.IsDirectionReversed ? 0 : 2);
				}
			}
			if (!((this.ElementHorizontalLargeDecrease === null) || (this.ElementHorizontalThumb === null))) {
				this.ElementHorizontalLargeDecrease.Width = System.Math.Max(0, (num * (System.Windows.FrameworkElement.prototype.get_ActualWidth.call(this) - this.ElementHorizontalThumb.ActualWidth)));
				return;
			}
		} else {
			if (!((grid.RowDefinitions === null) || (grid.RowDefinitions.Count !== 3))) {
				(grid.RowDefinitions.get_Item(0).Height = JSIL.New(System.Windows.GridLength, "_ctor$1", [1, this.IsDirectionReversed ? System.Windows.GridUnitType.Auto : System.Windows.GridUnitType.Star]));
				(grid.RowDefinitions.get_Item(2).Height = JSIL.New(System.Windows.GridLength, "_ctor$1", [1, this.IsDirectionReversed ? System.Windows.GridUnitType.Star : System.Windows.GridUnitType.Auto]));
				if (this.ElementVerticalLargeDecrease !== null) {
					this.ElementVerticalLargeDecrease.SetValue(System.Windows.Controls.Grid.RowProperty, this.IsDirectionReversed ? 0 : 2);
				}
				if (this.ElementVerticalLargeIncrease !== null) {
					this.ElementVerticalLargeIncrease.SetValue(System.Windows.Controls.Grid.RowProperty, this.IsDirectionReversed ? 2 : 0);
				}
			}
			if (!((this.ElementVerticalLargeDecrease === null) || (this.ElementVerticalThumb === null))) {
				this.ElementVerticalLargeDecrease.Height = System.Math.Max(0, (num * (System.Windows.FrameworkElement.prototype.get_ActualHeight.call(this) - this.ElementVerticalThumb.ActualHeight)));
			}
		}
	}
};
System.Windows.Controls.Slider.prototype.get_ElementHorizontalTemplate = function () {
	return this.ElementHorizontalTemplate$value;
};
System.Windows.Controls.Slider.prototype.set_ElementHorizontalTemplate = function (value) {
	this.ElementHorizontalTemplate$value = value;
};
System.Windows.Controls.Slider.prototype.get_ElementHorizontalLargeIncrease = function () {
	return this.ElementHorizontalLargeIncrease$value;
};
System.Windows.Controls.Slider.prototype.set_ElementHorizontalLargeIncrease = function (value) {
	this.ElementHorizontalLargeIncrease$value = value;
};
System.Windows.Controls.Slider.prototype.get_ElementHorizontalLargeDecrease = function () {
	return this.ElementHorizontalLargeDecrease$value;
};
System.Windows.Controls.Slider.prototype.set_ElementHorizontalLargeDecrease = function (value) {
	this.ElementHorizontalLargeDecrease$value = value;
};
System.Windows.Controls.Slider.prototype.get_ElementHorizontalThumb = function () {
	return this.ElementHorizontalThumb$value;
};
System.Windows.Controls.Slider.prototype.set_ElementHorizontalThumb = function (value) {
	this.ElementHorizontalThumb$value = value;
};
System.Windows.Controls.Slider.prototype.get_ElementVerticalTemplate = function () {
	return this.ElementVerticalTemplate$value;
};
System.Windows.Controls.Slider.prototype.set_ElementVerticalTemplate = function (value) {
	this.ElementVerticalTemplate$value = value;
};
System.Windows.Controls.Slider.prototype.get_ElementVerticalLargeIncrease = function () {
	return this.ElementVerticalLargeIncrease$value;
};
System.Windows.Controls.Slider.prototype.set_ElementVerticalLargeIncrease = function (value) {
	this.ElementVerticalLargeIncrease$value = value;
};
System.Windows.Controls.Slider.prototype.get_ElementVerticalLargeDecrease = function () {
	return this.ElementVerticalLargeDecrease$value;
};
System.Windows.Controls.Slider.prototype.set_ElementVerticalLargeDecrease = function (value) {
	this.ElementVerticalLargeDecrease$value = value;
};
System.Windows.Controls.Slider.prototype.get_ElementVerticalThumb = function () {
	return this.ElementVerticalThumb$value;
};
System.Windows.Controls.Slider.prototype.set_ElementVerticalThumb = function (value) {
	this.ElementVerticalThumb$value = value;
};
System.Windows.Controls.Slider.prototype.get_IsMouseOver = function () {
	return this.IsMouseOver$value;
};
System.Windows.Controls.Slider.prototype.set_IsMouseOver = function (value) {
	this.IsMouseOver$value = value;
};
JSIL.MakeProperty(System.Windows.Controls.Slider.prototype, "Orientation", 
	System.Windows.Controls.Slider.prototype.get_Orientation, System.Windows.Controls.Slider.prototype.set_Orientation);
JSIL.MakeProperty(System.Windows.Controls.Slider.prototype, "IsFocused", 
	System.Windows.Controls.Slider.prototype.get_IsFocused, System.Windows.Controls.Slider.prototype.set_IsFocused);
JSIL.MakeProperty(System.Windows.Controls.Slider.prototype, "IsDirectionReversed", 
	System.Windows.Controls.Slider.prototype.get_IsDirectionReversed, System.Windows.Controls.Slider.prototype.set_IsDirectionReversed);
JSIL.MakeProperty(System.Windows.Controls.Slider.prototype, "ElementHorizontalTemplate", 
	System.Windows.Controls.Slider.prototype.get_ElementHorizontalTemplate, System.Windows.Controls.Slider.prototype.set_ElementHorizontalTemplate);
JSIL.MakeProperty(System.Windows.Controls.Slider.prototype, "ElementHorizontalLargeIncrease", 
	System.Windows.Controls.Slider.prototype.get_ElementHorizontalLargeIncrease, System.Windows.Controls.Slider.prototype.set_ElementHorizontalLargeIncrease);
JSIL.MakeProperty(System.Windows.Controls.Slider.prototype, "ElementHorizontalLargeDecrease", 
	System.Windows.Controls.Slider.prototype.get_ElementHorizontalLargeDecrease, System.Windows.Controls.Slider.prototype.set_ElementHorizontalLargeDecrease);
JSIL.MakeProperty(System.Windows.Controls.Slider.prototype, "ElementHorizontalThumb", 
	System.Windows.Controls.Slider.prototype.get_ElementHorizontalThumb, System.Windows.Controls.Slider.prototype.set_ElementHorizontalThumb);
JSIL.MakeProperty(System.Windows.Controls.Slider.prototype, "ElementVerticalTemplate", 
	System.Windows.Controls.Slider.prototype.get_ElementVerticalTemplate, System.Windows.Controls.Slider.prototype.set_ElementVerticalTemplate);
JSIL.MakeProperty(System.Windows.Controls.Slider.prototype, "ElementVerticalLargeIncrease", 
	System.Windows.Controls.Slider.prototype.get_ElementVerticalLargeIncrease, System.Windows.Controls.Slider.prototype.set_ElementVerticalLargeIncrease);
JSIL.MakeProperty(System.Windows.Controls.Slider.prototype, "ElementVerticalLargeDecrease", 
	System.Windows.Controls.Slider.prototype.get_ElementVerticalLargeDecrease, System.Windows.Controls.Slider.prototype.set_ElementVerticalLargeDecrease);
JSIL.MakeProperty(System.Windows.Controls.Slider.prototype, "ElementVerticalThumb", 
	System.Windows.Controls.Slider.prototype.get_ElementVerticalThumb, System.Windows.Controls.Slider.prototype.set_ElementVerticalThumb);
JSIL.MakeProperty(System.Windows.Controls.Slider.prototype, "IsMouseOver", 
	System.Windows.Controls.Slider.prototype.get_IsMouseOver, System.Windows.Controls.Slider.prototype.set_IsMouseOver);
Object.defineProperty(System.Windows.Controls.Slider, "ElementHorizontalTemplateName", {
		"value": "HorizontalTemplate"}
);
Object.defineProperty(System.Windows.Controls.Slider, "ElementHorizontalLargeIncreaseName", {
		"value": "HorizontalTrackLargeChangeIncreaseRepeatButton"}
);
Object.defineProperty(System.Windows.Controls.Slider, "ElementHorizontalLargeDecreaseName", {
		"value": "HorizontalTrackLargeChangeDecreaseRepeatButton"}
);
Object.defineProperty(System.Windows.Controls.Slider, "ElementHorizontalThumbName", {
		"value": "HorizontalThumb"}
);
Object.defineProperty(System.Windows.Controls.Slider, "ElementVerticalTemplateName", {
		"value": "VerticalTemplate"}
);
Object.defineProperty(System.Windows.Controls.Slider, "ElementVerticalLargeIncreaseName", {
		"value": "VerticalTrackLargeChangeIncreaseRepeatButton"}
);
Object.defineProperty(System.Windows.Controls.Slider, "ElementVerticalLargeDecreaseName", {
		"value": "VerticalTrackLargeChangeDecreaseRepeatButton"}
);
Object.defineProperty(System.Windows.Controls.Slider, "ElementVerticalThumbName", {
		"value": "VerticalThumb"}
);
System.Windows.Controls.Slider.OrientationProperty = null;
System.Windows.Controls.Slider.IsFocusedProperty = null;
System.Windows.Controls.Slider.IsDirectionReversedProperty = null;
System.Windows.Controls.Slider.prototype._dragValue = 0;
System.Windows.Controls.Slider.prototype.ElementHorizontalTemplate$value = null;
System.Windows.Controls.Slider.prototype.ElementHorizontalLargeIncrease$value = null;
System.Windows.Controls.Slider.prototype.ElementHorizontalLargeDecrease$value = null;
System.Windows.Controls.Slider.prototype.ElementHorizontalThumb$value = null;
System.Windows.Controls.Slider.prototype.ElementVerticalTemplate$value = null;
System.Windows.Controls.Slider.prototype.ElementVerticalLargeIncrease$value = null;
System.Windows.Controls.Slider.prototype.ElementVerticalLargeDecrease$value = null;
System.Windows.Controls.Slider.prototype.ElementVerticalThumb$value = null;
System.Windows.Controls.Slider.prototype.IsMouseOver$value = false;
System.Windows.Controls.Slider._cctor = function () {
	System.Windows.Controls.Slider.OrientationProperty = System.Windows.DependencyProperty.Register$0("Orientation", System.Windows.Controls.Orientation, System.Windows.Controls.Slider, JSIL.New(System.Windows.PropertyMetadata, "_ctor$2", [System.Windows.Controls.Orientation.Horizontal, JSIL.Delegate.New("System.Windows.PropertyChangedCallback", null, System.Windows.Controls.Slider.OnOrientationPropertyChanged)]));
	System.Windows.Controls.Slider.IsFocusedProperty = System.Windows.DependencyProperty.RegisterReadOnly("IsFocused", System.Boolean, System.Windows.Controls.Slider, JSIL.New(System.Windows.PropertyMetadata, "_ctor$0", [JSIL.Delegate.New("System.Windows.PropertyChangedCallback", null, System.Windows.Controls.Slider.OnIsFocusedPropertyChanged)]));
	System.Windows.Controls.Slider.IsDirectionReversedProperty = System.Windows.DependencyProperty.Register$0("IsDirectionReversed", System.Boolean, System.Windows.Controls.Slider, JSIL.New(System.Windows.PropertyMetadata, "_ctor$0", [JSIL.Delegate.New("System.Windows.PropertyChangedCallback", null, System.Windows.Controls.Slider.OnIsDirectionReversedChanged)]));
};

System.Windows.Controls.ToolTip.prototype.get_HorizontalOffset = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.ToolTip.HorizontalOffsetProperty), System.Double);
};
System.Windows.Controls.ToolTip.prototype.set_HorizontalOffset = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.ToolTip.HorizontalOffsetProperty, value);
};
System.Windows.Controls.ToolTip.OnHorizontalOffsetPropertyChanged = function (d, e) {
	var toolTip = JSIL.Cast(d, System.Windows.Controls.ToolTip);
	var num = JSIL.Cast(e.NewValue, System.Double);
	if (num !== JSIL.Cast(e.OldValue, System.Double)) {
		toolTip.OnOffsetChanged(num, 0);
	}
};
System.Windows.Controls.ToolTip.prototype.get_IsOpen = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.ToolTip.IsOpenProperty), System.Boolean);
};
System.Windows.Controls.ToolTip.prototype.set_IsOpen = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.ToolTip.IsOpenProperty, value);
};
System.Windows.Controls.ToolTip.OnIsOpenPropertyChanged = function (d, e) {
	var toolTip = JSIL.Cast(d, System.Windows.Controls.ToolTip);
	if (JSIL.Cast(e.NewValue, System.Boolean) !== JSIL.Cast(e.OldValue, System.Boolean)) {
		toolTip.OnIsOpenChanged(JSIL.Cast(e.NewValue, System.Boolean));
	}
};
System.Windows.Controls.ToolTip.prototype.get_VerticalOffset = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.ToolTip.VerticalOffsetProperty), System.Double);
};
System.Windows.Controls.ToolTip.prototype.set_VerticalOffset = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.ToolTip.VerticalOffsetProperty, value);
};
System.Windows.Controls.ToolTip.OnVerticalOffsetPropertyChanged = function (d, e) {
	var toolTip = JSIL.Cast(d, System.Windows.Controls.ToolTip);
	var num = JSIL.Cast(e.NewValue, System.Double);
	if (num !== JSIL.Cast(e.OldValue, System.Double)) {
		toolTip.OnOffsetChanged(0, num);
	}
};
System.Windows.Controls.ToolTip.prototype.get_Placement = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.ToolTip.PlacementProperty), System.Windows.Controls.Primitives.PlacementMode);
};
System.Windows.Controls.ToolTip.prototype.set_Placement = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.ToolTip.PlacementProperty, value);
};
System.Windows.Controls.ToolTip.prototype.get_PlacementTarget = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.ToolTip.PlacementTargetProperty), System.Windows.UIElement);
};
System.Windows.Controls.ToolTip.prototype.set_PlacementTarget = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.ToolTip.PlacementTargetProperty, value);
};
System.Windows.Controls.ToolTip.prototype.get_Owner = function () {
	return this._owner;
};
System.Windows.Controls.ToolTip.prototype.set_Owner = function (value) {
	this._owner = value;
	if (this._parentPopup !== null) {
		this._parentPopup.DataContext = (this._owner === null) ? null : this._owner.DataContext;
	}
};
System.Windows.Controls.ToolTip.prototype.add_Closed = function (value) {
	this.Closed = System.Delegate.Combine(this.Closed, value);
};
System.Windows.Controls.ToolTip.prototype.remove_Closed = function (value) {
	this.Closed = System.Delegate.Remove(this.Closed, value);
};
System.Windows.Controls.ToolTip.prototype.add_Opened = function (value) {
	this.Opened = System.Delegate.Combine(this.Opened, value);
};
System.Windows.Controls.ToolTip.prototype.remove_Opened = function (value) {
	this.Opened = System.Delegate.Remove(this.Opened, value);
};
System.Windows.Controls.ToolTip.prototype.get_ParentPopup = function () {
	return this._parentPopup;
};
System.Windows.Controls.ToolTip.prototype.set_ParentPopup = function (value) {
	this._parentPopup = value;
};
System.Windows.Controls.ToolTip.prototype._ctor = function () {
	System.Windows.Controls.ContentControl.prototype._ctor$0.call(this);
	System.Windows.FrameworkElement.prototype.add_SizeChanged.call(this, JSIL.Delegate.New("System.Windows.SizeChangedEventHandler", this, System.Windows.Controls.ToolTip.prototype.OnToolTipSizeChanged));
	System.Windows.Controls.Control.prototype.set_DefaultStyleKey.call(this, System.Windows.Controls.ToolTip);
};
System.Windows.Controls.ToolTip.prototype.OnApplyTemplate = function () {
	System.Windows.FrameworkElement.prototype.OnApplyTemplate.call(this);
	this.RootElement = JSIL.TryCast(System.Windows.Controls.Control.prototype.GetTemplateChild.call(this, "Root"), System.Windows.FrameworkElement);
	if (this.RootElement !== null) {
		this.VisibleState = JSIL.TryCast(this.RootElement.Resources.get_Item("Visible State"), System.Windows.Media.Animation.Storyboard);
		this.NormalState = JSIL.TryCast(this.RootElement.Resources.get_Item("Normal State"), System.Windows.Media.Animation.Storyboard);
		if (this.NormalState !== null) {
			this.NormalState.add_Completed(JSIL.Delegate.New("System.EventHandler", this, System.Windows.Controls.ToolTip.prototype.OnClosingCompleted));
		}
	}
};
System.Windows.Controls.ToolTip.prototype.OnCreateAutomationPeer = function () {
	return new $asm02.System.Windows.Automation.Peers.ToolTipAutomationPeer(this);
};
System.Windows.Controls.ToolTip.prototype.SetToolTipServiceTargetOverride = function (targetOverride) {
	this._toolTipServiceTargetOverride = targetOverride;
};
System.Windows.Controls.ToolTip.prototype.SetToolTipServicePlacementModeOverride = function (modeOverride) {
	this._toolTipServicePlacementModeOverride = modeOverride;
};
System.Windows.Controls.ToolTip.prototype.OnAncestorDataContextChanged = function (e) {
	if (!((this._parentPopup === null) || (this.Owner === null))) {
		this._parentPopup.DataContext = this.Owner.DataContext;
	}
	System.Windows.FrameworkElement.prototype.OnAncestorDataContextChanged.call(this, e);
};
System.Windows.Controls.ToolTip.prototype.HookupParentPopup = function () {
	this._parentPopup = new System.Windows.Controls.Primitives.Popup();
	System.Windows.Controls.Control.prototype.set_IsTabStop.call(this, false);
	this._parentPopup.Child = this;
	System.Windows.UIElement.prototype.set_IsHitTestVisible.call(this, false);
	var frameworkElement = JSIL.TryCast(JSIL.Coalesce(this._toolTipServiceTargetOverride, this.PlacementTarget), System.Windows.FrameworkElement);
	if (frameworkElement !== null) {
		var binding = JSIL.New(System.Windows.Data.Binding, "_ctor$1", ["FlowDirection"]);
		binding.Source = frameworkElement;
		this._parentPopup.SetBinding(System.Windows.FrameworkElement.FlowDirectionProperty, binding);
	}
	if (this.Owner !== null) {
		this._parentPopup.DataContext = this.Owner.DataContext;
	}
	this._parentPopup.add_Opened(JSIL.Delegate.New("System.EventHandler", this, System.Windows.Controls.ToolTip.prototype.OnPopupOpened));
	this._parentPopup.add_Closed(JSIL.Delegate.New("System.EventHandler", this, System.Windows.Controls.ToolTip.prototype.OnPopupClosed));
};
System.Windows.Controls.ToolTip.prototype.OnClosed = function (e) {
	var closed = this.Closed;
	if (closed !== null) {
		closed(this, e);
	}
};
System.Windows.Controls.ToolTip.prototype.OnIsOpenChanged = function (isOpen) {
	if (isOpen) {
		if (this._parentPopup === null) {
			this.HookupParentPopup();
		}
		this.OpenPopup();
		return;
	}
	this._toolTipServicePlacementModeOverride = new (System.Nullable$b1.Of(System.Windows.Controls.Primitives.PlacementMode)) ();
	this._toolTipServiceTargetOverride = null;
	this.BeginClosing();
};
System.Windows.Controls.ToolTip.prototype.HookupResizeEvents = function () {
	if (!this._eventsHookedUp) {
		this._eventsHookedUp = true;
		System.Windows.Application.Current.Host.Content.add_Resized(JSIL.Delegate.New("System.EventHandler", this, System.Windows.Controls.ToolTip.prototype.RepositionImmediate));
		System.Windows.Application.Current.Host.Content.add_FullScreenChanged(JSIL.Delegate.New("System.EventHandler", this, System.Windows.Controls.ToolTip.prototype.FullScreenChanged));
	}
};
System.Windows.Controls.ToolTip.prototype.UnhookResizeEvents = function () {
	if (this._eventsHookedUp) {
		this._eventsHookedUp = false;
		System.Windows.Application.Current.Host.Content.remove_Resized(JSIL.Delegate.New("System.EventHandler", this, System.Windows.Controls.ToolTip.prototype.RepositionImmediate));
		System.Windows.Application.Current.Host.Content.remove_FullScreenChanged(JSIL.Delegate.New("System.EventHandler", this, System.Windows.Controls.ToolTip.prototype.FullScreenChanged));
		System.Windows.FrameworkElement.prototype.remove_LayoutUpdated.call(this, JSIL.Delegate.New("System.EventHandler", this, System.Windows.Controls.ToolTip.prototype.RepositionDeferred));
	}
};
System.Windows.Controls.ToolTip.prototype.FullScreenChanged = function (sender, e) {
	System.Windows.FrameworkElement.prototype.add_LayoutUpdated.call(this, JSIL.Delegate.New("System.EventHandler", this, System.Windows.Controls.ToolTip.prototype.RepositionDeferred));
};
System.Windows.Controls.ToolTip.prototype.RepositionDeferred = function (sender, e) {
	System.Windows.FrameworkElement.prototype.remove_LayoutUpdated.call(this, JSIL.Delegate.New("System.EventHandler", this, System.Windows.Controls.ToolTip.prototype.RepositionDeferred));
	if (this.IsOpen) {
		this.PerformPlacement(this.HorizontalOffset, this.VerticalOffset);
	}
};
System.Windows.Controls.ToolTip.prototype.RepositionImmediate = function (sender, e) {
	this.PerformPlacement(this.HorizontalOffset, this.VerticalOffset);
};
System.Windows.Controls.ToolTip.get_AdjustedZoom = function () {
	if (!System.Windows.Application.Current.Host.Content.IsFullScreen) {
		return System.Windows.Application.Current.Host.Content.ZoomFactor;
	}
	return 1;
};
System.Windows.Controls.ToolTip.get_AdjustedPluginWidth = function () {
	return (System.Windows.Application.Current.Host.Content.ActualWidth / System.Windows.Controls.ToolTip.AdjustedZoom);
};
System.Windows.Controls.ToolTip.get_AdjustedPluginHeight = function () {
	return (System.Windows.Application.Current.Host.Content.ActualHeight / System.Windows.Controls.ToolTip.AdjustedZoom);
};
System.Windows.Controls.ToolTip.prototype.OpenPopup = function () {
	if (System.Windows.NotificationWindow.Current !== null) {
		var content = System.Windows.NotificationWindow.Current.Content;
		if (!((this.PlacementTarget === null) || 
				(content === null) || !System.Windows.Media.VisualTreeHelper.IsAncestor(this.PlacementTarget, content))) {
			return;
		}
		if (!((this.Placement !== System.Windows.Controls.Primitives.PlacementMode.Mouse) || !$asm02.MS.Internal.XcpImports.Host_GetIsMouseInNotificationWindow())) {
			return;
		}
	}
	this._opening = true;
	this._parentPopup.IsOpen = true;
	System.Windows.Controls.Control.prototype.ApplyTemplate.call(this);
	if ($asm02.MS.Internal.QuirksMode.ShouldAdjustToolTipForRTL()) {
		this.HookupResizeEvents();
	}
	this.PerformPlacement(this.HorizontalOffset, this.VerticalOffset);
	if (!System.Windows.VisualStateManager.GoToState(this, "Open", true)) {
		if (this.VisibleState !== null) {
			this.VisibleState.Begin();
		}
		if (this.NormalState !== null) {
			this.NormalState.Stop();
		}
	}
};
System.Windows.Controls.ToolTip.prototype.BeginClosing = function () {
	this._opening = false;
	if (!this._eventHookedUp) {
		var visualStateGroups = System.Windows.VisualStateManager.GetVisualStateGroups(JSIL.TryCast(System.Windows.Media.VisualTreeHelper.GetChild(this, 0), System.Windows.FrameworkElement));
		if (visualStateGroups !== null) {
			var enumerator = visualStateGroups.IEnumerable_GetEnumerator();
			try {
			__loop0__: 
				while (enumerator.IEnumerator_MoveNext()) {
					var visualStateGroup = JSIL.Cast(enumerator.IEnumerator_Current, System.Windows.VisualStateGroup);
					var enumerator2 = visualStateGroup.States.IEnumerable_GetEnumerator();
					try {
					__loop1__: 
						while (enumerator2.IEnumerator_MoveNext()) {
							var visualState = JSIL.Cast(enumerator2.IEnumerator_Current, System.Windows.VisualState);
							if (visualState.Name == "Closed") {
								this._eventHookedUp = true;
								visualStateGroup.add_CurrentStateChanged(JSIL.Delegate.New("System.EventHandler`1[System.Windows.VisualStateChangedEventArgs]", this, System.Windows.Controls.ToolTip.prototype.CurrentStateChanged));
								break __loop1__;
							}
						}
					} finally {
						var disposable = JSIL.TryCast(enumerator2, System.IDisposable);
						if (disposable !== null) {
							disposable.IDisposable_Dispose();
						}
					}
					if (this._eventHookedUp) {
						break __loop0__;
					}
				}
			} finally {
				var disposable2 = JSIL.TryCast(enumerator, System.IDisposable);
				if (disposable2 !== null) {
					disposable2.IDisposable_Dispose();
				}
			}
		}
	}
	if (!System.Windows.VisualStateManager.GoToState(this, "Closed", true)) {
		if (this.NormalState !== null) {
			this.NormalState.Begin();
		} else {
			this.Close();
		}
		if (this.VisibleState !== null) {
			this.VisibleState.Stop();
		}
	}
};
System.Windows.Controls.ToolTip.prototype.CurrentStateChanged = function (sender, e) {
	if (!(this._opening || !(e.NewState.Name == "Closed"))) {
		this.Close();
	}
};
System.Windows.Controls.ToolTip.prototype.OnClosingCompleted = function (sender, e) {
	if (!this._opening) {
		this.Close();
	}
};
System.Windows.Controls.ToolTip.prototype.Close = function () {
	this.UnhookResizeEvents();
	this._parentPopup.IsOpen = false;
};
System.Windows.Controls.ToolTip.prototype.OnOffsetChanged = function (horizontalOffset, verticalOffset) {
	if (this._parentPopup === null) {
		return;
	}
	if (this.IsOpen) {
		this.PerformPlacement(horizontalOffset, verticalOffset);
	}
};
System.Windows.Controls.ToolTip.prototype.OnOpened = function (e) {
	var opened = this.Opened;
	if (opened !== null) {
		opened(this, e);
	}
};
System.Windows.Controls.ToolTip.prototype.OnPopupOpened = function (source, e) {
	this.OnOpened(new System.Windows.RoutedEventArgs().__Initialize__({
				OriginalSource: this}
		));
	if (System.Windows.Automation.Peers.AutomationPeer.ListenerExists(System.Windows.Automation.Peers.AutomationEvents.ToolTipOpened)) {
		var orCreateAutomationPeer = System.Windows.UIElement.prototype.GetOrCreateAutomationPeer.call(this);
		orCreateAutomationPeer.RaiseAutomationEvent(System.Windows.Automation.Peers.AutomationEvents.ToolTipOpened);
	}
};
System.Windows.Controls.ToolTip.prototype.OnPopupClosed = function (source, e) {
	this.OnClosed(new System.Windows.RoutedEventArgs().__Initialize__({
				OriginalSource: this}
		));
	if (System.Windows.Automation.Peers.AutomationPeer.ListenerExists(System.Windows.Automation.Peers.AutomationEvents.ToolTipClosed)) {
		var orCreateAutomationPeer = System.Windows.UIElement.prototype.GetOrCreateAutomationPeer.call(this);
		orCreateAutomationPeer.RaiseAutomationEvent(System.Windows.Automation.Peers.AutomationEvents.ToolTipClosed);
	}
};
System.Windows.Controls.ToolTip.prototype.OnRootVisualSizeChanged = function () {
	if (this._parentPopup !== null) {
		this.PerformPlacement(this.HorizontalOffset, this.VerticalOffset);
	}
};
System.Windows.Controls.ToolTip.prototype.OnToolTipSizeChanged = function (sender, e) {
	this._lastSize = e.NewSize.MemberwiseClone();
	if (this._parentPopup !== null) {
		this.PerformPlacement(this.HorizontalOffset, this.VerticalOffset);
	}
};
System.Windows.Controls.ToolTip.prototype.PerformClipping = function (size) {
	var border = JSIL.TryCast(System.Windows.Media.VisualTreeHelper.GetChild(this, 0), System.Windows.Controls.Border);
	if (border !== null) {
		if (size._width < border.ActualWidth) {
			border.Width = size._width;
		}
		if (size._height < border.ActualHeight) {
			border.Height = size._height;
		}
	}
};
System.Windows.Controls.ToolTip.GetBounds = function (interestPoints) {
	var num2 = 0, num4 = 0;
	var num = (num2 = interestPoints[0].X);
	var num3 = (num4 = interestPoints[0].Y);
__loop0__: 
	for (var i = 1; i < interestPoints.length; ++i) {
		var x = interestPoints[i].X;
		var y = interestPoints[i].Y;
		if (x < num2) {
			num2 = x;
		}
		if (x > num) {
			num = x;
		}
		if (y < num4) {
			num4 = y;
		}
		if (y > num3) {
			num3 = y;
		}
	}
	return JSIL.New(System.Windows.Rect, "_ctor$0", [num2, num4, ((num - num2) + 1), ((num3 - num4) + 1)]);
};
System.Windows.Controls.ToolTip.GetTranslatedPoints = function (element, isRTL, relativeTo) {
	var array = JSIL.Array.New(System.Windows.Point, 4);
	if (!((element === null) || (relativeTo === null))) {
		var generalTransform = relativeTo.TransformToVisual(System.Windows.Application.Current.RootVisual);
		array[0] = generalTransform.Transform(new System.Windows.Point(0, 0)).MemberwiseClone();
		array[1] = generalTransform.Transform(new System.Windows.Point(element.ActualWidth, 0)).MemberwiseClone();
		array[2] = generalTransform.Transform(new System.Windows.Point(0, element.ActualHeight)).MemberwiseClone();
		array[3] = generalTransform.Transform(new System.Windows.Point(element.ActualWidth, element.ActualHeight)).MemberwiseClone();
		if (isRTL) {
			var adjustedPluginWidth = System.Windows.Controls.ToolTip.AdjustedPluginWidth;
		__loop0__: 
			for (var i = 0; i < array.length; ++i) {
				array[i].X = (adjustedPluginWidth - array[i].X);
			}
		}
		var expr_F4_cp_0 = array;
		var expr_F4_cp_1 = 1;
		expr_F4_cp_0[expr_F4_cp_1].X -= 1;
		var expr_110_cp_0 = array;
		var expr_110_cp_1 = 2;
		expr_110_cp_0[expr_110_cp_1].Y -= 1;
		var expr_12C_cp_0 = array;
		var expr_12C_cp_1 = 3;
		expr_12C_cp_0[expr_12C_cp_1].X -= 1;
		var expr_148_cp_0 = array;
		var expr_148_cp_1 = 3;
		expr_148_cp_0[expr_148_cp_1].Y -= 1;
	}
	return array;
};
System.Windows.Controls.ToolTip.prototype.PerformPlacement = function (horizontalOffset, verticalOffset) {
	var num3 = new JSIL.Variable(0), num4 = new JSIL.Variable(0), rect = new System.Windows.Rect(), rect2 = new System.Windows.Rect(), plugin = new System.Windows.Rect();
	var num = 0;
	var num2 = 0;
	var placementMode = this._toolTipServicePlacementModeOverride.HasValue ? this._toolTipServicePlacementModeOverride.Value : this.Placement;
	var frameworkElement = JSIL.TryCast(JSIL.Coalesce(this._toolTipServiceTargetOverride, this.PlacementTarget), System.Windows.FrameworkElement);
	var flag = (frameworkElement && 
		(frameworkElement.FlowDirection === System.Windows.FlowDirection.RightToLeft));
	if (!((frameworkElement === null) || frameworkElement.IsInLiveTree)) {
		return;
	}
	if (placementMode === System.Windows.Controls.Primitives.PlacementMode.Mouse) {
		if (this._lastSize.Width === 0) {
			return;
		}
		if ($asm02.MS.Internal.QuirksMode.ShouldUseOldMousePosition()) {
			var mousePosition = System.Windows.Controls.ToolTipService.MousePosition.MemberwiseClone();
			num = mousePosition.Y;
			num2 = mousePosition.X;
		} else {
			$asm02.MS.Internal.XcpImports.InputManager_GetLastMousePosition(/* ref */ num3, /* ref */ num4);
			num2 = (num3.value / System.Windows.Controls.ToolTip.AdjustedZoom);
			num = (num4.value / System.Windows.Controls.ToolTip.AdjustedZoom);
		}
		if (flag) {
			num2 = (System.Windows.Controls.ToolTip.AdjustedPluginWidth - num2);
		}
		num += (11 + verticalOffset);
		num2 += horizontalOffset;
		num = System.Math.Max(2, num);
		num2 = System.Math.Max(2, num2);
		var adjustedPluginHeight = System.Windows.Controls.ToolTip.AdjustedPluginHeight;
		var adjustedPluginWidth = System.Windows.Controls.ToolTip.AdjustedPluginWidth;
		rect._ctor$0(num2, num, this._lastSize.Width, this._lastSize.Height);
		rect2._ctor$0(0, 0, adjustedPluginWidth, adjustedPluginHeight);
		rect2.Intersect(rect.MemberwiseClone());
		if (!(((Math.abs((rect2.Width - rect.Width))) >= 2) || ((Math.abs((rect2.Height - rect.Height))) >= 2))) {
			if (flag) {
				num2 = (System.Windows.Controls.ToolTip.AdjustedPluginWidth - num2);
			}
			this._parentPopup.VerticalOffset = num;
			this._parentPopup.HorizontalOffset = num2;
			return;
		}
		if ((num + rect.Height) > adjustedPluginHeight) {
			num = ((adjustedPluginHeight - rect.Height) - 2);
		}
		if (num < 0) {
			num = 0;
		}
		if ((num2 + rect.Width) > adjustedPluginWidth) {
			num2 = ((adjustedPluginWidth - rect.Width) - 2);
		}
		if (num2 < 0) {
			num2 = 0;
		}
		var num5 = (((num + rect.Height) + 2) - adjustedPluginHeight);
		var num6 = (((num2 + rect.Width) + 2) - adjustedPluginWidth);
		if (!((num6 < 2) && (num5 < 2))) {
			num6 = System.Math.Max(0, num6);
			num5 = System.Math.Max(0, num5);
			this.PerformClipping(new System.Windows.Size((rect.Width - num6), (rect.Height - num5)));
		}
		if (flag) {
			num2 = (System.Windows.Controls.ToolTip.AdjustedPluginWidth - num2);
		}
	} else if (!((placementMode !== System.Windows.Controls.Primitives.PlacementMode.Top) && 
			(placementMode !== System.Windows.Controls.Primitives.PlacementMode.Bottom) && 
			(placementMode !== System.Windows.Controls.Primitives.PlacementMode.Left) && (placementMode !== System.Windows.Controls.Primitives.PlacementMode.Right))) {
		plugin._ctor$0(0, 0, System.Windows.Controls.ToolTip.AdjustedPluginWidth, System.Windows.Controls.ToolTip.AdjustedPluginHeight);
		var translatedPoints = System.Windows.Controls.ToolTip.GetTranslatedPoints(frameworkElement, flag, frameworkElement);
		var translatedPoints2 = System.Windows.Controls.ToolTip.GetTranslatedPoints(JSIL.Cast(this.ParentPopup.Child, System.Windows.FrameworkElement), flag, frameworkElement);
		if (translatedPoints2[0].X > translatedPoints2[1].X) {
			return;
		}
		var point = System.Windows.Controls.ToolTip.PlacePopup(plugin.MemberwiseClone(), translatedPoints, translatedPoints2, placementMode).MemberwiseClone();
		num2 = point.X;
		if (flag) {
			num2 = (System.Windows.Controls.ToolTip.AdjustedPluginWidth - num2);
		}
		num = point.Y;
	}
	this._parentPopup.VerticalOffset = (num + verticalOffset);
	this._parentPopup.HorizontalOffset = (num2 + horizontalOffset);
};
System.Windows.Controls.ToolTip.PlacePopup = function (plugin, target, toolTip, placement) {
	var __label0__ = null;
__step0__: 
	while (true) {
		switch (__label0__) {
			case null:
				var rect = new System.Windows.Rect();
				__label0__ = "__entry0__";
				continue __step0__;
				break;
			case "__entry0__":
				var num = 0;
				var num2 = 0;
				var bounds = System.Windows.Controls.ToolTip.GetBounds(target).MemberwiseClone();
				var bounds2 = System.Windows.Controls.ToolTip.GetBounds(toolTip).MemberwiseClone();
				var width = bounds2.Width;
				var height = bounds2.Height;
				if (placement === System.Windows.Controls.Primitives.PlacementMode.Right) {
					var num3 = System.Math.Max(0, (target[0].X - 1));
					var num4 = (plugin.Width - System.Math.Min(plugin.Width, (target[1].X + 1)));
					if (!((num4 >= width) || (num4 >= num3))) {
						placement = System.Windows.Controls.Primitives.PlacementMode.Left;
					}
				} else if (placement === System.Windows.Controls.Primitives.PlacementMode.Left) {
					var num5 = (System.Math.Min(plugin.Width, (target[1].X + width)) - target[1].X);
					var num6 = (target[0].X - System.Math.Max(0, (target[0].X - width)));
					if (!((num6 >= width) || (num6 >= num5))) {
						placement = System.Windows.Controls.Primitives.PlacementMode.Right;
					}
				} else if (placement === System.Windows.Controls.Primitives.PlacementMode.Top) {
					var num7 = (target[0].Y - System.Math.Max(0, (target[0].Y - height)));
					var num8 = (System.Math.Min(plugin.Height, (plugin.Height - height)) - target[2].Y);
					if (!((num7 >= height) || (num7 >= num8))) {
						placement = System.Windows.Controls.Primitives.PlacementMode.Bottom;
					}
				} else if (placement === System.Windows.Controls.Primitives.PlacementMode.Bottom) {
					var num9 = System.Math.Max(0, target[0].Y);
					var num10 = (plugin.Height - System.Math.Min(plugin.Height, target[2].Y));
					if (!((num10 >= height) || (num10 >= num9))) {
						placement = System.Windows.Controls.Primitives.PlacementMode.Top;
					}
				}
				var placementMode = placement;
				switch (Number(placementMode)) {
					case 2: 
						var array = JSIL.Array.New(System.Windows.Point, [new System.Windows.Point(target[2].X, System.Math.Max(0, (target[2].Y + 1))), new System.Windows.Point(((target[3].X - width) + 1), System.Math.Max(0, (target[2].Y + 1))), new System.Windows.Point(0, System.Math.Max(0, (target[2].Y + 1)))]);
						__label0__ = "IL_57D";
						continue __step0__;
					case 3: 
						break;
					case 4: 
						array = JSIL.Array.New(System.Windows.Point, [new System.Windows.Point(System.Math.Max(0, (target[1].X + 1)), target[1].Y), new System.Windows.Point(System.Math.Max(0, (target[3].X + 1)), ((target[3].Y - height) + 1)), new System.Windows.Point(System.Math.Max(0, (target[1].X + 1)), 0)]);
						__label0__ = "IL_57D";
						continue __step0__;
					default: 
						switch (Number(placementMode)) {
							case 9: 
								array = JSIL.Array.New(System.Windows.Point, [new System.Windows.Point((System.Math.Min(plugin.Width, target[0].X) - width), target[1].Y), new System.Windows.Point((System.Math.Min(plugin.Width, target[2].X) - width), ((target[3].Y - height) + 1)), new System.Windows.Point((System.Math.Min(plugin.Width, target[0].X) - width), 0)]);
								__label0__ = "IL_57D";
								continue __step0__;
							case 10: 
								array = JSIL.Array.New(System.Windows.Point, [new System.Windows.Point(target[0].X, (System.Math.Min(target[0].Y, plugin.Height) - height)), new System.Windows.Point(((target[1].X - width) + 1), (System.Math.Min(target[0].Y, plugin.Height) - height)), new System.Windows.Point(0, (System.Math.Min(target[0].Y, plugin.Height) - height))]);
								__label0__ = "IL_57D";
								continue __step0__;
						}
						break;
				}
				array = JSIL.Array.New(System.Windows.Point, [new System.Windows.Point(0, 0)]);
				__label0__ = "IL_57D";
				continue __step0__;
				break;
			case "IL_57D":
				var num11 = (width * height);
				var num12 = 0;
				var num13 = 0;
			__loop0__: 
				for (var i = 0; i < array.length; ++i) {
					rect._ctor$0(array[i].X, array[i].Y, width, height);
					rect.Intersect(plugin.MemberwiseClone());
					var num14 = (rect.Width * rect.Height);
					if (System.Double.IsInfinity(num14)) {
						num12 = (array.length - 1);
						break __loop0__;
					}
					if (num14 > num13) {
						num12 = i;
						num13 = num14;
					}
					if (num14 === num11) {
						num12 = i;
						break __loop0__;
					}
				}
				num2 = array[num12].X;
				num = array[num12].Y;
				if (num12 > 1) {
					if (!((placement !== System.Windows.Controls.Primitives.PlacementMode.Left) && (placement !== System.Windows.Controls.Primitives.PlacementMode.Right))) {
						if (!((num === target[0].Y) || 
								(num === target[1].Y) || 
								((num + height) === target[0].Y) || ((num + height) === target[1].Y))) {
							var num15 = (bounds.Top + (bounds.Height / 2));
							if (!((num15 <= 0) || ((num15 - 0) <= (plugin.Height - num15)))) {
								num = (plugin.Height - height);
							} else {
								num = 0;
							}
						}
					} else if (!(((placement !== System.Windows.Controls.Primitives.PlacementMode.Top) && 
								(placement !== System.Windows.Controls.Primitives.PlacementMode.Bottom)) || 
							(num2 === target[0].X) || 
							(num2 === target[1].X) || 
							((num2 + width) === target[0].X) || ((num2 + width) === target[1].X))) {
						var num16 = (bounds.Left + (bounds.Width / 2));
						if (!((num16 <= 0) || ((num16 - 0) <= (plugin.Width - num16)))) {
							num2 = (plugin.Width - width);
						} else {
							num2 = 0;
						}
					}
				}
				return new System.Windows.Point(num2, num);
				break __step0__;
		}
	}
};
JSIL.MakeProperty(System.Windows.Controls.ToolTip.prototype, "HorizontalOffset", 
	System.Windows.Controls.ToolTip.prototype.get_HorizontalOffset, System.Windows.Controls.ToolTip.prototype.set_HorizontalOffset);
JSIL.MakeProperty(System.Windows.Controls.ToolTip.prototype, "IsOpen", 
	System.Windows.Controls.ToolTip.prototype.get_IsOpen, System.Windows.Controls.ToolTip.prototype.set_IsOpen);
JSIL.MakeProperty(System.Windows.Controls.ToolTip.prototype, "VerticalOffset", 
	System.Windows.Controls.ToolTip.prototype.get_VerticalOffset, System.Windows.Controls.ToolTip.prototype.set_VerticalOffset);
JSIL.MakeProperty(System.Windows.Controls.ToolTip.prototype, "Placement", 
	System.Windows.Controls.ToolTip.prototype.get_Placement, System.Windows.Controls.ToolTip.prototype.set_Placement);
JSIL.MakeProperty(System.Windows.Controls.ToolTip.prototype, "PlacementTarget", 
	System.Windows.Controls.ToolTip.prototype.get_PlacementTarget, System.Windows.Controls.ToolTip.prototype.set_PlacementTarget);
JSIL.MakeProperty(System.Windows.Controls.ToolTip.prototype, "Owner", 
	System.Windows.Controls.ToolTip.prototype.get_Owner, System.Windows.Controls.ToolTip.prototype.set_Owner);
JSIL.MakeProperty(System.Windows.Controls.ToolTip.prototype, "ParentPopup", 
	System.Windows.Controls.ToolTip.prototype.get_ParentPopup, System.Windows.Controls.ToolTip.prototype.set_ParentPopup);
JSIL.MakeProperty(System.Windows.Controls.ToolTip, "AdjustedZoom", 
	System.Windows.Controls.ToolTip.get_AdjustedZoom, null);
JSIL.MakeProperty(System.Windows.Controls.ToolTip, "AdjustedPluginWidth", 
	System.Windows.Controls.ToolTip.get_AdjustedPluginWidth, null);
JSIL.MakeProperty(System.Windows.Controls.ToolTip, "AdjustedPluginHeight", 
	System.Windows.Controls.ToolTip.get_AdjustedPluginHeight, null);
Object.defineProperty(System.Windows.Controls.ToolTip, "TOOLTIP_tolerance", {
		"value": 2}
);
Object.defineProperty(System.Windows.Controls.ToolTip, "NormalStateName", {
		"value": "Normal State"}
);
Object.defineProperty(System.Windows.Controls.ToolTip, "RootElementName", {
		"value": "Root"}
);
Object.defineProperty(System.Windows.Controls.ToolTip, "VisibleStateName", {
		"value": "Visible State"}
);
Object.defineProperty(System.Windows.Controls.ToolTip, "TopLeft", {
		"value": 0}
);
Object.defineProperty(System.Windows.Controls.ToolTip, "TopRight", {
		"value": 1}
);
Object.defineProperty(System.Windows.Controls.ToolTip, "BottomLeft", {
		"value": 2}
);
Object.defineProperty(System.Windows.Controls.ToolTip, "BottomRight", {
		"value": 3}
);
Object.defineProperty(System.Windows.Controls.ToolTip, "VSMOpenState", {
		"value": "Open"}
);
Object.defineProperty(System.Windows.Controls.ToolTip, "VSMClosedState", {
		"value": "Closed"}
);
Object.defineProperty(System.Windows.Controls.ToolTip, "VSMCommonGroup", {
		"value": "OpenStates"}
);
System.Windows.Controls.ToolTip.HorizontalOffsetProperty = null;
System.Windows.Controls.ToolTip.IsOpenProperty = null;
System.Windows.Controls.ToolTip.VerticalOffsetProperty = null;
System.Windows.Controls.ToolTip.PlacementProperty = null;
System.Windows.Controls.ToolTip.PlacementTargetProperty = null;
System.Windows.Controls.ToolTip.prototype.NormalState = null;
System.Windows.Controls.ToolTip.prototype.RootElement = null;
System.Windows.Controls.ToolTip.prototype.VisibleState = null;
System.Windows.Controls.ToolTip.prototype.Closed = null;
System.Windows.Controls.ToolTip.prototype.Opened = null;
System.Windows.Controls.ToolTip.prototype._opening = false;
System.Windows.Controls.ToolTip.prototype._eventHookedUp = false;
System.Windows.Controls.ToolTip.prototype._parentPopup = null;
System.Windows.Controls.ToolTip.prototype._owner = null;
System.Windows.Controls.ToolTip.prototype._toolTipServiceTargetOverride = null;
System.Windows.Controls.ToolTip.prototype._eventsHookedUp = false;
System.Windows.Controls.ToolTip._cctor = function () {
	System.Windows.Controls.ToolTip.HorizontalOffsetProperty = System.Windows.DependencyProperty.Register$0("HorizontalOffset", System.Double, System.Windows.Controls.ToolTip, JSIL.New(System.Windows.PropertyMetadata, "_ctor$0", [JSIL.Delegate.New("System.Windows.PropertyChangedCallback", null, System.Windows.Controls.ToolTip.OnHorizontalOffsetPropertyChanged)]));
	System.Windows.Controls.ToolTip.IsOpenProperty = System.Windows.DependencyProperty.Register$0("IsOpen", System.Boolean, System.Windows.Controls.ToolTip, JSIL.New(System.Windows.PropertyMetadata, "_ctor$0", [JSIL.Delegate.New("System.Windows.PropertyChangedCallback", null, System.Windows.Controls.ToolTip.OnIsOpenPropertyChanged)]));
	System.Windows.Controls.ToolTip.VerticalOffsetProperty = System.Windows.DependencyProperty.Register$0("VerticalOffset", System.Double, System.Windows.Controls.ToolTip, JSIL.New(System.Windows.PropertyMetadata, "_ctor$0", [JSIL.Delegate.New("System.Windows.PropertyChangedCallback", null, System.Windows.Controls.ToolTip.OnVerticalOffsetPropertyChanged)]));
	System.Windows.Controls.ToolTip.PlacementProperty = System.Windows.DependencyProperty.Register$0("Placement", System.Windows.Controls.Primitives.PlacementMode, System.Windows.Controls.ToolTip, JSIL.New(System.Windows.PropertyMetadata, "_ctor$1", [System.Windows.Controls.Primitives.PlacementMode.Mouse]));
	System.Windows.Controls.ToolTip.PlacementTargetProperty = System.Windows.DependencyProperty.Register$0("PlacementTarget", System.Windows.UIElement, System.Windows.Controls.ToolTip, JSIL.New(System.Windows.PropertyMetadata, "_ctor$0", [null]));
};

System.Windows.Controls.ToolTipService.GetToolTip = function (element) {
	if (element === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["element"]);
	}
	return element.GetValue(System.Windows.Controls.ToolTipService.ToolTipProperty);
};
System.Windows.Controls.ToolTipService.SetToolTip = function (element, value) {
	if (element === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["element"]);
	}
	element.SetValue(System.Windows.Controls.ToolTipService.ToolTipProperty, value);
};
System.Windows.Controls.ToolTipService.OnToolTipPropertyChanged = function (d, e) {
	var owner = JSIL.Cast(d, System.Windows.UIElement);
	var newValue = e.NewValue;
	if (e.OldValue !== null) {
		System.Windows.Controls.ToolTipService.UnregisterToolTip(owner);
	}
	if (newValue === null) {
		return;
	}
	System.Windows.Controls.ToolTipService.RegisterToolTip(owner, newValue);
	System.Windows.Controls.ToolTipService.SetRootVisual();
};
System.Windows.Controls.ToolTipService.GetPlacementTarget = function (element) {
	return JSIL.Cast(element.GetValue(System.Windows.Controls.ToolTipService.PlacementTargetProperty), System.Windows.UIElement);
};
System.Windows.Controls.ToolTipService.SetPlacementTarget = function (element, value) {
	element.SetValue(System.Windows.Controls.ToolTipService.PlacementTargetProperty, value);
};
System.Windows.Controls.ToolTipService.GetPlacement = function (element) {
	return JSIL.Cast(element.GetValue(System.Windows.Controls.ToolTipService.PlacementProperty), System.Windows.Controls.Primitives.PlacementMode);
};
System.Windows.Controls.ToolTipService.SetPlacement = function (element, value) {
	element.SetValue(System.Windows.Controls.ToolTipService.PlacementProperty, value);
};
System.Windows.Controls.ToolTipService.get_MousePosition = function () {
	return System.Windows.Controls.ToolTipService.MousePosition$value;
};
System.Windows.Controls.ToolTipService.set_MousePosition = function (value) {
	System.Windows.Controls.ToolTipService.MousePosition$value = value;
};
System.Windows.Controls.ToolTipService.get_RootVisual = function () {
	System.Windows.Controls.ToolTipService.SetRootVisual();
	return System.Windows.Controls.ToolTipService._rootVisual;
};
System.Windows.Controls.ToolTipService.get_CurrentToolTip = function () {
	return System.Windows.Controls.ToolTipService._currentToolTip;
};
System.Windows.Controls.ToolTipService.CloseToolTipInternal = function (e) {
	var locker = null;
	if (System.Windows.Controls.ToolTipService._openTimer === null) {
		return;
	}
	if (System.Windows.Controls.ToolTipService._currentToolTip === null) {
		System.Windows.Controls.ToolTipService._openTimer.Stop();
		System.Threading.Monitor.Enter((locker = System.Windows.Controls.ToolTipService._locker));
		try {
			System.Windows.Controls.ToolTipService._owner = null;
			System.Windows.Controls.ToolTipService._lastEnterSource = null;
		} finally {
			System.Threading.Monitor.Exit(locker);
		}
		return;
	}
	var keyEventArgs = JSIL.TryCast(e, System.Windows.Input.KeyEventArgs);
	if (!((keyEventArgs === null) || !System.Windows.Controls.ToolTipService.IsSpecialKey(keyEventArgs.Key))) {
		return;
	}
	System.Windows.Controls.ToolTipService.CloseAutomaticToolTip(null, System.EventArgs.Empty);
};
System.Windows.Controls.ToolTipService.OnOwnerMouseEnterInternal = function (sender, source) {
	var locker = null;
	if (!((System.Windows.Controls.ToolTipService._lastEnterSource === null) || !System.Object.ReferenceEquals(System.Windows.Controls.ToolTipService._lastEnterSource, source))) {
		return;
	}
	var uIElement = JSIL.Cast(sender, System.Windows.UIElement);
	if (System.Windows.Controls.ToolTipService._currentToolTip !== null) {
		if (uIElement.GetValue(System.Windows.Controls.ToolTipService.ToolTipObjectProperty) === System.Windows.Controls.ToolTipService._currentToolTip) {
			return;
		}
		System.Windows.Controls.ToolTipService.CloseAutomaticToolTip(null, System.EventArgs.Empty);
	}
	System.Threading.Monitor.Enter((locker = System.Windows.Controls.ToolTipService._locker));
	try {
		System.Windows.Controls.ToolTipService._owner = uIElement;
		System.Windows.Controls.ToolTipService._lastEnterSource = source;
	} finally {
		System.Threading.Monitor.Exit(locker);
	}
	System.Windows.Controls.ToolTipService.SetRootVisual();
	var t = System.DateTime.op_Subtraction$1(System.DateTime.Now.MemberwiseClone(), System.Windows.Controls.ToolTipService._lastToolTipOpenedTime.MemberwiseClone()).MemberwiseClone();
	if (System.TimeSpan.Compare(t.MemberwiseClone(), JSIL.New(System.TimeSpan, "_ctor$3", [0, 0, 0, 0, 100])) <= 0) {
		System.Windows.Controls.ToolTipService.OpenAutomaticToolTip(null, System.EventArgs.Empty);
		return;
	}
	if (System.Windows.Controls.ToolTipService._openTimer === null) {
		System.Windows.Controls.ToolTipService._openTimer = JSIL.New(System.Windows.Threading.DispatcherTimer, "_ctor$0", []);
		System.Windows.Controls.ToolTipService._openTimer.add_Tick(JSIL.Delegate.New("System.EventHandler", null, System.Windows.Controls.ToolTipService.OpenAutomaticToolTip));
	}
	(System.Windows.Controls.ToolTipService._openTimer.Interval = JSIL.New(System.TimeSpan, "_ctor$3", [0, 0, 0, 0, 400]));
	System.Windows.Controls.ToolTipService._openTimer.Start();
};
System.Windows.Controls.ToolTipService.OnOwnerMouseLeave = function (sender, e) {
	var __label0__ = null;
__step0__: 
	while (true) {
		switch (__label0__) {
			case null:
				var locker = null;
				__label0__ = "__entry0__";
				continue __step0__;
				break;
			case "__entry0__":
				if (System.Windows.Controls.ToolTipService._currentToolTip === null) {
					if (System.Windows.Controls.ToolTipService._openTimer !== null) {
						System.Windows.Controls.ToolTipService._openTimer.Stop();
					}
					System.Threading.Monitor.Enter((locker = System.Windows.Controls.ToolTipService._locker));
					try {
						System.Windows.Controls.ToolTipService._owner = null;
						System.Windows.Controls.ToolTipService._lastEnterSource = null;
						__label0__ = "IL_44";
						continue __step0__;
					} finally {
						System.Threading.Monitor.Exit(locker);
					}
				}
				System.Windows.Controls.ToolTipService.CloseAutomaticToolTip(null, System.EventArgs.Empty);
				__label0__ = "IL_44";
				continue __step0__;
				break;
			case "IL_44":
				System.Windows.Controls.ToolTipService._fShouldOpenAgain = true;
				break __step0__;
		}
	}
};
System.Windows.Controls.ToolTipService.CloseAutomaticToolTip = function (sender, e) {
	var locker = null;
	if (System.Windows.Controls.ToolTipService._closeTimer !== null) {
		System.Windows.Controls.ToolTipService._closeTimer.Stop();
	}
	if (System.Windows.Controls.ToolTipService._currentToolTip !== null) {
		System.Windows.Controls.ToolTipService._currentToolTip.IsOpen = false;
	}
	System.Windows.Controls.ToolTipService._currentToolTip = null;
	System.Threading.Monitor.Enter((locker = System.Windows.Controls.ToolTipService._locker));
	try {
		System.Windows.Controls.ToolTipService._owner = null;
		System.Windows.Controls.ToolTipService._lastEnterSource = null;
	} finally {
		System.Threading.Monitor.Exit(locker);
	}
	System.Windows.Controls.ToolTipService._lastToolTipOpenedTime = System.DateTime.Now.MemberwiseClone();
	System.Windows.Controls.ToolTipService._fShouldOpenAgain = false;
};
System.Windows.Controls.ToolTipService.ConvertToToolTip = function (o) {
	var toolTip = JSIL.TryCast(o, System.Windows.Controls.ToolTip);
	if (toolTip === null) {
		var frameworkElement = JSIL.TryCast(o, System.Windows.FrameworkElement);
		if (!((frameworkElement !== null) && (toolTip = JSIL.TryCast(frameworkElement.Parent, System.Windows.Controls.ToolTip)))) {
			toolTip = new System.Windows.Controls.ToolTip();
			toolTip.Content = o;
		}
	}
	return toolTip;
};
System.Windows.Controls.ToolTipService.IsSpecialKey = function (key) {
	var array = JSIL.Array.New(System.Windows.Input.Key, [System.Windows.Input.Key.Alt, System.Windows.Input.Key.Back, System.Windows.Input.Key.Delete, System.Windows.Input.Key.Down, System.Windows.Input.Key.End, System.Windows.Input.Key.Home, System.Windows.Input.Key.Insert, System.Windows.Input.Key.Left, System.Windows.Input.Key.PageDown, System.Windows.Input.Key.PageUp, System.Windows.Input.Key.Right, System.Windows.Input.Key.Space, System.Windows.Input.Key.Up]);
__loop0__: 
	for (var i = 0; i < array.length; ++i) {
		if (key === array[i]) {
			return true;
		}
	}
	return false;
};
System.Windows.Controls.ToolTipService.OnOwnerMouseEnter = function (sender, e) {
	(System.Windows.Controls.ToolTipService.MousePosition = e.GetPosition(null).MemberwiseClone());
	System.Windows.Controls.ToolTipService.OnOwnerMouseEnterInternal(sender, e.OriginalSource);
};
System.Windows.Controls.ToolTipService.OnRootMouseMove = function (sender, e) {
	(System.Windows.Controls.ToolTipService.MousePosition = e.GetPosition(null).MemberwiseClone());
};
System.Windows.Controls.ToolTipService.OpenAutomaticToolTip = function (sender, e) {
	var locker = null;
	if (!System.Windows.Controls.ToolTipService._fShouldOpenAgain) {
		return;
	}
	System.Windows.Controls.ToolTipService._openTimer.Stop();
	System.Threading.Monitor.Enter((locker = System.Windows.Controls.ToolTipService._locker));
	try {
		if (System.Windows.Controls.ToolTipService._owner === null) {
			return;
		}
		System.Windows.Controls.ToolTipService._currentToolTip = JSIL.Cast(System.Windows.Controls.ToolTipService._owner.GetValue(System.Windows.Controls.ToolTipService.ToolTipObjectProperty), System.Windows.Controls.ToolTip);
		var uIElement = JSIL.Coalesce(System.Windows.Controls.ToolTipService.GetPlacementTarget(System.Windows.Controls.ToolTipService._owner), System.Windows.Controls.ToolTipService._owner);
		System.Windows.Controls.ToolTipService._currentToolTip.SetToolTipServiceTargetOverride(uIElement);
		if (System.Windows.NotificationWindow.Current !== null) {
			var content = System.Windows.NotificationWindow.Current.Content;
			if (!((content === null) || (!System.Windows.Media.VisualTreeHelper.IsAncestor(uIElement, content) && 
						!System.Windows.Media.VisualTreeHelper.IsAncestor(System.Windows.Controls.ToolTipService._currentToolTip.PlacementTarget, content)))) {
				return;
			}
		}
		var value = JSIL.Cast(System.Windows.Controls.ToolTipService._owner.GetValue(System.Windows.Controls.ToolTipService.PlacementProperty), System.Windows.Controls.Primitives.PlacementMode);
		if (System.Windows.Controls.ToolTipService._owner.IsPropertyDefault(System.Windows.Controls.ToolTipService.PlacementProperty)) {
			System.Windows.Controls.ToolTipService._currentToolTip.SetToolTipServicePlacementModeOverride(new (System.Nullable$b1.Of(System.Windows.Controls.Primitives.PlacementMode)) ());
		} else {
			System.Windows.Controls.ToolTipService._currentToolTip.SetToolTipServicePlacementModeOverride(new (System.Nullable$b1.Of(System.Windows.Controls.Primitives.PlacementMode)) (value));
		}
		System.Windows.Controls.ToolTipService._currentToolTip.IsOpen = true;
	} finally {
		System.Threading.Monitor.Exit(locker);
	}
	if (System.Windows.Controls.ToolTipService._closeTimer === null) {
		System.Windows.Controls.ToolTipService._closeTimer = JSIL.New(System.Windows.Threading.DispatcherTimer, "_ctor$0", []);
		System.Windows.Controls.ToolTipService._closeTimer.add_Tick(JSIL.Delegate.New("System.EventHandler", null, System.Windows.Controls.ToolTipService.CloseAutomaticToolTip));
	}
	(System.Windows.Controls.ToolTipService._closeTimer.Interval = JSIL.New(System.TimeSpan, "_ctor$3", [0, 0, 0, 0, 5000]));
	System.Windows.Controls.ToolTipService._closeTimer.Start();
};
System.Windows.Controls.ToolTipService.PositiveValueValidation = function (d, e) {
	if (JSIL.Cast(e.NewValue, System.Int32) <= 0) {
		throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm02.System.Windows.Resx.GetString$2("ToolTipService_SetTimeoutProperty_InvalidValue"), "e"]);
	}
};
System.Windows.Controls.ToolTipService.RegisterToolTip = function (owner, toolTip) {
	var toolTip2 = System.Windows.Controls.ToolTipService.ConvertToToolTip(toolTip);
	toolTip2.Owner = JSIL.TryCast(owner, System.Windows.FrameworkElement);
	owner.SetValue(System.Windows.Controls.ToolTipService.ToolTipObjectProperty, toolTip2);
	owner.add_MouseEnter(JSIL.Delegate.New("System.Windows.Input.MouseEventHandler", null, System.Windows.Controls.ToolTipService.OnOwnerMouseEnter));
	owner.add_MouseLeave(JSIL.Delegate.New("System.Windows.Input.MouseEventHandler", null, System.Windows.Controls.ToolTipService.OnOwnerMouseLeave));
};
System.Windows.Controls.ToolTipService.SetRootVisual = function () {
	if (!(System.Windows.Controls.ToolTipService._rootVisual || (System.Windows.Application.Current === null))) {
		System.Windows.Controls.ToolTipService._rootVisual = JSIL.TryCast(System.Windows.Application.Current.RootVisual, System.Windows.FrameworkElement);
		if (System.Windows.Controls.ToolTipService._rootVisual !== null) {
			System.Windows.Controls.ToolTipService._rootVisual.add_MouseMove(JSIL.Delegate.New("System.Windows.Input.MouseEventHandler", null, System.Windows.Controls.ToolTipService.OnRootMouseMove));
			System.Windows.Controls.ToolTipService._rootVisual.add_SizeChanged(JSIL.Delegate.New("System.Windows.SizeChangedEventHandler", null, System.Windows.Controls.ToolTipService.OnRootVisualSizeChanged));
		}
	}
};
System.Windows.Controls.ToolTipService.OnRootVisualSizeChanged = function (sender, e) {
	if (System.Windows.Controls.ToolTipService._currentToolTip !== null) {
		System.Windows.Controls.ToolTipService._currentToolTip.OnRootVisualSizeChanged();
	}
};
System.Windows.Controls.ToolTipService.UnregisterToolTip = function (owner) {
	var locker = null;
	if (owner.GetValue(System.Windows.Controls.ToolTipService.ToolTipObjectProperty) === null) {
		return;
	}
	owner.remove_MouseEnter(JSIL.Delegate.New("System.Windows.Input.MouseEventHandler", null, System.Windows.Controls.ToolTipService.OnOwnerMouseEnter));
	owner.remove_MouseLeave(JSIL.Delegate.New("System.Windows.Input.MouseEventHandler", null, System.Windows.Controls.ToolTipService.OnOwnerMouseLeave));
	var toolTip = JSIL.Cast(owner.GetValue(System.Windows.Controls.ToolTipService.ToolTipObjectProperty), System.Windows.Controls.ToolTip);
	toolTip.Owner = null;
	if (toolTip.IsOpen) {
		if (toolTip === System.Windows.Controls.ToolTipService._currentToolTip) {
			System.Windows.Controls.ToolTipService._closeTimer.Stop();
			System.Threading.Monitor.Enter((locker = System.Windows.Controls.ToolTipService._locker));
			try {
				System.Windows.Controls.ToolTipService._currentToolTip = null;
				System.Windows.Controls.ToolTipService._owner = null;
				System.Windows.Controls.ToolTipService._lastEnterSource = null;
			} finally {
				System.Threading.Monitor.Exit(locker);
			}
		}
		toolTip.IsOpen = false;
	}
	owner.ClearValue(System.Windows.Controls.ToolTipService.ToolTipObjectProperty);
};
JSIL.MakeProperty(System.Windows.Controls.ToolTipService, "MousePosition", 
	System.Windows.Controls.ToolTipService.get_MousePosition, System.Windows.Controls.ToolTipService.set_MousePosition);
JSIL.MakeProperty(System.Windows.Controls.ToolTipService, "RootVisual", 
	System.Windows.Controls.ToolTipService.get_RootVisual, null);
JSIL.MakeProperty(System.Windows.Controls.ToolTipService, "CurrentToolTip", 
	System.Windows.Controls.ToolTipService.get_CurrentToolTip, null);
Object.defineProperty(System.Windows.Controls.ToolTipService, "_betweenShowDelay", {
		"value": 100}
);
Object.defineProperty(System.Windows.Controls.ToolTipService, "_initialShowDelay", {
		"value": 400}
);
Object.defineProperty(System.Windows.Controls.ToolTipService, "_showDuration", {
		"value": 5000}
);
System.Windows.Controls.ToolTipService._currentToolTip = null;
System.Windows.Controls.ToolTipService._openTimer = null;
System.Windows.Controls.ToolTipService._closeTimer = null;
System.Windows.Controls.ToolTipService._lastEnterSource = null;
System.Windows.Controls.ToolTipService._owner = null;
System.Windows.Controls.ToolTipService._rootVisual = null;
System.Windows.Controls.ToolTipService._locker = null;
System.Windows.Controls.ToolTipService._fShouldOpenAgain = false;
System.Windows.Controls.ToolTipService.ToolTipProperty = null;
System.Windows.Controls.ToolTipService.PlacementTargetProperty = null;
System.Windows.Controls.ToolTipService.PlacementProperty = null;
System.Windows.Controls.ToolTipService.ToolTipObjectProperty = null;
System.Windows.Controls.ToolTipService._cctor = function () {
	System.Windows.Controls.ToolTipService._lastToolTipOpenedTime = new System.DateTime();
	System.Windows.Controls.ToolTipService.MousePosition$value = new System.Windows.Point();
	System.Windows.Controls.ToolTipService._lastToolTipOpenedTime = System.DateTime.MinValue.MemberwiseClone();
	System.Windows.Controls.ToolTipService._locker = new System.Object();
	System.Windows.Controls.ToolTipService._fShouldOpenAgain = true;
	System.Windows.Controls.ToolTipService.ToolTipProperty = System.Windows.DependencyProperty.RegisterAttached("ToolTip", System.Object, System.Windows.Controls.ToolTipService, JSIL.New(System.Windows.PropertyMetadata, "_ctor$0", [JSIL.Delegate.New("System.Windows.PropertyChangedCallback", null, System.Windows.Controls.ToolTipService.OnToolTipPropertyChanged)]));
	System.Windows.Controls.ToolTipService.PlacementTargetProperty = System.Windows.DependencyProperty.RegisterAttached("PlacementTarget", System.Windows.UIElement, System.Windows.Controls.ToolTipService, JSIL.New(System.Windows.PropertyMetadata, "_ctor$0", [null]));
	System.Windows.Controls.ToolTipService.PlacementProperty = System.Windows.DependencyProperty.RegisterAttached("Placement", System.Windows.Controls.Primitives.PlacementMode, System.Windows.Controls.ToolTipService, JSIL.New(System.Windows.PropertyMetadata, "_ctor$1", [System.Windows.Controls.Primitives.PlacementMode.Mouse]));
	System.Windows.Controls.ToolTipService.ToolTipObjectProperty = System.Windows.DependencyProperty.RegisterAttached("ToolTipObject", System.Object, System.Windows.Controls.ToolTipService, null);
};

$asm02.System.Windows.Controls.TypeConverters.CanConvertFrom$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, sourceType) {
		if (sourceType === null) {
			throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["sourceType"]);
		}
		return ((sourceType === System.String) || T.IsAssignableFrom(sourceType));
	}
);
$asm02.System.Windows.Controls.TypeConverters.ConvertFrom$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, converter, value, knownValues) {
		var t = new JSIL.Variable(null);
		if (converter === null) {
			throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["converter"]);
		}
		var text = JSIL.TryCast(value, System.String);
		if (!((text === null) || (knownValues === null))) {
			if (!knownValues.IDictionary$b2_TryGetValue(text, /* ref */ t)) {
				throw JSIL.New(System.FormatException, "_ctor$1", [System.String.Format(System.Globalization.CultureInfo.InvariantCulture, $asm02.System.Windows.Resx.GetString$2("TypeConverters_ConvertFromString_CannotConvert"), [T.Name, text])]);
			}
			return t.value;
		} else {
			if (JSIL.TryCast(value, T) !== null) {
				return value;
			}
			if (value === null) {
				throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["value"]);
			}
			throw JSIL.New(System.NotSupportedException, "_ctor$1", [System.String.Format(System.Globalization.CultureInfo.CurrentCulture, $asm02.System.Windows.Resx.GetString$2("TypeConverters_ConvertFrom_CannotConvert"), [JSIL.GetType(converter).Name, value ? JSIL.GetType(value).FullName : "null"])]);
		}
	}
);

$asm02.System.Windows.Controls.VisualStates.GoToState = function (control, useTransitions, stateNames) {
	if (control === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["control"]);
	}
	if (stateNames === null) {
		return;
	}
__loop0__: 
	for (var i = 0; i < stateNames.length; ++i) {
		var stateName = stateNames[i];
		if (System.Windows.VisualStateManager.GoToState(control, stateName, useTransitions)) {
			return;
		}
	}
};
$asm02.System.Windows.Controls.VisualStates.ChangeControlVisualState = function (nativeControl, visualStateBitFlag) {
	try {
		var textBox = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeControl), System.Windows.Controls.TextBox);
		if (textBox !== null) {
			var result = textBox.ChangeVisualState(
				((visualStateBitFlag & 1) === 1), 
				((visualStateBitFlag & 2) === 2), 
				((visualStateBitFlag & 4) === 4), 
				((visualStateBitFlag & 8) === 8), 
				((visualStateBitFlag & 16) === 16)
			);
			return result;
		}
		var passwordBox = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeControl), System.Windows.Controls.PasswordBox);
		if (passwordBox !== null) {
			result = passwordBox.ChangeVisualState(((visualStateBitFlag & 1) === 1), ((visualStateBitFlag & 2) === 2), ((visualStateBitFlag & 4) === 4), ((visualStateBitFlag & 16) === 16));
			return result;
		}
	} catch ($exception) {
		var arg_73_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForException(arg_73_0);
		return result;
	}
	try {
		var richTextBox = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeControl), System.Windows.Controls.RichTextBox);
		if (richTextBox !== null) {
			result = richTextBox.ChangeVisualState(
				((visualStateBitFlag & 1) === 1), 
				((visualStateBitFlag & 2) === 2), 
				((visualStateBitFlag & 4) === 4), 
				((visualStateBitFlag & 8) === 8), 
				((visualStateBitFlag & 16) === 16)
			);
			return result;
		}
	} catch ($exception) {
		var arg_BC_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForException(arg_BC_0);
		return result;
	}
	return -2147418113;
};
Object.defineProperty($asm02.System.Windows.Controls.VisualStates, "StateCalendarButtonUnfocused", {
		"value": "CalendarButtonUnfocused"}
);
Object.defineProperty($asm02.System.Windows.Controls.VisualStates, "StateCalendarButtonFocused", {
		"value": "CalendarButtonFocused"}
);
Object.defineProperty($asm02.System.Windows.Controls.VisualStates, "GroupCalendarButtonFocus", {
		"value": "CalendarButtonFocusStates"}
);
Object.defineProperty($asm02.System.Windows.Controls.VisualStates, "StateNormal", {
		"value": "Normal"}
);
Object.defineProperty($asm02.System.Windows.Controls.VisualStates, "StateMouseOver", {
		"value": "MouseOver"}
);
Object.defineProperty($asm02.System.Windows.Controls.VisualStates, "StatePressed", {
		"value": "Pressed"}
);
Object.defineProperty($asm02.System.Windows.Controls.VisualStates, "StateDisabled", {
		"value": "Disabled"}
);
Object.defineProperty($asm02.System.Windows.Controls.VisualStates, "StateReadOnly", {
		"value": "ReadOnly"}
);
Object.defineProperty($asm02.System.Windows.Controls.VisualStates, "GroupCommon", {
		"value": "CommonStates"}
);
Object.defineProperty($asm02.System.Windows.Controls.VisualStates, "StateUnfocused", {
		"value": "Unfocused"}
);
Object.defineProperty($asm02.System.Windows.Controls.VisualStates, "StateFocused", {
		"value": "Focused"}
);
Object.defineProperty($asm02.System.Windows.Controls.VisualStates, "StateFocusedDropDown", {
		"value": "FocusedDropDown"}
);
Object.defineProperty($asm02.System.Windows.Controls.VisualStates, "GroupFocus", {
		"value": "FocusStates"}
);
Object.defineProperty($asm02.System.Windows.Controls.VisualStates, "StateSelected", {
		"value": "Selected"}
);
Object.defineProperty($asm02.System.Windows.Controls.VisualStates, "StateSelectedUnfocused", {
		"value": "SelectedUnfocused"}
);
Object.defineProperty($asm02.System.Windows.Controls.VisualStates, "StateUnselected", {
		"value": "Unselected"}
);
Object.defineProperty($asm02.System.Windows.Controls.VisualStates, "GroupSelection", {
		"value": "SelectionStates"}
);
Object.defineProperty($asm02.System.Windows.Controls.VisualStates, "StateActive", {
		"value": "Active"}
);
Object.defineProperty($asm02.System.Windows.Controls.VisualStates, "StateInactive", {
		"value": "Inactive"}
);
Object.defineProperty($asm02.System.Windows.Controls.VisualStates, "GroupActive", {
		"value": "ActiveStates"}
);
Object.defineProperty($asm02.System.Windows.Controls.VisualStates, "StateUnwatermarked", {
		"value": "Unwatermarked"}
);
Object.defineProperty($asm02.System.Windows.Controls.VisualStates, "StateWatermarked", {
		"value": "Watermarked"}
);
Object.defineProperty($asm02.System.Windows.Controls.VisualStates, "GroupWatermark", {
		"value": "WatermarkStates"}
);
Object.defineProperty($asm02.System.Windows.Controls.VisualStates, "StateBeforeLoaded", {
		"value": "BeforeLoaded"}
);
Object.defineProperty($asm02.System.Windows.Controls.VisualStates, "StateAfterLoaded", {
		"value": "AfterLoaded"}
);
Object.defineProperty($asm02.System.Windows.Controls.VisualStates, "StateBeforeUnloaded", {
		"value": "BeforeUnloaded"}
);
Object.defineProperty($asm02.System.Windows.Controls.VisualStates, "GroupLayout", {
		"value": "LayoutStates"}
);

System.Windows.Controls.VirtualizingPanel.prototype.get_ItemContainerGenerator = function () {
	var generator = this.getGenerator();
	if (!this.isGeneratorHooked) {
		this.isGeneratorHooked = true;
		var notifyItemsChanged = JSIL.TryCast(generator, $asm02.MS.Internal.Controls.INotifyItemsChanged);
		if (notifyItemsChanged !== null) {
			notifyItemsChanged.INotifyItemsChanged_add_ItemsChanged(JSIL.Delegate.New("System.Windows.Controls.Primitives.ItemsChangedEventHandler", this, System.Windows.Controls.VirtualizingPanel.prototype.OnItemsChangedHandler));
		}
		generator.IItemContainerGenerator_RemoveAll();
	}
	return generator;
};
System.Windows.Controls.VirtualizingPanel.prototype.getGenerator = function () {
	var itemsOwner = System.Windows.Controls.ItemsControl.GetItemsOwner(this);
	if (itemsOwner === null) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("VirtualizingPanel_ItemsControlNotFound")]);
	}
	return itemsOwner.ItemContainerGenerator;
};
System.Windows.Controls.VirtualizingPanel.prototype.OnItemsChangedHandler = function (sender, args) {
	this.OnItemsChangedInternal(sender, args);
	System.Windows.UIElement.prototype.InvalidateMeasure.call(this);
};
System.Windows.Controls.VirtualizingPanel.prototype.OnItemsChangedInternal = function (sender, args) {
	var action = args.Action;
	if (!((action !== System.Collections.Specialized.NotifyCollectionChangedAction.Reset) || (System.Windows.Controls.Panel.prototype.get_Children.call(this).Count <= 0))) {
		this.ItemContainerGenerator.IItemContainerGenerator_RemoveAll();
		System.Windows.Controls.Panel.prototype.get_Children.call(this).Clear();
		this.OnClearChildrenInternal();
	}
	this.OnItemsChanged(sender, args);
};
System.Windows.Controls.VirtualizingPanel.prototype.AddInternalChild = function (child) {
	System.Windows.Controls.Panel.prototype.get_Children.call(this).AddInternal(child);
};
System.Windows.Controls.VirtualizingPanel.prototype.InsertInternalChild = function (index, child) {
	System.Windows.Controls.Panel.prototype.get_Children.call(this).InsertInternal(index, child);
};
System.Windows.Controls.VirtualizingPanel.prototype.RemoveInternalChildRange = function (index, range) {
__loop0__: 
	for (var i = (index + range); i > index; ) {
		System.Windows.Controls.Panel.prototype.get_Children.call(this).RemoveAt(--i);
	}
};
System.Windows.Controls.VirtualizingPanel.prototype.OnItemsChanged = function (sender, args) {
};
System.Windows.Controls.VirtualizingPanel.prototype.OnClearChildren = function () {
};
System.Windows.Controls.VirtualizingPanel.prototype.BringIndexIntoView = function (index) {
};
System.Windows.Controls.VirtualizingPanel.prototype.OnClearChildrenInternal = function () {
	this.OnClearChildren();
};
System.Windows.Controls.VirtualizingPanel.prototype._ctor = function () {
	System.Windows.Controls.Panel.prototype._ctor$0.call(this);
};
JSIL.MakeProperty(System.Windows.Controls.VirtualizingPanel.prototype, "ItemContainerGenerator", 
	System.Windows.Controls.VirtualizingPanel.prototype.get_ItemContainerGenerator, null);
System.Windows.Controls.VirtualizingPanel.prototype.isGeneratorHooked = false;

System.Windows.Controls.VirtualizingStackPanel.prototype._ctor = function () {
	System.Windows.Controls.VirtualizingPanel.prototype._ctor.call(this);
	this._scrollData = new $asm02.MS.Internal.Controls.ScrollData();
};
System.Windows.Controls.VirtualizingStackPanel.prototype.LineUp = function () {
	this.SetVerticalOffset((this.VerticalOffset - !JSIL.Cast(this.Orientation, System.Boolean) ? 1 : 16));
};
System.Windows.Controls.VirtualizingStackPanel.prototype.LineDown = function () {
	this.SetVerticalOffset((this.VerticalOffset + !JSIL.Cast(this.Orientation, System.Boolean) ? 1 : 16));
};
System.Windows.Controls.VirtualizingStackPanel.prototype.LineLeft = function () {
	this.SetHorizontalOffset((this.HorizontalOffset - (this.Orientation === System.Windows.Controls.Orientation.Horizontal) ? 1 : 16));
};
System.Windows.Controls.VirtualizingStackPanel.prototype.LineRight = function () {
	this.SetHorizontalOffset((this.HorizontalOffset + (this.Orientation === System.Windows.Controls.Orientation.Horizontal) ? 1 : 16));
};
System.Windows.Controls.VirtualizingStackPanel.prototype.PageUp = function () {
	this.SetVerticalOffset((this.VerticalOffset - this.ViewportHeight));
};
System.Windows.Controls.VirtualizingStackPanel.prototype.PageDown = function () {
	this.SetVerticalOffset((this.VerticalOffset + this.ViewportHeight));
};
System.Windows.Controls.VirtualizingStackPanel.prototype.PageLeft = function () {
	this.SetHorizontalOffset((this.HorizontalOffset - this.ViewportWidth));
};
System.Windows.Controls.VirtualizingStackPanel.prototype.PageRight = function () {
	this.SetHorizontalOffset((this.HorizontalOffset + this.ViewportWidth));
};
System.Windows.Controls.VirtualizingStackPanel.prototype.MouseWheelUp = function () {
	this.SetVerticalOffset((this.VerticalOffset - (System.Windows.SystemParameters.WheelScrollLines * !JSIL.Cast(this.Orientation, System.Boolean) ? 1 : 16)));
};
System.Windows.Controls.VirtualizingStackPanel.prototype.MouseWheelDown = function () {
	this.SetVerticalOffset((this.VerticalOffset + (System.Windows.SystemParameters.WheelScrollLines * !JSIL.Cast(this.Orientation, System.Boolean) ? 1 : 16)));
};
System.Windows.Controls.VirtualizingStackPanel.prototype.MouseWheelLeft = function () {
	this.SetHorizontalOffset((this.HorizontalOffset - (3 * (this.Orientation === System.Windows.Controls.Orientation.Horizontal) ? 1 : 16)));
};
System.Windows.Controls.VirtualizingStackPanel.prototype.MouseWheelRight = function () {
	this.SetHorizontalOffset((this.HorizontalOffset + (3 * (this.Orientation === System.Windows.Controls.Orientation.Horizontal) ? 1 : 16)));
};
System.Windows.Controls.VirtualizingStackPanel.prototype.SetHorizontalOffset = function (offset) {
	var num = (Math.round(System.Windows.Controls.ScrollContentPresenter.ValidateInputOffset(offset)));
	if (!$asm02.MS.Internal.DoubleUtil.AreClose$0(num, this._scrollData._offset.X)) {
		var arg_2F_0 = this._scrollData._offset.MemberwiseClone();
		this._scrollData._offset.X = num;
		System.Windows.UIElement.prototype.InvalidateMeasure.call(this);
	}
};
System.Windows.Controls.VirtualizingStackPanel.prototype.SetVerticalOffset = function (offset) {
	var num = (Math.round(System.Windows.Controls.ScrollContentPresenter.ValidateInputOffset(offset)));
	if (!$asm02.MS.Internal.DoubleUtil.AreClose$0(num, this._scrollData._offset.Y)) {
		var arg_2F_0 = this._scrollData._offset.MemberwiseClone();
		this._scrollData._offset.Y = num;
		System.Windows.UIElement.prototype.InvalidateMeasure.call(this);
	}
};
System.Windows.Controls.VirtualizingStackPanel.prototype.MakeVisible = function (visual, rectangle) {
	var vector = new JSIL.Variable(new $asm02.MS.Internal.Controls.Vector());
	var result = new JSIL.Variable(new System.Windows.Rect());
	var flag = (this.Orientation === System.Windows.Controls.Orientation.Horizontal);
	if (!(!rectangle.IsEmpty && 
			(visual !== null) && 
			(visual !== this) && System.Windows.UIElement.prototype.IsAncestorOf.call(this, visual))) {
		return System.Windows.Rect.Empty;
	}
	var generalTransform = visual.TransformToVisual(this);
	var point = generalTransform.Transform(new System.Windows.Point(rectangle.X, rectangle.Y)).MemberwiseClone();
	rectangle.X = point.X;
	rectangle.Y = point.Y;
	if (!this.IsScrolling) {
		return rectangle;
	}
	this.MakeVisiblePhysicalHelper(rectangle.MemberwiseClone(), /* ref */ vector, /* ref */ result, !flag);
	var childIndex = this.FindChildIndexThatParentsVisual(visual);
	this.MakeVisibleLogicalHelper(childIndex, rectangle.MemberwiseClone(), /* ref */ vector, /* ref */ result);
	vector.value.X = System.Windows.Controls.ScrollContentPresenter.CoerceOffset(vector.value.X, this._scrollData._extent.Width, this._scrollData._viewport.Width);
	vector.value.Y = System.Windows.Controls.ScrollContentPresenter.CoerceOffset(vector.value.Y, this._scrollData._extent.Height, this._scrollData._viewport.Height);
	if (!$asm02.MS.Internal.DoubleUtil.AreClose$2(vector.value.MemberwiseClone(), this._scrollData._offset.MemberwiseClone())) {
		var arg_12B_0 = this._scrollData._offset.MemberwiseClone();
		this._scrollData._offset = vector.value.MemberwiseClone();
		System.Windows.UIElement.prototype.InvalidateMeasure.call(this);
		this.OnScrollChange();
	}
	return result.value;
};
System.Windows.Controls.VirtualizingStackPanel.prototype.get_Orientation = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.VirtualizingStackPanel.OrientationProperty), System.Windows.Controls.Orientation);
};
System.Windows.Controls.VirtualizingStackPanel.prototype.set_Orientation = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.VirtualizingStackPanel.OrientationProperty, value);
};
System.Windows.Controls.VirtualizingStackPanel.GetIsVirtualizing = function (o) {
	if (o === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["o"]);
	}
	return JSIL.Cast(o.GetValue(System.Windows.Controls.VirtualizingStackPanel.IsVirtualizingProperty), System.Boolean);
};
System.Windows.Controls.VirtualizingStackPanel.SetIsVirtualizing = function (element, value) {
	if (element === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["element"]);
	}
	element.SetValueInternal$1(System.Windows.Controls.VirtualizingStackPanel.IsVirtualizingProperty, value, true);
};
System.Windows.Controls.VirtualizingStackPanel.GetVirtualizationMode = function (element) {
	if (element === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["element"]);
	}
	return JSIL.Cast(element.GetValue(System.Windows.Controls.VirtualizingStackPanel.VirtualizationModeProperty), System.Windows.Controls.VirtualizationMode);
};
System.Windows.Controls.VirtualizingStackPanel.SetVirtualizationMode = function (element, value) {
	if (element === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["element"]);
	}
	element.SetValue(System.Windows.Controls.VirtualizingStackPanel.VirtualizationModeProperty, value);
};
System.Windows.Controls.VirtualizingStackPanel.prototype.get_CanHorizontallyScroll = function () {
	return this._scrollData._canHorizontallyScroll;
};
System.Windows.Controls.VirtualizingStackPanel.prototype.set_CanHorizontallyScroll = function (value) {
	if (this._scrollData._canHorizontallyScroll !== value) {
		this._scrollData._canHorizontallyScroll = value;
		System.Windows.UIElement.prototype.InvalidateMeasure.call(this);
	}
};
System.Windows.Controls.VirtualizingStackPanel.prototype.get_CanVerticallyScroll = function () {
	return this._scrollData._canVerticallyScroll;
};
System.Windows.Controls.VirtualizingStackPanel.prototype.set_CanVerticallyScroll = function (value) {
	if (this._scrollData._canVerticallyScroll !== value) {
		this._scrollData._canVerticallyScroll = value;
		System.Windows.UIElement.prototype.InvalidateMeasure.call(this);
	}
};
System.Windows.Controls.VirtualizingStackPanel.prototype.get_ExtentWidth = function () {
	return this._scrollData._extent.Width;
};
System.Windows.Controls.VirtualizingStackPanel.prototype.get_ExtentHeight = function () {
	return this._scrollData._extent.Height;
};
System.Windows.Controls.VirtualizingStackPanel.prototype.get_ViewportWidth = function () {
	return this._scrollData._viewport.Width;
};
System.Windows.Controls.VirtualizingStackPanel.prototype.get_ViewportHeight = function () {
	return this._scrollData._viewport.Height;
};
System.Windows.Controls.VirtualizingStackPanel.prototype.get_HorizontalOffset = function () {
	return this._scrollData._computedOffset.X;
};
System.Windows.Controls.VirtualizingStackPanel.prototype.get_VerticalOffset = function () {
	return this._scrollData._computedOffset.Y;
};
System.Windows.Controls.VirtualizingStackPanel.prototype.get_ScrollOwner = function () {
	return this._scrollData._scrollOwner;
};
System.Windows.Controls.VirtualizingStackPanel.prototype.set_ScrollOwner = function (value) {
	if (value !== this._scrollData._scrollOwner) {
		System.Windows.Controls.VirtualizingStackPanel.ResetScrolling(this);
		this._scrollData._scrollOwner = value;
	}
};
System.Windows.Controls.VirtualizingStackPanel.prototype.add_CleanUpVirtualizedItemEvent = function (value) {
	this.CleanUpVirtualizedItemEvent = System.Delegate.Combine(this.CleanUpVirtualizedItemEvent, value);
};
System.Windows.Controls.VirtualizingStackPanel.prototype.remove_CleanUpVirtualizedItemEvent = function (value) {
	this.CleanUpVirtualizedItemEvent = System.Delegate.Remove(this.CleanUpVirtualizedItemEvent, value);
};
System.Windows.Controls.VirtualizingStackPanel.prototype.OnCleanUpVirtualizedItem = function (e) {
	if (this.CleanUpVirtualizedItemEvent !== null) {
		this.CleanUpVirtualizedItemEvent(this, e);
	}
};
System.Windows.Controls.VirtualizingStackPanel.prototype.MeasureOverride = function (constraint) {
	var num5 = new JSIL.Variable(0), newlyRealized = new JSIL.Variable(false);
	var size = new JSIL.Variable(new System.Windows.Size());
	var size2 = constraint.MemberwiseClone();
	var flag = (this.Orientation === System.Windows.Controls.Orientation.Horizontal);
	var num = 0;
	var num2 = -1;
	var arg_27_0 = System.Windows.Rect.Empty.MemberwiseClone();
	var concreteItemContainerGenerator = this.ConcreteItemContainerGenerator;
	var itemsOwner = System.Windows.Controls.ItemsControl.GetItemsOwner(this);
	var itemCount = this.ItemCount;
	this.SetVirtualizationState(itemsOwner, false);
	if (flag) {
		size2.Width = Infinity;
		if (!(!this.IsScrolling || !this.CanVerticallyScroll)) {
			size2.Height = Infinity;
		}
		var num3 = new JSIL.Variable(constraint.Width);
	} else {
		size2.Height = Infinity;
		if (!(!this.IsScrolling || !this.CanHorizontallyScroll)) {
			size2.Width = Infinity;
		}
		num3.value = constraint.Height;
	}
	var num4 = new JSIL.Variable(this.ComputeIndexOfFirstVisibleItem(itemsOwner, flag, /* ref */ num5));
	if (this.IsVirtualizing) {
		this.CleanupContainers(num4.value, itemsOwner);
	}
	var position = this.IndexToGeneratorPositionForStart(this.IsVirtualizing ? num4.value : 0, /* ref */ new JSIL.MemberReference(this, "_firstVisibleChildIndex")).MemberwiseClone();
	var num6 = this._firstVisibleChildIndex;
	var flag2 = true;
	var flag3 = false;
	this._visibleCount = 0;
	if (itemCount > 0) {
		this._afterTrail = 0;
		var disposable = System.Windows.Controls.VirtualizingPanel.prototype.get_ItemContainerGenerator.call(this).IItemContainerGenerator_StartAt(position.MemberwiseClone(), System.Windows.Controls.Primitives.GeneratorDirection.Forward, true);
		try {
			var i = this.IsVirtualizing ? num4.value : 0;
			var num7 = itemCount;
		__loop0__: 
			while (i < num7) {
				var uIElement = JSIL.TryCast(System.Windows.Controls.VirtualizingPanel.prototype.get_ItemContainerGenerator.call(this).IItemContainerGenerator_GenerateNext(/* ref */ newlyRealized), System.Windows.UIElement);
				if (uIElement === null) {
					break __loop0__;
				}
				flag3 = (flag3 | this.AddContainerFromGenerator(num6, uIElement, newlyRealized.value));
				++num6;
				++this._visibleCount;
				var desiredSize = uIElement.DesiredSize.MemberwiseClone();
				uIElement.Measure(size2.MemberwiseClone());
				if (System.Windows.Size.op_Inequality(desiredSize.MemberwiseClone(), uIElement.DesiredSize.MemberwiseClone())) {
					desiredSize = uIElement.DesiredSize.MemberwiseClone();
					this._scrollData._maxDesiredSize = new System.Windows.Size();
				}
				if (flag) {
					size.value.Width += desiredSize.Width;
					size.value.Height = System.Math.Max(size.value.Height, desiredSize.Height);
					var num8 = desiredSize.Width;
				} else {
					size.value.Width = System.Math.Max(size.value.Width, desiredSize.Width);
					size.value.Height += desiredSize.Height;
					num8 = desiredSize.Height;
				}
				if (!(!this.IsScrolling || 
						(num2 !== -1) || (i < num4.value))) {
					num3.value -= num8;
					if ($asm02.MS.Internal.DoubleUtil.LessThanOrClose(num3.value, 0)) {
						num2 = i;
					}
				}
				if (!(!this.IsVirtualizing || (i < num4.value))) {
					if (flag) {
						var num9 = constraint.Width;
						var num10 = ((size.value.Width - num) + num5.value);
					} else {
						num9 = constraint.Height;
						num10 = ((size.value.Height - num) + num5.value);
					}
					if (num10 > num9) {
						this._isLimitExceeded = true;
						if (this._afterTrail > 0) {
							flag2 = false;
							break __loop0__;
						}
						++this._afterTrail;
					} else {
						this._isLimitExceeded = false;
					}
				}
				++i;
			}
		} finally {
			if (disposable !== null) {
				disposable.IDisposable_Dispose();
			}
		}
	}
	if (concreteItemContainerGenerator !== null) {
		concreteItemContainerGenerator.DiscardNewItemsList();
	}
	this._visibleStart = num4.value;
	if (this.IsScrolling) {
		var extent = this.ComputeLogicalExtent(size.value.MemberwiseClone(), itemCount, flag).MemberwiseClone();
		if (flag2) {
			this.FillRemainingSpace(
				/* ref */ num4, 
				/* ref */ num3, 
				/* ref */ size, 
				size2.MemberwiseClone(), 
				flag
			);
		}
		this.EnsureTopCapGenerated(size2.MemberwiseClone());
		size.value = this.UpdateLogicalScrollData(
			size.value.MemberwiseClone(), 
			constraint.MemberwiseClone(), 
			num3.value, 
			extent.MemberwiseClone(), 
			num4.value, 
			num2, 
			itemCount, 
			flag
		).MemberwiseClone();
	}
	if (this.IsVirtualizing) {
		this.CleanupContainers(num4.value, itemsOwner);
		if (this.InRecyclingMode) {
			this.DisconnectRecycledContainers();
		}
	}
	return size.value;
};
System.Windows.Controls.VirtualizingStackPanel.prototype.ArrangeOverride = function (arrangeSize) {
	var finalRect = new System.Windows.Rect();
	var flag = (this.Orientation === System.Windows.Controls.Orientation.Horizontal);
	finalRect._ctor$0(0, 0, arrangeSize.Width, arrangeSize.Height);
	var num = 0;
	if (this.IsScrolling) {
		if (flag) {
			var x = this._scrollData._computedOffset.X;
			finalRect.X = this.ComputePhysicalFromLogicalOffset(this.IsVirtualizing ? this._firstVisibleChildIndex : x, true);
			finalRect.Y = (-1 * this._scrollData._computedOffset.Y);
		} else {
			var y = this._scrollData._computedOffset.Y;
			finalRect.X = (-1 * this._scrollData._computedOffset.X);
			finalRect.Y = this.ComputePhysicalFromLogicalOffset(this.IsVirtualizing ? this._firstVisibleChildIndex : y, false);
		}
	}
	var realizedChildren = this.RealizedChildren;
__loop0__: 
	for (var i = 0; i < realizedChildren.ICollection$b1_Count; ++i) {
		var uIElement = realizedChildren.IList$b1_get_Item(i);
		var desiredSize = uIElement.DesiredSize.MemberwiseClone();
		if (i === this._firstVisibleChildIndex) {
			var num2 = (flag ? this._scrollData._offset.X : this._scrollData._offset.Y - this._visibleStart);
			var size = new System.Windows.Size();
			if (flag) {
				size.Width = (desiredSize.Width * num2);
				finalRect.X -= size.Width;
			} else {
				size.Height = (desiredSize.Height * num2);
				finalRect.Y -= size.Height;
			}
		}
		if (flag) {
			finalRect.X += num;
			num = desiredSize.Width;
			finalRect.Width = num;
			finalRect.Height = System.Math.Max(arrangeSize.Height, desiredSize.Height);
		} else {
			finalRect.Y += num;
			num = desiredSize.Height;
			finalRect.Height = num;
			finalRect.Width = System.Math.Max(arrangeSize.Width, desiredSize.Width);
		}
		if (uIElement !== null) {
			uIElement.Arrange(finalRect.MemberwiseClone());
		}
	}
	return arrangeSize;
};
System.Windows.Controls.VirtualizingStackPanel.prototype.OnItemsChanged = function (sender, args) {
	System.Windows.Controls.VirtualizingPanel.prototype.OnItemsChanged.call(this, sender, args);
	var flag = false;
	switch (Number(args.Action)) {
		case 1: 
			this.OnItemsRemove(args);
			flag = true;
			break;
		case 2: 
			this.OnItemsReplace(args);
			flag = true;
			break;
		case 4: 
			flag = true;
			break;
	}
	if (!(!flag || !this.IsScrolling)) {
		this._scrollData._maxDesiredSize = new System.Windows.Size();
	}
};
System.Windows.Controls.VirtualizingStackPanel.prototype.OnClearChildren = function () {
	System.Windows.Controls.VirtualizingPanel.prototype.OnClearChildren.call(this);
	this._realizedChildren = null;
	this._visibleStart = (this._firstVisibleChildIndex = (this._visibleCount = 0));
};
System.Windows.Controls.VirtualizingStackPanel.prototype.ClearAllContainers = function (itemsControl) {
	var itemContainerGenerator = System.Windows.Controls.VirtualizingPanel.prototype.get_ItemContainerGenerator.call(this);
	if (itemContainerGenerator !== null) {
		itemContainerGenerator.IItemContainerGenerator_RemoveAll();
	}
};
System.Windows.Controls.VirtualizingStackPanel.prototype.ComputeLogicalExtent = function (stackDesiredSize, itemCount, isHorizontal) {
	var flag = false;
	var result = new System.Windows.Size();
	if (this.ScrollOwner !== null) {
		flag = this.ScrollOwner.InChildInvalidateMeasure;
		this.ScrollOwner.InChildInvalidateMeasure = false;
	}
	if (isHorizontal) {
		result.Width = itemCount;
		result.Height = flag ? System.Math.Max(stackDesiredSize.Height, this._scrollData._extent.Height) : stackDesiredSize.Height;
	} else {
		result.Width = flag ? System.Math.Max(stackDesiredSize.Width, this._scrollData._extent.Width) : stackDesiredSize.Width;
		result.Height = itemCount;
	}
	return result;
};
System.Windows.Controls.VirtualizingStackPanel.prototype.FillRemainingSpace = function (/* ref */ firstViewport, /* ref */ logicalVisibleSpace, /* ref */ stackDesiredSize, layoutSlotSize, isHorizontal) {
	var realizedChildren = this.RealizedChildren;
__loop0__: 
	for (var i = this.IsVirtualizing ? this._firstVisibleChildIndex : firstViewport.value; i > 0; ) {
		if (!this.PreviousChildIsGenerated(i)) {
			this.GeneratePreviousChild(i, layoutSlotSize.MemberwiseClone());
			++i;
		} else if (i <= this._firstVisibleChildIndex) {
			(realizedChildren.IList$b1_get_Item((i - 1))).Measure(layoutSlotSize.MemberwiseClone());
		}
		var num = logicalVisibleSpace.value;
		var desiredSize = realizedChildren.IList$b1_get_Item((i - 1)).DesiredSize.MemberwiseClone();
		if (isHorizontal) {
			num -= desiredSize.Width;
		} else {
			num -= desiredSize.Height;
		}
		if ($asm02.MS.Internal.DoubleUtil.LessThan(num, 0)) {
			break __loop0__;
		}
		if (isHorizontal) {
			stackDesiredSize.value.Width += desiredSize.Width;
			stackDesiredSize.value.Height = System.Math.Max(stackDesiredSize.value.Height, desiredSize.Height);
		} else {
			stackDesiredSize.value.Width = System.Math.Max(stackDesiredSize.value.Width, desiredSize.Width);
			stackDesiredSize.value.Height += desiredSize.Height;
		}
		--i;
		logicalVisibleSpace.value = num;
		++this._visibleCount;
	}
	if (!((i >= this._firstVisibleChildIndex) && this.IsVirtualizing)) {
		this._firstVisibleChildIndex = i;
	}
	this._visibleStart = (firstViewport.value = (System.Windows.Controls.Panel.prototype.get_IsItemsHost.call(this) && 
			(realizedChildren.ICollection$b1_Count !== 0)) ? this.GetGeneratedInternalIndex(this._firstVisibleChildIndex) : 0);
};
System.Windows.Controls.VirtualizingStackPanel.prototype.UpdateLogicalScrollData = function (stackDesiredSize, constraint, logicalVisibleSpace, extent, firstViewport, lastViewport, itemCount, fHorizontal) {
	var viewport = constraint.MemberwiseClone();
	var offset = this._scrollData._offset.MemberwiseClone();
	if (lastViewport === -1) {
		lastViewport = (itemCount - 1);
	}
	var num = (lastViewport - firstViewport);
	if (!((num !== 0) && !$asm02.MS.Internal.DoubleUtil.GreaterThanOrClose(logicalVisibleSpace, 0))) {
		++num;
	}
	if (fHorizontal) {
		viewport.Width = num;
		offset.X = firstViewport;
		offset.Y = System.Math.Max(0, System.Math.Min(offset.Y, (extent.Height - viewport.Height)));
		if (!((itemCount <= num) || System.Double.IsPositiveInfinity(constraint.Width))) {
			stackDesiredSize.Width = constraint.Width;
		}
	} else {
		viewport.Height = num;
		offset.Y = firstViewport;
		offset.X = System.Math.Max(0, System.Math.Min(offset.X, (extent.Width - viewport.Width)));
		if (!((itemCount <= num) || System.Double.IsPositiveInfinity(constraint.Height))) {
			stackDesiredSize.Height = constraint.Height;
		}
	}
	stackDesiredSize.Width = System.Math.Min(stackDesiredSize.Width, constraint.Width);
	stackDesiredSize.Height = System.Math.Min(stackDesiredSize.Height, constraint.Height);
	this._scrollData._maxDesiredSize.Width = System.Math.Max(stackDesiredSize.Width, this._scrollData._maxDesiredSize.Width);
	this._scrollData._maxDesiredSize.Height = System.Math.Max(stackDesiredSize.Height, this._scrollData._maxDesiredSize.Height);
	stackDesiredSize = this._scrollData._maxDesiredSize.MemberwiseClone();
	this.SetAndVerifyScrollingData(viewport.MemberwiseClone(), extent.MemberwiseClone(), offset.MemberwiseClone());
	return stackDesiredSize;
};
System.Windows.Controls.VirtualizingStackPanel.prototype.ComputeIndexOfFirstVisibleItem = function (itemsControl, isHorizontal, /* ref */ firstItemOffset) {
	firstItemOffset.value = 0;
	if (!((itemsControl === null) || !this.IsScrolling)) {
		return System.Windows.Controls.VirtualizingStackPanel.CoerceIndexToInteger(isHorizontal ? this._scrollData._offset.X : this._scrollData._offset.Y, this.ItemCount);
	}
	return 0;
};
System.Windows.Controls.VirtualizingStackPanel.prototype.InsertNewContainer = function (childIndex, container) {
	this.InsertContainer(childIndex, container, false);
};
System.Windows.Controls.VirtualizingStackPanel.prototype.InsertRecycledContainer = function (childIndex, container) {
	return this.InsertContainer(childIndex, container, true);
};
System.Windows.Controls.VirtualizingStackPanel.prototype.InsertContainer = function (childIndex, container, isRecycled) {
	var result = false;
	var children = System.Windows.Controls.Panel.prototype.get_Children.call(this);
	var num = 0;
	if (childIndex > 0) {
		num = this.ChildIndexFromRealizedIndex((childIndex - 1));
		++num;
	}
	if (!(isRecycled && 
			(num < children.Count) && (children.get_Item(num) === container))) {
		if (num < children.Count) {
			var index = num;
			if (!(!isRecycled || (System.Windows.Media.VisualTreeHelper.GetParent(container) === null))) {
				var num2 = children.IndexOf(container);
				children.RemoveAt(num2);
				if (num > num2) {
					--num;
				}
				children.Insert(num, container);
				result = true;
			} else {
				System.Windows.Controls.VirtualizingPanel.prototype.InsertInternalChild.call(this, index, container);
			}
		} else if (!(!isRecycled || (System.Windows.Media.VisualTreeHelper.GetParent(container) === null))) {
			children.Remove(container);
			children.Add(container);
			result = true;
		} else {
			System.Windows.Controls.VirtualizingPanel.prototype.AddInternalChild.call(this, container);
		}
	}
	if (!(!this.IsVirtualizing || !this.InRecyclingMode)) {
		this.RealizedChildren.IList$b1_Insert(childIndex, container);
	}
	System.Windows.Controls.VirtualizingPanel.prototype.get_ItemContainerGenerator.call(this).IItemContainerGenerator_PrepareItemContainer(container);
	return result;
};
System.Windows.Controls.VirtualizingStackPanel.prototype.PreviousChildIsGenerated = function (childIndex) {
	position._ctor(childIndex, 0);
	var concreteItemContainerGenerator = this.ConcreteItemContainerGenerator;
	if (concreteItemContainerGenerator === null) {
		var position = System.Windows.Controls.VirtualizingPanel.prototype.get_ItemContainerGenerator.call(this).IItemContainerGenerator_GeneratorPositionFromIndex((System.Windows.Controls.VirtualizingPanel.prototype.get_ItemContainerGenerator.call(this).IItemContainerGenerator_IndexFromGeneratorPosition(position.MemberwiseClone()) - 1)).MemberwiseClone();
	} else {
		position = concreteItemContainerGenerator.GeneratorPositionFromInternalIndex((concreteItemContainerGenerator.IndexFromGeneratorPosition$1(position.MemberwiseClone(), false) - 1)).MemberwiseClone();
	}
	return ((position.Offset === 0) && (position.Index >= 0));
};
System.Windows.Controls.VirtualizingStackPanel.prototype.AddContainerFromGenerator = function (childIndex, child, newlyRealized) {
	var result = false;
	if (!newlyRealized) {
		if (this.InRecyclingMode) {
			var realizedChildren = this.RealizedChildren;
			if (!((childIndex < realizedChildren.ICollection$b1_Count) && (realizedChildren.IList$b1_get_Item(childIndex) === child))) {
				result = this.InsertRecycledContainer(childIndex, child);
			}
		}
	} else {
		this.InsertNewContainer(childIndex, child);
	}
	return result;
};
System.Windows.Controls.VirtualizingStackPanel.prototype.GeneratePreviousChild = function (childIndex, layoutSlotSize) {
	var num2 = new JSIL.Variable(0), newlyRealized = new JSIL.Variable(false);
	var itemContainerGenerator = System.Windows.Controls.VirtualizingPanel.prototype.get_ItemContainerGenerator.call(this);
	var concreteItemContainerGenerator = this.ConcreteItemContainerGenerator;
	if (concreteItemContainerGenerator !== null) {
		var num = (concreteItemContainerGenerator.IndexFromGeneratorPosition$1(new System.Windows.Controls.Primitives.GeneratorPosition(childIndex, 0), false) - 1);
	} else {
		num = (itemContainerGenerator.IItemContainerGenerator_IndexFromGeneratorPosition(new System.Windows.Controls.Primitives.GeneratorPosition(childIndex, 0)) - 1);
	}
	if (num >= 0) {
		var position = this.IndexToGeneratorPositionForStart(num, /* ref */ num2).MemberwiseClone();
		var disposable = itemContainerGenerator.IItemContainerGenerator_StartAt(position.MemberwiseClone(), System.Windows.Controls.Primitives.GeneratorDirection.Forward, true);
		try {
			var uIElement = JSIL.TryCast(itemContainerGenerator.IItemContainerGenerator_GenerateNext(/* ref */ newlyRealized), System.Windows.UIElement);
			this.AddContainerFromGenerator(childIndex, uIElement, newlyRealized.value);
			if (childIndex <= this._firstVisibleChildIndex) {
				++this._firstVisibleChildIndex;
			}
			uIElement.Measure(layoutSlotSize);
		} finally {
			if (disposable !== null) {
				disposable.IDisposable_Dispose();
			}
		}
		return uIElement;
	}
	return null;
};
System.Windows.Controls.VirtualizingStackPanel.prototype.OnItemsRemove = function (args) {
	this.RemoveChildRange(args.Position.MemberwiseClone(), args.ItemCount, args.ItemUICount);
};
System.Windows.Controls.VirtualizingStackPanel.prototype.OnItemsReplace = function (args) {
	this.RemoveChildRange(args.Position.MemberwiseClone(), args.ItemCount, args.ItemUICount);
};
System.Windows.Controls.VirtualizingStackPanel.prototype.RemoveChildRange = function (position, itemCount, itemUICount) {
	if (System.Windows.Controls.Panel.prototype.get_IsItemsHost.call(this)) {
		var num = position.Index;
		if (position.Offset > 0) {
			++num;
		}
		if (!((num >= System.Windows.Controls.Panel.prototype.get_Children.call(this).Count) || (itemUICount <= 0))) {
			System.Windows.Controls.VirtualizingPanel.prototype.RemoveInternalChildRange.call(this, num, itemUICount);
			if (!(!this.IsVirtualizing || !this.InRecyclingMode)) {
				var realizedChildren = this.RealizedChildren;
			__loop0__: 
				for (var i = (num + itemUICount); i > num; ) {
					realizedChildren.IList$b1_RemoveAt(--i);
				}
			}
		}
	}
};
System.Windows.Controls.VirtualizingStackPanel.prototype.AdjustCacheWindow = function (firstViewport, itemCount) {
	var num = (firstViewport > 0) ? (firstViewport - this._beforeTrail) : firstViewport;
	var num2 = ((firstViewport + this._visibleCount) - 1);
	if (num2 >= itemCount) {
		num2 = this._isLimitExceeded ? (itemCount - 1) : itemCount;
	}
	var cacheEnd = this.CacheEnd;
	if (num < this._cacheStart) {
		this._cacheStart = num;
		return;
	}
	if (num2 > cacheEnd) {
		this._cacheStart += (num2 - cacheEnd);
	}
};
System.Windows.Controls.VirtualizingStackPanel.prototype.IsOutsideCacheWindow = function (itemIndex) {
	return ((itemIndex < this._cacheStart) || (itemIndex > this.CacheEnd));
};
System.Windows.Controls.VirtualizingStackPanel.prototype.CleanupContainers = function (firstViewport, itemsControl) {
	var num = -1;
	var num2 = 0;
	var num3 = -1;
	var realizedChildren = this.RealizedChildren;
	var num4 = new JSIL.Variable(-1);
	var num5 = new JSIL.Variable(-1);
	var num6 = new JSIL.Variable(-1);
	var flag = false;
	if (realizedChildren.ICollection$b1_Count === 0) {
		return;
	}
	this.AdjustCacheWindow(firstViewport, this.ItemCount);
	this.FindFocusedChild(/* ref */ num4, /* ref */ num5, /* ref */ num6);
__loop0__: 
	for (var i = 0; i < realizedChildren.ICollection$b1_Count; ++i) {
		var uIElement = realizedChildren.IList$b1_get_Item(i);
		num3 = this.GetGeneratedInternalIndex(i);
		if (!(!this.IsOutsideCacheWindow(num3) || !this.ConcreteItemContainerGenerator.IsContainerAnimating(uIElement))) {
			this.ConcreteItemContainerGenerator.ForceToLoadedState(uIElement);
		}
	}
	if (this.ConcreteItemContainerGenerator.GetUnloadingCount() > 0) {
		return;
	}
__loop1__: 
	for (var j = 0; j < realizedChildren.ICollection$b1_Count; ++j) {
		uIElement = realizedChildren.IList$b1_get_Item(j);
		var num7 = num3;
		num3 = this.GetGeneratedInternalIndex(j);
		var generatedExternalIndex = this.GetGeneratedExternalIndex(j);
		if ((num3 - num7) !== 1) {
			flag = true;
		}
		if (flag) {
			if (!((num < 0) || (num2 <= 0))) {
				this.CleanupRange(num, num2);
				j -= num2;
				num4.value -= num2;
				num5.value -= num2;
				num6.value -= num2;
				num2 = 0;
				num = -1;
			}
			flag = false;
		}
		if (!(!this.IsOutsideCacheWindow(num3) || 
				itemsControl.IGeneratorHost_IsItemItsOwnContainer(itemsControl.Items.get_Item(generatedExternalIndex)) || 
				(j === num4.value) || 
				(j === num5.value) || 
				(j === num6.value) || !this.NotifyCleanupItem(uIElement, itemsControl))) {
			if (num === -1) {
				num = j;
			}
			++num2;
		} else {
			flag = true;
		}
	}
	if (!((num < 0) || (num2 <= 0))) {
		this.CleanupRange(num, num2);
	}
};
System.Windows.Controls.VirtualizingStackPanel.prototype.EnsureRealizedChildren = function () {
	if (this._realizedChildren === null) {
		var children = System.Windows.Controls.Panel.prototype.get_Children.call(this);
		this._realizedChildren = new (System.Collections.Generic.List$b1.Of(System.Windows.UIElement)) (children.Count);
	__loop0__: 
		for (var i = 0; i < children.Count; ++i) {
			this._realizedChildren.ICollection$b1_Add(children.get_Item(i));
		}
	}
};
System.Windows.Controls.VirtualizingStackPanel.prototype.debug_VerifyRealizedChildren = function () {
	var itemsOwner = System.Windows.Controls.ItemsControl.GetItemsOwner(this);
	if (!((itemsOwner === null) || (this.ConcreteItemContainerGenerator === null))) {
		var enumerator = System.Windows.Controls.Panel.prototype.get_Children.call(this).GetEnumerator();
		try {
		__loop0__: 
			while (enumerator.IEnumerator_MoveNext()) {
				var current = enumerator.IEnumerator$b1_Current;
				var num = this.ConcreteItemContainerGenerator.IndexFromContainer$1(current, false);
				if (num !== -1) {
					JSIL.Cast(System.Windows.Controls.VirtualizingPanel.prototype.get_ItemContainerGenerator.call(this), System.Windows.Controls.ItemContainerGenerator).GeneratorPositionFromInternalIndex(num);
				}
			}
		} finally {
			if (enumerator !== null) {
				enumerator.IDisposable_Dispose();
			}
		}
	}
};
System.Windows.Controls.VirtualizingStackPanel.prototype.debug_AssertRealizedChildrenEqualVisualChildren = function () {
	if (!(!this.IsVirtualizing || !this.InRecyclingMode)) {
		var children = System.Windows.Controls.Panel.prototype.get_Children.call(this);
	__loop0__: 
		for (var i = 0; i < children.Count; ++i) {
		}
	}
};
System.Windows.Controls.VirtualizingStackPanel.prototype.ChildIndexFromRealizedIndex = function (realizedChildIndex) {
	if (!(!this.IsVirtualizing || !this.InRecyclingMode)) {
		var realizedChildren = this.RealizedChildren;
		if (realizedChildIndex < realizedChildren.ICollection$b1_Count) {
			var uIElement = realizedChildren.IList$b1_get_Item(realizedChildIndex);
			var children = System.Windows.Controls.Panel.prototype.get_Children.call(this);
		__loop0__: 
			for (var i = realizedChildIndex; i < children.Count; ++i) {
				if (children.get_Item(i) === uIElement) {
					return i;
				}
			}
		}
	}
	return realizedChildIndex;
};
System.Windows.Controls.VirtualizingStackPanel.prototype.DisconnectRecycledContainers = function () {
	var num = 0;
	var realizedChildren = this.RealizedChildren;
	var uIElement = (realizedChildren.ICollection$b1_Count > 0) ? realizedChildren.IList$b1_get_Item(0) : null;
	var children = System.Windows.Controls.Panel.prototype.get_Children.call(this);
__loop0__: 
	for (var i = 0; i < children.Count; ++i) {
		var uIElement2 = children.get_Item(i);
		if (uIElement2 === uIElement) {
			++num;
			if (num < realizedChildren.ICollection$b1_Count) {
				uIElement = realizedChildren.IList$b1_get_Item(num);
			} else {
				uIElement = null;
			}
		} else {
			children.Remove(uIElement2);
			--i;
		}
	}
};
System.Windows.Controls.VirtualizingStackPanel.prototype.IndexToGeneratorPositionForStart = function (index, /* ref */ childIndex) {
	if (this.ConcreteItemContainerGenerator !== null) {
		var concreteItemContainerGenerator = this.ConcreteItemContainerGenerator;
		var result = concreteItemContainerGenerator ? concreteItemContainerGenerator.GeneratorPositionFromInternalIndex(index) : new System.Windows.Controls.Primitives.GeneratorPosition(-1, (index + 1)).MemberwiseClone();
	} else {
		var itemContainerGenerator = System.Windows.Controls.VirtualizingPanel.prototype.get_ItemContainerGenerator.call(this);
		result = itemContainerGenerator ? itemContainerGenerator.IItemContainerGenerator_GeneratorPositionFromIndex(index) : new System.Windows.Controls.Primitives.GeneratorPosition(-1, (index + 1)).MemberwiseClone();
	}
	childIndex.value = (result.Offset === 0) ? result.Index : (result.Index + 1);
	return result;
};
System.Windows.Controls.VirtualizingStackPanel.prototype.NotifyCleanupItem = function (child, itemsControl) {
	var cleanUpVirtualizedItemEventArgs = new System.Windows.Controls.CleanUpVirtualizedItemEventArgs(child.ReadLocalValue(System.Windows.Controls.ItemContainerGenerator.ItemForItemContainerProperty), child);
	this.OnCleanUpVirtualizedItem(cleanUpVirtualizedItemEventArgs);
	return !cleanUpVirtualizedItemEventArgs.Cancel;
};
System.Windows.Controls.VirtualizingStackPanel.prototype.CleanupRange = function (startIndex, count) {
	if (this.InRecyclingMode) {
		JSIL.Cast(System.Windows.Controls.VirtualizingPanel.prototype.get_ItemContainerGenerator.call(this), System.Windows.Controls.Primitives.IRecyclingItemContainerGenerator).IRecyclingItemContainerGenerator_Recycle(new System.Windows.Controls.Primitives.GeneratorPosition(startIndex, 0), count);
		var realizedChildren = this.RealizedChildren;
	__loop0__: 
		for (var i = (startIndex + count); i > startIndex; ) {
			realizedChildren.IList$b1_RemoveAt(--i);
		}
	} else {
		System.Windows.Controls.VirtualizingPanel.prototype.get_ItemContainerGenerator.call(this).IItemContainerGenerator_Remove(new System.Windows.Controls.Primitives.GeneratorPosition(startIndex, 0), count);
		System.Windows.Controls.VirtualizingPanel.prototype.RemoveInternalChildRange.call(this, startIndex, count);
	}
	this.AdjustFirstVisibleChildIndex(startIndex, count);
};
System.Windows.Controls.VirtualizingStackPanel.prototype.AdjustFirstVisibleChildIndex = function (startIndex, count) {
	if (startIndex < this._firstVisibleChildIndex) {
		var num = ((startIndex + count) - 1);
		if (num < this._firstVisibleChildIndex) {
			this._firstVisibleChildIndex -= count;
			return;
		}
		this._firstVisibleChildIndex = startIndex;
	}
};
System.Windows.Controls.VirtualizingStackPanel.OutsideMinMax = function (i, min, max) {
	return ((i < min) || (i > max));
};
System.Windows.Controls.VirtualizingStackPanel.prototype.EnsureTopCapGenerated = function (layoutSlotSize) {
	if (this._visibleStart > 0) {
		var firstVisibleChildIndex = this._firstVisibleChildIndex;
		if (!this.PreviousChildIsGenerated(firstVisibleChildIndex)) {
			this._beforeTrail = 1;
			this.GeneratePreviousChild(firstVisibleChildIndex, layoutSlotSize);
		}
	}
};
System.Windows.Controls.VirtualizingStackPanel.prototype.SetVirtualizationState = function (itemsControl, hasMeasureData) {
	var virtualizationMode = itemsControl ? System.Windows.Controls.VirtualizingStackPanel.GetVirtualizationMode(itemsControl) : System.Windows.Controls.VirtualizationMode.Standard;
	if (itemsControl !== null) {
		if (!(!this.IsScrolling && !hasMeasureData)) {
			this.IsVirtualizing = true;
			if (!(!this.IsVirtualizing || System.Windows.Controls.VirtualizingStackPanel.GetIsVirtualizing(itemsControl))) {
				System.Windows.Controls.VirtualizingStackPanel.SetIsVirtualizing(itemsControl, true);
			}
		}
		this.VirtualizationMode = virtualizationMode;
		return;
	}
	this.IsVirtualizing = false;
};
System.Windows.Controls.VirtualizingStackPanel.prototype.get_MinDesiredGenerated = function () {
	return System.Math.Max(0, (this._visibleStart - this._beforeTrail));
};
System.Windows.Controls.VirtualizingStackPanel.prototype.get_MaxDesiredGenerated = function () {
	return System.Math.Min(this.ItemCount, ((this._visibleStart + this._visibleCount) + this._afterTrail));
};
System.Windows.Controls.VirtualizingStackPanel.prototype.get_ItemCount = function () {
	var itemsOwner = System.Windows.Controls.ItemsControl.GetItemsOwner(this);
	if (itemsOwner === null) {
		return 0;
	}
	var concreteItemContainerGenerator = this.ConcreteItemContainerGenerator;
	if (concreteItemContainerGenerator === null) {
		return itemsOwner.Items.Count;
	}
	return (itemsOwner.Items.Count + concreteItemContainerGenerator.GetUnloadingCount());
};
System.Windows.Controls.VirtualizingStackPanel.ResetScrolling = function (element) {
	element.InvalidateMeasure();
	if (element.IsScrolling) {
		element._scrollData.ClearLayout();
	}
};
System.Windows.Controls.VirtualizingStackPanel.prototype.OnScrollChange = function () {
	if (this.ScrollOwner !== null) {
		this.ScrollOwner.InvalidateScrollInfo();
	}
};
System.Windows.Controls.VirtualizingStackPanel.prototype.SetAndVerifyScrollingData = function (viewport, extent, offset) {
	var flag = !$asm02.MS.Internal.DoubleUtil.AreClose$1(viewport.MemberwiseClone(), this._scrollData._viewport.MemberwiseClone());
	var flag2 = !$asm02.MS.Internal.DoubleUtil.AreClose$1(extent.MemberwiseClone(), this._scrollData._extent.MemberwiseClone());
	var flag3 = !$asm02.MS.Internal.DoubleUtil.AreClose$2(offset.MemberwiseClone(), this._scrollData._computedOffset.MemberwiseClone());
	this._scrollData._offset = offset.MemberwiseClone();
	if (!(!flag && 
			!flag2 && !flag3)) {
		var arg_5F_0 = this._scrollData._computedOffset.MemberwiseClone();
		var arg_6B_0 = this._scrollData._viewport.MemberwiseClone();
		this._scrollData._viewport = viewport.MemberwiseClone();
		this._scrollData._extent = extent.MemberwiseClone();
		this._scrollData._computedOffset = offset.MemberwiseClone();
		this.OnScrollChange();
	}
};
System.Windows.Controls.VirtualizingStackPanel.prototype.ComputePhysicalFromLogicalOffset = function (logicalOffset, fHorizontal) {
	var num = 0;
	var realizedChildren = this.RealizedChildren;
__loop0__: 
	for (var num2 = 0; num2 < logicalOffset; ++num2) {
		var uIElement = realizedChildren.IList$b1_get_Item(num2);
		num -= fHorizontal ? uIElement.DesiredSize.Width : uIElement.DesiredSize.Height;
	}
	return num;
};
System.Windows.Controls.VirtualizingStackPanel.prototype.FindChildIndexThatParentsVisual = function (visual) {
	var dependencyObject = visual;
__loop0__: 
	for (var parent = System.Windows.Media.VisualTreeHelper.GetParent(dependencyObject); parent !== this; ) {
		dependencyObject = parent;
		parent = System.Windows.Media.VisualTreeHelper.GetParent(dependencyObject);
	}
	var realizedChildren = this.RealizedChildren;
__loop1__: 
	for (var i = 0; i < realizedChildren.ICollection$b1_Count; ++i) {
		if (realizedChildren.IList$b1_get_Item(i) === JSIL.Cast(dependencyObject, System.Windows.UIElement)) {
			return this.GetGeneratedInternalIndex(i);
		}
	}
	return -1;
};
System.Windows.Controls.VirtualizingStackPanel.prototype.MakeVisiblePhysicalHelper = function (r, /* ref */ newOffset, /* ref */ newRect, isHorizontal) {
	if (isHorizontal) {
		var num = this._scrollData._computedOffset.X;
		var num2 = this.ViewportWidth;
		var num3 = r.X;
		var num4 = r.Width;
	} else {
		num = this._scrollData._computedOffset.Y;
		num2 = this.ViewportHeight;
		num3 = r.Y;
		num4 = r.Height;
	}
	num3 += num;
	var num5 = System.Windows.Controls.ScrollContentPresenter.ComputeScrollOffsetWithMinimalScroll(num, (num + num2), num3, (num3 + num4));
	var num6 = System.Math.Max(num3, num5);
	num4 = System.Math.Max((System.Math.Min((num4 + num3), (num5 + num2)) - num6), 0);
	num3 = num6;
	num3 -= num;
	if (isHorizontal) {
		newOffset.value.X = num5;
		newRect.value.X = num3;
		newRect.value.Width = num4;
		return;
	}
	newOffset.value.Y = num5;
	newRect.value.Y = num3;
	newRect.value.Height = num4;
};
System.Windows.Controls.VirtualizingStackPanel.prototype.MakeVisibleLogicalHelper = function (childIndex, r, /* ref */ newOffset, /* ref */ newRect) {
	var flag = (this.Orientation === System.Windows.Controls.Orientation.Horizontal);
	var num = r.Y;
	if (flag) {
		var num2 = Math.floor(this._scrollData._computedOffset.X);
		var num3 = Math.floor(this._scrollData._viewport.Width);
	} else {
		num2 = Math.floor(this._scrollData._computedOffset.Y);
		num3 = Math.floor(this._scrollData._viewport.Height);
	}
	var num4 = num2;
	if (childIndex < num2) {
		num = 0;
		num4 = childIndex;
	} else if (childIndex > ((num2 + num3) - 1)) {
		num4 = ((childIndex - num3) + 1);
		var num5 = flag ? System.Windows.FrameworkElement.prototype.get_ActualWidth.call(this) : System.Windows.FrameworkElement.prototype.get_ActualHeight.call(this);
		num = (num5 * (1 - (1 / num3)));
	}
	if (flag) {
		newOffset.value.X = num4;
		newRect.value.X = num;
		newRect.value.Width = r.Width;
		return;
	}
	newOffset.value.Y = num4;
	newRect.value.Y = num;
	newRect.value.Height = r.Height;
};
System.Windows.Controls.VirtualizingStackPanel.CoerceIndexToInteger = function (index, numberOfItems) {
	if (System.Double.IsNegativeInfinity(index)) {
		var num = 0;
	} else if (System.Double.IsPositiveInfinity(index)) {
		num = (numberOfItems - 1);
	} else {
		num = Math.floor(index);
		num = System.Math.Max(System.Math.Min((numberOfItems - 1), num), 0);
	}
	return num;
};
System.Windows.Controls.VirtualizingStackPanel.prototype.GetGeneratedInternalIndex = function (childIndex) {
	var concreteItemContainerGenerator = this.ConcreteItemContainerGenerator;
	return concreteItemContainerGenerator.IndexFromGeneratorPosition$1(new System.Windows.Controls.Primitives.GeneratorPosition(childIndex, 0), false);
};
System.Windows.Controls.VirtualizingStackPanel.prototype.GetGeneratedExternalIndex = function (childIndex) {
	return System.Windows.Controls.VirtualizingPanel.prototype.get_ItemContainerGenerator.call(this).IItemContainerGenerator_IndexFromGeneratorPosition(new System.Windows.Controls.Primitives.GeneratorPosition(childIndex, 0));
};
System.Windows.Controls.VirtualizingStackPanel.prototype.FindFocusedChild = function (/* ref */ focusedChild, /* ref */ previousFocusable, /* ref */ nextFocusable) {
	focusedChild.value = (previousFocusable.value = (nextFocusable.value = -1));
__loop0__: 
	for (var i = 0; i < System.Windows.Controls.Panel.prototype.get_Children.call(this).Count; ++i) {
		var frameworkElement = JSIL.TryCast(System.Windows.Controls.Panel.prototype.get_Children.call(this).get_Item(i), System.Windows.FrameworkElement);
		if (!((frameworkElement === null) || !frameworkElement.HasFocus())) {
			focusedChild.value = i;
			previousFocusable.value = (i - 1);
			nextFocusable.value = (i + 1);
			return;
		}
	}
};
System.Windows.Controls.VirtualizingStackPanel.OnOrientationChanged = function (d, e) {
	System.Windows.Controls.VirtualizingStackPanel.ResetScrolling(JSIL.TryCast(d, System.Windows.Controls.VirtualizingStackPanel));
};
System.Windows.Controls.VirtualizingStackPanel.prototype.get_CacheEnd = function () {
	var num = (this._beforeTrail + this._visibleCount);
	if (num > 0) {
		return ((this._cacheStart + num) - 1);
	}
	return 0;
};
System.Windows.Controls.VirtualizingStackPanel.prototype.get_InRecyclingMode = function () {
	return (this._virtualizationMode === System.Windows.Controls.VirtualizationMode.Recycling);
};
System.Windows.Controls.VirtualizingStackPanel.prototype.get_IsScrolling = function () {
	return (this.ScrollOwner !== null);
};
System.Windows.Controls.VirtualizingStackPanel.prototype.get_IsVirtualizing = function () {
	return this.VSP_IsVirtualizing;
};
System.Windows.Controls.VirtualizingStackPanel.prototype.set_IsVirtualizing = function (value) {
	if (!(System.Windows.Controls.Panel.prototype.get_IsItemsHost.call(this) && value)) {
		this._realizedChildren = null;
	}
	this.VSP_IsVirtualizing = value;
};
System.Windows.Controls.VirtualizingStackPanel.prototype.get_RealizedChildren = function () {
	if (!(!this.IsVirtualizing || !this.InRecyclingMode)) {
		this.EnsureRealizedChildren();
		return this._realizedChildren;
	}
	return System.Windows.Controls.Panel.prototype.get_Children.call(this);
};
System.Windows.Controls.VirtualizingStackPanel.prototype.get_VirtualizationMode = function () {
	return this._virtualizationMode;
};
System.Windows.Controls.VirtualizingStackPanel.prototype.set_VirtualizationMode = function (value) {
	this._virtualizationMode = value;
};
System.Windows.Controls.VirtualizingStackPanel.prototype.get_ConcreteItemContainerGenerator = function () {
	return JSIL.TryCast(System.Windows.Controls.VirtualizingPanel.prototype.get_ItemContainerGenerator.call(this), System.Windows.Controls.ItemContainerGenerator);
};
JSIL.MakeProperty(System.Windows.Controls.VirtualizingStackPanel.prototype, "Orientation", 
	System.Windows.Controls.VirtualizingStackPanel.prototype.get_Orientation, System.Windows.Controls.VirtualizingStackPanel.prototype.set_Orientation);
JSIL.MakeProperty(System.Windows.Controls.VirtualizingStackPanel.prototype, "CanHorizontallyScroll", 
	System.Windows.Controls.VirtualizingStackPanel.prototype.get_CanHorizontallyScroll, System.Windows.Controls.VirtualizingStackPanel.prototype.set_CanHorizontallyScroll);
JSIL.MakeProperty(System.Windows.Controls.VirtualizingStackPanel.prototype, "CanVerticallyScroll", 
	System.Windows.Controls.VirtualizingStackPanel.prototype.get_CanVerticallyScroll, System.Windows.Controls.VirtualizingStackPanel.prototype.set_CanVerticallyScroll);
JSIL.MakeProperty(System.Windows.Controls.VirtualizingStackPanel.prototype, "ExtentWidth", 
	System.Windows.Controls.VirtualizingStackPanel.prototype.get_ExtentWidth, null);
JSIL.MakeProperty(System.Windows.Controls.VirtualizingStackPanel.prototype, "ExtentHeight", 
	System.Windows.Controls.VirtualizingStackPanel.prototype.get_ExtentHeight, null);
JSIL.MakeProperty(System.Windows.Controls.VirtualizingStackPanel.prototype, "ViewportWidth", 
	System.Windows.Controls.VirtualizingStackPanel.prototype.get_ViewportWidth, null);
JSIL.MakeProperty(System.Windows.Controls.VirtualizingStackPanel.prototype, "ViewportHeight", 
	System.Windows.Controls.VirtualizingStackPanel.prototype.get_ViewportHeight, null);
JSIL.MakeProperty(System.Windows.Controls.VirtualizingStackPanel.prototype, "HorizontalOffset", 
	System.Windows.Controls.VirtualizingStackPanel.prototype.get_HorizontalOffset, null);
JSIL.MakeProperty(System.Windows.Controls.VirtualizingStackPanel.prototype, "VerticalOffset", 
	System.Windows.Controls.VirtualizingStackPanel.prototype.get_VerticalOffset, null);
JSIL.MakeProperty(System.Windows.Controls.VirtualizingStackPanel.prototype, "ScrollOwner", 
	System.Windows.Controls.VirtualizingStackPanel.prototype.get_ScrollOwner, System.Windows.Controls.VirtualizingStackPanel.prototype.set_ScrollOwner);
JSIL.MakeProperty(System.Windows.Controls.VirtualizingStackPanel.prototype, "MinDesiredGenerated", 
	System.Windows.Controls.VirtualizingStackPanel.prototype.get_MinDesiredGenerated, null);
JSIL.MakeProperty(System.Windows.Controls.VirtualizingStackPanel.prototype, "MaxDesiredGenerated", 
	System.Windows.Controls.VirtualizingStackPanel.prototype.get_MaxDesiredGenerated, null);
JSIL.MakeProperty(System.Windows.Controls.VirtualizingStackPanel.prototype, "ItemCount", 
	System.Windows.Controls.VirtualizingStackPanel.prototype.get_ItemCount, null);
JSIL.MakeProperty(System.Windows.Controls.VirtualizingStackPanel.prototype, "CacheEnd", 
	System.Windows.Controls.VirtualizingStackPanel.prototype.get_CacheEnd, null);
JSIL.MakeProperty(System.Windows.Controls.VirtualizingStackPanel.prototype, "InRecyclingMode", 
	System.Windows.Controls.VirtualizingStackPanel.prototype.get_InRecyclingMode, null);
JSIL.MakeProperty(System.Windows.Controls.VirtualizingStackPanel.prototype, "IsScrolling", 
	System.Windows.Controls.VirtualizingStackPanel.prototype.get_IsScrolling, null);
JSIL.MakeProperty(System.Windows.Controls.VirtualizingStackPanel.prototype, "IsVirtualizing", 
	System.Windows.Controls.VirtualizingStackPanel.prototype.get_IsVirtualizing, System.Windows.Controls.VirtualizingStackPanel.prototype.set_IsVirtualizing);
JSIL.MakeProperty(System.Windows.Controls.VirtualizingStackPanel.prototype, "RealizedChildren", 
	System.Windows.Controls.VirtualizingStackPanel.prototype.get_RealizedChildren, null);
JSIL.MakeProperty(System.Windows.Controls.VirtualizingStackPanel.prototype, "VirtualizationMode", 
	System.Windows.Controls.VirtualizingStackPanel.prototype.get_VirtualizationMode, System.Windows.Controls.VirtualizingStackPanel.prototype.set_VirtualizationMode);
JSIL.MakeProperty(System.Windows.Controls.VirtualizingStackPanel.prototype, "ConcreteItemContainerGenerator", 
	System.Windows.Controls.VirtualizingStackPanel.prototype.get_ConcreteItemContainerGenerator, null);
Object.defineProperty(System.Windows.Controls.VirtualizingStackPanel, "ContainerCacheSize", {
		"value": 0}
);
System.Windows.Controls.VirtualizingStackPanel.OrientationProperty = null;
System.Windows.Controls.VirtualizingStackPanel.IsVirtualizingProperty = null;
System.Windows.Controls.VirtualizingStackPanel.VirtualizationModeProperty = null;
System.Windows.Controls.VirtualizingStackPanel.prototype.CleanUpVirtualizedItemEvent = null;
System.Windows.Controls.VirtualizingStackPanel.prototype.VSP_IsVirtualizing = false;
System.Windows.Controls.VirtualizingStackPanel.prototype._scrollData = null;
System.Windows.Controls.VirtualizingStackPanel.prototype._virtualizationMode = 0;
System.Windows.Controls.VirtualizingStackPanel.prototype._visibleStart = 0;
System.Windows.Controls.VirtualizingStackPanel.prototype._visibleCount = 0;
System.Windows.Controls.VirtualizingStackPanel.prototype._cacheStart = 0;
System.Windows.Controls.VirtualizingStackPanel.prototype._isLimitExceeded = false;
System.Windows.Controls.VirtualizingStackPanel.prototype._firstVisibleChildIndex = 0;
System.Windows.Controls.VirtualizingStackPanel.prototype._realizedChildren = null;
System.Windows.Controls.VirtualizingStackPanel.prototype._beforeTrail = 0;
System.Windows.Controls.VirtualizingStackPanel.prototype._afterTrail = 0;
System.Windows.Controls.VirtualizingStackPanel._cctor = function () {
	System.Windows.Controls.VirtualizingStackPanel.OrientationProperty = System.Windows.DependencyProperty.Register$0("Orientation", System.Windows.Controls.Orientation, System.Windows.Controls.VirtualizingStackPanel, JSIL.New(System.Windows.PropertyMetadata, "_ctor$2", [System.Windows.Controls.Orientation.Vertical, JSIL.Delegate.New("System.Windows.PropertyChangedCallback", null, System.Windows.Controls.VirtualizingStackPanel.OnOrientationChanged)]));
	System.Windows.Controls.VirtualizingStackPanel.IsVirtualizingProperty = System.Windows.DependencyProperty.RegisterAttachedReadOnly("IsVirtualizing", System.Boolean, System.Windows.Controls.VirtualizingStackPanel, JSIL.New(System.Windows.PropertyMetadata, "_ctor$1", [false]));
	System.Windows.Controls.VirtualizingStackPanel.VirtualizationModeProperty = System.Windows.DependencyProperty.RegisterAttached("VirtualizationMode", System.Windows.Controls.VirtualizationMode, System.Windows.Controls.VirtualizingStackPanel, JSIL.New(System.Windows.PropertyMetadata, "_ctor$1", [System.Windows.Controls.VirtualizationMode.Recycling]));
};

System.Windows.Controls.ProgressBar.prototype._ctor = function () {
	System.Windows.Controls.Primitives.RangeBase.prototype._ctor.call(this);
	$asm02.System.Windows.Input.KeyboardNavigation.SetAcceptsReturn(this, false);
	System.Windows.Controls.Control.prototype.set_DefaultStyleKey.call(this, System.Windows.Controls.ProgressBar);
};
System.Windows.Controls.ProgressBar.prototype.get_IsIndeterminate = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Controls.ProgressBar.IsIndeterminateProperty), System.Boolean);
};
System.Windows.Controls.ProgressBar.prototype.set_IsIndeterminate = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Controls.ProgressBar.IsIndeterminateProperty, value);
};
System.Windows.Controls.ProgressBar.OnIsIndeterminateChanged = function (d, e) {
	var progressBar = JSIL.Cast(d, System.Windows.Controls.ProgressBar);
	if (progressBar !== null) {
		var progressBarAutomationPeer = JSIL.TryCast(progressBar.GetAutomationPeer(), System.Windows.Automation.Peers.ProgressBarAutomationPeer);
		if (progressBarAutomationPeer !== null) {
			progressBarAutomationPeer.InvalidatePeer();
		}
		progressBar.OnIsIndeterminateChanged();
		progressBar.SetProgressBarIndicatorLength();
	}
};
System.Windows.Controls.ProgressBar.prototype.OnTrackSizeChanged = function (sender, e) {
	this.SetProgressBarIndicatorLength();
};
System.Windows.Controls.ProgressBar.prototype.OnValueChanged = function (oldValue, newValue) {
	System.Windows.Controls.Primitives.RangeBase.prototype.OnValueChanged.call(this, oldValue, newValue);
	this.SetProgressBarIndicatorLength();
};
System.Windows.Controls.ProgressBar.prototype.OnApplyTemplate = function () {
	System.Windows.FrameworkElement.prototype.OnApplyTemplate.call(this);
	if (this.ElementTrack !== null) {
		this.ElementTrack.remove_SizeChanged(JSIL.Delegate.New("System.Windows.SizeChangedEventHandler", this, System.Windows.Controls.ProgressBar.prototype.OnTrackSizeChanged));
	}
	this.ElementTrack = JSIL.TryCast(System.Windows.Controls.Control.prototype.GetTemplateChild.call(this, "ProgressBarTrack"), System.Windows.FrameworkElement);
	this.ElementIndicator = JSIL.TryCast(System.Windows.Controls.Control.prototype.GetTemplateChild.call(this, "ProgressBarIndicator"), System.Windows.FrameworkElement);
	if (this.ElementTrack !== null) {
		this.ElementTrack.add_SizeChanged(JSIL.Delegate.New("System.Windows.SizeChangedEventHandler", this, System.Windows.Controls.ProgressBar.prototype.OnTrackSizeChanged));
	}
	this.UpdateVisualState(false);
};
System.Windows.Controls.ProgressBar.prototype.OnCreateAutomationPeer = function () {
	return new System.Windows.Automation.Peers.ProgressBarAutomationPeer(this);
};
System.Windows.Controls.ProgressBar.prototype.SetProgressBarIndicatorLength = function () {
	var minimum = System.Windows.Controls.Primitives.RangeBase.prototype.get_Minimum.call(this);
	var maximum = System.Windows.Controls.Primitives.RangeBase.prototype.get_Maximum.call(this);
	var value = System.Windows.Controls.Primitives.RangeBase.prototype.get_Value.call(this);
	if (!((this.ElementTrack === null) || (this.ElementIndicator === null))) {
		var frameworkElement = JSIL.TryCast(System.Windows.Media.VisualTreeHelper.GetParent(this.ElementIndicator), System.Windows.FrameworkElement);
		if (frameworkElement !== null) {
			var num = (this.ElementIndicator.Margin.Left + this.ElementIndicator.Margin.Right);
			var border = JSIL.TryCast(frameworkElement, System.Windows.Controls.Border);
			if (border !== null) {
				num += (border.Padding.Left + border.Padding.Right);
			} else {
				var control = JSIL.TryCast(frameworkElement, System.Windows.Controls.Control);
				if (control !== null) {
					num += (control.Padding.Left + control.Padding.Right);
				}
			}
			var num2 = (this.IsIndeterminate || 
				(maximum === minimum)) ? 1 : ((value - minimum) / (maximum - minimum));
			var num3 = System.Math.Max(0, (frameworkElement.ActualWidth - num));
			this.ElementIndicator.Width = (num2 * num3);
		}
	}
};
System.Windows.Controls.ProgressBar.prototype.OnIsIndeterminateChanged = function () {
	this.UpdateVisualState(true);
};
System.Windows.Controls.ProgressBar.prototype.get_ElementTrack = function () {
	return this.ElementTrack$value;
};
System.Windows.Controls.ProgressBar.prototype.set_ElementTrack = function (value) {
	this.ElementTrack$value = value;
};
System.Windows.Controls.ProgressBar.prototype.get_ElementIndicator = function () {
	return this.ElementIndicator$value;
};
System.Windows.Controls.ProgressBar.prototype.set_ElementIndicator = function (value) {
	this.ElementIndicator$value = value;
};
System.Windows.Controls.ProgressBar.prototype.UpdateVisualState = function (useTransitions) {
	if (!this.IsIndeterminate) {
		System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "Determinate");
		return;
	}
	System.Windows.Controls.Control.prototype.GoToState.call(this, useTransitions, "Indeterminate");
};
JSIL.MakeProperty(System.Windows.Controls.ProgressBar.prototype, "IsIndeterminate", 
	System.Windows.Controls.ProgressBar.prototype.get_IsIndeterminate, System.Windows.Controls.ProgressBar.prototype.set_IsIndeterminate);
JSIL.MakeProperty(System.Windows.Controls.ProgressBar.prototype, "ElementTrack", 
	System.Windows.Controls.ProgressBar.prototype.get_ElementTrack, System.Windows.Controls.ProgressBar.prototype.set_ElementTrack);
JSIL.MakeProperty(System.Windows.Controls.ProgressBar.prototype, "ElementIndicator", 
	System.Windows.Controls.ProgressBar.prototype.get_ElementIndicator, System.Windows.Controls.ProgressBar.prototype.set_ElementIndicator);
Object.defineProperty(System.Windows.Controls.ProgressBar, "ElementTrackName", {
		"value": "ProgressBarTrack"}
);
Object.defineProperty(System.Windows.Controls.ProgressBar, "ElementIndicatorName", {
		"value": "ProgressBarIndicator"}
);
Object.defineProperty(System.Windows.Controls.ProgressBar, "StateDeterminate", {
		"value": "Determinate"}
);
Object.defineProperty(System.Windows.Controls.ProgressBar, "StateIndeterminate", {
		"value": "Indeterminate"}
);
Object.defineProperty(System.Windows.Controls.ProgressBar, "GroupCommon", {
		"value": "CommonStates"}
);
System.Windows.Controls.ProgressBar.IsIndeterminateProperty = null;
System.Windows.Controls.ProgressBar.prototype.ElementTrack$value = null;
System.Windows.Controls.ProgressBar.prototype.ElementIndicator$value = null;
System.Windows.Controls.ProgressBar._cctor = function () {
	System.Windows.Controls.ProgressBar.IsIndeterminateProperty = System.Windows.DependencyProperty.Register$0("IsIndeterminate", System.Boolean, System.Windows.Controls.ProgressBar, JSIL.New(System.Windows.PropertyMetadata, "_ctor$0", [JSIL.Delegate.New("System.Windows.PropertyChangedCallback", null, System.Windows.Controls.ProgressBar.OnIsIndeterminateChanged)]));
};

$asm02.MS.Internal.Data.DefaultValueConverter.prototype._ctor = function (typeConverter, sourceType, targetType, shouldConvertFrom, shouldConvertTo) {
	System.Object.prototype._ctor.call(this);
	this._typeConverter = typeConverter;
	this._sourceType = sourceType;
	this._targetType = targetType;
	this._shouldConvertFrom = shouldConvertFrom;
	this._shouldConvertTo = shouldConvertTo;
};
$asm02.MS.Internal.Data.DefaultValueConverter.Create = function (sourceType, targetType, targetToSource) {
	var flag = false;
	var flag2 = false;
	if (targetType === System.Object) {
		return new $asm02.MS.Internal.Data.ObjectTargetConverter(sourceType);
	}
	if (sourceType === System.Object) {
		return new $asm02.MS.Internal.Data.ObjectSourceConverter(targetType);
	}
	if ($asm02.MS.Internal.Data.SystemConvertConverter.CanConvert(sourceType, targetType)) {
		return new $asm02.MS.Internal.Data.SystemConvertConverter(sourceType, targetType);
	}
	var underlyingType = System.Nullable.GetUnderlyingType(sourceType);
	if (underlyingType !== null) {
		sourceType = underlyingType;
		flag = true;
	}
	underlyingType = System.Nullable.GetUnderlyingType(targetType);
	if (underlyingType !== null) {
		targetType = underlyingType;
		flag2 = true;
	}
	if (!(!flag && !flag2)) {
		return $asm02.MS.Internal.Data.DefaultValueConverter.Create(sourceType, targetType, targetToSource);
	}
	if (!(!sourceType.IsInterface && !targetType.IsInterface)) {
		return new $asm02.MS.Internal.Data.InterfaceConverter(sourceType, targetType);
	}
	var converter = $asm02.MS.Internal.Data.DefaultValueConverter.GetConverter(sourceType);
	var flag3 = (converter && 
		converter.CanConvertTo$0(targetType));
	var flag4 = (converter && 
		converter.CanConvertFrom$0(targetType));
	if (!((!flag3 && 
				!targetType.IsAssignableFrom(sourceType)) || (targetToSource && 
				!flag4 && 
				!sourceType.IsAssignableFrom(targetType)))) {
		return new $asm02.MS.Internal.Data.SourceDefaultValueConverter(converter, sourceType, targetType, (targetToSource && flag4), flag3);
	}
	converter = $asm02.MS.Internal.Data.DefaultValueConverter.GetConverter(targetType);
	flag3 = (converter && 
		converter.CanConvertTo$0(sourceType));
	flag4 = (converter && 
		converter.CanConvertFrom$0(sourceType));
	if (!((!flag4 && 
				!targetType.IsAssignableFrom(sourceType)) || (targetToSource && 
				!flag3 && 
				!sourceType.IsAssignableFrom(targetType)))) {
		return new $asm02.MS.Internal.Data.TargetDefaultValueConverter(converter, sourceType, targetType, flag4, (targetToSource && flag3));
	}
	throw JSIL.New(System.InvalidOperationException, "_ctor$1", [System.String.Format(System.Globalization.CultureInfo.InvariantCulture, $asm02.System.Windows.Resx.GetString$2("ValueConverter_CantConvertType"), [sourceType.toString(), targetType.toString()])]);
};
$asm02.MS.Internal.Data.DefaultValueConverter.GetConverter = function (type) {
	return $asm02.MS.Internal.FrameworkCallbacks.GetTypeConverterForType$0(type);
};
$asm02.MS.Internal.Data.DefaultValueConverter.prototype.ConvertFrom = function (o, destinationType, culture) {
	return this.ConvertHelper(o, destinationType, culture, false);
};
$asm02.MS.Internal.Data.DefaultValueConverter.prototype.ConvertTo = function (o, destinationType, culture) {
	return this.ConvertHelper(o, destinationType, culture, true);
};
$asm02.MS.Internal.Data.DefaultValueConverter.AcceptsNull = function (type) {
	return (!type.IsValueType || (System.Nullable.GetUnderlyingType(type) !== null));
};
$asm02.MS.Internal.Data.DefaultValueConverter.prototype.ConvertHelper = function (o, destinationType, culture, isForward) {
	var flag = isForward ? !this._shouldConvertTo : !this._shouldConvertFrom;
	if (!flag) {
		if (isForward) {
			var result = this._typeConverter.ConvertTo$1(o, destinationType);
		} else {
			result = this._typeConverter.ConvertFrom$0(o);
		}
	} else {
		if (!flag || (!((o !== null) && 
					destinationType.IsAssignableFrom(JSIL.GetType(o))) && 
				(o || 
					!$asm02.MS.Internal.Data.DefaultValueConverter.AcceptsNull(destinationType)))) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [System.String.Format(System.Globalization.CultureInfo.InvariantCulture, $asm02.System.Windows.Resx.GetString$2("ValueConverter_CantConvertType"), [(o === null) ? "'null'" : JSIL.GetType(o).toString(), destinationType.toString()])]);
		}
		result = o;
	}
	return result;
};
$asm02.MS.Internal.Data.DefaultValueConverter.prototype._sourceType = null;
$asm02.MS.Internal.Data.DefaultValueConverter.prototype._targetType = null;
$asm02.MS.Internal.Data.DefaultValueConverter.prototype._typeConverter = null;
$asm02.MS.Internal.Data.DefaultValueConverter.prototype._shouldConvertFrom = false;
$asm02.MS.Internal.Data.DefaultValueConverter.prototype._shouldConvertTo = false;

$asm02.MS.Internal.Data.DynamicValueConverter.prototype._ctor = function (targetToSourceNeeded) {
	System.Object.prototype._ctor.call(this);
	this._targetToSourceNeeded = targetToSourceNeeded;
};
$asm02.MS.Internal.Data.DynamicValueConverter.prototype.Convert = function (value, targetType, parameter, culture) {
	if (value !== null) {
		var type = (JSIL.GetType(value));
		this.EnsureConverter(type, targetType);
		if (this._converter === null) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [System.String.Format(System.Globalization.CultureInfo.InvariantCulture, $asm02.System.Windows.Resx.GetString$2("ValueConverter_CantConvertType"), [type.toString(), targetType.toString()])]);
		}
		value = this._converter.IValueConverter_Convert(value, targetType, parameter, culture);
	} else {
		if (!$asm02.MS.Internal.Data.DefaultValueConverter.AcceptsNull(targetType)) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [System.String.Format(System.Globalization.CultureInfo.InvariantCulture, $asm02.System.Windows.Resx.GetString$2("ValueConverter_CantConvertType"), ["null", targetType.toString()])]);
		}
		value = null;
	}
	return value;
};
$asm02.MS.Internal.Data.DynamicValueConverter.prototype.ConvertBack = function (value, sourceType, parameter, culture) {
	if (value !== null) {
		var type = (JSIL.GetType(value));
		this.EnsureConverter(sourceType, type);
		if (this._converter === null) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [System.String.Format(System.Globalization.CultureInfo.InvariantCulture, $asm02.System.Windows.Resx.GetString$2("ValueConverter_CantConvertType"), [type.toString(), sourceType.toString()])]);
		}
		value = this._converter.IValueConverter_ConvertBack(value, sourceType, parameter, culture);
	} else {
		if (!$asm02.MS.Internal.Data.DefaultValueConverter.AcceptsNull(sourceType)) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [System.String.Format(System.Globalization.CultureInfo.InvariantCulture, $asm02.System.Windows.Resx.GetString$2("ValueConverter_CantConvertType"), ["'null'", sourceType.toString()])]);
		}
		value = null;
	}
	return value;
};
$asm02.MS.Internal.Data.DynamicValueConverter.prototype.EnsureConverter = function (sourceType, targetType) {
	if (!((this._sourceType === sourceType) && (this._targetType === targetType))) {
		this._converter = $asm02.MS.Internal.Data.DefaultValueConverter.Create(sourceType, targetType, this._targetToSourceNeeded);
		this._sourceType = sourceType;
		this._targetType = targetType;
	}
};
$asm02.MS.Internal.Data.DynamicValueConverter.prototype._sourceType = null;
$asm02.MS.Internal.Data.DynamicValueConverter.prototype._targetType = null;
$asm02.MS.Internal.Data.DynamicValueConverter.prototype._converter = null;
$asm02.MS.Internal.Data.DynamicValueConverter.prototype._targetToSourceNeeded = false;

$asm02.MS.Internal.Data.InterfaceConverter.prototype._ctor = function (sourceType, targetType) {
	System.Object.prototype._ctor.call(this);
	this._sourceType = sourceType;
	this._targetType = targetType;
};
$asm02.MS.Internal.Data.InterfaceConverter.prototype.Convert = function (o, type, parameter, culture) {
	return this.ConvertTo(o, this._targetType);
};
$asm02.MS.Internal.Data.InterfaceConverter.prototype.ConvertBack = function (o, type, parameter, culture) {
	return this.ConvertTo(o, this._sourceType);
};
$asm02.MS.Internal.Data.InterfaceConverter.prototype.ConvertTo = function (o, type) {
	if (!type.IsInstanceOfType(o)) {
		return null;
	}
	return o;
};
$asm02.MS.Internal.Data.InterfaceConverter.prototype._sourceType = null;
$asm02.MS.Internal.Data.InterfaceConverter.prototype._targetType = null;

$asm02.MS.Internal.Data.ObjectSourceConverter.prototype._ctor = function (targetType) {
	$asm02.MS.Internal.Data.DefaultValueConverter.prototype._ctor.call(
		this, null, 
		System.Object, 
		targetType, 
		true, 
		false
	);
};
$asm02.MS.Internal.Data.ObjectSourceConverter.prototype.Convert = function (o, type, parameter, culture) {
	if (!(!((o !== null) && 
				this._targetType.IsAssignableFrom(JSIL.GetType(o))) && (o || 
				!$asm02.MS.Internal.Data.DefaultValueConverter.AcceptsNull(this._targetType)))) {
		return o;
	}
	if (this._targetType === System.String) {
		return o.toString();
	}
	throw JSIL.New(System.InvalidOperationException, "_ctor$1", [System.String.Format(System.Globalization.CultureInfo.InvariantCulture, $asm02.System.Windows.Resx.GetString$2("ValueConverter_CantConvertType"), [type.toString(), this._targetType.toString()])]);
};
$asm02.MS.Internal.Data.ObjectSourceConverter.prototype.ConvertBack = function (o, type, parameter, culture) {
	return o;
};

$asm02.MS.Internal.Data.ObjectTargetConverter.prototype._ctor = function (sourceType) {
	$asm02.MS.Internal.Data.DefaultValueConverter.prototype._ctor.call(
		this, null, 
		sourceType, 
		System.Object, 
		true, 
		false
	);
};
$asm02.MS.Internal.Data.ObjectTargetConverter.prototype.Convert = function (o, type, parameter, culture) {
	return o;
};
$asm02.MS.Internal.Data.ObjectTargetConverter.prototype.ConvertBack = function (o, type, parameter, culture) {
	if (!(o || !$asm02.MS.Internal.Data.DefaultValueConverter.AcceptsNull(this._sourceType))) {
		return o;
	}
	if (!((o === null) || !this._sourceType.IsAssignableFrom(JSIL.GetType(o)))) {
		return o;
	}
	if (this._sourceType === System.String) {
		return o.toString();
	}
	throw JSIL.New(System.InvalidOperationException, "_ctor$1", [System.String.Format(System.Globalization.CultureInfo.InvariantCulture, $asm02.System.Windows.Resx.GetString$2("ValueConverter_CantConvertType"), [type.toString(), this._sourceType.toString()])]);
};

System.Windows.Data.PropertyGroupDescription.prototype._ctor$0 = function () {
	this._stringComparison = System.StringComparison.Ordinal;
	System.ComponentModel.GroupDescription.prototype._ctor.call(this);
};
System.Windows.Data.PropertyGroupDescription.prototype._ctor$1 = function (propertyName) {
	this._stringComparison = System.StringComparison.Ordinal;
	System.ComponentModel.GroupDescription.prototype._ctor.call(this);
	this.UpdatePropertyName(propertyName);
};
System.Windows.Data.PropertyGroupDescription.prototype._ctor$2 = function (propertyName, converter) {
	this._stringComparison = System.StringComparison.Ordinal;
	System.ComponentModel.GroupDescription.prototype._ctor.call(this);
	this.UpdatePropertyName(propertyName);
	this._converter = converter;
};
System.Windows.Data.PropertyGroupDescription.prototype._ctor$3 = function (propertyName, converter, stringComparison) {
	this._stringComparison = System.StringComparison.Ordinal;
	System.ComponentModel.GroupDescription.prototype._ctor.call(this);
	this.UpdatePropertyName(propertyName);
	this._converter = converter;
	this._stringComparison = stringComparison;
};
System.Windows.Data.PropertyGroupDescription.prototype.get_PropertyName = function () {
	return this._propertyName;
};
System.Windows.Data.PropertyGroupDescription.prototype.set_PropertyName = function (value) {
	this.UpdatePropertyName(value);
	this.OnPropertyChanged("PropertyName");
};
System.Windows.Data.PropertyGroupDescription.prototype.get_Converter = function () {
	return this._converter;
};
System.Windows.Data.PropertyGroupDescription.prototype.set_Converter = function (value) {
	this._converter = value;
	this.OnPropertyChanged("Converter");
};
System.Windows.Data.PropertyGroupDescription.prototype.get_StringComparison = function () {
	return this._stringComparison;
};
System.Windows.Data.PropertyGroupDescription.prototype.set_StringComparison = function (value) {
	this._stringComparison = value;
	this.OnPropertyChanged("StringComparison");
};
System.Windows.Data.PropertyGroupDescription.prototype.GroupNameFromItem = function (item, level, culture) {
	if (System.String.IsNullOrEmpty(this.PropertyName)) {
		var obj = item;
	} else if (item !== null) {
		var listener = this._propertyPath.GetListener(item, false, null);
		if (listener.FullPathExists) {
			obj = listener.LeafValue;
		} else {
			obj = null;
		}
	} else {
		obj = null;
	}
	if (this.Converter !== null) {
		obj = this.Converter.IValueConverter_Convert(obj, System.Object, level, culture);
	}
	return obj;
};
System.Windows.Data.PropertyGroupDescription.prototype.NamesMatch = function (groupName, itemName) {
	var text = JSIL.TryCast(groupName, System.String);
	var text2 = JSIL.TryCast(itemName, System.String);
	if (!((text === null) || (text2 === null))) {
		return System.String.Equals$1(text, text2, this.StringComparison);
	}
	return System.Object.Equals(groupName, itemName);
};
System.Windows.Data.PropertyGroupDescription.prototype.UpdatePropertyName = function (propertyName) {
	this._propertyName = propertyName;
	this._propertyPath = !System.String.IsNullOrEmpty(propertyName) ? JSIL.New(System.Windows.PropertyPath, "_ctor$0", [propertyName, JSIL.Array.New(System.Object, 0)]) : null;
	if (this._propertyPath !== null) {
		this._propertyPath.ParsePathInternal(false);
	}
};
System.Windows.Data.PropertyGroupDescription.prototype.OnPropertyChanged = function (propertyName) {
	this.OnPropertyChanged(new System.ComponentModel.PropertyChangedEventArgs(propertyName));
};
JSIL.OverloadedMethod(System.Windows.Data.PropertyGroupDescription.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.String]], 
		["_ctor$2", [System.String, System.Windows.Data.IValueConverter]], 
		["_ctor$3", [System.String, System.Windows.Data.IValueConverter, System.StringComparison]]
	]);
JSIL.MakeProperty(System.Windows.Data.PropertyGroupDescription.prototype, "PropertyName", 
	System.Windows.Data.PropertyGroupDescription.prototype.get_PropertyName, System.Windows.Data.PropertyGroupDescription.prototype.set_PropertyName);
JSIL.MakeProperty(System.Windows.Data.PropertyGroupDescription.prototype, "Converter", 
	System.Windows.Data.PropertyGroupDescription.prototype.get_Converter, System.Windows.Data.PropertyGroupDescription.prototype.set_Converter);
JSIL.MakeProperty(System.Windows.Data.PropertyGroupDescription.prototype, "StringComparison", 
	System.Windows.Data.PropertyGroupDescription.prototype.get_StringComparison, System.Windows.Data.PropertyGroupDescription.prototype.set_StringComparison);
System.Windows.Data.PropertyGroupDescription.prototype._propertyName = null;
System.Windows.Data.PropertyGroupDescription.prototype._propertyPath = null;
System.Windows.Data.PropertyGroupDescription.prototype._converter = null;
System.Windows.Data.PropertyGroupDescription.prototype._stringComparison = 0;

$asm02.MS.Internal.Data.SourceDefaultValueConverter.prototype._ctor = function (typeConverter, sourceType, targetType, shouldConvertFrom, shouldConvertTo) {
	$asm02.MS.Internal.Data.DefaultValueConverter.prototype._ctor.call(
		this, typeConverter, 
		sourceType, 
		targetType, 
		shouldConvertFrom, 
		shouldConvertTo
	);
};
$asm02.MS.Internal.Data.SourceDefaultValueConverter.prototype.Convert = function (o, type, parameter, culture) {
	return $asm02.MS.Internal.Data.DefaultValueConverter.prototype.ConvertTo.call(this, o, this._targetType, culture);
};
$asm02.MS.Internal.Data.SourceDefaultValueConverter.prototype.ConvertBack = function (o, type, parameter, culture) {
	return $asm02.MS.Internal.Data.DefaultValueConverter.prototype.ConvertFrom.call(this, o, this._sourceType, culture);
};

$asm02.MS.Internal.Data.SystemConvertConverter.prototype._ctor = function (sourceType, targetType) {
	System.Object.prototype._ctor.call(this);
	this._sourceType = sourceType;
	this._targetType = targetType;
};
$asm02.MS.Internal.Data.SystemConvertConverter.prototype.Convert = function (o, type, parameter, culture) {
	return System.Convert.ChangeType$1(o, this._targetType, culture);
};
$asm02.MS.Internal.Data.SystemConvertConverter.prototype.ConvertBack = function (o, type, parameter, culture) {
	return System.Convert.ChangeType$1(o, this._sourceType, culture);
};
$asm02.MS.Internal.Data.SystemConvertConverter.CanConvert = function (sourceType, targetType) {
	if (sourceType === System.DateTime) {
		return (targetType === System.String);
	}
	if (targetType === System.DateTime) {
		return (sourceType === System.String);
	}
	if (sourceType === System.Char) {
		return $asm02.MS.Internal.Data.SystemConvertConverter.CanConvertChar(targetType);
	}
	if (targetType === System.Char) {
		return $asm02.MS.Internal.Data.SystemConvertConverter.CanConvertChar(sourceType);
	}
__loop0__: 
	for (var i = 0; i < $asm02.MS.Internal.Data.SystemConvertConverter.SupportedTypes.length; ++i) {
		if (sourceType === $asm02.MS.Internal.Data.SystemConvertConverter.SupportedTypes[i]) {
		__loop2__: 
			for (++i; i < $asm02.MS.Internal.Data.SystemConvertConverter.SupportedTypes.length; ++i) {
				if (targetType === $asm02.MS.Internal.Data.SystemConvertConverter.SupportedTypes[i]) {
					return true;
				}
			}
		} else if (targetType === $asm02.MS.Internal.Data.SystemConvertConverter.SupportedTypes[i]) {
		__loop1__: 
			for (++i; i < $asm02.MS.Internal.Data.SystemConvertConverter.SupportedTypes.length; ++i) {
				if (sourceType === $asm02.MS.Internal.Data.SystemConvertConverter.SupportedTypes[i]) {
					return true;
				}
			}
		}
	}
	return false;
};
$asm02.MS.Internal.Data.SystemConvertConverter.CanConvertChar = function (type) {
__loop0__: 
	for (var i = 0; i < $asm02.MS.Internal.Data.SystemConvertConverter.CharSupportedTypes.length; ++i) {
		if (type === $asm02.MS.Internal.Data.SystemConvertConverter.CharSupportedTypes[i]) {
			return true;
		}
	}
	return false;
};
$asm02.MS.Internal.Data.SystemConvertConverter.prototype._sourceType = null;
$asm02.MS.Internal.Data.SystemConvertConverter.prototype._targetType = null;
$asm02.MS.Internal.Data.SystemConvertConverter.SupportedTypes = null;
$asm02.MS.Internal.Data.SystemConvertConverter.CharSupportedTypes = null;
$asm02.MS.Internal.Data.SystemConvertConverter._cctor = function () {
	$asm02.MS.Internal.Data.SystemConvertConverter.SupportedTypes = JSIL.Array.New(System.Type, [System.String, System.Int32, System.Int64, System.Single, System.Double, System.Decimal, System.Boolean, System.Byte, System.Int16, System.UInt32, System.UInt64, System.UInt16, System.SByte]);
	$asm02.MS.Internal.Data.SystemConvertConverter.CharSupportedTypes = JSIL.Array.New(System.Type, [System.String, System.Int32, System.Int64, System.Byte, System.Int16, System.UInt32, System.UInt64, System.UInt16, System.SByte]);
};

$asm02.MS.Internal.Data.TargetDefaultValueConverter.prototype._ctor = function (typeConverter, sourceType, targetType, shouldConvertFrom, shouldConvertTo) {
	$asm02.MS.Internal.Data.DefaultValueConverter.prototype._ctor.call(
		this, typeConverter, 
		sourceType, 
		targetType, 
		shouldConvertFrom, 
		shouldConvertTo
	);
};
$asm02.MS.Internal.Data.TargetDefaultValueConverter.prototype.Convert = function (o, type, parameter, culture) {
	return $asm02.MS.Internal.Data.DefaultValueConverter.prototype.ConvertFrom.call(this, o, this._targetType, culture);
};
$asm02.MS.Internal.Data.TargetDefaultValueConverter.prototype.ConvertBack = function (o, type, parameter, culture) {
	return $asm02.MS.Internal.Data.DefaultValueConverter.prototype.ConvertTo.call(this, o, this._sourceType, culture);
};

System.Windows.Data.CollectionViewSource.prototype._ctor = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 322);
	this._sort = new System.ComponentModel.SortDescriptionCollection();
	this._sort.INotifyCollectionChanged_add_CollectionChanged(JSIL.Delegate.New("System.Collections.Specialized.NotifyCollectionChangedEventHandler", this, System.Windows.Data.CollectionViewSource.prototype.OnForwardedCollectionChanged));
	this._groupBy = JSIL.New(System.Collections.ObjectModel.ObservableCollection$b1.Of(System.ComponentModel.GroupDescription), "_ctor$0", []);
	this._groupBy.INotifyCollectionChanged_add_CollectionChanged(JSIL.Delegate.New("System.Collections.Specialized.NotifyCollectionChangedEventHandler", this, System.Windows.Data.CollectionViewSource.prototype.OnForwardedCollectionChanged));
};
System.Windows.Data.CollectionViewSource.prototype.get_View = function () {
	return System.Windows.Data.CollectionViewSource.GetOriginalView(this.CollectionView);
};
System.Windows.Data.CollectionViewSource.prototype.get_Source = function () {
	return System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Data.CollectionViewSource.SourceProperty);
};
System.Windows.Data.CollectionViewSource.prototype.set_Source = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Data.CollectionViewSource.SourceProperty, value);
};
System.Windows.Data.CollectionViewSource.OnSourceChanged = function (d, e) {
	var collectionViewSource = JSIL.Cast(d, System.Windows.Data.CollectionViewSource);
	if (!System.Windows.Data.CollectionViewSource.IsSourceValid(e.NewValue)) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("ViewManager_UnsupportedSourceType")]);
	}
	collectionViewSource.OnSourceChanged(e.OldValue, e.NewValue);
	collectionViewSource.EnsureView$0();
};
System.Windows.Data.CollectionViewSource.IsSourceValid = function (o) {
	return (!((o !== null) && 
			(JSIL.TryCast(o, System.Collections.IEnumerable) === null)) && !JSIL.CheckType(o, System.ComponentModel.ICollectionView));
};
System.Windows.Data.CollectionViewSource.prototype.OnSourceChanged = function (oldSource, newSource) {
};
System.Windows.Data.CollectionViewSource.prototype.OnCollectionViewTypeChanged = function (oldCollectionViewType, newCollectionViewType) {
};
System.Windows.Data.CollectionViewSource.prototype.get_Culture = function () {
	return this._culture;
};
System.Windows.Data.CollectionViewSource.prototype.set_Culture = function (value) {
	this._culture = value;
	this.OnForwardedPropertyChanged();
};
System.Windows.Data.CollectionViewSource.prototype.get_SortDescriptions = function () {
	return this._sort;
};
System.Windows.Data.CollectionViewSource.prototype.get_GroupDescriptions = function () {
	return this._groupBy;
};
System.Windows.Data.CollectionViewSource.prototype.add_Filter = function (value) {
	var filterEventHandler = this._filterHandlers;
	if (filterEventHandler !== null) {
		filterEventHandler = System.Delegate.Combine(filterEventHandler, value);
	} else {
		filterEventHandler = value;
	}
	this._filterHandlers = filterEventHandler;
	this.OnForwardedPropertyChanged();
};
System.Windows.Data.CollectionViewSource.prototype.remove_Filter = function (value) {
	var filterEventHandler = this._filterHandlers;
	if (filterEventHandler !== null) {
		filterEventHandler = System.Delegate.Remove(filterEventHandler, value);
		if (filterEventHandler === null) {
			this._filterHandlers = null;
		} else {
			this._filterHandlers = filterEventHandler;
		}
	}
	this.OnForwardedPropertyChanged();
};
System.Windows.Data.CollectionViewSource.prototype.DeferRefresh = function () {
	return new $asm02.System.Windows.Data.CollectionViewSource.DeferHelper(this);
};
System.Windows.Data.CollectionViewSource.prototype.ISupportInitialize_BeginInit = function () {
	this._isInitializing = true;
};
System.Windows.Data.CollectionViewSource.prototype.ISupportInitialize_EndInit = function () {
	this._isInitializing = false;
	this.EnsureView$0();
};
System.Windows.Data.CollectionViewSource.prototype.get_CollectionView = function () {
	var collectionView = JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Data.CollectionViewSource.ViewProperty), System.ComponentModel.ICollectionView);
	if (!((collectionView === null) || this._isViewInitialized)) {
		var viewRecord = $asm02.MS.Internal.ViewManager.Current.GetViewRecord(this.Source, this);
		collectionView.ICollectionView_MoveCurrentToFirst();
		viewRecord.IsInitialized = true;
		this._isViewInitialized = true;
	}
	return collectionView;
};
System.Windows.Data.CollectionViewSource.IsValidSourceForView = function (o) {
	return ((o === null) || JSIL.CheckType(o, System.Collections.IEnumerable));
};
System.Windows.Data.CollectionViewSource.prototype.EnsureView$0 = function () {
	this.EnsureView$1(this.Source);
};
System.Windows.Data.CollectionViewSource.prototype.EnsureView$1 = function (source) {
	if (!(!this._isInitializing && (this._deferLevel <= 0))) {
		return;
	}
	if (source !== null) {
		var viewRecord = $asm02.MS.Internal.ViewManager.Current.GetViewRecord(source, this);
		var collectionView = viewRecord.View;
		this._isViewInitialized = viewRecord.IsInitialized;
		if (this._version !== viewRecord.Version) {
			this.ApplyPropertiesToView(collectionView);
			viewRecord.Version = this._version;
		}
	} else {
		collectionView = null;
	}
	System.Windows.DependencyObject.prototype.SetValueInternal$1.call(this, System.Windows.Data.CollectionViewSource.ViewProperty, collectionView, true);
};
System.Windows.Data.CollectionViewSource.prototype.ApplyPropertiesToView = function (view) {
	if (!((view !== null) && (this._deferLevel <= 0))) {
		return;
	}
	var disposable = view.ICollectionView_DeferRefresh();
	try {
		if (this.Culture !== null) {
			view.ICollectionView_Culture = this.Culture;
		}
		if (view.ICollectionView_CanSort) {
			view.ICollectionView_SortDescriptions.Clear();
			var i = 0;
			var count = this.SortDescriptions.Count;
		__loop0__: 
			while (i < count) {
				view.ICollectionView_SortDescriptions.Add(this.SortDescriptions.get_Item(i).MemberwiseClone());
				++i;
			}
		} else if (this.SortDescriptions.Count > 0) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("CollectionViewSource_CannotShape", ["CollectionViewSource_Sorting"])]);
		}
		if (this._filterHandlers !== null) {
			var predicate = this.FilterWrapper;
		} else {
			predicate = null;
		}
		if (view.ICollectionView_CanFilter) {
			view.ICollectionView_Filter = predicate;
		} else if (predicate !== null) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("CollectionViewSource_CannotShape", ["CollectionViewSource_Filtering"])]);
		}
		if (view.ICollectionView_CanGroup) {
			view.ICollectionView_GroupDescriptions.Clear();
			i = 0;
			count = this.GroupDescriptions.Count;
		__loop1__: 
			while (i < count) {
				view.ICollectionView_GroupDescriptions.Add(this.GroupDescriptions.get_Item(i));
				++i;
			}
		} else if (this.GroupDescriptions.Count > 0) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("CollectionViewSource_CannotShape", ["CollectionViewSource_Grouping"])]);
		}
	} finally {
		if (disposable !== null) {
			disposable.IDisposable_Dispose();
		}
	}
};
System.Windows.Data.CollectionViewSource.GetOriginalView = function (view) {
	var collectionViewProxy = JSIL.TryCast(view, $asm02.MS.Internal.CollectionViewProxy);
__loop0__: 
	while (collectionViewProxy) {
		view = collectionViewProxy.ProxiedView;
		collectionViewProxy = JSIL.TryCast(view, $asm02.MS.Internal.CollectionViewProxy);
	}
	return view;
};
System.Windows.Data.CollectionViewSource.prototype.get_FilterWrapper = function () {
	if (this._filterStub === null) {
		this._filterStub = new $asm02.System.Windows.Data.CollectionViewSource.FilterStub(this);
	}
	return this._filterStub.FilterWrapper;
};
System.Windows.Data.CollectionViewSource.prototype.WrapFilter = function (item) {
	var filterEventArgs = new System.Windows.Data.FilterEventArgs(item);
	var filterHandlers = this._filterHandlers;
	if (filterHandlers !== null) {
		filterHandlers(this, filterEventArgs);
	}
	return filterEventArgs.Accepted;
};
System.Windows.Data.CollectionViewSource.prototype.OnForwardedCollectionChanged = function (sender, e) {
	this.OnForwardedPropertyChanged();
};
System.Windows.Data.CollectionViewSource.prototype.OnForwardedPropertyChanged = function () {
	++this._version;
	this.ApplyPropertiesToView(this.View);
};
System.Windows.Data.CollectionViewSource.prototype.BeginDefer = function () {
	++this._deferLevel;
};
System.Windows.Data.CollectionViewSource.prototype.EndDefer = function () {
	if (--this._deferLevel === 0) {
		this.EnsureView$0();
	}
};
JSIL.OverloadedMethod(System.Windows.Data.CollectionViewSource.prototype, "EnsureView", [
		["EnsureView$0", []], 
		["EnsureView$1", [System.Object]]
	]);
JSIL.MakeProperty(System.Windows.Data.CollectionViewSource.prototype, "View", 
	System.Windows.Data.CollectionViewSource.prototype.get_View, null);
JSIL.MakeProperty(System.Windows.Data.CollectionViewSource.prototype, "Source", 
	System.Windows.Data.CollectionViewSource.prototype.get_Source, System.Windows.Data.CollectionViewSource.prototype.set_Source);
JSIL.MakeProperty(System.Windows.Data.CollectionViewSource.prototype, "Culture", 
	System.Windows.Data.CollectionViewSource.prototype.get_Culture, System.Windows.Data.CollectionViewSource.prototype.set_Culture);
JSIL.MakeProperty(System.Windows.Data.CollectionViewSource.prototype, "SortDescriptions", 
	System.Windows.Data.CollectionViewSource.prototype.get_SortDescriptions, null);
JSIL.MakeProperty(System.Windows.Data.CollectionViewSource.prototype, "GroupDescriptions", 
	System.Windows.Data.CollectionViewSource.prototype.get_GroupDescriptions, null);
JSIL.MakeProperty(System.Windows.Data.CollectionViewSource.prototype, "CollectionView", 
	System.Windows.Data.CollectionViewSource.prototype.get_CollectionView, null);
JSIL.MakeProperty(System.Windows.Data.CollectionViewSource.prototype, "FilterWrapper", 
	System.Windows.Data.CollectionViewSource.prototype.get_FilterWrapper, null);
System.Windows.Data.CollectionViewSource.ViewProperty = null;
System.Windows.Data.CollectionViewSource.SourceProperty = null;
System.Windows.Data.CollectionViewSource.prototype._version = 0;
System.Windows.Data.CollectionViewSource.prototype._deferLevel = 0;
System.Windows.Data.CollectionViewSource.prototype._sort = null;
System.Windows.Data.CollectionViewSource.prototype._groupBy = null;
System.Windows.Data.CollectionViewSource.prototype._isInitializing = false;
System.Windows.Data.CollectionViewSource.prototype._isViewInitialized = false;
System.Windows.Data.CollectionViewSource.prototype._filterHandlers = null;
System.Windows.Data.CollectionViewSource.prototype._filterStub = null;
System.Windows.Data.CollectionViewSource.prototype._culture = null;
System.Windows.Data.CollectionViewSource._cctor = function () {
	System.Windows.Data.CollectionViewSource.ViewProperty = System.Windows.DependencyProperty.RegisterReadOnly("View", System.ComponentModel.ICollectionView, System.Windows.Data.CollectionViewSource, JSIL.New(System.Windows.PropertyMetadata, "_ctor$1", [null]));
	System.Windows.Data.CollectionViewSource.SourceProperty = System.Windows.DependencyProperty.Register$0("Source", System.Object, System.Windows.Data.CollectionViewSource, JSIL.New(System.Windows.PropertyMetadata, "_ctor$2", [null, JSIL.Delegate.New("System.Windows.PropertyChangedCallback", null, System.Windows.Data.CollectionViewSource.OnSourceChanged)]));
};

$asm02.System.Windows.Data.CollectionViewSource.DeferHelper.prototype._ctor = function (target) {
	System.Object.prototype._ctor.call(this);
	this._target = target;
	this._target.BeginDefer();
};
$asm02.System.Windows.Data.CollectionViewSource.DeferHelper.prototype.Dispose = function () {
	if (this._target !== null) {
		this._target = null;
		this._target.EndDefer();
	}
	System.GC.SuppressFinalize(this);
};
$asm02.System.Windows.Data.CollectionViewSource.DeferHelper.prototype._target = null;

$asm02.System.Windows.Data.CollectionViewSource.FilterStub.prototype._ctor = function (parent) {
	System.Object.prototype._ctor.call(this);
	this._parent = JSIL.New(System.WeakReference, "_ctor$1", [parent]);
	this._filterWrapper = JSIL.Delegate.New("System.Predicate`1[System.Object]", this, $asm02.System.Windows.Data.CollectionViewSource.FilterStub.prototype.WrapFilter);
};
$asm02.System.Windows.Data.CollectionViewSource.FilterStub.prototype.get_FilterWrapper = function () {
	return this._filterWrapper;
};
$asm02.System.Windows.Data.CollectionViewSource.FilterStub.prototype.WrapFilter = function (item) {
	var collectionViewSource = JSIL.Cast(this._parent.Target, System.Windows.Data.CollectionViewSource);
	return ((collectionViewSource === null) || collectionViewSource.WrapFilter(item));
};
JSIL.MakeProperty($asm02.System.Windows.Data.CollectionViewSource.FilterStub.prototype, "FilterWrapper", 
	$asm02.System.Windows.Data.CollectionViewSource.FilterStub.prototype.get_FilterWrapper, null);
$asm02.System.Windows.Data.CollectionViewSource.FilterStub.prototype._parent = null;
$asm02.System.Windows.Data.CollectionViewSource.FilterStub.prototype._filterWrapper = null;

System.Windows.Data.FilterEventArgs.prototype._ctor = function (item) {
	System.EventArgs.prototype._ctor.call(this);
	this._item = item;
	this._accepted = true;
};
System.Windows.Data.FilterEventArgs.prototype.get_Item = function () {
	return this._item;
};
System.Windows.Data.FilterEventArgs.prototype.get_Accepted = function () {
	return this._accepted;
};
System.Windows.Data.FilterEventArgs.prototype.set_Accepted = function (value) {
	this._accepted = value;
};
JSIL.MakeProperty(System.Windows.Data.FilterEventArgs.prototype, "Item", 
	System.Windows.Data.FilterEventArgs.prototype.get_Item, null);
JSIL.MakeProperty(System.Windows.Data.FilterEventArgs.prototype, "Accepted", 
	System.Windows.Data.FilterEventArgs.prototype.get_Accepted, System.Windows.Data.FilterEventArgs.prototype.set_Accepted);
System.Windows.Data.FilterEventArgs.prototype._item = null;
System.Windows.Data.FilterEventArgs.prototype._accepted = false;

$asm02.System.Windows.Data.ListCollectionView.prototype._ctor = function (list) {
	this._newItem = $asm02.System.Windows.Data.CollectionView.NoNewItem;
	$asm02.System.Windows.Data.CollectionView.prototype._ctor.call(this, list);
	this._internalList = list;
	this.RefreshCanAddNew();
	this.RefreshCanRemove();
	this.RefreshCanCancelEdit();
	if (this.InternalList.ICollection_Count === 0) {
		$asm02.System.Windows.Data.CollectionView.prototype.SetCurrent$1.call(this, null, -1, 0);
	} else {
		$asm02.System.Windows.Data.CollectionView.prototype.SetCurrent$1.call(this, this.InternalList.IList_get_Item(0), 0, 1);
	}
	this._group = new $asm02.MS.Internal.CollectionViewGroupRoot(this);
	this._group.add_GroupDescriptionChanged(JSIL.Delegate.New("System.EventHandler", this, $asm02.System.Windows.Data.ListCollectionView.prototype.OnGroupDescriptionChanged));
	this._group.INotifyCollectionChanged_add_CollectionChanged(JSIL.Delegate.New("System.Collections.Specialized.NotifyCollectionChangedEventHandler", this, $asm02.System.Windows.Data.ListCollectionView.prototype.OnGroupChanged));
	this._group.GroupDescriptions.INotifyCollectionChanged_add_CollectionChanged(JSIL.Delegate.New("System.Collections.Specialized.NotifyCollectionChangedEventHandler", this, $asm02.System.Windows.Data.ListCollectionView.prototype.OnGroupByChanged));
};
$asm02.System.Windows.Data.ListCollectionView.prototype.RefreshOverride = function () {
	var currentItem = this.CurrentItem;
	var num = this.IsEmpty ? -1 : this.CurrentPosition;
	var isCurrentAfterLast = this.IsCurrentAfterLast;
	var isCurrentBeforeFirst = this.IsCurrentBeforeFirst;
	$asm02.System.Windows.Data.CollectionView.prototype.OnCurrentChanging$0.call(this);
	var list = JSIL.TryCast(this.SourceCollection, System.Collections.IList);
	this.PrepareSortAndFilter(list);
	if (!this.UsesLocalArray) {
		this._internalList = list;
	} else {
		this._internalList = this.PrepareLocalArray(list);
	}
	this.PrepareGroups();
	if (!(!isCurrentBeforeFirst && !this.IsEmpty)) {
		$asm02.System.Windows.Data.CollectionView.prototype.SetCurrent$0.call(this, null, -1);
	} else if (isCurrentAfterLast) {
		$asm02.System.Windows.Data.CollectionView.prototype.SetCurrent$0.call(this, null, this.InternalCount);
	} else {
		var num2 = this.InternalIndexOf(currentItem);
		if (num2 < 0) {
			$asm02.System.Windows.Data.CollectionView.prototype.SetCurrent$0.call(this, this.InternalItemAt(0), 0);
		} else {
			$asm02.System.Windows.Data.CollectionView.prototype.SetCurrent$0.call(this, currentItem, num2);
		}
	}
	this.OnCollectionChanged$0(JSIL.New(System.Collections.Specialized.NotifyCollectionChangedEventArgs, "_ctor$0", [System.Collections.Specialized.NotifyCollectionChangedAction.Reset]));
	this.RaiseCurrencyChanges(
		true, 
		(this.CurrentItem !== currentItem), 
		(this.CurrentPosition !== num), 
		(this.IsCurrentBeforeFirst !== isCurrentBeforeFirst), 
		(this.IsCurrentAfterLast !== isCurrentAfterLast)
	);
};
$asm02.System.Windows.Data.ListCollectionView.prototype.Contains = function (item) {
	$asm02.System.Windows.Data.CollectionView.prototype.VerifyRefreshNotDeferred.call(this);
	return this.InternalContains(item);
};
$asm02.System.Windows.Data.ListCollectionView.prototype.MoveCurrentToPosition = function (position) {
	$asm02.System.Windows.Data.CollectionView.prototype.VerifyRefreshNotDeferred.call(this);
	if (!((position >= -1) && (position <= this.InternalCount))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["position"]);
	}
	if (!(((position === this.CurrentPosition) && 
				$asm02.System.Windows.Data.CollectionView.prototype.get_IsCurrentInSync.call(this)) || !$asm02.System.Windows.Data.CollectionView.prototype.OKToChangeCurrent.call(this))) {
		var newItem = ((0 <= position) && 
			(position < this.InternalCount)) ? this.InternalItemAt(position) : null;
		var isCurrentAfterLast = this.IsCurrentAfterLast;
		var isCurrentBeforeFirst = this.IsCurrentBeforeFirst;
		$asm02.System.Windows.Data.CollectionView.prototype.SetCurrent$0.call(this, newItem, position);
		this.RaiseCurrencyChanges(
			true, 
			true, 
			true, 
			(this.IsCurrentBeforeFirst !== isCurrentBeforeFirst), 
			(this.IsCurrentAfterLast !== isCurrentAfterLast)
		);
	}
	return this.IsCurrentInView;
};
$asm02.System.Windows.Data.ListCollectionView.prototype.get_CanGroup = function () {
	return true;
};
$asm02.System.Windows.Data.ListCollectionView.prototype.get_GroupDescriptions = function () {
	return this._group.GroupDescriptions;
};
$asm02.System.Windows.Data.ListCollectionView.prototype.get_Groups = function () {
	if (!this.IsGrouping) {
		return null;
	}
	return this._group.Items;
};
$asm02.System.Windows.Data.ListCollectionView.prototype.PassesFilter = function (item) {
	return ((this.ActiveFilter === null) || this.ActiveFilter(item));
};
$asm02.System.Windows.Data.ListCollectionView.prototype.IndexOf = function (item) {
	$asm02.System.Windows.Data.CollectionView.prototype.VerifyRefreshNotDeferred.call(this);
	return this.InternalIndexOf(item);
};
$asm02.System.Windows.Data.ListCollectionView.prototype.GetItemAt = function (index) {
	$asm02.System.Windows.Data.CollectionView.prototype.VerifyRefreshNotDeferred.call(this);
	return this.InternalItemAt(index);
};
$asm02.System.Windows.Data.ListCollectionView.prototype.IComparer$b1_Compare = function (o1, o2) {
	return this.Compare(o1, o2);
};
$asm02.System.Windows.Data.ListCollectionView.prototype.Compare = function (o1, o2) {
	if (this.IsGrouping) {
		var num = this.InternalIndexOf(o1);
		var num2 = this.InternalIndexOf(o2);
		return (num - num2);
	}
	if (this.ActiveComparer !== null) {
		return this.ActiveComparer.IComparer$b1_Compare(o1, o2);
	}
	var num3 = this.InternalList.IList_IndexOf(o1);
	var num4 = this.InternalList.IList_IndexOf(o2);
	return (num3 - num4);
};
$asm02.System.Windows.Data.ListCollectionView.prototype.GetEnumerator = function () {
	$asm02.System.Windows.Data.CollectionView.prototype.VerifyRefreshNotDeferred.call(this);
	return this.InternalGetEnumerator();
};
$asm02.System.Windows.Data.ListCollectionView.prototype.get_SortDescriptions = function () {
	if (this._sort === null) {
		this.SetSortDescriptions(new System.ComponentModel.SortDescriptionCollection());
	}
	return this._sort;
};
$asm02.System.Windows.Data.ListCollectionView.prototype.get_CanSort = function () {
	return true;
};
$asm02.System.Windows.Data.ListCollectionView.prototype.get_CanFilter = function () {
	return true;
};
$asm02.System.Windows.Data.ListCollectionView.prototype.get_Filter = function () {
	return $asm02.System.Windows.Data.CollectionView.prototype.get_Filter.call(this);
};
$asm02.System.Windows.Data.ListCollectionView.prototype.set_Filter = function (value) {
	if (!(!this.IsAddingNew && !this.IsEditingItem)) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("CollectionView_MemberNotAllowedDuringAddOrEdit", ["Filter"])]);
	}
	$asm02.System.Windows.Data.CollectionView.prototype.set_Filter.call(this, value);
};
$asm02.System.Windows.Data.ListCollectionView.prototype.get_Count = function () {
	$asm02.System.Windows.Data.CollectionView.prototype.VerifyRefreshNotDeferred.call(this);
	return this.InternalCount;
};
$asm02.System.Windows.Data.ListCollectionView.prototype.get_IsEmpty = function () {
	return (this.InternalCount === 0);
};
$asm02.System.Windows.Data.ListCollectionView.prototype.get_NewItemPlaceholderPosition = function () {
	return System.ComponentModel.NewItemPlaceholderPosition.None;
};
$asm02.System.Windows.Data.ListCollectionView.prototype.set_NewItemPlaceholderPosition = function (value) {
	if (JSIL.Cast(value, System.Boolean)) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", ["value"]);
	}
};
$asm02.System.Windows.Data.ListCollectionView.prototype.get_CanAddNew = function () {
	return this._canAddNew;
};
$asm02.System.Windows.Data.ListCollectionView.prototype.set_CanAddNew = function (value) {
	if (this._canAddNew !== value) {
		this._canAddNew = value;
		this.OnPropertyChanged("CanAddNew");
	}
};
$asm02.System.Windows.Data.ListCollectionView.prototype.RefreshCanAddNew = function () {
	this.CanAddNew = (!(this.IsEditingItem || 
			(this.SourceList === null) || 
			this.SourceList.IList_IsFixedSize) && 
		this.CanConstructItem);
};
$asm02.System.Windows.Data.ListCollectionView.prototype.get_CanConstructItem = function () {
	if (!this._isItemConstructorValid) {
		this.EnsureItemConstructor();
	}
	return (this._itemConstructor !== null);
};
$asm02.System.Windows.Data.ListCollectionView.prototype.EnsureItemConstructor = function () {
	if (!this._isItemConstructorValid) {
		var itemType = $asm02.System.Windows.Data.CollectionView.prototype.GetItemType.call(this, true);
		if (itemType !== null) {
			this._itemConstructor = itemType.GetConstructor$2(System.Type.EmptyTypes);
			this._isItemConstructorValid = true;
		}
	}
};
$asm02.System.Windows.Data.ListCollectionView.prototype.AddNew = function () {
	$asm02.System.Windows.Data.CollectionView.prototype.VerifyRefreshNotDeferred.call(this);
	if (this.IsEditingItem) {
		this.CommitEdit();
	}
	this.CommitNew();
	if (!this.CanAddNew) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("ListCollectionView_MemberNotAllowedForView", ["AddNew"])]);
	}
	var obj = this._itemConstructor.Invoke$1(null);
	this._newItemIndex = -2;
	var index = this.SourceList.IList_Add(obj);
	if (JSIL.TryCast(this.SourceList, System.Collections.Specialized.INotifyCollectionChanged) === null) {
		if (!System.Object.Equals(obj, this.SourceList.IList_get_Item(index))) {
			index = this.SourceList.IList_IndexOf(obj);
		}
		this.BeginAddNew(obj, index);
	}
	this.MoveCurrentTo(obj);
	var supportInitialize = JSIL.TryCast(obj, System.ComponentModel.ISupportInitialize);
	if (supportInitialize !== null) {
		supportInitialize.ISupportInitialize_BeginInit();
	}
	var editableObject = JSIL.TryCast(obj, System.ComponentModel.IEditableObject);
	if (editableObject !== null) {
		editableObject.IEditableObject_BeginEdit();
	}
	return obj;
};
$asm02.System.Windows.Data.ListCollectionView.prototype.BeginAddNew = function (newItem, index) {
	this.SetNewItem(newItem);
	this._newItemIndex = index;
	var num = this.UsesLocalArray ? (this.InternalCount - 1) : this._newItemIndex;
	this.ProcessCollectionChangedWithAdjustedIndex$0(JSIL.New(System.Collections.Specialized.NotifyCollectionChangedEventArgs, "_ctor$1", [System.Collections.Specialized.NotifyCollectionChangedAction.Add, newItem, num]), -1, num);
};
$asm02.System.Windows.Data.ListCollectionView.prototype.CommitNew = function () {
	if (this.IsEditingItem) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("ListCollectionView_MemberNotAllowedDuringTransaction", ["CommitNew", "EditItem"])]);
	}
	$asm02.System.Windows.Data.CollectionView.prototype.VerifyRefreshNotDeferred.call(this);
	if (this._newItem === $asm02.System.Windows.Data.CollectionView.NoNewItem) {
		return;
	}
	if (this.IsGrouping) {
		this.CommitNewForGrouping();
		return;
	}
	var num = this.UsesLocalArray ? (this.InternalCount - 1) : this._newItemIndex;
	var obj = this.EndAddNew(false);
	var num2 = this.AdjustBefore(System.Collections.Specialized.NotifyCollectionChangedAction.Add, obj, this._newItemIndex);
	if (num2 < 0) {
		this.ProcessCollectionChangedWithAdjustedIndex$0(JSIL.New(System.Collections.Specialized.NotifyCollectionChangedEventArgs, "_ctor$1", [System.Collections.Specialized.NotifyCollectionChangedAction.Remove, obj, num]), num, -1);
		return;
	}
	if (num === num2) {
		if (this.UsesLocalArray) {
			this.InternalList.IList_Insert(num2, obj);
			return;
		}
	} else {
		this.ProcessCollectionChangedWithAdjustedIndex$1(obj, num, num2);
	}
};
$asm02.System.Windows.Data.ListCollectionView.prototype.CommitNewForGrouping = function () {
	var index = (this._group.Items.Count - 1);
	var obj = this.EndAddNew(false);
	try {
		this._newGroupedItem = obj;
		this._group.RemoveSpecialItem(index, obj, false);
		this.ProcessCollectionChanged(JSIL.New(System.Collections.Specialized.NotifyCollectionChangedEventArgs, "_ctor$1", [System.Collections.Specialized.NotifyCollectionChangedAction.Add, obj, this._newItemIndex]));
	} finally {
		this._newGroupedItem = null;
	}
	if (this.CurrentPosition === -1) {
		this.MoveCurrentTo(obj);
	}
};
$asm02.System.Windows.Data.ListCollectionView.prototype.CancelNew = function () {
	if (this.IsEditingItem) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("ListCollectionView_MemberNotAllowedDuringTransaction", ["CancelNew", "EditItem"])]);
	}
	$asm02.System.Windows.Data.CollectionView.prototype.VerifyRefreshNotDeferred.call(this);
	if (this._newItem === $asm02.System.Windows.Data.CollectionView.NoNewItem) {
		return;
	}
	this.SourceList.IList_RemoveAt(this._newItemIndex);
	if (this._newItem !== $asm02.System.Windows.Data.CollectionView.NoNewItem) {
		var num = this.AdjustBefore(System.Collections.Specialized.NotifyCollectionChangedAction.Remove, this._newItem, this._newItemIndex);
		var changedItem = this.EndAddNew(true);
		this.ProcessCollectionChangedWithAdjustedIndex$0(JSIL.New(System.Collections.Specialized.NotifyCollectionChangedEventArgs, "_ctor$1", [System.Collections.Specialized.NotifyCollectionChangedAction.Remove, changedItem, num]), num, -1);
	}
};
$asm02.System.Windows.Data.ListCollectionView.prototype.EndAddNew = function (cancel) {
	var newItem = this._newItem;
	this.SetNewItem($asm02.System.Windows.Data.CollectionView.NoNewItem);
	var editableObject = JSIL.TryCast(newItem, System.ComponentModel.IEditableObject);
	if (editableObject !== null) {
		if (cancel) {
			editableObject.IEditableObject_CancelEdit();
		} else {
			editableObject.IEditableObject_EndEdit();
		}
	}
	var supportInitialize = JSIL.TryCast(newItem, System.ComponentModel.ISupportInitialize);
	if (supportInitialize !== null) {
		supportInitialize.ISupportInitialize_EndInit();
	}
	return newItem;
};
$asm02.System.Windows.Data.ListCollectionView.prototype.get_IsAddingNew = function () {
	return (this._newItem !== $asm02.System.Windows.Data.CollectionView.NoNewItem);
};
$asm02.System.Windows.Data.ListCollectionView.prototype.get_CurrentAddItem = function () {
	if (!this.IsAddingNew) {
		return null;
	}
	return this._newItem;
};
$asm02.System.Windows.Data.ListCollectionView.prototype.SetNewItem = function (item) {
	if (!System.Object.Equals(item, this._newItem)) {
		this._newItem = item;
		this.OnPropertyChanged("CurrentAddItem");
		this.OnPropertyChanged("IsAddingNew");
		this.RefreshCanRemove();
	}
};
$asm02.System.Windows.Data.ListCollectionView.prototype.get_CanRemove = function () {
	return this._canRemove;
};
$asm02.System.Windows.Data.ListCollectionView.prototype.set_CanRemove = function (value) {
	if (this._canRemove !== value) {
		this._canRemove = value;
		this.OnPropertyChanged("CanRemove");
	}
};
$asm02.System.Windows.Data.ListCollectionView.prototype.RefreshCanRemove = function () {
	this.CanRemove = (!(this.IsEditingItem || 
			this.IsAddingNew) && 
		!this.SourceList.IList_IsFixedSize);
};
$asm02.System.Windows.Data.ListCollectionView.prototype.RemoveAt = function (index) {
	if (!(!this.IsEditingItem && !this.IsAddingNew)) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("CollectionView_MemberNotAllowedDuringAddOrEdit", ["RemoveAt"])]);
	}
	if (!this.CanRemove) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("ListCollectionView_MemberNotAllowedForView", ["RemoveAt"])]);
	}
	$asm02.System.Windows.Data.CollectionView.prototype.VerifyRefreshNotDeferred.call(this);
	var itemAt = this.GetItemAt(index);
	var index2 = index;
	var flag = !JSIL.CheckType(this.SourceList, System.Collections.Specialized.INotifyCollectionChanged);
	if (!(!this.UsesLocalArray && !this.IsGrouping)) {
		if (flag) {
			index2 = this.SourceList.IList_IndexOf(itemAt);
			this.SourceList.IList_RemoveAt(index2);
		} else {
			this.SourceList.IList_Remove(itemAt);
		}
	} else {
		this.SourceList.IList_RemoveAt(index2);
	}
	if (flag) {
		this.ProcessCollectionChanged(JSIL.New(System.Collections.Specialized.NotifyCollectionChangedEventArgs, "_ctor$1", [System.Collections.Specialized.NotifyCollectionChangedAction.Remove, itemAt, index2]));
	}
};
$asm02.System.Windows.Data.ListCollectionView.prototype.Remove = function (item) {
	var num = this.InternalIndexOf(item);
	if (num >= 0) {
		this.RemoveAt(num);
	}
};
$asm02.System.Windows.Data.ListCollectionView.prototype.EditItem = function (item) {
	$asm02.System.Windows.Data.CollectionView.prototype.VerifyRefreshNotDeferred.call(this);
	if (this.IsAddingNew) {
		if (System.Object.Equals(item, this._newItem)) {
			return;
		}
		this.CommitNew();
	}
	this.CommitEdit();
	this.SetEditItem(item);
	var editableObject = JSIL.TryCast(item, System.ComponentModel.IEditableObject);
	if (editableObject !== null) {
		editableObject.IEditableObject_BeginEdit();
	}
};
$asm02.System.Windows.Data.ListCollectionView.prototype.CommitEdit = function () {
	if (this.IsAddingNew) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("ListCollectionView_MemberNotAllowedDuringTransaction", ["CommitEdit", "AddNew"])]);
	}
	$asm02.System.Windows.Data.CollectionView.prototype.VerifyRefreshNotDeferred.call(this);
	if (this._editItem === null) {
		return;
	}
	var editItem = this._editItem;
	this.SetEditItem(null);
	var editableObject = JSIL.TryCast(editItem, System.ComponentModel.IEditableObject);
	if (editableObject !== null) {
		editableObject.IEditableObject_EndEdit();
	}
	var num = -1;
	var flag = false;
	var flag2 = false;
	if (!(!this.IsGrouping && !this.UsesLocalArray)) {
		num = this.InternalIndexOf(editItem);
		flag = (num >= 0);
		flag2 = flag ? this.PassesFilter(editItem) : (this.SourceList.IList_Contains(editItem) && 
			this.PassesFilter(editItem));
	}
	if (this.IsGrouping) {
		var obj = (editItem === this.CurrentItem) ? editItem : null;
		if (flag) {
			this.RemoveItemFromGroups(editItem);
		}
		var currentItem = this.CurrentItem;
		var currentPosition = this.CurrentPosition;
		var isCurrentAfterLast = this.IsCurrentAfterLast;
		var isCurrentBeforeFirst = this.IsCurrentBeforeFirst;
		if (flag2) {
			this.AddItemToGroups(editItem);
		}
		if (!((this.CurrentPosition !== -1) || (obj === null))) {
			var num2 = this.InternalIndexOf(obj);
			if (!((num2 < 0) || 
					!this.PassesFilter(obj) || !$asm02.System.Windows.Data.CollectionView.prototype.OKToChangeCurrent.call(this))) {
				$asm02.System.Windows.Data.CollectionView.prototype.SetCurrent$0.call(this, obj, num2);
			}
		}
		this.RaiseCurrencyChanges(
			(currentItem !== this.CurrentItem), 
			(this.CurrentItem !== currentItem), 
			(this.CurrentPosition !== currentPosition), 
			(this.IsCurrentBeforeFirst !== isCurrentBeforeFirst), 
			(this.IsCurrentAfterLast !== isCurrentAfterLast)
		);
		return;
	}
	if (this.UsesLocalArray) {
		var list = JSIL.TryCast(this.InternalList, System.Collections.Generic.List$b1.Of(System.Object));
		var num3 = -1;
		if (flag) {
			if (!flag2) {
				this.ProcessCollectionChangedWithAdjustedIndex$0(JSIL.New(System.Collections.Specialized.NotifyCollectionChangedEventArgs, "_ctor$1", [System.Collections.Specialized.NotifyCollectionChangedAction.Remove, editItem, num]), num, -1);
				return;
			}
			if (this.ActiveComparer !== null) {
				var num4 = num;
				if (!((num4 <= 0) || (this.ActiveComparer.IComparer$b1_Compare(list.get_Item((num4 - 1)), editItem) <= 0))) {
					num3 = list.BinarySearch$0(0, num4, editItem, this.ActiveComparer);
					if (num3 < 0) {
						num3 = ~num3;
					}
				} else if (!((num4 >= (list.Count - 1)) || (this.ActiveComparer.IComparer$b1_Compare(editItem, list.get_Item((num4 + 1))) <= 0))) {
					num3 = list.BinarySearch$0((num4 + 1), ((list.Count - num4) - 1), editItem, this.ActiveComparer);
					if (num3 < 0) {
						num3 = ~num3;
					}
					--num3;
				}
				if (num3 >= 0) {
					this.ProcessCollectionChangedWithAdjustedIndex$1(editItem, num, num3);
					return;
				}
			}
		} else if (flag2) {
			num3 = this.AdjustBefore(System.Collections.Specialized.NotifyCollectionChangedAction.Add, editItem, this.SourceList.IList_IndexOf(editItem));
			this.ProcessCollectionChangedWithAdjustedIndex$0(JSIL.New(System.Collections.Specialized.NotifyCollectionChangedEventArgs, "_ctor$1", [System.Collections.Specialized.NotifyCollectionChangedAction.Add, editItem, num3]), -1, num3);
		}
	}
};
$asm02.System.Windows.Data.ListCollectionView.prototype.CancelEdit = function () {
	if (this.IsAddingNew) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("ListCollectionView_MemberNotAllowedDuringTransaction", ["CancelEdit", "AddNew"])]);
	}
	$asm02.System.Windows.Data.CollectionView.prototype.VerifyRefreshNotDeferred.call(this);
	if (this._editItem === null) {
		return;
	}
	this.SetEditItem(null);
	var editableObject = JSIL.TryCast(this._editItem, System.ComponentModel.IEditableObject);
	if (editableObject !== null) {
		editableObject.IEditableObject_CancelEdit();
		return;
	}
	throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("ListCollectionView_CancelEditNotSupported")]);
};
$asm02.System.Windows.Data.ListCollectionView.prototype.ImplicitlyCancelEdit = function () {
	var editableObject = JSIL.TryCast(this._editItem, System.ComponentModel.IEditableObject);
	this.SetEditItem(null);
	if (editableObject !== null) {
		editableObject.IEditableObject_CancelEdit();
	}
};
$asm02.System.Windows.Data.ListCollectionView.prototype.get_CanCancelEdit = function () {
	return this._canCancelEdit;
};
$asm02.System.Windows.Data.ListCollectionView.prototype.set_CanCancelEdit = function (value) {
	if (this._canCancelEdit !== value) {
		this._canCancelEdit = value;
		this.OnPropertyChanged("CanCancelEdit");
	}
};
$asm02.System.Windows.Data.ListCollectionView.prototype.RefreshCanCancelEdit = function () {
	this.CanCancelEdit = JSIL.CheckType(this._editItem, System.ComponentModel.IEditableObject);
};
$asm02.System.Windows.Data.ListCollectionView.prototype.get_IsEditingItem = function () {
	return (this._editItem !== null);
};
$asm02.System.Windows.Data.ListCollectionView.prototype.get_CurrentEditItem = function () {
	return this._editItem;
};
$asm02.System.Windows.Data.ListCollectionView.prototype.SetEditItem = function (item) {
	if (!System.Object.Equals(item, this._editItem)) {
		this._editItem = item;
		this.OnPropertyChanged("CurrentEditItem");
		this.OnPropertyChanged("IsEditingItem");
		this.RefreshCanCancelEdit();
		this.RefreshCanAddNew();
		this.RefreshCanRemove();
	}
};
$asm02.System.Windows.Data.ListCollectionView.prototype.ProcessCollectionChanged = function (args) {
	if (args === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["args"]);
	}
	if (!this._isItemConstructorValid) {
		switch (Number(args.Action)) {
			case 0: 
			case 2: 
			case 4: 
				this.RefreshCanAddNew();
				break;
		}
	}
	var num = -1;
	var num2 = -1;
	if (args.Action === System.Collections.Specialized.NotifyCollectionChangedAction.Reset) {
		if (this.IsEditingItem) {
			this.ImplicitlyCancelEdit();
		}
		if (this.IsAddingNew) {
			this._newItemIndex = this.SourceList.IList_IndexOf(this._newItem);
			if (this._newItemIndex < 0) {
				this.EndAddNew(true);
			}
		}
		$asm02.System.Windows.Data.CollectionView.prototype.RefreshOrDefer.call(this);
		return;
	}
	if (!(JSIL.Cast(args.Action, System.Boolean) || (this._newItemIndex !== -2))) {
		this.BeginAddNew(args.NewItems.IList_get_Item(0), args.NewStartingIndex);
		return;
	}
	if (args.Action !== System.Collections.Specialized.NotifyCollectionChangedAction.Remove) {
		num2 = this.AdjustBefore(System.Collections.Specialized.NotifyCollectionChangedAction.Add, args.NewItems.IList_get_Item(0), args.NewStartingIndex);
	}
	if (JSIL.Cast(args.Action, System.Boolean)) {
		num = this.AdjustBefore(System.Collections.Specialized.NotifyCollectionChangedAction.Remove, args.OldItems.IList_get_Item(0), args.OldStartingIndex);
		if (!(!this.UsesLocalArray || 
				(num < 0) || (num >= num2))) {
			--num2;
		}
	}
	switch (Number(args.Action)) {
		case 0: 
			if (args.NewStartingIndex <= this._newItemIndex) {
				++this._newItemIndex;
			}
			break;
		case 1: 
			if (args.OldStartingIndex < this._newItemIndex) {
				--this._newItemIndex;
			}
			var obj = args.OldItems.IList_get_Item(0);
			if (obj === this.CurrentEditItem) {
				this.ImplicitlyCancelEdit();
			} else if (obj === this.CurrentAddItem) {
				this.EndAddNew(true);
			}
			break;
	}
	this.ProcessCollectionChangedWithAdjustedIndex$0(args, num, num2);
};
$asm02.System.Windows.Data.ListCollectionView.prototype.ProcessCollectionChangedWithAdjustedIndex$0 = function (args, adjustedOldIndex, adjustedNewIndex) {
	this.ProcessCollectionChangedWithAdjustedIndex$2(
		args.Action, 
		((args.OldItems === null) || (args.OldItems.ICollection_Count === 0)) ? null : args.OldItems.IList_get_Item(0), 
		((args.NewItems === null) || (args.NewItems.ICollection_Count === 0)) ? null : args.NewItems.IList_get_Item(0), 
		adjustedOldIndex, 
		adjustedNewIndex
	);
};
$asm02.System.Windows.Data.ListCollectionView.prototype.ProcessCollectionChangedWithAdjustedIndex$1 = function (movedItem, adjustedOldIndex, adjustedNewIndex) {
	this.ProcessCollectionChangedWithAdjustedIndex$2(
		$asm02.System.Windows.Data.ListCollectionView.EffectiveNotifyCollectionChangedAction.Move, 
		movedItem, 
		movedItem, 
		adjustedOldIndex, 
		adjustedNewIndex
	);
};
$asm02.System.Windows.Data.ListCollectionView.prototype.ProcessCollectionChangedWithAdjustedIndex$2 = function (action, oldItem, newItem, adjustedOldIndex, adjustedNewIndex) {
	var effectiveNotifyCollectionChangedAction = action;
	if (!((adjustedOldIndex !== adjustedNewIndex) || (adjustedOldIndex < 0))) {
		effectiveNotifyCollectionChangedAction = $asm02.System.Windows.Data.ListCollectionView.EffectiveNotifyCollectionChangedAction.Replace;
	} else if (adjustedOldIndex === -1) {
		if (adjustedNewIndex < 0) {
			if (!JSIL.Cast(action, System.Boolean)) {
				return;
			}
			effectiveNotifyCollectionChangedAction = $asm02.System.Windows.Data.ListCollectionView.EffectiveNotifyCollectionChangedAction.Remove;
		}
	} else if (adjustedOldIndex < -1) {
		if (adjustedNewIndex < 0) {
			return;
		}
		effectiveNotifyCollectionChangedAction = $asm02.System.Windows.Data.ListCollectionView.EffectiveNotifyCollectionChangedAction.Add;
	} else if (adjustedNewIndex < 0) {
		effectiveNotifyCollectionChangedAction = $asm02.System.Windows.Data.ListCollectionView.EffectiveNotifyCollectionChangedAction.Remove;
	} else {
		effectiveNotifyCollectionChangedAction = $asm02.System.Windows.Data.ListCollectionView.EffectiveNotifyCollectionChangedAction.Move;
	}
	var currentPosition = this.CurrentPosition;
	var currentPosition2 = this.CurrentPosition;
	var currentItem = this.CurrentItem;
	var isCurrentAfterLast = this.IsCurrentAfterLast;
	var isCurrentBeforeFirst = this.IsCurrentBeforeFirst;
	var args = null;
	var notifyCollectionChangedEventArgs = null;
	switch (Number(effectiveNotifyCollectionChangedAction)) {
		case 0: 
			if (!(!this.UsesLocalArray || (this.IsAddingNew && 
						System.Object.Equals(this._newItem, newItem)))) {
				this.InternalList.IList_Insert(adjustedNewIndex, newItem);
			}
			if (!this.IsGrouping) {
				this.AdjustCurrencyForAdd(adjustedNewIndex);
				args = JSIL.New(System.Collections.Specialized.NotifyCollectionChangedEventArgs, "_ctor$1", [System.Collections.Specialized.NotifyCollectionChangedAction.Add, newItem, adjustedNewIndex]);
			} else {
				this.AddItemToGroups(newItem);
			}
			break;
		case 1: 
			if (!(!this.UsesLocalArray || 
					(adjustedOldIndex >= this.InternalList.ICollection_Count) || !System.Object.Equals(this.InternalList.IList_get_Item(adjustedOldIndex), oldItem))) {
				this.InternalList.IList_RemoveAt(adjustedOldIndex);
			}
			if (!this.IsGrouping) {
				this.AdjustCurrencyForRemove(adjustedOldIndex);
				args = JSIL.New(System.Collections.Specialized.NotifyCollectionChangedEventArgs, "_ctor$1", [System.Collections.Specialized.NotifyCollectionChangedAction.Remove, oldItem, adjustedOldIndex]);
			} else {
				this.RemoveItemFromGroups(oldItem);
			}
			break;
		case 2: 
			if (this.UsesLocalArray) {
				this.InternalList.IList_set_Item(adjustedOldIndex, newItem);
			}
			if (!this.IsGrouping) {
				this.AdjustCurrencyForReplace(adjustedOldIndex);
				args = JSIL.New(System.Collections.Specialized.NotifyCollectionChangedEventArgs, "_ctor$2", [System.Collections.Specialized.NotifyCollectionChangedAction.Replace, newItem, oldItem, adjustedOldIndex]);
			} else {
				this.RemoveItemFromGroups(oldItem);
				this.AddItemToGroups(newItem);
			}
			break;
		case 3: 
			var flag = (oldItem === newItem);
			if (this.UsesLocalArray) {
				if (!((adjustedOldIndex >= this.InternalList.ICollection_Count) || !System.Object.Equals(this.InternalList.IList_get_Item(adjustedOldIndex), oldItem))) {
					this.InternalList.IList_RemoveAt(adjustedOldIndex);
				}
				this.InternalList.IList_Insert(adjustedNewIndex, newItem);
			}
			if (!this.IsGrouping) {
				this.AdjustCurrencyForMove(adjustedOldIndex, adjustedNewIndex);
				notifyCollectionChangedEventArgs = JSIL.New(System.Collections.Specialized.NotifyCollectionChangedEventArgs, "_ctor$1", [System.Collections.Specialized.NotifyCollectionChangedAction.Add, newItem, adjustedNewIndex]);
				args = JSIL.New(System.Collections.Specialized.NotifyCollectionChangedEventArgs, "_ctor$1", [System.Collections.Specialized.NotifyCollectionChangedAction.Remove, oldItem, adjustedOldIndex]);
			} else if (!flag) {
				this.RemoveItemFromGroups(oldItem);
				this.AddItemToGroups(newItem);
			}
			break;
	}
	var flag2 = (this.IsCurrentAfterLast !== isCurrentAfterLast);
	var flag3 = (this.IsCurrentBeforeFirst !== isCurrentBeforeFirst);
	var flag4 = (this.CurrentPosition !== currentPosition2);
	var flag5 = (this.CurrentItem !== currentItem);
	isCurrentAfterLast = this.IsCurrentAfterLast;
	isCurrentBeforeFirst = this.IsCurrentBeforeFirst;
	currentPosition2 = this.CurrentPosition;
	currentItem = this.CurrentItem;
	if (!this.IsGrouping) {
		this._currentChangedMonitor.Enter();
		var currentChangedMonitor = this._currentChangedMonitor;
		try {
			this.OnCollectionChanged$0(args);
			if (notifyCollectionChangedEventArgs !== null) {
				this.OnCollectionChanged$0(notifyCollectionChangedEventArgs);
			}
		} finally {
			if (currentChangedMonitor !== null) {
				currentChangedMonitor.IDisposable_Dispose();
			}
		}
		if (this.IsCurrentAfterLast !== isCurrentAfterLast) {
			flag2 = false;
			isCurrentAfterLast = this.IsCurrentAfterLast;
		}
		if (this.IsCurrentBeforeFirst !== isCurrentBeforeFirst) {
			flag3 = false;
			isCurrentBeforeFirst = this.IsCurrentBeforeFirst;
		}
		if (this.CurrentPosition !== currentPosition2) {
			flag4 = false;
			currentPosition2 = this.CurrentPosition;
		}
		if (this.CurrentItem !== currentItem) {
			flag5 = false;
			currentItem = this.CurrentItem;
		}
	}
	if (this._currentElementWasRemoved) {
		this.MoveCurrencyOffDeletedElement((this._newGroupedItem === null) ? currentPosition : this.IndexOf(this._newGroupedItem));
		flag2 = (flag2 || 
			(this.IsCurrentAfterLast !== isCurrentAfterLast));
		flag3 = (flag3 || 
			(this.IsCurrentBeforeFirst !== isCurrentBeforeFirst));
		flag4 = (flag4 || 
			(this.CurrentPosition !== currentPosition2));
		flag5 = (flag5 || 
			(this.CurrentItem !== currentItem));
	}
	this.RaiseCurrencyChanges(
		false, 
		flag5, 
		flag4, 
		flag3, 
		flag2
	);
};
$asm02.System.Windows.Data.ListCollectionView.prototype.InternalIndexOf = function (item) {
	if (this.IsGrouping) {
		return this._group.LeafIndexOf(item);
	}
	if (!(!this.IsAddingNew || 
			!System.Object.Equals(item, this._newItem) || !this.UsesLocalArray)) {
		return (this.InternalCount - 1);
	}
	return this.InternalList.IList_IndexOf(item);
};
$asm02.System.Windows.Data.ListCollectionView.prototype.InternalItemAt = function (index) {
	if (this.IsGrouping) {
		return this._group.LeafAt(index);
	}
	if (!(!this.IsAddingNew || 
			!this.UsesLocalArray || (index !== (this.InternalCount - 1)))) {
		return this._newItem;
	}
	return this.InternalList.IList_get_Item(index);
};
$asm02.System.Windows.Data.ListCollectionView.prototype.InternalContains = function (item) {
	if (this.IsGrouping) {
		return (this._group.LeafIndexOf(item) >= 0);
	}
	return this.InternalList.IList_Contains(item);
};
$asm02.System.Windows.Data.ListCollectionView.prototype.InternalGetEnumerator = function () {
	if (!this.IsGrouping) {
		return new $asm02.System.Windows.Data.CollectionView.PlaceholderAwareEnumerator(this, this.InternalList.IEnumerable_GetEnumerator(), this._newItem);
	}
	return this._group.GetLeafEnumerator();
};
$asm02.System.Windows.Data.ListCollectionView.prototype.get_UsesLocalArray = function () {
	return (this.ActiveComparer || (this.ActiveFilter !== null));
};
$asm02.System.Windows.Data.ListCollectionView.prototype.get_InternalList = function () {
	return this._internalList;
};
$asm02.System.Windows.Data.ListCollectionView.prototype.get_ActiveComparer = function () {
	return this._activeComparer;
};
$asm02.System.Windows.Data.ListCollectionView.prototype.set_ActiveComparer = function (value) {
	this._activeComparer = value;
};
$asm02.System.Windows.Data.ListCollectionView.prototype.get_ActiveFilter = function () {
	return this._activeFilter;
};
$asm02.System.Windows.Data.ListCollectionView.prototype.set_ActiveFilter = function (value) {
	this._activeFilter = value;
};
$asm02.System.Windows.Data.ListCollectionView.prototype.get_IsGrouping = function () {
	return this._isGrouping;
};
$asm02.System.Windows.Data.ListCollectionView.prototype.get_InternalCount = function () {
	if (this.IsGrouping) {
		return this._group.ItemCount;
	}
	var num = (this.UsesLocalArray && 
		this.IsAddingNew) ? 1 : 0;
	return (num + this.InternalList.ICollection_Count);
};
$asm02.System.Windows.Data.ListCollectionView.prototype.get_HasSortDescriptions = function () {
	return ((this._sort !== null) && (this._sort.Count > 0));
};
$asm02.System.Windows.Data.ListCollectionView.prototype.get_IsCurrentInView = function () {
	return ((0 <= this.CurrentPosition) && (this.CurrentPosition < this.InternalCount));
};
$asm02.System.Windows.Data.ListCollectionView.prototype.get_CanGroupNamesChange = function () {
	return true;
};
$asm02.System.Windows.Data.ListCollectionView.prototype.get_SourceList = function () {
	return JSIL.TryCast(this.SourceCollection, System.Collections.IList);
};
$asm02.System.Windows.Data.ListCollectionView.prototype.debug_ValidateCollectionChangedEventArgs = function (e) {
	switch (Number(e.Action)) {
		case 0: 
		case 1: 
		case 2: 
		case 3: 
		case 4: 
			return;
	}
};
$asm02.System.Windows.Data.ListCollectionView.prototype.PrepareLocalArray = function (list) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				if (list === null) {
					throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["list"]);
				}
				if (this.ActiveFilter === null) {
					var list2 = new (System.Collections.Generic.List$b1.Of(System.Object)) ();
					var enumerator = list.IEnumerable_GetEnumerator();
					try {
					__loop0__: 
						while (enumerator.IEnumerator_MoveNext()) {
							var current = enumerator.IEnumerator_Current;
							list2.Add(current);
						}
						__label0__ = "IL_8F";
						continue __step0__;
					} finally {
						var disposable = JSIL.TryCast(enumerator, System.IDisposable);
						if (disposable !== null) {
							disposable.IDisposable_Dispose();
						}
					}
				}
				list2 = new (System.Collections.Generic.List$b1.Of(System.Object)) (list.ICollection_Count);
			__loop1__: 
				for (var i = 0; i < list.ICollection_Count; ++i) {
					if (this.ActiveFilter(list.IList_get_Item(i))) {
						list2.Add(list.IList_get_Item(i));
					}
				}
				__label0__ = "IL_8F";
				continue __step0__;
				break;
			case "IL_8F":
				if (this.ActiveComparer !== null) {
					list2.Sort$1(this.ActiveComparer);
				}
				return list2;
				break __step0__;
		}
	}
};
$asm02.System.Windows.Data.ListCollectionView.prototype.MoveCurrencyOffDeletedElement = function (oldCurrentPosition) {
	var num = (this.InternalCount - 1);
	var num2 = (oldCurrentPosition < num) ? oldCurrentPosition : num;
	this._currentElementWasRemoved = false;
	$asm02.System.Windows.Data.CollectionView.prototype.OnCurrentChanging$0.call(this);
	if (num2 < 0) {
		$asm02.System.Windows.Data.CollectionView.prototype.SetCurrent$0.call(this, null, num2);
	} else {
		$asm02.System.Windows.Data.CollectionView.prototype.SetCurrent$0.call(this, this.InternalItemAt(num2), num2);
	}
	this.OnCurrentChanged();
};
$asm02.System.Windows.Data.ListCollectionView.prototype.AdjustBefore = function (action, item, index) {
	if (action === System.Collections.Specialized.NotifyCollectionChangedAction.Reset) {
		return -1;
	}
	var list = JSIL.TryCast(this.SourceCollection, System.Collections.IList);
	if (!((index >= -1) && (index <= list.ICollection_Count))) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("ListCollectionView_CollectionChangedOutOfRange")]);
	}
	if (!JSIL.Cast(action, System.Boolean)) {
		if (index >= 0) {
			if (!System.Object.Equals(item, list.IList_get_Item(index))) {
				throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("ListCollectionView_AddedItemNotAtIndex")]);
			}
		} else {
			index = list.IList_IndexOf(item);
			if (index < 0) {
				throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("ListCollectionView_AddedItemNotInCollection")]);
			}
		}
	}
	if (!this.UsesLocalArray) {
		if (!(!this.IsAddingNew || (index <= this._newItemIndex))) {
			--index;
		}
		return index;
	}
	if (!JSIL.Cast(action, System.Boolean)) {
		if (!this.PassesFilter(item)) {
			return -2;
		}
		var list2 = JSIL.TryCast(this.InternalList, System.Collections.Generic.List$b1.Of(System.Object));
		if (list2 === null) {
			index = -1;
		} else if (this.ActiveComparer !== null) {
			index = list2.BinarySearch$2(item, this.ActiveComparer);
			if (index < 0) {
				index = ~index;
			}
		} else {
			var num = 0;
		__loop0__: 
			for (var num2 = 0; (num < index) && (num2 < list2.Count); ) {
				if (System.Object.Equals(list.IList_get_Item(num), list2.get_Item(num2))) {
					++num;
					++num2;
				} else if (System.Object.Equals(item, list2.get_Item(num2))) {
					++num2;
				} else {
					++num;
				}
			}
			index = num2;
		}
	} else if (action === System.Collections.Specialized.NotifyCollectionChangedAction.Remove) {
		if (this.IsAddingNew && (item === this._newItem)) {
			return (this.InternalCount - 1);
		}
		index = this.InternalList.IList_IndexOf(item);
		if (index < 0) {
			return -2;
		}
	} else {
		index = -1;
	}
	if (index >= 0) {
		return index;
	}
	return index;
};
$asm02.System.Windows.Data.ListCollectionView.prototype.AdjustCurrencyForAdd = function (index) {
	if (this.InternalCount === 1) {
		if (!((this.CurrentItem === null) && (this.CurrentPosition === -1))) {
			$asm02.System.Windows.Data.CollectionView.prototype.OnCurrentChanging$0.call(this);
		}
		$asm02.System.Windows.Data.CollectionView.prototype.SetCurrent$0.call(this, null, -1);
		return;
	}
	if (index > this.CurrentPosition) {
		if (!$asm02.System.Windows.Data.CollectionView.prototype.get_IsCurrentInSync.call(this)) {
			$asm02.System.Windows.Data.CollectionView.prototype.SetCurrent$0.call(this, this.CurrentItem, this.InternalIndexOf(this.CurrentItem));
		}
		return;
	}
	var num = (this.CurrentPosition + 1);
	if (num < this.InternalCount) {
		$asm02.System.Windows.Data.CollectionView.prototype.SetCurrent$0.call(this, this.GetItemAt(num), num);
		return;
	}
	$asm02.System.Windows.Data.CollectionView.prototype.SetCurrent$0.call(this, null, this.InternalCount);
};
$asm02.System.Windows.Data.ListCollectionView.prototype.AdjustCurrencyForRemove = function (index) {
	if (index < this.CurrentPosition) {
		$asm02.System.Windows.Data.CollectionView.prototype.SetCurrent$0.call(this, this.CurrentItem, (this.CurrentPosition - 1));
		return;
	}
	if (index === this.CurrentPosition) {
		this._currentElementWasRemoved = true;
	}
};
$asm02.System.Windows.Data.ListCollectionView.prototype.AdjustCurrencyForMove = function (oldIndex, newIndex) {
	if (oldIndex === this.CurrentPosition) {
		$asm02.System.Windows.Data.CollectionView.prototype.SetCurrent$0.call(this, this.GetItemAt(newIndex), newIndex);
		return;
	}
	if (!((oldIndex >= this.CurrentPosition) || (this.CurrentPosition > newIndex))) {
		$asm02.System.Windows.Data.CollectionView.prototype.SetCurrent$0.call(this, this.CurrentItem, (this.CurrentPosition - 1));
		return;
	}
	if (!((newIndex > this.CurrentPosition) || (this.CurrentPosition >= oldIndex))) {
		$asm02.System.Windows.Data.CollectionView.prototype.SetCurrent$0.call(this, this.CurrentItem, (this.CurrentPosition + 1));
	}
};
$asm02.System.Windows.Data.ListCollectionView.prototype.AdjustCurrencyForReplace = function (index) {
	if (index === this.CurrentPosition) {
		this._currentElementWasRemoved = true;
	}
};
$asm02.System.Windows.Data.ListCollectionView.prototype.RaiseCurrencyChanges = function (raiseCurrentChanged, raiseCurrentItem, raiseCurrentPosition, raiseIsCurrentBeforeFirst, raiseIsCurrentAfterLast) {
	if (raiseCurrentChanged) {
		this.OnCurrentChanged();
	}
	if (raiseIsCurrentAfterLast) {
		this.OnPropertyChanged("IsCurrentAfterLast");
	}
	if (raiseIsCurrentBeforeFirst) {
		this.OnPropertyChanged("IsCurrentBeforeFirst");
	}
	if (raiseCurrentPosition) {
		this.OnPropertyChanged("CurrentPosition");
	}
	if (raiseCurrentItem) {
		this.OnPropertyChanged("CurrentItem");
	}
};
$asm02.System.Windows.Data.ListCollectionView.prototype.PrepareSortAndFilter = function (list) {
	if (!((this._sort === null) || (this._sort.Count <= 0))) {
		this.ActiveComparer = new $asm02.MS.Internal.SortFieldComparer(this._sort, this.Culture);
	} else {
		this.ActiveComparer = null;
	}
	this.ActiveFilter = this.Filter;
};
$asm02.System.Windows.Data.ListCollectionView.prototype.SetSortDescriptions = function (descriptions) {
	if (this._sort !== null) {
		this._sort.INotifyCollectionChanged_remove_CollectionChanged(JSIL.Delegate.New("System.Collections.Specialized.NotifyCollectionChangedEventHandler", this, $asm02.System.Windows.Data.ListCollectionView.prototype.SortDescriptionsChanged));
	}
	this._sort = descriptions;
	if (this._sort !== null) {
		this._sort.INotifyCollectionChanged_add_CollectionChanged(JSIL.Delegate.New("System.Collections.Specialized.NotifyCollectionChangedEventHandler", this, $asm02.System.Windows.Data.ListCollectionView.prototype.SortDescriptionsChanged));
	}
};
$asm02.System.Windows.Data.ListCollectionView.prototype.SortDescriptionsChanged = function (sender, e) {
	if (!(!this.IsAddingNew && !this.IsEditingItem)) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("CollectionView_MemberNotAllowedDuringAddOrEdit", ["Sorting"])]);
	}
	$asm02.System.Windows.Data.CollectionView.prototype.RefreshOrDefer.call(this);
};
$asm02.System.Windows.Data.ListCollectionView.prototype.PrepareGroups = function () {
	this._group.Clear();
	this._group.Initialize();
	this._isGrouping = (this._group.GroupBy !== null);
	if (!this._isGrouping) {
		return;
	}
	var activeComparer = this.ActiveComparer;
	if (activeComparer !== null) {
		this._group.ActiveComparer = activeComparer;
	} else {
		var listComparer = JSIL.TryCast(this._group.ActiveComparer, $asm02.MS.Internal.CollectionViewGroupInternal.IListComparer);
		if (listComparer !== null) {
			listComparer.ResetList(this.InternalList);
		} else {
			this._group.ActiveComparer = new $asm02.MS.Internal.CollectionViewGroupInternal.IListComparer(this.InternalList);
		}
	}
	var i = 0;
	var count = this.InternalList.ICollection_Count;
__loop0__: 
	while (i < count) {
		var obj = this.InternalList.IList_get_Item(i);
		if (!(this.IsAddingNew && System.Object.Equals(this._newItem, obj))) {
			this._group.AddToSubgroups$0(obj, true);
		}
		++i;
	}
	if (this.IsAddingNew) {
		this._group.InsertSpecialItem(this._group.Items.Count, this._newItem, true);
	}
};
$asm02.System.Windows.Data.ListCollectionView.prototype.OnGroupChanged = function (sender, e) {
	if (!JSIL.Cast(e.Action, System.Boolean)) {
		this.AdjustCurrencyForAdd(e.NewStartingIndex);
	} else if (e.Action === System.Collections.Specialized.NotifyCollectionChangedAction.Remove) {
		this.AdjustCurrencyForRemove(e.OldStartingIndex);
	}
	this.OnCollectionChanged$0(e);
};
$asm02.System.Windows.Data.ListCollectionView.prototype.OnGroupByChanged = function (sender, e) {
	if (!(!this.IsAddingNew && !this.IsEditingItem)) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("CollectionView_MemberNotAllowedDuringAddOrEdit", ["Grouping"])]);
	}
	$asm02.System.Windows.Data.CollectionView.prototype.RefreshOrDefer.call(this);
};
$asm02.System.Windows.Data.ListCollectionView.prototype.OnGroupDescriptionChanged = function (sender, e) {
	if (!(!this.IsAddingNew && !this.IsEditingItem)) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$0("CollectionView_MemberNotAllowedDuringAddOrEdit", ["Grouping"])]);
	}
	$asm02.System.Windows.Data.CollectionView.prototype.RefreshOrDefer.call(this);
};
$asm02.System.Windows.Data.ListCollectionView.prototype.AddItemToGroups = function (item) {
	if (!(!this.IsAddingNew || (item !== this._newItem))) {
		this._group.InsertSpecialItem(this._group.Items.Count, item, false);
		return;
	}
	this._group.AddToSubgroups$0(item, false);
};
$asm02.System.Windows.Data.ListCollectionView.prototype.RemoveItemFromGroups = function (item) {
	if (!(!this.CanGroupNamesChange && !this._group.RemoveFromSubgroups$0(item))) {
		this._group.RemoveItemFromSubgroupsByExhaustiveSearch$0(item);
	}
};
$asm02.System.Windows.Data.ListCollectionView.prototype.OnPropertyChanged = function (propertyName) {
	this.OnPropertyChanged$0(new System.ComponentModel.PropertyChangedEventArgs(propertyName));
};
JSIL.OverloadedMethod($asm02.System.Windows.Data.ListCollectionView.prototype, "ProcessCollectionChangedWithAdjustedIndex", [
		["ProcessCollectionChangedWithAdjustedIndex$0", [System.Collections.Specialized.NotifyCollectionChangedEventArgs, System.Int32, System.Int32]], 
		["ProcessCollectionChangedWithAdjustedIndex$1", [System.Object, System.Int32, System.Int32]], 
		["ProcessCollectionChangedWithAdjustedIndex$2", [$asm02.System.Windows.Data.ListCollectionView.EffectiveNotifyCollectionChangedAction, System.Object, System.Object, System.Int32, System.Int32]]
	]);
JSIL.MakeProperty($asm02.System.Windows.Data.ListCollectionView.prototype, "CanGroup", 
	$asm02.System.Windows.Data.ListCollectionView.prototype.get_CanGroup, null);
JSIL.MakeProperty($asm02.System.Windows.Data.ListCollectionView.prototype, "GroupDescriptions", 
	$asm02.System.Windows.Data.ListCollectionView.prototype.get_GroupDescriptions, null);
JSIL.MakeProperty($asm02.System.Windows.Data.ListCollectionView.prototype, "Groups", 
	$asm02.System.Windows.Data.ListCollectionView.prototype.get_Groups, null);
JSIL.MakeProperty($asm02.System.Windows.Data.ListCollectionView.prototype, "SortDescriptions", 
	$asm02.System.Windows.Data.ListCollectionView.prototype.get_SortDescriptions, null);
JSIL.MakeProperty($asm02.System.Windows.Data.ListCollectionView.prototype, "CanSort", 
	$asm02.System.Windows.Data.ListCollectionView.prototype.get_CanSort, null);
JSIL.MakeProperty($asm02.System.Windows.Data.ListCollectionView.prototype, "CanFilter", 
	$asm02.System.Windows.Data.ListCollectionView.prototype.get_CanFilter, null);
JSIL.MakeProperty($asm02.System.Windows.Data.ListCollectionView.prototype, "Filter", 
	$asm02.System.Windows.Data.ListCollectionView.prototype.get_Filter, $asm02.System.Windows.Data.ListCollectionView.prototype.set_Filter);
JSIL.MakeProperty($asm02.System.Windows.Data.ListCollectionView.prototype, "Count", 
	$asm02.System.Windows.Data.ListCollectionView.prototype.get_Count, null);
JSIL.MakeProperty($asm02.System.Windows.Data.ListCollectionView.prototype, "IsEmpty", 
	$asm02.System.Windows.Data.ListCollectionView.prototype.get_IsEmpty, null);
JSIL.MakeProperty($asm02.System.Windows.Data.ListCollectionView.prototype, "NewItemPlaceholderPosition", 
	$asm02.System.Windows.Data.ListCollectionView.prototype.get_NewItemPlaceholderPosition, $asm02.System.Windows.Data.ListCollectionView.prototype.set_NewItemPlaceholderPosition);
JSIL.MakeProperty($asm02.System.Windows.Data.ListCollectionView.prototype, "CanAddNew", 
	$asm02.System.Windows.Data.ListCollectionView.prototype.get_CanAddNew, $asm02.System.Windows.Data.ListCollectionView.prototype.set_CanAddNew);
JSIL.MakeProperty($asm02.System.Windows.Data.ListCollectionView.prototype, "CanConstructItem", 
	$asm02.System.Windows.Data.ListCollectionView.prototype.get_CanConstructItem, null);
JSIL.MakeProperty($asm02.System.Windows.Data.ListCollectionView.prototype, "IsAddingNew", 
	$asm02.System.Windows.Data.ListCollectionView.prototype.get_IsAddingNew, null);
JSIL.MakeProperty($asm02.System.Windows.Data.ListCollectionView.prototype, "CurrentAddItem", 
	$asm02.System.Windows.Data.ListCollectionView.prototype.get_CurrentAddItem, null);
JSIL.MakeProperty($asm02.System.Windows.Data.ListCollectionView.prototype, "CanRemove", 
	$asm02.System.Windows.Data.ListCollectionView.prototype.get_CanRemove, $asm02.System.Windows.Data.ListCollectionView.prototype.set_CanRemove);
JSIL.MakeProperty($asm02.System.Windows.Data.ListCollectionView.prototype, "CanCancelEdit", 
	$asm02.System.Windows.Data.ListCollectionView.prototype.get_CanCancelEdit, $asm02.System.Windows.Data.ListCollectionView.prototype.set_CanCancelEdit);
JSIL.MakeProperty($asm02.System.Windows.Data.ListCollectionView.prototype, "IsEditingItem", 
	$asm02.System.Windows.Data.ListCollectionView.prototype.get_IsEditingItem, null);
JSIL.MakeProperty($asm02.System.Windows.Data.ListCollectionView.prototype, "CurrentEditItem", 
	$asm02.System.Windows.Data.ListCollectionView.prototype.get_CurrentEditItem, null);
JSIL.MakeProperty($asm02.System.Windows.Data.ListCollectionView.prototype, "UsesLocalArray", 
	$asm02.System.Windows.Data.ListCollectionView.prototype.get_UsesLocalArray, null);
JSIL.MakeProperty($asm02.System.Windows.Data.ListCollectionView.prototype, "InternalList", 
	$asm02.System.Windows.Data.ListCollectionView.prototype.get_InternalList, null);
JSIL.MakeProperty($asm02.System.Windows.Data.ListCollectionView.prototype, "ActiveComparer", 
	$asm02.System.Windows.Data.ListCollectionView.prototype.get_ActiveComparer, $asm02.System.Windows.Data.ListCollectionView.prototype.set_ActiveComparer);
JSIL.MakeProperty($asm02.System.Windows.Data.ListCollectionView.prototype, "ActiveFilter", 
	$asm02.System.Windows.Data.ListCollectionView.prototype.get_ActiveFilter, $asm02.System.Windows.Data.ListCollectionView.prototype.set_ActiveFilter);
JSIL.MakeProperty($asm02.System.Windows.Data.ListCollectionView.prototype, "IsGrouping", 
	$asm02.System.Windows.Data.ListCollectionView.prototype.get_IsGrouping, null);
JSIL.MakeProperty($asm02.System.Windows.Data.ListCollectionView.prototype, "InternalCount", 
	$asm02.System.Windows.Data.ListCollectionView.prototype.get_InternalCount, null);
JSIL.MakeProperty($asm02.System.Windows.Data.ListCollectionView.prototype, "HasSortDescriptions", 
	$asm02.System.Windows.Data.ListCollectionView.prototype.get_HasSortDescriptions, null);
JSIL.MakeProperty($asm02.System.Windows.Data.ListCollectionView.prototype, "IsCurrentInView", 
	$asm02.System.Windows.Data.ListCollectionView.prototype.get_IsCurrentInView, null);
JSIL.MakeProperty($asm02.System.Windows.Data.ListCollectionView.prototype, "CanGroupNamesChange", 
	$asm02.System.Windows.Data.ListCollectionView.prototype.get_CanGroupNamesChange, null);
JSIL.MakeProperty($asm02.System.Windows.Data.ListCollectionView.prototype, "SourceList", 
	$asm02.System.Windows.Data.ListCollectionView.prototype.get_SourceList, null);
Object.defineProperty($asm02.System.Windows.Data.ListCollectionView, "CanAddNewPropertyName", {
		"value": "CanAddNew"}
);
Object.defineProperty($asm02.System.Windows.Data.ListCollectionView, "CanCancelEditPropertyName", {
		"value": "CanCancelEdit"}
);
Object.defineProperty($asm02.System.Windows.Data.ListCollectionView, "CanRemovePropertyName", {
		"value": "CanRemove"}
);
Object.defineProperty($asm02.System.Windows.Data.ListCollectionView, "CurrentAddItemPropertyName", {
		"value": "CurrentAddItem"}
);
Object.defineProperty($asm02.System.Windows.Data.ListCollectionView, "CurrentEditItemPropertyName", {
		"value": "CurrentEditItem"}
);
Object.defineProperty($asm02.System.Windows.Data.ListCollectionView, "IsAddingNewPropertyName", {
		"value": "IsAddingNew"}
);
Object.defineProperty($asm02.System.Windows.Data.ListCollectionView, "IsEditingItemPropertyName", {
		"value": "IsEditingItem"}
);
$asm02.System.Windows.Data.ListCollectionView.prototype._canAddNew = false;
$asm02.System.Windows.Data.ListCollectionView.prototype._canRemove = false;
$asm02.System.Windows.Data.ListCollectionView.prototype._canCancelEdit = false;
$asm02.System.Windows.Data.ListCollectionView.prototype._internalList = null;
$asm02.System.Windows.Data.ListCollectionView.prototype._group = null;
$asm02.System.Windows.Data.ListCollectionView.prototype._isGrouping = false;
$asm02.System.Windows.Data.ListCollectionView.prototype._activeComparer = null;
$asm02.System.Windows.Data.ListCollectionView.prototype._activeFilter = null;
$asm02.System.Windows.Data.ListCollectionView.prototype._sort = null;
$asm02.System.Windows.Data.ListCollectionView.prototype._currentElementWasRemoved = false;
$asm02.System.Windows.Data.ListCollectionView.prototype._newItem = null;
$asm02.System.Windows.Data.ListCollectionView.prototype._newGroupedItem = null;
$asm02.System.Windows.Data.ListCollectionView.prototype._editItem = null;
$asm02.System.Windows.Data.ListCollectionView.prototype._newItemIndex = 0;
$asm02.System.Windows.Data.ListCollectionView.prototype._isItemConstructorValid = false;
$asm02.System.Windows.Data.ListCollectionView.prototype._itemConstructor = null;

System.Windows.Data.BindingOperations.SetBinding = function (target, dp, binding) {
	if (target === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["target"]);
	}
	if (dp === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["dp"]);
	}
	if (binding === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["binding"]);
	}
	var binding2 = JSIL.Cast(binding, System.Windows.Data.Binding);
	if (!((binding2.Mode !== System.Windows.Data.BindingMode.TwoWay) || (!System.String.IsNullOrEmpty(binding2.Path.Path) && 
				!(binding2.Path.Path.Trim$1() == ".")))) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("Binding_TwoWayBindingRequiresPath")]);
	}
	var bindingExpression = binding2.CreateBindingExpression();
	try {
		bindingExpression.BeginSetBinding();
		target.SetValue(dp, bindingExpression);
	} finally {
		bindingExpression.EndSetBinding();
	}
	return bindingExpression;
};

System.Windows.DependencyObjectCollection$b1.prototype.INativeCollectionWrapper_GetCollection = function () {
	return this._collection;
};
System.Windows.DependencyObjectCollection$b1.prototype._ctor = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 409);
	this._collection = new $asm02.System.Windows.DOCollection();
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.DependencyObjectCollection$b1.Of(this.T).CollectionProperty, this._collection);
};
System.Windows.DependencyObjectCollection$b1.prototype.CheckReentrancy = function () {
	if (this._busy) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [System.String.Format($asm02.System.Windows.Resx.GetString$2("DependencyObjectCollection_CannotChangeCollection"), "DependencyObjectCollection", "CollectionChanged")]);
	}
};
System.Windows.DependencyObjectCollection$b1.prototype.OnParentEnter = function (nativeNamescopeOwner, bLive, bSkipNameRegistration, bCoercedIsEnabled, bUseLayoutRounding, bIsRightToLeft, textHintingMode) {
	$asm02.MS.Internal.XcpImports.DependencyObject_Enter(
		this._collection, 
		nativeNamescopeOwner, 
		bSkipNameRegistration, 
		bCoercedIsEnabled, 
		bUseLayoutRounding, 
		bIsRightToLeft, 
		textHintingMode
	);
};
System.Windows.DependencyObjectCollection$b1.prototype.OnInheritanceContextChanged = function (sender, e) {
	var enumerator = this._collection.GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current;
			current.OnInheritanceContextChanged(this, System.EventArgs.Empty);
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
};
System.Windows.DependencyObjectCollection$b1.prototype.RaiseCollectionChanged$0 = function (action, item, index) {
	if (this.CollectionChanged !== null) {
		this.TryCollectionChanged(JSIL.New(System.Collections.Specialized.NotifyCollectionChangedEventArgs, "_ctor$1", [action, item, index]));
	}
};
System.Windows.DependencyObjectCollection$b1.prototype.RaiseCollectionChanged$1 = function (action, newItem, oldItem, index) {
	if (this.CollectionChanged !== null) {
		this.TryCollectionChanged(JSIL.New(System.Collections.Specialized.NotifyCollectionChangedEventArgs, "_ctor$2", [action, newItem, oldItem, index]));
	}
};
System.Windows.DependencyObjectCollection$b1.prototype.RaiseReset = function () {
	if (this.CollectionChanged !== null) {
		this.TryCollectionChanged(JSIL.New(System.Collections.Specialized.NotifyCollectionChangedEventArgs, "_ctor$0", [System.Collections.Specialized.NotifyCollectionChangedAction.Reset]));
	}
};
System.Windows.DependencyObjectCollection$b1.prototype.TryCollectionChanged = function (e) {
	this._busy = true;
	try {
		this.CollectionChanged(this, e);
	} finally {
		this._busy = false;
	}
};
System.Windows.DependencyObjectCollection$b1.prototype.add_CollectionChanged = function (value) {
	this.CollectionChanged = System.Delegate.Combine(this.CollectionChanged, value);
};
System.Windows.DependencyObjectCollection$b1.prototype.remove_CollectionChanged = function (value) {
	this.CollectionChanged = System.Delegate.Remove(this.CollectionChanged, value);
};
System.Windows.DependencyObjectCollection$b1.prototype.IndexOf = function (item) {
	var dependencyObject = JSIL.TryCast(item, System.Windows.DependencyObject);
	if (!(dependencyObject || (item === null))) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [System.String.Format($asm02.System.Windows.Resx.GetString$2("DependencyObjectCollection_ItemWrongType"), "item", "DependencyObject")]);
	}
	return this._collection.IndexOf(dependencyObject);
};
System.Windows.DependencyObjectCollection$b1.prototype.Insert = function (index, item) {
	this.CheckReentrancy();
	if (!((index >= 0) && (index <= this.Count))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["index"]);
	}
	var dependencyObject = JSIL.TryCast(item, System.Windows.DependencyObject);
	if (!(dependencyObject || (item === null))) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [System.String.Format($asm02.System.Windows.Resx.GetString$2("DependencyObjectCollection_ItemWrongType"), "item", "DependencyObject")]);
	}
	this._collection.Insert(index, dependencyObject);
	this.RaiseCollectionChanged$0(System.Collections.Specialized.NotifyCollectionChangedAction.Add, item, index);
};
System.Windows.DependencyObjectCollection$b1.prototype.RemoveAt = function (index) {
	this.CheckReentrancy();
	if (!((index >= 0) && (index < this.Count))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["index"]);
	}
	var dependencyObject = this._collection.get_Item(index);
	this._collection.Remove(dependencyObject);
	this.RaiseCollectionChanged$0(System.Collections.Specialized.NotifyCollectionChangedAction.Remove, dependencyObject, index);
};
System.Windows.DependencyObjectCollection$b1.prototype.get_Item = function (index) {
	if (!((index >= 0) && (index < this.Count))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["index"]);
	}
	return JSIL.Cast(this._collection.get_Item(index), this.T);
};
System.Windows.DependencyObjectCollection$b1.prototype.set_Item = function (index, value) {
	var oldItem = new JSIL.Variable(null);
	this.CheckReentrancy();
	if (!((index >= 0) && (index < this.Count))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["index"]);
	}
	var dependencyObject = JSIL.TryCast(value, System.Windows.DependencyObject);
	if (!(dependencyObject || (value === null))) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [System.String.Format($asm02.System.Windows.Resx.GetString$2("DependencyObjectCollection_ItemWrongType"), "value", "DependencyObject")]);
	}
	this._collection.SetItemInternal(index, dependencyObject, /* ref */ oldItem);
	this.RaiseCollectionChanged$1(System.Collections.Specialized.NotifyCollectionChangedAction.Replace, value, oldItem.value, index);
};
System.Windows.DependencyObjectCollection$b1.prototype.Add = function (item) {
	this.CheckReentrancy();
	var dependencyObject = JSIL.TryCast(item, System.Windows.DependencyObject);
	if (!(dependencyObject || (item === null))) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [System.String.Format($asm02.System.Windows.Resx.GetString$2("DependencyObjectCollection_ItemWrongType"), "item", "DependencyObject")]);
	}
	this._collection.Add(dependencyObject);
	this.RaiseCollectionChanged$0(System.Collections.Specialized.NotifyCollectionChangedAction.Add, dependencyObject, (this._collection.Count - 1));
};
System.Windows.DependencyObjectCollection$b1.prototype.Clear = function () {
	this.CheckReentrancy();
	this._collection.Clear();
	this.RaiseReset();
};
System.Windows.DependencyObjectCollection$b1.prototype.Contains = function (item) {
	var dependencyObject = JSIL.TryCast(item, System.Windows.DependencyObject);
	if (!(dependencyObject || (item === null))) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [System.String.Format($asm02.System.Windows.Resx.GetString$2("DependencyObjectCollection_ItemWrongType"), "item", "DependencyObject")]);
	}
	return this._collection.Contains(dependencyObject);
};
System.Windows.DependencyObjectCollection$b1.prototype.CopyTo = function (array, arrayIndex) {
	this._collection.CopyTo$1(array, arrayIndex);
};
System.Windows.DependencyObjectCollection$b1.prototype.get_Count = function () {
	return this._collection.Count;
};
System.Windows.DependencyObjectCollection$b1.prototype.get_IsReadOnly = function () {
	return this._collection.IsReadOnly;
};
System.Windows.DependencyObjectCollection$b1.prototype.Remove = function (item) {
	this.CheckReentrancy();
	var dependencyObject = JSIL.TryCast(item, System.Windows.DependencyObject);
	if (!(dependencyObject || (item === null))) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [System.String.Format($asm02.System.Windows.Resx.GetString$2("DependencyObjectCollection_ItemWrongType"), "item", "DependencyObject")]);
	}
	var num = this._collection.IndexOf(dependencyObject);
	var flag = false;
	if (!((num < 0) || (num >= this._collection.Count))) {
		flag = this._collection.Remove(dependencyObject);
		if (flag) {
			this.RaiseCollectionChanged$0(System.Collections.Specialized.NotifyCollectionChangedAction.Remove, item, num);
		}
	}
	return flag;
};
System.Windows.DependencyObjectCollection$b1.prototype.IList_Add = function (value) {
	this.CheckReentrancy();
	var dependencyObject = JSIL.TryCast(value, System.Windows.DependencyObject);
	if (!(dependencyObject || (value === null))) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [System.String.Format($asm02.System.Windows.Resx.GetString$2("DependencyObjectCollection_ItemWrongType"), "value", "DependencyObject")]);
	}
	this._collection.Add(dependencyObject);
	var num = (this._collection.Count - 1);
	this.RaiseCollectionChanged$0(System.Collections.Specialized.NotifyCollectionChangedAction.Add, dependencyObject, num);
	return num;
};
System.Windows.DependencyObjectCollection$b1.prototype.IList_Clear = function () {
	this.CheckReentrancy();
	this._collection.Clear();
	this.RaiseReset();
};
System.Windows.DependencyObjectCollection$b1.prototype.IList_Contains = function (value) {
	var dependencyObject = JSIL.TryCast(value, System.Windows.DependencyObject);
	if (!(dependencyObject || (value === null))) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [System.String.Format($asm02.System.Windows.Resx.GetString$2("DependencyObjectCollection_ItemWrongType"), "value", "DependencyObject")]);
	}
	return this._collection.Contains(dependencyObject);
};
System.Windows.DependencyObjectCollection$b1.prototype.IList_IndexOf = function (value) {
	var dependencyObject = JSIL.TryCast(value, System.Windows.DependencyObject);
	if (!(dependencyObject || (value === null))) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [System.String.Format($asm02.System.Windows.Resx.GetString$2("DependencyObjectCollection_ItemWrongType"), "value", "DependencyObject")]);
	}
	return this._collection.IndexOf(dependencyObject);
};
System.Windows.DependencyObjectCollection$b1.prototype.IList_Insert = function (index, value) {
	this.CheckReentrancy();
	if (!((index >= 0) && (index <= this.Count))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["index"]);
	}
	var dependencyObject = JSIL.TryCast(value, System.Windows.DependencyObject);
	if (!(dependencyObject || (value === null))) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [System.String.Format($asm02.System.Windows.Resx.GetString$2("DependencyObjectCollection_ItemWrongType"), "value", "DependencyObject")]);
	}
	this._collection.Insert(index, dependencyObject);
	this.RaiseCollectionChanged$0(System.Collections.Specialized.NotifyCollectionChangedAction.Add, dependencyObject, index);
};
System.Windows.DependencyObjectCollection$b1.prototype.IList_get_IsFixedSize = function () {
	return this._collection.IsFixedSize;
};
System.Windows.DependencyObjectCollection$b1.prototype.IList_get_IsReadOnly = function () {
	return this._collection.IsReadOnly;
};
System.Windows.DependencyObjectCollection$b1.prototype.IList_Remove = function (value) {
	this.CheckReentrancy();
	var dependencyObject = JSIL.TryCast(value, System.Windows.DependencyObject);
	if (!(dependencyObject || (value === null))) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [System.String.Format($asm02.System.Windows.Resx.GetString$2("DependencyObjectCollection_ItemWrongType"), "value", "DependencyObject")]);
	}
	this._collection.Remove(dependencyObject);
};
System.Windows.DependencyObjectCollection$b1.prototype.IList_RemoveAt = function (index) {
	this.CheckReentrancy();
	if (!((index >= 0) && (index < this.Count))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["index"]);
	}
	var dependencyObject = this._collection.get_Item(index);
	this._collection.Remove(dependencyObject);
	this.RaiseCollectionChanged$0(System.Collections.Specialized.NotifyCollectionChangedAction.Remove, dependencyObject, index);
};
System.Windows.DependencyObjectCollection$b1.prototype.IList_get_Item = function (index) {
	if (!((index >= 0) && (index < this.Count))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["index"]);
	}
	return this._collection.get_Item(index);
};
System.Windows.DependencyObjectCollection$b1.prototype.IList_set_Item = function (index, value) {
	var oldItem = new JSIL.Variable(null);
	if (!((index >= 0) && (index < this.Count))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["index"]);
	}
	var dependencyObject = JSIL.TryCast(value, System.Windows.DependencyObject);
	if (!(dependencyObject || (value === null))) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [System.String.Format($asm02.System.Windows.Resx.GetString$2("DependencyObjectCollection_ItemWrongType"), "value", "DependencyObject")]);
	}
	this._collection.SetItemInternal(index, dependencyObject, /* ref */ oldItem);
	this.RaiseCollectionChanged$1(System.Collections.Specialized.NotifyCollectionChangedAction.Replace, dependencyObject, oldItem.value, index);
};
System.Windows.DependencyObjectCollection$b1.prototype.ICollection_CopyTo = function (array, index) {
	this._collection.CopyTo$1(array, index);
};
System.Windows.DependencyObjectCollection$b1.prototype.ICollection_get_Count = function () {
	return this._collection.Count;
};
System.Windows.DependencyObjectCollection$b1.prototype.ICollection_get_IsSynchronized = function () {
	return this._collection.IsSynchronized;
};
System.Windows.DependencyObjectCollection$b1.prototype.ICollection_get_SyncRoot = function () {
	return this._collection.SyncRoot;
};
System.Windows.DependencyObjectCollection$b1.prototype.GetEnumerator = function () {
	var $lGetEnumerator$gd__ = new ($asm02.System.Windows.DependencyObjectCollection$b1.$lGetEnumerator$gd__0.Of(this.T)) (0);
	$lGetEnumerator$gd__.$this = this;
	return $lGetEnumerator$gd__;
};
System.Windows.DependencyObjectCollection$b1.prototype.IEnumerable_GetEnumerator = function () {
	return this._collection.GetEnumerator();
};
JSIL.OverloadedMethod(System.Windows.DependencyObjectCollection$b1.prototype, "RaiseCollectionChanged", [
		["RaiseCollectionChanged$0", [System.Collections.Specialized.NotifyCollectionChangedAction, System.Object, System.Int32]], 
		["RaiseCollectionChanged$1", [System.Collections.Specialized.NotifyCollectionChangedAction, System.Object, System.Object, System.Int32]]
	]);
JSIL.MakeProperty(System.Windows.DependencyObjectCollection$b1.prototype, "Item", 
	System.Windows.DependencyObjectCollection$b1.prototype.get_Item, System.Windows.DependencyObjectCollection$b1.prototype.set_Item);
JSIL.MakeProperty(System.Windows.DependencyObjectCollection$b1.prototype, "Count", 
	System.Windows.DependencyObjectCollection$b1.prototype.get_Count, null);
JSIL.MakeProperty(System.Windows.DependencyObjectCollection$b1.prototype, "IsReadOnly", 
	System.Windows.DependencyObjectCollection$b1.prototype.get_IsReadOnly, null);
JSIL.MakeProperty(System.Windows.DependencyObjectCollection$b1.prototype, "IList_IsFixedSize", 
	System.Windows.DependencyObjectCollection$b1.prototype.IList_get_IsFixedSize, null);
JSIL.MakeProperty(System.Windows.DependencyObjectCollection$b1.prototype, "IList_IsReadOnly", 
	System.Windows.DependencyObjectCollection$b1.prototype.IList_get_IsReadOnly, null);
JSIL.MakeProperty(System.Windows.DependencyObjectCollection$b1.prototype, "IList_Item", 
	System.Windows.DependencyObjectCollection$b1.prototype.IList_get_Item, System.Windows.DependencyObjectCollection$b1.prototype.IList_set_Item);
JSIL.MakeProperty(System.Windows.DependencyObjectCollection$b1.prototype, "ICollection_Count", 
	System.Windows.DependencyObjectCollection$b1.prototype.ICollection_get_Count, null);
JSIL.MakeProperty(System.Windows.DependencyObjectCollection$b1.prototype, "ICollection_IsSynchronized", 
	System.Windows.DependencyObjectCollection$b1.prototype.ICollection_get_IsSynchronized, null);
JSIL.MakeProperty(System.Windows.DependencyObjectCollection$b1.prototype, "ICollection_SyncRoot", 
	System.Windows.DependencyObjectCollection$b1.prototype.ICollection_get_SyncRoot, null);
System.Windows.DependencyObjectCollection$b1.CollectionProperty = null;
System.Windows.DependencyObjectCollection$b1.prototype._collection = null;
System.Windows.DependencyObjectCollection$b1.prototype._busy = false;
System.Windows.DependencyObjectCollection$b1.prototype.CollectionChanged = null;
System.Windows.DependencyObjectCollection$b1._cctor = function () {
	System.Windows.DependencyObjectCollection$b1.Of(this.T).CollectionProperty = System.Windows.DependencyProperty.Register$0("DOCollection", $asm02.System.Windows.DOCollection, System.Windows.DependencyObject, null);
};

$asm02.System.Windows.DependencyObjectCollection$b1.$lGetEnumerator$gd__0.prototype.IEnumerator_MoveNext = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				try {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								switch (this.$state) {
									case 0: 
										this.$state = -1;
										this.$wrap2 = this.$this._collection.GetEnumerator();
										this.$state = 1;
										break;
									case 1: 
										__label1__ = "IL_88";
										continue __step1__;
									case 2: 
										this.$state = 1;
										break;
									default: 
										__label1__ = "IL_88";
										continue __step1__;
								}
								if (this.$wrap2.IEnumerator_MoveNext()) {
									this.item = this.$wrap2.IEnumerator$b1_Current;
									this.$current = JSIL.Cast(this.item, this.T);
									this.$state = 2;
									var result = true;
									return result;
								}
								this.$l$gm__Finally3();
								__label1__ = "IL_88";
								continue __step1__;
								break;
							case "IL_88":
								result = false;
								break __step1__;
						}
					}
				} catch ($exception) {
					this.IDisposable_Dispose();
					throw $exception;
				}
				return result;
				break __step0__;
		}
	}
};
$asm02.System.Windows.DependencyObjectCollection$b1.$lGetEnumerator$gd__0.prototype.IEnumerator$b1_get_Current = function () {
	return this.$current;
};
$asm02.System.Windows.DependencyObjectCollection$b1.$lGetEnumerator$gd__0.prototype.IEnumerator_Reset = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm02.System.Windows.DependencyObjectCollection$b1.$lGetEnumerator$gd__0.prototype.IDisposable_Dispose = function () {
	switch (this.$state) {
		case 1: 
		case 2: 
			try {
			} finally {
				this.$l$gm__Finally3();
			}
			return;
		default: 
			return;
	}
};
$asm02.System.Windows.DependencyObjectCollection$b1.$lGetEnumerator$gd__0.prototype.IEnumerator_get_Current = function () {
	return this.$current;
};
$asm02.System.Windows.DependencyObjectCollection$b1.$lGetEnumerator$gd__0.prototype._ctor = function ($l$g1__state) {
	System.Object.prototype._ctor.call(this);
	this.$state = $l$g1__state;
};
$asm02.System.Windows.DependencyObjectCollection$b1.$lGetEnumerator$gd__0.prototype.$l$gm__Finally3 = function () {
	this.$state = -1;
	if (this.$wrap2 !== null) {
		this.$wrap2.IDisposable_Dispose();
	}
};
JSIL.MakeProperty($asm02.System.Windows.DependencyObjectCollection$b1.$lGetEnumerator$gd__0.prototype, "IEnumerator$b1_Current", 
	$asm02.System.Windows.DependencyObjectCollection$b1.$lGetEnumerator$gd__0.prototype.IEnumerator$b1_get_Current, null);
JSIL.MakeProperty($asm02.System.Windows.DependencyObjectCollection$b1.$lGetEnumerator$gd__0.prototype, "IEnumerator_Current", 
	$asm02.System.Windows.DependencyObjectCollection$b1.$lGetEnumerator$gd__0.prototype.IEnumerator_get_Current, null);
$asm02.System.Windows.DependencyObjectCollection$b1.$lGetEnumerator$gd__0.prototype.$current = null;
$asm02.System.Windows.DependencyObjectCollection$b1.$lGetEnumerator$gd__0.prototype.$state = 0;
$asm02.System.Windows.DependencyObjectCollection$b1.$lGetEnumerator$gd__0.prototype.$this = null;
$asm02.System.Windows.DependencyObjectCollection$b1.$lGetEnumerator$gd__0.prototype.item = null;
$asm02.System.Windows.DependencyObjectCollection$b1.$lGetEnumerator$gd__0.prototype.$wrap2 = null;

$asm02.System.Windows.DOCollection.prototype._ctor = function () {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.DependencyObject).prototype._ctor$1.call(this, 371);
};
$asm02.System.Windows.DOCollection.prototype.get_ManagedPeerCollection = function () {
	if (this._treeItems === null) {
		this._treeItems = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.Windows.DependencyObject, System.Object), "_ctor$0", []);
	}
	return this._treeItems;
};
$asm02.System.Windows.DOCollection.prototype.AddInternal = function (value) {
	this.AddDependencyObject(value);
	this.ManagedPeerCollection.set_Item(value, null);
	if (!(System.Windows.DependencyObject.prototype.get_NeedsInheritanceContextChanges.call(this) || !value.NeedsInheritanceContextChanges)) {
		System.Windows.DependencyObject.prototype.UpdateParentInheritanceContextPropagation.call(this);
	}
	value.OnInheritanceContextChanged(this, System.EventArgs.Empty);
};
$asm02.System.Windows.DOCollection.prototype.ContainsInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.DependencyObject).prototype.ContainsDependencyObject.call(this, value);
};
$asm02.System.Windows.DOCollection.prototype.IndexOfInternal = function (value) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.DependencyObject).prototype.IndexOfDependencyObject.call(this, value);
};
$asm02.System.Windows.DOCollection.prototype.InsertInternal = function (index, value) {
	this.InsertDependencyObject(index, value);
	this.ManagedPeerCollection.set_Item(value, null);
	if (!(System.Windows.DependencyObject.prototype.get_NeedsInheritanceContextChanges.call(this) || !value.NeedsInheritanceContextChanges)) {
		System.Windows.DependencyObject.prototype.UpdateParentInheritanceContextPropagation.call(this);
	}
	value.OnInheritanceContextChanged(this, System.EventArgs.Empty);
};
$asm02.System.Windows.DOCollection.prototype.RemoveInternal = function (value) {
	var flag = System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.DependencyObject).prototype.RemoveDependencyObject.call(this, value);
	if (flag) {
		this.ManagedPeerCollection.Remove(value);
		value.OnInheritanceContextChanged(this, System.EventArgs.Empty);
	}
	return flag;
};
$asm02.System.Windows.DOCollection.prototype.ClearImpl = function () {
	var array = JSIL.Array.New(System.Windows.DependencyObject, System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.DependencyObject).prototype.get_Count.call(this));
	var i = 0;
	var enumerator = System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.DependencyObject).prototype.GetEnumerator.call(this);
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current;
			array[i++] = current;
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.DependencyObject).prototype.ClearImpl.call(this);
	this.ManagedPeerCollection.Clear();
__loop1__: 
	for (i = 0; i < array.length; ++i) {
		array[i].OnInheritanceContextChanged(this, System.EventArgs.Empty);
	}
};
$asm02.System.Windows.DOCollection.prototype.SetItemImplSkipMethodPack = function (index, value) {
	var dependencyObject = new JSIL.Variable(null);
	this.SetItemInternal(index, value, /* ref */ dependencyObject);
};
$asm02.System.Windows.DOCollection.prototype.SetItemInternal = function (index, value, /* ref */ oldDO) {
	oldDO.value = System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.DependencyObject).prototype.GetItemDependencyObject.call(this, index);
	this.InsertInternal(index, value);
	this.RemoveInternal(oldDO.value);
};
$asm02.System.Windows.DOCollection.prototype.GetItemImplSkipMethodPack = function (index) {
	return System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.DependencyObject).prototype.GetItemDependencyObject.call(this, index);
};
JSIL.MakeProperty($asm02.System.Windows.DOCollection.prototype, "ManagedPeerCollection", 
	$asm02.System.Windows.DOCollection.prototype.get_ManagedPeerCollection, null);
$asm02.System.Windows.DOCollection.prototype._treeItems = null;

System.Windows.Documents.FontSource.prototype._ctor$0 = function (stream) {
	System.Object.prototype._ctor.call(this);
	this._stream = stream;
	this._internalGlyphTypeface = null;
	this._cachedBuffer = null;
	this._cachedBufferSize = 0;
};
System.Windows.Documents.FontSource.prototype._ctor$1 = function (glyphtypeface) {
	System.Object.prototype._ctor.call(this);
	this._stream = null;
	this._internalGlyphTypeface = glyphtypeface.InternalGlyphTypeface;
	this._cachedBuffer = null;
	this._cachedBufferSize = 0;
};
System.Windows.Documents.FontSource.prototype.IsEmpty = function () {
	return ((this._stream === null) && (this._internalGlyphTypeface === null));
};
System.Windows.Documents.FontSource.prototype.IsStream = function () {
	return (this._stream !== null);
};
System.Windows.Documents.FontSource.prototype.SetTextFontSourceFromStream = function (obj) {
	if (JSIL.TryCast(this._stream, $asm02.MS.Internal.InternalMemoryStream) !== null) {
		$asm02.MS.Internal.XcpImports.SetFontSource$0(obj, JSIL.TryCast(this._stream, $asm02.MS.Internal.InternalMemoryStream));
		return;
	}
	var num = 0;
	if (this._cachedBuffer === null) {
		var num2 = 0;
		var num3 = 0;
		var num4 = 10240;
		var flag = false;
		try {
			num4 = this._stream.Length;
			var array = JSIL.Array.New(System.Byte, num4);
			flag = true;
			this._stream.Position = 0;
		} catch ($exception) {
			if (JSIL.CheckType($exception, System.NotSupportedException)) {
				array = JSIL.Array.New(System.Byte, num4);
			} else {
				throw $exception;
			}
		}
		num3 = this._stream.Read(array, num2, num4);
	__loop0__: 
		for (num = num3; (num3 !== 0) && (!flag || 
				(num < num4)); num += num3) {
			if (!flag) {
				array = System.Windows.Documents.FontSource.GrowArray(array);
			}
			num2 += num3;
			num3 = this._stream.Read(array, num2, num4);
		}
		this._cachedBuffer = array;
		this._cachedBufferSize = num;
	} else {
		num = this._cachedBufferSize;
	}
	var uri = (JSIL.ConcatString("stream://", this._stream.GetHashCode()));
	$asm02.MS.Internal.XcpImports.SetFontSource$2(obj, this._cachedBuffer, num, uri);
};
System.Windows.Documents.FontSource.prototype.SetTextFontSourceFromGlyphTypeface = function (obj) {
	$asm02.MS.Internal.XcpImports.SetFontSource$1(obj, this._internalGlyphTypeface);
};
System.Windows.Documents.FontSource.GrowArray = function (arr) {
	var array = JSIL.Array.New(System.Byte, (arr.length * 2));
	arr.CopyTo(array, 0);
	return array;
};
JSIL.OverloadedMethod(System.Windows.Documents.FontSource.prototype, "_ctor", [
		["_ctor$0", [System.IO.Stream]], 
		["_ctor$1", [System.Windows.Media.GlyphTypeface]]
	]);
System.Windows.Documents.FontSource.prototype._stream = null;
System.Windows.Documents.FontSource.prototype._internalGlyphTypeface = null;
System.Windows.Documents.FontSource.prototype._cachedBuffer = null;
System.Windows.Documents.FontSource.prototype._cachedBufferSize = 0;

$asm02.System.Windows.Documents.TextRange.prototype.get_Start = function () {
	return this._startPointer.GetNormalizedPosition();
};
$asm02.System.Windows.Documents.TextRange.prototype.set_Start = function (value) {
	this._startPointer = value;
};
$asm02.System.Windows.Documents.TextRange.prototype.get_End = function () {
	return this._endPointer.GetNormalizedPosition();
};
$asm02.System.Windows.Documents.TextRange.prototype.set_End = function (value) {
	this._endPointer = value;
};
$asm02.System.Windows.Documents.TextRange.prototype.GetText = function (maxLength) {
	return $asm02.MS.Internal.XcpImports.TextRange_GetText(this.Start, this.End, maxLength);
};
$asm02.System.Windows.Documents.TextRange.prototype.Compare = function (range) {
	if (range === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["range"]);
	}
	return ((range.Start.CompareTo(this.Start) === 0) && (range.End.CompareTo(this.End) === 0));
};
$asm02.System.Windows.Documents.TextRange.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
JSIL.MakeProperty($asm02.System.Windows.Documents.TextRange.prototype, "Start", 
	$asm02.System.Windows.Documents.TextRange.prototype.get_Start, $asm02.System.Windows.Documents.TextRange.prototype.set_Start);
JSIL.MakeProperty($asm02.System.Windows.Documents.TextRange.prototype, "End", 
	$asm02.System.Windows.Documents.TextRange.prototype.get_End, $asm02.System.Windows.Documents.TextRange.prototype.set_End);
$asm02.System.Windows.Documents.TextRange.prototype._startPointer = null;
$asm02.System.Windows.Documents.TextRange.prototype._endPointer = null;

$asm02.System.Windows.Documents.UIATextRange.prototype._ctor = function (position1, position2) {
	$asm02.System.Windows.Documents.TextRange.prototype._ctor.call(this);
	if (position1 === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["position1"]);
	}
	if (position2 === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["position2"]);
	}
	if (position1.RichTextBox !== position2.RichTextBox) {
		throw JSIL.New(System.NotSupportedException, "_ctor$1", [""]);
	}
	var normalizedPosition = position1.GetNormalizedPosition();
	var normalizedPosition2 = position2.GetNormalizedPosition();
	if (normalizedPosition.CompareTo(normalizedPosition2) > 0) {
		$asm02.System.Windows.Documents.TextRange.prototype.set_Start.call(this, normalizedPosition2);
		$asm02.System.Windows.Documents.TextRange.prototype.set_End.call(this, normalizedPosition);
		return;
	}
	$asm02.System.Windows.Documents.TextRange.prototype.set_Start.call(this, normalizedPosition);
	$asm02.System.Windows.Documents.TextRange.prototype.set_End.call(this, normalizedPosition2);
};
$asm02.System.Windows.Documents.UIATextRange.prototype.Clone = function () {
	return new $asm02.System.Windows.Documents.UIATextRange($asm02.System.Windows.Documents.TextRange.prototype.get_Start.call(this), $asm02.System.Windows.Documents.TextRange.prototype.get_End.call(this));
};
$asm02.System.Windows.Documents.UIATextRange.prototype.ExpandToEnclosingUnit = function (unit) {
	var textPointer = $asm02.System.Windows.Documents.TextRange.prototype.get_Start.call(this);
	var textPointer2 = $asm02.System.Windows.Documents.TextRange.prototype.get_Start.call(this);
	switch (Number(unit)) {
		case 0: 
			if (!textPointer.IsAtInsertionPosition) {
				textPointer = textPointer.GetNextInsertionPosition(System.Windows.Documents.LogicalDirection.Backward);
			}
			textPointer2 = textPointer.GetNextInsertionPosition(System.Windows.Documents.LogicalDirection.Forward);
			break;
		case 1: 
		case 3: 
		case 4: 
		case 5: 
		case 6: 
			var richTextBox = textPointer.RichTextBox;
			textPointer = richTextBox.ContentStart.GetNormalizedPosition();
			textPointer2 = richTextBox.ContentEnd.GetNormalizedPosition();
			break;
		case 2: 
			if (!$asm02.System.Windows.Documents.UIATextRange.IsAtWordBoundary(textPointer)) {
				textPointer = textPointer.GetNextWordBoundaryPosition(System.Windows.Documents.LogicalDirection.Backward);
			}
			textPointer2 = textPointer.GetNextWordBoundaryPosition(System.Windows.Documents.LogicalDirection.Forward);
			break;
		default: 
			throw JSIL.New(System.ArgumentException, "_ctor$1", ["unit"]);
	}
	if (textPointer2 === null) {
		textPointer2 = textPointer;
	}
	$asm02.System.Windows.Documents.TextRange.prototype.set_Start.call(this, textPointer);
	$asm02.System.Windows.Documents.TextRange.prototype.set_End.call(this, textPointer2);
};
$asm02.System.Windows.Documents.UIATextRange.prototype.Move = function (unit, count) {
	var num = new JSIL.Variable(0);
	if (count !== 0) {
		this.ExpandToEnclosingUnit(unit);
		var nextPositionByUnits = $asm02.System.Windows.Documents.UIATextRange.GetNextPositionByUnits($asm02.System.Windows.Documents.TextRange.prototype.get_Start.call(this), unit, count, /* ref */ num);
		if (!(!((nextPositionByUnits.CompareTo($asm02.System.Windows.Documents.TextRange.prototype.get_Start.call(this)) === 0) && 
					(nextPositionByUnits.LogicalDirection !== $asm02.System.Windows.Documents.TextRange.prototype.get_Start.call(this).LogicalDirection)) && 
				!((count > 0) && 
					(nextPositionByUnits.CompareTo($asm02.System.Windows.Documents.TextRange.prototype.get_Start.call(this)) > 0)) && ((count >= 0) || 
					(nextPositionByUnits.CompareTo($asm02.System.Windows.Documents.TextRange.prototype.get_Start.call(this)) >= 0)))) {
			$asm02.System.Windows.Documents.TextRange.prototype.set_Start.call(this, nextPositionByUnits);
			this.ExpandToEnclosingUnit(unit);
			if (num.value === 0) {
				num.value = (count > 0) ? 1 : -1;
			}
		}
	}
	return num.value;
};
$asm02.System.Windows.Documents.UIATextRange.prototype.MoveEndpointByUnit = function (endpoint, unit, count) {
	var num = 0;
	if (count !== 0) {
		var flag = new JSIL.Variable(false);
		var flag2 = (endpoint === $asm02.System.Windows.Documents.RangeEndpoint.Start);
		var textPointer = flag2 ? $asm02.System.Windows.Documents.TextRange.prototype.get_Start.call(this) : $asm02.System.Windows.Documents.TextRange.prototype.get_End.call(this);
		var textPointer2 = $asm02.System.Windows.Documents.UIATextRange.GetUnitBoundary(
			textPointer, 
			flag2, 
			(count < 0) ? System.Windows.Documents.LogicalDirection.Backward : System.Windows.Documents.LogicalDirection.Forward, 
			unit, 
			/* ref */ flag
		);
		if (flag.value) {
			num = (count > 0) ? 1 : -1;
		}
		if (count !== num) {
			var num2 = new JSIL.Variable(0);
			textPointer2 = $asm02.System.Windows.Documents.UIATextRange.GetNextPositionByUnits(textPointer2, unit, (count - num), /* ref */ num2);
			num += num2.value;
		}
		if (!(!((count > 0) && 
					(textPointer2.CompareTo(textPointer) > 0)) && 
				!((count < 0) && 
					(textPointer2.CompareTo(textPointer) < 0)) && ((textPointer2.CompareTo(textPointer) !== 0) || 
					(textPointer2.LogicalDirection === textPointer.LogicalDirection)))) {
			if (flag2) {
				$asm02.System.Windows.Documents.TextRange.prototype.set_Start.call(this, textPointer2);
			} else {
				$asm02.System.Windows.Documents.TextRange.prototype.set_End.call(this, textPointer2);
			}
			if (num === 0) {
				num = (count > 0) ? 1 : -1;
			}
		}
		if ($asm02.System.Windows.Documents.TextRange.prototype.get_Start.call(this).CompareTo($asm02.System.Windows.Documents.TextRange.prototype.get_End.call(this)) > 0) {
			if (flag2) {
				$asm02.System.Windows.Documents.TextRange.prototype.set_End.call(this, $asm02.System.Windows.Documents.TextRange.prototype.get_Start.call(this));
			} else {
				$asm02.System.Windows.Documents.TextRange.prototype.set_Start.call(this, $asm02.System.Windows.Documents.TextRange.prototype.get_End.call(this));
			}
		}
	}
	return num;
};
$asm02.System.Windows.Documents.UIATextRange.prototype.MoveEndpointByRange = function (endpoint, targetRange, targetEndpoint) {
	var textPointer = !JSIL.Cast(targetEndpoint, System.Boolean) ? targetRange.Start : targetRange.End;
	if (!JSIL.Cast(endpoint, System.Boolean)) {
		$asm02.System.Windows.Documents.TextRange.prototype.set_Start.call(this, textPointer);
		if ($asm02.System.Windows.Documents.TextRange.prototype.get_Start.call(this).CompareTo($asm02.System.Windows.Documents.TextRange.prototype.get_End.call(this)) > 0) {
			$asm02.System.Windows.Documents.TextRange.prototype.set_End.call(this, $asm02.System.Windows.Documents.TextRange.prototype.get_Start.call(this));
			return;
		}
	} else {
		$asm02.System.Windows.Documents.TextRange.prototype.set_End.call(this, textPointer);
		if ($asm02.System.Windows.Documents.TextRange.prototype.get_Start.call(this).CompareTo($asm02.System.Windows.Documents.TextRange.prototype.get_End.call(this)) > 0) {
			$asm02.System.Windows.Documents.TextRange.prototype.set_Start.call(this, $asm02.System.Windows.Documents.TextRange.prototype.get_End.call(this));
		}
	}
};
$asm02.System.Windows.Documents.UIATextRange.prototype.CompareEndpoints = function (endpoint, targetRange, targetEndpoint) {
	var textPointer = !JSIL.Cast(endpoint, System.Boolean) ? $asm02.System.Windows.Documents.TextRange.prototype.get_Start.call(this) : $asm02.System.Windows.Documents.TextRange.prototype.get_End.call(this);
	var position = !JSIL.Cast(targetEndpoint, System.Boolean) ? targetRange.Start : targetRange.End;
	return textPointer.CompareTo(position);
};
$asm02.System.Windows.Documents.UIATextRange.prototype.GetEnclosingElement = function () {
	return $asm02.MS.Internal.XcpImports.UIATextRange_GetEnclosingElement($asm02.System.Windows.Documents.TextRange.prototype.get_Start.call(this), $asm02.System.Windows.Documents.TextRange.prototype.get_End.call(this));
};
$asm02.System.Windows.Documents.UIATextRange.prototype.GetChildren = function () {
	return $asm02.MS.Internal.XcpImports.UIATextRange_GetChildren($asm02.System.Windows.Documents.TextRange.prototype.get_Start.call(this), $asm02.System.Windows.Documents.TextRange.prototype.get_End.call(this));
};
$asm02.System.Windows.Documents.UIATextRange.prototype.GetBoundingRectangles = function () {
	var textViewCoordinate = new System.Windows.Point();
	var list = new (System.Collections.Generic.List$b1.Of(System.Windows.Rect)) ();
	if ($asm02.System.Windows.Documents.TextRange.prototype.get_Start.call(this).CompareTo($asm02.System.Windows.Documents.TextRange.prototype.get_End.call(this)) !== 0) {
		var list2 = $asm02.MS.Internal.XcpImports.UIATextRange_GetBoundingRectangles($asm02.System.Windows.Documents.TextRange.prototype.get_Start.call(this), $asm02.System.Windows.Documents.TextRange.prototype.get_End.call(this));
		var visibleRectangle = $asm02.System.Windows.Documents.TextRange.prototype.get_Start.call(this).RichTextBox.GetVisibleRectangle().MemberwiseClone();
		var enumerator = (list2.GetEnumerator());
		try {
		__loop0__: 
			while (enumerator.MoveNext()) {
				var current = enumerator.Current.MemberwiseClone();
				textViewCoordinate._ctor(current.X, current.Y);
				var point = $asm02.System.Windows.Documents.TextRange.prototype.get_Start.call(this).RichTextBox.TransformTextViewCoordinateToTextBox(textViewCoordinate.MemberwiseClone()).MemberwiseClone();
				var empty = System.Windows.Rect.Empty.MemberwiseClone();
				empty.X = System.Math.Max(point.X, visibleRectangle.X);
				empty.Y = System.Math.Max(point.Y, visibleRectangle.Y);
				var val = (System.Math.Min((point.X + current.Width), (visibleRectangle.X + visibleRectangle.Width)) - empty.X);
				var val2 = (System.Math.Min((point.Y + current.Height), (visibleRectangle.Y + visibleRectangle.Height)) - empty.Y);
				empty.Width = (Math.round(System.Math.Max(0, val)));
				empty.Height = (Math.round(System.Math.Max(0, val2)));
				empty.X = (Math.round(empty.X));
				empty.Y = (Math.round(empty.Y));
				if (!((empty.Width <= 0) || (empty.Height <= 0))) {
					list.Add(empty.MemberwiseClone());
				}
			}
		} finally {
			enumerator.IDisposable_Dispose();
		}
	}
	var array = JSIL.Array.New(System.Double, (list.Count * 4));
__loop1__: 
	for (var i = 0; i < list.Count; ++i) {
		array[(4 * i)] = list.get_Item(i).X;
		array[((4 * i) + 1)] = list.get_Item(i).Y;
		array[((4 * i) + 2)] = list.get_Item(i).Width;
		array[((4 * i) + 3)] = list.get_Item(i).Height;
	}
	return array;
};
$asm02.System.Windows.Documents.UIATextRange.GetVisibleRanges = function (richTextBox) {
	var result = null;
	var visibleRectangle = richTextBox.GetVisibleRectangle().MemberwiseClone();
	if (!visibleRectangle.IsEmpty) {
		var positionFromPoint = richTextBox.GetPositionFromPoint(new System.Windows.Point((visibleRectangle.X + 1), (visibleRectangle.Y + 1)));
		var positionFromPoint2 = richTextBox.GetPositionFromPoint(new System.Windows.Point((visibleRectangle.X + visibleRectangle.Width), (visibleRectangle.Y + visibleRectangle.Height)));
		result = JSIL.Array.New($asm02.System.Windows.Documents.UIATextRange, [new $asm02.System.Windows.Documents.UIATextRange(positionFromPoint, positionFromPoint2)]);
	}
	return result;
};
$asm02.System.Windows.Documents.UIATextRange.prototype.FindText = function (text, backward, ignoreCase) {
	throw JSIL.New(System.NotImplementedException, "_ctor$0", []);
};
$asm02.System.Windows.Documents.UIATextRange.prototype.FindAttribute = function () {
	throw JSIL.New(System.NotImplementedException, "_ctor$0", []);
};
$asm02.System.Windows.Documents.UIATextRange.prototype.GetAttributeValue = function () {
	throw JSIL.New(System.NotImplementedException, "_ctor$0", []);
};
$asm02.System.Windows.Documents.UIATextRange.prototype.Select = function () {
	throw JSIL.New(System.NotImplementedException, "_ctor$0", []);
};
$asm02.System.Windows.Documents.UIATextRange.prototype.ScrollIntoView = function (alignToTop) {
	throw JSIL.New(System.NotImplementedException, "_ctor$0", []);
};
$asm02.System.Windows.Documents.UIATextRange.IsAtWordBoundary = function (position) {
	var nextWordBoundaryPosition = position.GetNextWordBoundaryPosition(System.Windows.Documents.LogicalDirection.Backward);
	var nextWordBoundaryPosition2 = nextWordBoundaryPosition.GetNextWordBoundaryPosition(System.Windows.Documents.LogicalDirection.Forward);
	return !((nextWordBoundaryPosition.CompareTo(position) !== 0) && (nextWordBoundaryPosition2.CompareTo(position) !== 0));
};
$asm02.System.Windows.Documents.UIATextRange.GetNextPositionByUnits = function (position, unit, count, /* ref */ movedCount) {
	var i = 0;
	var num = (count === -2147483648) ? 2147483647 : Math.abs(count);
	var textPointer = position;
	var result = position;
	var logicalDirection = (count > 0) ? System.Windows.Documents.LogicalDirection.Forward : System.Windows.Documents.LogicalDirection.Backward;
	switch (Number(unit)) {
		case 0: 
		__loop0__: 
			for (; i < num; ++i) {
				textPointer = textPointer.GetNextInsertionPosition(logicalDirection);
				if (textPointer === null) {
					break __loop0__;
				}
				result = textPointer;
			}
			break;
		case 1: 
		case 3: 
		case 4: 
		case 5: 
		case 6: 
			var richTextBox = position.RichTextBox;
			if (logicalDirection === System.Windows.Documents.LogicalDirection.Forward) {
				if (textPointer.CompareTo(richTextBox.ContentEnd) !== 0) {
					result = richTextBox.ContentEnd.GetNormalizedPosition();
					++i;
				}
			} else if (textPointer.CompareTo(richTextBox.ContentStart) !== 0) {
				result = richTextBox.ContentStart.GetNormalizedPosition();
				++i;
			}
			break;
		case 2: 
		__loop1__: 
			for (; i < num; ++i) {
				textPointer = textPointer.GetNextWordBoundaryPosition(logicalDirection);
				if (textPointer === null) {
					break __loop1__;
				}
				result = textPointer;
			}
			break;
		default: 
			throw JSIL.New(System.ArgumentException, "_ctor$1", ["unit"]);
	}
	movedCount.value = (logicalDirection === System.Windows.Documents.LogicalDirection.Forward) ? i : -i;
	return result;
};
$asm02.System.Windows.Documents.UIATextRange.GetUnitBoundary = function (position, isStart, direction, unit, /* ref */ moved) {
	var textPointer = null;
	moved.value = false;
	switch (Number(unit)) {
		case 0: 
			if (!position.IsAtInsertionPosition) {
				textPointer = position.GetNextInsertionPosition(direction);
			}
			break;
		case 1: 
		case 3: 
		case 4: 
		case 5: 
		case 6: 
			var richTextBox = position.RichTextBox;
			if (direction === System.Windows.Documents.LogicalDirection.Forward) {
				if (position.CompareTo(richTextBox.ContentEnd) !== 0) {
					textPointer = richTextBox.ContentEnd;
				}
			} else if (position.CompareTo(richTextBox.ContentStart) !== 0) {
				textPointer = richTextBox.ContentStart;
			}
			break;
		case 2: 
			if (!$asm02.System.Windows.Documents.UIATextRange.IsAtWordBoundary(position)) {
				textPointer = position.GetNextWordBoundaryPosition(direction);
			}
			break;
		default: 
			throw JSIL.New(System.ArgumentException, "_ctor$1", ["unit"]);
	}
	if (textPointer === null) {
		textPointer = position;
	} else {
		moved.value = true;
	}
	return textPointer;
};

System.Windows.Documents.TextPointer.prototype._ctor = function (textPointer) {
	System.Object.prototype._ctor.call(this);
	if (textPointer === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["textPointer"]);
	}
	this._internalTextPointer = textPointer;
};
System.Windows.Documents.TextPointer.prototype.CompareTo = function (position) {
	if (position === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["position"]);
	}
	if (this.RichTextBox !== position.RichTextBox) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", ["position"]);
	}
	return $asm02.MS.Internal.XcpImports.TextPointer_CompareTo(this, position);
};
System.Windows.Documents.TextPointer.prototype.GetCharacterRect = function (direction) {
	return $asm02.MS.Internal.XcpImports.TextPointer_GetCharacterRect(this, direction);
};
System.Windows.Documents.TextPointer.prototype.GetNextInsertionPosition = function (direction) {
	return $asm02.MS.Internal.XcpImports.TextPointer_GetNextInsertionPosition(this, direction);
};
System.Windows.Documents.TextPointer.prototype.GetPositionAtOffset = function (offset, direction) {
	return $asm02.MS.Internal.XcpImports.TextPointer_GetPositionAtOffset(this, offset, direction);
};
System.Windows.Documents.TextPointer.prototype.GetNextWordBoundaryPosition = function (direction) {
	return $asm02.MS.Internal.XcpImports.TextPointer_GetNextWordBoundaryPosition(this, direction);
};
System.Windows.Documents.TextPointer.prototype.GetNormalizedPosition = function () {
	return $asm02.MS.Internal.XcpImports.TextPointer_GetNormalizedPosition(this);
};
System.Windows.Documents.TextPointer.prototype.get_InternalPointer = function () {
	return this._internalTextPointer;
};
System.Windows.Documents.TextPointer.prototype.get_Offset = function () {
	return $asm02.MS.Internal.XcpImports.TextPointer_GetOffset(this);
};
System.Windows.Documents.TextPointer.prototype.get_LogicalDirection = function () {
	return $asm02.MS.Internal.XcpImports.TextPointer_GetLogicalDirection(this);
};
System.Windows.Documents.TextPointer.prototype.get_Parent = function () {
	return $asm02.MS.Internal.XcpImports.TextPointer_GetParent(this);
};
System.Windows.Documents.TextPointer.prototype.get_IsAtInsertionPosition = function () {
	return $asm02.MS.Internal.XcpImports.TextPointer_IsAtInsertionPosition(this);
};
System.Windows.Documents.TextPointer.prototype.get_RichTextBox = function () {
	return $asm02.MS.Internal.XcpImports.TextPointer_GetRichTextBox$1(this);
};
JSIL.MakeProperty(System.Windows.Documents.TextPointer.prototype, "InternalPointer", 
	System.Windows.Documents.TextPointer.prototype.get_InternalPointer, null);
JSIL.MakeProperty(System.Windows.Documents.TextPointer.prototype, "Offset", 
	System.Windows.Documents.TextPointer.prototype.get_Offset, null);
JSIL.MakeProperty(System.Windows.Documents.TextPointer.prototype, "LogicalDirection", 
	System.Windows.Documents.TextPointer.prototype.get_LogicalDirection, null);
JSIL.MakeProperty(System.Windows.Documents.TextPointer.prototype, "Parent", 
	System.Windows.Documents.TextPointer.prototype.get_Parent, null);
JSIL.MakeProperty(System.Windows.Documents.TextPointer.prototype, "IsAtInsertionPosition", 
	System.Windows.Documents.TextPointer.prototype.get_IsAtInsertionPosition, null);
JSIL.MakeProperty(System.Windows.Documents.TextPointer.prototype, "RichTextBox", 
	System.Windows.Documents.TextPointer.prototype.get_RichTextBox, null);
System.Windows.Documents.TextPointer.prototype._internalTextPointer = null;

System.Windows.Documents.TextSelection.prototype._ctor = function (richTextBox) {
	System.Object.prototype._ctor.call(this);
	this._richTextBox = richTextBox;
};
System.Windows.Documents.TextSelection.prototype.ApplyPropertyValue = function (formattingProperty, value) {
	$asm02.MS.Internal.XcpImports.RichTextSelection_SetPropertyValue(this._richTextBox, formattingProperty, value);
};
System.Windows.Documents.TextSelection.prototype.GetPropertyValue = function (formattingProperty) {
	return $asm02.MS.Internal.XcpImports.RichTextSelection_GetPropertyValue(this._richTextBox, formattingProperty);
};
System.Windows.Documents.TextSelection.prototype.Insert = function (element) {
	if (element === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["element"]);
	}
	$asm02.MS.Internal.XcpImports.RichTextSelection_Insert(this._richTextBox, element);
};
System.Windows.Documents.TextSelection.prototype.Select = function (anchorPosition, movingPosition) {
	if (anchorPosition === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["anchorPosition"]);
	}
	if (movingPosition === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["movingPosition"]);
	}
	if (anchorPosition.RichTextBox !== this._richTextBox) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", ["anchorPosition"]);
	}
	if (movingPosition.RichTextBox !== this._richTextBox) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", ["movingPosition"]);
	}
	$asm02.MS.Internal.XcpImports.RichTextSelection_Select(this._richTextBox, anchorPosition, movingPosition);
};
System.Windows.Documents.TextSelection.prototype.get_Text = function () {
	return $asm02.MS.Internal.XcpImports.RichTextSelection_GetText(this._richTextBox, false);
};
System.Windows.Documents.TextSelection.prototype.set_Text = function (value) {
	if (value === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["value"]);
	}
	$asm02.MS.Internal.XcpImports.RichTextSelection_SetText(this._richTextBox, false, value);
};
System.Windows.Documents.TextSelection.prototype.get_Xaml = function () {
	return $asm02.MS.Internal.XcpImports.RichTextSelection_GetText(this._richTextBox, true);
};
System.Windows.Documents.TextSelection.prototype.set_Xaml = function (value) {
	if (value === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["value"]);
	}
	var richTextXAMLValidator = new $asm02.MS.Internal.RichTextXAMLValidator();
	if (!richTextXAMLValidator.ValidateXAML(value)) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", ["value"]);
	}
	$asm02.MS.Internal.XcpImports.RichTextSelection_SetText(this._richTextBox, true, value);
};
System.Windows.Documents.TextSelection.prototype.get_Start = function () {
	return $asm02.MS.Internal.XcpImports.RichTextSelection_GetEdge(this._richTextBox, $asm02.System.Windows.Documents.ElementEdge.ContentStart);
};
System.Windows.Documents.TextSelection.prototype.get_End = function () {
	return $asm02.MS.Internal.XcpImports.RichTextSelection_GetEdge(this._richTextBox, $asm02.System.Windows.Documents.ElementEdge.ContentEnd);
};
JSIL.MakeProperty(System.Windows.Documents.TextSelection.prototype, "Text", 
	System.Windows.Documents.TextSelection.prototype.get_Text, System.Windows.Documents.TextSelection.prototype.set_Text);
JSIL.MakeProperty(System.Windows.Documents.TextSelection.prototype, "Xaml", 
	System.Windows.Documents.TextSelection.prototype.get_Xaml, System.Windows.Documents.TextSelection.prototype.set_Xaml);
JSIL.MakeProperty(System.Windows.Documents.TextSelection.prototype, "Start", 
	System.Windows.Documents.TextSelection.prototype.get_Start, null);
JSIL.MakeProperty(System.Windows.Documents.TextSelection.prototype, "End", 
	System.Windows.Documents.TextSelection.prototype.get_End, null);
System.Windows.Documents.TextSelection.prototype._richTextBox = null;

System.Windows.Analytics.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
	$asm02.MS.Internal.XcpImports.Analytics_Start$1();
};
System.Windows.Analytics.prototype.Finalize = function () {
	try {
		$asm02.MS.Internal.XcpImports.Analytics_Stop$1();
	} finally {
		System.Object.prototype.Finalize.call(this);
	}
};
System.Windows.Analytics.prototype.get_AverageProcessLoad = function () {
	return $asm02.MS.Internal.XcpImports.Analytics_GetAverageProcessLoad$1();
};
System.Windows.Analytics.prototype.get_AverageProcessorLoad = function () {
	return $asm02.MS.Internal.XcpImports.Analytics_GetAverageProcessorLoad$1();
};
System.Windows.Analytics.prototype.get_GpuCollection = function () {
	return $asm02.MS.Internal.XcpImports.Analytics_GetGpuInformation();
};
System.Windows.Analytics.get_ClientInformation = function () {
	return $asm02.MS.Internal.XcpImports.GetClientInformation();
};
JSIL.MakeProperty(System.Windows.Analytics.prototype, "AverageProcessLoad", 
	System.Windows.Analytics.prototype.get_AverageProcessLoad, null);
JSIL.MakeProperty(System.Windows.Analytics.prototype, "AverageProcessorLoad", 
	System.Windows.Analytics.prototype.get_AverageProcessorLoad, null);
JSIL.MakeProperty(System.Windows.Analytics.prototype, "GpuCollection", 
	System.Windows.Analytics.prototype.get_GpuCollection, null);
JSIL.MakeProperty(System.Windows.Analytics, "ClientInformation", 
	System.Windows.Analytics.get_ClientInformation, null);

System.Windows.GpuInformation.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
System.Windows.GpuInformation.prototype.get_VendorId = function () {
	return this.VendorId$value;
};
System.Windows.GpuInformation.prototype.set_VendorId = function (value) {
	this.VendorId$value = value;
};
System.Windows.GpuInformation.prototype.get_DeviceId = function () {
	return this.DeviceId$value;
};
System.Windows.GpuInformation.prototype.set_DeviceId = function (value) {
	this.DeviceId$value = value;
};
System.Windows.GpuInformation.prototype.get_DriverVersion = function () {
	return this.DriverVersion$value;
};
System.Windows.GpuInformation.prototype.set_DriverVersion = function (value) {
	this.DriverVersion$value = value;
};
JSIL.MakeProperty(System.Windows.GpuInformation.prototype, "VendorId", 
	System.Windows.GpuInformation.prototype.get_VendorId, System.Windows.GpuInformation.prototype.set_VendorId);
JSIL.MakeProperty(System.Windows.GpuInformation.prototype, "DeviceId", 
	System.Windows.GpuInformation.prototype.get_DeviceId, System.Windows.GpuInformation.prototype.set_DeviceId);
JSIL.MakeProperty(System.Windows.GpuInformation.prototype, "DriverVersion", 
	System.Windows.GpuInformation.prototype.get_DriverVersion, System.Windows.GpuInformation.prototype.set_DriverVersion);
System.Windows.GpuInformation.prototype.VendorId$value = 0;
System.Windows.GpuInformation.prototype.DeviceId$value = 0;
System.Windows.GpuInformation.prototype.DriverVersion$value = null;

System.Windows.DataFormats.FileDrop = null;
System.Windows.DataFormats._cctor = function () {
	System.Windows.DataFormats.FileDrop = "FileDrop";
};

System.Windows.DataObject.prototype._ctor$0 = function () {
	System.Object.prototype._ctor.call(this);
};
System.Windows.DataObject.prototype._ctor$1 = function (data) {
	System.Object.prototype._ctor.call(this);
	throw JSIL.New(System.NotImplementedException, "_ctor$0", []);
};
System.Windows.DataObject.prototype.GetData$0 = function (format) {
	this.CheckDataAccess();
	if (format == System.Windows.DataFormats.FileDrop) {
		return this._data;
	}
	throw JSIL.New(System.ArgumentException, "_ctor$1", ["format"]);
};
System.Windows.DataObject.prototype.GetData$1 = function (format) {
	this.CheckDataAccess();
	throw JSIL.New(System.NotImplementedException, "_ctor$0", []);
};
System.Windows.DataObject.prototype.GetData$2 = function (format, autoConvert) {
	this.CheckDataAccess();
	throw JSIL.New(System.NotImplementedException, "_ctor$0", []);
};
System.Windows.DataObject.prototype.GetDataPresent$0 = function (format) {
	this.CheckDataAccess();
	return ((format == System.Windows.DataFormats.FileDrop) && (this._data !== null));
};
System.Windows.DataObject.prototype.GetDataPresent$1 = function (format) {
	this.CheckDataAccess();
	throw JSIL.New(System.NotImplementedException, "_ctor$0", []);
};
System.Windows.DataObject.prototype.GetDataPresent$2 = function (format, autoConvert) {
	this.CheckDataAccess();
	throw JSIL.New(System.NotImplementedException, "_ctor$0", []);
};
System.Windows.DataObject.prototype.GetFormats$0 = function () {
	this.CheckDataAccess();
	if (this._data === null) {
		return JSIL.Array.New(System.String, 0);
	}
	return JSIL.Array.New(System.String, [System.Windows.DataFormats.FileDrop]);
};
System.Windows.DataObject.prototype.GetFormats$1 = function (autoConvert) {
	this.CheckDataAccess();
	throw JSIL.New(System.NotImplementedException, "_ctor$0", []);
};
System.Windows.DataObject.prototype.SetData$0 = function (data) {
	this.CheckDataAccess();
	throw JSIL.New(System.NotImplementedException, "_ctor$0", []);
};
System.Windows.DataObject.prototype.SetData$1 = function (format, data) {
	this.CheckDataAccess();
	throw JSIL.New(System.NotImplementedException, "_ctor$0", []);
};
System.Windows.DataObject.prototype.SetData$2 = function (format, data) {
	this.CheckDataAccess();
	throw JSIL.New(System.NotImplementedException, "_ctor$0", []);
};
System.Windows.DataObject.prototype.SetData$3 = function (format, data, autoConvert) {
	this.CheckDataAccess();
	throw JSIL.New(System.NotImplementedException, "_ctor$0", []);
};
System.Windows.DataObject.prototype.get_AllowDataAccess = function () {
	return this.AllowDataAccess$value;
};
System.Windows.DataObject.prototype.set_AllowDataAccess = function (value) {
	this.AllowDataAccess$value = value;
};
System.Windows.DataObject.prototype.SetDataInternal = function (str) {
	if (System.String.IsNullOrEmpty(str)) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["str"]);
	}
	var array = this.CreateFileInfo(str);
	if (array !== null) {
		this._data = array;
	}
};
System.Windows.DataObject.prototype.CreateFileInfo = function (str) {
	if (!System.String.IsNullOrEmpty(str)) {
		var array = str.Split(JSIL.Array.New(System.Char, ["\n"]));
		var list = new (System.Collections.Generic.List$b1.Of(System.IO.FileInfo)) ();
		var array2 = array;
	__loop0__: 
		for (var i = 0; i < array2.length; ++i) {
			var text = array2[i];
			if (!System.String.IsNullOrEmpty(text)) {
				var uri = JSIL.New(System.Uri, "_ctor$0", [text]);
				if (System.Uri.op_Inequality(uri, null)) {
					var fileInfo = System.IO.FileInfo.UnsafeCreateFileInfo(uri.LocalPath);
					if (fileInfo !== null) {
						list.Add(fileInfo);
					}
				}
			}
		}
		return list.ToArray();
	}
	return null;
};
System.Windows.DataObject.prototype.CheckDataAccess = function () {
	if (!this.AllowDataAccess) {
		throw JSIL.New(System.Security.SecurityException, "_ctor$0", []);
	}
};
JSIL.OverloadedMethod(System.Windows.DataObject.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Object]]
	]);
JSIL.OverloadedMethod(System.Windows.DataObject.prototype, "GetData", [
		["GetData$0", [System.String]], 
		["GetData$1", [System.Type]], 
		["GetData$2", [System.String, System.Boolean]]
	]);
JSIL.OverloadedMethod(System.Windows.DataObject.prototype, "GetDataPresent", [
		["GetDataPresent$0", [System.String]], 
		["GetDataPresent$1", [System.Type]], 
		["GetDataPresent$2", [System.String, System.Boolean]]
	]);
JSIL.OverloadedMethod(System.Windows.DataObject.prototype, "GetFormats", [
		["GetFormats$0", []], 
		["GetFormats$1", [System.Boolean]]
	]);
JSIL.OverloadedMethod(System.Windows.DataObject.prototype, "SetData", [
		["SetData$0", [System.Object]], 
		["SetData$1", [System.String, System.Object]], 
		["SetData$2", [System.Type, System.Object]], 
		["SetData$3", [System.String, System.Object, System.Boolean]]
	]);
JSIL.MakeProperty(System.Windows.DataObject.prototype, "AllowDataAccess", 
	System.Windows.DataObject.prototype.get_AllowDataAccess, System.Windows.DataObject.prototype.set_AllowDataAccess);
System.Windows.DataObject.prototype._data = null;
System.Windows.DataObject.prototype.AllowDataAccess$value = false;

System.Windows.DurationConverter.prototype._ctor = function () {
	System.ComponentModel.TypeConverter.prototype._ctor.call(this);
};
System.Windows.DurationConverter.prototype.CanConvertFrom = function (context, sourceType) {
	return (sourceType === System.String);
};
System.Windows.DurationConverter.prototype.ConvertFrom = function (context, culture, value) {
	return new System.Windows.Duration(System.TimeSpan.Parse$0(JSIL.Cast(value, System.String)));
};

System.Windows.FontStretch.prototype._ctor = function (stretch) {
	this._stretch = stretch;
};
System.Windows.FontStretch.prototype.get_Stretch = function () {
	if (this._stretch === 0) {
		this._stretch = System.Windows.FontStretchType.Medium;
	}
	return this._stretch;
};
System.Windows.FontStretch.op_Equality = function (left, right) {
	return (left.Stretch === right.Stretch);
};
System.Windows.FontStretch.op_Inequality = function (left, right) {
	return !System.Windows.FontStretch.op_Equality(left, right);
};
System.Windows.FontStretch.prototype.Equals = function (obj) {
	return (JSIL.TryCast(obj, System.Windows.FontStretch) && System.Windows.FontStretch.op_Equality(this.MemberwiseClone(), JSIL.Cast(obj, System.Windows.FontStretch).MemberwiseClone()));
};
System.Windows.FontStretch.prototype.GetHashCode = function () {
	return Math.floor(this.Stretch);
};
System.Windows.FontStretch.prototype.toString = function () {
	var result = "Normal";
	switch (Number(this._stretch)) {
		case 1: 
			result = "UltraCondensed";
			break;
		case 2: 
			result = "ExtraCondensed";
			break;
		case 3: 
			result = "Condensed";
			break;
		case 4: 
			result = "SemiCondensed";
			break;
		case 5: 
			result = "Normal";
			break;
		case 6: 
			result = "SemiExpanded";
			break;
		case 7: 
			result = "Expanded";
			break;
		case 8: 
			result = "ExtraExpanded";
			break;
		case 9: 
			result = "UltraExpanded";
			break;
	}
	return result;
};
JSIL.MakeProperty(System.Windows.FontStretch.prototype, "Stretch", 
	System.Windows.FontStretch.prototype.get_Stretch, null);
System.Windows.FontStretch.prototype._stretch = 0;

System.Windows.FontStretches.get_Condensed = function () {
	return System.Windows.FontStretches.EnsureFontStretch(System.Windows.FontStretchType.Condensed);
};
System.Windows.FontStretches.get_Expanded = function () {
	return System.Windows.FontStretches.EnsureFontStretch(System.Windows.FontStretchType.Expanded);
};
System.Windows.FontStretches.get_ExtraCondensed = function () {
	return System.Windows.FontStretches.EnsureFontStretch(System.Windows.FontStretchType.ExtraCondensed);
};
System.Windows.FontStretches.get_ExtraExpanded = function () {
	return System.Windows.FontStretches.EnsureFontStretch(System.Windows.FontStretchType.ExtraExpanded);
};
System.Windows.FontStretches.get_Normal = function () {
	return System.Windows.FontStretches.EnsureFontStretch(System.Windows.FontStretchType.Medium);
};
System.Windows.FontStretches.get_SemiCondensed = function () {
	return System.Windows.FontStretches.EnsureFontStretch(System.Windows.FontStretchType.SemiCondensed);
};
System.Windows.FontStretches.get_SemiExpanded = function () {
	return System.Windows.FontStretches.EnsureFontStretch(System.Windows.FontStretchType.SemiExpanded);
};
System.Windows.FontStretches.get_UltraCondensed = function () {
	return System.Windows.FontStretches.EnsureFontStretch(System.Windows.FontStretchType.UltraCondensed);
};
System.Windows.FontStretches.get_UltraExpanded = function () {
	return System.Windows.FontStretches.EnsureFontStretch(System.Windows.FontStretchType.UltraExpanded);
};
System.Windows.FontStretches.EnsureFontStretch = function (stretch) {
	if (!JSIL.Cast(stretch, System.Boolean)) {
		stretch = System.Windows.FontStretchType.Medium;
	}
	if (!((stretch <= System.Windows.FontStretchType.UltraExpanded) && (stretch >= System.Windows.FontStretchType.UltraCondensed))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["stretch"]);
	}
	return new System.Windows.FontStretch(stretch);
};
JSIL.MakeProperty(System.Windows.FontStretches, "Condensed", 
	System.Windows.FontStretches.get_Condensed, null);
JSIL.MakeProperty(System.Windows.FontStretches, "Expanded", 
	System.Windows.FontStretches.get_Expanded, null);
JSIL.MakeProperty(System.Windows.FontStretches, "ExtraCondensed", 
	System.Windows.FontStretches.get_ExtraCondensed, null);
JSIL.MakeProperty(System.Windows.FontStretches, "ExtraExpanded", 
	System.Windows.FontStretches.get_ExtraExpanded, null);
JSIL.MakeProperty(System.Windows.FontStretches, "Normal", 
	System.Windows.FontStretches.get_Normal, null);
JSIL.MakeProperty(System.Windows.FontStretches, "SemiCondensed", 
	System.Windows.FontStretches.get_SemiCondensed, null);
JSIL.MakeProperty(System.Windows.FontStretches, "SemiExpanded", 
	System.Windows.FontStretches.get_SemiExpanded, null);
JSIL.MakeProperty(System.Windows.FontStretches, "UltraCondensed", 
	System.Windows.FontStretches.get_UltraCondensed, null);
JSIL.MakeProperty(System.Windows.FontStretches, "UltraExpanded", 
	System.Windows.FontStretches.get_UltraExpanded, null);

System.Windows.FontStyle.prototype._ctor = function (style) {
	this._style = style;
};
System.Windows.FontStyle.prototype.get_Style = function () {
	return this._style;
};
System.Windows.FontStyle.op_Equality = function (left, right) {
	return (left._style === right._style);
};
System.Windows.FontStyle.op_Inequality = function (left, right) {
	return !System.Windows.FontStyle.op_Equality(left, right);
};
System.Windows.FontStyle.prototype.Equals = function (obj) {
	return (JSIL.TryCast(obj, System.Windows.FontStyle) && System.Windows.FontStyle.op_Equality(this.MemberwiseClone(), JSIL.Cast(obj, System.Windows.FontStyle).MemberwiseClone()));
};
System.Windows.FontStyle.prototype.GetHashCode = function () {
	return Math.floor(this.Style);
};
System.Windows.FontStyle.prototype.toString = function () {
	var result = "Normal";
	switch (Number(this._style)) {
		case 0: 
			result = "Normal";
			break;
		case 2: 
			result = "Italic";
			break;
	}
	return result;
};
JSIL.MakeProperty(System.Windows.FontStyle.prototype, "Style", 
	System.Windows.FontStyle.prototype.get_Style, null);
System.Windows.FontStyle.prototype._style = 0;

System.Windows.FontStyles.get_Normal = function () {
	return System.Windows.FontStyles.EnsureFontStyle(System.Windows.FontStyleType.Normal);
};
System.Windows.FontStyles.get_Italic = function () {
	return System.Windows.FontStyles.EnsureFontStyle(System.Windows.FontStyleType.Italic);
};
System.Windows.FontStyles.EnsureFontStyle = function (style) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				switch (Number(style)) {
					case 0: 
					case 2: 
						return new System.Windows.FontStyle(style);
					case 1: 
						var __label1__ = "__entry1__";
					__step1__: 
						while (true) {
							switch (__label1__) {
								case "__entry1__":
									__label1__ = "IL_14";
									continue __step1__;
									break;
								case "IL_14":
									throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["style"]);
									break __step1__;
							}
						}
				}
				JSIL.UntranslatableInstruction("goto", "IL_14");
				break __step0__;
		}
	}
};
JSIL.MakeProperty(System.Windows.FontStyles, "Normal", 
	System.Windows.FontStyles.get_Normal, null);
JSIL.MakeProperty(System.Windows.FontStyles, "Italic", 
	System.Windows.FontStyles.get_Italic, null);

System.Windows.FontWeight.prototype._ctor = function (weight) {
	this._weight = weight;
};
System.Windows.FontWeight.prototype.get_Weight = function () {
	if (this._weight === 0) {
		this._weight = System.Windows.FontWeightType.Normal;
	}
	return this._weight;
};
System.Windows.FontWeight.op_Equality = function (left, right) {
	return (left.Weight === right.Weight);
};
System.Windows.FontWeight.op_Inequality = function (left, right) {
	return !System.Windows.FontWeight.op_Equality(left, right);
};
System.Windows.FontWeight.prototype.Equals = function (obj) {
	return (JSIL.TryCast(obj, System.Windows.FontWeight) && System.Windows.FontWeight.op_Equality(this.MemberwiseClone(), JSIL.Cast(obj, System.Windows.FontWeight).MemberwiseClone()));
};
System.Windows.FontWeight.prototype.GetHashCode = function () {
	return Math.floor(this.Weight);
};
System.Windows.FontWeight.prototype.toString = function () {
	var result = "Normal";
	var weight = this._weight;
	if (weight <= System.Windows.FontWeightType.Medium) {
		if (weight <= System.Windows.FontWeightType.ExtraLight) {
			if (weight !== System.Windows.FontWeightType.Thin) {
				if (weight === System.Windows.FontWeightType.ExtraLight) {
					result = "ExtraLight";
				}
			} else {
				result = "Thin";
			}
		} else if (weight !== System.Windows.FontWeightType.Light) {
			if (weight !== System.Windows.FontWeightType.Normal) {
				if (weight === System.Windows.FontWeightType.Medium) {
					result = "Medium";
				}
			} else {
				result = "Normal";
			}
		} else {
			result = "Light";
		}
	} else if (weight <= System.Windows.FontWeightType.Bold) {
		if (weight !== System.Windows.FontWeightType.SemiBold) {
			if (weight === System.Windows.FontWeightType.Bold) {
				result = "Bold";
			}
		} else {
			result = "SemiBold";
		}
	} else if (weight !== System.Windows.FontWeightType.ExtraBold) {
		if (weight !== System.Windows.FontWeightType.Black) {
			if (weight === System.Windows.FontWeightType.ExtraBlack) {
				result = "ExtraBlack";
			}
		} else {
			result = "Black";
		}
	} else {
		result = "ExtraBold";
	}
	return result;
};
JSIL.MakeProperty(System.Windows.FontWeight.prototype, "Weight", 
	System.Windows.FontWeight.prototype.get_Weight, null);
System.Windows.FontWeight.prototype._weight = 0;

System.Windows.FontWeights.get_Black = function () {
	return System.Windows.FontWeights.EnsureFontWeight(System.Windows.FontWeightType.Black);
};
System.Windows.FontWeights.get_Bold = function () {
	return System.Windows.FontWeights.EnsureFontWeight(System.Windows.FontWeightType.Bold);
};
System.Windows.FontWeights.get_ExtraBlack = function () {
	return System.Windows.FontWeights.EnsureFontWeight(System.Windows.FontWeightType.ExtraBlack);
};
System.Windows.FontWeights.get_ExtraBold = function () {
	return System.Windows.FontWeights.EnsureFontWeight(System.Windows.FontWeightType.ExtraBold);
};
System.Windows.FontWeights.get_ExtraLight = function () {
	return System.Windows.FontWeights.EnsureFontWeight(System.Windows.FontWeightType.ExtraLight);
};
System.Windows.FontWeights.get_Light = function () {
	return System.Windows.FontWeights.EnsureFontWeight(System.Windows.FontWeightType.Light);
};
System.Windows.FontWeights.get_Medium = function () {
	return System.Windows.FontWeights.EnsureFontWeight(System.Windows.FontWeightType.Medium);
};
System.Windows.FontWeights.get_Normal = function () {
	return System.Windows.FontWeights.EnsureFontWeight(System.Windows.FontWeightType.Normal);
};
System.Windows.FontWeights.get_SemiBold = function () {
	return System.Windows.FontWeights.EnsureFontWeight(System.Windows.FontWeightType.SemiBold);
};
System.Windows.FontWeights.get_Thin = function () {
	return System.Windows.FontWeights.EnsureFontWeight(System.Windows.FontWeightType.Thin);
};
System.Windows.FontWeights.EnsureFontWeight = function (weight) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				if (!JSIL.Cast(weight, System.Boolean)) {
					weight = System.Windows.FontWeightType.Normal;
				}
				var fontWeightType = weight;
				if (fontWeightType <= System.Windows.FontWeightType.Medium) {
					if (fontWeightType <= System.Windows.FontWeightType.ExtraLight) {
						if ((fontWeightType === System.Windows.FontWeightType.Thin) || (fontWeightType === System.Windows.FontWeightType.ExtraLight)) {
							__label0__ = "IL_82";
							continue __step0__;
						}
					} else if ((fontWeightType === System.Windows.FontWeightType.Light) || 
						(fontWeightType === System.Windows.FontWeightType.Normal) || (fontWeightType === System.Windows.FontWeightType.Medium)) {
						__label0__ = "IL_82";
						continue __step0__;
					}
				} else if (fontWeightType <= System.Windows.FontWeightType.Bold) {
					if ((fontWeightType === System.Windows.FontWeightType.SemiBold) || (fontWeightType === System.Windows.FontWeightType.Bold)) {
						__label0__ = "IL_82";
						continue __step0__;
					}
				} else if ((fontWeightType === System.Windows.FontWeightType.ExtraBold) || 
					(fontWeightType === System.Windows.FontWeightType.Black) || (fontWeightType === System.Windows.FontWeightType.ExtraBlack)) {
					__label0__ = "IL_82";
					continue __step0__;
				}
				throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["weight"]);
				__label0__ = "IL_82";
				continue __step0__;
				break;
			case "IL_82":
				return new System.Windows.FontWeight(weight);
				break __step0__;
		}
	}
};
JSIL.MakeProperty(System.Windows.FontWeights, "Black", 
	System.Windows.FontWeights.get_Black, null);
JSIL.MakeProperty(System.Windows.FontWeights, "Bold", 
	System.Windows.FontWeights.get_Bold, null);
JSIL.MakeProperty(System.Windows.FontWeights, "ExtraBlack", 
	System.Windows.FontWeights.get_ExtraBlack, null);
JSIL.MakeProperty(System.Windows.FontWeights, "ExtraBold", 
	System.Windows.FontWeights.get_ExtraBold, null);
JSIL.MakeProperty(System.Windows.FontWeights, "ExtraLight", 
	System.Windows.FontWeights.get_ExtraLight, null);
JSIL.MakeProperty(System.Windows.FontWeights, "Light", 
	System.Windows.FontWeights.get_Light, null);
JSIL.MakeProperty(System.Windows.FontWeights, "Medium", 
	System.Windows.FontWeights.get_Medium, null);
JSIL.MakeProperty(System.Windows.FontWeights, "Normal", 
	System.Windows.FontWeights.get_Normal, null);
JSIL.MakeProperty(System.Windows.FontWeights, "SemiBold", 
	System.Windows.FontWeights.get_SemiBold, null);
JSIL.MakeProperty(System.Windows.FontWeights, "Thin", 
	System.Windows.FontWeights.get_Thin, null);

System.Windows.LayoutCycleException.prototype._ctor$0 = function () {
	System.Exception.prototype._ctor.call(this, $asm02.System.Windows.Resx.GetString$2("LayoutCycleDetected"));
};
System.Windows.LayoutCycleException.prototype._ctor$1 = function (message) {
	System.Exception.prototype._ctor.call(this, message);
};
System.Windows.LayoutCycleException.prototype._ctor$2 = function (innerException) {
	System.Exception.prototype._ctor.call(this, $asm02.System.Windows.Resx.GetString$2("LayoutCycleDetected"), innerException);
};
JSIL.OverloadedMethod(System.Windows.LayoutCycleException.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.String]], 
		["_ctor$2", [System.Exception]]
	]);

System.Windows.TemplateVisualStateAttribute.prototype.get_Name = function () {
	return this.Name$value;
};
System.Windows.TemplateVisualStateAttribute.prototype.set_Name = function (value) {
	this.Name$value = value;
};
System.Windows.TemplateVisualStateAttribute.prototype.get_GroupName = function () {
	return this.GroupName$value;
};
System.Windows.TemplateVisualStateAttribute.prototype.set_GroupName = function (value) {
	this.GroupName$value = value;
};
System.Windows.TemplateVisualStateAttribute.prototype._ctor = function () {
	System.Attribute.prototype._ctor.call(this);
};
JSIL.MakeProperty(System.Windows.TemplateVisualStateAttribute.prototype, "Name", 
	System.Windows.TemplateVisualStateAttribute.prototype.get_Name, System.Windows.TemplateVisualStateAttribute.prototype.set_Name);
JSIL.MakeProperty(System.Windows.TemplateVisualStateAttribute.prototype, "GroupName", 
	System.Windows.TemplateVisualStateAttribute.prototype.get_GroupName, System.Windows.TemplateVisualStateAttribute.prototype.set_GroupName);
System.Windows.TemplateVisualStateAttribute.prototype.Name$value = null;
System.Windows.TemplateVisualStateAttribute.prototype.GroupName$value = null;

System.Windows.MessageBox.ShowCore = function (messageBoxText, caption, button) {
	if (messageBoxText === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["messageBoxText"]);
	}
	if (caption === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["caption"]);
	}
	if (!System.Windows.MessageBox.IsValidMessageBoxButton(button)) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", ["button"]);
	}
	var win32Result = $asm02.MS.Internal.XcpImports.MessageBox_ShowCore(messageBoxText, caption, Math.floor(button));
	return System.Windows.MessageBox.Win32ToMessageBoxResult(win32Result);
};
System.Windows.MessageBox.IsValidMessageBoxButton = function (value) {
	return (!JSIL.Cast(value, System.Boolean) || (value === System.Windows.MessageBoxButton.OKCancel));
};
System.Windows.MessageBox.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
System.Windows.MessageBox.Win32ToMessageBoxResult = function (win32Result) {
	switch (Number(win32Result)) {
		case 1: 
			var result = System.Windows.MessageBoxResult.OK;
			return result;
		case 2: 
			result = System.Windows.MessageBoxResult.Cancel;
			return result;
		case 6: 
			result = System.Windows.MessageBoxResult.Yes;
			return result;
		case 7: 
			result = System.Windows.MessageBoxResult.No;
			return result;
	}
	result = System.Windows.MessageBoxResult.None;
	return result;
};

System.Windows.ExternalPart.prototype._ctor$0 = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 280);
};
System.Windows.ExternalPart.prototype._ctor$1 = function (nKnownTypeIndex) {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, nKnownTypeIndex);
};
System.Windows.ExternalPart.prototype.get_Source = function () {
	return null;
};
System.Windows.ExternalPart.prototype.set_Source = function (value) {
};
JSIL.OverloadedMethod(System.Windows.ExternalPart.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32]]
	]);
JSIL.MakeProperty(System.Windows.ExternalPart.prototype, "Source", 
	System.Windows.ExternalPart.prototype.get_Source, System.Windows.ExternalPart.prototype.set_Source);

System.Windows.ExtensionPart.prototype._ctor = function () {
	System.Windows.ExternalPart.prototype._ctor$1.call(this, 278);
};
System.Windows.ExtensionPart.prototype.get_Source = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.ExtensionPart.SourceProperty), System.Uri);
};
System.Windows.ExtensionPart.prototype.set_Source = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.ExtensionPart.SourceProperty, value);
};
JSIL.MakeProperty(System.Windows.ExtensionPart.prototype, "Source", 
	System.Windows.ExtensionPart.prototype.get_Source, System.Windows.ExtensionPart.prototype.set_Source);
System.Windows.ExtensionPart.SourceProperty = null;
System.Windows.ExtensionPart._cctor = function () {
	System.Windows.ExtensionPart.SourceProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19315, System.Uri);
};

System.Windows.ExternalPartCollection.prototype._ctor = function () {
	System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.ExternalPart).prototype._ctor$1.call(this, 279);
};
System.Windows.ExternalPartCollection.prototype.AddInternal = function (value) {
	this.AddImpl(value);
};
System.Windows.ExternalPartCollection.prototype.ContainsInternal = function (value) {
	return this.ContainsImpl(value);
};
System.Windows.ExternalPartCollection.prototype.IndexOfInternal = function (value) {
	return this.IndexOfImpl(value);
};
System.Windows.ExternalPartCollection.prototype.InsertInternal = function (index, value) {
	this.InsertImpl(index, value);
};
System.Windows.ExternalPartCollection.prototype.RemoveInternal = function (value) {
	return this.RemoveImpl(value);
};
System.Windows.ExternalPartCollection.prototype.GetItemImplSkipMethodPack = function (index) {
	return this.GetItemImpl(index);
};
System.Windows.ExternalPartCollection.prototype.SetItemImplSkipMethodPack = function (index, value) {
	this.SetItemImpl(index, value);
};

$asm02.System.Windows.DataContextChangedEventArgs.prototype._ctor = function (reason) {
	System.EventArgs.prototype._ctor.call(this);
	this.ChangeReason = reason;
};
$asm02.System.Windows.DataContextChangedEventArgs.prototype.get_ChangeReason = function () {
	return this.ChangeReason$value;
};
$asm02.System.Windows.DataContextChangedEventArgs.prototype.set_ChangeReason = function (value) {
	this.ChangeReason$value = value;
};
JSIL.MakeProperty($asm02.System.Windows.DataContextChangedEventArgs.prototype, "ChangeReason", 
	$asm02.System.Windows.DataContextChangedEventArgs.prototype.get_ChangeReason, $asm02.System.Windows.DataContextChangedEventArgs.prototype.set_ChangeReason);
$asm02.System.Windows.DataContextChangedEventArgs.prototype.ChangeReason$value = 0;

$asm02.System.Windows.SaveFileStream.prototype._ctor = function (path, owner) {
	System.IO.FileStream.prototype._ctor$5.call(
		this, path, 
		System.IO.FileMode.Create, 
		(System.IO.FileAccess.Read | System.IO.FileAccess.ReadWrite | System.IO.FileAccess.Write), 
		System.IO.FileShare.Read, 
		4096, 
		false
	);
	this._owner = owner;
};
$asm02.System.Windows.SaveFileStream.prototype.Dispose = function (disposing) {
	$asm02.System.Windows.Hosting.NativeHost.Current.VerifyThread();
	System.IO.FileStream.prototype.Dispose.call(this, disposing);
	if (!((this._owner === null) || !disposing)) {
		this._owner.CloseFile();
		this._owner = null;
	}
};
$asm02.System.Windows.SaveFileStream.prototype._owner = null;

$asm02.System.Windows.Hosting.DelegateWrapper.prototype._ctor = function (domDelegate) {
	System.Object.prototype._ctor.call(this);
	this.CreateHandle(domDelegate);
};
$asm02.System.Windows.Hosting.DelegateWrapper.prototype.get_FunctionHandle = function () {
	return this._handle.Handle;
};
$asm02.System.Windows.Hosting.DelegateWrapper.prototype.CreateHandle = function (domDelegate) {
	var value = System.Runtime.InteropServices.GCHandle.Alloc$0(this).MemberwiseClone();
	var pDelegateHandle = System.Runtime.InteropServices.GCHandle.op_Explicit$1(value.MemberwiseClone());
	var zero = new JSIL.Variable(System.IntPtr.Zero);
	if (domDelegate) {
		if ($asm02.System.Windows.Hosting.NativeHost.Current.BrowserService !== null) {
			$asm02.System.Windows.Hosting.NativeHost.Current.BrowserService.IBrowserService_CreateFunction(pDelegateHandle, /* ref */ zero);
		}
		this._handle = new $asm02.System.Windows.Hosting.DOMHandle(zero.value, false, true);
		return;
	}
	$asm02.System.Windows.Hosting.NativeHost.Current.RuntimeHost.IManagedRuntimeHost_CreateCallback(pDelegateHandle, /* ref */ zero);
	this._handle = new $asm02.System.Windows.Hosting.HostHandle(zero.value, false, true);
};
$asm02.System.Windows.Hosting.DelegateWrapper.prototype.Dispose = function () {
	if (this._handle !== null) {
		this._handle.Dispose$0();
		this._handle = null;
	}
};
$asm02.System.Windows.Hosting.DelegateWrapper.prototype.GetParameters = function () {
	return JSIL.Array.New(System.Reflection.ParameterInfo, 0);
};
$asm02.System.Windows.Hosting.DelegateWrapper.prototype.InternalInvoke = function (args) {
	return this.Invoke(args);
};
$asm02.System.Windows.Hosting.DelegateWrapper.prototype.INativePeer_Disconnect = function () {
	this.Dispose();
};
JSIL.MakeProperty($asm02.System.Windows.Hosting.DelegateWrapper.prototype, "FunctionHandle", 
	$asm02.System.Windows.Hosting.DelegateWrapper.prototype.get_FunctionHandle, null);
$asm02.System.Windows.Hosting.DelegateWrapper.prototype._handle = null;

$asm02.System.Windows.Hosting.CallbackCookie.prototype._ctor$0 = function (callback, domCallback) {
	this._ctor$1(callback, domCallback, null);
};
$asm02.System.Windows.Hosting.CallbackCookie.prototype._ctor$1 = function (callback, domCallback, context) {
	$asm02.System.Windows.Hosting.DelegateWrapper.prototype._ctor.call(this, domCallback);
	this._callback = callback;
	this._context = context;
};
$asm02.System.Windows.Hosting.CallbackCookie.prototype.Invoke = function (args) {
	if (this._callback !== null) {
		this._callback(this._context);
	}
	return null;
};
JSIL.OverloadedMethod($asm02.System.Windows.Hosting.CallbackCookie.prototype, "_ctor", [
		["_ctor$0", [System.Action$b1.Of(System.Object), System.Boolean]], 
		["_ctor$1", [System.Action$b1.Of(System.Object), System.Boolean, System.Object]]
	]);
$asm02.System.Windows.Hosting.CallbackCookie.prototype._callback = null;
$asm02.System.Windows.Hosting.CallbackCookie.prototype._context = null;

$asm02.System.Windows.Hosting.HostHandle.prototype.get_Handle = function () {
	return System.IntPtr.op_Explicit$0(this._handle);
};
$asm02.System.Windows.Hosting.HostHandle.prototype._ctor = function (handle, addReference, registerAsDisposable) {
	System.Object.prototype._ctor.call(this);
	this._handle = System.IntPtr.op_Explicit$2(handle);
	if (addReference) {
		this.ReferenceHandle(handle);
	}
	if (registerAsDisposable) {
		$asm02.System.Windows.Hosting.NativeHost.Current.RegisterDisposableObject(this);
	}
};
$asm02.System.Windows.Hosting.HostHandle.prototype.Finalize = function () {
	try {
		this.Dispose$1(false);
	} finally {
		System.Object.prototype.Finalize.call(this);
	}
};
$asm02.System.Windows.Hosting.HostHandle.prototype.ReferenceHandle = function (handle) {
	$asm02.System.Windows.Hosting.NativeHost.Current.RuntimeHost.IManagedRuntimeHost_AddReference(handle);
};
$asm02.System.Windows.Hosting.HostHandle.prototype.Dispose$0 = function () {
	this.Dispose$1(true);
	System.GC.SuppressFinalize(this);
};
$asm02.System.Windows.Hosting.HostHandle.prototype.Dispose$1 = function (disposing) {
	if (System.IntPtr.op_Inequality(System.IntPtr.op_Explicit$0(this._handle), System.IntPtr.Zero)) {
		var pObject = System.IntPtr.op_Explicit$0(this._handle);
		this._handle = System.IntPtr.op_Explicit$2(System.IntPtr.Zero);
		$asm02.System.Windows.Hosting.NativeHost.Current.RuntimeHost.IManagedRuntimeHost_ReleaseReference(pObject);
	}
};
JSIL.OverloadedMethod(System.Windows.Hosting.HostHandle.prototype, "Dispose", [
		["Dispose$0", []], 
		["Dispose$1", [System.Boolean]]
	]);
JSIL.MakeProperty($asm02.System.Windows.Hosting.HostHandle.prototype, "Handle", 
	$asm02.System.Windows.Hosting.HostHandle.prototype.get_Handle, null);
$asm02.System.Windows.Hosting.HostHandle.prototype._handle = 0;

$asm02.System.Windows.Hosting.DOMHandle.prototype._ctor = function (handle, addReference, registerAsDisposable) {
	$asm02.System.Windows.Hosting.HostHandle.prototype._ctor.call(this, handle, addReference, registerAsDisposable);
};
$asm02.System.Windows.Hosting.DOMHandle.prototype.ReferenceHandle = function (handle) {
	if ($asm02.System.Windows.Hosting.NativeHost.Current.BrowserService !== null) {
		$asm02.System.Windows.Hosting.NativeHost.Current.BrowserService.IBrowserService_ReferenceObject(handle);
	}
};
$asm02.System.Windows.Hosting.DOMHandle.prototype.Dispose = function (disposing) {
	var intPtr = System.IntPtr.op_Explicit$0(System.Threading.Interlocked.CompareExchange(/* ref */ new JSIL.MemberReference(this, "_handle"), System.IntPtr.op_Explicit$2(System.IntPtr.Zero), this._handle));
	if (System.IntPtr.op_Inequality(intPtr, System.IntPtr.Zero)) {
		var flag = System.Windows.Threading.Dispatcher.MainDispatcher.CheckAccess();
		if (flag) {
			$asm02.System.Windows.Hosting.NativeHost.Current.UnregisterDisposableObject(this);
		}
		if (!flag) {
			System.Windows.Threading.Dispatcher.MainDispatcher.BeginInvoke$2(System.Windows.Threading.DispatcherPriority.Normal, JSIL.Delegate.New("System.Threading.ParameterizedThreadStart", null, $asm02.System.Windows.Hosting.DOMHandle.OnDispose), [intPtr]);
			return;
		}
		if ($asm02.System.Windows.Hosting.NativeHost.Current.BrowserService !== null) {
			$asm02.System.Windows.Hosting.NativeHost.Current.BrowserService.IBrowserService_ReleaseObject(intPtr);
		}
	}
};
$asm02.System.Windows.Hosting.DOMHandle.OnDispose = function (state) {
	if ($asm02.System.Windows.Hosting.NativeHost.Current.BrowserService !== null) {
		$asm02.System.Windows.Hosting.NativeHost.Current.BrowserService.IBrowserService_ReleaseObject(JSIL.Cast(state, System.IntPtr));
	}
};

$asm02.System.Windows.Hosting.DOMHandleWithoutDispose.prototype._ctor = function (handle, addReference) {
	$asm02.System.Windows.Hosting.DOMHandle.prototype._ctor.call(this, handle, addReference, false);
};
$asm02.System.Windows.Hosting.DOMHandleWithoutDispose.prototype.Dispose = function (disposing) {
	this._handle = System.IntPtr.op_Explicit$2(System.IntPtr.Zero);
};

$asm02.System.Windows.Hosting.NativeHost.get_Current = function () {
	return $asm02.System.Windows.Hosting.NativeHost.s_current;
};
$asm02.System.Windows.Hosting.NativeHost.get_IsCustomHost = function () {
	return (($asm02.System.Windows.Hosting.NativeHost.Current === null) || ($asm02.System.Windows.Hosting.NativeHost.Current.RuntimeHost === null));
};
$asm02.System.Windows.Hosting.NativeHost.prototype.get_IsShuttingDown = function () {
	return this._isShuttingDown;
};
$asm02.System.Windows.Hosting.NativeHost.prototype.get_BrowserService = function () {
	return this._browserService;
};
$asm02.System.Windows.Hosting.NativeHost.prototype.get_RuntimeHost = function () {
	return this._runtimeHost;
};
$asm02.System.Windows.Hosting.NativeHost.prototype.get_FileSystemAccessAllowed = function () {
	return $asm02.MS.Internal.XcpImports.Host_GetFileSystemAccessAllowed();
};
$asm02.System.Windows.Hosting.NativeHost.prototype.get_NetworkingUnrestricted = function () {
	return $asm02.MS.Internal.XcpImports.Host_GetNetworkingUnrestricted();
};
$asm02.System.Windows.Hosting.NativeHost.prototype.get_Source = function () {
	var text = $asm02.MS.Internal.XcpImports.Host_GetSource();
	if (text !== null) {
		return JSIL.New(System.Uri, "_ctor$1", [$asm02.System.Windows.Hosting.NativeHost.NormalizeBrowserUriString(text), System.UriKind.RelativeOrAbsolute]);
	}
	return null;
};
$asm02.System.Windows.Hosting.NativeHost.prototype.get_FinalSource = function () {
	var url = $asm02.MS.Internal.XcpImports.Host_GetFinalSource();
	return JSIL.New(System.Uri, "_ctor$1", [$asm02.System.Windows.Hosting.NativeHost.NormalizeBrowserUriString(url), System.UriKind.RelativeOrAbsolute]);
};
$asm02.System.Windows.Hosting.NativeHost.prototype.get_DocumentUri = function () {
	if (!(!System.Uri.op_Equality(this._documentUri, null) || (this._browserService === null))) {
		var zero = new JSIL.Variable(System.IntPtr.Zero);
		if (!((this.BrowserService.IBrowserService_GetDocumentUri(/* ref */ zero) !== 0) || !System.IntPtr.op_Inequality(zero.value, System.IntPtr.Zero))) {
			var url = this.RuntimeHost.IManagedRuntimeHost_PtrToStringUni$0(zero.value);
			this.RuntimeHost.IManagedRuntimeHost_FreeMemory(zero.value);
			this._documentUri = JSIL.New(System.Uri, "_ctor$0", [$asm02.System.Windows.Hosting.NativeHost.NormalizeBrowserUriString(url)]);
		}
	}
	return this._documentUri;
};
$asm02.System.Windows.Hosting.NativeHost.prototype.get_UIThreadID = function () {
	return this._uiThreadID;
};
$asm02.System.Windows.Hosting.NativeHost.prototype.set_UIThreadID = function (value) {
	this._uiThreadID = value;
};
$asm02.System.Windows.Hosting.NativeHost.prototype._ctor = function () {
	this._disposables = new (System.Collections.Generic.List$b1.Of(System.WeakReference)) ();
	System.Object.prototype._ctor.call(this);
	this._uiThreadID = System.Threading.Thread.CurrentThread.ManagedThreadId;
};
$asm02.System.Windows.Hosting.NativeHost.NormalizeBrowserUriString = function (url) {
	if (!((url.length <= 6) || 
			((url[6]) === "/") || !url.StartsWith$1("file:/", System.StringComparison.OrdinalIgnoreCase))) {
		return url.Insert(6, "/");
	}
	return url;
};
$asm02.System.Windows.Hosting.NativeHost.prototype.Initialize = function (runtimeHost) {
	this._runtimeHost = runtimeHost;
	this._runtimeHost.IManagedRuntimeHost_GetBrowserService(/* ref */ new JSIL.MemberReference(this, "_browserService"));
	var synchronizationContext = JSIL.New(System.Windows.Threading.DispatcherSynchronizationContext, "_ctor$0", []);
	System.Threading.SynchronizationContext.SetSynchronizationContext$0(synchronizationContext);
	System.Threading.SynchronizationContext.SetThreadStaticContext(synchronizationContext);
	System.Net.UiSynchronizationContext.Current = System.Threading.SynchronizationContext.Current;
	System.Net.UiSynchronizationContext.ManagedUiThreadId = System.Threading.Thread.CurrentThread.ManagedThreadId;
};
$asm02.System.Windows.Hosting.NativeHost.prototype.Dispose = function () {
	var mainDispatcher = System.Windows.Threading.Dispatcher.MainDispatcher;
	if (this._disposables !== null) {
		this._disposables = null;
		var enumerator = (this._disposables.GetEnumerator());
		try {
		__loop0__: 
			while (enumerator.MoveNext()) {
				var current = enumerator.Current;
				try {
					var disposable = JSIL.TryCast(current.Target, System.IDisposable);
					if (disposable !== null) {
						disposable.IDisposable_Dispose();
					}
				} catch ($exception) {
				}
			}
		} finally {
			enumerator.IDisposable_Dispose();
		}
	}
	System.GC.Collect();
	System.GC.WaitForPendingFinalizers();
	mainDispatcher.Dispose();
	if ($asm02.System.Windows.Hosting.NativeHost.Current._browserService !== null) {
		$asm02.System.Windows.Hosting.NativeHost.Current._browserService.IDisposable_Dispose();
		$asm02.System.Windows.Hosting.NativeHost.Current._browserService = null;
	}
	if ($asm02.System.Windows.Hosting.NativeHost.Current._runtimeHost !== null) {
		$asm02.System.Windows.Hosting.NativeHost.Current._runtimeHost.IDisposable_Dispose();
		$asm02.System.Windows.Hosting.NativeHost.Current._runtimeHost = null;
	}
};
$asm02.System.Windows.Hosting.NativeHost.prototype.VerifyThread = function () {
	if (System.Threading.Thread.CurrentThread.ManagedThreadId !== this.UIThreadID) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("NativeHost_NotOnUIThread")]);
	}
};
$asm02.System.Windows.Hosting.NativeHost.prototype.RegisterDisposableObject = function (obj) {
	if (obj === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["obj"]);
	}
	this._disposables.Add(JSIL.New(System.WeakReference, "_ctor$2", [obj, true]));
};
$asm02.System.Windows.Hosting.NativeHost.prototype.UnregisterDisposableObject = function (obj) {
	if (obj === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["obj"]);
	}
	if (this._disposables === null) {
		return;
	}
__loop0__: 
	for (var i = (this._disposables.Count - 1); i >= 0; --i) {
		var weakReference = this._disposables.get_Item(i);
		if (!((weakReference !== null) && weakReference.IsAlive)) {
			this._disposables.RemoveAt(i);
		} else if (weakReference.Target === obj) {
			this._disposables.RemoveAt(i);
			return;
		}
	}
};
$asm02.System.Windows.Hosting.NativeHost.prototype.BeginShutdown = function () {
	this._isShuttingDown = true;
};
$asm02.System.Windows.Hosting.NativeHost.EnterManagedCode = function () {
};
$asm02.System.Windows.Hosting.NativeHost.LeaveManagedCode = function () {
};
JSIL.MakeProperty($asm02.System.Windows.Hosting.NativeHost, "Current", 
	$asm02.System.Windows.Hosting.NativeHost.get_Current, null);
JSIL.MakeProperty($asm02.System.Windows.Hosting.NativeHost, "IsCustomHost", 
	$asm02.System.Windows.Hosting.NativeHost.get_IsCustomHost, null);
JSIL.MakeProperty($asm02.System.Windows.Hosting.NativeHost.prototype, "IsShuttingDown", 
	$asm02.System.Windows.Hosting.NativeHost.prototype.get_IsShuttingDown, null);
JSIL.MakeProperty($asm02.System.Windows.Hosting.NativeHost.prototype, "BrowserService", 
	$asm02.System.Windows.Hosting.NativeHost.prototype.get_BrowserService, null);
JSIL.MakeProperty($asm02.System.Windows.Hosting.NativeHost.prototype, "RuntimeHost", 
	$asm02.System.Windows.Hosting.NativeHost.prototype.get_RuntimeHost, null);
JSIL.MakeProperty($asm02.System.Windows.Hosting.NativeHost.prototype, "FileSystemAccessAllowed", 
	$asm02.System.Windows.Hosting.NativeHost.prototype.get_FileSystemAccessAllowed, null);
JSIL.MakeProperty($asm02.System.Windows.Hosting.NativeHost.prototype, "NetworkingUnrestricted", 
	$asm02.System.Windows.Hosting.NativeHost.prototype.get_NetworkingUnrestricted, null);
JSIL.MakeProperty($asm02.System.Windows.Hosting.NativeHost.prototype, "Source", 
	$asm02.System.Windows.Hosting.NativeHost.prototype.get_Source, null);
JSIL.MakeProperty($asm02.System.Windows.Hosting.NativeHost.prototype, "FinalSource", 
	$asm02.System.Windows.Hosting.NativeHost.prototype.get_FinalSource, null);
JSIL.MakeProperty($asm02.System.Windows.Hosting.NativeHost.prototype, "DocumentUri", 
	$asm02.System.Windows.Hosting.NativeHost.prototype.get_DocumentUri, null);
JSIL.MakeProperty($asm02.System.Windows.Hosting.NativeHost.prototype, "UIThreadID", 
	$asm02.System.Windows.Hosting.NativeHost.prototype.get_UIThreadID, $asm02.System.Windows.Hosting.NativeHost.prototype.set_UIThreadID);
$asm02.System.Windows.Hosting.NativeHost.s_current = null;
$asm02.System.Windows.Hosting.NativeHost.prototype._isShuttingDown = false;
$asm02.System.Windows.Hosting.NativeHost.prototype._browserService = null;
$asm02.System.Windows.Hosting.NativeHost.prototype._runtimeHost = null;
$asm02.System.Windows.Hosting.NativeHost.prototype._uiThreadID = 0;
$asm02.System.Windows.Hosting.NativeHost.prototype._documentUri = null;
$asm02.System.Windows.Hosting.NativeHost.prototype._disposables = null;
$asm02.System.Windows.Hosting.NativeHost._cctor = function () {
	$asm02.System.Windows.Hosting.NativeHost.s_current = new $asm02.System.Windows.Hosting.NativeHost();
};

$asm02.System.Windows.Hosting.NativeMethods.SUCCEEDED = function (hr) {
	return (hr >= 0);
};
Object.defineProperty($asm02.System.Windows.Hosting.NativeMethods, "SilverlightHost", {
		"value": "agcore"}
);
Object.defineProperty($asm02.System.Windows.Hosting.NativeMethods, "TRUE", {
		"value": 1}
);
Object.defineProperty($asm02.System.Windows.Hosting.NativeMethods, "FALSE", {
		"value": 0}
);
Object.defineProperty($asm02.System.Windows.Hosting.NativeMethods, "S_OK", {
		"value": 0}
);
Object.defineProperty($asm02.System.Windows.Hosting.NativeMethods, "S_FALSE", {
		"value": 1}
);
Object.defineProperty($asm02.System.Windows.Hosting.NativeMethods, "E_FAIL", {
		"value": -2147467259}
);
Object.defineProperty($asm02.System.Windows.Hosting.NativeMethods, "E_INVALIDARG", {
		"value": -2147024809}
);
Object.defineProperty($asm02.System.Windows.Hosting.NativeMethods, "E_UNEXPECTED", {
		"value": -2147418113}
);
Object.defineProperty($asm02.System.Windows.Hosting.NativeMethods, "DISP_E_EXCEPTION", {
		"value": -2147352567}
);
Object.defineProperty($asm02.System.Windows.Hosting.NativeMethods, "E_ACCESSDENIED", {
		"value": -2147024891}
);

$asm02.System.Windows.Hosting.NativeMethods.ScriptParam.prototype.type = 0;
$asm02.System.Windows.Hosting.NativeMethods.ScriptParam.prototype.nLength = 0;
$asm02.System.Windows.Hosting.NativeMethods.ScriptParam.prototype.intData = 0;
$asm02.System.Windows.Hosting.NativeMethods.ScriptParam.prototype.boolData = false;
$asm02.System.Windows.Hosting.NativeMethods.ScriptParam.prototype.doubleData = 0;
$asm02.System.Windows.Hosting.NativeMethods.ScriptParam.prototype.ptrData = 0;

$asm02.System.Windows.Hosting.NativeMethods.ExceptionInfo.prototype.nCode = 0;
$asm02.System.Windows.Hosting.NativeMethods.ExceptionInfo.prototype.pszSource = 0;
$asm02.System.Windows.Hosting.NativeMethods.ExceptionInfo.prototype.pszMessage = 0;

$asm02.System.Windows.Hosting.NativeMethods.OpenFileNameInfo.prototype.lStructSize = 0;
$asm02.System.Windows.Hosting.NativeMethods.OpenFileNameInfo.prototype.hwndOwner = 0;
$asm02.System.Windows.Hosting.NativeMethods.OpenFileNameInfo.prototype.hInstance = 0;
$asm02.System.Windows.Hosting.NativeMethods.OpenFileNameInfo.prototype.lpstrFilter = 0;
$asm02.System.Windows.Hosting.NativeMethods.OpenFileNameInfo.prototype.lpstrCustomFilter = 0;
$asm02.System.Windows.Hosting.NativeMethods.OpenFileNameInfo.prototype.nMaxCustFilter = 0;
$asm02.System.Windows.Hosting.NativeMethods.OpenFileNameInfo.prototype.nFilterIndex = 0;
$asm02.System.Windows.Hosting.NativeMethods.OpenFileNameInfo.prototype.lpstrFile = 0;
$asm02.System.Windows.Hosting.NativeMethods.OpenFileNameInfo.prototype.nMaxFile = 0;
$asm02.System.Windows.Hosting.NativeMethods.OpenFileNameInfo.prototype.lpstrFileTitle = 0;
$asm02.System.Windows.Hosting.NativeMethods.OpenFileNameInfo.prototype.nMaxFileTitle = 0;
$asm02.System.Windows.Hosting.NativeMethods.OpenFileNameInfo.prototype.lpstrInitialDir = 0;
$asm02.System.Windows.Hosting.NativeMethods.OpenFileNameInfo.prototype.lpstrTitle = 0;
$asm02.System.Windows.Hosting.NativeMethods.OpenFileNameInfo.prototype.Flags = 0;
$asm02.System.Windows.Hosting.NativeMethods.OpenFileNameInfo.prototype.nFileOffset = 0;
$asm02.System.Windows.Hosting.NativeMethods.OpenFileNameInfo.prototype.nFileExtension = 0;
$asm02.System.Windows.Hosting.NativeMethods.OpenFileNameInfo.prototype.lpstrDefExt = 0;
$asm02.System.Windows.Hosting.NativeMethods.OpenFileNameInfo.prototype.lCustData = 0;
$asm02.System.Windows.Hosting.NativeMethods.OpenFileNameInfo.prototype.lpfnHook = 0;
$asm02.System.Windows.Hosting.NativeMethods.OpenFileNameInfo.prototype.lpTemplateName = 0;
$asm02.System.Windows.Hosting.NativeMethods.OpenFileNameInfo.prototype.pvReserved = 0;
$asm02.System.Windows.Hosting.NativeMethods.OpenFileNameInfo.prototype.dwReserved = 0;
$asm02.System.Windows.Hosting.NativeMethods.OpenFileNameInfo.prototype.FlagsEx = 0;

$asm02.System.Windows.Hosting.NativeMethods.DOMEventInfo.prototype.pSource = 0;
$asm02.System.Windows.Hosting.NativeMethods.DOMEventInfo.prototype.nSourceType = 0;
$asm02.System.Windows.Hosting.NativeMethods.DOMEventInfo.prototype.clientX = 0;
$asm02.System.Windows.Hosting.NativeMethods.DOMEventInfo.prototype.clientY = 0;
$asm02.System.Windows.Hosting.NativeMethods.DOMEventInfo.prototype.offsetX = 0;
$asm02.System.Windows.Hosting.NativeMethods.DOMEventInfo.prototype.offsetY = 0;
$asm02.System.Windows.Hosting.NativeMethods.DOMEventInfo.prototype.screenX = 0;
$asm02.System.Windows.Hosting.NativeMethods.DOMEventInfo.prototype.screenY = 0;
$asm02.System.Windows.Hosting.NativeMethods.DOMEventInfo.prototype.altKey = false;
$asm02.System.Windows.Hosting.NativeMethods.DOMEventInfo.prototype.ctrlKey = false;
$asm02.System.Windows.Hosting.NativeMethods.DOMEventInfo.prototype.shiftKey = false;
$asm02.System.Windows.Hosting.NativeMethods.DOMEventInfo.prototype.mouseButton = 0;
$asm02.System.Windows.Hosting.NativeMethods.DOMEventInfo.prototype.keyCode = 0;
$asm02.System.Windows.Hosting.NativeMethods.DOMEventInfo.prototype.charCode = 0;
$asm02.System.Windows.Hosting.NativeMethods.DOMEventInfo.prototype.pszEventType = 0;
$asm02.System.Windows.Hosting.NativeMethods.DOMEventInfo.prototype.pEventObject = 0;

System.Windows.Ink.Stroke.prototype._ctor$0 = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 136);
};
System.Windows.Ink.Stroke.prototype._ctor$1 = function (stylusPoints) {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 136);
	if (stylusPoints === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["stylusPoints"]);
	}
	if (stylusPoints.Count === 0) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", ["stylusPoints"]);
	}
	this.SetPointCollection(stylusPoints);
};
System.Windows.Ink.Stroke.prototype.get_StylusPoints = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Ink.Stroke.StylusPointsProperty), System.Windows.Input.StylusPointCollection);
};
System.Windows.Ink.Stroke.prototype.set_StylusPoints = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Ink.Stroke.StylusPointsProperty, value);
};
System.Windows.Ink.Stroke.prototype.get_DrawingAttributes = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Ink.Stroke.DrawingAttributesProperty), System.Windows.Ink.DrawingAttributes);
};
System.Windows.Ink.Stroke.prototype.set_DrawingAttributes = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Ink.Stroke.DrawingAttributesProperty, value);
};
System.Windows.Ink.Stroke.prototype.GetBounds = function () {
	return $asm02.MS.Internal.XcpImports.Stroke_GetBounds(this);
};
System.Windows.Ink.Stroke.prototype.HitTest = function (stylusPointCollection) {
	return $asm02.MS.Internal.XcpImports.Stroke_HitTest(this, stylusPointCollection);
};
System.Windows.Ink.Stroke.prototype.SetPointCollection = function (pointCollection) {
	$asm02.MS.Internal.XcpImports.SetValue(this, System.Windows.Ink.Stroke.StylusPointsProperty, pointCollection);
};
JSIL.OverloadedMethod(System.Windows.Ink.Stroke.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Windows.Input.StylusPointCollection]]
	]);
JSIL.MakeProperty(System.Windows.Ink.Stroke.prototype, "StylusPoints", 
	System.Windows.Ink.Stroke.prototype.get_StylusPoints, System.Windows.Ink.Stroke.prototype.set_StylusPoints);
JSIL.MakeProperty(System.Windows.Ink.Stroke.prototype, "DrawingAttributes", 
	System.Windows.Ink.Stroke.prototype.get_DrawingAttributes, System.Windows.Ink.Stroke.prototype.set_DrawingAttributes);
System.Windows.Ink.Stroke.StylusPointsProperty = null;
System.Windows.Ink.Stroke.DrawingAttributesProperty = null;
System.Windows.Ink.Stroke._cctor = function () {
	System.Windows.Ink.Stroke.StylusPointsProperty = System.Windows.DependencyProperty.RegisterCoreProperty(17110, System.Windows.Input.StylusPointCollection);
	System.Windows.Ink.Stroke.DrawingAttributesProperty = System.Windows.DependencyProperty.RegisterCoreProperty(17111, System.Windows.Ink.DrawingAttributes);
};

System.Windows.Input.Cursor.prototype._ctor = function (cursorType) {
	System.Object.prototype._ctor.call(this);
	if (this.IsValidCursorType(cursorType)) {
		this._cursorType = cursorType;
		return;
	}
	this._cursorType = System.Windows.Input.CursorType.Default;
};
System.Windows.Input.Cursor.prototype.get_CursorType = function () {
	return this._cursorType;
};
System.Windows.Input.Cursor.prototype.toString = function () {
	var result = "Default";
	switch (Number(this._cursorType)) {
		case 1: 
			result = "Arrow";
			break;
		case 2: 
			result = "Hand";
			break;
		case 3: 
			result = "Wait";
			break;
		case 4: 
			result = "IBeam";
			break;
		case 5: 
			result = "Stylus";
			break;
		case 6: 
			result = "Eraser";
			break;
		case 7: 
			result = "SizeNS";
			break;
		case 8: 
			result = "SizeWE";
			break;
		case 9: 
			result = "SizeNESW";
			break;
		case 10: 
			result = "SizeNWSE";
			break;
		case 11: 
			result = "None";
			break;
	}
	return result;
};
System.Windows.Input.Cursor.prototype.IsValidCursorType = function (cursorType) {
	return ((cursorType >= System.Windows.Input.CursorType.Default) && (cursorType <= System.Windows.Input.CursorType.None));
};
JSIL.MakeProperty(System.Windows.Input.Cursor.prototype, "CursorType", 
	System.Windows.Input.Cursor.prototype.get_CursorType, null);
System.Windows.Input.Cursor.prototype._cursorType = 0;

System.Windows.Input.Cursors.get_Arrow = function () {
	return System.Windows.Input.Cursors.EnsureCursor(System.Windows.Input.CursorType.Arrow);
};
System.Windows.Input.Cursors.get_Hand = function () {
	return System.Windows.Input.Cursors.EnsureCursor(System.Windows.Input.CursorType.Hand);
};
System.Windows.Input.Cursors.get_Wait = function () {
	return System.Windows.Input.Cursors.EnsureCursor(System.Windows.Input.CursorType.Wait);
};
System.Windows.Input.Cursors.get_IBeam = function () {
	return System.Windows.Input.Cursors.EnsureCursor(System.Windows.Input.CursorType.IBeam);
};
System.Windows.Input.Cursors.get_Stylus = function () {
	return System.Windows.Input.Cursors.EnsureCursor(System.Windows.Input.CursorType.Stylus);
};
System.Windows.Input.Cursors.get_Eraser = function () {
	return System.Windows.Input.Cursors.EnsureCursor(System.Windows.Input.CursorType.Eraser);
};
System.Windows.Input.Cursors.get_SizeNS = function () {
	return System.Windows.Input.Cursors.EnsureCursor(System.Windows.Input.CursorType.SizeNS);
};
System.Windows.Input.Cursors.get_SizeWE = function () {
	return System.Windows.Input.Cursors.EnsureCursor(System.Windows.Input.CursorType.SizeWE);
};
System.Windows.Input.Cursors.get_SizeNESW = function () {
	return System.Windows.Input.Cursors.EnsureCursor(System.Windows.Input.CursorType.SizeNESW);
};
System.Windows.Input.Cursors.get_SizeNWSE = function () {
	return System.Windows.Input.Cursors.EnsureCursor(System.Windows.Input.CursorType.SizeNWSE);
};
System.Windows.Input.Cursors.get_None = function () {
	return System.Windows.Input.Cursors.EnsureCursor(System.Windows.Input.CursorType.None);
};
System.Windows.Input.Cursors.EnsureCursor = function (cursorType) {
	if (!JSIL.Cast(cursorType, System.Boolean)) {
		System.Windows.Input.Cursors._stockCursors[Math.floor(cursorType)] = null;
	} else if (!System.Windows.Input.Cursors._stockCursors[Math.floor(cursorType)]) {
		System.Windows.Input.Cursors._stockCursors[Math.floor(cursorType)] = new System.Windows.Input.Cursor(cursorType);
	}
	return System.Windows.Input.Cursors._stockCursors[Math.floor(cursorType)];
};
JSIL.MakeProperty(System.Windows.Input.Cursors, "Arrow", 
	System.Windows.Input.Cursors.get_Arrow, null);
JSIL.MakeProperty(System.Windows.Input.Cursors, "Hand", 
	System.Windows.Input.Cursors.get_Hand, null);
JSIL.MakeProperty(System.Windows.Input.Cursors, "Wait", 
	System.Windows.Input.Cursors.get_Wait, null);
JSIL.MakeProperty(System.Windows.Input.Cursors, "IBeam", 
	System.Windows.Input.Cursors.get_IBeam, null);
JSIL.MakeProperty(System.Windows.Input.Cursors, "Stylus", 
	System.Windows.Input.Cursors.get_Stylus, null);
JSIL.MakeProperty(System.Windows.Input.Cursors, "Eraser", 
	System.Windows.Input.Cursors.get_Eraser, null);
JSIL.MakeProperty(System.Windows.Input.Cursors, "SizeNS", 
	System.Windows.Input.Cursors.get_SizeNS, null);
JSIL.MakeProperty(System.Windows.Input.Cursors, "SizeWE", 
	System.Windows.Input.Cursors.get_SizeWE, null);
JSIL.MakeProperty(System.Windows.Input.Cursors, "SizeNESW", 
	System.Windows.Input.Cursors.get_SizeNESW, null);
JSIL.MakeProperty(System.Windows.Input.Cursors, "SizeNWSE", 
	System.Windows.Input.Cursors.get_SizeNWSE, null);
JSIL.MakeProperty(System.Windows.Input.Cursors, "None", 
	System.Windows.Input.Cursors.get_None, null);
System.Windows.Input.Cursors._cursorTypeCount = 0;
System.Windows.Input.Cursors._stockCursors = null;
System.Windows.Input.Cursors._cctor = function () {
	System.Windows.Input.Cursors._cursorTypeCount = 12;
	System.Windows.Input.Cursors._stockCursors = JSIL.Array.New(System.Windows.Input.Cursor, System.Windows.Input.Cursors._cursorTypeCount);
};

System.Windows.Input.FocusManager.GetFocusedElement = function () {
	return $asm02.MS.Internal.XcpImports.FocusManager_GetFocusedElement();
};

System.Windows.Input.InputMethod.prototype._ctor = function () {
	System.Windows.DependencyObject.prototype._ctor$0.call(this);
};
System.Windows.Input.InputMethod.GetIsInputMethodEnabled = function (target) {
	if (target === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["target"]);
	}
	if (!(JSIL.TryCast(target, System.Windows.Controls.TextBox) || JSIL.TryCast(target, System.Windows.Controls.RichTextBox))) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("InputMethod_TargetMustBeTextBoxOrRichTextBox")]);
	}
	return JSIL.Cast(target.GetValue(System.Windows.Input.InputMethod.IsInputMethodEnabledProperty), System.Boolean);
};
System.Windows.Input.InputMethod.SetIsInputMethodEnabled = function (target, value) {
	if (target === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["target"]);
	}
	if (!(JSIL.TryCast(target, System.Windows.Controls.TextBox) || JSIL.TryCast(target, System.Windows.Controls.RichTextBox))) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("InputMethod_TargetMustBeTextBoxOrRichTextBox")]);
	}
	target.SetValue(System.Windows.Input.InputMethod.IsInputMethodEnabledProperty, value);
};
System.Windows.Input.InputMethod.GetPreferredImeConversionMode = function (target) {
	if (target === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["target"]);
	}
	if (!(JSIL.TryCast(target, System.Windows.Controls.TextBox) || JSIL.TryCast(target, System.Windows.Controls.RichTextBox))) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("InputMethod_TargetMustBeTextBoxOrRichTextBox")]);
	}
	return JSIL.Cast(target.GetValue(System.Windows.Input.InputMethod.PreferredImeConversionModeProperty), System.Windows.Input.ImeConversionModeValues);
};
System.Windows.Input.InputMethod.SetPreferredImeConversionMode = function (target, value) {
	if (target === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["target"]);
	}
	if (!(JSIL.TryCast(target, System.Windows.Controls.TextBox) || JSIL.TryCast(target, System.Windows.Controls.RichTextBox))) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("InputMethod_TargetMustBeTextBoxOrRichTextBox")]);
	}
	target.SetValue(System.Windows.Input.InputMethod.PreferredImeConversionModeProperty, value);
};
System.Windows.Input.InputMethod.GetPreferredImeState = function (target) {
	if (target === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["target"]);
	}
	if (!(JSIL.TryCast(target, System.Windows.Controls.TextBox) || JSIL.TryCast(target, System.Windows.Controls.RichTextBox))) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("InputMethod_TargetMustBeTextBoxOrRichTextBox")]);
	}
	return JSIL.Cast(target.GetValue(System.Windows.Input.InputMethod.PreferredImeStateProperty), System.Windows.Input.InputMethodState);
};
System.Windows.Input.InputMethod.SetPreferredImeState = function (target, value) {
	if (target === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["target"]);
	}
	if (!(JSIL.TryCast(target, System.Windows.Controls.TextBox) || JSIL.TryCast(target, System.Windows.Controls.RichTextBox))) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("InputMethod_TargetMustBeTextBoxOrRichTextBox")]);
	}
	target.SetValue(System.Windows.Input.InputMethod.PreferredImeStateProperty, value);
};
Object.defineProperty(System.Windows.Input.InputMethod, "native_PROPERTYINDEX_CONTROL_INPUTMETHOD_ISINPUTMETHODENABLED", {
		"value": 19316}
);
Object.defineProperty(System.Windows.Input.InputMethod, "native_PROPERTYINDEX_CONTROL_INPUTMETHOD_IME_CONVERSION_MODE", {
		"value": 19317}
);
Object.defineProperty(System.Windows.Input.InputMethod, "native_PROPERTYINDEX_CONTROL_INPUTMETHOD_IME_STATE", {
		"value": 19318}
);
System.Windows.Input.InputMethod.IsInputMethodEnabledProperty = null;
System.Windows.Input.InputMethod.PreferredImeConversionModeProperty = null;
System.Windows.Input.InputMethod.PreferredImeStateProperty = null;
System.Windows.Input.InputMethod._cctor = function () {
	System.Windows.Input.InputMethod.IsInputMethodEnabledProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19316, System.Boolean);
	System.Windows.Input.InputMethod.PreferredImeConversionModeProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19317, System.Windows.Input.ImeConversionModeValues);
	System.Windows.Input.InputMethod.PreferredImeStateProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19318, System.Windows.Input.InputMethodState);
};

System.Windows.Input.Keyboard.get_Modifiers = function () {
	return $asm02.MS.Internal.XcpImports.Input_GetKeyboardModifiers();
};
JSIL.MakeProperty(System.Windows.Input.Keyboard, "Modifiers", 
	System.Windows.Input.Keyboard.get_Modifiers, null);

$asm02.System.Windows.Input.KeyboardNavigation.GetAcceptsReturn = function (element) {
	if (element === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["element"]);
	}
	return JSIL.Cast(element.GetValue($asm02.System.Windows.Input.KeyboardNavigation.AcceptsReturnProperty), System.Boolean);
};
$asm02.System.Windows.Input.KeyboardNavigation.SetAcceptsReturn = function (element, enabled) {
	if (element === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["element"]);
	}
	element.SetValue($asm02.System.Windows.Input.KeyboardNavigation.AcceptsReturnProperty, enabled);
};
$asm02.System.Windows.Input.KeyboardNavigation.GetVisualRoot = function (d) {
	var dependencyObject = d;
	if ($asm02.MS.Internal.QuirksMode.ShouldGetVisualRootUsingVisualTreeHelper()) {
		var parent = System.Windows.Media.VisualTreeHelper.GetParent(dependencyObject);
	} else {
	__loop0__: 
		while (true) {
			var frameworkElement = JSIL.TryCast(dependencyObject, System.Windows.FrameworkElement);
			if (frameworkElement === null) {
				break __loop0__;
			}
			var parent2 = frameworkElement.Parent;
			if (parent2 === null) {
				break __loop0__;
			}
			dependencyObject = parent2;
		}
	}
	return dependencyObject;
};
$asm02.System.Windows.Input.KeyboardNavigation.AcceptsReturnProperty = null;
$asm02.System.Windows.Input.KeyboardNavigation._cctor = function () {
	$asm02.System.Windows.Input.KeyboardNavigation.AcceptsReturnProperty = System.Windows.DependencyProperty.RegisterAttached("AcceptsReturn", System.Boolean, $asm02.System.Windows.Input.KeyboardNavigation, null);
};

System.Windows.Input.Touch.add_FrameReported = function (value) {
	if (System.Windows.Input.Touch._frameReported === null) {
		$asm02.MS.Internal.XcpImports.WantsEventStatic(5, 1);
	}
	System.Windows.Input.Touch._frameReported = System.Delegate.Combine(System.Windows.Input.Touch._frameReported, value);
};
System.Windows.Input.Touch.remove_FrameReported = function (value) {
	System.Windows.Input.Touch._frameReported = System.Delegate.Remove(System.Windows.Input.Touch._frameReported, value);
	if (System.Windows.Input.Touch._frameReported === null) {
		$asm02.MS.Internal.XcpImports.WantsEventStatic(5, 0);
	}
};
System.Windows.Input.Touch.add__frameReported = function (value) {
	System.Windows.Input.Touch._frameReported = System.Delegate.Combine(System.Windows.Input.Touch._frameReported, value);
};
System.Windows.Input.Touch.remove__frameReported = function (value) {
	System.Windows.Input.Touch._frameReported = System.Delegate.Remove(System.Windows.Input.Touch._frameReported, value);
};
System.Windows.Input.Touch.OnTouch = function (sender, e) {
	if (System.Windows.Input.Touch._frameReported !== null) {
		System.Windows.Input.Touch._frameReported(sender, e);
	}
};
System.Windows.Input.Touch._frameReported = null;

System.Windows.Input.TextComposition.prototype._ctor = function (compositionText) {
	System.Object.prototype._ctor.call(this);
	this._compositionText = compositionText;
};
System.Windows.Input.TextComposition.prototype.get_CompositionText = function () {
	return this._compositionText;
};
JSIL.MakeProperty(System.Windows.Input.TextComposition.prototype, "CompositionText", 
	System.Windows.Input.TextComposition.prototype.get_CompositionText, null);
System.Windows.Input.TextComposition.prototype._compositionText = null;

System.Windows.Markup.ContentPropertyAttribute.prototype._ctor$0 = function () {
	System.Attribute.prototype._ctor.call(this);
	this._name = null;
};
System.Windows.Markup.ContentPropertyAttribute.prototype._ctor$1 = function (name) {
	System.Attribute.prototype._ctor.call(this);
	this._name = name;
};
System.Windows.Markup.ContentPropertyAttribute.prototype._ctor$2 = function (name, isNativeProperty) {
	System.Attribute.prototype._ctor.call(this);
	this._name = name;
	this._isNativeProperty = isNativeProperty;
};
System.Windows.Markup.ContentPropertyAttribute.prototype.get_Name = function () {
	return this._name;
};
System.Windows.Markup.ContentPropertyAttribute.prototype.get_IsNativeProperty = function () {
	return this._isNativeProperty;
};
JSIL.OverloadedMethod(System.Windows.Markup.ContentPropertyAttribute.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.String]], 
		["_ctor$2", [System.String, System.Boolean]]
	]);
JSIL.MakeProperty(System.Windows.Markup.ContentPropertyAttribute.prototype, "Name", 
	System.Windows.Markup.ContentPropertyAttribute.prototype.get_Name, null);
JSIL.MakeProperty(System.Windows.Markup.ContentPropertyAttribute.prototype, "IsNativeProperty", 
	System.Windows.Markup.ContentPropertyAttribute.prototype.get_IsNativeProperty, null);
System.Windows.Markup.ContentPropertyAttribute.prototype._name = null;
System.Windows.Markup.ContentPropertyAttribute.prototype._isNativeProperty = false;

System.Windows.Markup.XmlLanguage.prototype._ctor$0 = function () {
	System.Object.prototype._ctor.call(this);
};
System.Windows.Markup.XmlLanguage.GetLanguage = function (ietfLanguageTag) {
	if (!(System.String.IsNullOrEmpty(ietfLanguageTag) || $asm02.MS.Internal.XcpImports.Xml_ValidateXmlLanguage(ietfLanguageTag))) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", ["ietfLanguageTag"]);
	}
	return JSIL.New(System.Windows.Markup.XmlLanguage, "_ctor$1", [ietfLanguageTag]);
};
System.Windows.Markup.XmlLanguage.prototype.get_IetfLanguageTag = function () {
	return this._languageTag;
};
System.Windows.Markup.XmlLanguage.op_Equality = function (xmlLanguage1, xmlLanguage2) {
	return ((xmlLanguage1 !== null) && 
		xmlLanguage2 && (xmlLanguage1._languageTag == xmlLanguage2._languageTag));
};
System.Windows.Markup.XmlLanguage.op_Inequality = function (xmlLanguage1, xmlLanguage2) {
	return (!((xmlLanguage1 !== null) && 
			xmlLanguage2) || (xmlLanguage1._languageTag != xmlLanguage2._languageTag));
};
System.Windows.Markup.XmlLanguage.prototype.Equals = function (obj) {
	var xmlLanguage = JSIL.TryCast(obj, System.Windows.Markup.XmlLanguage);
	return (obj && (this._languageTag == xmlLanguage._languageTag));
};
System.Windows.Markup.XmlLanguage.prototype.GetHashCode = function () {
	return this._languageTag.GetHashCode();
};
System.Windows.Markup.XmlLanguage.prototype._ctor$1 = function (languageTag) {
	System.Object.prototype._ctor.call(this);
	this._languageTag = languageTag.ToLower$1(System.Globalization.CultureInfo.InvariantCulture);
};
JSIL.OverloadedMethod(System.Windows.Markup.XmlLanguage.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.String]]
	]);
JSIL.MakeProperty(System.Windows.Markup.XmlLanguage.prototype, "IetfLanguageTag", 
	System.Windows.Markup.XmlLanguage.prototype.get_IetfLanguageTag, null);
System.Windows.Markup.XmlLanguage.prototype._languageTag = null;

System.Windows.Markup.XmlnsDefinitionAttribute.prototype._ctor = function (xmlNamespace, clrNamespace) {
	System.Attribute.prototype._ctor.call(this);
	if (xmlNamespace === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["xmlNamespace"]);
	}
	if (clrNamespace === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["clrNamespace"]);
	}
	this._xmlNamespace = xmlNamespace;
	this._clrNamespace = clrNamespace;
};
System.Windows.Markup.XmlnsDefinitionAttribute.prototype.get_AssemblyName = function () {
	return this._assemblyName;
};
System.Windows.Markup.XmlnsDefinitionAttribute.prototype.set_AssemblyName = function (value) {
	this._assemblyName = value;
};
System.Windows.Markup.XmlnsDefinitionAttribute.prototype.get_ClrNamespace = function () {
	return this._clrNamespace;
};
System.Windows.Markup.XmlnsDefinitionAttribute.prototype.get_XmlNamespace = function () {
	return this._xmlNamespace;
};
JSIL.MakeProperty(System.Windows.Markup.XmlnsDefinitionAttribute.prototype, "AssemblyName", 
	System.Windows.Markup.XmlnsDefinitionAttribute.prototype.get_AssemblyName, System.Windows.Markup.XmlnsDefinitionAttribute.prototype.set_AssemblyName);
JSIL.MakeProperty(System.Windows.Markup.XmlnsDefinitionAttribute.prototype, "ClrNamespace", 
	System.Windows.Markup.XmlnsDefinitionAttribute.prototype.get_ClrNamespace, null);
JSIL.MakeProperty(System.Windows.Markup.XmlnsDefinitionAttribute.prototype, "XmlNamespace", 
	System.Windows.Markup.XmlnsDefinitionAttribute.prototype.get_XmlNamespace, null);
System.Windows.Markup.XmlnsDefinitionAttribute.prototype._assemblyName = null;
System.Windows.Markup.XmlnsDefinitionAttribute.prototype._clrNamespace = null;
System.Windows.Markup.XmlnsDefinitionAttribute.prototype._xmlNamespace = null;

System.Windows.Markup.XmlnsPrefixAttribute.prototype._ctor = function (xmlNamespace, prefix) {
	System.Attribute.prototype._ctor.call(this);
	if (xmlNamespace === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["xmlNamespace"]);
	}
	if (prefix === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["prefix"]);
	}
	this._xmlNamespace = xmlNamespace;
	this._prefix = prefix;
};
System.Windows.Markup.XmlnsPrefixAttribute.prototype.get_XmlNamespace = function () {
	return this._xmlNamespace;
};
System.Windows.Markup.XmlnsPrefixAttribute.prototype.get_Prefix = function () {
	return this._prefix;
};
JSIL.MakeProperty(System.Windows.Markup.XmlnsPrefixAttribute.prototype, "XmlNamespace", 
	System.Windows.Markup.XmlnsPrefixAttribute.prototype.get_XmlNamespace, null);
JSIL.MakeProperty(System.Windows.Markup.XmlnsPrefixAttribute.prototype, "Prefix", 
	System.Windows.Markup.XmlnsPrefixAttribute.prototype.get_Prefix, null);
System.Windows.Markup.XmlnsPrefixAttribute.prototype._xmlNamespace = null;
System.Windows.Markup.XmlnsPrefixAttribute.prototype._prefix = null;

System.Windows.Media.CompositionTarget.add_Rendering = function (value) {
	if (System.Windows.Media.CompositionTarget._rendering === null) {
		$asm02.MS.Internal.XcpImports.WantsEventStatic(3, 1);
	}
	System.Windows.Media.CompositionTarget._rendering = System.Delegate.Combine(System.Windows.Media.CompositionTarget._rendering, value);
};
System.Windows.Media.CompositionTarget.remove_Rendering = function (value) {
	System.Windows.Media.CompositionTarget._rendering = System.Delegate.Remove(System.Windows.Media.CompositionTarget._rendering, value);
	if (System.Windows.Media.CompositionTarget._rendering === null) {
		$asm02.MS.Internal.XcpImports.WantsEventStatic(3, 0);
	}
};
System.Windows.Media.CompositionTarget.add__rendering = function (value) {
	System.Windows.Media.CompositionTarget._rendering = System.Delegate.Combine(System.Windows.Media.CompositionTarget._rendering, value);
};
System.Windows.Media.CompositionTarget.remove__rendering = function (value) {
	System.Windows.Media.CompositionTarget._rendering = System.Delegate.Remove(System.Windows.Media.CompositionTarget._rendering, value);
};
System.Windows.Media.CompositionTarget.OnRendering = function (sender, e) {
	if (System.Windows.Media.CompositionTarget._rendering !== null) {
		System.Windows.Media.CompositionTarget._rendering(sender, e);
	}
};
System.Windows.Media.CompositionTarget._rendering = null;

System.Windows.Media.FontFamily.prototype._ctor = function (familyName) {
	System.Object.prototype._ctor.call(this);
	this._familyName = familyName;
};
System.Windows.Media.FontFamily.prototype.get_Source = function () {
	return this._familyName;
};
System.Windows.Media.FontFamily.prototype.toString = function () {
	if (this._familyName === null) {
		return System.String.Empty;
	}
	return this._familyName;
};
System.Windows.Media.FontFamily.prototype.GetHashCode = function () {
	if (this._familyName !== null) {
		var text = this._familyName.ToLower$1(System.Globalization.CultureInfo.CurrentCulture);
		return text.GetHashCode();
	}
	return System.Object.prototype.GetHashCode.call(this);
};
System.Windows.Media.FontFamily.prototype.Equals = function (o) {
	var fontFamily = JSIL.TryCast(o, System.Windows.Media.FontFamily);
	if (fontFamily === null) {
		return false;
	}
	if (this._familyName !== null) {
		var text = this._familyName.ToLower$1(System.Globalization.CultureInfo.CurrentCulture);
		var value = fontFamily.Source;
		if (fontFamily.Source !== null) {
			value = fontFamily.Source.ToLower$1(System.Globalization.CultureInfo.CurrentCulture);
		}
		return text.Equals$1(value);
	}
	return System.Object.prototype.Equals.call(this, o);
};
JSIL.MakeProperty(System.Windows.Media.FontFamily.prototype, "Source", 
	System.Windows.Media.FontFamily.prototype.get_Source, null);
System.Windows.Media.FontFamily.prototype._familyName = null;

System.Windows.Media.Fonts.get_SystemTypefaces = function () {
	if (System.Windows.Media.Fonts._systemGlyphTypefaceCollection === null) {
		System.Windows.Media.Fonts._systemGlyphTypefaceCollection = $asm02.MS.Internal.XcpImports.Font_GetSystemGlyphTypefaces();
	}
	return new $asm02.System.Windows.Media.Fonts.TypefaceCollection(System.Windows.Media.Fonts._systemGlyphTypefaceCollection);
};
JSIL.MakeProperty(System.Windows.Media.Fonts, "SystemTypefaces", 
	System.Windows.Media.Fonts.get_SystemTypefaces, null);
System.Windows.Media.Fonts._systemGlyphTypefaceCollection = null;
System.Windows.Media.Fonts._cctor = function () {
};

$asm02.System.Windows.Media.Fonts.TypefaceCollection.prototype._ctor = function (glyphTypefaceCollection) {
	this._glyphTypefaceCollection = glyphTypefaceCollection;
};
$asm02.System.Windows.Media.Fonts.TypefaceCollection.prototype.Add = function (item) {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm02.System.Windows.Media.Fonts.TypefaceCollection.prototype.Clear = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm02.System.Windows.Media.Fonts.TypefaceCollection.prototype.Contains = function (item) {
	var enumerator = this.GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current;
			if (current.Equals(item)) {
				return true;
			}
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	return false;
};
$asm02.System.Windows.Media.Fonts.TypefaceCollection.prototype.CopyTo = function (array, arrayIndex) {
	if (array === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["array"]);
	}
	if (array.Rank !== 1) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", ["array"]);
	}
	if (!((arrayIndex >= 0) && (arrayIndex < array.length))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["arrayIndex"]);
	}
	if ((arrayIndex + this.Count) > array.length) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", ["arrayIndex"]);
	}
	var enumerator = this.GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current;
			array[arrayIndex++] = current;
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
};
$asm02.System.Windows.Media.Fonts.TypefaceCollection.prototype.get_Count = function () {
	var num = 0;
	var enumerator = this.GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var arg_11_0 = enumerator.IEnumerator$b1_Current;
			++num;
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	return num;
};
$asm02.System.Windows.Media.Fonts.TypefaceCollection.prototype.get_IsReadOnly = function () {
	return true;
};
$asm02.System.Windows.Media.Fonts.TypefaceCollection.prototype.Remove = function (item) {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm02.System.Windows.Media.Fonts.TypefaceCollection.prototype.GetEnumerator = function () {
	var $lGetEnumerator$gd__ = new $asm02.System.Windows.Media.Fonts.TypefaceCollection.$lGetEnumerator$gd__0(0);
	$lGetEnumerator$gd__.$this = this.MemberwiseClone();
	return $lGetEnumerator$gd__;
};
$asm02.System.Windows.Media.Fonts.TypefaceCollection.prototype.IEnumerable_GetEnumerator = function () {
	return this.IEnumerable$b1_GetEnumerator();
};
JSIL.MakeProperty($asm02.System.Windows.Media.Fonts.TypefaceCollection.prototype, "Count", 
	$asm02.System.Windows.Media.Fonts.TypefaceCollection.prototype.get_Count, null);
JSIL.MakeProperty($asm02.System.Windows.Media.Fonts.TypefaceCollection.prototype, "IsReadOnly", 
	$asm02.System.Windows.Media.Fonts.TypefaceCollection.prototype.get_IsReadOnly, null);
$asm02.System.Windows.Media.Fonts.TypefaceCollection.prototype._glyphTypefaceCollection = null;

$asm02.System.Windows.Media.Fonts.TypefaceCollection.$lGetEnumerator$gd__0.prototype.IEnumerator_MoveNext = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				try {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								switch (this.$state) {
									case 0: 
										this.$state = -1;
										this.$wrap2 = this.$this._glyphTypefaceCollection.GetEnumerator();
										this.$state = 1;
										break;
									case 1: 
										__label1__ = "IL_88";
										continue __step1__;
									case 2: 
										this.$state = 1;
										break;
									default: 
										__label1__ = "IL_88";
										continue __step1__;
								}
								if (this.$wrap2.IEnumerator_MoveNext()) {
									this.glyphTypeface = this.$wrap2.IEnumerator$b1_Current;
									this.$current = new System.Windows.Media.Typeface(this.glyphTypeface);
									this.$state = 2;
									var result = true;
									return result;
								}
								this.$l$gm__Finally3();
								__label1__ = "IL_88";
								continue __step1__;
								break;
							case "IL_88":
								result = false;
								break __step1__;
						}
					}
				} catch ($exception) {
					this.IDisposable_Dispose();
					throw $exception;
				}
				return result;
				break __step0__;
		}
	}
};
$asm02.System.Windows.Media.Fonts.TypefaceCollection.$lGetEnumerator$gd__0.prototype.IEnumerator$b1_get_Current = function () {
	return this.$current;
};
$asm02.System.Windows.Media.Fonts.TypefaceCollection.$lGetEnumerator$gd__0.prototype.IEnumerator_Reset = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm02.System.Windows.Media.Fonts.TypefaceCollection.$lGetEnumerator$gd__0.prototype.IDisposable_Dispose = function () {
	switch (this.$state) {
		case 1: 
		case 2: 
			try {
			} finally {
				this.$l$gm__Finally3();
			}
			return;
		default: 
			return;
	}
};
$asm02.System.Windows.Media.Fonts.TypefaceCollection.$lGetEnumerator$gd__0.prototype.IEnumerator_get_Current = function () {
	return this.$current;
};
$asm02.System.Windows.Media.Fonts.TypefaceCollection.$lGetEnumerator$gd__0.prototype._ctor = function ($l$g1__state) {
	System.Object.prototype._ctor.call(this);
	this.$state = $l$g1__state;
};
$asm02.System.Windows.Media.Fonts.TypefaceCollection.$lGetEnumerator$gd__0.prototype.$l$gm__Finally3 = function () {
	this.$state = -1;
	if (this.$wrap2 !== null) {
		this.$wrap2.IDisposable_Dispose();
	}
};
JSIL.MakeProperty($asm02.System.Windows.Media.Fonts.TypefaceCollection.$lGetEnumerator$gd__0.prototype, "IEnumerator$b1_Current", 
	$asm02.System.Windows.Media.Fonts.TypefaceCollection.$lGetEnumerator$gd__0.prototype.IEnumerator$b1_get_Current, null);
JSIL.MakeProperty($asm02.System.Windows.Media.Fonts.TypefaceCollection.$lGetEnumerator$gd__0.prototype, "IEnumerator_Current", 
	$asm02.System.Windows.Media.Fonts.TypefaceCollection.$lGetEnumerator$gd__0.prototype.IEnumerator_get_Current, null);
$asm02.System.Windows.Media.Fonts.TypefaceCollection.$lGetEnumerator$gd__0.prototype.$current = null;
$asm02.System.Windows.Media.Fonts.TypefaceCollection.$lGetEnumerator$gd__0.prototype.$state = 0;
$asm02.System.Windows.Media.Fonts.TypefaceCollection.$lGetEnumerator$gd__0.prototype.glyphTypeface = null;
$asm02.System.Windows.Media.Fonts.TypefaceCollection.$lGetEnumerator$gd__0.prototype.$wrap2 = null;

System.Windows.Media.Typeface.prototype._ctor = function (internalGlyphTypeface) {
	System.Object.prototype._ctor.call(this);
	this._internalGlyphTypeface = internalGlyphTypeface;
};
System.Windows.Media.Typeface.prototype.TryGetGlyphTypeface = function (/* ref */ glyphTypeface) {
	glyphTypeface.value = new System.Windows.Media.GlyphTypeface(this._internalGlyphTypeface);
	return (this._internalGlyphTypeface !== null);
};
System.Windows.Media.Typeface.prototype._internalGlyphTypeface = null;

System.Windows.Media.GlyphTypeface.prototype.get_Version = function () {
	return (this._internalGlyphTypeface.MajorVersion + (this._internalGlyphTypeface.MinorVersion / 100));
};
System.Windows.Media.GlyphTypeface.prototype.get_FontFileName = function () {
	return this._internalGlyphTypeface.FontUri;
};
System.Windows.Media.GlyphTypeface.prototype.get_InternalGlyphTypeface = function () {
	return this._internalGlyphTypeface;
};
System.Windows.Media.GlyphTypeface.prototype._ctor = function (internalGlyphtypeface) {
	System.Object.prototype._ctor.call(this);
	this._internalGlyphTypeface = internalGlyphtypeface;
};
JSIL.MakeProperty(System.Windows.Media.GlyphTypeface.prototype, "Version", 
	System.Windows.Media.GlyphTypeface.prototype.get_Version, null);
JSIL.MakeProperty(System.Windows.Media.GlyphTypeface.prototype, "FontFileName", 
	System.Windows.Media.GlyphTypeface.prototype.get_FontFileName, null);
JSIL.MakeProperty(System.Windows.Media.GlyphTypeface.prototype, "InternalGlyphTypeface", 
	System.Windows.Media.GlyphTypeface.prototype.get_InternalGlyphTypeface, null);
System.Windows.Media.GlyphTypeface.prototype._internalGlyphTypeface = null;

System.Windows.Media.ImageSourceConverter.prototype._ctor = function () {
	System.ComponentModel.TypeConverter.prototype._ctor.call(this);
};
System.Windows.Media.ImageSourceConverter.prototype.CanConvertFrom = function (context, sourceType) {
	return (!((sourceType !== System.Uri) && 
			(sourceType !== System.String)) || System.ComponentModel.TypeConverter.prototype.CanConvertFrom$1.call(this, context, sourceType));
};
System.Windows.Media.ImageSourceConverter.prototype.ConvertFrom = function (context, culture, value) {
	if (JSIL.TryCast(value, System.Uri) !== null) {
		return JSIL.New(System.Windows.Media.Imaging.BitmapImage, "_ctor$0", []).__Initialize__({
				UriSource: JSIL.Cast(value, System.Uri)}
		);
	}
	if (JSIL.TryCast(value, System.String) !== null) {
		return JSIL.New(System.Windows.Media.Imaging.BitmapImage, "_ctor$0", []).__Initialize__({
				UriSource: JSIL.New(System.Uri, "_ctor$1", [JSIL.Cast(value, System.String), System.UriKind.RelativeOrAbsolute])}
		);
	}
	return System.ComponentModel.TypeConverter.prototype.ConvertFrom$1.call(this, context, culture, value);
};

System.Windows.Media.Imaging.WriteableBitmap.prototype._ctor$0 = function (source) {
	var flag = new JSIL.Variable(false);
	System.Windows.Media.Imaging.BitmapSource.prototype._ctor$1.call(this, 314);
	this._pixelWidth = source.PixelWidth;
	this._pixelHeight = source.PixelHeight;
	this._pixelArrayLength = (this._pixelWidth * this._pixelHeight);
	this.AllocPixelBuffer();
	$asm02.MS.Internal.XcpImports.WriteableBitmap_CreateFromSource(this, this._ptrPinnedPixels, source, /* ref */ flag);
	if (flag.value) {
		this._bHasProtectedContent = true;
		this.ReleasePixelBuffer();
	}
};
System.Windows.Media.Imaging.WriteableBitmap.prototype._ctor$1 = function (pixelWidth, pixelHeight) {
	System.Windows.Media.Imaging.BitmapSource.prototype._ctor$1.call(this, 314);
	if (pixelWidth < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["pixelWidth"]);
	}
	if (pixelHeight < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["pixelHeight"]);
	}
	this._pixelWidth = pixelWidth;
	this._pixelHeight = pixelHeight;
	this._pixelArrayLength = (this._pixelWidth * this._pixelHeight);
	this.AllocPixelBuffer();
	$asm02.MS.Internal.XcpImports.WriteableBitmap_Create(this, this._ptrPinnedPixels, this._pixelWidth, this._pixelHeight);
};
System.Windows.Media.Imaging.WriteableBitmap.prototype._ctor$2 = function (element, transform) {
	var flag = new JSIL.Variable(false);
	System.Windows.Media.Imaging.BitmapSource.prototype._ctor$1.call(this, 314);
	if (element === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["element"]);
	}
	if (transform === null) {
		transform = new System.Windows.Media.TranslateTransform();
	}
	$asm02.MS.Internal.XcpImports.WriteableBitmap_CalculateSize(this, element, transform);
	var pixelWidthInternal = System.Windows.Media.Imaging.BitmapSource.prototype.get_PixelWidthInternal.call(this);
	var pixelHeightInternal = System.Windows.Media.Imaging.BitmapSource.prototype.get_PixelHeightInternal.call(this);
	if (!((pixelWidthInternal >= 0) && (pixelHeightInternal >= 0))) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("WriteableBitmap_InvalidSize")]);
	}
	this._pixelWidth = pixelWidthInternal;
	this._pixelHeight = pixelHeightInternal;
	this._pixelArrayLength = (this._pixelWidth * this._pixelHeight);
	this.AllocPixelBuffer();
	$asm02.MS.Internal.XcpImports.WriteableBitmap_CreateFromUIElement(
		this, 
		element, 
		transform, 
		this._ptrPinnedPixels, 
		/* ref */ flag
	);
	if (!(!flag.value || this._bHasProtectedContent)) {
		this._bHasProtectedContent = true;
		this.ReleasePixelBuffer();
	}
};
System.Windows.Media.Imaging.WriteableBitmap.prototype.Finalize = function () {
	try {
		this.ReleasePixelBuffer();
	} finally {
		System.Object.prototype.Finalize.call(this);
	}
};
System.Windows.Media.Imaging.WriteableBitmap.prototype.get_Pixels = function () {
	if (this._pixels === null) {
		throw JSIL.New(System.Security.SecurityException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("WriteableBitmap_Protected")]);
	}
	return this._pixels;
};
System.Windows.Media.Imaging.WriteableBitmap.prototype.get_PixelHeightInternal = function () {
	return this._pixelHeight;
};
System.Windows.Media.Imaging.WriteableBitmap.prototype.get_PixelWidthInternal = function () {
	return this._pixelWidth;
};
System.Windows.Media.Imaging.WriteableBitmap.prototype.Render = function (element, transform) {
	var flag = new JSIL.Variable(false);
	$asm02.MS.Internal.XcpImports.CheckThread();
	if (element === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["element"]);
	}
	if (transform === null) {
		transform = new System.Windows.Media.TranslateTransform();
	}
	$asm02.MS.Internal.XcpImports.WriteableBitmap_Render(this, element, transform, /* ref */ flag);
	if (!(!flag.value || this._bHasProtectedContent)) {
		this._bHasProtectedContent = true;
		this.ReleasePixelBuffer();
	}
};
System.Windows.Media.Imaging.WriteableBitmap.prototype.Invalidate = function () {
	$asm02.MS.Internal.XcpImports.CheckThread();
	$asm02.MS.Internal.XcpImports.WriteableBitmap_Invalidate(this);
};
System.Windows.Media.Imaging.WriteableBitmap.prototype.SetSourceInternal = function (streamSource) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	System.Windows.Media.Imaging.BitmapSource.prototype.SetSourceInternal.call(this, streamSource);
	this._pixelWidth = System.Windows.Media.Imaging.BitmapSource.prototype.get_PixelWidthInternal.call(this);
	this._pixelHeight = System.Windows.Media.Imaging.BitmapSource.prototype.get_PixelHeightInternal.call(this);
	this._pixelArrayLength = (this._pixelWidth * this._pixelHeight);
	this.AllocPixelBuffer();
	$asm02.MS.Internal.XcpImports.WriteableBitmap_CopyPixels(this, this._ptrPinnedPixels);
};
System.Windows.Media.Imaging.WriteableBitmap.prototype.ReleasePixelBuffer = function () {
	if (this._pixels !== null) {
		this._pinned.Free();
		this._pixels = null;
	}
};
System.Windows.Media.Imaging.WriteableBitmap.prototype.AllocPixelBuffer = function () {
	this.ReleasePixelBuffer();
	this._pixels = JSIL.Array.New(System.Int32, this._pixelArrayLength);
	this._pinned = System.Runtime.InteropServices.GCHandle.Alloc$1(this._pixels, System.Runtime.InteropServices.GCHandleType.Pinned).MemberwiseClone();
	this._ptrPinnedPixels = this._pinned.AddrOfPinnedObject();
};
JSIL.OverloadedMethod(System.Windows.Media.Imaging.WriteableBitmap.prototype, "_ctor", [
		["_ctor$0", [System.Windows.Media.Imaging.BitmapSource]], 
		["_ctor$1", [System.Int32, System.Int32]], 
		["_ctor$2", [System.Windows.UIElement, System.Windows.Media.Transform]]
	]);
JSIL.MakeProperty(System.Windows.Media.Imaging.WriteableBitmap.prototype, "Pixels", 
	System.Windows.Media.Imaging.WriteableBitmap.prototype.get_Pixels, null);
JSIL.MakeProperty(System.Windows.Media.Imaging.WriteableBitmap.prototype, "PixelHeightInternal", 
	System.Windows.Media.Imaging.WriteableBitmap.prototype.get_PixelHeightInternal, null);
JSIL.MakeProperty(System.Windows.Media.Imaging.WriteableBitmap.prototype, "PixelWidthInternal", 
	System.Windows.Media.Imaging.WriteableBitmap.prototype.get_PixelWidthInternal, null);
System.Windows.Media.Imaging.WriteableBitmap.prototype._pixels = null;
System.Windows.Media.Imaging.WriteableBitmap.prototype._bHasProtectedContent = false;
System.Windows.Media.Imaging.WriteableBitmap.prototype._pixelWidth = 0;
System.Windows.Media.Imaging.WriteableBitmap.prototype._pixelHeight = 0;
System.Windows.Media.Imaging.WriteableBitmap.prototype._pixelArrayLength = 0;
System.Windows.Media.Imaging.WriteableBitmap.prototype._ptrPinnedPixels = 0;

System.Windows.Interop.HostingRenderTargetBitmap.prototype._ctor = function (width, height, bitmap) {
	System.Object.prototype._ctor.call(this);
	var zero = new JSIL.Variable(System.IntPtr.Zero);
	$asm02.MS.Internal.XcpImports.RenderTargetBitmapCreate(
		$asm02.MS.Internal.JoltHelper.Context, 
		0, 
		width, 
		height, 
		bitmap, 
		/* ref */ zero
	);
	this.m_nativePtr = new $asm02.MS.Internal.NativeObjectSafeHandle();
	this.m_nativePtr.NativeObject = zero.value;
	this.m_nativePtr.NativeObjectType = MS.Internal.VType.valueInteropObject;
	;
	;
};
System.Windows.Interop.HostingRenderTargetBitmap.prototype.Render = function (visual) {
	var num = new JSIL.Variable(0), num2 = new JSIL.Variable(0), num3 = new JSIL.Variable(0), num4 = new JSIL.Variable(0);
	var result = new (System.Nullable$b1.Of(System.Windows.Rect)) ();
	$asm02.MS.Internal.XcpImports.RenderTargetBitmapRender(
		this, 
		visual, 
		/* ref */ num, 
		/* ref */ num2, 
		/* ref */ num3, 
		/* ref */ num4
	);
	if (!((num3.value <= 0) || (num4.value <= 0))) {
		result._ctor(JSIL.New(System.Windows.Rect, "_ctor$0", [num.value, num2.value, num3.value, num4.value]));
	}
	return result;
};
System.Windows.Interop.HostingRenderTargetBitmap.prototype.IManagedPeer_BeginShutdown = function () {
	System.GC.SuppressFinalize(this.m_nativePtr);
	$asm02.MS.Internal.XcpImports.DisconnectManagedPeer(this);
};
System.Windows.Interop.HostingRenderTargetBitmap.prototype.IManagedPeer_EndShutdown = function () {
	if (this.m_nativePtr !== null) {
		$asm02.MS.Internal.XcpImports.ReleaseNativeValue(this.m_nativePtr.NativeObject, 18);
		System.GC.KeepAlive(this);
		this.m_nativePtr = null;
	}
};
System.Windows.Interop.HostingRenderTargetBitmap.prototype.IManagedPeer_RemovePeerReferenceToItem = function (child) {
	throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
};
System.Windows.Interop.HostingRenderTargetBitmap.prototype.IManagedPeer_AddPeerReferenceToItem = function (child) {
	throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
};
System.Windows.Interop.HostingRenderTargetBitmap.prototype.IManagedPeer_GetInstanceEventDelegate = function (eventName) {
	throw JSIL.New(System.NotImplementedException, "_ctor$0", []);
};
System.Windows.Interop.HostingRenderTargetBitmap.prototype.IManagedPeerBase_get_NativeObject = function () {
	return this.m_nativePtr.NativeObject;
};
JSIL.MakeProperty(System.Windows.Interop.HostingRenderTargetBitmap.prototype, "IManagedPeerBase_NativeObject", 
	System.Windows.Interop.HostingRenderTargetBitmap.prototype.IManagedPeerBase_get_NativeObject, null);
System.Windows.Interop.HostingRenderTargetBitmap.prototype.m_nativePtr = null;

System.Windows.Media.MediaStreamDescription.prototype._ctor = function (type, mediaStreamAttributes) {
	System.Object.prototype._ctor.call(this);
	this._type = type;
	var enumerator = mediaStreamAttributes.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current.MemberwiseClone();
			switch (Number(current.Key)) {
				case 0: 
				case 1: 
				case 2: 
				case 3: 
					break;
				default: 
					throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
			}
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	this._mediaStreamAttributes = mediaStreamAttributes;
	this.internalIndex = 0;
};
System.Windows.Media.MediaStreamDescription.prototype.get_Type = function () {
	return this._type;
};
System.Windows.Media.MediaStreamDescription.prototype.get_MediaAttributes = function () {
	return this._mediaStreamAttributes;
};
System.Windows.Media.MediaStreamDescription.prototype.get_StreamId = function () {
	return this.internalIndex;
};
JSIL.MakeProperty(System.Windows.Media.MediaStreamDescription.prototype, "Type", 
	System.Windows.Media.MediaStreamDescription.prototype.get_Type, null);
JSIL.MakeProperty(System.Windows.Media.MediaStreamDescription.prototype, "MediaAttributes", 
	System.Windows.Media.MediaStreamDescription.prototype.get_MediaAttributes, null);
JSIL.MakeProperty(System.Windows.Media.MediaStreamDescription.prototype, "StreamId", 
	System.Windows.Media.MediaStreamDescription.prototype.get_StreamId, null);
System.Windows.Media.MediaStreamDescription.prototype._type = 0;
System.Windows.Media.MediaStreamDescription.prototype._mediaStreamAttributes = null;
System.Windows.Media.MediaStreamDescription.prototype.internalIndex = 0;

System.Windows.Media.MediaStreamSample.prototype._ctor$0 = function (mediaStreamDescription, stream, offset, count, timestamp, duration, attributes) {
	System.Object.prototype._ctor.call(this);
	this._mediaStreamDescription = mediaStreamDescription;
	this._stream = stream;
	this._offset = offset;
	this._count = count;
	this._timestamp = timestamp;
	this._duration = duration;
	var enumerator = attributes.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current.MemberwiseClone();
			switch (Number(current.Key)) {
				case 0: 
				case 1: 
				case 2: 
				case 3: 
				case 4: 
					break;
				default: 
					throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
			}
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	this._attributes = attributes;
	if (stream !== null) {
		this._streamWrapper = new $asm02.MS.Internal.Interop.StreamInteropWrapper(stream);
		this._streamWrapper.Initialize();
		return;
	}
	this._streamWrapper = null;
};
System.Windows.Media.MediaStreamSample.prototype._ctor$1 = function (mediaStreamDescription, stream, offset, count, timestamp, attributes) {
	this._ctor$0(
		mediaStreamDescription, 
		stream, 
		offset, 
		count, 
		timestamp, 
		0, 
		attributes
	);
};
System.Windows.Media.MediaStreamSample.prototype.get_MediaStreamDescription = function () {
	return this._mediaStreamDescription;
};
System.Windows.Media.MediaStreamSample.prototype.get_Stream = function () {
	return this._stream;
};
System.Windows.Media.MediaStreamSample.prototype.get_Offset = function () {
	return this._offset;
};
System.Windows.Media.MediaStreamSample.prototype.get_Count = function () {
	return this._count;
};
System.Windows.Media.MediaStreamSample.prototype.get_Timestamp = function () {
	return this._timestamp;
};
System.Windows.Media.MediaStreamSample.prototype.get_Duration = function () {
	return this._duration;
};
System.Windows.Media.MediaStreamSample.prototype.get_Attributes = function () {
	return this._attributes;
};
System.Windows.Media.MediaStreamSample.prototype.get_StreamWrapper = function () {
	return this._streamWrapper;
};
JSIL.OverloadedMethod(System.Windows.Media.MediaStreamSample.prototype, "_ctor", [
		["_ctor$0", [System.Windows.Media.MediaStreamDescription, System.IO.Stream, System.Int64, System.Int64, System.Int64, System.Int64, System.Collections.Generic.IDictionary$b2.Of(System.Windows.Media.MediaSampleAttributeKeys, System.String)]], 
		["_ctor$1", [System.Windows.Media.MediaStreamDescription, System.IO.Stream, System.Int64, System.Int64, System.Int64, System.Collections.Generic.IDictionary$b2.Of(System.Windows.Media.MediaSampleAttributeKeys, System.String)]]
	]);
JSIL.MakeProperty(System.Windows.Media.MediaStreamSample.prototype, "MediaStreamDescription", 
	System.Windows.Media.MediaStreamSample.prototype.get_MediaStreamDescription, null);
JSIL.MakeProperty(System.Windows.Media.MediaStreamSample.prototype, "Stream", 
	System.Windows.Media.MediaStreamSample.prototype.get_Stream, null);
JSIL.MakeProperty(System.Windows.Media.MediaStreamSample.prototype, "Offset", 
	System.Windows.Media.MediaStreamSample.prototype.get_Offset, null);
JSIL.MakeProperty(System.Windows.Media.MediaStreamSample.prototype, "Count", 
	System.Windows.Media.MediaStreamSample.prototype.get_Count, null);
JSIL.MakeProperty(System.Windows.Media.MediaStreamSample.prototype, "Timestamp", 
	System.Windows.Media.MediaStreamSample.prototype.get_Timestamp, null);
JSIL.MakeProperty(System.Windows.Media.MediaStreamSample.prototype, "Duration", 
	System.Windows.Media.MediaStreamSample.prototype.get_Duration, null);
JSIL.MakeProperty(System.Windows.Media.MediaStreamSample.prototype, "Attributes", 
	System.Windows.Media.MediaStreamSample.prototype.get_Attributes, null);
JSIL.MakeProperty(System.Windows.Media.MediaStreamSample.prototype, "StreamWrapper", 
	System.Windows.Media.MediaStreamSample.prototype.get_StreamWrapper, null);
System.Windows.Media.MediaStreamSample.prototype._mediaStreamDescription = null;
System.Windows.Media.MediaStreamSample.prototype._stream = null;
System.Windows.Media.MediaStreamSample.prototype._offset = 0;
System.Windows.Media.MediaStreamSample.prototype._count = 0;
System.Windows.Media.MediaStreamSample.prototype._timestamp = 0;
System.Windows.Media.MediaStreamSample.prototype._duration = 0;
System.Windows.Media.MediaStreamSample.prototype._attributes = null;
System.Windows.Media.MediaStreamSample.prototype._streamWrapper = null;

System.Windows.Media.MediaStreamSource.prototype.ReportOpenMediaCompleted = function (mediaStreamAttributes, availableMediaStreams) {
	var lock = null;
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
		if (this._mediaElement !== null) {
			this._mediaElement.MediaSourceReportOpenMediaCompleted(mediaStreamAttributes, availableMediaStreams);
			this.IsOpened = true;
		}
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
};
System.Windows.Media.MediaStreamSource.prototype.OpenMedia = function () {
	var lock = null;
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
		this.OpenMediaAsync();
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
};
System.Windows.Media.MediaStreamSource.prototype.ReportSeekCompleted = function (timeSeekedTo) {
	var lock = null;
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
		if (this._mediaElement !== null) {
			this._mediaElement.MediaSourceReportSeekCompleted(timeSeekedTo);
		}
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
};
System.Windows.Media.MediaStreamSource.prototype.Seek = function (seekToTime) {
	var lock = null;
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
		if (this.IsOpened) {
			this.SeekAsync(seekToTime);
		}
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
};
System.Windows.Media.MediaStreamSource.prototype.ReportGetSampleCompleted = function (mediaStreamSample) {
	var lock = null;
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
		if (this._mediaElement !== null) {
			this._mediaElement.MediaSourceReportGetSampleCompleted(mediaStreamSample);
		}
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
};
System.Windows.Media.MediaStreamSource.prototype.ReportGetSampleProgress = function (bufferingProgress) {
	var lock = null;
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
		if (this._mediaElement !== null) {
			this._mediaElement.MediaSourceReportGetSampleProgress(bufferingProgress);
		}
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
};
System.Windows.Media.MediaStreamSource.prototype.GetSample = function (mediaStreamType) {
	var lock = null;
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
		if (this.IsOpened) {
			this.GetSampleAsync(mediaStreamType);
		}
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
};
System.Windows.Media.MediaStreamSource.prototype.ReportSwitchMediaStreamCompleted = function (mediaStreamDescription) {
	var lock = null;
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
		if (this._mediaElement !== null) {
			this._mediaElement.MediaSourceReportSwitchMediaStreamCompleted(mediaStreamDescription);
		}
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
};
System.Windows.Media.MediaStreamSource.prototype.SwitchMediaStream = function (mediaStreamDescription) {
	var lock = null;
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
		if (this.IsOpened) {
			this.SwitchMediaStreamAsync(mediaStreamDescription);
		}
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
};
System.Windows.Media.MediaStreamSource.prototype.ReportGetDiagnosticCompleted = function (diagnosticKind, diagnosticValue) {
	var lock = null;
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
		if (this._mediaElement !== null) {
			this._mediaElement.MediaSourceReportGetDiagnosticCompleted(diagnosticKind, diagnosticValue);
		}
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
};
System.Windows.Media.MediaStreamSource.prototype.GetDiagnostic = function (diagnosticKind) {
	var lock = null;
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
		if (this.IsOpened) {
			this.GetDiagnosticAsync(diagnosticKind);
		}
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
};
System.Windows.Media.MediaStreamSource.prototype.Close = function () {
	var lock = null;
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
		this.IsOpened = false;
		if (this.IsValid) {
			this.CloseMedia();
			this.IsValid = false;
		}
		this._mediaElement = null;
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
};
System.Windows.Media.MediaStreamSource.prototype.ErrorOccurred = function (errorDescription) {
	if (this._mediaElement !== null) {
		this._mediaElement.MediaSourceErrorOccurred(errorDescription, this);
	}
};
System.Windows.Media.MediaStreamSource.prototype.SetMediaElement = function (mediaElement) {
	this._mediaElement = mediaElement;
	var current = System.Windows.Application.Current;
	if (current !== null) {
		current.add_Exit(JSIL.Delegate.New("System.EventHandler", this, System.Windows.Media.MediaStreamSource.prototype.ApplicationExitHandler));
	}
};
System.Windows.Media.MediaStreamSource.prototype.ApplicationExitHandler = function (sender, e) {
	this.Close();
};
System.Windows.Media.MediaStreamSource.prototype.get_AudioBufferLength = function () {
	return this._audioBufferLength;
};
System.Windows.Media.MediaStreamSource.prototype.set_AudioBufferLength = function (value) {
	if (!((value >= 15) && (value <= 1000))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["value", $asm02.System.Windows.Resx.GetString$0("ScrollViewer_OutOfRange", ["AudioBufferLength", value, 15, 1000])]);
	}
	this._audioBufferLength = value;
};
System.Windows.Media.MediaStreamSource.prototype._ctor = function () {
	this.IsValid = true;
	this._audioBufferLength = 1000;
	this._lock = new System.Object();
	System.Object.prototype._ctor.call(this);
};
JSIL.MakeProperty(System.Windows.Media.MediaStreamSource.prototype, "AudioBufferLength", 
	System.Windows.Media.MediaStreamSource.prototype.get_AudioBufferLength, System.Windows.Media.MediaStreamSource.prototype.set_AudioBufferLength);
System.Windows.Media.MediaStreamSource.prototype._mediaElement = null;
System.Windows.Media.MediaStreamSource.prototype.IsValid = false;
System.Windows.Media.MediaStreamSource.prototype.IsOpened = false;
System.Windows.Media.MediaStreamSource.prototype._audioBufferLength = 0;
System.Windows.Media.MediaStreamSource.prototype._lock = null;

System.Windows.Media.TextOptions.GetTextHintingMode = function (target) {
	if (target === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["target"]);
	}
	return JSIL.Cast(target.GetValue(System.Windows.Media.TextOptions.TextHintingModeProperty), System.Windows.Media.TextHintingMode);
};
System.Windows.Media.TextOptions.SetTextHintingMode = function (target, textHintingMode) {
	if (target === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["target"]);
	}
	target.SetValue(System.Windows.Media.TextOptions.TextHintingModeProperty, textHintingMode);
};
System.Windows.Media.TextOptions.TextHintingModeProperty = null;
System.Windows.Media.TextOptions._cctor = function () {
	System.Windows.Media.TextOptions.TextHintingModeProperty = System.Windows.DependencyProperty.RegisterCoreProperty(13133, System.Windows.Media.TextHintingMode);
};

$asm02.System.Windows.Media.Effects.ShaderConstant.prototype._ctor = function (dp, registerIndex) {
	System.Object.prototype._ctor.call(this);
	this.DependencyProperty = dp;
	this.RegisterIndex = registerIndex;
};
$asm02.System.Windows.Media.Effects.ShaderConstant.prototype.get_DependencyProperty = function () {
	return this.DependencyProperty$value;
};
$asm02.System.Windows.Media.Effects.ShaderConstant.prototype.set_DependencyProperty = function (value) {
	this.DependencyProperty$value = value;
};
$asm02.System.Windows.Media.Effects.ShaderConstant.prototype.get_RegisterIndex = function () {
	return this.RegisterIndex$value;
};
$asm02.System.Windows.Media.Effects.ShaderConstant.prototype.set_RegisterIndex = function (value) {
	this.RegisterIndex$value = value;
};
JSIL.MakeProperty($asm02.System.Windows.Media.Effects.ShaderConstant.prototype, "DependencyProperty", 
	$asm02.System.Windows.Media.Effects.ShaderConstant.prototype.get_DependencyProperty, $asm02.System.Windows.Media.Effects.ShaderConstant.prototype.set_DependencyProperty);
JSIL.MakeProperty($asm02.System.Windows.Media.Effects.ShaderConstant.prototype, "RegisterIndex", 
	$asm02.System.Windows.Media.Effects.ShaderConstant.prototype.get_RegisterIndex, $asm02.System.Windows.Media.Effects.ShaderConstant.prototype.set_RegisterIndex);
$asm02.System.Windows.Media.Effects.ShaderConstant.prototype.DependencyProperty$value = null;
$asm02.System.Windows.Media.Effects.ShaderConstant.prototype.RegisterIndex$value = 0;

$asm02.System.Windows.Media.Effects.ShaderSampler.prototype._ctor = function (dp, samplingMode, samplerRegisterIndex) {
	System.Object.prototype._ctor.call(this);
	if (!JSIL.Cast(samplingMode, System.Boolean)) {
		samplingMode = System.Windows.Media.Effects.SamplingMode.NearestNeighbor;
	}
	if (samplingMode !== System.Windows.Media.Effects.SamplingMode.NearestNeighbor) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", ["Sampling mode not implemented"]);
	}
	if (!((samplerRegisterIndex < 16) && (samplerRegisterIndex >= 0))) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", ["Sampler register index out of range"]);
	}
	this.DependencyProperty = dp;
	this.RegisterIndex = samplerRegisterIndex;
};
$asm02.System.Windows.Media.Effects.ShaderSampler.prototype.get_DependencyProperty = function () {
	return this.DependencyProperty$value;
};
$asm02.System.Windows.Media.Effects.ShaderSampler.prototype.set_DependencyProperty = function (value) {
	this.DependencyProperty$value = value;
};
$asm02.System.Windows.Media.Effects.ShaderSampler.prototype.get_RegisterIndex = function () {
	return this.RegisterIndex$value;
};
$asm02.System.Windows.Media.Effects.ShaderSampler.prototype.set_RegisterIndex = function (value) {
	this.RegisterIndex$value = value;
};
JSIL.MakeProperty($asm02.System.Windows.Media.Effects.ShaderSampler.prototype, "DependencyProperty", 
	$asm02.System.Windows.Media.Effects.ShaderSampler.prototype.get_DependencyProperty, $asm02.System.Windows.Media.Effects.ShaderSampler.prototype.set_DependencyProperty);
JSIL.MakeProperty($asm02.System.Windows.Media.Effects.ShaderSampler.prototype, "RegisterIndex", 
	$asm02.System.Windows.Media.Effects.ShaderSampler.prototype.get_RegisterIndex, $asm02.System.Windows.Media.Effects.ShaderSampler.prototype.set_RegisterIndex);
$asm02.System.Windows.Media.Effects.ShaderSampler.prototype.DependencyProperty$value = null;
$asm02.System.Windows.Media.Effects.ShaderSampler.prototype.RegisterIndex$value = 0;

System.Windows.Media.Media3D.Matrix3D.Create = function (o) {
	if (o !== null) {
		var array = JSIL.Cast(o, System.Array.Of(System.Single));
		if (array.length === 16) {
			return new System.Windows.Media.Media3D.Matrix3D(array[0], array[1], array[2], array[3], array[4], array[5], array[6], array[7], array[8], array[9], array[10], array[11], array[12], array[13], array[14], array[15]);
		}
	}
	return System.Windows.Media.Media3D.Matrix3D.s_identity;
};
System.Windows.Media.Media3D.Matrix3D.prototype.NormalizedAffineInvert = function () {
	var num = ((this._m12 * this._m23) - (this._m22 * this._m13));
	var num2 = ((this._m32 * this._m13) - (this._m12 * this._m33));
	var num3 = ((this._m22 * this._m33) - (this._m32 * this._m23));
	var num4 = (((this._m31 * num) + (this._m21 * num2)) + (this._m11 * num3));
	if ($asm02.MS.Internal.DoubleUtil.IsZero(num4)) {
		return false;
	}
	var num8 = ((this._m11 * this._m22) - (this._m21 * this._m12));
	var num9 = ((this._m11 * this._m32) - (this._m31 * this._m12));
	var num10 = ((this._m11 * this._offsetY) - (this._offsetX * this._m12));
	var num11 = ((this._m21 * this._m32) - (this._m31 * this._m22));
	var num12 = ((this._m21 * this._offsetY) - (this._offsetX * this._m22));
	var num13 = ((this._m31 * this._offsetY) - (this._offsetX * this._m32));
	var num20 = (1 / num4);
	this._m11 = (num3 * num20);
	this._m12 = (num2 * num20);
	this._m13 = (num * num20);
	this._m21 = (((this._m31 * this._m23) - (this._m21 * this._m33)) * num20);
	this._m22 = (((this._m11 * this._m33) - (this._m31 * this._m13)) * num20);
	this._m23 = (((this._m21 * this._m13) - (this._m11 * this._m23)) * num20);
	this._m31 = (num11 * num20);
	this._m32 = (-num9 * num20);
	this._m33 = (num8 * num20);
	this._offsetX = ((((this._m33 * num12) - (this._offsetZ * num11)) - (this._m23 * num13)) * num20);
	this._offsetY = ((((this._m13 * num13) - (this._m33 * num10)) + (this._offsetZ * num9)) * num20);
	this._offsetZ = ((((this._m23 * num10) - (this._offsetZ * num8)) - (this._m13 * num12)) * num20);
	return true;
};
System.Windows.Media.Media3D.Matrix3D.prototype.InvertCore = function () {
	if (this.IsDistinguishedIdentity) {
		return true;
	}
	if (this.IsAffine) {
		return this.NormalizedAffineInvert();
	}
	var num = ((this._m13 * this._m24) - (this._m23 * this._m14));
	var num2 = ((this._m13 * this._m34) - (this._m33 * this._m14));
	var num3 = ((this._m13 * this._m44) - (this._offsetZ * this._m14));
	var num4 = ((this._m23 * this._m34) - (this._m33 * this._m24));
	var num5 = ((this._m23 * this._m44) - (this._offsetZ * this._m24));
	var num6 = ((this._m33 * this._m44) - (this._offsetZ * this._m34));
	var num7 = (((this._m22 * num2) - (this._m32 * num)) - (this._m12 * num4));
	var num8 = (((this._m12 * num5) - (this._m22 * num3)) + (this._offsetY * num));
	var num9 = (((this._m32 * num3) - (this._offsetY * num2)) - (this._m12 * num6));
	var num10 = (((this._m22 * num6) - (this._m32 * num5)) + (this._offsetY * num4));
	var num11 = ((((this._offsetX * num7) + (this._m31 * num8)) + (this._m21 * num9)) + (this._m11 * num10));
	if ($asm02.MS.Internal.DoubleUtil.IsZero(num11)) {
		return false;
	}
	var num12 = (((this._m11 * num4) - (this._m21 * num2)) + (this._m31 * num));
	var num13 = (((this._m21 * num3) - (this._offsetX * num)) - (this._m11 * num5));
	var num14 = (((this._m11 * num6) - (this._m31 * num3)) + (this._offsetX * num2));
	var num15 = (((this._m31 * num5) - (this._offsetX * num4)) - (this._m21 * num6));
	num = ((this._m11 * this._m22) - (this._m21 * this._m12));
	num2 = ((this._m11 * this._m32) - (this._m31 * this._m12));
	num3 = ((this._m11 * this._offsetY) - (this._offsetX * this._m12));
	num4 = ((this._m21 * this._m32) - (this._m31 * this._m22));
	num5 = ((this._m21 * this._offsetY) - (this._offsetX * this._m22));
	num6 = ((this._m31 * this._offsetY) - (this._offsetX * this._m32));
	var num16 = (((this._m13 * num4) - (this._m23 * num2)) + (this._m33 * num));
	var num17 = (((this._m23 * num3) - (this._offsetZ * num)) - (this._m13 * num5));
	var num18 = (((this._m13 * num6) - (this._m33 * num3)) + (this._offsetZ * num2));
	var num19 = (((this._m33 * num5) - (this._offsetZ * num4)) - (this._m23 * num6));
	var num20 = (((this._m24 * num2) - (this._m34 * num)) - (this._m14 * num4));
	var num21 = (((this._m14 * num5) - (this._m24 * num3)) + (this._m44 * num));
	var num22 = (((this._m34 * num3) - (this._m44 * num2)) - (this._m14 * num6));
	var num23 = (((this._m24 * num6) - (this._m34 * num5)) + (this._m44 * num4));
	var num24 = (1 / num11);
	this._m11 = (num10 * num24);
	this._m12 = (num9 * num24);
	this._m13 = (num8 * num24);
	this._m14 = (num7 * num24);
	this._m21 = (num15 * num24);
	this._m22 = (num14 * num24);
	this._m23 = (num13 * num24);
	this._m24 = (num12 * num24);
	this._m31 = (num23 * num24);
	this._m32 = (num22 * num24);
	this._m33 = (num21 * num24);
	this._m34 = (num20 * num24);
	this._offsetX = (num19 * num24);
	this._offsetY = (num18 * num24);
	this._offsetZ = (num17 * num24);
	this._m44 = (num16 * num24);
	return true;
};
System.Windows.Media.Media3D.Matrix3D.prototype._ctor = function (m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, offsetX, offsetY, offsetZ, m44) {
	this._m11 = m11;
	this._m12 = m12;
	this._m13 = m13;
	this._m14 = m14;
	this._m21 = m21;
	this._m22 = m22;
	this._m23 = m23;
	this._m24 = m24;
	this._m31 = m31;
	this._m32 = m32;
	this._m33 = m33;
	this._m34 = m34;
	this._offsetX = offsetX;
	this._offsetY = offsetY;
	this._offsetZ = offsetZ;
	this._m44 = m44;
	this._type = $asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_UNKNOWN;
	this.DeriveMatrixType();
};
System.Windows.Media.Media3D.Matrix3D.prototype.get_M11 = function () {
	if (this._type === 0) {
		return 1;
	}
	return this._m11;
};
System.Windows.Media.Media3D.Matrix3D.prototype.set_M11 = function (value) {
	if (this._type === 0) {
		this.SetMatrix(
			value, 
			0, 
			0, 
			0, 
			0, 
			1, 
			0, 
			0, 
			0, 
			0, 
			1, 
			0, 
			0, 
			0, 
			0, 
			1, 
			$asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_SCALING
		);
		return;
	}
	this._m11 = value;
	if (this._type !== $asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_UNKNOWN) {
		this._type = (this._type | $asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_SCALING);
	}
};
System.Windows.Media.Media3D.Matrix3D.prototype.get_M12 = function () {
	if (this._type === 0) {
		return 0;
	}
	return this._m12;
};
System.Windows.Media.Media3D.Matrix3D.prototype.set_M12 = function (value) {
	if (this._type === 0) {
		this.SetMatrix(
			1, 
			value, 
			0, 
			0, 
			0, 
			1, 
			0, 
			0, 
			0, 
			0, 
			1, 
			0, 
			0, 
			0, 
			0, 
			1, 
			$asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_UNKNOWN
		);
		return;
	}
	this._m12 = value;
	this._type = $asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_UNKNOWN;
};
System.Windows.Media.Media3D.Matrix3D.prototype.get_M13 = function () {
	if (this._type === 0) {
		return 0;
	}
	return this._m13;
};
System.Windows.Media.Media3D.Matrix3D.prototype.set_M13 = function (value) {
	if (this._type === 0) {
		this.SetMatrix(
			1, 
			0, 
			value, 
			0, 
			0, 
			1, 
			0, 
			0, 
			0, 
			0, 
			1, 
			0, 
			0, 
			0, 
			0, 
			1, 
			$asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_UNKNOWN
		);
		return;
	}
	this._m13 = value;
	this._type = $asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_UNKNOWN;
};
System.Windows.Media.Media3D.Matrix3D.prototype.get_M14 = function () {
	if (this._type === 0) {
		return 0;
	}
	return this._m14;
};
System.Windows.Media.Media3D.Matrix3D.prototype.set_M14 = function (value) {
	if (this._type === 0) {
		this.SetMatrix(
			1, 
			0, 
			0, 
			value, 
			0, 
			1, 
			0, 
			0, 
			0, 
			0, 
			1, 
			0, 
			0, 
			0, 
			0, 
			1, 
			$asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_UNKNOWN
		);
		return;
	}
	this._m14 = value;
	this._type = $asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_UNKNOWN;
};
System.Windows.Media.Media3D.Matrix3D.prototype.get_M21 = function () {
	if (this._type === 0) {
		return 0;
	}
	return this._m21;
};
System.Windows.Media.Media3D.Matrix3D.prototype.set_M21 = function (value) {
	if (this._type === 0) {
		this.SetMatrix(
			1, 
			0, 
			0, 
			0, 
			value, 
			1, 
			0, 
			0, 
			0, 
			0, 
			1, 
			0, 
			0, 
			0, 
			0, 
			1, 
			$asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_UNKNOWN
		);
		return;
	}
	this._m21 = value;
	this._type = $asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_UNKNOWN;
};
System.Windows.Media.Media3D.Matrix3D.prototype.get_M22 = function () {
	if (this._type === 0) {
		return 1;
	}
	return this._m22;
};
System.Windows.Media.Media3D.Matrix3D.prototype.set_M22 = function (value) {
	if (this._type === 0) {
		this.SetMatrix(
			1, 
			0, 
			0, 
			0, 
			0, 
			value, 
			0, 
			0, 
			0, 
			0, 
			1, 
			0, 
			0, 
			0, 
			0, 
			1, 
			$asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_SCALING
		);
		return;
	}
	this._m22 = value;
	if (this._type !== $asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_UNKNOWN) {
		this._type = (this._type | $asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_SCALING);
	}
};
System.Windows.Media.Media3D.Matrix3D.prototype.get_M23 = function () {
	if (this._type === 0) {
		return 0;
	}
	return this._m23;
};
System.Windows.Media.Media3D.Matrix3D.prototype.set_M23 = function (value) {
	if (this._type === 0) {
		this.SetMatrix(
			1, 
			0, 
			0, 
			0, 
			0, 
			1, 
			value, 
			0, 
			0, 
			0, 
			1, 
			0, 
			0, 
			0, 
			0, 
			1, 
			$asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_UNKNOWN
		);
		return;
	}
	this._m23 = value;
	this._type = $asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_UNKNOWN;
};
System.Windows.Media.Media3D.Matrix3D.prototype.get_M24 = function () {
	if (this._type === 0) {
		return 0;
	}
	return this._m24;
};
System.Windows.Media.Media3D.Matrix3D.prototype.set_M24 = function (value) {
	if (this._type === 0) {
		this.SetMatrix(
			1, 
			0, 
			0, 
			0, 
			0, 
			1, 
			0, 
			value, 
			0, 
			0, 
			1, 
			0, 
			0, 
			0, 
			0, 
			1, 
			$asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_UNKNOWN
		);
		return;
	}
	this._m24 = value;
	this._type = $asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_UNKNOWN;
};
System.Windows.Media.Media3D.Matrix3D.prototype.get_M31 = function () {
	if (this._type === 0) {
		return 0;
	}
	return this._m31;
};
System.Windows.Media.Media3D.Matrix3D.prototype.set_M31 = function (value) {
	if (this._type === 0) {
		this.SetMatrix(
			1, 
			0, 
			0, 
			0, 
			0, 
			1, 
			0, 
			0, 
			value, 
			0, 
			1, 
			0, 
			0, 
			0, 
			0, 
			1, 
			$asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_UNKNOWN
		);
		return;
	}
	this._m31 = value;
	this._type = $asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_UNKNOWN;
};
System.Windows.Media.Media3D.Matrix3D.prototype.get_M32 = function () {
	if (this._type === 0) {
		return 0;
	}
	return this._m32;
};
System.Windows.Media.Media3D.Matrix3D.prototype.set_M32 = function (value) {
	if (this._type === 0) {
		this.SetMatrix(
			1, 
			0, 
			0, 
			0, 
			0, 
			1, 
			0, 
			0, 
			0, 
			value, 
			1, 
			0, 
			0, 
			0, 
			0, 
			1, 
			$asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_UNKNOWN
		);
		return;
	}
	this._m32 = value;
	this._type = $asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_UNKNOWN;
};
System.Windows.Media.Media3D.Matrix3D.prototype.get_M33 = function () {
	if (this._type === 0) {
		return 1;
	}
	return this._m33;
};
System.Windows.Media.Media3D.Matrix3D.prototype.set_M33 = function (value) {
	if (this._type === 0) {
		this.SetMatrix(
			1, 
			0, 
			0, 
			0, 
			0, 
			1, 
			0, 
			0, 
			0, 
			0, 
			value, 
			0, 
			0, 
			0, 
			0, 
			1, 
			$asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_SCALING
		);
		return;
	}
	this._m33 = value;
	if (this._type !== $asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_UNKNOWN) {
		this._type = (this._type | $asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_SCALING);
	}
};
System.Windows.Media.Media3D.Matrix3D.prototype.get_M34 = function () {
	if (this._type === 0) {
		return 0;
	}
	return this._m34;
};
System.Windows.Media.Media3D.Matrix3D.prototype.set_M34 = function (value) {
	if (this._type === 0) {
		this.SetMatrix(
			1, 
			0, 
			0, 
			0, 
			0, 
			1, 
			0, 
			0, 
			0, 
			0, 
			1, 
			value, 
			0, 
			0, 
			0, 
			1, 
			$asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_UNKNOWN
		);
		return;
	}
	this._m34 = value;
	this._type = $asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_UNKNOWN;
};
System.Windows.Media.Media3D.Matrix3D.prototype.get_OffsetX = function () {
	if (this._type === 0) {
		return 0;
	}
	return this._offsetX;
};
System.Windows.Media.Media3D.Matrix3D.prototype.set_OffsetX = function (value) {
	if (this._type === 0) {
		this.SetMatrix(
			1, 
			0, 
			0, 
			0, 
			0, 
			1, 
			0, 
			0, 
			0, 
			0, 
			1, 
			0, 
			value, 
			0, 
			0, 
			1, 
			$asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_TRANSLATION
		);
		return;
	}
	this._offsetX = value;
	if (this._type !== $asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_UNKNOWN) {
		this._type = (this._type | $asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_TRANSLATION);
	}
};
System.Windows.Media.Media3D.Matrix3D.prototype.get_OffsetY = function () {
	if (this._type === 0) {
		return 0;
	}
	return this._offsetY;
};
System.Windows.Media.Media3D.Matrix3D.prototype.set_OffsetY = function (value) {
	if (this._type === 0) {
		this.SetMatrix(
			1, 
			0, 
			0, 
			0, 
			0, 
			1, 
			0, 
			0, 
			0, 
			0, 
			1, 
			0, 
			0, 
			value, 
			0, 
			1, 
			$asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_TRANSLATION
		);
		return;
	}
	this._offsetY = value;
	if (this._type !== $asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_UNKNOWN) {
		this._type = (this._type | $asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_TRANSLATION);
	}
};
System.Windows.Media.Media3D.Matrix3D.prototype.get_OffsetZ = function () {
	if (this._type === 0) {
		return 0;
	}
	return this._offsetZ;
};
System.Windows.Media.Media3D.Matrix3D.prototype.set_OffsetZ = function (value) {
	if (this._type === 0) {
		this.SetMatrix(
			1, 
			0, 
			0, 
			0, 
			0, 
			1, 
			0, 
			0, 
			0, 
			0, 
			1, 
			0, 
			0, 
			0, 
			value, 
			1, 
			$asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_TRANSLATION
		);
		return;
	}
	this._offsetZ = value;
	if (this._type !== $asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_UNKNOWN) {
		this._type = (this._type | $asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_TRANSLATION);
	}
};
System.Windows.Media.Media3D.Matrix3D.prototype.get_M44 = function () {
	if (this._type === 0) {
		return 1;
	}
	return this._m44;
};
System.Windows.Media.Media3D.Matrix3D.prototype.set_M44 = function (value) {
	if (this._type === 0) {
		this.SetMatrix(
			1, 
			0, 
			0, 
			0, 
			0, 
			1, 
			0, 
			0, 
			0, 
			0, 
			1, 
			0, 
			0, 
			0, 
			0, 
			value, 
			$asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_SCALING
		);
		return;
	}
	this._m44 = value;
	if (this._type !== $asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_UNKNOWN) {
		this._type = (this._type | $asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_SCALING);
	}
};
System.Windows.Media.Media3D.Matrix3D.get_Identity = function () {
	return System.Windows.Media.Media3D.Matrix3D.s_identity;
};
System.Windows.Media.Media3D.Matrix3D.prototype.get_IsIdentity = function () {
	return ((this._type === 0) || (!((this._m11 !== 1) || 
				(this._m12 !== 0) || 
				(this._m13 !== 0) || 
				(this._m14 !== 0) || 
				(this._m21 !== 0) || 
				(this._m22 !== 1) || 
				(this._m23 !== 0) || 
				(this._m24 !== 0) || 
				(this._m31 !== 0) || 
				(this._m32 !== 0) || 
				(this._m33 !== 1) || 
				(this._m34 !== 0) || 
				(this._offsetX !== 0) || 
				(this._offsetY !== 0) || 
				(this._offsetZ !== 0)) && 
			(this._m44 === 1)));
};
System.Windows.Media.Media3D.Matrix3D.prototype.toString = function () {
	return this.ConvertToString(null, null);
};
System.Windows.Media.Media3D.Matrix3D.prototype.ToString = function (provider) {
	return this.ConvertToString(null, provider);
};
System.Windows.Media.Media3D.Matrix3D.prototype.IFormattable_ToString = function (format, provider) {
	return this.ConvertToString(format, provider);
};
System.Windows.Media.Media3D.Matrix3D.prototype.ConvertToString = function (format, provider) {
	if (this.IsIdentity) {
		return "Identity";
	}
	var numericListSeparator = $asm02.MS.Internal.TokenizerHelper.GetNumericListSeparator(provider);
	return System.String.Format(provider, JSIL.ConcatString.apply(null, JSIL.Array.New(System.String, ["{1:", format, "}{0}{2:", format, "}{0}{3:", format, "}{0}{4:", format, "}{0}{5:", format, "}{0}{6:", format, "}{0}{7:", format, "}{0}{8:", format, "}{0}{9:", format, "}{0}{10:", format, "}{0}{11:", format, "}{0}{12:", format, "}{0}{13:", format, "}{0}{14:", format, "}{0}{15:", format, "}{0}{16:", format, "}"])), [numericListSeparator, this._m11, this._m12, this._m13, this._m14, this._m21, this._m22, this._m23, this._m24, this._m31, this._m32, this._m33, this._m34, this._offsetX, this._offsetY, this._offsetZ, this._m44]);
};
System.Windows.Media.Media3D.Matrix3D.prototype.GetHashCode = function () {
	if (this.IsDistinguishedIdentity) {
		return 0;
	}
	return (((((((((((((((this.M11.GetHashCode() ^ this.M12.GetHashCode()) ^ this.M13.GetHashCode()) ^ this.M14.GetHashCode()) ^ this.M21.GetHashCode()) ^ this.M22.GetHashCode()) ^ this.M23.GetHashCode()) ^ this.M24.GetHashCode()) ^ this.M31.GetHashCode()) ^ this.M32.GetHashCode()) ^ this.M33.GetHashCode()) ^ this.M34.GetHashCode()) ^ this.OffsetX.GetHashCode()) ^ this.OffsetY.GetHashCode()) ^ this.OffsetZ.GetHashCode()) ^ this.M44.GetHashCode());
};
System.Windows.Media.Media3D.Matrix3D.prototype.Equals$0 = function (o) {
	if (!((o !== null) && JSIL.TryCast(o, System.Windows.Media.Media3D.Matrix3D))) {
		return false;
	}
	var matrix = JSIL.Cast(o, System.Windows.Media.Media3D.Matrix3D).MemberwiseClone();
	return System.Windows.Media.Media3D.Matrix3D.Equals(this.MemberwiseClone(), matrix.MemberwiseClone());
};
System.Windows.Media.Media3D.Matrix3D.prototype.Equals$1 = function (value) {
	return System.Windows.Media.Media3D.Matrix3D.Equals(this.MemberwiseClone(), value);
};
System.Windows.Media.Media3D.Matrix3D.op_Equality = function (matrix1, matrix2) {
	if (!(!matrix1.IsDistinguishedIdentity && !matrix2.IsDistinguishedIdentity)) {
		return (matrix1.IsIdentity === matrix2.IsIdentity);
	}
	return (!((matrix1.M11 !== matrix2.M11) || 
			(matrix1.M12 !== matrix2.M12) || 
			(matrix1.M13 !== matrix2.M13) || 
			(matrix1.M14 !== matrix2.M14) || 
			(matrix1.M21 !== matrix2.M21) || 
			(matrix1.M22 !== matrix2.M22) || 
			(matrix1.M23 !== matrix2.M23) || 
			(matrix1.M24 !== matrix2.M24) || 
			(matrix1.M31 !== matrix2.M31) || 
			(matrix1.M32 !== matrix2.M32) || 
			(matrix1.M33 !== matrix2.M33) || 
			(matrix1.M34 !== matrix2.M34) || 
			(matrix1.OffsetX !== matrix2.OffsetX) || 
			(matrix1.OffsetY !== matrix2.OffsetY) || 
			(matrix1.OffsetZ !== matrix2.OffsetZ)) && (matrix1.M44 === matrix2.M44));
};
System.Windows.Media.Media3D.Matrix3D.op_Inequality = function (matrix1, matrix2) {
	return !System.Windows.Media.Media3D.Matrix3D.op_Equality(matrix1, matrix2);
};
System.Windows.Media.Media3D.Matrix3D.op_Multiply = function (matrix1, matrix2) {
	var result = new System.Windows.Media.Media3D.Matrix3D();
	result.M11 = ((((matrix1.M11 * matrix2.M11) + (matrix1.M12 * matrix2.M21)) + (matrix1.M13 * matrix2.M31)) + (matrix1.M14 * matrix2.OffsetX));
	result.M12 = ((((matrix1.M11 * matrix2.M12) + (matrix1.M12 * matrix2.M22)) + (matrix1.M13 * matrix2.M32)) + (matrix1.M14 * matrix2.OffsetY));
	result.M13 = ((((matrix1.M11 * matrix2.M13) + (matrix1.M12 * matrix2.M23)) + (matrix1.M13 * matrix2.M33)) + (matrix1.M14 * matrix2.OffsetZ));
	result.M14 = ((((matrix1.M11 * matrix2.M14) + (matrix1.M12 * matrix2.M24)) + (matrix1.M13 * matrix2.M34)) + (matrix1.M14 * matrix2.M44));
	result.M21 = ((((matrix1.M21 * matrix2.M11) + (matrix1.M22 * matrix2.M21)) + (matrix1.M23 * matrix2.M31)) + (matrix1.M24 * matrix2.OffsetX));
	result.M22 = ((((matrix1.M21 * matrix2.M12) + (matrix1.M22 * matrix2.M22)) + (matrix1.M23 * matrix2.M32)) + (matrix1.M24 * matrix2.OffsetY));
	result.M23 = ((((matrix1.M21 * matrix2.M13) + (matrix1.M22 * matrix2.M23)) + (matrix1.M23 * matrix2.M33)) + (matrix1.M24 * matrix2.OffsetZ));
	result.M24 = ((((matrix1.M21 * matrix2.M14) + (matrix1.M22 * matrix2.M24)) + (matrix1.M23 * matrix2.M34)) + (matrix1.M24 * matrix2.M44));
	result.M31 = ((((matrix1.M31 * matrix2.M11) + (matrix1.M32 * matrix2.M21)) + (matrix1.M33 * matrix2.M31)) + (matrix1.M34 * matrix2.OffsetX));
	result.M32 = ((((matrix1.M31 * matrix2.M12) + (matrix1.M32 * matrix2.M22)) + (matrix1.M33 * matrix2.M32)) + (matrix1.M34 * matrix2.OffsetY));
	result.M33 = ((((matrix1.M31 * matrix2.M13) + (matrix1.M32 * matrix2.M23)) + (matrix1.M33 * matrix2.M33)) + (matrix1.M34 * matrix2.OffsetZ));
	result.M34 = ((((matrix1.M31 * matrix2.M14) + (matrix1.M32 * matrix2.M24)) + (matrix1.M33 * matrix2.M34)) + (matrix1.M34 * matrix2.M44));
	result.OffsetX = ((((matrix1.OffsetX * matrix2.M11) + (matrix1.OffsetY * matrix2.M21)) + (matrix1.OffsetZ * matrix2.M31)) + (matrix1.M44 * matrix2.OffsetX));
	result.OffsetY = ((((matrix1.OffsetX * matrix2.M12) + (matrix1.OffsetY * matrix2.M22)) + (matrix1.OffsetZ * matrix2.M32)) + (matrix1.M44 * matrix2.OffsetY));
	result.OffsetZ = ((((matrix1.OffsetX * matrix2.M13) + (matrix1.OffsetY * matrix2.M23)) + (matrix1.OffsetZ * matrix2.M33)) + (matrix1.M44 * matrix2.OffsetZ));
	result.M44 = ((((matrix1.OffsetX * matrix2.M14) + (matrix1.OffsetY * matrix2.M24)) + (matrix1.OffsetZ * matrix2.M34)) + (matrix1.M44 * matrix2.M44));
	return result;
};
System.Windows.Media.Media3D.Matrix3D.prototype.get_HasInverse = function () {
	return !$asm02.MS.Internal.DoubleUtil.IsZero(this.Determinant);
};
System.Windows.Media.Media3D.Matrix3D.prototype.Invert = function () {
	if (!this.InvertCore()) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
	}
};
System.Windows.Media.Media3D.Matrix3D.CreateIdentity = function () {
	var result = new System.Windows.Media.Media3D.Matrix3D();
	result.SetMatrix(
		1, 
		0, 
		0, 
		0, 
		0, 
		1, 
		0, 
		0, 
		0, 
		0, 
		1, 
		0, 
		0, 
		0, 
		0, 
		1, 
		$asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_IDENTITY
	);
	return result;
};
System.Windows.Media.Media3D.Matrix3D.prototype.SetMatrix = function (m11, m12, m13, m14, m21, m22, m23, m24, m31, m32, m33, m34, offsetX, offsetY, offsetZ, m44, type) {
	this._m11 = m11;
	this._m12 = m12;
	this._m13 = m13;
	this._m14 = m14;
	this._m21 = m21;
	this._m22 = m22;
	this._m23 = m23;
	this._m24 = m24;
	this._m31 = m31;
	this._m32 = m32;
	this._m33 = m33;
	this._m34 = m34;
	this._offsetX = offsetX;
	this._offsetY = offsetY;
	this._offsetZ = offsetZ;
	this._m44 = m44;
	this._type = type;
};
System.Windows.Media.Media3D.Matrix3D.prototype.DeriveMatrixType = function () {
	this._type = $asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_IDENTITY;
	if (!((this._m12 === 0) && 
			(this._m13 === 0) && 
			(this._m14 === 0) && 
			(this._m21 === 0) && 
			(this._m23 === 0) && 
			(this._m24 === 0) && 
			(this._m31 === 0) && 
			(this._m32 === 0) && 
			(this._m34 === 0) && 
			(this._offsetX === 0) && 
			(this._offsetY === 0) && (this._offsetZ === 0))) {
		this._type = $asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_UNKNOWN;
		return;
	}
	if (!((this._m11 === 1) && 
			(this._m22 === 1) && 
			(this._m33 === 1) && (this._m44 === 1))) {
		this._type = $asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_SCALING;
	}
	if (!(this._type & ($asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_SCALING | $asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_TRANSLATION))) {
		this._type = $asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_IDENTITY;
	}
};
System.Windows.Media.Media3D.Matrix3D.prototype.MultiplyPoint = function (/* ref */ x, /* ref */ y) {
	switch (Number(this._type)) {
		case 0: 
			return;
		case 1: 
			x.value += this._offsetX;
			y.value += this._offsetY;
			return;
		case 2: 
			x.value *= this._m11;
			y.value *= this._m22;
			return;
		case 3: 
			x.value *= this._m11;
			x.value += this._offsetX;
			y.value *= this._m22;
			y.value += this._offsetY;
			return;
		default: 
			var num = ((y.value * this._m21) + this._offsetX);
			var num2 = ((x.value * this._m12) + this._offsetY);
			x.value *= this._m11;
			x.value += num;
			y.value *= this._m22;
			y.value += num2;
			return;
	}
};
System.Windows.Media.Media3D.Matrix3D.Equals = function (matrix1, matrix2) {
	if (!(!matrix1.IsDistinguishedIdentity && !matrix2.IsDistinguishedIdentity)) {
		return (matrix1.IsIdentity === matrix2.IsIdentity);
	}
	return (!(!matrix1.M11.Equals$1(matrix2.M11) || 
			!matrix1.M12.Equals$1(matrix2.M12) || 
			!matrix1.M13.Equals$1(matrix2.M13) || 
			!matrix1.M14.Equals$1(matrix2.M14) || 
			!matrix1.M21.Equals$1(matrix2.M21) || 
			!matrix1.M22.Equals$1(matrix2.M22) || 
			!matrix1.M23.Equals$1(matrix2.M23) || 
			!matrix1.M24.Equals$1(matrix2.M24) || 
			!matrix1.M31.Equals$1(matrix2.M31) || 
			!matrix1.M32.Equals$1(matrix2.M32) || 
			!matrix1.M33.Equals$1(matrix2.M33) || 
			!matrix1.M34.Equals$1(matrix2.M34) || 
			!matrix1.OffsetX.Equals$1(matrix2.OffsetX) || 
			!matrix1.OffsetY.Equals$1(matrix2.OffsetY) || 
			!matrix1.OffsetZ.Equals$1(matrix2.OffsetZ)) && matrix1.M44.Equals$1(matrix2.M44));
};
System.Windows.Media.Media3D.Matrix3D.prototype.get_IsDistinguishedIdentity = function () {
	return (this._type === $asm02.System.Windows.Media.MatrixTypes.TRANSFORM_IS_IDENTITY);
};
System.Windows.Media.Media3D.Matrix3D.prototype.GetNormalizedAffineDeterminant = function () {
	return (((this._m31 * ((this._m12 * this._m23) - (this._m22 * this._m13))) + (this._m21 * ((this._m32 * this._m13) - (this._m12 * this._m33)))) + (this._m11 * ((this._m22 * this._m33) - (this._m32 * this._m23))));
};
System.Windows.Media.Media3D.Matrix3D.prototype.get_IsAffine = function () {
	return (this.IsDistinguishedIdentity || (!((this._m14 !== 0) || 
				(this._m24 !== 0) || 
				(this._m34 !== 0)) && 
			(this._m44 === 1)));
};
System.Windows.Media.Media3D.Matrix3D.prototype.get_Determinant = function () {
	if (this.IsDistinguishedIdentity) {
		return 1;
	}
	if (this.IsAffine) {
		return this.GetNormalizedAffineDeterminant();
	}
	var num = ((this._m13 * this._m24) - (this._m23 * this._m14));
	var num2 = ((this._m13 * this._m34) - (this._m33 * this._m14));
	var num3 = ((this._m13 * this._m44) - (this._offsetZ * this._m14));
	var num4 = ((this._m23 * this._m34) - (this._m33 * this._m24));
	var num5 = ((this._m23 * this._m44) - (this._offsetZ * this._m24));
	var num6 = ((this._m33 * this._m44) - (this._offsetZ * this._m34));
	return ((((this._offsetX * (((this._m22 * num2) - (this._m32 * num)) - (this._m12 * num4))) + (this._m31 * (((this._m12 * num5) - (this._m22 * num3)) + (this._offsetY * num)))) + (this._m21 * (((this._m32 * num3) - (this._offsetY * num2)) - (this._m12 * num6)))) + (this._m11 * (((this._m22 * num6) - (this._m32 * num5)) + (this._offsetY * num4))));
};
JSIL.OverloadedMethod(System.Windows.Media.Media3D.Matrix3D.prototype, "Equals", [
		["Equals$0", [System.Object]], 
		["Equals$1", [System.Windows.Media.Media3D.Matrix3D]]
	]);
JSIL.MakeProperty(System.Windows.Media.Media3D.Matrix3D.prototype, "M11", 
	System.Windows.Media.Media3D.Matrix3D.prototype.get_M11, System.Windows.Media.Media3D.Matrix3D.prototype.set_M11);
JSIL.MakeProperty(System.Windows.Media.Media3D.Matrix3D.prototype, "M12", 
	System.Windows.Media.Media3D.Matrix3D.prototype.get_M12, System.Windows.Media.Media3D.Matrix3D.prototype.set_M12);
JSIL.MakeProperty(System.Windows.Media.Media3D.Matrix3D.prototype, "M13", 
	System.Windows.Media.Media3D.Matrix3D.prototype.get_M13, System.Windows.Media.Media3D.Matrix3D.prototype.set_M13);
JSIL.MakeProperty(System.Windows.Media.Media3D.Matrix3D.prototype, "M14", 
	System.Windows.Media.Media3D.Matrix3D.prototype.get_M14, System.Windows.Media.Media3D.Matrix3D.prototype.set_M14);
JSIL.MakeProperty(System.Windows.Media.Media3D.Matrix3D.prototype, "M21", 
	System.Windows.Media.Media3D.Matrix3D.prototype.get_M21, System.Windows.Media.Media3D.Matrix3D.prototype.set_M21);
JSIL.MakeProperty(System.Windows.Media.Media3D.Matrix3D.prototype, "M22", 
	System.Windows.Media.Media3D.Matrix3D.prototype.get_M22, System.Windows.Media.Media3D.Matrix3D.prototype.set_M22);
JSIL.MakeProperty(System.Windows.Media.Media3D.Matrix3D.prototype, "M23", 
	System.Windows.Media.Media3D.Matrix3D.prototype.get_M23, System.Windows.Media.Media3D.Matrix3D.prototype.set_M23);
JSIL.MakeProperty(System.Windows.Media.Media3D.Matrix3D.prototype, "M24", 
	System.Windows.Media.Media3D.Matrix3D.prototype.get_M24, System.Windows.Media.Media3D.Matrix3D.prototype.set_M24);
JSIL.MakeProperty(System.Windows.Media.Media3D.Matrix3D.prototype, "M31", 
	System.Windows.Media.Media3D.Matrix3D.prototype.get_M31, System.Windows.Media.Media3D.Matrix3D.prototype.set_M31);
JSIL.MakeProperty(System.Windows.Media.Media3D.Matrix3D.prototype, "M32", 
	System.Windows.Media.Media3D.Matrix3D.prototype.get_M32, System.Windows.Media.Media3D.Matrix3D.prototype.set_M32);
JSIL.MakeProperty(System.Windows.Media.Media3D.Matrix3D.prototype, "M33", 
	System.Windows.Media.Media3D.Matrix3D.prototype.get_M33, System.Windows.Media.Media3D.Matrix3D.prototype.set_M33);
JSIL.MakeProperty(System.Windows.Media.Media3D.Matrix3D.prototype, "M34", 
	System.Windows.Media.Media3D.Matrix3D.prototype.get_M34, System.Windows.Media.Media3D.Matrix3D.prototype.set_M34);
JSIL.MakeProperty(System.Windows.Media.Media3D.Matrix3D.prototype, "OffsetX", 
	System.Windows.Media.Media3D.Matrix3D.prototype.get_OffsetX, System.Windows.Media.Media3D.Matrix3D.prototype.set_OffsetX);
JSIL.MakeProperty(System.Windows.Media.Media3D.Matrix3D.prototype, "OffsetY", 
	System.Windows.Media.Media3D.Matrix3D.prototype.get_OffsetY, System.Windows.Media.Media3D.Matrix3D.prototype.set_OffsetY);
JSIL.MakeProperty(System.Windows.Media.Media3D.Matrix3D.prototype, "OffsetZ", 
	System.Windows.Media.Media3D.Matrix3D.prototype.get_OffsetZ, System.Windows.Media.Media3D.Matrix3D.prototype.set_OffsetZ);
JSIL.MakeProperty(System.Windows.Media.Media3D.Matrix3D.prototype, "M44", 
	System.Windows.Media.Media3D.Matrix3D.prototype.get_M44, System.Windows.Media.Media3D.Matrix3D.prototype.set_M44);
JSIL.MakeProperty(System.Windows.Media.Media3D.Matrix3D, "Identity", 
	System.Windows.Media.Media3D.Matrix3D.get_Identity, null);
JSIL.MakeProperty(System.Windows.Media.Media3D.Matrix3D.prototype, "IsIdentity", 
	System.Windows.Media.Media3D.Matrix3D.prototype.get_IsIdentity, null);
JSIL.MakeProperty(System.Windows.Media.Media3D.Matrix3D.prototype, "HasInverse", 
	System.Windows.Media.Media3D.Matrix3D.prototype.get_HasInverse, null);
JSIL.MakeProperty(System.Windows.Media.Media3D.Matrix3D.prototype, "IsDistinguishedIdentity", 
	System.Windows.Media.Media3D.Matrix3D.prototype.get_IsDistinguishedIdentity, null);
JSIL.MakeProperty(System.Windows.Media.Media3D.Matrix3D.prototype, "IsAffine", 
	System.Windows.Media.Media3D.Matrix3D.prototype.get_IsAffine, null);
JSIL.MakeProperty(System.Windows.Media.Media3D.Matrix3D.prototype, "Determinant", 
	System.Windows.Media.Media3D.Matrix3D.prototype.get_Determinant, null);
Object.defineProperty(System.Windows.Media.Media3D.Matrix3D, "c_identityHashCode", {
		"value": 0}
);
System.Windows.Media.Media3D.Matrix3D.prototype._m11 = 0;
System.Windows.Media.Media3D.Matrix3D.prototype._m12 = 0;
System.Windows.Media.Media3D.Matrix3D.prototype._m13 = 0;
System.Windows.Media.Media3D.Matrix3D.prototype._m14 = 0;
System.Windows.Media.Media3D.Matrix3D.prototype._m21 = 0;
System.Windows.Media.Media3D.Matrix3D.prototype._m22 = 0;
System.Windows.Media.Media3D.Matrix3D.prototype._m23 = 0;
System.Windows.Media.Media3D.Matrix3D.prototype._m24 = 0;
System.Windows.Media.Media3D.Matrix3D.prototype._m31 = 0;
System.Windows.Media.Media3D.Matrix3D.prototype._m32 = 0;
System.Windows.Media.Media3D.Matrix3D.prototype._m33 = 0;
System.Windows.Media.Media3D.Matrix3D.prototype._m34 = 0;
System.Windows.Media.Media3D.Matrix3D.prototype._offsetX = 0;
System.Windows.Media.Media3D.Matrix3D.prototype._offsetY = 0;
System.Windows.Media.Media3D.Matrix3D.prototype._offsetZ = 0;
System.Windows.Media.Media3D.Matrix3D.prototype._m44 = 0;
System.Windows.Media.Media3D.Matrix3D.prototype._type = 0;
System.Windows.Media.Media3D.Matrix3D._cctor = function () {
	System.Windows.Media.Media3D.Matrix3D.s_identity = new System.Windows.Media.Media3D.Matrix3D();
	System.Windows.Media.Media3D.Matrix3D.s_identity = System.Windows.Media.Media3D.Matrix3D.CreateIdentity().MemberwiseClone();
};

$asm02.System.Windows.Media.PALVideoFormat.prototype._ctor = function (pixelFormat, width, height, stride, framesPerSecond) {
	this.PixelFormat = pixelFormat;
	this.Width = width;
	this.Height = height;
	this.Stride = stride;
	this.BitDepth = 0;
	this.FramesPerSecond = framesPerSecond;
};
$asm02.System.Windows.Media.PALVideoFormat.prototype.PixelFormat = 0;
$asm02.System.Windows.Media.PALVideoFormat.prototype.Width = 0;
$asm02.System.Windows.Media.PALVideoFormat.prototype.Height = 0;
$asm02.System.Windows.Media.PALVideoFormat.prototype.Stride = 0;
$asm02.System.Windows.Media.PALVideoFormat.prototype.BitDepth = 0;
$asm02.System.Windows.Media.PALVideoFormat.prototype.FramesPerSecond = 0;

System.Windows.Media.VideoFormat.prototype._ctor$0 = function (format) {
	System.Object.prototype._ctor.call(this);
	this.m_Format = format;
};
System.Windows.Media.VideoFormat.prototype._ctor$1 = function (pixelFormat, width, height, stride, framesPerSecond) {
	System.Object.prototype._ctor.call(this);
	this.m_Format = new $asm02.System.Windows.Media.PALVideoFormat(pixelFormat, width, height, stride, framesPerSecond);
};
System.Windows.Media.VideoFormat.prototype._ctor$2 = function (pixelFormat, width, height, framesPerSecond) {
	System.Object.prototype._ctor.call(this);
	this.m_Format = new $asm02.System.Windows.Media.PALVideoFormat(pixelFormat, width, height, 0, framesPerSecond);
};
System.Windows.Media.VideoFormat.prototype.get_PixelFormat = function () {
	return this.m_Format.PixelFormat;
};
System.Windows.Media.VideoFormat.prototype.get_PixelWidth = function () {
	return this.m_Format.Width;
};
System.Windows.Media.VideoFormat.prototype.get_PixelHeight = function () {
	return this.m_Format.Height;
};
System.Windows.Media.VideoFormat.prototype.get_Stride = function () {
	return this.m_Format.Stride;
};
System.Windows.Media.VideoFormat.prototype.get_FramesPerSecond = function () {
	return this.m_Format.FramesPerSecond;
};
System.Windows.Media.VideoFormat.prototype.get_InternalFormat = function () {
	return this.m_Format;
};
JSIL.OverloadedMethod(System.Windows.Media.VideoFormat.prototype, "_ctor", [
		["_ctor$0", [$asm02.System.Windows.Media.PALVideoFormat]], 
		["_ctor$1", [System.Windows.Media.PixelFormatType, System.Int32, System.Int32, System.Int32, System.Single]], 
		["_ctor$2", [System.Windows.Media.PixelFormatType, System.Int32, System.Int32, System.Single]]
	]);
JSIL.MakeProperty(System.Windows.Media.VideoFormat.prototype, "PixelFormat", 
	System.Windows.Media.VideoFormat.prototype.get_PixelFormat, null);
JSIL.MakeProperty(System.Windows.Media.VideoFormat.prototype, "PixelWidth", 
	System.Windows.Media.VideoFormat.prototype.get_PixelWidth, null);
JSIL.MakeProperty(System.Windows.Media.VideoFormat.prototype, "PixelHeight", 
	System.Windows.Media.VideoFormat.prototype.get_PixelHeight, null);
JSIL.MakeProperty(System.Windows.Media.VideoFormat.prototype, "Stride", 
	System.Windows.Media.VideoFormat.prototype.get_Stride, null);
JSIL.MakeProperty(System.Windows.Media.VideoFormat.prototype, "FramesPerSecond", 
	System.Windows.Media.VideoFormat.prototype.get_FramesPerSecond, null);
JSIL.MakeProperty(System.Windows.Media.VideoFormat.prototype, "InternalFormat", 
	System.Windows.Media.VideoFormat.prototype.get_InternalFormat, null);

$asm02.System.Windows.Media.PALAudioFormat.prototype._ctor = function (format, channels, bitsPerSample, samplesPerSecond) {
	this.WaveFormat = format;
	this.Channels = channels;
	this.BitsPerSample = bitsPerSample;
	this.SamplesPerSecond = samplesPerSecond;
};
$asm02.System.Windows.Media.PALAudioFormat.prototype.WaveFormat = 0;
$asm02.System.Windows.Media.PALAudioFormat.prototype.Channels = 0;
$asm02.System.Windows.Media.PALAudioFormat.prototype.BitsPerSample = 0;
$asm02.System.Windows.Media.PALAudioFormat.prototype.SamplesPerSecond = 0;

System.Windows.Media.AudioFormat.prototype._ctor$0 = function (format) {
	System.Object.prototype._ctor.call(this);
	this.m_Format = format;
};
System.Windows.Media.AudioFormat.prototype._ctor$1 = function (format, channels, bitsPerSample, samplesPerSecond) {
	System.Object.prototype._ctor.call(this);
	this.m_Format = new $asm02.System.Windows.Media.PALAudioFormat(format, channels, bitsPerSample, samplesPerSecond);
};
System.Windows.Media.AudioFormat.prototype.get_WaveFormat = function () {
	return this.m_Format.WaveFormat;
};
System.Windows.Media.AudioFormat.prototype.get_Channels = function () {
	return this.m_Format.Channels;
};
System.Windows.Media.AudioFormat.prototype.get_BitsPerSample = function () {
	return this.m_Format.BitsPerSample;
};
System.Windows.Media.AudioFormat.prototype.get_SamplesPerSecond = function () {
	return this.m_Format.SamplesPerSecond;
};
System.Windows.Media.AudioFormat.prototype.get_InternalFormat = function () {
	return this.m_Format;
};
JSIL.OverloadedMethod(System.Windows.Media.AudioFormat.prototype, "_ctor", [
		["_ctor$0", [$asm02.System.Windows.Media.PALAudioFormat]], 
		["_ctor$1", [System.Windows.Media.WaveFormatType, System.Int32, System.Int32, System.Int32]]
	]);
JSIL.MakeProperty(System.Windows.Media.AudioFormat.prototype, "WaveFormat", 
	System.Windows.Media.AudioFormat.prototype.get_WaveFormat, null);
JSIL.MakeProperty(System.Windows.Media.AudioFormat.prototype, "Channels", 
	System.Windows.Media.AudioFormat.prototype.get_Channels, null);
JSIL.MakeProperty(System.Windows.Media.AudioFormat.prototype, "BitsPerSample", 
	System.Windows.Media.AudioFormat.prototype.get_BitsPerSample, null);
JSIL.MakeProperty(System.Windows.Media.AudioFormat.prototype, "SamplesPerSecond", 
	System.Windows.Media.AudioFormat.prototype.get_SamplesPerSecond, null);
JSIL.MakeProperty(System.Windows.Media.AudioFormat.prototype, "InternalFormat", 
	System.Windows.Media.AudioFormat.prototype.get_InternalFormat, null);

System.Windows.Media.VideoSink.prototype.get_CaptureSource = function () {
	return $asm02.MS.Internal.XcpImports.VideoSink_GetSource(this);
};
System.Windows.Media.VideoSink.prototype.set_CaptureSource = function (value) {
	$asm02.MS.Internal.XcpImports.VideoSink_SetSource(this, value);
};
System.Windows.Media.VideoSink.prototype.get_NativeObject = function () {
	if (this.m_InteropWrapper === null) {
		return System.IntPtr.Zero;
	}
	return this.m_InteropWrapper.IManagedPeerBase_NativeObject;
};
System.Windows.Media.VideoSink.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
	this.InitializeManaged();
};
System.Windows.Media.VideoSink.prototype.Finalize = function () {
	try {
		this.FinalizeNative();
	} finally {
		System.Object.prototype.Finalize.call(this);
	}
};
System.Windows.Media.VideoSink.prototype.FinalizeNative = function () {
	if (System.IntPtr.op_Inequality(this.NativeObject, System.IntPtr.Zero)) {
		this.CaptureSource = null;
	}
};
System.Windows.Media.VideoSink.prototype.InitializeManaged = function () {
	this.m_CaptureStartedHandler = JSIL.Delegate.New("System.Windows.Media.VideoSink/NotifyCaptureStartedDelegate", this, System.Windows.Media.VideoSink.prototype.NotifyCaptureStarted);
	this.m_CaptureStoppedHandler = JSIL.Delegate.New("System.Windows.Media.VideoSink/NotifyCaptureStoppedDelegate", this, System.Windows.Media.VideoSink.prototype.NotifyCaptureStopped);
	this.m_FormatChangedHandler = JSIL.Delegate.New("System.Windows.Media.VideoSink/NotifyVideoFormatChangedDelegate", this, System.Windows.Media.VideoSink.prototype.NotifyOnFormatChange);
	this.m_SampleHandler = JSIL.Delegate.New("System.Windows.Media.VideoSink/NotifyVideoSampleDelegate", this, System.Windows.Media.VideoSink.prototype.NotifyOnSample);
	this.Initialize();
};
System.Windows.Media.VideoSink.prototype.Initialize = function () {
	this.m_InteropWrapper = JSIL.New($asm02.MS.Internal.Interop.InteropWrapper, "_ctor$1", [this, System.Windows.Media.VideoSink]);
	$asm02.MS.Internal.XcpImports.CheckHResult(this.m_InteropWrapper.Initialize());
	$asm02.MS.Internal.XcpImports.CheckHResult(this.m_InteropWrapper.SetCallbackCountToNativeWrapper(4));
	$asm02.MS.Internal.XcpImports.CheckHResult(this.m_InteropWrapper.SetCallbackFunctionToNativeWrapper(0, this.m_CaptureStartedHandler));
	$asm02.MS.Internal.XcpImports.CheckHResult(this.m_InteropWrapper.SetCallbackFunctionToNativeWrapper(1, this.m_CaptureStoppedHandler));
	$asm02.MS.Internal.XcpImports.CheckHResult(this.m_InteropWrapper.SetCallbackFunctionToNativeWrapper(2, this.m_FormatChangedHandler));
	$asm02.MS.Internal.XcpImports.CheckHResult(this.m_InteropWrapper.SetCallbackFunctionToNativeWrapper(3, this.m_SampleHandler));
};
System.Windows.Media.VideoSink.prototype.NotifyCaptureStarted = function () {
	var result = 0;
	try {
		this.OnCaptureStarted();
	} catch ($exception) {
		var arg_0A_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForUserException(arg_0A_0);
	}
	return result;
};
System.Windows.Media.VideoSink.prototype.NotifyCaptureStopped = function () {
	var result = 0;
	try {
		this.OnCaptureStopped();
	} catch ($exception) {
		var arg_0A_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForUserException(arg_0A_0);
	}
	return result;
};
System.Windows.Media.VideoSink.prototype.NotifyOnFormatChange = function (Format) {
	var result = 0;
	var videoFormat = JSIL.New(System.Windows.Media.VideoFormat, "_ctor$0", [Format]);
	try {
		this.OnFormatChange(videoFormat);
	} catch ($exception) {
		var arg_12_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForUserException(arg_12_0);
	}
	return result;
};
System.Windows.Media.VideoSink.prototype.NotifyOnSample = function (sampleTimeInHundredNanoseconds, frameDurationInHundredNanoseconds, sampleData, dataSize) {
	var result = 0;
	try {
		this.OnSample(sampleTimeInHundredNanoseconds, frameDurationInHundredNanoseconds, sampleData);
	} catch ($exception) {
		var arg_0D_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForUserException(arg_0D_0);
	}
	return result;
};
JSIL.MakeProperty(System.Windows.Media.VideoSink.prototype, "CaptureSource", 
	System.Windows.Media.VideoSink.prototype.get_CaptureSource, System.Windows.Media.VideoSink.prototype.set_CaptureSource);
JSIL.MakeProperty(System.Windows.Media.VideoSink.prototype, "NativeObject", 
	System.Windows.Media.VideoSink.prototype.get_NativeObject, null);
System.Windows.Media.VideoSink.prototype.m_CaptureStartedHandler = null;
System.Windows.Media.VideoSink.prototype.m_CaptureStoppedHandler = null;
System.Windows.Media.VideoSink.prototype.m_FormatChangedHandler = null;
System.Windows.Media.VideoSink.prototype.m_SampleHandler = null;
System.Windows.Media.VideoSink.prototype.m_InteropWrapper = null;

System.Windows.Media.AudioSink.prototype.get_CaptureSource = function () {
	return $asm02.MS.Internal.XcpImports.AudioSink_GetSource(this);
};
System.Windows.Media.AudioSink.prototype.set_CaptureSource = function (value) {
	$asm02.MS.Internal.XcpImports.AudioSink_SetSource(this, value);
};
System.Windows.Media.AudioSink.prototype.get_NativeObject = function () {
	if (this.m_InteropWrapper === null) {
		return System.IntPtr.Zero;
	}
	return this.m_InteropWrapper.IManagedPeerBase_NativeObject;
};
System.Windows.Media.AudioSink.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
	this.InitializeManaged();
};
System.Windows.Media.AudioSink.prototype.Finalize = function () {
	try {
		this.FinalizeNative();
	} finally {
		System.Object.prototype.Finalize.call(this);
	}
};
System.Windows.Media.AudioSink.prototype.FinalizeNative = function () {
	if (System.IntPtr.op_Inequality(this.NativeObject, System.IntPtr.Zero)) {
		this.CaptureSource = null;
	}
};
System.Windows.Media.AudioSink.prototype.InitializeManaged = function () {
	this.m_CaptureStartedHandler = JSIL.Delegate.New("System.Windows.Media.AudioSink/NotifyCaptureStartedDelegate", this, System.Windows.Media.AudioSink.prototype.NotifyCaptureStarted);
	this.m_CaptureStoppedHandler = JSIL.Delegate.New("System.Windows.Media.AudioSink/NotifyCaptureStoppedDelegate", this, System.Windows.Media.AudioSink.prototype.NotifyCaptureStopped);
	this.m_FormatChangedHandler = JSIL.Delegate.New("System.Windows.Media.AudioSink/NotifyAudioFormatChangedDelegate", this, System.Windows.Media.AudioSink.prototype.NotifyOnFormatChange);
	this.m_SamplesHandler = JSIL.Delegate.New("System.Windows.Media.AudioSink/NotifyAudioSamplesDelegate", this, System.Windows.Media.AudioSink.prototype.NotifyOnSamples);
	this.Initialize();
};
System.Windows.Media.AudioSink.prototype.Initialize = function () {
	this.m_InteropWrapper = JSIL.New($asm02.MS.Internal.Interop.InteropWrapper, "_ctor$1", [this, System.Windows.Media.AudioSink]);
	$asm02.MS.Internal.XcpImports.CheckHResult(this.m_InteropWrapper.Initialize());
	$asm02.MS.Internal.XcpImports.CheckHResult(this.m_InteropWrapper.SetCallbackCountToNativeWrapper(4));
	$asm02.MS.Internal.XcpImports.CheckHResult(this.m_InteropWrapper.SetCallbackFunctionToNativeWrapper(0, this.m_CaptureStartedHandler));
	$asm02.MS.Internal.XcpImports.CheckHResult(this.m_InteropWrapper.SetCallbackFunctionToNativeWrapper(1, this.m_CaptureStoppedHandler));
	$asm02.MS.Internal.XcpImports.CheckHResult(this.m_InteropWrapper.SetCallbackFunctionToNativeWrapper(2, this.m_FormatChangedHandler));
	$asm02.MS.Internal.XcpImports.CheckHResult(this.m_InteropWrapper.SetCallbackFunctionToNativeWrapper(3, this.m_SamplesHandler));
};
System.Windows.Media.AudioSink.prototype.NotifyCaptureStarted = function () {
	var result = 0;
	try {
		this.OnCaptureStarted();
	} catch ($exception) {
		var arg_0A_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForUserException(arg_0A_0);
	}
	return result;
};
System.Windows.Media.AudioSink.prototype.NotifyCaptureStopped = function () {
	var result = 0;
	try {
		this.OnCaptureStopped();
	} catch ($exception) {
		var arg_0A_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForUserException(arg_0A_0);
	}
	return result;
};
System.Windows.Media.AudioSink.prototype.NotifyOnFormatChange = function (Format) {
	var result = 0;
	var audioFormat = JSIL.New(System.Windows.Media.AudioFormat, "_ctor$0", [Format]);
	try {
		this.OnFormatChange(audioFormat);
	} catch ($exception) {
		var arg_12_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForUserException(arg_12_0);
	}
	return result;
};
System.Windows.Media.AudioSink.prototype.NotifyOnSamples = function (sampleTimeInHundredNanoseconds, sampleDurationInHundredNanoseconds, sampleData, dataSize) {
	var result = 0;
	try {
		this.OnSamples(sampleTimeInHundredNanoseconds, sampleDurationInHundredNanoseconds, sampleData);
	} catch ($exception) {
		var arg_0D_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForUserException(arg_0D_0);
	}
	return result;
};
JSIL.MakeProperty(System.Windows.Media.AudioSink.prototype, "CaptureSource", 
	System.Windows.Media.AudioSink.prototype.get_CaptureSource, System.Windows.Media.AudioSink.prototype.set_CaptureSource);
JSIL.MakeProperty(System.Windows.Media.AudioSink.prototype, "NativeObject", 
	System.Windows.Media.AudioSink.prototype.get_NativeObject, null);
System.Windows.Media.AudioSink.prototype.m_CaptureStartedHandler = null;
System.Windows.Media.AudioSink.prototype.m_CaptureStoppedHandler = null;
System.Windows.Media.AudioSink.prototype.m_FormatChangedHandler = null;
System.Windows.Media.AudioSink.prototype.m_SamplesHandler = null;
System.Windows.Media.AudioSink.prototype.m_InteropWrapper = null;

System.Windows.Media.CaptureImageCompletedEventArgs.prototype.get_Result = function () {
	return this.Result$value;
};
System.Windows.Media.CaptureImageCompletedEventArgs.prototype.set_Result = function (value) {
	this.Result$value = value;
};
System.Windows.Media.CaptureImageCompletedEventArgs.prototype._ctor = function (image) {
	System.ComponentModel.AsyncCompletedEventArgs.prototype._ctor.call(this, null, false, null);
	this.Result = image;
};
JSIL.MakeProperty(System.Windows.Media.CaptureImageCompletedEventArgs.prototype, "Result", 
	System.Windows.Media.CaptureImageCompletedEventArgs.prototype.get_Result, System.Windows.Media.CaptureImageCompletedEventArgs.prototype.set_Result);
System.Windows.Media.CaptureImageCompletedEventArgs.prototype.Result$value = null;

$asm02.System.Windows.Media.SingleImageSink.prototype.get_Callback = function () {
	return this.Callback$value;
};
$asm02.System.Windows.Media.SingleImageSink.prototype.set_Callback = function (value) {
	this.Callback$value = value;
};
$asm02.System.Windows.Media.SingleImageSink.prototype._ctor = function (Source) {
	System.Windows.Media.VideoSink.prototype._ctor.call(this);
	this.m_CaptureSource = Source;
};
$asm02.System.Windows.Media.SingleImageSink.prototype.OnCaptureStarted = function () {
};
$asm02.System.Windows.Media.SingleImageSink.prototype.OnCaptureStopped = function () {
};
$asm02.System.Windows.Media.SingleImageSink.prototype.OnFormatChange = function (Format) {
	this.m_PixelFormat = Format.PixelFormat;
	this.m_Width = Format.PixelWidth;
	this.m_Height = Format.PixelHeight;
	this.m_Stride = Format.Stride;
};
$asm02.System.Windows.Media.SingleImageSink.prototype.OnSample = function (sampleTime, frameDuration, sampleData) {
	var $l$gc__DisplayClass = new $asm02.System.Windows.Media.SingleImageSink.$l$gc__DisplayClass2();
	$l$gc__DisplayClass.sampleData = sampleData;
	$l$gc__DisplayClass.$this = this;
	if (!this.m_RaisedEvent) {
		this.m_RaisedEvent = true;
		System.Windows.Media.VideoSink.prototype.set_CaptureSource.call(this, null);
		this.m_CaptureSource.Dispatcher.BeginInvoke$0(function () {
				var writeableBitmap = JSIL.New(System.Windows.Media.Imaging.WriteableBitmap, "_ctor$1", [$l$gc__DisplayClass.$this.m_Width, $l$gc__DisplayClass.$this.m_Height]);
				var pixelFormat = $l$gc__DisplayClass.$this.m_PixelFormat;
				if (pixelFormat === System.Windows.Media.PixelFormatType.Format32bppArgb) {
					if ($l$gc__DisplayClass.$this.m_Stride >= 0) {
					__loop2__: 
						for (var i = 0; i < $l$gc__DisplayClass.$this.m_Height; ++i) {
						__loop3__: 
							for (var j = 0; j < $l$gc__DisplayClass.$this.m_Width; ++j) {
								writeableBitmap.Pixels[((i * $l$gc__DisplayClass.$this.m_Width) + j)] = System.BitConverter.ToInt32($l$gc__DisplayClass.sampleData, (($l$gc__DisplayClass.$this.m_Stride * i) + (j * 4)));
							}
						}
					} else {
					__loop0__: 
						for (var k = 0; k < $l$gc__DisplayClass.$this.m_Height; ++k) {
							var num2 = ((Math.abs($l$gc__DisplayClass.$this.m_Stride)) * ($l$gc__DisplayClass.$this.m_Height - (k + 1)));
						__loop1__: 
							for (var l = 0; l < $l$gc__DisplayClass.$this.m_Width; ++l) {
								writeableBitmap.Pixels[((k * $l$gc__DisplayClass.$this.m_Width) + l)] = System.BitConverter.ToInt32($l$gc__DisplayClass.sampleData, (num2 + (l * 4)));
							}
						}
					}
				}
				if ($l$gc__DisplayClass.$this.Callback !== null) {
					$l$gc__DisplayClass.$this.Callback(writeableBitmap);
				}
			});
	}
};
JSIL.MakeProperty($asm02.System.Windows.Media.SingleImageSink.prototype, "Callback", 
	$asm02.System.Windows.Media.SingleImageSink.prototype.get_Callback, $asm02.System.Windows.Media.SingleImageSink.prototype.set_Callback);
$asm02.System.Windows.Media.SingleImageSink.prototype.m_CaptureSource = null;
$asm02.System.Windows.Media.SingleImageSink.prototype.m_PixelFormat = 0;
$asm02.System.Windows.Media.SingleImageSink.prototype.m_Width = 0;
$asm02.System.Windows.Media.SingleImageSink.prototype.m_Height = 0;
$asm02.System.Windows.Media.SingleImageSink.prototype.m_Stride = 0;
$asm02.System.Windows.Media.SingleImageSink.prototype.m_RaisedEvent = false;
$asm02.System.Windows.Media.SingleImageSink.prototype.Callback$value = null;

$asm02.System.Windows.Media.SingleImageSink.$l$gc__DisplayClass2.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm02.System.Windows.Media.SingleImageSink.$l$gc__DisplayClass2.prototype.$this = null;
$asm02.System.Windows.Media.SingleImageSink.$l$gc__DisplayClass2.prototype.sampleData = null;

System.Windows.Media.CaptureDeviceConfiguration.get_AllowedDeviceAccess = function () {
	return $asm02.MS.Internal.XcpImports.CaptureGraph_GetHasDeviceAccess();
};
System.Windows.Media.CaptureDeviceConfiguration.RequestDeviceAccess = function () {
	return $asm02.MS.Internal.XcpImports.CaptureGraph_RequestDeviceAccess();
};
System.Windows.Media.CaptureDeviceConfiguration.GetAvailableVideoCaptureDevices = function () {
	return new (System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(System.Windows.Media.VideoCaptureDevice)) ($asm02.MS.Internal.XcpImports.CaptureGraph_GetAvailableVideoCaptureDevices());
};
System.Windows.Media.CaptureDeviceConfiguration.GetAvailableAudioCaptureDevices = function () {
	return new (System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(System.Windows.Media.AudioCaptureDevice)) ($asm02.MS.Internal.XcpImports.CaptureGraph_GetAvailableAudioCaptureDevices());
};
System.Windows.Media.CaptureDeviceConfiguration.GetDefaultVideoCaptureDevice = function () {
	var videoCaptureDevice = null;
	var availableVideoCaptureDevices = System.Windows.Media.CaptureDeviceConfiguration.GetAvailableVideoCaptureDevices();
	if (availableVideoCaptureDevices !== null) {
		var enumerator = availableVideoCaptureDevices.IEnumerable$b1_GetEnumerator();
		try {
		__loop0__: 
			while (enumerator.IEnumerator_MoveNext()) {
				var current = enumerator.IEnumerator$b1_Current;
				if (current.IsDefaultDevice) {
					videoCaptureDevice = current;
					break __loop0__;
				}
			}
		} finally {
			if (enumerator !== null) {
				enumerator.IDisposable_Dispose();
			}
		}
		if (!(videoCaptureDevice || (availableVideoCaptureDevices.ICollection$b1_Count <= 0))) {
			videoCaptureDevice = availableVideoCaptureDevices.IList$b1_get_Item(0);
		}
	}
	return videoCaptureDevice;
};
System.Windows.Media.CaptureDeviceConfiguration.GetDefaultAudioCaptureDevice = function () {
	var audioCaptureDevice = null;
	var availableAudioCaptureDevices = System.Windows.Media.CaptureDeviceConfiguration.GetAvailableAudioCaptureDevices();
	if (availableAudioCaptureDevices !== null) {
		var enumerator = availableAudioCaptureDevices.IEnumerable$b1_GetEnumerator();
		try {
		__loop0__: 
			while (enumerator.IEnumerator_MoveNext()) {
				var current = enumerator.IEnumerator$b1_Current;
				if (current.IsDefaultDevice) {
					audioCaptureDevice = current;
					break __loop0__;
				}
			}
		} finally {
			if (enumerator !== null) {
				enumerator.IDisposable_Dispose();
			}
		}
		if (!(audioCaptureDevice || (availableAudioCaptureDevices.ICollection$b1_Count <= 0))) {
			audioCaptureDevice = availableAudioCaptureDevices.IList$b1_get_Item(0);
		}
	}
	return audioCaptureDevice;
};
JSIL.MakeProperty(System.Windows.Media.CaptureDeviceConfiguration, "AllowedDeviceAccess", 
	System.Windows.Media.CaptureDeviceConfiguration.get_AllowedDeviceAccess, null);

System.Windows.Media.DomainOperationCompletedEventArgs.prototype._ctor = function (serviceId, accountId, responseCustomData, error, cancelled, userState) {
	System.ComponentModel.AsyncCompletedEventArgs.prototype._ctor.call(this, error, cancelled, userState);
	this._serviceId = serviceId;
	this._accountId = accountId;
	this._responseCustomData = responseCustomData;
};
System.Windows.Media.DomainOperationCompletedEventArgs.prototype.get_ServiceId = function () {
	System.ComponentModel.AsyncCompletedEventArgs.prototype.RaiseExceptionIfNecessary.call(this);
	return this._serviceId;
};
System.Windows.Media.DomainOperationCompletedEventArgs.prototype.get_AccountId = function () {
	System.ComponentModel.AsyncCompletedEventArgs.prototype.RaiseExceptionIfNecessary.call(this);
	return this._accountId;
};
System.Windows.Media.DomainOperationCompletedEventArgs.prototype.get_ResponseCustomData = function () {
	System.ComponentModel.AsyncCompletedEventArgs.prototype.RaiseExceptionIfNecessary.call(this);
	return this._responseCustomData;
};
JSIL.MakeProperty(System.Windows.Media.DomainOperationCompletedEventArgs.prototype, "ServiceId", 
	System.Windows.Media.DomainOperationCompletedEventArgs.prototype.get_ServiceId, null);
JSIL.MakeProperty(System.Windows.Media.DomainOperationCompletedEventArgs.prototype, "AccountId", 
	System.Windows.Media.DomainOperationCompletedEventArgs.prototype.get_AccountId, null);
JSIL.MakeProperty(System.Windows.Media.DomainOperationCompletedEventArgs.prototype, "ResponseCustomData", 
	System.Windows.Media.DomainOperationCompletedEventArgs.prototype.get_ResponseCustomData, null);
System.Windows.Media.DomainOperationCompletedEventArgs.prototype._responseCustomData = null;

System.Windows.Media.JoinDomainCompletedEventArgs.prototype._ctor = function (serviceId, accountId, responseCustomData, error, cancelled, userState) {
	System.Windows.Media.DomainOperationCompletedEventArgs.prototype._ctor.call(
		this, serviceId, 
		accountId, 
		responseCustomData, 
		error, 
		cancelled, 
		userState
	);
};

System.Windows.Media.LeaveDomainCompletedEventArgs.prototype._ctor = function (serviceId, accountId, responseCustomData, error, cancelled, userState) {
	System.Windows.Media.DomainOperationCompletedEventArgs.prototype._ctor.call(
		this, serviceId, 
		accountId, 
		responseCustomData, 
		error, 
		cancelled, 
		userState
	);
};

System.Windows.Media.DomainAcquirer.prototype.add_JoinDomainCompleted = function (value) {
	this.JoinDomainCompleted = System.Delegate.Combine(this.JoinDomainCompleted, value);
};
System.Windows.Media.DomainAcquirer.prototype.remove_JoinDomainCompleted = function (value) {
	this.JoinDomainCompleted = System.Delegate.Remove(this.JoinDomainCompleted, value);
};
System.Windows.Media.DomainAcquirer.prototype.add_LeaveDomainCompleted = function (value) {
	this.LeaveDomainCompleted = System.Delegate.Combine(this.LeaveDomainCompleted, value);
};
System.Windows.Media.DomainAcquirer.prototype.remove_LeaveDomainCompleted = function (value) {
	this.LeaveDomainCompleted = System.Delegate.Remove(this.LeaveDomainCompleted, value);
};
System.Windows.Media.DomainAcquirer.prototype.add__LAJoinDomainCompleted = function (value) {
	this._LAJoinDomainCompleted = System.Delegate.Combine(this._LAJoinDomainCompleted, value);
};
System.Windows.Media.DomainAcquirer.prototype.remove__LAJoinDomainCompleted = function (value) {
	this._LAJoinDomainCompleted = System.Delegate.Remove(this._LAJoinDomainCompleted, value);
};
System.Windows.Media.DomainAcquirer.prototype._LASetBindStatus = function (f_fIsBind) {
	var lock = null;
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
		if (this._AsyncDomainOpInProgress) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("DomainAcquirer_AlreadyInProgress")]);
		}
		if (this._BindState === $asm02.System.Windows.Media.BindState.CannotBind) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("LicenseAcquirer_CannotBind")]);
		}
		if (this._BindState === 0) {
			if (f_fIsBind) {
				throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("DomainAcquirer_AlreadyBound")]);
			}
			this._LAJoinDomainCompleted = null;
		} else {
			if (!f_fIsBind) {
				throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("DomainAcquirer_AlreadyUnbound")]);
			}
			this._BindState = $asm02.System.Windows.Media.BindState.Bound;
		}
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
};
System.Windows.Media.DomainAcquirer.prototype._ctor = function () {
	this._lock = new System.Object();
	this._BindState = $asm02.System.Windows.Media.BindState.Unbound;
	System.Object.prototype._ctor.call(this);
	this.InitializeDomainCallback();
};
System.Windows.Media.DomainAcquirer.prototype.InitializeDomainCallback = function () {
	this._AcquireDelegate = JSIL.Delegate.New("System.Windows.Media.DomainAcquirer/DomainAcquisitionDelegate", this, System.Windows.Media.DomainAcquirer.prototype.DomainCallback);
};
System.Windows.Media.DomainAcquirer.prototype.DomainOpAsync = function (isDomainJoin, challenge, domainServerUri) {
	var zero = new JSIL.Variable(System.IntPtr.Zero);
	var uri = null;
	this.EnsureNativePeer(/* ref */ zero);
	if (System.Uri.op_Inequality(null, domainServerUri)) {
		uri = domainServerUri;
	} else {
		if (!System.Uri.op_Inequality(null, this.m_uriDomainServer)) {
			throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["domainServerUri"]);
		}
		uri = this.m_uriDomainServer;
	}
	$asm02.MS.Internal.XcpImports.DrmDomainAcquirer_DomainOpAsync(zero.value, isDomainJoin, challenge, uri.toString());
};
System.Windows.Media.DomainAcquirer.prototype.OnJoinDomain = function (joinChallenge, domainServerUri) {
	var lock = null;
	if (joinChallenge === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["joinChallenge"]);
	}
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
		this.m_fWaitingForManualResponse = false;
		this.DomainOpAsync(true, joinChallenge, domainServerUri);
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
};
System.Windows.Media.DomainAcquirer.prototype.OnLeaveDomain = function (leaveChallenge, domainServerUri) {
	var lock = null;
	if (leaveChallenge === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["leaveChallenge"]);
	}
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
		this.m_fWaitingForManualResponse = false;
		this.DomainOpAsync(false, leaveChallenge, domainServerUri);
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
};
System.Windows.Media.DomainAcquirer.prototype.SetDomainOpResponse = function (isDomainJoin, continueHttp, domainResponse) {
	var lock = null;
	if (domainResponse === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["domainResponse"]);
	}
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
		this.m_uriDomainServer = null;
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
	var zero = new JSIL.Variable(System.IntPtr.Zero);
	this.EnsureNativePeer(/* ref */ zero);
	$asm02.MS.Internal.XcpImports.DrmDomainAcquirer_DomainOpSetResponse(zero.value, isDomainJoin, continueHttp, domainResponse);
};
System.Windows.Media.DomainAcquirer.prototype.SetJoinDomainResponse = function (domainResponse) {
	var lock = null;
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
		if (!this.m_fWaitingForManualResponse) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("DRMNotWaitingForResponse")]);
		}
		this.SetDomainOpResponse(true, false, domainResponse);
		this.m_fWaitingForManualResponse = false;
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
};
System.Windows.Media.DomainAcquirer.prototype.SetLeaveDomainResponse = function (domainResponse) {
	var lock = null;
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
		if (!this.m_fWaitingForManualResponse) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("DRMNotWaitingForResponse")]);
		}
		this.SetDomainOpResponse(false, false, domainResponse);
		this.m_fWaitingForManualResponse = false;
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
};
System.Windows.Media.DomainAcquirer.prototype.GenerateDomainOpChallengeAsync = function (isDomainJoin, $serviceId, $accountId, domainServerUrl, friendlyName, checkBindState) {
	var accountId = new JSIL.Variable($accountId);
	var serviceId = new JSIL.Variable($serviceId);
	var lock = null, lock2 = null;
	if (System.Uri.op_Equality(domainServerUrl, null)) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["domainServerUrl"]);
	}
	if (!(!System.Guid.op_Equality(System.Guid.Empty.MemberwiseClone(), accountId.value.MemberwiseClone()) || isDomainJoin)) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["accountId"]);
	}
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
		if (!(!checkBindState || this._BindState)) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("DomainAcquirer_AlreadyBound")]);
		}
		if (this._BindState === $asm02.System.Windows.Media.BindState.Unbound) {
			this._BindState = $asm02.System.Windows.Media.BindState.CannotBind;
		}
		var text = this._challengeCustomData;
		if (!(text || (this._challengeCustomDataFromLA === null))) {
			text = this._challengeCustomDataFromLA;
		}
		var asyncDomainOpInProgress = this._AsyncDomainOpInProgress;
		this._AsyncDomainOpInProgress = true;
		this.m_uriDomainServer = domainServerUrl;
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
	if (asyncDomainOpInProgress) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("DomainAcquirer_AlreadyInProgress")]);
	}
	try {
		var zero = new JSIL.Variable(System.IntPtr.Zero);
		this.EnsureNativePeer(/* ref */ zero);
		$asm02.MS.Internal.XcpImports.DrmDomainAcquirer_DomainOpGenerateChallengeAsync(
			zero.value, 
			isDomainJoin, 
			this.m_uriDomainServer.toString(), 
			friendlyName, 
			/* ref */ serviceId, 
			/* ref */ accountId, 
			text
		);
	} catch ($exception) {
		System.Threading.Monitor.Enter((lock2 = this._lock));
		try {
			this._AsyncDomainOpInProgress = false;
			this.m_fWaitingForManualResponse = false;
			this.m_uriDomainServer = null;
		} finally {
			System.Threading.Monitor.Exit(lock2);
		}
		throw $exception;
	}
};
System.Windows.Media.DomainAcquirer.prototype.JoinDomainAsync = function (serviceId, accountId, domainServerUrl, friendlyName) {
	this.GenerateDomainOpChallengeAsync(
		true, 
		serviceId, 
		accountId, 
		domainServerUrl, 
		friendlyName, 
		true
	);
};
System.Windows.Media.DomainAcquirer.prototype._JoinDomainAsyncFromLA = function (f_strCustomData, f_guidServiceID, f_guidAccountID, f_UriDomainServer) {
	var lock = null;
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
		this._challengeCustomDataFromLA = f_strCustomData;
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
	this.GenerateDomainOpChallengeAsync(
		true, 
		f_guidServiceID, 
		f_guidAccountID, 
		f_UriDomainServer, 
		null, 
		false
	);
};
System.Windows.Media.DomainAcquirer.prototype.LeaveDomainAsync = function (serviceId, accountId, domainServerUrl) {
	this.GenerateDomainOpChallengeAsync(
		false, 
		serviceId, 
		accountId, 
		domainServerUrl, 
		null, 
		true
	);
};
System.Windows.Media.DomainAcquirer.prototype.OnCancel = function () {
};
System.Windows.Media.DomainAcquirer.prototype.CancelAsync = function () {
	var lock = null;
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
		var asyncDomainOpInProgress = this._AsyncDomainOpInProgress;
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
	if (!asyncDomainOpInProgress) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("DomainAcquirer_NoExistingAttempt")]);
	}
	var zero = new JSIL.Variable(System.IntPtr.Zero);
	this.EnsureNativePeer(/* ref */ zero);
	$asm02.MS.Internal.XcpImports.DrmDomainAcquirer_DomainOpAsyncCancel(zero.value);
};
System.Windows.Media.DomainAcquirer.prototype.get_ChallengeCustomData = function () {
	var lock = null;
	var result = null;
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
		result = this._challengeCustomData;
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
	return result;
};
System.Windows.Media.DomainAcquirer.prototype.set_ChallengeCustomData = function (value) {
	var lock = null;
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
		this._challengeCustomData = value;
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
};
System.Windows.Media.DomainAcquirer.prototype.DomainCallback = function (ui32isDomainJoin, error, ui32isDataChallenge, nativeDataBytes, nativeDataSize, /* ref */ serviceId, /* ref */ accountId, responseCustomData, uri) {
	var lock = null, lock2 = null;
	var cancelled = false;
	var result = 0;
	var flag = (ui32isDomainJoin !== 0);
	var flag2 = (ui32isDataChallenge !== 0);
	try {
		var error2 = null;
		if (nativeDataSize > 2147483647) {
			return -2147418113;
		}
		if (nativeDataSize > 0) {
			var internalMemoryStream = new $asm02.MS.Internal.InternalMemoryStream(nativeDataBytes, nativeDataSize, null);
			$asm02.MS.Internal.XcpImports.AddRefNativeObject$1(nativeDataBytes);
			if (error > 0) {
				throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
			}
			if (flag2) {
				var domainServerUri = null;
				if (!System.String.IsNullOrEmpty(uri)) {
					domainServerUri = JSIL.New(System.Uri, "_ctor$1", [uri, System.UriKind.Absolute]);
				}
				this.m_fWaitingForManualResponse = true;
				if (flag) {
					this.OnJoinDomain(internalMemoryStream, domainServerUri);
				} else {
					this.OnLeaveDomain(internalMemoryStream, domainServerUri);
				}
			} else {
				this.SetDomainOpResponse(flag, true, internalMemoryStream);
			}
		} else {
			System.Threading.Monitor.Enter((lock = this._lock));
			try {
				this._challengeCustomDataFromLA = null;
				this.m_uriDomainServer = null;
				this.m_fWaitingForManualResponse = false;
			} finally {
				System.Threading.Monitor.Exit(lock);
			}
			if (error > 0) {
				if (error === -2147467260) {
					this.OnCancel();
					cancelled = true;
				} else {
					error2 = $asm02.System.Windows.Media.DrmException.CreateDrmException(error);
				}
			}
			if (flag) {
				var e = new System.Windows.Media.JoinDomainCompletedEventArgs(serviceId.value, accountId.value, responseCustomData, error2, cancelled, null);
				var eventHandler = this.JoinDomainCompleted;
				if (eventHandler !== null) {
					try {
						eventHandler(this, e);
					} catch ($exception) {
					}
				}
				eventHandler = this._LAJoinDomainCompleted;
				if (eventHandler !== null) {
					eventHandler(this, e);
				}
			} else {
				var e2 = new System.Windows.Media.LeaveDomainCompletedEventArgs(serviceId.value, accountId.value, responseCustomData, error2, cancelled, null);
				var leaveDomainCompleted = this.LeaveDomainCompleted;
				if (leaveDomainCompleted !== null) {
					try {
						leaveDomainCompleted(this, e2);
					} catch ($exception) {
					}
				}
			}
			System.Threading.Monitor.Enter((lock2 = this._lock));
			try {
				this._AsyncDomainOpInProgress = false;
			} finally {
				System.Threading.Monitor.Exit(lock2);
			}
		}
	} catch ($exception) {
		var arg_19A_0 = $exception;
		try {
			result = $asm02.MS.Internal.Error.GetXresultForException(arg_19A_0);
		} catch ($exception) {
			result = -2146492416;
		}
	}
	return result;
};
System.Windows.Media.DomainAcquirer.prototype.EnsureNativePeer = function (/* ref */ nativePeer) {
	var lock = null, nativePeerPtr = new JSIL.Variable(0), lock2 = null;
	var managedNativePeerPair = null;
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
		managedNativePeerPair = this._wrapper;
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
	if (managedNativePeerPair === null) {
		$asm02.MS.Internal.XcpImports.DrmDomainAcquirer_CreateNativePeer(this._AcquireDelegate, /* ref */ nativePeerPtr);
		managedNativePeerPair = new $asm02.System.Windows.Media.ManagedNativePeerPair(this, nativePeerPtr.value);
	}
	System.Threading.Monitor.Enter((lock2 = this._lock));
	try {
		if (this._wrapper === null) {
			this._wrapper = managedNativePeerPair;
		}
		nativePeer.value = this._wrapper.NativeObject;
	} finally {
		System.Threading.Monitor.Exit(lock2);
	}
};
JSIL.MakeProperty(System.Windows.Media.DomainAcquirer.prototype, "ChallengeCustomData", 
	System.Windows.Media.DomainAcquirer.prototype.get_ChallengeCustomData, System.Windows.Media.DomainAcquirer.prototype.set_ChallengeCustomData);
System.Windows.Media.DomainAcquirer.prototype._AcquireDelegate = null;
System.Windows.Media.DomainAcquirer.prototype.JoinDomainCompleted = null;
System.Windows.Media.DomainAcquirer.prototype.LeaveDomainCompleted = null;
System.Windows.Media.DomainAcquirer.prototype._LAJoinDomainCompleted = null;
System.Windows.Media.DomainAcquirer.prototype._lock = null;
System.Windows.Media.DomainAcquirer.prototype._wrapper = null;
System.Windows.Media.DomainAcquirer.prototype._challengeCustomData = null;
System.Windows.Media.DomainAcquirer.prototype._challengeCustomDataFromLA = null;
System.Windows.Media.DomainAcquirer.prototype._AsyncDomainOpInProgress = false;
System.Windows.Media.DomainAcquirer.prototype.m_fWaitingForManualResponse = false;
System.Windows.Media.DomainAcquirer.prototype._BindState = 0;
System.Windows.Media.DomainAcquirer.prototype.m_uriDomainServer = null;

System.Windows.Media.MediaLicense.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
System.Windows.Media.MediaLicense.prototype.get_ExpirationDate = function () {
	var num = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.DrmLicense_GetExpirationDate(this.m_wrapper.NativeObject, /* ref */ num);
	System.GC.KeepAlive(this);
	if (num.value === 0) {
		return new (System.Nullable$b1.Of(System.DateTimeOffset)) ();
	}
	return new (System.Nullable$b1.Of(System.DateTimeOffset)) (System.DateTimeOffset.FromFileTime(num.value));
};
System.Windows.Media.MediaLicense.prototype.get_UplinkKeyId = function () {
	var empty = new JSIL.Variable(System.Guid.Empty.MemberwiseClone());
	$asm02.MS.Internal.XcpImports.DrmLicense_GetUplinkKeyId(this.m_wrapper.NativeObject, /* ref */ empty);
	System.GC.KeepAlive(this);
	return empty.value;
};
System.Windows.Media.MediaLicense.prototype.get_KeyId = function () {
	var empty = new JSIL.Variable(System.Guid.Empty.MemberwiseClone());
	$asm02.MS.Internal.XcpImports.DrmLicense_GetKeyId(this.m_wrapper.NativeObject, /* ref */ empty);
	System.GC.KeepAlive(this);
	return empty.value;
};
System.Windows.Media.MediaLicense.prototype.get_Usable = function () {
	var result = new JSIL.Variable(false);
	$asm02.MS.Internal.XcpImports.DrmLicense_IsUsable(this.m_wrapper.NativeObject, /* ref */ result);
	System.GC.KeepAlive(this);
	return result.value;
};
System.Windows.Media.MediaLicense.CreateInstance = function (nativeLicensePeer) {
	var mediaLicense = new System.Windows.Media.MediaLicense();
	mediaLicense.m_wrapper = new $asm02.System.Windows.Media.ManagedNativePeerPair(mediaLicense, nativeLicensePeer);
	return mediaLicense;
};
JSIL.MakeProperty(System.Windows.Media.MediaLicense.prototype, "ExpirationDate", 
	System.Windows.Media.MediaLicense.prototype.get_ExpirationDate, null);
JSIL.MakeProperty(System.Windows.Media.MediaLicense.prototype, "UplinkKeyId", 
	System.Windows.Media.MediaLicense.prototype.get_UplinkKeyId, null);
JSIL.MakeProperty(System.Windows.Media.MediaLicense.prototype, "KeyId", 
	System.Windows.Media.MediaLicense.prototype.get_KeyId, null);
JSIL.MakeProperty(System.Windows.Media.MediaLicense.prototype, "Usable", 
	System.Windows.Media.MediaLicense.prototype.get_Usable, null);
System.Windows.Media.MediaLicense.prototype.m_wrapper = null;

$asm02.System.Windows.Media.DrmException.CreateDrmException = function (f_hr) {
	var f_strErrorMessage = new JSIL.Variable(null), f_uiSLErrorCode = new JSIL.Variable(0);
	$asm02.MS.Internal.XcpImports.DrmException_GetErrorDataFromHResult(f_hr, /* ref */ f_strErrorMessage, /* ref */ f_uiSLErrorCode);
	return new $asm02.System.Windows.Media.DrmException(f_hr, f_strErrorMessage.value, f_uiSLErrorCode.value);
};
$asm02.System.Windows.Media.DrmException.prototype._ctor = function (f_hr, f_strErrorMessage, f_uiSLErrorCode) {
	System.Exception.prototype._ctor.call(this, f_strErrorMessage);
	this.m_uiSLErrorCode = f_uiSLErrorCode;
	this.m_hr = f_hr;
};
$asm02.System.Windows.Media.DrmException.prototype.get_HRESULT = function () {
	return this.m_hr;
};
$asm02.System.Windows.Media.DrmException.prototype.get_SilverlightErrorCode = function () {
	return this.m_uiSLErrorCode;
};
JSIL.MakeProperty($asm02.System.Windows.Media.DrmException.prototype, "HRESULT", 
	$asm02.System.Windows.Media.DrmException.prototype.get_HRESULT, null);
JSIL.MakeProperty($asm02.System.Windows.Media.DrmException.prototype, "SilverlightErrorCode", 
	$asm02.System.Windows.Media.DrmException.prototype.get_SilverlightErrorCode, null);
$asm02.System.Windows.Media.DrmException.prototype.m_hr = 0;
$asm02.System.Windows.Media.DrmException.prototype.m_uiSLErrorCode = 0;

System.Windows.Media.AcquireLicenseCompletedEventArgs.prototype._ctor$0 = function (responseCustomData, error, cancelled, userState) {
	this.m_pEnumerator = System.IntPtr.Zero;
	System.ComponentModel.AsyncCompletedEventArgs.prototype._ctor.call(this, error, cancelled, userState);
	this.m_strResponseCustomData = responseCustomData;
};
System.Windows.Media.AcquireLicenseCompletedEventArgs.prototype._ctor$1 = function (f_pEnumerator, f_hrResult) {
	this.m_pEnumerator = System.IntPtr.Zero;
	System.ComponentModel.AsyncCompletedEventArgs.prototype._ctor.call(this, null, false, null);
	this.m_hrResult = f_hrResult;
	this.m_pEnumerator = f_pEnumerator;
};
System.Windows.Media.AcquireLicenseCompletedEventArgs.prototype.get_ResponseCustomData = function () {
	System.ComponentModel.AsyncCompletedEventArgs.prototype.RaiseExceptionIfNecessary.call(this);
	return this.m_strResponseCustomData;
};
System.Windows.Media.AcquireLicenseCompletedEventArgs.prototype.get_HrResult = function () {
	return this.m_hrResult;
};
System.Windows.Media.AcquireLicenseCompletedEventArgs.prototype.get_Enumerator = function () {
	return this.m_pEnumerator;
};
JSIL.OverloadedMethod(System.Windows.Media.AcquireLicenseCompletedEventArgs.prototype, "_ctor", [
		["_ctor$0", [System.String, System.Exception, System.Boolean, System.Object]], 
		["_ctor$1", [System.IntPtr, System.UInt32]]
	]);
JSIL.MakeProperty(System.Windows.Media.AcquireLicenseCompletedEventArgs.prototype, "ResponseCustomData", 
	System.Windows.Media.AcquireLicenseCompletedEventArgs.prototype.get_ResponseCustomData, null);
JSIL.MakeProperty(System.Windows.Media.AcquireLicenseCompletedEventArgs.prototype, "HrResult", 
	System.Windows.Media.AcquireLicenseCompletedEventArgs.prototype.get_HrResult, null);
JSIL.MakeProperty(System.Windows.Media.AcquireLicenseCompletedEventArgs.prototype, "Enumerator", 
	System.Windows.Media.AcquireLicenseCompletedEventArgs.prototype.get_Enumerator, null);
System.Windows.Media.AcquireLicenseCompletedEventArgs.prototype.m_strResponseCustomData = null;
System.Windows.Media.AcquireLicenseCompletedEventArgs.prototype.m_hrResult = 0;
System.Windows.Media.AcquireLicenseCompletedEventArgs.prototype.m_pEnumerator = 0;

System.Windows.Media.LicenseAcquirer.prototype.add_AcquireLicenseCompleted = function (value) {
	this.AcquireLicenseCompleted = System.Delegate.Combine(this.AcquireLicenseCompleted, value);
};
System.Windows.Media.LicenseAcquirer.prototype.remove_AcquireLicenseCompleted = function (value) {
	this.AcquireLicenseCompleted = System.Delegate.Remove(this.AcquireLicenseCompleted, value);
};
System.Windows.Media.LicenseAcquirer.prototype.add__MEAcquireLicenseCompleted = function (value) {
	this._MEAcquireLicenseCompleted = System.Delegate.Combine(this._MEAcquireLicenseCompleted, value);
};
System.Windows.Media.LicenseAcquirer.prototype.remove__MEAcquireLicenseCompleted = function (value) {
	this._MEAcquireLicenseCompleted = System.Delegate.Remove(this._MEAcquireLicenseCompleted, value);
};
System.Windows.Media.LicenseAcquirer.prototype.get_ChallengeCustomData = function () {
	var lock = null;
	var result = null;
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
		result = this.m_strChallengeCustomData;
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
	return result;
};
System.Windows.Media.LicenseAcquirer.prototype.set_ChallengeCustomData = function (value) {
	var lock = null;
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
		this.m_strChallengeCustomData = value;
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
};
System.Windows.Media.LicenseAcquirer.prototype.get_DomainAcquirer = function () {
	var lock = null;
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
		if (this.m_DomainAcquirer === null) {
			this.m_DomainAcquirer = new System.Windows.Media.DomainAcquirer();
			this.m_DomainAcquirer._LASetBindStatus(true);
		}
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
	return this.m_DomainAcquirer;
};
System.Windows.Media.LicenseAcquirer.prototype.set_DomainAcquirer = function (value) {
	var lock = null;
	if (value === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["Value"]);
	}
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
		value._LASetBindStatus(true);
		if (this.m_DomainAcquirer !== null) {
			try {
				this.m_DomainAcquirer._LASetBindStatus(false);
			} catch ($exception) {
				value._LASetBindStatus(false);
				throw $exception;
			}
		}
		this.m_DomainAcquirer = value;
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
};
System.Windows.Media.LicenseAcquirer.prototype.get_LicenseServerUriOverride = function () {
	var lock = null;
	var result = null;
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
		result = this.m_uriOverride;
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
	return result;
};
System.Windows.Media.LicenseAcquirer.prototype.set_LicenseServerUriOverride = function (value) {
	var lock = null;
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
		this.m_uriOverride = value;
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
};
System.Windows.Media.LicenseAcquirer.prototype.AcquireLicenseAsync$0 = function ($keyId, keyType, $serviceId) {
	var serviceId = new JSIL.Variable($serviceId);
	var keyId = new JSIL.Variable($keyId);
	if (System.Guid.op_Equality(System.Guid.Empty.MemberwiseClone(), keyId.value.MemberwiseClone())) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["keyId"]);
	}
	if (!(!JSIL.Cast(keyType, System.Boolean) || (System.Windows.Media.ContentKeyType.Cocktail === keyType))) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", ["keyType"]);
	}
	this._AcquireLicenseAsync(
		null, 
		null, 
		/* ref */ keyId, 
		keyType, 
		/* ref */ serviceId, 
		$asm02.System.Windows.Media.BindState.CannotBind
	);
};
System.Windows.Media.LicenseAcquirer.prototype.AcquireLicenseAsync$1 = function (mediaStream) {
	var empty = new JSIL.Variable(System.Guid.Empty.MemberwiseClone());
	if (mediaStream === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["mediaStream"]);
	}
	this._AcquireLicenseAsync(
		mediaStream, 
		null, 
		/* ref */ empty, 
		System.Windows.Media.ContentKeyType.Aes128Bit, 
		/* ref */ empty, 
		$asm02.System.Windows.Media.BindState.CannotBind
	);
};
System.Windows.Media.LicenseAcquirer.prototype.AcquireLicenseAsync$2 = function (mediaHeader) {
	var empty = new JSIL.Variable(System.Guid.Empty.MemberwiseClone());
	if (!((mediaHeader !== null) && (mediaHeader.length !== 0))) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["mediaHeader"]);
	}
	this._AcquireLicenseAsync(
		null, 
		mediaHeader, 
		/* ref */ empty, 
		System.Windows.Media.ContentKeyType.Aes128Bit, 
		/* ref */ empty, 
		$asm02.System.Windows.Media.BindState.CannotBind
	);
};
System.Windows.Media.LicenseAcquirer.prototype.CancelAsync = function () {
	var __label0__ = null;
__step0__: 
	while (true) {
		switch (__label0__) {
			case null:
				var lock = null;
				__label0__ = "__entry0__";
				continue __step0__;
				break;
			case "__entry0__":
				var zero = new JSIL.Variable(System.IntPtr.Zero);
				System.Threading.Monitor.Enter((lock = this._lock));
				try {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								if (!this.m_fLAInProgress) {
									throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("LicenseAcquirer_NoLAInProgress")]);
								}
								this._EnsureNativePeer(/* ref */ zero);
								if (this.m_fDJInProgress) {
									if (this.m_DomainAcquirer === null) {
										throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["m_DomainAcquirer"]);
									}
									try {
										this.m_DomainAcquirer.CancelAsync();
										__label1__ = "IL_6A";
										continue __step1__;
									} catch ($exception) {
										if (JSIL.CheckType($exception, System.InvalidOperationException)) {
											$asm02.MS.Internal.XcpImports.DrmLicenseAcquirer_Abort(zero.value);
											__label1__ = "IL_6A";
											continue __step1__;
										} else {
											throw $exception;
										}
									}
								}
								$asm02.MS.Internal.XcpImports.DrmLicenseAcquirer_Abort(zero.value);
								__label1__ = "IL_6A";
								continue __step1__;
								break;
							case "IL_6A":
								break __step1__;
						}
					}
				} finally {
					System.Threading.Monitor.Exit(lock);
				}
				break __step0__;
		}
	}
};
System.Windows.Media.LicenseAcquirer.prototype._ctor = function () {
	this._lock = new System.Object();
	this.m_eBindState = $asm02.System.Windows.Media.BindState.Unbound;
	System.Object.prototype._ctor.call(this);
};
System.Windows.Media.LicenseAcquirer.prototype.OnCancel = function () {
};
System.Windows.Media.LicenseAcquirer.prototype.OnAcquireLicense = function (licenseChallenge, licenseServerUri) {
	var lock = null;
	var zero = new JSIL.Variable(System.IntPtr.Zero);
	var urlOverride = null;
	if (licenseChallenge === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["licenseChallenge"]);
	}
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
		this._EnsureNativePeer(/* ref */ zero);
		if (!(!System.Uri.op_Inequality(null, this.m_uriOverride) || this.m_fRedirected)) {
			urlOverride = this.m_uriOverride.toString();
		} else if (System.Uri.op_Inequality(null, licenseServerUri)) {
			urlOverride = licenseServerUri.toString();
		}
		this.m_fWaitingForManualResponse = false;
		$asm02.MS.Internal.XcpImports.DrmLicenseAcquirer_AcquireAsync(zero.value, licenseChallenge, urlOverride);
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
};
System.Windows.Media.LicenseAcquirer.prototype.SetLicenseResponse = function (licenseResponse) {
	var lock = null;
	var zero = new JSIL.Variable(System.IntPtr.Zero);
	if (licenseResponse === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["licenseResponse"]);
	}
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
		this._EnsureNativePeer(/* ref */ zero);
		if (!this.m_fWaitingForManualResponse) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("DRMNotWaitingForResponse")]);
		}
		if (!this.m_fLAInProgress) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("LicenseAcquirer_NoLAInProgress")]);
		}
		$asm02.MS.Internal.XcpImports.DrmLicenseAcquirer_SetLicenseResponse(zero.value, licenseResponse);
		this.m_fWaitingForManualResponse = false;
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
};
System.Windows.Media.LicenseAcquirer.prototype._AcquireLicenseAsync = function (f_mediaStream, f_rgbMediaHeader, /* ref */ f_guidKID, f_eKeyType, /* ref */ f_guidServiceID, f_eBindState) {
	var lock = null, lock2 = null;
	var zero = new JSIL.Variable(System.IntPtr.Zero);
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
		this._CheckSetBindingState(f_eBindState);
		this.m_fLAInProgress = true;
		var strChallengeCustomData = this.m_strChallengeCustomData;
		try {
			this._EnsureNativePeer(/* ref */ zero);
			if (f_mediaStream !== null) {
				$asm02.MS.Internal.XcpImports.DrmLicenseAcquirer_GenerateChallengeByHeaderAsync(zero.value, f_mediaStream, strChallengeCustomData);
			} else if (f_rgbMediaHeader !== null) {
				$asm02.MS.Internal.XcpImports.DrmLicenseAcquirer_GenerateChallengeByHeaderBytesAsync(zero.value, f_rgbMediaHeader, strChallengeCustomData);
			} else {
				$asm02.MS.Internal.XcpImports.DrmLicenseAcquirer_GenerateChallengeByHeaderComponentsAsync(
					zero.value, 
					/* ref */ f_guidKID, 
					Math.floor(f_eKeyType), 
					/* ref */ f_guidServiceID, 
					strChallengeCustomData
				);
			}
		} catch ($exception) {
			System.Threading.Monitor.Enter((lock2 = this._lock));
			try {
				this.m_fLAInProgress = false;
			} finally {
				System.Threading.Monitor.Exit(lock2);
			}
			throw $exception;
		}
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
};
System.Windows.Media.LicenseAcquirer.prototype._AcquireLicenseAsyncMediaElement = function (mediaHeader) {
	var empty = new JSIL.Variable(System.Guid.Empty.MemberwiseClone());
	this._AcquireLicenseAsync(
		null, 
		mediaHeader, 
		/* ref */ empty, 
		System.Windows.Media.ContentKeyType.Aes128Bit, 
		/* ref */ empty, 
		$asm02.System.Windows.Media.BindState.Bound
	);
};
System.Windows.Media.LicenseAcquirer.prototype._CheckSetBindingState = function (f_eNewBindState) {
	var lock = null;
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
		if (this.m_fLAInProgress) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("LicenseAcquirer_LAInProgress")]);
		}
		if (this.m_eBindState === $asm02.System.Windows.Media.BindState.Unbound) {
			this.m_eBindState = f_eNewBindState;
		} else if (this.m_eBindState === 0) {
			if (JSIL.Cast(f_eNewBindState, System.Boolean)) {
				throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("LicenseAcquirer_AlreadyBound")]);
			}
		} else if ($asm02.System.Windows.Media.BindState.CannotBind !== f_eNewBindState) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("LicenseAcquirer_CannotBind")]);
		}
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
};
System.Windows.Media.LicenseAcquirer.prototype._EnsureNativePeer = function (/* ref */ nativePeer) {
	var lock = null, lock2 = null;
	var managedNativePeerPair = null;
	var zero = new JSIL.Variable(System.IntPtr.Zero);
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
		managedNativePeerPair = this.m_wrapper;
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
	if (managedNativePeerPair === null) {
		$asm02.MS.Internal.XcpImports.DrmLicenseAcquirer_CreateNativePeer(/* ref */ zero);
		managedNativePeerPair = new $asm02.System.Windows.Media.ManagedNativePeerPair(this, zero.value);
	}
	System.Threading.Monitor.Enter((lock2 = this._lock));
	try {
		if (this.m_wrapper === null) {
			this.m_wrapper = managedNativePeerPair;
		}
		nativePeer.value = this.m_wrapper.NativeObject;
	} finally {
		System.Threading.Monitor.Exit(lock2);
	}
};
System.Windows.Media.LicenseAcquirer.prototype._HandleDomainJoinRequired = function (f_strServerUriString, f_guidServiceID, f_guidAccountID, f_strCustomData) {
	var lock = null;
	if (System.Guid.op_Equality(System.Guid.Empty.MemberwiseClone(), f_guidServiceID.MemberwiseClone())) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["f_guidServiceID"]);
	}
	if (f_strServerUriString === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["f_strServerUriString"]);
	}
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
		if (this.m_fDJInProgress) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
		}
		try {
			this.m_fDJInProgress = true;
			var domainAcquirer = this.DomainAcquirer;
			if (domainAcquirer === null) {
				throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
			}
			if (this._joinDomainCompleteHandler === null) {
				this._joinDomainCompleteHandler = JSIL.Delegate.New("System.EventHandler`1[System.Windows.Media.JoinDomainCompletedEventArgs]", this, System.Windows.Media.LicenseAcquirer.prototype._OnDomainJoinCompleted);
			}
			domainAcquirer.remove__LAJoinDomainCompleted(this._joinDomainCompleteHandler);
			domainAcquirer.add__LAJoinDomainCompleted(this._joinDomainCompleteHandler);
			var f_UriDomainServer = JSIL.New(System.Uri, "_ctor$1", [f_strServerUriString, System.UriKind.Absolute]);
			domainAcquirer._JoinDomainAsyncFromLA(f_strCustomData, f_guidServiceID.MemberwiseClone(), f_guidAccountID, f_UriDomainServer);
		} catch ($exception) {
			this.m_fDJInProgress = false;
			throw $exception;
		}
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
};
System.Windows.Media.LicenseAcquirer.prototype._HandleComplete = function (f_hrResult, f_strResponseCustomData, f_pEnumerator) {
	var __label0__ = null;
__step0__: 
	while (true) {
		switch (__label0__) {
			case null:
				var lock = null, lock2 = null;
				__label0__ = "__entry0__";
				continue __step0__;
				break;
			case "__entry0__":
				var cancelled = false;
				var error = null;
				System.Threading.Monitor.Enter((lock = this._lock));
				try {
					this.m_fDJInProgress = false;
					this.m_fRedirected = false;
					this.m_fWaitingForManualResponse = false;
				} finally {
					System.Threading.Monitor.Exit(lock);
				}
				if (!$asm02.MS.Internal.Error.Succeeded(f_hrResult)) {
					if (-2147467260 === f_hrResult) {
						cancelled = true;
						try {
							this.OnCancel();
							__label0__ = "IL_55";
							continue __step0__;
						} catch ($exception) {
							__label0__ = "IL_55";
							continue __step0__;
						}
					}
					error = $asm02.System.Windows.Media.DrmException.CreateDrmException(f_hrResult);
				}
				__label0__ = "IL_55";
				continue __step0__;
				break;
			case "IL_55":
				var acquireLicenseCompleted = this.AcquireLicenseCompleted;
				if (acquireLicenseCompleted !== null) {
					var e = JSIL.New(System.Windows.Media.AcquireLicenseCompletedEventArgs, "_ctor$0", [f_strResponseCustomData, error, cancelled, null]);
					try {
						acquireLicenseCompleted(this, e);
					} catch ($exception) {
					}
				}
				var mEAcquireLicenseCompleted = this._MEAcquireLicenseCompleted;
				if (mEAcquireLicenseCompleted !== null) {
					var e2 = JSIL.New(System.Windows.Media.AcquireLicenseCompletedEventArgs, "_ctor$1", [f_pEnumerator, f_hrResult]);
					mEAcquireLicenseCompleted(this, e2);
				}
				System.Threading.Monitor.Enter((lock2 = this._lock));
				try {
					this.m_fLAInProgress = false;
				} finally {
					System.Threading.Monitor.Exit(lock2);
				}
				break __step0__;
		}
	}
};
System.Windows.Media.LicenseAcquirer.prototype._HandleChallengeGenerated = function (f_licenseChallenge, f_licenseServerUri, f_fRedirected) {
	var lock = null;
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
		if (f_fRedirected) {
			this.m_fRedirected = f_fRedirected;
		}
		this.m_fWaitingForManualResponse = true;
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
	this.OnAcquireLicense(f_licenseChallenge, f_licenseServerUri);
};
System.Windows.Media.LicenseAcquirer.prototype._OnDomainJoinCompleted = function (sender, e) {
	var lock = null, lock2 = null;
	var f_hrResult = 0;
	var zero = new JSIL.Variable(System.IntPtr.Zero);
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
		this.m_fDJInProgress = false;
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
	if (e.Cancelled) {
		f_hrResult = -2147467260;
	} else if (e.Error !== null) {
		if (JSIL.TryCast(e.Error, $asm02.System.Windows.Media.DrmException) !== null) {
			var drmException = JSIL.TryCast(e.Error, $asm02.System.Windows.Media.DrmException);
			f_hrResult = drmException.HRESULT;
		} else {
			f_hrResult = -2147418113;
		}
	}
	System.Threading.Monitor.Enter((lock2 = this._lock));
	try {
		this._EnsureNativePeer(/* ref */ zero);
		$asm02.MS.Internal.XcpImports.DrmLicenseAcquirer_DomainJoinComplete(zero.value, f_hrResult);
	} finally {
		System.Threading.Monitor.Exit(lock2);
	}
};
System.Windows.Media.LicenseAcquirer.prototype._MediaElementSetBindStatus = function (f_fIsBind) {
	var lock = null;
	System.Threading.Monitor.Enter((lock = this._lock));
	try {
		if (this.m_fLAInProgress) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("LicenseAcquirer_LAInProgress")]);
		}
		if (this.m_eBindState === $asm02.System.Windows.Media.BindState.CannotBind) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("LicenseAcquirer_CannotBind")]);
		}
		if (this.m_eBindState === 0) {
			if (f_fIsBind) {
				throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("LicenseAcquirer_AlreadyBound")]);
			}
			this._MEAcquireLicenseCompleted = null;
		} else {
			if (!f_fIsBind) {
				throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("LicenseAcquirer_AlreadyUnbound")]);
			}
			this.m_eBindState = $asm02.System.Windows.Media.BindState.Bound;
		}
	} finally {
		System.Threading.Monitor.Exit(lock);
	}
};
System.Windows.Media.LicenseAcquirer._AbortComplete = function (f_pNativeTarget) {
	var result = 0;
	try {
		var managedNativePeerPair = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(f_pNativeTarget), $asm02.System.Windows.Media.ManagedNativePeerPair);
		var licenseAcquirer = JSIL.TryCast(managedNativePeerPair.ManagedPeer, System.Windows.Media.LicenseAcquirer);
		licenseAcquirer._HandleComplete(-2147467260, null, System.IntPtr.Zero);
	} catch ($exception) {
		var arg_31_0 = $exception;
		try {
			result = $asm02.MS.Internal.Error.GetXresultForException(arg_31_0);
		} catch ($exception) {
			result = -2146492416;
		}
	}
	return result;
};
System.Windows.Media.LicenseAcquirer._DomainJoinRequired = function (f_pNativeTarget, f_strURL, /* ref */ f_guidAccountID, /* ref */ f_guidServiceID, f_strCustomData) {
	var result = 0;
	var arg_0B_0 = System.Guid.Empty.MemberwiseClone();
	try {
		if (f_strURL === null) {
			throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["f_strURL"]);
		}
		if (System.Guid.op_Equality(System.Guid.Empty.MemberwiseClone(), f_guidServiceID.value.MemberwiseClone())) {
			throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["f_guidServiceID"]);
		}
		var managedNativePeerPair = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(f_pNativeTarget), $asm02.System.Windows.Media.ManagedNativePeerPair);
		var licenseAcquirer = JSIL.TryCast(managedNativePeerPair.ManagedPeer, System.Windows.Media.LicenseAcquirer);
		licenseAcquirer._HandleDomainJoinRequired(f_strURL, f_guidServiceID.value.MemberwiseClone(), f_guidAccountID.value.MemberwiseClone(), f_strCustomData);
	} catch ($exception) {
		var arg_66_0 = $exception;
		try {
			result = $asm02.MS.Internal.Error.GetXresultForException(arg_66_0);
		} catch ($exception) {
			result = -2146492416;
		}
	}
	return result;
};
System.Windows.Media.LicenseAcquirer._Complete = function (f_pNativeTarget, f_strCustomData, f_hrResult, f_pEnumerator) {
	var result = 0;
	try {
		var managedNativePeerPair = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(f_pNativeTarget), $asm02.System.Windows.Media.ManagedNativePeerPair);
		var licenseAcquirer = JSIL.TryCast(managedNativePeerPair.ManagedPeer, System.Windows.Media.LicenseAcquirer);
		licenseAcquirer._HandleComplete(f_hrResult, f_strCustomData, f_pEnumerator);
	} catch ($exception) {
		var arg_29_0 = $exception;
		try {
			result = $asm02.MS.Internal.Error.GetXresultForException(arg_29_0);
		} catch ($exception) {
			result = -2146492416;
		}
	}
	return result;
};
System.Windows.Media.LicenseAcquirer._ChallengeGenerated = function (f_pNativeTarget, f_pChallenge, f_cbChallenge, f_strURL, f_fRedirected) {
	var result = 0;
	var f_licenseServerUri = null;
	try {
		if (!((f_cbChallenge <= 2147483647) && 
				(f_cbChallenge !== 0) && !System.IntPtr.op_Equality(System.IntPtr.Zero, f_pChallenge))) {
			result = -2147024809;
		} else {
			var f_licenseChallenge = new $asm02.MS.Internal.InternalMemoryStream(f_pChallenge, f_cbChallenge, null);
			$asm02.MS.Internal.XcpImports.AddRefNativeObject$1(f_pChallenge);
			if (f_strURL !== null) {
				f_licenseServerUri = JSIL.New(System.Uri, "_ctor$1", [f_strURL, System.UriKind.Absolute]);
			}
			var managedNativePeerPair = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(f_pNativeTarget), $asm02.System.Windows.Media.ManagedNativePeerPair);
			var licenseAcquirer = JSIL.TryCast(managedNativePeerPair.ManagedPeer, System.Windows.Media.LicenseAcquirer);
			licenseAcquirer._HandleChallengeGenerated(f_licenseChallenge, f_licenseServerUri, f_fRedirected);
		}
	} catch ($exception) {
		var arg_6B_0 = $exception;
		try {
			result = $asm02.MS.Internal.Error.GetXresultForException(arg_6B_0);
		} catch ($exception) {
			result = -2146492416;
		}
	}
	return result;
};
JSIL.OverloadedMethod(System.Windows.Media.LicenseAcquirer.prototype, "AcquireLicenseAsync", [
		["AcquireLicenseAsync$0", [System.Guid, System.Windows.Media.ContentKeyType, System.Guid]], 
		["AcquireLicenseAsync$1", [System.IO.Stream]], 
		["AcquireLicenseAsync$2", [System.Array.Of(System.Byte)]]
	]);
JSIL.MakeProperty(System.Windows.Media.LicenseAcquirer.prototype, "ChallengeCustomData", 
	System.Windows.Media.LicenseAcquirer.prototype.get_ChallengeCustomData, System.Windows.Media.LicenseAcquirer.prototype.set_ChallengeCustomData);
JSIL.MakeProperty(System.Windows.Media.LicenseAcquirer.prototype, "DomainAcquirer", 
	System.Windows.Media.LicenseAcquirer.prototype.get_DomainAcquirer, System.Windows.Media.LicenseAcquirer.prototype.set_DomainAcquirer);
JSIL.MakeProperty(System.Windows.Media.LicenseAcquirer.prototype, "LicenseServerUriOverride", 
	System.Windows.Media.LicenseAcquirer.prototype.get_LicenseServerUriOverride, System.Windows.Media.LicenseAcquirer.prototype.set_LicenseServerUriOverride);
System.Windows.Media.LicenseAcquirer.prototype.AcquireLicenseCompleted = null;
System.Windows.Media.LicenseAcquirer.prototype._MEAcquireLicenseCompleted = null;
System.Windows.Media.LicenseAcquirer.prototype._lock = null;
System.Windows.Media.LicenseAcquirer.prototype._joinDomainCompleteHandler = null;
System.Windows.Media.LicenseAcquirer.prototype.m_eBindState = 0;
System.Windows.Media.LicenseAcquirer.prototype.m_wrapper = null;
System.Windows.Media.LicenseAcquirer.prototype.m_DomainAcquirer = null;
System.Windows.Media.LicenseAcquirer.prototype.m_strChallengeCustomData = null;
System.Windows.Media.LicenseAcquirer.prototype.m_fWaitingForManualResponse = false;
System.Windows.Media.LicenseAcquirer.prototype.m_fLAInProgress = false;
System.Windows.Media.LicenseAcquirer.prototype.m_fDJInProgress = false;
System.Windows.Media.LicenseAcquirer.prototype.m_fRedirected = false;
System.Windows.Media.LicenseAcquirer.prototype.m_uriOverride = null;

$asm02.System.Windows.Media.LicenseEnumerator.prototype._ctor = function () {
	this.m_LicList = new (System.Collections.Generic.List$b1.Of(System.Windows.Media.MediaLicense)) ();
	System.Object.prototype._ctor.call(this);
	this.m_index = -1;
};
$asm02.System.Windows.Media.LicenseEnumerator.prototype.Dispose = function () {
};
$asm02.System.Windows.Media.LicenseEnumerator.prototype.MoveNext = function () {
	if (!((this.m_wrapper === null) || ((this.m_index >= 0) && 
				!$asm02.MS.Internal.XcpImports.DrmLicenseEnumerator_MoveNext(this.m_wrapper)))) {
		++this.m_index;
		if (this.m_LicList.Count === this.m_index) {
			this.m_LicList.Insert(this.m_LicList.Count, null);
		}
		return true;
	}
	return false;
};
$asm02.System.Windows.Media.LicenseEnumerator.prototype.Reset = function () {
	if (this.m_wrapper !== null) {
		$asm02.MS.Internal.XcpImports.DrmLicenseEnumerator_Reset(this.m_wrapper);
	}
	this.m_index = -1;
};
$asm02.System.Windows.Media.LicenseEnumerator.prototype.GetCurrent = function () {
	var zero = new JSIL.Variable(System.IntPtr.Zero);
	var flag = false;
	if (this.m_index < 0) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("LicenseEnumerator_PositionBeforeStart")]);
	}
	if (this.m_index >= this.m_LicList.Count) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("LicenseEnumerator_PositionAfterEnd")]);
	}
	if (this.m_LicList.get_Item(this.m_index) === null) {
		try {
			$asm02.MS.Internal.XcpImports.DrmLicenseEnumerator_GetCurrent(this.m_wrapper, /* ref */ zero);
			flag = true;
			this.m_LicList.set_Item(this.m_index, System.Windows.Media.MediaLicense.CreateInstance(zero.value));
		} catch ($exception) {
			if (flag) {
				$asm02.MS.Internal.XcpImports.DrmReleaseLicenseWrapper(zero.value);
			}
			throw $exception;
		}
	}
	return this.m_LicList.get_Item(this.m_index);
};
$asm02.System.Windows.Media.LicenseEnumerator.prototype.get_Current = function () {
	return this.GetCurrent();
};
$asm02.System.Windows.Media.LicenseEnumerator.prototype.IEnumerator_get_Current = function () {
	return this.GetCurrent();
};
$asm02.System.Windows.Media.LicenseEnumerator.CreateInstance$0 = function (kid) {
	var licenseEnumerator = new $asm02.System.Windows.Media.LicenseEnumerator();
	var zero = new JSIL.Variable(System.IntPtr.Zero);
	$asm02.MS.Internal.XcpImports.DrmLicenseEnumerator_CreateNative$0(kid, /* ref */ zero);
	if (System.IntPtr.op_Inequality(zero.value, System.IntPtr.Zero)) {
		licenseEnumerator.m_wrapper = new $asm02.System.Windows.Media.ManagedNativePeerPair(licenseEnumerator, zero.value);
		return licenseEnumerator;
	}
	licenseEnumerator.m_wrapper = null;
	return licenseEnumerator;
};
$asm02.System.Windows.Media.LicenseEnumerator.CreateInstance$1 = function (mediaStream) {
	var licenseEnumerator = new $asm02.System.Windows.Media.LicenseEnumerator();
	var zero = new JSIL.Variable(System.IntPtr.Zero);
	$asm02.MS.Internal.XcpImports.DrmLicenseEnumerator_CreateNative$1(mediaStream, /* ref */ zero);
	if (System.IntPtr.op_Inequality(zero.value, System.IntPtr.Zero)) {
		licenseEnumerator.m_wrapper = new $asm02.System.Windows.Media.ManagedNativePeerPair(licenseEnumerator, zero.value);
		return licenseEnumerator;
	}
	licenseEnumerator.m_wrapper = null;
	return licenseEnumerator;
};
JSIL.OverloadedMethod($asm02.System.Windows.Media.LicenseEnumerator, "CreateInstance", [
		["CreateInstance$0", [System.Guid]], 
		["CreateInstance$1", [System.IO.Stream]]
	]);
JSIL.MakeProperty($asm02.System.Windows.Media.LicenseEnumerator.prototype, "Current", 
	$asm02.System.Windows.Media.LicenseEnumerator.prototype.get_Current, null);
JSIL.MakeProperty($asm02.System.Windows.Media.LicenseEnumerator.prototype, "IEnumerator_Current", 
	$asm02.System.Windows.Media.LicenseEnumerator.prototype.IEnumerator_get_Current, null);
$asm02.System.Windows.Media.LicenseEnumerator.prototype.m_wrapper = null;
$asm02.System.Windows.Media.LicenseEnumerator.prototype.m_LicList = null;
$asm02.System.Windows.Media.LicenseEnumerator.prototype.m_index = 0;

$asm02.System.Windows.Media.LicenseEnumerable.prototype._ctor$0 = function () {
	System.Object.prototype._ctor.call(this);
	throw JSIL.New(System.NotImplementedException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("LicenseEnumerator_UseOverloadIEnumeratorInstead")]);
};
$asm02.System.Windows.Media.LicenseEnumerable.prototype._ctor$1 = function (enumerator) {
	System.Object.prototype._ctor.call(this);
	this.m_enumerator = enumerator;
};
$asm02.System.Windows.Media.LicenseEnumerable.prototype.GetEnumerator = function () {
	return this.m_enumerator;
};
$asm02.System.Windows.Media.LicenseEnumerable.prototype.IEnumerable_GetEnumerator = function () {
	return this.m_enumerator;
};
$asm02.System.Windows.Media.LicenseEnumerable.CreateInstance$0 = function (kid) {
	var enumerator = $asm02.System.Windows.Media.LicenseEnumerator.CreateInstance$0(kid);
	return JSIL.New($asm02.System.Windows.Media.LicenseEnumerable, "_ctor$1", [enumerator]);
};
$asm02.System.Windows.Media.LicenseEnumerable.CreateInstance$1 = function (mediaStream) {
	var enumerator = $asm02.System.Windows.Media.LicenseEnumerator.CreateInstance$1(mediaStream);
	return JSIL.New($asm02.System.Windows.Media.LicenseEnumerable, "_ctor$1", [enumerator]);
};
JSIL.OverloadedMethod($asm02.System.Windows.Media.LicenseEnumerable.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Collections.Generic.IEnumerator$b1.Of(System.Windows.Media.MediaLicense)]]
	]);
JSIL.OverloadedMethod($asm02.System.Windows.Media.LicenseEnumerable, "CreateInstance", [
		["CreateInstance$0", [System.Guid]], 
		["CreateInstance$1", [System.IO.Stream]]
	]);
$asm02.System.Windows.Media.LicenseEnumerable.prototype.m_enumerator = null;

System.Windows.Media.LicenseManagement.SelectLicenses$0 = function (keyId) {
	if (!System.Windows.Application.Current.HasElevatedPermissions) {
		throw JSIL.New(System.Security.SecurityException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("LicenseManagement_AccessNotAllowed")]);
	}
	return System.Windows.Media.LicenseManagement.SelectLicensesInternal$0(keyId);
};
System.Windows.Media.LicenseManagement.SelectLicenses$1 = function (mediaStream) {
	if (!System.Windows.Application.Current.HasElevatedPermissions) {
		throw JSIL.New(System.Security.SecurityException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("LicenseManagement_AccessNotAllowed")]);
	}
	return System.Windows.Media.LicenseManagement.SelectLicensesInternal$1(mediaStream);
};
System.Windows.Media.LicenseManagement.SelectLicensesInternal$0 = function (keyId) {
	if (System.Guid.op_Equality(keyId.MemberwiseClone(), System.Guid.Empty.MemberwiseClone())) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", ["keyId"]);
	}
	return $asm02.System.Windows.Media.LicenseEnumerable.CreateInstance$0(keyId.MemberwiseClone());
};
System.Windows.Media.LicenseManagement.SelectLicensesInternal$1 = function (mediaStream) {
	if (!((mediaStream !== null) && (mediaStream.Length !== 0))) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", ["mediaStream"]);
	}
	return $asm02.System.Windows.Media.LicenseEnumerable.CreateInstance$1(mediaStream);
};
System.Windows.Media.LicenseManagement.get_VideoOutputConnectors = function () {
	return new (System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(System.Windows.Media.VideoOutputConnector)) ($asm02.MS.Internal.XcpImports.GetAvailableVideoConnectors());
};
JSIL.OverloadedMethod(System.Windows.Media.LicenseManagement, "SelectLicenses", [
		["SelectLicenses$0", [System.Guid]], 
		["SelectLicenses$1", [System.IO.Stream]]
	]);
JSIL.OverloadedMethod(System.Windows.Media.LicenseManagement, "SelectLicensesInternal", [
		["SelectLicensesInternal$0", [System.Guid]], 
		["SelectLicensesInternal$1", [System.IO.Stream]]
	]);
JSIL.MakeProperty(System.Windows.Media.LicenseManagement, "VideoOutputConnectors", 
	System.Windows.Media.LicenseManagement.get_VideoOutputConnectors, null);

System.Windows.Media.VideoOutputConnector.prototype._ctor = function (bCanEnableHDCP, bCanEnableCGMSA, eType) {
	System.Object.prototype._ctor.call(this);
	this.m_eType = eType;
	this.m_bCanEnableHDCP = bCanEnableHDCP;
	this.m_bCanEnableCGMSA = bCanEnableCGMSA;
};
System.Windows.Media.VideoOutputConnector.prototype.get_CanEnableHdcp = function () {
	return this.m_bCanEnableHDCP;
};
System.Windows.Media.VideoOutputConnector.prototype.get_CanEnableCgmsa = function () {
	return this.m_bCanEnableCGMSA;
};
System.Windows.Media.VideoOutputConnector.prototype.get_ConnectorType = function () {
	return this.m_eType;
};
JSIL.MakeProperty(System.Windows.Media.VideoOutputConnector.prototype, "CanEnableHdcp", 
	System.Windows.Media.VideoOutputConnector.prototype.get_CanEnableHdcp, null);
JSIL.MakeProperty(System.Windows.Media.VideoOutputConnector.prototype, "CanEnableCgmsa", 
	System.Windows.Media.VideoOutputConnector.prototype.get_CanEnableCgmsa, null);
JSIL.MakeProperty(System.Windows.Media.VideoOutputConnector.prototype, "ConnectorType", 
	System.Windows.Media.VideoOutputConnector.prototype.get_ConnectorType, null);
System.Windows.Media.VideoOutputConnector.prototype.m_eType = 0;
System.Windows.Media.VideoOutputConnector.prototype.m_bCanEnableHDCP = false;
System.Windows.Media.VideoOutputConnector.prototype.m_bCanEnableCGMSA = false;

$asm02.System.Windows.Media.ManagedNativePeerPair.prototype._ctor = function (managedPeer, nativePeerPtr) {
	System.Object.prototype._ctor.call(this);
	this.m_managedPeer = managedPeer;
	this.m_nativePeerHandle = new $asm02.MS.Internal.NativeObjectSafeHandle();
	this.m_nativePeerHandle.NativeObject = nativePeerPtr;
	;
	;
};
$asm02.System.Windows.Media.ManagedNativePeerPair.prototype.get_ManagedPeer = function () {
	return this.m_managedPeer;
};
$asm02.System.Windows.Media.ManagedNativePeerPair.prototype.IManagedPeerBase_get_NativeObject = function () {
	return this.m_nativePeerHandle.NativeObject;
};
$asm02.System.Windows.Media.ManagedNativePeerPair.prototype.get_NativeObject = function () {
	return this.IManagedPeerBase_NativeObject;
};
$asm02.System.Windows.Media.ManagedNativePeerPair.prototype.IManagedPeer_BeginShutdown = function () {
	System.GC.SuppressFinalize(this.m_nativePeerHandle);
	$asm02.MS.Internal.XcpImports.DisconnectManagedPeer(this);
};
$asm02.System.Windows.Media.ManagedNativePeerPair.prototype.IManagedPeer_EndShutdown = function () {
	$asm02.MS.Internal.XcpImports.ReleaseNativeValue(this.IManagedPeerBase_NativeObject, 18);
	System.GC.KeepAlive(this);
	this.m_nativePeerHandle = null;
};
$asm02.System.Windows.Media.ManagedNativePeerPair.prototype.IManagedPeer_RemovePeerReferenceToItem = function (child) {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm02.System.Windows.Media.ManagedNativePeerPair.prototype.IManagedPeer_AddPeerReferenceToItem = function (child) {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm02.System.Windows.Media.ManagedNativePeerPair.prototype.IManagedPeer_GetInstanceEventDelegate = function (eventName) {
	throw JSIL.New(System.NotImplementedException, "_ctor$0", []);
};
JSIL.MakeProperty($asm02.System.Windows.Media.ManagedNativePeerPair.prototype, "ManagedPeer", 
	$asm02.System.Windows.Media.ManagedNativePeerPair.prototype.get_ManagedPeer, null);
JSIL.MakeProperty($asm02.System.Windows.Media.ManagedNativePeerPair.prototype, "IManagedPeerBase_NativeObject", 
	$asm02.System.Windows.Media.ManagedNativePeerPair.prototype.IManagedPeerBase_get_NativeObject, null);
JSIL.MakeProperty($asm02.System.Windows.Media.ManagedNativePeerPair.prototype, "NativeObject", 
	$asm02.System.Windows.Media.ManagedNativePeerPair.prototype.get_NativeObject, null);
$asm02.System.Windows.Media.ManagedNativePeerPair.prototype.m_managedPeer = null;
$asm02.System.Windows.Media.ManagedNativePeerPair.prototype.m_nativePeerHandle = null;

$asm02.System.Windows.Messaging.LocalMessageValidationHelper.ValidateReceiverName = function (receiverName, paramName) {
	$asm02.System.Windows.Messaging.LocalMessageValidationHelper.ValidateStringLength(receiverName, paramName, false, 256);
};
$asm02.System.Windows.Messaging.LocalMessageValidationHelper.ValidateMessage = function (message, paramName, allowNull) {
	$asm02.System.Windows.Messaging.LocalMessageValidationHelper.ValidateStringLength(message, paramName, allowNull, 40960);
};
$asm02.System.Windows.Messaging.LocalMessageValidationHelper.ValidateDomainName = function (domainName, paramName) {
	$asm02.System.Windows.Messaging.LocalMessageValidationHelper.ValidateStringLength(domainName, paramName, false, 256);
	if (domainName.Contains(",")) {
		throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm02.System.Windows.Resx.GetString$2("LocalMessage_InvalidDomainCharacters"), paramName]);
	}
	if (domainName.Contains(":")) {
		throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm02.System.Windows.Resx.GetString$2("LocalMessage_InvalidDomainCharacters"), paramName]);
	}
};
$asm02.System.Windows.Messaging.LocalMessageValidationHelper.ValidateStringLength = function (value, paramName, allowNull, maxLength) {
	if (value === null) {
		if (!allowNull) {
			throw JSIL.New(System.ArgumentNullException, "_ctor$1", [paramName]);
		}
		return;
	} else {
		if (value.length > maxLength) {
			throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm02.System.Windows.Resx.GetString$2("LocalMessage_InvalidMessageLength"), paramName]);
		}
		return;
	}
};
$asm02.System.Windows.Messaging.LocalMessageValidationHelper.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
Object.defineProperty($asm02.System.Windows.Messaging.LocalMessageValidationHelper, "MAX_DOMAIN_NAME_LENGTH", {
		"value": 256}
);
Object.defineProperty($asm02.System.Windows.Messaging.LocalMessageValidationHelper, "MAX_RECEIVER_NAME_LENGTH", {
		"value": 256}
);
Object.defineProperty($asm02.System.Windows.Messaging.LocalMessageValidationHelper, "MAX_MESSAGE_LENGTH", {
		"value": 40960}
);

$asm02.System.Windows.Messaging.LocalMessagePeerHelper.prototype._ctor = function (managedPeer, nativePeerPtr) {
	System.Object.prototype._ctor.call(this);
	this.m_managedPeer = managedPeer;
	this.m_nativePeerHandle = new $asm02.MS.Internal.NativeObjectSafeHandle();
	this.m_nativePeerHandle.NativeObject = nativePeerPtr;
	;
	;
};
$asm02.System.Windows.Messaging.LocalMessagePeerHelper.prototype.get_ManagedPeer = function () {
	return this.m_managedPeer;
};
$asm02.System.Windows.Messaging.LocalMessagePeerHelper.prototype.get_NativeObject = function () {
	return this.m_nativePeerHandle.NativeObject;
};
$asm02.System.Windows.Messaging.LocalMessagePeerHelper.prototype.IManagedPeer_BeginShutdown = function () {
	System.GC.SuppressFinalize(this.m_nativePeerHandle);
	$asm02.MS.Internal.XcpImports.DisconnectManagedPeer(this);
};
$asm02.System.Windows.Messaging.LocalMessagePeerHelper.prototype.IManagedPeer_EndShutdown = function () {
	$asm02.MS.Internal.XcpImports.ReleaseNativeValue(this.NativeObject, 18);
	System.GC.KeepAlive(this);
	this.m_nativePeerHandle = null;
};
$asm02.System.Windows.Messaging.LocalMessagePeerHelper.prototype.IManagedPeer_RemovePeerReferenceToItem = function (child) {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm02.System.Windows.Messaging.LocalMessagePeerHelper.prototype.IManagedPeer_AddPeerReferenceToItem = function (child) {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm02.System.Windows.Messaging.LocalMessagePeerHelper.prototype.IManagedPeer_GetInstanceEventDelegate = function (eventName) {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
JSIL.MakeProperty($asm02.System.Windows.Messaging.LocalMessagePeerHelper.prototype, "ManagedPeer", 
	$asm02.System.Windows.Messaging.LocalMessagePeerHelper.prototype.get_ManagedPeer, null);
JSIL.MakeProperty($asm02.System.Windows.Messaging.LocalMessagePeerHelper.prototype, "NativeObject", 
	$asm02.System.Windows.Messaging.LocalMessagePeerHelper.prototype.get_NativeObject, null);
$asm02.System.Windows.Messaging.LocalMessagePeerHelper.prototype.m_managedPeer = null;
$asm02.System.Windows.Messaging.LocalMessagePeerHelper.prototype.m_nativePeerHandle = null;

System.Windows.Messaging.LocalMessageReceiver.prototype._ctor$0 = function (receiverName) {
	System.Object.prototype._ctor.call(this);
	$asm02.System.Windows.Messaging.LocalMessageValidationHelper.ValidateReceiverName(receiverName, "receiverName");
	this.m_receiverName = receiverName;
};
System.Windows.Messaging.LocalMessageReceiver.prototype._ctor$1 = function (receiverName, nameScope, allowedSenderDomains) {
	this._ctor$0(receiverName);
	if (allowedSenderDomains === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["allowedSenderDomains"]);
	}
	this.m_nameScope = nameScope;
	var list = new (System.Collections.Generic.List$b1.Of(System.String)) ();
	var enumerator = allowedSenderDomains.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current;
			$asm02.System.Windows.Messaging.LocalMessageValidationHelper.ValidateDomainName(current, null);
			list.ICollection$b1_Add(current);
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
	this.m_allowedSenderDomains = new (System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(System.String)) (list);
};
System.Windows.Messaging.LocalMessageReceiver.prototype.add_MessageReceived = function (value) {
	this.MessageReceived = System.Delegate.Combine(this.MessageReceived, value);
};
System.Windows.Messaging.LocalMessageReceiver.prototype.remove_MessageReceived = function (value) {
	this.MessageReceived = System.Delegate.Remove(this.MessageReceived, value);
};
System.Windows.Messaging.LocalMessageReceiver.prototype.get_ReceiverName = function () {
	return this.m_receiverName;
};
System.Windows.Messaging.LocalMessageReceiver.prototype.get_NameScope = function () {
	return this.m_nameScope;
};
System.Windows.Messaging.LocalMessageReceiver.prototype.get_AllowedSenderDomains = function () {
	return this.m_allowedSenderDomains;
};
System.Windows.Messaging.LocalMessageReceiver.prototype.get_DisableSenderTrustCheck = function () {
	return this.m_disableSenderTrustCheck;
};
System.Windows.Messaging.LocalMessageReceiver.prototype.set_DisableSenderTrustCheck = function (value) {
	this.ThrowIfDisposed();
	this.ThrowIfAlreadyReceiving();
	this.m_disableSenderTrustCheck = value;
};
System.Windows.Messaging.LocalMessageReceiver.prototype.Listen = function () {
	this.ThrowIfDisposed();
	this.ThrowIfAlreadyReceiving();
	if (this.m_messageReceivedDelegate === null) {
		this.m_messageReceivedDelegate = JSIL.Delegate.New("System.Windows.Messaging.MessageReceivedDelegate", this, System.Windows.Messaging.LocalMessageReceiver.prototype.MessageReceivedCallback);
	}
	this.CreatePeer();
	$asm02.MS.Internal.XcpImports.LocalMessageReceive(
		this.m_peerHelper, 
		this.m_receiverName, 
		this.m_nameScope, 
		this.m_allowedSenderDomains, 
		this.m_disableSenderTrustCheck
	);
	this.m_receiving = true;
};
System.Windows.Messaging.LocalMessageReceiver.prototype.Dispose = function () {
	if (this.m_receiving) {
		$asm02.MS.Internal.XcpImports.LocalMessageStopReceive(this.m_peerHelper);
		this.m_receiving = false;
	}
	this.m_disposed = true;
};
System.Windows.Messaging.LocalMessageReceiver.prototype.ThrowIfAlreadyReceiving = function () {
	if (this.m_receiving) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("LocalMessage_AlreadyReceiving")]);
	}
};
System.Windows.Messaging.LocalMessageReceiver.prototype.ThrowIfDisposed = function () {
	if (this.m_disposed) {
		throw JSIL.New(System.ObjectDisposedException, "_ctor$1", [JSIL.GetType(this).FullName]);
	}
};
System.Windows.Messaging.LocalMessageReceiver.prototype.CreatePeer = function () {
	var nativePeerPtr = new JSIL.Variable(0);
	if (this.m_peerHelper === null) {
		$asm02.MS.Internal.XcpImports.LocalMessageReceiverCreate(this.m_messageReceivedDelegate, /* ref */ nativePeerPtr);
		this.m_peerHelper = new $asm02.System.Windows.Messaging.LocalMessagePeerHelper(this, nativePeerPtr.value);
	}
};
System.Windows.Messaging.LocalMessageReceiver.prototype.OnMessageReceived = function (e) {
	var messageReceived = this.MessageReceived;
	if (messageReceived !== null) {
		messageReceived(this, e);
	}
	return (messageReceived !== null);
};
System.Windows.Messaging.LocalMessageReceiver.prototype.MessageReceivedCallback = function (message, senderDomain, receiverName, receiverNameScope, /* ref */ strResponse, /* ref */ cchResponse, /* ref */ bError) {
	var result = 0;
	strResponse.value = System.IntPtr.Zero;
	cchResponse.value = 0;
	bError.value = 0;
	try {
		var messageReceivedEventArgs = new System.Windows.Messaging.MessageReceivedEventArgs(message, senderDomain, receiverName, (receiverNameScope === 0) ? System.Windows.Messaging.ReceiverNameScope.Domain : System.Windows.Messaging.ReceiverNameScope.Global);
		try {
			if (!this.OnMessageReceived(messageReceivedEventArgs)) {
				bError.value = 1;
			}
		} catch ($exception) {
			var exception = $exception;
			if ($asm02.MS.Internal.Error.IsCriticalException(exception)) {
				throw $exception;
			}
			messageReceivedEventArgs.Response = null;
			bError.value = 1;
			result = $asm02.MS.Internal.Error.GetXresultForUserException(exception);
		}
		if (messageReceivedEventArgs.Response !== null) {
			strResponse.value = $asm02.MS.Internal.FrameworkCallbacks.MarshalStringToNative(messageReceivedEventArgs.Response);
			cchResponse.value = messageReceivedEventArgs.Response.length;
		}
	} catch ($exception) {
		var arg_7F_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForException(arg_7F_0);
	}
	return result;
};
JSIL.OverloadedMethod(System.Windows.Messaging.LocalMessageReceiver.prototype, "_ctor", [
		["_ctor$0", [System.String]], 
		["_ctor$1", [System.String, System.Windows.Messaging.ReceiverNameScope, System.Collections.Generic.IEnumerable$b1.Of(System.String)]]
	]);
JSIL.MakeProperty(System.Windows.Messaging.LocalMessageReceiver.prototype, "ReceiverName", 
	System.Windows.Messaging.LocalMessageReceiver.prototype.get_ReceiverName, null);
JSIL.MakeProperty(System.Windows.Messaging.LocalMessageReceiver.prototype, "NameScope", 
	System.Windows.Messaging.LocalMessageReceiver.prototype.get_NameScope, null);
JSIL.MakeProperty(System.Windows.Messaging.LocalMessageReceiver.prototype, "AllowedSenderDomains", 
	System.Windows.Messaging.LocalMessageReceiver.prototype.get_AllowedSenderDomains, null);
JSIL.MakeProperty(System.Windows.Messaging.LocalMessageReceiver.prototype, "DisableSenderTrustCheck", 
	System.Windows.Messaging.LocalMessageReceiver.prototype.get_DisableSenderTrustCheck, System.Windows.Messaging.LocalMessageReceiver.prototype.set_DisableSenderTrustCheck);
System.Windows.Messaging.LocalMessageReceiver.AnyDomain = null;
System.Windows.Messaging.LocalMessageReceiver.prototype.m_receiverName = null;
System.Windows.Messaging.LocalMessageReceiver.prototype.m_nameScope = 0;
System.Windows.Messaging.LocalMessageReceiver.prototype.m_allowedSenderDomains = null;
System.Windows.Messaging.LocalMessageReceiver.prototype.m_disableSenderTrustCheck = false;
System.Windows.Messaging.LocalMessageReceiver.prototype.m_receiving = false;
System.Windows.Messaging.LocalMessageReceiver.prototype.m_disposed = false;
System.Windows.Messaging.LocalMessageReceiver.prototype.m_messageReceivedDelegate = null;
System.Windows.Messaging.LocalMessageReceiver.prototype.m_peerHelper = null;
System.Windows.Messaging.LocalMessageReceiver.prototype.MessageReceived = null;
System.Windows.Messaging.LocalMessageReceiver._cctor = function () {
	System.Windows.Messaging.LocalMessageReceiver.AnyDomain = new (System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(System.String)) (new (System.Collections.Generic.List$b1.Of(System.String)) (JSIL.Array.New(System.String, ["*"])));
};

System.Windows.Messaging.MessageReceivedEventArgs.prototype._ctor = function (message, senderDomain, receiverName, nameScope) {
	System.EventArgs.prototype._ctor.call(this);
	this.m_message = message;
	this.m_senderDomain = senderDomain;
	this.m_receiverName = receiverName;
	this.m_nameScope = nameScope;
};
System.Windows.Messaging.MessageReceivedEventArgs.prototype.get_Message = function () {
	return this.m_message;
};
System.Windows.Messaging.MessageReceivedEventArgs.prototype.get_SenderDomain = function () {
	return this.m_senderDomain;
};
System.Windows.Messaging.MessageReceivedEventArgs.prototype.get_ReceiverName = function () {
	return this.m_receiverName;
};
System.Windows.Messaging.MessageReceivedEventArgs.prototype.get_NameScope = function () {
	return this.m_nameScope;
};
System.Windows.Messaging.MessageReceivedEventArgs.prototype.get_Response = function () {
	return this.m_response;
};
System.Windows.Messaging.MessageReceivedEventArgs.prototype.set_Response = function (value) {
	$asm02.System.Windows.Messaging.LocalMessageValidationHelper.ValidateMessage(value, "value", true);
	this.m_response = value;
};
JSIL.MakeProperty(System.Windows.Messaging.MessageReceivedEventArgs.prototype, "Message", 
	System.Windows.Messaging.MessageReceivedEventArgs.prototype.get_Message, null);
JSIL.MakeProperty(System.Windows.Messaging.MessageReceivedEventArgs.prototype, "SenderDomain", 
	System.Windows.Messaging.MessageReceivedEventArgs.prototype.get_SenderDomain, null);
JSIL.MakeProperty(System.Windows.Messaging.MessageReceivedEventArgs.prototype, "ReceiverName", 
	System.Windows.Messaging.MessageReceivedEventArgs.prototype.get_ReceiverName, null);
JSIL.MakeProperty(System.Windows.Messaging.MessageReceivedEventArgs.prototype, "NameScope", 
	System.Windows.Messaging.MessageReceivedEventArgs.prototype.get_NameScope, null);
JSIL.MakeProperty(System.Windows.Messaging.MessageReceivedEventArgs.prototype, "Response", 
	System.Windows.Messaging.MessageReceivedEventArgs.prototype.get_Response, System.Windows.Messaging.MessageReceivedEventArgs.prototype.set_Response);
System.Windows.Messaging.MessageReceivedEventArgs.prototype.m_message = null;
System.Windows.Messaging.MessageReceivedEventArgs.prototype.m_senderDomain = null;
System.Windows.Messaging.MessageReceivedEventArgs.prototype.m_receiverName = null;
System.Windows.Messaging.MessageReceivedEventArgs.prototype.m_nameScope = 0;
System.Windows.Messaging.MessageReceivedEventArgs.prototype.m_response = null;

System.Windows.Messaging.ListenFailedException.prototype._ctor = function (message) {
	System.Exception.prototype._ctor.call(this, message);
};

System.Windows.Messaging.LocalMessageSender.prototype._ctor$0 = function (receiverName) {
	this.m_userState = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.UInt32, System.Object), "_ctor$0", []);
	System.Object.prototype._ctor.call(this);
	$asm02.System.Windows.Messaging.LocalMessageValidationHelper.ValidateReceiverName(receiverName, "receiverName");
	this.m_receiverName = receiverName;
	this.m_sendCompletedDelegate = JSIL.Delegate.New("System.Windows.Messaging.SendCompletedDelegate", this, System.Windows.Messaging.LocalMessageSender.prototype.SendCompletedCallback);
};
System.Windows.Messaging.LocalMessageSender.prototype._ctor$1 = function (receiverName, receiverDomain) {
	this._ctor$0(receiverName);
	$asm02.System.Windows.Messaging.LocalMessageValidationHelper.ValidateDomainName(receiverDomain, "receiverDomain");
	this.m_receiverDomain = receiverDomain;
};
System.Windows.Messaging.LocalMessageSender.prototype.add_SendCompleted = function (value) {
	this.SendCompleted = System.Delegate.Combine(this.SendCompleted, value);
};
System.Windows.Messaging.LocalMessageSender.prototype.remove_SendCompleted = function (value) {
	this.SendCompleted = System.Delegate.Remove(this.SendCompleted, value);
};
System.Windows.Messaging.LocalMessageSender.prototype.get_ReceiverName = function () {
	return this.m_receiverName;
};
System.Windows.Messaging.LocalMessageSender.prototype.get_ReceiverDomain = function () {
	return this.m_receiverDomain;
};
System.Windows.Messaging.LocalMessageSender.prototype.SendAsync$0 = function (message) {
	this.SendAsync$1(message, null);
};
System.Windows.Messaging.LocalMessageSender.prototype.SendAsync$1 = function (message, userState) {
	$asm02.System.Windows.Messaging.LocalMessageValidationHelper.ValidateMessage(message, "message", false);
	this.CreatePeer();
	var num = ++this.m_nextKey;
	$asm02.MS.Internal.XcpImports.LocalMessageSend(
		this.m_peerHelper, 
		message, 
		this.m_receiverName, 
		this.m_receiverDomain, 
		num
	);
	this.m_userState.IDictionary$b2_set_Item(num, userState);
};
System.Windows.Messaging.LocalMessageSender.prototype.CreatePeer = function () {
	var nativePeerPtr = new JSIL.Variable(0);
	if (this.m_peerHelper === null) {
		$asm02.MS.Internal.XcpImports.LocalMessageSenderCreate(this.m_sendCompletedDelegate, /* ref */ nativePeerPtr);
		this.m_peerHelper = new $asm02.System.Windows.Messaging.LocalMessagePeerHelper(this, nativePeerPtr.value);
	}
};
System.Windows.Messaging.LocalMessageSender.prototype.OnSendCompleted = function (e) {
	var sendCompleted = this.SendCompleted;
	if (sendCompleted !== null) {
		sendCompleted(this, e);
	}
};
System.Windows.Messaging.LocalMessageSender.prototype.SendCompletedCallback = function (managedKey, message, receiverName, receiverDomain, response, bError) {
	var result = 0;
	try {
		if (!((receiverDomain === null) || (receiverDomain.length !== 0))) {
			receiverDomain = null;
		}
		var userState = null;
		if (this.m_userState.IDictionary$b2_ContainsKey(managedKey)) {
			userState = this.m_userState.IDictionary$b2_get_Item(managedKey);
			this.m_userState.IDictionary$b2_Remove(managedKey);
		}
		if (bError > 0) {
			var e = System.Windows.Messaging.SendCompletedEventArgs.ErrorArgs(
				new System.Windows.Messaging.SendFailedException($asm02.System.Windows.Resx.GetString$2("LocalMessage_CouldNotDeliverMessage")), 
				userState, 
				receiverName, 
				receiverDomain, 
				message
			);
		} else {
			e = System.Windows.Messaging.SendCompletedEventArgs.SuccessArgs(
				userState, 
				receiverName, 
				receiverDomain, 
				message, 
				response
			);
		}
		try {
			this.OnSendCompleted(e);
		} catch ($exception) {
			var exception = $exception;
			if ($asm02.MS.Internal.Error.IsCriticalException(exception)) {
				throw $exception;
			}
			result = $asm02.MS.Internal.Error.GetXresultForUserException(exception);
		}
	} catch ($exception) {
		var arg_89_0 = $exception;
		result = $asm02.MS.Internal.Error.GetXresultForException(arg_89_0);
	}
	return result;
};
JSIL.OverloadedMethod(System.Windows.Messaging.LocalMessageSender.prototype, "_ctor", [
		["_ctor$0", [System.String]], 
		["_ctor$1", [System.String, System.String]]
	]);
JSIL.OverloadedMethod(System.Windows.Messaging.LocalMessageSender.prototype, "SendAsync", [
		["SendAsync$0", [System.String]], 
		["SendAsync$1", [System.String, System.Object]]
	]);
JSIL.MakeProperty(System.Windows.Messaging.LocalMessageSender.prototype, "ReceiverName", 
	System.Windows.Messaging.LocalMessageSender.prototype.get_ReceiverName, null);
JSIL.MakeProperty(System.Windows.Messaging.LocalMessageSender.prototype, "ReceiverDomain", 
	System.Windows.Messaging.LocalMessageSender.prototype.get_ReceiverDomain, null);
Object.defineProperty(System.Windows.Messaging.LocalMessageSender, "Global", {
		"value": "*"}
);
System.Windows.Messaging.LocalMessageSender.prototype.m_userState = null;
System.Windows.Messaging.LocalMessageSender.prototype.m_receiverName = null;
System.Windows.Messaging.LocalMessageSender.prototype.m_receiverDomain = null;
System.Windows.Messaging.LocalMessageSender.prototype.m_sendCompletedDelegate = null;
System.Windows.Messaging.LocalMessageSender.prototype.m_nextKey = 0;
System.Windows.Messaging.LocalMessageSender.prototype.m_peerHelper = null;
System.Windows.Messaging.LocalMessageSender.prototype.SendCompleted = null;

System.Windows.Messaging.SendCompletedEventArgs.SuccessArgs = function (userState, receiverName, receiverDomain, message, response) {
	return new System.Windows.Messaging.SendCompletedEventArgs(null, false, userState, receiverName, receiverDomain, message, response);
};
System.Windows.Messaging.SendCompletedEventArgs.ErrorArgs = function (error, userState, receiverName, receiverDomain, message) {
	return new System.Windows.Messaging.SendCompletedEventArgs(error, false, userState, receiverName, receiverDomain, message, null);
};
System.Windows.Messaging.SendCompletedEventArgs.prototype._ctor = function (error, cancelled, userState, receiverName, receiverDomain, message, response) {
	System.ComponentModel.AsyncCompletedEventArgs.prototype._ctor.call(this, error, cancelled, userState);
	this.m_receiverName = receiverName;
	this.m_receiverDomain = receiverDomain;
	this.m_message = message;
	this.m_response = response;
};
System.Windows.Messaging.SendCompletedEventArgs.prototype.get_ReceiverName = function () {
	return this.m_receiverName;
};
System.Windows.Messaging.SendCompletedEventArgs.prototype.get_ReceiverDomain = function () {
	return this.m_receiverDomain;
};
System.Windows.Messaging.SendCompletedEventArgs.prototype.get_Message = function () {
	return this.m_message;
};
System.Windows.Messaging.SendCompletedEventArgs.prototype.get_Response = function () {
	System.ComponentModel.AsyncCompletedEventArgs.prototype.RaiseExceptionIfNecessary.call(this);
	return this.m_response;
};
JSIL.MakeProperty(System.Windows.Messaging.SendCompletedEventArgs.prototype, "ReceiverName", 
	System.Windows.Messaging.SendCompletedEventArgs.prototype.get_ReceiverName, null);
JSIL.MakeProperty(System.Windows.Messaging.SendCompletedEventArgs.prototype, "ReceiverDomain", 
	System.Windows.Messaging.SendCompletedEventArgs.prototype.get_ReceiverDomain, null);
JSIL.MakeProperty(System.Windows.Messaging.SendCompletedEventArgs.prototype, "Message", 
	System.Windows.Messaging.SendCompletedEventArgs.prototype.get_Message, null);
JSIL.MakeProperty(System.Windows.Messaging.SendCompletedEventArgs.prototype, "Response", 
	System.Windows.Messaging.SendCompletedEventArgs.prototype.get_Response, null);
System.Windows.Messaging.SendCompletedEventArgs.prototype.m_receiverName = null;
System.Windows.Messaging.SendCompletedEventArgs.prototype.m_receiverDomain = null;
System.Windows.Messaging.SendCompletedEventArgs.prototype.m_message = null;
System.Windows.Messaging.SendCompletedEventArgs.prototype.m_response = null;

System.Windows.Messaging.SendFailedException.prototype._ctor = function (message) {
	System.Exception.prototype._ctor.call(this, message);
};

System.Windows.Clipboard.ContainsText = function () {
	return $asm02.MS.Internal.XcpImports.Clipboard_ContainsText();
};
System.Windows.Clipboard.GetText = function () {
	return $asm02.MS.Internal.XcpImports.Clipboard_GetText();
};
System.Windows.Clipboard.SetText = function (text) {
	$asm02.MS.Internal.XcpImports.Clipboard_SetText(text);
};

System.Windows.Media.MultiScaleTileSource.GetTileLayerUrl = function (nativeTarget, tileLevel, tileX, tileY, uTileImageIndex, /* ref */ fullTileUri, /* ref */ fullTileUriLength) {
	fullTileUri.value = System.IntPtr.Zero;
	fullTileUriLength.value = 0;
	try {
		var multiScaleTileSource = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeTarget), System.Windows.Media.MultiScaleTileSource);
		if (multiScaleTileSource === null) {
			throw JSIL.New(System.ArgumentException, "_ctor$1", ["nativeTarget"]);
		}
		multiScaleTileSource.EnsureTileImageUrisAreCurrent(tileLevel, tileX, tileY);
		var uri = JSIL.TryCast(multiScaleTileSource._lastTileImageUris.get_Item(uTileImageIndex), System.Uri);
		if (System.Uri.op_Equality(uri, null)) {
			fullTileUri.value = System.IntPtr.Zero;
			fullTileUriLength.value = 0;
		} else {
			fullTileUri.value = $asm02.MS.Internal.FrameworkCallbacks.MarshalStringToNative(uri.AbsoluteUri);
			fullTileUriLength.value = uri.AbsoluteUri.length;
		}
	} catch ($exception) {
		var arg_83_0 = $exception;
		return $asm02.MS.Internal.Error.GetXresultForException(arg_83_0);
	}
	return 0;
};
System.Windows.Media.MultiScaleTileSource.GetTileLayerCount = function (nativeTarget, tileLevel, tileX, tileY, /* ref */ tileImageCount) {
	tileImageCount.value = 0;
	try {
		var multiScaleTileSource = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeTarget), System.Windows.Media.MultiScaleTileSource);
		if (multiScaleTileSource === null) {
			throw JSIL.New(System.ArgumentException, "_ctor$1", ["nativeTarget"]);
		}
		multiScaleTileSource.EnsureTileImageUrisAreCurrent(tileLevel, tileX, tileY);
		tileImageCount.value = multiScaleTileSource._lastTileImageUris.Count;
	} catch ($exception) {
		var arg_37_0 = $exception;
		return $asm02.MS.Internal.Error.GetXresultForException(arg_37_0);
	}
	return 0;
};
System.Windows.Media.MultiScaleTileSource.GetMSITileSourceInitParams = function (nativeTarget, /* ref */ imageWidth, /* ref */ imageHeight, /* ref */ tileWidth, /* ref */ tileHeight, /* ref */ tileOverlap) {
	imageWidth.value = (imageHeight.value = (tileWidth.value = (tileHeight.value = (tileOverlap.value = 0))));
	try {
		var multiScaleTileSource = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeTarget), System.Windows.Media.MultiScaleTileSource);
		if (multiScaleTileSource === null) {
			throw JSIL.New(System.ArgumentException, "_ctor$1", ["nativeTarget"]);
		}
		imageWidth.value = multiScaleTileSource._imageWidth;
		imageHeight.value = multiScaleTileSource._imageHeight;
		tileWidth.value = multiScaleTileSource._tileWidth;
		tileHeight.value = multiScaleTileSource._tileHeight;
		tileOverlap.value = multiScaleTileSource._tileOverlap;
	} catch ($exception) {
		var arg_65_0 = $exception;
		return $asm02.MS.Internal.Error.GetXresultForException(arg_65_0);
	}
	return 0;
};
System.Windows.Media.MultiScaleTileSource.GetMaxTileBlendTime = function (nativeTarget, /* ref */ maxTileBlendTimeMilliseconds) {
	maxTileBlendTimeMilliseconds.value = 500;
	try {
		var multiScaleTileSource = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeTarget), System.Windows.Media.MultiScaleTileSource);
		if (multiScaleTileSource === null) {
			throw JSIL.New(System.ArgumentException, "_ctor$1", ["nativeTarget"]);
		}
		maxTileBlendTimeMilliseconds.value = multiScaleTileSource._maxTileBlendTimeMilliseconds;
	} catch ($exception) {
		var arg_2C_0 = $exception;
		return $asm02.MS.Internal.Error.GetXresultForException(arg_2C_0);
	}
	return 0;
};
System.Windows.Media.MultiScaleTileSource.prototype.AreTileImageUrisCached = function (tileLevel, tileX, tileY) {
	return (!((tileLevel !== this._lastTileLevel) || 
			(tileX !== this._lastTilePositionX)) && (tileY === this._lastTilePositionY));
};
System.Windows.Media.MultiScaleTileSource.prototype.EnsureTileImageUrisAreCurrent = function (tileLevel, tileX, tileY) {
	if (!this.AreTileImageUrisCached(tileLevel, tileX, tileY)) {
		this._lastTileImageUris.Clear();
		this.GetTileLayers(tileLevel, tileX, tileY, this._lastTileImageUris);
		this._lastTileLevel = tileLevel;
		this._lastTilePositionX = tileX;
		this._lastTilePositionY = tileY;
	}
};
System.Windows.Media.MultiScaleTileSource.prototype.InvalidateTileLayer = function (level, tilePositionX, tilePositionY, tileLayer) {
	this._lastTileImageUris.Clear();
	this._lastTileLevel = -1;
	this._lastTilePositionX = -1;
	this._lastTilePositionY = -1;
	$asm02.MS.Internal.XcpImports.MultiScaleTileSource_InvalidateTileLayer(
		this, 
		level, 
		tilePositionX, 
		tilePositionY, 
		tileLayer
	);
};
System.Windows.Media.MultiScaleTileSource.prototype._ctor$0 = function (nKnownTypeIndex) {
	this._lastTileLevel = -1;
	this._lastTilePositionX = -1;
	this._lastTilePositionY = -1;
	this._lastTileImageUris = new (System.Collections.Generic.List$b1.Of(System.Object)) ();
	this._maxTileBlendTimeMilliseconds = 500;
	System.Windows.DependencyObject.prototype._ctor$1.call(this, nKnownTypeIndex);
};
System.Windows.Media.MultiScaleTileSource.prototype.get_TileBlendTime = function () {
	return System.TimeSpan.FromMilliseconds(this._maxTileBlendTimeMilliseconds);
};
System.Windows.Media.MultiScaleTileSource.prototype.set_TileBlendTime = function (value) {
	this._maxTileBlendTimeMilliseconds = Math.floor(value.TotalMilliseconds);
};
System.Windows.Media.MultiScaleTileSource.prototype.SetTileSourceParameters = function (imageWidth, imageHeight, tileWidth, tileHeight, tileOverlap) {
	this._imageWidth = imageWidth;
	this._imageHeight = imageHeight;
	this._tileWidth = tileWidth;
	this._tileHeight = tileHeight;
	this._tileOverlap = tileOverlap;
};
System.Windows.Media.MultiScaleTileSource.prototype._ctor$1 = function (imageWidth, imageHeight, tileWidth, tileHeight, tileOverlap) {
	this._lastTileLevel = -1;
	this._lastTilePositionX = -1;
	this._lastTilePositionY = -1;
	this._lastTileImageUris = new (System.Collections.Generic.List$b1.Of(System.Object)) ();
	this._maxTileBlendTimeMilliseconds = 500;
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 256);
	if (!((imageWidth >= 0) && 
			(imageHeight >= 0) && 
			(tileWidth >= 0) && 
			(tileHeight >= 0) && (tileOverlap >= 0))) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("InvalidArgument")]);
	}
	this.SetTileSourceParameters(
		imageWidth, 
		imageHeight, 
		tileWidth, 
		tileHeight, 
		tileOverlap
	);
};
System.Windows.Media.MultiScaleTileSource.prototype._ctor$2 = function (imageWidth, imageHeight, tileWidth, tileHeight, tileOverlap) {
	this._lastTileLevel = -1;
	this._lastTilePositionX = -1;
	this._lastTilePositionY = -1;
	this._lastTileImageUris = new (System.Collections.Generic.List$b1.Of(System.Object)) ();
	this._maxTileBlendTimeMilliseconds = 500;
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 256);
	if (!((imageWidth >= 0) && 
			(imageHeight >= 0) && 
			(imageWidth <= System.Windows.Media.MultiScaleTileSource.MaxImageDimension) && 
			(imageHeight <= System.Windows.Media.MultiScaleTileSource.MaxImageDimension) && 
			(tileWidth >= 0) && 
			(tileHeight >= 0) && (tileOverlap >= 0))) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("InvalidArgument")]);
	}
	this.SetTileSourceParameters(
		imageWidth, 
		imageHeight, 
		tileWidth, 
		tileHeight, 
		tileOverlap
	);
};
JSIL.OverloadedMethod(System.Windows.Media.MultiScaleTileSource.prototype, "_ctor", [
		["_ctor$0", [System.UInt32]], 
		["_ctor$1", [System.Int32, System.Int32, System.Int32, System.Int32, System.Int32]], 
		["_ctor$2", [System.Int64, System.Int64, System.Int32, System.Int32, System.Int32]]
	]);
JSIL.MakeProperty(System.Windows.Media.MultiScaleTileSource.prototype, "TileBlendTime", 
	System.Windows.Media.MultiScaleTileSource.prototype.get_TileBlendTime, System.Windows.Media.MultiScaleTileSource.prototype.set_TileBlendTime);
Object.defineProperty(System.Windows.Media.MultiScaleTileSource, "DEFAULT_TILE_BLEND_TIME_MILLISECONDS", {
		"value": 500}
);
System.Windows.Media.MultiScaleTileSource.prototype._lastTileLevel = 0;
System.Windows.Media.MultiScaleTileSource.prototype._lastTilePositionX = 0;
System.Windows.Media.MultiScaleTileSource.prototype._lastTilePositionY = 0;
System.Windows.Media.MultiScaleTileSource.prototype._lastTileImageUris = null;
System.Windows.Media.MultiScaleTileSource.prototype._imageWidth = 0;
System.Windows.Media.MultiScaleTileSource.prototype._imageHeight = 0;
System.Windows.Media.MultiScaleTileSource.prototype._tileWidth = 0;
System.Windows.Media.MultiScaleTileSource.prototype._tileHeight = 0;
System.Windows.Media.MultiScaleTileSource.prototype._tileOverlap = 0;
System.Windows.Media.MultiScaleTileSource.prototype._maxTileBlendTimeMilliseconds = 0;
System.Windows.Media.MultiScaleTileSource.MaxImageDimension = 0;
System.Windows.Media.MultiScaleTileSource._cctor = function () {
	System.Windows.Media.MultiScaleTileSource.MaxImageDimension = -2147483648;
};

System.Windows.Media.DeepZoomImageTileSource.prototype._ctor$0 = function () {
	System.Windows.Media.MultiScaleTileSource.prototype._ctor$0.call(this, 257);
};
System.Windows.Media.DeepZoomImageTileSource.prototype._ctor$1 = function (sourceUri) {
	System.Windows.Media.MultiScaleTileSource.prototype._ctor$0.call(this, 257);
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.DeepZoomImageTileSource.UriSourceProperty, sourceUri);
};
System.Windows.Media.DeepZoomImageTileSource.prototype.GetTileLayers = function (tileLevel, tilePositionX, tilePositionY, tileImageLayerSources) {
	throw JSIL.New(System.NotImplementedException, "_ctor$0", []);
};
System.Windows.Media.DeepZoomImageTileSource.prototype.get_UriSource = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.Media.DeepZoomImageTileSource.UriSourceProperty), System.Uri);
};
System.Windows.Media.DeepZoomImageTileSource.prototype.set_UriSource = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.Media.DeepZoomImageTileSource.UriSourceProperty, value);
};
JSIL.OverloadedMethod(System.Windows.Media.DeepZoomImageTileSource.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Uri]]
	]);
JSIL.MakeProperty(System.Windows.Media.DeepZoomImageTileSource.prototype, "UriSource", 
	System.Windows.Media.DeepZoomImageTileSource.prototype.get_UriSource, System.Windows.Media.DeepZoomImageTileSource.prototype.set_UriSource);
System.Windows.Media.DeepZoomImageTileSource.UriSourceProperty = null;
System.Windows.Media.DeepZoomImageTileSource._cctor = function () {
	System.Windows.Media.DeepZoomImageTileSource.UriSourceProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19680, System.Uri);
};

System.Windows.NullableBoolConverter.prototype._ctor = function () {
	System.ComponentModel.TypeConverter.prototype._ctor.call(this);
};
System.Windows.NullableBoolConverter.prototype.CanConvertFrom = function (context, sourceType) {
	return ($asm02.System.Windows.Controls.TypeConverters.CanConvertFrom$b1(System.Nullable$b1.Of(System.Boolean))(sourceType) || (sourceType === System.Boolean));
};
System.Windows.NullableBoolConverter.prototype.ConvertFrom = function (context, culture, value) {
	if (JSIL.TryCast(value, System.Boolean)) {
		return JSIL.Cast(value, System.Nullable$b1.Of(System.Boolean));
	}
	var text = JSIL.TryCast(value, System.String);
	if (!((text === null) && value)) {
		return !System.String.IsNullOrEmpty(text) ? new (System.Nullable$b1.Of(System.Boolean)) (System.Boolean.Parse(text)) : new (System.Nullable$b1.Of(System.Boolean)) ();
	}
	return $asm02.System.Windows.Controls.TypeConverters.ConvertFrom$b1(System.Nullable$b1.Of(System.Boolean))(this, value, null);
};

System.Windows.PropertyMetadata.prototype._ctor$0 = function (propertyChangedCallback) {
	this._defaultValue = System.Windows.DependencyProperty.UnsetValue;
	System.Object.prototype._ctor.call(this);
	this._propertyChangedCallback = propertyChangedCallback;
};
System.Windows.PropertyMetadata.prototype._ctor$1 = function (defaultValue) {
	this._defaultValue = System.Windows.DependencyProperty.UnsetValue;
	System.Object.prototype._ctor.call(this);
	this._defaultValue = defaultValue;
};
System.Windows.PropertyMetadata.prototype._ctor$2 = function (defaultValue, propertyChangedCallback) {
	this._defaultValue = System.Windows.DependencyProperty.UnsetValue;
	System.Object.prototype._ctor.call(this);
	this._defaultValue = defaultValue;
	this._propertyChangedCallback = propertyChangedCallback;
};
System.Windows.PropertyMetadata.prototype.get_PropertyChangedCallback = function () {
	return this._propertyChangedCallback;
};
System.Windows.PropertyMetadata.prototype.get_DefaultValue = function () {
	return this._defaultValue;
};
JSIL.OverloadedMethod(System.Windows.PropertyMetadata.prototype, "_ctor", [
		["_ctor$0", [System.Windows.PropertyChangedCallback]], 
		["_ctor$1", [System.Object]], 
		["_ctor$2", [System.Object, System.Windows.PropertyChangedCallback]]
	]);
JSIL.MakeProperty(System.Windows.PropertyMetadata.prototype, "PropertyChangedCallback", 
	System.Windows.PropertyMetadata.prototype.get_PropertyChangedCallback, null);
JSIL.MakeProperty(System.Windows.PropertyMetadata.prototype, "DefaultValue", 
	System.Windows.PropertyMetadata.prototype.get_DefaultValue, null);
System.Windows.PropertyMetadata.prototype._propertyChangedCallback = null;
System.Windows.PropertyMetadata.prototype._defaultValue = null;

System.Windows.ResourceDictionary.prototype._ctor = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 151);
};
System.Windows.ResourceDictionary.prototype.get_Source = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.ResourceDictionary.SourceProperty), System.Uri);
};
System.Windows.ResourceDictionary.prototype.set_Source = function (value) {
	System.Windows.DependencyObject.prototype.SetValue.call(this, System.Windows.ResourceDictionary.SourceProperty, value);
};
System.Windows.ResourceDictionary.prototype.get_MergedDictionaries = function () {
	return JSIL.Cast(System.Windows.DependencyObject.prototype.GetValue.call(this, System.Windows.ResourceDictionary.MergedDictionariesProperty), System.Windows.PresentationFrameworkCollection$b1.Of(System.Windows.ResourceDictionary));
};
System.Windows.ResourceDictionary.prototype.Add$0 = function (key, value) {
	this.Add$1(key, value, false);
};
System.Windows.ResourceDictionary.prototype.AddInternal = function (key, value) {
	var flag = new JSIL.Variable(false);
	var key2 = this.TryGetKeyAsString(key, /* ref */ flag);
	if (!((value === null) || !flag.value)) {
		if (JSIL.TryCast(value, System.Windows.Style) === null) {
			throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("ResourceDictionary_ValueMustBeStyle")]);
		}
		var style = JSIL.Cast(value, System.Windows.Style);
		if (style.TargetType !== JSIL.Cast(key, System.Type)) {
			throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("ResourceDictionary_ValueMustBeStyleWithCorrectTargetType")]);
		}
	}
	this.Add$1(key2, value, flag.value);
};
System.Windows.ResourceDictionary.prototype.Add$1 = function (key, value, isImplicitStyle) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var obj = new JSIL.Variable(null);
	if (this.TryGetValueNoMergedDictionaries(key, /* ref */ obj)) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("ResourceDictionary_ItemWithSameKeyExists")]);
	}
	if (value === null) {
		throw JSIL.New(System.NotSupportedException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("ResourceDictionary_NullValueNotSupported")]);
	}
	if (!(!isImplicitStyle && (JSIL.TryCast(value, System.Windows.DependencyObject) === null))) {
		$asm02.MS.Internal.XcpImports.ResourceDictionary_Add(this, key, JSIL.Cast(value, System.Windows.DependencyObject), isImplicitStyle);
	} else {
		if (this._dictionary === null) {
			this._dictionary = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.String, System.Object), "_ctor$0", []);
		}
		this._dictionary.Add(key, value);
	}
	++this._version;
};
System.Windows.ResourceDictionary.prototype.AddFromCore = function (key, value) {
	if (this._dictionary === null) {
		this._dictionary = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.String, System.Object), "_ctor$0", []);
	}
	this._dictionary.Add(key, value);
};
System.Windows.ResourceDictionary.prototype.Remove$0 = function (key) {
	this.RemoveInternal(key);
};
System.Windows.ResourceDictionary.prototype.RemoveInternal = function (key) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	var flag = new JSIL.Variable(false);
	var key2 = this.TryGetKeyAsString(key, /* ref */ flag);
	var flag2 = false;
	if (!(!(flag.value || 
				(this._dictionary === null)) && (flag2 = this._dictionary.Remove(key2)))) {
		flag2 = $asm02.MS.Internal.XcpImports.ResourceDictionary_Remove(this, key2, flag.value);
	}
	if (flag2) {
		++this._version;
	}
	return flag2;
};
System.Windows.ResourceDictionary.prototype.Clear = function () {
	$asm02.MS.Internal.XcpImports.CheckThread();
	if (this._dictionary !== null) {
		this._dictionary.Clear();
	}
	$asm02.MS.Internal.XcpImports.ResourceDictionary_Clear(this);
	++this._version;
};
System.Windows.ResourceDictionary.prototype.get_Item = function (key) {
	var flag = new JSIL.Variable(false);
	var key2 = this.TryGetKeyAsString(key, /* ref */ flag);
	var result = new JSIL.Variable(null);
	if (!((this._dictionary === null) || 
			flag.value || !this._dictionary.TryGetValue(key2, /* ref */ result))) {
		return result.value;
	}
	return $asm02.MS.Internal.XcpImports.ResourceDictionary_GetItem(this, key2, true, flag.value);
};
System.Windows.ResourceDictionary.prototype.set_Item = function (key, value) {
	++this._version;
	throw JSIL.New(System.NotImplementedException, "_ctor$0", []);
};
System.Windows.ResourceDictionary.prototype.get_IsReadOnly = function () {
	return false;
};
System.Windows.ResourceDictionary.prototype.get_Count = function () {
	var num = $asm02.MS.Internal.XcpImports.ResourceDictionary_Count(this);
	return (this._dictionary ? this._dictionary.Count : 0 + num);
};
System.Windows.ResourceDictionary.prototype.TryGetKeyAsString = function (key, /* ref */ isImplicitStyle) {
	if (key === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["key"]);
	}
	var type = JSIL.TryCast(key, System.Type);
	var text = null;
	if (type !== null) {
		text = type.FullName;
		isImplicitStyle.value = true;
	} else {
		text = JSIL.TryCast(key, System.String);
		isImplicitStyle.value = false;
	}
	if (text === null) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("ResourceDictionary_KeyMustBeTypeOrString")]);
	}
	return text;
};
System.Windows.ResourceDictionary.prototype.TryGetManagedValue = function (key, /* ref */ value) {
	value.value = null;
	return ((this._dictionary !== null) && this._dictionary.TryGetValue(key, /* ref */ value));
};
System.Windows.ResourceDictionary.prototype.TryGetValueNoMergedDictionaries = function (key, /* ref */ value) {
	if (this.TryGetManagedValue(key, /* ref */ value)) {
		return true;
	}
	value.value = $asm02.MS.Internal.XcpImports.ResourceDictionary_GetItem(this, key, false, false);
	return (value.value !== null);
};
System.Windows.ResourceDictionary.prototype.TryGetValue = function (key, /* ref */ value) {
	value.value = this.get_Item(key);
	return (value.value !== null);
};
System.Windows.ResourceDictionary.prototype.IDictionary$b2_Add = function (key, value) {
	this.AddInternal(key, value);
};
System.Windows.ResourceDictionary.prototype.IDictionary$b2_ContainsKey = function (key) {
	var obj = new JSIL.Variable(null);
	return this.TryGetValue(key, /* ref */ obj);
};
System.Windows.ResourceDictionary.prototype.IDictionary$b2_get_Keys = function () {
	throw JSIL.New(System.NotImplementedException, "_ctor$0", []);
};
System.Windows.ResourceDictionary.prototype.IDictionary$b2_Remove = function (key) {
	return this.RemoveInternal(key);
};
System.Windows.ResourceDictionary.prototype.IDictionary$b2_TryGetValue = function (key, /* ref */ value) {
	return this.TryGetValue(key, /* ref */ value);
};
System.Windows.ResourceDictionary.prototype.IDictionary$b2_get_Values = function () {
	throw JSIL.New(System.NotImplementedException, "_ctor$0", []);
};
System.Windows.ResourceDictionary.prototype.IDictionary$b2_get_Item = function (key) {
	return this.get_Item(key);
};
System.Windows.ResourceDictionary.prototype.IDictionary$b2_set_Item = function (key, value) {
	throw JSIL.New(System.NotImplementedException, "_ctor$0", []);
};
System.Windows.ResourceDictionary.prototype.ICollection$b1_Add = function (item) {
	this.IDictionary$b2_Add(item.Key, item.Value);
};
System.Windows.ResourceDictionary.prototype.ICollection$b1_Clear = function () {
	this.Clear();
};
System.Windows.ResourceDictionary.prototype.ICollection$b1_Contains = function (item) {
	return this.IDictionary$b2_ContainsKey(item.Key);
};
System.Windows.ResourceDictionary.prototype.ICollection$b1_CopyTo = function (array, arrayIndex) {
	throw JSIL.New(System.NotImplementedException, "_ctor$0", []);
};
System.Windows.ResourceDictionary.prototype.ICollection$b1_get_Count = function () {
	throw JSIL.New(System.NotImplementedException, "_ctor$0", []);
};
System.Windows.ResourceDictionary.prototype.ICollection$b1_get_IsReadOnly = function () {
	return this.IsReadOnly;
};
System.Windows.ResourceDictionary.prototype.ICollection$b1_Remove = function (item) {
	return this.IDictionary$b2_Remove(item.Key);
};
System.Windows.ResourceDictionary.prototype.IEnumerable$b1_GetEnumerator = function () {
	var getEnumerator$gd__ = new $asm02.System.Windows.ResourceDictionary.GetEnumerator$gd__0(0);
	getEnumerator$gd__.$this = this;
	return getEnumerator$gd__;
};
System.Windows.ResourceDictionary.prototype.IEnumerable_GetEnumerator = function () {
	return this.GetEnumerator();
};
System.Windows.ResourceDictionary.prototype.Contains = function (key) {
	var obj = new JSIL.Variable(null);
	return this.TryGetValue(key, /* ref */ obj);
};
System.Windows.ResourceDictionary.prototype.Add$2 = function (key, value) {
	this.AddInternal(key, value);
};
System.Windows.ResourceDictionary.prototype.GetEnumerator = function () {
	return new $asm02.System.Windows.ResourceDictionaryEnumerator(this);
};
System.Windows.ResourceDictionary.prototype.get_IsFixedSize = function () {
	return false;
};
System.Windows.ResourceDictionary.prototype.get_Keys = function () {
	var num = $asm02.MS.Internal.XcpImports.ResourceDictionary_Count(this);
	var num2 = (this._dictionary ? this._dictionary.Count : 0 + num);
	var array = JSIL.Array.New(System.Object, num2);
__loop0__: 
	for (var i = 0; i < num; ++i) {
		array[i] = $asm02.MS.Internal.XcpImports.ResourceDictionary_GetKey(this, i);
	}
	if (this._dictionary !== null) {
		this._dictionary.IDictionary_Keys.ICollection_CopyTo(array, num);
	}
	return array;
};
System.Windows.ResourceDictionary.prototype.Remove$1 = function (key) {
	this.RemoveInternal(key);
};
System.Windows.ResourceDictionary.prototype.get_Values = function () {
	var count = this.Count;
	var array = JSIL.Array.New(System.Object, count);
	var array2 = JSIL.Array.New(System.Object, count);
	this.Keys.ICollection_CopyTo(array2, 0);
__loop0__: 
	for (var i = 0; i < count; ++i) {
		array[i] = this.get_Item(array2[i]);
	}
	return array;
};
System.Windows.ResourceDictionary.prototype.CopyTo = function (array, index) {
	var enumerator = this.Keys.IEnumerable_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator_Current;
			JSIL.TryCast(array, System.Array.Of(System.Collections.DictionaryEntry))[index++] = new System.Collections.DictionaryEntry(current, this.get_Item(current));
		}
	} finally {
		var disposable = JSIL.TryCast(enumerator, System.IDisposable);
		if (disposable !== null) {
			disposable.IDisposable_Dispose();
		}
	}
};
System.Windows.ResourceDictionary.prototype.ICollection_get_IsSynchronized = function () {
	return false;
};
System.Windows.ResourceDictionary.prototype.ICollection_get_SyncRoot = function () {
	throw JSIL.New(System.NotImplementedException, "_ctor$0", []);
};
System.Windows.ResourceDictionary.UpdateResource = function (nativeDictionary, updateKind, key, nativeInValue, /* ref */ nativeOutValue) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				nativeOutValue.value = System.IntPtr.Zero;
				try {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								var resourceDictionary = JSIL.TryCast($asm02.MS.Internal.ManagedPeerTable.EnsureManagedPeer$0(nativeDictionary, 0, System.Windows.ResourceDictionary), System.Windows.ResourceDictionary);
								if (resourceDictionary === null) {
									var result = -2146498358;
									return result;
								}
								switch (updateKind) {
									case 0: 
										try {
											var managedPeer = new JSIL.Variable($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeInValue));
											if (managedPeer.value === null) {
												result = -2146498358;
												return result;
											}
											try {
												resourceDictionary.AddFromCore(key, managedPeer.value);
											} catch ($exception) {
												if (JSIL.CheckType($exception, System.ArgumentException)) {
													result = -2146498302;
													return result;
												} else {
													throw $exception;
												}
											}
											__label1__ = "IL_B2";
											continue __step1__;
										} finally {
											$asm02.MS.Internal.ManagedPeerTable.UnpegManagedPeerNoRef$2(nativeInValue);
										}
										break;
									case 1: 
										break;
									default: 
										result = -2146498358;
										return result;
								}
								if (!resourceDictionary.TryGetManagedValue(key, /* ref */ managedPeer)) {
									result = 0;
									return result;
								}
								var managedObjectReference = JSIL.New($asm02.MS.Internal.ManagedObjectReference, "_ctor$1", [managedPeer.value]);
								managedObjectReference.NativeValue = managedPeer.value;
								$asm02.MS.Internal.ManagedPeerTable.PegManagedPeerNoRef$0(managedObjectReference);
								nativeOutValue.value = managedObjectReference.IManagedPeerBase_NativeObject;
								__label1__ = "IL_B2";
								continue __step1__;
								break;
							case "IL_B2":
								break __step1__;
						}
					}
				} catch ($exception) {
					var arg_B4_0 = $exception;
					result = $asm02.MS.Internal.Error.GetXresultForUserException(arg_B4_0);
					return result;
				}
				return 0;
				break __step0__;
		}
	}
};
JSIL.OverloadedMethod(System.Windows.ResourceDictionary.prototype, "Add", [
		["Add$0", [System.String, System.Object]], 
		["Add$1", [System.String, System.Object, System.Boolean]], 
		["Add$2", [System.Object, System.Object]]
	]);
JSIL.OverloadedMethod(System.Windows.ResourceDictionary.prototype, "Remove", [
		["Remove$0", [System.String]], 
		["Remove$1", [System.Object]]
	]);
JSIL.MakeProperty(System.Windows.ResourceDictionary.prototype, "Source", 
	System.Windows.ResourceDictionary.prototype.get_Source, System.Windows.ResourceDictionary.prototype.set_Source);
JSIL.MakeProperty(System.Windows.ResourceDictionary.prototype, "MergedDictionaries", 
	System.Windows.ResourceDictionary.prototype.get_MergedDictionaries, null);
JSIL.MakeProperty(System.Windows.ResourceDictionary.prototype, "Item", 
	System.Windows.ResourceDictionary.prototype.get_Item, System.Windows.ResourceDictionary.prototype.set_Item);
JSIL.MakeProperty(System.Windows.ResourceDictionary.prototype, "IsReadOnly", 
	System.Windows.ResourceDictionary.prototype.get_IsReadOnly, null);
JSIL.MakeProperty(System.Windows.ResourceDictionary.prototype, "Count", 
	System.Windows.ResourceDictionary.prototype.get_Count, null);
JSIL.MakeProperty(System.Windows.ResourceDictionary.prototype, "IDictionary$b2_Keys", 
	System.Windows.ResourceDictionary.prototype.IDictionary$b2_get_Keys, null);
JSIL.MakeProperty(System.Windows.ResourceDictionary.prototype, "IDictionary$b2_Values", 
	System.Windows.ResourceDictionary.prototype.IDictionary$b2_get_Values, null);
JSIL.MakeProperty(System.Windows.ResourceDictionary.prototype, "IDictionary$b2_Item", 
	System.Windows.ResourceDictionary.prototype.IDictionary$b2_get_Item, System.Windows.ResourceDictionary.prototype.IDictionary$b2_set_Item);
JSIL.MakeProperty(System.Windows.ResourceDictionary.prototype, "ICollection$b1_Count", 
	System.Windows.ResourceDictionary.prototype.ICollection$b1_get_Count, null);
JSIL.MakeProperty(System.Windows.ResourceDictionary.prototype, "ICollection$b1_IsReadOnly", 
	System.Windows.ResourceDictionary.prototype.ICollection$b1_get_IsReadOnly, null);
JSIL.MakeProperty(System.Windows.ResourceDictionary.prototype, "IsFixedSize", 
	System.Windows.ResourceDictionary.prototype.get_IsFixedSize, null);
JSIL.MakeProperty(System.Windows.ResourceDictionary.prototype, "Keys", 
	System.Windows.ResourceDictionary.prototype.get_Keys, null);
JSIL.MakeProperty(System.Windows.ResourceDictionary.prototype, "Values", 
	System.Windows.ResourceDictionary.prototype.get_Values, null);
JSIL.MakeProperty(System.Windows.ResourceDictionary.prototype, "ICollection_IsSynchronized", 
	System.Windows.ResourceDictionary.prototype.ICollection_get_IsSynchronized, null);
JSIL.MakeProperty(System.Windows.ResourceDictionary.prototype, "ICollection_SyncRoot", 
	System.Windows.ResourceDictionary.prototype.ICollection_get_SyncRoot, null);
System.Windows.ResourceDictionary.prototype._dictionary = null;
System.Windows.ResourceDictionary.prototype._version = 0;
System.Windows.ResourceDictionary.SourceProperty = null;
System.Windows.ResourceDictionary.MergedDictionariesProperty = null;
System.Windows.ResourceDictionary._cctor = function () {
	System.Windows.ResourceDictionary.SourceProperty = System.Windows.DependencyProperty.RegisterCoreProperty(20301, System.Uri);
	System.Windows.ResourceDictionary.MergedDictionariesProperty = System.Windows.DependencyProperty.RegisterCoreProperty(20302, MS.Internal.ResourceDictionaryCollection);
};

$asm02.System.Windows.ResourceDictionary.GetEnumerator$gd__0.prototype.IEnumerator_MoveNext = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				try {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								switch (this.$state) {
									case 0: 
										this.$state = -1;
										this.$wrap2 = this.$this.Keys.IEnumerable_GetEnumerator();
										this.$state = 1;
										break;
									case 1: 
										__label1__ = "IL_99";
										continue __step1__;
									case 2: 
										this.$state = 1;
										break;
									default: 
										__label1__ = "IL_99";
										continue __step1__;
								}
								if (this.$wrap2.IEnumerator_MoveNext()) {
									this.key = this.$wrap2.IEnumerator_Current;
									this.$current = new (System.Collections.Generic.KeyValuePair$b2.Of(System.Object, System.Object)) (this.key, this.$this.get_Item(this.key));
									this.$state = 2;
									var result = true;
									return result;
								}
								this.$l$gm__Finally4();
								__label1__ = "IL_99";
								continue __step1__;
								break;
							case "IL_99":
								result = false;
								break __step1__;
						}
					}
				} catch ($exception) {
					this.IDisposable_Dispose();
					throw $exception;
				}
				return result;
				break __step0__;
		}
	}
};
$asm02.System.Windows.ResourceDictionary.GetEnumerator$gd__0.prototype.IEnumerator$b1_get_Current = function () {
	return this.$current;
};
$asm02.System.Windows.ResourceDictionary.GetEnumerator$gd__0.prototype.IEnumerator_Reset = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm02.System.Windows.ResourceDictionary.GetEnumerator$gd__0.prototype.IDisposable_Dispose = function () {
	switch (this.$state) {
		case 1: 
		case 2: 
			try {
			} finally {
				this.$l$gm__Finally4();
			}
			return;
		default: 
			return;
	}
};
$asm02.System.Windows.ResourceDictionary.GetEnumerator$gd__0.prototype.IEnumerator_get_Current = function () {
	return this.$current;
};
$asm02.System.Windows.ResourceDictionary.GetEnumerator$gd__0.prototype._ctor = function ($l$g1__state) {
	System.Object.prototype._ctor.call(this);
	this.$state = $l$g1__state;
};
$asm02.System.Windows.ResourceDictionary.GetEnumerator$gd__0.prototype.$l$gm__Finally4 = function () {
	this.$state = -1;
	this.$wrap3 = JSIL.TryCast(this.$wrap2, System.IDisposable);
	if (this.$wrap3 !== null) {
		this.$wrap3.IDisposable_Dispose();
	}
};
JSIL.MakeProperty($asm02.System.Windows.ResourceDictionary.GetEnumerator$gd__0.prototype, "IEnumerator$b1_Current", 
	$asm02.System.Windows.ResourceDictionary.GetEnumerator$gd__0.prototype.IEnumerator$b1_get_Current, null);
JSIL.MakeProperty($asm02.System.Windows.ResourceDictionary.GetEnumerator$gd__0.prototype, "IEnumerator_Current", 
	$asm02.System.Windows.ResourceDictionary.GetEnumerator$gd__0.prototype.IEnumerator_get_Current, null);
$asm02.System.Windows.ResourceDictionary.GetEnumerator$gd__0.prototype.$state = 0;
$asm02.System.Windows.ResourceDictionary.GetEnumerator$gd__0.prototype.$this = null;
$asm02.System.Windows.ResourceDictionary.GetEnumerator$gd__0.prototype.key = null;
$asm02.System.Windows.ResourceDictionary.GetEnumerator$gd__0.prototype.$wrap2 = null;
$asm02.System.Windows.ResourceDictionary.GetEnumerator$gd__0.prototype.$wrap3 = null;

$asm02.System.Windows.ResourceDictionaryEnumerator.prototype._ctor = function (owner) {
	System.Object.prototype._ctor.call(this);
	this._owner = owner;
	this._keyEnumerator = this._owner.Keys.IEnumerable_GetEnumerator();
};
$asm02.System.Windows.ResourceDictionaryEnumerator.prototype.get_Entry = function () {
	return new System.Collections.DictionaryEntry(this.Key, this.Value);
};
$asm02.System.Windows.ResourceDictionaryEnumerator.prototype.get_Key = function () {
	return this._keyEnumerator.IEnumerator_Current;
};
$asm02.System.Windows.ResourceDictionaryEnumerator.prototype.get_Value = function () {
	return this._owner.get_Item(this.Key);
};
$asm02.System.Windows.ResourceDictionaryEnumerator.prototype.get_Current = function () {
	return this.Entry;
};
$asm02.System.Windows.ResourceDictionaryEnumerator.prototype.MoveNext = function () {
	return this._keyEnumerator.IEnumerator_MoveNext();
};
$asm02.System.Windows.ResourceDictionaryEnumerator.prototype.Reset = function () {
	this._keyEnumerator.IEnumerator_Reset();
};
JSIL.MakeProperty($asm02.System.Windows.ResourceDictionaryEnumerator.prototype, "Entry", 
	$asm02.System.Windows.ResourceDictionaryEnumerator.prototype.get_Entry, null);
JSIL.MakeProperty($asm02.System.Windows.ResourceDictionaryEnumerator.prototype, "Key", 
	$asm02.System.Windows.ResourceDictionaryEnumerator.prototype.get_Key, null);
JSIL.MakeProperty($asm02.System.Windows.ResourceDictionaryEnumerator.prototype, "Value", 
	$asm02.System.Windows.ResourceDictionaryEnumerator.prototype.get_Value, null);
JSIL.MakeProperty($asm02.System.Windows.ResourceDictionaryEnumerator.prototype, "Current", 
	$asm02.System.Windows.ResourceDictionaryEnumerator.prototype.get_Current, null);
$asm02.System.Windows.ResourceDictionaryEnumerator.prototype._owner = null;
$asm02.System.Windows.ResourceDictionaryEnumerator.prototype._keyEnumerator = null;

System.Windows.RoutedEvent.prototype._ctor = function (nativeRepresentation) {
	System.Object.prototype._ctor.call(this);
	this.m_nativeRepresentation = nativeRepresentation;
};
System.Windows.RoutedEvent.prototype.toString = function () {
	return this.m_nativeRepresentation;
};
System.Windows.RoutedEvent.prototype.m_nativeRepresentation = null;

System.Windows.RoutedPropertyChangedEventArgs$b1.prototype.get_OldValue = function () {
	return this.OldValue$value;
};
System.Windows.RoutedPropertyChangedEventArgs$b1.prototype.set_OldValue = function (value) {
	this.OldValue$value = value;
};
System.Windows.RoutedPropertyChangedEventArgs$b1.prototype.get_NewValue = function () {
	return this.NewValue$value;
};
System.Windows.RoutedPropertyChangedEventArgs$b1.prototype.set_NewValue = function (value) {
	this.NewValue$value = value;
};
System.Windows.RoutedPropertyChangedEventArgs$b1.prototype._ctor = function (oldValue, newValue) {
	System.Windows.RoutedEventArgs.prototype._ctor.call(this);
	this.OldValue = oldValue;
	this.NewValue = newValue;
};
JSIL.MakeProperty(System.Windows.RoutedPropertyChangedEventArgs$b1.prototype, "OldValue", 
	System.Windows.RoutedPropertyChangedEventArgs$b1.prototype.get_OldValue, System.Windows.RoutedPropertyChangedEventArgs$b1.prototype.set_OldValue);
JSIL.MakeProperty(System.Windows.RoutedPropertyChangedEventArgs$b1.prototype, "NewValue", 
	System.Windows.RoutedPropertyChangedEventArgs$b1.prototype.get_NewValue, System.Windows.RoutedPropertyChangedEventArgs$b1.prototype.set_NewValue);
System.Windows.RoutedPropertyChangedEventArgs$b1.prototype.OldValue$value = null;
System.Windows.RoutedPropertyChangedEventArgs$b1.prototype.NewValue$value = null;

System.Windows.StyleTypedPropertyAttribute.prototype._ctor = function () {
	System.Attribute.prototype._ctor.call(this);
};
System.Windows.StyleTypedPropertyAttribute.prototype.get_Property = function () {
	return this._property;
};
System.Windows.StyleTypedPropertyAttribute.prototype.set_Property = function (value) {
	this._property = value;
};
System.Windows.StyleTypedPropertyAttribute.prototype.get_StyleTargetType = function () {
	return this._styleTargetType;
};
System.Windows.StyleTypedPropertyAttribute.prototype.set_StyleTargetType = function (value) {
	this._styleTargetType = value;
};
JSIL.MakeProperty(System.Windows.StyleTypedPropertyAttribute.prototype, "Property", 
	System.Windows.StyleTypedPropertyAttribute.prototype.get_Property, System.Windows.StyleTypedPropertyAttribute.prototype.set_Property);
JSIL.MakeProperty(System.Windows.StyleTypedPropertyAttribute.prototype, "StyleTargetType", 
	System.Windows.StyleTypedPropertyAttribute.prototype.get_StyleTargetType, System.Windows.StyleTypedPropertyAttribute.prototype.set_StyleTargetType);
System.Windows.StyleTypedPropertyAttribute.prototype._property = null;
System.Windows.StyleTypedPropertyAttribute.prototype._styleTargetType = null;

System.Windows.SystemColors.get_ActiveBorderColor = function () {
	return System.Windows.SystemColors.GetSystemColor($asm02.System.Windows.SystemColors.ColorIndex.ActiveBorder);
};
System.Windows.SystemColors.get_ActiveCaptionColor = function () {
	return System.Windows.SystemColors.GetSystemColor($asm02.System.Windows.SystemColors.ColorIndex.ActiveCaption);
};
System.Windows.SystemColors.get_ActiveCaptionTextColor = function () {
	return System.Windows.SystemColors.GetSystemColor($asm02.System.Windows.SystemColors.ColorIndex.ActiveCaptionText);
};
System.Windows.SystemColors.get_AppWorkspaceColor = function () {
	return System.Windows.SystemColors.GetSystemColor($asm02.System.Windows.SystemColors.ColorIndex.AppWorkspace);
};
System.Windows.SystemColors.get_DesktopColor = function () {
	return System.Windows.SystemColors.GetSystemColor($asm02.System.Windows.SystemColors.ColorIndex.Desktop);
};
System.Windows.SystemColors.get_ControlColor = function () {
	return System.Windows.SystemColors.GetSystemColor($asm02.System.Windows.SystemColors.ColorIndex.Control);
};
System.Windows.SystemColors.get_ControlDarkColor = function () {
	return System.Windows.SystemColors.GetSystemColor($asm02.System.Windows.SystemColors.ColorIndex.ControlDark);
};
System.Windows.SystemColors.get_ControlDarkDarkColor = function () {
	return System.Windows.SystemColors.GetSystemColor($asm02.System.Windows.SystemColors.ColorIndex.ControlDarkDark);
};
System.Windows.SystemColors.get_ControlLightColor = function () {
	return System.Windows.SystemColors.GetSystemColor($asm02.System.Windows.SystemColors.ColorIndex.ControlLight);
};
System.Windows.SystemColors.get_ControlLightLightColor = function () {
	return System.Windows.SystemColors.GetSystemColor($asm02.System.Windows.SystemColors.ColorIndex.ControlLightLight);
};
System.Windows.SystemColors.get_ControlTextColor = function () {
	return System.Windows.SystemColors.GetSystemColor($asm02.System.Windows.SystemColors.ColorIndex.ControlText);
};
System.Windows.SystemColors.get_GrayTextColor = function () {
	return System.Windows.SystemColors.GetSystemColor($asm02.System.Windows.SystemColors.ColorIndex.GrayText);
};
System.Windows.SystemColors.get_HighlightColor = function () {
	return System.Windows.SystemColors.GetSystemColor($asm02.System.Windows.SystemColors.ColorIndex.Highlight);
};
System.Windows.SystemColors.get_HighlightTextColor = function () {
	return System.Windows.SystemColors.GetSystemColor($asm02.System.Windows.SystemColors.ColorIndex.HighlightText);
};
System.Windows.SystemColors.get_InactiveBorderColor = function () {
	return System.Windows.SystemColors.GetSystemColor($asm02.System.Windows.SystemColors.ColorIndex.InactiveBorder);
};
System.Windows.SystemColors.get_InactiveCaptionColor = function () {
	return System.Windows.SystemColors.GetSystemColor($asm02.System.Windows.SystemColors.ColorIndex.InactiveCaption);
};
System.Windows.SystemColors.get_InactiveCaptionTextColor = function () {
	return System.Windows.SystemColors.GetSystemColor($asm02.System.Windows.SystemColors.ColorIndex.InactiveCaptionText);
};
System.Windows.SystemColors.get_InfoColor = function () {
	return System.Windows.SystemColors.GetSystemColor($asm02.System.Windows.SystemColors.ColorIndex.Info);
};
System.Windows.SystemColors.get_InfoTextColor = function () {
	return System.Windows.SystemColors.GetSystemColor($asm02.System.Windows.SystemColors.ColorIndex.InfoText);
};
System.Windows.SystemColors.get_MenuColor = function () {
	return System.Windows.SystemColors.GetSystemColor($asm02.System.Windows.SystemColors.ColorIndex.Menu);
};
System.Windows.SystemColors.get_MenuTextColor = function () {
	return System.Windows.SystemColors.GetSystemColor($asm02.System.Windows.SystemColors.ColorIndex.MenuText);
};
System.Windows.SystemColors.get_ScrollBarColor = function () {
	return System.Windows.SystemColors.GetSystemColor($asm02.System.Windows.SystemColors.ColorIndex.ScrollBar);
};
System.Windows.SystemColors.get_WindowColor = function () {
	return System.Windows.SystemColors.GetSystemColor($asm02.System.Windows.SystemColors.ColorIndex.Window);
};
System.Windows.SystemColors.get_WindowFrameColor = function () {
	return System.Windows.SystemColors.GetSystemColor($asm02.System.Windows.SystemColors.ColorIndex.WindowFrame);
};
System.Windows.SystemColors.get_WindowTextColor = function () {
	return System.Windows.SystemColors.GetSystemColor($asm02.System.Windows.SystemColors.ColorIndex.WindowText);
};
System.Windows.SystemColors.GetSystemColor = function (colorIndex) {
	if (!System.Windows.SystemColors.ColorTable.TryGetValue(colorIndex, /* ref */ color)) {
		var num = $asm02.MS.Internal.XcpImports.SystemSetting_GetSystemColor(Math.floor(colorIndex));
		var color = new JSIL.Variable(System.Windows.Media.Color.FromArgb(((num & -16777216) >> 24), ((num & 16711680) >> 16), ((num & 65280) >> 8), (num & 255)).MemberwiseClone());
		System.Windows.SystemColors.ColorTable.Add(colorIndex, color.value.MemberwiseClone());
	}
	return color.value;
};
JSIL.MakeProperty(System.Windows.SystemColors, "ActiveBorderColor", 
	System.Windows.SystemColors.get_ActiveBorderColor, null);
JSIL.MakeProperty(System.Windows.SystemColors, "ActiveCaptionColor", 
	System.Windows.SystemColors.get_ActiveCaptionColor, null);
JSIL.MakeProperty(System.Windows.SystemColors, "ActiveCaptionTextColor", 
	System.Windows.SystemColors.get_ActiveCaptionTextColor, null);
JSIL.MakeProperty(System.Windows.SystemColors, "AppWorkspaceColor", 
	System.Windows.SystemColors.get_AppWorkspaceColor, null);
JSIL.MakeProperty(System.Windows.SystemColors, "DesktopColor", 
	System.Windows.SystemColors.get_DesktopColor, null);
JSIL.MakeProperty(System.Windows.SystemColors, "ControlColor", 
	System.Windows.SystemColors.get_ControlColor, null);
JSIL.MakeProperty(System.Windows.SystemColors, "ControlDarkColor", 
	System.Windows.SystemColors.get_ControlDarkColor, null);
JSIL.MakeProperty(System.Windows.SystemColors, "ControlDarkDarkColor", 
	System.Windows.SystemColors.get_ControlDarkDarkColor, null);
JSIL.MakeProperty(System.Windows.SystemColors, "ControlLightColor", 
	System.Windows.SystemColors.get_ControlLightColor, null);
JSIL.MakeProperty(System.Windows.SystemColors, "ControlLightLightColor", 
	System.Windows.SystemColors.get_ControlLightLightColor, null);
JSIL.MakeProperty(System.Windows.SystemColors, "ControlTextColor", 
	System.Windows.SystemColors.get_ControlTextColor, null);
JSIL.MakeProperty(System.Windows.SystemColors, "GrayTextColor", 
	System.Windows.SystemColors.get_GrayTextColor, null);
JSIL.MakeProperty(System.Windows.SystemColors, "HighlightColor", 
	System.Windows.SystemColors.get_HighlightColor, null);
JSIL.MakeProperty(System.Windows.SystemColors, "HighlightTextColor", 
	System.Windows.SystemColors.get_HighlightTextColor, null);
JSIL.MakeProperty(System.Windows.SystemColors, "InactiveBorderColor", 
	System.Windows.SystemColors.get_InactiveBorderColor, null);
JSIL.MakeProperty(System.Windows.SystemColors, "InactiveCaptionColor", 
	System.Windows.SystemColors.get_InactiveCaptionColor, null);
JSIL.MakeProperty(System.Windows.SystemColors, "InactiveCaptionTextColor", 
	System.Windows.SystemColors.get_InactiveCaptionTextColor, null);
JSIL.MakeProperty(System.Windows.SystemColors, "InfoColor", 
	System.Windows.SystemColors.get_InfoColor, null);
JSIL.MakeProperty(System.Windows.SystemColors, "InfoTextColor", 
	System.Windows.SystemColors.get_InfoTextColor, null);
JSIL.MakeProperty(System.Windows.SystemColors, "MenuColor", 
	System.Windows.SystemColors.get_MenuColor, null);
JSIL.MakeProperty(System.Windows.SystemColors, "MenuTextColor", 
	System.Windows.SystemColors.get_MenuTextColor, null);
JSIL.MakeProperty(System.Windows.SystemColors, "ScrollBarColor", 
	System.Windows.SystemColors.get_ScrollBarColor, null);
JSIL.MakeProperty(System.Windows.SystemColors, "WindowColor", 
	System.Windows.SystemColors.get_WindowColor, null);
JSIL.MakeProperty(System.Windows.SystemColors, "WindowFrameColor", 
	System.Windows.SystemColors.get_WindowFrameColor, null);
JSIL.MakeProperty(System.Windows.SystemColors, "WindowTextColor", 
	System.Windows.SystemColors.get_WindowTextColor, null);
System.Windows.SystemColors.ColorTable = null;
System.Windows.SystemColors._cctor = function () {
	System.Windows.SystemColors.ColorTable = JSIL.New(System.Collections.Generic.Dictionary$b2.Of($asm02.System.Windows.SystemColors.ColorIndex, System.Windows.Media.Color), "_ctor$0", []);
};

System.Windows.SystemParameters.get_HighContrast = function () {
	return $asm02.MS.Internal.XcpImports.SystemSetting_GetIsHighContrastEnabled();
};
System.Windows.SystemParameters.get_WheelScrollLines = function () {
	if ($asm02.MS.Internal.QuirksMode.ShouldSystemParametersWheelScrollLinesPropertyReturnOne()) {
		return 1;
	}
	return 3;
};
JSIL.MakeProperty(System.Windows.SystemParameters, "HighContrast", 
	System.Windows.SystemParameters.get_HighContrast, null);
JSIL.MakeProperty(System.Windows.SystemParameters, "WheelScrollLines", 
	System.Windows.SystemParameters.get_WheelScrollLines, null);

$asm02.System.Windows.TextDecoration.prototype._ctor = function (decorationLocation) {
	System.Object.prototype._ctor.call(this);
	this._location = decorationLocation;
	if (decorationLocation !== $asm02.System.Windows.TextDecorationLocation.Underline) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["decorationLocation"]);
	}
};
$asm02.System.Windows.TextDecoration.prototype.get_Location = function () {
	return this._location;
};
JSIL.MakeProperty($asm02.System.Windows.TextDecoration.prototype, "Location", 
	$asm02.System.Windows.TextDecoration.prototype.get_Location, null);
$asm02.System.Windows.TextDecoration.prototype._location = 0;

System.Windows.TextDecorationCollection.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
	this._decoration = null;
};
System.Windows.TextDecorationCollection.prototype.get_Decoration = function () {
	return this._decoration;
};
System.Windows.TextDecorationCollection.prototype.set_Decoration = function (value) {
	this._decoration = value;
};
JSIL.MakeProperty(System.Windows.TextDecorationCollection.prototype, "Decoration", 
	System.Windows.TextDecorationCollection.prototype.get_Decoration, System.Windows.TextDecorationCollection.prototype.set_Decoration);
System.Windows.TextDecorationCollection.prototype._decoration = null;

System.Windows.TextDecorations.get_Underline = function () {
	if (System.Windows.TextDecorations.s_underline === null) {
		var decoration = new $asm02.System.Windows.TextDecoration($asm02.System.Windows.TextDecorationLocation.Underline);
		System.Windows.TextDecorations.s_underline = new System.Windows.TextDecorationCollection();
		System.Windows.TextDecorations.s_underline.Decoration = decoration;
	}
	return System.Windows.TextDecorations.s_underline;
};
JSIL.MakeProperty(System.Windows.TextDecorations, "Underline", 
	System.Windows.TextDecorations.get_Underline, null);
System.Windows.TextDecorations.s_underline = null;
System.Windows.TextDecorations._cctor = function () {
};

System.Windows.Threading.Dispatcher.get_MainDispatcher = function () {
	if (System.Windows.Threading.Dispatcher._current === null) {
		System.Windows.Threading.Dispatcher._current = new System.Windows.Threading.Dispatcher();
	}
	return System.Windows.Threading.Dispatcher._current;
};
System.Windows.Threading.Dispatcher.ResetMainDispatcher = function () {
	System.Windows.Threading.Dispatcher._current = null;
};
System.Windows.Threading.Dispatcher.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
	this._queuedDelegates = JSIL.New(System.Collections.Generic.Queue$b1.Of(System.Windows.Threading.DispatcherOperation), "_ctor$0", []);
	this._disposed = false;
	if (!$asm02.System.Windows.Hosting.NativeHost.IsCustomHost) {
		var callbackCookie = JSIL.New($asm02.System.Windows.Hosting.CallbackCookie, "_ctor$1", [JSIL.Delegate.New("System.Action`1[System.Object]", this, System.Windows.Threading.Dispatcher.prototype.OnInvoke), false, null]);
		this._callbackHandle = callbackCookie.FunctionHandle;
		$asm02.System.Windows.Hosting.NativeHost.Current.RuntimeHost.IManagedRuntimeHost_AddReference(this._callbackHandle);
		callbackCookie.Dispose();
		return;
	}
	this._timer = JSIL.New(System.Windows.Threading.DispatcherTimer, "_ctor$0", []);
	(this._timer.Interval = System.TimeSpan.FromMilliseconds(100).MemberwiseClone());
	this._timer.add_Tick(JSIL.Delegate.New("System.EventHandler", this, System.Windows.Threading.Dispatcher.prototype.TimerTick));
	this._timer.Start();
};
System.Windows.Threading.Dispatcher.prototype.CheckAccess = function () {
	return ($asm02.System.Windows.Hosting.NativeHost.Current.UIThreadID === System.Threading.Thread.CurrentThread.ManagedThreadId);
};
System.Windows.Threading.Dispatcher.prototype.BeginInvoke$0 = function (a) {
	return this.BeginInvoke$2(System.Windows.Threading.DispatcherPriority.Background, a, JSIL.Array.New(System.Object, 0));
};
System.Windows.Threading.Dispatcher.prototype.BeginInvoke$1 = function (d, args) {
	return this.BeginInvoke$2(System.Windows.Threading.DispatcherPriority.Background, d, args);
};
System.Windows.Threading.Dispatcher.prototype.BeginInvoke$2 = function (priority, d, args) {
	var queuedDelegates = null;
	var dispatcherOperation = null;
	System.Threading.Monitor.Enter((queuedDelegates = this._queuedDelegates));
	try {
		if (System.IntPtr.op_Inequality(this._callbackHandle, System.IntPtr.Zero)) {
			dispatcherOperation = new System.Windows.Threading.DispatcherOperation(priority, d, args);
			this._queuedDelegates.Enqueue(dispatcherOperation);
			if (this._queuedDelegates.Count === 1) {
				$asm02.System.Windows.Hosting.NativeHost.Current.RuntimeHost.IManagedRuntimeHost_RaiseAsyncCallback(this._callbackHandle, false);
			}
		} else if (!this._disposed) {
			dispatcherOperation = new System.Windows.Threading.DispatcherOperation(priority, d, args);
			this._queuedDelegates.Enqueue(dispatcherOperation);
		}
	} finally {
		System.Threading.Monitor.Exit(queuedDelegates);
	}
	return dispatcherOperation;
};
System.Windows.Threading.Dispatcher.prototype.BeginFastInvoke$0 = function (a) {
	return this.BeginFastInvoke$2(System.Windows.Threading.DispatcherPriority.Background, a, JSIL.Array.New(System.Object, 0));
};
System.Windows.Threading.Dispatcher.prototype.BeginFastInvoke$1 = function (d, args) {
	return this.BeginFastInvoke$2(System.Windows.Threading.DispatcherPriority.Background, d, args);
};
System.Windows.Threading.Dispatcher.prototype.BeginFastInvoke$2 = function (priority, d, args) {
	var queuedDelegates = null;
	var dispatcherOperation = null;
	System.Threading.Monitor.Enter((queuedDelegates = this._queuedDelegates));
	try {
		if (System.IntPtr.op_Inequality(this._callbackHandle, System.IntPtr.Zero)) {
			dispatcherOperation = new System.Windows.Threading.DispatcherOperation(priority, d, args);
			this._queuedDelegates.Enqueue(dispatcherOperation);
			if (this._queuedDelegates.Count === 1) {
				$asm02.System.Windows.Hosting.NativeHost.Current.RuntimeHost.IManagedRuntimeHost_RaiseAsyncCallback(this._callbackHandle, true);
			}
		}
	} finally {
		System.Threading.Monitor.Exit(queuedDelegates);
	}
	return dispatcherOperation;
};
System.Windows.Threading.Dispatcher.prototype.TimerTick = function (sender, e) {
	this.Dispatch(13);
};
System.Windows.Threading.Dispatcher.prototype.Invoke$0 = function (d, args) {
	return this.Invoke$1(System.Windows.Threading.DispatcherPriority.Background, d, args);
};
System.Windows.Threading.Dispatcher.prototype.Invoke$1 = function (priority, d, args) {
	var $l$gc__DisplayClass = new $asm02.System.Windows.Threading.Dispatcher.$l$gc__DisplayClass1();
	$l$gc__DisplayClass.d = d;
	$l$gc__DisplayClass.args = args;
	if (this.CheckAccess()) {
		if (priority !== System.Windows.Threading.DispatcherPriority.Send) {
			throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm02.System.Windows.Resx.GetString$2("NativeHost_OnUIThread"), "priority"]);
		}
		$l$gc__DisplayClass.d.DynamicInvoke($l$gc__DisplayClass.args);
		return new System.Windows.Threading.DispatcherOperation(priority, $l$gc__DisplayClass.d, $l$gc__DisplayClass.args);
	} else {
		$l$gc__DisplayClass.waitHandle = new System.Threading.ManualResetEvent(false);
		var dispatcherOperation = this.BeginInvoke$2(priority, function () {
				try {
					$l$gc__DisplayClass.d.DynamicInvoke($l$gc__DisplayClass.args);
				} finally {
					$l$gc__DisplayClass.waitHandle.Set();
				}
			}, JSIL.Array.New(System.Object, 0));
		if (dispatcherOperation !== null) {
			$l$gc__DisplayClass.waitHandle.WaitOne$2();
			return dispatcherOperation;
		}
		throw JSIL.New(System.ObjectDisposedException, "_ctor$1", ["Dispatcher"]);
	}
};
System.Windows.Threading.Dispatcher.prototype.FastInvoke$0 = function (d, args) {
	return this.FastInvoke$1(System.Windows.Threading.DispatcherPriority.Background, d, args);
};
System.Windows.Threading.Dispatcher.prototype.FastInvoke$1 = function (priority, d, args) {
	var $l$gc__DisplayClass = new $asm02.System.Windows.Threading.Dispatcher.$l$gc__DisplayClass4();
	$l$gc__DisplayClass.d = d;
	$l$gc__DisplayClass.args = args;
	if (this.CheckAccess()) {
		if (priority !== System.Windows.Threading.DispatcherPriority.Send) {
			throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm02.System.Windows.Resx.GetString$2("NativeHost_OnUIThread"), "priority"]);
		}
		$l$gc__DisplayClass.d.DynamicInvoke($l$gc__DisplayClass.args);
		return new System.Windows.Threading.DispatcherOperation(priority, $l$gc__DisplayClass.d, $l$gc__DisplayClass.args);
	} else {
		$l$gc__DisplayClass.waitHandle = new System.Threading.ManualResetEvent(false);
		var dispatcherOperation = this.BeginFastInvoke$2(priority, function () {
				try {
					$l$gc__DisplayClass.d.DynamicInvoke($l$gc__DisplayClass.args);
				} finally {
					$l$gc__DisplayClass.waitHandle.Set();
				}
			}, JSIL.Array.New(System.Object, 0));
		if (dispatcherOperation !== null) {
			$l$gc__DisplayClass.waitHandle.WaitOne$2();
			return dispatcherOperation;
		}
		throw JSIL.New(System.ObjectDisposedException, "_ctor$1", ["Dispatcher"]);
	}
};
System.Windows.Threading.Dispatcher.prototype.OnInvoke = function (context) {
	this.Dispatch(13);
};
System.Windows.Threading.Dispatcher.prototype.Dispatch = function (priority) {
	var queuedDelegates = null;
	if (this._queuedDelegates.Count > 0) {
		System.Threading.Monitor.Enter((queuedDelegates = this._queuedDelegates));
		try {
			var array = this._queuedDelegates.ToArray();
			this._queuedDelegates.Clear();
		} finally {
			System.Threading.Monitor.Exit(queuedDelegates);
		}
		if (priority === System.Windows.Threading.DispatcherPriority.Normal) {
			var array2 = array;
		__loop0__: 
			for (var i = 0; i < array2.length; ++i) {
				var dispatcherOperation = array2[i];
				if (dispatcherOperation.Priority === priority) {
					dispatcherOperation.Invoke();
				}
			}
			return;
		}
		var array3 = array;
	__loop1__: 
		for (var j = 0; j < array3.length; ++j) {
			array3[j].Invoke();
		}
	}
};
System.Windows.Threading.Dispatcher.prototype.Dispose = function () {
	var queuedDelegates = null;
	System.Threading.Monitor.Enter((queuedDelegates = this._queuedDelegates));
	try {
		this._disposed = true;
		if (System.IntPtr.op_Inequality(this._callbackHandle, System.IntPtr.Zero)) {
			this._callbackHandle = System.IntPtr.Zero;
			this.Dispatch(System.Windows.Threading.DispatcherPriority.Normal);
			this.Dispatch(System.Windows.Threading.DispatcherPriority.Send);
			$asm02.System.Windows.Hosting.NativeHost.Current.RuntimeHost.IManagedRuntimeHost_ReleaseReference(this._callbackHandle);
		}
	} finally {
		System.Threading.Monitor.Exit(queuedDelegates);
	}
};
JSIL.OverloadedMethod(System.Windows.Threading.Dispatcher.prototype, "BeginInvoke", [
		["BeginInvoke$0", [System.Action]], 
		["BeginInvoke$1", [System.Delegate, System.Array.Of(System.Object)]], 
		["BeginInvoke$2", [System.Windows.Threading.DispatcherPriority, System.Delegate, System.Array.Of(System.Object)]]
	]);
JSIL.OverloadedMethod(System.Windows.Threading.Dispatcher.prototype, "BeginFastInvoke", [
		["BeginFastInvoke$0", [System.Action]], 
		["BeginFastInvoke$1", [System.Delegate, System.Array.Of(System.Object)]], 
		["BeginFastInvoke$2", [System.Windows.Threading.DispatcherPriority, System.Delegate, System.Array.Of(System.Object)]]
	]);
JSIL.OverloadedMethod(System.Windows.Threading.Dispatcher.prototype, "Invoke", [
		["Invoke$0", [System.Delegate, System.Array.Of(System.Object)]], 
		["Invoke$1", [System.Windows.Threading.DispatcherPriority, System.Delegate, System.Array.Of(System.Object)]]
	]);
JSIL.OverloadedMethod(System.Windows.Threading.Dispatcher.prototype, "FastInvoke", [
		["FastInvoke$0", [System.Delegate, System.Array.Of(System.Object)]], 
		["FastInvoke$1", [System.Windows.Threading.DispatcherPriority, System.Delegate, System.Array.Of(System.Object)]]
	]);
JSIL.MakeProperty(System.Windows.Threading.Dispatcher, "MainDispatcher", 
	System.Windows.Threading.Dispatcher.get_MainDispatcher, null);
System.Windows.Threading.Dispatcher._current = null;
System.Windows.Threading.Dispatcher.prototype._callbackHandle = 0;
System.Windows.Threading.Dispatcher.prototype._queuedDelegates = null;
System.Windows.Threading.Dispatcher.prototype._timer = null;
System.Windows.Threading.Dispatcher.prototype._disposed = false;

$asm02.System.Windows.Threading.Dispatcher.$l$gc__DisplayClass1.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm02.System.Windows.Threading.Dispatcher.$l$gc__DisplayClass1.prototype.waitHandle = null;
$asm02.System.Windows.Threading.Dispatcher.$l$gc__DisplayClass1.prototype.d = null;
$asm02.System.Windows.Threading.Dispatcher.$l$gc__DisplayClass1.prototype.args = null;

$asm02.System.Windows.Threading.Dispatcher.$l$gc__DisplayClass4.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm02.System.Windows.Threading.Dispatcher.$l$gc__DisplayClass4.prototype.waitHandle = null;
$asm02.System.Windows.Threading.Dispatcher.$l$gc__DisplayClass4.prototype.d = null;
$asm02.System.Windows.Threading.Dispatcher.$l$gc__DisplayClass4.prototype.args = null;

System.Windows.Threading.DispatcherSynchronizationContext.prototype._ctor$0 = function () {
	this._ctor$1(System.Windows.Threading.Dispatcher.MainDispatcher);
};
System.Windows.Threading.DispatcherSynchronizationContext.prototype._ctor$1 = function (dispatcher) {
	System.Threading.SynchronizationContext.prototype._ctor.call(this);
	if (dispatcher === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["dispatcher"]);
	}
	this._dispatcher = dispatcher;
};
System.Windows.Threading.DispatcherSynchronizationContext.prototype.CreateCopy = function () {
	return JSIL.New(System.Windows.Threading.DispatcherSynchronizationContext, "_ctor$1", [this._dispatcher]);
};
System.Windows.Threading.DispatcherSynchronizationContext.prototype.Post = function (d, state) {
	this._dispatcher.BeginInvoke$2(System.Windows.Threading.DispatcherPriority.Normal, d, [state]);
};
System.Windows.Threading.DispatcherSynchronizationContext.prototype.Send = function (d, state) {
	this._dispatcher.Invoke$1(System.Windows.Threading.DispatcherPriority.Send, d, [state]);
};
JSIL.OverloadedMethod(System.Windows.Threading.DispatcherSynchronizationContext.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Windows.Threading.Dispatcher]]
	]);
System.Windows.Threading.DispatcherSynchronizationContext.prototype._dispatcher = null;

System.Windows.Threading.DispatcherOperation.prototype.get_Priority = function () {
	return this._priority;
};
System.Windows.Threading.DispatcherOperation.prototype._ctor = function (priority, operation, args) {
	System.Object.prototype._ctor.call(this);
	this._priority = priority;
	this._operation = operation;
	this._args = args;
};
System.Windows.Threading.DispatcherOperation.prototype.Invoke = function () {
	try {
		this._operation.DynamicInvoke(this._args);
	} catch ($exception) {
		var arg_14_0 = $exception;
		$asm02.MS.Internal.Error.GetXresultForUserException(arg_14_0);
	}
};
JSIL.MakeProperty(System.Windows.Threading.DispatcherOperation.prototype, "Priority", 
	System.Windows.Threading.DispatcherOperation.prototype.get_Priority, null);
System.Windows.Threading.DispatcherOperation.prototype._priority = 0;
System.Windows.Threading.DispatcherOperation.prototype._operation = null;
System.Windows.Threading.DispatcherOperation.prototype._args = null;

System.Windows.Media.VisualTreeHelper.GetChild = function (reference, childIndex) {
	var uIElementCollection = JSIL.TryCast(System.Windows.Media.VisualTreeHelper.GetRelative(reference, $asm02.System.Windows.Media.VisualTreeHelper.RelativeKind.Child), System.Windows.Controls.UIElementCollection);
	if (!((uIElementCollection !== null) && 
			(uIElementCollection.Count !== 0) && 
			(childIndex >= 0) && (childIndex < uIElementCollection.Count))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["childIndex"]);
	}
	return uIElementCollection.get_Item(childIndex);
};
System.Windows.Media.VisualTreeHelper.GetChildrenCount = function (reference) {
	var uIElementCollection = JSIL.TryCast(System.Windows.Media.VisualTreeHelper.GetRelative(reference, $asm02.System.Windows.Media.VisualTreeHelper.RelativeKind.Child), System.Windows.Controls.UIElementCollection);
	if (uIElementCollection === null) {
		return 0;
	}
	return uIElementCollection.Count;
};
System.Windows.Media.VisualTreeHelper.GetParent = function (reference) {
	return System.Windows.Media.VisualTreeHelper.GetRelative(reference, $asm02.System.Windows.Media.VisualTreeHelper.RelativeKind.Parent);
};
System.Windows.Media.VisualTreeHelper.GetRelative = function (reference, relativeKind) {
	var dependencyObject = null;
	if (!((reference !== null) && JSIL.TryCast(reference, System.Windows.UIElement))) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("VisualTreeHelper_ReferenceIsNotAValidVisualDO")]);
	}
	if (!((relativeKind === $asm02.System.Windows.Media.VisualTreeHelper.RelativeKind.Parent) || !JSIL.Cast(relativeKind, System.Boolean))) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", ["relativeKind"]);
	}
	dependencyObject = $asm02.MS.Internal.XcpImports.DependencyObject_GetVisualRelative(reference, Math.floor(relativeKind));
	if (relativeKind === $asm02.System.Windows.Media.VisualTreeHelper.RelativeKind.Parent) {
	__loop0__: 
		for (; (dependencyObject !== null) && (JSIL.TryCast(dependencyObject, System.Windows.UIElement) === null); dependencyObject = $asm02.MS.Internal.XcpImports.DependencyObject_GetVisualRelative(dependencyObject, Math.floor(relativeKind))) {
		}
		dependencyObject = JSIL.TryCast(dependencyObject, System.Windows.UIElement);
	}
	return dependencyObject;
};
System.Windows.Media.VisualTreeHelper.FindElementsInHostCoordinates$0 = function (intersectingPoint, subtree) {
	return $asm02.MS.Internal.XcpImports.UIElement_HitTestPoint(subtree, intersectingPoint);
};
System.Windows.Media.VisualTreeHelper.FindElementsInHostCoordinates$1 = function (intersectingRect, subtree) {
	return $asm02.MS.Internal.XcpImports.UIElement_HitTestRect(subtree, intersectingRect);
};
System.Windows.Media.VisualTreeHelper.IsAncestor = function (child, root) {
__loop0__: 
	while (child) {
		if (child === root) {
			return true;
		}
		child = System.Windows.Media.VisualTreeHelper.GetParent(child);
	}
	return false;
};
System.Windows.Media.VisualTreeHelper.GetOpenPopups = function () {
	return $asm02.MS.Internal.XcpImports.GetOpenPopups();
};
JSIL.OverloadedMethod(System.Windows.Media.VisualTreeHelper, "FindElementsInHostCoordinates", [
		["FindElementsInHostCoordinates$0", [System.Windows.Point, System.Windows.UIElement]], 
		["FindElementsInHostCoordinates$1", [System.Windows.Rect, System.Windows.UIElement]]
	]);

System.Windows.Automation.Peers.AutomationPeer.prototype._ctor$0 = function () {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 231);
};
System.Windows.Automation.Peers.AutomationPeer.prototype._ctor$1 = function (index, nativeDO) {
	System.Windows.DependencyObject.prototype._ctor$2.call(this, index, nativeDO);
};
System.Windows.Automation.Peers.AutomationPeer.prototype.GetAcceleratorKey = function () {
	return this.GetAcceleratorKeyCore();
};
System.Windows.Automation.Peers.AutomationPeer.prototype.GetAccessKey = function () {
	return this.GetAccessKeyCore();
};
System.Windows.Automation.Peers.AutomationPeer.prototype.GetAutomationControlType = function () {
	return this.GetAutomationControlTypeCore();
};
System.Windows.Automation.Peers.AutomationPeer.prototype.GetAutomationId = function () {
	return this.GetAutomationIdCore();
};
System.Windows.Automation.Peers.AutomationPeer.prototype.GetBoundingRectangle = function () {
	return this.GetBoundingRectangleCore();
};
System.Windows.Automation.Peers.AutomationPeer.prototype.GetChildren = function () {
	return this.GetChildrenCore();
};
System.Windows.Automation.Peers.AutomationPeer.prototype.GetClassName = function () {
	return this.GetClassNameCore();
};
System.Windows.Automation.Peers.AutomationPeer.prototype.GetClickablePoint = function () {
	return this.GetClickablePointCore();
};
System.Windows.Automation.Peers.AutomationPeer.prototype.GetHelpText = function () {
	return this.GetHelpTextCore();
};
System.Windows.Automation.Peers.AutomationPeer.prototype.GetItemStatus = function () {
	return this.GetItemStatusCore();
};
System.Windows.Automation.Peers.AutomationPeer.prototype.GetItemType = function () {
	return this.GetItemTypeCore();
};
System.Windows.Automation.Peers.AutomationPeer.prototype.GetLabeledBy = function () {
	return this.GetLabeledByCore();
};
System.Windows.Automation.Peers.AutomationPeer.prototype.GetLocalizedControlType = function () {
	return this.GetLocalizedControlTypeCore();
};
System.Windows.Automation.Peers.AutomationPeer.prototype.GetName = function () {
	var labeledByCore = this.GetLabeledByCore();
	if (labeledByCore !== null) {
		return labeledByCore.GetName();
	}
	return this.GetNameCore();
};
System.Windows.Automation.Peers.AutomationPeer.prototype.GetOrientation = function () {
	return this.GetOrientationCore();
};
System.Windows.Automation.Peers.AutomationPeer.prototype.GetParent = function () {
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetAutomationPeerValue(this, System.Windows.AutomationPropertiesEnum.ParentProperty), System.Windows.Automation.Peers.AutomationPeer);
};
System.Windows.Automation.Peers.AutomationPeer.prototype.SetAutomationPeerParent = function (parent) {
	$asm02.MS.Internal.XcpImports.SetAutomationPeerParent(this, parent);
};
System.Windows.Automation.Peers.AutomationPeer.prototype.HasKeyboardFocus = function () {
	return this.HasKeyboardFocusCore();
};
System.Windows.Automation.Peers.AutomationPeer.prototype.InvalidatePeer = function () {
	$asm02.MS.Internal.XcpImports.CallAutomationPeerMethod(this, 0);
};
System.Windows.Automation.Peers.AutomationPeer.prototype.IsContentElement = function () {
	return this.IsContentElementCore();
};
System.Windows.Automation.Peers.AutomationPeer.prototype.IsControlElement = function () {
	return this.IsControlElementCore();
};
System.Windows.Automation.Peers.AutomationPeer.prototype.IsEnabled = function () {
	return this.IsEnabledCore();
};
System.Windows.Automation.Peers.AutomationPeer.prototype.IsKeyboardFocusable = function () {
	return this.IsKeyboardFocusableCore();
};
System.Windows.Automation.Peers.AutomationPeer.prototype.IsOffscreen = function () {
	return this.IsOffscreenCore();
};
System.Windows.Automation.Peers.AutomationPeer.prototype.IsPassword = function () {
	return this.IsPasswordCore();
};
System.Windows.Automation.Peers.AutomationPeer.prototype.IsRequiredForForm = function () {
	return this.IsRequiredForFormCore();
};
System.Windows.Automation.Peers.AutomationPeer.prototype.SetFocus = function () {
	this.SetFocusCore();
};
System.Windows.Automation.Peers.AutomationPeer.ListenerExists = function (eventId) {
	return $asm02.MS.Internal.XcpImports.AutomationListenerExists(eventId);
};
System.Windows.Automation.Peers.AutomationPeer.prototype.PeerFromProvider = function (provider) {
	return provider.GetAutomationPeer();
};
System.Windows.Automation.Peers.AutomationPeer.prototype.ProviderFromPeer = function (peer) {
	if (peer !== null) {
		return JSIL.New(System.Windows.Automation.Provider.IRawElementProviderSimple, "_ctor$1", [peer]);
	}
	return null;
};
System.Windows.Automation.Peers.AutomationPeer.prototype.get_EventsSource = function () {
	return this.m_eventsSource;
};
System.Windows.Automation.Peers.AutomationPeer.prototype.set_EventsSource = function (value) {
	this.m_eventsSource = value;
};
System.Windows.Automation.Peers.AutomationPeer.prototype.RaiseAutomationEvent = function (eventId) {
	$asm02.MS.Internal.XcpImports.CheckThread();
	if (this.m_eventsSource !== null) {
		$asm02.MS.Internal.XcpImports.AutomationRaiseAutomationEvent(this.m_eventsSource, eventId);
		return;
	}
	$asm02.MS.Internal.XcpImports.AutomationRaiseAutomationEvent(this, eventId);
};
System.Windows.Automation.Peers.AutomationPeer.prototype.RaisePropertyChangedEvent = JSIL.UntranslatableFunction("System.Void System.Windows.Automation.Peers.AutomationPeer::RaisePropertyChangedEvent(System.Windows.Automation.AutomationProperty,System.Object,System.Object)");
System.Windows.Automation.Peers.AutomationPeer.GetAutomationPeerStringValue = JSIL.UntranslatableFunction("System.UInt32 System.Windows.Automation.Peers.AutomationPeer::GetAutomationPeerStringValue(System.IntPtr,System.Windows.AutomationPropertiesEnum,System.IntPtr,System.Int32&)");
System.Windows.Automation.Peers.AutomationPeer.GetAutomationPeerIntValue = function (nativeTarget, eProperty, /* ref */ nRetVal) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				try {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								var automationPeer = JSIL.Cast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeTarget), System.Windows.Automation.Peers.AutomationPeer);
								switch (Number(eProperty)) {
									case 2: 
										nRetVal.value = Math.floor(automationPeer.GetAutomationControlType());
										__label1__ = "IL_136";
										continue __step1__;
									case 13: 
										nRetVal.value = Math.floor(automationPeer.GetOrientation());
										__label1__ = "IL_136";
										continue __step1__;
									case 14: 
										nRetVal.value = automationPeer.HasKeyboardFocus() ? -1 : 0;
										__label1__ = "IL_136";
										continue __step1__;
									case 15: 
										nRetVal.value = automationPeer.IsContentElement() ? -1 : 0;
										__label1__ = "IL_136";
										continue __step1__;
									case 16: 
										nRetVal.value = automationPeer.IsControlElement() ? -1 : 0;
										__label1__ = "IL_136";
										continue __step1__;
									case 17: 
										nRetVal.value = automationPeer.IsEnabled() ? -1 : 0;
										__label1__ = "IL_136";
										continue __step1__;
									case 18: 
										nRetVal.value = automationPeer.IsKeyboardFocusable() ? -1 : 0;
										__label1__ = "IL_136";
										continue __step1__;
									case 19: 
										nRetVal.value = automationPeer.IsOffscreen() ? -1 : 0;
										__label1__ = "IL_136";
										continue __step1__;
									case 20: 
										nRetVal.value = automationPeer.IsPassword() ? -1 : 0;
										__label1__ = "IL_136";
										continue __step1__;
									case 21: 
										nRetVal.value = automationPeer.IsRequiredForForm() ? -1 : 0;
										__label1__ = "IL_136";
										continue __step1__;
									case 22: 
										nRetVal.value = automationPeer.IsRequiredForForm() ? -1 : 0;
										__label1__ = "IL_136";
										continue __step1__;
									case 23: 
										nRetVal.value = automationPeer.IsRequiredForForm() ? -1 : 0;
										__label1__ = "IL_136";
										continue __step1__;
								}
								nRetVal.value = 0;
								__label1__ = "IL_136";
								continue __step1__;
								break;
							case "IL_136":
								break __step1__;
						}
					}
				} catch ($exception) {
					var arg_138_0 = $exception;
					return System.Windows.Automation.Peers.AutomationPeer.GetXresultForAutomationException(arg_138_0);
				}
				return 0;
				break __step0__;
		}
	}
};
System.Windows.Automation.Peers.AutomationPeer.GetAutomationPeerPointValue = function (nativeTarget, eProperty, /* ref */ pPointF) {
	try {
		var automationPeer = JSIL.Cast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeTarget), System.Windows.Automation.Peers.AutomationPeer);
		var clickablePoint = automationPeer.GetClickablePoint().MemberwiseClone();
		pPointF.value.x = clickablePoint.X;
		pPointF.value.y = clickablePoint.Y;
	} catch ($exception) {
		var arg_31_0 = $exception;
		return System.Windows.Automation.Peers.AutomationPeer.GetXresultForAutomationException(arg_31_0);
	}
	return 0;
};
System.Windows.Automation.Peers.AutomationPeer.GetAutomationPeerRectValue = function (nativeTarget, eProperty, /* ref */ pRectF) {
	try {
		var automationPeer = JSIL.Cast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeTarget), System.Windows.Automation.Peers.AutomationPeer);
		var boundingRectangle = automationPeer.GetBoundingRectangle().MemberwiseClone();
		pRectF.value.x = boundingRectangle.X;
		pRectF.value.y = boundingRectangle.Y;
		pRectF.value.width = boundingRectangle.Width;
		pRectF.value.height = boundingRectangle.Height;
	} catch ($exception) {
		var arg_4D_0 = $exception;
		return System.Windows.Automation.Peers.AutomationPeer.GetXresultForAutomationException(arg_4D_0);
	}
	return 0;
};
System.Windows.Automation.Peers.AutomationPeer.GetAutomationPeerAPValue = function (nativeTarget, eProperty, /* ref */ returnAP) {
	returnAP.value = JSIL.Cast(JSIL.IgnoredMember("op_Explicit(value)"), System.IntPtr);
	try {
		var automationPeer = JSIL.Cast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeTarget), System.Windows.Automation.Peers.AutomationPeer);
		var labeledBy = automationPeer.GetLabeledBy();
		if (labeledBy !== null) {
			returnAP.value = labeledBy.NativeObject;
		}
	} catch ($exception) {
		var arg_31_0 = $exception;
		return System.Windows.Automation.Peers.AutomationPeer.GetXresultForAutomationException(arg_31_0);
	}
	return 0;
};
System.Windows.Automation.Peers.AutomationPeer.CallAutomationPeerMethod = function (nativeTarget, methodIndex) {
	try {
		var automationPeer = JSIL.Cast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeTarget), System.Windows.Automation.Peers.AutomationPeer);
		if (methodIndex === 0) {
			automationPeer.SetFocus();
		}
	} catch ($exception) {
		var arg_17_0 = $exception;
		return System.Windows.Automation.Peers.AutomationPeer.GetXresultForAutomationException(arg_17_0);
	}
	return 0;
};
System.Windows.Automation.Peers.AutomationPeer.GetAutomationPeerChildren = JSIL.UntranslatableFunction("System.UInt32 System.Windows.Automation.Peers.AutomationPeer::GetAutomationPeerChildren(System.IntPtr,System.UInt32,System.Int32&,System.IntPtr&)");
System.Windows.Automation.Peers.AutomationPeer.GetPattern = function (nativeTarget, /* ref */ nativeInterface, eInterface) {
	try {
		var automationPeer = JSIL.Cast($asm02.MS.Internal.ManagedPeerTable.GetManagedPeer(nativeTarget), System.Windows.Automation.Peers.AutomationPeer);
		var pattern = automationPeer.GetPattern(eInterface);
		if (pattern !== null) {
			var managedObjectReference = JSIL.New($asm02.MS.Internal.ManagedObjectReference, "_ctor$1", [pattern]);
			nativeInterface.value = managedObjectReference.NativeObject;
			managedObjectReference.PegManagedPeerNoRef();
		} else {
			nativeInterface.value = System.IntPtr.op_Explicit$0(0);
		}
	} catch ($exception) {
		var arg_40_0 = $exception;
		return System.Windows.Automation.Peers.AutomationPeer.GetXresultForAutomationException(arg_40_0);
	}
	return 0;
};
System.Windows.Automation.Peers.AutomationPeer.UIATextRangeInvoke = JSIL.UntranslatableFunction("System.UInt32 System.Windows.Automation.Peers.AutomationPeer::UIATextRangeInvoke(System.IntPtr,System.Int32,System.Int32,System.IntPtr,MS.Internal.CValue&)");
System.Windows.Automation.Peers.AutomationPeer.UIAPatternInvoke = JSIL.UntranslatableFunction("System.UInt32 System.Windows.Automation.Peers.AutomationPeer::UIAPatternInvoke(System.IntPtr,System.Windows.Automation.Peers.PatternInterface,System.Int32,System.Int32,System.IntPtr,MS.Internal.CValue&)");
System.Windows.Automation.Peers.AutomationPeer.prototype.get_Children = function () {
	if (this.m_children !== null) {
		return this.m_children;
	}
	this.m_children = this.GetChildrenCore();
	return this.m_children;
};
System.Windows.Automation.Peers.AutomationPeer.prototype.set_Children = function (value) {
	this.m_children = value;
};
System.Windows.Automation.Peers.AutomationPeer.GetXresultForAutomationException = function (ex) {
	var xresultForException = $asm02.MS.Internal.Error.GetXresultForException(ex);
	$asm02.MS.Internal.Error.ClearException();
	if (JSIL.TryCast(ex, System.Windows.Automation.ElementNotEnabledException) !== null) {
		return -2147220992;
	}
	if (JSIL.TryCast(ex, System.Windows.Automation.ElementNotAvailableException) !== null) {
		return -2147220991;
	}
	if (JSIL.TryCast(ex, System.InvalidOperationException) !== null) {
		return -2146233079;
	}
	if (JSIL.TryCast(ex, System.TypeLoadException) !== null) {
		return -2146498353;
	}
	return xresultForException;
};
JSIL.OverloadedMethod(System.Windows.Automation.Peers.AutomationPeer.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UInt32, System.IntPtr]]
	]);
JSIL.MakeProperty(System.Windows.Automation.Peers.AutomationPeer.prototype, "EventsSource", 
	System.Windows.Automation.Peers.AutomationPeer.prototype.get_EventsSource, System.Windows.Automation.Peers.AutomationPeer.prototype.set_EventsSource);
JSIL.MakeProperty(System.Windows.Automation.Peers.AutomationPeer.prototype, "Children", 
	System.Windows.Automation.Peers.AutomationPeer.prototype.get_Children, System.Windows.Automation.Peers.AutomationPeer.prototype.set_Children);
Object.defineProperty(System.Windows.Automation.Peers.AutomationPeer, "NativeAutomatinPeer", {
		"value": 231}
);
Object.defineProperty(System.Windows.Automation.Peers.AutomationPeer, "ElementNotEnabled", {
		"value": 2147746304}
);
Object.defineProperty(System.Windows.Automation.Peers.AutomationPeer, "ElementNotAvailable", {
		"value": 2147746305}
);
Object.defineProperty(System.Windows.Automation.Peers.AutomationPeer, "InvalidOperation", {
		"value": 2148734217}
);
System.Windows.Automation.Peers.AutomationPeer.prototype.m_children = null;
System.Windows.Automation.Peers.AutomationPeer.prototype.m_eventsSource = null;

System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetNativeObject = function (obj, callFromSL2Method) {
	if (!((obj === null) && (!callFromSL2Method || 
				!$asm02.MS.Internal.QuirksMode.ShouldFrameworkElementAutomationPeerConstructorThrowNullRefForNullOwner()))) {
		return obj.NativeObject;
	}
	return System.IntPtr.Zero;
};
System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetPeerId = function (uie) {
	return System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetPeerIdWithIndex(249, uie);
};
System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetPeerIdWithIndex = function (index, uie) {
	if (uie !== null) {
		return index;
	}
	return 231;
};
System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype._ctor$0 = function (owner) {
	System.Windows.Automation.Peers.AutomationPeer.prototype._ctor$1.call(this, System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetPeerId(owner), System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetNativeObject(owner, true));
	if (owner === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["owner"]);
	}
	this._owner = owner;
};
System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype._ctor$1 = function (index, uie) {
	System.Windows.Automation.Peers.AutomationPeer.prototype._ctor$1.call(this, System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetPeerIdWithIndex(index, uie), System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetNativeObject(uie, true));
	if (uie === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["uie"]);
	}
	this._owner = uie;
};
System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype._ctor$2 = function (item) {
	System.Windows.Automation.Peers.AutomationPeer.prototype._ctor$1.call(
		this, System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetPeerId(JSIL.TryCast(item, System.Windows.UIElement)), 
		System.Windows.Automation.Peers.FrameworkElementAutomationPeer.GetNativeObject(JSIL.TryCast(item, System.Windows.DependencyObject), false)
	);
	this._owner = JSIL.TryCast(item, System.Windows.UIElement);
};
System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner = function () {
	return this._owner;
};
System.Windows.Automation.Peers.FrameworkElementAutomationPeer.FromElement = function (element) {
	if (element === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["element"]);
	}
	return element.GetAutomationPeer();
};
System.Windows.Automation.Peers.FrameworkElementAutomationPeer.CreatePeerForElement = function (element) {
	if (element === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["element"]);
	}
	return element.GetOrCreateAutomationPeer();
};
System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.GetPattern = function (patternInterface) {
	return null;
};
System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.GetAcceleratorKeyCore = function () {
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetAutomationPeerValue(this, System.Windows.AutomationPropertiesEnum.AcceleratorKeyProperty), System.String);
};
System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.GetAccessKeyCore = function () {
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetAutomationPeerValue(this, System.Windows.AutomationPropertiesEnum.AccessKeyProperty), System.String);
};
System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.GetAutomationControlTypeCore = function () {
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetAutomationPeerValue(this, System.Windows.AutomationPropertiesEnum.ControlTypeProperty), System.Windows.Automation.Peers.AutomationControlType);
};
System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.GetAutomationIdCore = function () {
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetAutomationPeerValue(this, System.Windows.AutomationPropertiesEnum.AutomationIdProperty), System.String);
};
System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.GetBoundingRectangleCore = function () {
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetAutomationPeerValue(this, System.Windows.AutomationPropertiesEnum.BoundingRectangleProperty), System.Windows.Rect);
};
System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.GetChildrenCore = function () {
	var $l$gc__DisplayClass = new $asm02.System.Windows.Automation.Peers.FrameworkElementAutomationPeer.$l$gc__DisplayClass1();
	$l$gc__DisplayClass.children = null;
	this.GetChildrenCore_Iterate(this.Owner, function (peer) {
			if ($l$gc__DisplayClass.children === null) {
				$l$gc__DisplayClass.children = new (System.Collections.Generic.List$b1.Of(System.Windows.Automation.Peers.AutomationPeer)) ();
			}
			$l$gc__DisplayClass.children.Add(peer);
			return false;
		});
	return $l$gc__DisplayClass.children;
};
System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.GetClassNameCore = function () {
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetAutomationPeerValue(this, System.Windows.AutomationPropertiesEnum.ClassNameProperty), System.String);
};
System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.GetClickablePointCore = function () {
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetAutomationPeerValue(this, System.Windows.AutomationPropertiesEnum.ClickablePointProperty), System.Windows.Point);
};
System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.GetHelpTextCore = function () {
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetAutomationPeerValue(this, System.Windows.AutomationPropertiesEnum.HelpTextProperty), System.String);
};
System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.GetItemStatusCore = function () {
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetAutomationPeerValue(this, System.Windows.AutomationPropertiesEnum.ItemStatusProperty), System.String);
};
System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.GetItemTypeCore = function () {
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetAutomationPeerValue(this, System.Windows.AutomationPropertiesEnum.ItemTypeProperty), System.String);
};
System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.GetLabeledByCore = function () {
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetAutomationPeerValue(this, System.Windows.AutomationPropertiesEnum.LabeledByProperty), System.Windows.Automation.Peers.AutomationPeer);
};
System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.GetLocalizedControlTypeCore = function () {
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetAutomationPeerValue(this, System.Windows.AutomationPropertiesEnum.LocalizedControlTypeProperty), System.String);
};
System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.GetNameCore = function () {
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetAutomationPeerValue(this, System.Windows.AutomationPropertiesEnum.NameProperty), System.String);
};
System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.GetOrientationCore = function () {
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetAutomationPeerValue(this, System.Windows.AutomationPropertiesEnum.OrientationProperty), System.Windows.Automation.Peers.AutomationOrientation);
};
System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.HasKeyboardFocusCore = function () {
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetAutomationPeerValue(this, System.Windows.AutomationPropertiesEnum.HasKeyboardFocusProperty), System.Boolean);
};
System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.IsContentElementCore = function () {
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetAutomationPeerValue(this, System.Windows.AutomationPropertiesEnum.IsContentElementProperty), System.Boolean);
};
System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.IsControlElementCore = function () {
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetAutomationPeerValue(this, System.Windows.AutomationPropertiesEnum.IsControlElementProperty), System.Boolean);
};
System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.IsEnabledCore = function () {
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetAutomationPeerValue(this, System.Windows.AutomationPropertiesEnum.IsEnabledProperty), System.Boolean);
};
System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.IsKeyboardFocusableCore = function () {
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetAutomationPeerValue(this, System.Windows.AutomationPropertiesEnum.IsKeyboardFocusableProperty), System.Boolean);
};
System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.IsOffscreenCore = function () {
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetAutomationPeerValue(this, System.Windows.AutomationPropertiesEnum.IsOffscreenProperty), System.Boolean);
};
System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.IsPasswordCore = function () {
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetAutomationPeerValue(this, System.Windows.AutomationPropertiesEnum.IsPasswordProperty), System.Boolean);
};
System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.IsRequiredForFormCore = function () {
	return JSIL.Cast($asm02.MS.Internal.XcpImports.GetAutomationPeerValue(this, System.Windows.AutomationPropertiesEnum.IsRequiredForFormProperty), System.Boolean);
};
System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.SetFocusCore = function () {
	$asm02.MS.Internal.XcpImports.CallAutomationPeerMethod(this, 1);
};
System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.GetChildrenCore_Iterate = function (parent, callback) {
	var flag = false;
	if (parent !== null) {
		var childrenCount = parent.GetChildrenCount();
	__loop0__: 
		for (var num = 0; (num < childrenCount) && !flag; ++num) {
			var child = parent.GetChild(num);
			if (this.ChildIsAcceptable(child)) {
				var orCreateAutomationPeer = child.GetOrCreateAutomationPeer();
				if (orCreateAutomationPeer !== null) {
					flag = callback(orCreateAutomationPeer);
				} else {
					flag = this.GetChildrenCore_Iterate(child, callback);
				}
			}
		}
	}
	return flag;
};
System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.ChildIsAcceptable = function (child) {
	return (child !== null);
};
JSIL.OverloadedMethod(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype, "_ctor", [
		["_ctor$0", [System.Windows.FrameworkElement]], 
		["_ctor$1", [System.UInt32, System.Windows.UIElement]], 
		["_ctor$2", [System.Object]]
	]);
JSIL.MakeProperty(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype, "Owner", 
	System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner, null);
Object.defineProperty(System.Windows.Automation.Peers.FrameworkElementAutomationPeer, "NativeFrameworkElementAutomatinPeer", {
		"value": 249}
);
System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype._owner = null;

$asm02.System.Windows.Automation.Peers.FrameworkElementAutomationPeer.$l$gc__DisplayClass1.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm02.System.Windows.Automation.Peers.FrameworkElementAutomationPeer.$l$gc__DisplayClass1.prototype.children = null;

System.Windows.Automation.ElementNotEnabledException.prototype._ctor = function () {
	System.Exception.prototype._ctor.call(this);
};

System.Windows.Automation.ElementNotAvailableException.prototype._ctor = function () {
	System.Exception.prototype._ctor.call(this);
};

System.Windows.Automation.AutomationProperties.GetAcceleratorKey = function (element) {
	var uIElement = JSIL.TryCast(element, System.Windows.UIElement);
	if (uIElement !== null) {
		var orCreateAutomationPeer = uIElement.GetOrCreateAutomationPeer();
		if (orCreateAutomationPeer !== null) {
			return orCreateAutomationPeer.GetAcceleratorKey();
		}
		return JSIL.TryCast(element.GetValue(System.Windows.Automation.AutomationProperties.AcceleratorKeyProperty), System.String);
	} else {
		if (element === null) {
			throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["element"]);
		}
		throw JSIL.New(System.ArgumentException, "_ctor$1", ["element"]);
	}
};
System.Windows.Automation.AutomationProperties.GetAccessKey = function (element) {
	var uIElement = JSIL.TryCast(element, System.Windows.UIElement);
	if (uIElement !== null) {
		var orCreateAutomationPeer = uIElement.GetOrCreateAutomationPeer();
		if (orCreateAutomationPeer !== null) {
			return orCreateAutomationPeer.GetAccessKey();
		}
		return JSIL.TryCast(element.GetValue(System.Windows.Automation.AutomationProperties.AccessKeyProperty), System.String);
	} else {
		if (element === null) {
			throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["element"]);
		}
		throw JSIL.New(System.ArgumentException, "_ctor$1", ["element"]);
	}
};
System.Windows.Automation.AutomationProperties.GetAutomationId = function (element) {
	var uIElement = JSIL.TryCast(element, System.Windows.UIElement);
	if (uIElement !== null) {
		var orCreateAutomationPeer = uIElement.GetOrCreateAutomationPeer();
		if (orCreateAutomationPeer !== null) {
			return orCreateAutomationPeer.GetAutomationId();
		}
		return JSIL.TryCast(element.GetValue(System.Windows.Automation.AutomationProperties.AutomationIdProperty), System.String);
	} else {
		if (element === null) {
			throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["element"]);
		}
		throw JSIL.New(System.ArgumentException, "_ctor$1", ["element"]);
	}
};
System.Windows.Automation.AutomationProperties.GetHelpText = function (element) {
	var uIElement = JSIL.TryCast(element, System.Windows.UIElement);
	if (uIElement !== null) {
		var orCreateAutomationPeer = uIElement.GetOrCreateAutomationPeer();
		if (orCreateAutomationPeer !== null) {
			return orCreateAutomationPeer.GetHelpText();
		}
		return JSIL.TryCast(element.GetValue(System.Windows.Automation.AutomationProperties.HelpTextProperty), System.String);
	} else {
		if (element === null) {
			throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["element"]);
		}
		throw JSIL.New(System.ArgumentException, "_ctor$1", ["element"]);
	}
};
System.Windows.Automation.AutomationProperties.GetIsRequiredForForm = function (element) {
	var uIElement = JSIL.TryCast(element, System.Windows.UIElement);
	if (uIElement !== null) {
		var orCreateAutomationPeer = uIElement.GetOrCreateAutomationPeer();
		if (orCreateAutomationPeer !== null) {
			return orCreateAutomationPeer.IsRequiredForForm();
		}
		return JSIL.Cast(element.GetValue(System.Windows.Automation.AutomationProperties.IsRequiredForFormProperty), System.Boolean);
	} else {
		if (element === null) {
			throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["element"]);
		}
		throw JSIL.New(System.ArgumentException, "_ctor$1", ["element"]);
	}
};
System.Windows.Automation.AutomationProperties.GetItemStatus = function (element) {
	var uIElement = JSIL.TryCast(element, System.Windows.UIElement);
	if (uIElement !== null) {
		var orCreateAutomationPeer = uIElement.GetOrCreateAutomationPeer();
		if (orCreateAutomationPeer !== null) {
			return orCreateAutomationPeer.GetItemStatus();
		}
		return JSIL.TryCast(element.GetValue(System.Windows.Automation.AutomationProperties.ItemStatusProperty), System.String);
	} else {
		if (element === null) {
			throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["element"]);
		}
		throw JSIL.New(System.ArgumentException, "_ctor$1", ["element"]);
	}
};
System.Windows.Automation.AutomationProperties.GetItemType = function (element) {
	var uIElement = JSIL.TryCast(element, System.Windows.UIElement);
	if (uIElement !== null) {
		var orCreateAutomationPeer = uIElement.GetOrCreateAutomationPeer();
		if (orCreateAutomationPeer !== null) {
			return orCreateAutomationPeer.GetItemType();
		}
		return JSIL.TryCast(element.GetValue(System.Windows.Automation.AutomationProperties.ItemTypeProperty), System.String);
	} else {
		if (element === null) {
			throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["element"]);
		}
		throw JSIL.New(System.ArgumentException, "_ctor$1", ["element"]);
	}
};
System.Windows.Automation.AutomationProperties.GetLabeledBy = function (element) {
	var uIElement = JSIL.TryCast(element, System.Windows.UIElement);
	if (uIElement !== null) {
		var orCreateAutomationPeer = uIElement.GetOrCreateAutomationPeer();
		if (orCreateAutomationPeer !== null) {
			var frameworkElementAutomationPeer = JSIL.TryCast(orCreateAutomationPeer.GetLabeledBy(), System.Windows.Automation.Peers.FrameworkElementAutomationPeer);
			var uIElement2 = null;
			if (frameworkElementAutomationPeer !== null) {
				uIElement2 = frameworkElementAutomationPeer.Owner;
			}
			if (uIElement2 !== null) {
				return uIElement2;
			}
		}
		return JSIL.TryCast(element.GetValue(System.Windows.Automation.AutomationProperties.LabeledByProperty), System.Windows.UIElement);
	}
	if (element === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["element"]);
	}
	throw JSIL.New(System.ArgumentException, "_ctor$1", ["element"]);
};
System.Windows.Automation.AutomationProperties.GetName = function (element) {
	var uIElement = JSIL.TryCast(element, System.Windows.UIElement);
	if (uIElement !== null) {
		var orCreateAutomationPeer = uIElement.GetOrCreateAutomationPeer();
		if (orCreateAutomationPeer !== null) {
			return orCreateAutomationPeer.GetName();
		}
		return JSIL.TryCast(element.GetValue(System.Windows.Automation.AutomationProperties.NameProperty), System.String);
	} else {
		if (element === null) {
			throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["element"]);
		}
		throw JSIL.New(System.ArgumentException, "_ctor$1", ["element"]);
	}
};
System.Windows.Automation.AutomationProperties.SetAcceleratorKey = function (element, value) {
	if (JSIL.TryCast(element, System.Windows.UIElement) !== null) {
		element.SetValue(System.Windows.Automation.AutomationProperties.AcceleratorKeyProperty, value);
		return;
	}
	if (element === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["element"]);
	}
	throw JSIL.New(System.ArgumentException, "_ctor$1", ["element"]);
};
System.Windows.Automation.AutomationProperties.SetAccessKey = function (element, value) {
	if (JSIL.TryCast(element, System.Windows.UIElement) !== null) {
		element.SetValue(System.Windows.Automation.AutomationProperties.AccessKeyProperty, value);
		return;
	}
	if (element === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["element"]);
	}
	throw JSIL.New(System.ArgumentException, "_ctor$1", ["element"]);
};
System.Windows.Automation.AutomationProperties.SetAutomationId = function (element, value) {
	if (JSIL.TryCast(element, System.Windows.UIElement) !== null) {
		element.SetValue(System.Windows.Automation.AutomationProperties.AutomationIdProperty, value);
		return;
	}
	if (element === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["element"]);
	}
	throw JSIL.New(System.ArgumentException, "_ctor$1", ["element"]);
};
System.Windows.Automation.AutomationProperties.SetHelpText = function (element, value) {
	if (JSIL.TryCast(element, System.Windows.UIElement) !== null) {
		element.SetValue(System.Windows.Automation.AutomationProperties.HelpTextProperty, value);
		return;
	}
	if (element === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["element"]);
	}
	throw JSIL.New(System.ArgumentException, "_ctor$1", ["element"]);
};
System.Windows.Automation.AutomationProperties.SetIsRequiredForForm = function (element, value) {
	if (JSIL.TryCast(element, System.Windows.UIElement) !== null) {
		element.SetValue(System.Windows.Automation.AutomationProperties.IsRequiredForFormProperty, value);
		return;
	}
	if (element === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["element"]);
	}
	throw JSIL.New(System.ArgumentException, "_ctor$1", ["element"]);
};
System.Windows.Automation.AutomationProperties.SetItemStatus = function (element, value) {
	if (JSIL.TryCast(element, System.Windows.UIElement) !== null) {
		element.SetValue(System.Windows.Automation.AutomationProperties.ItemStatusProperty, value);
		return;
	}
	if (element === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["element"]);
	}
	throw JSIL.New(System.ArgumentException, "_ctor$1", ["element"]);
};
System.Windows.Automation.AutomationProperties.SetItemType = function (element, value) {
	if (JSIL.TryCast(element, System.Windows.UIElement) !== null) {
		element.SetValue(System.Windows.Automation.AutomationProperties.ItemTypeProperty, value);
		return;
	}
	if (element === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["element"]);
	}
	throw JSIL.New(System.ArgumentException, "_ctor$1", ["element"]);
};
System.Windows.Automation.AutomationProperties.SetLabeledBy = function (element, value) {
	if (JSIL.TryCast(element, System.Windows.UIElement) !== null) {
		element.SetValue(System.Windows.Automation.AutomationProperties.LabeledByProperty, value);
		return;
	}
	if (element === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["element"]);
	}
	throw JSIL.New(System.ArgumentException, "_ctor$1", ["element"]);
};
System.Windows.Automation.AutomationProperties.SetName = function (element, value) {
	if (JSIL.TryCast(element, System.Windows.UIElement) !== null) {
		element.SetValue(System.Windows.Automation.AutomationProperties.NameProperty, value);
		return;
	}
	if (element === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["element"]);
	}
	throw JSIL.New(System.ArgumentException, "_ctor$1", ["element"]);
};
System.Windows.Automation.AutomationProperties.AcceleratorKeyProperty = null;
System.Windows.Automation.AutomationProperties.AccessKeyProperty = null;
System.Windows.Automation.AutomationProperties.AutomationIdProperty = null;
System.Windows.Automation.AutomationProperties.HelpTextProperty = null;
System.Windows.Automation.AutomationProperties.IsRequiredForFormProperty = null;
System.Windows.Automation.AutomationProperties.ItemStatusProperty = null;
System.Windows.Automation.AutomationProperties.ItemTypeProperty = null;
System.Windows.Automation.AutomationProperties.LabeledByProperty = null;
System.Windows.Automation.AutomationProperties.NameProperty = null;
System.Windows.Automation.AutomationProperties._cctor = function () {
	System.Windows.Automation.AutomationProperties.AcceleratorKeyProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19901, System.String);
	System.Windows.Automation.AutomationProperties.AccessKeyProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19902, System.String);
	System.Windows.Automation.AutomationProperties.AutomationIdProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19903, System.String);
	System.Windows.Automation.AutomationProperties.HelpTextProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19904, System.String);
	System.Windows.Automation.AutomationProperties.IsRequiredForFormProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19906, System.Boolean);
	System.Windows.Automation.AutomationProperties.ItemStatusProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19908, System.String);
	System.Windows.Automation.AutomationProperties.ItemTypeProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19909, System.String);
	System.Windows.Automation.AutomationProperties.LabeledByProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19910, System.Windows.UIElement);
	System.Windows.Automation.AutomationProperties.NameProperty = System.Windows.DependencyProperty.RegisterCoreProperty(19911, System.String);
};

System.Windows.Automation.AutomationElementIdentifiers.AcceleratorKeyProperty = null;
System.Windows.Automation.AutomationElementIdentifiers.AccessKeyProperty = null;
System.Windows.Automation.AutomationElementIdentifiers.AutomationIdProperty = null;
System.Windows.Automation.AutomationElementIdentifiers.BoundingRectangleProperty = null;
System.Windows.Automation.AutomationElementIdentifiers.ClassNameProperty = null;
System.Windows.Automation.AutomationElementIdentifiers.ClickablePointProperty = null;
System.Windows.Automation.AutomationElementIdentifiers.ControlTypeProperty = null;
System.Windows.Automation.AutomationElementIdentifiers.HasKeyboardFocusProperty = null;
System.Windows.Automation.AutomationElementIdentifiers.HelpTextProperty = null;
System.Windows.Automation.AutomationElementIdentifiers.IsContentElementProperty = null;
System.Windows.Automation.AutomationElementIdentifiers.IsControlElementProperty = null;
System.Windows.Automation.AutomationElementIdentifiers.IsEnabledProperty = null;
System.Windows.Automation.AutomationElementIdentifiers.IsKeyboardFocusableProperty = null;
System.Windows.Automation.AutomationElementIdentifiers.IsOffscreenProperty = null;
System.Windows.Automation.AutomationElementIdentifiers.IsPasswordProperty = null;
System.Windows.Automation.AutomationElementIdentifiers.IsRequiredForFormProperty = null;
System.Windows.Automation.AutomationElementIdentifiers.ItemStatusProperty = null;
System.Windows.Automation.AutomationElementIdentifiers.ItemTypeProperty = null;
System.Windows.Automation.AutomationElementIdentifiers.LabeledByProperty = null;
System.Windows.Automation.AutomationElementIdentifiers.LocalizedControlTypeProperty = null;
System.Windows.Automation.AutomationElementIdentifiers.NameProperty = null;
System.Windows.Automation.AutomationElementIdentifiers.OrientationProperty = null;
System.Windows.Automation.AutomationElementIdentifiers._cctor = function () {
	System.Windows.Automation.AutomationElementIdentifiers.AcceleratorKeyProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.AcceleratorKeyProperty);
	System.Windows.Automation.AutomationElementIdentifiers.AccessKeyProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.AccessKeyProperty);
	System.Windows.Automation.AutomationElementIdentifiers.AutomationIdProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.AutomationIdProperty);
	System.Windows.Automation.AutomationElementIdentifiers.BoundingRectangleProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.BoundingRectangleProperty);
	System.Windows.Automation.AutomationElementIdentifiers.ClassNameProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.ClassNameProperty);
	System.Windows.Automation.AutomationElementIdentifiers.ClickablePointProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.ClickablePointProperty);
	System.Windows.Automation.AutomationElementIdentifiers.ControlTypeProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.ControlTypeProperty);
	System.Windows.Automation.AutomationElementIdentifiers.HasKeyboardFocusProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.HasKeyboardFocusProperty);
	System.Windows.Automation.AutomationElementIdentifiers.HelpTextProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.HelpTextProperty);
	System.Windows.Automation.AutomationElementIdentifiers.IsContentElementProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.IsContentElementProperty);
	System.Windows.Automation.AutomationElementIdentifiers.IsControlElementProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.IsControlElementProperty);
	System.Windows.Automation.AutomationElementIdentifiers.IsEnabledProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.IsEnabledProperty);
	System.Windows.Automation.AutomationElementIdentifiers.IsKeyboardFocusableProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.IsKeyboardFocusableProperty);
	System.Windows.Automation.AutomationElementIdentifiers.IsOffscreenProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.IsOffscreenProperty);
	System.Windows.Automation.AutomationElementIdentifiers.IsPasswordProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.IsPasswordProperty);
	System.Windows.Automation.AutomationElementIdentifiers.IsRequiredForFormProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.IsRequiredForFormProperty);
	System.Windows.Automation.AutomationElementIdentifiers.ItemStatusProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.ItemStatusProperty);
	System.Windows.Automation.AutomationElementIdentifiers.ItemTypeProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.ItemTypeProperty);
	System.Windows.Automation.AutomationElementIdentifiers.LabeledByProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.LabeledByProperty);
	System.Windows.Automation.AutomationElementIdentifiers.LocalizedControlTypeProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.LocalizedControlTypeProperty);
	System.Windows.Automation.AutomationElementIdentifiers.NameProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.NameProperty);
	System.Windows.Automation.AutomationElementIdentifiers.OrientationProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.OrientationProperty);
};

System.Windows.Automation.AutomationProperty.prototype._ctor = function (thisEnum) {
	System.Object.prototype._ctor.call(this);
	this.m_enum = thisEnum;
};
System.Windows.Automation.AutomationProperty.prototype.m_enum = 0;

System.Windows.Automation.DockPatternIdentifiers.DockPositionProperty = null;
System.Windows.Automation.DockPatternIdentifiers._cctor = function () {
	System.Windows.Automation.DockPatternIdentifiers.DockPositionProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.DockPositionProperty);
};

System.Windows.Automation.ExpandCollapsePatternIdentifiers.ExpandCollapseStateProperty = null;
System.Windows.Automation.ExpandCollapsePatternIdentifiers._cctor = function () {
	System.Windows.Automation.ExpandCollapsePatternIdentifiers.ExpandCollapseStateProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.ExpandCollapseStateProperty);
};

System.Windows.Automation.GridItemPatternIdentifiers.ColumnProperty = null;
System.Windows.Automation.GridItemPatternIdentifiers.ColumnSpanProperty = null;
System.Windows.Automation.GridItemPatternIdentifiers.ContainingGridProperty = null;
System.Windows.Automation.GridItemPatternIdentifiers.RowProperty = null;
System.Windows.Automation.GridItemPatternIdentifiers.RowSpanProperty = null;
System.Windows.Automation.GridItemPatternIdentifiers._cctor = function () {
	System.Windows.Automation.GridItemPatternIdentifiers.ColumnProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.ColumnProperty);
	System.Windows.Automation.GridItemPatternIdentifiers.ColumnSpanProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.ColumnSpanProperty);
	System.Windows.Automation.GridItemPatternIdentifiers.ContainingGridProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.ContainingGridProperty);
	System.Windows.Automation.GridItemPatternIdentifiers.RowProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.RowProperty);
	System.Windows.Automation.GridItemPatternIdentifiers.RowSpanProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.RowSpanProperty);
};

System.Windows.Automation.GridPatternIdentifiers.ColumnCountProperty = null;
System.Windows.Automation.GridPatternIdentifiers.RowCountProperty = null;
System.Windows.Automation.GridPatternIdentifiers._cctor = function () {
	System.Windows.Automation.GridPatternIdentifiers.ColumnCountProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.ColumnCountProperty);
	System.Windows.Automation.GridPatternIdentifiers.RowCountProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.RowCountProperty);
};

System.Windows.Automation.MultipleViewPatternIdentifiers.CurrentViewProperty = null;
System.Windows.Automation.MultipleViewPatternIdentifiers.SupportedViewsProperty = null;
System.Windows.Automation.MultipleViewPatternIdentifiers._cctor = function () {
	System.Windows.Automation.MultipleViewPatternIdentifiers.CurrentViewProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.CurrentViewProperty);
	System.Windows.Automation.MultipleViewPatternIdentifiers.SupportedViewsProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.SupportedViewsProperty);
};

System.Windows.Automation.RangeValuePatternIdentifiers.IsReadOnlyProperty = null;
System.Windows.Automation.RangeValuePatternIdentifiers.LargeChangeProperty = null;
System.Windows.Automation.RangeValuePatternIdentifiers.MaximumProperty = null;
System.Windows.Automation.RangeValuePatternIdentifiers.MinimumProperty = null;
System.Windows.Automation.RangeValuePatternIdentifiers.SmallChangeProperty = null;
System.Windows.Automation.RangeValuePatternIdentifiers.ValueProperty = null;
System.Windows.Automation.RangeValuePatternIdentifiers._cctor = function () {
	System.Windows.Automation.RangeValuePatternIdentifiers.IsReadOnlyProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.RangeValueIsReadOnlyProperty);
	System.Windows.Automation.RangeValuePatternIdentifiers.LargeChangeProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.LargeChangeProperty);
	System.Windows.Automation.RangeValuePatternIdentifiers.MaximumProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.MaximumProperty);
	System.Windows.Automation.RangeValuePatternIdentifiers.MinimumProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.MinimumProperty);
	System.Windows.Automation.RangeValuePatternIdentifiers.SmallChangeProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.SmallChangeProperty);
	System.Windows.Automation.RangeValuePatternIdentifiers.ValueProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.RangeValueValueProperty);
};

Object.defineProperty(System.Windows.Automation.ScrollPatternIdentifiers, "NoScroll", {
		"value": -1}
);
System.Windows.Automation.ScrollPatternIdentifiers.HorizontallyScrollableProperty = null;
System.Windows.Automation.ScrollPatternIdentifiers.HorizontalScrollPercentProperty = null;
System.Windows.Automation.ScrollPatternIdentifiers.HorizontalViewSizeProperty = null;
System.Windows.Automation.ScrollPatternIdentifiers.VerticallyScrollableProperty = null;
System.Windows.Automation.ScrollPatternIdentifiers.VerticalScrollPercentProperty = null;
System.Windows.Automation.ScrollPatternIdentifiers.VerticalViewSizeProperty = null;
System.Windows.Automation.ScrollPatternIdentifiers._cctor = function () {
	System.Windows.Automation.ScrollPatternIdentifiers.HorizontallyScrollableProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.HorizontallyScrollableProperty);
	System.Windows.Automation.ScrollPatternIdentifiers.HorizontalScrollPercentProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.HorizontalScrollPercentProperty);
	System.Windows.Automation.ScrollPatternIdentifiers.HorizontalViewSizeProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.HorizontalViewSizeProperty);
	System.Windows.Automation.ScrollPatternIdentifiers.VerticallyScrollableProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.VerticallyScrollableProperty);
	System.Windows.Automation.ScrollPatternIdentifiers.VerticalScrollPercentProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.VerticalScrollPercentProperty);
	System.Windows.Automation.ScrollPatternIdentifiers.VerticalViewSizeProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.VerticalViewSizeProperty);
};

System.Windows.Automation.SelectionItemPatternIdentifiers.IsSelectedProperty = null;
System.Windows.Automation.SelectionItemPatternIdentifiers.SelectionContainerProperty = null;
System.Windows.Automation.SelectionItemPatternIdentifiers._cctor = function () {
	System.Windows.Automation.SelectionItemPatternIdentifiers.IsSelectedProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.IsSelectedProperty);
	System.Windows.Automation.SelectionItemPatternIdentifiers.SelectionContainerProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.SelectionContainerProperty);
};

System.Windows.Automation.SelectionPatternIdentifiers.CanSelectMultipleProperty = null;
System.Windows.Automation.SelectionPatternIdentifiers.IsSelectionRequiredProperty = null;
System.Windows.Automation.SelectionPatternIdentifiers.SelectionProperty = null;
System.Windows.Automation.SelectionPatternIdentifiers._cctor = function () {
	System.Windows.Automation.SelectionPatternIdentifiers.CanSelectMultipleProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.CanSelectMultipleProperty);
	System.Windows.Automation.SelectionPatternIdentifiers.IsSelectionRequiredProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.IsSelectionRequiredProperty);
	System.Windows.Automation.SelectionPatternIdentifiers.SelectionProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.SelectionProperty);
};

System.Windows.Automation.TableItemPatternIdentifiers.ColumnHeaderItemsProperty = null;
System.Windows.Automation.TableItemPatternIdentifiers.RowHeaderItemsProperty = null;
System.Windows.Automation.TableItemPatternIdentifiers._cctor = function () {
	System.Windows.Automation.TableItemPatternIdentifiers.ColumnHeaderItemsProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.ColumnHeaderItemsProperty);
	System.Windows.Automation.TableItemPatternIdentifiers.RowHeaderItemsProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.RowHeaderItemsProperty);
};

System.Windows.Automation.TablePatternIdentifiers.ColumnHeadersProperty = null;
System.Windows.Automation.TablePatternIdentifiers.RowHeadersProperty = null;
System.Windows.Automation.TablePatternIdentifiers.RowOrColumnMajorProperty = null;
System.Windows.Automation.TablePatternIdentifiers._cctor = function () {
	System.Windows.Automation.TablePatternIdentifiers.ColumnHeadersProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.ColumnHeadersProperty);
	System.Windows.Automation.TablePatternIdentifiers.RowHeadersProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.RowHeadersProperty);
	System.Windows.Automation.TablePatternIdentifiers.RowOrColumnMajorProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.RowOrColumnMajorProperty);
};

System.Windows.Automation.TogglePatternIdentifiers.ToggleStateProperty = null;
System.Windows.Automation.TogglePatternIdentifiers._cctor = function () {
	System.Windows.Automation.TogglePatternIdentifiers.ToggleStateProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.ToggleStateProperty);
};

System.Windows.Automation.TransformPatternIdentifiers.CanMoveProperty = null;
System.Windows.Automation.TransformPatternIdentifiers.CanResizeProperty = null;
System.Windows.Automation.TransformPatternIdentifiers.CanRotateProperty = null;
System.Windows.Automation.TransformPatternIdentifiers._cctor = function () {
	System.Windows.Automation.TransformPatternIdentifiers.CanMoveProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.CanMoveProperty);
	System.Windows.Automation.TransformPatternIdentifiers.CanResizeProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.CanResizeProperty);
	System.Windows.Automation.TransformPatternIdentifiers.CanRotateProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.CanRotateProperty);
};

System.Windows.Automation.ValuePatternIdentifiers.IsReadOnlyProperty = null;
System.Windows.Automation.ValuePatternIdentifiers.ValueProperty = null;
System.Windows.Automation.ValuePatternIdentifiers._cctor = function () {
	System.Windows.Automation.ValuePatternIdentifiers.IsReadOnlyProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.ValueIsReadOnlyProperty);
	System.Windows.Automation.ValuePatternIdentifiers.ValueProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.ValueValueProperty);
};

System.Windows.Automation.WindowPatternIdentifiers.CanMaximizeProperty = null;
System.Windows.Automation.WindowPatternIdentifiers.CanMinimizeProperty = null;
System.Windows.Automation.WindowPatternIdentifiers.IsModalProperty = null;
System.Windows.Automation.WindowPatternIdentifiers.IsTopmostProperty = null;
System.Windows.Automation.WindowPatternIdentifiers.WindowInteractionStateProperty = null;
System.Windows.Automation.WindowPatternIdentifiers.WindowVisualStateProperty = null;
System.Windows.Automation.WindowPatternIdentifiers._cctor = function () {
	System.Windows.Automation.WindowPatternIdentifiers.CanMaximizeProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.CanMaximizeProperty);
	System.Windows.Automation.WindowPatternIdentifiers.CanMinimizeProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.CanMinimizeProperty);
	System.Windows.Automation.WindowPatternIdentifiers.IsModalProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.IsModalProperty);
	System.Windows.Automation.WindowPatternIdentifiers.IsTopmostProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.IsTopmostProperty);
	System.Windows.Automation.WindowPatternIdentifiers.WindowInteractionStateProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.WindowInteractionStateProperty);
	System.Windows.Automation.WindowPatternIdentifiers.WindowVisualStateProperty = new System.Windows.Automation.AutomationProperty(System.Windows.AutomationPropertiesEnum.WindowVisualStateProperty);
};

System.Windows.Automation.TextPatternIdentifiers.AnimationStyleAttribute = null;
System.Windows.Automation.TextPatternIdentifiers.BackgroundColorAttribute = null;
System.Windows.Automation.TextPatternIdentifiers.BulletStyleAttribute = null;
System.Windows.Automation.TextPatternIdentifiers.CapStyleAttribute = null;
System.Windows.Automation.TextPatternIdentifiers.CultureAttribute = null;
System.Windows.Automation.TextPatternIdentifiers.FontNameAttribute = null;
System.Windows.Automation.TextPatternIdentifiers.FontSizeAttribute = null;
System.Windows.Automation.TextPatternIdentifiers.FontWeightAttribute = null;
System.Windows.Automation.TextPatternIdentifiers.ForegroundColorAttribute = null;
System.Windows.Automation.TextPatternIdentifiers.HorizontalTextAlignmentAttribute = null;
System.Windows.Automation.TextPatternIdentifiers.IndentationFirstLineAttribute = null;
System.Windows.Automation.TextPatternIdentifiers.IndentationLeadingAttribute = null;
System.Windows.Automation.TextPatternIdentifiers.IndentationTrailingAttribute = null;
System.Windows.Automation.TextPatternIdentifiers.IsHiddenAttribute = null;
System.Windows.Automation.TextPatternIdentifiers.IsItalicAttribute = null;
System.Windows.Automation.TextPatternIdentifiers.IsReadOnlyAttribute = null;
System.Windows.Automation.TextPatternIdentifiers.IsSubscriptAttribute = null;
System.Windows.Automation.TextPatternIdentifiers.IsSuperscriptAttribute = null;
System.Windows.Automation.TextPatternIdentifiers.MarginBottomAttribute = null;
System.Windows.Automation.TextPatternIdentifiers.MarginLeadingAttribute = null;
System.Windows.Automation.TextPatternIdentifiers.MarginTopAttribute = null;
System.Windows.Automation.TextPatternIdentifiers.MarginTrailingAttribute = null;
System.Windows.Automation.TextPatternIdentifiers.OutlineStylesAttribute = null;
System.Windows.Automation.TextPatternIdentifiers.OverlineColorAttribute = null;
System.Windows.Automation.TextPatternIdentifiers.OverlineStyleAttribute = null;
System.Windows.Automation.TextPatternIdentifiers.StrikethroughColorAttribute = null;
System.Windows.Automation.TextPatternIdentifiers.StrikethroughStyleAttribute = null;
System.Windows.Automation.TextPatternIdentifiers.TabsAttribute = null;
System.Windows.Automation.TextPatternIdentifiers.TextFlowDirectionsAttribute = null;
System.Windows.Automation.TextPatternIdentifiers.UnderlineColorAttribute = null;
System.Windows.Automation.TextPatternIdentifiers.UnderlineStyleAttribute = null;
System.Windows.Automation.TextPatternIdentifiers._cctor = function () {
	System.Windows.Automation.TextPatternIdentifiers.AnimationStyleAttribute = new System.Windows.Automation.AutomationTextAttribute($asm02.System.Windows.AutomationTextAttributesEnum.AnimationStyleAttribute);
	System.Windows.Automation.TextPatternIdentifiers.AnimationStyleAttribute = new System.Windows.Automation.AutomationTextAttribute($asm02.System.Windows.AutomationTextAttributesEnum.BackgroundColorAttribute);
	System.Windows.Automation.TextPatternIdentifiers.AnimationStyleAttribute = new System.Windows.Automation.AutomationTextAttribute($asm02.System.Windows.AutomationTextAttributesEnum.BulletStyleAttribute);
	System.Windows.Automation.TextPatternIdentifiers.AnimationStyleAttribute = new System.Windows.Automation.AutomationTextAttribute($asm02.System.Windows.AutomationTextAttributesEnum.CapStyleAttribute);
	System.Windows.Automation.TextPatternIdentifiers.AnimationStyleAttribute = new System.Windows.Automation.AutomationTextAttribute($asm02.System.Windows.AutomationTextAttributesEnum.CultureAttribute);
	System.Windows.Automation.TextPatternIdentifiers.AnimationStyleAttribute = new System.Windows.Automation.AutomationTextAttribute($asm02.System.Windows.AutomationTextAttributesEnum.FontNameAttribute);
	System.Windows.Automation.TextPatternIdentifiers.AnimationStyleAttribute = new System.Windows.Automation.AutomationTextAttribute($asm02.System.Windows.AutomationTextAttributesEnum.FontSizeAttribute);
	System.Windows.Automation.TextPatternIdentifiers.AnimationStyleAttribute = new System.Windows.Automation.AutomationTextAttribute($asm02.System.Windows.AutomationTextAttributesEnum.FontWeightAttribute);
	System.Windows.Automation.TextPatternIdentifiers.AnimationStyleAttribute = new System.Windows.Automation.AutomationTextAttribute($asm02.System.Windows.AutomationTextAttributesEnum.ForegroundColorAttribute);
	System.Windows.Automation.TextPatternIdentifiers.AnimationStyleAttribute = new System.Windows.Automation.AutomationTextAttribute($asm02.System.Windows.AutomationTextAttributesEnum.HorizontalTextAlignmentAttribute);
	System.Windows.Automation.TextPatternIdentifiers.AnimationStyleAttribute = new System.Windows.Automation.AutomationTextAttribute($asm02.System.Windows.AutomationTextAttributesEnum.IndentationFirstLineAttribute);
	System.Windows.Automation.TextPatternIdentifiers.AnimationStyleAttribute = new System.Windows.Automation.AutomationTextAttribute($asm02.System.Windows.AutomationTextAttributesEnum.IndentationLeadingAttribute);
	System.Windows.Automation.TextPatternIdentifiers.AnimationStyleAttribute = new System.Windows.Automation.AutomationTextAttribute($asm02.System.Windows.AutomationTextAttributesEnum.IndentationTrailingAttribute);
	System.Windows.Automation.TextPatternIdentifiers.AnimationStyleAttribute = new System.Windows.Automation.AutomationTextAttribute($asm02.System.Windows.AutomationTextAttributesEnum.IsHiddenAttribute);
	System.Windows.Automation.TextPatternIdentifiers.AnimationStyleAttribute = new System.Windows.Automation.AutomationTextAttribute($asm02.System.Windows.AutomationTextAttributesEnum.IsItalicAttribute);
	System.Windows.Automation.TextPatternIdentifiers.AnimationStyleAttribute = new System.Windows.Automation.AutomationTextAttribute($asm02.System.Windows.AutomationTextAttributesEnum.IsReadOnlyAttribute);
	System.Windows.Automation.TextPatternIdentifiers.AnimationStyleAttribute = new System.Windows.Automation.AutomationTextAttribute($asm02.System.Windows.AutomationTextAttributesEnum.IsSubscriptAttribute);
	System.Windows.Automation.TextPatternIdentifiers.AnimationStyleAttribute = new System.Windows.Automation.AutomationTextAttribute($asm02.System.Windows.AutomationTextAttributesEnum.IsSuperscriptAttribute);
	System.Windows.Automation.TextPatternIdentifiers.AnimationStyleAttribute = new System.Windows.Automation.AutomationTextAttribute($asm02.System.Windows.AutomationTextAttributesEnum.MarginBottomAttribute);
	System.Windows.Automation.TextPatternIdentifiers.AnimationStyleAttribute = new System.Windows.Automation.AutomationTextAttribute($asm02.System.Windows.AutomationTextAttributesEnum.MarginLeadingAttribute);
	System.Windows.Automation.TextPatternIdentifiers.AnimationStyleAttribute = new System.Windows.Automation.AutomationTextAttribute($asm02.System.Windows.AutomationTextAttributesEnum.MarginTopAttribute);
	System.Windows.Automation.TextPatternIdentifiers.AnimationStyleAttribute = new System.Windows.Automation.AutomationTextAttribute($asm02.System.Windows.AutomationTextAttributesEnum.MarginTrailingAttribute);
	System.Windows.Automation.TextPatternIdentifiers.AnimationStyleAttribute = new System.Windows.Automation.AutomationTextAttribute($asm02.System.Windows.AutomationTextAttributesEnum.OutlineStylesAttribute);
	System.Windows.Automation.TextPatternIdentifiers.AnimationStyleAttribute = new System.Windows.Automation.AutomationTextAttribute($asm02.System.Windows.AutomationTextAttributesEnum.OverlineColorAttribute);
	System.Windows.Automation.TextPatternIdentifiers.AnimationStyleAttribute = new System.Windows.Automation.AutomationTextAttribute($asm02.System.Windows.AutomationTextAttributesEnum.OverlineStyleAttribute);
	System.Windows.Automation.TextPatternIdentifiers.AnimationStyleAttribute = new System.Windows.Automation.AutomationTextAttribute($asm02.System.Windows.AutomationTextAttributesEnum.StrikethroughColorAttribute);
	System.Windows.Automation.TextPatternIdentifiers.AnimationStyleAttribute = new System.Windows.Automation.AutomationTextAttribute($asm02.System.Windows.AutomationTextAttributesEnum.StrikethroughStyleAttribute);
	System.Windows.Automation.TextPatternIdentifiers.AnimationStyleAttribute = new System.Windows.Automation.AutomationTextAttribute($asm02.System.Windows.AutomationTextAttributesEnum.TabsAttribute);
	System.Windows.Automation.TextPatternIdentifiers.AnimationStyleAttribute = new System.Windows.Automation.AutomationTextAttribute($asm02.System.Windows.AutomationTextAttributesEnum.TextFlowDirectionsAttribute);
	System.Windows.Automation.TextPatternIdentifiers.AnimationStyleAttribute = new System.Windows.Automation.AutomationTextAttribute($asm02.System.Windows.AutomationTextAttributesEnum.UnderlineColorAttribute);
	System.Windows.Automation.TextPatternIdentifiers.AnimationStyleAttribute = new System.Windows.Automation.AutomationTextAttribute($asm02.System.Windows.AutomationTextAttributesEnum.UnderlineStyleAttribute);
};

System.Windows.Automation.AutomationTextAttribute.prototype._ctor = function (thisEnum) {
	System.Object.prototype._ctor.call(this);
	this.m_enum = thisEnum;
};
System.Windows.Automation.AutomationTextAttribute.prototype.m_enum = 0;

$asm02.MS.Internal.Automation.TextProvider.prototype._ctor = function (textPeer) {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 404);
	this._textPeer = textPeer;
	this._richTextBox = JSIL.Cast(this._textPeer.Owner, System.Windows.Controls.RichTextBox);
	this._richTextBox.add_ContentChanged(JSIL.Delegate.New("System.Windows.Controls.ContentChangedEventHandler", this, $asm02.MS.Internal.Automation.TextProvider.prototype.OnTextContentChanged));
	this._richTextBox.add_SelectionChanged(JSIL.Delegate.New("System.Windows.RoutedEventHandler", this, $asm02.MS.Internal.Automation.TextProvider.prototype.OnTextSelectionChanged));
};
$asm02.MS.Internal.Automation.TextProvider.prototype.Dispose = function () {
	this._richTextBox.remove_ContentChanged(JSIL.Delegate.New("System.Windows.Controls.ContentChangedEventHandler", this, $asm02.MS.Internal.Automation.TextProvider.prototype.OnTextContentChanged));
	this._richTextBox.remove_SelectionChanged(JSIL.Delegate.New("System.Windows.RoutedEventHandler", this, $asm02.MS.Internal.Automation.TextProvider.prototype.OnTextSelectionChanged));
};
$asm02.MS.Internal.Automation.TextProvider.prototype.OnTextContentChanged = function (sender, e) {
	this._textPeer.RaiseAutomationEvent(System.Windows.Automation.Peers.AutomationEvents.TextPatternOnTextChanged);
};
$asm02.MS.Internal.Automation.TextProvider.prototype.OnTextSelectionChanged = function (sender, e) {
	this._textPeer.RaiseAutomationEvent(System.Windows.Automation.Peers.AutomationEvents.TextPatternOnTextSelectionChanged);
};
$asm02.MS.Internal.Automation.TextProvider.prototype.ITextProvider_GetSelection = function () {
	var richTextBox = JSIL.Cast(this._textPeer.Owner, System.Windows.Controls.RichTextBox);
	if (richTextBox.Selection === null) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("UIA_OperationCannotBePerformed")]);
	}
	var textRange = new $asm02.System.Windows.Documents.UIATextRange(richTextBox.Selection.Start, richTextBox.Selection.End);
	return JSIL.Array.New(System.Windows.Automation.Provider.ITextRangeProvider, [new $asm02.MS.Internal.Automation.TextRangeProvider(this, textRange, this._textPeer)]);
};
$asm02.MS.Internal.Automation.TextProvider.prototype.ITextProvider_GetVisibleRanges = function () {
	var array = null;
	var richTextBox = JSIL.Cast(this._textPeer.Owner, System.Windows.Controls.RichTextBox);
	var visibleRanges = $asm02.System.Windows.Documents.UIATextRange.GetVisibleRanges(richTextBox);
	if (!((visibleRanges === null) || (visibleRanges.length <= 0))) {
		array = JSIL.Array.New($asm02.MS.Internal.Automation.TextRangeProvider, visibleRanges.length);
	__loop0__: 
		for (var i = 0; i < visibleRanges.length; ++i) {
			array[i] = new $asm02.MS.Internal.Automation.TextRangeProvider(this, visibleRanges[i], this._textPeer);
		}
	} else {
		var textRange = new $asm02.System.Windows.Documents.UIATextRange(richTextBox.ContentStart, richTextBox.ContentStart);
		array = JSIL.Array.New($asm02.MS.Internal.Automation.TextRangeProvider, [new $asm02.MS.Internal.Automation.TextRangeProvider(this, textRange, this._textPeer)]);
	}
	return array;
};
$asm02.MS.Internal.Automation.TextProvider.prototype.ITextProvider_RangeFromChild = function (childElementProvider) {
	if (childElementProvider === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["childElementProvider"]);
	}
	var textRangeProvider = null;
	var hyperlinkAutomationPeer = JSIL.TryCast(childElementProvider.GetAutomationPeer(), $asm02.System.Windows.Automation.Peers.HyperlinkAutomationPeer);
	if (hyperlinkAutomationPeer !== null) {
		var owner = hyperlinkAutomationPeer.Owner;
		var elementStart = owner.ElementStart;
		var elementEnd = owner.ElementEnd;
		if (!((elementStart === null) || (elementEnd === null))) {
			var textRange = new $asm02.System.Windows.Documents.UIATextRange(elementStart, elementEnd);
			textRangeProvider = new $asm02.MS.Internal.Automation.TextRangeProvider(this, textRange, this._textPeer);
		}
	}
	if (textRangeProvider === null) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("UIA_OperationCannotBePerformed")]);
	}
	return textRangeProvider;
};
$asm02.MS.Internal.Automation.TextProvider.prototype.ITextProvider_RangeFromPoint = function (location) {
	var point2 = new System.Windows.Point();
	var textRangeProvider = null;
	var richTextBox = JSIL.Cast(this._textPeer.Owner, System.Windows.Controls.RichTextBox);
	var generalTransform = richTextBox.TransformToVisual(null);
	var point = generalTransform.Transform(new System.Windows.Point(0, 0)).MemberwiseClone();
	point2._ctor((location.X - point.X), (location.Y - point.Y));
	var positionFromPoint = richTextBox.GetPositionFromPoint(point2.MemberwiseClone());
	if (positionFromPoint !== null) {
		var textRange = new $asm02.System.Windows.Documents.UIATextRange(positionFromPoint, positionFromPoint);
		textRangeProvider = new $asm02.MS.Internal.Automation.TextRangeProvider(this, textRange, this._textPeer);
	}
	if (textRangeProvider === null) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("UIA_OperationCannotBePerformed")]);
	}
	return textRangeProvider;
};
$asm02.MS.Internal.Automation.TextProvider.prototype.ITextProvider_get_DocumentRange = function () {
	var richTextBox = JSIL.Cast(this._textPeer.Owner, System.Windows.Controls.RichTextBox);
	var textRange = new $asm02.System.Windows.Documents.UIATextRange(richTextBox.ContentStart, richTextBox.ContentEnd);
	return new $asm02.MS.Internal.Automation.TextRangeProvider(this, textRange, this._textPeer);
};
$asm02.MS.Internal.Automation.TextProvider.prototype.ITextProvider_get_SupportedTextSelection = function () {
	var richTextBox = JSIL.TryCast(this._textPeer.Owner, System.Windows.Controls.RichTextBox);
	if (richTextBox.Selection !== null) {
		return System.Windows.Automation.SupportedTextSelection.Single;
	}
	return System.Windows.Automation.SupportedTextSelection.None;
};
JSIL.MakeProperty($asm02.MS.Internal.Automation.TextProvider.prototype, "ITextProvider_DocumentRange", 
	$asm02.MS.Internal.Automation.TextProvider.prototype.ITextProvider_get_DocumentRange, null);
JSIL.MakeProperty($asm02.MS.Internal.Automation.TextProvider.prototype, "ITextProvider_SupportedTextSelection", 
	$asm02.MS.Internal.Automation.TextProvider.prototype.ITextProvider_get_SupportedTextSelection, null);
Object.defineProperty($asm02.MS.Internal.Automation.TextProvider, "NativeTextProvider", {
		"value": 404}
);
$asm02.MS.Internal.Automation.TextProvider.prototype._textPeer = null;
$asm02.MS.Internal.Automation.TextProvider.prototype._richTextBox = null;

$asm02.MS.Internal.Automation.TextRangeProvider.prototype._ctor = function (textProvider, textRange, textPeer) {
	System.Windows.DependencyObject.prototype._ctor$1.call(this, 405);
	this._textProvider = textProvider;
	this._textRange = textRange;
	this._textPeer = textPeer;
};
$asm02.MS.Internal.Automation.TextRangeProvider.prototype.ITextRangeProvider_Clone = function () {
	var textRange = this._textRange.Clone();
	return new $asm02.MS.Internal.Automation.TextRangeProvider(this._textProvider, textRange, this._textPeer);
};
$asm02.MS.Internal.Automation.TextRangeProvider.prototype.ITextRangeProvider_Compare = function (range) {
	if (range === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["range"]);
	}
	var textRangeProvider = JSIL.TryCast(range, $asm02.MS.Internal.Automation.TextRangeProvider);
	if (textRangeProvider === null) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", ["range"]);
	}
	return this._textRange.Compare(textRangeProvider._textRange);
};
$asm02.MS.Internal.Automation.TextRangeProvider.prototype.ITextRangeProvider_CompareEndpoints = function (endpoint, targetRange, targetEndpoint) {
	if (targetRange === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["targetRange"]);
	}
	var textRangeProvider = JSIL.TryCast(targetRange, $asm02.MS.Internal.Automation.TextRangeProvider);
	if (textRangeProvider === null) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", ["targetRange"]);
	}
	return this._textRange.CompareEndpoints(endpoint, textRangeProvider._textRange, targetEndpoint);
};
$asm02.MS.Internal.Automation.TextRangeProvider.prototype.ITextRangeProvider_ExpandToEnclosingUnit = function (unit) {
	this._textRange.ExpandToEnclosingUnit(unit);
};
$asm02.MS.Internal.Automation.TextRangeProvider.prototype.ITextRangeProvider_FindAttribute = function (attributeId, value, backward) {
	throw JSIL.New(System.NotImplementedException, "_ctor$0", []);
};
$asm02.MS.Internal.Automation.TextRangeProvider.prototype.ITextRangeProvider_FindText = function (text, backward, ignoreCase) {
	throw JSIL.New(System.NotImplementedException, "_ctor$0", []);
};
$asm02.MS.Internal.Automation.TextRangeProvider.prototype.ITextRangeProvider_GetAttributeValue = function (attributeId) {
	throw JSIL.New(System.NotImplementedException, "_ctor$0", []);
};
$asm02.MS.Internal.Automation.TextRangeProvider.prototype.ITextRangeProvider_GetBoundingRectangles = function () {
	var boundingRectangles = this._textRange.GetBoundingRectangles();
	var richTextBox = JSIL.Cast(this._textPeer.Owner, System.Windows.Controls.RichTextBox);
	var generalTransform = richTextBox.TransformToVisual(null);
__loop0__: 
	for (var i = 0; i < boundingRectangles.length; i += 4) {
		var point = generalTransform.Transform(new System.Windows.Point(boundingRectangles[i], boundingRectangles[(i + 1)])).MemberwiseClone();
		boundingRectangles[i] = point.X;
		boundingRectangles[(i + 1)] = point.Y;
	}
	return boundingRectangles;
};
$asm02.MS.Internal.Automation.TextRangeProvider.prototype.ITextRangeProvider_GetEnclosingElement = function () {
	var result = null;
	var enclosingElement = this._textRange.GetEnclosingElement();
	if (enclosingElement.GetOrCreateAutomationPeer() !== null) {
		result = JSIL.New(System.Windows.Automation.Provider.IRawElementProviderSimple, "_ctor$1", [enclosingElement.GetOrCreateAutomationPeer()]);
	}
	return result;
};
$asm02.MS.Internal.Automation.TextRangeProvider.prototype.ITextRangeProvider_GetText = function (maxLength) {
	if (!((maxLength >= 0) || (maxLength === -1))) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", ["maxLength"]);
	}
	var text = this._textRange.GetText(maxLength);
	if (!((text.length <= maxLength) || (maxLength === -1))) {
		return text.Substring$1(0, maxLength);
	}
	return text;
};
$asm02.MS.Internal.Automation.TextRangeProvider.prototype.ITextRangeProvider_Move = function (unit, count) {
	var result = 0;
	if (count !== 0) {
		result = this._textRange.Move(unit, count);
	}
	return result;
};
$asm02.MS.Internal.Automation.TextRangeProvider.prototype.ITextRangeProvider_MoveEndpointByUnit = function (endpoint, unit, count) {
	var result = 0;
	if (count !== 0) {
		result = this._textRange.MoveEndpointByUnit(endpoint, unit, count);
	}
	return result;
};
$asm02.MS.Internal.Automation.TextRangeProvider.prototype.ITextRangeProvider_MoveEndpointByRange = function (endpoint, targetRange, targetEndpoint) {
	if (targetRange === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["targetRange"]);
	}
	var textRangeProvider = JSIL.TryCast(targetRange, $asm02.MS.Internal.Automation.TextRangeProvider);
	if (textRangeProvider === null) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", ["targetRange"]);
	}
	this._textRange.MoveEndpointByRange(endpoint, textRangeProvider._textRange, targetEndpoint);
};
$asm02.MS.Internal.Automation.TextRangeProvider.prototype.ITextRangeProvider_Select = function () {
	if (!JSIL.Cast(this._textProvider.ITextProvider_SupportedTextSelection, System.Boolean)) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
	}
	var richTextBox = JSIL.Cast(this._textPeer.Owner, System.Windows.Controls.RichTextBox);
	var selection = richTextBox.Selection;
	selection.Select(this._textRange.Start, this._textRange.End);
};
$asm02.MS.Internal.Automation.TextRangeProvider.prototype.ITextRangeProvider_AddToSelection = function () {
	throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
};
$asm02.MS.Internal.Automation.TextRangeProvider.prototype.ITextRangeProvider_RemoveFromSelection = function () {
	throw JSIL.New(System.InvalidOperationException, "_ctor$0", []);
};
$asm02.MS.Internal.Automation.TextRangeProvider.prototype.ITextRangeProvider_ScrollIntoView = function (alignToTop) {
	this._textRange.ScrollIntoView(alignToTop);
};
$asm02.MS.Internal.Automation.TextRangeProvider.prototype.ITextRangeProvider_GetChildren = function () {
	var array = null;
	var children = this._textRange.GetChildren();
	var num = 0;
__loop0__: 
	for (var i = 0; i < children.ICollection$b1_Count; ++i) {
		if (children.IList$b1_get_Item(i).GetOrCreateAutomationPeer() !== null) {
			++num;
		}
	}
	if (num > 0) {
		array = JSIL.Array.New(System.Windows.Automation.Provider.IRawElementProviderSimple, num);
		var num2 = 0;
	__loop1__: 
		for (var j = 0; j < children.ICollection$b1_Count; ++j) {
			if (children.IList$b1_get_Item(j).GetOrCreateAutomationPeer() !== null) {
				array[num2++] = JSIL.New(System.Windows.Automation.Provider.IRawElementProviderSimple, "_ctor$1", [children.IList$b1_get_Item(j).GetOrCreateAutomationPeer()]);
			}
		}
	}
	return array;
};
Object.defineProperty($asm02.MS.Internal.Automation.TextRangeProvider, "NativeTextRangeProvider", {
		"value": 405}
);
$asm02.MS.Internal.Automation.TextRangeProvider.prototype._textProvider = null;
$asm02.MS.Internal.Automation.TextRangeProvider.prototype._textRange = null;
$asm02.MS.Internal.Automation.TextRangeProvider.prototype._textPeer = null;

System.Windows.Automation.Provider.IRawElementProviderSimple.prototype._ctor$0 = function () {
	System.Object.prototype._ctor.call(this);
};
System.Windows.Automation.Provider.IRawElementProviderSimple.prototype._ctor$1 = function (ap) {
	System.Object.prototype._ctor.call(this);
	this.m_AP = ap;
};
System.Windows.Automation.Provider.IRawElementProviderSimple.prototype.GetAutomationPeer = function () {
	return this.m_AP;
};
JSIL.OverloadedMethod(System.Windows.Automation.Provider.IRawElementProviderSimple.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Windows.Automation.Peers.AutomationPeer]]
	]);
System.Windows.Automation.Provider.IRawElementProviderSimple.prototype.m_AP = null;

System.Windows.Automation.Peers.ButtonBaseAutomationPeer.prototype._ctor = function (owner) {
	System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype._ctor$0.call(this, owner);
};
System.Windows.Automation.Peers.ButtonBaseAutomationPeer.prototype.GetNameCore = function () {
	var text = System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.GetNameCore.call(this);
	if (System.String.IsNullOrEmpty(text)) {
		text = JSIL.Cast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this), System.Windows.FrameworkElement).GetPlainText();
	}
	return text;
};

System.Windows.Automation.Peers.ButtonAutomationPeer.prototype._ctor = function (owner) {
	System.Windows.Automation.Peers.ButtonBaseAutomationPeer.prototype._ctor.call(this, owner);
};
System.Windows.Automation.Peers.ButtonAutomationPeer.prototype.GetAutomationControlTypeCore = function () {
	return System.Windows.Automation.Peers.AutomationControlType.Button;
};
System.Windows.Automation.Peers.ButtonAutomationPeer.prototype.GetClassNameCore = function () {
	return "Button";
};
System.Windows.Automation.Peers.ButtonAutomationPeer.prototype.GetPattern = function (patternInterface) {
	if (!JSIL.Cast(patternInterface, System.Boolean)) {
		return this;
	}
	return null;
};
System.Windows.Automation.Peers.ButtonAutomationPeer.prototype.IInvokeProvider_Invoke = function () {
	if (!System.Windows.Automation.Peers.AutomationPeer.prototype.IsEnabled.call(this)) {
		throw new System.Windows.Automation.ElementNotEnabledException();
	}
	if (System.Windows.DependencyObject.prototype.get_Dispatcher.call(this).CheckAccess()) {
		JSIL.Cast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this), System.Windows.Controls.Button).AutomationButtonBaseClick();
		return;
	}
	System.Windows.DependencyObject.prototype.get_Dispatcher.call(this).BeginInvoke$0(function () {
			JSIL.Cast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this), System.Windows.Controls.Button).AutomationButtonBaseClick();
		});
};

System.Windows.Automation.Peers.ImageAutomationPeer.prototype._ctor = function (owner) {
	System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype._ctor$1.call(this, 272, owner);
};

System.Windows.Automation.Peers.ItemsControlAutomationPeer.prototype._ctor = function (owner) {
	System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype._ctor$0.call(this, owner);
};
System.Windows.Automation.Peers.ItemsControlAutomationPeer.prototype.GetPattern = function (patternInterface) {
	if (patternInterface === System.Windows.Automation.Peers.PatternInterface.Scroll) {
		var itemsControl = JSIL.Cast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this), System.Windows.Controls.ItemsControl);
		var uIElement = itemsControl.ItemsHost;
		var scrollViewer = null;
	__loop0__: 
		while ((uIElement !== null) && (uIElement !== itemsControl)) {
			uIElement = JSIL.TryCast(System.Windows.Media.VisualTreeHelper.GetParent(uIElement), System.Windows.UIElement);
			scrollViewer = JSIL.TryCast(uIElement, System.Windows.Controls.ScrollViewer);
			if (scrollViewer !== null) {
				break __loop0__;
			}
		}
		if (scrollViewer !== null) {
			var orCreateAutomationPeer = scrollViewer.GetOrCreateAutomationPeer();
			if (!((orCreateAutomationPeer === null) || (JSIL.TryCast(orCreateAutomationPeer, System.Windows.Automation.Provider.IScrollProvider) === null))) {
				return JSIL.Cast(orCreateAutomationPeer, System.Windows.Automation.Provider.IScrollProvider);
			}
		}
	}
	return System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.GetPattern.call(this, patternInterface);
};
System.Windows.Automation.Peers.ItemsControlAutomationPeer.prototype.GetChildrenCore = function () {
	var item = new (System.Collections.Generic.KeyValuePair$b2.Of(System.Object, System.Windows.Automation.Peers.ItemAutomationPeer)) ();
	var list = null;
	var itemsControl = JSIL.Cast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this), System.Windows.Controls.ItemsControl);
	var items = itemsControl.Items;
	var count = items.Count;
	if (count > 0) {
		if (this._itemPeerStorage === null) {
			this._itemPeerStorage = new (System.Collections.Generic.List$b1.Of(System.Collections.Generic.KeyValuePair$b2.Of(System.Object, System.Windows.Automation.Peers.ItemAutomationPeer))) (count);
		}
		list = new (System.Collections.Generic.List$b1.Of(System.Windows.Automation.Peers.AutomationPeer)) (count);
	__loop0__: 
		for (var i = 0; i < items.Count; ++i) {
			var obj = items.get_Item(i);
			if (this._itemPeerStorage.ICollection$b1_Count > i) {
				var keyValuePair = this._itemPeerStorage.IList$b1_get_Item(i).MemberwiseClone();
				var itemAutomationPeer = this.CreatePeerForIndex(obj, i);
				if (itemAutomationPeer !== keyValuePair.Value) {
					if (!((itemAutomationPeer === null) || 
							(keyValuePair.Value === null) || (itemAutomationPeer.Owner !== keyValuePair.Value.Owner))) {
						list.Add(keyValuePair.Value);
					} else {
						this._itemPeerStorage.IList$b1_set_Item(i, new (System.Collections.Generic.KeyValuePair$b2.Of(System.Object, System.Windows.Automation.Peers.ItemAutomationPeer)) (obj, itemAutomationPeer));
						if (itemAutomationPeer !== null) {
							list.Add(itemAutomationPeer);
						}
					}
				} else if (itemAutomationPeer !== null) {
					list.Add(itemAutomationPeer);
				}
			} else {
				var itemAutomationPeer2 = this.CreatePeerForIndex(obj, i);
				item._ctor(obj, itemAutomationPeer2);
				this._itemPeerStorage.ICollection$b1_Add(item.MemberwiseClone());
				if (itemAutomationPeer2 !== null) {
					list.Add(itemAutomationPeer2);
				}
			}
		}
	}
	return list;
};
System.Windows.Automation.Peers.ItemsControlAutomationPeer.prototype.CreatePeerForIndex = function (item, index) {
	var itemsControl = JSIL.Cast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this), System.Windows.Controls.ItemsControl);
	var uIElement = JSIL.TryCast(itemsControl.ItemContainerGenerator.ContainerFromIndex$0(index), System.Windows.UIElement);
	var itemAutomationPeer = null;
	if (uIElement === null) {
		itemAutomationPeer = this.CreateItemAutomationPeer(item);
	} else {
		itemAutomationPeer = JSIL.TryCast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.CreatePeerForElement(uIElement), System.Windows.Automation.Peers.ItemAutomationPeer);
	}
	if (!((itemAutomationPeer === null) || itemAutomationPeer.ItemsControlAutomationPeer)) {
		itemAutomationPeer.SetItemsControlAutomationPeer(this);
	}
	return itemAutomationPeer;
};
System.Windows.Automation.Peers.ItemsControlAutomationPeer.prototype.OnCollectionChanged = function (sender, e) {
	var item = new (System.Collections.Generic.KeyValuePair$b2.Of(System.Object, System.Windows.Automation.Peers.ItemAutomationPeer)) (), value3 = new (System.Collections.Generic.KeyValuePair$b2.Of(System.Object, System.Windows.Automation.Peers.ItemAutomationPeer)) ();
	if (!((sender === System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this)) && this._itemPeerStorage)) {
		return;
	}
	switch (Number(e.Action)) {
		case 0: 
			var newStartingIndex = e.NewStartingIndex;
			var obj = e.NewItems.IList_get_Item(0);
			var value = this.CreatePeerForIndex(obj, newStartingIndex);
			item._ctor(obj, value);
			if (newStartingIndex === this._itemPeerStorage.ICollection$b1_Count) {
				this._itemPeerStorage.ICollection$b1_Add(item.MemberwiseClone());
				return;
			}
			this._itemPeerStorage.IList$b1_Insert(newStartingIndex, item.MemberwiseClone());
			return;
		case 1: 
			var value2 = this._itemPeerStorage.IList$b1_get_Item(e.OldStartingIndex).Value;
			if (value2 !== null) {
				var owner = value2.Owner;
				if (owner !== null) {
					owner.InvalidateAutomationPeer();
				} else {
					value2.InvalidatePeer();
				}
			}
			this._itemPeerStorage.IList$b1_RemoveAt(e.OldStartingIndex);
			return;
		case 2: 
			var newStartingIndex2 = e.NewStartingIndex;
			var obj2 = e.NewItems.IList_get_Item(0);
			var itemAutomationPeer = this.CreatePeerForIndex(obj2, newStartingIndex2);
			value3._ctor(obj2, itemAutomationPeer);
			itemAutomationPeer = this._itemPeerStorage.IList$b1_get_Item(newStartingIndex2).Value;
			if (itemAutomationPeer !== null) {
				var owner2 = itemAutomationPeer.Owner;
				if (owner2 !== null) {
					owner2.InvalidateAutomationPeer();
				} else {
					itemAutomationPeer.InvalidatePeer();
				}
			}
			this._itemPeerStorage.IList$b1_set_Item(newStartingIndex2, value3.MemberwiseClone());
			return;
		case 3: 
			break;
		case 4: 
			this._itemPeerStorage = null;
			break;
		default: 
			return;
	}
};
System.Windows.Automation.Peers.ItemsControlAutomationPeer.prototype.CreateItemAutomationPeer = function (item) {
	var result = null;
	if (JSIL.TryCast(item, System.Windows.UIElement) !== null) {
		result = JSIL.TryCast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.CreatePeerForElement(JSIL.Cast(item, System.Windows.UIElement)), System.Windows.Automation.Peers.ItemAutomationPeer);
	}
	return result;
};
System.Windows.Automation.Peers.ItemsControlAutomationPeer.prototype._itemPeerStorage = null;

System.Windows.Automation.Peers.ItemAutomationPeer.prototype._ctor$0 = function (item) {
	System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype._ctor$2.call(this, item);
	this.SetupItem(item);
};
System.Windows.Automation.Peers.ItemAutomationPeer.prototype._ctor$1 = function (item, itemsControlAutomationPeer) {
	System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype._ctor$2.call(this, item);
	this._itemsControlAutomationPeer = itemsControlAutomationPeer;
	if (itemsControlAutomationPeer !== null) {
		System.Windows.Automation.Peers.AutomationPeer.prototype.SetAutomationPeerParent.call(this, itemsControlAutomationPeer);
	}
	this.SetupItem(item);
};
System.Windows.Automation.Peers.ItemAutomationPeer.prototype.SetupItem = function (item) {
	var accessibilityItem = null;
	if (JSIL.TryCast(item, System.Windows.UIElement) !== null) {
		accessibilityItem = System.Windows.Controls.ItemsControl.GetItemOfGeneratedContainer(JSIL.TryCast(item, System.Windows.DependencyObject));
	} else if (this._itemsControlAutomationPeer === null) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("UIA_InvalidItemsControlParent")]);
	}
	if (accessibilityItem !== null) {
		this._item = accessibilityItem.Item;
		return;
	}
	this._item = item;
};
System.Windows.Automation.Peers.ItemAutomationPeer.prototype.GetContainer = function () {
	var result = null;
	if (this._item !== null) {
		var itemsControl = JSIL.Cast(this._itemsControlAutomationPeer.Owner, System.Windows.Controls.ItemsControl);
		if (itemsControl !== null) {
			result = JSIL.TryCast(itemsControl.ItemContainerGenerator.ContainerFromItem(this._item), System.Windows.UIElement);
		}
	}
	return result;
};
System.Windows.Automation.Peers.ItemAutomationPeer.prototype.GetContainerPeer = function () {
	var automationPeer = null;
	var container = this.GetContainer();
	if (container !== null) {
		automationPeer = container.GetOrCreateAutomationPeer();
		if (automationPeer === null) {
			automationPeer = JSIL.New(System.Windows.Automation.Peers.FrameworkElementAutomationPeer, "_ctor$2", [container]);
		}
	}
	return automationPeer;
};
System.Windows.Automation.Peers.ItemAutomationPeer.prototype.GetPattern = function (patternInterface) {
	if (System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this) !== null) {
		return System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.GetPattern.call(this, patternInterface);
	}
	var containerPeer = this.GetContainerPeer();
	if (containerPeer !== null) {
		return containerPeer.GetPattern(patternInterface);
	}
	return null;
};
System.Windows.Automation.Peers.ItemAutomationPeer.prototype.GetAcceleratorKeyCore = function () {
	if (System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this) !== null) {
		return System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.GetAcceleratorKeyCore.call(this);
	}
	var containerPeer = this.GetContainerPeer();
	if (containerPeer !== null) {
		return containerPeer.GetAcceleratorKey();
	}
	return System.String.Empty;
};
System.Windows.Automation.Peers.ItemAutomationPeer.prototype.GetAccessKeyCore = function () {
	if (System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this) !== null) {
		return System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.GetAccessKeyCore.call(this);
	}
	var containerPeer = this.GetContainerPeer();
	if (containerPeer !== null) {
		return containerPeer.GetAccessKey();
	}
	return System.String.Empty;
};
System.Windows.Automation.Peers.ItemAutomationPeer.prototype.GetAutomationControlTypeCore = function () {
	if (System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this) !== null) {
		return System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.GetAutomationControlTypeCore.call(this);
	}
	var containerPeer = this.GetContainerPeer();
	if (containerPeer !== null) {
		return containerPeer.GetAutomationControlType();
	}
	return System.Windows.Automation.Peers.AutomationControlType.ListItem;
};
System.Windows.Automation.Peers.ItemAutomationPeer.prototype.GetAutomationIdCore = function () {
	if (System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this) !== null) {
		return System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.GetAutomationIdCore.call(this);
	}
	var containerPeer = this.GetContainerPeer();
	if (containerPeer !== null) {
		return containerPeer.GetAutomationId();
	}
	return System.String.Empty;
};
System.Windows.Automation.Peers.ItemAutomationPeer.prototype.GetBoundingRectangleCore = function () {
	if (System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this) !== null) {
		return System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.GetBoundingRectangleCore.call(this);
	}
	var containerPeer = this.GetContainerPeer();
	if (containerPeer !== null) {
		return containerPeer.GetBoundingRectangle();
	}
	return new System.Windows.Rect();
};
System.Windows.Automation.Peers.ItemAutomationPeer.prototype.GetChildrenCore = function () {
	if (System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this) !== null) {
		return System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.GetChildrenCore.call(this);
	}
	var containerPeer = this.GetContainerPeer();
	if (containerPeer !== null) {
		return containerPeer.GetChildren();
	}
	return null;
};
System.Windows.Automation.Peers.ItemAutomationPeer.prototype.GetClassNameCore = function () {
	if (System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this) !== null) {
		return System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.GetClassNameCore.call(this);
	}
	var containerPeer = this.GetContainerPeer();
	if (containerPeer !== null) {
		return containerPeer.GetClassName();
	}
	return System.String.Empty;
};
System.Windows.Automation.Peers.ItemAutomationPeer.prototype.GetClickablePointCore = function () {
	if (System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this) !== null) {
		return System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.GetClickablePointCore.call(this);
	}
	var containerPeer = this.GetContainerPeer();
	if (containerPeer !== null) {
		return containerPeer.GetClickablePoint();
	}
	return new System.Windows.Point(NaN, NaN);
};
System.Windows.Automation.Peers.ItemAutomationPeer.prototype.GetHelpTextCore = function () {
	if (System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this) !== null) {
		return System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.GetHelpTextCore.call(this);
	}
	var containerPeer = this.GetContainerPeer();
	if (containerPeer !== null) {
		return containerPeer.GetHelpText();
	}
	return System.String.Empty;
};
System.Windows.Automation.Peers.ItemAutomationPeer.prototype.GetItemStatusCore = function () {
	if (System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this) !== null) {
		return System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.GetItemStatusCore.call(this);
	}
	var containerPeer = this.GetContainerPeer();
	if (containerPeer !== null) {
		return containerPeer.GetItemStatus();
	}
	return System.String.Empty;
};
System.Windows.Automation.Peers.ItemAutomationPeer.prototype.GetItemTypeCore = function () {
	if (System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this) !== null) {
		return System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.GetItemTypeCore.call(this);
	}
	var containerPeer = this.GetContainerPeer();
	if (containerPeer !== null) {
		return containerPeer.GetItemType();
	}
	return System.String.Empty;
};
System.Windows.Automation.Peers.ItemAutomationPeer.prototype.GetLabeledByCore = function () {
	if (System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this) !== null) {
		return System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.GetLabeledByCore.call(this);
	}
	var containerPeer = this.GetContainerPeer();
	if (containerPeer !== null) {
		return containerPeer.GetLabeledBy();
	}
	return null;
};
System.Windows.Automation.Peers.ItemAutomationPeer.prototype.GetLocalizedControlTypeCore = function () {
	if (System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this) !== null) {
		return System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.GetLocalizedControlTypeCore.call(this);
	}
	var containerPeer = this.GetContainerPeer();
	if (containerPeer !== null) {
		return containerPeer.GetLocalizedControlType();
	}
	return System.String.Empty;
};
System.Windows.Automation.Peers.ItemAutomationPeer.prototype.GetNameCore = function () {
	if (System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this) !== null) {
		return JSIL.Cast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this), System.Windows.FrameworkElement).GetPlainText();
	}
	var containerPeer = this.GetContainerPeer();
	if (containerPeer !== null) {
		var frameworkElementAutomationPeer = JSIL.TryCast(containerPeer, System.Windows.Automation.Peers.FrameworkElementAutomationPeer);
		if (frameworkElementAutomationPeer !== null) {
			return JSIL.Cast(frameworkElementAutomationPeer.Owner, System.Windows.FrameworkElement).GetPlainText();
		}
		return containerPeer.GetName();
	} else {
		if (JSIL.TryCast(this._item, System.String) !== null) {
			return JSIL.Cast(this._item, System.String);
		}
		if (this._item !== null) {
			return this._item.toString();
		}
		return $asm02.System.Windows.Resx.GetString$2("UIA_Null");
	}
};
System.Windows.Automation.Peers.ItemAutomationPeer.prototype.GetOrientationCore = function () {
	if (System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this) !== null) {
		return System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.GetOrientationCore.call(this);
	}
	var containerPeer = this.GetContainerPeer();
	if (containerPeer !== null) {
		return containerPeer.GetOrientation();
	}
	return System.Windows.Automation.Peers.AutomationOrientation.None;
};
System.Windows.Automation.Peers.ItemAutomationPeer.prototype.HasKeyboardFocusCore = function () {
	if (System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this) !== null) {
		return System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.HasKeyboardFocusCore.call(this);
	}
	var containerPeer = this.GetContainerPeer();
	return ((containerPeer !== null) && containerPeer.HasKeyboardFocus());
};
System.Windows.Automation.Peers.ItemAutomationPeer.prototype.IsContentElementCore = function () {
	if (System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this) !== null) {
		return System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.IsContentElementCore.call(this);
	}
	var containerPeer = this.GetContainerPeer();
	return ((containerPeer === null) || containerPeer.IsContentElement());
};
System.Windows.Automation.Peers.ItemAutomationPeer.prototype.IsControlElementCore = function () {
	if (System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this) !== null) {
		return System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.IsControlElementCore.call(this);
	}
	var containerPeer = this.GetContainerPeer();
	return ((containerPeer === null) || containerPeer.IsControlElement());
};
System.Windows.Automation.Peers.ItemAutomationPeer.prototype.IsEnabledCore = function () {
	if (System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this) !== null) {
		return System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.IsEnabledCore.call(this);
	}
	var containerPeer = this.GetContainerPeer();
	return ((containerPeer !== null) && containerPeer.IsEnabled());
};
System.Windows.Automation.Peers.ItemAutomationPeer.prototype.IsKeyboardFocusableCore = function () {
	if (System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this) !== null) {
		return System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.IsKeyboardFocusableCore.call(this);
	}
	var containerPeer = this.GetContainerPeer();
	return ((containerPeer !== null) && containerPeer.IsKeyboardFocusable());
};
System.Windows.Automation.Peers.ItemAutomationPeer.prototype.IsOffscreenCore = function () {
	if (System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this) !== null) {
		return System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.IsOffscreenCore.call(this);
	}
	var containerPeer = this.GetContainerPeer();
	return ((containerPeer === null) || containerPeer.IsOffscreen());
};
System.Windows.Automation.Peers.ItemAutomationPeer.prototype.IsPasswordCore = function () {
	if (System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this) !== null) {
		return System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.IsPasswordCore.call(this);
	}
	var containerPeer = this.GetContainerPeer();
	return ((containerPeer !== null) && containerPeer.IsPassword());
};
System.Windows.Automation.Peers.ItemAutomationPeer.prototype.IsRequiredForFormCore = function () {
	if (System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this) !== null) {
		return System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.IsRequiredForFormCore.call(this);
	}
	var containerPeer = this.GetContainerPeer();
	return ((containerPeer !== null) && containerPeer.IsRequiredForForm());
};
System.Windows.Automation.Peers.ItemAutomationPeer.prototype.SetFocusCore = function () {
	if (System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this) !== null) {
		System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.SetFocusCore.call(this);
		return;
	}
	var containerPeer = this.GetContainerPeer();
	if (containerPeer !== null) {
		containerPeer.SetFocus();
	}
};
System.Windows.Automation.Peers.ItemAutomationPeer.prototype.SetItemsControlAutomationPeer = function (icAutomationPeer) {
	this._itemsControlAutomationPeer = icAutomationPeer;
};
System.Windows.Automation.Peers.ItemAutomationPeer.prototype.get_ItemsControlAutomationPeer = function () {
	return this._itemsControlAutomationPeer;
};
System.Windows.Automation.Peers.ItemAutomationPeer.prototype.get_Item = function () {
	return this._item;
};
JSIL.OverloadedMethod(System.Windows.Automation.Peers.ItemAutomationPeer.prototype, "_ctor", [
		["_ctor$0", [System.Windows.UIElement]], 
		["_ctor$1", [System.Object, System.Windows.Automation.Peers.ItemsControlAutomationPeer]]
	]);
JSIL.MakeProperty(System.Windows.Automation.Peers.ItemAutomationPeer.prototype, "ItemsControlAutomationPeer", 
	System.Windows.Automation.Peers.ItemAutomationPeer.prototype.get_ItemsControlAutomationPeer, null);
JSIL.MakeProperty(System.Windows.Automation.Peers.ItemAutomationPeer.prototype, "Item", 
	System.Windows.Automation.Peers.ItemAutomationPeer.prototype.get_Item, null);
System.Windows.Automation.Peers.ItemAutomationPeer.prototype._item = null;
System.Windows.Automation.Peers.ItemAutomationPeer.prototype._itemsControlAutomationPeer = null;

System.Windows.Automation.Peers.SelectorAutomationPeer.prototype._ctor = function (owner) {
	System.Windows.Automation.Peers.ItemsControlAutomationPeer.prototype._ctor.call(this, owner);
};
System.Windows.Automation.Peers.SelectorAutomationPeer.prototype.GetAutomationControlTypeCore = function () {
	return System.Windows.Automation.Peers.AutomationControlType.List;
};
System.Windows.Automation.Peers.SelectorAutomationPeer.prototype.GetPattern = function (patternInterface) {
	if (patternInterface === System.Windows.Automation.Peers.PatternInterface.Selection) {
		return this;
	}
	return System.Windows.Automation.Peers.ItemsControlAutomationPeer.prototype.GetPattern.call(this, patternInterface);
};
System.Windows.Automation.Peers.SelectorAutomationPeer.prototype.ISelectionProvider_GetSelection = function () {
	var selector = JSIL.Cast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this), System.Windows.Controls.Primitives.Selector);
	var count = selector._selectedItems.Count;
	if (count > 0) {
		var list = new (System.Collections.Generic.List$b1.Of(System.Windows.Automation.Provider.IRawElementProviderSimple)) (count);
	__loop0__: 
		for (var i = 0; i < count; ++i) {
			var item = System.Windows.Automation.Peers.AutomationPeer.prototype.ProviderFromPeer.call(this, this.GetPeerForSelectedItem(selector._selectedItems.get_Item(i)));
			list.Add(item);
		}
		return list.ToArray();
	}
	return null;
};
System.Windows.Automation.Peers.SelectorAutomationPeer.prototype.ISelectionProvider_get_CanSelectMultiple = function () {
	var selector = JSIL.Cast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this), System.Windows.Controls.Primitives.Selector);
	return selector.CanSelectMultiple;
};
System.Windows.Automation.Peers.SelectorAutomationPeer.prototype.ISelectionProvider_get_IsSelectionRequired = function () {
	return false;
};
System.Windows.Automation.Peers.SelectorAutomationPeer.prototype.GetPeerForSelectedItem = function (item) {
	var selector = JSIL.Cast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this), System.Windows.Controls.Primitives.Selector);
	var childrenCore = this.GetChildrenCore();
	var num = selector._selectedItems.StoredIndexOf(item);
	if (num === -1) {
		num = selector.Items.IndexOf(item);
		selector._selectedItems.StoreIndex(item, num);
	}
	return JSIL.TryCast(childrenCore.IList$b1_get_Item(num), System.Windows.Automation.Peers.SelectorItemAutomationPeer);
};
System.Windows.Automation.Peers.SelectorAutomationPeer.prototype.RaiseSelectionEvents = function (e) {
	var selector = JSIL.Cast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this), System.Windows.Controls.Primitives.Selector);
	var count = selector.SelectedItemsImpl.ICollection_Count;
	var count2 = e.AddedItems.ICollection_Count;
	var count3 = e.RemovedItems.ICollection_Count;
	if (!((count2 !== 1) || (count !== 1))) {
		var childrenCore = this.GetChildrenCore();
		var selectorItemAutomationPeer = JSIL.TryCast(childrenCore.IList$b1_get_Item(selector.SelectedIndex), System.Windows.Automation.Peers.SelectorItemAutomationPeer);
		if (selectorItemAutomationPeer !== null) {
			selectorItemAutomationPeer.RaiseAutomationEvent(System.Windows.Automation.Peers.AutomationEvents.SelectionItemPatternOnElementSelected);
			return;
		}
	} else {
		if ((count2 + count3) > 20) {
			System.Windows.Automation.Peers.AutomationPeer.prototype.RaiseAutomationEvent.call(this, System.Windows.Automation.Peers.AutomationEvents.SelectionPatternOnInvalidated);
		}
	__loop0__: 
		for (var i = 0; i < count2; ++i) {
			var peerForSelectedItem = this.GetPeerForSelectedItem(e.AddedItems.IList_get_Item(i));
			if (peerForSelectedItem !== null) {
				peerForSelectedItem.RaiseAutomationEvent(System.Windows.Automation.Peers.AutomationEvents.SelectionItemPatternOnElementAddedToSelection);
			}
		}
	__loop1__: 
		for (i = 0; i < count3; ++i) {
			childrenCore = this.GetChildrenCore();
			var num = selector.Items.IndexOf(e.RemovedItems.IList_get_Item(i));
			var selectorItemAutomationPeer2 = (num >= 0) ? JSIL.TryCast(childrenCore.IList$b1_get_Item(num), System.Windows.Automation.Peers.SelectorItemAutomationPeer) : null;
			if (selectorItemAutomationPeer2 !== null) {
				selectorItemAutomationPeer2.RaiseAutomationEvent(System.Windows.Automation.Peers.AutomationEvents.SelectionItemPatternOnElementRemovedFromSelection);
			}
		}
	}
};
System.Windows.Automation.Peers.SelectorAutomationPeer.prototype.OnCollectionChanged = function (sender, e) {
	if (!((sender !== System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this)) || 
			(this._itemPeerStorage === null) || (e.Action !== System.Collections.Specialized.NotifyCollectionChangedAction.Remove))) {
		var keyValuePair = this._itemPeerStorage.IList$b1_get_Item(e.OldStartingIndex).MemberwiseClone();
		var selectionItemProvider = JSIL.TryCast(keyValuePair.Value, System.Windows.Automation.Provider.ISelectionItemProvider);
		if (!((selectionItemProvider === null) || !selectionItemProvider.ISelectionItemProvider_IsSelected)) {
			keyValuePair.Value.RaiseAutomationEvent(System.Windows.Automation.Peers.AutomationEvents.SelectionItemPatternOnElementRemovedFromSelection);
		}
	}
	System.Windows.Automation.Peers.ItemsControlAutomationPeer.prototype.OnCollectionChanged.call(this, sender, e);
};
JSIL.MakeProperty(System.Windows.Automation.Peers.SelectorAutomationPeer.prototype, "ISelectionProvider_CanSelectMultiple", 
	System.Windows.Automation.Peers.SelectorAutomationPeer.prototype.ISelectionProvider_get_CanSelectMultiple, null);
JSIL.MakeProperty(System.Windows.Automation.Peers.SelectorAutomationPeer.prototype, "ISelectionProvider_IsSelectionRequired", 
	System.Windows.Automation.Peers.SelectorAutomationPeer.prototype.ISelectionProvider_get_IsSelectionRequired, null);
Object.defineProperty(System.Windows.Automation.Peers.SelectorAutomationPeer, "BulkChildrenLimit", {
		"value": 20}
);

System.Windows.Automation.Peers.ListBoxAutomationPeer.prototype._ctor = function (owner) {
	System.Windows.Automation.Peers.SelectorAutomationPeer.prototype._ctor.call(this, owner);
};
System.Windows.Automation.Peers.ListBoxAutomationPeer.prototype.GetAutomationControlTypeCore = function () {
	return System.Windows.Automation.Peers.AutomationControlType.List;
};
System.Windows.Automation.Peers.ListBoxAutomationPeer.prototype.GetClassNameCore = function () {
	return "ListBox";
};
System.Windows.Automation.Peers.ListBoxAutomationPeer.prototype.CreateItemAutomationPeer = function (item) {
	return JSIL.New(System.Windows.Automation.Peers.ListBoxItemAutomationPeer, "_ctor$1", [item, this]);
};

System.Windows.Automation.Peers.SelectorItemAutomationPeer.prototype._ctor$0 = function (owner) {
	System.Windows.Automation.Peers.ItemAutomationPeer.prototype._ctor$0.call(this, owner);
};
System.Windows.Automation.Peers.SelectorItemAutomationPeer.prototype._ctor$1 = function (owner, selectorAutomationPeer) {
	System.Windows.Automation.Peers.ItemAutomationPeer.prototype._ctor$1.call(this, owner, selectorAutomationPeer);
};
System.Windows.Automation.Peers.SelectorItemAutomationPeer.prototype.GetPattern = function (patternInterface) {
	if (patternInterface === System.Windows.Automation.Peers.PatternInterface.SelectionItem) {
		return this;
	}
	return System.Windows.Automation.Peers.ItemAutomationPeer.prototype.GetPattern.call(this, patternInterface);
};
System.Windows.Automation.Peers.SelectorItemAutomationPeer.prototype.ISelectionItemProvider_Select = function () {
	if (!System.Windows.Automation.Peers.AutomationPeer.prototype.IsEnabled.call(this)) {
		throw new System.Windows.Automation.ElementNotEnabledException();
	}
	if (System.Windows.Automation.Peers.ItemAutomationPeer.prototype.get_ItemsControlAutomationPeer.call(this) !== null) {
		var selector = JSIL.Cast(System.Windows.Automation.Peers.ItemAutomationPeer.prototype.get_ItemsControlAutomationPeer.call(this).Owner, System.Windows.Controls.Primitives.Selector);
		if (selector === null) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("UIA_OperationCannotBePerformed")]);
		}
		selector.SelectedItem = System.Windows.Automation.Peers.ItemAutomationPeer.prototype.get_Item.call(this);
	}
};
System.Windows.Automation.Peers.SelectorItemAutomationPeer.prototype.ISelectionItemProvider_AddToSelection = function () {
	if (!System.Windows.Automation.Peers.AutomationPeer.prototype.IsEnabled.call(this)) {
		throw new System.Windows.Automation.ElementNotEnabledException();
	}
	if (System.Windows.Automation.Peers.ItemAutomationPeer.prototype.get_ItemsControlAutomationPeer.call(this) !== null) {
		var selector = JSIL.Cast(System.Windows.Automation.Peers.ItemAutomationPeer.prototype.get_ItemsControlAutomationPeer.call(this).Owner, System.Windows.Controls.Primitives.Selector);
		try {
			selector._selectionChanger.Begin();
			selector._selectionChanger.Select(selector.Items.IndexOf(System.Windows.Automation.Peers.ItemAutomationPeer.prototype.get_Item.call(this)), System.Windows.Automation.Peers.ItemAutomationPeer.prototype.get_Item.call(this));
		} finally {
			selector._selectionChanger.End();
		}
	}
};
System.Windows.Automation.Peers.SelectorItemAutomationPeer.prototype.ISelectionItemProvider_RemoveFromSelection = function () {
	if (!System.Windows.Automation.Peers.AutomationPeer.prototype.IsEnabled.call(this)) {
		throw new System.Windows.Automation.ElementNotEnabledException();
	}
	if (System.Windows.Automation.Peers.ItemAutomationPeer.prototype.get_ItemsControlAutomationPeer.call(this) !== null) {
		var selector = JSIL.Cast(System.Windows.Automation.Peers.ItemAutomationPeer.prototype.get_ItemsControlAutomationPeer.call(this).Owner, System.Windows.Controls.Primitives.Selector);
		try {
			selector._selectionChanger.Begin();
			selector._selectionChanger.Unselect(System.Windows.Automation.Peers.ItemAutomationPeer.prototype.get_Item.call(this));
		} finally {
			selector._selectionChanger.End();
		}
	}
};
System.Windows.Automation.Peers.SelectorItemAutomationPeer.prototype.ISelectionItemProvider_get_IsSelected = function () {
	if (System.Windows.Automation.Peers.ItemAutomationPeer.prototype.get_ItemsControlAutomationPeer.call(this) !== null) {
		var selector = JSIL.Cast(System.Windows.Automation.Peers.ItemAutomationPeer.prototype.get_ItemsControlAutomationPeer.call(this).Owner, System.Windows.Controls.Primitives.Selector);
		if (selector !== null) {
			return selector._selectedItems.Contains(System.Windows.Automation.Peers.ItemAutomationPeer.prototype.get_Item.call(this));
		}
	}
	return false;
};
System.Windows.Automation.Peers.SelectorItemAutomationPeer.prototype.ISelectionItemProvider_get_SelectionContainer = function () {
	return System.Windows.Automation.Peers.AutomationPeer.prototype.ProviderFromPeer.call(this, System.Windows.Automation.Peers.ItemAutomationPeer.prototype.get_ItemsControlAutomationPeer.call(this));
};
System.Windows.Automation.Peers.SelectorItemAutomationPeer.prototype.RaiseAutomationIsSelectedChanged = function (isSelected) {
	System.Windows.Automation.Peers.AutomationPeer.prototype.RaisePropertyChangedEvent.call(this, System.Windows.Automation.SelectionItemPatternIdentifiers.IsSelectedProperty, !isSelected, isSelected);
};
JSIL.OverloadedMethod(System.Windows.Automation.Peers.SelectorItemAutomationPeer.prototype, "_ctor", [
		["_ctor$0", [System.Windows.UIElement]], 
		["_ctor$1", [System.Object, System.Windows.Automation.Peers.SelectorAutomationPeer]]
	]);
JSIL.MakeProperty(System.Windows.Automation.Peers.SelectorItemAutomationPeer.prototype, "ISelectionItemProvider_IsSelected", 
	System.Windows.Automation.Peers.SelectorItemAutomationPeer.prototype.ISelectionItemProvider_get_IsSelected, null);
JSIL.MakeProperty(System.Windows.Automation.Peers.SelectorItemAutomationPeer.prototype, "ISelectionItemProvider_SelectionContainer", 
	System.Windows.Automation.Peers.SelectorItemAutomationPeer.prototype.ISelectionItemProvider_get_SelectionContainer, null);

System.Windows.Automation.Peers.ListBoxItemAutomationPeer.prototype._ctor$0 = function (owner) {
	System.Windows.Automation.Peers.SelectorItemAutomationPeer.prototype._ctor$0.call(this, owner);
};
System.Windows.Automation.Peers.ListBoxItemAutomationPeer.prototype._ctor$1 = function (owner, selectorAutomationPeer) {
	System.Windows.Automation.Peers.SelectorItemAutomationPeer.prototype._ctor$1.call(this, owner, selectorAutomationPeer);
};
System.Windows.Automation.Peers.ListBoxItemAutomationPeer.prototype.GetClassNameCore = function () {
	return "ListBoxItem";
};
System.Windows.Automation.Peers.ListBoxItemAutomationPeer.prototype.GetAutomationControlTypeCore = function () {
	return System.Windows.Automation.Peers.AutomationControlType.ListItem;
};
System.Windows.Automation.Peers.ListBoxItemAutomationPeer.prototype.GetPattern = function (patternInterface) {
	if (patternInterface === System.Windows.Automation.Peers.PatternInterface.ScrollItem) {
		return this;
	}
	return System.Windows.Automation.Peers.SelectorItemAutomationPeer.prototype.GetPattern.call(this, patternInterface);
};
System.Windows.Automation.Peers.ListBoxItemAutomationPeer.prototype.IScrollItemProvider_ScrollIntoView = function () {
	if (System.Windows.Automation.Peers.ItemAutomationPeer.prototype.get_ItemsControlAutomationPeer.call(this) !== null) {
		var listBox = JSIL.TryCast(System.Windows.Automation.Peers.ItemAutomationPeer.prototype.get_ItemsControlAutomationPeer.call(this).Owner, System.Windows.Controls.ListBox);
		if (listBox !== null) {
			listBox.ScrollIntoView(System.Windows.Automation.Peers.ItemAutomationPeer.prototype.get_Item.call(this));
		}
	}
};
JSIL.OverloadedMethod(System.Windows.Automation.Peers.ListBoxItemAutomationPeer.prototype, "_ctor", [
		["_ctor$0", [System.Windows.Controls.ListBoxItem]], 
		["_ctor$1", [System.Object, System.Windows.Automation.Peers.SelectorAutomationPeer]]
	]);

System.Windows.Automation.Peers.MediaElementAutomationPeer.prototype._ctor = function (owner) {
	System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype._ctor$0.call(this, owner);
};
System.Windows.Automation.Peers.MediaElementAutomationPeer.prototype.GetClassNameCore = function () {
	return "MediaElement";
};
System.Windows.Automation.Peers.MediaElementAutomationPeer.prototype.GetAutomationControlTypeCore = function () {
	return System.Windows.Automation.Peers.AutomationControlType.Custom;
};

System.Windows.Automation.Peers.MultiScaleImageAutomationPeer.prototype._ctor = function (owner) {
	System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype._ctor$0.call(this, owner);
};
System.Windows.Automation.Peers.MultiScaleImageAutomationPeer.prototype.GetClassNameCore = function () {
	return "MultiScaleImage";
};
System.Windows.Automation.Peers.MultiScaleImageAutomationPeer.prototype.GetAutomationControlTypeCore = function () {
	return System.Windows.Automation.Peers.AutomationControlType.Custom;
};

System.Windows.Automation.Peers.ToggleButtonAutomationPeer.prototype._ctor = function (owner) {
	System.Windows.Automation.Peers.ButtonBaseAutomationPeer.prototype._ctor.call(this, owner);
};
System.Windows.Automation.Peers.ToggleButtonAutomationPeer.prototype.GetClassNameCore = function () {
	return "Button";
};
System.Windows.Automation.Peers.ToggleButtonAutomationPeer.prototype.GetAutomationControlTypeCore = function () {
	return System.Windows.Automation.Peers.AutomationControlType.Button;
};
System.Windows.Automation.Peers.ToggleButtonAutomationPeer.prototype.GetPattern = function (patternInterface) {
	if (patternInterface === System.Windows.Automation.Peers.PatternInterface.Toggle) {
		return this;
	}
	return null;
};
System.Windows.Automation.Peers.ToggleButtonAutomationPeer.prototype.IToggleProvider_Toggle = function () {
	if (!System.Windows.Automation.Peers.AutomationPeer.prototype.IsEnabled.call(this)) {
		throw new System.Windows.Automation.ElementNotEnabledException();
	}
	var toggleButton = JSIL.Cast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this), System.Windows.Controls.Primitives.ToggleButton);
	toggleButton.OnToggle();
};
System.Windows.Automation.Peers.ToggleButtonAutomationPeer.prototype.IToggleProvider_get_ToggleState = function () {
	var toggleButton = JSIL.Cast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this), System.Windows.Controls.Primitives.ToggleButton);
	return System.Windows.Automation.Peers.ToggleButtonAutomationPeer.ConvertToToggleState(toggleButton.IsChecked.MemberwiseClone());
};
System.Windows.Automation.Peers.ToggleButtonAutomationPeer.prototype.RaiseToggleStatePropertyChangedEvent = function (oldValue, newValue) {
	var flag = oldValue.MemberwiseClone();
	var flag2 = newValue.MemberwiseClone();
	if ((flag.GetValueOrDefault$0() !== flag2.GetValueOrDefault$0()) || (flag.HasValue !== flag2.HasValue)) {
		System.Windows.Automation.Peers.AutomationPeer.prototype.RaisePropertyChangedEvent.call(
			this, System.Windows.Automation.TogglePatternIdentifiers.ToggleStateProperty, 
			System.Windows.Automation.Peers.ToggleButtonAutomationPeer.ConvertToToggleState(oldValue.MemberwiseClone()), 
			System.Windows.Automation.Peers.ToggleButtonAutomationPeer.ConvertToToggleState(newValue.MemberwiseClone())
		);
	}
};
System.Windows.Automation.Peers.ToggleButtonAutomationPeer.ConvertToToggleState = function (value) {
	var valueOrDefault = value.GetValueOrDefault$0();
	if (value.HasValue) {
		switch (valueOrDefault) {
			case 0: 
				return System.Windows.Automation.ToggleState.Off;
			case 1: 
				return System.Windows.Automation.ToggleState.On;
		}
	}
	return System.Windows.Automation.ToggleState.Indeterminate;
};
JSIL.MakeProperty(System.Windows.Automation.Peers.ToggleButtonAutomationPeer.prototype, "IToggleProvider_ToggleState", 
	System.Windows.Automation.Peers.ToggleButtonAutomationPeer.prototype.IToggleProvider_get_ToggleState, null);

System.Windows.Automation.Peers.CheckBoxAutomationPeer.prototype._ctor = function (owner) {
	System.Windows.Automation.Peers.ToggleButtonAutomationPeer.prototype._ctor.call(this, owner);
};
System.Windows.Automation.Peers.CheckBoxAutomationPeer.prototype.GetClassNameCore = function () {
	return "CheckBox";
};
System.Windows.Automation.Peers.CheckBoxAutomationPeer.prototype.GetAutomationControlTypeCore = function () {
	return System.Windows.Automation.Peers.AutomationControlType.CheckBox;
};

System.Windows.Automation.Peers.RangeBaseAutomationPeer.prototype._ctor = function (owner) {
	System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype._ctor$0.call(this, owner);
};
System.Windows.Automation.Peers.RangeBaseAutomationPeer.prototype.GetPattern = function (patternInterface) {
	if (patternInterface === System.Windows.Automation.Peers.PatternInterface.RangeValue) {
		return this;
	}
	return null;
};
System.Windows.Automation.Peers.RangeBaseAutomationPeer.prototype.RaiseMinimumPropertyChangedEvent = function (oldValue, newValue) {
	System.Windows.Automation.Peers.AutomationPeer.prototype.RaisePropertyChangedEvent.call(this, System.Windows.Automation.RangeValuePatternIdentifiers.MinimumProperty, oldValue, newValue);
};
System.Windows.Automation.Peers.RangeBaseAutomationPeer.prototype.RaiseMaximumPropertyChangedEvent = function (oldValue, newValue) {
	System.Windows.Automation.Peers.AutomationPeer.prototype.RaisePropertyChangedEvent.call(this, System.Windows.Automation.RangeValuePatternIdentifiers.MaximumProperty, oldValue, newValue);
};
System.Windows.Automation.Peers.RangeBaseAutomationPeer.prototype.RaiseValuePropertyChangedEvent = function (oldValue, newValue) {
	System.Windows.Automation.Peers.AutomationPeer.prototype.RaisePropertyChangedEvent.call(this, System.Windows.Automation.RangeValuePatternIdentifiers.ValueProperty, oldValue, newValue);
};
System.Windows.Automation.Peers.RangeBaseAutomationPeer.prototype.IRangeValueProvider_SetValue = function (val) {
	if (!System.Windows.Automation.Peers.AutomationPeer.prototype.IsEnabled.call(this)) {
		throw new System.Windows.Automation.ElementNotEnabledException();
	}
	var rangeBase = JSIL.Cast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this), System.Windows.Controls.Primitives.RangeBase);
	if (!((val >= rangeBase.Minimum) && (val <= rangeBase.Maximum))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["val"]);
	}
	rangeBase.Value = val;
};
System.Windows.Automation.Peers.RangeBaseAutomationPeer.prototype.IRangeValueProvider_get_Value = function () {
	return JSIL.Cast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this), System.Windows.Controls.Primitives.RangeBase).Value;
};
System.Windows.Automation.Peers.RangeBaseAutomationPeer.prototype.IRangeValueProvider_get_IsReadOnly = function () {
	return !System.Windows.Automation.Peers.AutomationPeer.prototype.IsEnabled.call(this);
};
System.Windows.Automation.Peers.RangeBaseAutomationPeer.prototype.IRangeValueProvider_get_Maximum = function () {
	return JSIL.Cast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this), System.Windows.Controls.Primitives.RangeBase).Maximum;
};
System.Windows.Automation.Peers.RangeBaseAutomationPeer.prototype.IRangeValueProvider_get_Minimum = function () {
	return JSIL.Cast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this), System.Windows.Controls.Primitives.RangeBase).Minimum;
};
System.Windows.Automation.Peers.RangeBaseAutomationPeer.prototype.IRangeValueProvider_get_LargeChange = function () {
	return JSIL.Cast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this), System.Windows.Controls.Primitives.RangeBase).LargeChange;
};
System.Windows.Automation.Peers.RangeBaseAutomationPeer.prototype.IRangeValueProvider_get_SmallChange = function () {
	return JSIL.Cast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this), System.Windows.Controls.Primitives.RangeBase).SmallChange;
};
JSIL.MakeProperty(System.Windows.Automation.Peers.RangeBaseAutomationPeer.prototype, "IRangeValueProvider_Value", 
	System.Windows.Automation.Peers.RangeBaseAutomationPeer.prototype.IRangeValueProvider_get_Value, null);
JSIL.MakeProperty(System.Windows.Automation.Peers.RangeBaseAutomationPeer.prototype, "IRangeValueProvider_IsReadOnly", 
	System.Windows.Automation.Peers.RangeBaseAutomationPeer.prototype.IRangeValueProvider_get_IsReadOnly, null);
JSIL.MakeProperty(System.Windows.Automation.Peers.RangeBaseAutomationPeer.prototype, "IRangeValueProvider_Maximum", 
	System.Windows.Automation.Peers.RangeBaseAutomationPeer.prototype.IRangeValueProvider_get_Maximum, null);
JSIL.MakeProperty(System.Windows.Automation.Peers.RangeBaseAutomationPeer.prototype, "IRangeValueProvider_Minimum", 
	System.Windows.Automation.Peers.RangeBaseAutomationPeer.prototype.IRangeValueProvider_get_Minimum, null);
JSIL.MakeProperty(System.Windows.Automation.Peers.RangeBaseAutomationPeer.prototype, "IRangeValueProvider_LargeChange", 
	System.Windows.Automation.Peers.RangeBaseAutomationPeer.prototype.IRangeValueProvider_get_LargeChange, null);
JSIL.MakeProperty(System.Windows.Automation.Peers.RangeBaseAutomationPeer.prototype, "IRangeValueProvider_SmallChange", 
	System.Windows.Automation.Peers.RangeBaseAutomationPeer.prototype.IRangeValueProvider_get_SmallChange, null);

System.Windows.Automation.Peers.RepeatButtonAutomationPeer.prototype._ctor = function (owner) {
	System.Windows.Automation.Peers.ButtonBaseAutomationPeer.prototype._ctor.call(this, owner);
};
System.Windows.Automation.Peers.RepeatButtonAutomationPeer.prototype.GetClassNameCore = function () {
	return "RepeatButton";
};
System.Windows.Automation.Peers.RepeatButtonAutomationPeer.prototype.GetAutomationControlTypeCore = function () {
	return System.Windows.Automation.Peers.AutomationControlType.Button;
};
System.Windows.Automation.Peers.RepeatButtonAutomationPeer.prototype.GetPattern = function (patternInterface) {
	if (!JSIL.Cast(patternInterface, System.Boolean)) {
		return this;
	}
	return null;
};
System.Windows.Automation.Peers.RepeatButtonAutomationPeer.prototype.IInvokeProvider_Invoke = function () {
	if (!System.Windows.Automation.Peers.AutomationPeer.prototype.IsEnabled.call(this)) {
		throw new System.Windows.Automation.ElementNotEnabledException();
	}
	var repeatButton = JSIL.Cast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this), System.Windows.Controls.Primitives.RepeatButton);
	repeatButton.AutomationButtonBaseClick();
};

System.Windows.Automation.Peers.ScrollBarAutomationPeer.prototype._ctor = function (owner) {
	System.Windows.Automation.Peers.RangeBaseAutomationPeer.prototype._ctor.call(this, owner);
};
System.Windows.Automation.Peers.ScrollBarAutomationPeer.prototype.GetClassNameCore = function () {
	return "ScrollBar";
};
System.Windows.Automation.Peers.ScrollBarAutomationPeer.prototype.GetAutomationControlTypeCore = function () {
	return System.Windows.Automation.Peers.AutomationControlType.ScrollBar;
};
System.Windows.Automation.Peers.ScrollBarAutomationPeer.prototype.GetClickablePointCore = function () {
	return new System.Windows.Point(NaN, NaN);
};
System.Windows.Automation.Peers.ScrollBarAutomationPeer.prototype.GetOrientationCore = function () {
	if (JSIL.Cast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this), System.Windows.Controls.Primitives.ScrollBar).Orientation !== System.Windows.Controls.Orientation.Horizontal) {
		return System.Windows.Automation.Peers.AutomationOrientation.Vertical;
	}
	return System.Windows.Automation.Peers.AutomationOrientation.Horizontal;
};
System.Windows.Automation.Peers.ScrollBarAutomationPeer.prototype.ChildIsAcceptable = function (child) {
	if (!System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.ChildIsAcceptable.call(this, child)) {
		return false;
	}
	var scrollBar = JSIL.Cast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this), System.Windows.Controls.Primitives.ScrollBar);
	return (((child !== scrollBar.ElementHorizontalTemplate) && 
			(child !== scrollBar.ElementVerticalTemplate)) || (child.Visibility === System.Windows.Visibility.Visible));
};

System.Windows.Automation.Peers.ThumbAutomationPeer.prototype._ctor = function (owner) {
	System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype._ctor$0.call(this, owner);
};
System.Windows.Automation.Peers.ThumbAutomationPeer.prototype.GetClassNameCore = function () {
	return "Thumb";
};
System.Windows.Automation.Peers.ThumbAutomationPeer.prototype.GetAutomationControlTypeCore = function () {
	return System.Windows.Automation.Peers.AutomationControlType.Thumb;
};

System.Windows.Automation.Peers.RadioButtonAutomationPeer.prototype._ctor = function (owner) {
	System.Windows.Automation.Peers.ToggleButtonAutomationPeer.prototype._ctor.call(this, owner);
};
System.Windows.Automation.Peers.RadioButtonAutomationPeer.prototype.GetClassNameCore = function () {
	return "RadioButton";
};
System.Windows.Automation.Peers.RadioButtonAutomationPeer.prototype.GetAutomationControlTypeCore = function () {
	return System.Windows.Automation.Peers.AutomationControlType.RadioButton;
};
System.Windows.Automation.Peers.RadioButtonAutomationPeer.prototype.GetPattern = function (patternInterface) {
	if (patternInterface === System.Windows.Automation.Peers.PatternInterface.SelectionItem) {
		return this;
	}
	return null;
};
System.Windows.Automation.Peers.RadioButtonAutomationPeer.prototype.ISelectionItemProvider_Select = function () {
	if (!System.Windows.Automation.Peers.AutomationPeer.prototype.IsEnabled.call(this)) {
		throw new System.Windows.Automation.ElementNotEnabledException();
	}
	(JSIL.Cast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this), System.Windows.Controls.RadioButton).IsChecked = new (System.Nullable$b1.Of(System.Boolean)) (true));
};
System.Windows.Automation.Peers.RadioButtonAutomationPeer.prototype.ISelectionItemProvider_AddToSelection = function () {
	var isChecked = JSIL.Cast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this), System.Windows.Controls.RadioButton).IsChecked.MemberwiseClone();
	if (!isChecked.GetValueOrDefault$0() || !isChecked.HasValue) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("UIA_OperationCannotBePerformed")]);
	}
};
System.Windows.Automation.Peers.RadioButtonAutomationPeer.prototype.ISelectionItemProvider_RemoveFromSelection = function () {
	var isChecked = JSIL.Cast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this), System.Windows.Controls.RadioButton).IsChecked.MemberwiseClone();
	if (isChecked.GetValueOrDefault$0() && isChecked.HasValue) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("UIA_OperationCannotBePerformed")]);
	}
};
System.Windows.Automation.Peers.RadioButtonAutomationPeer.prototype.ISelectionItemProvider_get_IsSelected = function () {
	var isChecked = JSIL.Cast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this), System.Windows.Controls.RadioButton).IsChecked.MemberwiseClone();
	return (isChecked.GetValueOrDefault$0() && isChecked.HasValue);
};
System.Windows.Automation.Peers.RadioButtonAutomationPeer.prototype.ISelectionItemProvider_get_SelectionContainer = function () {
	return null;
};
System.Windows.Automation.Peers.RadioButtonAutomationPeer.prototype.RaiseToggleStatePropertyChangedEvent = function (oldValue, newValue) {
	var flag = oldValue;
	var arg_3A_2 = (flag.GetValueOrDefault$0() && 
		flag.HasValue);
	var flag2 = newValue;
	System.Windows.Automation.Peers.AutomationPeer.prototype.RaisePropertyChangedEvent.call(this, System.Windows.Automation.SelectionItemPatternIdentifiers.IsSelectedProperty, arg_3A_2, (flag2.GetValueOrDefault$0() && flag2.HasValue));
};
JSIL.MakeProperty(System.Windows.Automation.Peers.RadioButtonAutomationPeer.prototype, "ISelectionItemProvider_IsSelected", 
	System.Windows.Automation.Peers.RadioButtonAutomationPeer.prototype.ISelectionItemProvider_get_IsSelected, null);
JSIL.MakeProperty(System.Windows.Automation.Peers.RadioButtonAutomationPeer.prototype, "ISelectionItemProvider_SelectionContainer", 
	System.Windows.Automation.Peers.RadioButtonAutomationPeer.prototype.ISelectionItemProvider_get_SelectionContainer, null);

System.Windows.Automation.Peers.ScrollViewerAutomationPeer.prototype._ctor = function (owner) {
	System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype._ctor$0.call(this, owner);
};
System.Windows.Automation.Peers.ScrollViewerAutomationPeer.prototype.GetClassNameCore = function () {
	return "ScrollViewer";
};
System.Windows.Automation.Peers.ScrollViewerAutomationPeer.prototype.GetAutomationControlTypeCore = function () {
	return System.Windows.Automation.Peers.AutomationControlType.Pane;
};
System.Windows.Automation.Peers.ScrollViewerAutomationPeer.prototype.IsControlElementCore = function () {
	return (JSIL.Cast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this), System.Windows.Controls.ScrollViewer).TemplatedParent === null);
};
System.Windows.Automation.Peers.ScrollViewerAutomationPeer.prototype.GetPattern = function (patternInterface) {
	if (patternInterface === System.Windows.Automation.Peers.PatternInterface.Scroll) {
		return this;
	}
	return null;
};
System.Windows.Automation.Peers.ScrollViewerAutomationPeer.prototype.ChildIsAcceptable = function (child) {
	if (!System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.ChildIsAcceptable.call(this, child)) {
		return false;
	}
	var scrollViewer = JSIL.Cast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this), System.Windows.Controls.ScrollViewer);
	return (((child !== scrollViewer.ElementHorizontalScrollBar) && 
			(child !== scrollViewer.ElementVerticalScrollBar)) || (child.Visibility === System.Windows.Visibility.Visible));
};
System.Windows.Automation.Peers.ScrollViewerAutomationPeer.prototype.IScrollProvider_Scroll = function (horizontalAmount, verticalAmount) {
	if (!System.Windows.Automation.Peers.AutomationPeer.prototype.IsEnabled.call(this)) {
		throw new System.Windows.Automation.ElementNotEnabledException();
	}
	var flag = (horizontalAmount !== System.Windows.Automation.ScrollAmount.NoAmount);
	var flag2 = (verticalAmount !== System.Windows.Automation.ScrollAmount.NoAmount);
	var scrollViewer = JSIL.Cast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this), System.Windows.Controls.ScrollViewer);
	if (!(!(flag && 
				!this.HorizontallyScrollable) && (!flag2 || 
				this.VerticallyScrollable))) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("UIA_OperationCannotBePerformed")]);
	}
	switch (Number(horizontalAmount)) {
		case 0: 
			scrollViewer.PageLeft();
			break;
		case 1: 
			scrollViewer.LineLeft();
			break;
		case 2: 
			break;
		case 3: 
			scrollViewer.PageRight();
			break;
		case 4: 
			scrollViewer.LineRight();
			break;
		default: 
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("UIA_OperationCannotBePerformed")]);
	}
	switch (Number(verticalAmount)) {
		case 0: 
			scrollViewer.PageUp();
			return;
		case 1: 
			scrollViewer.LineUp();
			return;
		case 2: 
			return;
		case 3: 
			scrollViewer.PageDown();
			return;
		case 4: 
			scrollViewer.LineDown();
			return;
		default: 
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("UIA_OperationCannotBePerformed")]);
	}
};
System.Windows.Automation.Peers.ScrollViewerAutomationPeer.prototype.IScrollProvider_SetScrollPercent = function (horizontalPercent, verticalPercent) {
	if (!System.Windows.Automation.Peers.AutomationPeer.prototype.IsEnabled.call(this)) {
		throw new System.Windows.Automation.ElementNotEnabledException();
	}
	var flag = (horizontalPercent !== -1);
	var flag2 = (verticalPercent !== -1);
	var scrollViewer = JSIL.Cast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this), System.Windows.Controls.ScrollViewer);
	if (!(!(flag && 
				!this.HorizontallyScrollable) && (!flag2 || 
				this.VerticallyScrollable))) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("UIA_OperationCannotBePerformed")]);
	}
	if (!(!(flag && 
				(horizontalPercent < 0)) && (horizontalPercent <= 100))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["horizontalPercent", $asm02.System.Windows.Resx.GetString$0("ScrollViewer_OutOfRange", ["horizontalPercent", (horizontalPercent).toString(), "0", "100"])]);
	}
	if (!(!(flag2 && 
				(verticalPercent < 0)) && (verticalPercent <= 100))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["verticalPercent", $asm02.System.Windows.Resx.GetString$0("ScrollViewer_OutOfRange", ["verticalPercent", (verticalPercent).toString(), "0", "100"])]);
	}
	if (flag) {
		scrollViewer.ScrollToHorizontalOffset((((scrollViewer.ExtentWidth - scrollViewer.ViewportWidth) * horizontalPercent) * 0.01));
	}
	if (flag2) {
		scrollViewer.ScrollToVerticalOffset((((scrollViewer.ExtentHeight - scrollViewer.ViewportHeight) * verticalPercent) * 0.01));
	}
};
System.Windows.Automation.Peers.ScrollViewerAutomationPeer.prototype.IScrollProvider_get_HorizontalScrollPercent = function () {
	if (!this.HorizontallyScrollable) {
		return -1;
	}
	var scrollViewer = JSIL.Cast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this), System.Windows.Controls.ScrollViewer);
	return ((scrollViewer.HorizontalOffset * 100) / (scrollViewer.ExtentWidth - scrollViewer.ViewportWidth));
};
System.Windows.Automation.Peers.ScrollViewerAutomationPeer.prototype.IScrollProvider_get_VerticalScrollPercent = function () {
	if (!this.VerticallyScrollable) {
		return -1;
	}
	var scrollViewer = JSIL.Cast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this), System.Windows.Controls.ScrollViewer);
	return ((scrollViewer.VerticalOffset * 100) / (scrollViewer.ExtentHeight - scrollViewer.ViewportHeight));
};
System.Windows.Automation.Peers.ScrollViewerAutomationPeer.prototype.IScrollProvider_get_HorizontalViewSize = function () {
	var scrollViewer = JSIL.Cast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this), System.Windows.Controls.ScrollViewer);
	if (!((scrollViewer.ScrollInfo !== null) && !$asm02.MS.Internal.DoubleUtil.IsZero(scrollViewer.ExtentWidth))) {
		return 100;
	}
	return System.Math.Min(100, ((scrollViewer.ViewportWidth * 100) / scrollViewer.ExtentWidth));
};
System.Windows.Automation.Peers.ScrollViewerAutomationPeer.prototype.IScrollProvider_get_VerticalViewSize = function () {
	var scrollViewer = JSIL.Cast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this), System.Windows.Controls.ScrollViewer);
	if (!((scrollViewer.ScrollInfo !== null) && !$asm02.MS.Internal.DoubleUtil.IsZero(scrollViewer.ExtentHeight))) {
		return 100;
	}
	return System.Math.Min(100, ((scrollViewer.ViewportHeight * 100) / scrollViewer.ExtentHeight));
};
System.Windows.Automation.Peers.ScrollViewerAutomationPeer.prototype.IScrollProvider_get_HorizontallyScrollable = function () {
	return this.HorizontallyScrollable;
};
System.Windows.Automation.Peers.ScrollViewerAutomationPeer.prototype.IScrollProvider_get_VerticallyScrollable = function () {
	return this.VerticallyScrollable;
};
System.Windows.Automation.Peers.ScrollViewerAutomationPeer.AutomationIsScrollable = function (extent, viewport) {
	return $asm02.MS.Internal.DoubleUtil.GreaterThan(extent, viewport);
};
System.Windows.Automation.Peers.ScrollViewerAutomationPeer.AutomationGetScrollPercent = function (extent, viewport, actualOffset) {
	if (!System.Windows.Automation.Peers.ScrollViewerAutomationPeer.AutomationIsScrollable(extent, viewport)) {
		return -1;
	}
	return ((actualOffset * 100) / (extent - viewport));
};
System.Windows.Automation.Peers.ScrollViewerAutomationPeer.AutomationGetViewSize = function (extent, viewport) {
	if ($asm02.MS.Internal.DoubleUtil.IsZero(extent)) {
		return 100;
	}
	return System.Math.Min(100, ((viewport * 100) / extent));
};
System.Windows.Automation.Peers.ScrollViewerAutomationPeer.prototype.get_HorizontallyScrollable = function () {
	var scrollViewer = JSIL.Cast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this), System.Windows.Controls.ScrollViewer);
	return ((scrollViewer.ScrollInfo !== null) && $asm02.MS.Internal.DoubleUtil.GreaterThan(scrollViewer.ExtentWidth, scrollViewer.ViewportWidth));
};
System.Windows.Automation.Peers.ScrollViewerAutomationPeer.prototype.get_VerticallyScrollable = function () {
	var scrollViewer = JSIL.Cast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this), System.Windows.Controls.ScrollViewer);
	return ((scrollViewer.ScrollInfo !== null) && $asm02.MS.Internal.DoubleUtil.GreaterThan(scrollViewer.ExtentHeight, scrollViewer.ViewportHeight));
};
System.Windows.Automation.Peers.ScrollViewerAutomationPeer.prototype.RaiseAutomationEvents = function (extentX, extentY, viewportX, viewportY, offsetX, offsetY) {
	if (System.Windows.Automation.Peers.ScrollViewerAutomationPeer.AutomationIsScrollable(extentX, viewportX) !== this.IScrollProvider_HorizontallyScrollable) {
		System.Windows.Automation.Peers.AutomationPeer.prototype.RaisePropertyChangedEvent.call(this, System.Windows.Automation.ScrollPatternIdentifiers.HorizontallyScrollableProperty, System.Windows.Automation.Peers.ScrollViewerAutomationPeer.AutomationIsScrollable(extentX, viewportX), this.IScrollProvider_HorizontallyScrollable);
	}
	if (System.Windows.Automation.Peers.ScrollViewerAutomationPeer.AutomationIsScrollable(extentY, viewportY) !== this.IScrollProvider_VerticallyScrollable) {
		System.Windows.Automation.Peers.AutomationPeer.prototype.RaisePropertyChangedEvent.call(this, System.Windows.Automation.ScrollPatternIdentifiers.VerticallyScrollableProperty, System.Windows.Automation.Peers.ScrollViewerAutomationPeer.AutomationIsScrollable(extentY, viewportY), this.IScrollProvider_VerticallyScrollable);
	}
	if (System.Windows.Automation.Peers.ScrollViewerAutomationPeer.AutomationGetViewSize(extentX, viewportX) !== this.IScrollProvider_HorizontalViewSize) {
		System.Windows.Automation.Peers.AutomationPeer.prototype.RaisePropertyChangedEvent.call(this, System.Windows.Automation.ScrollPatternIdentifiers.HorizontalViewSizeProperty, System.Windows.Automation.Peers.ScrollViewerAutomationPeer.AutomationGetViewSize(extentX, viewportX), this.IScrollProvider_HorizontalViewSize);
	}
	if (System.Windows.Automation.Peers.ScrollViewerAutomationPeer.AutomationGetViewSize(extentY, viewportY) !== this.IScrollProvider_VerticalViewSize) {
		System.Windows.Automation.Peers.AutomationPeer.prototype.RaisePropertyChangedEvent.call(this, System.Windows.Automation.ScrollPatternIdentifiers.VerticalViewSizeProperty, System.Windows.Automation.Peers.ScrollViewerAutomationPeer.AutomationGetViewSize(extentY, viewportY), this.IScrollProvider_VerticalViewSize);
	}
	if (System.Windows.Automation.Peers.ScrollViewerAutomationPeer.AutomationGetScrollPercent(extentX, viewportX, offsetX) !== this.IScrollProvider_HorizontalScrollPercent) {
		System.Windows.Automation.Peers.AutomationPeer.prototype.RaisePropertyChangedEvent.call(this, System.Windows.Automation.ScrollPatternIdentifiers.HorizontalScrollPercentProperty, System.Windows.Automation.Peers.ScrollViewerAutomationPeer.AutomationGetScrollPercent(extentX, viewportX, offsetX), this.IScrollProvider_HorizontalScrollPercent);
	}
	if (System.Windows.Automation.Peers.ScrollViewerAutomationPeer.AutomationGetScrollPercent(extentY, viewportY, offsetY) !== this.IScrollProvider_VerticalScrollPercent) {
		System.Windows.Automation.Peers.AutomationPeer.prototype.RaisePropertyChangedEvent.call(this, System.Windows.Automation.ScrollPatternIdentifiers.VerticalScrollPercentProperty, System.Windows.Automation.Peers.ScrollViewerAutomationPeer.AutomationGetScrollPercent(extentY, viewportY, offsetY), this.IScrollProvider_VerticalScrollPercent);
	}
};
JSIL.MakeProperty(System.Windows.Automation.Peers.ScrollViewerAutomationPeer.prototype, "IScrollProvider_HorizontalScrollPercent", 
	System.Windows.Automation.Peers.ScrollViewerAutomationPeer.prototype.IScrollProvider_get_HorizontalScrollPercent, null);
JSIL.MakeProperty(System.Windows.Automation.Peers.ScrollViewerAutomationPeer.prototype, "IScrollProvider_VerticalScrollPercent", 
	System.Windows.Automation.Peers.ScrollViewerAutomationPeer.prototype.IScrollProvider_get_VerticalScrollPercent, null);
JSIL.MakeProperty(System.Windows.Automation.Peers.ScrollViewerAutomationPeer.prototype, "IScrollProvider_HorizontalViewSize", 
	System.Windows.Automation.Peers.ScrollViewerAutomationPeer.prototype.IScrollProvider_get_HorizontalViewSize, null);
JSIL.MakeProperty(System.Windows.Automation.Peers.ScrollViewerAutomationPeer.prototype, "IScrollProvider_VerticalViewSize", 
	System.Windows.Automation.Peers.ScrollViewerAutomationPeer.prototype.IScrollProvider_get_VerticalViewSize, null);
JSIL.MakeProperty(System.Windows.Automation.Peers.ScrollViewerAutomationPeer.prototype, "IScrollProvider_HorizontallyScrollable", 
	System.Windows.Automation.Peers.ScrollViewerAutomationPeer.prototype.IScrollProvider_get_HorizontallyScrollable, null);
JSIL.MakeProperty(System.Windows.Automation.Peers.ScrollViewerAutomationPeer.prototype, "IScrollProvider_VerticallyScrollable", 
	System.Windows.Automation.Peers.ScrollViewerAutomationPeer.prototype.IScrollProvider_get_VerticallyScrollable, null);
JSIL.MakeProperty(System.Windows.Automation.Peers.ScrollViewerAutomationPeer.prototype, "HorizontallyScrollable", 
	System.Windows.Automation.Peers.ScrollViewerAutomationPeer.prototype.get_HorizontallyScrollable, null);
JSIL.MakeProperty(System.Windows.Automation.Peers.ScrollViewerAutomationPeer.prototype, "VerticallyScrollable", 
	System.Windows.Automation.Peers.ScrollViewerAutomationPeer.prototype.get_VerticallyScrollable, null);

System.Windows.Automation.Peers.SliderAutomationPeer.prototype._ctor = function (owner) {
	System.Windows.Automation.Peers.RangeBaseAutomationPeer.prototype._ctor.call(this, owner);
};
System.Windows.Automation.Peers.SliderAutomationPeer.prototype.GetClassNameCore = function () {
	return "Slider";
};
System.Windows.Automation.Peers.SliderAutomationPeer.prototype.GetAutomationControlTypeCore = function () {
	return System.Windows.Automation.Peers.AutomationControlType.Slider;
};
System.Windows.Automation.Peers.SliderAutomationPeer.prototype.GetClickablePointCore = function () {
	return new System.Windows.Point(NaN, NaN);
};
System.Windows.Automation.Peers.SliderAutomationPeer.prototype.ChildIsAcceptable = function (child) {
	if (!System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.ChildIsAcceptable.call(this, child)) {
		return false;
	}
	var slider = JSIL.Cast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this), System.Windows.Controls.Slider);
	return (((child !== slider.ElementHorizontalTemplate) && 
			(child !== slider.ElementVerticalTemplate)) || (child.Visibility === System.Windows.Visibility.Visible));
};

$asm02.System.Windows.Automation.Peers.ToolTipAutomationPeer.prototype._ctor = function (owner) {
	System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype._ctor$0.call(this, owner);
};
$asm02.System.Windows.Automation.Peers.ToolTipAutomationPeer.prototype.GetClassNameCore = function () {
	return "ToolTip";
};
$asm02.System.Windows.Automation.Peers.ToolTipAutomationPeer.prototype.GetAutomationControlTypeCore = function () {
	return System.Windows.Automation.Peers.AutomationControlType.ToolTip;
};

$asm02.System.Windows.Automation.Peers.PopupRootAutomationPeer.prototype._ctor = function (owner) {
	System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype._ctor$0.call(this, owner);
};
$asm02.System.Windows.Automation.Peers.PopupRootAutomationPeer.prototype.GetClassNameCore = function () {
	return "Popup";
};
$asm02.System.Windows.Automation.Peers.PopupRootAutomationPeer.prototype.GetAutomationControlTypeCore = function () {
	return System.Windows.Automation.Peers.AutomationControlType.Window;
};

System.Windows.Automation.Peers.ProgressBarAutomationPeer.prototype._ctor = function (owner) {
	System.Windows.Automation.Peers.RangeBaseAutomationPeer.prototype._ctor.call(this, owner);
};
System.Windows.Automation.Peers.ProgressBarAutomationPeer.prototype.GetClassNameCore = function () {
	return "ProgressBar";
};
System.Windows.Automation.Peers.ProgressBarAutomationPeer.prototype.GetAutomationControlTypeCore = function () {
	return System.Windows.Automation.Peers.AutomationControlType.ProgressBar;
};
System.Windows.Automation.Peers.ProgressBarAutomationPeer.prototype.GetPattern = function (patternInterface) {
	if (!((patternInterface !== System.Windows.Automation.Peers.PatternInterface.RangeValue) || !JSIL.Cast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this), System.Windows.Controls.ProgressBar).IsIndeterminate)) {
		return null;
	}
	return System.Windows.Automation.Peers.RangeBaseAutomationPeer.prototype.GetPattern.call(this, patternInterface);
};
System.Windows.Automation.Peers.ProgressBarAutomationPeer.prototype.IRangeValueProvider_SetValue = function (val) {
	throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("UIA_OperationCannotBePerformed")]);
};
System.Windows.Automation.Peers.ProgressBarAutomationPeer.prototype.IRangeValueProvider_get_IsReadOnly = function () {
	return true;
};
System.Windows.Automation.Peers.ProgressBarAutomationPeer.prototype.IRangeValueProvider_get_LargeChange = function () {
	return NaN;
};
System.Windows.Automation.Peers.ProgressBarAutomationPeer.prototype.IRangeValueProvider_get_SmallChange = function () {
	return NaN;
};
JSIL.MakeProperty(System.Windows.Automation.Peers.ProgressBarAutomationPeer.prototype, "IRangeValueProvider_IsReadOnly", 
	System.Windows.Automation.Peers.ProgressBarAutomationPeer.prototype.IRangeValueProvider_get_IsReadOnly, null);
JSIL.MakeProperty(System.Windows.Automation.Peers.ProgressBarAutomationPeer.prototype, "IRangeValueProvider_LargeChange", 
	System.Windows.Automation.Peers.ProgressBarAutomationPeer.prototype.IRangeValueProvider_get_LargeChange, null);
JSIL.MakeProperty(System.Windows.Automation.Peers.ProgressBarAutomationPeer.prototype, "IRangeValueProvider_SmallChange", 
	System.Windows.Automation.Peers.ProgressBarAutomationPeer.prototype.IRangeValueProvider_get_SmallChange, null);

System.Windows.Automation.Peers.TextBoxAutomationPeer.prototype._ctor = function (owner) {
	System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype._ctor$1.call(this, 263, owner);
};
System.Windows.Automation.Peers.TextBoxAutomationPeer.prototype.IValueProvider_get_IsReadOnly = function () {
	var textBox = JSIL.Cast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this), System.Windows.Controls.TextBox);
	return textBox.IsReadOnly;
};
System.Windows.Automation.Peers.TextBoxAutomationPeer.prototype.IValueProvider_get_Value = function () {
	var textBox = JSIL.Cast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this), System.Windows.Controls.TextBox);
	return textBox.Text;
};
System.Windows.Automation.Peers.TextBoxAutomationPeer.prototype.IValueProvider_SetValue = function (value) {
	if (!System.Windows.Automation.Peers.AutomationPeer.prototype.IsEnabled.call(this)) {
		throw new System.Windows.Automation.ElementNotEnabledException();
	}
	var textBox = JSIL.Cast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this), System.Windows.Controls.TextBox);
	if (textBox.IsReadOnly) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("UIA_OperationCannotBePerformed")]);
	}
	if (value === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["value"]);
	}
	textBox.Text = value;
};
System.Windows.Automation.Peers.TextBoxAutomationPeer.prototype.GetNameCore = function () {
	var nameCore = System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.GetNameCore.call(this);
	if (System.String.IsNullOrEmpty(nameCore)) {
		var textBox = JSIL.TryCast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this), System.Windows.Controls.TextBox);
		if (textBox !== null) {
			return textBox.Text;
		}
	}
	return nameCore;
};
System.Windows.Automation.Peers.TextBoxAutomationPeer.prototype.GetPattern = function (patternInterface) {
	if (patternInterface === System.Windows.Automation.Peers.PatternInterface.Value) {
		return this;
	}
	return null;
};
JSIL.MakeProperty(System.Windows.Automation.Peers.TextBoxAutomationPeer.prototype, "IValueProvider_IsReadOnly", 
	System.Windows.Automation.Peers.TextBoxAutomationPeer.prototype.IValueProvider_get_IsReadOnly, null);
JSIL.MakeProperty(System.Windows.Automation.Peers.TextBoxAutomationPeer.prototype, "IValueProvider_Value", 
	System.Windows.Automation.Peers.TextBoxAutomationPeer.prototype.IValueProvider_get_Value, null);

System.Windows.Automation.Peers.RichTextBoxAutomationPeer.prototype._ctor = function (owner) {
	System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype._ctor$0.call(this, owner);
};
System.Windows.Automation.Peers.RichTextBoxAutomationPeer.prototype.GetAutomationControlTypeCore = function () {
	return System.Windows.Automation.Peers.AutomationControlType.Document;
};
System.Windows.Automation.Peers.RichTextBoxAutomationPeer.prototype.GetClassNameCore = function () {
	return "RichTextBox";
};
System.Windows.Automation.Peers.RichTextBoxAutomationPeer.prototype.GetPattern = function (patternInterface) {
	if (patternInterface === System.Windows.Automation.Peers.PatternInterface.Text) {
		if (this._textProvider === null) {
			this._textProvider = new $asm02.MS.Internal.Automation.TextProvider(this);
		}
		return this._textProvider;
	}
	return null;
};
System.Windows.Automation.Peers.RichTextBoxAutomationPeer.prototype.GetChildrenCore = function () {
	var list = null;
	var list2 = null;
	var richTextBox = JSIL.Cast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this), System.Windows.Controls.RichTextBox);
	var uIATextRange = new $asm02.System.Windows.Documents.UIATextRange(richTextBox.ContentStart, richTextBox.ContentEnd);
	var children = uIATextRange.GetChildren();
__loop0__: 
	for (var i = 0; i < children.ICollection$b1_Count; ++i) {
		if (JSIL.TryCast(children.IList$b1_get_Item(i), System.Windows.Documents.Hyperlink) !== null) {
			if (list2 === null) {
				list2 = new (System.Collections.Generic.List$b1.Of(System.Windows.Documents.Hyperlink)) ();
			}
			list2.ICollection$b1_Add(JSIL.Cast(children.IList$b1_get_Item(i), System.Windows.Documents.Hyperlink));
		}
	}
	if (list2 !== null) {
	__loop1__: 
		for (var j = 0; j < list2.ICollection$b1_Count; ++j) {
			var hyperlinkAutomationPeer = JSIL.TryCast(list2.IList$b1_get_Item(j).GetOrCreateAutomationPeer(), $asm02.System.Windows.Automation.Peers.HyperlinkAutomationPeer);
			hyperlinkAutomationPeer.OwnerParent = richTextBox;
			if (list === null) {
				list = new (System.Collections.Generic.List$b1.Of(System.Windows.Automation.Peers.AutomationPeer)) ();
			}
			list.Add(hyperlinkAutomationPeer);
		}
	}
	return list;
};
System.Windows.Automation.Peers.RichTextBoxAutomationPeer.prototype._textProvider = null;

System.Windows.Automation.Peers.TextBlockAutomationPeer.prototype._ctor = function (owner) {
	System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype._ctor$1.call(this, 248, owner);
};
System.Windows.Automation.Peers.TextBlockAutomationPeer.prototype.GetNameCore = function () {
	var nameCore = System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.GetNameCore.call(this);
	if (System.String.IsNullOrEmpty(nameCore)) {
		var textBlock = JSIL.TryCast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this), System.Windows.Controls.TextBlock);
		if (textBlock !== null) {
			return textBlock.GetPlainText();
		}
	}
	return nameCore;
};
System.Windows.Automation.Peers.TextBlockAutomationPeer.prototype.GetClassNameCore = function () {
	return "TextBlock";
};
System.Windows.Automation.Peers.TextBlockAutomationPeer.prototype.GetAutomationControlTypeCore = function () {
	return System.Windows.Automation.Peers.AutomationControlType.Text;
};
System.Windows.Automation.Peers.TextBlockAutomationPeer.prototype.IsControlElementCore = function () {
	return (JSIL.Cast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this), System.Windows.Controls.TextBlock).TemplatedParent === null);
};

System.Windows.Automation.Peers.PasswordBoxAutomationPeer.prototype._ctor = function (owner) {
	System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype._ctor$1.call(this, 264, owner);
};
System.Windows.Automation.Peers.PasswordBoxAutomationPeer.prototype.IValueProvider_get_IsReadOnly = function () {
	return false;
};
System.Windows.Automation.Peers.PasswordBoxAutomationPeer.prototype.IValueProvider_get_Value = function () {
	throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("UIA_OperationCannotBePerformed")]);
};
System.Windows.Automation.Peers.PasswordBoxAutomationPeer.prototype.IValueProvider_SetValue = function (value) {
	if (!System.Windows.Automation.Peers.AutomationPeer.prototype.IsEnabled.call(this)) {
		throw new System.Windows.Automation.ElementNotEnabledException();
	}
	if (value === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["value"]);
	}
	var passwordBox = JSIL.Cast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this), System.Windows.Controls.PasswordBox);
	passwordBox.Password = value;
};
System.Windows.Automation.Peers.PasswordBoxAutomationPeer.prototype.GetPattern = function (patternInterface) {
	if (patternInterface === System.Windows.Automation.Peers.PatternInterface.Value) {
		return this;
	}
	return null;
};
JSIL.MakeProperty(System.Windows.Automation.Peers.PasswordBoxAutomationPeer.prototype, "IValueProvider_IsReadOnly", 
	System.Windows.Automation.Peers.PasswordBoxAutomationPeer.prototype.IValueProvider_get_IsReadOnly, null);
JSIL.MakeProperty(System.Windows.Automation.Peers.PasswordBoxAutomationPeer.prototype, "IValueProvider_Value", 
	System.Windows.Automation.Peers.PasswordBoxAutomationPeer.prototype.IValueProvider_get_Value, null);

System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer.prototype._ctor = function (owner) {
	System.Windows.Automation.Peers.ButtonBaseAutomationPeer.prototype._ctor.call(this, owner);
};
System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer.prototype.GetPattern = function (patternInterface) {
	if (!JSIL.Cast(patternInterface, System.Boolean)) {
		return this;
	}
	return null;
};
System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer.prototype.GetAutomationControlTypeCore = function () {
	return System.Windows.Automation.Peers.AutomationControlType.Hyperlink;
};
System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer.prototype.GetClassNameCore = function () {
	return "Hyperlink";
};
System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer.prototype.IsControlElementCore = function () {
	return true;
};
System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer.prototype.IInvokeProvider_Invoke = function () {
	if (!System.Windows.Automation.Peers.AutomationPeer.prototype.IsEnabled.call(this)) {
		throw new System.Windows.Automation.ElementNotEnabledException();
	}
	var hyperlinkButton = JSIL.Cast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this), System.Windows.Controls.HyperlinkButton);
	hyperlinkButton.AutomationButtonBaseClick();
};
System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer.prototype.get_InUIAutomationInvoke = function () {
	return this.inUIAutomationInvoke;
};
System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer.prototype.set_InUIAutomationInvoke = function (value) {
	this.inUIAutomationInvoke = value;
};
JSIL.MakeProperty(System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer.prototype, "InUIAutomationInvoke", 
	System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer.prototype.get_InUIAutomationInvoke, System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer.prototype.set_InUIAutomationInvoke);
System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer.prototype.inUIAutomationInvoke = false;

System.Windows.Automation.Peers.ComboBoxAutomationPeer.prototype._ctor = function (owner) {
	System.Windows.Automation.Peers.SelectorAutomationPeer.prototype._ctor.call(this, owner);
};
System.Windows.Automation.Peers.ComboBoxAutomationPeer.prototype.GetAutomationControlTypeCore = function () {
	return System.Windows.Automation.Peers.AutomationControlType.ComboBox;
};
System.Windows.Automation.Peers.ComboBoxAutomationPeer.prototype.GetClassNameCore = function () {
	return "ComboBox";
};
System.Windows.Automation.Peers.ComboBoxAutomationPeer.prototype.CreateItemAutomationPeer = function (item) {
	return JSIL.New(System.Windows.Automation.Peers.ListBoxItemAutomationPeer, "_ctor$1", [item, this]);
};
System.Windows.Automation.Peers.ComboBoxAutomationPeer.prototype.GetPattern = function (pattern) {
	var result = null;
	if (pattern === System.Windows.Automation.Peers.PatternInterface.Value) {
		var comboBox = JSIL.Cast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this), System.Windows.Controls.ComboBox);
		if (comboBox.IsEditable) {
			result = this;
		}
	} else if (pattern === System.Windows.Automation.Peers.PatternInterface.ExpandCollapse) {
		result = this;
	} else {
		result = System.Windows.Automation.Peers.SelectorAutomationPeer.prototype.GetPattern.call(this, pattern);
	}
	return result;
};
System.Windows.Automation.Peers.ComboBoxAutomationPeer.prototype.IExpandCollapseProvider_Expand = function () {
	if (!System.Windows.Automation.Peers.AutomationPeer.prototype.IsEnabled.call(this)) {
		throw new System.Windows.Automation.ElementNotEnabledException();
	}
	var comboBox = JSIL.Cast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this), System.Windows.Controls.ComboBox);
	comboBox.IsDropDownOpen = true;
};
System.Windows.Automation.Peers.ComboBoxAutomationPeer.prototype.IExpandCollapseProvider_Collapse = function () {
	if (!System.Windows.Automation.Peers.AutomationPeer.prototype.IsEnabled.call(this)) {
		throw new System.Windows.Automation.ElementNotEnabledException();
	}
	var comboBox = JSIL.Cast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this), System.Windows.Controls.ComboBox);
	comboBox.IsDropDownOpen = false;
};
System.Windows.Automation.Peers.ComboBoxAutomationPeer.prototype.IExpandCollapseProvider_get_ExpandCollapseState = function () {
	var comboBox = JSIL.Cast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this), System.Windows.Controls.ComboBox);
	if (!comboBox.IsDropDownOpen) {
		return System.Windows.Automation.ExpandCollapseState.Collapsed;
	}
	return System.Windows.Automation.ExpandCollapseState.Expanded;
};
System.Windows.Automation.Peers.ComboBoxAutomationPeer.prototype.RaiseExpandCollapseAutomationEvent = function (oldValue, newValue) {
	System.Windows.Automation.Peers.AutomationPeer.prototype.RaisePropertyChangedEvent.call(this, System.Windows.Automation.ExpandCollapsePatternIdentifiers.ExpandCollapseStateProperty, oldValue ? System.Windows.Automation.ExpandCollapseState.Expanded : System.Windows.Automation.ExpandCollapseState.Collapsed, newValue ? System.Windows.Automation.ExpandCollapseState.Expanded : System.Windows.Automation.ExpandCollapseState.Collapsed);
};
System.Windows.Automation.Peers.ComboBoxAutomationPeer.prototype.IValueProvider_SetValue = function (value) {
	throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm02.System.Windows.Resx.GetString$2("UIA_OperationCannotBePerformed")]);
};
System.Windows.Automation.Peers.ComboBoxAutomationPeer.prototype.IValueProvider_get_IsReadOnly = function () {
	var comboBox = JSIL.Cast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this), System.Windows.Controls.ComboBox);
	return (!comboBox.IsEnabled || !comboBox.IsEditable);
};
System.Windows.Automation.Peers.ComboBoxAutomationPeer.prototype.IValueProvider_get_Value = function () {
	var comboBox = JSIL.Cast(System.Windows.Automation.Peers.FrameworkElementAutomationPeer.prototype.get_Owner.call(this), System.Windows.Controls.ComboBox);
	if (comboBox.SelectionBoxItem !== null) {
		return System.Windows.FrameworkElement.GetStringFromObject(comboBox.SelectionBoxItem);
	}
	return System.String.Empty;
};
JSIL.MakeProperty(System.Windows.Automation.Peers.ComboBoxAutomationPeer.prototype, "IExpandCollapseProvider_ExpandCollapseState", 
	System.Windows.Automation.Peers.ComboBoxAutomationPeer.prototype.IExpandCollapseProvider_get_ExpandCollapseState, null);
JSIL.MakeProperty(System.Windows.Automation.Peers.ComboBoxAutomationPeer.prototype, "IValueProvider_IsReadOnly", 
	System.Windows.Automation.Peers.ComboBoxAutomationPeer.prototype.IValueProvider_get_IsReadOnly, null);
JSIL.MakeProperty(System.Windows.Automation.Peers.ComboBoxAutomationPeer.prototype, "IValueProvider_Value", 
	System.Windows.Automation.Peers.ComboBoxAutomationPeer.prototype.IValueProvider_get_Value, null);

$asm02.System.Windows.Automation.Peers.HyperlinkAutomationPeer.prototype._ctor = function (hyperlink) {
	System.Windows.Automation.Peers.AutomationPeer.prototype._ctor$0.call(this);
	this._owner = hyperlink;
};
$asm02.System.Windows.Automation.Peers.HyperlinkAutomationPeer.prototype.get_Owner = function () {
	return this._owner;
};
$asm02.System.Windows.Automation.Peers.HyperlinkAutomationPeer.prototype.set_OwnerParent = function (value) {
	this._richTextBox = value;
};
$asm02.System.Windows.Automation.Peers.HyperlinkAutomationPeer.prototype.GetAcceleratorKeyCore = function () {
	return null;
};
$asm02.System.Windows.Automation.Peers.HyperlinkAutomationPeer.prototype.GetAccessKeyCore = function () {
	return null;
};
$asm02.System.Windows.Automation.Peers.HyperlinkAutomationPeer.prototype.GetAutomationControlTypeCore = function () {
	return System.Windows.Automation.Peers.AutomationControlType.Hyperlink;
};
$asm02.System.Windows.Automation.Peers.HyperlinkAutomationPeer.prototype.GetAutomationIdCore = function () {
	return null;
};
$asm02.System.Windows.Automation.Peers.HyperlinkAutomationPeer.prototype.GetBoundingRectangleCore = function () {
	var rect = new System.Windows.Rect();
	var owner = this.Owner;
	var uIATextRange = new $asm02.System.Windows.Documents.UIATextRange(owner.ElementStart, owner.ElementEnd);
	var boundingRectangles = uIATextRange.GetBoundingRectangles();
	var num = boundingRectangles[0];
	var num2 = boundingRectangles[1];
	var num3 = (boundingRectangles[0] + boundingRectangles[2]);
	var num4 = (boundingRectangles[1] + boundingRectangles[3]);
__loop0__: 
	for (var i = 0; i < Math.floor(boundingRectangles.length / 4); ++i) {
		var num5 = (i * 4);
		var num6 = ((i * 4) + 1);
		var num7 = ((i * 4) + 2);
		var num8 = ((i * 4) + 3);
		if (num > boundingRectangles[num5]) {
			num = boundingRectangles[num5];
		}
		if (num2 > boundingRectangles[num6]) {
			num2 = boundingRectangles[num6];
		}
		if (num3 < (boundingRectangles[num5] + boundingRectangles[num7])) {
			num3 = (boundingRectangles[num5] + boundingRectangles[num7]);
		}
		if (num4 < (boundingRectangles[num6] + boundingRectangles[num8])) {
			num4 = (boundingRectangles[num6] + boundingRectangles[num8]);
		}
	}
	var generalTransform = this._richTextBox.TransformToVisual(null);
	if (generalTransform !== null) {
		rect._ctor$0(num, num2, (num3 - num), (num4 - num2));
		return generalTransform.TransformBounds(rect.MemberwiseClone());
	}
	return new System.Windows.Rect();
};
$asm02.System.Windows.Automation.Peers.HyperlinkAutomationPeer.prototype.GetChildrenCore = function () {
	return null;
};
$asm02.System.Windows.Automation.Peers.HyperlinkAutomationPeer.prototype.GetClassNameCore = function () {
	return "Hyperlink";
};
$asm02.System.Windows.Automation.Peers.HyperlinkAutomationPeer.prototype.GetClickablePointCore = function () {
	var boundingRectangleCore = this.GetBoundingRectangleCore().MemberwiseClone();
	return new System.Windows.Point((boundingRectangleCore.X + (boundingRectangleCore.Width / 2)), (boundingRectangleCore.Y + (boundingRectangleCore.Height / 2)));
};
$asm02.System.Windows.Automation.Peers.HyperlinkAutomationPeer.prototype.GetHelpTextCore = function () {
	return null;
};
$asm02.System.Windows.Automation.Peers.HyperlinkAutomationPeer.prototype.GetItemStatusCore = function () {
	return null;
};
$asm02.System.Windows.Automation.Peers.HyperlinkAutomationPeer.prototype.GetItemTypeCore = function () {
	return null;
};
$asm02.System.Windows.Automation.Peers.HyperlinkAutomationPeer.prototype.GetLabeledByCore = function () {
	return null;
};
$asm02.System.Windows.Automation.Peers.HyperlinkAutomationPeer.prototype.GetLocalizedControlTypeCore = function () {
	return "hyperlink";
};
$asm02.System.Windows.Automation.Peers.HyperlinkAutomationPeer.prototype.GetNameCore = function () {
	var text = System.String.Empty;
	var owner = this.Owner;
	var uIATextRange = new $asm02.System.Windows.Documents.UIATextRange(owner.ContentStart, owner.ContentEnd);
	text = uIATextRange.GetText(-1);
	if (text === null) {
		text = System.String.Empty;
	}
	return text;
};
$asm02.System.Windows.Automation.Peers.HyperlinkAutomationPeer.prototype.GetOrientationCore = function () {
	return System.Windows.Automation.Peers.AutomationOrientation.Horizontal;
};
$asm02.System.Windows.Automation.Peers.HyperlinkAutomationPeer.prototype.HasKeyboardFocusCore = function () {
	var result = false;
	if (System.Windows.Input.FocusManager.GetFocusedElement() === this._owner) {
		result = true;
	}
	return result;
};
$asm02.System.Windows.Automation.Peers.HyperlinkAutomationPeer.prototype.IsContentElementCore = function () {
	return true;
};
$asm02.System.Windows.Automation.Peers.HyperlinkAutomationPeer.prototype.IsControlElementCore = function () {
	return true;
};
$asm02.System.Windows.Automation.Peers.HyperlinkAutomationPeer.prototype.IsEnabledCore = function () {
	return false;
};
$asm02.System.Windows.Automation.Peers.HyperlinkAutomationPeer.prototype.IsKeyboardFocusableCore = function () {
	var result = false;
	if (!((this._richTextBox === null) || !this._richTextBox.IsReadOnly)) {
		result = true;
	}
	return result;
};
$asm02.System.Windows.Automation.Peers.HyperlinkAutomationPeer.prototype.IsOffscreenCore = function () {
	return false;
};
$asm02.System.Windows.Automation.Peers.HyperlinkAutomationPeer.prototype.IsPasswordCore = function () {
	return false;
};
$asm02.System.Windows.Automation.Peers.HyperlinkAutomationPeer.prototype.IsRequiredForFormCore = function () {
	return false;
};
$asm02.System.Windows.Automation.Peers.HyperlinkAutomationPeer.prototype.SetFocusCore = function () {
	if (this.IsKeyboardFocusableCore()) {
		$asm02.MS.Internal.XcpImports.FocusManager_SetFocusedElement(this._owner.NativeObject);
	}
};
$asm02.System.Windows.Automation.Peers.HyperlinkAutomationPeer.prototype.GetPattern = function (patternInterface) {
	if (!JSIL.Cast(patternInterface, System.Boolean)) {
		return this;
	}
	return null;
};
$asm02.System.Windows.Automation.Peers.HyperlinkAutomationPeer.prototype.IInvokeProvider_Invoke = function () {
	if (!(!System.Uri.op_Inequality(this._owner.NavigateUri, null) || !this.IsKeyboardFocusableCore())) {
		var navigationHelper = new $asm02.MS.Internal.NavigationHelper(this._richTextBox, this._owner.TargetName, this._owner.NavigateUri);
		navigationHelper.Navigate(this.inUIAutomationInvoke);
	}
};
$asm02.System.Windows.Automation.Peers.HyperlinkAutomationPeer.prototype.get_InUIAutomationInvoke = function () {
	return this.inUIAutomationInvoke;
};
$asm02.System.Windows.Automation.Peers.HyperlinkAutomationPeer.prototype.set_InUIAutomationInvoke = function (value) {
	this.inUIAutomationInvoke = value;
};
JSIL.MakeProperty($asm02.System.Windows.Automation.Peers.HyperlinkAutomationPeer.prototype, "Owner", 
	$asm02.System.Windows.Automation.Peers.HyperlinkAutomationPeer.prototype.get_Owner, null);
JSIL.MakeProperty($asm02.System.Windows.Automation.Peers.HyperlinkAutomationPeer.prototype, "OwnerParent", 
	null, $asm02.System.Windows.Automation.Peers.HyperlinkAutomationPeer.prototype.set_OwnerParent);
JSIL.MakeProperty($asm02.System.Windows.Automation.Peers.HyperlinkAutomationPeer.prototype, "InUIAutomationInvoke", 
	$asm02.System.Windows.Automation.Peers.HyperlinkAutomationPeer.prototype.get_InUIAutomationInvoke, $asm02.System.Windows.Automation.Peers.HyperlinkAutomationPeer.prototype.set_InUIAutomationInvoke);
$asm02.System.Windows.Automation.Peers.HyperlinkAutomationPeer.prototype._owner = null;
$asm02.System.Windows.Automation.Peers.HyperlinkAutomationPeer.prototype._richTextBox = null;
$asm02.System.Windows.Automation.Peers.HyperlinkAutomationPeer.prototype.inUIAutomationInvoke = false;

JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Windows.DependencyObject, [
				"MS.Internal.IManagedPeer", "MS.Internal.IManagedPeerBase", "MS.Internal.INativeCoreTypeWrapper"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ExternalMembers(System.Windows.DependencyObject.prototype, 
			"SetValue", "GetValue", "AddEventListener", "RemoveEventListener"
		);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Windows.UIElement, [
				"System.Windows.Automation.IAutomationElement"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Windows.PresentationFrameworkCollection$b1, [
				"System.Collections.Generic.IList$b1", "System.Collections.Generic.ICollection$b1", "System.Collections.Generic.IEnumerable$b1", "System.Collections.IList", "System.Collections.ICollection", "System.Collections.IEnumerable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.System.Windows.PresentationFrameworkCollection$b1.CollectionEnum$b1, [
				"System.Collections.Generic.IEnumerator$b1", "System.IDisposable", "System.Collections.IEnumerator"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Windows.RoutedEventArgs, [
				"MS.Internal.IManagedPeerBase", "MS.Internal.INativeCoreTypeWrapper"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Windows.StartupEventArgs, [
				"MS.Internal.IManagedPeerBase", "MS.Internal.INativeCoreTypeWrapper"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Windows.VisualStateChangedEventArgs, [
				"MS.Internal.IManagedPeerBase", "MS.Internal.INativeCoreTypeWrapper"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Windows.CheckAndDownloadUpdateCompletedEventArgs, [
				"MS.Internal.IManagedPeerBase", "MS.Internal.INativeCoreTypeWrapper"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Windows.Media.RenderingEventArgs, [
				"MS.Internal.IManagedPeerBase", "MS.Internal.INativeCoreTypeWrapper"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Windows.Media.Animation.EasingFunctionBase, [
				"System.Windows.Media.Animation.IEasingFunction"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Windows.Input.TouchFrameEventArgs, [
				"MS.Internal.IManagedPeerBase", "MS.Internal.INativeCoreTypeWrapper"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Windows.Documents.TextElement, [
				"System.Windows.Automation.IAutomationElement"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Windows.Controls.NotifyEventArgs, [
				"MS.Internal.IManagedPeerBase", "MS.Internal.INativeCoreTypeWrapper"
			]);
	});
JSIL.QueueInitializer(function () {
		System.Windows.Controls.Control.prototype.__StructFields__ = [
			["_lastLocation", System.Windows.Point]
		];
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Windows.Controls.ItemsControl, [
				"MS.Internal.Controls.IGeneratorHost"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.MS.Internal.ErrorEventArgs, [
				"MS.Internal.IManagedPeerBase", "MS.Internal.INativeCoreTypeWrapper"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.MS.Internal.RuntimeHostEventArgs, [
				"MS.Internal.IManagedPeerBase", "MS.Internal.INativeCoreTypeWrapper"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.MS.Internal.CorePropertyChangedEventArgs, [
				"MS.Internal.IManagedPeerBase", "MS.Internal.INativeCoreTypeWrapper"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.MS.Internal.IsEnabledChangedEventArgs, [
				"MS.Internal.IManagedPeerBase", "MS.Internal.INativeCoreTypeWrapper"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Windows.Media.Imaging.DownloadProgressEventArgs, [
				"MS.Internal.IManagedPeerBase", "MS.Internal.INativeCoreTypeWrapper"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Windows.Printing.PrintPageEventArgs, [
				"MS.Internal.IManagedPeerBase", "MS.Internal.INativeCoreTypeWrapper"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Windows.Printing.BeginPrintEventArgs, [
				"MS.Internal.IManagedPeerBase", "MS.Internal.INativeCoreTypeWrapper"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Windows.Printing.EndPrintEventArgs, [
				"MS.Internal.IManagedPeerBase", "MS.Internal.INativeCoreTypeWrapper"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Windows.Navigation.NavigationEventArgs, [
				"MS.Internal.IManagedPeerBase", "MS.Internal.INativeCoreTypeWrapper"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Windows.Data.Binding, [
				"MS.Internal.IMarkupExtension", "System.ComponentModel.ISupportInitialize"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Windows.Data.BindingExpression, [
				"System.Windows.IDataContextChangedListener", "System.Windows.Data.IErrorsChangedListener"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.System.Net.Browser.BrowserHttpWebRequestCreator, [
				"System.Net.IWebRequestCreate"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.System.Net.Browser.BHWRAsyncResult, [
				"System.IAsyncResult"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.System.Net.Browser.BrowserHttpWebRequest, [
				"System.Net.INetworkProgress"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.System.Net.Browser.ClientHttpWebRequestCreator, [
				"System.Net.IWebRequestCreate"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.System.Net.Browser.UnsafeClientHttpWebRequestCreator, [
				"System.Net.IUnsafeWebRequestCreate"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.System.Net.Browser.OHWRAsyncResult, [
				"System.IAsyncResult"
			]);
	});
JSIL.QueueInitializer(function () {
		$asm02.System.Net.Browser.AuthenticationThrottle.ThrottleEntry.prototype.__StructFields__ = [
			["LockTime", System.DateTime]
		];
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.System.Net.Browser.ClientHttpWebRequest, [
				"System.Net.INetworkProgress"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Windows.Media.Color, [
				"System.IFormattable"
			]);
	});
JSIL.QueueInitializer(function () {
		System.Windows.Media.Color.prototype.__StructFields__ = [
			["sRgbColor", $asm02.System.Windows.Media.Color.MILColor]
		];
	});
JSIL.QueueInitializer(function () {
		System.Windows.Duration.prototype.__StructFields__ = [
			["_timeSpan", System.TimeSpan]
		];
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.System.Windows.IndexerPathStep, [
				"System.Windows.Controls.ICollectionChangedListener", "System.Windows.IRaisePropertyPathStepChanged"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.MS.Internal.InternalNetworkStream.StreamAsyncResult, [
				"System.IAsyncResult"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Collections.ObjectModel.ReadOnlyObservableCollection$b1, [
				"System.Collections.Specialized.INotifyCollectionChanged", "System.ComponentModel.INotifyPropertyChanged"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.MS.Internal.ManagedPeerTable.IntPtrComparer, [
				"System.Collections.Generic.IEqualityComparer$b1"
			]);
	});
JSIL.QueueInitializer(function () {
		$asm02.MS.Internal.XamlAssemblyToken.prototype.__StructFields__ = [
			["_handle", $asm02.MS.Internal.XamlTokenHandle]
		];
	});
JSIL.QueueInitializer(function () {
		$asm02.MS.Internal.XamlTypeNamespaceToken.prototype.__StructFields__ = [
			["_namespaceHandle", $asm02.MS.Internal.XamlTokenHandle], 
			["_assemblyHandle", $asm02.MS.Internal.XamlTokenHandle]
		];
	});
JSIL.QueueInitializer(function () {
		$asm02.MS.Internal.XamlTypeToken.prototype.__StructFields__ = [
			["_handle", $asm02.MS.Internal.XamlTokenHandle]
		];
	});
JSIL.QueueInitializer(function () {
		$asm02.MS.Internal.XamlPropertyToken.prototype.__StructFields__ = [
			["_handle", $asm02.MS.Internal.XamlTokenHandle]
		];
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Windows.Media.Matrix, [
				"System.IFormattable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ExternalMembers($asm02.MS.Internal.NativeObjectSafeHandle.prototype, 
			"_ctor"
		);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Collections.ObjectModel.ObservableCollection$b1, [
				"System.Collections.Specialized.INotifyCollectionChanged", "System.ComponentModel.INotifyPropertyChanged"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Windows.Point, [
				"System.IFormattable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.System.Windows.PropertyAccessPathStep, [
				"System.Windows.IRaisePropertyPathStepChanged"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.System.Windows.CLRPropertyListener, [
				"System.Windows.ISourcePropertyChanged"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.System.Windows.IndexerListener, [
				"System.Windows.ISourcePropertyChanged"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Windows.Rect, [
				"System.IFormattable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Windows.Media.Animation.RepeatBehavior, [
				"System.IFormattable"
			]);
	});
JSIL.QueueInitializer(function () {
		System.Windows.Media.Animation.RepeatBehavior.prototype.__StructFields__ = [
			["_repeatDuration", System.TimeSpan]
		];
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Windows.Application, [
				"MS.Internal.IManagedPeer", "MS.Internal.IManagedPeerBase", "MS.Internal.INativeCoreTypeWrapper"
			]);
	});
JSIL.QueueInitializer(function () {
		System.Windows.Application.prototype.__StructFields__ = [
			["_allowNavigation", System.Nullable$b1.Of(System.Boolean)]
		];
	});
JSIL.QueueInitializer(function () {
		JSIL.ExternalMembers(System.Windows.Application.prototype, 
			"Application_Starting", "Application_Started"
		);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.MS.Internal.JoltHelperEx, [
				"Microsoft.Internal.IManagedFrameworkInternalHelper"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.MS.Internal.JoltHelper.ApplicationResourceStreamResolver, [
				"System.Xml.IApplicationResourceStreamResolver"
			]);
	});
JSIL.QueueInitializer(function () {
		$asm02.System.Windows.CoreDependencyProperty.prototype.__StructFields__ = [
			["_isAnyTypeProperty", System.Nullable$b1.Of(System.Boolean)]
		];
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Windows.Threading.DispatcherTimer, [
				"MS.Internal.IManagedPeer", "MS.Internal.IManagedPeerBase", "MS.Internal.INativeCoreTypeWrapper"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ExternalMembers($asm02.MS.Internal.XcpImports, 
			"FindNameNative", "GetVisualRootNative", "Application_GetWindowNative", "Application_SetVisualRootNative", "CreateObjectByTypeIndexNative", "CreateObjectByTypeIndexWithDONative", "GetValue", "GetValueNative", "GetManagedPropertyValueFromStyleNative", "SL3GetManagedPropertyValueFromStyleNative", "FontFamily_GetFamilyNameNative", "SetValue", "SetValueNative", "ClearValueNative", "ReadLocalValueNative", "IsPropertyDefaultNative", "GetAnimationBaseValueNative", "GetMentorNative", "SetParentForInheritanceContextOnlyNative", "GetDownloaderBytesNative", "GetRequestStreamNative", "Application_GetResourceStreamNative", "Deployment_SetCurrentApplicationNative", "Application_GetResourceFromApplicationNative", "ReleaseInternalMemoryNative", "ReleaseInternalStreamNative", "ReadInternalMemoryNative", "ReadInternalStreamNative", "GetStreamPositionNative", "SeekInternalStreamNative", "MeasureOverrideNative", "ArrangeOverrideNative", "UIElement_BringIntoViewNative", "MeasureNative", "ArrangeNative", "GetDesiredSizeNative", "MethodExNative", "AddEventListenerNative", "RemoveEventListenerNative", "ConvertStringToTypedCValueNative", "GetAnimationTargetHandlesNative", "NotifyHasManagedPeerNative", "SetParticipatesInManagedTreeDefaultNative", "DisconnectManagedPeerNative", "GetErrorDetailsNative", "GetNativeTypeIndexNative", "AddRefNativeObjectNative", "ReleaseMNative", "FinalizerReleaseMNative", "CleanupNativePeersNative", "SetFrameworkCallbacksNative", "TraceXcpEventNative", "TraceXcpEventVerboseNative", "GetXcpTraceStateNative", "RenderTargetBitmapCreateNative", "RenderTargetBitmapRenderNative", "RenderTargetBitmapDestroyNative", "WantsEventNative", "WantsEventStaticNative", "DependencyObject_EnterNative", "DependencyObject_LeaveNative", "DependencyObject_ShouldCreatePeerWithStrongRefNative", "DependencyObject_ControlsManagedPeerLifetimeNative", "DependencyObject_SetIsManagedPeerPeggedNoRef", "CreateFromXamlNative", "Host_IsVersionSupportedNative", "Host_GetIsWindowlessNative", "Host_GetEnableHTMLAccessNative", "Host_GetEnableFrameRateCounterNative", "Host_SetEnableFrameRateCounterNative", "Host_GetEnableCacheVisualizationNative", "Host_SetEnableCacheVisualizationNative", "Host_GetEnableRedrawRegionsNative", "Host_SetEnableRedrawRegionsNative", "Host_GetMaxFrameRateNative", "Host_SetMaxFrameRateNative", "Host_GetActualWidthNative", "Host_GetActualHeightNative", "Host_GetIsFullScreenNative", "Host_SetIsFullScreenNative", "Host_GetIsLoadedNative", "Host_GetBackgroundNative", "Host_GetSourceNative", "Host_GetFinalSourceNative", "Host_GetEnableGPUAccelerationNative", "Host_GetAutoZoomNative", "Host_SetAutoZoomNative", "Host_GetZoomFactorNative", "Host_AddedManagedZoomedListenerNative", "Host_RemovedManagedZoomedListenerNative", "Host_GetFileSystemAccessAllowedNative", "Host_GetNetworkingUnrestrictedNative", "Input_GetKeyboardModifiersNative", "SystemSetting_GetIsHighContrastEnabledNative", "SystemSetting_GetSystemColorNative", "Xml_ValidateXmlLanguageNative", "Application_GetCurrentNative", "PostGCCollectMessageNative", "Application_GetInitParamsNative", "Host_GetIsMouseInNotificationWindowNative", "Host_GetNavigationStateNative", "Host_HasNavigationStateChangedNative", "Host_SetNavigationStateNative", "Application_LoadComponentNative", "Application_GetAllowNavigationNative", "FocusManager_GetFocusedElementNative", "FocusManager_SetFocusedElementNative", "LayoutInformation_GetLayoutExceptionElementNative", "LayoutInformation_SetLayoutExceptionElementNative", "UIElement_HitTestPointNative", "UIElement_HitTestRectNative", "UIElement_DeleteListNative", "GetOpenPopupsNative", "InternalTransform_TransformNative", "InternalTransform_TransformBoundsNative", "InternalTransform_Inverse$0", "Transform_TransformNative", "Transform_TransformBoundsNative", "Transform_Inverse$0", "Storyboard_SeekAlignedToLastTickNative", "Storyboard_SetTargetNative", "Storyboard_SetTargetDependencyPropertyNative", "Storyboard_SkipToFillNative", "Timeline_GetCurrentTimeNative", "Timeline_GetClockStateNative", "VideoBrush_SetMediaElementSourceNative", "VideoBrush_SetCaptureGraphSourceNative", "BitmapSource_SetSourceNative", "CreateNativeInteropWrapperNative", "SetManagedCallbackCountNative", "SetManagedCallbackFunctionNative", "GetClassFullNameNative", "GetClassFullNameByIndexNative", "GetCoreDependencyPropertyNameAndTypeByIndexNative", "DispatcherTimer_StartNative", "DispatcherTimer_StopNative", "CreateNativeErrorObjectNative", "ResourceDictionary_AddNative", "ResourceDictionary_CountNative", "ResourceDictionary_ClearNative", "ResourceDictionary_RemoveNative", "ResourceDictionary_GetItemNative", "ResourceDictionary_GetKeyNative", "SaveFileDialog_GetLocalizedInitialFileName", "SaveFileDialog_GetIEProtectedModeTempFileNameNative", "FrameworkElement_OnApplyTemplateNative", "Control_RaiseNative", "MediaElement_SetMediaStreamSourceNative", "MediaStreamSource_SetMediaOpenStreamCountNative", "MediaStreamSource_OnOpenMediaCompletedNative", "MediaStreamSource_SetMediaOpenAttributeNative", "MediaStreamSource_SetMediaOpenStreamDescriptionNative", "MediaStreamSource_OnSeekCompletedNative", "MediaStreamSource_OnGetSampleCompletedNative", "MediaStreamSource_OnGetSampleProgressNative", "MediaStreamSource_OnGetDiagonosticCompletedNative", "MediaStreamSource_OnSwitchMediaStreamCompletedNative", "MediaStreamSource_OnMediaStreamErrorNative", "Deployment_GetCurrentNative", "AllocateNativeBufferNative", "TextBoxView_SetScrollOffsetNative", "TextBoxView_EnableInternalScrollingNative", "OnCreateAutomationPeerNative", "SetAutomationPeerParentNative", "GetAutomationPeerValueNative", "AutomationListenerExistsNative", "AutomationRaiseAutomationEventNative", "GetVisualRelativeNative", "Hyperlink_FindHostFrameworkElementNative", "RichTextBox_GetDocumentEdgeNative", "TextElement_GetEdgeNative", "TextPointer_GetLogicalDirectionNative", "TextPointer_GetCharacterRectNative", "TextPointer_CompareToNative", "TextPointer_GetOffsetNative", "TextPointer_GetNormalizedPositionNative", "TextPointer_GetParentNative", "TextPointer_IsAtInsertionPositionNative", "TextPointer_GetNextInsertionPositionNative", "TextPointer_GetPositionAtOffsetNative", "TextPointer_GetNextWordBoundaryPositionNative", "TextPointer_GetRichTextBox$0", "TextRange_GetTextNative", "RichTextBox_GetTextPositionFromPointNative", "UIATextRange_GetEnclosingElementNative", "UIATextRange_GetChildrenNative", "UIATextRange_DeleteChildrenArrayNative", "UIATextRange_GetBoundingRectanglesNative", "UIATextRange_DeleteBoundingRectanglesArrayNative", "StylusPointCollection_AddItemNative", "StylusPointCollection_GetItemNative", "StylusPointCollection_InsertItemNative", "StylusPointCollection_IndexOfItemNative", "StylusPointCollection_RemoveItemNative", "AutomationRaiseAutomationPropertyChangedNative", "CallAutomationPeerMethodNative", "Collection_AddNative", "Collection_GetItemNative", "Collection_RemoveNative", "Collection_RemoveAtNative", "Collection_InsertNative", "Collection_ClearNative", "Collection_IndexOfNative", "SetContentIsNotLogicalNative", "SetContentIsTemplateBoundManagedNative", "MediaElement_AcquireLicenseComplete$0", "MediaElement_RequestLogNative", "MessageBox_ShowCoreNative", "NavigateToSafeURINative", "GetPropertyNameNative", "GetDefaultValueNative", "WebRequest_GetSizeNative", "WebRequest_GetTotalSizeNative", "WebRequest_GetShouldEnableMemoryAsIPALStreamNative", "WebRequest_SetHeadersNative", "WebRequest_GetResponseHeadersNative", "WebRequest_EndUploadDataNative", "WebRequest_AddUploadDataChunkNative", "Application_InstallNative", "Application_VerifyAuthenticodeSignatureNative", "Application_CheckAndDownloadUpdateNative", "Application_GetAppIDForURINative", "Host_GetFullScreenOptionsNative", "Host_SetFullScreenOptionsNative", "Application_GetHasElevatedPermissionsNative", "Application_SetHasElevatedPermissionsNative", "GetIsNativeHostedNative", "LocalMessageSenderCreateNative", "LocalMessageReceiverCreateNative", "LocalMessageSendNative", "LocalMessageReceiveNative", "LocalMessageStopReceiveNative", "ClearCustomTypeFactoryCacheNative", "RefreshXamlSchemaContextNative", "GetTemplatedParentNative", "GoToStateNative", "GoToStateInternalNative", "GetCurrentStateNative", "SuppressIsEnabledNative", "ResolveXamlPrefixNative", "GetPropertyUsingCurrentOWContextNative", "GetNativePropertyInfoNative", "XamlSchemaContext_ResolvePropertyNameNative", "XamlSchemaContext_AddAssemblyNative", "XamlSchemaContext_AddAssemblyXmlnsDefinitionNative", "GetInheritanceParentNative", "GetIsActiveNative", "GetAppVersionNative", "EasingFunction_EaseInCoreNative", "Analytics_Start$0", "Analytics_Stop$0", "Analytics_GetAverageProcessLoad$0", "Analytics_GetAverageProcessorLoad$0", "Analytics_GetGpuInformationNative", "ShaderEffect_SetConstantNative", "WriteableBitmap_CopyPixelsNative", "WriteableBitmap_CreateNative", "WriteableBitmap_CreateFromSourceNative", "WriteableBitmap_CreateFromUIElementNative", "WriteableBitmap_CalculateSizeNative", "WriteableBitmap_InvalidateNative", "WriteableBitmap_RenderNative", "GetResourceStringNative", "DesignerProperties_SetIsInDesignModeNative", "LayoutManager_ClearErrorOccurredDuringLayoutNative", "LayoutManager_DidErrorOccurDuringLayoutNative", "PrintDocument_ProcessPrintRequestNative", "PrintDocument_LaunchPrintDialogNative", "PrintDocument_ResetNative", "RichTextBoxView_SetScrollOffsetNative", "RichTextSelection_SetPropertyValueNative", "RichTextSelection_GetPropertyValueNative", "RichTextSelection_SetTextNative", "RichTextSelection_GetTextNative", "RichTextSelection_InsertNative", "RichTextSelection_SelectNative", "RichTextSelection_GetEdgeNative", "Text_GetBaselineOffsetNative", "Window_ActivateNative", "Window_CloseNative", "Window_DragMoveNative", "Window_DragResizeNative", "Window_MinimizeNative", "Window_MaximizeNative", "Window_RestoreNative", "CaptureGraph_StartNative", "CaptureGraph_StopNative", "CaptureGraph_GetStateNative", "CaptureGraph_GetHasDeviceAccessNative", "CaptureGraph_RequestDeviceAccessNative", "CaptureGraph_GetAvailableVideoCaptureDevicesNative", "CaptureGraph_GetAvailableAudioCaptureDevicesNative", "VideoSink_SetSourceNative", "VideoSink_GetSourceNative", "AudioSink_SetSourceNative", "AudioSink_GetSourceNative", "VideoCaptureDevice_SetDesiredFormatNative$0", "VideoCaptureDevice_SetDesiredFormatNative$1", "VideoCaptureDevice_GetDesiredFormatNative", "VideoCaptureDevice_HasDesiredFormatNative", "VideoCaptureDevice_GetSupportedFormatCountNative", "VideoCaptureDevice_GetSupportedFormatsNative", "AudioCaptureDevice_SetDesiredFormatNative$0", "AudioCaptureDevice_SetDesiredFormatNative$1", "AudioCaptureDevice_GetDesiredFormatNative", "AudioCaptureDevice_HasDesiredFormatNative", "AudioCaptureDevice_GetSupportedFormatCountNative", "AudioCaptureDevice_GetSupportedFormatsNative", "WebBrowser_NavigateNative", "WebBrowser_NavigateToStringNative", "WebBrowser_SaveToStringNative", "WebBrowserBrush_RedrawNative", "WebBrowserBrush_SetSourceNative", "WebBrowser_InvokeScriptNative", "DrmLicense_GetExpirationDate_Native", "DrmLicense_GetKeyId_Native", "DrmLicense_GetUplinkKeyId_Native", "DrmLicense_IsUsable_Native", "DrmLicenseEnumerator_CreateNativePeerByKID_Native", "DrmLicenseEnumerator_CreateNativePeerByStream_Native", "DrmLicenseEnumerator_MoveNext_Native", "DrmLicenseEnumerator_Reset_Native", "DrmLicenseEnumerator_GetCurrent_Native", "DrmReleaseLicenseWrapper_Native", "DrmLicenseAcquirer_CreateNativePeer_Entry", "DrmLicenseAcquirer_GenerateChallengeByHeaderComponentsAsync_Native", "DrmLicenseAcquirer_GenerateChallengeByHeaderBytesAsync_Native", "DrmLicenseAcquirer_GenerateChallengeByHeaderAsync_Native", "DrmLicenseAcquirer_AcquireAsync_Native", "DrmLicenseAcquirer_SetLicenseResponse_Native", "DrmLicenseAcquirer_Abort_Entry", "DrmLicenseAcquirer_DomainJoinComplete_Entry", "DrmDomainAcquirer_CreateNativePeer_Native", "DrmDomainAcquirer_DomainOpGenerateChallengeAsync_Native", "DrmDomainAcquirer_DomainOpAsync_Native", "DrmDomainAcquirer_DomainOpSetResponse_Native", "DrmDomainAcquirer_DomainOpAsyncCancel_Native", "DrmException_GetErrorDataFromHResult_Native", "IsUserInitiatedAction_Native", "Clipboard_AccessAllowedNative", "Clipboard_ContainsTextNative", "Clipboard_GetTextNative", "Clipboard_SetTextNative", "NotificationWindow_ShowNative", "NotificationWindow_CloseNative", "GetConnectorInfoNative", "GetClientInfoNative", "ControlHost_GetDefaultThemeResourceDictionaryNative", "Font_GetSystemGlyphTypefacesNative", "InputManager_GetLastMousePositionNative", "PathGeometry_ToStringNative", "InlineCollection_IsInTextBlockNative", "InlineCollection_IsInHyperlinkNative"
		);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.MS.Internal.ApplicationLifetimeObjectsCollection, [
				"System.Collections.IList", "System.Collections.ICollection", "System.Collections.IEnumerable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Windows.Data.RelativeSource, [
				"MS.Internal.IMarkupExtension"
			]);
	});
JSIL.QueueInitializer(function () {
		$asm02.MS.Internal.XamlQualifiedObject.prototype.__StructFields__ = [
			["_typeToken", $asm02.MS.Internal.XamlTypeToken], 
			["_value", $asm02.MS.Internal.CValue]
		];
	});
JSIL.QueueInitializer(function () {
		System.Windows.Input.ManipulationStartedEventArgs.prototype.__StructFields__ = [
			["<ManipulationOrigin>k__BackingField", System.Windows.Point]
		];
	});
JSIL.QueueInitializer(function () {
		System.Windows.Input.ManipulationDeltaEventArgs.prototype.__StructFields__ = [
			["<ManipulationOrigin>k__BackingField", System.Windows.Point]
		];
	});
JSIL.QueueInitializer(function () {
		System.Windows.Input.ManipulationCompletedEventArgs.prototype.__StructFields__ = [
			["<ManipulationOrigin>k__BackingField", System.Windows.Point]
		];
	});
JSIL.QueueInitializer(function () {
		$asm02.MS.Internal.Controls.ScrollData.prototype.__StructFields__ = [
			["_offset", $asm02.MS.Internal.Controls.Vector], 
			["_computedOffset", $asm02.MS.Internal.Controls.Vector], 
			["_viewport", System.Windows.Size], 
			["_extent", System.Windows.Size], 
			["_maxDesiredSize", System.Windows.Size]
		];
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Windows.Data.CollectionViewGroup, [
				"System.ComponentModel.INotifyPropertyChanged"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.MS.Internal.CollectionViewGroupInternal.IListComparer, [
				"System.Collections.Generic.IComparer$b1"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.MS.Internal.CollectionViewGroupInternal.LeafEnumerator, [
				"System.Collections.IEnumerator"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.MS.Internal.CollectionViewGroupRoot, [
				"System.Collections.Specialized.INotifyCollectionChanged"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.MS.Internal.CollectionViewProxy, [
				"System.ComponentModel.ICollectionView", "System.Collections.IEnumerable", "System.Collections.Specialized.INotifyCollectionChanged", "System.ComponentModel.INotifyPropertyChanged", "System.ComponentModel.IEditableCollectionView", "System.Windows.Data.IViewLifetime"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ExternalMembers($asm02.MS.Internal.CoreTypeEventHelper.prototype, 
			"_ctor", "AddEventListener", "RemoveEventListener"
		);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.MS.Internal.Interop.InteropWrapper, [
				"MS.Internal.IManagedPeer", "MS.Internal.IManagedPeerBase", "MS.Internal.INativeCoreTypeWrapper"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ExternalMembers($asm02.MS.Internal.ComAutomation.ComAutomationNative, 
			"IsAllowedNative", "GetEnumeratorNative", "MoveNextNative", "GetCurrentNative", "ResetNative", "GetObjectNative", "InvokeNative", "ConnectEventNative", "DisconnectEventNative", "CreateNativeStringNative", "CreateNativeArrayNative", "SetStringArrayElementNative", "CopyNativeArrayToManagedArrayNative", "CleanupInteropValueNative", "CleanupInteropValuesNative", "CheckCrossApartmentAccessNative"
		);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.MS.Internal.ComAutomation.ComAutomationManagedPeerBase, [
				"MS.Internal.IManagedPeerBase", "MS.Internal.INativeCoreTypeWrapper", "System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.MS.Internal.ComAutomation.ComAutomationEnumerator, [
				"System.Collections.IEnumerator"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.MS.Internal.ComAutomation.ComAutomationParam, [
				"System.Runtime.CompilerServices.IStrongBox"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Windows.Controls.ItemCollection, [
				"System.Collections.Specialized.INotifyCollectionChanged", "System.Windows.Controls.ICollectionChangedListener"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.System.Windows.Controls.ItemCollection.EnumerableCollectionView, [
				"System.Windows.Controls.ICollectionChangedListener"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.System.Windows.Controls.ItemCollection.TypedEnumerable$b1, [
				"System.Collections.Generic.IEnumerable$b1", "System.Collections.IEnumerable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.System.Windows.Controls.ItemCollection.TypedEnumerable$b1.$lGetEnumeratorInternal$gd__0, [
				"System.Collections.Generic.IEnumerator$b1", "System.Collections.IEnumerator", "System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.MS.Internal.SortFieldComparer, [
				"System.Collections.Generic.IComparer$b1"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.System.Windows.Data.CollectionView, [
				"System.ComponentModel.ICollectionView", "System.Collections.IEnumerable", "System.Collections.Specialized.INotifyCollectionChanged", "System.ComponentModel.INotifyPropertyChanged", "System.Windows.Data.IViewLifetime"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.System.Windows.Data.CollectionView.PlaceholderAwareEnumerator, [
				"System.Collections.IEnumerator"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.System.Windows.Data.CollectionView.DeferHelper, [
				"System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.System.Windows.Data.CollectionView.SimpleMonitor, [
				"System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.MS.Internal.EnumerableCollectionView.IgnoreViewEventsHelper, [
				"System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.MS.Internal.Comparer, [
				"System.Collections.Generic.IComparer$b1"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.IO.IsolatedStorage.IsolatedStorageSettings, [
				"System.Collections.Generic.IDictionary$b2", "System.Collections.Generic.ICollection$b1", "System.Collections.Generic.IEnumerable$b1", "System.Collections.IDictionary", "System.Collections.ICollection", "System.Collections.IEnumerable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.ComponentModel.GroupDescription, [
				"System.ComponentModel.INotifyPropertyChanged"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.ComponentModel.SortDescriptionCollection, [
				"System.Collections.Specialized.INotifyCollectionChanged"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.System.ComponentModel.SortDescriptionCollection.EmptySortDescriptionCollection, [
				"System.Collections.IList", "System.Collections.ICollection", "System.Collections.IEnumerable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProviderBase, [
				"System.Dynamic.IDynamicMetaObjectProvider"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.System.Runtime.InteropServices.Automation.AutomationMetaObjectProvider, [
				"System.IDisposable", "System.Collections.IEnumerable"
			]);
	});
JSIL.QueueInitializer(function () {
		System.Windows.Controls.Primitives.ButtonBase.prototype.__StructFields__ = [
			["_mousePosition", System.Windows.Point]
		];
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Windows.Controls.Primitives.Selector, [
				"System.ComponentModel.ISupportInitialize"
			]);
	});
JSIL.QueueInitializer(function () {
		$asm02.System.Windows.Controls.Primitives.Selector.SelectionChanger.prototype.__StructFields__ = [
			["_selectedIndex", System.Nullable$b1.Of(System.Int32)]
		];
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.System.Windows.Controls.Primitives.Selector.InternalSelectedItemsStorage, [
				"System.Collections.IEnumerable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.System.Windows.Controls.DisplayMemberValueConverter, [
				"System.Windows.Data.IValueConverter"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Windows.Controls.ItemContainerGenerator, [
				"System.Windows.Controls.Primitives.IRecyclingItemContainerGenerator", "System.Windows.Controls.Primitives.IItemContainerGenerator", "MS.Internal.Controls.INotifyItemsChanged", "System.Windows.Controls.ICollectionChangedListener"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.System.Windows.Controls.ItemContainerGenerator.Generator, [
				"System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		$asm02.System.Windows.Controls.ItemContainerGenerator.Generator.prototype.__StructFields__ = [
			["_cachedState", $asm02.System.Windows.Controls.ItemContainerGenerator.GeneratorState]
		];
	});
JSIL.QueueInitializer(function () {
		$asm02.System.Windows.Controls.ItemContainerGenerator.$l$gc__DisplayClass2.prototype.__StructFields__ = [
			["position", System.Windows.Controls.Primitives.GeneratorPosition]
		];
	});
JSIL.QueueInitializer(function () {
		System.Windows.Controls.ListBox.prototype.__StructFields__ = [
			["_anchorIndex", System.Nullable$b1.Of(System.Int32)]
		];
	});
JSIL.QueueInitializer(function () {
		System.Windows.Controls.SaveFileDialog.prototype.__StructFields__ = [
			["m_dlgInfo", $asm02.System.Windows.Hosting.NativeMethods.OpenFileNameInfo]
		];
	});
JSIL.QueueInitializer(function () {
		System.Windows.Controls.Primitives.ItemsChangedEventArgs.prototype.__StructFields__ = [
			["_position", System.Windows.Controls.Primitives.GeneratorPosition], 
			["_oldPosition", System.Windows.Controls.Primitives.GeneratorPosition]
		];
	});
JSIL.QueueInitializer(function () {
		System.Windows.Controls.Primitives.Thumb.prototype.__StructFields__ = [
			["_origin", System.Windows.Point], 
			["_previousPosition", System.Windows.Point]
		];
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Windows.Controls.ScrollContentPresenter, [
				"System.Windows.Controls.Primitives.IScrollInfo"
			]);
	});
JSIL.QueueInitializer(function () {
		System.Windows.Controls.ToolTip.prototype.__StructFields__ = [
			["_lastSize", System.Windows.Size], 
			["_toolTipServicePlacementModeOverride", System.Nullable$b1.Of(System.Windows.Controls.Primitives.PlacementMode)]
		];
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Windows.Controls.VirtualizingStackPanel, [
				"System.Windows.Controls.Primitives.IScrollInfo"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.MS.Internal.Data.DynamicValueConverter, [
				"System.Windows.Data.IValueConverter"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.MS.Internal.Data.InterfaceConverter, [
				"System.Windows.Data.IValueConverter"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.MS.Internal.Data.ObjectSourceConverter, [
				"System.Windows.Data.IValueConverter"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.MS.Internal.Data.ObjectTargetConverter, [
				"System.Windows.Data.IValueConverter"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.MS.Internal.Data.SourceDefaultValueConverter, [
				"System.Windows.Data.IValueConverter"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.MS.Internal.Data.SystemConvertConverter, [
				"System.Windows.Data.IValueConverter"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.MS.Internal.Data.TargetDefaultValueConverter, [
				"System.Windows.Data.IValueConverter"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Windows.Data.CollectionViewSource, [
				"System.ComponentModel.ISupportInitialize"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.System.Windows.Data.CollectionViewSource.DeferHelper, [
				"System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.System.Windows.Data.ListCollectionView, [
				"System.Collections.Generic.IComparer$b1", "System.ComponentModel.IEditableCollectionView"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Windows.DependencyObjectCollection$b1, [
				"System.Collections.Generic.IList$b1", "System.Collections.Generic.ICollection$b1", "System.Collections.Generic.IEnumerable$b1", "System.Collections.IList", "System.Collections.ICollection", "System.Collections.IEnumerable", "System.Collections.Specialized.INotifyCollectionChanged", "System.Windows.INativeCollectionWrapper"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.System.Windows.DependencyObjectCollection$b1.$lGetEnumerator$gd__0, [
				"System.Collections.Generic.IEnumerator$b1", "System.Collections.IEnumerator", "System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Windows.DataObject, [
				"System.Windows.IDataObject"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ExternalMembers(System.Windows.MessageBox, 
			"Show"
		);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.System.Windows.Hosting.DelegateWrapper, [
				"System.Windows.Hosting.INativePeer"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.System.Windows.Hosting.HostHandle, [
				"System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.System.Windows.Media.Fonts.TypefaceCollection, [
				"System.Collections.Generic.ICollection$b1", "System.Collections.Generic.IEnumerable$b1", "System.Collections.IEnumerable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.System.Windows.Media.Fonts.TypefaceCollection.$lGetEnumerator$gd__0, [
				"System.Collections.Generic.IEnumerator$b1", "System.Collections.IEnumerator", "System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		$asm02.System.Windows.Media.Fonts.TypefaceCollection.$lGetEnumerator$gd__0.prototype.__StructFields__ = [
			["<>4__this", $asm02.System.Windows.Media.Fonts.TypefaceCollection]
		];
	});
JSIL.QueueInitializer(function () {
		System.Windows.Media.Imaging.WriteableBitmap.prototype.__StructFields__ = [
			["_pinned", System.Runtime.InteropServices.GCHandle]
		];
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Windows.Interop.HostingRenderTargetBitmap, [
				"MS.Internal.IManagedPeer", "MS.Internal.IManagedPeerBase", "MS.Internal.INativeCoreTypeWrapper"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Windows.Media.Media3D.Matrix3D, [
				"System.IFormattable"
			]);
	});
JSIL.QueueInitializer(function () {
		System.Windows.Media.VideoFormat.prototype.__StructFields__ = [
			["m_Format", $asm02.System.Windows.Media.PALVideoFormat]
		];
	});
JSIL.QueueInitializer(function () {
		System.Windows.Media.AudioFormat.prototype.__StructFields__ = [
			["m_Format", $asm02.System.Windows.Media.PALAudioFormat]
		];
	});
JSIL.QueueInitializer(function () {
		System.Windows.Media.DomainOperationCompletedEventArgs.prototype.__StructFields__ = [
			["_serviceId", System.Guid], 
			["_accountId", System.Guid]
		];
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.System.Windows.Media.LicenseEnumerator, [
				"System.Collections.Generic.IEnumerator$b1", "System.IDisposable", "System.Collections.IEnumerator"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.System.Windows.Media.LicenseEnumerable, [
				"System.Collections.Generic.IEnumerable$b1", "System.Collections.IEnumerable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.System.Windows.Media.ManagedNativePeerPair, [
				"MS.Internal.IManagedPeer", "MS.Internal.IManagedPeerBase", "MS.Internal.INativeCoreTypeWrapper"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.System.Windows.Messaging.LocalMessagePeerHelper, [
				"MS.Internal.IManagedPeer", "MS.Internal.IManagedPeerBase", "MS.Internal.INativeCoreTypeWrapper"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Windows.Messaging.LocalMessageReceiver, [
				"System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Windows.ResourceDictionary, [
				"System.Collections.Generic.IDictionary$b2", "System.Collections.Generic.ICollection$b1", "System.Collections.Generic.IEnumerable$b1", "System.Collections.IDictionary", "System.Collections.ICollection", "System.Collections.IEnumerable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.System.Windows.ResourceDictionary.GetEnumerator$gd__0, [
				"System.Collections.Generic.IEnumerator$b1", "System.Collections.IEnumerator", "System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		$asm02.System.Windows.ResourceDictionary.GetEnumerator$gd__0.prototype.__StructFields__ = [
			["<>2__current", System.Collections.Generic.KeyValuePair$b2.Of(System.Object, System.Object)]
		];
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.System.Windows.ResourceDictionaryEnumerator, [
				"System.Collections.IDictionaryEnumerator", "System.Collections.IEnumerator"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.MS.Internal.Automation.TextProvider, [
				"System.Windows.Automation.Provider.ITextProvider", "System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.MS.Internal.Automation.TextRangeProvider, [
				"System.Windows.Automation.Provider.ITextRangeProvider"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Windows.Automation.Peers.ButtonAutomationPeer, [
				"System.Windows.Automation.Provider.IInvokeProvider"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Windows.Automation.Peers.SelectorAutomationPeer, [
				"System.Windows.Automation.Provider.ISelectionProvider"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Windows.Automation.Peers.SelectorItemAutomationPeer, [
				"System.Windows.Automation.Provider.ISelectionItemProvider"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Windows.Automation.Peers.ListBoxItemAutomationPeer, [
				"System.Windows.Automation.Provider.IScrollItemProvider"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Windows.Automation.Peers.ToggleButtonAutomationPeer, [
				"System.Windows.Automation.Provider.IToggleProvider"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Windows.Automation.Peers.RangeBaseAutomationPeer, [
				"System.Windows.Automation.Provider.IRangeValueProvider"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Windows.Automation.Peers.RepeatButtonAutomationPeer, [
				"System.Windows.Automation.Provider.IInvokeProvider"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Windows.Automation.Peers.RadioButtonAutomationPeer, [
				"System.Windows.Automation.Provider.ISelectionItemProvider"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Windows.Automation.Peers.ScrollViewerAutomationPeer, [
				"System.Windows.Automation.Provider.IScrollProvider"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Windows.Automation.Peers.ProgressBarAutomationPeer, [
				"System.Windows.Automation.Provider.IRangeValueProvider"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Windows.Automation.Peers.TextBoxAutomationPeer, [
				"System.Windows.Automation.Provider.IValueProvider"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Windows.Automation.Peers.PasswordBoxAutomationPeer, [
				"System.Windows.Automation.Provider.IValueProvider"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Windows.Automation.Peers.HyperlinkButtonAutomationPeer, [
				"System.Windows.Automation.Provider.IInvokeProvider"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Windows.Automation.Peers.ComboBoxAutomationPeer, [
				"System.Windows.Automation.Provider.IValueProvider", "System.Windows.Automation.Provider.IExpandCollapseProvider"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm02.System.Windows.Automation.Peers.HyperlinkAutomationPeer, [
				"System.Windows.Automation.Provider.IInvokeProvider"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.SealTypes($asm02, "System.Windows", 
			"Resx", "DependencyObject", "UIElement", "FrameworkElement", "PresentationFrameworkCollection`1", "EventTrigger", "RoutedEventArgs", "DragEventArgs", "ExceptionRoutedEventArgs", "MediaFailedRoutedEventArgs", "AssemblyPart", "FrameworkTemplate", "SizeChangedEventArgs", "Style", "SetterBase", "Setter", "SetterBaseCollection", "VisualState", "OutOfBrowserSettings", "Icon", "WindowSettings", "SecuritySettings", "VisualStateGroup", "VisualTransition", "VisualStateChangedEventArgs", "CheckAndDownloadUpdateCompletedEventArgs", "NotificationWindow", "Window", "VisualStateManager", "GridLength", "Rect", "ResourceManagerWrapper", "Size", "Application", "DependencyProperty", "Deployment", "DependencyObjectCollection`1", "DataFormats", "ExtensionPart", "ResourceDictionary", "SystemColors", "TextDecorations"
		);
		JSIL.SealTypes($asm02, "MS.Internal", 
			"CoreTypes", "Downloader", "StylusInfo", "MediaAttribute", "RequestBringIntoViewEventArgs", "CorePropertyChangedEventArgs", "IsEnabledChangedEventArgs", "DisplayMemberTemplate", "TypeProxy", "ManagedObjectReference", "DependencyPropertyProxy", "GlyphTypeface", "InternalWebRequest", "ManagedPeerTable", "ManagedTypeInfoProviderRPInvokes", "XamlMemberInfo", "FrameworkCallbacks", "TracingServices", "JoltHelper", "CValue", "XcpImports", "XamlManagedRuntimeRPInvokes", "XamlSchemaContext", "NativeResourceStrings", "CollectionViewGroupRoot", "CoreTypeEventHelper", "ClipboardXAMLSerializer", "RichTextXAMLValidator"
		);
		JSIL.SealTypes($asm02, "System.Windows.Ink", 
			"DrawingAttributes", "Stroke"
		);
		JSIL.SealTypes($asm02, "System.Windows.Media", 
			"Brush", "TileBrush", "Geometry", "RotateTransform", "ScaleTransform", "SkewTransform", "TranslateTransform", "TransformGroup", "MatrixTransform", "CompositeTransform", "LineSegment", "BezierSegment", "QuadraticBezierSegment", "ArcSegment", "PolyLineSegment", "PolyBezierSegment", "PolyQuadraticBezierSegment", "PathFigure", "PathGeometry", "EllipseGeometry", "RectangleGeometry", "LineGeometry", "GeometryGroup", "SolidColorBrush", "GradientStop", "GradientBrush", "LinearGradientBrush", "RadialGradientBrush", "ImageBrush", "VideoBrush", "TimelineMarkerRoutedEventArgs", "TimelineMarker", "LogReadyRoutedEventArgs", "RenderingEventArgs", "PlaneProjection", "Matrix3DProjection", "BitmapCache", "CaptureDevice", "AudioCaptureDevice", "CaptureSource", "Matrix", "Fonts", "TextOptions", "MultiScaleTileSource", "DeepZoomImageTileSource"
		);
		JSIL.SealTypes($asm02, "System.Windows.Media.Animation", 
			"Timeline", "EasingFunctionBase", "BackEase", "ExponentialEase", "PowerEase", "ElasticEase", "BounceEase", "BeginStoryboard", "Storyboard", "DoubleAnimation", "ColorAnimation", "PointAnimation", "KeySpline", "DoubleAnimationUsingKeyFrames", "DoubleKeyFrame", "SplineDoubleKeyFrame", "EasingDoubleKeyFrame", "ColorAnimationUsingKeyFrames", "ColorKeyFrame", "SplineColorKeyFrame", "EasingColorKeyFrame", "PointAnimationUsingKeyFrames", "PointKeyFrame", "SplinePointKeyFrame", "EasingPointKeyFrame", "ObjectAnimationUsingKeyFrames", "ObjectKeyFrame", "RepeatBehavior"
		);
		JSIL.SealTypes($asm02, "System.Windows.Input", 
			"MouseButtonEventArgs", "MouseWheelEventArgs", "TouchFrameEventArgs", "KeyEventArgs", "TextCompositionEventArgs", "TouchDevice", "TouchPoint", "ManipulationDelta", "ManipulationVelocities", "GestureEventArgs", "Cursors", "InputMethod", "KeyboardNavigation"
		);
		JSIL.SealTypes($asm02, "System.Windows.Shapes", 
			"Shape", "Path", "Line", "Polygon", "Polyline", "Rectangle"
		);
		JSIL.SealTypes($asm02, "System.Windows.Documents", 
			"TextElement", "Inline", "Block", "Glyphs", "Run", "Paragraph", "Section", "Span", "Hyperlink", "InlineUIContainer"
		);
		JSIL.SealTypes($asm02, "System.Windows.Controls", 
			"Panel", "Image", "Canvas", "TextBlock", "MediaElement", "NotifyEventArgs", "InkPresenter", "MultiScaleImage", "MultiScaleSubImage", "StackPanel", "Control", "TextBox", "RichTextBox", "PasswordBox", "RowDefinition", "ColumnDefinition", "Grid", "ControlTemplate", "ItemsControl", "Viewbox", "Border", "ContentControl", "ContentPresenter", "ItemsPresenter", "WebBrowser", "WebBrowserBrush", "UserControl", "Validation", "ScrollViewer", "ComboBox", "ListBoxItem", "HyperlinkButton", "ItemContainerGenerator", "ListBox", "RadioButton", "Slider", "ToolTip", "ToolTipService", "VirtualizingStackPanel", "ProgressBar"
		);
		JSIL.SealTypes($asm02, "System.Windows.Media.Imaging", 
			"BitmapSource", "BitmapImage", "DownloadProgressEventArgs"
		);
		JSIL.SealTypes($asm02, "System.Windows.Controls.Primitives", 
			"Popup", "ButtonBase", "ToggleButton", "Selector", "RangeBase", "RepeatButton", "ScrollBar", "Thumb"
		);
		JSIL.SealTypes($asm02, "System.Windows.Media.Effects", 
			"PixelShader", "ShaderEffect", "BlurEffect", "DropShadowEffect"
		);
		JSIL.SealTypes($asm02, "System.Windows.Printing", 
			"PrintDocument", "PrintPageEventArgs", "EndPrintEventArgs"
		);
		JSIL.SealTypes($asm02, "System.Windows.Navigation", 
			"NavigationEventArgs"
		);
		JSIL.SealTypes($asm02, "System.Windows.Data", 
			"BindingExpression", "CollectionView", "CollectionViewSource"
		);
		JSIL.SealTypes($asm02, "System.Net.Browser", 
			"AsyncHelper", "HttpWebRequestHelper", "WebRequestCreator", "AuthenticationThrottle"
		);
		JSIL.SealTypes($asm02, "System.ComponentModel", 
			"DesignerProperties", "SortDescriptionCollection"
		);
		JSIL.SealTypes($asm02, "System.Windows.Threading", 
			"DispatcherTimer"
		);
		JSIL.SealTypes($asm02, "MS.Internal.Interop", 
			"InteropWrapper", "StreamInteropWrapper"
		);
		JSIL.SealTypes($asm02, "MS.Internal.ComAutomation", 
			"ComAutomationObject"
		);
		JSIL.SealTypes($asm02, "MS.Internal.Xaml.MS.Impl", 
			"KnownStrings"
		);
		JSIL.SealTypes($asm02, "System.Runtime.InteropServices.Automation", 
			"AutomationMetaObjectProviderBase"
		);
		JSIL.SealTypes($asm02, "System.Windows.Controls.Primitives.Selector", 
			"InternalSelectedItemsStorage"
		);
		JSIL.SealTypes($asm02, "MS.Internal.Data", 
			"SystemConvertConverter"
		);
		JSIL.SealTypes($asm02, "System.Windows.Hosting", 
			"NativeHost"
		);
		JSIL.SealTypes($asm02, "System.Windows.Media.Media3D", 
			"Matrix3D"
		);
		JSIL.SealTypes($asm02, "System.Windows.Messaging", 
			"LocalMessageReceiver"
		);
		JSIL.SealTypes($asm02, "System.Windows.Automation", 
			"AutomationProperties", "AutomationElementIdentifiers", "DockPatternIdentifiers", "ExpandCollapsePatternIdentifiers", "GridItemPatternIdentifiers", "GridPatternIdentifiers", "MultipleViewPatternIdentifiers", "RangeValuePatternIdentifiers", "ScrollPatternIdentifiers", "SelectionItemPatternIdentifiers", "SelectionPatternIdentifiers", "TableItemPatternIdentifiers", "TablePatternIdentifiers", "TogglePatternIdentifiers", "TransformPatternIdentifiers", "ValuePatternIdentifiers", "WindowPatternIdentifiers", "TextPatternIdentifiers"
		);
	});
