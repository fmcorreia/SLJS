/* Generated by JSIL v0.2 build 16343. See http://jsil.org/ for more information. */ 
var $asm0A = JSIL.DeclareAssembly("System.ServiceModel.Web, Version=2.0.5.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e");
JSIL.DeclareNamespace("System");
JSIL.MakeClass("System.ComponentModel.DescriptionAttribute", "System.SR2DescriptionAttribute", false);

JSIL.MakeClass("System.ComponentModel.CategoryAttribute", "System.SR2CategoryAttribute", false);

JSIL.MakeClass("System.Object", "System.SR2", false);

JSIL.DeclareNamespace("System.Runtime");
JSIL.DeclareNamespace("System.Runtime.Serialization");
JSIL.DeclareNamespace("System.Runtime.Serialization.Json");
JSIL.MakeClass("System.Object", "System.Runtime.Serialization.Json.DataContractJsonSerializer", true);

JSIL.MakeStaticClass("System.Runtime.Serialization.Json.JsonGlobals", false);

JSIL.MakeClass("System.Runtime.Serialization.XmlObjectSerializerReadContext", "System.Runtime.Serialization.Json.XmlObjectSerializerReadContextComplexJson", false);

JSIL.MakeClass("System.Runtime.Serialization.XmlObjectSerializerWriteContext", "System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson", false);

JSIL.MakeStaticClass("System.Runtime.Serialization.Json.DataContractToObjectConverter", false);

JSIL.MakeStaticClass("System.Runtime.Serialization.Json.ObjectToDataContractConverter", false);

JSIL.MakeClass("System.Object", "System.Runtime.Serialization.Json.JavaScriptObjectDeserializer", false);

JSIL.MakeClass("System.Object", "System.Runtime.Serialization.Json.JavaScriptSerializer", false);
JSIL.MakeClass("System.Object", "System.Runtime.Serialization.Json.JavaScriptSerializer/ReferenceComparer", false);


JSIL.MakeClass("System.Object", "System.Runtime.Serialization.Json.JavaScriptDeserializer", false);
JSIL.MakeClass("System.IO.Stream", "System.Runtime.Serialization.Json.JavaScriptDeserializer/BufferedStreamReader", false);


JSIL.MakeClass("System.Object", "System.Runtime.Serialization.Json.JavaScriptString", false);

$asm0A.System.SR2DescriptionAttribute.prototype._ctor = function (description) {
	System.ComponentModel.DescriptionAttribute.prototype._ctor$1.call(this, description);
};
$asm0A.System.SR2DescriptionAttribute.prototype.get_Description = function () {
	if (!this.replaced) {
		this.replaced = true;
		System.ComponentModel.DescriptionAttribute.prototype.set_DescriptionValue.call(this, $asm0A.System.SR2.GetString$2(System.ComponentModel.DescriptionAttribute.prototype.get_Description.call(this)));
	}
	return System.ComponentModel.DescriptionAttribute.prototype.get_Description.call(this);
};
JSIL.MakeProperty($asm0A.System.SR2DescriptionAttribute.prototype, "Description", 
	$asm0A.System.SR2DescriptionAttribute.prototype.get_Description, null);
$asm0A.System.SR2DescriptionAttribute.prototype.replaced = false;

$asm0A.System.SR2CategoryAttribute.prototype._ctor = function (category) {
	System.ComponentModel.CategoryAttribute.prototype._ctor$1.call(this, category);
};
$asm0A.System.SR2CategoryAttribute.prototype.GetLocalizedString = function (value) {
	return $asm0A.System.SR2.GetString$2(value);
};

$asm0A.System.SR2.get_InternalSyncObject = function () {
	if ($asm0A.System.SR2.s_InternalSyncObject === null) {
		var value = new System.Object();
		System.Threading.Interlocked.CompareExchange$b1(System.Object)(/* ref */ new JSIL.MemberReference($asm0A.System.SR2, "s_InternalSyncObject"), value, null);
	}
	return $asm0A.System.SR2.s_InternalSyncObject;
};
$asm0A.System.SR2.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
	var assembly = JSIL.GetType(this).Assembly;
	this.resources = JSIL.New(System.Resources.ResourceManager, "_ctor$1", ["System.ServiceModel.Web", assembly]);
	try {
		var assembly2 = System.Reflection.Assembly.Load$0("System.ServiceModel.Web.debug.resources, Version=2.0.5.0, Culture=en-US, PublicKeyToken=7cec85d7bea7798e");
		this.debugResources = JSIL.New(System.Resources.ResourceManager, "_ctor$1", ["System.ServiceModel.Web.debug", assembly2]);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.IO.FileNotFoundException)) {
		} else {
			throw $exception;
		}
	}
	this.fallbackResources = JSIL.New(System.Resources.ResourceManager, "_ctor$1", ["mscorlib", System.Object.Assembly]);
};
$asm0A.System.SR2.GetLoader = function () {
	var internalSyncObject = null;
	if ($asm0A.System.SR2.loader === null) {
		System.Threading.Monitor.Enter((internalSyncObject = $asm0A.System.SR2.InternalSyncObject));
		try {
			if ($asm0A.System.SR2.loader === null) {
				$asm0A.System.SR2.loader = new $asm0A.System.SR2();
			}
		} finally {
			System.Threading.Monitor.Exit(internalSyncObject);
		}
	}
	return $asm0A.System.SR2.loader;
};
$asm0A.System.SR2.get_Culture = function () {
	return null;
};
$asm0A.System.SR2.GetString$0 = function (name, args) {
	var flag = new JSIL.Variable(false);
	return $asm0A.System.SR2.GetString$1(name, /* ref */ flag, args);
};
$asm0A.System.SR2.GetString$1 = function (name, /* ref */ fallbackUsed, args) {
	var sR = $asm0A.System.SR2.GetLoader();
	var text = null;
	fallbackUsed.value = false;
	if (sR !== null) {
		text = sR.resources.GetString$1(name, $asm0A.System.SR2.Culture);
		if (!(text || (sR.debugResources === null))) {
			text = sR.debugResources.GetString$1(name, $asm0A.System.SR2.Culture);
		}
		if (text !== null) {
			if (!((args === null) || (args.length <= 0))) {
			__loop0__: 
				for (var i = 0; i < args.length; ++i) {
					if (args[i]) {
						var text2 = args[i].toString();
						if (!((text2 === null) || (text2.length <= 1024))) {
							args[i] = ((text2.Substring$1(0, 1021) + "..."));
						}
					}
				}
				return System.String.Format(System.Globalization.CultureInfo.CurrentCulture, text, args);
			}
			return text;
		}
	}
	fallbackUsed.value = true;
	text = $asm0A.System.SR2.GetFallbackMessage(name, args);
	return text;
};
$asm0A.System.SR2.GetString$2 = function (name) {
	var text = $asm0A.System.SR2.GetStringHelper(name);
	if (text === null) {
		text = $asm0A.System.SR2.GetFallbackMessage(name, null);
	}
	return text;
};
$asm0A.System.SR2.GetString$3 = function (name, /* ref */ usedFallback) {
	var text = $asm0A.System.SR2.GetStringHelper(name);
	if (text === null) {
		text = $asm0A.System.SR2.GetFallbackMessage(name, null);
		usedFallback.value = true;
	} else {
		usedFallback.value = false;
	}
	return text;
};
$asm0A.System.SR2.GetObject = function (name) {
	var sR = $asm0A.System.SR2.GetLoader();
	var obj = null;
	if (sR !== null) {
		obj = sR.resources.GetObject$1(name, $asm0A.System.SR2.Culture);
		if (!(obj || (sR.debugResources === null))) {
			obj = sR.debugResources.GetObject$1(name, $asm0A.System.SR2.Culture);
		}
	}
	if (obj === null) {
		obj = $asm0A.System.SR2.GetFallbackMessage(name, null);
	}
	return obj;
};
$asm0A.System.SR2.GetStringHelper = function (name) {
	var sR = $asm0A.System.SR2.GetLoader();
	var text = null;
	if (sR !== null) {
		text = sR.resources.GetString$1(name, $asm0A.System.SR2.Culture);
		if (!(text || (sR.debugResources === null))) {
			text = sR.debugResources.GetString$1(name, $asm0A.System.SR2.Culture);
		}
	}
	return text;
};
$asm0A.System.SR2.GetFallbackMessage = function (name, args) {
	var sR = $asm0A.System.SR2.GetLoader();
	var text = null;
	if (!((sR === null) || (sR.fallbackResources === null))) {
		var string = sR.fallbackResources.GetString$1("NoDebugResources", $asm0A.System.SR2.Culture);
		if (string !== null) {
			var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
			if (args !== null) {
			__loop0__: 
				for (var i = 0; i < args.length; ++i) {
					if (args[i]) {
						var text2 = args[i].toString();
						if (text2 !== null) {
							if (text2.length <= 1024) {
								stringBuilder.Append$2(text2);
							} else {
								stringBuilder.Append$2((text2.Substring$1(0, 1021) + "..."));
							}
							if (i < (args.length - 1)) {
								stringBuilder.Append$2(System.Globalization.CultureInfo.CurrentCulture.TextInfo.ListSeparator);
							}
						}
					}
				}
			}
			var text3 = stringBuilder.toString();
			if (text3 === null) {
				text3 = "";
			}
			text = System.String.Format(System.Globalization.CultureInfo.CurrentCulture, string, [name, text3, "4.0.60310.0", "System.ServiceModel.Web.dll", $asm0A.System.SR2.UriEncode(name)]);
		}
	}
	if (text === null) {
		text = name;
	}
	return text;
};
$asm0A.System.SR2.UriEncode = function (url) {
	if (url === null) {
		return null;
	}
	var array = System.Text.Encoding.UTF8.GetBytes$3(url);
	var num = 0;
	var num2 = 0;
	var num3 = array.length;
__loop0__: 
	for (var i = 0; i < num3; ++i) {
		var c = array[i];
		if (c === " ") {
			++num;
		} else if (!$asm0A.System.SR2.IsSafe(c)) {
			++num2;
		}
	}
	if (!((num === 0) && (num2 === 0))) {
		var array2 = JSIL.Array.New(System.Byte, (num3 + (num2 * 2)));
		var num4 = 0;
	__loop1__: 
		for (var j = 0; j < num3; ++j) {
			var b = array[j];
			var c2 = String.fromCharCode(b);
			if ($asm0A.System.SR2.IsSafe(c2)) {
				array2[num4++] = b;
			} else if (c2 === " ") {
				array2[num4++] = 43;
			} else {
				array2[num4++] = 37;
				array2[num4++] = ($asm0A.System.SR2.IntToHex(((b >> 4) & 15))).charCodeAt(0);
				array2[num4++] = ($asm0A.System.SR2.IntToHex((b & 15))).charCodeAt(0);
			}
		}
		array = array2;
	}
	return System.Text.Encoding.UTF8.GetString$1(array, 0, array.length);
};
$asm0A.System.SR2.IntToHex = function (n) {
	if (n <= 9) {
		return (n + 48);
	}
	return ((n - 10) + 97);
};
$asm0A.System.SR2.IsSafe = function (ch) {
	if (!(!((ch >= "a") && 
				(ch <= "z")) && 
			!((ch >= "A") && 
				(ch <= "Z")) && ((ch < "0") || 
				(ch > "9")))) {
		return true;
	}
	if (ch !== "!") {
		switch (ch) {
			case "'": 
			case "(": 
			case ")": 
			case "*": 
			case "-": 
			case ".": 
				return true;
			case "+": 
			case ",": 
				break;
			default: 
				if (ch === "_") {
					return true;
				}
				break;
		}
		return false;
	}
	return true;
};
JSIL.OverloadedMethod($asm0A.System.SR2, "GetString", [
		["GetString$0", [System.String, System.Array.Of(System.Object)]], 
		["GetString$1", [System.String, JSIL.Reference.Of(System.Boolean), System.Array.Of(System.Object)]], 
		["GetString$2", [System.String]], 
		["GetString$3", [System.String, JSIL.Reference.Of(System.Boolean)]]
	]);
JSIL.MakeProperty($asm0A.System.SR2, "InternalSyncObject", 
	$asm0A.System.SR2.get_InternalSyncObject, null);
JSIL.MakeProperty($asm0A.System.SR2, "Culture", 
	$asm0A.System.SR2.get_Culture, null);
Object.defineProperty($asm0A.System.SR2, "ObjectSerializer_DictionaryNotSupported", {
		"value": "ObjectSerializer_DictionaryNotSupported"}
);
Object.defineProperty($asm0A.System.SR2, "ObjectDeserializer_BadEscape", {
		"value": "ObjectDeserializer_BadEscape"}
);
Object.defineProperty($asm0A.System.SR2, "ObjectDeserializer_IllegalPrimitive", {
		"value": "ObjectDeserializer_IllegalPrimitive"}
);
Object.defineProperty($asm0A.System.SR2, "ObjectDeserializer_InvalidArrayExtraComma", {
		"value": "ObjectDeserializer_InvalidArrayExtraComma"}
);
Object.defineProperty($asm0A.System.SR2, "ObjectDeserializer_InvalidMemberName", {
		"value": "ObjectDeserializer_InvalidMemberName"}
);
Object.defineProperty($asm0A.System.SR2, "ObjectDeserializer_StringNotQuoted", {
		"value": "ObjectDeserializer_StringNotQuoted"}
);
Object.defineProperty($asm0A.System.SR2, "ObjectDeserializer_UnexpectedToken", {
		"value": "ObjectDeserializer_UnexpectedToken"}
);
Object.defineProperty($asm0A.System.SR2, "ObjectDeserializer_UnterminatedString", {
		"value": "ObjectDeserializer_UnterminatedString"}
);
Object.defineProperty($asm0A.System.SR2, "XmlObjectAssignedToIncompatibleInterface", {
		"value": "XmlObjectAssignedToIncompatibleInterface"}
);
Object.defineProperty($asm0A.System.SR2, "CollectionAssignedToIncompatibleInterface", {
		"value": "CollectionAssignedToIncompatibleInterface"}
);
Object.defineProperty($asm0A.System.SR2, "JsonInvalidBytes", {
		"value": "JsonInvalidBytes"}
);
Object.defineProperty($asm0A.System.SR2, "JsonDuplicateMemberInInput", {
		"value": "JsonDuplicateMemberInInput"}
);
Object.defineProperty($asm0A.System.SR2, "JsonDuplicateMemberNames", {
		"value": "JsonDuplicateMemberNames"}
);
Object.defineProperty($asm0A.System.SR2, "JsonUnsupportedForIsReference", {
		"value": "JsonUnsupportedForIsReference"}
);
Object.defineProperty($asm0A.System.SR2, "DcTypeNotFoundOnDeserialize", {
		"value": "DcTypeNotFoundOnDeserialize"}
);
Object.defineProperty($asm0A.System.SR2, "JsonCircularReferenceDetected", {
		"value": "JsonCircularReferenceDetected"}
);
Object.defineProperty($asm0A.System.SR2, "PartialTrustNonAttributedSerializableTypeNoPublicConstructor", {
		"value": "PartialTrustNonAttributedSerializableTypeNoPublicConstructor"}
);
Object.defineProperty($asm0A.System.SR2, "PartialTrustDataContractMemberGetNotPublic", {
		"value": "PartialTrustDataContractMemberGetNotPublic"}
);
Object.defineProperty($asm0A.System.SR2, "PartialTrustDataContractMemberSetNotPublic", {
		"value": "PartialTrustDataContractMemberSetNotPublic"}
);
Object.defineProperty($asm0A.System.SR2, "UnsupportedIDictionaryAsDataMemberType", {
		"value": "UnsupportedIDictionaryAsDataMemberType"}
);
$asm0A.System.SR2.loader = null;
$asm0A.System.SR2.prototype.resources = null;
$asm0A.System.SR2.prototype.debugResources = null;
$asm0A.System.SR2.prototype.fallbackResources = null;
$asm0A.System.SR2.s_InternalSyncObject = null;
$asm0A.System.SR2._cctor = function () {
	$asm0A.System.SR2.loader = null;
};

System.Runtime.Serialization.Json.DataContractJsonSerializer.prototype._ctor$0 = function (type) {
	this._ctor$1(type, null);
};
System.Runtime.Serialization.Json.DataContractJsonSerializer.prototype._ctor$1 = function (type, knownTypes) {
	System.Object.prototype._ctor.call(this);
	this.Initialize(type, knownTypes);
};
System.Runtime.Serialization.Json.DataContractJsonSerializer.prototype.get_KnownTypes = function () {
	if (this.knownTypeCollection === null) {
		if (this.knownTypeList !== null) {
			this.knownTypeCollection = new (System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(System.Type)) (this.knownTypeList);
		} else {
			this.knownTypeCollection = new (System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(System.Type)) (JSIL.Cast(System.Runtime.Serialization.Globals.EmptyTypeArray, System.Collections.Generic.IList$b1.Of(System.Type)));
		}
	}
	return this.knownTypeCollection;
};
System.Runtime.Serialization.Json.DataContractJsonSerializer.prototype.get_KnownDataContracts = function () {
	if (!(this.knownDataContracts || (this.knownTypeList === null))) {
		this.knownDataContracts = System.Runtime.Serialization.XmlObjectSerializerContext.GetDataContractsForKnownTypes(this.knownTypeList);
	}
	return this.knownDataContracts;
};
System.Runtime.Serialization.Json.DataContractJsonSerializer.prototype.get_RootContract = function () {
	if (this.rootContract === null) {
		this.rootContract = System.Runtime.Serialization.DataContract.GetDataContract$0(this.rootType);
		System.Runtime.Serialization.Json.DataContractJsonSerializer.CheckIfTypeIsReference(this.rootContract);
	}
	return this.rootContract;
};
System.Runtime.Serialization.Json.DataContractJsonSerializer.prototype.AddCollectionItemTypeToKnownTypes = function (knownType) {
__loop0__: 
	for (var type = knownType; System.Runtime.Serialization.CollectionDataContract.IsCollection$1(type, /* ref */ type2); ) {
		if (!(!type2.value.IsGenericType || (type2.value.GetGenericTypeDefinition() !== System.Runtime.Serialization.Globals.TypeOfKeyValue))) {
			var type2 = new JSIL.Variable(System.Runtime.Serialization.Globals.TypeOfKeyValuePair.MakeGenericType(type2.value.GetGenericArguments()));
		}
		this.knownTypeList.ICollection$b1_Add(type2.value);
		type = type2.value;
	}
};
System.Runtime.Serialization.Json.DataContractJsonSerializer.prototype.Initialize = function (type, knownTypes) {
	System.Runtime.Serialization.XmlObjectSerializer.CheckNull(type, "type");
	this.rootType = type;
	if (knownTypes !== null) {
		this.knownTypeList = new (System.Collections.Generic.List$b1.Of(System.Type)) ();
		var enumerator = knownTypes.IEnumerable$b1_GetEnumerator();
		try {
		__loop0__: 
			while (enumerator.IEnumerator_MoveNext()) {
				var current = enumerator.IEnumerator$b1_Current;
				this.knownTypeList.ICollection$b1_Add(current);
				if (current !== null) {
					this.AddCollectionItemTypeToKnownTypes(current);
				}
			}
		} finally {
			if (enumerator !== null) {
				enumerator.IDisposable_Dispose();
			}
		}
	}
};
System.Runtime.Serialization.Json.DataContractJsonSerializer.CheckIfTypeIsReference = function (dataContract) {
	if (dataContract.IsReference) {
		throw System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0($asm0A.System.SR2.GetString$0("JsonUnsupportedForIsReference", [System.Runtime.Serialization.DataContract.GetClrTypeFullName(dataContract.UnderlyingType), dataContract.IsReference])));
	}
};
System.Runtime.Serialization.Json.DataContractJsonSerializer.GetDataContract = function (declaredTypeContract, declaredType, objectType) {
	var dataContract = System.Runtime.Serialization.DataContractSerializer.GetDataContract(declaredTypeContract, declaredType, objectType);
	System.Runtime.Serialization.Json.DataContractJsonSerializer.CheckIfTypeIsReference(dataContract);
	return dataContract;
};
System.Runtime.Serialization.Json.DataContractJsonSerializer.prototype.WriteObject = function (stream, graph) {
	this.jsonSerializer = new $asm0A.System.Runtime.Serialization.Json.JavaScriptSerializer(stream);
	var dataContract = this.RootContract;
	var underlyingType = dataContract.UnderlyingType;
	var type = (graph === null) ? underlyingType : JSIL.GetType(graph);
	var xmlWriter = null;
	if (graph === null) {
		this.jsonSerializer.SerializeObject(null);
		return;
	}
	if (underlyingType === type) {
		if (dataContract.CanContainReferences) {
			var xmlObjectSerializerWriteContextComplexJson = $asm0A.System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson.CreateContext(this, dataContract);
			xmlObjectSerializerWriteContextComplexJson.SerializeWithoutXsiType(dataContract, xmlWriter, graph, underlyingType.TypeHandle.MemberwiseClone());
			return;
		}
		this.WriteObjectInternal(
			graph, 
			dataContract, 
			null, 
			false, 
			underlyingType.TypeHandle.MemberwiseClone()
		);
		return;
	} else {
		var xmlObjectSerializerWriteContextComplexJson2 = $asm0A.System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson.CreateContext(this, this.RootContract);
		dataContract = System.Runtime.Serialization.DataContractSerializer.GetDataContract(dataContract, underlyingType, type);
		if (dataContract.CanContainReferences) {
			xmlObjectSerializerWriteContextComplexJson2.SerializeWithXsiTypeAtTopLevel(dataContract, xmlWriter, graph, underlyingType.TypeHandle.MemberwiseClone());
			return;
		}
		xmlObjectSerializerWriteContextComplexJson2.SerializeWithoutXsiType(dataContract, xmlWriter, graph, underlyingType.TypeHandle.MemberwiseClone());
		return;
	}
};
System.Runtime.Serialization.Json.DataContractJsonSerializer.prototype.WriteObjectInternal = function (value, contract, context, writeServerType, declaredTypeHandle) {
	this.jsonSerializer.SerializeObject(this.ConvertDataContractToObject(
			value, 
			contract, 
			context, 
			writeServerType, 
			declaredTypeHandle
		));
};
System.Runtime.Serialization.Json.DataContractJsonSerializer.prototype.ConvertDataContractToObject = function (value, contract, context, writeServerType, declaredTypeHandle) {
	if (context !== null) {
		context.OnHandleReference(null, value, true);
	}
	try {
		if (JSIL.TryCast(contract, System.Runtime.Serialization.ObjectDataContract) !== null) {
			var type = (JSIL.GetType(value));
			if (type !== System.Runtime.Serialization.Globals.TypeOfObject) {
				var result = this.ConvertDataContractToObject(
					value, 
					System.Runtime.Serialization.DataContract.GetDataContract$0(type), 
					context, 
					true, 
					contract.UnderlyingType.TypeHandle.MemberwiseClone()
				);
				return result;
			}
			result = value;
			return result;
		} else {
			if (JSIL.TryCast(contract, System.Runtime.Serialization.TimeSpanDataContract) !== null) {
				result = System.Xml.XmlConvert.ToString$11(JSIL.Cast(value, System.TimeSpan).MemberwiseClone());
				return result;
			}
			if (JSIL.TryCast(contract, System.Runtime.Serialization.QNameDataContract) !== null) {
				var xmlQualifiedName = JSIL.Cast(value, System.Xml.XmlQualifiedName);
				result = xmlQualifiedName.IsEmpty ? System.String.Empty : (xmlQualifiedName.Name + ":" + xmlQualifiedName.Namespace);
				return result;
			}
			if (JSIL.TryCast(contract, System.Runtime.Serialization.PrimitiveDataContract) !== null) {
				result = value;
				return result;
			}
			if (JSIL.TryCast(contract, System.Runtime.Serialization.CollectionDataContract) !== null) {
				var collectionDataContract = JSIL.TryCast(contract, System.Runtime.Serialization.CollectionDataContract);
				switch (Number(collectionDataContract.Kind)) {
					case 1: 
					case 2: 
						result = $asm0A.System.Runtime.Serialization.Json.DataContractToObjectConverter.ConvertGenericDictionaryToArray(
							this, 
							JSIL.Cast(value, System.Collections.IEnumerable), 
							collectionDataContract, 
							context, 
							writeServerType
						);
						return result;
					default: 
						result = $asm0A.System.Runtime.Serialization.Json.DataContractToObjectConverter.ConvertGenericListToArray(
							this, 
							JSIL.Cast(value, System.Collections.IEnumerable), 
							collectionDataContract, 
							context, 
							writeServerType
						);
						return result;
				}
			} else if (JSIL.TryCast(contract, System.Runtime.Serialization.ClassDataContract) !== null) {
				var classDataContract = JSIL.TryCast(contract, System.Runtime.Serialization.ClassDataContract);
				if (System.Runtime.Serialization.Globals.TypeOfScriptObject_IsAssignableFrom(classDataContract.UnderlyingType)) {
					result = this.ConvertScriptObjectToObject(value);
					return result;
				}
				result = $asm0A.System.Runtime.Serialization.Json.DataContractToObjectConverter.ConvertClassDataContractToDictionary(
					this, 
					JSIL.Cast(contract, System.Runtime.Serialization.ClassDataContract), 
					value, 
					context, 
					writeServerType
				);
				return result;
			} else if (JSIL.TryCast(contract, System.Runtime.Serialization.EnumDataContract) !== null) {
				var convertible = JSIL.TryCast(value, System.IConvertible);
				if (JSIL.Cast(contract, System.Runtime.Serialization.EnumDataContract).IsULong) {
					result = convertible.IConvertible_ToUInt64(null);
					return result;
				}
				result = convertible.IConvertible_ToInt64(null);
				return result;
			} else if (JSIL.TryCast(contract, System.Runtime.Serialization.XmlDataContract) !== null) {
				var dataContractSerializer = JSIL.New(System.Runtime.Serialization.DataContractSerializer, "_ctor$1", [declaredTypeHandle, this.GetKnownTypesFromContext(context, (context === null) ? null : context.SerializerKnownTypeList)]);
				var memoryStream = JSIL.New(System.IO.MemoryStream, "_ctor$0", []);
				dataContractSerializer.WriteObject$0(memoryStream, value);
				memoryStream.Position = 0;
				result = JSIL.New(System.IO.StreamReader, "_ctor$3", [memoryStream, System.Text.Encoding.UTF8]).ReadToEnd();
				return result;
			}
		}
	} finally {
		if (context !== null) {
			context.OnEndHandleReference(null, value, true);
		}
	}
	throw System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0(JSIL.ConcatString("UnknownDataContract: ", contract.Name)));
};
System.Runtime.Serialization.Json.DataContractJsonSerializer.prototype.ConvertScriptObjectToObject = function (value) {
	var s = System.Runtime.Serialization.Globals.ScriptObjectJsonSerialize(value);
	var memoryStream = JSIL.New(System.IO.MemoryStream, "_ctor$2", [System.Text.Encoding.Unicode.GetBytes$3(s)]);
	try {
		var javaScriptDeserializer = new $asm0A.System.Runtime.Serialization.Json.JavaScriptDeserializer(memoryStream);
		var result = javaScriptDeserializer.DeserializeObject();
	} finally {
		if (memoryStream !== null) {
			memoryStream.IDisposable_Dispose();
		}
	}
	return result;
};
System.Runtime.Serialization.Json.DataContractJsonSerializer.prototype.ReadObject = function (stream) {
	try {
		var traditionalDataContract = this.RootContract;
		this.AddCollectionItemContractsToKnownDataContracts(traditionalDataContract);
		this.jsonDeserializer = new $asm0A.System.Runtime.Serialization.Json.JavaScriptDeserializer(stream);
		var context = new $asm0A.System.Runtime.Serialization.Json.XmlObjectSerializerReadContextComplexJson(this, this.RootContract);
		var obj = this.ConvertObjectToDataContract(this.RootContract, this.jsonDeserializer.DeserializeObject(), context);
	} catch ($exception) {
		var exception = $exception;
		if (!((JSIL.TryCast(exception, System.Reflection.TargetException) === null) && 
				(JSIL.TryCast(exception, System.Reflection.TargetInvocationException) === null) && 
				(JSIL.TryCast(exception, System.FormatException) === null) && (JSIL.TryCast(exception, System.OverflowException) === null))) {
			throw System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$1(System.Runtime.Serialization.XmlObjectSerializer.GetTypeInfoError("ErrorDeserializing", this.rootType, exception), exception);
		}
		throw $exception;
	}
	return obj;
};
System.Runtime.Serialization.Json.DataContractJsonSerializer.prototype.ConvertObjectToPrimitiveDataContract = function (contract, value, context) {
	if (JSIL.TryCast(contract, System.Runtime.Serialization.TimeSpanDataContract) !== null) {
		return System.Xml.XmlConvert.ToTimeSpan(value.toString());
	}
	if (JSIL.TryCast(contract, System.Runtime.Serialization.ByteArrayDataContract) !== null) {
		return $asm0A.System.Runtime.Serialization.Json.ObjectToDataContractConverter.ConvertToArray(System.Byte, JSIL.Cast(value, System.Collections.IList));
	}
	if (JSIL.TryCast(contract, System.Runtime.Serialization.GuidDataContract) !== null) {
		return JSIL.New(System.Guid, "_ctor$4", [value.toString()]);
	}
	if (JSIL.TryCast(contract, System.Runtime.Serialization.ObjectDataContract) !== null) {
		if (JSIL.TryCast(value, System.Collections.ICollection) !== null) {
			return this.ConvertObjectToDataContract(System.Runtime.Serialization.DataContract.GetDataContract$0(System.Runtime.Serialization.Globals.TypeOfObjectArray), value, context);
		}
		return this.TryParseJsonNumber(value);
	} else {
		if (JSIL.TryCast(contract, System.Runtime.Serialization.QNameDataContract) !== null) {
			return $asm0A.System.Runtime.Serialization.Json.XmlObjectSerializerReadContextComplexJson.ParseQualifiedName(value.toString());
		}
		if (JSIL.TryCast(contract, System.Runtime.Serialization.StringDataContract) !== null) {
			if (!JSIL.TryCast(value, System.Boolean)) {
				return value.toString();
			}
			if (!JSIL.Cast(value, System.Boolean)) {
				return "false";
			}
			return "true";
		} else {
			if (JSIL.TryCast(contract, System.Runtime.Serialization.UriDataContract) !== null) {
				return JSIL.New(System.Uri, "_ctor$1", [value.toString(), System.UriKind.RelativeOrAbsolute]);
			}
			if (JSIL.TryCast(contract, System.Runtime.Serialization.DoubleDataContract) !== null) {
				if (JSIL.TryCast(value, System.Single) !== 0) {
					return JSIL.Cast(value, System.Single);
				}
				if (JSIL.TryCast(value, System.Double) !== 0) {
					return JSIL.Cast(value, System.Double);
				}
				return System.Double.Parse(value.toString(), (System.Globalization.NumberStyles.AllowDecimalPoint | System.Globalization.NumberStyles.AllowExponent | System.Globalization.NumberStyles.AllowLeadingSign | System.Globalization.NumberStyles.AllowLeadingWhite | System.Globalization.NumberStyles.AllowTrailingWhite | System.Globalization.NumberStyles.Float | System.Globalization.NumberStyles.Integer), System.Globalization.CultureInfo.InvariantCulture);
			} else {
				if (JSIL.TryCast(contract, System.Runtime.Serialization.DecimalDataContract) !== null) {
					return System.Decimal.Parse(value.toString(), (System.Globalization.NumberStyles.AllowDecimalPoint | System.Globalization.NumberStyles.AllowExponent | System.Globalization.NumberStyles.AllowLeadingSign | System.Globalization.NumberStyles.AllowLeadingWhite | System.Globalization.NumberStyles.AllowTrailingWhite | System.Globalization.NumberStyles.Float | System.Globalization.NumberStyles.Integer), System.Globalization.CultureInfo.InvariantCulture);
				}
				return System.Convert.ChangeType$1(value, contract.UnderlyingType, System.Globalization.CultureInfo.InvariantCulture);
			}
		}
	}
};
System.Runtime.Serialization.Json.DataContractJsonSerializer.prototype.ConvertObjectToDataContract = function (contract, value, context) {
	if (value === null) {
		return value;
	}
	if (JSIL.TryCast(contract, System.Runtime.Serialization.PrimitiveDataContract) !== null) {
		return this.ConvertObjectToPrimitiveDataContract(contract, value, context);
	}
	if (JSIL.TryCast(contract, System.Runtime.Serialization.CollectionDataContract) !== null) {
		return $asm0A.System.Runtime.Serialization.Json.ObjectToDataContractConverter.ConvertICollectionToCollectionDataContract(this, JSIL.Cast(contract, System.Runtime.Serialization.CollectionDataContract), value, context);
	}
	if (JSIL.TryCast(contract, System.Runtime.Serialization.ClassDataContract) !== null) {
		var classDataContract = JSIL.TryCast(contract, System.Runtime.Serialization.ClassDataContract);
		if (System.Runtime.Serialization.Globals.TypeOfScriptObject_IsAssignableFrom(classDataContract.UnderlyingType)) {
			return this.ConvertObjectToScriptObject(value);
		}
		return $asm0A.System.Runtime.Serialization.Json.ObjectToDataContractConverter.ConvertDictionaryToClassDataContract(this, classDataContract, JSIL.Cast(value, System.Collections.Generic.Dictionary$b2.Of(System.String, System.Object)), context);
	} else {
		if (JSIL.TryCast(contract, System.Runtime.Serialization.EnumDataContract) !== null) {
			return System.Enum.ToObject$0(contract.UnderlyingType, JSIL.Cast(contract, System.Runtime.Serialization.EnumDataContract).IsULong ? System.UInt64.Parse(value.toString(), (System.Globalization.NumberStyles.AllowDecimalPoint | System.Globalization.NumberStyles.AllowExponent | System.Globalization.NumberStyles.AllowLeadingSign | System.Globalization.NumberStyles.AllowLeadingWhite | System.Globalization.NumberStyles.AllowTrailingWhite | System.Globalization.NumberStyles.Float | System.Globalization.NumberStyles.Integer), System.Globalization.NumberFormatInfo.InvariantInfo) : value);
		}
		if (JSIL.TryCast(contract, System.Runtime.Serialization.XmlDataContract) !== null) {
			var dataContractSerializer = JSIL.New(System.Runtime.Serialization.DataContractSerializer, "_ctor$1", [contract.UnderlyingType, this.GetKnownTypesFromContext(context, (context === null) ? null : context.SerializerKnownTypeList)]);
			var stream = JSIL.New(System.IO.MemoryStream, "_ctor$2", [System.Text.Encoding.UTF8.GetBytes$3(JSIL.Cast(value, System.String))]);
			return dataContractSerializer.ReadObject$2(System.Xml.XmlDictionaryReader.CreateTextReader$2(stream, System.Xml.XmlDictionaryReaderQuotas.Max));
		}
		return value;
	}
};
System.Runtime.Serialization.Json.DataContractJsonSerializer.prototype.ConvertObjectToScriptObject = function (deserialzedValue) {
	var memoryStream = JSIL.New(System.IO.MemoryStream, "_ctor$0", []);
	var javaScriptSerializer = new $asm0A.System.Runtime.Serialization.Json.JavaScriptSerializer(memoryStream);
	javaScriptSerializer.SerializeObject(deserialzedValue);
	memoryStream.Flush();
	memoryStream.Position = 0;
	return System.Runtime.Serialization.Globals.ScriptObjectJsonDeserialize(JSIL.New(System.IO.StreamReader, "_ctor$1", [memoryStream]).ReadToEnd());
};
System.Runtime.Serialization.Json.DataContractJsonSerializer.prototype.TryParseJsonNumber = function (value) {
	var text = JSIL.TryCast(value, System.String);
	if (!((text === null) || (text.IndexOfAny$0($asm0A.System.Runtime.Serialization.Json.JsonGlobals.FloatingPointCharacters) < 0))) {
		return $asm0A.System.Runtime.Serialization.Json.JavaScriptObjectDeserializer.ParseJsonNumberAsDoubleOrDecimal(text);
	}
	return value;
};
System.Runtime.Serialization.Json.DataContractJsonSerializer.prototype.GetKnownTypesFromContext = function (context, serializerKnownTypeList) {
	var list = new (System.Collections.Generic.List$b1.Of(System.Type)) ();
	if (context !== null) {
		var list2 = new (System.Collections.Generic.List$b1.Of(System.Xml.XmlQualifiedName)) ();
		var dataContractDictionaries = context.scopedKnownTypes.dataContractDictionaries;
		if (dataContractDictionaries !== null) {
		__loop0__: 
			for (var i = 0; i < dataContractDictionaries.length; ++i) {
				var dictionary = dataContractDictionaries[i];
				if (dictionary !== null) {
					var enumerator = dictionary.GetEnumerator().MemberwiseClone();
					try {
					__loop1__: 
						while (enumerator.MoveNext()) {
							var current = JSIL.Cast(enumerator.Current.MemberwiseClone(), System.Collections.Generic.KeyValuePair$b2.Of(System.Xml.XmlQualifiedName, System.Runtime.Serialization.DataContract)).MemberwiseClone();
							if (!list2.Contains(current.Key)) {
								list2.Add(current.Key);
								list.Add(current.Value.UnderlyingType);
							}
						}
					} finally {
						enumerator.IDisposable_Dispose();
					}
				}
			}
		}
		if (serializerKnownTypeList !== null) {
			list.AddRange(serializerKnownTypeList);
		}
	}
	return list;
};
System.Runtime.Serialization.Json.DataContractJsonSerializer.prototype.AddCollectionItemContractsToKnownDataContracts = function (traditionalDataContract) {
	if (traditionalDataContract.KnownDataContracts !== null) {
		var enumerator = traditionalDataContract.KnownDataContracts.GetEnumerator().MemberwiseClone();
		try {
		__loop0__: 
			while (enumerator.MoveNext()) {
				var current = JSIL.Cast(enumerator.Current.MemberwiseClone(), System.Collections.Generic.KeyValuePair$b2.Of(System.Xml.XmlQualifiedName, System.Runtime.Serialization.DataContract)).MemberwiseClone();
				if (!System.Object.ReferenceEquals(current.MemberwiseClone(), null)) {
					var collectionDataContract = JSIL.TryCast(current.Value, System.Runtime.Serialization.CollectionDataContract);
				__loop1__: 
					while (collectionDataContract) {
						var itemContract = collectionDataContract.ItemContract;
						if (this.knownDataContracts === null) {
							this.knownDataContracts = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.Xml.XmlQualifiedName, System.Runtime.Serialization.DataContract), "_ctor$0", []);
						}
						if (!this.knownDataContracts.ContainsKey(itemContract.StableName)) {
							this.knownDataContracts.Add(itemContract.StableName, itemContract);
						}
						if (!(!collectionDataContract.ItemType.IsGenericType || (collectionDataContract.ItemType.GetGenericTypeDefinition() !== System.Runtime.Serialization.KeyValue$b2))) {
							var dataContract = System.Runtime.Serialization.DataContract.GetDataContract$0(System.Runtime.Serialization.Globals.TypeOfKeyValuePair.MakeGenericType(collectionDataContract.ItemType.GetGenericArguments()));
							if (!this.knownDataContracts.ContainsKey(dataContract.StableName)) {
								this.knownDataContracts.Add(dataContract.StableName, dataContract);
							}
						}
						if (JSIL.TryCast(itemContract, System.Runtime.Serialization.CollectionDataContract) === null) {
							break __loop1__;
						}
						collectionDataContract = JSIL.TryCast(itemContract, System.Runtime.Serialization.CollectionDataContract);
					}
				}
			}
		} finally {
			enumerator.IDisposable_Dispose();
		}
	}
};
System.Runtime.Serialization.Json.DataContractJsonSerializer.DisallowMemberAccess = function (memberAccess) {
	if (memberAccess) {
		throw System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Security.SecurityException, "_ctor$0", []));
	}
};
System.Runtime.Serialization.Json.DataContractJsonSerializer.InvokeOnSerializing = function (value, contract, context) {
	if (JSIL.TryCast(contract, System.Runtime.Serialization.ClassDataContract) !== null) {
		var classDataContract = JSIL.TryCast(contract, System.Runtime.Serialization.ClassDataContract);
		if (classDataContract.BaseContract !== null) {
			System.Runtime.Serialization.Json.DataContractJsonSerializer.InvokeOnSerializing(value, classDataContract.BaseContract, context);
		}
		if (classDataContract.OnSerializing !== null) {
			var flag = classDataContract.RequiresMemberAccessForWrite(null, $asm0A.System.Runtime.Serialization.Json.JsonGlobals.JsonSerializationPatterns);
			try {
				System.Runtime.Serialization.Json.DataContractJsonSerializer.DisallowMemberAccess(flag);
				classDataContract.OnSerializing.Invoke$1(value, [context.GetStreamingContext()]);
			} catch ($exception) {
				if (JSIL.CheckType($exception, System.Security.SecurityException)) {
					var arg_6A_0 = $exception;
					if (!flag) {
						throw $exception;
					}
					classDataContract.RequiresMemberAccessForWrite(arg_6A_0, $asm0A.System.Runtime.Serialization.Json.JsonGlobals.JsonSerializationPatterns);
				} else if (JSIL.CheckType($exception, System.Reflection.TargetInvocationException)) {
					var targetInvocationException = $exception;
					if (targetInvocationException.InnerException === null) {
						throw $exception;
					}
					throw targetInvocationException.InnerException;
				} else {
					throw $exception;
				}
			}
		}
	}
};
System.Runtime.Serialization.Json.DataContractJsonSerializer.InvokeOnSerialized = function (value, contract, context) {
	if (JSIL.TryCast(contract, System.Runtime.Serialization.ClassDataContract) !== null) {
		var classDataContract = JSIL.TryCast(contract, System.Runtime.Serialization.ClassDataContract);
		if (classDataContract.BaseContract !== null) {
			System.Runtime.Serialization.Json.DataContractJsonSerializer.InvokeOnSerialized(value, classDataContract.BaseContract, context);
		}
		if (classDataContract.OnSerialized !== null) {
			var flag = classDataContract.RequiresMemberAccessForWrite(null, $asm0A.System.Runtime.Serialization.Json.JsonGlobals.JsonSerializationPatterns);
			try {
				System.Runtime.Serialization.Json.DataContractJsonSerializer.DisallowMemberAccess(flag);
				classDataContract.OnSerialized.Invoke$1(value, [context.GetStreamingContext()]);
			} catch ($exception) {
				if (JSIL.CheckType($exception, System.Security.SecurityException)) {
					var arg_6A_0 = $exception;
					if (!flag) {
						throw $exception;
					}
					classDataContract.RequiresMemberAccessForWrite(arg_6A_0, $asm0A.System.Runtime.Serialization.Json.JsonGlobals.JsonSerializationPatterns);
				} else if (JSIL.CheckType($exception, System.Reflection.TargetInvocationException)) {
					var targetInvocationException = $exception;
					if (targetInvocationException.InnerException === null) {
						throw $exception;
					}
					throw targetInvocationException.InnerException;
				} else {
					throw $exception;
				}
			}
		}
	}
};
System.Runtime.Serialization.Json.DataContractJsonSerializer.InvokeOnDeserializing = function (value, contract, context) {
	if (JSIL.TryCast(contract, System.Runtime.Serialization.ClassDataContract) !== null) {
		var classDataContract = JSIL.TryCast(contract, System.Runtime.Serialization.ClassDataContract);
		if (classDataContract.BaseContract !== null) {
			System.Runtime.Serialization.Json.DataContractJsonSerializer.InvokeOnDeserializing(value, classDataContract.BaseContract, context);
		}
		if (classDataContract.OnDeserializing !== null) {
			var flag = classDataContract.RequiresMemberAccessForRead(null, $asm0A.System.Runtime.Serialization.Json.JsonGlobals.JsonSerializationPatterns);
			try {
				System.Runtime.Serialization.Json.DataContractJsonSerializer.DisallowMemberAccess(flag);
				classDataContract.OnDeserializing.Invoke$1(value, [context.GetStreamingContext()]);
			} catch ($exception) {
				if (JSIL.CheckType($exception, System.Security.SecurityException)) {
					var arg_6A_0 = $exception;
					if (!flag) {
						throw $exception;
					}
					classDataContract.RequiresMemberAccessForRead(arg_6A_0, $asm0A.System.Runtime.Serialization.Json.JsonGlobals.JsonSerializationPatterns);
				} else if (JSIL.CheckType($exception, System.Reflection.TargetInvocationException)) {
					var targetInvocationException = $exception;
					if (targetInvocationException.InnerException === null) {
						throw $exception;
					}
					throw targetInvocationException.InnerException;
				} else {
					throw $exception;
				}
			}
		}
	}
};
System.Runtime.Serialization.Json.DataContractJsonSerializer.InvokeOnDeserialized = function (value, contract, context) {
	if (JSIL.TryCast(contract, System.Runtime.Serialization.ClassDataContract) !== null) {
		var classDataContract = JSIL.TryCast(contract, System.Runtime.Serialization.ClassDataContract);
		if (classDataContract.BaseContract !== null) {
			System.Runtime.Serialization.Json.DataContractJsonSerializer.InvokeOnDeserialized(value, classDataContract.BaseContract, context);
		}
		if (classDataContract.OnDeserialized !== null) {
			var flag = classDataContract.RequiresMemberAccessForRead(null, $asm0A.System.Runtime.Serialization.Json.JsonGlobals.JsonSerializationPatterns);
			try {
				System.Runtime.Serialization.Json.DataContractJsonSerializer.DisallowMemberAccess(flag);
				classDataContract.OnDeserialized.Invoke$1(value, [context.GetStreamingContext()]);
			} catch ($exception) {
				if (JSIL.CheckType($exception, System.Security.SecurityException)) {
					var arg_6A_0 = $exception;
					if (!flag) {
						throw $exception;
					}
					classDataContract.RequiresMemberAccessForRead(arg_6A_0, $asm0A.System.Runtime.Serialization.Json.JsonGlobals.JsonSerializationPatterns);
				} else if (JSIL.CheckType($exception, System.Reflection.TargetInvocationException)) {
					var targetInvocationException = $exception;
					if (targetInvocationException.InnerException === null) {
						throw $exception;
					}
					throw targetInvocationException.InnerException;
				} else {
					throw $exception;
				}
			}
		}
	}
};
JSIL.OverloadedMethod(System.Runtime.Serialization.Json.DataContractJsonSerializer.prototype, "_ctor", [
		["_ctor$0", [System.Type]], 
		["_ctor$1", [System.Type, System.Collections.Generic.IEnumerable$b1.Of(System.Type)]]
	]);
JSIL.MakeProperty(System.Runtime.Serialization.Json.DataContractJsonSerializer.prototype, "KnownTypes", 
	System.Runtime.Serialization.Json.DataContractJsonSerializer.prototype.get_KnownTypes, null);
JSIL.MakeProperty(System.Runtime.Serialization.Json.DataContractJsonSerializer.prototype, "KnownDataContracts", 
	System.Runtime.Serialization.Json.DataContractJsonSerializer.prototype.get_KnownDataContracts, null);
JSIL.MakeProperty(System.Runtime.Serialization.Json.DataContractJsonSerializer.prototype, "RootContract", 
	System.Runtime.Serialization.Json.DataContractJsonSerializer.prototype.get_RootContract, null);
System.Runtime.Serialization.Json.DataContractJsonSerializer.prototype.knownTypeList = null;
System.Runtime.Serialization.Json.DataContractJsonSerializer.prototype.knownDataContracts = null;
System.Runtime.Serialization.Json.DataContractJsonSerializer.prototype.knownTypeCollection = null;
System.Runtime.Serialization.Json.DataContractJsonSerializer.prototype.rootContract = null;
System.Runtime.Serialization.Json.DataContractJsonSerializer.prototype.jsonSerializer = null;
System.Runtime.Serialization.Json.DataContractJsonSerializer.prototype.jsonDeserializer = null;
System.Runtime.Serialization.Json.DataContractJsonSerializer.prototype.rootType = null;

$asm0A.System.Runtime.Serialization.Json.JsonGlobals.get_JsonSerializationPatterns = function () {
	if ($asm0A.System.Runtime.Serialization.Json.JsonGlobals.jsonSerializationPatterns === null) {
		$asm0A.System.Runtime.Serialization.Json.JsonGlobals.jsonSerializationPatterns = JSIL.Array.New(System.String, ["^[\\s]*System\\.Runtime\\.Serialization[\\s]*$", "^[\\s]*System\\.Runtime\\.Serialization[\\s]*,[\\s]*PublicKey[\\s]*=[\\s]*(?i:00240000048000009400000006020000002400005253413100040000010001008d56c76f9e8649383049f383c44be0ec204181822a6c31cf5eb7ef486944d032188ea1d3920763712ccb12d75fb77e9811149e6148e5d32fbaab37611c1878ddc19e20ef135d0cb2cff2bfec3d115810c3d9069638fe4be215dbf795861920e5ab6f7db2e2ceef136ac23d5dd2bf031700aec232f6c6b1c785b4305c123b37ab)[\\s]*$", "^[\\s]*System\\.ServiceModel\\.Web[\\s]*$", "^[\\s]*System\\.ServiceModel\\.Web[\\s]*,[\\s]*PublicKey[\\s]*=[\\s]*(?i:00240000048000009400000006020000002400005253413100040000010001008d56c76f9e8649383049f383c44be0ec204181822a6c31cf5eb7ef486944d032188ea1d3920763712ccb12d75fb77e9811149e6148e5d32fbaab37611c1878ddc19e20ef135d0cb2cff2bfec3d115810c3d9069638fe4be215dbf795861920e5ab6f7db2e2ceef136ac23d5dd2bf031700aec232f6c6b1c785b4305c123b37ab)[\\s]*$"]);
	}
	return $asm0A.System.Runtime.Serialization.Json.JsonGlobals.jsonSerializationPatterns;
};
JSIL.MakeProperty($asm0A.System.Runtime.Serialization.Json.JsonGlobals, "JsonSerializationPatterns", 
	$asm0A.System.Runtime.Serialization.Json.JsonGlobals.get_JsonSerializationPatterns, null);
Object.defineProperty($asm0A.System.Runtime.Serialization.Json.JsonGlobals, "KeyString", {
		"value": "Key"}
);
Object.defineProperty($asm0A.System.Runtime.Serialization.Json.JsonGlobals, "ValueString", {
		"value": "Value"}
);
Object.defineProperty($asm0A.System.Runtime.Serialization.Json.JsonGlobals, "ServerTypeString", {
		"value": "__type"}
);
Object.defineProperty($asm0A.System.Runtime.Serialization.Json.JsonGlobals, "PositiveInf", {
		"value": "INF"}
);
Object.defineProperty($asm0A.System.Runtime.Serialization.Json.JsonGlobals, "NegativeInf", {
		"value": "-INF"}
);
Object.defineProperty($asm0A.System.Runtime.Serialization.Json.JsonGlobals, "SimpleSMWInternalsVisiblePattern", {
		"value": "^[\\s]*System\\.ServiceModel\\.Web[\\s]*$"}
);
Object.defineProperty($asm0A.System.Runtime.Serialization.Json.JsonGlobals, "FullSMWInternalsVisiblePattern", {
		"value": "^[\\s]*System\\.ServiceModel\\.Web[\\s]*,[\\s]*PublicKey[\\s]*=[\\s]*(?i:00240000048000009400000006020000002400005253413100040000010001008d56c76f9e8649383049f383c44be0ec204181822a6c31cf5eb7ef486944d032188ea1d3920763712ccb12d75fb77e9811149e6148e5d32fbaab37611c1878ddc19e20ef135d0cb2cff2bfec3d115810c3d9069638fe4be215dbf795861920e5ab6f7db2e2ceef136ac23d5dd2bf031700aec232f6c6b1c785b4305c123b37ab)[\\s]*$"}
);
$asm0A.System.Runtime.Serialization.Json.JsonGlobals.DataContractXsdBaseNamespaceLength = 0;
$asm0A.System.Runtime.Serialization.Json.JsonGlobals.unixEpochTicks = 0;
$asm0A.System.Runtime.Serialization.Json.JsonGlobals.SecurityException = null;
$asm0A.System.Runtime.Serialization.Json.JsonGlobals.ValidatingBEUTF16 = null;
$asm0A.System.Runtime.Serialization.Json.JsonGlobals.ValidatingUTF16 = null;
$asm0A.System.Runtime.Serialization.Json.JsonGlobals.ValidatingUTF8 = null;
$asm0A.System.Runtime.Serialization.Json.JsonGlobals.FloatingPointCharacters = null;
$asm0A.System.Runtime.Serialization.Json.JsonGlobals.jsonSerializationPatterns = null;
$asm0A.System.Runtime.Serialization.Json.JsonGlobals._cctor = function () {
	$asm0A.System.Runtime.Serialization.Json.JsonGlobals.DataContractXsdBaseNamespaceLength = "http://schemas.datacontract.org/2004/07/".length;
	$asm0A.System.Runtime.Serialization.Json.JsonGlobals.unixEpochTicks = JSIL.New(System.DateTime, "_ctor$7", [1970, 1, 1, 0, 0, 0, System.DateTimeKind.Utc]).Ticks;
	$asm0A.System.Runtime.Serialization.Json.JsonGlobals.SecurityException = JSIL.New(System.Security.SecurityException, "_ctor$0", []);
	$asm0A.System.Runtime.Serialization.Json.JsonGlobals.ValidatingBEUTF16 = new System.Text.UnicodeEncoding(true, false, true);
	$asm0A.System.Runtime.Serialization.Json.JsonGlobals.ValidatingUTF16 = new System.Text.UnicodeEncoding(false, false, true);
	$asm0A.System.Runtime.Serialization.Json.JsonGlobals.ValidatingUTF8 = new System.Text.UTF8Encoding(false, true);
	$asm0A.System.Runtime.Serialization.Json.JsonGlobals.FloatingPointCharacters = JSIL.Array.New(System.Char, [".", "e", "E"]);
};

$asm0A.System.Runtime.Serialization.Json.XmlObjectSerializerReadContextComplexJson.prototype._ctor = function (serializer, rootTypeDataContract) {
	System.Runtime.Serialization.XmlObjectSerializerReadContext.prototype._ctor$0.call(this, null, 2147483647, new System.Runtime.Serialization.StreamingContext(), true);
	this.rootTypeDataContract = rootTypeDataContract;
	this.serializerKnownTypeList = serializer.knownTypeList;
	this.jsonSerializer = serializer;
};
$asm0A.System.Runtime.Serialization.Json.XmlObjectSerializerReadContextComplexJson.prototype.get_SerializerKnownDataContracts = function () {
	if (!this.isSerializerKnownDataContractsSetExplicit) {
		this.serializerKnownDataContracts = this.jsonSerializer.KnownDataContracts;
		this.isSerializerKnownDataContractsSetExplicit = true;
	}
	return this.serializerKnownDataContracts;
};
$asm0A.System.Runtime.Serialization.Json.XmlObjectSerializerReadContextComplexJson.prototype.get_SerializerKnownTypeList = function () {
	return this.serializerKnownTypeList;
};
$asm0A.System.Runtime.Serialization.Json.XmlObjectSerializerReadContextComplexJson.prototype.ResolveDataContractFromType = function (typeName, typeNs, memberTypeContract) {
	System.Runtime.Serialization.XmlObjectSerializerContext.prototype.PushKnownTypes.call(this, this.rootTypeDataContract);
	System.Runtime.Serialization.XmlObjectSerializerContext.prototype.PushKnownTypes.call(this, memberTypeContract);
	var xmlQualifiedName = $asm0A.System.Runtime.Serialization.Json.XmlObjectSerializerReadContextComplexJson.ParseQualifiedName(typeName);
	var result = System.Runtime.Serialization.XmlObjectSerializerContext.prototype.ResolveDataContractFromKnownTypes.call(this, xmlQualifiedName.Name, this.TrimNamespace(xmlQualifiedName.Namespace), memberTypeContract);
	System.Runtime.Serialization.XmlObjectSerializerContext.prototype.PopKnownTypes.call(this, this.rootTypeDataContract);
	System.Runtime.Serialization.XmlObjectSerializerContext.prototype.PopKnownTypes.call(this, memberTypeContract);
	return result;
};
$asm0A.System.Runtime.Serialization.Json.XmlObjectSerializerReadContextComplexJson.prototype.CheckIfTypeNeedsVerifcation = function (declaredContract, runtimeContract) {
	var flag = true;
	var collectionDataContract = JSIL.TryCast(declaredContract, System.Runtime.Serialization.CollectionDataContract);
	if (!((collectionDataContract === null) || !collectionDataContract.UnderlyingType.IsInterface)) {
		switch (Number(collectionDataContract.Kind)) {
			case 1: 
			case 2: 
				flag = (declaredContract.Name === runtimeContract.Name);
				break;
			default: 
				var type = collectionDataContract.ItemType.MakeArrayType$0();
				flag = (type !== runtimeContract.UnderlyingType);
				break;
		}
	}
	if (flag) {
		System.Runtime.Serialization.XmlObjectSerializerContext.prototype.PushKnownTypes.call(this, declaredContract);
		this.VerifyType(runtimeContract);
		System.Runtime.Serialization.XmlObjectSerializerContext.prototype.PopKnownTypes.call(this, declaredContract);
	}
};
$asm0A.System.Runtime.Serialization.Json.XmlObjectSerializerReadContextComplexJson.prototype.VerifyType = function (dataContract) {
	var dataContract2 = System.Runtime.Serialization.XmlObjectSerializerContext.prototype.ResolveDataContractFromKnownTypes.call(this, dataContract.StableName.Name, dataContract.StableName.Namespace, null);
	if (!((dataContract2 !== null) && (dataContract2.UnderlyingType === dataContract.UnderlyingType))) {
		throw System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0(System.Runtime.Serialization.SR.GetString$0("DcTypeNotFoundOnSerialize", [System.Runtime.Serialization.DataContract.GetClrTypeFullName(dataContract.UnderlyingType), dataContract.StableName.Name, dataContract.StableName.Namespace])));
	}
};
$asm0A.System.Runtime.Serialization.Json.XmlObjectSerializerReadContextComplexJson.prototype.TrimNamespace = function (serverTypeNamespace) {
	if (!System.String.IsNullOrEmpty(serverTypeNamespace)) {
		var c = (serverTypeNamespace[0]);
		if (c !== "#") {
			if (c === "\\") {
				if (serverTypeNamespace.length >= 2) {
					var c2 = (serverTypeNamespace[1]);
					if (!((c2 !== "#") && (c2 !== "\\"))) {
						serverTypeNamespace = serverTypeNamespace.Substring$0(1);
					}
				}
			}
		} else {
			serverTypeNamespace = (("http://schemas.datacontract.org/2004/07/" + serverTypeNamespace.Substring$0(1)));
		}
	}
	return serverTypeNamespace;
};
$asm0A.System.Runtime.Serialization.Json.XmlObjectSerializerReadContextComplexJson.ParseQualifiedName = function (qname) {
	var name = null;
	if (System.String.IsNullOrEmpty(qname)) {
		var ns = (name = System.String.Empty);
	} else {
		qname = qname.Trim$1();
		var num = qname.IndexOf$0(":");
		if (num >= 0) {
			name = qname.Substring$1(0, num);
			ns = qname.Substring$0((num + 1));
		} else {
			name = qname;
			ns = System.String.Empty;
		}
	}
	return JSIL.New(System.Xml.XmlQualifiedName, "_ctor$2", [name, ns]);
};
$asm0A.System.Runtime.Serialization.Json.XmlObjectSerializerReadContextComplexJson.prototype.GetDataContract$0 = function (typeHandle, type) {
	var dataContract = System.Runtime.Serialization.XmlObjectSerializerContext.prototype.GetDataContract$1.call(this, typeHandle, type);
	System.Runtime.Serialization.Json.DataContractJsonSerializer.CheckIfTypeIsReference(dataContract);
	return dataContract;
};
$asm0A.System.Runtime.Serialization.Json.XmlObjectSerializerReadContextComplexJson.prototype.GetDataContractSkipValidation = function (typeId, typeHandle, type) {
	var dataContractSkipValidation = System.Runtime.Serialization.XmlObjectSerializerContext.prototype.GetDataContractSkipValidation.call(this, typeId, typeHandle, type);
	System.Runtime.Serialization.Json.DataContractJsonSerializer.CheckIfTypeIsReference(dataContractSkipValidation);
	return dataContractSkipValidation;
};
$asm0A.System.Runtime.Serialization.Json.XmlObjectSerializerReadContextComplexJson.prototype.GetDataContract$1 = function (id, typeHandle) {
	var dataContract = System.Runtime.Serialization.XmlObjectSerializerContext.prototype.GetDataContract$2.call(this, id, typeHandle);
	System.Runtime.Serialization.Json.DataContractJsonSerializer.CheckIfTypeIsReference(dataContract);
	return dataContract;
};
JSIL.OverloadedMethod(System.Runtime.Serialization.Json.XmlObjectSerializerReadContextComplexJson.prototype, "GetDataContract", [
		["GetDataContract$0", [System.RuntimeTypeHandle, System.Type]], 
		["GetDataContract$1", [System.Int32, System.RuntimeTypeHandle]]
	]);
JSIL.MakeProperty($asm0A.System.Runtime.Serialization.Json.XmlObjectSerializerReadContextComplexJson.prototype, "SerializerKnownDataContracts", 
	$asm0A.System.Runtime.Serialization.Json.XmlObjectSerializerReadContextComplexJson.prototype.get_SerializerKnownDataContracts, null);
JSIL.MakeProperty($asm0A.System.Runtime.Serialization.Json.XmlObjectSerializerReadContextComplexJson.prototype, "SerializerKnownTypeList", 
	$asm0A.System.Runtime.Serialization.Json.XmlObjectSerializerReadContextComplexJson.prototype.get_SerializerKnownTypeList, null);
$asm0A.System.Runtime.Serialization.Json.XmlObjectSerializerReadContextComplexJson.prototype.jsonSerializer = null;
$asm0A.System.Runtime.Serialization.Json.XmlObjectSerializerReadContextComplexJson.prototype.isSerializerKnownDataContractsSetExplicit = false;

$asm0A.System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson.prototype._ctor = function (serializer, rootTypeDataContract) {
	this.byValObjectsInScope = new System.Runtime.Serialization.ObjectReferenceStack();
	System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype._ctor$1.call(this, null, 2147483647, new System.Runtime.Serialization.StreamingContext(), true);
	this.jsonSerializer = serializer;
	this.rootTypeDataContract = rootTypeDataContract;
	this.serializerKnownTypeList = serializer.knownTypeList;
};
$asm0A.System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson.CreateContext = function (serializer, rootTypeDataContract) {
	return new $asm0A.System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson(serializer, rootTypeDataContract);
};
$asm0A.System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson.prototype.get_SerializerKnownDataContracts = function () {
	if (!this.isSerializerKnownDataContractsSetExplicit) {
		this.serializerKnownDataContracts = this.jsonSerializer.KnownDataContracts;
		this.isSerializerKnownDataContractsSetExplicit = true;
	}
	return this.serializerKnownDataContracts;
};
$asm0A.System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson.prototype.get_SerializerKnownTypeList = function () {
	return this.serializerKnownTypeList;
};
$asm0A.System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson.prototype.WriteClrTypeInfo$0 = function (xmlWriter, clrTypeName, clrAssemblyName) {
	return false;
};
$asm0A.System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson.prototype.WriteClrTypeInfo$1 = function (xmlWriter, dataContract) {
	return false;
};
$asm0A.System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson.prototype.WriteArraySize = function (xmlWriter, size) {
};
$asm0A.System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson.TruncateDefaultDataContractNamespace = function (dataContractNamespace) {
	if (!System.String.IsNullOrEmpty(dataContractNamespace)) {
		if ((dataContractNamespace[0]) === "#") {
			return ("\\" + dataContractNamespace);
		}
		if ((dataContractNamespace[0]) === "\\") {
			return ("\\" + dataContractNamespace);
		}
		if (dataContractNamespace.StartsWith$1("http://schemas.datacontract.org/2004/07/", System.StringComparison.Ordinal)) {
			return ("#" + dataContractNamespace.Substring$0($asm0A.System.Runtime.Serialization.Json.JsonGlobals.DataContractXsdBaseNamespaceLength));
		}
	}
	return dataContractNamespace;
};
$asm0A.System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson.prototype.WriteTypeInfo = function (writer, contract, declaredContract) {
	return !((System.Object.ReferenceEquals(contract.Name, declaredContract.Name) && 
			System.Object.ReferenceEquals(contract.Namespace, declaredContract.Namespace)) || 
		((contract.Name.Value == declaredContract.Name.Value) && 
			(contract.Namespace.Value == declaredContract.Namespace.Value)) || (contract.UnderlyingType === System.Runtime.Serialization.Globals.TypeOfObjectArray));
};
$asm0A.System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson.prototype.WriteDataContractValue = function (dataContract, xmlWriter, obj, declaredTypeHandle) {
	this.jsonSerializer.WriteObjectInternal(
		obj, 
		dataContract, 
		this, 
		this.WriteTypeInfo$0(null, dataContract, System.Runtime.Serialization.DataContract.GetDataContract$1(declaredTypeHandle.MemberwiseClone(), JSIL.GetType(obj))), 
		declaredTypeHandle.MemberwiseClone()
	);
};
$asm0A.System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson.prototype.WriteNull = function (xmlWriter) {
};
$asm0A.System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson.VerifyObjectCompatibilityWithInterface = function (contract, graph, declaredType) {
	var type = (JSIL.GetType(contract));
	if (!((type !== System.Runtime.Serialization.XmlDataContract) || System.Runtime.Serialization.Globals.TypeOfIXmlSerializable.IsAssignableFrom(declaredType))) {
		throw System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0($asm0A.System.SR2.GetString$0("XmlObjectAssignedToIncompatibleInterface", [JSIL.GetType(graph), declaredType])));
	}
	if (!((type !== System.Runtime.Serialization.CollectionDataContract) || System.Runtime.Serialization.CollectionDataContract.IsCollectionInterface(declaredType))) {
		throw System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0($asm0A.System.SR2.GetString$0("CollectionAssignedToIncompatibleInterface", [JSIL.GetType(graph), declaredType])));
	}
};
$asm0A.System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson.prototype.CheckIfTypeNeedsVerifcation = function (declaredContract, runtimeContract) {
	if (this.WriteTypeInfo$0(null, runtimeContract, declaredContract)) {
		this.VerifyType(runtimeContract);
	}
};
$asm0A.System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson.prototype.VerifyType = function (dataContract) {
	var flag = false;
	if (dataContract.KnownDataContracts !== null) {
		this.scopedKnownTypes.Push(dataContract.KnownDataContracts);
		flag = true;
	}
	var dataContract2 = System.Runtime.Serialization.XmlObjectSerializerContext.prototype.ResolveDataContractFromKnownTypes.call(this, dataContract.StableName.Name, dataContract.StableName.Namespace, null);
	if (!((dataContract2 !== null) && (dataContract2.UnderlyingType === dataContract.UnderlyingType))) {
		throw System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0(System.Runtime.Serialization.SR.GetString$0("DcTypeNotFoundOnSerialize", [System.Runtime.Serialization.DataContract.GetClrTypeFullName(dataContract.UnderlyingType), dataContract.StableName.Name, dataContract.StableName.Namespace])));
	}
	if (flag) {
		this.scopedKnownTypes.Pop();
	}
};
$asm0A.System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson.prototype.OnHandleReference = function (xmlWriter, obj, canContainCyclicReference) {
	if (JSIL.GetType(obj).IsValueType) {
		return false;
	}
	if (this.byValObjectsInScope.Contains(obj)) {
		throw System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0(System.Runtime.Serialization.SR.GetString$0("CannotSerializeObjectWithCycles", [System.Runtime.Serialization.DataContract.GetClrTypeFullName(JSIL.GetType(obj))])));
	}
	this.byValObjectsInScope.Push(obj);
	return false;
};
$asm0A.System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson.prototype.OnEndHandleReference = function (xmlWriter, obj, canContainCyclicReference) {
	if (!JSIL.GetType(obj).IsValueType) {
		this.byValObjectsInScope.Pop(obj);
	}
};
$asm0A.System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson.GetRevisedItemContract = function (oldItemContract) {
	if (!((oldItemContract === null) || 
			!oldItemContract.UnderlyingType.IsGenericType || (oldItemContract.UnderlyingType.GetGenericTypeDefinition() !== System.Runtime.Serialization.Globals.TypeOfKeyValue))) {
		return System.Runtime.Serialization.ClassDataContract.CreateClassDataContractForKeyValue(oldItemContract.UnderlyingType, oldItemContract.Namespace, JSIL.Array.New(System.String, ["Key", "Value"]));
	}
	return oldItemContract;
};
$asm0A.System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson.prototype.GetDataContract$0 = function (typeHandle, type) {
	var dataContract = System.Runtime.Serialization.XmlObjectSerializerContext.prototype.GetDataContract$1.call(this, typeHandle, type);
	System.Runtime.Serialization.Json.DataContractJsonSerializer.CheckIfTypeIsReference(dataContract);
	return dataContract;
};
$asm0A.System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson.prototype.GetDataContractSkipValidation = function (typeId, typeHandle, type) {
	var dataContractSkipValidation = System.Runtime.Serialization.XmlObjectSerializerContext.prototype.GetDataContractSkipValidation.call(this, typeId, typeHandle, type);
	System.Runtime.Serialization.Json.DataContractJsonSerializer.CheckIfTypeIsReference(dataContractSkipValidation);
	return dataContractSkipValidation;
};
$asm0A.System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson.prototype.GetDataContract$1 = function (id, typeHandle) {
	var dataContract = System.Runtime.Serialization.XmlObjectSerializerContext.prototype.GetDataContract$2.call(this, id, typeHandle);
	System.Runtime.Serialization.Json.DataContractJsonSerializer.CheckIfTypeIsReference(dataContract);
	return dataContract;
};
JSIL.OverloadedMethod(System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson.prototype, "WriteClrTypeInfo", [
		["WriteClrTypeInfo$0", [System.Runtime.Serialization.XmlWriterDelegator, System.String, System.String]], 
		["WriteClrTypeInfo$1", [System.Runtime.Serialization.XmlWriterDelegator, System.Runtime.Serialization.DataContract]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson.prototype, "GetDataContract", [
		["GetDataContract$0", [System.RuntimeTypeHandle, System.Type]], 
		["GetDataContract$1", [System.Int32, System.RuntimeTypeHandle]]
	]);
JSIL.MakeProperty($asm0A.System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson.prototype, "SerializerKnownDataContracts", 
	$asm0A.System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson.prototype.get_SerializerKnownDataContracts, null);
JSIL.MakeProperty($asm0A.System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson.prototype, "SerializerKnownTypeList", 
	$asm0A.System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson.prototype.get_SerializerKnownTypeList, null);
$asm0A.System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson.prototype.jsonSerializer = null;
$asm0A.System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson.prototype.isSerializerKnownDataContractsSetExplicit = false;

$asm0A.System.Runtime.Serialization.Json.DataContractToObjectConverter.GetTypeName = function (dataContract) {
	var text = $asm0A.System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson.TruncateDefaultDataContractNamespace(dataContract.Namespace.Value);
	return (dataContract.Name.Value + (text.length === 0) ? "" : (":" + text));
};
$asm0A.System.Runtime.Serialization.Json.DataContractToObjectConverter.ConvertGenericListToArray = function (serializer, value, dataContract, context, writeServerType) {
	var type = dataContract.ItemType;
	if (type.IsGenericType) {
		type = type.GetGenericArguments()[0];
	}
	var list = new (System.Collections.Generic.List$b1.Of(System.Object)) ();
	var getEnumeratorMethod = dataContract.GetEnumeratorMethod;
__loop0__: 
	for (var enumerator = (getEnumeratorMethod === null) ? value.IEnumerable_GetEnumerator() : JSIL.Cast(getEnumeratorMethod.Invoke$0(
				value, 
				(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static), 
				null, 
				JSIL.Cast(System.Runtime.Serialization.Globals.EmptyTypeArray, System.Array.Of(System.Object)), 
				null
			), System.Collections.IEnumerator); enumerator.IEnumerator_MoveNext(); ) {
		if (!((enumerator.IEnumerator_Current !== null) && !JSIL.GetType(enumerator.IEnumerator_Current).IsPrimitive)) {
			list.Add(enumerator.IEnumerator_Current);
		} else {
			var type2 = (JSIL.GetType(enumerator.IEnumerator_Current));
			var dataContract2 = System.Runtime.Serialization.DataContract.GetDataContract$0(type2);
			var flag = $asm0A.System.Runtime.Serialization.Json.DataContractToObjectConverter.EmitTypeInformation(dataContract.ItemContract, type2);
			if (!(!writeServerType && !flag)) {
				context.CheckIfTypeNeedsVerifcation(dataContract.ItemContract, dataContract2);
			}
			context.PushKnownTypes(dataContract);
			list.Add(serializer.ConvertDataContractToObject(
					enumerator.IEnumerator_Current, 
					dataContract2, 
					context, 
					(writeServerType || flag), 
					dataContract.ItemType.TypeHandle.MemberwiseClone()
				));
			context.PopKnownTypes(dataContract);
		}
	}
	return list;
};
$asm0A.System.Runtime.Serialization.Json.DataContractToObjectConverter.ConvertGenericDictionaryToArray = function (serializer, value, dataContract, context, writeServerType) {
	var list = new (System.Collections.Generic.List$b1.Of(System.Object)) ();
	var genericArguments = dataContract.ItemType.GetGenericArguments();
	var getEnumeratorMethod = dataContract.GetEnumeratorMethod;
__loop0__: 
	for (var dictionaryEnumerator = JSIL.Cast((getEnumeratorMethod === null) ? value.IEnumerable_GetEnumerator() : JSIL.Cast(getEnumeratorMethod.Invoke$0(
					value, 
					(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static), 
					null, 
					JSIL.Cast(System.Runtime.Serialization.Globals.EmptyTypeArray, System.Array.Of(System.Object)), 
					null
				), System.Collections.IDictionaryEnumerator), System.Collections.IDictionaryEnumerator); dictionaryEnumerator.IEnumerator_MoveNext(); ) {
		var entry = dictionaryEnumerator.IDictionaryEnumerator_Entry.MemberwiseClone();
		var dataContract2 = System.Runtime.Serialization.DataContract.GetDataContract$0(JSIL.GetType(dictionaryEnumerator.IEnumerator_Current));
		var dictionary = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.String, System.Object), "_ctor$0", []);
		if (writeServerType) {
			$asm0A.System.Runtime.Serialization.Json.DataContractToObjectConverter.AddTypeInformation(dictionary, dataContract2);
		}
		context.PushKnownTypes(dataContract);
		$asm0A.System.Runtime.Serialization.Json.DataContractToObjectConverter.AddDictionaryEntryData(
			serializer, 
			dictionary, 
			"Key", 
			genericArguments[0], 
			entry.Key, 
			context
		);
		$asm0A.System.Runtime.Serialization.Json.DataContractToObjectConverter.AddDictionaryEntryData(
			serializer, 
			dictionary, 
			"Value", 
			genericArguments[1], 
			entry.Value, 
			context
		);
		list.Add(dictionary);
		context.PopKnownTypes(dataContract);
	}
	return list;
};
$asm0A.System.Runtime.Serialization.Json.DataContractToObjectConverter.AddDictionaryEntryData = function (serializer, currentEntry, key, declaredType, value, context) {
	if (value === null) {
		currentEntry.set_Item(key, value);
		return;
	}
	var type = (JSIL.GetType(value));
	if ($asm0A.System.Runtime.Serialization.Json.DataContractToObjectConverter.IsTypePrimitive(type)) {
		currentEntry.set_Item(key, value);
		return;
	}
	if (!(!declaredType.IsGenericType || (declaredType.GetGenericTypeDefinition() !== System.Runtime.Serialization.Globals.TypeOfNullable))) {
		declaredType = System.Nullable.GetUnderlyingType(declaredType);
	}
	var dataContract = System.Runtime.Serialization.DataContract.GetDataContract$0(type);
	if (declaredType !== type) {
		context.VerifyType(dataContract);
	}
	currentEntry.set_Item(key, serializer.ConvertDataContractToObject(
			value, 
			dataContract, 
			context, 
			$asm0A.System.Runtime.Serialization.Json.DataContractToObjectConverter.EmitTypeInformation(dataContract, type), 
			dataContract.UnderlyingType.TypeHandle.MemberwiseClone()
		));
};
$asm0A.System.Runtime.Serialization.Json.DataContractToObjectConverter.ConvertClassDataContractToDictionary = function (serializer, dataContract, value, context, writeServerType) {
	var dictionary = new JSIL.Variable(JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.String, System.Object), "_ctor$0", []));
	if (writeServerType) {
		$asm0A.System.Runtime.Serialization.Json.DataContractToObjectConverter.AddTypeInformation(dictionary.value, System.Runtime.Serialization.DataContract.GetDataContract$0(JSIL.GetType(value)));
	}
	if (dataContract.UnderlyingType === System.Runtime.Serialization.Globals.TypeOfDateTimeOffsetAdapter) {
		var dateTimeOffset = JSIL.Cast(value, System.DateTimeOffset).MemberwiseClone();
		dictionary.value.set_Item("DateTime", dateTimeOffset.UtcDateTime);
		dictionary.value.set_Item("OffsetMinutes", Math.floor(dateTimeOffset.Offset.TotalMinutes));
		return dictionary.value;
	}
	if (dataContract.IsKeyValuePairAdapter) {
		value = dataContract.KeyValuePairAdapterConstructorInfo.Invoke$1([value]);
	}
	System.Runtime.Serialization.Json.DataContractJsonSerializer.InvokeOnSerializing(value, dataContract, context);
	$asm0A.System.Runtime.Serialization.Json.DataContractToObjectConverter.WriteClassDataContractMembers(
		serializer, 
		dataContract, 
		/* ref */ dictionary, 
		value, 
		context
	);
	System.Runtime.Serialization.Json.DataContractJsonSerializer.InvokeOnSerialized(value, dataContract, context);
	return dictionary.value;
};
$asm0A.System.Runtime.Serialization.Json.DataContractToObjectConverter.WriteClassDataContractMembers = function (serializer, dataContract, /* ref */ classToDictionary, value, context) {
	if (dataContract.BaseContract !== null) {
		$asm0A.System.Runtime.Serialization.Json.DataContractToObjectConverter.WriteClassDataContractMembers(
			serializer, 
			dataContract.BaseContract, 
			/* ref */ classToDictionary, 
			value, 
			context
		);
	}
__loop0__: 
	for (var i = 0; i < dataContract.Members.Count; ++i) {
		var dataMember = dataContract.Members.get_Item(i);
		var memberValue = $asm0A.System.Runtime.Serialization.Json.DataContractToObjectConverter.GetMemberValue(value, dataContract.Members.get_Item(i).MemberInfo.Name, dataContract.UnderlyingType);
		var text = System.Xml.XmlConvert.DecodeName(dataMember.Name);
		if (classToDictionary.value.ContainsKey(text)) {
			throw System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Runtime.Serialization.SerializationException, "_ctor$1", [$asm0A.System.SR2.GetString$0("JsonDuplicateMemberNames", [System.Runtime.Serialization.DataContract.GetClrTypeFullName(dataContract.UnderlyingType), text])]));
		}
		if (!(!dataMember.EmitDefaultValue && ((memberValue === null) || 
					(dataMember.MemberTypeContract.IsValueType && 
						System.Object.Equals(memberValue, System.Activator.CreateInstance$3(dataMember.MemberType)))))) {
			if (!((memberValue !== null) && !$asm0A.System.Runtime.Serialization.Json.DataContractToObjectConverter.IsTypePrimitive(dataMember.MemberType))) {
				classToDictionary.value.set_Item(text, memberValue);
			} else {
				var type = (JSIL.GetType(memberValue));
				if (!((dataMember.MemberType !== type) && (!dataMember.IsNullable || 
							$asm0A.System.Runtime.Serialization.Json.DataContractToObjectConverter.EmitTypeInformation(dataMember.MemberTypeContract, type)))) {
					classToDictionary.value.set_Item(text, serializer.ConvertDataContractToObject(
							memberValue, 
							dataMember.MemberTypeContract, 
							context, 
							false, 
							dataMember.MemberTypeContract.UnderlyingType.TypeHandle.MemberwiseClone()
						));
				} else {
					context.PushKnownTypes(dataContract);
					var dataContract2 = System.Runtime.Serialization.DataContract.GetDataContract$0(JSIL.GetType(memberValue));
					if (dataMember.MemberType.IsInterface) {
						$asm0A.System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson.VerifyObjectCompatibilityWithInterface(dataContract2, memberValue, dataMember.MemberType);
					}
					context.CheckIfTypeNeedsVerifcation(dataMember.MemberTypeContract, dataContract2);
					classToDictionary.value.set_Item(text, serializer.ConvertDataContractToObject(
							memberValue, 
							dataContract2, 
							context, 
							true, 
							dataMember.MemberTypeContract.UnderlyingType.TypeHandle.MemberwiseClone()
						));
					context.PopKnownTypes(dataContract);
				}
			}
		}
	}
};
$asm0A.System.Runtime.Serialization.Json.DataContractToObjectConverter.GetMemberValue = function (value, memberName, typeToInvokeOn) {
	try {
		var result = typeToInvokeOn.InvokeMember$1(
			memberName, 
			(System.Reflection.BindingFlags.GetField | System.Reflection.BindingFlags.GetProperty | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static), 
			null, 
			value, 
			null
		);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.MemberAccessException)) {
			var arg_12_0 = $exception;
			throw System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Security.SecurityException, "_ctor$2", [$asm0A.System.SR2.GetString$0("PartialTrustDataContractMemberGetNotPublic", [System.Runtime.Serialization.DataContract.GetClrTypeFullName(typeToInvokeOn), memberName]), arg_12_0]));
		} else {
			throw $exception;
		}
	}
	return result;
};
$asm0A.System.Runtime.Serialization.Json.DataContractToObjectConverter.IsTypePrimitive = function (t) {
	return (t.IsPrimitive || (t === System.String));
};
$asm0A.System.Runtime.Serialization.Json.DataContractToObjectConverter.EmitTypeInformation = function (contract, runtimeType) {
	return (!((contract.UnderlyingType === runtimeType) || 
			((JSIL.TryCast(contract, System.Runtime.Serialization.ClassDataContract) !== null) && 
				(contract.UnderlyingType === System.Runtime.Serialization.Globals.TypeOfDateTimeOffsetAdapter))) && 
		((JSIL.TryCast(contract, System.Runtime.Serialization.CollectionDataContract) === null) || 
			!JSIL.Cast(contract, System.Runtime.Serialization.CollectionDataContract).UnderlyingType.IsInterface) && (contract.UnderlyingType !== runtimeType));
};
$asm0A.System.Runtime.Serialization.Json.DataContractToObjectConverter.AddTypeInformation = function (dictionary, contract) {
	dictionary.IDictionary_set_Item("__type", $asm0A.System.Runtime.Serialization.Json.DataContractToObjectConverter.GetTypeName(contract));
};

$asm0A.System.Runtime.Serialization.Json.ObjectToDataContractConverter.CheckDuplicateNames = function (dataContract) {
	if (dataContract.MemberNames !== null) {
		var dictionary = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.String, System.Object), "_ctor$0", []);
	__loop0__: 
		for (var i = 0; i < dataContract.MemberNames.length; ++i) {
			if (dictionary.ContainsKey(dataContract.MemberNames[i].Value)) {
				throw JSIL.New(System.Runtime.Serialization.SerializationException, "_ctor$1", [$asm0A.System.SR2.GetString$0("JsonDuplicateMemberInInput", [dataContract.MemberNames[i].Value])]);
			}
			dictionary.Add(dataContract.MemberNames[i].Value, null);
		}
	}
};
$asm0A.System.Runtime.Serialization.Json.ObjectToDataContractConverter.ConvertDictionaryToClassDataContract = function (serializer, dataContract, deserialzedValue, context) {
	var dateTimeOffset = new System.DateTimeOffset();
	if (deserialzedValue === null) {
		return null;
	}
	if (dataContract.UnderlyingType === System.Runtime.Serialization.Globals.TypeOfDateTimeOffsetAdapter) {
		dateTimeOffset._ctor$1(JSIL.Cast(deserialzedValue.get_Item("DateTime"), System.DateTime).MemberwiseClone());
		return dateTimeOffset.ToOffset(JSIL.New(System.TimeSpan, "_ctor$1", [0, JSIL.Cast(deserialzedValue.get_Item("OffsetMinutes"), System.Int32), 0]));
	}
	if (deserialzedValue.ContainsKey("__type")) {
		dataContract = $asm0A.System.Runtime.Serialization.Json.ObjectToDataContractConverter.ResolveDataContractFromTypeInformation((deserialzedValue.get_Item("__type")).toString(), dataContract, context);
	}
	var obj = $asm0A.System.Runtime.Serialization.Json.ObjectToDataContractConverter.CreateInstance(dataContract);
	$asm0A.System.Runtime.Serialization.Json.ObjectToDataContractConverter.CheckDuplicateNames(dataContract);
	System.Runtime.Serialization.Json.DataContractJsonSerializer.InvokeOnDeserializing(obj, dataContract, context);
	$asm0A.System.Runtime.Serialization.Json.ObjectToDataContractConverter.ReadClassDataContractMembers(
		serializer, 
		dataContract, 
		deserialzedValue, 
		obj, 
		context
	);
	System.Runtime.Serialization.Json.DataContractJsonSerializer.InvokeOnDeserialized(obj, dataContract, context);
	if (dataContract.IsKeyValuePairAdapter) {
		return dataContract.GetKeyValuePairMethodInfo.Invoke$1(obj, JSIL.Cast(System.Runtime.Serialization.Globals.EmptyTypeArray, System.Array.Of(System.Object)));
	}
	return obj;
};
$asm0A.System.Runtime.Serialization.Json.ObjectToDataContractConverter.ReadClassDataContractMembers = function (serializer, dataContract, deserialzedValue, newInstance, context) {
	var obj = new JSIL.Variable(null);
	if (dataContract.BaseContract !== null) {
		$asm0A.System.Runtime.Serialization.Json.ObjectToDataContractConverter.ReadClassDataContractMembers(
			serializer, 
			dataContract.BaseContract, 
			deserialzedValue, 
			newInstance, 
			context
		);
	}
__loop0__: 
	for (var i = 0; i < dataContract.Members.Count; ++i) {
		var dataMember = dataContract.Members.get_Item(i);
		if (deserialzedValue.TryGetValue(System.Xml.XmlConvert.DecodeName(dataContract.Members.get_Item(i).Name), /* ref */ obj)) {
			if (!(!dataMember.MemberType.IsPrimitive && obj.value)) {
				$asm0A.System.Runtime.Serialization.Json.ObjectToDataContractConverter.SetMemberValue(newInstance, serializer.ConvertObjectToDataContract(dataMember.MemberTypeContract, obj.value, context), dataContract.Members.get_Item(i).MemberInfo.Name, dataContract.UnderlyingType);
			} else {
				context.PushKnownTypes(dataContract);
				var obj2 = serializer.ConvertObjectToDataContract(dataMember.MemberTypeContract, obj.value, context);
				var type = (dataMember.MemberType.IsGenericType && 
					(dataMember.MemberType.GetGenericTypeDefinition() === System.Runtime.Serialization.Globals.TypeOfNullable)) ? System.Nullable.GetUnderlyingType(dataMember.MemberType) : dataMember.MemberType;
				if (!(((type === System.Runtime.Serialization.Globals.TypeOfObject) && 
							((JSIL.GetType(obj2)) === System.Runtime.Serialization.Globals.TypeOfObjectArray)) || (type === (JSIL.GetType(obj2))))) {
					var dataContract2 = System.Runtime.Serialization.DataContract.GetDataContract$0(JSIL.GetType(obj2));
					context.CheckIfTypeNeedsVerifcation(dataMember.MemberTypeContract, dataContract2);
				}
				$asm0A.System.Runtime.Serialization.Json.ObjectToDataContractConverter.SetMemberValue(newInstance, obj2, dataContract.Members.get_Item(i).MemberInfo.Name, dataContract.UnderlyingType);
				context.PopKnownTypes(dataContract);
			}
		} else if (dataMember.IsRequired) {
			System.Runtime.Serialization.XmlObjectSerializerWriteContext.ThrowRequiredMemberMustBeEmitted(dataContract.MemberNames[i].Value, dataContract.UnderlyingType);
		}
	}
};
$asm0A.System.Runtime.Serialization.Json.ObjectToDataContractConverter.ConvertICollectionToCollectionDataContract = function (serializer, contract, deserializedValue, context) {
	var dictionary = JSIL.TryCast(deserializedValue, System.Collections.Generic.Dictionary$b2.Of(System.String, System.Object));
	if (!((dictionary === null) || (dictionary.ContainsKey("Key") && 
				!dictionary.ContainsKey("__type")))) {
		return $asm0A.System.Runtime.Serialization.Json.ObjectToDataContractConverter.ConvertDictionary(serializer, contract, dictionary, context);
	}
	var obj = contract.Constructor ? contract.Constructor.Invoke$1(JSIL.Cast(System.Runtime.Serialization.Globals.EmptyTypeArray, System.Array.Of(System.Object))) : null;
	var isDictionary = contract.IsDictionary;
	var methodInfo = contract.AddMethod;
	var flag = (contract.Kind === System.Runtime.Serialization.CollectionKind.Array);
	if (!(!contract.UnderlyingType.IsInterface && obj)) {
		switch (Number(contract.Kind)) {
			case 1: 
				obj = System.Activator.CreateInstance$3(System.Runtime.Serialization.Globals.TypeOfDictionaryGeneric.MakeGenericType(contract.ItemType.GetGenericArguments()));
				break;
			case 2: 
				throw System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Runtime.Serialization.InvalidDataContractException, "_ctor$1", [System.Runtime.Serialization.SR.GetString$2("UnsupportedIDictionaryAsDataMemberType")]));
			case 3: 
			case 4: 
			case 5: 
			case 6: 
			case 7: 
			case 8: 
			case 9: 
				obj = System.Activator.CreateInstance$3(System.Runtime.Serialization.Globals.TypeOfListGeneric.MakeGenericType(JSIL.Array.New(System.Type, [contract.ItemType])));
				flag = true;
				break;
		}
	}
	if (methodInfo === null) {
		var types = (contract.ItemType.IsGenericType && 
			!flag) ? contract.ItemType.GetGenericArguments() : JSIL.Array.New(System.Type, [contract.ItemType]);
		methodInfo = JSIL.GetType(obj).GetMethod$1(
			"Add", 
			(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public), 
			null, 
			types, 
			null
		);
	}
	var enumerator = JSIL.Cast(deserializedValue, System.Collections.ICollection).IEnumerable_GetEnumerator();
	var parameters = null;
__loop0__: 
	while (enumerator.IEnumerator_MoveNext()) {
		var dataContract = contract.ItemContract;
		if (JSIL.TryCast(dataContract, System.Runtime.Serialization.ClassDataContract) !== null) {
			dataContract = $asm0A.System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson.GetRevisedItemContract(dataContract);
		}
		var obj2 = serializer.ConvertObjectToDataContract(dataContract, enumerator.IEnumerator_Current, context);
		parameters = [obj2];
		if (isDictionary) {
			var type = (JSIL.GetType(obj2));
			parameters = [$asm0A.System.Runtime.Serialization.Json.DataContractToObjectConverter.GetMemberValue(obj2, "Key", type), $asm0A.System.Runtime.Serialization.Json.DataContractToObjectConverter.GetMemberValue(obj2, "Value", type)];
		}
		methodInfo.Invoke$1(obj, parameters);
	}
	if (!flag) {
		return obj;
	}
	return $asm0A.System.Runtime.Serialization.Json.ObjectToDataContractConverter.ConvertToArray(contract.ItemType, JSIL.Cast(obj, System.Collections.ICollection));
};
$asm0A.System.Runtime.Serialization.Json.ObjectToDataContractConverter.ConvertToArray = function (type, newList) {
	if (JSIL.GetType(newList).IsArray) {
		return newList;
	}
	var array = (JSIL.Array.New(type, newList.ICollection_Count));
	if (type === System.Byte) {
		var num = 0;
		var enumerator = newList.IEnumerable_GetEnumerator();
		try {
		__loop0__: 
			while (enumerator.IEnumerator_MoveNext()) {
				var current = enumerator.IEnumerator_Current;
				array.SetValue(System.Convert.ChangeType$1(current, type, null), num++);
			}
			return array;
		} finally {
			var disposable = JSIL.TryCast(enumerator, System.IDisposable);
			if (disposable !== null) {
				disposable.IDisposable_Dispose();
			}
		}
	}
	newList.ICollection_CopyTo(array, 0);
	return array;
};
$asm0A.System.Runtime.Serialization.Json.ObjectToDataContractConverter.ConvertDictionary = function (serializer, contract, obj, context) {
	var dictionary = JSIL.TryCast(obj, System.Collections.Generic.Dictionary$b2.Of(System.String, System.Object));
	if (dictionary.ContainsKey("__type")) {
		return $asm0A.System.Runtime.Serialization.Json.ObjectToDataContractConverter.ConvertDictionaryToClassDataContract(serializer, $asm0A.System.Runtime.Serialization.Json.ObjectToDataContractConverter.ResolveDataContractFromTypeInformation((dictionary.get_Item("__type")).toString(), null, context), dictionary, context);
	}
	if (!(!dictionary.ContainsKey("DateTime") || !dictionary.ContainsKey("OffsetMinutes"))) {
		return $asm0A.System.Runtime.Serialization.Json.ObjectToDataContractConverter.ConvertDictionaryToClassDataContract(serializer, JSIL.Cast(System.Runtime.Serialization.DataContract.GetDataContract$0(System.DateTimeOffset), System.Runtime.Serialization.ClassDataContract), dictionary, context);
	}
	return new System.Object();
};
$asm0A.System.Runtime.Serialization.Json.ObjectToDataContractConverter.ResolveDataContractFromTypeInformation = function (typeName, contract, context) {
	var dataContract = context.ResolveDataContractFromType(typeName, "http://schemas.datacontract.org/2004/07/", contract);
	if (dataContract === null) {
		var xmlQualifiedName = $asm0A.System.Runtime.Serialization.Json.XmlObjectSerializerReadContextComplexJson.ParseQualifiedName(typeName);
		throw System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0($asm0A.System.SR2.GetString$0("DcTypeNotFoundOnDeserialize", [xmlQualifiedName.Namespace, xmlQualifiedName.Name])));
	}
	return JSIL.Cast(dataContract, System.Runtime.Serialization.ClassDataContract);
};
$asm0A.System.Runtime.Serialization.Json.ObjectToDataContractConverter.SetMemberValue = function (newInstance, value, memberName, typeToInvokeOn) {
	try {
		typeToInvokeOn.InvokeMember$1(
			memberName, 
			(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.SetField | System.Reflection.BindingFlags.SetProperty | System.Reflection.BindingFlags.Static), 
			null, 
			newInstance, 
			[value]
		);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.MemberAccessException)) {
			var arg_1D_0 = $exception;
			throw System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Security.SecurityException, "_ctor$2", [$asm0A.System.SR2.GetString$0("PartialTrustDataContractMemberSetNotPublic", [System.Runtime.Serialization.DataContract.GetClrTypeFullName(typeToInvokeOn), memberName]), arg_1D_0]));
		} else {
			throw $exception;
		}
	}
};
$asm0A.System.Runtime.Serialization.Json.ObjectToDataContractConverter.CreateInstance = function (dataContract) {
	if (!(!dataContract.IsNonAttributedType || System.Runtime.Serialization.Globals.TypeOfScriptObject_IsAssignableFrom(dataContract.UnderlyingType))) {
		try {
			return System.Activator.CreateInstance$3(dataContract.UnderlyingType);
		} catch ($exception) {
			if (JSIL.CheckType($exception, System.MemberAccessException)) {
				var arg_23_0 = $exception;
				throw System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Security.SecurityException, "_ctor$2", [$asm0A.System.SR2.GetString$0("PartialTrustNonAttributedSerializableTypeNoPublicConstructor", [System.Runtime.Serialization.DataContract.GetClrTypeFullName(dataContract.UnderlyingType)]), arg_23_0]));
			} else {
				throw $exception;
			}
		}
	}
	if (dataContract.UnderlyingType === System.Runtime.Serialization.Globals.TypeOfDBNull) {
		return System.DBNull.Value;
	}
	return System.Runtime.Serialization.XmlFormatReaderGenerator.UnsafeGetUninitializedObject(System.Runtime.Serialization.DataContract.GetIdForInitialization(dataContract));
};

$asm0A.System.Runtime.Serialization.Json.JavaScriptObjectDeserializer.prototype.BasicDeserialize = function () {
	var result = this.DeserializeInternal(0);
	var nextNonEmptyChar = this._s.GetNextNonEmptyChar().MemberwiseClone();
	if (nextNonEmptyChar.HasValue ? new (System.Nullable$b1.Of(System.Int32)) (nextNonEmptyChar.GetValueOrDefault$0().charCodeAt(0)) : new (System.Nullable$b1.Of(System.Int32)) ().HasValue) {
		throw JSIL.New(System.Runtime.Serialization.SerializationException, "_ctor$1", [$asm0A.System.SR2.GetString$0("ObjectDeserializer_IllegalPrimitive", [this._s.toString()])]);
	}
	return result;
};
$asm0A.System.Runtime.Serialization.Json.JavaScriptObjectDeserializer.prototype._ctor$0 = function (input) {
	this._ctor$1(input, true);
};
$asm0A.System.Runtime.Serialization.Json.JavaScriptObjectDeserializer.prototype._ctor$1 = function (input, isDataContract) {
	System.Object.prototype._ctor.call(this);
	this._s = new $asm0A.System.Runtime.Serialization.Json.JavaScriptString(input);
	this._isDataContract = isDataContract;
};
$asm0A.System.Runtime.Serialization.Json.JavaScriptObjectDeserializer.prototype.DeserializeInternal = function (depth) {
	var nextNonEmptyChar = this._s.GetNextNonEmptyChar().MemberwiseClone();
	var c = nextNonEmptyChar.MemberwiseClone();
	if (!c.HasValue ? new (System.Nullable$b1.Of(System.Int32)) (c.GetValueOrDefault$0().charCodeAt(0)) : new (System.Nullable$b1.Of(System.Int32)) ().HasValue) {
		return null;
	}
	this._s.MovePrev$0();
	if (this.IsNextElementDateTime()) {
		return this.DeserializeStringIntoDateTime();
	}
	if ($asm0A.System.Runtime.Serialization.Json.JavaScriptObjectDeserializer.IsNextElementObject(nextNonEmptyChar.MemberwiseClone())) {
		return this.DeserializeDictionary(depth);
	}
	if ($asm0A.System.Runtime.Serialization.Json.JavaScriptObjectDeserializer.IsNextElementArray(nextNonEmptyChar.MemberwiseClone())) {
		return this.DeserializeList(depth);
	}
	if ($asm0A.System.Runtime.Serialization.Json.JavaScriptObjectDeserializer.IsNextElementString(nextNonEmptyChar.MemberwiseClone())) {
		return this.DeserializeString();
	}
	return this.DeserializePrimitiveObject();
};
$asm0A.System.Runtime.Serialization.Json.JavaScriptObjectDeserializer.prototype.DeserializeList = function (depth) {
	var __label0__ = null;
__step0__: 
	while (true) {
		switch (__label0__) {
			case null:
				var nextNonEmptyChar = new (System.Nullable$b1.Of(System.Char)) ();
				__label0__ = "__entry0__";
				continue __step0__;
				break;
			case "__entry0__":
				var list = new (System.Collections.Generic.List$b1.Of(System.Object)) ();
				var c = this._s.MoveNext$0().MemberwiseClone();
				var c2 = c.MemberwiseClone();
				if ((c2.GetValueOrDefault$0() !== "[") || !c2.HasValue) {
					throw JSIL.New(System.Runtime.Serialization.SerializationException, "_ctor$1", [this._s.GetDebugString($asm0A.System.SR2.GetString$0("ObjectDeserializer_UnexpectedToken", [c, "["]))]);
				}
				var flag = false;
			__loop0__: 
				do {
					c = (nextNonEmptyChar = this._s.GetNextNonEmptyChar().MemberwiseClone()).MemberwiseClone();
					if (!nextNonEmptyChar.HasValue ? new (System.Nullable$b1.Of(System.Int32)) (nextNonEmptyChar.GetValueOrDefault$0().charCodeAt(0)) : new (System.Nullable$b1.Of(System.Int32)) ().HasValue) {
						__label0__ = "IL_16A";
						continue __step0__;
					}
					var c3 = c.MemberwiseClone();
					if (!((c3.GetValueOrDefault$0() !== "]") || !c3.HasValue)) {
						__label0__ = "IL_16A";
						continue __step0__;
					}
					this._s.MovePrev$0();
					var value = this.DeserializeInternal(depth);
					list.IList_Add(value);
					flag = false;
					c = this._s.GetNextNonEmptyChar().MemberwiseClone();
					var c4 = c.MemberwiseClone();
					if ((c4.GetValueOrDefault$0() === "]") && c4.HasValue) {
						__label0__ = "IL_16A";
						continue __step0__;
					}
					flag = true;
					var c5 = c.MemberwiseClone();
				} while (!((c5.GetValueOrDefault$0() !== ",") || !c5.HasValue));
				throw JSIL.New(System.Runtime.Serialization.SerializationException, "_ctor$1", [this._s.GetDebugString($asm0A.System.SR2.GetString$0("ObjectDeserializer_UnexpectedToken", [c, ","]))]);
				__label0__ = "IL_16A";
				continue __step0__;
				break;
			case "IL_16A":
				if (flag) {
					throw JSIL.New(System.Runtime.Serialization.SerializationException, "_ctor$1", [this._s.GetDebugString($asm0A.System.SR2.GetString$2("ObjectDeserializer_InvalidArrayExtraComma"))]);
				}
				var c6 = c.MemberwiseClone();
				if ((c6.GetValueOrDefault$0() !== "]") || !c6.HasValue) {
					throw JSIL.New(System.Runtime.Serialization.SerializationException, "_ctor$1", [this._s.GetDebugString($asm0A.System.SR2.GetString$0("ObjectDeserializer_UnexpectedToken", [c, "]"]))]);
				}
				return list;
				break __step0__;
		}
	}
};
$asm0A.System.Runtime.Serialization.Json.JavaScriptObjectDeserializer.prototype.DeserializeDictionary = function (depth) {
	var __label0__ = null;
__step0__: 
	while (true) {
		switch (__label0__) {
			case null:
				var nextNonEmptyChar = new (System.Nullable$b1.Of(System.Char)) ();
				__label0__ = "__entry0__";
				continue __step0__;
				break;
			case "__entry0__":
				var dictionary = null;
				var c = this._s.MoveNext$0().MemberwiseClone();
				var c2 = c.MemberwiseClone();
				if ((c2.GetValueOrDefault$0() !== "{") || !c2.HasValue) {
					throw JSIL.New(System.Runtime.Serialization.SerializationException, "_ctor$1", [this._s.GetDebugString($asm0A.System.SR2.GetString$0("ObjectDeserializer_UnexpectedToken", [c, "{"]))]);
				}
				var flag = false;
			__loop0__: 
				while (true) {
					c = (nextNonEmptyChar = this._s.GetNextNonEmptyChar().MemberwiseClone()).MemberwiseClone();
					if (!nextNonEmptyChar.HasValue ? new (System.Nullable$b1.Of(System.Int32)) (nextNonEmptyChar.GetValueOrDefault$0().charCodeAt(0)) : new (System.Nullable$b1.Of(System.Int32)) ().HasValue) {
						__label0__ = "IL_287";
						continue __step0__;
					}
					this._s.MovePrev$0();
					var c3 = c.MemberwiseClone();
					if ((c3.GetValueOrDefault$0() === ":") && c3.HasValue) {
						break __loop0__;
					}
					var text = null;
					var c4 = c.MemberwiseClone();
					if ((c4.GetValueOrDefault$0() !== "}") || !c4.HasValue) {
						text = this.DeserializeMemberName();
						if (System.String.IsNullOrEmpty(text)) {
							__label0__ = "Block_7";
							continue __step0__;
						}
						c = this._s.GetNextNonEmptyChar().MemberwiseClone();
						var c5 = c.MemberwiseClone();
						if ((c5.GetValueOrDefault$0() !== ":") || !c5.HasValue) {
							__label0__ = "Block_9";
							continue __step0__;
						}
					}
					if (dictionary === null) {
						dictionary = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.String, System.Object), "_ctor$0", []);
						if (System.String.IsNullOrEmpty(text)) {
							__label0__ = "Block_11";
							continue __step0__;
						}
					}
					var value = this.DeserializeInternal(depth);
					if (!(flag && text.Equals$1("__type"))) {
						if (dictionary.IDictionary$b2_ContainsKey(text)) {
							__label0__ = "Block_13";
							continue __step0__;
						}
						dictionary.IDictionary$b2_set_Item(text, value);
						flag = true;
					}
					c = this._s.GetNextNonEmptyChar().MemberwiseClone();
					var c6 = c.MemberwiseClone();
					if ((c6.GetValueOrDefault$0() === "}") && c6.HasValue) {
						__label0__ = "IL_287";
						continue __step0__;
					}
					var c7 = c.MemberwiseClone();
					if ((c7.GetValueOrDefault$0() !== ",") || !c7.HasValue) {
						__label0__ = "Block_17";
						continue __step0__;
					}
				}
				throw JSIL.New(System.Runtime.Serialization.SerializationException, "_ctor$1", [this._s.GetDebugString($asm0A.System.SR2.GetString$2("ObjectDeserializer_InvalidMemberName"))]);
				__label0__ = "Block_7";
				continue __step0__;
				break;
			case "Block_7":
				throw JSIL.New(System.Runtime.Serialization.SerializationException, "_ctor$1", [this._s.GetDebugString($asm0A.System.SR2.GetString$2("ObjectDeserializer_InvalidMemberName"))]);
				__label0__ = "Block_9";
				continue __step0__;
				break;
			case "Block_9":
				throw JSIL.New(System.Runtime.Serialization.SerializationException, "_ctor$1", [this._s.GetDebugString($asm0A.System.SR2.GetString$0("ObjectDeserializer_UnexpectedToken", [c, ":"]))]);
				__label0__ = "Block_11";
				continue __step0__;
				break;
			case "Block_11":
				c = this._s.GetNextNonEmptyChar().MemberwiseClone();
				__label0__ = "IL_287";
				continue __step0__;
				__label0__ = "Block_13";
				continue __step0__;
				break;
			case "Block_13":
				throw JSIL.New(System.Runtime.Serialization.SerializationException, "_ctor$1", [$asm0A.System.SR2.GetString$0("JsonDuplicateMemberInInput", [text])]);
				__label0__ = "Block_17";
				continue __step0__;
				break;
			case "Block_17":
				throw JSIL.New(System.Runtime.Serialization.SerializationException, "_ctor$1", [this._s.GetDebugString($asm0A.System.SR2.GetString$0("ObjectDeserializer_UnexpectedToken", [c, ","]))]);
				__label0__ = "IL_287";
				continue __step0__;
				break;
			case "IL_287":
				var c8 = c.MemberwiseClone();
				if ((c8.GetValueOrDefault$0() !== "}") || !c8.HasValue) {
					throw JSIL.New(System.Runtime.Serialization.SerializationException, "_ctor$1", [this._s.GetDebugString($asm0A.System.SR2.GetString$0("ObjectDeserializer_UnexpectedToken", [c, "}"]))]);
				}
				return dictionary;
				break __step0__;
		}
	}
};
$asm0A.System.Runtime.Serialization.Json.JavaScriptObjectDeserializer.prototype.DeserializeMemberName = function () {
	var nextNonEmptyChar = this._s.GetNextNonEmptyChar().MemberwiseClone();
	var c = nextNonEmptyChar.MemberwiseClone();
	if (!c.HasValue ? new (System.Nullable$b1.Of(System.Int32)) (c.GetValueOrDefault$0().charCodeAt(0)) : new (System.Nullable$b1.Of(System.Int32)) ().HasValue) {
		return null;
	}
	this._s.MovePrev$0();
	if ($asm0A.System.Runtime.Serialization.Json.JavaScriptObjectDeserializer.IsNextElementString(nextNonEmptyChar.MemberwiseClone())) {
		return this.DeserializeString();
	}
	return this.DeserializePrimitiveToken();
};
$asm0A.System.Runtime.Serialization.Json.JavaScriptObjectDeserializer.prototype.DeserializePrimitiveObject = function () {
	var num = new JSIL.Variable(0), num2 = new JSIL.Variable(0);
	var text = this.DeserializePrimitiveToken();
	if (text.Equals$1("null")) {
		return null;
	}
	if (text.Equals$1("true")) {
		return true;
	}
	if (text.Equals$1("false")) {
		return false;
	}
	if (text.Equals$1("INF")) {
		return Infinity;
	}
	if (text.Equals$1("-INF")) {
		return -Infinity;
	}
	if (text.IndexOfAny$0($asm0A.System.Runtime.Serialization.Json.JsonGlobals.FloatingPointCharacters) < 0) {
		if (System.Int32.TryParse$1(text, (System.Globalization.NumberStyles.AllowDecimalPoint | System.Globalization.NumberStyles.AllowExponent | System.Globalization.NumberStyles.AllowLeadingSign | System.Globalization.NumberStyles.AllowLeadingWhite | System.Globalization.NumberStyles.AllowTrailingWhite | System.Globalization.NumberStyles.Float | System.Globalization.NumberStyles.Integer), System.Globalization.CultureInfo.InvariantCulture, /* ref */ num)) {
			return num.value;
		}
		if (System.Int64.TryParse$1(text, (System.Globalization.NumberStyles.AllowDecimalPoint | System.Globalization.NumberStyles.AllowExponent | System.Globalization.NumberStyles.AllowLeadingSign | System.Globalization.NumberStyles.AllowLeadingWhite | System.Globalization.NumberStyles.AllowTrailingWhite | System.Globalization.NumberStyles.Float | System.Globalization.NumberStyles.Integer), System.Globalization.CultureInfo.InvariantCulture, /* ref */ num2)) {
			return num2.value;
		}
		if (this._isDataContract) {
			return $asm0A.System.Runtime.Serialization.Json.JavaScriptObjectDeserializer.ParseJsonNumberAsDoubleOrDecimal(text);
		}
	}
	var obj = $asm0A.System.Runtime.Serialization.Json.JavaScriptObjectDeserializer.ParseJsonNumberAsDoubleOrDecimal(text);
	if ((JSIL.GetType(obj)) === System.Runtime.Serialization.Globals.TypeOfString) {
		throw JSIL.New(System.Runtime.Serialization.SerializationException, "_ctor$1", [$asm0A.System.SR2.GetString$0("ObjectDeserializer_IllegalPrimitive", [text])]);
	}
	if (!this._isDataContract) {
		return obj;
	}
	return text;
};
$asm0A.System.Runtime.Serialization.Json.JavaScriptObjectDeserializer.prototype.DeserializePrimitiveToken = function () {
	var __label0__ = null;
__step0__: 
	while (true) {
		switch (__label0__) {
			case null:
				var c2 = new (System.Nullable$b1.Of(System.Char)) ();
				__label0__ = "__entry0__";
				continue __step0__;
				break;
			case "__entry0__":
				var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
				var c = new (System.Nullable$b1.Of(System.Char)) ();
			__loop0__: 
				while (true) {
					c = (c2 = this._s.MoveNext$0().MemberwiseClone()).MemberwiseClone();
					if (!c2.HasValue ? new (System.Nullable$b1.Of(System.Int32)) (c2.GetValueOrDefault$0().charCodeAt(0)) : new (System.Nullable$b1.Of(System.Int32)) ().HasValue) {
						__label0__ = "IL_A2";
						continue __step0__;
					}
					if (!System.Char.IsLetterOrDigit$0(c.Value) && 
						(c.Value !== ".") && 
						(c.Value !== "-") && 
						(c.Value !== "_") && (c.Value !== "+")) {
						break __loop0__;
					}
					stringBuilder.Append$16(c.MemberwiseClone());
				}
				this._s.MovePrev$0();
				__label0__ = "IL_A2";
				continue __step0__;
				break;
			case "IL_A2":
				return stringBuilder.toString();
				break __step0__;
		}
	}
};
$asm0A.System.Runtime.Serialization.Json.JavaScriptObjectDeserializer.prototype.DeserializeString = function () {
	var __label0__ = null;
__step0__: 
	while (true) {
		switch (__label0__) {
			case null:
				var c3 = new (System.Nullable$b1.Of(System.Char)) ();
				__label0__ = "__entry0__";
				continue __step0__;
				break;
			case "__entry0__":
				var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
				var flag = false;
				var c = this._s.MoveNext$0().MemberwiseClone();
				var c2 = this.CheckQuoteChar(c.MemberwiseClone());
			__loop0__: 
				while (true) {
					c = (c3 = this._s.MoveNext$0().MemberwiseClone()).MemberwiseClone();
					if (!c3.HasValue ? new (System.Nullable$b1.Of(System.Int32)) (c3.GetValueOrDefault$0().charCodeAt(0)) : new (System.Nullable$b1.Of(System.Int32)) ().HasValue) {
						__label0__ = "Block_8";
						continue __step0__;
					}
					var c4 = c.MemberwiseClone();
					if ((c4.GetValueOrDefault$0() === "\\") && c4.HasValue) {
						if (flag) {
							stringBuilder.Append$7("\\");
							flag = false;
						} else {
							flag = true;
						}
					} else if (flag) {
						this.AppendCharToBuilder(c.MemberwiseClone(), stringBuilder);
						flag = false;
					} else {
						var c5 = c.MemberwiseClone();
						var num = c2.charCodeAt(0);
						if ((c5.GetValueOrDefault$0().charCodeAt(0) === num) && c5.HasValue) {
							break __loop0__;
						}
						stringBuilder.Append$16(c.MemberwiseClone());
					}
				}
				return stringBuilder.toString();
				__label0__ = "Block_8";
				continue __step0__;
				break;
			case "Block_8":
				throw JSIL.New(System.Runtime.Serialization.SerializationException, "_ctor$1", [this._s.GetDebugString($asm0A.System.SR2.GetString$2("ObjectDeserializer_UnterminatedString"))]);
				break __step0__;
		}
	}
};
$asm0A.System.Runtime.Serialization.Json.JavaScriptObjectDeserializer.prototype.AppendCharToBuilder = function (c, sb) {
	var c2 = c.MemberwiseClone();
	if (!((c2.GetValueOrDefault$0() === '"') && c2.HasValue)) {
		var c3 = c.MemberwiseClone();
		if (!((c3.GetValueOrDefault$0() === "'") && c3.HasValue)) {
			var c4 = c.MemberwiseClone();
			if (!((c4.GetValueOrDefault$0() === "/") && c4.HasValue)) {
				var c5 = c.MemberwiseClone();
				if ((c5.GetValueOrDefault$0() === "b") && c5.HasValue) {
					sb.Append$7("\x08");
					return;
				}
				var c6 = c.MemberwiseClone();
				if ((c6.GetValueOrDefault$0() === "f") && c6.HasValue) {
					sb.Append$7("\x0c");
					return;
				}
				var c7 = c.MemberwiseClone();
				if ((c7.GetValueOrDefault$0() === "n") && c7.HasValue) {
					sb.Append$7("\n");
					return;
				}
				var c8 = c.MemberwiseClone();
				if ((c8.GetValueOrDefault$0() === "r") && c8.HasValue) {
					sb.Append$7("\r");
					return;
				}
				var c9 = c.MemberwiseClone();
				if ((c9.GetValueOrDefault$0() === "t") && c9.HasValue) {
					sb.Append$7("\t");
					return;
				}
				var c10 = c.MemberwiseClone();
				if ((c10.GetValueOrDefault$0() === "u") && c10.HasValue) {
					sb.Append$7(String.fromCharCode(System.Int32.Parse(this._s.MoveNext$1(4), (System.Globalization.NumberStyles.AllowHexSpecifier | System.Globalization.NumberStyles.AllowLeadingWhite | System.Globalization.NumberStyles.AllowTrailingWhite | System.Globalization.NumberStyles.HexNumber), System.Globalization.CultureInfo.InvariantCulture)));
					return;
				}
				throw JSIL.New(System.Runtime.Serialization.SerializationException, "_ctor$1", [this._s.GetDebugString($asm0A.System.SR2.GetString$2("ObjectDeserializer_BadEscape"))]);
			}
		}
	}
	sb.Append$16(c.MemberwiseClone());
};
$asm0A.System.Runtime.Serialization.Json.JavaScriptObjectDeserializer.prototype.CheckQuoteChar = function (c) {
	var result = '"';
	var c2 = c.MemberwiseClone();
	if ((c2.GetValueOrDefault$0() === "'") && c2.HasValue) {
		result = c.Value;
	} else {
		var c3 = c.MemberwiseClone();
		if ((c3.GetValueOrDefault$0() !== '"') || !c3.HasValue) {
			throw JSIL.New(System.Runtime.Serialization.SerializationException, "_ctor$1", [this._s.GetDebugString($asm0A.System.SR2.GetString$2("ObjectDeserializer_StringNotQuoted"))]);
		}
	}
	return result;
};
$asm0A.System.Runtime.Serialization.Json.JavaScriptObjectDeserializer.prototype.DeserializeStringIntoDateTime = function () {
	var dateTime = new System.DateTime();
	var text = this.DeserializeString();
	var text2 = text.Substring$1(6, (text.length - 8));
	var dateTimeKind = System.DateTimeKind.Utc;
	var num = text2.IndexOf$1("+", 1);
	if (num === -1) {
		num = text2.IndexOf$1("-", 1);
	}
	if (num !== -1) {
		dateTimeKind = System.DateTimeKind.Local;
		text2 = text2.Substring$1(0, num);
	}
	try {
		var num2 = System.Int64.Parse(text2, (System.Globalization.NumberStyles.AllowLeadingSign | System.Globalization.NumberStyles.AllowLeadingWhite | System.Globalization.NumberStyles.AllowTrailingWhite | System.Globalization.NumberStyles.Integer), System.Globalization.CultureInfo.InvariantCulture);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.ArgumentException)) {
			var arg_54_0 = $exception;
			throw System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Xml.XmlExceptionHelper.CreateConversionException$1(text2, "Int64", arg_54_0));
		} else if (JSIL.CheckType($exception, System.FormatException)) {
			var arg_69_0 = $exception;
			throw System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Xml.XmlExceptionHelper.CreateConversionException$1(text2, "Int64", arg_69_0));
		} else if (JSIL.CheckType($exception, System.OverflowException)) {
			var arg_7E_0 = $exception;
			throw System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Xml.XmlExceptionHelper.CreateConversionException$1(text2, "Int64", arg_7E_0));
		} else {
			throw $exception;
		}
	}
	try {
		dateTime._ctor$2(((num2 * 10000) + $asm0A.System.Runtime.Serialization.Json.JsonGlobals.unixEpochTicks), System.DateTimeKind.Utc);
		switch (Number(dateTimeKind)) {
			case 0: 
				var result = System.DateTime.SpecifyKind(dateTime.ToLocalTime().MemberwiseClone(), System.DateTimeKind.Unspecified);
				return result;
			case 2: 
				result = dateTime.ToLocalTime();
				return result;
		}
		result = dateTime.MemberwiseClone();
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.ArgumentException)) {
			var arg_F6_0 = $exception;
			throw System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Xml.XmlExceptionHelper.CreateConversionException$1(text2, "DateTime", arg_F6_0));
		} else {
			throw $exception;
		}
	}
	return result;
};
$asm0A.System.Runtime.Serialization.Json.JavaScriptObjectDeserializer.IsNextElementArray = function (c) {
	var c2 = c;
	return ((c2.GetValueOrDefault$0() === "[") && c2.HasValue);
};
$asm0A.System.Runtime.Serialization.Json.JavaScriptObjectDeserializer.prototype.IsNextElementDateTime = function () {
	var text = this._s.MoveNext$1(8);
	if (text !== null) {
		this._s.MovePrev$1(8);
		return System.String.Equals$1(text, '"\\/Date(', System.StringComparison.Ordinal);
	}
	return false;
};
$asm0A.System.Runtime.Serialization.Json.JavaScriptObjectDeserializer.IsNextElementObject = function (c) {
	var c2 = c;
	return ((c2.GetValueOrDefault$0() === "{") && c2.HasValue);
};
$asm0A.System.Runtime.Serialization.Json.JavaScriptObjectDeserializer.IsNextElementString = function (c) {
	var c2 = c.MemberwiseClone();
	if (!((c2.GetValueOrDefault$0() === '"') && c2.HasValue)) {
		var c3 = c.MemberwiseClone();
		return ((c3.GetValueOrDefault$0() === "'") && c3.HasValue);
	}
	return true;
};
$asm0A.System.Runtime.Serialization.Json.JavaScriptObjectDeserializer.ParseJsonNumberAsDoubleOrDecimal = function (input) {
	var num = new JSIL.Variable(0), num2 = new JSIL.Variable(0);
	if (!(!System.Decimal.TryParse$1(input, (System.Globalization.NumberStyles.AllowDecimalPoint | System.Globalization.NumberStyles.AllowExponent | System.Globalization.NumberStyles.AllowLeadingSign | System.Globalization.NumberStyles.AllowLeadingWhite | System.Globalization.NumberStyles.AllowTrailingWhite | System.Globalization.NumberStyles.Float | System.Globalization.NumberStyles.Integer), System.Globalization.CultureInfo.InvariantCulture, /* ref */ num) || !System.Decimal.op_Inequality(num.value.MemberwiseClone(), 0))) {
		return num.value;
	}
	if (System.Double.TryParse$1(input, (System.Globalization.NumberStyles.AllowDecimalPoint | System.Globalization.NumberStyles.AllowExponent | System.Globalization.NumberStyles.AllowLeadingSign | System.Globalization.NumberStyles.AllowLeadingWhite | System.Globalization.NumberStyles.AllowTrailingWhite | System.Globalization.NumberStyles.Float | System.Globalization.NumberStyles.Integer), System.Globalization.CultureInfo.InvariantCulture, /* ref */ num2)) {
		return num2.value;
	}
	return input;
};
JSIL.OverloadedMethod(System.Runtime.Serialization.Json.JavaScriptObjectDeserializer.prototype, "_ctor", [
		["_ctor$0", [System.String]], 
		["_ctor$1", [System.String, System.Boolean]]
	]);
Object.defineProperty($asm0A.System.Runtime.Serialization.Json.JavaScriptObjectDeserializer, "DateTimePrefix", {
		"value": '"\\/Date('}
);
Object.defineProperty($asm0A.System.Runtime.Serialization.Json.JavaScriptObjectDeserializer, "DateTimePrefixLength", {
		"value": 8}
);
Object.defineProperty($asm0A.System.Runtime.Serialization.Json.JavaScriptObjectDeserializer, "DateTimeSuffix", {
		"value": ')\\/"'}
);
Object.defineProperty($asm0A.System.Runtime.Serialization.Json.JavaScriptObjectDeserializer, "DateTimeSuffixLength", {
		"value": 4}
);
$asm0A.System.Runtime.Serialization.Json.JavaScriptObjectDeserializer.prototype._s = null;
$asm0A.System.Runtime.Serialization.Json.JavaScriptObjectDeserializer.prototype._isDataContract = false;

$asm0A.System.Runtime.Serialization.Json.JavaScriptSerializer.prototype._ctor = function (stream) {
	System.Object.prototype._ctor.call(this);
	this.outputStream = stream;
};
$asm0A.System.Runtime.Serialization.Json.JavaScriptSerializer.prototype.SerializeObject = function (obj) {
	var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
	this.SerializeValue(obj, stringBuilder, 0, null);
	var bytes = System.Text.Encoding.UTF8.GetBytes$3(stringBuilder.toString());
	this.outputStream.Write(bytes, 0, bytes.length);
};
$asm0A.System.Runtime.Serialization.Json.JavaScriptSerializer.SerializeBoolean = function (o, sb) {
	if (o) {
		sb.Append$2("true");
		return;
	}
	sb.Append$2("false");
};
$asm0A.System.Runtime.Serialization.Json.JavaScriptSerializer.SerializeUri = function (uri, sb) {
	$asm0A.System.Runtime.Serialization.Json.JavaScriptSerializer.SerializeString(uri.GetComponents(System.UriComponents.SerializationInfoString, System.UriFormat.UriEscaped), sb);
};
$asm0A.System.Runtime.Serialization.Json.JavaScriptSerializer.SerializeGuid = function (guid, sb) {
	((sb.Append$2('"')).Append$2(guid.toString())).Append$2('"');
};
$asm0A.System.Runtime.Serialization.Json.JavaScriptSerializer.SerializeDateTime = function (value, sb) {
	sb.Append$2('"\\/Date(');
	var value2 = value.ToUniversalTime().MemberwiseClone();
	sb.Append$10(Math.floor((value2.Ticks - $asm0A.System.Runtime.Serialization.Json.JsonGlobals.unixEpochTicks) / 10000));
	switch (Number(value.Kind)) {
		case 0: 
		case 2: 
			var timeSpan = (System.DateTime.SpecifyKind(value.MemberwiseClone(), System.DateTimeKind.Utc)).Subtract$0(value2.MemberwiseClone()).MemberwiseClone();
			if (timeSpan.Ticks < 0) {
				sb.Append$2("-");
			} else {
				sb.Append$2("+");
			}
			var num = (Math.abs(timeSpan.Hours));
			sb.Append$2((num < 10) ? JSIL.ConcatString("0", num) : (num).toString());
			var num2 = (Math.abs(timeSpan.Minutes));
			sb.Append$2((num2 < 10) ? JSIL.ConcatString("0", num2) : (num2).toString());
			break;
	}
	sb.Append$2(')\\/"');
};
$asm0A.System.Runtime.Serialization.Json.JavaScriptSerializer.prototype.SerializeDictionary = function (o, sb, depth, objectsInUse) {
	sb.Append$7("{");
	var flag = true;
	var enumerator = o.IDictionary_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var dictionaryEntry = JSIL.Cast(enumerator.IEnumerator_Current, System.Collections.DictionaryEntry).MemberwiseClone();
			if (!flag) {
				sb.Append$7(",");
			}
			if (JSIL.TryCast(dictionaryEntry.Key, System.String) === null) {
				throw JSIL.New(System.Runtime.Serialization.SerializationException, "_ctor$1", [$asm0A.System.SR2.GetString$0("ObjectSerializer_DictionaryNotSupported", [JSIL.GetType(o).FullName])]);
			}
			$asm0A.System.Runtime.Serialization.Json.JavaScriptSerializer.SerializeString(JSIL.Cast(dictionaryEntry.Key, System.String), sb);
			sb.Append$7(":");
			this.SerializeValue(dictionaryEntry.Value, sb, depth, objectsInUse);
			flag = false;
		}
	} finally {
		var disposable = JSIL.TryCast(enumerator, System.IDisposable);
		if (disposable !== null) {
			disposable.IDisposable_Dispose();
		}
	}
	sb.Append$7("}");
};
$asm0A.System.Runtime.Serialization.Json.JavaScriptSerializer.prototype.SerializeEnumerable = function (enumerable, sb, depth, objectsInUse) {
	sb.Append$7("[");
	var flag = true;
	var enumerator = enumerable.IEnumerable_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator_Current;
			if (!flag) {
				sb.Append$7(",");
			}
			this.SerializeValue(current, sb, depth, objectsInUse);
			flag = false;
		}
	} finally {
		var disposable = JSIL.TryCast(enumerator, System.IDisposable);
		if (disposable !== null) {
			disposable.IDisposable_Dispose();
		}
	}
	sb.Append$7("]");
};
$asm0A.System.Runtime.Serialization.Json.JavaScriptSerializer.SerializeString = function (input, sb) {
	sb.Append$7('"');
	sb.Append$2($asm0A.System.Runtime.Serialization.Json.JavaScriptString.QuoteString(input));
	sb.Append$7('"');
};
$asm0A.System.Runtime.Serialization.Json.JavaScriptSerializer.prototype.SerializeValue = function (o, sb, depth, objectsInUse) {
	this.SerializeValueInternal(o, sb, depth, objectsInUse);
};
$asm0A.System.Runtime.Serialization.Json.JavaScriptSerializer.prototype.SerializeValueInternal = function (o, sb, depth, objectsInUse) {
	if (!((o !== null) && !System.DBNull.Value.Equals(o))) {
		sb.Append$2("null");
		return;
	}
	var text = JSIL.TryCast(o, System.String);
	if (text !== null) {
		$asm0A.System.Runtime.Serialization.Json.JavaScriptSerializer.SerializeString(text, sb);
		return;
	}
	if (JSIL.TryCast(o, System.Char) !== 0) {
		$asm0A.System.Runtime.Serialization.Json.JavaScriptSerializer.SerializeString(System.Xml.XmlConvert.ToString$1(String.fromCharCode(o)), sb);
		return;
	}
	if (JSIL.TryCast(o, System.Boolean)) {
		$asm0A.System.Runtime.Serialization.Json.JavaScriptSerializer.SerializeBoolean(JSIL.Cast(o, System.Boolean), sb);
		return;
	}
	if (JSIL.TryCast(o, System.DateTime) !== new System.DateTime()) {
		$asm0A.System.Runtime.Serialization.Json.JavaScriptSerializer.SerializeDateTime(JSIL.Cast(o, System.DateTime).MemberwiseClone(), sb);
		return;
	}
	if (JSIL.TryCast(o, System.Guid) !== new System.Guid()) {
		$asm0A.System.Runtime.Serialization.Json.JavaScriptSerializer.SerializeGuid(JSIL.Cast(o, System.Guid).MemberwiseClone(), sb);
		return;
	}
	var uri = JSIL.TryCast(o, System.Uri);
	if (System.Uri.op_Inequality(uri, null)) {
		$asm0A.System.Runtime.Serialization.Json.JavaScriptSerializer.SerializeUri(uri, sb);
		return;
	}
	if (JSIL.TryCast(o, System.Double) !== 0) {
		var d = JSIL.Cast(o, System.Double);
		if (!System.Double.IsInfinity(d)) {
			sb.Append$2((d).toString());
			return;
		}
		if (System.Double.IsNegativeInfinity(d)) {
			sb.Append$2("-INF");
			return;
		}
		sb.Append$2("INF");
		return;
	} else if (JSIL.TryCast(o, System.Single) !== 0) {
		var f = JSIL.Cast(o, System.Single);
		if (!System.Single.IsInfinity(f)) {
			sb.Append$2((f).toString());
			return;
		}
		if (System.Single.IsNegativeInfinity(f)) {
			sb.Append$2("-INF");
			return;
		}
		sb.Append$2("INF");
		return;
	} else if (!(!JSIL.GetType(o).IsPrimitive && (JSIL.TryCast(o, System.Decimal) === 0))) {
		var convertible = JSIL.TryCast(o, System.IConvertible);
		if (convertible !== null) {
			sb.Append$2(convertible.IConvertible_ToString(System.Globalization.CultureInfo.InvariantCulture));
			return;
		}
		sb.Append$2(o.toString());
		return;
	} else {
		if ((JSIL.GetType(o)) === System.Object) {
			sb.Append$2("{}");
			return;
		}
		var type = (JSIL.GetType(o));
		if (type.IsEnum) {
			sb.Append$9(JSIL.Cast(o, System.Int32));
			return;
		}
		try {
			if (objectsInUse === null) {
				objectsInUse = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.Object, System.Boolean), "_ctor$2", [new $asm0A.System.Runtime.Serialization.Json.JavaScriptSerializer.ReferenceComparer()]);
			} else if (objectsInUse.ContainsKey(o)) {
				throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm0A.System.SR2.GetString$0("JsonCircularReferenceDetected", [type.FullName])]);
			}
			objectsInUse.Add(o, true);
			var dictionary = JSIL.TryCast(o, System.Collections.IDictionary);
			if (dictionary !== null) {
				this.SerializeDictionary(dictionary, sb, depth, objectsInUse);
			} else {
				var enumerable = JSIL.TryCast(o, System.Collections.IEnumerable);
				if (enumerable !== null) {
					this.SerializeEnumerable(enumerable, sb, depth, objectsInUse);
				}
			}
		} finally {
			if (objectsInUse !== null) {
				objectsInUse.Remove(o);
			}
		}
		return;
	}
};
$asm0A.System.Runtime.Serialization.Json.JavaScriptSerializer.prototype.outputStream = null;

$asm0A.System.Runtime.Serialization.Json.JavaScriptSerializer.ReferenceComparer.prototype.IEqualityComparer$b1_Equals = function (x, y) {
	return (x === y);
};
$asm0A.System.Runtime.Serialization.Json.JavaScriptSerializer.ReferenceComparer.prototype.IEqualityComparer$b1_GetHashCode = function (obj) {
	return obj.GetHashCode();
};
$asm0A.System.Runtime.Serialization.Json.JavaScriptSerializer.ReferenceComparer.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};

$asm0A.System.Runtime.Serialization.Json.JavaScriptDeserializer.prototype.DeserializeObject = function () {
	return this.deserializer.BasicDeserialize();
};
$asm0A.System.Runtime.Serialization.Json.JavaScriptDeserializer.prototype._ctor = function (stream) {
	System.Object.prototype._ctor.call(this);
	if (stream === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["stream"]);
	}
	var stream2 = stream;
	if (!stream.CanSeek) {
		stream2 = new $asm0A.System.Runtime.Serialization.Json.JavaScriptDeserializer.BufferedStreamReader(stream);
	}
	var encoding = $asm0A.System.Runtime.Serialization.Json.JavaScriptDeserializer.DetectEncoding(stream2.ReadByte(), stream2.ReadByte());
	stream2.Position = 0;
	var input = (JSIL.New(System.IO.StreamReader, "_ctor$4", [stream2, encoding, true])).ReadToEnd();
	this.deserializer = JSIL.New($asm0A.System.Runtime.Serialization.Json.JavaScriptObjectDeserializer, "_ctor$0", [input]);
};
$asm0A.System.Runtime.Serialization.Json.JavaScriptDeserializer.DetectEncoding = function (b1, b2) {
	if (!((b1 !== -1) && (b2 !== -1))) {
		return $asm0A.System.Runtime.Serialization.Json.JsonGlobals.ValidatingUTF8;
	}
	if (!((b1 !== 0) || (b2 === 0))) {
		return $asm0A.System.Runtime.Serialization.Json.JsonGlobals.ValidatingBEUTF16;
	}
	if (!((b1 === 0) || (b2 !== 0))) {
		return $asm0A.System.Runtime.Serialization.Json.JsonGlobals.ValidatingUTF16;
	}
	if (!((b1 !== 0) || (b2 !== 0))) {
		throw System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Xml.XmlException, "_ctor$1", [$asm0A.System.SR2.GetString$2("JsonInvalidBytes")]));
	}
	return $asm0A.System.Runtime.Serialization.Json.JsonGlobals.ValidatingUTF8;
};
Object.defineProperty($asm0A.System.Runtime.Serialization.Json.JavaScriptDeserializer, "s_jsonBeta2Prefix", {
		"value": '{"d":'}
);
$asm0A.System.Runtime.Serialization.Json.JavaScriptDeserializer.prototype.deserializer = null;

$asm0A.System.Runtime.Serialization.Json.JavaScriptDeserializer.BufferedStreamReader.prototype._ctor = function (stream) {
	this.bomBuffer = JSIL.Array.New(System.Byte, 2);
	System.IO.Stream.prototype._ctor.call(this);
	this.internalStream = stream;
	stream.Read(this.bomBuffer, 0, 2);
};
$asm0A.System.Runtime.Serialization.Json.JavaScriptDeserializer.BufferedStreamReader.prototype.set_Position = function (value) {
	if (value < 2) {
		this.bufferedBytesIndex = value;
		return;
	}
	this.internalStream.Position = value;
};
$asm0A.System.Runtime.Serialization.Json.JavaScriptDeserializer.BufferedStreamReader.prototype.get_Position = function () {
	return this.internalStream.Position;
};
$asm0A.System.Runtime.Serialization.Json.JavaScriptDeserializer.BufferedStreamReader.prototype.Read = function (buffer, offset, count) {
	var num = 0;
__loop0__: 
	while ((this.bufferedBytesIndex < 2) && (count > 0)) {
		++num;
		buffer[offset++] = this.bomBuffer[this.bufferedBytesIndex++];
		--count;
	}
	if (count <= 0) {
		return num;
	}
	return (this.internalStream.Read(buffer, offset, count) + num);
};
$asm0A.System.Runtime.Serialization.Json.JavaScriptDeserializer.BufferedStreamReader.prototype.ReadByte = function () {
	if (this.bufferedBytesIndex >= 2) {
		return this.internalStream.ReadByte();
	}
	return this.bomBuffer[this.bufferedBytesIndex++];
};
$asm0A.System.Runtime.Serialization.Json.JavaScriptDeserializer.BufferedStreamReader.prototype.get_CanRead = function () {
	return true;
};
$asm0A.System.Runtime.Serialization.Json.JavaScriptDeserializer.BufferedStreamReader.prototype.get_CanSeek = function () {
	return false;
};
$asm0A.System.Runtime.Serialization.Json.JavaScriptDeserializer.BufferedStreamReader.prototype.get_CanWrite = function () {
	return false;
};
$asm0A.System.Runtime.Serialization.Json.JavaScriptDeserializer.BufferedStreamReader.prototype.Flush = function () {
};
$asm0A.System.Runtime.Serialization.Json.JavaScriptDeserializer.BufferedStreamReader.prototype.get_Length = function () {
	return this.internalStream.Length;
};
$asm0A.System.Runtime.Serialization.Json.JavaScriptDeserializer.BufferedStreamReader.prototype.Seek = function (offset, origin) {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm0A.System.Runtime.Serialization.Json.JavaScriptDeserializer.BufferedStreamReader.prototype.SetLength = function (value) {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm0A.System.Runtime.Serialization.Json.JavaScriptDeserializer.BufferedStreamReader.prototype.Write = function (buffer, offset, count) {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
JSIL.MakeProperty($asm0A.System.Runtime.Serialization.Json.JavaScriptDeserializer.BufferedStreamReader.prototype, "Position", 
	$asm0A.System.Runtime.Serialization.Json.JavaScriptDeserializer.BufferedStreamReader.prototype.get_Position, $asm0A.System.Runtime.Serialization.Json.JavaScriptDeserializer.BufferedStreamReader.prototype.set_Position);
JSIL.MakeProperty($asm0A.System.Runtime.Serialization.Json.JavaScriptDeserializer.BufferedStreamReader.prototype, "CanRead", 
	$asm0A.System.Runtime.Serialization.Json.JavaScriptDeserializer.BufferedStreamReader.prototype.get_CanRead, null);
JSIL.MakeProperty($asm0A.System.Runtime.Serialization.Json.JavaScriptDeserializer.BufferedStreamReader.prototype, "CanSeek", 
	$asm0A.System.Runtime.Serialization.Json.JavaScriptDeserializer.BufferedStreamReader.prototype.get_CanSeek, null);
JSIL.MakeProperty($asm0A.System.Runtime.Serialization.Json.JavaScriptDeserializer.BufferedStreamReader.prototype, "CanWrite", 
	$asm0A.System.Runtime.Serialization.Json.JavaScriptDeserializer.BufferedStreamReader.prototype.get_CanWrite, null);
JSIL.MakeProperty($asm0A.System.Runtime.Serialization.Json.JavaScriptDeserializer.BufferedStreamReader.prototype, "Length", 
	$asm0A.System.Runtime.Serialization.Json.JavaScriptDeserializer.BufferedStreamReader.prototype.get_Length, null);
$asm0A.System.Runtime.Serialization.Json.JavaScriptDeserializer.BufferedStreamReader.prototype.bomBuffer = null;
$asm0A.System.Runtime.Serialization.Json.JavaScriptDeserializer.BufferedStreamReader.prototype.bufferedBytesIndex = 0;
$asm0A.System.Runtime.Serialization.Json.JavaScriptDeserializer.BufferedStreamReader.prototype.internalStream = null;

$asm0A.System.Runtime.Serialization.Json.JavaScriptString.prototype._ctor = function (s) {
	System.Object.prototype._ctor.call(this);
	this._s = s;
};
$asm0A.System.Runtime.Serialization.Json.JavaScriptString.prototype.GetNextNonEmptyChar = function () {
__loop0__: 
	while (this._s.length > this._index) {
		var c = (this._s[this._index++]);
		if (!System.Char.IsWhiteSpace$0(c)) {
			return new (System.Nullable$b1.Of(System.Char)) (c);
		}
	}
	return new (System.Nullable$b1.Of(System.Char)) ();
};
$asm0A.System.Runtime.Serialization.Json.JavaScriptString.prototype.MoveNext$0 = function () {
	if (this._s.length > this._index) {
		return new (System.Nullable$b1.Of(System.Char)) (this._s[this._index++]);
	}
	return new (System.Nullable$b1.Of(System.Char)) ();
};
$asm0A.System.Runtime.Serialization.Json.JavaScriptString.prototype.MoveNext$1 = function (count) {
	if (this._s.length >= (this._index + count)) {
		var result = this._s.Substring$1(this._index, count);
		this._index += count;
		return result;
	}
	return null;
};
$asm0A.System.Runtime.Serialization.Json.JavaScriptString.prototype.MovePrev$0 = function () {
	if (this._index > 0) {
		--this._index;
	}
};
$asm0A.System.Runtime.Serialization.Json.JavaScriptString.prototype.MovePrev$1 = function (count) {
__loop0__: 
	for (; (this._index > 0) && (count > 0); --count) {
		--this._index;
	}
};
$asm0A.System.Runtime.Serialization.Json.JavaScriptString.AppendCharAsUnicode = function (builder, c) {
	builder.Append$2("\\u");
	builder.AppendFormat$1(System.Globalization.CultureInfo.InvariantCulture, "{0:x4}", [c.charCodeAt(0)]);
};
$asm0A.System.Runtime.Serialization.Json.JavaScriptString.QuoteString = function (value) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				var stringBuilder = null;
				if (System.String.IsNullOrEmpty(value)) {
					return System.String.Empty;
				}
				var startIndex = 0;
				var num = 0;
			__loop0__: 
				for (var i = 0; i < value.length; ) {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								var c = (value[i]);
								if (!((c !== "\r") && 
										(c !== "\t") && 
										(c !== '"') && 
										(c !== "'") && 
										(c !== "/") && 
										(c !== "\\") && 
										(c !== "\n") && 
										(c !== "\x08") && 
										(c !== "\x0c") && (c >= " "))) {
									if (stringBuilder === null) {
										stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$1", [(value.length + 5)]);
									}
									if (num > 0) {
										stringBuilder.Append$3(value, startIndex, num);
									}
									startIndex = (i + 1);
									num = 0;
								}
								var c2 = c;
								if (c2 <= '"') {
									switch (c2) {
										case "\x08": 
											stringBuilder.Append$2("\\b");
											break;
										case "\t": 
											stringBuilder.Append$2("\\t");
											break;
										case "\n": 
											stringBuilder.Append$2("\\n");
											break;
										case "\x0b": 
											__label1__ = "IL_155";
											continue __step1__;
										case "\x0c": 
											stringBuilder.Append$2("\\f");
											break;
										case "\r": 
											stringBuilder.Append$2("\\r");
											break;
										default: 
											if (c2 !== '"') {
												__label1__ = "IL_155";
												continue __step1__;
											}
											stringBuilder.Append$2('\\"');
											break;
									}
								} else if (c2 !== "'") {
									if (c2 !== "/") {
										if (c2 !== "\\") {
											__label1__ = "IL_155";
											continue __step1__;
										}
										stringBuilder.Append$2("\\\\");
									} else {
										stringBuilder.Append$2("\\/");
									}
								} else {
									stringBuilder.Append$2("'");
								}
								__label1__ = "IL_169";
								continue __step1__;
								break;
							case "IL_169":
								++i;
								continue __loop0__;
								__label1__ = "IL_155";
								continue __step1__;
								break;
							case "IL_155":
								if (c < " ") {
									$asm0A.System.Runtime.Serialization.Json.JavaScriptString.AppendCharAsUnicode(stringBuilder, c);
									__label1__ = "IL_169";
									continue __step1__;
								}
								++num;
								__label1__ = "IL_169";
								continue __step1__;
								break __step1__;
						}
					}
				}
				if (stringBuilder === null) {
					return value;
				}
				if (num > 0) {
					stringBuilder.Append$3(value, startIndex, num);
				}
				return stringBuilder.toString();
				break __step0__;
		}
	}
};
$asm0A.System.Runtime.Serialization.Json.JavaScriptString.prototype.toString = function () {
	if (this._s.length > this._index) {
		return this._s.Substring$0(this._index);
	}
	return System.String.Empty;
};
$asm0A.System.Runtime.Serialization.Json.JavaScriptString.prototype.GetDebugString = function (message) {
	return JSIL.ConcatString.apply(null, [message, " (", this._index, "): ", this._s]);
};
JSIL.OverloadedMethod(System.Runtime.Serialization.Json.JavaScriptString.prototype, "MoveNext", [
		["MoveNext$0", []], 
		["MoveNext$1", [System.Int32]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.Json.JavaScriptString.prototype, "MovePrev", [
		["MovePrev$0", []], 
		["MovePrev$1", [System.Int32]]
	]);
$asm0A.System.Runtime.Serialization.Json.JavaScriptString.prototype._s = null;
$asm0A.System.Runtime.Serialization.Json.JavaScriptString.prototype._index = 0;

JSIL.QueueInitializer(function () {
		$asm0A.System.Runtime.Serialization.Json.XmlObjectSerializerWriteContextComplexJson.prototype.__StructFields__ = [
			["byValObjectsInScope", System.Runtime.Serialization.ObjectReferenceStack]
		];
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm0A.System.Runtime.Serialization.Json.JavaScriptSerializer.ReferenceComparer, [
				"System.Collections.Generic.IEqualityComparer$b1"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.SealTypes($asm0A, "System", 
			"SR2"
		);
		JSIL.SealTypes($asm0A, "System.Runtime.Serialization.Json", 
			"JsonGlobals"
		);
	});
