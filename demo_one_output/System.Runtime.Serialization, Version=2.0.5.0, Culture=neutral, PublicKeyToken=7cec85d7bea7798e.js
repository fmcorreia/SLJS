/* Generated by JSIL v0.2 build 16343. See http://jsil.org/ for more information. */ 
var $asm09 = JSIL.DeclareAssembly("System.Runtime.Serialization, Version=2.0.5.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e");
JSIL.DeclareNamespace("System");
JSIL.DeclareNamespace("System.Runtime");
JSIL.DeclareNamespace("System.Runtime.Serialization");
JSIL.MakeClass("System.ComponentModel.DescriptionAttribute", "System.Runtime.Serialization.SRDescriptionAttribute", false);

JSIL.MakeClass("System.ComponentModel.CategoryAttribute", "System.Runtime.Serialization.SRCategoryAttribute", false);

JSIL.MakeClass("System.Object", "System.Runtime.Serialization.SR", false);

JSIL.MakeClass("System.Attribute", "System.Runtime.Serialization.DataContractAttribute", true);

JSIL.MakeClass("System.Attribute", "System.Runtime.Serialization.DataMemberAttribute", true);

JSIL.MakeClass("System.Attribute", "System.Runtime.Serialization.EnumMemberAttribute", true);

JSIL.MakeClass("System.Attribute", "System.Runtime.Serialization.CollectionDataContractAttribute", true);

JSIL.MakeClass("System.Exception", "System.Runtime.Serialization.InvalidDataContractException", true);

JSIL.MakeClass("System.Attribute", "System.Runtime.Serialization.KnownTypeAttribute", true);

JSIL.MakeClass("System.Attribute", "System.Runtime.Serialization.ContractNamespaceAttribute", true);

JSIL.MakeClass("System.Object", "System.Runtime.Serialization.Attributes", false);

JSIL.MakeClass("System.Object", "System.Runtime.Serialization.CodeGenerator", false);
JSIL.MakeEnum(
	"System.Runtime.Serialization.CodeGenerator/CodeGenTrace", {
		None: 0, 
		Save: 1, 
		Tron: 2
	}, false
);


JSIL.MakeClass("System.Object", "System.Runtime.Serialization.ArgBuilder", false);

JSIL.MakeClass("System.Object", "System.Runtime.Serialization.ForState", false);

JSIL.MakeEnum(
	"System.Runtime.Serialization.Cmp", {
		LessThan: 0, 
		EqualTo: 1, 
		LessThanOrEqualTo: 2, 
		GreaterThan: 3, 
		NotEqualTo: 4, 
		GreaterThanOrEqualTo: 5
	}, false
);

JSIL.MakeClass("System.Object", "System.Runtime.Serialization.IfState", false);

JSIL.MakeClass("System.Object", "System.Runtime.Serialization.SwitchState", false);

JSIL.MakeClass("System.Object", "System.Runtime.Serialization.DataContract", false);
JSIL.MakeClass("System.Object", "System.Runtime.Serialization.DataContract/DataContractCriticalHelper", false);


JSIL.MakeClass("System.Runtime.Serialization.DataContract", "System.Runtime.Serialization.ClassDataContract", false);
JSIL.MakeClass("System.Runtime.Serialization.DataContract/DataContractCriticalHelper", "System.Runtime.Serialization.ClassDataContract/ClassDataContractCriticalHelper", false);
JSIL.MakeStruct("System.Runtime.Serialization.ClassDataContract/ClassDataContractCriticalHelper/Member", false);

JSIL.MakeClass("System.Object", "System.Runtime.Serialization.ClassDataContract/ClassDataContractCriticalHelper/DataMemberConflictComparer", false);


JSIL.MakeClass("System.Object", "System.Runtime.Serialization.ClassDataContract/DataMemberComparer", false);


JSIL.MakeClass("System.Object", "System.Runtime.Serialization.KeyValuePairAdapter$b2", false, ["K", "T"]);

JSIL.MakeStruct("System.Runtime.Serialization.KeyValue$b2", false, ["K", "V"]);

JSIL.MakeEnum(
	"System.Runtime.Serialization.CollectionKind", {
		None: 0, 
		GenericDictionary: 1, 
		Dictionary: 2, 
		GenericList: 3, 
		GenericCollection: 4, 
		List: 5, 
		GenericEnumerable: 6, 
		Collection: 7, 
		Enumerable: 8, 
		Array: 9
	}, false
);

JSIL.MakeClass("System.Runtime.Serialization.DataContract", "System.Runtime.Serialization.CollectionDataContract", false);
JSIL.MakeClass("System.Runtime.Serialization.DataContract/DataContractCriticalHelper", "System.Runtime.Serialization.CollectionDataContract/CollectionDataContractCriticalHelper", false);

JSIL.MakeClass("System.Object", "System.Runtime.Serialization.CollectionDataContract/DictionaryEnumerator", false);

JSIL.MakeClass("System.Object", "System.Runtime.Serialization.CollectionDataContract/GenericDictionaryEnumerator$b2", false, ["K", "V"]);


JSIL.MakeInterface(
	"System.Runtime.Serialization.IGenericNameProvider", [], {
		"GetParameterCount": Function, 
		"GetNestedParameterCounts": Function, 
		"GetParameterName": Function, 
		"GetNamespaces": Function, 
		"GetGenericTypeName": Function, 
		"get_ParametersFromBuiltInNamespaces": Function, 
		"ParametersFromBuiltInNamespaces": Property
	});

JSIL.MakeClass("System.Object", "System.Runtime.Serialization.GenericNameProvider", false);

JSIL.MakeClass("System.Object", "System.Runtime.Serialization.TypeHandleRefEqualityComparer", false);

JSIL.MakeClass("System.Object", "System.Runtime.Serialization.TypeHandleRef", false);

JSIL.MakeClass("System.Object", "System.Runtime.Serialization.IntRef", false);

JSIL.MakeClass("System.Object", "System.Runtime.Serialization.DataContractSet", false);

JSIL.MakeStruct("System.Runtime.Serialization.DateTimeOffsetAdapter", false);

JSIL.MakeStaticClass("System.Runtime.Serialization.Fx", false);

JSIL.MakeClass("System.Object", "System.Runtime.Serialization.DiagnosticUtility", false);
JSIL.MakeStaticClass("System.Runtime.Serialization.DiagnosticUtility/ExceptionUtility", false);


JSIL.DeclareNamespace("System.ServiceModel");
JSIL.MakeClass("System.Runtime.Serialization.DiagnosticUtility", "System.ServiceModel.DiagnosticUtility", false);

JSIL.MakeStaticClass("System.Runtime.Serialization.DictionaryGlobals", false);

JSIL.MakeClass("System.Object", "System.Runtime.Serialization.XmlObjectSerializer", true);

JSIL.MakeClass("System.Runtime.Serialization.XmlObjectSerializer", "System.Runtime.Serialization.DataContractSerializer", true);

JSIL.MakeClass("System.Object", "System.Runtime.Serialization.DataMember", false);
JSIL.MakeClass("System.Object", "System.Runtime.Serialization.DataMember/CriticalHelper", false);


JSIL.MakeClass("System.Runtime.Serialization.DataContract", "System.Runtime.Serialization.EnumDataContract", false);
JSIL.MakeClass("System.Runtime.Serialization.DataContract/DataContractCriticalHelper", "System.Runtime.Serialization.EnumDataContract/EnumDataContractCriticalHelper", false);


JSIL.MakeStaticClass("System.Runtime.Serialization.Globals", false);

JSIL.MakeClass("System.Object", "System.Runtime.Serialization.HybridObjectCache", false);

JSIL.MakeClass("System.Attribute", "System.Runtime.Serialization.IgnoreDataMemberAttribute", true);

JSIL.MakeClass("System.Object", "System.Runtime.Serialization.ObjectToIdCache", false);

JSIL.MakeStruct("System.Runtime.Serialization.ObjectReferenceStack", false);

JSIL.MakeClass("System.Runtime.Serialization.DataContract", "System.Runtime.Serialization.PrimitiveDataContract", false);
JSIL.MakeClass("System.Runtime.Serialization.DataContract/DataContractCriticalHelper", "System.Runtime.Serialization.PrimitiveDataContract/PrimitiveDataContractCriticalHelper", false);


JSIL.MakeClass("System.Runtime.Serialization.PrimitiveDataContract", "System.Runtime.Serialization.CharDataContract", false);

JSIL.MakeClass("System.Runtime.Serialization.PrimitiveDataContract", "System.Runtime.Serialization.BooleanDataContract", false);

JSIL.MakeClass("System.Runtime.Serialization.PrimitiveDataContract", "System.Runtime.Serialization.SignedByteDataContract", false);

JSIL.MakeClass("System.Runtime.Serialization.PrimitiveDataContract", "System.Runtime.Serialization.UnsignedByteDataContract", false);

JSIL.MakeClass("System.Runtime.Serialization.PrimitiveDataContract", "System.Runtime.Serialization.ShortDataContract", false);

JSIL.MakeClass("System.Runtime.Serialization.PrimitiveDataContract", "System.Runtime.Serialization.UnsignedShortDataContract", false);

JSIL.MakeClass("System.Runtime.Serialization.PrimitiveDataContract", "System.Runtime.Serialization.IntDataContract", false);

JSIL.MakeClass("System.Runtime.Serialization.PrimitiveDataContract", "System.Runtime.Serialization.UnsignedIntDataContract", false);

JSIL.MakeClass("System.Runtime.Serialization.PrimitiveDataContract", "System.Runtime.Serialization.LongDataContract", false);

JSIL.MakeClass("System.Runtime.Serialization.PrimitiveDataContract", "System.Runtime.Serialization.UnsignedLongDataContract", false);

JSIL.MakeClass("System.Runtime.Serialization.PrimitiveDataContract", "System.Runtime.Serialization.FloatDataContract", false);

JSIL.MakeClass("System.Runtime.Serialization.PrimitiveDataContract", "System.Runtime.Serialization.DoubleDataContract", false);

JSIL.MakeClass("System.Runtime.Serialization.PrimitiveDataContract", "System.Runtime.Serialization.DecimalDataContract", false);

JSIL.MakeClass("System.Runtime.Serialization.PrimitiveDataContract", "System.Runtime.Serialization.DateTimeDataContract", false);

JSIL.MakeClass("System.Runtime.Serialization.PrimitiveDataContract", "System.Runtime.Serialization.StringDataContract", false);

JSIL.MakeClass("System.Runtime.Serialization.StringDataContract", "System.Runtime.Serialization.HexBinaryDataContract", false);

JSIL.MakeClass("System.Runtime.Serialization.PrimitiveDataContract", "System.Runtime.Serialization.ByteArrayDataContract", false);

JSIL.MakeClass("System.Runtime.Serialization.PrimitiveDataContract", "System.Runtime.Serialization.ObjectDataContract", false);

JSIL.MakeClass("System.Runtime.Serialization.PrimitiveDataContract", "System.Runtime.Serialization.TimeSpanDataContract", false);

JSIL.MakeClass("System.Runtime.Serialization.PrimitiveDataContract", "System.Runtime.Serialization.GuidDataContract", false);

JSIL.MakeClass("System.Runtime.Serialization.PrimitiveDataContract", "System.Runtime.Serialization.UriDataContract", false);

JSIL.MakeClass("System.Runtime.Serialization.PrimitiveDataContract", "System.Runtime.Serialization.QNameDataContract", false);

JSIL.MakeClass("System.Object", "System.Runtime.Serialization.SchemaExporter", false);

JSIL.MakeStruct("System.Runtime.Serialization.ScopedKnownTypes", false);

JSIL.MakeDelegate("System.Runtime.Serialization.CreateXmlSerializableDelegate");

JSIL.MakeClass("System.Runtime.Serialization.DataContract", "System.Runtime.Serialization.XmlDataContract", false);
JSIL.MakeClass("System.Runtime.Serialization.DataContract/DataContractCriticalHelper", "System.Runtime.Serialization.XmlDataContract/XmlDataContractCriticalHelper", false);


JSIL.MakeStaticClass("System.Runtime.Serialization.XmlFormatGeneratorStatics", false);

JSIL.MakeDelegate("System.Runtime.Serialization.XmlFormatClassReaderDelegate");

JSIL.MakeDelegate("System.Runtime.Serialization.XmlFormatCollectionReaderDelegate");

JSIL.MakeDelegate("System.Runtime.Serialization.XmlFormatGetOnlyCollectionReaderDelegate");

JSIL.MakeClass("System.Object", "System.Runtime.Serialization.XmlFormatReaderGenerator", false);
JSIL.MakeClass("System.Object", "System.Runtime.Serialization.XmlFormatReaderGenerator/CriticalHelper", false);


JSIL.MakeDelegate("System.Runtime.Serialization.XmlFormatClassWriterDelegate");

JSIL.MakeDelegate("System.Runtime.Serialization.XmlFormatCollectionWriterDelegate");

JSIL.MakeClass("System.Object", "System.Runtime.Serialization.XmlFormatWriterGenerator", false);
JSIL.MakeClass("System.Object", "System.Runtime.Serialization.XmlFormatWriterGenerator/CriticalHelper", false);


JSIL.MakeClass("System.Object", "System.Runtime.Serialization.XmlObjectSerializerContext", false);

JSIL.MakeClass("System.Runtime.Serialization.XmlObjectSerializerContext", "System.Runtime.Serialization.XmlObjectSerializerWriteContext", false);

JSIL.MakeClass("System.Runtime.Serialization.XmlObjectSerializerContext", "System.Runtime.Serialization.XmlObjectSerializerReadContext", false);

JSIL.MakeClass("System.Object", "System.Runtime.Serialization.XmlReaderDelegator", false);

JSIL.MakeClass("System.Xml.XmlReader", "System.Runtime.Serialization.XmlSerializableReader", false);

JSIL.MakeClass("System.Xml.XmlWriter", "System.Runtime.Serialization.XmlSerializableWriter", false);

JSIL.MakeClass("System.Object", "System.Runtime.Serialization.XmlWriterDelegator", false);

JSIL.MakeEnum(
	"System.Runtime.Serialization.SerializationMode", {
		SharedContract: 0
	}, false
);

JSIL.MakeClass("System.Runtime.Serialization.DataContract", "System.Runtime.Serialization.SpecialTypeDataContract", false);
JSIL.MakeClass("System.Runtime.Serialization.DataContract/DataContractCriticalHelper", "System.Runtime.Serialization.SpecialTypeDataContract/SpecialTypeDataContractCriticalHelper", false);


JSIL.DeclareNamespace("System.Xml");
JSIL.MakeClass("System.Object", "System.Xml.ArrayHelper$b2", false, ["TArgument", "TArray"]);

JSIL.MakeClass(new JSIL.TypeRef($asm09, "System.Xml.ArrayHelper$b2", ["System.String", "System.Boolean"]), "System.Xml.BooleanArrayHelperWithString", false);

JSIL.MakeClass(new JSIL.TypeRef($asm09, "System.Xml.ArrayHelper$b2", ["System.Xml.XmlDictionaryString", "System.Boolean"]), "System.Xml.BooleanArrayHelperWithDictionaryString", false);

JSIL.MakeClass(new JSIL.TypeRef($asm09, "System.Xml.ArrayHelper$b2", ["System.String", "System.Int16"]), "System.Xml.Int16ArrayHelperWithString", false);

JSIL.MakeClass(new JSIL.TypeRef($asm09, "System.Xml.ArrayHelper$b2", ["System.Xml.XmlDictionaryString", "System.Int16"]), "System.Xml.Int16ArrayHelperWithDictionaryString", false);

JSIL.MakeClass(new JSIL.TypeRef($asm09, "System.Xml.ArrayHelper$b2", ["System.String", "System.Int32"]), "System.Xml.Int32ArrayHelperWithString", false);

JSIL.MakeClass(new JSIL.TypeRef($asm09, "System.Xml.ArrayHelper$b2", ["System.Xml.XmlDictionaryString", "System.Int32"]), "System.Xml.Int32ArrayHelperWithDictionaryString", false);

JSIL.MakeClass(new JSIL.TypeRef($asm09, "System.Xml.ArrayHelper$b2", ["System.String", "System.Int64"]), "System.Xml.Int64ArrayHelperWithString", false);

JSIL.MakeClass(new JSIL.TypeRef($asm09, "System.Xml.ArrayHelper$b2", ["System.Xml.XmlDictionaryString", "System.Int64"]), "System.Xml.Int64ArrayHelperWithDictionaryString", false);

JSIL.MakeClass(new JSIL.TypeRef($asm09, "System.Xml.ArrayHelper$b2", ["System.String", "System.Single"]), "System.Xml.SingleArrayHelperWithString", false);

JSIL.MakeClass(new JSIL.TypeRef($asm09, "System.Xml.ArrayHelper$b2", ["System.Xml.XmlDictionaryString", "System.Single"]), "System.Xml.SingleArrayHelperWithDictionaryString", false);

JSIL.MakeClass(new JSIL.TypeRef($asm09, "System.Xml.ArrayHelper$b2", ["System.String", "System.Double"]), "System.Xml.DoubleArrayHelperWithString", false);

JSIL.MakeClass(new JSIL.TypeRef($asm09, "System.Xml.ArrayHelper$b2", ["System.Xml.XmlDictionaryString", "System.Double"]), "System.Xml.DoubleArrayHelperWithDictionaryString", false);

JSIL.MakeClass(new JSIL.TypeRef($asm09, "System.Xml.ArrayHelper$b2", ["System.String", "System.Decimal"]), "System.Xml.DecimalArrayHelperWithString", false);

JSIL.MakeClass(new JSIL.TypeRef($asm09, "System.Xml.ArrayHelper$b2", ["System.Xml.XmlDictionaryString", "System.Decimal"]), "System.Xml.DecimalArrayHelperWithDictionaryString", false);

JSIL.MakeClass(new JSIL.TypeRef($asm09, "System.Xml.ArrayHelper$b2", ["System.String", "System.DateTime"]), "System.Xml.DateTimeArrayHelperWithString", false);

JSIL.MakeClass(new JSIL.TypeRef($asm09, "System.Xml.ArrayHelper$b2", ["System.Xml.XmlDictionaryString", "System.DateTime"]), "System.Xml.DateTimeArrayHelperWithDictionaryString", false);

JSIL.MakeClass(new JSIL.TypeRef($asm09, "System.Xml.ArrayHelper$b2", ["System.String", "System.Guid"]), "System.Xml.GuidArrayHelperWithString", false);

JSIL.MakeClass(new JSIL.TypeRef($asm09, "System.Xml.ArrayHelper$b2", ["System.Xml.XmlDictionaryString", "System.Guid"]), "System.Xml.GuidArrayHelperWithDictionaryString", false);

JSIL.MakeClass(new JSIL.TypeRef($asm09, "System.Xml.ArrayHelper$b2", ["System.String", "System.TimeSpan"]), "System.Xml.TimeSpanArrayHelperWithString", false);

JSIL.MakeClass(new JSIL.TypeRef($asm09, "System.Xml.ArrayHelper$b2", ["System.Xml.XmlDictionaryString", "System.TimeSpan"]), "System.Xml.TimeSpanArrayHelperWithDictionaryString", false);

JSIL.MakeInterface(
	"System.Xml.IStreamProvider", [], {
		"GetStream": Function, 
		"ReleaseStream": Function
	});

JSIL.MakeInterface(
	"System.Xml.IXmlDictionary", [], {
		"TryLookup": Function, 
		"TryLookup": Function, 
		"TryLookup": Function
	});

JSIL.MakeEnum(
	"System.Xml.PrefixHandleType", {
		Empty: 0, 
		A: 1, 
		B: 2, 
		C: 3, 
		D: 4, 
		E: 5, 
		F: 6, 
		G: 7, 
		H: 8, 
		I: 9, 
		J: 10, 
		K: 11, 
		L: 12, 
		M: 13, 
		N: 14, 
		O: 15, 
		P: 16, 
		Q: 17, 
		R: 18, 
		S: 19, 
		T: 20, 
		U: 21, 
		V: 22, 
		W: 23, 
		X: 24, 
		Y: 25, 
		Z: 26, 
		Buffer: 27, 
		Max: 28
	}, false
);

JSIL.MakeClass("System.Object", "System.Xml.PrefixHandle", false);

JSIL.MakeEnum(
	"System.Xml.StringHandleConstStringType", {
		Type: 0, 
		Root: 1, 
		Item: 2
	}, false
);

JSIL.MakeClass("System.Object", "System.Xml.StringHandle", false);
JSIL.MakeEnum(
	"System.Xml.StringHandle/StringHandleType", {
		Dictionary: 0, 
		UTF8: 1, 
		EscapedUTF8: 2, 
		ConstString: 3
	}, false
);


JSIL.MakeClass("System.Object", "System.Xml.UniqueId", true);

JSIL.MakeEnum(
	"System.Xml.ValueHandleConstStringType", {
		String: 0, 
		Number: 1, 
		Array: 2, 
		Object: 3, 
		Boolean: 4, 
		Null: 5
	}, false
);

JSIL.MakeStaticClass("System.Xml.ValueHandleLength", false);

JSIL.MakeEnum(
	"System.Xml.ValueHandleType", {
		Empty: 0, 
		True: 1, 
		False: 2, 
		Zero: 3, 
		One: 4, 
		Int8: 5, 
		Int16: 6, 
		Int32: 7, 
		Int64: 8, 
		UInt64: 9, 
		Single: 10, 
		Double: 11, 
		Decimal: 12, 
		DateTime: 13, 
		TimeSpan: 14, 
		Guid: 15, 
		UniqueId: 16, 
		UTF8: 17, 
		EscapedUTF8: 18, 
		Base64: 19, 
		Dictionary: 20, 
		List: 21, 
		Char: 22, 
		Unicode: 23, 
		QName: 24, 
		ConstString: 25
	}, false
);

JSIL.MakeClass("System.Object", "System.Xml.ValueHandle", false);

JSIL.MakeClass("System.Xml.XmlReader", "System.Xml.XmlDictionaryReader", true);
JSIL.MakeClass("System.Xml.XmlDictionaryReader", "System.Xml.XmlDictionaryReader/XmlWrappedReader", false);


JSIL.MakeClass("System.Xml.XmlDictionaryReader", "System.Xml.XmlBaseReader", false);
JSIL.MakeEnum(
	"System.Xml.XmlBaseReader/QNameType", {
		Normal: 0, 
		Xmlns: 1
	}, false
);

JSIL.MakeClass("System.Object", "System.Xml.XmlBaseReader/XmlNode", false);
JSIL.MakeEnum(
	"System.Xml.XmlBaseReader/XmlNode/XmlNodeFlags", {
		None: 0, 
		CanGetAttribute: 1, 
		CanMoveToElement: 2, 
		HasValue: 4, 
		AtomicValue: 8, 
		SkipValue: 16, 
		HasContent: 32
	}, false
);


JSIL.MakeClass("System.Xml.XmlBaseReader/XmlNode", "System.Xml.XmlBaseReader/XmlElementNode", false);

JSIL.MakeClass("System.Xml.XmlBaseReader/XmlNode", "System.Xml.XmlBaseReader/XmlAttributeNode", false);

JSIL.MakeClass("System.Xml.XmlBaseReader/XmlNode", "System.Xml.XmlBaseReader/XmlEndElementNode", false);

JSIL.MakeClass("System.Xml.XmlBaseReader/XmlNode", "System.Xml.XmlBaseReader/XmlTextNode", false);

JSIL.MakeClass("System.Xml.XmlBaseReader/XmlTextNode", "System.Xml.XmlBaseReader/XmlAtomicTextNode", false);

JSIL.MakeClass("System.Xml.XmlBaseReader/XmlTextNode", "System.Xml.XmlBaseReader/XmlComplexTextNode", false);

JSIL.MakeClass("System.Xml.XmlBaseReader/XmlTextNode", "System.Xml.XmlBaseReader/XmlWhitespaceTextNode", false);

JSIL.MakeClass("System.Xml.XmlBaseReader/XmlTextNode", "System.Xml.XmlBaseReader/XmlCDataNode", false);

JSIL.MakeClass("System.Xml.XmlBaseReader/XmlTextNode", "System.Xml.XmlBaseReader/XmlAttributeTextNode", false);

JSIL.MakeClass("System.Xml.XmlBaseReader/XmlNode", "System.Xml.XmlBaseReader/XmlInitialNode", false);

JSIL.MakeClass("System.Xml.XmlBaseReader/XmlNode", "System.Xml.XmlBaseReader/XmlDeclarationNode", false);

JSIL.MakeClass("System.Xml.XmlBaseReader/XmlNode", "System.Xml.XmlBaseReader/XmlCommentNode", false);

JSIL.MakeClass("System.Xml.XmlBaseReader/XmlNode", "System.Xml.XmlBaseReader/XmlEndOfFileNode", false);

JSIL.MakeClass("System.Xml.XmlBaseReader/XmlNode", "System.Xml.XmlBaseReader/XmlClosedNode", false);

JSIL.MakeClass("System.Object", "System.Xml.XmlBaseReader/AttributeSorter", false);

JSIL.MakeClass("System.Object", "System.Xml.XmlBaseReader/NamespaceManager", false);
JSIL.MakeClass("System.Object", "System.Xml.XmlBaseReader/NamespaceManager/XmlAttribute", false);


JSIL.MakeClass("System.Object", "System.Xml.XmlBaseReader/Namespace", false);


JSIL.MakeClass("System.Xml.XmlWriter", "System.Xml.XmlDictionaryWriter", true);
JSIL.MakeClass("System.Xml.XmlDictionaryWriter", "System.Xml.XmlDictionaryWriter/XmlWrappedWriter", false);


JSIL.MakeClass("System.Xml.XmlDictionaryWriter", "System.Xml.XmlBaseWriter", false);
JSIL.MakeClass("System.Object", "System.Xml.XmlBaseWriter/Element", false);

JSIL.MakeEnum(
	"System.Xml.XmlBaseWriter/DocumentState", {
		None: 0, 
		Document: 1, 
		Epilog: 2, 
		End: 3
	}, false
);

JSIL.MakeClass("System.Object", "System.Xml.XmlBaseWriter/NamespaceManager", false);
JSIL.MakeClass("System.Object", "System.Xml.XmlBaseWriter/NamespaceManager/XmlAttribute", false);

JSIL.MakeClass("System.Object", "System.Xml.XmlBaseWriter/NamespaceManager/Namespace", false);



JSIL.MakeEnum(
	"System.Xml.XmlBinaryNodeType", {
		EndElement: 1, 
		Comment: 2, 
		Array: 3, 
		MinAttribute: 4, 
		ShortAttribute: 4, 
		Attribute: 5, 
		ShortDictionaryAttribute: 6, 
		DictionaryAttribute: 7, 
		ShortXmlnsAttribute: 8, 
		XmlnsAttribute: 9, 
		ShortDictionaryXmlnsAttribute: 10, 
		DictionaryXmlnsAttribute: 11, 
		PrefixDictionaryAttributeA: 12, 
		PrefixDictionaryAttributeB: 13, 
		PrefixDictionaryAttributeC: 14, 
		PrefixDictionaryAttributeD: 15, 
		PrefixDictionaryAttributeE: 16, 
		PrefixDictionaryAttributeF: 17, 
		PrefixDictionaryAttributeG: 18, 
		PrefixDictionaryAttributeH: 19, 
		PrefixDictionaryAttributeI: 20, 
		PrefixDictionaryAttributeJ: 21, 
		PrefixDictionaryAttributeK: 22, 
		PrefixDictionaryAttributeL: 23, 
		PrefixDictionaryAttributeM: 24, 
		PrefixDictionaryAttributeN: 25, 
		PrefixDictionaryAttributeO: 26, 
		PrefixDictionaryAttributeP: 27, 
		PrefixDictionaryAttributeQ: 28, 
		PrefixDictionaryAttributeR: 29, 
		PrefixDictionaryAttributeS: 30, 
		PrefixDictionaryAttributeT: 31, 
		PrefixDictionaryAttributeU: 32, 
		PrefixDictionaryAttributeV: 33, 
		PrefixDictionaryAttributeW: 34, 
		PrefixDictionaryAttributeX: 35, 
		PrefixDictionaryAttributeY: 36, 
		PrefixDictionaryAttributeZ: 37, 
		PrefixAttributeA: 38, 
		PrefixAttributeB: 39, 
		PrefixAttributeC: 40, 
		PrefixAttributeD: 41, 
		PrefixAttributeE: 42, 
		PrefixAttributeF: 43, 
		PrefixAttributeG: 44, 
		PrefixAttributeH: 45, 
		PrefixAttributeI: 46, 
		PrefixAttributeJ: 47, 
		PrefixAttributeK: 48, 
		PrefixAttributeL: 49, 
		PrefixAttributeM: 50, 
		PrefixAttributeN: 51, 
		PrefixAttributeO: 52, 
		PrefixAttributeP: 53, 
		PrefixAttributeQ: 54, 
		PrefixAttributeR: 55, 
		PrefixAttributeS: 56, 
		PrefixAttributeT: 57, 
		PrefixAttributeU: 58, 
		PrefixAttributeV: 59, 
		PrefixAttributeW: 60, 
		PrefixAttributeX: 61, 
		PrefixAttributeY: 62, 
		PrefixAttributeZ: 63, 
		MaxAttribute: 63, 
		MinElement: 64, 
		ShortElement: 64, 
		Element: 65, 
		ShortDictionaryElement: 66, 
		DictionaryElement: 67, 
		PrefixDictionaryElementA: 68, 
		PrefixDictionaryElementB: 69, 
		PrefixDictionaryElementC: 70, 
		PrefixDictionaryElementD: 71, 
		PrefixDictionaryElementE: 72, 
		PrefixDictionaryElementF: 73, 
		PrefixDictionaryElementG: 74, 
		PrefixDictionaryElementH: 75, 
		PrefixDictionaryElementI: 76, 
		PrefixDictionaryElementJ: 77, 
		PrefixDictionaryElementK: 78, 
		PrefixDictionaryElementL: 79, 
		PrefixDictionaryElementM: 80, 
		PrefixDictionaryElementN: 81, 
		PrefixDictionaryElementO: 82, 
		PrefixDictionaryElementP: 83, 
		PrefixDictionaryElementQ: 84, 
		PrefixDictionaryElementR: 85, 
		PrefixDictionaryElementS: 86, 
		PrefixDictionaryElementT: 87, 
		PrefixDictionaryElementU: 88, 
		PrefixDictionaryElementV: 89, 
		PrefixDictionaryElementW: 90, 
		PrefixDictionaryElementX: 91, 
		PrefixDictionaryElementY: 92, 
		PrefixDictionaryElementZ: 93, 
		PrefixElementA: 94, 
		PrefixElementB: 95, 
		PrefixElementC: 96, 
		PrefixElementD: 97, 
		PrefixElementE: 98, 
		PrefixElementF: 99, 
		PrefixElementG: 100, 
		PrefixElementH: 101, 
		PrefixElementI: 102, 
		PrefixElementJ: 103, 
		PrefixElementK: 104, 
		PrefixElementL: 105, 
		PrefixElementM: 106, 
		PrefixElementN: 107, 
		PrefixElementO: 108, 
		PrefixElementP: 109, 
		PrefixElementQ: 110, 
		PrefixElementR: 111, 
		PrefixElementS: 112, 
		PrefixElementT: 113, 
		PrefixElementU: 114, 
		PrefixElementV: 115, 
		PrefixElementW: 116, 
		PrefixElementX: 117, 
		PrefixElementY: 118, 
		PrefixElementZ: 119, 
		MaxElement: 119, 
		MinText: 128, 
		ZeroText: 128, 
		OneText: 130, 
		FalseText: 132, 
		TrueText: 134, 
		Int8Text: 136, 
		Int16Text: 138, 
		Int32Text: 140, 
		Int64Text: 142, 
		FloatText: 144, 
		DoubleText: 146, 
		DecimalText: 148, 
		DateTimeText: 150, 
		Chars8Text: 152, 
		Chars16Text: 154, 
		Chars32Text: 156, 
		Bytes8Text: 158, 
		Bytes16Text: 160, 
		Bytes32Text: 162, 
		StartListText: 164, 
		EndListText: 166, 
		EmptyText: 168, 
		DictionaryText: 170, 
		UniqueIdText: 172, 
		TimeSpanText: 174, 
		GuidText: 176, 
		UInt64Text: 178, 
		BoolText: 180, 
		UnicodeChars8Text: 182, 
		UnicodeChars16Text: 184, 
		UnicodeChars32Text: 186, 
		QNameDictionaryText: 188, 
		ZeroTextWithEndElement: 129, 
		OneTextWithEndElement: 131, 
		FalseTextWithEndElement: 133, 
		TrueTextWithEndElement: 135, 
		Int8TextWithEndElement: 137, 
		Int16TextWithEndElement: 139, 
		Int32TextWithEndElement: 141, 
		Int64TextWithEndElement: 143, 
		FloatTextWithEndElement: 145, 
		DoubleTextWithEndElement: 147, 
		DecimalTextWithEndElement: 149, 
		DateTimeTextWithEndElement: 151, 
		Chars8TextWithEndElement: 153, 
		Chars16TextWithEndElement: 155, 
		Chars32TextWithEndElement: 157, 
		Bytes8TextWithEndElement: 159, 
		Bytes16TextWithEndElement: 161, 
		Bytes32TextWithEndElement: 163, 
		StartListTextWithEndElement: 165, 
		EndListTextWithEndElement: 167, 
		EmptyTextWithEndElement: 169, 
		DictionaryTextWithEndElement: 171, 
		UniqueIdTextWithEndElement: 173, 
		TimeSpanTextWithEndElement: 175, 
		GuidTextWithEndElement: 177, 
		UInt64TextWithEndElement: 179, 
		BoolTextWithEndElement: 181, 
		UnicodeChars8TextWithEndElement: 183, 
		UnicodeChars16TextWithEndElement: 185, 
		UnicodeChars32TextWithEndElement: 187, 
		QNameDictionaryTextWithEndElement: 189, 
		MaxText: 189
	}, false
);

JSIL.MakeClass("System.Xml.XmlBaseReader", "System.Xml.XmlBinaryReader", false);
JSIL.MakeEnum(
	"System.Xml.XmlBinaryReader/ArrayState", {
		None: 0, 
		Element: 1, 
		Content: 2
	}, false
);


JSIL.MakeClass("System.Object", "System.Xml.XmlBinaryReaderSession", true);

JSIL.MakeClass("System.Object", "System.Xml.XmlNodeWriter", false);

JSIL.MakeClass("System.Xml.XmlNodeWriter", "System.Xml.XmlStreamNodeWriter", false);

JSIL.MakeClass("System.Xml.XmlStreamNodeWriter", "System.Xml.XmlBinaryNodeWriter", false);
JSIL.MakeStruct("System.Xml.XmlBinaryNodeWriter/AttributeValue", false);


JSIL.MakeClass("System.Xml.XmlBaseWriter", "System.Xml.XmlBinaryWriter", false);

JSIL.MakeClass("System.Object", "System.Xml.XmlBinaryWriterSession", true);
JSIL.MakeClass("System.Object", "System.Xml.XmlBinaryWriterSession/PriorityDictionary$b2", false, ["K", "V"]);
JSIL.MakeStruct("System.Xml.XmlBinaryWriterSession/PriorityDictionary$b2/Entry", false, ["K", "V"]);


JSIL.MakeClass("System.Object", "System.Xml.XmlBinaryWriterSession/IntArray", false);


JSIL.MakeClass("System.Object", "System.Xml.XmlBufferReader", false);

JSIL.MakeStaticClass("System.Xml.XmlConverter", false);

JSIL.MakeClass("System.Object", "System.Xml.XmlDictionary", true);
JSIL.MakeClass("System.Object", "System.Xml.XmlDictionary/EmptyDictionary", false);


JSIL.MakeClass("System.Object", "System.Xml.XmlDictionaryReaderQuotas", true);

JSIL.MakeClass("System.Object", "System.Xml.XmlDictionaryString", true);
JSIL.MakeClass("System.Object", "System.Xml.XmlDictionaryString/EmptyStringDictionary", false);


JSIL.MakeStaticClass("System.Xml.XmlExceptionHelper", false);

JSIL.DeclareNamespace("System.Text");
JSIL.MakeClass("System.Text.Encoding", "System.Text.Base64Encoding", false);

JSIL.MakeStruct("System.Text.SurrogateChar", false);

$asm09.System.Runtime.Serialization.SRDescriptionAttribute.prototype._ctor = function (description) {
	System.ComponentModel.DescriptionAttribute.prototype._ctor$1.call(this, description);
};
$asm09.System.Runtime.Serialization.SRDescriptionAttribute.prototype.get_Description = function () {
	if (!this.replaced) {
		this.replaced = true;
		System.ComponentModel.DescriptionAttribute.prototype.set_DescriptionValue.call(this, $asm09.System.Runtime.Serialization.SR.GetString$2(System.ComponentModel.DescriptionAttribute.prototype.get_Description.call(this)));
	}
	return System.ComponentModel.DescriptionAttribute.prototype.get_Description.call(this);
};
JSIL.MakeProperty($asm09.System.Runtime.Serialization.SRDescriptionAttribute.prototype, "Description", 
	$asm09.System.Runtime.Serialization.SRDescriptionAttribute.prototype.get_Description, null);
$asm09.System.Runtime.Serialization.SRDescriptionAttribute.prototype.replaced = false;

$asm09.System.Runtime.Serialization.SRCategoryAttribute.prototype._ctor = function (category) {
	System.ComponentModel.CategoryAttribute.prototype._ctor$1.call(this, category);
};
$asm09.System.Runtime.Serialization.SRCategoryAttribute.prototype.GetLocalizedString = function (value) {
	return $asm09.System.Runtime.Serialization.SR.GetString$2(value);
};

$asm09.System.Runtime.Serialization.SR.get_InternalSyncObject = function () {
	if ($asm09.System.Runtime.Serialization.SR.s_InternalSyncObject === null) {
		var value = new System.Object();
		System.Threading.Interlocked.CompareExchange$b1(System.Object)(/* ref */ new JSIL.MemberReference($asm09.System.Runtime.Serialization.SR, "s_InternalSyncObject"), value, null);
	}
	return $asm09.System.Runtime.Serialization.SR.s_InternalSyncObject;
};
$asm09.System.Runtime.Serialization.SR.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
	var assembly = JSIL.GetType(this).Assembly;
	this.resources = JSIL.New(System.Resources.ResourceManager, "_ctor$1", ["System.Runtime.Serialization", assembly]);
	try {
		var assembly2 = System.Reflection.Assembly.Load$0("System.Runtime.Serialization.debug.resources, Version=2.0.5.0, Culture=en-US, PublicKeyToken=7cec85d7bea7798e");
		this.debugResources = JSIL.New(System.Resources.ResourceManager, "_ctor$1", ["System.Runtime.Serialization.debug", assembly2]);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.IO.FileNotFoundException)) {
		} else {
			throw $exception;
		}
	}
	this.fallbackResources = JSIL.New(System.Resources.ResourceManager, "_ctor$1", ["mscorlib", System.Object.Assembly]);
};
$asm09.System.Runtime.Serialization.SR.GetLoader = function () {
	var internalSyncObject = null;
	if ($asm09.System.Runtime.Serialization.SR.loader === null) {
		System.Threading.Monitor.Enter((internalSyncObject = $asm09.System.Runtime.Serialization.SR.InternalSyncObject));
		try {
			if ($asm09.System.Runtime.Serialization.SR.loader === null) {
				$asm09.System.Runtime.Serialization.SR.loader = new $asm09.System.Runtime.Serialization.SR();
			}
		} finally {
			System.Threading.Monitor.Exit(internalSyncObject);
		}
	}
	return $asm09.System.Runtime.Serialization.SR.loader;
};
$asm09.System.Runtime.Serialization.SR.get_Culture = function () {
	return null;
};
$asm09.System.Runtime.Serialization.SR.GetString$0 = function (name, args) {
	var flag = new JSIL.Variable(false);
	return $asm09.System.Runtime.Serialization.SR.GetString$1(name, /* ref */ flag, args);
};
$asm09.System.Runtime.Serialization.SR.GetString$1 = function (name, /* ref */ fallbackUsed, args) {
	var sR = $asm09.System.Runtime.Serialization.SR.GetLoader();
	var text = null;
	fallbackUsed.value = false;
	if (sR !== null) {
		text = sR.resources.GetString$1(name, $asm09.System.Runtime.Serialization.SR.Culture);
		if (!(text || (sR.debugResources === null))) {
			text = sR.debugResources.GetString$1(name, $asm09.System.Runtime.Serialization.SR.Culture);
		}
		if (text !== null) {
			if (!((args === null) || (args.length <= 0))) {
			__loop0__: 
				for (var i = 0; i < args.length; ++i) {
					if (args[i]) {
						var text2 = args[i].toString();
						if (!((text2 === null) || (text2.length <= 1024))) {
							args[i] = ((text2.Substring$1(0, 1021) + "..."));
						}
					}
				}
				return System.String.Format(System.Globalization.CultureInfo.CurrentCulture, text, args);
			}
			return text;
		}
	}
	fallbackUsed.value = true;
	text = $asm09.System.Runtime.Serialization.SR.GetFallbackMessage(name, args);
	return text;
};
$asm09.System.Runtime.Serialization.SR.GetString$2 = function (name) {
	var text = $asm09.System.Runtime.Serialization.SR.GetStringHelper(name);
	if (text === null) {
		text = $asm09.System.Runtime.Serialization.SR.GetFallbackMessage(name, null);
	}
	return text;
};
$asm09.System.Runtime.Serialization.SR.GetString$3 = function (name, /* ref */ usedFallback) {
	var text = $asm09.System.Runtime.Serialization.SR.GetStringHelper(name);
	if (text === null) {
		text = $asm09.System.Runtime.Serialization.SR.GetFallbackMessage(name, null);
		usedFallback.value = true;
	} else {
		usedFallback.value = false;
	}
	return text;
};
$asm09.System.Runtime.Serialization.SR.GetObject = function (name) {
	var sR = $asm09.System.Runtime.Serialization.SR.GetLoader();
	var obj = null;
	if (sR !== null) {
		obj = sR.resources.GetObject$1(name, $asm09.System.Runtime.Serialization.SR.Culture);
		if (!(obj || (sR.debugResources === null))) {
			obj = sR.debugResources.GetObject$1(name, $asm09.System.Runtime.Serialization.SR.Culture);
		}
	}
	if (obj === null) {
		obj = $asm09.System.Runtime.Serialization.SR.GetFallbackMessage(name, null);
	}
	return obj;
};
$asm09.System.Runtime.Serialization.SR.GetStringHelper = function (name) {
	var sR = $asm09.System.Runtime.Serialization.SR.GetLoader();
	var text = null;
	if (sR !== null) {
		text = sR.resources.GetString$1(name, $asm09.System.Runtime.Serialization.SR.Culture);
		if (!(text || (sR.debugResources === null))) {
			text = sR.debugResources.GetString$1(name, $asm09.System.Runtime.Serialization.SR.Culture);
		}
	}
	return text;
};
$asm09.System.Runtime.Serialization.SR.GetFallbackMessage = function (name, args) {
	var sR = $asm09.System.Runtime.Serialization.SR.GetLoader();
	var text = null;
	if (!((sR === null) || (sR.fallbackResources === null))) {
		var string = sR.fallbackResources.GetString$1("NoDebugResources", $asm09.System.Runtime.Serialization.SR.Culture);
		if (string !== null) {
			var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
			if (args !== null) {
			__loop0__: 
				for (var i = 0; i < args.length; ++i) {
					if (args[i]) {
						var text2 = args[i].toString();
						if (text2 !== null) {
							if (text2.length <= 1024) {
								stringBuilder.Append$2(text2);
							} else {
								stringBuilder.Append$2((text2.Substring$1(0, 1021) + "..."));
							}
							if (i < (args.length - 1)) {
								stringBuilder.Append$2(System.Globalization.CultureInfo.CurrentCulture.TextInfo.ListSeparator);
							}
						}
					}
				}
			}
			var text3 = stringBuilder.toString();
			if (text3 === null) {
				text3 = "";
			}
			text = System.String.Format(System.Globalization.CultureInfo.CurrentCulture, string, [name, text3, "4.0.60310.0", "System.Runtime.Serialization.dll", $asm09.System.Runtime.Serialization.SR.UriEncode(name)]);
		}
	}
	if (text === null) {
		text = name;
	}
	return text;
};
$asm09.System.Runtime.Serialization.SR.UriEncode = function (url) {
	if (url === null) {
		return null;
	}
	var array = System.Text.Encoding.UTF8.GetBytes$3(url);
	var num = 0;
	var num2 = 0;
	var num3 = array.length;
__loop0__: 
	for (var i = 0; i < num3; ++i) {
		var c = array[i];
		if (c === " ") {
			++num;
		} else if (!$asm09.System.Runtime.Serialization.SR.IsSafe(c)) {
			++num2;
		}
	}
	if (!((num === 0) && (num2 === 0))) {
		var array2 = JSIL.Array.New(System.Byte, (num3 + (num2 * 2)));
		var num4 = 0;
	__loop1__: 
		for (var j = 0; j < num3; ++j) {
			var b = array[j];
			var c2 = String.fromCharCode(b);
			if ($asm09.System.Runtime.Serialization.SR.IsSafe(c2)) {
				array2[num4++] = b;
			} else if (c2 === " ") {
				array2[num4++] = 43;
			} else {
				array2[num4++] = 37;
				array2[num4++] = ($asm09.System.Runtime.Serialization.SR.IntToHex(((b >> 4) & 15))).charCodeAt(0);
				array2[num4++] = ($asm09.System.Runtime.Serialization.SR.IntToHex((b & 15))).charCodeAt(0);
			}
		}
		array = array2;
	}
	return System.Text.Encoding.UTF8.GetString$1(array, 0, array.length);
};
$asm09.System.Runtime.Serialization.SR.IntToHex = function (n) {
	if (n <= 9) {
		return (n + 48);
	}
	return ((n - 10) + 97);
};
$asm09.System.Runtime.Serialization.SR.IsSafe = function (ch) {
	if (!(!((ch >= "a") && 
				(ch <= "z")) && 
			!((ch >= "A") && 
				(ch <= "Z")) && ((ch < "0") || 
				(ch > "9")))) {
		return true;
	}
	if (ch !== "!") {
		switch (ch) {
			case "'": 
			case "(": 
			case ")": 
			case "*": 
			case "-": 
			case ".": 
				return true;
			case "+": 
			case ",": 
				break;
			default: 
				if (ch === "_") {
					return true;
				}
				break;
		}
		return false;
	}
	return true;
};
JSIL.OverloadedMethod($asm09.System.Runtime.Serialization.SR, "GetString", [
		["GetString$0", [System.String, System.Array.Of(System.Object)]], 
		["GetString$1", [System.String, JSIL.Reference.Of(System.Boolean), System.Array.Of(System.Object)]], 
		["GetString$2", [System.String]], 
		["GetString$3", [System.String, JSIL.Reference.Of(System.Boolean)]]
	]);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.SR, "InternalSyncObject", 
	$asm09.System.Runtime.Serialization.SR.get_InternalSyncObject, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.SR, "Culture", 
	$asm09.System.Runtime.Serialization.SR.get_Culture, null);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "ArrayExceededSize", {
		"value": "ArrayExceededSize"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "ArrayExceededSizeAttribute", {
		"value": "ArrayExceededSizeAttribute"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "ArrayTypeIsNotSupported", {
		"value": "ArrayTypeIsNotSupported"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "CannotDeserializeRefAtTopLevel", {
		"value": "CannotDeserializeRefAtTopLevel"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "CannotLoadMemberType", {
		"value": "CannotLoadMemberType"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "CannotSerializeObjectWithCycles", {
		"value": "CannotSerializeObjectWithCycles"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "CanOnlyStoreIntoArgOrLocGot0", {
		"value": "CanOnlyStoreIntoArgOrLocGot0"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "CharIsInvalidPrimitive", {
		"value": "CharIsInvalidPrimitive"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "CallbackMustReturnVoid", {
		"value": "CallbackMustReturnVoid"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "CallbackParameterInvalid", {
		"value": "CallbackParameterInvalid"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "CallbacksCannotBeVirtualMethods", {
		"value": "CallbacksCannotBeVirtualMethods"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "CollectionMustHaveAddMethod", {
		"value": "CollectionMustHaveAddMethod"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "CollectionMustHaveGetEnumeratorMethod", {
		"value": "CollectionMustHaveGetEnumeratorMethod"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "CollectionMustHaveItemType", {
		"value": "CollectionMustHaveItemType"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "CollectionTypeCannotBeBuiltIn", {
		"value": "CollectionTypeCannotBeBuiltIn"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "CollectionTypeCannotHaveDataContract", {
		"value": "CollectionTypeCannotHaveDataContract"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "CollectionTypeDoesNotHaveAddMethod", {
		"value": "CollectionTypeDoesNotHaveAddMethod"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "CollectionTypeDoesNotHaveDefaultCtor", {
		"value": "CollectionTypeDoesNotHaveDefaultCtor"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "CollectionTypeHasMultipleDefinitionsOfInterface", {
		"value": "CollectionTypeHasMultipleDefinitionsOfInterface"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "CollectionTypeIsNotIEnumerable", {
		"value": "CollectionTypeIsNotIEnumerable"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "DataContractCacheOverflow", {
		"value": "DataContractCacheOverflow"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "DataContractNamespaceAlreadySet", {
		"value": "DataContractNamespaceAlreadySet"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "DataContractNamespaceIsNotValid", {
		"value": "DataContractNamespaceIsNotValid"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "DataContractNamespaceReserved", {
		"value": "DataContractNamespaceReserved"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "DataMemberOnEnumField", {
		"value": "DataMemberOnEnumField"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "DcTypeNotFoundOnDeserialize", {
		"value": "DcTypeNotFoundOnDeserialize"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "DcTypeNotFoundOnSerialize", {
		"value": "DcTypeNotFoundOnSerialize"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "DeserializedObjectWithIdNotFound", {
		"value": "DeserializedObjectWithIdNotFound"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "DupContractInKnownTypes", {
		"value": "DupContractInKnownTypes"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "DupKeyValueName", {
		"value": "DupKeyValueName"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "DupEnumMemberValue", {
		"value": "DupEnumMemberValue"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "DupMemberName", {
		"value": "DupMemberName"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "DuplicateAttribute", {
		"value": "DuplicateAttribute"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "DuplicateCallback", {
		"value": "DuplicateCallback"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "EncounteredWithNameNamespace", {
		"value": "EncounteredWithNameNamespace"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "EnumTypeCannotHaveIsReference", {
		"value": "EnumTypeCannotHaveIsReference"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "ErrorDeserializing", {
		"value": "ErrorDeserializing"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "ErrorInLine", {
		"value": "ErrorInLine"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "ErrorIsStartObject", {
		"value": "ErrorIsStartObject"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "ErrorSerializing", {
		"value": "ErrorSerializing"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "ErrorTypeInfo", {
		"value": "ErrorTypeInfo"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "ErrorWriteEndObject", {
		"value": "ErrorWriteEndObject"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "ErrorWriteStartObject", {
		"value": "ErrorWriteStartObject"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "ExceededMaxItemsQuota", {
		"value": "ExceededMaxItemsQuota"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "ExpectingElement", {
		"value": "ExpectingElement"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "ExpectingElementAtDeserialize", {
		"value": "ExpectingElementAtDeserialize"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "ExpectingEnd", {
		"value": "ExpectingEnd"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "ExpectingState", {
		"value": "ExpectingState"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "GenericNameBraceMismatch", {
		"value": "GenericNameBraceMismatch"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "GenericParameterNotValid", {
		"value": "GenericParameterNotValid"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "InconsistentIsReference", {
		"value": "InconsistentIsReference"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "IndexedPropertyCannotBeSerialized", {
		"value": "IndexedPropertyCannotBeSerialized"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "InterfaceTypeCannotBeCreated", {
		"value": "InterfaceTypeCannotBeCreated"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "InvalidCollectionContractItemName", {
		"value": "InvalidCollectionContractItemName"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "InvalidCollectionContractKeyName", {
		"value": "InvalidCollectionContractKeyName"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "InvalidCollectionContractKeyNoDictionary", {
		"value": "InvalidCollectionContractKeyNoDictionary"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "InvalidCollectionContractName", {
		"value": "InvalidCollectionContractName"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "InvalidCollectionContractNamespace", {
		"value": "InvalidCollectionContractNamespace"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "InvalidCollectionContractValueName", {
		"value": "InvalidCollectionContractValueName"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "InvalidCollectionContractValueNoDictionary", {
		"value": "InvalidCollectionContractValueNoDictionary"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "InvalidCollectionDataContract", {
		"value": "InvalidCollectionDataContract"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "InvalidCollectionType", {
		"value": "InvalidCollectionType"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "InvalidDataContractName", {
		"value": "InvalidDataContractName"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "InvalidDataContractNamespace", {
		"value": "InvalidDataContractNamespace"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "InvalidDataMemberName", {
		"value": "InvalidDataMemberName"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "InvalidEnumMemberValue", {
		"value": "InvalidEnumMemberValue"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "InvalidEnumValueOnRead", {
		"value": "InvalidEnumValueOnRead"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "InvalidEnumValueOnWrite", {
		"value": "InvalidEnumValueOnWrite"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "InvalidGetSchemaMethod", {
		"value": "InvalidGetSchemaMethod"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "InvalidGlobalDataContractNamespace", {
		"value": "InvalidGlobalDataContractNamespace"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "InvalidMember", {
		"value": "InvalidMember"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "InvalidNonNullReturnValueByIsAny", {
		"value": "InvalidNonNullReturnValueByIsAny"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "InvalidPrimitiveType", {
		"value": "InvalidPrimitiveType"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "InvalidReturnTypeOnGetSchemaMethod", {
		"value": "InvalidReturnTypeOnGetSchemaMethod"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "InvalidSizeDefinition", {
		"value": "InvalidSizeDefinition"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "InvalidXmlDataContractName", {
		"value": "InvalidXmlDataContractName"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "InvalidXsIdDefinition", {
		"value": "InvalidXsIdDefinition"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "InvalidXsRefDefinition", {
		"value": "InvalidXsRefDefinition"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "IsAnyCannotBeNull", {
		"value": "IsAnyCannotBeNull"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "IsAnyCannotBeSerializedAsDerivedType", {
		"value": "IsAnyCannotBeSerializedAsDerivedType"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "IsAnyCannotHaveXmlRoot", {
		"value": "IsAnyCannotHaveXmlRoot"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "IsNotAssignableFrom", {
		"value": "IsNotAssignableFrom"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "IsRequiredDataMemberOnIsReferenceDataContractType", {
		"value": "IsRequiredDataMemberOnIsReferenceDataContractType"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "IXmlSerializableCannotHaveCollectionDataContract", {
		"value": "IXmlSerializableCannotHaveCollectionDataContract"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "IXmlSerializableCannotHaveDataContract", {
		"value": "IXmlSerializableCannotHaveDataContract"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "IXmlSerializableIllegalOperation", {
		"value": "IXmlSerializableIllegalOperation"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "IXmlSerializableMissingEndElements", {
		"value": "IXmlSerializableMissingEndElements"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "IXmlSerializableMustHaveDefaultConstructor", {
		"value": "IXmlSerializableMustHaveDefaultConstructor"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "IXmlSerializableWritePastSubTree", {
		"value": "IXmlSerializableWritePastSubTree"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "KnownTypeAttributeEmptyString", {
		"value": "KnownTypeAttributeEmptyString"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "KnownTypeAttributeUnknownMethod", {
		"value": "KnownTypeAttributeUnknownMethod"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "KnownTypeAttributeReturnType", {
		"value": "KnownTypeAttributeReturnType"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "KnownTypeAttributeOneScheme", {
		"value": "KnownTypeAttributeOneScheme"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "KnownTypeConfigClosedGenericDeclared", {
		"value": "KnownTypeConfigClosedGenericDeclared"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "KnownTypeAttributeValidMethodTypes", {
		"value": "KnownTypeAttributeValidMethodTypes"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "KnownTypeAttributeNoData", {
		"value": "KnownTypeAttributeNoData"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "KnownTypeAttributeMethodNull", {
		"value": "KnownTypeAttributeMethodNull"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "MaxArrayLengthExceeded", {
		"value": "MaxArrayLengthExceeded"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "MissingGetSchemaMethod", {
		"value": "MissingGetSchemaMethod"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "MultipleIdDefinition", {
		"value": "MultipleIdDefinition"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "NoConversionPossibleTo", {
		"value": "NoConversionPossibleTo"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "NoGetMethodForProperty", {
		"value": "NoGetMethodForProperty"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "NoSetMethodForProperty", {
		"value": "NoSetMethodForProperty"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "NullKnownType", {
		"value": "NullKnownType"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "NullValueReturnedForGetOnlyCollection", {
		"value": "NullValueReturnedForGetOnlyCollection"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "ObjectTableOverflow", {
		"value": "ObjectTableOverflow"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "OrderCannotBeNegative", {
		"value": "OrderCannotBeNegative"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "ParameterCountMismatch", {
		"value": "ParameterCountMismatch"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "PartialTrustCollectionContractAddMethodNotPublic", {
		"value": "PartialTrustCollectionContractAddMethodNotPublic"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "PartialTrustCollectionContractNoPublicConstructor", {
		"value": "PartialTrustCollectionContractNoPublicConstructor"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "PartialTrustCollectionContractTypeNotPublic", {
		"value": "PartialTrustCollectionContractTypeNotPublic"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "PartialTrustDataContractOnSerializingNotPublic", {
		"value": "PartialTrustDataContractOnSerializingNotPublic"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "PartialTrustDataContractOnSerializedNotPublic", {
		"value": "PartialTrustDataContractOnSerializedNotPublic"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "PartialTrustDataContractOnDeserializingNotPublic", {
		"value": "PartialTrustDataContractOnDeserializingNotPublic"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "PartialTrustDataContractOnDeserializedNotPublic", {
		"value": "PartialTrustDataContractOnDeserializedNotPublic"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "PartialTrustDataContractFieldGetNotPublic", {
		"value": "PartialTrustDataContractFieldGetNotPublic"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "PartialTrustDataContractFieldSetNotPublic", {
		"value": "PartialTrustDataContractFieldSetNotPublic"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "PartialTrustDataContractPropertyGetNotPublic", {
		"value": "PartialTrustDataContractPropertyGetNotPublic"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "PartialTrustDataContractPropertySetNotPublic", {
		"value": "PartialTrustDataContractPropertySetNotPublic"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "PartialTrustDataContractTypeNotPublic", {
		"value": "PartialTrustDataContractTypeNotPublic"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "PartialTrustNonAttributedSerializableTypeNoPublicConstructor", {
		"value": "PartialTrustNonAttributedSerializableTypeNoPublicConstructor"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "PartialTrustIXmlSerializableTypeNotPublic", {
		"value": "PartialTrustIXmlSerializableTypeNotPublic"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "PartialTrustIXmlSerialzableNoPublicConstructor", {
		"value": "PartialTrustIXmlSerialzableNoPublicConstructor"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "NonAttributedSerializableTypesMustHaveDefaultConstructor", {
		"value": "NonAttributedSerializableTypesMustHaveDefaultConstructor"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "AttributedTypesCannotInheritFromNonAttributedSerializableTypes", {
		"value": "AttributedTypesCannotInheritFromNonAttributedSerializableTypes"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "RequiredMemberMustBeEmitted", {
		"value": "RequiredMemberMustBeEmitted"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "SupportForMultidimensionalArraysNotPresent", {
		"value": "SupportForMultidimensionalArraysNotPresent"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "TooManyCollectionContracts", {
		"value": "TooManyCollectionContracts"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "TooManyDataContracts", {
		"value": "TooManyDataContracts"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "TooManyDataMembers", {
		"value": "TooManyDataMembers"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "TooManyEnumMembers", {
		"value": "TooManyEnumMembers"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "TooManyIgnoreDataMemberAttributes", {
		"value": "TooManyIgnoreDataMemberAttributes"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "TypeNotSerializable", {
		"value": "TypeNotSerializable"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "UnexpectedContractType", {
		"value": "UnexpectedContractType"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "UnexpectedElementExpectingElements", {
		"value": "UnexpectedElementExpectingElements"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "UnexpectedEndOfFile", {
		"value": "UnexpectedEndOfFile"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "UnknownConstantType", {
		"value": "UnknownConstantType"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "UnsupportedIDictionaryAsDataMemberType", {
		"value": "UnsupportedIDictionaryAsDataMemberType"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "ValueMustBeNonNegative", {
		"value": "ValueMustBeNonNegative"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "ValueTypeCannotBeNull", {
		"value": "ValueTypeCannotBeNull"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "ValueTypeCannotHaveBaseType", {
		"value": "ValueTypeCannotHaveBaseType"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "ValueTypeCannotHaveId", {
		"value": "ValueTypeCannotHaveId"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "ValueTypeCannotHaveIsReference", {
		"value": "ValueTypeCannotHaveIsReference"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "ValueTypeCannotHaveRef", {
		"value": "ValueTypeCannotHaveRef"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlElementAttributes", {
		"value": "XmlElementAttributes"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlForObjectCannotHaveContent", {
		"value": "XmlForObjectCannotHaveContent"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlInvalidConversion", {
		"value": "XmlInvalidConversion"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlInvalidConversionWithoutValue", {
		"value": "XmlInvalidConversionWithoutValue"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlStartElementExpected", {
		"value": "XmlStartElementExpected"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlWriterMustBeInElement", {
		"value": "XmlWriterMustBeInElement"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "OffsetExceedsBufferSize", {
		"value": "OffsetExceedsBufferSize"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "SizeExceedsRemainingBufferSpace", {
		"value": "SizeExceedsRemainingBufferSpace"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "ValueMustBeInRange", {
		"value": "ValueMustBeInRange"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlArrayTooSmallOutput", {
		"value": "XmlArrayTooSmallOutput"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlInvalidBase64Length", {
		"value": "XmlInvalidBase64Length"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlInvalidBase64Sequence", {
		"value": "XmlInvalidBase64Sequence"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlInvalidHighSurrogate", {
		"value": "XmlInvalidHighSurrogate"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlInvalidLowSurrogate", {
		"value": "XmlInvalidLowSurrogate"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlInvalidSurrogate", {
		"value": "XmlInvalidSurrogate"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "InvalidLocalNameEmpty", {
		"value": "InvalidLocalNameEmpty"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlArrayTooSmall", {
		"value": "XmlArrayTooSmall"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlArrayTooSmallInput", {
		"value": "XmlArrayTooSmallInput"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlBase64DataExpected", {
		"value": "XmlBase64DataExpected"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlConversionOverflow", {
		"value": "XmlConversionOverflow"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlDeclMissingVersion", {
		"value": "XmlDeclMissingVersion"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlDictionaryStringIDRange", {
		"value": "XmlDictionaryStringIDRange"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlDictionaryStringIDUndefinedSession", {
		"value": "XmlDictionaryStringIDUndefinedSession"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlDictionaryStringIDUndefinedStatic", {
		"value": "XmlDictionaryStringIDUndefinedStatic"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlDuplicateAttribute", {
		"value": "XmlDuplicateAttribute"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlEmptyNamespaceRequiresNullPrefix", {
		"value": "XmlEmptyNamespaceRequiresNullPrefix"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlEndElementExpected", {
		"value": "XmlEndElementExpected"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlEndElementNoOpenNodes", {
		"value": "XmlEndElementNoOpenNodes"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlFoundCData", {
		"value": "XmlFoundCData"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlFoundComment", {
		"value": "XmlFoundComment"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlFoundElement", {
		"value": "XmlFoundElement"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlFoundEndElement", {
		"value": "XmlFoundEndElement"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlFoundEndOfFile", {
		"value": "XmlFoundEndOfFile"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlFoundNodeType", {
		"value": "XmlFoundNodeType"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlFoundText", {
		"value": "XmlFoundText"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlFullStartElementExpected", {
		"value": "XmlFullStartElementExpected"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlFullStartElementLocalNameNsExpected", {
		"value": "XmlFullStartElementLocalNameNsExpected"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlFullStartElementNameExpected", {
		"value": "XmlFullStartElementNameExpected"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlIDDefined", {
		"value": "XmlIDDefined"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlKeyAlreadyExists", {
		"value": "XmlKeyAlreadyExists"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlIllegalOutsideRoot", {
		"value": "XmlIllegalOutsideRoot"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlInvalidCharRef", {
		"value": "XmlInvalidCharRef"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlInvalidCommentChars", {
		"value": "XmlInvalidCommentChars"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlInvalidDeclaration", {
		"value": "XmlInvalidDeclaration"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlInvalidDepth", {
		"value": "XmlInvalidDepth"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlInvalidEncoding", {
		"value": "XmlInvalidEncoding"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlInvalidFormat", {
		"value": "XmlInvalidFormat"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlInvalidID", {
		"value": "XmlInvalidID"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlInvalidOperation", {
		"value": "XmlInvalidOperation"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlInvalidPrefixState", {
		"value": "XmlInvalidPrefixState"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlInvalidQualifiedName", {
		"value": "XmlInvalidQualifiedName"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlInvalidStandalone", {
		"value": "XmlInvalidStandalone"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlInvalidStream", {
		"value": "XmlInvalidStream"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlInvalidUniqueId", {
		"value": "XmlInvalidUniqueId"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlInvalidUTF8Bytes", {
		"value": "XmlInvalidUTF8Bytes"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlInvalidVersion", {
		"value": "XmlInvalidVersion"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlInvalidWriteState", {
		"value": "XmlInvalidWriteState"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlInvalidXmlSpace", {
		"value": "XmlInvalidXmlSpace"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlLineInfo", {
		"value": "XmlLineInfo"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlMalformedDecl", {
		"value": "XmlMalformedDecl"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlMaxArrayLengthExceeded", {
		"value": "XmlMaxArrayLengthExceeded"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlMethodNotSupported", {
		"value": "XmlMethodNotSupported"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlMissingLowSurrogate", {
		"value": "XmlMissingLowSurrogate"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlMultipleRootElements", {
		"value": "XmlMultipleRootElements"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlNamespaceNotFound", {
		"value": "XmlNamespaceNotFound"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlNestedArraysNotSupported", {
		"value": "XmlNestedArraysNotSupported"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlNoRootElement", {
		"value": "XmlNoRootElement"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlOnlyOneRoot", {
		"value": "XmlOnlyOneRoot"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlOnlyWhitespace", {
		"value": "XmlOnlyWhitespace"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlOnlySingleValue", {
		"value": "XmlOnlySingleValue"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlPrefixBoundToNamespace", {
		"value": "XmlPrefixBoundToNamespace"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlProcessingInstructionNotSupported", {
		"value": "XmlProcessingInstructionNotSupported"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlReservedPrefix", {
		"value": "XmlReservedPrefix"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlSpecificBindingNamespace", {
		"value": "XmlSpecificBindingNamespace"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlSpecificBindingPrefix", {
		"value": "XmlSpecificBindingPrefix"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlStartElementLocalNameNsExpected", {
		"value": "XmlStartElementLocalNameNsExpected"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlStartElementNameExpected", {
		"value": "XmlStartElementNameExpected"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlUndefinedPrefix", {
		"value": "XmlUndefinedPrefix"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlUnexpectedEndElement", {
		"value": "XmlUnexpectedEndElement"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlUnexpectedEndOfFile", {
		"value": "XmlUnexpectedEndOfFile"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.SR, "XmlWriterClosed", {
		"value": "XmlWriterClosed"}
);
$asm09.System.Runtime.Serialization.SR.loader = null;
$asm09.System.Runtime.Serialization.SR.prototype.resources = null;
$asm09.System.Runtime.Serialization.SR.prototype.debugResources = null;
$asm09.System.Runtime.Serialization.SR.prototype.fallbackResources = null;
$asm09.System.Runtime.Serialization.SR.s_InternalSyncObject = null;
$asm09.System.Runtime.Serialization.SR._cctor = function () {
	$asm09.System.Runtime.Serialization.SR.loader = null;
};

System.Runtime.Serialization.DataContractAttribute.prototype._ctor = function () {
	System.Attribute.prototype._ctor.call(this);
};
System.Runtime.Serialization.DataContractAttribute.prototype.get_IsReference = function () {
	return this.isReference;
};
System.Runtime.Serialization.DataContractAttribute.prototype.set_IsReference = function (value) {
	this.isReference = value;
	this.isReferenceSetExplicit = true;
};
System.Runtime.Serialization.DataContractAttribute.prototype.get_IsReferenceSetExplicit = function () {
	return this.isReferenceSetExplicit;
};
System.Runtime.Serialization.DataContractAttribute.prototype.get_Namespace = function () {
	return this.ns;
};
System.Runtime.Serialization.DataContractAttribute.prototype.set_Namespace = function (value) {
	this.ns = value;
	this.isNamespaceSetExplicit = true;
};
System.Runtime.Serialization.DataContractAttribute.prototype.get_IsNamespaceSetExplicit = function () {
	return this.isNamespaceSetExplicit;
};
System.Runtime.Serialization.DataContractAttribute.prototype.get_Name = function () {
	return this.name;
};
System.Runtime.Serialization.DataContractAttribute.prototype.set_Name = function (value) {
	this.name = value;
	this.isNameSetExplicit = true;
};
System.Runtime.Serialization.DataContractAttribute.prototype.get_IsNameSetExplicit = function () {
	return this.isNameSetExplicit;
};
JSIL.MakeProperty(System.Runtime.Serialization.DataContractAttribute.prototype, "IsReference", 
	System.Runtime.Serialization.DataContractAttribute.prototype.get_IsReference, System.Runtime.Serialization.DataContractAttribute.prototype.set_IsReference);
JSIL.MakeProperty(System.Runtime.Serialization.DataContractAttribute.prototype, "IsReferenceSetExplicit", 
	System.Runtime.Serialization.DataContractAttribute.prototype.get_IsReferenceSetExplicit, null);
JSIL.MakeProperty(System.Runtime.Serialization.DataContractAttribute.prototype, "Namespace", 
	System.Runtime.Serialization.DataContractAttribute.prototype.get_Namespace, System.Runtime.Serialization.DataContractAttribute.prototype.set_Namespace);
JSIL.MakeProperty(System.Runtime.Serialization.DataContractAttribute.prototype, "IsNamespaceSetExplicit", 
	System.Runtime.Serialization.DataContractAttribute.prototype.get_IsNamespaceSetExplicit, null);
JSIL.MakeProperty(System.Runtime.Serialization.DataContractAttribute.prototype, "Name", 
	System.Runtime.Serialization.DataContractAttribute.prototype.get_Name, System.Runtime.Serialization.DataContractAttribute.prototype.set_Name);
JSIL.MakeProperty(System.Runtime.Serialization.DataContractAttribute.prototype, "IsNameSetExplicit", 
	System.Runtime.Serialization.DataContractAttribute.prototype.get_IsNameSetExplicit, null);
System.Runtime.Serialization.DataContractAttribute.prototype.name = null;
System.Runtime.Serialization.DataContractAttribute.prototype.ns = null;
System.Runtime.Serialization.DataContractAttribute.prototype.isNameSetExplicit = false;
System.Runtime.Serialization.DataContractAttribute.prototype.isNamespaceSetExplicit = false;
System.Runtime.Serialization.DataContractAttribute.prototype.isReference = false;
System.Runtime.Serialization.DataContractAttribute.prototype.isReferenceSetExplicit = false;

System.Runtime.Serialization.DataMemberAttribute.prototype._ctor = function () {
	this.order = -1;
	this.emitDefaultValue = true;
	System.Attribute.prototype._ctor.call(this);
};
System.Runtime.Serialization.DataMemberAttribute.prototype.get_Name = function () {
	return this.name;
};
System.Runtime.Serialization.DataMemberAttribute.prototype.set_Name = function (value) {
	this.name = value;
	this.isNameSetExplicit = true;
};
System.Runtime.Serialization.DataMemberAttribute.prototype.get_IsNameSetExplicit = function () {
	return this.isNameSetExplicit;
};
System.Runtime.Serialization.DataMemberAttribute.prototype.get_Order = function () {
	return this.order;
};
System.Runtime.Serialization.DataMemberAttribute.prototype.set_Order = function (value) {
	if (value < 0) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Runtime.Serialization.InvalidDataContractException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$2("OrderCannotBeNegative")]));
	}
	this.order = value;
};
System.Runtime.Serialization.DataMemberAttribute.prototype.get_IsRequired = function () {
	return this.isRequired;
};
System.Runtime.Serialization.DataMemberAttribute.prototype.set_IsRequired = function (value) {
	this.isRequired = value;
};
System.Runtime.Serialization.DataMemberAttribute.prototype.get_EmitDefaultValue = function () {
	return this.emitDefaultValue;
};
System.Runtime.Serialization.DataMemberAttribute.prototype.set_EmitDefaultValue = function (value) {
	this.emitDefaultValue = value;
};
JSIL.MakeProperty(System.Runtime.Serialization.DataMemberAttribute.prototype, "Name", 
	System.Runtime.Serialization.DataMemberAttribute.prototype.get_Name, System.Runtime.Serialization.DataMemberAttribute.prototype.set_Name);
JSIL.MakeProperty(System.Runtime.Serialization.DataMemberAttribute.prototype, "IsNameSetExplicit", 
	System.Runtime.Serialization.DataMemberAttribute.prototype.get_IsNameSetExplicit, null);
JSIL.MakeProperty(System.Runtime.Serialization.DataMemberAttribute.prototype, "Order", 
	System.Runtime.Serialization.DataMemberAttribute.prototype.get_Order, System.Runtime.Serialization.DataMemberAttribute.prototype.set_Order);
JSIL.MakeProperty(System.Runtime.Serialization.DataMemberAttribute.prototype, "IsRequired", 
	System.Runtime.Serialization.DataMemberAttribute.prototype.get_IsRequired, System.Runtime.Serialization.DataMemberAttribute.prototype.set_IsRequired);
JSIL.MakeProperty(System.Runtime.Serialization.DataMemberAttribute.prototype, "EmitDefaultValue", 
	System.Runtime.Serialization.DataMemberAttribute.prototype.get_EmitDefaultValue, System.Runtime.Serialization.DataMemberAttribute.prototype.set_EmitDefaultValue);
System.Runtime.Serialization.DataMemberAttribute.prototype.name = null;
System.Runtime.Serialization.DataMemberAttribute.prototype.isNameSetExplicit = false;
System.Runtime.Serialization.DataMemberAttribute.prototype.order = 0;
System.Runtime.Serialization.DataMemberAttribute.prototype.isRequired = false;
System.Runtime.Serialization.DataMemberAttribute.prototype.emitDefaultValue = false;

System.Runtime.Serialization.EnumMemberAttribute.prototype._ctor = function () {
	System.Attribute.prototype._ctor.call(this);
};
System.Runtime.Serialization.EnumMemberAttribute.prototype.get_Value = function () {
	return this.value;
};
System.Runtime.Serialization.EnumMemberAttribute.prototype.set_Value = function (value) {
	this.value = value;
	this.isValueSetExplicit = true;
};
System.Runtime.Serialization.EnumMemberAttribute.prototype.get_IsValueSetExplicit = function () {
	return this.isValueSetExplicit;
};
JSIL.MakeProperty(System.Runtime.Serialization.EnumMemberAttribute.prototype, "Value", 
	System.Runtime.Serialization.EnumMemberAttribute.prototype.get_Value, System.Runtime.Serialization.EnumMemberAttribute.prototype.set_Value);
JSIL.MakeProperty(System.Runtime.Serialization.EnumMemberAttribute.prototype, "IsValueSetExplicit", 
	System.Runtime.Serialization.EnumMemberAttribute.prototype.get_IsValueSetExplicit, null);
System.Runtime.Serialization.EnumMemberAttribute.prototype.value = null;
System.Runtime.Serialization.EnumMemberAttribute.prototype.isValueSetExplicit = false;

System.Runtime.Serialization.CollectionDataContractAttribute.prototype._ctor = function () {
	System.Attribute.prototype._ctor.call(this);
};
System.Runtime.Serialization.CollectionDataContractAttribute.prototype.get_Namespace = function () {
	return this.ns;
};
System.Runtime.Serialization.CollectionDataContractAttribute.prototype.set_Namespace = function (value) {
	this.ns = value;
	this.isNamespaceSetExplicit = true;
};
System.Runtime.Serialization.CollectionDataContractAttribute.prototype.get_IsNamespaceSetExplicit = function () {
	return this.isNamespaceSetExplicit;
};
System.Runtime.Serialization.CollectionDataContractAttribute.prototype.get_Name = function () {
	return this.name;
};
System.Runtime.Serialization.CollectionDataContractAttribute.prototype.set_Name = function (value) {
	this.name = value;
	this.isNameSetExplicit = true;
};
System.Runtime.Serialization.CollectionDataContractAttribute.prototype.get_IsNameSetExplicit = function () {
	return this.isNameSetExplicit;
};
System.Runtime.Serialization.CollectionDataContractAttribute.prototype.get_ItemName = function () {
	return this.itemName;
};
System.Runtime.Serialization.CollectionDataContractAttribute.prototype.set_ItemName = function (value) {
	this.itemName = value;
	this.isItemNameSetExplicit = true;
};
System.Runtime.Serialization.CollectionDataContractAttribute.prototype.get_IsItemNameSetExplicit = function () {
	return this.isItemNameSetExplicit;
};
System.Runtime.Serialization.CollectionDataContractAttribute.prototype.get_KeyName = function () {
	return this.keyName;
};
System.Runtime.Serialization.CollectionDataContractAttribute.prototype.set_KeyName = function (value) {
	this.keyName = value;
	this.isKeyNameSetExplicit = true;
};
System.Runtime.Serialization.CollectionDataContractAttribute.prototype.get_IsReference = function () {
	return this.isReference;
};
System.Runtime.Serialization.CollectionDataContractAttribute.prototype.set_IsReference = function (value) {
	this.isReference = value;
	this.isReferenceSetExplicit = true;
};
System.Runtime.Serialization.CollectionDataContractAttribute.prototype.get_IsReferenceSetExplicit = function () {
	return this.isReferenceSetExplicit;
};
System.Runtime.Serialization.CollectionDataContractAttribute.prototype.get_IsKeyNameSetExplicit = function () {
	return this.isKeyNameSetExplicit;
};
System.Runtime.Serialization.CollectionDataContractAttribute.prototype.get_ValueName = function () {
	return this.valueName;
};
System.Runtime.Serialization.CollectionDataContractAttribute.prototype.set_ValueName = function (value) {
	this.valueName = value;
	this.isValueNameSetExplicit = true;
};
System.Runtime.Serialization.CollectionDataContractAttribute.prototype.get_IsValueNameSetExplicit = function () {
	return this.isValueNameSetExplicit;
};
JSIL.MakeProperty(System.Runtime.Serialization.CollectionDataContractAttribute.prototype, "Namespace", 
	System.Runtime.Serialization.CollectionDataContractAttribute.prototype.get_Namespace, System.Runtime.Serialization.CollectionDataContractAttribute.prototype.set_Namespace);
JSIL.MakeProperty(System.Runtime.Serialization.CollectionDataContractAttribute.prototype, "IsNamespaceSetExplicit", 
	System.Runtime.Serialization.CollectionDataContractAttribute.prototype.get_IsNamespaceSetExplicit, null);
JSIL.MakeProperty(System.Runtime.Serialization.CollectionDataContractAttribute.prototype, "Name", 
	System.Runtime.Serialization.CollectionDataContractAttribute.prototype.get_Name, System.Runtime.Serialization.CollectionDataContractAttribute.prototype.set_Name);
JSIL.MakeProperty(System.Runtime.Serialization.CollectionDataContractAttribute.prototype, "IsNameSetExplicit", 
	System.Runtime.Serialization.CollectionDataContractAttribute.prototype.get_IsNameSetExplicit, null);
JSIL.MakeProperty(System.Runtime.Serialization.CollectionDataContractAttribute.prototype, "ItemName", 
	System.Runtime.Serialization.CollectionDataContractAttribute.prototype.get_ItemName, System.Runtime.Serialization.CollectionDataContractAttribute.prototype.set_ItemName);
JSIL.MakeProperty(System.Runtime.Serialization.CollectionDataContractAttribute.prototype, "IsItemNameSetExplicit", 
	System.Runtime.Serialization.CollectionDataContractAttribute.prototype.get_IsItemNameSetExplicit, null);
JSIL.MakeProperty(System.Runtime.Serialization.CollectionDataContractAttribute.prototype, "KeyName", 
	System.Runtime.Serialization.CollectionDataContractAttribute.prototype.get_KeyName, System.Runtime.Serialization.CollectionDataContractAttribute.prototype.set_KeyName);
JSIL.MakeProperty(System.Runtime.Serialization.CollectionDataContractAttribute.prototype, "IsReference", 
	System.Runtime.Serialization.CollectionDataContractAttribute.prototype.get_IsReference, System.Runtime.Serialization.CollectionDataContractAttribute.prototype.set_IsReference);
JSIL.MakeProperty(System.Runtime.Serialization.CollectionDataContractAttribute.prototype, "IsReferenceSetExplicit", 
	System.Runtime.Serialization.CollectionDataContractAttribute.prototype.get_IsReferenceSetExplicit, null);
JSIL.MakeProperty(System.Runtime.Serialization.CollectionDataContractAttribute.prototype, "IsKeyNameSetExplicit", 
	System.Runtime.Serialization.CollectionDataContractAttribute.prototype.get_IsKeyNameSetExplicit, null);
JSIL.MakeProperty(System.Runtime.Serialization.CollectionDataContractAttribute.prototype, "ValueName", 
	System.Runtime.Serialization.CollectionDataContractAttribute.prototype.get_ValueName, System.Runtime.Serialization.CollectionDataContractAttribute.prototype.set_ValueName);
JSIL.MakeProperty(System.Runtime.Serialization.CollectionDataContractAttribute.prototype, "IsValueNameSetExplicit", 
	System.Runtime.Serialization.CollectionDataContractAttribute.prototype.get_IsValueNameSetExplicit, null);
System.Runtime.Serialization.CollectionDataContractAttribute.prototype.name = null;
System.Runtime.Serialization.CollectionDataContractAttribute.prototype.ns = null;
System.Runtime.Serialization.CollectionDataContractAttribute.prototype.itemName = null;
System.Runtime.Serialization.CollectionDataContractAttribute.prototype.keyName = null;
System.Runtime.Serialization.CollectionDataContractAttribute.prototype.valueName = null;
System.Runtime.Serialization.CollectionDataContractAttribute.prototype.isReference = false;
System.Runtime.Serialization.CollectionDataContractAttribute.prototype.isNameSetExplicit = false;
System.Runtime.Serialization.CollectionDataContractAttribute.prototype.isNamespaceSetExplicit = false;
System.Runtime.Serialization.CollectionDataContractAttribute.prototype.isReferenceSetExplicit = false;
System.Runtime.Serialization.CollectionDataContractAttribute.prototype.isItemNameSetExplicit = false;
System.Runtime.Serialization.CollectionDataContractAttribute.prototype.isKeyNameSetExplicit = false;
System.Runtime.Serialization.CollectionDataContractAttribute.prototype.isValueNameSetExplicit = false;

System.Runtime.Serialization.InvalidDataContractException.prototype._ctor$0 = function () {
	System.Exception.prototype._ctor.call(this);
};
System.Runtime.Serialization.InvalidDataContractException.prototype._ctor$1 = function (message) {
	System.Exception.prototype._ctor.call(this, message);
};
System.Runtime.Serialization.InvalidDataContractException.prototype._ctor$2 = function (message, innerException) {
	System.Exception.prototype._ctor.call(this, message, innerException);
};
JSIL.OverloadedMethod(System.Runtime.Serialization.InvalidDataContractException.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.String]], 
		["_ctor$2", [System.String, System.Exception]]
	]);

System.Runtime.Serialization.KnownTypeAttribute.prototype._ctor$0 = function () {
	System.Attribute.prototype._ctor.call(this);
};
System.Runtime.Serialization.KnownTypeAttribute.prototype._ctor$1 = function (type) {
	System.Attribute.prototype._ctor.call(this);
	this.type = type;
};
System.Runtime.Serialization.KnownTypeAttribute.prototype._ctor$2 = function (methodName) {
	System.Attribute.prototype._ctor.call(this);
	this.methodName = methodName;
};
System.Runtime.Serialization.KnownTypeAttribute.prototype.get_MethodName = function () {
	return this.methodName;
};
System.Runtime.Serialization.KnownTypeAttribute.prototype.get_Type = function () {
	return this.type;
};
JSIL.OverloadedMethod(System.Runtime.Serialization.KnownTypeAttribute.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Type]], 
		["_ctor$2", [System.String]]
	]);
JSIL.MakeProperty(System.Runtime.Serialization.KnownTypeAttribute.prototype, "MethodName", 
	System.Runtime.Serialization.KnownTypeAttribute.prototype.get_MethodName, null);
JSIL.MakeProperty(System.Runtime.Serialization.KnownTypeAttribute.prototype, "Type", 
	System.Runtime.Serialization.KnownTypeAttribute.prototype.get_Type, null);
System.Runtime.Serialization.KnownTypeAttribute.prototype.methodName = null;
System.Runtime.Serialization.KnownTypeAttribute.prototype.type = null;

System.Runtime.Serialization.ContractNamespaceAttribute.prototype._ctor = function (contractNamespace) {
	System.Attribute.prototype._ctor.call(this);
	this.contractNamespace = contractNamespace;
};
System.Runtime.Serialization.ContractNamespaceAttribute.prototype.get_ClrNamespace = function () {
	return this.clrNamespace;
};
System.Runtime.Serialization.ContractNamespaceAttribute.prototype.set_ClrNamespace = function (value) {
	this.clrNamespace = value;
};
System.Runtime.Serialization.ContractNamespaceAttribute.prototype.get_ContractNamespace = function () {
	return this.contractNamespace;
};
JSIL.MakeProperty(System.Runtime.Serialization.ContractNamespaceAttribute.prototype, "ClrNamespace", 
	System.Runtime.Serialization.ContractNamespaceAttribute.prototype.get_ClrNamespace, System.Runtime.Serialization.ContractNamespaceAttribute.prototype.set_ClrNamespace);
JSIL.MakeProperty(System.Runtime.Serialization.ContractNamespaceAttribute.prototype, "ContractNamespace", 
	System.Runtime.Serialization.ContractNamespaceAttribute.prototype.get_ContractNamespace, null);
System.Runtime.Serialization.ContractNamespaceAttribute.prototype.clrNamespace = null;
System.Runtime.Serialization.ContractNamespaceAttribute.prototype.contractNamespace = null;

$asm09.System.Runtime.Serialization.Attributes.prototype.Read = function (reader) {
	this.Reset();
__loop0__: 
	while (reader.MoveToNextAttribute()) {
		switch (reader.IndexOfLocalName($asm09.System.Runtime.Serialization.Attributes.serializationLocalNames, $asm09.System.Runtime.Serialization.DictionaryGlobals.SerializationNamespace)) {
			case 0: 
				this.ReadId(reader);
				break;
			case 1: 
				this.ReadArraySize(reader);
				break;
			case 2: 
				this.ReadRef(reader);
				break;
			case 3: 
				this.ClrType = reader.Value;
				break;
			case 4: 
				this.ClrAssembly = reader.Value;
				break;
			case 5: 
				this.ReadFactoryType(reader);
				break;
			default: 
				switch (reader.IndexOfLocalName($asm09.System.Runtime.Serialization.Attributes.schemaInstanceLocalNames, $asm09.System.Runtime.Serialization.DictionaryGlobals.SchemaInstanceNamespace)) {
					case 0: 
						this.ReadXsiNil(reader);
						break;
					case 1: 
						this.ReadXsiType(reader);
						break;
					default: 
						if (!reader.IsNamespaceUri($asm09.System.Runtime.Serialization.DictionaryGlobals.XmlnsNamespace)) {
							this.UnrecognizedAttributesFound = true;
						}
						break;
				}
				break;
		}
	}
	reader.MoveToElement();
};
$asm09.System.Runtime.Serialization.Attributes.prototype.Reset = function () {
	this.Id = $asm09.System.Runtime.Serialization.Globals.NewObjectId;
	this.Ref = $asm09.System.Runtime.Serialization.Globals.NewObjectId;
	this.XsiTypeName = null;
	this.XsiTypeNamespace = null;
	this.XsiTypePrefix = null;
	this.XsiNil = false;
	this.ClrAssembly = null;
	this.ClrType = null;
	this.ArraySZSize = -1;
	this.FactoryTypeName = null;
	this.FactoryTypeNamespace = null;
	this.FactoryTypePrefix = null;
	this.UnrecognizedAttributesFound = false;
};
$asm09.System.Runtime.Serialization.Attributes.prototype.ReadId = function (reader) {
	this.Id = reader.ReadContentAsString();
	if (System.String.IsNullOrEmpty(this.Id)) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0($asm09.System.Runtime.Serialization.SR.GetString$0("InvalidXsIdDefinition", [this.Id])));
	}
};
$asm09.System.Runtime.Serialization.Attributes.prototype.ReadRef = function (reader) {
	this.Ref = reader.ReadContentAsString();
	if (System.String.IsNullOrEmpty(this.Ref)) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0($asm09.System.Runtime.Serialization.SR.GetString$0("InvalidXsRefDefinition", [this.Ref])));
	}
};
$asm09.System.Runtime.Serialization.Attributes.prototype.ReadXsiNil = function (reader) {
	this.XsiNil = reader.ReadContentAsBoolean();
};
$asm09.System.Runtime.Serialization.Attributes.prototype.ReadArraySize = function (reader) {
	this.ArraySZSize = reader.ReadContentAsInt();
	if (this.ArraySZSize < 0) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0($asm09.System.Runtime.Serialization.SR.GetString$0("InvalidSizeDefinition", [this.ArraySZSize])));
	}
};
$asm09.System.Runtime.Serialization.Attributes.prototype.ReadXsiType = function (reader) {
	var value = reader.Value;
	if (!((value === null) || (value.length <= 0))) {
		$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.ParseQualifiedName(
			value, 
			reader, 
			/* ref */ new JSIL.MemberReference(this, "XsiTypeName"), 
			/* ref */ new JSIL.MemberReference(this, "XsiTypeNamespace"), 
			/* ref */ new JSIL.MemberReference(this, "XsiTypePrefix")
		);
	}
};
$asm09.System.Runtime.Serialization.Attributes.prototype.ReadFactoryType = function (reader) {
	var value = reader.Value;
	if (!((value === null) || (value.length <= 0))) {
		$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.ParseQualifiedName(
			value, 
			reader, 
			/* ref */ new JSIL.MemberReference(this, "FactoryTypeName"), 
			/* ref */ new JSIL.MemberReference(this, "FactoryTypeNamespace"), 
			/* ref */ new JSIL.MemberReference(this, "FactoryTypePrefix")
		);
	}
};
$asm09.System.Runtime.Serialization.Attributes.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm09.System.Runtime.Serialization.Attributes.serializationLocalNames = null;
$asm09.System.Runtime.Serialization.Attributes.schemaInstanceLocalNames = null;
$asm09.System.Runtime.Serialization.Attributes.prototype.Id = null;
$asm09.System.Runtime.Serialization.Attributes.prototype.Ref = null;
$asm09.System.Runtime.Serialization.Attributes.prototype.XsiTypeName = null;
$asm09.System.Runtime.Serialization.Attributes.prototype.XsiTypeNamespace = null;
$asm09.System.Runtime.Serialization.Attributes.prototype.XsiTypePrefix = null;
$asm09.System.Runtime.Serialization.Attributes.prototype.XsiNil = false;
$asm09.System.Runtime.Serialization.Attributes.prototype.ClrAssembly = null;
$asm09.System.Runtime.Serialization.Attributes.prototype.ClrType = null;
$asm09.System.Runtime.Serialization.Attributes.prototype.ArraySZSize = 0;
$asm09.System.Runtime.Serialization.Attributes.prototype.FactoryTypeName = null;
$asm09.System.Runtime.Serialization.Attributes.prototype.FactoryTypeNamespace = null;
$asm09.System.Runtime.Serialization.Attributes.prototype.FactoryTypePrefix = null;
$asm09.System.Runtime.Serialization.Attributes.prototype.UnrecognizedAttributesFound = false;
System.Runtime.Serialization.Attributes._cctor = function () {
	System.Runtime.Serialization.Attributes.serializationLocalNames = JSIL.Array.New(System.Xml.XmlDictionaryString, [System.Runtime.Serialization.DictionaryGlobals.IdLocalName, System.Runtime.Serialization.DictionaryGlobals.ArraySizeLocalName, System.Runtime.Serialization.DictionaryGlobals.RefLocalName, System.Runtime.Serialization.DictionaryGlobals.ClrTypeLocalName, System.Runtime.Serialization.DictionaryGlobals.ClrAssemblyLocalName]);
	System.Runtime.Serialization.Attributes.schemaInstanceLocalNames = JSIL.Array.New(System.Xml.XmlDictionaryString, [System.Runtime.Serialization.DictionaryGlobals.XsiNilLocalName, System.Runtime.Serialization.DictionaryGlobals.XsiTypeLocalName]);
};

$asm09.System.Runtime.Serialization.CodeGenerator.get_GetTypeFromHandle = function () {
	if ($asm09.System.Runtime.Serialization.CodeGenerator.getTypeFromHandle === null) {
		$asm09.System.Runtime.Serialization.CodeGenerator.getTypeFromHandle = System.Type.GetMethod$5("GetTypeFromHandle");
	}
	return $asm09.System.Runtime.Serialization.CodeGenerator.getTypeFromHandle;
};
$asm09.System.Runtime.Serialization.CodeGenerator.get_ObjectEquals = function () {
	if ($asm09.System.Runtime.Serialization.CodeGenerator.objectEquals === null) {
		$asm09.System.Runtime.Serialization.CodeGenerator.objectEquals = System.Runtime.Serialization.Globals.TypeOfObject.GetMethod$4("Equals", (System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
	}
	return $asm09.System.Runtime.Serialization.CodeGenerator.objectEquals;
};
$asm09.System.Runtime.Serialization.CodeGenerator.get_ArraySetValue = function () {
	if ($asm09.System.Runtime.Serialization.CodeGenerator.arraySetValue === null) {
		$asm09.System.Runtime.Serialization.CodeGenerator.arraySetValue = System.Array.GetMethod$3("SetValue", JSIL.Array.New(System.Type, [System.Object, System.Int32]));
	}
	return $asm09.System.Runtime.Serialization.CodeGenerator.arraySetValue;
};
$asm09.System.Runtime.Serialization.CodeGenerator.get_SerializationModule = function () {
	if ($asm09.System.Runtime.Serialization.CodeGenerator.serializationModule === null) {
		$asm09.System.Runtime.Serialization.CodeGenerator.serializationModule = $asm09.System.Runtime.Serialization.CodeGenerator.Module;
	}
	return $asm09.System.Runtime.Serialization.CodeGenerator.serializationModule;
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype._ctor = function () {
	this.LocalNames = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.Reflection.Emit.LocalBuilder, System.String), "_ctor$0", []);
	System.Object.prototype._ctor.call(this);
	this.codeGenTrace = $asm09.System.Runtime.Serialization.CodeGenerator.CodeGenTrace.None;
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.BeginMethod$0 = function (dynamicMethod, delegateType, methodName, argTypes, allowPrivateMemberAccess) {
	this.dynamicMethod = dynamicMethod;
	this.ilGen = this.dynamicMethod.GetILGenerator$0();
	this.delegateType = delegateType;
	this.InitILGeneration(methodName, argTypes);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.BeginMethod$1 = function (methodName, delegateType, allowPrivateMemberAccess) {
	var method = delegateType.GetMethod$5("Invoke");
	var parameters = method.GetParameters();
	var array = JSIL.Array.New(System.Type, parameters.length);
__loop0__: 
	for (var i = 0; i < parameters.length; ++i) {
		array[i] = parameters[i].ParameterType;
	}
	this.BeginMethod$2(method.ReturnType, methodName, array, allowPrivateMemberAccess);
	this.delegateType = delegateType;
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.BeginMethod$2 = function (returnType, methodName, argTypes, allowPrivateMemberAccess) {
	$asm09.System.Runtime.Serialization.CodeGenerator.DisallowMemberAccess(allowPrivateMemberAccess);
	this.dynamicMethod = JSIL.New(System.Reflection.Emit.DynamicMethod, "_ctor$3", [methodName, returnType, argTypes, $asm09.System.Runtime.Serialization.CodeGenerator.SerializationModule]);
	this.ilGen = this.dynamicMethod.GetILGenerator$0();
	this.InitILGeneration(methodName, argTypes);
};
$asm09.System.Runtime.Serialization.CodeGenerator.DisallowMemberAccess = function (memberAccess) {
	if (memberAccess) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Security.SecurityException, "_ctor$0", []));
	}
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.InitILGeneration = function (methodName, argTypes) {
	this.methodEndLabel = this.ilGen.DefineLabel().MemberwiseClone();
	this.blockStack = JSIL.New(System.Collections.Generic.Stack$b1.Of(System.Object), "_ctor$0", []);
	this.argList = new (System.Collections.Generic.List$b1.Of($asm09.System.Runtime.Serialization.ArgBuilder)) ();
__loop0__: 
	for (var i = 0; i < argTypes.length; ++i) {
		this.argList.Add(new $asm09.System.Runtime.Serialization.ArgBuilder(i, argTypes[i]));
	}
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.EndMethod = function () {
	this.MarkLabel(this.methodEndLabel.MemberwiseClone());
	this.Ret();
	var result = this.dynamicMethod.CreateDelegate$0(this.delegateType);
	this.dynamicMethod = null;
	this.delegateType = null;
	this.ilGen = null;
	this.blockStack = null;
	this.argList = null;
	return result;
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.get_CurrentMethod = function () {
	return this.dynamicMethod;
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.GetArg = function (index) {
	return this.argList.get_Item(index);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.GetVariableType = function ($var) {
	if (JSIL.TryCast($var, $asm09.System.Runtime.Serialization.ArgBuilder) !== null) {
		return JSIL.Cast($var, $asm09.System.Runtime.Serialization.ArgBuilder).ArgType;
	}
	if (JSIL.TryCast($var, System.Reflection.Emit.LocalBuilder) !== null) {
		return JSIL.Cast($var, System.Reflection.Emit.LocalBuilder).LocalType;
	}
	return JSIL.GetType($var);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.DeclareLocal$0 = function (type, name, initialValue) {
	var localBuilder = this.DeclareLocal$1(type, name);
	this.Load(initialValue);
	this.Store(localBuilder);
	return localBuilder;
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.DeclareLocal$1 = function (type, name) {
	return this.DeclareLocal$2(type, name, false);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.DeclareLocal$2 = function (type, name, isPinned) {
	var localBuilder = this.ilGen.DeclareLocal$1(type, isPinned);
	if (this.codeGenTrace !== 0) {
		this.LocalNames.set_Item(localBuilder, name);
	}
	return localBuilder;
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Set = function (local, value) {
	this.Load(value);
	this.Store(local);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.For = function (local, start, end) {
	var forState = new $asm09.System.Runtime.Serialization.ForState(local, this.DefineLabel(), this.DefineLabel(), end);
	if (forState.Index !== null) {
		this.Load(start);
		this.Stloc(forState.Index);
		this.Br(forState.TestLabel.MemberwiseClone());
	}
	this.MarkLabel(forState.BeginLabel.MemberwiseClone());
	this.blockStack.Push(forState);
	return forState;
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.EndFor = function () {
	var obj = this.blockStack.Pop();
	var forState = JSIL.TryCast(obj, $asm09.System.Runtime.Serialization.ForState);
	if (forState === null) {
		this.ThrowMismatchException(obj);
	}
	if (forState.Index !== null) {
		this.Ldloc(forState.Index);
		this.Ldc$2(1);
		this.Add();
		this.Stloc(forState.Index);
		this.MarkLabel(forState.TestLabel.MemberwiseClone());
		this.Ldloc(forState.Index);
		this.Load(forState.End);
		if (this.GetVariableType(forState.End).IsArray) {
			this.Ldlen();
		}
		this.Blt(forState.BeginLabel.MemberwiseClone());
	} else {
		this.Br(forState.BeginLabel.MemberwiseClone());
	}
	if (forState.RequiresEndLabel) {
		this.MarkLabel(forState.EndLabel.MemberwiseClone());
	}
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Break = function (forState) {
	this.InternalBreakFor(forState, System.Reflection.Emit.OpCodes.Br.MemberwiseClone());
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.IfFalseBreak = function (forState) {
	this.InternalBreakFor(forState, System.Reflection.Emit.OpCodes.Brfalse.MemberwiseClone());
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.InternalBreakFor = function (userForState, branchInstruction) {
	var enumerator = this.blockStack.GetEnumerator().MemberwiseClone();
	try {
	__loop0__: 
		while (enumerator.MoveNext()) {
			var current = enumerator.Current;
			var forState = JSIL.TryCast(current, $asm09.System.Runtime.Serialization.ForState);
			if (!((forState === null) || (forState !== JSIL.Cast(userForState, $asm09.System.Runtime.Serialization.ForState)))) {
				if (!forState.RequiresEndLabel) {
					(forState.EndLabel = this.DefineLabel().MemberwiseClone());
					forState.RequiresEndLabel = true;
				}
				this.ilGen.Emit$11(branchInstruction, forState.EndLabel.MemberwiseClone());
				break __loop0__;
			}
		}
	} finally {
		enumerator.IDisposable_Dispose();
	}
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.ForEach = function (local, elementType, enumeratorType, enumerator, getCurrentMethod) {
	var forState = new $asm09.System.Runtime.Serialization.ForState(local, this.DefineLabel(), this.DefineLabel(), enumerator);
	this.Br(forState.TestLabel.MemberwiseClone());
	this.MarkLabel(forState.BeginLabel.MemberwiseClone());
	this.Call$0(enumerator, getCurrentMethod);
	this.ConvertValue(elementType, this.GetVariableType(local));
	this.Stloc(local);
	this.blockStack.Push(forState);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.EndForEach = function (moveNextMethod) {
	var obj = this.blockStack.Pop();
	var forState = JSIL.TryCast(obj, $asm09.System.Runtime.Serialization.ForState);
	if (forState === null) {
		this.ThrowMismatchException(obj);
	}
	this.MarkLabel(forState.TestLabel.MemberwiseClone());
	var end = forState.End;
	this.Call$0(end, moveNextMethod);
	this.Brtrue(forState.BeginLabel.MemberwiseClone());
	if (forState.RequiresEndLabel) {
		this.MarkLabel(forState.EndLabel.MemberwiseClone());
	}
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.IfNotDefaultValue = function (value) {
	var variableType = this.GetVariableType(value);
	var typeCode = System.Type.GetTypeCode(variableType);
	if (!(!((typeCode === System.TypeCode.Object) && 
				variableType.IsValueType) && 
			(typeCode !== System.TypeCode.DateTime) && (typeCode !== System.TypeCode.Decimal))) {
		this.LoadDefaultValue(variableType);
		this.ConvertValue(variableType, System.Runtime.Serialization.Globals.TypeOfObject);
		this.Load(value);
		this.ConvertValue(variableType, System.Runtime.Serialization.Globals.TypeOfObject);
		this.Call$7($asm09.System.Runtime.Serialization.CodeGenerator.ObjectEquals);
		this.IfNot();
		return;
	}
	this.LoadDefaultValue(variableType);
	this.Load(value);
	this.If$1($asm09.System.Runtime.Serialization.Cmp.NotEqualTo);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.If$0 = function () {
	this.InternalIf(false);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.IfNot = function () {
	this.InternalIf(true);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.GetBranchCode = function (cmp) {
	switch (Number(cmp)) {
		case 0: 
			return System.Reflection.Emit.OpCodes.Bge;
		case 1: 
			return System.Reflection.Emit.OpCodes.Bne_Un;
		case 2: 
			return System.Reflection.Emit.OpCodes.Bgt;
		case 3: 
			return System.Reflection.Emit.OpCodes.Ble;
		case 4: 
			return System.Reflection.Emit.OpCodes.Beq;
		default: 
			return System.Reflection.Emit.OpCodes.Blt;
	}
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.If$1 = function (cmpOp) {
	var ifState = new $asm09.System.Runtime.Serialization.IfState();
	(ifState.EndIf = this.DefineLabel().MemberwiseClone());
	(ifState.ElseBegin = this.DefineLabel().MemberwiseClone());
	this.ilGen.Emit$11(this.GetBranchCode(cmpOp).MemberwiseClone(), ifState.ElseBegin.MemberwiseClone());
	this.blockStack.Push(ifState);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.If$2 = function (value1, cmpOp, value2) {
	this.Load(value1);
	this.Load(value2);
	this.If$1(cmpOp);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Else = function () {
	var ifState = this.PopIfState();
	this.Br(ifState.EndIf.MemberwiseClone());
	this.MarkLabel(ifState.ElseBegin.MemberwiseClone());
	(ifState.ElseBegin = ifState.EndIf.MemberwiseClone());
	this.blockStack.Push(ifState);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.ElseIf = function (value1, cmpOp, value2) {
	var ifState = JSIL.Cast(this.blockStack.Pop(), $asm09.System.Runtime.Serialization.IfState);
	this.Br(ifState.EndIf.MemberwiseClone());
	this.MarkLabel(ifState.ElseBegin.MemberwiseClone());
	this.Load(value1);
	this.Load(value2);
	(ifState.ElseBegin = this.DefineLabel().MemberwiseClone());
	this.ilGen.Emit$11(this.GetBranchCode(cmpOp).MemberwiseClone(), ifState.ElseBegin.MemberwiseClone());
	this.blockStack.Push(ifState);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.EndIf = function () {
	var ifState = this.PopIfState();
	if (!ifState.ElseBegin.Equals$1(ifState.EndIf.MemberwiseClone())) {
		this.MarkLabel(ifState.ElseBegin.MemberwiseClone());
	}
	this.MarkLabel(ifState.EndIf.MemberwiseClone());
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.VerifyParameterCount = function (methodInfo, expectedCount) {
	if (methodInfo.GetParameters().length !== expectedCount) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0($asm09.System.Runtime.Serialization.SR.GetString$0("ParameterCountMismatch", [methodInfo.Name, methodInfo.GetParameters().length, expectedCount])));
	}
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Call$0 = function (thisObj, methodInfo) {
	this.VerifyParameterCount(methodInfo, 0);
	this.LoadThis(thisObj, methodInfo);
	this.Call$7(methodInfo);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Call$1 = function (thisObj, methodInfo, param1) {
	this.VerifyParameterCount(methodInfo, 1);
	this.LoadThis(thisObj, methodInfo);
	this.LoadParam(param1, 1, methodInfo);
	this.Call$7(methodInfo);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Call$2 = function (thisObj, methodInfo, param1, param2) {
	this.VerifyParameterCount(methodInfo, 2);
	this.LoadThis(thisObj, methodInfo);
	this.LoadParam(param1, 1, methodInfo);
	this.LoadParam(param2, 2, methodInfo);
	this.Call$7(methodInfo);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Call$3 = function (thisObj, methodInfo, param1, param2, param3) {
	this.VerifyParameterCount(methodInfo, 3);
	this.LoadThis(thisObj, methodInfo);
	this.LoadParam(param1, 1, methodInfo);
	this.LoadParam(param2, 2, methodInfo);
	this.LoadParam(param3, 3, methodInfo);
	this.Call$7(methodInfo);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Call$4 = function (thisObj, methodInfo, param1, param2, param3, param4) {
	this.VerifyParameterCount(methodInfo, 4);
	this.LoadThis(thisObj, methodInfo);
	this.LoadParam(param1, 1, methodInfo);
	this.LoadParam(param2, 2, methodInfo);
	this.LoadParam(param3, 3, methodInfo);
	this.LoadParam(param4, 4, methodInfo);
	this.Call$7(methodInfo);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Call$5 = function (thisObj, methodInfo, param1, param2, param3, param4, param5) {
	this.VerifyParameterCount(methodInfo, 5);
	this.LoadThis(thisObj, methodInfo);
	this.LoadParam(param1, 1, methodInfo);
	this.LoadParam(param2, 2, methodInfo);
	this.LoadParam(param3, 3, methodInfo);
	this.LoadParam(param4, 4, methodInfo);
	this.LoadParam(param5, 5, methodInfo);
	this.Call$7(methodInfo);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Call$6 = function (thisObj, methodInfo, param1, param2, param3, param4, param5, param6) {
	this.VerifyParameterCount(methodInfo, 6);
	this.LoadThis(thisObj, methodInfo);
	this.LoadParam(param1, 1, methodInfo);
	this.LoadParam(param2, 2, methodInfo);
	this.LoadParam(param3, 3, methodInfo);
	this.LoadParam(param4, 4, methodInfo);
	this.LoadParam(param5, 5, methodInfo);
	this.LoadParam(param6, 6, methodInfo);
	this.Call$7(methodInfo);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Call$7 = function (methodInfo) {
	if (!(!methodInfo.IsVirtual || methodInfo.DeclaringType.IsValueType)) {
		this.ilGen.Emit$5(System.Reflection.Emit.OpCodes.Callvirt.MemberwiseClone(), methodInfo);
		return;
	}
	if (methodInfo.IsStatic) {
		this.ilGen.Emit$5(System.Reflection.Emit.OpCodes.Call.MemberwiseClone(), methodInfo);
		return;
	}
	this.ilGen.Emit$5(System.Reflection.Emit.OpCodes.Call.MemberwiseClone(), methodInfo);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Call$8 = function (ctor) {
	this.ilGen.Emit$6(System.Reflection.Emit.OpCodes.Call.MemberwiseClone(), ctor);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.New = function (constructorInfo) {
	this.ilGen.Emit$6(System.Reflection.Emit.OpCodes.Newobj.MemberwiseClone(), constructorInfo);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.InitObj = function (valueType) {
	this.ilGen.Emit$7(System.Reflection.Emit.OpCodes.Initobj.MemberwiseClone(), valueType);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.NewArray = function (elementType, len) {
	this.Load(len);
	this.ilGen.Emit$7(System.Reflection.Emit.OpCodes.Newarr.MemberwiseClone(), elementType);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.LoadArrayElement = function (obj, arrayIndex) {
	var elementType = this.GetVariableType(obj).GetElementType();
	this.Load(obj);
	this.Load(arrayIndex);
	if ($asm09.System.Runtime.Serialization.CodeGenerator.IsStruct(elementType)) {
		this.Ldelema(elementType);
		this.Ldobj(elementType);
		return;
	}
	this.Ldelem(elementType);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.StoreArrayElement = function (obj, arrayIndex, value) {
	var variableType = this.GetVariableType(obj);
	if (variableType === System.Runtime.Serialization.Globals.TypeOfArray) {
		this.Call$2(obj, $asm09.System.Runtime.Serialization.CodeGenerator.ArraySetValue, value, arrayIndex);
		return;
	}
	var elementType = variableType.GetElementType();
	this.Load(obj);
	this.Load(arrayIndex);
	if ($asm09.System.Runtime.Serialization.CodeGenerator.IsStruct(elementType)) {
		this.Ldelema(elementType);
	}
	this.Load(value);
	this.ConvertValue(this.GetVariableType(value), elementType);
	if ($asm09.System.Runtime.Serialization.CodeGenerator.IsStruct(elementType)) {
		this.Stobj(elementType);
		return;
	}
	this.Stelem(elementType);
};
$asm09.System.Runtime.Serialization.CodeGenerator.IsStruct = function (objType) {
	return (objType.IsValueType && !objType.IsPrimitive);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.LoadMember = function (memberInfo) {
	var type = null;
	if (memberInfo.MemberType === System.Reflection.MemberTypes.Field) {
		var fieldInfo = JSIL.Cast(memberInfo, System.Reflection.FieldInfo);
		type = fieldInfo.FieldType;
		if (fieldInfo.IsStatic) {
			this.ilGen.Emit$13(System.Reflection.Emit.OpCodes.Ldsfld.MemberwiseClone(), fieldInfo);
		} else {
			this.ilGen.Emit$13(System.Reflection.Emit.OpCodes.Ldfld.MemberwiseClone(), fieldInfo);
		}
	} else if (memberInfo.MemberType === System.Reflection.MemberTypes.Property) {
		var propertyInfo = JSIL.TryCast(memberInfo, System.Reflection.PropertyInfo);
		type = propertyInfo.PropertyType;
		if (propertyInfo !== null) {
			var getMethod = propertyInfo.GetGetMethod$0(true);
			if (getMethod === null) {
				throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0($asm09.System.Runtime.Serialization.SR.GetString$0("NoGetMethodForProperty", [propertyInfo.DeclaringType, propertyInfo])));
			}
			this.Call$7(getMethod);
		}
	} else {
		if (memberInfo.MemberType !== System.Reflection.MemberTypes.Method) {
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0($asm09.System.Runtime.Serialization.SR.GetString$0("CannotLoadMemberType", [memberInfo.MemberType, memberInfo.DeclaringType, memberInfo.Name])));
		}
		var methodInfo = JSIL.Cast(memberInfo, System.Reflection.MethodInfo);
		type = methodInfo.ReturnType;
		this.Call$7(methodInfo);
	}
	this.EmitStackTop(type);
	return type;
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.StoreMember = function (memberInfo) {
	if (memberInfo.MemberType === System.Reflection.MemberTypes.Field) {
		var fieldInfo = JSIL.Cast(memberInfo, System.Reflection.FieldInfo);
		if (fieldInfo.IsStatic) {
			this.ilGen.Emit$13(System.Reflection.Emit.OpCodes.Stsfld.MemberwiseClone(), fieldInfo);
			return;
		}
		this.ilGen.Emit$13(System.Reflection.Emit.OpCodes.Stfld.MemberwiseClone(), fieldInfo);
		return;
	} else if (memberInfo.MemberType === System.Reflection.MemberTypes.Property) {
		var propertyInfo = JSIL.TryCast(memberInfo, System.Reflection.PropertyInfo);
		if (propertyInfo === null) {
			return;
		}
		var setMethod = propertyInfo.GetSetMethod$0(true);
		if (setMethod === null) {
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0($asm09.System.Runtime.Serialization.SR.GetString$0("NoSetMethodForProperty", [propertyInfo.DeclaringType, propertyInfo])));
		}
		this.Call$7(setMethod);
		return;
	} else {
		if (memberInfo.MemberType === System.Reflection.MemberTypes.Method) {
			this.Call$7(JSIL.Cast(memberInfo, System.Reflection.MethodInfo));
			return;
		}
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0($asm09.System.Runtime.Serialization.SR.GetString$0("CannotLoadMemberType", [memberInfo.MemberType])));
	}
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.LoadDefaultValue = function (type) {
	if (type.IsValueType) {
		switch (Number(System.Type.GetTypeCode(type))) {
			case 3: 
				this.Ldc$1(false);
				return;
			case 4: 
			case 5: 
			case 6: 
			case 7: 
			case 8: 
			case 9: 
			case 10: 
				this.Ldc$2(0);
				return;
			case 11: 
			case 12: 
				this.Ldc$3(0);
				return;
			case 13: 
				this.Ldc$4(0);
				return;
			case 14: 
				this.Ldc$5(0);
				return;
		}
		var obj = this.DeclareLocal$1(type, "zero");
		this.LoadAddress(obj);
		this.InitObj(type);
		this.Load(obj);
		return;
	}
	this.Load(null);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Load = function (obj) {
	if (obj === null) {
		this.ilGen.Emit$0(System.Reflection.Emit.OpCodes.Ldnull.MemberwiseClone());
		return;
	}
	if (JSIL.TryCast(obj, $asm09.System.Runtime.Serialization.ArgBuilder) !== null) {
		this.Ldarg$0(JSIL.Cast(obj, $asm09.System.Runtime.Serialization.ArgBuilder));
		return;
	}
	if (JSIL.TryCast(obj, System.Reflection.Emit.LocalBuilder) !== null) {
		this.Ldloc(JSIL.Cast(obj, System.Reflection.Emit.LocalBuilder));
		return;
	}
	this.Ldc$0(obj);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Store = function ($var) {
	if (JSIL.TryCast($var, $asm09.System.Runtime.Serialization.ArgBuilder) !== null) {
		this.Starg$0(JSIL.Cast($var, $asm09.System.Runtime.Serialization.ArgBuilder));
		return;
	}
	if (JSIL.TryCast($var, System.Reflection.Emit.LocalBuilder) !== null) {
		this.Stloc(JSIL.Cast($var, System.Reflection.Emit.LocalBuilder));
		return;
	}
	throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0($asm09.System.Runtime.Serialization.SR.GetString$0("CanOnlyStoreIntoArgOrLocGot0", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(JSIL.GetType($var))])));
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Dec = function ($var) {
	this.Load($var);
	this.Load(1);
	this.Subtract();
	this.Store($var);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.LoadAddress = function (obj) {
	if (JSIL.TryCast(obj, $asm09.System.Runtime.Serialization.ArgBuilder) !== null) {
		this.LdargAddress(JSIL.Cast(obj, $asm09.System.Runtime.Serialization.ArgBuilder));
		return;
	}
	if (JSIL.TryCast(obj, System.Reflection.Emit.LocalBuilder) !== null) {
		this.LdlocAddress(JSIL.Cast(obj, System.Reflection.Emit.LocalBuilder));
		return;
	}
	this.Load(obj);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.ConvertAddress = function (source, target) {
	this.InternalConvert(source, target, true);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.ConvertValue = function (source, target) {
	this.InternalConvert(source, target, false);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Castclass = function (target) {
	this.ilGen.Emit$7(System.Reflection.Emit.OpCodes.Castclass.MemberwiseClone(), target);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Box = function (type) {
	this.ilGen.Emit$7(System.Reflection.Emit.OpCodes.Box.MemberwiseClone(), type);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Unbox = function (type) {
	this.ilGen.Emit$7(System.Reflection.Emit.OpCodes.Unbox.MemberwiseClone(), type);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.GetLdindOpCode = function (typeCode) {
	switch (Number(typeCode)) {
		case 3: 
			return System.Reflection.Emit.OpCodes.Ldind_I1;
		case 4: 
			return System.Reflection.Emit.OpCodes.Ldind_I2;
		case 5: 
			return System.Reflection.Emit.OpCodes.Ldind_I1;
		case 6: 
			return System.Reflection.Emit.OpCodes.Ldind_U1;
		case 7: 
			return System.Reflection.Emit.OpCodes.Ldind_I2;
		case 8: 
			return System.Reflection.Emit.OpCodes.Ldind_U2;
		case 9: 
			return System.Reflection.Emit.OpCodes.Ldind_I4;
		case 10: 
			return System.Reflection.Emit.OpCodes.Ldind_U4;
		case 11: 
			return System.Reflection.Emit.OpCodes.Ldind_I8;
		case 12: 
			return System.Reflection.Emit.OpCodes.Ldind_I8;
		case 13: 
			return System.Reflection.Emit.OpCodes.Ldind_R4;
		case 14: 
			return System.Reflection.Emit.OpCodes.Ldind_R8;
		case 18: 
			return System.Reflection.Emit.OpCodes.Ldind_Ref;
	}
	return System.Reflection.Emit.OpCodes.Nop;
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Ldobj = function (type) {
	var ldindOpCode = this.GetLdindOpCode(System.Type.GetTypeCode(type)).MemberwiseClone();
	if (!ldindOpCode.Equals$1(System.Reflection.Emit.OpCodes.Nop.MemberwiseClone())) {
		this.ilGen.Emit$0(ldindOpCode.MemberwiseClone());
		return;
	}
	this.ilGen.Emit$7(System.Reflection.Emit.OpCodes.Ldobj.MemberwiseClone(), type);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Stobj = function (type) {
	this.ilGen.Emit$7(System.Reflection.Emit.OpCodes.Stobj.MemberwiseClone(), type);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Ceq = function () {
	this.ilGen.Emit$0(System.Reflection.Emit.OpCodes.Ceq.MemberwiseClone());
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Throw = function () {
	this.ilGen.Emit$0(System.Reflection.Emit.OpCodes.Throw.MemberwiseClone());
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Ldtoken = function (t) {
	this.ilGen.Emit$7(System.Reflection.Emit.OpCodes.Ldtoken.MemberwiseClone(), t);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Ldc$0 = function (o) {
	var type = (JSIL.GetType(o));
	if (JSIL.TryCast(o, System.Type) !== null) {
		this.Ldtoken(JSIL.Cast(o, System.Type));
		this.Call$7($asm09.System.Runtime.Serialization.CodeGenerator.GetTypeFromHandle);
		return;
	}
	if (type.IsEnum) {
		this.Ldc$0(JSIL.Cast(o, System.IConvertible).IConvertible_ToType(System.Enum.GetUnderlyingType(type), null));
		return;
	}
	switch (Number(System.Type.GetTypeCode(type))) {
		case 3: 
			this.Ldc$1(JSIL.Cast(o, System.Boolean));
			return;
		case 4: 
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.NotSupportedException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$2("CharIsInvalidPrimitive")]));
		case 5: 
		case 6: 
		case 7: 
		case 8: 
			this.Ldc$2(JSIL.Cast(o, System.IConvertible).IConvertible_ToInt32(System.Globalization.CultureInfo.InvariantCulture));
			return;
		case 9: 
			this.Ldc$2(JSIL.Cast(o, System.Int32));
			return;
		case 10: 
			this.Ldc$2(JSIL.Cast(o, System.UInt32));
			return;
		case 11: 
			this.Ldc$3(JSIL.Cast(o, System.Int64));
			return;
		case 12: 
			this.Ldc$3(JSIL.Cast(o, System.UInt64));
			return;
		case 13: 
			this.Ldc$4(JSIL.Cast(o, System.Single));
			return;
		case 14: 
			this.Ldc$5(JSIL.Cast(o, System.Double));
			return;
		case 18: 
			this.Ldstr(JSIL.Cast(o, System.String));
			return;
	}
	throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0($asm09.System.Runtime.Serialization.SR.GetString$0("UnknownConstantType", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(type)])));
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Ldc$1 = function (boolVar) {
	if (boolVar) {
		this.ilGen.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_1.MemberwiseClone());
		return;
	}
	this.ilGen.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_0.MemberwiseClone());
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Ldc$2 = function (intVar) {
	switch (intVar) {
		case -1: 
			this.ilGen.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_M1.MemberwiseClone());
			return;
		case 0: 
			this.ilGen.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_0.MemberwiseClone());
			return;
		case 1: 
			this.ilGen.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_1.MemberwiseClone());
			return;
		case 2: 
			this.ilGen.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_2.MemberwiseClone());
			return;
		case 3: 
			this.ilGen.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_3.MemberwiseClone());
			return;
		case 4: 
			this.ilGen.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_4.MemberwiseClone());
			return;
		case 5: 
			this.ilGen.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_5.MemberwiseClone());
			return;
		case 6: 
			this.ilGen.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_6.MemberwiseClone());
			return;
		case 7: 
			this.ilGen.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_7.MemberwiseClone());
			return;
		case 8: 
			this.ilGen.Emit$0(System.Reflection.Emit.OpCodes.Ldc_I4_8.MemberwiseClone());
			return;
		default: 
			this.ilGen.Emit$4(System.Reflection.Emit.OpCodes.Ldc_I4.MemberwiseClone(), intVar);
			return;
	}
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Ldc$3 = function (l) {
	this.ilGen.Emit$8(System.Reflection.Emit.OpCodes.Ldc_I8.MemberwiseClone(), l);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Ldc$4 = function (f) {
	this.ilGen.Emit$9(System.Reflection.Emit.OpCodes.Ldc_R4.MemberwiseClone(), f);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Ldc$5 = function (d) {
	this.ilGen.Emit$10(System.Reflection.Emit.OpCodes.Ldc_R8.MemberwiseClone(), d);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Ldstr = function (strVar) {
	this.ilGen.Emit$14(System.Reflection.Emit.OpCodes.Ldstr.MemberwiseClone(), strVar);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.LdlocAddress = function (localBuilder) {
	if (localBuilder.LocalType.IsValueType) {
		this.Ldloca(localBuilder);
		return;
	}
	this.Ldloc(localBuilder);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Ldloc = function (localBuilder) {
	this.ilGen.Emit$15(System.Reflection.Emit.OpCodes.Ldloc.MemberwiseClone(), localBuilder);
	this.EmitStackTop(localBuilder.LocalType);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Stloc = function (local) {
	this.EmitStackTop(local.LocalType);
	this.ilGen.Emit$15(System.Reflection.Emit.OpCodes.Stloc.MemberwiseClone(), local);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Ldloca = function (localBuilder) {
	this.ilGen.Emit$15(System.Reflection.Emit.OpCodes.Ldloca.MemberwiseClone(), localBuilder);
	this.EmitStackTop(localBuilder.LocalType);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.LdargAddress = function (argBuilder) {
	if (argBuilder.ArgType.IsValueType) {
		this.Ldarga$0(argBuilder);
		return;
	}
	this.Ldarg$0(argBuilder);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Ldarg$0 = function (arg) {
	this.Ldarg$1(arg.Index);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Starg$0 = function (arg) {
	this.Starg$1(arg.Index);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Ldarg$1 = function (slot) {
	switch (slot) {
		case 0: 
			this.ilGen.Emit$0(System.Reflection.Emit.OpCodes.Ldarg_0.MemberwiseClone());
			return;
		case 1: 
			this.ilGen.Emit$0(System.Reflection.Emit.OpCodes.Ldarg_1.MemberwiseClone());
			return;
		case 2: 
			this.ilGen.Emit$0(System.Reflection.Emit.OpCodes.Ldarg_2.MemberwiseClone());
			return;
		case 3: 
			this.ilGen.Emit$0(System.Reflection.Emit.OpCodes.Ldarg_3.MemberwiseClone());
			return;
		default: 
			if (slot <= 255) {
				this.ilGen.Emit$4(System.Reflection.Emit.OpCodes.Ldarg_S.MemberwiseClone(), slot);
				return;
			}
			this.ilGen.Emit$4(System.Reflection.Emit.OpCodes.Ldarg.MemberwiseClone(), slot);
			return;
	}
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Starg$1 = function (slot) {
	if (slot <= 255) {
		this.ilGen.Emit$4(System.Reflection.Emit.OpCodes.Starg_S.MemberwiseClone(), slot);
		return;
	}
	this.ilGen.Emit$4(System.Reflection.Emit.OpCodes.Starg.MemberwiseClone(), slot);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Ldarga$0 = function (argBuilder) {
	this.Ldarga$1(argBuilder.Index);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Ldarga$1 = function (slot) {
	if (slot <= 255) {
		this.ilGen.Emit$4(System.Reflection.Emit.OpCodes.Ldarga_S.MemberwiseClone(), slot);
		return;
	}
	this.ilGen.Emit$4(System.Reflection.Emit.OpCodes.Ldarga.MemberwiseClone(), slot);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Ldlen = function () {
	this.ilGen.Emit$0(System.Reflection.Emit.OpCodes.Ldlen.MemberwiseClone());
	this.ilGen.Emit$0(System.Reflection.Emit.OpCodes.Conv_I4.MemberwiseClone());
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.GetLdelemOpCode = function (typeCode) {
	switch (Number(typeCode)) {
		case 1: 
		case 2: 
			return System.Reflection.Emit.OpCodes.Ldelem_Ref;
		case 3: 
			return System.Reflection.Emit.OpCodes.Ldelem_I1;
		case 4: 
			return System.Reflection.Emit.OpCodes.Ldelem_I2;
		case 5: 
			return System.Reflection.Emit.OpCodes.Ldelem_I1;
		case 6: 
			return System.Reflection.Emit.OpCodes.Ldelem_U1;
		case 7: 
			return System.Reflection.Emit.OpCodes.Ldelem_I2;
		case 8: 
			return System.Reflection.Emit.OpCodes.Ldelem_U2;
		case 9: 
			return System.Reflection.Emit.OpCodes.Ldelem_I4;
		case 10: 
			return System.Reflection.Emit.OpCodes.Ldelem_U4;
		case 11: 
			return System.Reflection.Emit.OpCodes.Ldelem_I8;
		case 12: 
			return System.Reflection.Emit.OpCodes.Ldelem_I8;
		case 13: 
			return System.Reflection.Emit.OpCodes.Ldelem_R4;
		case 14: 
			return System.Reflection.Emit.OpCodes.Ldelem_R8;
		case 18: 
			return System.Reflection.Emit.OpCodes.Ldelem_Ref;
	}
	return System.Reflection.Emit.OpCodes.Nop;
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Ldelem = function (arrayElementType) {
	if (arrayElementType.IsEnum) {
		this.Ldelem(System.Enum.GetUnderlyingType(arrayElementType));
		return;
	}
	var ldelemOpCode = this.GetLdelemOpCode(System.Type.GetTypeCode(arrayElementType)).MemberwiseClone();
	if (ldelemOpCode.Equals$1(System.Reflection.Emit.OpCodes.Nop.MemberwiseClone())) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0($asm09.System.Runtime.Serialization.SR.GetString$0("ArrayTypeIsNotSupported", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(arrayElementType)])));
	}
	this.ilGen.Emit$0(ldelemOpCode.MemberwiseClone());
	this.EmitStackTop(arrayElementType);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Ldelema = function (arrayElementType) {
	var ldelema = System.Reflection.Emit.OpCodes.Ldelema.MemberwiseClone();
	this.ilGen.Emit$7(ldelema.MemberwiseClone(), arrayElementType);
	this.EmitStackTop(arrayElementType);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.GetStelemOpCode = function (typeCode) {
	switch (Number(typeCode)) {
		case 1: 
		case 2: 
			return System.Reflection.Emit.OpCodes.Stelem_Ref;
		case 3: 
			return System.Reflection.Emit.OpCodes.Stelem_I1;
		case 4: 
			return System.Reflection.Emit.OpCodes.Stelem_I2;
		case 5: 
			return System.Reflection.Emit.OpCodes.Stelem_I1;
		case 6: 
			return System.Reflection.Emit.OpCodes.Stelem_I1;
		case 7: 
			return System.Reflection.Emit.OpCodes.Stelem_I2;
		case 8: 
			return System.Reflection.Emit.OpCodes.Stelem_I2;
		case 9: 
			return System.Reflection.Emit.OpCodes.Stelem_I4;
		case 10: 
			return System.Reflection.Emit.OpCodes.Stelem_I4;
		case 11: 
			return System.Reflection.Emit.OpCodes.Stelem_I8;
		case 12: 
			return System.Reflection.Emit.OpCodes.Stelem_I8;
		case 13: 
			return System.Reflection.Emit.OpCodes.Stelem_R4;
		case 14: 
			return System.Reflection.Emit.OpCodes.Stelem_R8;
		case 18: 
			return System.Reflection.Emit.OpCodes.Stelem_Ref;
	}
	return System.Reflection.Emit.OpCodes.Nop;
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Stelem = function (arrayElementType) {
	if (arrayElementType.IsEnum) {
		this.Stelem(System.Enum.GetUnderlyingType(arrayElementType));
		return;
	}
	var stelemOpCode = this.GetStelemOpCode(System.Type.GetTypeCode(arrayElementType)).MemberwiseClone();
	if (stelemOpCode.Equals$1(System.Reflection.Emit.OpCodes.Nop.MemberwiseClone())) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0($asm09.System.Runtime.Serialization.SR.GetString$0("ArrayTypeIsNotSupported", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(arrayElementType)])));
	}
	this.EmitStackTop(arrayElementType);
	this.ilGen.Emit$0(stelemOpCode.MemberwiseClone());
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.DefineLabel = function () {
	return this.ilGen.DefineLabel();
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.MarkLabel = function (label) {
	this.ilGen.MarkLabel(label);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Add = function () {
	this.ilGen.Emit$0(System.Reflection.Emit.OpCodes.Add.MemberwiseClone());
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Subtract = function () {
	this.ilGen.Emit$0(System.Reflection.Emit.OpCodes.Sub.MemberwiseClone());
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.And = function () {
	this.ilGen.Emit$0(System.Reflection.Emit.OpCodes.And.MemberwiseClone());
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Or = function () {
	this.ilGen.Emit$0(System.Reflection.Emit.OpCodes.Or.MemberwiseClone());
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Not = function () {
	this.ilGen.Emit$0(System.Reflection.Emit.OpCodes.Not.MemberwiseClone());
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Ret = function () {
	this.ilGen.Emit$0(System.Reflection.Emit.OpCodes.Ret.MemberwiseClone());
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Br = function (label) {
	this.ilGen.Emit$11(System.Reflection.Emit.OpCodes.Br.MemberwiseClone(), label);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Blt = function (label) {
	this.ilGen.Emit$11(System.Reflection.Emit.OpCodes.Blt.MemberwiseClone(), label);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Brfalse = function (label) {
	this.ilGen.Emit$11(System.Reflection.Emit.OpCodes.Brfalse.MemberwiseClone(), label);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Brtrue = function (label) {
	this.ilGen.Emit$11(System.Reflection.Emit.OpCodes.Brtrue.MemberwiseClone(), label);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Pop = function () {
	this.ilGen.Emit$0(System.Reflection.Emit.OpCodes.Pop.MemberwiseClone());
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Dup = function () {
	this.ilGen.Emit$0(System.Reflection.Emit.OpCodes.Dup.MemberwiseClone());
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.LoadThis = function (thisObj, methodInfo) {
	if (!((thisObj === null) || methodInfo.IsStatic)) {
		this.LoadAddress(thisObj);
		this.ConvertAddress(this.GetVariableType(thisObj), methodInfo.DeclaringType);
	}
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.LoadParam = function (arg, oneBasedArgIndex, methodInfo) {
	this.Load(arg);
	if (arg !== null) {
		this.ConvertValue(this.GetVariableType(arg), methodInfo.GetParameters()[(oneBasedArgIndex - 1)].ParameterType);
	}
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.InternalIf = function (negate) {
	var ifState = new $asm09.System.Runtime.Serialization.IfState();
	(ifState.EndIf = this.DefineLabel().MemberwiseClone());
	(ifState.ElseBegin = this.DefineLabel().MemberwiseClone());
	if (negate) {
		this.Brtrue(ifState.ElseBegin.MemberwiseClone());
	} else {
		this.Brfalse(ifState.ElseBegin.MemberwiseClone());
	}
	this.blockStack.Push(ifState);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.GetConvOpCode = function (typeCode) {
	switch (Number(typeCode)) {
		case 3: 
			return System.Reflection.Emit.OpCodes.Conv_I1;
		case 4: 
			return System.Reflection.Emit.OpCodes.Conv_I2;
		case 5: 
			return System.Reflection.Emit.OpCodes.Conv_I1;
		case 6: 
			return System.Reflection.Emit.OpCodes.Conv_U1;
		case 7: 
			return System.Reflection.Emit.OpCodes.Conv_I2;
		case 8: 
			return System.Reflection.Emit.OpCodes.Conv_U2;
		case 9: 
			return System.Reflection.Emit.OpCodes.Conv_I4;
		case 10: 
			return System.Reflection.Emit.OpCodes.Conv_U4;
		case 11: 
			return System.Reflection.Emit.OpCodes.Conv_I8;
		case 12: 
			return System.Reflection.Emit.OpCodes.Conv_I8;
		case 13: 
			return System.Reflection.Emit.OpCodes.Conv_R4;
		case 14: 
			return System.Reflection.Emit.OpCodes.Conv_R8;
		default: 
			return System.Reflection.Emit.OpCodes.Nop;
	}
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.InternalConvert = function (source, target, isAddress) {
	if (target === source) {
		return;
	}
	if (target.IsValueType) {
		if (source.IsValueType) {
			var convOpCode = this.GetConvOpCode(System.Type.GetTypeCode(target)).MemberwiseClone();
			if (convOpCode.Equals$1(System.Reflection.Emit.OpCodes.Nop.MemberwiseClone())) {
				throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0($asm09.System.Runtime.Serialization.SR.GetString$0("NoConversionPossibleTo", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(target)])));
			}
			this.ilGen.Emit$0(convOpCode.MemberwiseClone());
			return;
		} else {
			if (!source.IsAssignableFrom(target)) {
				throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0($asm09.System.Runtime.Serialization.SR.GetString$0("IsNotAssignableFrom", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(target), $asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(source)])));
			}
			this.Unbox(target);
			if (!isAddress) {
				this.Ldobj(target);
				return;
			}
		}
	} else if (target.IsAssignableFrom(source)) {
		if (source.IsValueType) {
			if (isAddress) {
				this.Ldobj(source);
			}
			this.Box(source);
			return;
		}
	} else {
		if (source.IsAssignableFrom(target)) {
			this.Castclass(target);
			return;
		}
		if (!(!target.IsInterface && !source.IsInterface)) {
			this.Castclass(target);
			return;
		}
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0($asm09.System.Runtime.Serialization.SR.GetString$0("IsNotAssignableFrom", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(target), $asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(source)])));
	}
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.PopIfState = function () {
	var obj = this.blockStack.Pop();
	var ifState = JSIL.TryCast(obj, $asm09.System.Runtime.Serialization.IfState);
	if (ifState === null) {
		this.ThrowMismatchException(obj);
	}
	return ifState;
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.ThrowMismatchException = function (expected) {
	throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0($asm09.System.Runtime.Serialization.SR.GetString$0("ExpectingEnd", [expected.toString()])));
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.EmitSourceInstruction = function (line) {
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.EmitSourceLabel = function (line) {
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.EmitSourceComment = function (comment) {
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.EmitStackTop = function (stackTopType) {
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Switch = function (labelCount) {
	var switchState = new $asm09.System.Runtime.Serialization.SwitchState(this.DefineLabel(), this.DefineLabel());
	var array = JSIL.Array.New(System.Reflection.Emit.Label, labelCount);
__loop0__: 
	for (var i = 0; i < array.length; ++i) {
		array[i] = this.DefineLabel().MemberwiseClone();
	}
	this.ilGen.Emit$12(System.Reflection.Emit.OpCodes.Switch.MemberwiseClone(), array);
	this.Br(switchState.DefaultLabel.MemberwiseClone());
	this.blockStack.Push(switchState);
	return array;
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.Case = function (caseLabel1, caseLabelName) {
	this.MarkLabel(caseLabel1);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.EndCase = function () {
	var obj = this.blockStack.Peek();
	var switchState = JSIL.TryCast(obj, $asm09.System.Runtime.Serialization.SwitchState);
	if (switchState === null) {
		this.ThrowMismatchException(obj);
	}
	this.Br(switchState.EndOfSwitchLabel.MemberwiseClone());
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.EndSwitch = function () {
	var obj = this.blockStack.Pop();
	var switchState = JSIL.TryCast(obj, $asm09.System.Runtime.Serialization.SwitchState);
	if (switchState === null) {
		this.ThrowMismatchException(obj);
	}
	if (!switchState.DefaultDefined) {
		this.MarkLabel(switchState.DefaultLabel.MemberwiseClone());
	}
	this.MarkLabel(switchState.EndOfSwitchLabel.MemberwiseClone());
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.ElseIfIsEmptyString = function (strLocal) {
	var ifState = JSIL.Cast(this.blockStack.Pop(), $asm09.System.Runtime.Serialization.IfState);
	this.Br(ifState.EndIf.MemberwiseClone());
	this.MarkLabel(ifState.ElseBegin.MemberwiseClone());
	this.Load(strLocal);
	this.Call$7($asm09.System.Runtime.Serialization.CodeGenerator.stringLength);
	this.Load(0);
	(ifState.ElseBegin = this.DefineLabel().MemberwiseClone());
	this.ilGen.Emit$11(this.GetBranchCode($asm09.System.Runtime.Serialization.Cmp.EqualTo).MemberwiseClone(), ifState.ElseBegin.MemberwiseClone());
	this.blockStack.Push(ifState);
};
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.IfNotIsEmptyString = function (strLocal) {
	this.Load(strLocal);
	this.Call$7($asm09.System.Runtime.Serialization.CodeGenerator.stringLength);
	this.Load(0);
	this.If$1($asm09.System.Runtime.Serialization.Cmp.NotEqualTo);
};
JSIL.OverloadedMethod($asm09.System.Runtime.Serialization.CodeGenerator.prototype, "BeginMethod", [
		["BeginMethod$0", [System.Reflection.Emit.DynamicMethod, System.Type, System.String, System.Array.Of(System.Type), System.Boolean]], 
		["BeginMethod$1", [System.String, System.Type, System.Boolean]], 
		["BeginMethod$2", [System.Type, System.String, System.Array.Of(System.Type), System.Boolean]]
	]);
JSIL.OverloadedMethod($asm09.System.Runtime.Serialization.CodeGenerator.prototype, "DeclareLocal", [
		["DeclareLocal$0", [System.Type, System.String, System.Object]], 
		["DeclareLocal$1", [System.Type, System.String]], 
		["DeclareLocal$2", [System.Type, System.String, System.Boolean]]
	]);
JSIL.OverloadedMethod($asm09.System.Runtime.Serialization.CodeGenerator.prototype, "If", [
		["If$0", []], 
		["If$1", [$asm09.System.Runtime.Serialization.Cmp]], 
		["If$2", [System.Object, $asm09.System.Runtime.Serialization.Cmp, System.Object]]
	]);
JSIL.OverloadedMethod($asm09.System.Runtime.Serialization.CodeGenerator.prototype, "Call", [
		["Call$0", [System.Object, System.Reflection.MethodInfo]], 
		["Call$1", [System.Object, System.Reflection.MethodInfo, System.Object]], 
		["Call$2", [System.Object, System.Reflection.MethodInfo, System.Object, System.Object]], 
		["Call$3", [System.Object, System.Reflection.MethodInfo, System.Object, System.Object, System.Object]], 
		["Call$4", [System.Object, System.Reflection.MethodInfo, System.Object, System.Object, System.Object, System.Object]], 
		["Call$5", [System.Object, System.Reflection.MethodInfo, System.Object, System.Object, System.Object, System.Object, System.Object]], 
		["Call$6", [System.Object, System.Reflection.MethodInfo, System.Object, System.Object, System.Object, System.Object, System.Object, System.Object]], 
		["Call$7", [System.Reflection.MethodInfo]], 
		["Call$8", [System.Reflection.ConstructorInfo]]
	]);
JSIL.OverloadedMethod($asm09.System.Runtime.Serialization.CodeGenerator.prototype, "Ldc", [
		["Ldc$0", [System.Object]], 
		["Ldc$1", [System.Boolean]], 
		["Ldc$2", [System.Int32]], 
		["Ldc$3", [System.Int64]], 
		["Ldc$4", [System.Single]], 
		["Ldc$5", [System.Double]]
	]);
JSIL.OverloadedMethod($asm09.System.Runtime.Serialization.CodeGenerator.prototype, "Ldarg", [
		["Ldarg$0", [$asm09.System.Runtime.Serialization.ArgBuilder]], 
		["Ldarg$1", [System.Int32]]
	]);
JSIL.OverloadedMethod($asm09.System.Runtime.Serialization.CodeGenerator.prototype, "Starg", [
		["Starg$0", [$asm09.System.Runtime.Serialization.ArgBuilder]], 
		["Starg$1", [System.Int32]]
	]);
JSIL.OverloadedMethod($asm09.System.Runtime.Serialization.CodeGenerator.prototype, "Ldarga", [
		["Ldarga$0", [$asm09.System.Runtime.Serialization.ArgBuilder]], 
		["Ldarga$1", [System.Int32]]
	]);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.CodeGenerator, "GetTypeFromHandle", 
	$asm09.System.Runtime.Serialization.CodeGenerator.get_GetTypeFromHandle, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.CodeGenerator, "ObjectEquals", 
	$asm09.System.Runtime.Serialization.CodeGenerator.get_ObjectEquals, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.CodeGenerator, "ArraySetValue", 
	$asm09.System.Runtime.Serialization.CodeGenerator.get_ArraySetValue, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.CodeGenerator, "SerializationModule", 
	$asm09.System.Runtime.Serialization.CodeGenerator.get_SerializationModule, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.CodeGenerator.prototype, "CurrentMethod", 
	$asm09.System.Runtime.Serialization.CodeGenerator.prototype.get_CurrentMethod, null);
$asm09.System.Runtime.Serialization.CodeGenerator.getTypeFromHandle = null;
$asm09.System.Runtime.Serialization.CodeGenerator.objectEquals = null;
$asm09.System.Runtime.Serialization.CodeGenerator.arraySetValue = null;
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.delegateType = null;
$asm09.System.Runtime.Serialization.CodeGenerator.serializationModule = null;
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.dynamicMethod = null;
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.ilGen = null;
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.argList = null;
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.blockStack = null;
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.LocalNames = null;
$asm09.System.Runtime.Serialization.CodeGenerator.prototype.codeGenTrace = 0;
$asm09.System.Runtime.Serialization.CodeGenerator.stringLength = null;
$asm09.System.Runtime.Serialization.CodeGenerator._cctor = function () {
	$asm09.System.Runtime.Serialization.CodeGenerator.stringLength = (System.String.GetProperty$6("Length")).GetGetMethod$1();
};

$asm09.System.Runtime.Serialization.ArgBuilder.prototype._ctor = function (index, argType) {
	System.Object.prototype._ctor.call(this);
	this.Index = index;
	this.ArgType = argType;
};
$asm09.System.Runtime.Serialization.ArgBuilder.prototype.Index = 0;
$asm09.System.Runtime.Serialization.ArgBuilder.prototype.ArgType = null;

$asm09.System.Runtime.Serialization.ForState.prototype._ctor = function (indexVar, beginLabel, testLabel, end) {
	System.Object.prototype._ctor.call(this);
	this.indexVar = indexVar;
	this.beginLabel = beginLabel;
	this.testLabel = testLabel;
	this.end = end;
};
$asm09.System.Runtime.Serialization.ForState.prototype.get_Index = function () {
	return this.indexVar;
};
$asm09.System.Runtime.Serialization.ForState.prototype.get_BeginLabel = function () {
	return this.beginLabel;
};
$asm09.System.Runtime.Serialization.ForState.prototype.get_TestLabel = function () {
	return this.testLabel;
};
$asm09.System.Runtime.Serialization.ForState.prototype.get_EndLabel = function () {
	return this.endLabel;
};
$asm09.System.Runtime.Serialization.ForState.prototype.set_EndLabel = function (value) {
	this.endLabel = value;
};
$asm09.System.Runtime.Serialization.ForState.prototype.get_RequiresEndLabel = function () {
	return this.requiresEndLabel;
};
$asm09.System.Runtime.Serialization.ForState.prototype.set_RequiresEndLabel = function (value) {
	this.requiresEndLabel = value;
};
$asm09.System.Runtime.Serialization.ForState.prototype.get_End = function () {
	return this.end;
};
JSIL.MakeProperty($asm09.System.Runtime.Serialization.ForState.prototype, "Index", 
	$asm09.System.Runtime.Serialization.ForState.prototype.get_Index, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.ForState.prototype, "BeginLabel", 
	$asm09.System.Runtime.Serialization.ForState.prototype.get_BeginLabel, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.ForState.prototype, "TestLabel", 
	$asm09.System.Runtime.Serialization.ForState.prototype.get_TestLabel, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.ForState.prototype, "EndLabel", 
	$asm09.System.Runtime.Serialization.ForState.prototype.get_EndLabel, $asm09.System.Runtime.Serialization.ForState.prototype.set_EndLabel);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.ForState.prototype, "RequiresEndLabel", 
	$asm09.System.Runtime.Serialization.ForState.prototype.get_RequiresEndLabel, $asm09.System.Runtime.Serialization.ForState.prototype.set_RequiresEndLabel);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.ForState.prototype, "End", 
	$asm09.System.Runtime.Serialization.ForState.prototype.get_End, null);
$asm09.System.Runtime.Serialization.ForState.prototype.indexVar = null;
$asm09.System.Runtime.Serialization.ForState.prototype.requiresEndLabel = false;
$asm09.System.Runtime.Serialization.ForState.prototype.end = null;

$asm09.System.Runtime.Serialization.IfState.prototype.get_EndIf = function () {
	return this.endIf;
};
$asm09.System.Runtime.Serialization.IfState.prototype.set_EndIf = function (value) {
	this.endIf = value;
};
$asm09.System.Runtime.Serialization.IfState.prototype.get_ElseBegin = function () {
	return this.elseBegin;
};
$asm09.System.Runtime.Serialization.IfState.prototype.set_ElseBegin = function (value) {
	this.elseBegin = value;
};
$asm09.System.Runtime.Serialization.IfState.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
JSIL.MakeProperty($asm09.System.Runtime.Serialization.IfState.prototype, "EndIf", 
	$asm09.System.Runtime.Serialization.IfState.prototype.get_EndIf, $asm09.System.Runtime.Serialization.IfState.prototype.set_EndIf);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.IfState.prototype, "ElseBegin", 
	$asm09.System.Runtime.Serialization.IfState.prototype.get_ElseBegin, $asm09.System.Runtime.Serialization.IfState.prototype.set_ElseBegin);

$asm09.System.Runtime.Serialization.SwitchState.prototype._ctor = function (defaultLabel, endOfSwitchLabel) {
	System.Object.prototype._ctor.call(this);
	this.defaultLabel = defaultLabel;
	this.endOfSwitchLabel = endOfSwitchLabel;
	this.defaultDefined = false;
};
$asm09.System.Runtime.Serialization.SwitchState.prototype.get_DefaultLabel = function () {
	return this.defaultLabel;
};
$asm09.System.Runtime.Serialization.SwitchState.prototype.get_EndOfSwitchLabel = function () {
	return this.endOfSwitchLabel;
};
$asm09.System.Runtime.Serialization.SwitchState.prototype.get_DefaultDefined = function () {
	return this.defaultDefined;
};
$asm09.System.Runtime.Serialization.SwitchState.prototype.set_DefaultDefined = function (value) {
	this.defaultDefined = value;
};
JSIL.MakeProperty($asm09.System.Runtime.Serialization.SwitchState.prototype, "DefaultLabel", 
	$asm09.System.Runtime.Serialization.SwitchState.prototype.get_DefaultLabel, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.SwitchState.prototype, "EndOfSwitchLabel", 
	$asm09.System.Runtime.Serialization.SwitchState.prototype.get_EndOfSwitchLabel, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.SwitchState.prototype, "DefaultDefined", 
	$asm09.System.Runtime.Serialization.SwitchState.prototype.get_DefaultDefined, $asm09.System.Runtime.Serialization.SwitchState.prototype.set_DefaultDefined);
$asm09.System.Runtime.Serialization.SwitchState.prototype.defaultDefined = false;

$asm09.System.Runtime.Serialization.DataContract.prototype._ctor = function (helper) {
	System.Object.prototype._ctor.call(this);
	this.helper = helper;
	this.name = helper.Name;
	this.ns = helper.Namespace;
};
$asm09.System.Runtime.Serialization.DataContract.GetDataContract$0 = function (type) {
	return $asm09.System.Runtime.Serialization.DataContract.GetDataContract$1(type.TypeHandle.MemberwiseClone(), type);
};
$asm09.System.Runtime.Serialization.DataContract.GetDataContract$1 = function (typeHandle, type) {
	return $asm09.System.Runtime.Serialization.DataContract.GetDataContract$2(typeHandle, type, System.Runtime.Serialization.SerializationMode.SharedContract);
};
$asm09.System.Runtime.Serialization.DataContract.GetDataContract$2 = function (typeHandle, type, mode) {
	var id = $asm09.System.Runtime.Serialization.DataContract.GetId(typeHandle.MemberwiseClone());
	var dataContractSkipValidation = $asm09.System.Runtime.Serialization.DataContract.GetDataContractSkipValidation(id, typeHandle.MemberwiseClone(), null);
	return dataContractSkipValidation.GetValidContract$0(mode);
};
$asm09.System.Runtime.Serialization.DataContract.GetDataContract$3 = function (id, typeHandle, mode) {
	var dataContractSkipValidation = $asm09.System.Runtime.Serialization.DataContract.GetDataContractSkipValidation(id, typeHandle, null);
	return dataContractSkipValidation.GetValidContract$0(mode);
};
$asm09.System.Runtime.Serialization.DataContract.GetDataContractSkipValidation = function (id, typeHandle, type) {
	return $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.GetDataContractSkipValidation(id, typeHandle, type);
};
$asm09.System.Runtime.Serialization.DataContract.GetGetOnlyCollectionDataContract = function (id, typeHandle, type, mode) {
	var dataContract = $asm09.System.Runtime.Serialization.DataContract.GetGetOnlyCollectionDataContractSkipValidation(id, typeHandle, type);
	dataContract = dataContract.GetValidContract$0(mode);
	if (JSIL.TryCast(dataContract, $asm09.System.Runtime.Serialization.ClassDataContract) !== null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Runtime.Serialization.SerializationException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("ErrorDeserializing", [$asm09.System.Runtime.Serialization.SR.GetString$0("ErrorTypeInfo", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(dataContract.UnderlyingType)]), $asm09.System.Runtime.Serialization.SR.GetString$0("NoSetMethodForProperty", [System.String.Empty, System.String.Empty])])]));
	}
	return dataContract;
};
$asm09.System.Runtime.Serialization.DataContract.GetGetOnlyCollectionDataContractSkipValidation = function (id, typeHandle, type) {
	return $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.GetGetOnlyCollectionDataContractSkipValidation(id, typeHandle, type);
};
$asm09.System.Runtime.Serialization.DataContract.GetDataContractForInitialization = function (id) {
	return $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.GetDataContractForInitialization(id);
};
$asm09.System.Runtime.Serialization.DataContract.GetIdForInitialization = function (classContract) {
	return $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.GetIdForInitialization(classContract);
};
$asm09.System.Runtime.Serialization.DataContract.GetId = function (typeHandle) {
	return $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.GetId(typeHandle);
};
$asm09.System.Runtime.Serialization.DataContract.GetBuiltInDataContract$0 = function (type) {
	return $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.GetBuiltInDataContract$0(type);
};
$asm09.System.Runtime.Serialization.DataContract.GetBuiltInDataContract$1 = function (name, ns) {
	return $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.GetBuiltInDataContract$1(name, ns);
};
$asm09.System.Runtime.Serialization.DataContract.GetNamespace = function (key) {
	return $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.GetNamespace(key);
};
$asm09.System.Runtime.Serialization.DataContract.GetClrTypeString = function (key) {
	return $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.GetClrTypeString(key);
};
$asm09.System.Runtime.Serialization.DataContract.ThrowInvalidDataContractException = function (message, type) {
	$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.ThrowInvalidDataContractException(message, type);
};
$asm09.System.Runtime.Serialization.DataContract.prototype.get_Helper = function () {
	return this.helper;
};
$asm09.System.Runtime.Serialization.DataContract.prototype.get_UnderlyingType = function () {
	return this.helper.UnderlyingType;
};
$asm09.System.Runtime.Serialization.DataContract.prototype.get_IsBuiltInDataContract = function () {
	return this.helper.IsBuiltInDataContract;
};
$asm09.System.Runtime.Serialization.DataContract.prototype.get_TypeForInitialization = function () {
	return this.helper.TypeForInitialization;
};
$asm09.System.Runtime.Serialization.DataContract.prototype.WriteXmlValue = function (xmlWriter, obj, context) {
	throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Runtime.Serialization.InvalidDataContractException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("UnexpectedContractType", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(JSIL.GetType(this)), $asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(this.UnderlyingType)])]));
};
$asm09.System.Runtime.Serialization.DataContract.prototype.ReadXmlValue = function (xmlReader, context) {
	throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Runtime.Serialization.InvalidDataContractException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("UnexpectedContractType", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(JSIL.GetType(this)), $asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(this.UnderlyingType)])]));
};
$asm09.System.Runtime.Serialization.DataContract.prototype.get_IsValueType = function () {
	return this.helper.IsValueType;
};
$asm09.System.Runtime.Serialization.DataContract.prototype.set_IsValueType = function (value) {
	this.helper.IsValueType = value;
};
$asm09.System.Runtime.Serialization.DataContract.prototype.get_IsReference = function () {
	return this.helper.IsReference;
};
$asm09.System.Runtime.Serialization.DataContract.prototype.set_IsReference = function (value) {
	this.helper.IsReference = value;
};
$asm09.System.Runtime.Serialization.DataContract.prototype.get_StableName = function () {
	return this.helper.StableName;
};
$asm09.System.Runtime.Serialization.DataContract.prototype.set_StableName = function (value) {
	this.helper.StableName = value;
};
$asm09.System.Runtime.Serialization.DataContract.prototype.get_KnownDataContracts = function () {
	return this.helper.KnownDataContracts;
};
$asm09.System.Runtime.Serialization.DataContract.prototype.set_KnownDataContracts = function (value) {
	this.helper.KnownDataContracts = value;
};
$asm09.System.Runtime.Serialization.DataContract.prototype.get_Name = function () {
	return this.name;
};
$asm09.System.Runtime.Serialization.DataContract.prototype.get_Namespace = function () {
	return this.ns;
};
$asm09.System.Runtime.Serialization.DataContract.prototype.get_HasRoot = function () {
	return true;
};
$asm09.System.Runtime.Serialization.DataContract.prototype.set_HasRoot = function (value) {
};
$asm09.System.Runtime.Serialization.DataContract.prototype.get_TopLevelElementName = function () {
	return this.helper.TopLevelElementName;
};
$asm09.System.Runtime.Serialization.DataContract.prototype.set_TopLevelElementName = function (value) {
	this.helper.TopLevelElementName = value;
};
$asm09.System.Runtime.Serialization.DataContract.prototype.get_TopLevelElementNamespace = function () {
	return this.helper.TopLevelElementNamespace;
};
$asm09.System.Runtime.Serialization.DataContract.prototype.set_TopLevelElementNamespace = function (value) {
	this.helper.TopLevelElementNamespace = value;
};
$asm09.System.Runtime.Serialization.DataContract.prototype.get_CanContainReferences = function () {
	return true;
};
$asm09.System.Runtime.Serialization.DataContract.prototype.get_IsPrimitive = function () {
	return false;
};
$asm09.System.Runtime.Serialization.DataContract.prototype.WriteRootElement = function (writer, name, ns) {
	if (!(!System.Object.ReferenceEquals(ns, $asm09.System.Runtime.Serialization.DictionaryGlobals.SerializationNamespace) || this.IsPrimitive)) {
		writer.WriteStartElement$3("z", name, ns);
		return;
	}
	writer.WriteStartElement$2(name, ns);
};
$asm09.System.Runtime.Serialization.DataContract.prototype.GetValidContract$0 = function (mode) {
	return this;
};
$asm09.System.Runtime.Serialization.DataContract.prototype.GetValidContract$1 = function () {
	return this;
};
$asm09.System.Runtime.Serialization.DataContract.prototype.IsValidContract = function (mode) {
	return true;
};
$asm09.System.Runtime.Serialization.DataContract.IsTypeSerializable = function (type) {
	var type2 = new JSIL.Variable(null);
	return (type.IsEnum || 
		type.IsDefined(System.Runtime.Serialization.Globals.TypeOfDataContractAttribute, false) || 
		type.IsInterface || 
		type.IsPointer || 
		System.Runtime.Serialization.Globals.TypeOfIXmlSerializable.IsAssignableFrom(type) || 
		($asm09.System.Runtime.Serialization.CollectionDataContract.IsCollection$1(type, /* ref */ type2) && 
			$asm09.System.Runtime.Serialization.DataContract.IsTypeSerializable(type2.value)) || 
		$asm09.System.Runtime.Serialization.DataContract.GetBuiltInDataContract$0(type) || 
		$asm09.System.Runtime.Serialization.ClassDataContract.IsNonAttributedTypeValidForSerialization(type) || 
		(type === System.Runtime.Serialization.Globals.TypeOfDateTimeOffset) || (type === System.Runtime.Serialization.Globals.TypeOfDBNull));
};
$asm09.System.Runtime.Serialization.DataContract.UnwrapRedundantNullableType = function (type) {
	var result = type;
__loop0__: 
	while (type.IsGenericType && (type.GetGenericTypeDefinition() === System.Runtime.Serialization.Globals.TypeOfNullable)) {
		result = type;
		type = type.GetGenericArguments()[0];
	}
	return result;
};
$asm09.System.Runtime.Serialization.DataContract.UnwrapNullableType = function (type) {
__loop0__: 
	for (; type.IsGenericType && (type.GetGenericTypeDefinition() === System.Runtime.Serialization.Globals.TypeOfNullable); type = type.GetGenericArguments()[0]) {
	}
	return type;
};
$asm09.System.Runtime.Serialization.DataContract.IsAlpha = function (ch) {
	return (((ch >= "A") && 
			(ch <= "Z")) || ((ch >= "a") && 
			(ch <= "z")));
};
$asm09.System.Runtime.Serialization.DataContract.IsDigit = function (ch) {
	return ((ch >= "0") && (ch <= "9"));
};
$asm09.System.Runtime.Serialization.DataContract.IsAsciiLocalName = function (localName) {
	if (localName.length === 0) {
		return false;
	}
	if (!$asm09.System.Runtime.Serialization.DataContract.IsAlpha(localName[0])) {
		return false;
	}
__loop0__: 
	for (var i = 1; i < localName.length; ++i) {
		var ch = (localName[i]);
		if (!($asm09.System.Runtime.Serialization.DataContract.IsAlpha(ch) || $asm09.System.Runtime.Serialization.DataContract.IsDigit(ch))) {
			return false;
		}
	}
	return true;
};
$asm09.System.Runtime.Serialization.DataContract.EncodeLocalName = function (localName) {
	if ($asm09.System.Runtime.Serialization.DataContract.IsAsciiLocalName(localName)) {
		return localName;
	}
	if ($asm09.System.Runtime.Serialization.DataContract.IsValidNCName(localName)) {
		return localName;
	}
	return System.Xml.XmlConvert.EncodeLocalName(localName);
};
$asm09.System.Runtime.Serialization.DataContract.IsValidNCName = function (name) {
	try {
		System.Xml.XmlConvert.VerifyNCName$0(name);
		var result = true;
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.Xml.XmlException)) {
			result = false;
		} else {
			var exception = $exception;
			if ($asm09.System.Runtime.Serialization.DiagnosticUtility.IsFatal(exception)) {
				throw $exception;
			}
			result = false;
		}
	}
	return result;
};
$asm09.System.Runtime.Serialization.DataContract.GetStableName$0 = function (type) {
	var flag = new JSIL.Variable(false);
	return $asm09.System.Runtime.Serialization.DataContract.GetStableName$1(type, /* ref */ flag);
};
$asm09.System.Runtime.Serialization.DataContract.GetStableName$1 = function (type, /* ref */ hasDataContract) {
	var dataContractAttribute = new JSIL.Variable(null);
	type = $asm09.System.Runtime.Serialization.DataContract.UnwrapRedundantNullableType(type);
	if ($asm09.System.Runtime.Serialization.DataContract.TryGetBuiltInXmlAndArrayTypeStableName(type, /* ref */ result)) {
		hasDataContract.value = false;
	} else if ($asm09.System.Runtime.Serialization.DataContract.TryGetDCAttribute(type, /* ref */ dataContractAttribute)) {
		var result = new JSIL.Variable($asm09.System.Runtime.Serialization.DataContract.GetDCTypeStableName(type, dataContractAttribute.value));
		hasDataContract.value = true;
	} else {
		result.value = $asm09.System.Runtime.Serialization.DataContract.GetNonDCTypeStableName(type);
		hasDataContract.value = false;
	}
	return result.value;
};
$asm09.System.Runtime.Serialization.DataContract.GetDCTypeStableName = function (type, dataContractAttribute) {
	var text = null;
	var text2 = null;
	if (dataContractAttribute.IsNameSetExplicit) {
		text = dataContractAttribute.Name;
		if (!((text !== null) && (text.length !== 0))) {
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Runtime.Serialization.InvalidDataContractException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("InvalidDataContractName", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(type)])]));
		}
		if (!(!type.IsGenericType || type.IsGenericTypeDefinition)) {
			text = $asm09.System.Runtime.Serialization.DataContract.ExpandGenericParameters$0(text, type);
		}
		text = $asm09.System.Runtime.Serialization.DataContract.EncodeLocalName(text);
	} else {
		text = $asm09.System.Runtime.Serialization.DataContract.GetDefaultStableLocalName(type);
	}
	if (dataContractAttribute.IsNamespaceSetExplicit) {
		text2 = dataContractAttribute.Namespace;
		if (text2 === null) {
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Runtime.Serialization.InvalidDataContractException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("InvalidDataContractNamespace", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(type)])]));
		}
		$asm09.System.Runtime.Serialization.DataContract.CheckExplicitDataContractNamespaceUri(text2, type);
	} else {
		text2 = $asm09.System.Runtime.Serialization.DataContract.GetDefaultDataContractNamespace(type);
	}
	return $asm09.System.Runtime.Serialization.DataContract.CreateQualifiedName(text, text2);
};
$asm09.System.Runtime.Serialization.DataContract.GetNonDCTypeStableName = function (type) {
	var itemType = new JSIL.Variable(null), collectionDataContractAttribute = new JSIL.Variable(null);
	var text = null;
	if ($asm09.System.Runtime.Serialization.CollectionDataContract.IsCollection$1(type, /* ref */ itemType)) {
		return $asm09.System.Runtime.Serialization.DataContract.GetCollectionStableName(type, itemType.value, /* ref */ collectionDataContractAttribute);
	}
	var defaultStableLocalName = $asm09.System.Runtime.Serialization.DataContract.GetDefaultStableLocalName(type);
	if ($asm09.System.Runtime.Serialization.ClassDataContract.IsNonAttributedTypeValidForSerialization(type)) {
		text = $asm09.System.Runtime.Serialization.DataContract.GetDefaultDataContractNamespace(type);
	} else {
		text = $asm09.System.Runtime.Serialization.DataContract.GetDefaultStableNamespace$0(type);
	}
	return $asm09.System.Runtime.Serialization.DataContract.CreateQualifiedName(defaultStableLocalName, text);
};
$asm09.System.Runtime.Serialization.DataContract.TryGetBuiltInXmlAndArrayTypeStableName = function (type, /* ref */ stableName) {
	var xmlQualifiedName = new JSIL.Variable(null), obj = new JSIL.Variable(null), flag = new JSIL.Variable(false), collectionDataContractAttribute = new JSIL.Variable(null);
	stableName.value = null;
	var builtInDataContract = $asm09.System.Runtime.Serialization.DataContract.GetBuiltInDataContract$0(type);
	if (builtInDataContract !== null) {
		stableName.value = builtInDataContract.StableName;
	} else if (System.Runtime.Serialization.Globals.TypeOfIXmlSerializable.IsAssignableFrom(type)) {
		$asm09.System.Runtime.Serialization.SchemaExporter.GetXmlTypeInfo(type, /* ref */ xmlQualifiedName, /* ref */ obj, /* ref */ flag);
		stableName.value = xmlQualifiedName.value;
	} else if (type.IsArray) {
		stableName.value = $asm09.System.Runtime.Serialization.DataContract.GetCollectionStableName(type, type.GetElementType(), /* ref */ collectionDataContractAttribute);
	}
	return System.Xml.XmlQualifiedName.op_Inequality(stableName.value, null);
};
$asm09.System.Runtime.Serialization.DataContract.TryGetDCAttribute = function (type, /* ref */ dataContractAttribute) {
	dataContractAttribute.value = null;
	var customAttributes = type.GetCustomAttributes$1(System.Runtime.Serialization.Globals.TypeOfDataContractAttribute, false);
	if (!((customAttributes === null) || (customAttributes.length <= 0))) {
		dataContractAttribute.value = JSIL.Cast(customAttributes[0], System.Runtime.Serialization.DataContractAttribute);
	}
	return (dataContractAttribute.value !== null);
};
$asm09.System.Runtime.Serialization.DataContract.GetCollectionStableName = function (type, $itemType, /* ref */ collectionContractAttribute) {
	var itemType = new JSIL.Variable($itemType);
	var customAttributes = type.GetCustomAttributes$1(System.Runtime.Serialization.Globals.TypeOfCollectionDataContractAttribute, false);
	if (!((customAttributes === null) || (customAttributes.length <= 0))) {
		collectionContractAttribute.value = JSIL.Cast(customAttributes[0], System.Runtime.Serialization.CollectionDataContractAttribute);
		if (collectionContractAttribute.value.IsNameSetExplicit) {
			var text = collectionContractAttribute.value.Name;
			if (!((text !== null) && (text.length !== 0))) {
				throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Runtime.Serialization.InvalidDataContractException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("InvalidCollectionContractName", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(type)])]));
			}
			if (!(!type.IsGenericType || type.IsGenericTypeDefinition)) {
				text = $asm09.System.Runtime.Serialization.DataContract.ExpandGenericParameters$0(text, type);
			}
			text = $asm09.System.Runtime.Serialization.DataContract.EncodeLocalName(text);
		} else {
			text = $asm09.System.Runtime.Serialization.DataContract.GetDefaultStableLocalName(type);
		}
		if (collectionContractAttribute.value.IsNamespaceSetExplicit) {
			var text2 = collectionContractAttribute.value.Namespace;
			if (text2 === null) {
				throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Runtime.Serialization.InvalidDataContractException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("InvalidCollectionContractNamespace", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(type)])]));
			}
			$asm09.System.Runtime.Serialization.DataContract.CheckExplicitDataContractNamespaceUri(text2, type);
		} else {
			text2 = $asm09.System.Runtime.Serialization.DataContract.GetDefaultDataContractNamespace(type);
		}
	} else {
		collectionContractAttribute.value = null;
		var str = (("ArrayOf" + $asm09.System.Runtime.Serialization.DataContract.GetArrayPrefix(/* ref */ itemType)));
		var stableName = $asm09.System.Runtime.Serialization.DataContract.GetStableName$0(itemType.value);
		text = ((str + stableName.Name));
		text2 = $asm09.System.Runtime.Serialization.DataContract.GetCollectionNamespace(stableName.Namespace);
	}
	return $asm09.System.Runtime.Serialization.DataContract.CreateQualifiedName(text, text2);
};
$asm09.System.Runtime.Serialization.DataContract.GetArrayPrefix = function (/* ref */ itemType) {
	var text = System.String.Empty;
__loop0__: 
	while (!(!itemType.value.IsArray || $asm09.System.Runtime.Serialization.DataContract.GetBuiltInDataContract$0(itemType.value))) {
		text = ((text + "ArrayOf"));
		itemType.value = itemType.value.GetElementType();
	}
	return text;
};
$asm09.System.Runtime.Serialization.DataContract.GetCollectionNamespace = function (elementNs) {
	if (!$asm09.System.Runtime.Serialization.DataContract.IsBuiltInNamespace(elementNs)) {
		return elementNs;
	}
	return "http://schemas.microsoft.com/2003/10/Serialization/Arrays";
};
$asm09.System.Runtime.Serialization.DataContract.GetDefaultStableName = function (type) {
	return $asm09.System.Runtime.Serialization.DataContract.CreateQualifiedName($asm09.System.Runtime.Serialization.DataContract.GetDefaultStableLocalName(type), $asm09.System.Runtime.Serialization.DataContract.GetDefaultStableNamespace$0(type));
};
$asm09.System.Runtime.Serialization.DataContract.GetDefaultStableLocalName = function ($type) {
	var type = new JSIL.Variable($type);
	if (type.value.IsGenericParameter) {
		return JSIL.ConcatString("{", type.value.GenericParameterPosition, "}");
	}
	var text = null;
	if (type.value.IsArray) {
		text = $asm09.System.Runtime.Serialization.DataContract.GetArrayPrefix(/* ref */ type);
	}
	if (type.value.DeclaringType === null) {
		var text2 = type.value.Name;
	} else {
		var num = (type.value.Namespace === null) ? 0 : type.value.Namespace.length;
		if (num > 0) {
			++num;
		}
		text2 = $asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(type.value).Substring$0(num).Replace$0("+", ".");
	}
	if (text !== null) {
		text2 = ((text + text2));
	}
	if (type.value.IsGenericType) {
		var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
		var stringBuilder2 = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
		var flag = true;
		var num2 = text2.IndexOf$0("[");
		if (num2 >= 0) {
			text2 = text2.Substring$1(0, num2);
		}
		var dataContractNameForGenericName = $asm09.System.Runtime.Serialization.DataContract.GetDataContractNameForGenericName(text2, stringBuilder);
		var isGenericTypeDefinition = type.value.IsGenericTypeDefinition;
		var genericArguments = type.value.GetGenericArguments();
	__loop0__: 
		for (var i = 0; i < genericArguments.length; ++i) {
			if (isGenericTypeDefinition) {
				((stringBuilder.Append$2("{")).Append$9(i)).Append$2("}");
			} else {
				var stableName = $asm09.System.Runtime.Serialization.DataContract.GetStableName$0(genericArguments[i]);
				stringBuilder.Append$2(stableName.Name);
				(stringBuilder2.Append$2(" ")).Append$2(stableName.Namespace);
				if (flag) {
					flag = $asm09.System.Runtime.Serialization.DataContract.IsBuiltInNamespace(stableName.Namespace);
				}
			}
		}
		if (isGenericTypeDefinition) {
			stringBuilder.Append$2("{#}");
		} else if (!((dataContractNameForGenericName.ICollection$b1_Count <= 1) && flag)) {
			var enumerator = dataContractNameForGenericName.IEnumerable$b1_GetEnumerator();
			try {
			__loop1__: 
				while (enumerator.IEnumerator_MoveNext()) {
					var current = enumerator.IEnumerator$b1_Current;
					(stringBuilder2.Insert$1(0, (current).toString())).Insert$1(0, " ");
				}
			} finally {
				if (enumerator !== null) {
					enumerator.IDisposable_Dispose();
				}
			}
			stringBuilder.Append$2($asm09.System.Runtime.Serialization.DataContract.GetNamespacesDigest(stringBuilder2.toString()));
		}
		text2 = stringBuilder.toString();
	}
	return $asm09.System.Runtime.Serialization.DataContract.EncodeLocalName(text2);
};
$asm09.System.Runtime.Serialization.DataContract.GetDefaultDataContractNamespace = function (type) {
	var text = type.Namespace;
	if (text === null) {
		text = System.String.Empty;
	}
	var text2 = $asm09.System.Runtime.Serialization.DataContract.GetGlobalDataContractNamespace(text, type.Module);
	if (text2 === null) {
		text2 = $asm09.System.Runtime.Serialization.DataContract.GetGlobalDataContractNamespace(text, type.Assembly);
	}
	if (text2 === null) {
		text2 = $asm09.System.Runtime.Serialization.DataContract.GetDefaultStableNamespace$0(type);
	} else {
		$asm09.System.Runtime.Serialization.DataContract.CheckExplicitDataContractNamespaceUri(text2, type);
	}
	return text2;
};
$asm09.System.Runtime.Serialization.DataContract.GetDataContractNameForGenericName = function (typeName, localName) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				var list = new (System.Collections.Generic.List$b1.Of(System.Int32)) ();
				var num = 0;
			__loop0__: 
				while (true) {
					var num2 = typeName.IndexOf$1("`", num);
					if (num2 < 0) {
						break __loop0__;
					}
					if (localName !== null) {
						var text = typeName.Substring$1(num, (num2 - num));
						localName.Append$2(text.Equals$1("KeyValuePairAdapter") ? "KeyValuePair" : text);
					}
				__loop1__: 
					while ((num = typeName.IndexOf$2(".", (num + 1), ((num2 - num) - 1))) >= 0) {
						list.Add(0);
					}
					num = typeName.IndexOf$1(".", num2);
					if (num < 0) {
						__label0__ = "Block_6";
						continue __step0__;
					}
					list.Add(System.Int32.Parse(typeName.Substring$1((num2 + 1), ((num - num2) - 1)), System.Globalization.CultureInfo.InvariantCulture));
				}
				if (localName !== null) {
					localName.Append$2(typeName.Substring$0(num));
					__label0__ = "IL_27";
					continue __step0__;
				}
				__label0__ = "IL_27";
				continue __step0__;
				__label0__ = "Block_6";
				continue __step0__;
				break;
			case "Block_6":
				list.Add(System.Int32.Parse(typeName.Substring$0((num2 + 1)), System.Globalization.CultureInfo.InvariantCulture));
				__label0__ = "IL_C7";
				continue __step0__;
				break;
			case "IL_C7":
				if (localName !== null) {
					localName.Append$2("Of");
				}
				return list;
				__label0__ = "IL_27";
				continue __step0__;
				break;
			case "IL_27":
				list.Add(0);
				__label0__ = "IL_C7";
				continue __step0__;
				break __step0__;
		}
	}
};
$asm09.System.Runtime.Serialization.DataContract.IsBuiltInNamespace = function (ns) {
	return ((ns == "http://www.w3.org/2001/XMLSchema") || (ns == "http://schemas.microsoft.com/2003/10/Serialization/"));
};
$asm09.System.Runtime.Serialization.DataContract.GetDefaultStableNamespace$0 = function (type) {
	if (type.IsGenericParameter) {
		return "{ns}";
	}
	return $asm09.System.Runtime.Serialization.DataContract.GetDefaultStableNamespace$1(type.Namespace);
};
$asm09.System.Runtime.Serialization.DataContract.CreateQualifiedName = function (localName, ns) {
	return JSIL.New(System.Xml.XmlQualifiedName, "_ctor$2", [localName, $asm09.System.Runtime.Serialization.DataContract.GetNamespace(ns)]);
};
$asm09.System.Runtime.Serialization.DataContract.GetDefaultStableNamespace$1 = function (clrNs) {
	if (clrNs === null) {
		clrNs = System.String.Empty;
	}
	return JSIL.New(System.Uri, "_ctor$2", [System.Runtime.Serialization.Globals.DataContractXsdBaseNamespaceUri, clrNs]).AbsoluteUri;
};
$asm09.System.Runtime.Serialization.DataContract.CheckExplicitDataContractNamespaceUri = function (dataContractNs, type) {
	var uri = new JSIL.Variable(null);
	if (dataContractNs.length > 0) {
		var text = dataContractNs.Trim$1();
		if (!((text.length !== 0) && (text.IndexOf$6("##", System.StringComparison.Ordinal) === -1))) {
			$asm09.System.Runtime.Serialization.DataContract.ThrowInvalidDataContractException($asm09.System.Runtime.Serialization.SR.GetString$0("DataContractNamespaceIsNotValid", [dataContractNs]), type);
		}
		dataContractNs = text;
	}
	if (System.Uri.TryCreate$0(dataContractNs, System.UriKind.RelativeOrAbsolute, /* ref */ uri)) {
		if (uri.value.toString() == "http://schemas.microsoft.com/2003/10/Serialization/") {
			$asm09.System.Runtime.Serialization.DataContract.ThrowInvalidDataContractException($asm09.System.Runtime.Serialization.SR.GetString$0("DataContractNamespaceReserved", ["http://schemas.microsoft.com/2003/10/Serialization/"]), type);
			return;
		}
	} else {
		$asm09.System.Runtime.Serialization.DataContract.ThrowInvalidDataContractException($asm09.System.Runtime.Serialization.SR.GetString$0("DataContractNamespaceIsNotValid", [dataContractNs]), type);
	}
};
$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName = function (type) {
	if (!(!type.IsGenericTypeDefinition && type.ContainsGenericParameters)) {
		return type.FullName;
	}
	return System.String.Format(System.Globalization.CultureInfo.InvariantCulture, "{0}.{1}", [type.Namespace, type.Name]);
};
$asm09.System.Runtime.Serialization.DataContract.GetClrNameAndNamespace = function (fullTypeName, /* ref */ localName, /* ref */ ns) {
	var num = fullTypeName.LastIndexOf$0(".");
	if (num < 0) {
		ns.value = System.String.Empty;
		localName.value = fullTypeName.Replace$0("+", ".");
	} else {
		ns.value = fullTypeName.Substring$1(0, num);
		localName.value = (fullTypeName.Substring$0((num + 1))).Replace$0("+", ".");
	}
	var num2 = localName.value.IndexOf$0("[");
	if (num2 >= 0) {
		localName.value = localName.value.Substring$1(0, num2);
	}
};
$asm09.System.Runtime.Serialization.DataContract.GetDataContractNamespaceFromUri = function (uriString) {
	if (!uriString.StartsWith$1("http://schemas.datacontract.org/2004/07/", System.StringComparison.Ordinal)) {
		return uriString;
	}
	return uriString.Substring$0("http://schemas.datacontract.org/2004/07/".length);
};
$asm09.System.Runtime.Serialization.DataContract.GetGlobalDataContractNamespace = function (clrNs, customAttribuetProvider) {
	var customAttributes = customAttribuetProvider.ICustomAttributeProvider_GetCustomAttributes$0(System.Runtime.Serialization.ContractNamespaceAttribute, false);
	var text = null;
__loop0__: 
	for (var i = 0; i < customAttributes.length; ++i) {
		var contractNamespaceAttribute = JSIL.Cast(customAttributes[i], System.Runtime.Serialization.ContractNamespaceAttribute);
		var text2 = contractNamespaceAttribute.ClrNamespace;
		if (text2 === null) {
			text2 = System.String.Empty;
		}
		if (text2 == clrNs) {
			if (contractNamespaceAttribute.ContractNamespace === null) {
				throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Runtime.Serialization.InvalidDataContractException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("InvalidGlobalDataContractNamespace", [clrNs])]));
			}
			if (text !== null) {
				throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Runtime.Serialization.InvalidDataContractException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("DataContractNamespaceAlreadySet", [text, contractNamespaceAttribute.ContractNamespace, clrNs])]));
			}
			text = contractNamespaceAttribute.ContractNamespace;
		}
	}
	return text;
};
$asm09.System.Runtime.Serialization.DataContract.GetNamespacesDigest = function (namespaces) {
	var bytes = System.Text.Encoding.UTF8.GetBytes$3(namespaces);
	var inArray = $asm09.System.Runtime.Serialization.DataContract.ComputeHash(bytes);
	var array = JSIL.Array.New(System.Char, 24);
	var num = System.Convert.ToBase64CharArray$0(
		inArray, 
		0, 
		6, 
		array, 
		0
	);
	var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
__loop0__: 
	for (var i = 0; i < num; ++i) {
		var c = array[i];
		var c2 = c;
		if (c2 !== "+") {
			if (c2 !== "/") {
				if (c2 !== "=") {
					stringBuilder.Append$7(c);
				}
			} else {
				stringBuilder.Append$2("_S");
			}
		} else {
			stringBuilder.Append$2("_P");
		}
	}
	return stringBuilder.toString();
};
$asm09.System.Runtime.Serialization.DataContract.ComputeHash = function (namespaces) {
	var array = JSIL.Array.New(System.Int32, [7, 12, 17, 22, 5, 9, 14, 20, 4, 11, 16, 23, 6, 10, 15, 21]);
	var array2 = JSIL.Array.New(System.UInt32, [-680876936, -389564586, 606105819, -1044525330, -176418897, 1200080426, -1473231341, -45705983, 1770035416, -1958414417, -42063, -1990404162, 1804603682, -40341101, -1502002290, 1236535329, -165796510, -1069501632, 643717713, -373897302, -701558691, 38016083, -660478335, -405537848, 568446438, -1019803690, -187363961, 1163531501, -1444681467, -51403784, 1735328473, -1926607734, -378558, -2022574463, 1839030562, -35309556, -1530992060, 1272893353, -155497632, -1094730640, 681279174, -358537222, -722521979, 76029189, -640364487, -421815835, 530742520, -995338651, -198630844, 1126891415, -1416354905, -57434055, 1700485571, -1894986606, -1051523, -2054922799, 1873313359, -30611744, -1560198380, 1309151649, -145523070, -1120210379, 718787259, -343485551]);
	var num = (Math.floor((namespaces.length + 8) / 64) + 1);
	var num2 = 1732584193;
	var num3 = -271733879;
	var num4 = -1732584194;
	var num5 = 271733878;
__loop0__: 
	for (var i = 0; i < num; ++i) {
		var array3 = namespaces;
		var num6 = (i * 64);
		if ((num6 + 64) > namespaces.length) {
			array3 = JSIL.Array.New(System.Byte, 64);
		__loop1__: 
			for (var j = num6; j < namespaces.length; ++j) {
				array3[(j - num6)] = namespaces[j];
			}
			if (num6 <= namespaces.length) {
				array3[(namespaces.length - num6)] = 128;
			}
			if (i === (num - 1)) {
				array3[56] = (namespaces.length << 3);
				array3[57] = (namespaces.length >> 5);
				array3[58] = (namespaces.length >> 13);
				array3[59] = (namespaces.length >> 21);
			}
			num6 = 0;
		}
		var num7 = num2;
		var num8 = num3;
		var num9 = num4;
		var num10 = num5;
	__loop2__: 
		for (var k = 0; k < 64; ++k) {
			if (k < 16) {
				var num11 = ((num8 & num9) | (~num8 & num10));
				var num12 = k;
			} else if (k < 32) {
				num11 = ((num8 & num10) | (num9 & ~num10));
				num12 = ((5 * k) + 1);
			} else if (k < 48) {
				num11 = ((num8 ^ num9) ^ num10);
				num12 = ((3 * k) + 5);
			} else {
				num11 = (num9 ^ (num8 | ~num10));
				num12 = (7 * k);
			}
			num12 = (((num12 & 15) * 4) + num6);
			var num13 = num10;
			num10 = num9;
			num9 = num8;
			num8 = (((num7 + num11) + array2[k]) + (((array3[num12] + (array3[(num12 + 1)] << 8)) + (array3[(num12 + 2)] << 16)) + (array3[(num12 + 3)] << 24)));
			num8 = ((num8 << (array[((k & 3) | ((k >> 2) & -4))] & 31)) | (num8 >>> ((32 - array[((k & 3) | ((k >> 2) & -4))]) & 31)));
			num8 += num9;
			num7 = num13;
		}
		num2 += num7;
		num3 += num8;
		if (i < (num - 1)) {
			num4 += num9;
			num5 += num10;
		}
	}
	return JSIL.Array.New(System.Byte, [num2, (num2 >>> 8), (num2 >>> 16), (num2 >>> 24), num3, (num3 >>> 8)]);
};
$asm09.System.Runtime.Serialization.DataContract.ExpandGenericParameters$0 = function (format, type) {
	var genericNameProvider = JSIL.New($asm09.System.Runtime.Serialization.GenericNameProvider, "_ctor$0", [type]);
	return $asm09.System.Runtime.Serialization.DataContract.ExpandGenericParameters$1(format, genericNameProvider);
};
$asm09.System.Runtime.Serialization.DataContract.ExpandGenericParameters$1 = function (format, genericNameProvider) {
	var num2 = new JSIL.Variable(0);
	var text = null;
	var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
	var nestedParameterCounts = genericNameProvider.IGenericNameProvider_GetNestedParameterCounts();
__loop0__: 
	for (var i = 0; i < format.length; ++i) {
		var c = (format[i]);
		if (c === "{") {
			++i;
			var num = i;
		__loop1__: 
			while (!((i >= format.length) || ((format[i]) === "}"))) {
				++i;
			}
			if (i === format.length) {
				throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Runtime.Serialization.InvalidDataContractException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("GenericNameBraceMismatch", [format, genericNameProvider.IGenericNameProvider_GetGenericTypeName()])]));
			}
			if (!(((format[num]) !== "#") || (i !== (num + 1)))) {
				if (!((nestedParameterCounts.ICollection$b1_Count <= 1) && genericNameProvider.IGenericNameProvider_ParametersFromBuiltInNamespaces)) {
					if (text === null) {
						var stringBuilder2 = JSIL.New(System.Text.StringBuilder, "_ctor$2", [genericNameProvider.IGenericNameProvider_GetNamespaces()]);
						var enumerator = nestedParameterCounts.IEnumerable$b1_GetEnumerator();
						try {
						__loop2__: 
							while (enumerator.IEnumerator_MoveNext()) {
								var current = enumerator.IEnumerator$b1_Current;
								(stringBuilder2.Insert$1(0, (current).toString())).Insert$1(0, " ");
							}
						} finally {
							if (enumerator !== null) {
								enumerator.IDisposable_Dispose();
							}
						}
						text = $asm09.System.Runtime.Serialization.DataContract.GetNamespacesDigest(stringBuilder2.toString());
					}
					stringBuilder.Append$2(text);
				}
			} else {
				if (!(System.Int32.TryParse$0(format.Substring$1(num, (i - num)), /* ref */ num2) && 
						(num2.value >= 0) && (num2.value < genericNameProvider.IGenericNameProvider_GetParameterCount()))) {
					throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Runtime.Serialization.InvalidDataContractException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("GenericParameterNotValid", [format.Substring$1(num, (i - num)), genericNameProvider.IGenericNameProvider_GetGenericTypeName(), (genericNameProvider.IGenericNameProvider_GetParameterCount() - 1)])]));
				}
				stringBuilder.Append$2(genericNameProvider.IGenericNameProvider_GetParameterName(num2.value));
			}
		} else {
			stringBuilder.Append$7(c);
		}
	}
	return stringBuilder.toString();
};
$asm09.System.Runtime.Serialization.DataContract.IsTypeNullable = function (type) {
	return (!type.IsValueType || (type.IsGenericType && 
			(type.GetGenericTypeDefinition() === System.Runtime.Serialization.Globals.TypeOfNullable)));
};
$asm09.System.Runtime.Serialization.DataContract.ImportKnownTypeAttributes$0 = function (type) {
	var result = new JSIL.Variable(null);
	var typesChecked = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.Type, System.Type), "_ctor$0", []);
	$asm09.System.Runtime.Serialization.DataContract.ImportKnownTypeAttributes$1(type, typesChecked, /* ref */ result);
	return result.value;
};
$asm09.System.Runtime.Serialization.DataContract.ImportKnownTypeAttributes$1 = function (type, typesChecked, /* ref */ knownDataContracts) {
__loop0__: 
	for (; (type !== null) && $asm09.System.Runtime.Serialization.DataContract.IsTypeSerializable(type); type = type.BaseType) {
		if (typesChecked.ContainsKey(type)) {
			return;
		}
		typesChecked.Add(type, type);
		var customAttributes = type.GetCustomAttributes$1(System.Runtime.Serialization.Globals.TypeOfKnownTypeAttribute, false);
		if (customAttributes !== null) {
			var flag = false;
			var flag2 = false;
		__loop1__: 
			for (var i = 0; i < customAttributes.length; ++i) {
				var knownTypeAttribute = JSIL.Cast(customAttributes[i], System.Runtime.Serialization.KnownTypeAttribute);
				if (knownTypeAttribute.Type !== null) {
					if (flag) {
						$asm09.System.Runtime.Serialization.DataContract.ThrowInvalidDataContractException($asm09.System.Runtime.Serialization.SR.GetString$0("KnownTypeAttributeOneScheme", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(type)]), type);
					}
					$asm09.System.Runtime.Serialization.DataContract.CheckAndAdd(knownTypeAttribute.Type, typesChecked, /* ref */ knownDataContracts);
					flag2 = true;
				} else {
					if (!(!flag && !flag2)) {
						$asm09.System.Runtime.Serialization.DataContract.ThrowInvalidDataContractException($asm09.System.Runtime.Serialization.SR.GetString$0("KnownTypeAttributeOneScheme", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(type)]), type);
					}
					var methodName = knownTypeAttribute.MethodName;
					if (methodName === null) {
						$asm09.System.Runtime.Serialization.DataContract.ThrowInvalidDataContractException($asm09.System.Runtime.Serialization.SR.GetString$0("KnownTypeAttributeNoData", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(type)]), type);
					}
					if (methodName.length === 0) {
						$asm09.System.Runtime.Serialization.DataContract.ThrowInvalidDataContractException($asm09.System.Runtime.Serialization.SR.GetString$0("KnownTypeAttributeEmptyString", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(type)]), type);
					}
					var method = type.GetMethod$1(
						methodName, 
						(System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static), 
						null, 
						System.Runtime.Serialization.Globals.EmptyTypeArray, 
						null
					);
					if (method === null) {
						$asm09.System.Runtime.Serialization.DataContract.ThrowInvalidDataContractException($asm09.System.Runtime.Serialization.SR.GetString$0("KnownTypeAttributeUnknownMethod", [methodName, $asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(type)]), type);
					}
					if (!System.Runtime.Serialization.Globals.TypeOfTypeEnumerable.IsAssignableFrom(method.ReturnType)) {
						$asm09.System.Runtime.Serialization.DataContract.ThrowInvalidDataContractException($asm09.System.Runtime.Serialization.SR.GetString$0("KnownTypeAttributeReturnType", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(type), methodName]), type);
					}
					var obj = method.Invoke$1(null, System.Runtime.Serialization.Globals.EmptyObjectArray);
					if (obj === null) {
						$asm09.System.Runtime.Serialization.DataContract.ThrowInvalidDataContractException($asm09.System.Runtime.Serialization.SR.GetString$0("KnownTypeAttributeMethodNull", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(type)]), type);
					}
					var enumerator = JSIL.Cast(obj, System.Collections.Generic.IEnumerable$b1.Of(System.Type)).IEnumerable$b1_GetEnumerator();
					try {
					__loop2__: 
						while (enumerator.IEnumerator_MoveNext()) {
							var current = enumerator.IEnumerator$b1_Current;
							if (current === null) {
								$asm09.System.Runtime.Serialization.DataContract.ThrowInvalidDataContractException($asm09.System.Runtime.Serialization.SR.GetString$0("KnownTypeAttributeValidMethodTypes", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(type)]), type);
							}
							$asm09.System.Runtime.Serialization.DataContract.CheckAndAdd(current, typesChecked, /* ref */ knownDataContracts);
						}
					} finally {
						if (enumerator !== null) {
							enumerator.IDisposable_Dispose();
						}
					}
					flag = true;
				}
			}
		}
		try {
			var collectionDataContract = JSIL.TryCast($asm09.System.Runtime.Serialization.DataContract.GetDataContract$0(type), $asm09.System.Runtime.Serialization.CollectionDataContract);
			if (!((collectionDataContract === null) || 
					!collectionDataContract.IsDictionary || (collectionDataContract.ItemType.GetGenericTypeDefinition() !== System.Runtime.Serialization.Globals.TypeOfKeyValue))) {
				var dataContract = $asm09.System.Runtime.Serialization.DataContract.GetDataContract$0(System.Runtime.Serialization.Globals.TypeOfKeyValuePair.MakeGenericType(collectionDataContract.ItemType.GetGenericArguments()));
				if (knownDataContracts.value === null) {
					knownDataContracts.value = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.Xml.XmlQualifiedName, $asm09.System.Runtime.Serialization.DataContract), "_ctor$0", []);
				}
				if (!knownDataContracts.value.ContainsKey(dataContract.StableName)) {
					knownDataContracts.value.Add(dataContract.StableName, dataContract);
				}
			}
		} catch ($exception) {
			if (JSIL.CheckType($exception, System.Runtime.Serialization.InvalidDataContractException)) {
			} else {
				throw $exception;
			}
		}
	}
};
$asm09.System.Runtime.Serialization.DataContract.IsElemTypeNullOrNotEqualToRootType = function (elemTypeName, rootType) {
	var type = System.Type.GetType$1(elemTypeName, false);
	return !((type !== null) && rootType.Equals$1(type));
};
$asm09.System.Runtime.Serialization.DataContract.IsCollectionElementTypeEqualToRootType = function (collectionElementTypeName, rootType) {
	if (collectionElementTypeName.StartsWith$1($asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(rootType), System.StringComparison.Ordinal)) {
		var type = System.Type.GetType$1(collectionElementTypeName, false);
		if (type !== null) {
			if (!(!type.IsGenericType || $asm09.System.Runtime.Serialization.DataContract.IsOpenGenericType(type))) {
				throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("KnownTypeConfigClosedGenericDeclared", [collectionElementTypeName])]));
			}
			if (rootType.Equals$1(type)) {
				return true;
			}
		}
	}
	return false;
};
$asm09.System.Runtime.Serialization.DataContract.CheckAndAdd = function (type, typesChecked, /* ref */ nameToDataContractTable) {
	var dataContract2 = new JSIL.Variable(null);
	type = $asm09.System.Runtime.Serialization.DataContract.UnwrapNullableType(type);
	var dataContract = $asm09.System.Runtime.Serialization.DataContract.GetDataContract$0(type);
	if (nameToDataContractTable.value === null) {
		nameToDataContractTable.value = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.Xml.XmlQualifiedName, $asm09.System.Runtime.Serialization.DataContract), "_ctor$0", []);
	} else if (nameToDataContractTable.value.TryGetValue(dataContract.StableName, /* ref */ dataContract2)) {
		if (!((dataContract2.value.UnderlyingType === type) || ((JSIL.TryCast(dataContract2.value, $asm09.System.Runtime.Serialization.ClassDataContract) !== null) && 
					JSIL.Cast(dataContract2.value, $asm09.System.Runtime.Serialization.ClassDataContract).IsKeyValuePairAdapter))) {
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("DupContractInKnownTypes", [type, dataContract2.value.UnderlyingType, dataContract.StableName.Namespace, dataContract.StableName.Name])]));
		}
		return;
	}
	nameToDataContractTable.value.Add(dataContract.StableName, dataContract);
	$asm09.System.Runtime.Serialization.DataContract.ImportKnownTypeAttributes$1(type, typesChecked, /* ref */ nameToDataContractTable);
};
$asm09.System.Runtime.Serialization.DataContract.IsOpenGenericType = function (t) {
	var genericArguments = t.GetGenericArguments();
__loop0__: 
	for (var i = 0; i < genericArguments.length; ++i) {
		if (!genericArguments[i].IsGenericParameter) {
			return false;
		}
	}
	return true;
};
$asm09.System.Runtime.Serialization.DataContract.IsTypeVisible = function (t, serializationAssemblyPatterns) {
	if (!(t.IsVisible || $asm09.System.Runtime.Serialization.DataContract.IsTypeVisibleInSerializationModule(t, serializationAssemblyPatterns))) {
		return false;
	}
	var genericArguments = t.GetGenericArguments();
__loop0__: 
	for (var i = 0; i < genericArguments.length; ++i) {
		var type = genericArguments[i];
		if (!(type.IsGenericParameter || $asm09.System.Runtime.Serialization.DataContract.IsTypeVisible(type, serializationAssemblyPatterns))) {
			return false;
		}
	}
	return true;
};
$asm09.System.Runtime.Serialization.DataContract.ConstructorRequiresMemberAccess = function (ctor, serializationAssemblyPatterns) {
	return (!((ctor === null) || 
			ctor.IsPublic) && !$asm09.System.Runtime.Serialization.DataContract.IsMemberVisibleInSerializationModule(ctor, serializationAssemblyPatterns));
};
$asm09.System.Runtime.Serialization.DataContract.MethodRequiresMemberAccess = function (method, serializationAssemblyPatterns) {
	return (!((method === null) || 
			method.IsPublic) && !$asm09.System.Runtime.Serialization.DataContract.IsMemberVisibleInSerializationModule(method, serializationAssemblyPatterns));
};
$asm09.System.Runtime.Serialization.DataContract.FieldRequiresMemberAccess = function (field, serializationAssemblyPatterns) {
	return (!((field === null) || 
			field.IsPublic) && !$asm09.System.Runtime.Serialization.DataContract.IsMemberVisibleInSerializationModule(field, serializationAssemblyPatterns));
};
$asm09.System.Runtime.Serialization.DataContract.IsTypeVisibleInSerializationModule = function (type, serializationAssemblyPatterns) {
	return (!(!type.Module.Equals($asm09.System.Runtime.Serialization.CodeGenerator.Module) && 
			!$asm09.System.Runtime.Serialization.DataContract.IsAssemblyFriendOfSerialization(type.Assembly, serializationAssemblyPatterns)) && !type.IsNestedPrivate);
};
$asm09.System.Runtime.Serialization.DataContract.IsMemberVisibleInSerializationModule = function (member, serializationAssemblyPatterns) {
	if (!$asm09.System.Runtime.Serialization.DataContract.IsTypeVisibleInSerializationModule(member.DeclaringType, serializationAssemblyPatterns)) {
		return false;
	}
	if (JSIL.TryCast(member, System.Reflection.MethodInfo) !== null) {
		var methodInfo = JSIL.Cast(member, System.Reflection.MethodInfo);
		return (methodInfo.IsAssembly || methodInfo.IsFamilyOrAssembly);
	}
	if (JSIL.TryCast(member, System.Reflection.FieldInfo) !== null) {
		var fieldInfo = JSIL.Cast(member, System.Reflection.FieldInfo);
		return (!(!fieldInfo.IsAssembly && 
				!fieldInfo.IsFamilyOrAssembly) && $asm09.System.Runtime.Serialization.DataContract.IsTypeVisible(fieldInfo.FieldType, serializationAssemblyPatterns));
	}
	if (JSIL.TryCast(member, System.Reflection.ConstructorInfo) !== null) {
		var constructorInfo = JSIL.Cast(member, System.Reflection.ConstructorInfo);
		return (constructorInfo.IsAssembly || constructorInfo.IsFamilyOrAssembly);
	}
	return false;
};
$asm09.System.Runtime.Serialization.DataContract.IsAssemblyFriendOfSerialization = function (assembly, serializationAssemblyPatterns) {
__loop0__: 
	for (var i = 0; i < serializationAssemblyPatterns.length; i += 2) {
		if (!$asm09.System.Runtime.Serialization.DataContract.IsAssemblyFriendOfSerializationAssembly(assembly, serializationAssemblyPatterns[i], serializationAssemblyPatterns[(i + 1)])) {
			return false;
		}
	}
	return true;
};
$asm09.System.Runtime.Serialization.DataContract.IsAssemblyFriendOfSerializationAssembly = function (assembly, simpleSerializationAssemblyInternalsVisiblePattern, fullSerializationAssemblyInternalsVisiblePattern) {
	var array = JSIL.Cast(assembly.GetCustomAttributes$1(System.Runtime.CompilerServices.InternalsVisibleToAttribute, false), System.Array.Of(System.Runtime.CompilerServices.InternalsVisibleToAttribute));
	var array2 = array;
__loop0__: 
	for (var i = 0; i < array2.length; ++i) {
		var assemblyName = array2[i].AssemblyName;
		if (!(!System.Text.RegularExpressions.Regex.IsMatch$0(assemblyName, simpleSerializationAssemblyInternalsVisiblePattern) && !System.Text.RegularExpressions.Regex.IsMatch$0(assemblyName, fullSerializationAssemblyInternalsVisiblePattern))) {
			return true;
		}
	}
	return false;
};
JSIL.OverloadedMethod(System.Runtime.Serialization.DataContract, "GetDataContract", [
		["GetDataContract$0", [System.Type]], 
		["GetDataContract$1", [System.RuntimeTypeHandle, System.Type]], 
		["GetDataContract$2", [System.RuntimeTypeHandle, System.Type, System.Runtime.Serialization.SerializationMode]], 
		["GetDataContract$3", [System.Int32, System.RuntimeTypeHandle, System.Runtime.Serialization.SerializationMode]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.DataContract, "GetBuiltInDataContract", [
		["GetBuiltInDataContract$0", [System.Type]], 
		["GetBuiltInDataContract$1", [System.String, System.String]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.DataContract.prototype, "GetValidContract", [
		["GetValidContract$0", [System.Runtime.Serialization.SerializationMode]], 
		["GetValidContract$1", []]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.DataContract, "GetStableName", [
		["GetStableName$0", [System.Type]], 
		["GetStableName$1", [System.Type, JSIL.Reference.Of(System.Boolean)]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.DataContract, "GetDefaultStableNamespace", [
		["GetDefaultStableNamespace$0", [System.Type]], 
		["GetDefaultStableNamespace$1", [System.String]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.DataContract, "ExpandGenericParameters", [
		["ExpandGenericParameters$0", [System.String, System.Type]], 
		["ExpandGenericParameters$1", [System.String, System.Runtime.Serialization.IGenericNameProvider]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.DataContract, "ImportKnownTypeAttributes", [
		["ImportKnownTypeAttributes$0", [System.Type]], 
		["ImportKnownTypeAttributes$1", [System.Type, System.Collections.Generic.Dictionary$b2.Of(System.Type, System.Type), JSIL.Reference.Of(System.Collections.Generic.Dictionary$b2.Of(System.Xml.XmlQualifiedName, System.Runtime.Serialization.DataContract))]]
	]);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DataContract.prototype, "Helper", 
	$asm09.System.Runtime.Serialization.DataContract.prototype.get_Helper, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DataContract.prototype, "UnderlyingType", 
	$asm09.System.Runtime.Serialization.DataContract.prototype.get_UnderlyingType, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DataContract.prototype, "IsBuiltInDataContract", 
	$asm09.System.Runtime.Serialization.DataContract.prototype.get_IsBuiltInDataContract, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DataContract.prototype, "TypeForInitialization", 
	$asm09.System.Runtime.Serialization.DataContract.prototype.get_TypeForInitialization, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DataContract.prototype, "IsValueType", 
	$asm09.System.Runtime.Serialization.DataContract.prototype.get_IsValueType, $asm09.System.Runtime.Serialization.DataContract.prototype.set_IsValueType);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DataContract.prototype, "IsReference", 
	$asm09.System.Runtime.Serialization.DataContract.prototype.get_IsReference, $asm09.System.Runtime.Serialization.DataContract.prototype.set_IsReference);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DataContract.prototype, "StableName", 
	$asm09.System.Runtime.Serialization.DataContract.prototype.get_StableName, $asm09.System.Runtime.Serialization.DataContract.prototype.set_StableName);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DataContract.prototype, "KnownDataContracts", 
	$asm09.System.Runtime.Serialization.DataContract.prototype.get_KnownDataContracts, $asm09.System.Runtime.Serialization.DataContract.prototype.set_KnownDataContracts);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DataContract.prototype, "Name", 
	$asm09.System.Runtime.Serialization.DataContract.prototype.get_Name, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DataContract.prototype, "Namespace", 
	$asm09.System.Runtime.Serialization.DataContract.prototype.get_Namespace, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DataContract.prototype, "HasRoot", 
	$asm09.System.Runtime.Serialization.DataContract.prototype.get_HasRoot, $asm09.System.Runtime.Serialization.DataContract.prototype.set_HasRoot);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DataContract.prototype, "TopLevelElementName", 
	$asm09.System.Runtime.Serialization.DataContract.prototype.get_TopLevelElementName, $asm09.System.Runtime.Serialization.DataContract.prototype.set_TopLevelElementName);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DataContract.prototype, "TopLevelElementNamespace", 
	$asm09.System.Runtime.Serialization.DataContract.prototype.get_TopLevelElementNamespace, $asm09.System.Runtime.Serialization.DataContract.prototype.set_TopLevelElementNamespace);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DataContract.prototype, "CanContainReferences", 
	$asm09.System.Runtime.Serialization.DataContract.prototype.get_CanContainReferences, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DataContract.prototype, "IsPrimitive", 
	$asm09.System.Runtime.Serialization.DataContract.prototype.get_IsPrimitive, null);
$asm09.System.Runtime.Serialization.DataContract.prototype.name = null;
$asm09.System.Runtime.Serialization.DataContract.prototype.ns = null;
$asm09.System.Runtime.Serialization.DataContract.prototype.helper = null;

$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.GetDataContractSkipValidation = function (id, typeHandle, type) {
	var dataContract = $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.dataContractCache[id];
	if (dataContract === null) {
		dataContract = $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.CreateDataContract(id, typeHandle, type);
		$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.dataContractCache[id] = dataContract;
		return dataContract;
	}
	return dataContract.GetValidContract$1();
};
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.GetGetOnlyCollectionDataContractSkipValidation = function (id, typeHandle, type) {
	var dataContract = $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.dataContractCache[id];
	if (dataContract === null) {
		dataContract = $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.CreateGetOnlyCollectionDataContract(id, typeHandle, type);
		$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.dataContractCache[id] = dataContract;
	}
	return dataContract;
};
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.GetDataContractForInitialization = function (id) {
	var dataContract = $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.dataContractCache[id];
	if (dataContract === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Runtime.Serialization.SerializationException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$2("DataContractCacheOverflow")]));
	}
	return dataContract;
};
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.GetIdForInitialization = function (classContract) {
	var id = $asm09.System.Runtime.Serialization.DataContract.GetId(classContract.TypeForInitialization.TypeHandle.MemberwiseClone());
	if (!((id >= $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.dataContractCache.length) || !$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.ContractMatches(classContract, $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.dataContractCache[id]))) {
		return id;
	}
__loop0__: 
	for (var i = 0; i < $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.dataContractID; ++i) {
		if ($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.ContractMatches(classContract, $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.dataContractCache[i])) {
			return i;
		}
	}
	throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Runtime.Serialization.SerializationException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$2("DataContractCacheOverflow")]));
};
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.ContractMatches = function (contract, cachedContract) {
	return ((cachedContract !== null) && (cachedContract.UnderlyingType === contract.UnderlyingType));
};
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.GetId = function (typeHandle) {
	var obj = null;
	System.Threading.Monitor.Enter((obj = $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.cacheLock));
	try {
		typeHandle = $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.GetDataContractAdapterTypeHandle(typeHandle.MemberwiseClone()).MemberwiseClone();
		($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.typeHandleRef.Value = typeHandle.MemberwiseClone());
		if (!$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.typeToIDCache.TryGetValue($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.typeHandleRef, /* ref */ intRef)) {
			var num = $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.dataContractID++;
			if (num >= $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.dataContractCache.length) {
				var num2 = (num < 1073741823) ? (num * 2) : 2147483647;
				if (num2 <= num) {
					throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Runtime.Serialization.SerializationException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$2("DataContractCacheOverflow")]));
				}
				System.Array.Resize$b1($asm09.System.Runtime.Serialization.DataContract)(/* ref */ new JSIL.MemberReference($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper, "dataContractCache"), num2);
			}
			var intRef = new JSIL.Variable(new $asm09.System.Runtime.Serialization.IntRef(num));
			try {
				$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.typeToIDCache.Add(JSIL.New($asm09.System.Runtime.Serialization.TypeHandleRef, "_ctor$1", [typeHandle]), intRef.value);
			} catch ($exception) {
				var exception = $exception;
				if ($asm09.System.Runtime.Serialization.DiagnosticUtility.IsFatal(exception)) {
					throw $exception;
				}
				throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperFatal(exception.Message, exception);
			}
		}
		var value = intRef.value.Value;
	} finally {
		System.Threading.Monitor.Exit(obj);
	}
	return value;
};
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.CreateDataContract = function (id, typeHandle, type) {
	var obj = null;
	System.Threading.Monitor.Enter((obj = $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.createDataContractLock));
	try {
		var dataContract = new JSIL.Variable($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.dataContractCache[id]);
		if (dataContract.value === null) {
			if (type === null) {
				type = typeHandle;
			}
			type = $asm09.System.Runtime.Serialization.DataContract.UnwrapNullableType(type);
			type = $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.GetDataContractAdapterType(type);
			dataContract.value = $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.GetBuiltInDataContract$0(type);
			if (dataContract.value === null) {
				if (type.IsArray) {
					dataContract.value = JSIL.New($asm09.System.Runtime.Serialization.CollectionDataContract, "_ctor$0", [type]);
				} else if (type.IsEnum) {
					dataContract.value = JSIL.New($asm09.System.Runtime.Serialization.EnumDataContract, "_ctor$1", [type]);
				} else if (System.Runtime.Serialization.Globals.TypeOfIXmlSerializable.IsAssignableFrom(type)) {
					dataContract.value = JSIL.New($asm09.System.Runtime.Serialization.XmlDataContract, "_ctor$1", [type]);
				} else if ($asm09.System.Runtime.Serialization.Globals.TypeOfScriptObject_IsAssignableFrom(type)) {
					dataContract.value = $asm09.System.Runtime.Serialization.Globals.CreateScriptObjectClassDataContract();
				} else {
					if (type.IsPointer) {
						type = System.Runtime.Serialization.Globals.TypeOfReflectionPointer;
					}
					if (!$asm09.System.Runtime.Serialization.CollectionDataContract.TryCreate(type, /* ref */ dataContract)) {
						if (!($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.IsTypeSerializable(type) || 
								type.IsDefined(System.Runtime.Serialization.Globals.TypeOfDataContractAttribute, false) || $asm09.System.Runtime.Serialization.ClassDataContract.IsNonAttributedTypeValidForSerialization(type))) {
							$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.ThrowInvalidDataContractException($asm09.System.Runtime.Serialization.SR.GetString$0("TypeNotSerializable", [type]), type);
						}
						dataContract.value = JSIL.New($asm09.System.Runtime.Serialization.ClassDataContract, "_ctor$0", [type]);
					}
				}
			}
		}
		var result = dataContract.value;
	} finally {
		System.Threading.Monitor.Exit(obj);
	}
	return result;
};
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.IsTypeSerializable = function (type) {
	return (type === System.Runtime.Serialization.Globals.TypeOfDBNull);
};
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.CreateGetOnlyCollectionDataContract = function (id, typeHandle, type) {
	var obj = null;
	var dataContract = new JSIL.Variable(null);
	System.Threading.Monitor.Enter((obj = $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.createDataContractLock));
	try {
		dataContract.value = $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.dataContractCache[id];
		if (dataContract.value === null) {
			if (type === null) {
				type = typeHandle;
			}
			type = $asm09.System.Runtime.Serialization.DataContract.UnwrapNullableType(type);
			type = $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.GetDataContractAdapterType(type);
			$asm09.System.Runtime.Serialization.CollectionDataContract.CreateGetOnlyCollectionDataContract(type, /* ref */ dataContract);
		}
	} finally {
		System.Threading.Monitor.Exit(obj);
	}
	return dataContract.value;
};
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.GetDataContractAdapterType = function (type) {
	if (type === System.Runtime.Serialization.Globals.TypeOfDateTimeOffset) {
		return System.Runtime.Serialization.Globals.TypeOfDateTimeOffsetAdapter;
	}
	if (!(!type.IsGenericType || (type.GetGenericTypeDefinition() !== System.Runtime.Serialization.Globals.TypeOfKeyValuePair))) {
		return System.Runtime.Serialization.Globals.TypeOfKeyValuePairAdapter.MakeGenericType(type.GetGenericArguments());
	}
	return type;
};
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.GetDataContractAdapterTypeHandle = function (typeHandle) {
	if (System.Runtime.Serialization.Globals.TypeOfDateTimeOffset.TypeHandle.Equals$1(typeHandle.MemberwiseClone())) {
		return System.Runtime.Serialization.Globals.TypeOfDateTimeOffsetAdapter.TypeHandle;
	}
	return typeHandle;
};
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.GetBuiltInDataContract$0 = function (type) {
	var obj = null;
	if (!(!type.IsInterface || $asm09.System.Runtime.Serialization.CollectionDataContract.IsCollectionInterface(type))) {
		type = System.Runtime.Serialization.Globals.TypeOfObject;
	}
	System.Threading.Monitor.Enter((obj = $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.initBuiltInContractsLock));
	try {
		if ($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.typeToBuiltInContract === null) {
			$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.typeToBuiltInContract = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.Type, $asm09.System.Runtime.Serialization.DataContract), "_ctor$0", []);
		}
		var dataContract = new JSIL.Variable(null);
		if (!$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.typeToBuiltInContract.TryGetValue(type, /* ref */ dataContract)) {
			$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.TryCreateBuiltInDataContract$0(type, /* ref */ dataContract);
			$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.typeToBuiltInContract.Add(type, dataContract.value);
		}
	} finally {
		System.Threading.Monitor.Exit(obj);
	}
	return dataContract.value;
};
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.GetBuiltInDataContract$1 = function (name, ns) {
	var obj = null;
	System.Threading.Monitor.Enter((obj = $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.initBuiltInContractsLock));
	try {
		if ($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.nameToBuiltInContract === null) {
			$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.nameToBuiltInContract = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.Xml.XmlQualifiedName, $asm09.System.Runtime.Serialization.DataContract), "_ctor$0", []);
		}
		var dataContract = new JSIL.Variable(null);
		var key = JSIL.New(System.Xml.XmlQualifiedName, "_ctor$2", [name, ns]);
		if (!$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.nameToBuiltInContract.TryGetValue(key, /* ref */ dataContract)) {
			$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.TryCreateBuiltInDataContract$1(name, ns, /* ref */ dataContract);
			$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.nameToBuiltInContract.Add(key, dataContract.value);
		}
	} finally {
		System.Threading.Monitor.Exit(obj);
	}
	return dataContract.value;
};
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.TryCreateBuiltInDataContract$0 = function (type, /* ref */ dataContract) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				if (type.IsEnum) {
					dataContract.value = null;
					return false;
				}
				dataContract.value = null;
				switch (Number(System.Type.GetTypeCode(type))) {
					case 3: 
						dataContract.value = new $asm09.System.Runtime.Serialization.BooleanDataContract();
						__label0__ = "IL_1E8";
						continue __step0__;
					case 4: 
						dataContract.value = JSIL.New($asm09.System.Runtime.Serialization.CharDataContract, "_ctor$0", []);
						__label0__ = "IL_1E8";
						continue __step0__;
					case 5: 
						dataContract.value = new $asm09.System.Runtime.Serialization.SignedByteDataContract();
						__label0__ = "IL_1E8";
						continue __step0__;
					case 6: 
						dataContract.value = new $asm09.System.Runtime.Serialization.UnsignedByteDataContract();
						__label0__ = "IL_1E8";
						continue __step0__;
					case 7: 
						dataContract.value = new $asm09.System.Runtime.Serialization.ShortDataContract();
						__label0__ = "IL_1E8";
						continue __step0__;
					case 8: 
						dataContract.value = new $asm09.System.Runtime.Serialization.UnsignedShortDataContract();
						__label0__ = "IL_1E8";
						continue __step0__;
					case 9: 
						dataContract.value = new $asm09.System.Runtime.Serialization.IntDataContract();
						__label0__ = "IL_1E8";
						continue __step0__;
					case 10: 
						dataContract.value = new $asm09.System.Runtime.Serialization.UnsignedIntDataContract();
						__label0__ = "IL_1E8";
						continue __step0__;
					case 11: 
						dataContract.value = JSIL.New($asm09.System.Runtime.Serialization.LongDataContract, "_ctor$0", []);
						__label0__ = "IL_1E8";
						continue __step0__;
					case 12: 
						dataContract.value = new $asm09.System.Runtime.Serialization.UnsignedLongDataContract();
						__label0__ = "IL_1E8";
						continue __step0__;
					case 13: 
						dataContract.value = new $asm09.System.Runtime.Serialization.FloatDataContract();
						__label0__ = "IL_1E8";
						continue __step0__;
					case 14: 
						dataContract.value = new $asm09.System.Runtime.Serialization.DoubleDataContract();
						__label0__ = "IL_1E8";
						continue __step0__;
					case 15: 
						dataContract.value = new $asm09.System.Runtime.Serialization.DecimalDataContract();
						__label0__ = "IL_1E8";
						continue __step0__;
					case 16: 
						dataContract.value = new $asm09.System.Runtime.Serialization.DateTimeDataContract();
						__label0__ = "IL_1E8";
						continue __step0__;
					case 18: 
						dataContract.value = JSIL.New($asm09.System.Runtime.Serialization.StringDataContract, "_ctor$0", []);
						__label0__ = "IL_1E8";
						continue __step0__;
				}
				if (type === System.Array.Of(System.Byte)) {
					dataContract.value = new $asm09.System.Runtime.Serialization.ByteArrayDataContract();
				} else if (type === System.Object) {
					dataContract.value = new $asm09.System.Runtime.Serialization.ObjectDataContract();
				} else if (type === System.Uri) {
					dataContract.value = new $asm09.System.Runtime.Serialization.UriDataContract();
				} else if (type === System.Xml.XmlQualifiedName) {
					dataContract.value = new $asm09.System.Runtime.Serialization.QNameDataContract();
				} else if (type === System.TimeSpan) {
					dataContract.value = JSIL.New($asm09.System.Runtime.Serialization.TimeSpanDataContract, "_ctor$0", []);
				} else if (type === System.Guid) {
					dataContract.value = JSIL.New($asm09.System.Runtime.Serialization.GuidDataContract, "_ctor$0", []);
				} else if (!((type !== System.Enum) && (type !== System.ValueType))) {
					dataContract.value = new $asm09.System.Runtime.Serialization.SpecialTypeDataContract(type, $asm09.System.Runtime.Serialization.DictionaryGlobals.ObjectLocalName, $asm09.System.Runtime.Serialization.DictionaryGlobals.SchemaNamespace);
				} else if (type === System.Array) {
					dataContract.value = JSIL.New($asm09.System.Runtime.Serialization.CollectionDataContract, "_ctor$0", [type]);
				}
				__label0__ = "IL_1E8";
				continue __step0__;
				break;
			case "IL_1E8":
				return (dataContract.value !== null);
				break __step0__;
		}
	}
};
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.TryCreateBuiltInDataContract$1 = function (name, ns, /* ref */ dataContract) {
	dataContract.value = null;
	if (ns == $asm09.System.Runtime.Serialization.DictionaryGlobals.SchemaNamespace.Value) {
		if ($asm09.System.Runtime.Serialization.DictionaryGlobals.BooleanLocalName.Value == name) {
			dataContract.value = new $asm09.System.Runtime.Serialization.BooleanDataContract();
		} else if ($asm09.System.Runtime.Serialization.DictionaryGlobals.SignedByteLocalName.Value == name) {
			dataContract.value = new $asm09.System.Runtime.Serialization.SignedByteDataContract();
		} else if ($asm09.System.Runtime.Serialization.DictionaryGlobals.UnsignedByteLocalName.Value == name) {
			dataContract.value = new $asm09.System.Runtime.Serialization.UnsignedByteDataContract();
		} else if ($asm09.System.Runtime.Serialization.DictionaryGlobals.ShortLocalName.Value == name) {
			dataContract.value = new $asm09.System.Runtime.Serialization.ShortDataContract();
		} else if ($asm09.System.Runtime.Serialization.DictionaryGlobals.UnsignedShortLocalName.Value == name) {
			dataContract.value = new $asm09.System.Runtime.Serialization.UnsignedShortDataContract();
		} else if ($asm09.System.Runtime.Serialization.DictionaryGlobals.IntLocalName.Value == name) {
			dataContract.value = new $asm09.System.Runtime.Serialization.IntDataContract();
		} else if ($asm09.System.Runtime.Serialization.DictionaryGlobals.UnsignedIntLocalName.Value == name) {
			dataContract.value = new $asm09.System.Runtime.Serialization.UnsignedIntDataContract();
		} else if ($asm09.System.Runtime.Serialization.DictionaryGlobals.LongLocalName.Value == name) {
			dataContract.value = JSIL.New($asm09.System.Runtime.Serialization.LongDataContract, "_ctor$0", []);
		} else if ($asm09.System.Runtime.Serialization.DictionaryGlobals.UnsignedLongLocalName.Value == name) {
			dataContract.value = new $asm09.System.Runtime.Serialization.UnsignedLongDataContract();
		} else if ($asm09.System.Runtime.Serialization.DictionaryGlobals.FloatLocalName.Value == name) {
			dataContract.value = new $asm09.System.Runtime.Serialization.FloatDataContract();
		} else if ($asm09.System.Runtime.Serialization.DictionaryGlobals.DoubleLocalName.Value == name) {
			dataContract.value = new $asm09.System.Runtime.Serialization.DoubleDataContract();
		} else if ($asm09.System.Runtime.Serialization.DictionaryGlobals.DecimalLocalName.Value == name) {
			dataContract.value = new $asm09.System.Runtime.Serialization.DecimalDataContract();
		} else if ($asm09.System.Runtime.Serialization.DictionaryGlobals.DateTimeLocalName.Value == name) {
			dataContract.value = new $asm09.System.Runtime.Serialization.DateTimeDataContract();
		} else if ($asm09.System.Runtime.Serialization.DictionaryGlobals.StringLocalName.Value == name) {
			dataContract.value = JSIL.New($asm09.System.Runtime.Serialization.StringDataContract, "_ctor$0", []);
		} else if ($asm09.System.Runtime.Serialization.DictionaryGlobals.hexBinaryLocalName.Value == name) {
			dataContract.value = new $asm09.System.Runtime.Serialization.HexBinaryDataContract();
		} else if ($asm09.System.Runtime.Serialization.DictionaryGlobals.ByteArrayLocalName.Value == name) {
			dataContract.value = new $asm09.System.Runtime.Serialization.ByteArrayDataContract();
		} else if ($asm09.System.Runtime.Serialization.DictionaryGlobals.ObjectLocalName.Value == name) {
			dataContract.value = new $asm09.System.Runtime.Serialization.ObjectDataContract();
		} else if ($asm09.System.Runtime.Serialization.DictionaryGlobals.UriLocalName.Value == name) {
			dataContract.value = new $asm09.System.Runtime.Serialization.UriDataContract();
		} else if ($asm09.System.Runtime.Serialization.DictionaryGlobals.QNameLocalName.Value == name) {
			dataContract.value = new $asm09.System.Runtime.Serialization.QNameDataContract();
		}
	} else if (ns == $asm09.System.Runtime.Serialization.DictionaryGlobals.SerializationNamespace.Value) {
		if ($asm09.System.Runtime.Serialization.DictionaryGlobals.TimeSpanLocalName.Value == name) {
			dataContract.value = JSIL.New($asm09.System.Runtime.Serialization.TimeSpanDataContract, "_ctor$0", []);
		} else if ($asm09.System.Runtime.Serialization.DictionaryGlobals.GuidLocalName.Value == name) {
			dataContract.value = JSIL.New($asm09.System.Runtime.Serialization.GuidDataContract, "_ctor$0", []);
		} else if ($asm09.System.Runtime.Serialization.DictionaryGlobals.CharLocalName.Value == name) {
			dataContract.value = JSIL.New($asm09.System.Runtime.Serialization.CharDataContract, "_ctor$0", []);
		} else if ("ArrayOfanyType" == name) {
			dataContract.value = JSIL.New($asm09.System.Runtime.Serialization.CollectionDataContract, "_ctor$0", [System.Array]);
		}
	}
	return (dataContract.value !== null);
};
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.GetNamespace = function (key) {
	var obj = null, text = new JSIL.Variable(null);
	System.Threading.Monitor.Enter((obj = $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.namespacesLock));
	try {
		if ($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.namespaces === null) {
			$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.namespaces = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.String, System.String), "_ctor$0", []);
		}
		if ($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.namespaces.TryGetValue(key, /* ref */ text)) {
			var result = text.value;
		} else {
			try {
				$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.namespaces.Add(key, key);
			} catch ($exception) {
				var exception = $exception;
				if ($asm09.System.Runtime.Serialization.DiagnosticUtility.IsFatal(exception)) {
					throw $exception;
				}
				throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperFatal(exception.Message, exception);
			}
			result = key;
		}
	} finally {
		System.Threading.Monitor.Exit(obj);
	}
	return result;
};
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.GetClrTypeString = function (key) {
	var obj = null;
	System.Threading.Monitor.Enter((obj = $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.clrTypeStringsLock));
	try {
		if ($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.clrTypeStrings === null) {
			$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.clrTypeStringsDictionary = JSIL.New(System.Xml.XmlDictionary, "_ctor$0", []);
			$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.clrTypeStrings = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.String, System.Xml.XmlDictionaryString), "_ctor$0", []);
			try {
				$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.clrTypeStrings.Add(System.Runtime.Serialization.Globals.TypeOfInt.Assembly.FullName, $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.clrTypeStringsDictionary.Add("0"));
			} catch ($exception) {
				var exception = $exception;
				if ($asm09.System.Runtime.Serialization.DiagnosticUtility.IsFatal(exception)) {
					throw $exception;
				}
				throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperFatal(exception.Message, exception);
			}
		}
		if ($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.clrTypeStrings.TryGetValue(key, /* ref */ xmlDictionaryString)) {
			var result = xmlDictionaryString.value;
		} else {
			var xmlDictionaryString = new JSIL.Variable($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.clrTypeStringsDictionary.Add(key));
			try {
				$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.clrTypeStrings.Add(key, xmlDictionaryString.value);
			} catch ($exception) {
				var exception2 = $exception;
				if ($asm09.System.Runtime.Serialization.DiagnosticUtility.IsFatal(exception2)) {
					throw $exception;
				}
				throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperFatal(exception2.Message, exception2);
			}
			result = xmlDictionaryString.value;
		}
	} finally {
		System.Threading.Monitor.Exit(obj);
	}
	return result;
};
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.ThrowInvalidDataContractException = function (message, type) {
	var obj = null;
	if (type !== null) {
		System.Threading.Monitor.Enter((obj = $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.cacheLock));
		try {
			($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.typeHandleRef.Value = $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.GetDataContractAdapterTypeHandle(type.TypeHandle.MemberwiseClone()).MemberwiseClone());
			try {
				$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.typeToIDCache.Remove($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.typeHandleRef);
			} catch ($exception) {
				var exception = $exception;
				if ($asm09.System.Runtime.Serialization.DiagnosticUtility.IsFatal(exception)) {
					throw $exception;
				}
				throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperFatal(exception.Message, exception);
			}
		} finally {
			System.Threading.Monitor.Exit(obj);
		}
	}
	throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Runtime.Serialization.InvalidDataContractException, "_ctor$1", [message]));
};
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype._ctor$0 = function () {
	System.Object.prototype._ctor.call(this);
};
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype._ctor$1 = function (type) {
	System.Object.prototype._ctor.call(this);
	this.underlyingType = type;
	this.SetTypeForInitialization(type);
	this.isValueType = type.IsValueType;
};
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_UnderlyingType = function () {
	return this.underlyingType;
};
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_IsBuiltInDataContract = function () {
	return false;
};
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_TypeForInitialization = function () {
	return this.typeForInitialization;
};
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.SetTypeForInitialization = function (classType) {
	if (classType.IsDefined(System.Runtime.Serialization.Globals.TypeOfDataContractAttribute, false)) {
		this.typeForInitialization = classType;
	}
};
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_IsReference = function () {
	return this.isReference;
};
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.set_IsReference = function (value) {
	this.isReference = value;
};
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_IsValueType = function () {
	return this.isValueType;
};
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.set_IsValueType = function (value) {
	this.isValueType = value;
};
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_StableName = function () {
	return this.stableName;
};
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.set_StableName = function (value) {
	this.stableName = value;
};
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_KnownDataContracts = function () {
	return null;
};
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.set_KnownDataContracts = function (value) {
};
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_Name = function () {
	return this.name;
};
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.set_Name = function (value) {
	this.name = value;
};
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_Namespace = function () {
	return this.ns;
};
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.set_Namespace = function (value) {
	this.ns = value;
};
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_HasRoot = function () {
	return true;
};
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.set_HasRoot = function (value) {
};
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_TopLevelElementName = function () {
	return this.name;
};
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.set_TopLevelElementName = function (value) {
	this.name = value;
};
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_TopLevelElementNamespace = function () {
	return this.ns;
};
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.set_TopLevelElementNamespace = function (value) {
	this.ns = value;
};
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_CanContainReferences = function () {
	return true;
};
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_IsPrimitive = function () {
	return false;
};
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.WriteRootElement = function (writer, name, ns) {
	if (!(!System.Object.ReferenceEquals(ns, $asm09.System.Runtime.Serialization.DictionaryGlobals.SerializationNamespace) || this.IsPrimitive)) {
		writer.WriteStartElement$3("z", name, ns);
		return;
	}
	writer.WriteStartElement$2(name, ns);
};
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.SetDataContractName = function (name, ns) {
	this.Name = name;
	this.Namespace = ns;
	this.StableName = $asm09.System.Runtime.Serialization.DataContract.CreateQualifiedName(name.Value, ns.Value);
};
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.ThrowInvalidDataContractException = function (message) {
	$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.ThrowInvalidDataContractException(message, this.UnderlyingType);
};
JSIL.OverloadedMethod(System.Runtime.Serialization.DataContract.DataContractCriticalHelper, "GetBuiltInDataContract", [
		["GetBuiltInDataContract$0", [System.Type]], 
		["GetBuiltInDataContract$1", [System.String, System.String]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.DataContract.DataContractCriticalHelper, "TryCreateBuiltInDataContract", [
		["TryCreateBuiltInDataContract$0", [System.Type, JSIL.Reference.Of(System.Runtime.Serialization.DataContract)]], 
		["TryCreateBuiltInDataContract$1", [System.String, System.String, JSIL.Reference.Of(System.Runtime.Serialization.DataContract)]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Type]]
	]);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype, "UnderlyingType", 
	$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_UnderlyingType, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype, "IsBuiltInDataContract", 
	$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_IsBuiltInDataContract, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype, "TypeForInitialization", 
	$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_TypeForInitialization, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype, "IsReference", 
	$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_IsReference, $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.set_IsReference);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype, "IsValueType", 
	$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_IsValueType, $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.set_IsValueType);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype, "StableName", 
	$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_StableName, $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.set_StableName);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype, "KnownDataContracts", 
	$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_KnownDataContracts, $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.set_KnownDataContracts);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype, "Name", 
	$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_Name, $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.set_Name);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype, "Namespace", 
	$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_Namespace, $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.set_Namespace);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype, "HasRoot", 
	$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_HasRoot, $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.set_HasRoot);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype, "TopLevelElementName", 
	$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_TopLevelElementName, $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.set_TopLevelElementName);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype, "TopLevelElementNamespace", 
	$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_TopLevelElementNamespace, $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.set_TopLevelElementNamespace);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype, "CanContainReferences", 
	$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_CanContainReferences, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype, "IsPrimitive", 
	$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_IsPrimitive, null);
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.typeToIDCache = null;
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.dataContractCache = null;
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.dataContractID = 0;
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.typeToBuiltInContract = null;
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.nameToBuiltInContract = null;
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.namespaces = null;
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.clrTypeStrings = null;
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.clrTypeStringsDictionary = null;
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.typeHandleRef = null;
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.cacheLock = null;
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.createDataContractLock = null;
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.initBuiltInContractsLock = null;
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.namespacesLock = null;
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.clrTypeStringsLock = null;
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.underlyingType = null;
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.isReference = false;
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.isValueType = false;
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.stableName = null;
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.name = null;
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.ns = null;
$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.typeForInitialization = null;
System.Runtime.Serialization.DataContract.DataContractCriticalHelper._cctor = function () {
	System.Runtime.Serialization.DataContract.DataContractCriticalHelper.typeHandleRef = JSIL.New(System.Runtime.Serialization.TypeHandleRef, "_ctor$0", []);
	System.Runtime.Serialization.DataContract.DataContractCriticalHelper.cacheLock = new System.Object();
	System.Runtime.Serialization.DataContract.DataContractCriticalHelper.createDataContractLock = new System.Object();
	System.Runtime.Serialization.DataContract.DataContractCriticalHelper.initBuiltInContractsLock = new System.Object();
	System.Runtime.Serialization.DataContract.DataContractCriticalHelper.namespacesLock = new System.Object();
	System.Runtime.Serialization.DataContract.DataContractCriticalHelper.clrTypeStringsLock = new System.Object();
	System.Runtime.Serialization.DataContract.DataContractCriticalHelper.typeToIDCache = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.Runtime.Serialization.TypeHandleRef, System.Runtime.Serialization.IntRef), "_ctor$2", [new System.Runtime.Serialization.TypeHandleRefEqualityComparer()]);
	System.Runtime.Serialization.DataContract.DataContractCriticalHelper.dataContractCache = JSIL.Array.New(System.Runtime.Serialization.DataContract, 32);
	System.Runtime.Serialization.DataContract.DataContractCriticalHelper.dataContractID = 0;
};

$asm09.System.Runtime.Serialization.ClassDataContract.prototype._ctor$0 = function (type) {
	$asm09.System.Runtime.Serialization.DataContract.prototype._ctor.call(this, JSIL.New($asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper, "_ctor$1", [type]));
	this.InitClassDataContract();
};
$asm09.System.Runtime.Serialization.ClassDataContract.prototype._ctor$1 = function (type, ns, memberNames) {
	$asm09.System.Runtime.Serialization.DataContract.prototype._ctor.call(this, JSIL.New($asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper, "_ctor$2", [type, ns, memberNames]));
	this.InitClassDataContract();
};
$asm09.System.Runtime.Serialization.ClassDataContract.prototype.InitClassDataContract = function () {
	this.helper = JSIL.TryCast($asm09.System.Runtime.Serialization.DataContract.prototype.get_Helper.call(this), $asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper);
	this.ContractNamespaces = this.helper.ContractNamespaces;
	this.MemberNames = this.helper.MemberNames;
	this.MemberNamespaces = this.helper.MemberNamespaces;
	this.isScriptObject = this.helper.IsScriptObject;
};
$asm09.System.Runtime.Serialization.ClassDataContract.prototype.get_BaseContract = function () {
	return this.helper.BaseContract;
};
$asm09.System.Runtime.Serialization.ClassDataContract.prototype.get_Members = function () {
	return this.helper.Members;
};
$asm09.System.Runtime.Serialization.ClassDataContract.prototype.get_ChildElementNamespaces = function () {
	if (this.childElementNamespaces === null) {
		System.Threading.Monitor.Enter(this);
		try {
			if (this.childElementNamespaces === null) {
				if (this.helper.ChildElementNamespaces === null) {
					var array = this.CreateChildElementNamespaces();
					System.Threading.Thread.MemoryBarrier();
					this.helper.ChildElementNamespaces = array;
				}
				this.childElementNamespaces = this.helper.ChildElementNamespaces;
			}
		} finally {
			System.Threading.Monitor.Exit(this);
		}
	}
	return this.childElementNamespaces;
};
$asm09.System.Runtime.Serialization.ClassDataContract.prototype.get_OnSerializing = function () {
	return this.helper.OnSerializing;
};
$asm09.System.Runtime.Serialization.ClassDataContract.prototype.get_OnSerialized = function () {
	return this.helper.OnSerialized;
};
$asm09.System.Runtime.Serialization.ClassDataContract.prototype.get_OnDeserializing = function () {
	return this.helper.OnDeserializing;
};
$asm09.System.Runtime.Serialization.ClassDataContract.prototype.get_OnDeserialized = function () {
	return this.helper.OnDeserialized;
};
$asm09.System.Runtime.Serialization.ClassDataContract.prototype.get_KnownDataContracts = function () {
	return this.helper.KnownDataContracts;
};
$asm09.System.Runtime.Serialization.ClassDataContract.prototype.get_IsNonAttributedType = function () {
	return this.helper.IsNonAttributedType;
};
$asm09.System.Runtime.Serialization.ClassDataContract.prototype.get_IsKeyValuePairAdapter = function () {
	return this.helper.IsKeyValuePairAdapter;
};
$asm09.System.Runtime.Serialization.ClassDataContract.prototype.get_KeyValuePairGenericArguments = function () {
	return this.helper.KeyValuePairGenericArguments;
};
$asm09.System.Runtime.Serialization.ClassDataContract.prototype.get_KeyValuePairAdapterConstructorInfo = function () {
	return this.helper.KeyValuePairAdapterConstructorInfo;
};
$asm09.System.Runtime.Serialization.ClassDataContract.prototype.get_GetKeyValuePairMethodInfo = function () {
	return this.helper.GetKeyValuePairMethodInfo;
};
$asm09.System.Runtime.Serialization.ClassDataContract.prototype.GetNonAttributedTypeConstructor = function () {
	return this.helper.GetNonAttributedTypeConstructor();
};
$asm09.System.Runtime.Serialization.ClassDataContract.prototype.get_XmlFormatWriterDelegate = function () {
	if (this.helper.XmlFormatWriterDelegate === null) {
		System.Threading.Monitor.Enter(this);
		try {
			if (this.helper.XmlFormatWriterDelegate === null) {
				var xmlFormatWriterDelegate = new $asm09.System.Runtime.Serialization.XmlFormatWriterGenerator().GenerateClassWriter(this);
				System.Threading.Thread.MemoryBarrier();
				this.helper.XmlFormatWriterDelegate = xmlFormatWriterDelegate;
			}
		} finally {
			System.Threading.Monitor.Exit(this);
		}
	}
	return this.helper.XmlFormatWriterDelegate;
};
$asm09.System.Runtime.Serialization.ClassDataContract.prototype.get_XmlFormatReaderDelegate = function () {
	if (this.helper.XmlFormatReaderDelegate === null) {
		System.Threading.Monitor.Enter(this);
		try {
			if (this.helper.XmlFormatReaderDelegate === null) {
				var xmlFormatReaderDelegate = new $asm09.System.Runtime.Serialization.XmlFormatReaderGenerator().GenerateClassReader(this);
				System.Threading.Thread.MemoryBarrier();
				this.helper.XmlFormatReaderDelegate = xmlFormatReaderDelegate;
			}
		} finally {
			System.Threading.Monitor.Exit(this);
		}
	}
	return this.helper.XmlFormatReaderDelegate;
};
$asm09.System.Runtime.Serialization.ClassDataContract.CreateClassDataContractForKeyValue = function (type, ns, memberNames) {
	return JSIL.New($asm09.System.Runtime.Serialization.ClassDataContract, "_ctor$1", [type, ns, memberNames]);
};
$asm09.System.Runtime.Serialization.ClassDataContract.CheckAndAddMember = function (members, memberContract, memberNamesTable) {
	var dataMember = new JSIL.Variable(null);
	if (memberNamesTable.TryGetValue(memberContract.Name, /* ref */ dataMember)) {
		var declaringType = memberContract.MemberInfo.DeclaringType;
		$asm09.System.Runtime.Serialization.DataContract.ThrowInvalidDataContractException($asm09.System.Runtime.Serialization.SR.GetString$0(declaringType.IsEnum ? "DupEnumMemberValue" : "DupMemberName", [dataMember.value.MemberInfo.Name, memberContract.MemberInfo.Name, $asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(declaringType), memberContract.Name]), declaringType);
	}
	memberNamesTable.Add(memberContract.Name, memberContract);
	members.Add(memberContract);
};
$asm09.System.Runtime.Serialization.ClassDataContract.GetChildNamespaceToDeclare = function (dataContract, childType, dictionary) {
	childType = $asm09.System.Runtime.Serialization.DataContract.UnwrapNullableType(childType);
	if (!(childType.IsEnum || 
			System.Runtime.Serialization.Globals.TypeOfIXmlSerializable.IsAssignableFrom(childType) || 
			$asm09.System.Runtime.Serialization.DataContract.GetBuiltInDataContract$0(childType) || (childType === System.Runtime.Serialization.Globals.TypeOfDBNull))) {
		var namespace = $asm09.System.Runtime.Serialization.DataContract.GetStableName$0(childType).Namespace;
		if (!((namespace.length <= 0) || !(namespace != dataContract.Namespace.Value))) {
			return dictionary.Add(namespace);
		}
	}
	return null;
};
$asm09.System.Runtime.Serialization.ClassDataContract.IsNonAttributedTypeValidForSerialization = function (type) {
	if (type.IsArray) {
		return false;
	}
	if (type.IsEnum) {
		return false;
	}
	if (type.IsGenericParameter) {
		return false;
	}
	if (System.Runtime.Serialization.Globals.TypeOfIXmlSerializable.IsAssignableFrom(type)) {
		return false;
	}
	if (type.IsPointer) {
		return false;
	}
	if (type.IsDefined(System.Runtime.Serialization.Globals.TypeOfCollectionDataContractAttribute, false)) {
		return false;
	}
	var interfaces = type.GetInterfaces();
	var array = interfaces;
__loop0__: 
	for (var i = 0; i < array.length; ++i) {
		var type2 = array[i];
		if ($asm09.System.Runtime.Serialization.CollectionDataContract.IsCollectionInterface(type2)) {
			return false;
		}
	}
	if (type.IsDefined(System.Runtime.Serialization.Globals.TypeOfDataContractAttribute, false)) {
		return false;
	}
	if (type.IsValueType) {
		return type.IsVisible;
	}
	return (type.IsVisible && (type.GetConstructor$1((System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public), null, System.Runtime.Serialization.Globals.EmptyTypeArray, null) !== null));
};
$asm09.System.Runtime.Serialization.ClassDataContract.prototype.CreateChildElementNamespaces = function () {
	if (this.Members === null) {
		return null;
	}
	var array = null;
	if (this.BaseContract !== null) {
		array = this.BaseContract.ChildElementNamespaces;
	}
	var num = array ? array.length : 0;
	var array2 = JSIL.Array.New(System.Xml.XmlDictionaryString, (this.Members.Count + num));
	if (num > 0) {
		System.Array.Copy$1(
			array, 
			0, 
			array2, 
			0, 
			array.length
		);
	}
	var dictionary = JSIL.New(System.Xml.XmlDictionary, "_ctor$0", []);
__loop0__: 
	for (var i = 0; i < this.Members.Count; ++i) {
		array2[(i + num)] = $asm09.System.Runtime.Serialization.ClassDataContract.GetChildNamespaceToDeclare(this, this.Members.get_Item(i).MemberType, dictionary);
	}
	return array2;
};
$asm09.System.Runtime.Serialization.ClassDataContract.prototype.EnsureMethodsImported = function () {
	this.helper.EnsureMethodsImported();
};
$asm09.System.Runtime.Serialization.ClassDataContract.prototype.WriteXmlValue = function (xmlWriter, obj, context) {
	if (this.isScriptObject) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Runtime.Serialization.InvalidDataContractException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("UnexpectedContractType", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(JSIL.GetType(this)), $asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName($asm09.System.Runtime.Serialization.DataContract.prototype.get_UnderlyingType.call(this))])]));
	}
	this.XmlFormatWriterDelegate(xmlWriter, obj, context, this);
};
$asm09.System.Runtime.Serialization.ClassDataContract.prototype.ReadXmlValue = function (xmlReader, context) {
	if (this.isScriptObject) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Runtime.Serialization.InvalidDataContractException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("UnexpectedContractType", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(JSIL.GetType(this)), $asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName($asm09.System.Runtime.Serialization.DataContract.prototype.get_UnderlyingType.call(this))])]));
	}
	xmlReader.Read();
	var result = this.XmlFormatReaderDelegate(xmlReader, context, this.MemberNames, this.MemberNamespaces);
	xmlReader.ReadEndElement();
	return result;
};
$asm09.System.Runtime.Serialization.ClassDataContract.prototype.RequiresMemberAccessForRead = function (securityException, serializationAssemblyPatterns) {
	this.EnsureMethodsImported();
	if (!$asm09.System.Runtime.Serialization.DataContract.IsTypeVisible($asm09.System.Runtime.Serialization.DataContract.prototype.get_UnderlyingType.call(this), serializationAssemblyPatterns)) {
		if (securityException !== null) {
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Security.SecurityException, "_ctor$2", [$asm09.System.Runtime.Serialization.SR.GetString$0("PartialTrustDataContractTypeNotPublic", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName($asm09.System.Runtime.Serialization.DataContract.prototype.get_UnderlyingType.call(this))]), securityException]));
		}
		return true;
	} else {
		if (!((this.BaseContract === null) || !this.BaseContract.RequiresMemberAccessForRead(securityException, serializationAssemblyPatterns))) {
			return true;
		}
		if ($asm09.System.Runtime.Serialization.DataContract.ConstructorRequiresMemberAccess(this.GetNonAttributedTypeConstructor(), serializationAssemblyPatterns)) {
			if ($asm09.System.Runtime.Serialization.Globals.TypeOfScriptObject_IsAssignableFrom($asm09.System.Runtime.Serialization.DataContract.prototype.get_UnderlyingType.call(this))) {
				return true;
			}
			if (securityException !== null) {
				throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Security.SecurityException, "_ctor$2", [$asm09.System.Runtime.Serialization.SR.GetString$0("PartialTrustNonAttributedSerializableTypeNoPublicConstructor", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName($asm09.System.Runtime.Serialization.DataContract.prototype.get_UnderlyingType.call(this))]), securityException]));
			}
			return true;
		} else if ($asm09.System.Runtime.Serialization.DataContract.MethodRequiresMemberAccess(this.OnDeserializing, serializationAssemblyPatterns)) {
			if (securityException !== null) {
				throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Security.SecurityException, "_ctor$2", [$asm09.System.Runtime.Serialization.SR.GetString$0("PartialTrustDataContractOnDeserializingNotPublic", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName($asm09.System.Runtime.Serialization.DataContract.prototype.get_UnderlyingType.call(this)), this.OnDeserializing.Name]), securityException]));
			}
			return true;
		} else {
			if (!$asm09.System.Runtime.Serialization.DataContract.MethodRequiresMemberAccess(this.OnDeserialized, serializationAssemblyPatterns)) {
				if (this.Members !== null) {
				__loop0__: 
					for (var i = 0; i < this.Members.Count; ) {
						if (this.Members.get_Item(i).RequiresMemberAccessForSet(serializationAssemblyPatterns)) {
							if (securityException === null) {
								return true;
							}
							if (JSIL.TryCast(this.Members.get_Item(i).MemberInfo, System.Reflection.FieldInfo) !== null) {
								throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Security.SecurityException, "_ctor$2", [$asm09.System.Runtime.Serialization.SR.GetString$0("PartialTrustDataContractFieldSetNotPublic", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName($asm09.System.Runtime.Serialization.DataContract.prototype.get_UnderlyingType.call(this)), this.Members.get_Item(i).MemberInfo.Name]), securityException]));
							}
							throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Security.SecurityException, "_ctor$2", [$asm09.System.Runtime.Serialization.SR.GetString$0("PartialTrustDataContractPropertySetNotPublic", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName($asm09.System.Runtime.Serialization.DataContract.prototype.get_UnderlyingType.call(this)), this.Members.get_Item(i).MemberInfo.Name]), securityException]));
						} else {
							++i;
						}
					}
				}
				return false;
			}
			if (securityException !== null) {
				throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Security.SecurityException, "_ctor$2", [$asm09.System.Runtime.Serialization.SR.GetString$0("PartialTrustDataContractOnDeserializedNotPublic", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName($asm09.System.Runtime.Serialization.DataContract.prototype.get_UnderlyingType.call(this)), this.OnDeserialized.Name]), securityException]));
			}
			return true;
		}
	}
};
$asm09.System.Runtime.Serialization.ClassDataContract.prototype.RequiresMemberAccessForWrite = function (securityException, serializationAssemblyPatterns) {
	this.EnsureMethodsImported();
	if (!$asm09.System.Runtime.Serialization.DataContract.IsTypeVisible($asm09.System.Runtime.Serialization.DataContract.prototype.get_UnderlyingType.call(this), serializationAssemblyPatterns)) {
		if (securityException !== null) {
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Security.SecurityException, "_ctor$2", [$asm09.System.Runtime.Serialization.SR.GetString$0("PartialTrustDataContractTypeNotPublic", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName($asm09.System.Runtime.Serialization.DataContract.prototype.get_UnderlyingType.call(this))]), securityException]));
		}
		return true;
	} else {
		if (!((this.BaseContract === null) || !this.BaseContract.RequiresMemberAccessForWrite(securityException, serializationAssemblyPatterns))) {
			return true;
		}
		if ($asm09.System.Runtime.Serialization.DataContract.MethodRequiresMemberAccess(this.OnSerializing, serializationAssemblyPatterns)) {
			if (securityException !== null) {
				throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Security.SecurityException, "_ctor$2", [$asm09.System.Runtime.Serialization.SR.GetString$0("PartialTrustDataContractOnSerializingNotPublic", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName($asm09.System.Runtime.Serialization.DataContract.prototype.get_UnderlyingType.call(this)), this.OnSerializing.Name]), securityException]));
			}
			return true;
		} else {
			if (!$asm09.System.Runtime.Serialization.DataContract.MethodRequiresMemberAccess(this.OnSerialized, serializationAssemblyPatterns)) {
				if (this.Members !== null) {
				__loop0__: 
					for (var i = 0; i < this.Members.Count; ) {
						if (this.Members.get_Item(i).RequiresMemberAccessForGet(serializationAssemblyPatterns)) {
							if (securityException === null) {
								return true;
							}
							if (JSIL.TryCast(this.Members.get_Item(i).MemberInfo, System.Reflection.FieldInfo) !== null) {
								throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Security.SecurityException, "_ctor$2", [$asm09.System.Runtime.Serialization.SR.GetString$0("PartialTrustDataContractFieldGetNotPublic", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName($asm09.System.Runtime.Serialization.DataContract.prototype.get_UnderlyingType.call(this)), this.Members.get_Item(i).MemberInfo.Name]), securityException]));
							}
							throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Security.SecurityException, "_ctor$2", [$asm09.System.Runtime.Serialization.SR.GetString$0("PartialTrustDataContractPropertyGetNotPublic", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName($asm09.System.Runtime.Serialization.DataContract.prototype.get_UnderlyingType.call(this)), this.Members.get_Item(i).MemberInfo.Name]), securityException]));
						} else {
							++i;
						}
					}
				}
				return false;
			}
			if (securityException !== null) {
				throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Security.SecurityException, "_ctor$2", [$asm09.System.Runtime.Serialization.SR.GetString$0("PartialTrustDataContractOnSerializedNotPublic", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName($asm09.System.Runtime.Serialization.DataContract.prototype.get_UnderlyingType.call(this)), this.OnSerialized.Name]), securityException]));
			}
			return true;
		}
	}
};
JSIL.OverloadedMethod(System.Runtime.Serialization.ClassDataContract.prototype, "_ctor", [
		["_ctor$0", [System.Type]], 
		["_ctor$1", [System.Type, System.Xml.XmlDictionaryString, System.Array.Of(System.String)]]
	]);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.ClassDataContract.prototype, "BaseContract", 
	$asm09.System.Runtime.Serialization.ClassDataContract.prototype.get_BaseContract, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.ClassDataContract.prototype, "Members", 
	$asm09.System.Runtime.Serialization.ClassDataContract.prototype.get_Members, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.ClassDataContract.prototype, "ChildElementNamespaces", 
	$asm09.System.Runtime.Serialization.ClassDataContract.prototype.get_ChildElementNamespaces, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.ClassDataContract.prototype, "OnSerializing", 
	$asm09.System.Runtime.Serialization.ClassDataContract.prototype.get_OnSerializing, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.ClassDataContract.prototype, "OnSerialized", 
	$asm09.System.Runtime.Serialization.ClassDataContract.prototype.get_OnSerialized, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.ClassDataContract.prototype, "OnDeserializing", 
	$asm09.System.Runtime.Serialization.ClassDataContract.prototype.get_OnDeserializing, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.ClassDataContract.prototype, "OnDeserialized", 
	$asm09.System.Runtime.Serialization.ClassDataContract.prototype.get_OnDeserialized, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.ClassDataContract.prototype, "KnownDataContracts", 
	$asm09.System.Runtime.Serialization.ClassDataContract.prototype.get_KnownDataContracts, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.ClassDataContract.prototype, "IsNonAttributedType", 
	$asm09.System.Runtime.Serialization.ClassDataContract.prototype.get_IsNonAttributedType, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.ClassDataContract.prototype, "IsKeyValuePairAdapter", 
	$asm09.System.Runtime.Serialization.ClassDataContract.prototype.get_IsKeyValuePairAdapter, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.ClassDataContract.prototype, "KeyValuePairGenericArguments", 
	$asm09.System.Runtime.Serialization.ClassDataContract.prototype.get_KeyValuePairGenericArguments, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.ClassDataContract.prototype, "KeyValuePairAdapterConstructorInfo", 
	$asm09.System.Runtime.Serialization.ClassDataContract.prototype.get_KeyValuePairAdapterConstructorInfo, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.ClassDataContract.prototype, "GetKeyValuePairMethodInfo", 
	$asm09.System.Runtime.Serialization.ClassDataContract.prototype.get_GetKeyValuePairMethodInfo, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.ClassDataContract.prototype, "XmlFormatWriterDelegate", 
	$asm09.System.Runtime.Serialization.ClassDataContract.prototype.get_XmlFormatWriterDelegate, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.ClassDataContract.prototype, "XmlFormatReaderDelegate", 
	$asm09.System.Runtime.Serialization.ClassDataContract.prototype.get_XmlFormatReaderDelegate, null);
$asm09.System.Runtime.Serialization.ClassDataContract.prototype.ContractNamespaces = null;
$asm09.System.Runtime.Serialization.ClassDataContract.prototype.MemberNames = null;
$asm09.System.Runtime.Serialization.ClassDataContract.prototype.MemberNamespaces = null;
$asm09.System.Runtime.Serialization.ClassDataContract.prototype.childElementNamespaces = null;
$asm09.System.Runtime.Serialization.ClassDataContract.prototype.helper = null;
$asm09.System.Runtime.Serialization.ClassDataContract.prototype.isScriptObject = false;

$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype._ctor$0 = function () {
	$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype._ctor$0.call(this);
};
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype._ctor$1 = function (type) {
	$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype._ctor$1.call(this, type);
	var stableNameAndSetHasDataContract = this.GetStableNameAndSetHasDataContract(type);
	if (type === System.Runtime.Serialization.Globals.TypeOfDBNull) {
		$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.set_StableName.call(this, stableNameAndSetHasDataContract);
		this.members = new (System.Collections.Generic.List$b1.Of($asm09.System.Runtime.Serialization.DataMember)) ();
		var xmlDictionary = JSIL.New(System.Xml.XmlDictionary, "_ctor$1", [2]);
		$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.set_Name.call(this, xmlDictionary.Add($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_StableName.call(this).Name));
		$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.set_Namespace.call(this, xmlDictionary.Add($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_StableName.call(this).Namespace));
		this.ContractNamespaces = (this.MemberNames = (this.MemberNamespaces = JSIL.Array.New(System.Xml.XmlDictionaryString, 0)));
		this.EnsureMethodsImported();
		return;
	}
	var baseType = type.BaseType;
	this.SetIsNonAttributedType(type);
	this.SetKeyValuePairAdapterFlags(type);
	$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.set_IsValueType.call(this, type.IsValueType);
	if (!((baseType === null) || 
			(baseType === System.Runtime.Serialization.Globals.TypeOfObject) || 
			(baseType === System.Runtime.Serialization.Globals.TypeOfValueType) || (baseType === System.Runtime.Serialization.Globals.TypeOfUri))) {
		var dataContract = $asm09.System.Runtime.Serialization.DataContract.GetDataContract$0(baseType);
		if (JSIL.TryCast(dataContract, $asm09.System.Runtime.Serialization.CollectionDataContract) !== null) {
			this.BaseContract = JSIL.TryCast(JSIL.Cast(dataContract, $asm09.System.Runtime.Serialization.CollectionDataContract).SharedTypeContract, $asm09.System.Runtime.Serialization.ClassDataContract);
		} else {
			this.BaseContract = JSIL.TryCast(dataContract, $asm09.System.Runtime.Serialization.ClassDataContract);
		}
		if (!((this.BaseContract === null) || 
				!this.BaseContract.IsNonAttributedType || this.isNonAttributedType)) {
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Runtime.Serialization.InvalidDataContractException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("AttributedTypesCannotInheritFromNonAttributedSerializableTypes", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(type), $asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(baseType)])]));
		}
	} else {
		this.BaseContract = null;
	}
	$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.set_StableName.call(this, stableNameAndSetHasDataContract);
	this.ImportDataMembers();
	var xmlDictionary2 = JSIL.New(System.Xml.XmlDictionary, "_ctor$1", [(2 + this.Members.Count)]);
	$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.set_Name.call(this, xmlDictionary2.Add($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_StableName.call(this).Name));
	$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.set_Namespace.call(this, xmlDictionary2.Add($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_StableName.call(this).Namespace));
	var num = 0;
	var num2 = 0;
	if (this.BaseContract === null) {
		this.MemberNames = JSIL.Array.New(System.Xml.XmlDictionaryString, this.Members.Count);
		this.MemberNamespaces = JSIL.Array.New(System.Xml.XmlDictionaryString, this.Members.Count);
		this.ContractNamespaces = JSIL.Array.New(System.Xml.XmlDictionaryString, 1);
	} else {
		num = this.BaseContract.MemberNames.length;
		this.MemberNames = JSIL.Array.New(System.Xml.XmlDictionaryString, (this.Members.Count + num));
		System.Array.Copy$0(this.BaseContract.MemberNames, this.MemberNames, num);
		this.MemberNamespaces = JSIL.Array.New(System.Xml.XmlDictionaryString, (this.Members.Count + num));
		System.Array.Copy$0(this.BaseContract.MemberNamespaces, this.MemberNamespaces, num);
		num2 = this.BaseContract.ContractNamespaces.length;
		this.ContractNamespaces = JSIL.Array.New(System.Xml.XmlDictionaryString, (1 + num2));
		System.Array.Copy$0(this.BaseContract.ContractNamespaces, this.ContractNamespaces, num2);
	}
	this.ContractNamespaces[num2] = $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_Namespace.call(this);
__loop0__: 
	for (var i = 0; i < this.Members.Count; ++i) {
		this.MemberNames[(i + num)] = xmlDictionary2.Add(this.Members.get_Item(i).Name);
		this.MemberNamespaces[(i + num)] = $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_Namespace.call(this);
	}
	this.EnsureMethodsImported();
	this.isScriptObject = (this.IsNonAttributedType && 
		$asm09.System.Runtime.Serialization.Globals.TypeOfScriptObject_IsAssignableFrom($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_UnderlyingType.call(this)));
};
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype._ctor$2 = function (type, ns, memberNames) {
	$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype._ctor$1.call(this, type);
	$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.set_StableName.call(this, JSIL.New(System.Xml.XmlQualifiedName, "_ctor$2", [this.GetStableNameAndSetHasDataContract(type).Name, ns.Value]));
	this.ImportDataMembers();
	var xmlDictionary = JSIL.New(System.Xml.XmlDictionary, "_ctor$1", [(1 + this.Members.Count)]);
	$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.set_Name.call(this, xmlDictionary.Add($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_StableName.call(this).Name));
	$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.set_Namespace.call(this, ns);
	this.ContractNamespaces = JSIL.Array.New(System.Xml.XmlDictionaryString, [$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_Namespace.call(this)]);
	this.MemberNames = JSIL.Array.New(System.Xml.XmlDictionaryString, this.Members.Count);
	this.MemberNamespaces = JSIL.Array.New(System.Xml.XmlDictionaryString, this.Members.Count);
__loop0__: 
	for (var i = 0; i < this.Members.Count; ++i) {
		this.Members.get_Item(i).Name = memberNames[i];
		this.MemberNames[i] = xmlDictionary.Add(this.Members.get_Item(i).Name);
		this.MemberNamespaces[i] = $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_Namespace.call(this);
	}
	this.EnsureMethodsImported();
};
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.EnsureIsReferenceImported = function (type) {
	var dataContractAttribute = new JSIL.Variable(null);
	var flag = false;
	var flag2 = $asm09.System.Runtime.Serialization.DataContract.TryGetDCAttribute(type, /* ref */ dataContractAttribute);
	if (this.BaseContract !== null) {
		if (!(!flag2 || !dataContractAttribute.value.IsReferenceSetExplicit)) {
			var isReference = this.BaseContract.IsReference;
			if (!(!(isReference && 
						!dataContractAttribute.value.IsReference) && (isReference || 
						!dataContractAttribute.value.IsReference))) {
				$asm09.System.Runtime.Serialization.DataContract.ThrowInvalidDataContractException($asm09.System.Runtime.Serialization.SR.GetString$0("InconsistentIsReference", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(type), dataContractAttribute.value.IsReference, $asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(this.BaseContract.UnderlyingType), this.BaseContract.IsReference]), type);
			} else {
				flag = dataContractAttribute.value.IsReference;
			}
		} else {
			flag = this.BaseContract.IsReference;
		}
	} else if (!(!flag2 || !dataContractAttribute.value.IsReference)) {
		flag = dataContractAttribute.value.IsReference;
	}
	if (!(!flag || !type.IsValueType)) {
		$asm09.System.Runtime.Serialization.DataContract.ThrowInvalidDataContractException($asm09.System.Runtime.Serialization.SR.GetString$0("ValueTypeCannotHaveIsReference", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(type), true, false]), type);
		return;
	}
	$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.set_IsReference.call(this, flag);
};
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.ImportDataMembers = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				var underlyingType = $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_UnderlyingType.call(this);
				this.EnsureIsReferenceImported(underlyingType);
				var list = new (System.Collections.Generic.List$b1.Of($asm09.System.Runtime.Serialization.DataMember)) ();
				var memberNamesTable = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.String, $asm09.System.Runtime.Serialization.DataMember), "_ctor$0", []);
				if (this.isNonAttributedType) {
					var array = underlyingType.GetMembers$1((System.Reflection.BindingFlags.DeclaredOnly | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public));
				} else {
					array = underlyingType.GetMembers$1((System.Reflection.BindingFlags.DeclaredOnly | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public));
				}
			__loop0__: 
				for (var i = 0; i < array.length; ) {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								var memberInfo = array[i];
								if (this.HasDataContract) {
									var customAttributes = memberInfo.GetCustomAttributes$1(System.Runtime.Serialization.DataMemberAttribute, false);
									if (!((customAttributes === null) || (customAttributes.length <= 0))) {
										if (customAttributes.length > 1) {
											$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.ThrowInvalidDataContractException.call(this, $asm09.System.Runtime.Serialization.SR.GetString$0("TooManyDataMembers", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(memberInfo.DeclaringType), memberInfo.Name]));
										}
										var dataMember = JSIL.New($asm09.System.Runtime.Serialization.DataMember, "_ctor$1", [memberInfo]);
										if (memberInfo.MemberType === System.Reflection.MemberTypes.Property) {
											var propertyInfo = JSIL.Cast(memberInfo, System.Reflection.PropertyInfo);
											var getMethod = propertyInfo.GetGetMethod$0(true);
											if ((getMethod !== null) && $asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.IsMethodOverriding(getMethod)) {
												__label1__ = "IL_433";
												continue __step1__;
											}
											var setMethod = propertyInfo.GetSetMethod$0(true);
											if ((setMethod !== null) && $asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.IsMethodOverriding(setMethod)) {
												__label1__ = "IL_433";
												continue __step1__;
											}
											if (getMethod === null) {
												$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.ThrowInvalidDataContractException.call(this, $asm09.System.Runtime.Serialization.SR.GetString$0("NoGetMethodForProperty", [propertyInfo.DeclaringType, propertyInfo.Name]));
											}
											if (!(setMethod || this.SetIfGetOnlyCollection(dataMember))) {
												$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.ThrowInvalidDataContractException.call(this, $asm09.System.Runtime.Serialization.SR.GetString$0("NoSetMethodForProperty", [propertyInfo.DeclaringType, propertyInfo.Name]));
											}
											if (getMethod.GetParameters().length > 0) {
												$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.ThrowInvalidDataContractException.call(this, $asm09.System.Runtime.Serialization.SR.GetString$0("IndexedPropertyCannotBeSerialized", [propertyInfo.DeclaringType, propertyInfo.Name]));
											}
										} else if (memberInfo.MemberType !== System.Reflection.MemberTypes.Field) {
											$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.ThrowInvalidDataContractException.call(this, $asm09.System.Runtime.Serialization.SR.GetString$0("InvalidMember", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(underlyingType), memberInfo.Name]));
										}
										var dataMemberAttribute = JSIL.Cast(customAttributes[0], System.Runtime.Serialization.DataMemberAttribute);
										if (dataMemberAttribute.IsNameSetExplicit) {
											if (!((dataMemberAttribute.Name !== null) && (dataMemberAttribute.Name.length !== 0))) {
												$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.ThrowInvalidDataContractException.call(this, $asm09.System.Runtime.Serialization.SR.GetString$0("InvalidDataMemberName", [memberInfo.Name, $asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(underlyingType)]));
											}
											dataMember.Name = dataMemberAttribute.Name;
										} else {
											dataMember.Name = memberInfo.Name;
										}
										dataMember.Name = $asm09.System.Runtime.Serialization.DataContract.EncodeLocalName(dataMember.Name);
										dataMember.IsNullable = $asm09.System.Runtime.Serialization.DataContract.IsTypeNullable(dataMember.MemberType);
										dataMember.IsRequired = dataMemberAttribute.IsRequired;
										if (!(!dataMemberAttribute.IsRequired || !$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_IsReference.call(this))) {
											$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.ThrowInvalidDataContractException($asm09.System.Runtime.Serialization.SR.GetString$0("IsRequiredDataMemberOnIsReferenceDataContractType", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(memberInfo.DeclaringType), memberInfo.Name, true]), underlyingType);
										}
										dataMember.EmitDefaultValue = dataMemberAttribute.EmitDefaultValue;
										dataMember.Order = dataMemberAttribute.Order;
										$asm09.System.Runtime.Serialization.ClassDataContract.CheckAndAddMember(list, dataMember, memberNamesTable);
									}
								} else if (this.isNonAttributedType) {
									var fieldInfo = JSIL.TryCast(memberInfo, System.Reflection.FieldInfo);
									var propertyInfo2 = JSIL.TryCast(memberInfo, System.Reflection.PropertyInfo);
									if (!(((fieldInfo === null) && 
												(propertyInfo2 === null)) || ((fieldInfo !== null) && 
												fieldInfo.IsInitOnly))) {
										var customAttributes2 = memberInfo.GetCustomAttributes$1(System.Runtime.Serialization.IgnoreDataMemberAttribute, false);
										if (!((customAttributes2 === null) || (customAttributes2.length <= 0))) {
											if (customAttributes2.length <= 1) {
												__label1__ = "IL_433";
												continue __step1__;
											}
											$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.ThrowInvalidDataContractException.call(this, $asm09.System.Runtime.Serialization.SR.GetString$0("TooManyIgnoreDataMemberAttributes", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(memberInfo.DeclaringType), memberInfo.Name]));
										}
										var dataMember2 = JSIL.New($asm09.System.Runtime.Serialization.DataMember, "_ctor$1", [memberInfo]);
										if (propertyInfo2 !== null) {
											var getMethod2 = propertyInfo2.GetGetMethod$1();
											if ((getMethod2 === null) || 
												$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.IsMethodOverriding(getMethod2) || (getMethod2.GetParameters().length > 0)) {
												__label1__ = "IL_433";
												continue __step1__;
											}
											var setMethod2 = propertyInfo2.GetSetMethod$0(true);
											if (setMethod2 === null) {
												if (!this.SetIfGetOnlyCollection(dataMember2)) {
													__label1__ = "IL_433";
													continue __step1__;
												}
											} else if (!setMethod2.IsPublic || $asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.IsMethodOverriding(setMethod2)) {
												__label1__ = "IL_433";
												continue __step1__;
											}
										}
										dataMember2.Name = $asm09.System.Runtime.Serialization.DataContract.EncodeLocalName(memberInfo.Name);
										dataMember2.IsNullable = $asm09.System.Runtime.Serialization.DataContract.IsTypeNullable(dataMember2.MemberType);
										$asm09.System.Runtime.Serialization.ClassDataContract.CheckAndAddMember(list, dataMember2, memberNamesTable);
									}
								}
								__label1__ = "IL_433";
								continue __step1__;
								break;
							case "IL_433":
								++i;
								break __step1__;
						}
					}
				}
				if (list.Count > 1) {
					list.Sort$1($asm09.System.Runtime.Serialization.ClassDataContract.DataMemberComparer.Singleton);
				}
				this.SetIfMembersHaveConflict(list);
				System.Threading.Thread.MemoryBarrier();
				this.members = list;
				break __step0__;
		}
	}
};
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.SetIfGetOnlyCollection = function (memberContract) {
	if (!(!$asm09.System.Runtime.Serialization.CollectionDataContract.IsCollection$2(memberContract.MemberType, false) || memberContract.MemberType.IsValueType)) {
		memberContract.IsGetOnlyCollection = true;
		return true;
	}
	return false;
};
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.SetIfMembersHaveConflict = function (members) {
	if (this.BaseContract === null) {
		return;
	}
	var num = 0;
	var list = new (System.Collections.Generic.List$b1.Of($asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.Member)) ();
	var enumerator = (members.GetEnumerator());
	try {
	__loop0__: 
		while (enumerator.MoveNext()) {
			var current = enumerator.Current;
			list.Add(new $asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.Member(current, $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_StableName.call(this).Namespace, num));
		}
	} finally {
		enumerator.IDisposable_Dispose();
	}
	var classDataContract = this.BaseContract;
__loop1__: 
	while (classDataContract) {
		++num;
		var enumerator2 = (classDataContract.Members.GetEnumerator());
		try {
		__loop2__: 
			while (enumerator2.MoveNext()) {
				var current2 = enumerator2.Current;
				list.Add(new $asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.Member(current2, classDataContract.StableName.Namespace, num));
			}
		} finally {
			enumerator2.IDisposable_Dispose();
		}
		classDataContract = classDataContract.BaseContract;
	}
	list.Sort$1($asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.DataMemberConflictComparer.Singleton);
__loop3__: 
	for (var i = 0; i < (list.Count - 1); ++i) {
		var num2 = i;
		var num3 = i;
		var flag = false;
	__loop4__: 
		while ((num3 < (list.Count - 1)) && 
			(System.String.CompareOrdinal$0(
					list.get_Item(num3).member.Name, 
					list.get_Item((num3 + 1)).member.Name
				) === 0) && (System.String.CompareOrdinal$0(
					list.get_Item(num3).ns, 
					list.get_Item((num3 + 1)).ns
				) === 0)) {
			list.get_Item(num3).member.ConflictingMember = list.get_Item((num3 + 1)).member;
			if (!flag) {
				flag = (list.get_Item((num3 + 1)).member.HasConflictingNameAndType || 
					(list.get_Item(num3).member.MemberType !== list.get_Item((num3 + 1)).member.MemberType));
			}
			++num3;
		}
		if (flag) {
		__loop5__: 
			for (var j = num2; j <= num3; ++j) {
				list.get_Item(j).member.HasConflictingNameAndType = true;
			}
		}
		i = (num3 + 1);
	}
};
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.GetStableNameAndSetHasDataContract = function (type) {
	return $asm09.System.Runtime.Serialization.DataContract.GetStableName$1(type, /* ref */ new JSIL.MemberReference(this, "hasDataContract"));
};
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.SetIsNonAttributedType = function (type) {
	this.isNonAttributedType = (!this.hasDataContract && 
		$asm09.System.Runtime.Serialization.ClassDataContract.IsNonAttributedTypeValidForSerialization(type));
};
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.IsMethodOverriding = function (method) {
	return (method.IsVirtual && ((method.Attributes & (System.Reflection.MethodAttributes.NewSlot | System.Reflection.MethodAttributes.VtableLayoutMask)) === System.Reflection.MethodAttributes.PrivateScope));
};
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.EnsureMethodsImported = function () {
	if (!(this.isMethodChecked || ($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_UnderlyingType.call(this) === null))) {
		System.Threading.Monitor.Enter(this);
		try {
			if (!this.isMethodChecked) {
				var underlyingType = $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_UnderlyingType.call(this);
				var methods = underlyingType.GetMethods$1((System.Reflection.BindingFlags.DeclaredOnly | System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public));
			__loop0__: 
				for (var i = 0; i < methods.length; ++i) {
					var methodInfo = methods[i];
					var type = new JSIL.Variable(null);
					var parameters = methodInfo.GetParameters();
					if ($asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.IsValidCallback(
							methodInfo, 
							parameters, 
							System.Runtime.Serialization.Globals.TypeOfOnSerializingAttribute, 
							this.onSerializing, 
							/* ref */ type
						)) {
						this.onSerializing = methodInfo;
					}
					if ($asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.IsValidCallback(
							methodInfo, 
							parameters, 
							System.Runtime.Serialization.Globals.TypeOfOnSerializedAttribute, 
							this.onSerialized, 
							/* ref */ type
						)) {
						this.onSerialized = methodInfo;
					}
					if ($asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.IsValidCallback(
							methodInfo, 
							parameters, 
							System.Runtime.Serialization.Globals.TypeOfOnDeserializingAttribute, 
							this.onDeserializing, 
							/* ref */ type
						)) {
						this.onDeserializing = methodInfo;
					}
					if ($asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.IsValidCallback(
							methodInfo, 
							parameters, 
							System.Runtime.Serialization.Globals.TypeOfOnDeserializedAttribute, 
							this.onDeserialized, 
							/* ref */ type
						)) {
						this.onDeserialized = methodInfo;
					}
				}
				System.Threading.Thread.MemoryBarrier();
				this.isMethodChecked = true;
			}
		} finally {
			System.Threading.Monitor.Exit(this);
		}
	}
};
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.IsValidCallback = function (method, parameters, attributeType, currentCallback, /* ref */ prevAttributeType) {
	if (method.IsDefined(attributeType, false)) {
		if (currentCallback !== null) {
			$asm09.System.Runtime.Serialization.DataContract.ThrowInvalidDataContractException($asm09.System.Runtime.Serialization.SR.GetString$0("DuplicateCallback", [method, currentCallback, $asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(method.DeclaringType), attributeType]), method.DeclaringType);
		} else if (prevAttributeType.value !== null) {
			$asm09.System.Runtime.Serialization.DataContract.ThrowInvalidDataContractException($asm09.System.Runtime.Serialization.SR.GetString$0("DuplicateAttribute", [prevAttributeType.value, attributeType, $asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(method.DeclaringType), method]), method.DeclaringType);
		} else if (method.IsVirtual) {
			$asm09.System.Runtime.Serialization.DataContract.ThrowInvalidDataContractException($asm09.System.Runtime.Serialization.SR.GetString$0("CallbacksCannotBeVirtualMethods", [method, $asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(method.DeclaringType), attributeType]), method.DeclaringType);
		} else {
			if (method.ReturnType !== System.Runtime.Serialization.Globals.TypeOfVoid) {
				$asm09.System.Runtime.Serialization.DataContract.ThrowInvalidDataContractException($asm09.System.Runtime.Serialization.SR.GetString$0("CallbackMustReturnVoid", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(method.DeclaringType), method]), method.DeclaringType);
			}
			if (!((parameters !== null) && 
					(parameters.length === 1) && (parameters[0].ParameterType === System.Runtime.Serialization.Globals.TypeOfStreamingContext))) {
				$asm09.System.Runtime.Serialization.DataContract.ThrowInvalidDataContractException($asm09.System.Runtime.Serialization.SR.GetString$0("CallbackParameterInvalid", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(method.DeclaringType), method, System.Runtime.Serialization.Globals.TypeOfStreamingContext]), method.DeclaringType);
			}
			prevAttributeType.value = attributeType;
		}
		return true;
	}
	return false;
};
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.get_BaseContract = function () {
	return this.baseContract;
};
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.set_BaseContract = function (value) {
	this.baseContract = value;
	if (!((this.baseContract === null) || !$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_IsValueType.call(this))) {
		$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.ThrowInvalidDataContractException.call(this, $asm09.System.Runtime.Serialization.SR.GetString$0("ValueTypeCannotHaveBaseType", [$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_StableName.call(this).Name, $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_StableName.call(this).Namespace, this.baseContract.StableName.Name, this.baseContract.StableName.Namespace]));
	}
};
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.get_Members = function () {
	return this.members;
};
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.get_OnSerializing = function () {
	this.EnsureMethodsImported();
	return this.onSerializing;
};
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.get_OnSerialized = function () {
	this.EnsureMethodsImported();
	return this.onSerialized;
};
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.get_OnDeserializing = function () {
	this.EnsureMethodsImported();
	return this.onDeserializing;
};
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.get_OnDeserialized = function () {
	this.EnsureMethodsImported();
	return this.onDeserialized;
};
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.get_KnownDataContracts = function () {
	if (!(this.isKnownTypeAttributeChecked || ($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_UnderlyingType.call(this) === null))) {
		System.Threading.Monitor.Enter(this);
		try {
			if (!this.isKnownTypeAttributeChecked) {
				this.knownDataContracts = $asm09.System.Runtime.Serialization.DataContract.ImportKnownTypeAttributes$0($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_UnderlyingType.call(this));
				System.Threading.Thread.MemoryBarrier();
				this.isKnownTypeAttributeChecked = true;
			}
		} finally {
			System.Threading.Monitor.Exit(this);
		}
	}
	return this.knownDataContracts;
};
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.set_KnownDataContracts = function (value) {
	this.knownDataContracts = value;
};
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.get_HasDataContract = function () {
	return this.hasDataContract;
};
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.get_IsNonAttributedType = function () {
	return this.isNonAttributedType;
};
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.SetKeyValuePairAdapterFlags = function (type) {
	if (!(!type.IsGenericType || (type.GetGenericTypeDefinition() !== System.Runtime.Serialization.Globals.TypeOfKeyValuePairAdapter))) {
		this.isKeyValuePairAdapter = true;
		this.keyValuePairGenericArguments = type.GetGenericArguments();
		this.keyValuePairCtorInfo = type.GetConstructor$1((System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static), null, JSIL.Array.New(System.Type, [System.Runtime.Serialization.Globals.TypeOfKeyValuePair.MakeGenericType(this.keyValuePairGenericArguments)]), null);
		this.getKeyValuePairMethodInfo = type.GetMethod$4("GetKeyValuePair", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
	}
};
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.get_IsKeyValuePairAdapter = function () {
	return this.isKeyValuePairAdapter;
};
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.get_IsScriptObject = function () {
	return this.isScriptObject;
};
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.get_KeyValuePairGenericArguments = function () {
	return this.keyValuePairGenericArguments;
};
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.get_KeyValuePairAdapterConstructorInfo = function () {
	return this.keyValuePairCtorInfo;
};
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.get_GetKeyValuePairMethodInfo = function () {
	return this.getKeyValuePairMethodInfo;
};
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.GetNonAttributedTypeConstructor = function () {
	if (!this.IsNonAttributedType) {
		return null;
	}
	var underlyingType = $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_UnderlyingType.call(this);
	if (underlyingType.IsValueType) {
		return null;
	}
	var constructor = underlyingType.GetConstructor$1((System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public), null, System.Runtime.Serialization.Globals.EmptyTypeArray, null);
	if (constructor === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Runtime.Serialization.InvalidDataContractException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("NonAttributedSerializableTypesMustHaveDefaultConstructor", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(underlyingType)])]));
	}
	return constructor;
};
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.get_XmlFormatWriterDelegate = function () {
	return this.xmlFormatWriterDelegate;
};
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.set_XmlFormatWriterDelegate = function (value) {
	this.xmlFormatWriterDelegate = value;
};
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.get_XmlFormatReaderDelegate = function () {
	return this.xmlFormatReaderDelegate;
};
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.set_XmlFormatReaderDelegate = function (value) {
	this.xmlFormatReaderDelegate = value;
};
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.get_ChildElementNamespaces = function () {
	return this.childElementNamespaces;
};
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.set_ChildElementNamespaces = function (value) {
	this.childElementNamespaces = value;
};
JSIL.OverloadedMethod(System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Type]], 
		["_ctor$2", [System.Type, System.Xml.XmlDictionaryString, System.Array.Of(System.String)]]
	]);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype, "BaseContract", 
	$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.get_BaseContract, $asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.set_BaseContract);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype, "Members", 
	$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.get_Members, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype, "OnSerializing", 
	$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.get_OnSerializing, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype, "OnSerialized", 
	$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.get_OnSerialized, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype, "OnDeserializing", 
	$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.get_OnDeserializing, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype, "OnDeserialized", 
	$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.get_OnDeserialized, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype, "KnownDataContracts", 
	$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.get_KnownDataContracts, $asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.set_KnownDataContracts);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype, "HasDataContract", 
	$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.get_HasDataContract, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype, "IsNonAttributedType", 
	$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.get_IsNonAttributedType, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype, "IsKeyValuePairAdapter", 
	$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.get_IsKeyValuePairAdapter, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype, "IsScriptObject", 
	$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.get_IsScriptObject, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype, "KeyValuePairGenericArguments", 
	$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.get_KeyValuePairGenericArguments, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype, "KeyValuePairAdapterConstructorInfo", 
	$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.get_KeyValuePairAdapterConstructorInfo, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype, "GetKeyValuePairMethodInfo", 
	$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.get_GetKeyValuePairMethodInfo, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype, "XmlFormatWriterDelegate", 
	$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.get_XmlFormatWriterDelegate, $asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.set_XmlFormatWriterDelegate);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype, "XmlFormatReaderDelegate", 
	$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.get_XmlFormatReaderDelegate, $asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.set_XmlFormatReaderDelegate);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype, "ChildElementNamespaces", 
	$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.get_ChildElementNamespaces, $asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.set_ChildElementNamespaces);
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.baseContract = null;
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.members = null;
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.onSerializing = null;
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.onSerialized = null;
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.onDeserializing = null;
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.onDeserialized = null;
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.knownDataContracts = null;
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.isKnownTypeAttributeChecked = false;
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.isMethodChecked = false;
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.isNonAttributedType = false;
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.hasDataContract = false;
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.isScriptObject = false;
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.childElementNamespaces = null;
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.xmlFormatReaderDelegate = null;
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.xmlFormatWriterDelegate = null;
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.ContractNamespaces = null;
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.MemberNames = null;
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.MemberNamespaces = null;
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.isKeyValuePairAdapter = false;
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.keyValuePairGenericArguments = null;
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.keyValuePairCtorInfo = null;
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.prototype.getKeyValuePairMethodInfo = null;

$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.Member.prototype._ctor = function (member, ns, baseTypeIndex) {
	this.member = member;
	this.ns = ns;
	this.baseTypeIndex = baseTypeIndex;
};
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.Member.prototype.member = null;
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.Member.prototype.ns = null;
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.Member.prototype.baseTypeIndex = 0;

$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.DataMemberConflictComparer.prototype.Compare = function (x, y) {
	var num = System.String.CompareOrdinal$0(x.ns, y.ns);
	if (num !== 0) {
		return num;
	}
	var num2 = System.String.CompareOrdinal$0(x.member.Name, y.member.Name);
	if (num2 !== 0) {
		return num2;
	}
	return (x.baseTypeIndex - y.baseTypeIndex);
};
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.DataMemberConflictComparer.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.DataMemberConflictComparer.Singleton = null;
$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.DataMemberConflictComparer._cctor = function () {
	$asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.DataMemberConflictComparer.Singleton = new $asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.DataMemberConflictComparer();
};

$asm09.System.Runtime.Serialization.ClassDataContract.DataMemberComparer.prototype.Compare = function (x, y) {
	var num = (x.Order - y.Order);
	if (num !== 0) {
		return num;
	}
	return System.String.CompareOrdinal$0(x.Name, y.Name);
};
$asm09.System.Runtime.Serialization.ClassDataContract.DataMemberComparer.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm09.System.Runtime.Serialization.ClassDataContract.DataMemberComparer.Singleton = null;
$asm09.System.Runtime.Serialization.ClassDataContract.DataMemberComparer._cctor = function () {
	$asm09.System.Runtime.Serialization.ClassDataContract.DataMemberComparer.Singleton = new $asm09.System.Runtime.Serialization.ClassDataContract.DataMemberComparer();
};

$asm09.System.Runtime.Serialization.KeyValuePairAdapter$b2.prototype._ctor = function (kvPair) {
	System.Object.prototype._ctor.call(this);
	this.kvpKey = kvPair.Key;
	this.kvpValue = kvPair.Value;
};
$asm09.System.Runtime.Serialization.KeyValuePairAdapter$b2.prototype.get_Key = function () {
	return this.kvpKey;
};
$asm09.System.Runtime.Serialization.KeyValuePairAdapter$b2.prototype.set_Key = function (value) {
	this.kvpKey = value;
};
$asm09.System.Runtime.Serialization.KeyValuePairAdapter$b2.prototype.get_Value = function () {
	return this.kvpValue;
};
$asm09.System.Runtime.Serialization.KeyValuePairAdapter$b2.prototype.set_Value = function (value) {
	this.kvpValue = value;
};
$asm09.System.Runtime.Serialization.KeyValuePairAdapter$b2.prototype.GetKeyValuePair = function () {
	return new (System.Collections.Generic.KeyValuePair$b2.Of(this.K, this.T)) (this.kvpKey, this.kvpValue);
};
$asm09.System.Runtime.Serialization.KeyValuePairAdapter$b2.GetKeyValuePairAdapter = function (kvPair) {
	return new ($asm09.System.Runtime.Serialization.KeyValuePairAdapter$b2.Of(this.K, this.T)) (kvPair);
};
JSIL.MakeProperty($asm09.System.Runtime.Serialization.KeyValuePairAdapter$b2.prototype, "Key", 
	$asm09.System.Runtime.Serialization.KeyValuePairAdapter$b2.prototype.get_Key, $asm09.System.Runtime.Serialization.KeyValuePairAdapter$b2.prototype.set_Key);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.KeyValuePairAdapter$b2.prototype, "Value", 
	$asm09.System.Runtime.Serialization.KeyValuePairAdapter$b2.prototype.get_Value, $asm09.System.Runtime.Serialization.KeyValuePairAdapter$b2.prototype.set_Value);
$asm09.System.Runtime.Serialization.KeyValuePairAdapter$b2.prototype.kvpKey = null;
$asm09.System.Runtime.Serialization.KeyValuePairAdapter$b2.prototype.kvpValue = null;

$asm09.System.Runtime.Serialization.KeyValue$b2.prototype._ctor = function (key, value) {
	this.key = key;
	this.value = value;
};
$asm09.System.Runtime.Serialization.KeyValue$b2.prototype.get_Key = function () {
	return this.key;
};
$asm09.System.Runtime.Serialization.KeyValue$b2.prototype.set_Key = function (value) {
	this.key = value;
};
$asm09.System.Runtime.Serialization.KeyValue$b2.prototype.get_Value = function () {
	return this.value;
};
$asm09.System.Runtime.Serialization.KeyValue$b2.prototype.set_Value = function (value) {
	this.value = value;
};
JSIL.MakeProperty($asm09.System.Runtime.Serialization.KeyValue$b2.prototype, "Key", 
	$asm09.System.Runtime.Serialization.KeyValue$b2.prototype.get_Key, $asm09.System.Runtime.Serialization.KeyValue$b2.prototype.set_Key);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.KeyValue$b2.prototype, "Value", 
	$asm09.System.Runtime.Serialization.KeyValue$b2.prototype.get_Value, $asm09.System.Runtime.Serialization.KeyValue$b2.prototype.set_Value);
$asm09.System.Runtime.Serialization.KeyValue$b2.prototype.key = null;
$asm09.System.Runtime.Serialization.KeyValue$b2.prototype.value = null;

$asm09.System.Runtime.Serialization.CollectionDataContract.prototype._ctor$0 = function (type) {
	$asm09.System.Runtime.Serialization.DataContract.prototype._ctor.call(this, JSIL.New($asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper, "_ctor$0", [type]));
	this.InitCollectionDataContract(this);
};
$asm09.System.Runtime.Serialization.CollectionDataContract.prototype._ctor$1 = function (type, kind, itemType, getEnumeratorMethod, addMethod, constructor) {
	$asm09.System.Runtime.Serialization.DataContract.prototype._ctor.call(this, JSIL.New($asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper, "_ctor$1", [type, kind, itemType, getEnumeratorMethod, addMethod, constructor]));
	this.InitCollectionDataContract(this.GetSharedTypeContract(type));
};
$asm09.System.Runtime.Serialization.CollectionDataContract.prototype._ctor$2 = function (type, kind, itemType, getEnumeratorMethod, addMethod, constructor, isConstructorCheckRequired) {
	$asm09.System.Runtime.Serialization.DataContract.prototype._ctor.call(this, JSIL.New($asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper, "_ctor$2", [type, kind, itemType, getEnumeratorMethod, addMethod, constructor, isConstructorCheckRequired]));
	this.InitCollectionDataContract(this.GetSharedTypeContract(type));
};
$asm09.System.Runtime.Serialization.CollectionDataContract.prototype._ctor$3 = function (type, invalidCollectionInSharedContractMessage) {
	$asm09.System.Runtime.Serialization.DataContract.prototype._ctor.call(this, JSIL.New($asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper, "_ctor$3", [type, invalidCollectionInSharedContractMessage]));
	this.InitCollectionDataContract(this.GetSharedTypeContract(type));
};
$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.InitCollectionDataContract = function (sharedTypeContract) {
	this.helper = JSIL.TryCast($asm09.System.Runtime.Serialization.DataContract.prototype.get_Helper.call(this), $asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper);
	this.collectionItemName = this.helper.CollectionItemName;
	if (!((this.helper.Kind !== $asm09.System.Runtime.Serialization.CollectionKind.Dictionary) && (this.helper.Kind !== $asm09.System.Runtime.Serialization.CollectionKind.GenericDictionary))) {
		this.itemContract = this.helper.ItemContract;
	}
	this.helper.SharedTypeContract = sharedTypeContract;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.InitSharedTypeContract = function () {
};
$asm09.System.Runtime.Serialization.CollectionDataContract.get_KnownInterfaces = function () {
	return $asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.KnownInterfaces;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.get_Kind = function () {
	return this.helper.Kind;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.get_ItemType = function () {
	return this.helper.ItemType;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.get_ItemContract = function () {
	return JSIL.Coalesce(this.itemContract, this.helper.ItemContract);
};
$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.set_ItemContract = function (value) {
	this.itemContract = value;
	this.helper.ItemContract = value;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.get_SharedTypeContract = function () {
	return this.helper.SharedTypeContract;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.get_ItemName = function () {
	return this.helper.ItemName;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.set_ItemName = function (value) {
	this.helper.ItemName = value;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.get_CollectionItemName = function () {
	return this.collectionItemName;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.get_KeyName = function () {
	return this.helper.KeyName;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.set_KeyName = function (value) {
	this.helper.KeyName = value;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.get_ValueName = function () {
	return this.helper.ValueName;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.set_ValueName = function (value) {
	this.helper.ValueName = value;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.get_IsDictionary = function () {
	return (this.KeyName !== null);
};
$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.get_ChildElementNamespace = function () {
	if (this.childElementNamespace === null) {
		System.Threading.Monitor.Enter(this);
		try {
			if (this.childElementNamespace === null) {
				if (!(this.helper.ChildElementNamespace || this.IsDictionary)) {
					var childNamespaceToDeclare = $asm09.System.Runtime.Serialization.ClassDataContract.GetChildNamespaceToDeclare(this, this.ItemType, JSIL.New(System.Xml.XmlDictionary, "_ctor$0", []));
					System.Threading.Thread.MemoryBarrier();
					this.helper.ChildElementNamespace = childNamespaceToDeclare;
				}
				this.childElementNamespace = this.helper.ChildElementNamespace;
			}
		} finally {
			System.Threading.Monitor.Exit(this);
		}
	}
	return this.childElementNamespace;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.get_IsConstructorCheckRequired = function () {
	return this.helper.IsConstructorCheckRequired;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.set_IsConstructorCheckRequired = function (value) {
	this.helper.IsConstructorCheckRequired = value;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.get_GetEnumeratorMethod = function () {
	return this.helper.GetEnumeratorMethod;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.get_AddMethod = function () {
	return this.helper.AddMethod;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.get_Constructor = function () {
	return this.helper.Constructor;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.get_KnownDataContracts = function () {
	return this.helper.KnownDataContracts;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.set_KnownDataContracts = function (value) {
	this.helper.KnownDataContracts = value;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.get_InvalidCollectionInSharedContractMessage = function () {
	return this.helper.InvalidCollectionInSharedContractMessage;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.get_ItemNameSetExplicit = function () {
	return this.helper.ItemNameSetExplicit;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.get_XmlFormatWriterDelegate = function () {
	if (this.helper.XmlFormatWriterDelegate === null) {
		System.Threading.Monitor.Enter(this);
		try {
			if (this.helper.XmlFormatWriterDelegate === null) {
				var xmlFormatWriterDelegate = new $asm09.System.Runtime.Serialization.XmlFormatWriterGenerator().GenerateCollectionWriter(this);
				System.Threading.Thread.MemoryBarrier();
				this.helper.XmlFormatWriterDelegate = xmlFormatWriterDelegate;
			}
		} finally {
			System.Threading.Monitor.Exit(this);
		}
	}
	return this.helper.XmlFormatWriterDelegate;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.get_XmlFormatReaderDelegate = function () {
	if (this.helper.XmlFormatReaderDelegate === null) {
		System.Threading.Monitor.Enter(this);
		try {
			if (this.helper.XmlFormatReaderDelegate === null) {
				var xmlFormatReaderDelegate = new $asm09.System.Runtime.Serialization.XmlFormatReaderGenerator().GenerateCollectionReader(this);
				System.Threading.Thread.MemoryBarrier();
				this.helper.XmlFormatReaderDelegate = xmlFormatReaderDelegate;
			}
		} finally {
			System.Threading.Monitor.Exit(this);
		}
	}
	return this.helper.XmlFormatReaderDelegate;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.get_XmlFormatGetOnlyCollectionReaderDelegate = function () {
	if (this.helper.XmlFormatGetOnlyCollectionReaderDelegate === null) {
		System.Threading.Monitor.Enter(this);
		try {
			if (this.helper.XmlFormatGetOnlyCollectionReaderDelegate === null) {
				var xmlFormatGetOnlyCollectionReaderDelegate = new $asm09.System.Runtime.Serialization.XmlFormatReaderGenerator().GenerateGetOnlyCollectionReader(this);
				System.Threading.Thread.MemoryBarrier();
				this.helper.XmlFormatGetOnlyCollectionReaderDelegate = xmlFormatGetOnlyCollectionReaderDelegate;
			}
		} finally {
			System.Threading.Monitor.Exit(this);
		}
	}
	return this.helper.XmlFormatGetOnlyCollectionReaderDelegate;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.GetSharedTypeContract = function (type) {
	if (type.IsDefined(System.Runtime.Serialization.Globals.TypeOfCollectionDataContractAttribute, false)) {
		return this;
	}
	if (type.IsDefined(System.Runtime.Serialization.Globals.TypeOfDataContractAttribute, false)) {
		return JSIL.New($asm09.System.Runtime.Serialization.ClassDataContract, "_ctor$0", [type]);
	}
	return null;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.IsCollectionInterface = function (type) {
	if (type.IsGenericType) {
		type = type.GetGenericTypeDefinition();
	}
	return JSIL.Cast($asm09.System.Runtime.Serialization.CollectionDataContract.KnownInterfaces, System.Collections.Generic.IList$b1.Of(System.Type)).ICollection$b1_Contains(type);
};
$asm09.System.Runtime.Serialization.CollectionDataContract.IsCollection$0 = function (type) {
	var type2 = new JSIL.Variable(null);
	return $asm09.System.Runtime.Serialization.CollectionDataContract.IsCollection$1(type, /* ref */ type2);
};
$asm09.System.Runtime.Serialization.CollectionDataContract.IsCollection$1 = function (type, /* ref */ itemType) {
	return $asm09.System.Runtime.Serialization.CollectionDataContract.IsCollectionHelper(type, /* ref */ itemType, true);
};
$asm09.System.Runtime.Serialization.CollectionDataContract.IsCollection$2 = function (type, constructorRequired) {
	var type2 = new JSIL.Variable(null);
	return $asm09.System.Runtime.Serialization.CollectionDataContract.IsCollectionHelper(type, /* ref */ type2, constructorRequired);
};
$asm09.System.Runtime.Serialization.CollectionDataContract.IsCollectionHelper = function (type, /* ref */ itemType, constructorRequired) {
	var dataContract = new JSIL.Variable(null);
	if (!(!type.IsArray || $asm09.System.Runtime.Serialization.DataContract.GetBuiltInDataContract$0(type))) {
		itemType.value = type.GetElementType();
		return true;
	}
	return $asm09.System.Runtime.Serialization.CollectionDataContract.IsCollectionOrTryCreate(
		type, 
		false, 
		/* ref */ dataContract, 
		/* ref */ itemType, 
		constructorRequired
	);
};
$asm09.System.Runtime.Serialization.CollectionDataContract.TryCreate = function (type, /* ref */ dataContract) {
	var type2 = new JSIL.Variable(null);
	return $asm09.System.Runtime.Serialization.CollectionDataContract.IsCollectionOrTryCreate(
		type, 
		true, 
		/* ref */ dataContract, 
		/* ref */ type2, 
		true
	);
};
$asm09.System.Runtime.Serialization.CollectionDataContract.CreateGetOnlyCollectionDataContract = function (type, /* ref */ dataContract) {
	var type2 = new JSIL.Variable(null);
	if (type.IsArray) {
		dataContract.value = JSIL.New($asm09.System.Runtime.Serialization.CollectionDataContract, "_ctor$0", [type]);
		return true;
	}
	return $asm09.System.Runtime.Serialization.CollectionDataContract.IsCollectionOrTryCreate(
		type, 
		true, 
		/* ref */ dataContract, 
		/* ref */ type2, 
		false
	);
};
$asm09.System.Runtime.Serialization.CollectionDataContract.GetTargetMethodWithName = function (name, type, interfaceType) {
	var interfaceMap = type.GetInterfaceMap(interfaceType).MemberwiseClone();
__loop0__: 
	for (var i = 0; i < interfaceMap.TargetMethods.length; ++i) {
		if (interfaceMap.InterfaceMethods[i].Name == name) {
			return interfaceMap.InterfaceMethods[i];
		}
	}
	return null;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.IsCollectionOrTryCreate = function (type, tryCreate, /* ref */ dataContract, /* ref */ itemType, constructorRequired) {
	dataContract.value = null;
	itemType.value = System.Runtime.Serialization.Globals.TypeOfObject;
	if ($asm09.System.Runtime.Serialization.DataContract.GetBuiltInDataContract$0(type) !== null) {
		return $asm09.System.Runtime.Serialization.CollectionDataContract.HandleIfInvalidCollection(
			type, 
			tryCreate, 
			false, 
			false, 
			"CollectionTypeCannotBeBuiltIn", 
			null, 
			/* ref */ dataContract
		);
	}
	var hasCollectionDataContract = $asm09.System.Runtime.Serialization.CollectionDataContract.IsCollectionDataContract(type);
	var baseType = type.BaseType;
	var createContractWithException = ((baseType !== null) && 
		(baseType !== System.Runtime.Serialization.Globals.TypeOfObject) && 
		(baseType !== System.Runtime.Serialization.Globals.TypeOfValueType) && 
		(baseType !== System.Runtime.Serialization.Globals.TypeOfUri) && 
		$asm09.System.Runtime.Serialization.CollectionDataContract.IsCollection$0(baseType));
	if (type.IsDefined(System.Runtime.Serialization.Globals.TypeOfDataContractAttribute, false)) {
		return $asm09.System.Runtime.Serialization.CollectionDataContract.HandleIfInvalidCollection(
			type, 
			tryCreate, 
			hasCollectionDataContract, 
			createContractWithException, 
			"CollectionTypeCannotHaveDataContract", 
			null, 
			/* ref */ dataContract
		);
	}
	if (System.Runtime.Serialization.Globals.TypeOfIXmlSerializable.IsAssignableFrom(type)) {
		return false;
	}
	if (!System.Runtime.Serialization.Globals.TypeOfIEnumerable.IsAssignableFrom(type)) {
		return $asm09.System.Runtime.Serialization.CollectionDataContract.HandleIfInvalidCollection(
			type, 
			tryCreate, 
			hasCollectionDataContract, 
			createContractWithException, 
			"CollectionTypeIsNotIEnumerable", 
			null, 
			/* ref */ dataContract
		);
	}
	if (type.IsInterface) {
		var type2 = type.IsGenericType ? type.GetGenericTypeDefinition() : type;
		var knownInterfaces = $asm09.System.Runtime.Serialization.CollectionDataContract.KnownInterfaces;
	__loop0__: 
		for (var i = 0; i < knownInterfaces.length; ++i) {
			if (knownInterfaces[i] === type2) {
				var methodInfo = new JSIL.Variable(null);
				if (type.IsGenericType) {
					var genericArguments = type.GetGenericArguments();
					if (type2 === System.Runtime.Serialization.Globals.TypeOfIDictionaryGeneric) {
						itemType.value = System.Runtime.Serialization.Globals.TypeOfKeyValue.MakeGenericType(genericArguments);
						methodInfo.value = type.GetMethod$5("Add");
						var method = new JSIL.Variable(System.Runtime.Serialization.Globals.TypeOfIEnumerableGeneric.MakeGenericType(JSIL.Array.New(System.Type, [System.Runtime.Serialization.Globals.TypeOfKeyValuePair.MakeGenericType(genericArguments)])).GetMethod$5("GetEnumerator"));
					} else {
						itemType.value = genericArguments[0];
						method.value = System.Runtime.Serialization.Globals.TypeOfIEnumerableGeneric.MakeGenericType(JSIL.Array.New(System.Type, [itemType.value])).GetMethod$5("GetEnumerator");
					}
				} else {
					if (type2 === System.Runtime.Serialization.Globals.TypeOfIDictionary) {
						itemType.value = $asm09.System.Runtime.Serialization.KeyValue$b2.Of(System.Object, System.Object);
						methodInfo.value = type.GetMethod$5("Add");
					} else {
						itemType.value = System.Runtime.Serialization.Globals.TypeOfObject;
					}
					method.value = System.Runtime.Serialization.Globals.TypeOfIEnumerable.GetMethod$5("GetEnumerator");
				}
				if (tryCreate) {
					dataContract.value = JSIL.New($asm09.System.Runtime.Serialization.CollectionDataContract, "_ctor$1", [type, (i + 1), itemType.value, method.value, methodInfo.value, null]);
				}
				return true;
			}
		}
	}
	var constructorInfo = null;
	if (!type.IsValueType) {
		constructorInfo = type.GetConstructor$1((System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public), null, System.Runtime.Serialization.Globals.EmptyTypeArray, null);
		if (!(constructorInfo || !constructorRequired)) {
			return $asm09.System.Runtime.Serialization.CollectionDataContract.HandleIfInvalidCollection(
				type, 
				tryCreate, 
				hasCollectionDataContract, 
				createContractWithException, 
				"CollectionTypeDoesNotHaveDefaultCtor", 
				null, 
				/* ref */ dataContract
			);
		}
	}
	var type3 = null;
	var collectionKind = $asm09.System.Runtime.Serialization.CollectionKind.None;
	var flag = false;
	var interfaces = type.GetInterfaces();
	var array = interfaces;
__loop1__: 
	for (var j = 0; j < array.length; ++j) {
		var type4 = array[j];
		var type5 = type4.IsGenericType ? type4.GetGenericTypeDefinition() : type4;
		var knownInterfaces2 = $asm09.System.Runtime.Serialization.CollectionDataContract.KnownInterfaces;
	__loop2__: 
		for (var k = 0; k < knownInterfaces2.length; ) {
			if (knownInterfaces2[k] === type5) {
				var collectionKind2 = (k + 1);
				if (!(JSIL.Cast(collectionKind, System.Boolean) && (collectionKind2 >= collectionKind))) {
					collectionKind = collectionKind2;
					type3 = type4;
					flag = false;
					break __loop2__;
				}
				if ((collectionKind & collectionKind2) === collectionKind2) {
					flag = true;
					break __loop2__;
				}
				break __loop2__;
			} else {
				++k;
			}
		}
	}
	if (!JSIL.Cast(collectionKind, System.Boolean)) {
		return $asm09.System.Runtime.Serialization.CollectionDataContract.HandleIfInvalidCollection(
			type, 
			tryCreate, 
			hasCollectionDataContract, 
			createContractWithException, 
			"CollectionTypeIsNotIEnumerable", 
			null, 
			/* ref */ dataContract
		);
	}
	if (!((collectionKind !== $asm09.System.Runtime.Serialization.CollectionKind.Enumerable) && 
			(collectionKind !== $asm09.System.Runtime.Serialization.CollectionKind.Collection) && (collectionKind !== $asm09.System.Runtime.Serialization.CollectionKind.GenericEnumerable))) {
		if (flag) {
			type3 = System.Runtime.Serialization.Globals.TypeOfIEnumerable;
		}
		itemType.value = type3.IsGenericType ? type3.GetGenericArguments()[0] : System.Runtime.Serialization.Globals.TypeOfObject;
		$asm09.System.Runtime.Serialization.CollectionDataContract.GetCollectionMethods(
			type, 
			type3, 
			JSIL.Array.New(System.Type, [itemType.value]), 
			false, 
			/* ref */ method, 
			/* ref */ methodInfo
		);
		if (methodInfo.value === null) {
			return $asm09.System.Runtime.Serialization.CollectionDataContract.HandleIfInvalidCollection(
				type, 
				tryCreate, 
				hasCollectionDataContract, 
				createContractWithException, 
				"CollectionTypeDoesNotHaveAddMethod", 
				$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(itemType.value), 
				/* ref */ dataContract
			);
		}
		if (tryCreate) {
			dataContract.value = JSIL.New($asm09.System.Runtime.Serialization.CollectionDataContract, "_ctor$2", [type, collectionKind, itemType.value, method.value, methodInfo.value, constructorInfo, !constructorRequired]);
		}
	} else {
		if (flag) {
			return $asm09.System.Runtime.Serialization.CollectionDataContract.HandleIfInvalidCollection(
				type, 
				tryCreate, 
				hasCollectionDataContract, 
				createContractWithException, 
				"CollectionTypeHasMultipleDefinitionsOfInterface", 
				$asm09.System.Runtime.Serialization.CollectionDataContract.KnownInterfaces[(collectionKind - $asm09.System.Runtime.Serialization.CollectionKind.GenericDictionary)].Name, 
				/* ref */ dataContract
			);
		}
		var array2 = null;
		switch (Number(collectionKind)) {
			case 1: 
				array2 = type3.GetGenericArguments();
				itemType.value = (type3.IsGenericTypeDefinition || 
					(array2[0].IsGenericParameter && 
						array2[1].IsGenericParameter)) ? System.Runtime.Serialization.Globals.TypeOfKeyValue : System.Runtime.Serialization.Globals.TypeOfKeyValue.MakeGenericType(array2);
				break;
			case 2: 
				array2 = JSIL.Array.New(System.Type, [System.Runtime.Serialization.Globals.TypeOfObject, System.Runtime.Serialization.Globals.TypeOfObject]);
				itemType.value = System.Runtime.Serialization.Globals.TypeOfKeyValue.MakeGenericType(array2);
				break;
			case 3: 
			case 4: 
				array2 = type3.GetGenericArguments();
				itemType.value = array2[0];
				break;
			case 5: 
				itemType.value = System.Runtime.Serialization.Globals.TypeOfObject;
				array2 = JSIL.Array.New(System.Type, [itemType.value]);
				break;
		}
		if (tryCreate) {
			$asm09.System.Runtime.Serialization.CollectionDataContract.GetCollectionMethods(
				type, 
				type3, 
				array2, 
				true, 
				/* ref */ method, 
				/* ref */ methodInfo
			);
			dataContract.value = JSIL.New($asm09.System.Runtime.Serialization.CollectionDataContract, "_ctor$2", [type, collectionKind, itemType.value, method.value, methodInfo.value, constructorInfo, !constructorRequired]);
		}
	}
	return true;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.IsCollectionDataContract = function (type) {
	return type.IsDefined(System.Runtime.Serialization.Globals.TypeOfCollectionDataContractAttribute, false);
};
$asm09.System.Runtime.Serialization.CollectionDataContract.HandleIfInvalidCollection = function (type, tryCreate, hasCollectionDataContract, createContractWithException, message, param, /* ref */ dataContract) {
	if (hasCollectionDataContract) {
		if (tryCreate) {
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Runtime.Serialization.InvalidDataContractException, "_ctor$1", [$asm09.System.Runtime.Serialization.CollectionDataContract.GetInvalidCollectionMessage(message, $asm09.System.Runtime.Serialization.SR.GetString$0("InvalidCollectionDataContract", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(type)]), param)]));
		}
		return true;
	} else {
		if (createContractWithException) {
			if (tryCreate) {
				dataContract.value = JSIL.New($asm09.System.Runtime.Serialization.CollectionDataContract, "_ctor$3", [type, $asm09.System.Runtime.Serialization.CollectionDataContract.GetInvalidCollectionMessage(message, $asm09.System.Runtime.Serialization.SR.GetString$0("InvalidCollectionType", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(type)]), param)]);
			}
			return true;
		}
		return false;
	}
};
$asm09.System.Runtime.Serialization.CollectionDataContract.GetInvalidCollectionMessage = function (message, nestedMessage, param) {
	if (param !== null) {
		return $asm09.System.Runtime.Serialization.SR.GetString$0(message, [nestedMessage, param]);
	}
	return $asm09.System.Runtime.Serialization.SR.GetString$0(message, [nestedMessage]);
};
$asm09.System.Runtime.Serialization.CollectionDataContract.FindCollectionMethodsOnInterface = function (type, interfaceType, /* ref */ addMethod, /* ref */ getEnumeratorMethod) {
	var interfaceMap = type.GetInterfaceMap(interfaceType).MemberwiseClone();
__loop0__: 
	for (var i = 0; i < interfaceMap.TargetMethods.length; ++i) {
		if (interfaceMap.InterfaceMethods[i].Name == "Add") {
			addMethod.value = interfaceMap.InterfaceMethods[i];
		} else if (interfaceMap.InterfaceMethods[i].Name == "GetEnumerator") {
			getEnumeratorMethod.value = interfaceMap.InterfaceMethods[i];
		}
	}
};
$asm09.System.Runtime.Serialization.CollectionDataContract.GetCollectionMethods = function (type, interfaceType, addMethodTypeArray, addMethodOnInterface, /* ref */ getEnumeratorMethod, /* ref */ addMethod) {
	var methodInfo = null;
	getEnumeratorMethod.value = (methodInfo = null);
	addMethod.value = methodInfo;
	if (addMethodOnInterface) {
		addMethod.value = type.GetMethod$1(
			"Add", 
			(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public), 
			null, 
			addMethodTypeArray, 
			null
		);
		if (!((addMethod.value !== null) && (addMethod.value.GetParameters()[0].ParameterType === addMethodTypeArray[0]))) {
			$asm09.System.Runtime.Serialization.CollectionDataContract.FindCollectionMethodsOnInterface(type, interfaceType, /* ref */ addMethod, /* ref */ getEnumeratorMethod);
			if (addMethod.value === null) {
				var interfaces = interfaceType.GetInterfaces();
				var array = interfaces;
			__loop0__: 
				for (var i = 0; i < array.length; ++i) {
					var type2 = array[i];
					if ($asm09.System.Runtime.Serialization.CollectionDataContract.IsKnownInterface(type2)) {
						$asm09.System.Runtime.Serialization.CollectionDataContract.FindCollectionMethodsOnInterface(type, type2, /* ref */ addMethod, /* ref */ getEnumeratorMethod);
						if (addMethod.value === null) {
							break __loop0__;
						}
					}
				}
			}
		}
	} else {
		addMethod.value = type.GetMethod$1(
			"Add", 
			(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public), 
			null, 
			addMethodTypeArray, 
			null
		);
		if (addMethod.value === null) {
			return;
		}
	}
	if (getEnumeratorMethod.value === null) {
		getEnumeratorMethod.value = type.GetMethod$1(
			"GetEnumerator", 
			(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public), 
			null, 
			System.Runtime.Serialization.Globals.EmptyTypeArray, 
			null
		);
		if (!((getEnumeratorMethod.value !== null) && System.Runtime.Serialization.Globals.TypeOfIEnumerator.IsAssignableFrom(getEnumeratorMethod.value.ReturnType))) {
			var type3 = interfaceType.GetInterface$1("System.Collections.Generic.IEnumerable*", false);
			if (type3 === null) {
				type3 = System.Runtime.Serialization.Globals.TypeOfIEnumerable;
			}
			getEnumeratorMethod.value = $asm09.System.Runtime.Serialization.CollectionDataContract.GetTargetMethodWithName("GetEnumerator", type, type3);
		}
	}
};
$asm09.System.Runtime.Serialization.CollectionDataContract.IsKnownInterface = function (type) {
	var type2 = type.IsGenericType ? type.GetGenericTypeDefinition() : type;
	var knownInterfaces = $asm09.System.Runtime.Serialization.CollectionDataContract.KnownInterfaces;
__loop0__: 
	for (var i = 0; i < knownInterfaces.length; ++i) {
		var type3 = knownInterfaces[i];
		if (type2 === type3) {
			return true;
		}
	}
	return false;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.GetValidContract$0 = function (mode) {
	if (this.InvalidCollectionInSharedContractMessage !== null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Runtime.Serialization.InvalidDataContractException, "_ctor$1", [this.InvalidCollectionInSharedContractMessage]));
	}
	return this;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.GetValidContract$1 = function () {
	if (this.IsConstructorCheckRequired) {
		this.CheckConstructor();
	}
	return this;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.CheckConstructor = function () {
	if (this.Constructor === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Runtime.Serialization.InvalidDataContractException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("CollectionTypeDoesNotHaveDefaultCtor", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName($asm09.System.Runtime.Serialization.DataContract.prototype.get_UnderlyingType.call(this))])]));
	}
	this.IsConstructorCheckRequired = false;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.IsValidContract = function (mode) {
	return (this.InvalidCollectionInSharedContractMessage === null);
};
$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.RequiresMemberAccessForRead = function (securityException, serializationAssemblyPatterns) {
	if (!$asm09.System.Runtime.Serialization.DataContract.IsTypeVisible($asm09.System.Runtime.Serialization.DataContract.prototype.get_UnderlyingType.call(this), serializationAssemblyPatterns)) {
		if (securityException !== null) {
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Security.SecurityException, "_ctor$2", [$asm09.System.Runtime.Serialization.SR.GetString$0("PartialTrustCollectionContractTypeNotPublic", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName($asm09.System.Runtime.Serialization.DataContract.prototype.get_UnderlyingType.call(this))]), securityException]));
		}
		return true;
	} else if (!((this.ItemType === null) || $asm09.System.Runtime.Serialization.DataContract.IsTypeVisible(this.ItemType, serializationAssemblyPatterns))) {
		if (securityException !== null) {
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Security.SecurityException, "_ctor$2", [$asm09.System.Runtime.Serialization.SR.GetString$0("PartialTrustCollectionContractTypeNotPublic", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(this.ItemType)]), securityException]));
		}
		return true;
	} else if ($asm09.System.Runtime.Serialization.DataContract.ConstructorRequiresMemberAccess(this.Constructor, serializationAssemblyPatterns)) {
		if (securityException !== null) {
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Security.SecurityException, "_ctor$2", [$asm09.System.Runtime.Serialization.SR.GetString$0("PartialTrustCollectionContractNoPublicConstructor", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName($asm09.System.Runtime.Serialization.DataContract.prototype.get_UnderlyingType.call(this))]), securityException]));
		}
		return true;
	} else {
		if (!$asm09.System.Runtime.Serialization.DataContract.MethodRequiresMemberAccess(this.AddMethod, serializationAssemblyPatterns)) {
			return false;
		}
		if (securityException !== null) {
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Security.SecurityException, "_ctor$2", [$asm09.System.Runtime.Serialization.SR.GetString$0("PartialTrustCollectionContractAddMethodNotPublic", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName($asm09.System.Runtime.Serialization.DataContract.prototype.get_UnderlyingType.call(this)), this.AddMethod.Name]), securityException]));
		}
		return true;
	}
};
$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.RequiresMemberAccessForWrite = function (securityException, serializationAssemblyPatterns) {
	if (!$asm09.System.Runtime.Serialization.DataContract.IsTypeVisible($asm09.System.Runtime.Serialization.DataContract.prototype.get_UnderlyingType.call(this), serializationAssemblyPatterns)) {
		if (securityException !== null) {
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Security.SecurityException, "_ctor$2", [$asm09.System.Runtime.Serialization.SR.GetString$0("PartialTrustCollectionContractTypeNotPublic", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName($asm09.System.Runtime.Serialization.DataContract.prototype.get_UnderlyingType.call(this))]), securityException]));
		}
		return true;
	} else {
		if ((this.ItemType === null) || $asm09.System.Runtime.Serialization.DataContract.IsTypeVisible(this.ItemType, serializationAssemblyPatterns)) {
			return false;
		}
		if (securityException !== null) {
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Security.SecurityException, "_ctor$2", [$asm09.System.Runtime.Serialization.SR.GetString$0("PartialTrustCollectionContractTypeNotPublic", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(this.ItemType)]), securityException]));
		}
		return true;
	}
};
$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.WriteXmlValue = function (xmlWriter, obj, context) {
	context.IsGetOnlyCollection = false;
	this.XmlFormatWriterDelegate(xmlWriter, obj, context, this);
};
$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.ReadXmlValue = function (xmlReader, context) {
	xmlReader.Read();
	var result = null;
	if (context.IsGetOnlyCollection) {
		context.IsGetOnlyCollection = false;
		this.XmlFormatGetOnlyCollectionReaderDelegate(
			xmlReader, 
			context, 
			this.CollectionItemName, 
			this.Namespace, 
			this
		);
	} else {
		result = this.XmlFormatReaderDelegate(
			xmlReader, 
			context, 
			this.CollectionItemName, 
			this.Namespace, 
			this
		);
	}
	xmlReader.ReadEndElement();
	return result;
};
JSIL.OverloadedMethod($asm09.System.Runtime.Serialization.CollectionDataContract.prototype, "_ctor", [
		["_ctor$0", [System.Type]], 
		["_ctor$1", [System.Type, $asm09.System.Runtime.Serialization.CollectionKind, System.Type, System.Reflection.MethodInfo, System.Reflection.MethodInfo, System.Reflection.ConstructorInfo]], 
		["_ctor$2", [System.Type, $asm09.System.Runtime.Serialization.CollectionKind, System.Type, System.Reflection.MethodInfo, System.Reflection.MethodInfo, System.Reflection.ConstructorInfo, System.Boolean]], 
		["_ctor$3", [System.Type, System.String]]
	]);
JSIL.OverloadedMethod($asm09.System.Runtime.Serialization.CollectionDataContract, "IsCollection", [
		["IsCollection$0", [System.Type]], 
		["IsCollection$1", [System.Type, JSIL.Reference.Of(System.Type)]], 
		["IsCollection$2", [System.Type, System.Boolean]]
	]);
JSIL.OverloadedMethod($asm09.System.Runtime.Serialization.CollectionDataContract.prototype, "GetValidContract", [
		["GetValidContract$0", [$asm09.System.Runtime.Serialization.SerializationMode]], 
		["GetValidContract$1", []]
	]);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.CollectionDataContract, "KnownInterfaces", 
	$asm09.System.Runtime.Serialization.CollectionDataContract.get_KnownInterfaces, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.CollectionDataContract.prototype, "Kind", 
	$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.get_Kind, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.CollectionDataContract.prototype, "ItemType", 
	$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.get_ItemType, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.CollectionDataContract.prototype, "ItemContract", 
	$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.get_ItemContract, $asm09.System.Runtime.Serialization.CollectionDataContract.prototype.set_ItemContract);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.CollectionDataContract.prototype, "SharedTypeContract", 
	$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.get_SharedTypeContract, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.CollectionDataContract.prototype, "ItemName", 
	$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.get_ItemName, $asm09.System.Runtime.Serialization.CollectionDataContract.prototype.set_ItemName);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.CollectionDataContract.prototype, "CollectionItemName", 
	$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.get_CollectionItemName, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.CollectionDataContract.prototype, "KeyName", 
	$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.get_KeyName, $asm09.System.Runtime.Serialization.CollectionDataContract.prototype.set_KeyName);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.CollectionDataContract.prototype, "ValueName", 
	$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.get_ValueName, $asm09.System.Runtime.Serialization.CollectionDataContract.prototype.set_ValueName);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.CollectionDataContract.prototype, "IsDictionary", 
	$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.get_IsDictionary, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.CollectionDataContract.prototype, "ChildElementNamespace", 
	$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.get_ChildElementNamespace, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.CollectionDataContract.prototype, "IsConstructorCheckRequired", 
	$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.get_IsConstructorCheckRequired, $asm09.System.Runtime.Serialization.CollectionDataContract.prototype.set_IsConstructorCheckRequired);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.CollectionDataContract.prototype, "GetEnumeratorMethod", 
	$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.get_GetEnumeratorMethod, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.CollectionDataContract.prototype, "AddMethod", 
	$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.get_AddMethod, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.CollectionDataContract.prototype, "Constructor", 
	$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.get_Constructor, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.CollectionDataContract.prototype, "KnownDataContracts", 
	$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.get_KnownDataContracts, $asm09.System.Runtime.Serialization.CollectionDataContract.prototype.set_KnownDataContracts);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.CollectionDataContract.prototype, "InvalidCollectionInSharedContractMessage", 
	$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.get_InvalidCollectionInSharedContractMessage, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.CollectionDataContract.prototype, "ItemNameSetExplicit", 
	$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.get_ItemNameSetExplicit, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.CollectionDataContract.prototype, "XmlFormatWriterDelegate", 
	$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.get_XmlFormatWriterDelegate, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.CollectionDataContract.prototype, "XmlFormatReaderDelegate", 
	$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.get_XmlFormatReaderDelegate, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.CollectionDataContract.prototype, "XmlFormatGetOnlyCollectionReaderDelegate", 
	$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.get_XmlFormatGetOnlyCollectionReaderDelegate, null);
$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.collectionItemName = null;
$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.childElementNamespace = null;
$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.itemContract = null;
$asm09.System.Runtime.Serialization.CollectionDataContract.prototype.helper = null;

$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.get_KnownInterfaces = function () {
	if ($asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper._knownInterfaces === null) {
		$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper._knownInterfaces = JSIL.Array.New(System.Type, [System.Runtime.Serialization.Globals.TypeOfIDictionaryGeneric, System.Runtime.Serialization.Globals.TypeOfIDictionary, System.Runtime.Serialization.Globals.TypeOfIListGeneric, System.Runtime.Serialization.Globals.TypeOfICollectionGeneric, System.Runtime.Serialization.Globals.TypeOfIList, System.Runtime.Serialization.Globals.TypeOfIEnumerableGeneric, System.Runtime.Serialization.Globals.TypeOfICollection, System.Runtime.Serialization.Globals.TypeOfIEnumerable]);
	}
	return $asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper._knownInterfaces;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.Init = function (kind, itemType, collectionContractAttribute) {
	this.kind = kind;
	if (itemType !== null) {
		this.itemType = itemType;
		var flag = ((kind === $asm09.System.Runtime.Serialization.CollectionKind.Dictionary) || 
			(kind === $asm09.System.Runtime.Serialization.CollectionKind.GenericDictionary));
		var text = null;
		var text2 = null;
		var text3 = null;
		if (collectionContractAttribute !== null) {
			if (collectionContractAttribute.IsItemNameSetExplicit) {
				if (!((collectionContractAttribute.ItemName !== null) && (collectionContractAttribute.ItemName.length !== 0))) {
					throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Runtime.Serialization.InvalidDataContractException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("InvalidCollectionContractItemName", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_UnderlyingType.call(this))])]));
				}
				text = $asm09.System.Runtime.Serialization.DataContract.EncodeLocalName(collectionContractAttribute.ItemName);
				this.itemNameSetExplicit = true;
			}
			if (collectionContractAttribute.IsKeyNameSetExplicit) {
				if (!((collectionContractAttribute.KeyName !== null) && (collectionContractAttribute.KeyName.length !== 0))) {
					throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Runtime.Serialization.InvalidDataContractException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("InvalidCollectionContractKeyName", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_UnderlyingType.call(this))])]));
				}
				if (!flag) {
					throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Runtime.Serialization.InvalidDataContractException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("InvalidCollectionContractKeyNoDictionary", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_UnderlyingType.call(this)), collectionContractAttribute.KeyName])]));
				}
				text2 = $asm09.System.Runtime.Serialization.DataContract.EncodeLocalName(collectionContractAttribute.KeyName);
			}
			if (collectionContractAttribute.IsValueNameSetExplicit) {
				if (!((collectionContractAttribute.ValueName !== null) && (collectionContractAttribute.ValueName.length !== 0))) {
					throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Runtime.Serialization.InvalidDataContractException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("InvalidCollectionContractValueName", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_UnderlyingType.call(this))])]));
				}
				if (!flag) {
					throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Runtime.Serialization.InvalidDataContractException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("InvalidCollectionContractValueNoDictionary", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_UnderlyingType.call(this)), collectionContractAttribute.ValueName])]));
				}
				text3 = $asm09.System.Runtime.Serialization.DataContract.EncodeLocalName(collectionContractAttribute.ValueName);
			}
		}
		var xmlDictionary = flag ? JSIL.New(System.Xml.XmlDictionary, "_ctor$1", [5]) : JSIL.New(System.Xml.XmlDictionary, "_ctor$1", [3]);
		$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.set_Name.call(this, xmlDictionary.Add($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_StableName.call(this).Name));
		$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.set_Namespace.call(this, xmlDictionary.Add($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_StableName.call(this).Namespace));
		this.itemName = JSIL.Coalesce(text, $asm09.System.Runtime.Serialization.DataContract.GetStableName$0($asm09.System.Runtime.Serialization.DataContract.UnwrapNullableType(itemType)).Name);
		this.collectionItemName = xmlDictionary.Add(this.itemName);
		if (flag) {
			this.keyName = JSIL.Coalesce(text2, "Key");
			this.valueName = JSIL.Coalesce(text3, "Value");
		}
	}
	if (collectionContractAttribute !== null) {
		$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.set_IsReference.call(this, collectionContractAttribute.IsReference);
	}
};
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype._ctor$0 = function (type) {
	$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype._ctor$1.call(this, type);
	if (type === System.Runtime.Serialization.Globals.TypeOfArray) {
		type = System.Runtime.Serialization.Globals.TypeOfObjectArray;
	}
	if (type.GetArrayRank() > 1) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.NotSupportedException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$2("SupportForMultidimensionalArraysNotPresent")]));
	}
	$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.set_StableName.call(this, $asm09.System.Runtime.Serialization.DataContract.GetStableName$0(type));
	this.Init($asm09.System.Runtime.Serialization.CollectionKind.Array, type.GetElementType(), null);
};
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype._ctor$1 = function (type, kind, itemType, getEnumeratorMethod, addMethod, constructor) {
	var collectionContractAttribute = new JSIL.Variable(null);
	$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype._ctor$1.call(this, type);
	if (getEnumeratorMethod === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Runtime.Serialization.InvalidDataContractException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("CollectionMustHaveGetEnumeratorMethod", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(type)])]));
	}
	if (!(addMethod || type.IsInterface)) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Runtime.Serialization.InvalidDataContractException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("CollectionMustHaveAddMethod", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(type)])]));
	}
	if (itemType === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Runtime.Serialization.InvalidDataContractException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("CollectionMustHaveItemType", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(type)])]));
	}
	$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.set_StableName.call(this, $asm09.System.Runtime.Serialization.DataContract.GetCollectionStableName(type, itemType, /* ref */ collectionContractAttribute));
	this.Init(kind, itemType, collectionContractAttribute.value);
	this.getEnumeratorMethod = getEnumeratorMethod;
	this.addMethod = addMethod;
	this.constructor = constructor;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype._ctor$2 = function (type, kind, itemType, getEnumeratorMethod, addMethod, constructor, isConstructorCheckRequired) {
	this._ctor$1(
		type, 
		kind, 
		itemType, 
		getEnumeratorMethod, 
		addMethod, 
		constructor
	);
	this.isConstructorCheckRequired = isConstructorCheckRequired;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype._ctor$3 = function (type, invalidCollectionInSharedContractMessage) {
	$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype._ctor$1.call(this, type);
	this.Init($asm09.System.Runtime.Serialization.CollectionKind.Collection, null, null);
	this.invalidCollectionInSharedContractMessage = invalidCollectionInSharedContractMessage;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.get_Kind = function () {
	return this.kind;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.get_ItemType = function () {
	return this.itemType;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.get_ItemContract = function () {
	if (!(this.itemContract || ($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_UnderlyingType.call(this) === null))) {
		if (this.IsDictionary) {
			if (System.String.CompareOrdinal$0(this.KeyName, this.ValueName) === 0) {
				$asm09.System.Runtime.Serialization.DataContract.ThrowInvalidDataContractException($asm09.System.Runtime.Serialization.SR.GetString$0("DupKeyValueName", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_UnderlyingType.call(this)), this.KeyName]), $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_UnderlyingType.call(this));
			}
			this.itemContract = $asm09.System.Runtime.Serialization.ClassDataContract.CreateClassDataContractForKeyValue(this.ItemType, $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_Namespace.call(this), JSIL.Array.New(System.String, [this.KeyName, this.ValueName]));
			$asm09.System.Runtime.Serialization.DataContract.GetDataContract$0(this.ItemType);
		} else {
			this.itemContract = $asm09.System.Runtime.Serialization.DataContract.GetDataContract$0(this.ItemType);
		}
	}
	return this.itemContract;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.set_ItemContract = function (value) {
	this.itemContract = value;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.get_SharedTypeContract = function () {
	return this.sharedTypeContract;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.set_SharedTypeContract = function (value) {
	this.sharedTypeContract = value;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.get_ItemName = function () {
	return this.itemName;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.set_ItemName = function (value) {
	this.itemName = value;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.get_IsConstructorCheckRequired = function () {
	return this.isConstructorCheckRequired;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.set_IsConstructorCheckRequired = function (value) {
	this.isConstructorCheckRequired = value;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.get_CollectionItemName = function () {
	return this.collectionItemName;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.get_KeyName = function () {
	return this.keyName;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.set_KeyName = function (value) {
	this.keyName = value;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.get_ValueName = function () {
	return this.valueName;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.set_ValueName = function (value) {
	this.valueName = value;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.get_IsDictionary = function () {
	return (this.KeyName !== null);
};
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.get_ChildElementNamespace = function () {
	return this.childElementNamespace;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.set_ChildElementNamespace = function (value) {
	this.childElementNamespace = value;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.get_GetEnumeratorMethod = function () {
	return this.getEnumeratorMethod;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.get_AddMethod = function () {
	return this.addMethod;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.get_Constructor = function () {
	return this.constructor;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.get_KnownDataContracts = function () {
	if (!(this.isKnownTypeAttributeChecked || ($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_UnderlyingType.call(this) === null))) {
		System.Threading.Monitor.Enter(this);
		try {
			if (!this.isKnownTypeAttributeChecked) {
				this.knownDataContracts = $asm09.System.Runtime.Serialization.DataContract.ImportKnownTypeAttributes$0($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_UnderlyingType.call(this));
				System.Threading.Thread.MemoryBarrier();
				this.isKnownTypeAttributeChecked = true;
			}
		} finally {
			System.Threading.Monitor.Exit(this);
		}
	}
	return this.knownDataContracts;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.set_KnownDataContracts = function (value) {
	this.knownDataContracts = value;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.get_InvalidCollectionInSharedContractMessage = function () {
	return this.invalidCollectionInSharedContractMessage;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.get_ItemNameSetExplicit = function () {
	return this.itemNameSetExplicit;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.get_XmlFormatWriterDelegate = function () {
	return this.xmlFormatWriterDelegate;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.set_XmlFormatWriterDelegate = function (value) {
	this.xmlFormatWriterDelegate = value;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.get_XmlFormatReaderDelegate = function () {
	return this.xmlFormatReaderDelegate;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.set_XmlFormatReaderDelegate = function (value) {
	this.xmlFormatReaderDelegate = value;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.get_XmlFormatGetOnlyCollectionReaderDelegate = function () {
	return this.xmlFormatGetOnlyCollectionReaderDelegate;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.set_XmlFormatGetOnlyCollectionReaderDelegate = function (value) {
	this.xmlFormatGetOnlyCollectionReaderDelegate = value;
};
JSIL.OverloadedMethod($asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype, "_ctor", [
		["_ctor$0", [System.Type]], 
		["_ctor$1", [System.Type, $asm09.System.Runtime.Serialization.CollectionKind, System.Type, System.Reflection.MethodInfo, System.Reflection.MethodInfo, System.Reflection.ConstructorInfo]], 
		["_ctor$2", [System.Type, $asm09.System.Runtime.Serialization.CollectionKind, System.Type, System.Reflection.MethodInfo, System.Reflection.MethodInfo, System.Reflection.ConstructorInfo, System.Boolean]], 
		["_ctor$3", [System.Type, System.String]]
	]);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper, "KnownInterfaces", 
	$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.get_KnownInterfaces, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype, "Kind", 
	$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.get_Kind, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype, "ItemType", 
	$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.get_ItemType, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype, "ItemContract", 
	$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.get_ItemContract, $asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.set_ItemContract);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype, "SharedTypeContract", 
	$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.get_SharedTypeContract, $asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.set_SharedTypeContract);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype, "ItemName", 
	$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.get_ItemName, $asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.set_ItemName);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype, "IsConstructorCheckRequired", 
	$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.get_IsConstructorCheckRequired, $asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.set_IsConstructorCheckRequired);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype, "CollectionItemName", 
	$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.get_CollectionItemName, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype, "KeyName", 
	$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.get_KeyName, $asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.set_KeyName);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype, "ValueName", 
	$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.get_ValueName, $asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.set_ValueName);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype, "IsDictionary", 
	$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.get_IsDictionary, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype, "ChildElementNamespace", 
	$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.get_ChildElementNamespace, $asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.set_ChildElementNamespace);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype, "GetEnumeratorMethod", 
	$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.get_GetEnumeratorMethod, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype, "AddMethod", 
	$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.get_AddMethod, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype, "Constructor", 
	$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.get_Constructor, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype, "KnownDataContracts", 
	$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.get_KnownDataContracts, $asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.set_KnownDataContracts);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype, "InvalidCollectionInSharedContractMessage", 
	$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.get_InvalidCollectionInSharedContractMessage, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype, "ItemNameSetExplicit", 
	$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.get_ItemNameSetExplicit, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype, "XmlFormatWriterDelegate", 
	$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.get_XmlFormatWriterDelegate, $asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.set_XmlFormatWriterDelegate);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype, "XmlFormatReaderDelegate", 
	$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.get_XmlFormatReaderDelegate, $asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.set_XmlFormatReaderDelegate);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype, "XmlFormatGetOnlyCollectionReaderDelegate", 
	$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.get_XmlFormatGetOnlyCollectionReaderDelegate, $asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.set_XmlFormatGetOnlyCollectionReaderDelegate);
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper._knownInterfaces = null;
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.itemType = null;
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.kind = 0;
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.getEnumeratorMethod = null;
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.addMethod = null;
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.constructor = null;
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.itemContract = null;
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.sharedTypeContract = null;
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.knownDataContracts = null;
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.isKnownTypeAttributeChecked = false;
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.itemName = null;
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.itemNameSetExplicit = false;
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.collectionItemName = null;
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.keyName = null;
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.valueName = null;
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.childElementNamespace = null;
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.invalidCollectionInSharedContractMessage = null;
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.xmlFormatReaderDelegate = null;
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.xmlFormatGetOnlyCollectionReaderDelegate = null;
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.xmlFormatWriterDelegate = null;
$asm09.System.Runtime.Serialization.CollectionDataContract.CollectionDataContractCriticalHelper.prototype.isConstructorCheckRequired = false;

$asm09.System.Runtime.Serialization.CollectionDataContract.DictionaryEnumerator.prototype._ctor = function (enumerator) {
	System.Object.prototype._ctor.call(this);
	this.enumerator = enumerator;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.DictionaryEnumerator.prototype.Dispose = function () {
	System.GC.SuppressFinalize(this);
};
$asm09.System.Runtime.Serialization.CollectionDataContract.DictionaryEnumerator.prototype.MoveNext = function () {
	return this.enumerator.IEnumerator_MoveNext();
};
$asm09.System.Runtime.Serialization.CollectionDataContract.DictionaryEnumerator.prototype.get_Current = function () {
	return new ($asm09.System.Runtime.Serialization.KeyValue$b2.Of(System.Object, System.Object)) (this.enumerator.IDictionaryEnumerator_Key, this.enumerator.IDictionaryEnumerator_Value);
};
$asm09.System.Runtime.Serialization.CollectionDataContract.DictionaryEnumerator.prototype.IEnumerator_get_Current = function () {
	return this.Current;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.DictionaryEnumerator.prototype.Reset = function () {
	this.enumerator.IEnumerator_Reset();
};
JSIL.MakeProperty($asm09.System.Runtime.Serialization.CollectionDataContract.DictionaryEnumerator.prototype, "Current", 
	$asm09.System.Runtime.Serialization.CollectionDataContract.DictionaryEnumerator.prototype.get_Current, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.CollectionDataContract.DictionaryEnumerator.prototype, "IEnumerator_Current", 
	$asm09.System.Runtime.Serialization.CollectionDataContract.DictionaryEnumerator.prototype.IEnumerator_get_Current, null);
$asm09.System.Runtime.Serialization.CollectionDataContract.DictionaryEnumerator.prototype.enumerator = null;

$asm09.System.Runtime.Serialization.CollectionDataContract.GenericDictionaryEnumerator$b2.prototype._ctor = function (enumerator) {
	System.Object.prototype._ctor.call(this);
	this.enumerator = enumerator;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.GenericDictionaryEnumerator$b2.prototype.Dispose = function () {
	System.GC.SuppressFinalize(this);
};
$asm09.System.Runtime.Serialization.CollectionDataContract.GenericDictionaryEnumerator$b2.prototype.MoveNext = function () {
	return this.enumerator.IEnumerator_MoveNext();
};
$asm09.System.Runtime.Serialization.CollectionDataContract.GenericDictionaryEnumerator$b2.prototype.get_Current = function () {
	var current = this.enumerator.IEnumerator$b1_Current.MemberwiseClone();
	return new ($asm09.System.Runtime.Serialization.KeyValue$b2.Of(this.K, this.V)) (current.Key, current.Value);
};
$asm09.System.Runtime.Serialization.CollectionDataContract.GenericDictionaryEnumerator$b2.prototype.IEnumerator_get_Current = function () {
	return this.Current;
};
$asm09.System.Runtime.Serialization.CollectionDataContract.GenericDictionaryEnumerator$b2.prototype.Reset = function () {
	this.enumerator.IEnumerator_Reset();
};
JSIL.MakeProperty($asm09.System.Runtime.Serialization.CollectionDataContract.GenericDictionaryEnumerator$b2.prototype, "Current", 
	$asm09.System.Runtime.Serialization.CollectionDataContract.GenericDictionaryEnumerator$b2.prototype.get_Current, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.CollectionDataContract.GenericDictionaryEnumerator$b2.prototype, "IEnumerator_Current", 
	$asm09.System.Runtime.Serialization.CollectionDataContract.GenericDictionaryEnumerator$b2.prototype.IEnumerator_get_Current, null);
$asm09.System.Runtime.Serialization.CollectionDataContract.GenericDictionaryEnumerator$b2.prototype.enumerator = null;

$asm09.System.Runtime.Serialization.GenericNameProvider.prototype._ctor$0 = function (type) {
	this._ctor$1($asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(type.GetGenericTypeDefinition()), type.GetGenericArguments());
};
$asm09.System.Runtime.Serialization.GenericNameProvider.prototype._ctor$1 = function (genericTypeName, genericParams) {
	var typeName = new JSIL.Variable(null), text = new JSIL.Variable(null);
	System.Object.prototype._ctor.call(this);
	this.genericTypeName = genericTypeName;
	this.genericParams = JSIL.Array.New(System.Object, genericParams.length);
	genericParams.CopyTo(this.genericParams, 0);
	$asm09.System.Runtime.Serialization.DataContract.GetClrNameAndNamespace(genericTypeName, /* ref */ typeName, /* ref */ text);
	this.nestedParamCounts = $asm09.System.Runtime.Serialization.DataContract.GetDataContractNameForGenericName(typeName.value, null);
};
$asm09.System.Runtime.Serialization.GenericNameProvider.prototype.GetParameterCount = function () {
	return this.genericParams.length;
};
$asm09.System.Runtime.Serialization.GenericNameProvider.prototype.GetNestedParameterCounts = function () {
	return this.nestedParamCounts;
};
$asm09.System.Runtime.Serialization.GenericNameProvider.prototype.GetParameterName = function (paramIndex) {
	return this.GetStableName(paramIndex).Name;
};
$asm09.System.Runtime.Serialization.GenericNameProvider.prototype.GetNamespaces = function () {
	var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
__loop0__: 
	for (var i = 0; i < this.GetParameterCount(); ++i) {
		(stringBuilder.Append$2(" ")).Append$2(this.GetStableName(i).Namespace);
	}
	return stringBuilder.toString();
};
$asm09.System.Runtime.Serialization.GenericNameProvider.prototype.GetGenericTypeName = function () {
	return this.genericTypeName;
};
$asm09.System.Runtime.Serialization.GenericNameProvider.prototype.get_ParametersFromBuiltInNamespaces = function () {
	var flag = true;
__loop0__: 
	for (var num = 0; !((num >= this.GetParameterCount()) || !flag); ++num) {
		flag = $asm09.System.Runtime.Serialization.DataContract.IsBuiltInNamespace(this.GetStableName(num).Namespace);
	}
	return flag;
};
$asm09.System.Runtime.Serialization.GenericNameProvider.prototype.GetStableName = function (i) {
	var obj = this.genericParams[i];
	var xmlQualifiedName = JSIL.TryCast(obj, System.Xml.XmlQualifiedName);
	if (System.Xml.XmlQualifiedName.op_Equality(xmlQualifiedName, null)) {
		var type = JSIL.TryCast(obj, System.Type);
		if (type !== null) {
			xmlQualifiedName = (this.genericParams[i] = $asm09.System.Runtime.Serialization.DataContract.GetStableName$0(type));
		} else {
			xmlQualifiedName = (this.genericParams[i] = JSIL.Cast(obj, $asm09.System.Runtime.Serialization.DataContract).StableName);
		}
	}
	return xmlQualifiedName;
};
JSIL.OverloadedMethod($asm09.System.Runtime.Serialization.GenericNameProvider.prototype, "_ctor", [
		["_ctor$0", [System.Type]], 
		["_ctor$1", [System.String, System.Array.Of(System.Object)]]
	]);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.GenericNameProvider.prototype, "ParametersFromBuiltInNamespaces", 
	$asm09.System.Runtime.Serialization.GenericNameProvider.prototype.get_ParametersFromBuiltInNamespaces, null);
$asm09.System.Runtime.Serialization.GenericNameProvider.prototype.genericTypeName = null;
$asm09.System.Runtime.Serialization.GenericNameProvider.prototype.genericParams = null;
$asm09.System.Runtime.Serialization.GenericNameProvider.prototype.nestedParamCounts = null;

$asm09.System.Runtime.Serialization.TypeHandleRefEqualityComparer.prototype.Equals = function (x, y) {
	return x.Value.Equals$1(y.Value.MemberwiseClone());
};
$asm09.System.Runtime.Serialization.TypeHandleRefEqualityComparer.prototype.GetHashCode = function (obj) {
	return obj.Value.GetHashCode();
};
$asm09.System.Runtime.Serialization.TypeHandleRefEqualityComparer.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};

$asm09.System.Runtime.Serialization.TypeHandleRef.prototype._ctor$0 = function () {
	System.Object.prototype._ctor.call(this);
};
$asm09.System.Runtime.Serialization.TypeHandleRef.prototype._ctor$1 = function (value) {
	System.Object.prototype._ctor.call(this);
	this.value = value;
};
$asm09.System.Runtime.Serialization.TypeHandleRef.prototype.get_Value = function () {
	return this.value;
};
$asm09.System.Runtime.Serialization.TypeHandleRef.prototype.set_Value = function (value) {
	this.value = value;
};
JSIL.OverloadedMethod(System.Runtime.Serialization.TypeHandleRef.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.RuntimeTypeHandle]]
	]);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.TypeHandleRef.prototype, "Value", 
	$asm09.System.Runtime.Serialization.TypeHandleRef.prototype.get_Value, $asm09.System.Runtime.Serialization.TypeHandleRef.prototype.set_Value);

$asm09.System.Runtime.Serialization.IntRef.prototype._ctor = function (value) {
	System.Object.prototype._ctor.call(this);
	this.value = value;
};
$asm09.System.Runtime.Serialization.IntRef.prototype.get_Value = function () {
	return this.value;
};
JSIL.MakeProperty($asm09.System.Runtime.Serialization.IntRef.prototype, "Value", 
	$asm09.System.Runtime.Serialization.IntRef.prototype.get_Value, null);
$asm09.System.Runtime.Serialization.IntRef.prototype.value = 0;

$asm09.System.Runtime.Serialization.DataContractSet.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm09.System.Runtime.Serialization.DataContractSet.IsTypeReferenceable = function (type) {
	var type2 = new JSIL.Variable(null);
	return (type.IsEnum || 
		type.IsDefined(System.Runtime.Serialization.Globals.TypeOfDataContractAttribute, false) || 
		(System.Runtime.Serialization.Globals.TypeOfIXmlSerializable.IsAssignableFrom(type) && 
			!type.IsGenericTypeDefinition) || 
		$asm09.System.Runtime.Serialization.CollectionDataContract.IsCollection$1(type, /* ref */ type2) || $asm09.System.Runtime.Serialization.ClassDataContract.IsNonAttributedTypeValidForSerialization(type));
};

$asm09.System.Runtime.Serialization.DateTimeOffsetAdapter.prototype._ctor = function (dateTime, offsetMinutes) {
	this.utcDateTime = dateTime;
	this.offsetMinutes = offsetMinutes;
};
$asm09.System.Runtime.Serialization.DateTimeOffsetAdapter.prototype.get_UtcDateTime = function () {
	return this.utcDateTime;
};
$asm09.System.Runtime.Serialization.DateTimeOffsetAdapter.prototype.set_UtcDateTime = function (value) {
	this.utcDateTime = value;
};
$asm09.System.Runtime.Serialization.DateTimeOffsetAdapter.prototype.get_OffsetMinutes = function () {
	return this.offsetMinutes;
};
$asm09.System.Runtime.Serialization.DateTimeOffsetAdapter.prototype.set_OffsetMinutes = function (value) {
	this.offsetMinutes = value;
};
$asm09.System.Runtime.Serialization.DateTimeOffsetAdapter.GetDateTimeOffset = function (value) {
	var dateTimeOffset = new System.DateTimeOffset();
	try {
		var kind = value.UtcDateTime.Kind;
		if (kind === System.DateTimeKind.Unspecified) {
			var result = JSIL.New(System.DateTimeOffset, "_ctor$2", [value.UtcDateTime, JSIL.New(System.TimeSpan, "_ctor$1", [0, value.OffsetMinutes, 0])]);
		} else {
			dateTimeOffset._ctor$1(value.UtcDateTime.MemberwiseClone());
			result = dateTimeOffset.ToOffset(JSIL.New(System.TimeSpan, "_ctor$1", [0, value.OffsetMinutes, 0])).MemberwiseClone();
		}
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.ArgumentException)) {
			var arg_59_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$1(value.ToString(System.Globalization.CultureInfo.InvariantCulture), "DateTimeOffset", arg_59_0));
		} else {
			throw $exception;
		}
	}
	return result;
};
$asm09.System.Runtime.Serialization.DateTimeOffsetAdapter.GetDateTimeOffsetAdapter = function (value) {
	return new $asm09.System.Runtime.Serialization.DateTimeOffsetAdapter(value.UtcDateTime, Math.floor(value.Offset.TotalMinutes));
};
$asm09.System.Runtime.Serialization.DateTimeOffsetAdapter.prototype.ToString = function (provider) {
	return JSIL.ConcatString.apply(null, ["DateTime: ", this.UtcDateTime, ", Offset: ", this.OffsetMinutes]);
};
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DateTimeOffsetAdapter.prototype, "UtcDateTime", 
	$asm09.System.Runtime.Serialization.DateTimeOffsetAdapter.prototype.get_UtcDateTime, $asm09.System.Runtime.Serialization.DateTimeOffsetAdapter.prototype.set_UtcDateTime);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DateTimeOffsetAdapter.prototype, "OffsetMinutes", 
	$asm09.System.Runtime.Serialization.DateTimeOffsetAdapter.prototype.get_OffsetMinutes, $asm09.System.Runtime.Serialization.DateTimeOffsetAdapter.prototype.set_OffsetMinutes);
$asm09.System.Runtime.Serialization.DateTimeOffsetAdapter.prototype.offsetMinutes = 0;

$asm09.System.Runtime.Serialization.Fx.Assert$0 = function (condition, message) {
};
$asm09.System.Runtime.Serialization.Fx.Assert$1 = function (message) {
};
JSIL.OverloadedMethod($asm09.System.Runtime.Serialization.Fx, "Assert", [
		["Assert$0", [System.Boolean, System.String]], 
		["Assert$1", [System.String]]
	]);

$asm09.System.Runtime.Serialization.DiagnosticUtility.DebugAssert$0 = function (message) {
};
$asm09.System.Runtime.Serialization.DiagnosticUtility.DebugAssert$1 = function (condition, message) {
};
$asm09.System.Runtime.Serialization.DiagnosticUtility.IsFatal = function (exception) {
__loop0__: 
	while (exception) {
		if (!((JSIL.TryCast(exception, System.OutOfMemoryException) === null) && (JSIL.TryCast(exception, System.AccessViolationException) === null))) {
			return true;
		}
		if (JSIL.TryCast(exception, System.TypeInitializationException) === null) {
			break __loop0__;
		}
		exception = exception.InnerException;
	}
	return false;
};
$asm09.System.Runtime.Serialization.DiagnosticUtility.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
JSIL.OverloadedMethod($asm09.System.Runtime.Serialization.DiagnosticUtility, "DebugAssert", [
		["DebugAssert$0", [System.String]], 
		["DebugAssert$1", [System.Boolean, System.String]]
	]);

$asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull = function (message) {
	return JSIL.New(System.ArgumentNullException, "_ctor$1", [message]);
};
$asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError = function (e) {
	return e;
};
$asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperArgument$0 = function (message) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [message]);
};
$asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperArgument$1 = function (paramName, message) {
	return JSIL.New(System.ArgumentException, "_ctor$4", [message, paramName]);
};
$asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperFatal = function (message, innerException) {
	return $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(new System.Exception(message, innerException));
};
$asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperCallback = function (e) {
	return $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(e);
};
JSIL.OverloadedMethod($asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility, "ThrowHelperArgument", [
		["ThrowHelperArgument$0", [System.String]], 
		["ThrowHelperArgument$1", [System.String, System.String]]
	]);

$asm09.System.ServiceModel.DiagnosticUtility.prototype._ctor = function () {
	$asm09.System.Runtime.Serialization.DiagnosticUtility.prototype._ctor.call(this);
};

$asm09.System.Runtime.Serialization.DictionaryGlobals.EmptyString = null;
$asm09.System.Runtime.Serialization.DictionaryGlobals.SchemaInstanceNamespace = null;
$asm09.System.Runtime.Serialization.DictionaryGlobals.SchemaNamespace = null;
$asm09.System.Runtime.Serialization.DictionaryGlobals.SerializationNamespace = null;
$asm09.System.Runtime.Serialization.DictionaryGlobals.XmlnsNamespace = null;
$asm09.System.Runtime.Serialization.DictionaryGlobals.XsiTypeLocalName = null;
$asm09.System.Runtime.Serialization.DictionaryGlobals.XsiNilLocalName = null;
$asm09.System.Runtime.Serialization.DictionaryGlobals.ClrTypeLocalName = null;
$asm09.System.Runtime.Serialization.DictionaryGlobals.ClrAssemblyLocalName = null;
$asm09.System.Runtime.Serialization.DictionaryGlobals.ArraySizeLocalName = null;
$asm09.System.Runtime.Serialization.DictionaryGlobals.IdLocalName = null;
$asm09.System.Runtime.Serialization.DictionaryGlobals.RefLocalName = null;
$asm09.System.Runtime.Serialization.DictionaryGlobals.CharLocalName = null;
$asm09.System.Runtime.Serialization.DictionaryGlobals.BooleanLocalName = null;
$asm09.System.Runtime.Serialization.DictionaryGlobals.SignedByteLocalName = null;
$asm09.System.Runtime.Serialization.DictionaryGlobals.UnsignedByteLocalName = null;
$asm09.System.Runtime.Serialization.DictionaryGlobals.ShortLocalName = null;
$asm09.System.Runtime.Serialization.DictionaryGlobals.UnsignedShortLocalName = null;
$asm09.System.Runtime.Serialization.DictionaryGlobals.IntLocalName = null;
$asm09.System.Runtime.Serialization.DictionaryGlobals.UnsignedIntLocalName = null;
$asm09.System.Runtime.Serialization.DictionaryGlobals.LongLocalName = null;
$asm09.System.Runtime.Serialization.DictionaryGlobals.UnsignedLongLocalName = null;
$asm09.System.Runtime.Serialization.DictionaryGlobals.FloatLocalName = null;
$asm09.System.Runtime.Serialization.DictionaryGlobals.DoubleLocalName = null;
$asm09.System.Runtime.Serialization.DictionaryGlobals.DecimalLocalName = null;
$asm09.System.Runtime.Serialization.DictionaryGlobals.DateTimeLocalName = null;
$asm09.System.Runtime.Serialization.DictionaryGlobals.StringLocalName = null;
$asm09.System.Runtime.Serialization.DictionaryGlobals.ByteArrayLocalName = null;
$asm09.System.Runtime.Serialization.DictionaryGlobals.ObjectLocalName = null;
$asm09.System.Runtime.Serialization.DictionaryGlobals.TimeSpanLocalName = null;
$asm09.System.Runtime.Serialization.DictionaryGlobals.GuidLocalName = null;
$asm09.System.Runtime.Serialization.DictionaryGlobals.UriLocalName = null;
$asm09.System.Runtime.Serialization.DictionaryGlobals.QNameLocalName = null;
$asm09.System.Runtime.Serialization.DictionaryGlobals.Space = null;
$asm09.System.Runtime.Serialization.DictionaryGlobals.hexBinaryLocalName = null;
$asm09.System.Runtime.Serialization.DictionaryGlobals._cctor = function () {
	var xmlDictionary = JSIL.New(System.Xml.XmlDictionary, "_ctor$1", [61]);
	try {
		$asm09.System.Runtime.Serialization.DictionaryGlobals.SchemaInstanceNamespace = xmlDictionary.Add("http://www.w3.org/2001/XMLSchema-instance");
		$asm09.System.Runtime.Serialization.DictionaryGlobals.SerializationNamespace = xmlDictionary.Add("http://schemas.microsoft.com/2003/10/Serialization/");
		$asm09.System.Runtime.Serialization.DictionaryGlobals.SchemaNamespace = xmlDictionary.Add("http://www.w3.org/2001/XMLSchema");
		$asm09.System.Runtime.Serialization.DictionaryGlobals.XsiTypeLocalName = xmlDictionary.Add("type");
		$asm09.System.Runtime.Serialization.DictionaryGlobals.XsiNilLocalName = xmlDictionary.Add("nil");
		$asm09.System.Runtime.Serialization.DictionaryGlobals.IdLocalName = xmlDictionary.Add("Id");
		$asm09.System.Runtime.Serialization.DictionaryGlobals.RefLocalName = xmlDictionary.Add("Ref");
		$asm09.System.Runtime.Serialization.DictionaryGlobals.ArraySizeLocalName = xmlDictionary.Add("Size");
		$asm09.System.Runtime.Serialization.DictionaryGlobals.EmptyString = xmlDictionary.Add(System.String.Empty);
		$asm09.System.Runtime.Serialization.DictionaryGlobals.XmlnsNamespace = xmlDictionary.Add("http://www.w3.org/2000/xmlns/");
		$asm09.System.Runtime.Serialization.DictionaryGlobals.CharLocalName = xmlDictionary.Add("char");
		$asm09.System.Runtime.Serialization.DictionaryGlobals.BooleanLocalName = xmlDictionary.Add("boolean");
		$asm09.System.Runtime.Serialization.DictionaryGlobals.SignedByteLocalName = xmlDictionary.Add("byte");
		$asm09.System.Runtime.Serialization.DictionaryGlobals.UnsignedByteLocalName = xmlDictionary.Add("unsignedByte");
		$asm09.System.Runtime.Serialization.DictionaryGlobals.ShortLocalName = xmlDictionary.Add("short");
		$asm09.System.Runtime.Serialization.DictionaryGlobals.UnsignedShortLocalName = xmlDictionary.Add("unsignedShort");
		$asm09.System.Runtime.Serialization.DictionaryGlobals.IntLocalName = xmlDictionary.Add("int");
		$asm09.System.Runtime.Serialization.DictionaryGlobals.UnsignedIntLocalName = xmlDictionary.Add("unsignedInt");
		$asm09.System.Runtime.Serialization.DictionaryGlobals.LongLocalName = xmlDictionary.Add("long");
		$asm09.System.Runtime.Serialization.DictionaryGlobals.UnsignedLongLocalName = xmlDictionary.Add("unsignedLong");
		$asm09.System.Runtime.Serialization.DictionaryGlobals.FloatLocalName = xmlDictionary.Add("float");
		$asm09.System.Runtime.Serialization.DictionaryGlobals.DoubleLocalName = xmlDictionary.Add("double");
		$asm09.System.Runtime.Serialization.DictionaryGlobals.DecimalLocalName = xmlDictionary.Add("decimal");
		$asm09.System.Runtime.Serialization.DictionaryGlobals.DateTimeLocalName = xmlDictionary.Add("dateTime");
		$asm09.System.Runtime.Serialization.DictionaryGlobals.StringLocalName = xmlDictionary.Add("string");
		$asm09.System.Runtime.Serialization.DictionaryGlobals.ByteArrayLocalName = xmlDictionary.Add("base64Binary");
		$asm09.System.Runtime.Serialization.DictionaryGlobals.ObjectLocalName = xmlDictionary.Add("anyType");
		$asm09.System.Runtime.Serialization.DictionaryGlobals.TimeSpanLocalName = xmlDictionary.Add("duration");
		$asm09.System.Runtime.Serialization.DictionaryGlobals.GuidLocalName = xmlDictionary.Add("guid");
		$asm09.System.Runtime.Serialization.DictionaryGlobals.UriLocalName = xmlDictionary.Add("anyURI");
		$asm09.System.Runtime.Serialization.DictionaryGlobals.QNameLocalName = xmlDictionary.Add("QName");
		$asm09.System.Runtime.Serialization.DictionaryGlobals.ClrTypeLocalName = xmlDictionary.Add("Type");
		$asm09.System.Runtime.Serialization.DictionaryGlobals.ClrAssemblyLocalName = xmlDictionary.Add("Assembly");
		$asm09.System.Runtime.Serialization.DictionaryGlobals.Space = xmlDictionary.Add(" ");
		$asm09.System.Runtime.Serialization.DictionaryGlobals.hexBinaryLocalName = xmlDictionary.Add("hexBinary");
	} catch ($exception) {
		var exception = $exception;
		if ($asm09.System.Runtime.Serialization.DiagnosticUtility.IsFatal(exception)) {
			throw $exception;
		}
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperFatal(exception.Message, exception);
	}
};

System.Runtime.Serialization.XmlObjectSerializer.prototype.WriteObject$0 = function (stream, graph) {
	System.Runtime.Serialization.XmlObjectSerializer.CheckNull(stream, "stream");
	var xmlDictionaryWriter = System.Xml.XmlDictionaryWriter.CreateTextWriter$2(stream, System.Text.Encoding.UTF8, false);
	this.WriteObject$2(xmlDictionaryWriter, graph);
	xmlDictionaryWriter.Flush();
};
System.Runtime.Serialization.XmlObjectSerializer.prototype.WriteObject$1 = function (writer, graph) {
	System.Runtime.Serialization.XmlObjectSerializer.CheckNull(writer, "writer");
	this.WriteObject$2(System.Xml.XmlDictionaryWriter.CreateDictionaryWriter(writer), graph);
};
System.Runtime.Serialization.XmlObjectSerializer.prototype.WriteStartObject$1 = function (writer, graph) {
	System.Runtime.Serialization.XmlObjectSerializer.CheckNull(writer, "writer");
	this.WriteStartObject$0(System.Xml.XmlDictionaryWriter.CreateDictionaryWriter(writer), graph);
};
System.Runtime.Serialization.XmlObjectSerializer.prototype.WriteObjectContent$1 = function (writer, graph) {
	System.Runtime.Serialization.XmlObjectSerializer.CheckNull(writer, "writer");
	this.WriteObjectContent$0(System.Xml.XmlDictionaryWriter.CreateDictionaryWriter(writer), graph);
};
System.Runtime.Serialization.XmlObjectSerializer.prototype.WriteEndObject$1 = function (writer) {
	System.Runtime.Serialization.XmlObjectSerializer.CheckNull(writer, "writer");
	this.WriteEndObject$0(System.Xml.XmlDictionaryWriter.CreateDictionaryWriter(writer));
};
System.Runtime.Serialization.XmlObjectSerializer.prototype.WriteObject$2 = function (writer, graph) {
	this.WriteObjectHandleExceptions(new $asm09.System.Runtime.Serialization.XmlWriterDelegator(writer), graph);
};
System.Runtime.Serialization.XmlObjectSerializer.prototype.WriteObjectHandleExceptions = function (writer, graph) {
	try {
		System.Runtime.Serialization.XmlObjectSerializer.CheckNull(writer, "writer");
		this.InternalWriteObject(writer, graph);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.Xml.XmlException)) {
			var innerException = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$1(System.Runtime.Serialization.XmlObjectSerializer.GetTypeInfoError("ErrorSerializing", this.GetSerializeType(graph), innerException), innerException));
		} else if (JSIL.CheckType($exception, System.FormatException)) {
			var innerException2 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$1(System.Runtime.Serialization.XmlObjectSerializer.GetTypeInfoError("ErrorSerializing", this.GetSerializeType(graph), innerException2), innerException2));
		} else {
			throw $exception;
		}
	}
};
System.Runtime.Serialization.XmlObjectSerializer.prototype.get_KnownDataContracts = function () {
	return null;
};
System.Runtime.Serialization.XmlObjectSerializer.prototype.InternalWriteObject = function (writer, graph) {
	this.WriteStartObject$1(writer.Writer, graph);
	this.WriteObjectContent$1(writer.Writer, graph);
	this.WriteEndObject$1(writer.Writer);
};
System.Runtime.Serialization.XmlObjectSerializer.prototype.InternalWriteStartObject = function (writer, graph) {
	throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.NotSupportedException, "_ctor$0", []));
};
System.Runtime.Serialization.XmlObjectSerializer.prototype.InternalWriteObjectContent = function (writer, graph) {
	throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.NotSupportedException, "_ctor$0", []));
};
System.Runtime.Serialization.XmlObjectSerializer.prototype.InternalWriteEndObject = function (writer) {
	throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.NotSupportedException, "_ctor$0", []));
};
System.Runtime.Serialization.XmlObjectSerializer.prototype.WriteStartObjectHandleExceptions = function (writer, graph) {
	try {
		System.Runtime.Serialization.XmlObjectSerializer.CheckNull(writer, "writer");
		this.InternalWriteStartObject(writer, graph);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.Xml.XmlException)) {
			var innerException = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$1(System.Runtime.Serialization.XmlObjectSerializer.GetTypeInfoError("ErrorWriteStartObject", this.GetSerializeType(graph), innerException), innerException));
		} else if (JSIL.CheckType($exception, System.FormatException)) {
			var innerException2 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$1(System.Runtime.Serialization.XmlObjectSerializer.GetTypeInfoError("ErrorWriteStartObject", this.GetSerializeType(graph), innerException2), innerException2));
		} else {
			throw $exception;
		}
	}
};
System.Runtime.Serialization.XmlObjectSerializer.prototype.WriteObjectContentHandleExceptions = function (writer, graph) {
	try {
		System.Runtime.Serialization.XmlObjectSerializer.CheckNull(writer, "writer");
		if (writer.WriteState !== System.Xml.WriteState.Element) {
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0($asm09.System.Runtime.Serialization.SR.GetString$0("XmlWriterMustBeInElement", [writer.WriteState])));
		}
		this.InternalWriteObjectContent(writer, graph);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.Xml.XmlException)) {
			var innerException = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$1(System.Runtime.Serialization.XmlObjectSerializer.GetTypeInfoError("ErrorSerializing", this.GetSerializeType(graph), innerException), innerException));
		} else if (JSIL.CheckType($exception, System.FormatException)) {
			var innerException2 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$1(System.Runtime.Serialization.XmlObjectSerializer.GetTypeInfoError("ErrorSerializing", this.GetSerializeType(graph), innerException2), innerException2));
		} else {
			throw $exception;
		}
	}
};
System.Runtime.Serialization.XmlObjectSerializer.prototype.WriteEndObjectHandleExceptions = function (writer) {
	try {
		System.Runtime.Serialization.XmlObjectSerializer.CheckNull(writer, "writer");
		this.InternalWriteEndObject(writer);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.Xml.XmlException)) {
			var innerException = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$1(System.Runtime.Serialization.XmlObjectSerializer.GetTypeInfoError("ErrorWriteEndObject", null, innerException), innerException));
		} else if (JSIL.CheckType($exception, System.FormatException)) {
			var innerException2 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$1(System.Runtime.Serialization.XmlObjectSerializer.GetTypeInfoError("ErrorWriteEndObject", null, innerException2), innerException2));
		} else {
			throw $exception;
		}
	}
};
System.Runtime.Serialization.XmlObjectSerializer.prototype.WriteRootElement = function (writer, contract, name, ns, needsContractNsAtRoot) {
	if (name !== null) {
		contract.WriteRootElement(writer, name, ns);
		if (needsContractNsAtRoot) {
			writer.WriteNamespaceDecl(contract.Namespace);
		}
		return;
	}
	if (!contract.HasRoot) {
		return;
	}
	contract.WriteRootElement(writer, contract.TopLevelElementName, contract.TopLevelElementNamespace);
};
System.Runtime.Serialization.XmlObjectSerializer.prototype.CheckIfNeedsContractNsAtRoot = function (name, ns, contract) {
	if (name === null) {
		return false;
	}
	if (!(!contract.IsBuiltInDataContract && contract.CanContainReferences)) {
		return false;
	}
	var string = System.Xml.XmlDictionaryString.GetString(contract.Namespace);
	return (!System.String.IsNullOrEmpty(string) && !(string == System.Xml.XmlDictionaryString.GetString(ns)));
};
System.Runtime.Serialization.XmlObjectSerializer.WriteNull = function (writer) {
	writer.WriteAttributeBool("i", $asm09.System.Runtime.Serialization.DictionaryGlobals.XsiNilLocalName, $asm09.System.Runtime.Serialization.DictionaryGlobals.SchemaInstanceNamespace, true);
};
System.Runtime.Serialization.XmlObjectSerializer.WriteTypeInfo = function (writer, contract, declaredContract) {
	if (!((System.Object.ReferenceEquals(contract.Name, declaredContract.Name) && 
				System.Object.ReferenceEquals(contract.Namespace, declaredContract.Namespace)) || ((contract.Name.Value == declaredContract.Name.Value) && 
				(contract.Namespace.Value == declaredContract.Namespace.Value)))) {
		writer.WriteAttributeQualifiedName$1(
			"i", 
			$asm09.System.Runtime.Serialization.DictionaryGlobals.XsiTypeLocalName, 
			$asm09.System.Runtime.Serialization.DictionaryGlobals.SchemaInstanceNamespace, 
			contract.Name, 
			contract.Namespace
		);
		return true;
	}
	return false;
};
System.Runtime.Serialization.XmlObjectSerializer.prototype.ReadObject$0 = function (stream) {
	System.Runtime.Serialization.XmlObjectSerializer.CheckNull(stream, "stream");
	return this.ReadObject$2(System.Xml.XmlDictionaryReader.CreateTextReader$2(stream, System.Xml.XmlDictionaryReaderQuotas.Max));
};
System.Runtime.Serialization.XmlObjectSerializer.prototype.ReadObject$1 = function (reader) {
	System.Runtime.Serialization.XmlObjectSerializer.CheckNull(reader, "reader");
	return this.ReadObject$2(System.Xml.XmlDictionaryReader.CreateDictionaryReader(reader));
};
System.Runtime.Serialization.XmlObjectSerializer.prototype.ReadObject$2 = function (reader) {
	return this.ReadObjectHandleExceptions(new $asm09.System.Runtime.Serialization.XmlReaderDelegator(reader), true);
};
System.Runtime.Serialization.XmlObjectSerializer.prototype.ReadObject$3 = function (reader, verifyObjectName) {
	System.Runtime.Serialization.XmlObjectSerializer.CheckNull(reader, "reader");
	return this.ReadObject$4(System.Xml.XmlDictionaryReader.CreateDictionaryReader(reader), verifyObjectName);
};
System.Runtime.Serialization.XmlObjectSerializer.prototype.IsStartObject$0 = function (reader) {
	System.Runtime.Serialization.XmlObjectSerializer.CheckNull(reader, "reader");
	return this.IsStartObject$1(System.Xml.XmlDictionaryReader.CreateDictionaryReader(reader));
};
System.Runtime.Serialization.XmlObjectSerializer.prototype.InternalReadObject = function (reader, verifyObjectName) {
	return this.ReadObject$3(reader.UnderlyingReader, verifyObjectName);
};
System.Runtime.Serialization.XmlObjectSerializer.prototype.InternalIsStartObject = function (reader) {
	throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.NotSupportedException, "_ctor$0", []));
};
System.Runtime.Serialization.XmlObjectSerializer.prototype.ReadObjectHandleExceptions = function (reader, verifyObjectName) {
	try {
		System.Runtime.Serialization.XmlObjectSerializer.CheckNull(reader, "reader");
		var result = this.InternalReadObject(reader, verifyObjectName);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.Xml.XmlException)) {
			var innerException = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$1(System.Runtime.Serialization.XmlObjectSerializer.GetTypeInfoError("ErrorDeserializing", this.GetDeserializeType(), innerException), innerException));
		} else if (JSIL.CheckType($exception, System.FormatException)) {
			var innerException2 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$1(System.Runtime.Serialization.XmlObjectSerializer.GetTypeInfoError("ErrorDeserializing", this.GetDeserializeType(), innerException2), innerException2));
		} else {
			throw $exception;
		}
	}
	return result;
};
System.Runtime.Serialization.XmlObjectSerializer.prototype.IsStartObjectHandleExceptions = function (reader) {
	try {
		System.Runtime.Serialization.XmlObjectSerializer.CheckNull(reader, "reader");
		var result = this.InternalIsStartObject(reader);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.Xml.XmlException)) {
			var innerException = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$1(System.Runtime.Serialization.XmlObjectSerializer.GetTypeInfoError("ErrorIsStartObject", this.GetDeserializeType(), innerException), innerException));
		} else if (JSIL.CheckType($exception, System.FormatException)) {
			var innerException2 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$1(System.Runtime.Serialization.XmlObjectSerializer.GetTypeInfoError("ErrorIsStartObject", this.GetDeserializeType(), innerException2), innerException2));
		} else {
			throw $exception;
		}
	}
	return result;
};
System.Runtime.Serialization.XmlObjectSerializer.prototype.IsRootXmlAny = function (rootName, contract) {
	return ((rootName === null) && !contract.HasRoot);
};
System.Runtime.Serialization.XmlObjectSerializer.prototype.IsStartElement = function (reader) {
	return (reader.MoveToElement() || reader.IsStartElement$0());
};
System.Runtime.Serialization.XmlObjectSerializer.prototype.IsRootElement = function (reader, contract, name, ns) {
	reader.MoveToElement();
	if (name !== null) {
		return reader.IsStartElement$2(name, ns);
	}
	if (!contract.HasRoot) {
		return reader.IsStartElement$0();
	}
	if (reader.IsStartElement$2(contract.TopLevelElementName, contract.TopLevelElementNamespace)) {
		return true;
	}
	var classDataContract = JSIL.TryCast(contract, $asm09.System.Runtime.Serialization.ClassDataContract);
	if (classDataContract !== null) {
		classDataContract = classDataContract.BaseContract;
	}
__loop0__: 
	while (classDataContract) {
		if (reader.IsStartElement$2(classDataContract.TopLevelElementName, classDataContract.TopLevelElementNamespace)) {
			return true;
		}
		classDataContract = classDataContract.BaseContract;
	}
	if (classDataContract === null) {
		var primitiveDataContract = $asm09.System.Runtime.Serialization.PrimitiveDataContract.GetPrimitiveDataContract$0(System.Runtime.Serialization.Globals.TypeOfObject);
		if (reader.IsStartElement$2(primitiveDataContract.TopLevelElementName, primitiveDataContract.TopLevelElementNamespace)) {
			return true;
		}
	}
	return false;
};
System.Runtime.Serialization.XmlObjectSerializer.CheckNull = function (obj, name) {
	if (obj === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentNullException, "_ctor$1", [name]));
	}
};
System.Runtime.Serialization.XmlObjectSerializer.TryAddLineInfo = function (reader, errorMessage) {
	if (reader.HasLineInfo()) {
		return System.String.Format(System.Globalization.CultureInfo.InvariantCulture, "{0} {1}", [$asm09.System.Runtime.Serialization.SR.GetString$0("ErrorInLine", [reader.LineNumber, reader.LinePosition]), errorMessage]);
	}
	return errorMessage;
};
System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationExceptionWithReaderDetails = function (errorMessage, reader) {
	return System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0(System.Runtime.Serialization.XmlObjectSerializer.TryAddLineInfo(reader, $asm09.System.Runtime.Serialization.SR.GetString$0("EncounteredWithNameNamespace", [errorMessage, reader.NodeType, reader.LocalName, reader.NamespaceURI])));
};
System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0 = function (errorMessage) {
	return System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$1(errorMessage, null);
};
System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$1 = function (errorMessage, innerException) {
	return JSIL.New(System.Runtime.Serialization.SerializationException, "_ctor$2", [errorMessage, innerException]);
};
System.Runtime.Serialization.XmlObjectSerializer.GetTypeInfoError = function (errorMessage, type, innerException) {
	var text = (type === null) ? System.String.Empty : $asm09.System.Runtime.Serialization.SR.GetString$0("ErrorTypeInfo", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(type)]);
	var text2 = (innerException === null) ? System.String.Empty : innerException.Message;
	return $asm09.System.Runtime.Serialization.SR.GetString$0(errorMessage, [text, text2]);
};
System.Runtime.Serialization.XmlObjectSerializer.prototype.GetSerializeType = function (graph) {
	if (graph !== null) {
		return JSIL.GetType(graph);
	}
	return null;
};
System.Runtime.Serialization.XmlObjectSerializer.prototype.GetDeserializeType = function () {
	return null;
};
System.Runtime.Serialization.XmlObjectSerializer.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlObjectSerializer.prototype, "WriteStartObject", [
		["WriteStartObject$0", [System.Xml.XmlDictionaryWriter, System.Object]], 
		["WriteStartObject$1", [System.Xml.XmlWriter, System.Object]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlObjectSerializer.prototype, "WriteObjectContent", [
		["WriteObjectContent$0", [System.Xml.XmlDictionaryWriter, System.Object]], 
		["WriteObjectContent$1", [System.Xml.XmlWriter, System.Object]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlObjectSerializer.prototype, "WriteEndObject", [
		["WriteEndObject$0", [System.Xml.XmlDictionaryWriter]], 
		["WriteEndObject$1", [System.Xml.XmlWriter]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlObjectSerializer.prototype, "WriteObject", [
		["WriteObject$0", [System.IO.Stream, System.Object]], 
		["WriteObject$1", [System.Xml.XmlWriter, System.Object]], 
		["WriteObject$2", [System.Xml.XmlDictionaryWriter, System.Object]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlObjectSerializer.prototype, "ReadObject", [
		["ReadObject$0", [System.IO.Stream]], 
		["ReadObject$1", [System.Xml.XmlReader]], 
		["ReadObject$2", [System.Xml.XmlDictionaryReader]], 
		["ReadObject$3", [System.Xml.XmlReader, System.Boolean]], 
		["ReadObject$4", [System.Xml.XmlDictionaryReader, System.Boolean]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlObjectSerializer.prototype, "IsStartObject", [
		["IsStartObject$0", [System.Xml.XmlReader]], 
		["IsStartObject$1", [System.Xml.XmlDictionaryReader]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlObjectSerializer, "CreateSerializationException", [
		["CreateSerializationException$0", [System.String]], 
		["CreateSerializationException$1", [System.String, System.Exception]]
	]);
JSIL.MakeProperty(System.Runtime.Serialization.XmlObjectSerializer.prototype, "KnownDataContracts", 
	System.Runtime.Serialization.XmlObjectSerializer.prototype.get_KnownDataContracts, null);

System.Runtime.Serialization.DataContractSerializer.prototype._ctor$0 = function (type) {
	this._ctor$1(type, null);
};
System.Runtime.Serialization.DataContractSerializer.prototype._ctor$1 = function (type, knownTypes) {
	System.Runtime.Serialization.XmlObjectSerializer.prototype._ctor.call(this);
	this.Initialize$0(
		type, 
		knownTypes, 
		2147483647, 
		false, 
		false
	);
};
System.Runtime.Serialization.DataContractSerializer.prototype._ctor$2 = function (type, rootName, rootNamespace) {
	this._ctor$3(type, rootName, rootNamespace, null);
};
System.Runtime.Serialization.DataContractSerializer.prototype._ctor$3 = function (type, rootName, rootNamespace, knownTypes) {
	System.Runtime.Serialization.XmlObjectSerializer.prototype._ctor.call(this);
	this.Initialize$1(
		type, 
		new System.Xml.XmlDictionaryString(null, rootName, 0), 
		new System.Xml.XmlDictionaryString(null, rootNamespace, 0), 
		knownTypes, 
		2147483647, 
		false, 
		false
	);
};
System.Runtime.Serialization.DataContractSerializer.prototype._ctor$4 = function (type, rootName, rootNamespace) {
	this._ctor$5(type, rootName, rootNamespace, null);
};
System.Runtime.Serialization.DataContractSerializer.prototype._ctor$5 = function (type, rootName, rootNamespace, knownTypes) {
	System.Runtime.Serialization.XmlObjectSerializer.prototype._ctor.call(this);
	this.Initialize$1(
		type, 
		rootName, 
		rootNamespace, 
		knownTypes, 
		2147483647, 
		false, 
		false
	);
};
System.Runtime.Serialization.DataContractSerializer.prototype.Initialize$0 = function (type, knownTypes, maxItemsInObjectGraph, ignoreExtensionDataObject, preserveObjectReferences) {
	System.Runtime.Serialization.XmlObjectSerializer.CheckNull(type, "type");
	this.rootType = type;
	if (knownTypes !== null) {
		this.knownTypeList = new (System.Collections.Generic.List$b1.Of(System.Type)) ();
		var enumerator = knownTypes.IEnumerable$b1_GetEnumerator();
		try {
		__loop0__: 
			while (enumerator.IEnumerator_MoveNext()) {
				var current = enumerator.IEnumerator$b1_Current;
				this.knownTypeList.ICollection$b1_Add(current);
			}
		} finally {
			if (enumerator !== null) {
				enumerator.IDisposable_Dispose();
			}
		}
	}
	if (maxItemsInObjectGraph < 0) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["maxItemsInObjectGraph", $asm09.System.Runtime.Serialization.SR.GetString$2("ValueMustBeNonNegative")]));
	}
	this.maxItemsInObjectGraph = maxItemsInObjectGraph;
	this.ignoreExtensionDataObject = ignoreExtensionDataObject;
	this.preserveObjectReferences = preserveObjectReferences;
};
System.Runtime.Serialization.DataContractSerializer.prototype.Initialize$1 = function (type, rootName, rootNamespace, knownTypes, maxItemsInObjectGraph, ignoreExtensionDataObject, preserveObjectReferences) {
	this.Initialize$0(
		type, 
		knownTypes, 
		maxItemsInObjectGraph, 
		ignoreExtensionDataObject, 
		preserveObjectReferences
	);
	this.rootName = rootName;
	this.rootNamespace = rootNamespace;
};
System.Runtime.Serialization.DataContractSerializer.prototype.get_KnownTypes = function () {
	if (this.knownTypeCollection === null) {
		if (this.knownTypeList !== null) {
			this.knownTypeCollection = new (System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(System.Type)) (this.knownTypeList);
		} else {
			this.knownTypeCollection = new (System.Collections.ObjectModel.ReadOnlyCollection$b1.Of(System.Type)) (JSIL.Cast(System.Runtime.Serialization.Globals.EmptyTypeArray, System.Collections.Generic.IList$b1.Of(System.Type)));
		}
	}
	return this.knownTypeCollection;
};
System.Runtime.Serialization.DataContractSerializer.prototype.get_KnownDataContracts = function () {
	if (!(this.knownDataContracts || (this.knownTypeList === null))) {
		this.knownDataContracts = $asm09.System.Runtime.Serialization.XmlObjectSerializerContext.GetDataContractsForKnownTypes(this.knownTypeList);
	}
	return this.knownDataContracts;
};
System.Runtime.Serialization.DataContractSerializer.prototype.get_MaxItemsInObjectGraph = function () {
	return this.maxItemsInObjectGraph;
};
System.Runtime.Serialization.DataContractSerializer.prototype.get_PreserveObjectReferences = function () {
	return this.preserveObjectReferences;
};
System.Runtime.Serialization.DataContractSerializer.prototype.get_IgnoreExtensionDataObject = function () {
	return this.ignoreExtensionDataObject;
};
System.Runtime.Serialization.DataContractSerializer.prototype.get_RootContract = function () {
	if (this.rootContract === null) {
		this.rootContract = $asm09.System.Runtime.Serialization.DataContract.GetDataContract$0(this.rootType);
		this.needsContractNsAtRoot = System.Runtime.Serialization.XmlObjectSerializer.prototype.CheckIfNeedsContractNsAtRoot.call(this, this.rootName, this.rootNamespace, this.rootContract);
	}
	return this.rootContract;
};
System.Runtime.Serialization.DataContractSerializer.prototype.InternalWriteObject = function (writer, graph) {
	this.InternalWriteStartObject(writer, graph);
	this.InternalWriteObjectContent(writer, graph);
	this.InternalWriteEndObject(writer);
};
System.Runtime.Serialization.DataContractSerializer.prototype.WriteObject = function (writer, graph) {
	System.Runtime.Serialization.XmlObjectSerializer.prototype.WriteObjectHandleExceptions.call(this, new $asm09.System.Runtime.Serialization.XmlWriterDelegator(writer), graph);
};
System.Runtime.Serialization.DataContractSerializer.prototype.WriteStartObject$0 = function (writer, graph) {
	System.Runtime.Serialization.XmlObjectSerializer.prototype.WriteStartObjectHandleExceptions.call(this, new $asm09.System.Runtime.Serialization.XmlWriterDelegator(writer), graph);
};
System.Runtime.Serialization.DataContractSerializer.prototype.WriteObjectContent$0 = function (writer, graph) {
	System.Runtime.Serialization.XmlObjectSerializer.prototype.WriteObjectContentHandleExceptions.call(this, new $asm09.System.Runtime.Serialization.XmlWriterDelegator(writer), graph);
};
System.Runtime.Serialization.DataContractSerializer.prototype.WriteEndObject$0 = function (writer) {
	System.Runtime.Serialization.XmlObjectSerializer.prototype.WriteEndObjectHandleExceptions.call(this, new $asm09.System.Runtime.Serialization.XmlWriterDelegator(writer));
};
System.Runtime.Serialization.DataContractSerializer.prototype.WriteStartObject$1 = function (writer, graph) {
	System.Runtime.Serialization.XmlObjectSerializer.prototype.WriteStartObjectHandleExceptions.call(this, new $asm09.System.Runtime.Serialization.XmlWriterDelegator(writer), graph);
};
System.Runtime.Serialization.DataContractSerializer.prototype.WriteObjectContent$1 = function (writer, graph) {
	System.Runtime.Serialization.XmlObjectSerializer.prototype.WriteObjectContentHandleExceptions.call(this, new $asm09.System.Runtime.Serialization.XmlWriterDelegator(writer), graph);
};
System.Runtime.Serialization.DataContractSerializer.prototype.WriteEndObject$1 = function (writer) {
	System.Runtime.Serialization.XmlObjectSerializer.prototype.WriteEndObjectHandleExceptions.call(this, new $asm09.System.Runtime.Serialization.XmlWriterDelegator(writer));
};
System.Runtime.Serialization.DataContractSerializer.prototype.ReadObject$0 = function (reader) {
	return System.Runtime.Serialization.XmlObjectSerializer.prototype.ReadObjectHandleExceptions.call(this, new $asm09.System.Runtime.Serialization.XmlReaderDelegator(reader), true);
};
System.Runtime.Serialization.DataContractSerializer.prototype.ReadObject$1 = function (reader, verifyObjectName) {
	return System.Runtime.Serialization.XmlObjectSerializer.prototype.ReadObjectHandleExceptions.call(this, new $asm09.System.Runtime.Serialization.XmlReaderDelegator(reader), verifyObjectName);
};
System.Runtime.Serialization.DataContractSerializer.prototype.IsStartObject$0 = function (reader) {
	return System.Runtime.Serialization.XmlObjectSerializer.prototype.IsStartObjectHandleExceptions.call(this, new $asm09.System.Runtime.Serialization.XmlReaderDelegator(reader));
};
System.Runtime.Serialization.DataContractSerializer.prototype.ReadObject$2 = function (reader, verifyObjectName) {
	return System.Runtime.Serialization.XmlObjectSerializer.prototype.ReadObjectHandleExceptions.call(this, new $asm09.System.Runtime.Serialization.XmlReaderDelegator(reader), verifyObjectName);
};
System.Runtime.Serialization.DataContractSerializer.prototype.IsStartObject$1 = function (reader) {
	return System.Runtime.Serialization.XmlObjectSerializer.prototype.IsStartObjectHandleExceptions.call(this, new $asm09.System.Runtime.Serialization.XmlReaderDelegator(reader));
};
System.Runtime.Serialization.DataContractSerializer.prototype.InternalWriteStartObject = function (writer, graph) {
	System.Runtime.Serialization.XmlObjectSerializer.prototype.WriteRootElement.call(
		this, writer, 
		this.RootContract, 
		this.rootName, 
		this.rootNamespace, 
		this.needsContractNsAtRoot
	);
};
System.Runtime.Serialization.DataContractSerializer.prototype.InternalWriteObjectContent = function (writer, graph) {
	if (this.MaxItemsInObjectGraph === 0) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0($asm09.System.Runtime.Serialization.SR.GetString$0("ExceededMaxItemsQuota", [this.MaxItemsInObjectGraph])));
	}
	var dataContract = this.RootContract;
	var underlyingType = dataContract.UnderlyingType;
	var type = (graph === null) ? underlyingType : JSIL.GetType(graph);
	if (graph === null) {
		if (System.Runtime.Serialization.XmlObjectSerializer.prototype.IsRootXmlAny.call(this, this.rootName, dataContract)) {
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0($asm09.System.Runtime.Serialization.SR.GetString$0("IsAnyCannotBeNull", [underlyingType])));
		}
		System.Runtime.Serialization.XmlObjectSerializer.WriteNull(writer);
		return;
	} else if (underlyingType === type) {
		if (dataContract.CanContainReferences) {
			var xmlObjectSerializerWriteContext = $asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.CreateContext(this, dataContract);
			xmlObjectSerializerWriteContext.HandleGraphAtTopLevel(writer, graph, dataContract);
			xmlObjectSerializerWriteContext.SerializeWithoutXsiType(dataContract, writer, graph, underlyingType.TypeHandle.MemberwiseClone());
			return;
		}
		dataContract.WriteXmlValue(writer, graph, null);
		return;
	} else {
		if (System.Runtime.Serialization.XmlObjectSerializer.prototype.IsRootXmlAny.call(this, this.rootName, dataContract)) {
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0($asm09.System.Runtime.Serialization.SR.GetString$0("IsAnyCannotBeSerializedAsDerivedType", [type, dataContract.UnderlyingType])));
		}
		dataContract = System.Runtime.Serialization.DataContractSerializer.GetDataContract(dataContract, underlyingType, type);
		var xmlObjectSerializerWriteContext2 = $asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.CreateContext(this, this.RootContract);
		if (dataContract.CanContainReferences) {
			xmlObjectSerializerWriteContext2.HandleGraphAtTopLevel(writer, graph, dataContract);
		}
		xmlObjectSerializerWriteContext2.OnHandleIsReference(writer, dataContract, graph);
		xmlObjectSerializerWriteContext2.SerializeWithXsiTypeAtTopLevel(dataContract, writer, graph, underlyingType.TypeHandle.MemberwiseClone());
		return;
	}
};
System.Runtime.Serialization.DataContractSerializer.GetDataContract = function (declaredTypeContract, declaredType, objectType) {
	if (!(!declaredType.IsInterface || !$asm09.System.Runtime.Serialization.CollectionDataContract.IsCollectionInterface(declaredType))) {
		return declaredTypeContract;
	}
	if (declaredType.IsArray) {
		return declaredTypeContract;
	}
	return $asm09.System.Runtime.Serialization.DataContract.GetDataContract$2(objectType.TypeHandle.MemberwiseClone(), objectType, System.Runtime.Serialization.SerializationMode.SharedContract);
};
System.Runtime.Serialization.DataContractSerializer.prototype.InternalWriteEndObject = function (writer) {
	if (!System.Runtime.Serialization.XmlObjectSerializer.prototype.IsRootXmlAny.call(this, this.rootName, this.RootContract)) {
		writer.WriteEndElement();
	}
};
System.Runtime.Serialization.DataContractSerializer.prototype.InternalReadObject = function (xmlReader, verifyObjectName) {
	if (this.MaxItemsInObjectGraph === 0) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0($asm09.System.Runtime.Serialization.SR.GetString$0("ExceededMaxItemsQuota", [this.MaxItemsInObjectGraph])));
	}
	if (verifyObjectName) {
		if (!this.InternalIsStartObject(xmlReader)) {
			if (this.rootName === null) {
				var topLevelElementName = this.RootContract.TopLevelElementName;
				var topLevelElementNamespace = this.RootContract.TopLevelElementNamespace;
			} else {
				topLevelElementName = this.rootName;
				topLevelElementNamespace = this.rootNamespace;
			}
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationExceptionWithReaderDetails($asm09.System.Runtime.Serialization.SR.GetString$0("ExpectingElement", [topLevelElementNamespace, topLevelElementName]), xmlReader));
		}
	} else if (!System.Runtime.Serialization.XmlObjectSerializer.prototype.IsStartElement.call(this, xmlReader)) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationExceptionWithReaderDetails($asm09.System.Runtime.Serialization.SR.GetString$0("ExpectingElementAtDeserialize", [System.Xml.XmlNodeType.Element]), xmlReader));
	}
	var dataContract = this.RootContract;
	if (!(!dataContract.IsPrimitive || !System.Object.ReferenceEquals(dataContract.UnderlyingType, this.rootType))) {
		return dataContract.ReadXmlValue(xmlReader, null);
	}
	if (System.Runtime.Serialization.XmlObjectSerializer.prototype.IsRootXmlAny.call(this, this.rootName, dataContract)) {
		return $asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.ReadRootIXmlSerializable(xmlReader, JSIL.TryCast(dataContract, $asm09.System.Runtime.Serialization.XmlDataContract), false);
	}
	var xmlObjectSerializerReadContext = $asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.CreateContext(this, dataContract);
	return xmlObjectSerializerReadContext.InternalDeserialize$2(
		xmlReader, 
		this.rootType, 
		dataContract, 
		null, 
		null
	);
};
System.Runtime.Serialization.DataContractSerializer.prototype.InternalIsStartObject = function (reader) {
	return System.Runtime.Serialization.XmlObjectSerializer.prototype.IsRootElement.call(this, reader, this.RootContract, this.rootName, this.rootNamespace);
};
System.Runtime.Serialization.DataContractSerializer.prototype.GetSerializeType = function (graph) {
	if (graph !== null) {
		return JSIL.GetType(graph);
	}
	return this.rootType;
};
System.Runtime.Serialization.DataContractSerializer.prototype.GetDeserializeType = function () {
	return this.rootType;
};
JSIL.OverloadedMethod(System.Runtime.Serialization.DataContractSerializer.prototype, "_ctor", [
		["_ctor$0", [System.Type]], 
		["_ctor$1", [System.Type, System.Collections.Generic.IEnumerable$b1.Of(System.Type)]], 
		["_ctor$2", [System.Type, System.String, System.String]], 
		["_ctor$3", [System.Type, System.String, System.String, System.Collections.Generic.IEnumerable$b1.Of(System.Type)]], 
		["_ctor$4", [System.Type, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]], 
		["_ctor$5", [System.Type, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Collections.Generic.IEnumerable$b1.Of(System.Type)]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.DataContractSerializer.prototype, "Initialize", [
		["Initialize$0", [System.Type, System.Collections.Generic.IEnumerable$b1.Of(System.Type), System.Int32, System.Boolean, System.Boolean]], 
		["Initialize$1", [System.Type, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Collections.Generic.IEnumerable$b1.Of(System.Type), System.Int32, System.Boolean, System.Boolean]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.DataContractSerializer.prototype, "WriteStartObject", [
		["WriteStartObject$0", [System.Xml.XmlWriter, System.Object]], 
		["WriteStartObject$1", [System.Xml.XmlDictionaryWriter, System.Object]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.DataContractSerializer.prototype, "WriteObjectContent", [
		["WriteObjectContent$0", [System.Xml.XmlWriter, System.Object]], 
		["WriteObjectContent$1", [System.Xml.XmlDictionaryWriter, System.Object]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.DataContractSerializer.prototype, "WriteEndObject", [
		["WriteEndObject$0", [System.Xml.XmlWriter]], 
		["WriteEndObject$1", [System.Xml.XmlDictionaryWriter]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.DataContractSerializer.prototype, "ReadObject", [
		["ReadObject$0", [System.Xml.XmlReader]], 
		["ReadObject$1", [System.Xml.XmlReader, System.Boolean]], 
		["ReadObject$2", [System.Xml.XmlDictionaryReader, System.Boolean]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.DataContractSerializer.prototype, "IsStartObject", [
		["IsStartObject$0", [System.Xml.XmlReader]], 
		["IsStartObject$1", [System.Xml.XmlDictionaryReader]]
	]);
JSIL.MakeProperty(System.Runtime.Serialization.DataContractSerializer.prototype, "KnownTypes", 
	System.Runtime.Serialization.DataContractSerializer.prototype.get_KnownTypes, null);
JSIL.MakeProperty(System.Runtime.Serialization.DataContractSerializer.prototype, "KnownDataContracts", 
	System.Runtime.Serialization.DataContractSerializer.prototype.get_KnownDataContracts, null);
JSIL.MakeProperty(System.Runtime.Serialization.DataContractSerializer.prototype, "MaxItemsInObjectGraph", 
	System.Runtime.Serialization.DataContractSerializer.prototype.get_MaxItemsInObjectGraph, null);
JSIL.MakeProperty(System.Runtime.Serialization.DataContractSerializer.prototype, "PreserveObjectReferences", 
	System.Runtime.Serialization.DataContractSerializer.prototype.get_PreserveObjectReferences, null);
JSIL.MakeProperty(System.Runtime.Serialization.DataContractSerializer.prototype, "IgnoreExtensionDataObject", 
	System.Runtime.Serialization.DataContractSerializer.prototype.get_IgnoreExtensionDataObject, null);
JSIL.MakeProperty(System.Runtime.Serialization.DataContractSerializer.prototype, "RootContract", 
	System.Runtime.Serialization.DataContractSerializer.prototype.get_RootContract, null);
System.Runtime.Serialization.DataContractSerializer.prototype.rootType = null;
System.Runtime.Serialization.DataContractSerializer.prototype.rootContract = null;
System.Runtime.Serialization.DataContractSerializer.prototype.needsContractNsAtRoot = false;
System.Runtime.Serialization.DataContractSerializer.prototype.rootName = null;
System.Runtime.Serialization.DataContractSerializer.prototype.rootNamespace = null;
System.Runtime.Serialization.DataContractSerializer.prototype.maxItemsInObjectGraph = 0;
System.Runtime.Serialization.DataContractSerializer.prototype.ignoreExtensionDataObject = false;
System.Runtime.Serialization.DataContractSerializer.prototype.preserveObjectReferences = false;
System.Runtime.Serialization.DataContractSerializer.prototype.knownTypeCollection = null;
System.Runtime.Serialization.DataContractSerializer.prototype.knownTypeList = null;
System.Runtime.Serialization.DataContractSerializer.prototype.knownDataContracts = null;

$asm09.System.Runtime.Serialization.DataMember.prototype._ctor$0 = function () {
	System.Object.prototype._ctor.call(this);
	this.helper = JSIL.New($asm09.System.Runtime.Serialization.DataMember.CriticalHelper, "_ctor$0", []);
};
$asm09.System.Runtime.Serialization.DataMember.prototype._ctor$1 = function (memberInfo) {
	System.Object.prototype._ctor.call(this);
	this.helper = JSIL.New($asm09.System.Runtime.Serialization.DataMember.CriticalHelper, "_ctor$1", [memberInfo]);
};
$asm09.System.Runtime.Serialization.DataMember.prototype._ctor$2 = function (memberTypeContract, name, isNullable, isRequired, emitDefaultValue, order) {
	System.Object.prototype._ctor.call(this);
	this.helper = JSIL.New($asm09.System.Runtime.Serialization.DataMember.CriticalHelper, "_ctor$2", [memberTypeContract, name, isNullable, isRequired, emitDefaultValue, order]);
};
$asm09.System.Runtime.Serialization.DataMember.prototype.get_MemberInfo = function () {
	return this.helper.MemberInfo;
};
$asm09.System.Runtime.Serialization.DataMember.prototype.get_Name = function () {
	return this.helper.Name;
};
$asm09.System.Runtime.Serialization.DataMember.prototype.set_Name = function (value) {
	this.helper.Name = value;
};
$asm09.System.Runtime.Serialization.DataMember.prototype.get_Order = function () {
	return this.helper.Order;
};
$asm09.System.Runtime.Serialization.DataMember.prototype.set_Order = function (value) {
	this.helper.Order = value;
};
$asm09.System.Runtime.Serialization.DataMember.prototype.get_IsRequired = function () {
	return this.helper.IsRequired;
};
$asm09.System.Runtime.Serialization.DataMember.prototype.set_IsRequired = function (value) {
	this.helper.IsRequired = value;
};
$asm09.System.Runtime.Serialization.DataMember.prototype.get_EmitDefaultValue = function () {
	return this.helper.EmitDefaultValue;
};
$asm09.System.Runtime.Serialization.DataMember.prototype.set_EmitDefaultValue = function (value) {
	this.helper.EmitDefaultValue = value;
};
$asm09.System.Runtime.Serialization.DataMember.prototype.get_IsNullable = function () {
	return this.helper.IsNullable;
};
$asm09.System.Runtime.Serialization.DataMember.prototype.set_IsNullable = function (value) {
	this.helper.IsNullable = value;
};
$asm09.System.Runtime.Serialization.DataMember.prototype.get_IsGetOnlyCollection = function () {
	return this.helper.IsGetOnlyCollection;
};
$asm09.System.Runtime.Serialization.DataMember.prototype.set_IsGetOnlyCollection = function (value) {
	this.helper.IsGetOnlyCollection = value;
};
$asm09.System.Runtime.Serialization.DataMember.prototype.get_MemberType = function () {
	return this.helper.MemberType;
};
$asm09.System.Runtime.Serialization.DataMember.prototype.get_MemberTypeContract = function () {
	return this.helper.MemberTypeContract;
};
$asm09.System.Runtime.Serialization.DataMember.prototype.get_HasConflictingNameAndType = function () {
	return this.helper.HasConflictingNameAndType;
};
$asm09.System.Runtime.Serialization.DataMember.prototype.set_HasConflictingNameAndType = function (value) {
	this.helper.HasConflictingNameAndType = value;
};
$asm09.System.Runtime.Serialization.DataMember.prototype.get_ConflictingMember = function () {
	return this.helper.ConflictingMember;
};
$asm09.System.Runtime.Serialization.DataMember.prototype.set_ConflictingMember = function (value) {
	this.helper.ConflictingMember = value;
};
$asm09.System.Runtime.Serialization.DataMember.prototype.RequiresMemberAccessForGet = function (serializationAssemblyPatterns) {
	var memberInfo = this.MemberInfo;
	var fieldInfo = JSIL.TryCast(memberInfo, System.Reflection.FieldInfo);
	if (fieldInfo !== null) {
		return $asm09.System.Runtime.Serialization.DataContract.FieldRequiresMemberAccess(fieldInfo, serializationAssemblyPatterns);
	}
	var propertyInfo = JSIL.Cast(memberInfo, System.Reflection.PropertyInfo);
	var getMethod = propertyInfo.GetGetMethod$0(true);
	return ((getMethod !== null) && ($asm09.System.Runtime.Serialization.DataContract.MethodRequiresMemberAccess(getMethod, serializationAssemblyPatterns) || 
			!$asm09.System.Runtime.Serialization.DataContract.IsTypeVisible(propertyInfo.PropertyType, serializationAssemblyPatterns)));
};
$asm09.System.Runtime.Serialization.DataMember.prototype.RequiresMemberAccessForSet = function (serializationAssemblyPatterns) {
	var memberInfo = this.MemberInfo;
	var fieldInfo = JSIL.TryCast(memberInfo, System.Reflection.FieldInfo);
	if (fieldInfo !== null) {
		return $asm09.System.Runtime.Serialization.DataContract.FieldRequiresMemberAccess(fieldInfo, serializationAssemblyPatterns);
	}
	var propertyInfo = JSIL.Cast(memberInfo, System.Reflection.PropertyInfo);
	var setMethod = propertyInfo.GetSetMethod$0(true);
	return ((setMethod !== null) && ($asm09.System.Runtime.Serialization.DataContract.MethodRequiresMemberAccess(setMethod, serializationAssemblyPatterns) || 
			!$asm09.System.Runtime.Serialization.DataContract.IsTypeVisible(propertyInfo.PropertyType, serializationAssemblyPatterns)));
};
JSIL.OverloadedMethod(System.Runtime.Serialization.DataMember.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Reflection.MemberInfo]], 
		["_ctor$2", [System.Runtime.Serialization.DataContract, System.String, System.Boolean, System.Boolean, System.Boolean, System.Int32]]
	]);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DataMember.prototype, "MemberInfo", 
	$asm09.System.Runtime.Serialization.DataMember.prototype.get_MemberInfo, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DataMember.prototype, "Name", 
	$asm09.System.Runtime.Serialization.DataMember.prototype.get_Name, $asm09.System.Runtime.Serialization.DataMember.prototype.set_Name);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DataMember.prototype, "Order", 
	$asm09.System.Runtime.Serialization.DataMember.prototype.get_Order, $asm09.System.Runtime.Serialization.DataMember.prototype.set_Order);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DataMember.prototype, "IsRequired", 
	$asm09.System.Runtime.Serialization.DataMember.prototype.get_IsRequired, $asm09.System.Runtime.Serialization.DataMember.prototype.set_IsRequired);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DataMember.prototype, "EmitDefaultValue", 
	$asm09.System.Runtime.Serialization.DataMember.prototype.get_EmitDefaultValue, $asm09.System.Runtime.Serialization.DataMember.prototype.set_EmitDefaultValue);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DataMember.prototype, "IsNullable", 
	$asm09.System.Runtime.Serialization.DataMember.prototype.get_IsNullable, $asm09.System.Runtime.Serialization.DataMember.prototype.set_IsNullable);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DataMember.prototype, "IsGetOnlyCollection", 
	$asm09.System.Runtime.Serialization.DataMember.prototype.get_IsGetOnlyCollection, $asm09.System.Runtime.Serialization.DataMember.prototype.set_IsGetOnlyCollection);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DataMember.prototype, "MemberType", 
	$asm09.System.Runtime.Serialization.DataMember.prototype.get_MemberType, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DataMember.prototype, "MemberTypeContract", 
	$asm09.System.Runtime.Serialization.DataMember.prototype.get_MemberTypeContract, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DataMember.prototype, "HasConflictingNameAndType", 
	$asm09.System.Runtime.Serialization.DataMember.prototype.get_HasConflictingNameAndType, $asm09.System.Runtime.Serialization.DataMember.prototype.set_HasConflictingNameAndType);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DataMember.prototype, "ConflictingMember", 
	$asm09.System.Runtime.Serialization.DataMember.prototype.get_ConflictingMember, $asm09.System.Runtime.Serialization.DataMember.prototype.set_ConflictingMember);
$asm09.System.Runtime.Serialization.DataMember.prototype.helper = null;

$asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype._ctor$0 = function () {
	System.Object.prototype._ctor.call(this);
	this.emitDefaultValue = true;
};
$asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype._ctor$1 = function (memberInfo) {
	System.Object.prototype._ctor.call(this);
	this.emitDefaultValue = true;
	this.memberInfo = memberInfo;
};
$asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype._ctor$2 = function (memberTypeContract, name, isNullable, isRequired, emitDefaultValue, order) {
	System.Object.prototype._ctor.call(this);
	this.MemberTypeContract = memberTypeContract;
	this.Name = name;
	this.IsNullable = isNullable;
	this.IsRequired = isRequired;
	this.EmitDefaultValue = emitDefaultValue;
	this.Order = order;
};
$asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype.get_MemberInfo = function () {
	return this.memberInfo;
};
$asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype.get_Name = function () {
	return this.name;
};
$asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype.set_Name = function (value) {
	this.name = value;
};
$asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype.get_Order = function () {
	return this.order;
};
$asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype.set_Order = function (value) {
	this.order = value;
};
$asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype.get_IsRequired = function () {
	return this.isRequired;
};
$asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype.set_IsRequired = function (value) {
	this.isRequired = value;
};
$asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype.get_EmitDefaultValue = function () {
	return this.emitDefaultValue;
};
$asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype.set_EmitDefaultValue = function (value) {
	this.emitDefaultValue = value;
};
$asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype.get_IsNullable = function () {
	return this.isNullable;
};
$asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype.set_IsNullable = function (value) {
	this.isNullable = value;
};
$asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype.get_IsGetOnlyCollection = function () {
	return this.isGetOnlyCollection;
};
$asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype.set_IsGetOnlyCollection = function (value) {
	this.isGetOnlyCollection = value;
};
$asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype.get_MemberType = function () {
	var fieldInfo = JSIL.TryCast(this.MemberInfo, System.Reflection.FieldInfo);
	if (fieldInfo !== null) {
		return fieldInfo.FieldType;
	}
	return JSIL.Cast(this.MemberInfo, System.Reflection.PropertyInfo).PropertyType;
};
$asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype.get_MemberTypeContract = function () {
	if (!(this.memberTypeContract || (this.MemberInfo === null))) {
		if (this.IsGetOnlyCollection) {
			this.memberTypeContract = $asm09.System.Runtime.Serialization.DataContract.GetGetOnlyCollectionDataContract($asm09.System.Runtime.Serialization.DataContract.GetId(this.MemberType.TypeHandle.MemberwiseClone()), this.MemberType.TypeHandle.MemberwiseClone(), this.MemberType, System.Runtime.Serialization.SerializationMode.SharedContract);
		} else {
			this.memberTypeContract = $asm09.System.Runtime.Serialization.DataContract.GetDataContract$0(this.MemberType);
		}
	}
	return this.memberTypeContract;
};
$asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype.set_MemberTypeContract = function (value) {
	this.memberTypeContract = value;
};
$asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype.get_HasConflictingNameAndType = function () {
	return this.hasConflictingNameAndType;
};
$asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype.set_HasConflictingNameAndType = function (value) {
	this.hasConflictingNameAndType = value;
};
$asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype.get_ConflictingMember = function () {
	return this.conflictingMember;
};
$asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype.set_ConflictingMember = function (value) {
	this.conflictingMember = value;
};
JSIL.OverloadedMethod(System.Runtime.Serialization.DataMember.CriticalHelper.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Reflection.MemberInfo]], 
		["_ctor$2", [System.Runtime.Serialization.DataContract, System.String, System.Boolean, System.Boolean, System.Boolean, System.Int32]]
	]);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype, "MemberInfo", 
	$asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype.get_MemberInfo, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype, "Name", 
	$asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype.get_Name, $asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype.set_Name);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype, "Order", 
	$asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype.get_Order, $asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype.set_Order);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype, "IsRequired", 
	$asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype.get_IsRequired, $asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype.set_IsRequired);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype, "EmitDefaultValue", 
	$asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype.get_EmitDefaultValue, $asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype.set_EmitDefaultValue);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype, "IsNullable", 
	$asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype.get_IsNullable, $asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype.set_IsNullable);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype, "IsGetOnlyCollection", 
	$asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype.get_IsGetOnlyCollection, $asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype.set_IsGetOnlyCollection);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype, "MemberType", 
	$asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype.get_MemberType, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype, "MemberTypeContract", 
	$asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype.get_MemberTypeContract, $asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype.set_MemberTypeContract);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype, "HasConflictingNameAndType", 
	$asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype.get_HasConflictingNameAndType, $asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype.set_HasConflictingNameAndType);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype, "ConflictingMember", 
	$asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype.get_ConflictingMember, $asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype.set_ConflictingMember);
$asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype.memberTypeContract = null;
$asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype.name = null;
$asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype.order = 0;
$asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype.isRequired = false;
$asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype.emitDefaultValue = false;
$asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype.isNullable = false;
$asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype.isGetOnlyCollection = false;
$asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype.memberInfo = null;
$asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype.hasConflictingNameAndType = false;
$asm09.System.Runtime.Serialization.DataMember.CriticalHelper.prototype.conflictingMember = null;

$asm09.System.Runtime.Serialization.EnumDataContract.prototype._ctor$0 = function () {
	$asm09.System.Runtime.Serialization.DataContract.prototype._ctor.call(this, JSIL.New($asm09.System.Runtime.Serialization.EnumDataContract.EnumDataContractCriticalHelper, "_ctor$0", []));
	this.helper = JSIL.TryCast($asm09.System.Runtime.Serialization.DataContract.prototype.get_Helper.call(this), $asm09.System.Runtime.Serialization.EnumDataContract.EnumDataContractCriticalHelper);
};
$asm09.System.Runtime.Serialization.EnumDataContract.prototype._ctor$1 = function (type) {
	$asm09.System.Runtime.Serialization.DataContract.prototype._ctor.call(this, JSIL.New($asm09.System.Runtime.Serialization.EnumDataContract.EnumDataContractCriticalHelper, "_ctor$1", [type]));
	this.helper = JSIL.TryCast($asm09.System.Runtime.Serialization.DataContract.prototype.get_Helper.call(this), $asm09.System.Runtime.Serialization.EnumDataContract.EnumDataContractCriticalHelper);
};
$asm09.System.Runtime.Serialization.EnumDataContract.prototype.get_Members = function () {
	return this.helper.Members;
};
$asm09.System.Runtime.Serialization.EnumDataContract.prototype.get_Values = function () {
	return this.helper.Values;
};
$asm09.System.Runtime.Serialization.EnumDataContract.prototype.get_IsFlags = function () {
	return this.helper.IsFlags;
};
$asm09.System.Runtime.Serialization.EnumDataContract.prototype.get_IsULong = function () {
	return this.helper.IsULong;
};
$asm09.System.Runtime.Serialization.EnumDataContract.prototype.get_ChildElementNames = function () {
	return this.helper.ChildElementNames;
};
$asm09.System.Runtime.Serialization.EnumDataContract.prototype.get_CanContainReferences = function () {
	return false;
};
$asm09.System.Runtime.Serialization.EnumDataContract.prototype.WriteEnumValue = function (writer, value) {
	var num = this.IsULong ? JSIL.Cast(value, System.IConvertible).IConvertible_ToUInt64(null) : JSIL.Cast(value, System.IConvertible).IConvertible_ToInt64(null);
__loop0__: 
	for (var i = 0; i < this.Values.Count; ++i) {
		if (num === this.Values.get_Item(i)) {
			writer.WriteString(this.ChildElementNames[i].Value);
			return;
		}
	}
	if (!this.IsFlags) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0($asm09.System.Runtime.Serialization.SR.GetString$0("InvalidEnumValueOnWrite", [value, $asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName($asm09.System.Runtime.Serialization.DataContract.prototype.get_UnderlyingType.call(this))])));
	}
	var num2 = -1;
	var flag = true;
__loop1__: 
	for (var j = 0; j < this.Values.Count; ++j) {
		var num3 = this.Values.get_Item(j);
		if (num3 === 0) {
			num2 = j;
		} else {
			if (num === 0) {
				break __loop1__;
			}
			if ((num3 & num) === num3) {
				if (flag) {
					flag = false;
				} else {
					writer.WriteString($asm09.System.Runtime.Serialization.DictionaryGlobals.Space.Value);
				}
				writer.WriteString(this.ChildElementNames[j].Value);
				num = (num & ~num3);
			}
		}
	}
	if (num !== 0) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0($asm09.System.Runtime.Serialization.SR.GetString$0("InvalidEnumValueOnWrite", [value, $asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName($asm09.System.Runtime.Serialization.DataContract.prototype.get_UnderlyingType.call(this))])));
	}
	if (!(!flag || (num2 < 0))) {
		writer.WriteString(this.ChildElementNames[num2].Value);
		return;
	}
};
$asm09.System.Runtime.Serialization.EnumDataContract.prototype.ReadEnumValue$0 = function (reader) {
	var text = reader.ReadElementContentAsString();
	var num = 0;
	var i = 0;
	if (this.IsFlags) {
	__loop0__: 
		for (; !((i >= text.length) || ((text[i]) !== " ")); ++i) {
		}
		var num2 = i;
	__loop1__: 
		while (i < text.length) {
			if ((text[i]) === " ") {
				var num3 = (i - num2);
				if (num3 > 0) {
					num = (num | this.ReadEnumValue$1(text, num2, num3));
				}
			__loop2__: 
				for (++i; !((i >= text.length) || ((text[i]) !== " ")); ++i) {
				}
				num2 = i;
				if (i === text.length) {
					break __loop1__;
				}
			}
			++i;
		}
		num3 = (i - num2);
		if (num3 > 0) {
			num = (num | this.ReadEnumValue$1(text, num2, num3));
		}
	} else {
		if (text.length === 0) {
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0($asm09.System.Runtime.Serialization.SR.GetString$0("InvalidEnumValueOnRead", [text, $asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName($asm09.System.Runtime.Serialization.DataContract.prototype.get_UnderlyingType.call(this))])));
		}
		num = this.ReadEnumValue$1(text, 0, text.length);
	}
	if (this.IsULong) {
		return System.Enum.ToObject$0($asm09.System.Runtime.Serialization.DataContract.prototype.get_UnderlyingType.call(this), num);
	}
	return System.Enum.ToObject$0($asm09.System.Runtime.Serialization.DataContract.prototype.get_UnderlyingType.call(this), num);
};
$asm09.System.Runtime.Serialization.EnumDataContract.prototype.ReadEnumValue$1 = function (value, index, count) {
__loop0__: 
	for (var i = 0; i < this.Members.Count; ++i) {
		var name = this.Members.get_Item(i).Name;
		if (!((name.length !== count) || (System.String.CompareOrdinal$1(
						value, 
						index, 
						name, 
						0, 
						count
					) !== 0))) {
			return this.Values.get_Item(i);
		}
	}
	throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0($asm09.System.Runtime.Serialization.SR.GetString$0("InvalidEnumValueOnRead", [value.Substring$1(index, count), $asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName($asm09.System.Runtime.Serialization.DataContract.prototype.get_UnderlyingType.call(this))])));
};
$asm09.System.Runtime.Serialization.EnumDataContract.prototype.WriteXmlValue = function (xmlWriter, obj, context) {
	this.WriteEnumValue(xmlWriter, obj);
};
$asm09.System.Runtime.Serialization.EnumDataContract.prototype.ReadXmlValue = function (xmlReader, context) {
	var obj = this.ReadEnumValue$0(xmlReader);
	if (context !== null) {
		context.AddNewObject(obj);
	}
	return obj;
};
JSIL.OverloadedMethod($asm09.System.Runtime.Serialization.EnumDataContract.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Type]]
	]);
JSIL.OverloadedMethod($asm09.System.Runtime.Serialization.EnumDataContract.prototype, "ReadEnumValue", [
		["ReadEnumValue$0", [$asm09.System.Runtime.Serialization.XmlReaderDelegator]], 
		["ReadEnumValue$1", [System.String, System.Int32, System.Int32]]
	]);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.EnumDataContract.prototype, "Members", 
	$asm09.System.Runtime.Serialization.EnumDataContract.prototype.get_Members, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.EnumDataContract.prototype, "Values", 
	$asm09.System.Runtime.Serialization.EnumDataContract.prototype.get_Values, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.EnumDataContract.prototype, "IsFlags", 
	$asm09.System.Runtime.Serialization.EnumDataContract.prototype.get_IsFlags, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.EnumDataContract.prototype, "IsULong", 
	$asm09.System.Runtime.Serialization.EnumDataContract.prototype.get_IsULong, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.EnumDataContract.prototype, "ChildElementNames", 
	$asm09.System.Runtime.Serialization.EnumDataContract.prototype.get_ChildElementNames, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.EnumDataContract.prototype, "CanContainReferences", 
	$asm09.System.Runtime.Serialization.EnumDataContract.prototype.get_CanContainReferences, null);
$asm09.System.Runtime.Serialization.EnumDataContract.prototype.helper = null;

$asm09.System.Runtime.Serialization.EnumDataContract.EnumDataContractCriticalHelper.Add = function (type, localName) {
	var xmlQualifiedName = $asm09.System.Runtime.Serialization.DataContract.CreateQualifiedName(localName, "http://www.w3.org/2001/XMLSchema");
	$asm09.System.Runtime.Serialization.EnumDataContract.EnumDataContractCriticalHelper.typeToName.Add(type, xmlQualifiedName);
	$asm09.System.Runtime.Serialization.EnumDataContract.EnumDataContractCriticalHelper.nameToType.Add(xmlQualifiedName, type);
};
$asm09.System.Runtime.Serialization.EnumDataContract.EnumDataContractCriticalHelper.prototype._ctor$0 = function () {
	$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype._ctor$0.call(this);
	$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.set_IsValueType.call(this, true);
};
$asm09.System.Runtime.Serialization.EnumDataContract.EnumDataContractCriticalHelper.prototype._ctor$1 = function (type) {
	var dataContractAttribute = new JSIL.Variable(null);
	$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype._ctor$1.call(this, type);
	$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.set_StableName.call(this, $asm09.System.Runtime.Serialization.DataContract.GetStableName$1(type, /* ref */ new JSIL.MemberReference(this, "hasDataContract")));
	var underlyingType = System.Enum.GetUnderlyingType(type);
	this.ImportBaseType(underlyingType);
	this.IsFlags = type.IsDefined(System.Runtime.Serialization.Globals.TypeOfFlagsAttribute, false);
	this.ImportDataMembers();
	var xmlDictionary = JSIL.New(System.Xml.XmlDictionary, "_ctor$1", [(2 + this.Members.Count)]);
	$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.set_Name.call(this, xmlDictionary.Add($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_StableName.call(this).Name));
	$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.set_Namespace.call(this, xmlDictionary.Add($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_StableName.call(this).Namespace));
	this.childElementNames = JSIL.Array.New(System.Xml.XmlDictionaryString, this.Members.Count);
__loop0__: 
	for (var i = 0; i < this.Members.Count; ++i) {
		this.childElementNames[i] = xmlDictionary.Add(this.Members.get_Item(i).Name);
	}
	if (!(!$asm09.System.Runtime.Serialization.DataContract.TryGetDCAttribute(type, /* ref */ dataContractAttribute) || !dataContractAttribute.value.IsReference)) {
		$asm09.System.Runtime.Serialization.DataContract.ThrowInvalidDataContractException($asm09.System.Runtime.Serialization.SR.GetString$0("EnumTypeCannotHaveIsReference", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(type), dataContractAttribute.value.IsReference, false]), type);
	}
};
$asm09.System.Runtime.Serialization.EnumDataContract.EnumDataContractCriticalHelper.prototype.get_Members = function () {
	return this.members;
};
$asm09.System.Runtime.Serialization.EnumDataContract.EnumDataContractCriticalHelper.prototype.get_Values = function () {
	return this.values;
};
$asm09.System.Runtime.Serialization.EnumDataContract.EnumDataContractCriticalHelper.prototype.get_IsFlags = function () {
	return this.isFlags;
};
$asm09.System.Runtime.Serialization.EnumDataContract.EnumDataContractCriticalHelper.prototype.set_IsFlags = function (value) {
	this.isFlags = value;
};
$asm09.System.Runtime.Serialization.EnumDataContract.EnumDataContractCriticalHelper.prototype.get_IsULong = function () {
	return this.isULong;
};
$asm09.System.Runtime.Serialization.EnumDataContract.EnumDataContractCriticalHelper.prototype.get_ChildElementNames = function () {
	return this.childElementNames;
};
$asm09.System.Runtime.Serialization.EnumDataContract.EnumDataContractCriticalHelper.prototype.ImportBaseType = function (baseType) {
	this.isULong = (baseType === System.Runtime.Serialization.Globals.TypeOfULong);
};
$asm09.System.Runtime.Serialization.EnumDataContract.EnumDataContractCriticalHelper.prototype.ImportDataMembers = function () {
	var underlyingType = $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_UnderlyingType.call(this);
	var fields = underlyingType.GetFields$1((System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
	var memberNamesTable = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.String, $asm09.System.Runtime.Serialization.DataMember), "_ctor$0", []);
	var list = new (System.Collections.Generic.List$b1.Of($asm09.System.Runtime.Serialization.DataMember)) (fields.length);
	var list2 = new (System.Collections.Generic.List$b1.Of(System.Int64)) (fields.length);
__loop0__: 
	for (var i = 0; i < fields.length; ++i) {
		var fieldInfo = fields[i];
		var flag = false;
		if (this.hasDataContract) {
			var customAttributes = fieldInfo.GetCustomAttributes$1(System.Runtime.Serialization.Globals.TypeOfEnumMemberAttribute, false);
			if (!((customAttributes === null) || (customAttributes.length <= 0))) {
				if (customAttributes.length > 1) {
					$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.ThrowInvalidDataContractException.call(this, $asm09.System.Runtime.Serialization.SR.GetString$0("TooManyEnumMembers", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(fieldInfo.DeclaringType), fieldInfo.Name]));
				}
				var enumMemberAttribute = JSIL.Cast(customAttributes[0], System.Runtime.Serialization.EnumMemberAttribute);
				var dataMember = JSIL.New($asm09.System.Runtime.Serialization.DataMember, "_ctor$1", [fieldInfo]);
				if (enumMemberAttribute.IsValueSetExplicit) {
					if (!((enumMemberAttribute.Value !== null) && (enumMemberAttribute.Value.length !== 0))) {
						$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.ThrowInvalidDataContractException.call(this, $asm09.System.Runtime.Serialization.SR.GetString$0("InvalidEnumMemberValue", [fieldInfo.Name, $asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(underlyingType)]));
					}
					dataMember.Name = enumMemberAttribute.Value;
				} else {
					dataMember.Name = fieldInfo.Name;
				}
				$asm09.System.Runtime.Serialization.ClassDataContract.CheckAndAddMember(list, dataMember, memberNamesTable);
				flag = true;
			}
			var customAttributes2 = fieldInfo.GetCustomAttributes$1(System.Runtime.Serialization.Globals.TypeOfDataMemberAttribute, false);
			if (!((customAttributes2 === null) || (customAttributes2.length <= 0))) {
				$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.ThrowInvalidDataContractException.call(this, $asm09.System.Runtime.Serialization.SR.GetString$0("DataMemberOnEnumField", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(fieldInfo.DeclaringType), fieldInfo.Name]));
			}
		} else if (!fieldInfo.IsNotSerialized) {
			$asm09.System.Runtime.Serialization.ClassDataContract.CheckAndAddMember(list, JSIL.New($asm09.System.Runtime.Serialization.DataMember, "_ctor$1", [fieldInfo]).__Initialize__({
						Name: fieldInfo.Name}
				), memberNamesTable);
			flag = true;
		}
		if (flag) {
			var value = fieldInfo.GetValue(null);
			if (this.isULong) {
				list2.Add(JSIL.Cast(value, System.IConvertible).IConvertible_ToUInt64(null));
			} else {
				list2.Add(JSIL.Cast(value, System.IConvertible).IConvertible_ToInt64(null));
			}
		}
	}
	System.Threading.Thread.MemoryBarrier();
	this.members = list;
	this.values = list2;
};
JSIL.OverloadedMethod($asm09.System.Runtime.Serialization.EnumDataContract.EnumDataContractCriticalHelper.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Type]]
	]);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.EnumDataContract.EnumDataContractCriticalHelper.prototype, "Members", 
	$asm09.System.Runtime.Serialization.EnumDataContract.EnumDataContractCriticalHelper.prototype.get_Members, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.EnumDataContract.EnumDataContractCriticalHelper.prototype, "Values", 
	$asm09.System.Runtime.Serialization.EnumDataContract.EnumDataContractCriticalHelper.prototype.get_Values, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.EnumDataContract.EnumDataContractCriticalHelper.prototype, "IsFlags", 
	$asm09.System.Runtime.Serialization.EnumDataContract.EnumDataContractCriticalHelper.prototype.get_IsFlags, $asm09.System.Runtime.Serialization.EnumDataContract.EnumDataContractCriticalHelper.prototype.set_IsFlags);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.EnumDataContract.EnumDataContractCriticalHelper.prototype, "IsULong", 
	$asm09.System.Runtime.Serialization.EnumDataContract.EnumDataContractCriticalHelper.prototype.get_IsULong, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.EnumDataContract.EnumDataContractCriticalHelper.prototype, "ChildElementNames", 
	$asm09.System.Runtime.Serialization.EnumDataContract.EnumDataContractCriticalHelper.prototype.get_ChildElementNames, null);
$asm09.System.Runtime.Serialization.EnumDataContract.EnumDataContractCriticalHelper.typeToName = null;
$asm09.System.Runtime.Serialization.EnumDataContract.EnumDataContractCriticalHelper.nameToType = null;
$asm09.System.Runtime.Serialization.EnumDataContract.EnumDataContractCriticalHelper.prototype.members = null;
$asm09.System.Runtime.Serialization.EnumDataContract.EnumDataContractCriticalHelper.prototype.values = null;
$asm09.System.Runtime.Serialization.EnumDataContract.EnumDataContractCriticalHelper.prototype.isULong = false;
$asm09.System.Runtime.Serialization.EnumDataContract.EnumDataContractCriticalHelper.prototype.isFlags = false;
$asm09.System.Runtime.Serialization.EnumDataContract.EnumDataContractCriticalHelper.prototype.hasDataContract = false;
$asm09.System.Runtime.Serialization.EnumDataContract.EnumDataContractCriticalHelper.prototype.childElementNames = null;
$asm09.System.Runtime.Serialization.EnumDataContract.EnumDataContractCriticalHelper._cctor = function () {
	$asm09.System.Runtime.Serialization.EnumDataContract.EnumDataContractCriticalHelper.typeToName = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.Type, System.Xml.XmlQualifiedName), "_ctor$0", []);
	$asm09.System.Runtime.Serialization.EnumDataContract.EnumDataContractCriticalHelper.nameToType = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.Xml.XmlQualifiedName, System.Type), "_ctor$0", []);
	$asm09.System.Runtime.Serialization.EnumDataContract.EnumDataContractCriticalHelper.Add(System.SByte, "byte");
	$asm09.System.Runtime.Serialization.EnumDataContract.EnumDataContractCriticalHelper.Add(System.Byte, "unsignedByte");
	$asm09.System.Runtime.Serialization.EnumDataContract.EnumDataContractCriticalHelper.Add(System.Int16, "short");
	$asm09.System.Runtime.Serialization.EnumDataContract.EnumDataContractCriticalHelper.Add(System.UInt16, "unsignedShort");
	$asm09.System.Runtime.Serialization.EnumDataContract.EnumDataContractCriticalHelper.Add(System.Int32, "int");
	$asm09.System.Runtime.Serialization.EnumDataContract.EnumDataContractCriticalHelper.Add(System.UInt32, "unsignedInt");
	$asm09.System.Runtime.Serialization.EnumDataContract.EnumDataContractCriticalHelper.Add(System.Int64, "long");
	$asm09.System.Runtime.Serialization.EnumDataContract.EnumDataContractCriticalHelper.Add(System.UInt64, "unsignedLong");
};

$asm09.System.Runtime.Serialization.Globals.get_IdQualifiedName = function () {
	if (System.Xml.XmlQualifiedName.op_Equality($asm09.System.Runtime.Serialization.Globals.idQualifiedName, null)) {
		$asm09.System.Runtime.Serialization.Globals.idQualifiedName = JSIL.New(System.Xml.XmlQualifiedName, "_ctor$2", ["Id", "http://schemas.microsoft.com/2003/10/Serialization/"]);
	}
	return $asm09.System.Runtime.Serialization.Globals.idQualifiedName;
};
$asm09.System.Runtime.Serialization.Globals.get_RefQualifiedName = function () {
	if (System.Xml.XmlQualifiedName.op_Equality($asm09.System.Runtime.Serialization.Globals.refQualifiedName, null)) {
		$asm09.System.Runtime.Serialization.Globals.refQualifiedName = JSIL.New(System.Xml.XmlQualifiedName, "_ctor$2", ["Ref", "http://schemas.microsoft.com/2003/10/Serialization/"]);
	}
	return $asm09.System.Runtime.Serialization.Globals.refQualifiedName;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfObject = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfObject === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfObject = System.Object;
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfObject;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfValueType = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfValueType === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfValueType = System.ValueType;
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfValueType;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfArray = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfArray === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfArray = System.Array;
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfArray;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfString = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfString === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfString = System.String;
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfString;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfInt = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfInt === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfInt = System.Int32;
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfInt;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfULong = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfULong === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfULong = System.UInt64;
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfULong;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfVoid = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfVoid === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfVoid = System.Void;
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfVoid;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfByteArray = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfByteArray === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfByteArray = System.Array.Of(System.Byte);
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfByteArray;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfTimeSpan = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfTimeSpan === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfTimeSpan = System.TimeSpan;
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfTimeSpan;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfGuid = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfGuid === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfGuid = System.Guid;
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfGuid;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfDateTimeOffset = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfDateTimeOffset === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfDateTimeOffset = System.DateTimeOffset;
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfDateTimeOffset;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfDateTimeOffsetAdapter = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfDateTimeOffsetAdapter === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfDateTimeOffsetAdapter = $asm09.System.Runtime.Serialization.DateTimeOffsetAdapter;
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfDateTimeOffsetAdapter;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfUri = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfUri === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfUri = System.Uri;
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfUri;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfTypeEnumerable = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfTypeEnumerable === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfTypeEnumerable = System.Collections.Generic.IEnumerable$b1.Of(System.Type);
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfTypeEnumerable;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfStreamingContext = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfStreamingContext === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfStreamingContext = System.Runtime.Serialization.StreamingContext;
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfStreamingContext;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfXmlFormatClassWriterDelegate = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfXmlFormatClassWriterDelegate === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfXmlFormatClassWriterDelegate = $asm09.System.Runtime.Serialization.XmlFormatClassWriterDelegate;
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfXmlFormatClassWriterDelegate;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfXmlFormatCollectionWriterDelegate = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfXmlFormatCollectionWriterDelegate === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfXmlFormatCollectionWriterDelegate = $asm09.System.Runtime.Serialization.XmlFormatCollectionWriterDelegate;
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfXmlFormatCollectionWriterDelegate;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfXmlFormatClassReaderDelegate = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfXmlFormatClassReaderDelegate === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfXmlFormatClassReaderDelegate = $asm09.System.Runtime.Serialization.XmlFormatClassReaderDelegate;
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfXmlFormatClassReaderDelegate;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfXmlFormatCollectionReaderDelegate = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfXmlFormatCollectionReaderDelegate === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfXmlFormatCollectionReaderDelegate = $asm09.System.Runtime.Serialization.XmlFormatCollectionReaderDelegate;
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfXmlFormatCollectionReaderDelegate;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfXmlFormatGetOnlyCollectionReaderDelegate = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfXmlFormatGetOnlyCollectionReaderDelegate === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfXmlFormatGetOnlyCollectionReaderDelegate = $asm09.System.Runtime.Serialization.XmlFormatGetOnlyCollectionReaderDelegate;
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfXmlFormatGetOnlyCollectionReaderDelegate;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfKnownTypeAttribute = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfKnownTypeAttribute === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfKnownTypeAttribute = System.Runtime.Serialization.KnownTypeAttribute;
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfKnownTypeAttribute;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfDataContractAttribute = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfDataContractAttribute === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfDataContractAttribute = System.Runtime.Serialization.DataContractAttribute;
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfDataContractAttribute;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfDataMemberAttribute = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfDataMemberAttribute === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfDataMemberAttribute = System.Runtime.Serialization.DataMemberAttribute;
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfDataMemberAttribute;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfEnumMemberAttribute = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfEnumMemberAttribute === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfEnumMemberAttribute = System.Runtime.Serialization.EnumMemberAttribute;
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfEnumMemberAttribute;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfCollectionDataContractAttribute = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfCollectionDataContractAttribute === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfCollectionDataContractAttribute = System.Runtime.Serialization.CollectionDataContractAttribute;
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfCollectionDataContractAttribute;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfObjectArray = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfObjectArray === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfObjectArray = System.Array.Of(System.Object);
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfObjectArray;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfOnSerializingAttribute = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfOnSerializingAttribute === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfOnSerializingAttribute = System.Runtime.Serialization.OnSerializingAttribute;
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfOnSerializingAttribute;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfOnSerializedAttribute = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfOnSerializedAttribute === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfOnSerializedAttribute = System.Runtime.Serialization.OnSerializedAttribute;
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfOnSerializedAttribute;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfOnDeserializingAttribute = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfOnDeserializingAttribute === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfOnDeserializingAttribute = System.Runtime.Serialization.OnDeserializingAttribute;
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfOnDeserializingAttribute;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfOnDeserializedAttribute = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfOnDeserializedAttribute === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfOnDeserializedAttribute = System.Runtime.Serialization.OnDeserializedAttribute;
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfOnDeserializedAttribute;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfFlagsAttribute = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfFlagsAttribute === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfFlagsAttribute = System.FlagsAttribute;
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfFlagsAttribute;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfIXmlSerializable = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfIXmlSerializable === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfIXmlSerializable = System.Xml.Serialization.IXmlSerializable;
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfIXmlSerializable;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfXmlSchemaProviderAttribute = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfXmlSchemaProviderAttribute === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfXmlSchemaProviderAttribute = System.Xml.Serialization.XmlSchemaProviderAttribute;
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfXmlSchemaProviderAttribute;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfXmlRootAttribute = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfXmlRootAttribute === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfXmlRootAttribute = System.Xml.Serialization.XmlRootAttribute;
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfXmlRootAttribute;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfXmlQualifiedName = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfXmlQualifiedName === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfXmlQualifiedName = System.Xml.XmlQualifiedName;
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfXmlQualifiedName;
};
$asm09.System.Runtime.Serialization.Globals.get_EmptyObjectArray = function () {
	if ($asm09.System.Runtime.Serialization.Globals.emptyObjectArray === null) {
		$asm09.System.Runtime.Serialization.Globals.emptyObjectArray = JSIL.Array.New(System.Object, 0);
	}
	return $asm09.System.Runtime.Serialization.Globals.emptyObjectArray;
};
$asm09.System.Runtime.Serialization.Globals.get_EmptyTypeArray = function () {
	if ($asm09.System.Runtime.Serialization.Globals.emptyTypeArray === null) {
		$asm09.System.Runtime.Serialization.Globals.emptyTypeArray = JSIL.Array.New(System.Type, 0);
	}
	return $asm09.System.Runtime.Serialization.Globals.emptyTypeArray;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfNullable = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfNullable === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfNullable = System.Nullable$b1;
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfNullable;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfReflectionPointer = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfReflectionPointer === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfReflectionPointer = System.Reflection.Pointer;
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfReflectionPointer;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfIDictionaryGeneric = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfIDictionaryGeneric === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfIDictionaryGeneric = System.Collections.Generic.IDictionary$b2;
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfIDictionaryGeneric;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfIDictionary = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfIDictionary === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfIDictionary = System.Collections.IDictionary;
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfIDictionary;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfIListGeneric = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfIListGeneric === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfIListGeneric = System.Collections.Generic.IList$b1;
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfIListGeneric;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfIList = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfIList === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfIList = System.Collections.IList;
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfIList;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfICollectionGeneric = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfICollectionGeneric === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfICollectionGeneric = System.Collections.Generic.ICollection$b1;
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfICollectionGeneric;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfICollection = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfICollection === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfICollection = System.Collections.ICollection;
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfICollection;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfIEnumerableGeneric = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfIEnumerableGeneric === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfIEnumerableGeneric = System.Collections.Generic.IEnumerable$b1;
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfIEnumerableGeneric;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfIEnumerable = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfIEnumerable === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfIEnumerable = System.Collections.IEnumerable;
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfIEnumerable;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfIEnumeratorGeneric = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfIEnumeratorGeneric === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfIEnumeratorGeneric = System.Collections.Generic.IEnumerator$b1;
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfIEnumeratorGeneric;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfIEnumerator = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfIEnumerator === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfIEnumerator = System.Collections.IEnumerator;
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfIEnumerator;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfKeyValuePair = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfKeyValuePair === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfKeyValuePair = System.Collections.Generic.KeyValuePair$b2;
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfKeyValuePair;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfKeyValuePairAdapter = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfKeyValuePairAdapter === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfKeyValuePairAdapter = $asm09.System.Runtime.Serialization.KeyValuePairAdapter$b2;
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfKeyValuePairAdapter;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfKeyValue = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfKeyValue === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfKeyValue = $asm09.System.Runtime.Serialization.KeyValue$b2;
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfKeyValue;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfIDictionaryEnumerator = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfIDictionaryEnumerator === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfIDictionaryEnumerator = System.Collections.IDictionaryEnumerator;
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfIDictionaryEnumerator;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfDictionaryEnumerator = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfDictionaryEnumerator === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfDictionaryEnumerator = $asm09.System.Runtime.Serialization.CollectionDataContract.DictionaryEnumerator;
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfDictionaryEnumerator;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfGenericDictionaryEnumerator = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfGenericDictionaryEnumerator === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfGenericDictionaryEnumerator = $asm09.System.Runtime.Serialization.CollectionDataContract.GenericDictionaryEnumerator$b2;
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfGenericDictionaryEnumerator;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfDictionaryGeneric = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfDictionaryGeneric === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfDictionaryGeneric = System.Collections.Generic.Dictionary$b2;
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfDictionaryGeneric;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfListGeneric = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfListGeneric === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfListGeneric = System.Collections.Generic.List$b1;
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfListGeneric;
};
$asm09.System.Runtime.Serialization.Globals.get_TypeOfDBNull = function () {
	if ($asm09.System.Runtime.Serialization.Globals.typeOfDBNull === null) {
		$asm09.System.Runtime.Serialization.Globals.typeOfDBNull = System.DBNull;
	}
	return $asm09.System.Runtime.Serialization.Globals.typeOfDBNull;
};
$asm09.System.Runtime.Serialization.Globals.get_DataContractXsdBaseNamespaceUri = function () {
	if (System.Uri.op_Equality($asm09.System.Runtime.Serialization.Globals.dataContractXsdBaseNamespaceUri, null)) {
		$asm09.System.Runtime.Serialization.Globals.dataContractXsdBaseNamespaceUri = JSIL.New(System.Uri, "_ctor$0", ["http://schemas.datacontract.org/2004/07/"]);
	}
	return $asm09.System.Runtime.Serialization.Globals.dataContractXsdBaseNamespaceUri;
};
$asm09.System.Runtime.Serialization.Globals.get_DataContractSerializationPatterns = function () {
	if ($asm09.System.Runtime.Serialization.Globals.dataContractSerializationPatterns === null) {
		$asm09.System.Runtime.Serialization.Globals.dataContractSerializationPatterns = JSIL.Array.New(System.String, ["^[\\s]*System\\.Runtime\\.Serialization[\\s]*$", "^[\\s]*System\\.Runtime\\.Serialization[\\s]*,[\\s]*PublicKey[\\s]*=[\\s]*(?i:00240000048000009400000006020000002400005253413100040000010001008d56c76f9e8649383049f383c44be0ec204181822a6c31cf5eb7ef486944d032188ea1d3920763712ccb12d75fb77e9811149e6148e5d32fbaab37611c1878ddc19e20ef135d0cb2cff2bfec3d115810c3d9069638fe4be215dbf795861920e5ab6f7db2e2ceef136ac23d5dd2bf031700aec232f6c6b1c785b4305c123b37ab)[\\s]*$"]);
	}
	return $asm09.System.Runtime.Serialization.Globals.dataContractSerializationPatterns;
};
$asm09.System.Runtime.Serialization.Globals.CreateScriptObjectClassDataContract = function () {
	return JSIL.New($asm09.System.Runtime.Serialization.ClassDataContract, "_ctor$0", [$asm09.System.Runtime.Serialization.Globals.typeOfScriptObject]);
};
$asm09.System.Runtime.Serialization.Globals.TypeOfScriptObject_IsAssignableFrom = function (type) {
	return (($asm09.System.Runtime.Serialization.Globals.typeOfScriptObject !== null) && $asm09.System.Runtime.Serialization.Globals.typeOfScriptObject.IsAssignableFrom(type));
};
$asm09.System.Runtime.Serialization.Globals.SetScriptObjectJsonSerializer = function (typeOfScriptObject, serializeFunc, deserializeFunc) {
	$asm09.System.Runtime.Serialization.Globals.typeOfScriptObject = typeOfScriptObject;
	$asm09.System.Runtime.Serialization.Globals.serializeFunc = serializeFunc;
	$asm09.System.Runtime.Serialization.Globals.deserializeFunc = deserializeFunc;
};
$asm09.System.Runtime.Serialization.Globals.ScriptObjectJsonSerialize = function (obj) {
	return $asm09.System.Runtime.Serialization.Globals.serializeFunc(obj);
};
$asm09.System.Runtime.Serialization.Globals.ScriptObjectJsonDeserialize = function (json) {
	return $asm09.System.Runtime.Serialization.Globals.deserializeFunc(json);
};
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "IdQualifiedName", 
	$asm09.System.Runtime.Serialization.Globals.get_IdQualifiedName, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "RefQualifiedName", 
	$asm09.System.Runtime.Serialization.Globals.get_RefQualifiedName, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfObject", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfObject, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfValueType", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfValueType, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfArray", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfArray, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfString", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfString, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfInt", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfInt, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfULong", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfULong, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfVoid", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfVoid, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfByteArray", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfByteArray, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfTimeSpan", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfTimeSpan, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfGuid", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfGuid, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfDateTimeOffset", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfDateTimeOffset, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfDateTimeOffsetAdapter", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfDateTimeOffsetAdapter, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfUri", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfUri, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfTypeEnumerable", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfTypeEnumerable, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfStreamingContext", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfStreamingContext, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfXmlFormatClassWriterDelegate", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfXmlFormatClassWriterDelegate, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfXmlFormatCollectionWriterDelegate", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfXmlFormatCollectionWriterDelegate, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfXmlFormatClassReaderDelegate", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfXmlFormatClassReaderDelegate, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfXmlFormatCollectionReaderDelegate", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfXmlFormatCollectionReaderDelegate, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfXmlFormatGetOnlyCollectionReaderDelegate", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfXmlFormatGetOnlyCollectionReaderDelegate, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfKnownTypeAttribute", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfKnownTypeAttribute, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfDataContractAttribute", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfDataContractAttribute, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfDataMemberAttribute", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfDataMemberAttribute, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfEnumMemberAttribute", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfEnumMemberAttribute, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfCollectionDataContractAttribute", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfCollectionDataContractAttribute, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfObjectArray", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfObjectArray, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfOnSerializingAttribute", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfOnSerializingAttribute, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfOnSerializedAttribute", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfOnSerializedAttribute, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfOnDeserializingAttribute", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfOnDeserializingAttribute, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfOnDeserializedAttribute", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfOnDeserializedAttribute, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfFlagsAttribute", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfFlagsAttribute, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfIXmlSerializable", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfIXmlSerializable, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfXmlSchemaProviderAttribute", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfXmlSchemaProviderAttribute, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfXmlRootAttribute", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfXmlRootAttribute, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfXmlQualifiedName", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfXmlQualifiedName, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "EmptyObjectArray", 
	$asm09.System.Runtime.Serialization.Globals.get_EmptyObjectArray, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "EmptyTypeArray", 
	$asm09.System.Runtime.Serialization.Globals.get_EmptyTypeArray, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfNullable", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfNullable, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfReflectionPointer", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfReflectionPointer, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfIDictionaryGeneric", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfIDictionaryGeneric, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfIDictionary", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfIDictionary, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfIListGeneric", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfIListGeneric, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfIList", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfIList, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfICollectionGeneric", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfICollectionGeneric, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfICollection", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfICollection, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfIEnumerableGeneric", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfIEnumerableGeneric, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfIEnumerable", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfIEnumerable, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfIEnumeratorGeneric", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfIEnumeratorGeneric, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfIEnumerator", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfIEnumerator, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfKeyValuePair", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfKeyValuePair, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfKeyValuePairAdapter", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfKeyValuePairAdapter, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfKeyValue", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfKeyValue, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfIDictionaryEnumerator", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfIDictionaryEnumerator, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfDictionaryEnumerator", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfDictionaryEnumerator, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfGenericDictionaryEnumerator", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfGenericDictionaryEnumerator, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfDictionaryGeneric", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfDictionaryGeneric, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfListGeneric", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfListGeneric, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "TypeOfDBNull", 
	$asm09.System.Runtime.Serialization.Globals.get_TypeOfDBNull, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "DataContractXsdBaseNamespaceUri", 
	$asm09.System.Runtime.Serialization.Globals.get_DataContractXsdBaseNamespaceUri, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.Globals, "DataContractSerializationPatterns", 
	$asm09.System.Runtime.Serialization.Globals.get_DataContractSerializationPatterns, null);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "ScanAllMembers", {
		"value": 60}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "DefaultIsRequired", {
		"value": false}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "DefaultEmitDefaultValue", {
		"value": true}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "DefaultOrder", {
		"value": 0}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "DefaultIsReference", {
		"value": false}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "NullObjectId", {
		"value": null}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "SimpleSRSInternalsVisiblePattern", {
		"value": "^[\\s]*System\\.Runtime\\.Serialization[\\s]*$"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "FullSRSInternalsVisiblePattern", {
		"value": "^[\\s]*System\\.Runtime\\.Serialization[\\s]*,[\\s]*PublicKey[\\s]*=[\\s]*(?i:00240000048000009400000006020000002400005253413100040000010001008d56c76f9e8649383049f383c44be0ec204181822a6c31cf5eb7ef486944d032188ea1d3920763712ccb12d75fb77e9811149e6148e5d32fbaab37611c1878ddc19e20ef135d0cb2cff2bfec3d115810c3d9069638fe4be215dbf795861920e5ab6f7db2e2ceef136ac23d5dd2bf031700aec232f6c6b1c785b4305c123b37ab)[\\s]*$"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "Space", {
		"value": " "}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "XsiPrefix", {
		"value": "i"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "XsdPrefix", {
		"value": "x"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "SerPrefix", {
		"value": "z"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "SerPrefixForSchema", {
		"value": "ser"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "ElementPrefix", {
		"value": "q"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "DataContractXsdBaseNamespace", {
		"value": "http://schemas.datacontract.org/2004/07/"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "DataContractXmlNamespace", {
		"value": "http://schemas.datacontract.org/2004/07/System.Xml"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "SchemaInstanceNamespace", {
		"value": "http://www.w3.org/2001/XMLSchema-instance"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "SchemaNamespace", {
		"value": "http://www.w3.org/2001/XMLSchema"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "XsiNilLocalName", {
		"value": "nil"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "XsiTypeLocalName", {
		"value": "type"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "TnsPrefix", {
		"value": "tns"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "OccursUnbounded", {
		"value": "unbounded"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "AnyTypeLocalName", {
		"value": "anyType"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "StringLocalName", {
		"value": "string"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "IntLocalName", {
		"value": "int"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "True", {
		"value": "true"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "False", {
		"value": "false"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "ArrayPrefix", {
		"value": "ArrayOf"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "XmlnsNamespace", {
		"value": "http://www.w3.org/2000/xmlns/"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "XmlnsPrefix", {
		"value": "xmlns"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "SchemaLocalName", {
		"value": "schema"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "CollectionsNamespace", {
		"value": "http://schemas.microsoft.com/2003/10/Serialization/Arrays"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "DefaultClrNamespace", {
		"value": "GeneratedNamespace"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "DefaultTypeName", {
		"value": "GeneratedType"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "DefaultGeneratedMember", {
		"value": "GeneratedMember"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "DefaultFieldSuffix", {
		"value": "Field"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "DefaultPropertySuffix", {
		"value": "Property"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "DefaultMemberSuffix", {
		"value": "Member"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "NameProperty", {
		"value": "Name"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "NamespaceProperty", {
		"value": "Namespace"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "OrderProperty", {
		"value": "Order"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "IsReferenceProperty", {
		"value": "IsReference"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "IsRequiredProperty", {
		"value": "IsRequired"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "EmitDefaultValueProperty", {
		"value": "EmitDefaultValue"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "ClrNamespaceProperty", {
		"value": "ClrNamespace"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "ItemNameProperty", {
		"value": "ItemName"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "KeyNameProperty", {
		"value": "KeyName"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "ValueNameProperty", {
		"value": "ValueName"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "SerializationInfoPropertyName", {
		"value": "SerializationInfo"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "SerializationInfoFieldName", {
		"value": "info"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "NodeArrayPropertyName", {
		"value": "Nodes"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "NodeArrayFieldName", {
		"value": "nodesField"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "ExportSchemaMethod", {
		"value": "ExportSchema"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "IsAnyProperty", {
		"value": "IsAny"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "ContextFieldName", {
		"value": "context"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "GetObjectDataMethodName", {
		"value": "GetObjectData"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "GetEnumeratorMethodName", {
		"value": "GetEnumerator"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "MoveNextMethodName", {
		"value": "MoveNext"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "AddValueMethodName", {
		"value": "AddValue"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "CurrentPropertyName", {
		"value": "Current"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "ValueProperty", {
		"value": "Value"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "EnumeratorFieldName", {
		"value": "enumerator"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "SerializationEntryFieldName", {
		"value": "entry"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "ExtensionDataSetMethod", {
		"value": "set_ExtensionData"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "ExtensionDataSetExplicitMethod", {
		"value": "System.Runtime.Serialization.IExtensibleDataObject.set_ExtensionData"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "ExtensionDataObjectPropertyName", {
		"value": "ExtensionData"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "ExtensionDataObjectFieldName", {
		"value": "extensionDataField"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "AddMethodName", {
		"value": "Add"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "GetCurrentMethodName", {
		"value": "get_Current"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "SerializationNamespace", {
		"value": "http://schemas.microsoft.com/2003/10/Serialization/"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "ClrTypeLocalName", {
		"value": "Type"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "ClrAssemblyLocalName", {
		"value": "Assembly"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "IsValueTypeLocalName", {
		"value": "IsValueType"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "EnumerationValueLocalName", {
		"value": "EnumerationValue"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "SurrogateDataLocalName", {
		"value": "Surrogate"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "GenericTypeLocalName", {
		"value": "GenericType"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "GenericParameterLocalName", {
		"value": "GenericParameter"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "GenericNameAttribute", {
		"value": "Name"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "GenericNamespaceAttribute", {
		"value": "Namespace"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "GenericParameterNestedLevelAttribute", {
		"value": "NestedLevel"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "IsDictionaryLocalName", {
		"value": "IsDictionary"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "ActualTypeLocalName", {
		"value": "ActualType"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "ActualTypeNameAttribute", {
		"value": "Name"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "ActualTypeNamespaceAttribute", {
		"value": "Namespace"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "DefaultValueLocalName", {
		"value": "DefaultValue"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "EmitDefaultValueAttribute", {
		"value": "EmitDefaultValue"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "IdLocalName", {
		"value": "Id"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "RefLocalName", {
		"value": "Ref"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "ArraySizeLocalName", {
		"value": "Size"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "KeyLocalName", {
		"value": "Key"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "ValueLocalName", {
		"value": "Value"}
);
Object.defineProperty($asm09.System.Runtime.Serialization.Globals, "MscorlibAssemblyName", {
		"value": "0"}
);
$asm09.System.Runtime.Serialization.Globals.idQualifiedName = null;
$asm09.System.Runtime.Serialization.Globals.refQualifiedName = null;
$asm09.System.Runtime.Serialization.Globals.typeOfObject = null;
$asm09.System.Runtime.Serialization.Globals.typeOfValueType = null;
$asm09.System.Runtime.Serialization.Globals.typeOfArray = null;
$asm09.System.Runtime.Serialization.Globals.typeOfString = null;
$asm09.System.Runtime.Serialization.Globals.typeOfInt = null;
$asm09.System.Runtime.Serialization.Globals.typeOfULong = null;
$asm09.System.Runtime.Serialization.Globals.typeOfVoid = null;
$asm09.System.Runtime.Serialization.Globals.typeOfByteArray = null;
$asm09.System.Runtime.Serialization.Globals.typeOfTimeSpan = null;
$asm09.System.Runtime.Serialization.Globals.typeOfGuid = null;
$asm09.System.Runtime.Serialization.Globals.typeOfDateTimeOffset = null;
$asm09.System.Runtime.Serialization.Globals.typeOfDateTimeOffsetAdapter = null;
$asm09.System.Runtime.Serialization.Globals.typeOfUri = null;
$asm09.System.Runtime.Serialization.Globals.typeOfTypeEnumerable = null;
$asm09.System.Runtime.Serialization.Globals.typeOfStreamingContext = null;
$asm09.System.Runtime.Serialization.Globals.typeOfXmlFormatClassWriterDelegate = null;
$asm09.System.Runtime.Serialization.Globals.typeOfXmlFormatCollectionWriterDelegate = null;
$asm09.System.Runtime.Serialization.Globals.typeOfXmlFormatClassReaderDelegate = null;
$asm09.System.Runtime.Serialization.Globals.typeOfXmlFormatCollectionReaderDelegate = null;
$asm09.System.Runtime.Serialization.Globals.typeOfXmlFormatGetOnlyCollectionReaderDelegate = null;
$asm09.System.Runtime.Serialization.Globals.typeOfKnownTypeAttribute = null;
$asm09.System.Runtime.Serialization.Globals.typeOfDataContractAttribute = null;
$asm09.System.Runtime.Serialization.Globals.typeOfDataMemberAttribute = null;
$asm09.System.Runtime.Serialization.Globals.typeOfEnumMemberAttribute = null;
$asm09.System.Runtime.Serialization.Globals.typeOfCollectionDataContractAttribute = null;
$asm09.System.Runtime.Serialization.Globals.typeOfObjectArray = null;
$asm09.System.Runtime.Serialization.Globals.typeOfOnSerializingAttribute = null;
$asm09.System.Runtime.Serialization.Globals.typeOfOnSerializedAttribute = null;
$asm09.System.Runtime.Serialization.Globals.typeOfOnDeserializingAttribute = null;
$asm09.System.Runtime.Serialization.Globals.typeOfOnDeserializedAttribute = null;
$asm09.System.Runtime.Serialization.Globals.typeOfFlagsAttribute = null;
$asm09.System.Runtime.Serialization.Globals.typeOfIXmlSerializable = null;
$asm09.System.Runtime.Serialization.Globals.typeOfXmlSchemaProviderAttribute = null;
$asm09.System.Runtime.Serialization.Globals.typeOfXmlRootAttribute = null;
$asm09.System.Runtime.Serialization.Globals.typeOfXmlQualifiedName = null;
$asm09.System.Runtime.Serialization.Globals.emptyObjectArray = null;
$asm09.System.Runtime.Serialization.Globals.emptyTypeArray = null;
$asm09.System.Runtime.Serialization.Globals.typeOfNullable = null;
$asm09.System.Runtime.Serialization.Globals.typeOfReflectionPointer = null;
$asm09.System.Runtime.Serialization.Globals.typeOfIDictionaryGeneric = null;
$asm09.System.Runtime.Serialization.Globals.typeOfIDictionary = null;
$asm09.System.Runtime.Serialization.Globals.typeOfIListGeneric = null;
$asm09.System.Runtime.Serialization.Globals.typeOfIList = null;
$asm09.System.Runtime.Serialization.Globals.typeOfICollectionGeneric = null;
$asm09.System.Runtime.Serialization.Globals.typeOfICollection = null;
$asm09.System.Runtime.Serialization.Globals.typeOfIEnumerableGeneric = null;
$asm09.System.Runtime.Serialization.Globals.typeOfIEnumerable = null;
$asm09.System.Runtime.Serialization.Globals.typeOfIEnumeratorGeneric = null;
$asm09.System.Runtime.Serialization.Globals.typeOfIEnumerator = null;
$asm09.System.Runtime.Serialization.Globals.typeOfKeyValuePair = null;
$asm09.System.Runtime.Serialization.Globals.typeOfKeyValuePairAdapter = null;
$asm09.System.Runtime.Serialization.Globals.typeOfKeyValue = null;
$asm09.System.Runtime.Serialization.Globals.typeOfIDictionaryEnumerator = null;
$asm09.System.Runtime.Serialization.Globals.typeOfDictionaryEnumerator = null;
$asm09.System.Runtime.Serialization.Globals.typeOfGenericDictionaryEnumerator = null;
$asm09.System.Runtime.Serialization.Globals.typeOfDictionaryGeneric = null;
$asm09.System.Runtime.Serialization.Globals.typeOfListGeneric = null;
$asm09.System.Runtime.Serialization.Globals.typeOfDBNull = null;
$asm09.System.Runtime.Serialization.Globals.dataContractXsdBaseNamespaceUri = null;
$asm09.System.Runtime.Serialization.Globals.dataContractSerializationPatterns = null;
$asm09.System.Runtime.Serialization.Globals.typeOfScriptObject = null;
$asm09.System.Runtime.Serialization.Globals.serializeFunc = null;
$asm09.System.Runtime.Serialization.Globals.deserializeFunc = null;
$asm09.System.Runtime.Serialization.Globals.NewObjectId = null;
System.Runtime.Serialization.Globals._cctor = function () {
	System.Runtime.Serialization.Globals.NewObjectId = System.String.Empty;
};

$asm09.System.Runtime.Serialization.HybridObjectCache.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm09.System.Runtime.Serialization.HybridObjectCache.prototype.Add = function (id, obj) {
	var obj2 = new JSIL.Variable(null);
	if (this.objectDictionary === null) {
		this.objectDictionary = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.String, System.Object), "_ctor$0", []);
	}
	if (this.objectDictionary.TryGetValue(id, /* ref */ obj2)) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0($asm09.System.Runtime.Serialization.SR.GetString$0("MultipleIdDefinition", [id])));
	}
	this.objectDictionary.Add(id, obj);
};
$asm09.System.Runtime.Serialization.HybridObjectCache.prototype.GetObject = function (id) {
	var result = new JSIL.Variable(null);
	if (this.objectDictionary !== null) {
		this.objectDictionary.TryGetValue(id, /* ref */ result);
		return result.value;
	}
	return null;
};
$asm09.System.Runtime.Serialization.HybridObjectCache.prototype.objectDictionary = null;

System.Runtime.Serialization.IgnoreDataMemberAttribute.prototype._ctor = function () {
	System.Attribute.prototype._ctor.call(this);
};

$asm09.System.Runtime.Serialization.ObjectToIdCache.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
	this.m_currentCount = 1;
	this.m_ids = JSIL.Array.New(System.Int32, $asm09.System.Runtime.Serialization.ObjectToIdCache.GetPrime(1));
	this.m_objs = JSIL.Array.New(System.Object, this.m_ids.length);
};
$asm09.System.Runtime.Serialization.ObjectToIdCache.prototype.GetId = function (obj, /* ref */ newId) {
	var flag = new JSIL.Variable(false);
	var num = this.FindElement(obj, /* ref */ flag);
	if (!flag.value) {
		newId.value = false;
		return this.m_ids[num];
	}
	if (!newId.value) {
		return -1;
	}
	var num2 = this.m_currentCount++;
	this.m_objs[num] = obj;
	this.m_ids[num] = num2;
	if (this.m_currentCount >= (this.m_objs.length - 1)) {
		this.Rehash();
	}
	return num2;
};
$asm09.System.Runtime.Serialization.ObjectToIdCache.prototype.ReassignId = function (oldObjId, oldObj, newObj) {
	var flag = new JSIL.Variable(false);
	var num = this.FindElement(oldObj, /* ref */ flag);
	if (flag.value) {
		return 0;
	}
	var num2 = this.m_ids[num];
	if (oldObjId > 0) {
		this.m_ids[num] = oldObjId;
	} else {
		this.RemoveAt(num);
	}
	num = this.FindElement(newObj, /* ref */ flag);
	var result = 0;
	if (!flag.value) {
		result = this.m_ids[num];
	}
	this.m_objs[num] = newObj;
	this.m_ids[num] = num2;
	return result;
};
$asm09.System.Runtime.Serialization.ObjectToIdCache.prototype.FindElement = function (obj, /* ref */ isEmpty) {
	var hashCode = System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(obj);
	var num = ((hashCode & 2147483647) % this.m_objs.length);
__loop0__: 
	for (var num2 = num; num2 !== (num - 1); ++num2) {
		if (!this.m_objs[num2]) {
			isEmpty.value = true;
			return num2;
		}
		if (this.m_objs[num2] === obj) {
			isEmpty.value = false;
			return num2;
		}
		if (num2 === (this.m_objs.length - 1)) {
			num2 = -1;
		}
	}
	throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0($asm09.System.Runtime.Serialization.SR.GetString$2("ObjectTableOverflow")));
};
$asm09.System.Runtime.Serialization.ObjectToIdCache.prototype.RemoveAt = function (pos) {
	var hashCode = System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(this.m_objs[pos]);
__loop0__: 
	for (var num = pos; num !== (pos - 1); ) {
		var num2 = ((num + 1) % this.m_objs.length);
		if (!(this.m_objs[num2] && (System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(this.m_objs[num2]) === hashCode))) {
			this.m_objs[pos] = this.m_objs[num];
			this.m_ids[pos] = this.m_ids[num];
			this.m_objs[num] = null;
			this.m_ids[num] = 0;
			return;
		}
		num = num2;
	}
	throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0($asm09.System.Runtime.Serialization.SR.GetString$2("ObjectTableOverflow")));
};
$asm09.System.Runtime.Serialization.ObjectToIdCache.prototype.Rehash = function () {
	var flag = new JSIL.Variable(false);
	var prime = $asm09.System.Runtime.Serialization.ObjectToIdCache.GetPrime((this.m_objs.length * 2));
	var objs = this.m_objs;
	this.m_ids = JSIL.Array.New(System.Int32, prime);
	this.m_objs = JSIL.Array.New(System.Object, prime);
__loop0__: 
	for (var i = 0; i < objs.length; ++i) {
		var obj = objs[i];
		if (obj !== null) {
			var num = this.FindElement(obj, /* ref */ flag);
			this.m_objs[num] = obj;
			this.m_ids[num] = this.m_ids[i];
		}
	}
};
$asm09.System.Runtime.Serialization.ObjectToIdCache.GetPrime = function (min) {
__loop0__: 
	for (var i = 0; i < $asm09.System.Runtime.Serialization.ObjectToIdCache.primes.length; ++i) {
		var num = $asm09.System.Runtime.Serialization.ObjectToIdCache.primes[i];
		if (num >= min) {
			return num;
		}
	}
__loop1__: 
	for (var j = (min | 1); j < 2147483647; j += 2) {
		if ($asm09.System.Runtime.Serialization.ObjectToIdCache.IsPrime(j)) {
			return j;
		}
	}
	return min;
};
$asm09.System.Runtime.Serialization.ObjectToIdCache.IsPrime = function (candidate) {
	if (candidate & 1) {
		var num = Math.floor(Math.sqrt(candidate));
	__loop0__: 
		for (var i = 3; i <= num; i += 2) {
			if (!(candidate % i)) {
				return false;
			}
		}
		return true;
	}
	return (candidate === 2);
};
$asm09.System.Runtime.Serialization.ObjectToIdCache.prototype.m_currentCount = 0;
$asm09.System.Runtime.Serialization.ObjectToIdCache.prototype.m_ids = null;
$asm09.System.Runtime.Serialization.ObjectToIdCache.prototype.m_objs = null;
$asm09.System.Runtime.Serialization.ObjectToIdCache.primes = null;
System.Runtime.Serialization.ObjectToIdCache._cctor = function () {
	System.Runtime.Serialization.ObjectToIdCache.primes = JSIL.Array.New(System.Int32, [3, 7, 17, 37, 89, 197, 431, 919, 1931, 4049, 8419, 17519, 36353, 75431, 156437, 324449, 672827, 1395263, 2893249, 5999471]);
};

$asm09.System.Runtime.Serialization.ObjectReferenceStack.prototype.Push = function (obj) {
	if (this.objectArray === null) {
		this.objectArray = JSIL.Array.New(System.Object, 4);
		this.objectArray[this.count++] = obj;
		return;
	}
	if (this.count < 16) {
		if (this.count === this.objectArray.length) {
			System.Array.Resize$b1(System.Object)(/* ref */ new JSIL.MemberReference(this, "objectArray"), (this.objectArray.length * 2));
		}
		this.objectArray[this.count++] = obj;
		return;
	}
	if (this.objectDictionary === null) {
		this.objectDictionary = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.Object, System.Object), "_ctor$0", []);
	}
	this.objectDictionary.Add(obj, null);
	++this.count;
};
$asm09.System.Runtime.Serialization.ObjectReferenceStack.prototype.EnsureSetAsIsReference = function (obj) {
	if (this.count === 0) {
		return;
	}
	if (this.count > 16) {
		this.objectDictionary.Remove(obj);
		return;
	}
	if (!((this.objectArray === null) || (this.objectArray[(this.count - 1)] !== obj))) {
		if (this.isReferenceArray === null) {
			this.isReferenceArray = JSIL.Array.New(System.Boolean, 4);
		} else if (this.count === this.isReferenceArray.length) {
			System.Array.Resize$b1(System.Boolean)(/* ref */ new JSIL.MemberReference(this, "isReferenceArray"), (this.isReferenceArray.length * 2));
		}
		this.isReferenceArray[(this.count - 1)] = true;
	}
};
$asm09.System.Runtime.Serialization.ObjectReferenceStack.prototype.Pop = function (obj) {
	if (this.count > 16) {
		this.objectDictionary.Remove(obj);
	}
	--this.count;
};
$asm09.System.Runtime.Serialization.ObjectReferenceStack.prototype.Contains = function (obj) {
	var num = this.count;
	if (num > 16) {
		if (!((this.objectDictionary === null) || !this.objectDictionary.ContainsKey(obj))) {
			return true;
		}
		num = 16;
	}
__loop0__: 
	for (var i = (num - 1); i >= 0; --i) {
		if (!(!System.Object.ReferenceEquals(obj, this.objectArray[i]) || 
				(this.isReferenceArray === null) || this.isReferenceArray[i])) {
			return true;
		}
	}
	return false;
};
Object.defineProperty($asm09.System.Runtime.Serialization.ObjectReferenceStack, "MaximumArraySize", {
		"value": 16}
);
Object.defineProperty($asm09.System.Runtime.Serialization.ObjectReferenceStack, "InitialArraySize", {
		"value": 4}
);
$asm09.System.Runtime.Serialization.ObjectReferenceStack.prototype.count = 0;
$asm09.System.Runtime.Serialization.ObjectReferenceStack.prototype.objectArray = null;
$asm09.System.Runtime.Serialization.ObjectReferenceStack.prototype.isReferenceArray = null;
$asm09.System.Runtime.Serialization.ObjectReferenceStack.prototype.objectDictionary = null;

$asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype._ctor = function (type, name, ns) {
	$asm09.System.Runtime.Serialization.DataContract.prototype._ctor.call(this, new $asm09.System.Runtime.Serialization.PrimitiveDataContract.PrimitiveDataContractCriticalHelper(type, name, ns));
	this.helper = JSIL.TryCast($asm09.System.Runtime.Serialization.DataContract.prototype.get_Helper.call(this), $asm09.System.Runtime.Serialization.PrimitiveDataContract.PrimitiveDataContractCriticalHelper);
};
$asm09.System.Runtime.Serialization.PrimitiveDataContract.GetPrimitiveDataContract$0 = function (type) {
	return JSIL.TryCast($asm09.System.Runtime.Serialization.DataContract.GetBuiltInDataContract$0(type), $asm09.System.Runtime.Serialization.PrimitiveDataContract);
};
$asm09.System.Runtime.Serialization.PrimitiveDataContract.GetPrimitiveDataContract$1 = function (name, ns) {
	return JSIL.TryCast($asm09.System.Runtime.Serialization.DataContract.GetBuiltInDataContract$1(name, ns), $asm09.System.Runtime.Serialization.PrimitiveDataContract);
};
$asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype.get_TopLevelElementNamespace = function () {
	return $asm09.System.Runtime.Serialization.DictionaryGlobals.SerializationNamespace;
};
$asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype.set_TopLevelElementNamespace = function (value) {
};
$asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype.get_CanContainReferences = function () {
	return false;
};
$asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype.get_IsPrimitive = function () {
	return true;
};
$asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype.get_IsBuiltInDataContract = function () {
	return true;
};
$asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype.get_XmlFormatWriterMethod = function () {
	if (this.helper.XmlFormatWriterMethod === null) {
		if ($asm09.System.Runtime.Serialization.DataContract.prototype.get_UnderlyingType.call(this).IsValueType) {
			this.helper.XmlFormatWriterMethod = $asm09.System.Runtime.Serialization.XmlWriterDelegator.GetMethod$1(
				this.WriteMethodName, 
				(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static), 
				null, 
				JSIL.Array.New(System.Type, [$asm09.System.Runtime.Serialization.DataContract.prototype.get_UnderlyingType.call(this), System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]), 
				null
			);
		} else {
			this.helper.XmlFormatWriterMethod = $asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.GetMethod$1(
				this.WriteMethodName, 
				(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static), 
				null, 
				JSIL.Array.New(System.Type, [$asm09.System.Runtime.Serialization.XmlWriterDelegator, $asm09.System.Runtime.Serialization.DataContract.prototype.get_UnderlyingType.call(this), System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]), 
				null
			);
		}
	}
	return this.helper.XmlFormatWriterMethod;
};
$asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype.get_XmlFormatContentWriterMethod = function () {
	if (this.helper.XmlFormatContentWriterMethod === null) {
		if ($asm09.System.Runtime.Serialization.DataContract.prototype.get_UnderlyingType.call(this).IsValueType) {
			this.helper.XmlFormatContentWriterMethod = $asm09.System.Runtime.Serialization.XmlWriterDelegator.GetMethod$1(
				this.WriteMethodName, 
				(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static), 
				null, 
				JSIL.Array.New(System.Type, [$asm09.System.Runtime.Serialization.DataContract.prototype.get_UnderlyingType.call(this)]), 
				null
			);
		} else {
			this.helper.XmlFormatContentWriterMethod = $asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.GetMethod$1(
				this.WriteMethodName, 
				(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static), 
				null, 
				JSIL.Array.New(System.Type, [$asm09.System.Runtime.Serialization.XmlWriterDelegator, $asm09.System.Runtime.Serialization.DataContract.prototype.get_UnderlyingType.call(this)]), 
				null
			);
		}
	}
	return this.helper.XmlFormatContentWriterMethod;
};
$asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype.get_XmlFormatReaderMethod = function () {
	if (this.helper.XmlFormatReaderMethod === null) {
		this.helper.XmlFormatReaderMethod = $asm09.System.Runtime.Serialization.XmlReaderDelegator.GetMethod$4(this.ReadMethodName, (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
	}
	return this.helper.XmlFormatReaderMethod;
};
$asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype.WriteXmlValue = function (xmlWriter, obj, context) {
	xmlWriter.WriteAnyType$0(obj);
};
$asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype.HandleReadValue = function (obj, context) {
	context.AddNewObject(obj);
	return obj;
};
$asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype.TryReadNullAtTopLevel = function (reader) {
	var attributes = new $asm09.System.Runtime.Serialization.Attributes();
	attributes.Read(reader);
	if (attributes.Ref != $asm09.System.Runtime.Serialization.Globals.NewObjectId) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0($asm09.System.Runtime.Serialization.SR.GetString$0("CannotDeserializeRefAtTopLevel", [attributes.Ref])));
	}
	if (attributes.XsiNil) {
		reader.Skip();
		return true;
	}
	return false;
};
JSIL.OverloadedMethod($asm09.System.Runtime.Serialization.PrimitiveDataContract, "GetPrimitiveDataContract", [
		["GetPrimitiveDataContract$0", [System.Type]], 
		["GetPrimitiveDataContract$1", [System.String, System.String]]
	]);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype, "WriteMethodName", 
	$asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype.get_WriteMethodName, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype, "ReadMethodName", 
	$asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype.get_ReadMethodName, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype, "TopLevelElementNamespace", 
	$asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype.get_TopLevelElementNamespace, $asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype.set_TopLevelElementNamespace);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype, "CanContainReferences", 
	$asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype.get_CanContainReferences, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype, "IsPrimitive", 
	$asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype.get_IsPrimitive, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype, "IsBuiltInDataContract", 
	$asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype.get_IsBuiltInDataContract, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype, "XmlFormatWriterMethod", 
	$asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype.get_XmlFormatWriterMethod, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype, "XmlFormatContentWriterMethod", 
	$asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype.get_XmlFormatContentWriterMethod, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype, "XmlFormatReaderMethod", 
	$asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype.get_XmlFormatReaderMethod, null);
$asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype.helper = null;

$asm09.System.Runtime.Serialization.PrimitiveDataContract.PrimitiveDataContractCriticalHelper.prototype._ctor = function (type, name, ns) {
	$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype._ctor$1.call(this, type);
	$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.SetDataContractName.call(this, name, ns);
};
$asm09.System.Runtime.Serialization.PrimitiveDataContract.PrimitiveDataContractCriticalHelper.prototype.get_XmlFormatWriterMethod = function () {
	return this.xmlFormatWriterMethod;
};
$asm09.System.Runtime.Serialization.PrimitiveDataContract.PrimitiveDataContractCriticalHelper.prototype.set_XmlFormatWriterMethod = function (value) {
	this.xmlFormatWriterMethod = value;
};
$asm09.System.Runtime.Serialization.PrimitiveDataContract.PrimitiveDataContractCriticalHelper.prototype.get_XmlFormatContentWriterMethod = function () {
	return this.xmlFormatContentWriterMethod;
};
$asm09.System.Runtime.Serialization.PrimitiveDataContract.PrimitiveDataContractCriticalHelper.prototype.set_XmlFormatContentWriterMethod = function (value) {
	this.xmlFormatContentWriterMethod = value;
};
$asm09.System.Runtime.Serialization.PrimitiveDataContract.PrimitiveDataContractCriticalHelper.prototype.get_XmlFormatReaderMethod = function () {
	return this.xmlFormatReaderMethod;
};
$asm09.System.Runtime.Serialization.PrimitiveDataContract.PrimitiveDataContractCriticalHelper.prototype.set_XmlFormatReaderMethod = function (value) {
	this.xmlFormatReaderMethod = value;
};
JSIL.MakeProperty($asm09.System.Runtime.Serialization.PrimitiveDataContract.PrimitiveDataContractCriticalHelper.prototype, "XmlFormatWriterMethod", 
	$asm09.System.Runtime.Serialization.PrimitiveDataContract.PrimitiveDataContractCriticalHelper.prototype.get_XmlFormatWriterMethod, $asm09.System.Runtime.Serialization.PrimitiveDataContract.PrimitiveDataContractCriticalHelper.prototype.set_XmlFormatWriterMethod);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.PrimitiveDataContract.PrimitiveDataContractCriticalHelper.prototype, "XmlFormatContentWriterMethod", 
	$asm09.System.Runtime.Serialization.PrimitiveDataContract.PrimitiveDataContractCriticalHelper.prototype.get_XmlFormatContentWriterMethod, $asm09.System.Runtime.Serialization.PrimitiveDataContract.PrimitiveDataContractCriticalHelper.prototype.set_XmlFormatContentWriterMethod);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.PrimitiveDataContract.PrimitiveDataContractCriticalHelper.prototype, "XmlFormatReaderMethod", 
	$asm09.System.Runtime.Serialization.PrimitiveDataContract.PrimitiveDataContractCriticalHelper.prototype.get_XmlFormatReaderMethod, $asm09.System.Runtime.Serialization.PrimitiveDataContract.PrimitiveDataContractCriticalHelper.prototype.set_XmlFormatReaderMethod);
$asm09.System.Runtime.Serialization.PrimitiveDataContract.PrimitiveDataContractCriticalHelper.prototype.xmlFormatWriterMethod = null;
$asm09.System.Runtime.Serialization.PrimitiveDataContract.PrimitiveDataContractCriticalHelper.prototype.xmlFormatContentWriterMethod = null;
$asm09.System.Runtime.Serialization.PrimitiveDataContract.PrimitiveDataContractCriticalHelper.prototype.xmlFormatReaderMethod = null;

$asm09.System.Runtime.Serialization.CharDataContract.prototype._ctor$0 = function () {
	this._ctor$1($asm09.System.Runtime.Serialization.DictionaryGlobals.CharLocalName, $asm09.System.Runtime.Serialization.DictionaryGlobals.SerializationNamespace);
};
$asm09.System.Runtime.Serialization.CharDataContract.prototype._ctor$1 = function (name, ns) {
	$asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype._ctor.call(this, System.Char, name, ns);
};
$asm09.System.Runtime.Serialization.CharDataContract.prototype.get_WriteMethodName = function () {
	return "WriteChar";
};
$asm09.System.Runtime.Serialization.CharDataContract.prototype.get_ReadMethodName = function () {
	return "ReadElementContentAsChar";
};
$asm09.System.Runtime.Serialization.CharDataContract.prototype.WriteXmlValue = function (writer, obj, context) {
	writer.WriteChar$0(String.fromCharCode(obj));
};
$asm09.System.Runtime.Serialization.CharDataContract.prototype.ReadXmlValue = function (reader, context) {
	if (context !== null) {
		return $asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype.HandleReadValue.call(this, reader.ReadElementContentAsChar(), context);
	}
	return reader.ReadElementContentAsChar();
};
JSIL.OverloadedMethod($asm09.System.Runtime.Serialization.CharDataContract.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.CharDataContract.prototype, "WriteMethodName", 
	$asm09.System.Runtime.Serialization.CharDataContract.prototype.get_WriteMethodName, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.CharDataContract.prototype, "ReadMethodName", 
	$asm09.System.Runtime.Serialization.CharDataContract.prototype.get_ReadMethodName, null);

$asm09.System.Runtime.Serialization.BooleanDataContract.prototype._ctor = function () {
	$asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype._ctor.call(this, System.Boolean, $asm09.System.Runtime.Serialization.DictionaryGlobals.BooleanLocalName, $asm09.System.Runtime.Serialization.DictionaryGlobals.SchemaNamespace);
};
$asm09.System.Runtime.Serialization.BooleanDataContract.prototype.get_WriteMethodName = function () {
	return "WriteBoolean";
};
$asm09.System.Runtime.Serialization.BooleanDataContract.prototype.get_ReadMethodName = function () {
	return "ReadElementContentAsBoolean";
};
$asm09.System.Runtime.Serialization.BooleanDataContract.prototype.WriteXmlValue = function (writer, obj, context) {
	writer.WriteBoolean$0(JSIL.Cast(obj, System.Boolean));
};
$asm09.System.Runtime.Serialization.BooleanDataContract.prototype.ReadXmlValue = function (reader, context) {
	if (context !== null) {
		return $asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype.HandleReadValue.call(this, reader.ReadElementContentAsBoolean(), context);
	}
	return reader.ReadElementContentAsBoolean();
};
JSIL.MakeProperty($asm09.System.Runtime.Serialization.BooleanDataContract.prototype, "WriteMethodName", 
	$asm09.System.Runtime.Serialization.BooleanDataContract.prototype.get_WriteMethodName, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.BooleanDataContract.prototype, "ReadMethodName", 
	$asm09.System.Runtime.Serialization.BooleanDataContract.prototype.get_ReadMethodName, null);

$asm09.System.Runtime.Serialization.SignedByteDataContract.prototype._ctor = function () {
	$asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype._ctor.call(this, System.SByte, $asm09.System.Runtime.Serialization.DictionaryGlobals.SignedByteLocalName, $asm09.System.Runtime.Serialization.DictionaryGlobals.SchemaNamespace);
};
$asm09.System.Runtime.Serialization.SignedByteDataContract.prototype.get_WriteMethodName = function () {
	return "WriteSignedByte";
};
$asm09.System.Runtime.Serialization.SignedByteDataContract.prototype.get_ReadMethodName = function () {
	return "ReadElementContentAsSignedByte";
};
$asm09.System.Runtime.Serialization.SignedByteDataContract.prototype.WriteXmlValue = function (writer, obj, context) {
	writer.WriteSignedByte$0(JSIL.Cast(obj, System.SByte));
};
$asm09.System.Runtime.Serialization.SignedByteDataContract.prototype.ReadXmlValue = function (reader, context) {
	if (context !== null) {
		return $asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype.HandleReadValue.call(this, reader.ReadElementContentAsSignedByte(), context);
	}
	return reader.ReadElementContentAsSignedByte();
};
JSIL.MakeProperty($asm09.System.Runtime.Serialization.SignedByteDataContract.prototype, "WriteMethodName", 
	$asm09.System.Runtime.Serialization.SignedByteDataContract.prototype.get_WriteMethodName, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.SignedByteDataContract.prototype, "ReadMethodName", 
	$asm09.System.Runtime.Serialization.SignedByteDataContract.prototype.get_ReadMethodName, null);

$asm09.System.Runtime.Serialization.UnsignedByteDataContract.prototype._ctor = function () {
	$asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype._ctor.call(this, System.Byte, $asm09.System.Runtime.Serialization.DictionaryGlobals.UnsignedByteLocalName, $asm09.System.Runtime.Serialization.DictionaryGlobals.SchemaNamespace);
};
$asm09.System.Runtime.Serialization.UnsignedByteDataContract.prototype.get_WriteMethodName = function () {
	return "WriteUnsignedByte";
};
$asm09.System.Runtime.Serialization.UnsignedByteDataContract.prototype.get_ReadMethodName = function () {
	return "ReadElementContentAsUnsignedByte";
};
$asm09.System.Runtime.Serialization.UnsignedByteDataContract.prototype.WriteXmlValue = function (writer, obj, context) {
	writer.WriteUnsignedByte$0(JSIL.Cast(obj, System.Byte));
};
$asm09.System.Runtime.Serialization.UnsignedByteDataContract.prototype.ReadXmlValue = function (reader, context) {
	if (context !== null) {
		return $asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype.HandleReadValue.call(this, reader.ReadElementContentAsUnsignedByte(), context);
	}
	return reader.ReadElementContentAsUnsignedByte();
};
JSIL.MakeProperty($asm09.System.Runtime.Serialization.UnsignedByteDataContract.prototype, "WriteMethodName", 
	$asm09.System.Runtime.Serialization.UnsignedByteDataContract.prototype.get_WriteMethodName, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.UnsignedByteDataContract.prototype, "ReadMethodName", 
	$asm09.System.Runtime.Serialization.UnsignedByteDataContract.prototype.get_ReadMethodName, null);

$asm09.System.Runtime.Serialization.ShortDataContract.prototype._ctor = function () {
	$asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype._ctor.call(this, System.Int16, $asm09.System.Runtime.Serialization.DictionaryGlobals.ShortLocalName, $asm09.System.Runtime.Serialization.DictionaryGlobals.SchemaNamespace);
};
$asm09.System.Runtime.Serialization.ShortDataContract.prototype.get_WriteMethodName = function () {
	return "WriteShort";
};
$asm09.System.Runtime.Serialization.ShortDataContract.prototype.get_ReadMethodName = function () {
	return "ReadElementContentAsShort";
};
$asm09.System.Runtime.Serialization.ShortDataContract.prototype.WriteXmlValue = function (writer, obj, context) {
	writer.WriteShort$0(JSIL.Cast(obj, System.Int16));
};
$asm09.System.Runtime.Serialization.ShortDataContract.prototype.ReadXmlValue = function (reader, context) {
	if (context !== null) {
		return $asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype.HandleReadValue.call(this, reader.ReadElementContentAsShort(), context);
	}
	return reader.ReadElementContentAsShort();
};
JSIL.MakeProperty($asm09.System.Runtime.Serialization.ShortDataContract.prototype, "WriteMethodName", 
	$asm09.System.Runtime.Serialization.ShortDataContract.prototype.get_WriteMethodName, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.ShortDataContract.prototype, "ReadMethodName", 
	$asm09.System.Runtime.Serialization.ShortDataContract.prototype.get_ReadMethodName, null);

$asm09.System.Runtime.Serialization.UnsignedShortDataContract.prototype._ctor = function () {
	$asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype._ctor.call(this, System.UInt16, $asm09.System.Runtime.Serialization.DictionaryGlobals.UnsignedShortLocalName, $asm09.System.Runtime.Serialization.DictionaryGlobals.SchemaNamespace);
};
$asm09.System.Runtime.Serialization.UnsignedShortDataContract.prototype.get_WriteMethodName = function () {
	return "WriteUnsignedShort";
};
$asm09.System.Runtime.Serialization.UnsignedShortDataContract.prototype.get_ReadMethodName = function () {
	return "ReadElementContentAsUnsignedShort";
};
$asm09.System.Runtime.Serialization.UnsignedShortDataContract.prototype.WriteXmlValue = function (writer, obj, context) {
	writer.WriteUnsignedShort$0(JSIL.Cast(obj, System.UInt16));
};
$asm09.System.Runtime.Serialization.UnsignedShortDataContract.prototype.ReadXmlValue = function (reader, context) {
	if (context !== null) {
		return $asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype.HandleReadValue.call(this, reader.ReadElementContentAsUnsignedShort(), context);
	}
	return reader.ReadElementContentAsUnsignedShort();
};
JSIL.MakeProperty($asm09.System.Runtime.Serialization.UnsignedShortDataContract.prototype, "WriteMethodName", 
	$asm09.System.Runtime.Serialization.UnsignedShortDataContract.prototype.get_WriteMethodName, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.UnsignedShortDataContract.prototype, "ReadMethodName", 
	$asm09.System.Runtime.Serialization.UnsignedShortDataContract.prototype.get_ReadMethodName, null);

$asm09.System.Runtime.Serialization.IntDataContract.prototype._ctor = function () {
	$asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype._ctor.call(this, System.Int32, $asm09.System.Runtime.Serialization.DictionaryGlobals.IntLocalName, $asm09.System.Runtime.Serialization.DictionaryGlobals.SchemaNamespace);
};
$asm09.System.Runtime.Serialization.IntDataContract.prototype.get_WriteMethodName = function () {
	return "WriteInt";
};
$asm09.System.Runtime.Serialization.IntDataContract.prototype.get_ReadMethodName = function () {
	return "ReadElementContentAsInt";
};
$asm09.System.Runtime.Serialization.IntDataContract.prototype.WriteXmlValue = function (writer, obj, context) {
	writer.WriteInt$0(JSIL.Cast(obj, System.Int32));
};
$asm09.System.Runtime.Serialization.IntDataContract.prototype.ReadXmlValue = function (reader, context) {
	if (context !== null) {
		return $asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype.HandleReadValue.call(this, reader.ReadElementContentAsInt(), context);
	}
	return reader.ReadElementContentAsInt();
};
JSIL.MakeProperty($asm09.System.Runtime.Serialization.IntDataContract.prototype, "WriteMethodName", 
	$asm09.System.Runtime.Serialization.IntDataContract.prototype.get_WriteMethodName, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.IntDataContract.prototype, "ReadMethodName", 
	$asm09.System.Runtime.Serialization.IntDataContract.prototype.get_ReadMethodName, null);

$asm09.System.Runtime.Serialization.UnsignedIntDataContract.prototype._ctor = function () {
	$asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype._ctor.call(this, System.UInt32, $asm09.System.Runtime.Serialization.DictionaryGlobals.UnsignedIntLocalName, $asm09.System.Runtime.Serialization.DictionaryGlobals.SchemaNamespace);
};
$asm09.System.Runtime.Serialization.UnsignedIntDataContract.prototype.get_WriteMethodName = function () {
	return "WriteUnsignedInt";
};
$asm09.System.Runtime.Serialization.UnsignedIntDataContract.prototype.get_ReadMethodName = function () {
	return "ReadElementContentAsUnsignedInt";
};
$asm09.System.Runtime.Serialization.UnsignedIntDataContract.prototype.WriteXmlValue = function (writer, obj, context) {
	writer.WriteUnsignedInt$0(JSIL.Cast(obj, System.UInt32));
};
$asm09.System.Runtime.Serialization.UnsignedIntDataContract.prototype.ReadXmlValue = function (reader, context) {
	if (context !== null) {
		return $asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype.HandleReadValue.call(this, reader.ReadElementContentAsUnsignedInt(), context);
	}
	return reader.ReadElementContentAsUnsignedInt();
};
JSIL.MakeProperty($asm09.System.Runtime.Serialization.UnsignedIntDataContract.prototype, "WriteMethodName", 
	$asm09.System.Runtime.Serialization.UnsignedIntDataContract.prototype.get_WriteMethodName, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.UnsignedIntDataContract.prototype, "ReadMethodName", 
	$asm09.System.Runtime.Serialization.UnsignedIntDataContract.prototype.get_ReadMethodName, null);

$asm09.System.Runtime.Serialization.LongDataContract.prototype._ctor$0 = function () {
	this._ctor$1($asm09.System.Runtime.Serialization.DictionaryGlobals.LongLocalName, $asm09.System.Runtime.Serialization.DictionaryGlobals.SchemaNamespace);
};
$asm09.System.Runtime.Serialization.LongDataContract.prototype._ctor$1 = function (name, ns) {
	$asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype._ctor.call(this, System.Int64, name, ns);
};
$asm09.System.Runtime.Serialization.LongDataContract.prototype.get_WriteMethodName = function () {
	return "WriteLong";
};
$asm09.System.Runtime.Serialization.LongDataContract.prototype.get_ReadMethodName = function () {
	return "ReadElementContentAsLong";
};
$asm09.System.Runtime.Serialization.LongDataContract.prototype.WriteXmlValue = function (writer, obj, context) {
	writer.WriteLong$0(JSIL.Cast(obj, System.Int64));
};
$asm09.System.Runtime.Serialization.LongDataContract.prototype.ReadXmlValue = function (reader, context) {
	if (context !== null) {
		return $asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype.HandleReadValue.call(this, reader.ReadElementContentAsLong(), context);
	}
	return reader.ReadElementContentAsLong();
};
JSIL.OverloadedMethod($asm09.System.Runtime.Serialization.LongDataContract.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.LongDataContract.prototype, "WriteMethodName", 
	$asm09.System.Runtime.Serialization.LongDataContract.prototype.get_WriteMethodName, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.LongDataContract.prototype, "ReadMethodName", 
	$asm09.System.Runtime.Serialization.LongDataContract.prototype.get_ReadMethodName, null);

$asm09.System.Runtime.Serialization.UnsignedLongDataContract.prototype._ctor = function () {
	$asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype._ctor.call(this, System.UInt64, $asm09.System.Runtime.Serialization.DictionaryGlobals.UnsignedLongLocalName, $asm09.System.Runtime.Serialization.DictionaryGlobals.SchemaNamespace);
};
$asm09.System.Runtime.Serialization.UnsignedLongDataContract.prototype.get_WriteMethodName = function () {
	return "WriteUnsignedLong";
};
$asm09.System.Runtime.Serialization.UnsignedLongDataContract.prototype.get_ReadMethodName = function () {
	return "ReadElementContentAsUnsignedLong";
};
$asm09.System.Runtime.Serialization.UnsignedLongDataContract.prototype.WriteXmlValue = function (writer, obj, context) {
	writer.WriteUnsignedLong$0(JSIL.Cast(obj, System.UInt64));
};
$asm09.System.Runtime.Serialization.UnsignedLongDataContract.prototype.ReadXmlValue = function (reader, context) {
	if (context !== null) {
		return $asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype.HandleReadValue.call(this, reader.ReadElementContentAsUnsignedLong(), context);
	}
	return reader.ReadElementContentAsUnsignedLong();
};
JSIL.MakeProperty($asm09.System.Runtime.Serialization.UnsignedLongDataContract.prototype, "WriteMethodName", 
	$asm09.System.Runtime.Serialization.UnsignedLongDataContract.prototype.get_WriteMethodName, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.UnsignedLongDataContract.prototype, "ReadMethodName", 
	$asm09.System.Runtime.Serialization.UnsignedLongDataContract.prototype.get_ReadMethodName, null);

$asm09.System.Runtime.Serialization.FloatDataContract.prototype._ctor = function () {
	$asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype._ctor.call(this, System.Single, $asm09.System.Runtime.Serialization.DictionaryGlobals.FloatLocalName, $asm09.System.Runtime.Serialization.DictionaryGlobals.SchemaNamespace);
};
$asm09.System.Runtime.Serialization.FloatDataContract.prototype.get_WriteMethodName = function () {
	return "WriteFloat";
};
$asm09.System.Runtime.Serialization.FloatDataContract.prototype.get_ReadMethodName = function () {
	return "ReadElementContentAsFloat";
};
$asm09.System.Runtime.Serialization.FloatDataContract.prototype.WriteXmlValue = function (writer, obj, context) {
	writer.WriteFloat$0(JSIL.Cast(obj, System.Single));
};
$asm09.System.Runtime.Serialization.FloatDataContract.prototype.ReadXmlValue = function (reader, context) {
	if (context !== null) {
		return $asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype.HandleReadValue.call(this, reader.ReadElementContentAsFloat(), context);
	}
	return reader.ReadElementContentAsFloat();
};
JSIL.MakeProperty($asm09.System.Runtime.Serialization.FloatDataContract.prototype, "WriteMethodName", 
	$asm09.System.Runtime.Serialization.FloatDataContract.prototype.get_WriteMethodName, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.FloatDataContract.prototype, "ReadMethodName", 
	$asm09.System.Runtime.Serialization.FloatDataContract.prototype.get_ReadMethodName, null);

$asm09.System.Runtime.Serialization.DoubleDataContract.prototype._ctor = function () {
	$asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype._ctor.call(this, System.Double, $asm09.System.Runtime.Serialization.DictionaryGlobals.DoubleLocalName, $asm09.System.Runtime.Serialization.DictionaryGlobals.SchemaNamespace);
};
$asm09.System.Runtime.Serialization.DoubleDataContract.prototype.get_WriteMethodName = function () {
	return "WriteDouble";
};
$asm09.System.Runtime.Serialization.DoubleDataContract.prototype.get_ReadMethodName = function () {
	return "ReadElementContentAsDouble";
};
$asm09.System.Runtime.Serialization.DoubleDataContract.prototype.WriteXmlValue = function (writer, obj, context) {
	writer.WriteDouble$0(JSIL.Cast(obj, System.Double));
};
$asm09.System.Runtime.Serialization.DoubleDataContract.prototype.ReadXmlValue = function (reader, context) {
	if (context !== null) {
		return $asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype.HandleReadValue.call(this, reader.ReadElementContentAsDouble(), context);
	}
	return reader.ReadElementContentAsDouble();
};
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DoubleDataContract.prototype, "WriteMethodName", 
	$asm09.System.Runtime.Serialization.DoubleDataContract.prototype.get_WriteMethodName, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DoubleDataContract.prototype, "ReadMethodName", 
	$asm09.System.Runtime.Serialization.DoubleDataContract.prototype.get_ReadMethodName, null);

$asm09.System.Runtime.Serialization.DecimalDataContract.prototype._ctor = function () {
	$asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype._ctor.call(this, System.Decimal, $asm09.System.Runtime.Serialization.DictionaryGlobals.DecimalLocalName, $asm09.System.Runtime.Serialization.DictionaryGlobals.SchemaNamespace);
};
$asm09.System.Runtime.Serialization.DecimalDataContract.prototype.get_WriteMethodName = function () {
	return "WriteDecimal";
};
$asm09.System.Runtime.Serialization.DecimalDataContract.prototype.get_ReadMethodName = function () {
	return "ReadElementContentAsDecimal";
};
$asm09.System.Runtime.Serialization.DecimalDataContract.prototype.WriteXmlValue = function (writer, obj, context) {
	writer.WriteDecimal$0(JSIL.Cast(obj, System.Decimal).MemberwiseClone());
};
$asm09.System.Runtime.Serialization.DecimalDataContract.prototype.ReadXmlValue = function (reader, context) {
	if (context !== null) {
		return $asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype.HandleReadValue.call(this, reader.ReadElementContentAsDecimal(), context);
	}
	return reader.ReadElementContentAsDecimal();
};
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DecimalDataContract.prototype, "WriteMethodName", 
	$asm09.System.Runtime.Serialization.DecimalDataContract.prototype.get_WriteMethodName, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DecimalDataContract.prototype, "ReadMethodName", 
	$asm09.System.Runtime.Serialization.DecimalDataContract.prototype.get_ReadMethodName, null);

$asm09.System.Runtime.Serialization.DateTimeDataContract.prototype._ctor = function () {
	$asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype._ctor.call(this, System.DateTime, $asm09.System.Runtime.Serialization.DictionaryGlobals.DateTimeLocalName, $asm09.System.Runtime.Serialization.DictionaryGlobals.SchemaNamespace);
};
$asm09.System.Runtime.Serialization.DateTimeDataContract.prototype.get_WriteMethodName = function () {
	return "WriteDateTime";
};
$asm09.System.Runtime.Serialization.DateTimeDataContract.prototype.get_ReadMethodName = function () {
	return "ReadElementContentAsDateTime";
};
$asm09.System.Runtime.Serialization.DateTimeDataContract.prototype.WriteXmlValue = function (writer, obj, context) {
	writer.WriteDateTime$0(JSIL.Cast(obj, System.DateTime).MemberwiseClone());
};
$asm09.System.Runtime.Serialization.DateTimeDataContract.prototype.ReadXmlValue = function (reader, context) {
	if (context !== null) {
		return $asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype.HandleReadValue.call(this, reader.ReadElementContentAsDateTime(), context);
	}
	return reader.ReadElementContentAsDateTime();
};
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DateTimeDataContract.prototype, "WriteMethodName", 
	$asm09.System.Runtime.Serialization.DateTimeDataContract.prototype.get_WriteMethodName, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.DateTimeDataContract.prototype, "ReadMethodName", 
	$asm09.System.Runtime.Serialization.DateTimeDataContract.prototype.get_ReadMethodName, null);

$asm09.System.Runtime.Serialization.StringDataContract.prototype._ctor$0 = function () {
	this._ctor$1($asm09.System.Runtime.Serialization.DictionaryGlobals.StringLocalName, $asm09.System.Runtime.Serialization.DictionaryGlobals.SchemaNamespace);
};
$asm09.System.Runtime.Serialization.StringDataContract.prototype._ctor$1 = function (name, ns) {
	$asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype._ctor.call(this, System.String, name, ns);
};
$asm09.System.Runtime.Serialization.StringDataContract.prototype.get_WriteMethodName = function () {
	return "WriteString";
};
$asm09.System.Runtime.Serialization.StringDataContract.prototype.get_ReadMethodName = function () {
	return "ReadElementContentAsString";
};
$asm09.System.Runtime.Serialization.StringDataContract.prototype.WriteXmlValue = function (writer, obj, context) {
	writer.WriteString(JSIL.Cast(obj, System.String));
};
$asm09.System.Runtime.Serialization.StringDataContract.prototype.ReadXmlValue = function (reader, context) {
	if (context !== null) {
		return $asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype.HandleReadValue.call(this, reader.ReadElementContentAsString(), context);
	}
	if (!$asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype.TryReadNullAtTopLevel.call(this, reader)) {
		return reader.ReadElementContentAsString();
	}
	return null;
};
JSIL.OverloadedMethod($asm09.System.Runtime.Serialization.StringDataContract.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.StringDataContract.prototype, "WriteMethodName", 
	$asm09.System.Runtime.Serialization.StringDataContract.prototype.get_WriteMethodName, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.StringDataContract.prototype, "ReadMethodName", 
	$asm09.System.Runtime.Serialization.StringDataContract.prototype.get_ReadMethodName, null);

$asm09.System.Runtime.Serialization.HexBinaryDataContract.prototype._ctor = function () {
	$asm09.System.Runtime.Serialization.StringDataContract.prototype._ctor$1.call(this, $asm09.System.Runtime.Serialization.DictionaryGlobals.hexBinaryLocalName, $asm09.System.Runtime.Serialization.DictionaryGlobals.SchemaNamespace);
};

$asm09.System.Runtime.Serialization.ByteArrayDataContract.prototype._ctor = function () {
	$asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype._ctor.call(this, System.Array.Of(System.Byte), $asm09.System.Runtime.Serialization.DictionaryGlobals.ByteArrayLocalName, $asm09.System.Runtime.Serialization.DictionaryGlobals.SchemaNamespace);
};
$asm09.System.Runtime.Serialization.ByteArrayDataContract.prototype.get_WriteMethodName = function () {
	return "WriteBase64";
};
$asm09.System.Runtime.Serialization.ByteArrayDataContract.prototype.get_ReadMethodName = function () {
	return "ReadElementContentAsBase64";
};
$asm09.System.Runtime.Serialization.ByteArrayDataContract.prototype.WriteXmlValue = function (writer, obj, context) {
	writer.WriteBase64(JSIL.Cast(obj, System.Array.Of(System.Byte)));
};
$asm09.System.Runtime.Serialization.ByteArrayDataContract.prototype.ReadXmlValue = function (reader, context) {
	if (context !== null) {
		return $asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype.HandleReadValue.call(this, reader.ReadElementContentAsBase64(), context);
	}
	if (!$asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype.TryReadNullAtTopLevel.call(this, reader)) {
		return reader.ReadElementContentAsBase64();
	}
	return null;
};
JSIL.MakeProperty($asm09.System.Runtime.Serialization.ByteArrayDataContract.prototype, "WriteMethodName", 
	$asm09.System.Runtime.Serialization.ByteArrayDataContract.prototype.get_WriteMethodName, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.ByteArrayDataContract.prototype, "ReadMethodName", 
	$asm09.System.Runtime.Serialization.ByteArrayDataContract.prototype.get_ReadMethodName, null);

$asm09.System.Runtime.Serialization.ObjectDataContract.prototype._ctor = function () {
	$asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype._ctor.call(this, System.Object, $asm09.System.Runtime.Serialization.DictionaryGlobals.ObjectLocalName, $asm09.System.Runtime.Serialization.DictionaryGlobals.SchemaNamespace);
};
$asm09.System.Runtime.Serialization.ObjectDataContract.prototype.get_WriteMethodName = function () {
	return "WriteAnyType";
};
$asm09.System.Runtime.Serialization.ObjectDataContract.prototype.get_ReadMethodName = function () {
	return "ReadElementContentAsAnyType";
};
$asm09.System.Runtime.Serialization.ObjectDataContract.prototype.WriteXmlValue = function (writer, obj, context) {
};
$asm09.System.Runtime.Serialization.ObjectDataContract.prototype.ReadXmlValue = function (reader, context) {
	if (reader.IsEmptyElement) {
		reader.Skip();
		var obj = new System.Object();
	} else {
		var localName = reader.LocalName;
		var namespaceURI = reader.NamespaceURI;
		reader.Read();
		try {
			reader.ReadEndElement();
			obj = new System.Object();
		} catch ($exception) {
			if (JSIL.CheckType($exception, System.Xml.XmlException)) {
				var arg_39_0 = $exception;
				throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$1($asm09.System.Runtime.Serialization.SR.GetString$0("XmlForObjectCannotHaveContent", [localName, namespaceURI]), arg_39_0));
			} else {
				throw $exception;
			}
		}
	}
	if (context !== null) {
		return $asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype.HandleReadValue.call(this, obj, context);
	}
	return obj;
};
$asm09.System.Runtime.Serialization.ObjectDataContract.prototype.get_CanContainReferences = function () {
	return true;
};
$asm09.System.Runtime.Serialization.ObjectDataContract.prototype.get_IsPrimitive = function () {
	return false;
};
JSIL.MakeProperty($asm09.System.Runtime.Serialization.ObjectDataContract.prototype, "WriteMethodName", 
	$asm09.System.Runtime.Serialization.ObjectDataContract.prototype.get_WriteMethodName, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.ObjectDataContract.prototype, "ReadMethodName", 
	$asm09.System.Runtime.Serialization.ObjectDataContract.prototype.get_ReadMethodName, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.ObjectDataContract.prototype, "CanContainReferences", 
	$asm09.System.Runtime.Serialization.ObjectDataContract.prototype.get_CanContainReferences, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.ObjectDataContract.prototype, "IsPrimitive", 
	$asm09.System.Runtime.Serialization.ObjectDataContract.prototype.get_IsPrimitive, null);

$asm09.System.Runtime.Serialization.TimeSpanDataContract.prototype._ctor$0 = function () {
	this._ctor$1($asm09.System.Runtime.Serialization.DictionaryGlobals.TimeSpanLocalName, $asm09.System.Runtime.Serialization.DictionaryGlobals.SerializationNamespace);
};
$asm09.System.Runtime.Serialization.TimeSpanDataContract.prototype._ctor$1 = function (name, ns) {
	$asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype._ctor.call(this, System.TimeSpan, name, ns);
};
$asm09.System.Runtime.Serialization.TimeSpanDataContract.prototype.get_WriteMethodName = function () {
	return "WriteTimeSpan";
};
$asm09.System.Runtime.Serialization.TimeSpanDataContract.prototype.get_ReadMethodName = function () {
	return "ReadElementContentAsTimeSpan";
};
$asm09.System.Runtime.Serialization.TimeSpanDataContract.prototype.WriteXmlValue = function (writer, obj, context) {
	writer.WriteTimeSpan$0(JSIL.Cast(obj, System.TimeSpan).MemberwiseClone());
};
$asm09.System.Runtime.Serialization.TimeSpanDataContract.prototype.ReadXmlValue = function (reader, context) {
	if (context !== null) {
		return $asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype.HandleReadValue.call(this, reader.ReadElementContentAsTimeSpan(), context);
	}
	return reader.ReadElementContentAsTimeSpan();
};
JSIL.OverloadedMethod($asm09.System.Runtime.Serialization.TimeSpanDataContract.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.TimeSpanDataContract.prototype, "WriteMethodName", 
	$asm09.System.Runtime.Serialization.TimeSpanDataContract.prototype.get_WriteMethodName, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.TimeSpanDataContract.prototype, "ReadMethodName", 
	$asm09.System.Runtime.Serialization.TimeSpanDataContract.prototype.get_ReadMethodName, null);

$asm09.System.Runtime.Serialization.GuidDataContract.prototype._ctor$0 = function () {
	this._ctor$1($asm09.System.Runtime.Serialization.DictionaryGlobals.GuidLocalName, $asm09.System.Runtime.Serialization.DictionaryGlobals.SerializationNamespace);
};
$asm09.System.Runtime.Serialization.GuidDataContract.prototype._ctor$1 = function (name, ns) {
	$asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype._ctor.call(this, System.Guid, name, ns);
};
$asm09.System.Runtime.Serialization.GuidDataContract.prototype.get_WriteMethodName = function () {
	return "WriteGuid";
};
$asm09.System.Runtime.Serialization.GuidDataContract.prototype.get_ReadMethodName = function () {
	return "ReadElementContentAsGuid";
};
$asm09.System.Runtime.Serialization.GuidDataContract.prototype.WriteXmlValue = function (writer, obj, context) {
	writer.WriteGuid$0(JSIL.Cast(obj, System.Guid).MemberwiseClone());
};
$asm09.System.Runtime.Serialization.GuidDataContract.prototype.ReadXmlValue = function (reader, context) {
	if (context !== null) {
		return $asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype.HandleReadValue.call(this, reader.ReadElementContentAsGuid(), context);
	}
	return reader.ReadElementContentAsGuid();
};
JSIL.OverloadedMethod($asm09.System.Runtime.Serialization.GuidDataContract.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.GuidDataContract.prototype, "WriteMethodName", 
	$asm09.System.Runtime.Serialization.GuidDataContract.prototype.get_WriteMethodName, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.GuidDataContract.prototype, "ReadMethodName", 
	$asm09.System.Runtime.Serialization.GuidDataContract.prototype.get_ReadMethodName, null);

$asm09.System.Runtime.Serialization.UriDataContract.prototype._ctor = function () {
	$asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype._ctor.call(this, System.Uri, $asm09.System.Runtime.Serialization.DictionaryGlobals.UriLocalName, $asm09.System.Runtime.Serialization.DictionaryGlobals.SchemaNamespace);
};
$asm09.System.Runtime.Serialization.UriDataContract.prototype.get_WriteMethodName = function () {
	return "WriteUri";
};
$asm09.System.Runtime.Serialization.UriDataContract.prototype.get_ReadMethodName = function () {
	return "ReadElementContentAsUri";
};
$asm09.System.Runtime.Serialization.UriDataContract.prototype.WriteXmlValue = function (writer, obj, context) {
	writer.WriteUri(JSIL.Cast(obj, System.Uri));
};
$asm09.System.Runtime.Serialization.UriDataContract.prototype.ReadXmlValue = function (reader, context) {
	if (context !== null) {
		return $asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype.HandleReadValue.call(this, reader.ReadElementContentAsUri(), context);
	}
	if (!$asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype.TryReadNullAtTopLevel.call(this, reader)) {
		return reader.ReadElementContentAsUri();
	}
	return null;
};
JSIL.MakeProperty($asm09.System.Runtime.Serialization.UriDataContract.prototype, "WriteMethodName", 
	$asm09.System.Runtime.Serialization.UriDataContract.prototype.get_WriteMethodName, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.UriDataContract.prototype, "ReadMethodName", 
	$asm09.System.Runtime.Serialization.UriDataContract.prototype.get_ReadMethodName, null);

$asm09.System.Runtime.Serialization.QNameDataContract.prototype._ctor = function () {
	$asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype._ctor.call(this, System.Xml.XmlQualifiedName, $asm09.System.Runtime.Serialization.DictionaryGlobals.QNameLocalName, $asm09.System.Runtime.Serialization.DictionaryGlobals.SchemaNamespace);
};
$asm09.System.Runtime.Serialization.QNameDataContract.prototype.get_WriteMethodName = function () {
	return "WriteQName";
};
$asm09.System.Runtime.Serialization.QNameDataContract.prototype.get_ReadMethodName = function () {
	return "ReadElementContentAsQName";
};
$asm09.System.Runtime.Serialization.QNameDataContract.prototype.get_IsPrimitive = function () {
	return false;
};
$asm09.System.Runtime.Serialization.QNameDataContract.prototype.WriteXmlValue = function (writer, obj, context) {
	writer.WriteQName(JSIL.Cast(obj, System.Xml.XmlQualifiedName));
};
$asm09.System.Runtime.Serialization.QNameDataContract.prototype.ReadXmlValue = function (reader, context) {
	if (context !== null) {
		return $asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype.HandleReadValue.call(this, reader.ReadElementContentAsQName(), context);
	}
	if (!$asm09.System.Runtime.Serialization.PrimitiveDataContract.prototype.TryReadNullAtTopLevel.call(this, reader)) {
		return reader.ReadElementContentAsQName();
	}
	return null;
};
$asm09.System.Runtime.Serialization.QNameDataContract.prototype.WriteRootElement = function (writer, name, ns) {
	if (System.Object.ReferenceEquals(ns, $asm09.System.Runtime.Serialization.DictionaryGlobals.SerializationNamespace)) {
		writer.WriteStartElement$3("z", name, ns);
		return;
	}
	if (!((ns === null) || 
			(ns.Value === null) || (ns.Value.length <= 0))) {
		writer.WriteStartElement$3("q", name, ns);
		return;
	}
	writer.WriteStartElement$2(name, ns);
};
JSIL.MakeProperty($asm09.System.Runtime.Serialization.QNameDataContract.prototype, "WriteMethodName", 
	$asm09.System.Runtime.Serialization.QNameDataContract.prototype.get_WriteMethodName, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.QNameDataContract.prototype, "ReadMethodName", 
	$asm09.System.Runtime.Serialization.QNameDataContract.prototype.get_ReadMethodName, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.QNameDataContract.prototype, "IsPrimitive", 
	$asm09.System.Runtime.Serialization.QNameDataContract.prototype.get_IsPrimitive, null);

$asm09.System.Runtime.Serialization.SchemaExporter.GetXmlTypeInfo = function (type, /* ref */ stableName, /* ref */ xsdType, /* ref */ hasRoot) {
	if ($asm09.System.Runtime.Serialization.SchemaExporter.IsSpecialXmlType(type, /* ref */ stableName, /* ref */ xsdType, /* ref */ hasRoot)) {
		return;
	}
	$asm09.System.Runtime.Serialization.SchemaExporter.InvokeSchemaProviderMethod(
		type, 
		null, 
		/* ref */ stableName, 
		/* ref */ xsdType, 
		/* ref */ hasRoot
	);
	if (!((stableName.value.Name !== null) && (stableName.value.Name.length !== 0))) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Runtime.Serialization.InvalidDataContractException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("InvalidXmlDataContractName", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(type)])]));
	}
};
$asm09.System.Runtime.Serialization.SchemaExporter.InvokeSchemaProviderMethod = function (clrType, schemas, /* ref */ stableName, /* ref */ xsdType, /* ref */ hasRoot) {
	xsdType.value = null;
	hasRoot.value = true;
	var customAttributes = clrType.GetCustomAttributes$1(System.Runtime.Serialization.Globals.TypeOfXmlSchemaProviderAttribute, false);
	if (!((customAttributes !== null) && (customAttributes.length !== 0))) {
		stableName.value = $asm09.System.Runtime.Serialization.DataContract.GetDefaultStableName(clrType);
		return false;
	}
	var xmlSchemaProviderAttribute = JSIL.Cast(customAttributes[0], System.Xml.Serialization.XmlSchemaProviderAttribute);
	if (xmlSchemaProviderAttribute.IsAny) {
		xsdType.value = $asm09.System.Runtime.Serialization.SchemaExporter.CreateAnyElementType();
		hasRoot.value = false;
	}
	var methodName = xmlSchemaProviderAttribute.MethodName;
	if (!((methodName !== null) && (methodName.length !== 0))) {
		if (!xmlSchemaProviderAttribute.IsAny) {
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Runtime.Serialization.InvalidDataContractException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("InvalidGetSchemaMethod", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(clrType)])]));
		}
		stableName.value = $asm09.System.Runtime.Serialization.DataContract.GetDefaultStableName(clrType);
	} else {
		var method = clrType.GetMethod$1(
			methodName, 
			(System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static), 
			null, 
			JSIL.Array.New(System.Type, [System.Xml.Schema.XmlSchemaSet]), 
			null
		);
		if (method === null) {
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Runtime.Serialization.InvalidDataContractException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("MissingGetSchemaMethod", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(clrType), methodName])]));
		}
		if (!System.Runtime.Serialization.Globals.TypeOfXmlQualifiedName.IsAssignableFrom(method.ReturnType)) {
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Runtime.Serialization.InvalidDataContractException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("InvalidReturnTypeOnGetSchemaMethod", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(clrType), methodName, $asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(method.ReturnType), $asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(System.Runtime.Serialization.Globals.TypeOfXmlQualifiedName)])]));
		}
		var obj = method.Invoke$1(null, [schemas]);
		if (xmlSchemaProviderAttribute.IsAny) {
			if (obj !== null) {
				throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Runtime.Serialization.InvalidDataContractException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("InvalidNonNullReturnValueByIsAny", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(clrType), methodName])]));
			}
			stableName.value = $asm09.System.Runtime.Serialization.DataContract.GetDefaultStableName(clrType);
		} else if (obj === null) {
			xsdType.value = $asm09.System.Runtime.Serialization.SchemaExporter.CreateAnyElementType();
			hasRoot.value = false;
			stableName.value = $asm09.System.Runtime.Serialization.DataContract.GetDefaultStableName(clrType);
		} else {
			stableName.value = JSIL.Cast(obj, System.Xml.XmlQualifiedName);
		}
	}
	return true;
};
$asm09.System.Runtime.Serialization.SchemaExporter.CreateAnyElementType = function () {
	return new System.Object();
};
$asm09.System.Runtime.Serialization.SchemaExporter.IsSpecialXmlType = function (type, /* ref */ typeName, /* ref */ xsdType, /* ref */ hasRoot) {
	xsdType.value = null;
	hasRoot.value = true;
	typeName.value = null;
	return false;
};
$asm09.System.Runtime.Serialization.SchemaExporter.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};

$asm09.System.Runtime.Serialization.ScopedKnownTypes.prototype.Push = function (dataContractDictionary) {
	if (this.dataContractDictionaries === null) {
		this.dataContractDictionaries = JSIL.Array.New(System.Collections.Generic.Dictionary$b2.Of(System.Xml.XmlQualifiedName, $asm09.System.Runtime.Serialization.DataContract), 4);
	} else if (this.count === this.dataContractDictionaries.length) {
		System.Array.Resize$b1(System.Collections.Generic.Dictionary$b2.Of(System.Xml.XmlQualifiedName, $asm09.System.Runtime.Serialization.DataContract))(/* ref */ new JSIL.MemberReference(this, "dataContractDictionaries"), (this.dataContractDictionaries.length * 2));
	}
	this.dataContractDictionaries[this.count++] = dataContractDictionary;
};
$asm09.System.Runtime.Serialization.ScopedKnownTypes.prototype.Pop = function () {
	--this.count;
};
$asm09.System.Runtime.Serialization.ScopedKnownTypes.prototype.GetDataContract = function (qname) {
	var result = new JSIL.Variable(null);
__loop0__: 
	for (var i = (this.count - 1); i >= 0; --i) {
		var dictionary = this.dataContractDictionaries[i];
		if (dictionary.TryGetValue(qname, /* ref */ result)) {
			return result.value;
		}
	}
	return null;
};
$asm09.System.Runtime.Serialization.ScopedKnownTypes.prototype.dataContractDictionaries = null;
$asm09.System.Runtime.Serialization.ScopedKnownTypes.prototype.count = 0;

$asm09.System.Runtime.Serialization.XmlDataContract.prototype._ctor$0 = function () {
	$asm09.System.Runtime.Serialization.DataContract.prototype._ctor.call(this, JSIL.New($asm09.System.Runtime.Serialization.XmlDataContract.XmlDataContractCriticalHelper, "_ctor$0", []));
	this.helper = JSIL.TryCast($asm09.System.Runtime.Serialization.DataContract.prototype.get_Helper.call(this), $asm09.System.Runtime.Serialization.XmlDataContract.XmlDataContractCriticalHelper);
};
$asm09.System.Runtime.Serialization.XmlDataContract.prototype._ctor$1 = function (type) {
	$asm09.System.Runtime.Serialization.DataContract.prototype._ctor.call(this, JSIL.New($asm09.System.Runtime.Serialization.XmlDataContract.XmlDataContractCriticalHelper, "_ctor$1", [type]));
	this.helper = JSIL.TryCast($asm09.System.Runtime.Serialization.DataContract.prototype.get_Helper.call(this), $asm09.System.Runtime.Serialization.XmlDataContract.XmlDataContractCriticalHelper);
};
$asm09.System.Runtime.Serialization.XmlDataContract.prototype.get_KnownDataContracts = function () {
	return this.helper.KnownDataContracts;
};
$asm09.System.Runtime.Serialization.XmlDataContract.prototype.set_KnownDataContracts = function (value) {
	this.helper.KnownDataContracts = value;
};
$asm09.System.Runtime.Serialization.XmlDataContract.prototype.get_IsAnonymous = function () {
	return this.helper.IsAnonymous;
};
$asm09.System.Runtime.Serialization.XmlDataContract.prototype.get_HasRoot = function () {
	return this.helper.HasRoot;
};
$asm09.System.Runtime.Serialization.XmlDataContract.prototype.set_HasRoot = function (value) {
	this.helper.HasRoot = value;
};
$asm09.System.Runtime.Serialization.XmlDataContract.prototype.get_TopLevelElementName = function () {
	return this.helper.TopLevelElementName;
};
$asm09.System.Runtime.Serialization.XmlDataContract.prototype.set_TopLevelElementName = function (value) {
	this.helper.TopLevelElementName = value;
};
$asm09.System.Runtime.Serialization.XmlDataContract.prototype.get_TopLevelElementNamespace = function () {
	return this.helper.TopLevelElementNamespace;
};
$asm09.System.Runtime.Serialization.XmlDataContract.prototype.set_TopLevelElementNamespace = function (value) {
	this.helper.TopLevelElementNamespace = value;
};
$asm09.System.Runtime.Serialization.XmlDataContract.prototype.get_CreateXmlSerializableDelegate = function () {
	if (this.helper.CreateXmlSerializableDelegate === null) {
		System.Threading.Monitor.Enter(this);
		try {
			if (this.helper.CreateXmlSerializableDelegate === null) {
				var createXmlSerializableDelegate = this.GenerateCreateXmlSerializableDelegate();
				System.Threading.Thread.MemoryBarrier();
				this.helper.CreateXmlSerializableDelegate = createXmlSerializableDelegate;
			}
		} finally {
			System.Threading.Monitor.Exit(this);
		}
	}
	return this.helper.CreateXmlSerializableDelegate;
};
$asm09.System.Runtime.Serialization.XmlDataContract.prototype.get_CanContainReferences = function () {
	return false;
};
$asm09.System.Runtime.Serialization.XmlDataContract.prototype.get_IsBuiltInDataContract = function () {
	return false;
};
$asm09.System.Runtime.Serialization.XmlDataContract.prototype.GetConstructor = function () {
	var underlyingType = $asm09.System.Runtime.Serialization.DataContract.prototype.get_UnderlyingType.call(this);
	if (underlyingType.IsValueType) {
		return null;
	}
	var constructor = underlyingType.GetConstructor$1((System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public), null, System.Runtime.Serialization.Globals.EmptyTypeArray, null);
	if (constructor === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Runtime.Serialization.InvalidDataContractException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("IXmlSerializableMustHaveDefaultConstructor", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(underlyingType)])]));
	}
	return constructor;
};
$asm09.System.Runtime.Serialization.XmlDataContract.prototype.GenerateCreateXmlSerializableDelegate = function () {
	var underlyingType = $asm09.System.Runtime.Serialization.DataContract.prototype.get_UnderlyingType.call(this);
	var codeGenerator = new $asm09.System.Runtime.Serialization.CodeGenerator();
	var flag = (this.RequiresMemberAccessForCreate(null, System.Runtime.Serialization.Globals.DataContractSerializationPatterns) && 
		!(underlyingType.FullName == "System.Xml.Linq.XElement"));
	try {
		codeGenerator.BeginMethod$1(("Create" + $asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(underlyingType)), $asm09.System.Runtime.Serialization.CreateXmlSerializableDelegate, flag);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.Security.SecurityException)) {
			var arg_55_0 = $exception;
			if (!flag) {
				throw $exception;
			}
			this.RequiresMemberAccessForCreate(arg_55_0, System.Runtime.Serialization.Globals.DataContractSerializationPatterns);
		} else {
			throw $exception;
		}
	}
	if (underlyingType.IsValueType) {
		var localBuilder = codeGenerator.DeclareLocal$1(underlyingType, (underlyingType.Name + "Value"));
		codeGenerator.Ldloca(localBuilder);
		codeGenerator.InitObj(underlyingType);
		codeGenerator.Ldloc(localBuilder);
	} else {
		var constructorInfo = this.GetConstructor();
		if (!(constructorInfo.IsPublic || !(underlyingType.FullName == "System.Xml.Linq.XElement"))) {
			var type = underlyingType.Assembly.GetType$0("System.Xml.Linq.XName");
			if (type !== null) {
				var method = type.GetMethod$1(
					"op_Implicit", 
					(System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static), 
					null, 
					JSIL.Array.New(System.Type, [System.String]), 
					null
				);
				var constructor = underlyingType.GetConstructor$1((System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public), null, JSIL.Array.New(System.Type, [type]), null);
				if (!((method === null) || (constructor === null))) {
					codeGenerator.Ldstr("default");
					codeGenerator.Call$7(method);
					constructorInfo = constructor;
				}
			}
		}
		codeGenerator.New(constructorInfo);
	}
	codeGenerator.ConvertValue($asm09.System.Runtime.Serialization.DataContract.prototype.get_UnderlyingType.call(this), System.Runtime.Serialization.Globals.TypeOfIXmlSerializable);
	codeGenerator.Ret();
	return codeGenerator.EndMethod();
};
$asm09.System.Runtime.Serialization.XmlDataContract.prototype.RequiresMemberAccessForCreate = function (securityException, serializationAssemblyPatterns) {
	if (!$asm09.System.Runtime.Serialization.DataContract.IsTypeVisible($asm09.System.Runtime.Serialization.DataContract.prototype.get_UnderlyingType.call(this), serializationAssemblyPatterns)) {
		if (securityException !== null) {
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Security.SecurityException, "_ctor$2", [$asm09.System.Runtime.Serialization.SR.GetString$0("PartialTrustIXmlSerializableTypeNotPublic", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName($asm09.System.Runtime.Serialization.DataContract.prototype.get_UnderlyingType.call(this))]), securityException]));
		}
		return true;
	} else {
		if (!$asm09.System.Runtime.Serialization.DataContract.ConstructorRequiresMemberAccess(this.GetConstructor(), serializationAssemblyPatterns)) {
			return false;
		}
		if (securityException !== null) {
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Security.SecurityException, "_ctor$2", [$asm09.System.Runtime.Serialization.SR.GetString$0("PartialTrustIXmlSerialzableNoPublicConstructor", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName($asm09.System.Runtime.Serialization.DataContract.prototype.get_UnderlyingType.call(this))]), securityException]));
		}
		return true;
	}
};
$asm09.System.Runtime.Serialization.XmlDataContract.prototype.WriteXmlValue = function (xmlWriter, obj, context) {
	if (context === null) {
		$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.WriteRootIXmlSerializable(xmlWriter, obj);
		return;
	}
	context.WriteIXmlSerializable(xmlWriter, obj);
};
$asm09.System.Runtime.Serialization.XmlDataContract.prototype.ReadXmlValue = function (xmlReader, context) {
	if (context === null) {
		var obj = $asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.ReadRootIXmlSerializable(xmlReader, this, true);
	} else {
		obj = context.ReadIXmlSerializable(xmlReader, this, true);
		context.AddNewObject(obj);
	}
	xmlReader.ReadEndElement();
	return obj;
};
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlDataContract.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Type]]
	]);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlDataContract.prototype, "KnownDataContracts", 
	$asm09.System.Runtime.Serialization.XmlDataContract.prototype.get_KnownDataContracts, $asm09.System.Runtime.Serialization.XmlDataContract.prototype.set_KnownDataContracts);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlDataContract.prototype, "IsAnonymous", 
	$asm09.System.Runtime.Serialization.XmlDataContract.prototype.get_IsAnonymous, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlDataContract.prototype, "HasRoot", 
	$asm09.System.Runtime.Serialization.XmlDataContract.prototype.get_HasRoot, $asm09.System.Runtime.Serialization.XmlDataContract.prototype.set_HasRoot);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlDataContract.prototype, "TopLevelElementName", 
	$asm09.System.Runtime.Serialization.XmlDataContract.prototype.get_TopLevelElementName, $asm09.System.Runtime.Serialization.XmlDataContract.prototype.set_TopLevelElementName);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlDataContract.prototype, "TopLevelElementNamespace", 
	$asm09.System.Runtime.Serialization.XmlDataContract.prototype.get_TopLevelElementNamespace, $asm09.System.Runtime.Serialization.XmlDataContract.prototype.set_TopLevelElementNamespace);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlDataContract.prototype, "CreateXmlSerializableDelegate", 
	$asm09.System.Runtime.Serialization.XmlDataContract.prototype.get_CreateXmlSerializableDelegate, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlDataContract.prototype, "CanContainReferences", 
	$asm09.System.Runtime.Serialization.XmlDataContract.prototype.get_CanContainReferences, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlDataContract.prototype, "IsBuiltInDataContract", 
	$asm09.System.Runtime.Serialization.XmlDataContract.prototype.get_IsBuiltInDataContract, null);
$asm09.System.Runtime.Serialization.XmlDataContract.prototype.helper = null;

$asm09.System.Runtime.Serialization.XmlDataContract.XmlDataContractCriticalHelper.prototype._ctor$0 = function () {
	$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype._ctor$0.call(this);
};
$asm09.System.Runtime.Serialization.XmlDataContract.XmlDataContractCriticalHelper.prototype._ctor$1 = function (type) {
	var stableName = new JSIL.Variable(null), obj = new JSIL.Variable(null), flag = new JSIL.Variable(false);
	$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype._ctor$1.call(this, type);
	if (type.IsDefined(System.Runtime.Serialization.Globals.TypeOfDataContractAttribute, false)) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Runtime.Serialization.InvalidDataContractException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("IXmlSerializableCannotHaveDataContract", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(type)])]));
	}
	if (type.IsDefined(System.Runtime.Serialization.Globals.TypeOfCollectionDataContractAttribute, false)) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Runtime.Serialization.InvalidDataContractException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("IXmlSerializableCannotHaveCollectionDataContract", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(type)])]));
	}
	$asm09.System.Runtime.Serialization.SchemaExporter.GetXmlTypeInfo(type, /* ref */ stableName, /* ref */ obj, /* ref */ flag);
	$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.set_StableName.call(this, stableName.value);
	this.HasRoot = flag.value;
	var xmlDictionary = JSIL.New(System.Xml.XmlDictionary, "_ctor$0", []);
	$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.set_Name.call(this, xmlDictionary.Add($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_StableName.call(this).Name));
	$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.set_Namespace.call(this, xmlDictionary.Add($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_StableName.call(this).Namespace));
	var array = ($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_UnderlyingType.call(this) === null) ? null : $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_UnderlyingType.call(this).GetCustomAttributes$1(System.Runtime.Serialization.Globals.TypeOfXmlRootAttribute, false);
	if (!((array !== null) && (array.length !== 0))) {
		if (flag.value) {
			this.topLevelElementName = $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_Name.call(this);
			this.topLevelElementNamespace = $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_StableName.call(this).Namespace == "http://www.w3.org/2001/XMLSchema" ? $asm09.System.Runtime.Serialization.DictionaryGlobals.EmptyString : $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_Namespace.call(this);
			return;
		}
		return;
	} else {
		if (flag.value) {
			var xmlRootAttribute = JSIL.Cast(array[0], System.Xml.Serialization.XmlRootAttribute);
			var elementName = xmlRootAttribute.ElementName;
			this.topLevelElementName = ((elementName === null) || 
				(elementName.length === 0)) ? $asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_Name.call(this) : xmlDictionary.Add($asm09.System.Runtime.Serialization.DataContract.EncodeLocalName(elementName));
			var namespace = xmlRootAttribute.Namespace;
			this.topLevelElementNamespace = ((namespace === null) || 
				(namespace.length === 0)) ? $asm09.System.Runtime.Serialization.DictionaryGlobals.EmptyString : xmlDictionary.Add(namespace);
			return;
		}
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Runtime.Serialization.InvalidDataContractException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("IsAnyCannotHaveXmlRoot", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_UnderlyingType.call(this))])]));
	}
};
$asm09.System.Runtime.Serialization.XmlDataContract.XmlDataContractCriticalHelper.prototype.get_KnownDataContracts = function () {
	if (!(this.isKnownTypeAttributeChecked || ($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_UnderlyingType.call(this) === null))) {
		System.Threading.Monitor.Enter(this);
		try {
			if (!this.isKnownTypeAttributeChecked) {
				this.knownDataContracts = $asm09.System.Runtime.Serialization.DataContract.ImportKnownTypeAttributes$0($asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.get_UnderlyingType.call(this));
				System.Threading.Thread.MemoryBarrier();
				this.isKnownTypeAttributeChecked = true;
			}
		} finally {
			System.Threading.Monitor.Exit(this);
		}
	}
	return this.knownDataContracts;
};
$asm09.System.Runtime.Serialization.XmlDataContract.XmlDataContractCriticalHelper.prototype.set_KnownDataContracts = function (value) {
	this.knownDataContracts = value;
};
$asm09.System.Runtime.Serialization.XmlDataContract.XmlDataContractCriticalHelper.prototype.get_IsAnonymous = function () {
	return false;
};
$asm09.System.Runtime.Serialization.XmlDataContract.XmlDataContractCriticalHelper.prototype.get_HasRoot = function () {
	return this.hasRoot;
};
$asm09.System.Runtime.Serialization.XmlDataContract.XmlDataContractCriticalHelper.prototype.set_HasRoot = function (value) {
	this.hasRoot = value;
};
$asm09.System.Runtime.Serialization.XmlDataContract.XmlDataContractCriticalHelper.prototype.get_TopLevelElementName = function () {
	return this.topLevelElementName;
};
$asm09.System.Runtime.Serialization.XmlDataContract.XmlDataContractCriticalHelper.prototype.set_TopLevelElementName = function (value) {
	this.topLevelElementName = value;
};
$asm09.System.Runtime.Serialization.XmlDataContract.XmlDataContractCriticalHelper.prototype.get_TopLevelElementNamespace = function () {
	return this.topLevelElementNamespace;
};
$asm09.System.Runtime.Serialization.XmlDataContract.XmlDataContractCriticalHelper.prototype.set_TopLevelElementNamespace = function (value) {
	this.topLevelElementNamespace = value;
};
$asm09.System.Runtime.Serialization.XmlDataContract.XmlDataContractCriticalHelper.prototype.get_CreateXmlSerializableDelegate = function () {
	return this.createXmlSerializable;
};
$asm09.System.Runtime.Serialization.XmlDataContract.XmlDataContractCriticalHelper.prototype.set_CreateXmlSerializableDelegate = function (value) {
	this.createXmlSerializable = value;
};
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlDataContract.XmlDataContractCriticalHelper.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Type]]
	]);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlDataContract.XmlDataContractCriticalHelper.prototype, "KnownDataContracts", 
	$asm09.System.Runtime.Serialization.XmlDataContract.XmlDataContractCriticalHelper.prototype.get_KnownDataContracts, $asm09.System.Runtime.Serialization.XmlDataContract.XmlDataContractCriticalHelper.prototype.set_KnownDataContracts);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlDataContract.XmlDataContractCriticalHelper.prototype, "IsAnonymous", 
	$asm09.System.Runtime.Serialization.XmlDataContract.XmlDataContractCriticalHelper.prototype.get_IsAnonymous, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlDataContract.XmlDataContractCriticalHelper.prototype, "HasRoot", 
	$asm09.System.Runtime.Serialization.XmlDataContract.XmlDataContractCriticalHelper.prototype.get_HasRoot, $asm09.System.Runtime.Serialization.XmlDataContract.XmlDataContractCriticalHelper.prototype.set_HasRoot);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlDataContract.XmlDataContractCriticalHelper.prototype, "TopLevelElementName", 
	$asm09.System.Runtime.Serialization.XmlDataContract.XmlDataContractCriticalHelper.prototype.get_TopLevelElementName, $asm09.System.Runtime.Serialization.XmlDataContract.XmlDataContractCriticalHelper.prototype.set_TopLevelElementName);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlDataContract.XmlDataContractCriticalHelper.prototype, "TopLevelElementNamespace", 
	$asm09.System.Runtime.Serialization.XmlDataContract.XmlDataContractCriticalHelper.prototype.get_TopLevelElementNamespace, $asm09.System.Runtime.Serialization.XmlDataContract.XmlDataContractCriticalHelper.prototype.set_TopLevelElementNamespace);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlDataContract.XmlDataContractCriticalHelper.prototype, "CreateXmlSerializableDelegate", 
	$asm09.System.Runtime.Serialization.XmlDataContract.XmlDataContractCriticalHelper.prototype.get_CreateXmlSerializableDelegate, $asm09.System.Runtime.Serialization.XmlDataContract.XmlDataContractCriticalHelper.prototype.set_CreateXmlSerializableDelegate);
$asm09.System.Runtime.Serialization.XmlDataContract.XmlDataContractCriticalHelper.prototype.knownDataContracts = null;
$asm09.System.Runtime.Serialization.XmlDataContract.XmlDataContractCriticalHelper.prototype.isKnownTypeAttributeChecked = false;
$asm09.System.Runtime.Serialization.XmlDataContract.XmlDataContractCriticalHelper.prototype.topLevelElementName = null;
$asm09.System.Runtime.Serialization.XmlDataContract.XmlDataContractCriticalHelper.prototype.topLevelElementNamespace = null;
$asm09.System.Runtime.Serialization.XmlDataContract.XmlDataContractCriticalHelper.prototype.hasRoot = false;
$asm09.System.Runtime.Serialization.XmlDataContract.XmlDataContractCriticalHelper.prototype.createXmlSerializable = null;

$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_WriteStartElementMethod2 = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.writeStartElementMethod2 === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.writeStartElementMethod2 = $asm09.System.Runtime.Serialization.XmlWriterDelegator.GetMethod$1(
			"WriteStartElement", 
			(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static), 
			null, 
			JSIL.Array.New(System.Type, [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]), 
			null
		);
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.writeStartElementMethod2;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_WriteStartElementMethod3 = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.writeStartElementMethod3 === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.writeStartElementMethod3 = $asm09.System.Runtime.Serialization.XmlWriterDelegator.GetMethod$1(
			"WriteStartElement", 
			(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static), 
			null, 
			JSIL.Array.New(System.Type, [System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]), 
			null
		);
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.writeStartElementMethod3;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_WriteEndElementMethod = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.writeEndElementMethod === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.writeEndElementMethod = $asm09.System.Runtime.Serialization.XmlWriterDelegator.GetMethod$1(
			"WriteEndElement", 
			(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static), 
			null, 
			JSIL.Array.New(System.Type, 0), 
			null
		);
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.writeEndElementMethod;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_WriteNamespaceDeclMethod = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.writeNamespaceDeclMethod === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.writeNamespaceDeclMethod = $asm09.System.Runtime.Serialization.XmlWriterDelegator.GetMethod$1(
			"WriteNamespaceDecl", 
			(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static), 
			null, 
			JSIL.Array.New(System.Type, [System.Xml.XmlDictionaryString]), 
			null
		);
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.writeNamespaceDeclMethod;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_DictionaryEnumeratorCtor = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.dictionaryEnumeratorCtor === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.dictionaryEnumeratorCtor = System.Runtime.Serialization.Globals.TypeOfDictionaryEnumerator.GetConstructor$1((System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static), null, JSIL.Array.New(System.Type, [System.Runtime.Serialization.Globals.TypeOfIDictionaryEnumerator]), null);
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.dictionaryEnumeratorCtor;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_MoveNextMethod = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.ienumeratorMoveNextMethod === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.ienumeratorMoveNextMethod = System.Collections.IEnumerator.GetMethod$5("MoveNext");
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.ienumeratorMoveNextMethod;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_GetCurrentMethod = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.ienumeratorGetCurrentMethod === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.ienumeratorGetCurrentMethod = (System.Collections.IEnumerator.GetProperty$6("Current")).GetGetMethod$1();
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.ienumeratorGetCurrentMethod;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_GetItemContractMethod = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getItemContractMethod === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getItemContractMethod = ($asm09.System.Runtime.Serialization.CollectionDataContract.GetProperty$2("ItemContract", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static))).GetGetMethod$0(true);
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getItemContractMethod;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_IsStartElementMethod2 = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.isStartElementMethod2 === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.isStartElementMethod2 = $asm09.System.Runtime.Serialization.XmlReaderDelegator.GetMethod$1(
			"IsStartElement", 
			(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static), 
			null, 
			JSIL.Array.New(System.Type, [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]), 
			null
		);
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.isStartElementMethod2;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_IsStartElementMethod0 = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.isStartElementMethod0 === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.isStartElementMethod0 = $asm09.System.Runtime.Serialization.XmlReaderDelegator.GetMethod$1(
			"IsStartElement", 
			(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static), 
			null, 
			JSIL.Array.New(System.Type, 0), 
			null
		);
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.isStartElementMethod0;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_GetUninitializedObjectMethod = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getUninitializedObjectMethod === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getUninitializedObjectMethod = $asm09.System.Runtime.Serialization.XmlFormatReaderGenerator.GetMethod$1(
			"UnsafeGetUninitializedObject", 
			(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static), 
			null, 
			JSIL.Array.New(System.Type, [System.Int32]), 
			null
		);
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getUninitializedObjectMethod;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_NodeTypeProperty = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.nodeTypeProperty === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.nodeTypeProperty = $asm09.System.Runtime.Serialization.XmlReaderDelegator.GetProperty$2("NodeType", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.nodeTypeProperty;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_GetStreamingContextMethod = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getStreamingContextMethod === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getStreamingContextMethod = $asm09.System.Runtime.Serialization.XmlObjectSerializerContext.GetMethod$4("GetStreamingContext", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getStreamingContextMethod;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_GetCollectionMemberMethod = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getCollectionMemberMethod === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getCollectionMemberMethod = $asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.GetMethod$4("GetCollectionMember", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getCollectionMemberMethod;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_StoreCollectionMemberInfoMethod = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.storeCollectionMemberInfoMethod === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.storeCollectionMemberInfoMethod = $asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.GetMethod$1(
			"StoreCollectionMemberInfo", 
			(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static), 
			null, 
			JSIL.Array.New(System.Type, [System.Object]), 
			null
		);
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.storeCollectionMemberInfoMethod;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_StoreIsGetOnlyCollectionMethod = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.storeIsGetOnlyCollectionMethod === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.storeIsGetOnlyCollectionMethod = $asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.GetMethod$4("StoreIsGetOnlyCollection", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.storeIsGetOnlyCollectionMethod;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_ThrowNullValueReturnedForGetOnlyCollectionExceptionMethod = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.throwNullValueReturnedForGetOnlyCollectionExceptionMethod === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.throwNullValueReturnedForGetOnlyCollectionExceptionMethod = $asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.GetMethod$4("ThrowNullValueReturnedForGetOnlyCollectionException", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.throwNullValueReturnedForGetOnlyCollectionExceptionMethod;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_ThrowArrayExceededSizeExceptionMethod = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.throwArrayExceededSizeExceptionMethod === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.throwArrayExceededSizeExceptionMethod = $asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.GetMethod$4("ThrowArrayExceededSizeException", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.throwArrayExceededSizeExceptionMethod;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_IncrementItemCountMethod = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.incrementItemCountMethod === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.incrementItemCountMethod = $asm09.System.Runtime.Serialization.XmlObjectSerializerContext.GetMethod$4("IncrementItemCount", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.incrementItemCountMethod;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_InternalDeserializeMethod = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.internalDeserializeMethod === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.internalDeserializeMethod = $asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.GetMethod$1(
			"InternalDeserialize", 
			(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static), 
			null, 
			JSIL.Array.New(System.Type, [$asm09.System.Runtime.Serialization.XmlReaderDelegator, System.Int32, System.RuntimeTypeHandle, System.String, System.String]), 
			null
		);
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.internalDeserializeMethod;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_MoveToNextElementMethod = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.moveToNextElementMethod === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.moveToNextElementMethod = $asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.GetMethod$4("MoveToNextElement", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.moveToNextElementMethod;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_GetMemberIndexMethod = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getMemberIndexMethod === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getMemberIndexMethod = $asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.GetMethod$4("GetMemberIndex", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getMemberIndexMethod;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_GetMemberIndexWithRequiredMembersMethod = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getMemberIndexWithRequiredMembersMethod === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getMemberIndexWithRequiredMembersMethod = $asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.GetMethod$4("GetMemberIndexWithRequiredMembers", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getMemberIndexWithRequiredMembersMethod;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_ThrowRequiredMemberMissingExceptionMethod = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.throwRequiredMemberMissingExceptionMethod === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.throwRequiredMemberMissingExceptionMethod = $asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.GetMethod$4("ThrowRequiredMemberMissingException", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.throwRequiredMemberMissingExceptionMethod;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_SkipUnknownElementMethod = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.skipUnknownElementMethod === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.skipUnknownElementMethod = $asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.GetMethod$4("SkipUnknownElement", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.skipUnknownElementMethod;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_ReadIfNullOrRefMethod = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.readIfNullOrRefMethod === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.readIfNullOrRefMethod = $asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.GetMethod$1(
			"ReadIfNullOrRef", 
			(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static), 
			null, 
			JSIL.Array.New(System.Type, [$asm09.System.Runtime.Serialization.XmlReaderDelegator, System.Type, System.Boolean]), 
			null
		);
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.readIfNullOrRefMethod;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_ReadAttributesMethod = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.readAttributesMethod === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.readAttributesMethod = $asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.GetMethod$4("ReadAttributes", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.readAttributesMethod;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_ResetAttributesMethod = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.resetAttributesMethod === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.resetAttributesMethod = $asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.GetMethod$4("ResetAttributes", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.resetAttributesMethod;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_GetObjectIdMethod = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getObjectIdMethod === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getObjectIdMethod = $asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.GetMethod$4("GetObjectId", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getObjectIdMethod;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_GetArraySizeMethod = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getArraySizeMethod === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getArraySizeMethod = $asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.GetMethod$4("GetArraySize", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getArraySizeMethod;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_AddNewObjectMethod = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.addNewObjectMethod === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.addNewObjectMethod = $asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.GetMethod$4("AddNewObject", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.addNewObjectMethod;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_AddNewObjectWithIdMethod = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.addNewObjectWithIdMethod === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.addNewObjectWithIdMethod = $asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.GetMethod$4("AddNewObjectWithId", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.addNewObjectWithIdMethod;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_GetExistingObjectMethod = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getExistingObjectMethod === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getExistingObjectMethod = $asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.GetMethod$4("GetExistingObject", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getExistingObjectMethod;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_EnsureArraySizeMethod = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.ensureArraySizeMethod === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.ensureArraySizeMethod = $asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.GetMethod$4("EnsureArraySize", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.ensureArraySizeMethod;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_TrimArraySizeMethod = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.trimArraySizeMethod === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.trimArraySizeMethod = $asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.GetMethod$4("TrimArraySize", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.trimArraySizeMethod;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_CheckEndOfArrayMethod = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.checkEndOfArrayMethod === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.checkEndOfArrayMethod = $asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.GetMethod$4("CheckEndOfArray", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.checkEndOfArrayMethod;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_GetArrayLengthMethod = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getArrayLengthMethod === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getArrayLengthMethod = (System.Runtime.Serialization.Globals.TypeOfArray.GetProperty$6("Length")).GetGetMethod$1();
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getArrayLengthMethod;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_CreateSerializationExceptionMethod = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.createSerializationExceptionMethod === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.createSerializationExceptionMethod = $asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.GetMethod$1(
			"CreateSerializationException", 
			(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static), 
			null, 
			JSIL.Array.New(System.Type, [System.String]), 
			null
		);
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.createSerializationExceptionMethod;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_CreateUnexpectedStateExceptionMethod = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.createUnexpectedStateExceptionMethod === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.createUnexpectedStateExceptionMethod = $asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.GetMethod$1(
			"CreateUnexpectedStateException", 
			(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static), 
			null, 
			JSIL.Array.New(System.Type, [System.Xml.XmlNodeType, $asm09.System.Runtime.Serialization.XmlReaderDelegator]), 
			null
		);
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.createUnexpectedStateExceptionMethod;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_InternalSerializeReferenceMethod = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.internalSerializeReferenceMethod === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.internalSerializeReferenceMethod = $asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.GetMethod$4("InternalSerializeReference", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.internalSerializeReferenceMethod;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_InternalSerializeMethod = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.internalSerializeMethod === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.internalSerializeMethod = $asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.GetMethod$4("InternalSerialize", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.internalSerializeMethod;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_WriteNullMethod = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.writeNullMethod === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.writeNullMethod = $asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.GetMethod$1(
			"WriteNull", 
			(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static), 
			null, 
			JSIL.Array.New(System.Type, [$asm09.System.Runtime.Serialization.XmlWriterDelegator, System.Type, System.Boolean]), 
			null
		);
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.writeNullMethod;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_IncrementArrayCountMethod = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.incrementArrayCountMethod === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.incrementArrayCountMethod = $asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.GetMethod$4("IncrementArrayCount", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.incrementArrayCountMethod;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_IncrementCollectionCountMethod = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.incrementCollectionCountMethod === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.incrementCollectionCountMethod = $asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.GetMethod$1(
			"IncrementCollectionCount", 
			(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static), 
			null, 
			JSIL.Array.New(System.Type, [$asm09.System.Runtime.Serialization.XmlWriterDelegator, System.Collections.ICollection]), 
			null
		);
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.incrementCollectionCountMethod;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_IncrementCollectionCountGenericMethod = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.incrementCollectionCountGenericMethod === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.incrementCollectionCountGenericMethod = $asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.GetMethod$4("IncrementCollectionCountGeneric", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.incrementCollectionCountGenericMethod;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_GetDefaultValueMethod = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getDefaultValueMethod === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getDefaultValueMethod = $asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.GetMethod$4("GetDefaultValue", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getDefaultValueMethod;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_GetNullableValueMethod = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getNullableValueMethod === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getNullableValueMethod = $asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.GetMethod$4("GetNullableValue", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getNullableValueMethod;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_ThrowRequiredMemberMustBeEmittedMethod = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.throwRequiredMemberMustBeEmittedMethod === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.throwRequiredMemberMustBeEmittedMethod = $asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.GetMethod$4("ThrowRequiredMemberMustBeEmitted", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.throwRequiredMemberMustBeEmittedMethod;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_GetHasValueMethod = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getHasValueMethod === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getHasValueMethod = $asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.GetMethod$4("GetHasValue", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getHasValueMethod;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_IsMemberTypeSameAsMemberValue = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.isMemberTypeSameAsMemberValue === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.isMemberTypeSameAsMemberValue = $asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.GetMethod$1(
			"IsMemberTypeSameAsMemberValue", 
			(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static), 
			null, 
			JSIL.Array.New(System.Type, [System.Object, System.Type]), 
			null
		);
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.isMemberTypeSameAsMemberValue;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_WriteXmlValueMethod = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.writeXmlValueMethod === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.writeXmlValueMethod = $asm09.System.Runtime.Serialization.DataContract.GetMethod$4("WriteXmlValue", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.writeXmlValueMethod;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_ReadXmlValueMethod = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.readXmlValueMethod === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.readXmlValueMethod = $asm09.System.Runtime.Serialization.DataContract.GetMethod$4("ReadXmlValue", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.readXmlValueMethod;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_NamespaceProperty = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.namespaceProperty === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.namespaceProperty = $asm09.System.Runtime.Serialization.DataContract.GetProperty$2("Namespace", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.namespaceProperty;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_ContractNamespacesField = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.contractNamespacesField === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.contractNamespacesField = $asm09.System.Runtime.Serialization.ClassDataContract.GetField$0("ContractNamespaces", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.contractNamespacesField;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_MemberNamesField = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.memberNamesField === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.memberNamesField = $asm09.System.Runtime.Serialization.ClassDataContract.GetField$0("MemberNames", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.memberNamesField;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_ChildElementNamespacesProperty = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.childElementNamespacesProperty === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.childElementNamespacesProperty = $asm09.System.Runtime.Serialization.ClassDataContract.GetProperty$2("ChildElementNamespaces", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.childElementNamespacesProperty;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_CollectionItemNameProperty = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.collectionItemNameProperty === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.collectionItemNameProperty = $asm09.System.Runtime.Serialization.CollectionDataContract.GetProperty$2("CollectionItemName", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.collectionItemNameProperty;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_ChildElementNamespaceProperty = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.childElementNamespaceProperty === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.childElementNamespaceProperty = $asm09.System.Runtime.Serialization.CollectionDataContract.GetProperty$2("ChildElementNamespace", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.childElementNamespaceProperty;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_GetDateTimeOffsetMethod = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getDateTimeOffsetMethod === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getDateTimeOffsetMethod = $asm09.System.Runtime.Serialization.DateTimeOffsetAdapter.GetMethod$4("GetDateTimeOffset", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getDateTimeOffsetMethod;
};
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_GetDateTimeOffsetAdapterMethod = function () {
	if ($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getDateTimeOffsetAdapterMethod === null) {
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getDateTimeOffsetAdapterMethod = $asm09.System.Runtime.Serialization.DateTimeOffsetAdapter.GetMethod$4("GetDateTimeOffsetAdapter", (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static));
	}
	return $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getDateTimeOffsetAdapterMethod;
};
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "WriteStartElementMethod2", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_WriteStartElementMethod2, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "WriteStartElementMethod3", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_WriteStartElementMethod3, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "WriteEndElementMethod", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_WriteEndElementMethod, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "WriteNamespaceDeclMethod", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_WriteNamespaceDeclMethod, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "DictionaryEnumeratorCtor", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_DictionaryEnumeratorCtor, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "MoveNextMethod", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_MoveNextMethod, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "GetCurrentMethod", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_GetCurrentMethod, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "GetItemContractMethod", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_GetItemContractMethod, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "IsStartElementMethod2", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_IsStartElementMethod2, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "IsStartElementMethod0", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_IsStartElementMethod0, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "GetUninitializedObjectMethod", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_GetUninitializedObjectMethod, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "NodeTypeProperty", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_NodeTypeProperty, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "GetStreamingContextMethod", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_GetStreamingContextMethod, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "GetCollectionMemberMethod", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_GetCollectionMemberMethod, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "StoreCollectionMemberInfoMethod", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_StoreCollectionMemberInfoMethod, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "StoreIsGetOnlyCollectionMethod", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_StoreIsGetOnlyCollectionMethod, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "ThrowNullValueReturnedForGetOnlyCollectionExceptionMethod", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_ThrowNullValueReturnedForGetOnlyCollectionExceptionMethod, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "ThrowArrayExceededSizeExceptionMethod", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_ThrowArrayExceededSizeExceptionMethod, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "IncrementItemCountMethod", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_IncrementItemCountMethod, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "InternalDeserializeMethod", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_InternalDeserializeMethod, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "MoveToNextElementMethod", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_MoveToNextElementMethod, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "GetMemberIndexMethod", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_GetMemberIndexMethod, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "GetMemberIndexWithRequiredMembersMethod", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_GetMemberIndexWithRequiredMembersMethod, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "ThrowRequiredMemberMissingExceptionMethod", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_ThrowRequiredMemberMissingExceptionMethod, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "SkipUnknownElementMethod", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_SkipUnknownElementMethod, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "ReadIfNullOrRefMethod", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_ReadIfNullOrRefMethod, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "ReadAttributesMethod", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_ReadAttributesMethod, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "ResetAttributesMethod", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_ResetAttributesMethod, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "GetObjectIdMethod", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_GetObjectIdMethod, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "GetArraySizeMethod", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_GetArraySizeMethod, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "AddNewObjectMethod", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_AddNewObjectMethod, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "AddNewObjectWithIdMethod", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_AddNewObjectWithIdMethod, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "GetExistingObjectMethod", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_GetExistingObjectMethod, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "EnsureArraySizeMethod", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_EnsureArraySizeMethod, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "TrimArraySizeMethod", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_TrimArraySizeMethod, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "CheckEndOfArrayMethod", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_CheckEndOfArrayMethod, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "GetArrayLengthMethod", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_GetArrayLengthMethod, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "CreateSerializationExceptionMethod", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_CreateSerializationExceptionMethod, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "CreateUnexpectedStateExceptionMethod", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_CreateUnexpectedStateExceptionMethod, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "InternalSerializeReferenceMethod", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_InternalSerializeReferenceMethod, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "InternalSerializeMethod", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_InternalSerializeMethod, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "WriteNullMethod", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_WriteNullMethod, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "IncrementArrayCountMethod", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_IncrementArrayCountMethod, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "IncrementCollectionCountMethod", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_IncrementCollectionCountMethod, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "IncrementCollectionCountGenericMethod", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_IncrementCollectionCountGenericMethod, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "GetDefaultValueMethod", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_GetDefaultValueMethod, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "GetNullableValueMethod", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_GetNullableValueMethod, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "ThrowRequiredMemberMustBeEmittedMethod", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_ThrowRequiredMemberMustBeEmittedMethod, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "GetHasValueMethod", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_GetHasValueMethod, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "IsMemberTypeSameAsMemberValue", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_IsMemberTypeSameAsMemberValue, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "WriteXmlValueMethod", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_WriteXmlValueMethod, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "ReadXmlValueMethod", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_ReadXmlValueMethod, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "NamespaceProperty", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_NamespaceProperty, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "ContractNamespacesField", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_ContractNamespacesField, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "MemberNamesField", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_MemberNamesField, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "ChildElementNamespacesProperty", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_ChildElementNamespacesProperty, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "CollectionItemNameProperty", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_CollectionItemNameProperty, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "ChildElementNamespaceProperty", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_ChildElementNamespaceProperty, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "GetDateTimeOffsetMethod", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_GetDateTimeOffsetMethod, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics, "GetDateTimeOffsetAdapterMethod", 
	$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.get_GetDateTimeOffsetAdapterMethod, null);
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.writeStartElementMethod2 = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.writeStartElementMethod3 = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.writeEndElementMethod = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.writeNamespaceDeclMethod = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.dictionaryEnumeratorCtor = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.ienumeratorMoveNextMethod = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.ienumeratorGetCurrentMethod = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getItemContractMethod = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.isStartElementMethod2 = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.isStartElementMethod0 = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getUninitializedObjectMethod = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.nodeTypeProperty = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getStreamingContextMethod = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getCollectionMemberMethod = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.storeCollectionMemberInfoMethod = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.storeIsGetOnlyCollectionMethod = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.throwNullValueReturnedForGetOnlyCollectionExceptionMethod = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.throwArrayExceededSizeExceptionMethod = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.incrementItemCountMethod = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.internalDeserializeMethod = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.moveToNextElementMethod = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getMemberIndexMethod = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getMemberIndexWithRequiredMembersMethod = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.throwRequiredMemberMissingExceptionMethod = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.skipUnknownElementMethod = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.readIfNullOrRefMethod = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.readAttributesMethod = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.resetAttributesMethod = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getObjectIdMethod = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getArraySizeMethod = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.addNewObjectMethod = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.addNewObjectWithIdMethod = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getExistingObjectMethod = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.ensureArraySizeMethod = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.trimArraySizeMethod = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.checkEndOfArrayMethod = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getArrayLengthMethod = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.createSerializationExceptionMethod = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.createUnexpectedStateExceptionMethod = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.internalSerializeReferenceMethod = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.internalSerializeMethod = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.writeNullMethod = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.incrementArrayCountMethod = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.incrementCollectionCountMethod = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.incrementCollectionCountGenericMethod = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getDefaultValueMethod = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getNullableValueMethod = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.throwRequiredMemberMustBeEmittedMethod = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getHasValueMethod = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.isMemberTypeSameAsMemberValue = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.writeXmlValueMethod = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.readXmlValueMethod = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.namespaceProperty = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.contractNamespacesField = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.memberNamesField = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.childElementNamespacesProperty = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.collectionItemNameProperty = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.childElementNamespaceProperty = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getDateTimeOffsetMethod = null;
$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.getDateTimeOffsetAdapterMethod = null;

$asm09.System.Runtime.Serialization.XmlFormatReaderGenerator.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
	this.helper = new $asm09.System.Runtime.Serialization.XmlFormatReaderGenerator.CriticalHelper();
};
$asm09.System.Runtime.Serialization.XmlFormatReaderGenerator.prototype.GenerateClassReader = function (classContract) {
	return this.helper.GenerateClassReader(classContract);
};
$asm09.System.Runtime.Serialization.XmlFormatReaderGenerator.prototype.GenerateCollectionReader = function (collectionContract) {
	return this.helper.GenerateCollectionReader(collectionContract);
};
$asm09.System.Runtime.Serialization.XmlFormatReaderGenerator.prototype.GenerateGetOnlyCollectionReader = function (collectionContract) {
	return this.helper.GenerateGetOnlyCollectionReader(collectionContract);
};
$asm09.System.Runtime.Serialization.XmlFormatReaderGenerator.UnsafeGetUninitializedObject = function (id) {
	return System.Runtime.Serialization.FormatterServices.GetUninitializedObject($asm09.System.Runtime.Serialization.DataContract.GetDataContractForInitialization(id).TypeForInitialization);
};
$asm09.System.Runtime.Serialization.XmlFormatReaderGenerator.prototype.helper = null;

$asm09.System.Runtime.Serialization.XmlFormatReaderGenerator.CriticalHelper.prototype.GenerateClassReader = function (classContract) {
	this.ilg = new $asm09.System.Runtime.Serialization.CodeGenerator();
	var flag = classContract.RequiresMemberAccessForRead(null, System.Runtime.Serialization.Globals.DataContractSerializationPatterns);
	try {
		this.ilg.BeginMethod$1(("Read" + classContract.StableName.Name + "FromXml"), System.Runtime.Serialization.Globals.TypeOfXmlFormatClassReaderDelegate, flag);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.Security.SecurityException)) {
			var arg_45_0 = $exception;
			if (!flag) {
				throw $exception;
			}
			classContract.RequiresMemberAccessForRead(arg_45_0, System.Runtime.Serialization.Globals.DataContractSerializationPatterns);
		} else {
			throw $exception;
		}
	}
	this.InitArgs();
	this.CreateObject(classContract);
	this.ilg.Call$1(this.contextArg, $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.AddNewObjectMethod, this.objectLocal);
	this.InvokeOnDeserializing(classContract);
	var localBuilder = null;
	this.ReadClass(classContract);
	this.InvokeOnDeserialized(classContract);
	if (localBuilder === null) {
		this.ilg.Load(this.objectLocal);
		if (classContract.UnderlyingType === System.Runtime.Serialization.Globals.TypeOfDateTimeOffsetAdapter) {
			this.ilg.ConvertValue(this.objectLocal.LocalType, System.Runtime.Serialization.Globals.TypeOfDateTimeOffsetAdapter);
			this.ilg.Call$7($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.GetDateTimeOffsetMethod);
			this.ilg.ConvertValue(System.Runtime.Serialization.Globals.TypeOfDateTimeOffset, this.ilg.CurrentMethod.ReturnType);
		} else if (classContract.IsKeyValuePairAdapter) {
			this.ilg.Call$7(classContract.GetKeyValuePairMethodInfo);
			this.ilg.ConvertValue(System.Runtime.Serialization.Globals.TypeOfKeyValuePair.MakeGenericType(classContract.KeyValuePairGenericArguments), this.ilg.CurrentMethod.ReturnType);
		} else {
			this.ilg.ConvertValue(this.objectLocal.LocalType, this.ilg.CurrentMethod.ReturnType);
		}
	}
	return this.ilg.EndMethod();
};
$asm09.System.Runtime.Serialization.XmlFormatReaderGenerator.CriticalHelper.prototype.GenerateCollectionReader = function (collectionContract) {
	this.ilg = this.GenerateCollectionReaderHelper(collectionContract, false);
	this.ReadCollection(collectionContract);
	this.ilg.Load(this.objectLocal);
	this.ilg.ConvertValue(this.objectLocal.LocalType, this.ilg.CurrentMethod.ReturnType);
	return this.ilg.EndMethod();
};
$asm09.System.Runtime.Serialization.XmlFormatReaderGenerator.CriticalHelper.prototype.GenerateGetOnlyCollectionReader = function (collectionContract) {
	this.ilg = this.GenerateCollectionReaderHelper(collectionContract, true);
	this.ReadGetOnlyCollection(collectionContract);
	return this.ilg.EndMethod();
};
$asm09.System.Runtime.Serialization.XmlFormatReaderGenerator.CriticalHelper.prototype.GenerateCollectionReaderHelper = function (collectionContract, isGetOnlyCollection) {
	this.ilg = new $asm09.System.Runtime.Serialization.CodeGenerator();
	var flag = collectionContract.RequiresMemberAccessForRead(null, System.Runtime.Serialization.Globals.DataContractSerializationPatterns);
	try {
		if (isGetOnlyCollection) {
			this.ilg.BeginMethod$1(("Read" + collectionContract.StableName.Name + "FromXmlIsGetOnly"), System.Runtime.Serialization.Globals.TypeOfXmlFormatGetOnlyCollectionReaderDelegate, flag);
		} else {
			this.ilg.BeginMethod$1(("Read" + collectionContract.StableName.Name + "FromXml" + System.String.Empty), System.Runtime.Serialization.Globals.TypeOfXmlFormatCollectionReaderDelegate, flag);
		}
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.Security.SecurityException)) {
			var arg_7A_0 = $exception;
			if (!flag) {
				throw $exception;
			}
			collectionContract.RequiresMemberAccessForRead(arg_7A_0, System.Runtime.Serialization.Globals.DataContractSerializationPatterns);
		} else {
			throw $exception;
		}
	}
	this.InitArgs();
	this.collectionContractArg = this.ilg.GetArg(4);
	return this.ilg;
};
$asm09.System.Runtime.Serialization.XmlFormatReaderGenerator.CriticalHelper.prototype.InitArgs = function () {
	this.xmlReaderArg = this.ilg.GetArg(0);
	this.contextArg = this.ilg.GetArg(1);
	this.memberNamesArg = this.ilg.GetArg(2);
	this.memberNamespacesArg = this.ilg.GetArg(3);
};
$asm09.System.Runtime.Serialization.XmlFormatReaderGenerator.CriticalHelper.prototype.CreateObject = function (classContract) {
	var type = (this.objectType = classContract.UnderlyingType);
	if (!(!type.IsValueType || classContract.IsNonAttributedType)) {
		type = System.Runtime.Serialization.Globals.TypeOfValueType;
	}
	this.objectLocal = this.ilg.DeclareLocal$1(type, "objectDeserialized");
	if (classContract.UnderlyingType === System.Runtime.Serialization.Globals.TypeOfDBNull) {
		this.ilg.LoadMember(System.Runtime.Serialization.Globals.TypeOfDBNull.GetField$1("Value"));
		this.ilg.Stloc(this.objectLocal);
		return;
	}
	if (!classContract.IsNonAttributedType) {
		this.ilg.Call$1(null, $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.GetUninitializedObjectMethod, $asm09.System.Runtime.Serialization.DataContract.GetIdForInitialization(classContract));
		this.ilg.ConvertValue(System.Runtime.Serialization.Globals.TypeOfObject, type);
		this.ilg.Stloc(this.objectLocal);
		return;
	}
	if (type.IsValueType) {
		this.ilg.Ldloca(this.objectLocal);
		this.ilg.InitObj(type);
		return;
	}
	this.ilg.New(classContract.GetNonAttributedTypeConstructor());
	this.ilg.Stloc(this.objectLocal);
};
$asm09.System.Runtime.Serialization.XmlFormatReaderGenerator.CriticalHelper.prototype.InvokeOnDeserializing = function (classContract) {
	if (classContract.BaseContract !== null) {
		this.InvokeOnDeserializing(classContract.BaseContract);
	}
	if (classContract.OnDeserializing !== null) {
		this.ilg.LoadAddress(this.objectLocal);
		this.ilg.ConvertAddress(this.objectLocal.LocalType, this.objectType);
		this.ilg.Load(this.contextArg);
		this.ilg.LoadMember($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.GetStreamingContextMethod);
		this.ilg.Call$7(classContract.OnDeserializing);
	}
};
$asm09.System.Runtime.Serialization.XmlFormatReaderGenerator.CriticalHelper.prototype.InvokeOnDeserialized = function (classContract) {
	if (classContract.BaseContract !== null) {
		this.InvokeOnDeserialized(classContract.BaseContract);
	}
	if (classContract.OnDeserialized !== null) {
		this.ilg.LoadAddress(this.objectLocal);
		this.ilg.ConvertAddress(this.objectLocal.LocalType, this.objectType);
		this.ilg.Load(this.contextArg);
		this.ilg.LoadMember($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.GetStreamingContextMethod);
		this.ilg.Call$7(classContract.OnDeserialized);
	}
};
$asm09.System.Runtime.Serialization.XmlFormatReaderGenerator.CriticalHelper.prototype.ReadClass = function (classContract) {
	this.ReadMembers$0(classContract, null);
};
$asm09.System.Runtime.Serialization.XmlFormatReaderGenerator.CriticalHelper.prototype.ReadMembers$0 = function (classContract, extensionDataLocal) {
	var num2 = new JSIL.Variable(0);
	var num = classContract.MemberNames.length;
	this.ilg.Call$1(this.contextArg, $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.IncrementItemCountMethod, num);
	var localBuilder = this.ilg.DeclareLocal$0(System.Runtime.Serialization.Globals.TypeOfInt, "memberIndex", -1);
	var requiredMembers = this.GetRequiredMembers$0(classContract, /* ref */ num2);
	var flag = (num2.value < num);
	var localBuilder2 = flag ? this.ilg.DeclareLocal$0(System.Runtime.Serialization.Globals.TypeOfInt, "requiredIndex", num2.value) : null;
	var forState = this.ilg.For(null, null, null);
	this.ilg.Call$1(null, $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.MoveToNextElementMethod, this.xmlReaderArg);
	this.ilg.IfFalseBreak(forState);
	if (flag) {
		this.ilg.Call$6(
			this.contextArg, 
			$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.GetMemberIndexWithRequiredMembersMethod, 
			this.xmlReaderArg, 
			this.memberNamesArg, 
			this.memberNamespacesArg, 
			localBuilder, 
			localBuilder2, 
			extensionDataLocal
		);
	} else {
		this.ilg.Call$5(
			this.contextArg, 
			$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.GetMemberIndexMethod, 
			this.xmlReaderArg, 
			this.memberNamesArg, 
			this.memberNamespacesArg, 
			localBuilder, 
			extensionDataLocal
		);
	}
	var memberLabels = this.ilg.Switch(num);
	this.ReadMembers$1(
		classContract, 
		requiredMembers, 
		memberLabels, 
		localBuilder, 
		localBuilder2
	);
	this.ilg.EndSwitch();
	this.ilg.EndFor();
	if (flag) {
		this.ilg.If$2(localBuilder2, $asm09.System.Runtime.Serialization.Cmp.LessThan, num);
		this.ilg.Call$4(
			null, 
			$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.ThrowRequiredMemberMissingExceptionMethod, 
			this.xmlReaderArg, 
			localBuilder, 
			localBuilder2, 
			this.memberNamesArg
		);
		this.ilg.EndIf();
	}
};
$asm09.System.Runtime.Serialization.XmlFormatReaderGenerator.CriticalHelper.prototype.ReadMembers$1 = function (classContract, requiredMembers, memberLabels, memberIndexLocal, requiredIndexLocal) {
	var num = (classContract.BaseContract === null) ? 0 : this.ReadMembers$1(
		classContract.BaseContract, 
		requiredMembers, 
		memberLabels, 
		memberIndexLocal, 
		requiredIndexLocal
	);
	var i = 0;
__loop0__: 
	while (i < classContract.Members.Count) {
		var dataMember = classContract.Members.get_Item(i);
		var memberType = dataMember.MemberType;
		this.ilg.Case(memberLabels[num].MemberwiseClone(), dataMember.Name);
		if (dataMember.IsRequired) {
		__loop1__: 
			for (var num2 = (num + 1); !((num2 >= requiredMembers.length) || requiredMembers[num2]); ++num2) {
			}
			this.ilg.Set(requiredIndexLocal, num2);
		}
		if (dataMember.IsGetOnlyCollection) {
			this.ilg.LoadAddress(this.objectLocal);
			this.ilg.LoadMember(dataMember.MemberInfo);
			var localBuilder = this.ilg.DeclareLocal$1(memberType, (dataMember.Name + "Value"));
			this.ilg.Stloc(localBuilder);
			this.ilg.Call$1(this.contextArg, $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.StoreCollectionMemberInfoMethod, localBuilder);
			this.ReadValue(memberType, dataMember.Name, classContract.StableName.Namespace);
		} else {
			localBuilder = this.ReadValue(memberType, dataMember.Name, classContract.StableName.Namespace);
			this.ilg.LoadAddress(this.objectLocal);
			this.ilg.ConvertAddress(this.objectLocal.LocalType, this.objectType);
			this.ilg.Ldloc(localBuilder);
			this.ilg.StoreMember(dataMember.MemberInfo);
		}
		this.ilg.Set(memberIndexLocal, num);
		this.ilg.EndCase();
		++i;
		++num;
	}
	return num;
};
$asm09.System.Runtime.Serialization.XmlFormatReaderGenerator.CriticalHelper.prototype.GetRequiredMembers$0 = function (contract, /* ref */ firstRequiredMember) {
	var num = contract.MemberNames.length;
	var array = JSIL.Array.New(System.Boolean, num);
	this.GetRequiredMembers$1(contract, array);
__loop0__: 
	for (firstRequiredMember.value = 0; !((firstRequiredMember.value >= num) || array[firstRequiredMember.value]); ++firstRequiredMember.value) {
	}
	return array;
};
$asm09.System.Runtime.Serialization.XmlFormatReaderGenerator.CriticalHelper.prototype.GetRequiredMembers$1 = function (contract, requiredMembers) {
	var num = (contract.BaseContract === null) ? 0 : this.GetRequiredMembers$1(contract.BaseContract, requiredMembers);
	var members = contract.Members;
	var i = 0;
__loop0__: 
	while (i < members.Count) {
		requiredMembers[num] = members.get_Item(i).IsRequired;
		++i;
		++num;
	}
	return num;
};
$asm09.System.Runtime.Serialization.XmlFormatReaderGenerator.CriticalHelper.prototype.ReadValue = function (type, name, ns) {
	var localBuilder = this.ilg.DeclareLocal$1(type, "valueRead");
	var localBuilder2 = null;
	var num = 0;
__loop0__: 
	while (type.IsGenericType && (type.GetGenericTypeDefinition() === System.Runtime.Serialization.Globals.TypeOfNullable)) {
		++num;
		type = type.GetGenericArguments()[0];
	}
	var primitiveDataContract = $asm09.System.Runtime.Serialization.PrimitiveDataContract.GetPrimitiveDataContract$0(type);
	if (!(!((primitiveDataContract !== null) && 
				(primitiveDataContract.UnderlyingType !== System.Runtime.Serialization.Globals.TypeOfObject)) && 
			(num === 0) && !type.IsValueType)) {
		var localBuilder3 = this.ilg.DeclareLocal$1(System.Runtime.Serialization.Globals.TypeOfString, "objectIdRead");
		this.ilg.Call$1(this.contextArg, $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.ReadAttributesMethod, this.xmlReaderArg);
		this.ilg.Call$3(
			this.contextArg, 
			$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.ReadIfNullOrRefMethod, 
			this.xmlReaderArg, 
			type, 
			$asm09.System.Runtime.Serialization.DataContract.IsTypeSerializable(type)
		);
		this.ilg.Stloc(localBuilder3);
		this.ilg.If$2(localBuilder3, $asm09.System.Runtime.Serialization.Cmp.EqualTo, null);
		if (num !== 0) {
			this.ilg.LoadAddress(localBuilder);
			this.ilg.InitObj(localBuilder.LocalType);
		} else if (type.IsValueType) {
			this.ThrowValidationException$0($asm09.System.Runtime.Serialization.SR.GetString$0("ValueTypeCannotBeNull", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(type)]), JSIL.Array.New(System.Object, 0));
		} else {
			this.ilg.Load(null);
			this.ilg.Stloc(localBuilder);
		}
		this.ilg.ElseIfIsEmptyString(localBuilder3);
		this.ilg.Call$0(this.contextArg, $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.GetObjectIdMethod);
		this.ilg.Stloc(localBuilder3);
		if (type.IsValueType) {
			this.ilg.IfNotIsEmptyString(localBuilder3);
			this.ThrowValidationException$0($asm09.System.Runtime.Serialization.SR.GetString$0("ValueTypeCannotHaveId", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(type)]), JSIL.Array.New(System.Object, 0));
			this.ilg.EndIf();
		}
		if (num !== 0) {
			localBuilder2 = localBuilder;
			localBuilder = this.ilg.DeclareLocal$1(type, "innerValueRead");
		}
		if (!((primitiveDataContract === null) || (primitiveDataContract.UnderlyingType === System.Runtime.Serialization.Globals.TypeOfObject))) {
			this.ilg.Call$0(this.xmlReaderArg, primitiveDataContract.XmlFormatReaderMethod);
			this.ilg.Stloc(localBuilder);
			if (!type.IsValueType) {
				this.ilg.Call$1(this.contextArg, $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.AddNewObjectMethod, localBuilder);
			}
		} else {
			this.InternalDeserialize(localBuilder, type, name, ns);
		}
		this.ilg.Else();
		if (type.IsValueType) {
			this.ThrowValidationException$0($asm09.System.Runtime.Serialization.SR.GetString$0("ValueTypeCannotHaveRef", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(type)]), JSIL.Array.New(System.Object, 0));
		} else {
			this.ilg.Call$4(
				this.contextArg, 
				$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.GetExistingObjectMethod, 
				localBuilder3, 
				type, 
				name, 
				ns
			);
			this.ilg.ConvertValue(System.Runtime.Serialization.Globals.TypeOfObject, type);
			this.ilg.Stloc(localBuilder);
		}
		this.ilg.EndIf();
		if (localBuilder2 !== null) {
			this.ilg.If$2(localBuilder3, $asm09.System.Runtime.Serialization.Cmp.NotEqualTo, null);
			this.WrapNullableObject(localBuilder, localBuilder2, num);
			this.ilg.EndIf();
			localBuilder = localBuilder2;
		}
	} else {
		this.InternalDeserialize(localBuilder, type, name, ns);
	}
	return localBuilder;
};
$asm09.System.Runtime.Serialization.XmlFormatReaderGenerator.CriticalHelper.prototype.InternalDeserialize = function (value, type, name, ns) {
	this.ilg.Load(this.contextArg);
	this.ilg.Load(this.xmlReaderArg);
	var type2 = type.IsPointer ? System.Runtime.Serialization.Globals.TypeOfReflectionPointer : type;
	this.ilg.Load($asm09.System.Runtime.Serialization.DataContract.GetId(type2.TypeHandle.MemberwiseClone()));
	this.ilg.Ldtoken(type2);
	this.ilg.Load(name);
	this.ilg.Load(ns);
	this.ilg.Call$7($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.InternalDeserializeMethod);
	this.ilg.ConvertValue(System.Runtime.Serialization.Globals.TypeOfObject, type);
	this.ilg.Stloc(value);
};
$asm09.System.Runtime.Serialization.XmlFormatReaderGenerator.CriticalHelper.prototype.WrapNullableObject = function (innerValue, outerValue, nullables) {
	var type = innerValue.LocalType;
	var localType = outerValue.LocalType;
	this.ilg.LoadAddress(outerValue);
	this.ilg.Load(innerValue);
__loop0__: 
	for (var i = 1; i < nullables; ++i) {
		var type2 = System.Runtime.Serialization.Globals.TypeOfNullable.MakeGenericType(JSIL.Array.New(System.Type, [type]));
		this.ilg.New(type2.GetConstructor$2(JSIL.Array.New(System.Type, [type])));
		type = type2;
	}
	this.ilg.Call$8(localType.GetConstructor$2(JSIL.Array.New(System.Type, [type])));
};
$asm09.System.Runtime.Serialization.XmlFormatReaderGenerator.CriticalHelper.prototype.ReadCollection = function (collectionContract) {
	var type = collectionContract.UnderlyingType;
	var itemType = collectionContract.ItemType;
	var flag = (collectionContract.Kind === $asm09.System.Runtime.Serialization.CollectionKind.Array);
	var constructor = collectionContract.Constructor;
	if (type.IsInterface) {
		switch (Number(collectionContract.Kind)) {
			case 1: 
				type = System.Runtime.Serialization.Globals.TypeOfDictionaryGeneric.MakeGenericType(itemType.GetGenericArguments());
				constructor = type.GetConstructor$1((System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public), null, System.Runtime.Serialization.Globals.EmptyTypeArray, null);
				break;
			case 2: 
				throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Runtime.Serialization.InvalidDataContractException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$2("UnsupportedIDictionaryAsDataMemberType")]));
			case 3: 
			case 4: 
			case 5: 
			case 6: 
			case 7: 
			case 8: 
				type = itemType.MakeArrayType$0();
				flag = true;
				break;
		}
	}
	var itemName = collectionContract.ItemName;
	var namespace = collectionContract.StableName.Namespace;
	this.objectLocal = this.ilg.DeclareLocal$1(type, "objectDeserialized");
	if (!flag) {
		if (type.IsValueType) {
			this.ilg.Ldloca(this.objectLocal);
			this.ilg.InitObj(type);
		} else {
			this.ilg.New(constructor);
			this.ilg.Stloc(this.objectLocal);
			this.ilg.Call$1(this.contextArg, $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.AddNewObjectMethod, this.objectLocal);
		}
	}
	var localBuilder = this.ilg.DeclareLocal$1(System.Runtime.Serialization.Globals.TypeOfInt, "arraySize");
	this.ilg.Call$0(this.contextArg, $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.GetArraySizeMethod);
	this.ilg.Stloc(localBuilder);
	var localBuilder2 = this.ilg.DeclareLocal$1(System.Runtime.Serialization.Globals.TypeOfString, "objectIdRead");
	this.ilg.Call$0(this.contextArg, $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.GetObjectIdMethod);
	this.ilg.Stloc(localBuilder2);
	var flag2 = false;
	if (!(!flag || !this.TryReadPrimitiveArray(type, itemType, localBuilder))) {
		flag2 = true;
		this.ilg.IfNot();
	}
	this.ilg.If$2(localBuilder, $asm09.System.Runtime.Serialization.Cmp.EqualTo, -1);
	var localBuilder3 = null;
	if (flag) {
		localBuilder3 = this.ilg.DeclareLocal$1(type, "growingCollection");
		this.ilg.NewArray(itemType, 32);
		this.ilg.Stloc(localBuilder3);
	}
	var localBuilder4 = this.ilg.DeclareLocal$1(System.Runtime.Serialization.Globals.TypeOfInt, "i");
	var forState = this.ilg.For(localBuilder4, 0, 2147483647);
	this.IsStartElement$0(this.memberNamesArg, this.memberNamespacesArg);
	this.ilg.If$0();
	this.ilg.Call$1(this.contextArg, $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.IncrementItemCountMethod, 1);
	var value = this.ReadCollectionItem(collectionContract, itemType, itemName, namespace);
	if (flag) {
		var methodInfo = $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.EnsureArraySizeMethod.MakeGenericMethod(JSIL.Array.New(System.Type, [itemType]));
		this.ilg.Call$2(null, methodInfo, localBuilder3, localBuilder4);
		this.ilg.Stloc(localBuilder3);
		this.ilg.StoreArrayElement(localBuilder3, localBuilder4, value);
	} else {
		this.StoreCollectionValue(this.objectLocal, value, collectionContract);
	}
	this.ilg.Else();
	this.IsEndElement();
	this.ilg.If$0();
	this.ilg.Break(forState);
	this.ilg.Else();
	this.HandleUnexpectedItemInCollection(localBuilder4);
	this.ilg.EndIf();
	this.ilg.EndIf();
	this.ilg.EndFor();
	if (flag) {
		var methodInfo2 = $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.TrimArraySizeMethod.MakeGenericMethod(JSIL.Array.New(System.Type, [itemType]));
		this.ilg.Call$2(null, methodInfo2, localBuilder3, localBuilder4);
		this.ilg.Stloc(this.objectLocal);
		this.ilg.Call$2(this.contextArg, $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.AddNewObjectWithIdMethod, localBuilder2, this.objectLocal);
	}
	this.ilg.Else();
	this.ilg.Call$1(this.contextArg, $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.IncrementItemCountMethod, localBuilder);
	if (flag) {
		this.ilg.NewArray(itemType, localBuilder);
		this.ilg.Stloc(this.objectLocal);
		this.ilg.Call$1(this.contextArg, $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.AddNewObjectMethod, this.objectLocal);
	}
	var localBuilder5 = this.ilg.DeclareLocal$1(System.Runtime.Serialization.Globals.TypeOfInt, "j");
	this.ilg.For(localBuilder5, 0, localBuilder);
	this.IsStartElement$0(this.memberNamesArg, this.memberNamespacesArg);
	this.ilg.If$0();
	var value2 = this.ReadCollectionItem(collectionContract, itemType, itemName, namespace);
	if (flag) {
		this.ilg.StoreArrayElement(this.objectLocal, localBuilder5, value2);
	} else {
		this.StoreCollectionValue(this.objectLocal, value2, collectionContract);
	}
	this.ilg.Else();
	this.HandleUnexpectedItemInCollection(localBuilder5);
	this.ilg.EndIf();
	this.ilg.EndFor();
	this.ilg.Call$4(
		this.contextArg, 
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.CheckEndOfArrayMethod, 
		this.xmlReaderArg, 
		localBuilder, 
		this.memberNamesArg, 
		this.memberNamespacesArg
	);
	this.ilg.EndIf();
	if (flag2) {
		this.ilg.Else();
		this.ilg.Call$2(this.contextArg, $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.AddNewObjectWithIdMethod, localBuilder2, this.objectLocal);
		this.ilg.EndIf();
	}
};
$asm09.System.Runtime.Serialization.XmlFormatReaderGenerator.CriticalHelper.prototype.ReadGetOnlyCollection = function (collectionContract) {
	var underlyingType = collectionContract.UnderlyingType;
	var itemType = collectionContract.ItemType;
	var flag = (collectionContract.Kind === $asm09.System.Runtime.Serialization.CollectionKind.Array);
	var itemName = collectionContract.ItemName;
	var namespace = collectionContract.StableName.Namespace;
	this.objectLocal = this.ilg.DeclareLocal$1(underlyingType, "objectDeserialized");
	this.ilg.Load(this.contextArg);
	this.ilg.LoadMember($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.GetCollectionMemberMethod);
	this.ilg.ConvertValue(System.Runtime.Serialization.Globals.TypeOfObject, underlyingType);
	this.ilg.Stloc(this.objectLocal);
	this.IsStartElement$0(this.memberNamesArg, this.memberNamespacesArg);
	this.ilg.If$0();
	this.ilg.If$2(this.objectLocal, $asm09.System.Runtime.Serialization.Cmp.EqualTo, null);
	this.ilg.Call$1(null, $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.ThrowNullValueReturnedForGetOnlyCollectionExceptionMethod, underlyingType);
	this.ilg.Else();
	var localBuilder = this.ilg.DeclareLocal$1(System.Runtime.Serialization.Globals.TypeOfInt, "arraySize");
	if (flag) {
		this.ilg.Load(this.objectLocal);
		this.ilg.Call$7($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.GetArrayLengthMethod);
		this.ilg.Stloc(localBuilder);
	}
	this.ilg.Call$1(this.contextArg, $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.AddNewObjectMethod, this.objectLocal);
	var localBuilder2 = this.ilg.DeclareLocal$1(System.Runtime.Serialization.Globals.TypeOfInt, "i");
	var forState = this.ilg.For(localBuilder2, 0, 2147483647);
	this.IsStartElement$0(this.memberNamesArg, this.memberNamespacesArg);
	this.ilg.If$0();
	this.ilg.Call$1(this.contextArg, $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.IncrementItemCountMethod, 1);
	var value = this.ReadCollectionItem(collectionContract, itemType, itemName, namespace);
	if (flag) {
		this.ilg.If$2(localBuilder, $asm09.System.Runtime.Serialization.Cmp.EqualTo, localBuilder2);
		this.ilg.Call$2(null, $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.ThrowArrayExceededSizeExceptionMethod, localBuilder, underlyingType);
		this.ilg.Else();
		this.ilg.StoreArrayElement(this.objectLocal, localBuilder2, value);
		this.ilg.EndIf();
	} else {
		this.StoreCollectionValue(this.objectLocal, value, collectionContract);
	}
	this.ilg.Else();
	this.IsEndElement();
	this.ilg.If$0();
	this.ilg.Break(forState);
	this.ilg.Else();
	this.HandleUnexpectedItemInCollection(localBuilder2);
	this.ilg.EndIf();
	this.ilg.EndIf();
	this.ilg.EndFor();
	this.ilg.Call$4(
		this.contextArg, 
		$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.CheckEndOfArrayMethod, 
		this.xmlReaderArg, 
		localBuilder, 
		this.memberNamesArg, 
		this.memberNamespacesArg
	);
	this.ilg.EndIf();
	this.ilg.EndIf();
};
$asm09.System.Runtime.Serialization.XmlFormatReaderGenerator.CriticalHelper.prototype.TryReadPrimitiveArray = function (type, itemType, size) {
	if ($asm09.System.Runtime.Serialization.PrimitiveDataContract.GetPrimitiveDataContract$0(itemType) === null) {
		return false;
	}
	var text = null;
	var typeCode = System.Type.GetTypeCode(itemType);
	if (typeCode !== System.TypeCode.Boolean) {
		switch (Number(typeCode)) {
			case 9: 
				text = "TryReadInt32Array";
				break;
			case 11: 
				text = "TryReadInt64Array";
				break;
			case 13: 
				text = "TryReadSingleArray";
				break;
			case 14: 
				text = "TryReadDoubleArray";
				break;
			case 15: 
				text = "TryReadDecimalArray";
				break;
			case 16: 
				text = "TryReadDateTimeArray";
				break;
		}
	} else {
		text = "TryReadBooleanArray";
	}
	if (text !== null) {
		this.ilg.Load(this.xmlReaderArg);
		this.ilg.Load(this.contextArg);
		this.ilg.Load(this.memberNamesArg);
		this.ilg.Load(this.memberNamespacesArg);
		this.ilg.Load(size);
		this.ilg.Ldloca(this.objectLocal);
		this.ilg.Call$7($asm09.System.Runtime.Serialization.XmlReaderDelegator.GetMethod$4(text, (System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static)));
		return true;
	}
	return false;
};
$asm09.System.Runtime.Serialization.XmlFormatReaderGenerator.CriticalHelper.prototype.ReadCollectionItem = function (collectionContract, itemType, itemName, itemNs) {
	if (!((collectionContract.Kind !== $asm09.System.Runtime.Serialization.CollectionKind.Dictionary) && (collectionContract.Kind !== $asm09.System.Runtime.Serialization.CollectionKind.GenericDictionary))) {
		this.ilg.Call$0(this.contextArg, $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.ResetAttributesMethod);
		var localBuilder = this.ilg.DeclareLocal$1(itemType, "valueRead");
		this.ilg.Load(this.collectionContractArg);
		this.ilg.Call$7($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.GetItemContractMethod);
		this.ilg.Load(this.xmlReaderArg);
		this.ilg.Load(this.contextArg);
		this.ilg.Call$7($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.ReadXmlValueMethod);
		this.ilg.ConvertValue(System.Runtime.Serialization.Globals.TypeOfObject, itemType);
		this.ilg.Stloc(localBuilder);
		return localBuilder;
	}
	return this.ReadValue(itemType, itemName, itemNs);
};
$asm09.System.Runtime.Serialization.XmlFormatReaderGenerator.CriticalHelper.prototype.StoreCollectionValue = function (collection, value, collectionContract) {
	if (!((collectionContract.Kind !== $asm09.System.Runtime.Serialization.CollectionKind.GenericDictionary) && (collectionContract.Kind !== $asm09.System.Runtime.Serialization.CollectionKind.Dictionary))) {
		var classDataContract = JSIL.TryCast($asm09.System.Runtime.Serialization.DataContract.GetDataContract$0(value.LocalType), $asm09.System.Runtime.Serialization.ClassDataContract);
		var dataMember = classDataContract.Members.get_Item(0);
		var dataMember2 = classDataContract.Members.get_Item(1);
		var localBuilder = this.ilg.DeclareLocal$1(dataMember.MemberType, dataMember.Name);
		var localBuilder2 = this.ilg.DeclareLocal$1(dataMember2.MemberType, dataMember2.Name);
		this.ilg.LoadAddress(value);
		this.ilg.LoadMember(dataMember.MemberInfo);
		this.ilg.Stloc(localBuilder);
		this.ilg.LoadAddress(value);
		this.ilg.LoadMember(dataMember2.MemberInfo);
		this.ilg.Stloc(localBuilder2);
		this.ilg.Call$2(collection, collectionContract.AddMethod, localBuilder, localBuilder2);
		if (collectionContract.AddMethod.ReturnType !== System.Runtime.Serialization.Globals.TypeOfVoid) {
			this.ilg.Pop();
			return;
		}
	} else {
		this.ilg.Call$1(collection, collectionContract.AddMethod, value);
		if (collectionContract.AddMethod.ReturnType !== System.Runtime.Serialization.Globals.TypeOfVoid) {
			this.ilg.Pop();
		}
	}
};
$asm09.System.Runtime.Serialization.XmlFormatReaderGenerator.CriticalHelper.prototype.HandleUnexpectedItemInCollection = function (iterator) {
	this.IsStartElement$1();
	this.ilg.If$0();
	this.ilg.Call$1(this.contextArg, $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.SkipUnknownElementMethod, this.xmlReaderArg);
	this.ilg.Dec(iterator);
	this.ilg.Else();
	this.ThrowUnexpectedStateException(System.Xml.XmlNodeType.Element);
	this.ilg.EndIf();
};
$asm09.System.Runtime.Serialization.XmlFormatReaderGenerator.CriticalHelper.prototype.IsStartElement$0 = function (nameArg, nsArg) {
	this.ilg.Call$2(this.xmlReaderArg, $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.IsStartElementMethod2, nameArg, nsArg);
};
$asm09.System.Runtime.Serialization.XmlFormatReaderGenerator.CriticalHelper.prototype.IsStartElement$1 = function () {
	this.ilg.Call$0(this.xmlReaderArg, $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.IsStartElementMethod0);
};
$asm09.System.Runtime.Serialization.XmlFormatReaderGenerator.CriticalHelper.prototype.IsEndElement = function () {
	this.ilg.Load(this.xmlReaderArg);
	this.ilg.LoadMember($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.NodeTypeProperty);
	this.ilg.Load(System.Xml.XmlNodeType.EndElement);
	this.ilg.Ceq();
};
$asm09.System.Runtime.Serialization.XmlFormatReaderGenerator.CriticalHelper.prototype.ThrowUnexpectedStateException = function (expectedState) {
	this.ilg.Call$2(null, $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.CreateUnexpectedStateExceptionMethod, expectedState, this.xmlReaderArg);
	this.ilg.Throw();
};
$asm09.System.Runtime.Serialization.XmlFormatReaderGenerator.CriticalHelper.prototype.ThrowValidationException$0 = function (msg, values) {
	this.ilg.Load(msg);
	this.ThrowValidationException$1();
};
$asm09.System.Runtime.Serialization.XmlFormatReaderGenerator.CriticalHelper.prototype.ThrowValidationException$1 = function () {
	this.ilg.Call$7($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.CreateSerializationExceptionMethod);
	this.ilg.Throw();
};
$asm09.System.Runtime.Serialization.XmlFormatReaderGenerator.CriticalHelper.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
JSIL.OverloadedMethod($asm09.System.Runtime.Serialization.XmlFormatReaderGenerator.CriticalHelper.prototype, "ReadMembers", [
		["ReadMembers$0", [$asm09.System.Runtime.Serialization.ClassDataContract, System.Reflection.Emit.LocalBuilder]], 
		["ReadMembers$1", [$asm09.System.Runtime.Serialization.ClassDataContract, System.Array.Of(System.Boolean), System.Array.Of(System.Reflection.Emit.Label), System.Reflection.Emit.LocalBuilder, System.Reflection.Emit.LocalBuilder]]
	]);
JSIL.OverloadedMethod($asm09.System.Runtime.Serialization.XmlFormatReaderGenerator.CriticalHelper.prototype, "GetRequiredMembers", [
		["GetRequiredMembers$0", [$asm09.System.Runtime.Serialization.ClassDataContract, JSIL.Reference.Of(System.Int32)]], 
		["GetRequiredMembers$1", [$asm09.System.Runtime.Serialization.ClassDataContract, System.Array.Of(System.Boolean)]]
	]);
JSIL.OverloadedMethod($asm09.System.Runtime.Serialization.XmlFormatReaderGenerator.CriticalHelper.prototype, "IsStartElement", [
		["IsStartElement$0", [$asm09.System.Runtime.Serialization.ArgBuilder, $asm09.System.Runtime.Serialization.ArgBuilder]], 
		["IsStartElement$1", []]
	]);
JSIL.OverloadedMethod($asm09.System.Runtime.Serialization.XmlFormatReaderGenerator.CriticalHelper.prototype, "ThrowValidationException", [
		["ThrowValidationException$0", [System.String, System.Array.Of(System.Object)]], 
		["ThrowValidationException$1", []]
	]);
$asm09.System.Runtime.Serialization.XmlFormatReaderGenerator.CriticalHelper.prototype.ilg = null;
$asm09.System.Runtime.Serialization.XmlFormatReaderGenerator.CriticalHelper.prototype.objectLocal = null;
$asm09.System.Runtime.Serialization.XmlFormatReaderGenerator.CriticalHelper.prototype.objectType = null;
$asm09.System.Runtime.Serialization.XmlFormatReaderGenerator.CriticalHelper.prototype.xmlReaderArg = null;
$asm09.System.Runtime.Serialization.XmlFormatReaderGenerator.CriticalHelper.prototype.contextArg = null;
$asm09.System.Runtime.Serialization.XmlFormatReaderGenerator.CriticalHelper.prototype.memberNamesArg = null;
$asm09.System.Runtime.Serialization.XmlFormatReaderGenerator.CriticalHelper.prototype.memberNamespacesArg = null;
$asm09.System.Runtime.Serialization.XmlFormatReaderGenerator.CriticalHelper.prototype.collectionContractArg = null;

$asm09.System.Runtime.Serialization.XmlFormatWriterGenerator.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
	this.helper = new $asm09.System.Runtime.Serialization.XmlFormatWriterGenerator.CriticalHelper();
};
$asm09.System.Runtime.Serialization.XmlFormatWriterGenerator.prototype.GenerateClassWriter = function (classContract) {
	return this.helper.GenerateClassWriter(classContract);
};
$asm09.System.Runtime.Serialization.XmlFormatWriterGenerator.prototype.GenerateCollectionWriter = function (collectionContract) {
	return this.helper.GenerateCollectionWriter(collectionContract);
};
$asm09.System.Runtime.Serialization.XmlFormatWriterGenerator.prototype.helper = null;

$asm09.System.Runtime.Serialization.XmlFormatWriterGenerator.CriticalHelper.prototype.GenerateClassWriter = function (classContract) {
	this.ilg = new $asm09.System.Runtime.Serialization.CodeGenerator();
	var flag = classContract.RequiresMemberAccessForWrite(null, System.Runtime.Serialization.Globals.DataContractSerializationPatterns);
	try {
		this.ilg.BeginMethod$1(("Write" + classContract.StableName.Name + "ToXml"), System.Runtime.Serialization.Globals.TypeOfXmlFormatClassWriterDelegate, flag);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.Security.SecurityException)) {
			var arg_45_0 = $exception;
			if (!flag) {
				throw $exception;
			}
			classContract.RequiresMemberAccessForWrite(arg_45_0, System.Runtime.Serialization.Globals.DataContractSerializationPatterns);
		} else {
			throw $exception;
		}
	}
	this.InitArgs(classContract.UnderlyingType);
	this.WriteClass(classContract);
	return this.ilg.EndMethod();
};
$asm09.System.Runtime.Serialization.XmlFormatWriterGenerator.CriticalHelper.prototype.GenerateCollectionWriter = function (collectionContract) {
	this.ilg = new $asm09.System.Runtime.Serialization.CodeGenerator();
	var flag = collectionContract.RequiresMemberAccessForWrite(null, System.Runtime.Serialization.Globals.DataContractSerializationPatterns);
	try {
		this.ilg.BeginMethod$1(("Write" + collectionContract.StableName.Name + "ToXml"), System.Runtime.Serialization.Globals.TypeOfXmlFormatCollectionWriterDelegate, flag);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.Security.SecurityException)) {
			var arg_45_0 = $exception;
			if (!flag) {
				throw $exception;
			}
			collectionContract.RequiresMemberAccessForWrite(arg_45_0, System.Runtime.Serialization.Globals.DataContractSerializationPatterns);
		} else {
			throw $exception;
		}
	}
	this.InitArgs(collectionContract.UnderlyingType);
	this.WriteCollection(collectionContract);
	return this.ilg.EndMethod();
};
$asm09.System.Runtime.Serialization.XmlFormatWriterGenerator.CriticalHelper.prototype.InitArgs = function (objType) {
	this.xmlWriterArg = this.ilg.GetArg(0);
	this.contextArg = this.ilg.GetArg(2);
	this.dataContractArg = this.ilg.GetArg(3);
	this.objectLocal = this.ilg.DeclareLocal$1(objType, "objSerialized");
	var arg = this.ilg.GetArg(1);
	this.ilg.Load(arg);
	if (objType === System.Runtime.Serialization.Globals.TypeOfDateTimeOffsetAdapter) {
		this.ilg.ConvertValue(arg.ArgType, System.Runtime.Serialization.Globals.TypeOfDateTimeOffset);
		this.ilg.Call$7($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.GetDateTimeOffsetAdapterMethod);
	} else if (!(!objType.IsGenericType || (objType.GetGenericTypeDefinition() !== System.Runtime.Serialization.Globals.TypeOfKeyValuePairAdapter))) {
		var classDataContract = JSIL.Cast($asm09.System.Runtime.Serialization.DataContract.GetDataContract$0(objType), $asm09.System.Runtime.Serialization.ClassDataContract);
		this.ilg.ConvertValue(arg.ArgType, System.Runtime.Serialization.Globals.TypeOfKeyValuePair.MakeGenericType(classDataContract.KeyValuePairGenericArguments));
		this.ilg.New(classDataContract.KeyValuePairAdapterConstructorInfo);
	} else {
		this.ilg.ConvertValue(arg.ArgType, objType);
	}
	this.ilg.Stloc(this.objectLocal);
};
$asm09.System.Runtime.Serialization.XmlFormatWriterGenerator.CriticalHelper.prototype.InvokeOnSerializing = function (classContract) {
	if (classContract.BaseContract !== null) {
		this.InvokeOnSerializing(classContract.BaseContract);
	}
	if (classContract.OnSerializing !== null) {
		this.ilg.LoadAddress(this.objectLocal);
		this.ilg.Load(this.contextArg);
		this.ilg.Call$7($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.GetStreamingContextMethod);
		this.ilg.Call$7(classContract.OnSerializing);
	}
};
$asm09.System.Runtime.Serialization.XmlFormatWriterGenerator.CriticalHelper.prototype.InvokeOnSerialized = function (classContract) {
	if (classContract.BaseContract !== null) {
		this.InvokeOnSerialized(classContract.BaseContract);
	}
	if (classContract.OnSerialized !== null) {
		this.ilg.LoadAddress(this.objectLocal);
		this.ilg.Load(this.contextArg);
		this.ilg.Call$7($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.GetStreamingContextMethod);
		this.ilg.Call$7(classContract.OnSerialized);
	}
};
$asm09.System.Runtime.Serialization.XmlFormatWriterGenerator.CriticalHelper.prototype.WriteClass = function (classContract) {
	this.InvokeOnSerializing(classContract);
	if (classContract.ContractNamespaces.length > 1) {
		this.contractNamespacesLocal = this.ilg.DeclareLocal$1(System.Array.Of(System.Xml.XmlDictionaryString), "contractNamespaces");
		this.ilg.Load(this.dataContractArg);
		this.ilg.LoadMember($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.ContractNamespacesField);
		this.ilg.Store(this.contractNamespacesLocal);
	}
	this.memberNamesLocal = this.ilg.DeclareLocal$1(System.Array.Of(System.Xml.XmlDictionaryString), "memberNames");
	this.ilg.Load(this.dataContractArg);
	this.ilg.LoadMember($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.MemberNamesField);
	this.ilg.Store(this.memberNamesLocal);
__loop0__: 
	for (var i = 0; i < classContract.ChildElementNamespaces.length; ++i) {
		if (classContract.ChildElementNamespaces[i]) {
			this.childElementNamespacesLocal = this.ilg.DeclareLocal$1(System.Array.Of(System.Xml.XmlDictionaryString), "childElementNamespaces");
			this.ilg.Load(this.dataContractArg);
			this.ilg.LoadMember($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.ChildElementNamespacesProperty);
			this.ilg.Store(this.childElementNamespacesLocal);
		}
	}
	this.WriteMembers(classContract, null, classContract);
	this.InvokeOnSerialized(classContract);
};
$asm09.System.Runtime.Serialization.XmlFormatWriterGenerator.CriticalHelper.prototype.WriteMembers = function (classContract, extensionDataLocal, derivedMostClassContract) {
	var num = (classContract.BaseContract === null) ? 0 : this.WriteMembers(classContract.BaseContract, extensionDataLocal, derivedMostClassContract);
	var localBuilder = this.ilg.DeclareLocal$1(System.Xml.XmlDictionaryString, "ns");
	if (this.contractNamespacesLocal === null) {
		this.ilg.Load(this.dataContractArg);
		this.ilg.LoadMember($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.NamespaceProperty);
	} else {
		this.ilg.LoadArrayElement(this.contractNamespacesLocal, (this.typeIndex - 1));
	}
	this.ilg.Store(localBuilder);
	this.ilg.Call$1(this.contextArg, $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.IncrementItemCountMethod, classContract.Members.Count);
	var i = 0;
__loop0__: 
	while (i < classContract.Members.Count) {
		var dataMember = classContract.Members.get_Item(i);
		var memberType = dataMember.MemberType;
		var localBuilder2 = null;
		if (dataMember.IsGetOnlyCollection) {
			this.ilg.Load(this.contextArg);
			this.ilg.Call$7($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.StoreIsGetOnlyCollectionMethod);
		}
		if (!dataMember.EmitDefaultValue) {
			localBuilder2 = this.LoadMemberValue(dataMember);
			this.ilg.IfNotDefaultValue(localBuilder2);
		}
		var flag = this.CheckIfMemberHasConflict(dataMember, classContract, derivedMostClassContract);
		if (!(!flag && this.TryWritePrimitive(
					memberType, 
					localBuilder2, 
					dataMember.MemberInfo, 
					null, 
					localBuilder, 
					null, 
					(i + this.childElementIndex)
				))) {
			this.WriteStartElement(
				memberType, 
				classContract.Namespace, 
				localBuilder, 
				null, 
				(i + this.childElementIndex)
			);
			if (classContract.ChildElementNamespaces[(i + this.childElementIndex)]) {
				this.ilg.Load(this.xmlWriterArg);
				this.ilg.LoadArrayElement(this.childElementNamespacesLocal, (i + this.childElementIndex));
				this.ilg.Call$7($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.WriteNamespaceDeclMethod);
			}
			if (localBuilder2 === null) {
				localBuilder2 = this.LoadMemberValue(dataMember);
			}
			this.WriteValue(localBuilder2, flag);
			this.WriteEndElement();
		}
		if (!dataMember.EmitDefaultValue) {
			if (dataMember.IsRequired) {
				this.ilg.Else();
				this.ilg.Call$2(null, $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.ThrowRequiredMemberMustBeEmittedMethod, dataMember.Name, classContract.UnderlyingType);
			}
			this.ilg.EndIf();
		}
		++i;
		++num;
	}
	++this.typeIndex;
	this.childElementIndex += classContract.Members.Count;
	return num;
};
$asm09.System.Runtime.Serialization.XmlFormatWriterGenerator.CriticalHelper.prototype.LoadMemberValue = function (member) {
	this.ilg.LoadAddress(this.objectLocal);
	this.ilg.LoadMember(member.MemberInfo);
	var localBuilder = this.ilg.DeclareLocal$1(member.MemberType, (member.Name + "Value"));
	this.ilg.Stloc(localBuilder);
	return localBuilder;
};
$asm09.System.Runtime.Serialization.XmlFormatWriterGenerator.CriticalHelper.prototype.WriteCollection = function (collectionContract) {
	var localBuilder = this.ilg.DeclareLocal$1(System.Xml.XmlDictionaryString, "itemNamespace");
	this.ilg.Load(this.dataContractArg);
	this.ilg.LoadMember($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.NamespaceProperty);
	this.ilg.Store(localBuilder);
	var localBuilder2 = this.ilg.DeclareLocal$1(System.Xml.XmlDictionaryString, "itemName");
	this.ilg.Load(this.dataContractArg);
	this.ilg.LoadMember($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.CollectionItemNameProperty);
	this.ilg.Store(localBuilder2);
	if (collectionContract.ChildElementNamespace !== null) {
		this.ilg.Load(this.xmlWriterArg);
		this.ilg.Load(this.dataContractArg);
		this.ilg.LoadMember($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.ChildElementNamespaceProperty);
		this.ilg.Call$7($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.WriteNamespaceDeclMethod);
	}
	if (collectionContract.Kind === $asm09.System.Runtime.Serialization.CollectionKind.Array) {
		var itemType = collectionContract.ItemType;
		var localBuilder3 = this.ilg.DeclareLocal$1(System.Runtime.Serialization.Globals.TypeOfInt, "i");
		this.ilg.Call$2(this.contextArg, $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.IncrementArrayCountMethod, this.xmlWriterArg, this.objectLocal);
		if (!this.TryWritePrimitiveArray(
				collectionContract.UnderlyingType, 
				itemType, 
				this.objectLocal, 
				localBuilder2, 
				localBuilder
			)) {
			this.ilg.For(localBuilder3, 0, this.objectLocal);
			if (!this.TryWritePrimitive(
					itemType, 
					null, 
					null, 
					localBuilder3, 
					localBuilder, 
					localBuilder2, 
					0
				)) {
				this.WriteStartElement(
					itemType, 
					collectionContract.Namespace, 
					localBuilder, 
					localBuilder2, 
					0
				);
				this.ilg.LoadArrayElement(this.objectLocal, localBuilder3);
				var localBuilder4 = this.ilg.DeclareLocal$1(itemType, "memberValue");
				this.ilg.Stloc(localBuilder4);
				this.WriteValue(localBuilder4, false);
				this.WriteEndElement();
			}
			this.ilg.EndFor();
			return;
		}
	} else {
		var methodInfo = null;
		switch (Number(collectionContract.Kind)) {
			case 1: 
				methodInfo = $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.IncrementCollectionCountGenericMethod.MakeGenericMethod(JSIL.Array.New(System.Type, [System.Runtime.Serialization.Globals.TypeOfKeyValuePair.MakeGenericType(collectionContract.ItemType.GetGenericArguments())]));
				break;
			case 2: 
			case 5: 
			case 7: 
				methodInfo = $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.IncrementCollectionCountMethod;
				break;
			case 3: 
			case 4: 
				methodInfo = $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.IncrementCollectionCountGenericMethod.MakeGenericMethod(JSIL.Array.New(System.Type, [collectionContract.ItemType]));
				break;
		}
		if (methodInfo !== null) {
			this.ilg.Call$2(this.contextArg, methodInfo, this.xmlWriterArg, this.objectLocal);
		}
		var flag = false;
		var flag2 = false;
		var type = null;
		var typeArguments = null;
		if (collectionContract.Kind === $asm09.System.Runtime.Serialization.CollectionKind.GenericDictionary) {
			flag2 = true;
			typeArguments = collectionContract.ItemType.GetGenericArguments();
			type = System.Runtime.Serialization.Globals.TypeOfGenericDictionaryEnumerator.MakeGenericType(typeArguments);
		} else if (collectionContract.Kind === $asm09.System.Runtime.Serialization.CollectionKind.Dictionary) {
			flag = true;
			typeArguments = JSIL.Array.New(System.Type, [System.Runtime.Serialization.Globals.TypeOfObject, System.Runtime.Serialization.Globals.TypeOfObject]);
			type = System.Runtime.Serialization.Globals.TypeOfDictionaryEnumerator;
		} else {
			type = collectionContract.GetEnumeratorMethod.ReturnType;
		}
		var methodInfo2 = type.GetMethod$1(
			"MoveNext", 
			(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public), 
			null, 
			System.Runtime.Serialization.Globals.EmptyTypeArray, 
			null
		);
		var methodInfo3 = type.GetMethod$1(
			"get_Current", 
			(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.Public), 
			null, 
			System.Runtime.Serialization.Globals.EmptyTypeArray, 
			null
		);
		if (!((methodInfo2 !== null) && methodInfo3)) {
			if (type.IsInterface) {
				if (methodInfo2 === null) {
					methodInfo2 = $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.MoveNextMethod;
				}
				if (methodInfo3 === null) {
					methodInfo3 = $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.GetCurrentMethod;
				}
			} else {
				var interfaceType = System.Runtime.Serialization.Globals.TypeOfIEnumerator;
				var kind = collectionContract.Kind;
				if (!((kind !== $asm09.System.Runtime.Serialization.CollectionKind.GenericDictionary) && 
						(kind !== $asm09.System.Runtime.Serialization.CollectionKind.GenericCollection) && (kind !== $asm09.System.Runtime.Serialization.CollectionKind.GenericEnumerable))) {
					var interfaces = type.GetInterfaces();
					var array = interfaces;
				__loop0__: 
					for (var i = 0; i < array.length; ++i) {
						var type2 = array[i];
						if (!(!type2.IsGenericType || 
								(type2.GetGenericTypeDefinition() !== System.Runtime.Serialization.Globals.TypeOfIEnumeratorGeneric) || (type2.GetGenericArguments()[0] !== collectionContract.ItemType))) {
							interfaceType = type2;
							break __loop0__;
						}
					}
				}
				if (methodInfo2 === null) {
					methodInfo2 = $asm09.System.Runtime.Serialization.CollectionDataContract.GetTargetMethodWithName("MoveNext", type, interfaceType);
				}
				if (methodInfo3 === null) {
					methodInfo3 = $asm09.System.Runtime.Serialization.CollectionDataContract.GetTargetMethodWithName("get_Current", type, interfaceType);
				}
			}
		}
		var returnType = methodInfo3.ReturnType;
		var localBuilder5 = this.ilg.DeclareLocal$1(returnType, "currentValue");
		var localBuilder6 = this.ilg.DeclareLocal$1(type, "enumerator");
		this.ilg.Call$0(this.objectLocal, collectionContract.GetEnumeratorMethod);
		if (flag) {
			this.ilg.ConvertValue(collectionContract.GetEnumeratorMethod.ReturnType, System.Runtime.Serialization.Globals.TypeOfIDictionaryEnumerator);
			this.ilg.New($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.DictionaryEnumeratorCtor);
		} else if (flag2) {
			var type3 = System.Runtime.Serialization.Globals.TypeOfIEnumeratorGeneric.MakeGenericType(JSIL.Array.New(System.Type, [System.Runtime.Serialization.Globals.TypeOfKeyValuePair.MakeGenericType(typeArguments)]));
			var constructor = type.GetConstructor$1((System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static), null, JSIL.Array.New(System.Type, [type3]), null);
			this.ilg.ConvertValue(collectionContract.GetEnumeratorMethod.ReturnType, type3);
			this.ilg.New(constructor);
		}
		this.ilg.Stloc(localBuilder6);
		this.ilg.ForEach(
			localBuilder5, 
			returnType, 
			type, 
			localBuilder6, 
			methodInfo3
		);
		if (methodInfo === null) {
			this.ilg.Call$1(this.contextArg, $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.IncrementItemCountMethod, 1);
		}
		if (!this.TryWritePrimitive(
				returnType, 
				localBuilder5, 
				null, 
				null, 
				localBuilder, 
				localBuilder2, 
				0
			)) {
			this.WriteStartElement(
				returnType, 
				collectionContract.Namespace, 
				localBuilder, 
				localBuilder2, 
				0
			);
			if (!(!flag2 && !flag)) {
				this.ilg.Call$0(this.dataContractArg, $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.GetItemContractMethod);
				this.ilg.Load(this.xmlWriterArg);
				this.ilg.Load(localBuilder5);
				this.ilg.ConvertValue(localBuilder5.LocalType, System.Runtime.Serialization.Globals.TypeOfObject);
				this.ilg.Load(this.contextArg);
				this.ilg.Call$7($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.WriteXmlValueMethod);
			} else {
				this.WriteValue(localBuilder5, false);
			}
			this.WriteEndElement();
		}
		this.ilg.EndForEach(methodInfo2);
	}
};
$asm09.System.Runtime.Serialization.XmlFormatWriterGenerator.CriticalHelper.prototype.TryWritePrimitive = function (type, value, memberInfo, arrayItemIndex, ns, name, nameIndex) {
	var primitiveDataContract = $asm09.System.Runtime.Serialization.PrimitiveDataContract.GetPrimitiveDataContract$0(type);
	if (!((primitiveDataContract !== null) && (primitiveDataContract.UnderlyingType !== System.Runtime.Serialization.Globals.TypeOfObject))) {
		return false;
	}
	if (type.IsValueType) {
		this.ilg.Load(this.xmlWriterArg);
	} else {
		this.ilg.Load(this.contextArg);
		this.ilg.Load(this.xmlWriterArg);
	}
	if (value !== null) {
		this.ilg.Load(value);
	} else if (memberInfo !== null) {
		this.ilg.LoadAddress(this.objectLocal);
		this.ilg.LoadMember(memberInfo);
	} else {
		this.ilg.LoadArrayElement(this.objectLocal, arrayItemIndex);
	}
	if (name !== null) {
		this.ilg.Load(name);
	} else {
		this.ilg.LoadArrayElement(this.memberNamesLocal, nameIndex);
	}
	this.ilg.Load(ns);
	this.ilg.Call$7(primitiveDataContract.XmlFormatWriterMethod);
	return true;
};
$asm09.System.Runtime.Serialization.XmlFormatWriterGenerator.CriticalHelper.prototype.TryWritePrimitiveArray = function (type, itemType, value, itemName, itemNamespace) {
	if ($asm09.System.Runtime.Serialization.PrimitiveDataContract.GetPrimitiveDataContract$0(itemType) === null) {
		return false;
	}
	var text = null;
	var typeCode = System.Type.GetTypeCode(itemType);
	if (typeCode !== System.TypeCode.Boolean) {
		switch (Number(typeCode)) {
			case 9: 
				text = "WriteInt32Array";
				break;
			case 11: 
				text = "WriteInt64Array";
				break;
			case 13: 
				text = "WriteSingleArray";
				break;
			case 14: 
				text = "WriteDoubleArray";
				break;
			case 15: 
				text = "WriteDecimalArray";
				break;
			case 16: 
				text = "WriteDateTimeArray";
				break;
		}
	} else {
		text = "WriteBooleanArray";
	}
	if (text !== null) {
		this.ilg.Load(this.xmlWriterArg);
		this.ilg.Load(value);
		this.ilg.Load(itemName);
		this.ilg.Load(itemNamespace);
		this.ilg.Call$7($asm09.System.Runtime.Serialization.XmlWriterDelegator.GetMethod$1(
				text, 
				(System.Reflection.BindingFlags.Instance | System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Public | System.Reflection.BindingFlags.Static), 
				null, 
				JSIL.Array.New(System.Type, [type, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]), 
				null
			));
		return true;
	}
	return false;
};
$asm09.System.Runtime.Serialization.XmlFormatWriterGenerator.CriticalHelper.prototype.WriteValue = function (memberValue, writeXsiType) {
	var localType = memberValue.LocalType;
	var flag = (localType.IsGenericType && 
		(localType.GetGenericTypeDefinition() === System.Runtime.Serialization.Globals.TypeOfNullable));
	if (!localType.IsValueType || flag) {
		if (flag) {
			memberValue = this.UnwrapNullableObject(memberValue);
			localType = memberValue.LocalType;
		} else {
			this.ilg.Load(memberValue);
			this.ilg.Load(null);
			this.ilg.Ceq();
		}
		this.ilg.If$0();
		this.ilg.Call$3(
			this.contextArg, 
			$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.WriteNullMethod, 
			this.xmlWriterArg, 
			localType, 
			$asm09.System.Runtime.Serialization.DataContract.IsTypeSerializable(localType)
		);
		this.ilg.Else();
		var primitiveDataContract = $asm09.System.Runtime.Serialization.PrimitiveDataContract.GetPrimitiveDataContract$0(localType);
		if (!((primitiveDataContract === null) || 
				(primitiveDataContract.UnderlyingType === System.Runtime.Serialization.Globals.TypeOfObject) || writeXsiType)) {
			if (flag) {
				this.ilg.Call$1(this.xmlWriterArg, primitiveDataContract.XmlFormatContentWriterMethod, memberValue);
			} else {
				this.ilg.Call$2(this.contextArg, primitiveDataContract.XmlFormatContentWriterMethod, this.xmlWriterArg, memberValue);
			}
		} else {
			if (!((localType !== System.Runtime.Serialization.Globals.TypeOfObject) && 
					(localType !== System.Runtime.Serialization.Globals.TypeOfValueType) && !System.Runtime.Serialization.Globals.TypeOfNullable.GetInterfaces().IList_Contains(localType))) {
				this.ilg.Load(memberValue);
				this.ilg.ConvertValue(memberValue.LocalType, System.Runtime.Serialization.Globals.TypeOfObject);
				memberValue = this.ilg.DeclareLocal$1(System.Runtime.Serialization.Globals.TypeOfObject, "unwrappedMemberValue");
				localType = memberValue.LocalType;
				this.ilg.Stloc(memberValue);
				this.ilg.If$2(memberValue, $asm09.System.Runtime.Serialization.Cmp.EqualTo, null);
				this.ilg.Call$3(
					this.contextArg, 
					$asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.WriteNullMethod, 
					this.xmlWriterArg, 
					localType, 
					$asm09.System.Runtime.Serialization.DataContract.IsTypeSerializable(localType)
				);
				this.ilg.Else();
			}
			this.InternalSerialize(flag ? $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.InternalSerializeMethod : $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.InternalSerializeReferenceMethod, memberValue, localType, writeXsiType);
			if (localType === System.Runtime.Serialization.Globals.TypeOfObject) {
				this.ilg.EndIf();
			}
		}
		this.ilg.EndIf();
		return;
	}
	var primitiveDataContract2 = $asm09.System.Runtime.Serialization.PrimitiveDataContract.GetPrimitiveDataContract$0(localType);
	if (!((primitiveDataContract2 === null) || writeXsiType)) {
		this.ilg.Call$1(this.xmlWriterArg, primitiveDataContract2.XmlFormatContentWriterMethod, memberValue);
		return;
	}
	this.InternalSerialize($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.InternalSerializeMethod, memberValue, localType, writeXsiType);
};
$asm09.System.Runtime.Serialization.XmlFormatWriterGenerator.CriticalHelper.prototype.InternalSerialize = function (methodInfo, memberValue, memberType, writeXsiType) {
	this.ilg.Load(this.contextArg);
	this.ilg.Load(this.xmlWriterArg);
	this.ilg.Load(memberValue);
	this.ilg.ConvertValue(memberValue.LocalType, System.Runtime.Serialization.Globals.TypeOfObject);
	this.ilg.Call$2(null, $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.IsMemberTypeSameAsMemberValue, memberValue, memberType);
	this.ilg.Load(writeXsiType);
	this.ilg.Load($asm09.System.Runtime.Serialization.DataContract.GetId(memberType.TypeHandle.MemberwiseClone()));
	this.ilg.Ldtoken(memberType);
	this.ilg.Call$7(methodInfo);
};
$asm09.System.Runtime.Serialization.XmlFormatWriterGenerator.CriticalHelper.prototype.UnwrapNullableObject = function (memberValue) {
	var type = memberValue.LocalType;
	var label = this.ilg.DefineLabel().MemberwiseClone();
	var label2 = this.ilg.DefineLabel().MemberwiseClone();
	this.ilg.Load(memberValue);
__loop0__: 
	while (type.IsGenericType && (type.GetGenericTypeDefinition() === System.Runtime.Serialization.Globals.TypeOfNullable)) {
		var type2 = type.GetGenericArguments()[0];
		this.ilg.Dup();
		this.ilg.Call$7($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.GetHasValueMethod.MakeGenericMethod(JSIL.Array.New(System.Type, [type2])));
		this.ilg.Brfalse(label.MemberwiseClone());
		this.ilg.Call$7($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.GetNullableValueMethod.MakeGenericMethod(JSIL.Array.New(System.Type, [type2])));
		type = type2;
	}
	memberValue = this.ilg.DeclareLocal$1(type, "nullableUnwrappedMemberValue");
	this.ilg.Stloc(memberValue);
	this.ilg.Load(false);
	this.ilg.Br(label2.MemberwiseClone());
	this.ilg.MarkLabel(label.MemberwiseClone());
	this.ilg.Pop();
	this.ilg.Call$7($asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.GetDefaultValueMethod.MakeGenericMethod(JSIL.Array.New(System.Type, [type])));
	this.ilg.Stloc(memberValue);
	this.ilg.Load(true);
	this.ilg.MarkLabel(label2.MemberwiseClone());
	return memberValue;
};
$asm09.System.Runtime.Serialization.XmlFormatWriterGenerator.CriticalHelper.prototype.NeedsPrefix = function (type, ns) {
	return ((type === System.Runtime.Serialization.Globals.TypeOfXmlQualifiedName) && 
		!((ns === null) || 
			(ns.Value === null)) && (ns.Value.length > 0));
};
$asm09.System.Runtime.Serialization.XmlFormatWriterGenerator.CriticalHelper.prototype.WriteStartElement = function (type, ns, namespaceLocal, nameLocal, nameIndex) {
	var flag = this.NeedsPrefix(type, ns);
	this.ilg.Load(this.xmlWriterArg);
	if (flag) {
		this.ilg.Load("q");
	}
	if (nameLocal === null) {
		this.ilg.LoadArrayElement(this.memberNamesLocal, nameIndex);
	} else {
		this.ilg.Load(nameLocal);
	}
	this.ilg.Load(namespaceLocal);
	this.ilg.Call$7(flag ? $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.WriteStartElementMethod3 : $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.WriteStartElementMethod2);
};
$asm09.System.Runtime.Serialization.XmlFormatWriterGenerator.CriticalHelper.prototype.WriteEndElement = function () {
	this.ilg.Call$0(this.xmlWriterArg, $asm09.System.Runtime.Serialization.XmlFormatGeneratorStatics.WriteEndElementMethod);
};
$asm09.System.Runtime.Serialization.XmlFormatWriterGenerator.CriticalHelper.prototype.CheckIfMemberHasConflict = function (member, classContract, derivedMostClassContract) {
	if (this.CheckIfConflictingMembersHaveDifferentTypes(member)) {
		return true;
	}
	var name = member.Name;
	var namespace = classContract.StableName.Namespace;
__loop0__: 
	for (var classDataContract = derivedMostClassContract; (classDataContract !== null) && (classDataContract !== classContract); classDataContract = classDataContract.BaseContract) {
		if (namespace == classDataContract.StableName.Namespace) {
			var members = classDataContract.Members;
		__loop1__: 
			for (var i = 0; i < members.Count; ++i) {
				if (name == members.get_Item(i).Name) {
					return this.CheckIfConflictingMembersHaveDifferentTypes(members.get_Item(i));
				}
			}
		}
	}
	return false;
};
$asm09.System.Runtime.Serialization.XmlFormatWriterGenerator.CriticalHelper.prototype.CheckIfConflictingMembersHaveDifferentTypes = function (member) {
__loop0__: 
	for (; member.ConflictingMember; member = member.ConflictingMember) {
		if (member.MemberType !== member.ConflictingMember.MemberType) {
			return true;
		}
	}
	return false;
};
$asm09.System.Runtime.Serialization.XmlFormatWriterGenerator.CriticalHelper.prototype._ctor = function () {
	this.typeIndex = 1;
	System.Object.prototype._ctor.call(this);
};
$asm09.System.Runtime.Serialization.XmlFormatWriterGenerator.CriticalHelper.prototype.ilg = null;
$asm09.System.Runtime.Serialization.XmlFormatWriterGenerator.CriticalHelper.prototype.xmlWriterArg = null;
$asm09.System.Runtime.Serialization.XmlFormatWriterGenerator.CriticalHelper.prototype.contextArg = null;
$asm09.System.Runtime.Serialization.XmlFormatWriterGenerator.CriticalHelper.prototype.dataContractArg = null;
$asm09.System.Runtime.Serialization.XmlFormatWriterGenerator.CriticalHelper.prototype.objectLocal = null;
$asm09.System.Runtime.Serialization.XmlFormatWriterGenerator.CriticalHelper.prototype.contractNamespacesLocal = null;
$asm09.System.Runtime.Serialization.XmlFormatWriterGenerator.CriticalHelper.prototype.memberNamesLocal = null;
$asm09.System.Runtime.Serialization.XmlFormatWriterGenerator.CriticalHelper.prototype.childElementNamespacesLocal = null;
$asm09.System.Runtime.Serialization.XmlFormatWriterGenerator.CriticalHelper.prototype.typeIndex = 0;
$asm09.System.Runtime.Serialization.XmlFormatWriterGenerator.CriticalHelper.prototype.childElementIndex = 0;

$asm09.System.Runtime.Serialization.XmlObjectSerializerContext.prototype._ctor$0 = function (serializer, maxItemsInObjectGraph, streamingContext, ignoreExtensionDataObject) {
	this.scopedKnownTypes = new $asm09.System.Runtime.Serialization.ScopedKnownTypes();
	System.Object.prototype._ctor.call(this);
	this.serializer = serializer;
	this.itemCount = 1;
	this.maxItemsInObjectGraph = maxItemsInObjectGraph;
	this.streamingContext = streamingContext;
	this.ignoreExtensionDataObject = ignoreExtensionDataObject;
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerContext.prototype._ctor$1 = function (serializer, rootTypeDataContract) {
	this._ctor$0(serializer, serializer.MaxItemsInObjectGraph, new System.Runtime.Serialization.StreamingContext(), serializer.IgnoreExtensionDataObject);
	this.rootTypeDataContract = rootTypeDataContract;
	this.serializerKnownTypeList = serializer.knownTypeList;
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerContext.prototype.get_Mode = function () {
	return System.Runtime.Serialization.SerializationMode.SharedContract;
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerContext.prototype.get_IsGetOnlyCollection = function () {
	return false;
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerContext.prototype.set_IsGetOnlyCollection = function (value) {
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerContext.prototype.GetStreamingContext = function () {
	return this.streamingContext;
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerContext.prototype.IncrementItemCount = function (count) {
	if (count > (this.maxItemsInObjectGraph - this.itemCount)) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0($asm09.System.Runtime.Serialization.SR.GetString$0("ExceededMaxItemsQuota", [this.maxItemsInObjectGraph])));
	}
	this.itemCount += count;
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerContext.prototype.get_RemainingItemCount = function () {
	return (this.maxItemsInObjectGraph - this.itemCount);
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerContext.prototype.get_IgnoreExtensionDataObject = function () {
	return this.ignoreExtensionDataObject;
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerContext.prototype.GetDataContract$0 = function (type) {
	return this.GetDataContract$1(type.TypeHandle.MemberwiseClone(), type);
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerContext.prototype.GetDataContract$1 = function (typeHandle, type) {
	if (this.IsGetOnlyCollection) {
		return $asm09.System.Runtime.Serialization.DataContract.GetGetOnlyCollectionDataContract($asm09.System.Runtime.Serialization.DataContract.GetId(typeHandle.MemberwiseClone()), typeHandle.MemberwiseClone(), type, this.Mode);
	}
	return $asm09.System.Runtime.Serialization.DataContract.GetDataContract$2(typeHandle.MemberwiseClone(), type, this.Mode);
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerContext.prototype.GetDataContractSkipValidation = function (typeId, typeHandle, type) {
	if (this.IsGetOnlyCollection) {
		return $asm09.System.Runtime.Serialization.DataContract.GetGetOnlyCollectionDataContractSkipValidation(typeId, typeHandle.MemberwiseClone(), type);
	}
	return $asm09.System.Runtime.Serialization.DataContract.GetDataContractSkipValidation(typeId, typeHandle.MemberwiseClone(), type);
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerContext.prototype.GetDataContract$2 = function (id, typeHandle) {
	if (this.IsGetOnlyCollection) {
		return $asm09.System.Runtime.Serialization.DataContract.GetGetOnlyCollectionDataContract(id, typeHandle.MemberwiseClone(), null, this.Mode);
	}
	return $asm09.System.Runtime.Serialization.DataContract.GetDataContract$3(id, typeHandle.MemberwiseClone(), this.Mode);
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerContext.prototype.CheckIfTypeSerializable = function (memberType, isMemberTypeSerializable) {
	if (!isMemberTypeSerializable) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Runtime.Serialization.InvalidDataContractException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("TypeNotSerializable", [memberType])]));
	}
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerContext.prototype.GetSurrogatedType = function (type) {
	return type;
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerContext.prototype.get_SerializerKnownDataContracts = function () {
	if (!this.isSerializerKnownDataContractsSetExplicit) {
		this.serializerKnownDataContracts = this.serializer.KnownDataContracts;
		this.isSerializerKnownDataContractsSetExplicit = true;
	}
	return this.serializerKnownDataContracts;
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerContext.prototype.GetDataContractFromSerializerKnownTypes = function (qname) {
	var result = new JSIL.Variable(null);
	var dictionary = this.SerializerKnownDataContracts;
	if (dictionary === null) {
		return null;
	}
	if (!dictionary.TryGetValue(qname, /* ref */ result)) {
		return null;
	}
	return result.value;
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerContext.GetDataContractsForKnownTypes = function (knownTypeList) {
	if (knownTypeList === null) {
		return null;
	}
	var result = new JSIL.Variable(JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.Xml.XmlQualifiedName, $asm09.System.Runtime.Serialization.DataContract), "_ctor$0", []));
	var typesChecked = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.Type, System.Type), "_ctor$0", []);
__loop0__: 
	for (var i = 0; i < knownTypeList.ICollection$b1_Count; ++i) {
		var type = knownTypeList.IList$b1_get_Item(i);
		if (type === null) {
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("NullKnownType", ["knownTypes"])]));
		}
		$asm09.System.Runtime.Serialization.DataContract.CheckAndAdd(type, typesChecked, /* ref */ result);
	}
	return result.value;
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerContext.prototype.ResolveDataContractFromKnownTypes = function (typeName, typeNs, memberTypeContract) {
	var dataContract = $asm09.System.Runtime.Serialization.PrimitiveDataContract.GetPrimitiveDataContract$1(typeName, typeNs);
	if (dataContract === null) {
		var xmlQualifiedName = JSIL.New(System.Xml.XmlQualifiedName, "_ctor$2", [typeName, typeNs]);
		dataContract = this.scopedKnownTypes.GetDataContract(xmlQualifiedName);
		if (dataContract === null) {
			dataContract = this.GetDataContractFromSerializerKnownTypes(xmlQualifiedName);
		}
		if (!(dataContract || 
				(memberTypeContract === null) || 
				memberTypeContract.UnderlyingType.IsInterface || !System.Xml.XmlQualifiedName.op_Equality(memberTypeContract.StableName, xmlQualifiedName))) {
			dataContract = memberTypeContract;
		}
		if (!(dataContract || (this.rootTypeDataContract === null))) {
			if (System.Xml.XmlQualifiedName.op_Equality(this.rootTypeDataContract.StableName, xmlQualifiedName)) {
				dataContract = this.rootTypeDataContract;
			} else {
				var collectionDataContract = JSIL.TryCast(this.rootTypeDataContract, $asm09.System.Runtime.Serialization.CollectionDataContract);
			__loop0__: 
				while (collectionDataContract) {
					var dataContract2 = this.GetDataContract$0(this.GetSurrogatedType(collectionDataContract.ItemType));
					if (System.Xml.XmlQualifiedName.op_Equality(dataContract2.StableName, xmlQualifiedName)) {
						dataContract = dataContract2;
						break __loop0__;
					}
					collectionDataContract = JSIL.TryCast(dataContract2, $asm09.System.Runtime.Serialization.CollectionDataContract);
				}
			}
		}
	}
	return dataContract;
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerContext.prototype.PushKnownTypes = function (dc) {
	if (!((dc === null) || (dc.KnownDataContracts === null))) {
		this.scopedKnownTypes.Push(dc.KnownDataContracts);
	}
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerContext.prototype.PopKnownTypes = function (dc) {
	if (!((dc === null) || (dc.KnownDataContracts === null))) {
		this.scopedKnownTypes.Pop();
	}
};
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlObjectSerializerContext.prototype, "_ctor", [
		["_ctor$0", [System.Runtime.Serialization.XmlObjectSerializer, System.Int32, System.Runtime.Serialization.StreamingContext, System.Boolean]], 
		["_ctor$1", [System.Runtime.Serialization.DataContractSerializer, System.Runtime.Serialization.DataContract]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlObjectSerializerContext.prototype, "GetDataContract", [
		["GetDataContract$0", [System.Type]], 
		["GetDataContract$1", [System.RuntimeTypeHandle, System.Type]], 
		["GetDataContract$2", [System.Int32, System.RuntimeTypeHandle]]
	]);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlObjectSerializerContext.prototype, "Mode", 
	$asm09.System.Runtime.Serialization.XmlObjectSerializerContext.prototype.get_Mode, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlObjectSerializerContext.prototype, "IsGetOnlyCollection", 
	$asm09.System.Runtime.Serialization.XmlObjectSerializerContext.prototype.get_IsGetOnlyCollection, $asm09.System.Runtime.Serialization.XmlObjectSerializerContext.prototype.set_IsGetOnlyCollection);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlObjectSerializerContext.prototype, "RemainingItemCount", 
	$asm09.System.Runtime.Serialization.XmlObjectSerializerContext.prototype.get_RemainingItemCount, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlObjectSerializerContext.prototype, "IgnoreExtensionDataObject", 
	$asm09.System.Runtime.Serialization.XmlObjectSerializerContext.prototype.get_IgnoreExtensionDataObject, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlObjectSerializerContext.prototype, "SerializerKnownDataContracts", 
	$asm09.System.Runtime.Serialization.XmlObjectSerializerContext.prototype.get_SerializerKnownDataContracts, null);
$asm09.System.Runtime.Serialization.XmlObjectSerializerContext.prototype.serializer = null;
$asm09.System.Runtime.Serialization.XmlObjectSerializerContext.prototype.rootTypeDataContract = null;
$asm09.System.Runtime.Serialization.XmlObjectSerializerContext.prototype.serializerKnownDataContracts = null;
$asm09.System.Runtime.Serialization.XmlObjectSerializerContext.prototype.isSerializerKnownDataContractsSetExplicit = false;
$asm09.System.Runtime.Serialization.XmlObjectSerializerContext.prototype.serializerKnownTypeList = null;
$asm09.System.Runtime.Serialization.XmlObjectSerializerContext.prototype.itemCount = 0;
$asm09.System.Runtime.Serialization.XmlObjectSerializerContext.prototype.maxItemsInObjectGraph = 0;
$asm09.System.Runtime.Serialization.XmlObjectSerializerContext.prototype.ignoreExtensionDataObject = false;

$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.CreateContext = function (serializer, rootTypeDataContract) {
	return JSIL.New($asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext, "_ctor$0", [serializer, rootTypeDataContract]);
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype._ctor$0 = function (serializer, rootTypeDataContract) {
	this.byValObjectsInScope = new $asm09.System.Runtime.Serialization.ObjectReferenceStack();
	$asm09.System.Runtime.Serialization.XmlObjectSerializerContext.prototype._ctor$1.call(this, serializer, rootTypeDataContract);
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype._ctor$1 = function (serializer, maxItemsInObjectGraph, streamingContext, ignoreExtensionDataObject) {
	this.byValObjectsInScope = new $asm09.System.Runtime.Serialization.ObjectReferenceStack();
	$asm09.System.Runtime.Serialization.XmlObjectSerializerContext.prototype._ctor$0.call(this, serializer, maxItemsInObjectGraph, streamingContext, ignoreExtensionDataObject);
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype.get_SerializedObjects = function () {
	if (this.serializedObjects === null) {
		this.serializedObjects = new $asm09.System.Runtime.Serialization.ObjectToIdCache();
	}
	return this.serializedObjects;
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype.get_IsGetOnlyCollection = function () {
	return this.isGetOnlyCollection;
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype.set_IsGetOnlyCollection = function (value) {
	this.isGetOnlyCollection = value;
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype.StoreIsGetOnlyCollection = function () {
	this.isGetOnlyCollection = true;
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype.InternalSerializeReference = function (xmlWriter, obj, isDeclaredType, writeXsiType, declaredTypeID, declaredTypeHandle) {
	if (!this.OnHandleReference(xmlWriter, obj, true)) {
		this.InternalSerialize(
			xmlWriter, 
			obj, 
			isDeclaredType, 
			writeXsiType, 
			declaredTypeID, 
			declaredTypeHandle
		);
	}
	this.OnEndHandleReference(xmlWriter, obj, true);
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype.InternalSerialize = function (xmlWriter, obj, isDeclaredType, writeXsiType, declaredTypeID, declaredTypeHandle) {
	if (writeXsiType) {
		var typeOfObject = System.Runtime.Serialization.Globals.TypeOfObject;
		this.SerializeWithXsiType(
			xmlWriter, 
			obj, 
			JSIL.GetType(obj).TypeHandle.MemberwiseClone(), 
			null, 
			-1, 
			typeOfObject.TypeHandle.MemberwiseClone(), 
			typeOfObject
		);
		return;
	}
	if (isDeclaredType) {
		var dataContract = this.GetDataContract$2(declaredTypeID, declaredTypeHandle.MemberwiseClone());
		this.SerializeWithoutXsiType(dataContract, xmlWriter, obj, declaredTypeHandle.MemberwiseClone());
		return;
	}
	var typeHandle = JSIL.GetType(obj).TypeHandle.MemberwiseClone();
	if (declaredTypeHandle.GetHashCode() === typeHandle.GetHashCode()) {
		var dataContract2 = (declaredTypeID >= 0) ? this.GetDataContract$2(declaredTypeID, declaredTypeHandle.MemberwiseClone()) : this.GetDataContract$1(declaredTypeHandle.MemberwiseClone(), null);
		this.SerializeWithoutXsiType(dataContract2, xmlWriter, obj, declaredTypeHandle.MemberwiseClone());
		return;
	}
	this.SerializeWithXsiType(
		xmlWriter, 
		obj, 
		typeHandle.MemberwiseClone(), 
		null, 
		declaredTypeID, 
		declaredTypeHandle.MemberwiseClone(), 
		declaredTypeHandle.MemberwiseClone()
	);
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype.SerializeWithoutXsiType = function (dataContract, xmlWriter, obj, declaredTypeHandle) {
	if (this.OnHandleIsReference(xmlWriter, dataContract, obj)) {
		return;
	}
	if (dataContract.KnownDataContracts !== null) {
		this.scopedKnownTypes.Push(dataContract.KnownDataContracts);
		this.WriteDataContractValue(dataContract, xmlWriter, obj, declaredTypeHandle.MemberwiseClone());
		this.scopedKnownTypes.Pop();
		return;
	}
	this.WriteDataContractValue(dataContract, xmlWriter, obj, declaredTypeHandle.MemberwiseClone());
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype.SerializeWithXsiTypeAtTopLevel = function (dataContract, xmlWriter, obj, originalDeclaredTypeHandle) {
	var verifyKnownType = false;
	var underlyingType = this.rootTypeDataContract.UnderlyingType;
	if (!((underlyingType.IsInterface && 
				$asm09.System.Runtime.Serialization.CollectionDataContract.IsCollectionInterface(underlyingType)) || underlyingType.IsArray)) {
		verifyKnownType = this.WriteTypeInfo$0(xmlWriter, dataContract, this.rootTypeDataContract);
	}
	this.SerializeAndVerifyType(
		dataContract, 
		xmlWriter, 
		obj, 
		verifyKnownType, 
		originalDeclaredTypeHandle
	);
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype.SerializeWithXsiType = function (xmlWriter, obj, objectTypeHandle, objectType, declaredTypeID, declaredTypeHandle, declaredType) {
	var verifyKnownType = false;
	if (!(!declaredType.IsInterface || !$asm09.System.Runtime.Serialization.CollectionDataContract.IsCollectionInterface(declaredType))) {
		var dataContract = this.GetDataContractSkipValidation($asm09.System.Runtime.Serialization.DataContract.GetId(objectTypeHandle.MemberwiseClone()), objectTypeHandle.MemberwiseClone(), objectType);
		if (this.OnHandleIsReference(xmlWriter, dataContract, obj)) {
			return;
		}
		dataContract = this.GetDataContract$1(declaredTypeHandle.MemberwiseClone(), declaredType);
		this.WriteClrTypeInfo$0(xmlWriter, dataContract);
	} else if (declaredType.IsArray) {
		dataContract = this.GetDataContract$1(objectTypeHandle.MemberwiseClone(), objectType);
		this.WriteClrTypeInfo$0(xmlWriter, dataContract);
		dataContract = this.GetDataContract$1(declaredTypeHandle.MemberwiseClone(), declaredType);
	} else {
		dataContract = this.GetDataContract$1(objectTypeHandle.MemberwiseClone(), objectType);
		if (this.OnHandleIsReference(xmlWriter, dataContract, obj)) {
			return;
		}
		if (!this.WriteClrTypeInfo$0(xmlWriter, dataContract)) {
			var declaredContract = (declaredTypeID >= 0) ? this.GetDataContract$2(declaredTypeID, declaredTypeHandle.MemberwiseClone()) : this.GetDataContract$1(declaredTypeHandle.MemberwiseClone(), declaredType);
			verifyKnownType = this.WriteTypeInfo$0(xmlWriter, dataContract, declaredContract);
		}
	}
	this.SerializeAndVerifyType(
		dataContract, 
		xmlWriter, 
		obj, 
		verifyKnownType, 
		declaredTypeHandle.MemberwiseClone()
	);
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype.OnHandleIsReference = function (xmlWriter, contract, obj) {
	if (!(contract.IsReference && !this.isGetOnlyCollection)) {
		return false;
	}
	var flag = new JSIL.Variable(true);
	var id = this.SerializedObjects.GetId(obj, /* ref */ flag);
	this.byValObjectsInScope.EnsureSetAsIsReference(obj);
	if (flag.value) {
		xmlWriter.WriteAttributeString$1("z", $asm09.System.Runtime.Serialization.DictionaryGlobals.IdLocalName, $asm09.System.Runtime.Serialization.DictionaryGlobals.SerializationNamespace, System.String.Format(System.Globalization.CultureInfo.InvariantCulture, "{0}{1}", ["i", id]));
		return false;
	}
	xmlWriter.WriteAttributeString$1("z", $asm09.System.Runtime.Serialization.DictionaryGlobals.RefLocalName, $asm09.System.Runtime.Serialization.DictionaryGlobals.SerializationNamespace, System.String.Format(System.Globalization.CultureInfo.InvariantCulture, "{0}{1}", ["i", id]));
	return true;
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype.SerializeAndVerifyType = function (dataContract, xmlWriter, obj, verifyKnownType, declaredTypeHandle) {
	var flag = false;
	if (dataContract.KnownDataContracts !== null) {
		this.scopedKnownTypes.Push(dataContract.KnownDataContracts);
		flag = true;
	}
	if (verifyKnownType) {
		var dataContract2 = $asm09.System.Runtime.Serialization.XmlObjectSerializerContext.prototype.ResolveDataContractFromKnownTypes.call(this, dataContract.StableName.Name, dataContract.StableName.Namespace, null);
		if (!((dataContract2 !== null) && (dataContract2.UnderlyingType === dataContract.UnderlyingType))) {
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0($asm09.System.Runtime.Serialization.SR.GetString$0("DcTypeNotFoundOnSerialize", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(dataContract.UnderlyingType), dataContract.StableName.Name, dataContract.StableName.Namespace])));
		}
	}
	this.WriteDataContractValue(dataContract, xmlWriter, obj, declaredTypeHandle);
	if (flag) {
		this.scopedKnownTypes.Pop();
	}
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype.WriteClrTypeInfo$0 = function (xmlWriter, dataContract) {
	return false;
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype.WriteClrTypeInfo$1 = function (xmlWriter, clrTypeName, clrAssemblyName) {
	return false;
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype.WriteAnyType = function (xmlWriter, value) {
	xmlWriter.WriteAnyType$0(value);
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype.WriteString$0 = function (xmlWriter, value) {
	xmlWriter.WriteString(value);
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype.WriteString$1 = function (xmlWriter, value, name, ns) {
	if (value === null) {
		this.WriteNull$1(
			xmlWriter, 
			System.String, 
			true, 
			name, 
			ns
		);
		return;
	}
	xmlWriter.WriteStartElementPrimitive(name, ns);
	xmlWriter.WriteString(value);
	xmlWriter.WriteEndElementPrimitive();
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype.WriteBase64$0 = function (xmlWriter, value) {
	xmlWriter.WriteBase64(value);
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype.WriteBase64$1 = function (xmlWriter, value, name, ns) {
	if (value === null) {
		this.WriteNull$1(
			xmlWriter, 
			System.Array.Of(System.Byte), 
			true, 
			name, 
			ns
		);
		return;
	}
	xmlWriter.WriteStartElementPrimitive(name, ns);
	xmlWriter.WriteBase64(value);
	xmlWriter.WriteEndElementPrimitive();
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype.WriteUri$0 = function (xmlWriter, value) {
	xmlWriter.WriteUri(value);
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype.WriteUri$1 = function (xmlWriter, value, name, ns) {
	if (System.Uri.op_Equality(value, null)) {
		this.WriteNull$1(
			xmlWriter, 
			System.Uri, 
			true, 
			name, 
			ns
		);
		return;
	}
	xmlWriter.WriteStartElementPrimitive(name, ns);
	xmlWriter.WriteUri(value);
	xmlWriter.WriteEndElementPrimitive();
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype.WriteQName$0 = function (xmlWriter, value) {
	xmlWriter.WriteQName(value);
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype.WriteQName$1 = function (xmlWriter, value, name, ns) {
	if (System.Xml.XmlQualifiedName.op_Equality(value, null)) {
		this.WriteNull$1(
			xmlWriter, 
			System.Xml.XmlQualifiedName, 
			true, 
			name, 
			ns
		);
		return;
	}
	if (!((ns === null) || 
			(ns.Value === null) || (ns.Value.length <= 0))) {
		xmlWriter.WriteStartElement$3("q", name, ns);
	} else {
		xmlWriter.WriteStartElement$2(name, ns);
	}
	xmlWriter.WriteQName(value);
	xmlWriter.WriteEndElement();
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype.HandleGraphAtTopLevel = function (writer, obj, contract) {
	writer.WriteXmlnsAttribute$2("i", $asm09.System.Runtime.Serialization.DictionaryGlobals.SchemaInstanceNamespace);
	this.OnHandleReference(writer, obj, true);
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype.OnHandleReference = function (xmlWriter, obj, canContainCyclicReference) {
	if (xmlWriter.depth < 512) {
		return false;
	}
	if (canContainCyclicReference) {
		if (this.byValObjectsInScope.Contains(obj)) {
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0($asm09.System.Runtime.Serialization.SR.GetString$0("CannotSerializeObjectWithCycles", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(JSIL.GetType(obj))])));
		}
		this.byValObjectsInScope.Push(obj);
	}
	return false;
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype.OnEndHandleReference = function (xmlWriter, obj, canContainCyclicReference) {
	if (xmlWriter.depth < 512) {
		return;
	}
	if (canContainCyclicReference) {
		this.byValObjectsInScope.Pop(obj);
	}
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype.WriteNull$0 = function (xmlWriter, memberType, isMemberTypeSerializable) {
	this.CheckIfTypeSerializable(memberType, isMemberTypeSerializable);
	this.WriteNull$2(xmlWriter);
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype.WriteNull$1 = function (xmlWriter, memberType, isMemberTypeSerializable, name, ns) {
	xmlWriter.WriteStartElement$2(name, ns);
	this.WriteNull$0(xmlWriter, memberType, isMemberTypeSerializable);
	xmlWriter.WriteEndElement();
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype.IncrementArrayCount = function (xmlWriter, array) {
	this.IncrementCollectionCount$1(xmlWriter, array.length0);
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype.IncrementCollectionCount$0 = function (xmlWriter, collection) {
	this.IncrementCollectionCount$1(xmlWriter, collection.ICollection_Count);
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype.IncrementCollectionCountGeneric$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, xmlWriter, collection) {
		this.IncrementCollectionCount$1(xmlWriter, collection.ICollection$b1_Count);
	}
);
$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype.IncrementCollectionCount$1 = function (xmlWriter, size) {
	$asm09.System.Runtime.Serialization.XmlObjectSerializerContext.prototype.IncrementItemCount.call(this, size);
	this.WriteArraySize(xmlWriter, size);
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype.WriteArraySize = function (xmlWriter, size) {
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.IsMemberTypeSameAsMemberValue = function (obj, memberType) {
	return ((obj !== null) && 
		memberType && (JSIL.GetType(obj).TypeHandle).Equals$1(memberType.TypeHandle.MemberwiseClone()));
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.GetDefaultValue$b1 = JSIL.GenericMethod(
	["T"], 
	function (T) {
		return null;
	}
);
$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.GetNullableValue$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, value) {
		return value.Value;
	}
);
$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.ThrowRequiredMemberMustBeEmitted = function (memberName, type) {
	throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Runtime.Serialization.SerializationException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("RequiredMemberMustBeEmitted", [memberName, type.FullName])]));
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.GetHasValue$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, value) {
		return value.HasValue;
	}
);
$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype.WriteIXmlSerializable = function (xmlWriter, obj) {
	if (this.xmlSerializableWriter === null) {
		this.xmlSerializableWriter = new $asm09.System.Runtime.Serialization.XmlSerializableWriter();
	}
	$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.WriteIXmlSerializable(xmlWriter, obj, this.xmlSerializableWriter);
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.WriteRootIXmlSerializable = function (xmlWriter, obj) {
	$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.WriteIXmlSerializable(xmlWriter, obj, new $asm09.System.Runtime.Serialization.XmlSerializableWriter());
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.WriteIXmlSerializable = function (xmlWriter, obj, xmlSerializableWriter) {
	xmlSerializableWriter.BeginWrite(xmlWriter.Writer, obj);
	var xmlSerializable = JSIL.TryCast(obj, System.Xml.Serialization.IXmlSerializable);
	if (xmlSerializable !== null) {
		xmlSerializable.IXmlSerializable_WriteXml(xmlSerializableWriter);
	}
	xmlSerializableWriter.EndWrite();
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype.WriteDataContractValue = function (dataContract, xmlWriter, obj, declaredTypeHandle) {
	dataContract.WriteXmlValue(xmlWriter, obj, this);
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype.WriteNull$2 = function (xmlWriter) {
	System.Runtime.Serialization.XmlObjectSerializer.WriteNull(xmlWriter);
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype.WriteTypeInfo$0 = function (writer, contract, declaredContract) {
	return System.Runtime.Serialization.XmlObjectSerializer.WriteTypeInfo(writer, contract, declaredContract);
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype.WriteTypeInfo$1 = function (writer, dataContractName, dataContractNamespace) {
	writer.WriteAttributeQualifiedName$0(
		"i", 
		$asm09.System.Runtime.Serialization.DictionaryGlobals.XsiTypeLocalName, 
		$asm09.System.Runtime.Serialization.DictionaryGlobals.SchemaInstanceNamespace, 
		dataContractName, 
		dataContractNamespace
	);
};
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype, "_ctor", [
		["_ctor$0", [System.Runtime.Serialization.DataContractSerializer, System.Runtime.Serialization.DataContract]], 
		["_ctor$1", [System.Runtime.Serialization.XmlObjectSerializer, System.Int32, System.Runtime.Serialization.StreamingContext, System.Boolean]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype, "WriteClrTypeInfo", [
		["WriteClrTypeInfo$0", [System.Runtime.Serialization.XmlWriterDelegator, System.Runtime.Serialization.DataContract]], 
		["WriteClrTypeInfo$1", [System.Runtime.Serialization.XmlWriterDelegator, System.String, System.String]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype, "WriteString", [
		["WriteString$0", [System.Runtime.Serialization.XmlWriterDelegator, System.String]], 
		["WriteString$1", [System.Runtime.Serialization.XmlWriterDelegator, System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype, "WriteBase64", [
		["WriteBase64$0", [System.Runtime.Serialization.XmlWriterDelegator, System.Array.Of(System.Byte)]], 
		["WriteBase64$1", [System.Runtime.Serialization.XmlWriterDelegator, System.Array.Of(System.Byte), System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype, "WriteUri", [
		["WriteUri$0", [System.Runtime.Serialization.XmlWriterDelegator, System.Uri]], 
		["WriteUri$1", [System.Runtime.Serialization.XmlWriterDelegator, System.Uri, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype, "WriteQName", [
		["WriteQName$0", [System.Runtime.Serialization.XmlWriterDelegator, System.Xml.XmlQualifiedName]], 
		["WriteQName$1", [System.Runtime.Serialization.XmlWriterDelegator, System.Xml.XmlQualifiedName, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype, "WriteNull", [
		["WriteNull$0", [System.Runtime.Serialization.XmlWriterDelegator, System.Type, System.Boolean]], 
		["WriteNull$1", [System.Runtime.Serialization.XmlWriterDelegator, System.Type, System.Boolean, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]], 
		["WriteNull$2", [System.Runtime.Serialization.XmlWriterDelegator]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype, "IncrementCollectionCount", [
		["IncrementCollectionCount$0", [System.Runtime.Serialization.XmlWriterDelegator, System.Collections.ICollection]], 
		["IncrementCollectionCount$1", [System.Runtime.Serialization.XmlWriterDelegator, System.Int32]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype, "WriteTypeInfo", [
		["WriteTypeInfo$0", [System.Runtime.Serialization.XmlWriterDelegator, System.Runtime.Serialization.DataContract, System.Runtime.Serialization.DataContract]], 
		["WriteTypeInfo$1", [System.Runtime.Serialization.XmlWriterDelegator, System.String, System.String]]
	]);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype, "SerializedObjects", 
	$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype.get_SerializedObjects, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype, "IsGetOnlyCollection", 
	$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype.get_IsGetOnlyCollection, $asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype.set_IsGetOnlyCollection);
Object.defineProperty($asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext, "depthToCheckCyclicReference", {
		"value": 512}
);
$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype.xmlSerializableWriter = null;
$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype.serializedObjects = null;
$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype.isGetOnlyCollection = false;

$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.prototype.get_DeserializedObjects = function () {
	if (this.deserializedObjects === null) {
		this.deserializedObjects = new $asm09.System.Runtime.Serialization.HybridObjectCache();
	}
	return this.deserializedObjects;
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.prototype.get_IsGetOnlyCollection = function () {
	return this.isGetOnlyCollection;
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.prototype.set_IsGetOnlyCollection = function (value) {
	this.isGetOnlyCollection = value;
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.prototype.GetCollectionMember = function () {
	return this.getOnlyCollectionValue;
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.prototype.StoreCollectionMemberInfo = function (collectionMember) {
	this.getOnlyCollectionValue = collectionMember;
	this.isGetOnlyCollection = true;
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.ThrowNullValueReturnedForGetOnlyCollectionException = function (type) {
	throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0($asm09.System.Runtime.Serialization.SR.GetString$0("NullValueReturnedForGetOnlyCollection", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(type)])));
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.ThrowArrayExceededSizeException = function (arraySize, type) {
	throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0($asm09.System.Runtime.Serialization.SR.GetString$0("ArrayExceededSize", [arraySize, $asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(type)])));
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.CreateContext = function (serializer, rootTypeDataContract) {
	return JSIL.New($asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext, "_ctor$1", [serializer, rootTypeDataContract]);
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.prototype._ctor$0 = function (serializer, maxItemsInObjectGraph, streamingContext, ignoreExtensionDataObject) {
	$asm09.System.Runtime.Serialization.XmlObjectSerializerContext.prototype._ctor$0.call(this, serializer, maxItemsInObjectGraph, streamingContext, ignoreExtensionDataObject);
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.prototype._ctor$1 = function (serializer, rootTypeDataContract) {
	$asm09.System.Runtime.Serialization.XmlObjectSerializerContext.prototype._ctor$1.call(this, serializer, rootTypeDataContract);
	this.attributes = new $asm09.System.Runtime.Serialization.Attributes();
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.prototype.InternalDeserialize$0 = function (xmlReader, id, declaredTypeHandle, name, ns) {
	var dataContract = new JSIL.Variable(this.GetDataContract$2(id, declaredTypeHandle));
	return this.InternalDeserialize$3(xmlReader, name, ns, /* ref */ dataContract);
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.prototype.InternalDeserialize$1 = function (xmlReader, declaredType, name, ns) {
	var dataContract = new JSIL.Variable($asm09.System.Runtime.Serialization.XmlObjectSerializerContext.prototype.GetDataContract$0.call(this, declaredType));
	return this.InternalDeserialize$3(xmlReader, name, ns, /* ref */ dataContract);
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.prototype.InternalDeserialize$2 = function (xmlReader, declaredType, $dataContract, name, ns) {
	var dataContract = new JSIL.Variable($dataContract);
	if (dataContract.value === null) {
		$asm09.System.Runtime.Serialization.XmlObjectSerializerContext.prototype.GetDataContract$0.call(this, declaredType);
	}
	return this.InternalDeserialize$3(xmlReader, name, ns, /* ref */ dataContract);
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.prototype.TryHandleNullOrRef = function (reader, declaredType, name, ns, /* ref */ retObj) {
	this.ReadAttributes(reader);
	if (this.attributes.Ref != $asm09.System.Runtime.Serialization.Globals.NewObjectId) {
		if (this.isGetOnlyCollection) {
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0($asm09.System.Runtime.Serialization.SR.GetString$0("ErrorDeserializing", [$asm09.System.Runtime.Serialization.SR.GetString$0("ErrorTypeInfo", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(declaredType)]), $asm09.System.Runtime.Serialization.SR.GetString$0("XmlStartElementExpected", ["Ref"])])));
		}
		retObj.value = this.GetExistingObject(this.attributes.Ref, declaredType, name, ns);
		reader.Skip();
		return true;
	} else {
		if (this.attributes.XsiNil) {
			reader.Skip();
			return true;
		}
		return false;
	}
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.prototype.InternalDeserialize$3 = function (reader, name, ns, /* ref */ dataContract) {
	var result = new JSIL.Variable(null);
	if (this.TryHandleNullOrRef(
			reader, 
			dataContract.value.UnderlyingType, 
			name, 
			ns, 
			/* ref */ result
		)) {
		return result.value;
	}
	var flag = false;
	if (dataContract.value.KnownDataContracts !== null) {
		this.scopedKnownTypes.Push(dataContract.value.KnownDataContracts);
		flag = true;
	}
	if (this.attributes.XsiTypeName !== null) {
		dataContract.value = $asm09.System.Runtime.Serialization.XmlObjectSerializerContext.prototype.ResolveDataContractFromKnownTypes.call(this, this.attributes.XsiTypeName, this.attributes.XsiTypeNamespace, dataContract.value);
		if (dataContract.value === null) {
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0(System.Runtime.Serialization.XmlObjectSerializer.TryAddLineInfo(reader, $asm09.System.Runtime.Serialization.SR.GetString$0("DcTypeNotFoundOnDeserialize", [this.attributes.XsiTypeNamespace, this.attributes.XsiTypeName, reader.NamespaceURI, reader.LocalName]))));
		}
		flag = this.ReplaceScopedKnownTypesTop(dataContract.value.KnownDataContracts, flag);
	}
	if (flag) {
		var result2 = this.ReadDataContractValue(dataContract.value, reader);
		this.scopedKnownTypes.Pop();
		return result2;
	}
	return this.ReadDataContractValue(dataContract.value, reader);
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.prototype.ReplaceScopedKnownTypesTop = function (knownDataContracts, knownTypesAddedInCurrentScope) {
	if (knownTypesAddedInCurrentScope) {
		this.scopedKnownTypes.Pop();
		knownTypesAddedInCurrentScope = false;
	}
	if (knownDataContracts !== null) {
		this.scopedKnownTypes.Push(knownDataContracts);
		knownTypesAddedInCurrentScope = true;
	}
	return knownTypesAddedInCurrentScope;
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.MoveToNextElement = function (xmlReader) {
	return (xmlReader.MoveToContent() !== System.Xml.XmlNodeType.EndElement);
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.prototype.GetMemberIndex = function (xmlReader, memberNames, memberNamespaces, memberIndex, extensionData) {
__loop0__: 
	for (var i = (memberIndex + 1); i < memberNames.length; ++i) {
		if (xmlReader.IsStartElement$2(memberNames[i], memberNamespaces[i])) {
			return i;
		}
	}
	this.HandleMemberNotFound(xmlReader, extensionData, memberIndex);
	return memberNames.length;
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.prototype.GetMemberIndexWithRequiredMembers = function (xmlReader, memberNames, memberNamespaces, memberIndex, requiredIndex, extensionData) {
__loop0__: 
	for (var i = (memberIndex + 1); i < memberNames.length; ++i) {
		if (xmlReader.IsStartElement$2(memberNames[i], memberNamespaces[i])) {
			if (requiredIndex < i) {
				$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.ThrowRequiredMemberMissingException(xmlReader, memberIndex, requiredIndex, memberNames);
			}
			return i;
		}
	}
	this.HandleMemberNotFound(xmlReader, extensionData, memberIndex);
	return memberNames.length;
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.ThrowRequiredMemberMissingException = function (xmlReader, memberIndex, requiredIndex, memberNames) {
	var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
	if (requiredIndex === memberNames.length) {
		--requiredIndex;
	}
__loop0__: 
	for (var i = (memberIndex + 1); i <= requiredIndex; ++i) {
		if (stringBuilder.Length !== 0) {
			stringBuilder.Append$2(" | ");
		}
		stringBuilder.Append$2(memberNames[i].Value);
	}
	throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0(System.Runtime.Serialization.XmlObjectSerializer.TryAddLineInfo(xmlReader, $asm09.System.Runtime.Serialization.SR.GetString$0("UnexpectedElementExpectingElements", [xmlReader.NodeType, xmlReader.LocalName, xmlReader.NamespaceURI, stringBuilder.toString()]))));
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.prototype.HandleMemberNotFound = function (xmlReader, extensionData, memberIndex) {
	xmlReader.MoveToContent();
	if (xmlReader.NodeType !== System.Xml.XmlNodeType.Element) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.CreateUnexpectedStateException(System.Xml.XmlNodeType.Element, xmlReader));
	}
	if (!(!$asm09.System.Runtime.Serialization.XmlObjectSerializerContext.prototype.get_IgnoreExtensionDataObject.call(this) && extensionData)) {
		this.SkipUnknownElement(xmlReader);
		return;
	}
	this.HandleUnknownElement(xmlReader, extensionData, memberIndex);
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.prototype.HandleUnknownElement = function (xmlReader, extensionData, memberIndex) {
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.prototype.SkipUnknownElement = function (xmlReader) {
	this.ReadAttributes(xmlReader);
	xmlReader.Skip();
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.prototype.ReadIfNullOrRef = function (xmlReader, memberType, isMemberTypeSerializable) {
	if (this.attributes.Ref != $asm09.System.Runtime.Serialization.Globals.NewObjectId) {
		this.CheckIfTypeSerializable(memberType, isMemberTypeSerializable);
		xmlReader.Skip();
		return this.attributes.Ref;
	}
	if (this.attributes.XsiNil) {
		this.CheckIfTypeSerializable(memberType, isMemberTypeSerializable);
		xmlReader.Skip();
		return null;
	}
	return $asm09.System.Runtime.Serialization.Globals.NewObjectId;
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.prototype.ReadAttributes = function (xmlReader) {
	if (this.attributes === null) {
		this.attributes = new $asm09.System.Runtime.Serialization.Attributes();
	}
	this.attributes.Read(xmlReader);
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.prototype.ResetAttributes = function () {
	if (this.attributes !== null) {
		this.attributes.Reset();
	}
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.prototype.GetObjectId = function () {
	return this.attributes.Id;
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.prototype.GetArraySize = function () {
	return -1;
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.prototype.AddNewObject = function (obj) {
	this.AddNewObjectWithId(this.attributes.Id, obj);
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.prototype.AddNewObjectWithId = function (id, obj) {
	if (id != $asm09.System.Runtime.Serialization.Globals.NewObjectId) {
		this.DeserializedObjects.Add(id, obj);
	}
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.prototype.GetExistingObject = function (id, type, name, ns) {
	var object = this.DeserializedObjects.GetObject(id);
	if (object === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0($asm09.System.Runtime.Serialization.SR.GetString$0("DeserializedObjectWithIdNotFound", [id])));
	}
	return object;
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.Read = function (xmlReader) {
	if (!xmlReader.Read()) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0($asm09.System.Runtime.Serialization.SR.GetString$2("UnexpectedEndOfFile")));
	}
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.ParseQualifiedName = function (qname, xmlReader, /* ref */ name, /* ref */ ns, /* ref */ prefix) {
	var num = qname.IndexOf$0(":");
	prefix.value = "";
	if (num >= 0) {
		prefix.value = qname.Substring$1(0, num);
	}
	name.value = qname.Substring$0((num + 1));
	ns.value = xmlReader.LookupNamespace(prefix.value);
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.EnsureArraySize$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, array, index) {
		if (array.length <= index) {
			if (index === 2147483647) {
				throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0($asm09.System.Runtime.Serialization.SR.GetString$0("MaxArrayLengthExceeded", [2147483647, $asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(T)])));
			}
			var num = (index < 1073741823) ? (index * 2) : 2147483647;
			var array2 = JSIL.Array.New(T, num);
			System.Array.Copy$1(
				array, 
				0, 
				array2, 
				0, 
				array.length
			);
			array = array2;
		}
		return array;
	}
);
$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.TrimArraySize$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, array, size) {
		if (size !== array.length) {
			var array2 = JSIL.Array.New(T, size);
			System.Array.Copy$1(
				array, 
				0, 
				array2, 
				0, 
				size
			);
			array = array2;
		}
		return array;
	}
);
$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.prototype.CheckEndOfArray = function (xmlReader, arraySize, itemName, itemNamespace) {
	if (xmlReader.NodeType === System.Xml.XmlNodeType.EndElement) {
		return;
	}
__loop0__: 
	while (xmlReader.IsStartElement$0()) {
		if (xmlReader.IsStartElement$2(itemName, itemNamespace)) {
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0($asm09.System.Runtime.Serialization.SR.GetString$0("ArrayExceededSizeAttribute", [arraySize, itemName.Value, itemNamespace.Value])));
		}
		this.SkipUnknownElement(xmlReader);
	}
	if (xmlReader.NodeType !== System.Xml.XmlNodeType.EndElement) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.CreateUnexpectedStateException(System.Xml.XmlNodeType.EndElement, xmlReader));
	}
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.prototype.ReadIXmlSerializable = function (xmlReader, xmlDataContract, isMemberType) {
	if (this.xmlSerializableReader === null) {
		this.xmlSerializableReader = new $asm09.System.Runtime.Serialization.XmlSerializableReader();
	}
	return $asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.ReadIXmlSerializable(this.xmlSerializableReader, xmlReader, xmlDataContract, isMemberType);
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.ReadRootIXmlSerializable = function (xmlReader, xmlDataContract, isMemberType) {
	return $asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.ReadIXmlSerializable(new $asm09.System.Runtime.Serialization.XmlSerializableReader(), xmlReader, xmlDataContract, isMemberType);
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.ReadIXmlSerializable = function (xmlSerializableReader, xmlReader, xmlDataContract, isMemberType) {
	xmlSerializableReader.BeginRead(xmlReader);
	if (!(!isMemberType || xmlDataContract.HasRoot)) {
		xmlReader.Read();
		xmlReader.MoveToContent();
	}
	var xmlSerializable = xmlDataContract.CreateXmlSerializableDelegate();
	xmlSerializable.IXmlSerializable_ReadXml(xmlSerializableReader);
	xmlSerializableReader.EndRead();
	return xmlSerializable;
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.prototype.ResolveDataContractFromTypeName = function () {
	if (this.attributes.XsiTypeName !== null) {
		return $asm09.System.Runtime.Serialization.XmlObjectSerializerContext.prototype.ResolveDataContractFromKnownTypes.call(this, this.attributes.XsiTypeName, this.attributes.XsiTypeNamespace, null);
	}
	return null;
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.CreateUnexpectedStateException = function (expectedState, xmlReader) {
	return System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationExceptionWithReaderDetails($asm09.System.Runtime.Serialization.SR.GetString$0("ExpectingState", [expectedState]), xmlReader);
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.CreateSerializationException = function (message) {
	return System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0(message);
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.prototype.ReadDataContractValue = function (dataContract, reader) {
	return dataContract.ReadXmlValue(reader, this);
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.prototype.CreateReaderDelegatorForReader = function (xmlReader) {
	return new $asm09.System.Runtime.Serialization.XmlReaderDelegator(xmlReader);
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.prototype.IsReadingCollectionExtensionData = function (xmlReader) {
	return (this.attributes.ArraySZSize !== -1);
};
$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.prototype.IsReadingClassExtensionData = function (xmlReader) {
	return false;
};
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlObjectSerializerReadContext.prototype, "_ctor", [
		["_ctor$0", [System.Runtime.Serialization.XmlObjectSerializer, System.Int32, System.Runtime.Serialization.StreamingContext, System.Boolean]], 
		["_ctor$1", [System.Runtime.Serialization.DataContractSerializer, System.Runtime.Serialization.DataContract]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlObjectSerializerReadContext.prototype, "InternalDeserialize", [
		["InternalDeserialize$0", [System.Runtime.Serialization.XmlReaderDelegator, System.Int32, System.RuntimeTypeHandle, System.String, System.String]], 
		["InternalDeserialize$1", [System.Runtime.Serialization.XmlReaderDelegator, System.Type, System.String, System.String]], 
		["InternalDeserialize$2", [System.Runtime.Serialization.XmlReaderDelegator, System.Type, System.Runtime.Serialization.DataContract, System.String, System.String]], 
		["InternalDeserialize$3", [System.Runtime.Serialization.XmlReaderDelegator, System.String, System.String, JSIL.Reference.Of(System.Runtime.Serialization.DataContract)]]
	]);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.prototype, "DeserializedObjects", 
	$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.prototype.get_DeserializedObjects, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.prototype, "IsGetOnlyCollection", 
	$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.prototype.get_IsGetOnlyCollection, $asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.prototype.set_IsGetOnlyCollection);
$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.prototype.attributes = null;
$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.prototype.deserializedObjects = null;
$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.prototype.xmlSerializableReader = null;
$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.prototype.getOnlyCollectionValue = null;
$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.prototype.isGetOnlyCollection = false;

$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype._ctor = function (reader) {
	System.Object.prototype._ctor.call(this);
	System.Runtime.Serialization.XmlObjectSerializer.CheckNull(reader, "reader");
	this.reader = reader;
	this.dictionaryReader = JSIL.TryCast(reader, System.Xml.XmlDictionaryReader);
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.get_UnderlyingReader = function () {
	return this.reader;
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.get_AttributeCount = function () {
	if (!this.isEndOfEmptyElement) {
		return this.reader.AttributeCount;
	}
	return 0;
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.GetAttribute$0 = function (name) {
	if (!this.isEndOfEmptyElement) {
		return this.reader.GetAttribute$0(name);
	}
	return null;
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.GetAttribute$1 = function (name, namespaceUri) {
	if (!this.isEndOfEmptyElement) {
		return this.reader.GetAttribute$1(name, namespaceUri);
	}
	return null;
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.GetAttribute$2 = function (i) {
	if (this.isEndOfEmptyElement) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["i", $asm09.System.Runtime.Serialization.SR.GetString$2("XmlElementAttributes")]));
	}
	return this.reader.GetAttribute$2(i);
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.get_IsEmptyElement = function () {
	return false;
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.IsNamespaceURI = function (ns) {
	if (this.dictionaryReader === null) {
		return ns == this.reader.NamespaceURI;
	}
	return this.dictionaryReader.IsNamespaceUri$0(ns);
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.IsLocalName$0 = function (localName) {
	if (this.dictionaryReader === null) {
		return localName == this.reader.LocalName;
	}
	return this.dictionaryReader.IsLocalName$0(localName);
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.IsNamespaceUri = function (ns) {
	if (this.dictionaryReader === null) {
		return ns.Value == this.reader.NamespaceURI;
	}
	return this.dictionaryReader.IsNamespaceUri$1(ns);
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.IsLocalName$1 = function (localName) {
	if (this.dictionaryReader === null) {
		return localName.Value == this.reader.LocalName;
	}
	return this.dictionaryReader.IsLocalName$1(localName);
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.IndexOfLocalName = function (localNames, ns) {
	if (this.dictionaryReader !== null) {
		return this.dictionaryReader.IndexOfLocalName$1(localNames, ns);
	}
	if (this.reader.NamespaceURI == ns.Value) {
		var localName = this.LocalName;
	__loop0__: 
		for (var i = 0; i < localNames.length; ++i) {
			if (localName == localNames[i].Value) {
				return i;
			}
		}
	}
	return -1;
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.IsStartElement$0 = function () {
	return (!this.isEndOfEmptyElement && this.reader.IsStartElement$0());
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.IsStartElement$1 = function (localname, ns) {
	return (!this.isEndOfEmptyElement && this.reader.IsStartElement$2(localname, ns));
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.IsStartElement$2 = function (localname, ns) {
	if (this.dictionaryReader === null) {
		return (!this.isEndOfEmptyElement && this.reader.IsStartElement$2(localname.Value, ns.Value));
	}
	return (!this.isEndOfEmptyElement && this.dictionaryReader.IsStartElement(localname, ns));
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.MoveToAttribute$0 = function (name) {
	return (!this.isEndOfEmptyElement && this.reader.MoveToAttribute$0(name));
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.MoveToAttribute$1 = function (name, ns) {
	return (!this.isEndOfEmptyElement && this.reader.MoveToAttribute$1(name, ns));
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.MoveToAttribute$2 = function (i) {
	if (this.isEndOfEmptyElement) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["i", $asm09.System.Runtime.Serialization.SR.GetString$2("XmlElementAttributes")]));
	}
	this.reader.MoveToAttribute$2(i);
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.MoveToElement = function () {
	return (!this.isEndOfEmptyElement && this.reader.MoveToElement());
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.MoveToFirstAttribute = function () {
	return (!this.isEndOfEmptyElement && this.reader.MoveToFirstAttribute());
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.MoveToNextAttribute = function () {
	return (!this.isEndOfEmptyElement && this.reader.MoveToNextAttribute());
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.get_NodeType = function () {
	if (!this.isEndOfEmptyElement) {
		return this.reader.NodeType;
	}
	return System.Xml.XmlNodeType.EndElement;
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.Read = function () {
	this.reader.MoveToElement();
	if (!this.reader.IsEmptyElement) {
		return this.reader.Read();
	}
	if (this.isEndOfEmptyElement) {
		this.isEndOfEmptyElement = false;
		return this.reader.Read();
	}
	this.isEndOfEmptyElement = true;
	return true;
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.MoveToContent = function () {
	if (this.isEndOfEmptyElement) {
		return System.Xml.XmlNodeType.EndElement;
	}
	return this.reader.MoveToContent();
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.ReadAttributeValue = function () {
	return (!this.isEndOfEmptyElement && this.reader.ReadAttributeValue());
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.ReadEndElement = function () {
	if (this.isEndOfEmptyElement) {
		this.Read();
		return;
	}
	this.reader.ReadEndElement();
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.CreateInvalidPrimitiveTypeException = function (type) {
	return JSIL.New(System.Runtime.Serialization.InvalidDataContractException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0(type.IsInterface ? "InterfaceTypeCannotBeCreated" : "InvalidPrimitiveType", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(type)])]);
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.ThrowConversionException = function (value, type) {
	throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Xml.XmlException, "_ctor$1", [System.Runtime.Serialization.XmlObjectSerializer.TryAddLineInfo(this, $asm09.System.Runtime.Serialization.SR.GetString$0("XmlInvalidConversion", [value, type]))]));
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.ThrowNotAtElement = function () {
	throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Xml.XmlException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("XmlStartElementExpected", ["EndElement"])]));
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.ReadElementContentAsChar = function () {
	return this.ToChar(this.ReadElementContentAsInt());
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.ToChar = function (value) {
	if (!((value >= 0) && (value <= 65535))) {
		this.ThrowConversionException((value).toString(), "Char");
	}
	return String.fromCharCode(value);
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.ReadElementContentAsString = function () {
	if (this.isEndOfEmptyElement) {
		this.ThrowNotAtElement();
	}
	return this.reader.ReadElementContentAsString$0();
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.ReadContentAsString = function () {
	if (!this.isEndOfEmptyElement) {
		return this.reader.ReadContentAsString();
	}
	return System.String.Empty;
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.ReadElementContentAsBoolean = function () {
	if (this.isEndOfEmptyElement) {
		this.ThrowNotAtElement();
	}
	return this.reader.ReadElementContentAsBoolean$0();
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.ReadContentAsBoolean = function () {
	if (this.isEndOfEmptyElement) {
		this.ThrowConversionException(System.String.Empty, "Boolean");
	}
	return this.reader.ReadContentAsBoolean();
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.ReadElementContentAsFloat = function () {
	if (this.isEndOfEmptyElement) {
		this.ThrowNotAtElement();
	}
	return this.reader.ReadElementContentAsFloat$0();
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.ReadElementContentAsDouble = function () {
	if (this.isEndOfEmptyElement) {
		this.ThrowNotAtElement();
	}
	return this.reader.ReadElementContentAsDouble$0();
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.ReadElementContentAsDecimal = function () {
	if (this.isEndOfEmptyElement) {
		this.ThrowNotAtElement();
	}
	return this.reader.ReadElementContentAsDecimal$0();
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.ReadElementContentAsBase64 = function () {
	if (this.isEndOfEmptyElement) {
		this.ThrowNotAtElement();
	}
	if (this.dictionaryReader === null) {
		return this.ReadContentAsBase64(this.reader.ReadElementContentAsString$0());
	}
	return this.dictionaryReader.ReadElementContentAsBase64();
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.ReadContentAsBase64 = function (str) {
	if (str === null) {
		return null;
	}
	str = str.Trim$1();
	if (str.length === 0) {
		return JSIL.Array.New(System.Byte, 0);
	}
	try {
		var result = System.Convert.FromBase64String(str);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.ArgumentException)) {
			var arg_25_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$1(str, "byte[]", arg_25_0));
		} else if (JSIL.CheckType($exception, System.FormatException)) {
			var arg_38_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$1(str, "byte[]", arg_38_0));
		} else {
			throw $exception;
		}
	}
	return result;
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.ReadElementContentAsDateTime = function () {
	if (this.isEndOfEmptyElement) {
		this.ThrowNotAtElement();
	}
	return this.reader.ReadElementContentAsDateTime$0();
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.ReadElementContentAsInt = function () {
	if (this.isEndOfEmptyElement) {
		this.ThrowNotAtElement();
	}
	return this.reader.ReadElementContentAsInt$0();
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.ReadContentAsInt = function () {
	if (this.isEndOfEmptyElement) {
		this.ThrowConversionException(System.String.Empty, "Int32");
	}
	return this.reader.ReadContentAsInt();
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.ReadElementContentAsLong = function () {
	if (this.isEndOfEmptyElement) {
		this.ThrowNotAtElement();
	}
	return this.reader.ReadElementContentAsLong$0();
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.ReadElementContentAsShort = function () {
	return this.ToShort(this.ReadElementContentAsInt());
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.ToShort = function (value) {
	if (!((value >= -32768) && (value <= 32767))) {
		this.ThrowConversionException((value).toString(), "Int16");
	}
	return value;
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.ReadElementContentAsUnsignedByte = function () {
	return this.ToByte(this.ReadElementContentAsInt());
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.ToByte = function (value) {
	if (!((value >= 0) && (value <= 255))) {
		this.ThrowConversionException((value).toString(), "Byte");
	}
	return value;
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.ReadElementContentAsSignedByte = function () {
	return this.ToSByte(this.ReadElementContentAsInt());
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.ToSByte = function (value) {
	if (!((value >= -128) && (value <= 127))) {
		this.ThrowConversionException((value).toString(), "SByte");
	}
	return value;
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.ReadElementContentAsUnsignedInt = function () {
	return this.ToUInt32(this.ReadElementContentAsLong());
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.ToUInt32 = function (value) {
	if (!((value >= 0) && (value <= -1))) {
		this.ThrowConversionException((value).toString(), "UInt32");
	}
	return value;
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.ReadElementContentAsUnsignedLong = function () {
	if (this.isEndOfEmptyElement) {
		this.ThrowNotAtElement();
	}
	var text = this.reader.ReadElementContentAsString$0();
	if (!((text !== null) && (text.length !== 0))) {
		this.ThrowConversionException(System.String.Empty, "UInt64");
	}
	return $asm09.System.Xml.XmlConverter.ToUInt64$0(text);
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.ReadElementContentAsUnsignedShort = function () {
	return this.ToUInt16(this.ReadElementContentAsInt());
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.ToUInt16 = function (value) {
	if (!((value >= 0) && (value <= 65535))) {
		this.ThrowConversionException((value).toString(), "UInt16");
	}
	return value;
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.ReadElementContentAsTimeSpan = function () {
	if (this.isEndOfEmptyElement) {
		this.ThrowNotAtElement();
	}
	var value = this.reader.ReadElementContentAsString$0();
	return $asm09.System.Xml.XmlConverter.ToTimeSpan$0(value);
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.ReadElementContentAsGuid = function () {
	if (this.isEndOfEmptyElement) {
		this.ThrowNotAtElement();
	}
	var text = this.reader.ReadElementContentAsString$0();
	try {
		var result = JSIL.New(System.Guid, "_ctor$4", [text]);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.ArgumentException)) {
			var arg_24_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$1(text, "Guid", arg_24_0));
		} else if (JSIL.CheckType($exception, System.FormatException)) {
			var arg_37_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$1(text, "Guid", arg_37_0));
		} else if (JSIL.CheckType($exception, System.OverflowException)) {
			var arg_4A_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$1(text, "Guid", arg_4A_0));
		} else {
			throw $exception;
		}
	}
	return result;
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.ReadElementContentAsUri = function () {
	if (this.isEndOfEmptyElement) {
		this.ThrowNotAtElement();
	}
	var text = this.ReadElementContentAsString();
	try {
		var result = JSIL.New(System.Uri, "_ctor$1", [text, System.UriKind.RelativeOrAbsolute]);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.ArgumentException)) {
			var arg_1F_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$1(text, "Uri", arg_1F_0));
		} else if (JSIL.CheckType($exception, System.FormatException)) {
			var arg_32_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$1(text, "Uri", arg_32_0));
		} else {
			throw $exception;
		}
	}
	return result;
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.ReadElementContentAsQName = function () {
	this.Read();
	var result = this.ReadContentAsQName();
	this.ReadEndElement();
	return result;
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.ReadContentAsQName = function () {
	return this.ParseQualifiedName(this.ReadContentAsString());
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.ParseQualifiedName = function (str) {
	var empty = new JSIL.Variable(null), text = new JSIL.Variable(null);
	if (!((str !== null) && (str.length !== 0))) {
		var ns = new JSIL.Variable((empty.value = System.String.Empty));
	} else {
		$asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.ParseQualifiedName(
			str, 
			this, 
			/* ref */ empty, 
			/* ref */ ns, 
			/* ref */ text
		);
	}
	return JSIL.New(System.Xml.XmlQualifiedName, "_ctor$2", [empty.value, ns.value]);
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.CheckExpectedArrayLength = function (context, arrayLength) {
	context.IncrementItemCount(arrayLength);
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.GetArrayLengthQuota = function (context) {
	return System.Math.Min(context.RemainingItemCount, 2147483647);
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.CheckActualArrayLength = function (expectedLength, actualLength, itemName, itemNamespace) {
	if (expectedLength !== actualLength) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0($asm09.System.Runtime.Serialization.SR.GetString$0("ArrayExceededSizeAttribute", [expectedLength, itemName.Value, itemNamespace.Value])));
	}
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.TryReadBooleanArray = function (context, itemName, itemNamespace, arrayLength, /* ref */ array) {
	var num2 = 0;
	if (this.dictionaryReader === null) {
		array.value = null;
		return false;
	}
	if (arrayLength !== -1) {
		this.CheckExpectedArrayLength(context, arrayLength);
		array.value = JSIL.Array.New(System.Boolean, arrayLength);
	__loop0__: 
		for (var num = 0; (num2 = this.dictionaryReader.ReadArray$1(
					itemName, 
					itemNamespace, 
					array.value, 
					num, 
					(arrayLength - num)
				)) > 0; num += num2) {
		}
		this.CheckActualArrayLength(arrayLength, num, itemName, itemNamespace);
	} else {
		array.value = $asm09.System.Xml.BooleanArrayHelperWithDictionaryString.Instance.ReadArray$0(this.dictionaryReader, itemName, itemNamespace, this.GetArrayLengthQuota(context));
		context.IncrementItemCount(array.value.length);
	}
	return true;
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.TryReadDateTimeArray = function (context, itemName, itemNamespace, arrayLength, /* ref */ array) {
	var num2 = 0;
	if (this.dictionaryReader === null) {
		array.value = null;
		return false;
	}
	if (arrayLength !== -1) {
		this.CheckExpectedArrayLength(context, arrayLength);
		array.value = JSIL.Array.New(System.DateTime, arrayLength);
	__loop0__: 
		for (var num = 0; (num2 = this.dictionaryReader.ReadArray$15(
					itemName, 
					itemNamespace, 
					array.value, 
					num, 
					(arrayLength - num)
				)) > 0; num += num2) {
		}
		this.CheckActualArrayLength(arrayLength, num, itemName, itemNamespace);
	} else {
		array.value = $asm09.System.Xml.DateTimeArrayHelperWithDictionaryString.Instance.ReadArray$0(this.dictionaryReader, itemName, itemNamespace, this.GetArrayLengthQuota(context));
		context.IncrementItemCount(array.value.length);
	}
	return true;
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.TryReadDecimalArray = function (context, itemName, itemNamespace, arrayLength, /* ref */ array) {
	var num2 = 0;
	if (this.dictionaryReader === null) {
		array.value = null;
		return false;
	}
	if (arrayLength !== -1) {
		this.CheckExpectedArrayLength(context, arrayLength);
		array.value = JSIL.Array.New(System.Decimal, arrayLength);
	__loop0__: 
		for (var num = 0; (num2 = this.dictionaryReader.ReadArray$13(
					itemName, 
					itemNamespace, 
					array.value, 
					num, 
					(arrayLength - num)
				)) > 0; num += num2) {
		}
		this.CheckActualArrayLength(arrayLength, num, itemName, itemNamespace);
	} else {
		array.value = $asm09.System.Xml.DecimalArrayHelperWithDictionaryString.Instance.ReadArray$0(this.dictionaryReader, itemName, itemNamespace, this.GetArrayLengthQuota(context));
		context.IncrementItemCount(array.value.length);
	}
	return true;
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.TryReadInt32Array = function (context, itemName, itemNamespace, arrayLength, /* ref */ array) {
	var num2 = 0;
	if (this.dictionaryReader === null) {
		array.value = null;
		return false;
	}
	if (arrayLength !== -1) {
		this.CheckExpectedArrayLength(context, arrayLength);
		array.value = JSIL.Array.New(System.Int32, arrayLength);
	__loop0__: 
		for (var num = 0; (num2 = this.dictionaryReader.ReadArray$5(
					itemName, 
					itemNamespace, 
					array.value, 
					num, 
					(arrayLength - num)
				)) > 0; num += num2) {
		}
		this.CheckActualArrayLength(arrayLength, num, itemName, itemNamespace);
	} else {
		array.value = $asm09.System.Xml.Int32ArrayHelperWithDictionaryString.Instance.ReadArray$0(this.dictionaryReader, itemName, itemNamespace, this.GetArrayLengthQuota(context));
		context.IncrementItemCount(array.value.length);
	}
	return true;
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.TryReadInt64Array = function (context, itemName, itemNamespace, arrayLength, /* ref */ array) {
	var num2 = 0;
	if (this.dictionaryReader === null) {
		array.value = null;
		return false;
	}
	if (arrayLength !== -1) {
		this.CheckExpectedArrayLength(context, arrayLength);
		array.value = JSIL.Array.New(System.Int64, arrayLength);
	__loop0__: 
		for (var num = 0; (num2 = this.dictionaryReader.ReadArray$7(
					itemName, 
					itemNamespace, 
					array.value, 
					num, 
					(arrayLength - num)
				)) > 0; num += num2) {
		}
		this.CheckActualArrayLength(arrayLength, num, itemName, itemNamespace);
	} else {
		array.value = $asm09.System.Xml.Int64ArrayHelperWithDictionaryString.Instance.ReadArray$0(this.dictionaryReader, itemName, itemNamespace, this.GetArrayLengthQuota(context));
		context.IncrementItemCount(array.value.length);
	}
	return true;
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.TryReadSingleArray = function (context, itemName, itemNamespace, arrayLength, /* ref */ array) {
	var num2 = 0;
	if (this.dictionaryReader === null) {
		array.value = null;
		return false;
	}
	if (arrayLength !== -1) {
		this.CheckExpectedArrayLength(context, arrayLength);
		array.value = JSIL.Array.New(System.Single, arrayLength);
	__loop0__: 
		for (var num = 0; (num2 = this.dictionaryReader.ReadArray$9(
					itemName, 
					itemNamespace, 
					array.value, 
					num, 
					(arrayLength - num)
				)) > 0; num += num2) {
		}
		this.CheckActualArrayLength(arrayLength, num, itemName, itemNamespace);
	} else {
		array.value = $asm09.System.Xml.SingleArrayHelperWithDictionaryString.Instance.ReadArray$0(this.dictionaryReader, itemName, itemNamespace, this.GetArrayLengthQuota(context));
		context.IncrementItemCount(array.value.length);
	}
	return true;
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.TryReadDoubleArray = function (context, itemName, itemNamespace, arrayLength, /* ref */ array) {
	var num2 = 0;
	if (this.dictionaryReader === null) {
		array.value = null;
		return false;
	}
	if (arrayLength !== -1) {
		this.CheckExpectedArrayLength(context, arrayLength);
		array.value = JSIL.Array.New(System.Double, arrayLength);
	__loop0__: 
		for (var num = 0; (num2 = this.dictionaryReader.ReadArray$11(
					itemName, 
					itemNamespace, 
					array.value, 
					num, 
					(arrayLength - num)
				)) > 0; num += num2) {
		}
		this.CheckActualArrayLength(arrayLength, num, itemName, itemNamespace);
	} else {
		array.value = $asm09.System.Xml.DoubleArrayHelperWithDictionaryString.Instance.ReadArray$0(this.dictionaryReader, itemName, itemNamespace, this.GetArrayLengthQuota(context));
		context.IncrementItemCount(array.value.length);
	}
	return true;
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.GetNamespacesInScope = function (scope) {
	if (JSIL.TryCast(this.reader, System.Xml.IXmlNamespaceResolver) === null) {
		return null;
	}
	return JSIL.Cast(this.reader, System.Xml.IXmlNamespaceResolver).IXmlNamespaceResolver_GetNamespacesInScope(scope);
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.HasLineInfo = function () {
	var xmlLineInfo = JSIL.TryCast(this.reader, System.Xml.IXmlLineInfo);
	return ((xmlLineInfo !== null) && xmlLineInfo.IXmlLineInfo_HasLineInfo());
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.get_LineNumber = function () {
	var xmlLineInfo = JSIL.TryCast(this.reader, System.Xml.IXmlLineInfo);
	if (xmlLineInfo !== null) {
		return xmlLineInfo.IXmlLineInfo_LineNumber;
	}
	return 0;
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.get_LinePosition = function () {
	var xmlLineInfo = JSIL.TryCast(this.reader, System.Xml.IXmlLineInfo);
	if (xmlLineInfo !== null) {
		return xmlLineInfo.IXmlLineInfo_LinePosition;
	}
	return 0;
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.get_Name = function () {
	return this.reader.Name;
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.get_LocalName = function () {
	return this.reader.LocalName;
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.get_NamespaceURI = function () {
	return this.reader.NamespaceURI;
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.get_Value = function () {
	return this.reader.Value;
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.get_ValueType = function () {
	return this.reader.ValueType;
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.get_Depth = function () {
	return this.reader.Depth;
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.LookupNamespace = function (prefix) {
	return this.reader.LookupNamespace(prefix);
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.get_EOF = function () {
	return this.reader.EOF;
};
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.Skip = function () {
	this.reader.Skip();
	this.isEndOfEmptyElement = false;
};
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlReaderDelegator.prototype, "GetAttribute", [
		["GetAttribute$0", [System.String]], 
		["GetAttribute$1", [System.String, System.String]], 
		["GetAttribute$2", [System.Int32]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlReaderDelegator.prototype, "IsLocalName", [
		["IsLocalName$0", [System.String]], 
		["IsLocalName$1", [System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlReaderDelegator.prototype, "IsStartElement", [
		["IsStartElement$0", []], 
		["IsStartElement$1", [System.String, System.String]], 
		["IsStartElement$2", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlReaderDelegator.prototype, "MoveToAttribute", [
		["MoveToAttribute$0", [System.String]], 
		["MoveToAttribute$1", [System.String, System.String]], 
		["MoveToAttribute$2", [System.Int32]]
	]);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype, "UnderlyingReader", 
	$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.get_UnderlyingReader, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype, "AttributeCount", 
	$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.get_AttributeCount, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype, "IsEmptyElement", 
	$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.get_IsEmptyElement, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype, "NodeType", 
	$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.get_NodeType, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype, "LineNumber", 
	$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.get_LineNumber, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype, "LinePosition", 
	$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.get_LinePosition, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype, "Name", 
	$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.get_Name, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype, "LocalName", 
	$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.get_LocalName, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype, "NamespaceURI", 
	$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.get_NamespaceURI, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype, "Value", 
	$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.get_Value, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype, "ValueType", 
	$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.get_ValueType, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype, "Depth", 
	$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.get_Depth, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype, "EOF", 
	$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.get_EOF, null);
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.reader = null;
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.dictionaryReader = null;
$asm09.System.Runtime.Serialization.XmlReaderDelegator.prototype.isEndOfEmptyElement = false;

$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.get_InnerReader = function () {
	return this.innerReader;
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.BeginRead = function (xmlReader) {
	if (xmlReader.NodeType !== System.Xml.XmlNodeType.Element) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.CreateUnexpectedStateException(System.Xml.XmlNodeType.Element, xmlReader));
	}
	this.xmlReader = xmlReader;
	this.startDepth = xmlReader.Depth;
	this.innerReader = xmlReader.UnderlyingReader;
	this.isRootEmptyElement = this.InnerReader.IsEmptyElement;
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.EndRead = function () {
	if (this.isRootEmptyElement) {
		this.xmlReader.Read();
		return;
	}
	if (!(!this.xmlReader.IsStartElement$0() || (this.xmlReader.Depth !== this.startDepth))) {
		this.xmlReader.Read();
	}
__loop0__: 
	while (this.xmlReader.Depth > this.startDepth) {
		if (!this.xmlReader.Read()) {
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Runtime.Serialization.XmlObjectSerializerReadContext.CreateUnexpectedStateException(System.Xml.XmlNodeType.EndElement, this.xmlReader));
		}
	}
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.Read = function () {
	var xmlReader = this.InnerReader;
	return (((xmlReader.Depth !== this.startDepth) || 
			((xmlReader.NodeType !== System.Xml.XmlNodeType.EndElement) && 
				((xmlReader.NodeType !== System.Xml.XmlNodeType.Element) || 
					!xmlReader.IsEmptyElement))) && xmlReader.Read());
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.Close = function () {
	throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0($asm09.System.Runtime.Serialization.SR.GetString$2("IXmlSerializableIllegalOperation")));
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.get_Settings = function () {
	return this.InnerReader.Settings;
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.get_NodeType = function () {
	return this.InnerReader.NodeType;
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.get_Name = function () {
	return this.InnerReader.Name;
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.get_LocalName = function () {
	return this.InnerReader.LocalName;
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.get_NamespaceURI = function () {
	return this.InnerReader.NamespaceURI;
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.get_Prefix = function () {
	return this.InnerReader.Prefix;
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.get_HasValue = function () {
	return this.InnerReader.HasValue;
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.get_Value = function () {
	return this.InnerReader.Value;
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.get_Depth = function () {
	return this.InnerReader.Depth;
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.get_BaseURI = function () {
	return this.InnerReader.BaseURI;
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.get_IsEmptyElement = function () {
	return this.InnerReader.IsEmptyElement;
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.get_IsDefault = function () {
	return this.InnerReader.IsDefault;
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.get_XmlSpace = function () {
	return this.InnerReader.XmlSpace;
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.get_XmlLang = function () {
	return this.InnerReader.XmlLang;
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.get_ValueType = function () {
	return this.InnerReader.ValueType;
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.get_AttributeCount = function () {
	return this.InnerReader.AttributeCount;
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.get_Item$0 = function (i) {
	return this.InnerReader.get_Item$0(i);
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.get_Item$1 = function (name) {
	return this.InnerReader.get_Item$1(name);
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.get_Item$2 = function (name, namespaceURI) {
	return this.InnerReader.get_Item$2(name, namespaceURI);
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.get_EOF = function () {
	return this.InnerReader.EOF;
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.get_ReadState = function () {
	return this.InnerReader.ReadState;
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.get_NameTable = function () {
	return this.InnerReader.NameTable;
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.get_CanResolveEntity = function () {
	return this.InnerReader.CanResolveEntity;
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.get_CanReadBinaryContent = function () {
	return this.InnerReader.CanReadBinaryContent;
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.get_CanReadValueChunk = function () {
	return this.InnerReader.CanReadValueChunk;
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.get_HasAttributes = function () {
	return this.InnerReader.HasAttributes;
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.GetAttribute$0 = function (name) {
	return this.InnerReader.GetAttribute$0(name);
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.GetAttribute$1 = function (name, namespaceURI) {
	return this.InnerReader.GetAttribute$1(name, namespaceURI);
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.GetAttribute$2 = function (i) {
	return this.InnerReader.GetAttribute$2(i);
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.MoveToAttribute$0 = function (name) {
	return this.InnerReader.MoveToAttribute$0(name);
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.MoveToAttribute$1 = function (name, ns) {
	return this.InnerReader.MoveToAttribute$1(name, ns);
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.MoveToAttribute$2 = function (i) {
	this.InnerReader.MoveToAttribute$2(i);
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.MoveToFirstAttribute = function () {
	return this.InnerReader.MoveToFirstAttribute();
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.MoveToNextAttribute = function () {
	return this.InnerReader.MoveToNextAttribute();
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.MoveToElement = function () {
	return this.InnerReader.MoveToElement();
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.LookupNamespace = function (prefix) {
	return this.InnerReader.LookupNamespace(prefix);
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.ReadAttributeValue = function () {
	return this.InnerReader.ReadAttributeValue();
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.ResolveEntity = function () {
	this.InnerReader.ResolveEntity();
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.IsStartElement$0 = function () {
	return this.InnerReader.IsStartElement$0();
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.IsStartElement$1 = function (name) {
	return this.InnerReader.IsStartElement$1(name);
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.IsStartElement$2 = function (localname, ns) {
	return this.InnerReader.IsStartElement$2(localname, ns);
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.MoveToContent = function () {
	return this.InnerReader.MoveToContent();
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.ReadContentAsObject = function () {
	return this.InnerReader.ReadContentAsObject();
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.ReadContentAsBoolean = function () {
	return this.InnerReader.ReadContentAsBoolean();
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.ReadContentAsDateTime = function () {
	return this.InnerReader.ReadContentAsDateTime();
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.ReadContentAsDouble = function () {
	return this.InnerReader.ReadContentAsDouble();
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.ReadContentAsInt = function () {
	return this.InnerReader.ReadContentAsInt();
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.ReadContentAsLong = function () {
	return this.InnerReader.ReadContentAsLong();
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.ReadContentAsString = function () {
	return this.InnerReader.ReadContentAsString();
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.ReadContentAs = function (returnType, namespaceResolver) {
	return this.InnerReader.ReadContentAs(returnType, namespaceResolver);
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.ReadContentAsBase64 = function (buffer, index, count) {
	return this.InnerReader.ReadContentAsBase64(buffer, index, count);
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.ReadContentAsBinHex = function (buffer, index, count) {
	return this.InnerReader.ReadContentAsBinHex(buffer, index, count);
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.ReadValueChunk = function (buffer, index, count) {
	return this.InnerReader.ReadValueChunk(buffer, index, count);
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.IXmlLineInfo_HasLineInfo = function () {
	var xmlLineInfo = JSIL.TryCast(this.InnerReader, System.Xml.IXmlLineInfo);
	if (xmlLineInfo !== null) {
		return xmlLineInfo.IXmlLineInfo_HasLineInfo();
	}
	return this.xmlReader.HasLineInfo();
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.IXmlLineInfo_get_LineNumber = function () {
	var xmlLineInfo = JSIL.TryCast(this.InnerReader, System.Xml.IXmlLineInfo);
	if (xmlLineInfo !== null) {
		return xmlLineInfo.IXmlLineInfo_LineNumber;
	}
	return this.xmlReader.LineNumber;
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.IXmlLineInfo_get_LinePosition = function () {
	var xmlLineInfo = JSIL.TryCast(this.InnerReader, System.Xml.IXmlLineInfo);
	if (xmlLineInfo !== null) {
		return xmlLineInfo.IXmlLineInfo_LinePosition;
	}
	return this.xmlReader.LinePosition;
};
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype._ctor = function () {
	System.Xml.XmlReader.prototype._ctor.call(this);
};
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlSerializableReader.prototype, "get_Item", [
		["get_Item$0", [System.Int32]], 
		["get_Item$1", [System.String]], 
		["get_Item$2", [System.String, System.String]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlSerializableReader.prototype, "GetAttribute", [
		["GetAttribute$0", [System.String]], 
		["GetAttribute$1", [System.String, System.String]], 
		["GetAttribute$2", [System.Int32]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlSerializableReader.prototype, "MoveToAttribute", [
		["MoveToAttribute$0", [System.String]], 
		["MoveToAttribute$1", [System.String, System.String]], 
		["MoveToAttribute$2", [System.Int32]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlSerializableReader.prototype, "IsStartElement", [
		["IsStartElement$0", []], 
		["IsStartElement$1", [System.String]], 
		["IsStartElement$2", [System.String, System.String]]
	]);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlSerializableReader.prototype, "InnerReader", 
	$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.get_InnerReader, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlSerializableReader.prototype, "Settings", 
	$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.get_Settings, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlSerializableReader.prototype, "NodeType", 
	$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.get_NodeType, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlSerializableReader.prototype, "Name", 
	$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.get_Name, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlSerializableReader.prototype, "LocalName", 
	$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.get_LocalName, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlSerializableReader.prototype, "NamespaceURI", 
	$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.get_NamespaceURI, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlSerializableReader.prototype, "Prefix", 
	$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.get_Prefix, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlSerializableReader.prototype, "HasValue", 
	$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.get_HasValue, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlSerializableReader.prototype, "Value", 
	$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.get_Value, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlSerializableReader.prototype, "Depth", 
	$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.get_Depth, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlSerializableReader.prototype, "BaseURI", 
	$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.get_BaseURI, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlSerializableReader.prototype, "IsEmptyElement", 
	$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.get_IsEmptyElement, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlSerializableReader.prototype, "IsDefault", 
	$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.get_IsDefault, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlSerializableReader.prototype, "XmlSpace", 
	$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.get_XmlSpace, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlSerializableReader.prototype, "XmlLang", 
	$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.get_XmlLang, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlSerializableReader.prototype, "ValueType", 
	$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.get_ValueType, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlSerializableReader.prototype, "AttributeCount", 
	$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.get_AttributeCount, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlSerializableReader.prototype, "Item", 
	$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.get_Item$0, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlSerializableReader.prototype, "Item", 
	$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.get_Item$1, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlSerializableReader.prototype, "Item", 
	$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.get_Item$2, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlSerializableReader.prototype, "EOF", 
	$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.get_EOF, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlSerializableReader.prototype, "ReadState", 
	$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.get_ReadState, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlSerializableReader.prototype, "NameTable", 
	$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.get_NameTable, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlSerializableReader.prototype, "CanResolveEntity", 
	$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.get_CanResolveEntity, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlSerializableReader.prototype, "CanReadBinaryContent", 
	$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.get_CanReadBinaryContent, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlSerializableReader.prototype, "CanReadValueChunk", 
	$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.get_CanReadValueChunk, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlSerializableReader.prototype, "HasAttributes", 
	$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.get_HasAttributes, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlSerializableReader.prototype, "IXmlLineInfo_LineNumber", 
	$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.IXmlLineInfo_get_LineNumber, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlSerializableReader.prototype, "IXmlLineInfo_LinePosition", 
	$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.IXmlLineInfo_get_LinePosition, null);
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.xmlReader = null;
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.startDepth = 0;
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.isRootEmptyElement = false;
$asm09.System.Runtime.Serialization.XmlSerializableReader.prototype.innerReader = null;

$asm09.System.Runtime.Serialization.XmlSerializableWriter.prototype.BeginWrite = function (xmlWriter, obj) {
	this.depth = 0;
	this.xmlWriter = xmlWriter;
	this.obj = obj;
};
$asm09.System.Runtime.Serialization.XmlSerializableWriter.prototype.EndWrite = function () {
	if (this.depth !== 0) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0($asm09.System.Runtime.Serialization.SR.GetString$0("IXmlSerializableMissingEndElements", [(this.obj === null) ? System.String.Empty : $asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(JSIL.GetType(this.obj))])));
	}
	this.obj = null;
};
$asm09.System.Runtime.Serialization.XmlSerializableWriter.prototype.WriteStartDocument$0 = function () {
	if (!JSIL.Cast(this.WriteState, System.Boolean)) {
		this.xmlWriter.WriteStartDocument$0();
	}
};
$asm09.System.Runtime.Serialization.XmlSerializableWriter.prototype.WriteEndDocument = function () {
	this.xmlWriter.WriteEndDocument();
};
$asm09.System.Runtime.Serialization.XmlSerializableWriter.prototype.WriteStartDocument$1 = function (standalone) {
	if (!JSIL.Cast(this.WriteState, System.Boolean)) {
		this.xmlWriter.WriteStartDocument$1(standalone);
	}
};
$asm09.System.Runtime.Serialization.XmlSerializableWriter.prototype.WriteDocType = function (name, pubid, sysid, subset) {
};
$asm09.System.Runtime.Serialization.XmlSerializableWriter.prototype.WriteStartElement = function (prefix, localName, ns) {
	this.xmlWriter.WriteStartElement$1(prefix, localName, ns);
	++this.depth;
};
$asm09.System.Runtime.Serialization.XmlSerializableWriter.prototype.WriteEndElement = function () {
	if (this.depth === 0) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0($asm09.System.Runtime.Serialization.SR.GetString$0("IXmlSerializableWritePastSubTree", [(this.obj === null) ? System.String.Empty : $asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(JSIL.GetType(this.obj))])));
	}
	this.xmlWriter.WriteEndElement();
	--this.depth;
};
$asm09.System.Runtime.Serialization.XmlSerializableWriter.prototype.WriteFullEndElement = function () {
	if (this.depth === 0) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0($asm09.System.Runtime.Serialization.SR.GetString$0("IXmlSerializableWritePastSubTree", [(this.obj === null) ? System.String.Empty : $asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(JSIL.GetType(this.obj))])));
	}
	this.xmlWriter.WriteFullEndElement();
	--this.depth;
};
$asm09.System.Runtime.Serialization.XmlSerializableWriter.prototype.Close = function () {
	throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(System.Runtime.Serialization.XmlObjectSerializer.CreateSerializationException$0($asm09.System.Runtime.Serialization.SR.GetString$2("IXmlSerializableIllegalOperation")));
};
$asm09.System.Runtime.Serialization.XmlSerializableWriter.prototype.WriteStartAttribute = function (prefix, localName, ns) {
	this.xmlWriter.WriteStartAttribute$1(prefix, localName, ns);
};
$asm09.System.Runtime.Serialization.XmlSerializableWriter.prototype.WriteEndAttribute = function () {
	this.xmlWriter.WriteEndAttribute();
};
$asm09.System.Runtime.Serialization.XmlSerializableWriter.prototype.WriteCData = function (text) {
	this.xmlWriter.WriteCData(text);
};
$asm09.System.Runtime.Serialization.XmlSerializableWriter.prototype.WriteComment = function (text) {
	this.xmlWriter.WriteComment(text);
};
$asm09.System.Runtime.Serialization.XmlSerializableWriter.prototype.WriteProcessingInstruction = function (name, text) {
	this.xmlWriter.WriteProcessingInstruction(name, text);
};
$asm09.System.Runtime.Serialization.XmlSerializableWriter.prototype.WriteEntityRef = function (name) {
	this.xmlWriter.WriteEntityRef(name);
};
$asm09.System.Runtime.Serialization.XmlSerializableWriter.prototype.WriteCharEntity = function (ch) {
	this.xmlWriter.WriteCharEntity(ch);
};
$asm09.System.Runtime.Serialization.XmlSerializableWriter.prototype.WriteWhitespace = function (ws) {
	this.xmlWriter.WriteWhitespace(ws);
};
$asm09.System.Runtime.Serialization.XmlSerializableWriter.prototype.WriteString = function (text) {
	this.xmlWriter.WriteString(text);
};
$asm09.System.Runtime.Serialization.XmlSerializableWriter.prototype.WriteSurrogateCharEntity = function (lowChar, highChar) {
	this.xmlWriter.WriteSurrogateCharEntity(lowChar, highChar);
};
$asm09.System.Runtime.Serialization.XmlSerializableWriter.prototype.WriteChars = function (buffer, index, count) {
	this.xmlWriter.WriteChars(buffer, index, count);
};
$asm09.System.Runtime.Serialization.XmlSerializableWriter.prototype.WriteRaw$0 = function (buffer, index, count) {
	this.xmlWriter.WriteRaw$0(buffer, index, count);
};
$asm09.System.Runtime.Serialization.XmlSerializableWriter.prototype.WriteRaw$1 = function (data) {
	this.xmlWriter.WriteRaw$1(data);
};
$asm09.System.Runtime.Serialization.XmlSerializableWriter.prototype.WriteBase64 = function (buffer, index, count) {
	this.xmlWriter.WriteBase64(buffer, index, count);
};
$asm09.System.Runtime.Serialization.XmlSerializableWriter.prototype.WriteBinHex = function (buffer, index, count) {
	this.xmlWriter.WriteBinHex(buffer, index, count);
};
$asm09.System.Runtime.Serialization.XmlSerializableWriter.prototype.get_WriteState = function () {
	return this.xmlWriter.WriteState;
};
$asm09.System.Runtime.Serialization.XmlSerializableWriter.prototype.Flush = function () {
	this.xmlWriter.Flush();
};
$asm09.System.Runtime.Serialization.XmlSerializableWriter.prototype.WriteName = function (name) {
	this.xmlWriter.WriteName(name);
};
$asm09.System.Runtime.Serialization.XmlSerializableWriter.prototype.WriteQualifiedName = function (localName, ns) {
	this.xmlWriter.WriteQualifiedName(localName, ns);
};
$asm09.System.Runtime.Serialization.XmlSerializableWriter.prototype.LookupPrefix = function (ns) {
	return this.xmlWriter.LookupPrefix(ns);
};
$asm09.System.Runtime.Serialization.XmlSerializableWriter.prototype.get_XmlSpace = function () {
	return this.xmlWriter.XmlSpace;
};
$asm09.System.Runtime.Serialization.XmlSerializableWriter.prototype.get_XmlLang = function () {
	return this.xmlWriter.XmlLang;
};
$asm09.System.Runtime.Serialization.XmlSerializableWriter.prototype.WriteNmToken = function (name) {
	this.xmlWriter.WriteNmToken(name);
};
$asm09.System.Runtime.Serialization.XmlSerializableWriter.prototype._ctor = function () {
	System.Xml.XmlWriter.prototype._ctor.call(this);
};
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlSerializableWriter.prototype, "WriteStartDocument", [
		["WriteStartDocument$0", []], 
		["WriteStartDocument$1", [System.Boolean]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlSerializableWriter.prototype, "WriteRaw", [
		["WriteRaw$0", [System.Array.Of(System.Char), System.Int32, System.Int32]], 
		["WriteRaw$1", [System.String]]
	]);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlSerializableWriter.prototype, "WriteState", 
	$asm09.System.Runtime.Serialization.XmlSerializableWriter.prototype.get_WriteState, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlSerializableWriter.prototype, "XmlSpace", 
	$asm09.System.Runtime.Serialization.XmlSerializableWriter.prototype.get_XmlSpace, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlSerializableWriter.prototype, "XmlLang", 
	$asm09.System.Runtime.Serialization.XmlSerializableWriter.prototype.get_XmlLang, null);
$asm09.System.Runtime.Serialization.XmlSerializableWriter.prototype.xmlWriter = null;
$asm09.System.Runtime.Serialization.XmlSerializableWriter.prototype.depth = 0;
$asm09.System.Runtime.Serialization.XmlSerializableWriter.prototype.obj = null;

$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype._ctor = function (writer) {
	System.Object.prototype._ctor.call(this);
	System.Runtime.Serialization.XmlObjectSerializer.CheckNull(writer, "writer");
	this.writer = writer;
	this.dictionaryWriter = JSIL.TryCast(writer, System.Xml.XmlDictionaryWriter);
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.get_Writer = function () {
	return this.writer;
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.Flush = function () {
	this.writer.Flush();
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.LookupPrefix = function (ns) {
	return this.writer.LookupPrefix(ns);
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteEndAttribute = function () {
	this.writer.WriteEndAttribute();
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteEndElement = function () {
	this.writer.WriteEndElement();
	--this.depth;
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteRaw$0 = function (buffer, index, count) {
	this.writer.WriteRaw$0(buffer, index, count);
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteRaw$1 = function (data) {
	this.writer.WriteRaw$1(data);
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteXmlnsAttribute$0 = function (ns) {
	if (this.dictionaryWriter !== null) {
		if (ns !== null) {
			this.dictionaryWriter.WriteXmlnsAttribute$1(null, ns);
			return;
		}
	} else {
		this.WriteXmlnsAttribute$1(ns.Value);
	}
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteXmlnsAttribute$1 = function (ns) {
	if (ns !== null) {
		if (ns.length === 0) {
			this.writer.WriteAttributeString$2("xmlns", System.String.Empty, null, ns);
			return;
		}
		if (this.dictionaryWriter !== null) {
			this.dictionaryWriter.WriteXmlnsAttribute$0(null, ns);
			return;
		}
		if (this.writer.LookupPrefix(ns) === null) {
			var localName = System.String.Format(System.Globalization.CultureInfo.InvariantCulture, "d{0}p{1}", [this.depth, this.prefixes]);
			++this.prefixes;
			this.writer.WriteAttributeString$2("xmlns", localName, null, ns);
		}
	}
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteXmlnsAttribute$2 = function (prefix, ns) {
	if (this.dictionaryWriter !== null) {
		this.dictionaryWriter.WriteXmlnsAttribute$1(prefix, ns);
		return;
	}
	this.writer.WriteAttributeString$2("xmlns", prefix, null, ns.Value);
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteStartAttribute$0 = function (prefix, localName, ns) {
	this.writer.WriteStartAttribute$1(prefix, localName, ns);
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteStartAttribute$1 = function (prefix, localName, namespaceUri) {
	if (this.dictionaryWriter !== null) {
		this.dictionaryWriter.WriteStartAttribute$1(prefix, localName, namespaceUri);
		return;
	}
	this.writer.WriteStartAttribute$1(prefix, (localName === null) ? null : localName.Value, (namespaceUri === null) ? null : namespaceUri.Value);
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteAttributeString$0 = function (prefix, localName, ns, value) {
	this.WriteStartAttribute$0(prefix, localName, ns);
	this.WriteAttributeStringValue$0(value);
	this.WriteEndAttribute();
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteAttributeString$1 = function (prefix, attrName, attrNs, value) {
	this.WriteStartAttribute$1(prefix, attrName, attrNs);
	this.WriteAttributeStringValue$0(value);
	this.WriteEndAttribute();
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteAttributeStringValue$0 = function (value) {
	this.writer.WriteValue$1(value);
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteAttributeString$2 = function (prefix, attrName, attrNs, value) {
	this.WriteStartAttribute$1(prefix, attrName, attrNs);
	this.WriteAttributeStringValue$1(value);
	this.WriteEndAttribute();
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteAttributeStringValue$1 = function (value) {
	if (this.dictionaryWriter === null) {
		this.writer.WriteString(value.Value);
		return;
	}
	this.dictionaryWriter.WriteString(value);
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteAttributeInt = function (prefix, attrName, attrNs, value) {
	this.WriteStartAttribute$1(prefix, attrName, attrNs);
	this.WriteAttributeIntValue(value);
	this.WriteEndAttribute();
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteAttributeIntValue = function (value) {
	this.writer.WriteValue$7(value);
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteAttributeBool = function (prefix, attrName, attrNs, value) {
	this.WriteStartAttribute$1(prefix, attrName, attrNs);
	this.WriteAttributeBoolValue(value);
	this.WriteEndAttribute();
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteAttributeBoolValue = function (value) {
	this.writer.WriteValue$2(value);
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteAttributeQualifiedName$0 = function (attrPrefix, attrName, attrNs, name, ns) {
	this.WriteXmlnsAttribute$1(ns);
	this.WriteStartAttribute$1(attrPrefix, attrName, attrNs);
	this.WriteAttributeQualifiedNameValue$0(name, ns);
	this.WriteEndAttribute();
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteAttributeQualifiedNameValue$0 = function (name, ns) {
	this.writer.WriteQualifiedName(name, ns);
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteAttributeQualifiedName$1 = function (attrPrefix, attrName, attrNs, name, ns) {
	this.WriteXmlnsAttribute$0(ns);
	this.WriteStartAttribute$1(attrPrefix, attrName, attrNs);
	this.WriteAttributeQualifiedNameValue$1(name, ns);
	this.WriteEndAttribute();
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteAttributeQualifiedNameValue$1 = function (name, ns) {
	if (this.dictionaryWriter === null) {
		this.writer.WriteQualifiedName(name.Value, ns.Value);
		return;
	}
	this.dictionaryWriter.WriteQualifiedName(name, ns);
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteStartElement$0 = function (localName, ns) {
	this.WriteStartElement$1(null, localName, ns);
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteStartElement$1 = function (prefix, localName, ns) {
	this.writer.WriteStartElement$1(prefix, localName, ns);
	++this.depth;
	this.prefixes = 1;
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteStartElement$2 = function (localName, namespaceUri) {
	this.WriteStartElement$3(null, localName, namespaceUri);
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteStartElement$3 = function (prefix, localName, namespaceUri) {
	if (this.dictionaryWriter !== null) {
		this.dictionaryWriter.WriteStartElement$1(prefix, localName, namespaceUri);
	} else {
		this.writer.WriteStartElement$1(prefix, (localName === null) ? null : localName.Value, (namespaceUri === null) ? null : namespaceUri.Value);
	}
	++this.depth;
	this.prefixes = 1;
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteStartElementPrimitive = function (localName, namespaceUri) {
	if (this.dictionaryWriter !== null) {
		this.dictionaryWriter.WriteStartElement$1(null, localName, namespaceUri);
		return;
	}
	this.writer.WriteStartElement$1(null, (localName === null) ? null : localName.Value, (namespaceUri === null) ? null : namespaceUri.Value);
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteEndElementPrimitive = function () {
	this.writer.WriteEndElement();
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.get_WriteState = function () {
	return this.writer.WriteState;
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.get_XmlLang = function () {
	return this.writer.XmlLang;
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.get_XmlSpace = function () {
	return this.writer.XmlSpace;
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteNamespaceDecl = function (ns) {
	this.WriteXmlnsAttribute$0(ns);
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.CreateInvalidPrimitiveTypeException = function (type) {
	return JSIL.New(System.Runtime.Serialization.InvalidDataContractException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("InvalidPrimitiveType", [$asm09.System.Runtime.Serialization.DataContract.GetClrTypeFullName(type)])]);
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteAnyType$0 = function (value) {
	this.WriteAnyType$1(value, JSIL.GetType(value));
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteAnyType$1 = function (value, valueType) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				var flag = true;
				switch (Number(System.Type.GetTypeCode(valueType))) {
					case 3: 
						this.WriteBoolean$0(JSIL.Cast(value, System.Boolean));
						__label0__ = "IL_1D4";
						continue __step0__;
					case 4: 
						this.WriteChar$0(String.fromCharCode(value));
						__label0__ = "IL_1D4";
						continue __step0__;
					case 5: 
						this.WriteSignedByte$0(JSIL.Cast(value, System.SByte));
						__label0__ = "IL_1D4";
						continue __step0__;
					case 6: 
						this.WriteUnsignedByte$0(JSIL.Cast(value, System.Byte));
						__label0__ = "IL_1D4";
						continue __step0__;
					case 7: 
						this.WriteShort$0(JSIL.Cast(value, System.Int16));
						__label0__ = "IL_1D4";
						continue __step0__;
					case 8: 
						this.WriteUnsignedShort$0(JSIL.Cast(value, System.UInt16));
						__label0__ = "IL_1D4";
						continue __step0__;
					case 9: 
						this.WriteInt$0(JSIL.Cast(value, System.Int32));
						__label0__ = "IL_1D4";
						continue __step0__;
					case 10: 
						this.WriteUnsignedInt$0(JSIL.Cast(value, System.UInt32));
						__label0__ = "IL_1D4";
						continue __step0__;
					case 11: 
						this.WriteLong$0(JSIL.Cast(value, System.Int64));
						__label0__ = "IL_1D4";
						continue __step0__;
					case 12: 
						this.WriteUnsignedLong$0(JSIL.Cast(value, System.UInt64));
						__label0__ = "IL_1D4";
						continue __step0__;
					case 13: 
						this.WriteFloat$0(JSIL.Cast(value, System.Single));
						__label0__ = "IL_1D4";
						continue __step0__;
					case 14: 
						this.WriteDouble$0(JSIL.Cast(value, System.Double));
						__label0__ = "IL_1D4";
						continue __step0__;
					case 15: 
						this.WriteDecimal$0(JSIL.Cast(value, System.Decimal).MemberwiseClone());
						__label0__ = "IL_1D4";
						continue __step0__;
					case 16: 
						this.WriteDateTime$0(JSIL.Cast(value, System.DateTime).MemberwiseClone());
						__label0__ = "IL_1D4";
						continue __step0__;
					case 18: 
						this.WriteString(JSIL.Cast(value, System.String));
						__label0__ = "IL_1D4";
						continue __step0__;
				}
				if (valueType === System.Runtime.Serialization.Globals.TypeOfByteArray) {
					this.WriteBase64(JSIL.Cast(value, System.Array.Of(System.Byte)));
				} else if (valueType !== System.Runtime.Serialization.Globals.TypeOfObject) {
					if (valueType === System.Runtime.Serialization.Globals.TypeOfTimeSpan) {
						this.WriteTimeSpan$0(JSIL.Cast(value, System.TimeSpan).MemberwiseClone());
					} else if (valueType === System.Runtime.Serialization.Globals.TypeOfGuid) {
						this.WriteGuid$0(JSIL.Cast(value, System.Guid).MemberwiseClone());
					} else if (valueType === System.Runtime.Serialization.Globals.TypeOfUri) {
						this.WriteUri(JSIL.Cast(value, System.Uri));
					} else if (valueType === System.Runtime.Serialization.Globals.TypeOfXmlQualifiedName) {
						this.WriteQName(JSIL.Cast(value, System.Xml.XmlQualifiedName));
					} else {
						flag = false;
					}
				}
				__label0__ = "IL_1D4";
				continue __step0__;
				break;
			case "IL_1D4":
				if (!flag) {
					throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(this.CreateInvalidPrimitiveTypeException(valueType));
				}
				break __step0__;
		}
	}
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteString = function (value) {
	this.writer.WriteValue$1(value);
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteBoolean$0 = function (value) {
	this.writer.WriteValue$2(value);
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteBoolean$1 = function (value, name, ns) {
	this.WriteStartElementPrimitive(name, ns);
	this.WriteBoolean$0(value);
	this.WriteEndElementPrimitive();
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteDateTime$0 = function (value) {
	this.writer.WriteValue$3(value);
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteDateTime$1 = function (value, name, ns) {
	this.WriteStartElementPrimitive(name, ns);
	this.WriteDateTime$0(value);
	this.WriteEndElementPrimitive();
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteDecimal$0 = function (value) {
	this.writer.WriteValue$6(value);
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteDecimal$1 = function (value, name, ns) {
	this.WriteStartElementPrimitive(name, ns);
	this.WriteDecimal$0(value);
	this.WriteEndElementPrimitive();
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteDouble$0 = function (value) {
	this.writer.WriteValue$4(value);
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteDouble$1 = function (value, name, ns) {
	this.WriteStartElementPrimitive(name, ns);
	this.WriteDouble$0(value);
	this.WriteEndElementPrimitive();
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteInt$0 = function (value) {
	this.writer.WriteValue$7(value);
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteInt$1 = function (value, name, ns) {
	this.WriteStartElementPrimitive(name, ns);
	this.WriteInt$0(value);
	this.WriteEndElementPrimitive();
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteLong$0 = function (value) {
	this.writer.WriteValue$8(value);
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteLong$1 = function (value, name, ns) {
	this.WriteStartElementPrimitive(name, ns);
	this.WriteLong$0(value);
	this.WriteEndElementPrimitive();
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteFloat$0 = function (value) {
	this.writer.WriteValue$5(value);
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteFloat$1 = function (value, name, ns) {
	this.WriteStartElementPrimitive(name, ns);
	this.WriteFloat$0(value);
	this.WriteEndElementPrimitive();
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteBase64 = function (bytes) {
	if (bytes === null) {
		return;
	}
	this.writer.WriteBase64(bytes, 0, bytes.length);
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteShort$0 = function (value) {
	this.writer.WriteValue$7(value);
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteShort$1 = function (value, name, ns) {
	this.WriteStartElementPrimitive(name, ns);
	this.WriteShort$0(value);
	this.WriteEndElementPrimitive();
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteUnsignedByte$0 = function (value) {
	this.writer.WriteValue$7(value);
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteUnsignedByte$1 = function (value, name, ns) {
	this.WriteStartElementPrimitive(name, ns);
	this.WriteUnsignedByte$0(value);
	this.WriteEndElementPrimitive();
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteSignedByte$0 = function (value) {
	this.writer.WriteValue$7(value);
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteSignedByte$1 = function (value, name, ns) {
	this.WriteStartElementPrimitive(name, ns);
	this.WriteSignedByte$0(value);
	this.WriteEndElementPrimitive();
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteUnsignedInt$0 = function (value) {
	this.writer.WriteValue$8(value);
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteUnsignedInt$1 = function (value, name, ns) {
	this.WriteStartElementPrimitive(name, ns);
	this.WriteUnsignedInt$0(value);
	this.WriteEndElementPrimitive();
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteUnsignedLong$0 = function (value) {
	this.writer.WriteRaw$1(System.Xml.XmlConvert.ToString$8(value));
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteUnsignedLong$1 = function (value, name, ns) {
	this.WriteStartElementPrimitive(name, ns);
	this.WriteUnsignedLong$0(value);
	this.WriteEndElementPrimitive();
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteUnsignedShort$0 = function (value) {
	this.writer.WriteValue$7(value);
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteUnsignedShort$1 = function (value, name, ns) {
	this.WriteStartElementPrimitive(name, ns);
	this.WriteUnsignedShort$0(value);
	this.WriteEndElementPrimitive();
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteChar$0 = function (value) {
	this.writer.WriteValue$7(value.charCodeAt(0));
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteChar$1 = function (value, name, ns) {
	this.WriteStartElementPrimitive(name, ns);
	this.WriteChar$0(value);
	this.WriteEndElementPrimitive();
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteTimeSpan$0 = function (value) {
	var xsdDuration = new System.Xml.Schema.XsdDuration();
	xsdDuration._ctor$2(value, System.Xml.Schema.XsdDuration.DurationType.Duration);
	this.writer.WriteRaw$1(xsdDuration.toString());
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteTimeSpan$1 = function (value, name, ns) {
	this.WriteStartElementPrimitive(name, ns);
	this.WriteTimeSpan$0(value);
	this.WriteEndElementPrimitive();
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteGuid$0 = function (value) {
	this.writer.WriteRaw$1(value.toString());
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteGuid$1 = function (value, name, ns) {
	this.WriteStartElementPrimitive(name, ns);
	this.WriteGuid$0(value);
	this.WriteEndElementPrimitive();
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteUri = function (value) {
	this.writer.WriteString(value.GetComponents(System.UriComponents.SerializationInfoString, System.UriFormat.UriEscaped));
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteQName = function (value) {
	if (System.Xml.XmlQualifiedName.op_Inequality(value, System.Xml.XmlQualifiedName.Empty)) {
		this.WriteXmlnsAttribute$1(value.Namespace);
		this.WriteQualifiedName$0(value.Name, value.Namespace);
	}
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteQualifiedName$0 = function (localName, ns) {
	this.writer.WriteQualifiedName(localName, ns);
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteQualifiedName$1 = function (localName, ns) {
	if (this.dictionaryWriter === null) {
		this.writer.WriteQualifiedName(localName.Value, ns.Value);
		return;
	}
	this.dictionaryWriter.WriteQualifiedName(localName, ns);
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteBooleanArray = function (value, itemName, itemNamespace) {
	if (this.dictionaryWriter === null) {
	__loop0__: 
		for (var i = 0; i < value.length; ++i) {
			this.WriteBoolean$1(value[i], itemName, itemNamespace);
		}
		return;
	}
	this.dictionaryWriter.WriteArray$1(
		null, 
		itemName, 
		itemNamespace, 
		value, 
		0, 
		value.length
	);
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteDateTimeArray = function (value, itemName, itemNamespace) {
	if (this.dictionaryWriter === null) {
	__loop0__: 
		for (var i = 0; i < value.length; ++i) {
			this.WriteDateTime$1(value[i].MemberwiseClone(), itemName, itemNamespace);
		}
		return;
	}
	this.dictionaryWriter.WriteArray$15(
		null, 
		itemName, 
		itemNamespace, 
		value, 
		0, 
		value.length
	);
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteDecimalArray = function (value, itemName, itemNamespace) {
	if (this.dictionaryWriter === null) {
	__loop0__: 
		for (var i = 0; i < value.length; ++i) {
			this.WriteDecimal$1(value[i].MemberwiseClone(), itemName, itemNamespace);
		}
		return;
	}
	this.dictionaryWriter.WriteArray$13(
		null, 
		itemName, 
		itemNamespace, 
		value, 
		0, 
		value.length
	);
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteInt32Array = function (value, itemName, itemNamespace) {
	if (this.dictionaryWriter === null) {
	__loop0__: 
		for (var i = 0; i < value.length; ++i) {
			this.WriteInt$1(value[i], itemName, itemNamespace);
		}
		return;
	}
	this.dictionaryWriter.WriteArray$5(
		null, 
		itemName, 
		itemNamespace, 
		value, 
		0, 
		value.length
	);
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteInt64Array = function (value, itemName, itemNamespace) {
	if (this.dictionaryWriter === null) {
	__loop0__: 
		for (var i = 0; i < value.length; ++i) {
			this.WriteLong$1(value[i], itemName, itemNamespace);
		}
		return;
	}
	this.dictionaryWriter.WriteArray$7(
		null, 
		itemName, 
		itemNamespace, 
		value, 
		0, 
		value.length
	);
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteSingleArray = function (value, itemName, itemNamespace) {
	if (this.dictionaryWriter === null) {
	__loop0__: 
		for (var i = 0; i < value.length; ++i) {
			this.WriteFloat$1(value[i], itemName, itemNamespace);
		}
		return;
	}
	this.dictionaryWriter.WriteArray$9(
		null, 
		itemName, 
		itemNamespace, 
		value, 
		0, 
		value.length
	);
};
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.WriteDoubleArray = function (value, itemName, itemNamespace) {
	if (this.dictionaryWriter === null) {
	__loop0__: 
		for (var i = 0; i < value.length; ++i) {
			this.WriteDouble$1(value[i], itemName, itemNamespace);
		}
		return;
	}
	this.dictionaryWriter.WriteArray$11(
		null, 
		itemName, 
		itemNamespace, 
		value, 
		0, 
		value.length
	);
};
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlWriterDelegator.prototype, "WriteRaw", [
		["WriteRaw$0", [System.Array.Of(System.Char), System.Int32, System.Int32]], 
		["WriteRaw$1", [System.String]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlWriterDelegator.prototype, "WriteXmlnsAttribute", [
		["WriteXmlnsAttribute$0", [System.Xml.XmlDictionaryString]], 
		["WriteXmlnsAttribute$1", [System.String]], 
		["WriteXmlnsAttribute$2", [System.String, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlWriterDelegator.prototype, "WriteStartAttribute", [
		["WriteStartAttribute$0", [System.String, System.String, System.String]], 
		["WriteStartAttribute$1", [System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlWriterDelegator.prototype, "WriteAttributeString", [
		["WriteAttributeString$0", [System.String, System.String, System.String, System.String]], 
		["WriteAttributeString$1", [System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.String]], 
		["WriteAttributeString$2", [System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlWriterDelegator.prototype, "WriteAttributeStringValue", [
		["WriteAttributeStringValue$0", [System.String]], 
		["WriteAttributeStringValue$1", [System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlWriterDelegator.prototype, "WriteAttributeQualifiedName", [
		["WriteAttributeQualifiedName$0", [System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.String, System.String]], 
		["WriteAttributeQualifiedName$1", [System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlWriterDelegator.prototype, "WriteAttributeQualifiedNameValue", [
		["WriteAttributeQualifiedNameValue$0", [System.String, System.String]], 
		["WriteAttributeQualifiedNameValue$1", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlWriterDelegator.prototype, "WriteStartElement", [
		["WriteStartElement$0", [System.String, System.String]], 
		["WriteStartElement$1", [System.String, System.String, System.String]], 
		["WriteStartElement$2", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]], 
		["WriteStartElement$3", [System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlWriterDelegator.prototype, "WriteAnyType", [
		["WriteAnyType$0", [System.Object]], 
		["WriteAnyType$1", [System.Object, System.Type]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlWriterDelegator.prototype, "WriteBoolean", [
		["WriteBoolean$0", [System.Boolean]], 
		["WriteBoolean$1", [System.Boolean, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlWriterDelegator.prototype, "WriteDateTime", [
		["WriteDateTime$0", [System.DateTime]], 
		["WriteDateTime$1", [System.DateTime, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlWriterDelegator.prototype, "WriteDecimal", [
		["WriteDecimal$0", [System.Decimal]], 
		["WriteDecimal$1", [System.Decimal, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlWriterDelegator.prototype, "WriteDouble", [
		["WriteDouble$0", [System.Double]], 
		["WriteDouble$1", [System.Double, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlWriterDelegator.prototype, "WriteInt", [
		["WriteInt$0", [System.Int32]], 
		["WriteInt$1", [System.Int32, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlWriterDelegator.prototype, "WriteLong", [
		["WriteLong$0", [System.Int64]], 
		["WriteLong$1", [System.Int64, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlWriterDelegator.prototype, "WriteFloat", [
		["WriteFloat$0", [System.Single]], 
		["WriteFloat$1", [System.Single, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlWriterDelegator.prototype, "WriteShort", [
		["WriteShort$0", [System.Int16]], 
		["WriteShort$1", [System.Int16, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlWriterDelegator.prototype, "WriteUnsignedByte", [
		["WriteUnsignedByte$0", [System.Byte]], 
		["WriteUnsignedByte$1", [System.Byte, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlWriterDelegator.prototype, "WriteSignedByte", [
		["WriteSignedByte$0", [System.SByte]], 
		["WriteSignedByte$1", [System.SByte, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlWriterDelegator.prototype, "WriteUnsignedInt", [
		["WriteUnsignedInt$0", [System.UInt32]], 
		["WriteUnsignedInt$1", [System.UInt32, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlWriterDelegator.prototype, "WriteUnsignedLong", [
		["WriteUnsignedLong$0", [System.UInt64]], 
		["WriteUnsignedLong$1", [System.UInt64, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlWriterDelegator.prototype, "WriteUnsignedShort", [
		["WriteUnsignedShort$0", [System.UInt16]], 
		["WriteUnsignedShort$1", [System.UInt16, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlWriterDelegator.prototype, "WriteChar", [
		["WriteChar$0", [System.Char]], 
		["WriteChar$1", [System.Char, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlWriterDelegator.prototype, "WriteTimeSpan", [
		["WriteTimeSpan$0", [System.TimeSpan]], 
		["WriteTimeSpan$1", [System.TimeSpan, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlWriterDelegator.prototype, "WriteGuid", [
		["WriteGuid$0", [System.Guid]], 
		["WriteGuid$1", [System.Guid, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod(System.Runtime.Serialization.XmlWriterDelegator.prototype, "WriteQualifiedName", [
		["WriteQualifiedName$0", [System.String, System.String]], 
		["WriteQualifiedName$1", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype, "Writer", 
	$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.get_Writer, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype, "WriteState", 
	$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.get_WriteState, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype, "XmlLang", 
	$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.get_XmlLang, null);
JSIL.MakeProperty($asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype, "XmlSpace", 
	$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.get_XmlSpace, null);
Object.defineProperty($asm09.System.Runtime.Serialization.XmlWriterDelegator, "CharChunkSize", {
		"value": 76}
);
Object.defineProperty($asm09.System.Runtime.Serialization.XmlWriterDelegator, "ByteChunkSize", {
		"value": 57}
);
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.writer = null;
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.dictionaryWriter = null;
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.depth = 0;
$asm09.System.Runtime.Serialization.XmlWriterDelegator.prototype.prefixes = 0;

$asm09.System.Runtime.Serialization.SpecialTypeDataContract.prototype._ctor = function (type, name, ns) {
	$asm09.System.Runtime.Serialization.DataContract.prototype._ctor.call(this, new $asm09.System.Runtime.Serialization.SpecialTypeDataContract.SpecialTypeDataContractCriticalHelper(type, name, ns));
	this.helper = JSIL.TryCast($asm09.System.Runtime.Serialization.DataContract.prototype.get_Helper.call(this), $asm09.System.Runtime.Serialization.SpecialTypeDataContract.SpecialTypeDataContractCriticalHelper);
};
$asm09.System.Runtime.Serialization.SpecialTypeDataContract.prototype.get_IsBuiltInDataContract = function () {
	return true;
};
JSIL.MakeProperty($asm09.System.Runtime.Serialization.SpecialTypeDataContract.prototype, "IsBuiltInDataContract", 
	$asm09.System.Runtime.Serialization.SpecialTypeDataContract.prototype.get_IsBuiltInDataContract, null);
$asm09.System.Runtime.Serialization.SpecialTypeDataContract.prototype.helper = null;

$asm09.System.Runtime.Serialization.SpecialTypeDataContract.SpecialTypeDataContractCriticalHelper.prototype._ctor = function (type, name, ns) {
	$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype._ctor$1.call(this, type);
	$asm09.System.Runtime.Serialization.DataContract.DataContractCriticalHelper.prototype.SetDataContractName.call(this, name, ns);
};

$asm09.System.Xml.ArrayHelper$b2.prototype.ReadArray$0 = function (reader, localName, namespaceUri, maxArrayLength) {
	var array = null;
	var array2 = null;
	var num = 0;
	var num2 = 0;
	if (reader.TryGetArrayLength(/* ref */ num3)) {
		if (num3.value > 65535) {
			var num3 = new JSIL.Variable(65535);
		}
	} else {
		num3.value = 32;
	}
__loop0__: 
	while (true) {
		array2 = JSIL.Array.New(this.TArray, num3.value);
	__loop1__: 
		for (var i = 0; i < array2.length; i += num4) {
			var num4 = this.ReadArray$1(
				reader, 
				localName, 
				namespaceUri, 
				array2, 
				i, 
				(array2.length - i)
			);
			if (num4 === 0) {
				break __loop1__;
			}
		}
		num2 += i;
		if ((i < array2.length) || (reader.NodeType === System.Xml.XmlNodeType.EndElement)) {
			break __loop0__;
		}
		if (array === null) {
			array = JSIL.Array.New(System.Array.Of(this.TArray), 32);
		}
		array[num++] = array2;
		num3.value *= 2;
	}
	if (!((num2 === array2.length) && (num <= 0))) {
		var array3 = JSIL.Array.New(this.TArray, num2);
		var num5 = 0;
	__loop2__: 
		for (var j = 0; j < num; ++j) {
			System.Array.Copy$1(
				array[j], 
				0, 
				array3, 
				num5, 
				array[j].length
			);
			num5 += array[j].length;
		}
		System.Array.Copy$1(
			array2, 
			0, 
			array3, 
			num5, 
			(num2 - num5)
		);
		array2 = array3;
	}
	return array2;
};
$asm09.System.Xml.ArrayHelper$b2.prototype.WriteArray$0 = function (writer, prefix, localName, namespaceUri, reader) {
	if (reader.TryGetArrayLength(/* ref */ num)) {
		var num = new JSIL.Variable(System.Math.Min(num.value, 256));
	} else {
		num.value = 256;
	}
	var array = JSIL.Array.New(this.TArray, num.value);
__loop0__: 
	while (true) {
		var num2 = this.ReadArray$1(
			reader, 
			localName, 
			namespaceUri, 
			array, 
			0, 
			array.length
		);
		if (num2 === 0) {
			break __loop0__;
		}
		this.WriteArray$1(
			writer, 
			prefix, 
			localName, 
			namespaceUri, 
			array, 
			0, 
			num2
		);
	}
};
$asm09.System.Xml.ArrayHelper$b2.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
JSIL.OverloadedMethod($asm09.System.Xml.ArrayHelper$b2.prototype, "ReadArray", [
		["ReadArray$0", [System.Xml.XmlDictionaryReader, JSIL.AnyType, JSIL.AnyType, System.Int32]], 
		["ReadArray$1", [System.Xml.XmlDictionaryReader, JSIL.AnyType, JSIL.AnyType, System.Array.Of(JSIL.AnyType), System.Int32, System.Int32]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.ArrayHelper$b2.prototype, "WriteArray", [
		["WriteArray$0", [System.Xml.XmlDictionaryWriter, System.String, JSIL.AnyType, JSIL.AnyType, System.Xml.XmlDictionaryReader]], 
		["WriteArray$1", [System.Xml.XmlDictionaryWriter, System.String, JSIL.AnyType, JSIL.AnyType, System.Array.Of(JSIL.AnyType), System.Int32, System.Int32]]
	]);

$asm09.System.Xml.BooleanArrayHelperWithString.prototype.ReadArray = function (reader, localName, namespaceUri, array, offset, count) {
	return reader.ReadArray$0(
		localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.BooleanArrayHelperWithString.prototype.WriteArray = function (writer, prefix, localName, namespaceUri, array, offset, count) {
	writer.WriteArray$0(
		prefix, 
		localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.BooleanArrayHelperWithString.prototype._ctor = function () {
	$asm09.System.Xml.ArrayHelper$b2.Of(System.String, System.Boolean).prototype._ctor.call(this);
};
$asm09.System.Xml.BooleanArrayHelperWithString.Instance = null;
$asm09.System.Xml.BooleanArrayHelperWithString._cctor = function () {
	$asm09.System.Xml.BooleanArrayHelperWithString.Instance = new $asm09.System.Xml.BooleanArrayHelperWithString();
};

$asm09.System.Xml.BooleanArrayHelperWithDictionaryString.prototype.ReadArray = function (reader, localName, namespaceUri, array, offset, count) {
	return reader.ReadArray$1(
		localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.BooleanArrayHelperWithDictionaryString.prototype.WriteArray = function (writer, prefix, localName, namespaceUri, array, offset, count) {
	writer.WriteArray$1(
		prefix, 
		localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.BooleanArrayHelperWithDictionaryString.prototype._ctor = function () {
	$asm09.System.Xml.ArrayHelper$b2.Of(System.Xml.XmlDictionaryString, System.Boolean).prototype._ctor.call(this);
};
$asm09.System.Xml.BooleanArrayHelperWithDictionaryString.Instance = null;
$asm09.System.Xml.BooleanArrayHelperWithDictionaryString._cctor = function () {
	$asm09.System.Xml.BooleanArrayHelperWithDictionaryString.Instance = new $asm09.System.Xml.BooleanArrayHelperWithDictionaryString();
};

$asm09.System.Xml.Int16ArrayHelperWithString.prototype.ReadArray = function (reader, localName, namespaceUri, array, offset, count) {
	return reader.ReadArray$2(
		localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.Int16ArrayHelperWithString.prototype.WriteArray = function (writer, prefix, localName, namespaceUri, array, offset, count) {
	writer.WriteArray$2(
		prefix, 
		localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.Int16ArrayHelperWithString.prototype._ctor = function () {
	$asm09.System.Xml.ArrayHelper$b2.Of(System.String, System.Int16).prototype._ctor.call(this);
};
$asm09.System.Xml.Int16ArrayHelperWithString.Instance = null;
$asm09.System.Xml.Int16ArrayHelperWithString._cctor = function () {
	$asm09.System.Xml.Int16ArrayHelperWithString.Instance = new $asm09.System.Xml.Int16ArrayHelperWithString();
};

$asm09.System.Xml.Int16ArrayHelperWithDictionaryString.prototype.ReadArray = function (reader, localName, namespaceUri, array, offset, count) {
	return reader.ReadArray$3(
		localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.Int16ArrayHelperWithDictionaryString.prototype.WriteArray = function (writer, prefix, localName, namespaceUri, array, offset, count) {
	writer.WriteArray$3(
		prefix, 
		localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.Int16ArrayHelperWithDictionaryString.prototype._ctor = function () {
	$asm09.System.Xml.ArrayHelper$b2.Of(System.Xml.XmlDictionaryString, System.Int16).prototype._ctor.call(this);
};
$asm09.System.Xml.Int16ArrayHelperWithDictionaryString.Instance = null;
$asm09.System.Xml.Int16ArrayHelperWithDictionaryString._cctor = function () {
	$asm09.System.Xml.Int16ArrayHelperWithDictionaryString.Instance = new $asm09.System.Xml.Int16ArrayHelperWithDictionaryString();
};

$asm09.System.Xml.Int32ArrayHelperWithString.prototype.ReadArray = function (reader, localName, namespaceUri, array, offset, count) {
	return reader.ReadArray$4(
		localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.Int32ArrayHelperWithString.prototype.WriteArray = function (writer, prefix, localName, namespaceUri, array, offset, count) {
	writer.WriteArray$4(
		prefix, 
		localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.Int32ArrayHelperWithString.prototype._ctor = function () {
	$asm09.System.Xml.ArrayHelper$b2.Of(System.String, System.Int32).prototype._ctor.call(this);
};
$asm09.System.Xml.Int32ArrayHelperWithString.Instance = null;
$asm09.System.Xml.Int32ArrayHelperWithString._cctor = function () {
	$asm09.System.Xml.Int32ArrayHelperWithString.Instance = new $asm09.System.Xml.Int32ArrayHelperWithString();
};

$asm09.System.Xml.Int32ArrayHelperWithDictionaryString.prototype.ReadArray = function (reader, localName, namespaceUri, array, offset, count) {
	return reader.ReadArray$5(
		localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.Int32ArrayHelperWithDictionaryString.prototype.WriteArray = function (writer, prefix, localName, namespaceUri, array, offset, count) {
	writer.WriteArray$5(
		prefix, 
		localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.Int32ArrayHelperWithDictionaryString.prototype._ctor = function () {
	$asm09.System.Xml.ArrayHelper$b2.Of(System.Xml.XmlDictionaryString, System.Int32).prototype._ctor.call(this);
};
$asm09.System.Xml.Int32ArrayHelperWithDictionaryString.Instance = null;
$asm09.System.Xml.Int32ArrayHelperWithDictionaryString._cctor = function () {
	$asm09.System.Xml.Int32ArrayHelperWithDictionaryString.Instance = new $asm09.System.Xml.Int32ArrayHelperWithDictionaryString();
};

$asm09.System.Xml.Int64ArrayHelperWithString.prototype.ReadArray = function (reader, localName, namespaceUri, array, offset, count) {
	return reader.ReadArray$6(
		localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.Int64ArrayHelperWithString.prototype.WriteArray = function (writer, prefix, localName, namespaceUri, array, offset, count) {
	writer.WriteArray$6(
		prefix, 
		localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.Int64ArrayHelperWithString.prototype._ctor = function () {
	$asm09.System.Xml.ArrayHelper$b2.Of(System.String, System.Int64).prototype._ctor.call(this);
};
$asm09.System.Xml.Int64ArrayHelperWithString.Instance = null;
$asm09.System.Xml.Int64ArrayHelperWithString._cctor = function () {
	$asm09.System.Xml.Int64ArrayHelperWithString.Instance = new $asm09.System.Xml.Int64ArrayHelperWithString();
};

$asm09.System.Xml.Int64ArrayHelperWithDictionaryString.prototype.ReadArray = function (reader, localName, namespaceUri, array, offset, count) {
	return reader.ReadArray$7(
		localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.Int64ArrayHelperWithDictionaryString.prototype.WriteArray = function (writer, prefix, localName, namespaceUri, array, offset, count) {
	writer.WriteArray$7(
		prefix, 
		localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.Int64ArrayHelperWithDictionaryString.prototype._ctor = function () {
	$asm09.System.Xml.ArrayHelper$b2.Of(System.Xml.XmlDictionaryString, System.Int64).prototype._ctor.call(this);
};
$asm09.System.Xml.Int64ArrayHelperWithDictionaryString.Instance = null;
$asm09.System.Xml.Int64ArrayHelperWithDictionaryString._cctor = function () {
	$asm09.System.Xml.Int64ArrayHelperWithDictionaryString.Instance = new $asm09.System.Xml.Int64ArrayHelperWithDictionaryString();
};

$asm09.System.Xml.SingleArrayHelperWithString.prototype.ReadArray = function (reader, localName, namespaceUri, array, offset, count) {
	return reader.ReadArray$8(
		localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.SingleArrayHelperWithString.prototype.WriteArray = function (writer, prefix, localName, namespaceUri, array, offset, count) {
	writer.WriteArray$8(
		prefix, 
		localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.SingleArrayHelperWithString.prototype._ctor = function () {
	$asm09.System.Xml.ArrayHelper$b2.Of(System.String, System.Single).prototype._ctor.call(this);
};
$asm09.System.Xml.SingleArrayHelperWithString.Instance = null;
$asm09.System.Xml.SingleArrayHelperWithString._cctor = function () {
	$asm09.System.Xml.SingleArrayHelperWithString.Instance = new $asm09.System.Xml.SingleArrayHelperWithString();
};

$asm09.System.Xml.SingleArrayHelperWithDictionaryString.prototype.ReadArray = function (reader, localName, namespaceUri, array, offset, count) {
	return reader.ReadArray$9(
		localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.SingleArrayHelperWithDictionaryString.prototype.WriteArray = function (writer, prefix, localName, namespaceUri, array, offset, count) {
	writer.WriteArray$9(
		prefix, 
		localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.SingleArrayHelperWithDictionaryString.prototype._ctor = function () {
	$asm09.System.Xml.ArrayHelper$b2.Of(System.Xml.XmlDictionaryString, System.Single).prototype._ctor.call(this);
};
$asm09.System.Xml.SingleArrayHelperWithDictionaryString.Instance = null;
$asm09.System.Xml.SingleArrayHelperWithDictionaryString._cctor = function () {
	$asm09.System.Xml.SingleArrayHelperWithDictionaryString.Instance = new $asm09.System.Xml.SingleArrayHelperWithDictionaryString();
};

$asm09.System.Xml.DoubleArrayHelperWithString.prototype.ReadArray = function (reader, localName, namespaceUri, array, offset, count) {
	return reader.ReadArray$10(
		localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.DoubleArrayHelperWithString.prototype.WriteArray = function (writer, prefix, localName, namespaceUri, array, offset, count) {
	writer.WriteArray$10(
		prefix, 
		localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.DoubleArrayHelperWithString.prototype._ctor = function () {
	$asm09.System.Xml.ArrayHelper$b2.Of(System.String, System.Double).prototype._ctor.call(this);
};
$asm09.System.Xml.DoubleArrayHelperWithString.Instance = null;
$asm09.System.Xml.DoubleArrayHelperWithString._cctor = function () {
	$asm09.System.Xml.DoubleArrayHelperWithString.Instance = new $asm09.System.Xml.DoubleArrayHelperWithString();
};

$asm09.System.Xml.DoubleArrayHelperWithDictionaryString.prototype.ReadArray = function (reader, localName, namespaceUri, array, offset, count) {
	return reader.ReadArray$11(
		localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.DoubleArrayHelperWithDictionaryString.prototype.WriteArray = function (writer, prefix, localName, namespaceUri, array, offset, count) {
	writer.WriteArray$11(
		prefix, 
		localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.DoubleArrayHelperWithDictionaryString.prototype._ctor = function () {
	$asm09.System.Xml.ArrayHelper$b2.Of(System.Xml.XmlDictionaryString, System.Double).prototype._ctor.call(this);
};
$asm09.System.Xml.DoubleArrayHelperWithDictionaryString.Instance = null;
$asm09.System.Xml.DoubleArrayHelperWithDictionaryString._cctor = function () {
	$asm09.System.Xml.DoubleArrayHelperWithDictionaryString.Instance = new $asm09.System.Xml.DoubleArrayHelperWithDictionaryString();
};

$asm09.System.Xml.DecimalArrayHelperWithString.prototype.ReadArray = function (reader, localName, namespaceUri, array, offset, count) {
	return reader.ReadArray$12(
		localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.DecimalArrayHelperWithString.prototype.WriteArray = function (writer, prefix, localName, namespaceUri, array, offset, count) {
	writer.WriteArray$12(
		prefix, 
		localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.DecimalArrayHelperWithString.prototype._ctor = function () {
	$asm09.System.Xml.ArrayHelper$b2.Of(System.String, System.Decimal).prototype._ctor.call(this);
};
$asm09.System.Xml.DecimalArrayHelperWithString.Instance = null;
$asm09.System.Xml.DecimalArrayHelperWithString._cctor = function () {
	$asm09.System.Xml.DecimalArrayHelperWithString.Instance = new $asm09.System.Xml.DecimalArrayHelperWithString();
};

$asm09.System.Xml.DecimalArrayHelperWithDictionaryString.prototype.ReadArray = function (reader, localName, namespaceUri, array, offset, count) {
	return reader.ReadArray$13(
		localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.DecimalArrayHelperWithDictionaryString.prototype.WriteArray = function (writer, prefix, localName, namespaceUri, array, offset, count) {
	writer.WriteArray$13(
		prefix, 
		localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.DecimalArrayHelperWithDictionaryString.prototype._ctor = function () {
	$asm09.System.Xml.ArrayHelper$b2.Of(System.Xml.XmlDictionaryString, System.Decimal).prototype._ctor.call(this);
};
$asm09.System.Xml.DecimalArrayHelperWithDictionaryString.Instance = null;
$asm09.System.Xml.DecimalArrayHelperWithDictionaryString._cctor = function () {
	$asm09.System.Xml.DecimalArrayHelperWithDictionaryString.Instance = new $asm09.System.Xml.DecimalArrayHelperWithDictionaryString();
};

$asm09.System.Xml.DateTimeArrayHelperWithString.prototype.ReadArray = function (reader, localName, namespaceUri, array, offset, count) {
	return reader.ReadArray$14(
		localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.DateTimeArrayHelperWithString.prototype.WriteArray = function (writer, prefix, localName, namespaceUri, array, offset, count) {
	writer.WriteArray$14(
		prefix, 
		localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.DateTimeArrayHelperWithString.prototype._ctor = function () {
	$asm09.System.Xml.ArrayHelper$b2.Of(System.String, System.DateTime).prototype._ctor.call(this);
};
$asm09.System.Xml.DateTimeArrayHelperWithString.Instance = null;
$asm09.System.Xml.DateTimeArrayHelperWithString._cctor = function () {
	$asm09.System.Xml.DateTimeArrayHelperWithString.Instance = new $asm09.System.Xml.DateTimeArrayHelperWithString();
};

$asm09.System.Xml.DateTimeArrayHelperWithDictionaryString.prototype.ReadArray = function (reader, localName, namespaceUri, array, offset, count) {
	return reader.ReadArray$15(
		localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.DateTimeArrayHelperWithDictionaryString.prototype.WriteArray = function (writer, prefix, localName, namespaceUri, array, offset, count) {
	writer.WriteArray$15(
		prefix, 
		localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.DateTimeArrayHelperWithDictionaryString.prototype._ctor = function () {
	$asm09.System.Xml.ArrayHelper$b2.Of(System.Xml.XmlDictionaryString, System.DateTime).prototype._ctor.call(this);
};
$asm09.System.Xml.DateTimeArrayHelperWithDictionaryString.Instance = null;
$asm09.System.Xml.DateTimeArrayHelperWithDictionaryString._cctor = function () {
	$asm09.System.Xml.DateTimeArrayHelperWithDictionaryString.Instance = new $asm09.System.Xml.DateTimeArrayHelperWithDictionaryString();
};

$asm09.System.Xml.GuidArrayHelperWithString.prototype.ReadArray = function (reader, localName, namespaceUri, array, offset, count) {
	return reader.ReadArray$16(
		localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.GuidArrayHelperWithString.prototype.WriteArray = function (writer, prefix, localName, namespaceUri, array, offset, count) {
	writer.WriteArray$16(
		prefix, 
		localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.GuidArrayHelperWithString.prototype._ctor = function () {
	$asm09.System.Xml.ArrayHelper$b2.Of(System.String, System.Guid).prototype._ctor.call(this);
};
$asm09.System.Xml.GuidArrayHelperWithString.Instance = null;
$asm09.System.Xml.GuidArrayHelperWithString._cctor = function () {
	$asm09.System.Xml.GuidArrayHelperWithString.Instance = new $asm09.System.Xml.GuidArrayHelperWithString();
};

$asm09.System.Xml.GuidArrayHelperWithDictionaryString.prototype.ReadArray = function (reader, localName, namespaceUri, array, offset, count) {
	return reader.ReadArray$17(
		localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.GuidArrayHelperWithDictionaryString.prototype.WriteArray = function (writer, prefix, localName, namespaceUri, array, offset, count) {
	writer.WriteArray$17(
		prefix, 
		localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.GuidArrayHelperWithDictionaryString.prototype._ctor = function () {
	$asm09.System.Xml.ArrayHelper$b2.Of(System.Xml.XmlDictionaryString, System.Guid).prototype._ctor.call(this);
};
$asm09.System.Xml.GuidArrayHelperWithDictionaryString.Instance = null;
$asm09.System.Xml.GuidArrayHelperWithDictionaryString._cctor = function () {
	$asm09.System.Xml.GuidArrayHelperWithDictionaryString.Instance = new $asm09.System.Xml.GuidArrayHelperWithDictionaryString();
};

$asm09.System.Xml.TimeSpanArrayHelperWithString.prototype.ReadArray = function (reader, localName, namespaceUri, array, offset, count) {
	return reader.ReadArray$18(
		localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.TimeSpanArrayHelperWithString.prototype.WriteArray = function (writer, prefix, localName, namespaceUri, array, offset, count) {
	writer.WriteArray$18(
		prefix, 
		localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.TimeSpanArrayHelperWithString.prototype._ctor = function () {
	$asm09.System.Xml.ArrayHelper$b2.Of(System.String, System.TimeSpan).prototype._ctor.call(this);
};
$asm09.System.Xml.TimeSpanArrayHelperWithString.Instance = null;
$asm09.System.Xml.TimeSpanArrayHelperWithString._cctor = function () {
	$asm09.System.Xml.TimeSpanArrayHelperWithString.Instance = new $asm09.System.Xml.TimeSpanArrayHelperWithString();
};

$asm09.System.Xml.TimeSpanArrayHelperWithDictionaryString.prototype.ReadArray = function (reader, localName, namespaceUri, array, offset, count) {
	return reader.ReadArray$19(
		localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.TimeSpanArrayHelperWithDictionaryString.prototype.WriteArray = function (writer, prefix, localName, namespaceUri, array, offset, count) {
	writer.WriteArray$19(
		prefix, 
		localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.TimeSpanArrayHelperWithDictionaryString.prototype._ctor = function () {
	$asm09.System.Xml.ArrayHelper$b2.Of(System.Xml.XmlDictionaryString, System.TimeSpan).prototype._ctor.call(this);
};
$asm09.System.Xml.TimeSpanArrayHelperWithDictionaryString.Instance = null;
$asm09.System.Xml.TimeSpanArrayHelperWithDictionaryString._cctor = function () {
	$asm09.System.Xml.TimeSpanArrayHelperWithDictionaryString.Instance = new $asm09.System.Xml.TimeSpanArrayHelperWithDictionaryString();
};

$asm09.System.Xml.PrefixHandle.prototype._ctor = function (bufferReader) {
	System.Object.prototype._ctor.call(this);
	this.bufferReader = bufferReader;
};
$asm09.System.Xml.PrefixHandle.prototype.SetValue$0 = function (type) {
	this.type = type;
};
$asm09.System.Xml.PrefixHandle.prototype.SetValue$1 = function (offset, length) {
	if (length === 0) {
		this.SetValue$0($asm09.System.Xml.PrefixHandleType.Empty);
		return;
	}
	if (length === 1) {
		var byte = this.bufferReader.GetByte$1(offset);
		if (!((byte < 97) || (byte > 122))) {
			this.SetValue$0($asm09.System.Xml.PrefixHandle.GetAlphaPrefix((byte - 97)));
			return;
		}
	}
	this.type = $asm09.System.Xml.PrefixHandleType.Buffer;
	this.offset = offset;
	this.length = length;
};
$asm09.System.Xml.PrefixHandle.prototype.get_IsEmpty = function () {
	return (this.type === $asm09.System.Xml.PrefixHandleType.Empty);
};
$asm09.System.Xml.PrefixHandle.prototype.get_IsXmlns = function () {
	if (this.type !== $asm09.System.Xml.PrefixHandleType.Buffer) {
		return false;
	}
	if (this.length !== 5) {
		return false;
	}
	var buffer = this.bufferReader.Buffer;
	var num = this.offset;
	return (!((buffer[num] !== 120) || 
			(buffer[(num + 1)] !== 109) || 
			(buffer[(num + 2)] !== 108) || 
			(buffer[(num + 3)] !== 110)) && (buffer[(num + 4)] === 115));
};
$asm09.System.Xml.PrefixHandle.prototype.get_IsXml = function () {
	if (this.type !== $asm09.System.Xml.PrefixHandleType.Buffer) {
		return false;
	}
	if (this.length !== 3) {
		return false;
	}
	var buffer = this.bufferReader.Buffer;
	var num = this.offset;
	return (!((buffer[num] !== 120) || 
			(buffer[(num + 1)] !== 109)) && (buffer[(num + 2)] === 108));
};
$asm09.System.Xml.PrefixHandle.prototype.TryGetShortPrefix = function (/* ref */ type) {
	type.value = this.type;
	return (JSIL.UntranslatableInstruction("ldobj:Int32([mscorlib]System.Int32, ldloc:valuetype System.Xml.PrefixHandleType&[exp:int32&](type))") !== 27);
};
$asm09.System.Xml.PrefixHandle.GetString$0 = function (type) {
	return $asm09.System.Xml.PrefixHandle.prefixStrings[Math.floor(type)];
};
$asm09.System.Xml.PrefixHandle.GetAlphaPrefix = function (index) {
	return (1 + index);
};
$asm09.System.Xml.PrefixHandle.GetString$1 = function (type, /* ref */ offset, /* ref */ length) {
	if (!JSIL.Cast(type, System.Boolean)) {
		offset.value = 0;
		length.value = 0;
	} else {
		length.value = 1;
		offset.value = (type - $asm09.System.Xml.PrefixHandleType.A);
	}
	return $asm09.System.Xml.PrefixHandle.prefixBuffer;
};
$asm09.System.Xml.PrefixHandle.prototype.GetString$0 = function (nameTable) {
	var prefixHandleType = this.type;
	if (prefixHandleType !== $asm09.System.Xml.PrefixHandleType.Buffer) {
		return $asm09.System.Xml.PrefixHandle.GetString$0(prefixHandleType);
	}
	return this.bufferReader.GetString$1(this.offset, this.length, nameTable);
};
$asm09.System.Xml.PrefixHandle.prototype.GetString$1 = function () {
	var prefixHandleType = this.type;
	if (prefixHandleType !== $asm09.System.Xml.PrefixHandleType.Buffer) {
		return $asm09.System.Xml.PrefixHandle.GetString$0(prefixHandleType);
	}
	return this.bufferReader.GetString$0(this.offset, this.length);
};
$asm09.System.Xml.PrefixHandle.prototype.GetString$2 = function (/* ref */ offset, /* ref */ length) {
	var prefixHandleType = this.type;
	if (prefixHandleType !== $asm09.System.Xml.PrefixHandleType.Buffer) {
		return $asm09.System.Xml.PrefixHandle.GetString$1(prefixHandleType, /* ref */ offset, /* ref */ length);
	}
	offset.value = this.offset;
	length.value = this.length;
	return this.bufferReader.Buffer;
};
$asm09.System.Xml.PrefixHandle.prototype.CompareTo = function (that) {
	return this.GetString$1().CompareTo$1(that.GetString$1());
};
$asm09.System.Xml.PrefixHandle.prototype.Equals2$0 = function (prefix2) {
	var prefixHandleType = this.type;
	var prefixHandleType2 = prefix2.type;
	if (prefixHandleType !== prefixHandleType2) {
		return false;
	}
	if (prefixHandleType !== $asm09.System.Xml.PrefixHandleType.Buffer) {
		return true;
	}
	if (this.bufferReader === prefix2.bufferReader) {
		return this.bufferReader.Equals2$4(this.offset, this.length, prefix2.offset, prefix2.length);
	}
	return this.bufferReader.Equals2$3(
		this.offset, 
		this.length, 
		prefix2.bufferReader, 
		prefix2.offset, 
		prefix2.length
	);
};
$asm09.System.Xml.PrefixHandle.prototype.Equals2$1 = function (prefix2) {
	var prefixHandleType = this.type;
	if (prefixHandleType !== $asm09.System.Xml.PrefixHandleType.Buffer) {
		return $asm09.System.Xml.PrefixHandle.GetString$0(prefixHandleType) == prefix2;
	}
	return this.bufferReader.Equals2$5(this.offset, this.length, prefix2);
};
$asm09.System.Xml.PrefixHandle.prototype.Equals2$2 = function (prefix2) {
	return this.Equals2$1(prefix2.Value);
};
$asm09.System.Xml.PrefixHandle.op_Equality$0 = function (prefix1, prefix2) {
	return prefix1.Equals2$1(prefix2);
};
$asm09.System.Xml.PrefixHandle.op_Inequality$0 = function (prefix1, prefix2) {
	return !prefix1.Equals2$1(prefix2);
};
$asm09.System.Xml.PrefixHandle.op_Equality$1 = function (prefix1, prefix2) {
	return prefix1.Equals2$2(prefix2);
};
$asm09.System.Xml.PrefixHandle.op_Inequality$1 = function (prefix1, prefix2) {
	return !prefix1.Equals2$2(prefix2);
};
$asm09.System.Xml.PrefixHandle.op_Equality$2 = function (prefix1, prefix2) {
	return prefix1.Equals2$0(prefix2);
};
$asm09.System.Xml.PrefixHandle.op_Inequality$2 = function (prefix1, prefix2) {
	return !prefix1.Equals2$0(prefix2);
};
$asm09.System.Xml.PrefixHandle.prototype.Equals = function (obj) {
	var prefixHandle = JSIL.TryCast(obj, $asm09.System.Xml.PrefixHandle);
	return (!System.Object.ReferenceEquals(prefixHandle, null) && $asm09.System.Xml.PrefixHandle.op_Equality$2(this, prefixHandle));
};
$asm09.System.Xml.PrefixHandle.prototype.toString = function () {
	return this.GetString$1();
};
$asm09.System.Xml.PrefixHandle.prototype.GetHashCode = function () {
	return this.GetString$1().GetHashCode();
};
JSIL.OverloadedMethod($asm09.System.Xml.PrefixHandle.prototype, "SetValue", [
		["SetValue$0", [$asm09.System.Xml.PrefixHandleType]], 
		["SetValue$1", [System.Int32, System.Int32]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.PrefixHandle, "GetString", [
		["GetString$0", [$asm09.System.Xml.PrefixHandleType]], 
		["GetString$1", [$asm09.System.Xml.PrefixHandleType, JSIL.Reference.Of(System.Int32), JSIL.Reference.Of(System.Int32)]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.PrefixHandle.prototype, "GetString", [
		["GetString$0", [System.Xml.XmlNameTable]], 
		["GetString$1", []], 
		["GetString$2", [JSIL.Reference.Of(System.Int32), JSIL.Reference.Of(System.Int32)]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.PrefixHandle.prototype, "Equals2", [
		["Equals2$0", [$asm09.System.Xml.PrefixHandle]], 
		["Equals2$1", [System.String]], 
		["Equals2$2", [System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.PrefixHandle, "op_Equality", [
		["op_Equality$0", [$asm09.System.Xml.PrefixHandle, System.String]], 
		["op_Equality$1", [$asm09.System.Xml.PrefixHandle, System.Xml.XmlDictionaryString]], 
		["op_Equality$2", [$asm09.System.Xml.PrefixHandle, $asm09.System.Xml.PrefixHandle]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.PrefixHandle, "op_Inequality", [
		["op_Inequality$0", [$asm09.System.Xml.PrefixHandle, System.String]], 
		["op_Inequality$1", [$asm09.System.Xml.PrefixHandle, System.Xml.XmlDictionaryString]], 
		["op_Inequality$2", [$asm09.System.Xml.PrefixHandle, $asm09.System.Xml.PrefixHandle]]
	]);
JSIL.MakeProperty($asm09.System.Xml.PrefixHandle.prototype, "IsEmpty", 
	$asm09.System.Xml.PrefixHandle.prototype.get_IsEmpty, null);
JSIL.MakeProperty($asm09.System.Xml.PrefixHandle.prototype, "IsXmlns", 
	$asm09.System.Xml.PrefixHandle.prototype.get_IsXmlns, null);
JSIL.MakeProperty($asm09.System.Xml.PrefixHandle.prototype, "IsXml", 
	$asm09.System.Xml.PrefixHandle.prototype.get_IsXml, null);
$asm09.System.Xml.PrefixHandle.prototype.bufferReader = null;
$asm09.System.Xml.PrefixHandle.prototype.type = 0;
$asm09.System.Xml.PrefixHandle.prototype.offset = 0;
$asm09.System.Xml.PrefixHandle.prototype.length = 0;
$asm09.System.Xml.PrefixHandle.prefixStrings = null;
$asm09.System.Xml.PrefixHandle.prefixBuffer = null;
$asm09.System.Xml.PrefixHandle._cctor = function () {
	$asm09.System.Xml.PrefixHandle.prefixStrings = JSIL.Array.New(System.String, ["", "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]);
	$asm09.System.Xml.PrefixHandle.prefixBuffer = JSIL.Array.New(System.Byte, [97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122]);
};

$asm09.System.Xml.StringHandle.prototype._ctor = function (bufferReader) {
	System.Object.prototype._ctor.call(this);
	this.bufferReader = bufferReader;
	this.SetValue$0(0, 0);
};
$asm09.System.Xml.StringHandle.prototype.SetValue$0 = function (offset, length) {
	this.type = $asm09.System.Xml.StringHandle.StringHandleType.UTF8;
	this.offset = offset;
	this.length = length;
};
$asm09.System.Xml.StringHandle.prototype.SetConstantValue = function (constStringType) {
	this.type = $asm09.System.Xml.StringHandle.StringHandleType.ConstString;
	this.key = Math.floor(constStringType);
};
$asm09.System.Xml.StringHandle.prototype.SetValue$1 = function (offset, length, escaped) {
	this.type = escaped ? $asm09.System.Xml.StringHandle.StringHandleType.EscapedUTF8 : $asm09.System.Xml.StringHandle.StringHandleType.UTF8;
	this.offset = offset;
	this.length = length;
};
$asm09.System.Xml.StringHandle.prototype.SetValue$2 = function (key) {
	this.type = $asm09.System.Xml.StringHandle.StringHandleType.Dictionary;
	this.key = key;
};
$asm09.System.Xml.StringHandle.prototype.SetValue$3 = function (value) {
	this.type = value.type;
	this.key = value.key;
	this.offset = value.offset;
	this.length = value.length;
};
$asm09.System.Xml.StringHandle.prototype.get_IsEmpty = function () {
	if (this.type === $asm09.System.Xml.StringHandle.StringHandleType.UTF8) {
		return (this.length === 0);
	}
	return this.Equals2$2(System.String.Empty);
};
$asm09.System.Xml.StringHandle.prototype.GetString$0 = function (nameTable) {
	var stringHandleType = this.type;
	if (stringHandleType === $asm09.System.Xml.StringHandle.StringHandleType.UTF8) {
		return this.bufferReader.GetString$1(this.offset, this.length, nameTable);
	}
	if (!JSIL.Cast(stringHandleType, System.Boolean)) {
		return nameTable.Add$1(this.bufferReader.GetDictionaryString(this.key).Value);
	}
	return nameTable.Add$1($asm09.System.Xml.StringHandle.constStrings[this.key]);
};
$asm09.System.Xml.StringHandle.prototype.GetString$1 = function () {
	var stringHandleType = this.type;
	if (stringHandleType === $asm09.System.Xml.StringHandle.StringHandleType.UTF8) {
		return this.bufferReader.GetString$0(this.offset, this.length);
	}
	if (!JSIL.Cast(stringHandleType, System.Boolean)) {
		return this.bufferReader.GetDictionaryString(this.key).Value;
	}
	return $asm09.System.Xml.StringHandle.constStrings[this.key];
};
$asm09.System.Xml.StringHandle.prototype.GetString$2 = function (/* ref */ offset, /* ref */ length) {
	var stringHandleType = this.type;
	if (stringHandleType === $asm09.System.Xml.StringHandle.StringHandleType.UTF8) {
		offset.value = this.offset;
		length.value = this.length;
		return this.bufferReader.Buffer;
	}
	if (!JSIL.Cast(stringHandleType, System.Boolean)) {
		var array = this.bufferReader.GetDictionaryString(this.key).ToUTF8();
		offset.value = 0;
		length.value = array.length;
		return array;
	}
	if (stringHandleType === $asm09.System.Xml.StringHandle.StringHandleType.ConstString) {
		var array2 = $asm09.System.Xml.XmlConverter.ToBytes($asm09.System.Xml.StringHandle.constStrings[this.key]);
		offset.value = 0;
		length.value = array2.length;
		return array2;
	}
	var array3 = $asm09.System.Xml.XmlConverter.ToBytes(this.bufferReader.GetEscapedString$0(this.offset, this.length));
	offset.value = 0;
	length.value = array3.length;
	return array3;
};
$asm09.System.Xml.StringHandle.prototype.TryGetDictionaryString = function (/* ref */ value) {
	if (this.type === 0) {
		value.value = this.bufferReader.GetDictionaryString(this.key);
		return true;
	}
	if (this.IsEmpty) {
		value.value = System.Xml.XmlDictionaryString.Empty;
		return true;
	}
	value.value = null;
	return false;
};
$asm09.System.Xml.StringHandle.prototype.toString = function () {
	return this.GetString$1();
};
$asm09.System.Xml.StringHandle.prototype.Equals2$0 = function (key2, bufferReader2) {
	var stringHandleType = this.type;
	if (!JSIL.Cast(stringHandleType, System.Boolean)) {
		return this.bufferReader.Equals2$0(this.key, key2, bufferReader2);
	}
	if (stringHandleType === $asm09.System.Xml.StringHandle.StringHandleType.UTF8) {
		return this.bufferReader.Equals2$5(this.offset, this.length, bufferReader2.GetDictionaryString(key2).Value);
	}
	return this.GetString$1() == this.bufferReader.GetDictionaryString(key2).Value;
};
$asm09.System.Xml.StringHandle.prototype.Equals2$1 = function (xmlString2) {
	var stringHandleType = this.type;
	if (!JSIL.Cast(stringHandleType, System.Boolean)) {
		return this.bufferReader.Equals2$1(this.key, xmlString2);
	}
	if (stringHandleType === $asm09.System.Xml.StringHandle.StringHandleType.UTF8) {
		return this.bufferReader.Equals2$2(this.offset, this.length, xmlString2.ToUTF8());
	}
	return this.GetString$1() == xmlString2.Value;
};
$asm09.System.Xml.StringHandle.prototype.Equals2$2 = function (s2) {
	var stringHandleType = this.type;
	if (!JSIL.Cast(stringHandleType, System.Boolean)) {
		return this.bufferReader.GetDictionaryString(this.key).Value == s2;
	}
	if (stringHandleType === $asm09.System.Xml.StringHandle.StringHandleType.UTF8) {
		return this.bufferReader.Equals2$5(this.offset, this.length, s2);
	}
	return this.GetString$1() == s2;
};
$asm09.System.Xml.StringHandle.prototype.Equals2$3 = function (offset2, length2, bufferReader2) {
	var stringHandleType = this.type;
	if (!JSIL.Cast(stringHandleType, System.Boolean)) {
		return bufferReader2.Equals2$5(offset2, length2, this.bufferReader.GetDictionaryString(this.key).Value);
	}
	if (stringHandleType === $asm09.System.Xml.StringHandle.StringHandleType.UTF8) {
		return this.bufferReader.Equals2$3(
			this.offset, 
			this.length, 
			bufferReader2, 
			offset2, 
			length2
		);
	}
	return this.GetString$1() == this.bufferReader.GetString$0(offset2, length2);
};
$asm09.System.Xml.StringHandle.prototype.Equals2$4 = function (s2) {
	var stringHandleType = s2.type;
	if (!JSIL.Cast(stringHandleType, System.Boolean)) {
		return this.Equals2$0(s2.key, s2.bufferReader);
	}
	if (stringHandleType === $asm09.System.Xml.StringHandle.StringHandleType.UTF8) {
		return this.Equals2$3(s2.offset, s2.length, s2.bufferReader);
	}
	return this.Equals2$2(s2.GetString$1());
};
$asm09.System.Xml.StringHandle.op_Equality$0 = function (s1, xmlString2) {
	return s1.Equals2$1(xmlString2);
};
$asm09.System.Xml.StringHandle.op_Inequality$0 = function (s1, xmlString2) {
	return !s1.Equals2$1(xmlString2);
};
$asm09.System.Xml.StringHandle.op_Equality$1 = function (s1, s2) {
	return s1.Equals2$2(s2);
};
$asm09.System.Xml.StringHandle.op_Inequality$1 = function (s1, s2) {
	return !s1.Equals2$2(s2);
};
$asm09.System.Xml.StringHandle.op_Equality$2 = function (s1, s2) {
	return s1.Equals2$4(s2);
};
$asm09.System.Xml.StringHandle.op_Inequality$2 = function (s1, s2) {
	return !s1.Equals2$4(s2);
};
$asm09.System.Xml.StringHandle.prototype.CompareTo = function (that) {
	if (!((this.type !== $asm09.System.Xml.StringHandle.StringHandleType.UTF8) || (that.type !== $asm09.System.Xml.StringHandle.StringHandleType.UTF8))) {
		return this.bufferReader.Compare(this.offset, this.length, that.offset, that.length);
	}
	return System.String.Compare$1(this.GetString$1(), that.GetString$1(), System.StringComparison.Ordinal);
};
$asm09.System.Xml.StringHandle.prototype.Equals = function (obj) {
	var stringHandle = JSIL.TryCast(obj, $asm09.System.Xml.StringHandle);
	return (!System.Object.ReferenceEquals(stringHandle, null) && $asm09.System.Xml.StringHandle.op_Equality$2(this, stringHandle));
};
$asm09.System.Xml.StringHandle.prototype.GetHashCode = function () {
	return this.GetString$1().GetHashCode();
};
JSIL.OverloadedMethod($asm09.System.Xml.StringHandle.prototype, "SetValue", [
		["SetValue$0", [System.Int32, System.Int32]], 
		["SetValue$1", [System.Int32, System.Int32, System.Boolean]], 
		["SetValue$2", [System.Int32]], 
		["SetValue$3", [$asm09.System.Xml.StringHandle]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.StringHandle.prototype, "GetString", [
		["GetString$0", [System.Xml.XmlNameTable]], 
		["GetString$1", []], 
		["GetString$2", [JSIL.Reference.Of(System.Int32), JSIL.Reference.Of(System.Int32)]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.StringHandle.prototype, "Equals2", [
		["Equals2$0", [System.Int32, $asm09.System.Xml.XmlBufferReader]], 
		["Equals2$1", [System.Xml.XmlDictionaryString]], 
		["Equals2$2", [System.String]], 
		["Equals2$3", [System.Int32, System.Int32, $asm09.System.Xml.XmlBufferReader]], 
		["Equals2$4", [$asm09.System.Xml.StringHandle]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.StringHandle, "op_Equality", [
		["op_Equality$0", [$asm09.System.Xml.StringHandle, System.Xml.XmlDictionaryString]], 
		["op_Equality$1", [$asm09.System.Xml.StringHandle, System.String]], 
		["op_Equality$2", [$asm09.System.Xml.StringHandle, $asm09.System.Xml.StringHandle]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.StringHandle, "op_Inequality", [
		["op_Inequality$0", [$asm09.System.Xml.StringHandle, System.Xml.XmlDictionaryString]], 
		["op_Inequality$1", [$asm09.System.Xml.StringHandle, System.String]], 
		["op_Inequality$2", [$asm09.System.Xml.StringHandle, $asm09.System.Xml.StringHandle]]
	]);
JSIL.MakeProperty($asm09.System.Xml.StringHandle.prototype, "IsEmpty", 
	$asm09.System.Xml.StringHandle.prototype.get_IsEmpty, null);
$asm09.System.Xml.StringHandle.prototype.bufferReader = null;
$asm09.System.Xml.StringHandle.prototype.type = 0;
$asm09.System.Xml.StringHandle.prototype.key = 0;
$asm09.System.Xml.StringHandle.prototype.offset = 0;
$asm09.System.Xml.StringHandle.prototype.length = 0;
$asm09.System.Xml.StringHandle.constStrings = null;
$asm09.System.Xml.StringHandle._cctor = function () {
	$asm09.System.Xml.StringHandle.constStrings = JSIL.Array.New(System.String, ["type", "root", "item"]);
};

System.Xml.UniqueId.prototype._ctor$0 = function () {
	this._ctor$1(System.Guid.NewGuid().MemberwiseClone());
};
System.Xml.UniqueId.prototype._ctor$1 = function (guid) {
	this._ctor$2(guid.ToByteArray());
};
System.Xml.UniqueId.prototype._ctor$2 = function (guid) {
	this._ctor$3(guid, 0);
};
System.Xml.UniqueId.prototype._ctor$3 = JSIL.UntranslatableFunction("System.Void System.Xml.UniqueId::.ctor(System.Byte[],System.Int32)");
System.Xml.UniqueId.prototype._ctor$4 = JSIL.UntranslatableFunction("System.Void System.Xml.UniqueId::.ctor(System.String)");
System.Xml.UniqueId.prototype._ctor$5 = JSIL.UntranslatableFunction("System.Void System.Xml.UniqueId::.ctor(System.Char[],System.Int32,System.Int32)");
System.Xml.UniqueId.prototype.get_CharArrayLength = function () {
	if (this.s !== null) {
		return this.s.length;
	}
	return 45;
};
System.Xml.UniqueId.prototype.get_IsGuid = function () {
	return ((this.idLow | this.idHigh) !== 0);
};
System.Xml.UniqueId.prototype.ToCharArray = JSIL.UntranslatableFunction("System.Int32 System.Xml.UniqueId::ToCharArray(System.Char[],System.Int32)");
System.Xml.UniqueId.prototype.TryGetGuid$0 = function (/* ref */ guid) {
	var array = JSIL.Array.New(System.Byte, 16);
	if (!this.TryGetGuid$1(array, 0)) {
		guid.value = System.Guid.Empty.MemberwiseClone();
		return false;
	}
	guid.value = JSIL.New(System.Guid, "_ctor$0", [array]);
	return true;
};
System.Xml.UniqueId.prototype.TryGetGuid$1 = JSIL.UntranslatableFunction("System.Boolean System.Xml.UniqueId::TryGetGuid(System.Byte[],System.Int32)");
System.Xml.UniqueId.prototype.toString = function () {
	if (this.s === null) {
		var charArrayLength = this.CharArrayLength;
		var array = JSIL.Array.New(System.Char, charArrayLength);
		this.ToCharArray(array, 0);
		this.s = JSIL.New(System.String, "_ctor$0", [array, 0, charArrayLength]);
	}
	return this.s;
};
System.Xml.UniqueId.op_Equality = function (id1, id2) {
	if (!(!System.Object.ReferenceEquals(id1, null) || !System.Object.ReferenceEquals(id2, null))) {
		return true;
	}
	if (!(!System.Object.ReferenceEquals(id1, null) && !System.Object.ReferenceEquals(id2, null))) {
		return false;
	}
	if (!(!id1.IsGuid || !id2.IsGuid)) {
		return ((id1.idLow === id2.idLow) && (id1.idHigh === id2.idHigh));
	}
	return id1.toString() == id2.toString();
};
System.Xml.UniqueId.op_Inequality = function (id1, id2) {
	return !System.Xml.UniqueId.op_Equality(id1, id2);
};
System.Xml.UniqueId.prototype.Equals = function (obj) {
	return System.Xml.UniqueId.op_Equality(this, JSIL.TryCast(obj, System.Xml.UniqueId));
};
System.Xml.UniqueId.prototype.GetHashCode = function () {
	if (this.IsGuid) {
		var num = (this.idLow ^ this.idHigh);
		return ((num >> 32) ^ num);
	}
	return this.toString().GetHashCode();
};
JSIL.OverloadedMethod(System.Xml.UniqueId.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Guid]], 
		["_ctor$2", [System.Array.Of(System.Byte)]], 
		["_ctor$3", [System.Array.Of(System.Byte), System.Int32]], 
		["_ctor$4", [System.String]], 
		["_ctor$5", [System.Array.Of(System.Char), System.Int32, System.Int32]]
	]);
JSIL.OverloadedMethod(System.Xml.UniqueId.prototype, "TryGetGuid", [
		["TryGetGuid$0", [JSIL.Reference.Of(System.Guid)]], 
		["TryGetGuid$1", [System.Array.Of(System.Byte), System.Int32]]
	]);
JSIL.MakeProperty(System.Xml.UniqueId.prototype, "CharArrayLength", 
	System.Xml.UniqueId.prototype.get_CharArrayLength, null);
JSIL.MakeProperty(System.Xml.UniqueId.prototype, "IsGuid", 
	System.Xml.UniqueId.prototype.get_IsGuid, null);
Object.defineProperty(System.Xml.UniqueId, "guidLength", {
		"value": 16}
);
Object.defineProperty(System.Xml.UniqueId, "uuidLength", {
		"value": 45}
);
Object.defineProperty(System.Xml.UniqueId, "val2char", {
		"value": "0123456789abcdef"}
);
System.Xml.UniqueId.prototype.idLow = 0;
System.Xml.UniqueId.prototype.idHigh = 0;
System.Xml.UniqueId.prototype.s = null;
System.Xml.UniqueId.char2val = null;
System.Xml.UniqueId._cctor = function () {
	System.Xml.UniqueId.char2val = JSIL.Array.New(System.Int16, [256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 0, 16, 32, 48, 64, 80, 96, 112, 128, 144, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 160, 176, 192, 208, 224, 240, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 10, 11, 12, 13, 14, 15, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256, 256]);
};

Object.defineProperty($asm09.System.Xml.ValueHandleLength, "Int8", {
		"value": 1}
);
Object.defineProperty($asm09.System.Xml.ValueHandleLength, "Int16", {
		"value": 2}
);
Object.defineProperty($asm09.System.Xml.ValueHandleLength, "Int32", {
		"value": 4}
);
Object.defineProperty($asm09.System.Xml.ValueHandleLength, "Int64", {
		"value": 8}
);
Object.defineProperty($asm09.System.Xml.ValueHandleLength, "UInt64", {
		"value": 8}
);
Object.defineProperty($asm09.System.Xml.ValueHandleLength, "Single", {
		"value": 4}
);
Object.defineProperty($asm09.System.Xml.ValueHandleLength, "Double", {
		"value": 8}
);
Object.defineProperty($asm09.System.Xml.ValueHandleLength, "Decimal", {
		"value": 16}
);
Object.defineProperty($asm09.System.Xml.ValueHandleLength, "DateTime", {
		"value": 8}
);
Object.defineProperty($asm09.System.Xml.ValueHandleLength, "TimeSpan", {
		"value": 8}
);
Object.defineProperty($asm09.System.Xml.ValueHandleLength, "Guid", {
		"value": 16}
);
Object.defineProperty($asm09.System.Xml.ValueHandleLength, "UniqueId", {
		"value": 16}
);

$asm09.System.Xml.ValueHandle.prototype._ctor = function (bufferReader) {
	System.Object.prototype._ctor.call(this);
	this.bufferReader = bufferReader;
	this.type = $asm09.System.Xml.ValueHandleType.Empty;
};
$asm09.System.Xml.ValueHandle.get_Base64Encoding = function () {
	if ($asm09.System.Xml.ValueHandle.base64Encoding === null) {
		$asm09.System.Xml.ValueHandle.base64Encoding = new $asm09.System.Text.Base64Encoding();
	}
	return $asm09.System.Xml.ValueHandle.base64Encoding;
};
$asm09.System.Xml.ValueHandle.prototype.SetConstantValue = function (constStringType) {
	this.type = $asm09.System.Xml.ValueHandleType.ConstString;
	this.offset = Math.floor(constStringType);
};
$asm09.System.Xml.ValueHandle.prototype.SetValue$0 = function (type) {
	this.type = type;
};
$asm09.System.Xml.ValueHandle.prototype.SetDictionaryValue = function (key) {
	this.SetValue$1($asm09.System.Xml.ValueHandleType.Dictionary, key, 0);
};
$asm09.System.Xml.ValueHandle.prototype.SetCharValue = function (ch) {
	this.SetValue$1($asm09.System.Xml.ValueHandleType.Char, ch, 0);
};
$asm09.System.Xml.ValueHandle.prototype.SetQNameValue = function (prefix, key) {
	this.SetValue$1($asm09.System.Xml.ValueHandleType.QName, key, prefix);
};
$asm09.System.Xml.ValueHandle.prototype.SetValue$1 = function (type, offset, length) {
	this.type = type;
	this.offset = offset;
	this.length = length;
};
$asm09.System.Xml.ValueHandle.prototype.IsWhitespace = function () {
	var valueHandleType = this.type;
	switch (Number(valueHandleType)) {
		case 1: 
		case 2: 
		case 3: 
		case 4: 
			return false;
		default: 
			switch (Number(valueHandleType)) {
				case 17: 
					return this.bufferReader.IsWhitespaceUTF8(this.offset, this.length);
				case 18: 
					return this.bufferReader.IsWhitespaceUTF8(this.offset, this.length);
				case 20: 
					return this.bufferReader.IsWhitespaceKey(this.offset);
				case 22: 
					var char = this.GetChar();
					return ((char <= 65535) && $asm09.System.Xml.XmlConverter.IsWhitespace$1(String.fromCharCode(char)));
				case 23: 
					return this.bufferReader.IsWhitespaceUnicode(this.offset, this.length);
				case 25: 
					return ($asm09.System.Xml.ValueHandle.constStrings[this.offset].length === 0);
			}
			return (this.length === 0);
	}
};
$asm09.System.Xml.ValueHandle.prototype.ToType = function () {
	switch (Number(this.type)) {
		case 0: 
		case 17: 
		case 18: 
		case 20: 
		case 22: 
		case 23: 
		case 24: 
		case 25: 
			return System.String;
		case 1: 
		case 2: 
			return System.Boolean;
		case 3: 
		case 4: 
		case 5: 
		case 6: 
		case 7: 
			return System.Int32;
		case 8: 
			return System.Int64;
		case 9: 
			return System.UInt64;
		case 10: 
			return System.Single;
		case 11: 
			return System.Double;
		case 12: 
			return System.Decimal;
		case 13: 
			return System.DateTime;
		case 14: 
			return System.TimeSpan;
		case 15: 
			return System.Guid;
		case 16: 
			return System.Xml.UniqueId;
		case 19: 
			return System.Array.Of(System.Byte);
		case 21: 
			return System.Array.Of(System.Object);
		default: 
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.InvalidOperationException, "_ctor$0", []));
	}
};
$asm09.System.Xml.ValueHandle.prototype.ToBoolean = function () {
	var valueHandleType = this.type;
	if (valueHandleType === $asm09.System.Xml.ValueHandleType.False) {
		return false;
	}
	if (valueHandleType === $asm09.System.Xml.ValueHandleType.True) {
		return true;
	}
	if (valueHandleType === $asm09.System.Xml.ValueHandleType.UTF8) {
		return $asm09.System.Xml.XmlConverter.ToBoolean$1(this.bufferReader.Buffer, this.offset, this.length);
	}
	if (valueHandleType === $asm09.System.Xml.ValueHandleType.Int8) {
		var int = this.GetInt8();
		if (int === 0) {
			return false;
		}
		if (int === 1) {
			return true;
		}
	}
	return $asm09.System.Xml.XmlConverter.ToBoolean$0(this.GetString());
};
$asm09.System.Xml.ValueHandle.prototype.ToInt = function () {
	var valueHandleType = this.type;
	if (valueHandleType === $asm09.System.Xml.ValueHandleType.Zero) {
		return 0;
	}
	if (valueHandleType === $asm09.System.Xml.ValueHandleType.One) {
		return 1;
	}
	if (valueHandleType === $asm09.System.Xml.ValueHandleType.Int8) {
		return this.GetInt8();
	}
	if (valueHandleType === $asm09.System.Xml.ValueHandleType.Int16) {
		return this.GetInt16();
	}
	if (valueHandleType === $asm09.System.Xml.ValueHandleType.Int32) {
		return this.GetInt32();
	}
	if (valueHandleType === $asm09.System.Xml.ValueHandleType.Int64) {
		var int = this.GetInt64();
		if (!((int < -2147483648) || (int > 2147483647))) {
			return int;
		}
	}
	if (valueHandleType === $asm09.System.Xml.ValueHandleType.UInt64) {
		var uInt = this.GetUInt64();
		if (uInt <= 2147483647) {
			return uInt;
		}
	}
	if (valueHandleType === $asm09.System.Xml.ValueHandleType.UTF8) {
		return $asm09.System.Xml.XmlConverter.ToInt32$1(this.bufferReader.Buffer, this.offset, this.length);
	}
	return $asm09.System.Xml.XmlConverter.ToInt32$0(this.GetString());
};
$asm09.System.Xml.ValueHandle.prototype.ToLong = function () {
	var valueHandleType = this.type;
	if (valueHandleType === $asm09.System.Xml.ValueHandleType.Zero) {
		return 0;
	}
	if (valueHandleType === $asm09.System.Xml.ValueHandleType.One) {
		return 1;
	}
	if (valueHandleType === $asm09.System.Xml.ValueHandleType.Int8) {
		return this.GetInt8();
	}
	if (valueHandleType === $asm09.System.Xml.ValueHandleType.Int16) {
		return this.GetInt16();
	}
	if (valueHandleType === $asm09.System.Xml.ValueHandleType.Int32) {
		return this.GetInt32();
	}
	if (valueHandleType === $asm09.System.Xml.ValueHandleType.Int64) {
		return this.GetInt64();
	}
	if (valueHandleType === $asm09.System.Xml.ValueHandleType.UInt64) {
		var uInt = this.GetUInt64();
		if (uInt <= 9223372036854775807) {
			return uInt;
		}
	}
	if (valueHandleType === $asm09.System.Xml.ValueHandleType.UTF8) {
		return $asm09.System.Xml.XmlConverter.ToInt64$1(this.bufferReader.Buffer, this.offset, this.length);
	}
	return $asm09.System.Xml.XmlConverter.ToInt64$0(this.GetString());
};
$asm09.System.Xml.ValueHandle.prototype.ToULong = function () {
	var valueHandleType = this.type;
	if (valueHandleType === $asm09.System.Xml.ValueHandleType.Zero) {
		return 0;
	}
	if (valueHandleType === $asm09.System.Xml.ValueHandleType.One) {
		return 1;
	}
	if (!((valueHandleType < $asm09.System.Xml.ValueHandleType.Int8) || (valueHandleType > $asm09.System.Xml.ValueHandleType.Int64))) {
		var num = this.ToLong();
		if (num >= 0) {
			return num;
		}
	}
	if (valueHandleType === $asm09.System.Xml.ValueHandleType.UInt64) {
		return this.GetUInt64();
	}
	if (valueHandleType === $asm09.System.Xml.ValueHandleType.UTF8) {
		return $asm09.System.Xml.XmlConverter.ToUInt64$1(this.bufferReader.Buffer, this.offset, this.length);
	}
	return $asm09.System.Xml.XmlConverter.ToUInt64$0(this.GetString());
};
$asm09.System.Xml.ValueHandle.prototype.ToSingle = function () {
	var valueHandleType = this.type;
	if (valueHandleType === $asm09.System.Xml.ValueHandleType.Single) {
		return this.GetSingle();
	}
	if (valueHandleType === $asm09.System.Xml.ValueHandleType.Double) {
		var double = this.GetDouble();
		if (!(!((double >= -3.4028234663852886E+38) && 
					(double <= 3.4028234663852886E+38)) && 
				!System.Double.IsInfinity(double) && !System.Double.IsNaN(double))) {
			return double;
		}
	}
	if (valueHandleType === $asm09.System.Xml.ValueHandleType.Zero) {
		return 0;
	}
	if (valueHandleType === $asm09.System.Xml.ValueHandleType.One) {
		return 1;
	}
	if (valueHandleType === $asm09.System.Xml.ValueHandleType.Int8) {
		return this.GetInt8();
	}
	if (valueHandleType === $asm09.System.Xml.ValueHandleType.Int16) {
		return this.GetInt16();
	}
	if (valueHandleType === $asm09.System.Xml.ValueHandleType.UTF8) {
		return $asm09.System.Xml.XmlConverter.ToSingle$1(this.bufferReader.Buffer, this.offset, this.length);
	}
	return $asm09.System.Xml.XmlConverter.ToSingle$0(this.GetString());
};
$asm09.System.Xml.ValueHandle.prototype.ToDouble = function () {
	var valueHandleType = this.type;
	if (valueHandleType === $asm09.System.Xml.ValueHandleType.Double) {
		return this.GetDouble();
	}
	if (valueHandleType === $asm09.System.Xml.ValueHandleType.Single) {
		return this.GetSingle();
	}
	if (valueHandleType === $asm09.System.Xml.ValueHandleType.Zero) {
		return 0;
	}
	if (valueHandleType === $asm09.System.Xml.ValueHandleType.One) {
		return 1;
	}
	if (valueHandleType === $asm09.System.Xml.ValueHandleType.Int8) {
		return this.GetInt8();
	}
	if (valueHandleType === $asm09.System.Xml.ValueHandleType.Int16) {
		return this.GetInt16();
	}
	if (valueHandleType === $asm09.System.Xml.ValueHandleType.Int32) {
		return this.GetInt32();
	}
	if (valueHandleType === $asm09.System.Xml.ValueHandleType.UTF8) {
		return $asm09.System.Xml.XmlConverter.ToDouble$1(this.bufferReader.Buffer, this.offset, this.length);
	}
	return $asm09.System.Xml.XmlConverter.ToDouble$0(this.GetString());
};
$asm09.System.Xml.ValueHandle.prototype.ToDecimal = function () {
	var valueHandleType = this.type;
	if (valueHandleType === $asm09.System.Xml.ValueHandleType.Decimal) {
		return this.GetDecimal();
	}
	if (valueHandleType === $asm09.System.Xml.ValueHandleType.Zero) {
		return 0;
	}
	if (valueHandleType === $asm09.System.Xml.ValueHandleType.One) {
		return 1;
	}
	if (!((valueHandleType < $asm09.System.Xml.ValueHandleType.Int8) || (valueHandleType > $asm09.System.Xml.ValueHandleType.Int64))) {
		return System.Decimal.op_Implicit$7(this.ToLong());
	}
	if (valueHandleType === $asm09.System.Xml.ValueHandleType.UInt64) {
		return System.Decimal.op_Implicit$8(this.GetUInt64());
	}
	if (valueHandleType === $asm09.System.Xml.ValueHandleType.UTF8) {
		return $asm09.System.Xml.XmlConverter.ToDecimal$1(this.bufferReader.Buffer, this.offset, this.length);
	}
	return $asm09.System.Xml.XmlConverter.ToDecimal$0(this.GetString());
};
$asm09.System.Xml.ValueHandle.prototype.ToDateTime = function () {
	if (this.type === $asm09.System.Xml.ValueHandleType.DateTime) {
		return $asm09.System.Xml.XmlConverter.ToDateTime$0(this.GetInt64());
	}
	if (this.type === $asm09.System.Xml.ValueHandleType.UTF8) {
		return $asm09.System.Xml.XmlConverter.ToDateTime$2(this.bufferReader.Buffer, this.offset, this.length);
	}
	return $asm09.System.Xml.XmlConverter.ToDateTime$1(this.GetString());
};
$asm09.System.Xml.ValueHandle.prototype.ToUniqueId = function () {
	if (this.type === $asm09.System.Xml.ValueHandleType.UniqueId) {
		return this.GetUniqueId();
	}
	if (this.type === $asm09.System.Xml.ValueHandleType.UTF8) {
		return $asm09.System.Xml.XmlConverter.ToUniqueId$1(this.bufferReader.Buffer, this.offset, this.length);
	}
	return $asm09.System.Xml.XmlConverter.ToUniqueId$0(this.GetString());
};
$asm09.System.Xml.ValueHandle.prototype.ToTimeSpan = function () {
	if (this.type === $asm09.System.Xml.ValueHandleType.TimeSpan) {
		return JSIL.New(System.TimeSpan, "_ctor$0", [this.GetInt64()]);
	}
	if (this.type === $asm09.System.Xml.ValueHandleType.UTF8) {
		return $asm09.System.Xml.XmlConverter.ToTimeSpan$1(this.bufferReader.Buffer, this.offset, this.length);
	}
	return $asm09.System.Xml.XmlConverter.ToTimeSpan$0(this.GetString());
};
$asm09.System.Xml.ValueHandle.prototype.ToGuid = function () {
	if (this.type === $asm09.System.Xml.ValueHandleType.Guid) {
		return this.GetGuid();
	}
	if (this.type === $asm09.System.Xml.ValueHandleType.UTF8) {
		return $asm09.System.Xml.XmlConverter.ToGuid$1(this.bufferReader.Buffer, this.offset, this.length);
	}
	return $asm09.System.Xml.XmlConverter.ToGuid$0(this.GetString());
};
$asm09.System.Xml.ValueHandle.prototype.toString = function () {
	return this.GetString();
};
$asm09.System.Xml.ValueHandle.prototype.ToByteArray = function () {
	if (this.type === $asm09.System.Xml.ValueHandleType.Base64) {
		var array = JSIL.Array.New(System.Byte, this.length);
		this.GetBase64(array, 0, this.length);
		return array;
	}
	if (!((this.type !== $asm09.System.Xml.ValueHandleType.UTF8) || (this.length % 4))) {
		try {
			var num = (Math.floor(this.length / 4) * 3);
			if (!((this.length <= 0) || (this.bufferReader.Buffer[((this.offset + this.length) - 1)] !== 61))) {
				--num;
				if (this.bufferReader.Buffer[((this.offset + this.length) - 2)] === 61) {
					--num;
				}
			}
			var array2 = JSIL.Array.New(System.Byte, num);
			var bytes = $asm09.System.Xml.ValueHandle.Base64Encoding.GetBytes$1(
				this.bufferReader.Buffer, 
				this.offset, 
				this.length, 
				array2, 
				0
			);
			if (bytes !== array2.length) {
				var array3 = JSIL.Array.New(System.Byte, bytes);
				System.Buffer.BlockCopy(
					array2, 
					0, 
					array3, 
					0, 
					bytes
				);
				array2 = array3;
			}
			var result = array2;
			return result;
		} catch ($exception) {
			if (JSIL.CheckType($exception, System.FormatException)) {
			} else {
				throw $exception;
			}
		}
	}
	try {
		result = $asm09.System.Xml.ValueHandle.Base64Encoding.GetBytes$3($asm09.System.Xml.XmlConverter.StripWhitespace(this.GetString()));
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.FormatException)) {
			var formatException = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Xml.XmlException, "_ctor$2", [formatException.Message, formatException.InnerException]));
		} else {
			throw $exception;
		}
	}
	return result;
};
$asm09.System.Xml.ValueHandle.prototype.GetString = function () {
	var valueHandleType = this.type;
	if (valueHandleType === $asm09.System.Xml.ValueHandleType.UTF8) {
		return this.GetCharsText();
	}
	switch (Number(valueHandleType)) {
		case 0: 
			return System.String.Empty;
		case 1: 
			return "true";
		case 2: 
			return "false";
		case 3: 
			return "0";
		case 4: 
			return "1";
		case 5: 
		case 6: 
		case 7: 
			return $asm09.System.Xml.XmlConverter.ToString$2(this.ToInt());
		case 8: 
			return $asm09.System.Xml.XmlConverter.ToString$3(this.GetInt64());
		case 9: 
			return $asm09.System.Xml.XmlConverter.ToString$10(this.GetUInt64());
		case 10: 
			return $asm09.System.Xml.XmlConverter.ToString$4(this.GetSingle());
		case 11: 
			return $asm09.System.Xml.XmlConverter.ToString$5(this.GetDouble());
		case 12: 
			return $asm09.System.Xml.XmlConverter.ToString$6(this.GetDecimal().MemberwiseClone());
		case 13: 
			return $asm09.System.Xml.XmlConverter.ToString$11(this.ToDateTime().MemberwiseClone());
		case 14: 
			return $asm09.System.Xml.XmlConverter.ToString$7(this.ToTimeSpan().MemberwiseClone());
		case 15: 
			return $asm09.System.Xml.XmlConverter.ToString$9(this.ToGuid().MemberwiseClone());
		case 16: 
			return $asm09.System.Xml.XmlConverter.ToString$8(this.ToUniqueId());
		case 17: 
			return this.GetCharsText();
		case 18: 
			return this.GetEscapedCharsText();
		case 19: 
			var array = this.ToByteArray();
			return $asm09.System.Xml.ValueHandle.Base64Encoding.GetString$1(array, 0, array.length);
		case 20: 
			return this.GetDictionaryString().Value;
		case 21: 
			return $asm09.System.Xml.XmlConverter.ToString$13(this.ToList());
		case 22: 
			return this.GetCharText();
		case 23: 
			return this.GetUnicodeCharsText();
		case 24: 
			return this.GetQNameDictionaryText();
		case 25: 
			return $asm09.System.Xml.ValueHandle.constStrings[this.offset];
		default: 
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.InvalidOperationException, "_ctor$0", []));
	}
};
$asm09.System.Xml.ValueHandle.prototype.Equals2 = function (str, checkLower) {
	if (this.type !== $asm09.System.Xml.ValueHandleType.UTF8) {
		return this.GetString() == str;
	}
	if (this.length !== str.length) {
		return false;
	}
	var buffer = this.bufferReader.Buffer;
__loop0__: 
	for (var i = 0; i < this.length; ++i) {
		var b = buffer[(i + this.offset)];
		if (!((String.fromCharCode(b) === (str[i])) || (checkLower && 
					(System.Char.ToLower$0(String.fromCharCode(b), System.Globalization.CultureInfo.InvariantCulture) === (str[i]))))) {
			return false;
		}
	}
	return true;
};
$asm09.System.Xml.ValueHandle.prototype.ToList = function () {
	return this.bufferReader.GetList(this.offset, this.length);
};
$asm09.System.Xml.ValueHandle.prototype.ToObject = function () {
	switch (Number(this.type)) {
		case 0: 
		case 17: 
		case 18: 
		case 20: 
		case 22: 
		case 23: 
		case 25: 
			return this.toString();
		case 1: 
		case 2: 
			return this.ToBoolean();
		case 3: 
		case 4: 
		case 5: 
		case 6: 
		case 7: 
			return this.ToInt();
		case 8: 
			return this.ToLong();
		case 9: 
			return this.GetUInt64();
		case 10: 
			return this.ToSingle();
		case 11: 
			return this.ToDouble();
		case 12: 
			return this.ToDecimal();
		case 13: 
			return this.ToDateTime();
		case 14: 
			return this.ToTimeSpan();
		case 15: 
			return this.ToGuid();
		case 16: 
			return this.ToUniqueId();
		case 19: 
			return this.ToByteArray();
		case 21: 
			return this.ToList();
	}
	throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.InvalidOperationException, "_ctor$0", []));
};
$asm09.System.Xml.ValueHandle.prototype.TryReadBase64 = function (buffer, offset, count, /* ref */ actual) {
	if (this.type === $asm09.System.Xml.ValueHandleType.Base64) {
		actual.value = System.Math.Min(this.length, count);
		this.GetBase64(buffer, offset, actual.value);
		this.offset += actual.value;
		this.length -= actual.value;
		return true;
	}
	if (!((this.type !== $asm09.System.Xml.ValueHandleType.UTF8) || 
			(count < 3) || (this.length % 4))) {
		try {
			var num = System.Math.Min((Math.floor(count / 3) * 4), this.length);
			actual.value = $asm09.System.Xml.ValueHandle.Base64Encoding.GetBytes$1(
				this.bufferReader.Buffer, 
				this.offset, 
				num, 
				buffer, 
				offset
			);
			this.offset += num;
			this.length -= num;
			return true;
		} catch ($exception) {
			if (JSIL.CheckType($exception, System.FormatException)) {
			} else {
				throw $exception;
			}
		}
	}
	actual.value = 0;
	return false;
};
$asm09.System.Xml.ValueHandle.prototype.TryReadChars = function (chars, offset, count, /* ref */ actual) {
	if (this.type === $asm09.System.Xml.ValueHandleType.Unicode) {
		return this.TryReadUnicodeChars(chars, offset, count, /* ref */ actual);
	}
	if (this.type !== $asm09.System.Xml.ValueHandleType.UTF8) {
		actual.value = 0;
		return false;
	}
	var num = offset;
	var num2 = count;
	var buffer = this.bufferReader.Buffer;
	var num3 = this.offset;
	var num4 = this.length;
__loop0__: 
	while (true) {
		if ((num2 > 0) && (num4 > 0)) {
			var b = buffer[num3];
			if (b < 128) {
				chars[num] = String.fromCharCode(b);
				++num3;
				--num4;
				++num;
				--num2;
				continue __loop0__;
			}
		}
		if ((num2 === 0) || (num4 === 0)) {
			break __loop0__;
		}
		var uTF8Encoding = new System.Text.UTF8Encoding(false, true);
		try {
			if (!((num2 < uTF8Encoding.GetMaxCharCount(num4)) && (num2 < uTF8Encoding.GetCharCount$1(buffer, num3, num4)))) {
				var chars2 = uTF8Encoding.GetChars$2(
					buffer, 
					num3, 
					num4, 
					chars, 
					num
				);
				var num5 = num4;
			} else {
				var decoder = uTF8Encoding.GetDecoder();
				num5 = System.Math.Min(num2, num4);
				chars2 = decoder.GetChars$0(
					buffer, 
					num3, 
					num5, 
					chars, 
					num
				);
			__loop1__: 
				while (chars2 === 0) {
					chars2 = decoder.GetChars$0(
						buffer, 
						(num3 + num5), 
						1, 
						chars, 
						num
					);
					++num5;
				}
				num5 = uTF8Encoding.GetByteCount$2(chars, num, chars2);
			}
		} catch ($exception) {
			if (JSIL.CheckType($exception, System.FormatException)) {
				var arg_108_0 = $exception;
				throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateEncodingException$0(buffer, num3, num4, arg_108_0));
			} else {
				throw $exception;
			}
		}
		num3 += num5;
		num4 -= num5;
		num += chars2;
		num2 -= chars2;
	}
	this.offset = num3;
	this.length = num4;
	actual.value = (count - num2);
	return true;
};
$asm09.System.Xml.ValueHandle.prototype.TryReadUnicodeChars = function (chars, offset, count, /* ref */ actual) {
	var num = System.Math.Min(count, Math.floor(this.length / 2));
__loop0__: 
	for (var i = 0; i < num; ++i) {
		chars[(offset + i)] = String.fromCharCode(this.bufferReader.GetInt16((this.offset + (i * 2))));
	}
	this.offset += (num * 2);
	this.length -= (num * 2);
	actual.value = num;
	return true;
};
$asm09.System.Xml.ValueHandle.prototype.TryGetDictionaryString = function (/* ref */ value) {
	if (this.type === $asm09.System.Xml.ValueHandleType.Dictionary) {
		value.value = this.GetDictionaryString();
		return true;
	}
	value.value = null;
	return false;
};
$asm09.System.Xml.ValueHandle.prototype.TryGetByteArrayLength = function (/* ref */ length) {
	if (this.type === $asm09.System.Xml.ValueHandleType.Base64) {
		length.value = this.length;
		return true;
	}
	length.value = 0;
	return false;
};
$asm09.System.Xml.ValueHandle.prototype.GetCharsText = function () {
	if (!((this.length !== 1) || (this.bufferReader.GetByte$1(this.offset) !== 49))) {
		return "1";
	}
	return this.bufferReader.GetString$0(this.offset, this.length);
};
$asm09.System.Xml.ValueHandle.prototype.GetUnicodeCharsText = function () {
	return this.bufferReader.GetUnicodeString(this.offset, this.length);
};
$asm09.System.Xml.ValueHandle.prototype.GetEscapedCharsText = function () {
	return this.bufferReader.GetEscapedString$0(this.offset, this.length);
};
$asm09.System.Xml.ValueHandle.prototype.GetCharText = function () {
	var surrogateChar = new $asm09.System.Text.SurrogateChar();
	var char = this.GetChar();
	if (char > 65535) {
		surrogateChar._ctor$0(char);
		return JSIL.New(System.String, "_ctor$0", [JSIL.Array.New(System.Char, [surrogateChar.HighChar, surrogateChar.LowChar]), 0, 2]);
	}
	return String.fromCharCode(char).toString();
};
$asm09.System.Xml.ValueHandle.prototype.GetChar = function () {
	return this.offset;
};
$asm09.System.Xml.ValueHandle.prototype.GetInt8 = function () {
	return this.bufferReader.GetInt8(this.offset);
};
$asm09.System.Xml.ValueHandle.prototype.GetInt16 = function () {
	return this.bufferReader.GetInt16(this.offset);
};
$asm09.System.Xml.ValueHandle.prototype.GetInt32 = function () {
	return this.bufferReader.GetInt32(this.offset);
};
$asm09.System.Xml.ValueHandle.prototype.GetInt64 = function () {
	return this.bufferReader.GetInt64(this.offset);
};
$asm09.System.Xml.ValueHandle.prototype.GetUInt64 = function () {
	return this.bufferReader.GetUInt64(this.offset);
};
$asm09.System.Xml.ValueHandle.prototype.GetSingle = function () {
	return this.bufferReader.GetSingle(this.offset);
};
$asm09.System.Xml.ValueHandle.prototype.GetDouble = function () {
	return this.bufferReader.GetDouble(this.offset);
};
$asm09.System.Xml.ValueHandle.prototype.GetDecimal = function () {
	return this.bufferReader.GetDecimal(this.offset);
};
$asm09.System.Xml.ValueHandle.prototype.GetUniqueId = function () {
	return this.bufferReader.GetUniqueId(this.offset);
};
$asm09.System.Xml.ValueHandle.prototype.GetGuid = function () {
	return this.bufferReader.GetGuid(this.offset);
};
$asm09.System.Xml.ValueHandle.prototype.GetBase64 = function (buffer, offset, count) {
	this.bufferReader.GetBase64(this.offset, buffer, offset, count);
};
$asm09.System.Xml.ValueHandle.prototype.GetDictionaryString = function () {
	return this.bufferReader.GetDictionaryString(this.offset);
};
$asm09.System.Xml.ValueHandle.prototype.GetQNameDictionaryText = function () {
	return JSIL.ConcatString($asm09.System.Xml.PrefixHandle.GetString$0($asm09.System.Xml.PrefixHandle.GetAlphaPrefix(this.length)), ":", this.bufferReader.GetDictionaryString(this.offset));
};
JSIL.OverloadedMethod($asm09.System.Xml.ValueHandle.prototype, "SetValue", [
		["SetValue$0", [$asm09.System.Xml.ValueHandleType]], 
		["SetValue$1", [$asm09.System.Xml.ValueHandleType, System.Int32, System.Int32]]
	]);
JSIL.MakeProperty($asm09.System.Xml.ValueHandle, "Base64Encoding", 
	$asm09.System.Xml.ValueHandle.get_Base64Encoding, null);
$asm09.System.Xml.ValueHandle.prototype.bufferReader = null;
$asm09.System.Xml.ValueHandle.prototype.type = 0;
$asm09.System.Xml.ValueHandle.prototype.offset = 0;
$asm09.System.Xml.ValueHandle.prototype.length = 0;
$asm09.System.Xml.ValueHandle.base64Encoding = null;
$asm09.System.Xml.ValueHandle.constStrings = null;
$asm09.System.Xml.ValueHandle._cctor = function () {
	$asm09.System.Xml.ValueHandle.constStrings = JSIL.Array.New(System.String, ["string", "number", "array", "object", "boolean", "null"]);
};

System.Xml.XmlDictionaryReader.CreateDictionaryReader = function (reader) {
	if (reader === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull("reader");
	}
	var xmlDictionaryReader = JSIL.TryCast(reader, System.Xml.XmlDictionaryReader);
	if (xmlDictionaryReader === null) {
		xmlDictionaryReader = new $asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader(reader, null);
	}
	return xmlDictionaryReader;
};
System.Xml.XmlDictionaryReader.CreateBinaryReader$0 = function (buffer, quotas) {
	if (buffer === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull("buffer");
	}
	return System.Xml.XmlDictionaryReader.CreateBinaryReader$1(buffer, 0, buffer.length, quotas);
};
System.Xml.XmlDictionaryReader.CreateBinaryReader$1 = function (buffer, offset, count, quotas) {
	return System.Xml.XmlDictionaryReader.CreateBinaryReader$2(
		buffer, 
		offset, 
		count, 
		null, 
		quotas
	);
};
System.Xml.XmlDictionaryReader.CreateBinaryReader$2 = function (buffer, offset, count, dictionary, quotas) {
	return System.Xml.XmlDictionaryReader.CreateBinaryReader$3(
		buffer, 
		offset, 
		count, 
		dictionary, 
		quotas, 
		null
	);
};
System.Xml.XmlDictionaryReader.CreateBinaryReader$3 = function (buffer, offset, count, dictionary, quotas, session) {
	var xmlBinaryReader = new $asm09.System.Xml.XmlBinaryReader();
	xmlBinaryReader.SetInput$0(
		buffer, 
		offset, 
		count, 
		dictionary, 
		quotas, 
		session
	);
	return xmlBinaryReader;
};
System.Xml.XmlDictionaryReader.CreateBinaryReader$4 = function (stream, quotas) {
	return System.Xml.XmlDictionaryReader.CreateBinaryReader$5(stream, null, quotas);
};
System.Xml.XmlDictionaryReader.CreateBinaryReader$5 = function (stream, dictionary, quotas) {
	return System.Xml.XmlDictionaryReader.CreateBinaryReader$6(stream, dictionary, quotas, null);
};
System.Xml.XmlDictionaryReader.CreateBinaryReader$6 = function (stream, dictionary, quotas, session) {
	var xmlBinaryReader = new $asm09.System.Xml.XmlBinaryReader();
	xmlBinaryReader.SetInput$1(stream, dictionary, quotas, session);
	return xmlBinaryReader;
};
System.Xml.XmlDictionaryReader.CreateTextReader$0 = function (buffer, quotas) {
	if (buffer === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull("buffer");
	}
	return System.Xml.XmlDictionaryReader.CreateTextReader$1(buffer, 0, buffer.length, quotas);
};
System.Xml.XmlDictionaryReader.CreateTextReader$1 = function (buffer, offset, count, quotas) {
	var stream = JSIL.New(System.IO.MemoryStream, "_ctor$4", [buffer, offset, count]);
	return System.Xml.XmlDictionaryReader.CreateTextReader$2(stream, quotas);
};
System.Xml.XmlDictionaryReader.CreateTextReader$2 = function (stream, quotas) {
	var reader = System.Xml.XmlReader.Create$4(stream, new System.Xml.XmlReaderSettings().__Initialize__({
				CheckCharacters: false}
		));
	return System.Xml.XmlDictionaryReader.CreateDictionaryReader(reader);
};
System.Xml.XmlDictionaryReader.prototype.get_CanCanonicalize = function () {
	return false;
};
System.Xml.XmlDictionaryReader.prototype.get_Quotas = function () {
	return System.Xml.XmlDictionaryReaderQuotas.Max;
};
System.Xml.XmlDictionaryReader.prototype.StartCanonicalization = function (stream, includeComments, inclusivePrefixes) {
	throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.NotSupportedException, "_ctor$0", []));
};
System.Xml.XmlDictionaryReader.prototype.EndCanonicalization = function () {
	throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.NotSupportedException, "_ctor$0", []));
};
System.Xml.XmlDictionaryReader.prototype.MoveToStartElement$0 = function () {
	if (!this.IsStartElement$0()) {
		$asm09.System.Xml.XmlExceptionHelper.ThrowStartElementExpected$0(this);
	}
};
System.Xml.XmlDictionaryReader.prototype.MoveToStartElement$1 = function (name) {
	if (!this.IsStartElement$1(name)) {
		$asm09.System.Xml.XmlExceptionHelper.ThrowStartElementExpected$1(this, name);
	}
};
System.Xml.XmlDictionaryReader.prototype.MoveToStartElement$2 = function (localName, namespaceUri) {
	if (!this.IsStartElement$2(localName, namespaceUri)) {
		$asm09.System.Xml.XmlExceptionHelper.ThrowStartElementExpected$2(this, localName, namespaceUri);
	}
};
System.Xml.XmlDictionaryReader.prototype.MoveToStartElement$3 = function (localName, namespaceUri) {
	if (!this.IsStartElement(localName, namespaceUri)) {
		$asm09.System.Xml.XmlExceptionHelper.ThrowStartElementExpected$3(this, localName, namespaceUri);
	}
};
System.Xml.XmlDictionaryReader.prototype.IsLocalName$0 = function (localName) {
	return this.LocalName == localName;
};
System.Xml.XmlDictionaryReader.prototype.IsLocalName$1 = function (localName) {
	if (localName === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull("localName");
	}
	return this.IsLocalName$0(localName.Value);
};
System.Xml.XmlDictionaryReader.prototype.IsNamespaceUri$0 = function (namespaceUri) {
	if (namespaceUri === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull("namespaceUri");
	}
	return this.NamespaceURI == namespaceUri;
};
System.Xml.XmlDictionaryReader.prototype.IsNamespaceUri$1 = function (namespaceUri) {
	if (namespaceUri === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull("namespaceUri");
	}
	return this.IsNamespaceUri$0(namespaceUri.Value);
};
System.Xml.XmlDictionaryReader.prototype.ReadFullStartElement$0 = function () {
	this.MoveToStartElement$0();
	if (this.IsEmptyElement) {
		$asm09.System.Xml.XmlExceptionHelper.ThrowFullStartElementExpected$0(this);
	}
	this.Read();
};
System.Xml.XmlDictionaryReader.prototype.ReadFullStartElement$1 = function (name) {
	this.MoveToStartElement$1(name);
	if (this.IsEmptyElement) {
		$asm09.System.Xml.XmlExceptionHelper.ThrowFullStartElementExpected$1(this, name);
	}
	this.Read();
};
System.Xml.XmlDictionaryReader.prototype.ReadFullStartElement$2 = function (localName, namespaceUri) {
	this.MoveToStartElement$2(localName, namespaceUri);
	if (this.IsEmptyElement) {
		$asm09.System.Xml.XmlExceptionHelper.ThrowFullStartElementExpected$2(this, localName, namespaceUri);
	}
	this.Read();
};
System.Xml.XmlDictionaryReader.prototype.ReadFullStartElement$3 = function (localName, namespaceUri) {
	this.MoveToStartElement$3(localName, namespaceUri);
	if (this.IsEmptyElement) {
		$asm09.System.Xml.XmlExceptionHelper.ThrowFullStartElementExpected$3(this, localName, namespaceUri);
	}
	this.Read();
};
System.Xml.XmlDictionaryReader.prototype.ReadStartElement = function (localName, namespaceUri) {
	this.MoveToStartElement$3(localName, namespaceUri);
	this.Read();
};
System.Xml.XmlDictionaryReader.prototype.IsStartElement = function (localName, namespaceUri) {
	return this.IsStartElement$2(System.Xml.XmlDictionaryString.GetString(localName), System.Xml.XmlDictionaryString.GetString(namespaceUri));
};
System.Xml.XmlDictionaryReader.prototype.IndexOfLocalName$0 = function (localNames, namespaceUri) {
	if (localNames === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull("localNames");
	}
	if (namespaceUri === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull("namespaceUri");
	}
	if (this.NamespaceURI == namespaceUri) {
		var localName = this.LocalName;
	__loop0__: 
		for (var i = 0; i < localNames.length; ++i) {
			var text = localNames[i];
			if (text === null) {
				throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(System.String.Format(System.Globalization.CultureInfo.InvariantCulture, "localNames[{0}]", [i]));
			}
			if (localName == text) {
				return i;
			}
		}
	}
	return -1;
};
System.Xml.XmlDictionaryReader.prototype.IndexOfLocalName$1 = function (localNames, namespaceUri) {
	if (localNames === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull("localNames");
	}
	if (namespaceUri === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull("namespaceUri");
	}
	if (this.NamespaceURI == namespaceUri.Value) {
		var localName = this.LocalName;
	__loop0__: 
		for (var i = 0; i < localNames.length; ++i) {
			var xmlDictionaryString = localNames[i];
			if (xmlDictionaryString === null) {
				throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(System.String.Format(System.Globalization.CultureInfo.InvariantCulture, "localNames[{0}]", [i]));
			}
			if (localName == xmlDictionaryString.Value) {
				return i;
			}
		}
	}
	return -1;
};
System.Xml.XmlDictionaryReader.prototype.GetAttribute = function (localName, namespaceUri) {
	return this.GetAttribute$1(System.Xml.XmlDictionaryString.GetString(localName), System.Xml.XmlDictionaryString.GetString(namespaceUri));
};
System.Xml.XmlDictionaryReader.prototype.TryGetBase64ContentLength = function (/* ref */ length) {
	length.value = 0;
	return false;
};
System.Xml.XmlDictionaryReader.prototype.ReadValueAsBase64 = function (buffer, offset, count) {
	throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.NotSupportedException, "_ctor$0", []));
};
System.Xml.XmlDictionaryReader.prototype.ReadContentAsBase64$0 = function () {
	return this.ReadContentAsBase64$1(this.Quotas.MaxArrayLength, 65535);
};
System.Xml.XmlDictionaryReader.prototype.ReadContentAsBase64$1 = function (maxByteArrayContentLength, maxInitialCount) {
	var num = new JSIL.Variable(0);
	if (!(!this.TryGetBase64ContentLength(/* ref */ num) || (num.value > maxInitialCount))) {
		var array = JSIL.Array.New(System.Byte, num.value);
	__loop0__: 
		for (var i = 0; i < num.value; i += num2) {
			var num2 = this.ReadContentAsBase64(array, i, (num.value - i));
			if (num2 === 0) {
				$asm09.System.Xml.XmlExceptionHelper.ThrowBase64DataExpected(this);
			}
		}
		return array;
	}
	return this.ReadContentAsBytes(true, maxByteArrayContentLength);
};
System.Xml.XmlDictionaryReader.prototype.ReadContentAsString$0 = function () {
	return this.ReadContentAsString$1(this.Quotas.MaxStringContentLength);
};
System.Xml.XmlDictionaryReader.prototype.ReadContentAsString$1 = function (maxStringContentLength) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				var stringBuilder = null;
				var text = System.String.Empty;
				var flag = false;
			__loop0__: 
				while (true) {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								switch (Number(this.NodeType)) {
									case 1: 
									case 6: 
									case 9: 
									case 10: 
									case 11: 
									case 12: 
									case 15: 
										__label1__ = "IL_9D";
										continue __step1__;
									case 2: 
										text = this.Value;
										break;
									case 3: 
									case 4: 
									case 13: 
									case 14: 
										var value = this.Value;
										if (text.length === 0) {
											text = value;
										} else {
											if (stringBuilder === null) {
												stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$2", [text]);
											}
											stringBuilder.Append$2(value);
										}
										break;
									case 5: 
										if (!this.CanResolveEntity) {
											__label1__ = "IL_9D";
											continue __step1__;
										}
										this.ResolveEntity();
										break;
									case 7: 
									case 8: 
									case 16: 
										break;
									default: 
										__label1__ = "IL_9D";
										continue __step1__;
								}
								__label1__ = "IL_9F";
								continue __step1__;
								break;
							case "IL_9F":
								if (flag) {
									break __loop0__;
								}
								if (this.AttributeCount !== 0) {
									this.ReadAttributeValue();
									continue __loop0__;
								}
								this.Read();
								continue __loop0__;
								__label1__ = "IL_9D";
								continue __step1__;
								break;
							case "IL_9D":
								flag = true;
								__label1__ = "IL_9F";
								continue __step1__;
								break __step1__;
						}
					}
				}
				if (stringBuilder !== null) {
					text = stringBuilder.toString();
				}
				return text;
				break __step0__;
		}
	}
};
System.Xml.XmlDictionaryReader.prototype.ReadContentAsBinHex$0 = function () {
	return this.ReadContentAsBinHex$1(this.Quotas.MaxArrayLength);
};
System.Xml.XmlDictionaryReader.prototype.ReadContentAsBinHex$1 = function (maxByteArrayContentLength) {
	return this.ReadContentAsBytes(false, maxByteArrayContentLength);
};
System.Xml.XmlDictionaryReader.prototype.ReadContentAsBytes = function (base64, maxByteArrayContentLength) {
	var array = JSIL.Array.New(System.Array.Of(System.Byte), 32);
	var num = 384;
	var num2 = 0;
	var num3 = 0;
__loop0__: 
	while (true) {
		var array2 = JSIL.Array.New(System.Byte, num);
		array[num2++] = array2;
	__loop1__: 
		for (var i = 0; i < array2.length; i += num4) {
			if (base64) {
				var num4 = this.ReadContentAsBase64(array2, i, (array2.length - i));
			} else {
				num4 = this.ReadContentAsBinHex(array2, i, (array2.length - i));
			}
			if (num4 === 0) {
				break __loop1__;
			}
		}
		num3 += i;
		if (i < array2.length) {
			break __loop0__;
		}
		num *= 2;
	}
	array2 = JSIL.Array.New(System.Byte, num3);
	var num5 = 0;
__loop2__: 
	for (var j = 0; j < (num2 - 1); ++j) {
		System.Buffer.BlockCopy(
			array[j], 
			0, 
			array2, 
			num5, 
			array[j].length
		);
		num5 += array[j].length;
	}
	System.Buffer.BlockCopy(
		array[(num2 - 1)], 
		0, 
		array2, 
		num5, 
		(num3 - num5)
	);
	return array2;
};
System.Xml.XmlDictionaryReader.prototype.IsTextNode = function (nodeType) {
	return ((nodeType === System.Xml.XmlNodeType.Text) || 
		(nodeType === System.Xml.XmlNodeType.Whitespace) || 
		(nodeType === System.Xml.XmlNodeType.SignificantWhitespace) || 
		(nodeType === System.Xml.XmlNodeType.CDATA) || (nodeType === System.Xml.XmlNodeType.Attribute));
};
System.Xml.XmlDictionaryReader.prototype.ReadContentAsChars = function (chars, offset, count) {
	var num = 0;
__loop0__: 
	while (true) {
		var nodeType = this.NodeType;
		if ((nodeType === System.Xml.XmlNodeType.Element) || (nodeType === System.Xml.XmlNodeType.EndElement)) {
			break __loop0__;
		}
		if (this.IsTextNode(nodeType)) {
			num = this.ReadValueChunk(chars, offset, count);
			if ((num > 0) || (nodeType === System.Xml.XmlNodeType.Attribute)) {
				break __loop0__;
			}
			if (!this.Read()) {
				break __loop0__;
			}
		} else if (!this.Read()) {
			break __loop0__;
		}
	}
	return num;
};
System.Xml.XmlDictionaryReader.prototype.ReadContentAs = function (type, namespaceResolver) {
	if (type === System.Array.Of(System.Guid)) {
		var array = JSIL.Cast(this.ReadContentAs(System.Array.Of(System.String), namespaceResolver), System.Array.Of(System.String));
		var array2 = JSIL.Array.New(System.Guid, array.length);
	__loop0__: 
		for (var i = 0; i < array.length; ++i) {
			array2[i] = $asm09.System.Xml.XmlConverter.ToGuid$0(array[i]).MemberwiseClone();
		}
		return array2;
	}
	if (type === System.Array.Of(System.Xml.UniqueId)) {
		var array3 = JSIL.Cast(this.ReadContentAs(System.Array.Of(System.String), namespaceResolver), System.Array.Of(System.String));
		var array4 = JSIL.Array.New(System.Xml.UniqueId, array3.length);
	__loop1__: 
		for (var j = 0; j < array3.length; ++j) {
			array4[j] = $asm09.System.Xml.XmlConverter.ToUniqueId$0(array3[j]);
		}
		return array4;
	}
	return System.Xml.XmlReader.prototype.ReadContentAs.call(this, type, namespaceResolver);
};
System.Xml.XmlDictionaryReader.prototype.ReadContentAsString$2 = function (strings, /* ref */ index) {
	if (strings === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull("strings");
	}
	var text = this.ReadContentAsString();
	index.value = -1;
__loop0__: 
	for (var i = 0; i < strings.length; ++i) {
		var text2 = strings[i];
		if (text2 === null) {
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(System.String.Format(System.Globalization.CultureInfo.InvariantCulture, "strings[{0}]", [i]));
		}
		if (text2 == text) {
			index.value = i;
			return text2;
		}
	}
	return text;
};
System.Xml.XmlDictionaryReader.prototype.ReadContentAsString$3 = function (strings, /* ref */ index) {
	if (strings === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull("strings");
	}
	var text = this.ReadContentAsString();
	index.value = -1;
__loop0__: 
	for (var i = 0; i < strings.length; ++i) {
		var xmlDictionaryString = strings[i];
		if (xmlDictionaryString === null) {
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(System.String.Format(System.Globalization.CultureInfo.InvariantCulture, "strings[{0}]", [i]));
		}
		if (xmlDictionaryString.Value == text) {
			index.value = i;
			return xmlDictionaryString.Value;
		}
	}
	return text;
};
System.Xml.XmlDictionaryReader.prototype.ReadContentAsDecimal = function () {
	return $asm09.System.Xml.XmlConverter.ToDecimal$0(this.ReadContentAsString());
};
System.Xml.XmlDictionaryReader.prototype.ReadContentAsFloat = function () {
	return $asm09.System.Xml.XmlConverter.ToSingle$0(this.ReadContentAsString());
};
System.Xml.XmlDictionaryReader.prototype.ReadContentAsUniqueId = function () {
	return $asm09.System.Xml.XmlConverter.ToUniqueId$0(this.ReadContentAsString());
};
System.Xml.XmlDictionaryReader.prototype.ReadContentAsGuid = function () {
	return $asm09.System.Xml.XmlConverter.ToGuid$0(this.ReadContentAsString());
};
System.Xml.XmlDictionaryReader.prototype.ReadContentAsTimeSpan = function () {
	return $asm09.System.Xml.XmlConverter.ToTimeSpan$0(this.ReadContentAsString());
};
System.Xml.XmlDictionaryReader.prototype.ReadContentAsQualifiedName = function (/* ref */ localName, /* ref */ namespaceUri) {
	var prefix = new JSIL.Variable(null);
	$asm09.System.Xml.XmlConverter.ToQualifiedName(this.ReadContentAsString(), /* ref */ prefix, /* ref */ localName);
	namespaceUri.value = this.LookupNamespace(prefix.value);
	if (namespaceUri.value === null) {
		$asm09.System.Xml.XmlExceptionHelper.ThrowUndefinedPrefix(this, prefix.value);
	}
};
System.Xml.XmlDictionaryReader.prototype.ReadElementContentAsString = function () {
	var flag = (this.IsStartElement$0() && 
		this.IsEmptyElement);
	if (flag) {
		this.Read();
		var result = System.String.Empty;
	} else {
		this.ReadStartElement$0();
		result = this.ReadContentAsString();
		this.ReadEndElement();
	}
	return result;
};
System.Xml.XmlDictionaryReader.prototype.ReadElementContentAsBoolean = function () {
	var flag = (this.IsStartElement$0() && 
		this.IsEmptyElement);
	if (flag) {
		this.Read();
		var result = $asm09.System.Xml.XmlConverter.ToBoolean$0(System.String.Empty);
	} else {
		this.ReadStartElement$0();
		result = this.ReadContentAsBoolean();
		this.ReadEndElement();
	}
	return result;
};
System.Xml.XmlDictionaryReader.prototype.ReadElementContentAsInt = function () {
	var flag = (this.IsStartElement$0() && 
		this.IsEmptyElement);
	if (flag) {
		this.Read();
		var result = $asm09.System.Xml.XmlConverter.ToInt32$0(System.String.Empty);
	} else {
		this.ReadStartElement$0();
		result = this.ReadContentAsInt();
		this.ReadEndElement();
	}
	return result;
};
System.Xml.XmlDictionaryReader.prototype.ReadElementContentAsLong = function () {
	var flag = (this.IsStartElement$0() && 
		this.IsEmptyElement);
	if (flag) {
		this.Read();
		var result = $asm09.System.Xml.XmlConverter.ToInt64$0(System.String.Empty);
	} else {
		this.ReadStartElement$0();
		result = this.ReadContentAsLong();
		this.ReadEndElement();
	}
	return result;
};
System.Xml.XmlDictionaryReader.prototype.ReadElementContentAsFloat = function () {
	var flag = (this.IsStartElement$0() && 
		this.IsEmptyElement);
	if (flag) {
		this.Read();
		var result = $asm09.System.Xml.XmlConverter.ToSingle$0(System.String.Empty);
	} else {
		this.ReadStartElement$0();
		result = this.ReadContentAsFloat();
		this.ReadEndElement();
	}
	return result;
};
System.Xml.XmlDictionaryReader.prototype.ReadElementContentAsDouble = function () {
	var flag = (this.IsStartElement$0() && 
		this.IsEmptyElement);
	if (flag) {
		this.Read();
		var result = $asm09.System.Xml.XmlConverter.ToDouble$0(System.String.Empty);
	} else {
		this.ReadStartElement$0();
		result = this.ReadContentAsDouble();
		this.ReadEndElement();
	}
	return result;
};
System.Xml.XmlDictionaryReader.prototype.ReadElementContentAsDecimal = function () {
	var flag = (this.IsStartElement$0() && 
		this.IsEmptyElement);
	if (flag) {
		this.Read();
		var result = $asm09.System.Xml.XmlConverter.ToDecimal$0(System.String.Empty).MemberwiseClone();
	} else {
		this.ReadStartElement$0();
		result = this.ReadContentAsDecimal().MemberwiseClone();
		this.ReadEndElement();
	}
	return result;
};
System.Xml.XmlDictionaryReader.prototype.ReadElementContentAsDateTime = function () {
	var flag = (this.IsStartElement$0() && 
		this.IsEmptyElement);
	if (flag) {
		this.Read();
		try {
			var result = System.DateTime.Parse$1(System.String.Empty, System.Globalization.NumberFormatInfo.InvariantInfo).MemberwiseClone();
			return result;
		} catch ($exception) {
			if (JSIL.CheckType($exception, System.ArgumentException)) {
				var arg_2E_0 = $exception;
				throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$1(System.String.Empty, "DateTime", arg_2E_0));
			} else if (JSIL.CheckType($exception, System.FormatException)) {
				var arg_45_0 = $exception;
				throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$1(System.String.Empty, "DateTime", arg_45_0));
			} else {
				throw $exception;
			}
		}
	}
	this.ReadStartElement$0();
	result = this.ReadContentAsDateTime().MemberwiseClone();
	this.ReadEndElement();
	return result;
};
System.Xml.XmlDictionaryReader.prototype.ReadElementContentAsUniqueId = function () {
	var flag = (this.IsStartElement$0() && 
		this.IsEmptyElement);
	if (flag) {
		this.Read();
		try {
			var result = JSIL.New(System.Xml.UniqueId, "_ctor$4", [System.String.Empty]);
			return result;
		} catch ($exception) {
			if (JSIL.CheckType($exception, System.ArgumentException)) {
				var arg_29_0 = $exception;
				throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$1(System.String.Empty, "UniqueId", arg_29_0));
			} else if (JSIL.CheckType($exception, System.FormatException)) {
				var arg_40_0 = $exception;
				throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$1(System.String.Empty, "UniqueId", arg_40_0));
			} else {
				throw $exception;
			}
		}
	}
	this.ReadStartElement$0();
	result = this.ReadContentAsUniqueId();
	this.ReadEndElement();
	return result;
};
System.Xml.XmlDictionaryReader.prototype.ReadElementContentAsGuid = function () {
	var flag = (this.IsStartElement$0() && 
		this.IsEmptyElement);
	if (flag) {
		this.Read();
		try {
			var result = JSIL.New(System.Guid, "_ctor$4", [System.String.Empty]);
			return result;
		} catch ($exception) {
			if (JSIL.CheckType($exception, System.ArgumentException)) {
				var arg_29_0 = $exception;
				throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$1(System.String.Empty, "Guid", arg_29_0));
			} else if (JSIL.CheckType($exception, System.FormatException)) {
				var arg_40_0 = $exception;
				throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$1(System.String.Empty, "Guid", arg_40_0));
			} else if (JSIL.CheckType($exception, System.OverflowException)) {
				var arg_57_0 = $exception;
				throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$1(System.String.Empty, "Guid", arg_57_0));
			} else {
				throw $exception;
			}
		}
	}
	this.ReadStartElement$0();
	result = this.ReadContentAsGuid().MemberwiseClone();
	this.ReadEndElement();
	return result;
};
System.Xml.XmlDictionaryReader.prototype.ReadElementContentAsTimeSpan = function () {
	var flag = (this.IsStartElement$0() && 
		this.IsEmptyElement);
	if (flag) {
		this.Read();
		var result = $asm09.System.Xml.XmlConverter.ToTimeSpan$0(System.String.Empty).MemberwiseClone();
	} else {
		this.ReadStartElement$0();
		result = this.ReadContentAsTimeSpan().MemberwiseClone();
		this.ReadEndElement();
	}
	return result;
};
System.Xml.XmlDictionaryReader.prototype.ReadElementContentAsBase64 = function () {
	var flag = (this.IsStartElement$0() && 
		this.IsEmptyElement);
	if (flag) {
		this.Read();
		var result = JSIL.Array.New(System.Byte, 0);
	} else {
		this.ReadStartElement$0();
		result = this.ReadContentAsBase64$0();
		this.ReadEndElement();
	}
	return result;
};
System.Xml.XmlDictionaryReader.prototype.ReadElementContentAsBinHex = function () {
	var flag = (this.IsStartElement$0() && 
		this.IsEmptyElement);
	if (flag) {
		this.Read();
		var result = JSIL.Array.New(System.Byte, 0);
	} else {
		this.ReadStartElement$0();
		result = this.ReadContentAsBinHex$0();
		this.ReadEndElement();
	}
	return result;
};
System.Xml.XmlDictionaryReader.prototype.TryGetLocalNameAsDictionaryString = function (/* ref */ localName) {
	localName.value = null;
	return false;
};
System.Xml.XmlDictionaryReader.prototype.TryGetNamespaceUriAsDictionaryString = function (/* ref */ namespaceUri) {
	namespaceUri.value = null;
	return false;
};
System.Xml.XmlDictionaryReader.prototype.TryGetValueAsDictionaryString = function (/* ref */ value) {
	value.value = null;
	return false;
};
System.Xml.XmlDictionaryReader.prototype.CheckArray = function (array, offset, count) {
	if (array === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentNullException, "_ctor$1", ["array"]));
	}
	if (offset < 0) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["offset", $asm09.System.Runtime.Serialization.SR.GetString$2("ValueMustBeNonNegative")]));
	}
	if (offset > array.length) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["offset", $asm09.System.Runtime.Serialization.SR.GetString$0("OffsetExceedsBufferSize", [array.length])]));
	}
	if (count < 0) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["count", $asm09.System.Runtime.Serialization.SR.GetString$2("ValueMustBeNonNegative")]));
	}
	if (count > (array.length - offset)) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["count", $asm09.System.Runtime.Serialization.SR.GetString$0("SizeExceedsRemainingBufferSpace", [(array.length - offset)])]));
	}
};
System.Xml.XmlDictionaryReader.prototype.IsStartArray = function (/* ref */ type) {
	type.value = null;
	return false;
};
System.Xml.XmlDictionaryReader.prototype.TryGetArrayLength = function (/* ref */ count) {
	count.value = 0;
	return false;
};
System.Xml.XmlDictionaryReader.prototype.ReadBooleanArray$0 = function (localName, namespaceUri) {
	return $asm09.System.Xml.BooleanArrayHelperWithString.Instance.ReadArray$0(this, localName, namespaceUri, this.Quotas.MaxArrayLength);
};
System.Xml.XmlDictionaryReader.prototype.ReadBooleanArray$1 = function (localName, namespaceUri) {
	return $asm09.System.Xml.BooleanArrayHelperWithDictionaryString.Instance.ReadArray$0(this, localName, namespaceUri, this.Quotas.MaxArrayLength);
};
System.Xml.XmlDictionaryReader.prototype.ReadArray$0 = function (localName, namespaceUri, array, offset, count) {
	this.CheckArray(array, offset, count);
__loop0__: 
	for (var num = 0; (num < count) && this.IsStartElement$2(localName, namespaceUri); ++num) {
		array[(offset + num)] = this.ReadElementContentAsBoolean$0();
	}
	return num;
};
System.Xml.XmlDictionaryReader.prototype.ReadArray$1 = function (localName, namespaceUri, array, offset, count) {
	return this.ReadArray$0(
		System.Xml.XmlDictionaryString.GetString(localName), 
		System.Xml.XmlDictionaryString.GetString(namespaceUri), 
		array, 
		offset, 
		count
	);
};
System.Xml.XmlDictionaryReader.prototype.ReadInt16Array$0 = function (localName, namespaceUri) {
	return $asm09.System.Xml.Int16ArrayHelperWithString.Instance.ReadArray$0(this, localName, namespaceUri, this.Quotas.MaxArrayLength);
};
System.Xml.XmlDictionaryReader.prototype.ReadInt16Array$1 = function (localName, namespaceUri) {
	return $asm09.System.Xml.Int16ArrayHelperWithDictionaryString.Instance.ReadArray$0(this, localName, namespaceUri, this.Quotas.MaxArrayLength);
};
System.Xml.XmlDictionaryReader.prototype.ReadArray$2 = function (localName, namespaceUri, array, offset, count) {
	this.CheckArray(array, offset, count);
__loop0__: 
	for (var num = 0; (num < count) && this.IsStartElement$2(localName, namespaceUri); ++num) {
		var num2 = this.ReadElementContentAsInt$0();
		if (!((num2 >= -32768) && (num2 <= 32767))) {
			$asm09.System.Xml.XmlExceptionHelper.ThrowConversionOverflow(this, (num2).toString(), "Int16");
		}
		array[(offset + num)] = num2;
	}
	return num;
};
System.Xml.XmlDictionaryReader.prototype.ReadArray$3 = function (localName, namespaceUri, array, offset, count) {
	return this.ReadArray$2(
		System.Xml.XmlDictionaryString.GetString(localName), 
		System.Xml.XmlDictionaryString.GetString(namespaceUri), 
		array, 
		offset, 
		count
	);
};
System.Xml.XmlDictionaryReader.prototype.ReadInt32Array$0 = function (localName, namespaceUri) {
	return $asm09.System.Xml.Int32ArrayHelperWithString.Instance.ReadArray$0(this, localName, namespaceUri, this.Quotas.MaxArrayLength);
};
System.Xml.XmlDictionaryReader.prototype.ReadInt32Array$1 = function (localName, namespaceUri) {
	return $asm09.System.Xml.Int32ArrayHelperWithDictionaryString.Instance.ReadArray$0(this, localName, namespaceUri, this.Quotas.MaxArrayLength);
};
System.Xml.XmlDictionaryReader.prototype.ReadArray$4 = function (localName, namespaceUri, array, offset, count) {
	this.CheckArray(array, offset, count);
__loop0__: 
	for (var num = 0; (num < count) && this.IsStartElement$2(localName, namespaceUri); ++num) {
		array[(offset + num)] = this.ReadElementContentAsInt$0();
	}
	return num;
};
System.Xml.XmlDictionaryReader.prototype.ReadArray$5 = function (localName, namespaceUri, array, offset, count) {
	return this.ReadArray$4(
		System.Xml.XmlDictionaryString.GetString(localName), 
		System.Xml.XmlDictionaryString.GetString(namespaceUri), 
		array, 
		offset, 
		count
	);
};
System.Xml.XmlDictionaryReader.prototype.ReadInt64Array$0 = function (localName, namespaceUri) {
	return $asm09.System.Xml.Int64ArrayHelperWithString.Instance.ReadArray$0(this, localName, namespaceUri, this.Quotas.MaxArrayLength);
};
System.Xml.XmlDictionaryReader.prototype.ReadInt64Array$1 = function (localName, namespaceUri) {
	return $asm09.System.Xml.Int64ArrayHelperWithDictionaryString.Instance.ReadArray$0(this, localName, namespaceUri, this.Quotas.MaxArrayLength);
};
System.Xml.XmlDictionaryReader.prototype.ReadArray$6 = function (localName, namespaceUri, array, offset, count) {
	this.CheckArray(array, offset, count);
__loop0__: 
	for (var num = 0; (num < count) && this.IsStartElement$2(localName, namespaceUri); ++num) {
		array[(offset + num)] = this.ReadElementContentAsLong$0();
	}
	return num;
};
System.Xml.XmlDictionaryReader.prototype.ReadArray$7 = function (localName, namespaceUri, array, offset, count) {
	return this.ReadArray$6(
		System.Xml.XmlDictionaryString.GetString(localName), 
		System.Xml.XmlDictionaryString.GetString(namespaceUri), 
		array, 
		offset, 
		count
	);
};
System.Xml.XmlDictionaryReader.prototype.ReadSingleArray$0 = function (localName, namespaceUri) {
	return $asm09.System.Xml.SingleArrayHelperWithString.Instance.ReadArray$0(this, localName, namespaceUri, this.Quotas.MaxArrayLength);
};
System.Xml.XmlDictionaryReader.prototype.ReadSingleArray$1 = function (localName, namespaceUri) {
	return $asm09.System.Xml.SingleArrayHelperWithDictionaryString.Instance.ReadArray$0(this, localName, namespaceUri, this.Quotas.MaxArrayLength);
};
System.Xml.XmlDictionaryReader.prototype.ReadArray$8 = function (localName, namespaceUri, array, offset, count) {
	this.CheckArray(array, offset, count);
__loop0__: 
	for (var num = 0; (num < count) && this.IsStartElement$2(localName, namespaceUri); ++num) {
		array[(offset + num)] = this.ReadElementContentAsFloat$0();
	}
	return num;
};
System.Xml.XmlDictionaryReader.prototype.ReadArray$9 = function (localName, namespaceUri, array, offset, count) {
	return this.ReadArray$8(
		System.Xml.XmlDictionaryString.GetString(localName), 
		System.Xml.XmlDictionaryString.GetString(namespaceUri), 
		array, 
		offset, 
		count
	);
};
System.Xml.XmlDictionaryReader.prototype.ReadDoubleArray$0 = function (localName, namespaceUri) {
	return $asm09.System.Xml.DoubleArrayHelperWithString.Instance.ReadArray$0(this, localName, namespaceUri, this.Quotas.MaxArrayLength);
};
System.Xml.XmlDictionaryReader.prototype.ReadDoubleArray$1 = function (localName, namespaceUri) {
	return $asm09.System.Xml.DoubleArrayHelperWithDictionaryString.Instance.ReadArray$0(this, localName, namespaceUri, this.Quotas.MaxArrayLength);
};
System.Xml.XmlDictionaryReader.prototype.ReadArray$10 = function (localName, namespaceUri, array, offset, count) {
	this.CheckArray(array, offset, count);
__loop0__: 
	for (var num = 0; (num < count) && this.IsStartElement$2(localName, namespaceUri); ++num) {
		array[(offset + num)] = this.ReadElementContentAsDouble$0();
	}
	return num;
};
System.Xml.XmlDictionaryReader.prototype.ReadArray$11 = function (localName, namespaceUri, array, offset, count) {
	return this.ReadArray$10(
		System.Xml.XmlDictionaryString.GetString(localName), 
		System.Xml.XmlDictionaryString.GetString(namespaceUri), 
		array, 
		offset, 
		count
	);
};
System.Xml.XmlDictionaryReader.prototype.ReadDecimalArray$0 = function (localName, namespaceUri) {
	return $asm09.System.Xml.DecimalArrayHelperWithString.Instance.ReadArray$0(this, localName, namespaceUri, this.Quotas.MaxArrayLength);
};
System.Xml.XmlDictionaryReader.prototype.ReadDecimalArray$1 = function (localName, namespaceUri) {
	return $asm09.System.Xml.DecimalArrayHelperWithDictionaryString.Instance.ReadArray$0(this, localName, namespaceUri, this.Quotas.MaxArrayLength);
};
System.Xml.XmlDictionaryReader.prototype.ReadArray$12 = function (localName, namespaceUri, array, offset, count) {
	this.CheckArray(array, offset, count);
__loop0__: 
	for (var num = 0; (num < count) && this.IsStartElement$2(localName, namespaceUri); ++num) {
		array[(offset + num)] = this.ReadElementContentAsDecimal$0().MemberwiseClone();
	}
	return num;
};
System.Xml.XmlDictionaryReader.prototype.ReadArray$13 = function (localName, namespaceUri, array, offset, count) {
	return this.ReadArray$12(
		System.Xml.XmlDictionaryString.GetString(localName), 
		System.Xml.XmlDictionaryString.GetString(namespaceUri), 
		array, 
		offset, 
		count
	);
};
System.Xml.XmlDictionaryReader.prototype.ReadDateTimeArray$0 = function (localName, namespaceUri) {
	return $asm09.System.Xml.DateTimeArrayHelperWithString.Instance.ReadArray$0(this, localName, namespaceUri, this.Quotas.MaxArrayLength);
};
System.Xml.XmlDictionaryReader.prototype.ReadDateTimeArray$1 = function (localName, namespaceUri) {
	return $asm09.System.Xml.DateTimeArrayHelperWithDictionaryString.Instance.ReadArray$0(this, localName, namespaceUri, this.Quotas.MaxArrayLength);
};
System.Xml.XmlDictionaryReader.prototype.ReadArray$14 = function (localName, namespaceUri, array, offset, count) {
	this.CheckArray(array, offset, count);
__loop0__: 
	for (var num = 0; (num < count) && this.IsStartElement$2(localName, namespaceUri); ++num) {
		array[(offset + num)] = this.ReadElementContentAsDateTime$0().MemberwiseClone();
	}
	return num;
};
System.Xml.XmlDictionaryReader.prototype.ReadArray$15 = function (localName, namespaceUri, array, offset, count) {
	return this.ReadArray$14(
		System.Xml.XmlDictionaryString.GetString(localName), 
		System.Xml.XmlDictionaryString.GetString(namespaceUri), 
		array, 
		offset, 
		count
	);
};
System.Xml.XmlDictionaryReader.prototype.ReadGuidArray$0 = function (localName, namespaceUri) {
	return $asm09.System.Xml.GuidArrayHelperWithString.Instance.ReadArray$0(this, localName, namespaceUri, this.Quotas.MaxArrayLength);
};
System.Xml.XmlDictionaryReader.prototype.ReadGuidArray$1 = function (localName, namespaceUri) {
	return $asm09.System.Xml.GuidArrayHelperWithDictionaryString.Instance.ReadArray$0(this, localName, namespaceUri, this.Quotas.MaxArrayLength);
};
System.Xml.XmlDictionaryReader.prototype.ReadArray$16 = function (localName, namespaceUri, array, offset, count) {
	this.CheckArray(array, offset, count);
__loop0__: 
	for (var num = 0; (num < count) && this.IsStartElement$2(localName, namespaceUri); ++num) {
		array[(offset + num)] = this.ReadElementContentAsGuid().MemberwiseClone();
	}
	return num;
};
System.Xml.XmlDictionaryReader.prototype.ReadArray$17 = function (localName, namespaceUri, array, offset, count) {
	return this.ReadArray$16(
		System.Xml.XmlDictionaryString.GetString(localName), 
		System.Xml.XmlDictionaryString.GetString(namespaceUri), 
		array, 
		offset, 
		count
	);
};
System.Xml.XmlDictionaryReader.prototype.ReadTimeSpanArray$0 = function (localName, namespaceUri) {
	return $asm09.System.Xml.TimeSpanArrayHelperWithString.Instance.ReadArray$0(this, localName, namespaceUri, this.Quotas.MaxArrayLength);
};
System.Xml.XmlDictionaryReader.prototype.ReadTimeSpanArray$1 = function (localName, namespaceUri) {
	return $asm09.System.Xml.TimeSpanArrayHelperWithDictionaryString.Instance.ReadArray$0(this, localName, namespaceUri, this.Quotas.MaxArrayLength);
};
System.Xml.XmlDictionaryReader.prototype.ReadArray$18 = function (localName, namespaceUri, array, offset, count) {
	this.CheckArray(array, offset, count);
__loop0__: 
	for (var num = 0; (num < count) && this.IsStartElement$2(localName, namespaceUri); ++num) {
		array[(offset + num)] = this.ReadElementContentAsTimeSpan().MemberwiseClone();
	}
	return num;
};
System.Xml.XmlDictionaryReader.prototype.ReadArray$19 = function (localName, namespaceUri, array, offset, count) {
	return this.ReadArray$18(
		System.Xml.XmlDictionaryString.GetString(localName), 
		System.Xml.XmlDictionaryString.GetString(namespaceUri), 
		array, 
		offset, 
		count
	);
};
System.Xml.XmlDictionaryReader.prototype._ctor = function () {
	System.Xml.XmlReader.prototype._ctor.call(this);
};
JSIL.OverloadedMethod(System.Xml.XmlDictionaryReader, "CreateBinaryReader", [
		["CreateBinaryReader$0", [System.Array.Of(System.Byte), System.Xml.XmlDictionaryReaderQuotas]], 
		["CreateBinaryReader$1", [System.Array.Of(System.Byte), System.Int32, System.Int32, System.Xml.XmlDictionaryReaderQuotas]], 
		["CreateBinaryReader$2", [System.Array.Of(System.Byte), System.Int32, System.Int32, System.Xml.IXmlDictionary, System.Xml.XmlDictionaryReaderQuotas]], 
		["CreateBinaryReader$3", [System.Array.Of(System.Byte), System.Int32, System.Int32, System.Xml.IXmlDictionary, System.Xml.XmlDictionaryReaderQuotas, System.Xml.XmlBinaryReaderSession]], 
		["CreateBinaryReader$4", [System.IO.Stream, System.Xml.XmlDictionaryReaderQuotas]], 
		["CreateBinaryReader$5", [System.IO.Stream, System.Xml.IXmlDictionary, System.Xml.XmlDictionaryReaderQuotas]], 
		["CreateBinaryReader$6", [System.IO.Stream, System.Xml.IXmlDictionary, System.Xml.XmlDictionaryReaderQuotas, System.Xml.XmlBinaryReaderSession]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlDictionaryReader, "CreateTextReader", [
		["CreateTextReader$0", [System.Array.Of(System.Byte), System.Xml.XmlDictionaryReaderQuotas]], 
		["CreateTextReader$1", [System.Array.Of(System.Byte), System.Int32, System.Int32, System.Xml.XmlDictionaryReaderQuotas]], 
		["CreateTextReader$2", [System.IO.Stream, System.Xml.XmlDictionaryReaderQuotas]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlDictionaryReader.prototype, "MoveToStartElement", [
		["MoveToStartElement$0", []], 
		["MoveToStartElement$1", [System.String]], 
		["MoveToStartElement$2", [System.String, System.String]], 
		["MoveToStartElement$3", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlDictionaryReader.prototype, "IsLocalName", [
		["IsLocalName$0", [System.String]], 
		["IsLocalName$1", [System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlDictionaryReader.prototype, "IsNamespaceUri", [
		["IsNamespaceUri$0", [System.String]], 
		["IsNamespaceUri$1", [System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlDictionaryReader.prototype, "ReadFullStartElement", [
		["ReadFullStartElement$0", []], 
		["ReadFullStartElement$1", [System.String]], 
		["ReadFullStartElement$2", [System.String, System.String]], 
		["ReadFullStartElement$3", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlDictionaryReader.prototype, "IndexOfLocalName", [
		["IndexOfLocalName$0", [System.Array.Of(System.String), System.String]], 
		["IndexOfLocalName$1", [System.Array.Of(System.Xml.XmlDictionaryString), System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlDictionaryReader.prototype, "ReadContentAsBase64", [
		["ReadContentAsBase64$0", []], 
		["ReadContentAsBase64$1", [System.Int32, System.Int32]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlDictionaryReader.prototype, "ReadContentAsString", [
		["ReadContentAsString$0", []], 
		["ReadContentAsString$1", [System.Int32]], 
		["ReadContentAsString$2", [System.Array.Of(System.String), JSIL.Reference.Of(System.Int32)]], 
		["ReadContentAsString$3", [System.Array.Of(System.Xml.XmlDictionaryString), JSIL.Reference.Of(System.Int32)]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlDictionaryReader.prototype, "ReadContentAsBinHex", [
		["ReadContentAsBinHex$0", []], 
		["ReadContentAsBinHex$1", [System.Int32]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlDictionaryReader.prototype, "ReadBooleanArray", [
		["ReadBooleanArray$0", [System.String, System.String]], 
		["ReadBooleanArray$1", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlDictionaryReader.prototype, "ReadArray", [
		["ReadArray$0", [System.String, System.String, System.Array.Of(System.Boolean), System.Int32, System.Int32]], 
		["ReadArray$1", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Array.Of(System.Boolean), System.Int32, System.Int32]], 
		["ReadArray$2", [System.String, System.String, System.Array.Of(System.Int16), System.Int32, System.Int32]], 
		["ReadArray$3", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Array.Of(System.Int16), System.Int32, System.Int32]], 
		["ReadArray$4", [System.String, System.String, System.Array.Of(System.Int32), System.Int32, System.Int32]], 
		["ReadArray$5", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Array.Of(System.Int32), System.Int32, System.Int32]], 
		["ReadArray$6", [System.String, System.String, System.Array.Of(System.Int64), System.Int32, System.Int32]], 
		["ReadArray$7", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Array.Of(System.Int64), System.Int32, System.Int32]], 
		["ReadArray$8", [System.String, System.String, System.Array.Of(System.Single), System.Int32, System.Int32]], 
		["ReadArray$9", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Array.Of(System.Single), System.Int32, System.Int32]], 
		["ReadArray$10", [System.String, System.String, System.Array.Of(System.Double), System.Int32, System.Int32]], 
		["ReadArray$11", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Array.Of(System.Double), System.Int32, System.Int32]], 
		["ReadArray$12", [System.String, System.String, System.Array.Of(System.Decimal), System.Int32, System.Int32]], 
		["ReadArray$13", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Array.Of(System.Decimal), System.Int32, System.Int32]], 
		["ReadArray$14", [System.String, System.String, System.Array.Of(System.DateTime), System.Int32, System.Int32]], 
		["ReadArray$15", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Array.Of(System.DateTime), System.Int32, System.Int32]], 
		["ReadArray$16", [System.String, System.String, System.Array.Of(System.Guid), System.Int32, System.Int32]], 
		["ReadArray$17", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Array.Of(System.Guid), System.Int32, System.Int32]], 
		["ReadArray$18", [System.String, System.String, System.Array.Of(System.TimeSpan), System.Int32, System.Int32]], 
		["ReadArray$19", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Array.Of(System.TimeSpan), System.Int32, System.Int32]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlDictionaryReader.prototype, "ReadInt16Array", [
		["ReadInt16Array$0", [System.String, System.String]], 
		["ReadInt16Array$1", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlDictionaryReader.prototype, "ReadInt32Array", [
		["ReadInt32Array$0", [System.String, System.String]], 
		["ReadInt32Array$1", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlDictionaryReader.prototype, "ReadInt64Array", [
		["ReadInt64Array$0", [System.String, System.String]], 
		["ReadInt64Array$1", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlDictionaryReader.prototype, "ReadSingleArray", [
		["ReadSingleArray$0", [System.String, System.String]], 
		["ReadSingleArray$1", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlDictionaryReader.prototype, "ReadDoubleArray", [
		["ReadDoubleArray$0", [System.String, System.String]], 
		["ReadDoubleArray$1", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlDictionaryReader.prototype, "ReadDecimalArray", [
		["ReadDecimalArray$0", [System.String, System.String]], 
		["ReadDecimalArray$1", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlDictionaryReader.prototype, "ReadDateTimeArray", [
		["ReadDateTimeArray$0", [System.String, System.String]], 
		["ReadDateTimeArray$1", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlDictionaryReader.prototype, "ReadGuidArray", [
		["ReadGuidArray$0", [System.String, System.String]], 
		["ReadGuidArray$1", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlDictionaryReader.prototype, "ReadTimeSpanArray", [
		["ReadTimeSpanArray$0", [System.String, System.String]], 
		["ReadTimeSpanArray$1", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.MakeProperty(System.Xml.XmlDictionaryReader.prototype, "CanCanonicalize", 
	System.Xml.XmlDictionaryReader.prototype.get_CanCanonicalize, null);
JSIL.MakeProperty(System.Xml.XmlDictionaryReader.prototype, "Quotas", 
	System.Xml.XmlDictionaryReader.prototype.get_Quotas, null);
Object.defineProperty(System.Xml.XmlDictionaryReader, "MaxInitialArrayLength", {
		"value": 65535}
);

$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype._ctor = function (reader, nsMgr) {
	System.Xml.XmlDictionaryReader.prototype._ctor.call(this);
	this.reader = reader;
	this.nsMgr = nsMgr;
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.get_AttributeCount = function () {
	return this.reader.AttributeCount;
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.get_BaseURI = function () {
	return this.reader.BaseURI;
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.get_CanReadBinaryContent = function () {
	return this.reader.CanReadBinaryContent;
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.get_CanReadValueChunk = function () {
	return this.reader.CanReadValueChunk;
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.Close = function () {
	this.reader.Close();
	this.nsMgr = null;
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.get_Depth = function () {
	return this.reader.Depth;
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.get_EOF = function () {
	return this.reader.EOF;
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.GetAttribute$0 = function (index) {
	return this.reader.GetAttribute$2(index);
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.GetAttribute$1 = function (name) {
	return this.reader.GetAttribute$0(name);
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.GetAttribute$2 = function (name, namespaceUri) {
	return this.reader.GetAttribute$1(name, namespaceUri);
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.get_HasValue = function () {
	return this.reader.HasValue;
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.get_IsDefault = function () {
	return this.reader.IsDefault;
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.get_IsEmptyElement = function () {
	return this.reader.IsEmptyElement;
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.IsStartElement$0 = function (name) {
	return this.reader.IsStartElement$1(name);
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.IsStartElement$1 = function (localName, namespaceUri) {
	return this.reader.IsStartElement$2(localName, namespaceUri);
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.get_LocalName = function () {
	return this.reader.LocalName;
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.LookupNamespace = function (namespaceUri) {
	return this.reader.LookupNamespace(namespaceUri);
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.MoveToAttribute$0 = function (index) {
	this.reader.MoveToAttribute$2(index);
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.MoveToAttribute$1 = function (name) {
	return this.reader.MoveToAttribute$0(name);
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.MoveToAttribute$2 = function (name, namespaceUri) {
	return this.reader.MoveToAttribute$1(name, namespaceUri);
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.MoveToElement = function () {
	return this.reader.MoveToElement();
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.MoveToFirstAttribute = function () {
	return this.reader.MoveToFirstAttribute();
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.MoveToNextAttribute = function () {
	return this.reader.MoveToNextAttribute();
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.get_Name = function () {
	return this.reader.Name;
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.get_NamespaceURI = function () {
	return this.reader.NamespaceURI;
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.get_NameTable = function () {
	return this.reader.NameTable;
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.get_NodeType = function () {
	return this.reader.NodeType;
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.get_Prefix = function () {
	return this.reader.Prefix;
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.Read = function () {
	return this.reader.Read();
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.ReadAttributeValue = function () {
	return this.reader.ReadAttributeValue();
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.ReadInnerXml = function () {
	return this.reader.ReadInnerXml();
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.ReadOuterXml = function () {
	return this.reader.ReadOuterXml();
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.ReadStartElement$0 = function (name) {
	this.reader.ReadStartElement$1(name);
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.ReadStartElement$1 = function (localName, namespaceUri) {
	this.reader.ReadStartElement$2(localName, namespaceUri);
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.ReadEndElement = function () {
	this.reader.ReadEndElement();
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.get_ReadState = function () {
	return this.reader.ReadState;
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.ResolveEntity = function () {
	this.reader.ResolveEntity();
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.get_Item$0 = function (index) {
	return this.reader.get_Item$0(index);
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.get_Item$1 = function (name) {
	return this.reader.get_Item$1(name);
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.get_Item$2 = function (name, namespaceUri) {
	return this.reader.get_Item$2(name, namespaceUri);
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.get_Value = function () {
	return this.reader.Value;
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.get_XmlLang = function () {
	return this.reader.XmlLang;
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.get_XmlSpace = function () {
	return this.reader.XmlSpace;
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.ReadElementContentAsBase64 = function (buffer, offset, count) {
	return this.reader.ReadElementContentAsBase64(buffer, offset, count);
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.ReadContentAsBase64 = function (buffer, offset, count) {
	return this.reader.ReadContentAsBase64(buffer, offset, count);
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.ReadElementContentAsBinHex = function (buffer, offset, count) {
	return this.reader.ReadElementContentAsBinHex(buffer, offset, count);
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.ReadContentAsBinHex = function (buffer, offset, count) {
	return this.reader.ReadContentAsBinHex(buffer, offset, count);
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.ReadValueChunk = function (chars, offset, count) {
	return this.reader.ReadValueChunk(chars, offset, count);
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.get_ValueType = function () {
	return this.reader.ValueType;
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.ReadContentAsBoolean = function () {
	try {
		var result = this.reader.ReadContentAsBoolean();
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.ArgumentException)) {
			var arg_0E_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$0("Boolean", arg_0E_0));
		} else if (JSIL.CheckType($exception, System.FormatException)) {
			var arg_20_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$0("Boolean", arg_20_0));
		} else {
			throw $exception;
		}
	}
	return result;
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.ReadContentAsDateTime = function () {
	try {
		var result = this.reader.ReadContentAsDateTime().MemberwiseClone();
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.ArgumentException)) {
			var arg_0E_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$0("DateTime", arg_0E_0));
		} else if (JSIL.CheckType($exception, System.FormatException)) {
			var arg_20_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$0("DateTime", arg_20_0));
		} else if (JSIL.CheckType($exception, System.OverflowException)) {
			var arg_32_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$0("DateTime", arg_32_0));
		} else {
			throw $exception;
		}
	}
	return result;
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.ReadContentAsDecimal = function () {
	try {
		var result = JSIL.Cast(this.reader.ReadContentAs(System.Decimal, null), System.Decimal).MemberwiseClone();
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.ArgumentException)) {
			var arg_1E_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$0("Decimal", arg_1E_0));
		} else if (JSIL.CheckType($exception, System.FormatException)) {
			var arg_30_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$0("Decimal", arg_30_0));
		} else if (JSIL.CheckType($exception, System.OverflowException)) {
			var arg_42_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$0("Decimal", arg_42_0));
		} else {
			throw $exception;
		}
	}
	return result;
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.ReadContentAsDouble = function () {
	try {
		var result = this.reader.ReadContentAsDouble();
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.ArgumentException)) {
			var arg_0E_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$0("Double", arg_0E_0));
		} else if (JSIL.CheckType($exception, System.FormatException)) {
			var arg_20_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$0("Double", arg_20_0));
		} else if (JSIL.CheckType($exception, System.OverflowException)) {
			var arg_32_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$0("Double", arg_32_0));
		} else {
			throw $exception;
		}
	}
	return result;
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.ReadContentAsInt = function () {
	try {
		var result = this.reader.ReadContentAsInt();
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.ArgumentException)) {
			var arg_0E_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$0("Int32", arg_0E_0));
		} else if (JSIL.CheckType($exception, System.FormatException)) {
			var arg_20_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$0("Int32", arg_20_0));
		} else if (JSIL.CheckType($exception, System.OverflowException)) {
			var arg_32_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$0("Int32", arg_32_0));
		} else {
			throw $exception;
		}
	}
	return result;
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.ReadContentAsLong = function () {
	try {
		var result = this.reader.ReadContentAsLong();
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.ArgumentException)) {
			var arg_0E_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$0("Int64", arg_0E_0));
		} else if (JSIL.CheckType($exception, System.FormatException)) {
			var arg_20_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$0("Int64", arg_20_0));
		} else if (JSIL.CheckType($exception, System.OverflowException)) {
			var arg_32_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$0("Int64", arg_32_0));
		} else {
			throw $exception;
		}
	}
	return result;
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.ReadContentAsFloat = function () {
	try {
		var result = this.reader.ReadContentAsFloat();
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.ArgumentException)) {
			var arg_0E_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$0("Single", arg_0E_0));
		} else if (JSIL.CheckType($exception, System.FormatException)) {
			var arg_20_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$0("Single", arg_20_0));
		} else if (JSIL.CheckType($exception, System.OverflowException)) {
			var arg_32_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$0("Single", arg_32_0));
		} else {
			throw $exception;
		}
	}
	return result;
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.ReadContentAsString = function () {
	try {
		var result = this.reader.ReadContentAsString();
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.ArgumentException)) {
			var arg_0E_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$0("String", arg_0E_0));
		} else if (JSIL.CheckType($exception, System.FormatException)) {
			var arg_20_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$0("String", arg_20_0));
		} else {
			throw $exception;
		}
	}
	return result;
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.ReadContentAs = function (type, namespaceResolver) {
	return this.reader.ReadContentAs(type, namespaceResolver);
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.HasLineInfo = function () {
	var xmlLineInfo = JSIL.TryCast(this.reader, System.Xml.IXmlLineInfo);
	return (xmlLineInfo && xmlLineInfo.IXmlLineInfo_HasLineInfo());
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.get_LineNumber = function () {
	var xmlLineInfo = JSIL.TryCast(this.reader, System.Xml.IXmlLineInfo);
	if (xmlLineInfo === null) {
		return 1;
	}
	return xmlLineInfo.IXmlLineInfo_LineNumber;
};
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.get_LinePosition = function () {
	var xmlLineInfo = JSIL.TryCast(this.reader, System.Xml.IXmlLineInfo);
	if (xmlLineInfo === null) {
		return 1;
	}
	return xmlLineInfo.IXmlLineInfo_LinePosition;
};
JSIL.OverloadedMethod($asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype, "get_Item", [
		["get_Item$0", [System.Int32]], 
		["get_Item$1", [System.String]], 
		["get_Item$2", [System.String, System.String]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype, "GetAttribute", [
		["GetAttribute$0", [System.Int32]], 
		["GetAttribute$1", [System.String]], 
		["GetAttribute$2", [System.String, System.String]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype, "IsStartElement", [
		["IsStartElement$0", [System.String]], 
		["IsStartElement$1", [System.String, System.String]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype, "MoveToAttribute", [
		["MoveToAttribute$0", [System.Int32]], 
		["MoveToAttribute$1", [System.String]], 
		["MoveToAttribute$2", [System.String, System.String]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype, "ReadStartElement", [
		["ReadStartElement$0", [System.String]], 
		["ReadStartElement$1", [System.String, System.String]]
	]);
JSIL.MakeProperty($asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype, "AttributeCount", 
	$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.get_AttributeCount, null);
JSIL.MakeProperty($asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype, "BaseURI", 
	$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.get_BaseURI, null);
JSIL.MakeProperty($asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype, "CanReadBinaryContent", 
	$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.get_CanReadBinaryContent, null);
JSIL.MakeProperty($asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype, "CanReadValueChunk", 
	$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.get_CanReadValueChunk, null);
JSIL.MakeProperty($asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype, "Depth", 
	$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.get_Depth, null);
JSIL.MakeProperty($asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype, "EOF", 
	$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.get_EOF, null);
JSIL.MakeProperty($asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype, "HasValue", 
	$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.get_HasValue, null);
JSIL.MakeProperty($asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype, "IsDefault", 
	$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.get_IsDefault, null);
JSIL.MakeProperty($asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype, "IsEmptyElement", 
	$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.get_IsEmptyElement, null);
JSIL.MakeProperty($asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype, "LocalName", 
	$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.get_LocalName, null);
JSIL.MakeProperty($asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype, "Name", 
	$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.get_Name, null);
JSIL.MakeProperty($asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype, "NamespaceURI", 
	$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.get_NamespaceURI, null);
JSIL.MakeProperty($asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype, "NameTable", 
	$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.get_NameTable, null);
JSIL.MakeProperty($asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype, "NodeType", 
	$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.get_NodeType, null);
JSIL.MakeProperty($asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype, "Prefix", 
	$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.get_Prefix, null);
JSIL.MakeProperty($asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype, "ReadState", 
	$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.get_ReadState, null);
JSIL.MakeProperty($asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype, "Item", 
	$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.get_Item$0, null);
JSIL.MakeProperty($asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype, "Item", 
	$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.get_Item$1, null);
JSIL.MakeProperty($asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype, "Item", 
	$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.get_Item$2, null);
JSIL.MakeProperty($asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype, "Value", 
	$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.get_Value, null);
JSIL.MakeProperty($asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype, "XmlLang", 
	$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.get_XmlLang, null);
JSIL.MakeProperty($asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype, "XmlSpace", 
	$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.get_XmlSpace, null);
JSIL.MakeProperty($asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype, "ValueType", 
	$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.get_ValueType, null);
JSIL.MakeProperty($asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype, "LineNumber", 
	$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.get_LineNumber, null);
JSIL.MakeProperty($asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype, "LinePosition", 
	$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.get_LinePosition, null);
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.reader = null;
$asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader.prototype.nsMgr = null;

$asm09.System.Xml.XmlBaseReader.prototype._ctor = function () {
	System.Xml.XmlDictionaryReader.prototype._ctor.call(this);
	this.bufferReader = JSIL.New($asm09.System.Xml.XmlBufferReader, "_ctor$0", [this]);
	this.nsMgr = new $asm09.System.Xml.XmlBaseReader.NamespaceManager(this.bufferReader);
	this.quotas = System.Xml.XmlDictionaryReaderQuotas.Max;
	this.rootElementNode = JSIL.New($asm09.System.Xml.XmlBaseReader.XmlElementNode, "_ctor$0", [this.bufferReader]);
	this.atomicTextNode = new $asm09.System.Xml.XmlBaseReader.XmlAtomicTextNode(this.bufferReader);
	this.node = $asm09.System.Xml.XmlBaseReader.closedNode;
};
$asm09.System.Xml.XmlBaseReader.get_Base64Encoding = function () {
	if ($asm09.System.Xml.XmlBaseReader.base64Encoding === null) {
		$asm09.System.Xml.XmlBaseReader.base64Encoding = new $asm09.System.Text.Base64Encoding();
	}
	return $asm09.System.Xml.XmlBaseReader.base64Encoding;
};
$asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader = function () {
	return this.bufferReader;
};
$asm09.System.Xml.XmlBaseReader.prototype.get_Node = function () {
	return this.node;
};
$asm09.System.Xml.XmlBaseReader.prototype.MoveToNode = function (node) {
	this.node = node;
	this.ns = null;
	this.localName = null;
	this.prefix = null;
	this.value = null;
};
$asm09.System.Xml.XmlBaseReader.prototype.MoveToInitial = function (quotas) {
	this.nsMgr.Clear();
	this.depth = 0;
	this.attributeCount = 0;
	this.attributeStart = -1;
	this.attributeIndex = -1;
	this.rootElement = false;
	this.readingElement = false;
	this.MoveToNode($asm09.System.Xml.XmlBaseReader.initialNode);
};
$asm09.System.Xml.XmlBaseReader.prototype.MoveToDeclaration = function () {
	if (this.attributeCount < 1) {
		$asm09.System.Xml.XmlExceptionHelper.ThrowXmlException$4(this, JSIL.New(System.Xml.XmlException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$2("XmlDeclMissingVersion")]));
	}
	if (this.attributeCount > 3) {
		$asm09.System.Xml.XmlExceptionHelper.ThrowXmlException$4(this, JSIL.New(System.Xml.XmlException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$2("XmlMalformedDecl")]));
	}
	if (!this.CheckDeclAttribute(
			0, 
			"version", 
			"1.0", 
			false, 
			"XmlInvalidVersion"
		)) {
		$asm09.System.Xml.XmlExceptionHelper.ThrowXmlException$4(this, JSIL.New(System.Xml.XmlException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$2("XmlDeclMissingVersion")]));
	}
	if (this.attributeCount > 1) {
		if (this.CheckDeclAttribute(
				1, 
				"encoding", 
				null, 
				true, 
				"XmlInvalidEncoding"
			)) {
			if (!((this.attributeCount !== 3) || this.CheckStandalone(2))) {
				$asm09.System.Xml.XmlExceptionHelper.ThrowXmlException$4(this, JSIL.New(System.Xml.XmlException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$2("XmlMalformedDecl")]));
			}
		} else if (!(this.CheckStandalone(1) && (this.attributeCount <= 2))) {
			$asm09.System.Xml.XmlExceptionHelper.ThrowXmlException$4(this, JSIL.New(System.Xml.XmlException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$2("XmlMalformedDecl")]));
		}
	}
	if (this.declarationNode === null) {
		this.declarationNode = new $asm09.System.Xml.XmlBaseReader.XmlDeclarationNode(this.bufferReader);
	}
	this.MoveToNode(this.declarationNode);
	return this.declarationNode;
};
$asm09.System.Xml.XmlBaseReader.prototype.CheckStandalone = function (attr) {
	var xmlAttributeNode = this.attributeNodes[attr];
	if (!xmlAttributeNode.Prefix.IsEmpty) {
		$asm09.System.Xml.XmlExceptionHelper.ThrowXmlException$4(this, JSIL.New(System.Xml.XmlException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$2("XmlMalformedDecl")]));
	}
	if ($asm09.System.Xml.StringHandle.op_Inequality$1(xmlAttributeNode.LocalName, "standalone")) {
		return false;
	}
	if (!(xmlAttributeNode.Value.Equals2("yes", false) || xmlAttributeNode.Value.Equals2("no", false))) {
		$asm09.System.Xml.XmlExceptionHelper.ThrowXmlException$4(this, JSIL.New(System.Xml.XmlException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$2("XmlInvalidStandalone")]));
	}
	return true;
};
$asm09.System.Xml.XmlBaseReader.prototype.CheckDeclAttribute = function (index, localName, value, checkLower, valueSR) {
	var xmlAttributeNode = this.attributeNodes[index];
	if (!xmlAttributeNode.Prefix.IsEmpty) {
		$asm09.System.Xml.XmlExceptionHelper.ThrowXmlException$4(this, JSIL.New(System.Xml.XmlException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$2("XmlMalformedDecl")]));
	}
	if ($asm09.System.Xml.StringHandle.op_Inequality$1(xmlAttributeNode.LocalName, localName)) {
		return false;
	}
	if (!((value === null) || xmlAttributeNode.Value.Equals2(value, checkLower))) {
		$asm09.System.Xml.XmlExceptionHelper.ThrowXmlException$4(this, JSIL.New(System.Xml.XmlException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$2(valueSR)]));
	}
	return true;
};
$asm09.System.Xml.XmlBaseReader.prototype.MoveToComment = function () {
	if (this.commentNode === null) {
		this.commentNode = new $asm09.System.Xml.XmlBaseReader.XmlCommentNode(this.bufferReader);
	}
	this.MoveToNode(this.commentNode);
	return this.commentNode;
};
$asm09.System.Xml.XmlBaseReader.prototype.MoveToCData = function () {
	if (this.cdataNode === null) {
		this.cdataNode = new $asm09.System.Xml.XmlBaseReader.XmlCDataNode(this.bufferReader);
	}
	this.MoveToNode(this.cdataNode);
	return this.cdataNode;
};
$asm09.System.Xml.XmlBaseReader.prototype.MoveToAtomicText = function () {
	var result = this.atomicTextNode;
	this.MoveToNode(result);
	return result;
};
$asm09.System.Xml.XmlBaseReader.prototype.MoveToComplexText = function () {
	if (this.complexTextNode === null) {
		this.complexTextNode = new $asm09.System.Xml.XmlBaseReader.XmlComplexTextNode(this.bufferReader);
	}
	this.MoveToNode(this.complexTextNode);
	return this.complexTextNode;
};
$asm09.System.Xml.XmlBaseReader.prototype.MoveToWhitespaceText = function () {
	if (this.whitespaceTextNode === null) {
		this.whitespaceTextNode = new $asm09.System.Xml.XmlBaseReader.XmlWhitespaceTextNode(this.bufferReader);
	}
	if (this.nsMgr.XmlSpace === System.Xml.XmlSpace.Preserve) {
		this.whitespaceTextNode.NodeType = System.Xml.XmlNodeType.SignificantWhitespace;
	} else {
		this.whitespaceTextNode.NodeType = System.Xml.XmlNodeType.Whitespace;
	}
	this.MoveToNode(this.whitespaceTextNode);
	return this.whitespaceTextNode;
};
$asm09.System.Xml.XmlBaseReader.prototype.get_ElementNode = function () {
	if (this.depth === 0) {
		return this.rootElementNode;
	}
	return this.elementNodes[this.depth];
};
$asm09.System.Xml.XmlBaseReader.prototype.MoveToEndElement = function () {
	if (this.depth === 0) {
		$asm09.System.Xml.XmlExceptionHelper.ThrowInvalidBinaryFormat(this);
	}
	var xmlElementNode = this.elementNodes[this.depth];
	var endElement = xmlElementNode.EndElement;
	endElement.Namespace = xmlElementNode.Namespace;
	this.MoveToNode(endElement);
};
$asm09.System.Xml.XmlBaseReader.prototype.MoveToEndOfFile = function () {
	if (this.depth !== 0) {
		$asm09.System.Xml.XmlExceptionHelper.ThrowUnexpectedEndOfFile(this);
	}
	this.MoveToNode($asm09.System.Xml.XmlBaseReader.endOfFileNode);
};
$asm09.System.Xml.XmlBaseReader.prototype.EnterScope = function () {
	if (this.depth === 0) {
		if (this.rootElement) {
			$asm09.System.Xml.XmlExceptionHelper.ThrowMultipleRootElements(this);
		}
		this.rootElement = true;
	}
	this.nsMgr.EnterScope();
	++this.depth;
	if (this.elementNodes === null) {
		this.elementNodes = JSIL.Array.New($asm09.System.Xml.XmlBaseReader.XmlElementNode, 4);
	} else if (this.elementNodes.length === this.depth) {
		var destinationArray = JSIL.Array.New($asm09.System.Xml.XmlBaseReader.XmlElementNode, (this.depth * 2));
		System.Array.Copy$0(this.elementNodes, destinationArray, this.depth);
		this.elementNodes = destinationArray;
	}
	var xmlElementNode = this.elementNodes[this.depth];
	if (xmlElementNode === null) {
		xmlElementNode = JSIL.New($asm09.System.Xml.XmlBaseReader.XmlElementNode, "_ctor$0", [this.bufferReader]);
		this.elementNodes[this.depth] = xmlElementNode;
	}
	this.attributeCount = 0;
	this.attributeStart = -1;
	this.attributeIndex = -1;
	this.MoveToNode(xmlElementNode);
	return xmlElementNode;
};
$asm09.System.Xml.XmlBaseReader.prototype.ExitScope = function () {
	if (this.depth === 0) {
		$asm09.System.Xml.XmlExceptionHelper.ThrowUnexpectedEndElement(this);
	}
	--this.depth;
	this.nsMgr.ExitScope();
};
$asm09.System.Xml.XmlBaseReader.prototype.AddAttribute$0 = function (qnameType, isAtomicValue) {
	var num = this.attributeCount;
	if (this.attributeNodes === null) {
		this.attributeNodes = JSIL.Array.New($asm09.System.Xml.XmlBaseReader.XmlAttributeNode, 4);
	} else if (this.attributeNodes.length === num) {
		var destinationArray = JSIL.Array.New($asm09.System.Xml.XmlBaseReader.XmlAttributeNode, (num * 2));
		System.Array.Copy$0(this.attributeNodes, destinationArray, num);
		this.attributeNodes = destinationArray;
	}
	var xmlAttributeNode = this.attributeNodes[num];
	if (xmlAttributeNode === null) {
		xmlAttributeNode = JSIL.New($asm09.System.Xml.XmlBaseReader.XmlAttributeNode, "_ctor$0", [this.bufferReader]);
		this.attributeNodes[num] = xmlAttributeNode;
	}
	xmlAttributeNode.QNameType = qnameType;
	xmlAttributeNode.IsAtomicValue = isAtomicValue;
	xmlAttributeNode.AttributeText.QNameType = qnameType;
	xmlAttributeNode.AttributeText.IsAtomicValue = isAtomicValue;
	++this.attributeCount;
	return xmlAttributeNode;
};
$asm09.System.Xml.XmlBaseReader.prototype.AddNamespace = function () {
	return this.nsMgr.AddNamespace();
};
$asm09.System.Xml.XmlBaseReader.prototype.AddAttribute$1 = function () {
	return this.AddAttribute$0($asm09.System.Xml.XmlBaseReader.QNameType.Normal, true);
};
$asm09.System.Xml.XmlBaseReader.prototype.AddXmlAttribute = function () {
	return this.AddAttribute$0($asm09.System.Xml.XmlBaseReader.QNameType.Normal, true);
};
$asm09.System.Xml.XmlBaseReader.prototype.AddXmlnsAttribute = function (ns) {
	if (!(ns.Prefix.IsEmpty || !ns.Uri.IsEmpty)) {
		$asm09.System.Xml.XmlExceptionHelper.ThrowEmptyNamespace(this);
	}
	if (!(!ns.Prefix.IsXml || !$asm09.System.Xml.StringHandle.op_Inequality$1(ns.Uri, "http://www.w3.org/XML/1998/namespace"))) {
		$asm09.System.Xml.XmlExceptionHelper.ThrowXmlException$4(this, JSIL.New(System.Xml.XmlException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("XmlSpecificBindingPrefix", ["xml", "http://www.w3.org/XML/1998/namespace"])]));
	} else if (!(!ns.Prefix.IsXmlns || !$asm09.System.Xml.StringHandle.op_Inequality$1(ns.Uri, "http://www.w3.org/2000/xmlns/"))) {
		$asm09.System.Xml.XmlExceptionHelper.ThrowXmlException$4(this, JSIL.New(System.Xml.XmlException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("XmlSpecificBindingPrefix", ["xmlns", "http://www.w3.org/2000/xmlns/"])]));
	}
	this.nsMgr.Register(ns);
	var xmlAttributeNode = this.AddAttribute$0($asm09.System.Xml.XmlBaseReader.QNameType.Xmlns, false);
	xmlAttributeNode.Namespace = ns;
	xmlAttributeNode.AttributeText.Namespace = ns;
	return xmlAttributeNode;
};
$asm09.System.Xml.XmlBaseReader.prototype.FixXmlAttribute = function (attributeNode) {
	if ($asm09.System.Xml.PrefixHandle.op_Equality$0(attributeNode.Prefix, "xml")) {
		if ($asm09.System.Xml.StringHandle.op_Equality$1(attributeNode.LocalName, "lang")) {
			this.nsMgr.AddLangAttribute(attributeNode.Value.GetString());
			return;
		}
		if ($asm09.System.Xml.StringHandle.op_Equality$1(attributeNode.LocalName, "space")) {
			var string = attributeNode.Value.GetString();
			if (string == "preserve") {
				this.nsMgr.AddSpaceAttribute(System.Xml.XmlSpace.Preserve);
				return;
			}
			if (string == "default") {
				this.nsMgr.AddSpaceAttribute(System.Xml.XmlSpace.Default);
			}
		}
	}
};
$asm09.System.Xml.XmlBaseReader.prototype.get_OutsideRootElement = function () {
	return (this.depth === 0);
};
$asm09.System.Xml.XmlBaseReader.prototype.get_CanReadBinaryContent = function () {
	return true;
};
$asm09.System.Xml.XmlBaseReader.prototype.get_CanReadValueChunk = function () {
	return true;
};
$asm09.System.Xml.XmlBaseReader.prototype.get_BaseURI = function () {
	return System.String.Empty;
};
$asm09.System.Xml.XmlBaseReader.prototype.get_HasValue = function () {
	return this.node.HasValue;
};
$asm09.System.Xml.XmlBaseReader.prototype.get_IsDefault = function () {
	return false;
};
$asm09.System.Xml.XmlBaseReader.prototype.get_Item$0 = function (index) {
	return this.GetAttribute$2(index);
};
$asm09.System.Xml.XmlBaseReader.prototype.get_Item$1 = function (name) {
	return this.GetAttribute$0(name);
};
$asm09.System.Xml.XmlBaseReader.prototype.get_Item$2 = function (localName, namespaceUri) {
	return this.GetAttribute$1(localName, namespaceUri);
};
$asm09.System.Xml.XmlBaseReader.prototype.get_AttributeCount = function () {
	if (this.node.CanGetAttribute) {
		return this.attributeCount;
	}
	return 0;
};
$asm09.System.Xml.XmlBaseReader.prototype.Close = function () {
	this.MoveToNode($asm09.System.Xml.XmlBaseReader.closedNode);
	this.nameTable = null;
	if (!((this.attributeNodes === null) || (this.attributeNodes.length <= 16))) {
		this.attributeNodes = null;
	}
	if (!((this.elementNodes === null) || (this.elementNodes.length <= 16))) {
		this.elementNodes = null;
	}
	this.nsMgr.Close();
	this.bufferReader.Close();
	if (this.attributeSorter !== null) {
		this.attributeSorter.Close();
	}
};
$asm09.System.Xml.XmlBaseReader.prototype.get_Depth = function () {
	return (this.depth + this.node.DepthDelta);
};
$asm09.System.Xml.XmlBaseReader.prototype.get_EOF = function () {
	return (this.node.ReadState === System.Xml.ReadState.EndOfFile);
};
$asm09.System.Xml.XmlBaseReader.prototype.GetAttributeNode$0 = function (index) {
	if (!this.node.CanGetAttribute) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["index", $asm09.System.Runtime.Serialization.SR.GetString$2("XmlElementAttributes")]));
	}
	if (index < 0) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["index", $asm09.System.Runtime.Serialization.SR.GetString$2("ValueMustBeNonNegative")]));
	}
	if (index >= this.attributeCount) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["index", $asm09.System.Runtime.Serialization.SR.GetString$0("OffsetExceedsBufferSize", [this.attributeCount])]));
	}
	return this.attributeNodes[index];
};
$asm09.System.Xml.XmlBaseReader.prototype.GetAttributeNode$1 = function (name) {
	if (name === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentNullException, "_ctor$1", ["name"]));
	}
	if (!this.node.CanGetAttribute) {
		return null;
	}
	var num = name.IndexOf$0(":");
	if (num === -1) {
		if (name == "xmlns") {
			var text = "xmlns";
			var text2 = System.String.Empty;
		} else {
			text = System.String.Empty;
			text2 = name;
		}
	} else {
		text = name.Substring$1(0, num);
		text2 = name.Substring$0((num + 1));
	}
	var num2 = this.attributeCount;
	var num3 = this.attributeStart;
__loop0__: 
	for (var i = 0; i < num2; ++i) {
		if (++num3 >= num2) {
			num3 = 0;
		}
		var xmlAttributeNode = this.attributeNodes[num3];
		if (xmlAttributeNode.IsPrefixAndLocalName(text, text2)) {
			this.attributeStart = num3;
			return xmlAttributeNode;
		}
	}
	return null;
};
$asm09.System.Xml.XmlBaseReader.prototype.GetAttributeNode$2 = function (localName, namespaceUri) {
	if (localName === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentNullException, "_ctor$1", ["localName"]));
	}
	if (namespaceUri === null) {
		namespaceUri = System.String.Empty;
	}
	if (!this.node.CanGetAttribute) {
		return null;
	}
	var num = this.attributeCount;
	var num2 = this.attributeStart;
__loop0__: 
	for (var i = 0; i < num; ++i) {
		if (++num2 >= num) {
			num2 = 0;
		}
		var xmlAttributeNode = this.attributeNodes[num2];
		if (xmlAttributeNode.IsLocalNameAndNamespaceUri$0(localName, namespaceUri)) {
			this.attributeStart = num2;
			return xmlAttributeNode;
		}
	}
	return null;
};
$asm09.System.Xml.XmlBaseReader.prototype.GetAttributeNode$3 = function (localName, namespaceUri) {
	if (localName === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentNullException, "_ctor$1", ["localName"]));
	}
	if (namespaceUri === null) {
		namespaceUri = System.Xml.XmlDictionaryString.Empty;
	}
	if (!this.node.CanGetAttribute) {
		return null;
	}
	var num = this.attributeCount;
	var num2 = this.attributeStart;
__loop0__: 
	for (var i = 0; i < num; ++i) {
		if (++num2 >= num) {
			num2 = 0;
		}
		var xmlAttributeNode = this.attributeNodes[num2];
		if (xmlAttributeNode.IsLocalNameAndNamespaceUri$1(localName, namespaceUri)) {
			this.attributeStart = num2;
			return xmlAttributeNode;
		}
	}
	return null;
};
$asm09.System.Xml.XmlBaseReader.prototype.GetAttribute$0 = function (index) {
	return this.GetAttributeNode$0(index).ValueAsString;
};
$asm09.System.Xml.XmlBaseReader.prototype.GetAttribute$1 = function (name) {
	var attributeNode = this.GetAttributeNode$1(name);
	if (attributeNode === null) {
		return null;
	}
	return attributeNode.ValueAsString;
};
$asm09.System.Xml.XmlBaseReader.prototype.GetAttribute$2 = function (localName, namespaceUri) {
	var attributeNode = this.GetAttributeNode$2(localName, namespaceUri);
	if (attributeNode === null) {
		return null;
	}
	return attributeNode.ValueAsString;
};
$asm09.System.Xml.XmlBaseReader.prototype.GetAttribute$3 = function (localName, namespaceUri) {
	var attributeNode = this.GetAttributeNode$3(localName, namespaceUri);
	if (attributeNode === null) {
		return null;
	}
	return attributeNode.ValueAsString;
};
$asm09.System.Xml.XmlBaseReader.prototype.get_IsEmptyElement = function () {
	return this.node.IsEmptyElement;
};
$asm09.System.Xml.XmlBaseReader.prototype.get_LocalName = function () {
	if (this.localName === null) {
		if (!JSIL.Cast(this.node.QNameType, System.Boolean)) {
			this.localName = this.node.LocalName.GetString$0(this.NameTable);
		} else if (this.node.Namespace.Prefix.IsEmpty) {
			this.localName = "xmlns";
		} else {
			this.localName = this.node.Namespace.Prefix.GetString$0(this.NameTable);
		}
	}
	return this.localName;
};
$asm09.System.Xml.XmlBaseReader.prototype.LookupNamespace$0 = function (prefix) {
	var namespace = this.nsMgr.LookupNamespace$2(prefix);
	if (namespace !== null) {
		return namespace.Uri.GetString$0(this.NameTable);
	}
	if (prefix == "xmlns") {
		return "http://www.w3.org/2000/xmlns/";
	}
	return null;
};
$asm09.System.Xml.XmlBaseReader.prototype.LookupNamespace$1 = function (prefix) {
	var namespace = this.nsMgr.LookupNamespace$0(prefix);
	if (namespace === null) {
		$asm09.System.Xml.XmlExceptionHelper.ThrowUndefinedPrefix(this, $asm09.System.Xml.PrefixHandle.GetString$0(prefix));
	}
	return namespace;
};
$asm09.System.Xml.XmlBaseReader.prototype.LookupNamespace$2 = function (prefix) {
	var namespace = this.nsMgr.LookupNamespace$1(prefix);
	if (namespace === null) {
		$asm09.System.Xml.XmlExceptionHelper.ThrowUndefinedPrefix(this, prefix.GetString$1());
	}
	return namespace;
};
$asm09.System.Xml.XmlBaseReader.prototype.ProcessAttributes$0 = function () {
	if (this.attributeCount > 0) {
		this.ProcessAttributes$1(this.attributeNodes, this.attributeCount);
	}
};
$asm09.System.Xml.XmlBaseReader.prototype.ProcessAttributes$1 = function (attributeNodes, attributeCount) {
__loop0__: 
	for (var i = 0; i < attributeCount; ++i) {
		var xmlAttributeNode = attributeNodes[i];
		if (!JSIL.Cast(xmlAttributeNode.QNameType, System.Boolean)) {
			var prefixHandle = xmlAttributeNode.Prefix;
			if (!prefixHandle.IsEmpty) {
				xmlAttributeNode.Namespace = this.LookupNamespace$2(prefixHandle);
			} else {
				xmlAttributeNode.Namespace = $asm09.System.Xml.XmlBaseReader.NamespaceManager.EmptyNamespace;
			}
			xmlAttributeNode.AttributeText.Namespace = xmlAttributeNode.Namespace;
		}
	}
	if (attributeCount > 1) {
		if (attributeCount < 12) {
		__loop1__: 
			for (var j = 0; j < (attributeCount - 1); ++j) {
				var xmlAttributeNode2 = attributeNodes[j];
				if (!JSIL.Cast(xmlAttributeNode2.QNameType, System.Boolean)) {
				__loop3__: 
					for (var k = (j + 1); k < attributeCount; ++k) {
						var xmlAttributeNode3 = attributeNodes[k];
						if (!(JSIL.Cast(xmlAttributeNode3.QNameType, System.Boolean) || 
								!$asm09.System.Xml.StringHandle.op_Equality$2(xmlAttributeNode2.LocalName, xmlAttributeNode3.LocalName) || !$asm09.System.Xml.StringHandle.op_Equality$2(xmlAttributeNode2.Namespace.Uri, xmlAttributeNode3.Namespace.Uri))) {
							$asm09.System.Xml.XmlExceptionHelper.ThrowDuplicateAttribute(
								this, 
								xmlAttributeNode2.Prefix.GetString$1(), 
								xmlAttributeNode3.Prefix.GetString$1(), 
								xmlAttributeNode2.LocalName.GetString$1(), 
								xmlAttributeNode2.Namespace.Uri.GetString$1()
							);
						}
					}
				} else {
				__loop2__: 
					for (var l = (j + 1); l < attributeCount; ++l) {
						var xmlAttributeNode4 = attributeNodes[l];
						if (!((xmlAttributeNode4.QNameType !== $asm09.System.Xml.XmlBaseReader.QNameType.Xmlns) || !$asm09.System.Xml.PrefixHandle.op_Equality$2(xmlAttributeNode2.Namespace.Prefix, xmlAttributeNode4.Namespace.Prefix))) {
							$asm09.System.Xml.XmlExceptionHelper.ThrowDuplicateAttribute(
								this, 
								"xmlns", 
								"xmlns", 
								xmlAttributeNode2.Namespace.Prefix.GetString$1(), 
								"http://www.w3.org/2000/xmlns/"
							);
						}
					}
				}
			}
			return;
		}
		this.CheckAttributes(attributeNodes, attributeCount);
	}
};
$asm09.System.Xml.XmlBaseReader.prototype.CheckAttributes = function (attributeNodes, attributeCount) {
	var num = new JSIL.Variable(0), num2 = new JSIL.Variable(0);
	if (this.attributeSorter === null) {
		this.attributeSorter = new $asm09.System.Xml.XmlBaseReader.AttributeSorter();
	}
	if (!this.attributeSorter.Sort$0(attributeNodes, attributeCount)) {
		this.attributeSorter.GetIndeces(/* ref */ num, /* ref */ num2);
		if (attributeNodes[num.value].QNameType === $asm09.System.Xml.XmlBaseReader.QNameType.Xmlns) {
			$asm09.System.Xml.XmlExceptionHelper.ThrowDuplicateXmlnsAttribute(this, attributeNodes[num.value].Namespace.Prefix.GetString$1(), "http://www.w3.org/2000/xmlns/");
			return;
		}
		$asm09.System.Xml.XmlExceptionHelper.ThrowDuplicateAttribute(
			this, 
			attributeNodes[num.value].Prefix.GetString$1(), 
			attributeNodes[num2.value].Prefix.GetString$1(), 
			attributeNodes[num.value].LocalName.GetString$1(), 
			attributeNodes[num.value].Namespace.Uri.GetString$1()
		);
	}
};
$asm09.System.Xml.XmlBaseReader.prototype.MoveToAttribute$0 = function (index) {
	this.MoveToNode(this.GetAttributeNode$0(index));
};
$asm09.System.Xml.XmlBaseReader.prototype.MoveToAttribute$1 = function (name) {
	var attributeNode = this.GetAttributeNode$1(name);
	if (attributeNode === null) {
		return false;
	}
	this.MoveToNode(attributeNode);
	return true;
};
$asm09.System.Xml.XmlBaseReader.prototype.MoveToAttribute$2 = function (localName, namespaceUri) {
	var attributeNode = this.GetAttributeNode$2(localName, namespaceUri);
	if (attributeNode === null) {
		return false;
	}
	this.MoveToNode(attributeNode);
	return true;
};
$asm09.System.Xml.XmlBaseReader.prototype.MoveToElement = function () {
	if (!this.node.CanMoveToElement) {
		return false;
	}
	if (this.depth === 0) {
		this.MoveToDeclaration();
	} else {
		this.MoveToNode(this.elementNodes[this.depth]);
	}
	this.attributeIndex = -1;
	return true;
};
$asm09.System.Xml.XmlBaseReader.prototype.MoveToContent = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
			__loop0__: 
				do {
					if (this.node.HasContent) {
						if ((this.node.NodeType !== System.Xml.XmlNodeType.Text) && (this.node.NodeType !== System.Xml.XmlNodeType.CDATA)) {
							break __loop0__;
						}
						if (this.value === null) {
							if (!this.node.Value.IsWhitespace()) {
								break __loop0__;
							}
						} else if (!$asm09.System.Xml.XmlConverter.IsWhitespace$0(this.value)) {
							break __loop0__;
						}
					} else if (this.node.NodeType === System.Xml.XmlNodeType.Attribute) {
						__label0__ = "Block_5";
						continue __step0__;
					}
				} while (this.Read());
				__label0__ = "IL_73";
				continue __step0__;
				__label0__ = "Block_5";
				continue __step0__;
				break;
			case "Block_5":
				this.MoveToElement();
				__label0__ = "IL_73";
				continue __step0__;
				break;
			case "IL_73":
				return this.node.NodeType;
				break __step0__;
		}
	}
};
$asm09.System.Xml.XmlBaseReader.prototype.MoveToFirstAttribute = function () {
	if (!(this.node.CanGetAttribute && this.attributeCount)) {
		return false;
	}
	this.MoveToNode(this.GetAttributeNode$0(0));
	this.attributeIndex = 0;
	return true;
};
$asm09.System.Xml.XmlBaseReader.prototype.MoveToNextAttribute = function () {
	if (!this.node.CanGetAttribute) {
		return false;
	}
	var num = (this.attributeIndex + 1);
	if (num >= this.attributeCount) {
		return false;
	}
	this.MoveToNode(this.GetAttributeNode$0(num));
	this.attributeIndex = num;
	return true;
};
$asm09.System.Xml.XmlBaseReader.prototype.get_NamespaceURI = function () {
	if (this.ns === null) {
		if (!JSIL.Cast(this.node.QNameType, System.Boolean)) {
			this.ns = this.node.Namespace.Uri.GetString$0(this.NameTable);
		} else {
			this.ns = "http://www.w3.org/2000/xmlns/";
		}
	}
	return this.ns;
};
$asm09.System.Xml.XmlBaseReader.prototype.get_NameTable = function () {
	if (this.nameTable === null) {
		this.nameTable = new System.Xml.NameTable();
		this.nameTable.Add$1("xml");
		this.nameTable.Add$1("xmlns");
		this.nameTable.Add$1("http://www.w3.org/2000/xmlns/");
		this.nameTable.Add$1("http://www.w3.org/XML/1998/namespace");
	__loop0__: 
		for (var prefixHandleType = $asm09.System.Xml.PrefixHandleType.A; prefixHandleType <= $asm09.System.Xml.PrefixHandleType.Z; prefixHandleType += $asm09.System.Xml.PrefixHandleType.A) {
			this.nameTable.Add$1($asm09.System.Xml.PrefixHandle.GetString$0(prefixHandleType));
		}
	}
	return this.nameTable;
};
$asm09.System.Xml.XmlBaseReader.prototype.get_NodeType = function () {
	return this.node.NodeType;
};
$asm09.System.Xml.XmlBaseReader.prototype.get_Prefix = function () {
	if (this.prefix === null) {
		var qNameType = this.node.QNameType;
		if (!JSIL.Cast(qNameType, System.Boolean)) {
			this.prefix = this.node.Prefix.GetString$0(this.NameTable);
		} else if (qNameType === $asm09.System.Xml.XmlBaseReader.QNameType.Xmlns) {
			if (this.node.Namespace.Prefix.IsEmpty) {
				this.prefix = System.String.Empty;
			} else {
				this.prefix = "xmlns";
			}
		} else {
			this.prefix = "xml";
		}
	}
	return this.prefix;
};
$asm09.System.Xml.XmlBaseReader.prototype.IsLocalName$0 = function (localName) {
	if (localName === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentNullException, "_ctor$1", ["localName"]));
	}
	return this.node.IsLocalName$0(localName);
};
$asm09.System.Xml.XmlBaseReader.prototype.IsLocalName$1 = function (localName) {
	if (localName === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentNullException, "_ctor$1", ["localName"]));
	}
	return this.node.IsLocalName$1(localName);
};
$asm09.System.Xml.XmlBaseReader.prototype.IsNamespaceUri$0 = function (namespaceUri) {
	if (namespaceUri === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull("namespaceUri");
	}
	return this.node.IsNamespaceUri$0(namespaceUri);
};
$asm09.System.Xml.XmlBaseReader.prototype.IsNamespaceUri$1 = function (namespaceUri) {
	if (namespaceUri === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull("namespaceUri");
	}
	return this.node.IsNamespaceUri$1(namespaceUri);
};
$asm09.System.Xml.XmlBaseReader.prototype.IsStartElement$0 = function () {
	var nodeType = this.node.NodeType;
	if (nodeType === System.Xml.XmlNodeType.Element) {
		return true;
	}
	if (nodeType === System.Xml.XmlNodeType.EndElement) {
		return false;
	}
	if (!JSIL.Cast(nodeType, System.Boolean)) {
		this.Read();
		if (this.node.NodeType === System.Xml.XmlNodeType.Element) {
			return true;
		}
	}
	return (this.MoveToContent() === System.Xml.XmlNodeType.Element);
};
$asm09.System.Xml.XmlBaseReader.prototype.IsStartElement$1 = function (name) {
	if (name === null) {
		return false;
	}
	var num = name.IndexOf$0(":");
	if (num === -1) {
		var prefix = System.String.Empty;
		var s = name;
	} else {
		prefix = name.Substring$1(0, num);
		s = name.Substring$0((num + 1));
	}
	return (!(((this.node.NodeType !== System.Xml.XmlNodeType.Element) && 
				!this.IsStartElement$0()) || 
			!$asm09.System.Xml.PrefixHandle.op_Equality$0(this.node.Prefix, prefix)) && $asm09.System.Xml.StringHandle.op_Equality$1(this.node.LocalName, s));
};
$asm09.System.Xml.XmlBaseReader.prototype.IsStartElement$2 = function (localName, namespaceUri) {
	return (localName && 
		namespaceUri && 
		!(((this.node.NodeType !== System.Xml.XmlNodeType.Element) && 
				!this.IsStartElement$0()) || 
			!$asm09.System.Xml.StringHandle.op_Equality$1(this.node.LocalName, localName)) && this.node.IsNamespaceUri$0(namespaceUri));
};
$asm09.System.Xml.XmlBaseReader.prototype.IsStartElement$3 = function (localName, namespaceUri) {
	if (localName === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull("localName");
	}
	if (namespaceUri === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull("namespaceUri");
	}
	return (!(((this.node.NodeType !== System.Xml.XmlNodeType.Element) && 
				!this.IsStartElement$0()) || 
			!$asm09.System.Xml.StringHandle.op_Equality$0(this.node.LocalName, localName)) && this.node.IsNamespaceUri$1(namespaceUri));
};
$asm09.System.Xml.XmlBaseReader.prototype.IndexOfLocalName$0 = function (localNames, namespaceUri) {
	if (localNames === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull("localNames");
	}
	if (namespaceUri === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull("namespaceUri");
	}
	var qNameType = this.node.QNameType;
	if (this.node.IsNamespaceUri$0(namespaceUri)) {
		if (!JSIL.Cast(qNameType, System.Boolean)) {
			var s = this.node.LocalName;
		__loop1__: 
			for (var i = 0; i < localNames.length; ++i) {
				var text = localNames[i];
				if (text === null) {
					throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(System.String.Format(System.Globalization.CultureInfo.InvariantCulture, "localNames[{0}]", [i]));
				}
				if ($asm09.System.Xml.StringHandle.op_Equality$1(s, text)) {
					return i;
				}
			}
		} else {
			var prefix = this.node.Namespace.Prefix;
		__loop0__: 
			for (var j = 0; j < localNames.length; ++j) {
				var text2 = localNames[j];
				if (text2 === null) {
					throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(System.String.Format(System.Globalization.CultureInfo.InvariantCulture, "localNames[{0}]", [j]));
				}
				if ($asm09.System.Xml.PrefixHandle.op_Equality$0(prefix, text2)) {
					return j;
				}
			}
		}
	}
	return -1;
};
$asm09.System.Xml.XmlBaseReader.prototype.IndexOfLocalName$1 = function (localNames, namespaceUri) {
	if (localNames === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull("localNames");
	}
	if (namespaceUri === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull("namespaceUri");
	}
	var qNameType = this.node.QNameType;
	if (this.node.IsNamespaceUri$1(namespaceUri)) {
		if (!JSIL.Cast(qNameType, System.Boolean)) {
			var s = this.node.LocalName;
		__loop1__: 
			for (var i = 0; i < localNames.length; ++i) {
				var xmlDictionaryString = localNames[i];
				if (xmlDictionaryString === null) {
					throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(System.String.Format(System.Globalization.CultureInfo.InvariantCulture, "localNames[{0}]", [i]));
				}
				if ($asm09.System.Xml.StringHandle.op_Equality$0(s, xmlDictionaryString)) {
					return i;
				}
			}
		} else {
			var prefix = this.node.Namespace.Prefix;
		__loop0__: 
			for (var j = 0; j < localNames.length; ++j) {
				var xmlDictionaryString2 = localNames[j];
				if (xmlDictionaryString2 === null) {
					throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull(System.String.Format(System.Globalization.CultureInfo.InvariantCulture, "localNames[{0}]", [j]));
				}
				if ($asm09.System.Xml.PrefixHandle.op_Equality$1(prefix, xmlDictionaryString2)) {
					return j;
				}
			}
		}
	}
	return -1;
};
$asm09.System.Xml.XmlBaseReader.prototype.ReadValueChunk = function (chars, offset, count) {
	if (chars === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentNullException, "_ctor$1", ["chars"]));
	}
	if (offset < 0) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["offset", $asm09.System.Runtime.Serialization.SR.GetString$2("ValueMustBeNonNegative")]));
	}
	if (offset > chars.length) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["offset", $asm09.System.Runtime.Serialization.SR.GetString$0("OffsetExceedsBufferSize", [chars.length])]));
	}
	if (count < 0) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["count", $asm09.System.Runtime.Serialization.SR.GetString$2("ValueMustBeNonNegative")]));
	}
	if (count > (chars.length - offset)) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["count", $asm09.System.Runtime.Serialization.SR.GetString$0("SizeExceedsRemainingBufferSpace", [(chars.length - offset)])]));
	}
	if (!(this.value || 
			JSIL.Cast(this.node.QNameType, System.Boolean) || !this.node.Value.TryReadChars(chars, offset, count, /* ref */ num))) {
		return num.value;
	}
	var text = this.Value;
	var num = new JSIL.Variable(System.Math.Min(count, text.length));
	text.CopyTo(0, chars, offset, num.value);
	this.value = text.Substring$0(num.value);
	return num.value;
};
$asm09.System.Xml.XmlBaseReader.prototype.ReadValueAsBase64 = function (buffer, offset, count) {
	var result = new JSIL.Variable(0);
	if (buffer === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentNullException, "_ctor$1", ["buffer"]));
	}
	if (offset < 0) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["offset", $asm09.System.Runtime.Serialization.SR.GetString$2("ValueMustBeNonNegative")]));
	}
	if (offset > buffer.length) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["offset", $asm09.System.Runtime.Serialization.SR.GetString$0("OffsetExceedsBufferSize", [buffer.length])]));
	}
	if (count < 0) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["count", $asm09.System.Runtime.Serialization.SR.GetString$2("ValueMustBeNonNegative")]));
	}
	if (count > (buffer.length - offset)) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["count", $asm09.System.Runtime.Serialization.SR.GetString$0("SizeExceedsRemainingBufferSpace", [(buffer.length - offset)])]));
	}
	if (count === 0) {
		return 0;
	}
	if (!(this.value || 
			this.trailByteCount || 
			this.trailCharCount || 
			JSIL.Cast(this.node.QNameType, System.Boolean) || !this.node.Value.TryReadBase64(buffer, offset, count, /* ref */ result))) {
		return result.value;
	}
	return this.ReadBytes(
		$asm09.System.Xml.XmlBaseReader.Base64Encoding, 
		3, 
		4, 
		buffer, 
		offset, 
		System.Math.Min(count, 512), 
		false
	);
};
$asm09.System.Xml.XmlBaseReader.prototype.ReadElementContentAsString = function () {
	if (this.node.NodeType !== System.Xml.XmlNodeType.Element) {
		this.MoveToStartElement$0();
	}
	if (this.node.IsEmptyElement) {
		this.Read();
		return System.String.Empty;
	}
	this.Read();
	var result = this.ReadContentAsString();
	this.ReadEndElement();
	return result;
};
$asm09.System.Xml.XmlBaseReader.prototype.ReadStartElement$0 = function () {
	if (this.node.NodeType !== System.Xml.XmlNodeType.Element) {
		this.MoveToStartElement$0();
	}
	this.Read();
};
$asm09.System.Xml.XmlBaseReader.prototype.ReadStartElement$1 = function (name) {
	this.MoveToStartElement$1(name);
	this.Read();
};
$asm09.System.Xml.XmlBaseReader.prototype.ReadStartElement$2 = function (localName, namespaceUri) {
	this.MoveToStartElement$2(localName, namespaceUri);
	this.Read();
};
$asm09.System.Xml.XmlBaseReader.prototype.ReadEndElement = function () {
	if (!((this.node.NodeType === System.Xml.XmlNodeType.EndElement) || (this.MoveToContent() === System.Xml.XmlNodeType.EndElement))) {
		var num = (this.node.NodeType === System.Xml.XmlNodeType.Element) ? (this.depth - 1) : this.depth;
		if (num === 0) {
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$2("XmlEndElementNoOpenNodes")]));
		}
		var xmlElementNode = this.elementNodes[num];
		$asm09.System.Xml.XmlExceptionHelper.ThrowEndElementExpected(this, xmlElementNode.LocalName.GetString$1(), xmlElementNode.Namespace.Uri.GetString$1());
	}
	this.Read();
};
$asm09.System.Xml.XmlBaseReader.prototype.ReadAttributeValue = function () {
	var attributeText = this.node.AttributeText;
	if (attributeText === null) {
		return false;
	}
	this.MoveToNode(attributeText);
	return true;
};
$asm09.System.Xml.XmlBaseReader.prototype.get_ReadState = function () {
	return this.node.ReadState;
};
$asm09.System.Xml.XmlBaseReader.prototype.SkipValue = function (node) {
	if (node.SkipValue) {
		this.Read();
	}
};
$asm09.System.Xml.XmlBaseReader.prototype.TryGetBase64ContentLength = function (/* ref */ length) {
	if (!(this.trailByteCount || 
			this.trailCharCount || this.value)) {
		var xmlNode = this.Node;
		if (xmlNode.IsAtomicValue) {
			return xmlNode.Value.TryGetByteArrayLength(/* ref */ length);
		}
	}
	return System.Xml.XmlDictionaryReader.prototype.TryGetBase64ContentLength.call(this, /* ref */ length);
};
$asm09.System.Xml.XmlBaseReader.prototype.ReadContentAsBase64$0 = function () {
	if (!(this.trailByteCount || 
			this.trailCharCount || this.value)) {
		var xmlNode = this.Node;
		if (xmlNode.IsAtomicValue) {
			var array = xmlNode.Value.ToByteArray();
			if (array.length > this.quotas.MaxArrayLength) {
				$asm09.System.Xml.XmlExceptionHelper.ThrowMaxArrayLengthExceeded(this, this.quotas.MaxArrayLength);
			}
			this.SkipValue(xmlNode);
			return array;
		}
	}
	if (!this.bufferReader.IsStreamed) {
		return System.Xml.XmlDictionaryReader.prototype.ReadContentAsBase64$1.call(this, this.quotas.MaxArrayLength, this.bufferReader.Buffer.length);
	}
	return System.Xml.XmlDictionaryReader.prototype.ReadContentAsBase64$1.call(this, this.quotas.MaxArrayLength, 65535);
};
$asm09.System.Xml.XmlBaseReader.prototype.ReadElementContentAsBase64 = function (buffer, offset, count) {
	if (!this.readingElement) {
		if (this.IsEmptyElement) {
			this.Read();
			return 0;
		}
		this.ReadStartElement$0();
		this.readingElement = true;
	}
	var num = this.ReadContentAsBase64(buffer, offset, count);
	if (num === 0) {
		this.ReadEndElement();
		this.readingElement = false;
	}
	return num;
};
$asm09.System.Xml.XmlBaseReader.prototype.ReadContentAsBase64$1 = function (buffer, offset, count) {
	var num = new JSIL.Variable(0);
	if (buffer === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentNullException, "_ctor$1", ["buffer"]));
	}
	if (offset < 0) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["offset", $asm09.System.Runtime.Serialization.SR.GetString$2("ValueMustBeNonNegative")]));
	}
	if (offset > buffer.length) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["offset", $asm09.System.Runtime.Serialization.SR.GetString$0("OffsetExceedsBufferSize", [buffer.length])]));
	}
	if (count < 0) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["count", $asm09.System.Runtime.Serialization.SR.GetString$2("ValueMustBeNonNegative")]));
	}
	if (count > (buffer.length - offset)) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["count", $asm09.System.Runtime.Serialization.SR.GetString$0("SizeExceedsRemainingBufferSpace", [(buffer.length - offset)])]));
	}
	if (count === 0) {
		return 0;
	}
	if (!(this.trailByteCount || 
			this.trailCharCount || 
			this.value || JSIL.Cast(this.node.QNameType, System.Boolean))) {
	__loop0__: 
		while ((this.node.NodeType !== System.Xml.XmlNodeType.Comment) && this.node.Value.TryReadBase64(buffer, offset, count, /* ref */ num)) {
			if (num.value !== 0) {
				return num.value;
			}
			this.Read();
		}
	}
	var nodeType = this.node.NodeType;
	if (!((nodeType !== System.Xml.XmlNodeType.Element) && (nodeType !== System.Xml.XmlNodeType.EndElement))) {
		return 0;
	}
	return this.ReadBytes(
		$asm09.System.Xml.XmlBaseReader.Base64Encoding, 
		3, 
		4, 
		buffer, 
		offset, 
		System.Math.Min(count, 512), 
		true
	);
};
$asm09.System.Xml.XmlBaseReader.prototype.ReadBytes = function (encoding, byteBlock, charBlock, buffer, offset, byteCount, readContent) {
	if (this.trailByteCount > 0) {
		var num = System.Math.Min(this.trailByteCount, byteCount);
		System.Array.Copy$1(
			this.trailBytes, 
			0, 
			buffer, 
			offset, 
			num
		);
		this.trailByteCount -= num;
		System.Array.Copy$1(
			this.trailBytes, 
			num, 
			this.trailBytes, 
			0, 
			this.trailByteCount
		);
		return num;
	}
	var nodeType = this.node.NodeType;
	if (!((nodeType !== System.Xml.XmlNodeType.Element) && (nodeType !== System.Xml.XmlNodeType.EndElement))) {
		return 0;
	}
	if (byteCount < byteBlock) {
		var num2 = charBlock;
	} else {
		num2 = (Math.floor(byteCount / byteBlock) * charBlock);
	}
	var charBuffer = this.GetCharBuffer(num2);
	var i = 0;
__loop0__: 
	while (true) {
		if (this.trailCharCount > 0) {
			System.Array.Copy$1(
				this.trailChars, 
				0, 
				charBuffer, 
				i, 
				this.trailCharCount
			);
			i += this.trailCharCount;
			this.trailCharCount = 0;
		}
	__loop1__: 
		for (; i < charBlock; i += num3) {
			if (readContent) {
				var num3 = this.ReadContentAsChars(charBuffer, i, (num2 - i));
			} else {
				num3 = this.ReadValueChunk(charBuffer, i, (num2 - i));
			}
			if (num3 === 0) {
				break __loop1__;
			}
		}
		if (i >= charBlock) {
			this.trailCharCount = (i % charBlock);
			if (this.trailCharCount > 0) {
				if (this.trailChars === null) {
					this.trailChars = JSIL.Array.New(System.Char, 4);
				}
				i -= this.trailCharCount;
				System.Array.Copy$1(
					charBuffer, 
					i, 
					this.trailChars, 
					0, 
					this.trailCharCount
				);
			}
		}
		try {
			if (byteCount < byteBlock) {
				if (this.trailBytes === null) {
					this.trailBytes = JSIL.Array.New(System.Byte, 3);
				}
				this.trailByteCount = encoding.GetBytes$2(
					charBuffer, 
					0, 
					i, 
					this.trailBytes, 
					0
				);
				var num4 = System.Math.Min(this.trailByteCount, byteCount);
				System.Array.Copy$1(
					this.trailBytes, 
					0, 
					buffer, 
					offset, 
					num4
				);
				this.trailByteCount -= num4;
				System.Array.Copy$1(
					this.trailBytes, 
					num4, 
					this.trailBytes, 
					0, 
					this.trailByteCount
				);
				var result = num4;
			} else {
				result = encoding.GetBytes$2(
					charBuffer, 
					0, 
					i, 
					buffer, 
					offset
				);
			}
		} catch ($exception) {
			if (JSIL.CheckType($exception, System.FormatException)) {
				var formatException = $exception;
				var num5 = 0;
				var num6 = 0;
			__loop2__: 
				while (true) {
					if (!((num6 < i) && $asm09.System.Xml.XmlConverter.IsWhitespace$1(charBuffer[num6]))) {
						if (num6 === i) {
							break __loop2__;
						}
						charBuffer[num5++] = charBuffer[num6++];
					} else {
						++num6;
					}
				}
				if (num5 === i) {
					throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Xml.XmlException, "_ctor$2", [formatException.Message, formatException.InnerException]));
				}
				i = num5;
				continue __loop0__;
			} else {
				throw $exception;
			}
		}
		break __loop0__;
	}
	return result;
};
$asm09.System.Xml.XmlBaseReader.prototype.ReadContentAsString = function () {
	var xmlNode = this.Node;
	if (xmlNode.IsAtomicValue) {
		if (this.value !== null) {
			var string = this.value;
			if (xmlNode.AttributeText === null) {
				this.value = System.String.Empty;
			}
		} else {
			string = xmlNode.Value.GetString();
			this.SkipValue(xmlNode);
		}
		return string;
	}
	return System.Xml.XmlDictionaryReader.prototype.ReadContentAsString$1.call(this, this.quotas.MaxStringContentLength);
};
$asm09.System.Xml.XmlBaseReader.prototype.ReadContentAsBoolean = function () {
	var xmlNode = this.Node;
	if (!(this.value || !xmlNode.IsAtomicValue)) {
		var result = xmlNode.Value.ToBoolean();
		this.SkipValue(xmlNode);
		return result;
	}
	return $asm09.System.Xml.XmlConverter.ToBoolean$0(this.ReadContentAsString());
};
$asm09.System.Xml.XmlBaseReader.prototype.ReadContentAsLong = function () {
	var xmlNode = this.Node;
	if (!(this.value || !xmlNode.IsAtomicValue)) {
		var result = xmlNode.Value.ToLong();
		this.SkipValue(xmlNode);
		return result;
	}
	return $asm09.System.Xml.XmlConverter.ToInt64$0(this.ReadContentAsString());
};
$asm09.System.Xml.XmlBaseReader.prototype.ReadContentAsInt = function () {
	var xmlNode = this.Node;
	if (!(this.value || !xmlNode.IsAtomicValue)) {
		var result = xmlNode.Value.ToInt();
		this.SkipValue(xmlNode);
		return result;
	}
	return $asm09.System.Xml.XmlConverter.ToInt32$0(this.ReadContentAsString());
};
$asm09.System.Xml.XmlBaseReader.prototype.ReadContentAsDateTime = function () {
	var xmlNode = this.Node;
	if (!(this.value || !xmlNode.IsAtomicValue)) {
		var result = xmlNode.Value.ToDateTime().MemberwiseClone();
		this.SkipValue(xmlNode);
		return result;
	}
	return $asm09.System.Xml.XmlConverter.ToDateTime$1(this.ReadContentAsString());
};
$asm09.System.Xml.XmlBaseReader.prototype.ReadContentAsDouble = function () {
	var xmlNode = this.Node;
	if (!(this.value || !xmlNode.IsAtomicValue)) {
		var result = xmlNode.Value.ToDouble();
		this.SkipValue(xmlNode);
		return result;
	}
	return $asm09.System.Xml.XmlConverter.ToDouble$0(this.ReadContentAsString());
};
$asm09.System.Xml.XmlBaseReader.prototype.ReadContentAsFloat = function () {
	var xmlNode = this.Node;
	if (!(this.value || !xmlNode.IsAtomicValue)) {
		var result = xmlNode.Value.ToSingle();
		this.SkipValue(xmlNode);
		return result;
	}
	return $asm09.System.Xml.XmlConverter.ToSingle$0(this.ReadContentAsString());
};
$asm09.System.Xml.XmlBaseReader.prototype.ReadContentAsDecimal = function () {
	var xmlNode = this.Node;
	if (!(this.value || !xmlNode.IsAtomicValue)) {
		var result = xmlNode.Value.ToDecimal().MemberwiseClone();
		this.SkipValue(xmlNode);
		return result;
	}
	return $asm09.System.Xml.XmlConverter.ToDecimal$0(this.ReadContentAsString());
};
$asm09.System.Xml.XmlBaseReader.prototype.ReadContentAsUniqueId = function () {
	var xmlNode = this.Node;
	if (!(this.value || !xmlNode.IsAtomicValue)) {
		var result = xmlNode.Value.ToUniqueId();
		this.SkipValue(xmlNode);
		return result;
	}
	return $asm09.System.Xml.XmlConverter.ToUniqueId$0(this.ReadContentAsString());
};
$asm09.System.Xml.XmlBaseReader.prototype.ReadContentAsTimeSpan = function () {
	var xmlNode = this.Node;
	if (!(this.value || !xmlNode.IsAtomicValue)) {
		var result = xmlNode.Value.ToTimeSpan().MemberwiseClone();
		this.SkipValue(xmlNode);
		return result;
	}
	return $asm09.System.Xml.XmlConverter.ToTimeSpan$0(this.ReadContentAsString());
};
$asm09.System.Xml.XmlBaseReader.prototype.ReadContentAsGuid = function () {
	var xmlNode = this.Node;
	if (!(this.value || !xmlNode.IsAtomicValue)) {
		var result = xmlNode.Value.ToGuid().MemberwiseClone();
		this.SkipValue(xmlNode);
		return result;
	}
	return $asm09.System.Xml.XmlConverter.ToGuid$0(this.ReadContentAsString());
};
$asm09.System.Xml.XmlBaseReader.prototype.ReadContentAsObject = function () {
	var xmlNode = this.Node;
	if (!(this.value || !xmlNode.IsAtomicValue)) {
		var result = xmlNode.Value.ToObject();
		this.SkipValue(xmlNode);
		return result;
	}
	return this.ReadContentAsString();
};
$asm09.System.Xml.XmlBaseReader.prototype.ReadContentAs = function (type, namespaceResolver) {
	if (type === System.UInt64) {
		if (!(this.value || !this.node.IsAtomicValue)) {
			var num = this.node.Value.ToULong();
			this.SkipValue(this.node);
			return num;
		}
		return $asm09.System.Xml.XmlConverter.ToUInt64$0(this.ReadContentAsString());
	} else {
		if (type === System.Boolean) {
			return this.ReadContentAsBoolean();
		}
		if (type === System.Int32) {
			return this.ReadContentAsInt();
		}
		if (type === System.Int64) {
			return this.ReadContentAsLong();
		}
		if (type === System.Single) {
			return this.ReadContentAsFloat();
		}
		if (type === System.Double) {
			return this.ReadContentAsDouble();
		}
		if (type === System.Decimal) {
			return this.ReadContentAsDecimal();
		}
		if (type === System.DateTime) {
			return this.ReadContentAsDateTime();
		}
		if (type === System.Xml.UniqueId) {
			return this.ReadContentAsUniqueId();
		}
		if (type === System.Guid) {
			return this.ReadContentAsGuid();
		}
		if (type === System.TimeSpan) {
			return this.ReadContentAsTimeSpan();
		}
		if (type === System.Object) {
			return this.ReadContentAsObject();
		}
		return System.Xml.XmlDictionaryReader.prototype.ReadContentAs.call(this, type, namespaceResolver);
	}
};
$asm09.System.Xml.XmlBaseReader.prototype.ResolveEntity = function () {
	throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$2("XmlInvalidOperation")]));
};
$asm09.System.Xml.XmlBaseReader.prototype.Skip = function () {
	if (this.node.ReadState !== System.Xml.ReadState.Interactive) {
		return;
	}
	if (!(((this.node.NodeType !== System.Xml.XmlNodeType.Element) && 
				!this.MoveToElement()) || this.IsEmptyElement)) {
	__loop0__: 
		for (var num = this.Depth; this.Read() && (num < this.Depth); ) {
		}
		if (this.node.NodeType === System.Xml.XmlNodeType.EndElement) {
			this.Read();
			return;
		}
	} else {
		this.Read();
	}
};
$asm09.System.Xml.XmlBaseReader.prototype.get_Value = function () {
	if (this.value === null) {
		this.value = this.node.ValueAsString;
	}
	return this.value;
};
$asm09.System.Xml.XmlBaseReader.prototype.get_ValueType = function () {
	if (!(this.value || JSIL.Cast(this.node.QNameType, System.Boolean))) {
		var type = this.node.Value.ToType();
		if (this.node.IsAtomicValue) {
			return type;
		}
		if (type === System.Array.Of(System.Byte)) {
			return type;
		}
	}
	return System.String;
};
$asm09.System.Xml.XmlBaseReader.prototype.get_XmlLang = function () {
	return this.nsMgr.XmlLang;
};
$asm09.System.Xml.XmlBaseReader.prototype.get_XmlSpace = function () {
	return this.nsMgr.XmlSpace;
};
$asm09.System.Xml.XmlBaseReader.prototype.TryGetLocalNameAsDictionaryString = function (/* ref */ localName) {
	return this.node.TryGetLocalNameAsDictionaryString(/* ref */ localName);
};
$asm09.System.Xml.XmlBaseReader.prototype.TryGetNamespaceUriAsDictionaryString = function (/* ref */ localName) {
	return this.node.TryGetNamespaceUriAsDictionaryString(/* ref */ localName);
};
$asm09.System.Xml.XmlBaseReader.prototype.TryGetValueAsDictionaryString = function (/* ref */ value) {
	return this.node.TryGetValueAsDictionaryString(/* ref */ value);
};
$asm09.System.Xml.XmlBaseReader.prototype.ReadInt16Array$0 = function (localName, namespaceUri) {
	return $asm09.System.Xml.Int16ArrayHelperWithString.Instance.ReadArray$0(this, localName, namespaceUri, this.quotas.MaxArrayLength);
};
$asm09.System.Xml.XmlBaseReader.prototype.ReadInt16Array$1 = function (localName, namespaceUri) {
	return $asm09.System.Xml.Int16ArrayHelperWithDictionaryString.Instance.ReadArray$0(this, localName, namespaceUri, this.quotas.MaxArrayLength);
};
$asm09.System.Xml.XmlBaseReader.prototype.ReadInt32Array$0 = function (localName, namespaceUri) {
	return $asm09.System.Xml.Int32ArrayHelperWithString.Instance.ReadArray$0(this, localName, namespaceUri, this.quotas.MaxArrayLength);
};
$asm09.System.Xml.XmlBaseReader.prototype.ReadInt32Array$1 = function (localName, namespaceUri) {
	return $asm09.System.Xml.Int32ArrayHelperWithDictionaryString.Instance.ReadArray$0(this, localName, namespaceUri, this.quotas.MaxArrayLength);
};
$asm09.System.Xml.XmlBaseReader.prototype.ReadInt64Array$0 = function (localName, namespaceUri) {
	return $asm09.System.Xml.Int64ArrayHelperWithString.Instance.ReadArray$0(this, localName, namespaceUri, this.quotas.MaxArrayLength);
};
$asm09.System.Xml.XmlBaseReader.prototype.ReadInt64Array$1 = function (localName, namespaceUri) {
	return $asm09.System.Xml.Int64ArrayHelperWithDictionaryString.Instance.ReadArray$0(this, localName, namespaceUri, this.quotas.MaxArrayLength);
};
$asm09.System.Xml.XmlBaseReader.prototype.ReadSingleArray$0 = function (localName, namespaceUri) {
	return $asm09.System.Xml.SingleArrayHelperWithString.Instance.ReadArray$0(this, localName, namespaceUri, this.quotas.MaxArrayLength);
};
$asm09.System.Xml.XmlBaseReader.prototype.ReadSingleArray$1 = function (localName, namespaceUri) {
	return $asm09.System.Xml.SingleArrayHelperWithDictionaryString.Instance.ReadArray$0(this, localName, namespaceUri, this.quotas.MaxArrayLength);
};
$asm09.System.Xml.XmlBaseReader.prototype.ReadDoubleArray$0 = function (localName, namespaceUri) {
	return $asm09.System.Xml.DoubleArrayHelperWithString.Instance.ReadArray$0(this, localName, namespaceUri, this.quotas.MaxArrayLength);
};
$asm09.System.Xml.XmlBaseReader.prototype.ReadDoubleArray$1 = function (localName, namespaceUri) {
	return $asm09.System.Xml.DoubleArrayHelperWithDictionaryString.Instance.ReadArray$0(this, localName, namespaceUri, this.quotas.MaxArrayLength);
};
$asm09.System.Xml.XmlBaseReader.prototype.ReadDecimalArray$0 = function (localName, namespaceUri) {
	return $asm09.System.Xml.DecimalArrayHelperWithString.Instance.ReadArray$0(this, localName, namespaceUri, this.quotas.MaxArrayLength);
};
$asm09.System.Xml.XmlBaseReader.prototype.ReadDecimalArray$1 = function (localName, namespaceUri) {
	return $asm09.System.Xml.DecimalArrayHelperWithDictionaryString.Instance.ReadArray$0(this, localName, namespaceUri, this.quotas.MaxArrayLength);
};
$asm09.System.Xml.XmlBaseReader.prototype.ReadDateTimeArray$0 = function (localName, namespaceUri) {
	return $asm09.System.Xml.DateTimeArrayHelperWithString.Instance.ReadArray$0(this, localName, namespaceUri, this.quotas.MaxArrayLength);
};
$asm09.System.Xml.XmlBaseReader.prototype.ReadDateTimeArray$1 = function (localName, namespaceUri) {
	return $asm09.System.Xml.DateTimeArrayHelperWithDictionaryString.Instance.ReadArray$0(this, localName, namespaceUri, this.quotas.MaxArrayLength);
};
$asm09.System.Xml.XmlBaseReader.prototype.ReadGuidArray$0 = function (localName, namespaceUri) {
	return $asm09.System.Xml.GuidArrayHelperWithString.Instance.ReadArray$0(this, localName, namespaceUri, this.quotas.MaxArrayLength);
};
$asm09.System.Xml.XmlBaseReader.prototype.ReadGuidArray$1 = function (localName, namespaceUri) {
	return $asm09.System.Xml.GuidArrayHelperWithDictionaryString.Instance.ReadArray$0(this, localName, namespaceUri, this.quotas.MaxArrayLength);
};
$asm09.System.Xml.XmlBaseReader.prototype.ReadTimeSpanArray$0 = function (localName, namespaceUri) {
	return $asm09.System.Xml.TimeSpanArrayHelperWithString.Instance.ReadArray$0(this, localName, namespaceUri, this.quotas.MaxArrayLength);
};
$asm09.System.Xml.XmlBaseReader.prototype.ReadTimeSpanArray$1 = function (localName, namespaceUri) {
	return $asm09.System.Xml.TimeSpanArrayHelperWithDictionaryString.Instance.ReadArray$0(this, localName, namespaceUri, this.quotas.MaxArrayLength);
};
$asm09.System.Xml.XmlBaseReader.prototype.GetOpenElements = function () {
	var text = System.String.Empty;
__loop0__: 
	for (var i = this.depth; i > 0; --i) {
		var string = this.elementNodes[i].LocalName.GetString$1();
		if (i !== this.depth) {
			text = ((text + ", "));
		}
		text = ((text + string));
	}
	return text;
};
$asm09.System.Xml.XmlBaseReader.prototype.GetCharBuffer = function (count) {
	if (count > 1024) {
		return JSIL.Array.New(System.Char, count);
	}
	if (!((this.chars !== null) && (this.chars.length >= count))) {
		this.chars = JSIL.Array.New(System.Char, count);
	}
	return this.chars;
};
JSIL.OverloadedMethod($asm09.System.Xml.XmlBaseReader.prototype, "get_Item", [
		["get_Item$0", [System.Int32]], 
		["get_Item$1", [System.String]], 
		["get_Item$2", [System.String, System.String]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlBaseReader.prototype, "AddAttribute", [
		["AddAttribute$0", [$asm09.System.Xml.XmlBaseReader.QNameType, System.Boolean]], 
		["AddAttribute$1", []]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlBaseReader.prototype, "GetAttributeNode", [
		["GetAttributeNode$0", [System.Int32]], 
		["GetAttributeNode$1", [System.String]], 
		["GetAttributeNode$2", [System.String, System.String]], 
		["GetAttributeNode$3", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlBaseReader.prototype, "GetAttribute", [
		["GetAttribute$0", [System.Int32]], 
		["GetAttribute$1", [System.String]], 
		["GetAttribute$2", [System.String, System.String]], 
		["GetAttribute$3", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlBaseReader.prototype, "LookupNamespace", [
		["LookupNamespace$0", [System.String]], 
		["LookupNamespace$1", [$asm09.System.Xml.PrefixHandleType]], 
		["LookupNamespace$2", [$asm09.System.Xml.PrefixHandle]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlBaseReader.prototype, "ProcessAttributes", [
		["ProcessAttributes$0", []], 
		["ProcessAttributes$1", [System.Array.Of($asm09.System.Xml.XmlBaseReader.XmlAttributeNode), System.Int32]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlBaseReader.prototype, "MoveToAttribute", [
		["MoveToAttribute$0", [System.Int32]], 
		["MoveToAttribute$1", [System.String]], 
		["MoveToAttribute$2", [System.String, System.String]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlBaseReader.prototype, "IsLocalName", [
		["IsLocalName$0", [System.String]], 
		["IsLocalName$1", [System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlBaseReader.prototype, "IsNamespaceUri", [
		["IsNamespaceUri$0", [System.String]], 
		["IsNamespaceUri$1", [System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlBaseReader.prototype, "IsStartElement", [
		["IsStartElement$0", []], 
		["IsStartElement$1", [System.String]], 
		["IsStartElement$2", [System.String, System.String]], 
		["IsStartElement$3", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlBaseReader.prototype, "IndexOfLocalName", [
		["IndexOfLocalName$0", [System.Array.Of(System.String), System.String]], 
		["IndexOfLocalName$1", [System.Array.Of(System.Xml.XmlDictionaryString), System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlBaseReader.prototype, "ReadStartElement", [
		["ReadStartElement$0", []], 
		["ReadStartElement$1", [System.String]], 
		["ReadStartElement$2", [System.String, System.String]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlBaseReader.prototype, "ReadContentAsBase64", [
		["ReadContentAsBase64$0", []], 
		["ReadContentAsBase64$1", [System.Array.Of(System.Byte), System.Int32, System.Int32]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlBaseReader.prototype, "ReadInt16Array", [
		["ReadInt16Array$0", [System.String, System.String]], 
		["ReadInt16Array$1", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlBaseReader.prototype, "ReadInt32Array", [
		["ReadInt32Array$0", [System.String, System.String]], 
		["ReadInt32Array$1", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlBaseReader.prototype, "ReadInt64Array", [
		["ReadInt64Array$0", [System.String, System.String]], 
		["ReadInt64Array$1", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlBaseReader.prototype, "ReadSingleArray", [
		["ReadSingleArray$0", [System.String, System.String]], 
		["ReadSingleArray$1", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlBaseReader.prototype, "ReadDoubleArray", [
		["ReadDoubleArray$0", [System.String, System.String]], 
		["ReadDoubleArray$1", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlBaseReader.prototype, "ReadDecimalArray", [
		["ReadDecimalArray$0", [System.String, System.String]], 
		["ReadDecimalArray$1", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlBaseReader.prototype, "ReadDateTimeArray", [
		["ReadDateTimeArray$0", [System.String, System.String]], 
		["ReadDateTimeArray$1", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlBaseReader.prototype, "ReadGuidArray", [
		["ReadGuidArray$0", [System.String, System.String]], 
		["ReadGuidArray$1", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlBaseReader.prototype, "ReadTimeSpanArray", [
		["ReadTimeSpanArray$0", [System.String, System.String]], 
		["ReadTimeSpanArray$1", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader, "Base64Encoding", 
	$asm09.System.Xml.XmlBaseReader.get_Base64Encoding, null);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.prototype, "BufferReader", 
	$asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader, null);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.prototype, "Node", 
	$asm09.System.Xml.XmlBaseReader.prototype.get_Node, null);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.prototype, "ElementNode", 
	$asm09.System.Xml.XmlBaseReader.prototype.get_ElementNode, null);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.prototype, "OutsideRootElement", 
	$asm09.System.Xml.XmlBaseReader.prototype.get_OutsideRootElement, null);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.prototype, "CanReadBinaryContent", 
	$asm09.System.Xml.XmlBaseReader.prototype.get_CanReadBinaryContent, null);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.prototype, "CanReadValueChunk", 
	$asm09.System.Xml.XmlBaseReader.prototype.get_CanReadValueChunk, null);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.prototype, "BaseURI", 
	$asm09.System.Xml.XmlBaseReader.prototype.get_BaseURI, null);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.prototype, "HasValue", 
	$asm09.System.Xml.XmlBaseReader.prototype.get_HasValue, null);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.prototype, "IsDefault", 
	$asm09.System.Xml.XmlBaseReader.prototype.get_IsDefault, null);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.prototype, "Item", 
	$asm09.System.Xml.XmlBaseReader.prototype.get_Item$0, null);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.prototype, "Item", 
	$asm09.System.Xml.XmlBaseReader.prototype.get_Item$1, null);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.prototype, "Item", 
	$asm09.System.Xml.XmlBaseReader.prototype.get_Item$2, null);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.prototype, "AttributeCount", 
	$asm09.System.Xml.XmlBaseReader.prototype.get_AttributeCount, null);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.prototype, "Depth", 
	$asm09.System.Xml.XmlBaseReader.prototype.get_Depth, null);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.prototype, "EOF", 
	$asm09.System.Xml.XmlBaseReader.prototype.get_EOF, null);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.prototype, "IsEmptyElement", 
	$asm09.System.Xml.XmlBaseReader.prototype.get_IsEmptyElement, null);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.prototype, "LocalName", 
	$asm09.System.Xml.XmlBaseReader.prototype.get_LocalName, null);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.prototype, "NamespaceURI", 
	$asm09.System.Xml.XmlBaseReader.prototype.get_NamespaceURI, null);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.prototype, "NameTable", 
	$asm09.System.Xml.XmlBaseReader.prototype.get_NameTable, null);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.prototype, "NodeType", 
	$asm09.System.Xml.XmlBaseReader.prototype.get_NodeType, null);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.prototype, "Prefix", 
	$asm09.System.Xml.XmlBaseReader.prototype.get_Prefix, null);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.prototype, "ReadState", 
	$asm09.System.Xml.XmlBaseReader.prototype.get_ReadState, null);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.prototype, "Value", 
	$asm09.System.Xml.XmlBaseReader.prototype.get_Value, null);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.prototype, "ValueType", 
	$asm09.System.Xml.XmlBaseReader.prototype.get_ValueType, null);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.prototype, "XmlLang", 
	$asm09.System.Xml.XmlBaseReader.prototype.get_XmlLang, null);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.prototype, "XmlSpace", 
	$asm09.System.Xml.XmlBaseReader.prototype.get_XmlSpace, null);
Object.defineProperty($asm09.System.Xml.XmlBaseReader, "xmlns", {
		"value": "xmlns"}
);
Object.defineProperty($asm09.System.Xml.XmlBaseReader, "xml", {
		"value": "xml"}
);
Object.defineProperty($asm09.System.Xml.XmlBaseReader, "xmlnsNamespace", {
		"value": "http://www.w3.org/2000/xmlns/"}
);
Object.defineProperty($asm09.System.Xml.XmlBaseReader, "xmlNamespace", {
		"value": "http://www.w3.org/XML/1998/namespace"}
);
$asm09.System.Xml.XmlBaseReader.prototype.bufferReader = null;
$asm09.System.Xml.XmlBaseReader.prototype.node = null;
$asm09.System.Xml.XmlBaseReader.prototype.nsMgr = null;
$asm09.System.Xml.XmlBaseReader.prototype.elementNodes = null;
$asm09.System.Xml.XmlBaseReader.prototype.attributeNodes = null;
$asm09.System.Xml.XmlBaseReader.prototype.atomicTextNode = null;
$asm09.System.Xml.XmlBaseReader.prototype.depth = 0;
$asm09.System.Xml.XmlBaseReader.prototype.attributeCount = 0;
$asm09.System.Xml.XmlBaseReader.prototype.attributeStart = 0;
$asm09.System.Xml.XmlBaseReader.prototype.quotas = null;
$asm09.System.Xml.XmlBaseReader.prototype.nameTable = null;
$asm09.System.Xml.XmlBaseReader.prototype.declarationNode = null;
$asm09.System.Xml.XmlBaseReader.prototype.complexTextNode = null;
$asm09.System.Xml.XmlBaseReader.prototype.whitespaceTextNode = null;
$asm09.System.Xml.XmlBaseReader.prototype.cdataNode = null;
$asm09.System.Xml.XmlBaseReader.prototype.commentNode = null;
$asm09.System.Xml.XmlBaseReader.prototype.rootElementNode = null;
$asm09.System.Xml.XmlBaseReader.prototype.attributeIndex = 0;
$asm09.System.Xml.XmlBaseReader.prototype.chars = null;
$asm09.System.Xml.XmlBaseReader.prototype.prefix = null;
$asm09.System.Xml.XmlBaseReader.prototype.localName = null;
$asm09.System.Xml.XmlBaseReader.prototype.ns = null;
$asm09.System.Xml.XmlBaseReader.prototype.value = null;
$asm09.System.Xml.XmlBaseReader.prototype.trailCharCount = 0;
$asm09.System.Xml.XmlBaseReader.prototype.trailByteCount = 0;
$asm09.System.Xml.XmlBaseReader.prototype.trailChars = null;
$asm09.System.Xml.XmlBaseReader.prototype.trailBytes = null;
$asm09.System.Xml.XmlBaseReader.prototype.rootElement = false;
$asm09.System.Xml.XmlBaseReader.prototype.readingElement = false;
$asm09.System.Xml.XmlBaseReader.prototype.attributeSorter = null;
$asm09.System.Xml.XmlBaseReader.initialNode = null;
$asm09.System.Xml.XmlBaseReader.endOfFileNode = null;
$asm09.System.Xml.XmlBaseReader.closedNode = null;
$asm09.System.Xml.XmlBaseReader.base64Encoding = null;
$asm09.System.Xml.XmlBaseReader._cctor = function () {
	$asm09.System.Xml.XmlBaseReader.initialNode = new $asm09.System.Xml.XmlBaseReader.XmlInitialNode($asm09.System.Xml.XmlBufferReader.Empty);
	$asm09.System.Xml.XmlBaseReader.endOfFileNode = new $asm09.System.Xml.XmlBaseReader.XmlEndOfFileNode($asm09.System.Xml.XmlBufferReader.Empty);
	$asm09.System.Xml.XmlBaseReader.closedNode = new $asm09.System.Xml.XmlBaseReader.XmlClosedNode($asm09.System.Xml.XmlBufferReader.Empty);
};

$asm09.System.Xml.XmlBaseReader.XmlNode.prototype._ctor = function (nodeType, prefix, localName, value, nodeFlags, readState, attributeTextNode, depthDelta) {
	System.Object.prototype._ctor.call(this);
	this.nodeType = nodeType;
	this.prefix = prefix;
	this.localName = localName;
	this.value = value;
	this.ns = $asm09.System.Xml.XmlBaseReader.NamespaceManager.EmptyNamespace;
	this.hasValue = ((nodeFlags & $asm09.System.Xml.XmlBaseReader.XmlNode.XmlNodeFlags.HasValue) !== $asm09.System.Xml.XmlBaseReader.XmlNode.XmlNodeFlags.None);
	this.canGetAttribute = ((nodeFlags & $asm09.System.Xml.XmlBaseReader.XmlNode.XmlNodeFlags.CanGetAttribute) !== $asm09.System.Xml.XmlBaseReader.XmlNode.XmlNodeFlags.None);
	this.canMoveToElement = ((nodeFlags & $asm09.System.Xml.XmlBaseReader.XmlNode.XmlNodeFlags.CanMoveToElement) !== $asm09.System.Xml.XmlBaseReader.XmlNode.XmlNodeFlags.None);
	this.isAtomicValue = ((nodeFlags & $asm09.System.Xml.XmlBaseReader.XmlNode.XmlNodeFlags.AtomicValue) !== $asm09.System.Xml.XmlBaseReader.XmlNode.XmlNodeFlags.None);
	this.skipValue = ((nodeFlags & $asm09.System.Xml.XmlBaseReader.XmlNode.XmlNodeFlags.SkipValue) !== $asm09.System.Xml.XmlBaseReader.XmlNode.XmlNodeFlags.None);
	this.hasContent = ((nodeFlags & $asm09.System.Xml.XmlBaseReader.XmlNode.XmlNodeFlags.HasContent) !== $asm09.System.Xml.XmlBaseReader.XmlNode.XmlNodeFlags.None);
	this.readState = readState;
	this.attributeTextNode = attributeTextNode;
	this.exitScope = (nodeType === System.Xml.XmlNodeType.EndElement);
	this.depthDelta = depthDelta;
	this.isEmptyElement = false;
	this.qnameType = $asm09.System.Xml.XmlBaseReader.QNameType.Normal;
};
$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.get_HasValue = function () {
	return this.hasValue;
};
$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.get_ReadState = function () {
	return this.readState;
};
$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.get_LocalName = function () {
	return this.localName;
};
$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.get_Prefix = function () {
	return this.prefix;
};
$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.get_CanGetAttribute = function () {
	return this.canGetAttribute;
};
$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.get_CanMoveToElement = function () {
	return this.canMoveToElement;
};
$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.get_AttributeText = function () {
	return this.attributeTextNode;
};
$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.get_SkipValue = function () {
	return this.skipValue;
};
$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.get_Value = function () {
	return this.value;
};
$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.get_DepthDelta = function () {
	return this.depthDelta;
};
$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.get_HasContent = function () {
	return this.hasContent;
};
$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.get_NodeType = function () {
	return this.nodeType;
};
$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.set_NodeType = function (value) {
	this.nodeType = value;
};
$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.get_QNameType = function () {
	return this.qnameType;
};
$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.set_QNameType = function (value) {
	this.qnameType = value;
};
$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.get_Namespace = function () {
	return this.ns;
};
$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.set_Namespace = function (value) {
	this.ns = value;
};
$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.get_IsAtomicValue = function () {
	return this.isAtomicValue;
};
$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.set_IsAtomicValue = function (value) {
	this.isAtomicValue = value;
};
$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.get_ExitScope = function () {
	return this.exitScope;
};
$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.set_ExitScope = function (value) {
	this.exitScope = value;
};
$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.get_IsEmptyElement = function () {
	return this.isEmptyElement;
};
$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.set_IsEmptyElement = function (value) {
	this.isEmptyElement = value;
};
$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.IsLocalName$0 = function (localName) {
	if (this.qnameType === 0) {
		return $asm09.System.Xml.StringHandle.op_Equality$1(this.LocalName, localName);
	}
	return $asm09.System.Xml.PrefixHandle.op_Equality$0(this.Namespace.Prefix, localName);
};
$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.IsLocalName$1 = function (localName) {
	if (this.qnameType === 0) {
		return $asm09.System.Xml.StringHandle.op_Equality$0(this.LocalName, localName);
	}
	return $asm09.System.Xml.PrefixHandle.op_Equality$1(this.Namespace.Prefix, localName);
};
$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.IsNamespaceUri$0 = function (ns) {
	if (this.qnameType === 0) {
		return this.Namespace.IsUri$0(ns);
	}
	return ns == "http://www.w3.org/2000/xmlns/";
};
$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.IsNamespaceUri$1 = function (ns) {
	if (this.qnameType === 0) {
		return this.Namespace.IsUri$1(ns);
	}
	return ns.Value == "http://www.w3.org/2000/xmlns/";
};
$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.IsLocalNameAndNamespaceUri$0 = function (localName, ns) {
	if (this.qnameType === 0) {
		return ($asm09.System.Xml.StringHandle.op_Equality$1(this.LocalName, localName) && this.Namespace.IsUri$0(ns));
	}
	return ($asm09.System.Xml.PrefixHandle.op_Equality$0(this.Namespace.Prefix, localName) && (ns == "http://www.w3.org/2000/xmlns/"));
};
$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.IsLocalNameAndNamespaceUri$1 = function (localName, ns) {
	if (this.qnameType === 0) {
		return ($asm09.System.Xml.StringHandle.op_Equality$0(this.LocalName, localName) && this.Namespace.IsUri$1(ns));
	}
	return ($asm09.System.Xml.PrefixHandle.op_Equality$1(this.Namespace.Prefix, localName) && (ns.Value == "http://www.w3.org/2000/xmlns/"));
};
$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.IsPrefixAndLocalName = function (prefix, localName) {
	if (this.qnameType === 0) {
		return ($asm09.System.Xml.PrefixHandle.op_Equality$0(this.Prefix, prefix) && $asm09.System.Xml.StringHandle.op_Equality$1(this.LocalName, localName));
	}
	return ((prefix == "xmlns") && $asm09.System.Xml.PrefixHandle.op_Equality$0(this.Namespace.Prefix, localName));
};
$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.TryGetLocalNameAsDictionaryString = function (/* ref */ localName) {
	if (this.qnameType === 0) {
		return this.LocalName.TryGetDictionaryString(/* ref */ localName);
	}
	localName.value = null;
	return false;
};
$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.TryGetNamespaceUriAsDictionaryString = function (/* ref */ ns) {
	if (this.qnameType === 0) {
		return this.Namespace.Uri.TryGetDictionaryString(/* ref */ ns);
	}
	ns.value = null;
	return false;
};
$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.TryGetValueAsDictionaryString = function (/* ref */ value) {
	if (this.qnameType === 0) {
		return this.Value.TryGetDictionaryString(/* ref */ value);
	}
	value.value = null;
	return false;
};
$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.get_ValueAsString = function () {
	if (this.qnameType === 0) {
		return this.Value.GetString();
	}
	return this.Namespace.Uri.GetString$1();
};
JSIL.OverloadedMethod($asm09.System.Xml.XmlBaseReader.XmlNode.prototype, "IsLocalName", [
		["IsLocalName$0", [System.String]], 
		["IsLocalName$1", [System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlBaseReader.XmlNode.prototype, "IsNamespaceUri", [
		["IsNamespaceUri$0", [System.String]], 
		["IsNamespaceUri$1", [System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlBaseReader.XmlNode.prototype, "IsLocalNameAndNamespaceUri", [
		["IsLocalNameAndNamespaceUri$0", [System.String, System.String]], 
		["IsLocalNameAndNamespaceUri$1", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.XmlNode.prototype, "HasValue", 
	$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.get_HasValue, null);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.XmlNode.prototype, "ReadState", 
	$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.get_ReadState, null);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.XmlNode.prototype, "LocalName", 
	$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.get_LocalName, null);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.XmlNode.prototype, "Prefix", 
	$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.get_Prefix, null);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.XmlNode.prototype, "CanGetAttribute", 
	$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.get_CanGetAttribute, null);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.XmlNode.prototype, "CanMoveToElement", 
	$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.get_CanMoveToElement, null);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.XmlNode.prototype, "AttributeText", 
	$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.get_AttributeText, null);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.XmlNode.prototype, "SkipValue", 
	$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.get_SkipValue, null);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.XmlNode.prototype, "Value", 
	$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.get_Value, null);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.XmlNode.prototype, "DepthDelta", 
	$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.get_DepthDelta, null);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.XmlNode.prototype, "HasContent", 
	$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.get_HasContent, null);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.XmlNode.prototype, "NodeType", 
	$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.get_NodeType, $asm09.System.Xml.XmlBaseReader.XmlNode.prototype.set_NodeType);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.XmlNode.prototype, "QNameType", 
	$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.get_QNameType, $asm09.System.Xml.XmlBaseReader.XmlNode.prototype.set_QNameType);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.XmlNode.prototype, "Namespace", 
	$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.get_Namespace, $asm09.System.Xml.XmlBaseReader.XmlNode.prototype.set_Namespace);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.XmlNode.prototype, "IsAtomicValue", 
	$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.get_IsAtomicValue, $asm09.System.Xml.XmlBaseReader.XmlNode.prototype.set_IsAtomicValue);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.XmlNode.prototype, "ExitScope", 
	$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.get_ExitScope, $asm09.System.Xml.XmlBaseReader.XmlNode.prototype.set_ExitScope);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.XmlNode.prototype, "IsEmptyElement", 
	$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.get_IsEmptyElement, $asm09.System.Xml.XmlBaseReader.XmlNode.prototype.set_IsEmptyElement);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.XmlNode.prototype, "ValueAsString", 
	$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.get_ValueAsString, null);
$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.nodeType = 0;
$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.prefix = null;
$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.localName = null;
$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.value = null;
$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.ns = null;
$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.hasValue = false;
$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.canGetAttribute = false;
$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.canMoveToElement = false;
$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.readState = 0;
$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.attributeTextNode = null;
$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.exitScope = false;
$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.depthDelta = 0;
$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.isAtomicValue = false;
$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.skipValue = false;
$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.qnameType = 0;
$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.hasContent = false;
$asm09.System.Xml.XmlBaseReader.XmlNode.prototype.isEmptyElement = false;

$asm09.System.Xml.XmlBaseReader.XmlElementNode.prototype._ctor$0 = function (bufferReader) {
	this._ctor$1(new $asm09.System.Xml.PrefixHandle(bufferReader), new $asm09.System.Xml.StringHandle(bufferReader), new $asm09.System.Xml.ValueHandle(bufferReader));
};
$asm09.System.Xml.XmlBaseReader.XmlElementNode.prototype._ctor$1 = function (prefix, localName, value) {
	$asm09.System.Xml.XmlBaseReader.XmlNode.prototype._ctor.call(
		this, System.Xml.XmlNodeType.Element, 
		prefix, 
		localName, 
		value, 
		33, 
		System.Xml.ReadState.Interactive, 
		null, 
		-1
	);
	this.endElementNode = new $asm09.System.Xml.XmlBaseReader.XmlEndElementNode(prefix, localName, value);
};
$asm09.System.Xml.XmlBaseReader.XmlElementNode.prototype.get_EndElement = function () {
	return this.endElementNode;
};
$asm09.System.Xml.XmlBaseReader.XmlElementNode.prototype.get_BufferOffset = function () {
	return this.bufferOffset;
};
$asm09.System.Xml.XmlBaseReader.XmlElementNode.prototype.set_BufferOffset = function (value) {
	this.bufferOffset = value;
};
JSIL.OverloadedMethod($asm09.System.Xml.XmlBaseReader.XmlElementNode.prototype, "_ctor", [
		["_ctor$0", [$asm09.System.Xml.XmlBufferReader]], 
		["_ctor$1", [$asm09.System.Xml.PrefixHandle, $asm09.System.Xml.StringHandle, $asm09.System.Xml.ValueHandle]]
	]);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.XmlElementNode.prototype, "EndElement", 
	$asm09.System.Xml.XmlBaseReader.XmlElementNode.prototype.get_EndElement, null);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.XmlElementNode.prototype, "BufferOffset", 
	$asm09.System.Xml.XmlBaseReader.XmlElementNode.prototype.get_BufferOffset, $asm09.System.Xml.XmlBaseReader.XmlElementNode.prototype.set_BufferOffset);
$asm09.System.Xml.XmlBaseReader.XmlElementNode.prototype.endElementNode = null;
$asm09.System.Xml.XmlBaseReader.XmlElementNode.prototype.bufferOffset = 0;
$asm09.System.Xml.XmlBaseReader.XmlElementNode.prototype.NameOffset = 0;
$asm09.System.Xml.XmlBaseReader.XmlElementNode.prototype.NameLength = 0;

$asm09.System.Xml.XmlBaseReader.XmlAttributeNode.prototype._ctor$0 = function (bufferReader) {
	this._ctor$1(new $asm09.System.Xml.PrefixHandle(bufferReader), new $asm09.System.Xml.StringHandle(bufferReader), new $asm09.System.Xml.ValueHandle(bufferReader));
};
$asm09.System.Xml.XmlBaseReader.XmlAttributeNode.prototype._ctor$1 = function (prefix, localName, value) {
	$asm09.System.Xml.XmlBaseReader.XmlNode.prototype._ctor.call(
		this, System.Xml.XmlNodeType.Attribute, 
		prefix, 
		localName, 
		value, 
		15, 
		System.Xml.ReadState.Interactive, 
		new $asm09.System.Xml.XmlBaseReader.XmlAttributeTextNode(prefix, localName, value), 
		0
	);
};
JSIL.OverloadedMethod($asm09.System.Xml.XmlBaseReader.XmlAttributeNode.prototype, "_ctor", [
		["_ctor$0", [$asm09.System.Xml.XmlBufferReader]], 
		["_ctor$1", [$asm09.System.Xml.PrefixHandle, $asm09.System.Xml.StringHandle, $asm09.System.Xml.ValueHandle]]
	]);

$asm09.System.Xml.XmlBaseReader.XmlEndElementNode.prototype._ctor = function (prefix, localName, value) {
	$asm09.System.Xml.XmlBaseReader.XmlNode.prototype._ctor.call(
		this, System.Xml.XmlNodeType.EndElement, 
		prefix, 
		localName, 
		value, 
		$asm09.System.Xml.XmlBaseReader.XmlNode.XmlNodeFlags.HasContent, 
		System.Xml.ReadState.Interactive, 
		null, 
		-1
	);
};

$asm09.System.Xml.XmlBaseReader.XmlTextNode.prototype._ctor = function (nodeType, prefix, localName, value, nodeFlags, readState, attributeTextNode, depthDelta) {
	$asm09.System.Xml.XmlBaseReader.XmlNode.prototype._ctor.call(
		this, nodeType, 
		prefix, 
		localName, 
		value, 
		nodeFlags, 
		readState, 
		attributeTextNode, 
		depthDelta
	);
};

$asm09.System.Xml.XmlBaseReader.XmlAtomicTextNode.prototype._ctor = function (bufferReader) {
	$asm09.System.Xml.XmlBaseReader.XmlTextNode.prototype._ctor.call(
		this, System.Xml.XmlNodeType.Text, 
		new $asm09.System.Xml.PrefixHandle(bufferReader), 
		new $asm09.System.Xml.StringHandle(bufferReader), 
		new $asm09.System.Xml.ValueHandle(bufferReader), 
		60, 
		System.Xml.ReadState.Interactive, 
		null, 
		0
	);
};

$asm09.System.Xml.XmlBaseReader.XmlComplexTextNode.prototype._ctor = function (bufferReader) {
	$asm09.System.Xml.XmlBaseReader.XmlTextNode.prototype._ctor.call(
		this, System.Xml.XmlNodeType.Text, 
		new $asm09.System.Xml.PrefixHandle(bufferReader), 
		new $asm09.System.Xml.StringHandle(bufferReader), 
		new $asm09.System.Xml.ValueHandle(bufferReader), 
		36, 
		System.Xml.ReadState.Interactive, 
		null, 
		0
	);
};

$asm09.System.Xml.XmlBaseReader.XmlWhitespaceTextNode.prototype._ctor = function (bufferReader) {
	$asm09.System.Xml.XmlBaseReader.XmlTextNode.prototype._ctor.call(
		this, System.Xml.XmlNodeType.Whitespace, 
		new $asm09.System.Xml.PrefixHandle(bufferReader), 
		new $asm09.System.Xml.StringHandle(bufferReader), 
		new $asm09.System.Xml.ValueHandle(bufferReader), 
		$asm09.System.Xml.XmlBaseReader.XmlNode.XmlNodeFlags.HasValue, 
		System.Xml.ReadState.Interactive, 
		null, 
		0
	);
};

$asm09.System.Xml.XmlBaseReader.XmlCDataNode.prototype._ctor = function (bufferReader) {
	$asm09.System.Xml.XmlBaseReader.XmlTextNode.prototype._ctor.call(
		this, System.Xml.XmlNodeType.CDATA, 
		new $asm09.System.Xml.PrefixHandle(bufferReader), 
		new $asm09.System.Xml.StringHandle(bufferReader), 
		new $asm09.System.Xml.ValueHandle(bufferReader), 
		36, 
		System.Xml.ReadState.Interactive, 
		null, 
		0
	);
};

$asm09.System.Xml.XmlBaseReader.XmlAttributeTextNode.prototype._ctor = function (prefix, localName, value) {
	$asm09.System.Xml.XmlBaseReader.XmlTextNode.prototype._ctor.call(
		this, System.Xml.XmlNodeType.Text, 
		prefix, 
		localName, 
		value, 
		47, 
		System.Xml.ReadState.Interactive, 
		null, 
		1
	);
};

$asm09.System.Xml.XmlBaseReader.XmlInitialNode.prototype._ctor = function (bufferReader) {
	$asm09.System.Xml.XmlBaseReader.XmlNode.prototype._ctor.call(
		this, System.Xml.XmlNodeType.None, 
		new $asm09.System.Xml.PrefixHandle(bufferReader), 
		new $asm09.System.Xml.StringHandle(bufferReader), 
		new $asm09.System.Xml.ValueHandle(bufferReader), 
		$asm09.System.Xml.XmlBaseReader.XmlNode.XmlNodeFlags.None, 
		System.Xml.ReadState.Initial, 
		null, 
		0
	);
};

$asm09.System.Xml.XmlBaseReader.XmlDeclarationNode.prototype._ctor = function (bufferReader) {
	$asm09.System.Xml.XmlBaseReader.XmlNode.prototype._ctor.call(
		this, System.Xml.XmlNodeType.XmlDeclaration, 
		new $asm09.System.Xml.PrefixHandle(bufferReader), 
		new $asm09.System.Xml.StringHandle(bufferReader), 
		new $asm09.System.Xml.ValueHandle(bufferReader), 
		$asm09.System.Xml.XmlBaseReader.XmlNode.XmlNodeFlags.CanGetAttribute, 
		System.Xml.ReadState.Interactive, 
		null, 
		0
	);
};

$asm09.System.Xml.XmlBaseReader.XmlCommentNode.prototype._ctor = function (bufferReader) {
	$asm09.System.Xml.XmlBaseReader.XmlNode.prototype._ctor.call(
		this, System.Xml.XmlNodeType.Comment, 
		new $asm09.System.Xml.PrefixHandle(bufferReader), 
		new $asm09.System.Xml.StringHandle(bufferReader), 
		new $asm09.System.Xml.ValueHandle(bufferReader), 
		$asm09.System.Xml.XmlBaseReader.XmlNode.XmlNodeFlags.HasValue, 
		System.Xml.ReadState.Interactive, 
		null, 
		0
	);
};

$asm09.System.Xml.XmlBaseReader.XmlEndOfFileNode.prototype._ctor = function (bufferReader) {
	$asm09.System.Xml.XmlBaseReader.XmlNode.prototype._ctor.call(
		this, System.Xml.XmlNodeType.None, 
		new $asm09.System.Xml.PrefixHandle(bufferReader), 
		new $asm09.System.Xml.StringHandle(bufferReader), 
		new $asm09.System.Xml.ValueHandle(bufferReader), 
		$asm09.System.Xml.XmlBaseReader.XmlNode.XmlNodeFlags.None, 
		System.Xml.ReadState.EndOfFile, 
		null, 
		0
	);
};

$asm09.System.Xml.XmlBaseReader.XmlClosedNode.prototype._ctor = function (bufferReader) {
	$asm09.System.Xml.XmlBaseReader.XmlNode.prototype._ctor.call(
		this, System.Xml.XmlNodeType.None, 
		new $asm09.System.Xml.PrefixHandle(bufferReader), 
		new $asm09.System.Xml.StringHandle(bufferReader), 
		new $asm09.System.Xml.ValueHandle(bufferReader), 
		$asm09.System.Xml.XmlBaseReader.XmlNode.XmlNodeFlags.None, 
		System.Xml.ReadState.Closed, 
		null, 
		0
	);
};

$asm09.System.Xml.XmlBaseReader.AttributeSorter.prototype.Sort$0 = function (attributeNodes, attributeCount) {
	this.attributeIndex1 = -1;
	this.attributeIndex2 = -1;
	this.attributeNodes = attributeNodes;
	this.attributeCount = attributeCount;
	var result = this.Sort$1();
	this.attributeNodes = null;
	this.attributeCount = 0;
	return result;
};
$asm09.System.Xml.XmlBaseReader.AttributeSorter.prototype.GetIndeces = function (/* ref */ attributeIndex1, /* ref */ attributeIndex2) {
	attributeIndex1.value = this.attributeIndex1;
	attributeIndex2.value = this.attributeIndex2;
};
$asm09.System.Xml.XmlBaseReader.AttributeSorter.prototype.Close = function () {
	if (!((this.indeces === null) || (this.indeces.length <= 32))) {
		this.indeces = null;
	}
};
$asm09.System.Xml.XmlBaseReader.AttributeSorter.prototype.Sort$1 = function () {
	if (!((this.indeces === null) || 
			(this.indeces.length !== this.attributeCount) || !this.IsSorted())) {
		return true;
	}
	var array = JSIL.Array.New(System.Object, this.attributeCount);
__loop0__: 
	for (var i = 0; i < array.length; ++i) {
		array[i] = i;
	}
	this.indeces = array;
	System.Array.Sort$3(this.indeces, 0, this.attributeCount, this);
	return this.IsSorted();
};
$asm09.System.Xml.XmlBaseReader.AttributeSorter.prototype.IsSorted = function () {
__loop0__: 
	for (var i = 0; i < (this.indeces.length - 1); ++i) {
		if (this.Compare(this.indeces[i], this.indeces[(i + 1)]) >= 0) {
			this.attributeIndex1 = JSIL.Cast(this.indeces[i], System.Int32);
			this.attributeIndex2 = JSIL.Cast(this.indeces[(i + 1)], System.Int32);
			return false;
		}
	}
	return true;
};
$asm09.System.Xml.XmlBaseReader.AttributeSorter.prototype.Compare = function (obj1, obj2) {
	var num = JSIL.Cast(obj1, System.Int32);
	var num2 = JSIL.Cast(obj2, System.Int32);
	var xmlAttributeNode = this.attributeNodes[num];
	var xmlAttributeNode2 = this.attributeNodes[num2];
	var num3 = this.CompareQNameType(xmlAttributeNode.QNameType, xmlAttributeNode2.QNameType);
	if (num3 === 0) {
		if (!JSIL.Cast(xmlAttributeNode.QNameType, System.Boolean)) {
			num3 = xmlAttributeNode.LocalName.CompareTo(xmlAttributeNode2.LocalName);
			if (num3 === 0) {
				num3 = xmlAttributeNode.Namespace.Uri.CompareTo(xmlAttributeNode2.Namespace.Uri);
			}
		} else {
			num3 = xmlAttributeNode.Namespace.Prefix.CompareTo(xmlAttributeNode2.Namespace.Prefix);
		}
	}
	return num3;
};
$asm09.System.Xml.XmlBaseReader.AttributeSorter.prototype.CompareQNameType = function (type1, type2) {
	return (type1 - type2);
};
$asm09.System.Xml.XmlBaseReader.AttributeSorter.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
JSIL.OverloadedMethod($asm09.System.Xml.XmlBaseReader.AttributeSorter.prototype, "Sort", [
		["Sort$0", [System.Array.Of($asm09.System.Xml.XmlBaseReader.XmlAttributeNode), System.Int32]], 
		["Sort$1", []]
	]);
$asm09.System.Xml.XmlBaseReader.AttributeSorter.prototype.indeces = null;
$asm09.System.Xml.XmlBaseReader.AttributeSorter.prototype.attributeNodes = null;
$asm09.System.Xml.XmlBaseReader.AttributeSorter.prototype.attributeCount = 0;
$asm09.System.Xml.XmlBaseReader.AttributeSorter.prototype.attributeIndex1 = 0;
$asm09.System.Xml.XmlBaseReader.AttributeSorter.prototype.attributeIndex2 = 0;

$asm09.System.Xml.XmlBaseReader.NamespaceManager.prototype._ctor = function (bufferReader) {
	System.Object.prototype._ctor.call(this);
	this.bufferReader = bufferReader;
	this.shortPrefixUri = JSIL.Array.New($asm09.System.Xml.XmlBaseReader.Namespace, 28);
	this.shortPrefixUri[0] = $asm09.System.Xml.XmlBaseReader.NamespaceManager.emptyNamespace;
	this.namespaces = null;
	this.nsCount = 0;
	this.attributes = null;
	this.attributeCount = 0;
	this.space = System.Xml.XmlSpace.None;
	this.lang = System.String.Empty;
	this.depth = 0;
};
$asm09.System.Xml.XmlBaseReader.NamespaceManager.prototype.Close = function () {
	if (!((this.namespaces === null) || (this.namespaces.length <= 32))) {
		this.namespaces = null;
	}
	if (!((this.attributes === null) || (this.attributes.length <= 4))) {
		this.attributes = null;
	}
	this.lang = System.String.Empty;
};
$asm09.System.Xml.XmlBaseReader.NamespaceManager.get_XmlNamespace = function () {
	if ($asm09.System.Xml.XmlBaseReader.NamespaceManager.xmlNamespace === null) {
		var array = JSIL.Array.New(System.Byte, [120, 109, 108, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 119, 51, 46, 111, 114, 103, 47, 88, 77, 76, 47, 49, 57, 57, 56, 47, 110, 97, 109, 101, 115, 112, 97, 99, 101]);
		var namespace = new $asm09.System.Xml.XmlBaseReader.Namespace(JSIL.New($asm09.System.Xml.XmlBufferReader, "_ctor$1", [array]));
		namespace.Prefix.SetValue$1(0, 3);
		namespace.Uri.SetValue$0(3, (array.length - 3));
		$asm09.System.Xml.XmlBaseReader.NamespaceManager.xmlNamespace = namespace;
	}
	return $asm09.System.Xml.XmlBaseReader.NamespaceManager.xmlNamespace;
};
$asm09.System.Xml.XmlBaseReader.NamespaceManager.get_EmptyNamespace = function () {
	return $asm09.System.Xml.XmlBaseReader.NamespaceManager.emptyNamespace;
};
$asm09.System.Xml.XmlBaseReader.NamespaceManager.prototype.get_XmlLang = function () {
	return this.lang;
};
$asm09.System.Xml.XmlBaseReader.NamespaceManager.prototype.get_XmlSpace = function () {
	return this.space;
};
$asm09.System.Xml.XmlBaseReader.NamespaceManager.prototype.Clear = function () {
	if (this.nsCount !== 0) {
		if (this.shortPrefixUri !== null) {
		__loop0__: 
			for (var i = 0; i < this.shortPrefixUri.length; ++i) {
				this.shortPrefixUri[i] = null;
			}
		}
		this.shortPrefixUri[0] = $asm09.System.Xml.XmlBaseReader.NamespaceManager.emptyNamespace;
		this.nsCount = 0;
	}
	this.attributeCount = 0;
	this.space = System.Xml.XmlSpace.None;
	this.lang = System.String.Empty;
	this.depth = 0;
};
$asm09.System.Xml.XmlBaseReader.NamespaceManager.prototype.EnterScope = function () {
	++this.depth;
};
$asm09.System.Xml.XmlBaseReader.NamespaceManager.prototype.ExitScope = function () {
	var __label0__ = null;
__step0__: 
	while (true) {
		switch (__label0__) {
			case null:
				var prefixHandleType = new JSIL.Variable(0);
				__label0__ = "__entry0__";
				continue __step0__;
				break;
			case "__entry0__":
			__loop0__: 
				while (this.nsCount > 0) {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								var namespace = this.namespaces[(this.nsCount - 1)];
								if (namespace.Depth !== this.depth) {
									var __label2__ = "__entry2__";
								__step2__: 
									while (true) {
										switch (__label2__) {
											case "__entry2__":
												__label2__ = "IL_9A";
												continue __step2__;
												break;
											case "IL_9A":
											__loop1__: 
												while (this.attributeCount > 0) {
													var xmlAttribute = this.attributes[(this.attributeCount - 1)];
													if (xmlAttribute.Depth !== this.depth) {
														break __loop1__;
													}
													this.space = xmlAttribute.XmlSpace;
													this.lang = xmlAttribute.XmlLang;
													--this.attributeCount;
												}
												--this.depth;
												return;
												break __step2__;
										}
									}
								}
								if (namespace.Prefix.TryGetShortPrefix(/* ref */ prefixHandleType)) {
									this.shortPrefixUri[Math.floor(prefixHandleType.value)] = namespace.OuterUri;
								}
								--this.nsCount;
								break __step1__;
						}
					}
				}
				JSIL.UntranslatableInstruction("goto", "IL_9A");
				break __step0__;
		}
	}
};
$asm09.System.Xml.XmlBaseReader.NamespaceManager.prototype.AddLangAttribute = function (lang) {
	this.AddAttribute();
	this.lang = lang;
};
$asm09.System.Xml.XmlBaseReader.NamespaceManager.prototype.AddSpaceAttribute = function (space) {
	this.AddAttribute();
	this.space = space;
};
$asm09.System.Xml.XmlBaseReader.NamespaceManager.prototype.AddAttribute = function () {
	if (this.attributes === null) {
		this.attributes = JSIL.Array.New($asm09.System.Xml.XmlBaseReader.NamespaceManager.XmlAttribute, 1);
	} else if (this.attributes.length === this.attributeCount) {
		var destinationArray = JSIL.Array.New($asm09.System.Xml.XmlBaseReader.NamespaceManager.XmlAttribute, (this.attributeCount * 2));
		System.Array.Copy$0(this.attributes, destinationArray, this.attributeCount);
		this.attributes = destinationArray;
	}
	var xmlAttribute = this.attributes[this.attributeCount];
	if (xmlAttribute === null) {
		xmlAttribute = new $asm09.System.Xml.XmlBaseReader.NamespaceManager.XmlAttribute();
		this.attributes[this.attributeCount] = xmlAttribute;
	}
	xmlAttribute.XmlLang = this.lang;
	xmlAttribute.XmlSpace = this.space;
	xmlAttribute.Depth = this.depth;
	++this.attributeCount;
};
$asm09.System.Xml.XmlBaseReader.NamespaceManager.prototype.Register = function (nameSpace) {
	var prefixHandleType = new JSIL.Variable(0);
	if (nameSpace.Prefix.TryGetShortPrefix(/* ref */ prefixHandleType)) {
		nameSpace.OuterUri = this.shortPrefixUri[Math.floor(prefixHandleType.value)];
		this.shortPrefixUri[Math.floor(prefixHandleType.value)] = nameSpace;
		return;
	}
	nameSpace.OuterUri = null;
};
$asm09.System.Xml.XmlBaseReader.NamespaceManager.prototype.AddNamespace = function () {
	if (this.namespaces === null) {
		this.namespaces = JSIL.Array.New($asm09.System.Xml.XmlBaseReader.Namespace, 4);
	} else if (this.namespaces.length === this.nsCount) {
		var destinationArray = JSIL.Array.New($asm09.System.Xml.XmlBaseReader.Namespace, (this.nsCount * 2));
		System.Array.Copy$0(this.namespaces, destinationArray, this.nsCount);
		this.namespaces = destinationArray;
	}
	var namespace = this.namespaces[this.nsCount];
	if (namespace === null) {
		namespace = new $asm09.System.Xml.XmlBaseReader.Namespace(this.bufferReader);
		this.namespaces[this.nsCount] = namespace;
	}
	namespace.Clear();
	namespace.Depth = this.depth;
	++this.nsCount;
	return namespace;
};
$asm09.System.Xml.XmlBaseReader.NamespaceManager.prototype.LookupNamespace$0 = function (prefix) {
	return this.shortPrefixUri[Math.floor(prefix)];
};
$asm09.System.Xml.XmlBaseReader.NamespaceManager.prototype.LookupNamespace$1 = function (prefix) {
	var prefix2 = new JSIL.Variable(0);
	if (prefix.TryGetShortPrefix(/* ref */ prefix2)) {
		return this.LookupNamespace$0(prefix2.value);
	}
__loop0__: 
	for (var i = (this.nsCount - 1); i >= 0; --i) {
		var namespace = this.namespaces[i];
		if ($asm09.System.Xml.PrefixHandle.op_Equality$2(namespace.Prefix, prefix)) {
			return namespace;
		}
	}
	if (prefix.IsXml) {
		return $asm09.System.Xml.XmlBaseReader.NamespaceManager.XmlNamespace;
	}
	return null;
};
$asm09.System.Xml.XmlBaseReader.NamespaceManager.prototype.LookupNamespace$2 = function (prefix) {
	var prefix2 = new JSIL.Variable(0);
	if (this.TryGetShortPrefix(prefix, /* ref */ prefix2)) {
		return this.LookupNamespace$0(prefix2.value);
	}
__loop0__: 
	for (var i = (this.nsCount - 1); i >= 0; --i) {
		var namespace = this.namespaces[i];
		if ($asm09.System.Xml.PrefixHandle.op_Equality$0(namespace.Prefix, prefix)) {
			return namespace;
		}
	}
	if (prefix == "xml") {
		return $asm09.System.Xml.XmlBaseReader.NamespaceManager.XmlNamespace;
	}
	return null;
};
$asm09.System.Xml.XmlBaseReader.NamespaceManager.prototype.TryGetShortPrefix = function (s, /* ref */ shortPrefix) {
	var length = s.length;
	if (length === 0) {
		shortPrefix.value = $asm09.System.Xml.PrefixHandleType.Empty;
		return true;
	}
	if (length === 1) {
		var c = (s[0]);
		if (!((c < "a") || (c > "z"))) {
			shortPrefix.value = $asm09.System.Xml.PrefixHandle.GetAlphaPrefix((c - "a"));
			return true;
		}
	}
	shortPrefix.value = $asm09.System.Xml.PrefixHandleType.Empty;
	return false;
};
JSIL.OverloadedMethod($asm09.System.Xml.XmlBaseReader.NamespaceManager.prototype, "LookupNamespace", [
		["LookupNamespace$0", [$asm09.System.Xml.PrefixHandleType]], 
		["LookupNamespace$1", [$asm09.System.Xml.PrefixHandle]], 
		["LookupNamespace$2", [System.String]]
	]);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.NamespaceManager, "XmlNamespace", 
	$asm09.System.Xml.XmlBaseReader.NamespaceManager.get_XmlNamespace, null);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.NamespaceManager, "EmptyNamespace", 
	$asm09.System.Xml.XmlBaseReader.NamespaceManager.get_EmptyNamespace, null);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.NamespaceManager.prototype, "XmlLang", 
	$asm09.System.Xml.XmlBaseReader.NamespaceManager.prototype.get_XmlLang, null);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.NamespaceManager.prototype, "XmlSpace", 
	$asm09.System.Xml.XmlBaseReader.NamespaceManager.prototype.get_XmlSpace, null);
$asm09.System.Xml.XmlBaseReader.NamespaceManager.prototype.bufferReader = null;
$asm09.System.Xml.XmlBaseReader.NamespaceManager.prototype.namespaces = null;
$asm09.System.Xml.XmlBaseReader.NamespaceManager.prototype.nsCount = 0;
$asm09.System.Xml.XmlBaseReader.NamespaceManager.prototype.depth = 0;
$asm09.System.Xml.XmlBaseReader.NamespaceManager.prototype.shortPrefixUri = null;
$asm09.System.Xml.XmlBaseReader.NamespaceManager.emptyNamespace = null;
$asm09.System.Xml.XmlBaseReader.NamespaceManager.xmlNamespace = null;
$asm09.System.Xml.XmlBaseReader.NamespaceManager.prototype.attributes = null;
$asm09.System.Xml.XmlBaseReader.NamespaceManager.prototype.attributeCount = 0;
$asm09.System.Xml.XmlBaseReader.NamespaceManager.prototype.space = 0;
$asm09.System.Xml.XmlBaseReader.NamespaceManager.prototype.lang = null;
$asm09.System.Xml.XmlBaseReader.NamespaceManager._cctor = function () {
	$asm09.System.Xml.XmlBaseReader.NamespaceManager.emptyNamespace = new $asm09.System.Xml.XmlBaseReader.Namespace($asm09.System.Xml.XmlBufferReader.Empty);
};

$asm09.System.Xml.XmlBaseReader.NamespaceManager.XmlAttribute.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm09.System.Xml.XmlBaseReader.NamespaceManager.XmlAttribute.prototype.get_Depth = function () {
	return this.depth;
};
$asm09.System.Xml.XmlBaseReader.NamespaceManager.XmlAttribute.prototype.set_Depth = function (value) {
	this.depth = value;
};
$asm09.System.Xml.XmlBaseReader.NamespaceManager.XmlAttribute.prototype.get_XmlLang = function () {
	return this.lang;
};
$asm09.System.Xml.XmlBaseReader.NamespaceManager.XmlAttribute.prototype.set_XmlLang = function (value) {
	this.lang = value;
};
$asm09.System.Xml.XmlBaseReader.NamespaceManager.XmlAttribute.prototype.get_XmlSpace = function () {
	return this.space;
};
$asm09.System.Xml.XmlBaseReader.NamespaceManager.XmlAttribute.prototype.set_XmlSpace = function (value) {
	this.space = value;
};
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.NamespaceManager.XmlAttribute.prototype, "Depth", 
	$asm09.System.Xml.XmlBaseReader.NamespaceManager.XmlAttribute.prototype.get_Depth, $asm09.System.Xml.XmlBaseReader.NamespaceManager.XmlAttribute.prototype.set_Depth);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.NamespaceManager.XmlAttribute.prototype, "XmlLang", 
	$asm09.System.Xml.XmlBaseReader.NamespaceManager.XmlAttribute.prototype.get_XmlLang, $asm09.System.Xml.XmlBaseReader.NamespaceManager.XmlAttribute.prototype.set_XmlLang);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.NamespaceManager.XmlAttribute.prototype, "XmlSpace", 
	$asm09.System.Xml.XmlBaseReader.NamespaceManager.XmlAttribute.prototype.get_XmlSpace, $asm09.System.Xml.XmlBaseReader.NamespaceManager.XmlAttribute.prototype.set_XmlSpace);
$asm09.System.Xml.XmlBaseReader.NamespaceManager.XmlAttribute.prototype.space = 0;
$asm09.System.Xml.XmlBaseReader.NamespaceManager.XmlAttribute.prototype.lang = null;
$asm09.System.Xml.XmlBaseReader.NamespaceManager.XmlAttribute.prototype.depth = 0;

$asm09.System.Xml.XmlBaseReader.Namespace.prototype._ctor = function (bufferReader) {
	System.Object.prototype._ctor.call(this);
	this.prefix = new $asm09.System.Xml.PrefixHandle(bufferReader);
	this.uri = new $asm09.System.Xml.StringHandle(bufferReader);
	this.outerUri = null;
	this.uriString = null;
};
$asm09.System.Xml.XmlBaseReader.Namespace.prototype.Clear = function () {
	this.uriString = null;
};
$asm09.System.Xml.XmlBaseReader.Namespace.prototype.get_Depth = function () {
	return this.depth;
};
$asm09.System.Xml.XmlBaseReader.Namespace.prototype.set_Depth = function (value) {
	this.depth = value;
};
$asm09.System.Xml.XmlBaseReader.Namespace.prototype.get_Prefix = function () {
	return this.prefix;
};
$asm09.System.Xml.XmlBaseReader.Namespace.prototype.IsUri$0 = function (s) {
	if (System.Object.ReferenceEquals(s, this.uriString)) {
		return true;
	}
	if ($asm09.System.Xml.StringHandle.op_Equality$1(this.uri, s)) {
		this.uriString = s;
		return true;
	}
	return false;
};
$asm09.System.Xml.XmlBaseReader.Namespace.prototype.IsUri$1 = function (s) {
	if (System.Object.ReferenceEquals(s.Value, this.uriString)) {
		return true;
	}
	if ($asm09.System.Xml.StringHandle.op_Equality$0(this.uri, s)) {
		this.uriString = s.Value;
		return true;
	}
	return false;
};
$asm09.System.Xml.XmlBaseReader.Namespace.prototype.get_Uri = function () {
	return this.uri;
};
$asm09.System.Xml.XmlBaseReader.Namespace.prototype.get_OuterUri = function () {
	return this.outerUri;
};
$asm09.System.Xml.XmlBaseReader.Namespace.prototype.set_OuterUri = function (value) {
	this.outerUri = value;
};
JSIL.OverloadedMethod($asm09.System.Xml.XmlBaseReader.Namespace.prototype, "IsUri", [
		["IsUri$0", [System.String]], 
		["IsUri$1", [System.Xml.XmlDictionaryString]]
	]);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.Namespace.prototype, "Depth", 
	$asm09.System.Xml.XmlBaseReader.Namespace.prototype.get_Depth, $asm09.System.Xml.XmlBaseReader.Namespace.prototype.set_Depth);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.Namespace.prototype, "Prefix", 
	$asm09.System.Xml.XmlBaseReader.Namespace.prototype.get_Prefix, null);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.Namespace.prototype, "Uri", 
	$asm09.System.Xml.XmlBaseReader.Namespace.prototype.get_Uri, null);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseReader.Namespace.prototype, "OuterUri", 
	$asm09.System.Xml.XmlBaseReader.Namespace.prototype.get_OuterUri, $asm09.System.Xml.XmlBaseReader.Namespace.prototype.set_OuterUri);
$asm09.System.Xml.XmlBaseReader.Namespace.prototype.prefix = null;
$asm09.System.Xml.XmlBaseReader.Namespace.prototype.uri = null;
$asm09.System.Xml.XmlBaseReader.Namespace.prototype.depth = 0;
$asm09.System.Xml.XmlBaseReader.Namespace.prototype.outerUri = null;
$asm09.System.Xml.XmlBaseReader.Namespace.prototype.uriString = null;

System.Xml.XmlDictionaryWriter.CreateBinaryWriter$0 = function (stream) {
	return System.Xml.XmlDictionaryWriter.CreateBinaryWriter$1(stream, null);
};
System.Xml.XmlDictionaryWriter.CreateBinaryWriter$1 = function (stream, dictionary) {
	return System.Xml.XmlDictionaryWriter.CreateBinaryWriter$2(stream, dictionary, null);
};
System.Xml.XmlDictionaryWriter.CreateBinaryWriter$2 = function (stream, dictionary, session) {
	return System.Xml.XmlDictionaryWriter.CreateBinaryWriter$3(stream, dictionary, session, true);
};
System.Xml.XmlDictionaryWriter.CreateBinaryWriter$3 = function (stream, dictionary, session, ownsStream) {
	var xmlBinaryWriter = new $asm09.System.Xml.XmlBinaryWriter();
	xmlBinaryWriter.SetOutput(stream, dictionary, session, ownsStream);
	return xmlBinaryWriter;
};
System.Xml.XmlDictionaryWriter.CreateTextWriter$0 = function (stream) {
	return System.Xml.XmlDictionaryWriter.CreateTextWriter$2(stream, System.Xml.XmlDictionaryWriter.UTF8Encoding, true);
};
System.Xml.XmlDictionaryWriter.CreateTextWriter$1 = function (stream, encoding) {
	return System.Xml.XmlDictionaryWriter.CreateTextWriter$2(stream, encoding, true);
};
System.Xml.XmlDictionaryWriter.CreateTextWriter$2 = function (stream, encoding, ownsStream) {
	var xmlWriterSettings = new System.Xml.XmlWriterSettings();
	if (System.Xml.XmlDictionaryWriter.UTF8Encoding.WebName == encoding.WebName) {
		xmlWriterSettings.Encoding = System.Xml.XmlDictionaryWriter.UTF8Encoding;
	} else {
		xmlWriterSettings.Encoding = encoding;
	}
	xmlWriterSettings.CloseOutput = ownsStream;
	xmlWriterSettings.NewLineHandling = System.Xml.NewLineHandling.Entitize;
	xmlWriterSettings.OmitXmlDeclaration = true;
	xmlWriterSettings.CheckCharacters = false;
	return System.Xml.XmlDictionaryWriter.CreateDictionaryWriter(System.Xml.XmlWriter.Create$1(stream, xmlWriterSettings));
};
System.Xml.XmlDictionaryWriter.CreateDictionaryWriter = function (writer) {
	if (writer === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull("writer");
	}
	var xmlDictionaryWriter = JSIL.TryCast(writer, System.Xml.XmlDictionaryWriter);
	if (xmlDictionaryWriter === null) {
		xmlDictionaryWriter = new $asm09.System.Xml.XmlDictionaryWriter.XmlWrappedWriter(writer);
	}
	return xmlDictionaryWriter;
};
System.Xml.XmlDictionaryWriter.prototype.WriteStartElement$0 = function (localName, namespaceUri) {
	this.WriteStartElement$1(null, localName, namespaceUri);
};
System.Xml.XmlDictionaryWriter.prototype.WriteStartElement$1 = function (prefix, localName, namespaceUri) {
	this.WriteStartElement$1(prefix, System.Xml.XmlDictionaryString.GetString(localName), System.Xml.XmlDictionaryString.GetString(namespaceUri));
};
System.Xml.XmlDictionaryWriter.prototype.WriteStartAttribute$0 = function (localName, namespaceUri) {
	this.WriteStartAttribute$1(null, localName, namespaceUri);
};
System.Xml.XmlDictionaryWriter.prototype.WriteStartAttribute$1 = function (prefix, localName, namespaceUri) {
	this.WriteStartAttribute$1(prefix, System.Xml.XmlDictionaryString.GetString(localName), System.Xml.XmlDictionaryString.GetString(namespaceUri));
};
System.Xml.XmlDictionaryWriter.prototype.WriteAttributeString$0 = function (localName, namespaceUri, value) {
	this.WriteAttributeString$1(null, localName, namespaceUri, value);
};
System.Xml.XmlDictionaryWriter.prototype.WriteXmlnsAttribute$0 = function (prefix, namespaceUri) {
	if (namespaceUri === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull("namespaceUri");
	}
	if (prefix === null) {
		if (this.LookupPrefix(namespaceUri) !== null) {
			return;
		}
		prefix = (namespaceUri.length === 0) ? System.String.Empty : ("d" + (namespaceUri.length).toString());
	}
	System.Xml.XmlWriter.prototype.WriteAttributeString$2.call(this, "xmlns", prefix, null, namespaceUri);
};
System.Xml.XmlDictionaryWriter.prototype.WriteXmlnsAttribute$1 = function (prefix, namespaceUri) {
	this.WriteXmlnsAttribute$0(prefix, System.Xml.XmlDictionaryString.GetString(namespaceUri));
};
System.Xml.XmlDictionaryWriter.prototype.WriteXmlAttribute$0 = function (localName, value) {
	System.Xml.XmlWriter.prototype.WriteAttributeString$2.call(this, "xml", localName, null, value);
};
System.Xml.XmlDictionaryWriter.prototype.WriteXmlAttribute$1 = function (localName, value) {
	this.WriteXmlAttribute$0(System.Xml.XmlDictionaryString.GetString(localName), System.Xml.XmlDictionaryString.GetString(value));
};
System.Xml.XmlDictionaryWriter.prototype.WriteAttributeString$1 = function (prefix, localName, namespaceUri, value) {
	this.WriteStartAttribute$1(prefix, localName, namespaceUri);
	this.WriteString(value);
	this.WriteEndAttribute();
};
System.Xml.XmlDictionaryWriter.prototype.WriteElementString$0 = function (localName, namespaceUri, value) {
	this.WriteElementString$1(null, localName, namespaceUri, value);
};
System.Xml.XmlDictionaryWriter.prototype.WriteElementString$1 = function (prefix, localName, namespaceUri, value) {
	this.WriteStartElement$1(prefix, localName, namespaceUri);
	this.WriteString(value);
	this.WriteEndElement();
};
System.Xml.XmlDictionaryWriter.prototype.WriteString = function (value) {
	this.WriteString(System.Xml.XmlDictionaryString.GetString(value));
};
System.Xml.XmlDictionaryWriter.prototype.WriteQualifiedName = function (localName, namespaceUri) {
	if (localName === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentNullException, "_ctor$1", ["localName"]));
	}
	if (namespaceUri === null) {
		namespaceUri = System.Xml.XmlDictionaryString.Empty;
	}
	this.WriteQualifiedName(localName.Value, namespaceUri.Value);
};
System.Xml.XmlDictionaryWriter.prototype.WriteValue$0 = function (value) {
	this.WriteValue$1(System.Xml.XmlDictionaryString.GetString(value));
};
System.Xml.XmlDictionaryWriter.prototype.WriteValue$1 = function (value) {
	if (value === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentNullException, "_ctor$1", ["value"]));
	}
	var stream = value.IStreamProvider_GetStream();
	if (stream === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Xml.XmlException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$2("XmlInvalidStream")]));
	}
	var num = 256;
	var buffer = JSIL.Array.New(System.Byte, num);
__loop0__: 
	while (true) {
		var num2 = stream.Read(buffer, 0, num);
		if (num2 <= 0) {
			break __loop0__;
		}
		this.WriteBase64(buffer, 0, num2);
		if (!((num >= 65536) || (num2 !== num))) {
			num *= 16;
			buffer = JSIL.Array.New(System.Byte, num);
		}
	}
	value.IStreamProvider_ReleaseStream(stream);
};
System.Xml.XmlDictionaryWriter.prototype.WriteValue$2 = function (value) {
	if (System.Xml.UniqueId.op_Equality(value, null)) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull("value");
	}
	this.WriteString(value.toString());
};
System.Xml.XmlDictionaryWriter.prototype.WriteValue$3 = function (value) {
	this.WriteString(value.toString());
};
System.Xml.XmlDictionaryWriter.prototype.WriteValue$4 = function (value) {
	this.WriteString(System.Xml.XmlConvert.ToString$11(value));
};
System.Xml.XmlDictionaryWriter.prototype.get_CanCanonicalize = function () {
	return false;
};
System.Xml.XmlDictionaryWriter.prototype.StartCanonicalization = function (stream, includeComments, inclusivePrefixes) {
	throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.NotSupportedException, "_ctor$0", []));
};
System.Xml.XmlDictionaryWriter.prototype.EndCanonicalization = function () {
	throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.NotSupportedException, "_ctor$0", []));
};
System.Xml.XmlDictionaryWriter.prototype.WriteElementNode = function (reader, defattr) {
	var localName = new JSIL.Variable(null), namespaceUri = new JSIL.Variable(null);
	if (!(!reader.TryGetLocalNameAsDictionaryString(/* ref */ localName) || !reader.TryGetNamespaceUriAsDictionaryString(/* ref */ namespaceUri))) {
		this.WriteStartElement$1(reader.Prefix, localName.value, namespaceUri.value);
	} else {
		this.WriteStartElement$1(reader.Prefix, reader.LocalName, reader.NamespaceURI);
	}
	if (!((!defattr && 
				reader.IsDefault) || !reader.MoveToFirstAttribute())) {
	__loop0__: 
		do {
			if (!(!reader.TryGetLocalNameAsDictionaryString(/* ref */ localName) || !reader.TryGetNamespaceUriAsDictionaryString(/* ref */ namespaceUri))) {
				this.WriteStartAttribute$1(reader.Prefix, localName.value, namespaceUri.value);
			} else {
				this.WriteStartAttribute$1(reader.Prefix, reader.LocalName, reader.NamespaceURI);
			}
		__loop1__: 
			while (reader.ReadAttributeValue()) {
				if (reader.NodeType === System.Xml.XmlNodeType.EntityReference) {
					this.WriteEntityRef(reader.Name);
				} else {
					this.WriteTextNode(reader, true);
				}
			}
			this.WriteEndAttribute();
		} while (reader.MoveToNextAttribute());
		reader.MoveToElement();
	}
	if (reader.IsEmptyElement) {
		this.WriteEndElement();
	}
};
System.Xml.XmlDictionaryWriter.prototype.WriteArrayNode$0 = function (reader, prefix, localName, namespaceUri, type) {
	if (type === System.Boolean) {
		$asm09.System.Xml.BooleanArrayHelperWithString.Instance.WriteArray$0(
			this, 
			prefix, 
			localName, 
			namespaceUri, 
			reader
		);
		return;
	}
	if (type === System.Int16) {
		$asm09.System.Xml.Int16ArrayHelperWithString.Instance.WriteArray$0(
			this, 
			prefix, 
			localName, 
			namespaceUri, 
			reader
		);
		return;
	}
	if (type === System.Int32) {
		$asm09.System.Xml.Int32ArrayHelperWithString.Instance.WriteArray$0(
			this, 
			prefix, 
			localName, 
			namespaceUri, 
			reader
		);
		return;
	}
	if (type === System.Int64) {
		$asm09.System.Xml.Int64ArrayHelperWithString.Instance.WriteArray$0(
			this, 
			prefix, 
			localName, 
			namespaceUri, 
			reader
		);
		return;
	}
	if (type === System.Single) {
		$asm09.System.Xml.SingleArrayHelperWithString.Instance.WriteArray$0(
			this, 
			prefix, 
			localName, 
			namespaceUri, 
			reader
		);
		return;
	}
	if (type === System.Double) {
		$asm09.System.Xml.DoubleArrayHelperWithString.Instance.WriteArray$0(
			this, 
			prefix, 
			localName, 
			namespaceUri, 
			reader
		);
		return;
	}
	if (type === System.Decimal) {
		$asm09.System.Xml.DecimalArrayHelperWithString.Instance.WriteArray$0(
			this, 
			prefix, 
			localName, 
			namespaceUri, 
			reader
		);
		return;
	}
	if (type === System.DateTime) {
		$asm09.System.Xml.DateTimeArrayHelperWithString.Instance.WriteArray$0(
			this, 
			prefix, 
			localName, 
			namespaceUri, 
			reader
		);
		return;
	}
	if (type === System.Guid) {
		$asm09.System.Xml.GuidArrayHelperWithString.Instance.WriteArray$0(
			this, 
			prefix, 
			localName, 
			namespaceUri, 
			reader
		);
		return;
	}
	if (type === System.TimeSpan) {
		$asm09.System.Xml.TimeSpanArrayHelperWithString.Instance.WriteArray$0(
			this, 
			prefix, 
			localName, 
			namespaceUri, 
			reader
		);
		return;
	}
	this.WriteElementNode(reader, false);
	reader.Read();
};
System.Xml.XmlDictionaryWriter.prototype.WriteArrayNode$1 = function (reader, prefix, localName, namespaceUri, type) {
	if (type === System.Boolean) {
		$asm09.System.Xml.BooleanArrayHelperWithDictionaryString.Instance.WriteArray$0(
			this, 
			prefix, 
			localName, 
			namespaceUri, 
			reader
		);
		return;
	}
	if (type === System.Int16) {
		$asm09.System.Xml.Int16ArrayHelperWithDictionaryString.Instance.WriteArray$0(
			this, 
			prefix, 
			localName, 
			namespaceUri, 
			reader
		);
		return;
	}
	if (type === System.Int32) {
		$asm09.System.Xml.Int32ArrayHelperWithDictionaryString.Instance.WriteArray$0(
			this, 
			prefix, 
			localName, 
			namespaceUri, 
			reader
		);
		return;
	}
	if (type === System.Int64) {
		$asm09.System.Xml.Int64ArrayHelperWithDictionaryString.Instance.WriteArray$0(
			this, 
			prefix, 
			localName, 
			namespaceUri, 
			reader
		);
		return;
	}
	if (type === System.Single) {
		$asm09.System.Xml.SingleArrayHelperWithDictionaryString.Instance.WriteArray$0(
			this, 
			prefix, 
			localName, 
			namespaceUri, 
			reader
		);
		return;
	}
	if (type === System.Double) {
		$asm09.System.Xml.DoubleArrayHelperWithDictionaryString.Instance.WriteArray$0(
			this, 
			prefix, 
			localName, 
			namespaceUri, 
			reader
		);
		return;
	}
	if (type === System.Decimal) {
		$asm09.System.Xml.DecimalArrayHelperWithDictionaryString.Instance.WriteArray$0(
			this, 
			prefix, 
			localName, 
			namespaceUri, 
			reader
		);
		return;
	}
	if (type === System.DateTime) {
		$asm09.System.Xml.DateTimeArrayHelperWithDictionaryString.Instance.WriteArray$0(
			this, 
			prefix, 
			localName, 
			namespaceUri, 
			reader
		);
		return;
	}
	if (type === System.Guid) {
		$asm09.System.Xml.GuidArrayHelperWithDictionaryString.Instance.WriteArray$0(
			this, 
			prefix, 
			localName, 
			namespaceUri, 
			reader
		);
		return;
	}
	if (type === System.TimeSpan) {
		$asm09.System.Xml.TimeSpanArrayHelperWithDictionaryString.Instance.WriteArray$0(
			this, 
			prefix, 
			localName, 
			namespaceUri, 
			reader
		);
		return;
	}
	this.WriteElementNode(reader, false);
	reader.Read();
};
System.Xml.XmlDictionaryWriter.prototype.WriteArrayNode$2 = function (reader, type) {
	var localName = new JSIL.Variable(null), namespaceUri = new JSIL.Variable(null);
	if (!(!reader.TryGetLocalNameAsDictionaryString(/* ref */ localName) || !reader.TryGetNamespaceUriAsDictionaryString(/* ref */ namespaceUri))) {
		this.WriteArrayNode$1(
			reader, 
			reader.Prefix, 
			localName.value, 
			namespaceUri.value, 
			type
		);
		return;
	}
	this.WriteArrayNode$0(
		reader, 
		reader.Prefix, 
		reader.LocalName, 
		reader.NamespaceURI, 
		type
	);
};
System.Xml.XmlDictionaryWriter.prototype.WriteTextNode = function (reader, isAttribute) {
	var value = new JSIL.Variable(null);
	if (reader.TryGetValueAsDictionaryString(/* ref */ value)) {
		this.WriteString(value.value);
	} else {
		this.WriteString(reader.Value);
	}
	if (!isAttribute) {
		reader.Read();
	}
};
System.Xml.XmlDictionaryWriter.prototype.WriteNode$0 = function (reader, defattr) {
	var xmlDictionaryReader = JSIL.TryCast(reader, System.Xml.XmlDictionaryReader);
	if (xmlDictionaryReader !== null) {
		this.WriteNode$1(xmlDictionaryReader, defattr);
		return;
	}
	System.Xml.XmlWriter.prototype.WriteNode.call(this, reader, defattr);
};
System.Xml.XmlDictionaryWriter.prototype.WriteNode$1 = function (reader, defattr) {
	var __label0__ = null;
__step0__: 
	while (true) {
		switch (__label0__) {
			case null:
				var type = new JSIL.Variable(null);
				__label0__ = "__entry0__";
				continue __step0__;
				break;
			case "__entry0__":
				if (reader === null) {
					throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentNullException, "_ctor$1", ["reader"]));
				}
				var num = !JSIL.Cast(reader.NodeType, System.Boolean) ? -1 : reader.Depth;
			__loop0__: 
				while (true) {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								var nodeType = reader.NodeType;
								if (!((nodeType !== System.Xml.XmlNodeType.Text) && 
										(nodeType !== System.Xml.XmlNodeType.Whitespace) && (nodeType !== System.Xml.XmlNodeType.SignificantWhitespace))) {
									this.WriteTextNode(reader, false);
								} else {
									var __label2__ = "__entry2__";
								__step2__: 
									while (true) {
										switch (__label2__) {
											case "__entry2__":
												if ((reader.Depth <= num) || !reader.IsStartArray(/* ref */ type)) {
													var __label3__ = "__entry3__";
												__step3__: 
													while (true) {
														switch (__label3__) {
															case "__entry3__":
																var xmlNodeType = nodeType;
																switch (Number(xmlNodeType)) {
																	case 1: 
																		this.WriteElementNode(reader, defattr);
																		break;
																	case 2: 
																	case 3: 
																	case 6: 
																	case 9: 
																		break;
																	case 4: 
																		this.WriteCData(reader.Value);
																		break;
																	case 5: 
																		this.WriteEntityRef(reader.Name);
																		break;
																	case 7: 
																		__label3__ = "IL_D6";
																		continue __step3__;
																	case 8: 
																		this.WriteComment(reader.Value);
																		break;
																	case 10: 
																		this.WriteDocType(reader.Name, reader.GetAttribute$0("PUBLIC"), reader.GetAttribute$0("SYSTEM"), reader.Value);
																		break;
																	default: 
																		switch (Number(xmlNodeType)) {
																			case 15: 
																				this.WriteFullEndElement();
																				break;
																			case 17: 
																				__label3__ = "IL_D6";
																				continue __step3__;
																		}
																		break;
																}
																__label3__ = "IL_128";
																continue __step3__;
																break;
															case "IL_128":
																if (!reader.Read()) {
																	break __loop0__;
																}
																__label1__ = "IL_131";
																continue __step1__;
																__label3__ = "IL_D6";
																continue __step3__;
																break;
															case "IL_D6":
																this.WriteProcessingInstruction(reader.Name, reader.Value);
																__label3__ = "IL_128";
																continue __step3__;
																break __step3__;
														}
													}
												}
												this.WriteArrayNode$2(reader, type.value);
												break __step2__;
										}
									}
								}
								__label1__ = "IL_131";
								continue __step1__;
								break;
							case "IL_131":
								if (!((num < reader.Depth) || ((num === reader.Depth) && 
											(reader.NodeType === System.Xml.XmlNodeType.EndElement)))) {
									return;
								}
								break __step1__;
						}
					}
				}
				break __step0__;
		}
	}
};
System.Xml.XmlDictionaryWriter.prototype.CheckArray = function (array, offset, count) {
	if (array === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentNullException, "_ctor$1", ["array"]));
	}
	if (offset < 0) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["offset", $asm09.System.Runtime.Serialization.SR.GetString$2("ValueMustBeNonNegative")]));
	}
	if (offset > array.length) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["offset", $asm09.System.Runtime.Serialization.SR.GetString$0("OffsetExceedsBufferSize", [array.length])]));
	}
	if (count < 0) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["count", $asm09.System.Runtime.Serialization.SR.GetString$2("ValueMustBeNonNegative")]));
	}
	if (count > (array.length - offset)) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["count", $asm09.System.Runtime.Serialization.SR.GetString$0("SizeExceedsRemainingBufferSpace", [(array.length - offset)])]));
	}
};
System.Xml.XmlDictionaryWriter.prototype.WriteArray$0 = function (prefix, localName, namespaceUri, array, offset, count) {
	this.CheckArray(array, offset, count);
__loop0__: 
	for (var i = 0; i < count; ++i) {
		this.WriteStartElement$1(prefix, localName, namespaceUri);
		this.WriteValue$2(array[(offset + i)]);
		this.WriteEndElement();
	}
};
System.Xml.XmlDictionaryWriter.prototype.WriteArray$1 = function (prefix, localName, namespaceUri, array, offset, count) {
	this.WriteArray$0(
		prefix, 
		System.Xml.XmlDictionaryString.GetString(localName), 
		System.Xml.XmlDictionaryString.GetString(namespaceUri), 
		array, 
		offset, 
		count
	);
};
System.Xml.XmlDictionaryWriter.prototype.WriteArray$2 = function (prefix, localName, namespaceUri, array, offset, count) {
	this.CheckArray(array, offset, count);
__loop0__: 
	for (var i = 0; i < count; ++i) {
		this.WriteStartElement$1(prefix, localName, namespaceUri);
		this.WriteValue$7(array[(offset + i)]);
		this.WriteEndElement();
	}
};
System.Xml.XmlDictionaryWriter.prototype.WriteArray$3 = function (prefix, localName, namespaceUri, array, offset, count) {
	this.WriteArray$2(
		prefix, 
		System.Xml.XmlDictionaryString.GetString(localName), 
		System.Xml.XmlDictionaryString.GetString(namespaceUri), 
		array, 
		offset, 
		count
	);
};
System.Xml.XmlDictionaryWriter.prototype.WriteArray$4 = function (prefix, localName, namespaceUri, array, offset, count) {
	this.CheckArray(array, offset, count);
__loop0__: 
	for (var i = 0; i < count; ++i) {
		this.WriteStartElement$1(prefix, localName, namespaceUri);
		this.WriteValue$7(array[(offset + i)]);
		this.WriteEndElement();
	}
};
System.Xml.XmlDictionaryWriter.prototype.WriteArray$5 = function (prefix, localName, namespaceUri, array, offset, count) {
	this.WriteArray$4(
		prefix, 
		System.Xml.XmlDictionaryString.GetString(localName), 
		System.Xml.XmlDictionaryString.GetString(namespaceUri), 
		array, 
		offset, 
		count
	);
};
System.Xml.XmlDictionaryWriter.prototype.WriteArray$6 = function (prefix, localName, namespaceUri, array, offset, count) {
	this.CheckArray(array, offset, count);
__loop0__: 
	for (var i = 0; i < count; ++i) {
		this.WriteStartElement$1(prefix, localName, namespaceUri);
		this.WriteValue$8(array[(offset + i)]);
		this.WriteEndElement();
	}
};
System.Xml.XmlDictionaryWriter.prototype.WriteArray$7 = function (prefix, localName, namespaceUri, array, offset, count) {
	this.WriteArray$6(
		prefix, 
		System.Xml.XmlDictionaryString.GetString(localName), 
		System.Xml.XmlDictionaryString.GetString(namespaceUri), 
		array, 
		offset, 
		count
	);
};
System.Xml.XmlDictionaryWriter.prototype.WriteArray$8 = function (prefix, localName, namespaceUri, array, offset, count) {
	this.CheckArray(array, offset, count);
__loop0__: 
	for (var i = 0; i < count; ++i) {
		this.WriteStartElement$1(prefix, localName, namespaceUri);
		this.WriteValue$5(array[(offset + i)]);
		this.WriteEndElement();
	}
};
System.Xml.XmlDictionaryWriter.prototype.WriteArray$9 = function (prefix, localName, namespaceUri, array, offset, count) {
	this.WriteArray$8(
		prefix, 
		System.Xml.XmlDictionaryString.GetString(localName), 
		System.Xml.XmlDictionaryString.GetString(namespaceUri), 
		array, 
		offset, 
		count
	);
};
System.Xml.XmlDictionaryWriter.prototype.WriteArray$10 = function (prefix, localName, namespaceUri, array, offset, count) {
	this.CheckArray(array, offset, count);
__loop0__: 
	for (var i = 0; i < count; ++i) {
		this.WriteStartElement$1(prefix, localName, namespaceUri);
		this.WriteValue$4(array[(offset + i)]);
		this.WriteEndElement();
	}
};
System.Xml.XmlDictionaryWriter.prototype.WriteArray$11 = function (prefix, localName, namespaceUri, array, offset, count) {
	this.WriteArray$10(
		prefix, 
		System.Xml.XmlDictionaryString.GetString(localName), 
		System.Xml.XmlDictionaryString.GetString(namespaceUri), 
		array, 
		offset, 
		count
	);
};
System.Xml.XmlDictionaryWriter.prototype.WriteArray$12 = function (prefix, localName, namespaceUri, array, offset, count) {
	this.CheckArray(array, offset, count);
__loop0__: 
	for (var i = 0; i < count; ++i) {
		this.WriteStartElement$1(prefix, localName, namespaceUri);
		this.WriteValue$6(array[(offset + i)].MemberwiseClone());
		this.WriteEndElement();
	}
};
System.Xml.XmlDictionaryWriter.prototype.WriteArray$13 = function (prefix, localName, namespaceUri, array, offset, count) {
	this.WriteArray$12(
		prefix, 
		System.Xml.XmlDictionaryString.GetString(localName), 
		System.Xml.XmlDictionaryString.GetString(namespaceUri), 
		array, 
		offset, 
		count
	);
};
System.Xml.XmlDictionaryWriter.prototype.WriteArray$14 = function (prefix, localName, namespaceUri, array, offset, count) {
	this.CheckArray(array, offset, count);
__loop0__: 
	for (var i = 0; i < count; ++i) {
		this.WriteStartElement$1(prefix, localName, namespaceUri);
		this.WriteValue$3(array[(offset + i)].MemberwiseClone());
		this.WriteEndElement();
	}
};
System.Xml.XmlDictionaryWriter.prototype.WriteArray$15 = function (prefix, localName, namespaceUri, array, offset, count) {
	this.WriteArray$14(
		prefix, 
		System.Xml.XmlDictionaryString.GetString(localName), 
		System.Xml.XmlDictionaryString.GetString(namespaceUri), 
		array, 
		offset, 
		count
	);
};
System.Xml.XmlDictionaryWriter.prototype.WriteArray$16 = function (prefix, localName, namespaceUri, array, offset, count) {
	this.CheckArray(array, offset, count);
__loop0__: 
	for (var i = 0; i < count; ++i) {
		this.WriteStartElement$1(prefix, localName, namespaceUri);
		this.WriteValue$3(array[(offset + i)].MemberwiseClone());
		this.WriteEndElement();
	}
};
System.Xml.XmlDictionaryWriter.prototype.WriteArray$17 = function (prefix, localName, namespaceUri, array, offset, count) {
	this.WriteArray$16(
		prefix, 
		System.Xml.XmlDictionaryString.GetString(localName), 
		System.Xml.XmlDictionaryString.GetString(namespaceUri), 
		array, 
		offset, 
		count
	);
};
System.Xml.XmlDictionaryWriter.prototype.WriteArray$18 = function (prefix, localName, namespaceUri, array, offset, count) {
	this.CheckArray(array, offset, count);
__loop0__: 
	for (var i = 0; i < count; ++i) {
		this.WriteStartElement$1(prefix, localName, namespaceUri);
		this.WriteValue$4(array[(offset + i)].MemberwiseClone());
		this.WriteEndElement();
	}
};
System.Xml.XmlDictionaryWriter.prototype.WriteArray$19 = function (prefix, localName, namespaceUri, array, offset, count) {
	this.WriteArray$18(
		prefix, 
		System.Xml.XmlDictionaryString.GetString(localName), 
		System.Xml.XmlDictionaryString.GetString(namespaceUri), 
		array, 
		offset, 
		count
	);
};
System.Xml.XmlDictionaryWriter.prototype._ctor = function () {
	System.Xml.XmlWriter.prototype._ctor.call(this);
};
JSIL.OverloadedMethod(System.Xml.XmlDictionaryWriter, "CreateBinaryWriter", [
		["CreateBinaryWriter$0", [System.IO.Stream]], 
		["CreateBinaryWriter$1", [System.IO.Stream, System.Xml.IXmlDictionary]], 
		["CreateBinaryWriter$2", [System.IO.Stream, System.Xml.IXmlDictionary, System.Xml.XmlBinaryWriterSession]], 
		["CreateBinaryWriter$3", [System.IO.Stream, System.Xml.IXmlDictionary, System.Xml.XmlBinaryWriterSession, System.Boolean]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlDictionaryWriter, "CreateTextWriter", [
		["CreateTextWriter$0", [System.IO.Stream]], 
		["CreateTextWriter$1", [System.IO.Stream, System.Text.Encoding]], 
		["CreateTextWriter$2", [System.IO.Stream, System.Text.Encoding, System.Boolean]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlDictionaryWriter.prototype, "WriteStartElement", [
		["WriteStartElement$0", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]], 
		["WriteStartElement$1", [System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlDictionaryWriter.prototype, "WriteStartAttribute", [
		["WriteStartAttribute$0", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]], 
		["WriteStartAttribute$1", [System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlDictionaryWriter.prototype, "WriteAttributeString", [
		["WriteAttributeString$0", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.String]], 
		["WriteAttributeString$1", [System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.String]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlDictionaryWriter.prototype, "WriteXmlnsAttribute", [
		["WriteXmlnsAttribute$0", [System.String, System.String]], 
		["WriteXmlnsAttribute$1", [System.String, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlDictionaryWriter.prototype, "WriteXmlAttribute", [
		["WriteXmlAttribute$0", [System.String, System.String]], 
		["WriteXmlAttribute$1", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlDictionaryWriter.prototype, "WriteElementString", [
		["WriteElementString$0", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.String]], 
		["WriteElementString$1", [System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.String]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlDictionaryWriter.prototype, "WriteValue", [
		["WriteValue$0", [System.Xml.XmlDictionaryString]], 
		["WriteValue$1", [System.Xml.IStreamProvider]], 
		["WriteValue$2", [System.Xml.UniqueId]], 
		["WriteValue$3", [System.Guid]], 
		["WriteValue$4", [System.TimeSpan]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlDictionaryWriter.prototype, "WriteArrayNode", [
		["WriteArrayNode$0", [System.Xml.XmlDictionaryReader, System.String, System.String, System.String, System.Type]], 
		["WriteArrayNode$1", [System.Xml.XmlDictionaryReader, System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Type]], 
		["WriteArrayNode$2", [System.Xml.XmlDictionaryReader, System.Type]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlDictionaryWriter.prototype, "WriteNode", [
		["WriteNode$0", [System.Xml.XmlReader, System.Boolean]], 
		["WriteNode$1", [System.Xml.XmlDictionaryReader, System.Boolean]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlDictionaryWriter.prototype, "WriteArray", [
		["WriteArray$0", [System.String, System.String, System.String, System.Array.Of(System.Boolean), System.Int32, System.Int32]], 
		["WriteArray$1", [System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Array.Of(System.Boolean), System.Int32, System.Int32]], 
		["WriteArray$2", [System.String, System.String, System.String, System.Array.Of(System.Int16), System.Int32, System.Int32]], 
		["WriteArray$3", [System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Array.Of(System.Int16), System.Int32, System.Int32]], 
		["WriteArray$4", [System.String, System.String, System.String, System.Array.Of(System.Int32), System.Int32, System.Int32]], 
		["WriteArray$5", [System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Array.Of(System.Int32), System.Int32, System.Int32]], 
		["WriteArray$6", [System.String, System.String, System.String, System.Array.Of(System.Int64), System.Int32, System.Int32]], 
		["WriteArray$7", [System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Array.Of(System.Int64), System.Int32, System.Int32]], 
		["WriteArray$8", [System.String, System.String, System.String, System.Array.Of(System.Single), System.Int32, System.Int32]], 
		["WriteArray$9", [System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Array.Of(System.Single), System.Int32, System.Int32]], 
		["WriteArray$10", [System.String, System.String, System.String, System.Array.Of(System.Double), System.Int32, System.Int32]], 
		["WriteArray$11", [System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Array.Of(System.Double), System.Int32, System.Int32]], 
		["WriteArray$12", [System.String, System.String, System.String, System.Array.Of(System.Decimal), System.Int32, System.Int32]], 
		["WriteArray$13", [System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Array.Of(System.Decimal), System.Int32, System.Int32]], 
		["WriteArray$14", [System.String, System.String, System.String, System.Array.Of(System.DateTime), System.Int32, System.Int32]], 
		["WriteArray$15", [System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Array.Of(System.DateTime), System.Int32, System.Int32]], 
		["WriteArray$16", [System.String, System.String, System.String, System.Array.Of(System.Guid), System.Int32, System.Int32]], 
		["WriteArray$17", [System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Array.Of(System.Guid), System.Int32, System.Int32]], 
		["WriteArray$18", [System.String, System.String, System.String, System.Array.Of(System.TimeSpan), System.Int32, System.Int32]], 
		["WriteArray$19", [System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Array.Of(System.TimeSpan), System.Int32, System.Int32]]
	]);
JSIL.MakeProperty(System.Xml.XmlDictionaryWriter.prototype, "CanCanonicalize", 
	System.Xml.XmlDictionaryWriter.prototype.get_CanCanonicalize, null);
System.Xml.XmlDictionaryWriter.UTF8Encoding = null;
System.Xml.XmlDictionaryWriter._cctor = function () {
	System.Xml.XmlDictionaryWriter.UTF8Encoding = new System.Text.UTF8Encoding(false);
};

$asm09.System.Xml.XmlDictionaryWriter.XmlWrappedWriter.prototype._ctor = function (writer) {
	System.Xml.XmlDictionaryWriter.prototype._ctor.call(this);
	this.writer = writer;
	this.depth = 0;
};
$asm09.System.Xml.XmlDictionaryWriter.XmlWrappedWriter.prototype.Close = function () {
	this.writer.Close();
};
$asm09.System.Xml.XmlDictionaryWriter.XmlWrappedWriter.prototype.Flush = function () {
	this.writer.Flush();
};
$asm09.System.Xml.XmlDictionaryWriter.XmlWrappedWriter.prototype.LookupPrefix = function (namespaceUri) {
	return this.writer.LookupPrefix(namespaceUri);
};
$asm09.System.Xml.XmlDictionaryWriter.XmlWrappedWriter.prototype.WriteAttributes = function (reader, defattr) {
	this.writer.WriteAttributes(reader, defattr);
};
$asm09.System.Xml.XmlDictionaryWriter.XmlWrappedWriter.prototype.WriteBase64 = function (buffer, index, count) {
	this.writer.WriteBase64(buffer, index, count);
};
$asm09.System.Xml.XmlDictionaryWriter.XmlWrappedWriter.prototype.WriteBinHex = function (buffer, index, count) {
	this.writer.WriteBinHex(buffer, index, count);
};
$asm09.System.Xml.XmlDictionaryWriter.XmlWrappedWriter.prototype.WriteCData = function (text) {
	this.writer.WriteCData(text);
};
$asm09.System.Xml.XmlDictionaryWriter.XmlWrappedWriter.prototype.WriteCharEntity = function (ch) {
	this.writer.WriteCharEntity(ch);
};
$asm09.System.Xml.XmlDictionaryWriter.XmlWrappedWriter.prototype.WriteChars = function (buffer, index, count) {
	this.writer.WriteChars(buffer, index, count);
};
$asm09.System.Xml.XmlDictionaryWriter.XmlWrappedWriter.prototype.WriteComment = function (text) {
	this.writer.WriteComment(text);
};
$asm09.System.Xml.XmlDictionaryWriter.XmlWrappedWriter.prototype.WriteDocType = function (name, pubid, sysid, subset) {
	this.writer.WriteDocType(name, pubid, sysid, subset);
};
$asm09.System.Xml.XmlDictionaryWriter.XmlWrappedWriter.prototype.WriteEndAttribute = function () {
	this.writer.WriteEndAttribute();
};
$asm09.System.Xml.XmlDictionaryWriter.XmlWrappedWriter.prototype.WriteEndDocument = function () {
	this.writer.WriteEndDocument();
};
$asm09.System.Xml.XmlDictionaryWriter.XmlWrappedWriter.prototype.WriteEndElement = function () {
	this.writer.WriteEndElement();
	--this.depth;
};
$asm09.System.Xml.XmlDictionaryWriter.XmlWrappedWriter.prototype.WriteEntityRef = function (name) {
	this.writer.WriteEntityRef(name);
};
$asm09.System.Xml.XmlDictionaryWriter.XmlWrappedWriter.prototype.WriteFullEndElement = function () {
	this.writer.WriteFullEndElement();
};
$asm09.System.Xml.XmlDictionaryWriter.XmlWrappedWriter.prototype.WriteName = function (name) {
	this.writer.WriteName(name);
};
$asm09.System.Xml.XmlDictionaryWriter.XmlWrappedWriter.prototype.WriteNmToken = function (name) {
	this.writer.WriteNmToken(name);
};
$asm09.System.Xml.XmlDictionaryWriter.XmlWrappedWriter.prototype.WriteNode = function (reader, defattr) {
	this.writer.WriteNode(reader, defattr);
};
$asm09.System.Xml.XmlDictionaryWriter.XmlWrappedWriter.prototype.WriteProcessingInstruction = function (name, text) {
	this.writer.WriteProcessingInstruction(name, text);
};
$asm09.System.Xml.XmlDictionaryWriter.XmlWrappedWriter.prototype.WriteQualifiedName = function (localName, namespaceUri) {
	this.writer.WriteQualifiedName(localName, namespaceUri);
};
$asm09.System.Xml.XmlDictionaryWriter.XmlWrappedWriter.prototype.WriteRaw$0 = function (buffer, index, count) {
	this.writer.WriteRaw$0(buffer, index, count);
};
$asm09.System.Xml.XmlDictionaryWriter.XmlWrappedWriter.prototype.WriteRaw$1 = function (data) {
	this.writer.WriteRaw$1(data);
};
$asm09.System.Xml.XmlDictionaryWriter.XmlWrappedWriter.prototype.WriteStartAttribute = function (prefix, localName, namespaceUri) {
	this.writer.WriteStartAttribute$1(prefix, localName, namespaceUri);
	++this.prefix;
};
$asm09.System.Xml.XmlDictionaryWriter.XmlWrappedWriter.prototype.WriteStartDocument$0 = function () {
	this.writer.WriteStartDocument$0();
};
$asm09.System.Xml.XmlDictionaryWriter.XmlWrappedWriter.prototype.WriteStartDocument$1 = function (standalone) {
	this.writer.WriteStartDocument$1(standalone);
};
$asm09.System.Xml.XmlDictionaryWriter.XmlWrappedWriter.prototype.WriteStartElement = function (prefix, localName, namespaceUri) {
	this.writer.WriteStartElement$1(prefix, localName, namespaceUri);
	++this.depth;
	this.prefix = 1;
};
$asm09.System.Xml.XmlDictionaryWriter.XmlWrappedWriter.prototype.get_WriteState = function () {
	return this.writer.WriteState;
};
$asm09.System.Xml.XmlDictionaryWriter.XmlWrappedWriter.prototype.WriteString = function (text) {
	this.writer.WriteString(text);
};
$asm09.System.Xml.XmlDictionaryWriter.XmlWrappedWriter.prototype.WriteSurrogateCharEntity = function (lowChar, highChar) {
	this.writer.WriteSurrogateCharEntity(lowChar, highChar);
};
$asm09.System.Xml.XmlDictionaryWriter.XmlWrappedWriter.prototype.WriteWhitespace = function (whitespace) {
	this.writer.WriteWhitespace(whitespace);
};
$asm09.System.Xml.XmlDictionaryWriter.XmlWrappedWriter.prototype.WriteValue$0 = function (value) {
	this.writer.WriteValue$0(value);
};
$asm09.System.Xml.XmlDictionaryWriter.XmlWrappedWriter.prototype.WriteValue$1 = function (value) {
	this.writer.WriteValue$1(value);
};
$asm09.System.Xml.XmlDictionaryWriter.XmlWrappedWriter.prototype.WriteValue$2 = function (value) {
	this.writer.WriteValue$2(value);
};
$asm09.System.Xml.XmlDictionaryWriter.XmlWrappedWriter.prototype.WriteValue$3 = function (value) {
	this.writer.WriteValue$3(value);
};
$asm09.System.Xml.XmlDictionaryWriter.XmlWrappedWriter.prototype.WriteValue$4 = function (value) {
	this.writer.WriteValue$4(value);
};
$asm09.System.Xml.XmlDictionaryWriter.XmlWrappedWriter.prototype.WriteValue$5 = function (value) {
	this.writer.WriteValue$7(value);
};
$asm09.System.Xml.XmlDictionaryWriter.XmlWrappedWriter.prototype.WriteValue$6 = function (value) {
	this.writer.WriteValue$8(value);
};
$asm09.System.Xml.XmlDictionaryWriter.XmlWrappedWriter.prototype.WriteXmlnsAttribute = function (prefix, namespaceUri) {
	if (namespaceUri === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull("namespaceUri");
	}
	if (prefix === null) {
		if (this.LookupPrefix(namespaceUri) !== null) {
			return;
		}
		if (namespaceUri.length === 0) {
			prefix = System.String.Empty;
		} else {
			var str = ((this.depth).toString());
			var str2 = ((this.prefix).toString());
			prefix = (("d" + str + "p" + str2));
		}
	}
	System.Xml.XmlWriter.prototype.WriteAttributeString$2.call(this, "xmlns", prefix, null, namespaceUri);
};
$asm09.System.Xml.XmlDictionaryWriter.XmlWrappedWriter.prototype.get_XmlLang = function () {
	return this.writer.XmlLang;
};
$asm09.System.Xml.XmlDictionaryWriter.XmlWrappedWriter.prototype.get_XmlSpace = function () {
	return this.writer.XmlSpace;
};
JSIL.OverloadedMethod($asm09.System.Xml.XmlDictionaryWriter.XmlWrappedWriter.prototype, "WriteRaw", [
		["WriteRaw$0", [System.Array.Of(System.Char), System.Int32, System.Int32]], 
		["WriteRaw$1", [System.String]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlDictionaryWriter.XmlWrappedWriter.prototype, "WriteStartDocument", [
		["WriteStartDocument$0", []], 
		["WriteStartDocument$1", [System.Boolean]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlDictionaryWriter.XmlWrappedWriter.prototype, "WriteValue", [
		["WriteValue$0", [System.Object]], 
		["WriteValue$1", [System.String]], 
		["WriteValue$2", [System.Boolean]], 
		["WriteValue$3", [System.DateTime]], 
		["WriteValue$4", [System.Double]], 
		["WriteValue$5", [System.Int32]], 
		["WriteValue$6", [System.Int64]]
	]);
JSIL.MakeProperty($asm09.System.Xml.XmlDictionaryWriter.XmlWrappedWriter.prototype, "WriteState", 
	$asm09.System.Xml.XmlDictionaryWriter.XmlWrappedWriter.prototype.get_WriteState, null);
JSIL.MakeProperty($asm09.System.Xml.XmlDictionaryWriter.XmlWrappedWriter.prototype, "XmlLang", 
	$asm09.System.Xml.XmlDictionaryWriter.XmlWrappedWriter.prototype.get_XmlLang, null);
JSIL.MakeProperty($asm09.System.Xml.XmlDictionaryWriter.XmlWrappedWriter.prototype, "XmlSpace", 
	$asm09.System.Xml.XmlDictionaryWriter.XmlWrappedWriter.prototype.get_XmlSpace, null);
$asm09.System.Xml.XmlDictionaryWriter.XmlWrappedWriter.prototype.writer = null;
$asm09.System.Xml.XmlDictionaryWriter.XmlWrappedWriter.prototype.depth = 0;
$asm09.System.Xml.XmlDictionaryWriter.XmlWrappedWriter.prototype.prefix = 0;

$asm09.System.Xml.XmlBaseWriter.prototype._ctor = function () {
	System.Xml.XmlDictionaryWriter.prototype._ctor.call(this);
	this.nsMgr = new $asm09.System.Xml.XmlBaseWriter.NamespaceManager();
	this.writeState = System.Xml.WriteState.Start;
	this.documentState = $asm09.System.Xml.XmlBaseWriter.DocumentState.None;
};
$asm09.System.Xml.XmlBaseWriter.prototype.SetOutput = function (writer) {
	this.inList = false;
	this.writer = writer;
	this.nodeWriter = writer;
	this.writeState = System.Xml.WriteState.Start;
	this.documentState = $asm09.System.Xml.XmlBaseWriter.DocumentState.None;
	this.nsMgr.Clear();
	if (this.depth !== 0) {
		this.elements = null;
		this.depth = 0;
	}
	this.attributeLocalName = null;
	this.attributeValue = null;
};
$asm09.System.Xml.XmlBaseWriter.prototype.Flush = function () {
	if (this.IsClosed) {
		this.ThrowClosed();
	}
	this.writer.Flush();
};
$asm09.System.Xml.XmlBaseWriter.prototype.Close = function () {
	if (this.IsClosed) {
		return;
	}
	try {
		this.FinishDocument();
		this.AutoComplete(System.Xml.WriteState.Closed);
		this.writer.Flush();
	} finally {
		this.nsMgr.Close();
		if (this.depth !== 0) {
			this.elements = null;
			this.depth = 0;
		}
		this.attributeValue = null;
		this.attributeLocalName = null;
		this.nodeWriter.Close();
	}
};
$asm09.System.Xml.XmlBaseWriter.prototype.get_IsClosed = function () {
	return (this.writeState === System.Xml.WriteState.Closed);
};
$asm09.System.Xml.XmlBaseWriter.prototype.ThrowClosed = function () {
	throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$2("XmlWriterClosed")]));
};
$asm09.System.Xml.XmlBaseWriter.prototype.get_XmlLang = function () {
	return this.nsMgr.XmlLang;
};
$asm09.System.Xml.XmlBaseWriter.prototype.get_XmlSpace = function () {
	return this.nsMgr.XmlSpace;
};
$asm09.System.Xml.XmlBaseWriter.prototype.get_WriteState = function () {
	return this.writeState;
};
$asm09.System.Xml.XmlBaseWriter.prototype.WriteXmlnsAttribute$0 = function (prefix, ns) {
	if (this.IsClosed) {
		this.ThrowClosed();
	}
	if (ns === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull("ns");
	}
	if (this.writeState !== System.Xml.WriteState.Element) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("XmlInvalidWriteState", ["WriteXmlnsAttribute", this.WriteState.toString()])]));
	}
	if (prefix === null) {
		prefix = this.nsMgr.LookupPrefix(ns);
		if (prefix === null) {
			this.GeneratePrefix(ns, null);
			return;
		}
	} else {
		this.nsMgr.AddNamespaceIfNotDeclared(prefix, ns, null);
	}
};
$asm09.System.Xml.XmlBaseWriter.prototype.WriteXmlnsAttribute$1 = function (prefix, ns) {
	if (this.IsClosed) {
		this.ThrowClosed();
	}
	if (ns === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull("ns");
	}
	if (this.writeState !== System.Xml.WriteState.Element) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("XmlInvalidWriteState", ["WriteXmlnsAttribute", this.WriteState.toString()])]));
	}
	if (prefix === null) {
		prefix = this.nsMgr.LookupPrefix(ns.Value);
		if (prefix === null) {
			this.GeneratePrefix(ns.Value, ns);
			return;
		}
	} else {
		this.nsMgr.AddNamespaceIfNotDeclared(prefix, ns.Value, ns);
	}
};
$asm09.System.Xml.XmlBaseWriter.prototype.StartAttribute = function (/* ref */ prefix, localName, ns, xNs) {
	if (this.IsClosed) {
		this.ThrowClosed();
	}
	if (this.writeState === System.Xml.WriteState.Attribute) {
		this.WriteEndAttribute();
	}
	if (!((localName !== null) && ((localName.length !== 0) || 
				!(prefix.value != "xmlns")))) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentNullException, "_ctor$1", ["localName"]));
	}
	if (this.writeState !== System.Xml.WriteState.Element) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("XmlInvalidWriteState", ["WriteStartAttribute", this.WriteState.toString()])]));
	}
	if (prefix.value === null) {
		if (!(!(ns == "http://www.w3.org/2000/xmlns/") || !(localName != "xmlns"))) {
			prefix.value = "xmlns";
		} else if (ns == "http://www.w3.org/XML/1998/namespace") {
			prefix.value = "xml";
		} else {
			prefix.value = System.String.Empty;
		}
	}
	if (!((prefix.value.length !== 0) || !(localName == "xmlns"))) {
		prefix.value = "xmlns";
		localName = System.String.Empty;
	}
	this.isXmlnsAttribute = false;
	this.isXmlAttribute = false;
	if (prefix.value == "xml") {
		if (!((ns === null) || !(ns != "http://www.w3.org/XML/1998/namespace"))) {
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentException, "_ctor$4", [$asm09.System.Runtime.Serialization.SR.GetString$0("XmlPrefixBoundToNamespace", ["xml", "http://www.w3.org/XML/1998/namespace", ns]), "ns"]));
		}
		this.isXmlAttribute = true;
		this.attributeValue = System.String.Empty;
		this.attributeLocalName = localName;
	} else if (prefix.value == "xmlns") {
		if (!((ns === null) || !(ns != "http://www.w3.org/2000/xmlns/"))) {
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentException, "_ctor$4", [$asm09.System.Runtime.Serialization.SR.GetString$0("XmlPrefixBoundToNamespace", ["xmlns", "http://www.w3.org/2000/xmlns/", ns]), "ns"]));
		}
		this.isXmlnsAttribute = true;
		this.attributeValue = System.String.Empty;
		this.attributeLocalName = localName;
	} else if (ns === null) {
		if (prefix.value.length === 0) {
			ns = System.String.Empty;
		} else {
			ns = this.nsMgr.LookupNamespace(prefix.value);
			if (ns === null) {
				throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentException, "_ctor$4", [$asm09.System.Runtime.Serialization.SR.GetString$0("XmlUndefinedPrefix", [prefix.value]), "prefix"]));
			}
		}
	} else if (ns.length === 0) {
		if (prefix.value.length !== 0) {
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentException, "_ctor$4", [$asm09.System.Runtime.Serialization.SR.GetString$2("XmlEmptyNamespaceRequiresNullPrefix"), "prefix"]));
		}
	} else if (prefix.value.length === 0) {
		prefix.value = this.nsMgr.LookupAttributePrefix(ns);
		if (prefix.value === null) {
			if (!((ns.length !== "http://www.w3.org/2000/xmlns/".length) || !(ns == "http://www.w3.org/2000/xmlns/"))) {
				throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("XmlSpecificBindingNamespace", ["xmlns", ns])]));
			}
			if (!((ns.length !== "http://www.w3.org/XML/1998/namespace".length) || !(ns == "http://www.w3.org/XML/1998/namespace"))) {
				throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("XmlSpecificBindingNamespace", ["xml", ns])]));
			}
			prefix.value = this.GeneratePrefix(ns, xNs);
		}
	} else {
		this.nsMgr.AddNamespaceIfNotDeclared(prefix.value, ns, xNs);
	}
	this.writeState = System.Xml.WriteState.Attribute;
};
$asm09.System.Xml.XmlBaseWriter.prototype.WriteStartAttribute$0 = function ($prefix, localName, namespaceUri) {
	var prefix = new JSIL.Variable($prefix);
	this.StartAttribute(/* ref */ prefix, localName, namespaceUri, null);
	if (!this.isXmlnsAttribute) {
		this.writer.WriteStartAttribute$0(prefix.value, localName);
	}
};
$asm09.System.Xml.XmlBaseWriter.prototype.WriteStartAttribute$1 = function ($prefix, localName, namespaceUri) {
	var prefix = new JSIL.Variable($prefix);
	this.StartAttribute(/* ref */ prefix, localName ? localName.Value : null, namespaceUri ? namespaceUri.Value : null, namespaceUri);
	if (!this.isXmlnsAttribute) {
		this.writer.WriteStartAttribute$2(prefix.value, localName);
	}
};
$asm09.System.Xml.XmlBaseWriter.prototype.WriteEndAttribute = function () {
	if (this.IsClosed) {
		this.ThrowClosed();
	}
	if (this.writeState !== System.Xml.WriteState.Attribute) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("XmlInvalidWriteState", ["WriteEndAttribute", this.WriteState.toString()])]));
	}
	this.FlushBase64();
	try {
		if (this.isXmlAttribute) {
			if (this.attributeLocalName == "lang") {
				this.nsMgr.AddLangAttribute(this.attributeValue);
			} else if (this.attributeLocalName == "space") {
				if (this.attributeValue == "preserve") {
					this.nsMgr.AddSpaceAttribute(System.Xml.XmlSpace.Preserve);
				} else {
					if (!(this.attributeValue == "default")) {
						throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("XmlInvalidXmlSpace", [this.attributeValue])]));
					}
					this.nsMgr.AddSpaceAttribute(System.Xml.XmlSpace.Default);
				}
			}
			this.isXmlAttribute = false;
			this.attributeLocalName = null;
			this.attributeValue = null;
		}
		if (this.isXmlnsAttribute) {
			this.nsMgr.AddNamespaceIfNotDeclared(this.attributeLocalName, this.attributeValue, null);
			this.isXmlnsAttribute = false;
			this.attributeLocalName = null;
			this.attributeValue = null;
		} else {
			this.writer.WriteEndAttribute();
		}
	} finally {
		this.writeState = System.Xml.WriteState.Element;
	}
};
$asm09.System.Xml.XmlBaseWriter.prototype.WriteComment = function (text) {
	if (this.IsClosed) {
		this.ThrowClosed();
	}
	if (this.writeState === System.Xml.WriteState.Attribute) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("XmlInvalidWriteState", ["WriteComment", this.WriteState.toString()])]));
	}
	if (text === null) {
		text = System.String.Empty;
	} else if (!((text.IndexOf$6("--", System.StringComparison.Ordinal) === -1) && ((text.length <= 0) || 
				((text[(text.length - 1)]) !== "-")))) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentException, "_ctor$4", [$asm09.System.Runtime.Serialization.SR.GetString$2("XmlInvalidCommentChars"), "text"]));
	}
	this.StartComment();
	this.FlushBase64();
	this.writer.WriteComment(text);
	this.EndComment();
};
$asm09.System.Xml.XmlBaseWriter.prototype.WriteFullEndElement = function () {
	if (this.IsClosed) {
		this.ThrowClosed();
	}
	if (this.writeState === System.Xml.WriteState.Attribute) {
		this.WriteEndAttribute();
	}
	if (!((this.writeState === System.Xml.WriteState.Element) || (this.writeState === System.Xml.WriteState.Content))) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("XmlInvalidWriteState", ["WriteFullEndElement", this.WriteState.toString()])]));
	}
	this.AutoComplete(System.Xml.WriteState.Content);
	this.WriteEndElement();
};
$asm09.System.Xml.XmlBaseWriter.prototype.WriteCData = function (text) {
	if (this.IsClosed) {
		this.ThrowClosed();
	}
	if (this.writeState === System.Xml.WriteState.Attribute) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("XmlInvalidWriteState", ["WriteCData", this.WriteState.toString()])]));
	}
	if (text === null) {
		text = System.String.Empty;
	}
	if (text.length > 0) {
		this.StartContent$0();
		this.FlushBase64();
		this.writer.WriteCData(text);
		this.EndContent();
	}
};
$asm09.System.Xml.XmlBaseWriter.prototype.WriteDocType = function (name, pubid, sysid, subset) {
	throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.NotSupportedException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("XmlMethodNotSupported", ["WriteDocType"])]));
};
$asm09.System.Xml.XmlBaseWriter.prototype.StartElement = function (/* ref */ prefix, localName, ns, xNs) {
	if (this.IsClosed) {
		this.ThrowClosed();
	}
	if (this.documentState === $asm09.System.Xml.XmlBaseWriter.DocumentState.Epilog) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$2("XmlOnlyOneRoot")]));
	}
	if (localName === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentNullException, "_ctor$1", ["localName"]));
	}
	if (localName.length === 0) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentException, "_ctor$4", [$asm09.System.Runtime.Serialization.SR.GetString$2("InvalidLocalNameEmpty"), "localName"]));
	}
	if (this.writeState === System.Xml.WriteState.Attribute) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("XmlInvalidWriteState", ["WriteStartElement", this.WriteState.toString()])]));
	}
	this.FlushBase64();
	this.AutoComplete(System.Xml.WriteState.Element);
	var element = this.EnterScope();
	if (ns === null) {
		if (prefix.value === null) {
			prefix.value = System.String.Empty;
		}
		ns = this.nsMgr.LookupNamespace(prefix.value);
		if (ns === null) {
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentException, "_ctor$4", [$asm09.System.Runtime.Serialization.SR.GetString$0("XmlUndefinedPrefix", [prefix.value]), "prefix"]));
		}
	} else if (prefix.value === null) {
		prefix.value = this.nsMgr.LookupPrefix(ns);
		if (prefix.value === null) {
			prefix.value = System.String.Empty;
			this.nsMgr.AddNamespace$1(System.String.Empty, ns, xNs);
		}
	} else {
		this.nsMgr.AddNamespaceIfNotDeclared(prefix.value, ns, xNs);
	}
	element.Prefix = prefix.value;
	element.LocalName = localName;
};
$asm09.System.Xml.XmlBaseWriter.prototype.WriteStartElement$0 = function ($prefix, localName, namespaceUri) {
	var prefix = new JSIL.Variable($prefix);
	this.StartElement(/* ref */ prefix, localName, namespaceUri, null);
	this.writer.WriteStartElement$0(prefix.value, localName);
};
$asm09.System.Xml.XmlBaseWriter.prototype.WriteStartElement$1 = function ($prefix, localName, namespaceUri) {
	var prefix = new JSIL.Variable($prefix);
	this.StartElement(/* ref */ prefix, localName ? localName.Value : null, namespaceUri ? namespaceUri.Value : null, namespaceUri);
	this.writer.WriteStartElement$2(prefix.value, localName);
};
$asm09.System.Xml.XmlBaseWriter.prototype.WriteEndElement = function () {
	if (this.IsClosed) {
		this.ThrowClosed();
	}
	if (this.depth === 0) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("XmlInvalidDepth", ["WriteEndElement", (this.depth).toString()])]));
	}
	if (this.writeState === System.Xml.WriteState.Attribute) {
		this.WriteEndAttribute();
	}
	this.FlushBase64();
	if (this.writeState === System.Xml.WriteState.Element) {
		this.nsMgr.DeclareNamespaces(this.writer);
		this.writer.WriteEndStartElement(true);
	} else {
		var element = this.elements[this.depth];
		this.writer.WriteEndElement$0(element.Prefix, element.LocalName);
	}
	this.ExitScope();
	this.writeState = System.Xml.WriteState.Content;
};
$asm09.System.Xml.XmlBaseWriter.prototype.EnterScope = function () {
	this.nsMgr.EnterScope();
	++this.depth;
	if (this.elements === null) {
		this.elements = JSIL.Array.New($asm09.System.Xml.XmlBaseWriter.Element, 4);
	} else if (this.elements.length === this.depth) {
		var destinationArray = JSIL.Array.New($asm09.System.Xml.XmlBaseWriter.Element, (this.depth * 2));
		System.Array.Copy$0(this.elements, destinationArray, this.depth);
		this.elements = destinationArray;
	}
	var element = this.elements[this.depth];
	if (element === null) {
		element = new $asm09.System.Xml.XmlBaseWriter.Element();
		this.elements[this.depth] = element;
	}
	return element;
};
$asm09.System.Xml.XmlBaseWriter.prototype.ExitScope = function () {
	this.elements[this.depth].Clear();
	--this.depth;
	if (!(this.depth || (this.documentState !== $asm09.System.Xml.XmlBaseWriter.DocumentState.Document))) {
		this.documentState = $asm09.System.Xml.XmlBaseWriter.DocumentState.Epilog;
	}
	this.nsMgr.ExitScope();
};
$asm09.System.Xml.XmlBaseWriter.prototype.FlushElement = function () {
	if (this.writeState === System.Xml.WriteState.Element) {
		this.AutoComplete(System.Xml.WriteState.Content);
	}
};
$asm09.System.Xml.XmlBaseWriter.prototype.StartComment = function () {
	this.FlushElement();
};
$asm09.System.Xml.XmlBaseWriter.prototype.EndComment = function () {
};
$asm09.System.Xml.XmlBaseWriter.prototype.StartContent$0 = function () {
	this.FlushElement();
	if (this.depth === 0) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$2("XmlIllegalOutsideRoot")]));
	}
};
$asm09.System.Xml.XmlBaseWriter.prototype.StartContent$1 = function (ch) {
	this.FlushElement();
	if (this.depth === 0) {
		this.VerifyWhitespace$0(ch);
	}
};
$asm09.System.Xml.XmlBaseWriter.prototype.StartContent$2 = function (s) {
	this.FlushElement();
	if (this.depth === 0) {
		this.VerifyWhitespace$1(s);
	}
};
$asm09.System.Xml.XmlBaseWriter.prototype.StartContent$3 = function (chars, offset, count) {
	this.FlushElement();
	if (this.depth === 0) {
		this.VerifyWhitespace$2(chars, offset, count);
	}
};
$asm09.System.Xml.XmlBaseWriter.prototype.VerifyWhitespace$0 = function (ch) {
	if (!this.IsWhitespace(ch)) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$2("XmlIllegalOutsideRoot")]));
	}
};
$asm09.System.Xml.XmlBaseWriter.prototype.VerifyWhitespace$1 = function (s) {
__loop0__: 
	for (var i = 0; i < s.length; ++i) {
		if (!this.IsWhitespace(s[i])) {
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$2("XmlIllegalOutsideRoot")]));
		}
	}
};
$asm09.System.Xml.XmlBaseWriter.prototype.VerifyWhitespace$2 = function (chars, offset, count) {
__loop0__: 
	for (var i = 0; i < count; ++i) {
		if (!this.IsWhitespace(chars[(offset + i)])) {
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$2("XmlIllegalOutsideRoot")]));
		}
	}
};
$asm09.System.Xml.XmlBaseWriter.prototype.IsWhitespace = function (ch) {
	return ((ch === " ") || 
		(ch === "\n") || 
		(ch === "\r") || (ch === "t"));
};
$asm09.System.Xml.XmlBaseWriter.prototype.EndContent = function () {
};
$asm09.System.Xml.XmlBaseWriter.prototype.AutoComplete = function (writeState) {
	if (this.writeState === System.Xml.WriteState.Element) {
		this.EndStartElement();
	}
	this.writeState = writeState;
};
$asm09.System.Xml.XmlBaseWriter.prototype.EndStartElement = function () {
	this.nsMgr.DeclareNamespaces(this.writer);
	this.writer.WriteEndStartElement(false);
};
$asm09.System.Xml.XmlBaseWriter.prototype.LookupPrefix = function (ns) {
	if (ns === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentNullException, "_ctor$1", ["ns"]));
	}
	if (this.IsClosed) {
		this.ThrowClosed();
	}
	return this.nsMgr.LookupPrefix(ns);
};
$asm09.System.Xml.XmlBaseWriter.prototype.LookupNamespace = function (prefix) {
	if (prefix === null) {
		return null;
	}
	return this.nsMgr.LookupNamespace(prefix);
};
$asm09.System.Xml.XmlBaseWriter.prototype.GetQualifiedNamePrefix = function (namespaceUri, xNs) {
	var text = this.nsMgr.LookupPrefix(namespaceUri);
	if (text === null) {
		if (this.writeState !== System.Xml.WriteState.Attribute) {
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentException, "_ctor$4", [$asm09.System.Runtime.Serialization.SR.GetString$0("XmlNamespaceNotFound", [namespaceUri]), "namespaceUri"]));
		}
		text = this.GeneratePrefix(namespaceUri, xNs);
	}
	return text;
};
$asm09.System.Xml.XmlBaseWriter.prototype.WriteQualifiedName$0 = function (localName, namespaceUri) {
	if (this.IsClosed) {
		this.ThrowClosed();
	}
	if (localName === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentNullException, "_ctor$1", ["localName"]));
	}
	if (localName.length === 0) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentException, "_ctor$4", [$asm09.System.Runtime.Serialization.SR.GetString$2("InvalidLocalNameEmpty"), "localName"]));
	}
	if (namespaceUri === null) {
		namespaceUri = System.String.Empty;
	}
	var qualifiedNamePrefix = this.GetQualifiedNamePrefix(namespaceUri, null);
	if (qualifiedNamePrefix.length !== 0) {
		this.WriteString(qualifiedNamePrefix);
		this.WriteString(":");
	}
	this.WriteString(localName);
};
$asm09.System.Xml.XmlBaseWriter.prototype.WriteQualifiedName$1 = function (localName, namespaceUri) {
	if (this.IsClosed) {
		this.ThrowClosed();
	}
	if (localName === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentNullException, "_ctor$1", ["localName"]));
	}
	if (localName.Value.length === 0) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentException, "_ctor$4", [$asm09.System.Runtime.Serialization.SR.GetString$2("InvalidLocalNameEmpty"), "localName"]));
	}
	if (namespaceUri === null) {
		namespaceUri = System.Xml.XmlDictionaryString.Empty;
	}
	var qualifiedNamePrefix = this.GetQualifiedNamePrefix(namespaceUri.Value, namespaceUri);
	this.FlushBase64();
	if (this.attributeValue !== null) {
		this.WriteAttributeText((qualifiedNamePrefix + ":" + namespaceUri.Value));
	}
	if (!this.isXmlnsAttribute) {
		this.StartContent$0();
		this.writer.WriteQualifiedName(qualifiedNamePrefix, localName);
		this.EndContent();
	}
};
$asm09.System.Xml.XmlBaseWriter.prototype.WriteStartDocument$0 = function () {
	if (this.IsClosed) {
		this.ThrowClosed();
	}
	if (this.writeState !== 0) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("XmlInvalidWriteState", ["WriteStartDocument", this.WriteState.toString()])]));
	}
	this.writeState = System.Xml.WriteState.Prolog;
	this.documentState = $asm09.System.Xml.XmlBaseWriter.DocumentState.Document;
	this.writer.WriteDeclaration();
};
$asm09.System.Xml.XmlBaseWriter.prototype.WriteStartDocument$1 = function (standalone) {
	if (this.IsClosed) {
		this.ThrowClosed();
	}
	this.WriteStartDocument$0();
};
$asm09.System.Xml.XmlBaseWriter.prototype.WriteProcessingInstruction = function (name, text) {
	if (this.IsClosed) {
		this.ThrowClosed();
	}
	if (name != "xml") {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentException, "_ctor$4", [$asm09.System.Runtime.Serialization.SR.GetString$2("XmlProcessingInstructionNotSupported"), "name"]));
	}
	if (this.writeState !== 0) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$2("XmlInvalidDeclaration")]));
	}
	this.writer.WriteDeclaration();
};
$asm09.System.Xml.XmlBaseWriter.prototype.FinishDocument = function () {
	if (this.writeState === System.Xml.WriteState.Attribute) {
		this.WriteEndAttribute();
	}
__loop0__: 
	while (this.depth > 0) {
		this.WriteEndElement();
	}
};
$asm09.System.Xml.XmlBaseWriter.prototype.WriteEndDocument = function () {
	if (this.IsClosed) {
		this.ThrowClosed();
	}
	if (!((this.writeState !== 0) && (this.writeState !== System.Xml.WriteState.Prolog))) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$2("XmlNoRootElement")]));
	}
	this.FinishDocument();
	this.writeState = System.Xml.WriteState.Start;
	this.documentState = $asm09.System.Xml.XmlBaseWriter.DocumentState.End;
};
$asm09.System.Xml.XmlBaseWriter.prototype.get_NamespaceBoundary = function () {
	return this.nsMgr.NamespaceBoundary;
};
$asm09.System.Xml.XmlBaseWriter.prototype.set_NamespaceBoundary = function (value) {
	this.nsMgr.NamespaceBoundary = value;
};
$asm09.System.Xml.XmlBaseWriter.prototype.WriteEntityRef = function (name) {
	throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.NotSupportedException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("XmlMethodNotSupported", ["WriteEntityRef"])]));
};
$asm09.System.Xml.XmlBaseWriter.prototype.WriteName = function (name) {
	if (this.IsClosed) {
		this.ThrowClosed();
	}
	this.WriteString(name);
};
$asm09.System.Xml.XmlBaseWriter.prototype.WriteNmToken = function (name) {
	throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.NotSupportedException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("XmlMethodNotSupported", ["WriteNmToken"])]));
};
$asm09.System.Xml.XmlBaseWriter.prototype.WriteWhitespace = function (whitespace) {
	if (this.IsClosed) {
		this.ThrowClosed();
	}
	if (whitespace === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull("whitespace");
	}
__loop0__: 
	for (var i = 0; i < whitespace.length; ++i) {
		var c = (whitespace[i]);
		if (!((c === " ") || 
				(c === "\t") || 
				(c === "\n") || (c === "\r"))) {
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentException, "_ctor$4", [$asm09.System.Runtime.Serialization.SR.GetString$2("XmlOnlyWhitespace"), "whitespace"]));
		}
	}
	this.WriteString(whitespace);
};
$asm09.System.Xml.XmlBaseWriter.prototype.WriteString$0 = function (value) {
	if (this.IsClosed) {
		this.ThrowClosed();
	}
	if (value === null) {
		value = System.String.Empty;
	}
	if (!((value.length <= 0) && !this.inList)) {
		this.FlushBase64();
		if (this.attributeValue !== null) {
			this.WriteAttributeText(value);
		}
		if (!this.isXmlnsAttribute) {
			this.StartContent$2(value);
			this.writer.WriteEscapedText$0(value);
			this.EndContent();
		}
	}
};
$asm09.System.Xml.XmlBaseWriter.prototype.WriteString$1 = function (value) {
	if (this.IsClosed) {
		this.ThrowClosed();
	}
	if (value === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull("value");
	}
	if (value.Value.length > 0) {
		this.FlushBase64();
		if (this.attributeValue !== null) {
			this.WriteAttributeText(value.Value);
		}
		if (!this.isXmlnsAttribute) {
			this.StartContent$2(value.Value);
			this.writer.WriteEscapedText$1(value);
			this.EndContent();
		}
	}
};
$asm09.System.Xml.XmlBaseWriter.prototype.WriteChars = function (chars, offset, count) {
	if (this.IsClosed) {
		this.ThrowClosed();
	}
	if (chars === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentNullException, "_ctor$1", ["chars"]));
	}
	if (offset < 0) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["offset", $asm09.System.Runtime.Serialization.SR.GetString$2("ValueMustBeNonNegative")]));
	}
	if (count < 0) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["count", $asm09.System.Runtime.Serialization.SR.GetString$2("ValueMustBeNonNegative")]));
	}
	if (count > (chars.length - offset)) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["count", $asm09.System.Runtime.Serialization.SR.GetString$0("SizeExceedsRemainingBufferSpace", [(chars.length - offset)])]));
	}
	if (count > 0) {
		this.FlushBase64();
		if (this.attributeValue !== null) {
			this.WriteAttributeText(JSIL.New(System.String, "_ctor$0", [chars, offset, count]));
		}
		if (!this.isXmlnsAttribute) {
			this.StartContent$3(chars, offset, count);
			this.writer.WriteEscapedText$2(chars, offset, count);
			this.EndContent();
		}
	}
};
$asm09.System.Xml.XmlBaseWriter.prototype.WriteRaw$0 = function (value) {
	if (this.IsClosed) {
		this.ThrowClosed();
	}
	if (value === null) {
		value = System.String.Empty;
	}
	if (value.length > 0) {
		this.FlushBase64();
		if (this.attributeValue !== null) {
			this.WriteAttributeText(value);
		}
		if (!this.isXmlnsAttribute) {
			this.StartContent$2(value);
			this.writer.WriteText$0(value);
			this.EndContent();
		}
	}
};
$asm09.System.Xml.XmlBaseWriter.prototype.WriteRaw$1 = function (chars, offset, count) {
	if (this.IsClosed) {
		this.ThrowClosed();
	}
	if (chars === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentNullException, "_ctor$1", ["chars"]));
	}
	if (offset < 0) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["offset", $asm09.System.Runtime.Serialization.SR.GetString$2("ValueMustBeNonNegative")]));
	}
	if (count < 0) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["count", $asm09.System.Runtime.Serialization.SR.GetString$2("ValueMustBeNonNegative")]));
	}
	if (count > (chars.length - offset)) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["count", $asm09.System.Runtime.Serialization.SR.GetString$0("SizeExceedsRemainingBufferSpace", [(chars.length - offset)])]));
	}
	if (count > 0) {
		this.FlushBase64();
		if (this.attributeValue !== null) {
			this.WriteAttributeText(JSIL.New(System.String, "_ctor$0", [chars, offset, count]));
		}
		if (!this.isXmlnsAttribute) {
			this.StartContent$3(chars, offset, count);
			this.writer.WriteText$2(chars, offset, count);
			this.EndContent();
		}
	}
};
$asm09.System.Xml.XmlBaseWriter.prototype.WriteCharEntity = function (ch) {
	if (this.IsClosed) {
		this.ThrowClosed();
	}
	if (!((ch < "\ud800") || (ch > "\udfff"))) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentException, "_ctor$4", [$asm09.System.Runtime.Serialization.SR.GetString$2("XmlMissingLowSurrogate"), "ch"]));
	}
	if (this.attributeValue !== null) {
		this.WriteAttributeText(ch.toString());
	}
	if (!this.isXmlnsAttribute) {
		this.StartContent$1(ch);
		this.FlushBase64();
		this.writer.WriteCharEntity(ch.charCodeAt(0));
		this.EndContent();
	}
};
$asm09.System.Xml.XmlBaseWriter.prototype.WriteSurrogateCharEntity = function (lowChar, highChar) {
	var surrogateChar = new $asm09.System.Text.SurrogateChar();
	if (this.IsClosed) {
		this.ThrowClosed();
	}
	surrogateChar._ctor$1(lowChar, highChar);
	if (this.attributeValue !== null) {
		var value = JSIL.Array.New(System.Char, [highChar, lowChar]);
		this.WriteAttributeText(JSIL.New(System.String, "_ctor$1", [value]));
	}
	if (!this.isXmlnsAttribute) {
		this.StartContent$0();
		this.FlushBase64();
		this.writer.WriteCharEntity(surrogateChar.Char);
		this.EndContent();
	}
};
$asm09.System.Xml.XmlBaseWriter.prototype.WriteValue$0 = function (value) {
	if (this.IsClosed) {
		this.ThrowClosed();
	}
	if (value === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentNullException, "_ctor$1", ["value"]));
	}
	if (JSIL.TryCast(value, System.Array.Of(System.Object)) !== null) {
		this.WriteValue$14(JSIL.Cast(value, System.Array.Of(System.Object)));
		return;
	}
	if (JSIL.TryCast(value, System.Array) !== null) {
		this.WriteValue$15(JSIL.Cast(value, System.Array));
		return;
	}
	this.WritePrimitiveValue(value);
};
$asm09.System.Xml.XmlBaseWriter.prototype.WritePrimitiveValue = function (value) {
	if (this.IsClosed) {
		this.ThrowClosed();
	}
	if (value === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentNullException, "_ctor$1", ["value"]));
	}
	if (JSIL.TryCast(value, System.UInt64) !== 0) {
		this.WriteValue$4(JSIL.Cast(value, System.UInt64));
		return;
	}
	if (JSIL.TryCast(value, System.String) !== null) {
		this.WriteValue$1(JSIL.Cast(value, System.String));
		return;
	}
	if (JSIL.TryCast(value, System.Int32) !== 0) {
		this.WriteValue$7(JSIL.Cast(value, System.Int32));
		return;
	}
	if (JSIL.TryCast(value, System.Int64) !== 0) {
		this.WriteValue$8(JSIL.Cast(value, System.Int64));
		return;
	}
	if (JSIL.TryCast(value, System.Boolean)) {
		this.WriteValue$2(JSIL.Cast(value, System.Boolean));
		return;
	}
	if (JSIL.TryCast(value, System.Double) !== 0) {
		this.WriteValue$4(JSIL.Cast(value, System.Double));
		return;
	}
	if (JSIL.TryCast(value, System.DateTime) !== new System.DateTime()) {
		this.WriteValue$3(JSIL.Cast(value, System.DateTime).MemberwiseClone());
		return;
	}
	if (JSIL.TryCast(value, System.Single) !== 0) {
		this.WriteValue$5(JSIL.Cast(value, System.Single));
		return;
	}
	if (JSIL.TryCast(value, System.Decimal) !== 0) {
		this.WriteValue$6(JSIL.Cast(value, System.Decimal).MemberwiseClone());
		return;
	}
	if (JSIL.TryCast(value, System.Xml.XmlDictionaryString) !== null) {
		this.WriteValue$0(JSIL.Cast(value, System.Xml.XmlDictionaryString));
		return;
	}
	if (JSIL.TryCast(value, System.Xml.UniqueId) !== null) {
		this.WriteValue$2(JSIL.Cast(value, System.Xml.UniqueId));
		return;
	}
	if (JSIL.TryCast(value, System.Guid) !== new System.Guid()) {
		this.WriteValue$3(JSIL.Cast(value, System.Guid).MemberwiseClone());
		return;
	}
	if (JSIL.TryCast(value, System.TimeSpan) !== new System.TimeSpan()) {
		this.WriteValue$4(JSIL.Cast(value, System.TimeSpan).MemberwiseClone());
		return;
	}
	if (JSIL.GetType(value).IsArray) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentException, "_ctor$4", [$asm09.System.Runtime.Serialization.SR.GetString$2("XmlNestedArraysNotSupported"), "value"]));
	}
	System.Xml.XmlWriter.prototype.WriteValue$0.call(this, value);
};
$asm09.System.Xml.XmlBaseWriter.prototype.WriteValue$1 = function (value) {
	if (this.IsClosed) {
		this.ThrowClosed();
	}
	this.WriteString(value);
};
$asm09.System.Xml.XmlBaseWriter.prototype.WriteValue$2 = function (value) {
	if (this.IsClosed) {
		this.ThrowClosed();
	}
	this.FlushBase64();
	if (this.attributeValue !== null) {
		this.WriteAttributeText($asm09.System.Xml.XmlConverter.ToString$2(value));
	}
	if (!this.isXmlnsAttribute) {
		this.StartContent$0();
		this.writer.WriteInt32Text(value);
		this.EndContent();
	}
};
$asm09.System.Xml.XmlBaseWriter.prototype.WriteValue$3 = function (value) {
	if (this.IsClosed) {
		this.ThrowClosed();
	}
	this.FlushBase64();
	if (this.attributeValue !== null) {
		this.WriteAttributeText($asm09.System.Xml.XmlConverter.ToString$3(value));
	}
	if (!this.isXmlnsAttribute) {
		this.StartContent$0();
		this.writer.WriteInt64Text(value);
		this.EndContent();
	}
};
$asm09.System.Xml.XmlBaseWriter.prototype.WriteValue$4 = function (value) {
	if (this.IsClosed) {
		this.ThrowClosed();
	}
	this.FlushBase64();
	if (this.attributeValue !== null) {
		this.WriteAttributeText($asm09.System.Xml.XmlConverter.ToString$10(value));
	}
	if (!this.isXmlnsAttribute) {
		this.StartContent$0();
		this.writer.WriteUInt64Text(value);
		this.EndContent();
	}
};
$asm09.System.Xml.XmlBaseWriter.prototype.WriteValue$5 = function (value) {
	if (this.IsClosed) {
		this.ThrowClosed();
	}
	this.FlushBase64();
	if (this.attributeValue !== null) {
		this.WriteAttributeText($asm09.System.Xml.XmlConverter.ToString$1(value));
	}
	if (!this.isXmlnsAttribute) {
		this.StartContent$0();
		this.writer.WriteBoolText(value);
		this.EndContent();
	}
};
$asm09.System.Xml.XmlBaseWriter.prototype.WriteValue$6 = function (value) {
	if (this.IsClosed) {
		this.ThrowClosed();
	}
	this.FlushBase64();
	if (this.attributeValue !== null) {
		this.WriteAttributeText($asm09.System.Xml.XmlConverter.ToString$6(value.MemberwiseClone()));
	}
	if (!this.isXmlnsAttribute) {
		this.StartContent$0();
		this.writer.WriteDecimalText(value.MemberwiseClone());
		this.EndContent();
	}
};
$asm09.System.Xml.XmlBaseWriter.prototype.WriteValue$7 = function (value) {
	if (this.IsClosed) {
		this.ThrowClosed();
	}
	this.FlushBase64();
	if (this.attributeValue !== null) {
		this.WriteAttributeText($asm09.System.Xml.XmlConverter.ToString$4(value));
	}
	if (!this.isXmlnsAttribute) {
		this.StartContent$0();
		this.writer.WriteFloatText(value);
		this.EndContent();
	}
};
$asm09.System.Xml.XmlBaseWriter.prototype.WriteValue$8 = function (value) {
	if (this.IsClosed) {
		this.ThrowClosed();
	}
	this.FlushBase64();
	if (this.attributeValue !== null) {
		this.WriteAttributeText($asm09.System.Xml.XmlConverter.ToString$5(value));
	}
	if (!this.isXmlnsAttribute) {
		this.StartContent$0();
		this.writer.WriteDoubleText(value);
		this.EndContent();
	}
};
$asm09.System.Xml.XmlBaseWriter.prototype.WriteValue$9 = function (value) {
	this.WriteString(value);
};
$asm09.System.Xml.XmlBaseWriter.prototype.WriteValue$10 = function (value) {
	if (this.IsClosed) {
		this.ThrowClosed();
	}
	this.FlushBase64();
	if (this.attributeValue !== null) {
		this.WriteAttributeText($asm09.System.Xml.XmlConverter.ToString$11(value.MemberwiseClone()));
	}
	if (!this.isXmlnsAttribute) {
		this.StartContent$0();
		this.writer.WriteDateTimeText(value.MemberwiseClone());
		this.EndContent();
	}
};
$asm09.System.Xml.XmlBaseWriter.prototype.WriteValue$11 = function (value) {
	if (this.IsClosed) {
		this.ThrowClosed();
	}
	if (System.Xml.UniqueId.op_Equality(value, null)) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull("value");
	}
	this.FlushBase64();
	if (this.attributeValue !== null) {
		this.WriteAttributeText($asm09.System.Xml.XmlConverter.ToString$8(value));
	}
	if (!this.isXmlnsAttribute) {
		this.StartContent$0();
		this.writer.WriteUniqueIdText(value);
		this.EndContent();
	}
};
$asm09.System.Xml.XmlBaseWriter.prototype.WriteValue$12 = function (value) {
	if (this.IsClosed) {
		this.ThrowClosed();
	}
	this.FlushBase64();
	if (this.attributeValue !== null) {
		this.WriteAttributeText($asm09.System.Xml.XmlConverter.ToString$9(value.MemberwiseClone()));
	}
	if (!this.isXmlnsAttribute) {
		this.StartContent$0();
		this.writer.WriteGuidText(value.MemberwiseClone());
		this.EndContent();
	}
};
$asm09.System.Xml.XmlBaseWriter.prototype.WriteValue$13 = function (value) {
	if (this.IsClosed) {
		this.ThrowClosed();
	}
	this.FlushBase64();
	if (this.attributeValue !== null) {
		this.WriteAttributeText($asm09.System.Xml.XmlConverter.ToString$7(value.MemberwiseClone()));
	}
	if (!this.isXmlnsAttribute) {
		this.StartContent$0();
		this.writer.WriteTimeSpanText(value.MemberwiseClone());
		this.EndContent();
	}
};
$asm09.System.Xml.XmlBaseWriter.prototype.WriteBase64 = function (buffer, offset, count) {
	if (this.IsClosed) {
		this.ThrowClosed();
	}
	if (buffer === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentNullException, "_ctor$1", ["buffer"]));
	}
	if (offset < 0) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["offset", $asm09.System.Runtime.Serialization.SR.GetString$2("ValueMustBeNonNegative")]));
	}
	if (count < 0) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["count", $asm09.System.Runtime.Serialization.SR.GetString$2("ValueMustBeNonNegative")]));
	}
	if (count > (buffer.length - offset)) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["count", $asm09.System.Runtime.Serialization.SR.GetString$0("SizeExceedsRemainingBufferSpace", [(buffer.length - offset)])]));
	}
	if (count > 0) {
		if (this.trailByteCount > 0) {
		__loop0__: 
			for (; (this.trailByteCount < 3) && (count > 0); --count) {
				this.trailBytes[this.trailByteCount++] = buffer[offset++];
			}
		}
		var num = (this.trailByteCount + count);
		var num2 = (num - (num % 3));
		if (this.trailBytes === null) {
			this.trailBytes = JSIL.Array.New(System.Byte, 3);
		}
		if (num2 >= 3) {
			if (this.attributeValue !== null) {
				this.WriteAttributeText($asm09.System.Xml.XmlConverter.Base64Encoding.GetString$1(this.trailBytes, 0, this.trailByteCount));
				this.WriteAttributeText($asm09.System.Xml.XmlConverter.Base64Encoding.GetString$1(buffer, offset, (num2 - this.trailByteCount)));
			}
			if (!this.isXmlnsAttribute) {
				this.StartContent$0();
				this.writer.WriteBase64Text(
					this.trailBytes, 
					this.trailByteCount, 
					buffer, 
					offset, 
					(num2 - this.trailByteCount)
				);
				this.EndContent();
			}
			this.trailByteCount = (num - num2);
			if (this.trailByteCount > 0) {
				var num3 = ((offset + count) - this.trailByteCount);
			__loop1__: 
				for (var i = 0; i < this.trailByteCount; ++i) {
					this.trailBytes[i] = buffer[num3++];
				}
				return;
			}
		} else {
			System.Buffer.BlockCopy(
				buffer, 
				offset, 
				this.trailBytes, 
				this.trailByteCount, 
				count
			);
			this.trailByteCount += count;
		}
	}
};
$asm09.System.Xml.XmlBaseWriter.prototype.get_CanCanonicalize = function () {
	return false;
};
$asm09.System.Xml.XmlBaseWriter.prototype.StartCanonicalization = function (stream, includeComments, inclusivePrefixes) {
	throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.NotSupportedException, "_ctor$0", []));
};
$asm09.System.Xml.XmlBaseWriter.prototype.EndCanonicalization = function () {
	throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.NotSupportedException, "_ctor$0", []));
};
$asm09.System.Xml.XmlBaseWriter.prototype.FlushBase64 = function () {
	if (this.trailByteCount > 0) {
		this.FlushTrailBytes();
	}
};
$asm09.System.Xml.XmlBaseWriter.prototype.FlushTrailBytes = function () {
	if (this.attributeValue !== null) {
		this.WriteAttributeText($asm09.System.Xml.XmlConverter.Base64Encoding.GetString$1(this.trailBytes, 0, this.trailByteCount));
	}
	if (!this.isXmlnsAttribute) {
		this.StartContent$0();
		this.writer.WriteBase64Text(
			this.trailBytes, 
			this.trailByteCount, 
			this.trailBytes, 
			0, 
			0
		);
		this.EndContent();
	}
	this.trailByteCount = 0;
};
$asm09.System.Xml.XmlBaseWriter.prototype.WriteValue$14 = function (array) {
	this.FlushBase64();
	this.StartContent$0();
	this.writer.WriteStartListText();
	this.inList = true;
__loop0__: 
	for (var i = 0; i < array.length; ++i) {
		if (i !== 0) {
			this.writer.WriteListSeparator();
		}
		this.WritePrimitiveValue(array[i]);
	}
	this.inList = false;
	this.writer.WriteEndListText();
	this.EndContent();
};
$asm09.System.Xml.XmlBaseWriter.prototype.WriteValue$15 = function (array) {
	this.FlushBase64();
	this.StartContent$0();
	this.writer.WriteStartListText();
	this.inList = true;
__loop0__: 
	for (var i = 0; i < array.length; ++i) {
		if (i !== 0) {
			this.writer.WriteListSeparator();
		}
		this.WritePrimitiveValue(array.GetValue(i));
	}
	this.inList = false;
	this.writer.WriteEndListText();
	this.EndContent();
};
$asm09.System.Xml.XmlBaseWriter.prototype.StartArray = function (count) {
	this.FlushBase64();
	if (this.documentState === $asm09.System.Xml.XmlBaseWriter.DocumentState.Epilog) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$2("XmlOnlyOneRoot")]));
	}
	if (!((this.documentState !== $asm09.System.Xml.XmlBaseWriter.DocumentState.Document) || 
			(count <= 1) || this.depth)) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$2("XmlOnlyOneRoot")]));
	}
	if (this.writeState === System.Xml.WriteState.Attribute) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("XmlInvalidWriteState", ["WriteStartElement", this.WriteState.toString()])]));
	}
	this.AutoComplete(System.Xml.WriteState.Content);
};
$asm09.System.Xml.XmlBaseWriter.prototype.EndArray = function () {
};
$asm09.System.Xml.XmlBaseWriter.prototype.GeneratePrefix = function (ns, xNs) {
	if (!((this.writeState === System.Xml.WriteState.Element) || (this.writeState === System.Xml.WriteState.Attribute))) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("XmlInvalidPrefixState", [this.WriteState.toString()])]));
	}
	var text = this.nsMgr.AddNamespace$0(ns, xNs);
	if (text !== null) {
		return text;
	}
__loop0__: 
	do {
		var num = this.elements[this.depth].PrefixId++;
		text = (("d" + (this.depth).toString() + "p" + (num).toString()));
	} while (this.nsMgr.LookupNamespace(text) !== null);
	this.nsMgr.AddNamespace$1(text, ns, xNs);
	return text;
};
$asm09.System.Xml.XmlBaseWriter.prototype.WriteAttributeText = function (value) {
	if (this.attributeValue.length === 0) {
		this.attributeValue = value;
		return;
	}
	this.attributeValue = ((this.attributeValue + value));
};
JSIL.OverloadedMethod($asm09.System.Xml.XmlBaseWriter.prototype, "WriteXmlnsAttribute", [
		["WriteXmlnsAttribute$0", [System.String, System.String]], 
		["WriteXmlnsAttribute$1", [System.String, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlBaseWriter.prototype, "WriteStartAttribute", [
		["WriteStartAttribute$0", [System.String, System.String, System.String]], 
		["WriteStartAttribute$1", [System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlBaseWriter.prototype, "WriteStartElement", [
		["WriteStartElement$0", [System.String, System.String, System.String]], 
		["WriteStartElement$1", [System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlBaseWriter.prototype, "StartContent", [
		["StartContent$0", []], 
		["StartContent$1", [System.Char]], 
		["StartContent$2", [System.String]], 
		["StartContent$3", [System.Array.Of(System.Char), System.Int32, System.Int32]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlBaseWriter.prototype, "VerifyWhitespace", [
		["VerifyWhitespace$0", [System.Char]], 
		["VerifyWhitespace$1", [System.String]], 
		["VerifyWhitespace$2", [System.Array.Of(System.Char), System.Int32, System.Int32]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlBaseWriter.prototype, "WriteQualifiedName", [
		["WriteQualifiedName$0", [System.String, System.String]], 
		["WriteQualifiedName$1", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlBaseWriter.prototype, "WriteStartDocument", [
		["WriteStartDocument$0", []], 
		["WriteStartDocument$1", [System.Boolean]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlBaseWriter.prototype, "WriteString", [
		["WriteString$0", [System.String]], 
		["WriteString$1", [System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlBaseWriter.prototype, "WriteRaw", [
		["WriteRaw$0", [System.String]], 
		["WriteRaw$1", [System.Array.Of(System.Char), System.Int32, System.Int32]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlBaseWriter.prototype, "WriteValue", [
		["WriteValue$0", [System.Object]], 
		["WriteValue$1", [System.String]], 
		["WriteValue$2", [System.Int32]], 
		["WriteValue$3", [System.Int64]], 
		["WriteValue$4", [System.UInt64]], 
		["WriteValue$5", [System.Boolean]], 
		["WriteValue$6", [System.Decimal]], 
		["WriteValue$7", [System.Single]], 
		["WriteValue$8", [System.Double]], 
		["WriteValue$9", [System.Xml.XmlDictionaryString]], 
		["WriteValue$10", [System.DateTime]], 
		["WriteValue$11", [System.Xml.UniqueId]], 
		["WriteValue$12", [System.Guid]], 
		["WriteValue$13", [System.TimeSpan]], 
		["WriteValue$14", [System.Array.Of(System.Object)]], 
		["WriteValue$15", [System.Array]]
	]);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseWriter.prototype, "IsClosed", 
	$asm09.System.Xml.XmlBaseWriter.prototype.get_IsClosed, null);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseWriter.prototype, "XmlLang", 
	$asm09.System.Xml.XmlBaseWriter.prototype.get_XmlLang, null);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseWriter.prototype, "XmlSpace", 
	$asm09.System.Xml.XmlBaseWriter.prototype.get_XmlSpace, null);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseWriter.prototype, "WriteState", 
	$asm09.System.Xml.XmlBaseWriter.prototype.get_WriteState, null);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseWriter.prototype, "NamespaceBoundary", 
	$asm09.System.Xml.XmlBaseWriter.prototype.get_NamespaceBoundary, $asm09.System.Xml.XmlBaseWriter.prototype.set_NamespaceBoundary);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseWriter.prototype, "CanCanonicalize", 
	$asm09.System.Xml.XmlBaseWriter.prototype.get_CanCanonicalize, null);
Object.defineProperty($asm09.System.Xml.XmlBaseWriter, "xmlnsNamespace", {
		"value": "http://www.w3.org/2000/xmlns/"}
);
Object.defineProperty($asm09.System.Xml.XmlBaseWriter, "xmlNamespace", {
		"value": "http://www.w3.org/XML/1998/namespace"}
);
$asm09.System.Xml.XmlBaseWriter.prototype.writer = null;
$asm09.System.Xml.XmlBaseWriter.prototype.nsMgr = null;
$asm09.System.Xml.XmlBaseWriter.prototype.elements = null;
$asm09.System.Xml.XmlBaseWriter.prototype.depth = 0;
$asm09.System.Xml.XmlBaseWriter.prototype.attributeLocalName = null;
$asm09.System.Xml.XmlBaseWriter.prototype.attributeValue = null;
$asm09.System.Xml.XmlBaseWriter.prototype.isXmlAttribute = false;
$asm09.System.Xml.XmlBaseWriter.prototype.isXmlnsAttribute = false;
$asm09.System.Xml.XmlBaseWriter.prototype.writeState = 0;
$asm09.System.Xml.XmlBaseWriter.prototype.documentState = 0;
$asm09.System.Xml.XmlBaseWriter.prototype.trailBytes = null;
$asm09.System.Xml.XmlBaseWriter.prototype.trailByteCount = 0;
$asm09.System.Xml.XmlBaseWriter.prototype.nodeWriter = null;
$asm09.System.Xml.XmlBaseWriter.prototype.inList = false;
$asm09.System.Xml.XmlBaseWriter.prefixes = null;
$asm09.System.Xml.XmlBaseWriter._cctor = function () {
	$asm09.System.Xml.XmlBaseWriter.prefixes = JSIL.Array.New(System.String, ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"]);
};

$asm09.System.Xml.XmlBaseWriter.Element.prototype.get_Prefix = function () {
	return this.prefix;
};
$asm09.System.Xml.XmlBaseWriter.Element.prototype.set_Prefix = function (value) {
	this.prefix = value;
};
$asm09.System.Xml.XmlBaseWriter.Element.prototype.get_LocalName = function () {
	return this.localName;
};
$asm09.System.Xml.XmlBaseWriter.Element.prototype.set_LocalName = function (value) {
	this.localName = value;
};
$asm09.System.Xml.XmlBaseWriter.Element.prototype.get_PrefixId = function () {
	return this.prefixId;
};
$asm09.System.Xml.XmlBaseWriter.Element.prototype.set_PrefixId = function (value) {
	this.prefixId = value;
};
$asm09.System.Xml.XmlBaseWriter.Element.prototype.Clear = function () {
	this.prefix = null;
	this.localName = null;
	this.prefixId = 0;
};
$asm09.System.Xml.XmlBaseWriter.Element.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
JSIL.MakeProperty($asm09.System.Xml.XmlBaseWriter.Element.prototype, "Prefix", 
	$asm09.System.Xml.XmlBaseWriter.Element.prototype.get_Prefix, $asm09.System.Xml.XmlBaseWriter.Element.prototype.set_Prefix);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseWriter.Element.prototype, "LocalName", 
	$asm09.System.Xml.XmlBaseWriter.Element.prototype.get_LocalName, $asm09.System.Xml.XmlBaseWriter.Element.prototype.set_LocalName);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseWriter.Element.prototype, "PrefixId", 
	$asm09.System.Xml.XmlBaseWriter.Element.prototype.get_PrefixId, $asm09.System.Xml.XmlBaseWriter.Element.prototype.set_PrefixId);
$asm09.System.Xml.XmlBaseWriter.Element.prototype.prefix = null;
$asm09.System.Xml.XmlBaseWriter.Element.prototype.localName = null;
$asm09.System.Xml.XmlBaseWriter.Element.prototype.prefixId = 0;

$asm09.System.Xml.XmlBaseWriter.NamespaceManager.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
	this.defaultNamespace = new $asm09.System.Xml.XmlBaseWriter.NamespaceManager.Namespace();
	this.defaultNamespace.Depth = 0;
	this.defaultNamespace.Prefix = System.String.Empty;
	this.defaultNamespace.Uri = System.String.Empty;
	this.defaultNamespace.UriDictionaryString = null;
};
$asm09.System.Xml.XmlBaseWriter.NamespaceManager.prototype.get_XmlLang = function () {
	return this.lang;
};
$asm09.System.Xml.XmlBaseWriter.NamespaceManager.prototype.get_XmlSpace = function () {
	return this.space;
};
$asm09.System.Xml.XmlBaseWriter.NamespaceManager.prototype.Clear = function () {
	if (this.namespaces === null) {
		this.namespaces = JSIL.Array.New($asm09.System.Xml.XmlBaseWriter.NamespaceManager.Namespace, 4);
		this.namespaces[0] = this.defaultNamespace;
	}
	this.nsCount = 1;
	this.nsTop = 0;
	this.depth = 0;
	this.attributeCount = 0;
	this.space = System.Xml.XmlSpace.None;
	this.lang = null;
	this.lastNameSpace = null;
	this.namespaceBoundary = 0;
};
$asm09.System.Xml.XmlBaseWriter.NamespaceManager.prototype.get_NamespaceBoundary = function () {
	return this.namespaceBoundary;
};
$asm09.System.Xml.XmlBaseWriter.NamespaceManager.prototype.set_NamespaceBoundary = function (value) {
__loop0__: 
	for (var num = 0; !((num >= this.nsCount) || (this.namespaces[num].Depth >= value)); ++num) {
	}
	this.nsTop = num;
	this.namespaceBoundary = value;
	this.lastNameSpace = null;
};
$asm09.System.Xml.XmlBaseWriter.NamespaceManager.prototype.Close = function () {
	if (this.depth === 0) {
		if (!((this.namespaces === null) || (this.namespaces.length <= 32))) {
			this.namespaces = null;
		}
		if (!((this.attributes === null) || (this.attributes.length <= 4))) {
			this.attributes = null;
		}
	} else {
		this.namespaces = null;
		this.attributes = null;
	}
	this.lang = null;
};
$asm09.System.Xml.XmlBaseWriter.NamespaceManager.prototype.DeclareNamespaces = function (writer) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
			__loop0__: 
				for (var i = this.nsCount; i > 0; ) {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								var namespace = this.namespaces[(i - 1)];
								if (namespace.Depth !== this.depth) {
									var __label2__ = "__entry2__";
								__step2__: 
									while (true) {
										switch (__label2__) {
											case "__entry2__":
												__label2__ = "IL_67";
												continue __step2__;
												break;
											case "IL_67":
											__loop1__: 
												for (; i < this.nsCount; ++i) {
													var namespace2 = this.namespaces[i];
													if (namespace2.UriDictionaryString !== null) {
														writer.WriteXmlnsAttribute$2(namespace2.Prefix, namespace2.UriDictionaryString);
													} else {
														writer.WriteXmlnsAttribute$0(namespace2.Prefix, namespace2.Uri);
													}
												}
												return;
												break __step2__;
										}
									}
								}
								--i;
								break __step1__;
						}
					}
				}
				JSIL.UntranslatableInstruction("goto", "IL_67");
				break __step0__;
		}
	}
};
$asm09.System.Xml.XmlBaseWriter.NamespaceManager.prototype.EnterScope = function () {
	++this.depth;
};
$asm09.System.Xml.XmlBaseWriter.NamespaceManager.prototype.ExitScope = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
			__loop0__: 
				while (this.nsCount > 0) {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								var namespace = this.namespaces[(this.nsCount - 1)];
								if (namespace.Depth !== this.depth) {
									var __label2__ = "__entry2__";
								__step2__: 
									while (true) {
										switch (__label2__) {
											case "__entry2__":
												__label2__ = "IL_99";
												continue __step2__;
												break;
											case "IL_99":
											__loop1__: 
												while (this.attributeCount > 0) {
													var xmlAttribute = this.attributes[(this.attributeCount - 1)];
													if (xmlAttribute.Depth !== this.depth) {
														break __loop1__;
													}
													this.space = xmlAttribute.XmlSpace;
													this.lang = xmlAttribute.XmlLang;
													xmlAttribute.Clear();
													--this.attributeCount;
												}
												--this.depth;
												return;
												break __step2__;
										}
									}
								}
								if (this.lastNameSpace === namespace) {
									this.lastNameSpace = null;
								}
								namespace.Clear();
								--this.nsCount;
								break __step1__;
						}
					}
				}
				JSIL.UntranslatableInstruction("goto", "IL_99");
				break __step0__;
		}
	}
};
$asm09.System.Xml.XmlBaseWriter.NamespaceManager.prototype.AddLangAttribute = function (lang) {
	this.AddAttribute();
	this.lang = lang;
};
$asm09.System.Xml.XmlBaseWriter.NamespaceManager.prototype.AddSpaceAttribute = function (space) {
	this.AddAttribute();
	this.space = space;
};
$asm09.System.Xml.XmlBaseWriter.NamespaceManager.prototype.AddAttribute = function () {
	if (this.attributes === null) {
		this.attributes = JSIL.Array.New($asm09.System.Xml.XmlBaseWriter.NamespaceManager.XmlAttribute, 1);
	} else if (this.attributes.length === this.attributeCount) {
		var destinationArray = JSIL.Array.New($asm09.System.Xml.XmlBaseWriter.NamespaceManager.XmlAttribute, (this.attributeCount * 2));
		System.Array.Copy$0(this.attributes, destinationArray, this.attributeCount);
		this.attributes = destinationArray;
	}
	var xmlAttribute = this.attributes[this.attributeCount];
	if (xmlAttribute === null) {
		xmlAttribute = new $asm09.System.Xml.XmlBaseWriter.NamespaceManager.XmlAttribute();
		this.attributes[this.attributeCount] = xmlAttribute;
	}
	xmlAttribute.XmlLang = this.lang;
	xmlAttribute.XmlSpace = this.space;
	xmlAttribute.Depth = this.depth;
	++this.attributeCount;
};
$asm09.System.Xml.XmlBaseWriter.NamespaceManager.prototype.AddNamespace$0 = function (uri, uriDictionaryString) {
	if (uri.length === 0) {
		this.AddNamespaceIfNotDeclared(System.String.Empty, uri, uriDictionaryString);
		return System.String.Empty;
	}
__loop0__: 
	for (var i = 0; i < $asm09.System.Xml.XmlBaseWriter.prefixes.length; ++i) {
		var text = $asm09.System.Xml.XmlBaseWriter.prefixes[i];
		var flag = false;
	__loop1__: 
		for (var j = (this.nsCount - 1); j >= this.nsTop; --j) {
			var namespace = this.namespaces[j];
			if (namespace.Prefix == text) {
				flag = true;
				break __loop1__;
			}
		}
		if (!flag) {
			this.AddNamespace$1(text, uri, uriDictionaryString);
			return text;
		}
	}
	return null;
};
$asm09.System.Xml.XmlBaseWriter.NamespaceManager.prototype.AddNamespaceIfNotDeclared = function (prefix, uri, uriDictionaryString) {
	if (this.LookupNamespace(prefix) != uri) {
		this.AddNamespace$1(prefix, uri, uriDictionaryString);
	}
};
$asm09.System.Xml.XmlBaseWriter.NamespaceManager.prototype.AddNamespace$1 = function (prefix, uri, uriDictionaryString) {
	if (!((prefix.length < 3) || 
			(((prefix[0]) & "\uffdf") !== "X") || 
			(((prefix[1]) & "\uffdf") !== "M") || (((prefix[2]) & "\uffdf") !== "L"))) {
		if (!(!(prefix == "xml") || !(uri == "http://www.w3.org/XML/1998/namespace"))) {
			return;
		}
		if (!(!(prefix == "xmlns") || !(uri == "http://www.w3.org/2000/xmlns/"))) {
			return;
		}
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentException, "_ctor$4", [$asm09.System.Runtime.Serialization.SR.GetString$2("XmlReservedPrefix"), "prefix"]));
	} else {
	__loop0__: 
		for (var i = (this.nsCount - 1); i >= 0; ) {
			var namespace = this.namespaces[i];
			if (namespace.Depth !== this.depth) {
				break __loop0__;
			}
			if (namespace.Prefix == prefix) {
				if (namespace.Uri == uri) {
					return;
				}
				throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentException, "_ctor$4", [$asm09.System.Runtime.Serialization.SR.GetString$0("XmlPrefixBoundToNamespace", [prefix, namespace.Uri, uri]), "prefix"]));
			} else {
				--i;
			}
		}
		if (!((prefix.length === 0) || (uri.length !== 0))) {
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentException, "_ctor$4", [$asm09.System.Runtime.Serialization.SR.GetString$2("XmlEmptyNamespaceRequiresNullPrefix"), "prefix"]));
		}
		if (!((uri.length !== "http://www.w3.org/2000/xmlns/".length) || !(uri == "http://www.w3.org/2000/xmlns/"))) {
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("XmlSpecificBindingNamespace", ["xmlns", uri])]));
		}
		if (!((uri.length !== "http://www.w3.org/XML/1998/namespace".length) || 
				((uri[18]) !== "X") || !(uri == "http://www.w3.org/XML/1998/namespace"))) {
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("XmlSpecificBindingNamespace", ["xml", uri])]));
		}
		if (this.namespaces.length === this.nsCount) {
			var destinationArray = JSIL.Array.New($asm09.System.Xml.XmlBaseWriter.NamespaceManager.Namespace, (this.nsCount * 2));
			System.Array.Copy$0(this.namespaces, destinationArray, this.nsCount);
			this.namespaces = destinationArray;
		}
		namespace = this.namespaces[this.nsCount];
		if (namespace === null) {
			namespace = new $asm09.System.Xml.XmlBaseWriter.NamespaceManager.Namespace();
			this.namespaces[this.nsCount] = namespace;
		}
		namespace.Depth = this.depth;
		namespace.Prefix = prefix;
		namespace.Uri = uri;
		namespace.UriDictionaryString = uriDictionaryString;
		++this.nsCount;
		this.lastNameSpace = null;
		return;
	}
};
$asm09.System.Xml.XmlBaseWriter.NamespaceManager.prototype.LookupPrefix = function (ns) {
	if (!((this.lastNameSpace === null) || !(this.lastNameSpace.Uri == ns))) {
		return this.lastNameSpace.Prefix;
	}
	var num = this.nsCount;
__loop0__: 
	for (var i = (num - 1); i >= this.nsTop; --i) {
		var namespace = this.namespaces[i];
		if (System.Object.ReferenceEquals(namespace.Uri, ns)) {
			var prefix = namespace.Prefix;
			var flag = false;
		__loop1__: 
			for (var j = (i + 1); j < num; ++j) {
				if (this.namespaces[j].Prefix == prefix) {
					flag = true;
					break __loop1__;
				}
			}
			if (!flag) {
				this.lastNameSpace = namespace;
				return prefix;
			}
		}
	}
__loop2__: 
	for (var k = (num - 1); k >= this.nsTop; --k) {
		var namespace2 = this.namespaces[k];
		if (namespace2.Uri == ns) {
			var prefix2 = namespace2.Prefix;
			var flag2 = false;
		__loop3__: 
			for (var l = (k + 1); l < num; ++l) {
				if (this.namespaces[l].Prefix == prefix2) {
					flag2 = true;
					break __loop3__;
				}
			}
			if (!flag2) {
				this.lastNameSpace = namespace2;
				return prefix2;
			}
		}
	}
	if (ns.length === 0) {
		var flag3 = true;
	__loop4__: 
		for (var m = (num - 1); m >= this.nsTop; --m) {
			if (this.namespaces[m].Prefix.length === 0) {
				flag3 = false;
				break __loop4__;
			}
		}
		if (flag3) {
			return System.String.Empty;
		}
	}
	if (ns == "http://www.w3.org/2000/xmlns/") {
		return "xmlns";
	}
	if (ns == "http://www.w3.org/XML/1998/namespace") {
		return "xml";
	}
	return null;
};
$asm09.System.Xml.XmlBaseWriter.NamespaceManager.prototype.LookupAttributePrefix = function (ns) {
	if (!((this.lastNameSpace === null) || 
			!(this.lastNameSpace.Uri == ns) || (this.lastNameSpace.Prefix.length === 0))) {
		return this.lastNameSpace.Prefix;
	}
	var num = this.nsCount;
__loop0__: 
	for (var i = (num - 1); i >= this.nsTop; --i) {
		var namespace = this.namespaces[i];
		if (System.Object.ReferenceEquals(namespace.Uri, ns)) {
			var prefix = namespace.Prefix;
			if (prefix.length !== 0) {
				var flag = false;
			__loop1__: 
				for (var j = (i + 1); j < num; ++j) {
					if (this.namespaces[j].Prefix == prefix) {
						flag = true;
						break __loop1__;
					}
				}
				if (!flag) {
					this.lastNameSpace = namespace;
					return prefix;
				}
			}
		}
	}
__loop2__: 
	for (var k = (num - 1); k >= this.nsTop; --k) {
		var namespace2 = this.namespaces[k];
		if (namespace2.Uri == ns) {
			var prefix2 = namespace2.Prefix;
			if (prefix2.length !== 0) {
				var flag2 = false;
			__loop3__: 
				for (var l = (k + 1); l < num; ++l) {
					if (this.namespaces[l].Prefix == prefix2) {
						flag2 = true;
						break __loop3__;
					}
				}
				if (!flag2) {
					this.lastNameSpace = namespace2;
					return prefix2;
				}
			}
		}
	}
	if (ns.length === 0) {
		return System.String.Empty;
	}
	return null;
};
$asm09.System.Xml.XmlBaseWriter.NamespaceManager.prototype.LookupNamespace = function (prefix) {
	var num = this.nsCount;
	if (prefix.length === 0) {
	__loop0__: 
		for (var i = (num - 1); i >= this.nsTop; --i) {
			var namespace = this.namespaces[i];
			if (namespace.Prefix.length === 0) {
				return namespace.Uri;
			}
		}
		return System.String.Empty;
	}
	if (prefix.length === 1) {
		var c = (prefix[0]);
	__loop1__: 
		for (var j = (num - 1); j >= this.nsTop; --j) {
			var namespace2 = this.namespaces[j];
			if (namespace2.PrefixChar === c) {
				return namespace2.Uri;
			}
		}
		return null;
	}
__loop2__: 
	for (var k = (num - 1); k >= this.nsTop; --k) {
		var namespace3 = this.namespaces[k];
		if (namespace3.Prefix == prefix) {
			return namespace3.Uri;
		}
	}
	if (prefix == "xmlns") {
		return "http://www.w3.org/2000/xmlns/";
	}
	if (prefix == "xml") {
		return "http://www.w3.org/XML/1998/namespace";
	}
	return null;
};
JSIL.OverloadedMethod($asm09.System.Xml.XmlBaseWriter.NamespaceManager.prototype, "AddNamespace", [
		["AddNamespace$0", [System.String, System.Xml.XmlDictionaryString]], 
		["AddNamespace$1", [System.String, System.String, System.Xml.XmlDictionaryString]]
	]);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseWriter.NamespaceManager.prototype, "XmlLang", 
	$asm09.System.Xml.XmlBaseWriter.NamespaceManager.prototype.get_XmlLang, null);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseWriter.NamespaceManager.prototype, "XmlSpace", 
	$asm09.System.Xml.XmlBaseWriter.NamespaceManager.prototype.get_XmlSpace, null);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseWriter.NamespaceManager.prototype, "NamespaceBoundary", 
	$asm09.System.Xml.XmlBaseWriter.NamespaceManager.prototype.get_NamespaceBoundary, $asm09.System.Xml.XmlBaseWriter.NamespaceManager.prototype.set_NamespaceBoundary);
$asm09.System.Xml.XmlBaseWriter.NamespaceManager.prototype.namespaces = null;
$asm09.System.Xml.XmlBaseWriter.NamespaceManager.prototype.lastNameSpace = null;
$asm09.System.Xml.XmlBaseWriter.NamespaceManager.prototype.nsCount = 0;
$asm09.System.Xml.XmlBaseWriter.NamespaceManager.prototype.depth = 0;
$asm09.System.Xml.XmlBaseWriter.NamespaceManager.prototype.attributes = null;
$asm09.System.Xml.XmlBaseWriter.NamespaceManager.prototype.attributeCount = 0;
$asm09.System.Xml.XmlBaseWriter.NamespaceManager.prototype.space = 0;
$asm09.System.Xml.XmlBaseWriter.NamespaceManager.prototype.lang = null;
$asm09.System.Xml.XmlBaseWriter.NamespaceManager.prototype.namespaceBoundary = 0;
$asm09.System.Xml.XmlBaseWriter.NamespaceManager.prototype.nsTop = 0;
$asm09.System.Xml.XmlBaseWriter.NamespaceManager.prototype.defaultNamespace = null;

$asm09.System.Xml.XmlBaseWriter.NamespaceManager.XmlAttribute.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm09.System.Xml.XmlBaseWriter.NamespaceManager.XmlAttribute.prototype.get_Depth = function () {
	return this.depth;
};
$asm09.System.Xml.XmlBaseWriter.NamespaceManager.XmlAttribute.prototype.set_Depth = function (value) {
	this.depth = value;
};
$asm09.System.Xml.XmlBaseWriter.NamespaceManager.XmlAttribute.prototype.get_XmlLang = function () {
	return this.lang;
};
$asm09.System.Xml.XmlBaseWriter.NamespaceManager.XmlAttribute.prototype.set_XmlLang = function (value) {
	this.lang = value;
};
$asm09.System.Xml.XmlBaseWriter.NamespaceManager.XmlAttribute.prototype.get_XmlSpace = function () {
	return this.space;
};
$asm09.System.Xml.XmlBaseWriter.NamespaceManager.XmlAttribute.prototype.set_XmlSpace = function (value) {
	this.space = value;
};
$asm09.System.Xml.XmlBaseWriter.NamespaceManager.XmlAttribute.prototype.Clear = function () {
	this.lang = null;
};
JSIL.MakeProperty($asm09.System.Xml.XmlBaseWriter.NamespaceManager.XmlAttribute.prototype, "Depth", 
	$asm09.System.Xml.XmlBaseWriter.NamespaceManager.XmlAttribute.prototype.get_Depth, $asm09.System.Xml.XmlBaseWriter.NamespaceManager.XmlAttribute.prototype.set_Depth);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseWriter.NamespaceManager.XmlAttribute.prototype, "XmlLang", 
	$asm09.System.Xml.XmlBaseWriter.NamespaceManager.XmlAttribute.prototype.get_XmlLang, $asm09.System.Xml.XmlBaseWriter.NamespaceManager.XmlAttribute.prototype.set_XmlLang);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseWriter.NamespaceManager.XmlAttribute.prototype, "XmlSpace", 
	$asm09.System.Xml.XmlBaseWriter.NamespaceManager.XmlAttribute.prototype.get_XmlSpace, $asm09.System.Xml.XmlBaseWriter.NamespaceManager.XmlAttribute.prototype.set_XmlSpace);
$asm09.System.Xml.XmlBaseWriter.NamespaceManager.XmlAttribute.prototype.space = 0;
$asm09.System.Xml.XmlBaseWriter.NamespaceManager.XmlAttribute.prototype.lang = null;
$asm09.System.Xml.XmlBaseWriter.NamespaceManager.XmlAttribute.prototype.depth = 0;

$asm09.System.Xml.XmlBaseWriter.NamespaceManager.Namespace.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm09.System.Xml.XmlBaseWriter.NamespaceManager.Namespace.prototype.Clear = function () {
	this.prefix = null;
	this.prefixChar = "\0";
	this.ns = null;
	this.xNs = null;
	this.depth = 0;
};
$asm09.System.Xml.XmlBaseWriter.NamespaceManager.Namespace.prototype.get_Depth = function () {
	return this.depth;
};
$asm09.System.Xml.XmlBaseWriter.NamespaceManager.Namespace.prototype.set_Depth = function (value) {
	this.depth = value;
};
$asm09.System.Xml.XmlBaseWriter.NamespaceManager.Namespace.prototype.get_PrefixChar = function () {
	return this.prefixChar;
};
$asm09.System.Xml.XmlBaseWriter.NamespaceManager.Namespace.prototype.get_Prefix = function () {
	return this.prefix;
};
$asm09.System.Xml.XmlBaseWriter.NamespaceManager.Namespace.prototype.set_Prefix = function (value) {
	if (value.length === 1) {
		this.prefixChar = (value[0]);
	} else {
		this.prefixChar = "\0";
	}
	this.prefix = value;
};
$asm09.System.Xml.XmlBaseWriter.NamespaceManager.Namespace.prototype.get_Uri = function () {
	return this.ns;
};
$asm09.System.Xml.XmlBaseWriter.NamespaceManager.Namespace.prototype.set_Uri = function (value) {
	this.ns = value;
};
$asm09.System.Xml.XmlBaseWriter.NamespaceManager.Namespace.prototype.get_UriDictionaryString = function () {
	return this.xNs;
};
$asm09.System.Xml.XmlBaseWriter.NamespaceManager.Namespace.prototype.set_UriDictionaryString = function (value) {
	this.xNs = value;
};
JSIL.MakeProperty($asm09.System.Xml.XmlBaseWriter.NamespaceManager.Namespace.prototype, "Depth", 
	$asm09.System.Xml.XmlBaseWriter.NamespaceManager.Namespace.prototype.get_Depth, $asm09.System.Xml.XmlBaseWriter.NamespaceManager.Namespace.prototype.set_Depth);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseWriter.NamespaceManager.Namespace.prototype, "PrefixChar", 
	$asm09.System.Xml.XmlBaseWriter.NamespaceManager.Namespace.prototype.get_PrefixChar, null);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseWriter.NamespaceManager.Namespace.prototype, "Prefix", 
	$asm09.System.Xml.XmlBaseWriter.NamespaceManager.Namespace.prototype.get_Prefix, $asm09.System.Xml.XmlBaseWriter.NamespaceManager.Namespace.prototype.set_Prefix);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseWriter.NamespaceManager.Namespace.prototype, "Uri", 
	$asm09.System.Xml.XmlBaseWriter.NamespaceManager.Namespace.prototype.get_Uri, $asm09.System.Xml.XmlBaseWriter.NamespaceManager.Namespace.prototype.set_Uri);
JSIL.MakeProperty($asm09.System.Xml.XmlBaseWriter.NamespaceManager.Namespace.prototype, "UriDictionaryString", 
	$asm09.System.Xml.XmlBaseWriter.NamespaceManager.Namespace.prototype.get_UriDictionaryString, $asm09.System.Xml.XmlBaseWriter.NamespaceManager.Namespace.prototype.set_UriDictionaryString);
$asm09.System.Xml.XmlBaseWriter.NamespaceManager.Namespace.prototype.prefix = null;
$asm09.System.Xml.XmlBaseWriter.NamespaceManager.Namespace.prototype.ns = null;
$asm09.System.Xml.XmlBaseWriter.NamespaceManager.Namespace.prototype.xNs = null;
$asm09.System.Xml.XmlBaseWriter.NamespaceManager.Namespace.prototype.depth = 0;
$asm09.System.Xml.XmlBaseWriter.NamespaceManager.Namespace.prototype.prefixChar = 0;

$asm09.System.Xml.XmlBinaryReader.prototype._ctor = function () {
	$asm09.System.Xml.XmlBaseReader.prototype._ctor.call(this);
};
$asm09.System.Xml.XmlBinaryReader.prototype.SetInput$0 = function (buffer, offset, count, dictionary, quotas, session) {
	if (buffer === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull("buffer");
	}
	if (offset < 0) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["offset", $asm09.System.Runtime.Serialization.SR.GetString$2("ValueMustBeNonNegative")]));
	}
	if (offset > buffer.length) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["offset", $asm09.System.Runtime.Serialization.SR.GetString$0("OffsetExceedsBufferSize", [buffer.length])]));
	}
	if (count < 0) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["count", $asm09.System.Runtime.Serialization.SR.GetString$2("ValueMustBeNonNegative")]));
	}
	if (count > (buffer.length - offset)) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["count", $asm09.System.Runtime.Serialization.SR.GetString$0("SizeExceedsRemainingBufferSpace", [(buffer.length - offset)])]));
	}
	this.MoveToInitial(quotas, session, null);
	$asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).SetBuffer$1(
		buffer, 
		offset, 
		count, 
		dictionary, 
		session
	);
	this.buffered = true;
};
$asm09.System.Xml.XmlBinaryReader.prototype.SetInput$1 = function (stream, dictionary, quotas, session) {
	if (stream === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull("stream");
	}
	this.MoveToInitial(quotas, session, null);
	$asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).SetBuffer$0(stream, dictionary, session);
	this.buffered = false;
};
$asm09.System.Xml.XmlBinaryReader.prototype.MoveToInitial = function (quotas, session, onClose) {
	$asm09.System.Xml.XmlBaseReader.prototype.MoveToInitial.call(this, quotas);
	this.maxBytesPerRead = quotas.MaxBytesPerRead;
	this.arrayState = $asm09.System.Xml.XmlBinaryReader.ArrayState.None;
	this.isTextWithEndElement = false;
};
$asm09.System.Xml.XmlBinaryReader.prototype.Close = function () {
	$asm09.System.Xml.XmlBaseReader.prototype.Close.call(this);
};
$asm09.System.Xml.XmlBinaryReader.prototype.ReadElementContentAsString = function () {
	if ($asm09.System.Xml.XmlBaseReader.prototype.get_Node.call(this).NodeType !== System.Xml.XmlNodeType.Element) {
		this.MoveToStartElement$0();
	}
	if (!this.CanOptimizeReadElementContent()) {
		return $asm09.System.Xml.XmlBaseReader.prototype.ReadElementContentAsString.call(this);
	}
	var nodeType = this.GetNodeType();
	if (nodeType !== $asm09.System.Xml.XmlBinaryNodeType.Chars8TextWithEndElement) {
		if (nodeType !== $asm09.System.Xml.XmlBinaryNodeType.DictionaryTextWithEndElement) {
			var result = $asm09.System.Xml.XmlBaseReader.prototype.ReadElementContentAsString.call(this);
		} else {
			this.SkipNodeType();
			result = $asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).GetDictionaryString(this.ReadDictionaryKey()).Value;
			this.ReadTextWithEndElement();
		}
	} else {
		this.SkipNodeType();
		result = $asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).ReadUTF8String(this.ReadUInt8());
		this.ReadTextWithEndElement();
	}
	return result;
};
$asm09.System.Xml.XmlBinaryReader.prototype.ReadElementContentAsBoolean = function () {
	if ($asm09.System.Xml.XmlBaseReader.prototype.get_Node.call(this).NodeType !== System.Xml.XmlNodeType.Element) {
		this.MoveToStartElement$0();
	}
	if (!this.CanOptimizeReadElementContent()) {
		return System.Xml.XmlDictionaryReader.prototype.ReadElementContentAsBoolean.call(this);
	}
	var nodeType = this.GetNodeType();
	switch (Number(nodeType)) {
		case 133: 
			this.SkipNodeType();
			var result = false;
			this.ReadTextWithEndElement();
			return result;
		case 134: 
			break;
		case 135: 
			this.SkipNodeType();
			result = true;
			this.ReadTextWithEndElement();
			return result;
		default: 
			if (nodeType === $asm09.System.Xml.XmlBinaryNodeType.BoolTextWithEndElement) {
				this.SkipNodeType();
				result = ($asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).ReadUInt8() !== 0);
				this.ReadTextWithEndElement();
				return result;
			}
			break;
	}
	result = System.Xml.XmlDictionaryReader.prototype.ReadElementContentAsBoolean.call(this);
	return result;
};
$asm09.System.Xml.XmlBinaryReader.prototype.ReadElementContentAsInt = function () {
	if ($asm09.System.Xml.XmlBaseReader.prototype.get_Node.call(this).NodeType !== System.Xml.XmlNodeType.Element) {
		this.MoveToStartElement$0();
	}
	if (!this.CanOptimizeReadElementContent()) {
		return System.Xml.XmlDictionaryReader.prototype.ReadElementContentAsInt.call(this);
	}
	var nodeType = this.GetNodeType();
	switch (Number(nodeType)) {
		case 129: 
			this.SkipNodeType();
			var result = 0;
			this.ReadTextWithEndElement();
			return result;
		case 130: 
			break;
		case 131: 
			this.SkipNodeType();
			result = 1;
			this.ReadTextWithEndElement();
			return result;
		default: 
			switch (Number(nodeType)) {
				case 137: 
					this.SkipNodeType();
					result = $asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).ReadInt8();
					this.ReadTextWithEndElement();
					return result;
				case 139: 
					this.SkipNodeType();
					result = $asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).ReadInt16();
					this.ReadTextWithEndElement();
					return result;
				case 141: 
					this.SkipNodeType();
					result = $asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).ReadInt32();
					this.ReadTextWithEndElement();
					return result;
			}
			break;
	}
	result = System.Xml.XmlDictionaryReader.prototype.ReadElementContentAsInt.call(this);
	return result;
};
$asm09.System.Xml.XmlBinaryReader.prototype.CanOptimizeReadElementContent = function () {
	return (this.arrayState === $asm09.System.Xml.XmlBinaryReader.ArrayState.None);
};
$asm09.System.Xml.XmlBinaryReader.prototype.ReadElementContentAsFloat = function () {
	if ($asm09.System.Xml.XmlBaseReader.prototype.get_Node.call(this).NodeType !== System.Xml.XmlNodeType.Element) {
		this.MoveToStartElement$0();
	}
	if (!(!this.CanOptimizeReadElementContent() || (this.GetNodeType() !== $asm09.System.Xml.XmlBinaryNodeType.FloatTextWithEndElement))) {
		this.SkipNodeType();
		var result = $asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).ReadSingle();
		this.ReadTextWithEndElement();
		return result;
	}
	return System.Xml.XmlDictionaryReader.prototype.ReadElementContentAsFloat.call(this);
};
$asm09.System.Xml.XmlBinaryReader.prototype.ReadElementContentAsDouble = function () {
	if ($asm09.System.Xml.XmlBaseReader.prototype.get_Node.call(this).NodeType !== System.Xml.XmlNodeType.Element) {
		this.MoveToStartElement$0();
	}
	if (!(!this.CanOptimizeReadElementContent() || (this.GetNodeType() !== $asm09.System.Xml.XmlBinaryNodeType.DoubleTextWithEndElement))) {
		this.SkipNodeType();
		var result = $asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).ReadDouble();
		this.ReadTextWithEndElement();
		return result;
	}
	return System.Xml.XmlDictionaryReader.prototype.ReadElementContentAsDouble.call(this);
};
$asm09.System.Xml.XmlBinaryReader.prototype.ReadElementContentAsDecimal = function () {
	if ($asm09.System.Xml.XmlBaseReader.prototype.get_Node.call(this).NodeType !== System.Xml.XmlNodeType.Element) {
		this.MoveToStartElement$0();
	}
	if (!(!this.CanOptimizeReadElementContent() || (this.GetNodeType() !== $asm09.System.Xml.XmlBinaryNodeType.DecimalTextWithEndElement))) {
		this.SkipNodeType();
		var result = $asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).ReadDecimal().MemberwiseClone();
		this.ReadTextWithEndElement();
		return result;
	}
	return System.Xml.XmlDictionaryReader.prototype.ReadElementContentAsDecimal.call(this);
};
$asm09.System.Xml.XmlBinaryReader.prototype.ReadElementContentAsDateTime = function () {
	if ($asm09.System.Xml.XmlBaseReader.prototype.get_Node.call(this).NodeType !== System.Xml.XmlNodeType.Element) {
		this.MoveToStartElement$0();
	}
	if (!(!this.CanOptimizeReadElementContent() || (this.GetNodeType() !== $asm09.System.Xml.XmlBinaryNodeType.DateTimeTextWithEndElement))) {
		this.SkipNodeType();
		var result = $asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).ReadDateTime().MemberwiseClone();
		this.ReadTextWithEndElement();
		return result;
	}
	return System.Xml.XmlDictionaryReader.prototype.ReadElementContentAsDateTime.call(this);
};
$asm09.System.Xml.XmlBinaryReader.prototype.ReadElementContentAsTimeSpan = function () {
	if ($asm09.System.Xml.XmlBaseReader.prototype.get_Node.call(this).NodeType !== System.Xml.XmlNodeType.Element) {
		this.MoveToStartElement$0();
	}
	if (!(!this.CanOptimizeReadElementContent() || (this.GetNodeType() !== $asm09.System.Xml.XmlBinaryNodeType.TimeSpanTextWithEndElement))) {
		this.SkipNodeType();
		var result = $asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).ReadTimeSpan().MemberwiseClone();
		this.ReadTextWithEndElement();
		return result;
	}
	return System.Xml.XmlDictionaryReader.prototype.ReadElementContentAsTimeSpan.call(this);
};
$asm09.System.Xml.XmlBinaryReader.prototype.ReadElementContentAsGuid = function () {
	if ($asm09.System.Xml.XmlBaseReader.prototype.get_Node.call(this).NodeType !== System.Xml.XmlNodeType.Element) {
		this.MoveToStartElement$0();
	}
	if (!(!this.CanOptimizeReadElementContent() || (this.GetNodeType() !== $asm09.System.Xml.XmlBinaryNodeType.GuidTextWithEndElement))) {
		this.SkipNodeType();
		var result = $asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).ReadGuid().MemberwiseClone();
		this.ReadTextWithEndElement();
		return result;
	}
	return System.Xml.XmlDictionaryReader.prototype.ReadElementContentAsGuid.call(this);
};
$asm09.System.Xml.XmlBinaryReader.prototype.ReadElementContentAsUniqueId = function () {
	if ($asm09.System.Xml.XmlBaseReader.prototype.get_Node.call(this).NodeType !== System.Xml.XmlNodeType.Element) {
		this.MoveToStartElement$0();
	}
	if (!(!this.CanOptimizeReadElementContent() || (this.GetNodeType() !== $asm09.System.Xml.XmlBinaryNodeType.UniqueIdTextWithEndElement))) {
		this.SkipNodeType();
		var result = $asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).ReadUniqueId();
		this.ReadTextWithEndElement();
		return result;
	}
	return System.Xml.XmlDictionaryReader.prototype.ReadElementContentAsUniqueId.call(this);
};
$asm09.System.Xml.XmlBinaryReader.prototype.TryGetBase64ContentLength = function (/* ref */ length) {
	length.value = 0;
	if (!this.buffered) {
		return false;
	}
	if (this.arrayState !== 0) {
		return false;
	}
	if (!$asm09.System.Xml.XmlBaseReader.prototype.get_Node.call(this).Value.TryGetByteArrayLength(/* ref */ num)) {
		return false;
	}
	var offset = $asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).Offset;
	try {
	__loop0__: 
		for (var flag = false; !flag && !$asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).EndOfFile; ) {
			var nodeType = this.GetNodeType();
			this.SkipNodeType();
			var xmlBinaryNodeType = nodeType;
			if (xmlBinaryNodeType !== $asm09.System.Xml.XmlBinaryNodeType.EndElement) {
				switch (Number(xmlBinaryNodeType)) {
					case 158: 
						var num2 = $asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).ReadUInt8();
						break;
					case 159: 
						num2 = $asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).ReadUInt8();
						flag = true;
						break;
					case 160: 
						num2 = $asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).ReadUInt16();
						break;
					case 161: 
						num2 = $asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).ReadUInt16();
						flag = true;
						break;
					case 162: 
						num2 = $asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).ReadUInt31();
						break;
					case 163: 
						num2 = $asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).ReadUInt31();
						flag = true;
						break;
					default: 
						var result = false;
						return result;
				}
			} else {
				num2 = 0;
				flag = true;
			}
			$asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).Advance(num2);
			if (num.value > (2147483647 - num2)) {
				result = false;
				return result;
			}
			var num = new JSIL.Variable((num.value + num2));
		}
		length.value = num.value;
		result = true;
	} finally {
		$asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).Offset = offset;
	}
	return result;
};
$asm09.System.Xml.XmlBinaryReader.prototype.ReadTextWithEndElement = function () {
	$asm09.System.Xml.XmlBaseReader.prototype.ExitScope.call(this);
	this.ReadNode();
};
$asm09.System.Xml.XmlBinaryReader.prototype.MoveToAtomicTextWithEndElement = function () {
	this.isTextWithEndElement = true;
	return $asm09.System.Xml.XmlBaseReader.prototype.MoveToAtomicText.call(this);
};
$asm09.System.Xml.XmlBinaryReader.prototype.Read = function () {
	if ($asm09.System.Xml.XmlBaseReader.prototype.get_Node.call(this).ReadState === System.Xml.ReadState.Closed) {
		return false;
	}
	if (this.isTextWithEndElement) {
		this.isTextWithEndElement = false;
		$asm09.System.Xml.XmlBaseReader.prototype.MoveToEndElement.call(this);
		return true;
	}
	if (this.arrayState === $asm09.System.Xml.XmlBinaryReader.ArrayState.Content) {
		if (this.arrayCount !== 0) {
			this.MoveToArrayElement();
			return true;
		}
		this.arrayState = $asm09.System.Xml.XmlBinaryReader.ArrayState.None;
	}
	if ($asm09.System.Xml.XmlBaseReader.prototype.get_Node.call(this).ExitScope) {
		$asm09.System.Xml.XmlBaseReader.prototype.ExitScope.call(this);
	}
	return this.ReadNode();
};
$asm09.System.Xml.XmlBinaryReader.prototype.ReadNode = function () {
	if ($asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).EndOfFile) {
		$asm09.System.Xml.XmlBaseReader.prototype.MoveToEndOfFile.call(this);
		return false;
	}
	if (!this.buffered) {
		$asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).SetWindow($asm09.System.Xml.XmlBaseReader.prototype.get_ElementNode.call(this).BufferOffset, this.maxBytesPerRead);
	}
	if (this.arrayState === 0) {
		var nodeType = this.GetNodeType();
		this.SkipNodeType();
	} else {
		nodeType = this.arrayNodeType;
		--this.arrayCount;
		this.arrayState = $asm09.System.Xml.XmlBinaryReader.ArrayState.Content;
	}
	switch (Number(nodeType)) {
		case 1: 
			$asm09.System.Xml.XmlBaseReader.prototype.MoveToEndElement.call(this);
			return true;
		case 2: 
			this.ReadName$0($asm09.System.Xml.XmlBaseReader.prototype.MoveToComment.call(this).Value);
			return true;
		case 3: 
			this.ReadArray$0();
			return true;
		case 64: 
			var xmlElementNode = $asm09.System.Xml.XmlBaseReader.prototype.EnterScope.call(this);
			xmlElementNode.Prefix.SetValue$0($asm09.System.Xml.PrefixHandleType.Empty);
			this.ReadName$1(xmlElementNode.LocalName);
			this.ReadAttributes();
			xmlElementNode.Namespace = $asm09.System.Xml.XmlBaseReader.prototype.LookupNamespace$1.call(this, $asm09.System.Xml.PrefixHandleType.Empty);
			xmlElementNode.BufferOffset = $asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).Offset;
			return true;
		case 65: 
			xmlElementNode = $asm09.System.Xml.XmlBaseReader.prototype.EnterScope.call(this);
			this.ReadName$2(xmlElementNode.Prefix);
			this.ReadName$1(xmlElementNode.LocalName);
			this.ReadAttributes();
			xmlElementNode.Namespace = $asm09.System.Xml.XmlBaseReader.prototype.LookupNamespace$2.call(this, xmlElementNode.Prefix);
			xmlElementNode.BufferOffset = $asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).Offset;
			return true;
		case 66: 
			xmlElementNode = $asm09.System.Xml.XmlBaseReader.prototype.EnterScope.call(this);
			xmlElementNode.Prefix.SetValue$0($asm09.System.Xml.PrefixHandleType.Empty);
			this.ReadDictionaryName(xmlElementNode.LocalName);
			this.ReadAttributes();
			xmlElementNode.Namespace = $asm09.System.Xml.XmlBaseReader.prototype.LookupNamespace$1.call(this, $asm09.System.Xml.PrefixHandleType.Empty);
			xmlElementNode.BufferOffset = $asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).Offset;
			return true;
		case 67: 
			xmlElementNode = $asm09.System.Xml.XmlBaseReader.prototype.EnterScope.call(this);
			this.ReadName$2(xmlElementNode.Prefix);
			this.ReadDictionaryName(xmlElementNode.LocalName);
			this.ReadAttributes();
			xmlElementNode.Namespace = $asm09.System.Xml.XmlBaseReader.prototype.LookupNamespace$2.call(this, xmlElementNode.Prefix);
			xmlElementNode.BufferOffset = $asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).Offset;
			return true;
		case 68: 
		case 69: 
		case 70: 
		case 71: 
		case 72: 
		case 73: 
		case 74: 
		case 75: 
		case 76: 
		case 77: 
		case 78: 
		case 79: 
		case 80: 
		case 81: 
		case 82: 
		case 83: 
		case 84: 
		case 85: 
		case 86: 
		case 87: 
		case 88: 
		case 89: 
		case 90: 
		case 91: 
		case 92: 
		case 93: 
			xmlElementNode = $asm09.System.Xml.XmlBaseReader.prototype.EnterScope.call(this);
			var alphaPrefix = $asm09.System.Xml.PrefixHandle.GetAlphaPrefix((nodeType - $asm09.System.Xml.XmlBinaryNodeType.PrefixDictionaryElementA));
			xmlElementNode.Prefix.SetValue$0(alphaPrefix);
			this.ReadDictionaryName(xmlElementNode.LocalName);
			this.ReadAttributes();
			xmlElementNode.Namespace = $asm09.System.Xml.XmlBaseReader.prototype.LookupNamespace$1.call(this, alphaPrefix);
			xmlElementNode.BufferOffset = $asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).Offset;
			return true;
		case 94: 
		case 95: 
		case 96: 
		case 97: 
		case 98: 
		case 99: 
		case 100: 
		case 101: 
		case 102: 
		case 103: 
		case 104: 
		case 105: 
		case 106: 
		case 107: 
		case 108: 
		case 109: 
		case 110: 
		case 111: 
		case 112: 
		case 113: 
		case 114: 
		case 115: 
		case 116: 
		case 117: 
		case 118: 
		case 119: 
			xmlElementNode = $asm09.System.Xml.XmlBaseReader.prototype.EnterScope.call(this);
			alphaPrefix = $asm09.System.Xml.PrefixHandle.GetAlphaPrefix((nodeType - $asm09.System.Xml.XmlBinaryNodeType.PrefixElementA));
			xmlElementNode.Prefix.SetValue$0(alphaPrefix);
			this.ReadName$1(xmlElementNode.LocalName);
			this.ReadAttributes();
			xmlElementNode.Namespace = $asm09.System.Xml.XmlBaseReader.prototype.LookupNamespace$1.call(this, alphaPrefix);
			xmlElementNode.BufferOffset = $asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).Offset;
			return true;
		case 129: 
			this.MoveToAtomicTextWithEndElement().Value.SetValue$0($asm09.System.Xml.ValueHandleType.Zero);
			if ($asm09.System.Xml.XmlBaseReader.prototype.get_OutsideRootElement.call(this)) {
				this.VerifyWhitespace();
			}
			return true;
		case 131: 
			this.MoveToAtomicTextWithEndElement().Value.SetValue$0($asm09.System.Xml.ValueHandleType.One);
			if ($asm09.System.Xml.XmlBaseReader.prototype.get_OutsideRootElement.call(this)) {
				this.VerifyWhitespace();
			}
			return true;
		case 133: 
			this.MoveToAtomicTextWithEndElement().Value.SetValue$0($asm09.System.Xml.ValueHandleType.False);
			if ($asm09.System.Xml.XmlBaseReader.prototype.get_OutsideRootElement.call(this)) {
				this.VerifyWhitespace();
			}
			return true;
		case 135: 
			this.MoveToAtomicTextWithEndElement().Value.SetValue$0($asm09.System.Xml.ValueHandleType.True);
			if ($asm09.System.Xml.XmlBaseReader.prototype.get_OutsideRootElement.call(this)) {
				this.VerifyWhitespace();
			}
			return true;
		case 137: 
			this.ReadText(this.MoveToAtomicTextWithEndElement(), $asm09.System.Xml.ValueHandleType.Int8, 1);
			return true;
		case 139: 
			this.ReadText(this.MoveToAtomicTextWithEndElement(), $asm09.System.Xml.ValueHandleType.Int16, 2);
			return true;
		case 141: 
			this.ReadText(this.MoveToAtomicTextWithEndElement(), $asm09.System.Xml.ValueHandleType.Int32, 4);
			return true;
		case 143: 
			this.ReadText(this.MoveToAtomicTextWithEndElement(), $asm09.System.Xml.ValueHandleType.Int64, 8);
			return true;
		case 145: 
			this.ReadText(this.MoveToAtomicTextWithEndElement(), $asm09.System.Xml.ValueHandleType.Single, 4);
			return true;
		case 147: 
			this.ReadText(this.MoveToAtomicTextWithEndElement(), $asm09.System.Xml.ValueHandleType.Double, 8);
			return true;
		case 149: 
			this.ReadText(this.MoveToAtomicTextWithEndElement(), $asm09.System.Xml.ValueHandleType.Decimal, 16);
			return true;
		case 151: 
			this.ReadText(this.MoveToAtomicTextWithEndElement(), $asm09.System.Xml.ValueHandleType.DateTime, 8);
			return true;
		case 152: 
			if (this.buffered) {
				this.ReadText($asm09.System.Xml.XmlBaseReader.prototype.MoveToComplexText.call(this), $asm09.System.Xml.ValueHandleType.UTF8, this.ReadUInt8());
			} else {
				this.ReadPartialUTF8Text(false, this.ReadUInt8());
			}
			return true;
		case 153: 
			if (this.buffered) {
				this.ReadText(this.MoveToAtomicTextWithEndElement(), $asm09.System.Xml.ValueHandleType.UTF8, this.ReadUInt8());
			} else {
				this.ReadPartialUTF8Text(true, this.ReadUInt8());
			}
			return true;
		case 154: 
			if (this.buffered) {
				this.ReadText($asm09.System.Xml.XmlBaseReader.prototype.MoveToComplexText.call(this), $asm09.System.Xml.ValueHandleType.UTF8, this.ReadUInt16());
			} else {
				this.ReadPartialUTF8Text(false, this.ReadUInt16());
			}
			return true;
		case 155: 
			if (this.buffered) {
				this.ReadText(this.MoveToAtomicTextWithEndElement(), $asm09.System.Xml.ValueHandleType.UTF8, this.ReadUInt16());
			} else {
				this.ReadPartialUTF8Text(true, this.ReadUInt16());
			}
			return true;
		case 156: 
			if (this.buffered) {
				this.ReadText($asm09.System.Xml.XmlBaseReader.prototype.MoveToComplexText.call(this), $asm09.System.Xml.ValueHandleType.UTF8, this.ReadUInt31());
			} else {
				this.ReadPartialUTF8Text(false, this.ReadUInt31());
			}
			return true;
		case 157: 
			if (this.buffered) {
				this.ReadText(this.MoveToAtomicTextWithEndElement(), $asm09.System.Xml.ValueHandleType.UTF8, this.ReadUInt31());
			} else {
				this.ReadPartialUTF8Text(true, this.ReadUInt31());
			}
			return true;
		case 158: 
			if (this.buffered) {
				this.ReadBinaryText($asm09.System.Xml.XmlBaseReader.prototype.MoveToComplexText.call(this), this.ReadUInt8());
			} else {
				this.ReadPartialBinaryText(false, this.ReadUInt8());
			}
			return true;
		case 159: 
			if (this.buffered) {
				this.ReadBinaryText(this.MoveToAtomicTextWithEndElement(), this.ReadUInt8());
			} else {
				this.ReadPartialBinaryText(true, this.ReadUInt8());
			}
			return true;
		case 160: 
			if (this.buffered) {
				this.ReadBinaryText($asm09.System.Xml.XmlBaseReader.prototype.MoveToComplexText.call(this), this.ReadUInt16());
			} else {
				this.ReadPartialBinaryText(false, this.ReadUInt16());
			}
			return true;
		case 161: 
			if (this.buffered) {
				this.ReadBinaryText(this.MoveToAtomicTextWithEndElement(), this.ReadUInt16());
			} else {
				this.ReadPartialBinaryText(true, this.ReadUInt16());
			}
			return true;
		case 162: 
			if (this.buffered) {
				this.ReadBinaryText($asm09.System.Xml.XmlBaseReader.prototype.MoveToComplexText.call(this), this.ReadUInt31());
			} else {
				this.ReadPartialBinaryText(false, this.ReadUInt31());
			}
			return true;
		case 163: 
			if (this.buffered) {
				this.ReadBinaryText(this.MoveToAtomicTextWithEndElement(), this.ReadUInt31());
			} else {
				this.ReadPartialBinaryText(true, this.ReadUInt31());
			}
			return true;
		case 169: 
			this.MoveToAtomicTextWithEndElement().Value.SetValue$0($asm09.System.Xml.ValueHandleType.Empty);
			if ($asm09.System.Xml.XmlBaseReader.prototype.get_OutsideRootElement.call(this)) {
				this.VerifyWhitespace();
			}
			return true;
		case 171: 
			this.MoveToAtomicTextWithEndElement().Value.SetDictionaryValue(this.ReadDictionaryKey());
			return true;
		case 173: 
			this.ReadText(this.MoveToAtomicTextWithEndElement(), $asm09.System.Xml.ValueHandleType.UniqueId, 16);
			return true;
		case 175: 
			this.ReadText(this.MoveToAtomicTextWithEndElement(), $asm09.System.Xml.ValueHandleType.TimeSpan, 8);
			return true;
		case 177: 
			this.ReadText(this.MoveToAtomicTextWithEndElement(), $asm09.System.Xml.ValueHandleType.Guid, 16);
			return true;
		case 179: 
			this.ReadText(this.MoveToAtomicTextWithEndElement(), $asm09.System.Xml.ValueHandleType.UInt64, 8);
			return true;
		case 181: 
			this.MoveToAtomicTextWithEndElement().Value.SetValue$0((this.ReadUInt8() !== 0) ? $asm09.System.Xml.ValueHandleType.True : $asm09.System.Xml.ValueHandleType.False);
			if ($asm09.System.Xml.XmlBaseReader.prototype.get_OutsideRootElement.call(this)) {
				this.VerifyWhitespace();
			}
			return true;
		case 182: 
			this.ReadUnicodeText(false, this.ReadUInt8());
			return true;
		case 183: 
			this.ReadUnicodeText(true, this.ReadUInt8());
			return true;
		case 184: 
			this.ReadUnicodeText(false, this.ReadUInt16());
			return true;
		case 185: 
			this.ReadUnicodeText(true, this.ReadUInt16());
			return true;
		case 186: 
			this.ReadUnicodeText(false, this.ReadUInt31());
			return true;
		case 187: 
			this.ReadUnicodeText(true, this.ReadUInt31());
			return true;
		case 189: 
			$asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).ReadQName(this.MoveToAtomicTextWithEndElement().Value);
			return true;
	}
	$asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).ReadValue$0(nodeType, $asm09.System.Xml.XmlBaseReader.prototype.MoveToComplexText.call(this).Value);
	return true;
};
$asm09.System.Xml.XmlBinaryReader.prototype.VerifyWhitespace = function () {
	if (!$asm09.System.Xml.XmlBaseReader.prototype.get_Node.call(this).Value.IsWhitespace()) {
		$asm09.System.Xml.XmlExceptionHelper.ThrowInvalidBinaryFormat(this);
	}
};
$asm09.System.Xml.XmlBinaryReader.prototype.ReadAttributes = function () {
	var nodeType = this.GetNodeType();
	if (!((nodeType >= $asm09.System.Xml.XmlBinaryNodeType.ShortAttribute) && (nodeType <= $asm09.System.Xml.XmlBinaryNodeType.MaxAttribute))) {
		return;
	}
	this.ReadAttributes2();
};
$asm09.System.Xml.XmlBinaryReader.prototype.ReadAttributes2 = function () {
	if (this.buffered) {
		var arg_13_0 = $asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).Offset;
	}
__loop0__: 
	while (true) {
		var nodeType = this.GetNodeType();
		switch (Number(nodeType)) {
			case 4: 
				this.SkipNodeType();
				var xmlAttributeNode = $asm09.System.Xml.XmlBaseReader.prototype.AddAttribute$1.call(this);
				xmlAttributeNode.Prefix.SetValue$0($asm09.System.Xml.PrefixHandleType.Empty);
				this.ReadName$1(xmlAttributeNode.LocalName);
				this.ReadAttributeText(xmlAttributeNode.AttributeText);
				continue;
			case 5: 
				this.SkipNodeType();
				xmlAttributeNode = $asm09.System.Xml.XmlBaseReader.prototype.AddAttribute$1.call(this);
				this.ReadName$2(xmlAttributeNode.Prefix);
				this.ReadName$1(xmlAttributeNode.LocalName);
				this.ReadAttributeText(xmlAttributeNode.AttributeText);
				$asm09.System.Xml.XmlBaseReader.prototype.FixXmlAttribute.call(this, xmlAttributeNode);
				continue;
			case 6: 
				this.SkipNodeType();
				xmlAttributeNode = $asm09.System.Xml.XmlBaseReader.prototype.AddAttribute$1.call(this);
				xmlAttributeNode.Prefix.SetValue$0($asm09.System.Xml.PrefixHandleType.Empty);
				this.ReadDictionaryName(xmlAttributeNode.LocalName);
				this.ReadAttributeText(xmlAttributeNode.AttributeText);
				continue;
			case 7: 
				this.SkipNodeType();
				xmlAttributeNode = $asm09.System.Xml.XmlBaseReader.prototype.AddAttribute$1.call(this);
				this.ReadName$2(xmlAttributeNode.Prefix);
				this.ReadDictionaryName(xmlAttributeNode.LocalName);
				this.ReadAttributeText(xmlAttributeNode.AttributeText);
				continue;
			case 8: 
				this.SkipNodeType();
				var namespace = $asm09.System.Xml.XmlBaseReader.prototype.AddNamespace.call(this);
				namespace.Prefix.SetValue$0($asm09.System.Xml.PrefixHandleType.Empty);
				this.ReadName$1(namespace.Uri);
				xmlAttributeNode = $asm09.System.Xml.XmlBaseReader.prototype.AddXmlnsAttribute.call(this, namespace);
				continue;
			case 9: 
				this.SkipNodeType();
				namespace = $asm09.System.Xml.XmlBaseReader.prototype.AddNamespace.call(this);
				this.ReadName$2(namespace.Prefix);
				this.ReadName$1(namespace.Uri);
				xmlAttributeNode = $asm09.System.Xml.XmlBaseReader.prototype.AddXmlnsAttribute.call(this, namespace);
				continue;
			case 10: 
				this.SkipNodeType();
				namespace = $asm09.System.Xml.XmlBaseReader.prototype.AddNamespace.call(this);
				namespace.Prefix.SetValue$0($asm09.System.Xml.PrefixHandleType.Empty);
				this.ReadDictionaryName(namespace.Uri);
				xmlAttributeNode = $asm09.System.Xml.XmlBaseReader.prototype.AddXmlnsAttribute.call(this, namespace);
				continue;
			case 11: 
				this.SkipNodeType();
				namespace = $asm09.System.Xml.XmlBaseReader.prototype.AddNamespace.call(this);
				this.ReadName$2(namespace.Prefix);
				this.ReadDictionaryName(namespace.Uri);
				xmlAttributeNode = $asm09.System.Xml.XmlBaseReader.prototype.AddXmlnsAttribute.call(this, namespace);
				continue;
			case 12: 
			case 13: 
			case 14: 
			case 15: 
			case 16: 
			case 17: 
			case 18: 
			case 19: 
			case 20: 
			case 21: 
			case 22: 
			case 23: 
			case 24: 
			case 25: 
			case 26: 
			case 27: 
			case 28: 
			case 29: 
			case 30: 
			case 31: 
			case 32: 
			case 33: 
			case 34: 
			case 35: 
			case 36: 
			case 37: 
				this.SkipNodeType();
				xmlAttributeNode = $asm09.System.Xml.XmlBaseReader.prototype.AddAttribute$1.call(this);
				var alphaPrefix = $asm09.System.Xml.PrefixHandle.GetAlphaPrefix((nodeType - $asm09.System.Xml.XmlBinaryNodeType.PrefixDictionaryAttributeA));
				xmlAttributeNode.Prefix.SetValue$0(alphaPrefix);
				this.ReadDictionaryName(xmlAttributeNode.LocalName);
				this.ReadAttributeText(xmlAttributeNode.AttributeText);
				continue;
			case 38: 
			case 39: 
			case 40: 
			case 41: 
			case 42: 
			case 43: 
			case 44: 
			case 45: 
			case 46: 
			case 47: 
			case 48: 
			case 49: 
			case 50: 
			case 51: 
			case 52: 
			case 53: 
			case 54: 
			case 55: 
			case 56: 
			case 57: 
			case 58: 
			case 59: 
			case 60: 
			case 61: 
			case 62: 
			case 63: 
				this.SkipNodeType();
				xmlAttributeNode = $asm09.System.Xml.XmlBaseReader.prototype.AddAttribute$1.call(this);
				alphaPrefix = $asm09.System.Xml.PrefixHandle.GetAlphaPrefix((nodeType - $asm09.System.Xml.XmlBinaryNodeType.PrefixAttributeA));
				xmlAttributeNode.Prefix.SetValue$0(alphaPrefix);
				this.ReadName$1(xmlAttributeNode.LocalName);
				this.ReadAttributeText(xmlAttributeNode.AttributeText);
				continue;
		}
		break __loop0__;
	}
	$asm09.System.Xml.XmlBaseReader.prototype.ProcessAttributes$0.call(this);
};
$asm09.System.Xml.XmlBinaryReader.prototype.ReadText = function (textNode, type, length) {
	var offset = $asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).ReadBytes(length);
	textNode.Value.SetValue$1(type, offset, length);
	if ($asm09.System.Xml.XmlBaseReader.prototype.get_OutsideRootElement.call(this)) {
		this.VerifyWhitespace();
	}
};
$asm09.System.Xml.XmlBinaryReader.prototype.ReadBinaryText = function (textNode, length) {
	this.ReadText(textNode, $asm09.System.Xml.ValueHandleType.Base64, length);
};
$asm09.System.Xml.XmlBinaryReader.prototype.ReadPartialUTF8Text = function (withEndElement, length) {
	var num = System.Math.Max((this.maxBytesPerRead - 5), 0);
	if (length > num) {
		var num2 = System.Math.Max((num - 5), 0);
		var num3 = $asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).ReadBytes(num2);
	__loop0__: 
		for (var i = ((num3 + num2) - 1); i >= num3; --i) {
			var byte = $asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).GetByte$1(i);
			if (!(byte & 128) || ((byte & 192) === 192)) {
				break __loop0__;
			}
		}
		var num4 = ((num3 + num2) - i);
		$asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).Offset -= num4;
		num2 -= num4;
		$asm09.System.Xml.XmlBaseReader.prototype.MoveToComplexText.call(this).Value.SetValue$1($asm09.System.Xml.ValueHandleType.UTF8, num3, num2);
		if ($asm09.System.Xml.XmlBaseReader.prototype.get_OutsideRootElement.call(this)) {
			this.VerifyWhitespace();
		}
		var nodeType = withEndElement ? $asm09.System.Xml.XmlBinaryNodeType.Chars32TextWithEndElement : $asm09.System.Xml.XmlBinaryNodeType.Chars32Text;
		this.InsertNode(nodeType, (length - num2));
		return;
	}
	if (withEndElement) {
		this.ReadText(this.MoveToAtomicTextWithEndElement(), $asm09.System.Xml.ValueHandleType.UTF8, length);
		return;
	}
	this.ReadText($asm09.System.Xml.XmlBaseReader.prototype.MoveToComplexText.call(this), $asm09.System.Xml.ValueHandleType.UTF8, length);
};
$asm09.System.Xml.XmlBinaryReader.prototype.ReadUnicodeText = function (withEndElement, length) {
	if (length & 1) {
		$asm09.System.Xml.XmlExceptionHelper.ThrowInvalidBinaryFormat(this);
	}
	if (!this.buffered) {
		this.ReadPartialUnicodeText(withEndElement, length);
		return;
	}
	if (withEndElement) {
		this.ReadText(this.MoveToAtomicTextWithEndElement(), $asm09.System.Xml.ValueHandleType.Unicode, length);
		return;
	}
	this.ReadText($asm09.System.Xml.XmlBaseReader.prototype.MoveToComplexText.call(this), $asm09.System.Xml.ValueHandleType.Unicode, length);
};
$asm09.System.Xml.XmlBinaryReader.prototype.ReadPartialUnicodeText = function (withEndElement, length) {
	var num = System.Math.Max((this.maxBytesPerRead - 5), 0);
	if (length > num) {
		var num2 = System.Math.Max((num - 5), 0);
		if (num2 & 1) {
			--num2;
		}
		var num3 = $asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).ReadBytes(num2);
		var num4 = 0;
		var c = String.fromCharCode($asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).GetInt16(((num3 + num2) - 2)));
		if (!((c < "\ud800") || (c >= "\udc00"))) {
			num4 = 2;
		}
		$asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).Offset -= num4;
		num2 -= num4;
		$asm09.System.Xml.XmlBaseReader.prototype.MoveToComplexText.call(this).Value.SetValue$1($asm09.System.Xml.ValueHandleType.Unicode, num3, num2);
		if ($asm09.System.Xml.XmlBaseReader.prototype.get_OutsideRootElement.call(this)) {
			this.VerifyWhitespace();
		}
		var nodeType = withEndElement ? $asm09.System.Xml.XmlBinaryNodeType.UnicodeChars32TextWithEndElement : $asm09.System.Xml.XmlBinaryNodeType.UnicodeChars32Text;
		this.InsertNode(nodeType, (length - num2));
		return;
	}
	if (withEndElement) {
		this.ReadText(this.MoveToAtomicTextWithEndElement(), $asm09.System.Xml.ValueHandleType.Unicode, length);
		return;
	}
	this.ReadText($asm09.System.Xml.XmlBaseReader.prototype.MoveToComplexText.call(this), $asm09.System.Xml.ValueHandleType.Unicode, length);
};
$asm09.System.Xml.XmlBinaryReader.prototype.ReadPartialBinaryText = function (withEndElement, length) {
	var num = System.Math.Max((this.maxBytesPerRead - 5), 0);
	if (length > num) {
		var num2 = num;
		if (num2 > 3) {
			num2 -= (num2 % 3);
		}
		this.ReadText($asm09.System.Xml.XmlBaseReader.prototype.MoveToComplexText.call(this), $asm09.System.Xml.ValueHandleType.Base64, num2);
		var nodeType = withEndElement ? $asm09.System.Xml.XmlBinaryNodeType.Bytes32TextWithEndElement : $asm09.System.Xml.XmlBinaryNodeType.Bytes32Text;
		this.InsertNode(nodeType, (length - num2));
		return;
	}
	if (withEndElement) {
		this.ReadText(this.MoveToAtomicTextWithEndElement(), $asm09.System.Xml.ValueHandleType.Base64, length);
		return;
	}
	this.ReadText($asm09.System.Xml.XmlBaseReader.prototype.MoveToComplexText.call(this), $asm09.System.Xml.ValueHandleType.Base64, length);
};
$asm09.System.Xml.XmlBinaryReader.prototype.InsertNode = function (nodeType, length) {
	var array = JSIL.Array.New(System.Byte, 5);
	array[0] = Math.floor(nodeType);
	array[1] = length;
	length = (length >> 8);
	array[2] = length;
	length = (length >> 8);
	array[3] = length;
	length = (length >> 8);
	array[4] = length;
	$asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).InsertBytes(array, 0, array.length);
};
$asm09.System.Xml.XmlBinaryReader.prototype.ReadAttributeText = function (textNode) {
	var nodeType = this.GetNodeType();
	this.SkipNodeType();
	$asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).ReadValue$0(nodeType, textNode.Value);
};
$asm09.System.Xml.XmlBinaryReader.prototype.ReadName$0 = function (value) {
	var num = this.ReadMultiByteUInt31();
	var offset = $asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).ReadBytes(num);
	value.SetValue$1($asm09.System.Xml.ValueHandleType.UTF8, offset, num);
};
$asm09.System.Xml.XmlBinaryReader.prototype.ReadName$1 = function (handle) {
	var num = this.ReadMultiByteUInt31();
	var offset = $asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).ReadBytes(num);
	handle.SetValue$0(offset, num);
};
$asm09.System.Xml.XmlBinaryReader.prototype.ReadName$2 = function (prefix) {
	var num = this.ReadMultiByteUInt31();
	var offset = $asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).ReadBytes(num);
	prefix.SetValue$1(offset, num);
};
$asm09.System.Xml.XmlBinaryReader.prototype.ReadDictionaryName = function (s) {
	var value = this.ReadDictionaryKey();
	s.SetValue$2(value);
};
$asm09.System.Xml.XmlBinaryReader.prototype.GetNodeType = function () {
	return $asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).GetNodeType();
};
$asm09.System.Xml.XmlBinaryReader.prototype.SkipNodeType = function () {
	$asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).SkipNodeType();
};
$asm09.System.Xml.XmlBinaryReader.prototype.ReadDictionaryKey = function () {
	return $asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).ReadDictionaryKey();
};
$asm09.System.Xml.XmlBinaryReader.prototype.ReadMultiByteUInt31 = function () {
	return $asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).ReadMultiByteUInt31();
};
$asm09.System.Xml.XmlBinaryReader.prototype.ReadUInt8 = function () {
	return $asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).ReadUInt8();
};
$asm09.System.Xml.XmlBinaryReader.prototype.ReadUInt16 = function () {
	return $asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).ReadUInt16();
};
$asm09.System.Xml.XmlBinaryReader.prototype.ReadUInt31 = function () {
	return $asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).ReadUInt31();
};
$asm09.System.Xml.XmlBinaryReader.prototype.IsValidArrayType = function (nodeType) {
	switch (Number(nodeType)) {
		case 139: 
		case 141: 
		case 143: 
		case 145: 
		case 147: 
		case 149: 
		case 151: 
			break;
		case 140: 
		case 142: 
		case 144: 
		case 146: 
		case 148: 
		case 150: 
			return false;
		default: 
			switch (Number(nodeType)) {
				case 175: 
				case 177: 
					break;
				case 176: 
					return false;
				default: 
					if (nodeType !== $asm09.System.Xml.XmlBinaryNodeType.BoolTextWithEndElement) {
						return false;
					}
					break;
			}
			break;
	}
	return true;
};
$asm09.System.Xml.XmlBinaryReader.prototype.ReadArray$0 = function () {
	if (this.GetNodeType() === $asm09.System.Xml.XmlBinaryNodeType.Array) {
		$asm09.System.Xml.XmlExceptionHelper.ThrowInvalidBinaryFormat(this);
	}
	this.ReadNode();
	if ($asm09.System.Xml.XmlBaseReader.prototype.get_Node.call(this).NodeType !== System.Xml.XmlNodeType.Element) {
		$asm09.System.Xml.XmlExceptionHelper.ThrowInvalidBinaryFormat(this);
	}
	if (this.GetNodeType() === $asm09.System.Xml.XmlBinaryNodeType.Array) {
		$asm09.System.Xml.XmlExceptionHelper.ThrowInvalidBinaryFormat(this);
	}
	this.ReadNode();
	if ($asm09.System.Xml.XmlBaseReader.prototype.get_Node.call(this).NodeType !== System.Xml.XmlNodeType.EndElement) {
		$asm09.System.Xml.XmlExceptionHelper.ThrowInvalidBinaryFormat(this);
	}
	this.arrayState = $asm09.System.Xml.XmlBinaryReader.ArrayState.Element;
	this.arrayNodeType = this.GetNodeType();
	if (!this.IsValidArrayType(this.arrayNodeType)) {
		$asm09.System.Xml.XmlExceptionHelper.ThrowInvalidBinaryFormat(this);
	}
	this.SkipNodeType();
	this.arrayCount = this.ReadMultiByteUInt31();
	if (this.arrayCount === 0) {
		$asm09.System.Xml.XmlExceptionHelper.ThrowInvalidBinaryFormat(this);
	}
	this.MoveToArrayElement();
};
$asm09.System.Xml.XmlBinaryReader.prototype.MoveToArrayElement = function () {
	this.arrayState = $asm09.System.Xml.XmlBinaryReader.ArrayState.Element;
	$asm09.System.Xml.XmlBaseReader.prototype.MoveToNode.call(this, $asm09.System.Xml.XmlBaseReader.prototype.get_ElementNode.call(this));
};
$asm09.System.Xml.XmlBinaryReader.prototype.SkipArrayElements = function (count) {
	this.arrayCount -= count;
	if (this.arrayCount === 0) {
		this.arrayState = $asm09.System.Xml.XmlBinaryReader.ArrayState.None;
		$asm09.System.Xml.XmlBaseReader.prototype.ExitScope.call(this);
		this.ReadNode();
	}
};
$asm09.System.Xml.XmlBinaryReader.prototype.IsStartArray$0 = function (/* ref */ type) {
	type.value = null;
	if (this.arrayState !== $asm09.System.Xml.XmlBinaryReader.ArrayState.Element) {
		return false;
	}
	var xmlBinaryNodeType = this.arrayNodeType;
	switch (Number(xmlBinaryNodeType)) {
		case 139: 
			type.value = System.Int16;
			return true;
		case 140: 
		case 142: 
		case 144: 
		case 146: 
		case 148: 
		case 150: 
			break;
		case 141: 
			type.value = System.Int32;
			return true;
		case 143: 
			type.value = System.Int64;
			return true;
		case 145: 
			type.value = System.Single;
			return true;
		case 147: 
			type.value = System.Double;
			return true;
		case 149: 
			type.value = System.Decimal;
			return true;
		case 151: 
			type.value = System.DateTime;
			return true;
		default: 
			switch (Number(xmlBinaryNodeType)) {
				case 173: 
					type.value = System.Xml.UniqueId;
					return true;
				case 174: 
				case 176: 
					break;
				case 175: 
					type.value = System.TimeSpan;
					return true;
				case 177: 
					type.value = System.Guid;
					return true;
				default: 
					if (xmlBinaryNodeType === $asm09.System.Xml.XmlBinaryNodeType.BoolTextWithEndElement) {
						type.value = System.Boolean;
						return true;
					}
					break;
			}
			break;
	}
	return false;
};
$asm09.System.Xml.XmlBinaryReader.prototype.TryGetArrayLength = function (/* ref */ count) {
	count.value = 0;
	if (!this.buffered) {
		return false;
	}
	if (this.arrayState !== $asm09.System.Xml.XmlBinaryReader.ArrayState.Element) {
		return false;
	}
	count.value = this.arrayCount;
	return true;
};
$asm09.System.Xml.XmlBinaryReader.prototype.IsStartArray$1 = function (localName, namespaceUri, nodeType) {
	return (!(!this.IsStartElement$2(localName, namespaceUri) || 
			(this.arrayState !== $asm09.System.Xml.XmlBinaryReader.ArrayState.Element)) && (this.arrayNodeType === nodeType));
};
$asm09.System.Xml.XmlBinaryReader.prototype.IsStartArray$2 = function (localName, namespaceUri, nodeType) {
	return (!(!this.IsStartElement(localName, namespaceUri) || 
			(this.arrayState !== $asm09.System.Xml.XmlBinaryReader.ArrayState.Element)) && (this.arrayNodeType === nodeType));
};
$asm09.System.Xml.XmlBinaryReader.prototype.CheckArray = function (array, offset, count) {
	if (array === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentNullException, "_ctor$1", ["array"]));
	}
	if (offset < 0) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["offset", $asm09.System.Runtime.Serialization.SR.GetString$2("ValueMustBeNonNegative")]));
	}
	if (offset > array.length) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["offset", $asm09.System.Runtime.Serialization.SR.GetString$0("OffsetExceedsBufferSize", [array.length])]));
	}
	if (count < 0) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["count", $asm09.System.Runtime.Serialization.SR.GetString$2("ValueMustBeNonNegative")]));
	}
	if (count > (array.length - offset)) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["count", $asm09.System.Runtime.Serialization.SR.GetString$0("SizeExceedsRemainingBufferSpace", [(array.length - offset)])]));
	}
};
$asm09.System.Xml.XmlBinaryReader.prototype.ReadArray$1 = JSIL.UntranslatableFunction("System.Int32 System.Xml.XmlBinaryReader::ReadArray(System.Boolean[],System.Int32,System.Int32)");
$asm09.System.Xml.XmlBinaryReader.prototype.ReadArray$2 = function (localName, namespaceUri, array, offset, count) {
	if (this.IsStartArray$1(localName, namespaceUri, $asm09.System.Xml.XmlBinaryNodeType.BoolTextWithEndElement)) {
		return this.ReadArray$1(array, offset, count);
	}
	return System.Xml.XmlDictionaryReader.prototype.ReadArray$0.call(
		this, localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.XmlBinaryReader.prototype.ReadArray$3 = function (localName, namespaceUri, array, offset, count) {
	if (this.IsStartArray$2(localName, namespaceUri, $asm09.System.Xml.XmlBinaryNodeType.BoolTextWithEndElement)) {
		return this.ReadArray$1(array, offset, count);
	}
	return System.Xml.XmlDictionaryReader.prototype.ReadArray$1.call(
		this, localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.XmlBinaryReader.prototype.ReadArray$4 = JSIL.UntranslatableFunction("System.Int32 System.Xml.XmlBinaryReader::ReadArray(System.Int16[],System.Int32,System.Int32)");
$asm09.System.Xml.XmlBinaryReader.prototype.ReadArray$5 = function (localName, namespaceUri, array, offset, count) {
	if (!(!this.IsStartArray$1(localName, namespaceUri, $asm09.System.Xml.XmlBinaryNodeType.Int16TextWithEndElement) || !System.BitConverter.IsLittleEndian)) {
		return this.ReadArray$4(array, offset, count);
	}
	return System.Xml.XmlDictionaryReader.prototype.ReadArray$2.call(
		this, localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.XmlBinaryReader.prototype.ReadArray$6 = function (localName, namespaceUri, array, offset, count) {
	if (!(!this.IsStartArray$2(localName, namespaceUri, $asm09.System.Xml.XmlBinaryNodeType.Int16TextWithEndElement) || !System.BitConverter.IsLittleEndian)) {
		return this.ReadArray$4(array, offset, count);
	}
	return System.Xml.XmlDictionaryReader.prototype.ReadArray$3.call(
		this, localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.XmlBinaryReader.prototype.ReadArray$7 = JSIL.UntranslatableFunction("System.Int32 System.Xml.XmlBinaryReader::ReadArray(System.Int32[],System.Int32,System.Int32)");
$asm09.System.Xml.XmlBinaryReader.prototype.ReadArray$8 = function (localName, namespaceUri, array, offset, count) {
	if (!(!this.IsStartArray$1(localName, namespaceUri, $asm09.System.Xml.XmlBinaryNodeType.Int32TextWithEndElement) || !System.BitConverter.IsLittleEndian)) {
		return this.ReadArray$7(array, offset, count);
	}
	return System.Xml.XmlDictionaryReader.prototype.ReadArray$4.call(
		this, localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.XmlBinaryReader.prototype.ReadArray$9 = function (localName, namespaceUri, array, offset, count) {
	if (!(!this.IsStartArray$2(localName, namespaceUri, $asm09.System.Xml.XmlBinaryNodeType.Int32TextWithEndElement) || !System.BitConverter.IsLittleEndian)) {
		return this.ReadArray$7(array, offset, count);
	}
	return System.Xml.XmlDictionaryReader.prototype.ReadArray$5.call(
		this, localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.XmlBinaryReader.prototype.ReadArray$10 = JSIL.UntranslatableFunction("System.Int32 System.Xml.XmlBinaryReader::ReadArray(System.Int64[],System.Int32,System.Int32)");
$asm09.System.Xml.XmlBinaryReader.prototype.ReadArray$11 = function (localName, namespaceUri, array, offset, count) {
	if (!(!this.IsStartArray$1(localName, namespaceUri, $asm09.System.Xml.XmlBinaryNodeType.Int64TextWithEndElement) || !System.BitConverter.IsLittleEndian)) {
		return this.ReadArray$10(array, offset, count);
	}
	return System.Xml.XmlDictionaryReader.prototype.ReadArray$6.call(
		this, localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.XmlBinaryReader.prototype.ReadArray$12 = function (localName, namespaceUri, array, offset, count) {
	if (!(!this.IsStartArray$2(localName, namespaceUri, $asm09.System.Xml.XmlBinaryNodeType.Int64TextWithEndElement) || !System.BitConverter.IsLittleEndian)) {
		return this.ReadArray$10(array, offset, count);
	}
	return System.Xml.XmlDictionaryReader.prototype.ReadArray$7.call(
		this, localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.XmlBinaryReader.prototype.ReadArray$13 = JSIL.UntranslatableFunction("System.Int32 System.Xml.XmlBinaryReader::ReadArray(System.Single[],System.Int32,System.Int32)");
$asm09.System.Xml.XmlBinaryReader.prototype.ReadArray$14 = function (localName, namespaceUri, array, offset, count) {
	if (this.IsStartArray$1(localName, namespaceUri, $asm09.System.Xml.XmlBinaryNodeType.FloatTextWithEndElement)) {
		return this.ReadArray$13(array, offset, count);
	}
	return System.Xml.XmlDictionaryReader.prototype.ReadArray$8.call(
		this, localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.XmlBinaryReader.prototype.ReadArray$15 = function (localName, namespaceUri, array, offset, count) {
	if (this.IsStartArray$2(localName, namespaceUri, $asm09.System.Xml.XmlBinaryNodeType.FloatTextWithEndElement)) {
		return this.ReadArray$13(array, offset, count);
	}
	return System.Xml.XmlDictionaryReader.prototype.ReadArray$9.call(
		this, localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.XmlBinaryReader.prototype.ReadArray$16 = JSIL.UntranslatableFunction("System.Int32 System.Xml.XmlBinaryReader::ReadArray(System.Double[],System.Int32,System.Int32)");
$asm09.System.Xml.XmlBinaryReader.prototype.ReadArray$17 = function (localName, namespaceUri, array, offset, count) {
	if (this.IsStartArray$1(localName, namespaceUri, $asm09.System.Xml.XmlBinaryNodeType.DoubleTextWithEndElement)) {
		return this.ReadArray$16(array, offset, count);
	}
	return System.Xml.XmlDictionaryReader.prototype.ReadArray$10.call(
		this, localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.XmlBinaryReader.prototype.ReadArray$18 = function (localName, namespaceUri, array, offset, count) {
	if (this.IsStartArray$2(localName, namespaceUri, $asm09.System.Xml.XmlBinaryNodeType.DoubleTextWithEndElement)) {
		return this.ReadArray$16(array, offset, count);
	}
	return System.Xml.XmlDictionaryReader.prototype.ReadArray$11.call(
		this, localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.XmlBinaryReader.prototype.ReadArray$19 = JSIL.UntranslatableFunction("System.Int32 System.Xml.XmlBinaryReader::ReadArray(System.Decimal[],System.Int32,System.Int32)");
$asm09.System.Xml.XmlBinaryReader.prototype.ReadArray$20 = function (localName, namespaceUri, array, offset, count) {
	if (this.IsStartArray$1(localName, namespaceUri, $asm09.System.Xml.XmlBinaryNodeType.DecimalTextWithEndElement)) {
		return this.ReadArray$19(array, offset, count);
	}
	return System.Xml.XmlDictionaryReader.prototype.ReadArray$12.call(
		this, localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.XmlBinaryReader.prototype.ReadArray$21 = function (localName, namespaceUri, array, offset, count) {
	if (this.IsStartArray$2(localName, namespaceUri, $asm09.System.Xml.XmlBinaryNodeType.DecimalTextWithEndElement)) {
		return this.ReadArray$19(array, offset, count);
	}
	return System.Xml.XmlDictionaryReader.prototype.ReadArray$13.call(
		this, localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.XmlBinaryReader.prototype.ReadArray$22 = function (array, offset, count) {
	this.CheckArray(array, offset, count);
	var num = System.Math.Min(count, this.arrayCount);
__loop0__: 
	for (var i = 0; i < num; ++i) {
		array[(offset + i)] = $asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).ReadDateTime().MemberwiseClone();
	}
	this.SkipArrayElements(num);
	return num;
};
$asm09.System.Xml.XmlBinaryReader.prototype.ReadArray$23 = function (localName, namespaceUri, array, offset, count) {
	if (this.IsStartArray$1(localName, namespaceUri, $asm09.System.Xml.XmlBinaryNodeType.DateTimeTextWithEndElement)) {
		return this.ReadArray$22(array, offset, count);
	}
	return System.Xml.XmlDictionaryReader.prototype.ReadArray$14.call(
		this, localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.XmlBinaryReader.prototype.ReadArray$24 = function (localName, namespaceUri, array, offset, count) {
	if (this.IsStartArray$2(localName, namespaceUri, $asm09.System.Xml.XmlBinaryNodeType.DateTimeTextWithEndElement)) {
		return this.ReadArray$22(array, offset, count);
	}
	return System.Xml.XmlDictionaryReader.prototype.ReadArray$15.call(
		this, localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.XmlBinaryReader.prototype.ReadArray$25 = function (array, offset, count) {
	this.CheckArray(array, offset, count);
	var num = System.Math.Min(count, this.arrayCount);
__loop0__: 
	for (var i = 0; i < num; ++i) {
		array[(offset + i)] = $asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).ReadGuid().MemberwiseClone();
	}
	this.SkipArrayElements(num);
	return num;
};
$asm09.System.Xml.XmlBinaryReader.prototype.ReadArray$26 = function (localName, namespaceUri, array, offset, count) {
	if (this.IsStartArray$1(localName, namespaceUri, $asm09.System.Xml.XmlBinaryNodeType.GuidTextWithEndElement)) {
		return this.ReadArray$25(array, offset, count);
	}
	return System.Xml.XmlDictionaryReader.prototype.ReadArray$16.call(
		this, localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.XmlBinaryReader.prototype.ReadArray$27 = function (localName, namespaceUri, array, offset, count) {
	if (this.IsStartArray$2(localName, namespaceUri, $asm09.System.Xml.XmlBinaryNodeType.GuidTextWithEndElement)) {
		return this.ReadArray$25(array, offset, count);
	}
	return System.Xml.XmlDictionaryReader.prototype.ReadArray$17.call(
		this, localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.XmlBinaryReader.prototype.ReadArray$28 = function (array, offset, count) {
	this.CheckArray(array, offset, count);
	var num = System.Math.Min(count, this.arrayCount);
__loop0__: 
	for (var i = 0; i < num; ++i) {
		array[(offset + i)] = $asm09.System.Xml.XmlBaseReader.prototype.get_BufferReader.call(this).ReadTimeSpan().MemberwiseClone();
	}
	this.SkipArrayElements(num);
	return num;
};
$asm09.System.Xml.XmlBinaryReader.prototype.ReadArray$29 = function (localName, namespaceUri, array, offset, count) {
	if (this.IsStartArray$1(localName, namespaceUri, $asm09.System.Xml.XmlBinaryNodeType.TimeSpanTextWithEndElement)) {
		return this.ReadArray$28(array, offset, count);
	}
	return System.Xml.XmlDictionaryReader.prototype.ReadArray$18.call(
		this, localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
$asm09.System.Xml.XmlBinaryReader.prototype.ReadArray$30 = function (localName, namespaceUri, array, offset, count) {
	if (this.IsStartArray$2(localName, namespaceUri, $asm09.System.Xml.XmlBinaryNodeType.TimeSpanTextWithEndElement)) {
		return this.ReadArray$28(array, offset, count);
	}
	return System.Xml.XmlDictionaryReader.prototype.ReadArray$19.call(
		this, localName, 
		namespaceUri, 
		array, 
		offset, 
		count
	);
};
JSIL.OverloadedMethod($asm09.System.Xml.XmlBinaryReader.prototype, "SetInput", [
		["SetInput$0", [System.Array.Of(System.Byte), System.Int32, System.Int32, System.Xml.IXmlDictionary, System.Xml.XmlDictionaryReaderQuotas, System.Xml.XmlBinaryReaderSession]], 
		["SetInput$1", [System.IO.Stream, System.Xml.IXmlDictionary, System.Xml.XmlDictionaryReaderQuotas, System.Xml.XmlBinaryReaderSession]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlBinaryReader.prototype, "ReadName", [
		["ReadName$0", [$asm09.System.Xml.ValueHandle]], 
		["ReadName$1", [$asm09.System.Xml.StringHandle]], 
		["ReadName$2", [$asm09.System.Xml.PrefixHandle]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlBinaryReader.prototype, "ReadArray", [
		["ReadArray$0", []], 
		["ReadArray$1", [System.Array.Of(System.Boolean), System.Int32, System.Int32]], 
		["ReadArray$2", [System.String, System.String, System.Array.Of(System.Boolean), System.Int32, System.Int32]], 
		["ReadArray$3", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Array.Of(System.Boolean), System.Int32, System.Int32]], 
		["ReadArray$4", [System.Array.Of(System.Int16), System.Int32, System.Int32]], 
		["ReadArray$5", [System.String, System.String, System.Array.Of(System.Int16), System.Int32, System.Int32]], 
		["ReadArray$6", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Array.Of(System.Int16), System.Int32, System.Int32]], 
		["ReadArray$7", [System.Array.Of(System.Int32), System.Int32, System.Int32]], 
		["ReadArray$8", [System.String, System.String, System.Array.Of(System.Int32), System.Int32, System.Int32]], 
		["ReadArray$9", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Array.Of(System.Int32), System.Int32, System.Int32]], 
		["ReadArray$10", [System.Array.Of(System.Int64), System.Int32, System.Int32]], 
		["ReadArray$11", [System.String, System.String, System.Array.Of(System.Int64), System.Int32, System.Int32]], 
		["ReadArray$12", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Array.Of(System.Int64), System.Int32, System.Int32]], 
		["ReadArray$13", [System.Array.Of(System.Single), System.Int32, System.Int32]], 
		["ReadArray$14", [System.String, System.String, System.Array.Of(System.Single), System.Int32, System.Int32]], 
		["ReadArray$15", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Array.Of(System.Single), System.Int32, System.Int32]], 
		["ReadArray$16", [System.Array.Of(System.Double), System.Int32, System.Int32]], 
		["ReadArray$17", [System.String, System.String, System.Array.Of(System.Double), System.Int32, System.Int32]], 
		["ReadArray$18", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Array.Of(System.Double), System.Int32, System.Int32]], 
		["ReadArray$19", [System.Array.Of(System.Decimal), System.Int32, System.Int32]], 
		["ReadArray$20", [System.String, System.String, System.Array.Of(System.Decimal), System.Int32, System.Int32]], 
		["ReadArray$21", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Array.Of(System.Decimal), System.Int32, System.Int32]], 
		["ReadArray$22", [System.Array.Of(System.DateTime), System.Int32, System.Int32]], 
		["ReadArray$23", [System.String, System.String, System.Array.Of(System.DateTime), System.Int32, System.Int32]], 
		["ReadArray$24", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Array.Of(System.DateTime), System.Int32, System.Int32]], 
		["ReadArray$25", [System.Array.Of(System.Guid), System.Int32, System.Int32]], 
		["ReadArray$26", [System.String, System.String, System.Array.Of(System.Guid), System.Int32, System.Int32]], 
		["ReadArray$27", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Array.Of(System.Guid), System.Int32, System.Int32]], 
		["ReadArray$28", [System.Array.Of(System.TimeSpan), System.Int32, System.Int32]], 
		["ReadArray$29", [System.String, System.String, System.Array.Of(System.TimeSpan), System.Int32, System.Int32]], 
		["ReadArray$30", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Array.Of(System.TimeSpan), System.Int32, System.Int32]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlBinaryReader.prototype, "IsStartArray", [
		["IsStartArray$0", [JSIL.Reference.Of(System.Type)]], 
		["IsStartArray$1", [System.String, System.String, $asm09.System.Xml.XmlBinaryNodeType]], 
		["IsStartArray$2", [System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, $asm09.System.Xml.XmlBinaryNodeType]]
	]);
$asm09.System.Xml.XmlBinaryReader.prototype.isTextWithEndElement = false;
$asm09.System.Xml.XmlBinaryReader.prototype.buffered = false;
$asm09.System.Xml.XmlBinaryReader.prototype.arrayState = 0;
$asm09.System.Xml.XmlBinaryReader.prototype.arrayCount = 0;
$asm09.System.Xml.XmlBinaryReader.prototype.maxBytesPerRead = 0;
$asm09.System.Xml.XmlBinaryReader.prototype.arrayNodeType = 0;

System.Xml.XmlBinaryReaderSession.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
System.Xml.XmlBinaryReaderSession.prototype.Add = function (id, value) {
	if (id < 0) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$2("XmlInvalidID")]));
	}
	if (value === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull("value");
	}
	if (this.TryLookup$0(id, /* ref */ xmlDictionaryString)) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$2("XmlIDDefined")]));
	}
	var xmlDictionaryString = new JSIL.Variable(new System.Xml.XmlDictionaryString(this, value, id));
	if (id >= 2048) {
		if (this.stringDict === null) {
			this.stringDict = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.Int32, System.Xml.XmlDictionaryString), "_ctor$0", []);
		}
		this.stringDict.Add(id, xmlDictionaryString.value);
	} else {
		if (this.strings === null) {
			this.strings = JSIL.Array.New(System.Xml.XmlDictionaryString, System.Math.Max((id + 1), 16));
		} else if (id >= this.strings.length) {
			var destinationArray = JSIL.Array.New(System.Xml.XmlDictionaryString, System.Math.Min(System.Math.Max((id + 1), (this.strings.length * 2)), 2048));
			System.Array.Copy$0(this.strings, destinationArray, this.strings.length);
			this.strings = destinationArray;
		}
		this.strings[id] = xmlDictionaryString.value;
	}
	return xmlDictionaryString.value;
};
System.Xml.XmlBinaryReaderSession.prototype.TryLookup$0 = function (key, /* ref */ result) {
	if (!((this.strings === null) || 
			(key < 0) || (key >= this.strings.length))) {
		result.value = this.strings[key];
		return (result.value !== null);
	}
	if (!((key < 2048) || (this.stringDict === null))) {
		return this.stringDict.TryGetValue(key, /* ref */ result);
	}
	result.value = null;
	return false;
};
System.Xml.XmlBinaryReaderSession.prototype.TryLookup$1 = function (value, /* ref */ result) {
	if (value === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull("value");
	}
	if (this.strings !== null) {
	__loop0__: 
		for (var i = 0; i < this.strings.length; ++i) {
			var xmlDictionaryString = this.strings[i];
			if (!((xmlDictionaryString === null) || !(xmlDictionaryString.Value == value))) {
				result.value = xmlDictionaryString;
				return true;
			}
		}
	}
	if (this.stringDict !== null) {
		var enumerator = JSIL.Cast(this.stringDict.Values, System.Collections.Generic.Dictionary$b2.ValueCollection.Of(System.Int32, System.Xml.XmlDictionaryString)).GetEnumerator().MemberwiseClone();
		try {
		__loop1__: 
			while (enumerator.MoveNext()) {
				var current = enumerator.Current;
				if (current.Value == value) {
					result.value = current;
					return true;
				}
			}
		} finally {
			enumerator.IDisposable_Dispose();
		}
	}
	result.value = null;
	return false;
};
System.Xml.XmlBinaryReaderSession.prototype.TryLookup$2 = function (value, /* ref */ result) {
	if (value === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentNullException, "_ctor$1", ["value"]));
	}
	if (value.Dictionary !== this) {
		result.value = null;
		return false;
	}
	result.value = value;
	return true;
};
System.Xml.XmlBinaryReaderSession.prototype.Clear = function () {
	if (this.strings !== null) {
		System.Array.Clear(this.strings, 0, this.strings.length);
	}
	if (this.stringDict !== null) {
		this.stringDict.Clear();
	}
};
JSIL.OverloadedMethod(System.Xml.XmlBinaryReaderSession.prototype, "TryLookup", [
		["TryLookup$0", [System.Int32, JSIL.Reference.Of(System.Xml.XmlDictionaryString)]], 
		["TryLookup$1", [System.String, JSIL.Reference.Of(System.Xml.XmlDictionaryString)]], 
		["TryLookup$2", [System.Xml.XmlDictionaryString, JSIL.Reference.Of(System.Xml.XmlDictionaryString)]]
	]);
Object.defineProperty(System.Xml.XmlBinaryReaderSession, "MaxArrayEntries", {
		"value": 2048}
);
System.Xml.XmlBinaryReaderSession.prototype.strings = null;
System.Xml.XmlBinaryReaderSession.prototype.stringDict = null;

$asm09.System.Xml.XmlNodeWriter.prototype.WriteStartElement$1 = function (prefixBuffer, prefixOffset, prefixLength, localNameBuffer, localNameOffset, localNameLength) {
	this.WriteStartElement$0(System.Text.Encoding.UTF8.GetString$1(prefixBuffer, prefixOffset, prefixLength), System.Text.Encoding.UTF8.GetString$1(localNameBuffer, localNameOffset, localNameLength));
};
$asm09.System.Xml.XmlNodeWriter.prototype.WriteEndElement$1 = function (prefixBuffer, prefixOffset, prefixLength, localNameBuffer, localNameOffset, localNameLength) {
	this.WriteEndElement$0(System.Text.Encoding.UTF8.GetString$1(prefixBuffer, prefixOffset, prefixLength), System.Text.Encoding.UTF8.GetString$1(localNameBuffer, localNameOffset, localNameLength));
};
$asm09.System.Xml.XmlNodeWriter.prototype.WriteXmlnsAttribute$1 = function (prefixBuffer, prefixOffset, prefixLength, nsBuffer, nsOffset, nsLength) {
	this.WriteXmlnsAttribute$0(System.Text.Encoding.UTF8.GetString$1(prefixBuffer, prefixOffset, prefixLength), System.Text.Encoding.UTF8.GetString$1(nsBuffer, nsOffset, nsLength));
};
$asm09.System.Xml.XmlNodeWriter.prototype.WriteStartAttribute$1 = function (prefixBuffer, prefixOffset, prefixLength, localNameBuffer, localNameOffset, localNameLength) {
	this.WriteStartAttribute$0(System.Text.Encoding.UTF8.GetString$1(prefixBuffer, prefixOffset, prefixLength), System.Text.Encoding.UTF8.GetString$1(localNameBuffer, localNameOffset, localNameLength));
};
$asm09.System.Xml.XmlNodeWriter.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
JSIL.OverloadedMethod($asm09.System.Xml.XmlNodeWriter.prototype, "WriteStartElement", [
		["WriteStartElement$0", [System.String, System.String]], 
		["WriteStartElement$1", [System.Array.Of(System.Byte), System.Int32, System.Int32, System.Array.Of(System.Byte), System.Int32, System.Int32]], 
		["WriteStartElement$2", [System.String, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlNodeWriter.prototype, "WriteEndElement", [
		["WriteEndElement$0", [System.String, System.String]], 
		["WriteEndElement$1", [System.Array.Of(System.Byte), System.Int32, System.Int32, System.Array.Of(System.Byte), System.Int32, System.Int32]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlNodeWriter.prototype, "WriteXmlnsAttribute", [
		["WriteXmlnsAttribute$0", [System.String, System.String]], 
		["WriteXmlnsAttribute$1", [System.Array.Of(System.Byte), System.Int32, System.Int32, System.Array.Of(System.Byte), System.Int32, System.Int32]], 
		["WriteXmlnsAttribute$2", [System.String, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlNodeWriter.prototype, "WriteStartAttribute", [
		["WriteStartAttribute$0", [System.String, System.String]], 
		["WriteStartAttribute$1", [System.Array.Of(System.Byte), System.Int32, System.Int32, System.Array.Of(System.Byte), System.Int32, System.Int32]], 
		["WriteStartAttribute$2", [System.String, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlNodeWriter.prototype, "WriteEscapedText", [
		["WriteEscapedText$0", [System.String]], 
		["WriteEscapedText$1", [System.Xml.XmlDictionaryString]], 
		["WriteEscapedText$2", [System.Array.Of(System.Char), System.Int32, System.Int32]], 
		["WriteEscapedText$3", [System.Array.Of(System.Byte), System.Int32, System.Int32]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlNodeWriter.prototype, "WriteText", [
		["WriteText$0", [System.String]], 
		["WriteText$1", [System.Xml.XmlDictionaryString]], 
		["WriteText$2", [System.Array.Of(System.Char), System.Int32, System.Int32]], 
		["WriteText$3", [System.Array.Of(System.Byte), System.Int32, System.Int32]]
	]);

$asm09.System.Xml.XmlStreamNodeWriter.prototype._ctor = function () {
	$asm09.System.Xml.XmlNodeWriter.prototype._ctor.call(this);
	this.buffer = JSIL.Array.New(System.Byte, 512);
};
$asm09.System.Xml.XmlStreamNodeWriter.prototype.SetOutput = function (stream, ownsStream, encoding) {
	this.stream = stream;
	this.ownsStream = ownsStream;
	this.offset = 0;
	this.encoding = encoding;
};
$asm09.System.Xml.XmlStreamNodeWriter.prototype.get_Stream = function () {
	return this.stream;
};
$asm09.System.Xml.XmlStreamNodeWriter.prototype.set_Stream = function (value) {
	this.stream = value;
};
$asm09.System.Xml.XmlStreamNodeWriter.prototype.get_StreamBuffer = function () {
	return this.buffer;
};
$asm09.System.Xml.XmlStreamNodeWriter.prototype.get_BufferOffset = function () {
	return this.offset;
};
$asm09.System.Xml.XmlStreamNodeWriter.prototype.get_Position = function () {
	return (this.stream.Position + this.offset);
};
$asm09.System.Xml.XmlStreamNodeWriter.prototype.GetByteCount = function (chars) {
	if (this.encoding === null) {
		return $asm09.System.Xml.XmlStreamNodeWriter.UTF8Encoding.GetByteCount$0(chars);
	}
	return this.encoding.GetByteCount$0(chars);
};
$asm09.System.Xml.XmlStreamNodeWriter.prototype.GetBuffer = function (count, /* ref */ offset) {
	var num = this.offset;
	if ((num + count) <= 512) {
		offset.value = num;
	} else {
		this.FlushBuffer();
		offset.value = 0;
	}
	return this.buffer;
};
$asm09.System.Xml.XmlStreamNodeWriter.prototype.Advance = function (count) {
	this.offset += count;
};
$asm09.System.Xml.XmlStreamNodeWriter.prototype.EnsureByte = function () {
	if (this.offset >= 512) {
		this.FlushBuffer();
	}
};
$asm09.System.Xml.XmlStreamNodeWriter.prototype.WriteByte$0 = function (b) {
	this.EnsureByte();
	this.buffer[this.offset++] = b;
};
$asm09.System.Xml.XmlStreamNodeWriter.prototype.WriteByte$1 = function (ch) {
	this.WriteByte$0(ch.charCodeAt(0));
};
$asm09.System.Xml.XmlStreamNodeWriter.prototype.WriteBytes$0 = function (b1, b2) {
	var array = this.buffer;
	var num = this.offset;
	if ((num + 1) >= 512) {
		this.FlushBuffer();
		num = 0;
	}
	array[num] = b1;
	array[(num + 1)] = b2;
	this.offset += 2;
};
$asm09.System.Xml.XmlStreamNodeWriter.prototype.WriteBytes$1 = function (ch1, ch2) {
	this.WriteBytes$0(ch1.charCodeAt(0), ch2.charCodeAt(0));
};
$asm09.System.Xml.XmlStreamNodeWriter.prototype.WriteBytes$2 = function (byteBuffer, byteOffset, byteCount) {
	var dstOffset = new JSIL.Variable(0);
	if (byteCount < 512) {
		var dst = this.GetBuffer(byteCount, /* ref */ dstOffset);
		System.Buffer.BlockCopy(
			byteBuffer, 
			byteOffset, 
			dst, 
			dstOffset.value, 
			byteCount
		);
		this.Advance(byteCount);
		return;
	}
	this.FlushBuffer();
	this.stream.Write(byteBuffer, byteOffset, byteCount);
};
$asm09.System.Xml.XmlStreamNodeWriter.prototype.WriteUTF8Char = JSIL.UntranslatableFunction("System.Void System.Xml.XmlStreamNodeWriter::WriteUTF8Char(System.Int32)");
$asm09.System.Xml.XmlStreamNodeWriter.prototype.WriteUTF8Chars$0 = function (chars, charOffset, charCount) {
	var dstOffset = new JSIL.Variable(0);
	if (charCount < 512) {
		var dst = this.GetBuffer(charCount, /* ref */ dstOffset);
		System.Buffer.BlockCopy(
			chars, 
			charOffset, 
			dst, 
			dstOffset.value, 
			charCount
		);
		this.Advance(charCount);
		return;
	}
	this.FlushBuffer();
	this.stream.Write(chars, charOffset, charCount);
};
$asm09.System.Xml.XmlStreamNodeWriter.prototype.WriteUTF8Chars$1 = JSIL.UntranslatableFunction("System.Void System.Xml.XmlStreamNodeWriter::WriteUTF8Chars(System.String)");
$asm09.System.Xml.XmlStreamNodeWriter.prototype.FlushBuffer = function () {
	if (this.offset !== 0) {
		this.stream.Write(this.buffer, 0, this.offset);
		this.offset = 0;
	}
};
$asm09.System.Xml.XmlStreamNodeWriter.prototype.Flush = function () {
	this.FlushBuffer();
	this.stream.Flush();
};
$asm09.System.Xml.XmlStreamNodeWriter.prototype.Close = function () {
	if (this.stream !== null) {
		if (this.ownsStream) {
			this.stream.Close();
		}
		this.stream = null;
	}
};
JSIL.OverloadedMethod($asm09.System.Xml.XmlStreamNodeWriter.prototype, "WriteByte", [
		["WriteByte$0", [System.Byte]], 
		["WriteByte$1", [System.Char]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlStreamNodeWriter.prototype, "WriteBytes", [
		["WriteBytes$0", [System.Byte, System.Byte]], 
		["WriteBytes$1", [System.Char, System.Char]], 
		["WriteBytes$2", [System.Array.Of(System.Byte), System.Int32, System.Int32]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlStreamNodeWriter.prototype, "WriteUTF8Chars", [
		["WriteUTF8Chars$0", [System.Array.Of(System.Byte), System.Int32, System.Int32]], 
		["WriteUTF8Chars$1", [System.String]]
	]);
JSIL.MakeProperty($asm09.System.Xml.XmlStreamNodeWriter.prototype, "Stream", 
	$asm09.System.Xml.XmlStreamNodeWriter.prototype.get_Stream, $asm09.System.Xml.XmlStreamNodeWriter.prototype.set_Stream);
JSIL.MakeProperty($asm09.System.Xml.XmlStreamNodeWriter.prototype, "StreamBuffer", 
	$asm09.System.Xml.XmlStreamNodeWriter.prototype.get_StreamBuffer, null);
JSIL.MakeProperty($asm09.System.Xml.XmlStreamNodeWriter.prototype, "BufferOffset", 
	$asm09.System.Xml.XmlStreamNodeWriter.prototype.get_BufferOffset, null);
JSIL.MakeProperty($asm09.System.Xml.XmlStreamNodeWriter.prototype, "Position", 
	$asm09.System.Xml.XmlStreamNodeWriter.prototype.get_Position, null);
Object.defineProperty($asm09.System.Xml.XmlStreamNodeWriter, "bufferLength", {
		"value": 512}
);
Object.defineProperty($asm09.System.Xml.XmlStreamNodeWriter, "maxEntityLength", {
		"value": 32}
);
Object.defineProperty($asm09.System.Xml.XmlStreamNodeWriter, "maxBytesPerChar", {
		"value": 3}
);
$asm09.System.Xml.XmlStreamNodeWriter.prototype.stream = null;
$asm09.System.Xml.XmlStreamNodeWriter.prototype.buffer = null;
$asm09.System.Xml.XmlStreamNodeWriter.prototype.offset = 0;
$asm09.System.Xml.XmlStreamNodeWriter.prototype.ownsStream = false;
$asm09.System.Xml.XmlStreamNodeWriter.prototype.encoding = null;
$asm09.System.Xml.XmlStreamNodeWriter.UTF8Encoding = null;
$asm09.System.Xml.XmlStreamNodeWriter._cctor = function () {
	$asm09.System.Xml.XmlStreamNodeWriter.UTF8Encoding = new System.Text.UTF8Encoding(false, true);
};

$asm09.System.Xml.XmlBinaryNodeWriter.prototype._ctor = function () {
	$asm09.System.Xml.XmlStreamNodeWriter.prototype._ctor.call(this);
};
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.SetOutput = function (stream, dictionary, session, ownsStream) {
	this.dictionary = dictionary;
	this.session = session;
	this.inAttribute = false;
	this.inList = false;
	this.attributeValue.Clear();
	this.textNodeOffset = -1;
	$asm09.System.Xml.XmlStreamNodeWriter.prototype.SetOutput.call(this, stream, ownsStream, null);
};
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.WriteNode = function (nodeType) {
	$asm09.System.Xml.XmlStreamNodeWriter.prototype.WriteByte$0.call(this, Math.floor(nodeType));
	this.textNodeOffset = -1;
};
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.WroteAttributeValue = function () {
	if (!(!this.wroteAttributeValue || this.inList)) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$2("XmlOnlySingleValue")]));
	}
	this.wroteAttributeValue = true;
};
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.WriteTextNode = function (nodeType) {
	if (this.inAttribute) {
		this.WroteAttributeValue();
	}
	$asm09.System.Xml.XmlStreamNodeWriter.prototype.WriteByte$0.call(this, Math.floor(nodeType));
	this.textNodeOffset = ($asm09.System.Xml.XmlStreamNodeWriter.prototype.get_BufferOffset.call(this) - 1);
};
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.GetTextNodeBuffer = function (size, /* ref */ offset) {
	if (this.inAttribute) {
		this.WroteAttributeValue();
	}
	var buffer = $asm09.System.Xml.XmlStreamNodeWriter.prototype.GetBuffer.call(this, size, /* ref */ offset);
	this.textNodeOffset = offset.value;
	return buffer;
};
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.WriteTextNodeWithLength = function (nodeType, length) {
	var num = new JSIL.Variable(0);
	var textNodeBuffer = this.GetTextNodeBuffer(5, /* ref */ num);
	if (length < 256) {
		textNodeBuffer[num.value] = Math.floor(nodeType);
		textNodeBuffer[(num.value + 1)] = length;
		$asm09.System.Xml.XmlStreamNodeWriter.prototype.Advance.call(this, 2);
		return;
	}
	if (length < 65536) {
		textNodeBuffer[num.value] = (nodeType + $asm09.System.Xml.XmlBinaryNodeType.Comment);
		textNodeBuffer[(num.value + 1)] = length;
		length = (length >> 8);
		textNodeBuffer[(num.value + 2)] = length;
		$asm09.System.Xml.XmlStreamNodeWriter.prototype.Advance.call(this, 3);
		return;
	}
	textNodeBuffer[num.value] = (nodeType + $asm09.System.Xml.XmlBinaryNodeType.ShortAttribute);
	textNodeBuffer[(num.value + 1)] = length;
	length = (length >> 8);
	textNodeBuffer[(num.value + 2)] = length;
	length = (length >> 8);
	textNodeBuffer[(num.value + 3)] = length;
	length = (length >> 8);
	textNodeBuffer[(num.value + 4)] = length;
	$asm09.System.Xml.XmlStreamNodeWriter.prototype.Advance.call(this, 5);
};
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.WriteTextNodeWithInt64 = function (nodeType, value) {
	var num = new JSIL.Variable(0);
	var textNodeBuffer = this.GetTextNodeBuffer(9, /* ref */ num);
	textNodeBuffer[num.value] = Math.floor(nodeType);
	textNodeBuffer[(num.value + 1)] = value;
	value = (value >> 8);
	textNodeBuffer[(num.value + 2)] = value;
	value = (value >> 8);
	textNodeBuffer[(num.value + 3)] = value;
	value = (value >> 8);
	textNodeBuffer[(num.value + 4)] = value;
	value = (value >> 8);
	textNodeBuffer[(num.value + 5)] = value;
	value = (value >> 8);
	textNodeBuffer[(num.value + 6)] = value;
	value = (value >> 8);
	textNodeBuffer[(num.value + 7)] = value;
	value = (value >> 8);
	textNodeBuffer[(num.value + 8)] = value;
	$asm09.System.Xml.XmlStreamNodeWriter.prototype.Advance.call(this, 9);
};
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.WriteDeclaration = function () {
};
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.WriteStartElement$0 = function (prefix, localName) {
	if (prefix.length === 0) {
		this.WriteNode($asm09.System.Xml.XmlBinaryNodeType.ShortElement);
		this.WriteName(localName);
		return;
	}
	var c = (prefix[0]);
	if (!((prefix.length !== 1) || 
			(c < "a") || (c > "z"))) {
		this.WritePrefixNode($asm09.System.Xml.XmlBinaryNodeType.PrefixElementA, (c - "a"));
		this.WriteName(localName);
		return;
	}
	this.WriteNode($asm09.System.Xml.XmlBinaryNodeType.Element);
	this.WriteName(prefix);
	this.WriteName(localName);
};
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.WritePrefixNode = function (nodeType, ch) {
	this.WriteNode((nodeType + ch));
};
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.WriteStartElement$1 = function (prefix, localName) {
	var key = new JSIL.Variable(0);
	if (!this.TryGetKey(localName, /* ref */ key)) {
		this.WriteStartElement$0(prefix, localName.Value);
		return;
	}
	if (prefix.length === 0) {
		this.WriteNode($asm09.System.Xml.XmlBinaryNodeType.ShortDictionaryElement);
		this.WriteDictionaryString(localName, key.value);
		return;
	}
	var c = (prefix[0]);
	if (!((prefix.length !== 1) || 
			(c < "a") || (c > "z"))) {
		this.WritePrefixNode($asm09.System.Xml.XmlBinaryNodeType.PrefixDictionaryElementA, (c - "a"));
		this.WriteDictionaryString(localName, key.value);
		return;
	}
	this.WriteNode($asm09.System.Xml.XmlBinaryNodeType.DictionaryElement);
	this.WriteName(prefix);
	this.WriteDictionaryString(localName, key.value);
};
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.WriteEndStartElement = function (isEmpty) {
	if (isEmpty) {
		this.WriteEndElement$1();
	}
};
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.WriteEndElement$0 = function (prefix, localName) {
	this.WriteEndElement$1();
};
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.WriteEndElement$1 = function () {
	if (this.textNodeOffset !== -1) {
		var streamBuffer = $asm09.System.Xml.XmlStreamNodeWriter.prototype.get_StreamBuffer.call(this);
		streamBuffer[this.textNodeOffset] = (streamBuffer[this.textNodeOffset] + $asm09.System.Xml.XmlBinaryNodeType.EndElement);
		this.textNodeOffset = -1;
		return;
	}
	this.WriteNode($asm09.System.Xml.XmlBinaryNodeType.EndElement);
};
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.WriteStartAttribute$0 = function (prefix, localName) {
	if (prefix.length === 0) {
		this.WriteNode($asm09.System.Xml.XmlBinaryNodeType.ShortAttribute);
		this.WriteName(localName);
	} else {
		var c = (prefix[0]);
		if (!((prefix.length !== 1) || 
				(c < "a") || (c > "z"))) {
			this.WritePrefixNode($asm09.System.Xml.XmlBinaryNodeType.PrefixAttributeA, (c - "a"));
			this.WriteName(localName);
		} else {
			this.WriteNode($asm09.System.Xml.XmlBinaryNodeType.Attribute);
			this.WriteName(prefix);
			this.WriteName(localName);
		}
	}
	this.inAttribute = true;
	this.wroteAttributeValue = false;
};
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.WriteStartAttribute$1 = function (prefix, localName) {
	var key = new JSIL.Variable(0);
	if (!this.TryGetKey(localName, /* ref */ key)) {
		this.WriteStartAttribute$0(prefix, localName.Value);
		return;
	}
	if (prefix.length === 0) {
		this.WriteNode($asm09.System.Xml.XmlBinaryNodeType.ShortDictionaryAttribute);
		this.WriteDictionaryString(localName, key.value);
	} else {
		var c = (prefix[0]);
		if (!((prefix.length !== 1) || 
				(c < "a") || (c > "z"))) {
			this.WritePrefixNode($asm09.System.Xml.XmlBinaryNodeType.PrefixDictionaryAttributeA, (c - "a"));
			this.WriteDictionaryString(localName, key.value);
		} else {
			this.WriteNode($asm09.System.Xml.XmlBinaryNodeType.DictionaryAttribute);
			this.WriteName(prefix);
			this.WriteDictionaryString(localName, key.value);
		}
	}
	this.inAttribute = true;
	this.wroteAttributeValue = false;
};
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.WriteEndAttribute = function () {
	this.inAttribute = false;
	if (!this.wroteAttributeValue) {
		this.attributeValue.WriteTo(this);
	}
	this.textNodeOffset = -1;
};
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.WriteXmlnsAttribute$0 = function (prefix, ns) {
	if (prefix.length === 0) {
		this.WriteNode($asm09.System.Xml.XmlBinaryNodeType.ShortXmlnsAttribute);
		this.WriteName(ns);
		return;
	}
	this.WriteNode($asm09.System.Xml.XmlBinaryNodeType.XmlnsAttribute);
	this.WriteName(prefix);
	this.WriteName(ns);
};
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.WriteXmlnsAttribute$1 = function (prefix, ns) {
	var key = new JSIL.Variable(0);
	if (!this.TryGetKey(ns, /* ref */ key)) {
		this.WriteXmlnsAttribute$0(prefix, ns.Value);
		return;
	}
	if (prefix.length === 0) {
		this.WriteNode($asm09.System.Xml.XmlBinaryNodeType.ShortDictionaryXmlnsAttribute);
		this.WriteDictionaryString(ns, key.value);
		return;
	}
	this.WriteNode($asm09.System.Xml.XmlBinaryNodeType.DictionaryXmlnsAttribute);
	this.WriteName(prefix);
	this.WriteDictionaryString(ns, key.value);
};
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.TryGetKey = function (s, /* ref */ key) {
	var xmlDictionaryString = new JSIL.Variable(null), num = new JSIL.Variable(0);
	key.value = -1;
	if (s.Dictionary === this.dictionary) {
		key.value = (s.Key * 2);
		return true;
	}
	if (!((this.dictionary === null) || !this.dictionary.IXmlDictionary_TryLookup$2(s, /* ref */ xmlDictionaryString))) {
		key.value = (xmlDictionaryString.value.Key * 2);
		return true;
	}
	if (this.session === null) {
		return false;
	}
	if (!(this.session.TryLookup(s, /* ref */ num) || this.session.TryAdd(s, /* ref */ num))) {
		return false;
	}
	key.value = ((num.value * 2) + 1);
	return true;
};
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.WriteDictionaryString = function (s, key) {
	this.WriteMultiByteInt32(key);
};
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.WriteName = JSIL.UntranslatableFunction("System.Void System.Xml.XmlBinaryNodeWriter::WriteName(System.String)");
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.WriteMultiByteInt32 = function (i) {
	var num = new JSIL.Variable(0);
	var buffer = $asm09.System.Xml.XmlStreamNodeWriter.prototype.GetBuffer.call(this, 5, /* ref */ num);
	var num2 = num.value;
__loop0__: 
	while ((i & -128) !== 0) {
		buffer[num.value++] = ((i & 127) | 128);
		i = (i >> 7);
	}
	buffer[num.value++] = i;
	$asm09.System.Xml.XmlStreamNodeWriter.prototype.Advance.call(this, (num.value - num2));
};
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.WriteComment = function (value) {
	this.WriteNode($asm09.System.Xml.XmlBinaryNodeType.Comment);
	this.WriteName(value);
};
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.WriteCData = function (value) {
	this.WriteText$0(value);
};
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.WriteEmptyText = function () {
	this.WriteTextNode($asm09.System.Xml.XmlBinaryNodeType.EmptyText);
};
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.WriteBoolText = function (value) {
	if (value) {
		this.WriteTextNode($asm09.System.Xml.XmlBinaryNodeType.TrueText);
		return;
	}
	this.WriteTextNode($asm09.System.Xml.XmlBinaryNodeType.FalseText);
};
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.WriteInt32Text = function (value) {
	var num = new JSIL.Variable(0), num2 = new JSIL.Variable(0), num3 = new JSIL.Variable(0);
	if (!((value < -128) || (value >= 128))) {
		if (value === 0) {
			this.WriteTextNode($asm09.System.Xml.XmlBinaryNodeType.ZeroText);
			return;
		}
		if (value === 1) {
			this.WriteTextNode($asm09.System.Xml.XmlBinaryNodeType.OneText);
			return;
		}
		var textNodeBuffer = this.GetTextNodeBuffer(2, /* ref */ num);
		textNodeBuffer[num.value] = 136;
		textNodeBuffer[(num.value + 1)] = value;
		$asm09.System.Xml.XmlStreamNodeWriter.prototype.Advance.call(this, 2);
		return;
	} else {
		if (!((value < -32768) || (value >= 32768))) {
			var textNodeBuffer2 = this.GetTextNodeBuffer(3, /* ref */ num2);
			textNodeBuffer2[num2.value] = 138;
			textNodeBuffer2[(num2.value + 1)] = value;
			value = (value >> 8);
			textNodeBuffer2[(num2.value + 2)] = value;
			$asm09.System.Xml.XmlStreamNodeWriter.prototype.Advance.call(this, 3);
			return;
		}
		var textNodeBuffer3 = this.GetTextNodeBuffer(5, /* ref */ num3);
		textNodeBuffer3[num3.value] = 140;
		textNodeBuffer3[(num3.value + 1)] = value;
		value = (value >> 8);
		textNodeBuffer3[(num3.value + 2)] = value;
		value = (value >> 8);
		textNodeBuffer3[(num3.value + 3)] = value;
		value = (value >> 8);
		textNodeBuffer3[(num3.value + 4)] = value;
		$asm09.System.Xml.XmlStreamNodeWriter.prototype.Advance.call(this, 5);
		return;
	}
};
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.WriteInt64Text = function (value) {
	if (!((value < -2147483648) || (value > 2147483647))) {
		this.WriteInt32Text(value);
		return;
	}
	this.WriteTextNodeWithInt64($asm09.System.Xml.XmlBinaryNodeType.Int64Text, value);
};
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.WriteUInt64Text = function (value) {
	if (value <= 9223372036854775807) {
		this.WriteInt64Text(value);
		return;
	}
	this.WriteTextNodeWithInt64($asm09.System.Xml.XmlBinaryNodeType.UInt64Text, value);
};
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.WriteInt64 = function (value) {
	var num = new JSIL.Variable(0);
	var buffer = $asm09.System.Xml.XmlStreamNodeWriter.prototype.GetBuffer.call(this, 8, /* ref */ num);
	buffer[num.value] = value;
	value = (value >> 8);
	buffer[(num.value + 1)] = value;
	value = (value >> 8);
	buffer[(num.value + 2)] = value;
	value = (value >> 8);
	buffer[(num.value + 3)] = value;
	value = (value >> 8);
	buffer[(num.value + 4)] = value;
	value = (value >> 8);
	buffer[(num.value + 5)] = value;
	value = (value >> 8);
	buffer[(num.value + 6)] = value;
	value = (value >> 8);
	buffer[(num.value + 7)] = value;
	$asm09.System.Xml.XmlStreamNodeWriter.prototype.Advance.call(this, 8);
};
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.WriteBase64Text = function (trailBytes, trailByteCount, base64Buffer, base64Offset, base64Count) {
	var num2 = new JSIL.Variable(0);
	if (this.inAttribute) {
		this.attributeValue.WriteBase64Text(
			trailBytes, 
			trailByteCount, 
			base64Buffer, 
			base64Offset, 
			base64Count
		);
		return;
	}
	var num = (trailByteCount + base64Count);
	if (num > 0) {
		this.WriteTextNodeWithLength($asm09.System.Xml.XmlBinaryNodeType.Bytes8Text, num);
		if (trailByteCount > 0) {
			var buffer = $asm09.System.Xml.XmlStreamNodeWriter.prototype.GetBuffer.call(this, trailByteCount, /* ref */ num2);
		__loop0__: 
			for (var i = 0; i < trailByteCount; ++i) {
				buffer[(num2.value + i)] = trailBytes[i];
			}
			$asm09.System.Xml.XmlStreamNodeWriter.prototype.Advance.call(this, trailByteCount);
		}
		if (base64Count > 0) {
			$asm09.System.Xml.XmlStreamNodeWriter.prototype.WriteBytes$2.call(this, base64Buffer, base64Offset, base64Count);
			return;
		}
	} else {
		this.WriteEmptyText();
	}
};
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.WriteText$0 = function (value) {
	var key = new JSIL.Variable(0);
	if (this.inAttribute) {
		this.attributeValue.WriteText$1(value);
		return;
	}
	if (!this.TryGetKey(value, /* ref */ key)) {
		this.WriteText$0(value.Value);
		return;
	}
	this.WriteTextNode($asm09.System.Xml.XmlBinaryNodeType.DictionaryText);
	this.WriteDictionaryString(value, key.value);
};
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.WriteText$1 = JSIL.UntranslatableFunction("System.Void System.Xml.XmlBinaryNodeWriter::WriteText(System.String)");
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.WriteText$2 = JSIL.UntranslatableFunction("System.Void System.Xml.XmlBinaryNodeWriter::WriteText(System.Char[],System.Int32,System.Int32)");
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.WriteText$3 = function (chars, charOffset, charCount) {
	this.WriteTextNodeWithLength($asm09.System.Xml.XmlBinaryNodeType.Chars8Text, charCount);
	$asm09.System.Xml.XmlStreamNodeWriter.prototype.WriteBytes$2.call(this, chars, charOffset, charCount);
};
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.WriteEscapedText$0 = function (value) {
	this.WriteText$0(value);
};
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.WriteEscapedText$1 = function (value) {
	this.WriteText$1(value);
};
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.WriteEscapedText$2 = function (chars, offset, count) {
	this.WriteText$2(chars, offset, count);
};
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.WriteEscapedText$3 = function (chars, offset, count) {
	this.WriteText$3(chars, offset, count);
};
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.WriteCharEntity = function (ch) {
	var surrogateChar = new $asm09.System.Text.SurrogateChar();
	if (ch > 65535) {
		surrogateChar._ctor$0(ch);
		var chars = JSIL.Array.New(System.Char, [surrogateChar.HighChar, surrogateChar.LowChar]);
		this.WriteText$2(chars, 0, 2);
		return;
	}
	var chars2 = JSIL.Array.New(System.Char, [String.fromCharCode(ch)]);
	this.WriteText$2(chars2, 0, 1);
};
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.WriteFloatText = JSIL.UntranslatableFunction("System.Void System.Xml.XmlBinaryNodeWriter::WriteFloatText(System.Single)");
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.WriteDoubleText = JSIL.UntranslatableFunction("System.Void System.Xml.XmlBinaryNodeWriter::WriteDoubleText(System.Double)");
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.WriteDecimalText = JSIL.UntranslatableFunction("System.Void System.Xml.XmlBinaryNodeWriter::WriteDecimalText(System.Decimal)");
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.WriteDateTimeText = function (dt) {
	this.WriteTextNodeWithInt64($asm09.System.Xml.XmlBinaryNodeType.DateTimeText, $asm09.System.Xml.XmlBinaryNodeWriter.ToBinary(dt));
};
$asm09.System.Xml.XmlBinaryNodeWriter.ToBinary = function (dt) {
	var num = 0;
	switch (Number(dt.Kind)) {
		case 0: 
			num = dt.Ticks;
			break;
		case 1: 
			num = (num | 4611686018427387904);
			num = (num | dt.Ticks);
			break;
		case 2: 
			num = (num | -9223372036854775808);
			num = (num | dt.ToUniversalTime().Ticks);
			break;
	}
	return num;
};
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.WriteUniqueIdText = function (value) {
	var num = new JSIL.Variable(0);
	if (value.IsGuid) {
		var textNodeBuffer = this.GetTextNodeBuffer(17, /* ref */ num);
		textNodeBuffer[num.value] = 172;
		value.TryGetGuid$1(textNodeBuffer, (num.value + 1));
		$asm09.System.Xml.XmlStreamNodeWriter.prototype.Advance.call(this, 17);
		return;
	}
	this.WriteText$0(value.toString());
};
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.WriteGuidText = function (guid) {
	var num = new JSIL.Variable(0);
	var textNodeBuffer = this.GetTextNodeBuffer(17, /* ref */ num);
	textNodeBuffer[num.value] = 176;
	System.Buffer.BlockCopy(
		guid.ToByteArray(), 
		0, 
		textNodeBuffer, 
		(num.value + 1), 
		16
	);
	$asm09.System.Xml.XmlStreamNodeWriter.prototype.Advance.call(this, 17);
};
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.WriteTimeSpanText = function (value) {
	this.WriteTextNodeWithInt64($asm09.System.Xml.XmlBinaryNodeType.TimeSpanText, value.Ticks);
};
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.WriteStartListText = function () {
	this.inList = true;
	this.WriteNode($asm09.System.Xml.XmlBinaryNodeType.StartListText);
};
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.WriteListSeparator = function () {
};
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.WriteEndListText = function () {
	this.inList = false;
	this.wroteAttributeValue = true;
	this.WriteNode($asm09.System.Xml.XmlBinaryNodeType.EndListText);
};
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.WriteArrayNode = function () {
	this.WriteNode($asm09.System.Xml.XmlBinaryNodeType.Array);
};
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.WriteArrayInfo = function (nodeType, count) {
	this.WriteNode(nodeType);
	this.WriteMultiByteInt32(count);
};
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.WriteDateTimeArray = function (array, offset, count) {
	this.WriteArrayInfo($asm09.System.Xml.XmlBinaryNodeType.DateTimeTextWithEndElement, count);
__loop0__: 
	for (var i = 0; i < count; ++i) {
		this.WriteInt64($asm09.System.Xml.XmlBinaryNodeWriter.ToBinary(array[(offset + i)].MemberwiseClone()));
	}
};
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.WriteGuidArray = function (array, offset, count) {
	this.WriteArrayInfo($asm09.System.Xml.XmlBinaryNodeType.GuidTextWithEndElement, count);
__loop0__: 
	for (var i = 0; i < count; ++i) {
		var byteBuffer = array[(offset + i)].ToByteArray();
		$asm09.System.Xml.XmlStreamNodeWriter.prototype.WriteBytes$2.call(this, byteBuffer, 0, 16);
	}
};
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.WriteTimeSpanArray = function (array, offset, count) {
	this.WriteArrayInfo($asm09.System.Xml.XmlBinaryNodeType.TimeSpanTextWithEndElement, count);
__loop0__: 
	for (var i = 0; i < count; ++i) {
		this.WriteInt64(array[(offset + i)].Ticks);
	}
};
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.WriteQualifiedName = function (prefix, localName) {
	var key = new JSIL.Variable(0);
	if (prefix.length === 0) {
		this.WriteText$1(localName);
		return;
	}
	var c = (prefix[0]);
	if (!((prefix.length !== 1) || 
			(c < "a") || 
			(c > "z") || !this.TryGetKey(localName, /* ref */ key))) {
		this.WriteTextNode($asm09.System.Xml.XmlBinaryNodeType.QNameDictionaryText);
		$asm09.System.Xml.XmlStreamNodeWriter.prototype.WriteByte$0.call(this, (c - "a"));
		this.WriteDictionaryString(localName, key.value);
		return;
	}
	this.WriteText$0(prefix);
	this.WriteText$0(":");
	this.WriteText$1(localName);
};
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.FlushBuffer = function () {
	$asm09.System.Xml.XmlStreamNodeWriter.prototype.FlushBuffer.call(this);
	this.textNodeOffset = -1;
};
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.Close = function () {
	$asm09.System.Xml.XmlStreamNodeWriter.prototype.Close.call(this);
	this.attributeValue.Clear();
};
JSIL.OverloadedMethod($asm09.System.Xml.XmlBinaryNodeWriter.prototype, "WriteStartElement", [
		["WriteStartElement$0", [System.String, System.String]], 
		["WriteStartElement$1", [System.String, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlBinaryNodeWriter.prototype, "WriteEndElement", [
		["WriteEndElement$0", [System.String, System.String]], 
		["WriteEndElement$1", []]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlBinaryNodeWriter.prototype, "WriteStartAttribute", [
		["WriteStartAttribute$0", [System.String, System.String]], 
		["WriteStartAttribute$1", [System.String, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlBinaryNodeWriter.prototype, "WriteXmlnsAttribute", [
		["WriteXmlnsAttribute$0", [System.String, System.String]], 
		["WriteXmlnsAttribute$1", [System.String, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlBinaryNodeWriter.prototype, "WriteText", [
		["WriteText$0", [System.Xml.XmlDictionaryString]], 
		["WriteText$1", [System.String]], 
		["WriteText$2", [System.Array.Of(System.Char), System.Int32, System.Int32]], 
		["WriteText$3", [System.Array.Of(System.Byte), System.Int32, System.Int32]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlBinaryNodeWriter.prototype, "WriteEscapedText", [
		["WriteEscapedText$0", [System.String]], 
		["WriteEscapedText$1", [System.Xml.XmlDictionaryString]], 
		["WriteEscapedText$2", [System.Array.Of(System.Char), System.Int32, System.Int32]], 
		["WriteEscapedText$3", [System.Array.Of(System.Byte), System.Int32, System.Int32]]
	]);
Object.defineProperty($asm09.System.Xml.XmlBinaryNodeWriter, "maxBytesPerChar", {
		"value": 3}
);
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.dictionary = null;
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.session = null;
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.inAttribute = false;
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.inList = false;
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.wroteAttributeValue = false;
$asm09.System.Xml.XmlBinaryNodeWriter.prototype.textNodeOffset = 0;

$asm09.System.Xml.XmlBinaryNodeWriter.AttributeValue.prototype.Clear = function () {
	this.captureText = null;
	this.captureXText = null;
	this.captureStream = null;
};
$asm09.System.Xml.XmlBinaryNodeWriter.AttributeValue.prototype.WriteText$0 = function (s) {
	if (this.captureStream !== null) {
		this.captureText = $asm09.System.Xml.XmlConverter.Base64Encoding.GetString$1(this.captureStream.GetBuffer(), 0, this.captureStream.Length);
		this.captureStream = null;
	}
	if (this.captureXText !== null) {
		this.captureText = this.captureXText.Value;
		this.captureXText = null;
	}
	if (!((this.captureText !== null) && (this.captureText.length !== 0))) {
		this.captureText = s;
		return;
	}
	this.captureText = ((this.captureText + s));
};
$asm09.System.Xml.XmlBinaryNodeWriter.AttributeValue.prototype.WriteText$1 = function (s) {
	if (!((this.captureText === null) && (this.captureStream === null))) {
		this.WriteText$0(s.Value);
		return;
	}
	this.captureXText = s;
};
$asm09.System.Xml.XmlBinaryNodeWriter.AttributeValue.prototype.WriteBase64Text = function (trailBytes, trailByteCount, buffer, offset, count) {
	if (!((this.captureText === null) && (this.captureXText === null))) {
		if (trailByteCount > 0) {
			this.WriteText$0($asm09.System.Xml.XmlConverter.Base64Encoding.GetString$1(trailBytes, 0, trailByteCount));
		}
		this.WriteText$0($asm09.System.Xml.XmlConverter.Base64Encoding.GetString$1(buffer, offset, count));
		return;
	}
	if (this.captureStream === null) {
		this.captureStream = JSIL.New(System.IO.MemoryStream, "_ctor$0", []);
	}
	if (trailByteCount > 0) {
		this.captureStream.Write(trailBytes, 0, trailByteCount);
	}
	this.captureStream.Write(buffer, offset, count);
};
$asm09.System.Xml.XmlBinaryNodeWriter.AttributeValue.prototype.WriteTo = function (writer) {
	if (this.captureText !== null) {
		writer.WriteText$0(this.captureText);
		this.captureText = null;
		return;
	}
	if (this.captureXText !== null) {
		writer.WriteText$1(this.captureXText);
		this.captureXText = null;
		return;
	}
	if (this.captureStream !== null) {
		writer.WriteBase64Text(
			null, 
			0, 
			this.captureStream.GetBuffer(), 
			0, 
			this.captureStream.Length
		);
		this.captureStream = null;
		return;
	}
	writer.WriteEmptyText();
};
JSIL.OverloadedMethod($asm09.System.Xml.XmlBinaryNodeWriter.AttributeValue.prototype, "WriteText", [
		["WriteText$0", [System.String]], 
		["WriteText$1", [System.Xml.XmlDictionaryString]]
	]);
$asm09.System.Xml.XmlBinaryNodeWriter.AttributeValue.prototype.captureText = null;
$asm09.System.Xml.XmlBinaryNodeWriter.AttributeValue.prototype.captureXText = null;
$asm09.System.Xml.XmlBinaryNodeWriter.AttributeValue.prototype.captureStream = null;

$asm09.System.Xml.XmlBinaryWriter.prototype.SetOutput = function (stream, dictionary, session, ownsStream) {
	if (stream === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentNullException, "_ctor$1", ["stream"]));
	}
	if (this.writer === null) {
		this.writer = new $asm09.System.Xml.XmlBinaryNodeWriter();
	}
	this.writer.SetOutput(stream, dictionary, session, ownsStream);
	$asm09.System.Xml.XmlBaseWriter.prototype.SetOutput.call(this, this.writer);
};
$asm09.System.Xml.XmlBinaryWriter.prototype.WriteTextNode = function (reader, attribute) {
	var value = new JSIL.Variable(null), count = 0, count2 = 0;
	var valueType = reader.ValueType;
	if (valueType === System.String) {
		if (reader.TryGetValueAsDictionaryString(/* ref */ value)) {
			this.WriteString(value.value);
		} else if (reader.CanReadValueChunk) {
			if (this.chars === null) {
				this.chars = JSIL.Array.New(System.Char, 256);
			}
		__loop1__: 
			while ((count = reader.ReadValueChunk(this.chars, 0, this.chars.length)) > 0) {
				this.WriteChars(this.chars, 0, count);
			}
		} else {
			this.WriteString(reader.Value);
		}
		if (!attribute) {
			reader.Read();
			return;
		}
	} else if (valueType === System.Array.Of(System.Byte)) {
		if (reader.CanReadBinaryContent) {
			if (this.bytes === null) {
				this.bytes = JSIL.Array.New(System.Byte, 384);
			}
		__loop0__: 
			while ((count2 = reader.ReadValueAsBase64(this.bytes, 0, this.bytes.length)) > 0) {
				this.WriteBase64(this.bytes, 0, count2);
			}
		} else {
			this.WriteString(reader.Value);
		}
		if (!attribute) {
			reader.Read();
			return;
		}
	} else {
		if (valueType === System.Int32) {
			this.WriteValue$7(reader.ReadContentAsInt());
			return;
		}
		if (valueType === System.Int64) {
			this.WriteValue$8(reader.ReadContentAsLong());
			return;
		}
		if (valueType === System.Boolean) {
			this.WriteValue$2(reader.ReadContentAsBoolean());
			return;
		}
		if (valueType === System.Double) {
			this.WriteValue$4(reader.ReadContentAsDouble());
			return;
		}
		if (valueType === System.DateTime) {
			this.WriteValue$3(reader.ReadContentAsDateTime().MemberwiseClone());
			return;
		}
		if (valueType === System.Single) {
			this.WriteValue$5(reader.ReadContentAsFloat());
			return;
		}
		if (valueType === System.Decimal) {
			this.WriteValue$6(reader.ReadContentAsDecimal().MemberwiseClone());
			return;
		}
		if (valueType === System.Xml.UniqueId) {
			this.WriteValue$2(reader.ReadContentAsUniqueId());
			return;
		}
		if (valueType === System.Guid) {
			this.WriteValue$3(reader.ReadContentAsGuid().MemberwiseClone());
			return;
		}
		if (valueType === System.TimeSpan) {
			this.WriteValue$4(reader.ReadContentAsTimeSpan().MemberwiseClone());
			return;
		}
		this.WriteValue$0(reader.ReadContentAsObject());
	}
};
$asm09.System.Xml.XmlBinaryWriter.prototype.WriteStartArray$0 = function (prefix, localName, namespaceUri, count) {
	$asm09.System.Xml.XmlBaseWriter.prototype.StartArray.call(this, count);
	this.writer.WriteArrayNode();
	this.WriteStartElement$1(prefix, localName, namespaceUri);
	this.WriteEndElement();
};
$asm09.System.Xml.XmlBinaryWriter.prototype.WriteStartArray$1 = function (prefix, localName, namespaceUri, count) {
	$asm09.System.Xml.XmlBaseWriter.prototype.StartArray.call(this, count);
	this.writer.WriteArrayNode();
	this.WriteStartElement$1(prefix, localName, namespaceUri);
	this.WriteEndElement();
};
$asm09.System.Xml.XmlBinaryWriter.prototype.WriteEndArray = function () {
	$asm09.System.Xml.XmlBaseWriter.prototype.EndArray.call(this);
};
$asm09.System.Xml.XmlBinaryWriter.prototype.CheckArray = function (array, offset, count) {
	if (array === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentNullException, "_ctor$1", ["array"]));
	}
	if (offset < 0) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["offset", $asm09.System.Runtime.Serialization.SR.GetString$2("ValueMustBeNonNegative")]));
	}
	if (offset > array.length) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["offset", $asm09.System.Runtime.Serialization.SR.GetString$0("OffsetExceedsBufferSize", [array.length])]));
	}
	if (count < 0) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["count", $asm09.System.Runtime.Serialization.SR.GetString$2("ValueMustBeNonNegative")]));
	}
	if (count > (array.length - offset)) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["count", $asm09.System.Runtime.Serialization.SR.GetString$0("SizeExceedsRemainingBufferSpace", [(array.length - offset)])]));
	}
};
$asm09.System.Xml.XmlBinaryWriter.prototype.WriteArray$0 = JSIL.UntranslatableFunction("System.Void System.Xml.XmlBinaryWriter::WriteArray(System.String,System.String,System.String,System.Boolean[],System.Int32,System.Int32)");
$asm09.System.Xml.XmlBinaryWriter.prototype.WriteArray$1 = JSIL.UntranslatableFunction("System.Void System.Xml.XmlBinaryWriter::WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Boolean[],System.Int32,System.Int32)");
$asm09.System.Xml.XmlBinaryWriter.prototype.WriteArray$2 = JSIL.UntranslatableFunction("System.Void System.Xml.XmlBinaryWriter::WriteArray(System.String,System.String,System.String,System.Int16[],System.Int32,System.Int32)");
$asm09.System.Xml.XmlBinaryWriter.prototype.WriteArray$3 = JSIL.UntranslatableFunction("System.Void System.Xml.XmlBinaryWriter::WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int16[],System.Int32,System.Int32)");
$asm09.System.Xml.XmlBinaryWriter.prototype.WriteArray$4 = JSIL.UntranslatableFunction("System.Void System.Xml.XmlBinaryWriter::WriteArray(System.String,System.String,System.String,System.Int32[],System.Int32,System.Int32)");
$asm09.System.Xml.XmlBinaryWriter.prototype.WriteArray$5 = JSIL.UntranslatableFunction("System.Void System.Xml.XmlBinaryWriter::WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int32[],System.Int32,System.Int32)");
$asm09.System.Xml.XmlBinaryWriter.prototype.WriteArray$6 = JSIL.UntranslatableFunction("System.Void System.Xml.XmlBinaryWriter::WriteArray(System.String,System.String,System.String,System.Int64[],System.Int32,System.Int32)");
$asm09.System.Xml.XmlBinaryWriter.prototype.WriteArray$7 = JSIL.UntranslatableFunction("System.Void System.Xml.XmlBinaryWriter::WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Int64[],System.Int32,System.Int32)");
$asm09.System.Xml.XmlBinaryWriter.prototype.WriteArray$8 = JSIL.UntranslatableFunction("System.Void System.Xml.XmlBinaryWriter::WriteArray(System.String,System.String,System.String,System.Single[],System.Int32,System.Int32)");
$asm09.System.Xml.XmlBinaryWriter.prototype.WriteArray$9 = JSIL.UntranslatableFunction("System.Void System.Xml.XmlBinaryWriter::WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Single[],System.Int32,System.Int32)");
$asm09.System.Xml.XmlBinaryWriter.prototype.WriteArray$10 = JSIL.UntranslatableFunction("System.Void System.Xml.XmlBinaryWriter::WriteArray(System.String,System.String,System.String,System.Double[],System.Int32,System.Int32)");
$asm09.System.Xml.XmlBinaryWriter.prototype.WriteArray$11 = JSIL.UntranslatableFunction("System.Void System.Xml.XmlBinaryWriter::WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Double[],System.Int32,System.Int32)");
$asm09.System.Xml.XmlBinaryWriter.prototype.WriteArray$12 = JSIL.UntranslatableFunction("System.Void System.Xml.XmlBinaryWriter::WriteArray(System.String,System.String,System.String,System.Decimal[],System.Int32,System.Int32)");
$asm09.System.Xml.XmlBinaryWriter.prototype.WriteArray$13 = JSIL.UntranslatableFunction("System.Void System.Xml.XmlBinaryWriter::WriteArray(System.String,System.Xml.XmlDictionaryString,System.Xml.XmlDictionaryString,System.Decimal[],System.Int32,System.Int32)");
$asm09.System.Xml.XmlBinaryWriter.prototype.WriteArray$14 = function (prefix, localName, namespaceUri, array, offset, count) {
	this.CheckArray(array, offset, count);
	if (count > 0) {
		this.WriteStartArray$0(prefix, localName, namespaceUri, count);
		this.writer.WriteDateTimeArray(array, offset, count);
		this.WriteEndArray();
	}
};
$asm09.System.Xml.XmlBinaryWriter.prototype.WriteArray$15 = function (prefix, localName, namespaceUri, array, offset, count) {
	this.CheckArray(array, offset, count);
	if (count > 0) {
		this.WriteStartArray$1(prefix, localName, namespaceUri, count);
		this.writer.WriteDateTimeArray(array, offset, count);
		this.WriteEndArray();
	}
};
$asm09.System.Xml.XmlBinaryWriter.prototype.WriteArray$16 = function (prefix, localName, namespaceUri, array, offset, count) {
	this.CheckArray(array, offset, count);
	if (count > 0) {
		this.WriteStartArray$0(prefix, localName, namespaceUri, count);
		this.writer.WriteGuidArray(array, offset, count);
		this.WriteEndArray();
	}
};
$asm09.System.Xml.XmlBinaryWriter.prototype.WriteArray$17 = function (prefix, localName, namespaceUri, array, offset, count) {
	this.CheckArray(array, offset, count);
	if (count > 0) {
		this.WriteStartArray$1(prefix, localName, namespaceUri, count);
		this.writer.WriteGuidArray(array, offset, count);
		this.WriteEndArray();
	}
};
$asm09.System.Xml.XmlBinaryWriter.prototype.WriteArray$18 = function (prefix, localName, namespaceUri, array, offset, count) {
	this.CheckArray(array, offset, count);
	if (count > 0) {
		this.WriteStartArray$0(prefix, localName, namespaceUri, count);
		this.writer.WriteTimeSpanArray(array, offset, count);
		this.WriteEndArray();
	}
};
$asm09.System.Xml.XmlBinaryWriter.prototype.WriteArray$19 = function (prefix, localName, namespaceUri, array, offset, count) {
	this.CheckArray(array, offset, count);
	if (count > 0) {
		this.WriteStartArray$1(prefix, localName, namespaceUri, count);
		this.writer.WriteTimeSpanArray(array, offset, count);
		this.WriteEndArray();
	}
};
$asm09.System.Xml.XmlBinaryWriter.prototype._ctor = function () {
	$asm09.System.Xml.XmlBaseWriter.prototype._ctor.call(this);
};
JSIL.OverloadedMethod($asm09.System.Xml.XmlBinaryWriter.prototype, "WriteStartArray", [
		["WriteStartArray$0", [System.String, System.String, System.String, System.Int32]], 
		["WriteStartArray$1", [System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Int32]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlBinaryWriter.prototype, "WriteArray", [
		["WriteArray$0", [System.String, System.String, System.String, System.Array.Of(System.Boolean), System.Int32, System.Int32]], 
		["WriteArray$1", [System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Array.Of(System.Boolean), System.Int32, System.Int32]], 
		["WriteArray$2", [System.String, System.String, System.String, System.Array.Of(System.Int16), System.Int32, System.Int32]], 
		["WriteArray$3", [System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Array.Of(System.Int16), System.Int32, System.Int32]], 
		["WriteArray$4", [System.String, System.String, System.String, System.Array.Of(System.Int32), System.Int32, System.Int32]], 
		["WriteArray$5", [System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Array.Of(System.Int32), System.Int32, System.Int32]], 
		["WriteArray$6", [System.String, System.String, System.String, System.Array.Of(System.Int64), System.Int32, System.Int32]], 
		["WriteArray$7", [System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Array.Of(System.Int64), System.Int32, System.Int32]], 
		["WriteArray$8", [System.String, System.String, System.String, System.Array.Of(System.Single), System.Int32, System.Int32]], 
		["WriteArray$9", [System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Array.Of(System.Single), System.Int32, System.Int32]], 
		["WriteArray$10", [System.String, System.String, System.String, System.Array.Of(System.Double), System.Int32, System.Int32]], 
		["WriteArray$11", [System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Array.Of(System.Double), System.Int32, System.Int32]], 
		["WriteArray$12", [System.String, System.String, System.String, System.Array.Of(System.Decimal), System.Int32, System.Int32]], 
		["WriteArray$13", [System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Array.Of(System.Decimal), System.Int32, System.Int32]], 
		["WriteArray$14", [System.String, System.String, System.String, System.Array.Of(System.DateTime), System.Int32, System.Int32]], 
		["WriteArray$15", [System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Array.Of(System.DateTime), System.Int32, System.Int32]], 
		["WriteArray$16", [System.String, System.String, System.String, System.Array.Of(System.Guid), System.Int32, System.Int32]], 
		["WriteArray$17", [System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Array.Of(System.Guid), System.Int32, System.Int32]], 
		["WriteArray$18", [System.String, System.String, System.String, System.Array.Of(System.TimeSpan), System.Int32, System.Int32]], 
		["WriteArray$19", [System.String, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString, System.Array.Of(System.TimeSpan), System.Int32, System.Int32]]
	]);
$asm09.System.Xml.XmlBinaryWriter.prototype.writer = null;
$asm09.System.Xml.XmlBinaryWriter.prototype.chars = null;
$asm09.System.Xml.XmlBinaryWriter.prototype.bytes = null;

System.Xml.XmlBinaryWriterSession.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
	this.nextKey = 0;
	this.maps = new ($asm09.System.Xml.XmlBinaryWriterSession.PriorityDictionary$b2.Of(System.Xml.IXmlDictionary, $asm09.System.Xml.XmlBinaryWriterSession.IntArray)) ();
	this.strings = new ($asm09.System.Xml.XmlBinaryWriterSession.PriorityDictionary$b2.Of(System.String, System.Int32)) ();
};
System.Xml.XmlBinaryWriterSession.prototype.TryAdd = function (value, /* ref */ key) {
	if (value === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull("value");
	}
	if (!this.maps.TryGetValue(value.Dictionary, /* ref */ intArray)) {
		key.value = this.Add(value.Value);
		var intArray = new JSIL.Variable(this.AddKeys(value.Dictionary, (value.Key + 1)));
		intArray.value.set_Item(value.Key, (key.value + 1));
		return true;
	}
	key.value = (intArray.value.get_Item(value.Key) - 1);
	if (key.value !== -1) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$2("XmlKeyAlreadyExists")]));
	}
	key.value = this.Add(value.Value);
	intArray.value.set_Item(value.Key, (key.value + 1));
	return true;
};
System.Xml.XmlBinaryWriterSession.prototype.Add = function (s) {
	var num = this.nextKey++;
	this.strings.Add(s, num);
	return num;
};
System.Xml.XmlBinaryWriterSession.prototype.AddKeys = function (dictionary, minCount) {
	var intArray = new $asm09.System.Xml.XmlBinaryWriterSession.IntArray(System.Math.Max(minCount, 16));
	this.maps.Add(dictionary, intArray);
	return intArray;
};
System.Xml.XmlBinaryWriterSession.prototype.Reset = function () {
	this.nextKey = 0;
	this.maps.Clear();
	this.strings.Clear();
};
System.Xml.XmlBinaryWriterSession.prototype.TryLookup = function (s, /* ref */ key) {
	if (this.maps.TryGetValue(s.Dictionary, /* ref */ intArray)) {
		key.value = (intArray.value.get_Item(s.Key) - 1);
		if (key.value !== -1) {
			return true;
		}
	}
	if (this.strings.TryGetValue(s.Value, /* ref */ key)) {
		if (intArray.value === null) {
			var intArray = new JSIL.Variable(this.AddKeys(s.Dictionary, (s.Key + 1)));
		}
		intArray.value.set_Item(s.Key, (key.value + 1));
		return true;
	}
	key.value = -1;
	return false;
};
System.Xml.XmlBinaryWriterSession.prototype.strings = null;
System.Xml.XmlBinaryWriterSession.prototype.maps = null;
System.Xml.XmlBinaryWriterSession.prototype.nextKey = 0;

$asm09.System.Xml.XmlBinaryWriterSession.PriorityDictionary$b2.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
	this.list = JSIL.Array.New($asm09.System.Xml.XmlBinaryWriterSession.PriorityDictionary$b2.Entry.Of(this.K, this.V), 16);
};
$asm09.System.Xml.XmlBinaryWriterSession.PriorityDictionary$b2.prototype.Clear = function () {
	this.now = 0;
	this.listCount = 0;
	System.Array.Clear(this.list, 0, this.list.length);
	if (this.dictionary !== null) {
		this.dictionary.Clear();
	}
};
$asm09.System.Xml.XmlBinaryWriterSession.PriorityDictionary$b2.prototype.TryGetValue = function (key, /* ref */ value) {
__loop0__: 
	for (var i = 0; i < this.listCount; ++i) {
		if (this.list[i].Key === key) {
			value.value = this.list[i].Value;
			this.list[i].Time = this.Now;
			return true;
		}
	}
__loop1__: 
	for (var j = 0; j < this.listCount; ++j) {
		if (this.list[j].Key.Equals(key)) {
			value.value = this.list[j].Value;
			this.list[j].Time = this.Now;
			return true;
		}
	}
	if (this.dictionary === null) {
		value.value = null;
		return false;
	}
	if (!this.dictionary.TryGetValue(key, /* ref */ value)) {
		return false;
	}
	var num = 0;
	var time = this.list[0].Time;
__loop2__: 
	for (var k = 1; k < this.listCount; ++k) {
		if (this.list[k].Time < time) {
			num = k;
			time = this.list[k].Time;
		}
	}
	this.list[num].Key = key;
	this.list[num].Value = value.value;
	this.list[num].Time = this.Now;
	return true;
};
$asm09.System.Xml.XmlBinaryWriterSession.PriorityDictionary$b2.prototype.Add = function (key, value) {
	if (this.listCount < this.list.length) {
		this.list[this.listCount].Key = key;
		this.list[this.listCount].Value = value;
		++this.listCount;
		return;
	}
	if (this.dictionary === null) {
		this.dictionary = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(this.K, this.V), "_ctor$0", []);
	__loop0__: 
		for (var i = 0; i < this.listCount; ++i) {
			this.dictionary.Add(this.list[i].Key, this.list[i].Value);
		}
	}
	this.dictionary.Add(key, value);
};
$asm09.System.Xml.XmlBinaryWriterSession.PriorityDictionary$b2.prototype.get_Now = function () {
	if (++this.now === 2147483647) {
		this.DecreaseAll();
	}
	return this.now;
};
$asm09.System.Xml.XmlBinaryWriterSession.PriorityDictionary$b2.prototype.DecreaseAll = function () {
__loop0__: 
	for (var i = 0; i < this.listCount; ++i) {
		var expr_10_cp_0 = this.list;
		var expr_10_cp_1 = i;
		expr_10_cp_0[expr_10_cp_1].Time = Math.floor(expr_10_cp_0[expr_10_cp_1].Time / 2);
	}
	this.now = Math.floor(this.now / 2);
};
JSIL.MakeProperty($asm09.System.Xml.XmlBinaryWriterSession.PriorityDictionary$b2.prototype, "Now", 
	$asm09.System.Xml.XmlBinaryWriterSession.PriorityDictionary$b2.prototype.get_Now, null);
$asm09.System.Xml.XmlBinaryWriterSession.PriorityDictionary$b2.prototype.dictionary = null;
$asm09.System.Xml.XmlBinaryWriterSession.PriorityDictionary$b2.prototype.list = null;
$asm09.System.Xml.XmlBinaryWriterSession.PriorityDictionary$b2.prototype.listCount = 0;
$asm09.System.Xml.XmlBinaryWriterSession.PriorityDictionary$b2.prototype.now = 0;

$asm09.System.Xml.XmlBinaryWriterSession.PriorityDictionary$b2.Entry.prototype.Key = null;
$asm09.System.Xml.XmlBinaryWriterSession.PriorityDictionary$b2.Entry.prototype.Value = null;
$asm09.System.Xml.XmlBinaryWriterSession.PriorityDictionary$b2.Entry.prototype.Time = 0;

$asm09.System.Xml.XmlBinaryWriterSession.IntArray.prototype._ctor = function (size) {
	System.Object.prototype._ctor.call(this);
	this.array = JSIL.Array.New(System.Int32, size);
};
$asm09.System.Xml.XmlBinaryWriterSession.IntArray.prototype.get_Item = function (index) {
	if (index >= this.array.length) {
		return 0;
	}
	return this.array[index];
};
$asm09.System.Xml.XmlBinaryWriterSession.IntArray.prototype.set_Item = function (index, value) {
	if (index >= this.array.length) {
		var destinationArray = JSIL.Array.New(System.Int32, System.Math.Max((index + 1), (this.array.length * 2)));
		System.Array.Copy$0(this.array, destinationArray, this.array.length);
		this.array = destinationArray;
	}
	this.array[index] = value;
};
JSIL.MakeProperty($asm09.System.Xml.XmlBinaryWriterSession.IntArray.prototype, "Item", 
	$asm09.System.Xml.XmlBinaryWriterSession.IntArray.prototype.get_Item, $asm09.System.Xml.XmlBinaryWriterSession.IntArray.prototype.set_Item);
$asm09.System.Xml.XmlBinaryWriterSession.IntArray.prototype.array = null;

$asm09.System.Xml.XmlBufferReader.prototype._ctor$0 = function (reader) {
	System.Object.prototype._ctor.call(this);
	this.reader = reader;
};
$asm09.System.Xml.XmlBufferReader.prototype._ctor$1 = function (buffer) {
	System.Object.prototype._ctor.call(this);
	this.reader = null;
	this.buffer = buffer;
};
$asm09.System.Xml.XmlBufferReader.get_Empty = function () {
	return $asm09.System.Xml.XmlBufferReader.empty;
};
$asm09.System.Xml.XmlBufferReader.prototype.get_Buffer = function () {
	return this.buffer;
};
$asm09.System.Xml.XmlBufferReader.prototype.get_IsStreamed = function () {
	return (this.stream !== null);
};
$asm09.System.Xml.XmlBufferReader.prototype.SetBuffer$0 = function (stream, dictionary, session) {
	if (this.streamBuffer === null) {
		this.streamBuffer = JSIL.Array.New(System.Byte, 128);
	}
	this.SetBuffer$2(
		stream, 
		this.streamBuffer, 
		0, 
		0, 
		dictionary, 
		session
	);
	this.windowOffset = 0;
	this.windowOffsetMax = this.streamBuffer.length;
};
$asm09.System.Xml.XmlBufferReader.prototype.SetBuffer$1 = function (buffer, offset, count, dictionary, session) {
	this.SetBuffer$2(
		null, 
		buffer, 
		offset, 
		count, 
		dictionary, 
		session
	);
};
$asm09.System.Xml.XmlBufferReader.prototype.SetBuffer$2 = function (stream, buffer, offset, count, dictionary, session) {
	this.stream = stream;
	this.buffer = buffer;
	this.offsetMin = offset;
	this.offset = offset;
	this.offsetMax = (offset + count);
	this.dictionary = dictionary;
	this.session = session;
};
$asm09.System.Xml.XmlBufferReader.prototype.Close = function () {
	if (!((this.streamBuffer === null) || (this.streamBuffer.length <= 4096))) {
		this.streamBuffer = null;
	}
	if (this.stream !== null) {
		this.stream.Close();
		this.stream = null;
	}
	this.buffer = $asm09.System.Xml.XmlBufferReader.emptyByteArray;
	this.offset = 0;
	this.offsetMax = 0;
	this.windowOffset = 0;
	this.windowOffsetMax = 0;
	this.dictionary = null;
	this.session = null;
};
$asm09.System.Xml.XmlBufferReader.prototype.get_EndOfFile = function () {
	return ((this.offset === this.offsetMax) && !this.TryEnsureByte());
};
$asm09.System.Xml.XmlBufferReader.prototype.GetByte$0 = function () {
	var num = this.offset;
	if (num < this.offsetMax) {
		return this.buffer[num];
	}
	return this.GetByteHard();
};
$asm09.System.Xml.XmlBufferReader.prototype.SkipByte = function () {
	this.Advance(1);
};
$asm09.System.Xml.XmlBufferReader.prototype.GetByteHard = function () {
	this.EnsureByte();
	return this.buffer[this.offset];
};
$asm09.System.Xml.XmlBufferReader.prototype.GetBuffer$0 = function (count, /* ref */ offset) {
	offset.value = this.offset;
	if (offset.value <= (this.offsetMax - count)) {
		return this.buffer;
	}
	return this.GetBufferHard(count, /* ref */ offset);
};
$asm09.System.Xml.XmlBufferReader.prototype.GetBuffer$1 = function (count, /* ref */ offset, /* ref */ offsetMax) {
	offset.value = this.offset;
	if (offset.value <= (this.offsetMax - count)) {
		offsetMax.value = (this.offset + count);
	} else {
		this.TryEnsureBytes(System.Math.Min(count, (this.windowOffsetMax - offset.value)));
		offsetMax.value = this.offsetMax;
	}
	return this.buffer;
};
$asm09.System.Xml.XmlBufferReader.prototype.GetBuffer$2 = function (/* ref */ offset, /* ref */ offsetMax) {
	offset.value = this.offset;
	offsetMax.value = this.offsetMax;
	return this.buffer;
};
$asm09.System.Xml.XmlBufferReader.prototype.GetBufferHard = function (count, /* ref */ offset) {
	offset.value = this.offset;
	this.EnsureBytes(count);
	return this.buffer;
};
$asm09.System.Xml.XmlBufferReader.prototype.EnsureByte = function () {
	if (!this.TryEnsureByte()) {
		$asm09.System.Xml.XmlExceptionHelper.ThrowUnexpectedEndOfFile(this.reader);
	}
};
$asm09.System.Xml.XmlBufferReader.prototype.TryEnsureByte = function () {
	if (this.stream === null) {
		return false;
	}
	if (this.offsetMax >= this.buffer.length) {
		return this.TryEnsureBytes(1);
	}
	var num = this.stream.ReadByte();
	if (num === -1) {
		return false;
	}
	this.buffer[this.offsetMax++] = num;
	return true;
};
$asm09.System.Xml.XmlBufferReader.prototype.EnsureBytes = function (count) {
	if (!this.TryEnsureBytes(count)) {
		$asm09.System.Xml.XmlExceptionHelper.ThrowUnexpectedEndOfFile(this.reader);
	}
};
$asm09.System.Xml.XmlBufferReader.prototype.TryEnsureBytes = function (count) {
	if (this.stream === null) {
		return false;
	}
	var num = (this.offset + count);
	if (num < this.offsetMax) {
		return true;
	}
	if (num > this.buffer.length) {
		var dst = JSIL.Array.New(System.Byte, System.Math.Max(num, (this.buffer.length * 2)));
		System.Buffer.BlockCopy(
			this.buffer, 
			0, 
			dst, 
			0, 
			this.offsetMax
		);
		this.buffer = dst;
		this.streamBuffer = dst;
	}
__loop0__: 
	for (var i = (num - this.offsetMax); i > 0; i -= num2) {
		var num2 = this.stream.Read(this.buffer, this.offsetMax, i);
		if (num2 === 0) {
			return false;
		}
		this.offsetMax += num2;
	}
	return true;
};
$asm09.System.Xml.XmlBufferReader.prototype.Advance = function (count) {
	this.offset += count;
};
$asm09.System.Xml.XmlBufferReader.prototype.InsertBytes = function (buffer, offset, count) {
	if (this.offsetMax > (buffer.length - count)) {
		var dst = JSIL.Array.New(System.Byte, (this.offsetMax + count));
		System.Buffer.BlockCopy(
			this.buffer, 
			0, 
			dst, 
			0, 
			this.offsetMax
		);
		this.buffer = dst;
		this.streamBuffer = dst;
	}
	System.Buffer.BlockCopy(
		this.buffer, 
		this.offset, 
		this.buffer, 
		(this.offset + count), 
		(this.offsetMax - this.offset)
	);
	this.offsetMax += count;
	System.Buffer.BlockCopy(
		buffer, 
		offset, 
		this.buffer, 
		this.offset, 
		count
	);
};
$asm09.System.Xml.XmlBufferReader.prototype.SetWindow = function (windowOffset, windowLength) {
	if (windowOffset > (2147483647 - windowLength)) {
		windowLength = (2147483647 - windowOffset);
	}
	if (this.offset !== windowOffset) {
		System.Buffer.BlockCopy(
			this.buffer, 
			this.offset, 
			this.buffer, 
			windowOffset, 
			(this.offsetMax - this.offset)
		);
		this.offsetMax = (windowOffset + (this.offsetMax - this.offset));
		this.offset = windowOffset;
	}
	this.windowOffset = windowOffset;
	this.windowOffsetMax = System.Math.Max((windowOffset + windowLength), this.offsetMax);
};
$asm09.System.Xml.XmlBufferReader.prototype.get_Offset = function () {
	return this.offset;
};
$asm09.System.Xml.XmlBufferReader.prototype.set_Offset = function (value) {
	this.offset = value;
};
$asm09.System.Xml.XmlBufferReader.prototype.ReadBytes = function (count) {
	var num = this.offset;
	if (num > (this.offsetMax - count)) {
		this.EnsureBytes(count);
	}
	this.offset += count;
	return num;
};
$asm09.System.Xml.XmlBufferReader.prototype.ReadMultiByteUInt31 = function () {
	var num = this.GetByte$0();
	this.Advance(1);
	if (!(num & 128)) {
		return num;
	}
	num = (num & 127);
	var byte = this.GetByte$0();
	this.Advance(1);
	num = (num | ((byte & 127) << 7));
	if (!(byte & 128)) {
		return num;
	}
	var byte2 = this.GetByte$0();
	this.Advance(1);
	num = (num | ((byte2 & 127) << 14));
	if (!(byte2 & 128)) {
		return num;
	}
	var byte3 = this.GetByte$0();
	this.Advance(1);
	num = (num | ((byte3 & 127) << 21));
	if (!(byte3 & 128)) {
		return num;
	}
	var byte4 = this.GetByte$0();
	this.Advance(1);
	num = (num | (byte4 << 28));
	if (byte4 & 248) {
		$asm09.System.Xml.XmlExceptionHelper.ThrowInvalidBinaryFormat(this.reader);
	}
	return num;
};
$asm09.System.Xml.XmlBufferReader.prototype.ReadUInt8 = function () {
	var byte = this.GetByte$0();
	this.Advance(1);
	return byte;
};
$asm09.System.Xml.XmlBufferReader.prototype.ReadInt8 = function () {
	return this.ReadUInt8();
};
$asm09.System.Xml.XmlBufferReader.prototype.ReadUInt16 = function () {
	var num = new JSIL.Variable(0);
	var array = this.GetBuffer$0(2, /* ref */ num);
	var result = (array[num.value] + (array[(num.value + 1)] << 8));
	this.Advance(2);
	return result;
};
$asm09.System.Xml.XmlBufferReader.prototype.ReadInt16 = function () {
	return this.ReadUInt16();
};
$asm09.System.Xml.XmlBufferReader.prototype.ReadInt32 = function () {
	var num = new JSIL.Variable(0);
	var array = this.GetBuffer$0(4, /* ref */ num);
	var b = array[num.value];
	var b2 = array[(num.value + 1)];
	var b3 = array[(num.value + 2)];
	var b4 = array[(num.value + 3)];
	this.Advance(4);
	return ((((((b4 << 8) + b3) << 8) + b2) << 8) + b);
};
$asm09.System.Xml.XmlBufferReader.prototype.ReadUInt31 = function () {
	var num = this.ReadInt32();
	if (num < 0) {
		$asm09.System.Xml.XmlExceptionHelper.ThrowInvalidBinaryFormat(this.reader);
	}
	return num;
};
$asm09.System.Xml.XmlBufferReader.prototype.ReadInt64 = function () {
	var num = this.ReadInt32();
	var num2 = this.ReadInt32();
	return ((num2 << 32) + num);
};
$asm09.System.Xml.XmlBufferReader.prototype.ReadSingle = JSIL.UntranslatableFunction("System.Single System.Xml.XmlBufferReader::ReadSingle()");
$asm09.System.Xml.XmlBufferReader.prototype.ReadDouble = JSIL.UntranslatableFunction("System.Double System.Xml.XmlBufferReader::ReadDouble()");
$asm09.System.Xml.XmlBufferReader.prototype.ReadDecimal = JSIL.UntranslatableFunction("System.Decimal System.Xml.XmlBufferReader::ReadDecimal()");
$asm09.System.Xml.XmlBufferReader.prototype.ReadUniqueId = function () {
	var num = new JSIL.Variable(0);
	var array = this.GetBuffer$0(16, /* ref */ num);
	var result = JSIL.New(System.Xml.UniqueId, "_ctor$3", [array, num.value]);
	this.Advance(16);
	return result;
};
$asm09.System.Xml.XmlBufferReader.prototype.ReadDateTime = function () {
	var dateData = 0;
	try {
		dateData = this.ReadInt64();
		var result = System.DateTime.FromBinary(dateData).MemberwiseClone();
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.ArgumentException)) {
			var arg_14_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$1((dateData).toString(), "DateTime", arg_14_0));
		} else if (JSIL.CheckType($exception, System.FormatException)) {
			var arg_32_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$1((dateData).toString(), "DateTime", arg_32_0));
		} else if (JSIL.CheckType($exception, System.OverflowException)) {
			var arg_50_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$1((dateData).toString(), "DateTime", arg_50_0));
		} else {
			throw $exception;
		}
	}
	return result;
};
$asm09.System.Xml.XmlBufferReader.prototype.ReadTimeSpan = function () {
	var value = 0;
	try {
		value = this.ReadInt64();
		var result = System.TimeSpan.FromTicks(value).MemberwiseClone();
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.ArgumentException)) {
			var arg_14_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$1((value).toString(), "TimeSpan", arg_14_0));
		} else if (JSIL.CheckType($exception, System.FormatException)) {
			var arg_32_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$1((value).toString(), "TimeSpan", arg_32_0));
		} else if (JSIL.CheckType($exception, System.OverflowException)) {
			var arg_50_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$1((value).toString(), "TimeSpan", arg_50_0));
		} else {
			throw $exception;
		}
	}
	return result;
};
$asm09.System.Xml.XmlBufferReader.prototype.ReadGuid = function () {
	var num = new JSIL.Variable(0);
	this.GetBuffer$0(16, /* ref */ num);
	var result = this.GetGuid(num.value).MemberwiseClone();
	this.Advance(16);
	return result;
};
$asm09.System.Xml.XmlBufferReader.prototype.ReadUTF8String = function (length) {
	var num = new JSIL.Variable(0);
	this.GetBuffer$0(length, /* ref */ num);
	var charBuffer = this.GetCharBuffer(length);
	var length2 = this.GetChars$0(num.value, length, charBuffer);
	var result = JSIL.New(System.String, "_ctor$0", [charBuffer, 0, length2]);
	this.Advance(length);
	return result;
};
$asm09.System.Xml.XmlBufferReader.prototype.GetCharBuffer = function (count) {
	if (count > 1024) {
		return JSIL.Array.New(System.Char, count);
	}
	if (!((this.chars !== null) && (this.chars.length >= count))) {
		this.chars = JSIL.Array.New(System.Char, count);
	}
	return this.chars;
};
$asm09.System.Xml.XmlBufferReader.prototype.GetChars$0 = function (offset, length, chars) {
	var array = this.buffer;
__loop0__: 
	for (var i = 0; i < length; ++i) {
		var b = array[(offset + i)];
		if (b >= 128) {
			return (i + $asm09.System.Xml.XmlConverter.ToChars$0(
					array, 
					(offset + i), 
					(length - i), 
					chars, 
					i
				));
		}
		chars[i] = String.fromCharCode(b);
	}
	return length;
};
$asm09.System.Xml.XmlBufferReader.prototype.GetChars$1 = function (offset, length, chars, charOffset) {
	var array = this.buffer;
__loop0__: 
	for (var i = 0; i < length; ++i) {
		var b = array[(offset + i)];
		if (b >= 128) {
			return (i + $asm09.System.Xml.XmlConverter.ToChars$0(
					array, 
					(offset + i), 
					(length - i), 
					chars, 
					(charOffset + i)
				));
		}
		chars[(charOffset + i)] = String.fromCharCode(b);
	}
	return length;
};
$asm09.System.Xml.XmlBufferReader.prototype.GetString$0 = function (offset, length) {
	var charBuffer = this.GetCharBuffer(length);
	var length2 = this.GetChars$0(offset, length, charBuffer);
	return JSIL.New(System.String, "_ctor$0", [charBuffer, 0, length2]);
};
$asm09.System.Xml.XmlBufferReader.prototype.GetUnicodeString = function (offset, length) {
	return $asm09.System.Xml.XmlConverter.ToStringUnicode(this.buffer, offset, length);
};
$asm09.System.Xml.XmlBufferReader.prototype.GetString$1 = function (offset, length, nameTable) {
	var charBuffer = this.GetCharBuffer(length);
	var length2 = this.GetChars$0(offset, length, charBuffer);
	return nameTable.Add$0(charBuffer, 0, length2);
};
$asm09.System.Xml.XmlBufferReader.prototype.GetEscapedChars = function (offset, length, chars) {
	var surrogateChar = new $asm09.System.Text.SurrogateChar();
	var array = this.buffer;
	var num = 0;
	var num2 = offset;
	var num3 = (offset + length);
__loop0__: 
	while (true) {
		if (!((offset < num3) && this.IsAttrChar(array[offset]))) {
			num += this.GetChars$1(num2, (offset - num2), chars, num);
			if (offset === num3) {
				break __loop0__;
			}
			num2 = offset;
			if (array[offset] === 38) {
			__loop1__: 
				for (; (offset < num3) && (array[offset] !== 59); ++offset) {
				}
				++offset;
				var charEntity = this.GetCharEntity(num2, (offset - num2));
				num2 = offset;
				if (charEntity > 65535) {
					surrogateChar._ctor$0(charEntity);
					chars[num++] = surrogateChar.HighChar;
					chars[num++] = surrogateChar.LowChar;
				} else {
					chars[num++] = String.fromCharCode(charEntity);
				}
			} else if (!((array[offset] !== 10) && (array[offset] !== 9))) {
				chars[num++] = " ";
				++offset;
				num2 = offset;
			} else {
				chars[num++] = " ";
				++offset;
				if (!((offset >= num3) || (array[offset] !== 10))) {
					++offset;
				}
				num2 = offset;
			}
		} else {
			++offset;
		}
	}
	return num;
};
$asm09.System.Xml.XmlBufferReader.prototype.IsAttrChar = function (ch) {
	switch (ch) {
		case 9: 
		case 10: 
		case 13: 
			break;
		case 11: 
		case 12: 
			return true;
		default: 
			if (ch !== 38) {
				return true;
			}
			break;
	}
	return false;
};
$asm09.System.Xml.XmlBufferReader.prototype.GetEscapedString$0 = function (offset, length) {
	var charBuffer = this.GetCharBuffer(length);
	var escapedChars = this.GetEscapedChars(offset, length, charBuffer);
	return JSIL.New(System.String, "_ctor$0", [charBuffer, 0, escapedChars]);
};
$asm09.System.Xml.XmlBufferReader.prototype.GetEscapedString$1 = function (offset, length, nameTable) {
	var charBuffer = this.GetCharBuffer(length);
	var escapedChars = this.GetEscapedChars(offset, length, charBuffer);
	return nameTable.Add$0(charBuffer, 0, escapedChars);
};
$asm09.System.Xml.XmlBufferReader.prototype.GetLessThanCharEntity = function (offset, length) {
	var array = this.buffer;
	if (!((length === 4) && 
			(array[(offset + 1)] === 108) && (array[(offset + 2)] === 116))) {
		$asm09.System.Xml.XmlExceptionHelper.ThrowInvalidCharRef(this.reader);
	}
	return 60;
};
$asm09.System.Xml.XmlBufferReader.prototype.GetGreaterThanCharEntity = function (offset, length) {
	var array = this.buffer;
	if (!((length === 4) && 
			(array[(offset + 1)] === 103) && (array[(offset + 2)] === 116))) {
		$asm09.System.Xml.XmlExceptionHelper.ThrowInvalidCharRef(this.reader);
	}
	return 62;
};
$asm09.System.Xml.XmlBufferReader.prototype.GetQuoteCharEntity = function (offset, length) {
	var array = this.buffer;
	if (!((length === 6) && 
			(array[(offset + 1)] === 113) && 
			(array[(offset + 2)] === 117) && 
			(array[(offset + 3)] === 111) && (array[(offset + 4)] === 116))) {
		$asm09.System.Xml.XmlExceptionHelper.ThrowInvalidCharRef(this.reader);
	}
	return 34;
};
$asm09.System.Xml.XmlBufferReader.prototype.GetAmpersandCharEntity = function (offset, length) {
	var array = this.buffer;
	if (!((length === 5) && 
			(array[(offset + 1)] === 97) && 
			(array[(offset + 2)] === 109) && (array[(offset + 3)] === 112))) {
		$asm09.System.Xml.XmlExceptionHelper.ThrowInvalidCharRef(this.reader);
	}
	return 38;
};
$asm09.System.Xml.XmlBufferReader.prototype.GetApostropheCharEntity = function (offset, length) {
	var array = this.buffer;
	if (!((length === 6) && 
			(array[(offset + 1)] === 97) && 
			(array[(offset + 2)] === 112) && 
			(array[(offset + 3)] === 111) && (array[(offset + 4)] === 115))) {
		$asm09.System.Xml.XmlExceptionHelper.ThrowInvalidCharRef(this.reader);
	}
	return 39;
};
$asm09.System.Xml.XmlBufferReader.prototype.GetDecimalCharEntity = function (offset, length) {
	var num = 0;
__loop0__: 
	for (var i = 2; i < (length - 1); ++i) {
		var b = this.buffer[(offset + i)];
		if (!((b >= 48) && (b <= 57))) {
			$asm09.System.Xml.XmlExceptionHelper.ThrowInvalidCharRef(this.reader);
		}
		num = ((num * 10) + (b - 48));
		if (num > 1114111) {
			$asm09.System.Xml.XmlExceptionHelper.ThrowInvalidCharRef(this.reader);
		}
	}
	return num;
};
$asm09.System.Xml.XmlBufferReader.prototype.GetHexCharEntity = function (offset, length) {
	var num = 0;
__loop0__: 
	for (var i = 3; i < (length - 1); ++i) {
		var b = this.buffer[(offset + i)];
		var num2 = 0;
		if (!((b < 48) || (b > 57))) {
			num2 = (b - 48);
		} else if (!((b < 97) || (b > 102))) {
			num2 = (10 + (b - 97));
		} else if (!((b < 65) || (b > 70))) {
			num2 = (10 + (b - 65));
		} else {
			$asm09.System.Xml.XmlExceptionHelper.ThrowInvalidCharRef(this.reader);
		}
		num = ((num * 16) + num2);
		if (num > 1114111) {
			$asm09.System.Xml.XmlExceptionHelper.ThrowInvalidCharRef(this.reader);
		}
	}
	return num;
};
$asm09.System.Xml.XmlBufferReader.prototype.GetCharEntity = function (offset, length) {
	if (length < 3) {
		$asm09.System.Xml.XmlExceptionHelper.ThrowInvalidCharRef(this.reader);
	}
	var array = this.buffer;
	var b = array[(offset + 1)];
	if (b <= 97) {
		if (b !== 35) {
			if (b === 97) {
				if (array[(offset + 2)] === 109) {
					return this.GetAmpersandCharEntity(offset, length);
				}
				return this.GetApostropheCharEntity(offset, length);
			}
		} else {
			if (array[(offset + 2)] === 120) {
				return this.GetHexCharEntity(offset, length);
			}
			return this.GetDecimalCharEntity(offset, length);
		}
	} else {
		if (b === 103) {
			return this.GetGreaterThanCharEntity(offset, length);
		}
		if (b === 108) {
			return this.GetLessThanCharEntity(offset, length);
		}
		if (b === 113) {
			return this.GetQuoteCharEntity(offset, length);
		}
	}
	$asm09.System.Xml.XmlExceptionHelper.ThrowInvalidCharRef(this.reader);
	return 0;
};
$asm09.System.Xml.XmlBufferReader.prototype.IsWhitespaceKey = function (key) {
	var value = this.GetDictionaryString(key).Value;
__loop0__: 
	for (var i = 0; i < value.length; ++i) {
		if (!$asm09.System.Xml.XmlConverter.IsWhitespace$1(value[i])) {
			return false;
		}
	}
	return true;
};
$asm09.System.Xml.XmlBufferReader.prototype.IsWhitespaceUTF8 = function (offset, length) {
	var array = this.buffer;
__loop0__: 
	for (var i = 0; i < length; ++i) {
		if (!$asm09.System.Xml.XmlConverter.IsWhitespace$1(array[(offset + i)])) {
			return false;
		}
	}
	return true;
};
$asm09.System.Xml.XmlBufferReader.prototype.IsWhitespaceUnicode = function (offset, length) {
__loop0__: 
	for (var i = 0; i < length; i += 2) {
		var ch = String.fromCharCode(this.GetInt16((offset + i)));
		if (!$asm09.System.Xml.XmlConverter.IsWhitespace$1(ch)) {
			return false;
		}
	}
	return true;
};
$asm09.System.Xml.XmlBufferReader.prototype.Equals2$0 = function (key1, key2, bufferReader2) {
	return ((key1 === key2) || (this.GetDictionaryString(key1).Value == bufferReader2.GetDictionaryString(key2).Value));
};
$asm09.System.Xml.XmlBufferReader.prototype.Equals2$1 = function (key1, xmlString2) {
	if (!((key1 & 1) || (xmlString2.Dictionary !== this.dictionary))) {
		return (xmlString2.Key === (key1 >> 1));
	}
	return this.GetDictionaryString(key1).Value == xmlString2.Value;
};
$asm09.System.Xml.XmlBufferReader.prototype.Equals2$2 = function (offset1, length1, buffer2) {
	var num = buffer2.length;
	if (length1 !== num) {
		return false;
	}
	var array = this.buffer;
__loop0__: 
	for (var i = 0; i < length1; ++i) {
		if (array[(offset1 + i)] !== buffer2[i]) {
			return false;
		}
	}
	return true;
};
$asm09.System.Xml.XmlBufferReader.prototype.Equals2$3 = function (offset1, length1, bufferReader2, offset2, length2) {
	if (length1 !== length2) {
		return false;
	}
	var array = this.buffer;
	var array2 = bufferReader2.buffer;
__loop0__: 
	for (var i = 0; i < length1; ++i) {
		if (array[(offset1 + i)] !== array2[(offset2 + i)]) {
			return false;
		}
	}
	return true;
};
$asm09.System.Xml.XmlBufferReader.prototype.Equals2$4 = function (offset1, length1, offset2, length2) {
	if (length1 !== length2) {
		return false;
	}
	if (offset1 === offset2) {
		return true;
	}
	var array = this.buffer;
__loop0__: 
	for (var i = 0; i < length1; ++i) {
		if (array[(offset1 + i)] !== array[(offset2 + i)]) {
			return false;
		}
	}
	return true;
};
$asm09.System.Xml.XmlBufferReader.prototype.Equals2$5 = JSIL.UntranslatableFunction("System.Boolean System.Xml.XmlBufferReader::Equals2(System.Int32,System.Int32,System.String)");
$asm09.System.Xml.XmlBufferReader.prototype.Compare = function (offset1, length1, offset2, length2) {
	var array = this.buffer;
	var num = System.Math.Min(length1, length2);
__loop0__: 
	for (var i = 0; i < num; ++i) {
		var num2 = (array[(offset1 + i)] - array[(offset2 + i)]);
		if (num2 !== 0) {
			return num2;
		}
	}
	return (length1 - length2);
};
$asm09.System.Xml.XmlBufferReader.prototype.GetByte$1 = function (offset) {
	return this.buffer[offset];
};
$asm09.System.Xml.XmlBufferReader.prototype.GetInt8 = function (offset) {
	return this.GetByte$1(offset);
};
$asm09.System.Xml.XmlBufferReader.prototype.GetInt16 = function (offset) {
	var array = this.buffer;
	return (array[offset] + (array[(offset + 1)] << 8));
};
$asm09.System.Xml.XmlBufferReader.prototype.GetInt32 = function (offset) {
	var array = this.buffer;
	return ((((((array[(offset + 3)] << 8) + array[(offset + 2)]) << 8) + array[(offset + 1)]) << 8) + array[offset]);
};
$asm09.System.Xml.XmlBufferReader.prototype.GetInt64 = function (offset) {
	var array = this.buffer;
	var b = array[offset];
	var b2 = array[(offset + 1)];
	var b3 = array[(offset + 2)];
	var b4 = array[(offset + 3)];
	var num = ((((((b4 << 8) + b3) << 8) + b2) << 8) + b);
	b = array[(offset + 4)];
	b2 = array[(offset + 5)];
	b3 = array[(offset + 6)];
	b4 = array[(offset + 7)];
	var num2 = ((((((b4 << 8) + b3) << 8) + b2) << 8) + b);
	return ((num2 << 32) + num);
};
$asm09.System.Xml.XmlBufferReader.prototype.GetUInt64 = function (offset) {
	return this.GetInt64(offset);
};
$asm09.System.Xml.XmlBufferReader.prototype.GetSingle = JSIL.UntranslatableFunction("System.Single System.Xml.XmlBufferReader::GetSingle(System.Int32)");
$asm09.System.Xml.XmlBufferReader.prototype.GetDouble = JSIL.UntranslatableFunction("System.Double System.Xml.XmlBufferReader::GetDouble(System.Int32)");
$asm09.System.Xml.XmlBufferReader.prototype.GetDecimal = JSIL.UntranslatableFunction("System.Decimal System.Xml.XmlBufferReader::GetDecimal(System.Int32)");
$asm09.System.Xml.XmlBufferReader.prototype.GetUniqueId = function (offset) {
	return JSIL.New(System.Xml.UniqueId, "_ctor$3", [this.buffer, offset]);
};
$asm09.System.Xml.XmlBufferReader.prototype.GetGuid = function (offset) {
	if (this.guid === null) {
		this.guid = JSIL.Array.New(System.Byte, 16);
	}
	System.Buffer.BlockCopy(
		this.buffer, 
		offset, 
		this.guid, 
		0, 
		this.guid.length
	);
	return JSIL.New(System.Guid, "_ctor$0", [this.guid]);
};
$asm09.System.Xml.XmlBufferReader.prototype.GetBase64 = function (srcOffset, buffer, dstOffset, count) {
	System.Buffer.BlockCopy(
		this.buffer, 
		srcOffset, 
		buffer, 
		dstOffset, 
		count
	);
};
$asm09.System.Xml.XmlBufferReader.prototype.GetNodeType = function () {
	return this.GetByte$0();
};
$asm09.System.Xml.XmlBufferReader.prototype.SkipNodeType = function () {
	this.SkipByte();
};
$asm09.System.Xml.XmlBufferReader.prototype.GetList = function (offset, count) {
	var num = this.Offset;
	this.Offset = offset;
	try {
		var array = JSIL.Array.New(System.Object, count);
	__loop0__: 
		for (var i = 0; i < count; ++i) {
			var nodeType = this.GetNodeType();
			this.SkipNodeType();
			this.ReadValue$0(nodeType, this.listValue);
			array[i] = this.listValue.ToObject();
		}
	} finally {
		this.Offset = num;
	}
	return array;
};
$asm09.System.Xml.XmlBufferReader.prototype.GetDictionaryString = function (key) {
	var result = new JSIL.Variable(null);
	if (key & 1) {
		var xmlDictionary = this.session;
	} else {
		xmlDictionary = this.dictionary;
	}
	if (!xmlDictionary.IXmlDictionary_TryLookup$1((key >> 1), /* ref */ result)) {
		$asm09.System.Xml.XmlExceptionHelper.ThrowInvalidBinaryFormat(this.reader);
	}
	return result.value;
};
$asm09.System.Xml.XmlBufferReader.prototype.ReadDictionaryKey = function () {
	var xmlDictionaryString = new JSIL.Variable(null), xmlDictionaryString2 = new JSIL.Variable(null);
	var num = this.ReadMultiByteUInt31();
	if (num & 1) {
		if (this.session === null) {
			$asm09.System.Xml.XmlExceptionHelper.ThrowInvalidBinaryFormat(this.reader);
		}
		var num2 = (num >> 1);
		if (!this.session.TryLookup$0(num2, /* ref */ xmlDictionaryString)) {
			if (!((num2 >= 0) && (num2 <= 536870911))) {
				$asm09.System.Xml.XmlExceptionHelper.ThrowXmlDictionaryStringIDOutOfRange(this.reader);
			}
			$asm09.System.Xml.XmlExceptionHelper.ThrowXmlDictionaryStringIDUndefinedSession(this.reader, num2);
		}
	} else {
		if (this.dictionary === null) {
			$asm09.System.Xml.XmlExceptionHelper.ThrowInvalidBinaryFormat(this.reader);
		}
		var num3 = (num >> 1);
		if (!this.dictionary.IXmlDictionary_TryLookup$1(num3, /* ref */ xmlDictionaryString2)) {
			if (!((num3 >= 0) && (num3 <= 536870911))) {
				$asm09.System.Xml.XmlExceptionHelper.ThrowXmlDictionaryStringIDOutOfRange(this.reader);
			}
			$asm09.System.Xml.XmlExceptionHelper.ThrowXmlDictionaryStringIDUndefinedStatic(this.reader, num3);
		}
	}
	return num;
};
$asm09.System.Xml.XmlBufferReader.prototype.ReadValue$0 = function (nodeType, value) {
	switch (Number(nodeType)) {
		case 128: 
			value.SetValue$0($asm09.System.Xml.ValueHandleType.Zero);
			return;
		case 129: 
		case 131: 
		case 133: 
		case 135: 
		case 137: 
		case 139: 
		case 141: 
		case 143: 
		case 145: 
		case 147: 
		case 149: 
		case 151: 
		case 153: 
		case 155: 
		case 157: 
		case 159: 
		case 161: 
		case 163: 
			break;
		case 130: 
			value.SetValue$0($asm09.System.Xml.ValueHandleType.One);
			return;
		case 132: 
			value.SetValue$0($asm09.System.Xml.ValueHandleType.False);
			return;
		case 134: 
			value.SetValue$0($asm09.System.Xml.ValueHandleType.True);
			return;
		case 136: 
			this.ReadValue$1(value, $asm09.System.Xml.ValueHandleType.Int8, 1);
			return;
		case 138: 
			this.ReadValue$1(value, $asm09.System.Xml.ValueHandleType.Int16, 2);
			return;
		case 140: 
			this.ReadValue$1(value, $asm09.System.Xml.ValueHandleType.Int32, 4);
			return;
		case 142: 
			this.ReadValue$1(value, $asm09.System.Xml.ValueHandleType.Int64, 8);
			return;
		case 144: 
			this.ReadValue$1(value, $asm09.System.Xml.ValueHandleType.Single, 4);
			return;
		case 146: 
			this.ReadValue$1(value, $asm09.System.Xml.ValueHandleType.Double, 8);
			return;
		case 148: 
			this.ReadValue$1(value, $asm09.System.Xml.ValueHandleType.Decimal, 16);
			return;
		case 150: 
			this.ReadValue$1(value, $asm09.System.Xml.ValueHandleType.DateTime, 8);
			return;
		case 152: 
			this.ReadValue$1(value, $asm09.System.Xml.ValueHandleType.UTF8, this.ReadUInt8());
			return;
		case 154: 
			this.ReadValue$1(value, $asm09.System.Xml.ValueHandleType.UTF8, this.ReadUInt16());
			return;
		case 156: 
			this.ReadValue$1(value, $asm09.System.Xml.ValueHandleType.UTF8, this.ReadUInt31());
			return;
		case 158: 
			this.ReadValue$1(value, $asm09.System.Xml.ValueHandleType.Base64, this.ReadUInt8());
			return;
		case 160: 
			this.ReadValue$1(value, $asm09.System.Xml.ValueHandleType.Base64, this.ReadUInt16());
			return;
		case 162: 
			this.ReadValue$1(value, $asm09.System.Xml.ValueHandleType.Base64, this.ReadUInt31());
			return;
		case 164: 
			this.ReadList(value);
			return;
		default: 
			switch (Number(nodeType)) {
				case 168: 
					value.SetValue$0($asm09.System.Xml.ValueHandleType.Empty);
					return;
				case 170: 
					value.SetDictionaryValue(this.ReadDictionaryKey());
					return;
				case 172: 
					this.ReadValue$1(value, $asm09.System.Xml.ValueHandleType.UniqueId, 16);
					return;
				case 174: 
					this.ReadValue$1(value, $asm09.System.Xml.ValueHandleType.TimeSpan, 8);
					return;
				case 176: 
					this.ReadValue$1(value, $asm09.System.Xml.ValueHandleType.Guid, 16);
					return;
				case 178: 
					this.ReadValue$1(value, $asm09.System.Xml.ValueHandleType.UInt64, 8);
					return;
				case 180: 
					value.SetValue$0((this.ReadUInt8() !== 0) ? $asm09.System.Xml.ValueHandleType.True : $asm09.System.Xml.ValueHandleType.False);
					return;
				case 182: 
					this.ReadUnicodeValue(value, this.ReadUInt8());
					return;
				case 184: 
					this.ReadUnicodeValue(value, this.ReadUInt16());
					return;
				case 186: 
					this.ReadUnicodeValue(value, this.ReadUInt31());
					return;
				case 188: 
					this.ReadQName(value);
					return;
			}
			break;
	}
	$asm09.System.Xml.XmlExceptionHelper.ThrowInvalidBinaryFormat(this.reader);
};
$asm09.System.Xml.XmlBufferReader.prototype.ReadValue$1 = function (value, type, length) {
	var num = this.ReadBytes(length);
	value.SetValue$1(type, num, length);
};
$asm09.System.Xml.XmlBufferReader.prototype.ReadUnicodeValue = function (value, length) {
	if (length & 1) {
		$asm09.System.Xml.XmlExceptionHelper.ThrowInvalidBinaryFormat(this.reader);
	}
	this.ReadValue$1(value, $asm09.System.Xml.ValueHandleType.Unicode, length);
};
$asm09.System.Xml.XmlBufferReader.prototype.ReadList = function (value) {
	if (this.listValue === null) {
		this.listValue = new $asm09.System.Xml.ValueHandle(this);
	}
	var num = 0;
	var num2 = this.Offset;
__loop0__: 
	while (true) {
		var nodeType = this.GetNodeType();
		this.SkipNodeType();
		if (nodeType === $asm09.System.Xml.XmlBinaryNodeType.StartListText) {
			$asm09.System.Xml.XmlExceptionHelper.ThrowInvalidBinaryFormat(this.reader);
		}
		if (nodeType === $asm09.System.Xml.XmlBinaryNodeType.EndListText) {
			break __loop0__;
		}
		this.ReadValue$0(nodeType, this.listValue);
		++num;
	}
	value.SetValue$1($asm09.System.Xml.ValueHandleType.List, num2, num);
};
$asm09.System.Xml.XmlBufferReader.prototype.ReadQName = function (value) {
	var num = this.ReadUInt8();
	if (num >= 26) {
		$asm09.System.Xml.XmlExceptionHelper.ThrowInvalidBinaryFormat(this.reader);
	}
	var key = this.ReadDictionaryKey();
	value.SetQNameValue(num, key);
};
$asm09.System.Xml.XmlBufferReader.prototype.GetRows = function () {
	if (this.buffer === null) {
		return JSIL.Array.New(System.Int32, 1);
	}
	var list = new (System.Collections.Generic.List$b1.Of(System.Int32)) ();
	list.Add(this.offsetMin);
__loop0__: 
	for (var i = this.offsetMin; i < this.offsetMax; ++i) {
		if (!((this.buffer[i] !== 13) && (this.buffer[i] !== 10))) {
			if (!(((i + 1) >= this.offsetMax) || (this.buffer[(i + 1)] !== 10))) {
				++i;
			}
			list.Add((i + 1));
		}
	}
	return list.ToArray();
};
JSIL.OverloadedMethod($asm09.System.Xml.XmlBufferReader.prototype, "_ctor", [
		["_ctor$0", [System.Xml.XmlDictionaryReader]], 
		["_ctor$1", [System.Array.Of(System.Byte)]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlBufferReader.prototype, "SetBuffer", [
		["SetBuffer$0", [System.IO.Stream, System.Xml.IXmlDictionary, System.Xml.XmlBinaryReaderSession]], 
		["SetBuffer$1", [System.Array.Of(System.Byte), System.Int32, System.Int32, System.Xml.IXmlDictionary, System.Xml.XmlBinaryReaderSession]], 
		["SetBuffer$2", [System.IO.Stream, System.Array.Of(System.Byte), System.Int32, System.Int32, System.Xml.IXmlDictionary, System.Xml.XmlBinaryReaderSession]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlBufferReader.prototype, "GetByte", [
		["GetByte$0", []], 
		["GetByte$1", [System.Int32]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlBufferReader.prototype, "GetBuffer", [
		["GetBuffer$0", [System.Int32, JSIL.Reference.Of(System.Int32)]], 
		["GetBuffer$1", [System.Int32, JSIL.Reference.Of(System.Int32), JSIL.Reference.Of(System.Int32)]], 
		["GetBuffer$2", [JSIL.Reference.Of(System.Int32), JSIL.Reference.Of(System.Int32)]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlBufferReader.prototype, "GetChars", [
		["GetChars$0", [System.Int32, System.Int32, System.Array.Of(System.Char)]], 
		["GetChars$1", [System.Int32, System.Int32, System.Array.Of(System.Char), System.Int32]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlBufferReader.prototype, "GetString", [
		["GetString$0", [System.Int32, System.Int32]], 
		["GetString$1", [System.Int32, System.Int32, System.Xml.XmlNameTable]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlBufferReader.prototype, "GetEscapedString", [
		["GetEscapedString$0", [System.Int32, System.Int32]], 
		["GetEscapedString$1", [System.Int32, System.Int32, System.Xml.XmlNameTable]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlBufferReader.prototype, "Equals2", [
		["Equals2$0", [System.Int32, System.Int32, $asm09.System.Xml.XmlBufferReader]], 
		["Equals2$1", [System.Int32, System.Xml.XmlDictionaryString]], 
		["Equals2$2", [System.Int32, System.Int32, System.Array.Of(System.Byte)]], 
		["Equals2$3", [System.Int32, System.Int32, $asm09.System.Xml.XmlBufferReader, System.Int32, System.Int32]], 
		["Equals2$4", [System.Int32, System.Int32, System.Int32, System.Int32]], 
		["Equals2$5", [System.Int32, System.Int32, System.String]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlBufferReader.prototype, "ReadValue", [
		["ReadValue$0", [$asm09.System.Xml.XmlBinaryNodeType, $asm09.System.Xml.ValueHandle]], 
		["ReadValue$1", [$asm09.System.Xml.ValueHandle, $asm09.System.Xml.ValueHandleType, System.Int32]]
	]);
JSIL.MakeProperty($asm09.System.Xml.XmlBufferReader, "Empty", 
	$asm09.System.Xml.XmlBufferReader.get_Empty, null);
JSIL.MakeProperty($asm09.System.Xml.XmlBufferReader.prototype, "Buffer", 
	$asm09.System.Xml.XmlBufferReader.prototype.get_Buffer, null);
JSIL.MakeProperty($asm09.System.Xml.XmlBufferReader.prototype, "IsStreamed", 
	$asm09.System.Xml.XmlBufferReader.prototype.get_IsStreamed, null);
JSIL.MakeProperty($asm09.System.Xml.XmlBufferReader.prototype, "EndOfFile", 
	$asm09.System.Xml.XmlBufferReader.prototype.get_EndOfFile, null);
JSIL.MakeProperty($asm09.System.Xml.XmlBufferReader.prototype, "Offset", 
	$asm09.System.Xml.XmlBufferReader.prototype.get_Offset, $asm09.System.Xml.XmlBufferReader.prototype.set_Offset);
Object.defineProperty($asm09.System.Xml.XmlBufferReader, "maxBytesPerChar", {
		"value": 3}
);
$asm09.System.Xml.XmlBufferReader.prototype.reader = null;
$asm09.System.Xml.XmlBufferReader.prototype.stream = null;
$asm09.System.Xml.XmlBufferReader.prototype.streamBuffer = null;
$asm09.System.Xml.XmlBufferReader.prototype.buffer = null;
$asm09.System.Xml.XmlBufferReader.prototype.offsetMin = 0;
$asm09.System.Xml.XmlBufferReader.prototype.offsetMax = 0;
$asm09.System.Xml.XmlBufferReader.prototype.dictionary = null;
$asm09.System.Xml.XmlBufferReader.prototype.session = null;
$asm09.System.Xml.XmlBufferReader.prototype.guid = null;
$asm09.System.Xml.XmlBufferReader.prototype.offset = 0;
$asm09.System.Xml.XmlBufferReader.prototype.chars = null;
$asm09.System.Xml.XmlBufferReader.prototype.windowOffset = 0;
$asm09.System.Xml.XmlBufferReader.prototype.windowOffsetMax = 0;
$asm09.System.Xml.XmlBufferReader.prototype.listValue = null;
$asm09.System.Xml.XmlBufferReader.emptyByteArray = null;
$asm09.System.Xml.XmlBufferReader.empty = null;
$asm09.System.Xml.XmlBufferReader._cctor = function () {
	$asm09.System.Xml.XmlBufferReader.emptyByteArray = JSIL.Array.New(System.Byte, 0);
	$asm09.System.Xml.XmlBufferReader.empty = JSIL.New($asm09.System.Xml.XmlBufferReader, "_ctor$1", [$asm09.System.Xml.XmlBufferReader.emptyByteArray]);
};

$asm09.System.Xml.XmlConverter.get_Base64Encoding = function () {
	if ($asm09.System.Xml.XmlConverter.base64Encoding === null) {
		$asm09.System.Xml.XmlConverter.base64Encoding = new $asm09.System.Text.Base64Encoding();
	}
	return $asm09.System.Xml.XmlConverter.base64Encoding;
};
$asm09.System.Xml.XmlConverter.get_UTF8Encoding = function () {
	if ($asm09.System.Xml.XmlConverter.utf8Encoding === null) {
		$asm09.System.Xml.XmlConverter.utf8Encoding = new System.Text.UTF8Encoding(false, true);
	}
	return $asm09.System.Xml.XmlConverter.utf8Encoding;
};
$asm09.System.Xml.XmlConverter.get_UnicodeEncoding = function () {
	if ($asm09.System.Xml.XmlConverter.unicodeEncoding === null) {
		$asm09.System.Xml.XmlConverter.unicodeEncoding = new System.Text.UnicodeEncoding(false, false, true);
	}
	return $asm09.System.Xml.XmlConverter.unicodeEncoding;
};
$asm09.System.Xml.XmlConverter.ToBoolean$0 = function (value) {
	try {
		var result = System.Xml.XmlConvert.ToBoolean(value);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.ArgumentException)) {
			var arg_09_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$1(value, "Boolean", arg_09_0));
		} else if (JSIL.CheckType($exception, System.FormatException)) {
			var arg_1C_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$1(value, "Boolean", arg_1C_0));
		} else {
			throw $exception;
		}
	}
	return result;
};
$asm09.System.Xml.XmlConverter.ToBoolean$1 = function (buffer, offset, count) {
	if (count === 1) {
		var b = buffer[offset];
		if (b === 49) {
			return true;
		}
		if (b === 48) {
			return false;
		}
	}
	return $asm09.System.Xml.XmlConverter.ToBoolean$0($asm09.System.Xml.XmlConverter.ToString$0(buffer, offset, count));
};
$asm09.System.Xml.XmlConverter.ToInt32$0 = function (value) {
	try {
		var result = System.Xml.XmlConvert.ToInt32(value);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.ArgumentException)) {
			var arg_09_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$1(value, "Int32", arg_09_0));
		} else if (JSIL.CheckType($exception, System.FormatException)) {
			var arg_1C_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$1(value, "Int32", arg_1C_0));
		} else if (JSIL.CheckType($exception, System.OverflowException)) {
			var arg_2F_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$1(value, "Int32", arg_2F_0));
		} else {
			throw $exception;
		}
	}
	return result;
};
$asm09.System.Xml.XmlConverter.ToInt32$1 = function (buffer, offset, count) {
	var result = new JSIL.Variable(0);
	if ($asm09.System.Xml.XmlConverter.TryParseInt32(buffer, offset, count, /* ref */ result)) {
		return result.value;
	}
	return $asm09.System.Xml.XmlConverter.ToInt32$0($asm09.System.Xml.XmlConverter.ToString$0(buffer, offset, count));
};
$asm09.System.Xml.XmlConverter.ToInt64$0 = function (value) {
	try {
		var result = System.Xml.XmlConvert.ToInt64(value);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.ArgumentException)) {
			var arg_09_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$1(value, "Int64", arg_09_0));
		} else if (JSIL.CheckType($exception, System.FormatException)) {
			var arg_1C_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$1(value, "Int64", arg_1C_0));
		} else if (JSIL.CheckType($exception, System.OverflowException)) {
			var arg_2F_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$1(value, "Int64", arg_2F_0));
		} else {
			throw $exception;
		}
	}
	return result;
};
$asm09.System.Xml.XmlConverter.ToInt64$1 = function (buffer, offset, count) {
	var result = new JSIL.Variable(0);
	if ($asm09.System.Xml.XmlConverter.TryParseInt64(buffer, offset, count, /* ref */ result)) {
		return result.value;
	}
	return $asm09.System.Xml.XmlConverter.ToInt64$0($asm09.System.Xml.XmlConverter.ToString$0(buffer, offset, count));
};
$asm09.System.Xml.XmlConverter.ToSingle$0 = function (value) {
	try {
		var result = System.Xml.XmlConvert.ToSingle(value);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.ArgumentException)) {
			var arg_09_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$1(value, "float", arg_09_0));
		} else if (JSIL.CheckType($exception, System.FormatException)) {
			var arg_1C_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$1(value, "float", arg_1C_0));
		} else if (JSIL.CheckType($exception, System.OverflowException)) {
			var arg_2F_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$1(value, "float", arg_2F_0));
		} else {
			throw $exception;
		}
	}
	return result;
};
$asm09.System.Xml.XmlConverter.ToSingle$1 = function (buffer, offset, count) {
	var result = new JSIL.Variable(0);
	if ($asm09.System.Xml.XmlConverter.TryParseSingle(buffer, offset, count, /* ref */ result)) {
		return result.value;
	}
	return $asm09.System.Xml.XmlConverter.ToSingle$0($asm09.System.Xml.XmlConverter.ToString$0(buffer, offset, count));
};
$asm09.System.Xml.XmlConverter.ToDouble$0 = function (value) {
	try {
		var result = System.Xml.XmlConvert.ToDouble(value);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.ArgumentException)) {
			var arg_09_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$1(value, "double", arg_09_0));
		} else if (JSIL.CheckType($exception, System.FormatException)) {
			var arg_1C_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$1(value, "double", arg_1C_0));
		} else if (JSIL.CheckType($exception, System.OverflowException)) {
			var arg_2F_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$1(value, "double", arg_2F_0));
		} else {
			throw $exception;
		}
	}
	return result;
};
$asm09.System.Xml.XmlConverter.ToDouble$1 = function (buffer, offset, count) {
	var result = new JSIL.Variable(0);
	if ($asm09.System.Xml.XmlConverter.TryParseDouble(buffer, offset, count, /* ref */ result)) {
		return result.value;
	}
	return $asm09.System.Xml.XmlConverter.ToDouble$0($asm09.System.Xml.XmlConverter.ToString$0(buffer, offset, count));
};
$asm09.System.Xml.XmlConverter.ToDecimal$0 = function (value) {
	try {
		var result = System.Xml.XmlConvert.ToDecimal(value).MemberwiseClone();
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.ArgumentException)) {
			var arg_09_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$1(value, "decimal", arg_09_0));
		} else if (JSIL.CheckType($exception, System.FormatException)) {
			var arg_1C_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$1(value, "decimal", arg_1C_0));
		} else if (JSIL.CheckType($exception, System.OverflowException)) {
			var arg_2F_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$1(value, "decimal", arg_2F_0));
		} else {
			throw $exception;
		}
	}
	return result;
};
$asm09.System.Xml.XmlConverter.ToDecimal$1 = function (buffer, offset, count) {
	return $asm09.System.Xml.XmlConverter.ToDecimal$0($asm09.System.Xml.XmlConverter.ToString$0(buffer, offset, count));
};
$asm09.System.Xml.XmlConverter.ToDateTime$0 = function (value) {
	try {
		var result = System.DateTime.FromBinary(value).MemberwiseClone();
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.ArgumentException)) {
			var arg_09_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$1($asm09.System.Xml.XmlConverter.ToString$3(value), "DateTime", arg_09_0));
		} else {
			throw $exception;
		}
	}
	return result;
};
$asm09.System.Xml.XmlConverter.ToDateTime$1 = function (value) {
	try {
		var result = System.Xml.XmlConvert.ToDateTime$2(value, System.Xml.XmlDateTimeSerializationMode.RoundtripKind).MemberwiseClone();
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.ArgumentException)) {
			var arg_0A_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$1(value, "DateTime", arg_0A_0));
		} else if (JSIL.CheckType($exception, System.FormatException)) {
			var arg_1D_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$1(value, "DateTime", arg_1D_0));
		} else {
			throw $exception;
		}
	}
	return result;
};
$asm09.System.Xml.XmlConverter.ToDateTime$2 = function (buffer, offset, count) {
	var result = new JSIL.Variable(new System.DateTime());
	if ($asm09.System.Xml.XmlConverter.TryParseDateTime(buffer, offset, count, /* ref */ result)) {
		return result.value;
	}
	return $asm09.System.Xml.XmlConverter.ToDateTime$1($asm09.System.Xml.XmlConverter.ToString$0(buffer, offset, count));
};
$asm09.System.Xml.XmlConverter.ToUniqueId$0 = function (value) {
	try {
		var result = JSIL.New(System.Xml.UniqueId, "_ctor$4", [$asm09.System.Xml.XmlConverter.Trim(value)]);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.ArgumentException)) {
			var arg_0E_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$1(value, "UniqueId", arg_0E_0));
		} else if (JSIL.CheckType($exception, System.FormatException)) {
			var arg_21_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$1(value, "UniqueId", arg_21_0));
		} else {
			throw $exception;
		}
	}
	return result;
};
$asm09.System.Xml.XmlConverter.ToUniqueId$1 = function (buffer, offset, count) {
	return $asm09.System.Xml.XmlConverter.ToUniqueId$0($asm09.System.Xml.XmlConverter.ToString$0(buffer, offset, count));
};
$asm09.System.Xml.XmlConverter.ToTimeSpan$0 = function (value) {
	try {
		var result = System.Xml.XmlConvert.ToTimeSpan(value).MemberwiseClone();
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.ArgumentException)) {
			var arg_09_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$1(value, "TimeSpan", arg_09_0));
		} else if (JSIL.CheckType($exception, System.FormatException)) {
			var arg_1C_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$1(value, "TimeSpan", arg_1C_0));
		} else if (JSIL.CheckType($exception, System.OverflowException)) {
			var arg_2F_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$1(value, "TimeSpan", arg_2F_0));
		} else {
			throw $exception;
		}
	}
	return result;
};
$asm09.System.Xml.XmlConverter.ToTimeSpan$1 = function (buffer, offset, count) {
	return $asm09.System.Xml.XmlConverter.ToTimeSpan$0($asm09.System.Xml.XmlConverter.ToString$0(buffer, offset, count));
};
$asm09.System.Xml.XmlConverter.ToGuid$0 = function (value) {
	try {
		var result = JSIL.New(System.Guid, "_ctor$4", [$asm09.System.Xml.XmlConverter.Trim(value)]);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.FormatException)) {
			var arg_0E_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$1(value, "Guid", arg_0E_0));
		} else if (JSIL.CheckType($exception, System.ArgumentException)) {
			var arg_21_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$1(value, "Guid", arg_21_0));
		} else if (JSIL.CheckType($exception, System.OverflowException)) {
			var arg_34_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$1(value, "Guid", arg_34_0));
		} else {
			throw $exception;
		}
	}
	return result;
};
$asm09.System.Xml.XmlConverter.ToGuid$1 = function (buffer, offset, count) {
	return $asm09.System.Xml.XmlConverter.ToGuid$0($asm09.System.Xml.XmlConverter.ToString$0(buffer, offset, count));
};
$asm09.System.Xml.XmlConverter.ToUInt64$0 = function (value) {
	try {
		var result = System.UInt64.Parse(value, (System.Globalization.NumberStyles.AllowCurrencySymbol | System.Globalization.NumberStyles.AllowDecimalPoint | System.Globalization.NumberStyles.AllowExponent | System.Globalization.NumberStyles.AllowLeadingSign | System.Globalization.NumberStyles.AllowLeadingWhite | System.Globalization.NumberStyles.AllowParentheses | System.Globalization.NumberStyles.AllowThousands | System.Globalization.NumberStyles.AllowTrailingSign | System.Globalization.NumberStyles.AllowTrailingWhite | System.Globalization.NumberStyles.Any | System.Globalization.NumberStyles.Currency | System.Globalization.NumberStyles.Float | System.Globalization.NumberStyles.Integer | System.Globalization.NumberStyles.Number), System.Globalization.NumberFormatInfo.InvariantInfo);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.ArgumentException)) {
			var arg_13_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$1(value, "UInt64", arg_13_0));
		} else if (JSIL.CheckType($exception, System.FormatException)) {
			var arg_26_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$1(value, "UInt64", arg_26_0));
		} else if (JSIL.CheckType($exception, System.OverflowException)) {
			var arg_39_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateConversionException$1(value, "UInt64", arg_39_0));
		} else {
			throw $exception;
		}
	}
	return result;
};
$asm09.System.Xml.XmlConverter.ToUInt64$1 = function (buffer, offset, count) {
	return $asm09.System.Xml.XmlConverter.ToUInt64$0($asm09.System.Xml.XmlConverter.ToString$0(buffer, offset, count));
};
$asm09.System.Xml.XmlConverter.ToString$0 = function (buffer, offset, count) {
	try {
		var string = $asm09.System.Xml.XmlConverter.UTF8Encoding.GetString$1(buffer, offset, count);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.Text.DecoderFallbackException)) {
			var arg_10_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateEncodingException$0(buffer, offset, count, arg_10_0));
		} else {
			throw $exception;
		}
	}
	return string;
};
$asm09.System.Xml.XmlConverter.ToStringUnicode = function (buffer, offset, count) {
	try {
		var string = $asm09.System.Xml.XmlConverter.UnicodeEncoding.GetString$1(buffer, offset, count);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.Text.DecoderFallbackException)) {
			var arg_10_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateEncodingException$0(buffer, offset, count, arg_10_0));
		} else {
			throw $exception;
		}
	}
	return string;
};
$asm09.System.Xml.XmlConverter.ToBytes = function (value) {
	try {
		var bytes = $asm09.System.Xml.XmlConverter.UTF8Encoding.GetBytes$3(value);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.Text.DecoderFallbackException)) {
			var arg_0E_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateEncodingException$1(value, arg_0E_0));
		} else {
			throw $exception;
		}
	}
	return bytes;
};
$asm09.System.Xml.XmlConverter.ToChars$0 = function (buffer, offset, count, chars, charOffset) {
	try {
		var chars2 = $asm09.System.Xml.XmlConverter.UTF8Encoding.GetChars$2(
			buffer, 
			offset, 
			count, 
			chars, 
			charOffset
		);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.Text.DecoderFallbackException)) {
			var arg_13_0 = $exception;
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError($asm09.System.Xml.XmlExceptionHelper.CreateEncodingException$0(buffer, offset, count, arg_13_0));
		} else {
			throw $exception;
		}
	}
	return chars2;
};
$asm09.System.Xml.XmlConverter.ToString$1 = function (value) {
	if (!value) {
		return "false";
	}
	return "true";
};
$asm09.System.Xml.XmlConverter.ToString$2 = function (value) {
	return System.Xml.XmlConvert.ToString$5(value);
};
$asm09.System.Xml.XmlConverter.ToString$3 = function (value) {
	return System.Xml.XmlConvert.ToString$6(value);
};
$asm09.System.Xml.XmlConverter.ToString$4 = function (value) {
	return System.Xml.XmlConvert.ToString$9(value);
};
$asm09.System.Xml.XmlConverter.ToString$5 = function (value) {
	return System.Xml.XmlConvert.ToString$10(value);
};
$asm09.System.Xml.XmlConverter.ToString$6 = function (value) {
	return System.Xml.XmlConvert.ToString$2(value);
};
$asm09.System.Xml.XmlConverter.ToString$7 = function (value) {
	return System.Xml.XmlConvert.ToString$11(value);
};
$asm09.System.Xml.XmlConverter.ToString$8 = function (value) {
	return value.toString();
};
$asm09.System.Xml.XmlConverter.ToString$9 = function (value) {
	return value.toString();
};
$asm09.System.Xml.XmlConverter.ToString$10 = function (value) {
	return (value).toString();
};
$asm09.System.Xml.XmlConverter.ToString$11 = function (value) {
	var array = JSIL.Array.New(System.Byte, 64);
	var count = $asm09.System.Xml.XmlConverter.ToChars$1(value, array, 0);
	return $asm09.System.Xml.XmlConverter.ToString$0(array, 0, count);
};
$asm09.System.Xml.XmlConverter.ToString$12 = function (value) {
	if (JSIL.TryCast(value, System.Int32) !== 0) {
		return $asm09.System.Xml.XmlConverter.ToString$2(JSIL.Cast(value, System.Int32));
	}
	if (JSIL.TryCast(value, System.Int64) !== 0) {
		return $asm09.System.Xml.XmlConverter.ToString$3(JSIL.Cast(value, System.Int64));
	}
	if (JSIL.TryCast(value, System.Single) !== 0) {
		return $asm09.System.Xml.XmlConverter.ToString$4(JSIL.Cast(value, System.Single));
	}
	if (JSIL.TryCast(value, System.Double) !== 0) {
		return $asm09.System.Xml.XmlConverter.ToString$5(JSIL.Cast(value, System.Double));
	}
	if (JSIL.TryCast(value, System.Decimal) !== 0) {
		return $asm09.System.Xml.XmlConverter.ToString$6(JSIL.Cast(value, System.Decimal).MemberwiseClone());
	}
	if (JSIL.TryCast(value, System.TimeSpan) !== new System.TimeSpan()) {
		return $asm09.System.Xml.XmlConverter.ToString$7(JSIL.Cast(value, System.TimeSpan).MemberwiseClone());
	}
	if (JSIL.TryCast(value, System.Xml.UniqueId) !== null) {
		return $asm09.System.Xml.XmlConverter.ToString$8(JSIL.Cast(value, System.Xml.UniqueId));
	}
	if (JSIL.TryCast(value, System.Guid) !== new System.Guid()) {
		return $asm09.System.Xml.XmlConverter.ToString$9(JSIL.Cast(value, System.Guid).MemberwiseClone());
	}
	if (JSIL.TryCast(value, System.UInt64) !== 0) {
		return $asm09.System.Xml.XmlConverter.ToString$10(JSIL.Cast(value, System.UInt64));
	}
	if (JSIL.TryCast(value, System.DateTime) !== new System.DateTime()) {
		return $asm09.System.Xml.XmlConverter.ToString$11(JSIL.Cast(value, System.DateTime).MemberwiseClone());
	}
	if (JSIL.TryCast(value, System.Boolean)) {
		return $asm09.System.Xml.XmlConverter.ToString$1(JSIL.Cast(value, System.Boolean));
	}
	return value.toString();
};
$asm09.System.Xml.XmlConverter.ToString$13 = function (objects) {
	if (objects.length === 0) {
		return System.String.Empty;
	}
	var text = $asm09.System.Xml.XmlConverter.ToString$12(objects[0]);
	if (objects.length > 1) {
		var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$2", [text]);
	__loop0__: 
		for (var i = 1; i < objects.length; ++i) {
			stringBuilder.Append$7(" ");
			stringBuilder.Append$2($asm09.System.Xml.XmlConverter.ToString$12(objects[i]));
		}
		text = stringBuilder.toString();
	}
	return text;
};
$asm09.System.Xml.XmlConverter.ToQualifiedName = function (qname, /* ref */ prefix, /* ref */ localName) {
	var num = qname.IndexOf$0(":");
	if (num < 0) {
		prefix.value = System.String.Empty;
		localName.value = $asm09.System.Xml.XmlConverter.Trim(qname);
		return;
	}
	if (num === (qname.length - 1)) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Xml.XmlException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("XmlInvalidQualifiedName", [qname])]));
	}
	prefix.value = $asm09.System.Xml.XmlConverter.Trim(qname.Substring$1(0, num));
	localName.value = $asm09.System.Xml.XmlConverter.Trim(qname.Substring$0((num + 1)));
};
$asm09.System.Xml.XmlConverter.TryParseInt32 = function (chars, offset, count, /* ref */ result) {
	result.value = 0;
	if (count === 0) {
		return false;
	}
	var num = 0;
	var num2 = (offset + count);
	if (chars[offset] === 45) {
		if (count === 1) {
			return false;
		}
	__loop1__: 
		for (var i = (offset + 1); i < num2; ++i) {
			var num3 = (chars[i] - 48);
			if (num3 > 9) {
				return false;
			}
			if (num < -214748364) {
				return false;
			}
			num *= 10;
			if (num < (-2147483648 + num3)) {
				return false;
			}
			num -= num3;
		}
	} else {
	__loop0__: 
		for (var j = offset; j < num2; ++j) {
			var num4 = (chars[j] - 48);
			if (num4 > 9) {
				return false;
			}
			if (num > 214748364) {
				return false;
			}
			num *= 10;
			if (num > (2147483647 - num4)) {
				return false;
			}
			num += num4;
		}
	}
	result.value = num;
	return true;
};
$asm09.System.Xml.XmlConverter.TryParseInt64 = function (chars, offset, count, /* ref */ result) {
	var num5 = new JSIL.Variable(0);
	result.value = 0;
	if (count >= 11) {
		var num = 0;
		var num2 = (offset + count);
		if (chars[offset] === 45) {
			if (count === 1) {
				return false;
			}
		__loop1__: 
			for (var i = (offset + 1); i < num2; ++i) {
				var num3 = (chars[i] - 48);
				if (num3 > 9) {
					return false;
				}
				if (num < -922337203685477580) {
					return false;
				}
				num *= 10;
				if (num < (-9223372036854775808 + num3)) {
					return false;
				}
				num -= num3;
			}
		} else {
		__loop0__: 
			for (var j = offset; j < num2; ++j) {
				var num4 = (chars[j] - 48);
				if (num4 > 9) {
					return false;
				}
				if (num > 922337203685477580) {
					return false;
				}
				num *= 10;
				if (num > (9223372036854775807 - num4)) {
					return false;
				}
				num += num4;
			}
		}
		result.value = num;
		return true;
	}
	if (!$asm09.System.Xml.XmlConverter.TryParseInt32(chars, offset, count, /* ref */ num5)) {
		return false;
	}
	result.value = num5.value;
	return true;
};
$asm09.System.Xml.XmlConverter.TryParseSingle = function (chars, offset, count, /* ref */ result) {
	result.value = 0;
	var num = (offset + count);
	var flag = false;
	if (!((offset >= num) || (chars[offset] !== 45))) {
		flag = true;
		++offset;
		--count;
	}
	if (!((count >= 1) && (count <= 10))) {
		return false;
	}
	var num2 = 0;
__loop0__: 
	while (offset < num) {
		var num3 = (chars[offset] - 48);
		if (num3 === -2) {
			++offset;
			var num4 = 1;
		__loop1__: 
			while (offset < num) {
				num3 = (chars[offset] - 48);
				if (num3 >= 10) {
					return false;
				}
				num4 *= 10;
				num2 = ((num2 * 10) + num3);
				++offset;
			}
			if (count > 8) {
				result.value = Math.floor(num2 / num4);
			} else {
				result.value = Math.floor(num2 / num4);
			}
			if (flag) {
				result.value = -result.value;
			}
			return true;
		}
		if (num3 >= 10) {
			return false;
		}
		num2 = ((num2 * 10) + num3);
		++offset;
	}
	if (count === 10) {
		return false;
	}
	if (flag) {
		result.value = -num2;
	} else {
		result.value = num2;
	}
	return true;
};
$asm09.System.Xml.XmlConverter.TryParseDouble = function (chars, offset, count, /* ref */ result) {
	result.value = 0;
	var num = (offset + count);
	var flag = false;
	if (!((offset >= num) || (chars[offset] !== 45))) {
		flag = true;
		++offset;
		--count;
	}
	if (!((count >= 1) && (count <= 10))) {
		return false;
	}
	var num2 = 0;
__loop0__: 
	while (offset < num) {
		var num3 = (chars[offset] - 48);
		if (num3 === -2) {
			++offset;
			var num4 = 1;
		__loop1__: 
			while (offset < num) {
				num3 = (chars[offset] - 48);
				if (num3 >= 10) {
					return false;
				}
				num4 *= 10;
				num2 = ((num2 * 10) + num3);
				++offset;
			}
			if (flag) {
				result.value = (-num2 / num4);
			} else {
				result.value = Math.floor(num2 / num4);
			}
			return true;
		}
		if (num3 >= 10) {
			return false;
		}
		num2 = ((num2 * 10) + num3);
		++offset;
	}
	if (count === 10) {
		return false;
	}
	if (flag) {
		result.value = -num2;
	} else {
		result.value = num2;
	}
	return true;
};
$asm09.System.Xml.XmlConverter.ToInt32D2 = function (chars, offset) {
	var b = (chars[offset] - 48);
	var b2 = (chars[(offset + 1)] - 48);
	if (!((b <= 9) && (b2 <= 9))) {
		return -1;
	}
	return ((10 * b) + b2);
};
$asm09.System.Xml.XmlConverter.ToInt32D4 = function (chars, offset, count) {
	return $asm09.System.Xml.XmlConverter.ToInt32D7(chars, offset, count);
};
$asm09.System.Xml.XmlConverter.ToInt32D7 = function (chars, offset, count) {
	var num = 0;
__loop0__: 
	for (var i = 0; i < count; ++i) {
		var b = (chars[(offset + i)] - 48);
		if (b > 9) {
			return -1;
		}
		num = ((num * 10) + b);
	}
	return num;
};
$asm09.System.Xml.XmlConverter.TryParseDateTime = function (chars, offset, count, /* ref */ result) {
	var timeSpan = new System.TimeSpan();
	var num = (offset + count);
	result.value = System.DateTime.MaxValue.MemberwiseClone();
	if (count < 19) {
		return false;
	}
	if (!((chars[(offset + 4)] === 45) && 
			(chars[(offset + 7)] === 45) && 
			(chars[(offset + 10)] === 84) && 
			(chars[(offset + 13)] === 58) && (chars[(offset + 16)] === 58))) {
		return false;
	}
	var num2 = $asm09.System.Xml.XmlConverter.ToInt32D4(chars, offset, 4);
	var num3 = $asm09.System.Xml.XmlConverter.ToInt32D2(chars, (offset + 5));
	var num4 = $asm09.System.Xml.XmlConverter.ToInt32D2(chars, (offset + 8));
	var num5 = $asm09.System.Xml.XmlConverter.ToInt32D2(chars, (offset + 11));
	var num6 = $asm09.System.Xml.XmlConverter.ToInt32D2(chars, (offset + 14));
	var num7 = $asm09.System.Xml.XmlConverter.ToInt32D2(chars, (offset + 17));
	if ((((((num2 | num3) | num4) | num5) | num6) | num7) < 0) {
		return false;
	}
	var kind = System.DateTimeKind.Unspecified;
	offset += 19;
	var num8 = 0;
	if (!((offset >= num) || (chars[offset] !== 46))) {
		++offset;
		var num9 = offset;
	__loop0__: 
		while (offset < num) {
			var b = chars[offset];
			if ((b < 48) || (b > 57)) {
				break __loop0__;
			}
			++offset;
		}
		var num10 = (offset - num9);
		if (!((num10 >= 1) && (num10 <= 7))) {
			return false;
		}
		num8 = $asm09.System.Xml.XmlConverter.ToInt32D7(chars, num9, num10);
		if (num8 < 0) {
			return false;
		}
	__loop1__: 
		for (var i = num10; i < 7; ++i) {
			num8 *= 10;
		}
	}
	var flag = false;
	var num11 = 0;
	var num12 = 0;
	if (offset < num) {
		var b2 = chars[offset];
		if (b2 === 90) {
			++offset;
			kind = System.DateTimeKind.Utc;
		} else if (!((b2 !== 43) && (b2 !== 45))) {
			++offset;
			if (!(((offset + 5) <= num) && (chars[(offset + 2)] === 58))) {
				return false;
			}
			kind = System.DateTimeKind.Utc;
			flag = true;
			num11 = $asm09.System.Xml.XmlConverter.ToInt32D2(chars, offset);
			num12 = $asm09.System.Xml.XmlConverter.ToInt32D2(chars, (offset + 3));
			if ((num11 | num12) < 0) {
				return false;
			}
			if (b2 === 43) {
				num11 = -num11;
				num12 = -num12;
			}
			offset += 5;
		}
	}
	if (offset < num) {
		return false;
	}
	try {
		var dateTime = JSIL.New(System.DateTime, "_ctor$7", [num2, num3, num4, num5, num6, num7, kind]);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.ArgumentException)) {
			var result2 = false;
			return result2;
		} else {
			throw $exception;
		}
	}
	if (num8 > 0) {
		dateTime = dateTime.AddTicks(num8).MemberwiseClone();
	}
	if (flag) {
		try {
			timeSpan._ctor$1(num11, num12, 0);
			if (!(!((num11 >= 0) && 
						System.DateTime.op_LessThan(dateTime.MemberwiseClone(), System.DateTime.op_Subtraction$0(System.DateTime.MaxValue.MemberwiseClone(), timeSpan.MemberwiseClone()).MemberwiseClone())) && ((num11 >= 0) || 
						!System.DateTime.op_GreaterThan(dateTime.MemberwiseClone(), System.DateTime.op_Subtraction$0(System.DateTime.MinValue.MemberwiseClone(), timeSpan.MemberwiseClone()).MemberwiseClone())))) {
				dateTime = dateTime.Add$0(timeSpan.MemberwiseClone()).ToLocalTime().MemberwiseClone();
			} else {
				dateTime = dateTime.ToLocalTime().Add$0(timeSpan.MemberwiseClone()).MemberwiseClone();
			}
		} catch ($exception) {
			if (JSIL.CheckType($exception, System.ArgumentOutOfRangeException)) {
				result2 = false;
				return result2;
			} else {
				throw $exception;
			}
		}
	}
	result.value = dateTime.MemberwiseClone();
	return true;
};
$asm09.System.Xml.XmlConverter.ToCharsR = function (value, chars, offset) {
	var num = 0;
	if (value >= 0) {
	__loop1__: 
		while (value >= 10) {
			var num2 = Math.floor(value / 10);
			++num;
			chars[--offset] = (48 + (value - (num2 * 10)));
			value = num2;
		}
		chars[--offset] = (48 + value);
		++num;
	} else {
	__loop0__: 
		while (value <= -10) {
			var num3 = Math.floor(value / 10);
			++num;
			chars[--offset] = (48 - (value - (num3 * 10)));
			value = num3;
		}
		chars[--offset] = (48 - value);
		chars[--offset] = 45;
		num += 2;
	}
	return num;
};
$asm09.System.Xml.XmlConverter.ToCharsD2 = function (value, chars, offset) {
	if (value < 10) {
		chars[offset] = 48;
		chars[(offset + 1)] = (48 + value);
	} else {
		var num = Math.floor(value / 10);
		chars[offset] = (48 + num);
		chars[(offset + 1)] = ((48 + value) - (num * 10));
	}
	return 2;
};
$asm09.System.Xml.XmlConverter.ToCharsD4 = function (value, chars, offset) {
	$asm09.System.Xml.XmlConverter.ToCharsD2(Math.floor(value / 100), chars, offset);
	$asm09.System.Xml.XmlConverter.ToCharsD2((value % 100), chars, (offset + 2));
	return 4;
};
$asm09.System.Xml.XmlConverter.ToCharsD7 = function (value, chars, offset) {
	var num = (7 - $asm09.System.Xml.XmlConverter.ToCharsR(value, chars, (offset + 7)));
__loop0__: 
	for (var i = 0; i < num; ++i) {
		chars[(offset + i)] = 48;
	}
__loop1__: 
	for (var num2 = 7; (num2 > 0) && (chars[((offset + num2) - 1)] === 48); --num2) {
	}
	return num2;
};
$asm09.System.Xml.XmlConverter.ToChars$1 = function (value, chars, offset) {
	var num = offset;
	offset += $asm09.System.Xml.XmlConverter.ToCharsD4(value.Year, chars, offset);
	chars[offset++] = 45;
	offset += $asm09.System.Xml.XmlConverter.ToCharsD2(value.Month, chars, offset);
	chars[offset++] = 45;
	offset += $asm09.System.Xml.XmlConverter.ToCharsD2(value.Day, chars, offset);
	chars[offset++] = 84;
	offset += $asm09.System.Xml.XmlConverter.ToCharsD2(value.Hour, chars, offset);
	chars[offset++] = 58;
	offset += $asm09.System.Xml.XmlConverter.ToCharsD2(value.Minute, chars, offset);
	chars[offset++] = 58;
	offset += $asm09.System.Xml.XmlConverter.ToCharsD2(value.Second, chars, offset);
	var num2 = (value.Ticks % 10000000);
	if (num2 !== 0) {
		chars[offset++] = 46;
		offset += $asm09.System.Xml.XmlConverter.ToCharsD7(num2, chars, offset);
	}
	switch (Number(value.Kind)) {
		case 0: 
			break;
		case 1: 
			chars[offset++] = 90;
			break;
		case 2: 
			var utcOffset = System.TimeZoneInfo.Local.GetUtcOffset$1(value.MemberwiseClone()).MemberwiseClone();
			if (utcOffset.Ticks < 0) {
				chars[offset++] = 45;
			} else {
				chars[offset++] = 43;
			}
			offset += $asm09.System.Xml.XmlConverter.ToCharsD2(Math.abs(utcOffset.Hours), chars, offset);
			chars[offset++] = 58;
			offset += $asm09.System.Xml.XmlConverter.ToCharsD2(Math.abs(utcOffset.Minutes), chars, offset);
			break;
		default: 
			throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.InvalidOperationException, "_ctor$0", []));
	}
	return (offset - num);
};
$asm09.System.Xml.XmlConverter.IsWhitespace$0 = function (s) {
__loop0__: 
	for (var i = 0; i < s.length; ++i) {
		if (!$asm09.System.Xml.XmlConverter.IsWhitespace$1(s[i])) {
			return false;
		}
	}
	return true;
};
$asm09.System.Xml.XmlConverter.IsWhitespace$1 = function (ch) {
	return ((ch <= " ") && ((ch === " ") || 
			(ch === "\t") || 
			(ch === "\r") || 
			(ch === "\n")));
};
$asm09.System.Xml.XmlConverter.StripWhitespace = function (s) {
	var num = s.length;
__loop0__: 
	for (var i = 0; i < s.length; ++i) {
		if ($asm09.System.Xml.XmlConverter.IsWhitespace$1(s[i])) {
			--num;
		}
	}
	if (num === s.length) {
		return s;
	}
	var array = JSIL.Array.New(System.Char, num);
	num = 0;
__loop1__: 
	for (var j = 0; j < s.length; ++j) {
		var c = (s[j]);
		if (!$asm09.System.Xml.XmlConverter.IsWhitespace$1(c)) {
			array[num++] = c;
		}
	}
	return JSIL.New(System.String, "_ctor$1", [array]);
};
$asm09.System.Xml.XmlConverter.Trim = function (s) {
__loop0__: 
	for (var num = 0; (num < s.length) && $asm09.System.Xml.XmlConverter.IsWhitespace$1(s[num]); ++num) {
	}
__loop1__: 
	for (var num2 = s.length; (num2 > 0) && $asm09.System.Xml.XmlConverter.IsWhitespace$1(s[(num2 - 1)]); --num2) {
	}
	if (!((num !== 0) || (num2 !== s.length))) {
		return s;
	}
	if (num2 === 0) {
		return System.String.Empty;
	}
	return s.Substring$1(num, (num2 - num));
};
JSIL.OverloadedMethod($asm09.System.Xml.XmlConverter, "ToBoolean", [
		["ToBoolean$0", [System.String]], 
		["ToBoolean$1", [System.Array.Of(System.Byte), System.Int32, System.Int32]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlConverter, "ToInt32", [
		["ToInt32$0", [System.String]], 
		["ToInt32$1", [System.Array.Of(System.Byte), System.Int32, System.Int32]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlConverter, "ToInt64", [
		["ToInt64$0", [System.String]], 
		["ToInt64$1", [System.Array.Of(System.Byte), System.Int32, System.Int32]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlConverter, "ToSingle", [
		["ToSingle$0", [System.String]], 
		["ToSingle$1", [System.Array.Of(System.Byte), System.Int32, System.Int32]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlConverter, "ToDouble", [
		["ToDouble$0", [System.String]], 
		["ToDouble$1", [System.Array.Of(System.Byte), System.Int32, System.Int32]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlConverter, "ToDecimal", [
		["ToDecimal$0", [System.String]], 
		["ToDecimal$1", [System.Array.Of(System.Byte), System.Int32, System.Int32]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlConverter, "ToDateTime", [
		["ToDateTime$0", [System.Int64]], 
		["ToDateTime$1", [System.String]], 
		["ToDateTime$2", [System.Array.Of(System.Byte), System.Int32, System.Int32]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlConverter, "ToUniqueId", [
		["ToUniqueId$0", [System.String]], 
		["ToUniqueId$1", [System.Array.Of(System.Byte), System.Int32, System.Int32]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlConverter, "ToTimeSpan", [
		["ToTimeSpan$0", [System.String]], 
		["ToTimeSpan$1", [System.Array.Of(System.Byte), System.Int32, System.Int32]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlConverter, "ToGuid", [
		["ToGuid$0", [System.String]], 
		["ToGuid$1", [System.Array.Of(System.Byte), System.Int32, System.Int32]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlConverter, "ToUInt64", [
		["ToUInt64$0", [System.String]], 
		["ToUInt64$1", [System.Array.Of(System.Byte), System.Int32, System.Int32]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlConverter, "ToString", [
		["ToString$0", [System.Array.Of(System.Byte), System.Int32, System.Int32]], 
		["ToString$1", [System.Boolean]], 
		["ToString$2", [System.Int32]], 
		["ToString$3", [System.Int64]], 
		["ToString$4", [System.Single]], 
		["ToString$5", [System.Double]], 
		["ToString$6", [System.Decimal]], 
		["ToString$7", [System.TimeSpan]], 
		["ToString$8", [System.Xml.UniqueId]], 
		["ToString$9", [System.Guid]], 
		["ToString$10", [System.UInt64]], 
		["ToString$11", [System.DateTime]], 
		["ToString$12", [System.Object]], 
		["ToString$13", [System.Array.Of(System.Object)]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlConverter, "ToChars", [
		["ToChars$0", [System.Array.Of(System.Byte), System.Int32, System.Int32, System.Array.Of(System.Char), System.Int32]], 
		["ToChars$1", [System.DateTime, System.Array.Of(System.Byte), System.Int32]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlConverter, "IsWhitespace", [
		["IsWhitespace$0", [System.String]], 
		["IsWhitespace$1", [System.Char]]
	]);
JSIL.MakeProperty($asm09.System.Xml.XmlConverter, "Base64Encoding", 
	$asm09.System.Xml.XmlConverter.get_Base64Encoding, null);
JSIL.MakeProperty($asm09.System.Xml.XmlConverter, "UTF8Encoding", 
	$asm09.System.Xml.XmlConverter.get_UTF8Encoding, null);
JSIL.MakeProperty($asm09.System.Xml.XmlConverter, "UnicodeEncoding", 
	$asm09.System.Xml.XmlConverter.get_UnicodeEncoding, null);
Object.defineProperty($asm09.System.Xml.XmlConverter, "MaxDateTimeChars", {
		"value": 64}
);
Object.defineProperty($asm09.System.Xml.XmlConverter, "MaxInt32Chars", {
		"value": 16}
);
Object.defineProperty($asm09.System.Xml.XmlConverter, "MaxInt64Chars", {
		"value": 32}
);
Object.defineProperty($asm09.System.Xml.XmlConverter, "MaxBoolChars", {
		"value": 5}
);
Object.defineProperty($asm09.System.Xml.XmlConverter, "MaxFloatChars", {
		"value": 16}
);
Object.defineProperty($asm09.System.Xml.XmlConverter, "MaxDoubleChars", {
		"value": 32}
);
Object.defineProperty($asm09.System.Xml.XmlConverter, "MaxDecimalChars", {
		"value": 40}
);
Object.defineProperty($asm09.System.Xml.XmlConverter, "MaxUInt64Chars", {
		"value": 32}
);
Object.defineProperty($asm09.System.Xml.XmlConverter, "MaxPrimitiveChars", {
		"value": 64}
);
$asm09.System.Xml.XmlConverter.utf8Encoding = null;
$asm09.System.Xml.XmlConverter.unicodeEncoding = null;
$asm09.System.Xml.XmlConverter.base64Encoding = null;

System.Xml.XmlDictionary.get_Empty = function () {
	if (System.Xml.XmlDictionary.empty === null) {
		System.Xml.XmlDictionary.empty = new $asm09.System.Xml.XmlDictionary.EmptyDictionary();
	}
	return System.Xml.XmlDictionary.empty;
};
System.Xml.XmlDictionary.prototype._ctor$0 = function () {
	System.Object.prototype._ctor.call(this);
	this.lookup = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.String, System.Xml.XmlDictionaryString), "_ctor$0", []);
	this.strings = null;
	this.nextId = 0;
};
System.Xml.XmlDictionary.prototype._ctor$1 = function (capacity) {
	System.Object.prototype._ctor.call(this);
	this.lookup = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.String, System.Xml.XmlDictionaryString), "_ctor$1", [capacity]);
	this.strings = JSIL.Array.New(System.Xml.XmlDictionaryString, capacity);
	this.nextId = 0;
};
System.Xml.XmlDictionary.prototype.Add = function (value) {
	if (!this.lookup.TryGetValue(value, /* ref */ xmlDictionaryString)) {
		if (this.strings === null) {
			this.strings = JSIL.Array.New(System.Xml.XmlDictionaryString, 4);
		} else if (this.nextId === this.strings.length) {
			var num = (this.nextId * 2);
			if (num === 0) {
				num = 4;
			}
			System.Array.Resize$b1(System.Xml.XmlDictionaryString)(/* ref */ new JSIL.MemberReference(this, "strings"), num);
		}
		var xmlDictionaryString = new JSIL.Variable(new System.Xml.XmlDictionaryString(this, value, this.nextId));
		this.strings[this.nextId] = xmlDictionaryString.value;
		this.lookup.Add(value, xmlDictionaryString.value);
		++this.nextId;
	}
	return xmlDictionaryString.value;
};
System.Xml.XmlDictionary.prototype.TryLookup$0 = function (value, /* ref */ result) {
	return this.lookup.TryGetValue(value, /* ref */ result);
};
System.Xml.XmlDictionary.prototype.TryLookup$1 = function (key, /* ref */ result) {
	if (!((key >= 0) && (key < this.nextId))) {
		result.value = null;
		return false;
	}
	result.value = this.strings[key];
	return true;
};
System.Xml.XmlDictionary.prototype.TryLookup$2 = function (value, /* ref */ result) {
	if (value === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentNullException, "_ctor$1", ["value"]));
	}
	if (value.Dictionary !== this) {
		result.value = null;
		return false;
	}
	result.value = value;
	return true;
};
JSIL.OverloadedMethod(System.Xml.XmlDictionary.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Int32]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlDictionary.prototype, "TryLookup", [
		["TryLookup$0", [System.String, JSIL.Reference.Of(System.Xml.XmlDictionaryString)]], 
		["TryLookup$1", [System.Int32, JSIL.Reference.Of(System.Xml.XmlDictionaryString)]], 
		["TryLookup$2", [System.Xml.XmlDictionaryString, JSIL.Reference.Of(System.Xml.XmlDictionaryString)]]
	]);
JSIL.MakeProperty(System.Xml.XmlDictionary, "Empty", 
	System.Xml.XmlDictionary.get_Empty, null);
System.Xml.XmlDictionary.empty = null;
System.Xml.XmlDictionary.prototype.lookup = null;
System.Xml.XmlDictionary.prototype.strings = null;
System.Xml.XmlDictionary.prototype.nextId = 0;

$asm09.System.Xml.XmlDictionary.EmptyDictionary.prototype.TryLookup$0 = function (value, /* ref */ result) {
	result.value = null;
	return false;
};
$asm09.System.Xml.XmlDictionary.EmptyDictionary.prototype.TryLookup$1 = function (key, /* ref */ result) {
	result.value = null;
	return false;
};
$asm09.System.Xml.XmlDictionary.EmptyDictionary.prototype.TryLookup$2 = function (value, /* ref */ result) {
	result.value = null;
	return false;
};
$asm09.System.Xml.XmlDictionary.EmptyDictionary.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
JSIL.OverloadedMethod($asm09.System.Xml.XmlDictionary.EmptyDictionary.prototype, "TryLookup", [
		["TryLookup$0", [System.String, JSIL.Reference.Of(System.Xml.XmlDictionaryString)]], 
		["TryLookup$1", [System.Int32, JSIL.Reference.Of(System.Xml.XmlDictionaryString)]], 
		["TryLookup$2", [System.Xml.XmlDictionaryString, JSIL.Reference.Of(System.Xml.XmlDictionaryString)]]
	]);

System.Xml.XmlDictionaryReaderQuotas.prototype._ctor = function (maxDepth, maxStringContentLength, maxArrayLength, maxBytesPerRead, maxNameTableCharCount) {
	System.Object.prototype._ctor.call(this);
	this.maxDepth = maxDepth;
	this.maxStringContentLength = maxStringContentLength;
	this.maxArrayLength = maxArrayLength;
	this.maxBytesPerRead = maxBytesPerRead;
	this.maxNameTableCharCount = maxNameTableCharCount;
};
System.Xml.XmlDictionaryReaderQuotas.get_Max = function () {
	return System.Xml.XmlDictionaryReaderQuotas.maxQuota;
};
System.Xml.XmlDictionaryReaderQuotas.prototype.get_MaxStringContentLength = function () {
	return this.maxStringContentLength;
};
System.Xml.XmlDictionaryReaderQuotas.prototype.get_MaxArrayLength = function () {
	return this.maxArrayLength;
};
System.Xml.XmlDictionaryReaderQuotas.prototype.get_MaxBytesPerRead = function () {
	return this.maxBytesPerRead;
};
System.Xml.XmlDictionaryReaderQuotas.prototype.get_MaxDepth = function () {
	return this.maxDepth;
};
System.Xml.XmlDictionaryReaderQuotas.prototype.get_MaxNameTableCharCount = function () {
	return this.maxNameTableCharCount;
};
JSIL.MakeProperty(System.Xml.XmlDictionaryReaderQuotas, "Max", 
	System.Xml.XmlDictionaryReaderQuotas.get_Max, null);
JSIL.MakeProperty(System.Xml.XmlDictionaryReaderQuotas.prototype, "MaxStringContentLength", 
	System.Xml.XmlDictionaryReaderQuotas.prototype.get_MaxStringContentLength, null);
JSIL.MakeProperty(System.Xml.XmlDictionaryReaderQuotas.prototype, "MaxArrayLength", 
	System.Xml.XmlDictionaryReaderQuotas.prototype.get_MaxArrayLength, null);
JSIL.MakeProperty(System.Xml.XmlDictionaryReaderQuotas.prototype, "MaxBytesPerRead", 
	System.Xml.XmlDictionaryReaderQuotas.prototype.get_MaxBytesPerRead, null);
JSIL.MakeProperty(System.Xml.XmlDictionaryReaderQuotas.prototype, "MaxDepth", 
	System.Xml.XmlDictionaryReaderQuotas.prototype.get_MaxDepth, null);
JSIL.MakeProperty(System.Xml.XmlDictionaryReaderQuotas.prototype, "MaxNameTableCharCount", 
	System.Xml.XmlDictionaryReaderQuotas.prototype.get_MaxNameTableCharCount, null);
System.Xml.XmlDictionaryReaderQuotas.prototype.maxStringContentLength = 0;
System.Xml.XmlDictionaryReaderQuotas.prototype.maxArrayLength = 0;
System.Xml.XmlDictionaryReaderQuotas.prototype.maxDepth = 0;
System.Xml.XmlDictionaryReaderQuotas.prototype.maxNameTableCharCount = 0;
System.Xml.XmlDictionaryReaderQuotas.prototype.maxBytesPerRead = 0;
System.Xml.XmlDictionaryReaderQuotas.maxQuota = null;
System.Xml.XmlDictionaryReaderQuotas._cctor = function () {
	System.Xml.XmlDictionaryReaderQuotas.maxQuota = new System.Xml.XmlDictionaryReaderQuotas(2147483647, 2147483647, 2147483647, 2147483647, 2147483647);
};

System.Xml.XmlDictionaryString.prototype._ctor = function (dictionary, value, key) {
	System.Object.prototype._ctor.call(this);
	if (dictionary === null) {
		this.dictionary = new $asm09.System.Xml.XmlDictionaryString.EmptyStringDictionary();
	}
	if (value === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentNullException, "_ctor$1", ["value"]));
	}
	if (!((key >= 0) && (key <= 536870911))) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["key", $asm09.System.Runtime.Serialization.SR.GetString$0("ValueMustBeInRange", [0, 536870911])]));
	}
	this.dictionary = dictionary;
	this.value = value;
	this.key = key;
};
System.Xml.XmlDictionaryString.GetString = function (s) {
	if (s === null) {
		return null;
	}
	return s.Value;
};
System.Xml.XmlDictionaryString.get_Empty = function () {
	return System.Xml.XmlDictionaryString.emptyStringDictionary.EmptyString;
};
System.Xml.XmlDictionaryString.prototype.get_Dictionary = function () {
	return this.dictionary;
};
System.Xml.XmlDictionaryString.prototype.get_Key = function () {
	return this.key;
};
System.Xml.XmlDictionaryString.prototype.get_Value = function () {
	return this.value;
};
System.Xml.XmlDictionaryString.prototype.ToUTF8 = function () {
	if (this.buffer === null) {
		this.buffer = System.Text.Encoding.UTF8.GetBytes$3(this.value);
	}
	return this.buffer;
};
System.Xml.XmlDictionaryString.prototype.toString = function () {
	return this.value;
};
JSIL.MakeProperty(System.Xml.XmlDictionaryString, "Empty", 
	System.Xml.XmlDictionaryString.get_Empty, null);
JSIL.MakeProperty(System.Xml.XmlDictionaryString.prototype, "Dictionary", 
	System.Xml.XmlDictionaryString.prototype.get_Dictionary, null);
JSIL.MakeProperty(System.Xml.XmlDictionaryString.prototype, "Key", 
	System.Xml.XmlDictionaryString.prototype.get_Key, null);
JSIL.MakeProperty(System.Xml.XmlDictionaryString.prototype, "Value", 
	System.Xml.XmlDictionaryString.prototype.get_Value, null);
Object.defineProperty(System.Xml.XmlDictionaryString, "MinKey", {
		"value": 0}
);
Object.defineProperty(System.Xml.XmlDictionaryString, "MaxKey", {
		"value": 536870911}
);
System.Xml.XmlDictionaryString.prototype.dictionary = null;
System.Xml.XmlDictionaryString.prototype.value = null;
System.Xml.XmlDictionaryString.prototype.key = 0;
System.Xml.XmlDictionaryString.prototype.buffer = null;
System.Xml.XmlDictionaryString.emptyStringDictionary = null;
System.Xml.XmlDictionaryString._cctor = function () {
	System.Xml.XmlDictionaryString.emptyStringDictionary = new System.Xml.XmlDictionaryString.EmptyStringDictionary();
};

$asm09.System.Xml.XmlDictionaryString.EmptyStringDictionary.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
	this.empty = new System.Xml.XmlDictionaryString(this, System.String.Empty, 0);
};
$asm09.System.Xml.XmlDictionaryString.EmptyStringDictionary.prototype.get_EmptyString = function () {
	return this.empty;
};
$asm09.System.Xml.XmlDictionaryString.EmptyStringDictionary.prototype.TryLookup$0 = function (value, /* ref */ result) {
	if (value === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperArgumentNull("value");
	}
	if (value.length === 0) {
		result.value = this.empty;
		return true;
	}
	result.value = null;
	return false;
};
$asm09.System.Xml.XmlDictionaryString.EmptyStringDictionary.prototype.TryLookup$1 = function (key, /* ref */ result) {
	if (key === 0) {
		result.value = this.empty;
		return true;
	}
	result.value = null;
	return false;
};
$asm09.System.Xml.XmlDictionaryString.EmptyStringDictionary.prototype.TryLookup$2 = function (value, /* ref */ result) {
	if (value === null) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentNullException, "_ctor$1", ["value"]));
	}
	if (value.Dictionary !== this) {
		result.value = null;
		return false;
	}
	result.value = value;
	return true;
};
JSIL.OverloadedMethod(System.Xml.XmlDictionaryString.EmptyStringDictionary.prototype, "TryLookup", [
		["TryLookup$0", [System.String, JSIL.Reference.Of(System.Xml.XmlDictionaryString)]], 
		["TryLookup$1", [System.Int32, JSIL.Reference.Of(System.Xml.XmlDictionaryString)]], 
		["TryLookup$2", [System.Xml.XmlDictionaryString, JSIL.Reference.Of(System.Xml.XmlDictionaryString)]]
	]);
JSIL.MakeProperty($asm09.System.Xml.XmlDictionaryString.EmptyStringDictionary.prototype, "EmptyString", 
	$asm09.System.Xml.XmlDictionaryString.EmptyStringDictionary.prototype.get_EmptyString, null);
$asm09.System.Xml.XmlDictionaryString.EmptyStringDictionary.prototype.empty = null;

$asm09.System.Xml.XmlExceptionHelper.ThrowXmlException$0 = function (reader, res) {
	$asm09.System.Xml.XmlExceptionHelper.ThrowXmlException$1(reader, res, null);
};
$asm09.System.Xml.XmlExceptionHelper.ThrowXmlException$1 = function (reader, res, arg1) {
	$asm09.System.Xml.XmlExceptionHelper.ThrowXmlException$2(reader, res, arg1, null);
};
$asm09.System.Xml.XmlExceptionHelper.ThrowXmlException$2 = function (reader, res, arg1, arg2) {
	$asm09.System.Xml.XmlExceptionHelper.ThrowXmlException$3(
		reader, 
		res, 
		arg1, 
		arg2, 
		null
	);
};
$asm09.System.Xml.XmlExceptionHelper.ThrowXmlException$3 = function (reader, res, arg1, arg2, arg3) {
	var text = $asm09.System.Runtime.Serialization.SR.GetString$0(res, [arg1, arg2, arg3]);
	var xmlLineInfo = JSIL.TryCast(reader, System.Xml.IXmlLineInfo);
	if (!((xmlLineInfo === null) || !xmlLineInfo.IXmlLineInfo_HasLineInfo())) {
		text = ((text + " " + $asm09.System.Runtime.Serialization.SR.GetString$0("XmlLineInfo", [xmlLineInfo.IXmlLineInfo_LineNumber, xmlLineInfo.IXmlLineInfo_LinePosition])));
	}
	throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Xml.XmlException, "_ctor$1", [text]));
};
$asm09.System.Xml.XmlExceptionHelper.ThrowXmlException$4 = function (reader, exception) {
	var text = exception.Message;
	var xmlLineInfo = JSIL.TryCast(reader, System.Xml.IXmlLineInfo);
	if (!((xmlLineInfo === null) || !xmlLineInfo.IXmlLineInfo_HasLineInfo())) {
		text = ((text + " " + $asm09.System.Runtime.Serialization.SR.GetString$0("XmlLineInfo", [xmlLineInfo.IXmlLineInfo_LineNumber, xmlLineInfo.IXmlLineInfo_LinePosition])));
	}
	throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.Xml.XmlException, "_ctor$1", [text]));
};
$asm09.System.Xml.XmlExceptionHelper.GetName = function (prefix, localName) {
	if (prefix.length === 0) {
		return localName;
	}
	return (prefix + ":" + localName);
};
$asm09.System.Xml.XmlExceptionHelper.GetWhatWasFound = function (reader) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				if (reader.EOF) {
					return $asm09.System.Runtime.Serialization.SR.GetString$2("XmlFoundEndOfFile");
				}
				var nodeType = reader.NodeType;
				switch (Number(nodeType)) {
					case 1: 
						return $asm09.System.Runtime.Serialization.SR.GetString$0("XmlFoundElement", [$asm09.System.Xml.XmlExceptionHelper.GetName(reader.Prefix, reader.LocalName), reader.NamespaceURI]);
					case 2: 
						__label0__ = "IL_10D";
						continue __step0__;
					case 3: 
						break;
					case 4: 
						return $asm09.System.Runtime.Serialization.SR.GetString$0("XmlFoundCData", [reader.Value]);
					default: 
						if (nodeType === System.Xml.XmlNodeType.Comment) {
							return $asm09.System.Runtime.Serialization.SR.GetString$0("XmlFoundComment", [reader.Value]);
						}
						switch (Number(nodeType)) {
							case 13: 
							case 14: 
								break;
							case 15: 
								return $asm09.System.Runtime.Serialization.SR.GetString$0("XmlFoundEndElement", [$asm09.System.Xml.XmlExceptionHelper.GetName(reader.Prefix, reader.LocalName), reader.NamespaceURI]);
							default: 
								__label0__ = "IL_10D";
								continue __step0__;
						}
						break;
				}
				return $asm09.System.Runtime.Serialization.SR.GetString$0("XmlFoundText", [reader.Value]);
				__label0__ = "IL_10D";
				continue __step0__;
				break;
			case "IL_10D":
				return $asm09.System.Runtime.Serialization.SR.GetString$0("XmlFoundNodeType", [reader.NodeType]);
				break __step0__;
		}
	}
};
$asm09.System.Xml.XmlExceptionHelper.ThrowStartElementExpected$0 = function (reader) {
	$asm09.System.Xml.XmlExceptionHelper.ThrowXmlException$1(reader, "XmlStartElementExpected", $asm09.System.Xml.XmlExceptionHelper.GetWhatWasFound(reader));
};
$asm09.System.Xml.XmlExceptionHelper.ThrowStartElementExpected$1 = function (reader, name) {
	$asm09.System.Xml.XmlExceptionHelper.ThrowXmlException$2(reader, "XmlStartElementNameExpected", name, $asm09.System.Xml.XmlExceptionHelper.GetWhatWasFound(reader));
};
$asm09.System.Xml.XmlExceptionHelper.ThrowStartElementExpected$2 = function (reader, localName, ns) {
	$asm09.System.Xml.XmlExceptionHelper.ThrowXmlException$3(
		reader, 
		"XmlStartElementLocalNameNsExpected", 
		localName, 
		ns, 
		$asm09.System.Xml.XmlExceptionHelper.GetWhatWasFound(reader)
	);
};
$asm09.System.Xml.XmlExceptionHelper.ThrowStartElementExpected$3 = function (reader, localName, ns) {
	$asm09.System.Xml.XmlExceptionHelper.ThrowStartElementExpected$2(reader, System.Xml.XmlDictionaryString.GetString(localName), System.Xml.XmlDictionaryString.GetString(ns));
};
$asm09.System.Xml.XmlExceptionHelper.ThrowFullStartElementExpected$0 = function (reader) {
	$asm09.System.Xml.XmlExceptionHelper.ThrowXmlException$1(reader, "XmlFullStartElementExpected", $asm09.System.Xml.XmlExceptionHelper.GetWhatWasFound(reader));
};
$asm09.System.Xml.XmlExceptionHelper.ThrowFullStartElementExpected$1 = function (reader, name) {
	$asm09.System.Xml.XmlExceptionHelper.ThrowXmlException$2(reader, "XmlFullStartElementNameExpected", name, $asm09.System.Xml.XmlExceptionHelper.GetWhatWasFound(reader));
};
$asm09.System.Xml.XmlExceptionHelper.ThrowFullStartElementExpected$2 = function (reader, localName, ns) {
	$asm09.System.Xml.XmlExceptionHelper.ThrowXmlException$3(
		reader, 
		"XmlFullStartElementLocalNameNsExpected", 
		localName, 
		ns, 
		$asm09.System.Xml.XmlExceptionHelper.GetWhatWasFound(reader)
	);
};
$asm09.System.Xml.XmlExceptionHelper.ThrowFullStartElementExpected$3 = function (reader, localName, ns) {
	$asm09.System.Xml.XmlExceptionHelper.ThrowFullStartElementExpected$2(reader, System.Xml.XmlDictionaryString.GetString(localName), System.Xml.XmlDictionaryString.GetString(ns));
};
$asm09.System.Xml.XmlExceptionHelper.ThrowEndElementExpected = function (reader, localName, ns) {
	$asm09.System.Xml.XmlExceptionHelper.ThrowXmlException$3(
		reader, 
		"XmlEndElementExpected", 
		localName, 
		ns, 
		$asm09.System.Xml.XmlExceptionHelper.GetWhatWasFound(reader)
	);
};
$asm09.System.Xml.XmlExceptionHelper.ThrowMaxArrayLengthExceeded = function (reader, maxArrayLength) {
	$asm09.System.Xml.XmlExceptionHelper.ThrowXmlException$1(reader, "XmlMaxArrayLengthExceeded", (maxArrayLength).toString());
};
$asm09.System.Xml.XmlExceptionHelper.ThrowBase64DataExpected = function (reader) {
	$asm09.System.Xml.XmlExceptionHelper.ThrowXmlException$1(reader, "XmlBase64DataExpected", $asm09.System.Xml.XmlExceptionHelper.GetWhatWasFound(reader));
};
$asm09.System.Xml.XmlExceptionHelper.ThrowUndefinedPrefix = function (reader, prefix) {
	$asm09.System.Xml.XmlExceptionHelper.ThrowXmlException$1(reader, "XmlUndefinedPrefix", prefix);
};
$asm09.System.Xml.XmlExceptionHelper.ThrowUnexpectedEndOfFile = function (reader) {
	$asm09.System.Xml.XmlExceptionHelper.ThrowXmlException$1(reader, "XmlUnexpectedEndOfFile", JSIL.Cast(reader, $asm09.System.Xml.XmlBaseReader).GetOpenElements());
};
$asm09.System.Xml.XmlExceptionHelper.ThrowUnexpectedEndElement = function (reader) {
	$asm09.System.Xml.XmlExceptionHelper.ThrowXmlException$0(reader, "XmlUnexpectedEndElement");
};
$asm09.System.Xml.XmlExceptionHelper.ThrowInvalidCharRef = function (reader) {
	$asm09.System.Xml.XmlExceptionHelper.ThrowXmlException$0(reader, "XmlInvalidCharRef");
};
$asm09.System.Xml.XmlExceptionHelper.ThrowDuplicateXmlnsAttribute = function (reader, localName, ns) {
	if (localName.length === 0) {
		var text = "xmlns";
	} else {
		text = (("xmlns:" + localName));
	}
	$asm09.System.Xml.XmlExceptionHelper.ThrowXmlException$3(
		reader, 
		"XmlDuplicateAttribute", 
		text, 
		text, 
		ns
	);
};
$asm09.System.Xml.XmlExceptionHelper.ThrowDuplicateAttribute = function (reader, prefix1, prefix2, localName, ns) {
	$asm09.System.Xml.XmlExceptionHelper.ThrowXmlException$3(
		reader, 
		"XmlDuplicateAttribute", 
		$asm09.System.Xml.XmlExceptionHelper.GetName(prefix1, localName), 
		$asm09.System.Xml.XmlExceptionHelper.GetName(prefix2, localName), 
		ns
	);
};
$asm09.System.Xml.XmlExceptionHelper.ThrowInvalidBinaryFormat = function (reader) {
	$asm09.System.Xml.XmlExceptionHelper.ThrowXmlException$0(reader, "XmlInvalidFormat");
};
$asm09.System.Xml.XmlExceptionHelper.ThrowMultipleRootElements = function (reader) {
	$asm09.System.Xml.XmlExceptionHelper.ThrowXmlException$0(reader, "XmlMultipleRootElements");
};
$asm09.System.Xml.XmlExceptionHelper.ThrowConversionOverflow = function (reader, value, type) {
	$asm09.System.Xml.XmlExceptionHelper.ThrowXmlException$2(reader, "XmlConversionOverflow", value, type);
};
$asm09.System.Xml.XmlExceptionHelper.ThrowXmlDictionaryStringIDOutOfRange = function (reader) {
	$asm09.System.Xml.XmlExceptionHelper.ThrowXmlException$2(reader, "XmlDictionaryStringIDRange", (0).toString(), (536870911).toString());
};
$asm09.System.Xml.XmlExceptionHelper.ThrowXmlDictionaryStringIDUndefinedStatic = function (reader, key) {
	$asm09.System.Xml.XmlExceptionHelper.ThrowXmlException$1(reader, "XmlDictionaryStringIDUndefinedStatic", (key).toString());
};
$asm09.System.Xml.XmlExceptionHelper.ThrowXmlDictionaryStringIDUndefinedSession = function (reader, key) {
	$asm09.System.Xml.XmlExceptionHelper.ThrowXmlException$1(reader, "XmlDictionaryStringIDUndefinedSession", (key).toString());
};
$asm09.System.Xml.XmlExceptionHelper.ThrowEmptyNamespace = function (reader) {
	$asm09.System.Xml.XmlExceptionHelper.ThrowXmlException$0(reader, "XmlEmptyNamespaceRequiresNullPrefix");
};
$asm09.System.Xml.XmlExceptionHelper.CreateConversionException$0 = function (type, exception) {
	return JSIL.New(System.Xml.XmlException, "_ctor$2", [$asm09.System.Runtime.Serialization.SR.GetString$0("XmlInvalidConversionWithoutValue", [type]), exception]);
};
$asm09.System.Xml.XmlExceptionHelper.CreateConversionException$1 = function (value, type, exception) {
	return JSIL.New(System.Xml.XmlException, "_ctor$2", [$asm09.System.Runtime.Serialization.SR.GetString$0("XmlInvalidConversion", [value, type]), exception]);
};
$asm09.System.Xml.XmlExceptionHelper.CreateEncodingException$0 = function (buffer, offset, count, exception) {
	return $asm09.System.Xml.XmlExceptionHelper.CreateEncodingException$1((new System.Text.UTF8Encoding(false, false)).GetString$1(buffer, offset, count), exception);
};
$asm09.System.Xml.XmlExceptionHelper.CreateEncodingException$1 = function (value, exception) {
	return JSIL.New(System.Xml.XmlException, "_ctor$2", [$asm09.System.Runtime.Serialization.SR.GetString$0("XmlInvalidUTF8Bytes", [value]), exception]);
};
JSIL.OverloadedMethod($asm09.System.Xml.XmlExceptionHelper, "ThrowXmlException", [
		["ThrowXmlException$0", [System.Xml.XmlDictionaryReader, System.String]], 
		["ThrowXmlException$1", [System.Xml.XmlDictionaryReader, System.String, System.String]], 
		["ThrowXmlException$2", [System.Xml.XmlDictionaryReader, System.String, System.String, System.String]], 
		["ThrowXmlException$3", [System.Xml.XmlDictionaryReader, System.String, System.String, System.String, System.String]], 
		["ThrowXmlException$4", [System.Xml.XmlDictionaryReader, System.Xml.XmlException]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlExceptionHelper, "ThrowStartElementExpected", [
		["ThrowStartElementExpected$0", [System.Xml.XmlDictionaryReader]], 
		["ThrowStartElementExpected$1", [System.Xml.XmlDictionaryReader, System.String]], 
		["ThrowStartElementExpected$2", [System.Xml.XmlDictionaryReader, System.String, System.String]], 
		["ThrowStartElementExpected$3", [System.Xml.XmlDictionaryReader, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlExceptionHelper, "ThrowFullStartElementExpected", [
		["ThrowFullStartElementExpected$0", [System.Xml.XmlDictionaryReader]], 
		["ThrowFullStartElementExpected$1", [System.Xml.XmlDictionaryReader, System.String]], 
		["ThrowFullStartElementExpected$2", [System.Xml.XmlDictionaryReader, System.String, System.String]], 
		["ThrowFullStartElementExpected$3", [System.Xml.XmlDictionaryReader, System.Xml.XmlDictionaryString, System.Xml.XmlDictionaryString]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlExceptionHelper, "CreateConversionException", [
		["CreateConversionException$0", [System.String, System.Exception]], 
		["CreateConversionException$1", [System.String, System.String, System.Exception]]
	]);
JSIL.OverloadedMethod($asm09.System.Xml.XmlExceptionHelper, "CreateEncodingException", [
		["CreateEncodingException$0", [System.Array.Of(System.Byte), System.Int32, System.Int32, System.Exception]], 
		["CreateEncodingException$1", [System.String, System.Exception]]
	]);

$asm09.System.Text.Base64Encoding.prototype.GetMaxByteCount = function (charCount) {
	if (charCount < 0) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["charCount", $asm09.System.Runtime.Serialization.SR.GetString$2("ValueMustBeNonNegative")]));
	}
	if (charCount % 4) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.FormatException, "_ctor$1", [$asm09.System.Runtime.Serialization.SR.GetString$0("XmlInvalidBase64Length", [(charCount).toString()])]));
	}
	return (Math.floor(charCount / 4) * 3);
};
$asm09.System.Text.Base64Encoding.prototype.IsValidLeadBytes = function (v1, v2, v3, v4) {
	return (((v1 | v2) < 64) && ((v3 | v4) !== 255));
};
$asm09.System.Text.Base64Encoding.prototype.IsValidTailBytes = function (v3, v4) {
	return ((v3 !== 64) || (v4 === 64));
};
$asm09.System.Text.Base64Encoding.prototype.GetByteCount = JSIL.UntranslatableFunction("System.Int32 System.Text.Base64Encoding::GetByteCount(System.Char[],System.Int32,System.Int32)");
$asm09.System.Text.Base64Encoding.prototype.GetBytes$0 = JSIL.UntranslatableFunction("System.Int32 System.Text.Base64Encoding::GetBytes(System.Char[],System.Int32,System.Int32,System.Byte[],System.Int32)");
$asm09.System.Text.Base64Encoding.prototype.GetBytes$1 = JSIL.UntranslatableFunction("System.Int32 System.Text.Base64Encoding::GetBytes(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)");
$asm09.System.Text.Base64Encoding.prototype.GetMaxCharCount = function (byteCount) {
	if (!((byteCount >= 0) && (byteCount <= 1610612731))) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["byteCount", $asm09.System.Runtime.Serialization.SR.GetString$0("ValueMustBeInRange", [0, 1610612731])]));
	}
	return (Math.floor((byteCount + 2) / 3) * 4);
};
$asm09.System.Text.Base64Encoding.prototype.GetCharCount = function (bytes, index, count) {
	return this.GetMaxCharCount(count);
};
$asm09.System.Text.Base64Encoding.prototype.GetChars$0 = JSIL.UntranslatableFunction("System.Int32 System.Text.Base64Encoding::GetChars(System.Byte[],System.Int32,System.Int32,System.Char[],System.Int32)");
$asm09.System.Text.Base64Encoding.prototype.GetChars$1 = JSIL.UntranslatableFunction("System.Int32 System.Text.Base64Encoding::GetChars(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)");
JSIL.OverloadedMethod($asm09.System.Text.Base64Encoding.prototype, "GetBytes", [
		["GetBytes$0", [System.Array.Of(System.Char), System.Int32, System.Int32, System.Array.Of(System.Byte), System.Int32]], 
		["GetBytes$1", [System.Array.Of(System.Byte), System.Int32, System.Int32, System.Array.Of(System.Byte), System.Int32]]
	]);
JSIL.OverloadedMethod($asm09.System.Text.Base64Encoding.prototype, "GetChars", [
		["GetChars$0", [System.Array.Of(System.Byte), System.Int32, System.Int32, System.Array.Of(System.Char), System.Int32]], 
		["GetChars$1", [System.Array.Of(System.Byte), System.Int32, System.Int32, System.Array.Of(System.Byte), System.Int32]]
	]);
$asm09.System.Text.Base64Encoding.char2val = null;
$asm09.System.Text.Base64Encoding.val2char = null;
$asm09.System.Text.Base64Encoding.val2byte = null;
$asm09.System.Text.Base64Encoding._cctor = function () {
	$asm09.System.Text.Base64Encoding.char2val = JSIL.Array.New(System.Byte, [255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 62, 255, 255, 255, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 255, 255, 255, 64, 255, 255, 255, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 255, 255, 255, 255, 255, 255, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 255, 255, 255, 255, 255]);
	$asm09.System.Text.Base64Encoding.val2char = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
	$asm09.System.Text.Base64Encoding.val2byte = JSIL.Array.New(System.Byte, [65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 43, 47]);
};

$asm09.System.Text.SurrogateChar.prototype._ctor$0 = function (ch) {
	if (!((ch >= 65536) && (ch <= 1114111))) {
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentException, "_ctor$4", [$asm09.System.Runtime.Serialization.SR.GetString$0("XmlInvalidSurrogate", [(ch).toString()]), "ch"]));
	}
	this.lowChar = (((ch - 65536) & 1023) + 56320);
	this.highChar = ((((ch - 65536) >> 10) & 1023) + 55296);
};
$asm09.System.Text.SurrogateChar.prototype._ctor$1 = function (lowChar, highChar) {
	if (!((lowChar >= "\udc00") && (lowChar <= "\udfff"))) {
		var array = JSIL.Array.New(System.Object, 1);
		array[0] = ((lowChar.charCodeAt(0)).toString());
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentException, "_ctor$4", [$asm09.System.Runtime.Serialization.SR.GetString$0("XmlInvalidLowSurrogate", array), "lowChar"]));
	}
	if (!((highChar >= "\ud800") && (highChar <= "\udbff"))) {
		var array2 = JSIL.Array.New(System.Object, 1);
		array2[0] = ((highChar.charCodeAt(0)).toString());
		throw $asm09.System.Runtime.Serialization.DiagnosticUtility.ExceptionUtility.ThrowHelperError(JSIL.New(System.ArgumentException, "_ctor$4", [$asm09.System.Runtime.Serialization.SR.GetString$0("XmlInvalidHighSurrogate", array2), "highChar"]));
	}
	this.lowChar = lowChar;
	this.highChar = highChar;
};
$asm09.System.Text.SurrogateChar.prototype.get_LowChar = function () {
	return this.lowChar;
};
$asm09.System.Text.SurrogateChar.prototype.get_HighChar = function () {
	return this.highChar;
};
$asm09.System.Text.SurrogateChar.prototype.get_Char = function () {
	return ((this.lowChar - "\udc00") | (((this.highChar - "\ud800") << 10) + "\0"));
};
JSIL.OverloadedMethod($asm09.System.Text.SurrogateChar.prototype, "_ctor", [
		["_ctor$0", [System.Int32]], 
		["_ctor$1", [System.Char, System.Char]]
	]);
JSIL.MakeProperty($asm09.System.Text.SurrogateChar.prototype, "LowChar", 
	$asm09.System.Text.SurrogateChar.prototype.get_LowChar, null);
JSIL.MakeProperty($asm09.System.Text.SurrogateChar.prototype, "HighChar", 
	$asm09.System.Text.SurrogateChar.prototype.get_HighChar, null);
JSIL.MakeProperty($asm09.System.Text.SurrogateChar.prototype, "Char", 
	$asm09.System.Text.SurrogateChar.prototype.get_Char, null);
Object.defineProperty($asm09.System.Text.SurrogateChar, "MinValue", {
		"value": 65536}
);
Object.defineProperty($asm09.System.Text.SurrogateChar, "MaxValue", {
		"value": 1114111}
);
Object.defineProperty($asm09.System.Text.SurrogateChar, "surHighMin", {
		"value": "\ud800"}
);
Object.defineProperty($asm09.System.Text.SurrogateChar, "surHighMax", {
		"value": "\udbff"}
);
Object.defineProperty($asm09.System.Text.SurrogateChar, "surLowMin", {
		"value": "\udc00"}
);
Object.defineProperty($asm09.System.Text.SurrogateChar, "surLowMax", {
		"value": "\udfff"}
);
$asm09.System.Text.SurrogateChar.prototype.lowChar = 0;
$asm09.System.Text.SurrogateChar.prototype.highChar = 0;

JSIL.QueueInitializer(function () {
		$asm09.System.Runtime.Serialization.CodeGenerator.prototype.__StructFields__ = [
			["methodEndLabel", System.Reflection.Emit.Label]
		];
	});
JSIL.QueueInitializer(function () {
		$asm09.System.Runtime.Serialization.ForState.prototype.__StructFields__ = [
			["beginLabel", System.Reflection.Emit.Label], 
			["testLabel", System.Reflection.Emit.Label], 
			["endLabel", System.Reflection.Emit.Label]
		];
	});
JSIL.QueueInitializer(function () {
		$asm09.System.Runtime.Serialization.IfState.prototype.__StructFields__ = [
			["elseBegin", System.Reflection.Emit.Label], 
			["endIf", System.Reflection.Emit.Label]
		];
	});
JSIL.QueueInitializer(function () {
		$asm09.System.Runtime.Serialization.SwitchState.prototype.__StructFields__ = [
			["defaultLabel", System.Reflection.Emit.Label], 
			["endOfSwitchLabel", System.Reflection.Emit.Label]
		];
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm09.System.Runtime.Serialization.ClassDataContract.ClassDataContractCriticalHelper.DataMemberConflictComparer, [
				"System.Collections.Generic.IComparer$b1"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm09.System.Runtime.Serialization.ClassDataContract.DataMemberComparer, [
				"System.Collections.Generic.IComparer$b1"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm09.System.Runtime.Serialization.CollectionDataContract.DictionaryEnumerator, [
				"System.Collections.Generic.IEnumerator$b1", "System.IDisposable", "System.Collections.IEnumerator"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm09.System.Runtime.Serialization.CollectionDataContract.GenericDictionaryEnumerator$b2, [
				"System.Collections.Generic.IEnumerator$b1", "System.IDisposable", "System.Collections.IEnumerator"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm09.System.Runtime.Serialization.GenericNameProvider, [
				"System.Runtime.Serialization.IGenericNameProvider"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm09.System.Runtime.Serialization.TypeHandleRefEqualityComparer, [
				"System.Collections.Generic.IEqualityComparer$b1"
			]);
	});
JSIL.QueueInitializer(function () {
		$asm09.System.Runtime.Serialization.TypeHandleRef.prototype.__StructFields__ = [
			["value", System.RuntimeTypeHandle]
		];
	});
JSIL.QueueInitializer(function () {
		$asm09.System.Runtime.Serialization.DateTimeOffsetAdapter.prototype.__StructFields__ = [
			["utcDateTime", System.DateTime]
		];
	});
JSIL.QueueInitializer(function () {
		$asm09.System.Runtime.Serialization.XmlObjectSerializerContext.prototype.__StructFields__ = [
			["scopedKnownTypes", $asm09.System.Runtime.Serialization.ScopedKnownTypes], 
			["streamingContext", System.Runtime.Serialization.StreamingContext]
		];
	});
JSIL.QueueInitializer(function () {
		$asm09.System.Runtime.Serialization.XmlObjectSerializerWriteContext.prototype.__StructFields__ = [
			["byValObjectsInScope", $asm09.System.Runtime.Serialization.ObjectReferenceStack]
		];
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm09.System.Runtime.Serialization.XmlSerializableReader, [
				"System.Xml.IXmlLineInfo"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm09.System.Xml.XmlDictionaryReader.XmlWrappedReader, [
				"System.Xml.IXmlLineInfo"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm09.System.Xml.XmlBaseReader.AttributeSorter, [
				"System.Collections.IComparer"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Xml.XmlBinaryReaderSession, [
				"System.Xml.IXmlDictionary"
			]);
	});
JSIL.QueueInitializer(function () {
		$asm09.System.Xml.XmlBinaryNodeWriter.prototype.__StructFields__ = [
			["attributeValue", $asm09.System.Xml.XmlBinaryNodeWriter.AttributeValue]
		];
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Xml.XmlDictionary, [
				"System.Xml.IXmlDictionary"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm09.System.Xml.XmlDictionary.EmptyDictionary, [
				"System.Xml.IXmlDictionary"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm09.System.Xml.XmlDictionaryString.EmptyStringDictionary, [
				"System.Xml.IXmlDictionary"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ExternalMembers($asm09.System.Text.Base64Encoding.prototype, 
			"_ctor"
		);
	});
JSIL.QueueInitializer(function () {
		JSIL.SealTypes($asm09, "System.Runtime.Serialization", 
			"SR", "Attributes", "CodeGenerator", "DictionaryGlobals", "Globals", "ObjectToIdCache"
		);
		JSIL.SealTypes($asm09, "System.Runtime.Serialization.DataContract", 
			"DataContractCriticalHelper"
		);
		JSIL.SealTypes($asm09, "System.Runtime.Serialization.ClassDataContract/ClassDataContractCriticalHelper", 
			"DataMemberConflictComparer"
		);
		JSIL.SealTypes($asm09, "System.Runtime.Serialization.ClassDataContract", 
			"DataMemberComparer"
		);
		JSIL.SealTypes($asm09, "System.Runtime.Serialization.EnumDataContract", 
			"EnumDataContractCriticalHelper"
		);
		JSIL.SealTypes($asm09, "System.Xml", 
			"BooleanArrayHelperWithString", "BooleanArrayHelperWithDictionaryString", "Int16ArrayHelperWithString", "Int16ArrayHelperWithDictionaryString", "Int32ArrayHelperWithString", "Int32ArrayHelperWithDictionaryString", "Int64ArrayHelperWithString", "Int64ArrayHelperWithDictionaryString", "SingleArrayHelperWithString", "SingleArrayHelperWithDictionaryString", "DoubleArrayHelperWithString", "DoubleArrayHelperWithDictionaryString", "DecimalArrayHelperWithString", "DecimalArrayHelperWithDictionaryString", "DateTimeArrayHelperWithString", "DateTimeArrayHelperWithDictionaryString", "GuidArrayHelperWithString", "GuidArrayHelperWithDictionaryString", "TimeSpanArrayHelperWithString", "TimeSpanArrayHelperWithDictionaryString", "PrefixHandle", "StringHandle", "UniqueId", "ValueHandle", "XmlBaseReader", "XmlDictionaryWriter", "XmlBaseWriter", "XmlStreamNodeWriter", "XmlBufferReader", "XmlDictionaryReaderQuotas", "XmlDictionaryString"
		);
		JSIL.SealTypes($asm09, "System.Xml.XmlBaseReader", 
			"NamespaceManager"
		);
		JSIL.SealTypes($asm09, "System.Text", 
			"Base64Encoding"
		);
	});
