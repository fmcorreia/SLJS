/* Generated by JSIL v0.2 build 28582. See http://jsil.org/ for more information. */ 
var $asm07 = JSIL.DeclareAssembly("System.Xml, Version=2.0.5.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e");
JSIL.DeclareNamespace("System");
JSIL.DeclareNamespace("System.Xml");
JSIL.MakeClass("System.ComponentModel.DescriptionAttribute", "System.Xml.ResDescriptionAttribute", false);

JSIL.MakeClass("System.ComponentModel.CategoryAttribute", "System.Xml.ResCategoryAttribute", false);

JSIL.MakeClass("System.Object", "System.Xml.Res", false);

JSIL.MakeStaticClass("System.HResults", false);

JSIL.MakeClass("System.Object", "System.Xml.IncrementalReadDecoder", false);

JSIL.MakeClass("System.Xml.IncrementalReadDecoder", "System.Xml.Base64Decoder", false);

JSIL.MakeClass("System.Object", "System.Xml.Base64Encoder", false);

JSIL.MakeClass("System.Xml.Base64Encoder", "System.Xml.XmlRawWriterBase64Encoder", false);

JSIL.MakeClass("System.Xml.IncrementalReadDecoder", "System.Xml.BinHexDecoder", false);

JSIL.MakeStaticClass("System.Xml.BinHexEncoder", false);

JSIL.MakeStaticClass("System.Xml.Bits", false);

JSIL.MakeClass("System.Object", "System.Xml.BitStack", false);

JSIL.MakeClass("System.Object", "System.Xml.BufferBuilder", false);
JSIL.MakeStruct("System.Xml.BufferBuilder/Buffer", false);


JSIL.MakeInterface(
	"System.Xml.IXmlLineInfo", [], {
		"HasLineInfo": Function, 
		"get_LineNumber": Function, 
		"get_LinePosition": Function, 
		"LineNumber": Property, 
		"LinePosition": Property
	});

JSIL.MakeInterface(
	"System.Xml.IXmlNamespaceResolver", [], {
		"GetNamespacesInScope": Function, 
		"LookupNamespace": Function, 
		"LookupPrefix": Function
	});

JSIL.MakeStruct("System.Xml.LineInfo", false);

JSIL.MakeClass("System.Object", "System.Xml.XmlNameTable", true);

JSIL.MakeClass("System.Xml.XmlNameTable", "System.Xml.NameTable", true);
JSIL.MakeClass("System.Object", "System.Xml.NameTable/Entry", false);


JSIL.MakeStaticClass("System.Xml.Ref", false);

JSIL.MakeStaticClass("System.Xml.ValidateNames", false);
JSIL.MakeEnum(
	"System.Xml.ValidateNames/Flags", {
		NCNames: 1, 
		CheckLocalName: 2, 
		CheckPrefixMapping: 4, 
		All: 7, 
		AllExceptNCNames: 6, 
		AllExceptPrefixMapping: 3
	}, false
);


JSIL.MakeStruct("System.Xml.XmlCharType", false);

JSIL.MakeEnum(
	"System.Xml.ExceptionType", {
		ArgumentException: 0, 
		XmlException: 1
	}, false
);

JSIL.MakeEnum(
	"System.Xml.XmlDateTimeSerializationMode", {
		Local: 0, 
		Utc: 1, 
		Unspecified: 2, 
		RoundtripKind: 3
	}, false
);

JSIL.MakeClass("System.Object", "System.Xml.XmlConvert", true);

JSIL.MakeClass("System.Text.Decoder", "System.Xml.UTF16Decoder", false);

JSIL.MakeClass("System.Text.Decoder", "System.Xml.SafeAsciiDecoder", false);

JSIL.MakeClass("System.SystemException", "System.Xml.XmlException", true);

JSIL.MakeClass("System.Object", "System.Xml.XmlNamespaceManager", true);
JSIL.MakeStruct("System.Xml.XmlNamespaceManager/NamespaceDeclaration", false);


JSIL.MakeEnum(
	"System.Xml.XmlNamespaceScope", {
		All: 0, 
		ExcludeXml: 1, 
		Local: 2
	}, false
);

JSIL.MakeEnum(
	"System.Xml.XmlNodeType", {
		None: 0, 
		Element: 1, 
		Attribute: 2, 
		Text: 3, 
		CDATA: 4, 
		EntityReference: 5, 
		Entity: 6, 
		ProcessingInstruction: 7, 
		Comment: 8, 
		Document: 9, 
		DocumentType: 10, 
		DocumentFragment: 11, 
		Notation: 12, 
		Whitespace: 13, 
		SignificantWhitespace: 14, 
		EndElement: 15, 
		EndEntity: 16, 
		XmlDeclaration: 17
	}, false
);

JSIL.MakeClass("System.Object", "System.Xml.XmlQualifiedName", true);

JSIL.MakeStaticClass("System.Xml.XmlReservedNs", false);

JSIL.MakeClass("System.Object", "System.Xml.XmlResolver", true);

JSIL.MakeClass("System.Text.EncoderFallback", "System.Xml.CharEntityEncoderFallback", false);

JSIL.MakeClass("System.Text.EncoderFallbackBuffer", "System.Xml.CharEntityEncoderFallbackBuffer", false);

JSIL.MakeEnum(
	"System.Xml.ConformanceLevel", {
		Auto: 0, 
		Fragment: 1, 
		Document: 2
	}, false
);

JSIL.MakeEnum(
	"System.Xml.DtdProcessing", {
		Prohibit: 0, 
		Ignore: 1, 
		Parse: 2
	}, false
);

JSIL.MakeInterface(
	"System.Xml.IDtdInfo", [], {
		"get_Name": Function, 
		"get_InternalDtdSubset": Function, 
		"get_HasDefaultAttributes": Function, 
		"get_HasNonCDataAttributes": Function, 
		"LookupAttributeList": Function, 
		"GetAttributeLists": Function, 
		"LookupEntity": Function, 
		"Name": Property, 
		"InternalDtdSubset": Property, 
		"HasDefaultAttributes": Property, 
		"HasNonCDataAttributes": Property
	});

JSIL.MakeInterface(
	"System.Xml.IDtdAttributeListInfo", [], {
		"get_Prefix": Function, 
		"get_LocalName": Function, 
		"get_HasNonCDataAttributes": Function, 
		"LookupAttribute": Function, 
		"LookupDefaultAttributes": Function, 
		"LookupIdAttribute": Function, 
		"Prefix": Property, 
		"LocalName": Property, 
		"HasNonCDataAttributes": Property
	});

JSIL.MakeInterface(
	"System.Xml.IDtdAttributeInfo", [], {
		"get_Prefix": Function, 
		"get_LocalName": Function, 
		"get_LineNumber": Function, 
		"get_LinePosition": Function, 
		"get_IsNonCDataType": Function, 
		"get_IsDeclaredInExternal": Function, 
		"get_IsXmlAttribute": Function, 
		"Prefix": Property, 
		"LocalName": Property, 
		"LineNumber": Property, 
		"LinePosition": Property, 
		"IsNonCDataType": Property, 
		"IsDeclaredInExternal": Property, 
		"IsXmlAttribute": Property
	});

JSIL.MakeInterface(
	"System.Xml.IDtdDefaultAttributeInfo", [], {
		"get_DefaultValueExpanded": Function, 
		"get_DefaultValueTyped": Function, 
		"get_ValueLineNumber": Function, 
		"get_ValueLinePosition": Function, 
		"DefaultValueExpanded": Property, 
		"DefaultValueTyped": Property, 
		"ValueLineNumber": Property, 
		"ValueLinePosition": Property
	});

JSIL.MakeInterface(
	"System.Xml.IDtdEntityInfo", [], {
		"get_Name": Function, 
		"get_IsExternal": Function, 
		"get_IsDeclaredInExternal": Function, 
		"get_IsUnparsedEntity": Function, 
		"get_IsParameterEntity": Function, 
		"get_BaseUriString": Function, 
		"get_DeclaredUriString": Function, 
		"get_SystemId": Function, 
		"get_PublicId": Function, 
		"get_Text": Function, 
		"get_LineNumber": Function, 
		"get_LinePosition": Function, 
		"Name": Property, 
		"IsExternal": Property, 
		"IsDeclaredInExternal": Property, 
		"IsUnparsedEntity": Property, 
		"IsParameterEntity": Property, 
		"BaseUriString": Property, 
		"DeclaredUriString": Property, 
		"SystemId": Property, 
		"PublicId": Property, 
		"Text": Property, 
		"LineNumber": Property, 
		"LinePosition": Property
	});

JSIL.MakeInterface(
	"System.Xml.IDtdParser", [], {
		"ParseInternalDtd": Function, 
		"ParseFreeFloatingDtd": Function
	});

JSIL.MakeInterface(
	"System.Xml.IDtdParserAdapter", [], {
		"get_NameTable": Function, 
		"get_NamespaceResolver": Function, 
		"get_BaseUri": Function, 
		"get_ParsingBuffer": Function, 
		"get_ParsingBufferLength": Function, 
		"get_CurrentPosition": Function, 
		"set_CurrentPosition": Function, 
		"get_LineNo": Function, 
		"get_LineStartPosition": Function, 
		"get_IsEof": Function, 
		"get_EntityStackLength": Function, 
		"get_IsEntityEolNormalized": Function, 
		"ReadData": Function, 
		"OnNewLine": Function, 
		"ParseNumericCharRef": Function, 
		"ParseNamedCharRef": Function, 
		"ParsePI": Function, 
		"ParseComment": Function, 
		"PushEntity": Function, 
		"PopEntity": Function, 
		"PushExternalSubset": Function, 
		"PushInternalDtd": Function, 
		"OnSystemId": Function, 
		"OnPublicId": Function, 
		"Throw": Function, 
		"NameTable": Property, 
		"NamespaceResolver": Property, 
		"BaseUri": Property, 
		"ParsingBuffer": Property, 
		"ParsingBufferLength": Property, 
		"CurrentPosition": Property, 
		"LineNo": Property, 
		"LineStartPosition": Property, 
		"IsEof": Property, 
		"EntityStackLength": Property, 
		"IsEntityEolNormalized": Property
	});

JSIL.MakeInterface(
	"System.Xml.IValidationEventHandling", [], {
		"get_EventHandler": Function, 
		"SendEvent": Function, 
		"EventHandler": Property
	});

JSIL.MakeEnum(
	"System.Xml.NewLineHandling", {
		Replace: 0, 
		Entitize: 1, 
		None: 2
	}, false
);

JSIL.MakeEnum(
	"System.Xml.NamespaceHandling", {
		Default: 0, 
		OmitDuplicates: 1
	}, true
);

JSIL.MakeClass("System.Object", "System.Xml.ReadContentAsBinaryHelper", false);
JSIL.MakeEnum(
	"System.Xml.ReadContentAsBinaryHelper/State", {
		None: 0, 
		InReadContent: 1, 
		InReadElementContent: 2
	}, false
);


JSIL.MakeEnum(
	"System.Xml.ReadState", {
		Initial: 0, 
		Interactive: 1, 
		Error: 2, 
		EndOfFile: 3, 
		Closed: 4
	}, false
);

JSIL.MakeClass("System.Object", "System.Xml.SecureStringHasher", false);

JSIL.MakeEnum(
	"System.Xml.WhitespaceHandling", {
		All: 0, 
		Significant: 1, 
		None: 2
	}, false
);

JSIL.MakeClass("System.Object", "System.Xml.XmlReader", true);

JSIL.MakeClass("System.Xml.XmlReader", "System.Xml.XmlWrappingReader", false);

JSIL.MakeClass("System.Xml.XmlWrappingReader", "System.Xml.XmlCharCheckingReader", false);
JSIL.MakeEnum(
	"System.Xml.XmlCharCheckingReader/State", {
		Initial: 0, 
		InReadBinary: 1, 
		Error: 2, 
		Interactive: 3
	}, false
);


JSIL.MakeClass("System.Xml.XmlCharCheckingReader", "System.Xml.XmlCharCheckingReaderWithNS", false);

JSIL.MakeClass("System.Object", "System.Xml.XmlWriter", true);

JSIL.MakeClass("System.Xml.XmlWriter", "System.Xml.XmlWrappingWriter", false);

JSIL.MakeClass("System.Xml.XmlWrappingWriter", "System.Xml.XmlCharCheckingWriter", false);

JSIL.MakeClass("System.Xml.XmlWriter", "System.Xml.XmlRawWriter", false);

JSIL.MakeClass("System.Xml.XmlRawWriter", "System.Xml.XmlEncodedRawTextWriter", false);

JSIL.MakeClass("System.Xml.XmlEncodedRawTextWriter", "System.Xml.XmlEncodedRawTextWriterIndent", false);

JSIL.MakeClass("System.Object", "System.Xml.XmlParserContext", true);

JSIL.MakeClass("System.Object", "System.Xml.XmlReaderSettings", true);

JSIL.MakeEnum(
	"System.Xml.XmlSpace", {
		None: 0, 
		Default: 1, 
		Preserve: 2
	}, false
);

JSIL.MakeClass("System.Xml.XmlWrappingReader", "System.Xml.XmlSubtreeReader", false);
JSIL.MakeClass("System.Object", "System.Xml.XmlSubtreeReader/NodeData", false);

JSIL.MakeEnum(
	"System.Xml.XmlSubtreeReader/State", {
		Initial: 0, 
		Interactive: 1, 
		Error: 2, 
		EndOfFile: 3, 
		Closed: 4, 
		PopNamespaceScope: 5, 
		ClearNsAttributes: 6, 
		ReadElementContentAsBase64: 7, 
		ReadElementContentAsBinHex: 8, 
		ReadContentAsBase64: 9, 
		ReadContentAsBinHex: 10
	}, false
);


JSIL.MakeClass("System.Xml.XmlReader", "System.Xml.XmlTextReaderImpl", false);
JSIL.MakeEnum(
	"System.Xml.XmlTextReaderImpl/ParsingFunction", {
		ElementContent: 0, 
		NoData: 1, 
		SwitchToInteractive: 2, 
		SwitchToInteractiveXmlDecl: 3, 
		DocumentContent: 4, 
		MoveToElementContent: 5, 
		PopElementContext: 6, 
		PopEmptyElementContext: 7, 
		ResetAttributesRootLevel: 8, 
		Error: 9, 
		Eof: 10, 
		ReaderClosed: 11, 
		EntityReference: 12, 
		InIncrementalRead: 13, 
		XmlDeclarationFragment: 14, 
		GoToEof: 15, 
		PartialTextValue: 16, 
		InReadAttributeValue: 17, 
		InReadValueChunk: 18, 
		InReadContentAsBinary: 19, 
		InReadElementContentAsBinary: 20
	}, false
);

JSIL.MakeEnum(
	"System.Xml.XmlTextReaderImpl/ParsingMode", {
		Full: 0, 
		SkipNode: 1, 
		SkipContent: 2
	}, false
);

JSIL.MakeEnum(
	"System.Xml.XmlTextReaderImpl/EntityType", {
		CharacterDec: 0, 
		CharacterHex: 1, 
		CharacterNamed: 2, 
		Expanded: 3, 
		Skipped: 4, 
		FakeExpanded: 5
	}, false
);

JSIL.MakeEnum(
	"System.Xml.XmlTextReaderImpl/EntityExpandType", {
		All: 0, 
		OnlyGeneral: 1
	}, false
);

JSIL.MakeEnum(
	"System.Xml.XmlTextReaderImpl/IncrementalReadState", {
		Text: 0, 
		StartTag: 1, 
		PI: 2, 
		CDATA: 3, 
		Comment: 4, 
		Attributes: 5, 
		AttributeValue: 6, 
		ReadData: 7, 
		EndElement: 8, 
		End: 9, 
		ReadValueChunk_OnCachedValue: 10, 
		ReadValueChunk_OnPartialValue: 11, 
		ReadContentAsBinary_OnCachedValue: 12, 
		ReadContentAsBinary_OnPartialValue: 13, 
		ReadContentAsBinary_End: 14
	}, false
);

JSIL.MakeStruct("System.Xml.XmlTextReaderImpl/ParsingState", false);

JSIL.MakeClass("System.Object", "System.Xml.XmlTextReaderImpl/XmlContext", false);

JSIL.MakeClass("System.Object", "System.Xml.XmlTextReaderImpl/DtdParserProxy", false);

JSIL.MakeClass("System.Object", "System.Xml.XmlTextReaderImpl/NodeData", false);

JSIL.MakeClass("System.Object", "System.Xml.XmlTextReaderImpl/DtdDefaultAttributeInfoToNodeDataComparer", false);


JSIL.MakeClass("System.Xml.XmlRawWriter", "System.Xml.XmlUtf8RawTextWriter", false);

JSIL.MakeClass("System.Xml.XmlUtf8RawTextWriter", "System.Xml.XmlUtf8RawTextWriterIndent", false);

JSIL.MakeClass("System.Xml.XmlWriter", "System.Xml.XmlWellFormedWriter", false);
JSIL.MakeEnum(
	"System.Xml.XmlWellFormedWriter/State", {
		Start: 0, 
		TopLevel: 1, 
		Document: 2, 
		Element: 3, 
		Content: 4, 
		B64Content: 5, 
		B64Attribute: 6, 
		AfterRootEle: 7, 
		Attribute: 8, 
		SpecialAttr: 9, 
		EndDocument: 10, 
		RootLevelAttr: 11, 
		RootLevelSpecAttr: 12, 
		RootLevelB64Attr: 13, 
		AfterRootLevelAttr: 14, 
		Closed: 15, 
		Error: 16, 
		StartContent: 101, 
		StartContentEle: 102, 
		StartContentB64: 103, 
		StartDoc: 104, 
		StartDocEle: 106, 
		EndAttrSEle: 107, 
		EndAttrEEle: 108, 
		EndAttrSCont: 109, 
		EndAttrSAttr: 111, 
		PostB64Cont: 112, 
		PostB64Attr: 113, 
		PostB64RootAttr: 114, 
		StartFragEle: 115, 
		StartFragCont: 116, 
		StartFragB64: 117, 
		StartRootLevelAttr: 118
	}, false
);

JSIL.MakeEnum(
	"System.Xml.XmlWellFormedWriter/Token", {
		StartDocument: 0, 
		EndDocument: 1, 
		PI: 2, 
		Comment: 3, 
		Dtd: 4, 
		StartElement: 5, 
		EndElement: 6, 
		StartAttribute: 7, 
		EndAttribute: 8, 
		Text: 9, 
		CData: 10, 
		AtomicValue: 11, 
		Base64: 12, 
		RawData: 13, 
		Whitespace: 14
	}, false
);

JSIL.MakeClass("System.Object", "System.Xml.XmlWellFormedWriter/NamespaceResolverProxy", false);

JSIL.MakeStruct("System.Xml.XmlWellFormedWriter/ElementScope", false);

JSIL.MakeEnum(
	"System.Xml.XmlWellFormedWriter/NamespaceKind", {
		Written: 0, 
		NeedToWrite: 1, 
		Implied: 2, 
		Special: 3
	}, false
);

JSIL.MakeStruct("System.Xml.XmlWellFormedWriter/Namespace", false);

JSIL.MakeStruct("System.Xml.XmlWellFormedWriter/AttrName", false);

JSIL.MakeEnum(
	"System.Xml.XmlWellFormedWriter/SpecialAttribute", {
		No: 0, 
		DefaultXmlns: 1, 
		PrefixedXmlns: 2, 
		XmlSpace: 3, 
		XmlLang: 4
	}, false
);

JSIL.MakeClass("System.Object", "System.Xml.XmlWellFormedWriter/AttributeValueCache", false);
JSIL.MakeEnum(
	"System.Xml.XmlWellFormedWriter/AttributeValueCache/ItemType", {
		EntityRef: 0, 
		CharEntity: 1, 
		SurrogateCharEntity: 2, 
		Whitespace: 3, 
		String: 4, 
		StringChars: 5, 
		Raw: 6, 
		RawChars: 7, 
		ValueString: 8
	}, false
);

JSIL.MakeClass("System.Object", "System.Xml.XmlWellFormedWriter/AttributeValueCache/Item", false);

JSIL.MakeClass("System.Object", "System.Xml.XmlWellFormedWriter/AttributeValueCache/BufferChunk", false);



JSIL.MakeEnum(
	"System.Xml.WriteState", {
		Start: 0, 
		Prolog: 1, 
		Element: 2, 
		Attribute: 3, 
		Content: 4, 
		Closed: 5, 
		Error: 6
	}, false
);

JSIL.MakeEnum(
	"System.Xml.TriState", {
		Unknown: -1, 
		False: 0, 
		True: 1
	}, false
);

JSIL.MakeEnum(
	"System.Xml.XmlStandalone", {
		Omit: 0, 
		Yes: 1, 
		No: 2
	}, false
);

JSIL.MakeClass("System.Object", "System.Xml.XmlWriterSettings", true);

JSIL.MakeInterface(
	"System.Xml.IApplicationResourceStreamResolver", [], {
		"GetApplicationResourceStream": Function
	});

JSIL.MakeClass("System.Xml.XmlResolver", "System.Xml.XmlXapResolver", true);

JSIL.DeclareNamespace("System.Xml.Serialization");
JSIL.MakeInterface(
	"System.Xml.Serialization.IXmlSerializable", [], {
		"GetSchema": Function, 
		"ReadXml": Function, 
		"WriteXml": Function
	});

JSIL.MakeClass("System.Attribute", "System.Xml.Serialization.XmlAnyElementAttribute", true);

JSIL.MakeClass("System.Attribute", "System.Xml.Serialization.XmlArrayAttribute", true);

JSIL.MakeClass("System.Attribute", "System.Xml.Serialization.XmlArrayItemAttribute", true);

JSIL.MakeClass("System.Attribute", "System.Xml.Serialization.XmlAttributeAttribute", true);

JSIL.MakeClass("System.Attribute", "System.Xml.Serialization.XmlChoiceIdentifierAttribute", true);

JSIL.MakeClass("System.Attribute", "System.Xml.Serialization.XmlElementAttribute", true);

JSIL.MakeClass("System.Attribute", "System.Xml.Serialization.XmlEnumAttribute", true);

JSIL.MakeClass("System.Attribute", "System.Xml.Serialization.XmlIgnoreAttribute", true);

JSIL.MakeClass("System.Attribute", "System.Xml.Serialization.XmlIncludeAttribute", true);

JSIL.MakeClass("System.Attribute", "System.Xml.Serialization.XmlNamespaceDeclarationsAttribute", true);

JSIL.MakeClass("System.Attribute", "System.Xml.Serialization.XmlRootAttribute", true);

JSIL.MakeClass("System.Attribute", "System.Xml.Serialization.XmlSchemaProviderAttribute", true);

JSIL.MakeClass("System.Attribute", "System.Xml.Serialization.XmlTextAttribute", true);

JSIL.MakeClass("System.Attribute", "System.Xml.Serialization.XmlTypeAttribute", true);

JSIL.MakeClass("System.Object", "System.Xml.DtdParser", false);
JSIL.MakeEnum(
	"System.Xml.DtdParser/Token", {
		CDATA: 0, 
		ID: 1, 
		IDREF: 2, 
		IDREFS: 3, 
		ENTITY: 4, 
		ENTITIES: 5, 
		NMTOKEN: 6, 
		NMTOKENS: 7, 
		NOTATION: 8, 
		None: 9, 
		PERef: 10, 
		AttlistDecl: 11, 
		ElementDecl: 12, 
		EntityDecl: 13, 
		NotationDecl: 14, 
		Comment: 15, 
		PI: 16, 
		CondSectionStart: 17, 
		CondSectionEnd: 18, 
		Eof: 19, 
		REQUIRED: 20, 
		IMPLIED: 21, 
		FIXED: 22, 
		QName: 23, 
		Name: 24, 
		Nmtoken: 25, 
		Quote: 26, 
		LeftParen: 27, 
		RightParen: 28, 
		GreaterThan: 29, 
		Or: 30, 
		LeftBracket: 31, 
		RightBracket: 32, 
		PUBLIC: 33, 
		SYSTEM: 34, 
		Literal: 35, 
		DOCTYPE: 36, 
		NData: 37, 
		Percent: 38, 
		Star: 39, 
		QMark: 40, 
		Plus: 41, 
		PCDATA: 42, 
		Comma: 43, 
		ANY: 44, 
		EMPTY: 45, 
		IGNORE: 46, 
		INCLUDE: 47
	}, false
);

JSIL.MakeEnum(
	"System.Xml.DtdParser/ScanningFunction", {
		SubsetContent: 0, 
		Name: 1, 
		QName: 2, 
		Nmtoken: 3, 
		Doctype1: 4, 
		Doctype2: 5, 
		Element1: 6, 
		Element2: 7, 
		Element3: 8, 
		Element4: 9, 
		Element5: 10, 
		Element6: 11, 
		Element7: 12, 
		Attlist1: 13, 
		Attlist2: 14, 
		Attlist3: 15, 
		Attlist4: 16, 
		Attlist5: 17, 
		Attlist6: 18, 
		Attlist7: 19, 
		Entity1: 20, 
		Entity2: 21, 
		Entity3: 22, 
		Notation1: 23, 
		CondSection1: 24, 
		CondSection2: 25, 
		CondSection3: 26, 
		Literal: 27, 
		SystemId: 28, 
		PublicId1: 29, 
		PublicId2: 30, 
		ClosingTag: 31, 
		ParamEntitySpace: 32, 
		None: 33
	}, false
);

JSIL.MakeEnum(
	"System.Xml.DtdParser/LiteralType", {
		AttributeValue: 0, 
		EntityReplText: 1, 
		SystemOrPublicID: 2
	}, false
);

JSIL.MakeClass("System.Object", "System.Xml.DtdParser/ParseElementOnlyContentNoValidation_LocalFrame", false);


JSIL.DeclareNamespace("System.Xml.Schema");
JSIL.MakeClass("System.Object", "System.Xml.Schema.SchemaDeclBase", false);
JSIL.MakeEnum(
	"System.Xml.Schema.SchemaDeclBase/Use", {
		Default: 0, 
		Required: 1, 
		Implied: 2, 
		Fixed: 3, 
		RequiredFixed: 4
	}, false
);


JSIL.MakeClass("System.Xml.Schema.SchemaDeclBase", "System.Xml.Schema.SchemaAttDef", false);
JSIL.MakeEnum(
	"System.Xml.Schema.SchemaAttDef/Reserve", {
		None: 0, 
		XmlSpace: 1, 
		XmlLang: 2
	}, false
);


JSIL.MakeClass("System.Xml.Schema.SchemaDeclBase", "System.Xml.Schema.SchemaElementDecl", false);

JSIL.MakeClass("System.Object", "System.Xml.Schema.SchemaEntity", false);

JSIL.MakeClass("System.Object", "System.Xml.Schema.SchemaInfo", false);
JSIL.DeclareNamespace("$lSystem");
JSIL.DeclareNamespace("$lSystem.Xml");
JSIL.DeclareNamespace("$lSystem.Xml.IDtdInfo");
JSIL.MakeClass("System.Object", "System.Xml.Schema.SchemaInfo/GetAttributeLists$gd__0", false);


JSIL.MakeClass("System.Object", "System.Xml.Schema.XmlSchemaObject", true);

JSIL.MakeClass("System.Xml.Schema.XmlSchemaObject", "System.Xml.Schema.XmlSchema", true);

JSIL.MakeEnum(
	"System.Xml.Schema.XmlSchemaForm", {
		None: 0, 
		Qualified: 1, 
		Unqualified: 2
	}, false
);

JSIL.MakeClass("System.Object", "System.Xml.Schema.XmlSchemaSet", true);

JSIL.MakeEnum(
	"System.Xml.Schema.XmlSeverityType", {
		Error: 0, 
		Warning: 1
	}, false
);

JSIL.MakeEnum(
	"System.Xml.XmlTokenizedType", {
		CDATA: 0, 
		ID: 1, 
		IDREF: 2, 
		IDREFS: 3, 
		ENTITY: 4, 
		ENTITIES: 5, 
		NMTOKEN: 6, 
		NMTOKENS: 7, 
		NOTATION: 8, 
		ENUMERATION: 9, 
		QName: 10, 
		NCName: 11, 
		None: 12
	}, false
);

JSIL.MakeEnum(
	"System.Xml.Schema.XmlTypeCode", {
		None: 0, 
		Item: 1, 
		Node: 2, 
		Document: 3, 
		Element: 4, 
		Attribute: 5, 
		Namespace: 6, 
		ProcessingInstruction: 7, 
		Comment: 8, 
		Text: 9, 
		AnyAtomicType: 10, 
		UntypedAtomic: 11, 
		String: 12, 
		Boolean: 13, 
		Decimal: 14, 
		Float: 15, 
		Double: 16, 
		Duration: 17, 
		DateTime: 18, 
		Time: 19, 
		Date: 20, 
		GYearMonth: 21, 
		GYear: 22, 
		GMonthDay: 23, 
		GDay: 24, 
		GMonth: 25, 
		HexBinary: 26, 
		Base64Binary: 27, 
		AnyUri: 28, 
		QName: 29, 
		Notation: 30, 
		NormalizedString: 31, 
		Token: 32, 
		Language: 33, 
		NmToken: 34, 
		Name: 35, 
		NCName: 36, 
		Id: 37, 
		Idref: 38, 
		Entity: 39, 
		Integer: 40, 
		NonPositiveInteger: 41, 
		NegativeInteger: 42, 
		Long: 43, 
		Int: 44, 
		Short: 45, 
		Byte: 46, 
		NonNegativeInteger: 47, 
		UnsignedLong: 48, 
		UnsignedInt: 49, 
		UnsignedShort: 50, 
		UnsignedByte: 51, 
		PositiveInteger: 52, 
		YearMonthDuration: 53, 
		DayTimeDuration: 54
	}, false
);

JSIL.MakeClass("System.Object", "System.Xml.Schema.XmlUntypedStringConverter", false);

JSIL.MakeEnum(
	"System.Xml.Schema.XsdDateTimeFlags", {
		DateTime: 1, 
		Time: 2, 
		Date: 4, 
		GYearMonth: 8, 
		GYear: 16, 
		GMonthDay: 32, 
		GDay: 64, 
		GMonth: 128, 
		AllXsd: 255
	}, true
);

JSIL.MakeStruct("System.Xml.Schema.XsdDateTime", false);
JSIL.MakeEnum(
	"System.Xml.Schema.XsdDateTime/DateTimeTypeCode", {
		DateTime: 0, 
		Time: 1, 
		Date: 2, 
		GYearMonth: 3, 
		GYear: 4, 
		GMonthDay: 5, 
		GDay: 6, 
		GMonth: 7
	}, false
);

JSIL.MakeEnum(
	"System.Xml.Schema.XsdDateTime/XsdDateTimeKind", {
		Unspecified: 0, 
		Zulu: 1, 
		LocalWestOfZulu: 2, 
		LocalEastOfZulu: 3
	}, false
);

JSIL.MakeStruct("System.Xml.Schema.XsdDateTime/Parser", false);


JSIL.MakeStruct("System.Xml.Schema.XsdDuration", false);
JSIL.MakeEnum(
	"System.Xml.Schema.XsdDuration/Parts", {
		HasNone: 0, 
		HasYears: 1, 
		HasMonths: 2, 
		HasDays: 4, 
		HasHours: 8, 
		HasMinutes: 16, 
		HasSeconds: 32
	}, false
);

JSIL.MakeEnum(
	"System.Xml.Schema.XsdDuration/DurationType", {
		Duration: 0, 
		YearMonthDuration: 1, 
		DayTimeDuration: 2
	}, false
);


$asm07.System.Xml.ResDescriptionAttribute.prototype._ctor = function (description) {
	System.ComponentModel.DescriptionAttribute.prototype._ctor$1.call(this, description);
};
$asm07.System.Xml.ResDescriptionAttribute.prototype.get_Description = function () {
	if (!this.replaced) {
		this.replaced = true;
		System.ComponentModel.DescriptionAttribute.prototype.set_DescriptionValue.call(this, $asm07.System.Xml.Res.GetString$2(System.ComponentModel.DescriptionAttribute.prototype.get_Description.call(this)));
	}
	return System.ComponentModel.DescriptionAttribute.prototype.get_Description.call(this);
};
JSIL.MakeProperty($asm07.System.Xml.ResDescriptionAttribute.prototype, "Description", 
	$asm07.System.Xml.ResDescriptionAttribute.prototype.get_Description, null);
$asm07.System.Xml.ResDescriptionAttribute.prototype.replaced = false;

$asm07.System.Xml.ResCategoryAttribute.prototype._ctor = function (category) {
	System.ComponentModel.CategoryAttribute.prototype._ctor$1.call(this, category);
};
$asm07.System.Xml.ResCategoryAttribute.prototype.GetLocalizedString = function (value) {
	return $asm07.System.Xml.Res.GetString$2(value);
};

$asm07.System.Xml.Res.get_InternalSyncObject = function () {
	if ($asm07.System.Xml.Res.s_InternalSyncObject === null) {
		var value = new System.Object();
		System.Threading.Interlocked.CompareExchange$b1(System.Object)(/* ref */ new JSIL.MemberReference($asm07.System.Xml.Res, "s_InternalSyncObject"), value, null);
	}
	return $asm07.System.Xml.Res.s_InternalSyncObject;
};
$asm07.System.Xml.Res.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
	var assembly = JSIL.GetType(this).Assembly;
	this.resources = JSIL.New(System.Resources.ResourceManager, "_ctor$1", ["System.Xml", assembly]);
	try {
		var assembly2 = System.Reflection.Assembly.Load$0("System.Xml.debug.resources, Version=2.0.5.0, Culture=en-US, PublicKeyToken=7cec85d7bea7798e");
		this.debugResources = JSIL.New(System.Resources.ResourceManager, "_ctor$1", ["System.Xml.debug", assembly2]);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.IO.FileNotFoundException)) {
		} else {
			throw $exception;
		}
	}
	this.fallbackResources = JSIL.New(System.Resources.ResourceManager, "_ctor$1", ["mscorlib", System.Object.Assembly]);
};
$asm07.System.Xml.Res.GetLoader = function () {
	var internalSyncObject = null;
	if ($asm07.System.Xml.Res.loader === null) {
		System.Threading.Monitor.Enter((internalSyncObject = $asm07.System.Xml.Res.InternalSyncObject));
		try {
			if ($asm07.System.Xml.Res.loader === null) {
				$asm07.System.Xml.Res.loader = new $asm07.System.Xml.Res();
			}
		} finally {
			System.Threading.Monitor.Exit(internalSyncObject);
		}
	}
	return $asm07.System.Xml.Res.loader;
};
$asm07.System.Xml.Res.get_Culture = function () {
	return null;
};
$asm07.System.Xml.Res.GetString$0 = function (name, args) {
	var flag = new JSIL.Variable(false);
	return $asm07.System.Xml.Res.GetString$1(name, /* ref */ flag, args);
};
$asm07.System.Xml.Res.GetString$1 = function (name, /* ref */ fallbackUsed, args) {
	var res = $asm07.System.Xml.Res.GetLoader();
	var text = null;
	fallbackUsed.value = false;
	if (res !== null) {
		text = res.resources.GetString$1(name, $asm07.System.Xml.Res.Culture);
		if (!(text || (res.debugResources === null))) {
			text = res.debugResources.GetString$1(name, $asm07.System.Xml.Res.Culture);
		}
		if (text !== null) {
			if (!((args === null) || (args.length <= 0))) {
			__loop0__: 
				for (var i = 0; i < args.length; ++i) {
					if (args[i]) {
						var text2 = args[i].toString();
						if (!((text2 === null) || (text2.length <= 1024))) {
							args[i] = ((text2.Substring$1(0, 1021) + "..."));
						}
					}
				}
				return System.String.Format(System.Globalization.CultureInfo.CurrentCulture, text, args);
			}
			return text;
		}
	}
	fallbackUsed.value = true;
	text = $asm07.System.Xml.Res.GetFallbackMessage(name, args);
	return text;
};
$asm07.System.Xml.Res.GetString$2 = function (name) {
	var text = $asm07.System.Xml.Res.GetStringHelper(name);
	if (text === null) {
		text = $asm07.System.Xml.Res.GetFallbackMessage(name, null);
	}
	return text;
};
$asm07.System.Xml.Res.GetString$3 = function (name, /* ref */ usedFallback) {
	var text = $asm07.System.Xml.Res.GetStringHelper(name);
	if (text === null) {
		text = $asm07.System.Xml.Res.GetFallbackMessage(name, null);
		usedFallback.value = true;
	} else {
		usedFallback.value = false;
	}
	return text;
};
$asm07.System.Xml.Res.GetObject = function (name) {
	var res = $asm07.System.Xml.Res.GetLoader();
	var obj = null;
	if (res !== null) {
		obj = res.resources.GetObject$1(name, $asm07.System.Xml.Res.Culture);
		if (!(obj || (res.debugResources === null))) {
			obj = res.debugResources.GetObject$1(name, $asm07.System.Xml.Res.Culture);
		}
	}
	if (obj === null) {
		obj = $asm07.System.Xml.Res.GetFallbackMessage(name, null);
	}
	return obj;
};
$asm07.System.Xml.Res.GetStringHelper = function (name) {
	var res = $asm07.System.Xml.Res.GetLoader();
	var text = null;
	if (res !== null) {
		text = res.resources.GetString$1(name, $asm07.System.Xml.Res.Culture);
		if (!(text || (res.debugResources === null))) {
			text = res.debugResources.GetString$1(name, $asm07.System.Xml.Res.Culture);
		}
	}
	return text;
};
$asm07.System.Xml.Res.GetFallbackMessage = function (name, args) {
	var res = $asm07.System.Xml.Res.GetLoader();
	var text = null;
	if (!((res === null) || (res.fallbackResources === null))) {
		var string = res.fallbackResources.GetString$1("NoDebugResources", $asm07.System.Xml.Res.Culture);
		if (string !== null) {
			var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
			if (args !== null) {
			__loop0__: 
				for (var i = 0; i < args.length; ++i) {
					if (args[i]) {
						var text2 = args[i].toString();
						if (text2 !== null) {
							if (text2.length <= 1024) {
								stringBuilder.Append$2(text2);
							} else {
								stringBuilder.Append$2((text2.Substring$1(0, 1021) + "..."));
							}
							if (i < (args.length - 1)) {
								stringBuilder.Append$2(System.Globalization.CultureInfo.CurrentCulture.TextInfo.ListSeparator);
							}
						}
					}
				}
			}
			var text3 = stringBuilder.toString();
			if (text3 === null) {
				text3 = "";
			}
			text = System.String.Format(System.Globalization.CultureInfo.CurrentCulture, string, [name, text3, "4.0.60310.0", "System.Xml.dll", $asm07.System.Xml.Res.UriEncode(name)]);
		}
	}
	if (text === null) {
		text = name;
	}
	return text;
};
$asm07.System.Xml.Res.UriEncode = function (url) {
	if (url === null) {
		return null;
	}
	var array = System.Text.Encoding.UTF8.GetBytes$3(url);
	var num = 0;
	var num2 = 0;
	var num3 = array.length;
__loop0__: 
	for (var i = 0; i < num3; ++i) {
		var c = array[i];
		if (c === " ") {
			++num;
		} else if (!$asm07.System.Xml.Res.IsSafe(c)) {
			++num2;
		}
	}
	if (!((num === 0) && (num2 === 0))) {
		var array2 = JSIL.Array.New(System.Byte, (num3 + (num2 * 2)));
		var num4 = 0;
	__loop1__: 
		for (var j = 0; j < num3; ++j) {
			var b = array[j];
			var c2 = String.fromCharCode(b);
			if ($asm07.System.Xml.Res.IsSafe(c2)) {
				array2[num4++] = b;
			} else if (c2 === " ") {
				array2[num4++] = 43;
			} else {
				array2[num4++] = 37;
				array2[num4++] = ($asm07.System.Xml.Res.IntToHex(((b >> 4) & 15))).charCodeAt(0);
				array2[num4++] = ($asm07.System.Xml.Res.IntToHex((b & 15))).charCodeAt(0);
			}
		}
		array = array2;
	}
	return System.Text.Encoding.UTF8.GetString$1(array, 0, array.length);
};
$asm07.System.Xml.Res.IntToHex = function (n) {
	if (n <= 9) {
		return (n + 48);
	}
	return ((n - 10) + 97);
};
$asm07.System.Xml.Res.IsSafe = function (ch) {
	if (!(!((ch >= "a") && 
				(ch <= "z")) && 
			!((ch >= "A") && 
				(ch <= "Z")) && ((ch < "0") || 
				(ch > "9")))) {
		return true;
	}
	if (ch !== "!") {
		switch (ch) {
			case "'": 
			case "(": 
			case ")": 
			case "*": 
			case "-": 
			case ".": 
				return true;
			case "+": 
			case ",": 
				break;
			default: 
				if (ch === "_") {
					return true;
				}
				break;
		}
		return false;
	}
	return true;
};
JSIL.OverloadedMethod($asm07.System.Xml.Res, "GetString", [
		["GetString$0", [System.String, System.Array.Of(System.Object)]], 
		["GetString$1", [System.String, JSIL.Reference.Of(System.Boolean), System.Array.Of(System.Object)]], 
		["GetString$2", [System.String]], 
		["GetString$3", [System.String, JSIL.Reference.Of(System.Boolean)]]
	]);
JSIL.MakeProperty($asm07.System.Xml.Res, "InternalSyncObject", 
	$asm07.System.Xml.Res.get_InternalSyncObject, null);
JSIL.MakeProperty($asm07.System.Xml.Res, "Culture", 
	$asm07.System.Xml.Res.get_Culture, null);
Object.defineProperty($asm07.System.Xml.Res, "Xml_UserException", {
		"value": "Xml_UserException"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_DefaultException", {
		"value": "Xml_DefaultException"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_InvalidOperation", {
		"value": "Xml_InvalidOperation"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_ErrorFilePosition", {
		"value": "Xml_ErrorFilePosition"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_UnclosedQuote", {
		"value": "Xml_UnclosedQuote"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_UnexpectedEOF", {
		"value": "Xml_UnexpectedEOF"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_UnexpectedEOF1", {
		"value": "Xml_UnexpectedEOF1"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_UnexpectedEOFInElementContent", {
		"value": "Xml_UnexpectedEOFInElementContent"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_BadStartNameChar", {
		"value": "Xml_BadStartNameChar"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_BadNameChar", {
		"value": "Xml_BadNameChar"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_BadDecimalEntity", {
		"value": "Xml_BadDecimalEntity"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_BadHexEntity", {
		"value": "Xml_BadHexEntity"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_MissingByteOrderMark", {
		"value": "Xml_MissingByteOrderMark"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_UnknownEncoding", {
		"value": "Xml_UnknownEncoding"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_InternalError", {
		"value": "Xml_InternalError"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_InvalidCharInThisEncoding", {
		"value": "Xml_InvalidCharInThisEncoding"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_ErrorPosition", {
		"value": "Xml_ErrorPosition"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_MessageWithErrorPosition", {
		"value": "Xml_MessageWithErrorPosition"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_UnexpectedTokenEx", {
		"value": "Xml_UnexpectedTokenEx"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_UnexpectedTokens2", {
		"value": "Xml_UnexpectedTokens2"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_ExpectingWhiteSpace", {
		"value": "Xml_ExpectingWhiteSpace"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_TagMismatchEx", {
		"value": "Xml_TagMismatchEx"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_UnexpectedEndTag", {
		"value": "Xml_UnexpectedEndTag"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_UnknownNs", {
		"value": "Xml_UnknownNs"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_BadAttributeChar", {
		"value": "Xml_BadAttributeChar"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_ExpectExternalOrClose", {
		"value": "Xml_ExpectExternalOrClose"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_MissingRoot", {
		"value": "Xml_MissingRoot"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_MultipleRoots", {
		"value": "Xml_MultipleRoots"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_InvalidRootData", {
		"value": "Xml_InvalidRootData"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_XmlDeclNotFirst", {
		"value": "Xml_XmlDeclNotFirst"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_InvalidXmlDecl", {
		"value": "Xml_InvalidXmlDecl"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_InvalidNodeType", {
		"value": "Xml_InvalidNodeType"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_InvalidPIName", {
		"value": "Xml_InvalidPIName"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_InvalidXmlSpace", {
		"value": "Xml_InvalidXmlSpace"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_InvalidVersionNumber", {
		"value": "Xml_InvalidVersionNumber"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_DupAttributeName", {
		"value": "Xml_DupAttributeName"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_BadDTDLocation", {
		"value": "Xml_BadDTDLocation"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_ElementNotFound", {
		"value": "Xml_ElementNotFound"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_ElementNotFoundNs", {
		"value": "Xml_ElementNotFoundNs"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_PartialContentNodeTypeNotSupportedEx", {
		"value": "Xml_PartialContentNodeTypeNotSupportedEx"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_MultipleDTDsProvided", {
		"value": "Xml_MultipleDTDsProvided"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_CanNotBindToReservedNamespace", {
		"value": "Xml_CanNotBindToReservedNamespace"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_InvalidCharacter", {
		"value": "Xml_InvalidCharacter"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_InvalidBinHexValue", {
		"value": "Xml_InvalidBinHexValue"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_InvalidBinHexValueOddCount", {
		"value": "Xml_InvalidBinHexValueOddCount"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_InvalidTextDecl", {
		"value": "Xml_InvalidTextDecl"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_InvalidBase64Value", {
		"value": "Xml_InvalidBase64Value"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_UndeclaredEntity", {
		"value": "Xml_UndeclaredEntity"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_RecursiveParEntity", {
		"value": "Xml_RecursiveParEntity"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_RecursiveGenEntity", {
		"value": "Xml_RecursiveGenEntity"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_ExternalEntityInAttValue", {
		"value": "Xml_ExternalEntityInAttValue"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_UnparsedEntityRef", {
		"value": "Xml_UnparsedEntityRef"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_NotSameNametable", {
		"value": "Xml_NotSameNametable"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_NametableMismatch", {
		"value": "Xml_NametableMismatch"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_BadNamespaceDecl", {
		"value": "Xml_BadNamespaceDecl"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_ErrorParsingEntityName", {
		"value": "Xml_ErrorParsingEntityName"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_InvalidNmToken", {
		"value": "Xml_InvalidNmToken"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_EntityRefNesting", {
		"value": "Xml_EntityRefNesting"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_CannotResolveEntity", {
		"value": "Xml_CannotResolveEntity"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_CannotResolveEntityDtdIgnored", {
		"value": "Xml_CannotResolveEntityDtdIgnored"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_CannotResolveExternalSubset", {
		"value": "Xml_CannotResolveExternalSubset"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_CannotResolveUrl", {
		"value": "Xml_CannotResolveUrl"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_CDATAEndInText", {
		"value": "Xml_CDATAEndInText"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_ExternalEntityInStandAloneDocument", {
		"value": "Xml_ExternalEntityInStandAloneDocument"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_DtdAfterRootElement", {
		"value": "Xml_DtdAfterRootElement"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_ReadOnlyProperty", {
		"value": "Xml_ReadOnlyProperty"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_DtdIsProhibited", {
		"value": "Xml_DtdIsProhibited"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_DtdIsProhibitedEx", {
		"value": "Xml_DtdIsProhibitedEx"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_ReadSubtreeNotOnElement", {
		"value": "Xml_ReadSubtreeNotOnElement"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_DtdNotAllowedInFragment", {
		"value": "Xml_DtdNotAllowedInFragment"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_CannotStartDocumentOnFragment", {
		"value": "Xml_CannotStartDocumentOnFragment"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_ErrorOpeningExternalDtd", {
		"value": "Xml_ErrorOpeningExternalDtd"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_ErrorOpeningExternalEntity", {
		"value": "Xml_ErrorOpeningExternalEntity"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_ReadBinaryContentNotSupported", {
		"value": "Xml_ReadBinaryContentNotSupported"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_ReadValueChunkNotSupported", {
		"value": "Xml_ReadValueChunkNotSupported"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_InvalidReadContentAs", {
		"value": "Xml_InvalidReadContentAs"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_InvalidReadElementContentAs", {
		"value": "Xml_InvalidReadElementContentAs"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_MixedReadElementContentAs", {
		"value": "Xml_MixedReadElementContentAs"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_MixingReadValueChunkWithBinary", {
		"value": "Xml_MixingReadValueChunkWithBinary"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_MixingBinaryContentMethods", {
		"value": "Xml_MixingBinaryContentMethods"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_MixingV1StreamingWithV2Binary", {
		"value": "Xml_MixingV1StreamingWithV2Binary"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_InvalidReadValueChunk", {
		"value": "Xml_InvalidReadValueChunk"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_ReadContentAsFormatException", {
		"value": "Xml_ReadContentAsFormatException"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_DoubleBaseUri", {
		"value": "Xml_DoubleBaseUri"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_NotEnoughSpaceForSurrogatePair", {
		"value": "Xml_NotEnoughSpaceForSurrogatePair"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_EmptyUrl", {
		"value": "Xml_EmptyUrl"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_UnexpectedNodeInSimpleContent", {
		"value": "Xml_UnexpectedNodeInSimpleContent"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_InvalidWhitespaceCharacter", {
		"value": "Xml_InvalidWhitespaceCharacter"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_IncompatibleConformanceLevel", {
		"value": "Xml_IncompatibleConformanceLevel"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_LimitExceeded", {
		"value": "Xml_LimitExceeded"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_ClosedOrErrorReader", {
		"value": "Xml_ClosedOrErrorReader"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_CharEntityOverflow", {
		"value": "Xml_CharEntityOverflow"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_InvalidConditionalSection", {
		"value": "Xml_InvalidConditionalSection"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_UnexpectedCDataEnd", {
		"value": "Xml_UnexpectedCDataEnd"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_UnclosedConditionalSection", {
		"value": "Xml_UnclosedConditionalSection"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_ExpectDtdMarkup", {
		"value": "Xml_ExpectDtdMarkup"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_IncompleteDtdContent", {
		"value": "Xml_IncompleteDtdContent"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_EnumerationRequired", {
		"value": "Xml_EnumerationRequired"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_InvalidContentModel", {
		"value": "Xml_InvalidContentModel"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_FragmentId", {
		"value": "Xml_FragmentId"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_ExpectPcData", {
		"value": "Xml_ExpectPcData"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_ExpectNoWhitespace", {
		"value": "Xml_ExpectNoWhitespace"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_ExpectOp", {
		"value": "Xml_ExpectOp"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_InvalidAttributeType", {
		"value": "Xml_InvalidAttributeType"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_InvalidAttributeType1", {
		"value": "Xml_InvalidAttributeType1"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_ExpectAttType", {
		"value": "Xml_ExpectAttType"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_ColonInLocalName", {
		"value": "Xml_ColonInLocalName"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_InvalidParEntityRef", {
		"value": "Xml_InvalidParEntityRef"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_ExpectSubOrClose", {
		"value": "Xml_ExpectSubOrClose"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_ExpectExternalOrPublicId", {
		"value": "Xml_ExpectExternalOrPublicId"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_ExpectExternalIdOrEntityValue", {
		"value": "Xml_ExpectExternalIdOrEntityValue"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_ExpectIgnoreOrInclude", {
		"value": "Xml_ExpectIgnoreOrInclude"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_UnsupportedClass", {
		"value": "Xml_UnsupportedClass"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_NullResolver", {
		"value": "Xml_NullResolver"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_RelativeUriNotSupported", {
		"value": "Xml_RelativeUriNotSupported"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_PrefixForEmptyNs", {
		"value": "Xml_PrefixForEmptyNs"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_InvalidCommentChars", {
		"value": "Xml_InvalidCommentChars"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_UndefNamespace", {
		"value": "Xml_UndefNamespace"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_EmptyName", {
		"value": "Xml_EmptyName"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_EmptyLocalName", {
		"value": "Xml_EmptyLocalName"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_InvalidNameCharsDetail", {
		"value": "Xml_InvalidNameCharsDetail"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_NoStartTag", {
		"value": "Xml_NoStartTag"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_ClosedOrError", {
		"value": "Xml_ClosedOrError"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_WrongToken", {
		"value": "Xml_WrongToken"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_XmlPrefix", {
		"value": "Xml_XmlPrefix"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_XmlnsPrefix", {
		"value": "Xml_XmlnsPrefix"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_NamespaceDeclXmlXmlns", {
		"value": "Xml_NamespaceDeclXmlXmlns"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_NonWhitespace", {
		"value": "Xml_NonWhitespace"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_DupXmlDecl", {
		"value": "Xml_DupXmlDecl"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_CannotWriteXmlDecl", {
		"value": "Xml_CannotWriteXmlDecl"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_NoRoot", {
		"value": "Xml_NoRoot"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_InvalidPosition", {
		"value": "Xml_InvalidPosition"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_IncompleteEntity", {
		"value": "Xml_IncompleteEntity"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_InvalidSurrogateHighChar", {
		"value": "Xml_InvalidSurrogateHighChar"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_InvalidSurrogateMissingLowChar", {
		"value": "Xml_InvalidSurrogateMissingLowChar"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_InvalidSurrogatePairWithArgs", {
		"value": "Xml_InvalidSurrogatePairWithArgs"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_RedefinePrefix", {
		"value": "Xml_RedefinePrefix"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_DtdAlreadyWritten", {
		"value": "Xml_DtdAlreadyWritten"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_InvalidCharsInIndent", {
		"value": "Xml_InvalidCharsInIndent"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_IndentCharsNotWhitespace", {
		"value": "Xml_IndentCharsNotWhitespace"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_ConformanceLevelFragment", {
		"value": "Xml_ConformanceLevelFragment"}
);
Object.defineProperty($asm07.System.Xml.Res, "XmlConvert_BadUri", {
		"value": "XmlConvert_BadUri"}
);
Object.defineProperty($asm07.System.Xml.Res, "XmlConvert_BadFormat", {
		"value": "XmlConvert_BadFormat"}
);
Object.defineProperty($asm07.System.Xml.Res, "XmlConvert_Overflow", {
		"value": "XmlConvert_Overflow"}
);
Object.defineProperty($asm07.System.Xml.Res, "XmlConvert_TypeBadMapping", {
		"value": "XmlConvert_TypeBadMapping"}
);
Object.defineProperty($asm07.System.Xml.Res, "XmlConvert_TypeBadMapping2", {
		"value": "XmlConvert_TypeBadMapping2"}
);
Object.defineProperty($asm07.System.Xml.Res, "XmlConvert_TypeListBadMapping", {
		"value": "XmlConvert_TypeListBadMapping"}
);
Object.defineProperty($asm07.System.Xml.Res, "XmlConvert_TypeListBadMapping2", {
		"value": "XmlConvert_TypeListBadMapping2"}
);
Object.defineProperty($asm07.System.Xml.Res, "XmlConvert_TypeToString", {
		"value": "XmlConvert_TypeToString"}
);
Object.defineProperty($asm07.System.Xml.Res, "XmlConvert_TypeFromString", {
		"value": "XmlConvert_TypeFromString"}
);
Object.defineProperty($asm07.System.Xml.Res, "XmlConvert_TypeNoPrefix", {
		"value": "XmlConvert_TypeNoPrefix"}
);
Object.defineProperty($asm07.System.Xml.Res, "XmlConvert_TypeNoNamespace", {
		"value": "XmlConvert_TypeNoNamespace"}
);
Object.defineProperty($asm07.System.Xml.Res, "XmlConvert_NotOneCharString", {
		"value": "XmlConvert_NotOneCharString"}
);
Object.defineProperty($asm07.System.Xml.Res, "Sch_ParEntityRefNesting", {
		"value": "Sch_ParEntityRefNesting"}
);
Object.defineProperty($asm07.System.Xml.Res, "Sch_NotTokenString", {
		"value": "Sch_NotTokenString"}
);
Object.defineProperty($asm07.System.Xml.Res, "Sch_XsdDateTimeCompare", {
		"value": "Sch_XsdDateTimeCompare"}
);
Object.defineProperty($asm07.System.Xml.Res, "Sch_InvalidNullCast", {
		"value": "Sch_InvalidNullCast"}
);
Object.defineProperty($asm07.System.Xml.Res, "Sch_InvalidDateTimeOption", {
		"value": "Sch_InvalidDateTimeOption"}
);
Object.defineProperty($asm07.System.Xml.Res, "Sch_StandAloneNormalization", {
		"value": "Sch_StandAloneNormalization"}
);
Object.defineProperty($asm07.System.Xml.Res, "Sch_UnSpecifiedDefaultAttributeInExternalStandalone", {
		"value": "Sch_UnSpecifiedDefaultAttributeInExternalStandalone"}
);
Object.defineProperty($asm07.System.Xml.Res, "XmlDisallowNegativeValues", {
		"value": "XmlDisallowNegativeValues"}
);
Object.defineProperty($asm07.System.Xml.Res, "Enc_InvalidByteInEncoding", {
		"value": "Enc_InvalidByteInEncoding"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_CannotFindFileInXapPackage", {
		"value": "Xml_CannotFindFileInXapPackage"}
);
Object.defineProperty($asm07.System.Xml.Res, "Xml_XapResolverCannotOpenUri", {
		"value": "Xml_XapResolverCannotOpenUri"}
);
$asm07.System.Xml.Res.loader = null;
$asm07.System.Xml.Res.prototype.resources = null;
$asm07.System.Xml.Res.prototype.debugResources = null;
$asm07.System.Xml.Res.prototype.fallbackResources = null;
$asm07.System.Xml.Res.s_InternalSyncObject = null;
$asm07.System.Xml.Res._cctor = function () {
	$asm07.System.Xml.Res.loader = null;
};

Object.defineProperty($asm07.System.HResults, "Configuration", {
		"value": -2146232062}
);
Object.defineProperty($asm07.System.HResults, "Xml", {
		"value": -2146232000}
);
Object.defineProperty($asm07.System.HResults, "XmlSchema", {
		"value": -2146231999}
);
Object.defineProperty($asm07.System.HResults, "XmlXslt", {
		"value": -2146231998}
);
Object.defineProperty($asm07.System.HResults, "XmlXPath", {
		"value": -2146231997}
);
Object.defineProperty($asm07.System.HResults, "Data", {
		"value": -2146232032}
);
Object.defineProperty($asm07.System.HResults, "DataDeletedRowInaccessible", {
		"value": -2146232031}
);
Object.defineProperty($asm07.System.HResults, "DataDuplicateName", {
		"value": -2146232030}
);
Object.defineProperty($asm07.System.HResults, "DataInRowChangingEvent", {
		"value": -2146232029}
);
Object.defineProperty($asm07.System.HResults, "DataInvalidConstraint", {
		"value": -2146232028}
);
Object.defineProperty($asm07.System.HResults, "DataMissingPrimaryKey", {
		"value": -2146232027}
);
Object.defineProperty($asm07.System.HResults, "DataNoNullAllowed", {
		"value": -2146232026}
);
Object.defineProperty($asm07.System.HResults, "DataReadOnly", {
		"value": -2146232025}
);
Object.defineProperty($asm07.System.HResults, "DataRowNotInTable", {
		"value": -2146232024}
);
Object.defineProperty($asm07.System.HResults, "DataVersionNotFound", {
		"value": -2146232023}
);
Object.defineProperty($asm07.System.HResults, "DataConstraint", {
		"value": -2146232022}
);
Object.defineProperty($asm07.System.HResults, "StrongTyping", {
		"value": -2146232021}
);
Object.defineProperty($asm07.System.HResults, "SqlType", {
		"value": -2146232016}
);
Object.defineProperty($asm07.System.HResults, "SqlNullValue", {
		"value": -2146232015}
);
Object.defineProperty($asm07.System.HResults, "SqlTruncate", {
		"value": -2146232014}
);
Object.defineProperty($asm07.System.HResults, "AdapterMapping", {
		"value": -2146232013}
);
Object.defineProperty($asm07.System.HResults, "DataAdapter", {
		"value": -2146232012}
);
Object.defineProperty($asm07.System.HResults, "DBConcurrency", {
		"value": -2146232011}
);
Object.defineProperty($asm07.System.HResults, "OperationAborted", {
		"value": -2146232010}
);
Object.defineProperty($asm07.System.HResults, "InvalidUdt", {
		"value": -2146232009}
);
Object.defineProperty($asm07.System.HResults, "SqlException", {
		"value": -2146232060}
);
Object.defineProperty($asm07.System.HResults, "OdbcException", {
		"value": -2146232009}
);
Object.defineProperty($asm07.System.HResults, "OracleException", {
		"value": -2146232008}
);
Object.defineProperty($asm07.System.HResults, "NteBadKeySet", {
		"value": -2146893802}
);
Object.defineProperty($asm07.System.HResults, "Win32AccessDenied", {
		"value": -2147024891}
);
Object.defineProperty($asm07.System.HResults, "Win32InvalidHandle", {
		"value": -2147024890}
);
Object.defineProperty($asm07.System.HResults, "License", {
		"value": -2146232063}
);
Object.defineProperty($asm07.System.HResults, "InternalBufferOverflow", {
		"value": -2146232059}
);
Object.defineProperty($asm07.System.HResults, "ServiceControllerTimeout", {
		"value": -2146232058}
);
Object.defineProperty($asm07.System.HResults, "Install", {
		"value": -2146232057}
);
Object.defineProperty($asm07.System.HResults, "EFail", {
		"value": -2147467259}
);

$asm07.System.Xml.IncrementalReadDecoder.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
JSIL.OverloadedMethod($asm07.System.Xml.IncrementalReadDecoder.prototype, "Decode", [
		["Decode$0", [System.Array.Of(System.Char), System.Int32, System.Int32]], 
		["Decode$1", [System.String, System.Int32, System.Int32]]
	]);
JSIL.MakeProperty($asm07.System.Xml.IncrementalReadDecoder.prototype, "DecodedCount", 
	$asm07.System.Xml.IncrementalReadDecoder.prototype.get_DecodedCount, null);
JSIL.MakeProperty($asm07.System.Xml.IncrementalReadDecoder.prototype, "IsFull", 
	$asm07.System.Xml.IncrementalReadDecoder.prototype.get_IsFull, null);

$asm07.System.Xml.Base64Decoder.prototype.get_DecodedCount = function () {
	return (this.curIndex - this.startIndex);
};
$asm07.System.Xml.Base64Decoder.prototype.get_IsFull = function () {
	return (this.curIndex === this.endIndex);
};
$asm07.System.Xml.Base64Decoder.prototype.Decode$0 = JSIL.UntranslatableFunction("System.Int32 System.Xml.Base64Decoder::Decode(System.Char[],System.Int32,System.Int32)");
$asm07.System.Xml.Base64Decoder.prototype.Decode$1 = JSIL.UntranslatableFunction("System.Int32 System.Xml.Base64Decoder::Decode(System.String,System.Int32,System.Int32)");
$asm07.System.Xml.Base64Decoder.prototype.Reset = function () {
	this.bitsFilled = 0;
	this.bits = 0;
};
$asm07.System.Xml.Base64Decoder.prototype.SetNextOutputBuffer = function (buffer, index, count) {
	this.buffer = JSIL.Cast(buffer, System.Array.Of(System.Byte));
	this.startIndex = index;
	this.curIndex = index;
	this.endIndex = (index + count);
};
$asm07.System.Xml.Base64Decoder.ConstructMapBase64 = function () {
	var array = JSIL.Array.New(System.Byte, 123);
__loop0__: 
	for (var i = 0; i < array.length; ++i) {
		array[i] = 255;
	}
__loop1__: 
	for (var j = 0; j < $asm07.System.Xml.Base64Decoder.CharsBase64.length; ++j) {
		array[$asm07.System.Xml.Base64Decoder.CharsBase64[j].charCodeAt(0)] = j;
	}
	return array;
};
$asm07.System.Xml.Base64Decoder.prototype._ctor = function () {
	$asm07.System.Xml.IncrementalReadDecoder.prototype._ctor.call(this);
};
JSIL.OverloadedMethod($asm07.System.Xml.Base64Decoder.prototype, "Decode", [
		["Decode$0", [System.Array.Of(System.Char), System.Int32, System.Int32]], 
		["Decode$1", [System.String, System.Int32, System.Int32]]
	]);
JSIL.MakeProperty($asm07.System.Xml.Base64Decoder.prototype, "DecodedCount", 
	$asm07.System.Xml.Base64Decoder.prototype.get_DecodedCount, null);
JSIL.MakeProperty($asm07.System.Xml.Base64Decoder.prototype, "IsFull", 
	$asm07.System.Xml.Base64Decoder.prototype.get_IsFull, null);
Object.defineProperty($asm07.System.Xml.Base64Decoder, "MaxValidChar", {
		"value": 122}
);
Object.defineProperty($asm07.System.Xml.Base64Decoder, "Invalid", {
		"value": 255}
);
$asm07.System.Xml.Base64Decoder.prototype.buffer = null;
$asm07.System.Xml.Base64Decoder.prototype.startIndex = 0;
$asm07.System.Xml.Base64Decoder.prototype.curIndex = 0;
$asm07.System.Xml.Base64Decoder.prototype.endIndex = 0;
$asm07.System.Xml.Base64Decoder.prototype.bits = 0;
$asm07.System.Xml.Base64Decoder.prototype.bitsFilled = 0;
$asm07.System.Xml.Base64Decoder.CharsBase64 = null;
$asm07.System.Xml.Base64Decoder.MapBase64 = null;
$asm07.System.Xml.Base64Decoder._cctor = function () {
	$asm07.System.Xml.Base64Decoder.CharsBase64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
	$asm07.System.Xml.Base64Decoder.MapBase64 = $asm07.System.Xml.Base64Decoder.ConstructMapBase64();
};

$asm07.System.Xml.Base64Encoder.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
	this.charsLine = JSIL.Array.New(System.Char, 76);
};
$asm07.System.Xml.Base64Encoder.prototype.Encode = function (buffer, index, count) {
	if (buffer === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["buffer"]);
	}
	if (index < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["index"]);
	}
	if (count < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["count"]);
	}
	if (count > (buffer.length - index)) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["count"]);
	}
	if (this.leftOverBytesCount > 0) {
		var num = this.leftOverBytesCount;
	__loop0__: 
		while ((num < 3) && (count > 0)) {
			this.leftOverBytes[num++] = buffer[index++];
			--count;
		}
		if (!((count !== 0) || (num >= 3))) {
			this.leftOverBytesCount = num;
			return;
		}
		var count2 = System.Convert.ToBase64CharArray$0(
			this.leftOverBytes, 
			0, 
			3, 
			this.charsLine, 
			0
		);
		this.WriteChars(this.charsLine, 0, count2);
	}
	this.leftOverBytesCount = (count % 3);
	if (this.leftOverBytesCount > 0) {
		count -= this.leftOverBytesCount;
		if (this.leftOverBytes === null) {
			this.leftOverBytes = JSIL.Array.New(System.Byte, 3);
		}
	__loop1__: 
		for (var i = 0; i < this.leftOverBytesCount; ++i) {
			this.leftOverBytes[i] = buffer[((index + count) + i)];
		}
	}
	var num2 = (index + count);
	var num3 = 57;
__loop2__: 
	while (index < num2) {
		if ((index + num3) > num2) {
			num3 = (num2 - index);
		}
		var count3 = System.Convert.ToBase64CharArray$0(
			buffer, 
			index, 
			num3, 
			this.charsLine, 
			0
		);
		this.WriteChars(this.charsLine, 0, count3);
		index += num3;
	}
};
$asm07.System.Xml.Base64Encoder.prototype.Flush = function () {
	if (this.leftOverBytesCount > 0) {
		var count = System.Convert.ToBase64CharArray$0(
			this.leftOverBytes, 
			0, 
			this.leftOverBytesCount, 
			this.charsLine, 
			0
		);
		this.WriteChars(this.charsLine, 0, count);
		this.leftOverBytesCount = 0;
	}
};
Object.defineProperty($asm07.System.Xml.Base64Encoder, "Base64LineSize", {
		"value": 76}
);
Object.defineProperty($asm07.System.Xml.Base64Encoder, "LineSizeInBytes", {
		"value": 57}
);
$asm07.System.Xml.Base64Encoder.prototype.leftOverBytes = null;
$asm07.System.Xml.Base64Encoder.prototype.leftOverBytesCount = 0;
$asm07.System.Xml.Base64Encoder.prototype.charsLine = null;

$asm07.System.Xml.XmlRawWriterBase64Encoder.prototype._ctor = function (rawWriter) {
	$asm07.System.Xml.Base64Encoder.prototype._ctor.call(this);
	this.rawWriter = rawWriter;
};
$asm07.System.Xml.XmlRawWriterBase64Encoder.prototype.WriteChars = function (chars, index, count) {
	this.rawWriter.WriteRaw$0(chars, index, count);
};
$asm07.System.Xml.XmlRawWriterBase64Encoder.prototype.rawWriter = null;

$asm07.System.Xml.BinHexDecoder.prototype.get_DecodedCount = function () {
	return (this.curIndex - this.startIndex);
};
$asm07.System.Xml.BinHexDecoder.prototype.get_IsFull = function () {
	return (this.curIndex === this.endIndex);
};
$asm07.System.Xml.BinHexDecoder.prototype.Decode$0 = JSIL.UntranslatableFunction("System.Int32 System.Xml.BinHexDecoder::Decode(System.Char[],System.Int32,System.Int32)");
$asm07.System.Xml.BinHexDecoder.prototype.Decode$1 = JSIL.UntranslatableFunction("System.Int32 System.Xml.BinHexDecoder::Decode(System.String,System.Int32,System.Int32)");
$asm07.System.Xml.BinHexDecoder.prototype.Reset = function () {
	this.hasHalfByteCached = false;
	this.cachedHalfByte = 0;
};
$asm07.System.Xml.BinHexDecoder.prototype.SetNextOutputBuffer = function (buffer, index, count) {
	this.buffer = JSIL.Cast(buffer, System.Array.Of(System.Byte));
	this.startIndex = index;
	this.curIndex = index;
	this.endIndex = (index + count);
};
$asm07.System.Xml.BinHexDecoder.Decode = JSIL.UntranslatableFunction("System.Byte[] System.Xml.BinHexDecoder::Decode(System.Char[],System.Boolean)");
$asm07.System.Xml.BinHexDecoder.prototype._ctor = function () {
	$asm07.System.Xml.IncrementalReadDecoder.prototype._ctor.call(this);
};
JSIL.OverloadedMethod($asm07.System.Xml.BinHexDecoder.prototype, "Decode", [
		["Decode$0", [System.Array.Of(System.Char), System.Int32, System.Int32]], 
		["Decode$1", [System.String, System.Int32, System.Int32]]
	]);
JSIL.MakeProperty($asm07.System.Xml.BinHexDecoder.prototype, "DecodedCount", 
	$asm07.System.Xml.BinHexDecoder.prototype.get_DecodedCount, null);
JSIL.MakeProperty($asm07.System.Xml.BinHexDecoder.prototype, "IsFull", 
	$asm07.System.Xml.BinHexDecoder.prototype.get_IsFull, null);
$asm07.System.Xml.BinHexDecoder.prototype.buffer = null;
$asm07.System.Xml.BinHexDecoder.prototype.startIndex = 0;
$asm07.System.Xml.BinHexDecoder.prototype.curIndex = 0;
$asm07.System.Xml.BinHexDecoder.prototype.endIndex = 0;
$asm07.System.Xml.BinHexDecoder.prototype.hasHalfByteCached = false;
$asm07.System.Xml.BinHexDecoder.prototype.cachedHalfByte = 0;

$asm07.System.Xml.BinHexEncoder.Encode$0 = function (buffer, index, count, writer) {
	if (buffer === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["buffer"]);
	}
	if (index < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["index"]);
	}
	if (count < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["count"]);
	}
	if (count > (buffer.length - index)) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["count"]);
	}
	var array = JSIL.Array.New(System.Char, ((count * 2) < 128) ? (count * 2) : 128);
	var num = (index + count);
__loop0__: 
	while (index < num) {
		var num2 = (count < 64) ? count : 64;
		var count2 = $asm07.System.Xml.BinHexEncoder.Encode$2(buffer, index, num2, array);
		writer.WriteRaw$0(array, 0, count2);
		index += num2;
		count -= num2;
	}
};
$asm07.System.Xml.BinHexEncoder.Encode$1 = function (inArray, offsetIn, count) {
	if (inArray === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["inArray"]);
	}
	if (0 > offsetIn) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["offsetIn"]);
	}
	if (0 > count) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["count"]);
	}
	if (count > (inArray.length - offsetIn)) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["count"]);
	}
	var array = JSIL.Array.New(System.Char, (2 * count));
	var length = $asm07.System.Xml.BinHexEncoder.Encode$2(inArray, offsetIn, count, array);
	return JSIL.New(System.String, "_ctor$0", [array, 0, length]);
};
$asm07.System.Xml.BinHexEncoder.Encode$2 = function (inArray, offsetIn, count, outArray) {
	var num = 0;
	var num3 = outArray.length;
__loop0__: 
	for (var i = 0; i < count; ++i) {
		var b = inArray[offsetIn++];
		outArray[num++] = ("0123456789ABCDEF"[(b >> 4)]);
		if (num === num3) {
			break __loop0__;
		}
		outArray[num++] = ("0123456789ABCDEF"[(b & 15)]);
		if (num === num3) {
			break __loop0__;
		}
	}
	return (num - 0);
};
JSIL.OverloadedMethod($asm07.System.Xml.BinHexEncoder, "Encode", [
		["Encode$0", [System.Array.Of(System.Byte), System.Int32, System.Int32, System.Xml.XmlWriter]], 
		["Encode$1", [System.Array.Of(System.Byte), System.Int32, System.Int32]], 
		["Encode$2", [System.Array.Of(System.Byte), System.Int32, System.Int32, System.Array.Of(System.Char)]]
	]);
Object.defineProperty($asm07.System.Xml.BinHexEncoder, "s_hexDigits", {
		"value": "0123456789ABCDEF"}
);
Object.defineProperty($asm07.System.Xml.BinHexEncoder, "CharsChunkSize", {
		"value": 128}
);

$asm07.System.Xml.Bits.Count = function (num) {
	num = ((num & $asm07.System.Xml.Bits.MASK_0101010101010101) + ((num >>> 1) & $asm07.System.Xml.Bits.MASK_0101010101010101));
	num = ((num & $asm07.System.Xml.Bits.MASK_0011001100110011) + ((num >>> 2) & $asm07.System.Xml.Bits.MASK_0011001100110011));
	num = ((num & $asm07.System.Xml.Bits.MASK_0000111100001111) + ((num >>> 4) & $asm07.System.Xml.Bits.MASK_0000111100001111));
	num = ((num & $asm07.System.Xml.Bits.MASK_0000000011111111) + ((num >>> 8) & $asm07.System.Xml.Bits.MASK_0000000011111111));
	num = ((num & $asm07.System.Xml.Bits.MASK_1111111111111111) + (num >>> 16));
	return num;
};
$asm07.System.Xml.Bits.ExactlyOne = function (num) {
	return ((num !== 0) && ((num & (num - 1)) === 0));
};
$asm07.System.Xml.Bits.LeastPosition = function (num) {
	if (num === 0) {
		return 0;
	}
	return $asm07.System.Xml.Bits.Count((num ^ (num - 1)));
};
$asm07.System.Xml.Bits.MASK_0101010101010101 = 0;
$asm07.System.Xml.Bits.MASK_0011001100110011 = 0;
$asm07.System.Xml.Bits.MASK_0000111100001111 = 0;
$asm07.System.Xml.Bits.MASK_0000000011111111 = 0;
$asm07.System.Xml.Bits.MASK_1111111111111111 = 0;
$asm07.System.Xml.Bits._cctor = function () {
	$asm07.System.Xml.Bits.MASK_0101010101010101 = 1431655765;
	$asm07.System.Xml.Bits.MASK_0011001100110011 = 858993459;
	$asm07.System.Xml.Bits.MASK_0000111100001111 = 252645135;
	$asm07.System.Xml.Bits.MASK_0000000011111111 = 16711935;
	$asm07.System.Xml.Bits.MASK_1111111111111111 = 65535;
};

$asm07.System.Xml.BitStack.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
	this.curr = 1;
};
$asm07.System.Xml.BitStack.prototype.PushBit = function (bit) {
	if (this.curr & -2147483648) {
		this.PushCurr();
	}
	this.curr = ((this.curr << 1) | bit ? 1 : 0);
};
$asm07.System.Xml.BitStack.prototype.PopBit = function () {
	this.curr = (this.curr >>> 1);
	if (this.curr === 1) {
		this.PopCurr();
	}
	return ((this.curr & 1) !== 0);
};
$asm07.System.Xml.BitStack.prototype.PeekBit = function () {
	return ((this.curr & 1) !== 0);
};
$asm07.System.Xml.BitStack.prototype.PushCurr = function () {
	if (this.bitStack === null) {
		this.bitStack = JSIL.Array.New(System.UInt32, 16);
	}
	this.bitStack[this.stackPos++] = this.curr;
	this.curr = 1;
	var num = this.bitStack.length;
	if (this.stackPos >= num) {
		var destinationArray = JSIL.Array.New(System.UInt32, (2 * num));
		System.Array.Copy$0(this.bitStack, destinationArray, num);
		this.bitStack = destinationArray;
	}
};
$asm07.System.Xml.BitStack.prototype.PopCurr = function () {
	if (this.stackPos > 0) {
		this.curr = this.bitStack[--this.stackPos];
	}
};
$asm07.System.Xml.BitStack.prototype.bitStack = null;
$asm07.System.Xml.BitStack.prototype.stackPos = 0;
$asm07.System.Xml.BitStack.prototype.curr = 0;

$asm07.System.Xml.BufferBuilder.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm07.System.Xml.BufferBuilder.prototype.get_Length = function () {
	return this.length;
};
$asm07.System.Xml.BufferBuilder.prototype.set_Length = function (value) {
	if (!((value >= 0) && (value <= this.length))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["value"]);
	}
	if (value === 0) {
		this.Clear();
		return;
	}
	this.SetLength(value);
};
$asm07.System.Xml.BufferBuilder.prototype.Append$0 = function (value) {
	if ((this.length + 1) <= 65536) {
		if (this.stringBuilder === null) {
			this.stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
		}
		this.stringBuilder.Append$7(value);
	} else {
		if (this.lastBuffer === null) {
			this.CreateBuffers();
		}
		if (this.lastBufferIndex === this.lastBuffer.length) {
			this.AddBuffer();
		}
		this.lastBuffer[this.lastBufferIndex++] = value;
	}
	++this.length;
};
$asm07.System.Xml.BufferBuilder.prototype.Append$1 = JSIL.UntranslatableFunction("System.Void System.Xml.BufferBuilder::Append(System.Char[],System.Int32,System.Int32)");
$asm07.System.Xml.BufferBuilder.prototype.Append$2 = function (value) {
	this.Append$3(value, 0, value.length);
};
$asm07.System.Xml.BufferBuilder.prototype.Append$3 = JSIL.UntranslatableFunction("System.Void System.Xml.BufferBuilder::Append(System.String,System.Int32,System.Int32)");
$asm07.System.Xml.BufferBuilder.prototype.Clear = function () {
	if (this.length <= 65536) {
		if (this.stringBuilder !== null) {
			this.stringBuilder.Length = 0;
		}
	} else {
		if (this.lastBuffer !== null) {
			this.ClearBuffers();
		}
		this.stringBuilder = null;
	}
	this.length = 0;
};
$asm07.System.Xml.BufferBuilder.prototype.ClearBuffers = function () {
	if (this.buffers !== null) {
	__loop0__: 
		for (var i = 0; i < this.buffersCount; ++i) {
			this.Recycle(JSIL.UnmaterializedReference());
		}
		this.lastBuffer = null;
	}
	this.lastBufferIndex = 0;
	this.buffersCount = 0;
};
$asm07.System.Xml.BufferBuilder.prototype.toString = function () {
	if (!((this.length > 65536) && ((this.buffersCount !== 1) || 
				this.lastBufferIndex))) {
		var result = this.stringBuilder ? this.stringBuilder.toString() : System.String.Empty;
	} else {
		if (this.stringBuilder === null) {
			this.stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$1", [this.length]);
		} else {
			this.stringBuilder.Capacity = this.length;
		}
		var num = (this.length - this.stringBuilder.Length);
	__loop0__: 
		for (var i = 0; i < (this.buffersCount - 1); ++i) {
			var buffer = this.buffers[i].buffer;
			this.stringBuilder.Append$1(buffer, 0, buffer.length);
			num -= buffer.length;
		}
		this.stringBuilder.Append$1(this.buffers[(this.buffersCount - 1)].buffer, 0, num);
		this.ClearBuffers();
		result = this.stringBuilder.toString();
	}
	return result;
};
$asm07.System.Xml.BufferBuilder.prototype.CreateBuffers = function () {
	if (this.buffers === null) {
		this.lastBuffer = JSIL.Array.New(System.Char, 65536);
		this.buffers = JSIL.Array.New($asm07.System.Xml.BufferBuilder.Buffer, 4);
		this.buffers[0].buffer = this.lastBuffer;
		this.buffersCount = 1;
		return;
	}
	this.AddBuffer();
};
$asm07.System.Xml.BufferBuilder.prototype.AddBuffer = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				if ((this.buffersCount + 1) === this.buffers.length) {
					var destinationArray = JSIL.Array.New($asm07.System.Xml.BufferBuilder.Buffer, (this.buffers.length * 2));
					System.Array.Copy$1(
						this.buffers, 
						0, 
						destinationArray, 
						0, 
						this.buffers.length
					);
					this.buffers = destinationArray;
				}
				if (this.buffers[this.buffersCount].recycledBuffer !== null) {
					var array = JSIL.Cast(this.buffers[this.buffersCount].recycledBuffer.Target, System.Array.Of(System.Char));
					if (array !== null) {
						this.buffers[this.buffersCount].recycledBuffer.Target = null;
						__label0__ = "IL_A4";
						continue __step0__;
					}
				}
				array = JSIL.Array.New(System.Char, 65536);
				__label0__ = "IL_A4";
				continue __step0__;
				break;
			case "IL_A4":
				this.lastBuffer = array;
				this.buffers[this.buffersCount++].buffer = array;
				this.lastBufferIndex = 0;
				break __step0__;
		}
	}
};
$asm07.System.Xml.BufferBuilder.prototype.Recycle = function (/* ref */ buf) {
	if (buf.value.recycledBuffer === null) {
		buf.value.recycledBuffer = JSIL.New(System.WeakReference, "_ctor$1", [buf.value.buffer]);
	} else {
		buf.value.recycledBuffer.Target = buf.value.buffer;
	}
	buf.value.buffer = null;
};
$asm07.System.Xml.BufferBuilder.prototype.SetLength = function (newLength) {
	if (newLength === this.length) {
		return;
	}
	if (this.length <= 65536) {
		this.stringBuilder.Length = newLength;
	} else {
		var num = newLength;
	__loop0__: 
		for (var i = 0; !((i >= this.buffersCount) || (num < this.buffers[i].buffer.length)); ++i) {
			num -= this.buffers[i].buffer.length;
		}
		if (i < this.buffersCount) {
			this.lastBuffer = this.buffers[i].buffer;
			this.lastBufferIndex = num;
			++i;
			var num2 = i;
		__loop1__: 
			while (i < this.buffersCount) {
				this.Recycle(JSIL.UnmaterializedReference());
				++i;
			}
			this.buffersCount = num2;
		}
	}
	this.length = newLength;
};
JSIL.OverloadedMethod($asm07.System.Xml.BufferBuilder.prototype, "Append", [
		["Append$0", [System.Char]], 
		["Append$1", [System.Array.Of(System.Char), System.Int32, System.Int32]], 
		["Append$2", [System.String]], 
		["Append$3", [System.String, System.Int32, System.Int32]]
	]);
JSIL.MakeProperty($asm07.System.Xml.BufferBuilder.prototype, "Length", 
	$asm07.System.Xml.BufferBuilder.prototype.get_Length, $asm07.System.Xml.BufferBuilder.prototype.set_Length);
Object.defineProperty($asm07.System.Xml.BufferBuilder, "BufferSize", {
		"value": 65536}
);
Object.defineProperty($asm07.System.Xml.BufferBuilder, "InitialBufferArrayLength", {
		"value": 4}
);
Object.defineProperty($asm07.System.Xml.BufferBuilder, "MaxStringBuilderLength", {
		"value": 65536}
);
Object.defineProperty($asm07.System.Xml.BufferBuilder, "DefaultSBCapacity", {
		"value": 16}
);
$asm07.System.Xml.BufferBuilder.prototype.stringBuilder = null;
$asm07.System.Xml.BufferBuilder.prototype.buffers = null;
$asm07.System.Xml.BufferBuilder.prototype.buffersCount = 0;
$asm07.System.Xml.BufferBuilder.prototype.lastBuffer = null;
$asm07.System.Xml.BufferBuilder.prototype.lastBufferIndex = 0;
$asm07.System.Xml.BufferBuilder.prototype.length = 0;

$asm07.System.Xml.BufferBuilder.Buffer.prototype.buffer = null;
$asm07.System.Xml.BufferBuilder.Buffer.prototype.recycledBuffer = null;

$asm07.System.Xml.LineInfo.prototype._ctor = function (lineNo, linePos) {
	this.lineNo = lineNo;
	this.linePos = linePos;
};
$asm07.System.Xml.LineInfo.prototype.Set = function (lineNo, linePos) {
	this.lineNo = lineNo;
	this.linePos = linePos;
};
$asm07.System.Xml.LineInfo.prototype.lineNo = 0;
$asm07.System.Xml.LineInfo.prototype.linePos = 0;

System.Xml.XmlNameTable.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
JSIL.OverloadedMethod(System.Xml.XmlNameTable.prototype, "Get", [
		["Get$0", [System.Array.Of(System.Char), System.Int32, System.Int32]], 
		["Get$1", [System.String]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlNameTable.prototype, "Add", [
		["Add$0", [System.Array.Of(System.Char), System.Int32, System.Int32]], 
		["Add$1", [System.String]]
	]);

System.Xml.NameTable.prototype._ctor = function () {
	System.Xml.XmlNameTable.prototype._ctor.call(this);
	this.mask = 31;
	this.entries = JSIL.Array.New($asm07.System.Xml.NameTable.Entry, (this.mask + 1));
	this.hashCodeRandomizer = System.Environment.TickCount;
};
System.Xml.NameTable.prototype.Add$0 = function (key) {
	if (key === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["key"]);
	}
	var length = key.length;
	if (length === 0) {
		return System.String.Empty;
	}
	var num = (length + this.hashCodeRandomizer);
__loop0__: 
	for (var i = 0; i < key.length; ++i) {
		num += ((num << 7) ^ key[i].charCodeAt(0));
	}
	num -= (num >> 17);
	num -= (num >> 11);
	num -= (num >> 5);
	var entry = this.entries[(num & this.mask)];
__loop1__: 
	while (entry) {
		if (!((entry.hashCode !== num) || !entry.str.Equals$1(key))) {
			return entry.str;
		}
		entry = entry.next;
	}
	return this.AddEntry(key, num);
};
System.Xml.NameTable.prototype.Add$1 = function (key, start, len) {
	if (len === 0) {
		return System.String.Empty;
	}
	var num = (len + this.hashCodeRandomizer);
	num += ((num << 7) ^ key[start]);
	var num2 = (start + len);
__loop0__: 
	for (var i = (start + 1); i < num2; ++i) {
		num += ((num << 7) ^ key[i]);
	}
	num -= (num >> 17);
	num -= (num >> 11);
	num -= (num >> 5);
	var entry = this.entries[(num & this.mask)];
__loop1__: 
	while (entry) {
		if (!((entry.hashCode !== num) || !System.Xml.NameTable.TextEquals(entry.str, key, start, len))) {
			return entry.str;
		}
		entry = entry.next;
	}
	return this.AddEntry(JSIL.New(System.String, "_ctor$0", [key, start, len]), num);
};
System.Xml.NameTable.prototype.Get$0 = function (value) {
	if (value === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["value"]);
	}
	if (value.length === 0) {
		return System.String.Empty;
	}
	var num = (value.length + this.hashCodeRandomizer);
	var num2 = num;
__loop0__: 
	for (var i = 0; i < value.length; ++i) {
		num2 += ((num2 << 7) ^ value[i].charCodeAt(0));
	}
	num2 -= (num2 >> 17);
	num2 -= (num2 >> 11);
	num2 -= (num2 >> 5);
	var entry = this.entries[(num2 & this.mask)];
__loop1__: 
	while (entry) {
		if (!((entry.hashCode !== num2) || !entry.str.Equals$1(value))) {
			return entry.str;
		}
		entry = entry.next;
	}
	return null;
};
System.Xml.NameTable.prototype.Get$1 = function (key, start, len) {
	if (len === 0) {
		return System.String.Empty;
	}
	var num = (len + this.hashCodeRandomizer);
	num += ((num << 7) ^ key[start]);
	var num2 = (start + len);
__loop0__: 
	for (var i = (start + 1); i < num2; ++i) {
		num += ((num << 7) ^ key[i]);
	}
	num -= (num >> 17);
	num -= (num >> 11);
	num -= (num >> 5);
	var entry = this.entries[(num & this.mask)];
__loop1__: 
	while (entry) {
		if (!((entry.hashCode !== num) || !System.Xml.NameTable.TextEquals(entry.str, key, start, len))) {
			return entry.str;
		}
		entry = entry.next;
	}
	return null;
};
System.Xml.NameTable.prototype.AddEntry = function (str, hashCode) {
	var num = (hashCode & this.mask);
	var entry = new $asm07.System.Xml.NameTable.Entry(str, hashCode, this.entries[num]);
	this.entries[num] = entry;
	if (this.count++ === this.mask) {
		this.Grow();
	}
	return entry.str;
};
System.Xml.NameTable.prototype.Grow = function () {
	var num = ((this.mask * 2) + 1);
	var array = this.entries;
	var array2 = JSIL.Array.New($asm07.System.Xml.NameTable.Entry, (num + 1));
__loop0__: 
	for (var i = 0; i < array.length; ++i) {
		var entry = array[i];
	__loop1__: 
		while (entry) {
			var num2 = (entry.hashCode & num);
			var next = entry.next;
			entry.next = array2[num2];
			array2[num2] = entry;
			entry = next;
		}
	}
	this.entries = array2;
	this.mask = num;
};
System.Xml.NameTable.TextEquals = function (str1, str2, str2Start, str2Length) {
	if (str1.length !== str2Length) {
		return false;
	}
__loop0__: 
	for (var i = 0; i < str1.length; ++i) {
		if ((str1[i]) !== str2[(str2Start + i)]) {
			return false;
		}
	}
	return true;
};
JSIL.OverloadedMethod(System.Xml.NameTable.prototype, "Add", [
		["Add$0", [System.String]], 
		["Add$1", [System.Array.Of(System.Char), System.Int32, System.Int32]]
	]);
JSIL.OverloadedMethod(System.Xml.NameTable.prototype, "Get", [
		["Get$0", [System.String]], 
		["Get$1", [System.Array.Of(System.Char), System.Int32, System.Int32]]
	]);
System.Xml.NameTable.prototype.entries = null;
System.Xml.NameTable.prototype.count = 0;
System.Xml.NameTable.prototype.mask = 0;
System.Xml.NameTable.prototype.hashCodeRandomizer = 0;

$asm07.System.Xml.NameTable.Entry.prototype._ctor = function (str, hashCode, next) {
	System.Object.prototype._ctor.call(this);
	this.str = str;
	this.hashCode = hashCode;
	this.next = next;
};
$asm07.System.Xml.NameTable.Entry.prototype.str = null;
$asm07.System.Xml.NameTable.Entry.prototype.hashCode = 0;
$asm07.System.Xml.NameTable.Entry.prototype.next = null;

$asm07.System.Xml.Ref.Equal = function (strA, strB) {
	return (strA === strB);
};
$asm07.System.Xml.Ref.Equals = function (objA, objB) {
};

$asm07.System.Xml.ValidateNames.ParseNmtokenNoNamespaces = function (s, offset) {
__loop0__: 
	for (var num = offset; !((num >= s.length) || (!($asm07.System.Xml.ValidateNames.xmlCharType.charProperties[s[num].charCodeAt(0)] & 8) && 
				((s[num]) !== ":"))); ++num) {
	}
	return (num - offset);
};
$asm07.System.Xml.ValidateNames.IsNmtokenNoNamespaces = function (s) {
	var num = $asm07.System.Xml.ValidateNames.ParseNmtokenNoNamespaces(s, 0);
	return ((num > 0) && (num === s.length));
};
$asm07.System.Xml.ValidateNames.ParseNameNoNamespaces = function (s, offset) {
	var num = offset;
	if (num < s.length) {
		if (!($asm07.System.Xml.ValidateNames.xmlCharType.charProperties[s[num].charCodeAt(0)] & 4) && ((s[num]) !== ":")) {
			return 0;
		}
	__loop0__: 
		for (++num; !((num >= s.length) || (!($asm07.System.Xml.ValidateNames.xmlCharType.charProperties[s[num].charCodeAt(0)] & 8) && 
					((s[num]) !== ":"))); ++num) {
		}
	}
	return (num - offset);
};
$asm07.System.Xml.ValidateNames.IsNameNoNamespaces = function (s) {
	var num = $asm07.System.Xml.ValidateNames.ParseNameNoNamespaces(s, 0);
	return ((num > 0) && (num === s.length));
};
$asm07.System.Xml.ValidateNames.ParseNCName$0 = function (s, offset) {
	var num = offset;
	if (num < s.length) {
		if (!($asm07.System.Xml.ValidateNames.xmlCharType.charProperties[s[num].charCodeAt(0)] & 4)) {
			return 0;
		}
	__loop0__: 
		for (++num; !((num >= s.length) || !($asm07.System.Xml.ValidateNames.xmlCharType.charProperties[s[num].charCodeAt(0)] & 8)); ++num) {
		}
	}
	return (num - offset);
};
$asm07.System.Xml.ValidateNames.ParseNCName$1 = function (s) {
	return $asm07.System.Xml.ValidateNames.ParseNCName$0(s, 0);
};
$asm07.System.Xml.ValidateNames.ParseNCNameThrow = function (s) {
	$asm07.System.Xml.ValidateNames.ParseNCNameInternal(s, true);
	return s;
};
$asm07.System.Xml.ValidateNames.ParseNCNameInternal = function (s, throwOnError) {
	var num = $asm07.System.Xml.ValidateNames.ParseNCName$0(s, 0);
	if (!((num !== 0) && (num === s.length))) {
		if (throwOnError) {
			$asm07.System.Xml.ValidateNames.ThrowInvalidName(s, 0, num);
		}
		return false;
	}
	return true;
};
$asm07.System.Xml.ValidateNames.ParseQName = function (s, offset, /* ref */ colonOffset) {
	colonOffset.value = 0;
	var num = $asm07.System.Xml.ValidateNames.ParseNCName$0(s, offset);
	if (num !== 0) {
		offset += num;
		if (!((offset >= s.length) || ((s[offset]) !== ":"))) {
			var num2 = $asm07.System.Xml.ValidateNames.ParseNCName$0(s, (offset + 1));
			if (num2 !== 0) {
				colonOffset.value = offset;
				num += (num2 + 1);
			}
		}
	}
	return num;
};
$asm07.System.Xml.ValidateNames.ParseQNameThrow = function (s, /* ref */ prefix, /* ref */ localName) {
	var num2 = new JSIL.Variable(0);
	var num = $asm07.System.Xml.ValidateNames.ParseQName(s, 0, /* ref */ num2);
	if (!((num !== 0) && (num === s.length))) {
		$asm07.System.Xml.ValidateNames.ThrowInvalidName(s, 0, num);
	}
	if (num2.value !== 0) {
		prefix.value = s.Substring$1(0, num2.value);
		localName.value = s.Substring$0((num2.value + 1));
		return;
	}
	prefix.value = "";
	localName.value = s;
};
$asm07.System.Xml.ValidateNames.ThrowInvalidName = function (s, offsetStartChar, offsetBadChar) {
	if (offsetStartChar >= s.length) {
		throw JSIL.New(System.Xml.XmlException, "_ctor$7", ["Xml_EmptyName", System.String.Empty]);
	}
	if (!(!$asm07.System.Xml.ValidateNames.xmlCharType.IsNCNameSingleChar(s[offsetBadChar]) || $asm07.System.Xml.XmlCharType.Instance.IsStartNCNameSingleChar(s[offsetBadChar]))) {
		throw JSIL.New(System.Xml.XmlException, "_ctor$5", ["Xml_BadStartNameChar", System.Xml.XmlException.BuildCharExceptionArgs$0(s, offsetBadChar)]);
	}
	throw JSIL.New(System.Xml.XmlException, "_ctor$5", ["Xml_BadNameChar", System.Xml.XmlException.BuildCharExceptionArgs$0(s, offsetBadChar)]);
};
JSIL.OverloadedMethod($asm07.System.Xml.ValidateNames, "ParseNCName", [
		["ParseNCName$0", [System.String, System.Int32]], 
		["ParseNCName$1", [System.String]]
	]);
$asm07.System.Xml.ValidateNames._cctor = function () {
	$asm07.System.Xml.ValidateNames.xmlCharType = new $asm07.System.Xml.XmlCharType();
	$asm07.System.Xml.ValidateNames.xmlCharType = $asm07.System.Xml.XmlCharType.Instance.MemberwiseClone();
};

$asm07.System.Xml.XmlCharType.get_StaticLock = function () {
	if ($asm07.System.Xml.XmlCharType.s_Lock === null) {
		var value = new System.Object();
		System.Threading.Interlocked.CompareExchange$b1(System.Object)(/* ref */ new JSIL.MemberReference($asm07.System.Xml.XmlCharType, "s_Lock"), value, null);
	}
	return $asm07.System.Xml.XmlCharType.s_Lock;
};
$asm07.System.Xml.XmlCharType.InitInstance = function () {
	var staticLock = null;
	System.Threading.Monitor.Enter((staticLock = $asm07.System.Xml.XmlCharType.StaticLock));
	try {
		if ($asm07.System.Xml.XmlCharType.s_CharProperties === null) {
			var array = JSIL.Array.New(System.Byte, 65536);
			$asm07.System.Xml.XmlCharType.s_CharProperties = array;
			$asm07.System.Xml.XmlCharType.SetProperties("\t\n\r\r  ", 1);
			$asm07.System.Xml.XmlCharType.SetProperties("AZaz\xc0\xd6\xd8\xf6\xf8\u0131\u0134\u013e\u0141\u0148\u014a\u017e\u0180\u01c3\u01cd\u01f0\u01f4\u01f5\u01fa\u0217\u0250\u02a8\u02bb\u02c1\u0386\u0386\u0388\u038a\u038c\u038c\u038e\u03a1\u03a3\u03ce\u03d0\u03d6\u03da\u03da\u03dc\u03dc\u03de\u03de\u03e0\u03e0\u03e2\u03f3\u0401\u040c\u040e\u044f\u0451\u045c\u045e\u0481\u0490\u04c4\u04c7\u04c8\u04cb\u04cc\u04d0\u04eb\u04ee\u04f5\u04f8\u04f9\u0531\u0556\u0559\u0559\u0561\u0586\u05d0\u05ea\u05f0\u05f2\u0621\u063a\u0641\u064a\u0671\u06b7\u06ba\u06be\u06c0\u06ce\u06d0\u06d3\u06d5\u06d5\u06e5\u06e6\u0905\u0939\u093d\u093d\u0958\u0961\u0985\u098c\u098f\u0990\u0993\u09a8\u09aa\u09b0\u09b2\u09b2\u09b6\u09b9\u09dc\u09dd\u09df\u09e1\u09f0\u09f1\u0a05\u0a0a\u0a0f\u0a10\u0a13\u0a28\u0a2a\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59\u0a5c\u0a5e\u0a5e\u0a72\u0a74\u0a85\u0a8b\u0a8d\u0a8d\u0a8f\u0a91\u0a93\u0aa8\u0aaa\u0ab0\u0ab2\u0ab3\u0ab5\u0ab9\u0abd\u0abd\u0ae0\u0ae0\u0b05\u0b0c\u0b0f\u0b10\u0b13\u0b28\u0b2a\u0b30\u0b32\u0b33\u0b36\u0b39\u0b3d\u0b3d\u0b5c\u0b5d\u0b5f\u0b61\u0b85\u0b8a\u0b8e\u0b90\u0b92\u0b95\u0b99\u0b9a\u0b9c\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8\u0baa\u0bae\u0bb5\u0bb7\u0bb9\u0c05\u0c0c\u0c0e\u0c10\u0c12\u0c28\u0c2a\u0c33\u0c35\u0c39\u0c60\u0c61\u0c85\u0c8c\u0c8e\u0c90\u0c92\u0ca8\u0caa\u0cb3\u0cb5\u0cb9\u0cde\u0cde\u0ce0\u0ce1\u0d05\u0d0c\u0d0e\u0d10\u0d12\u0d28\u0d2a\u0d39\u0d60\u0d61\u0e01\u0e2e\u0e30\u0e30\u0e32\u0e33\u0e40\u0e45\u0e81\u0e82\u0e84\u0e84\u0e87\u0e88\u0e8a\u0e8a\u0e8d\u0e8d\u0e94\u0e97\u0e99\u0e9f\u0ea1\u0ea3\u0ea5\u0ea5\u0ea7\u0ea7\u0eaa\u0eab\u0ead\u0eae\u0eb0\u0eb0\u0eb2\u0eb3\u0ebd\u0ebd\u0ec0\u0ec4\u0f40\u0f47\u0f49\u0f69\u10a0\u10c5\u10d0\u10f6\u1100\u1100\u1102\u1103\u1105\u1107\u1109\u1109\u110b\u110c\u110e\u1112\u113c\u113c\u113e\u113e\u1140\u1140\u114c\u114c\u114e\u114e\u1150\u1150\u1154\u1155\u1159\u1159\u115f\u1161\u1163\u1163\u1165\u1165\u1167\u1167\u1169\u1169\u116d\u116e\u1172\u1173\u1175\u1175\u119e\u119e\u11a8\u11a8\u11ab\u11ab\u11ae\u11af\u11b7\u11b8\u11ba\u11ba\u11bc\u11c2\u11eb\u11eb\u11f0\u11f0\u11f9\u11f9\u1e00\u1e9b\u1ea0\u1ef9\u1f00\u1f15\u1f18\u1f1d\u1f20\u1f45\u1f48\u1f4d\u1f50\u1f57\u1f59\u1f59\u1f5b\u1f5b\u1f5d\u1f5d\u1f5f\u1f7d\u1f80\u1fb4\u1fb6\u1fbc\u1fbe\u1fbe\u1fc2\u1fc4\u1fc6\u1fcc\u1fd0\u1fd3\u1fd6\u1fdb\u1fe0\u1fec\u1ff2\u1ff4\u1ff6\u1ffc\u2126\u2126\u212a\u212b\u212e\u212e\u2180\u2182\u3007\u3007\u3021\u3029\u3041\u3094\u30a1\u30fa\u3105\u312c\u4e00\u9fa5\uac00\ud7a3", 2);
			$asm07.System.Xml.XmlCharType.SetProperties("AZ__az\xc0\xd6\xd8\xf6\xf8\u0131\u0134\u013e\u0141\u0148\u014a\u017e\u0180\u01c3\u01cd\u01f0\u01f4\u01f5\u01fa\u0217\u0250\u02a8\u02bb\u02c1\u0386\u0386\u0388\u038a\u038c\u038c\u038e\u03a1\u03a3\u03ce\u03d0\u03d6\u03da\u03da\u03dc\u03dc\u03de\u03de\u03e0\u03e0\u03e2\u03f3\u0401\u040c\u040e\u044f\u0451\u045c\u045e\u0481\u0490\u04c4\u04c7\u04c8\u04cb\u04cc\u04d0\u04eb\u04ee\u04f5\u04f8\u04f9\u0531\u0556\u0559\u0559\u0561\u0586\u05d0\u05ea\u05f0\u05f2\u0621\u063a\u0641\u064a\u0671\u06b7\u06ba\u06be\u06c0\u06ce\u06d0\u06d3\u06d5\u06d5\u06e5\u06e6\u0905\u0939\u093d\u093d\u0958\u0961\u0985\u098c\u098f\u0990\u0993\u09a8\u09aa\u09b0\u09b2\u09b2\u09b6\u09b9\u09dc\u09dd\u09df\u09e1\u09f0\u09f1\u0a05\u0a0a\u0a0f\u0a10\u0a13\u0a28\u0a2a\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59\u0a5c\u0a5e\u0a5e\u0a72\u0a74\u0a85\u0a8b\u0a8d\u0a8d\u0a8f\u0a91\u0a93\u0aa8\u0aaa\u0ab0\u0ab2\u0ab3\u0ab5\u0ab9\u0abd\u0abd\u0ae0\u0ae0\u0b05\u0b0c\u0b0f\u0b10\u0b13\u0b28\u0b2a\u0b30\u0b32\u0b33\u0b36\u0b39\u0b3d\u0b3d\u0b5c\u0b5d\u0b5f\u0b61\u0b85\u0b8a\u0b8e\u0b90\u0b92\u0b95\u0b99\u0b9a\u0b9c\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8\u0baa\u0bae\u0bb5\u0bb7\u0bb9\u0c05\u0c0c\u0c0e\u0c10\u0c12\u0c28\u0c2a\u0c33\u0c35\u0c39\u0c60\u0c61\u0c85\u0c8c\u0c8e\u0c90\u0c92\u0ca8\u0caa\u0cb3\u0cb5\u0cb9\u0cde\u0cde\u0ce0\u0ce1\u0d05\u0d0c\u0d0e\u0d10\u0d12\u0d28\u0d2a\u0d39\u0d60\u0d61\u0e01\u0e2e\u0e30\u0e30\u0e32\u0e33\u0e40\u0e45\u0e81\u0e82\u0e84\u0e84\u0e87\u0e88\u0e8a\u0e8a\u0e8d\u0e8d\u0e94\u0e97\u0e99\u0e9f\u0ea1\u0ea3\u0ea5\u0ea5\u0ea7\u0ea7\u0eaa\u0eab\u0ead\u0eae\u0eb0\u0eb0\u0eb2\u0eb3\u0ebd\u0ebd\u0ec0\u0ec4\u0f40\u0f47\u0f49\u0f69\u10a0\u10c5\u10d0\u10f6\u1100\u1100\u1102\u1103\u1105\u1107\u1109\u1109\u110b\u110c\u110e\u1112\u113c\u113c\u113e\u113e\u1140\u1140\u114c\u114c\u114e\u114e\u1150\u1150\u1154\u1155\u1159\u1159\u115f\u1161\u1163\u1163\u1165\u1165\u1167\u1167\u1169\u1169\u116d\u116e\u1172\u1173\u1175\u1175\u119e\u119e\u11a8\u11a8\u11ab\u11ab\u11ae\u11af\u11b7\u11b8\u11ba\u11ba\u11bc\u11c2\u11eb\u11eb\u11f0\u11f0\u11f9\u11f9\u1e00\u1e9b\u1ea0\u1ef9\u1f00\u1f15\u1f18\u1f1d\u1f20\u1f45\u1f48\u1f4d\u1f50\u1f57\u1f59\u1f59\u1f5b\u1f5b\u1f5d\u1f5d\u1f5f\u1f7d\u1f80\u1fb4\u1fb6\u1fbc\u1fbe\u1fbe\u1fc2\u1fc4\u1fc6\u1fcc\u1fd0\u1fd3\u1fd6\u1fdb\u1fe0\u1fec\u1ff2\u1ff4\u1ff6\u1ffc\u2126\u2126\u212a\u212b\u212e\u212e\u2180\u2182\u3007\u3007\u3021\u3029\u3041\u3094\u30a1\u30fa\u3105\u312c\u4e00\u9fa5\uac00\ud7a3", 4);
			$asm07.System.Xml.XmlCharType.SetProperties("-.09AZ__az\xb7\xb7\xc0\xd6\xd8\xf6\xf8\u0131\u0134\u013e\u0141\u0148\u014a\u017e\u0180\u01c3\u01cd\u01f0\u01f4\u01f5\u01fa\u0217\u0250\u02a8\u02bb\u02c1\u02d0\u02d1\u0300\u0345\u0360\u0361\u0386\u038a\u038c\u038c\u038e\u03a1\u03a3\u03ce\u03d0\u03d6\u03da\u03da\u03dc\u03dc\u03de\u03de\u03e0\u03e0\u03e2\u03f3\u0401\u040c\u040e\u044f\u0451\u045c\u045e\u0481\u0483\u0486\u0490\u04c4\u04c7\u04c8\u04cb\u04cc\u04d0\u04eb\u04ee\u04f5\u04f8\u04f9\u0531\u0556\u0559\u0559\u0561\u0586\u0591\u05a1\u05a3\u05b9\u05bb\u05bd\u05bf\u05bf\u05c1\u05c2\u05c4\u05c4\u05d0\u05ea\u05f0\u05f2\u0621\u063a\u0640\u0652\u0660\u0669\u0670\u06b7\u06ba\u06be\u06c0\u06ce\u06d0\u06d3\u06d5\u06e8\u06ea\u06ed\u06f0\u06f9\u0901\u0903\u0905\u0939\u093c\u094d\u0951\u0954\u0958\u0963\u0966\u096f\u0981\u0983\u0985\u098c\u098f\u0990\u0993\u09a8\u09aa\u09b0\u09b2\u09b2\u09b6\u09b9\u09bc\u09bc\u09be\u09c4\u09c7\u09c8\u09cb\u09cd\u09d7\u09d7\u09dc\u09dd\u09df\u09e3\u09e6\u09f1\u0a02\u0a02\u0a05\u0a0a\u0a0f\u0a10\u0a13\u0a28\u0a2a\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a3c\u0a3c\u0a3e\u0a42\u0a47\u0a48\u0a4b\u0a4d\u0a59\u0a5c\u0a5e\u0a5e\u0a66\u0a74\u0a81\u0a83\u0a85\u0a8b\u0a8d\u0a8d\u0a8f\u0a91\u0a93\u0aa8\u0aaa\u0ab0\u0ab2\u0ab3\u0ab5\u0ab9\u0abc\u0ac5\u0ac7\u0ac9\u0acb\u0acd\u0ae0\u0ae0\u0ae6\u0aef\u0b01\u0b03\u0b05\u0b0c\u0b0f\u0b10\u0b13\u0b28\u0b2a\u0b30\u0b32\u0b33\u0b36\u0b39\u0b3c\u0b43\u0b47\u0b48\u0b4b\u0b4d\u0b56\u0b57\u0b5c\u0b5d\u0b5f\u0b61\u0b66\u0b6f\u0b82\u0b83\u0b85\u0b8a\u0b8e\u0b90\u0b92\u0b95\u0b99\u0b9a\u0b9c\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8\u0baa\u0bae\u0bb5\u0bb7\u0bb9\u0bbe\u0bc2\u0bc6\u0bc8\u0bca\u0bcd\u0bd7\u0bd7\u0be7\u0bef\u0c01\u0c03\u0c05\u0c0c\u0c0e\u0c10\u0c12\u0c28\u0c2a\u0c33\u0c35\u0c39\u0c3e\u0c44\u0c46\u0c48\u0c4a\u0c4d\u0c55\u0c56\u0c60\u0c61\u0c66\u0c6f\u0c82\u0c83\u0c85\u0c8c\u0c8e\u0c90\u0c92\u0ca8\u0caa\u0cb3\u0cb5\u0cb9\u0cbe\u0cc4\u0cc6\u0cc8\u0cca\u0ccd\u0cd5\u0cd6\u0cde\u0cde\u0ce0\u0ce1\u0ce6\u0cef\u0d02\u0d03\u0d05\u0d0c\u0d0e\u0d10\u0d12\u0d28\u0d2a\u0d39\u0d3e\u0d43\u0d46\u0d48\u0d4a\u0d4d\u0d57\u0d57\u0d60\u0d61\u0d66\u0d6f\u0e01\u0e2e\u0e30\u0e3a\u0e40\u0e4e\u0e50\u0e59\u0e81\u0e82\u0e84\u0e84\u0e87\u0e88\u0e8a\u0e8a\u0e8d\u0e8d\u0e94\u0e97\u0e99\u0e9f\u0ea1\u0ea3\u0ea5\u0ea5\u0ea7\u0ea7\u0eaa\u0eab\u0ead\u0eae\u0eb0\u0eb9\u0ebb\u0ebd\u0ec0\u0ec4\u0ec6\u0ec6\u0ec8\u0ecd\u0ed0\u0ed9\u0f18\u0f19\u0f20\u0f29\u0f35\u0f35\u0f37\u0f37\u0f39\u0f39\u0f3e\u0f47\u0f49\u0f69\u0f71\u0f84\u0f86\u0f8b\u0f90\u0f95\u0f97\u0f97\u0f99\u0fad\u0fb1\u0fb7\u0fb9\u0fb9\u10a0\u10c5\u10d0\u10f6\u1100\u1100\u1102\u1103\u1105\u1107\u1109\u1109\u110b\u110c\u110e\u1112\u113c\u113c\u113e\u113e\u1140\u1140\u114c\u114c\u114e\u114e\u1150\u1150\u1154\u1155\u1159\u1159\u115f\u1161\u1163\u1163\u1165\u1165\u1167\u1167\u1169\u1169\u116d\u116e\u1172\u1173\u1175\u1175\u119e\u119e\u11a8\u11a8\u11ab\u11ab\u11ae\u11af\u11b7\u11b8\u11ba\u11ba\u11bc\u11c2\u11eb\u11eb\u11f0\u11f0\u11f9\u11f9\u1e00\u1e9b\u1ea0\u1ef9\u1f00\u1f15\u1f18\u1f1d\u1f20\u1f45\u1f48\u1f4d\u1f50\u1f57\u1f59\u1f59\u1f5b\u1f5b\u1f5d\u1f5d\u1f5f\u1f7d\u1f80\u1fb4\u1fb6\u1fbc\u1fbe\u1fbe\u1fc2\u1fc4\u1fc6\u1fcc\u1fd0\u1fd3\u1fd6\u1fdb\u1fe0\u1fec\u1ff2\u1ff4\u1ff6\u1ffc\u20d0\u20dc\u20e1\u20e1\u2126\u2126\u212a\u212b\u212e\u212e\u2180\u2182\u3005\u3005\u3007\u3007\u3021\u302f\u3031\u3035\u3041\u3094\u3099\u309a\u309d\u309e\u30a1\u30fa\u30fc\u30fe\u3105\u312c\u4e00\u9fa5\uac00\ud7a3", 8);
			$asm07.System.Xml.XmlCharType.SetProperties("\t\n\r\r \ud7ff\ue000\ufffd", 16);
			$asm07.System.Xml.XmlCharType.SetProperties("-.09AZ__az\xb7\xb7\xc0\xd6\xd8\xf6\xf8\u0131\u0134\u013e\u0141\u0148\u014a\u017e\u0180\u01c3\u01cd\u01f0\u01f4\u01f5\u01fa\u0217\u0250\u02a8\u02bb\u02c1\u02d0\u02d1\u0300\u0345\u0360\u0361\u0386\u038a\u038c\u038c\u038e\u03a1\u03a3\u03ce\u03d0\u03d6\u03da\u03da\u03dc\u03dc\u03de\u03de\u03e0\u03e0\u03e2\u03f3\u0401\u040c\u040e\u044f\u0451\u045c\u045e\u0481\u0483\u0486\u0490\u04c4\u04c7\u04c8\u04cb\u04cc\u04d0\u04eb\u04ee\u04f5\u04f8\u04f9\u0531\u0556\u0559\u0559\u0561\u0586\u0591\u05a1\u05a3\u05b9\u05bb\u05bd\u05bf\u05bf\u05c1\u05c2\u05c4\u05c4\u05d0\u05ea\u05f0\u05f2\u0621\u063a\u0640\u0652\u0660\u0669\u0670\u06b7\u06ba\u06be\u06c0\u06ce\u06d0\u06d3\u06d5\u06e8\u06ea\u06ed\u06f0\u06f9\u0901\u0903\u0905\u0939\u093c\u094d\u0951\u0954\u0958\u0963\u0966\u096f\u0981\u0983\u0985\u098c\u098f\u0990\u0993\u09a8\u09aa\u09b0\u09b2\u09b2\u09b6\u09b9\u09bc\u09bc\u09be\u09c4\u09c7\u09c8\u09cb\u09cd\u09d7\u09d7\u09dc\u09dd\u09df\u09e3\u09e6\u09f1\u0a02\u0a02\u0a05\u0a0a\u0a0f\u0a10\u0a13\u0a28\u0a2a\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a3c\u0a3c\u0a3e\u0a42\u0a47\u0a48\u0a4b\u0a4d\u0a59\u0a5c\u0a5e\u0a5e\u0a66\u0a74\u0a81\u0a83\u0a85\u0a8b\u0a8d\u0a8d\u0a8f\u0a91\u0a93\u0aa8\u0aaa\u0ab0\u0ab2\u0ab3\u0ab5\u0ab9\u0abc\u0ac5\u0ac7\u0ac9\u0acb\u0acd\u0ae0\u0ae0\u0ae6\u0aef\u0b01\u0b03\u0b05\u0b0c\u0b0f\u0b10\u0b13\u0b28\u0b2a\u0b30\u0b32\u0b33\u0b36\u0b39\u0b3c\u0b43\u0b47\u0b48\u0b4b\u0b4d\u0b56\u0b57\u0b5c\u0b5d\u0b5f\u0b61\u0b66\u0b6f\u0b82\u0b83\u0b85\u0b8a\u0b8e\u0b90\u0b92\u0b95\u0b99\u0b9a\u0b9c\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8\u0baa\u0bae\u0bb5\u0bb7\u0bb9\u0bbe\u0bc2\u0bc6\u0bc8\u0bca\u0bcd\u0bd7\u0bd7\u0be7\u0bef\u0c01\u0c03\u0c05\u0c0c\u0c0e\u0c10\u0c12\u0c28\u0c2a\u0c33\u0c35\u0c39\u0c3e\u0c44\u0c46\u0c48\u0c4a\u0c4d\u0c55\u0c56\u0c60\u0c61\u0c66\u0c6f\u0c82\u0c83\u0c85\u0c8c\u0c8e\u0c90\u0c92\u0ca8\u0caa\u0cb3\u0cb5\u0cb9\u0cbe\u0cc4\u0cc6\u0cc8\u0cca\u0ccd\u0cd5\u0cd6\u0cde\u0cde\u0ce0\u0ce1\u0ce6\u0cef\u0d02\u0d03\u0d05\u0d0c\u0d0e\u0d10\u0d12\u0d28\u0d2a\u0d39\u0d3e\u0d43\u0d46\u0d48\u0d4a\u0d4d\u0d57\u0d57\u0d60\u0d61\u0d66\u0d6f\u0e01\u0e2e\u0e30\u0e3a\u0e40\u0e4e\u0e50\u0e59\u0e81\u0e82\u0e84\u0e84\u0e87\u0e88\u0e8a\u0e8a\u0e8d\u0e8d\u0e94\u0e97\u0e99\u0e9f\u0ea1\u0ea3\u0ea5\u0ea5\u0ea7\u0ea7\u0eaa\u0eab\u0ead\u0eae\u0eb0\u0eb9\u0ebb\u0ebd\u0ec0\u0ec4\u0ec6\u0ec6\u0ec8\u0ecd\u0ed0\u0ed9\u0f18\u0f19\u0f20\u0f29\u0f35\u0f35\u0f37\u0f37\u0f39\u0f39\u0f3e\u0f47\u0f49\u0f69\u0f71\u0f84\u0f86\u0f8b\u0f90\u0f95\u0f97\u0f97\u0f99\u0fad\u0fb1\u0fb7\u0fb9\u0fb9\u10a0\u10c5\u10d0\u10f6\u1100\u1100\u1102\u1103\u1105\u1107\u1109\u1109\u110b\u110c\u110e\u1112\u113c\u113c\u113e\u113e\u1140\u1140\u114c\u114c\u114e\u114e\u1150\u1150\u1154\u1155\u1159\u1159\u115f\u1161\u1163\u1163\u1165\u1165\u1167\u1167\u1169\u1169\u116d\u116e\u1172\u1173\u1175\u1175\u119e\u119e\u11a8\u11a8\u11ab\u11ab\u11ae\u11af\u11b7\u11b8\u11ba\u11ba\u11bc\u11c2\u11eb\u11eb\u11f0\u11f0\u11f9\u11f9\u1e00\u1e9b\u1ea0\u1ef9\u1f00\u1f15\u1f18\u1f1d\u1f20\u1f45\u1f48\u1f4d\u1f50\u1f57\u1f59\u1f59\u1f5b\u1f5b\u1f5d\u1f5d\u1f5f\u1f7d\u1f80\u1fb4\u1fb6\u1fbc\u1fbe\u1fbe\u1fc2\u1fc4\u1fc6\u1fcc\u1fd0\u1fd3\u1fd6\u1fdb\u1fe0\u1fec\u1ff2\u1ff4\u1ff6\u1ffc\u20d0\u20dc\u20e1\u20e1\u2126\u2126\u212a\u212b\u212e\u212e\u2180\u2182\u3005\u3005\u3007\u3007\u3021\u302f\u3031\u3035\u3041\u3094\u3099\u309a\u309d\u309e\u30a1\u30fa\u30fc\u30fe\u3105\u312c\u4e00\u9fa5\uac00\ud7a3", 32);
			$asm07.System.Xml.XmlCharType.SetProperties(" %';=\\^\ud7ff\ue000\ufffd", 64);
			$asm07.System.Xml.XmlCharType.SetProperties(" !#%(;==?\ud7ff\ue000\ufffd", 128);
		}
	} finally {
		System.Threading.Monitor.Exit(staticLock);
	}
};
$asm07.System.Xml.XmlCharType.SetProperties = function (ranges, value) {
__loop0__: 
	for (var i = 0; i < ranges.length; i += 2) {
		var j = ranges[i].charCodeAt(0);
		var num = (ranges[(i + 1)]).charCodeAt(0);
	__loop1__: 
		while (j <= num) {
			var expr_23_cp_0 = $asm07.System.Xml.XmlCharType.s_CharProperties;
			var expr_23_cp_1 = j;
			expr_23_cp_0[expr_23_cp_1] = (expr_23_cp_0[expr_23_cp_1] | value);
			++j;
		}
	}
};
$asm07.System.Xml.XmlCharType.prototype._ctor = function (charProperties) {
	this.charProperties = charProperties;
};
$asm07.System.Xml.XmlCharType.get_Instance = function () {
	if ($asm07.System.Xml.XmlCharType.s_CharProperties === null) {
		$asm07.System.Xml.XmlCharType.InitInstance();
	}
	return new $asm07.System.Xml.XmlCharType($asm07.System.Xml.XmlCharType.s_CharProperties);
};
$asm07.System.Xml.XmlCharType.prototype.IsWhiteSpace = function (ch) {
	return ((this.charProperties[ch.charCodeAt(0)] & 1) !== 0);
};
$asm07.System.Xml.XmlCharType.prototype.IsNCNameSingleChar = function (ch) {
	return ((this.charProperties[ch.charCodeAt(0)] & 8) !== 0);
};
$asm07.System.Xml.XmlCharType.prototype.IsStartNCNameSingleChar = function (ch) {
	return ((this.charProperties[ch.charCodeAt(0)] & 4) !== 0);
};
$asm07.System.Xml.XmlCharType.prototype.IsNameSingleChar = function (ch) {
	return (this.IsNCNameSingleChar(ch) || (ch === ":"));
};
$asm07.System.Xml.XmlCharType.prototype.IsStartNameSingleChar = function (ch) {
	return (this.IsStartNCNameSingleChar(ch) || (ch === ":"));
};
$asm07.System.Xml.XmlCharType.prototype.IsCharData = function (ch) {
	return ((this.charProperties[ch.charCodeAt(0)] & 16) !== 0);
};
$asm07.System.Xml.XmlCharType.prototype.IsPubidChar = function (ch) {
	return ((ch < "\x80") && ((("\u2400\0\uffbb\uafff\uffff\u87ff\ufffe\u07ff"[(ch.charCodeAt(0) >> 4)]).charCodeAt(0) & (1 << ((ch & "\x0f") & "\x1f"))) !== 0));
};
$asm07.System.Xml.XmlCharType.prototype.IsTextChar = function (ch) {
	return ((this.charProperties[ch.charCodeAt(0)] & 64) !== 0);
};
$asm07.System.Xml.XmlCharType.prototype.IsAttributeValueChar = function (ch) {
	return ((this.charProperties[ch.charCodeAt(0)] & 128) !== 0);
};
$asm07.System.Xml.XmlCharType.prototype.IsLetter = function (ch) {
	return ((this.charProperties[ch.charCodeAt(0)] & 2) !== 0);
};
$asm07.System.Xml.XmlCharType.prototype.IsNCNameCharXml4e = function (ch) {
	return ((this.charProperties[ch.charCodeAt(0)] & 32) !== 0);
};
$asm07.System.Xml.XmlCharType.prototype.IsStartNCNameCharXml4e = function (ch) {
	return (this.IsLetter(ch) || (ch === "_"));
};
$asm07.System.Xml.XmlCharType.prototype.IsNameCharXml4e = function (ch) {
	return (this.IsNCNameCharXml4e(ch) || (ch === ":"));
};
$asm07.System.Xml.XmlCharType.prototype.IsStartNameCharXml4e = function (ch) {
	return (this.IsStartNCNameCharXml4e(ch) || (ch === ":"));
};
$asm07.System.Xml.XmlCharType.IsDigit = function (ch) {
	return $asm07.System.Xml.XmlCharType.InRange(ch.charCodeAt(0), 48, 57);
};
$asm07.System.Xml.XmlCharType.IsHighSurrogate = function (ch) {
	return $asm07.System.Xml.XmlCharType.InRange(ch, 55296, 56319);
};
$asm07.System.Xml.XmlCharType.IsLowSurrogate = function (ch) {
	return $asm07.System.Xml.XmlCharType.InRange(ch, 56320, 57343);
};
$asm07.System.Xml.XmlCharType.IsSurrogate = function (ch) {
	return $asm07.System.Xml.XmlCharType.InRange(ch, 55296, 57343);
};
$asm07.System.Xml.XmlCharType.CombineSurrogateChar = function (lowChar, highChar) {
	return ((lowChar - 56320) | (((highChar - 55296) << 10) + 65536));
};
$asm07.System.Xml.XmlCharType.SplitSurrogateChar = function (combinedChar, /* ref */ lowChar, /* ref */ highChar) {
	var num = (combinedChar - 65536);
	lowChar.value = (56320 + (num % 1024));
	highChar.value = (55296 + Math.floor(num / 1024));
};
$asm07.System.Xml.XmlCharType.prototype.IsOnlyWhitespace = function (str) {
	return (this.IsOnlyWhitespaceWithPos(str) === -1);
};
$asm07.System.Xml.XmlCharType.prototype.IsOnlyWhitespaceWithPos = function (str) {
	if (str !== null) {
	__loop0__: 
		for (var i = 0; i < str.length; ++i) {
			if (!(this.charProperties[str[i].charCodeAt(0)] & 1)) {
				return i;
			}
		}
	}
	return -1;
};
$asm07.System.Xml.XmlCharType.prototype.IsOnlyCharData = function (str) {
	if (str !== null) {
	__loop0__: 
		for (var i = 0; i < str.length; ++i) {
			if (!(this.charProperties[str[i].charCodeAt(0)] & 16)) {
				if (!(((i + 1) < str.length) && 
						$asm07.System.Xml.XmlCharType.IsHighSurrogate(str[i].charCodeAt(0)) && $asm07.System.Xml.XmlCharType.IsLowSurrogate((str[(i + 1)]).charCodeAt(0)))) {
					return i;
				}
				++i;
			}
		}
	}
	return -1;
};
$asm07.System.Xml.XmlCharType.IsOnlyDigits$0 = function (str, startPos, len) {
__loop0__: 
	for (var i = startPos; i < (startPos + len); ++i) {
		if (!$asm07.System.Xml.XmlCharType.IsDigit(str[i])) {
			return false;
		}
	}
	return true;
};
$asm07.System.Xml.XmlCharType.IsOnlyDigits$1 = function (chars, startPos, len) {
__loop0__: 
	for (var i = startPos; i < (startPos + len); ++i) {
		if (!$asm07.System.Xml.XmlCharType.IsDigit(chars[i])) {
			return false;
		}
	}
	return true;
};
$asm07.System.Xml.XmlCharType.prototype.IsPublicId = function (str) {
	if (str !== null) {
	__loop0__: 
		for (var i = 0; i < str.length; ++i) {
			if (!this.IsPubidChar(str[i])) {
				return i;
			}
		}
	}
	return -1;
};
$asm07.System.Xml.XmlCharType.InRange = function (value, start, end) {
	return ((value - start) <= (end - start));
};
JSIL.OverloadedMethod($asm07.System.Xml.XmlCharType, "IsOnlyDigits", [
		["IsOnlyDigits$0", [System.String, System.Int32, System.Int32]], 
		["IsOnlyDigits$1", [System.Array.Of(System.Char), System.Int32, System.Int32]]
	]);
JSIL.MakeProperty($asm07.System.Xml.XmlCharType, "StaticLock", 
	$asm07.System.Xml.XmlCharType.get_StaticLock, null);
JSIL.MakeProperty($asm07.System.Xml.XmlCharType, "Instance", 
	$asm07.System.Xml.XmlCharType.get_Instance, null);
Object.defineProperty($asm07.System.Xml.XmlCharType, "SurHighStart", {
		"value": 55296}
);
Object.defineProperty($asm07.System.Xml.XmlCharType, "SurHighEnd", {
		"value": 56319}
);
Object.defineProperty($asm07.System.Xml.XmlCharType, "SurLowStart", {
		"value": 56320}
);
Object.defineProperty($asm07.System.Xml.XmlCharType, "SurLowEnd", {
		"value": 57343}
);
Object.defineProperty($asm07.System.Xml.XmlCharType, "SurMask", {
		"value": 64512}
);
Object.defineProperty($asm07.System.Xml.XmlCharType, "fWhitespace", {
		"value": 1}
);
Object.defineProperty($asm07.System.Xml.XmlCharType, "fLetter", {
		"value": 2}
);
Object.defineProperty($asm07.System.Xml.XmlCharType, "fNCStartNameSC", {
		"value": 4}
);
Object.defineProperty($asm07.System.Xml.XmlCharType, "fNCNameSC", {
		"value": 8}
);
Object.defineProperty($asm07.System.Xml.XmlCharType, "fCharData", {
		"value": 16}
);
Object.defineProperty($asm07.System.Xml.XmlCharType, "fNCNameXml4e", {
		"value": 32}
);
Object.defineProperty($asm07.System.Xml.XmlCharType, "fText", {
		"value": 64}
);
Object.defineProperty($asm07.System.Xml.XmlCharType, "fAttrValue", {
		"value": 128}
);
Object.defineProperty($asm07.System.Xml.XmlCharType, "s_PublicIdBitmap", {
		"value": "\u2400\0\uffbb\uafff\uffff\u87ff\ufffe\u07ff"}
);
Object.defineProperty($asm07.System.Xml.XmlCharType, "CharPropertiesSize", {
		"value": 65536}
);
Object.defineProperty($asm07.System.Xml.XmlCharType, "s_Whitespace", {
		"value": "\t\n\r\r  "}
);
Object.defineProperty($asm07.System.Xml.XmlCharType, "s_NCStartName", {
		"value": "AZ__az\xc0\xd6\xd8\xf6\xf8\u0131\u0134\u013e\u0141\u0148\u014a\u017e\u0180\u01c3\u01cd\u01f0\u01f4\u01f5\u01fa\u0217\u0250\u02a8\u02bb\u02c1\u0386\u0386\u0388\u038a\u038c\u038c\u038e\u03a1\u03a3\u03ce\u03d0\u03d6\u03da\u03da\u03dc\u03dc\u03de\u03de\u03e0\u03e0\u03e2\u03f3\u0401\u040c\u040e\u044f\u0451\u045c\u045e\u0481\u0490\u04c4\u04c7\u04c8\u04cb\u04cc\u04d0\u04eb\u04ee\u04f5\u04f8\u04f9\u0531\u0556\u0559\u0559\u0561\u0586\u05d0\u05ea\u05f0\u05f2\u0621\u063a\u0641\u064a\u0671\u06b7\u06ba\u06be\u06c0\u06ce\u06d0\u06d3\u06d5\u06d5\u06e5\u06e6\u0905\u0939\u093d\u093d\u0958\u0961\u0985\u098c\u098f\u0990\u0993\u09a8\u09aa\u09b0\u09b2\u09b2\u09b6\u09b9\u09dc\u09dd\u09df\u09e1\u09f0\u09f1\u0a05\u0a0a\u0a0f\u0a10\u0a13\u0a28\u0a2a\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59\u0a5c\u0a5e\u0a5e\u0a72\u0a74\u0a85\u0a8b\u0a8d\u0a8d\u0a8f\u0a91\u0a93\u0aa8\u0aaa\u0ab0\u0ab2\u0ab3\u0ab5\u0ab9\u0abd\u0abd\u0ae0\u0ae0\u0b05\u0b0c\u0b0f\u0b10\u0b13\u0b28\u0b2a\u0b30\u0b32\u0b33\u0b36\u0b39\u0b3d\u0b3d\u0b5c\u0b5d\u0b5f\u0b61\u0b85\u0b8a\u0b8e\u0b90\u0b92\u0b95\u0b99\u0b9a\u0b9c\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8\u0baa\u0bae\u0bb5\u0bb7\u0bb9\u0c05\u0c0c\u0c0e\u0c10\u0c12\u0c28\u0c2a\u0c33\u0c35\u0c39\u0c60\u0c61\u0c85\u0c8c\u0c8e\u0c90\u0c92\u0ca8\u0caa\u0cb3\u0cb5\u0cb9\u0cde\u0cde\u0ce0\u0ce1\u0d05\u0d0c\u0d0e\u0d10\u0d12\u0d28\u0d2a\u0d39\u0d60\u0d61\u0e01\u0e2e\u0e30\u0e30\u0e32\u0e33\u0e40\u0e45\u0e81\u0e82\u0e84\u0e84\u0e87\u0e88\u0e8a\u0e8a\u0e8d\u0e8d\u0e94\u0e97\u0e99\u0e9f\u0ea1\u0ea3\u0ea5\u0ea5\u0ea7\u0ea7\u0eaa\u0eab\u0ead\u0eae\u0eb0\u0eb0\u0eb2\u0eb3\u0ebd\u0ebd\u0ec0\u0ec4\u0f40\u0f47\u0f49\u0f69\u10a0\u10c5\u10d0\u10f6\u1100\u1100\u1102\u1103\u1105\u1107\u1109\u1109\u110b\u110c\u110e\u1112\u113c\u113c\u113e\u113e\u1140\u1140\u114c\u114c\u114e\u114e\u1150\u1150\u1154\u1155\u1159\u1159\u115f\u1161\u1163\u1163\u1165\u1165\u1167\u1167\u1169\u1169\u116d\u116e\u1172\u1173\u1175\u1175\u119e\u119e\u11a8\u11a8\u11ab\u11ab\u11ae\u11af\u11b7\u11b8\u11ba\u11ba\u11bc\u11c2\u11eb\u11eb\u11f0\u11f0\u11f9\u11f9\u1e00\u1e9b\u1ea0\u1ef9\u1f00\u1f15\u1f18\u1f1d\u1f20\u1f45\u1f48\u1f4d\u1f50\u1f57\u1f59\u1f59\u1f5b\u1f5b\u1f5d\u1f5d\u1f5f\u1f7d\u1f80\u1fb4\u1fb6\u1fbc\u1fbe\u1fbe\u1fc2\u1fc4\u1fc6\u1fcc\u1fd0\u1fd3\u1fd6\u1fdb\u1fe0\u1fec\u1ff2\u1ff4\u1ff6\u1ffc\u2126\u2126\u212a\u212b\u212e\u212e\u2180\u2182\u3007\u3007\u3021\u3029\u3041\u3094\u30a1\u30fa\u3105\u312c\u4e00\u9fa5\uac00\ud7a3"}
);
Object.defineProperty($asm07.System.Xml.XmlCharType, "s_NCName", {
		"value": "-.09AZ__az\xb7\xb7\xc0\xd6\xd8\xf6\xf8\u0131\u0134\u013e\u0141\u0148\u014a\u017e\u0180\u01c3\u01cd\u01f0\u01f4\u01f5\u01fa\u0217\u0250\u02a8\u02bb\u02c1\u02d0\u02d1\u0300\u0345\u0360\u0361\u0386\u038a\u038c\u038c\u038e\u03a1\u03a3\u03ce\u03d0\u03d6\u03da\u03da\u03dc\u03dc\u03de\u03de\u03e0\u03e0\u03e2\u03f3\u0401\u040c\u040e\u044f\u0451\u045c\u045e\u0481\u0483\u0486\u0490\u04c4\u04c7\u04c8\u04cb\u04cc\u04d0\u04eb\u04ee\u04f5\u04f8\u04f9\u0531\u0556\u0559\u0559\u0561\u0586\u0591\u05a1\u05a3\u05b9\u05bb\u05bd\u05bf\u05bf\u05c1\u05c2\u05c4\u05c4\u05d0\u05ea\u05f0\u05f2\u0621\u063a\u0640\u0652\u0660\u0669\u0670\u06b7\u06ba\u06be\u06c0\u06ce\u06d0\u06d3\u06d5\u06e8\u06ea\u06ed\u06f0\u06f9\u0901\u0903\u0905\u0939\u093c\u094d\u0951\u0954\u0958\u0963\u0966\u096f\u0981\u0983\u0985\u098c\u098f\u0990\u0993\u09a8\u09aa\u09b0\u09b2\u09b2\u09b6\u09b9\u09bc\u09bc\u09be\u09c4\u09c7\u09c8\u09cb\u09cd\u09d7\u09d7\u09dc\u09dd\u09df\u09e3\u09e6\u09f1\u0a02\u0a02\u0a05\u0a0a\u0a0f\u0a10\u0a13\u0a28\u0a2a\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a3c\u0a3c\u0a3e\u0a42\u0a47\u0a48\u0a4b\u0a4d\u0a59\u0a5c\u0a5e\u0a5e\u0a66\u0a74\u0a81\u0a83\u0a85\u0a8b\u0a8d\u0a8d\u0a8f\u0a91\u0a93\u0aa8\u0aaa\u0ab0\u0ab2\u0ab3\u0ab5\u0ab9\u0abc\u0ac5\u0ac7\u0ac9\u0acb\u0acd\u0ae0\u0ae0\u0ae6\u0aef\u0b01\u0b03\u0b05\u0b0c\u0b0f\u0b10\u0b13\u0b28\u0b2a\u0b30\u0b32\u0b33\u0b36\u0b39\u0b3c\u0b43\u0b47\u0b48\u0b4b\u0b4d\u0b56\u0b57\u0b5c\u0b5d\u0b5f\u0b61\u0b66\u0b6f\u0b82\u0b83\u0b85\u0b8a\u0b8e\u0b90\u0b92\u0b95\u0b99\u0b9a\u0b9c\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8\u0baa\u0bae\u0bb5\u0bb7\u0bb9\u0bbe\u0bc2\u0bc6\u0bc8\u0bca\u0bcd\u0bd7\u0bd7\u0be7\u0bef\u0c01\u0c03\u0c05\u0c0c\u0c0e\u0c10\u0c12\u0c28\u0c2a\u0c33\u0c35\u0c39\u0c3e\u0c44\u0c46\u0c48\u0c4a\u0c4d\u0c55\u0c56\u0c60\u0c61\u0c66\u0c6f\u0c82\u0c83\u0c85\u0c8c\u0c8e\u0c90\u0c92\u0ca8\u0caa\u0cb3\u0cb5\u0cb9\u0cbe\u0cc4\u0cc6\u0cc8\u0cca\u0ccd\u0cd5\u0cd6\u0cde\u0cde\u0ce0\u0ce1\u0ce6\u0cef\u0d02\u0d03\u0d05\u0d0c\u0d0e\u0d10\u0d12\u0d28\u0d2a\u0d39\u0d3e\u0d43\u0d46\u0d48\u0d4a\u0d4d\u0d57\u0d57\u0d60\u0d61\u0d66\u0d6f\u0e01\u0e2e\u0e30\u0e3a\u0e40\u0e4e\u0e50\u0e59\u0e81\u0e82\u0e84\u0e84\u0e87\u0e88\u0e8a\u0e8a\u0e8d\u0e8d\u0e94\u0e97\u0e99\u0e9f\u0ea1\u0ea3\u0ea5\u0ea5\u0ea7\u0ea7\u0eaa\u0eab\u0ead\u0eae\u0eb0\u0eb9\u0ebb\u0ebd\u0ec0\u0ec4\u0ec6\u0ec6\u0ec8\u0ecd\u0ed0\u0ed9\u0f18\u0f19\u0f20\u0f29\u0f35\u0f35\u0f37\u0f37\u0f39\u0f39\u0f3e\u0f47\u0f49\u0f69\u0f71\u0f84\u0f86\u0f8b\u0f90\u0f95\u0f97\u0f97\u0f99\u0fad\u0fb1\u0fb7\u0fb9\u0fb9\u10a0\u10c5\u10d0\u10f6\u1100\u1100\u1102\u1103\u1105\u1107\u1109\u1109\u110b\u110c\u110e\u1112\u113c\u113c\u113e\u113e\u1140\u1140\u114c\u114c\u114e\u114e\u1150\u1150\u1154\u1155\u1159\u1159\u115f\u1161\u1163\u1163\u1165\u1165\u1167\u1167\u1169\u1169\u116d\u116e\u1172\u1173\u1175\u1175\u119e\u119e\u11a8\u11a8\u11ab\u11ab\u11ae\u11af\u11b7\u11b8\u11ba\u11ba\u11bc\u11c2\u11eb\u11eb\u11f0\u11f0\u11f9\u11f9\u1e00\u1e9b\u1ea0\u1ef9\u1f00\u1f15\u1f18\u1f1d\u1f20\u1f45\u1f48\u1f4d\u1f50\u1f57\u1f59\u1f59\u1f5b\u1f5b\u1f5d\u1f5d\u1f5f\u1f7d\u1f80\u1fb4\u1fb6\u1fbc\u1fbe\u1fbe\u1fc2\u1fc4\u1fc6\u1fcc\u1fd0\u1fd3\u1fd6\u1fdb\u1fe0\u1fec\u1ff2\u1ff4\u1ff6\u1ffc\u20d0\u20dc\u20e1\u20e1\u2126\u2126\u212a\u212b\u212e\u212e\u2180\u2182\u3005\u3005\u3007\u3007\u3021\u302f\u3031\u3035\u3041\u3094\u3099\u309a\u309d\u309e\u30a1\u30fa\u30fc\u30fe\u3105\u312c\u4e00\u9fa5\uac00\ud7a3"}
);
Object.defineProperty($asm07.System.Xml.XmlCharType, "s_CharData", {
		"value": "\t\n\r\r \ud7ff\ue000\ufffd"}
);
Object.defineProperty($asm07.System.Xml.XmlCharType, "s_PublicID", {
		"value": "\n\n\r\r !#%';==?Z__az"}
);
Object.defineProperty($asm07.System.Xml.XmlCharType, "s_Text", {
		"value": " %';=\\^\ud7ff\ue000\ufffd"}
);
Object.defineProperty($asm07.System.Xml.XmlCharType, "s_AttrValue", {
		"value": " !#%(;==?\ud7ff\ue000\ufffd"}
);
Object.defineProperty($asm07.System.Xml.XmlCharType, "s_LetterXml4e", {
		"value": "AZaz\xc0\xd6\xd8\xf6\xf8\u0131\u0134\u013e\u0141\u0148\u014a\u017e\u0180\u01c3\u01cd\u01f0\u01f4\u01f5\u01fa\u0217\u0250\u02a8\u02bb\u02c1\u0386\u0386\u0388\u038a\u038c\u038c\u038e\u03a1\u03a3\u03ce\u03d0\u03d6\u03da\u03da\u03dc\u03dc\u03de\u03de\u03e0\u03e0\u03e2\u03f3\u0401\u040c\u040e\u044f\u0451\u045c\u045e\u0481\u0490\u04c4\u04c7\u04c8\u04cb\u04cc\u04d0\u04eb\u04ee\u04f5\u04f8\u04f9\u0531\u0556\u0559\u0559\u0561\u0586\u05d0\u05ea\u05f0\u05f2\u0621\u063a\u0641\u064a\u0671\u06b7\u06ba\u06be\u06c0\u06ce\u06d0\u06d3\u06d5\u06d5\u06e5\u06e6\u0905\u0939\u093d\u093d\u0958\u0961\u0985\u098c\u098f\u0990\u0993\u09a8\u09aa\u09b0\u09b2\u09b2\u09b6\u09b9\u09dc\u09dd\u09df\u09e1\u09f0\u09f1\u0a05\u0a0a\u0a0f\u0a10\u0a13\u0a28\u0a2a\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a59\u0a5c\u0a5e\u0a5e\u0a72\u0a74\u0a85\u0a8b\u0a8d\u0a8d\u0a8f\u0a91\u0a93\u0aa8\u0aaa\u0ab0\u0ab2\u0ab3\u0ab5\u0ab9\u0abd\u0abd\u0ae0\u0ae0\u0b05\u0b0c\u0b0f\u0b10\u0b13\u0b28\u0b2a\u0b30\u0b32\u0b33\u0b36\u0b39\u0b3d\u0b3d\u0b5c\u0b5d\u0b5f\u0b61\u0b85\u0b8a\u0b8e\u0b90\u0b92\u0b95\u0b99\u0b9a\u0b9c\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8\u0baa\u0bae\u0bb5\u0bb7\u0bb9\u0c05\u0c0c\u0c0e\u0c10\u0c12\u0c28\u0c2a\u0c33\u0c35\u0c39\u0c60\u0c61\u0c85\u0c8c\u0c8e\u0c90\u0c92\u0ca8\u0caa\u0cb3\u0cb5\u0cb9\u0cde\u0cde\u0ce0\u0ce1\u0d05\u0d0c\u0d0e\u0d10\u0d12\u0d28\u0d2a\u0d39\u0d60\u0d61\u0e01\u0e2e\u0e30\u0e30\u0e32\u0e33\u0e40\u0e45\u0e81\u0e82\u0e84\u0e84\u0e87\u0e88\u0e8a\u0e8a\u0e8d\u0e8d\u0e94\u0e97\u0e99\u0e9f\u0ea1\u0ea3\u0ea5\u0ea5\u0ea7\u0ea7\u0eaa\u0eab\u0ead\u0eae\u0eb0\u0eb0\u0eb2\u0eb3\u0ebd\u0ebd\u0ec0\u0ec4\u0f40\u0f47\u0f49\u0f69\u10a0\u10c5\u10d0\u10f6\u1100\u1100\u1102\u1103\u1105\u1107\u1109\u1109\u110b\u110c\u110e\u1112\u113c\u113c\u113e\u113e\u1140\u1140\u114c\u114c\u114e\u114e\u1150\u1150\u1154\u1155\u1159\u1159\u115f\u1161\u1163\u1163\u1165\u1165\u1167\u1167\u1169\u1169\u116d\u116e\u1172\u1173\u1175\u1175\u119e\u119e\u11a8\u11a8\u11ab\u11ab\u11ae\u11af\u11b7\u11b8\u11ba\u11ba\u11bc\u11c2\u11eb\u11eb\u11f0\u11f0\u11f9\u11f9\u1e00\u1e9b\u1ea0\u1ef9\u1f00\u1f15\u1f18\u1f1d\u1f20\u1f45\u1f48\u1f4d\u1f50\u1f57\u1f59\u1f59\u1f5b\u1f5b\u1f5d\u1f5d\u1f5f\u1f7d\u1f80\u1fb4\u1fb6\u1fbc\u1fbe\u1fbe\u1fc2\u1fc4\u1fc6\u1fcc\u1fd0\u1fd3\u1fd6\u1fdb\u1fe0\u1fec\u1ff2\u1ff4\u1ff6\u1ffc\u2126\u2126\u212a\u212b\u212e\u212e\u2180\u2182\u3007\u3007\u3021\u3029\u3041\u3094\u30a1\u30fa\u3105\u312c\u4e00\u9fa5\uac00\ud7a3"}
);
Object.defineProperty($asm07.System.Xml.XmlCharType, "s_NCNameXml4e", {
		"value": "-.09AZ__az\xb7\xb7\xc0\xd6\xd8\xf6\xf8\u0131\u0134\u013e\u0141\u0148\u014a\u017e\u0180\u01c3\u01cd\u01f0\u01f4\u01f5\u01fa\u0217\u0250\u02a8\u02bb\u02c1\u02d0\u02d1\u0300\u0345\u0360\u0361\u0386\u038a\u038c\u038c\u038e\u03a1\u03a3\u03ce\u03d0\u03d6\u03da\u03da\u03dc\u03dc\u03de\u03de\u03e0\u03e0\u03e2\u03f3\u0401\u040c\u040e\u044f\u0451\u045c\u045e\u0481\u0483\u0486\u0490\u04c4\u04c7\u04c8\u04cb\u04cc\u04d0\u04eb\u04ee\u04f5\u04f8\u04f9\u0531\u0556\u0559\u0559\u0561\u0586\u0591\u05a1\u05a3\u05b9\u05bb\u05bd\u05bf\u05bf\u05c1\u05c2\u05c4\u05c4\u05d0\u05ea\u05f0\u05f2\u0621\u063a\u0640\u0652\u0660\u0669\u0670\u06b7\u06ba\u06be\u06c0\u06ce\u06d0\u06d3\u06d5\u06e8\u06ea\u06ed\u06f0\u06f9\u0901\u0903\u0905\u0939\u093c\u094d\u0951\u0954\u0958\u0963\u0966\u096f\u0981\u0983\u0985\u098c\u098f\u0990\u0993\u09a8\u09aa\u09b0\u09b2\u09b2\u09b6\u09b9\u09bc\u09bc\u09be\u09c4\u09c7\u09c8\u09cb\u09cd\u09d7\u09d7\u09dc\u09dd\u09df\u09e3\u09e6\u09f1\u0a02\u0a02\u0a05\u0a0a\u0a0f\u0a10\u0a13\u0a28\u0a2a\u0a30\u0a32\u0a33\u0a35\u0a36\u0a38\u0a39\u0a3c\u0a3c\u0a3e\u0a42\u0a47\u0a48\u0a4b\u0a4d\u0a59\u0a5c\u0a5e\u0a5e\u0a66\u0a74\u0a81\u0a83\u0a85\u0a8b\u0a8d\u0a8d\u0a8f\u0a91\u0a93\u0aa8\u0aaa\u0ab0\u0ab2\u0ab3\u0ab5\u0ab9\u0abc\u0ac5\u0ac7\u0ac9\u0acb\u0acd\u0ae0\u0ae0\u0ae6\u0aef\u0b01\u0b03\u0b05\u0b0c\u0b0f\u0b10\u0b13\u0b28\u0b2a\u0b30\u0b32\u0b33\u0b36\u0b39\u0b3c\u0b43\u0b47\u0b48\u0b4b\u0b4d\u0b56\u0b57\u0b5c\u0b5d\u0b5f\u0b61\u0b66\u0b6f\u0b82\u0b83\u0b85\u0b8a\u0b8e\u0b90\u0b92\u0b95\u0b99\u0b9a\u0b9c\u0b9c\u0b9e\u0b9f\u0ba3\u0ba4\u0ba8\u0baa\u0bae\u0bb5\u0bb7\u0bb9\u0bbe\u0bc2\u0bc6\u0bc8\u0bca\u0bcd\u0bd7\u0bd7\u0be7\u0bef\u0c01\u0c03\u0c05\u0c0c\u0c0e\u0c10\u0c12\u0c28\u0c2a\u0c33\u0c35\u0c39\u0c3e\u0c44\u0c46\u0c48\u0c4a\u0c4d\u0c55\u0c56\u0c60\u0c61\u0c66\u0c6f\u0c82\u0c83\u0c85\u0c8c\u0c8e\u0c90\u0c92\u0ca8\u0caa\u0cb3\u0cb5\u0cb9\u0cbe\u0cc4\u0cc6\u0cc8\u0cca\u0ccd\u0cd5\u0cd6\u0cde\u0cde\u0ce0\u0ce1\u0ce6\u0cef\u0d02\u0d03\u0d05\u0d0c\u0d0e\u0d10\u0d12\u0d28\u0d2a\u0d39\u0d3e\u0d43\u0d46\u0d48\u0d4a\u0d4d\u0d57\u0d57\u0d60\u0d61\u0d66\u0d6f\u0e01\u0e2e\u0e30\u0e3a\u0e40\u0e4e\u0e50\u0e59\u0e81\u0e82\u0e84\u0e84\u0e87\u0e88\u0e8a\u0e8a\u0e8d\u0e8d\u0e94\u0e97\u0e99\u0e9f\u0ea1\u0ea3\u0ea5\u0ea5\u0ea7\u0ea7\u0eaa\u0eab\u0ead\u0eae\u0eb0\u0eb9\u0ebb\u0ebd\u0ec0\u0ec4\u0ec6\u0ec6\u0ec8\u0ecd\u0ed0\u0ed9\u0f18\u0f19\u0f20\u0f29\u0f35\u0f35\u0f37\u0f37\u0f39\u0f39\u0f3e\u0f47\u0f49\u0f69\u0f71\u0f84\u0f86\u0f8b\u0f90\u0f95\u0f97\u0f97\u0f99\u0fad\u0fb1\u0fb7\u0fb9\u0fb9\u10a0\u10c5\u10d0\u10f6\u1100\u1100\u1102\u1103\u1105\u1107\u1109\u1109\u110b\u110c\u110e\u1112\u113c\u113c\u113e\u113e\u1140\u1140\u114c\u114c\u114e\u114e\u1150\u1150\u1154\u1155\u1159\u1159\u115f\u1161\u1163\u1163\u1165\u1165\u1167\u1167\u1169\u1169\u116d\u116e\u1172\u1173\u1175\u1175\u119e\u119e\u11a8\u11a8\u11ab\u11ab\u11ae\u11af\u11b7\u11b8\u11ba\u11ba\u11bc\u11c2\u11eb\u11eb\u11f0\u11f0\u11f9\u11f9\u1e00\u1e9b\u1ea0\u1ef9\u1f00\u1f15\u1f18\u1f1d\u1f20\u1f45\u1f48\u1f4d\u1f50\u1f57\u1f59\u1f59\u1f5b\u1f5b\u1f5d\u1f5d\u1f5f\u1f7d\u1f80\u1fb4\u1fb6\u1fbc\u1fbe\u1fbe\u1fc2\u1fc4\u1fc6\u1fcc\u1fd0\u1fd3\u1fd6\u1fdb\u1fe0\u1fec\u1ff2\u1ff4\u1ff6\u1ffc\u20d0\u20dc\u20e1\u20e1\u2126\u2126\u212a\u212b\u212e\u212e\u2180\u2182\u3005\u3005\u3007\u3007\u3021\u302f\u3031\u3035\u3041\u3094\u3099\u309a\u309d\u309e\u30a1\u30fa\u30fc\u30fe\u3105\u312c\u4e00\u9fa5\uac00\ud7a3"}
);
$asm07.System.Xml.XmlCharType.s_Lock = null;
$asm07.System.Xml.XmlCharType.s_CharProperties = null;
$asm07.System.Xml.XmlCharType.prototype.charProperties = null;

System.Xml.XmlConvert.EncodeName$0 = function (name) {
	return System.Xml.XmlConvert.EncodeName$1(name, true, false);
};
System.Xml.XmlConvert.EncodeNmToken = function (name) {
	return System.Xml.XmlConvert.EncodeName$1(name, false, false);
};
System.Xml.XmlConvert.EncodeLocalName = function (name) {
	return System.Xml.XmlConvert.EncodeName$1(name, true, true);
};
System.Xml.XmlConvert.DecodeName = function (name) {
	var value = new JSIL.Variable(0), value2 = new JSIL.Variable(0);
	if (!((name !== null) && (name.length !== 0))) {
		return name;
	}
	var stringBuilder = null;
	var length = name.length;
	var num = 0;
	var num2 = name.IndexOf$0("_");
	if (num2 < 0) {
		return name;
	}
	if (System.Xml.XmlConvert.c_DecodeCharPattern === null) {
		System.Xml.XmlConvert.c_DecodeCharPattern = JSIL.New(System.Text.RegularExpressions.Regex, "_ctor$1", ["_[Xx]([0-9a-fA-F]{4}|[0-9a-fA-F]{8})_"]);
	}
	var matchCollection = System.Xml.XmlConvert.c_DecodeCharPattern.Matches$1(name, num2);
	var enumerator = matchCollection.GetEnumerator();
	var num3 = -1;
	if (!((enumerator === null) || !enumerator.IEnumerator_MoveNext())) {
		var match = JSIL.Cast(enumerator.IEnumerator_Current, System.Text.RegularExpressions.Match);
		num3 = match.Index;
	}
__loop0__: 
	for (var i = 0; i < ((length - System.Xml.XmlConvert.c_EncodedCharLength) + 1); ++i) {
		if (i === num3) {
			if (enumerator.IEnumerator_MoveNext()) {
				var match2 = JSIL.Cast(enumerator.IEnumerator_Current, System.Text.RegularExpressions.Match);
				num3 = match2.Index;
			}
			if (stringBuilder === null) {
				stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$1", [(length + 20)]);
			}
			stringBuilder.Append$3(name, num, (i - num));
			if ((name[(i + 6)]) !== "_") {
				var num4 = ((((((((System.Xml.XmlConvert.FromHex(name[(i + 2)]) * 268435456) + (System.Xml.XmlConvert.FromHex(name[(i + 3)]) * 16777216)) + (System.Xml.XmlConvert.FromHex(name[(i + 4)]) * 1048576)) + (System.Xml.XmlConvert.FromHex(name[(i + 5)]) * 65536)) + (System.Xml.XmlConvert.FromHex(name[(i + 6)]) * 4096)) + (System.Xml.XmlConvert.FromHex(name[(i + 7)]) * 256)) + (System.Xml.XmlConvert.FromHex(name[(i + 8)]) * 16)) + System.Xml.XmlConvert.FromHex(name[(i + 9)]));
				if (num4 >= 65536) {
					if (num4 <= 1114111) {
						num = ((i + System.Xml.XmlConvert.c_EncodedCharLength) + 4);
						$asm07.System.Xml.XmlCharType.SplitSurrogateChar(num4, /* ref */ value, /* ref */ value2);
						stringBuilder.Append$7(value2.value);
						stringBuilder.Append$7(value.value);
					}
				} else {
					num = ((i + System.Xml.XmlConvert.c_EncodedCharLength) + 4);
					stringBuilder.Append$7(String.fromCharCode(num4));
				}
				i += ((System.Xml.XmlConvert.c_EncodedCharLength - 1) + 4);
			} else {
				num = (i + System.Xml.XmlConvert.c_EncodedCharLength);
				stringBuilder.Append$7(((((System.Xml.XmlConvert.FromHex(name[(i + 2)]) * 4096) + (System.Xml.XmlConvert.FromHex(name[(i + 3)]) * 256)) + (System.Xml.XmlConvert.FromHex(name[(i + 4)]) * 16)) + System.Xml.XmlConvert.FromHex(name[(i + 5)])));
				i += (System.Xml.XmlConvert.c_EncodedCharLength - 1);
			}
		}
	}
	if (num === 0) {
		return name;
	}
	if (num < length) {
		stringBuilder.Append$3(name, num, (length - num));
	}
	return stringBuilder.toString();
};
System.Xml.XmlConvert.EncodeName$1 = function (name, first, local) {
	if (System.String.IsNullOrEmpty(name)) {
		return name;
	}
	var stringBuilder = null;
	var length = name.length;
	var num = 0;
	var i = 0;
	var num2 = name.IndexOf$0("_");
	var enumerator = null;
	if (num2 >= 0) {
		if (System.Xml.XmlConvert.c_EncodeCharPattern === null) {
			System.Xml.XmlConvert.c_EncodeCharPattern = JSIL.New(System.Text.RegularExpressions.Regex, "_ctor$1", ["(?<=_)[Xx]([0-9a-fA-F]{4}|[0-9a-fA-F]{8})_"]);
		}
		var matchCollection = System.Xml.XmlConvert.c_EncodeCharPattern.Matches$1(name, num2);
		enumerator = matchCollection.GetEnumerator();
	}
	var num3 = -1;
	if (!((enumerator === null) || !enumerator.IEnumerator_MoveNext())) {
		var match = JSIL.Cast(enumerator.IEnumerator_Current, System.Text.RegularExpressions.Match);
		num3 = (match.Index - 1);
	}
	if (!(!first || (!(!System.Xml.XmlConvert.xmlCharType.IsStartNCNameCharXml4e(name[0]) && 
					(local || 
						(!local && 
							((name[0]) !== ":")))) && 
				(num3 !== 0)))) {
		if (stringBuilder === null) {
			stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$1", [(length + 20)]);
		}
		stringBuilder.Append$2("_x");
		if (!((length <= 1) || 
				!$asm07.System.Xml.XmlCharType.IsHighSurrogate((name[0]).charCodeAt(0)) || !$asm07.System.Xml.XmlCharType.IsLowSurrogate((name[1]).charCodeAt(0)))) {
			var highChar = (name[0]).charCodeAt(0);
			var lowChar = (name[1]).charCodeAt(0);
			stringBuilder.Append$2(($asm07.System.Xml.XmlCharType.CombineSurrogateChar(lowChar, highChar)).toString());
			++i;
			num = 2;
		} else {
			stringBuilder.Append$2(((name[0]).charCodeAt(0)).toString());
			num = 1;
		}
		stringBuilder.Append$2("_");
		++i;
		if (!((num3 !== 0) || !enumerator.IEnumerator_MoveNext())) {
			var match2 = JSIL.Cast(enumerator.IEnumerator_Current, System.Text.RegularExpressions.Match);
			num3 = (match2.Index - 1);
		}
	}
__loop0__: 
	for (; i < length; ++i) {
		if (!(!(local && 
					!System.Xml.XmlConvert.xmlCharType.IsNCNameCharXml4e(name[i])) && 
				!(!local && 
					!System.Xml.XmlConvert.xmlCharType.IsNameCharXml4e(name[i])) && (num3 !== i))) {
			if (stringBuilder === null) {
				stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$1", [(length + 20)]);
			}
			if (!((num3 !== i) || !enumerator.IEnumerator_MoveNext())) {
				var match3 = JSIL.Cast(enumerator.IEnumerator_Current, System.Text.RegularExpressions.Match);
				num3 = (match3.Index - 1);
			}
			stringBuilder.Append$3(name, num, (i - num));
			stringBuilder.Append$2("_x");
			if (!((length <= (i + 1)) || 
					!$asm07.System.Xml.XmlCharType.IsHighSurrogate(name[i].charCodeAt(0)) || !$asm07.System.Xml.XmlCharType.IsLowSurrogate((name[(i + 1)]).charCodeAt(0)))) {
				var highChar2 = name[i].charCodeAt(0);
				var lowChar2 = (name[(i + 1)]).charCodeAt(0);
				stringBuilder.Append$2(($asm07.System.Xml.XmlCharType.CombineSurrogateChar(lowChar2, highChar2)).toString());
				num = (i + 2);
				++i;
			} else {
				stringBuilder.Append$2((name[i].charCodeAt(0)).toString());
				num = (i + 1);
			}
			stringBuilder.Append$2("_");
		}
	}
	if (num === 0) {
		return name;
	}
	if (num < length) {
		stringBuilder.Append$3(name, num, (length - num));
	}
	return stringBuilder.toString();
};
System.Xml.XmlConvert.FromHex = function (digit) {
	if (digit > "9") {
		return ((digit <= "F") ? (digit - "A") : (digit - "a") + "\n");
	}
	return (digit - "0");
};
System.Xml.XmlConvert.FromBinHexString$0 = function (s) {
	return System.Xml.XmlConvert.FromBinHexString$1(s, true);
};
System.Xml.XmlConvert.FromBinHexString$1 = function (s, allowOddCount) {
	if (s === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["s"]);
	}
	return $asm07.System.Xml.BinHexDecoder.Decode(s.ToCharArray(), allowOddCount);
};
System.Xml.XmlConvert.ToBinHexString = function (inArray) {
	if (inArray === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["inArray"]);
	}
	return $asm07.System.Xml.BinHexEncoder.Encode$1(inArray, 0, inArray.length);
};
System.Xml.XmlConvert.VerifyName = function (name) {
	if (name === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["name"]);
	}
	if (name.length === 0) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$3", ["name", $asm07.System.Xml.Res.GetString$2("Xml_EmptyName")]);
	}
	var num = $asm07.System.Xml.ValidateNames.ParseNameNoNamespaces(name, 0);
	if (num !== name.length) {
		throw System.Xml.XmlConvert.CreateInvalidNameCharException(name, num, $asm07.System.Xml.ExceptionType.XmlException);
	}
	return name;
};
System.Xml.XmlConvert.VerifyQName = function (name, exceptionType) {
	if (!((name !== null) && (name.length !== 0))) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["name"]);
	}
	var num = new JSIL.Variable(-1);
	var num2 = $asm07.System.Xml.ValidateNames.ParseQName(name, 0, /* ref */ num);
	if (num2 !== name.length) {
		throw System.Xml.XmlConvert.CreateException$5(
			"Xml_BadNameChar", 
			System.Xml.XmlException.BuildCharExceptionArgs$0(name, num2), 
			exceptionType, 
			0, 
			(num2 + 1)
		);
	}
	return name;
};
System.Xml.XmlConvert.VerifyNCName$0 = function (name) {
	return System.Xml.XmlConvert.VerifyNCName$1(name, $asm07.System.Xml.ExceptionType.XmlException);
};
System.Xml.XmlConvert.VerifyNCName$1 = function (name, exceptionType) {
	if (name === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["name"]);
	}
	if (name.length === 0) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$3", ["name", $asm07.System.Xml.Res.GetString$2("Xml_EmptyLocalName")]);
	}
	var num = $asm07.System.Xml.ValidateNames.ParseNCName$0(name, 0);
	if (num !== name.length) {
		throw System.Xml.XmlConvert.CreateInvalidNameCharException(name, num, exceptionType);
	}
	return name;
};
System.Xml.XmlConvert.VerifyNMTOKEN$0 = function (name) {
	return System.Xml.XmlConvert.VerifyNMTOKEN$1(name, $asm07.System.Xml.ExceptionType.XmlException);
};
System.Xml.XmlConvert.VerifyNMTOKEN$1 = function (name, exceptionType) {
	if (name === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["name"]);
	}
	if (name.length === 0) {
		throw System.Xml.XmlConvert.CreateException$2("Xml_InvalidNmToken", name, exceptionType);
	}
	var num = $asm07.System.Xml.ValidateNames.ParseNmtokenNoNamespaces(name, 0);
	if (num !== name.length) {
		throw System.Xml.XmlConvert.CreateException$5(
			"Xml_BadNameChar", 
			System.Xml.XmlException.BuildCharExceptionArgs$0(name, num), 
			exceptionType, 
			0, 
			(num + 1)
		);
	}
	return name;
};
System.Xml.XmlConvert.VerifyXmlChars = function (content) {
	if (content === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["content"]);
	}
	System.Xml.XmlConvert.VerifyCharData$0(content, $asm07.System.Xml.ExceptionType.XmlException);
	return content;
};
System.Xml.XmlConvert.VerifyPublicId = function (publicId) {
	if (publicId === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["publicId"]);
	}
	var num = System.Xml.XmlConvert.xmlCharType.IsPublicId(publicId);
	if (num !== -1) {
		throw System.Xml.XmlConvert.CreateInvalidCharException$3(publicId, num, $asm07.System.Xml.ExceptionType.XmlException);
	}
	return publicId;
};
System.Xml.XmlConvert.VerifyWhitespace = function (content) {
	if (content === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["content"]);
	}
	var num = System.Xml.XmlConvert.xmlCharType.IsOnlyWhitespaceWithPos(content);
	if (num !== -1) {
		throw JSIL.New(System.Xml.XmlException, "_ctor$17", ["Xml_InvalidWhitespaceCharacter", System.Xml.XmlException.BuildCharExceptionArgs$0(content, num), 0, (num + 1)]);
	}
	return content;
};
System.Xml.XmlConvert.IsStartNCNameChar = function (ch) {
	return System.Xml.XmlConvert.xmlCharType.IsStartNCNameSingleChar(ch);
};
System.Xml.XmlConvert.IsNCNameChar = function (ch) {
	return System.Xml.XmlConvert.xmlCharType.IsNCNameSingleChar(ch);
};
System.Xml.XmlConvert.IsXmlChar = function (ch) {
	return System.Xml.XmlConvert.xmlCharType.IsCharData(ch);
};
System.Xml.XmlConvert.IsXmlSurrogatePair = function (lowChar, highChar) {
	return ($asm07.System.Xml.XmlCharType.IsHighSurrogate(highChar.charCodeAt(0)) && $asm07.System.Xml.XmlCharType.IsLowSurrogate(lowChar.charCodeAt(0)));
};
System.Xml.XmlConvert.IsPublicIdChar = function (ch) {
	return System.Xml.XmlConvert.xmlCharType.IsPubidChar(ch);
};
System.Xml.XmlConvert.IsWhitespaceChar = function (ch) {
	return System.Xml.XmlConvert.xmlCharType.IsWhiteSpace(ch);
};
System.Xml.XmlConvert.ToString$0 = function (value) {
	if (!value) {
		return "false";
	}
	return "true";
};
System.Xml.XmlConvert.ToString$1 = function (value) {
	return value.ToString(null);
};
System.Xml.XmlConvert.ToString$2 = function (value) {
	return (value).toString();
};
System.Xml.XmlConvert.ToString$3 = function (value) {
	return (value).toString();
};
System.Xml.XmlConvert.ToString$4 = function (value) {
	return (value).toString();
};
System.Xml.XmlConvert.ToString$5 = function (value) {
	return (value).toString();
};
System.Xml.XmlConvert.ToString$6 = function (value) {
	return (value).toString();
};
System.Xml.XmlConvert.ToString$7 = function (value) {
	return (value).toString();
};
System.Xml.XmlConvert.ToString$8 = function (value) {
	return (value).toString();
};
System.Xml.XmlConvert.ToString$9 = function (value) {
	if (System.Single.IsNegativeInfinity(value)) {
		return "-INF";
	}
	if (System.Single.IsPositiveInfinity(value)) {
		return "INF";
	}
	if (System.Xml.XmlConvert.IsNegativeZero(value)) {
		return "-0";
	}
	return (value).toString();
};
System.Xml.XmlConvert.ToString$10 = function (value) {
	if (System.Double.IsNegativeInfinity(value)) {
		return "-INF";
	}
	if (System.Double.IsPositiveInfinity(value)) {
		return "INF";
	}
	if (System.Xml.XmlConvert.IsNegativeZero(value)) {
		return "-0";
	}
	return (value).toString();
};
System.Xml.XmlConvert.ToString$11 = function (value) {
	return JSIL.New($asm07.System.Xml.Schema.XsdDuration, "_ctor$1", [value]).toString();
};
System.Xml.XmlConvert.ToString$12 = function (value, dateTimeOption) {
	var xsdDateTime = new $asm07.System.Xml.Schema.XsdDateTime();
	switch (Number(dateTimeOption)) {
		case 0: 
			value = System.Xml.XmlConvert.SwitchToLocalTime(value.MemberwiseClone()).MemberwiseClone();
			break;
		case 1: 
			value = System.Xml.XmlConvert.SwitchToUtcTime(value.MemberwiseClone()).MemberwiseClone();
			break;
		case 2: 
			value._ctor$2(value.Ticks, System.DateTimeKind.Unspecified);
			break;
		case 3: 
			break;
		default: 
			throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm07.System.Xml.Res.GetString$0("Sch_InvalidDateTimeOption", [dateTimeOption, "dateTimeOption"])]);
	}
	xsdDateTime._ctor$1(value.MemberwiseClone(), $asm07.System.Xml.Schema.XsdDateTimeFlags.DateTime);
	return xsdDateTime.toString();
};
System.Xml.XmlConvert.ToString$13 = function (value) {
	var xsdDateTime = new $asm07.System.Xml.Schema.XsdDateTime();
	xsdDateTime._ctor$2(value);
	return xsdDateTime.toString();
};
System.Xml.XmlConvert.ToString$14 = function (value, format) {
	return value.ToString$2(format, System.Globalization.DateTimeFormatInfo.InvariantInfo);
};
System.Xml.XmlConvert.ToString$15 = function (value) {
	return value.toString();
};
System.Xml.XmlConvert.ToBoolean = function (s) {
	s = System.Xml.XmlConvert.TrimString(s);
	if (!(!(s == "1") && !(s == "true"))) {
		return true;
	}
	if (!(!(s == "0") && !(s == "false"))) {
		return false;
	}
	throw JSIL.New(System.FormatException, "_ctor$1", [$asm07.System.Xml.Res.GetString$0("XmlConvert_BadFormat", [s, "Boolean"])]);
};
System.Xml.XmlConvert.ToChar = function (s) {
	if (s === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["s"]);
	}
	if (s.length !== 1) {
		throw JSIL.New(System.FormatException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("XmlConvert_NotOneCharString")]);
	}
	return s[0];
};
System.Xml.XmlConvert.ToDecimal = function (s) {
	return System.Decimal.Parse(s, (System.Globalization.NumberStyles.AllowDecimalPoint | System.Globalization.NumberStyles.AllowLeadingSign | System.Globalization.NumberStyles.AllowLeadingWhite | System.Globalization.NumberStyles.AllowTrailingWhite | System.Globalization.NumberStyles.Integer), System.Globalization.NumberFormatInfo.InvariantInfo);
};
System.Xml.XmlConvert.ToSByte = function (s) {
	return System.SByte.Parse(s, (System.Globalization.NumberStyles.AllowLeadingSign | System.Globalization.NumberStyles.AllowLeadingWhite | System.Globalization.NumberStyles.AllowTrailingWhite | System.Globalization.NumberStyles.Integer), System.Globalization.NumberFormatInfo.InvariantInfo);
};
System.Xml.XmlConvert.ToInt16 = function (s) {
	return System.Int16.Parse(s, (System.Globalization.NumberStyles.AllowLeadingSign | System.Globalization.NumberStyles.AllowLeadingWhite | System.Globalization.NumberStyles.AllowTrailingWhite | System.Globalization.NumberStyles.Integer), System.Globalization.NumberFormatInfo.InvariantInfo);
};
System.Xml.XmlConvert.ToInt32 = function (s) {
	return System.Int32.Parse(s, (System.Globalization.NumberStyles.AllowLeadingSign | System.Globalization.NumberStyles.AllowLeadingWhite | System.Globalization.NumberStyles.AllowTrailingWhite | System.Globalization.NumberStyles.Integer), System.Globalization.NumberFormatInfo.InvariantInfo);
};
System.Xml.XmlConvert.ToInt64 = function (s) {
	return System.Int64.Parse(s, (System.Globalization.NumberStyles.AllowLeadingSign | System.Globalization.NumberStyles.AllowLeadingWhite | System.Globalization.NumberStyles.AllowTrailingWhite | System.Globalization.NumberStyles.Integer), System.Globalization.NumberFormatInfo.InvariantInfo);
};
System.Xml.XmlConvert.ToByte = function (s) {
	return System.Byte.Parse(s, (System.Globalization.NumberStyles.AllowLeadingWhite | System.Globalization.NumberStyles.AllowTrailingWhite), System.Globalization.NumberFormatInfo.InvariantInfo);
};
System.Xml.XmlConvert.ToUInt16 = function (s) {
	return System.UInt16.Parse(s, (System.Globalization.NumberStyles.AllowLeadingWhite | System.Globalization.NumberStyles.AllowTrailingWhite), System.Globalization.NumberFormatInfo.InvariantInfo);
};
System.Xml.XmlConvert.ToUInt32 = function (s) {
	return System.UInt32.Parse(s, (System.Globalization.NumberStyles.AllowLeadingWhite | System.Globalization.NumberStyles.AllowTrailingWhite), System.Globalization.NumberFormatInfo.InvariantInfo);
};
System.Xml.XmlConvert.ToUInt64 = function (s) {
	return System.UInt64.Parse(s, (System.Globalization.NumberStyles.AllowLeadingWhite | System.Globalization.NumberStyles.AllowTrailingWhite), System.Globalization.NumberFormatInfo.InvariantInfo);
};
System.Xml.XmlConvert.ToSingle = function (s) {
	s = System.Xml.XmlConvert.TrimString(s);
	if (s == "-INF") {
		return -Infinity;
	}
	if (s == "INF") {
		return Infinity;
	}
	var num = System.Single.Parse(s, (System.Globalization.NumberStyles.AllowDecimalPoint | System.Globalization.NumberStyles.AllowExponent | System.Globalization.NumberStyles.AllowLeadingSign), System.Globalization.NumberFormatInfo.InvariantInfo);
	if (!((num !== 0) || ((s[0]) !== "-"))) {
		return 0;
	}
	return num;
};
System.Xml.XmlConvert.ToDouble = function (s) {
	s = System.Xml.XmlConvert.TrimString(s);
	if (s == "-INF") {
		return -Infinity;
	}
	if (s == "INF") {
		return Infinity;
	}
	var num = System.Double.Parse(s, (System.Globalization.NumberStyles.AllowDecimalPoint | System.Globalization.NumberStyles.AllowExponent | System.Globalization.NumberStyles.AllowLeadingSign | System.Globalization.NumberStyles.AllowLeadingWhite | System.Globalization.NumberStyles.AllowTrailingWhite | System.Globalization.NumberStyles.Float | System.Globalization.NumberStyles.Integer), System.Globalization.NumberFormatInfo.InvariantInfo);
	if (!((num !== 0) || ((s[0]) !== "-"))) {
		return 0;
	}
	return num;
};
System.Xml.XmlConvert.ToTimeSpan = function (s) {
	try {
		var xsdDuration = JSIL.New($asm07.System.Xml.Schema.XsdDuration, "_ctor$3", [s]);
	} catch ($exception) {
		throw JSIL.New(System.FormatException, "_ctor$1", [$asm07.System.Xml.Res.GetString$0("XmlConvert_BadFormat", [s, "TimeSpan"])]);
	}
	return xsdDuration.ToTimeSpan$0();
};
System.Xml.XmlConvert.ToDateTime$0 = function (s, format) {
	return System.DateTime.ParseExact$1(s, format, System.Globalization.DateTimeFormatInfo.InvariantInfo, (System.Globalization.DateTimeStyles.AllowLeadingWhite | System.Globalization.DateTimeStyles.AllowTrailingWhite));
};
System.Xml.XmlConvert.ToDateTime$1 = function (s, formats) {
	return System.DateTime.ParseExact$2(s, formats, System.Globalization.DateTimeFormatInfo.InvariantInfo, (System.Globalization.DateTimeStyles.AllowLeadingWhite | System.Globalization.DateTimeStyles.AllowTrailingWhite));
};
System.Xml.XmlConvert.ToDateTime$2 = function (s, dateTimeOption) {
	var xdt = new $asm07.System.Xml.Schema.XsdDateTime();
	xdt._ctor$0(s, ($asm07.System.Xml.Schema.XsdDateTimeFlags.AllXsd | $asm07.System.Xml.Schema.XsdDateTimeFlags.Date | $asm07.System.Xml.Schema.XsdDateTimeFlags.DateTime | $asm07.System.Xml.Schema.XsdDateTimeFlags.GDay | $asm07.System.Xml.Schema.XsdDateTimeFlags.GMonth | $asm07.System.Xml.Schema.XsdDateTimeFlags.GMonthDay | $asm07.System.Xml.Schema.XsdDateTimeFlags.GYear | $asm07.System.Xml.Schema.XsdDateTimeFlags.GYearMonth | $asm07.System.Xml.Schema.XsdDateTimeFlags.Time));
	var dateTime = $asm07.System.Xml.Schema.XsdDateTime.op_Implicit$0(xdt.MemberwiseClone()).MemberwiseClone();
	switch (Number(dateTimeOption)) {
		case 0: 
			dateTime = System.Xml.XmlConvert.SwitchToLocalTime(dateTime.MemberwiseClone()).MemberwiseClone();
			break;
		case 1: 
			dateTime = System.Xml.XmlConvert.SwitchToUtcTime(dateTime.MemberwiseClone()).MemberwiseClone();
			break;
		case 2: 
			dateTime._ctor$2(dateTime.Ticks, System.DateTimeKind.Unspecified);
			break;
		case 3: 
			break;
		default: 
			throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm07.System.Xml.Res.GetString$0("Sch_InvalidDateTimeOption", [dateTimeOption, "dateTimeOption"])]);
	}
	return dateTime;
};
System.Xml.XmlConvert.ToDateTimeOffset$0 = function (s) {
	var xdt = new $asm07.System.Xml.Schema.XsdDateTime();
	if (s === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["s"]);
	}
	xdt._ctor$0(s, ($asm07.System.Xml.Schema.XsdDateTimeFlags.AllXsd | $asm07.System.Xml.Schema.XsdDateTimeFlags.Date | $asm07.System.Xml.Schema.XsdDateTimeFlags.DateTime | $asm07.System.Xml.Schema.XsdDateTimeFlags.GDay | $asm07.System.Xml.Schema.XsdDateTimeFlags.GMonth | $asm07.System.Xml.Schema.XsdDateTimeFlags.GMonthDay | $asm07.System.Xml.Schema.XsdDateTimeFlags.GYear | $asm07.System.Xml.Schema.XsdDateTimeFlags.GYearMonth | $asm07.System.Xml.Schema.XsdDateTimeFlags.Time));
	return $asm07.System.Xml.Schema.XsdDateTime.op_Implicit$1(xdt.MemberwiseClone());
};
System.Xml.XmlConvert.ToDateTimeOffset$1 = function (s, format) {
	if (s === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["s"]);
	}
	return System.DateTimeOffset.ParseExact$1(s, format, System.Globalization.DateTimeFormatInfo.InvariantInfo, (System.Globalization.DateTimeStyles.AllowLeadingWhite | System.Globalization.DateTimeStyles.AllowTrailingWhite));
};
System.Xml.XmlConvert.ToDateTimeOffset$2 = function (s, formats) {
	if (s === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["s"]);
	}
	return System.DateTimeOffset.ParseExact$2(s, formats, System.Globalization.DateTimeFormatInfo.InvariantInfo, (System.Globalization.DateTimeStyles.AllowLeadingWhite | System.Globalization.DateTimeStyles.AllowTrailingWhite));
};
System.Xml.XmlConvert.ToGuid = function (s) {
	return JSIL.New(System.Guid, "_ctor$4", [s]);
};
System.Xml.XmlConvert.SwitchToLocalTime = function (value) {
	switch (Number(value.Kind)) {
		case 0: 
			return JSIL.New(System.DateTime, "_ctor$2", [value.Ticks, System.DateTimeKind.Local]);
		case 1: 
			return value.ToLocalTime();
		case 2: 
			return value;
		default: 
			return value;
	}
};
System.Xml.XmlConvert.SwitchToUtcTime = function (value) {
	switch (Number(value.Kind)) {
		case 0: 
			return JSIL.New(System.DateTime, "_ctor$2", [value.Ticks, System.DateTimeKind.Utc]);
		case 1: 
			return value;
		case 2: 
			return value.ToUniversalTime();
		default: 
			return value;
	}
};
System.Xml.XmlConvert.ToUri = function (s) {
	var result = new JSIL.Variable(null);
	if (!((s === null) || (s.length <= 0))) {
		s = System.Xml.XmlConvert.TrimString(s);
		if (!((s.length !== 0) && (s.IndexOf$6("##", System.StringComparison.Ordinal) === -1))) {
			throw JSIL.New(System.FormatException, "_ctor$1", [$asm07.System.Xml.Res.GetString$0("XmlConvert_BadFormat", [s, "Uri"])]);
		}
	}
	if (!System.Uri.TryCreate$0(s, System.UriKind.RelativeOrAbsolute, /* ref */ result)) {
		throw JSIL.New(System.FormatException, "_ctor$1", [$asm07.System.Xml.Res.GetString$0("XmlConvert_BadFormat", [s, "Uri"])]);
	}
	return result.value;
};
System.Xml.XmlConvert.StrEqual = function (chars, strPos1, strLen1, str2) {
	if (strLen1 !== str2.length) {
		return false;
	}
__loop0__: 
	for (var num = 0; (num < strLen1) && (chars[(strPos1 + num)] === (str2[num])); ++num) {
	}
	return (num === strLen1);
};
System.Xml.XmlConvert.TrimString = function (value) {
	return value.Trim$0(System.Xml.XmlConvert.WhitespaceChars);
};
System.Xml.XmlConvert.TrimStringStart = function (value) {
	return value.TrimStart(System.Xml.XmlConvert.WhitespaceChars);
};
System.Xml.XmlConvert.TrimStringEnd = function (value) {
	return value.TrimEnd(System.Xml.XmlConvert.WhitespaceChars);
};
System.Xml.XmlConvert.SplitString$0 = function (value) {
	return value.Split(System.Xml.XmlConvert.WhitespaceChars, System.StringSplitOptions.RemoveEmptyEntries);
};
System.Xml.XmlConvert.SplitString$1 = function (value, splitStringOptions) {
	return value.Split(System.Xml.XmlConvert.WhitespaceChars, splitStringOptions);
};
System.Xml.XmlConvert.IsNegativeZero = function (value) {
	return !((value !== 0) || (System.Xml.XmlConvert.DoubleToInt64Bits(value) !== System.Xml.XmlConvert.DoubleToInt64Bits(0)));
};
System.Xml.XmlConvert.DoubleToInt64Bits = function (value) {
	return JSIL.UntranslatableInstruction("ldobj:Int64([mscorlib]System.Int64, conv.u:int64*(ldloca:float64&[exp:int64*](value)))");
};
System.Xml.XmlConvert.VerifyCharData$0 = function (data, exceptionType) {
	System.Xml.XmlConvert.VerifyCharData$1(data, exceptionType, exceptionType);
};
System.Xml.XmlConvert.VerifyCharData$1 = function (data, invCharExceptionType, invSurrogateExceptionType) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				if (!((data !== null) && (data.length !== 0))) {
					return;
				}
				var num = 0;
				var length = data.length;
			__loop0__: 
				while (true) {
					if (!((num < length) && System.Xml.XmlConvert.xmlCharType.IsCharData(data[num]))) {
						if (num === length) {
							break __loop0__;
						}
						var ch = (data[num]);
						if (!$asm07.System.Xml.XmlCharType.IsHighSurrogate(ch.charCodeAt(0))) {
							__label0__ = "IL_90";
							continue __step0__;
						}
						if ((num + 1) === length) {
							__label0__ = "Block_5";
							continue __step0__;
						}
						ch = (data[(num + 1)]);
						if (!$asm07.System.Xml.XmlCharType.IsLowSurrogate(ch.charCodeAt(0))) {
							__label0__ = "IL_75";
							continue __step0__;
						}
						num += 2;
					} else {
						++num;
					}
				}
				return;
				__label0__ = "Block_5";
				continue __step0__;
				break;
			case "Block_5":
				throw System.Xml.XmlConvert.CreateException$1("Xml_InvalidSurrogateMissingLowChar", invSurrogateExceptionType, 0, (num + 1));
				__label0__ = "IL_75";
				continue __step0__;
				break;
			case "IL_75":
				throw System.Xml.XmlConvert.CreateInvalidSurrogatePairException$2(
					data[(num + 1)], 
					data[num], 
					invSurrogateExceptionType, 
					0, 
					(num + 1)
				);
				__label0__ = "IL_90";
				continue __step0__;
				break;
			case "IL_90":
				throw System.Xml.XmlConvert.CreateInvalidCharException$3(data, num, invCharExceptionType);
				break __step0__;
		}
	}
};
System.Xml.XmlConvert.VerifyCharData$2 = function (data, offset, len, exceptionType) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				if (!((data !== null) && (len !== 0))) {
					return;
				}
				var num = offset;
				var num2 = (offset + len);
			__loop0__: 
				while (true) {
					if (!((num < num2) && System.Xml.XmlConvert.xmlCharType.IsCharData(data[num]))) {
						if (num === num2) {
							break __loop0__;
						}
						var ch = data[num];
						if (!$asm07.System.Xml.XmlCharType.IsHighSurrogate(ch.charCodeAt(0))) {
							__label0__ = "IL_78";
							continue __step0__;
						}
						if ((num + 1) === num2) {
							__label0__ = "Block_5";
							continue __step0__;
						}
						ch = data[(num + 1)];
						if (!$asm07.System.Xml.XmlCharType.IsLowSurrogate(ch.charCodeAt(0))) {
							__label0__ = "IL_63";
							continue __step0__;
						}
						num += 2;
					} else {
						++num;
					}
				}
				return;
				__label0__ = "Block_5";
				continue __step0__;
				break;
			case "Block_5":
				throw System.Xml.XmlConvert.CreateException$1("Xml_InvalidSurrogateMissingLowChar", exceptionType, 0, ((offset - num) + 1));
				__label0__ = "IL_63";
				continue __step0__;
				break;
			case "IL_63":
				throw System.Xml.XmlConvert.CreateInvalidSurrogatePairException$2(
					data[(num + 1)], 
					data[num], 
					exceptionType, 
					0, 
					((offset - num) + 1)
				);
				__label0__ = "IL_78";
				continue __step0__;
				break;
			case "IL_78":
				throw System.Xml.XmlConvert.CreateInvalidCharException$1(data, len, num, exceptionType);
				break __step0__;
		}
	}
};
System.Xml.XmlConvert.CreateException$0 = function (res, exceptionType) {
	return System.Xml.XmlConvert.CreateException$1(res, exceptionType, 0, 0);
};
System.Xml.XmlConvert.CreateException$1 = function (res, exceptionType, lineNo, linePos) {
	switch (Number(exceptionType)) {
		case 0: 
			return JSIL.New(System.ArgumentException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2(res)]);
	}
	return JSIL.New(System.Xml.XmlException, "_ctor$15", [res, System.String.Empty, lineNo, linePos]);
};
System.Xml.XmlConvert.CreateException$2 = function (res, arg, exceptionType) {
	return System.Xml.XmlConvert.CreateException$3(
		res, 
		arg, 
		exceptionType, 
		0, 
		0
	);
};
System.Xml.XmlConvert.CreateException$3 = function (res, arg, exceptionType, lineNo, linePos) {
	switch (Number(exceptionType)) {
		case 0: 
			return JSIL.New(System.ArgumentException, "_ctor$1", [$asm07.System.Xml.Res.GetString$0(res, [arg])]);
	}
	return JSIL.New(System.Xml.XmlException, "_ctor$15", [res, arg, lineNo, linePos]);
};
System.Xml.XmlConvert.CreateException$4 = function (res, args, exceptionType) {
	return System.Xml.XmlConvert.CreateException$5(
		res, 
		args, 
		exceptionType, 
		0, 
		0
	);
};
System.Xml.XmlConvert.CreateException$5 = function (res, args, exceptionType, lineNo, linePos) {
	switch (Number(exceptionType)) {
		case 0: 
			return JSIL.New(System.ArgumentException, "_ctor$1", [$asm07.System.Xml.Res.GetString$0(res, args)]);
	}
	return JSIL.New(System.Xml.XmlException, "_ctor$17", [res, args, lineNo, linePos]);
};
System.Xml.XmlConvert.CreateInvalidSurrogatePairException$0 = function (low, hi) {
	return System.Xml.XmlConvert.CreateInvalidSurrogatePairException$1(low, hi, $asm07.System.Xml.ExceptionType.ArgumentException);
};
System.Xml.XmlConvert.CreateInvalidSurrogatePairException$1 = function (low, hi, exceptionType) {
	return System.Xml.XmlConvert.CreateInvalidSurrogatePairException$2(
		low, 
		hi, 
		exceptionType, 
		0, 
		0
	);
};
System.Xml.XmlConvert.CreateInvalidSurrogatePairException$2 = function (low, hi, exceptionType, lineNo, linePos) {
	var array = JSIL.Array.New(System.String, 2);
	array[0] = ((hi.charCodeAt(0)).toString());
	var arg_32_0 = array;
	arg_32_0[1] = ((low.charCodeAt(0)).toString());
	var args = array;
	return System.Xml.XmlConvert.CreateException$5(
		"Xml_InvalidSurrogatePairWithArgs", 
		args, 
		exceptionType, 
		lineNo, 
		linePos
	);
};
System.Xml.XmlConvert.CreateInvalidHighSurrogateCharException$0 = function (hi) {
	return System.Xml.XmlConvert.CreateInvalidHighSurrogateCharException$1(hi, $asm07.System.Xml.ExceptionType.ArgumentException);
};
System.Xml.XmlConvert.CreateInvalidHighSurrogateCharException$1 = function (hi, exceptionType) {
	return System.Xml.XmlConvert.CreateInvalidHighSurrogateCharException$2(hi, exceptionType, 0, 0);
};
System.Xml.XmlConvert.CreateInvalidHighSurrogateCharException$2 = function (hi, exceptionType, lineNo, linePos) {
	return System.Xml.XmlConvert.CreateException$3(
		"Xml_InvalidSurrogateHighChar", 
		(hi.charCodeAt(0)).toString(), 
		exceptionType, 
		lineNo, 
		linePos
	);
};
System.Xml.XmlConvert.CreateInvalidCharException$0 = function (data, length, invCharPos) {
	return System.Xml.XmlConvert.CreateInvalidCharException$1(data, length, invCharPos, $asm07.System.Xml.ExceptionType.ArgumentException);
};
System.Xml.XmlConvert.CreateInvalidCharException$1 = function (data, length, invCharPos, exceptionType) {
	return System.Xml.XmlConvert.CreateException$5(
		"Xml_InvalidCharacter", 
		System.Xml.XmlException.BuildCharExceptionArgs$2(data, length, invCharPos), 
		exceptionType, 
		0, 
		(invCharPos + 1)
	);
};
System.Xml.XmlConvert.CreateInvalidCharException$2 = function (data, invCharPos) {
	return System.Xml.XmlConvert.CreateInvalidCharException$3(data, invCharPos, $asm07.System.Xml.ExceptionType.ArgumentException);
};
System.Xml.XmlConvert.CreateInvalidCharException$3 = function (data, invCharPos, exceptionType) {
	return System.Xml.XmlConvert.CreateException$5(
		"Xml_InvalidCharacter", 
		System.Xml.XmlException.BuildCharExceptionArgs$0(data, invCharPos), 
		exceptionType, 
		0, 
		(invCharPos + 1)
	);
};
System.Xml.XmlConvert.CreateInvalidCharException$4 = function (invChar, nextChar) {
	return System.Xml.XmlConvert.CreateInvalidCharException$5(invChar, nextChar, $asm07.System.Xml.ExceptionType.ArgumentException);
};
System.Xml.XmlConvert.CreateInvalidCharException$5 = function (invChar, nextChar, exceptionType) {
	return System.Xml.XmlConvert.CreateException$4("Xml_InvalidCharacter", System.Xml.XmlException.BuildCharExceptionArgs$3(invChar, nextChar), exceptionType);
};
System.Xml.XmlConvert.CreateInvalidNameCharException = function (name, index, exceptionType) {
	return System.Xml.XmlConvert.CreateException$5(
		(index === 0) ? "Xml_BadStartNameChar" : "Xml_BadNameChar", 
		System.Xml.XmlException.BuildCharExceptionArgs$0(name, index), 
		exceptionType, 
		0, 
		(index + 1)
	);
};
System.Xml.XmlConvert.CreateInvalidNameArgumentException = function (name, argumentName) {
	if (name !== null) {
		return JSIL.New(System.ArgumentException, "_ctor$4", [$asm07.System.Xml.Res.GetString$2("Xml_EmptyName"), argumentName]);
	}
	return JSIL.New(System.ArgumentNullException, "_ctor$1", [argumentName]);
};
System.Xml.XmlConvert.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
JSIL.OverloadedMethod(System.Xml.XmlConvert, "EncodeName", [
		["EncodeName$0", [System.String]], 
		["EncodeName$1", [System.String, System.Boolean, System.Boolean]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlConvert, "FromBinHexString", [
		["FromBinHexString$0", [System.String]], 
		["FromBinHexString$1", [System.String, System.Boolean]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlConvert, "VerifyNCName", [
		["VerifyNCName$0", [System.String]], 
		["VerifyNCName$1", [System.String, $asm07.System.Xml.ExceptionType]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlConvert, "VerifyNMTOKEN", [
		["VerifyNMTOKEN$0", [System.String]], 
		["VerifyNMTOKEN$1", [System.String, $asm07.System.Xml.ExceptionType]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlConvert, "ToString", [
		["ToString$0", [System.Boolean]], 
		["ToString$1", [System.Char]], 
		["ToString$2", [System.Decimal]], 
		["ToString$3", [System.SByte]], 
		["ToString$4", [System.Int16]], 
		["ToString$5", [System.Int32]], 
		["ToString$6", [System.Int64]], 
		["ToString$7", [System.UInt32]], 
		["ToString$8", [System.UInt64]], 
		["ToString$9", [System.Single]], 
		["ToString$10", [System.Double]], 
		["ToString$11", [System.TimeSpan]], 
		["ToString$12", [System.DateTime, System.Xml.XmlDateTimeSerializationMode]], 
		["ToString$13", [System.DateTimeOffset]], 
		["ToString$14", [System.DateTimeOffset, System.String]], 
		["ToString$15", [System.Guid]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlConvert, "ToDateTime", [
		["ToDateTime$0", [System.String, System.String]], 
		["ToDateTime$1", [System.String, System.Array.Of(System.String)]], 
		["ToDateTime$2", [System.String, System.Xml.XmlDateTimeSerializationMode]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlConvert, "ToDateTimeOffset", [
		["ToDateTimeOffset$0", [System.String]], 
		["ToDateTimeOffset$1", [System.String, System.String]], 
		["ToDateTimeOffset$2", [System.String, System.Array.Of(System.String)]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlConvert, "SplitString", [
		["SplitString$0", [System.String]], 
		["SplitString$1", [System.String, System.StringSplitOptions]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlConvert, "VerifyCharData", [
		["VerifyCharData$0", [System.String, $asm07.System.Xml.ExceptionType]], 
		["VerifyCharData$1", [System.String, $asm07.System.Xml.ExceptionType, $asm07.System.Xml.ExceptionType]], 
		["VerifyCharData$2", [System.Array.Of(System.Char), System.Int32, System.Int32, $asm07.System.Xml.ExceptionType]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlConvert, "CreateException", [
		["CreateException$0", [System.String, $asm07.System.Xml.ExceptionType]], 
		["CreateException$1", [System.String, $asm07.System.Xml.ExceptionType, System.Int32, System.Int32]], 
		["CreateException$2", [System.String, System.String, $asm07.System.Xml.ExceptionType]], 
		["CreateException$3", [System.String, System.String, $asm07.System.Xml.ExceptionType, System.Int32, System.Int32]], 
		["CreateException$4", [System.String, System.Array.Of(System.String), $asm07.System.Xml.ExceptionType]], 
		["CreateException$5", [System.String, System.Array.Of(System.String), $asm07.System.Xml.ExceptionType, System.Int32, System.Int32]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlConvert, "CreateInvalidSurrogatePairException", [
		["CreateInvalidSurrogatePairException$0", [System.Char, System.Char]], 
		["CreateInvalidSurrogatePairException$1", [System.Char, System.Char, $asm07.System.Xml.ExceptionType]], 
		["CreateInvalidSurrogatePairException$2", [System.Char, System.Char, $asm07.System.Xml.ExceptionType, System.Int32, System.Int32]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlConvert, "CreateInvalidHighSurrogateCharException", [
		["CreateInvalidHighSurrogateCharException$0", [System.Char]], 
		["CreateInvalidHighSurrogateCharException$1", [System.Char, $asm07.System.Xml.ExceptionType]], 
		["CreateInvalidHighSurrogateCharException$2", [System.Char, $asm07.System.Xml.ExceptionType, System.Int32, System.Int32]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlConvert, "CreateInvalidCharException", [
		["CreateInvalidCharException$0", [System.Array.Of(System.Char), System.Int32, System.Int32]], 
		["CreateInvalidCharException$1", [System.Array.Of(System.Char), System.Int32, System.Int32, $asm07.System.Xml.ExceptionType]], 
		["CreateInvalidCharException$2", [System.String, System.Int32]], 
		["CreateInvalidCharException$3", [System.String, System.Int32, $asm07.System.Xml.ExceptionType]], 
		["CreateInvalidCharException$4", [System.Char, System.Char]], 
		["CreateInvalidCharException$5", [System.Char, System.Char, $asm07.System.Xml.ExceptionType]]
	]);
System.Xml.XmlConvert.c_EncodedCharLength = 0;
System.Xml.XmlConvert.c_EncodeCharPattern = null;
System.Xml.XmlConvert.c_DecodeCharPattern = null;
System.Xml.XmlConvert.WhitespaceChars = null;
System.Xml.XmlConvert._cctor = function () {
	System.Xml.XmlConvert.xmlCharType = new $asm07.System.Xml.XmlCharType();
	System.Xml.XmlConvert.xmlCharType = $asm07.System.Xml.XmlCharType.Instance.MemberwiseClone();
	System.Xml.XmlConvert.c_EncodedCharLength = 7;
	System.Xml.XmlConvert.WhitespaceChars = JSIL.Array.New(System.Char, [" ", "\t", "\n", "\r"]);
};

$asm07.System.Xml.UTF16Decoder.prototype._ctor = function (bigEndian) {
	System.Text.Decoder.prototype._ctor.call(this);
	this.lastByte = -1;
	this.bigEndian = bigEndian;
};
$asm07.System.Xml.UTF16Decoder.prototype.GetCharCount$0 = function (bytes, index, count) {
	return this.GetCharCount$1(bytes, index, count, false);
};
$asm07.System.Xml.UTF16Decoder.prototype.GetCharCount$1 = function (bytes, index, count, flush) {
	var num = (count + (this.lastByte >= 0) ? 1 : 0);
	if (!(!flush || !(num % 2))) {
		throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm07.System.Xml.Res.GetString$0("Enc_InvalidByteInEncoding", [-1]), null]);
	}
	return Math.floor(num / 2);
};
$asm07.System.Xml.UTF16Decoder.prototype.GetChars = function (bytes, byteIndex, byteCount, chars, charIndex) {
	var charCount = this.GetCharCount$0(bytes, byteIndex, byteCount);
	if (this.lastByte >= 0) {
		if (byteCount === 0) {
			return charCount;
		}
		var num = bytes[byteIndex++];
		--byteCount;
		chars[charIndex++] = this.bigEndian ? ((this.lastByte << 8) | num) : ((num << 8) | this.lastByte);
		this.lastByte = -1;
	}
	if (byteCount & 1) {
		this.lastByte = bytes[(byteIndex + --byteCount)];
	}
	if (this.bigEndian === System.BitConverter.IsLittleEndian) {
		var num2 = (byteIndex + byteCount);
		if (this.bigEndian) {
		__loop1__: 
			while (byteIndex < num2) {
				var num3 = bytes[byteIndex++];
				var num4 = bytes[byteIndex++];
				chars[charIndex++] = ((num3 << 8) | num4);
			}
		} else {
		__loop0__: 
			while (byteIndex < num2) {
				var num5 = bytes[byteIndex++];
				var num6 = bytes[byteIndex++];
				chars[charIndex++] = ((num6 << 8) | num5);
			}
		}
	} else {
		System.Buffer.BlockCopy(
			bytes, 
			byteIndex, 
			chars, 
			(charIndex * 2), 
			byteCount
		);
	}
	return charCount;
};
$asm07.System.Xml.UTF16Decoder.prototype.Convert = function (bytes, byteIndex, byteCount, chars, charIndex, charCount, flush, /* ref */ bytesUsed, /* ref */ charsUsed, /* ref */ completed) {
	charsUsed.value = 0;
	bytesUsed.value = 0;
	if (this.lastByte >= 0) {
		if (byteCount === 0) {
			completed.value = true;
			return;
		}
		var num = bytes[byteIndex++];
		--byteCount;
		++bytesUsed.value;
		chars[charIndex++] = this.bigEndian ? ((this.lastByte << 8) | num) : ((num << 8) | this.lastByte);
		--charCount;
		++charsUsed.value;
		this.lastByte = -1;
	}
	if ((charCount * 2) < byteCount) {
		byteCount = (charCount * 2);
		completed.value = false;
	} else {
		completed.value = true;
	}
	if (this.bigEndian === System.BitConverter.IsLittleEndian) {
		var i = byteIndex;
		var num2 = (i + (byteCount & -2));
		if (this.bigEndian) {
		__loop1__: 
			while (i < num2) {
				var num3 = bytes[i++];
				var num4 = bytes[i++];
				chars[charIndex++] = ((num3 << 8) | num4);
			}
		} else {
		__loop0__: 
			while (i < num2) {
				var num5 = bytes[i++];
				var num6 = bytes[i++];
				chars[charIndex++] = ((num6 << 8) | num5);
			}
		}
	} else {
		System.Buffer.BlockCopy(
			bytes, 
			byteIndex, 
			chars, 
			(charIndex * 2), 
			(byteCount & -2)
		);
	}
	charsUsed.value += Math.floor(byteCount / 2);
	bytesUsed.value += byteCount;
	if (byteCount & 1) {
		this.lastByte = bytes[((byteIndex + byteCount) - 1)];
	}
};
JSIL.OverloadedMethod($asm07.System.Xml.UTF16Decoder.prototype, "GetCharCount", [
		["GetCharCount$0", [System.Array.Of(System.Byte), System.Int32, System.Int32]], 
		["GetCharCount$1", [System.Array.Of(System.Byte), System.Int32, System.Int32, System.Boolean]]
	]);
Object.defineProperty($asm07.System.Xml.UTF16Decoder, "CharSize", {
		"value": 2}
);
$asm07.System.Xml.UTF16Decoder.prototype.bigEndian = false;
$asm07.System.Xml.UTF16Decoder.prototype.lastByte = 0;

$asm07.System.Xml.SafeAsciiDecoder.prototype._ctor = function () {
	System.Text.Decoder.prototype._ctor.call(this);
};
$asm07.System.Xml.SafeAsciiDecoder.prototype.GetCharCount = function (bytes, index, count) {
	return count;
};
$asm07.System.Xml.SafeAsciiDecoder.prototype.GetChars = function (bytes, byteIndex, byteCount, chars, charIndex) {
	var i = byteIndex;
	var num = charIndex;
__loop0__: 
	while (i < (byteIndex + byteCount)) {
		chars[num++] = bytes[i++];
	}
	return byteCount;
};
$asm07.System.Xml.SafeAsciiDecoder.prototype.Convert = function (bytes, byteIndex, byteCount, chars, charIndex, charCount, flush, /* ref */ bytesUsed, /* ref */ charsUsed, /* ref */ completed) {
	if (charCount < byteCount) {
		byteCount = charCount;
		completed.value = false;
	} else {
		completed.value = true;
	}
	var i = byteIndex;
	var num = charIndex;
__loop0__: 
	for (var num2 = (byteIndex + byteCount); i < num2; ) {
		chars[num++] = bytes[i++];
	}
	charsUsed.value = byteCount;
	bytesUsed.value = byteCount;
};

System.Xml.XmlException.prototype._ctor$0 = function () {
	this._ctor$1(null);
};
System.Xml.XmlException.prototype._ctor$1 = function (message) {
	this._ctor$3(message, null, 0, 0);
};
System.Xml.XmlException.prototype._ctor$2 = function (message, innerException) {
	this._ctor$3(message, innerException, 0, 0);
};
System.Xml.XmlException.prototype._ctor$3 = function (message, innerException, lineNumber, linePosition) {
	this._ctor$4(
		message, 
		innerException, 
		lineNumber, 
		linePosition, 
		null
	);
};
System.Xml.XmlException.prototype._ctor$4 = function (message, innerException, lineNumber, linePosition, sourceUri) {
	System.SystemException.prototype._ctor$2.call(this, System.Xml.XmlException.FormatUserMessage(message, lineNumber, linePosition), innerException);
	System.Exception.prototype.set_HResult.call(this, -2146232000);
	this.res = (message === null) ? "Xml_DefaultException" : "Xml_UserException";
	this.args = JSIL.Array.New(System.String, [message]);
	this.sourceUri = sourceUri;
	this.lineNumber = lineNumber;
	this.linePosition = linePosition;
};
System.Xml.XmlException.prototype._ctor$5 = function (res, args) {
	this._ctor$20(
		res, 
		args, 
		null, 
		0, 
		0, 
		null
	);
};
System.Xml.XmlException.prototype._ctor$6 = function (res, args, sourceUri) {
	this._ctor$20(
		res, 
		args, 
		null, 
		0, 
		0, 
		sourceUri
	);
};
System.Xml.XmlException.prototype._ctor$7 = function (res, arg) {
	this._ctor$20(
		res, 
		JSIL.Array.New(System.String, [arg]), 
		null, 
		0, 
		0, 
		null
	);
};
System.Xml.XmlException.prototype._ctor$8 = function (res, arg, sourceUri) {
	this._ctor$20(
		res, 
		JSIL.Array.New(System.String, [arg]), 
		null, 
		0, 
		0, 
		sourceUri
	);
};
System.Xml.XmlException.prototype._ctor$9 = function (res, arg, lineInfo) {
	this._ctor$13(res, JSIL.Array.New(System.String, [arg]), lineInfo, null);
};
System.Xml.XmlException.prototype._ctor$10 = function (res, arg, innerException, lineInfo) {
	this._ctor$20(
		res, 
		JSIL.Array.New(System.String, [arg]), 
		innerException, 
		(lineInfo === null) ? 0 : lineInfo.IXmlLineInfo_LineNumber, 
		(lineInfo === null) ? 0 : lineInfo.IXmlLineInfo_LinePosition, 
		null
	);
};
System.Xml.XmlException.prototype._ctor$11 = function (res, arg, lineInfo, sourceUri) {
	this._ctor$13(res, JSIL.Array.New(System.String, [arg]), lineInfo, sourceUri);
};
System.Xml.XmlException.prototype._ctor$12 = function (res, args, lineInfo) {
	this._ctor$13(res, args, lineInfo, null);
};
System.Xml.XmlException.prototype._ctor$13 = function (res, args, lineInfo, sourceUri) {
	this._ctor$20(
		res, 
		args, 
		null, 
		(lineInfo === null) ? 0 : lineInfo.IXmlLineInfo_LineNumber, 
		(lineInfo === null) ? 0 : lineInfo.IXmlLineInfo_LinePosition, 
		sourceUri
	);
};
System.Xml.XmlException.prototype._ctor$14 = function (res, lineNumber, linePosition) {
	this._ctor$19(
		res, 
		null, 
		null, 
		lineNumber, 
		linePosition
	);
};
System.Xml.XmlException.prototype._ctor$15 = function (res, arg, lineNumber, linePosition) {
	this._ctor$20(
		res, 
		JSIL.Array.New(System.String, [arg]), 
		null, 
		lineNumber, 
		linePosition, 
		null
	);
};
System.Xml.XmlException.prototype._ctor$16 = function (res, arg, lineNumber, linePosition, sourceUri) {
	this._ctor$20(
		res, 
		JSIL.Array.New(System.String, [arg]), 
		null, 
		lineNumber, 
		linePosition, 
		sourceUri
	);
};
System.Xml.XmlException.prototype._ctor$17 = function (res, args, lineNumber, linePosition) {
	this._ctor$20(
		res, 
		args, 
		null, 
		lineNumber, 
		linePosition, 
		null
	);
};
System.Xml.XmlException.prototype._ctor$18 = function (res, args, lineNumber, linePosition, sourceUri) {
	this._ctor$20(
		res, 
		args, 
		null, 
		lineNumber, 
		linePosition, 
		sourceUri
	);
};
System.Xml.XmlException.prototype._ctor$19 = function (res, args, innerException, lineNumber, linePosition) {
	this._ctor$20(
		res, 
		args, 
		innerException, 
		lineNumber, 
		linePosition, 
		null
	);
};
System.Xml.XmlException.prototype._ctor$20 = function (res, args, innerException, lineNumber, linePosition, sourceUri) {
	System.SystemException.prototype._ctor$2.call(this, System.Xml.XmlException.CreateMessage(res, args, lineNumber, linePosition), innerException);
	System.Exception.prototype.set_HResult.call(this, -2146232000);
	this.res = res;
	this.args = args;
	this.sourceUri = sourceUri;
	this.lineNumber = lineNumber;
	this.linePosition = linePosition;
};
System.Xml.XmlException.FormatUserMessage = function (message, lineNumber, linePosition) {
	if (message === null) {
		return System.Xml.XmlException.CreateMessage("Xml_DefaultException", null, lineNumber, linePosition);
	}
	if (!((lineNumber !== 0) || (linePosition !== 0))) {
		return message;
	}
	return System.Xml.XmlException.CreateMessage("Xml_UserException", JSIL.Array.New(System.String, [message]), lineNumber, linePosition);
};
System.Xml.XmlException.CreateMessage = function (res, $args, lineNumber, linePosition) {
	var args = new JSIL.Variable($args);
	var flag = new JSIL.Variable(false);
	try {
		if (lineNumber === 0) {
			var string = $asm07.System.Xml.Res.GetString$0(res, args.value);
		} else {
			var text = ((lineNumber).toString());
			var text2 = ((linePosition).toString());
			string = $asm07.System.Xml.Res.GetString$1(res, /* ref */ flag, args.value);
			if (!flag.value) {
				string = $asm07.System.Xml.Res.GetString$0("Xml_MessageWithErrorPosition", JSIL.Array.New(System.String, [string, text, text2]));
			} else {
				var num = args.value.length;
				System.Array.Resize$b1(System.String)(/* ref */ args, (num + 2));
				args.value[num] = text;
				args.value[(num + 1)] = text2;
				string = $asm07.System.Xml.Res.GetString$0(res, args.value);
			}
		}
		var result = string;
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.Resources.MissingManifestResourceException)) {
			result = (("UNKNOWN(" + res + ")"));
		} else {
			throw $exception;
		}
	}
	return result;
};
System.Xml.XmlException.BuildCharExceptionArgs$0 = function (data, invCharIndex) {
	return System.Xml.XmlException.BuildCharExceptionArgs$3(data[invCharIndex], ((invCharIndex + 1) < data.length) ? data[(invCharIndex + 1)] : "\0");
};
System.Xml.XmlException.BuildCharExceptionArgs$1 = function (data, invCharIndex) {
	return System.Xml.XmlException.BuildCharExceptionArgs$2(data, data.length, invCharIndex);
};
System.Xml.XmlException.BuildCharExceptionArgs$2 = function (data, length, invCharIndex) {
	return System.Xml.XmlException.BuildCharExceptionArgs$3(data[invCharIndex], ((invCharIndex + 1) < length) ? data[(invCharIndex + 1)] : "\0");
};
System.Xml.XmlException.BuildCharExceptionArgs$3 = function (invChar, nextChar) {
	var array = JSIL.Array.New(System.String, 2);
	if (!(!$asm07.System.Xml.XmlCharType.IsHighSurrogate(invChar.charCodeAt(0)) || !JSIL.Cast(nextChar, System.Boolean))) {
		var num = $asm07.System.Xml.XmlCharType.CombineSurrogateChar(nextChar.charCodeAt(0), invChar.charCodeAt(0));
		array[0] = JSIL.New(System.String, "_ctor$1", [JSIL.Array.New(System.Char, [invChar, nextChar])]);
		array[1] = System.String.Format(System.Globalization.CultureInfo.InvariantCulture, "0x{0:X2}", [num]);
	} else {
		if (!JSIL.Cast(invChar, System.Boolean)) {
			array[0] = ".";
		} else {
			array[0] = invChar.ToString(System.Globalization.CultureInfo.InvariantCulture);
		}
		array[1] = System.String.Format(System.Globalization.CultureInfo.InvariantCulture, "0x{0:X2}", [invChar.charCodeAt(0)]);
	}
	return array;
};
System.Xml.XmlException.prototype.get_LineNumber = function () {
	return this.lineNumber;
};
System.Xml.XmlException.prototype.get_LinePosition = function () {
	return this.linePosition;
};
System.Xml.XmlException.prototype.get_SourceUri = function () {
	return this.sourceUri;
};
System.Xml.XmlException.prototype.get_Message = function () {
	if (this.message !== null) {
		return this.message;
	}
	return System.Exception.prototype.get_Message.call(this);
};
System.Xml.XmlException.prototype.get_ResString = function () {
	return this.res;
};
JSIL.OverloadedMethod(System.Xml.XmlException.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.String]], 
		["_ctor$2", [System.String, System.Exception]], 
		["_ctor$3", [System.String, System.Exception, System.Int32, System.Int32]], 
		["_ctor$4", [System.String, System.Exception, System.Int32, System.Int32, System.String]], 
		["_ctor$5", [System.String, System.Array.Of(System.String)]], 
		["_ctor$6", [System.String, System.Array.Of(System.String), System.String]], 
		["_ctor$7", [System.String, System.String]], 
		["_ctor$8", [System.String, System.String, System.String]], 
		["_ctor$9", [System.String, System.String, System.Xml.IXmlLineInfo]], 
		["_ctor$10", [System.String, System.String, System.Exception, System.Xml.IXmlLineInfo]], 
		["_ctor$11", [System.String, System.String, System.Xml.IXmlLineInfo, System.String]], 
		["_ctor$12", [System.String, System.Array.Of(System.String), System.Xml.IXmlLineInfo]], 
		["_ctor$13", [System.String, System.Array.Of(System.String), System.Xml.IXmlLineInfo, System.String]], 
		["_ctor$14", [System.String, System.Int32, System.Int32]], 
		["_ctor$15", [System.String, System.String, System.Int32, System.Int32]], 
		["_ctor$16", [System.String, System.String, System.Int32, System.Int32, System.String]], 
		["_ctor$17", [System.String, System.Array.Of(System.String), System.Int32, System.Int32]], 
		["_ctor$18", [System.String, System.Array.Of(System.String), System.Int32, System.Int32, System.String]], 
		["_ctor$19", [System.String, System.Array.Of(System.String), System.Exception, System.Int32, System.Int32]], 
		["_ctor$20", [System.String, System.Array.Of(System.String), System.Exception, System.Int32, System.Int32, System.String]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlException, "BuildCharExceptionArgs", [
		["BuildCharExceptionArgs$0", [System.String, System.Int32]], 
		["BuildCharExceptionArgs$1", [System.Array.Of(System.Char), System.Int32]], 
		["BuildCharExceptionArgs$2", [System.Array.Of(System.Char), System.Int32, System.Int32]], 
		["BuildCharExceptionArgs$3", [System.Char, System.Char]]
	]);
JSIL.MakeProperty(System.Xml.XmlException.prototype, "LineNumber", 
	System.Xml.XmlException.prototype.get_LineNumber, null);
JSIL.MakeProperty(System.Xml.XmlException.prototype, "LinePosition", 
	System.Xml.XmlException.prototype.get_LinePosition, null);
JSIL.MakeProperty(System.Xml.XmlException.prototype, "SourceUri", 
	System.Xml.XmlException.prototype.get_SourceUri, null);
JSIL.MakeProperty(System.Xml.XmlException.prototype, "Message", 
	System.Xml.XmlException.prototype.get_Message, null);
JSIL.MakeProperty(System.Xml.XmlException.prototype, "ResString", 
	System.Xml.XmlException.prototype.get_ResString, null);
System.Xml.XmlException.prototype.res = null;
System.Xml.XmlException.prototype.args = null;
System.Xml.XmlException.prototype.lineNumber = 0;
System.Xml.XmlException.prototype.linePosition = 0;
System.Xml.XmlException.prototype.sourceUri = null;
System.Xml.XmlException.prototype.message = null;

System.Xml.XmlNamespaceManager.prototype._ctor = function (nameTable) {
	System.Object.prototype._ctor.call(this);
	this.nameTable = nameTable;
	this.xml = nameTable.Add$1("xml");
	this.xmlNs = nameTable.Add$1("xmlns");
	this.nsdecls = JSIL.Array.New($asm07.System.Xml.XmlNamespaceManager.NamespaceDeclaration, 8);
	var text = nameTable.Add$1(System.String.Empty);
	(this.nsdecls[0]).Set(text, text, -1, -1);
	(this.nsdecls[1]).Set(this.xmlNs, nameTable.Add$1("http://www.w3.org/2000/xmlns/"), -1, -1);
	(this.nsdecls[2]).Set(this.xml, nameTable.Add$1("http://www.w3.org/XML/1998/namespace"), 0, -1);
	this.lastDecl = 2;
	this.scopeId = 1;
};
System.Xml.XmlNamespaceManager.prototype.get_NameTable = function () {
	return this.nameTable;
};
System.Xml.XmlNamespaceManager.prototype.get_DefaultNamespace = function () {
	var text = this.LookupNamespace(System.String.Empty);
	if (text !== null) {
		return text;
	}
	return System.String.Empty;
};
System.Xml.XmlNamespaceManager.prototype.PushScope = function () {
	++this.scopeId;
};
System.Xml.XmlNamespaceManager.prototype.PopScope = function () {
	var num = this.lastDecl;
	if (this.scopeId === 1) {
		return false;
	}
__loop0__: 
	for (; this.nsdecls[num].scopeId === this.scopeId; --num) {
		if (this.useHashtable) {
			this.hashTable.set_Item(this.nsdecls[num].prefix, this.nsdecls[num].previousNsIndex);
		}
	}
	this.lastDecl = num;
	--this.scopeId;
	return true;
};
System.Xml.XmlNamespaceManager.prototype.AddNamespace = function (prefix, uri) {
	if (uri === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["uri"]);
	}
	if (prefix === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["prefix"]);
	}
	prefix = this.nameTable.Add$1(prefix);
	uri = this.nameTable.Add$1(uri);
	if (!(!$asm07.System.Xml.Ref.Equal(this.xml, prefix) || uri.Equals$1("http://www.w3.org/XML/1998/namespace"))) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_XmlPrefix")]);
	}
	if ($asm07.System.Xml.Ref.Equal(this.xmlNs, prefix)) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_XmlnsPrefix")]);
	}
	var num = this.LookupNamespaceDecl(prefix);
	var previousNsIndex = -1;
	if (num !== -1) {
		if (this.nsdecls[num].scopeId === this.scopeId) {
			this.nsdecls[num].uri = uri;
			return;
		}
		previousNsIndex = num;
	}
	if (this.lastDecl === (this.nsdecls.length - 1)) {
		var destinationArray = JSIL.Array.New($asm07.System.Xml.XmlNamespaceManager.NamespaceDeclaration, (this.nsdecls.length * 2));
		System.Array.Copy$1(
			this.nsdecls, 
			0, 
			destinationArray, 
			0, 
			this.nsdecls.length
		);
		this.nsdecls = destinationArray;
	}
	this.nsdecls[++this.lastDecl].Set(prefix, uri, this.scopeId, previousNsIndex);
	if (this.useHashtable) {
		this.hashTable.set_Item(prefix, this.lastDecl);
		return;
	}
	if (this.lastDecl >= 16) {
		this.hashTable = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.String, System.Int32), "_ctor$1", [this.lastDecl]);
	__loop0__: 
		for (var i = 0; i <= this.lastDecl; ++i) {
			this.hashTable.set_Item(this.nsdecls[i].prefix, i);
		}
		this.useHashtable = true;
	}
};
System.Xml.XmlNamespaceManager.prototype.RemoveNamespace = function (prefix, uri) {
	if (uri === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["uri"]);
	}
	if (prefix === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["prefix"]);
	}
__loop0__: 
	for (var num = this.LookupNamespaceDecl(prefix); num !== -1; num = this.nsdecls[num].previousNsIndex) {
		if (!(!System.String.Equals$0(this.nsdecls[num].uri, uri) || (this.nsdecls[num].scopeId !== this.scopeId))) {
			this.nsdecls[num].uri = null;
		}
	}
};
System.Xml.XmlNamespaceManager.prototype.GetEnumerator = function () {
	var dictionary = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.String, System.String), "_ctor$1", [(this.lastDecl + 1)]);
__loop0__: 
	for (var i = 0; i <= this.lastDecl; ++i) {
		if (this.nsdecls[i].uri !== null) {
			dictionary.set_Item(this.nsdecls[i].prefix, this.nsdecls[i].prefix);
		}
	}
	return JSIL.Cast(dictionary.Keys, System.Collections.Generic.Dictionary$b2.KeyCollection.Of(System.String, System.String)).GetEnumerator();
};
System.Xml.XmlNamespaceManager.prototype.GetNamespacesInScope = function (scope) {
	var i = 0;
	switch (Number(scope)) {
		case 0: 
			i = 2;
			break;
		case 1: 
			i = 3;
			break;
		case 2: 
		__loop0__: 
			for (i = this.lastDecl; this.nsdecls[i].scopeId === this.scopeId; --i) {
			}
			++i;
			break;
	}
	var dictionary = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.String, System.String), "_ctor$1", [((this.lastDecl - i) + 1)]);
__loop1__: 
	while (i <= this.lastDecl) {
		var prefix = this.nsdecls[i].prefix;
		var uri = this.nsdecls[i].uri;
		if (uri !== null) {
			if (!((uri.length <= 0) && 
					(prefix.length <= 0) && (scope !== System.Xml.XmlNamespaceScope.Local))) {
				dictionary.set_Item(prefix, uri);
			} else {
				dictionary.Remove(prefix);
			}
		}
		++i;
	}
	return dictionary;
};
System.Xml.XmlNamespaceManager.prototype.LookupNamespace = function (prefix) {
	var num = this.LookupNamespaceDecl(prefix);
	if (num !== -1) {
		return this.nsdecls[num].uri;
	}
	return null;
};
System.Xml.XmlNamespaceManager.prototype.LookupNamespaceDecl = function (prefix) {
	if (!this.useHashtable) {
	__loop0__: 
		for (var i = this.lastDecl; i >= 0; --i) {
			if (!((this.nsdecls[i].prefix !== prefix) || (this.nsdecls[i].uri === null))) {
				return i;
			}
		}
	__loop1__: 
		for (var j = this.lastDecl; j >= 0; --j) {
			if (!(!System.String.Equals$0(this.nsdecls[j].prefix, prefix) || (this.nsdecls[j].uri === null))) {
				return j;
			}
		}
		return -1;
	}
	if (this.hashTable.TryGetValue(prefix, /* ref */ previousNsIndex)) {
	__loop2__: 
		while ((previousNsIndex.value !== -1) && (this.nsdecls[previousNsIndex.value].uri === null)) {
			var previousNsIndex = new JSIL.Variable(this.nsdecls[previousNsIndex.value].previousNsIndex);
		}
		return previousNsIndex.value;
	}
	return -1;
};
System.Xml.XmlNamespaceManager.prototype.LookupPrefix = function (uri) {
__loop0__: 
	for (var i = this.lastDecl; i >= 0; --i) {
		if (System.String.Equals$0(this.nsdecls[i].uri, uri)) {
			var prefix = this.nsdecls[i].prefix;
			if (System.String.Equals$0(this.LookupNamespace(prefix), uri)) {
				return prefix;
			}
		}
	}
	return null;
};
System.Xml.XmlNamespaceManager.prototype.HasNamespace = function (prefix) {
__loop0__: 
	for (var num = this.lastDecl; this.nsdecls[num].scopeId === this.scopeId; --num) {
		if (!(!System.String.Equals$0(this.nsdecls[num].prefix, prefix) || (this.nsdecls[num].uri === null))) {
			return !((prefix.length <= 0) && (this.nsdecls[num].uri.length <= 0));
		}
	}
	return false;
};
JSIL.MakeProperty(System.Xml.XmlNamespaceManager.prototype, "NameTable", 
	System.Xml.XmlNamespaceManager.prototype.get_NameTable, null);
JSIL.MakeProperty(System.Xml.XmlNamespaceManager.prototype, "DefaultNamespace", 
	System.Xml.XmlNamespaceManager.prototype.get_DefaultNamespace, null);
Object.defineProperty(System.Xml.XmlNamespaceManager, "MinDeclsCountForHashtable", {
		"value": 16}
);
System.Xml.XmlNamespaceManager.prototype.nsdecls = null;
System.Xml.XmlNamespaceManager.prototype.lastDecl = 0;
System.Xml.XmlNamespaceManager.prototype.nameTable = null;
System.Xml.XmlNamespaceManager.prototype.scopeId = 0;
System.Xml.XmlNamespaceManager.prototype.hashTable = null;
System.Xml.XmlNamespaceManager.prototype.useHashtable = false;
System.Xml.XmlNamespaceManager.prototype.xml = null;
System.Xml.XmlNamespaceManager.prototype.xmlNs = null;

$asm07.System.Xml.XmlNamespaceManager.NamespaceDeclaration.prototype.Set = function (prefix, uri, scopeId, previousNsIndex) {
	this.prefix = prefix;
	this.uri = uri;
	this.scopeId = scopeId;
	this.previousNsIndex = previousNsIndex;
};
$asm07.System.Xml.XmlNamespaceManager.NamespaceDeclaration.prototype.prefix = null;
$asm07.System.Xml.XmlNamespaceManager.NamespaceDeclaration.prototype.uri = null;
$asm07.System.Xml.XmlNamespaceManager.NamespaceDeclaration.prototype.scopeId = 0;
$asm07.System.Xml.XmlNamespaceManager.NamespaceDeclaration.prototype.previousNsIndex = 0;

System.Xml.XmlQualifiedName.prototype._ctor$0 = function () {
	this._ctor$2(System.String.Empty, System.String.Empty);
};
System.Xml.XmlQualifiedName.prototype._ctor$1 = function (name) {
	this._ctor$2(name, System.String.Empty);
};
System.Xml.XmlQualifiedName.prototype._ctor$2 = function (name, ns) {
	System.Object.prototype._ctor.call(this);
	this.ns = (ns === null) ? System.String.Empty : ns;
	this.name = (name === null) ? System.String.Empty : name;
};
System.Xml.XmlQualifiedName.prototype.get_Namespace = function () {
	return this.ns;
};
System.Xml.XmlQualifiedName.prototype.get_Name = function () {
	return this.name;
};
System.Xml.XmlQualifiedName.prototype.GetHashCode = function () {
	if (this.hash === 0) {
		this.hash = this.Name.GetHashCode();
	}
	return this.hash;
};
System.Xml.XmlQualifiedName.prototype.get_IsEmpty = function () {
	return ((this.Name.length === 0) && (this.Namespace.length === 0));
};
System.Xml.XmlQualifiedName.prototype.toString = function () {
	if (this.Namespace.length !== 0) {
		return (this.Namespace + ":" + this.Name);
	}
	return this.Name;
};
System.Xml.XmlQualifiedName.prototype.Equals = function (other) {
	if (this === JSIL.Cast(other, System.Xml.XmlQualifiedName)) {
		return true;
	}
	var xmlQualifiedName = JSIL.TryCast(other, System.Xml.XmlQualifiedName);
	return (System.Xml.XmlQualifiedName.op_Inequality(xmlQualifiedName, null) && 
		(this.Name == xmlQualifiedName.Name) && (this.Namespace == xmlQualifiedName.Namespace));
};
System.Xml.XmlQualifiedName.op_Equality = function (a, b) {
	return ((a === b) || ((a !== null) && 
			b && 
			(a.Name == b.Name) && 
			(a.Namespace == b.Namespace)));
};
System.Xml.XmlQualifiedName.op_Inequality = function (a, b) {
	return !System.Xml.XmlQualifiedName.op_Equality(a, b);
};
System.Xml.XmlQualifiedName.ToString = function (name, ns) {
	if (!((ns === null) || (ns.length === 0))) {
		return (ns + ":" + name);
	}
	return name;
};
JSIL.OverloadedMethod(System.Xml.XmlQualifiedName.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.String]], 
		["_ctor$2", [System.String, System.String]]
	]);
JSIL.MakeProperty(System.Xml.XmlQualifiedName.prototype, "Namespace", 
	System.Xml.XmlQualifiedName.prototype.get_Namespace, null);
JSIL.MakeProperty(System.Xml.XmlQualifiedName.prototype, "Name", 
	System.Xml.XmlQualifiedName.prototype.get_Name, null);
JSIL.MakeProperty(System.Xml.XmlQualifiedName.prototype, "IsEmpty", 
	System.Xml.XmlQualifiedName.prototype.get_IsEmpty, null);
System.Xml.XmlQualifiedName.prototype.name = null;
System.Xml.XmlQualifiedName.prototype.ns = null;
System.Xml.XmlQualifiedName.prototype.hash = 0;
System.Xml.XmlQualifiedName.Empty = null;
System.Xml.XmlQualifiedName._cctor = function () {
	System.Xml.XmlQualifiedName.Empty = JSIL.New(System.Xml.XmlQualifiedName, "_ctor$1", [System.String.Empty]);
};

Object.defineProperty($asm07.System.Xml.XmlReservedNs, "NsXml", {
		"value": "http://www.w3.org/XML/1998/namespace"}
);
Object.defineProperty($asm07.System.Xml.XmlReservedNs, "NsXmlNs", {
		"value": "http://www.w3.org/2000/xmlns/"}
);

System.Xml.XmlResolver.prototype.ResolveUri = function (baseUri, relativeUri) {
	if (!(!System.Uri.op_Equality(baseUri, null) && (baseUri.IsAbsoluteUri || 
				(baseUri.OriginalString.length !== 0)))) {
		return JSIL.New(System.Uri, "_ctor$1", [relativeUri, System.UriKind.RelativeOrAbsolute]);
	}
	if (!((relativeUri !== null) && (relativeUri.length !== 0))) {
		return baseUri;
	}
	if (!baseUri.IsAbsoluteUri) {
		var uri = JSIL.New(System.Uri, "_ctor$0", ["tmp:///"]);
		var baseUri2 = JSIL.New(System.Uri, "_ctor$2", [uri, baseUri.OriginalString]);
		var uri2 = JSIL.New(System.Uri, "_ctor$2", [baseUri2, relativeUri]);
		return uri.MakeRelativeUri(uri2);
	}
	return JSIL.New(System.Uri, "_ctor$2", [baseUri, relativeUri]);
};
System.Xml.XmlResolver.prototype.SupportsType = function (absoluteUri, type) {
	if (System.Uri.op_Equality(absoluteUri, null)) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["absoluteUri"]);
	}
	return !((type !== null) && (type !== System.IO.Stream));
};
System.Xml.XmlResolver.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};

$asm07.System.Xml.CharEntityEncoderFallback.prototype._ctor = function () {
	System.Text.EncoderFallback.prototype._ctor.call(this);
};
$asm07.System.Xml.CharEntityEncoderFallback.prototype.CreateFallbackBuffer = function () {
	if (this.fallbackBuffer === null) {
		this.fallbackBuffer = new $asm07.System.Xml.CharEntityEncoderFallbackBuffer(this);
	}
	return this.fallbackBuffer;
};
$asm07.System.Xml.CharEntityEncoderFallback.prototype.get_MaxCharCount = function () {
	return 12;
};
$asm07.System.Xml.CharEntityEncoderFallback.prototype.get_StartOffset = function () {
	return this.startOffset;
};
$asm07.System.Xml.CharEntityEncoderFallback.prototype.set_StartOffset = function (value) {
	this.startOffset = value;
};
$asm07.System.Xml.CharEntityEncoderFallback.prototype.Reset = function (textContentMarks, endMarkPos) {
	this.textContentMarks = textContentMarks;
	this.endMarkPos = endMarkPos;
	this.curMarkPos = 0;
};
$asm07.System.Xml.CharEntityEncoderFallback.prototype.CanReplaceAt = function (index) {
	var num = this.curMarkPos;
	var num2 = (this.startOffset + index);
__loop0__: 
	while ((num < this.endMarkPos) && (num2 >= this.textContentMarks[(num + 1)])) {
		++num;
	}
	this.curMarkPos = num;
	return ((num & 1) !== 0);
};
JSIL.MakeProperty($asm07.System.Xml.CharEntityEncoderFallback.prototype, "MaxCharCount", 
	$asm07.System.Xml.CharEntityEncoderFallback.prototype.get_MaxCharCount, null);
JSIL.MakeProperty($asm07.System.Xml.CharEntityEncoderFallback.prototype, "StartOffset", 
	$asm07.System.Xml.CharEntityEncoderFallback.prototype.get_StartOffset, $asm07.System.Xml.CharEntityEncoderFallback.prototype.set_StartOffset);
$asm07.System.Xml.CharEntityEncoderFallback.prototype.fallbackBuffer = null;
$asm07.System.Xml.CharEntityEncoderFallback.prototype.textContentMarks = null;
$asm07.System.Xml.CharEntityEncoderFallback.prototype.endMarkPos = 0;
$asm07.System.Xml.CharEntityEncoderFallback.prototype.curMarkPos = 0;
$asm07.System.Xml.CharEntityEncoderFallback.prototype.startOffset = 0;

$asm07.System.Xml.CharEntityEncoderFallbackBuffer.prototype._ctor = function (parent) {
	this.charEntity = System.String.Empty;
	this.charEntityIndex = -1;
	System.Text.EncoderFallbackBuffer.prototype._ctor.call(this);
	this.parent = parent;
};
$asm07.System.Xml.CharEntityEncoderFallbackBuffer.prototype.Fallback$0 = function (charUnknown, index) {
	if (this.charEntityIndex >= 0) {
		new System.Text.EncoderExceptionFallback().CreateFallbackBuffer().Fallback$0(charUnknown, index);
	}
	if (this.parent.CanReplaceAt(index)) {
		this.charEntity = System.String.Format(System.Globalization.CultureInfo.InvariantCulture, "&#x{0:X};", [charUnknown.charCodeAt(0)]);
		this.charEntityIndex = 0;
		return true;
	}
	var encoderFallbackBuffer = new System.Text.EncoderExceptionFallback().CreateFallbackBuffer();
	encoderFallbackBuffer.Fallback$0(charUnknown, index);
	return false;
};
$asm07.System.Xml.CharEntityEncoderFallbackBuffer.prototype.Fallback$1 = function (charUnknownHigh, charUnknownLow, index) {
	if (!System.Char.IsSurrogatePair$1(charUnknownHigh, charUnknownLow)) {
		throw System.Xml.XmlConvert.CreateInvalidSurrogatePairException$0(charUnknownHigh, charUnknownLow);
	}
	if (this.charEntityIndex >= 0) {
		new System.Text.EncoderExceptionFallback().CreateFallbackBuffer().Fallback$1(charUnknownHigh, charUnknownLow, index);
	}
	if (this.parent.CanReplaceAt(index)) {
		this.charEntity = System.String.Format(System.Globalization.CultureInfo.InvariantCulture, "&#x{0:X};", [this.SurrogateCharToUtf32(charUnknownHigh, charUnknownLow)]);
		this.charEntityIndex = 0;
		return true;
	}
	var encoderFallbackBuffer = new System.Text.EncoderExceptionFallback().CreateFallbackBuffer();
	encoderFallbackBuffer.Fallback$1(charUnknownHigh, charUnknownLow, index);
	return false;
};
$asm07.System.Xml.CharEntityEncoderFallbackBuffer.prototype.GetNextChar = function () {
	if (this.charEntityIndex === -1) {
		return "\0";
	}
	var result = (this.charEntity[this.charEntityIndex++]);
	if (this.charEntityIndex === this.charEntity.length) {
		this.charEntityIndex = -1;
	}
	return result;
};
$asm07.System.Xml.CharEntityEncoderFallbackBuffer.prototype.MovePrevious = function () {
	if (this.charEntityIndex === -1) {
		return false;
	}
	if (this.charEntityIndex > 0) {
		--this.charEntityIndex;
		return true;
	}
	return false;
};
$asm07.System.Xml.CharEntityEncoderFallbackBuffer.prototype.get_Remaining = function () {
	if (this.charEntityIndex === -1) {
		return 0;
	}
	return (this.charEntity.length - this.charEntityIndex);
};
$asm07.System.Xml.CharEntityEncoderFallbackBuffer.prototype.Reset = function () {
	this.charEntityIndex = -1;
};
$asm07.System.Xml.CharEntityEncoderFallbackBuffer.prototype.SurrogateCharToUtf32 = function (highSurrogate, lowSurrogate) {
	return $asm07.System.Xml.XmlCharType.CombineSurrogateChar(lowSurrogate.charCodeAt(0), highSurrogate.charCodeAt(0));
};
JSIL.OverloadedMethod($asm07.System.Xml.CharEntityEncoderFallbackBuffer.prototype, "Fallback", [
		["Fallback$0", [System.Char, System.Int32]], 
		["Fallback$1", [System.Char, System.Char, System.Int32]]
	]);
JSIL.MakeProperty($asm07.System.Xml.CharEntityEncoderFallbackBuffer.prototype, "Remaining", 
	$asm07.System.Xml.CharEntityEncoderFallbackBuffer.prototype.get_Remaining, null);
$asm07.System.Xml.CharEntityEncoderFallbackBuffer.prototype.parent = null;
$asm07.System.Xml.CharEntityEncoderFallbackBuffer.prototype.charEntity = null;
$asm07.System.Xml.CharEntityEncoderFallbackBuffer.prototype.charEntityIndex = 0;

$asm07.System.Xml.ReadContentAsBinaryHelper.prototype._ctor = function (reader) {
	System.Object.prototype._ctor.call(this);
	this.reader = reader;
	this.canReadValueChunk = reader.CanReadValueChunk;
	if (this.canReadValueChunk) {
		this.valueChunk = JSIL.Array.New(System.Char, 256);
	}
};
$asm07.System.Xml.ReadContentAsBinaryHelper.CreateOrReset = function (helper, reader) {
	if (helper === null) {
		return new $asm07.System.Xml.ReadContentAsBinaryHelper(reader);
	}
	helper.Reset();
	return helper;
};
$asm07.System.Xml.ReadContentAsBinaryHelper.prototype.ReadContentAsBase64 = function (buffer, index, count) {
	if (buffer === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["buffer"]);
	}
	if (count < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["count"]);
	}
	if (index < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["index"]);
	}
	if ((buffer.length - index) < count) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["count"]);
	}
	switch (Number(this.state)) {
		case 0: 
			if (!this.reader.CanReadContentAs()) {
				throw this.reader.CreateReadContentAsException("ReadContentAsBase64");
			}
			if (!this.Init()) {
				return 0;
			}
			break;
		case 1: 
			if (this.decoder === this.base64Decoder) {
				return this.ReadContentAsBinary(buffer, index, count);
			}
			break;
		case 2: 
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_MixingBinaryContentMethods")]);
		default: 
			return 0;
	}
	this.InitBase64Decoder();
	return this.ReadContentAsBinary(buffer, index, count);
};
$asm07.System.Xml.ReadContentAsBinaryHelper.prototype.ReadContentAsBinHex = function (buffer, index, count) {
	if (buffer === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["buffer"]);
	}
	if (count < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["count"]);
	}
	if (index < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["index"]);
	}
	if ((buffer.length - index) < count) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["count"]);
	}
	switch (Number(this.state)) {
		case 0: 
			if (!this.reader.CanReadContentAs()) {
				throw this.reader.CreateReadContentAsException("ReadContentAsBinHex");
			}
			if (!this.Init()) {
				return 0;
			}
			break;
		case 1: 
			if (this.decoder === this.binHexDecoder) {
				return this.ReadContentAsBinary(buffer, index, count);
			}
			break;
		case 2: 
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_MixingBinaryContentMethods")]);
		default: 
			return 0;
	}
	this.InitBinHexDecoder();
	return this.ReadContentAsBinary(buffer, index, count);
};
$asm07.System.Xml.ReadContentAsBinaryHelper.prototype.ReadElementContentAsBase64 = function (buffer, index, count) {
	if (buffer === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["buffer"]);
	}
	if (count < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["count"]);
	}
	if (index < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["index"]);
	}
	if ((buffer.length - index) < count) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["count"]);
	}
	switch (Number(this.state)) {
		case 0: 
			if (this.reader.NodeType !== System.Xml.XmlNodeType.Element) {
				throw this.reader.CreateReadElementContentAsException("ReadElementContentAsBase64");
			}
			if (!this.InitOnElement()) {
				return 0;
			}
			break;
		case 1: 
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_MixingBinaryContentMethods")]);
		case 2: 
			if (this.decoder === this.base64Decoder) {
				return this.ReadElementContentAsBinary(buffer, index, count);
			}
			break;
		default: 
			return 0;
	}
	this.InitBase64Decoder();
	return this.ReadElementContentAsBinary(buffer, index, count);
};
$asm07.System.Xml.ReadContentAsBinaryHelper.prototype.ReadElementContentAsBinHex = function (buffer, index, count) {
	if (buffer === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["buffer"]);
	}
	if (count < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["count"]);
	}
	if (index < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["index"]);
	}
	if ((buffer.length - index) < count) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["count"]);
	}
	switch (Number(this.state)) {
		case 0: 
			if (this.reader.NodeType !== System.Xml.XmlNodeType.Element) {
				throw this.reader.CreateReadElementContentAsException("ReadElementContentAsBinHex");
			}
			if (!this.InitOnElement()) {
				return 0;
			}
			break;
		case 1: 
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_MixingBinaryContentMethods")]);
		case 2: 
			if (this.decoder === this.binHexDecoder) {
				return this.ReadElementContentAsBinary(buffer, index, count);
			}
			break;
		default: 
			return 0;
	}
	this.InitBinHexDecoder();
	return this.ReadElementContentAsBinary(buffer, index, count);
};
$asm07.System.Xml.ReadContentAsBinaryHelper.prototype.Finish = function () {
	if (this.state !== 0) {
	__loop0__: 
		while (this.MoveToNextContentNode(true)) {
		}
		if (this.state === $asm07.System.Xml.ReadContentAsBinaryHelper.State.InReadElementContent) {
			if (this.reader.NodeType !== System.Xml.XmlNodeType.EndElement) {
				throw JSIL.New(System.Xml.XmlException, "_ctor$9", ["Xml_InvalidNodeType", this.reader.NodeType.toString(), JSIL.TryCast(this.reader, System.Xml.IXmlLineInfo)]);
			}
			this.reader.Read();
		}
	}
	this.Reset();
};
$asm07.System.Xml.ReadContentAsBinaryHelper.prototype.Reset = function () {
	this.state = $asm07.System.Xml.ReadContentAsBinaryHelper.State.None;
	this.isEnd = false;
	this.valueOffset = 0;
};
$asm07.System.Xml.ReadContentAsBinaryHelper.prototype.Init = function () {
	if (!this.MoveToNextContentNode(false)) {
		return false;
	}
	this.state = $asm07.System.Xml.ReadContentAsBinaryHelper.State.InReadContent;
	this.isEnd = false;
	return true;
};
$asm07.System.Xml.ReadContentAsBinaryHelper.prototype.InitOnElement = function () {
	var isEmptyElement = this.reader.IsEmptyElement;
	this.reader.Read();
	if (isEmptyElement) {
		return false;
	}
	if (this.MoveToNextContentNode(false)) {
		this.state = $asm07.System.Xml.ReadContentAsBinaryHelper.State.InReadElementContent;
		this.isEnd = false;
		return true;
	}
	if (this.reader.NodeType !== System.Xml.XmlNodeType.EndElement) {
		throw JSIL.New(System.Xml.XmlException, "_ctor$9", ["Xml_InvalidNodeType", this.reader.NodeType.toString(), JSIL.TryCast(this.reader, System.Xml.IXmlLineInfo)]);
	}
	this.reader.Read();
	return false;
};
$asm07.System.Xml.ReadContentAsBinaryHelper.prototype.InitBase64Decoder = function () {
	if (this.base64Decoder === null) {
		this.base64Decoder = new $asm07.System.Xml.Base64Decoder();
	} else {
		this.base64Decoder.Reset();
	}
	this.decoder = this.base64Decoder;
};
$asm07.System.Xml.ReadContentAsBinaryHelper.prototype.InitBinHexDecoder = function () {
	if (this.binHexDecoder === null) {
		this.binHexDecoder = new $asm07.System.Xml.BinHexDecoder();
	} else {
		this.binHexDecoder.Reset();
	}
	this.decoder = this.binHexDecoder;
};
$asm07.System.Xml.ReadContentAsBinaryHelper.prototype.ReadContentAsBinary = function (buffer, index, count) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				if (this.isEnd) {
					this.Reset();
					return 0;
				}
				this.decoder.SetNextOutputBuffer(buffer, index, count);
			__loop0__: 
				while (true) {
					if (this.canReadValueChunk) {
					__loop1__: 
						while (true) {
							if (this.valueOffset < this.valueChunkLength) {
								var num = this.decoder.Decode$0(this.valueChunk, this.valueOffset, (this.valueChunkLength - this.valueOffset));
								this.valueOffset += num;
							}
							if (this.decoder.IsFull) {
								__label0__ = "Block_3";
								continue __step0__;
							}
							if ((this.valueChunkLength = this.reader.ReadValueChunk(this.valueChunk, 0, 256)) === 0) {
								break __loop1__;
							}
							this.valueOffset = 0;
						}
					} else {
						var value = this.reader.Value;
						var num2 = this.decoder.Decode$1(value, this.valueOffset, (value.length - this.valueOffset));
						this.valueOffset += num2;
						if (this.decoder.IsFull) {
							__label0__ = "Block_5";
							continue __step0__;
						}
					}
					this.valueOffset = 0;
					if (!this.MoveToNextContentNode(true)) {
						__label0__ = "Block_6";
						continue __step0__;
					}
				}
				__label0__ = "Block_3";
				continue __step0__;
				break;
			case "Block_3":
				return this.decoder.DecodedCount;
				__label0__ = "Block_5";
				continue __step0__;
				break;
			case "Block_5":
				return this.decoder.DecodedCount;
				__label0__ = "Block_6";
				continue __step0__;
				break;
			case "Block_6":
				this.isEnd = true;
				return this.decoder.DecodedCount;
				break __step0__;
		}
	}
};
$asm07.System.Xml.ReadContentAsBinaryHelper.prototype.ReadElementContentAsBinary = function (buffer, index, count) {
	if (count === 0) {
		return 0;
	}
	var num = this.ReadContentAsBinary(buffer, index, count);
	if (num > 0) {
		return num;
	}
	if (this.reader.NodeType !== System.Xml.XmlNodeType.EndElement) {
		throw JSIL.New(System.Xml.XmlException, "_ctor$9", ["Xml_InvalidNodeType", this.reader.NodeType.toString(), JSIL.TryCast(this.reader, System.Xml.IXmlLineInfo)]);
	}
	this.reader.Read();
	this.state = $asm07.System.Xml.ReadContentAsBinaryHelper.State.None;
	return 0;
};
$asm07.System.Xml.ReadContentAsBinaryHelper.prototype.MoveToNextContentNode = function (moveIfOnContentNode) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
			__loop0__: 
				while (true) {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								switch (Number(this.reader.NodeType)) {
									case 2: 
										__label0__ = "IL_52";
										continue __step0__;
									case 3: 
									case 4: 
									case 13: 
									case 14: 
										if (!moveIfOnContentNode) {
											return true;
										}
										__label1__ = "IL_78";
										continue __step1__;
									case 5: 
										if (this.reader.CanResolveEntity) {
											this.reader.ResolveEntity();
											__label1__ = "IL_78";
											continue __step1__;
										}
										break;
									case 7: 
									case 8: 
									case 16: 
										__label1__ = "IL_78";
										continue __step1__;
								}
								break __loop0__;
								__label1__ = "IL_78";
								continue __step1__;
								break;
							case "IL_78":
								moveIfOnContentNode = false;
								if (!this.reader.Read()) {
									return false;
								}
								break __step1__;
						}
					}
				}
				return false;
				__label0__ = "IL_52";
				continue __step0__;
				break;
			case "IL_52":
				return !moveIfOnContentNode;
				break __step0__;
		}
	}
};
Object.defineProperty($asm07.System.Xml.ReadContentAsBinaryHelper, "ChunkSize", {
		"value": 256}
);
$asm07.System.Xml.ReadContentAsBinaryHelper.prototype.reader = null;
$asm07.System.Xml.ReadContentAsBinaryHelper.prototype.state = 0;
$asm07.System.Xml.ReadContentAsBinaryHelper.prototype.valueOffset = 0;
$asm07.System.Xml.ReadContentAsBinaryHelper.prototype.isEnd = false;
$asm07.System.Xml.ReadContentAsBinaryHelper.prototype.canReadValueChunk = false;
$asm07.System.Xml.ReadContentAsBinaryHelper.prototype.valueChunk = null;
$asm07.System.Xml.ReadContentAsBinaryHelper.prototype.valueChunkLength = 0;
$asm07.System.Xml.ReadContentAsBinaryHelper.prototype.decoder = null;
$asm07.System.Xml.ReadContentAsBinaryHelper.prototype.base64Decoder = null;
$asm07.System.Xml.ReadContentAsBinaryHelper.prototype.binHexDecoder = null;

$asm07.System.Xml.SecureStringHasher.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
	this.hashCodeRandomizer = System.Environment.TickCount;
};
$asm07.System.Xml.SecureStringHasher.prototype.Equals = function (x, y) {
	return System.String.Equals$1(x, y, System.StringComparison.Ordinal);
};
$asm07.System.Xml.SecureStringHasher.prototype.GetHashCode = function (key) {
	var num = this.hashCodeRandomizer;
__loop0__: 
	for (var i = 0; i < key.length; ++i) {
		num += ((num << 7) ^ key[i].charCodeAt(0));
	}
	num -= (num >> 17);
	num -= (num >> 11);
	num -= (num >> 5);
	return num;
};
$asm07.System.Xml.SecureStringHasher.prototype.hashCodeRandomizer = 0;

System.Xml.XmlReader.prototype.get_Settings = function () {
	return null;
};
System.Xml.XmlReader.prototype.get_Name = function () {
	if (this.Prefix.length === 0) {
		return this.LocalName;
	}
	return this.NameTable.Add$1((this.Prefix + ":" + this.LocalName));
};
System.Xml.XmlReader.prototype.get_HasValue = function () {
	return System.Xml.XmlReader.HasValueInternal(this.NodeType);
};
System.Xml.XmlReader.prototype.get_IsDefault = function () {
	return false;
};
System.Xml.XmlReader.prototype.get_XmlSpace = function () {
	return System.Xml.XmlSpace.None;
};
System.Xml.XmlReader.prototype.get_XmlLang = function () {
	return System.String.Empty;
};
System.Xml.XmlReader.prototype.get_ValueType = function () {
	return System.String;
};
System.Xml.XmlReader.prototype.ReadContentAsObject = function () {
	if (!this.CanReadContentAs()) {
		throw this.CreateReadContentAsException("ReadContentAsObject");
	}
	return this.InternalReadContentAsString();
};
System.Xml.XmlReader.prototype.ReadContentAsBoolean = function () {
	if (!this.CanReadContentAs()) {
		throw this.CreateReadContentAsException("ReadContentAsBoolean");
	}
	try {
		var result = System.Xml.XmlConvert.ToBoolean(this.InternalReadContentAsString());
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.FormatException)) {
			var arg_22_0 = $exception;
			throw JSIL.New(System.Xml.XmlException, "_ctor$10", ["Xml_ReadContentAsFormatException", "Boolean", arg_22_0, JSIL.TryCast(this, System.Xml.IXmlLineInfo)]);
		} else {
			throw $exception;
		}
	}
	return result;
};
System.Xml.XmlReader.prototype.ReadContentAsDateTime = function () {
	if (!this.CanReadContentAs()) {
		throw this.CreateReadContentAsException("ReadContentAsDateTime");
	}
	try {
		var result = System.Xml.XmlConvert.ToDateTime$2(this.InternalReadContentAsString(), System.Xml.XmlDateTimeSerializationMode.RoundtripKind).MemberwiseClone();
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.FormatException)) {
			var arg_23_0 = $exception;
			throw JSIL.New(System.Xml.XmlException, "_ctor$10", ["Xml_ReadContentAsFormatException", "DateTime", arg_23_0, JSIL.TryCast(this, System.Xml.IXmlLineInfo)]);
		} else {
			throw $exception;
		}
	}
	return result;
};
System.Xml.XmlReader.prototype.ReadContentAsDouble = function () {
	if (!this.CanReadContentAs()) {
		throw this.CreateReadContentAsException("ReadContentAsDouble");
	}
	try {
		var result = System.Xml.XmlConvert.ToDouble(this.InternalReadContentAsString());
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.FormatException)) {
			var arg_22_0 = $exception;
			throw JSIL.New(System.Xml.XmlException, "_ctor$10", ["Xml_ReadContentAsFormatException", "Double", arg_22_0, JSIL.TryCast(this, System.Xml.IXmlLineInfo)]);
		} else {
			throw $exception;
		}
	}
	return result;
};
System.Xml.XmlReader.prototype.ReadContentAsFloat = function () {
	if (!this.CanReadContentAs()) {
		throw this.CreateReadContentAsException("ReadContentAsFloat");
	}
	try {
		var result = System.Xml.XmlConvert.ToSingle(this.InternalReadContentAsString());
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.FormatException)) {
			var arg_22_0 = $exception;
			throw JSIL.New(System.Xml.XmlException, "_ctor$10", ["Xml_ReadContentAsFormatException", "Float", arg_22_0, JSIL.TryCast(this, System.Xml.IXmlLineInfo)]);
		} else {
			throw $exception;
		}
	}
	return result;
};
System.Xml.XmlReader.prototype.ReadContentAsDecimal = function () {
	if (!this.CanReadContentAs()) {
		throw this.CreateReadContentAsException("ReadContentAsDecimal");
	}
	try {
		var result = System.Xml.XmlConvert.ToDecimal(this.InternalReadContentAsString()).MemberwiseClone();
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.FormatException)) {
			var arg_22_0 = $exception;
			throw JSIL.New(System.Xml.XmlException, "_ctor$10", ["Xml_ReadContentAsFormatException", "Decimal", arg_22_0, JSIL.TryCast(this, System.Xml.IXmlLineInfo)]);
		} else {
			throw $exception;
		}
	}
	return result;
};
System.Xml.XmlReader.prototype.ReadContentAsInt = function () {
	if (!this.CanReadContentAs()) {
		throw this.CreateReadContentAsException("ReadContentAsInt");
	}
	try {
		var result = System.Xml.XmlConvert.ToInt32(this.InternalReadContentAsString());
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.FormatException)) {
			var arg_22_0 = $exception;
			throw JSIL.New(System.Xml.XmlException, "_ctor$10", ["Xml_ReadContentAsFormatException", "Int", arg_22_0, JSIL.TryCast(this, System.Xml.IXmlLineInfo)]);
		} else {
			throw $exception;
		}
	}
	return result;
};
System.Xml.XmlReader.prototype.ReadContentAsLong = function () {
	if (!this.CanReadContentAs()) {
		throw this.CreateReadContentAsException("ReadContentAsLong");
	}
	try {
		var result = System.Xml.XmlConvert.ToInt64(this.InternalReadContentAsString());
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.FormatException)) {
			var arg_22_0 = $exception;
			throw JSIL.New(System.Xml.XmlException, "_ctor$10", ["Xml_ReadContentAsFormatException", "Long", arg_22_0, JSIL.TryCast(this, System.Xml.IXmlLineInfo)]);
		} else {
			throw $exception;
		}
	}
	return result;
};
System.Xml.XmlReader.prototype.ReadContentAsString = function () {
	if (!this.CanReadContentAs()) {
		throw this.CreateReadContentAsException("ReadContentAsString");
	}
	return this.InternalReadContentAsString();
};
System.Xml.XmlReader.prototype.ReadContentAs = function (returnType, namespaceResolver) {
	if (!this.CanReadContentAs()) {
		throw this.CreateReadContentAsException("ReadContentAs");
	}
	var text = this.InternalReadContentAsString();
	if (returnType === System.String) {
		return text;
	}
	try {
		var result = $asm07.System.Xml.Schema.XmlUntypedStringConverter.Instance.FromString(text, returnType, (namespaceResolver === null) ? JSIL.TryCast(this, System.Xml.IXmlNamespaceResolver) : namespaceResolver);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.FormatException)) {
			var arg_45_0 = $exception;
			throw JSIL.New(System.Xml.XmlException, "_ctor$10", ["Xml_ReadContentAsFormatException", returnType.toString(), arg_45_0, JSIL.TryCast(this, System.Xml.IXmlLineInfo)]);
		} else if (JSIL.CheckType($exception, System.InvalidCastException)) {
			var arg_5E_0 = $exception;
			throw JSIL.New(System.Xml.XmlException, "_ctor$10", ["Xml_ReadContentAsFormatException", returnType.toString(), arg_5E_0, JSIL.TryCast(this, System.Xml.IXmlLineInfo)]);
		} else {
			throw $exception;
		}
	}
	return result;
};
System.Xml.XmlReader.prototype.ReadElementContentAsObject$0 = function () {
	if (this.SetupReadElementContentAsXxx("ReadElementContentAsObject")) {
		var result = this.ReadContentAsObject();
		this.FinishReadElementContentAsXxx();
		return result;
	}
	return System.String.Empty;
};
System.Xml.XmlReader.prototype.ReadElementContentAsObject$1 = function (localName, namespaceURI) {
	this.CheckElement(localName, namespaceURI);
	return this.ReadElementContentAsObject$0();
};
System.Xml.XmlReader.prototype.ReadElementContentAsBoolean$0 = function () {
	if (this.SetupReadElementContentAsXxx("ReadElementContentAsBoolean")) {
		var result = this.ReadContentAsBoolean();
		this.FinishReadElementContentAsXxx();
		return result;
	}
	return System.Xml.XmlConvert.ToBoolean(System.String.Empty);
};
System.Xml.XmlReader.prototype.ReadElementContentAsBoolean$1 = function (localName, namespaceURI) {
	this.CheckElement(localName, namespaceURI);
	return this.ReadElementContentAsBoolean$0();
};
System.Xml.XmlReader.prototype.ReadElementContentAsDateTime$0 = function () {
	if (this.SetupReadElementContentAsXxx("ReadElementContentAsDateTime")) {
		var result = this.ReadContentAsDateTime().MemberwiseClone();
		this.FinishReadElementContentAsXxx();
		return result;
	}
	return System.Xml.XmlConvert.ToDateTime$2(System.String.Empty, System.Xml.XmlDateTimeSerializationMode.RoundtripKind);
};
System.Xml.XmlReader.prototype.ReadElementContentAsDateTime$1 = function (localName, namespaceURI) {
	this.CheckElement(localName, namespaceURI);
	return this.ReadElementContentAsDateTime$0();
};
System.Xml.XmlReader.prototype.ReadElementContentAsDouble$0 = function () {
	if (this.SetupReadElementContentAsXxx("ReadElementContentAsDouble")) {
		var result = this.ReadContentAsDouble();
		this.FinishReadElementContentAsXxx();
		return result;
	}
	return System.Xml.XmlConvert.ToDouble(System.String.Empty);
};
System.Xml.XmlReader.prototype.ReadElementContentAsDouble$1 = function (localName, namespaceURI) {
	this.CheckElement(localName, namespaceURI);
	return this.ReadElementContentAsDouble$0();
};
System.Xml.XmlReader.prototype.ReadElementContentAsFloat$0 = function () {
	if (this.SetupReadElementContentAsXxx("ReadElementContentAsFloat")) {
		var result = this.ReadContentAsFloat();
		this.FinishReadElementContentAsXxx();
		return result;
	}
	return System.Xml.XmlConvert.ToSingle(System.String.Empty);
};
System.Xml.XmlReader.prototype.ReadElementContentAsFloat$1 = function (localName, namespaceURI) {
	this.CheckElement(localName, namespaceURI);
	return this.ReadElementContentAsFloat$0();
};
System.Xml.XmlReader.prototype.ReadElementContentAsDecimal$0 = function () {
	if (this.SetupReadElementContentAsXxx("ReadElementContentAsDecimal")) {
		var result = this.ReadContentAsDecimal().MemberwiseClone();
		this.FinishReadElementContentAsXxx();
		return result;
	}
	return System.Xml.XmlConvert.ToDecimal(System.String.Empty);
};
System.Xml.XmlReader.prototype.ReadElementContentAsDecimal$1 = function (localName, namespaceURI) {
	this.CheckElement(localName, namespaceURI);
	return this.ReadElementContentAsDecimal$0();
};
System.Xml.XmlReader.prototype.ReadElementContentAsInt$0 = function () {
	if (this.SetupReadElementContentAsXxx("ReadElementContentAsInt")) {
		var result = this.ReadContentAsInt();
		this.FinishReadElementContentAsXxx();
		return result;
	}
	return System.Xml.XmlConvert.ToInt32(System.String.Empty);
};
System.Xml.XmlReader.prototype.ReadElementContentAsInt$1 = function (localName, namespaceURI) {
	this.CheckElement(localName, namespaceURI);
	return this.ReadElementContentAsInt$0();
};
System.Xml.XmlReader.prototype.ReadElementContentAsLong$0 = function () {
	if (this.SetupReadElementContentAsXxx("ReadElementContentAsLong")) {
		var result = this.ReadContentAsLong();
		this.FinishReadElementContentAsXxx();
		return result;
	}
	return System.Xml.XmlConvert.ToInt64(System.String.Empty);
};
System.Xml.XmlReader.prototype.ReadElementContentAsLong$1 = function (localName, namespaceURI) {
	this.CheckElement(localName, namespaceURI);
	return this.ReadElementContentAsLong$0();
};
System.Xml.XmlReader.prototype.ReadElementContentAsString$0 = function () {
	if (this.SetupReadElementContentAsXxx("ReadElementContentAsString")) {
		var result = this.ReadContentAsString();
		this.FinishReadElementContentAsXxx();
		return result;
	}
	return System.String.Empty;
};
System.Xml.XmlReader.prototype.ReadElementContentAsString$1 = function (localName, namespaceURI) {
	this.CheckElement(localName, namespaceURI);
	return this.ReadElementContentAsString$0();
};
System.Xml.XmlReader.prototype.ReadElementContentAs$0 = function (returnType, namespaceResolver) {
	if (this.SetupReadElementContentAsXxx("ReadElementContentAs")) {
		var result = this.ReadContentAs(returnType, namespaceResolver);
		this.FinishReadElementContentAsXxx();
		return result;
	}
	if (returnType !== System.String) {
		return $asm07.System.Xml.Schema.XmlUntypedStringConverter.Instance.FromString(System.String.Empty, returnType, namespaceResolver);
	}
	return System.String.Empty;
};
System.Xml.XmlReader.prototype.ReadElementContentAs$1 = function (returnType, namespaceResolver, localName, namespaceURI) {
	this.CheckElement(localName, namespaceURI);
	return this.ReadElementContentAs$0(returnType, namespaceResolver);
};
System.Xml.XmlReader.prototype.get_Item$0 = function (i) {
	return this.GetAttribute$2(i);
};
System.Xml.XmlReader.prototype.get_Item$1 = function (name) {
	return this.GetAttribute$0(name);
};
System.Xml.XmlReader.prototype.get_Item$2 = function (name, namespaceURI) {
	return this.GetAttribute$1(name, namespaceURI);
};
System.Xml.XmlReader.prototype.MoveToAttribute$2 = function (i) {
	if (!((i >= 0) && (i < this.AttributeCount))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["i"]);
	}
	this.MoveToElement();
	this.MoveToFirstAttribute();
__loop0__: 
	for (var j = 0; j < i; ++j) {
		this.MoveToNextAttribute();
	}
};
System.Xml.XmlReader.prototype.Close = function () {
};
System.Xml.XmlReader.prototype.Skip = function () {
	if (this.ReadState !== System.Xml.ReadState.Interactive) {
		return;
	}
	this.SkipSubtree();
};
System.Xml.XmlReader.prototype.get_CanResolveEntity = function () {
	return false;
};
System.Xml.XmlReader.prototype.get_CanReadBinaryContent = function () {
	return false;
};
System.Xml.XmlReader.prototype.ReadContentAsBase64 = function (buffer, index, count) {
	throw JSIL.New(System.NotSupportedException, "_ctor$1", [$asm07.System.Xml.Res.GetString$0("Xml_ReadBinaryContentNotSupported", ["ReadContentAsBase64"])]);
};
System.Xml.XmlReader.prototype.ReadElementContentAsBase64 = function (buffer, index, count) {
	throw JSIL.New(System.NotSupportedException, "_ctor$1", [$asm07.System.Xml.Res.GetString$0("Xml_ReadBinaryContentNotSupported", ["ReadElementContentAsBase64"])]);
};
System.Xml.XmlReader.prototype.ReadContentAsBinHex = function (buffer, index, count) {
	throw JSIL.New(System.NotSupportedException, "_ctor$1", [$asm07.System.Xml.Res.GetString$0("Xml_ReadBinaryContentNotSupported", ["ReadContentAsBinHex"])]);
};
System.Xml.XmlReader.prototype.ReadElementContentAsBinHex = function (buffer, index, count) {
	throw JSIL.New(System.NotSupportedException, "_ctor$1", [$asm07.System.Xml.Res.GetString$0("Xml_ReadBinaryContentNotSupported", ["ReadElementContentAsBinHex"])]);
};
System.Xml.XmlReader.prototype.get_CanReadValueChunk = function () {
	return false;
};
System.Xml.XmlReader.prototype.ReadValueChunk = function (buffer, index, count) {
	throw JSIL.New(System.NotSupportedException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_ReadValueChunkNotSupported")]);
};
System.Xml.XmlReader.prototype.MoveToContent = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
			__loop0__: 
				while (true) {
					var nodeType = this.NodeType;
					switch (Number(nodeType)) {
						case 1: 
						case 3: 
						case 4: 
						case 5: 
							__label0__ = "IL_3D";
							continue __step0__;
						case 2: 
							__label0__ = "IL_36";
							continue __step0__;
						default: 
							switch (Number(nodeType)) {
								case 15: 
								case 16: 
									__label0__ = "IL_3D";
									continue __step0__;
								default: 
									if (!this.Read()) {
										__label0__ = "Block_2";
										continue __step0__;
									}
									break;
							}
							break;
					}
				}
				__label0__ = "IL_36";
				continue __step0__;
				break;
			case "IL_36":
				this.MoveToElement();
				__label0__ = "IL_3D";
				continue __step0__;
				break;
			case "IL_3D":
				return this.NodeType;
				__label0__ = "Block_2";
				continue __step0__;
				break;
			case "Block_2":
				return this.NodeType;
				break __step0__;
		}
	}
};
System.Xml.XmlReader.prototype.ReadStartElement$0 = function () {
	if (this.MoveToContent() !== System.Xml.XmlNodeType.Element) {
		throw JSIL.New(System.Xml.XmlException, "_ctor$9", ["Xml_InvalidNodeType", this.NodeType.toString(), JSIL.TryCast(this, System.Xml.IXmlLineInfo)]);
	}
	this.Read();
};
System.Xml.XmlReader.prototype.ReadStartElement$1 = function (name) {
	if (this.MoveToContent() !== System.Xml.XmlNodeType.Element) {
		throw JSIL.New(System.Xml.XmlException, "_ctor$9", ["Xml_InvalidNodeType", this.NodeType.toString(), JSIL.TryCast(this, System.Xml.IXmlLineInfo)]);
	}
	if (this.Name == name) {
		this.Read();
		return;
	}
	throw JSIL.New(System.Xml.XmlException, "_ctor$9", ["Xml_ElementNotFound", name, JSIL.TryCast(this, System.Xml.IXmlLineInfo)]);
};
System.Xml.XmlReader.prototype.ReadStartElement$2 = function (localname, ns) {
	if (this.MoveToContent() !== System.Xml.XmlNodeType.Element) {
		throw JSIL.New(System.Xml.XmlException, "_ctor$9", ["Xml_InvalidNodeType", this.NodeType.toString(), JSIL.TryCast(this, System.Xml.IXmlLineInfo)]);
	}
	if (!(!(this.LocalName == localname) || !(this.NamespaceURI == ns))) {
		this.Read();
		return;
	}
	throw JSIL.New(System.Xml.XmlException, "_ctor$12", ["Xml_ElementNotFoundNs", JSIL.Array.New(System.String, [localname, ns]), JSIL.TryCast(this, System.Xml.IXmlLineInfo)]);
};
System.Xml.XmlReader.prototype.ReadEndElement = function () {
	if (this.MoveToContent() !== System.Xml.XmlNodeType.EndElement) {
		throw JSIL.New(System.Xml.XmlException, "_ctor$9", ["Xml_InvalidNodeType", this.NodeType.toString(), JSIL.TryCast(this, System.Xml.IXmlLineInfo)]);
	}
	this.Read();
};
System.Xml.XmlReader.prototype.IsStartElement$0 = function () {
	return (this.MoveToContent() === System.Xml.XmlNodeType.Element);
};
System.Xml.XmlReader.prototype.IsStartElement$1 = function (name) {
	return ((this.MoveToContent() === System.Xml.XmlNodeType.Element) && (this.Name == name));
};
System.Xml.XmlReader.prototype.IsStartElement$2 = function (localname, ns) {
	return ((this.MoveToContent() === System.Xml.XmlNodeType.Element) && 
		(this.LocalName == localname) && (this.NamespaceURI == ns));
};
System.Xml.XmlReader.prototype.ReadToFollowing$0 = function (name) {
	if (!((name !== null) && (name.length !== 0))) {
		throw System.Xml.XmlConvert.CreateInvalidNameArgumentException(name, "name");
	}
	name = this.NameTable.Add$1(name);
__loop0__: 
	while (this.Read()) {
		if (!((this.NodeType !== System.Xml.XmlNodeType.Element) || !$asm07.System.Xml.Ref.Equal(name, this.Name))) {
			return true;
		}
	}
	return false;
};
System.Xml.XmlReader.prototype.ReadToFollowing$1 = function (localName, namespaceURI) {
	if (!((localName !== null) && (localName.length !== 0))) {
		throw System.Xml.XmlConvert.CreateInvalidNameArgumentException(localName, "localName");
	}
	if (namespaceURI === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["namespaceURI"]);
	}
	localName = this.NameTable.Add$1(localName);
	namespaceURI = this.NameTable.Add$1(namespaceURI);
__loop0__: 
	while (this.Read()) {
		if (!((this.NodeType !== System.Xml.XmlNodeType.Element) || 
				!$asm07.System.Xml.Ref.Equal(localName, this.LocalName) || !$asm07.System.Xml.Ref.Equal(namespaceURI, this.NamespaceURI))) {
			return true;
		}
	}
	return false;
};
System.Xml.XmlReader.prototype.ReadToDescendant$0 = function (name) {
	if (!((name !== null) && (name.length !== 0))) {
		throw System.Xml.XmlConvert.CreateInvalidNameArgumentException(name, "name");
	}
	var num = this.Depth;
	if (this.NodeType !== System.Xml.XmlNodeType.Element) {
		if (JSIL.Cast(this.ReadState, System.Boolean)) {
			return false;
		}
		--num;
	} else if (this.IsEmptyElement) {
		return false;
	}
	name = this.NameTable.Add$1(name);
__loop0__: 
	while (this.Read() && (this.Depth > num)) {
		if (!((this.NodeType !== System.Xml.XmlNodeType.Element) || !$asm07.System.Xml.Ref.Equal(name, this.Name))) {
			return true;
		}
	}
	return false;
};
System.Xml.XmlReader.prototype.ReadToDescendant$1 = function (localName, namespaceURI) {
	if (!((localName !== null) && (localName.length !== 0))) {
		throw System.Xml.XmlConvert.CreateInvalidNameArgumentException(localName, "localName");
	}
	if (namespaceURI === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["namespaceURI"]);
	}
	var num = this.Depth;
	if (this.NodeType !== System.Xml.XmlNodeType.Element) {
		if (JSIL.Cast(this.ReadState, System.Boolean)) {
			return false;
		}
		--num;
	} else if (this.IsEmptyElement) {
		return false;
	}
	localName = this.NameTable.Add$1(localName);
	namespaceURI = this.NameTable.Add$1(namespaceURI);
__loop0__: 
	while (this.Read() && (this.Depth > num)) {
		if (!((this.NodeType !== System.Xml.XmlNodeType.Element) || 
				!$asm07.System.Xml.Ref.Equal(localName, this.LocalName) || !$asm07.System.Xml.Ref.Equal(namespaceURI, this.NamespaceURI))) {
			return true;
		}
	}
	return false;
};
System.Xml.XmlReader.prototype.ReadToNextSibling$0 = function (name) {
	if (!((name !== null) && (name.length !== 0))) {
		throw System.Xml.XmlConvert.CreateInvalidNameArgumentException(name, "name");
	}
	name = this.NameTable.Add$1(name);
__loop0__: 
	while (this.SkipSubtree()) {
		var nodeType = this.NodeType;
		if (!((nodeType !== System.Xml.XmlNodeType.Element) || !$asm07.System.Xml.Ref.Equal(name, this.Name))) {
			return true;
		}
		if (!((nodeType !== System.Xml.XmlNodeType.EndElement) && !this.EOF)) {
			break __loop0__;
		}
	}
	return false;
};
System.Xml.XmlReader.prototype.ReadToNextSibling$1 = function (localName, namespaceURI) {
	if (!((localName !== null) && (localName.length !== 0))) {
		throw System.Xml.XmlConvert.CreateInvalidNameArgumentException(localName, "localName");
	}
	if (namespaceURI === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["namespaceURI"]);
	}
	localName = this.NameTable.Add$1(localName);
	namespaceURI = this.NameTable.Add$1(namespaceURI);
__loop0__: 
	while (this.SkipSubtree()) {
		var nodeType = this.NodeType;
		if (!((nodeType !== System.Xml.XmlNodeType.Element) || 
				!$asm07.System.Xml.Ref.Equal(localName, this.LocalName) || !$asm07.System.Xml.Ref.Equal(namespaceURI, this.NamespaceURI))) {
			return true;
		}
		if (!((nodeType !== System.Xml.XmlNodeType.EndElement) && !this.EOF)) {
			break __loop0__;
		}
	}
	return false;
};
System.Xml.XmlReader.IsName = function (str) {
	if (str === null) {
		throw JSIL.New(System.NullReferenceException, "_ctor$0", []);
	}
	return $asm07.System.Xml.ValidateNames.IsNameNoNamespaces(str);
};
System.Xml.XmlReader.IsNameToken = function (str) {
	if (str === null) {
		throw JSIL.New(System.NullReferenceException, "_ctor$0", []);
	}
	return $asm07.System.Xml.ValidateNames.IsNmtokenNoNamespaces(str);
};
System.Xml.XmlReader.prototype.ReadInnerXml = function () {
	if (this.ReadState !== System.Xml.ReadState.Interactive) {
		return System.String.Empty;
	}
	if (!((this.NodeType === System.Xml.XmlNodeType.Attribute) || (this.NodeType === System.Xml.XmlNodeType.Element))) {
		this.Read();
		return System.String.Empty;
	}
	var stringWriter = JSIL.New(System.IO.StringWriter, "_ctor$1", [System.Globalization.CultureInfo.InvariantCulture]);
	var xmlWriter = this.CreateWriterForInnerOuterXml(stringWriter);
	try {
		if (this.NodeType === System.Xml.XmlNodeType.Attribute) {
			this.WriteAttributeValue(xmlWriter);
		}
		if (this.NodeType === System.Xml.XmlNodeType.Element) {
			this.WriteNode(xmlWriter, false);
		}
	} finally {
		xmlWriter.Close();
	}
	return stringWriter.toString();
};
System.Xml.XmlReader.prototype.WriteNode = function (xtw, defattr) {
__loop0__: 
	for (var num = !JSIL.Cast(this.NodeType, System.Boolean) ? -1 : this.Depth; this.Read() && (num < this.Depth); ) {
		switch (Number(this.NodeType)) {
			case 1: 
				xtw.WriteStartElement$1(this.Prefix, this.LocalName, this.NamespaceURI);
				xtw.WriteAttributes(this, defattr);
				if (this.IsEmptyElement) {
					xtw.WriteEndElement();
				}
				break;
			case 3: 
				xtw.WriteString(this.Value);
				break;
			case 4: 
				xtw.WriteCData(this.Value);
				break;
			case 5: 
				xtw.WriteEntityRef(this.Name);
				break;
			case 7: 
			case 17: 
				xtw.WriteProcessingInstruction(this.Name, this.Value);
				break;
			case 8: 
				xtw.WriteComment(this.Value);
				break;
			case 10: 
				xtw.WriteDocType(this.Name, this.GetAttribute$0("PUBLIC"), this.GetAttribute$0("SYSTEM"), this.Value);
				break;
			case 13: 
			case 14: 
				xtw.WriteWhitespace(this.Value);
				break;
			case 15: 
				xtw.WriteFullEndElement();
				break;
		}
	}
	if (!((num !== this.Depth) || (this.NodeType !== System.Xml.XmlNodeType.EndElement))) {
		this.Read();
	}
};
System.Xml.XmlReader.prototype.WriteAttributeValue = function (xtw) {
	var name = this.Name;
__loop0__: 
	while (this.ReadAttributeValue()) {
		if (this.NodeType === System.Xml.XmlNodeType.EntityReference) {
			xtw.WriteEntityRef(this.Name);
		} else {
			xtw.WriteString(this.Value);
		}
	}
	this.MoveToAttribute$0(name);
};
System.Xml.XmlReader.prototype.ReadOuterXml = function () {
	if (this.ReadState !== System.Xml.ReadState.Interactive) {
		return System.String.Empty;
	}
	if (!((this.NodeType === System.Xml.XmlNodeType.Attribute) || (this.NodeType === System.Xml.XmlNodeType.Element))) {
		this.Read();
		return System.String.Empty;
	}
	var stringWriter = JSIL.New(System.IO.StringWriter, "_ctor$1", [System.Globalization.CultureInfo.InvariantCulture]);
	var xmlWriter = this.CreateWriterForInnerOuterXml(stringWriter);
	try {
		if (this.NodeType === System.Xml.XmlNodeType.Attribute) {
			xmlWriter.WriteStartAttribute$1(this.Prefix, this.LocalName, this.NamespaceURI);
			this.WriteAttributeValue(xmlWriter);
			xmlWriter.WriteEndAttribute();
		} else {
			xmlWriter.WriteNode(this, false);
		}
	} finally {
		xmlWriter.Close();
	}
	return stringWriter.toString();
};
System.Xml.XmlReader.prototype.CreateWriterForInnerOuterXml = function (sw) {
	return System.Xml.XmlWriter.Create$3(sw, new System.Xml.XmlWriterSettings().__Initialize__({
				OmitXmlDeclaration: true, 
				ConformanceLevel: System.Xml.ConformanceLevel.Fragment, 
				CheckCharacters: false, 
				NewLineHandling: System.Xml.NewLineHandling.None}
		));
};
System.Xml.XmlReader.prototype.ReadSubtree = function () {
	if (this.NodeType !== System.Xml.XmlNodeType.Element) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_ReadSubtreeNotOnElement")]);
	}
	return new $asm07.System.Xml.XmlSubtreeReader(this);
};
System.Xml.XmlReader.prototype.get_HasAttributes = function () {
	return (this.AttributeCount > 0);
};
System.Xml.XmlReader.prototype.Dispose$0 = function () {
	this.Dispose$1(true);
};
System.Xml.XmlReader.prototype.Dispose$1 = function (disposing) {
	if (!(!disposing || (this.ReadState === System.Xml.ReadState.Closed))) {
		this.Close();
	}
};
System.Xml.XmlReader.IsTextualNode = function (nodeType) {
	return (0 !== (System.Xml.XmlReader.IsTextualNodeBitmap & (1 << (nodeType & 31))));
};
System.Xml.XmlReader.CanReadContentAs = function (nodeType) {
	return (0 !== (System.Xml.XmlReader.CanReadContentAsBitmap & (1 << (nodeType & 31))));
};
System.Xml.XmlReader.HasValueInternal = function (nodeType) {
	return (0 !== (System.Xml.XmlReader.HasValueBitmap & (1 << (nodeType & 31))));
};
System.Xml.XmlReader.prototype.SkipSubtree = function () {
	this.MoveToElement();
	if (!((this.NodeType !== System.Xml.XmlNodeType.Element) || this.IsEmptyElement)) {
	__loop0__: 
		for (var depth = this.Depth; this.Read() && (depth < this.Depth); ) {
		}
		return ((this.NodeType === System.Xml.XmlNodeType.EndElement) && this.Read());
	}
	return this.Read();
};
System.Xml.XmlReader.prototype.CheckElement = function (localName, namespaceURI) {
	if (!((localName !== null) && (localName.length !== 0))) {
		throw System.Xml.XmlConvert.CreateInvalidNameArgumentException(localName, "localName");
	}
	if (namespaceURI === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["namespaceURI"]);
	}
	if (this.NodeType !== System.Xml.XmlNodeType.Element) {
		throw JSIL.New(System.Xml.XmlException, "_ctor$9", ["Xml_InvalidNodeType", this.NodeType.toString(), JSIL.TryCast(this, System.Xml.IXmlLineInfo)]);
	}
	if (!(!(this.LocalName != localName) && !(this.NamespaceURI != namespaceURI))) {
		throw JSIL.New(System.Xml.XmlException, "_ctor$12", ["Xml_ElementNotFoundNs", JSIL.Array.New(System.String, [localName, namespaceURI]), JSIL.TryCast(this, System.Xml.IXmlLineInfo)]);
	}
};
System.Xml.XmlReader.prototype.CreateReadContentAsException = function (methodName) {
	return System.Xml.XmlReader.CreateReadContentAsException(methodName, this.NodeType, JSIL.TryCast(this, System.Xml.IXmlLineInfo));
};
System.Xml.XmlReader.prototype.CreateReadElementContentAsException = function (methodName) {
	return System.Xml.XmlReader.CreateReadElementContentAsException(methodName, this.NodeType, JSIL.TryCast(this, System.Xml.IXmlLineInfo));
};
System.Xml.XmlReader.prototype.CanReadContentAs = function () {
	return System.Xml.XmlReader.CanReadContentAs(this.NodeType);
};
System.Xml.XmlReader.CreateReadContentAsException = function (methodName, nodeType, lineInfo) {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [System.Xml.XmlReader.AddLineInfo($asm07.System.Xml.Res.GetString$0("Xml_InvalidReadContentAs", JSIL.Array.New(System.String, [methodName, nodeType.toString()])), lineInfo)]);
};
System.Xml.XmlReader.CreateReadElementContentAsException = function (methodName, nodeType, lineInfo) {
	return JSIL.New(System.InvalidOperationException, "_ctor$1", [System.Xml.XmlReader.AddLineInfo($asm07.System.Xml.Res.GetString$0("Xml_InvalidReadElementContentAs", JSIL.Array.New(System.String, [methodName, nodeType.toString()])), lineInfo)]);
};
System.Xml.XmlReader.AddLineInfo = function (message, lineInfo) {
	if (lineInfo !== null) {
		var args = JSIL.Array.New(System.String, [(lineInfo.IXmlLineInfo_LineNumber).toString(), (lineInfo.IXmlLineInfo_LinePosition).toString()]);
		message = ((message + " " + $asm07.System.Xml.Res.GetString$0("Xml_ErrorPosition", args)));
	}
	return message;
};
System.Xml.XmlReader.prototype.InternalReadContentAsString = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				var text = System.String.Empty;
				var bufferBuilder = null;
			__loop0__: 
				while (true) {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								switch (Number(this.NodeType)) {
									case 2: 
										__label0__ = "IL_55";
										continue __step0__;
									case 3: 
									case 4: 
									case 13: 
									case 14: 
										if (text.length === 0) {
											text = this.Value;
											__label1__ = "IL_99";
											continue __step1__;
										}
										if (bufferBuilder === null) {
											bufferBuilder = new $asm07.System.Xml.BufferBuilder();
											bufferBuilder.Append$2(text);
										}
										bufferBuilder.Append$2(this.Value);
										__label1__ = "IL_99";
										continue __step1__;
									case 5: 
										if (this.CanResolveEntity) {
											this.ResolveEntity();
											__label1__ = "IL_99";
											continue __step1__;
										}
										break;
									case 7: 
									case 8: 
									case 16: 
										__label1__ = "IL_99";
										continue __step1__;
								}
								break __loop0__;
								__label1__ = "IL_99";
								continue __step1__;
								break;
							case "IL_99":
								if (!(this.AttributeCount !== 0) ? this.ReadAttributeValue() : this.Read()) {
									break __loop0__;
								}
								break __step1__;
						}
					}
				}
				__label0__ = "IL_B4";
				continue __step0__;
				__label0__ = "IL_55";
				continue __step0__;
				break;
			case "IL_55":
				return this.Value;
				__label0__ = "IL_B4";
				continue __step0__;
				break;
			case "IL_B4":
				if (bufferBuilder !== null) {
					return bufferBuilder.toString();
				}
				return text;
				break __step0__;
		}
	}
};
System.Xml.XmlReader.prototype.SetupReadElementContentAsXxx = function (methodName) {
	if (this.NodeType !== System.Xml.XmlNodeType.Element) {
		throw this.CreateReadElementContentAsException(methodName);
	}
	var isEmptyElement = this.IsEmptyElement;
	this.Read();
	if (isEmptyElement) {
		return false;
	}
	var nodeType = this.NodeType;
	if (nodeType === System.Xml.XmlNodeType.EndElement) {
		this.Read();
		return false;
	}
	if (nodeType === System.Xml.XmlNodeType.Element) {
		throw JSIL.New(System.Xml.XmlException, "_ctor$9", ["Xml_MixedReadElementContentAs", System.String.Empty, JSIL.TryCast(this, System.Xml.IXmlLineInfo)]);
	}
	return true;
};
System.Xml.XmlReader.prototype.FinishReadElementContentAsXxx = function () {
	if (this.NodeType !== System.Xml.XmlNodeType.EndElement) {
		throw JSIL.New(System.Xml.XmlException, "_ctor$7", ["Xml_InvalidNodeType", this.NodeType.toString()]);
	}
	this.Read();
};
System.Xml.XmlReader.prototype.get_IsDefaultInternal = function () {
	return this.IsDefault;
};
System.Xml.XmlReader.Create$0 = function (inputUri) {
	return System.Xml.XmlReader.Create$2(inputUri, null, null);
};
System.Xml.XmlReader.Create$1 = function (inputUri, settings) {
	return System.Xml.XmlReader.Create$2(inputUri, settings, null);
};
System.Xml.XmlReader.Create$2 = function (inputUri, settings, inputContext) {
	if (settings === null) {
		settings = new System.Xml.XmlReaderSettings();
	}
	return settings.CreateReader$0(inputUri, inputContext);
};
System.Xml.XmlReader.Create$3 = function (input) {
	return System.Xml.XmlReader.Create$5(input, null, System.String.Empty);
};
System.Xml.XmlReader.Create$4 = function (input, settings) {
	return System.Xml.XmlReader.Create$5(input, settings, System.String.Empty);
};
System.Xml.XmlReader.Create$5 = function (input, settings, baseUri) {
	if (settings === null) {
		settings = new System.Xml.XmlReaderSettings();
	}
	return settings.CreateReader$1(input, null, baseUri, null);
};
System.Xml.XmlReader.Create$6 = function (input, settings, inputContext) {
	if (settings === null) {
		settings = new System.Xml.XmlReaderSettings();
	}
	return settings.CreateReader$1(input, null, System.String.Empty, inputContext);
};
System.Xml.XmlReader.Create$7 = function (input) {
	return System.Xml.XmlReader.Create$9(input, null, System.String.Empty);
};
System.Xml.XmlReader.Create$8 = function (input, settings) {
	return System.Xml.XmlReader.Create$9(input, settings, System.String.Empty);
};
System.Xml.XmlReader.Create$9 = function (input, settings, baseUri) {
	if (settings === null) {
		settings = new System.Xml.XmlReaderSettings();
	}
	return settings.CreateReader$2(input, baseUri, null);
};
System.Xml.XmlReader.Create$10 = function (input, settings, inputContext) {
	if (settings === null) {
		settings = new System.Xml.XmlReaderSettings();
	}
	return settings.CreateReader$2(input, System.String.Empty, inputContext);
};
System.Xml.XmlReader.Create$11 = function (reader, settings) {
	if (settings === null) {
		settings = new System.Xml.XmlReaderSettings();
	}
	return settings.CreateReader$3(reader);
};
System.Xml.XmlReader.CalcBufferSize = function (input) {
	var num = 4096;
	if (input.CanSeek) {
		var length = input.Length;
		if (length < num) {
			num = length;
		} else if (length > 65536) {
			num = 8192;
		}
	}
	return num;
};
System.Xml.XmlReader.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
JSIL.OverloadedMethod(System.Xml.XmlReader.prototype, "get_Item", [
		["get_Item$0", [System.Int32]], 
		["get_Item$1", [System.String]], 
		["get_Item$2", [System.String, System.String]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlReader.prototype, "ReadElementContentAsObject", [
		["ReadElementContentAsObject$0", []], 
		["ReadElementContentAsObject$1", [System.String, System.String]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlReader.prototype, "ReadElementContentAsBoolean", [
		["ReadElementContentAsBoolean$0", []], 
		["ReadElementContentAsBoolean$1", [System.String, System.String]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlReader.prototype, "ReadElementContentAsDateTime", [
		["ReadElementContentAsDateTime$0", []], 
		["ReadElementContentAsDateTime$1", [System.String, System.String]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlReader.prototype, "ReadElementContentAsDouble", [
		["ReadElementContentAsDouble$0", []], 
		["ReadElementContentAsDouble$1", [System.String, System.String]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlReader.prototype, "ReadElementContentAsFloat", [
		["ReadElementContentAsFloat$0", []], 
		["ReadElementContentAsFloat$1", [System.String, System.String]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlReader.prototype, "ReadElementContentAsDecimal", [
		["ReadElementContentAsDecimal$0", []], 
		["ReadElementContentAsDecimal$1", [System.String, System.String]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlReader.prototype, "ReadElementContentAsInt", [
		["ReadElementContentAsInt$0", []], 
		["ReadElementContentAsInt$1", [System.String, System.String]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlReader.prototype, "ReadElementContentAsLong", [
		["ReadElementContentAsLong$0", []], 
		["ReadElementContentAsLong$1", [System.String, System.String]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlReader.prototype, "ReadElementContentAsString", [
		["ReadElementContentAsString$0", []], 
		["ReadElementContentAsString$1", [System.String, System.String]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlReader.prototype, "ReadElementContentAs", [
		["ReadElementContentAs$0", [System.Type, System.Xml.IXmlNamespaceResolver]], 
		["ReadElementContentAs$1", [System.Type, System.Xml.IXmlNamespaceResolver, System.String, System.String]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlReader.prototype, "GetAttribute", [
		["GetAttribute$0", [System.String]], 
		["GetAttribute$1", [System.String, System.String]], 
		["GetAttribute$2", [System.Int32]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlReader.prototype, "MoveToAttribute", [
		["MoveToAttribute$0", [System.String]], 
		["MoveToAttribute$1", [System.String, System.String]], 
		["MoveToAttribute$2", [System.Int32]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlReader.prototype, "ReadStartElement", [
		["ReadStartElement$0", []], 
		["ReadStartElement$1", [System.String]], 
		["ReadStartElement$2", [System.String, System.String]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlReader.prototype, "IsStartElement", [
		["IsStartElement$0", []], 
		["IsStartElement$1", [System.String]], 
		["IsStartElement$2", [System.String, System.String]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlReader.prototype, "ReadToFollowing", [
		["ReadToFollowing$0", [System.String]], 
		["ReadToFollowing$1", [System.String, System.String]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlReader.prototype, "ReadToDescendant", [
		["ReadToDescendant$0", [System.String]], 
		["ReadToDescendant$1", [System.String, System.String]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlReader.prototype, "ReadToNextSibling", [
		["ReadToNextSibling$0", [System.String]], 
		["ReadToNextSibling$1", [System.String, System.String]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlReader.prototype, "Dispose", [
		["Dispose$0", []], 
		["Dispose$1", [System.Boolean]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlReader, "Create", [
		["Create$0", [System.String]], 
		["Create$1", [System.String, System.Xml.XmlReaderSettings]], 
		["Create$2", [System.String, System.Xml.XmlReaderSettings, System.Xml.XmlParserContext]], 
		["Create$3", [System.IO.Stream]], 
		["Create$4", [System.IO.Stream, System.Xml.XmlReaderSettings]], 
		["Create$5", [System.IO.Stream, System.Xml.XmlReaderSettings, System.String]], 
		["Create$6", [System.IO.Stream, System.Xml.XmlReaderSettings, System.Xml.XmlParserContext]], 
		["Create$7", [System.IO.TextReader]], 
		["Create$8", [System.IO.TextReader, System.Xml.XmlReaderSettings]], 
		["Create$9", [System.IO.TextReader, System.Xml.XmlReaderSettings, System.String]], 
		["Create$10", [System.IO.TextReader, System.Xml.XmlReaderSettings, System.Xml.XmlParserContext]], 
		["Create$11", [System.Xml.XmlReader, System.Xml.XmlReaderSettings]]
	]);
JSIL.MakeProperty(System.Xml.XmlReader.prototype, "Settings", 
	System.Xml.XmlReader.prototype.get_Settings, null);
JSIL.MakeProperty(System.Xml.XmlReader.prototype, "NodeType", 
	System.Xml.XmlReader.prototype.get_NodeType, null);
JSIL.MakeProperty(System.Xml.XmlReader.prototype, "Name", 
	System.Xml.XmlReader.prototype.get_Name, null);
JSIL.MakeProperty(System.Xml.XmlReader.prototype, "LocalName", 
	System.Xml.XmlReader.prototype.get_LocalName, null);
JSIL.MakeProperty(System.Xml.XmlReader.prototype, "NamespaceURI", 
	System.Xml.XmlReader.prototype.get_NamespaceURI, null);
JSIL.MakeProperty(System.Xml.XmlReader.prototype, "Prefix", 
	System.Xml.XmlReader.prototype.get_Prefix, null);
JSIL.MakeProperty(System.Xml.XmlReader.prototype, "HasValue", 
	System.Xml.XmlReader.prototype.get_HasValue, null);
JSIL.MakeProperty(System.Xml.XmlReader.prototype, "Value", 
	System.Xml.XmlReader.prototype.get_Value, null);
JSIL.MakeProperty(System.Xml.XmlReader.prototype, "Depth", 
	System.Xml.XmlReader.prototype.get_Depth, null);
JSIL.MakeProperty(System.Xml.XmlReader.prototype, "BaseURI", 
	System.Xml.XmlReader.prototype.get_BaseURI, null);
JSIL.MakeProperty(System.Xml.XmlReader.prototype, "IsEmptyElement", 
	System.Xml.XmlReader.prototype.get_IsEmptyElement, null);
JSIL.MakeProperty(System.Xml.XmlReader.prototype, "IsDefault", 
	System.Xml.XmlReader.prototype.get_IsDefault, null);
JSIL.MakeProperty(System.Xml.XmlReader.prototype, "XmlSpace", 
	System.Xml.XmlReader.prototype.get_XmlSpace, null);
JSIL.MakeProperty(System.Xml.XmlReader.prototype, "XmlLang", 
	System.Xml.XmlReader.prototype.get_XmlLang, null);
JSIL.MakeProperty(System.Xml.XmlReader.prototype, "ValueType", 
	System.Xml.XmlReader.prototype.get_ValueType, null);
JSIL.MakeProperty(System.Xml.XmlReader.prototype, "AttributeCount", 
	System.Xml.XmlReader.prototype.get_AttributeCount, null);
JSIL.MakeProperty(System.Xml.XmlReader.prototype, "Item", 
	System.Xml.XmlReader.prototype.get_Item$0, null);
JSIL.MakeProperty(System.Xml.XmlReader.prototype, "Item", 
	System.Xml.XmlReader.prototype.get_Item$1, null);
JSIL.MakeProperty(System.Xml.XmlReader.prototype, "Item", 
	System.Xml.XmlReader.prototype.get_Item$2, null);
JSIL.MakeProperty(System.Xml.XmlReader.prototype, "EOF", 
	System.Xml.XmlReader.prototype.get_EOF, null);
JSIL.MakeProperty(System.Xml.XmlReader.prototype, "ReadState", 
	System.Xml.XmlReader.prototype.get_ReadState, null);
JSIL.MakeProperty(System.Xml.XmlReader.prototype, "NameTable", 
	System.Xml.XmlReader.prototype.get_NameTable, null);
JSIL.MakeProperty(System.Xml.XmlReader.prototype, "CanResolveEntity", 
	System.Xml.XmlReader.prototype.get_CanResolveEntity, null);
JSIL.MakeProperty(System.Xml.XmlReader.prototype, "CanReadBinaryContent", 
	System.Xml.XmlReader.prototype.get_CanReadBinaryContent, null);
JSIL.MakeProperty(System.Xml.XmlReader.prototype, "CanReadValueChunk", 
	System.Xml.XmlReader.prototype.get_CanReadValueChunk, null);
JSIL.MakeProperty(System.Xml.XmlReader.prototype, "HasAttributes", 
	System.Xml.XmlReader.prototype.get_HasAttributes, null);
JSIL.MakeProperty(System.Xml.XmlReader.prototype, "IsDefaultInternal", 
	System.Xml.XmlReader.prototype.get_IsDefaultInternal, null);
Object.defineProperty(System.Xml.XmlReader, "DefaultBufferSize", {
		"value": 4096}
);
Object.defineProperty(System.Xml.XmlReader, "BiggerBufferSize", {
		"value": 8192}
);
Object.defineProperty(System.Xml.XmlReader, "MaxStreamLengthForDefaultBufferSize", {
		"value": 65536}
);
System.Xml.XmlReader.IsTextualNodeBitmap = 0;
System.Xml.XmlReader.CanReadContentAsBitmap = 0;
System.Xml.XmlReader.HasValueBitmap = 0;
System.Xml.XmlReader._cctor = function () {
	System.Xml.XmlReader.IsTextualNodeBitmap = 24600;
	System.Xml.XmlReader.CanReadContentAsBitmap = 123324;
	System.Xml.XmlReader.HasValueBitmap = 157084;
};

$asm07.System.Xml.XmlWrappingReader.prototype._ctor = function (baseReader) {
	System.Xml.XmlReader.prototype._ctor.call(this);
	this.reader = baseReader;
	this.readerAsIXmlLineInfo = JSIL.TryCast(baseReader, System.Xml.IXmlLineInfo);
};
$asm07.System.Xml.XmlWrappingReader.prototype.get_Settings = function () {
	return this.reader.Settings;
};
$asm07.System.Xml.XmlWrappingReader.prototype.get_NodeType = function () {
	return this.reader.NodeType;
};
$asm07.System.Xml.XmlWrappingReader.prototype.get_Name = function () {
	return this.reader.Name;
};
$asm07.System.Xml.XmlWrappingReader.prototype.get_LocalName = function () {
	return this.reader.LocalName;
};
$asm07.System.Xml.XmlWrappingReader.prototype.get_NamespaceURI = function () {
	return this.reader.NamespaceURI;
};
$asm07.System.Xml.XmlWrappingReader.prototype.get_Prefix = function () {
	return this.reader.Prefix;
};
$asm07.System.Xml.XmlWrappingReader.prototype.get_HasValue = function () {
	return this.reader.HasValue;
};
$asm07.System.Xml.XmlWrappingReader.prototype.get_Value = function () {
	return this.reader.Value;
};
$asm07.System.Xml.XmlWrappingReader.prototype.get_Depth = function () {
	return this.reader.Depth;
};
$asm07.System.Xml.XmlWrappingReader.prototype.get_BaseURI = function () {
	return this.reader.BaseURI;
};
$asm07.System.Xml.XmlWrappingReader.prototype.get_IsEmptyElement = function () {
	return this.reader.IsEmptyElement;
};
$asm07.System.Xml.XmlWrappingReader.prototype.get_IsDefault = function () {
	return this.reader.IsDefault;
};
$asm07.System.Xml.XmlWrappingReader.prototype.get_XmlSpace = function () {
	return this.reader.XmlSpace;
};
$asm07.System.Xml.XmlWrappingReader.prototype.get_XmlLang = function () {
	return this.reader.XmlLang;
};
$asm07.System.Xml.XmlWrappingReader.prototype.get_ValueType = function () {
	return this.reader.ValueType;
};
$asm07.System.Xml.XmlWrappingReader.prototype.get_AttributeCount = function () {
	return this.reader.AttributeCount;
};
$asm07.System.Xml.XmlWrappingReader.prototype.get_EOF = function () {
	return this.reader.EOF;
};
$asm07.System.Xml.XmlWrappingReader.prototype.get_ReadState = function () {
	return this.reader.ReadState;
};
$asm07.System.Xml.XmlWrappingReader.prototype.get_HasAttributes = function () {
	return this.reader.HasAttributes;
};
$asm07.System.Xml.XmlWrappingReader.prototype.get_NameTable = function () {
	return this.reader.NameTable;
};
$asm07.System.Xml.XmlWrappingReader.prototype.get_CanResolveEntity = function () {
	return this.reader.CanResolveEntity;
};
$asm07.System.Xml.XmlWrappingReader.prototype.GetAttribute$0 = function (name) {
	return this.reader.GetAttribute$0(name);
};
$asm07.System.Xml.XmlWrappingReader.prototype.GetAttribute$1 = function (name, namespaceURI) {
	return this.reader.GetAttribute$1(name, namespaceURI);
};
$asm07.System.Xml.XmlWrappingReader.prototype.GetAttribute$2 = function (i) {
	return this.reader.GetAttribute$2(i);
};
$asm07.System.Xml.XmlWrappingReader.prototype.MoveToAttribute$0 = function (name) {
	return this.reader.MoveToAttribute$0(name);
};
$asm07.System.Xml.XmlWrappingReader.prototype.MoveToAttribute$1 = function (name, ns) {
	return this.reader.MoveToAttribute$1(name, ns);
};
$asm07.System.Xml.XmlWrappingReader.prototype.MoveToAttribute$2 = function (i) {
	this.reader.MoveToAttribute$2(i);
};
$asm07.System.Xml.XmlWrappingReader.prototype.MoveToFirstAttribute = function () {
	return this.reader.MoveToFirstAttribute();
};
$asm07.System.Xml.XmlWrappingReader.prototype.MoveToNextAttribute = function () {
	return this.reader.MoveToNextAttribute();
};
$asm07.System.Xml.XmlWrappingReader.prototype.MoveToElement = function () {
	return this.reader.MoveToElement();
};
$asm07.System.Xml.XmlWrappingReader.prototype.Read = function () {
	return this.reader.Read();
};
$asm07.System.Xml.XmlWrappingReader.prototype.Close = function () {
	this.reader.Close();
};
$asm07.System.Xml.XmlWrappingReader.prototype.Skip = function () {
	this.reader.Skip();
};
$asm07.System.Xml.XmlWrappingReader.prototype.LookupNamespace = function (prefix) {
	return this.reader.LookupNamespace(prefix);
};
$asm07.System.Xml.XmlWrappingReader.prototype.ResolveEntity = function () {
	this.reader.ResolveEntity();
};
$asm07.System.Xml.XmlWrappingReader.prototype.ReadAttributeValue = function () {
	return this.reader.ReadAttributeValue();
};
$asm07.System.Xml.XmlWrappingReader.prototype.HasLineInfo = function () {
	return ((this.readerAsIXmlLineInfo !== null) && this.readerAsIXmlLineInfo.IXmlLineInfo_HasLineInfo());
};
$asm07.System.Xml.XmlWrappingReader.prototype.get_LineNumber = function () {
	if (this.readerAsIXmlLineInfo !== null) {
		return this.readerAsIXmlLineInfo.IXmlLineInfo_LineNumber;
	}
	return 0;
};
$asm07.System.Xml.XmlWrappingReader.prototype.get_LinePosition = function () {
	if (this.readerAsIXmlLineInfo !== null) {
		return this.readerAsIXmlLineInfo.IXmlLineInfo_LinePosition;
	}
	return 0;
};
JSIL.OverloadedMethod($asm07.System.Xml.XmlWrappingReader.prototype, "GetAttribute", [
		["GetAttribute$0", [System.String]], 
		["GetAttribute$1", [System.String, System.String]], 
		["GetAttribute$2", [System.Int32]]
	]);
JSIL.OverloadedMethod($asm07.System.Xml.XmlWrappingReader.prototype, "MoveToAttribute", [
		["MoveToAttribute$0", [System.String]], 
		["MoveToAttribute$1", [System.String, System.String]], 
		["MoveToAttribute$2", [System.Int32]]
	]);
JSIL.MakeProperty($asm07.System.Xml.XmlWrappingReader.prototype, "Settings", 
	$asm07.System.Xml.XmlWrappingReader.prototype.get_Settings, null);
JSIL.MakeProperty($asm07.System.Xml.XmlWrappingReader.prototype, "NodeType", 
	$asm07.System.Xml.XmlWrappingReader.prototype.get_NodeType, null);
JSIL.MakeProperty($asm07.System.Xml.XmlWrappingReader.prototype, "Name", 
	$asm07.System.Xml.XmlWrappingReader.prototype.get_Name, null);
JSIL.MakeProperty($asm07.System.Xml.XmlWrappingReader.prototype, "LocalName", 
	$asm07.System.Xml.XmlWrappingReader.prototype.get_LocalName, null);
JSIL.MakeProperty($asm07.System.Xml.XmlWrappingReader.prototype, "NamespaceURI", 
	$asm07.System.Xml.XmlWrappingReader.prototype.get_NamespaceURI, null);
JSIL.MakeProperty($asm07.System.Xml.XmlWrappingReader.prototype, "Prefix", 
	$asm07.System.Xml.XmlWrappingReader.prototype.get_Prefix, null);
JSIL.MakeProperty($asm07.System.Xml.XmlWrappingReader.prototype, "HasValue", 
	$asm07.System.Xml.XmlWrappingReader.prototype.get_HasValue, null);
JSIL.MakeProperty($asm07.System.Xml.XmlWrappingReader.prototype, "Value", 
	$asm07.System.Xml.XmlWrappingReader.prototype.get_Value, null);
JSIL.MakeProperty($asm07.System.Xml.XmlWrappingReader.prototype, "Depth", 
	$asm07.System.Xml.XmlWrappingReader.prototype.get_Depth, null);
JSIL.MakeProperty($asm07.System.Xml.XmlWrappingReader.prototype, "BaseURI", 
	$asm07.System.Xml.XmlWrappingReader.prototype.get_BaseURI, null);
JSIL.MakeProperty($asm07.System.Xml.XmlWrappingReader.prototype, "IsEmptyElement", 
	$asm07.System.Xml.XmlWrappingReader.prototype.get_IsEmptyElement, null);
JSIL.MakeProperty($asm07.System.Xml.XmlWrappingReader.prototype, "IsDefault", 
	$asm07.System.Xml.XmlWrappingReader.prototype.get_IsDefault, null);
JSIL.MakeProperty($asm07.System.Xml.XmlWrappingReader.prototype, "XmlSpace", 
	$asm07.System.Xml.XmlWrappingReader.prototype.get_XmlSpace, null);
JSIL.MakeProperty($asm07.System.Xml.XmlWrappingReader.prototype, "XmlLang", 
	$asm07.System.Xml.XmlWrappingReader.prototype.get_XmlLang, null);
JSIL.MakeProperty($asm07.System.Xml.XmlWrappingReader.prototype, "ValueType", 
	$asm07.System.Xml.XmlWrappingReader.prototype.get_ValueType, null);
JSIL.MakeProperty($asm07.System.Xml.XmlWrappingReader.prototype, "AttributeCount", 
	$asm07.System.Xml.XmlWrappingReader.prototype.get_AttributeCount, null);
JSIL.MakeProperty($asm07.System.Xml.XmlWrappingReader.prototype, "EOF", 
	$asm07.System.Xml.XmlWrappingReader.prototype.get_EOF, null);
JSIL.MakeProperty($asm07.System.Xml.XmlWrappingReader.prototype, "ReadState", 
	$asm07.System.Xml.XmlWrappingReader.prototype.get_ReadState, null);
JSIL.MakeProperty($asm07.System.Xml.XmlWrappingReader.prototype, "HasAttributes", 
	$asm07.System.Xml.XmlWrappingReader.prototype.get_HasAttributes, null);
JSIL.MakeProperty($asm07.System.Xml.XmlWrappingReader.prototype, "NameTable", 
	$asm07.System.Xml.XmlWrappingReader.prototype.get_NameTable, null);
JSIL.MakeProperty($asm07.System.Xml.XmlWrappingReader.prototype, "CanResolveEntity", 
	$asm07.System.Xml.XmlWrappingReader.prototype.get_CanResolveEntity, null);
JSIL.MakeProperty($asm07.System.Xml.XmlWrappingReader.prototype, "LineNumber", 
	$asm07.System.Xml.XmlWrappingReader.prototype.get_LineNumber, null);
JSIL.MakeProperty($asm07.System.Xml.XmlWrappingReader.prototype, "LinePosition", 
	$asm07.System.Xml.XmlWrappingReader.prototype.get_LinePosition, null);
$asm07.System.Xml.XmlWrappingReader.prototype.reader = null;
$asm07.System.Xml.XmlWrappingReader.prototype.readerAsIXmlLineInfo = null;

$asm07.System.Xml.XmlCharCheckingReader.prototype._ctor = function (reader, checkCharacters, ignoreWhitespace, ignoreComments, ignorePis, dtdProcessing) {
	$asm07.System.Xml.XmlWrappingReader.prototype._ctor.call(this, reader);
	this.state = $asm07.System.Xml.XmlCharCheckingReader.State.Initial;
	this.checkCharacters = checkCharacters;
	this.ignoreWhitespace = ignoreWhitespace;
	this.ignoreComments = ignoreComments;
	this.ignorePis = ignorePis;
	this.dtdProcessing = dtdProcessing;
	this.lastNodeType = System.Xml.XmlNodeType.None;
	if (checkCharacters) {
		this.xmlCharType = $asm07.System.Xml.XmlCharType.Instance.MemberwiseClone();
	}
};
$asm07.System.Xml.XmlCharCheckingReader.prototype.get_Settings = function () {
	var xmlReaderSettings = this.reader.Settings;
	if (xmlReaderSettings === null) {
		xmlReaderSettings = new System.Xml.XmlReaderSettings();
	} else {
		xmlReaderSettings = xmlReaderSettings.Clone();
	}
	if (this.checkCharacters) {
		xmlReaderSettings.CheckCharacters = true;
	}
	if (this.ignoreWhitespace) {
		xmlReaderSettings.IgnoreWhitespace = true;
	}
	if (this.ignoreComments) {
		xmlReaderSettings.IgnoreComments = true;
	}
	if (this.ignorePis) {
		xmlReaderSettings.IgnoreProcessingInstructions = true;
	}
	if (this.dtdProcessing !== -1) {
		xmlReaderSettings.DtdProcessing = this.dtdProcessing;
	}
	xmlReaderSettings.ReadOnly = true;
	return xmlReaderSettings;
};
$asm07.System.Xml.XmlCharCheckingReader.prototype.MoveToAttribute$0 = function (name) {
	if (this.state === $asm07.System.Xml.XmlCharCheckingReader.State.InReadBinary) {
		this.FinishReadBinary();
	}
	return this.reader.MoveToAttribute$0(name);
};
$asm07.System.Xml.XmlCharCheckingReader.prototype.MoveToAttribute$1 = function (name, ns) {
	if (this.state === $asm07.System.Xml.XmlCharCheckingReader.State.InReadBinary) {
		this.FinishReadBinary();
	}
	return this.reader.MoveToAttribute$1(name, ns);
};
$asm07.System.Xml.XmlCharCheckingReader.prototype.MoveToAttribute$2 = function (i) {
	if (this.state === $asm07.System.Xml.XmlCharCheckingReader.State.InReadBinary) {
		this.FinishReadBinary();
	}
	this.reader.MoveToAttribute$2(i);
};
$asm07.System.Xml.XmlCharCheckingReader.prototype.MoveToFirstAttribute = function () {
	if (this.state === $asm07.System.Xml.XmlCharCheckingReader.State.InReadBinary) {
		this.FinishReadBinary();
	}
	return this.reader.MoveToFirstAttribute();
};
$asm07.System.Xml.XmlCharCheckingReader.prototype.MoveToNextAttribute = function () {
	if (this.state === $asm07.System.Xml.XmlCharCheckingReader.State.InReadBinary) {
		this.FinishReadBinary();
	}
	return this.reader.MoveToNextAttribute();
};
$asm07.System.Xml.XmlCharCheckingReader.prototype.MoveToElement = function () {
	if (this.state === $asm07.System.Xml.XmlCharCheckingReader.State.InReadBinary) {
		this.FinishReadBinary();
	}
	return this.reader.MoveToElement();
};
$asm07.System.Xml.XmlCharCheckingReader.prototype.Read = function () {
	var __label0__ = null;
__step0__: 
	while (true) {
		switch (__label0__) {
			case null:
				var invCharIndex = 0;
				__label0__ = "__entry0__";
				continue __step0__;
				break;
			case "__entry0__":
				switch (Number(this.state)) {
					case 0: 
						this.state = $asm07.System.Xml.XmlCharCheckingReader.State.Interactive;
						if (JSIL.Cast(this.reader.ReadState, System.Boolean)) {
							__label0__ = "IL_55";
							continue __step0__;
						}
						break;
					case 1: 
						this.FinishReadBinary();
						this.state = $asm07.System.Xml.XmlCharCheckingReader.State.Interactive;
						break;
					case 2: 
						return false;
					case 3: 
						break;
					default: 
						return false;
				}
				if (!this.reader.Read()) {
					return false;
				}
				__label0__ = "IL_55";
				continue __step0__;
				break;
			case "IL_55":
				var nodeType = this.reader.NodeType;
				if (!this.checkCharacters) {
					switch (Number(nodeType)) {
						case 7: 
							if (this.ignorePis) {
								return this.Read();
							}
							break;
						case 8: 
							if (this.ignoreComments) {
								return this.Read();
							}
							break;
						case 10: 
							if (this.dtdProcessing === 0) {
								this.Throw$0("Xml_DtdIsProhibitedEx", System.String.Empty);
							} else if (this.dtdProcessing === System.Xml.DtdProcessing.Ignore) {
								return this.Read();
							}
							break;
						case 13: 
							if (this.ignoreWhitespace) {
								return this.Read();
							}
							break;
					}
					return true;
				}
				switch (Number(nodeType)) {
					case 1: 
						if (this.checkCharacters) {
							this.ValidateQName$1(this.reader.Prefix, this.reader.LocalName);
							if (this.reader.MoveToFirstAttribute()) {
							__loop0__: 
								do {
									this.ValidateQName$1(this.reader.Prefix, this.reader.LocalName);
									this.CheckCharacters(this.reader.Value);
								} while (this.reader.MoveToNextAttribute());
								this.reader.MoveToElement();
							}
						}
						break;
					case 3: 
					case 4: 
						if (this.checkCharacters) {
							this.CheckCharacters(this.reader.Value);
						}
						break;
					case 5: 
						if (this.checkCharacters) {
							this.ValidateQName$0(this.reader.Name);
						}
						break;
					case 7: 
						if (this.ignorePis) {
							return this.Read();
						}
						if (this.checkCharacters) {
							this.ValidateQName$0(this.reader.Name);
							this.CheckCharacters(this.reader.Value);
						}
						break;
					case 8: 
						if (this.ignoreComments) {
							return this.Read();
						}
						if (this.checkCharacters) {
							this.CheckCharacters(this.reader.Value);
						}
						break;
					case 10: 
						if (this.dtdProcessing === 0) {
							this.Throw$0("Xml_DtdIsProhibitedEx", System.String.Empty);
						} else if (this.dtdProcessing === System.Xml.DtdProcessing.Ignore) {
							return this.Read();
						}
						if (this.checkCharacters) {
							this.ValidateQName$0(this.reader.Name);
							this.CheckCharacters(this.reader.Value);
							var attribute = this.reader.GetAttribute$0("SYSTEM");
							if (attribute !== null) {
								this.CheckCharacters(attribute);
							}
							attribute = this.reader.GetAttribute$0("PUBLIC");
							if (!((attribute === null) || ((invCharIndex = this.xmlCharType.IsPublicId(attribute)) < 0))) {
								this.Throw$1("Xml_InvalidCharacter", System.Xml.XmlException.BuildCharExceptionArgs$0(attribute, invCharIndex));
							}
						}
						break;
					case 13: 
						if (this.ignoreWhitespace) {
							return this.Read();
						}
						if (this.checkCharacters) {
							this.CheckWhitespace(this.reader.Value);
						}
						break;
					case 14: 
						if (this.checkCharacters) {
							this.CheckWhitespace(this.reader.Value);
						}
						break;
					case 15: 
						if (this.checkCharacters) {
							this.ValidateQName$1(this.reader.Prefix, this.reader.LocalName);
						}
						break;
				}
				this.lastNodeType = nodeType;
				return true;
				break __step0__;
		}
	}
};
$asm07.System.Xml.XmlCharCheckingReader.prototype.get_ReadState = function () {
	switch (Number(this.state)) {
		case 0: 
			if (this.reader.ReadState !== System.Xml.ReadState.Closed) {
				return System.Xml.ReadState.Initial;
			}
			return System.Xml.ReadState.Closed;
		case 2: 
			return System.Xml.ReadState.Error;
	}
	return this.reader.ReadState;
};
$asm07.System.Xml.XmlCharCheckingReader.prototype.ReadAttributeValue = function () {
	if (this.state === $asm07.System.Xml.XmlCharCheckingReader.State.InReadBinary) {
		this.FinishReadBinary();
	}
	return this.reader.ReadAttributeValue();
};
$asm07.System.Xml.XmlCharCheckingReader.prototype.get_CanReadBinaryContent = function () {
	return true;
};
$asm07.System.Xml.XmlCharCheckingReader.prototype.ReadContentAsBase64 = function (buffer, index, count) {
	if (this.ReadState !== System.Xml.ReadState.Interactive) {
		return 0;
	}
	if (this.state !== $asm07.System.Xml.XmlCharCheckingReader.State.InReadBinary) {
		if (!(!System.Xml.XmlReader.prototype.get_CanReadBinaryContent.call(this) || this.checkCharacters)) {
			this.readBinaryHelper = null;
			this.state = $asm07.System.Xml.XmlCharCheckingReader.State.InReadBinary;
			return System.Xml.XmlReader.prototype.ReadContentAsBase64.call(this, buffer, index, count);
		}
		this.readBinaryHelper = $asm07.System.Xml.ReadContentAsBinaryHelper.CreateOrReset(this.readBinaryHelper, this);
	} else if (this.readBinaryHelper === null) {
		return System.Xml.XmlReader.prototype.ReadContentAsBase64.call(this, buffer, index, count);
	}
	this.state = $asm07.System.Xml.XmlCharCheckingReader.State.Interactive;
	var result = this.readBinaryHelper.ReadContentAsBase64(buffer, index, count);
	this.state = $asm07.System.Xml.XmlCharCheckingReader.State.InReadBinary;
	return result;
};
$asm07.System.Xml.XmlCharCheckingReader.prototype.ReadContentAsBinHex = function (buffer, index, count) {
	if (this.ReadState !== System.Xml.ReadState.Interactive) {
		return 0;
	}
	if (this.state !== $asm07.System.Xml.XmlCharCheckingReader.State.InReadBinary) {
		if (!(!System.Xml.XmlReader.prototype.get_CanReadBinaryContent.call(this) || this.checkCharacters)) {
			this.readBinaryHelper = null;
			this.state = $asm07.System.Xml.XmlCharCheckingReader.State.InReadBinary;
			return System.Xml.XmlReader.prototype.ReadContentAsBinHex.call(this, buffer, index, count);
		}
		this.readBinaryHelper = $asm07.System.Xml.ReadContentAsBinaryHelper.CreateOrReset(this.readBinaryHelper, this);
	} else if (this.readBinaryHelper === null) {
		return System.Xml.XmlReader.prototype.ReadContentAsBinHex.call(this, buffer, index, count);
	}
	this.state = $asm07.System.Xml.XmlCharCheckingReader.State.Interactive;
	var result = this.readBinaryHelper.ReadContentAsBinHex(buffer, index, count);
	this.state = $asm07.System.Xml.XmlCharCheckingReader.State.InReadBinary;
	return result;
};
$asm07.System.Xml.XmlCharCheckingReader.prototype.ReadElementContentAsBase64 = function (buffer, index, count) {
	if (buffer === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["buffer"]);
	}
	if (count < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["count"]);
	}
	if (index < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["index"]);
	}
	if ((buffer.length - index) < count) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["count"]);
	}
	if (this.ReadState !== System.Xml.ReadState.Interactive) {
		return 0;
	}
	if (this.state !== $asm07.System.Xml.XmlCharCheckingReader.State.InReadBinary) {
		if (!(!System.Xml.XmlReader.prototype.get_CanReadBinaryContent.call(this) || this.checkCharacters)) {
			this.readBinaryHelper = null;
			this.state = $asm07.System.Xml.XmlCharCheckingReader.State.InReadBinary;
			return System.Xml.XmlReader.prototype.ReadElementContentAsBase64.call(this, buffer, index, count);
		}
		this.readBinaryHelper = $asm07.System.Xml.ReadContentAsBinaryHelper.CreateOrReset(this.readBinaryHelper, this);
	} else if (this.readBinaryHelper === null) {
		return System.Xml.XmlReader.prototype.ReadElementContentAsBase64.call(this, buffer, index, count);
	}
	this.state = $asm07.System.Xml.XmlCharCheckingReader.State.Interactive;
	var result = this.readBinaryHelper.ReadElementContentAsBase64(buffer, index, count);
	this.state = $asm07.System.Xml.XmlCharCheckingReader.State.InReadBinary;
	return result;
};
$asm07.System.Xml.XmlCharCheckingReader.prototype.ReadElementContentAsBinHex = function (buffer, index, count) {
	if (buffer === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["buffer"]);
	}
	if (count < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["count"]);
	}
	if (index < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["index"]);
	}
	if ((buffer.length - index) < count) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["count"]);
	}
	if (this.ReadState !== System.Xml.ReadState.Interactive) {
		return 0;
	}
	if (this.state !== $asm07.System.Xml.XmlCharCheckingReader.State.InReadBinary) {
		if (!(!System.Xml.XmlReader.prototype.get_CanReadBinaryContent.call(this) || this.checkCharacters)) {
			this.readBinaryHelper = null;
			this.state = $asm07.System.Xml.XmlCharCheckingReader.State.InReadBinary;
			return System.Xml.XmlReader.prototype.ReadElementContentAsBinHex.call(this, buffer, index, count);
		}
		this.readBinaryHelper = $asm07.System.Xml.ReadContentAsBinaryHelper.CreateOrReset(this.readBinaryHelper, this);
	} else if (this.readBinaryHelper === null) {
		return System.Xml.XmlReader.prototype.ReadElementContentAsBinHex.call(this, buffer, index, count);
	}
	this.state = $asm07.System.Xml.XmlCharCheckingReader.State.Interactive;
	var result = this.readBinaryHelper.ReadElementContentAsBinHex(buffer, index, count);
	this.state = $asm07.System.Xml.XmlCharCheckingReader.State.InReadBinary;
	return result;
};
$asm07.System.Xml.XmlCharCheckingReader.prototype.Throw$0 = function (res, arg) {
	this.state = $asm07.System.Xml.XmlCharCheckingReader.State.Error;
	throw JSIL.New(System.Xml.XmlException, "_ctor$9", [res, arg, null]);
};
$asm07.System.Xml.XmlCharCheckingReader.prototype.Throw$1 = function (res, args) {
	this.state = $asm07.System.Xml.XmlCharCheckingReader.State.Error;
	throw JSIL.New(System.Xml.XmlException, "_ctor$12", [res, args, null]);
};
$asm07.System.Xml.XmlCharCheckingReader.prototype.CheckWhitespace = function (value) {
	var invCharIndex = 0;
	if ((invCharIndex = this.xmlCharType.IsOnlyWhitespaceWithPos(value)) !== -1) {
		this.Throw$1("Xml_InvalidWhitespaceCharacter", System.Xml.XmlException.BuildCharExceptionArgs$0(value, invCharIndex));
	}
};
$asm07.System.Xml.XmlCharCheckingReader.prototype.ValidateQName$0 = function (name) {
	var text = new JSIL.Variable(null), text2 = new JSIL.Variable(null);
	$asm07.System.Xml.ValidateNames.ParseQNameThrow(name, /* ref */ text, /* ref */ text2);
};
$asm07.System.Xml.XmlCharCheckingReader.prototype.ValidateQName$1 = function (prefix, localName) {
	try {
		if (prefix.length > 0) {
			$asm07.System.Xml.ValidateNames.ParseNCNameThrow(prefix);
		}
		$asm07.System.Xml.ValidateNames.ParseNCNameThrow(localName);
	} catch ($exception) {
		this.state = $asm07.System.Xml.XmlCharCheckingReader.State.Error;
		throw $exception;
	}
};
$asm07.System.Xml.XmlCharCheckingReader.prototype.CheckCharacters = function (value) {
	System.Xml.XmlConvert.VerifyCharData$1(value, $asm07.System.Xml.ExceptionType.ArgumentException, $asm07.System.Xml.ExceptionType.XmlException);
};
$asm07.System.Xml.XmlCharCheckingReader.prototype.FinishReadBinary = function () {
	this.state = $asm07.System.Xml.XmlCharCheckingReader.State.Interactive;
	if (this.readBinaryHelper !== null) {
		this.readBinaryHelper.Finish();
	}
};
JSIL.OverloadedMethod($asm07.System.Xml.XmlCharCheckingReader.prototype, "MoveToAttribute", [
		["MoveToAttribute$0", [System.String]], 
		["MoveToAttribute$1", [System.String, System.String]], 
		["MoveToAttribute$2", [System.Int32]]
	]);
JSIL.OverloadedMethod($asm07.System.Xml.XmlCharCheckingReader.prototype, "Throw", [
		["Throw$0", [System.String, System.String]], 
		["Throw$1", [System.String, System.Array.Of(System.String)]]
	]);
JSIL.OverloadedMethod($asm07.System.Xml.XmlCharCheckingReader.prototype, "ValidateQName", [
		["ValidateQName$0", [System.String]], 
		["ValidateQName$1", [System.String, System.String]]
	]);
JSIL.MakeProperty($asm07.System.Xml.XmlCharCheckingReader.prototype, "Settings", 
	$asm07.System.Xml.XmlCharCheckingReader.prototype.get_Settings, null);
JSIL.MakeProperty($asm07.System.Xml.XmlCharCheckingReader.prototype, "ReadState", 
	$asm07.System.Xml.XmlCharCheckingReader.prototype.get_ReadState, null);
JSIL.MakeProperty($asm07.System.Xml.XmlCharCheckingReader.prototype, "CanReadBinaryContent", 
	$asm07.System.Xml.XmlCharCheckingReader.prototype.get_CanReadBinaryContent, null);
$asm07.System.Xml.XmlCharCheckingReader.prototype.state = 0;
$asm07.System.Xml.XmlCharCheckingReader.prototype.checkCharacters = false;
$asm07.System.Xml.XmlCharCheckingReader.prototype.ignoreWhitespace = false;
$asm07.System.Xml.XmlCharCheckingReader.prototype.ignoreComments = false;
$asm07.System.Xml.XmlCharCheckingReader.prototype.ignorePis = false;
$asm07.System.Xml.XmlCharCheckingReader.prototype.dtdProcessing = 0;
$asm07.System.Xml.XmlCharCheckingReader.prototype.lastNodeType = 0;
$asm07.System.Xml.XmlCharCheckingReader.prototype.readBinaryHelper = null;

$asm07.System.Xml.XmlCharCheckingReaderWithNS.prototype._ctor = function (reader, readerAsNSResolver, checkCharacters, ignoreWhitespace, ignoreComments, ignorePis, dtdProcessing) {
	$asm07.System.Xml.XmlCharCheckingReader.prototype._ctor.call(
		this, reader, 
		checkCharacters, 
		ignoreWhitespace, 
		ignoreComments, 
		ignorePis, 
		dtdProcessing
	);
	this.readerAsNSResolver = readerAsNSResolver;
};
$asm07.System.Xml.XmlCharCheckingReaderWithNS.prototype.IXmlNamespaceResolver_GetNamespacesInScope = function (scope) {
	return this.readerAsNSResolver.IXmlNamespaceResolver_GetNamespacesInScope(scope);
};
$asm07.System.Xml.XmlCharCheckingReaderWithNS.prototype.IXmlNamespaceResolver_LookupNamespace = function (prefix) {
	return this.readerAsNSResolver.IXmlNamespaceResolver_LookupNamespace(prefix);
};
$asm07.System.Xml.XmlCharCheckingReaderWithNS.prototype.IXmlNamespaceResolver_LookupPrefix = function (namespaceName) {
	return this.readerAsNSResolver.IXmlNamespaceResolver_LookupPrefix(namespaceName);
};
$asm07.System.Xml.XmlCharCheckingReaderWithNS.prototype.readerAsNSResolver = null;

System.Xml.XmlWriter.prototype.get_Settings = function () {
	return null;
};
System.Xml.XmlWriter.prototype.WriteStartElement$0 = function (localName, ns) {
	this.WriteStartElement$1(null, localName, ns);
};
System.Xml.XmlWriter.prototype.WriteStartElement$2 = function (localName) {
	this.WriteStartElement$1(null, localName, null);
};
System.Xml.XmlWriter.prototype.WriteAttributeString$0 = function (localName, ns, value) {
	this.WriteStartAttribute$1(null, localName, ns);
	this.WriteString(value);
	this.WriteEndAttribute();
};
System.Xml.XmlWriter.prototype.WriteAttributeString$1 = function (localName, value) {
	this.WriteStartAttribute$1(null, localName, null);
	this.WriteString(value);
	this.WriteEndAttribute();
};
System.Xml.XmlWriter.prototype.WriteAttributeString$2 = function (prefix, localName, ns, value) {
	this.WriteStartAttribute$1(prefix, localName, ns);
	this.WriteString(value);
	this.WriteEndAttribute();
};
System.Xml.XmlWriter.prototype.WriteStartAttribute$0 = function (localName, ns) {
	this.WriteStartAttribute$1(null, localName, ns);
};
System.Xml.XmlWriter.prototype.WriteStartAttribute$2 = function (localName) {
	this.WriteStartAttribute$1(null, localName, null);
};
System.Xml.XmlWriter.prototype.WriteBinHex = function (buffer, index, count) {
	$asm07.System.Xml.BinHexEncoder.Encode$0(buffer, index, count, this);
};
System.Xml.XmlWriter.prototype.Close = function () {
};
System.Xml.XmlWriter.prototype.get_XmlSpace = function () {
	return System.Xml.XmlSpace.Default;
};
System.Xml.XmlWriter.prototype.get_XmlLang = function () {
	return System.String.Empty;
};
System.Xml.XmlWriter.prototype.WriteNmToken = function (name) {
	if (!((name !== null) && (name.length !== 0))) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_EmptyName")]);
	}
	this.WriteString(System.Xml.XmlConvert.VerifyNMTOKEN$1(name, $asm07.System.Xml.ExceptionType.ArgumentException));
};
System.Xml.XmlWriter.prototype.WriteName = function (name) {
	this.WriteString(System.Xml.XmlConvert.VerifyQName(name, $asm07.System.Xml.ExceptionType.ArgumentException));
};
System.Xml.XmlWriter.prototype.WriteQualifiedName = function (localName, ns) {
	if (!((ns === null) || (ns.length <= 0))) {
		var text = this.LookupPrefix(ns);
		if (text === null) {
			throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm07.System.Xml.Res.GetString$0("Xml_UndefNamespace", [ns])]);
		}
		this.WriteString(text);
		this.WriteString(":");
	}
	this.WriteString(localName);
};
System.Xml.XmlWriter.prototype.WriteValue$0 = function (value) {
	if (value === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["value"]);
	}
	this.WriteString($asm07.System.Xml.Schema.XmlUntypedStringConverter.Instance.ToString(value, null));
};
System.Xml.XmlWriter.prototype.WriteValue$1 = function (value) {
	if (value === null) {
		return;
	}
	this.WriteString(value);
};
System.Xml.XmlWriter.prototype.WriteValue$2 = function (value) {
	this.WriteString(System.Xml.XmlConvert.ToString$0(value));
};
System.Xml.XmlWriter.prototype.WriteValue$3 = function (value) {
	this.WriteString(System.Xml.XmlConvert.ToString$12(value, System.Xml.XmlDateTimeSerializationMode.RoundtripKind));
};
System.Xml.XmlWriter.prototype.WriteValue$4 = function (value) {
	this.WriteString(System.Xml.XmlConvert.ToString$10(value));
};
System.Xml.XmlWriter.prototype.WriteValue$5 = function (value) {
	this.WriteString(System.Xml.XmlConvert.ToString$9(value));
};
System.Xml.XmlWriter.prototype.WriteValue$6 = function (value) {
	this.WriteString(System.Xml.XmlConvert.ToString$2(value));
};
System.Xml.XmlWriter.prototype.WriteValue$7 = function (value) {
	this.WriteString(System.Xml.XmlConvert.ToString$5(value));
};
System.Xml.XmlWriter.prototype.WriteValue$8 = function (value) {
	this.WriteString(System.Xml.XmlConvert.ToString$6(value));
};
System.Xml.XmlWriter.prototype.WriteAttributes = function (reader, defattr) {
	if (reader === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["reader"]);
	}
	if (!((reader.NodeType !== System.Xml.XmlNodeType.Element) && (reader.NodeType !== System.Xml.XmlNodeType.XmlDeclaration))) {
		if (reader.MoveToFirstAttribute()) {
			this.WriteAttributes(reader, defattr);
			reader.MoveToElement();
			return;
		}
	} else {
		if (reader.NodeType !== System.Xml.XmlNodeType.Attribute) {
			throw JSIL.New(System.Xml.XmlException, "_ctor$7", ["Xml_InvalidPosition", System.String.Empty]);
		}
	__loop0__: 
		do {
			if (!(!defattr && reader.IsDefaultInternal)) {
				this.WriteStartAttribute$1(reader.Prefix, reader.LocalName, reader.NamespaceURI);
			__loop1__: 
				while (reader.ReadAttributeValue()) {
					if (reader.NodeType === System.Xml.XmlNodeType.EntityReference) {
						this.WriteEntityRef(reader.Name);
					} else {
						this.WriteString(reader.Value);
					}
				}
				this.WriteEndAttribute();
			}
		} while (reader.MoveToNextAttribute());
	}
};
System.Xml.XmlWriter.prototype.WriteNode = function (reader, defattr) {
	var count = 0;
	if (reader === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["reader"]);
	}
	var canReadValueChunk = reader.CanReadValueChunk;
	var num = !JSIL.Cast(reader.NodeType, System.Boolean) ? -1 : reader.Depth;
__loop0__: 
	do {
		switch (Number(reader.NodeType)) {
			case 1: 
				this.WriteStartElement$1(reader.Prefix, reader.LocalName, reader.NamespaceURI);
				this.WriteAttributes(reader, defattr);
				if (reader.IsEmptyElement) {
					this.WriteEndElement();
				}
				break;
			case 3: 
				if (canReadValueChunk) {
					if (this.writeNodeBuffer === null) {
						this.writeNodeBuffer = JSIL.Array.New(System.Char, 1024);
					}
				__loop1__: 
					while ((count = reader.ReadValueChunk(this.writeNodeBuffer, 0, 1024)) > 0) {
						this.WriteChars(this.writeNodeBuffer, 0, count);
					}
				} else {
					this.WriteString(reader.Value);
				}
				break;
			case 4: 
				this.WriteCData(reader.Value);
				break;
			case 5: 
				this.WriteEntityRef(reader.Name);
				break;
			case 7: 
			case 17: 
				this.WriteProcessingInstruction(reader.Name, reader.Value);
				break;
			case 8: 
				this.WriteComment(reader.Value);
				break;
			case 10: 
				this.WriteDocType(reader.Name, reader.GetAttribute$0("PUBLIC"), reader.GetAttribute$0("SYSTEM"), reader.Value);
				break;
			case 13: 
			case 14: 
				this.WriteWhitespace(reader.Value);
				break;
			case 15: 
				this.WriteFullEndElement();
				break;
		}
	} while (reader.Read() && ((num < reader.Depth) || 
			((num === reader.Depth) && 
				(reader.NodeType === System.Xml.XmlNodeType.EndElement))));
};
System.Xml.XmlWriter.prototype.WriteElementString$0 = function (localName, value) {
	this.WriteElementString$1(localName, null, value);
};
System.Xml.XmlWriter.prototype.WriteElementString$1 = function (localName, ns, value) {
	this.WriteStartElement$0(localName, ns);
	if (!((value === null) || (value.length === 0))) {
		this.WriteString(value);
	}
	this.WriteEndElement();
};
System.Xml.XmlWriter.prototype.WriteElementString$2 = function (prefix, localName, ns, value) {
	this.WriteStartElement$1(prefix, localName, ns);
	if (!((value === null) || (value.length === 0))) {
		this.WriteString(value);
	}
	this.WriteEndElement();
};
System.Xml.XmlWriter.prototype.Dispose$0 = function () {
	this.Dispose$1(true);
};
System.Xml.XmlWriter.prototype.Dispose$1 = function (disposing) {
	if (!(!disposing || (this.WriteState === System.Xml.WriteState.Closed))) {
		this.Close();
	}
};
System.Xml.XmlWriter.Create$0 = function (output) {
	return System.Xml.XmlWriter.Create$1(output, null);
};
System.Xml.XmlWriter.Create$1 = function (output, settings) {
	if (settings === null) {
		settings = new System.Xml.XmlWriterSettings();
	}
	return settings.CreateWriter$0(output);
};
System.Xml.XmlWriter.Create$2 = function (output) {
	return System.Xml.XmlWriter.Create$3(output, null);
};
System.Xml.XmlWriter.Create$3 = function (output, settings) {
	if (settings === null) {
		settings = new System.Xml.XmlWriterSettings();
	}
	return settings.CreateWriter$1(output);
};
System.Xml.XmlWriter.Create$4 = function (output) {
	return System.Xml.XmlWriter.Create$5(output, null);
};
System.Xml.XmlWriter.Create$5 = function (output, settings) {
	if (settings === null) {
		settings = new System.Xml.XmlWriterSettings();
	}
	if (output === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["output"]);
	}
	return settings.CreateWriter$1(JSIL.New(System.IO.StringWriter, "_ctor$3", [output, System.Globalization.CultureInfo.InvariantCulture]));
};
System.Xml.XmlWriter.Create$6 = function (output) {
	return System.Xml.XmlWriter.Create$7(output, null);
};
System.Xml.XmlWriter.Create$7 = function (output, settings) {
	if (settings === null) {
		settings = new System.Xml.XmlWriterSettings();
	}
	return settings.CreateWriter$2(output);
};
System.Xml.XmlWriter.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
JSIL.OverloadedMethod(System.Xml.XmlWriter.prototype, "WriteStartDocument", [
		["WriteStartDocument$0", []], 
		["WriteStartDocument$1", [System.Boolean]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlWriter.prototype, "WriteStartElement", [
		["WriteStartElement$0", [System.String, System.String]], 
		["WriteStartElement$1", [System.String, System.String, System.String]], 
		["WriteStartElement$2", [System.String]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlWriter.prototype, "WriteAttributeString", [
		["WriteAttributeString$0", [System.String, System.String, System.String]], 
		["WriteAttributeString$1", [System.String, System.String]], 
		["WriteAttributeString$2", [System.String, System.String, System.String, System.String]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlWriter.prototype, "WriteStartAttribute", [
		["WriteStartAttribute$0", [System.String, System.String]], 
		["WriteStartAttribute$1", [System.String, System.String, System.String]], 
		["WriteStartAttribute$2", [System.String]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlWriter.prototype, "WriteRaw", [
		["WriteRaw$0", [System.Array.Of(System.Char), System.Int32, System.Int32]], 
		["WriteRaw$1", [System.String]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlWriter.prototype, "WriteValue", [
		["WriteValue$0", [System.Object]], 
		["WriteValue$1", [System.String]], 
		["WriteValue$2", [System.Boolean]], 
		["WriteValue$3", [System.DateTime]], 
		["WriteValue$4", [System.Double]], 
		["WriteValue$5", [System.Single]], 
		["WriteValue$6", [System.Decimal]], 
		["WriteValue$7", [System.Int32]], 
		["WriteValue$8", [System.Int64]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlWriter.prototype, "WriteElementString", [
		["WriteElementString$0", [System.String, System.String]], 
		["WriteElementString$1", [System.String, System.String, System.String]], 
		["WriteElementString$2", [System.String, System.String, System.String, System.String]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlWriter.prototype, "Dispose", [
		["Dispose$0", []], 
		["Dispose$1", [System.Boolean]]
	]);
JSIL.OverloadedMethod(System.Xml.XmlWriter, "Create", [
		["Create$0", [System.IO.Stream]], 
		["Create$1", [System.IO.Stream, System.Xml.XmlWriterSettings]], 
		["Create$2", [System.IO.TextWriter]], 
		["Create$3", [System.IO.TextWriter, System.Xml.XmlWriterSettings]], 
		["Create$4", [System.Text.StringBuilder]], 
		["Create$5", [System.Text.StringBuilder, System.Xml.XmlWriterSettings]], 
		["Create$6", [System.Xml.XmlWriter]], 
		["Create$7", [System.Xml.XmlWriter, System.Xml.XmlWriterSettings]]
	]);
JSIL.MakeProperty(System.Xml.XmlWriter.prototype, "Settings", 
	System.Xml.XmlWriter.prototype.get_Settings, null);
JSIL.MakeProperty(System.Xml.XmlWriter.prototype, "WriteState", 
	System.Xml.XmlWriter.prototype.get_WriteState, null);
JSIL.MakeProperty(System.Xml.XmlWriter.prototype, "XmlSpace", 
	System.Xml.XmlWriter.prototype.get_XmlSpace, null);
JSIL.MakeProperty(System.Xml.XmlWriter.prototype, "XmlLang", 
	System.Xml.XmlWriter.prototype.get_XmlLang, null);
Object.defineProperty(System.Xml.XmlWriter, "WriteNodeBufferSize", {
		"value": 1024}
);
System.Xml.XmlWriter.prototype.writeNodeBuffer = null;

$asm07.System.Xml.XmlWrappingWriter.prototype._ctor = function (baseWriter) {
	System.Xml.XmlWriter.prototype._ctor.call(this);
	this.writer = baseWriter;
};
$asm07.System.Xml.XmlWrappingWriter.prototype.get_Settings = function () {
	return this.writer.Settings;
};
$asm07.System.Xml.XmlWrappingWriter.prototype.get_WriteState = function () {
	return this.writer.WriteState;
};
$asm07.System.Xml.XmlWrappingWriter.prototype.get_XmlSpace = function () {
	return this.writer.XmlSpace;
};
$asm07.System.Xml.XmlWrappingWriter.prototype.get_XmlLang = function () {
	return this.writer.XmlLang;
};
$asm07.System.Xml.XmlWrappingWriter.prototype.WriteStartDocument$0 = function () {
	this.writer.WriteStartDocument$0();
};
$asm07.System.Xml.XmlWrappingWriter.prototype.WriteStartDocument$1 = function (standalone) {
	this.writer.WriteStartDocument$1(standalone);
};
$asm07.System.Xml.XmlWrappingWriter.prototype.WriteEndDocument = function () {
	this.writer.WriteEndDocument();
};
$asm07.System.Xml.XmlWrappingWriter.prototype.WriteDocType = function (name, pubid, sysid, subset) {
	this.writer.WriteDocType(name, pubid, sysid, subset);
};
$asm07.System.Xml.XmlWrappingWriter.prototype.WriteStartElement = function (prefix, localName, ns) {
	this.writer.WriteStartElement$1(prefix, localName, ns);
};
$asm07.System.Xml.XmlWrappingWriter.prototype.WriteEndElement = function () {
	this.writer.WriteEndElement();
};
$asm07.System.Xml.XmlWrappingWriter.prototype.WriteFullEndElement = function () {
	this.writer.WriteFullEndElement();
};
$asm07.System.Xml.XmlWrappingWriter.prototype.WriteStartAttribute = function (prefix, localName, ns) {
	this.writer.WriteStartAttribute$1(prefix, localName, ns);
};
$asm07.System.Xml.XmlWrappingWriter.prototype.WriteEndAttribute = function () {
	this.writer.WriteEndAttribute();
};
$asm07.System.Xml.XmlWrappingWriter.prototype.WriteCData = function (text) {
	this.writer.WriteCData(text);
};
$asm07.System.Xml.XmlWrappingWriter.prototype.WriteComment = function (text) {
	this.writer.WriteComment(text);
};
$asm07.System.Xml.XmlWrappingWriter.prototype.WriteProcessingInstruction = function (name, text) {
	this.writer.WriteProcessingInstruction(name, text);
};
$asm07.System.Xml.XmlWrappingWriter.prototype.WriteEntityRef = function (name) {
	this.writer.WriteEntityRef(name);
};
$asm07.System.Xml.XmlWrappingWriter.prototype.WriteCharEntity = function (ch) {
	this.writer.WriteCharEntity(ch);
};
$asm07.System.Xml.XmlWrappingWriter.prototype.WriteWhitespace = function (ws) {
	this.writer.WriteWhitespace(ws);
};
$asm07.System.Xml.XmlWrappingWriter.prototype.WriteString = function (text) {
	this.writer.WriteString(text);
};
$asm07.System.Xml.XmlWrappingWriter.prototype.WriteSurrogateCharEntity = function (lowChar, highChar) {
	this.writer.WriteSurrogateCharEntity(lowChar, highChar);
};
$asm07.System.Xml.XmlWrappingWriter.prototype.WriteChars = function (buffer, index, count) {
	this.writer.WriteChars(buffer, index, count);
};
$asm07.System.Xml.XmlWrappingWriter.prototype.WriteRaw$0 = function (buffer, index, count) {
	this.writer.WriteRaw$0(buffer, index, count);
};
$asm07.System.Xml.XmlWrappingWriter.prototype.WriteRaw$1 = function (data) {
	this.writer.WriteRaw$1(data);
};
$asm07.System.Xml.XmlWrappingWriter.prototype.WriteBase64 = function (buffer, index, count) {
	this.writer.WriteBase64(buffer, index, count);
};
$asm07.System.Xml.XmlWrappingWriter.prototype.Close = function () {
	this.writer.Close();
};
$asm07.System.Xml.XmlWrappingWriter.prototype.Flush = function () {
	this.writer.Flush();
};
$asm07.System.Xml.XmlWrappingWriter.prototype.LookupPrefix = function (ns) {
	return this.writer.LookupPrefix(ns);
};
$asm07.System.Xml.XmlWrappingWriter.prototype.WriteValue$0 = function (value) {
	this.writer.WriteValue$0(value);
};
$asm07.System.Xml.XmlWrappingWriter.prototype.WriteValue$1 = function (value) {
	this.writer.WriteValue$1(value);
};
$asm07.System.Xml.XmlWrappingWriter.prototype.WriteValue$2 = function (value) {
	this.writer.WriteValue$2(value);
};
$asm07.System.Xml.XmlWrappingWriter.prototype.WriteValue$3 = function (value) {
	this.writer.WriteValue$3(value);
};
$asm07.System.Xml.XmlWrappingWriter.prototype.WriteValue$4 = function (value) {
	this.writer.WriteValue$4(value);
};
$asm07.System.Xml.XmlWrappingWriter.prototype.WriteValue$5 = function (value) {
	this.writer.WriteValue$5(value);
};
$asm07.System.Xml.XmlWrappingWriter.prototype.WriteValue$6 = function (value) {
	this.writer.WriteValue$6(value);
};
$asm07.System.Xml.XmlWrappingWriter.prototype.WriteValue$7 = function (value) {
	this.writer.WriteValue$7(value);
};
$asm07.System.Xml.XmlWrappingWriter.prototype.WriteValue$8 = function (value) {
	this.writer.WriteValue$8(value);
};
$asm07.System.Xml.XmlWrappingWriter.prototype.Dispose = function (disposing) {
	if (disposing) {
		this.writer.IDisposable_Dispose();
	}
};
JSIL.OverloadedMethod($asm07.System.Xml.XmlWrappingWriter.prototype, "WriteStartDocument", [
		["WriteStartDocument$0", []], 
		["WriteStartDocument$1", [System.Boolean]]
	]);
JSIL.OverloadedMethod($asm07.System.Xml.XmlWrappingWriter.prototype, "WriteRaw", [
		["WriteRaw$0", [System.Array.Of(System.Char), System.Int32, System.Int32]], 
		["WriteRaw$1", [System.String]]
	]);
JSIL.OverloadedMethod($asm07.System.Xml.XmlWrappingWriter.prototype, "WriteValue", [
		["WriteValue$0", [System.Object]], 
		["WriteValue$1", [System.String]], 
		["WriteValue$2", [System.Boolean]], 
		["WriteValue$3", [System.DateTime]], 
		["WriteValue$4", [System.Double]], 
		["WriteValue$5", [System.Single]], 
		["WriteValue$6", [System.Decimal]], 
		["WriteValue$7", [System.Int32]], 
		["WriteValue$8", [System.Int64]]
	]);
JSIL.MakeProperty($asm07.System.Xml.XmlWrappingWriter.prototype, "Settings", 
	$asm07.System.Xml.XmlWrappingWriter.prototype.get_Settings, null);
JSIL.MakeProperty($asm07.System.Xml.XmlWrappingWriter.prototype, "WriteState", 
	$asm07.System.Xml.XmlWrappingWriter.prototype.get_WriteState, null);
JSIL.MakeProperty($asm07.System.Xml.XmlWrappingWriter.prototype, "XmlSpace", 
	$asm07.System.Xml.XmlWrappingWriter.prototype.get_XmlSpace, null);
JSIL.MakeProperty($asm07.System.Xml.XmlWrappingWriter.prototype, "XmlLang", 
	$asm07.System.Xml.XmlWrappingWriter.prototype.get_XmlLang, null);
$asm07.System.Xml.XmlWrappingWriter.prototype.writer = null;

$asm07.System.Xml.XmlCharCheckingWriter.prototype._ctor = function (baseWriter, checkValues, checkNames, replaceNewLines, newLineChars) {
	$asm07.System.Xml.XmlWrappingWriter.prototype._ctor.call(this, baseWriter);
	this.checkValues = checkValues;
	this.checkNames = checkNames;
	this.replaceNewLines = replaceNewLines;
	this.newLineChars = newLineChars;
	if (checkValues) {
		this.xmlCharType = $asm07.System.Xml.XmlCharType.Instance.MemberwiseClone();
	}
};
$asm07.System.Xml.XmlCharCheckingWriter.prototype.get_Settings = function () {
	var xmlWriterSettings = this.writer.Settings;
	xmlWriterSettings = xmlWriterSettings ? xmlWriterSettings.Clone() : new System.Xml.XmlWriterSettings();
	if (this.checkValues) {
		xmlWriterSettings.CheckCharacters = true;
	}
	if (this.replaceNewLines) {
		xmlWriterSettings.NewLineHandling = System.Xml.NewLineHandling.Replace;
		xmlWriterSettings.NewLineChars = this.newLineChars;
	}
	xmlWriterSettings.ReadOnly = true;
	return xmlWriterSettings;
};
$asm07.System.Xml.XmlCharCheckingWriter.prototype.WriteDocType = function (name, pubid, sysid, subset) {
	var invCharPos = 0;
	if (this.checkNames) {
		this.ValidateQName(name);
	}
	if (this.checkValues) {
		if (!((pubid === null) || ((invCharPos = this.xmlCharType.IsPublicId(pubid)) < 0))) {
			throw System.Xml.XmlConvert.CreateInvalidCharException$2(pubid, invCharPos);
		}
		if (sysid !== null) {
			this.CheckCharacters$0(sysid);
		}
		if (subset !== null) {
			this.CheckCharacters$0(subset);
		}
	}
	if (this.replaceNewLines) {
		sysid = this.ReplaceNewLines$0(sysid);
		pubid = this.ReplaceNewLines$0(pubid);
		subset = this.ReplaceNewLines$0(subset);
	}
	this.writer.WriteDocType(name, pubid, sysid, subset);
};
$asm07.System.Xml.XmlCharCheckingWriter.prototype.WriteStartElement = function (prefix, localName, ns) {
	if (this.checkNames) {
		if (!((localName !== null) && (localName.length !== 0))) {
			throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_EmptyLocalName")]);
		}
		this.ValidateNCName(localName);
		if (!((prefix === null) || (prefix.length <= 0))) {
			this.ValidateNCName(prefix);
		}
	}
	this.writer.WriteStartElement$1(prefix, localName, ns);
};
$asm07.System.Xml.XmlCharCheckingWriter.prototype.WriteStartAttribute = function (prefix, localName, ns) {
	if (this.checkNames) {
		if (!((localName !== null) && (localName.length !== 0))) {
			throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_EmptyLocalName")]);
		}
		this.ValidateNCName(localName);
		if (!((prefix === null) || (prefix.length <= 0))) {
			this.ValidateNCName(prefix);
		}
	}
	this.writer.WriteStartAttribute$1(prefix, localName, ns);
};
$asm07.System.Xml.XmlCharCheckingWriter.prototype.WriteCData = function (text) {
	var num = 0;
	if (text !== null) {
		if (this.checkValues) {
			this.CheckCharacters$0(text);
		}
		if (this.replaceNewLines) {
			text = this.ReplaceNewLines$0(text);
		}
	__loop0__: 
		for (; (num = text.IndexOf$6("]]>", System.StringComparison.Ordinal)) >= 0; text = text.Substring$0((num + 2))) {
			this.writer.WriteCData(text.Substring$1(0, (num + 2)));
		}
	}
	this.writer.WriteCData(text);
};
$asm07.System.Xml.XmlCharCheckingWriter.prototype.WriteComment = function (text) {
	if (text !== null) {
		if (this.checkValues) {
			this.CheckCharacters$0(text);
			text = this.InterleaveInvalidChars(text, "-", "-");
		}
		if (this.replaceNewLines) {
			text = this.ReplaceNewLines$0(text);
		}
	}
	this.writer.WriteComment(text);
};
$asm07.System.Xml.XmlCharCheckingWriter.prototype.WriteProcessingInstruction = function (name, text) {
	if (this.checkNames) {
		this.ValidateNCName(name);
	}
	if (text !== null) {
		if (this.checkValues) {
			this.CheckCharacters$0(text);
			text = this.InterleaveInvalidChars(text, "?", ">");
		}
		if (this.replaceNewLines) {
			text = this.ReplaceNewLines$0(text);
		}
	}
	this.writer.WriteProcessingInstruction(name, text);
};
$asm07.System.Xml.XmlCharCheckingWriter.prototype.WriteEntityRef = function (name) {
	if (this.checkNames) {
		this.ValidateQName(name);
	}
	this.writer.WriteEntityRef(name);
};
$asm07.System.Xml.XmlCharCheckingWriter.prototype.WriteWhitespace = function (ws) {
	var invCharIndex = 0;
	if (ws === null) {
		ws = System.String.Empty;
	}
	if (!(!this.checkNames || ((invCharIndex = this.xmlCharType.IsOnlyWhitespaceWithPos(ws)) === -1))) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm07.System.Xml.Res.GetString$0("Xml_InvalidWhitespaceCharacter", System.Xml.XmlException.BuildCharExceptionArgs$0(ws, invCharIndex))]);
	}
	if (this.replaceNewLines) {
		ws = this.ReplaceNewLines$0(ws);
	}
	this.writer.WriteWhitespace(ws);
};
$asm07.System.Xml.XmlCharCheckingWriter.prototype.WriteString = function (text) {
	if (text !== null) {
		if (this.checkValues) {
			this.CheckCharacters$0(text);
		}
		if (!(!this.replaceNewLines || (this.WriteState === System.Xml.WriteState.Attribute))) {
			text = this.ReplaceNewLines$0(text);
		}
	}
	this.writer.WriteString(text);
};
$asm07.System.Xml.XmlCharCheckingWriter.prototype.WriteSurrogateCharEntity = function (lowChar, highChar) {
	this.writer.WriteSurrogateCharEntity(lowChar, highChar);
};
$asm07.System.Xml.XmlCharCheckingWriter.prototype.WriteChars = function (buffer, index, count) {
	if (buffer === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["buffer"]);
	}
	if (index < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["index"]);
	}
	if (count < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["count"]);
	}
	if (count > (buffer.length - index)) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["count"]);
	}
	if (this.checkValues) {
		this.CheckCharacters$1(buffer, index, count);
	}
	if (!(!this.replaceNewLines || (this.WriteState === System.Xml.WriteState.Attribute))) {
		var text = this.ReplaceNewLines$1(buffer, index, count);
		if (text !== null) {
			this.WriteString(text);
			return;
		}
	}
	this.writer.WriteChars(buffer, index, count);
};
$asm07.System.Xml.XmlCharCheckingWriter.prototype.WriteNmToken = function (name) {
	if (this.checkNames) {
		if (!((name !== null) && (name.length !== 0))) {
			throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_EmptyName")]);
		}
		System.Xml.XmlConvert.VerifyNMTOKEN$0(name);
	}
	this.writer.WriteNmToken(name);
};
$asm07.System.Xml.XmlCharCheckingWriter.prototype.WriteName = function (name) {
	if (this.checkNames) {
		System.Xml.XmlConvert.VerifyQName(name, $asm07.System.Xml.ExceptionType.XmlException);
	}
	this.writer.WriteName(name);
};
$asm07.System.Xml.XmlCharCheckingWriter.prototype.WriteQualifiedName = function (localName, ns) {
	if (this.checkNames) {
		this.ValidateNCName(localName);
	}
	this.writer.WriteQualifiedName(localName, ns);
};
$asm07.System.Xml.XmlCharCheckingWriter.prototype.CheckCharacters$0 = function (str) {
	System.Xml.XmlConvert.VerifyCharData$0(str, $asm07.System.Xml.ExceptionType.ArgumentException);
};
$asm07.System.Xml.XmlCharCheckingWriter.prototype.CheckCharacters$1 = function (data, offset, len) {
	System.Xml.XmlConvert.VerifyCharData$2(data, offset, len, $asm07.System.Xml.ExceptionType.ArgumentException);
};
$asm07.System.Xml.XmlCharCheckingWriter.prototype.ValidateNCName = function (ncname) {
	if (ncname.length === 0) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_EmptyName")]);
	}
	var num = $asm07.System.Xml.ValidateNames.ParseNCName$0(ncname, 0);
	if (num !== ncname.length) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm07.System.Xml.Res.GetString$0((num === 0) ? "Xml_BadStartNameChar" : "Xml_BadNameChar", System.Xml.XmlException.BuildCharExceptionArgs$0(ncname, num))]);
	}
};
$asm07.System.Xml.XmlCharCheckingWriter.prototype.ValidateQName = function (name) {
	var num2 = new JSIL.Variable(0);
	if (name.length === 0) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_EmptyName")]);
	}
	var num = $asm07.System.Xml.ValidateNames.ParseQName(name, 0, /* ref */ num2);
	if (num !== name.length) {
		var name2 = ((num === 0) || 
			((num2.value > -1) && 
				(num === (num2.value + 1)))) ? "Xml_BadStartNameChar" : "Xml_BadNameChar";
		throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm07.System.Xml.Res.GetString$0(name2, System.Xml.XmlException.BuildCharExceptionArgs$0(name, num))]);
	}
};
$asm07.System.Xml.XmlCharCheckingWriter.prototype.ReplaceNewLines$0 = function (str) {
	var __label0__ = null;
__step0__: 
	while (true) {
		switch (__label0__) {
			case null:
				var c = 0;
				__label0__ = "__entry0__";
				continue __step0__;
				break;
			case "__entry0__":
				if (str === null) {
					return null;
				}
				var stringBuilder = null;
				var num = 0;
			__loop0__: 
				for (var i = 0; i < str.length; ) {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								if ((c = (str[i])) < " ") {
									if (c === "\n") {
										if (this.newLineChars == "\n") {
											__label1__ = "IL_F7";
											continue __step1__;
										}
										if (stringBuilder === null) {
											stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$1", [(str.length + 5)]);
										}
										stringBuilder.Append$3(str, num, (i - num));
									} else {
										if (c !== "\r") {
											__label1__ = "IL_F7";
											continue __step1__;
										}
										if (!(((i + 1) >= str.length) || ((str[(i + 1)]) !== "\n"))) {
											if (this.newLineChars == "\r\n") {
												++i;
												__label1__ = "IL_F7";
												continue __step1__;
											}
											if (stringBuilder === null) {
												stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$1", [(str.length + 5)]);
											}
											stringBuilder.Append$3(str, num, (i - num));
											++i;
										} else {
											if (this.newLineChars == "\r") {
												__label1__ = "IL_F7";
												continue __step1__;
											}
											if (stringBuilder === null) {
												stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$1", [(str.length + 5)]);
											}
											stringBuilder.Append$3(str, num, (i - num));
										}
									}
									stringBuilder.Append$2(this.newLineChars);
									num = (i + 1);
								}
								__label1__ = "IL_F7";
								continue __step1__;
								break;
							case "IL_F7":
								++i;
								break __step1__;
						}
					}
				}
				if (stringBuilder === null) {
					return str;
				}
				stringBuilder.Append$3(str, num, (i - num));
				return stringBuilder.toString();
				break __step0__;
		}
	}
};
$asm07.System.Xml.XmlCharCheckingWriter.prototype.ReplaceNewLines$1 = function (data, offset, len) {
	var __label0__ = null;
__step0__: 
	while (true) {
		switch (__label0__) {
			case null:
				var c = 0;
				__label0__ = "__entry0__";
				continue __step0__;
				break;
			case "__entry0__":
				if (data === null) {
					return null;
				}
				var stringBuilder = null;
				var num = offset;
				var num2 = (offset + len);
			__loop0__: 
				for (var i = offset; i < num2; ) {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								if ((c = data[i]) < " ") {
									if (c === "\n") {
										if (this.newLineChars == "\n") {
											__label1__ = "IL_DF";
											continue __step1__;
										}
										if (stringBuilder === null) {
											stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$1", [(len + 5)]);
										}
										stringBuilder.Append$1(data, num, (i - num));
									} else {
										if (c !== "\r") {
											__label1__ = "IL_DF";
											continue __step1__;
										}
										if (!(((i + 1) >= num2) || (data[(i + 1)] !== "\n"))) {
											if (this.newLineChars == "\r\n") {
												++i;
												__label1__ = "IL_DF";
												continue __step1__;
											}
											if (stringBuilder === null) {
												stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$1", [(len + 5)]);
											}
											stringBuilder.Append$1(data, num, (i - num));
											++i;
										} else {
											if (this.newLineChars == "\r") {
												__label1__ = "IL_DF";
												continue __step1__;
											}
											if (stringBuilder === null) {
												stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$1", [(len + 5)]);
											}
											stringBuilder.Append$1(data, num, (i - num));
										}
									}
									stringBuilder.Append$2(this.newLineChars);
									num = (i + 1);
								}
								__label1__ = "IL_DF";
								continue __step1__;
								break;
							case "IL_DF":
								++i;
								break __step1__;
						}
					}
				}
				if (stringBuilder === null) {
					return null;
				}
				stringBuilder.Append$1(data, num, (i - num));
				return stringBuilder.toString();
				break __step0__;
		}
	}
};
$asm07.System.Xml.XmlCharCheckingWriter.prototype.InterleaveInvalidChars = function (text, invChar1, invChar2) {
	var stringBuilder = null;
	var num = 0;
__loop0__: 
	for (var i = 0; i < text.length; ++i) {
		if (!(((text[i]) !== invChar2) || 
				(i <= 0) || ((text[(i - 1)]) !== invChar1))) {
			if (stringBuilder === null) {
				stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$1", [(text.length + 5)]);
			}
			stringBuilder.Append$3(text, num, (i - num));
			stringBuilder.Append$7(" ");
			num = i;
		}
	}
	if (stringBuilder !== null) {
		stringBuilder.Append$3(text, num, (i - num));
		if (!((i <= 0) || ((text[(i - 1)]) !== invChar1))) {
			stringBuilder.Append$7(" ");
		}
		return stringBuilder.toString();
	}
	if (!((i === 0) || ((text[(i - 1)]) !== invChar1))) {
		return JSIL.ConcatString(text, " ");
	}
	return text;
};
JSIL.OverloadedMethod($asm07.System.Xml.XmlCharCheckingWriter.prototype, "CheckCharacters", [
		["CheckCharacters$0", [System.String]], 
		["CheckCharacters$1", [System.Array.Of(System.Char), System.Int32, System.Int32]]
	]);
JSIL.OverloadedMethod($asm07.System.Xml.XmlCharCheckingWriter.prototype, "ReplaceNewLines", [
		["ReplaceNewLines$0", [System.String]], 
		["ReplaceNewLines$1", [System.Array.Of(System.Char), System.Int32, System.Int32]]
	]);
JSIL.MakeProperty($asm07.System.Xml.XmlCharCheckingWriter.prototype, "Settings", 
	$asm07.System.Xml.XmlCharCheckingWriter.prototype.get_Settings, null);
$asm07.System.Xml.XmlCharCheckingWriter.prototype.checkValues = false;
$asm07.System.Xml.XmlCharCheckingWriter.prototype.checkNames = false;
$asm07.System.Xml.XmlCharCheckingWriter.prototype.replaceNewLines = false;
$asm07.System.Xml.XmlCharCheckingWriter.prototype.newLineChars = null;

$asm07.System.Xml.XmlRawWriter.prototype.WriteStartDocument$0 = function () {
	throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_InvalidOperation")]);
};
$asm07.System.Xml.XmlRawWriter.prototype.WriteStartDocument$1 = function (standalone) {
	throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_InvalidOperation")]);
};
$asm07.System.Xml.XmlRawWriter.prototype.WriteEndDocument = function () {
	throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_InvalidOperation")]);
};
$asm07.System.Xml.XmlRawWriter.prototype.WriteEndElement$0 = function () {
	throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_InvalidOperation")]);
};
$asm07.System.Xml.XmlRawWriter.prototype.WriteFullEndElement$0 = function () {
	throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_InvalidOperation")]);
};
$asm07.System.Xml.XmlRawWriter.prototype.WriteBase64 = function (buffer, index, count) {
	if (this.base64Encoder === null) {
		this.base64Encoder = new $asm07.System.Xml.XmlRawWriterBase64Encoder(this);
	}
	this.base64Encoder.Encode(buffer, index, count);
};
$asm07.System.Xml.XmlRawWriter.prototype.LookupPrefix = function (ns) {
	throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_InvalidOperation")]);
};
$asm07.System.Xml.XmlRawWriter.prototype.get_WriteState = function () {
	throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_InvalidOperation")]);
};
$asm07.System.Xml.XmlRawWriter.prototype.get_XmlSpace = function () {
	throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_InvalidOperation")]);
};
$asm07.System.Xml.XmlRawWriter.prototype.get_XmlLang = function () {
	throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_InvalidOperation")]);
};
$asm07.System.Xml.XmlRawWriter.prototype.WriteNmToken = function (name) {
	throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_InvalidOperation")]);
};
$asm07.System.Xml.XmlRawWriter.prototype.WriteName = function (name) {
	throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_InvalidOperation")]);
};
$asm07.System.Xml.XmlRawWriter.prototype.WriteQualifiedName$0 = function (localName, ns) {
	throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_InvalidOperation")]);
};
$asm07.System.Xml.XmlRawWriter.prototype.WriteValue$0 = function (value) {
	if (value === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["value"]);
	}
	this.WriteString($asm07.System.Xml.Schema.XmlUntypedStringConverter.Instance.ToString(value, this.resolver));
};
$asm07.System.Xml.XmlRawWriter.prototype.WriteValue$1 = function (value) {
	this.WriteString(value);
};
$asm07.System.Xml.XmlRawWriter.prototype.WriteAttributes = function (reader, defattr) {
	throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_InvalidOperation")]);
};
$asm07.System.Xml.XmlRawWriter.prototype.WriteNode = function (reader, defattr) {
	throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_InvalidOperation")]);
};
$asm07.System.Xml.XmlRawWriter.prototype.get_NamespaceResolver = function () {
	return this.resolver;
};
$asm07.System.Xml.XmlRawWriter.prototype.set_NamespaceResolver = function (value) {
	this.resolver = value;
};
$asm07.System.Xml.XmlRawWriter.prototype.OnRootElement = function (conformanceLevel) {
};
$asm07.System.Xml.XmlRawWriter.prototype.WriteQualifiedName$1 = function (prefix, localName, ns) {
	if (prefix.length !== 0) {
		this.WriteString(prefix);
		this.WriteString(":");
	}
	this.WriteString(localName);
};
$asm07.System.Xml.XmlRawWriter.prototype.get_SupportsNamespaceDeclarationInChunks = function () {
	return false;
};
$asm07.System.Xml.XmlRawWriter.prototype.WriteStartNamespaceDeclaration = function (prefix) {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm07.System.Xml.XmlRawWriter.prototype.WriteEndNamespaceDeclaration = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm07.System.Xml.XmlRawWriter.prototype.WriteEndBase64 = function () {
	this.base64Encoder.Flush();
};
$asm07.System.Xml.XmlRawWriter.prototype.Close = function (currentState) {
	this.Close();
};
$asm07.System.Xml.XmlRawWriter.prototype._ctor = function () {
	System.Xml.XmlWriter.prototype._ctor.call(this);
};
JSIL.OverloadedMethod($asm07.System.Xml.XmlRawWriter.prototype, "WriteStartDocument", [
		["WriteStartDocument$0", []], 
		["WriteStartDocument$1", [System.Boolean]]
	]);
JSIL.OverloadedMethod($asm07.System.Xml.XmlRawWriter.prototype, "WriteEndElement", [
		["WriteEndElement$0", []], 
		["WriteEndElement$1", [System.String, System.String, System.String]]
	]);
JSIL.OverloadedMethod($asm07.System.Xml.XmlRawWriter.prototype, "WriteFullEndElement", [
		["WriteFullEndElement$0", []], 
		["WriteFullEndElement$1", [System.String, System.String, System.String]]
	]);
JSIL.OverloadedMethod($asm07.System.Xml.XmlRawWriter.prototype, "WriteQualifiedName", [
		["WriteQualifiedName$0", [System.String, System.String]], 
		["WriteQualifiedName$1", [System.String, System.String, System.String]]
	]);
JSIL.OverloadedMethod($asm07.System.Xml.XmlRawWriter.prototype, "WriteValue", [
		["WriteValue$0", [System.Object]], 
		["WriteValue$1", [System.String]]
	]);
JSIL.OverloadedMethod($asm07.System.Xml.XmlRawWriter.prototype, "WriteXmlDeclaration", [
		["WriteXmlDeclaration$0", [$asm07.System.Xml.XmlStandalone]], 
		["WriteXmlDeclaration$1", [System.String]]
	]);
JSIL.MakeProperty($asm07.System.Xml.XmlRawWriter.prototype, "WriteState", 
	$asm07.System.Xml.XmlRawWriter.prototype.get_WriteState, null);
JSIL.MakeProperty($asm07.System.Xml.XmlRawWriter.prototype, "XmlSpace", 
	$asm07.System.Xml.XmlRawWriter.prototype.get_XmlSpace, null);
JSIL.MakeProperty($asm07.System.Xml.XmlRawWriter.prototype, "XmlLang", 
	$asm07.System.Xml.XmlRawWriter.prototype.get_XmlLang, null);
JSIL.MakeProperty($asm07.System.Xml.XmlRawWriter.prototype, "NamespaceResolver", 
	$asm07.System.Xml.XmlRawWriter.prototype.get_NamespaceResolver, $asm07.System.Xml.XmlRawWriter.prototype.set_NamespaceResolver);
JSIL.MakeProperty($asm07.System.Xml.XmlRawWriter.prototype, "SupportsNamespaceDeclarationInChunks", 
	$asm07.System.Xml.XmlRawWriter.prototype.get_SupportsNamespaceDeclarationInChunks, null);
$asm07.System.Xml.XmlRawWriter.prototype.base64Encoder = null;
$asm07.System.Xml.XmlRawWriter.prototype.resolver = null;

$asm07.System.Xml.XmlEncodedRawTextWriter.prototype._ctor$0 = function (settings) {
	this.xmlCharType = $asm07.System.Xml.XmlCharType.Instance.MemberwiseClone();
	this.bufPos = 1;
	this.textPos = 1;
	this.bufLen = 6144;
	$asm07.System.Xml.XmlRawWriter.prototype._ctor.call(this);
	this.newLineHandling = settings.NewLineHandling;
	this.omitXmlDeclaration = settings.OmitXmlDeclaration;
	this.newLineChars = settings.NewLineChars;
	this.checkCharacters = settings.CheckCharacters;
	this.closeOutput = settings.CloseOutput;
	if (!(!this.checkCharacters || this.newLineHandling)) {
		this.ValidateContentChars(this.newLineChars, "NewLineChars", false);
	}
};
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype._ctor$1 = function (writer, settings) {
	this._ctor$0(settings);
	this.writer = writer;
	this.encoding = writer.Encoding;
	this.bufChars = JSIL.Array.New(System.Char, 6176);
};
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype._ctor$2 = function (stream, settings) {
	this._ctor$0(settings);
	this.stream = stream;
	this.encoding = settings.Encoding;
	this.bufChars = JSIL.Array.New(System.Char, 6176);
	this.bufBytes = JSIL.Array.New(System.Byte, this.bufChars.length);
	this.bufBytesUsed = 0;
	this.trackTextContent = true;
	this.inTextContent = false;
	this.lastMarkPos = 0;
	this.textContentMarks = JSIL.Array.New(System.Int32, 64);
	this.textContentMarks[0] = 1;
	this.charEntityFallback = new $asm07.System.Xml.CharEntityEncoderFallback();
	this.encoding = JSIL.Cast(settings.Encoding.Clone(), System.Text.Encoding);
	this.encoding.EncoderFallback = this.charEntityFallback;
	this.encoder = this.encoding.GetEncoder();
	if (!(stream.CanSeek && (stream.Position !== 0))) {
		var preamble = this.encoding.GetPreamble();
		if (preamble.length !== 0) {
			this.stream.Write(preamble, 0, preamble.length);
		}
	}
};
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.get_Settings = function () {
	return new System.Xml.XmlWriterSettings().__Initialize__({
			Encoding: this.encoding, 
			OmitXmlDeclaration: this.omitXmlDeclaration, 
			NewLineHandling: this.newLineHandling, 
			NewLineChars: this.newLineChars, 
			CloseOutput: this.closeOutput, 
			ConformanceLevel: System.Xml.ConformanceLevel.Auto, 
			CheckCharacters: this.checkCharacters, 
			ReadOnly: true}
	);
};
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.WriteXmlDeclaration$0 = function (standalone) {
	if (!(this.omitXmlDeclaration || this.autoXmlDeclaration)) {
		if (!(!this.trackTextContent || !this.inTextContent)) {
			this.ChangeTextContentMark(false);
		}
		this.RawText('<?xml version="');
		this.RawText("1.0");
		if (this.encoding !== null) {
			this.RawText('" encoding="');
			this.RawText(this.encoding.WebName);
		}
		if (JSIL.Cast(standalone, System.Boolean)) {
			this.RawText('" standalone="');
			this.RawText((standalone === $asm07.System.Xml.XmlStandalone.Yes) ? "yes" : "no");
		}
		this.RawText('"?>');
	}
};
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.WriteXmlDeclaration$1 = function (xmldecl) {
	if (!(this.omitXmlDeclaration || this.autoXmlDeclaration)) {
		this.WriteProcessingInstruction("xml", xmldecl);
	}
};
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.WriteDocType = function (name, pubid, sysid, subset) {
	if (!(!this.trackTextContent || !this.inTextContent)) {
		this.ChangeTextContentMark(false);
	}
	this.RawText("<!DOCTYPE ");
	this.RawText(name);
	if (pubid !== null) {
		this.RawText(' PUBLIC "');
		this.RawText(pubid);
		this.RawText('" "');
		if (sysid !== null) {
			this.RawText(sysid);
		}
		this.bufChars[this.bufPos++] = '"';
	} else if (sysid !== null) {
		this.RawText(' SYSTEM "');
		this.RawText(sysid);
		this.bufChars[this.bufPos++] = '"';
	} else {
		this.bufChars[this.bufPos++] = " ";
	}
	if (subset !== null) {
		this.bufChars[this.bufPos++] = "[";
		this.RawText(subset);
		this.bufChars[this.bufPos++] = "]";
	}
	this.bufChars[this.bufPos++] = ">";
};
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.WriteStartElement = function (prefix, localName, ns) {
	if (!(!this.trackTextContent || !this.inTextContent)) {
		this.ChangeTextContentMark(false);
	}
	this.bufChars[this.bufPos++] = "<";
	if (!((prefix === null) || (prefix.length === 0))) {
		this.RawText(prefix);
		this.bufChars[this.bufPos++] = ":";
	}
	this.RawText(localName);
	this.attrEndPos = this.bufPos;
};
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.StartElementContent = function () {
	this.bufChars[this.bufPos++] = ">";
	this.contentPos = this.bufPos;
};
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.WriteEndElement = function (prefix, localName, ns) {
	if (!(!this.trackTextContent || !this.inTextContent)) {
		this.ChangeTextContentMark(false);
	}
	if (this.contentPos !== this.bufPos) {
		this.bufChars[this.bufPos++] = "<";
		this.bufChars[this.bufPos++] = "/";
		if (!((prefix === null) || (prefix.length === 0))) {
			this.RawText(prefix);
			this.bufChars[this.bufPos++] = ":";
		}
		this.RawText(localName);
		this.bufChars[this.bufPos++] = ">";
		return;
	}
	--this.bufPos;
	this.bufChars[this.bufPos++] = " ";
	this.bufChars[this.bufPos++] = "/";
	this.bufChars[this.bufPos++] = ">";
};
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.WriteFullEndElement = function (prefix, localName, ns) {
	if (!(!this.trackTextContent || !this.inTextContent)) {
		this.ChangeTextContentMark(false);
	}
	this.bufChars[this.bufPos++] = "<";
	this.bufChars[this.bufPos++] = "/";
	if (!((prefix === null) || (prefix.length === 0))) {
		this.RawText(prefix);
		this.bufChars[this.bufPos++] = ":";
	}
	this.RawText(localName);
	this.bufChars[this.bufPos++] = ">";
};
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.WriteStartAttribute = function (prefix, localName, ns) {
	if (!(!this.trackTextContent || !this.inTextContent)) {
		this.ChangeTextContentMark(false);
	}
	if (this.attrEndPos === this.bufPos) {
		this.bufChars[this.bufPos++] = " ";
	}
	if (!((prefix === null) || (prefix.length <= 0))) {
		this.RawText(prefix);
		this.bufChars[this.bufPos++] = ":";
	}
	this.RawText(localName);
	this.bufChars[this.bufPos++] = "=";
	this.bufChars[this.bufPos++] = '"';
	this.inAttributeValue = true;
};
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.WriteEndAttribute = function () {
	if (!(!this.trackTextContent || !this.inTextContent)) {
		this.ChangeTextContentMark(false);
	}
	this.bufChars[this.bufPos++] = '"';
	this.inAttributeValue = false;
	this.attrEndPos = this.bufPos;
};
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.WriteNamespaceDeclaration = function (prefix, namespaceName) {
	this.WriteStartNamespaceDeclaration(prefix);
	this.WriteString(namespaceName);
	this.WriteEndNamespaceDeclaration();
};
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.get_SupportsNamespaceDeclarationInChunks = function () {
	return true;
};
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.WriteStartNamespaceDeclaration = function (prefix) {
	if (!(!this.trackTextContent || !this.inTextContent)) {
		this.ChangeTextContentMark(false);
	}
	if (this.attrEndPos === this.bufPos) {
		this.bufChars[this.bufPos++] = " ";
	}
	if (prefix.length === 0) {
		this.RawText('xmlns="');
	} else {
		this.RawText("xmlns:");
		this.RawText(prefix);
		this.bufChars[this.bufPos++] = "=";
		this.bufChars[this.bufPos++] = '"';
	}
	this.inAttributeValue = true;
	if (!(!this.trackTextContent || this.inTextContent)) {
		this.ChangeTextContentMark(true);
	}
};
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.WriteEndNamespaceDeclaration = function () {
	if (!(!this.trackTextContent || !this.inTextContent)) {
		this.ChangeTextContentMark(false);
	}
	this.inAttributeValue = false;
	this.bufChars[this.bufPos++] = '"';
	this.attrEndPos = this.bufPos;
};
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.WriteCData = function (text) {
	if (!(!this.trackTextContent || !this.inTextContent)) {
		this.ChangeTextContentMark(false);
	}
	if (!(!this.mergeCDataSections || (this.bufPos !== this.cdataPos))) {
		this.bufPos -= 3;
	} else {
		this.bufChars[this.bufPos++] = "<";
		this.bufChars[this.bufPos++] = "!";
		this.bufChars[this.bufPos++] = "[";
		this.bufChars[this.bufPos++] = "C";
		this.bufChars[this.bufPos++] = "D";
		this.bufChars[this.bufPos++] = "A";
		this.bufChars[this.bufPos++] = "T";
		this.bufChars[this.bufPos++] = "A";
		this.bufChars[this.bufPos++] = "[";
	}
	this.WriteCDataSection(text);
	this.bufChars[this.bufPos++] = "]";
	this.bufChars[this.bufPos++] = "]";
	this.bufChars[this.bufPos++] = ">";
	this.textPos = this.bufPos;
	this.cdataPos = this.bufPos;
};
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.WriteComment = function (text) {
	if (!(!this.trackTextContent || !this.inTextContent)) {
		this.ChangeTextContentMark(false);
	}
	this.bufChars[this.bufPos++] = "<";
	this.bufChars[this.bufPos++] = "!";
	this.bufChars[this.bufPos++] = "-";
	this.bufChars[this.bufPos++] = "-";
	this.WriteCommentOrPi(text, 45);
	this.bufChars[this.bufPos++] = "-";
	this.bufChars[this.bufPos++] = "-";
	this.bufChars[this.bufPos++] = ">";
};
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.WriteProcessingInstruction = function (name, text) {
	if (!(!this.trackTextContent || !this.inTextContent)) {
		this.ChangeTextContentMark(false);
	}
	this.bufChars[this.bufPos++] = "<";
	this.bufChars[this.bufPos++] = "?";
	this.RawText(name);
	if (text.length > 0) {
		this.bufChars[this.bufPos++] = " ";
		this.WriteCommentOrPi(text, 63);
	}
	this.bufChars[this.bufPos++] = "?";
	this.bufChars[this.bufPos++] = ">";
};
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.WriteEntityRef = function (name) {
	if (!(!this.trackTextContent || !this.inTextContent)) {
		this.ChangeTextContentMark(false);
	}
	this.bufChars[this.bufPos++] = "&";
	this.RawText(name);
	this.bufChars[this.bufPos++] = ";";
	if (this.bufPos > this.bufLen) {
		this.FlushBuffer();
	}
	this.textPos = this.bufPos;
};
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.WriteCharEntity = function (ch) {
	var s = ((ch.charCodeAt(0)).toString());
	if (!(!this.checkCharacters || this.xmlCharType.IsCharData(ch))) {
		throw System.Xml.XmlConvert.CreateInvalidCharException$4(ch, "\0");
	}
	if (!(!this.trackTextContent || !this.inTextContent)) {
		this.ChangeTextContentMark(false);
	}
	this.bufChars[this.bufPos++] = "&";
	this.bufChars[this.bufPos++] = "#";
	this.bufChars[this.bufPos++] = "x";
	this.RawText(s);
	this.bufChars[this.bufPos++] = ";";
	if (this.bufPos > this.bufLen) {
		this.FlushBuffer();
	}
	this.textPos = this.bufPos;
};
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.WriteWhitespace = JSIL.UntranslatableFunction("System.Void System.Xml.XmlEncodedRawTextWriter::WriteWhitespace(System.String)");
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.WriteString = JSIL.UntranslatableFunction("System.Void System.Xml.XmlEncodedRawTextWriter::WriteString(System.String)");
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.WriteSurrogateCharEntity = function (lowChar, highChar) {
	if (!(!this.trackTextContent || !this.inTextContent)) {
		this.ChangeTextContentMark(false);
	}
	var num = $asm07.System.Xml.XmlCharType.CombineSurrogateChar(lowChar.charCodeAt(0), highChar.charCodeAt(0));
	this.bufChars[this.bufPos++] = "&";
	this.bufChars[this.bufPos++] = "#";
	this.bufChars[this.bufPos++] = "x";
	this.RawText((num).toString());
	this.bufChars[this.bufPos++] = ";";
	this.textPos = this.bufPos;
};
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.WriteChars = JSIL.UntranslatableFunction("System.Void System.Xml.XmlEncodedRawTextWriter::WriteChars(System.Char[],System.Int32,System.Int32)");
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.WriteRaw$0 = JSIL.UntranslatableFunction("System.Void System.Xml.XmlEncodedRawTextWriter::WriteRaw(System.Char[],System.Int32,System.Int32)");
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.WriteRaw$1 = JSIL.UntranslatableFunction("System.Void System.Xml.XmlEncodedRawTextWriter::WriteRaw(System.String)");
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.Close = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				try {
					this.FlushBuffer();
					this.FlushEncoder();
				} finally {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								this.writeToNull = true;
								if (this.stream !== null) {
									try {
										this.stream.Flush();
										__label1__ = "IL_7B";
										continue __step1__;
									} finally {
										try {
											if (this.closeOutput) {
												this.stream.Close();
											}
										} finally {
											this.stream = null;
										}
									}
								}
								if (this.writer !== null) {
									try {
										this.writer.Flush();
									} finally {
										try {
											if (this.closeOutput) {
												this.writer.Close();
											}
										} finally {
											this.writer = null;
										}
									}
								}
								__label1__ = "IL_7B";
								continue __step1__;
								break;
							case "IL_7B":
								break __step1__;
						}
					}
				}
				break __step0__;
		}
	}
};
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.Flush = function () {
	this.FlushBuffer();
	this.FlushEncoder();
	if (this.stream !== null) {
		this.stream.Flush();
		return;
	}
	if (this.writer !== null) {
		this.writer.Flush();
	}
};
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.FlushBuffer = function () {
	try {
		try {
			if (!this.writeToNull) {
				if (this.stream !== null) {
					if (this.trackTextContent) {
						this.charEntityFallback.Reset(this.textContentMarks, this.lastMarkPos);
						if (this.lastMarkPos & 1) {
							this.textContentMarks[1] = 1;
							this.lastMarkPos = 1;
						} else {
							this.lastMarkPos = 0;
						}
					}
					this.EncodeChars(1, this.bufPos, true);
				} else {
					this.writer.Write$2(this.bufChars, 1, (this.bufPos - 1));
				}
			}
		} catch ($exception) {
			this.writeToNull = true;
			throw $exception;
		}
	} finally {
		this.bufChars[0] = this.bufChars[(this.bufPos - 1)];
		this.textPos = (this.textPos === this.bufPos) ? 1 : 0;
		this.attrEndPos = (this.attrEndPos === this.bufPos) ? 1 : 0;
		this.contentPos = 0;
		this.cdataPos = 0;
		this.bufPos = 1;
	}
};
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.EncodeChars = function (startOffset, endOffset, writeAllToStream) {
	var num = new JSIL.Variable(0), num2 = new JSIL.Variable(0), flag = new JSIL.Variable(false);
__loop0__: 
	while (startOffset < endOffset) {
		if (this.charEntityFallback !== null) {
			this.charEntityFallback.StartOffset = startOffset;
		}
		this.encoder.Convert(
			this.bufChars, 
			startOffset, 
			(endOffset - startOffset), 
			this.bufBytes, 
			this.bufBytesUsed, 
			(this.bufBytes.length - this.bufBytesUsed), 
			false, 
			/* ref */ num, 
			/* ref */ num2, 
			/* ref */ flag
		);
		startOffset += num.value;
		this.bufBytesUsed += num2.value;
		if (this.bufBytesUsed >= (this.bufBytes.length - 16)) {
			this.stream.Write(this.bufBytes, 0, this.bufBytesUsed);
			this.bufBytesUsed = 0;
		}
	}
	if (!(!writeAllToStream || (this.bufBytesUsed <= 0))) {
		this.stream.Write(this.bufBytes, 0, this.bufBytesUsed);
		this.bufBytesUsed = 0;
	}
};
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.FlushEncoder = function () {
	var num = new JSIL.Variable(0), num2 = new JSIL.Variable(0), flag = new JSIL.Variable(false);
	if (this.stream !== null) {
		this.encoder.Convert(
			this.bufChars, 
			1, 
			0, 
			this.bufBytes, 
			0, 
			this.bufBytes.length, 
			true, 
			/* ref */ num, 
			/* ref */ num2, 
			/* ref */ flag
		);
		if (num2.value !== 0) {
			this.stream.Write(this.bufBytes, 0, num2.value);
		}
	}
};
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.RawText = JSIL.UntranslatableFunction("System.Void System.Xml.XmlEncodedRawTextWriter::RawText(System.String)");
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.WriteCommentOrPi = JSIL.UntranslatableFunction("System.Void System.Xml.XmlEncodedRawTextWriter::WriteCommentOrPi(System.String,System.Int32)");
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.WriteCDataSection = JSIL.UntranslatableFunction("System.Void System.Xml.XmlEncodedRawTextWriter::WriteCDataSection(System.String)");
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.ChangeTextContentMark = function (value) {
	this.inTextContent = value;
	if ((this.lastMarkPos + 1) === this.textContentMarks.length) {
		this.GrowTextContentMarks();
	}
	this.textContentMarks[++this.lastMarkPos] = this.bufPos;
};
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.GrowTextContentMarks = function () {
	var destinationArray = JSIL.Array.New(System.Int32, (this.textContentMarks.length * 2));
	System.Array.Copy$0(this.textContentMarks, destinationArray, this.textContentMarks.length);
	this.textContentMarks = destinationArray;
};
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.ValidateContentChars = function (chars, propertyName, allowOnlyWhitespace) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				if (!allowOnlyWhitespace) {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								var text = null;
							__loop0__: 
								for (var i = 0; i < chars.length; ) {
									var __label2__ = "__entry2__";
								__step2__: 
									while (true) {
										switch (__label2__) {
											case "__entry2__":
												if (!this.xmlCharType.IsTextChar(chars[i])) {
													var __label3__ = "__entry3__";
												__step3__: 
													while (true) {
														switch (__label3__) {
															case "__entry3__":
																var c = (chars[i]);
																if (c <= "&") {
																	switch (c) {
																		case "\t": 
																		case "\n": 
																		case "\r": 
																			__label2__ = "IL_121";
																			continue __step2__;
																		case "\x0b": 
																		case "\x0c": 
																			__label3__ = "IL_A2";
																			continue __step3__;
																		default: 
																			if (c !== "&") {
																				__label3__ = "IL_A2";
																				continue __step3__;
																			}
																			break;
																	}
																} else if ((c !== "<") && (c !== "]")) {
																	__label3__ = "IL_A2";
																	continue __step3__;
																}
																text = $asm07.System.Xml.Res.GetString$0("Xml_InvalidCharacter", System.Xml.XmlException.BuildCharExceptionArgs$0(chars, i));
																__label3__ = "IL_132";
																continue __step3__;
																__label3__ = "IL_A2";
																continue __step3__;
																break;
															case "IL_A2":
																if ($asm07.System.Xml.XmlCharType.IsHighSurrogate(chars[i].charCodeAt(0))) {
																	if (!(((i + 1) >= chars.length) || !$asm07.System.Xml.XmlCharType.IsLowSurrogate((chars[(i + 1)]).charCodeAt(0)))) {
																		++i;
																		__label2__ = "IL_121";
																		continue __step2__;
																	}
																	text = $asm07.System.Xml.Res.GetString$2("Xml_InvalidSurrogateMissingLowChar");
																} else {
																	if (!$asm07.System.Xml.XmlCharType.IsLowSurrogate(chars[i].charCodeAt(0))) {
																		__label2__ = "IL_121";
																		continue __step2__;
																	}
																	text = $asm07.System.Xml.Res.GetString$0("Xml_InvalidSurrogateHighChar", [(chars[i].charCodeAt(0)).toString()]);
																}
																__label3__ = "IL_132";
																continue __step3__;
																break;
															case "IL_132":
																throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm07.System.Xml.Res.GetString$0("Xml_InvalidCharsInIndent", JSIL.Array.New(System.String, [propertyName, text]))]);
																break __step3__;
														}
													}
												}
												__label2__ = "IL_121";
												continue __step2__;
												break;
											case "IL_121":
												++i;
												break __step2__;
										}
									}
								}
								return;
								break __step1__;
						}
					}
				}
				if (!this.xmlCharType.IsOnlyWhitespace(chars)) {
					throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm07.System.Xml.Res.GetString$0("Xml_IndentCharsNotWhitespace", [propertyName])]);
				}
				break __step0__;
		}
	}
};
JSIL.OverloadedMethod($asm07.System.Xml.XmlEncodedRawTextWriter.prototype, "_ctor", [
		["_ctor$0", [System.Xml.XmlWriterSettings]], 
		["_ctor$1", [System.IO.TextWriter, System.Xml.XmlWriterSettings]], 
		["_ctor$2", [System.IO.Stream, System.Xml.XmlWriterSettings]]
	]);
JSIL.OverloadedMethod($asm07.System.Xml.XmlEncodedRawTextWriter.prototype, "WriteXmlDeclaration", [
		["WriteXmlDeclaration$0", [$asm07.System.Xml.XmlStandalone]], 
		["WriteXmlDeclaration$1", [System.String]]
	]);
JSIL.OverloadedMethod($asm07.System.Xml.XmlEncodedRawTextWriter.prototype, "WriteRaw", [
		["WriteRaw$0", [System.Array.Of(System.Char), System.Int32, System.Int32]], 
		["WriteRaw$1", [System.String]]
	]);
JSIL.MakeProperty($asm07.System.Xml.XmlEncodedRawTextWriter.prototype, "Settings", 
	$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.get_Settings, null);
JSIL.MakeProperty($asm07.System.Xml.XmlEncodedRawTextWriter.prototype, "SupportsNamespaceDeclarationInChunks", 
	$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.get_SupportsNamespaceDeclarationInChunks, null);
Object.defineProperty($asm07.System.Xml.XmlEncodedRawTextWriter, "BUFSIZE", {
		"value": 6144}
);
Object.defineProperty($asm07.System.Xml.XmlEncodedRawTextWriter, "OVERFLOW", {
		"value": 32}
);
Object.defineProperty($asm07.System.Xml.XmlEncodedRawTextWriter, "INIT_MARKS_COUNT", {
		"value": 64}
);
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.bufBytes = null;
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.stream = null;
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.encoding = null;
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.bufPos = 0;
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.textPos = 0;
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.contentPos = 0;
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.cdataPos = 0;
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.attrEndPos = 0;
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.bufLen = 0;
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.writeToNull = false;
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.hadDoubleBracket = false;
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.inAttributeValue = false;
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.bufBytesUsed = 0;
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.bufChars = null;
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.encoder = null;
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.writer = null;
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.trackTextContent = false;
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.inTextContent = false;
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.lastMarkPos = 0;
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.textContentMarks = null;
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.charEntityFallback = null;
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.newLineHandling = 0;
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.closeOutput = false;
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.omitXmlDeclaration = false;
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.newLineChars = null;
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.checkCharacters = false;
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.autoXmlDeclaration = false;
$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.mergeCDataSections = false;

$asm07.System.Xml.XmlEncodedRawTextWriterIndent.prototype._ctor$0 = function (writer, settings) {
	$asm07.System.Xml.XmlEncodedRawTextWriter.prototype._ctor$1.call(this, writer, settings);
	this.Init(settings);
};
$asm07.System.Xml.XmlEncodedRawTextWriterIndent.prototype._ctor$1 = function (stream, settings) {
	$asm07.System.Xml.XmlEncodedRawTextWriter.prototype._ctor$2.call(this, stream, settings);
	this.Init(settings);
};
$asm07.System.Xml.XmlEncodedRawTextWriterIndent.prototype.get_Settings = function () {
	var settings = $asm07.System.Xml.XmlEncodedRawTextWriter.prototype.get_Settings.call(this);
	settings.ReadOnly = false;
	settings.Indent = true;
	settings.IndentChars = this.indentChars;
	settings.NewLineOnAttributes = this.newLineOnAttributes;
	settings.ReadOnly = true;
	return settings;
};
$asm07.System.Xml.XmlEncodedRawTextWriterIndent.prototype.WriteDocType = function (name, pubid, sysid, subset) {
	if (!(this.mixedContent || (this.textPos === this.bufPos))) {
		this.WriteIndent();
	}
	$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.WriteDocType.call(this, name, pubid, sysid, subset);
};
$asm07.System.Xml.XmlEncodedRawTextWriterIndent.prototype.WriteStartElement = function (prefix, localName, ns) {
	if (!(this.mixedContent || (this.textPos === this.bufPos))) {
		this.WriteIndent();
	}
	++this.indentLevel;
	this.mixedContentStack.PushBit(this.mixedContent);
	$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.WriteStartElement.call(this, prefix, localName, ns);
};
$asm07.System.Xml.XmlEncodedRawTextWriterIndent.prototype.StartElementContent = function () {
	if (!((this.indentLevel !== 1) || (this.conformanceLevel !== System.Xml.ConformanceLevel.Document))) {
		this.mixedContent = false;
	} else {
		this.mixedContent = this.mixedContentStack.PeekBit();
	}
	$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.StartElementContent.call(this);
};
$asm07.System.Xml.XmlEncodedRawTextWriterIndent.prototype.OnRootElement = function (currentConformanceLevel) {
	this.conformanceLevel = currentConformanceLevel;
};
$asm07.System.Xml.XmlEncodedRawTextWriterIndent.prototype.WriteEndElement = function (prefix, localName, ns) {
	--this.indentLevel;
	if (!(this.mixedContent || 
			(this.contentPos === this.bufPos) || (this.textPos === this.bufPos))) {
		this.WriteIndent();
	}
	this.mixedContent = this.mixedContentStack.PopBit();
	$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.WriteEndElement.call(this, prefix, localName, ns);
};
$asm07.System.Xml.XmlEncodedRawTextWriterIndent.prototype.WriteFullEndElement = function (prefix, localName, ns) {
	--this.indentLevel;
	if (!(this.mixedContent || 
			(this.contentPos === this.bufPos) || (this.textPos === this.bufPos))) {
		this.WriteIndent();
	}
	this.mixedContent = this.mixedContentStack.PopBit();
	$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.WriteFullEndElement.call(this, prefix, localName, ns);
};
$asm07.System.Xml.XmlEncodedRawTextWriterIndent.prototype.WriteStartAttribute = function (prefix, localName, ns) {
	if (this.newLineOnAttributes) {
		this.WriteIndent();
	}
	$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.WriteStartAttribute.call(this, prefix, localName, ns);
};
$asm07.System.Xml.XmlEncodedRawTextWriterIndent.prototype.WriteCData = function (text) {
	this.mixedContent = true;
	$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.WriteCData.call(this, text);
};
$asm07.System.Xml.XmlEncodedRawTextWriterIndent.prototype.WriteComment = function (text) {
	if (!(this.mixedContent || (this.textPos === this.bufPos))) {
		this.WriteIndent();
	}
	$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.WriteComment.call(this, text);
};
$asm07.System.Xml.XmlEncodedRawTextWriterIndent.prototype.WriteProcessingInstruction = function (target, text) {
	if (!(this.mixedContent || (this.textPos === this.bufPos))) {
		this.WriteIndent();
	}
	$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.WriteProcessingInstruction.call(this, target, text);
};
$asm07.System.Xml.XmlEncodedRawTextWriterIndent.prototype.WriteEntityRef = function (name) {
	this.mixedContent = true;
	$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.WriteEntityRef.call(this, name);
};
$asm07.System.Xml.XmlEncodedRawTextWriterIndent.prototype.WriteCharEntity = function (ch) {
	this.mixedContent = true;
	$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.WriteCharEntity.call(this, ch);
};
$asm07.System.Xml.XmlEncodedRawTextWriterIndent.prototype.WriteSurrogateCharEntity = function (lowChar, highChar) {
	this.mixedContent = true;
	$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.WriteSurrogateCharEntity.call(this, lowChar, highChar);
};
$asm07.System.Xml.XmlEncodedRawTextWriterIndent.prototype.WriteWhitespace = function (ws) {
	this.mixedContent = true;
	$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.WriteWhitespace.call(this, ws);
};
$asm07.System.Xml.XmlEncodedRawTextWriterIndent.prototype.WriteString = function (text) {
	this.mixedContent = true;
	$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.WriteString.call(this, text);
};
$asm07.System.Xml.XmlEncodedRawTextWriterIndent.prototype.WriteChars = function (buffer, index, count) {
	this.mixedContent = true;
	$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.WriteChars.call(this, buffer, index, count);
};
$asm07.System.Xml.XmlEncodedRawTextWriterIndent.prototype.WriteRaw$0 = function (buffer, index, count) {
	this.mixedContent = true;
	$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.WriteRaw$0.call(this, buffer, index, count);
};
$asm07.System.Xml.XmlEncodedRawTextWriterIndent.prototype.WriteRaw$1 = function (data) {
	this.mixedContent = true;
	$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.WriteRaw$1.call(this, data);
};
$asm07.System.Xml.XmlEncodedRawTextWriterIndent.prototype.WriteBase64 = function (buffer, index, count) {
	this.mixedContent = true;
	$asm07.System.Xml.XmlRawWriter.prototype.WriteBase64.call(this, buffer, index, count);
};
$asm07.System.Xml.XmlEncodedRawTextWriterIndent.prototype.Init = function (settings) {
	this.indentLevel = 0;
	this.indentChars = settings.IndentChars;
	this.newLineOnAttributes = settings.NewLineOnAttributes;
	this.mixedContentStack = new $asm07.System.Xml.BitStack();
	if (this.checkCharacters) {
		if (this.newLineOnAttributes) {
			$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.ValidateContentChars.call(this, this.indentChars, "IndentChars", true);
			$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.ValidateContentChars.call(this, this.newLineChars, "NewLineChars", true);
			return;
		}
		$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.ValidateContentChars.call(this, this.indentChars, "IndentChars", false);
		if (this.newLineHandling !== 0) {
			$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.ValidateContentChars.call(this, this.newLineChars, "NewLineChars", false);
		}
	}
};
$asm07.System.Xml.XmlEncodedRawTextWriterIndent.prototype.WriteIndent = function () {
	$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.RawText.call(this, this.newLineChars);
__loop0__: 
	for (var i = this.indentLevel; i > 0; --i) {
		$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.RawText.call(this, this.indentChars);
	}
};
JSIL.OverloadedMethod($asm07.System.Xml.XmlEncodedRawTextWriterIndent.prototype, "_ctor", [
		["_ctor$0", [System.IO.TextWriter, System.Xml.XmlWriterSettings]], 
		["_ctor$1", [System.IO.Stream, System.Xml.XmlWriterSettings]]
	]);
JSIL.OverloadedMethod($asm07.System.Xml.XmlEncodedRawTextWriterIndent.prototype, "WriteRaw", [
		["WriteRaw$0", [System.Array.Of(System.Char), System.Int32, System.Int32]], 
		["WriteRaw$1", [System.String]]
	]);
JSIL.MakeProperty($asm07.System.Xml.XmlEncodedRawTextWriterIndent.prototype, "Settings", 
	$asm07.System.Xml.XmlEncodedRawTextWriterIndent.prototype.get_Settings, null);
$asm07.System.Xml.XmlEncodedRawTextWriterIndent.prototype.indentLevel = 0;
$asm07.System.Xml.XmlEncodedRawTextWriterIndent.prototype.newLineOnAttributes = false;
$asm07.System.Xml.XmlEncodedRawTextWriterIndent.prototype.indentChars = null;
$asm07.System.Xml.XmlEncodedRawTextWriterIndent.prototype.mixedContent = false;
$asm07.System.Xml.XmlEncodedRawTextWriterIndent.prototype.mixedContentStack = null;
$asm07.System.Xml.XmlEncodedRawTextWriterIndent.prototype.conformanceLevel = 0;

System.Xml.XmlParserContext.prototype._ctor$0 = function (nt, nsMgr, xmlLang, xmlSpace) {
	this._ctor$2(
		nt, 
		nsMgr, 
		null, 
		null, 
		null, 
		null, 
		System.String.Empty, 
		xmlLang, 
		xmlSpace
	);
};
System.Xml.XmlParserContext.prototype._ctor$1 = function (nt, nsMgr, xmlLang, xmlSpace, enc) {
	this._ctor$3(
		nt, 
		nsMgr, 
		null, 
		null, 
		null, 
		null, 
		System.String.Empty, 
		xmlLang, 
		xmlSpace, 
		enc
	);
};
System.Xml.XmlParserContext.prototype._ctor$2 = function (nt, nsMgr, docTypeName, pubId, sysId, internalSubset, baseURI, xmlLang, xmlSpace) {
	this._ctor$3(
		nt, 
		nsMgr, 
		docTypeName, 
		pubId, 
		sysId, 
		internalSubset, 
		baseURI, 
		xmlLang, 
		xmlSpace, 
		null
	);
};
System.Xml.XmlParserContext.prototype._ctor$3 = function (nt, nsMgr, docTypeName, pubId, sysId, internalSubset, baseURI, xmlLang, xmlSpace, enc) {
	this._docTypeName = System.String.Empty;
	this._pubId = System.String.Empty;
	this._sysId = System.String.Empty;
	this._internalSubset = System.String.Empty;
	this._xmlLang = System.String.Empty;
	this._baseURI = System.String.Empty;
	System.Object.prototype._ctor.call(this);
	if (nsMgr !== null) {
		if (nt === null) {
			this._nt = nsMgr.NameTable;
		} else {
			if (nt !== nsMgr.NameTable) {
				throw JSIL.New(System.Xml.XmlException, "_ctor$7", ["Xml_NotSameNametable", System.String.Empty]);
			}
			this._nt = nt;
		}
	} else {
		this._nt = nt;
	}
	this._nsMgr = nsMgr;
	this._docTypeName = (docTypeName === null) ? System.String.Empty : docTypeName;
	this._pubId = (pubId === null) ? System.String.Empty : pubId;
	this._sysId = (sysId === null) ? System.String.Empty : sysId;
	this._internalSubset = (internalSubset === null) ? System.String.Empty : internalSubset;
	this._baseURI = (baseURI === null) ? System.String.Empty : baseURI;
	this._xmlLang = (xmlLang === null) ? System.String.Empty : xmlLang;
	this._xmlSpace = xmlSpace;
	this._encoding = enc;
};
System.Xml.XmlParserContext.prototype.get_NameTable = function () {
	return this._nt;
};
System.Xml.XmlParserContext.prototype.set_NameTable = function (value) {
	this._nt = value;
};
System.Xml.XmlParserContext.prototype.get_NamespaceManager = function () {
	return this._nsMgr;
};
System.Xml.XmlParserContext.prototype.set_NamespaceManager = function (value) {
	this._nsMgr = value;
};
System.Xml.XmlParserContext.prototype.get_DocTypeName = function () {
	return this._docTypeName;
};
System.Xml.XmlParserContext.prototype.set_DocTypeName = function (value) {
	this._docTypeName = (value === null) ? System.String.Empty : value;
};
System.Xml.XmlParserContext.prototype.get_PublicId = function () {
	return this._pubId;
};
System.Xml.XmlParserContext.prototype.set_PublicId = function (value) {
	this._pubId = (value === null) ? System.String.Empty : value;
};
System.Xml.XmlParserContext.prototype.get_SystemId = function () {
	return this._sysId;
};
System.Xml.XmlParserContext.prototype.set_SystemId = function (value) {
	this._sysId = (value === null) ? System.String.Empty : value;
};
System.Xml.XmlParserContext.prototype.get_BaseURI = function () {
	return this._baseURI;
};
System.Xml.XmlParserContext.prototype.set_BaseURI = function (value) {
	this._baseURI = (value === null) ? System.String.Empty : value;
};
System.Xml.XmlParserContext.prototype.get_InternalSubset = function () {
	return this._internalSubset;
};
System.Xml.XmlParserContext.prototype.set_InternalSubset = function (value) {
	this._internalSubset = (value === null) ? System.String.Empty : value;
};
System.Xml.XmlParserContext.prototype.get_XmlLang = function () {
	return this._xmlLang;
};
System.Xml.XmlParserContext.prototype.set_XmlLang = function (value) {
	this._xmlLang = (value === null) ? System.String.Empty : value;
};
System.Xml.XmlParserContext.prototype.get_XmlSpace = function () {
	return this._xmlSpace;
};
System.Xml.XmlParserContext.prototype.set_XmlSpace = function (value) {
	this._xmlSpace = value;
};
System.Xml.XmlParserContext.prototype.get_Encoding = function () {
	return this._encoding;
};
System.Xml.XmlParserContext.prototype.set_Encoding = function (value) {
	this._encoding = value;
};
System.Xml.XmlParserContext.prototype.get_HasDtdInfo = function () {
	return ((this._internalSubset != System.String.Empty) || 
		(this._pubId != System.String.Empty) || (this._sysId != System.String.Empty));
};
JSIL.OverloadedMethod(System.Xml.XmlParserContext.prototype, "_ctor", [
		["_ctor$0", [System.Xml.XmlNameTable, System.Xml.XmlNamespaceManager, System.String, System.Xml.XmlSpace]], 
		["_ctor$1", [System.Xml.XmlNameTable, System.Xml.XmlNamespaceManager, System.String, System.Xml.XmlSpace, System.Text.Encoding]], 
		["_ctor$2", [System.Xml.XmlNameTable, System.Xml.XmlNamespaceManager, System.String, System.String, System.String, System.String, System.String, System.String, System.Xml.XmlSpace]], 
		["_ctor$3", [System.Xml.XmlNameTable, System.Xml.XmlNamespaceManager, System.String, System.String, System.String, System.String, System.String, System.String, System.Xml.XmlSpace, System.Text.Encoding]]
	]);
JSIL.MakeProperty(System.Xml.XmlParserContext.prototype, "NameTable", 
	System.Xml.XmlParserContext.prototype.get_NameTable, System.Xml.XmlParserContext.prototype.set_NameTable);
JSIL.MakeProperty(System.Xml.XmlParserContext.prototype, "NamespaceManager", 
	System.Xml.XmlParserContext.prototype.get_NamespaceManager, System.Xml.XmlParserContext.prototype.set_NamespaceManager);
JSIL.MakeProperty(System.Xml.XmlParserContext.prototype, "DocTypeName", 
	System.Xml.XmlParserContext.prototype.get_DocTypeName, System.Xml.XmlParserContext.prototype.set_DocTypeName);
JSIL.MakeProperty(System.Xml.XmlParserContext.prototype, "PublicId", 
	System.Xml.XmlParserContext.prototype.get_PublicId, System.Xml.XmlParserContext.prototype.set_PublicId);
JSIL.MakeProperty(System.Xml.XmlParserContext.prototype, "SystemId", 
	System.Xml.XmlParserContext.prototype.get_SystemId, System.Xml.XmlParserContext.prototype.set_SystemId);
JSIL.MakeProperty(System.Xml.XmlParserContext.prototype, "BaseURI", 
	System.Xml.XmlParserContext.prototype.get_BaseURI, System.Xml.XmlParserContext.prototype.set_BaseURI);
JSIL.MakeProperty(System.Xml.XmlParserContext.prototype, "InternalSubset", 
	System.Xml.XmlParserContext.prototype.get_InternalSubset, System.Xml.XmlParserContext.prototype.set_InternalSubset);
JSIL.MakeProperty(System.Xml.XmlParserContext.prototype, "XmlLang", 
	System.Xml.XmlParserContext.prototype.get_XmlLang, System.Xml.XmlParserContext.prototype.set_XmlLang);
JSIL.MakeProperty(System.Xml.XmlParserContext.prototype, "XmlSpace", 
	System.Xml.XmlParserContext.prototype.get_XmlSpace, System.Xml.XmlParserContext.prototype.set_XmlSpace);
JSIL.MakeProperty(System.Xml.XmlParserContext.prototype, "Encoding", 
	System.Xml.XmlParserContext.prototype.get_Encoding, System.Xml.XmlParserContext.prototype.set_Encoding);
JSIL.MakeProperty(System.Xml.XmlParserContext.prototype, "HasDtdInfo", 
	System.Xml.XmlParserContext.prototype.get_HasDtdInfo, null);
System.Xml.XmlParserContext.prototype._nt = null;
System.Xml.XmlParserContext.prototype._nsMgr = null;
System.Xml.XmlParserContext.prototype._docTypeName = null;
System.Xml.XmlParserContext.prototype._pubId = null;
System.Xml.XmlParserContext.prototype._sysId = null;
System.Xml.XmlParserContext.prototype._internalSubset = null;
System.Xml.XmlParserContext.prototype._xmlLang = null;
System.Xml.XmlParserContext.prototype._xmlSpace = 0;
System.Xml.XmlParserContext.prototype._baseURI = null;
System.Xml.XmlParserContext.prototype._encoding = null;

System.Xml.XmlReaderSettings.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
	this.Initialize();
};
System.Xml.XmlReaderSettings.prototype.get_NameTable = function () {
	return this.nameTable;
};
System.Xml.XmlReaderSettings.prototype.set_NameTable = function (value) {
	this.CheckReadOnly("NameTable");
	this.nameTable = value;
};
System.Xml.XmlReaderSettings.prototype.set_XmlResolver = function (value) {
	this.CheckReadOnly("XmlResolver");
	this.xmlResolver = value;
};
System.Xml.XmlReaderSettings.prototype.GetXmlResolver = function () {
	return this.xmlResolver;
};
System.Xml.XmlReaderSettings.prototype.get_LineNumberOffset = function () {
	return this.lineNumberOffset;
};
System.Xml.XmlReaderSettings.prototype.set_LineNumberOffset = function (value) {
	this.CheckReadOnly("LineNumberOffset");
	this.lineNumberOffset = value;
};
System.Xml.XmlReaderSettings.prototype.get_LinePositionOffset = function () {
	return this.linePositionOffset;
};
System.Xml.XmlReaderSettings.prototype.set_LinePositionOffset = function (value) {
	this.CheckReadOnly("LinePositionOffset");
	this.linePositionOffset = value;
};
System.Xml.XmlReaderSettings.prototype.get_ConformanceLevel = function () {
	return this.conformanceLevel;
};
System.Xml.XmlReaderSettings.prototype.set_ConformanceLevel = function (value) {
	this.CheckReadOnly("ConformanceLevel");
	if (value > System.Xml.ConformanceLevel.Document) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["value"]);
	}
	this.conformanceLevel = value;
};
System.Xml.XmlReaderSettings.prototype.get_CheckCharacters = function () {
	return this.checkCharacters;
};
System.Xml.XmlReaderSettings.prototype.set_CheckCharacters = function (value) {
	this.CheckReadOnly("CheckCharacters");
	this.checkCharacters = value;
};
System.Xml.XmlReaderSettings.prototype.get_MaxCharactersInDocument = function () {
	return this.maxCharactersInDocument;
};
System.Xml.XmlReaderSettings.prototype.set_MaxCharactersInDocument = function (value) {
	this.CheckReadOnly("MaxCharactersInDocument");
	if (value < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["value"]);
	}
	this.maxCharactersInDocument = value;
};
System.Xml.XmlReaderSettings.prototype.get_MaxCharactersFromEntities = function () {
	return this.maxCharactersFromEntities;
};
System.Xml.XmlReaderSettings.prototype.set_MaxCharactersFromEntities = function (value) {
	this.CheckReadOnly("MaxCharactersFromEntities");
	if (value < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["value"]);
	}
	this.maxCharactersFromEntities = value;
};
System.Xml.XmlReaderSettings.prototype.get_IgnoreWhitespace = function () {
	return this.ignoreWhitespace;
};
System.Xml.XmlReaderSettings.prototype.set_IgnoreWhitespace = function (value) {
	this.CheckReadOnly("IgnoreWhitespace");
	this.ignoreWhitespace = value;
};
System.Xml.XmlReaderSettings.prototype.get_IgnoreProcessingInstructions = function () {
	return this.ignorePIs;
};
System.Xml.XmlReaderSettings.prototype.set_IgnoreProcessingInstructions = function (value) {
	this.CheckReadOnly("IgnoreProcessingInstructions");
	this.ignorePIs = value;
};
System.Xml.XmlReaderSettings.prototype.get_IgnoreComments = function () {
	return this.ignoreComments;
};
System.Xml.XmlReaderSettings.prototype.set_IgnoreComments = function (value) {
	this.CheckReadOnly("IgnoreComments");
	this.ignoreComments = value;
};
System.Xml.XmlReaderSettings.prototype.get_DtdProcessing = function () {
	return this.dtdProcessing;
};
System.Xml.XmlReaderSettings.prototype.set_DtdProcessing = function (value) {
	this.CheckReadOnly("DtdProcessing");
	if (value > System.Xml.DtdProcessing.Parse) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["value"]);
	}
	this.dtdProcessing = value;
};
System.Xml.XmlReaderSettings.prototype.get_CloseInput = function () {
	return this.closeInput;
};
System.Xml.XmlReaderSettings.prototype.set_CloseInput = function (value) {
	this.CheckReadOnly("CloseInput");
	this.closeInput = value;
};
System.Xml.XmlReaderSettings.prototype.Reset = function () {
	this.CheckReadOnly("Reset");
	this.Initialize();
};
System.Xml.XmlReaderSettings.prototype.Clone = function () {
	var xmlReaderSettings = JSIL.TryCast(System.Object.prototype.MemberwiseClone.call(this), System.Xml.XmlReaderSettings);
	xmlReaderSettings.ReadOnly = false;
	return xmlReaderSettings;
};
System.Xml.XmlReaderSettings.prototype.CreateReader$0 = function (inputUri, inputContext) {
	if (inputUri === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["inputUri"]);
	}
	if (inputUri.length === 0) {
		throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm07.System.Xml.Res.GetString$2("XmlConvert_BadUri"), "inputUri"]);
	}
	var xmlResolver = this.GetXmlResolver();
	if (xmlResolver === null) {
		xmlResolver = this.CreateDefaultResolver();
	}
	var uri = xmlResolver.ResolveUri(null, inputUri);
	var stream = JSIL.Cast(xmlResolver.GetEntity(uri, System.String.Empty, System.IO.Stream), System.IO.Stream);
	if (stream === null) {
		throw JSIL.New(System.Xml.XmlException, "_ctor$7", ["Xml_CannotResolveUrl", inputUri]);
	}
	var xmlReaderSettings = this;
	if (!xmlReaderSettings.CloseInput) {
		xmlReaderSettings = xmlReaderSettings.Clone();
		xmlReaderSettings.CloseInput = true;
	}
	try {
		var result = xmlReaderSettings.CreateReader$1(stream, uri, null, inputContext);
	} catch ($exception) {
		stream.Close();
		throw $exception;
	}
	return result;
};
System.Xml.XmlReaderSettings.prototype.CreateReader$1 = function (input, baseUri, baseUriString, inputContext) {
	if (input === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["input"]);
	}
	if (baseUriString === null) {
		if (System.Uri.op_Equality(baseUri, null)) {
			baseUriString = System.String.Empty;
		} else {
			baseUriString = baseUri.toString();
		}
	}
	return JSIL.New($asm07.System.Xml.XmlTextReaderImpl, "_ctor$1", [input, null, 0, this, baseUri, baseUriString, inputContext, this.closeInput]);
};
System.Xml.XmlReaderSettings.prototype.CreateReader$2 = function (input, baseUriString, inputContext) {
	if (input === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["input"]);
	}
	if (baseUriString === null) {
		baseUriString = System.String.Empty;
	}
	return JSIL.New($asm07.System.Xml.XmlTextReaderImpl, "_ctor$2", [input, this, baseUriString, inputContext]);
};
System.Xml.XmlReaderSettings.prototype.CreateReader$3 = function (reader) {
	if (reader === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["reader"]);
	}
	return this.AddConformanceWrapper(reader);
};
System.Xml.XmlReaderSettings.prototype.get_ReadOnly = function () {
	return this.isReadOnly;
};
System.Xml.XmlReaderSettings.prototype.set_ReadOnly = function (value) {
	this.isReadOnly = value;
};
System.Xml.XmlReaderSettings.prototype.CheckReadOnly = function (propertyName) {
	if (this.isReadOnly) {
		throw JSIL.New(System.Xml.XmlException, "_ctor$7", ["Xml_ReadOnlyProperty", JSIL.ConcatString(JSIL.GetType(this).Name, ".", propertyName)]);
	}
};
System.Xml.XmlReaderSettings.prototype.Initialize = function () {
	this.nameTable = null;
	this.xmlResolver = this.CreateDefaultResolver();
	this.lineNumberOffset = 0;
	this.linePositionOffset = 0;
	this.checkCharacters = true;
	this.conformanceLevel = System.Xml.ConformanceLevel.Document;
	this.ignoreWhitespace = false;
	this.ignorePIs = false;
	this.ignoreComments = false;
	this.dtdProcessing = System.Xml.DtdProcessing.Prohibit;
	this.closeInput = false;
	this.maxCharactersFromEntities = 0;
	this.maxCharactersInDocument = 0;
	this.isReadOnly = false;
};
System.Xml.XmlReaderSettings.prototype.CreateDefaultResolver = function () {
	return new System.Xml.XmlXapResolver();
};
System.Xml.XmlReaderSettings.prototype.AddConformanceWrapper = function (baseReader) {
	var settings = baseReader.Settings;
	var flag = false;
	var flag2 = false;
	var flag3 = false;
	var ignorePis = false;
	var dtdProcessing = -1;
	var flag4 = false;
	if (settings === null) {
		if (this.conformanceLevel !== 0) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm07.System.Xml.Res.GetString$0("Xml_IncompatibleConformanceLevel", [this.conformanceLevel.toString()])]);
		}
		if (!(!this.ignoreWhitespace || false)) {
			flag2 = true;
			flag4 = true;
		}
		if (this.ignoreComments) {
			flag3 = true;
			flag4 = true;
		}
		if (this.ignorePIs) {
			ignorePis = true;
			flag4 = true;
		}
		var dtdProcessing2 = System.Xml.DtdProcessing.Parse;
		if (!(!((this.dtdProcessing === 0) && 
					JSIL.Cast(dtdProcessing2, System.Boolean)) && ((this.dtdProcessing !== System.Xml.DtdProcessing.Ignore) || 
					(dtdProcessing2 !== System.Xml.DtdProcessing.Parse)))) {
			dtdProcessing = this.dtdProcessing;
			flag4 = true;
		}
	} else {
		if (!((this.conformanceLevel === settings.ConformanceLevel) || (this.conformanceLevel === 0))) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm07.System.Xml.Res.GetString$0("Xml_IncompatibleConformanceLevel", [this.conformanceLevel.toString()])]);
		}
		if (!(!this.checkCharacters || settings.CheckCharacters)) {
			flag = true;
			flag4 = true;
		}
		if (!(!this.ignoreWhitespace || settings.IgnoreWhitespace)) {
			flag2 = true;
			flag4 = true;
		}
		if (!(!this.ignoreComments || settings.IgnoreComments)) {
			flag3 = true;
			flag4 = true;
		}
		if (!(!this.ignorePIs || settings.IgnoreProcessingInstructions)) {
			ignorePis = true;
			flag4 = true;
		}
		if (!(!((this.dtdProcessing === 0) && 
					JSIL.Cast(settings.DtdProcessing, System.Boolean)) && ((this.dtdProcessing !== System.Xml.DtdProcessing.Ignore) || 
					(settings.DtdProcessing !== System.Xml.DtdProcessing.Parse)))) {
			dtdProcessing = this.dtdProcessing;
			flag4 = true;
		}
	}
	if (!flag4) {
		return baseReader;
	}
	var xmlNamespaceResolver = JSIL.TryCast(baseReader, System.Xml.IXmlNamespaceResolver);
	if (xmlNamespaceResolver !== null) {
		return new $asm07.System.Xml.XmlCharCheckingReaderWithNS(baseReader, xmlNamespaceResolver, flag, flag2, flag3, ignorePis, dtdProcessing);
	}
	return new $asm07.System.Xml.XmlCharCheckingReader(baseReader, flag, flag2, flag3, ignorePis, dtdProcessing);
};
JSIL.OverloadedMethod(System.Xml.XmlReaderSettings.prototype, "CreateReader", [
		["CreateReader$0", [System.String, System.Xml.XmlParserContext]], 
		["CreateReader$1", [System.IO.Stream, System.Uri, System.String, System.Xml.XmlParserContext]], 
		["CreateReader$2", [System.IO.TextReader, System.String, System.Xml.XmlParserContext]], 
		["CreateReader$3", [System.Xml.XmlReader]]
	]);
JSIL.MakeProperty(System.Xml.XmlReaderSettings.prototype, "NameTable", 
	System.Xml.XmlReaderSettings.prototype.get_NameTable, System.Xml.XmlReaderSettings.prototype.set_NameTable);
JSIL.MakeProperty(System.Xml.XmlReaderSettings.prototype, "XmlResolver", 
	null, System.Xml.XmlReaderSettings.prototype.set_XmlResolver);
JSIL.MakeProperty(System.Xml.XmlReaderSettings.prototype, "LineNumberOffset", 
	System.Xml.XmlReaderSettings.prototype.get_LineNumberOffset, System.Xml.XmlReaderSettings.prototype.set_LineNumberOffset);
JSIL.MakeProperty(System.Xml.XmlReaderSettings.prototype, "LinePositionOffset", 
	System.Xml.XmlReaderSettings.prototype.get_LinePositionOffset, System.Xml.XmlReaderSettings.prototype.set_LinePositionOffset);
JSIL.MakeProperty(System.Xml.XmlReaderSettings.prototype, "ConformanceLevel", 
	System.Xml.XmlReaderSettings.prototype.get_ConformanceLevel, System.Xml.XmlReaderSettings.prototype.set_ConformanceLevel);
JSIL.MakeProperty(System.Xml.XmlReaderSettings.prototype, "CheckCharacters", 
	System.Xml.XmlReaderSettings.prototype.get_CheckCharacters, System.Xml.XmlReaderSettings.prototype.set_CheckCharacters);
JSIL.MakeProperty(System.Xml.XmlReaderSettings.prototype, "MaxCharactersInDocument", 
	System.Xml.XmlReaderSettings.prototype.get_MaxCharactersInDocument, System.Xml.XmlReaderSettings.prototype.set_MaxCharactersInDocument);
JSIL.MakeProperty(System.Xml.XmlReaderSettings.prototype, "MaxCharactersFromEntities", 
	System.Xml.XmlReaderSettings.prototype.get_MaxCharactersFromEntities, System.Xml.XmlReaderSettings.prototype.set_MaxCharactersFromEntities);
JSIL.MakeProperty(System.Xml.XmlReaderSettings.prototype, "IgnoreWhitespace", 
	System.Xml.XmlReaderSettings.prototype.get_IgnoreWhitespace, System.Xml.XmlReaderSettings.prototype.set_IgnoreWhitespace);
JSIL.MakeProperty(System.Xml.XmlReaderSettings.prototype, "IgnoreProcessingInstructions", 
	System.Xml.XmlReaderSettings.prototype.get_IgnoreProcessingInstructions, System.Xml.XmlReaderSettings.prototype.set_IgnoreProcessingInstructions);
JSIL.MakeProperty(System.Xml.XmlReaderSettings.prototype, "IgnoreComments", 
	System.Xml.XmlReaderSettings.prototype.get_IgnoreComments, System.Xml.XmlReaderSettings.prototype.set_IgnoreComments);
JSIL.MakeProperty(System.Xml.XmlReaderSettings.prototype, "DtdProcessing", 
	System.Xml.XmlReaderSettings.prototype.get_DtdProcessing, System.Xml.XmlReaderSettings.prototype.set_DtdProcessing);
JSIL.MakeProperty(System.Xml.XmlReaderSettings.prototype, "CloseInput", 
	System.Xml.XmlReaderSettings.prototype.get_CloseInput, System.Xml.XmlReaderSettings.prototype.set_CloseInput);
JSIL.MakeProperty(System.Xml.XmlReaderSettings.prototype, "ReadOnly", 
	System.Xml.XmlReaderSettings.prototype.get_ReadOnly, System.Xml.XmlReaderSettings.prototype.set_ReadOnly);
System.Xml.XmlReaderSettings.prototype.nameTable = null;
System.Xml.XmlReaderSettings.prototype.xmlResolver = null;
System.Xml.XmlReaderSettings.prototype.lineNumberOffset = 0;
System.Xml.XmlReaderSettings.prototype.linePositionOffset = 0;
System.Xml.XmlReaderSettings.prototype.conformanceLevel = 0;
System.Xml.XmlReaderSettings.prototype.checkCharacters = false;
System.Xml.XmlReaderSettings.prototype.maxCharactersInDocument = 0;
System.Xml.XmlReaderSettings.prototype.maxCharactersFromEntities = 0;
System.Xml.XmlReaderSettings.prototype.ignoreWhitespace = false;
System.Xml.XmlReaderSettings.prototype.ignorePIs = false;
System.Xml.XmlReaderSettings.prototype.ignoreComments = false;
System.Xml.XmlReaderSettings.prototype.dtdProcessing = 0;
System.Xml.XmlReaderSettings.prototype.closeInput = false;
System.Xml.XmlReaderSettings.prototype.isReadOnly = false;

$asm07.System.Xml.XmlSubtreeReader.prototype._ctor = function (reader) {
	this.curNsAttr = -1;
	this.InitialNamespaceAttributeCount = 4;
	$asm07.System.Xml.XmlWrappingReader.prototype._ctor.call(this, reader);
	this.initialDepth = reader.Depth;
	this.state = $asm07.System.Xml.XmlSubtreeReader.State.Initial;
	this.nsManager = new System.Xml.XmlNamespaceManager(reader.NameTable);
	this.xmlns = reader.NameTable.Add$1("xmlns");
	this.xmlnsUri = reader.NameTable.Add$1("http://www.w3.org/2000/xmlns/");
	this.tmpNode = new $asm07.System.Xml.XmlSubtreeReader.NodeData();
	this.tmpNode.Set(
		System.Xml.XmlNodeType.None, 
		System.String.Empty, 
		System.String.Empty, 
		System.String.Empty, 
		System.String.Empty, 
		System.String.Empty
	);
	this.SetCurrentNode(this.tmpNode);
};
$asm07.System.Xml.XmlSubtreeReader.prototype.get_NodeType = function () {
	if (!this.useCurNode) {
		return this.reader.NodeType;
	}
	return this.curNode.type;
};
$asm07.System.Xml.XmlSubtreeReader.prototype.get_Name = function () {
	if (!this.useCurNode) {
		return this.reader.Name;
	}
	return this.curNode.name;
};
$asm07.System.Xml.XmlSubtreeReader.prototype.get_LocalName = function () {
	if (!this.useCurNode) {
		return this.reader.LocalName;
	}
	return this.curNode.localName;
};
$asm07.System.Xml.XmlSubtreeReader.prototype.get_NamespaceURI = function () {
	if (!this.useCurNode) {
		return this.reader.NamespaceURI;
	}
	return this.curNode.namespaceUri;
};
$asm07.System.Xml.XmlSubtreeReader.prototype.get_Prefix = function () {
	if (!this.useCurNode) {
		return this.reader.Prefix;
	}
	return this.curNode.prefix;
};
$asm07.System.Xml.XmlSubtreeReader.prototype.get_Value = function () {
	if (!this.useCurNode) {
		return this.reader.Value;
	}
	return this.curNode.value;
};
$asm07.System.Xml.XmlSubtreeReader.prototype.get_Depth = function () {
	var num = (this.reader.Depth - this.initialDepth);
	if (this.curNsAttr !== -1) {
		if (this.curNode.type === System.Xml.XmlNodeType.Text) {
			num += 2;
		} else {
			++num;
		}
	}
	return num;
};
$asm07.System.Xml.XmlSubtreeReader.prototype.get_BaseURI = function () {
	return this.reader.BaseURI;
};
$asm07.System.Xml.XmlSubtreeReader.prototype.get_IsEmptyElement = function () {
	return this.reader.IsEmptyElement;
};
$asm07.System.Xml.XmlSubtreeReader.prototype.get_EOF = function () {
	return ((this.state === $asm07.System.Xml.XmlSubtreeReader.State.EndOfFile) || (this.state === $asm07.System.Xml.XmlSubtreeReader.State.Closed));
};
$asm07.System.Xml.XmlSubtreeReader.prototype.get_ReadState = function () {
	if (this.reader.ReadState === System.Xml.ReadState.Error) {
		return System.Xml.ReadState.Error;
	}
	if (this.state <= $asm07.System.Xml.XmlSubtreeReader.State.Closed) {
		return this.state;
	}
	return System.Xml.ReadState.Interactive;
};
$asm07.System.Xml.XmlSubtreeReader.prototype.get_NameTable = function () {
	return this.reader.NameTable;
};
$asm07.System.Xml.XmlSubtreeReader.prototype.get_AttributeCount = function () {
	if (!this.InAttributeActiveState) {
		return 0;
	}
	return (this.reader.AttributeCount + this.nsAttrCount);
};
$asm07.System.Xml.XmlSubtreeReader.prototype.GetAttribute$0 = function (name) {
	if (!this.InAttributeActiveState) {
		return null;
	}
	var attribute = this.reader.GetAttribute$0(name);
	if (attribute !== null) {
		return attribute;
	}
__loop0__: 
	for (var i = 0; i < this.nsAttrCount; ++i) {
		if (name == this.nsAttributes[i].name) {
			return this.nsAttributes[i].value;
		}
	}
	return null;
};
$asm07.System.Xml.XmlSubtreeReader.prototype.GetAttribute$1 = function (name, namespaceURI) {
	if (!this.InAttributeActiveState) {
		return null;
	}
	var attribute = this.reader.GetAttribute$1(name, namespaceURI);
	if (attribute !== null) {
		return attribute;
	}
__loop0__: 
	for (var i = 0; i < this.nsAttrCount; ++i) {
		if (!(!(name == this.nsAttributes[i].localName) || !(namespaceURI == this.xmlnsUri))) {
			return this.nsAttributes[i].value;
		}
	}
	return null;
};
$asm07.System.Xml.XmlSubtreeReader.prototype.GetAttribute$2 = function (i) {
	if (!this.InAttributeActiveState) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["i"]);
	}
	var attributeCount = this.reader.AttributeCount;
	if (i < attributeCount) {
		return this.reader.GetAttribute$2(i);
	}
	if ((i - attributeCount) < this.nsAttrCount) {
		return this.nsAttributes[(i - attributeCount)].value;
	}
	throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["i"]);
};
$asm07.System.Xml.XmlSubtreeReader.prototype.MoveToAttribute$0 = function (name) {
	if (!this.InAttributeActiveState) {
		return false;
	}
	if (this.reader.MoveToAttribute$0(name)) {
		this.curNsAttr = -1;
		this.useCurNode = false;
		return true;
	}
__loop0__: 
	for (var i = 0; i < this.nsAttrCount; ++i) {
		if (name == this.nsAttributes[i].name) {
			this.MoveToNsAttribute(i);
			return true;
		}
	}
	return false;
};
$asm07.System.Xml.XmlSubtreeReader.prototype.MoveToAttribute$1 = function (name, ns) {
	if (!this.InAttributeActiveState) {
		return false;
	}
	if (this.reader.MoveToAttribute$1(name, ns)) {
		this.curNsAttr = -1;
		this.useCurNode = false;
		return true;
	}
__loop0__: 
	for (var i = 0; i < this.nsAttrCount; ++i) {
		if (!(!(name == this.nsAttributes[i].localName) || !(ns == this.xmlnsUri))) {
			this.MoveToNsAttribute(i);
			return true;
		}
	}
	return false;
};
$asm07.System.Xml.XmlSubtreeReader.prototype.MoveToAttribute$2 = function (i) {
	if (!this.InAttributeActiveState) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["i"]);
	}
	var attributeCount = this.reader.AttributeCount;
	if (i < attributeCount) {
		this.reader.MoveToAttribute$2(i);
		this.curNsAttr = -1;
		this.useCurNode = false;
		return;
	}
	if ((i - attributeCount) < this.nsAttrCount) {
		this.MoveToNsAttribute((i - attributeCount));
		return;
	}
	throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["i"]);
};
$asm07.System.Xml.XmlSubtreeReader.prototype.MoveToFirstAttribute = function () {
	if (!this.InAttributeActiveState) {
		return false;
	}
	if (this.reader.MoveToFirstAttribute()) {
		this.useCurNode = false;
		return true;
	}
	if (this.nsAttrCount > 0) {
		this.MoveToNsAttribute(0);
		return true;
	}
	return false;
};
$asm07.System.Xml.XmlSubtreeReader.prototype.MoveToNextAttribute = function () {
	if (!this.InAttributeActiveState) {
		return false;
	}
	if (!((this.curNsAttr !== -1) || !this.reader.MoveToNextAttribute())) {
		return true;
	}
	if ((this.curNsAttr + 1) < this.nsAttrCount) {
		this.MoveToNsAttribute((this.curNsAttr + 1));
		return true;
	}
	return false;
};
$asm07.System.Xml.XmlSubtreeReader.prototype.MoveToElement = function () {
	if (!this.InAttributeActiveState) {
		return false;
	}
	this.curNsAttr = -1;
	this.useCurNode = false;
	return this.reader.MoveToElement();
};
$asm07.System.Xml.XmlSubtreeReader.prototype.ReadAttributeValue = function () {
	if (!this.InAttributeActiveState) {
		return false;
	}
	if (this.curNsAttr === -1) {
		return this.reader.ReadAttributeValue();
	}
	if (this.curNode.type === System.Xml.XmlNodeType.Text) {
		return false;
	}
	this.tmpNode.type = System.Xml.XmlNodeType.Text;
	this.tmpNode.value = this.curNode.value;
	this.SetCurrentNode(this.tmpNode);
	return true;
};
$asm07.System.Xml.XmlSubtreeReader.prototype.Read = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				switch (Number(this.state)) {
					case 0: 
						this.useCurNode = false;
						this.state = $asm07.System.Xml.XmlSubtreeReader.State.Interactive;
						this.ProcessNamespaces();
						return true;
					case 1: 
						break;
					case 2: 
					case 3: 
					case 4: 
						return false;
					case 5: 
						this.nsManager.PopScope();
						__label0__ = "IL_E5";
						continue __step0__;
					case 6: 
						__label0__ = "IL_E5";
						continue __step0__;
					case 7: 
					case 8: 
						return (this.FinishReadElementContentAsBinary() && this.Read());
					case 9: 
					case 10: 
						return (this.FinishReadContentAsBinary() && this.Read());
					default: 
						return false;
				}
				__label0__ = "IL_54";
				continue __step0__;
				break;
			case "IL_54":
				this.curNsAttr = -1;
				this.useCurNode = false;
				this.reader.MoveToElement();
				if (!((this.reader.Depth !== this.initialDepth) || ((this.reader.NodeType !== System.Xml.XmlNodeType.EndElement) && 
							((this.reader.NodeType !== System.Xml.XmlNodeType.Element) || 
								!this.reader.IsEmptyElement)))) {
					this.state = $asm07.System.Xml.XmlSubtreeReader.State.EndOfFile;
					this.SetEmptyNode();
					return false;
				}
				if (this.reader.Read()) {
					this.ProcessNamespaces();
					return true;
				}
				this.SetEmptyNode();
				return false;
				__label0__ = "IL_E5";
				continue __step0__;
				break;
			case "IL_E5":
				this.nsAttrCount = 0;
				this.state = $asm07.System.Xml.XmlSubtreeReader.State.Interactive;
				__label0__ = "IL_54";
				continue __step0__;
				break __step0__;
		}
	}
};
$asm07.System.Xml.XmlSubtreeReader.prototype.Close = function () {
	if (this.state === $asm07.System.Xml.XmlSubtreeReader.State.Closed) {
		return;
	}
	try {
		try {
			if (this.state !== $asm07.System.Xml.XmlSubtreeReader.State.EndOfFile) {
				this.reader.MoveToElement();
				if (!((this.reader.Depth !== this.initialDepth) || 
						(this.reader.NodeType !== System.Xml.XmlNodeType.Element) || this.reader.IsEmptyElement)) {
					this.reader.Read();
				}
			__loop0__: 
				while ((this.reader.Depth > this.initialDepth) && this.reader.Read()) {
				}
			}
		} catch ($exception) {
		}
	} finally {
		this.curNsAttr = -1;
		this.useCurNode = false;
		this.state = $asm07.System.Xml.XmlSubtreeReader.State.Closed;
		this.SetEmptyNode();
	}
};
$asm07.System.Xml.XmlSubtreeReader.prototype.Skip = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				switch (Number(this.state)) {
					case 0: 
						this.Read();
						return;
					case 1: 
						break;
					case 2: 
						return;
					case 3: 
					case 4: 
						return;
					case 5: 
						this.nsManager.PopScope();
						__label0__ = "IL_119";
						continue __step0__;
					case 6: 
						__label0__ = "IL_119";
						continue __step0__;
					case 7: 
					case 8: 
						if (this.FinishReadElementContentAsBinary()) {
							this.Skip();
							return;
						}
						return;
					case 9: 
					case 10: 
						if (this.FinishReadContentAsBinary()) {
							this.Skip();
							return;
						}
						return;
					default: 
						return;
				}
				__label0__ = "IL_42";
				continue __step0__;
				break;
			case "IL_42":
				this.curNsAttr = -1;
				this.useCurNode = false;
				this.reader.MoveToElement();
				if (this.reader.Depth === this.initialDepth) {
					if (!((this.reader.NodeType !== System.Xml.XmlNodeType.Element) || 
							this.reader.IsEmptyElement || !this.reader.Read())) {
					__loop0__: 
						while ((this.reader.NodeType !== System.Xml.XmlNodeType.EndElement) && (this.reader.Depth > this.initialDepth)) {
							this.reader.Skip();
						}
					}
					this.state = $asm07.System.Xml.XmlSubtreeReader.State.EndOfFile;
					this.SetEmptyNode();
					return;
				}
				if (!((this.reader.NodeType !== System.Xml.XmlNodeType.Element) || this.reader.IsEmptyElement)) {
					this.nsManager.PopScope();
				}
				this.reader.Skip();
				this.ProcessNamespaces();
				return;
				__label0__ = "IL_119";
				continue __step0__;
				break;
			case "IL_119":
				this.nsAttrCount = 0;
				this.state = $asm07.System.Xml.XmlSubtreeReader.State.Interactive;
				__label0__ = "IL_42";
				continue __step0__;
				break __step0__;
		}
	}
};
$asm07.System.Xml.XmlSubtreeReader.prototype.ReadContentAsObject = function () {
	try {
		this.InitReadContentAsType("ReadContentAsObject");
		var obj = this.reader.ReadContentAsObject();
		this.FinishReadContentAsType();
	} catch ($exception) {
		this.state = $asm07.System.Xml.XmlSubtreeReader.State.Error;
		throw $exception;
	}
	return obj;
};
$asm07.System.Xml.XmlSubtreeReader.prototype.ReadContentAsBoolean = function () {
	try {
		this.InitReadContentAsType("ReadContentAsBoolean");
		var flag = this.reader.ReadContentAsBoolean();
		this.FinishReadContentAsType();
	} catch ($exception) {
		this.state = $asm07.System.Xml.XmlSubtreeReader.State.Error;
		throw $exception;
	}
	return flag;
};
$asm07.System.Xml.XmlSubtreeReader.prototype.ReadContentAsDateTime = function () {
	try {
		this.InitReadContentAsType("ReadContentAsDateTime");
		var dateTime = this.reader.ReadContentAsDateTime().MemberwiseClone();
		this.FinishReadContentAsType();
	} catch ($exception) {
		this.state = $asm07.System.Xml.XmlSubtreeReader.State.Error;
		throw $exception;
	}
	return dateTime;
};
$asm07.System.Xml.XmlSubtreeReader.prototype.ReadContentAsDouble = function () {
	try {
		this.InitReadContentAsType("ReadContentAsDouble");
		var num = this.reader.ReadContentAsDouble();
		this.FinishReadContentAsType();
	} catch ($exception) {
		this.state = $asm07.System.Xml.XmlSubtreeReader.State.Error;
		throw $exception;
	}
	return num;
};
$asm07.System.Xml.XmlSubtreeReader.prototype.ReadContentAsFloat = function () {
	try {
		this.InitReadContentAsType("ReadContentAsFloat");
		var num = this.reader.ReadContentAsFloat();
		this.FinishReadContentAsType();
	} catch ($exception) {
		this.state = $asm07.System.Xml.XmlSubtreeReader.State.Error;
		throw $exception;
	}
	return num;
};
$asm07.System.Xml.XmlSubtreeReader.prototype.ReadContentAsDecimal = function () {
	try {
		this.InitReadContentAsType("ReadContentAsDecimal");
		var num = this.reader.ReadContentAsDecimal().MemberwiseClone();
		this.FinishReadContentAsType();
	} catch ($exception) {
		this.state = $asm07.System.Xml.XmlSubtreeReader.State.Error;
		throw $exception;
	}
	return num;
};
$asm07.System.Xml.XmlSubtreeReader.prototype.ReadContentAsInt = function () {
	try {
		this.InitReadContentAsType("ReadContentAsInt");
		var num = this.reader.ReadContentAsInt();
		this.FinishReadContentAsType();
	} catch ($exception) {
		this.state = $asm07.System.Xml.XmlSubtreeReader.State.Error;
		throw $exception;
	}
	return num;
};
$asm07.System.Xml.XmlSubtreeReader.prototype.ReadContentAsLong = function () {
	try {
		this.InitReadContentAsType("ReadContentAsLong");
		var num = this.reader.ReadContentAsLong();
		this.FinishReadContentAsType();
	} catch ($exception) {
		this.state = $asm07.System.Xml.XmlSubtreeReader.State.Error;
		throw $exception;
	}
	return num;
};
$asm07.System.Xml.XmlSubtreeReader.prototype.ReadContentAsString = function () {
	try {
		this.InitReadContentAsType("ReadContentAsString");
		var text = this.reader.ReadContentAsString();
		this.FinishReadContentAsType();
	} catch ($exception) {
		this.state = $asm07.System.Xml.XmlSubtreeReader.State.Error;
		throw $exception;
	}
	return text;
};
$asm07.System.Xml.XmlSubtreeReader.prototype.ReadContentAs = function (returnType, namespaceResolver) {
	try {
		this.InitReadContentAsType("ReadContentAs");
		var obj = this.reader.ReadContentAs(returnType, namespaceResolver);
		this.FinishReadContentAsType();
	} catch ($exception) {
		this.state = $asm07.System.Xml.XmlSubtreeReader.State.Error;
		throw $exception;
	}
	return obj;
};
$asm07.System.Xml.XmlSubtreeReader.prototype.get_CanReadBinaryContent = function () {
	return this.reader.CanReadBinaryContent;
};
$asm07.System.Xml.XmlSubtreeReader.prototype.ReadContentAsBase64 = function (buffer, index, count) {
	switch (Number(this.state)) {
		case 0: 
		case 2: 
		case 3: 
		case 4: 
			return 0;
		case 1: 
			this.state = $asm07.System.Xml.XmlSubtreeReader.State.ReadContentAsBase64;
			break;
		case 5: 
		case 6: 
			var nodeType = this.NodeType;
			switch (Number(nodeType)) {
				case 1: 
					throw System.Xml.XmlReader.prototype.CreateReadContentAsException.call(this, "ReadContentAsBase64");
				case 2: 
					if (!((this.curNsAttr === -1) || !this.reader.CanReadBinaryContent)) {
						this.CheckBuffer(buffer, index, count);
						if (count === 0) {
							return 0;
						}
						if (this.nsIncReadOffset === 0) {
							if (!((this.binDecoder === null) || (JSIL.TryCast(this.binDecoder, $asm07.System.Xml.Base64Decoder) === null))) {
								this.binDecoder.Reset();
							} else {
								this.binDecoder = new $asm07.System.Xml.Base64Decoder();
							}
						}
						if (this.nsIncReadOffset === this.curNode.value.length) {
							return 0;
						}
						this.binDecoder.SetNextOutputBuffer(buffer, index, count);
						this.nsIncReadOffset += this.binDecoder.Decode$1(this.curNode.value, this.nsIncReadOffset, (this.curNode.value.length - this.nsIncReadOffset));
						return this.binDecoder.DecodedCount;
					}
					break;
				case 3: 
					break;
				default: 
					if (nodeType !== System.Xml.XmlNodeType.EndElement) {
						return 0;
					}
					return 0;
			}
			return this.reader.ReadContentAsBase64(buffer, index, count);
		case 7: 
		case 8: 
		case 10: 
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_MixingBinaryContentMethods")]);
		case 9: 
			break;
		default: 
			return 0;
	}
	var num = this.reader.ReadContentAsBase64(buffer, index, count);
	if (num === 0) {
		this.state = $asm07.System.Xml.XmlSubtreeReader.State.Interactive;
		this.ProcessNamespaces();
	}
	return num;
};
$asm07.System.Xml.XmlSubtreeReader.prototype.ReadElementContentAsBase64 = function (buffer, index, count) {
	switch (Number(this.state)) {
		case 0: 
		case 2: 
		case 3: 
		case 4: 
			return 0;
		case 1: 
		case 5: 
		case 6: 
			if (!this.InitReadElementContentAsBinary($asm07.System.Xml.XmlSubtreeReader.State.ReadElementContentAsBase64)) {
				return 0;
			}
			break;
		case 7: 
			break;
		case 8: 
		case 9: 
		case 10: 
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_MixingBinaryContentMethods")]);
		default: 
			return 0;
	}
	var num = this.reader.ReadContentAsBase64(buffer, index, count);
	if (!((num <= 0) && (count !== 0))) {
		return num;
	}
	if (this.NodeType !== System.Xml.XmlNodeType.EndElement) {
		throw JSIL.New(System.Xml.XmlException, "_ctor$9", ["Xml_InvalidNodeType", this.reader.NodeType.toString(), JSIL.TryCast(this.reader, System.Xml.IXmlLineInfo)]);
	}
	this.state = $asm07.System.Xml.XmlSubtreeReader.State.Interactive;
	this.ProcessNamespaces();
	if (this.reader.Depth === this.initialDepth) {
		this.state = $asm07.System.Xml.XmlSubtreeReader.State.EndOfFile;
		this.SetEmptyNode();
	} else {
		this.Read();
	}
	return 0;
};
$asm07.System.Xml.XmlSubtreeReader.prototype.ReadContentAsBinHex = function (buffer, index, count) {
	switch (Number(this.state)) {
		case 0: 
		case 2: 
		case 3: 
		case 4: 
			return 0;
		case 1: 
			this.state = $asm07.System.Xml.XmlSubtreeReader.State.ReadContentAsBinHex;
			break;
		case 5: 
		case 6: 
			var nodeType = this.NodeType;
			switch (Number(nodeType)) {
				case 1: 
					throw System.Xml.XmlReader.prototype.CreateReadContentAsException.call(this, "ReadContentAsBinHex");
				case 2: 
					if (!((this.curNsAttr === -1) || !this.reader.CanReadBinaryContent)) {
						this.CheckBuffer(buffer, index, count);
						if (count === 0) {
							return 0;
						}
						if (this.nsIncReadOffset === 0) {
							if (!((this.binDecoder === null) || (JSIL.TryCast(this.binDecoder, $asm07.System.Xml.BinHexDecoder) === null))) {
								this.binDecoder.Reset();
							} else {
								this.binDecoder = new $asm07.System.Xml.BinHexDecoder();
							}
						}
						if (this.nsIncReadOffset === this.curNode.value.length) {
							return 0;
						}
						this.binDecoder.SetNextOutputBuffer(buffer, index, count);
						this.nsIncReadOffset += this.binDecoder.Decode$1(this.curNode.value, this.nsIncReadOffset, (this.curNode.value.length - this.nsIncReadOffset));
						return this.binDecoder.DecodedCount;
					}
					break;
				case 3: 
					break;
				default: 
					if (nodeType !== System.Xml.XmlNodeType.EndElement) {
						return 0;
					}
					return 0;
			}
			return this.reader.ReadContentAsBinHex(buffer, index, count);
		case 7: 
		case 8: 
		case 9: 
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_MixingBinaryContentMethods")]);
		case 10: 
			break;
		default: 
			return 0;
	}
	var num = this.reader.ReadContentAsBinHex(buffer, index, count);
	if (num === 0) {
		this.state = $asm07.System.Xml.XmlSubtreeReader.State.Interactive;
		this.ProcessNamespaces();
	}
	return num;
};
$asm07.System.Xml.XmlSubtreeReader.prototype.ReadElementContentAsBinHex = function (buffer, index, count) {
	switch (Number(this.state)) {
		case 0: 
		case 2: 
		case 3: 
		case 4: 
			return 0;
		case 1: 
		case 5: 
		case 6: 
			if (!this.InitReadElementContentAsBinary($asm07.System.Xml.XmlSubtreeReader.State.ReadElementContentAsBinHex)) {
				return 0;
			}
			break;
		case 7: 
		case 9: 
		case 10: 
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_MixingBinaryContentMethods")]);
		case 8: 
			break;
		default: 
			return 0;
	}
	var num = this.reader.ReadContentAsBinHex(buffer, index, count);
	if (!((num <= 0) && (count !== 0))) {
		return num;
	}
	if (this.NodeType !== System.Xml.XmlNodeType.EndElement) {
		throw JSIL.New(System.Xml.XmlException, "_ctor$9", ["Xml_InvalidNodeType", this.reader.NodeType.toString(), JSIL.TryCast(this.reader, System.Xml.IXmlLineInfo)]);
	}
	this.state = $asm07.System.Xml.XmlSubtreeReader.State.Interactive;
	this.ProcessNamespaces();
	if (this.reader.Depth === this.initialDepth) {
		this.state = $asm07.System.Xml.XmlSubtreeReader.State.EndOfFile;
		this.SetEmptyNode();
	} else {
		this.Read();
	}
	return 0;
};
$asm07.System.Xml.XmlSubtreeReader.prototype.get_CanReadValueChunk = function () {
	return this.reader.CanReadValueChunk;
};
$asm07.System.Xml.XmlSubtreeReader.prototype.ReadValueChunk = function (buffer, index, count) {
	switch (Number(this.state)) {
		case 0: 
		case 2: 
		case 3: 
		case 4: 
			return 0;
		case 1: 
			break;
		case 5: 
		case 6: 
			if (!((this.curNsAttr === -1) || !this.reader.CanReadValueChunk)) {
				this.CheckBuffer(buffer, index, count);
				var num = (this.curNode.value.length - this.nsIncReadOffset);
				if (num > count) {
					num = count;
				}
				if (num > 0) {
					this.curNode.value.CopyTo(this.nsIncReadOffset, buffer, index, num);
				}
				this.nsIncReadOffset += num;
				return num;
			}
			break;
		case 7: 
		case 8: 
		case 9: 
		case 10: 
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_MixingReadValueChunkWithBinary")]);
		default: 
			return 0;
	}
	return this.reader.ReadValueChunk(buffer, index, count);
};
$asm07.System.Xml.XmlSubtreeReader.prototype.LookupNamespace = function (prefix) {
	return this.IXmlNamespaceResolver_LookupNamespace(prefix);
};
$asm07.System.Xml.XmlSubtreeReader.prototype.Dispose = function (disposing) {
	this.Close();
};
$asm07.System.Xml.XmlSubtreeReader.prototype.IXmlLineInfo_get_LineNumber = function () {
	if (!this.useCurNode) {
		var xmlLineInfo = JSIL.TryCast(this.reader, System.Xml.IXmlLineInfo);
		if (xmlLineInfo !== null) {
			return xmlLineInfo.IXmlLineInfo_LineNumber;
		}
	}
	return 0;
};
$asm07.System.Xml.XmlSubtreeReader.prototype.IXmlLineInfo_get_LinePosition = function () {
	if (!this.useCurNode) {
		var xmlLineInfo = JSIL.TryCast(this.reader, System.Xml.IXmlLineInfo);
		if (xmlLineInfo !== null) {
			return xmlLineInfo.IXmlLineInfo_LinePosition;
		}
	}
	return 0;
};
$asm07.System.Xml.XmlSubtreeReader.prototype.IXmlLineInfo_HasLineInfo = function () {
	return JSIL.CheckType(this.reader, System.Xml.IXmlLineInfo);
};
$asm07.System.Xml.XmlSubtreeReader.prototype.IXmlNamespaceResolver_GetNamespacesInScope = function (scope) {
	if (!this.InNamespaceActiveState) {
		return JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.String, System.String), "_ctor$0", []);
	}
	return this.nsManager.GetNamespacesInScope(scope);
};
$asm07.System.Xml.XmlSubtreeReader.prototype.IXmlNamespaceResolver_LookupNamespace = function (prefix) {
	if (!this.InNamespaceActiveState) {
		return null;
	}
	return this.nsManager.LookupNamespace(prefix);
};
$asm07.System.Xml.XmlSubtreeReader.prototype.IXmlNamespaceResolver_LookupPrefix = function (namespaceName) {
	if (!this.InNamespaceActiveState) {
		return null;
	}
	return this.nsManager.LookupPrefix(namespaceName);
};
$asm07.System.Xml.XmlSubtreeReader.prototype.ProcessNamespaces = function () {
	var nodeType = this.reader.NodeType;
	if (nodeType !== System.Xml.XmlNodeType.Element) {
		if (nodeType !== System.Xml.XmlNodeType.EndElement) {
			return;
		}
		this.state = $asm07.System.Xml.XmlSubtreeReader.State.PopNamespaceScope;
	} else {
		this.nsManager.PushScope();
		var text = this.reader.Prefix;
		var namespaceURI = this.reader.NamespaceURI;
		if (this.nsManager.LookupNamespace(text) != namespaceURI) {
			this.AddNamespace(text, namespaceURI);
		}
		if (this.reader.MoveToFirstAttribute()) {
		__loop0__: 
			do {
				text = this.reader.Prefix;
				namespaceURI = this.reader.NamespaceURI;
				if ($asm07.System.Xml.Ref.Equal(namespaceURI, this.xmlnsUri)) {
					if (text.length === 0) {
						this.nsManager.AddNamespace(System.String.Empty, this.reader.Value);
						this.RemoveNamespace(System.String.Empty, this.xmlns);
					} else {
						text = this.reader.LocalName;
						this.nsManager.AddNamespace(text, this.reader.Value);
						this.RemoveNamespace(this.xmlns, text);
					}
				} else if (!((text.length === 0) || !(this.nsManager.LookupNamespace(text) != namespaceURI))) {
					this.AddNamespace(text, namespaceURI);
				}
			} while (this.reader.MoveToNextAttribute());
			this.reader.MoveToElement();
		}
		if (this.reader.IsEmptyElement) {
			this.state = $asm07.System.Xml.XmlSubtreeReader.State.PopNamespaceScope;
			return;
		}
	}
};
$asm07.System.Xml.XmlSubtreeReader.prototype.AddNamespace = function (prefix, ns) {
	this.nsManager.AddNamespace(prefix, ns);
	var num = this.nsAttrCount++;
	if (this.nsAttributes === null) {
		this.nsAttributes = JSIL.Array.New($asm07.System.Xml.XmlSubtreeReader.NodeData, this.InitialNamespaceAttributeCount);
	}
	if (num === this.nsAttributes.length) {
		var destinationArray = JSIL.Array.New($asm07.System.Xml.XmlSubtreeReader.NodeData, (this.nsAttributes.length * 2));
		System.Array.Copy$1(
			this.nsAttributes, 
			0, 
			destinationArray, 
			0, 
			num
		);
		this.nsAttributes = destinationArray;
	}
	if (!this.nsAttributes[num]) {
		this.nsAttributes[num] = new $asm07.System.Xml.XmlSubtreeReader.NodeData();
	}
	if (prefix.length === 0) {
		this.nsAttributes[num].Set(
			System.Xml.XmlNodeType.Attribute, 
			this.xmlns, 
			System.String.Empty, 
			this.xmlns, 
			this.xmlnsUri, 
			ns
		);
	} else {
		this.nsAttributes[num].Set(
			System.Xml.XmlNodeType.Attribute, 
			prefix, 
			this.xmlns, 
			this.reader.NameTable.Add$1((this.xmlns + ":" + prefix)), 
			this.xmlnsUri, 
			ns
		);
	}
	this.state = $asm07.System.Xml.XmlSubtreeReader.State.ClearNsAttributes;
	this.curNsAttr = -1;
};
$asm07.System.Xml.XmlSubtreeReader.prototype.RemoveNamespace = function (prefix, localName) {
__loop0__: 
	for (var i = 0; i < this.nsAttrCount; ++i) {
		if (!(!$asm07.System.Xml.Ref.Equal(prefix, this.nsAttributes[i].prefix) || !$asm07.System.Xml.Ref.Equal(localName, this.nsAttributes[i].localName))) {
			if (i < (this.nsAttrCount - 1)) {
				this.nsAttributes[i] = this.nsAttributes[(this.nsAttrCount - 1)];
				this.nsAttributes[(this.nsAttrCount - 1)] = this.nsAttributes[i];
			}
			--this.nsAttrCount;
			return;
		}
	}
};
$asm07.System.Xml.XmlSubtreeReader.prototype.MoveToNsAttribute = function (index) {
	this.reader.MoveToElement();
	this.curNsAttr = index;
	this.nsIncReadOffset = 0;
	this.SetCurrentNode(this.nsAttributes[index]);
};
$asm07.System.Xml.XmlSubtreeReader.prototype.InitReadElementContentAsBinary = function (binaryState) {
	if (this.NodeType !== System.Xml.XmlNodeType.Element) {
		throw this.reader.CreateReadElementContentAsException("ReadElementContentAsBase64");
	}
	var isEmptyElement = this.IsEmptyElement;
	if (!(this.Read() && !isEmptyElement)) {
		return false;
	}
	var nodeType = this.NodeType;
	if (nodeType === System.Xml.XmlNodeType.Element) {
		throw JSIL.New(System.Xml.XmlException, "_ctor$9", ["Xml_InvalidNodeType", this.reader.NodeType.toString(), JSIL.TryCast(this.reader, System.Xml.IXmlLineInfo)]);
	}
	if (nodeType !== System.Xml.XmlNodeType.EndElement) {
		this.state = binaryState;
		return true;
	}
	this.ProcessNamespaces();
	this.Read();
	return false;
};
$asm07.System.Xml.XmlSubtreeReader.prototype.FinishReadElementContentAsBinary = function () {
	var buffer = JSIL.Array.New(System.Byte, 256);
	if (this.state === $asm07.System.Xml.XmlSubtreeReader.State.ReadElementContentAsBase64) {
	__loop1__: 
		while (this.reader.ReadContentAsBase64(buffer, 0, 256) > 0) {
		}
	} else {
	__loop0__: 
		while (this.reader.ReadContentAsBinHex(buffer, 0, 256) > 0) {
		}
	}
	if (this.NodeType !== System.Xml.XmlNodeType.EndElement) {
		throw JSIL.New(System.Xml.XmlException, "_ctor$9", ["Xml_InvalidNodeType", this.reader.NodeType.toString(), JSIL.TryCast(this.reader, System.Xml.IXmlLineInfo)]);
	}
	this.state = $asm07.System.Xml.XmlSubtreeReader.State.Interactive;
	this.ProcessNamespaces();
	if (this.reader.Depth === this.initialDepth) {
		this.state = $asm07.System.Xml.XmlSubtreeReader.State.EndOfFile;
		this.SetEmptyNode();
		return false;
	}
	return this.Read();
};
$asm07.System.Xml.XmlSubtreeReader.prototype.FinishReadContentAsBinary = function () {
	var buffer = JSIL.Array.New(System.Byte, 256);
	if (this.state === $asm07.System.Xml.XmlSubtreeReader.State.ReadContentAsBase64) {
	__loop1__: 
		while (this.reader.ReadContentAsBase64(buffer, 0, 256) > 0) {
		}
	} else {
	__loop0__: 
		while (this.reader.ReadContentAsBinHex(buffer, 0, 256) > 0) {
		}
	}
	this.state = $asm07.System.Xml.XmlSubtreeReader.State.Interactive;
	this.ProcessNamespaces();
	if (this.reader.Depth === this.initialDepth) {
		this.state = $asm07.System.Xml.XmlSubtreeReader.State.EndOfFile;
		this.SetEmptyNode();
		return false;
	}
	return true;
};
$asm07.System.Xml.XmlSubtreeReader.prototype.get_InAttributeActiveState = function () {
	return (0 !== (98 & (1 << (this.state & 31))));
};
$asm07.System.Xml.XmlSubtreeReader.prototype.get_InNamespaceActiveState = function () {
	return (0 !== (2018 & (1 << (this.state & 31))));
};
$asm07.System.Xml.XmlSubtreeReader.prototype.SetEmptyNode = function () {
	this.tmpNode.type = System.Xml.XmlNodeType.None;
	this.tmpNode.value = System.String.Empty;
	this.curNode = this.tmpNode;
	this.useCurNode = true;
};
$asm07.System.Xml.XmlSubtreeReader.prototype.SetCurrentNode = function (node) {
	this.curNode = node;
	this.useCurNode = true;
};
$asm07.System.Xml.XmlSubtreeReader.prototype.InitReadContentAsType = function (methodName) {
	switch (Number(this.state)) {
		case 0: 
		case 2: 
		case 3: 
		case 4: 
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_ClosedOrErrorReader")]);
		case 1: 
		case 5: 
		case 6: 
			return;
		case 7: 
		case 8: 
		case 9: 
		case 10: 
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_MixingReadValueChunkWithBinary")]);
		default: 
			throw System.Xml.XmlReader.prototype.CreateReadContentAsException.call(this, methodName);
	}
};
$asm07.System.Xml.XmlSubtreeReader.prototype.FinishReadContentAsType = function () {
	var nodeType = this.NodeType;
	switch (Number(nodeType)) {
		case 1: 
			this.ProcessNamespaces();
			return;
		case 2: 
			break;
		default: 
			if (nodeType !== System.Xml.XmlNodeType.EndElement) {
				return;
			}
			this.state = $asm07.System.Xml.XmlSubtreeReader.State.PopNamespaceScope;
			break;
	}
};
$asm07.System.Xml.XmlSubtreeReader.prototype.CheckBuffer = function (buffer, index, count) {
	if (buffer === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["buffer"]);
	}
	if (count < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["count"]);
	}
	if (index < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["index"]);
	}
	if ((buffer.length - index) < count) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["count"]);
	}
};
JSIL.OverloadedMethod($asm07.System.Xml.XmlSubtreeReader.prototype, "GetAttribute", [
		["GetAttribute$0", [System.String]], 
		["GetAttribute$1", [System.String, System.String]], 
		["GetAttribute$2", [System.Int32]]
	]);
JSIL.OverloadedMethod($asm07.System.Xml.XmlSubtreeReader.prototype, "MoveToAttribute", [
		["MoveToAttribute$0", [System.String]], 
		["MoveToAttribute$1", [System.String, System.String]], 
		["MoveToAttribute$2", [System.Int32]]
	]);
JSIL.MakeProperty($asm07.System.Xml.XmlSubtreeReader.prototype, "NodeType", 
	$asm07.System.Xml.XmlSubtreeReader.prototype.get_NodeType, null);
JSIL.MakeProperty($asm07.System.Xml.XmlSubtreeReader.prototype, "Name", 
	$asm07.System.Xml.XmlSubtreeReader.prototype.get_Name, null);
JSIL.MakeProperty($asm07.System.Xml.XmlSubtreeReader.prototype, "LocalName", 
	$asm07.System.Xml.XmlSubtreeReader.prototype.get_LocalName, null);
JSIL.MakeProperty($asm07.System.Xml.XmlSubtreeReader.prototype, "NamespaceURI", 
	$asm07.System.Xml.XmlSubtreeReader.prototype.get_NamespaceURI, null);
JSIL.MakeProperty($asm07.System.Xml.XmlSubtreeReader.prototype, "Prefix", 
	$asm07.System.Xml.XmlSubtreeReader.prototype.get_Prefix, null);
JSIL.MakeProperty($asm07.System.Xml.XmlSubtreeReader.prototype, "Value", 
	$asm07.System.Xml.XmlSubtreeReader.prototype.get_Value, null);
JSIL.MakeProperty($asm07.System.Xml.XmlSubtreeReader.prototype, "Depth", 
	$asm07.System.Xml.XmlSubtreeReader.prototype.get_Depth, null);
JSIL.MakeProperty($asm07.System.Xml.XmlSubtreeReader.prototype, "BaseURI", 
	$asm07.System.Xml.XmlSubtreeReader.prototype.get_BaseURI, null);
JSIL.MakeProperty($asm07.System.Xml.XmlSubtreeReader.prototype, "IsEmptyElement", 
	$asm07.System.Xml.XmlSubtreeReader.prototype.get_IsEmptyElement, null);
JSIL.MakeProperty($asm07.System.Xml.XmlSubtreeReader.prototype, "EOF", 
	$asm07.System.Xml.XmlSubtreeReader.prototype.get_EOF, null);
JSIL.MakeProperty($asm07.System.Xml.XmlSubtreeReader.prototype, "ReadState", 
	$asm07.System.Xml.XmlSubtreeReader.prototype.get_ReadState, null);
JSIL.MakeProperty($asm07.System.Xml.XmlSubtreeReader.prototype, "NameTable", 
	$asm07.System.Xml.XmlSubtreeReader.prototype.get_NameTable, null);
JSIL.MakeProperty($asm07.System.Xml.XmlSubtreeReader.prototype, "AttributeCount", 
	$asm07.System.Xml.XmlSubtreeReader.prototype.get_AttributeCount, null);
JSIL.MakeProperty($asm07.System.Xml.XmlSubtreeReader.prototype, "CanReadBinaryContent", 
	$asm07.System.Xml.XmlSubtreeReader.prototype.get_CanReadBinaryContent, null);
JSIL.MakeProperty($asm07.System.Xml.XmlSubtreeReader.prototype, "CanReadValueChunk", 
	$asm07.System.Xml.XmlSubtreeReader.prototype.get_CanReadValueChunk, null);
JSIL.MakeProperty($asm07.System.Xml.XmlSubtreeReader.prototype, "IXmlLineInfo_LineNumber", 
	$asm07.System.Xml.XmlSubtreeReader.prototype.IXmlLineInfo_get_LineNumber, null);
JSIL.MakeProperty($asm07.System.Xml.XmlSubtreeReader.prototype, "IXmlLineInfo_LinePosition", 
	$asm07.System.Xml.XmlSubtreeReader.prototype.IXmlLineInfo_get_LinePosition, null);
JSIL.MakeProperty($asm07.System.Xml.XmlSubtreeReader.prototype, "InAttributeActiveState", 
	$asm07.System.Xml.XmlSubtreeReader.prototype.get_InAttributeActiveState, null);
JSIL.MakeProperty($asm07.System.Xml.XmlSubtreeReader.prototype, "InNamespaceActiveState", 
	$asm07.System.Xml.XmlSubtreeReader.prototype.get_InNamespaceActiveState, null);
Object.defineProperty($asm07.System.Xml.XmlSubtreeReader, "AttributeActiveStates", {
		"value": 98}
);
Object.defineProperty($asm07.System.Xml.XmlSubtreeReader, "NamespaceActiveStates", {
		"value": 2018}
);
$asm07.System.Xml.XmlSubtreeReader.prototype.initialDepth = 0;
$asm07.System.Xml.XmlSubtreeReader.prototype.state = 0;
$asm07.System.Xml.XmlSubtreeReader.prototype.nsManager = null;
$asm07.System.Xml.XmlSubtreeReader.prototype.nsAttributes = null;
$asm07.System.Xml.XmlSubtreeReader.prototype.nsAttrCount = 0;
$asm07.System.Xml.XmlSubtreeReader.prototype.curNsAttr = 0;
$asm07.System.Xml.XmlSubtreeReader.prototype.xmlns = null;
$asm07.System.Xml.XmlSubtreeReader.prototype.xmlnsUri = null;
$asm07.System.Xml.XmlSubtreeReader.prototype.nsIncReadOffset = 0;
$asm07.System.Xml.XmlSubtreeReader.prototype.binDecoder = null;
$asm07.System.Xml.XmlSubtreeReader.prototype.useCurNode = false;
$asm07.System.Xml.XmlSubtreeReader.prototype.curNode = null;
$asm07.System.Xml.XmlSubtreeReader.prototype.tmpNode = null;
$asm07.System.Xml.XmlSubtreeReader.prototype.InitialNamespaceAttributeCount = 0;

$asm07.System.Xml.XmlSubtreeReader.NodeData.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm07.System.Xml.XmlSubtreeReader.NodeData.prototype.Set = function (nodeType, localName, prefix, name, namespaceUri, value) {
	this.type = nodeType;
	this.localName = localName;
	this.prefix = prefix;
	this.name = name;
	this.namespaceUri = namespaceUri;
	this.value = value;
};
$asm07.System.Xml.XmlSubtreeReader.NodeData.prototype.type = 0;
$asm07.System.Xml.XmlSubtreeReader.NodeData.prototype.localName = null;
$asm07.System.Xml.XmlSubtreeReader.NodeData.prototype.prefix = null;
$asm07.System.Xml.XmlSubtreeReader.NodeData.prototype.name = null;
$asm07.System.Xml.XmlSubtreeReader.NodeData.prototype.namespaceUri = null;
$asm07.System.Xml.XmlSubtreeReader.NodeData.prototype.value = null;

$asm07.System.Xml.XmlTextReaderImpl.prototype._ctor$0 = function (resolver, settings, context) {
	this.xmlCharType = $asm07.System.Xml.XmlCharType.Instance.MemberwiseClone();
	this.curAttrIndex = -1;
	this.supportNamespaces = true;
	this.dtdProcessing = System.Xml.DtdProcessing.Parse;
	this.lastPrefix = System.String.Empty;
	this.parsingStatesStackTop = -1;
	this.fragmentType = System.Xml.XmlNodeType.Document;
	this.nextEntityId = 1;
	System.Xml.XmlReader.prototype._ctor.call(this);
	this.v1Compat = false;
	this.outerReader = this;
	this.xmlContext = JSIL.New($asm07.System.Xml.XmlTextReaderImpl.XmlContext, "_ctor$0", []);
	var xmlNameTable = settings.NameTable;
	if (context === null) {
		if (xmlNameTable === null) {
			xmlNameTable = new System.Xml.NameTable();
		} else {
			this.nameTableFromSettings = true;
		}
		this.nameTable = xmlNameTable;
		this.namespaceManager = new System.Xml.XmlNamespaceManager(xmlNameTable);
	} else {
		this.SetupFromParserContext(context, settings);
		xmlNameTable = this.nameTable;
	}
	xmlNameTable.Add$1(System.String.Empty);
	this.Xml = xmlNameTable.Add$1("xml");
	this.XmlNs = xmlNameTable.Add$1("xmlns");
	this.xmlResolver = resolver;
	this.nodes = JSIL.Array.New($asm07.System.Xml.XmlTextReaderImpl.NodeData, 8);
	this.nodes[0] = new $asm07.System.Xml.XmlTextReaderImpl.NodeData();
	this.curNode = this.nodes[0];
	this.stringBuilder = new $asm07.System.Xml.BufferBuilder();
	this.whitespaceHandling = settings.IgnoreWhitespace ? $asm07.System.Xml.WhitespaceHandling.Significant : $asm07.System.Xml.WhitespaceHandling.All;
	this.normalize = true;
	this.ignorePIs = settings.IgnoreProcessingInstructions;
	this.ignoreComments = settings.IgnoreComments;
	this.checkCharacters = settings.CheckCharacters;
	this.lineNumberOffset = settings.LineNumberOffset;
	this.linePositionOffset = settings.LinePositionOffset;
	this.ps.lineNo = (this.lineNumberOffset + 1);
	this.ps.lineStartPos = (-this.linePositionOffset - 1);
	this.curNode.SetLineInfo((this.ps.LineNo - 1), (this.ps.LinePos - 1));
	this.dtdProcessing = settings.DtdProcessing;
	this.maxCharactersInDocument = settings.MaxCharactersInDocument;
	this.maxCharactersFromEntities = settings.MaxCharactersFromEntities;
	this.charactersInDocument = 0;
	this.charactersFromEntities = 0;
	this.fragmentParserContext = context;
	this.parsingFunction = $asm07.System.Xml.XmlTextReaderImpl.ParsingFunction.SwitchToInteractiveXmlDecl;
	this.nextParsingFunction = $asm07.System.Xml.XmlTextReaderImpl.ParsingFunction.DocumentContent;
	switch (Number(settings.ConformanceLevel)) {
		case 0: 
			this.fragmentType = System.Xml.XmlNodeType.None;
			return;
		case 1: 
			this.fragmentType = System.Xml.XmlNodeType.Element;
			return;
	}
	this.fragmentType = System.Xml.XmlNodeType.Document;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype._ctor$1 = function (stream, bytes, byteCount, settings, baseUri, baseUriStr, context, closeInput) {
	this._ctor$0(settings.GetXmlResolver(), settings, context);
	var encoding = null;
	if (context !== null) {
		if (!((context.BaseURI === null) || 
				(context.BaseURI.length <= 0) || this.UriEqual(baseUri, baseUriStr, context.BaseURI, settings.GetXmlResolver()))) {
			if (baseUriStr.length > 0) {
				this.Throw$3("Xml_DoubleBaseUri");
			}
			baseUriStr = context.BaseURI;
		}
		encoding = context.Encoding;
	}
	this.InitStreamInput$1(
		baseUri, 
		baseUriStr, 
		stream, 
		bytes, 
		byteCount, 
		encoding
	);
	this.closeInput = closeInput;
	this.reportedBaseUri = this.ps.baseUriStr;
	this.reportedEncoding = this.ps.encoding;
	if (!((context === null) || !context.HasDtdInfo)) {
		this.ProcessDtdFromParserContext(context);
	}
};
$asm07.System.Xml.XmlTextReaderImpl.prototype._ctor$2 = function (input, settings, baseUriStr, context) {
	this._ctor$0(settings.GetXmlResolver(), settings, context);
	if (!((context === null) || (context.BaseURI === null))) {
		baseUriStr = context.BaseURI;
	}
	this.InitTextReaderInput$0(baseUriStr, input);
	this.closeInput = settings.CloseInput;
	this.reportedBaseUri = this.ps.baseUriStr;
	this.reportedEncoding = this.ps.encoding;
	if (!((context === null) || !context.HasDtdInfo)) {
		this.ProcessDtdFromParserContext(context);
	}
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.get_Settings = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				var xmlReaderSettings = new System.Xml.XmlReaderSettings();
				if (this.nameTableFromSettings) {
					xmlReaderSettings.NameTable = this.nameTable;
				}
				var xmlNodeType = this.fragmentType;
				switch (Number(xmlNodeType)) {
					case 0: 
						break;
					case 1: 
						xmlReaderSettings.ConformanceLevel = System.Xml.ConformanceLevel.Fragment;
						__label0__ = "IL_4D";
						continue __step0__;
					default: 
						if (xmlNodeType === System.Xml.XmlNodeType.Document) {
							xmlReaderSettings.ConformanceLevel = System.Xml.ConformanceLevel.Document;
							__label0__ = "IL_4D";
							continue __step0__;
						}
						break;
				}
				xmlReaderSettings.ConformanceLevel = System.Xml.ConformanceLevel.Auto;
				__label0__ = "IL_4D";
				continue __step0__;
				break;
			case "IL_4D":
				xmlReaderSettings.CheckCharacters = this.checkCharacters;
				xmlReaderSettings.LineNumberOffset = this.lineNumberOffset;
				xmlReaderSettings.LinePositionOffset = this.linePositionOffset;
				xmlReaderSettings.IgnoreWhitespace = (this.whitespaceHandling === $asm07.System.Xml.WhitespaceHandling.Significant);
				xmlReaderSettings.IgnoreProcessingInstructions = this.ignorePIs;
				xmlReaderSettings.IgnoreComments = this.ignoreComments;
				xmlReaderSettings.DtdProcessing = this.dtdProcessing;
				xmlReaderSettings.MaxCharactersInDocument = this.maxCharactersInDocument;
				xmlReaderSettings.MaxCharactersFromEntities = this.maxCharactersFromEntities;
				xmlReaderSettings.ReadOnly = true;
				return xmlReaderSettings;
				break __step0__;
		}
	}
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.get_NodeType = function () {
	return this.curNode.type;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.get_Name = function () {
	return this.curNode.GetNameWPrefix(this.nameTable);
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.get_LocalName = function () {
	return this.curNode.localName;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.get_NamespaceURI = function () {
	return this.curNode.ns;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.get_Prefix = function () {
	return this.curNode.prefix;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.get_Value = function () {
	if (this.parsingFunction >= $asm07.System.Xml.XmlTextReaderImpl.ParsingFunction.PartialTextValue) {
		if (this.parsingFunction === $asm07.System.Xml.XmlTextReaderImpl.ParsingFunction.PartialTextValue) {
			this.FinishPartialValue();
			this.parsingFunction = this.nextParsingFunction;
		} else {
			this.FinishOtherValueIterator();
		}
	}
	return this.curNode.StringValue;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.get_Depth = function () {
	return this.curNode.depth;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.get_BaseURI = function () {
	return this.reportedBaseUri;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.get_IsEmptyElement = function () {
	return this.curNode.IsEmptyElement;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.get_IsDefault = function () {
	return this.curNode.IsDefaultAttribute;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.get_XmlSpace = function () {
	return this.xmlContext.xmlSpace;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.get_XmlLang = function () {
	return this.xmlContext.xmlLang;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.get_ReadState = function () {
	return this.readState;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.get_EOF = function () {
	return (this.parsingFunction === $asm07.System.Xml.XmlTextReaderImpl.ParsingFunction.Eof);
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.get_NameTable = function () {
	return this.nameTable;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.get_CanResolveEntity = function () {
	return true;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.get_AttributeCount = function () {
	return this.attrCount;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.GetAttribute$0 = function (name) {
	if (name.IndexOf$0(":") === -1) {
		var num = this.GetIndexOfAttributeWithoutPrefix(name);
	} else {
		num = this.GetIndexOfAttributeWithPrefix(name);
	}
	if (num < 0) {
		return null;
	}
	return this.nodes[num].StringValue;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.GetAttribute$1 = function (localName, namespaceURI) {
	namespaceURI = (namespaceURI === null) ? System.String.Empty : this.nameTable.Get$1(namespaceURI);
	localName = this.nameTable.Get$1(localName);
__loop0__: 
	for (var i = (this.index + 1); i < ((this.index + this.attrCount) + 1); ++i) {
		if (!(!$asm07.System.Xml.Ref.Equal(this.nodes[i].localName, localName) || !$asm07.System.Xml.Ref.Equal(this.nodes[i].ns, namespaceURI))) {
			return this.nodes[i].StringValue;
		}
	}
	return null;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.GetAttribute$2 = function (i) {
	if (!((i >= 0) && (i < this.attrCount))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["i"]);
	}
	return this.nodes[((this.index + i) + 1)].StringValue;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.MoveToAttribute$0 = function (name) {
	if (name.IndexOf$0(":") === -1) {
		var num = this.GetIndexOfAttributeWithoutPrefix(name);
	} else {
		num = this.GetIndexOfAttributeWithPrefix(name);
	}
	if (num >= 0) {
		if (this.InAttributeValueIterator) {
			this.FinishAttributeValueIterator();
		}
		this.curAttrIndex = ((num - this.index) - 1);
		this.curNode = this.nodes[num];
		return true;
	}
	return false;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.MoveToAttribute$1 = function (localName, namespaceURI) {
	namespaceURI = (namespaceURI === null) ? System.String.Empty : this.nameTable.Get$1(namespaceURI);
	localName = this.nameTable.Get$1(localName);
__loop0__: 
	for (var i = (this.index + 1); i < ((this.index + this.attrCount) + 1); ++i) {
		if (!(!$asm07.System.Xml.Ref.Equal(this.nodes[i].localName, localName) || !$asm07.System.Xml.Ref.Equal(this.nodes[i].ns, namespaceURI))) {
			this.curAttrIndex = ((i - this.index) - 1);
			this.curNode = this.nodes[i];
			if (this.InAttributeValueIterator) {
				this.FinishAttributeValueIterator();
			}
			return true;
		}
	}
	return false;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.MoveToAttribute$2 = function (i) {
	if (!((i >= 0) && (i < this.attrCount))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["i"]);
	}
	if (this.InAttributeValueIterator) {
		this.FinishAttributeValueIterator();
	}
	this.curAttrIndex = i;
	this.curNode = this.nodes[((this.index + 1) + this.curAttrIndex)];
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.MoveToFirstAttribute = function () {
	if (this.attrCount === 0) {
		return false;
	}
	if (this.InAttributeValueIterator) {
		this.FinishAttributeValueIterator();
	}
	this.curAttrIndex = 0;
	this.curNode = this.nodes[(this.index + 1)];
	return true;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.MoveToNextAttribute = function () {
	if ((this.curAttrIndex + 1) < this.attrCount) {
		if (this.InAttributeValueIterator) {
			this.FinishAttributeValueIterator();
		}
		this.curNode = this.nodes[((this.index + 1) + ++this.curAttrIndex)];
		return true;
	}
	return false;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.MoveToElement = function () {
	if (this.InAttributeValueIterator) {
		this.FinishAttributeValueIterator();
	} else if (this.curNode.type !== System.Xml.XmlNodeType.Attribute) {
		return false;
	}
	this.curAttrIndex = -1;
	this.curNode = this.nodes[this.index];
	return true;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.Read = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
			__loop0__: 
				while (true) {
					switch (Number(this.parsingFunction)) {
						case 0: 
							__label0__ = "IL_63";
							continue __step0__;
						case 1: 
							__label0__ = "IL_1B1";
							continue __step0__;
						case 2: 
							this.readState = System.Xml.ReadState.Interactive;
							this.parsingFunction = this.nextParsingFunction;
							break;
						case 3: 
							this.readState = System.Xml.ReadState.Interactive;
							this.parsingFunction = this.nextParsingFunction;
							if (this.ParseXmlDeclaration(false)) {
								__label0__ = "Block_1";
								continue __step0__;
							}
							this.reportedEncoding = this.ps.encoding;
							break;
						case 4: 
							__label0__ = "IL_6A";
							continue __step0__;
						case 5: 
							this.ResetAttributes();
							++this.index;
							this.curNode = this.AddNode(this.index, this.index);
							this.parsingFunction = $asm07.System.Xml.XmlTextReaderImpl.ParsingFunction.ElementContent;
							break;
						case 6: 
							this.PopElementContext();
							this.parsingFunction = this.nextParsingFunction;
							break;
						case 7: 
							this.curNode = this.nodes[this.index];
							this.curNode.IsEmptyElement = false;
							this.ResetAttributes();
							this.PopElementContext();
							this.parsingFunction = this.nextParsingFunction;
							break;
						case 8: 
							this.ResetAttributes();
							this.curNode = this.nodes[this.index];
							this.parsingFunction = (this.index === 0) ? $asm07.System.Xml.XmlTextReaderImpl.ParsingFunction.DocumentContent : $asm07.System.Xml.XmlTextReaderImpl.ParsingFunction.ElementContent;
							break;
						case 9: 
						case 10: 
						case 11: 
							return false;
						case 15: 
							__label0__ = "IL_1A7";
							continue __step0__;
						case 16: 
							this.SkipPartialTextValue();
							break;
						case 17: 
							this.FinishAttributeValueIterator();
							this.curNode = this.nodes[this.index];
							break;
						case 18: 
							this.FinishReadValueChunk();
							break;
						case 19: 
							this.FinishReadContentAsBinary();
							break;
						case 20: 
							this.FinishReadElementContentAsBinary();
							break;
					}
				}
				__label0__ = "IL_63";
				continue __step0__;
				break;
			case "IL_63":
				return this.ParseElementContent();
				__label0__ = "IL_6A";
				continue __step0__;
				break;
			case "IL_6A":
				return this.ParseDocumentContent();
				__label0__ = "Block_1";
				continue __step0__;
				break;
			case "Block_1":
				this.reportedEncoding = this.ps.encoding;
				return true;
				__label0__ = "IL_1A7";
				continue __step0__;
				break;
			case "IL_1A7":
				this.OnEof();
				return false;
				__label0__ = "IL_1B1";
				continue __step0__;
				break;
			case "IL_1B1":
				this.ThrowWithoutLineInfo$0("Xml_MissingRoot");
				return false;
				break __step0__;
		}
	}
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.Close$0 = function () {
	this.Close$1(this.closeInput);
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.Skip = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				if (this.readState !== System.Xml.ReadState.Interactive) {
					return;
				}
				if (this.InAttributeValueIterator) {
					this.FinishAttributeValueIterator();
					this.curNode = this.nodes[this.index];
				} else {
					switch (Number(this.parsingFunction)) {
						case 16: 
							this.SkipPartialTextValue();
							break;
						case 18: 
							this.FinishReadValueChunk();
							break;
						case 19: 
							this.FinishReadContentAsBinary();
							break;
						case 20: 
							this.FinishReadElementContentAsBinary();
							break;
					}
				}
				switch (Number(this.curNode.type)) {
					case 1: 
						break;
					case 2: 
						this.outerReader.MoveToElement();
						break;
					default: 
						__label0__ = "IL_D7";
						continue __step0__;
				}
				if (!this.curNode.IsEmptyElement) {
					var num = this.index;
					this.parsingMode = $asm07.System.Xml.XmlTextReaderImpl.ParsingMode.SkipContent;
				__loop0__: 
					while (this.outerReader.Read() && (this.index > num)) {
					}
					this.parsingMode = $asm07.System.Xml.XmlTextReaderImpl.ParsingMode.Full;
				}
				__label0__ = "IL_D7";
				continue __step0__;
				break;
			case "IL_D7":
				this.outerReader.Read();
				break __step0__;
		}
	}
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.LookupNamespace$0 = function (prefix) {
	if (!this.supportNamespaces) {
		return null;
	}
	return this.namespaceManager.LookupNamespace(prefix);
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ReadAttributeValue = function () {
	if (this.parsingFunction === $asm07.System.Xml.XmlTextReaderImpl.ParsingFunction.InReadAttributeValue) {
		return false;
	}
	if (this.curNode.type !== System.Xml.XmlNodeType.Attribute) {
		return false;
	}
	if (!((this.readState === System.Xml.ReadState.Interactive) && (this.curAttrIndex >= 0))) {
		return false;
	}
	if (this.parsingFunction === $asm07.System.Xml.XmlTextReaderImpl.ParsingFunction.InReadValueChunk) {
		this.FinishReadValueChunk();
	}
	if (this.parsingFunction === $asm07.System.Xml.XmlTextReaderImpl.ParsingFunction.InReadContentAsBinary) {
		this.FinishReadContentAsBinary();
	}
	var nodeData = this.AddNode(((this.index + this.attrCount) + 1), (this.curNode.depth + 1));
	nodeData.SetValueNode$0(System.Xml.XmlNodeType.Text, this.curNode.StringValue);
	nodeData.lineInfo = this.curNode.lineInfo2.MemberwiseClone();
	nodeData.depth = (this.curNode.depth + 1);
	this.curNode = nodeData;
	this.nextParsingFunction = this.parsingFunction;
	this.parsingFunction = $asm07.System.Xml.XmlTextReaderImpl.ParsingFunction.InReadAttributeValue;
	return true;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ResolveEntity = function () {
	throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_InvalidOperation")]);
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.get_CanReadBinaryContent = function () {
	return true;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ReadContentAsBase64 = function (buffer, index, count) {
	if (buffer === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["buffer"]);
	}
	if (count < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["count"]);
	}
	if (index < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["index"]);
	}
	if ((buffer.length - index) < count) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["count"]);
	}
	if (this.parsingFunction === $asm07.System.Xml.XmlTextReaderImpl.ParsingFunction.InReadContentAsBinary) {
		if (this.incReadDecoder === this.base64Decoder) {
			return this.ReadContentAsBinary(buffer, index, count);
		}
	} else {
		if (this.readState !== System.Xml.ReadState.Interactive) {
			return 0;
		}
		if (this.parsingFunction === $asm07.System.Xml.XmlTextReaderImpl.ParsingFunction.InReadElementContentAsBinary) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_MixingBinaryContentMethods")]);
		}
		if (!System.Xml.XmlReader.CanReadContentAs(this.curNode.type)) {
			throw System.Xml.XmlReader.prototype.CreateReadContentAsException.call(this, "ReadContentAsBase64");
		}
		if (!this.InitReadContentAsBinary()) {
			return 0;
		}
	}
	this.InitBase64Decoder();
	return this.ReadContentAsBinary(buffer, index, count);
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ReadContentAsBinHex = function (buffer, index, count) {
	if (buffer === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["buffer"]);
	}
	if (count < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["count"]);
	}
	if (index < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["index"]);
	}
	if ((buffer.length - index) < count) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["count"]);
	}
	if (this.parsingFunction === $asm07.System.Xml.XmlTextReaderImpl.ParsingFunction.InReadContentAsBinary) {
		if (this.incReadDecoder === this.binHexDecoder) {
			return this.ReadContentAsBinary(buffer, index, count);
		}
	} else {
		if (this.readState !== System.Xml.ReadState.Interactive) {
			return 0;
		}
		if (this.parsingFunction === $asm07.System.Xml.XmlTextReaderImpl.ParsingFunction.InReadElementContentAsBinary) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_MixingBinaryContentMethods")]);
		}
		if (!System.Xml.XmlReader.CanReadContentAs(this.curNode.type)) {
			throw System.Xml.XmlReader.prototype.CreateReadContentAsException.call(this, "ReadContentAsBinHex");
		}
		if (!this.InitReadContentAsBinary()) {
			return 0;
		}
	}
	this.InitBinHexDecoder();
	return this.ReadContentAsBinary(buffer, index, count);
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ReadElementContentAsBase64 = function (buffer, index, count) {
	if (buffer === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["buffer"]);
	}
	if (count < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["count"]);
	}
	if (index < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["index"]);
	}
	if ((buffer.length - index) < count) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["count"]);
	}
	if (this.parsingFunction === $asm07.System.Xml.XmlTextReaderImpl.ParsingFunction.InReadElementContentAsBinary) {
		if (this.incReadDecoder === this.base64Decoder) {
			return this.ReadElementContentAsBinary(buffer, index, count);
		}
	} else {
		if (this.readState !== System.Xml.ReadState.Interactive) {
			return 0;
		}
		if (this.parsingFunction === $asm07.System.Xml.XmlTextReaderImpl.ParsingFunction.InReadContentAsBinary) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_MixingBinaryContentMethods")]);
		}
		if (this.curNode.type !== System.Xml.XmlNodeType.Element) {
			throw System.Xml.XmlReader.prototype.CreateReadElementContentAsException.call(this, "ReadElementContentAsBinHex");
		}
		if (!this.InitReadElementContentAsBinary()) {
			return 0;
		}
	}
	this.InitBase64Decoder();
	return this.ReadElementContentAsBinary(buffer, index, count);
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ReadElementContentAsBinHex = function (buffer, index, count) {
	if (buffer === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["buffer"]);
	}
	if (count < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["count"]);
	}
	if (index < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["index"]);
	}
	if ((buffer.length - index) < count) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["count"]);
	}
	if (this.parsingFunction === $asm07.System.Xml.XmlTextReaderImpl.ParsingFunction.InReadElementContentAsBinary) {
		if (this.incReadDecoder === this.binHexDecoder) {
			return this.ReadElementContentAsBinary(buffer, index, count);
		}
	} else {
		if (this.readState !== System.Xml.ReadState.Interactive) {
			return 0;
		}
		if (this.parsingFunction === $asm07.System.Xml.XmlTextReaderImpl.ParsingFunction.InReadContentAsBinary) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_MixingBinaryContentMethods")]);
		}
		if (this.curNode.type !== System.Xml.XmlNodeType.Element) {
			throw System.Xml.XmlReader.prototype.CreateReadElementContentAsException.call(this, "ReadElementContentAsBinHex");
		}
		if (!this.InitReadElementContentAsBinary()) {
			return 0;
		}
	}
	this.InitBinHexDecoder();
	return this.ReadElementContentAsBinary(buffer, index, count);
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.get_CanReadValueChunk = function () {
	return true;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ReadValueChunk = function (buffer, index, count) {
	if (!System.Xml.XmlReader.HasValueInternal(this.curNode.type)) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm07.System.Xml.Res.GetString$0("Xml_InvalidReadValueChunk", [this.curNode.type])]);
	}
	if (buffer === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["buffer"]);
	}
	if (count < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["count"]);
	}
	if (index < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["index"]);
	}
	if ((buffer.length - index) < count) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["count"]);
	}
	if (this.parsingFunction !== $asm07.System.Xml.XmlTextReaderImpl.ParsingFunction.InReadValueChunk) {
		if (this.readState !== System.Xml.ReadState.Interactive) {
			return 0;
		}
		if (this.parsingFunction === $asm07.System.Xml.XmlTextReaderImpl.ParsingFunction.PartialTextValue) {
			this.incReadState = $asm07.System.Xml.XmlTextReaderImpl.IncrementalReadState.ReadValueChunk_OnPartialValue;
		} else {
			this.incReadState = $asm07.System.Xml.XmlTextReaderImpl.IncrementalReadState.ReadValueChunk_OnCachedValue;
			this.nextNextParsingFunction = this.nextParsingFunction;
			this.nextParsingFunction = this.parsingFunction;
		}
		this.parsingFunction = $asm07.System.Xml.XmlTextReaderImpl.ParsingFunction.InReadValueChunk;
		this.readValueOffset = 0;
	}
	if (count === 0) {
		return 0;
	}
	var num = 0;
	var num2 = this.curNode.CopyTo$1(this.readValueOffset, buffer, (index + num), (count - num));
	num += num2;
	this.readValueOffset += num2;
	if (num === count) {
		var ch = buffer[((index + count) - 1)];
		if ($asm07.System.Xml.XmlCharType.IsHighSurrogate(ch.charCodeAt(0))) {
			--num;
			--this.readValueOffset;
			if (num === 0) {
				this.Throw$3("Xml_NotEnoughSpaceForSurrogatePair");
			}
		}
		return num;
	}
	if (this.incReadState === $asm07.System.Xml.XmlTextReaderImpl.IncrementalReadState.ReadValueChunk_OnPartialValue) {
		this.curNode.SetValue$0(System.String.Empty);
		var flag = false;
		var num3 = new JSIL.Variable(0);
		var num4 = new JSIL.Variable(0);
	__loop0__: 
		while ((num < count) && !flag) {
			var num5 = new JSIL.Variable(0);
			flag = this.ParseText$1(/* ref */ num3, /* ref */ num4, /* ref */ num5);
			var num6 = (count - num);
			if (num6 > (num4.value - num3.value)) {
				num6 = (num4.value - num3.value);
			}
			$asm07.System.Xml.XmlTextReaderImpl.BlockCopyChars(
				this.ps.chars, 
				num3.value, 
				buffer, 
				(index + num), 
				num6
			);
			num += num6;
			num3.value += num6;
		}
		this.incReadState = flag ? $asm07.System.Xml.XmlTextReaderImpl.IncrementalReadState.ReadValueChunk_OnCachedValue : $asm07.System.Xml.XmlTextReaderImpl.IncrementalReadState.ReadValueChunk_OnPartialValue;
		if (num === count) {
			var ch2 = buffer[((index + count) - 1)];
			if ($asm07.System.Xml.XmlCharType.IsHighSurrogate(ch2.charCodeAt(0))) {
				--num;
				--num3.value;
				if (num === 0) {
					this.Throw$3("Xml_NotEnoughSpaceForSurrogatePair");
				}
			}
		}
		this.readValueOffset = 0;
		this.curNode.SetValue$1(this.ps.chars, num3.value, (num4.value - num3.value));
	}
	return num;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.HasLineInfo = function () {
	return true;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.get_LineNumber = function () {
	return this.curNode.LineNo;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.get_LinePosition = function () {
	return this.curNode.LinePos;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.IXmlNamespaceResolver_GetNamespacesInScope = function (scope) {
	return this.GetNamespacesInScope(scope);
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.IXmlNamespaceResolver_LookupNamespace = function (prefix) {
	return this.LookupNamespace(prefix);
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.IXmlNamespaceResolver_LookupPrefix = function (namespaceName) {
	return this.LookupPrefix(namespaceName);
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.GetNamespacesInScope = function (scope) {
	return this.namespaceManager.GetNamespacesInScope(scope);
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.LookupPrefix = function (namespaceName) {
	return this.namespaceManager.LookupPrefix(namespaceName);
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.get_DtdParserProxy_NameTable = function () {
	return this.nameTable;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.get_DtdParserProxy_NamespaceResolver = function () {
	return this.namespaceManager;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.get_DtdParserProxy_DtdValidation = function () {
	return false;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.get_DtdParserProxy_Normalization = function () {
	return this.normalize;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.get_DtdParserProxy_Namespaces = function () {
	return this.supportNamespaces;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.get_DtdParserProxy_V1CompatibilityMode = function () {
	return this.v1Compat;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.get_DtdParserProxy_BaseUri = function () {
	if (!((this.ps.baseUriStr.length <= 0) || 
			!System.Uri.op_Equality(this.ps.baseUri, null) || (this.xmlResolver === null))) {
		this.ps.baseUri = this.xmlResolver.ResolveUri(null, this.ps.baseUriStr);
	}
	return this.ps.baseUri;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.get_DtdParserProxy_IsEof = function () {
	return this.ps.isEof;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.get_DtdParserProxy_ParsingBuffer = function () {
	return this.ps.chars;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.get_DtdParserProxy_ParsingBufferLength = function () {
	return this.ps.charsUsed;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.get_DtdParserProxy_CurrentPosition = function () {
	return this.ps.charPos;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.set_DtdParserProxy_CurrentPosition = function (value) {
	this.ps.charPos = value;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.get_DtdParserProxy_EntityStackLength = function () {
	return (this.parsingStatesStackTop + 1);
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.get_DtdParserProxy_IsEntityEolNormalized = function () {
	return this.ps.eolNormalized;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.DtdParserProxy_OnNewLine = function (pos) {
	this.OnNewLine(pos);
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.get_DtdParserProxy_LineNo = function () {
	return this.ps.LineNo;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.get_DtdParserProxy_LineStartPosition = function () {
	return this.ps.lineStartPos;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.DtdParserProxy_ReadData = function () {
	return this.ReadData();
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.DtdParserProxy_ParseNumericCharRef = function (internalSubsetBuilder) {
	var entityType = new JSIL.Variable(0);
	return this.ParseNumericCharRef(true, internalSubsetBuilder, /* ref */ entityType);
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.DtdParserProxy_ParseNamedCharRef = function (expand, internalSubsetBuilder) {
	return this.ParseNamedCharRef(expand, internalSubsetBuilder);
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.DtdParserProxy_ParsePI = function (sb) {
	if (sb === null) {
		this.parsingMode = $asm07.System.Xml.XmlTextReaderImpl.ParsingMode.SkipNode;
		this.ParsePI$1(null);
		this.parsingMode = this.parsingMode;
		return;
	}
	this.ParsePI$1(sb);
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.DtdParserProxy_ParseComment = function (sb) {
	try {
		if (sb === null) {
			this.parsingMode = $asm07.System.Xml.XmlTextReaderImpl.ParsingMode.SkipNode;
			this.ParseCDataOrComment$0(System.Xml.XmlNodeType.Comment);
			this.parsingMode = this.parsingMode;
		} else {
			this.curNode = this.AddNode(((this.index + this.attrCount) + 1), this.index);
			this.ParseCDataOrComment$0(System.Xml.XmlNodeType.Comment);
			this.curNode.CopyTo$0(0, sb);
			this.curNode = this.curNode;
		}
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.Xml.XmlException)) {
			var arg_66_0 = $exception;
			throw arg_66_0;
		} else {
			throw $exception;
		}
	}
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.DtdParserProxy_PushEntity = function (entity, /* ref */ entityId) {
	if (entity.IDtdEntityInfo_IsExternal) {
		if (this.xmlResolver === null) {
			entityId.value = -1;
			return false;
		}
		var result = this.PushExternalEntity(entity);
	} else {
		this.PushInternalEntity(entity);
		result = true;
	}
	entityId.value = this.ps.entityId;
	return result;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.DtdParserProxy_PopEntity = function (/* ref */ oldEntity, /* ref */ newEntityId) {
	if (this.parsingStatesStackTop === -1) {
		oldEntity.value = null;
		newEntityId.value = -1;
		return false;
	}
	oldEntity.value = this.ps.entity;
	this.PopEntity();
	newEntityId.value = this.ps.entityId;
	return true;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.DtdParserProxy_PushExternalSubset = function (systemId, publicId) {
	if (this.xmlResolver === null) {
		return false;
	}
	this.PushExternalEntityOrSubset(
		publicId, 
		systemId, 
		this.ps.baseUriStr, 
		/* ref */ new JSIL.MemberReference(this.ps, "baseUri"), 
		null
	);
	this.ps.entity = null;
	this.ps.entityId = 0;
	if (this.v1Compat) {
		this.EatWhitespaces(null);
	}
	if (!this.ParseXmlDeclaration(true)) {
		this.ps.charPos = this.ps.charPos;
	}
	return true;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.DtdParserProxy_PushInternalDtd = function (baseUri, internalDtd) {
	this.PushParsingState();
	this.RegisterConsumedCharacters(internalDtd.length, false);
	this.InitStringInput(baseUri, System.Text.Encoding.Unicode, internalDtd);
	this.ps.entity = null;
	this.ps.entityId = 0;
	this.ps.eolNormalized = false;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.DtdParserProxy_Throw = function (e) {
	this.Throw$10(e);
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.DtdParserProxy_OnSystemId = function (systemId, keywordLineInfo, systemLiteralLineInfo) {
	var nodeData = this.AddAttributeNoChecks("SYSTEM", (this.index + 1));
	nodeData.SetValue$0(systemId);
	nodeData.lineInfo = keywordLineInfo;
	nodeData.lineInfo2 = systemLiteralLineInfo;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.DtdParserProxy_OnPublicId = function (publicId, keywordLineInfo, publicLiteralLineInfo) {
	var nodeData = this.AddAttributeNoChecks("PUBLIC", (this.index + 1));
	nodeData.SetValue$0(publicId);
	nodeData.lineInfo = keywordLineInfo;
	nodeData.lineInfo2 = publicLiteralLineInfo;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.Throw$0 = function (pos, res, arg) {
	this.ps.charPos = pos;
	this.Throw$5(res, arg);
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.Throw$1 = function (pos, res, args) {
	this.ps.charPos = pos;
	this.Throw$7(res, args);
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.Throw$2 = function (pos, res) {
	this.ps.charPos = pos;
	this.Throw$5(res, System.String.Empty);
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.Throw$3 = function (res) {
	this.Throw$5(res, System.String.Empty);
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.Throw$4 = function (res, lineNo, linePos) {
	this.Throw$10(JSIL.New(System.Xml.XmlException, "_ctor$16", [res, System.String.Empty, lineNo, linePos, this.ps.baseUriStr]));
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.Throw$5 = function (res, arg) {
	this.Throw$10(JSIL.New(System.Xml.XmlException, "_ctor$16", [res, arg, this.ps.LineNo, this.ps.LinePos, this.ps.baseUriStr]));
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.Throw$6 = function (res, arg, lineNo, linePos) {
	this.Throw$10(JSIL.New(System.Xml.XmlException, "_ctor$16", [res, arg, lineNo, linePos, this.ps.baseUriStr]));
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.Throw$7 = function (res, args) {
	this.Throw$10(JSIL.New(System.Xml.XmlException, "_ctor$18", [res, args, this.ps.LineNo, this.ps.LinePos, this.ps.baseUriStr]));
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.Throw$8 = function (res, arg, innerException) {
	this.Throw$9(res, JSIL.Array.New(System.String, [arg]), innerException);
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.Throw$9 = function (res, args, innerException) {
	this.Throw$10(JSIL.New(System.Xml.XmlException, "_ctor$20", [res, args, innerException, this.ps.LineNo, this.ps.LinePos, this.ps.baseUriStr]));
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.Throw$10 = function (e) {
	this.SetErrorState();
	var xmlException = JSIL.TryCast(e, System.Xml.XmlException);
	if (xmlException !== null) {
		this.curNode.SetLineInfo(xmlException.LineNumber, xmlException.LinePosition);
	}
	throw e;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ReThrow = function (e, lineNo, linePos) {
	this.Throw$10(JSIL.New(System.Xml.XmlException, "_ctor$4", [e.Message, null, lineNo, linePos, this.ps.baseUriStr]));
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ThrowWithoutLineInfo$0 = function (res) {
	this.Throw$10(JSIL.New(System.Xml.XmlException, "_ctor$8", [res, System.String.Empty, this.ps.baseUriStr]));
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ThrowWithoutLineInfo$1 = function (res, arg) {
	this.Throw$10(JSIL.New(System.Xml.XmlException, "_ctor$8", [res, arg, this.ps.baseUriStr]));
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ThrowWithoutLineInfo$2 = function (res, args, innerException) {
	this.Throw$10(JSIL.New(System.Xml.XmlException, "_ctor$20", [res, args, innerException, 0, 0, this.ps.baseUriStr]));
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ThrowInvalidChar = function (data, length, invCharPos) {
	this.Throw$1(invCharPos, "Xml_InvalidCharacter", System.Xml.XmlException.BuildCharExceptionArgs$2(data, length, invCharPos));
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.SetErrorState = function () {
	this.parsingFunction = $asm07.System.Xml.XmlTextReaderImpl.ParsingFunction.Error;
	this.readState = System.Xml.ReadState.Error;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.get_InAttributeValueIterator = function () {
	return ((this.attrCount > 0) && (this.parsingFunction >= $asm07.System.Xml.XmlTextReaderImpl.ParsingFunction.InReadAttributeValue));
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.FinishAttributeValueIterator = function () {
	if (this.parsingFunction === $asm07.System.Xml.XmlTextReaderImpl.ParsingFunction.InReadValueChunk) {
		this.FinishReadValueChunk();
	} else if (this.parsingFunction === $asm07.System.Xml.XmlTextReaderImpl.ParsingFunction.InReadContentAsBinary) {
		this.FinishReadContentAsBinary();
	}
	if (this.parsingFunction === $asm07.System.Xml.XmlTextReaderImpl.ParsingFunction.InReadAttributeValue) {
		this.parsingFunction = this.nextParsingFunction;
		this.nextParsingFunction = (this.index > 0) ? $asm07.System.Xml.XmlTextReaderImpl.ParsingFunction.ElementContent : $asm07.System.Xml.XmlTextReaderImpl.ParsingFunction.DocumentContent;
	}
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.InitStreamInput$0 = function (baseUri, stream, encoding) {
	this.InitStreamInput$1(
		baseUri, 
		baseUri.toString(), 
		stream, 
		null, 
		0, 
		encoding
	);
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.InitStreamInput$1 = function (baseUri, baseUriStr, stream, bytes, byteCount, encoding) {
	this.ps.stream = stream;
	this.ps.baseUri = baseUri;
	this.ps.baseUriStr = baseUriStr;
	if (bytes !== null) {
		this.ps.bytes = bytes;
		this.ps.bytesUsed = byteCount;
		var num = this.ps.bytes.length;
	} else {
		num = System.Xml.XmlReader.CalcBufferSize(stream);
		if (!((this.ps.bytes !== null) && (this.ps.bytes.length >= num))) {
			this.ps.bytes = JSIL.Array.New(System.Byte, num);
		}
	}
	if (!((this.ps.chars !== null) && (this.ps.chars.length >= (num + 1)))) {
		this.ps.chars = JSIL.Array.New(System.Char, (num + 1));
	}
	this.ps.bytePos = 0;
__loop0__: 
	while ((this.ps.bytesUsed < 4) && ((this.ps.bytes.length - this.ps.bytesUsed) > 0)) {
		var num2 = stream.Read(this.ps.bytes, this.ps.bytesUsed, (this.ps.bytes.length - this.ps.bytesUsed));
		if (num2 === 0) {
			this.ps.isStreamEof = true;
			break __loop0__;
		}
		this.ps.bytesUsed += num2;
	}
	if (encoding === null) {
		encoding = this.DetectEncoding();
	}
	this.SetupEncoding(encoding);
	var preamble = this.ps.encoding.GetPreamble();
	var num3 = preamble.length;
__loop1__: 
	for (var num4 = 0; !((num4 >= num3) || 
			(num4 >= this.ps.bytesUsed) || (this.ps.bytes[num4] !== preamble[num4])); ++num4) {
	}
	if (num4 === num3) {
		this.ps.bytePos = num3;
	}
	this.documentStartBytePos = this.ps.bytePos;
	this.ps.eolNormalized = !this.normalize;
	this.ps.appendMode = true;
	this.ReadData();
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.InitTextReaderInput$0 = function (baseUriStr, input) {
	this.InitTextReaderInput$1(baseUriStr, null, input);
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.InitTextReaderInput$1 = function (baseUriStr, baseUri, input) {
	this.ps.textReader = input;
	this.ps.baseUriStr = baseUriStr;
	this.ps.baseUri = baseUri;
	if (this.ps.chars === null) {
		this.ps.chars = JSIL.Array.New(System.Char, 4097);
	}
	this.ps.encoding = System.Text.Encoding.Unicode;
	this.ps.eolNormalized = !this.normalize;
	this.ps.appendMode = true;
	this.ReadData();
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.InitStringInput = function (baseUriStr, originalEncoding, str) {
	this.ps.baseUriStr = baseUriStr;
	this.ps.baseUri = null;
	var length = str.length;
	this.ps.chars = JSIL.Array.New(System.Char, (length + 1));
	str.CopyTo(0, this.ps.chars, 0, str.length);
	this.ps.charsUsed = length;
	this.ps.chars[length] = "\0";
	this.ps.encoding = originalEncoding;
	this.ps.eolNormalized = !this.normalize;
	this.ps.isEof = true;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ProcessDtdFromParserContext = function (context) {
	switch (Number(this.dtdProcessing)) {
		case 0: 
			this.ThrowWithoutLineInfo$0("Xml_DtdIsProhibitedEx");
			return;
		case 1: 
			break;
		case 2: 
			this.ParseDtdFromParserContext();
			break;
		default: 
			return;
	}
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.DetectEncoding = function () {
	if (this.ps.bytesUsed < 2) {
		return null;
	}
	var num2 = (this.ps.bytesUsed >= 4) ? ((this.ps.bytes[2] << 8) | this.ps.bytes[3]) : 0;
	var num3 = ((this.ps.bytes[0] << 8) | this.ps.bytes[1]);
	if (num3 <= 19567) {
		if (num3 === 60) {
			return System.Text.Encoding.BigEndianUnicode;
		}
		if (num3 === 15360) {
			return System.Text.Encoding.Unicode;
		}
		if (num3 === 19567) {
			if (num2 === 42900) {
				this.Throw$5("Xml_UnknownEncoding", "ebcdic");
			}
		}
	} else if (num3 !== 61371) {
		if (num3 === 65279) {
			return System.Text.Encoding.BigEndianUnicode;
		}
		if (num3 === 65534) {
			return System.Text.Encoding.Unicode;
		}
	} else if ((num2 & 65280) === 48896) {
		return new System.Text.UTF8Encoding(true, true);
	}
	return null;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.SetupEncoding = function (encoding) {
	var webName = null;
	if (encoding === null) {
		this.ps.encoding = System.Text.Encoding.UTF8;
		this.ps.decoder = new $asm07.System.Xml.SafeAsciiDecoder();
		return;
	}
	this.ps.encoding = encoding;
	if ((webName = this.ps.encoding.WebName) !== null) {
		if (webName == "utf-16") {
			this.ps.decoder = new $asm07.System.Xml.UTF16Decoder(false);
			return;
		}
		if (webName == "utf-16BE") {
			this.ps.decoder = new $asm07.System.Xml.UTF16Decoder(true);
			return;
		}
	}
	this.ps.decoder = encoding.GetDecoder();
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.SwitchEncoding = function (newEncoding) {
	if (!(!(newEncoding.WebName != this.ps.encoding.WebName) && (JSIL.TryCast(this.ps.decoder, $asm07.System.Xml.SafeAsciiDecoder) === null))) {
		this.UnDecodeChars();
		this.ps.appendMode = false;
		this.SetupEncoding(newEncoding);
		this.ReadData();
	}
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.CheckEncoding = function (newEncodingName) {
	if (this.ps.stream === null) {
		return this.ps.encoding;
	}
	if (!((System.String.Compare$1(newEncodingName, "ucs-2", System.StringComparison.OrdinalIgnoreCase) !== 0) && 
			(System.String.Compare$1(newEncodingName, "utf-16", System.StringComparison.OrdinalIgnoreCase) !== 0) && 
			(System.String.Compare$1(newEncodingName, "iso-10646-ucs-2", System.StringComparison.OrdinalIgnoreCase) !== 0) && (System.String.Compare$1(newEncodingName, "ucs-4", System.StringComparison.OrdinalIgnoreCase) !== 0))) {
		if (!(!(this.ps.encoding.WebName != "utf-16BE") || 
				!(this.ps.encoding.WebName != "utf-16") || (System.String.Compare$1(newEncodingName, "ucs-4", System.StringComparison.OrdinalIgnoreCase) === 0))) {
			this.ThrowWithoutLineInfo$0("Xml_MissingByteOrderMark");
		}
		return this.ps.encoding;
	}
	var result = null;
	if (System.String.Compare$1(newEncodingName, "utf-8", System.StringComparison.OrdinalIgnoreCase) === 0) {
		result = new System.Text.UTF8Encoding(true, true);
	} else {
		try {
			result = System.Text.Encoding.GetEncoding$1(newEncodingName);
		} catch ($exception) {
			if (JSIL.CheckType($exception, System.NotSupportedException)) {
				var arg_D1_0 = $exception;
				this.Throw$8("Xml_UnknownEncoding", newEncodingName, arg_D1_0);
			} else if (JSIL.CheckType($exception, System.ArgumentException)) {
				var arg_E1_0 = $exception;
				this.Throw$8("Xml_UnknownEncoding", newEncodingName, arg_E1_0);
			} else {
				throw $exception;
			}
		}
	}
	return result;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.UnDecodeChars = function () {
	if (this.maxCharactersInDocument > 0) {
		this.charactersInDocument -= (this.ps.charsUsed - this.ps.charPos);
	}
	if (!((this.maxCharactersFromEntities <= 0) || !this.InEntity)) {
		this.charactersFromEntities -= (this.ps.charsUsed - this.ps.charPos);
	}
	this.ps.bytePos = this.documentStartBytePos;
	if (this.ps.charPos > 0) {
		this.ps.bytePos += this.ps.encoding.GetByteCount$2(this.ps.chars, 0, this.ps.charPos);
	}
	this.ps.charsUsed = this.ps.charPos;
	this.ps.isEof = false;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.SwitchEncodingToUTF8 = function () {
	this.SwitchEncoding(new System.Text.UTF8Encoding(true, true));
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ReadData = function () {
	if (this.ps.isEof) {
		return 0;
	}
	if (this.ps.appendMode) {
		if (this.ps.charsUsed === (this.ps.chars.length - 1)) {
		__loop1__: 
			for (var i = 0; i < this.attrCount; ++i) {
				(this.nodes[((this.index + i) + 1)]).OnBufferInvalidated();
			}
			var array = JSIL.Array.New(System.Char, (this.ps.chars.length * 2));
			$asm07.System.Xml.XmlTextReaderImpl.BlockCopyChars(
				this.ps.chars, 
				0, 
				array, 
				0, 
				this.ps.chars.length
			);
			this.ps.chars = array;
		}
		if (!((this.ps.stream === null) || 
				((this.ps.bytesUsed - this.ps.bytePos) >= 6) || ((this.ps.bytes.length - this.ps.bytesUsed) >= 6))) {
			var array2 = JSIL.Array.New(System.Byte, (this.ps.bytes.length * 2));
			$asm07.System.Xml.XmlTextReaderImpl.BlockCopy(
				this.ps.bytes, 
				0, 
				array2, 
				0, 
				this.ps.bytesUsed
			);
			this.ps.bytes = array2;
		}
		var num = ((this.ps.chars.length - this.ps.charsUsed) - 1);
		if (num > 80) {
			num = 80;
		}
	} else {
		var num2 = this.ps.chars.length;
		if ((num2 - this.ps.charsUsed) <= Math.floor(num2 / 2)) {
		__loop0__: 
			for (var j = 0; j < this.attrCount; ++j) {
				(this.nodes[((this.index + j) + 1)]).OnBufferInvalidated();
			}
			var num3 = (this.ps.charsUsed - this.ps.charPos);
			if (num3 < (num2 - 1)) {
				this.ps.lineStartPos -= this.ps.charPos;
				if (num3 > 0) {
					$asm07.System.Xml.XmlTextReaderImpl.BlockCopyChars(
						this.ps.chars, 
						this.ps.charPos, 
						this.ps.chars, 
						0, 
						num3
					);
				}
				this.ps.charPos = 0;
				this.ps.charsUsed = num3;
			} else {
				var array3 = JSIL.Array.New(System.Char, (this.ps.chars.length * 2));
				$asm07.System.Xml.XmlTextReaderImpl.BlockCopyChars(
					this.ps.chars, 
					0, 
					array3, 
					0, 
					this.ps.chars.length
				);
				this.ps.chars = array3;
			}
		}
		if (this.ps.stream !== null) {
			var num4 = (this.ps.bytesUsed - this.ps.bytePos);
			if (num4 <= 128) {
				if (num4 === 0) {
					this.ps.bytesUsed = 0;
				} else {
					$asm07.System.Xml.XmlTextReaderImpl.BlockCopy(
						this.ps.bytes, 
						this.ps.bytePos, 
						this.ps.bytes, 
						0, 
						num4
					);
					this.ps.bytesUsed = num4;
				}
				this.ps.bytePos = 0;
			}
		}
		num = ((this.ps.chars.length - this.ps.charsUsed) - 1);
	}
	if (this.ps.stream !== null) {
		if (!(this.ps.isStreamEof || 
				(this.ps.bytePos !== this.ps.bytesUsed) || ((this.ps.bytes.length - this.ps.bytesUsed) <= 0))) {
			var num5 = this.ps.stream.Read(this.ps.bytes, this.ps.bytesUsed, (this.ps.bytes.length - this.ps.bytesUsed));
			if (num5 === 0) {
				this.ps.isStreamEof = true;
			}
			this.ps.bytesUsed += num5;
		}
		var bytePos = this.ps.bytePos;
		num = this.GetChars(num);
		if (!((num !== 0) || (this.ps.bytePos === bytePos))) {
			return this.ReadData();
		}
	} else if (this.ps.textReader !== null) {
		num = this.ps.textReader.Read$1(this.ps.chars, this.ps.charsUsed, ((this.ps.chars.length - this.ps.charsUsed) - 1));
		this.ps.charsUsed += num;
	} else {
		num = 0;
	}
	this.RegisterConsumedCharacters(num, this.InEntity);
	if (num === 0) {
		this.ps.isEof = true;
	}
	this.ps.chars[this.ps.charsUsed] = "\0";
	return num;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.GetChars = function (maxCharsCount) {
	var num2 = new JSIL.Variable(0), flag = new JSIL.Variable(false);
	var num = new JSIL.Variable((this.ps.bytesUsed - this.ps.bytePos));
	if (num.value === 0) {
		return 0;
	}
	try {
		this.ps.decoder.Convert(
			this.ps.bytes, 
			this.ps.bytePos, 
			num.value, 
			this.ps.chars, 
			this.ps.charsUsed, 
			maxCharsCount, 
			false, 
			/* ref */ num, 
			/* ref */ num2, 
			/* ref */ flag
		);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.ArgumentException)) {
			this.InvalidCharRecovery(/* ref */ num, /* ref */ num2);
		} else {
			throw $exception;
		}
	}
	this.ps.bytePos += num.value;
	this.ps.charsUsed += num2.value;
	return num2.value;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.InvalidCharRecovery = function (/* ref */ bytesCount, /* ref */ charsCount) {
	var num2 = new JSIL.Variable(0), num3 = new JSIL.Variable(0), flag = new JSIL.Variable(false);
	var num = 0;
	var i = 0;
	try {
	__loop0__: 
		for (; i < bytesCount.value; i += num2.value) {
			this.ps.decoder.Convert(
				this.ps.bytes, 
				(this.ps.bytePos + i), 
				1, 
				this.ps.chars, 
				(this.ps.charsUsed + num), 
				1, 
				false, 
				/* ref */ num2, 
				/* ref */ num3, 
				/* ref */ flag
			);
			num += num3.value;
		}
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.ArgumentException)) {
		} else {
			throw $exception;
		}
	}
	if (num === 0) {
		this.Throw$2(this.ps.charsUsed, "Xml_InvalidCharInThisEncoding");
	}
	charsCount.value = num;
	bytesCount.value = i;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.Close$1 = function (closeInput) {
	if (this.parsingFunction === $asm07.System.Xml.XmlTextReaderImpl.ParsingFunction.ReaderClosed) {
		return;
	}
__loop0__: 
	while (this.InEntity) {
		this.PopParsingState();
	}
	this.ps.Close(closeInput);
	this.curNode = $asm07.System.Xml.XmlTextReaderImpl.NodeData.None;
	this.parsingFunction = $asm07.System.Xml.XmlTextReaderImpl.ParsingFunction.ReaderClosed;
	this.reportedEncoding = null;
	this.reportedBaseUri = System.String.Empty;
	this.readState = System.Xml.ReadState.Closed;
	this.fullAttrCleanup = false;
	this.ResetAttributes();
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ShiftBuffer = function (sourcePos, destPos, count) {
	$asm07.System.Xml.XmlTextReaderImpl.BlockCopyChars(
		this.ps.chars, 
		sourcePos, 
		this.ps.chars, 
		destPos, 
		count
	);
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ParseXmlDeclaration = function (isTextDecl) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
			__loop0__: 
				while ((this.ps.charsUsed - this.ps.charPos) < 6) {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								if (this.ReadData() === 0) {
									var __label2__ = "__entry2__";
								__step2__: 
									while (true) {
										switch (__label2__) {
											case "__entry2__":
												__label2__ = "IL_75B";
												continue __step2__;
												break;
											case "IL_75B":
												if (!isTextDecl) {
													this.parsingFunction = this.nextParsingFunction;
												}
												if (JSIL.TryCast(this.ps.decoder, $asm07.System.Xml.SafeAsciiDecoder) !== null) {
													this.SwitchEncodingToUTF8();
												}
												this.ps.appendMode = false;
												return false;
												break __step2__;
										}
									}
								}
								break __step1__;
						}
					}
				}
				if (!(!System.Xml.XmlConvert.StrEqual(this.ps.chars, this.ps.charPos, 5, "<?xml") || this.xmlCharType.IsNameSingleChar(this.ps.chars[(this.ps.charPos + 5)]))) {
					var __label3__ = "__entry3__";
				__step3__: 
					while (true) {
						switch (__label3__) {
							case "__entry3__":
								if (!isTextDecl) {
									this.curNode.SetLineInfo(this.ps.LineNo, (this.ps.LinePos + 2));
									this.curNode.SetNamedNode$0(System.Xml.XmlNodeType.XmlDeclaration, this.Xml);
								}
								this.ps.charPos += 5;
								var bufferBuilder = isTextDecl ? new $asm07.System.Xml.BufferBuilder() : this.stringBuilder;
								var num = 0;
								var encoding = null;
							__loop1__: 
								while (true) {
									var __label4__ = "__entry4__";
								__step4__: 
									while (true) {
										switch (__label4__) {
											case "__entry4__":
												var length = bufferBuilder.Length;
												var num2 = this.EatWhitespaces((num === 0) ? null : bufferBuilder);
												if (this.ps.chars[this.ps.charPos] === "?") {
													bufferBuilder.Length = length;
													if (this.ps.chars[(this.ps.charPos + 1)] === ">") {
														break __loop1__;
													}
													if ((this.ps.charPos + 1) === this.ps.charsUsed) {
														__label4__ = "IL_733";
														continue __step4__;
													}
													this.ThrowUnexpectedToken$1("'>'");
												}
												if (!((num2 !== 0) || (num === 0))) {
													this.ThrowUnexpectedToken$1("?>");
												}
												var num3 = this.ParseName();
												var nodeData = null;
												var c = this.ps.chars[this.ps.charPos];
												if (c !== "e") {
													if (c !== "s") {
														if ((c !== "v") || 
															!System.Xml.XmlConvert.StrEqual(this.ps.chars, this.ps.charPos, (num3 - this.ps.charPos), "version") || (num !== 0)) {
															__label4__ = "IL_332";
															continue __step4__;
														}
														if (!isTextDecl) {
															nodeData = this.AddAttributeNoChecks("version", 1);
														}
													} else {
														if (!System.Xml.XmlConvert.StrEqual(this.ps.chars, this.ps.charPos, (num3 - this.ps.charPos), "standalone") || 
															((num !== 1) && 
																(num !== 2)) || isTextDecl) {
															__label4__ = "IL_332";
															continue __step4__;
														}
														if (!isTextDecl) {
															nodeData = this.AddAttributeNoChecks("standalone", 1);
														}
														num = 2;
													}
												} else {
													if (!System.Xml.XmlConvert.StrEqual(this.ps.chars, this.ps.charPos, (num3 - this.ps.charPos), "encoding") || ((num !== 1) && 
															(!isTextDecl || 
																(num !== 0)))) {
														__label4__ = "IL_332";
														continue __step4__;
													}
													if (!isTextDecl) {
														nodeData = this.AddAttributeNoChecks("encoding", 1);
													}
													num = 1;
												}
												__label4__ = "IL_347";
												continue __step4__;
												break;
											case "IL_347":
												if (!isTextDecl) {
													nodeData.SetLineInfo(this.ps.LineNo, this.ps.LinePos);
												}
												bufferBuilder.Append$1(this.ps.chars, this.ps.charPos, (num3 - this.ps.charPos));
												this.ps.charPos = num3;
												if (this.ps.chars[this.ps.charPos] !== "=") {
													this.EatWhitespaces(bufferBuilder);
													if (this.ps.chars[this.ps.charPos] !== "=") {
														this.ThrowUnexpectedToken$1("=");
													}
												}
												bufferBuilder.Append$0("=");
												++this.ps.charPos;
												var c2 = this.ps.chars[this.ps.charPos];
												if (!((c2 === '"') || (c2 === "'"))) {
													this.EatWhitespaces(bufferBuilder);
													c2 = this.ps.chars[this.ps.charPos];
													if (!((c2 === '"') || (c2 === "'"))) {
														this.ThrowUnexpectedToken$3('"', "'");
													}
												}
												bufferBuilder.Append$0(c2);
												++this.ps.charPos;
												if (!isTextDecl) {
													nodeData.quoteChar = c2;
													nodeData.SetLineInfo2(this.ps.LineNo, this.ps.LinePos);
												}
												var num4 = this.ps.charPos;
											__loop2__: 
												while (true) {
													var chars = this.ps.chars;
												__loop3__: 
													while (this.xmlCharType.IsAttributeValueChar(chars[num4])) {
														++num4;
													}
													if (this.ps.chars[num4] === c2) {
														break __loop2__;
													}
													if (num4 !== this.ps.charsUsed) {
														__label4__ = "IL_71E";
														continue __step4__;
													}
													if (this.ReadData() === 0) {
														__label4__ = "Block_51";
														continue __step4__;
													}
												}
												switch (num) {
													case 0: 
														if (System.Xml.XmlConvert.StrEqual(this.ps.chars, this.ps.charPos, (num4 - this.ps.charPos), "1.0")) {
															if (!isTextDecl) {
																nodeData.SetValue$1(this.ps.chars, this.ps.charPos, (num4 - this.ps.charPos));
															}
															num = 1;
														} else {
															var arg = JSIL.New(System.String, "_ctor$0", [this.ps.chars, this.ps.charPos, (num4 - this.ps.charPos)]);
															this.Throw$5("Xml_InvalidVersionNumber", arg);
														}
														break;
													case 1: 
														var text = JSIL.New(System.String, "_ctor$0", [this.ps.chars, this.ps.charPos, (num4 - this.ps.charPos)]);
														encoding = this.CheckEncoding(text);
														if (!isTextDecl) {
															nodeData.SetValue$0(text);
														}
														num = 2;
														break;
													case 2: 
														if (System.Xml.XmlConvert.StrEqual(this.ps.chars, this.ps.charPos, (num4 - this.ps.charPos), "yes")) {
															this.standalone = true;
														} else if (System.Xml.XmlConvert.StrEqual(this.ps.chars, this.ps.charPos, (num4 - this.ps.charPos), "no")) {
															this.standalone = false;
														} else {
															this.Throw$4("Xml_InvalidXmlDecl", this.ps.LineNo, (this.ps.LinePos - 1));
														}
														if (!isTextDecl) {
															nodeData.SetValue$1(this.ps.chars, this.ps.charPos, (num4 - this.ps.charPos));
														}
														num = 3;
														break;
												}
												bufferBuilder.Append$1(chars, this.ps.charPos, (num4 - this.ps.charPos));
												bufferBuilder.Append$0(c2);
												this.ps.charPos = (num4 + 1);
												continue __loop1__;
												__label4__ = "IL_733";
												continue __step4__;
												break;
											case "IL_733":
												if (!(!this.ps.isEof && (this.ReadData() !== 0))) {
													this.Throw$3("Xml_UnexpectedEOF1");
													continue __loop1__;
												}
												continue __loop1__;
												__label4__ = "IL_332";
												continue __step4__;
												break;
											case "IL_332":
												this.Throw$3(isTextDecl ? "Xml_InvalidTextDecl" : "Xml_InvalidXmlDecl");
												__label4__ = "IL_347";
												continue __step4__;
												__label4__ = "Block_51";
												continue __step4__;
												break;
											case "Block_51":
												this.Throw$3("Xml_UnclosedQuote");
												__label4__ = "IL_733";
												continue __step4__;
												__label4__ = "IL_71E";
												continue __step4__;
												break;
											case "IL_71E":
												this.Throw$3(isTextDecl ? "Xml_InvalidTextDecl" : "Xml_InvalidXmlDecl");
												__label4__ = "IL_733";
												continue __step4__;
												break __step4__;
										}
									}
								}
								if (num === 0) {
									this.Throw$3(isTextDecl ? "Xml_InvalidTextDecl" : "Xml_InvalidXmlDecl");
								}
								this.ps.charPos += 2;
								if (!isTextDecl) {
									this.curNode.SetValue$0(bufferBuilder.toString());
									bufferBuilder.Length = 0;
									this.nextParsingFunction = this.parsingFunction;
									this.parsingFunction = $asm07.System.Xml.XmlTextReaderImpl.ParsingFunction.ResetAttributesRootLevel;
								}
								if (encoding === null) {
									if (isTextDecl) {
										this.Throw$3("Xml_InvalidTextDecl");
									}
									if (JSIL.TryCast(this.ps.decoder, $asm07.System.Xml.SafeAsciiDecoder) !== null) {
										this.SwitchEncodingToUTF8();
									}
								} else {
									this.SwitchEncoding(encoding);
								}
								this.ps.appendMode = false;
								return true;
								break __step3__;
						}
					}
				}
				JSIL.UntranslatableInstruction("goto", "IL_75B");
				break __step0__;
		}
	}
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ParseDocumentContent = function () {
	var __label0__ = null;
__step0__: 
	while (true) {
		switch (__label0__) {
			case null:
				var num2 = new JSIL.Variable(0);
				__label0__ = "__entry0__";
				continue __step0__;
				break;
			case "__entry0__":
			__loop0__: 
				while (true) {
					var flag = false;
					var num = this.ps.charPos;
					var chars = this.ps.chars;
					if (chars[num] === "<") {
						flag = true;
						if ((this.ps.charsUsed - num) >= 4) {
							++num;
							var c = chars[num];
							if (c !== "!") {
								if (c !== "/") {
									if (c !== "?") {
										__label0__ = "IL_1D1";
										continue __step0__;
									}
									this.ps.charPos = (num + 1);
									if (this.ParsePI$0()) {
										break __loop0__;
									}
									continue __loop0__;
								} else {
									this.Throw$2((num + 1), "Xml_UnexpectedEndTag");
								}
							} else {
								++num;
								if ((this.ps.charsUsed - num) >= 2) {
									if (chars[num] === "-") {
										if (chars[(num + 1)] === "-") {
											this.ps.charPos = (num + 2);
											if (this.ParseComment()) {
												return true;
											}
											continue __loop0__;
										} else {
											this.ThrowUnexpectedToken$0((num + 1), "-");
										}
									} else if (chars[num] === "[") {
										if (this.fragmentType !== System.Xml.XmlNodeType.Document) {
											++num;
											if ((this.ps.charsUsed - num) >= 6) {
												if (System.Xml.XmlConvert.StrEqual(chars, num, 6, "CDATA[")) {
													__label0__ = "Block_13";
													continue __step0__;
												}
												this.ThrowUnexpectedToken$0(num, "CDATA[");
											}
										} else {
											this.Throw$2(this.ps.charPos, "Xml_InvalidRootData");
										}
									} else if (!((this.fragmentType !== System.Xml.XmlNodeType.Document) && this.fragmentType)) {
										this.fragmentType = System.Xml.XmlNodeType.Document;
										this.ps.charPos = num;
										if (this.ParseDoctypeDecl()) {
											return true;
										}
										continue __loop0__;
									} else if (this.ParseUnexpectedToken$0(num) == "DOCTYPE") {
										this.Throw$3("Xml_BadDTDLocation");
									} else {
										this.ThrowUnexpectedToken$2(num, "<!--", "<[CDATA[");
									}
								}
							}
						}
					} else if (chars[num] === "&") {
						if (this.fragmentType === System.Xml.XmlNodeType.Document) {
							this.Throw$2(num, "Xml_InvalidRootData");
						} else {
							if (this.fragmentType === 0) {
								this.fragmentType = System.Xml.XmlNodeType.Element;
							}
							switch (Number(this.HandleEntityReference(false, $asm07.System.Xml.XmlTextReaderImpl.EntityExpandType.OnlyGeneral, /* ref */ num2))) {
								case 0: 
								case 1: 
								case 2: 
									if (this.ParseText$0()) {
										return true;
									}
									continue __step0__;
									;
								default: 
									chars = this.ps.chars;
									num = this.ps.charPos;
									continue __step0__;
									;
							}
						}
					} else if (!((num === this.ps.charsUsed) || (this.v1Compat && 
								!chars[num]))) {
						if (this.fragmentType === System.Xml.XmlNodeType.Document) {
							if (this.ParseRootLevelWhitespace()) {
								return true;
							}
							continue __loop0__;
						} else {
							if (this.ParseText$0()) {
								__label0__ = "Block_30";
								continue __step0__;
							}
							continue __loop0__;
						}
					}
					if (this.ReadData() !== 0) {
						num = this.ps.charPos;
						num = this.ps.charPos;
						chars = this.ps.chars;
					} else {
						if (flag) {
							this.Throw$3("Xml_InvalidRootData");
						}
						if (!this.InEntity) {
							__label0__ = "IL_329";
							continue __step0__;
						}
						this.HandleEntityEnd(true);
					}
				}
				return true;
				__label0__ = "Block_13";
				continue __step0__;
				break;
			case "Block_13":
				this.ps.charPos = (num + 6);
				this.ParseCData();
				if (this.fragmentType === 0) {
					this.fragmentType = System.Xml.XmlNodeType.Element;
				}
				return true;
				__label0__ = "IL_1D1";
				continue __step0__;
				break;
			case "IL_1D1":
				if (this.rootElementParsed) {
					if (this.fragmentType === System.Xml.XmlNodeType.Document) {
						this.Throw$2(num, "Xml_MultipleRoots");
					}
					if (this.fragmentType === 0) {
						this.fragmentType = System.Xml.XmlNodeType.Element;
					}
				}
				this.ps.charPos = num;
				this.rootElementParsed = true;
				this.ParseElement();
				return true;
				__label0__ = "Block_30";
				continue __step0__;
				break;
			case "Block_30":
				if (!(this.fragmentType || (this.curNode.type !== System.Xml.XmlNodeType.Text))) {
					this.fragmentType = System.Xml.XmlNodeType.Element;
				}
				return true;
				__label0__ = "IL_329";
				continue __step0__;
				break;
			case "IL_329":
				if (!(this.rootElementParsed || (this.fragmentType !== System.Xml.XmlNodeType.Document))) {
					this.ThrowWithoutLineInfo$0("Xml_MissingRoot");
				}
				if (this.fragmentType === 0) {
					this.fragmentType = this.rootElementParsed ? System.Xml.XmlNodeType.Document : System.Xml.XmlNodeType.Element;
				}
				this.OnEof();
				return false;
				break __step0__;
		}
	}
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ParseElementContent = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
			__loop0__: 
				while (true) {
					var num = this.ps.charPos;
					var chars = this.ps.chars;
					var c = chars[num];
					if (c !== "&") {
						if (c === "<") {
							var c2 = chars[(num + 1)];
							if (c2 !== "!") {
								if (c2 === "/") {
									__label0__ = "IL_13B";
									continue __step0__;
								}
								if (c2 === "?") {
									this.ps.charPos = (num + 2);
									if (this.ParsePI$0()) {
										break __loop0__;
									}
									continue __loop0__;
								} else if ((num + 1) !== this.ps.charsUsed) {
									__label0__ = "Block_14";
									continue __step0__;
								}
							} else {
								num += 2;
								if ((this.ps.charsUsed - num) >= 2) {
									if (chars[num] === "-") {
										if (chars[(num + 1)] === "-") {
											this.ps.charPos = (num + 2);
											if (this.ParseComment()) {
												return true;
											}
											continue __loop0__;
										} else {
											this.ThrowUnexpectedToken$0((num + 1), "-");
										}
									} else if (chars[num] === "[") {
										++num;
										if ((this.ps.charsUsed - num) >= 6) {
											if (System.Xml.XmlConvert.StrEqual(chars, num, 6, "CDATA[")) {
												__label0__ = "Block_12";
												continue __step0__;
											}
											this.ThrowUnexpectedToken$0(num, "CDATA[");
										}
									} else if (this.ParseUnexpectedToken$0(num) == "DOCTYPE") {
										this.Throw$3("Xml_BadDTDLocation");
									} else {
										this.ThrowUnexpectedToken$2(num, "<!--", "<[CDATA[");
									}
								}
							}
						} else if (num !== this.ps.charsUsed) {
							if (this.ParseText$0()) {
								return true;
							}
							continue __loop0__;
						}
						if (this.ReadData() === 0) {
							if (this.ps.charsUsed - this.ps.charPos) {
								this.ThrowUnclosedElements();
							}
							if (!this.InEntity) {
								if (!(this.index || (this.fragmentType === System.Xml.XmlNodeType.Document))) {
									__label0__ = "Block_22";
									continue __step0__;
								}
								this.ThrowUnclosedElements();
							}
							this.HandleEntityEnd(true);
						}
					} else if (this.ParseText$0()) {
						return true;
					}
				}
				return true;
				__label0__ = "Block_12";
				continue __step0__;
				break;
			case "Block_12":
				this.ps.charPos = (num + 6);
				this.ParseCData();
				return true;
				__label0__ = "IL_13B";
				continue __step0__;
				break;
			case "IL_13B":
				this.ps.charPos = (num + 2);
				this.ParseEndElement();
				return true;
				__label0__ = "Block_14";
				continue __step0__;
				break;
			case "Block_14":
				this.ps.charPos = (num + 1);
				this.ParseElement();
				return true;
				__label0__ = "Block_22";
				continue __step0__;
				break;
			case "Block_22":
				this.OnEof();
				return false;
				break __step0__;
		}
	}
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ThrowUnclosedElements = function () {
	if (!(this.index || (this.curNode.type === System.Xml.XmlNodeType.Element))) {
		this.Throw$2(this.ps.charsUsed, "Xml_UnexpectedEOF1");
		return;
	}
	var i = (this.parsingFunction === $asm07.System.Xml.XmlTextReaderImpl.ParsingFunction.InIncrementalRead) ? this.index : (this.index - 1);
	this.stringBuilder.Length = 0;
__loop0__: 
	for (; i >= 0; --i) {
		var nodeData = this.nodes[i];
		if (nodeData.type === System.Xml.XmlNodeType.Element) {
			this.stringBuilder.Append$2(nodeData.GetNameWPrefix(this.nameTable));
			if (i > 0) {
				this.stringBuilder.Append$2(", ");
			} else {
				this.stringBuilder.Append$2(".");
			}
		}
	}
	this.Throw$0(this.ps.charsUsed, "Xml_UnexpectedEOFInElementContent", this.stringBuilder.toString());
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ParseElement = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				var num = this.ps.charPos;
				var chars = this.ps.chars;
				var num2 = new JSIL.Variable(-1);
				this.curNode.SetLineInfo(this.ps.LineNo, this.ps.LinePos);
			__loop0__: 
				while (this.xmlCharType.IsStartNCNameSingleChar(chars[num])) {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								++num;
							__loop1__: 
								while (true) {
									if (this.xmlCharType.IsNCNameSingleChar(chars[num])) {
										++num;
									} else {
										if (chars[num] !== ":") {
											__label1__ = "IL_9C";
											continue __step1__;
										}
										if (num2.value === -1) {
											break __loop1__;
										}
										if (this.supportNamespaces) {
											__label1__ = "Block_5";
											continue __step1__;
										}
										++num;
									}
								}
								num2.value = num;
								++num;
								continue __loop0__;
								__label1__ = "Block_5";
								continue __step1__;
								break;
							case "Block_5":
								this.Throw$1(num, "Xml_BadNameChar", System.Xml.XmlException.BuildCharExceptionArgs$3(":", "\0"));
								break __loop0__;
								__label1__ = "IL_9C";
								continue __step1__;
								break;
							case "IL_9C":
								if ((num + 1) >= this.ps.charsUsed) {
									break __loop0__;
								}
								__label1__ = "IL_C1";
								continue __step1__;
								break;
							case "IL_C1":
								this.namespaceManager.PushScope();
								if (!((num2.value !== -1) && this.supportNamespaces)) {
									this.curNode.SetNamedNode$0(System.Xml.XmlNodeType.Element, this.nameTable.Add$0(chars, this.ps.charPos, (num - this.ps.charPos)));
								} else {
									var charPos = this.ps.charPos;
									var num3 = (num2.value - charPos);
									if (!((num3 !== this.lastPrefix.length) || !System.Xml.XmlConvert.StrEqual(chars, charPos, num3, this.lastPrefix))) {
										this.curNode.SetNamedNode$1(System.Xml.XmlNodeType.Element, this.nameTable.Add$0(chars, (num2.value + 1), ((num - num2.value) - 1)), this.lastPrefix, null);
									} else {
										this.curNode.SetNamedNode$1(System.Xml.XmlNodeType.Element, this.nameTable.Add$0(chars, (num2.value + 1), ((num - num2.value) - 1)), this.nameTable.Add$0(chars, this.ps.charPos, num3), null);
										this.lastPrefix = this.curNode.prefix;
									}
								}
								var c = chars[num];
								var flag = this.xmlCharType.IsWhiteSpace(c);
								if (flag) {
									this.ps.charPos = num;
									this.ParseAttributes();
									return;
								}
								if (c === ">") {
									this.ps.charPos = (num + 1);
									this.parsingFunction = $asm07.System.Xml.XmlTextReaderImpl.ParsingFunction.MoveToElementContent;
								} else if (c === "/") {
									if ((num + 1) === this.ps.charsUsed) {
										this.ps.charPos = num;
										if (this.ReadData() === 0) {
											this.Throw$0(num, "Xml_UnexpectedEOF", ">");
										}
										num = this.ps.charPos;
										chars = this.ps.chars;
									}
									if (chars[(num + 1)] === ">") {
										this.curNode.IsEmptyElement = true;
										this.nextParsingFunction = this.parsingFunction;
										this.parsingFunction = $asm07.System.Xml.XmlTextReaderImpl.ParsingFunction.PopEmptyElementContext;
										this.ps.charPos = (num + 2);
									} else {
										this.ThrowUnexpectedToken$0(num, ">");
									}
								} else {
									this.Throw$1(num, "Xml_BadNameChar", System.Xml.XmlException.BuildCharExceptionArgs$2(chars, this.ps.charsUsed, num));
								}
								if (this.addDefaultAttributesAndNormalize) {
									this.AddDefaultAttributesAndNormalize();
								}
								this.ElementNamespaceLookup();
								return;
								break __step1__;
						}
					}
				}
				num = this.ParseQName$0(/* ref */ num2);
				chars = this.ps.chars;
				JSIL.UntranslatableInstruction("goto", "IL_C1");
				break __step0__;
		}
	}
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.AddDefaultAttributesAndNormalize = function () {
	var dtdAttributeListInfo = this.dtdInfo.IDtdInfo_LookupAttributeList(this.curNode.localName, this.curNode.prefix);
	if (dtdAttributeListInfo === null) {
		return;
	}
	if (!(!this.normalize || !dtdAttributeListInfo.IDtdAttributeListInfo_HasNonCDataAttributes)) {
	__loop0__: 
		for (var i = (this.index + 1); i < ((this.index + 1) + this.attrCount); ++i) {
			var nodeData = this.nodes[i];
			var dtdAttributeInfo = dtdAttributeListInfo.IDtdAttributeListInfo_LookupAttribute(nodeData.prefix, nodeData.localName);
			if (!((dtdAttributeInfo === null) || !dtdAttributeInfo.IDtdAttributeInfo_IsNonCDataType)) {
				nodeData.TrimSpacesInValue();
			}
		}
	}
	var enumerable = dtdAttributeListInfo.IDtdAttributeListInfo_LookupDefaultAttributes();
	if (enumerable !== null) {
		var num = this.attrCount;
		var array = null;
		if (this.attrCount >= 250) {
			array = JSIL.Array.New($asm07.System.Xml.XmlTextReaderImpl.NodeData, this.attrCount);
			System.Array.Copy$1(
				this.nodes, 
				(this.index + 1), 
				array, 
				0, 
				this.attrCount
			);
			System.Array.Sort$b1$2(System.Object)(array, $asm07.System.Xml.XmlTextReaderImpl.DtdDefaultAttributeInfoToNodeDataComparer.Instance);
		}
		var enumerator = enumerable.IEnumerable$b1_GetEnumerator();
		try {
		__loop1__: 
			while (enumerator.IEnumerator_MoveNext()) {
				var current = enumerator.IEnumerator$b1_Current;
				this.AddDefaultAttributeDtd(current, true, array);
			}
		} finally {
			if (enumerator !== null) {
				enumerator.IDisposable_Dispose();
			}
		}
		if (!((num !== 0) || !this.attrNeedNamespaceLookup)) {
			this.AttributeNamespaceLookup();
			this.attrNeedNamespaceLookup = false;
		}
	}
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ParseEndElement = function () {
	var lineInfo = new $asm07.System.Xml.LineInfo(), c = 0;
	var nodeData = this.nodes[(this.index - 1)];
	var length = nodeData.prefix.length;
__loop0__: 
	for (var length2 = nodeData.localName.length; !(((this.ps.charsUsed - this.ps.charPos) >= ((length + length2) + 1)) || (this.ReadData() === 0)); ) {
	}
	var chars = this.ps.chars;
	if (nodeData.prefix.length === 0) {
		if (!System.Xml.XmlConvert.StrEqual(chars, this.ps.charPos, length2, nodeData.localName)) {
			this.ThrowTagMismatch(nodeData);
		}
		var num = length2;
	} else {
		var num2 = (this.ps.charPos + length);
		if (!(System.Xml.XmlConvert.StrEqual(chars, this.ps.charPos, length, nodeData.prefix) && 
				(chars[num2] === ":") && System.Xml.XmlConvert.StrEqual(chars, (num2 + 1), length2, nodeData.localName))) {
			this.ThrowTagMismatch(nodeData);
		}
		num = ((length2 + length) + 1);
	}
	lineInfo._ctor(this.ps.lineNo, this.ps.LinePos);
__loop1__: 
	while (true) {
		var num3 = (this.ps.charPos + num);
		chars = this.ps.chars;
		if (num3 !== this.ps.charsUsed) {
			if (!(!this.xmlCharType.IsNCNameSingleChar(chars[num3]) && (chars[num3] !== ":"))) {
				this.ThrowTagMismatch(nodeData);
			}
			if (chars[num3] !== ">") {
			__loop2__: 
				while (this.xmlCharType.IsWhiteSpace((c = chars[num3]))) {
					++num3;
					var c2 = c;
					if (c2 !== "\n") {
						if (c2 === "\r") {
							if (chars[num3] === "\n") {
								++num3;
							} else if ((num3 === this.ps.charsUsed) && !this.ps.isEof) {
								continue __loop2__;
							}
							this.OnNewLine(num3);
						}
					} else {
						this.OnNewLine(num3);
					}
				}
			}
			if (chars[num3] === ">") {
				break __loop1__;
			}
			if (num3 !== this.ps.charsUsed) {
				this.ThrowUnexpectedToken$0(num3, ">");
			}
		}
		if (this.ReadData() === 0) {
			this.ThrowUnclosedElements();
		}
	}
	--this.index;
	this.curNode = this.nodes[this.index];
	nodeData.lineInfo = lineInfo.MemberwiseClone();
	nodeData.type = System.Xml.XmlNodeType.EndElement;
	this.ps.charPos = (num3 + 1);
	this.nextParsingFunction = (this.index > 0) ? this.parsingFunction : $asm07.System.Xml.XmlTextReaderImpl.ParsingFunction.DocumentContent;
	this.parsingFunction = $asm07.System.Xml.XmlTextReaderImpl.ParsingFunction.PopElementContext;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ThrowTagMismatch = function (startTag) {
	var num2 = new JSIL.Variable(0);
	if (startTag.type === System.Xml.XmlNodeType.Element) {
		var num = this.ParseQName$0(/* ref */ num2);
		var args = JSIL.Array.New(System.String, [startTag.GetNameWPrefix(this.nameTable), (startTag.lineInfo.lineNo).toString(), (startTag.lineInfo.linePos).toString(), JSIL.New(System.String, "_ctor$0", [this.ps.chars, this.ps.charPos, (num - this.ps.charPos)])]);
		this.Throw$7("Xml_TagMismatchEx", args);
		return;
	}
	this.Throw$3("Xml_UnexpectedEndTag");
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ParseAttributes = function () {
	var __label0__ = null;
__step0__: 
	while (true) {
		switch (__label0__) {
			case null:
				var c = 0, c2 = 0, c3 = 0, c5 = 0;
				__label0__ = "__entry0__";
				continue __step0__;
				break;
			case "__entry0__":
				var num = this.ps.charPos;
				var chars = this.ps.chars;
			__loop0__: 
				while (true) {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								__label1__ = "IL_1A";
								continue __step1__;
								break;
							case "IL_1A":
								var num2 = 0;
							__loop1__: 
								while (this.xmlCharType.IsWhiteSpace((c = chars[num]))) {
									var __label2__ = "__entry2__";
								__step2__: 
									while (true) {
										switch (__label2__) {
											case "__entry2__":
												if (c === "\n") {
													this.OnNewLine((num + 1));
													++num2;
												} else {
													var __label3__ = "__entry3__";
												__step3__: 
													while (true) {
														switch (__label3__) {
															case "__entry3__":
																if (c === "\r") {
																	var __label4__ = "__entry4__";
																__step4__: 
																	while (true) {
																		switch (__label4__) {
																			case "__entry4__":
																				if (chars[(num + 1)] === "\n") {
																					this.OnNewLine((num + 2));
																					++num2;
																					++num;
																				} else {
																					var __label5__ = "__entry5__";
																				__step5__: 
																					while (true) {
																						switch (__label5__) {
																							case "__entry5__":
																								if ((num + 1) !== this.ps.charsUsed) {
																									this.OnNewLine((num + 1));
																									++num2;
																								} else {
																									var __label6__ = "__entry6__";
																								__step6__: 
																									while (true) {
																										switch (__label6__) {
																											case "__entry6__":
																												this.ps.charPos = num;
																												__label6__ = "IL_416";
																												continue __step6__;
																												break;
																											case "IL_416":
																												this.ps.lineNo -= num2;
																												if (this.ReadData() !== 0) {
																													num = this.ps.charPos;
																													chars = this.ps.chars;
																													__label1__ = "IL_1A";
																													continue __step1__;
																												}
																												this.ThrowUnclosedElements();
																												__label1__ = "IL_1A";
																												continue __step1__;
																												break __step6__;
																										}
																									}
																								}
																								break __step5__;
																						}
																					}
																				}
																				break __step4__;
																		}
																	}
																}
																break __step3__;
														}
													}
												}
												++num;
												break __step2__;
										}
									}
								}
								var num3 = 0;
								if (this.xmlCharType.IsStartNCNameSingleChar((c2 = chars[num]))) {
									num3 = 1;
								}
								if (num3 === 0) {
									if (c2 === ">") {
										break __loop0__;
									}
									if (c2 === "/") {
										if ((num + 1) === this.ps.charsUsed) {
											JSIL.UntranslatableInstruction("goto", "IL_416");
										}
										if (chars[(num + 1)] === ">") {
											__label0__ = "Block_11";
											continue __step0__;
										}
										this.ThrowUnexpectedToken$0((num + 1), ">");
									} else {
										if (num === this.ps.charsUsed) {
											JSIL.UntranslatableInstruction("goto", "IL_416");
										}
										if (!((c2 === ":") && !this.supportNamespaces)) {
											this.Throw$1(num, "Xml_BadStartNameChar", System.Xml.XmlException.BuildCharExceptionArgs$2(chars, this.ps.charsUsed, num));
										}
									}
								}
								if (num === this.ps.charPos) {
									this.ThrowExpectingWhitespace(num);
								}
								this.ps.charPos = num;
								var linePos = this.ps.LinePos;
								var num4 = new JSIL.Variable(-1);
								num += num3;
							__loop2__: 
								while (true) {
									if (this.xmlCharType.IsNCNameSingleChar((c3 = chars[num]))) {
										++num;
									} else {
										if (c3 !== ":") {
											__label1__ = "IL_22F";
											continue __step1__;
										}
										if (num4.value !== -1) {
											if (this.supportNamespaces) {
												__label1__ = "Block_18";
												continue __step1__;
											}
											++num;
										} else {
											num4.value = num;
											++num;
											if (!this.xmlCharType.IsStartNCNameSingleChar(chars[num])) {
												__label1__ = "IL_218";
												continue __step1__;
											}
											++num;
										}
									}
								}
								__label1__ = "IL_254";
								continue __step1__;
								break;
							case "IL_254":
								var nodeData = this.AddAttribute$0(num, num4.value);
								nodeData.SetLineInfo(this.ps.LineNo, linePos);
								if (chars[num] !== "=") {
									this.ps.charPos = num;
									this.EatWhitespaces(null);
									num = this.ps.charPos;
									if (chars[num] !== "=") {
										this.ThrowUnexpectedToken$1("=");
									}
								}
								++num;
								var c4 = chars[num];
								if (!((c4 === '"') || (c4 === "'"))) {
									this.ps.charPos = num;
									this.EatWhitespaces(null);
									num = this.ps.charPos;
									c4 = chars[num];
									if (!((c4 === '"') || (c4 === "'"))) {
										this.ThrowUnexpectedToken$3('"', "'");
									}
								}
								++num;
								this.ps.charPos = num;
								nodeData.quoteChar = c4;
								nodeData.SetLineInfo2(this.ps.LineNo, this.ps.LinePos);
							__loop3__: 
								for (; this.xmlCharType.IsAttributeValueChar((c5 = chars[num])); ++num) {
								}
								if (c5 === c4) {
									nodeData.SetValue$1(chars, this.ps.charPos, (num - this.ps.charPos));
									++num;
									this.ps.charPos = num;
								} else {
									this.ParseAttributeValueSlow(num, c4, nodeData);
									num = this.ps.charPos;
									chars = this.ps.chars;
								}
								if (nodeData.prefix.length === 0) {
									if ($asm07.System.Xml.Ref.Equal(nodeData.localName, this.XmlNs)) {
										this.OnDefaultNamespaceDecl(nodeData);
										continue __loop0__;
									}
									continue __loop0__;
								} else {
									if ($asm07.System.Xml.Ref.Equal(nodeData.prefix, this.XmlNs)) {
										this.OnNamespaceDecl(nodeData);
										continue __loop0__;
									}
									if ($asm07.System.Xml.Ref.Equal(nodeData.prefix, this.Xml)) {
										this.OnXmlReservedAttribute(nodeData);
										continue __loop0__;
									}
									continue __loop0__;
								}
								__label1__ = "Block_18";
								continue __step1__;
								break;
							case "Block_18":
								this.Throw$1(num, "Xml_BadNameChar", System.Xml.XmlException.BuildCharExceptionArgs$3(":", "\0"));
								__label1__ = "IL_254";
								continue __step1__;
								__label1__ = "IL_218";
								continue __step1__;
								break;
							case "IL_218":
								num = this.ParseQName$0(/* ref */ num4);
								chars = this.ps.chars;
								__label1__ = "IL_254";
								continue __step1__;
								__label1__ = "IL_22F";
								continue __step1__;
								break;
							case "IL_22F":
								if ((num + 1) >= this.ps.charsUsed) {
									num = this.ParseQName$0(/* ref */ num4);
									chars = this.ps.chars;
									__label1__ = "IL_254";
									continue __step1__;
								}
								__label1__ = "IL_254";
								continue __step1__;
								break __step1__;
						}
					}
				}
				this.ps.charPos = (num + 1);
				this.parsingFunction = $asm07.System.Xml.XmlTextReaderImpl.ParsingFunction.MoveToElementContent;
				__label0__ = "IL_459";
				continue __step0__;
				__label0__ = "Block_11";
				continue __step0__;
				break;
			case "Block_11":
				this.ps.charPos = (num + 2);
				this.curNode.IsEmptyElement = true;
				this.nextParsingFunction = this.parsingFunction;
				this.parsingFunction = $asm07.System.Xml.XmlTextReaderImpl.ParsingFunction.PopEmptyElementContext;
				__label0__ = "IL_459";
				continue __step0__;
				break;
			case "IL_459":
				if (this.addDefaultAttributesAndNormalize) {
					this.AddDefaultAttributesAndNormalize();
				}
				this.ElementNamespaceLookup();
				if (this.attrNeedNamespaceLookup) {
					this.AttributeNamespaceLookup();
					this.attrNeedNamespaceLookup = false;
				}
				if (this.attrDuplWalkCount >= 250) {
					this.AttributeDuplCheck();
				}
				break __step0__;
		}
	}
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ElementNamespaceLookup = function () {
	if (this.curNode.prefix.length === 0) {
		this.curNode.ns = this.xmlContext.defaultNamespace;
		return;
	}
	this.curNode.ns = this.LookupNamespace$1(this.curNode);
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.AttributeNamespaceLookup = function () {
__loop0__: 
	for (var i = (this.index + 1); i < ((this.index + this.attrCount) + 1); ++i) {
		var nodeData = this.nodes[i];
		if (!((nodeData.type !== System.Xml.XmlNodeType.Attribute) || (nodeData.prefix.length <= 0))) {
			nodeData.ns = this.LookupNamespace$1(nodeData);
		}
	}
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.AttributeDuplCheck = function () {
	if (this.attrCount < 250) {
	__loop0__: 
		for (var i = (this.index + 1); i < ((this.index + 1) + this.attrCount); ++i) {
			var nodeData = this.nodes[i];
		__loop1__: 
			for (var j = (i + 1); j < ((this.index + 1) + this.attrCount); ++j) {
				if (!(!$asm07.System.Xml.Ref.Equal(nodeData.localName, this.nodes[j].localName) || !$asm07.System.Xml.Ref.Equal(nodeData.ns, this.nodes[j].ns))) {
					this.Throw$6("Xml_DupAttributeName", this.nodes[j].GetNameWPrefix(this.nameTable), this.nodes[j].LineNo, this.nodes[j].LinePos);
				}
			}
		}
		return;
	}
	if (!((this.attrDuplSortingArray !== null) && (this.attrDuplSortingArray.length >= this.attrCount))) {
		this.attrDuplSortingArray = JSIL.Array.New($asm07.System.Xml.XmlTextReaderImpl.NodeData, this.attrCount);
	}
	System.Array.Copy$1(
		this.nodes, 
		(this.index + 1), 
		this.attrDuplSortingArray, 
		0, 
		this.attrCount
	);
	System.Array.Sort$b1$1($asm07.System.Xml.XmlTextReaderImpl.NodeData)(this.attrDuplSortingArray, 0, this.attrCount);
	var nodeData2 = this.attrDuplSortingArray[0];
__loop2__: 
	for (var k = 1; k < this.attrCount; ++k) {
		var nodeData3 = this.attrDuplSortingArray[k];
		if (!(!$asm07.System.Xml.Ref.Equal(nodeData2.localName, nodeData3.localName) || !$asm07.System.Xml.Ref.Equal(nodeData2.ns, nodeData3.ns))) {
			this.Throw$6("Xml_DupAttributeName", nodeData3.GetNameWPrefix(this.nameTable), nodeData3.LineNo, nodeData3.LinePos);
		}
		nodeData2 = nodeData3;
	}
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.OnDefaultNamespaceDecl = function (attr) {
	if (!this.supportNamespaces) {
		return;
	}
	var text = this.nameTable.Add$1(attr.StringValue);
	attr.ns = this.nameTable.Add$1("http://www.w3.org/2000/xmlns/");
	if (!this.curNode.xmlContextPushed) {
		this.PushXmlContext();
	}
	this.xmlContext.defaultNamespace = text;
	this.AddNamespace(System.String.Empty, text, attr);
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.OnNamespaceDecl = function (attr) {
	if (!this.supportNamespaces) {
		return;
	}
	var text = this.nameTable.Add$1(attr.StringValue);
	if (text.length === 0) {
		this.Throw$4("Xml_BadNamespaceDecl", attr.lineInfo2.lineNo, (attr.lineInfo2.linePos - 1));
	}
	this.AddNamespace(attr.localName, text, attr);
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.OnXmlReservedAttribute = function (attr) {
	var localName = null, a = null;
	if ((localName = attr.localName) !== null) {
		if (localName == "space") {
			if (!this.curNode.xmlContextPushed) {
				this.PushXmlContext();
			}
			if ((a = System.Xml.XmlConvert.TrimString(attr.StringValue)) !== null) {
				if (a == "preserve") {
					this.xmlContext.xmlSpace = System.Xml.XmlSpace.Preserve;
					return;
				}
				if (a == "default") {
					this.xmlContext.xmlSpace = System.Xml.XmlSpace.Default;
					return;
				}
			}
			this.Throw$6("Xml_InvalidXmlSpace", attr.StringValue, attr.lineInfo.lineNo, attr.lineInfo.linePos);
			return;
		}
		if (!(localName == "lang")) {
			return;
		}
		if (!this.curNode.xmlContextPushed) {
			this.PushXmlContext();
		}
		this.xmlContext.xmlLang = attr.StringValue;
	}
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ParseAttributeValueSlow = function (curPos, quoteChar, attr) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				var num = new JSIL.Variable(curPos);
				var chars = this.ps.chars;
				var entityId = this.ps.entityId;
			__loop0__: 
				while (true) {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								if (!this.xmlCharType.IsAttributeValueChar(chars[num.value])) {
									var __label2__ = "__entry2__";
								__step2__: 
									while (true) {
										switch (__label2__) {
											case "__entry2__":
												if ((num.value - this.ps.charPos) > 0) {
													this.stringBuilder.Append$1(chars, this.ps.charPos, (num.value - this.ps.charPos));
													this.ps.charPos = num.value;
												}
												if ((chars[num.value] === quoteChar) && (entityId === this.ps.entityId)) {
													__label0__ = "IL_38C";
													continue __step0__;
												}
												var c = chars[num.value];
												if (c <= '"') {
													switch (c) {
														case "\t": 
															++num.value;
															if (this.normalize) {
																this.stringBuilder.Append$0(" ");
																++this.ps.charPos;
																continue __step2__;
																;
															}
															continue __step2__;
															;
														case "\n": 
															++num.value;
															this.OnNewLine(num.value);
															if (this.normalize) {
																this.stringBuilder.Append$0(" ");
																++this.ps.charPos;
																continue __step2__;
																;
															}
															continue __step2__;
															;
														case "\x0b": 
														case "\x0c": 
															__label2__ = "IL_290";
															continue __step2__;
														case "\r": 
															if (chars[(num.value + 1)] === "\n") {
																num.value += 2;
																if (this.normalize) {
																	this.stringBuilder.Append$2(this.ps.eolNormalized ? "  " : " ");
																	this.ps.charPos = num.value;
																}
															} else {
																if (((num.value + 1) >= this.ps.charsUsed) && !this.ps.isEof) {
																	__label2__ = "IL_2E4";
																	continue __step2__;
																}
																++num.value;
																if (this.normalize) {
																	this.stringBuilder.Append$0(" ");
																	this.ps.charPos = num.value;
																}
															}
															this.OnNewLine(num.value);
															continue __step2__;
															;
														default: 
															if (c !== '"') {
																__label2__ = "IL_290";
																continue __step2__;
															}
															break;
													}
												} else {
													switch (c) {
														case "&": 
															if ((num.value - this.ps.charPos) > 0) {
																this.stringBuilder.Append$1(chars, this.ps.charPos, (num.value - this.ps.charPos));
															}
															this.ps.charPos = num.value;
															switch (Number(this.HandleEntityReference(true, $asm07.System.Xml.XmlTextReaderImpl.EntityExpandType.All, /* ref */ num))) {
																case 0: 
																case 1: 
																case 2: 
																	break;
																default: 
																	num.value = this.ps.charPos;
																	break;
															}
															chars = this.ps.chars;
															continue __step2__;
															;
														case "'": 
															break;
														default: 
															switch (c) {
																case "<": 
																	this.Throw$1(num.value, "Xml_BadAttributeChar", System.Xml.XmlException.BuildCharExceptionArgs$3("<", "\0"));
																	__label2__ = "IL_2E4";
																	continue __step2__;
																case "=": 
																	__label2__ = "IL_290";
																	continue __step2__;
																case ">": 
																	break;
																default: 
																	__label2__ = "IL_290";
																	continue __step2__;
															}
															break;
													}
												}
												++num.value;
												continue __loop0__;
												__label2__ = "IL_290";
												continue __step2__;
												break;
											case "IL_290":
												if (num.value !== this.ps.charsUsed) {
													var ch = chars[num.value];
													if ($asm07.System.Xml.XmlCharType.IsHighSurrogate(ch.charCodeAt(0))) {
														if ((num.value + 1) === this.ps.charsUsed) {
															__label2__ = "IL_2E4";
															continue __step2__;
														}
														++num.value;
														if ($asm07.System.Xml.XmlCharType.IsLowSurrogate(chars[num.value])) {
															++num.value;
															continue __loop0__;
														}
													}
													this.ThrowInvalidChar(chars, this.ps.charsUsed, num.value);
												}
												__label2__ = "IL_2E4";
												continue __step2__;
												break;
											case "IL_2E4":
												if (this.ReadData() === 0) {
													if ((this.ps.charsUsed - this.ps.charPos) > 0) {
														if (this.ps.chars[this.ps.charPos] !== "\r") {
															this.Throw$3("Xml_UnexpectedEOF1");
														}
													} else {
														if (!this.InEntity) {
															if (this.fragmentType === System.Xml.XmlNodeType.Attribute) {
																break __loop0__;
															}
															this.Throw$3("Xml_UnclosedQuote");
														}
														this.HandleEntityEnd(true);
													}
												}
												num.value = this.ps.charPos;
												chars = this.ps.chars;
												break __step2__;
										}
									}
								} else {
									++num.value;
								}
								break __step1__;
						}
					}
				}
				if (entityId !== this.ps.entityId) {
					this.Throw$3("Xml_EntityRefNesting");
				}
				__label0__ = "IL_38C";
				continue __step0__;
				break;
			case "IL_38C":
				this.ps.charPos = (num.value + 1);
				attr.SetValue$0(this.stringBuilder.toString());
				this.stringBuilder.Length = 0;
				break __step0__;
		}
	}
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ParseText$0 = function () {
	var num2 = new JSIL.Variable(0), num3 = new JSIL.Variable(0);
	var num = new JSIL.Variable(0);
	if (this.parsingMode !== 0) {
	__loop3__: 
		while (!this.ParseText$1(/* ref */ num2, /* ref */ num3, /* ref */ num)) {
		}
	} else {
		this.curNode.SetLineInfo(this.ps.LineNo, this.ps.LinePos);
		if (this.ParseText$1(/* ref */ num2, /* ref */ num3, /* ref */ num)) {
			if (num3.value - num2.value) {
				var textNodeType = this.GetTextNodeType(num.value);
				if (JSIL.Cast(textNodeType, System.Boolean)) {
					this.curNode.SetValueNode$1(textNodeType, this.ps.chars, num2.value, (num3.value - num2.value));
					return true;
				}
			}
		} else if (this.v1Compat) {
		__loop2__: 
			do {
				if ((num3.value - num2.value) > 0) {
					this.stringBuilder.Append$1(this.ps.chars, num2.value, (num3.value - num2.value));
				}
			} while (!this.ParseText$1(/* ref */ num2, /* ref */ num3, /* ref */ num));
			if ((num3.value - num2.value) > 0) {
				this.stringBuilder.Append$1(this.ps.chars, num2.value, (num3.value - num2.value));
			}
			var textNodeType2 = this.GetTextNodeType(num.value);
			if (JSIL.Cast(textNodeType2, System.Boolean)) {
				this.curNode.SetValueNode$0(textNodeType2, this.stringBuilder.toString());
				this.stringBuilder.Length = 0;
				return true;
			}
			this.stringBuilder.Length = 0;
		} else {
			if (num.value > 32) {
				this.curNode.SetValueNode$1(System.Xml.XmlNodeType.Text, this.ps.chars, num2.value, (num3.value - num2.value));
				this.nextParsingFunction = this.parsingFunction;
				this.parsingFunction = $asm07.System.Xml.XmlTextReaderImpl.ParsingFunction.PartialTextValue;
				return true;
			}
			if ((num3.value - num2.value) > 0) {
				this.stringBuilder.Append$1(this.ps.chars, num2.value, (num3.value - num2.value));
			}
		__loop0__: 
			do {
				var flag = this.ParseText$1(/* ref */ num2, /* ref */ num3, /* ref */ num);
				if ((num3.value - num2.value) > 0) {
					this.stringBuilder.Append$1(this.ps.chars, num2.value, (num3.value - num2.value));
				}
			} while (!flag && 
				(num.value <= 32) && (this.stringBuilder.Length < 4096));
			var xmlNodeType = (this.stringBuilder.Length < 4096) ? this.GetTextNodeType(num.value) : System.Xml.XmlNodeType.Text;
			if (JSIL.Cast(xmlNodeType, System.Boolean)) {
				this.curNode.SetValueNode$0(xmlNodeType, this.stringBuilder.toString());
				this.stringBuilder.Length = 0;
				if (!flag) {
					this.nextParsingFunction = this.parsingFunction;
					this.parsingFunction = $asm07.System.Xml.XmlTextReaderImpl.ParsingFunction.PartialTextValue;
				}
				return true;
			}
			this.stringBuilder.Length = 0;
			if (!flag) {
			__loop1__: 
				while (!this.ParseText$1(/* ref */ num2, /* ref */ num3, /* ref */ num)) {
				}
			}
		}
	}
	return false;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ParseText$1 = function (/* ref */ startPos, /* ref */ endPos, /* ref */ outOrChars) {
	var __label0__ = null;
__step0__: 
	while (true) {
		switch (__label0__) {
			case null:
				var c = 0, num5 = 0, num6 = new JSIL.Variable(0), entityType = new JSIL.Variable(0);
				__label0__ = "__entry0__";
				continue __step0__;
				break;
			case "__entry0__":
				var chars = this.ps.chars;
				var num = new JSIL.Variable(this.ps.charPos);
				var num2 = 0;
				var num3 = -1;
				var num4 = outOrChars.value;
			__loop0__: 
				while (true) {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								if (!this.xmlCharType.IsTextChar((c = chars[num.value]))) {
									var __label2__ = "__entry2__";
								__step2__: 
									while (true) {
										switch (__label2__) {
											case "__entry2__":
												var c2 = c;
												if (c2 <= "&") {
													var __label3__ = "__entry3__";
												__step3__: 
													while (true) {
														switch (__label3__) {
															case "__entry3__":
																switch (c2) {
																	case "\t": 
																		++num.value;
																		continue __step3__;
																		;
																	case "\n": 
																		++num.value;
																		this.OnNewLine(num.value);
																		continue __step3__;
																		;
																	case "\x0b": 
																	case "\x0c": 
																		break;
																	case "\r": 
																		if (chars[(num.value + 1)] === "\n") {
																			if (!(this.ps.eolNormalized || this.parsingMode)) {
																				if ((num.value - this.ps.charPos) > 0) {
																					if (num2 === 0) {
																						num2 = 1;
																						num3 = num.value;
																					} else {
																						this.ShiftBuffer((num3 + num2), num3, ((num.value - num3) - num2));
																						num3 = (num.value - num2);
																						++num2;
																					}
																				} else {
																					++this.ps.charPos;
																				}
																			}
																			num.value += 2;
																		} else {
																			if (((num.value + 1) >= this.ps.charsUsed) && !this.ps.isEof) {
																				__label2__ = "IL_340";
																				continue __step2__;
																			}
																			if (!this.ps.eolNormalized) {
																				chars[num.value] = "\n";
																			}
																			++num.value;
																		}
																		this.OnNewLine(num.value);
																		continue __step3__;
																		;
																	default: 
																		var __label4__ = "__entry4__";
																	__step4__: 
																		while (true) {
																			switch (__label4__) {
																				case "__entry4__":
																					if (c2 === "&") {
																						var __label5__ = "__entry5__";
																					__step5__: 
																						while (true) {
																							switch (__label5__) {
																								case "__entry5__":
																									if ((num5 = this.ParseCharRefInline(num.value, /* ref */ num6, /* ref */ entityType)) > 0) {
																										if (num2 > 0) {
																											this.ShiftBuffer((num3 + num2), num3, ((num.value - num3) - num2));
																										}
																										num3 = (num.value - num2);
																										num2 += ((num5 - num.value) - num6.value);
																										num.value = num5;
																										if (!(this.xmlCharType.IsWhiteSpace(chars[(num5 - num6.value)]) && (!this.v1Compat || 
																													JSIL.Cast(entityType.value, System.Boolean)))) {
																											num4 = (num4 | 255);
																											continue __step5__;
																											;
																										}
																										continue __step5__;
																										;
																									} else {
																										var __label6__ = "__entry6__";
																									__step6__: 
																										while (true) {
																											switch (__label6__) {
																												case "__entry6__":
																													if (num.value > this.ps.charPos) {
																														__label0__ = "IL_3EE";
																														continue __step0__;
																													}
																													switch (Number(this.HandleEntityReference(false, $asm07.System.Xml.XmlTextReaderImpl.EntityExpandType.All, /* ref */ num))) {
																														case 0: 
																															if (!this.v1Compat) {
																																__label6__ = "IL_1FB";
																																continue __step6__;
																															}
																															num4 = (num4 | 255);
																															break;
																														case 1: 
																														case 2: 
																															__label6__ = "IL_1FB";
																															continue __step6__;
																														default: 
																															num.value = this.ps.charPos;
																															break;
																													}
																													__label6__ = "IL_22F";
																													continue __step6__;
																													break;
																												case "IL_22F":
																													chars = this.ps.chars;
																													continue __step6__;
																													;
																													__label6__ = "IL_1FB";
																													continue __step6__;
																													break;
																												case "IL_1FB":
																													if (!this.xmlCharType.IsWhiteSpace(this.ps.chars[(num.value - 1)])) {
																														num4 = (num4 | 255);
																														__label6__ = "IL_22F";
																														continue __step6__;
																													}
																													__label6__ = "IL_22F";
																													continue __step6__;
																													break __step6__;
																											}
																										}
																									}
																									break __step5__;
																							}
																						}
																					}
																					break;
																					break __step4__;
																			}
																		}
																}
																break __step3__;
														}
													}
												} else {
													if (c2 === "<") {
														__label0__ = "IL_3EE";
														continue __step0__;
													}
													if (c2 === "]") {
														if (!(((this.ps.charsUsed - num.value) < 3) && !this.ps.isEof)) {
															if (!((chars[(num.value + 1)] !== "]") || (chars[(num.value + 2)] !== ">"))) {
																this.Throw$2(num.value, "Xml_CDATAEndInText");
															}
															num4 = (num4 | 93);
															++num.value;
															continue __loop0__;
														}
														__label2__ = "IL_340";
														continue __step2__;
													}
												}
												if (num.value !== this.ps.charsUsed) {
													var c3 = chars[num.value];
													if ($asm07.System.Xml.XmlCharType.IsHighSurrogate(c3.charCodeAt(0))) {
														if ((num.value + 1) === this.ps.charsUsed) {
															__label2__ = "IL_340";
															continue __step2__;
														}
														++num.value;
														if ($asm07.System.Xml.XmlCharType.IsLowSurrogate(chars[num.value])) {
															++num.value;
															num4 = (num4 | c3.charCodeAt(0));
															continue __loop0__;
														}
													}
													var num7 = (num.value - this.ps.charPos);
													if (this.ZeroEndingStream(num.value)) {
														break __loop0__;
													}
													this.ThrowInvalidChar(this.ps.chars, this.ps.charsUsed, (this.ps.charPos + num7));
												}
												__label2__ = "IL_340";
												continue __step2__;
												break;
											case "IL_340":
												if (num.value > this.ps.charPos) {
													__label0__ = "IL_3EE";
													continue __step0__;
												}
												if (this.ReadData() === 0) {
													if ((this.ps.charsUsed - this.ps.charPos) > 0) {
														if (!((this.ps.chars[this.ps.charPos] === "\r") || (this.ps.chars[this.ps.charPos] === "]"))) {
															this.Throw$3("Xml_UnexpectedEOF1");
														}
													} else {
														if (!this.InEntity) {
															__label0__ = "IL_3E2";
															continue __step0__;
														}
														this.HandleEntityEnd(true);
													}
												}
												num.value = this.ps.charPos;
												chars = this.ps.chars;
												break __step2__;
										}
									}
								} else {
									num4 = (num4 | c.charCodeAt(0));
									++num.value;
								}
								break __step1__;
						}
					}
				}
				chars = this.ps.chars;
				num.value = (this.ps.charPos + num7);
				__label0__ = "IL_3EE";
				continue __step0__;
				__label0__ = "IL_3E2";
				continue __step0__;
				break;
			case "IL_3E2":
				startPos.value = (endPos.value = num.value);
				return true;
				__label0__ = "IL_3EE";
				continue __step0__;
				break;
			case "IL_3EE":
				if (!(this.parsingMode || (num2 <= 0))) {
					this.ShiftBuffer((num3 + num2), num3, ((num.value - num3) - num2));
				}
				startPos.value = this.ps.charPos;
				endPos.value = (num.value - num2);
				this.ps.charPos = num.value;
				outOrChars.value = num4;
				return (c === "<");
				break __step0__;
		}
	}
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.FinishPartialValue = function () {
	var num2 = new JSIL.Variable(0), num3 = new JSIL.Variable(0);
	this.curNode.CopyTo$0(this.readValueOffset, this.stringBuilder);
	var num = new JSIL.Variable(0);
__loop0__: 
	while (!this.ParseText$1(/* ref */ num2, /* ref */ num3, /* ref */ num)) {
		this.stringBuilder.Append$1(this.ps.chars, num2.value, (num3.value - num2.value));
	}
	this.stringBuilder.Append$1(this.ps.chars, num2.value, (num3.value - num2.value));
	this.curNode.SetValue$0(this.stringBuilder.toString());
	this.stringBuilder.Length = 0;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.FinishOtherValueIterator = function () {
	switch (Number(this.parsingFunction)) {
		case 17: 
			break;
		case 18: 
			if (this.incReadState === $asm07.System.Xml.XmlTextReaderImpl.IncrementalReadState.ReadValueChunk_OnPartialValue) {
				this.FinishPartialValue();
				this.incReadState = $asm07.System.Xml.XmlTextReaderImpl.IncrementalReadState.ReadValueChunk_OnCachedValue;
				return;
			}
			if (this.readValueOffset > 0) {
				this.curNode.SetValue$0(this.curNode.StringValue.Substring$0(this.readValueOffset));
				this.readValueOffset = 0;
				return;
			}
			break;
		case 19: 
		case 20: 
			switch (Number(this.incReadState)) {
				case 12: 
					if (this.readValueOffset > 0) {
						this.curNode.SetValue$0(this.curNode.StringValue.Substring$0(this.readValueOffset));
						this.readValueOffset = 0;
						return;
					}
					break;
				case 13: 
					this.FinishPartialValue();
					this.incReadState = $asm07.System.Xml.XmlTextReaderImpl.IncrementalReadState.ReadContentAsBinary_OnCachedValue;
					return;
				case 14: 
					this.curNode.SetValue$0(System.String.Empty);
					break;
				default: 
					return;
			}
			break;
		default: 
			return;
	}
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.SkipPartialTextValue = function () {
	var num2 = new JSIL.Variable(0), num3 = new JSIL.Variable(0);
	var num = new JSIL.Variable(0);
	this.parsingFunction = this.nextParsingFunction;
__loop0__: 
	while (!this.ParseText$1(/* ref */ num2, /* ref */ num3, /* ref */ num)) {
	}
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.FinishReadValueChunk = function () {
	this.readValueOffset = 0;
	if (this.incReadState === $asm07.System.Xml.XmlTextReaderImpl.IncrementalReadState.ReadValueChunk_OnPartialValue) {
		this.SkipPartialTextValue();
		return;
	}
	this.parsingFunction = this.nextParsingFunction;
	this.nextParsingFunction = this.nextNextParsingFunction;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.FinishReadContentAsBinary = function () {
	this.readValueOffset = 0;
	if (this.incReadState === $asm07.System.Xml.XmlTextReaderImpl.IncrementalReadState.ReadContentAsBinary_OnPartialValue) {
		this.SkipPartialTextValue();
	} else {
		this.parsingFunction = this.nextParsingFunction;
		this.nextParsingFunction = this.nextNextParsingFunction;
	}
	if (this.incReadState !== $asm07.System.Xml.XmlTextReaderImpl.IncrementalReadState.ReadContentAsBinary_End) {
	__loop0__: 
		while (this.MoveToNextContentNode(true)) {
		}
	}
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.FinishReadElementContentAsBinary = function () {
	this.FinishReadContentAsBinary();
	if (this.curNode.type !== System.Xml.XmlNodeType.EndElement) {
		this.Throw$5("Xml_InvalidNodeType", this.curNode.type.toString());
	}
	this.outerReader.Read();
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ParseRootLevelWhitespace = function () {
	var whitespaceType = this.GetWhitespaceType();
	if (!JSIL.Cast(whitespaceType, System.Boolean)) {
		this.EatWhitespaces(null);
		if (!((this.ps.chars[this.ps.charPos] !== "<") && 
				(this.ps.charsUsed - this.ps.charPos) && !this.ZeroEndingStream(this.ps.charPos))) {
			return false;
		}
	} else {
		this.curNode.SetLineInfo(this.ps.LineNo, this.ps.LinePos);
		this.EatWhitespaces(this.stringBuilder);
		if (!((this.ps.chars[this.ps.charPos] !== "<") && 
				(this.ps.charsUsed - this.ps.charPos) && !this.ZeroEndingStream(this.ps.charPos))) {
			if (this.stringBuilder.Length > 0) {
				this.curNode.SetValueNode$0(whitespaceType, this.stringBuilder.toString());
				this.stringBuilder.Length = 0;
				return true;
			}
			return false;
		}
	}
	if (this.xmlCharType.IsCharData(this.ps.chars[this.ps.charPos])) {
		this.Throw$3("Xml_InvalidRootData");
	} else {
		this.ThrowInvalidChar(this.ps.chars, this.ps.charsUsed, this.ps.charPos);
	}
	return false;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.HandleEntityReference = function (isInAttributeValue, expandType, /* ref */ charRefEndPos) {
	var result = new JSIL.Variable(0);
	if (!(((this.ps.charPos + 1) !== this.ps.charsUsed) || (this.ReadData() !== 0))) {
		this.Throw$3("Xml_UnexpectedEOF1");
	}
	if (this.ps.chars[(this.ps.charPos + 1)] === "#") {
		charRefEndPos.value = this.ParseNumericCharRef((expandType !== $asm07.System.Xml.XmlTextReaderImpl.EntityExpandType.OnlyGeneral), null, /* ref */ result);
		return result.value;
	}
	charRefEndPos.value = this.ParseNamedCharRef((expandType !== $asm07.System.Xml.XmlTextReaderImpl.EntityExpandType.OnlyGeneral), null);
	if (charRefEndPos.value >= 0) {
		return $asm07.System.Xml.XmlTextReaderImpl.EntityType.CharacterNamed;
	}
	++this.ps.charPos;
	var linePos = this.ps.LinePos;
	try {
		var num = this.ParseName();
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.Xml.XmlException)) {
			this.Throw$4("Xml_ErrorParsingEntityName", this.ps.LineNo, linePos);
			return $asm07.System.Xml.XmlTextReaderImpl.EntityType.Skipped;
		} else {
			throw $exception;
		}
	}
	if (this.ps.chars[num] !== ";") {
		this.ThrowUnexpectedToken$0(num, ";");
	}
	var linePos2 = this.ps.LinePos;
	var name = this.nameTable.Add$0(this.ps.chars, this.ps.charPos, (num - this.ps.charPos));
	this.ps.charPos = (num + 1);
	charRefEndPos.value = -1;
	var result3 = this.HandleGeneralEntityReference(name, isInAttributeValue, false, linePos2);
	this.reportedBaseUri = this.ps.baseUriStr;
	this.reportedEncoding = this.ps.encoding;
	return result3;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.HandleGeneralEntityReference = function (name, isInAttributeValue, pushFakeEntityIfNullResolver, entityStartLinePos) {
	var dtdEntityInfo = null;
	if (!(this.dtdInfo || 
			(this.fragmentParserContext === null) || 
			!this.fragmentParserContext.HasDtdInfo || (this.dtdProcessing !== System.Xml.DtdProcessing.Parse))) {
		this.ParseDtdFromParserContext();
	}
	if (!((this.dtdInfo !== null) && (dtdEntityInfo = this.dtdInfo.IDtdInfo_LookupEntity(name)))) {
		this.Throw$6("Xml_UndeclaredEntity", name, this.ps.LineNo, entityStartLinePos);
	}
	if (dtdEntityInfo.IDtdEntityInfo_IsUnparsedEntity) {
		this.Throw$6("Xml_UnparsedEntityRef", name, this.ps.LineNo, entityStartLinePos);
	}
	if (!(!this.standalone || !dtdEntityInfo.IDtdEntityInfo_IsDeclaredInExternal)) {
		this.Throw$6("Xml_ExternalEntityInStandAloneDocument", dtdEntityInfo.IDtdEntityInfo_Name, this.ps.LineNo, entityStartLinePos);
	}
	if (dtdEntityInfo.IDtdEntityInfo_IsExternal) {
		if (isInAttributeValue) {
			this.Throw$6("Xml_ExternalEntityInAttValue", name, this.ps.LineNo, entityStartLinePos);
			return $asm07.System.Xml.XmlTextReaderImpl.EntityType.Skipped;
		}
		if (this.parsingMode === $asm07.System.Xml.XmlTextReaderImpl.ParsingMode.SkipContent) {
			return $asm07.System.Xml.XmlTextReaderImpl.EntityType.Skipped;
		}
		if (this.xmlResolver !== null) {
			this.PushExternalEntity(dtdEntityInfo);
			this.curNode.entityId = this.ps.entityId;
			return $asm07.System.Xml.XmlTextReaderImpl.EntityType.Expanded;
		}
		if (pushFakeEntityIfNullResolver) {
			this.PushExternalEntity(dtdEntityInfo);
			this.curNode.entityId = this.ps.entityId;
			return $asm07.System.Xml.XmlTextReaderImpl.EntityType.FakeExpanded;
		}
		return $asm07.System.Xml.XmlTextReaderImpl.EntityType.Skipped;
	} else {
		if (this.parsingMode === $asm07.System.Xml.XmlTextReaderImpl.ParsingMode.SkipContent) {
			return $asm07.System.Xml.XmlTextReaderImpl.EntityType.Skipped;
		}
		this.PushInternalEntity(dtdEntityInfo);
		this.curNode.entityId = this.ps.entityId;
		return $asm07.System.Xml.XmlTextReaderImpl.EntityType.Expanded;
	}
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.get_InEntity = function () {
	return (this.parsingStatesStackTop >= 0);
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.HandleEntityEnd = function (checkEntityNesting) {
	if (this.parsingStatesStackTop === -1) {
		this.Throw$3("Xml_InternalError");
	}
	if (!(!checkEntityNesting || (this.ps.entityId === this.nodes[this.index].entityId))) {
		this.Throw$3("Xml_IncompleteEntity");
	}
	this.PopEntity();
	this.reportedEncoding = this.ps.encoding;
	this.reportedBaseUri = this.ps.baseUriStr;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ParsePI$0 = function () {
	return this.ParsePI$1(null);
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ParsePI$1 = function (piInDtdStringBuilder) {
	var num2 = new JSIL.Variable(0), num3 = new JSIL.Variable(0);
	if (this.parsingMode === 0) {
		this.curNode.SetLineInfo(this.ps.LineNo, this.ps.LinePos);
	}
	var num = this.ParseName();
	var text = this.nameTable.Add$0(this.ps.chars, this.ps.charPos, (num - this.ps.charPos));
	if (System.String.Compare$1(text, "xml", System.StringComparison.OrdinalIgnoreCase) === 0) {
		this.Throw$5(text.Equals$1("xml") ? "Xml_XmlDeclNotFirst" : "Xml_InvalidPIName", text);
	}
	this.ps.charPos = num;
	if (piInDtdStringBuilder === null) {
		if (!(this.ignorePIs || this.parsingMode)) {
			this.curNode.SetNamedNode$0(System.Xml.XmlNodeType.ProcessingInstruction, text);
		}
	} else {
		piInDtdStringBuilder.Append$2(text);
	}
	var c = this.ps.chars[this.ps.charPos];
	if (this.EatWhitespaces(piInDtdStringBuilder) === 0) {
		if ((this.ps.charsUsed - this.ps.charPos) < 2) {
			this.ReadData();
		}
		if (!((c === "?") && (this.ps.chars[(this.ps.charPos + 1)] === ">"))) {
			this.Throw$7("Xml_BadNameChar", System.Xml.XmlException.BuildCharExceptionArgs$2(this.ps.chars, this.ps.charsUsed, this.ps.charPos));
		}
	}
	if (this.ParsePIValue(/* ref */ num2, /* ref */ num3)) {
		if (piInDtdStringBuilder === null) {
			if (this.ignorePIs) {
				return false;
			}
			if (this.parsingMode === 0) {
				this.curNode.SetValue$1(this.ps.chars, num2.value, (num3.value - num2.value));
			}
		} else {
			piInDtdStringBuilder.Append$1(this.ps.chars, num2.value, (num3.value - num2.value));
		}
	} else {
		if (piInDtdStringBuilder === null) {
			if (!(!this.ignorePIs && (this.parsingMode === 0))) {
			__loop0__: 
				while (!this.ParsePIValue(/* ref */ num2, /* ref */ num3)) {
				}
				return false;
			}
			var bufferBuilder = this.stringBuilder;
		} else {
			bufferBuilder = piInDtdStringBuilder;
		}
	__loop1__: 
		do {
			bufferBuilder.Append$1(this.ps.chars, num2.value, (num3.value - num2.value));
		} while (!this.ParsePIValue(/* ref */ num2, /* ref */ num3));
		bufferBuilder.Append$1(this.ps.chars, num2.value, (num3.value - num2.value));
		if (piInDtdStringBuilder === null) {
			this.curNode.SetValue$0(this.stringBuilder.toString());
			this.stringBuilder.Length = 0;
		}
	}
	return true;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ParsePIValue = function (/* ref */ outStartPos, /* ref */ outEndPos) {
	var __label0__ = null;
__step0__: 
	while (true) {
		switch (__label0__) {
			case null:
				var c = 0;
				__label0__ = "__entry0__";
				continue __step0__;
				break;
			case "__entry0__":
				if (!(((this.ps.charsUsed - this.ps.charPos) >= 2) || (this.ReadData() !== 0))) {
					this.Throw$0(this.ps.charsUsed, "Xml_UnexpectedEOF", "PI");
				}
				var num = this.ps.charPos;
				var chars = this.ps.chars;
				var num2 = 0;
				var num3 = -1;
			__loop0__: 
				while (true) {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								if (!(this.xmlCharType.IsTextChar((c = chars[num])) && (c !== "?"))) {
									var __label2__ = "__entry2__";
								__step2__: 
									while (true) {
										switch (__label2__) {
											case "__entry2__":
												var c2 = chars[num];
												if (c2 <= "&") {
													switch (c2) {
														case "\t": 
															break;
														case "\n": 
															++num;
															this.OnNewLine(num);
															continue __step2__;
															;
														case "\x0b": 
														case "\x0c": 
															__label2__ = "IL_1EF";
															continue __step2__;
														case "\r": 
															if (chars[(num + 1)] === "\n") {
																if (!(this.ps.eolNormalized || this.parsingMode)) {
																	if ((num - this.ps.charPos) > 0) {
																		if (num2 === 0) {
																			num2 = 1;
																			num3 = num;
																		} else {
																			this.ShiftBuffer((num3 + num2), num3, ((num - num3) - num2));
																			num3 = (num - num2);
																			++num2;
																		}
																	} else {
																		++this.ps.charPos;
																	}
																}
																num += 2;
															} else {
																if (((num + 1) >= this.ps.charsUsed) && !this.ps.isEof) {
																	__label0__ = "IL_24A";
																	continue __step0__;
																}
																if (!this.ps.eolNormalized) {
																	chars[num] = "\n";
																}
																++num;
															}
															this.OnNewLine(num);
															continue __step2__;
															;
														default: 
															if (c2 !== "&") {
																__label2__ = "IL_1EF";
																continue __step2__;
															}
															break;
													}
												} else if (c2 !== "<") {
													if (c2 !== "?") {
														if (c2 !== "]") {
															__label2__ = "IL_1EF";
															continue __step2__;
														}
													} else {
														if (chars[(num + 1)] === ">") {
															break __loop0__;
														}
														if ((num + 1) !== this.ps.charsUsed) {
															++num;
															continue __loop0__;
														}
														__label0__ = "IL_24A";
														continue __step0__;
													}
												}
												++num;
												continue __loop0__;
												__label2__ = "IL_1EF";
												continue __step2__;
												break;
											case "IL_1EF":
												if (num === this.ps.charsUsed) {
													__label0__ = "IL_24A";
													continue __step0__;
												}
												var ch = chars[num];
												if ($asm07.System.Xml.XmlCharType.IsHighSurrogate(ch.charCodeAt(0))) {
													if ((num + 1) === this.ps.charsUsed) {
														__label0__ = "IL_24A";
														continue __step0__;
													}
													++num;
													if ($asm07.System.Xml.XmlCharType.IsLowSurrogate(chars[num])) {
														++num;
														continue __loop0__;
													}
												}
												this.ThrowInvalidChar(chars, this.ps.charsUsed, num);
												break __step2__;
										}
									}
								} else {
									++num;
								}
								break __step1__;
						}
					}
				}
				if (num2 > 0) {
					this.ShiftBuffer((num3 + num2), num3, ((num - num3) - num2));
					outEndPos.value = (num - num2);
					__label0__ = "IL_F2";
					continue __step0__;
				}
				outEndPos.value = num;
				__label0__ = "IL_F2";
				continue __step0__;
				__label0__ = "IL_24A";
				continue __step0__;
				break;
			case "IL_24A":
				if (num2 > 0) {
					this.ShiftBuffer((num3 + num2), num3, ((num - num3) - num2));
					outEndPos.value = (num - num2);
					__label0__ = "IL_267";
					continue __step0__;
				}
				outEndPos.value = num;
				__label0__ = "IL_267";
				continue __step0__;
				__label0__ = "IL_F2";
				continue __step0__;
				break;
			case "IL_F2":
				outStartPos.value = this.ps.charPos;
				this.ps.charPos = (num + 2);
				return true;
				__label0__ = "IL_267";
				continue __step0__;
				break;
			case "IL_267":
				outStartPos.value = this.ps.charPos;
				this.ps.charPos = num;
				return false;
				break __step0__;
		}
	}
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ParseComment = function () {
	if (this.ignoreComments) {
		this.parsingMode = $asm07.System.Xml.XmlTextReaderImpl.ParsingMode.SkipNode;
		this.ParseCDataOrComment$0(System.Xml.XmlNodeType.Comment);
		this.parsingMode = this.parsingMode;
		return false;
	}
	this.ParseCDataOrComment$0(System.Xml.XmlNodeType.Comment);
	return true;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ParseCData = function () {
	this.ParseCDataOrComment$0(System.Xml.XmlNodeType.CDATA);
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ParseCDataOrComment$0 = function (type) {
	var num = new JSIL.Variable(0), num2 = new JSIL.Variable(0);
	if (this.parsingMode !== 0) {
	__loop0__: 
		while (!this.ParseCDataOrComment$1(type, /* ref */ num, /* ref */ num2)) {
		}
		return;
	}
	this.curNode.SetLineInfo(this.ps.LineNo, this.ps.LinePos);
	if (this.ParseCDataOrComment$1(type, /* ref */ num, /* ref */ num2)) {
		this.curNode.SetValueNode$1(type, this.ps.chars, num.value, (num2.value - num.value));
		return;
	}
__loop1__: 
	do {
		this.stringBuilder.Append$1(this.ps.chars, num.value, (num2.value - num.value));
	} while (!this.ParseCDataOrComment$1(type, /* ref */ num, /* ref */ num2));
	this.stringBuilder.Append$1(this.ps.chars, num.value, (num2.value - num.value));
	this.curNode.SetValueNode$0(type, this.stringBuilder.toString());
	this.stringBuilder.Length = 0;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ParseCDataOrComment$1 = function (type, /* ref */ outStartPos, /* ref */ outEndPos) {
	var __label0__ = null;
__step0__: 
	while (true) {
		switch (__label0__) {
			case null:
				var c2 = 0;
				__label0__ = "__entry0__";
				continue __step0__;
				break;
			case "__entry0__":
				if (!(((this.ps.charsUsed - this.ps.charPos) >= 3) || (this.ReadData() !== 0))) {
					this.Throw$5("Xml_UnexpectedEOF", (type === System.Xml.XmlNodeType.Comment) ? "Comment" : "CDATA");
				}
				var num = this.ps.charPos;
				var chars = this.ps.chars;
				var num2 = 0;
				var num3 = -1;
				var c = (type === System.Xml.XmlNodeType.Comment) ? "-" : "]";
			__loop0__: 
				while (true) {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								if (!(this.xmlCharType.IsTextChar((c2 = chars[num])) && (c2 !== c))) {
									var __label2__ = "__entry2__";
								__step2__: 
									while (true) {
										switch (__label2__) {
											case "__entry2__":
												if (chars[num] === c) {
													if (chars[(num + 1)] === c) {
														if (chars[(num + 2)] === ">") {
															break __loop0__;
														}
														if ((num + 2) === this.ps.charsUsed) {
															__label0__ = "IL_283";
															continue __step0__;
														}
														if (type === System.Xml.XmlNodeType.Comment) {
															this.Throw$2(num, "Xml_InvalidCommentChars");
														}
													} else if ((num + 1) === this.ps.charsUsed) {
														__label0__ = "IL_283";
														continue __step0__;
													}
													++num;
												} else {
													var __label3__ = "__entry3__";
												__step3__: 
													while (true) {
														switch (__label3__) {
															case "__entry3__":
																var c3 = chars[num];
																if (c3 <= "&") {
																	switch (c3) {
																		case "\t": 
																			break;
																		case "\n": 
																			++num;
																			this.OnNewLine(num);
																			continue __step3__;
																			;
																		case "\x0b": 
																		case "\x0c": 
																			__label3__ = "IL_22D";
																			continue __step3__;
																		case "\r": 
																			if (chars[(num + 1)] === "\n") {
																				if (!(this.ps.eolNormalized || this.parsingMode)) {
																					if ((num - this.ps.charPos) > 0) {
																						if (num2 === 0) {
																							num2 = 1;
																							num3 = num;
																						} else {
																							this.ShiftBuffer((num3 + num2), num3, ((num - num3) - num2));
																							num3 = (num - num2);
																							++num2;
																						}
																					} else {
																						++this.ps.charPos;
																					}
																				}
																				num += 2;
																			} else {
																				if (((num + 1) >= this.ps.charsUsed) && !this.ps.isEof) {
																					__label0__ = "IL_283";
																					continue __step0__;
																				}
																				if (!this.ps.eolNormalized) {
																					chars[num] = "\n";
																				}
																				++num;
																			}
																			this.OnNewLine(num);
																			continue __step3__;
																			;
																		default: 
																			if (c3 !== "&") {
																				__label3__ = "IL_22D";
																				continue __step3__;
																			}
																			break;
																	}
																} else if (!((c3 === "<") || (c3 === "]"))) {
																	__label3__ = "IL_22D";
																	continue __step3__;
																}
																++num;
																continue __loop0__;
																__label3__ = "IL_22D";
																continue __step3__;
																break;
															case "IL_22D":
																if (num === this.ps.charsUsed) {
																	__label0__ = "IL_283";
																	continue __step0__;
																}
																var ch = chars[num];
																if (!$asm07.System.Xml.XmlCharType.IsHighSurrogate(ch.charCodeAt(0))) {
																	__label0__ = "IL_270";
																	continue __step0__;
																}
																if ((num + 1) === this.ps.charsUsed) {
																	__label0__ = "IL_283";
																	continue __step0__;
																}
																++num;
																if (!$asm07.System.Xml.XmlCharType.IsLowSurrogate(chars[num])) {
																	__label0__ = "IL_270";
																	continue __step0__;
																}
																++num;
																break __step3__;
														}
													}
												}
												break __step2__;
										}
									}
								} else {
									++num;
								}
								break __step1__;
						}
					}
				}
				if (num2 > 0) {
					this.ShiftBuffer((num3 + num2), num3, ((num - num3) - num2));
					outEndPos.value = (num - num2);
					__label0__ = "IL_BD";
					continue __step0__;
				}
				outEndPos.value = num;
				__label0__ = "IL_BD";
				continue __step0__;
				__label0__ = "IL_270";
				continue __step0__;
				break;
			case "IL_270":
				this.ThrowInvalidChar(chars, this.ps.charsUsed, num);
				__label0__ = "IL_283";
				continue __step0__;
				break;
			case "IL_283":
				if (num2 > 0) {
					this.ShiftBuffer((num3 + num2), num3, ((num - num3) - num2));
					outEndPos.value = (num - num2);
				} else {
					outEndPos.value = num;
				}
				outStartPos.value = this.ps.charPos;
				this.ps.charPos = num;
				return false;
				__label0__ = "IL_BD";
				continue __step0__;
				break;
			case "IL_BD":
				outStartPos.value = this.ps.charPos;
				this.ps.charPos = (num + 3);
				return true;
				break __step0__;
		}
	}
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ParseDoctypeDecl = function () {
	if (this.dtdProcessing === 0) {
		this.ThrowWithoutLineInfo$0(this.v1Compat ? "Xml_DtdIsProhibited" : "Xml_DtdIsProhibitedEx");
	}
__loop0__: 
	while ((this.ps.charsUsed - this.ps.charPos) < 8) {
		if (this.ReadData() === 0) {
			this.Throw$5("Xml_UnexpectedEOF", "DOCTYPE");
		}
	}
	if (!System.Xml.XmlConvert.StrEqual(this.ps.chars, this.ps.charPos, 7, "DOCTYPE")) {
		this.ThrowUnexpectedToken$1((!this.rootElementParsed && (this.dtdInfo === null)) ? "DOCTYPE" : "<!--");
	}
	if (!this.xmlCharType.IsWhiteSpace(this.ps.chars[(this.ps.charPos + 7)])) {
		this.ThrowExpectingWhitespace((this.ps.charPos + 7));
	}
	if (this.dtdInfo !== null) {
		this.Throw$2((this.ps.charPos - 2), "Xml_MultipleDTDsProvided");
	}
	if (this.rootElementParsed) {
		this.Throw$2((this.ps.charPos - 2), "Xml_DtdAfterRootElement");
	}
	this.ps.charPos += 8;
	this.EatWhitespaces(null);
	if (this.dtdProcessing === System.Xml.DtdProcessing.Parse) {
		this.curNode.SetLineInfo(this.ps.LineNo, this.ps.LinePos);
		this.ParseDtd();
		this.nextParsingFunction = this.parsingFunction;
		this.parsingFunction = $asm07.System.Xml.XmlTextReaderImpl.ParsingFunction.ResetAttributesRootLevel;
		return true;
	}
	this.SkipDtd();
	return false;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ParseDtd = function () {
	var dtdParser = $asm07.System.Xml.DtdParser.Create();
	this.dtdInfo = dtdParser.IDtdParser_ParseInternalDtd(new $asm07.System.Xml.XmlTextReaderImpl.DtdParserProxy(this), true);
	if (!(!this.dtdInfo.IDtdInfo_HasDefaultAttributes && !this.dtdInfo.IDtdInfo_HasNonCDataAttributes)) {
		this.addDefaultAttributesAndNormalize = true;
	}
	this.curNode.SetNamedNode$1(System.Xml.XmlNodeType.DocumentType, this.dtdInfo.IDtdInfo_Name.toString(), System.String.Empty, null);
	this.curNode.SetValue$0(this.dtdInfo.IDtdInfo_InternalDtdSubset);
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.SkipDtd = function () {
	var num = new JSIL.Variable(0);
	var charPos = this.ParseQName$0(/* ref */ num);
	this.ps.charPos = charPos;
	this.EatWhitespaces(null);
	if (this.ps.chars[this.ps.charPos] === "P") {
	__loop1__: 
		while ((this.ps.charsUsed - this.ps.charPos) < 6) {
			if (this.ReadData() === 0) {
				this.Throw$3("Xml_UnexpectedEOF1");
			}
		}
		if (!System.Xml.XmlConvert.StrEqual(this.ps.chars, this.ps.charPos, 6, "PUBLIC")) {
			this.ThrowUnexpectedToken$1("PUBLIC");
		}
		this.ps.charPos += 6;
		if (this.EatWhitespaces(null) === 0) {
			this.ThrowExpectingWhitespace(this.ps.charPos);
		}
		this.SkipPublicOrSystemIdLiteral();
		if (this.EatWhitespaces(null) === 0) {
			this.ThrowExpectingWhitespace(this.ps.charPos);
		}
		this.SkipPublicOrSystemIdLiteral();
		this.EatWhitespaces(null);
	} else if (this.ps.chars[this.ps.charPos] === "S") {
	__loop0__: 
		while ((this.ps.charsUsed - this.ps.charPos) < 6) {
			if (this.ReadData() === 0) {
				this.Throw$3("Xml_UnexpectedEOF1");
			}
		}
		if (!System.Xml.XmlConvert.StrEqual(this.ps.chars, this.ps.charPos, 6, "SYSTEM")) {
			this.ThrowUnexpectedToken$1("SYSTEM");
		}
		this.ps.charPos += 6;
		if (this.EatWhitespaces(null) === 0) {
			this.ThrowExpectingWhitespace(this.ps.charPos);
		}
		this.SkipPublicOrSystemIdLiteral();
		this.EatWhitespaces(null);
	} else if (!((this.ps.chars[this.ps.charPos] === "[") || (this.ps.chars[this.ps.charPos] === ">"))) {
		this.Throw$3("Xml_ExpectExternalOrClose");
	}
	if (this.ps.chars[this.ps.charPos] === "[") {
		++this.ps.charPos;
		this.SkipUntil("]", true);
		this.EatWhitespaces(null);
		if (this.ps.chars[this.ps.charPos] !== ">") {
			this.ThrowUnexpectedToken$1(">");
		}
	} else if (this.ps.chars[this.ps.charPos] === ">") {
		this.curNode.SetValue$0(System.String.Empty);
	} else {
		this.Throw$3("Xml_ExpectSubOrClose");
	}
	++this.ps.charPos;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.SkipPublicOrSystemIdLiteral = function () {
	var c = this.ps.chars[this.ps.charPos];
	if (!((c === '"') || (c === "'"))) {
		this.ThrowUnexpectedToken$3('"', "'");
	}
	++this.ps.charPos;
	this.SkipUntil(c, false);
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.SkipUntil = function (stopChar, recognizeLiterals) {
	var __label0__ = null;
__step0__: 
	while (true) {
		switch (__label0__) {
			case null:
				var c2 = 0;
				__label0__ = "__entry0__";
				continue __step0__;
				break;
			case "__entry0__":
				var flag = false;
				var flag2 = false;
				var flag3 = false;
				var c = '"';
				var chars = this.ps.chars;
				var num = this.ps.charPos;
			__loop0__: 
				while (true) {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								if (!(this.xmlCharType.IsAttributeValueChar((c2 = chars[num])) && 
										(c2 !== stopChar) && 
										(c2 !== "-") && (c2 !== "?"))) {
									var __label2__ = "__entry2__";
								__step2__: 
									while (true) {
										switch (__label2__) {
											case "__entry2__":
												if (!((c2 !== stopChar) || flag)) {
													break __loop0__;
												}
												this.ps.charPos = num;
												var c3 = c2;
												if (c3 <= "'") {
													switch (c3) {
														case "\t": 
															break;
														case "\n": 
															++num;
															this.OnNewLine(num);
															continue __step2__;
															;
														case "\x0b": 
														case "\x0c": 
															__label2__ = "IL_2C0";
															continue __step2__;
														case "\r": 
															if (chars[(num + 1)] === "\n") {
																num += 2;
															} else {
																if (((num + 1) >= this.ps.charsUsed) && !this.ps.isEof) {
																	__label2__ = "IL_322";
																	continue __step2__;
																}
																++num;
															}
															this.OnNewLine(num);
															continue __step2__;
															;
														default: 
															if (c3 !== '"') {
																switch (c3) {
																	case "&": 
																		__label2__ = "IL_290";
																		continue __step2__;
																	case "'": 
																		break;
																	default: 
																		__label2__ = "IL_2C0";
																		continue __step2__;
																}
															}
															if (flag) {
																if (c === c2) {
																	flag = false;
																}
															} else if (!(!recognizeLiterals || 
																	flag2 || flag3)) {
																flag = true;
																c = c2;
															}
															++num;
															continue __step2__;
															;
													}
												} else {
													if (c3 === "-") {
														if (flag2) {
															if (((num + 2) >= this.ps.charsUsed) && !this.ps.isEof) {
																__label2__ = "IL_322";
																continue __step2__;
															}
															if (!((chars[(num + 1)] !== "-") || (chars[(num + 2)] !== ">"))) {
																flag2 = false;
																num += 2;
																continue __loop0__;
															}
														}
														++num;
														continue __loop0__;
													}
													switch (c3) {
														case "<": 
															if (chars[(num + 1)] === "?") {
																if (!(!recognizeLiterals || 
																		flag || flag2)) {
																	flag3 = true;
																	num += 2;
																	continue __step2__;
																	;
																}
															} else if (chars[(num + 1)] === "!") {
																if (((num + 3) >= this.ps.charsUsed) && !this.ps.isEof) {
																	__label2__ = "IL_322";
																	continue __step2__;
																}
																if (!((chars[(num + 2)] !== "-") || 
																		(chars[(num + 3)] !== "-") || 
																		!recognizeLiterals || 
																		flag || flag3)) {
																	flag2 = true;
																	num += 4;
																	continue __step2__;
																	;
																}
															} else if (((num + 1) >= this.ps.charsUsed) && !this.ps.isEof) {
																__label2__ = "IL_322";
																continue __step2__;
															}
															++num;
															continue __step2__;
															;
														case "=": 
															__label2__ = "IL_2C0";
															continue __step2__;
														case ">": 
															break;
														case "?": 
															if (flag3) {
																if (((num + 1) >= this.ps.charsUsed) && !this.ps.isEof) {
																	__label2__ = "IL_322";
																	continue __step2__;
																}
																if (chars[(num + 1)] === ">") {
																	flag3 = false;
																	++num;
																	continue __step2__;
																	;
																}
															}
															++num;
															continue __step2__;
															;
														default: 
															if (c3 !== "]") {
																__label2__ = "IL_2C0";
																continue __step2__;
															}
															break;
													}
												}
												__label2__ = "IL_290";
												continue __step2__;
												break;
											case "IL_290":
												++num;
												continue __loop0__;
												__label2__ = "IL_2C0";
												continue __step2__;
												break;
											case "IL_2C0":
												if (num !== this.ps.charsUsed) {
													var ch = chars[num];
													if ($asm07.System.Xml.XmlCharType.IsHighSurrogate(ch.charCodeAt(0))) {
														if ((num + 1) === this.ps.charsUsed) {
															__label2__ = "IL_322";
															continue __step2__;
														}
														++num;
														if ($asm07.System.Xml.XmlCharType.IsLowSurrogate(chars[num])) {
															++num;
															continue __loop0__;
														}
													}
													this.ThrowInvalidChar(chars, this.ps.charsUsed, num);
												}
												__label2__ = "IL_322";
												continue __step2__;
												break;
											case "IL_322":
												if (this.ReadData() === 0) {
													if ((this.ps.charsUsed - this.ps.charPos) > 0) {
														if (this.ps.chars[this.ps.charPos] !== "\r") {
															this.Throw$3("Xml_UnexpectedEOF1");
														}
													} else {
														this.Throw$3("Xml_UnexpectedEOF1");
													}
												}
												chars = this.ps.chars;
												num = this.ps.charPos;
												break __step2__;
										}
									}
								} else {
									++num;
								}
								break __step1__;
						}
					}
				}
				this.ps.charPos = (num + 1);
				break __step0__;
		}
	}
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.EatWhitespaces = function (sb) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				var num = this.ps.charPos;
				var num2 = 0;
				var chars = this.ps.chars;
			__loop0__: 
				while (true) {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								var c = chars[num];
								switch (c) {
									case "\t": 
										break;
									case "\n": 
										++num;
										this.OnNewLine(num);
										continue __step1__;
										;
									case "\x0b": 
									case "\x0c": 
										__label1__ = "IL_F9";
										continue __step1__;
									case "\r": 
										if (chars[(num + 1)] === "\n") {
											var num3 = (num - this.ps.charPos);
											if (!((sb === null) || this.ps.eolNormalized)) {
												if (num3 > 0) {
													sb.Append$1(chars, this.ps.charPos, num3);
													num2 += num3;
												}
												this.ps.charPos = (num + 1);
											}
											num += 2;
										} else {
											if (((num + 1) >= this.ps.charsUsed) && !this.ps.isEof) {
												__label1__ = "IL_14F";
												continue __step1__;
											}
											if (!this.ps.eolNormalized) {
												chars[num] = "\n";
											}
											++num;
										}
										this.OnNewLine(num);
										continue __step1__;
										;
									default: 
										if (c !== " ") {
											__label1__ = "IL_F9";
											continue __step1__;
										}
										break;
								}
								++num;
								continue __loop0__;
								__label1__ = "IL_14F";
								continue __step1__;
								break;
							case "IL_14F":
								var num4 = (num - this.ps.charPos);
								if (num4 > 0) {
									if (sb !== null) {
										sb.Append$1(this.ps.chars, this.ps.charPos, num4);
									}
									this.ps.charPos = num;
									num2 += num4;
								}
								if (this.ReadData() === 0) {
									if (!(this.ps.charsUsed - this.ps.charPos)) {
										return num2;
									}
									if (this.ps.chars[this.ps.charPos] !== "\r") {
										this.Throw$3("Xml_UnexpectedEOF1");
									}
								}
								num = this.ps.charPos;
								chars = this.ps.chars;
								continue __loop0__;
								__label1__ = "IL_F9";
								continue __step1__;
								break;
							case "IL_F9":
								if (num !== this.ps.charsUsed) {
									break __loop0__;
								}
								__label1__ = "IL_14F";
								continue __step1__;
								break __step1__;
						}
					}
				}
				var num5 = (num - this.ps.charPos);
				if (num5 > 0) {
					if (sb !== null) {
						sb.Append$1(this.ps.chars, this.ps.charPos, num5);
					}
					this.ps.charPos = num;
					num2 += num5;
					return num2;
				}
				return num2;
				break __step0__;
		}
	}
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ParseCharRefInline = function (startPos, /* ref */ charCount, /* ref */ entityType) {
	if (this.ps.chars[(startPos + 1)] === "#") {
		return this.ParseNumericCharRefInline(
			startPos, 
			true, 
			null, 
			/* ref */ charCount, 
			/* ref */ entityType
		);
	}
	charCount.value = 1;
	entityType.value = $asm07.System.Xml.XmlTextReaderImpl.EntityType.CharacterNamed;
	return this.ParseNamedCharRefInline(startPos, true, null);
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ParseNumericCharRef = function (expand, internalSubsetBuilder, /* ref */ entityType) {
	var num2 = 0, num3 = new JSIL.Variable(0);
__loop0__: 
	while (true) {
		var num = (num2 = this.ParseNumericCharRefInline(
				this.ps.charPos, 
				expand, 
				internalSubsetBuilder, 
				/* ref */ num3, 
				/* ref */ entityType
			));
		if (num2 !== -2) {
			break __loop0__;
		}
		if (this.ReadData() === 0) {
			this.Throw$3("Xml_UnexpectedEOF");
		}
	}
	if (expand) {
		this.ps.charPos = (num - num3.value);
	}
	return num;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ParseNumericCharRefInline = function (startPos, expand, internalSubsetBuilder, /* ref */ charCount, /* ref */ entityType) {
	var __label0__ = null;
__step0__: 
	while (true) {
		switch (__label0__) {
			case null:
				var c3 = new JSIL.Variable(0), c4 = new JSIL.Variable(0);
				__label0__ = "__entry0__";
				continue __step0__;
				break;
			case "__entry0__":
				var num = 0;
				var res = null;
				var chars = this.ps.chars;
				var num2 = (startPos + 2);
				charCount.value = 0;
				var num3 = 0;
				try {
					if (chars[num2] === "x") {
						++num2;
						num3 = num2;
						res = "Xml_BadHexEntity";
					__loop1__: 
						while (true) {
							var c = chars[num2];
							if (!((c < "0") || (c > "9"))) {
								num = (((num * 16) + c.charCodeAt(0)) - 48);
							} else if (!((c < "a") || (c > "f"))) {
								num = ((((num * 16) + 10) + c.charCodeAt(0)) - 97);
							} else {
								if ((c < "A") || (c > "F")) {
									break __loop1__;
								}
								num = ((((num * 16) + 10) + c.charCodeAt(0)) - 65);
							}
							++num2;
						}
						entityType.value = $asm07.System.Xml.XmlTextReaderImpl.EntityType.CharacterHex;
					} else {
						if (num2 >= this.ps.charsUsed) {
							entityType.value = $asm07.System.Xml.XmlTextReaderImpl.EntityType.Skipped;
							return -2;
						}
						num3 = num2;
						res = "Xml_BadDecimalEntity";
					__loop0__: 
						while ((chars[num2] >= "0") && (chars[num2] <= "9")) {
							num = (((num * 10) + chars[num2]) - 48);
							++num2;
						}
						entityType.value = $asm07.System.Xml.XmlTextReaderImpl.EntityType.CharacterDec;
					}
				} catch ($exception) {
					if (JSIL.CheckType($exception, System.OverflowException)) {
						var arg_DB_0 = $exception;
						this.ps.charPos = num2;
						entityType.value = $asm07.System.Xml.XmlTextReaderImpl.EntityType.Skipped;
						this.Throw$8("Xml_CharEntityOverflow", null, arg_DB_0);
					} else {
						throw $exception;
					}
				}
				if ((chars[num2] === ";") && (num3 !== num2)) {
					__label0__ = "IL_122";
					continue __step0__;
				}
				if (num2 === this.ps.charsUsed) {
					return -2;
				}
				this.Throw$2(num2, res);
				__label0__ = "IL_122";
				continue __step0__;
				break;
			case "IL_122":
				if (num <= 65535) {
					var c2 = String.fromCharCode(num);
					if (!(this.xmlCharType.IsCharData(c2) || (!(this.v1Compat && 
									this.normalize) && 
								(this.v1Compat || 
									!this.checkCharacters)))) {
						this.Throw$1((this.ps.chars[(this.ps.charPos + 2)] === "x") ? (this.ps.charPos + 3) : (this.ps.charPos + 2), "Xml_InvalidCharacter", System.Xml.XmlException.BuildCharExceptionArgs$3(c2, "\0"));
					}
					if (expand) {
						if (internalSubsetBuilder !== null) {
							internalSubsetBuilder.Append$1(this.ps.chars, this.ps.charPos, ((num2 - this.ps.charPos) + 1));
						}
						chars[num2] = c2;
					}
					charCount.value = 1;
					return (num2 + 1);
				}
				$asm07.System.Xml.XmlCharType.SplitSurrogateChar(num, /* ref */ c3, /* ref */ c4);
				if (!(!this.normalize || ($asm07.System.Xml.XmlCharType.IsHighSurrogate(c4.value.charCodeAt(0)) && 
							$asm07.System.Xml.XmlCharType.IsLowSurrogate(c3.value.charCodeAt(0))))) {
					this.Throw$1((this.ps.chars[(this.ps.charPos + 2)] === "x") ? (this.ps.charPos + 3) : (this.ps.charPos + 2), "Xml_InvalidCharacter", System.Xml.XmlException.BuildCharExceptionArgs$3(c4.value, c3.value));
				}
				if (expand) {
					if (internalSubsetBuilder !== null) {
						internalSubsetBuilder.Append$1(this.ps.chars, this.ps.charPos, ((num2 - this.ps.charPos) + 1));
					}
					chars[(num2 - 1)] = c4.value;
					chars[num2] = c3.value;
				}
				charCount.value = 2;
				return (num2 + 1);
				break __step0__;
		}
	}
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ParseNamedCharRef = function (expand, internalSubsetBuilder) {
__loop0__: 
	while (true) {
		var num = this.ParseNamedCharRefInline(this.ps.charPos, expand, internalSubsetBuilder);
		break __loop0__;
	}
	if (expand) {
		this.ps.charPos = (num - 1);
		return num;
	}
	return num;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ParseNamedCharRefInline = function (startPos, expand, internalSubsetBuilder) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				var num = (startPos + 1);
				var chars = this.ps.chars;
				var c = chars[num];
				if (c <= "g") {
					if (c !== "a") {
						if (c === "g") {
							if ((this.ps.charsUsed - num) < 3) {
								return -2;
							}
							if (!((chars[(num + 1)] !== "t") || (chars[(num + 2)] !== ";"))) {
								num += 3;
								var c2 = ">";
								__label0__ = "IL_175";
								continue __step0__;
							}
							return -1;
						}
					} else {
						++num;
						if (chars[num] === "m") {
							if ((this.ps.charsUsed - num) < 3) {
								return -2;
							}
							if (!((chars[(num + 1)] !== "p") || (chars[(num + 2)] !== ";"))) {
								num += 3;
								c2 = "&";
								__label0__ = "IL_175";
								continue __step0__;
							}
							return -1;
						} else if (chars[num] === "p") {
							if ((this.ps.charsUsed - num) < 4) {
								return -2;
							}
							if (!((chars[(num + 1)] !== "o") || 
									(chars[(num + 2)] !== "s") || (chars[(num + 3)] !== ";"))) {
								num += 4;
								c2 = "'";
								__label0__ = "IL_175";
								continue __step0__;
							}
							return -1;
						} else {
							if (num < this.ps.charsUsed) {
								return -1;
							}
							return -2;
						}
					}
				} else if (c !== "l") {
					if (c === "q") {
						if ((this.ps.charsUsed - num) < 5) {
							return -2;
						}
						if (!((chars[(num + 1)] !== "u") || 
								(chars[(num + 2)] !== "o") || 
								(chars[(num + 3)] !== "t") || (chars[(num + 4)] !== ";"))) {
							num += 5;
							c2 = '"';
							__label0__ = "IL_175";
							continue __step0__;
						}
						return -1;
					}
				} else {
					if ((this.ps.charsUsed - num) < 3) {
						return -2;
					}
					if (!((chars[(num + 1)] !== "t") || (chars[(num + 2)] !== ";"))) {
						num += 3;
						c2 = "<";
						__label0__ = "IL_175";
						continue __step0__;
					}
					return -1;
				}
				return -1;
				__label0__ = "IL_175";
				continue __step0__;
				break;
			case "IL_175":
				if (expand) {
					if (internalSubsetBuilder !== null) {
						internalSubsetBuilder.Append$1(this.ps.chars, this.ps.charPos, (num - this.ps.charPos));
					}
					this.ps.chars[(num - 1)] = c2;
				}
				return num;
				break __step0__;
		}
	}
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ParseName = function () {
	var num = new JSIL.Variable(0);
	return this.ParseQName$1(false, 0, /* ref */ num);
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ParseQName$0 = function (/* ref */ colonPos) {
	return this.ParseQName$1(true, 0, /* ref */ colonPos);
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ParseQName$1 = function (isQName, startOffset, /* ref */ colonPos) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				var num = -1;
				var num2 = new JSIL.Variable((this.ps.charPos + startOffset));
			__loop0__: 
				while (true) {
					var chars = this.ps.chars;
					if (this.xmlCharType.IsStartNCNameSingleChar(chars[num2.value])) {
						++num2.value;
					} else {
						if ((num2.value + 1) >= this.ps.charsUsed) {
							if (this.ReadDataInName(/* ref */ num2)) {
								continue __loop0__;
							}
							this.Throw$0(num2.value, "Xml_UnexpectedEOF", "Name");
						}
						if (!((chars[num2.value] === ":") && !this.supportNamespaces)) {
							this.Throw$1(num2.value, "Xml_BadStartNameChar", System.Xml.XmlException.BuildCharExceptionArgs$2(chars, this.ps.charsUsed, num2.value));
						}
					}
				__loop1__: 
					while (true) {
						if (this.xmlCharType.IsNCNameSingleChar(chars[num2.value])) {
							++num2.value;
						} else if (chars[num2.value] === ":") {
							if (this.supportNamespaces) {
								break __loop1__;
							}
							num = (num2.value - this.ps.charPos);
							++num2.value;
						} else {
							if (num2.value !== this.ps.charsUsed) {
								__label0__ = "IL_12F";
								continue __step0__;
							}
							if (!this.ReadDataInName(/* ref */ num2)) {
								__label0__ = "IL_11E";
								continue __step0__;
							}
							chars = this.ps.chars;
						}
					}
					if (!((num === -1) && isQName)) {
						this.Throw$1(num2.value, "Xml_BadNameChar", System.Xml.XmlException.BuildCharExceptionArgs$3(":", "\0"));
					}
					num = (num2.value - this.ps.charPos);
					++num2.value;
				}
				__label0__ = "IL_11E";
				continue __step0__;
				break;
			case "IL_11E":
				this.Throw$0(num2.value, "Xml_UnexpectedEOF", "Name");
				__label0__ = "IL_12F";
				continue __step0__;
				break;
			case "IL_12F":
				colonPos.value = (num === -1) ? -1 : (this.ps.charPos + num);
				return num2.value;
				break __step0__;
		}
	}
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ReadDataInName = function (/* ref */ pos) {
	var result = (this.ReadData() !== 0);
	pos.value = (this.ps.charPos + (pos.value - this.ps.charPos));
	return result;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.AddNode = function (nodeIndex, nodeDepth) {
	var nodeData = this.nodes[nodeIndex];
	if (nodeData !== null) {
		nodeData.depth = nodeDepth;
		return nodeData;
	}
	return this.AllocNode(nodeIndex, nodeDepth);
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.AllocNode = function (nodeIndex, nodeDepth) {
	if (nodeIndex >= (this.nodes.length - 1)) {
		var destinationArray = JSIL.Array.New($asm07.System.Xml.XmlTextReaderImpl.NodeData, (this.nodes.length * 2));
		System.Array.Copy$1(
			this.nodes, 
			0, 
			destinationArray, 
			0, 
			this.nodes.length
		);
		this.nodes = destinationArray;
	}
	var nodeData = this.nodes[nodeIndex];
	if (nodeData === null) {
		nodeData = new $asm07.System.Xml.XmlTextReaderImpl.NodeData();
		this.nodes[nodeIndex] = nodeData;
	}
	nodeData.depth = nodeDepth;
	return nodeData;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.AddAttributeNoChecks = function (name, attrDepth) {
	var nodeData = this.AddNode(((this.index + this.attrCount) + 1), attrDepth);
	nodeData.SetNamedNode$0(System.Xml.XmlNodeType.Attribute, this.nameTable.Add$1(name));
	++this.attrCount;
	return nodeData;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.AddAttribute$0 = function (endNamePos, colonPos) {
	if (!((colonPos !== -1) && this.supportNamespaces)) {
		var text = this.nameTable.Add$0(this.ps.chars, this.ps.charPos, (endNamePos - this.ps.charPos));
		return this.AddAttribute$1(text, System.String.Empty, text);
	}
	this.attrNeedNamespaceLookup = true;
	var charPos = this.ps.charPos;
	var num = (colonPos - charPos);
	if (!((num !== this.lastPrefix.length) || !System.Xml.XmlConvert.StrEqual(this.ps.chars, charPos, num, this.lastPrefix))) {
		return this.AddAttribute$1(this.nameTable.Add$0(this.ps.chars, (colonPos + 1), ((endNamePos - colonPos) - 1)), this.lastPrefix, null);
	}
	var prefix = this.nameTable.Add$0(this.ps.chars, charPos, num);
	this.lastPrefix = prefix;
	return this.AddAttribute$1(this.nameTable.Add$0(this.ps.chars, (colonPos + 1), ((endNamePos - colonPos) - 1)), prefix, null);
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.AddAttribute$1 = function (localName, prefix, nameWPrefix) {
	var nodeData = this.AddNode(((this.index + this.attrCount) + 1), (this.index + 1));
	nodeData.SetNamedNode$1(System.Xml.XmlNodeType.Attribute, localName, prefix, nameWPrefix);
	var num = (1 << (((localName[0]) & "\x1f") & "\x1f"));
	if (!(this.attrHashtable & num)) {
		this.attrHashtable = (this.attrHashtable | num);
	} else if (this.attrDuplWalkCount < 250) {
		++this.attrDuplWalkCount;
	__loop0__: 
		for (var i = (this.index + 1); i < ((this.index + this.attrCount) + 1); ++i) {
			var nodeData2 = this.nodes[i];
			if ($asm07.System.Xml.Ref.Equal(nodeData2.localName, nodeData.localName)) {
				this.attrDuplWalkCount = 250;
				break __loop0__;
			}
		}
	}
	++this.attrCount;
	return nodeData;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.PopElementContext = function () {
	this.namespaceManager.PopScope();
	if (this.curNode.xmlContextPushed) {
		this.PopXmlContext();
	}
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.OnNewLine = function (pos) {
	++this.ps.lineNo;
	this.ps.lineStartPos = (pos - 1);
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.OnEof = function () {
	this.curNode = this.nodes[0];
	this.curNode.Clear(System.Xml.XmlNodeType.None);
	this.curNode.SetLineInfo(this.ps.LineNo, this.ps.LinePos);
	this.parsingFunction = $asm07.System.Xml.XmlTextReaderImpl.ParsingFunction.Eof;
	this.readState = System.Xml.ReadState.EndOfFile;
	this.reportedEncoding = null;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.LookupNamespace$1 = function (node) {
	var text = this.namespaceManager.LookupNamespace(node.prefix);
	if (text !== null) {
		return text;
	}
	this.Throw$6("Xml_UnknownNs", node.prefix, node.LineNo, node.LinePos);
	return null;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.AddNamespace = function (prefix, uri, attr) {
	if (uri == "http://www.w3.org/2000/xmlns/") {
		if ($asm07.System.Xml.Ref.Equal(prefix, this.XmlNs)) {
			this.Throw$4("Xml_XmlnsPrefix", attr.lineInfo2.lineNo, attr.lineInfo2.linePos);
		} else {
			this.Throw$6("Xml_NamespaceDeclXmlXmlns", prefix, attr.lineInfo2.lineNo, attr.lineInfo2.linePos);
		}
	} else if (!(!(uri == "http://www.w3.org/XML/1998/namespace") || 
			$asm07.System.Xml.Ref.Equal(prefix, this.Xml) || this.v1Compat)) {
		this.Throw$6("Xml_NamespaceDeclXmlXmlns", prefix, attr.lineInfo2.lineNo, attr.lineInfo2.linePos);
	}
	if (!((uri.length !== 0) || (prefix.length <= 0))) {
		this.Throw$4("Xml_BadNamespaceDecl", attr.lineInfo.lineNo, attr.lineInfo.linePos);
	}
	try {
		this.namespaceManager.AddNamespace(prefix, uri);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.ArgumentException)) {
			var arg_E8_0 = $exception;
			this.ReThrow(arg_E8_0, attr.lineInfo.lineNo, attr.lineInfo.linePos);
		} else {
			throw $exception;
		}
	}
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ResetAttributes = function () {
	if (this.fullAttrCleanup) {
		this.FullAttributeCleanup();
	}
	this.curAttrIndex = -1;
	this.attrCount = 0;
	this.attrHashtable = 0;
	this.attrDuplWalkCount = 0;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.FullAttributeCleanup = function () {
__loop0__: 
	for (var i = (this.index + 1); i < ((this.index + this.attrCount) + 1); ++i) {
		this.nodes[i].IsDefaultAttribute = false;
	}
	this.fullAttrCleanup = false;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.PushXmlContext = function () {
	this.xmlContext = JSIL.New($asm07.System.Xml.XmlTextReaderImpl.XmlContext, "_ctor$1", [this.xmlContext]);
	this.curNode.xmlContextPushed = true;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.PopXmlContext = function () {
	this.xmlContext = this.xmlContext.previousContext;
	this.curNode.xmlContextPushed = false;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.GetWhitespaceType = function () {
	if (this.whitespaceHandling !== $asm07.System.Xml.WhitespaceHandling.None) {
		if (this.xmlContext.xmlSpace === System.Xml.XmlSpace.Preserve) {
			return System.Xml.XmlNodeType.SignificantWhitespace;
		}
		if (this.whitespaceHandling === 0) {
			return System.Xml.XmlNodeType.Whitespace;
		}
	}
	return System.Xml.XmlNodeType.None;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.GetTextNodeType = function (orChars) {
	if (orChars > 32) {
		return System.Xml.XmlNodeType.Text;
	}
	return this.GetWhitespaceType();
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.PushExternalEntityOrSubset = function (publicId, systemId, baseUriStr, /* ref */ baseUri, entityName) {
	if (!(!System.Uri.op_Equality(baseUri.value, null) || System.String.IsNullOrEmpty(baseUriStr))) {
		baseUri.value = this.xmlResolver.ResolveUri(null, baseUriStr);
	}
	if (!System.String.IsNullOrEmpty(publicId)) {
		try {
			var uri = this.xmlResolver.ResolveUri(baseUri.value, publicId);
			if (this.OpenAndPush(uri)) {
				return;
			}
		} catch ($exception) {
		}
	}
	uri = this.xmlResolver.ResolveUri(baseUri.value, systemId);
	try {
		if (this.OpenAndPush(uri)) {
			return;
		}
	} catch ($exception) {
		var arg_6E_0 = $exception;
		if (this.v1Compat) {
			throw $exception;
		}
		this.Throw$10(JSIL.New(System.Xml.XmlException, "_ctor$19", [(entityName === null) ? "Xml_ErrorOpeningExternalDtd" : "Xml_ErrorOpeningExternalEntity", JSIL.Array.New(System.String, [uri.toString(), System.String.Empty]), arg_6E_0, 0, 0]));
	}
	if (entityName === null) {
		this.ThrowWithoutLineInfo$2("Xml_CannotResolveExternalSubset", JSIL.Array.New(System.String, [publicId ? publicId : System.String.Empty, systemId]), null);
		return;
	}
	this.Throw$5((this.dtdProcessing === System.Xml.DtdProcessing.Ignore) ? "Xml_CannotResolveEntityDtdIgnored" : "Xml_CannotResolveEntity", entityName);
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.OpenAndPush = function (uri) {
	if (this.xmlResolver.SupportsType(uri, System.IO.TextReader)) {
		var textReader = JSIL.Cast(this.xmlResolver.GetEntity(uri, null, System.IO.TextReader), System.IO.TextReader);
		if (textReader === null) {
			return false;
		}
		this.PushParsingState();
		this.InitTextReaderInput$1(uri.toString(), uri, textReader);
	} else {
		var stream = JSIL.Cast(this.xmlResolver.GetEntity(uri, null, System.IO.Stream), System.IO.Stream);
		if (stream === null) {
			return false;
		}
		this.PushParsingState();
		this.InitStreamInput$0(uri, stream, null);
	}
	return true;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.PushExternalEntity = function (entity) {
	if (this.xmlResolver !== null) {
		var uri = new JSIL.Variable(null);
		this.PushExternalEntityOrSubset(
			entity.IDtdEntityInfo_PublicId, 
			entity.IDtdEntityInfo_SystemId, 
			entity.IDtdEntityInfo_BaseUriString, 
			/* ref */ uri, 
			entity.IDtdEntityInfo_Name
		);
		this.RegisterEntity(entity);
		if (this.v1Compat) {
			this.EatWhitespaces(null);
		}
		if (!this.ParseXmlDeclaration(true)) {
			this.ps.charPos = this.ps.charPos;
		}
		return true;
	}
	this.PushParsingState();
	this.InitStringInput(entity.IDtdEntityInfo_SystemId, this.ps.encoding, System.String.Empty);
	this.RegisterEntity(entity);
	this.RegisterConsumedCharacters(0, true);
	return false;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.PushInternalEntity = function (entity) {
	this.PushParsingState();
	this.InitStringInput(entity.IDtdEntityInfo_DeclaredUriString ? entity.IDtdEntityInfo_DeclaredUriString : System.String.Empty, this.ps.encoding, entity.IDtdEntityInfo_Text);
	this.RegisterEntity(entity);
	this.ps.lineNo = entity.IDtdEntityInfo_LineNumber;
	this.ps.lineStartPos = (-entity.IDtdEntityInfo_LinePosition - 1);
	this.ps.eolNormalized = true;
	this.RegisterConsumedCharacters(entity.IDtdEntityInfo_Text.length, true);
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.PopEntity = function () {
	if (this.ps.stream !== null) {
		this.ps.stream.Close();
	}
	this.UnregisterEntity();
	this.PopParsingState();
	this.curNode.entityId = this.ps.entityId;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.RegisterEntity = function (entity) {
	if (!((this.currentEntities === null) || !this.currentEntities.ContainsKey(entity))) {
		this.Throw$6(entity.IDtdEntityInfo_IsParameterEntity ? "Xml_RecursiveParEntity" : "Xml_RecursiveGenEntity", entity.IDtdEntityInfo_Name, this.parsingStatesStack[this.parsingStatesStackTop].LineNo, this.parsingStatesStack[this.parsingStatesStackTop].LinePos);
	}
	this.ps.entity = entity;
	this.ps.entityId = this.nextEntityId++;
	if (entity !== null) {
		if (this.currentEntities === null) {
			this.currentEntities = JSIL.New(System.Collections.Generic.Dictionary$b2.Of($asm07.System.Xml.IDtdEntityInfo, $asm07.System.Xml.IDtdEntityInfo), "_ctor$0", []);
		}
		this.currentEntities.Add(entity, entity);
	}
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.UnregisterEntity = function () {
	if (this.ps.entity !== null) {
		this.currentEntities.Remove(this.ps.entity);
	}
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.PushParsingState = function () {
	if (this.parsingStatesStack === null) {
		this.parsingStatesStack = JSIL.Array.New($asm07.System.Xml.XmlTextReaderImpl.ParsingState, 2);
	} else if ((this.parsingStatesStackTop + 1) === this.parsingStatesStack.length) {
		var destinationArray = JSIL.Array.New($asm07.System.Xml.XmlTextReaderImpl.ParsingState, (this.parsingStatesStack.length * 2));
		System.Array.Copy$1(
			this.parsingStatesStack, 
			0, 
			destinationArray, 
			0, 
			this.parsingStatesStack.length
		);
		this.parsingStatesStack = destinationArray;
	}
	++this.parsingStatesStackTop;
	this.parsingStatesStack[this.parsingStatesStackTop] = this.ps.MemberwiseClone();
	this.ps.Clear();
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.PopParsingState = function () {
	this.ps.Close(true);
	this.ps = this.parsingStatesStack[this.parsingStatesStackTop--].MemberwiseClone();
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ThrowUnexpectedToken$0 = function (pos, expectedToken) {
	this.ThrowUnexpectedToken$2(pos, expectedToken, null);
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ThrowUnexpectedToken$1 = function (expectedToken1) {
	this.ThrowUnexpectedToken$3(expectedToken1, null);
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ThrowUnexpectedToken$2 = function (pos, expectedToken1, expectedToken2) {
	this.ps.charPos = pos;
	this.ThrowUnexpectedToken$3(expectedToken1, expectedToken2);
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ThrowUnexpectedToken$3 = function (expectedToken1, expectedToken2) {
	var text = this.ParseUnexpectedToken$1();
	if (text === null) {
		this.Throw$3("Xml_UnexpectedEOF1");
	}
	if (expectedToken2 !== null) {
		this.Throw$7("Xml_UnexpectedTokens2", JSIL.Array.New(System.String, [text, expectedToken1, expectedToken2]));
		return;
	}
	this.Throw$7("Xml_UnexpectedTokenEx", JSIL.Array.New(System.String, [text, expectedToken1]));
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ParseUnexpectedToken$0 = function (pos) {
	this.ps.charPos = pos;
	return this.ParseUnexpectedToken$1();
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ParseUnexpectedToken$1 = function () {
	if (this.ps.charPos === this.ps.charsUsed) {
		return null;
	}
	if (this.xmlCharType.IsNCNameSingleChar(this.ps.chars[this.ps.charPos])) {
	__loop0__: 
		for (var num = (this.ps.charPos + 1); this.xmlCharType.IsNCNameSingleChar(this.ps.chars[num]); ++num) {
		}
		return JSIL.New(System.String, "_ctor$0", [this.ps.chars, this.ps.charPos, (num - this.ps.charPos)]);
	}
	return JSIL.New(System.String, "_ctor$0", [this.ps.chars, this.ps.charPos, 1]);
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ThrowExpectingWhitespace = function (pos) {
	var text = this.ParseUnexpectedToken$0(pos);
	if (text === null) {
		this.Throw$2(pos, "Xml_UnexpectedEOF1");
		return;
	}
	this.Throw$0(pos, "Xml_ExpectingWhiteSpace", text);
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.GetIndexOfAttributeWithoutPrefix = function (name) {
	name = this.nameTable.Get$1(name);
	if (name === null) {
		return -1;
	}
__loop0__: 
	for (var i = (this.index + 1); i < ((this.index + this.attrCount) + 1); ++i) {
		if (!(!$asm07.System.Xml.Ref.Equal(this.nodes[i].localName, name) || (this.nodes[i].prefix.length !== 0))) {
			return i;
		}
	}
	return -1;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.GetIndexOfAttributeWithPrefix = function (name) {
	name = this.nameTable.Add$1(name);
	if (name === null) {
		return -1;
	}
__loop0__: 
	for (var i = (this.index + 1); i < ((this.index + this.attrCount) + 1); ++i) {
		if ($asm07.System.Xml.Ref.Equal(this.nodes[i].GetNameWPrefix(this.nameTable), name)) {
			return i;
		}
	}
	return -1;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ZeroEndingStream = function (pos) {
	return false;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ParseDtdFromParserContext = function () {
	var dtdParser = $asm07.System.Xml.DtdParser.Create();
	this.dtdInfo = dtdParser.IDtdParser_ParseFreeFloatingDtd(
		this.fragmentParserContext.BaseURI, 
		this.fragmentParserContext.DocTypeName, 
		this.fragmentParserContext.PublicId, 
		this.fragmentParserContext.SystemId, 
		this.fragmentParserContext.InternalSubset, 
		new $asm07.System.Xml.XmlTextReaderImpl.DtdParserProxy(this)
	);
	if (!(!this.dtdInfo.IDtdInfo_HasDefaultAttributes && !this.dtdInfo.IDtdInfo_HasNonCDataAttributes)) {
		this.addDefaultAttributesAndNormalize = true;
	}
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.InitReadContentAsBinary = function () {
	if (this.parsingFunction === $asm07.System.Xml.XmlTextReaderImpl.ParsingFunction.InReadValueChunk) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_MixingReadValueChunkWithBinary")]);
	}
	if (this.parsingFunction === $asm07.System.Xml.XmlTextReaderImpl.ParsingFunction.InIncrementalRead) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_MixingV1StreamingWithV2Binary")]);
	}
	if (!(System.Xml.XmlReader.IsTextualNode(this.curNode.type) || this.MoveToNextContentNode(false))) {
		return false;
	}
	this.SetupReadContentAsBinaryState($asm07.System.Xml.XmlTextReaderImpl.ParsingFunction.InReadContentAsBinary);
	this.incReadLineInfo.Set(this.curNode.LineNo, this.curNode.LinePos);
	return true;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.InitReadElementContentAsBinary = function () {
	var isEmptyElement = this.curNode.IsEmptyElement;
	this.outerReader.Read();
	if (isEmptyElement) {
		return false;
	}
	if (!this.MoveToNextContentNode(false)) {
		if (this.curNode.type !== System.Xml.XmlNodeType.EndElement) {
			this.Throw$5("Xml_InvalidNodeType", this.curNode.type.toString());
		}
		this.outerReader.Read();
		return false;
	}
	this.SetupReadContentAsBinaryState($asm07.System.Xml.XmlTextReaderImpl.ParsingFunction.InReadElementContentAsBinary);
	this.incReadLineInfo.Set(this.curNode.LineNo, this.curNode.LinePos);
	return true;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.MoveToNextContentNode = function (moveIfOnContentNode) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
			__loop0__: 
				while (true) {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								switch (Number(this.curNode.type)) {
									case 2: 
										__label0__ = "IL_52";
										continue __step0__;
									case 3: 
									case 4: 
									case 13: 
									case 14: 
										if (!moveIfOnContentNode) {
											return true;
										}
										__label1__ = "IL_6B";
										continue __step1__;
									case 5: 
										this.outerReader.ResolveEntity();
										__label1__ = "IL_6B";
										continue __step1__;
									case 7: 
									case 8: 
									case 16: 
										__label1__ = "IL_6B";
										continue __step1__;
								}
								break __loop0__;
								__label1__ = "IL_6B";
								continue __step1__;
								break;
							case "IL_6B":
								moveIfOnContentNode = false;
								if (!this.outerReader.Read()) {
									return false;
								}
								break __step1__;
						}
					}
				}
				return false;
				__label0__ = "IL_52";
				continue __step0__;
				break;
			case "IL_52":
				return !moveIfOnContentNode;
				break __step0__;
		}
	}
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.SetupReadContentAsBinaryState = function (inReadBinaryFunction) {
	if (this.parsingFunction === $asm07.System.Xml.XmlTextReaderImpl.ParsingFunction.PartialTextValue) {
		this.incReadState = $asm07.System.Xml.XmlTextReaderImpl.IncrementalReadState.ReadContentAsBinary_OnPartialValue;
	} else {
		this.incReadState = $asm07.System.Xml.XmlTextReaderImpl.IncrementalReadState.ReadContentAsBinary_OnCachedValue;
		this.nextNextParsingFunction = this.nextParsingFunction;
		this.nextParsingFunction = this.parsingFunction;
	}
	this.readValueOffset = 0;
	this.parsingFunction = inReadBinaryFunction;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.SetupFromParserContext = function (context, settings) {
	var xmlNameTable = settings.NameTable;
	this.nameTableFromSettings = (xmlNameTable !== null);
	if (context.NamespaceManager !== null) {
		if (!((xmlNameTable === null) || (xmlNameTable === context.NamespaceManager.NameTable))) {
			throw JSIL.New(System.Xml.XmlException, "_ctor$1", ["Xml_NametableMismatch"]);
		}
		this.namespaceManager = context.NamespaceManager;
		this.xmlContext.defaultNamespace = this.namespaceManager.LookupNamespace(System.String.Empty);
		xmlNameTable = this.namespaceManager.NameTable;
	} else if (context.NameTable !== null) {
		if (!((xmlNameTable === null) || (xmlNameTable === context.NameTable))) {
			throw JSIL.New(System.Xml.XmlException, "_ctor$7", ["Xml_NametableMismatch", System.String.Empty]);
		}
		xmlNameTable = context.NameTable;
	} else if (xmlNameTable === null) {
		xmlNameTable = new System.Xml.NameTable();
	}
	this.nameTable = xmlNameTable;
	if (this.namespaceManager === null) {
		this.namespaceManager = new System.Xml.XmlNamespaceManager(xmlNameTable);
	}
	this.xmlContext.xmlSpace = context.XmlSpace;
	this.xmlContext.xmlLang = context.XmlLang;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.AddDefaultAttributeDtd = function (defAttrInfo, definedInDtd, nameSortedNodeData) {
	if (defAttrInfo.IDtdAttributeInfo_Prefix.length > 0) {
		this.attrNeedNamespaceLookup = true;
	}
	var localName = defAttrInfo.IDtdAttributeInfo_LocalName;
	var prefix = defAttrInfo.IDtdAttributeInfo_Prefix;
	if (nameSortedNodeData !== null) {
		if (System.Array.BinarySearch$b1$1(System.Object)(nameSortedNodeData, defAttrInfo, $asm07.System.Xml.XmlTextReaderImpl.DtdDefaultAttributeInfoToNodeDataComparer.Instance) >= 0) {
			return false;
		}
	} else {
	__loop0__: 
		for (var i = (this.index + 1); i < ((this.index + 1) + this.attrCount); ++i) {
			if (!((this.nodes[i].localName !== localName) || (this.nodes[i].prefix !== prefix))) {
				return false;
			}
		}
	}
	var nodeData = this.AddDefaultAttributeInternal(
		defAttrInfo.IDtdAttributeInfo_LocalName, 
		null, 
		defAttrInfo.IDtdAttributeInfo_Prefix, 
		defAttrInfo.IDtdDefaultAttributeInfo_DefaultValueExpanded, 
		defAttrInfo.IDtdAttributeInfo_LineNumber, 
		defAttrInfo.IDtdAttributeInfo_LinePosition, 
		defAttrInfo.IDtdDefaultAttributeInfo_ValueLineNumber, 
		defAttrInfo.IDtdDefaultAttributeInfo_ValueLinePosition, 
		defAttrInfo.IDtdAttributeInfo_IsXmlAttribute
	);
	return (nodeData !== null);
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.AddDefaultAttributeInternal = function (localName, ns, prefix, value, lineNo, linePos, valueLineNo, valueLinePos, isXmlAttribute) {
	var nodeData = this.AddAttribute$1(localName, prefix, (prefix.length > 0) ? null : localName);
	if (ns !== null) {
		nodeData.ns = ns;
	}
	nodeData.SetValue$0(value);
	nodeData.IsDefaultAttribute = true;
	nodeData.lineInfo.Set(lineNo, linePos);
	nodeData.lineInfo2.Set(valueLineNo, valueLinePos);
	if (nodeData.prefix.length === 0) {
		if ($asm07.System.Xml.Ref.Equal(nodeData.localName, this.XmlNs)) {
			this.OnDefaultNamespaceDecl(nodeData);
			if (!(this.attrNeedNamespaceLookup || (this.nodes[this.index].prefix.length !== 0))) {
				this.nodes[this.index].ns = this.xmlContext.defaultNamespace;
			}
		}
	} else if ($asm07.System.Xml.Ref.Equal(nodeData.prefix, this.XmlNs)) {
		this.OnNamespaceDecl(nodeData);
		if (!this.attrNeedNamespaceLookup) {
			var localName2 = nodeData.localName;
		__loop0__: 
			for (var i = this.index; i < ((this.index + this.attrCount) + 1); ++i) {
				if (this.nodes[i].prefix.Equals$1(localName2)) {
					this.nodes[i].ns = this.namespaceManager.LookupNamespace(localName2);
				}
			}
		}
	} else if (isXmlAttribute) {
		this.OnXmlReservedAttribute(nodeData);
	}
	this.fullAttrCleanup = true;
	return nodeData;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ReadContentAsBinary = function (buffer, index, count) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				if (this.incReadState === $asm07.System.Xml.XmlTextReaderImpl.IncrementalReadState.ReadContentAsBinary_End) {
					return 0;
				}
				this.incReadDecoder.SetNextOutputBuffer(buffer, index, count);
			__loop0__: 
				while (true) {
					var num = 0;
					try {
						num = this.curNode.CopyToBinary(this.incReadDecoder, this.readValueOffset);
					} catch ($exception) {
						if (JSIL.CheckType($exception, System.Xml.XmlException)) {
							var arg_36_0 = $exception;
							this.curNode.AdjustLineInfo(this.readValueOffset, this.ps.eolNormalized, /* ref */ new JSIL.MemberReference(this, "incReadLineInfo"));
							this.ReThrow(arg_36_0, this.incReadLineInfo.lineNo, this.incReadLineInfo.linePos);
						} else {
							throw $exception;
						}
					}
					this.readValueOffset += num;
					if (this.incReadDecoder.IsFull) {
						break __loop0__;
					}
					if (this.incReadState === $asm07.System.Xml.XmlTextReaderImpl.IncrementalReadState.ReadContentAsBinary_OnPartialValue) {
						this.curNode.SetValue$0(System.String.Empty);
						var flag = false;
						var num2 = new JSIL.Variable(0);
						var num3 = new JSIL.Variable(0);
					__loop1__: 
						while (!this.incReadDecoder.IsFull && !flag) {
							var num4 = new JSIL.Variable(0);
							this.incReadLineInfo.Set(this.ps.LineNo, this.ps.LinePos);
							flag = this.ParseText$1(/* ref */ num2, /* ref */ num3, /* ref */ num4);
							try {
								num = this.incReadDecoder.Decode$0(this.ps.chars, num2.value, (num3.value - num2.value));
							} catch ($exception) {
								if (JSIL.CheckType($exception, System.Xml.XmlException)) {
									var arg_114_0 = $exception;
									this.ReThrow(arg_114_0, this.incReadLineInfo.lineNo, this.incReadLineInfo.linePos);
								} else {
									throw $exception;
								}
							}
							num2.value += num;
						}
						this.incReadState = flag ? $asm07.System.Xml.XmlTextReaderImpl.IncrementalReadState.ReadContentAsBinary_OnCachedValue : $asm07.System.Xml.XmlTextReaderImpl.IncrementalReadState.ReadContentAsBinary_OnPartialValue;
						this.readValueOffset = 0;
						if (this.incReadDecoder.IsFull) {
							__label0__ = "Block_8";
							continue __step0__;
						}
					}
					var inReadBinaryFunction = this.parsingFunction;
					this.parsingFunction = this.nextParsingFunction;
					this.nextParsingFunction = this.nextNextParsingFunction;
					if (!this.MoveToNextContentNode(true)) {
						__label0__ = "Block_9";
						continue __step0__;
					}
					this.SetupReadContentAsBinaryState(inReadBinaryFunction);
					this.incReadLineInfo.Set(this.curNode.LineNo, this.curNode.LinePos);
				}
				return this.incReadDecoder.DecodedCount;
				__label0__ = "Block_8";
				continue __step0__;
				break;
			case "Block_8":
				this.curNode.SetValue$1(this.ps.chars, num2.value, (num3.value - num2.value));
				$asm07.System.Xml.XmlTextReaderImpl.AdjustLineInfo$0(
					this.ps.chars, 
					(num2.value - num), 
					num2.value, 
					this.ps.eolNormalized, 
					/* ref */ new JSIL.MemberReference(this, "incReadLineInfo")
				);
				this.curNode.SetLineInfo(this.incReadLineInfo.lineNo, this.incReadLineInfo.linePos);
				return this.incReadDecoder.DecodedCount;
				__label0__ = "Block_9";
				continue __step0__;
				break;
			case "Block_9":
				this.SetupReadContentAsBinaryState(inReadBinaryFunction);
				this.incReadState = $asm07.System.Xml.XmlTextReaderImpl.IncrementalReadState.ReadContentAsBinary_End;
				return this.incReadDecoder.DecodedCount;
				break __step0__;
		}
	}
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.ReadElementContentAsBinary = function (buffer, index, count) {
	if (count === 0) {
		return 0;
	}
	var num = this.ReadContentAsBinary(buffer, index, count);
	if (num > 0) {
		return num;
	}
	if (this.curNode.type !== System.Xml.XmlNodeType.EndElement) {
		throw JSIL.New(System.Xml.XmlException, "_ctor$9", ["Xml_InvalidNodeType", this.curNode.type.toString(), this]);
	}
	this.parsingFunction = this.nextParsingFunction;
	this.nextParsingFunction = this.nextNextParsingFunction;
	this.outerReader.Read();
	return 0;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.InitBase64Decoder = function () {
	if (this.base64Decoder === null) {
		this.base64Decoder = new $asm07.System.Xml.Base64Decoder();
	} else {
		this.base64Decoder.Reset();
	}
	this.incReadDecoder = this.base64Decoder;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.InitBinHexDecoder = function () {
	if (this.binHexDecoder === null) {
		this.binHexDecoder = new $asm07.System.Xml.BinHexDecoder();
	} else {
		this.binHexDecoder.Reset();
	}
	this.incReadDecoder = this.binHexDecoder;
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.UriEqual = function (uri1, uri1Str, uri2Str, resolver) {
	if (resolver === null) {
		return uri1Str == uri2Str;
	}
	if (System.Uri.op_Equality(uri1, null)) {
		uri1 = resolver.ResolveUri(null, uri1Str);
	}
	var obj = resolver.ResolveUri(null, uri2Str);
	return uri1.Equals(obj);
};
$asm07.System.Xml.XmlTextReaderImpl.prototype.RegisterConsumedCharacters = function (characters, inEntityReference) {
	if (this.maxCharactersInDocument > 0) {
		var num = (this.charactersInDocument + characters);
		if (num < this.charactersInDocument) {
			this.ThrowWithoutLineInfo$1("Xml_LimitExceeded", "MaxCharactersInDocument");
		} else {
			this.charactersInDocument = num;
		}
		if (this.charactersInDocument > this.maxCharactersInDocument) {
			this.ThrowWithoutLineInfo$1("Xml_LimitExceeded", "MaxCharactersInDocument");
		}
	}
	if (!((this.maxCharactersFromEntities <= 0) || !inEntityReference)) {
		var num2 = (this.charactersFromEntities + characters);
		if (num2 < this.charactersFromEntities) {
			this.ThrowWithoutLineInfo$1("Xml_LimitExceeded", "MaxCharactersFromEntities");
		} else {
			this.charactersFromEntities = num2;
		}
		if (this.charactersFromEntities > this.maxCharactersFromEntities) {
			this.ThrowWithoutLineInfo$1("Xml_LimitExceeded", "MaxCharactersFromEntities");
		}
	}
};
$asm07.System.Xml.XmlTextReaderImpl.AdjustLineInfo$0 = JSIL.UntranslatableFunction("System.Void System.Xml.XmlTextReaderImpl::AdjustLineInfo(System.Char[],System.Int32,System.Int32,System.Boolean,System.Xml.LineInfo&)");
$asm07.System.Xml.XmlTextReaderImpl.AdjustLineInfo$1 = JSIL.UntranslatableFunction("System.Void System.Xml.XmlTextReaderImpl::AdjustLineInfo(System.String,System.Int32,System.Int32,System.Boolean,System.Xml.LineInfo&)");
$asm07.System.Xml.XmlTextReaderImpl.StripSpaces$0 = function (value) {
	var length = value.length;
	if (length <= 0) {
		return System.String.Empty;
	}
	var num = 0;
	var stringBuilder = null;
__loop0__: 
	while ((value[num]) === " ") {
		++num;
		if (num === length) {
			return " ";
		}
	}
__loop1__: 
	for (var i = num; i < length; ++i) {
		if ((value[i]) === " ") {
		__loop2__: 
			for (var num2 = (i + 1); (num2 < length) && ((value[num2]) === " "); ++num2) {
			}
			if (num2 === length) {
				if (stringBuilder === null) {
					return value.Substring$1(num, (i - num));
				}
				stringBuilder.Append$3(value, num, (i - num));
				return stringBuilder.toString();
			} else if (num2 > (i + 1)) {
				if (stringBuilder === null) {
					stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$1", [length]);
				}
				stringBuilder.Append$3(value, num, ((i - num) + 1));
				num = num2;
				i = (num2 - 1);
			}
		}
	}
	if (stringBuilder !== null) {
		if (i > num) {
			stringBuilder.Append$3(value, num, (i - num));
		}
		return stringBuilder.toString();
	}
	if (num !== 0) {
		return value.Substring$1(num, (length - num));
	}
	return value;
};
$asm07.System.Xml.XmlTextReaderImpl.StripSpaces$1 = function (value, index, /* ref */ len) {
	var c = 0;
	if (len.value <= 0) {
		return;
	}
	var num = index;
	var num2 = (index + len.value);
__loop0__: 
	while (value[num] === " ") {
		++num;
		if (num === num2) {
			len.value = 1;
			return;
		}
	}
	var num3 = (num - index);
__loop1__: 
	for (var i = num; i < num2; ++i) {
		if ((c = value[i]) === " ") {
		__loop2__: 
			for (var num4 = (i + 1); (num4 < num2) && (value[num4] === " "); ++num4) {
			}
			if (num4 === num2) {
				num3 += (num4 - i);
				break __loop1__;
			}
			if (num4 > (i + 1)) {
				num3 += ((num4 - i) - 1);
				i = (num4 - 1);
			}
		}
		value[(i - num3)] = c;
	}
	len.value -= num3;
};
$asm07.System.Xml.XmlTextReaderImpl.BlockCopyChars = function (src, srcOffset, dst, dstOffset, count) {
	System.Array.Copy$1(
		src, 
		srcOffset, 
		dst, 
		dstOffset, 
		count
	);
};
$asm07.System.Xml.XmlTextReaderImpl.BlockCopy = function (src, srcOffset, dst, dstOffset, count) {
	System.Array.Copy$1(
		src, 
		srcOffset, 
		dst, 
		dstOffset, 
		count
	);
};
JSIL.OverloadedMethod($asm07.System.Xml.XmlTextReaderImpl.prototype, "_ctor", [
		["_ctor$0", [System.Xml.XmlResolver, System.Xml.XmlReaderSettings, System.Xml.XmlParserContext]], 
		["_ctor$1", [System.IO.Stream, System.Array.Of(System.Byte), System.Int32, System.Xml.XmlReaderSettings, System.Uri, System.String, System.Xml.XmlParserContext, System.Boolean]], 
		["_ctor$2", [System.IO.TextReader, System.Xml.XmlReaderSettings, System.String, System.Xml.XmlParserContext]]
	]);
JSIL.OverloadedMethod($asm07.System.Xml.XmlTextReaderImpl.prototype, "GetAttribute", [
		["GetAttribute$0", [System.String]], 
		["GetAttribute$1", [System.String, System.String]], 
		["GetAttribute$2", [System.Int32]]
	]);
JSIL.OverloadedMethod($asm07.System.Xml.XmlTextReaderImpl.prototype, "MoveToAttribute", [
		["MoveToAttribute$0", [System.String]], 
		["MoveToAttribute$1", [System.String, System.String]], 
		["MoveToAttribute$2", [System.Int32]]
	]);
JSIL.OverloadedMethod($asm07.System.Xml.XmlTextReaderImpl.prototype, "Close", [
		["Close$0", []], 
		["Close$1", [System.Boolean]]
	]);
JSIL.OverloadedMethod($asm07.System.Xml.XmlTextReaderImpl.prototype, "LookupNamespace", [
		["LookupNamespace$0", [System.String]], 
		["LookupNamespace$1", [$asm07.System.Xml.XmlTextReaderImpl.NodeData]]
	]);
JSIL.OverloadedMethod($asm07.System.Xml.XmlTextReaderImpl.prototype, "Throw", [
		["Throw$0", [System.Int32, System.String, System.String]], 
		["Throw$1", [System.Int32, System.String, System.Array.Of(System.String)]], 
		["Throw$2", [System.Int32, System.String]], 
		["Throw$3", [System.String]], 
		["Throw$4", [System.String, System.Int32, System.Int32]], 
		["Throw$5", [System.String, System.String]], 
		["Throw$6", [System.String, System.String, System.Int32, System.Int32]], 
		["Throw$7", [System.String, System.Array.Of(System.String)]], 
		["Throw$8", [System.String, System.String, System.Exception]], 
		["Throw$9", [System.String, System.Array.Of(System.String), System.Exception]], 
		["Throw$10", [System.Exception]]
	]);
JSIL.OverloadedMethod($asm07.System.Xml.XmlTextReaderImpl.prototype, "ThrowWithoutLineInfo", [
		["ThrowWithoutLineInfo$0", [System.String]], 
		["ThrowWithoutLineInfo$1", [System.String, System.String]], 
		["ThrowWithoutLineInfo$2", [System.String, System.Array.Of(System.String), System.Exception]]
	]);
JSIL.OverloadedMethod($asm07.System.Xml.XmlTextReaderImpl.prototype, "InitStreamInput", [
		["InitStreamInput$0", [System.Uri, System.IO.Stream, System.Text.Encoding]], 
		["InitStreamInput$1", [System.Uri, System.String, System.IO.Stream, System.Array.Of(System.Byte), System.Int32, System.Text.Encoding]]
	]);
JSIL.OverloadedMethod($asm07.System.Xml.XmlTextReaderImpl.prototype, "InitTextReaderInput", [
		["InitTextReaderInput$0", [System.String, System.IO.TextReader]], 
		["InitTextReaderInput$1", [System.String, System.Uri, System.IO.TextReader]]
	]);
JSIL.OverloadedMethod($asm07.System.Xml.XmlTextReaderImpl.prototype, "ParseText", [
		["ParseText$0", []], 
		["ParseText$1", [JSIL.Reference.Of(System.Int32), JSIL.Reference.Of(System.Int32), JSIL.Reference.Of(System.Int32)]]
	]);
JSIL.OverloadedMethod($asm07.System.Xml.XmlTextReaderImpl.prototype, "ParsePI", [
		["ParsePI$0", []], 
		["ParsePI$1", [$asm07.System.Xml.BufferBuilder]]
	]);
JSIL.OverloadedMethod($asm07.System.Xml.XmlTextReaderImpl.prototype, "ParseCDataOrComment", [
		["ParseCDataOrComment$0", [System.Xml.XmlNodeType]], 
		["ParseCDataOrComment$1", [System.Xml.XmlNodeType, JSIL.Reference.Of(System.Int32), JSIL.Reference.Of(System.Int32)]]
	]);
JSIL.OverloadedMethod($asm07.System.Xml.XmlTextReaderImpl.prototype, "ParseQName", [
		["ParseQName$0", [JSIL.Reference.Of(System.Int32)]], 
		["ParseQName$1", [System.Boolean, System.Int32, JSIL.Reference.Of(System.Int32)]]
	]);
JSIL.OverloadedMethod($asm07.System.Xml.XmlTextReaderImpl.prototype, "AddAttribute", [
		["AddAttribute$0", [System.Int32, System.Int32]], 
		["AddAttribute$1", [System.String, System.String, System.String]]
	]);
JSIL.OverloadedMethod($asm07.System.Xml.XmlTextReaderImpl.prototype, "ThrowUnexpectedToken", [
		["ThrowUnexpectedToken$0", [System.Int32, System.String]], 
		["ThrowUnexpectedToken$1", [System.String]], 
		["ThrowUnexpectedToken$2", [System.Int32, System.String, System.String]], 
		["ThrowUnexpectedToken$3", [System.String, System.String]]
	]);
JSIL.OverloadedMethod($asm07.System.Xml.XmlTextReaderImpl.prototype, "ParseUnexpectedToken", [
		["ParseUnexpectedToken$0", [System.Int32]], 
		["ParseUnexpectedToken$1", []]
	]);
JSIL.OverloadedMethod($asm07.System.Xml.XmlTextReaderImpl, "AdjustLineInfo", [
		["AdjustLineInfo$0", [System.Array.Of(System.Char), System.Int32, System.Int32, System.Boolean, JSIL.Reference.Of($asm07.System.Xml.LineInfo)]], 
		["AdjustLineInfo$1", [System.String, System.Int32, System.Int32, System.Boolean, JSIL.Reference.Of($asm07.System.Xml.LineInfo)]]
	]);
JSIL.OverloadedMethod($asm07.System.Xml.XmlTextReaderImpl, "StripSpaces", [
		["StripSpaces$0", [System.String]], 
		["StripSpaces$1", [System.Array.Of(System.Char), System.Int32, JSIL.Reference.Of(System.Int32)]]
	]);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.prototype, "Settings", 
	$asm07.System.Xml.XmlTextReaderImpl.prototype.get_Settings, null);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.prototype, "NodeType", 
	$asm07.System.Xml.XmlTextReaderImpl.prototype.get_NodeType, null);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.prototype, "Name", 
	$asm07.System.Xml.XmlTextReaderImpl.prototype.get_Name, null);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.prototype, "LocalName", 
	$asm07.System.Xml.XmlTextReaderImpl.prototype.get_LocalName, null);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.prototype, "NamespaceURI", 
	$asm07.System.Xml.XmlTextReaderImpl.prototype.get_NamespaceURI, null);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.prototype, "Prefix", 
	$asm07.System.Xml.XmlTextReaderImpl.prototype.get_Prefix, null);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.prototype, "Value", 
	$asm07.System.Xml.XmlTextReaderImpl.prototype.get_Value, null);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.prototype, "Depth", 
	$asm07.System.Xml.XmlTextReaderImpl.prototype.get_Depth, null);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.prototype, "BaseURI", 
	$asm07.System.Xml.XmlTextReaderImpl.prototype.get_BaseURI, null);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.prototype, "IsEmptyElement", 
	$asm07.System.Xml.XmlTextReaderImpl.prototype.get_IsEmptyElement, null);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.prototype, "IsDefault", 
	$asm07.System.Xml.XmlTextReaderImpl.prototype.get_IsDefault, null);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.prototype, "XmlSpace", 
	$asm07.System.Xml.XmlTextReaderImpl.prototype.get_XmlSpace, null);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.prototype, "XmlLang", 
	$asm07.System.Xml.XmlTextReaderImpl.prototype.get_XmlLang, null);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.prototype, "ReadState", 
	$asm07.System.Xml.XmlTextReaderImpl.prototype.get_ReadState, null);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.prototype, "EOF", 
	$asm07.System.Xml.XmlTextReaderImpl.prototype.get_EOF, null);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.prototype, "NameTable", 
	$asm07.System.Xml.XmlTextReaderImpl.prototype.get_NameTable, null);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.prototype, "CanResolveEntity", 
	$asm07.System.Xml.XmlTextReaderImpl.prototype.get_CanResolveEntity, null);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.prototype, "AttributeCount", 
	$asm07.System.Xml.XmlTextReaderImpl.prototype.get_AttributeCount, null);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.prototype, "CanReadBinaryContent", 
	$asm07.System.Xml.XmlTextReaderImpl.prototype.get_CanReadBinaryContent, null);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.prototype, "CanReadValueChunk", 
	$asm07.System.Xml.XmlTextReaderImpl.prototype.get_CanReadValueChunk, null);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.prototype, "LineNumber", 
	$asm07.System.Xml.XmlTextReaderImpl.prototype.get_LineNumber, null);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.prototype, "LinePosition", 
	$asm07.System.Xml.XmlTextReaderImpl.prototype.get_LinePosition, null);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.prototype, "DtdParserProxy_NameTable", 
	$asm07.System.Xml.XmlTextReaderImpl.prototype.get_DtdParserProxy_NameTable, null);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.prototype, "DtdParserProxy_NamespaceResolver", 
	$asm07.System.Xml.XmlTextReaderImpl.prototype.get_DtdParserProxy_NamespaceResolver, null);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.prototype, "DtdParserProxy_DtdValidation", 
	$asm07.System.Xml.XmlTextReaderImpl.prototype.get_DtdParserProxy_DtdValidation, null);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.prototype, "DtdParserProxy_Normalization", 
	$asm07.System.Xml.XmlTextReaderImpl.prototype.get_DtdParserProxy_Normalization, null);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.prototype, "DtdParserProxy_Namespaces", 
	$asm07.System.Xml.XmlTextReaderImpl.prototype.get_DtdParserProxy_Namespaces, null);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.prototype, "DtdParserProxy_V1CompatibilityMode", 
	$asm07.System.Xml.XmlTextReaderImpl.prototype.get_DtdParserProxy_V1CompatibilityMode, null);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.prototype, "DtdParserProxy_BaseUri", 
	$asm07.System.Xml.XmlTextReaderImpl.prototype.get_DtdParserProxy_BaseUri, null);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.prototype, "DtdParserProxy_IsEof", 
	$asm07.System.Xml.XmlTextReaderImpl.prototype.get_DtdParserProxy_IsEof, null);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.prototype, "DtdParserProxy_ParsingBuffer", 
	$asm07.System.Xml.XmlTextReaderImpl.prototype.get_DtdParserProxy_ParsingBuffer, null);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.prototype, "DtdParserProxy_ParsingBufferLength", 
	$asm07.System.Xml.XmlTextReaderImpl.prototype.get_DtdParserProxy_ParsingBufferLength, null);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.prototype, "DtdParserProxy_CurrentPosition", 
	$asm07.System.Xml.XmlTextReaderImpl.prototype.get_DtdParserProxy_CurrentPosition, $asm07.System.Xml.XmlTextReaderImpl.prototype.set_DtdParserProxy_CurrentPosition);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.prototype, "DtdParserProxy_EntityStackLength", 
	$asm07.System.Xml.XmlTextReaderImpl.prototype.get_DtdParserProxy_EntityStackLength, null);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.prototype, "DtdParserProxy_IsEntityEolNormalized", 
	$asm07.System.Xml.XmlTextReaderImpl.prototype.get_DtdParserProxy_IsEntityEolNormalized, null);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.prototype, "DtdParserProxy_LineNo", 
	$asm07.System.Xml.XmlTextReaderImpl.prototype.get_DtdParserProxy_LineNo, null);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.prototype, "DtdParserProxy_LineStartPosition", 
	$asm07.System.Xml.XmlTextReaderImpl.prototype.get_DtdParserProxy_LineStartPosition, null);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.prototype, "InAttributeValueIterator", 
	$asm07.System.Xml.XmlTextReaderImpl.prototype.get_InAttributeValueIterator, null);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.prototype, "InEntity", 
	$asm07.System.Xml.XmlTextReaderImpl.prototype.get_InEntity, null);
Object.defineProperty($asm07.System.Xml.XmlTextReaderImpl, "MaxBytesToMove", {
		"value": 128}
);
Object.defineProperty($asm07.System.Xml.XmlTextReaderImpl, "ApproxXmlDeclLength", {
		"value": 80}
);
Object.defineProperty($asm07.System.Xml.XmlTextReaderImpl, "NodesInitialSize", {
		"value": 8}
);
Object.defineProperty($asm07.System.Xml.XmlTextReaderImpl, "InitialAttributesCount", {
		"value": 4}
);
Object.defineProperty($asm07.System.Xml.XmlTextReaderImpl, "InitialParsingStateStackSize", {
		"value": 2}
);
Object.defineProperty($asm07.System.Xml.XmlTextReaderImpl, "InitialParsingStatesDepth", {
		"value": 2}
);
Object.defineProperty($asm07.System.Xml.XmlTextReaderImpl, "DtdChidrenInitialSize", {
		"value": 2}
);
Object.defineProperty($asm07.System.Xml.XmlTextReaderImpl, "MaxByteSequenceLen", {
		"value": 6}
);
Object.defineProperty($asm07.System.Xml.XmlTextReaderImpl, "MaxAttrDuplWalkCount", {
		"value": 250}
);
Object.defineProperty($asm07.System.Xml.XmlTextReaderImpl, "MinWhitespaceLookahedCount", {
		"value": 4096}
);
Object.defineProperty($asm07.System.Xml.XmlTextReaderImpl, "XmlDeclarationBegining", {
		"value": "<?xml"}
);
$asm07.System.Xml.XmlTextReaderImpl.prototype.parsingFunction = 0;
$asm07.System.Xml.XmlTextReaderImpl.prototype.nextParsingFunction = 0;
$asm07.System.Xml.XmlTextReaderImpl.prototype.nextNextParsingFunction = 0;
$asm07.System.Xml.XmlTextReaderImpl.prototype.nodes = null;
$asm07.System.Xml.XmlTextReaderImpl.prototype.curNode = null;
$asm07.System.Xml.XmlTextReaderImpl.prototype.index = 0;
$asm07.System.Xml.XmlTextReaderImpl.prototype.curAttrIndex = 0;
$asm07.System.Xml.XmlTextReaderImpl.prototype.attrCount = 0;
$asm07.System.Xml.XmlTextReaderImpl.prototype.attrHashtable = 0;
$asm07.System.Xml.XmlTextReaderImpl.prototype.attrDuplWalkCount = 0;
$asm07.System.Xml.XmlTextReaderImpl.prototype.attrNeedNamespaceLookup = false;
$asm07.System.Xml.XmlTextReaderImpl.prototype.fullAttrCleanup = false;
$asm07.System.Xml.XmlTextReaderImpl.prototype.attrDuplSortingArray = null;
$asm07.System.Xml.XmlTextReaderImpl.prototype.nameTable = null;
$asm07.System.Xml.XmlTextReaderImpl.prototype.nameTableFromSettings = false;
$asm07.System.Xml.XmlTextReaderImpl.prototype.xmlResolver = null;
$asm07.System.Xml.XmlTextReaderImpl.prototype.normalize = false;
$asm07.System.Xml.XmlTextReaderImpl.prototype.supportNamespaces = false;
$asm07.System.Xml.XmlTextReaderImpl.prototype.whitespaceHandling = 0;
$asm07.System.Xml.XmlTextReaderImpl.prototype.dtdProcessing = 0;
$asm07.System.Xml.XmlTextReaderImpl.prototype.ignorePIs = false;
$asm07.System.Xml.XmlTextReaderImpl.prototype.ignoreComments = false;
$asm07.System.Xml.XmlTextReaderImpl.prototype.checkCharacters = false;
$asm07.System.Xml.XmlTextReaderImpl.prototype.lineNumberOffset = 0;
$asm07.System.Xml.XmlTextReaderImpl.prototype.linePositionOffset = 0;
$asm07.System.Xml.XmlTextReaderImpl.prototype.closeInput = false;
$asm07.System.Xml.XmlTextReaderImpl.prototype.maxCharactersInDocument = 0;
$asm07.System.Xml.XmlTextReaderImpl.prototype.maxCharactersFromEntities = 0;
$asm07.System.Xml.XmlTextReaderImpl.prototype.v1Compat = false;
$asm07.System.Xml.XmlTextReaderImpl.prototype.namespaceManager = null;
$asm07.System.Xml.XmlTextReaderImpl.prototype.lastPrefix = null;
$asm07.System.Xml.XmlTextReaderImpl.prototype.xmlContext = null;
$asm07.System.Xml.XmlTextReaderImpl.prototype.parsingStatesStack = null;
$asm07.System.Xml.XmlTextReaderImpl.prototype.parsingStatesStackTop = 0;
$asm07.System.Xml.XmlTextReaderImpl.prototype.reportedBaseUri = null;
$asm07.System.Xml.XmlTextReaderImpl.prototype.reportedEncoding = null;
$asm07.System.Xml.XmlTextReaderImpl.prototype.dtdInfo = null;
$asm07.System.Xml.XmlTextReaderImpl.prototype.fragmentType = 0;
$asm07.System.Xml.XmlTextReaderImpl.prototype.fragmentParserContext = null;
$asm07.System.Xml.XmlTextReaderImpl.prototype.incReadDecoder = null;
$asm07.System.Xml.XmlTextReaderImpl.prototype.incReadState = 0;
$asm07.System.Xml.XmlTextReaderImpl.prototype.binHexDecoder = null;
$asm07.System.Xml.XmlTextReaderImpl.prototype.base64Decoder = null;
$asm07.System.Xml.XmlTextReaderImpl.prototype.addDefaultAttributesAndNormalize = false;
$asm07.System.Xml.XmlTextReaderImpl.prototype.stringBuilder = null;
$asm07.System.Xml.XmlTextReaderImpl.prototype.rootElementParsed = false;
$asm07.System.Xml.XmlTextReaderImpl.prototype.standalone = false;
$asm07.System.Xml.XmlTextReaderImpl.prototype.nextEntityId = 0;
$asm07.System.Xml.XmlTextReaderImpl.prototype.parsingMode = 0;
$asm07.System.Xml.XmlTextReaderImpl.prototype.readState = 0;
$asm07.System.Xml.XmlTextReaderImpl.prototype.documentStartBytePos = 0;
$asm07.System.Xml.XmlTextReaderImpl.prototype.readValueOffset = 0;
$asm07.System.Xml.XmlTextReaderImpl.prototype.charactersInDocument = 0;
$asm07.System.Xml.XmlTextReaderImpl.prototype.charactersFromEntities = 0;
$asm07.System.Xml.XmlTextReaderImpl.prototype.currentEntities = null;
$asm07.System.Xml.XmlTextReaderImpl.prototype.outerReader = null;
$asm07.System.Xml.XmlTextReaderImpl.prototype.Xml = null;
$asm07.System.Xml.XmlTextReaderImpl.prototype.XmlNs = null;

$asm07.System.Xml.XmlTextReaderImpl.ParsingState.prototype.Clear = function () {
	this.chars = null;
	this.charPos = 0;
	this.charsUsed = 0;
	this.encoding = null;
	this.stream = null;
	this.decoder = null;
	this.bytes = null;
	this.bytePos = 0;
	this.bytesUsed = 0;
	this.textReader = null;
	this.lineNo = 1;
	this.lineStartPos = -1;
	this.baseUriStr = System.String.Empty;
	this.baseUri = null;
	this.isEof = false;
	this.isStreamEof = false;
	this.eolNormalized = true;
};
$asm07.System.Xml.XmlTextReaderImpl.ParsingState.prototype.Close = function (closeInput) {
	if (closeInput) {
		if (this.stream !== null) {
			this.stream.Close();
			return;
		}
		if (this.textReader !== null) {
			this.textReader.Close();
		}
	}
};
$asm07.System.Xml.XmlTextReaderImpl.ParsingState.prototype.get_LineNo = function () {
	return this.lineNo;
};
$asm07.System.Xml.XmlTextReaderImpl.ParsingState.prototype.get_LinePos = function () {
	return (this.charPos - this.lineStartPos);
};
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.ParsingState.prototype, "LineNo", 
	$asm07.System.Xml.XmlTextReaderImpl.ParsingState.prototype.get_LineNo, null);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.ParsingState.prototype, "LinePos", 
	$asm07.System.Xml.XmlTextReaderImpl.ParsingState.prototype.get_LinePos, null);
$asm07.System.Xml.XmlTextReaderImpl.ParsingState.prototype.chars = null;
$asm07.System.Xml.XmlTextReaderImpl.ParsingState.prototype.charPos = 0;
$asm07.System.Xml.XmlTextReaderImpl.ParsingState.prototype.charsUsed = 0;
$asm07.System.Xml.XmlTextReaderImpl.ParsingState.prototype.encoding = null;
$asm07.System.Xml.XmlTextReaderImpl.ParsingState.prototype.appendMode = false;
$asm07.System.Xml.XmlTextReaderImpl.ParsingState.prototype.stream = null;
$asm07.System.Xml.XmlTextReaderImpl.ParsingState.prototype.decoder = null;
$asm07.System.Xml.XmlTextReaderImpl.ParsingState.prototype.bytes = null;
$asm07.System.Xml.XmlTextReaderImpl.ParsingState.prototype.bytePos = 0;
$asm07.System.Xml.XmlTextReaderImpl.ParsingState.prototype.bytesUsed = 0;
$asm07.System.Xml.XmlTextReaderImpl.ParsingState.prototype.textReader = null;
$asm07.System.Xml.XmlTextReaderImpl.ParsingState.prototype.lineNo = 0;
$asm07.System.Xml.XmlTextReaderImpl.ParsingState.prototype.lineStartPos = 0;
$asm07.System.Xml.XmlTextReaderImpl.ParsingState.prototype.baseUriStr = null;
$asm07.System.Xml.XmlTextReaderImpl.ParsingState.prototype.baseUri = null;
$asm07.System.Xml.XmlTextReaderImpl.ParsingState.prototype.isEof = false;
$asm07.System.Xml.XmlTextReaderImpl.ParsingState.prototype.isStreamEof = false;
$asm07.System.Xml.XmlTextReaderImpl.ParsingState.prototype.entity = null;
$asm07.System.Xml.XmlTextReaderImpl.ParsingState.prototype.entityId = 0;
$asm07.System.Xml.XmlTextReaderImpl.ParsingState.prototype.eolNormalized = false;

$asm07.System.Xml.XmlTextReaderImpl.XmlContext.prototype._ctor$0 = function () {
	System.Object.prototype._ctor.call(this);
	this.xmlSpace = System.Xml.XmlSpace.None;
	this.xmlLang = System.String.Empty;
	this.defaultNamespace = System.String.Empty;
	this.previousContext = null;
};
$asm07.System.Xml.XmlTextReaderImpl.XmlContext.prototype._ctor$1 = function (previousContext) {
	System.Object.prototype._ctor.call(this);
	this.xmlSpace = previousContext.xmlSpace;
	this.xmlLang = previousContext.xmlLang;
	this.defaultNamespace = previousContext.defaultNamespace;
	this.previousContext = previousContext;
};
JSIL.OverloadedMethod($asm07.System.Xml.XmlTextReaderImpl.XmlContext.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [$asm07.System.Xml.XmlTextReaderImpl.XmlContext]]
	]);
$asm07.System.Xml.XmlTextReaderImpl.XmlContext.prototype.xmlSpace = 0;
$asm07.System.Xml.XmlTextReaderImpl.XmlContext.prototype.xmlLang = null;
$asm07.System.Xml.XmlTextReaderImpl.XmlContext.prototype.defaultNamespace = null;
$asm07.System.Xml.XmlTextReaderImpl.XmlContext.prototype.previousContext = null;

$asm07.System.Xml.XmlTextReaderImpl.DtdParserProxy.prototype._ctor = function (reader) {
	System.Object.prototype._ctor.call(this);
	this.reader = reader;
};
$asm07.System.Xml.XmlTextReaderImpl.DtdParserProxy.prototype.IDtdParserAdapter_get_NameTable = function () {
	return this.reader.DtdParserProxy_NameTable;
};
$asm07.System.Xml.XmlTextReaderImpl.DtdParserProxy.prototype.IDtdParserAdapter_get_NamespaceResolver = function () {
	return this.reader.DtdParserProxy_NamespaceResolver;
};
$asm07.System.Xml.XmlTextReaderImpl.DtdParserProxy.prototype.IDtdParserAdapter_get_BaseUri = function () {
	return this.reader.DtdParserProxy_BaseUri;
};
$asm07.System.Xml.XmlTextReaderImpl.DtdParserProxy.prototype.IDtdParserAdapter_get_IsEof = function () {
	return this.reader.DtdParserProxy_IsEof;
};
$asm07.System.Xml.XmlTextReaderImpl.DtdParserProxy.prototype.IDtdParserAdapter_get_ParsingBuffer = function () {
	return this.reader.DtdParserProxy_ParsingBuffer;
};
$asm07.System.Xml.XmlTextReaderImpl.DtdParserProxy.prototype.IDtdParserAdapter_get_ParsingBufferLength = function () {
	return this.reader.DtdParserProxy_ParsingBufferLength;
};
$asm07.System.Xml.XmlTextReaderImpl.DtdParserProxy.prototype.IDtdParserAdapter_get_CurrentPosition = function () {
	return this.reader.DtdParserProxy_CurrentPosition;
};
$asm07.System.Xml.XmlTextReaderImpl.DtdParserProxy.prototype.IDtdParserAdapter_set_CurrentPosition = function (value) {
	this.reader.DtdParserProxy_CurrentPosition = value;
};
$asm07.System.Xml.XmlTextReaderImpl.DtdParserProxy.prototype.IDtdParserAdapter_get_EntityStackLength = function () {
	return this.reader.DtdParserProxy_EntityStackLength;
};
$asm07.System.Xml.XmlTextReaderImpl.DtdParserProxy.prototype.IDtdParserAdapter_get_IsEntityEolNormalized = function () {
	return this.reader.DtdParserProxy_IsEntityEolNormalized;
};
$asm07.System.Xml.XmlTextReaderImpl.DtdParserProxy.prototype.IDtdParserAdapter_OnNewLine = function (pos) {
	this.reader.DtdParserProxy_OnNewLine(pos);
};
$asm07.System.Xml.XmlTextReaderImpl.DtdParserProxy.prototype.IDtdParserAdapter_get_LineNo = function () {
	return this.reader.DtdParserProxy_LineNo;
};
$asm07.System.Xml.XmlTextReaderImpl.DtdParserProxy.prototype.IDtdParserAdapter_get_LineStartPosition = function () {
	return this.reader.DtdParserProxy_LineStartPosition;
};
$asm07.System.Xml.XmlTextReaderImpl.DtdParserProxy.prototype.IDtdParserAdapter_ReadData = function () {
	return this.reader.DtdParserProxy_ReadData();
};
$asm07.System.Xml.XmlTextReaderImpl.DtdParserProxy.prototype.IDtdParserAdapter_ParseNumericCharRef = function (internalSubsetBuilder) {
	return this.reader.DtdParserProxy_ParseNumericCharRef(internalSubsetBuilder);
};
$asm07.System.Xml.XmlTextReaderImpl.DtdParserProxy.prototype.IDtdParserAdapter_ParseNamedCharRef = function (expand, internalSubsetBuilder) {
	return this.reader.DtdParserProxy_ParseNamedCharRef(expand, internalSubsetBuilder);
};
$asm07.System.Xml.XmlTextReaderImpl.DtdParserProxy.prototype.IDtdParserAdapter_ParsePI = function (sb) {
	this.reader.DtdParserProxy_ParsePI(sb);
};
$asm07.System.Xml.XmlTextReaderImpl.DtdParserProxy.prototype.IDtdParserAdapter_ParseComment = function (sb) {
	this.reader.DtdParserProxy_ParseComment(sb);
};
$asm07.System.Xml.XmlTextReaderImpl.DtdParserProxy.prototype.IDtdParserAdapter_PushEntity = function (entity, /* ref */ entityId) {
	return this.reader.DtdParserProxy_PushEntity(entity, /* ref */ entityId);
};
$asm07.System.Xml.XmlTextReaderImpl.DtdParserProxy.prototype.IDtdParserAdapter_PopEntity = function (/* ref */ oldEntity, /* ref */ newEntityId) {
	return this.reader.DtdParserProxy_PopEntity(/* ref */ oldEntity, /* ref */ newEntityId);
};
$asm07.System.Xml.XmlTextReaderImpl.DtdParserProxy.prototype.IDtdParserAdapter_PushExternalSubset = function (systemId, publicId) {
	return this.reader.DtdParserProxy_PushExternalSubset(systemId, publicId);
};
$asm07.System.Xml.XmlTextReaderImpl.DtdParserProxy.prototype.IDtdParserAdapter_PushInternalDtd = function (baseUri, internalDtd) {
	this.reader.DtdParserProxy_PushInternalDtd(baseUri, internalDtd);
};
$asm07.System.Xml.XmlTextReaderImpl.DtdParserProxy.prototype.IDtdParserAdapter_Throw = function (e) {
	this.reader.DtdParserProxy_Throw(e);
};
$asm07.System.Xml.XmlTextReaderImpl.DtdParserProxy.prototype.IDtdParserAdapter_OnSystemId = function (systemId, keywordLineInfo, systemLiteralLineInfo) {
	this.reader.DtdParserProxy_OnSystemId(systemId, keywordLineInfo, systemLiteralLineInfo);
};
$asm07.System.Xml.XmlTextReaderImpl.DtdParserProxy.prototype.IDtdParserAdapter_OnPublicId = function (publicId, keywordLineInfo, publicLiteralLineInfo) {
	this.reader.DtdParserProxy_OnPublicId(publicId, keywordLineInfo, publicLiteralLineInfo);
};
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.DtdParserProxy.prototype, "IDtdParserAdapter_NameTable", 
	$asm07.System.Xml.XmlTextReaderImpl.DtdParserProxy.prototype.IDtdParserAdapter_get_NameTable, null);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.DtdParserProxy.prototype, "IDtdParserAdapter_NamespaceResolver", 
	$asm07.System.Xml.XmlTextReaderImpl.DtdParserProxy.prototype.IDtdParserAdapter_get_NamespaceResolver, null);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.DtdParserProxy.prototype, "IDtdParserAdapter_BaseUri", 
	$asm07.System.Xml.XmlTextReaderImpl.DtdParserProxy.prototype.IDtdParserAdapter_get_BaseUri, null);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.DtdParserProxy.prototype, "IDtdParserAdapter_IsEof", 
	$asm07.System.Xml.XmlTextReaderImpl.DtdParserProxy.prototype.IDtdParserAdapter_get_IsEof, null);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.DtdParserProxy.prototype, "IDtdParserAdapter_ParsingBuffer", 
	$asm07.System.Xml.XmlTextReaderImpl.DtdParserProxy.prototype.IDtdParserAdapter_get_ParsingBuffer, null);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.DtdParserProxy.prototype, "IDtdParserAdapter_ParsingBufferLength", 
	$asm07.System.Xml.XmlTextReaderImpl.DtdParserProxy.prototype.IDtdParserAdapter_get_ParsingBufferLength, null);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.DtdParserProxy.prototype, "IDtdParserAdapter_CurrentPosition", 
	$asm07.System.Xml.XmlTextReaderImpl.DtdParserProxy.prototype.IDtdParserAdapter_get_CurrentPosition, $asm07.System.Xml.XmlTextReaderImpl.DtdParserProxy.prototype.IDtdParserAdapter_set_CurrentPosition);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.DtdParserProxy.prototype, "IDtdParserAdapter_EntityStackLength", 
	$asm07.System.Xml.XmlTextReaderImpl.DtdParserProxy.prototype.IDtdParserAdapter_get_EntityStackLength, null);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.DtdParserProxy.prototype, "IDtdParserAdapter_IsEntityEolNormalized", 
	$asm07.System.Xml.XmlTextReaderImpl.DtdParserProxy.prototype.IDtdParserAdapter_get_IsEntityEolNormalized, null);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.DtdParserProxy.prototype, "IDtdParserAdapter_LineNo", 
	$asm07.System.Xml.XmlTextReaderImpl.DtdParserProxy.prototype.IDtdParserAdapter_get_LineNo, null);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.DtdParserProxy.prototype, "IDtdParserAdapter_LineStartPosition", 
	$asm07.System.Xml.XmlTextReaderImpl.DtdParserProxy.prototype.IDtdParserAdapter_get_LineStartPosition, null);
$asm07.System.Xml.XmlTextReaderImpl.DtdParserProxy.prototype.reader = null;

$asm07.System.Xml.XmlTextReaderImpl.NodeData.get_None = function () {
	if ($asm07.System.Xml.XmlTextReaderImpl.NodeData.s_None === null) {
		$asm07.System.Xml.XmlTextReaderImpl.NodeData.s_None = new $asm07.System.Xml.XmlTextReaderImpl.NodeData();
	}
	return $asm07.System.Xml.XmlTextReaderImpl.NodeData.s_None;
};
$asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
	this.Clear(System.Xml.XmlNodeType.None);
	this.xmlContextPushed = false;
};
$asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype.get_LineNo = function () {
	return this.lineInfo.lineNo;
};
$asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype.get_LinePos = function () {
	return this.lineInfo.linePos;
};
$asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype.get_IsEmptyElement = function () {
	return ((this.type === System.Xml.XmlNodeType.Element) && this.isEmptyOrDefault);
};
$asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype.set_IsEmptyElement = function (value) {
	this.isEmptyOrDefault = value;
};
$asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype.get_IsDefaultAttribute = function () {
	return ((this.type === System.Xml.XmlNodeType.Attribute) && this.isEmptyOrDefault);
};
$asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype.set_IsDefaultAttribute = function (value) {
	this.isEmptyOrDefault = value;
};
$asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype.get_ValueBuffered = function () {
	return (this.value === null);
};
$asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype.get_StringValue = function () {
	if (this.value === null) {
		this.value = JSIL.New(System.String, "_ctor$0", [this.chars, this.valueStartPos, this.valueLength]);
	}
	return this.value;
};
$asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype.TrimSpacesInValue = function () {
	if (this.ValueBuffered) {
		$asm07.System.Xml.XmlTextReaderImpl.StripSpaces$1(this.chars, this.valueStartPos, /* ref */ new JSIL.MemberReference(this, "valueLength"));
		return;
	}
	this.value = $asm07.System.Xml.XmlTextReaderImpl.StripSpaces$0(this.value);
};
$asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype.Clear = function (type) {
	this.type = type;
	this.ClearName();
	this.value = System.String.Empty;
	this.valueStartPos = -1;
	this.nameWPrefix = System.String.Empty;
	this.schemaType = null;
	this.typedValue = null;
};
$asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype.ClearName = function () {
	this.localName = System.String.Empty;
	this.prefix = System.String.Empty;
	this.ns = System.String.Empty;
	this.nameWPrefix = System.String.Empty;
};
$asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype.SetLineInfo = function (lineNo, linePos) {
	this.lineInfo.Set(lineNo, linePos);
};
$asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype.SetLineInfo2 = function (lineNo, linePos) {
	this.lineInfo2.Set(lineNo, linePos);
};
$asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype.SetValueNode$0 = function (type, value) {
	this.type = type;
	this.ClearName();
	this.value = value;
	this.valueStartPos = -1;
};
$asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype.SetValueNode$1 = function (type, chars, startPos, len) {
	this.type = type;
	this.ClearName();
	this.value = null;
	this.chars = chars;
	this.valueStartPos = startPos;
	this.valueLength = len;
};
$asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype.SetNamedNode$0 = function (type, localName) {
	this.SetNamedNode$1(type, localName, System.String.Empty, localName);
};
$asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype.SetNamedNode$1 = function (type, localName, prefix, nameWPrefix) {
	this.type = type;
	this.localName = localName;
	this.prefix = prefix;
	this.nameWPrefix = nameWPrefix;
	this.ns = System.String.Empty;
	this.value = System.String.Empty;
	this.valueStartPos = -1;
};
$asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype.SetValue$0 = function (value) {
	this.valueStartPos = -1;
	this.value = value;
};
$asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype.SetValue$1 = function (chars, startPos, len) {
	this.value = null;
	this.chars = chars;
	this.valueStartPos = startPos;
	this.valueLength = len;
};
$asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype.OnBufferInvalidated = function () {
	if (this.value === null) {
		this.value = JSIL.New(System.String, "_ctor$0", [this.chars, this.valueStartPos, this.valueLength]);
	}
	this.valueStartPos = -1;
};
$asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype.CopyTo$0 = function (valueOffset, sb) {
	if (this.value === null) {
		sb.Append$1(this.chars, (this.valueStartPos + valueOffset), (this.valueLength - valueOffset));
		return;
	}
	if (valueOffset <= 0) {
		sb.Append$2(this.value);
		return;
	}
	sb.Append$3(this.value, valueOffset, (this.value.length - valueOffset));
};
$asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype.CopyTo$1 = function (valueOffset, buffer, offset, length) {
	if (this.value === null) {
		var num = (this.valueLength - valueOffset);
		if (num > length) {
			num = length;
		}
		$asm07.System.Xml.XmlTextReaderImpl.BlockCopyChars(
			this.chars, 
			(this.valueStartPos + valueOffset), 
			buffer, 
			offset, 
			num
		);
		return num;
	}
	var num2 = (this.value.length - valueOffset);
	if (num2 > length) {
		num2 = length;
	}
	this.value.CopyTo(valueOffset, buffer, offset, num2);
	return num2;
};
$asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype.CopyToBinary = function (decoder, valueOffset) {
	if (this.value === null) {
		return decoder.Decode$0(this.chars, (this.valueStartPos + valueOffset), (this.valueLength - valueOffset));
	}
	return decoder.Decode$1(this.value, valueOffset, (this.value.length - valueOffset));
};
$asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype.AdjustLineInfo = function (valueOffset, isNormalized, /* ref */ lineInfo) {
	if (valueOffset === 0) {
		return;
	}
	if (this.valueStartPos !== -1) {
		$asm07.System.Xml.XmlTextReaderImpl.AdjustLineInfo$0(
			this.chars, 
			this.valueStartPos, 
			(this.valueStartPos + valueOffset), 
			isNormalized, 
			/* ref */ lineInfo
		);
		return;
	}
	$asm07.System.Xml.XmlTextReaderImpl.AdjustLineInfo$1(
		this.value, 
		0, 
		valueOffset, 
		isNormalized, 
		/* ref */ lineInfo
	);
};
$asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype.GetNameWPrefix = function (nt) {
	if (this.nameWPrefix !== null) {
		return this.nameWPrefix;
	}
	return this.CreateNameWPrefix(nt);
};
$asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype.CreateNameWPrefix = function (nt) {
	if (this.prefix.length === 0) {
		this.nameWPrefix = this.localName;
	} else {
		this.nameWPrefix = nt.Add$1((this.prefix + ":" + this.localName));
	}
	return this.nameWPrefix;
};
$asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype.IComparable_CompareTo = function (obj) {
	var nodeData = JSIL.TryCast(obj, $asm07.System.Xml.XmlTextReaderImpl.NodeData);
	if (nodeData === null) {
		return this.GetHashCode().CompareTo$1(nodeData.GetHashCode());
	}
	if (!$asm07.System.Xml.Ref.Equal(this.localName, nodeData.localName)) {
		return System.String.CompareOrdinal$0(this.localName, nodeData.localName);
	}
	if ($asm07.System.Xml.Ref.Equal(this.ns, nodeData.ns)) {
		return 0;
	}
	return System.String.CompareOrdinal$0(this.ns, nodeData.ns);
};
JSIL.OverloadedMethod($asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype, "SetValueNode", [
		["SetValueNode$0", [System.Xml.XmlNodeType, System.String]], 
		["SetValueNode$1", [System.Xml.XmlNodeType, System.Array.Of(System.Char), System.Int32, System.Int32]]
	]);
JSIL.OverloadedMethod($asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype, "SetNamedNode", [
		["SetNamedNode$0", [System.Xml.XmlNodeType, System.String]], 
		["SetNamedNode$1", [System.Xml.XmlNodeType, System.String, System.String, System.String]]
	]);
JSIL.OverloadedMethod($asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype, "SetValue", [
		["SetValue$0", [System.String]], 
		["SetValue$1", [System.Array.Of(System.Char), System.Int32, System.Int32]]
	]);
JSIL.OverloadedMethod($asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype, "CopyTo", [
		["CopyTo$0", [System.Int32, $asm07.System.Xml.BufferBuilder]], 
		["CopyTo$1", [System.Int32, System.Array.Of(System.Char), System.Int32, System.Int32]]
	]);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.NodeData, "None", 
	$asm07.System.Xml.XmlTextReaderImpl.NodeData.get_None, null);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype, "LineNo", 
	$asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype.get_LineNo, null);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype, "LinePos", 
	$asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype.get_LinePos, null);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype, "IsEmptyElement", 
	$asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype.get_IsEmptyElement, $asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype.set_IsEmptyElement);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype, "IsDefaultAttribute", 
	$asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype.get_IsDefaultAttribute, $asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype.set_IsDefaultAttribute);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype, "ValueBuffered", 
	$asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype.get_ValueBuffered, null);
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype, "StringValue", 
	$asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype.get_StringValue, null);
$asm07.System.Xml.XmlTextReaderImpl.NodeData.s_None = null;
$asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype.type = 0;
$asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype.localName = null;
$asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype.prefix = null;
$asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype.ns = null;
$asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype.nameWPrefix = null;
$asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype.value = null;
$asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype.chars = null;
$asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype.valueStartPos = 0;
$asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype.valueLength = 0;
$asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype.quoteChar = 0;
$asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype.depth = 0;
$asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype.isEmptyOrDefault = false;
$asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype.entityId = 0;
$asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype.xmlContextPushed = false;
$asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype.schemaType = null;
$asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype.typedValue = null;

$asm07.System.Xml.XmlTextReaderImpl.DtdDefaultAttributeInfoToNodeDataComparer.get_Instance = function () {
	return $asm07.System.Xml.XmlTextReaderImpl.DtdDefaultAttributeInfoToNodeDataComparer.s_instance;
};
$asm07.System.Xml.XmlTextReaderImpl.DtdDefaultAttributeInfoToNodeDataComparer.prototype.Compare = function (x, y) {
	if (x === null) {
		if (y !== null) {
			return -1;
		}
		return 0;
	} else {
		if (y === null) {
			return 1;
		}
		var nodeData = JSIL.TryCast(x, $asm07.System.Xml.XmlTextReaderImpl.NodeData);
		if (nodeData !== null) {
			var localName = nodeData.localName;
			var prefix = nodeData.prefix;
		} else {
			var dtdDefaultAttributeInfo = JSIL.TryCast(x, $asm07.System.Xml.IDtdDefaultAttributeInfo);
			if (dtdDefaultAttributeInfo === null) {
				throw JSIL.New(System.Xml.XmlException, "_ctor$7", ["Xml_DefaultException", System.String.Empty]);
			}
			localName = dtdDefaultAttributeInfo.IDtdAttributeInfo_LocalName;
			prefix = dtdDefaultAttributeInfo.IDtdAttributeInfo_Prefix;
		}
		nodeData = JSIL.TryCast(y, $asm07.System.Xml.XmlTextReaderImpl.NodeData);
		if (nodeData !== null) {
			var localName2 = nodeData.localName;
			var prefix2 = nodeData.prefix;
		} else {
			var dtdDefaultAttributeInfo2 = JSIL.TryCast(y, $asm07.System.Xml.IDtdDefaultAttributeInfo);
			if (dtdDefaultAttributeInfo2 === null) {
				throw JSIL.New(System.Xml.XmlException, "_ctor$7", ["Xml_DefaultException", System.String.Empty]);
			}
			localName2 = dtdDefaultAttributeInfo2.IDtdAttributeInfo_LocalName;
			prefix2 = dtdDefaultAttributeInfo2.IDtdAttributeInfo_Prefix;
		}
		var num = System.String.Compare$1(localName, localName2, System.StringComparison.Ordinal);
		if (num !== 0) {
			return num;
		}
		return System.String.Compare$1(prefix, prefix2, System.StringComparison.Ordinal);
	}
};
$asm07.System.Xml.XmlTextReaderImpl.DtdDefaultAttributeInfoToNodeDataComparer.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
JSIL.MakeProperty($asm07.System.Xml.XmlTextReaderImpl.DtdDefaultAttributeInfoToNodeDataComparer, "Instance", 
	$asm07.System.Xml.XmlTextReaderImpl.DtdDefaultAttributeInfoToNodeDataComparer.get_Instance, null);
$asm07.System.Xml.XmlTextReaderImpl.DtdDefaultAttributeInfoToNodeDataComparer.s_instance = null;
$asm07.System.Xml.XmlTextReaderImpl.DtdDefaultAttributeInfoToNodeDataComparer._cctor = function () {
	$asm07.System.Xml.XmlTextReaderImpl.DtdDefaultAttributeInfoToNodeDataComparer.s_instance = new $asm07.System.Xml.XmlTextReaderImpl.DtdDefaultAttributeInfoToNodeDataComparer();
};

$asm07.System.Xml.XmlUtf8RawTextWriter.prototype._ctor$0 = function (settings) {
	this.xmlCharType = $asm07.System.Xml.XmlCharType.Instance.MemberwiseClone();
	this.bufPos = 1;
	this.textPos = 1;
	this.bufLen = 6144;
	$asm07.System.Xml.XmlRawWriter.prototype._ctor.call(this);
	this.newLineHandling = settings.NewLineHandling;
	this.omitXmlDeclaration = settings.OmitXmlDeclaration;
	this.newLineChars = settings.NewLineChars;
	this.checkCharacters = settings.CheckCharacters;
	this.closeOutput = settings.CloseOutput;
	if (!(!this.checkCharacters || this.newLineHandling)) {
		this.ValidateContentChars(this.newLineChars, "NewLineChars", false);
	}
};
$asm07.System.Xml.XmlUtf8RawTextWriter.prototype._ctor$1 = function (stream, settings) {
	this._ctor$0(settings);
	this.stream = stream;
	this.encoding = settings.Encoding;
	this.bufBytes = JSIL.Array.New(System.Byte, 6176);
	if (!(stream.CanSeek && (stream.Position !== 0))) {
		var preamble = this.encoding.GetPreamble();
		if (preamble.length !== 0) {
			System.Buffer.BlockCopy(
				preamble, 
				0, 
				this.bufBytes, 
				1, 
				preamble.length
			);
			this.bufPos += preamble.length;
			this.textPos += preamble.length;
		}
	}
};
$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.get_Settings = function () {
	return new System.Xml.XmlWriterSettings().__Initialize__({
			Encoding: this.encoding, 
			OmitXmlDeclaration: this.omitXmlDeclaration, 
			NewLineHandling: this.newLineHandling, 
			NewLineChars: this.newLineChars, 
			CloseOutput: this.closeOutput, 
			ConformanceLevel: System.Xml.ConformanceLevel.Auto, 
			CheckCharacters: this.checkCharacters, 
			ReadOnly: true}
	);
};
$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.WriteXmlDeclaration$0 = function (standalone) {
	if (!(this.omitXmlDeclaration || this.autoXmlDeclaration)) {
		this.RawText('<?xml version="');
		this.RawText("1.0");
		if (this.encoding !== null) {
			this.RawText('" encoding="');
			this.RawText(this.encoding.WebName);
		}
		if (JSIL.Cast(standalone, System.Boolean)) {
			this.RawText('" standalone="');
			this.RawText((standalone === $asm07.System.Xml.XmlStandalone.Yes) ? "yes" : "no");
		}
		this.RawText('"?>');
	}
};
$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.WriteXmlDeclaration$1 = function (xmldecl) {
	if (!(this.omitXmlDeclaration || this.autoXmlDeclaration)) {
		this.WriteProcessingInstruction("xml", xmldecl);
	}
};
$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.WriteDocType = function (name, pubid, sysid, subset) {
	this.RawText("<!DOCTYPE ");
	this.RawText(name);
	if (pubid !== null) {
		this.RawText(' PUBLIC "');
		this.RawText(pubid);
		this.RawText('" "');
		if (sysid !== null) {
			this.RawText(sysid);
		}
		this.bufBytes[this.bufPos++] = 34;
	} else if (sysid !== null) {
		this.RawText(' SYSTEM "');
		this.RawText(sysid);
		this.bufBytes[this.bufPos++] = 34;
	} else {
		this.bufBytes[this.bufPos++] = 32;
	}
	if (subset !== null) {
		this.bufBytes[this.bufPos++] = 91;
		this.RawText(subset);
		this.bufBytes[this.bufPos++] = 93;
	}
	this.bufBytes[this.bufPos++] = 62;
};
$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.WriteStartElement = function (prefix, localName, ns) {
	this.bufBytes[this.bufPos++] = 60;
	if (!((prefix === null) || (prefix.length === 0))) {
		this.RawText(prefix);
		this.bufBytes[this.bufPos++] = 58;
	}
	this.RawText(localName);
	this.attrEndPos = this.bufPos;
};
$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.StartElementContent = function () {
	this.bufBytes[this.bufPos++] = 62;
	this.contentPos = this.bufPos;
};
$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.WriteEndElement = function (prefix, localName, ns) {
	if (this.contentPos !== this.bufPos) {
		this.bufBytes[this.bufPos++] = 60;
		this.bufBytes[this.bufPos++] = 47;
		if (!((prefix === null) || (prefix.length === 0))) {
			this.RawText(prefix);
			this.bufBytes[this.bufPos++] = 58;
		}
		this.RawText(localName);
		this.bufBytes[this.bufPos++] = 62;
		return;
	}
	--this.bufPos;
	this.bufBytes[this.bufPos++] = 32;
	this.bufBytes[this.bufPos++] = 47;
	this.bufBytes[this.bufPos++] = 62;
};
$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.WriteFullEndElement = function (prefix, localName, ns) {
	this.bufBytes[this.bufPos++] = 60;
	this.bufBytes[this.bufPos++] = 47;
	if (!((prefix === null) || (prefix.length === 0))) {
		this.RawText(prefix);
		this.bufBytes[this.bufPos++] = 58;
	}
	this.RawText(localName);
	this.bufBytes[this.bufPos++] = 62;
};
$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.WriteStartAttribute = function (prefix, localName, ns) {
	if (this.attrEndPos === this.bufPos) {
		this.bufBytes[this.bufPos++] = 32;
	}
	if (!((prefix === null) || (prefix.length <= 0))) {
		this.RawText(prefix);
		this.bufBytes[this.bufPos++] = 58;
	}
	this.RawText(localName);
	this.bufBytes[this.bufPos++] = 61;
	this.bufBytes[this.bufPos++] = 34;
	this.inAttributeValue = true;
};
$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.WriteEndAttribute = function () {
	this.bufBytes[this.bufPos++] = 34;
	this.inAttributeValue = false;
	this.attrEndPos = this.bufPos;
};
$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.WriteNamespaceDeclaration = function (prefix, namespaceName) {
	this.WriteStartNamespaceDeclaration(prefix);
	this.WriteString(namespaceName);
	this.WriteEndNamespaceDeclaration();
};
$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.get_SupportsNamespaceDeclarationInChunks = function () {
	return true;
};
$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.WriteStartNamespaceDeclaration = function (prefix) {
	if (this.attrEndPos === this.bufPos) {
		this.bufBytes[this.bufPos++] = 32;
	}
	if (prefix.length === 0) {
		this.RawText('xmlns="');
	} else {
		this.RawText("xmlns:");
		this.RawText(prefix);
		this.bufBytes[this.bufPos++] = 61;
		this.bufBytes[this.bufPos++] = 34;
	}
	this.inAttributeValue = true;
};
$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.WriteEndNamespaceDeclaration = function () {
	this.inAttributeValue = false;
	this.bufBytes[this.bufPos++] = 34;
	this.attrEndPos = this.bufPos;
};
$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.WriteCData = function (text) {
	if (!(!this.mergeCDataSections || (this.bufPos !== this.cdataPos))) {
		this.bufPos -= 3;
	} else {
		this.bufBytes[this.bufPos++] = 60;
		this.bufBytes[this.bufPos++] = 33;
		this.bufBytes[this.bufPos++] = 91;
		this.bufBytes[this.bufPos++] = 67;
		this.bufBytes[this.bufPos++] = 68;
		this.bufBytes[this.bufPos++] = 65;
		this.bufBytes[this.bufPos++] = 84;
		this.bufBytes[this.bufPos++] = 65;
		this.bufBytes[this.bufPos++] = 91;
	}
	this.WriteCDataSection(text);
	this.bufBytes[this.bufPos++] = 93;
	this.bufBytes[this.bufPos++] = 93;
	this.bufBytes[this.bufPos++] = 62;
	this.textPos = this.bufPos;
	this.cdataPos = this.bufPos;
};
$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.WriteComment = function (text) {
	this.bufBytes[this.bufPos++] = 60;
	this.bufBytes[this.bufPos++] = 33;
	this.bufBytes[this.bufPos++] = 45;
	this.bufBytes[this.bufPos++] = 45;
	this.WriteCommentOrPi(text, 45);
	this.bufBytes[this.bufPos++] = 45;
	this.bufBytes[this.bufPos++] = 45;
	this.bufBytes[this.bufPos++] = 62;
};
$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.WriteProcessingInstruction = function (name, text) {
	this.bufBytes[this.bufPos++] = 60;
	this.bufBytes[this.bufPos++] = 63;
	this.RawText(name);
	if (text.length > 0) {
		this.bufBytes[this.bufPos++] = 32;
		this.WriteCommentOrPi(text, 63);
	}
	this.bufBytes[this.bufPos++] = 63;
	this.bufBytes[this.bufPos++] = 62;
};
$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.WriteEntityRef = function (name) {
	this.bufBytes[this.bufPos++] = 38;
	this.RawText(name);
	this.bufBytes[this.bufPos++] = 59;
	if (this.bufPos > this.bufLen) {
		this.FlushBuffer();
	}
	this.textPos = this.bufPos;
};
$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.WriteCharEntity = function (ch) {
	var s = ((ch.charCodeAt(0)).toString());
	if (!(!this.checkCharacters || this.xmlCharType.IsCharData(ch))) {
		throw System.Xml.XmlConvert.CreateInvalidCharException$4(ch, "\0");
	}
	this.bufBytes[this.bufPos++] = 38;
	this.bufBytes[this.bufPos++] = 35;
	this.bufBytes[this.bufPos++] = 120;
	this.RawText(s);
	this.bufBytes[this.bufPos++] = 59;
	if (this.bufPos > this.bufLen) {
		this.FlushBuffer();
	}
	this.textPos = this.bufPos;
};
$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.WriteWhitespace = JSIL.UntranslatableFunction("System.Void System.Xml.XmlUtf8RawTextWriter::WriteWhitespace(System.String)");
$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.WriteString = JSIL.UntranslatableFunction("System.Void System.Xml.XmlUtf8RawTextWriter::WriteString(System.String)");
$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.WriteSurrogateCharEntity = function (lowChar, highChar) {
	var num = $asm07.System.Xml.XmlCharType.CombineSurrogateChar(lowChar.charCodeAt(0), highChar.charCodeAt(0));
	this.bufBytes[this.bufPos++] = 38;
	this.bufBytes[this.bufPos++] = 35;
	this.bufBytes[this.bufPos++] = 120;
	this.RawText((num).toString());
	this.bufBytes[this.bufPos++] = 59;
	this.textPos = this.bufPos;
};
$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.WriteChars = JSIL.UntranslatableFunction("System.Void System.Xml.XmlUtf8RawTextWriter::WriteChars(System.Char[],System.Int32,System.Int32)");
$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.WriteRaw$0 = JSIL.UntranslatableFunction("System.Void System.Xml.XmlUtf8RawTextWriter::WriteRaw(System.Char[],System.Int32,System.Int32)");
$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.WriteRaw$1 = JSIL.UntranslatableFunction("System.Void System.Xml.XmlUtf8RawTextWriter::WriteRaw(System.String)");
$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.Close = function () {
	try {
		this.FlushBuffer();
		this.FlushEncoder();
	} finally {
		this.writeToNull = true;
		if (this.stream !== null) {
			try {
				this.stream.Flush();
			} finally {
				try {
					if (this.closeOutput) {
						this.stream.Close();
					}
				} finally {
					this.stream = null;
				}
			}
		}
	}
};
$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.Flush = function () {
	this.FlushBuffer();
	this.FlushEncoder();
	if (this.stream !== null) {
		this.stream.Flush();
	}
};
$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.FlushBuffer = function () {
	try {
		try {
			if (!this.writeToNull) {
				this.stream.Write(this.bufBytes, 1, (this.bufPos - 1));
			}
		} catch ($exception) {
			this.writeToNull = true;
			throw $exception;
		}
	} finally {
		this.bufBytes[0] = this.bufBytes[(this.bufPos - 1)];
		if ($asm07.System.Xml.XmlUtf8RawTextWriter.IsSurrogateByte(this.bufBytes[0])) {
			this.bufBytes[1] = this.bufBytes[this.bufPos];
			this.bufBytes[2] = this.bufBytes[(this.bufPos + 1)];
			this.bufBytes[3] = this.bufBytes[(this.bufPos + 2)];
		}
		this.textPos = (this.textPos === this.bufPos) ? 1 : 0;
		this.attrEndPos = (this.attrEndPos === this.bufPos) ? 1 : 0;
		this.contentPos = 0;
		this.cdataPos = 0;
		this.bufPos = 1;
	}
};
$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.FlushEncoder = function () {
};
$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.RawText = JSIL.UntranslatableFunction("System.Void System.Xml.XmlUtf8RawTextWriter::RawText(System.String)");
$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.WriteCommentOrPi = JSIL.UntranslatableFunction("System.Void System.Xml.XmlUtf8RawTextWriter::WriteCommentOrPi(System.String,System.Int32)");
$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.WriteCDataSection = JSIL.UntranslatableFunction("System.Void System.Xml.XmlUtf8RawTextWriter::WriteCDataSection(System.String)");
$asm07.System.Xml.XmlUtf8RawTextWriter.IsSurrogateByte = function (b) {
	return ((b & 248) === 240);
};
$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.ValidateContentChars = function (chars, propertyName, allowOnlyWhitespace) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				if (!allowOnlyWhitespace) {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								var text = null;
							__loop0__: 
								for (var i = 0; i < chars.length; ) {
									var __label2__ = "__entry2__";
								__step2__: 
									while (true) {
										switch (__label2__) {
											case "__entry2__":
												if (!this.xmlCharType.IsTextChar(chars[i])) {
													var __label3__ = "__entry3__";
												__step3__: 
													while (true) {
														switch (__label3__) {
															case "__entry3__":
																var c = (chars[i]);
																if (c <= "&") {
																	switch (c) {
																		case "\t": 
																		case "\n": 
																		case "\r": 
																			__label2__ = "IL_121";
																			continue __step2__;
																		case "\x0b": 
																		case "\x0c": 
																			__label3__ = "IL_A2";
																			continue __step3__;
																		default: 
																			if (c !== "&") {
																				__label3__ = "IL_A2";
																				continue __step3__;
																			}
																			break;
																	}
																} else if ((c !== "<") && (c !== "]")) {
																	__label3__ = "IL_A2";
																	continue __step3__;
																}
																text = $asm07.System.Xml.Res.GetString$0("Xml_InvalidCharacter", System.Xml.XmlException.BuildCharExceptionArgs$0(chars, i));
																__label3__ = "IL_132";
																continue __step3__;
																__label3__ = "IL_A2";
																continue __step3__;
																break;
															case "IL_A2":
																if ($asm07.System.Xml.XmlCharType.IsHighSurrogate(chars[i].charCodeAt(0))) {
																	if (!(((i + 1) >= chars.length) || !$asm07.System.Xml.XmlCharType.IsLowSurrogate((chars[(i + 1)]).charCodeAt(0)))) {
																		++i;
																		__label2__ = "IL_121";
																		continue __step2__;
																	}
																	text = $asm07.System.Xml.Res.GetString$2("Xml_InvalidSurrogateMissingLowChar");
																} else {
																	if (!$asm07.System.Xml.XmlCharType.IsLowSurrogate(chars[i].charCodeAt(0))) {
																		__label2__ = "IL_121";
																		continue __step2__;
																	}
																	text = $asm07.System.Xml.Res.GetString$0("Xml_InvalidSurrogateHighChar", [(chars[i].charCodeAt(0)).toString()]);
																}
																__label3__ = "IL_132";
																continue __step3__;
																break;
															case "IL_132":
																throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm07.System.Xml.Res.GetString$0("Xml_InvalidCharsInIndent", JSIL.Array.New(System.String, [propertyName, text]))]);
																break __step3__;
														}
													}
												}
												__label2__ = "IL_121";
												continue __step2__;
												break;
											case "IL_121":
												++i;
												break __step2__;
										}
									}
								}
								return;
								break __step1__;
						}
					}
				}
				if (!this.xmlCharType.IsOnlyWhitespace(chars)) {
					throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm07.System.Xml.Res.GetString$0("Xml_IndentCharsNotWhitespace", [propertyName])]);
				}
				break __step0__;
		}
	}
};
JSIL.OverloadedMethod($asm07.System.Xml.XmlUtf8RawTextWriter.prototype, "_ctor", [
		["_ctor$0", [System.Xml.XmlWriterSettings]], 
		["_ctor$1", [System.IO.Stream, System.Xml.XmlWriterSettings]]
	]);
JSIL.OverloadedMethod($asm07.System.Xml.XmlUtf8RawTextWriter.prototype, "WriteXmlDeclaration", [
		["WriteXmlDeclaration$0", [$asm07.System.Xml.XmlStandalone]], 
		["WriteXmlDeclaration$1", [System.String]]
	]);
JSIL.OverloadedMethod($asm07.System.Xml.XmlUtf8RawTextWriter.prototype, "WriteRaw", [
		["WriteRaw$0", [System.Array.Of(System.Char), System.Int32, System.Int32]], 
		["WriteRaw$1", [System.String]]
	]);
JSIL.MakeProperty($asm07.System.Xml.XmlUtf8RawTextWriter.prototype, "Settings", 
	$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.get_Settings, null);
JSIL.MakeProperty($asm07.System.Xml.XmlUtf8RawTextWriter.prototype, "SupportsNamespaceDeclarationInChunks", 
	$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.get_SupportsNamespaceDeclarationInChunks, null);
Object.defineProperty($asm07.System.Xml.XmlUtf8RawTextWriter, "BUFSIZE", {
		"value": 6144}
);
Object.defineProperty($asm07.System.Xml.XmlUtf8RawTextWriter, "OVERFLOW", {
		"value": 32}
);
Object.defineProperty($asm07.System.Xml.XmlUtf8RawTextWriter, "INIT_MARKS_COUNT", {
		"value": 64}
);
$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.bufBytes = null;
$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.stream = null;
$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.encoding = null;
$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.bufPos = 0;
$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.textPos = 0;
$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.contentPos = 0;
$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.cdataPos = 0;
$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.attrEndPos = 0;
$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.bufLen = 0;
$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.writeToNull = false;
$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.hadDoubleBracket = false;
$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.inAttributeValue = false;
$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.newLineHandling = 0;
$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.closeOutput = false;
$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.omitXmlDeclaration = false;
$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.newLineChars = null;
$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.checkCharacters = false;
$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.autoXmlDeclaration = false;
$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.mergeCDataSections = false;

$asm07.System.Xml.XmlUtf8RawTextWriterIndent.prototype._ctor = function (stream, settings) {
	$asm07.System.Xml.XmlUtf8RawTextWriter.prototype._ctor$1.call(this, stream, settings);
	this.Init(settings);
};
$asm07.System.Xml.XmlUtf8RawTextWriterIndent.prototype.get_Settings = function () {
	var settings = $asm07.System.Xml.XmlUtf8RawTextWriter.prototype.get_Settings.call(this);
	settings.ReadOnly = false;
	settings.Indent = true;
	settings.IndentChars = this.indentChars;
	settings.NewLineOnAttributes = this.newLineOnAttributes;
	settings.ReadOnly = true;
	return settings;
};
$asm07.System.Xml.XmlUtf8RawTextWriterIndent.prototype.WriteDocType = function (name, pubid, sysid, subset) {
	if (!(this.mixedContent || (this.textPos === this.bufPos))) {
		this.WriteIndent();
	}
	$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.WriteDocType.call(this, name, pubid, sysid, subset);
};
$asm07.System.Xml.XmlUtf8RawTextWriterIndent.prototype.WriteStartElement = function (prefix, localName, ns) {
	if (!(this.mixedContent || (this.textPos === this.bufPos))) {
		this.WriteIndent();
	}
	++this.indentLevel;
	this.mixedContentStack.PushBit(this.mixedContent);
	$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.WriteStartElement.call(this, prefix, localName, ns);
};
$asm07.System.Xml.XmlUtf8RawTextWriterIndent.prototype.StartElementContent = function () {
	if (!((this.indentLevel !== 1) || (this.conformanceLevel !== System.Xml.ConformanceLevel.Document))) {
		this.mixedContent = false;
	} else {
		this.mixedContent = this.mixedContentStack.PeekBit();
	}
	$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.StartElementContent.call(this);
};
$asm07.System.Xml.XmlUtf8RawTextWriterIndent.prototype.OnRootElement = function (currentConformanceLevel) {
	this.conformanceLevel = currentConformanceLevel;
};
$asm07.System.Xml.XmlUtf8RawTextWriterIndent.prototype.WriteEndElement = function (prefix, localName, ns) {
	--this.indentLevel;
	if (!(this.mixedContent || 
			(this.contentPos === this.bufPos) || (this.textPos === this.bufPos))) {
		this.WriteIndent();
	}
	this.mixedContent = this.mixedContentStack.PopBit();
	$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.WriteEndElement.call(this, prefix, localName, ns);
};
$asm07.System.Xml.XmlUtf8RawTextWriterIndent.prototype.WriteFullEndElement = function (prefix, localName, ns) {
	--this.indentLevel;
	if (!(this.mixedContent || 
			(this.contentPos === this.bufPos) || (this.textPos === this.bufPos))) {
		this.WriteIndent();
	}
	this.mixedContent = this.mixedContentStack.PopBit();
	$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.WriteFullEndElement.call(this, prefix, localName, ns);
};
$asm07.System.Xml.XmlUtf8RawTextWriterIndent.prototype.WriteStartAttribute = function (prefix, localName, ns) {
	if (this.newLineOnAttributes) {
		this.WriteIndent();
	}
	$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.WriteStartAttribute.call(this, prefix, localName, ns);
};
$asm07.System.Xml.XmlUtf8RawTextWriterIndent.prototype.WriteCData = function (text) {
	this.mixedContent = true;
	$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.WriteCData.call(this, text);
};
$asm07.System.Xml.XmlUtf8RawTextWriterIndent.prototype.WriteComment = function (text) {
	if (!(this.mixedContent || (this.textPos === this.bufPos))) {
		this.WriteIndent();
	}
	$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.WriteComment.call(this, text);
};
$asm07.System.Xml.XmlUtf8RawTextWriterIndent.prototype.WriteProcessingInstruction = function (target, text) {
	if (!(this.mixedContent || (this.textPos === this.bufPos))) {
		this.WriteIndent();
	}
	$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.WriteProcessingInstruction.call(this, target, text);
};
$asm07.System.Xml.XmlUtf8RawTextWriterIndent.prototype.WriteEntityRef = function (name) {
	this.mixedContent = true;
	$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.WriteEntityRef.call(this, name);
};
$asm07.System.Xml.XmlUtf8RawTextWriterIndent.prototype.WriteCharEntity = function (ch) {
	this.mixedContent = true;
	$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.WriteCharEntity.call(this, ch);
};
$asm07.System.Xml.XmlUtf8RawTextWriterIndent.prototype.WriteSurrogateCharEntity = function (lowChar, highChar) {
	this.mixedContent = true;
	$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.WriteSurrogateCharEntity.call(this, lowChar, highChar);
};
$asm07.System.Xml.XmlUtf8RawTextWriterIndent.prototype.WriteWhitespace = function (ws) {
	this.mixedContent = true;
	$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.WriteWhitespace.call(this, ws);
};
$asm07.System.Xml.XmlUtf8RawTextWriterIndent.prototype.WriteString = function (text) {
	this.mixedContent = true;
	$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.WriteString.call(this, text);
};
$asm07.System.Xml.XmlUtf8RawTextWriterIndent.prototype.WriteChars = function (buffer, index, count) {
	this.mixedContent = true;
	$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.WriteChars.call(this, buffer, index, count);
};
$asm07.System.Xml.XmlUtf8RawTextWriterIndent.prototype.WriteRaw$0 = function (buffer, index, count) {
	this.mixedContent = true;
	$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.WriteRaw$0.call(this, buffer, index, count);
};
$asm07.System.Xml.XmlUtf8RawTextWriterIndent.prototype.WriteRaw$1 = function (data) {
	this.mixedContent = true;
	$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.WriteRaw$1.call(this, data);
};
$asm07.System.Xml.XmlUtf8RawTextWriterIndent.prototype.WriteBase64 = function (buffer, index, count) {
	this.mixedContent = true;
	$asm07.System.Xml.XmlRawWriter.prototype.WriteBase64.call(this, buffer, index, count);
};
$asm07.System.Xml.XmlUtf8RawTextWriterIndent.prototype.Init = function (settings) {
	this.indentLevel = 0;
	this.indentChars = settings.IndentChars;
	this.newLineOnAttributes = settings.NewLineOnAttributes;
	this.mixedContentStack = new $asm07.System.Xml.BitStack();
	if (this.checkCharacters) {
		if (this.newLineOnAttributes) {
			$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.ValidateContentChars.call(this, this.indentChars, "IndentChars", true);
			$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.ValidateContentChars.call(this, this.newLineChars, "NewLineChars", true);
			return;
		}
		$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.ValidateContentChars.call(this, this.indentChars, "IndentChars", false);
		if (this.newLineHandling !== 0) {
			$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.ValidateContentChars.call(this, this.newLineChars, "NewLineChars", false);
		}
	}
};
$asm07.System.Xml.XmlUtf8RawTextWriterIndent.prototype.WriteIndent = function () {
	$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.RawText.call(this, this.newLineChars);
__loop0__: 
	for (var i = this.indentLevel; i > 0; --i) {
		$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.RawText.call(this, this.indentChars);
	}
};
JSIL.OverloadedMethod($asm07.System.Xml.XmlUtf8RawTextWriterIndent.prototype, "WriteRaw", [
		["WriteRaw$0", [System.Array.Of(System.Char), System.Int32, System.Int32]], 
		["WriteRaw$1", [System.String]]
	]);
JSIL.MakeProperty($asm07.System.Xml.XmlUtf8RawTextWriterIndent.prototype, "Settings", 
	$asm07.System.Xml.XmlUtf8RawTextWriterIndent.prototype.get_Settings, null);
$asm07.System.Xml.XmlUtf8RawTextWriterIndent.prototype.indentLevel = 0;
$asm07.System.Xml.XmlUtf8RawTextWriterIndent.prototype.newLineOnAttributes = false;
$asm07.System.Xml.XmlUtf8RawTextWriterIndent.prototype.indentChars = null;
$asm07.System.Xml.XmlUtf8RawTextWriterIndent.prototype.mixedContent = false;
$asm07.System.Xml.XmlUtf8RawTextWriterIndent.prototype.mixedContentStack = null;
$asm07.System.Xml.XmlUtf8RawTextWriterIndent.prototype.conformanceLevel = 0;

$asm07.System.Xml.XmlWellFormedWriter.prototype._ctor = function (writer, settings) {
	this.xmlCharType = $asm07.System.Xml.XmlCharType.Instance.MemberwiseClone();
	System.Xml.XmlWriter.prototype._ctor.call(this);
	this.writer = writer;
	this.rawWriter = JSIL.TryCast(writer, $asm07.System.Xml.XmlRawWriter);
	this.predefinedNamespaces = JSIL.TryCast(writer, System.Xml.IXmlNamespaceResolver);
	if (this.rawWriter !== null) {
		this.rawWriter.NamespaceResolver = new $asm07.System.Xml.XmlWellFormedWriter.NamespaceResolverProxy(this);
	}
	this.checkCharacters = settings.CheckCharacters;
	this.omitDuplNamespaces = ((settings.NamespaceHandling & System.Xml.NamespaceHandling.OmitDuplicates) !== System.Xml.NamespaceHandling.Default);
	this.conformanceLevel = settings.ConformanceLevel;
	this.stateTable = (this.conformanceLevel === System.Xml.ConformanceLevel.Document) ? $asm07.System.Xml.XmlWellFormedWriter.StateTableDocument : $asm07.System.Xml.XmlWellFormedWriter.StateTableAuto;
	this.currentState = $asm07.System.Xml.XmlWellFormedWriter.State.Start;
	this.nsStack = JSIL.Array.New($asm07.System.Xml.XmlWellFormedWriter.Namespace, 8);
	(this.nsStack[0]).Set("xmlns", "http://www.w3.org/2000/xmlns/", $asm07.System.Xml.XmlWellFormedWriter.NamespaceKind.Special);
	(this.nsStack[1]).Set("xml", "http://www.w3.org/XML/1998/namespace", $asm07.System.Xml.XmlWellFormedWriter.NamespaceKind.Special);
	if (this.predefinedNamespaces === null) {
		(this.nsStack[2]).Set(System.String.Empty, System.String.Empty, $asm07.System.Xml.XmlWellFormedWriter.NamespaceKind.Implied);
	} else {
		var text = this.predefinedNamespaces.IXmlNamespaceResolver_LookupNamespace(System.String.Empty);
		(this.nsStack[2]).Set(System.String.Empty, (text === null) ? System.String.Empty : text, $asm07.System.Xml.XmlWellFormedWriter.NamespaceKind.Implied);
	}
	this.nsTop = 2;
	this.elemScopeStack = JSIL.Array.New($asm07.System.Xml.XmlWellFormedWriter.ElementScope, 8);
	(this.elemScopeStack[0]).Set(System.String.Empty, System.String.Empty, System.String.Empty, this.nsTop);
	this.elemScopeStack[0].xmlSpace = System.Xml.XmlSpace.None;
	this.elemScopeStack[0].xmlLang = null;
	this.elemTop = 0;
	this.attrStack = JSIL.Array.New($asm07.System.Xml.XmlWellFormedWriter.AttrName, 8);
	this.hasher = new $asm07.System.Xml.SecureStringHasher();
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.get_WriteState = function () {
	if (this.currentState <= $asm07.System.Xml.XmlWellFormedWriter.State.Error) {
		return $asm07.System.Xml.XmlWellFormedWriter.state2WriteState[Number(this.currentState)];
	}
	return System.Xml.WriteState.Error;
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.get_Settings = function () {
	var settings = this.writer.Settings;
	settings.ReadOnly = false;
	settings.ConformanceLevel = this.conformanceLevel;
	if (this.omitDuplNamespaces) {
		settings.NamespaceHandling |= System.Xml.NamespaceHandling.OmitDuplicates;
	}
	settings.ReadOnly = true;
	return settings;
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.WriteStartDocument$0 = function () {
	this.WriteStartDocumentImpl($asm07.System.Xml.XmlStandalone.Omit);
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.WriteStartDocument$1 = function (standalone) {
	this.WriteStartDocumentImpl(standalone ? $asm07.System.Xml.XmlStandalone.Yes : $asm07.System.Xml.XmlStandalone.No);
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.WriteEndDocument = function () {
	try {
	__loop0__: 
		while (this.elemTop > 0) {
			this.WriteEndElement();
		}
		var state = this.currentState;
		this.AdvanceState($asm07.System.Xml.XmlWellFormedWriter.Token.EndDocument);
		if (state !== $asm07.System.Xml.XmlWellFormedWriter.State.AfterRootEle) {
			throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_NoRoot")]);
		}
		if (this.rawWriter === null) {
			this.writer.WriteEndDocument();
		}
	} catch ($exception) {
		this.currentState = $asm07.System.Xml.XmlWellFormedWriter.State.Error;
		throw $exception;
	}
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.WriteDocType = function (name, pubid, sysid, subset) {
	var invCharIndex = 0;
	try {
		if (!((name !== null) && (name.length !== 0))) {
			throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_EmptyName")]);
		}
		System.Xml.XmlConvert.VerifyQName(name, $asm07.System.Xml.ExceptionType.XmlException);
		if (this.conformanceLevel === System.Xml.ConformanceLevel.Fragment) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_DtdNotAllowedInFragment")]);
		}
		this.AdvanceState($asm07.System.Xml.XmlWellFormedWriter.Token.Dtd);
		if (this.dtdWritten) {
			this.currentState = $asm07.System.Xml.XmlWellFormedWriter.State.Error;
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_DtdAlreadyWritten")]);
		}
		if (this.conformanceLevel === 0) {
			this.conformanceLevel = System.Xml.ConformanceLevel.Document;
			this.stateTable = $asm07.System.Xml.XmlWellFormedWriter.StateTableDocument;
		}
		if (this.checkCharacters) {
			if (!((pubid === null) || ((invCharIndex = this.xmlCharType.IsPublicId(pubid)) < 0))) {
				throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm07.System.Xml.Res.GetString$0("Xml_InvalidCharacter", System.Xml.XmlException.BuildCharExceptionArgs$0(pubid, invCharIndex)), "pubid"]);
			}
			if (!((sysid === null) || ((invCharIndex = this.xmlCharType.IsOnlyCharData(sysid)) < 0))) {
				throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm07.System.Xml.Res.GetString$0("Xml_InvalidCharacter", System.Xml.XmlException.BuildCharExceptionArgs$0(sysid, invCharIndex)), "sysid"]);
			}
			if (!((subset === null) || ((invCharIndex = this.xmlCharType.IsOnlyCharData(subset)) < 0))) {
				throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm07.System.Xml.Res.GetString$0("Xml_InvalidCharacter", System.Xml.XmlException.BuildCharExceptionArgs$0(subset, invCharIndex)), "subset"]);
			}
		}
		this.writer.WriteDocType(name, pubid, sysid, subset);
		this.dtdWritten = true;
	} catch ($exception) {
		this.currentState = $asm07.System.Xml.XmlWellFormedWriter.State.Error;
		throw $exception;
	}
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.WriteStartElement = function (prefix, localName, ns) {
	try {
		if (!((localName !== null) && (localName.length !== 0))) {
			throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_EmptyLocalName")]);
		}
		this.CheckNCName(localName);
		this.AdvanceState($asm07.System.Xml.XmlWellFormedWriter.Token.StartElement);
		if (prefix === null) {
			if (ns !== null) {
				prefix = this.LookupPrefix(ns);
			}
			if (prefix === null) {
				prefix = System.String.Empty;
			}
		} else if (prefix.length > 0) {
			this.CheckNCName(prefix);
			if (ns === null) {
				ns = this.LookupNamespace(prefix);
			}
			if (!((ns !== null) && ((ns === null) || 
						(ns.length !== 0)))) {
				throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_PrefixForEmptyNs")]);
			}
		}
		if (ns === null) {
			ns = this.LookupNamespace(prefix);
			if (ns === null) {
				ns = System.String.Empty;
			}
		}
		if (!(this.elemTop || (this.rawWriter === null))) {
			this.rawWriter.OnRootElement(this.conformanceLevel);
		}
		this.writer.WriteStartElement$1(prefix, localName, ns);
		var num = ++this.elemTop;
		if (num === this.elemScopeStack.length) {
			var destinationArray = JSIL.Array.New($asm07.System.Xml.XmlWellFormedWriter.ElementScope, (num * 2));
			System.Array.Copy$0(this.elemScopeStack, destinationArray, num);
			this.elemScopeStack = destinationArray;
		}
		this.elemScopeStack[num].Set(prefix, localName, ns, this.nsTop);
		this.PushNamespaceImplicit(prefix, ns);
		if (this.attrCount >= 14) {
			this.attrHashTable.Clear();
		}
		this.attrCount = 0;
	} catch ($exception) {
		this.currentState = $asm07.System.Xml.XmlWellFormedWriter.State.Error;
		throw $exception;
	}
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.WriteEndElement = function () {
	try {
		this.AdvanceState($asm07.System.Xml.XmlWellFormedWriter.Token.EndElement);
		var num = this.elemTop;
		if (num === 0) {
			throw JSIL.New(System.Xml.XmlException, "_ctor$7", ["Xml_NoStartTag", System.String.Empty]);
		}
		if (this.rawWriter !== null) {
			this.elemScopeStack[num].WriteEndElement(this.rawWriter);
		} else {
			this.writer.WriteEndElement();
		}
		var prevNSTop = this.elemScopeStack[num].prevNSTop;
		if (!(!this.useNsHashtable || (prevNSTop >= this.nsTop))) {
			this.PopNamespaces((prevNSTop + 1), this.nsTop);
		}
		this.nsTop = prevNSTop;
		if ((this.elemTop = (num - 1)) === 0) {
			if (this.conformanceLevel === System.Xml.ConformanceLevel.Document) {
				this.currentState = $asm07.System.Xml.XmlWellFormedWriter.State.AfterRootEle;
			} else {
				this.currentState = $asm07.System.Xml.XmlWellFormedWriter.State.TopLevel;
			}
		}
	} catch ($exception) {
		this.currentState = $asm07.System.Xml.XmlWellFormedWriter.State.Error;
		throw $exception;
	}
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.WriteFullEndElement = function () {
	try {
		this.AdvanceState($asm07.System.Xml.XmlWellFormedWriter.Token.EndElement);
		var num = this.elemTop;
		if (num === 0) {
			throw JSIL.New(System.Xml.XmlException, "_ctor$7", ["Xml_NoStartTag", System.String.Empty]);
		}
		if (this.rawWriter !== null) {
			this.elemScopeStack[num].WriteFullEndElement(this.rawWriter);
		} else {
			this.writer.WriteFullEndElement();
		}
		var prevNSTop = this.elemScopeStack[num].prevNSTop;
		if (!(!this.useNsHashtable || (prevNSTop >= this.nsTop))) {
			this.PopNamespaces((prevNSTop + 1), this.nsTop);
		}
		this.nsTop = prevNSTop;
		if ((this.elemTop = (num - 1)) === 0) {
			if (this.conformanceLevel === System.Xml.ConformanceLevel.Document) {
				this.currentState = $asm07.System.Xml.XmlWellFormedWriter.State.AfterRootEle;
			} else {
				this.currentState = $asm07.System.Xml.XmlWellFormedWriter.State.TopLevel;
			}
		}
	} catch ($exception) {
		this.currentState = $asm07.System.Xml.XmlWellFormedWriter.State.Error;
		throw $exception;
	}
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.WriteStartAttribute = function (prefix, localName, namespaceName) {
	var __label0__ = null;
__step0__: 
	while (true) {
		switch (__label0__) {
			case null:
				var a = null;
				__label0__ = "__entry0__";
				continue __step0__;
				break;
			case "__entry0__":
				try {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								if (!((localName !== null) && (localName.length !== 0))) {
									if (!(prefix == "xmlns")) {
										throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_EmptyLocalName")]);
									}
									localName = "xmlns";
									prefix = System.String.Empty;
								}
								this.CheckNCName(localName);
								this.AdvanceState($asm07.System.Xml.XmlWellFormedWriter.Token.StartAttribute);
								if (prefix === null) {
									if (!((namespaceName === null) || ((localName == "xmlns") && 
												(namespaceName == "http://www.w3.org/2000/xmlns/")))) {
										prefix = this.LookupPrefix(namespaceName);
									}
									if (prefix === null) {
										prefix = System.String.Empty;
									}
								}
								if (namespaceName === null) {
									if (!((prefix === null) || (prefix.length <= 0))) {
										namespaceName = this.LookupNamespace(prefix);
									}
									if (namespaceName === null) {
										namespaceName = System.String.Empty;
									}
								}
								if (prefix.length === 0) {
									if (!(((localName[0]) !== "x") || !(localName == "xmlns"))) {
										if (!((namespaceName.length <= 0) || !(namespaceName != "http://www.w3.org/2000/xmlns/"))) {
											throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_XmlnsPrefix")]);
										}
										this.curDeclPrefix = System.String.Empty;
										this.SetSpecialAttribute($asm07.System.Xml.XmlWellFormedWriter.SpecialAttribute.DefaultXmlns);
									} else {
										if (namespaceName.length <= 0) {
											__label1__ = "IL_219";
											continue __step1__;
										}
										prefix = this.LookupPrefix(namespaceName);
										if (!((prefix !== null) && (prefix.length !== 0))) {
											prefix = this.GeneratePrefix();
											__label1__ = "IL_219";
											continue __step1__;
										}
										__label1__ = "IL_219";
										continue __step1__;
									}
								} else {
									if ((prefix[0]) === "x") {
										if (prefix == "xmlns") {
											if (!((namespaceName.length <= 0) || !(namespaceName != "http://www.w3.org/2000/xmlns/"))) {
												throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_XmlnsPrefix")]);
											}
											this.curDeclPrefix = localName;
											this.SetSpecialAttribute($asm07.System.Xml.XmlWellFormedWriter.SpecialAttribute.PrefixedXmlns);
											__label1__ = "IL_229";
											continue __step1__;
										} else if (prefix == "xml") {
											if (!((namespaceName.length <= 0) || !(namespaceName != "http://www.w3.org/XML/1998/namespace"))) {
												throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_XmlPrefix")]);
											}
											if ((a = localName) !== null) {
												if (a == "space") {
													this.SetSpecialAttribute($asm07.System.Xml.XmlWellFormedWriter.SpecialAttribute.XmlSpace);
													__label1__ = "IL_229";
													continue __step1__;
												}
												if (a == "lang") {
													this.SetSpecialAttribute($asm07.System.Xml.XmlWellFormedWriter.SpecialAttribute.XmlLang);
													__label1__ = "IL_229";
													continue __step1__;
												}
											}
										}
									}
									this.CheckNCName(prefix);
									if (namespaceName.length === 0) {
										prefix = System.String.Empty;
										__label1__ = "IL_219";
										continue __step1__;
									}
									var text = this.LookupLocalNamespace(prefix);
									if (!((text === null) || !(text != namespaceName))) {
										prefix = this.GeneratePrefix();
										__label1__ = "IL_219";
										continue __step1__;
									}
									__label1__ = "IL_219";
									continue __step1__;
								}
								__label1__ = "IL_229";
								continue __step1__;
								break;
							case "IL_229":
								this.AddAttribute(prefix, localName, namespaceName);
								if (this.specAttr === 0) {
									this.writer.WriteStartAttribute$1(prefix, localName, namespaceName);
									__label1__ = "IL_248";
									continue __step1__;
								}
								__label1__ = "IL_248";
								continue __step1__;
								__label1__ = "IL_219";
								continue __step1__;
								break;
							case "IL_219":
								if (prefix.length !== 0) {
									this.PushNamespaceImplicit(prefix, namespaceName);
									__label1__ = "IL_229";
									continue __step1__;
								}
								__label1__ = "IL_229";
								continue __step1__;
								__label1__ = "IL_248";
								continue __step1__;
								break;
							case "IL_248":
								break __step1__;
						}
					}
				} catch ($exception) {
					this.currentState = $asm07.System.Xml.XmlWellFormedWriter.State.Error;
					throw $exception;
				}
				break __step0__;
		}
	}
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.WriteEndAttribute = function () {
	try {
		this.AdvanceState($asm07.System.Xml.XmlWellFormedWriter.Token.EndAttribute);
		if (this.specAttr !== 0) {
			switch (Number(this.specAttr)) {
				case 1: 
					var stringValue = this.attrValueCache.StringValue;
					if (this.PushNamespaceExplicit(System.String.Empty, stringValue)) {
						if (this.rawWriter !== null) {
							if (this.rawWriter.SupportsNamespaceDeclarationInChunks) {
								this.rawWriter.WriteStartNamespaceDeclaration(System.String.Empty);
								this.attrValueCache.Replay(this.rawWriter);
								this.rawWriter.WriteEndNamespaceDeclaration();
							} else {
								this.rawWriter.WriteNamespaceDeclaration(System.String.Empty, stringValue);
							}
						} else {
							this.writer.WriteStartAttribute$1(System.String.Empty, "xmlns", "http://www.w3.org/2000/xmlns/");
							this.attrValueCache.Replay(this.writer);
							this.writer.WriteEndAttribute();
						}
					}
					this.curDeclPrefix = null;
					break;
				case 2: 
					stringValue = this.attrValueCache.StringValue;
					if (stringValue.length === 0) {
						throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_PrefixForEmptyNs")]);
					}
					if (!(!(stringValue == "http://www.w3.org/2000/xmlns/") && (!(stringValue == "http://www.w3.org/XML/1998/namespace") || 
								!(this.curDeclPrefix != "xml")))) {
						throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_CanNotBindToReservedNamespace")]);
					}
					if (this.PushNamespaceExplicit(this.curDeclPrefix, stringValue)) {
						if (this.rawWriter !== null) {
							if (this.rawWriter.SupportsNamespaceDeclarationInChunks) {
								this.rawWriter.WriteStartNamespaceDeclaration(this.curDeclPrefix);
								this.attrValueCache.Replay(this.rawWriter);
								this.rawWriter.WriteEndNamespaceDeclaration();
							} else {
								this.rawWriter.WriteNamespaceDeclaration(this.curDeclPrefix, stringValue);
							}
						} else {
							this.writer.WriteStartAttribute$1("xmlns", this.curDeclPrefix, "http://www.w3.org/2000/xmlns/");
							this.attrValueCache.Replay(this.writer);
							this.writer.WriteEndAttribute();
						}
					}
					this.curDeclPrefix = null;
					break;
				case 3: 
					this.attrValueCache.Trim();
					stringValue = this.attrValueCache.StringValue;
					if (stringValue == "default") {
						this.elemScopeStack[this.elemTop].xmlSpace = System.Xml.XmlSpace.Default;
					} else {
						if (!(stringValue == "preserve")) {
							throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm07.System.Xml.Res.GetString$0("Xml_InvalidXmlSpace", [stringValue])]);
						}
						this.elemScopeStack[this.elemTop].xmlSpace = System.Xml.XmlSpace.Preserve;
					}
					this.writer.WriteStartAttribute$1("xml", "space", "http://www.w3.org/XML/1998/namespace");
					this.attrValueCache.Replay(this.writer);
					this.writer.WriteEndAttribute();
					break;
				case 4: 
					stringValue = this.attrValueCache.StringValue;
					this.elemScopeStack[this.elemTop].xmlLang = stringValue;
					this.writer.WriteStartAttribute$1("xml", "lang", "http://www.w3.org/XML/1998/namespace");
					this.attrValueCache.Replay(this.writer);
					this.writer.WriteEndAttribute();
					break;
			}
			this.specAttr = $asm07.System.Xml.XmlWellFormedWriter.SpecialAttribute.No;
			this.attrValueCache.Clear();
		} else {
			this.writer.WriteEndAttribute();
		}
	} catch ($exception) {
		this.currentState = $asm07.System.Xml.XmlWellFormedWriter.State.Error;
		throw $exception;
	}
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.WriteCData = function (text) {
	try {
		if (text === null) {
			text = System.String.Empty;
		}
		this.AdvanceState($asm07.System.Xml.XmlWellFormedWriter.Token.CData);
		this.writer.WriteCData(text);
	} catch ($exception) {
		this.currentState = $asm07.System.Xml.XmlWellFormedWriter.State.Error;
		throw $exception;
	}
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.WriteComment = function (text) {
	try {
		if (text === null) {
			text = System.String.Empty;
		}
		this.AdvanceState($asm07.System.Xml.XmlWellFormedWriter.Token.Comment);
		this.writer.WriteComment(text);
	} catch ($exception) {
		this.currentState = $asm07.System.Xml.XmlWellFormedWriter.State.Error;
		throw $exception;
	}
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.WriteProcessingInstruction = function (name, text) {
	try {
		if (!((name !== null) && (name.length !== 0))) {
			throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_EmptyName")]);
		}
		this.CheckNCName(name);
		if (text === null) {
			text = System.String.Empty;
		}
		if (!((name.length !== 3) || (System.String.Compare$1(name, "xml", System.StringComparison.OrdinalIgnoreCase) !== 0))) {
			if (this.currentState !== 0) {
				throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2((this.conformanceLevel === System.Xml.ConformanceLevel.Document) ? "Xml_DupXmlDecl" : "Xml_CannotWriteXmlDecl")]);
			}
			this.xmlDeclFollows = true;
			this.AdvanceState($asm07.System.Xml.XmlWellFormedWriter.Token.PI);
			if (this.rawWriter !== null) {
				this.rawWriter.WriteXmlDeclaration$1(text);
			} else {
				this.writer.WriteProcessingInstruction(name, text);
			}
		} else {
			this.AdvanceState($asm07.System.Xml.XmlWellFormedWriter.Token.PI);
			this.writer.WriteProcessingInstruction(name, text);
		}
	} catch ($exception) {
		this.currentState = $asm07.System.Xml.XmlWellFormedWriter.State.Error;
		throw $exception;
	}
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.WriteEntityRef = function (name) {
	try {
		if (!((name !== null) && (name.length !== 0))) {
			throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_EmptyName")]);
		}
		this.CheckNCName(name);
		this.AdvanceState($asm07.System.Xml.XmlWellFormedWriter.Token.Text);
		if (this.SaveAttrValue) {
			this.attrValueCache.WriteEntityRef(name);
		} else {
			this.writer.WriteEntityRef(name);
		}
	} catch ($exception) {
		this.currentState = $asm07.System.Xml.XmlWellFormedWriter.State.Error;
		throw $exception;
	}
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.WriteCharEntity = function (ch) {
	try {
		if (System.Char.IsSurrogate$0(ch)) {
			throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_InvalidSurrogateMissingLowChar")]);
		}
		this.AdvanceState($asm07.System.Xml.XmlWellFormedWriter.Token.Text);
		if (this.SaveAttrValue) {
			this.attrValueCache.WriteCharEntity(ch);
		} else {
			this.writer.WriteCharEntity(ch);
		}
	} catch ($exception) {
		this.currentState = $asm07.System.Xml.XmlWellFormedWriter.State.Error;
		throw $exception;
	}
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.WriteSurrogateCharEntity = function (lowChar, highChar) {
	try {
		if (!System.Char.IsSurrogatePair$1(highChar, lowChar)) {
			throw System.Xml.XmlConvert.CreateInvalidSurrogatePairException$0(lowChar, highChar);
		}
		this.AdvanceState($asm07.System.Xml.XmlWellFormedWriter.Token.Text);
		if (this.SaveAttrValue) {
			this.attrValueCache.WriteSurrogateCharEntity(lowChar, highChar);
		} else {
			this.writer.WriteSurrogateCharEntity(lowChar, highChar);
		}
	} catch ($exception) {
		this.currentState = $asm07.System.Xml.XmlWellFormedWriter.State.Error;
		throw $exception;
	}
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.WriteWhitespace = function (ws) {
	try {
		if (ws === null) {
			ws = System.String.Empty;
		}
		if (!$asm07.System.Xml.XmlCharType.Instance.IsOnlyWhitespace(ws)) {
			throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_NonWhitespace")]);
		}
		this.AdvanceState($asm07.System.Xml.XmlWellFormedWriter.Token.Whitespace);
		if (this.SaveAttrValue) {
			this.attrValueCache.WriteWhitespace(ws);
		} else {
			this.writer.WriteWhitespace(ws);
		}
	} catch ($exception) {
		this.currentState = $asm07.System.Xml.XmlWellFormedWriter.State.Error;
		throw $exception;
	}
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.WriteString = function (text) {
	try {
		if (text !== null) {
			this.AdvanceState($asm07.System.Xml.XmlWellFormedWriter.Token.Text);
			if (this.SaveAttrValue) {
				this.attrValueCache.WriteString(text);
			} else {
				this.writer.WriteString(text);
			}
		}
	} catch ($exception) {
		this.currentState = $asm07.System.Xml.XmlWellFormedWriter.State.Error;
		throw $exception;
	}
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.WriteChars = function (buffer, index, count) {
	try {
		if (buffer === null) {
			throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["buffer"]);
		}
		if (index < 0) {
			throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["index"]);
		}
		if (count < 0) {
			throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["count"]);
		}
		if (count > (buffer.length - index)) {
			throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["count"]);
		}
		this.AdvanceState($asm07.System.Xml.XmlWellFormedWriter.Token.Text);
		if (this.SaveAttrValue) {
			this.attrValueCache.WriteChars(buffer, index, count);
		} else {
			this.writer.WriteChars(buffer, index, count);
		}
	} catch ($exception) {
		this.currentState = $asm07.System.Xml.XmlWellFormedWriter.State.Error;
		throw $exception;
	}
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.WriteRaw$0 = function (buffer, index, count) {
	try {
		if (buffer === null) {
			throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["buffer"]);
		}
		if (index < 0) {
			throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["index"]);
		}
		if (count < 0) {
			throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["count"]);
		}
		if (count > (buffer.length - index)) {
			throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["count"]);
		}
		this.AdvanceState($asm07.System.Xml.XmlWellFormedWriter.Token.RawData);
		if (this.SaveAttrValue) {
			this.attrValueCache.WriteRaw$0(buffer, index, count);
		} else {
			this.writer.WriteRaw$0(buffer, index, count);
		}
	} catch ($exception) {
		this.currentState = $asm07.System.Xml.XmlWellFormedWriter.State.Error;
		throw $exception;
	}
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.WriteRaw$1 = function (data) {
	try {
		if (data !== null) {
			this.AdvanceState($asm07.System.Xml.XmlWellFormedWriter.Token.RawData);
			if (this.SaveAttrValue) {
				this.attrValueCache.WriteRaw$1(data);
			} else {
				this.writer.WriteRaw$1(data);
			}
		}
	} catch ($exception) {
		this.currentState = $asm07.System.Xml.XmlWellFormedWriter.State.Error;
		throw $exception;
	}
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.WriteBase64 = function (buffer, index, count) {
	try {
		if (buffer === null) {
			throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["buffer"]);
		}
		if (index < 0) {
			throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["index"]);
		}
		if (count < 0) {
			throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["count"]);
		}
		if (count > (buffer.length - index)) {
			throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["count"]);
		}
		this.AdvanceState($asm07.System.Xml.XmlWellFormedWriter.Token.Base64);
		this.writer.WriteBase64(buffer, index, count);
	} catch ($exception) {
		this.currentState = $asm07.System.Xml.XmlWellFormedWriter.State.Error;
		throw $exception;
	}
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.Close = function () {
	if (this.currentState !== $asm07.System.Xml.XmlWellFormedWriter.State.Closed) {
		try {
		__loop0__: 
			while ((this.currentState !== $asm07.System.Xml.XmlWellFormedWriter.State.Error) && (this.elemTop > 0)) {
				this.WriteEndElement();
			}
			if (!(!this.InBase64 || (this.rawWriter === null))) {
				this.rawWriter.WriteEndBase64();
			}
			this.writer.Flush();
		} finally {
			try {
				if (this.rawWriter !== null) {
					this.rawWriter.Close(this.WriteState);
				} else {
					this.writer.Close();
				}
			} finally {
				this.currentState = $asm07.System.Xml.XmlWellFormedWriter.State.Closed;
			}
		}
	}
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.Flush = function () {
	try {
		this.writer.Flush();
	} catch ($exception) {
		this.currentState = $asm07.System.Xml.XmlWellFormedWriter.State.Error;
		throw $exception;
	}
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.LookupPrefix = function (ns) {
	try {
		if (ns === null) {
			throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["ns"]);
		}
	__loop0__: 
		for (var i = this.nsTop; i >= 0; --i) {
			if (this.nsStack[i].namespaceUri == ns) {
				var prefix = this.nsStack[i].prefix;
			__loop1__: 
				for (++i; i <= this.nsTop; ++i) {
					if (this.nsStack[i].prefix == prefix) {
						var result = null;
						return result;
					}
				}
				result = prefix;
				return result;
			}
		}
		result = this.predefinedNamespaces ? this.predefinedNamespaces.IXmlNamespaceResolver_LookupPrefix(ns) : null;
	} catch ($exception) {
		this.currentState = $asm07.System.Xml.XmlWellFormedWriter.State.Error;
		throw $exception;
	}
	return result;
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.get_XmlSpace = function () {
__loop0__: 
	for (var num = this.elemTop; (num >= 0) && (this.elemScopeStack[num].xmlSpace === -1); --num) {
	}
	return this.elemScopeStack[num].xmlSpace;
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.get_XmlLang = function () {
__loop0__: 
	for (var num = this.elemTop; (num > 0) && (this.elemScopeStack[num].xmlLang === null); --num) {
	}
	return this.elemScopeStack[num].xmlLang;
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.WriteQualifiedName = function (localName, ns) {
	try {
		if (!((localName !== null) && (localName.length !== 0))) {
			throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_EmptyLocalName")]);
		}
		this.CheckNCName(localName);
		this.AdvanceState($asm07.System.Xml.XmlWellFormedWriter.Token.Text);
		var text = System.String.Empty;
		if (!((ns === null) || (ns.length === 0))) {
			text = this.LookupPrefix(ns);
			if (text === null) {
				if (this.currentState !== $asm07.System.Xml.XmlWellFormedWriter.State.Attribute) {
					throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm07.System.Xml.Res.GetString$0("Xml_UndefNamespace", [ns])]);
				}
				text = this.GeneratePrefix();
				this.PushNamespaceImplicit(text, ns);
			}
		}
		if (!(!this.SaveAttrValue && this.rawWriter)) {
			if (text.length !== 0) {
				this.WriteString(text);
				this.WriteString(":");
			}
			this.WriteString(localName);
		} else {
			this.rawWriter.WriteQualifiedName$1(text, localName, ns);
		}
	} catch ($exception) {
		this.currentState = $asm07.System.Xml.XmlWellFormedWriter.State.Error;
		throw $exception;
	}
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.WriteValue$0 = function (value) {
	try {
		this.AdvanceState($asm07.System.Xml.XmlWellFormedWriter.Token.AtomicValue);
		this.writer.WriteValue$2(value);
	} catch ($exception) {
		this.currentState = $asm07.System.Xml.XmlWellFormedWriter.State.Error;
		throw $exception;
	}
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.WriteValue$1 = function (value) {
	try {
		this.AdvanceState($asm07.System.Xml.XmlWellFormedWriter.Token.AtomicValue);
		this.writer.WriteValue$3(value);
	} catch ($exception) {
		this.currentState = $asm07.System.Xml.XmlWellFormedWriter.State.Error;
		throw $exception;
	}
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.WriteValue$2 = function (value) {
	try {
		this.AdvanceState($asm07.System.Xml.XmlWellFormedWriter.Token.AtomicValue);
		this.writer.WriteValue$4(value);
	} catch ($exception) {
		this.currentState = $asm07.System.Xml.XmlWellFormedWriter.State.Error;
		throw $exception;
	}
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.WriteValue$3 = function (value) {
	try {
		this.AdvanceState($asm07.System.Xml.XmlWellFormedWriter.Token.AtomicValue);
		this.writer.WriteValue$5(value);
	} catch ($exception) {
		this.currentState = $asm07.System.Xml.XmlWellFormedWriter.State.Error;
		throw $exception;
	}
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.WriteValue$4 = function (value) {
	try {
		this.AdvanceState($asm07.System.Xml.XmlWellFormedWriter.Token.AtomicValue);
		this.writer.WriteValue$6(value);
	} catch ($exception) {
		this.currentState = $asm07.System.Xml.XmlWellFormedWriter.State.Error;
		throw $exception;
	}
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.WriteValue$5 = function (value) {
	try {
		this.AdvanceState($asm07.System.Xml.XmlWellFormedWriter.Token.AtomicValue);
		this.writer.WriteValue$7(value);
	} catch ($exception) {
		this.currentState = $asm07.System.Xml.XmlWellFormedWriter.State.Error;
		throw $exception;
	}
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.WriteValue$6 = function (value) {
	try {
		this.AdvanceState($asm07.System.Xml.XmlWellFormedWriter.Token.AtomicValue);
		this.writer.WriteValue$8(value);
	} catch ($exception) {
		this.currentState = $asm07.System.Xml.XmlWellFormedWriter.State.Error;
		throw $exception;
	}
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.WriteValue$7 = function (value) {
	try {
		if (value !== null) {
			if (this.SaveAttrValue) {
				this.AdvanceState($asm07.System.Xml.XmlWellFormedWriter.Token.Text);
				this.attrValueCache.WriteValue(value);
			} else {
				this.AdvanceState($asm07.System.Xml.XmlWellFormedWriter.Token.AtomicValue);
				this.writer.WriteValue$1(value);
			}
		}
	} catch ($exception) {
		this.currentState = $asm07.System.Xml.XmlWellFormedWriter.State.Error;
		throw $exception;
	}
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.WriteValue$8 = function (value) {
	try {
		if (!(!this.SaveAttrValue || (JSIL.TryCast(value, System.String) === null))) {
			this.AdvanceState($asm07.System.Xml.XmlWellFormedWriter.Token.Text);
			this.attrValueCache.WriteValue(JSIL.Cast(value, System.String));
		} else {
			this.AdvanceState($asm07.System.Xml.XmlWellFormedWriter.Token.AtomicValue);
			this.writer.WriteValue$0(value);
		}
	} catch ($exception) {
		this.currentState = $asm07.System.Xml.XmlWellFormedWriter.State.Error;
		throw $exception;
	}
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.WriteBinHex = function (buffer, index, count) {
	if (this.IsClosedOrErrorState) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_ClosedOrError")]);
	}
	try {
		this.AdvanceState($asm07.System.Xml.XmlWellFormedWriter.Token.Text);
		System.Xml.XmlWriter.prototype.WriteBinHex.call(this, buffer, index, count);
	} catch ($exception) {
		this.currentState = $asm07.System.Xml.XmlWellFormedWriter.State.Error;
		throw $exception;
	}
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.get_SaveAttrValue = function () {
	return (this.specAttr !== $asm07.System.Xml.XmlWellFormedWriter.SpecialAttribute.No);
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.get_InBase64 = function () {
	return ((this.currentState === $asm07.System.Xml.XmlWellFormedWriter.State.B64Content) || 
		(this.currentState === $asm07.System.Xml.XmlWellFormedWriter.State.B64Attribute) || (this.currentState === $asm07.System.Xml.XmlWellFormedWriter.State.RootLevelB64Attr));
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.SetSpecialAttribute = function (special) {
	this.specAttr = special;
	if ($asm07.System.Xml.XmlWellFormedWriter.State.Attribute === this.currentState) {
		this.currentState = $asm07.System.Xml.XmlWellFormedWriter.State.SpecialAttr;
	} else if ($asm07.System.Xml.XmlWellFormedWriter.State.RootLevelAttr === this.currentState) {
		this.currentState = $asm07.System.Xml.XmlWellFormedWriter.State.RootLevelSpecAttr;
	}
	if (this.attrValueCache === null) {
		this.attrValueCache = new $asm07.System.Xml.XmlWellFormedWriter.AttributeValueCache();
	}
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.WriteStartDocumentImpl = function (standalone) {
	try {
		this.AdvanceState($asm07.System.Xml.XmlWellFormedWriter.Token.StartDocument);
		if (this.conformanceLevel === 0) {
			this.conformanceLevel = System.Xml.ConformanceLevel.Document;
			this.stateTable = $asm07.System.Xml.XmlWellFormedWriter.StateTableDocument;
		} else if (this.conformanceLevel === System.Xml.ConformanceLevel.Fragment) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_CannotStartDocumentOnFragment")]);
		}
		if (this.rawWriter !== null) {
			if (!this.xmlDeclFollows) {
				this.rawWriter.WriteXmlDeclaration$0(standalone);
			}
		} else {
			this.writer.WriteStartDocument$0();
		}
	} catch ($exception) {
		this.currentState = $asm07.System.Xml.XmlWellFormedWriter.State.Error;
		throw $exception;
	}
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.StartFragment = function () {
	this.conformanceLevel = System.Xml.ConformanceLevel.Fragment;
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.PushNamespaceImplicit = function (prefix, ns) {
	var num = this.LookupNamespaceIndex(prefix);
	if (num !== -1) {
		if (num > this.elemScopeStack[this.elemTop].prevNSTop) {
			if (this.nsStack[num].namespaceUri != ns) {
				throw JSIL.New(System.Xml.XmlException, "_ctor$5", ["Xml_RedefinePrefix", JSIL.Array.New(System.String, [prefix, this.nsStack[num].namespaceUri, ns])]);
			}
			return;
		} else if (this.nsStack[num].kind === $asm07.System.Xml.XmlWellFormedWriter.NamespaceKind.Special) {
			if (!(prefix == "xml")) {
				throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_XmlnsPrefix")]);
			}
			if (ns != this.nsStack[num].namespaceUri) {
				throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_XmlPrefix")]);
			}
			var kind = $asm07.System.Xml.XmlWellFormedWriter.NamespaceKind.Implied;
		} else {
			kind = this.nsStack[num].namespaceUri == ns ? $asm07.System.Xml.XmlWellFormedWriter.NamespaceKind.Implied : $asm07.System.Xml.XmlWellFormedWriter.NamespaceKind.NeedToWrite;
		}
	} else {
		if (!(!((ns == "http://www.w3.org/XML/1998/namespace") && 
					(prefix != "xml")) && (!(ns == "http://www.w3.org/2000/xmlns/") || 
					!(prefix != "xmlns")))) {
			throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm07.System.Xml.Res.GetString$0("Xml_NamespaceDeclXmlXmlns", [prefix])]);
		}
		if (this.predefinedNamespaces !== null) {
			var a = this.predefinedNamespaces.IXmlNamespaceResolver_LookupNamespace(prefix);
			kind = a == ns ? $asm07.System.Xml.XmlWellFormedWriter.NamespaceKind.Implied : $asm07.System.Xml.XmlWellFormedWriter.NamespaceKind.NeedToWrite;
		} else {
			kind = $asm07.System.Xml.XmlWellFormedWriter.NamespaceKind.NeedToWrite;
		}
	}
	this.AddNamespace(prefix, ns, kind);
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.PushNamespaceExplicit = function (prefix, ns) {
	var result = true;
	var num = this.LookupNamespaceIndex(prefix);
	if (num !== -1) {
		if (num > this.elemScopeStack[this.elemTop].prevNSTop) {
			if (this.nsStack[num].namespaceUri != ns) {
				throw JSIL.New(System.Xml.XmlException, "_ctor$5", ["Xml_RedefinePrefix", JSIL.Array.New(System.String, [prefix, this.nsStack[num].namespaceUri, ns])]);
			}
			var kind = this.nsStack[num].kind;
			if (!JSIL.Cast(kind, System.Boolean)) {
				throw $asm07.System.Xml.XmlWellFormedWriter.DupAttrException((prefix.length === 0) ? System.String.Empty : "xmlns", (prefix.length === 0) ? "xmlns" : prefix);
			}
			if (!(!this.omitDuplNamespaces || (kind === $asm07.System.Xml.XmlWellFormedWriter.NamespaceKind.NeedToWrite))) {
				result = false;
			}
			this.nsStack[num].kind = $asm07.System.Xml.XmlWellFormedWriter.NamespaceKind.Written;
			return result;
		} else if (!(!(this.nsStack[num].namespaceUri == ns) || !this.omitDuplNamespaces)) {
			result = false;
		}
	} else if (this.predefinedNamespaces !== null) {
		var a = this.predefinedNamespaces.IXmlNamespaceResolver_LookupNamespace(prefix);
		if (!(!(a == ns) || !this.omitDuplNamespaces)) {
			result = false;
		}
	}
	if (!(!((ns == "http://www.w3.org/XML/1998/namespace") && 
				(prefix != "xml")) && (!(ns == "http://www.w3.org/2000/xmlns/") || 
				!(prefix != "xmlns")))) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm07.System.Xml.Res.GetString$0("Xml_NamespaceDeclXmlXmlns", [prefix])]);
	}
	if (!((prefix.length <= 0) || ((prefix[0]) !== "x"))) {
		if (prefix == "xml") {
			if (ns != "http://www.w3.org/XML/1998/namespace") {
				throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_XmlPrefix")]);
			}
		} else if (prefix == "xmlns") {
			throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_XmlnsPrefix")]);
		}
	}
	this.AddNamespace(prefix, ns, $asm07.System.Xml.XmlWellFormedWriter.NamespaceKind.Written);
	return result;
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.AddNamespace = function (prefix, ns, kind) {
	var num = ++this.nsTop;
	if (num === this.nsStack.length) {
		var destinationArray = JSIL.Array.New($asm07.System.Xml.XmlWellFormedWriter.Namespace, (num * 2));
		System.Array.Copy$0(this.nsStack, destinationArray, num);
		this.nsStack = destinationArray;
	}
	this.nsStack[num].Set(prefix, ns, kind);
	if (this.useNsHashtable) {
		this.AddToNamespaceHashtable(this.nsTop);
		return;
	}
	if (this.nsTop === 16) {
		this.nsHashtable = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.String, System.Int32), "_ctor$2", [this.hasher]);
	__loop0__: 
		for (var i = 0; i <= this.nsTop; ++i) {
			this.AddToNamespaceHashtable(i);
		}
		this.useNsHashtable = true;
	}
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.AddToNamespaceHashtable = function (namespaceIndex) {
	var prevNsIndex = new JSIL.Variable(0);
	var prefix = this.nsStack[namespaceIndex].prefix;
	if (this.nsHashtable.TryGetValue(prefix, /* ref */ prevNsIndex)) {
		this.nsStack[namespaceIndex].prevNsIndex = prevNsIndex.value;
	}
	this.nsHashtable.set_Item(prefix, namespaceIndex);
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.LookupNamespaceIndex = function (prefix) {
	var result = new JSIL.Variable(0);
	if (this.useNsHashtable) {
		if (this.nsHashtable.TryGetValue(prefix, /* ref */ result)) {
			return result.value;
		}
	} else {
	__loop0__: 
		for (var i = this.nsTop; i >= 0; --i) {
			if (this.nsStack[i].prefix == prefix) {
				return i;
			}
		}
	}
	return -1;
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.PopNamespaces = function (indexFrom, indexTo) {
__loop0__: 
	for (var i = indexTo; i >= indexFrom; --i) {
		if (this.nsStack[i].prevNsIndex === -1) {
			this.nsHashtable.Remove(this.nsStack[i].prefix);
		} else {
			this.nsHashtable.set_Item(this.nsStack[i].prefix, this.nsStack[i].prevNsIndex);
		}
	}
};
$asm07.System.Xml.XmlWellFormedWriter.DupAttrException = function (prefix, localName) {
	var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
	if (prefix.length > 0) {
		stringBuilder.Append$2(prefix);
		stringBuilder.Append$7(":");
	}
	stringBuilder.Append$2(localName);
	return JSIL.New(System.Xml.XmlException, "_ctor$7", ["Xml_DupAttributeName", stringBuilder.toString()]);
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.AdvanceState = function (token) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				if (this.currentState < $asm07.System.Xml.XmlWellFormedWriter.State.Closed) {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
							__loop0__: 
								while (true) {
									var state = this.stateTable[((Math.floor(token) << 4) + this.currentState)];
									if (state < $asm07.System.Xml.XmlWellFormedWriter.State.Error) {
										break __loop0__;
									}
									var state2 = state;
									if (state2 !== $asm07.System.Xml.XmlWellFormedWriter.State.Error) {
										switch (Number(state2)) {
											case 101: 
												__label1__ = "IL_E7";
												continue __step1__;
											case 102: 
												__label1__ = "IL_F4";
												continue __step1__;
											case 103: 
												__label1__ = "IL_101";
												continue __step1__;
											case 104: 
												__label1__ = "IL_10E";
												continue __step1__;
											case 106: 
												__label1__ = "IL_11B";
												continue __step1__;
											case 107: 
												__label1__ = "IL_128";
												continue __step1__;
											case 108: 
												__label1__ = "IL_13B";
												continue __step1__;
											case 109: 
												__label1__ = "IL_14E";
												continue __step1__;
											case 111: 
												__label1__ = "IL_161";
												continue __step1__;
											case 112: 
												if (this.rawWriter !== null) {
													this.rawWriter.WriteEndBase64();
												}
												this.currentState = $asm07.System.Xml.XmlWellFormedWriter.State.Content;
												continue __step1__;
												;
											case 113: 
												if (this.rawWriter !== null) {
													this.rawWriter.WriteEndBase64();
												}
												this.currentState = $asm07.System.Xml.XmlWellFormedWriter.State.Attribute;
												continue __step1__;
												;
											case 114: 
												if (this.rawWriter !== null) {
													this.rawWriter.WriteEndBase64();
												}
												this.currentState = $asm07.System.Xml.XmlWellFormedWriter.State.RootLevelAttr;
												continue __step1__;
												;
											case 115: 
												__label1__ = "IL_1CC";
												continue __step1__;
											case 116: 
												__label1__ = "IL_1D6";
												continue __step1__;
											case 117: 
												__label1__ = "IL_1E0";
												continue __step1__;
											case 118: 
												__label1__ = "IL_1EA";
												continue __step1__;
										}
										break __loop0__;
									}
									__label1__ = "IL_D5";
									continue __step1__;
								}
								__label1__ = "IL_1F3";
								continue __step1__;
								__label1__ = "IL_D5";
								continue __step1__;
								break;
							case "IL_D5":
								this.ThrowInvalidStateTransition(token, this.currentState);
								__label1__ = "IL_1F3";
								continue __step1__;
								__label1__ = "IL_E7";
								continue __step1__;
								break;
							case "IL_E7":
								this.StartElementContent();
								state = $asm07.System.Xml.XmlWellFormedWriter.State.Content;
								__label1__ = "IL_1F3";
								continue __step1__;
								__label1__ = "IL_F4";
								continue __step1__;
								break;
							case "IL_F4":
								this.StartElementContent();
								state = $asm07.System.Xml.XmlWellFormedWriter.State.Element;
								__label1__ = "IL_1F3";
								continue __step1__;
								__label1__ = "IL_101";
								continue __step1__;
								break;
							case "IL_101":
								this.StartElementContent();
								state = $asm07.System.Xml.XmlWellFormedWriter.State.B64Content;
								__label1__ = "IL_1F3";
								continue __step1__;
								__label1__ = "IL_10E";
								continue __step1__;
								break;
							case "IL_10E":
								this.WriteStartDocument$0();
								state = $asm07.System.Xml.XmlWellFormedWriter.State.Document;
								__label1__ = "IL_1F3";
								continue __step1__;
								__label1__ = "IL_11B";
								continue __step1__;
								break;
							case "IL_11B":
								this.WriteStartDocument$0();
								state = $asm07.System.Xml.XmlWellFormedWriter.State.Element;
								__label1__ = "IL_1F3";
								continue __step1__;
								__label1__ = "IL_128";
								continue __step1__;
								break;
							case "IL_128":
								this.WriteEndAttribute();
								this.StartElementContent();
								state = $asm07.System.Xml.XmlWellFormedWriter.State.Element;
								__label1__ = "IL_1F3";
								continue __step1__;
								__label1__ = "IL_13B";
								continue __step1__;
								break;
							case "IL_13B":
								this.WriteEndAttribute();
								this.StartElementContent();
								state = $asm07.System.Xml.XmlWellFormedWriter.State.Content;
								__label1__ = "IL_1F3";
								continue __step1__;
								__label1__ = "IL_14E";
								continue __step1__;
								break;
							case "IL_14E":
								this.WriteEndAttribute();
								this.StartElementContent();
								state = $asm07.System.Xml.XmlWellFormedWriter.State.Content;
								__label1__ = "IL_1F3";
								continue __step1__;
								__label1__ = "IL_161";
								continue __step1__;
								break;
							case "IL_161":
								this.WriteEndAttribute();
								state = $asm07.System.Xml.XmlWellFormedWriter.State.Attribute;
								__label1__ = "IL_1F3";
								continue __step1__;
								__label1__ = "IL_1CC";
								continue __step1__;
								break;
							case "IL_1CC":
								this.StartFragment();
								state = $asm07.System.Xml.XmlWellFormedWriter.State.Element;
								__label1__ = "IL_1F3";
								continue __step1__;
								__label1__ = "IL_1D6";
								continue __step1__;
								break;
							case "IL_1D6":
								this.StartFragment();
								state = $asm07.System.Xml.XmlWellFormedWriter.State.Content;
								__label1__ = "IL_1F3";
								continue __step1__;
								__label1__ = "IL_1E0";
								continue __step1__;
								break;
							case "IL_1E0":
								this.StartFragment();
								state = $asm07.System.Xml.XmlWellFormedWriter.State.B64Content;
								__label1__ = "IL_1F3";
								continue __step1__;
								__label1__ = "IL_1EA";
								continue __step1__;
								break;
							case "IL_1EA":
								this.WriteEndAttribute();
								state = $asm07.System.Xml.XmlWellFormedWriter.State.RootLevelAttr;
								__label1__ = "IL_1F3";
								continue __step1__;
								break;
							case "IL_1F3":
								this.currentState = state;
								return;
								break __step1__;
						}
					}
				}
				if (!((this.currentState !== $asm07.System.Xml.XmlWellFormedWriter.State.Closed) && (this.currentState !== $asm07.System.Xml.XmlWellFormedWriter.State.Error))) {
					throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm07.System.Xml.Res.GetString$2("Xml_ClosedOrError")]);
				}
				throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm07.System.Xml.Res.GetString$0("Xml_WrongToken", [$asm07.System.Xml.XmlWellFormedWriter.tokenName[Math.floor(token)], $asm07.System.Xml.XmlWellFormedWriter.GetStateName(this.currentState)])]);
				break __step0__;
		}
	}
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.StartElementContent = function () {
	var prevNSTop = this.elemScopeStack[this.elemTop].prevNSTop;
__loop0__: 
	for (var i = this.nsTop; i > prevNSTop; --i) {
		if (this.nsStack[i].kind === $asm07.System.Xml.XmlWellFormedWriter.NamespaceKind.NeedToWrite) {
			this.nsStack[i].WriteDecl(this.writer, this.rawWriter);
		}
	}
	if (this.rawWriter !== null) {
		this.rawWriter.StartElementContent();
	}
};
$asm07.System.Xml.XmlWellFormedWriter.GetStateName = function (state) {
	if (state >= $asm07.System.Xml.XmlWellFormedWriter.State.Error) {
		return "Error";
	}
	return $asm07.System.Xml.XmlWellFormedWriter.stateName[Math.floor(state)];
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.LookupNamespace = function (prefix) {
__loop0__: 
	for (var i = this.nsTop; i >= 0; --i) {
		if (this.nsStack[i].prefix == prefix) {
			return this.nsStack[i].namespaceUri;
		}
	}
	if (this.predefinedNamespaces === null) {
		return null;
	}
	return this.predefinedNamespaces.IXmlNamespaceResolver_LookupNamespace(prefix);
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.LookupLocalNamespace = function (prefix) {
__loop0__: 
	for (var i = this.nsTop; i > this.elemScopeStack[this.elemTop].prevNSTop; --i) {
		if (this.nsStack[i].prefix == prefix) {
			return this.nsStack[i].namespaceUri;
		}
	}
	return null;
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.GeneratePrefix = function () {
	var text = (("p" + ((this.nsTop - 2)).toString()));
	if (this.LookupNamespace(text) === null) {
		return text;
	}
	var num = 0;
__loop0__: 
	do {
		var text2 = ((text + (num).toString()));
		++num;
	} while (this.LookupNamespace(text2) !== null);
	return text2;
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.CheckNCName = function (ncname) {
	var length = ncname.length;
	if (this.xmlCharType.charProperties[(ncname[0]).charCodeAt(0)] & 4) {
	__loop0__: 
		for (var i = 1; i < length; ++i) {
			if (!(this.xmlCharType.charProperties[ncname[i].charCodeAt(0)] & 8)) {
				throw $asm07.System.Xml.XmlWellFormedWriter.InvalidCharsException(ncname, i);
			}
		}
		return;
	}
	throw $asm07.System.Xml.XmlWellFormedWriter.InvalidCharsException(ncname, 0);
};
$asm07.System.Xml.XmlWellFormedWriter.InvalidCharsException = function (name, badCharIndex) {
	var array = System.Xml.XmlException.BuildCharExceptionArgs$0(name, badCharIndex);
	var args = JSIL.Array.New(System.String, [name, array[0], array[1]]);
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm07.System.Xml.Res.GetString$0("Xml_InvalidNameCharsDetail", args)]);
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.ThrowInvalidStateTransition = function (token, currentState) {
	var string = $asm07.System.Xml.Res.GetString$0("Xml_WrongToken", [$asm07.System.Xml.XmlWellFormedWriter.tokenName[Math.floor(token)], $asm07.System.Xml.XmlWellFormedWriter.GetStateName(currentState)]);
	if (!(((currentState !== $asm07.System.Xml.XmlWellFormedWriter.State.Start) && 
				(currentState !== $asm07.System.Xml.XmlWellFormedWriter.State.AfterRootEle)) || (this.conformanceLevel !== System.Xml.ConformanceLevel.Document))) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [JSIL.ConcatString(string, " ", $asm07.System.Xml.Res.GetString$2("Xml_ConformanceLevelFragment"))]);
	}
	throw JSIL.New(System.InvalidOperationException, "_ctor$1", [string]);
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.get_IsClosedOrErrorState = function () {
	return (this.currentState >= $asm07.System.Xml.XmlWellFormedWriter.State.Closed);
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.AddAttribute = function (prefix, localName, namespaceName) {
	var num = this.attrCount++;
	if (num === this.attrStack.length) {
		var destinationArray = JSIL.Array.New($asm07.System.Xml.XmlWellFormedWriter.AttrName, (num * 2));
		System.Array.Copy$0(this.attrStack, destinationArray, num);
		this.attrStack = destinationArray;
	}
	this.attrStack[num].Set(prefix, localName, namespaceName);
	if (this.attrCount < 14) {
	__loop0__: 
		for (var i = 0; i < num; ++i) {
			if (this.attrStack[i].IsDuplicate(prefix, localName, namespaceName)) {
				throw $asm07.System.Xml.XmlWellFormedWriter.DupAttrException(prefix, localName);
			}
		}
		return;
	}
	if (this.attrCount === 14) {
		if (this.attrHashTable === null) {
			this.attrHashTable = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.String, System.Int32), "_ctor$2", [this.hasher]);
		}
	__loop1__: 
		for (var j = 0; j < num; ++j) {
			this.AddToAttrHashTable(j);
		}
	}
	this.AddToAttrHashTable(num);
__loop2__: 
	for (var k = this.attrStack[num].prev; k > 0; k = this.attrStack[k].prev) {
		--k;
		if (this.attrStack[k].IsDuplicate(prefix, localName, namespaceName)) {
			throw $asm07.System.Xml.XmlWellFormedWriter.DupAttrException(prefix, localName);
		}
	}
};
$asm07.System.Xml.XmlWellFormedWriter.prototype.AddToAttrHashTable = function (attributeIndex) {
	var localName = this.attrStack[attributeIndex].localName;
	var count = this.attrHashTable.Count;
	this.attrHashTable.set_Item(localName, 0);
	if (count !== this.attrHashTable.Count) {
		return;
	}
__loop0__: 
	for (var num = (attributeIndex - 1); !((num < 0) || (this.attrStack[num].localName == localName)); --num) {
	}
	this.attrStack[attributeIndex].prev = (num + 1);
};
JSIL.OverloadedMethod($asm07.System.Xml.XmlWellFormedWriter.prototype, "WriteStartDocument", [
		["WriteStartDocument$0", []], 
		["WriteStartDocument$1", [System.Boolean]]
	]);
JSIL.OverloadedMethod($asm07.System.Xml.XmlWellFormedWriter.prototype, "WriteRaw", [
		["WriteRaw$0", [System.Array.Of(System.Char), System.Int32, System.Int32]], 
		["WriteRaw$1", [System.String]]
	]);
JSIL.OverloadedMethod($asm07.System.Xml.XmlWellFormedWriter.prototype, "WriteValue", [
		["WriteValue$0", [System.Boolean]], 
		["WriteValue$1", [System.DateTime]], 
		["WriteValue$2", [System.Double]], 
		["WriteValue$3", [System.Single]], 
		["WriteValue$4", [System.Decimal]], 
		["WriteValue$5", [System.Int32]], 
		["WriteValue$6", [System.Int64]], 
		["WriteValue$7", [System.String]], 
		["WriteValue$8", [System.Object]]
	]);
JSIL.MakeProperty($asm07.System.Xml.XmlWellFormedWriter.prototype, "WriteState", 
	$asm07.System.Xml.XmlWellFormedWriter.prototype.get_WriteState, null);
JSIL.MakeProperty($asm07.System.Xml.XmlWellFormedWriter.prototype, "Settings", 
	$asm07.System.Xml.XmlWellFormedWriter.prototype.get_Settings, null);
JSIL.MakeProperty($asm07.System.Xml.XmlWellFormedWriter.prototype, "XmlSpace", 
	$asm07.System.Xml.XmlWellFormedWriter.prototype.get_XmlSpace, null);
JSIL.MakeProperty($asm07.System.Xml.XmlWellFormedWriter.prototype, "XmlLang", 
	$asm07.System.Xml.XmlWellFormedWriter.prototype.get_XmlLang, null);
JSIL.MakeProperty($asm07.System.Xml.XmlWellFormedWriter.prototype, "SaveAttrValue", 
	$asm07.System.Xml.XmlWellFormedWriter.prototype.get_SaveAttrValue, null);
JSIL.MakeProperty($asm07.System.Xml.XmlWellFormedWriter.prototype, "InBase64", 
	$asm07.System.Xml.XmlWellFormedWriter.prototype.get_InBase64, null);
JSIL.MakeProperty($asm07.System.Xml.XmlWellFormedWriter.prototype, "IsClosedOrErrorState", 
	$asm07.System.Xml.XmlWellFormedWriter.prototype.get_IsClosedOrErrorState, null);
Object.defineProperty($asm07.System.Xml.XmlWellFormedWriter, "ElementStackInitialSize", {
		"value": 8}
);
Object.defineProperty($asm07.System.Xml.XmlWellFormedWriter, "NamespaceStackInitialSize", {
		"value": 8}
);
Object.defineProperty($asm07.System.Xml.XmlWellFormedWriter, "AttributeArrayInitialSize", {
		"value": 8}
);
Object.defineProperty($asm07.System.Xml.XmlWellFormedWriter, "MaxAttrDuplWalkCount", {
		"value": 14}
);
Object.defineProperty($asm07.System.Xml.XmlWellFormedWriter, "MaxNamespacesWalkCount", {
		"value": 16}
);
$asm07.System.Xml.XmlWellFormedWriter.prototype.writer = null;
$asm07.System.Xml.XmlWellFormedWriter.prototype.rawWriter = null;
$asm07.System.Xml.XmlWellFormedWriter.prototype.predefinedNamespaces = null;
$asm07.System.Xml.XmlWellFormedWriter.prototype.nsStack = null;
$asm07.System.Xml.XmlWellFormedWriter.prototype.nsTop = 0;
$asm07.System.Xml.XmlWellFormedWriter.prototype.nsHashtable = null;
$asm07.System.Xml.XmlWellFormedWriter.prototype.useNsHashtable = false;
$asm07.System.Xml.XmlWellFormedWriter.prototype.elemScopeStack = null;
$asm07.System.Xml.XmlWellFormedWriter.prototype.elemTop = 0;
$asm07.System.Xml.XmlWellFormedWriter.prototype.attrStack = null;
$asm07.System.Xml.XmlWellFormedWriter.prototype.attrCount = 0;
$asm07.System.Xml.XmlWellFormedWriter.prototype.attrHashTable = null;
$asm07.System.Xml.XmlWellFormedWriter.prototype.specAttr = 0;
$asm07.System.Xml.XmlWellFormedWriter.prototype.attrValueCache = null;
$asm07.System.Xml.XmlWellFormedWriter.prototype.curDeclPrefix = null;
$asm07.System.Xml.XmlWellFormedWriter.prototype.stateTable = 0;
$asm07.System.Xml.XmlWellFormedWriter.prototype.currentState = 0;
$asm07.System.Xml.XmlWellFormedWriter.prototype.checkCharacters = false;
$asm07.System.Xml.XmlWellFormedWriter.prototype.omitDuplNamespaces = false;
$asm07.System.Xml.XmlWellFormedWriter.prototype.conformanceLevel = 0;
$asm07.System.Xml.XmlWellFormedWriter.prototype.dtdWritten = false;
$asm07.System.Xml.XmlWellFormedWriter.prototype.xmlDeclFollows = false;
$asm07.System.Xml.XmlWellFormedWriter.prototype.hasher = null;
$asm07.System.Xml.XmlWellFormedWriter.stateName = null;
$asm07.System.Xml.XmlWellFormedWriter.tokenName = null;
$asm07.System.Xml.XmlWellFormedWriter.state2WriteState = 0;
$asm07.System.Xml.XmlWellFormedWriter.StateTableDocument = 0;
$asm07.System.Xml.XmlWellFormedWriter.StateTableAuto = 0;
$asm07.System.Xml.XmlWellFormedWriter._cctor = function () {
	$asm07.System.Xml.XmlWellFormedWriter.stateName = JSIL.Array.New(System.String, ["Start", "TopLevel", "Document", "Element Start Tag", "Element Content", "Element Content", "Attribute", "EndRootElement", "Attribute", "Special Attribute", "End Document", "Root Level Attribute Value", "Root Level Special Attribute Value", "Root Level Base64 Attribute Value", "After Root Level Attribute", "Closed", "Error"]);
	$asm07.System.Xml.XmlWellFormedWriter.tokenName = JSIL.Array.New(System.String, ["StartDocument", "EndDocument", "PI", "Comment", "DTD", "StartElement", "EndElement", "StartAttribute", "EndAttribute", "Text", "CDATA", "Atomic value", "Base64", "RawData", "Whitespace"]);
	$asm07.System.Xml.XmlWellFormedWriter.state2WriteState = JSIL.Array.New(System.Xml.WriteState, [0, System.Xml.WriteState.Prolog, System.Xml.WriteState.Prolog, System.Xml.WriteState.Element, System.Xml.WriteState.Content, System.Xml.WriteState.Content, System.Xml.WriteState.Attribute, System.Xml.WriteState.Content, System.Xml.WriteState.Attribute, System.Xml.WriteState.Attribute, System.Xml.WriteState.Content, System.Xml.WriteState.Attribute, System.Xml.WriteState.Attribute, System.Xml.WriteState.Attribute, System.Xml.WriteState.Attribute, System.Xml.WriteState.Closed, System.Xml.WriteState.Error]);
	$asm07.System.Xml.XmlWellFormedWriter.StateTableDocument = JSIL.Array.New($asm07.System.Xml.XmlWellFormedWriter.State, [$asm07.System.Xml.XmlWellFormedWriter.State.Document, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64Cont, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64Cont, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.EndDocument, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.StartDoc, $asm07.System.Xml.XmlWellFormedWriter.State.TopLevel, $asm07.System.Xml.XmlWellFormedWriter.State.Document, $asm07.System.Xml.XmlWellFormedWriter.State.StartContent, $asm07.System.Xml.XmlWellFormedWriter.State.Content, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64Cont, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64Attr, $asm07.System.Xml.XmlWellFormedWriter.State.AfterRootEle, $asm07.System.Xml.XmlWellFormedWriter.State.EndAttrSCont, $asm07.System.Xml.XmlWellFormedWriter.State.EndAttrSCont, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.StartDoc, $asm07.System.Xml.XmlWellFormedWriter.State.TopLevel, $asm07.System.Xml.XmlWellFormedWriter.State.Document, $asm07.System.Xml.XmlWellFormedWriter.State.StartContent, $asm07.System.Xml.XmlWellFormedWriter.State.Content, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64Cont, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64Attr, $asm07.System.Xml.XmlWellFormedWriter.State.AfterRootEle, $asm07.System.Xml.XmlWellFormedWriter.State.EndAttrSCont, $asm07.System.Xml.XmlWellFormedWriter.State.EndAttrSCont, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.StartDoc, $asm07.System.Xml.XmlWellFormedWriter.State.TopLevel, $asm07.System.Xml.XmlWellFormedWriter.State.Document, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64Cont, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64Attr, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.StartDocEle, $asm07.System.Xml.XmlWellFormedWriter.State.Element, $asm07.System.Xml.XmlWellFormedWriter.State.Element, $asm07.System.Xml.XmlWellFormedWriter.State.StartContentEle, $asm07.System.Xml.XmlWellFormedWriter.State.Element, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64Cont, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64Attr, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.EndAttrSEle, $asm07.System.Xml.XmlWellFormedWriter.State.EndAttrSEle, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.StartContent, $asm07.System.Xml.XmlWellFormedWriter.State.Content, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64Cont, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64Attr, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.EndAttrEEle, $asm07.System.Xml.XmlWellFormedWriter.State.EndAttrEEle, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Attribute, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64Cont, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64Attr, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.EndAttrSAttr, $asm07.System.Xml.XmlWellFormedWriter.State.EndAttrSAttr, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64Cont, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64Attr, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Element, $asm07.System.Xml.XmlWellFormedWriter.State.Element, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.StartContent, $asm07.System.Xml.XmlWellFormedWriter.State.Content, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64Cont, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64Attr, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Attribute, $asm07.System.Xml.XmlWellFormedWriter.State.SpecialAttr, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.StartContent, $asm07.System.Xml.XmlWellFormedWriter.State.Content, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64Cont, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64Attr, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.EndAttrSCont, $asm07.System.Xml.XmlWellFormedWriter.State.EndAttrSCont, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.StartContent, $asm07.System.Xml.XmlWellFormedWriter.State.Content, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64Cont, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64Attr, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Attribute, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.StartContentB64, $asm07.System.Xml.XmlWellFormedWriter.State.B64Content, $asm07.System.Xml.XmlWellFormedWriter.State.B64Content, $asm07.System.Xml.XmlWellFormedWriter.State.B64Attribute, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.B64Attribute, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.StartDoc, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Document, $asm07.System.Xml.XmlWellFormedWriter.State.StartContent, $asm07.System.Xml.XmlWellFormedWriter.State.Content, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64Cont, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64Attr, $asm07.System.Xml.XmlWellFormedWriter.State.AfterRootEle, $asm07.System.Xml.XmlWellFormedWriter.State.Attribute, $asm07.System.Xml.XmlWellFormedWriter.State.SpecialAttr, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.StartDoc, $asm07.System.Xml.XmlWellFormedWriter.State.TopLevel, $asm07.System.Xml.XmlWellFormedWriter.State.Document, $asm07.System.Xml.XmlWellFormedWriter.State.StartContent, $asm07.System.Xml.XmlWellFormedWriter.State.Content, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64Cont, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64Attr, $asm07.System.Xml.XmlWellFormedWriter.State.AfterRootEle, $asm07.System.Xml.XmlWellFormedWriter.State.Attribute, $asm07.System.Xml.XmlWellFormedWriter.State.SpecialAttr, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error]);
	$asm07.System.Xml.XmlWellFormedWriter.StateTableAuto = JSIL.Array.New($asm07.System.Xml.XmlWellFormedWriter.State, [$asm07.System.Xml.XmlWellFormedWriter.State.Document, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64Cont, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64Cont, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.EndDocument, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.TopLevel, $asm07.System.Xml.XmlWellFormedWriter.State.TopLevel, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.StartContent, $asm07.System.Xml.XmlWellFormedWriter.State.Content, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64Cont, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64Attr, $asm07.System.Xml.XmlWellFormedWriter.State.AfterRootEle, $asm07.System.Xml.XmlWellFormedWriter.State.EndAttrSCont, $asm07.System.Xml.XmlWellFormedWriter.State.EndAttrSCont, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.TopLevel, $asm07.System.Xml.XmlWellFormedWriter.State.TopLevel, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.StartContent, $asm07.System.Xml.XmlWellFormedWriter.State.Content, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64Cont, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64Attr, $asm07.System.Xml.XmlWellFormedWriter.State.AfterRootEle, $asm07.System.Xml.XmlWellFormedWriter.State.EndAttrSCont, $asm07.System.Xml.XmlWellFormedWriter.State.EndAttrSCont, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.StartDoc, $asm07.System.Xml.XmlWellFormedWriter.State.TopLevel, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64Cont, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64Attr, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.StartFragEle, $asm07.System.Xml.XmlWellFormedWriter.State.Element, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.StartContentEle, $asm07.System.Xml.XmlWellFormedWriter.State.Element, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64Cont, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64Attr, $asm07.System.Xml.XmlWellFormedWriter.State.Element, $asm07.System.Xml.XmlWellFormedWriter.State.EndAttrSEle, $asm07.System.Xml.XmlWellFormedWriter.State.EndAttrSEle, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.StartContent, $asm07.System.Xml.XmlWellFormedWriter.State.Content, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64Cont, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64Attr, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.EndAttrEEle, $asm07.System.Xml.XmlWellFormedWriter.State.EndAttrEEle, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.RootLevelAttr, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Attribute, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64Cont, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64Attr, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.EndAttrSAttr, $asm07.System.Xml.XmlWellFormedWriter.State.EndAttrSAttr, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.StartRootLevelAttr, $asm07.System.Xml.XmlWellFormedWriter.State.StartRootLevelAttr, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64RootAttr, $asm07.System.Xml.XmlWellFormedWriter.State.RootLevelAttr, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64Cont, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64Attr, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Element, $asm07.System.Xml.XmlWellFormedWriter.State.Element, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.AfterRootLevelAttr, $asm07.System.Xml.XmlWellFormedWriter.State.AfterRootLevelAttr, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64RootAttr, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.StartFragCont, $asm07.System.Xml.XmlWellFormedWriter.State.StartFragCont, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.StartContent, $asm07.System.Xml.XmlWellFormedWriter.State.Content, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64Cont, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64Attr, $asm07.System.Xml.XmlWellFormedWriter.State.Content, $asm07.System.Xml.XmlWellFormedWriter.State.Attribute, $asm07.System.Xml.XmlWellFormedWriter.State.SpecialAttr, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.RootLevelAttr, $asm07.System.Xml.XmlWellFormedWriter.State.RootLevelSpecAttr, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64RootAttr, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.StartFragCont, $asm07.System.Xml.XmlWellFormedWriter.State.StartFragCont, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.StartContent, $asm07.System.Xml.XmlWellFormedWriter.State.Content, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64Cont, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64Attr, $asm07.System.Xml.XmlWellFormedWriter.State.Content, $asm07.System.Xml.XmlWellFormedWriter.State.EndAttrSCont, $asm07.System.Xml.XmlWellFormedWriter.State.EndAttrSCont, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.StartFragCont, $asm07.System.Xml.XmlWellFormedWriter.State.StartFragCont, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.StartContent, $asm07.System.Xml.XmlWellFormedWriter.State.Content, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64Cont, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64Attr, $asm07.System.Xml.XmlWellFormedWriter.State.Content, $asm07.System.Xml.XmlWellFormedWriter.State.Attribute, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.RootLevelAttr, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64RootAttr, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.StartFragB64, $asm07.System.Xml.XmlWellFormedWriter.State.StartFragB64, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.StartContentB64, $asm07.System.Xml.XmlWellFormedWriter.State.B64Content, $asm07.System.Xml.XmlWellFormedWriter.State.B64Content, $asm07.System.Xml.XmlWellFormedWriter.State.B64Attribute, $asm07.System.Xml.XmlWellFormedWriter.State.B64Content, $asm07.System.Xml.XmlWellFormedWriter.State.B64Attribute, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.RootLevelB64Attr, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.RootLevelB64Attr, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.StartFragCont, $asm07.System.Xml.XmlWellFormedWriter.State.TopLevel, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.StartContent, $asm07.System.Xml.XmlWellFormedWriter.State.Content, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64Cont, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64Attr, $asm07.System.Xml.XmlWellFormedWriter.State.Content, $asm07.System.Xml.XmlWellFormedWriter.State.Attribute, $asm07.System.Xml.XmlWellFormedWriter.State.SpecialAttr, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.RootLevelAttr, $asm07.System.Xml.XmlWellFormedWriter.State.RootLevelSpecAttr, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64RootAttr, $asm07.System.Xml.XmlWellFormedWriter.State.AfterRootLevelAttr, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.TopLevel, $asm07.System.Xml.XmlWellFormedWriter.State.TopLevel, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.StartContent, $asm07.System.Xml.XmlWellFormedWriter.State.Content, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64Cont, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64Attr, $asm07.System.Xml.XmlWellFormedWriter.State.AfterRootEle, $asm07.System.Xml.XmlWellFormedWriter.State.Attribute, $asm07.System.Xml.XmlWellFormedWriter.State.SpecialAttr, $asm07.System.Xml.XmlWellFormedWriter.State.Error, $asm07.System.Xml.XmlWellFormedWriter.State.RootLevelAttr, $asm07.System.Xml.XmlWellFormedWriter.State.RootLevelSpecAttr, $asm07.System.Xml.XmlWellFormedWriter.State.PostB64RootAttr, $asm07.System.Xml.XmlWellFormedWriter.State.AfterRootLevelAttr, $asm07.System.Xml.XmlWellFormedWriter.State.Error]);
};

$asm07.System.Xml.XmlWellFormedWriter.NamespaceResolverProxy.prototype._ctor = function (wfWriter) {
	System.Object.prototype._ctor.call(this);
	this.wfWriter = wfWriter;
};
$asm07.System.Xml.XmlWellFormedWriter.NamespaceResolverProxy.prototype.IXmlNamespaceResolver_GetNamespacesInScope = function (scope) {
	throw JSIL.New(System.NotImplementedException, "_ctor$0", []);
};
$asm07.System.Xml.XmlWellFormedWriter.NamespaceResolverProxy.prototype.IXmlNamespaceResolver_LookupNamespace = function (prefix) {
	return this.wfWriter.LookupNamespace(prefix);
};
$asm07.System.Xml.XmlWellFormedWriter.NamespaceResolverProxy.prototype.IXmlNamespaceResolver_LookupPrefix = function (namespaceName) {
	return this.wfWriter.LookupPrefix(namespaceName);
};
$asm07.System.Xml.XmlWellFormedWriter.NamespaceResolverProxy.prototype.wfWriter = null;

$asm07.System.Xml.XmlWellFormedWriter.ElementScope.prototype.Set = function (prefix, localName, namespaceUri, prevNSTop) {
	this.prevNSTop = prevNSTop;
	this.prefix = prefix;
	this.namespaceUri = namespaceUri;
	this.localName = localName;
	this.xmlSpace = -1;
	this.xmlLang = null;
};
$asm07.System.Xml.XmlWellFormedWriter.ElementScope.prototype.WriteEndElement = function (rawWriter) {
	rawWriter.WriteEndElement$1(this.prefix, this.localName, this.namespaceUri);
};
$asm07.System.Xml.XmlWellFormedWriter.ElementScope.prototype.WriteFullEndElement = function (rawWriter) {
	rawWriter.WriteFullEndElement$1(this.prefix, this.localName, this.namespaceUri);
};
$asm07.System.Xml.XmlWellFormedWriter.ElementScope.prototype.prevNSTop = 0;
$asm07.System.Xml.XmlWellFormedWriter.ElementScope.prototype.prefix = null;
$asm07.System.Xml.XmlWellFormedWriter.ElementScope.prototype.localName = null;
$asm07.System.Xml.XmlWellFormedWriter.ElementScope.prototype.namespaceUri = null;
$asm07.System.Xml.XmlWellFormedWriter.ElementScope.prototype.xmlSpace = 0;
$asm07.System.Xml.XmlWellFormedWriter.ElementScope.prototype.xmlLang = null;

$asm07.System.Xml.XmlWellFormedWriter.Namespace.prototype.Set = function (prefix, namespaceUri, kind) {
	this.prefix = prefix;
	this.namespaceUri = namespaceUri;
	this.kind = kind;
	this.prevNsIndex = -1;
};
$asm07.System.Xml.XmlWellFormedWriter.Namespace.prototype.WriteDecl = function (writer, rawWriter) {
	if (rawWriter !== null) {
		rawWriter.WriteNamespaceDeclaration(this.prefix, this.namespaceUri);
		return;
	}
	if (this.prefix.length === 0) {
		writer.WriteStartAttribute$1(System.String.Empty, "xmlns", "http://www.w3.org/2000/xmlns/");
	} else {
		writer.WriteStartAttribute$1("xmlns", this.prefix, "http://www.w3.org/2000/xmlns/");
	}
	writer.WriteString(this.namespaceUri);
	writer.WriteEndAttribute();
};
$asm07.System.Xml.XmlWellFormedWriter.Namespace.prototype.prefix = null;
$asm07.System.Xml.XmlWellFormedWriter.Namespace.prototype.namespaceUri = null;
$asm07.System.Xml.XmlWellFormedWriter.Namespace.prototype.kind = 0;
$asm07.System.Xml.XmlWellFormedWriter.Namespace.prototype.prevNsIndex = 0;

$asm07.System.Xml.XmlWellFormedWriter.AttrName.prototype.Set = function (prefix, localName, namespaceUri) {
	this.prefix = prefix;
	this.namespaceUri = namespaceUri;
	this.localName = localName;
	this.prev = 0;
};
$asm07.System.Xml.XmlWellFormedWriter.AttrName.prototype.IsDuplicate = function (prefix, localName, namespaceUri) {
	return ((this.localName == localName) && ((this.prefix == prefix) || 
			(this.namespaceUri == namespaceUri)));
};
$asm07.System.Xml.XmlWellFormedWriter.AttrName.prototype.prefix = null;
$asm07.System.Xml.XmlWellFormedWriter.AttrName.prototype.namespaceUri = null;
$asm07.System.Xml.XmlWellFormedWriter.AttrName.prototype.localName = null;
$asm07.System.Xml.XmlWellFormedWriter.AttrName.prototype.prev = 0;

$asm07.System.Xml.XmlWellFormedWriter.AttributeValueCache.prototype.get_StringValue = function () {
	if (this.singleStringValue !== null) {
		return this.singleStringValue;
	}
	return this.stringValue.toString();
};
$asm07.System.Xml.XmlWellFormedWriter.AttributeValueCache.prototype.WriteEntityRef = function (name) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				if (this.singleStringValue !== null) {
					this.StartComplexValue();
				}
				if (name !== null) {
					if (name == "lt") {
						this.stringValue.Append$7("<");
						__label0__ = "IL_D2";
						continue __step0__;
					}
					if (name == "gt") {
						this.stringValue.Append$7(">");
						__label0__ = "IL_D2";
						continue __step0__;
					}
					if (name == "quot") {
						this.stringValue.Append$7('"');
						__label0__ = "IL_D2";
						continue __step0__;
					}
					if (name == "apos") {
						this.stringValue.Append$7("'");
						__label0__ = "IL_D2";
						continue __step0__;
					}
					if (name == "amp") {
						this.stringValue.Append$7("&");
						__label0__ = "IL_D2";
						continue __step0__;
					}
				}
				this.stringValue.Append$7("&");
				this.stringValue.Append$2(name);
				this.stringValue.Append$7(";");
				__label0__ = "IL_D2";
				continue __step0__;
				break;
			case "IL_D2":
				this.AddItem($asm07.System.Xml.XmlWellFormedWriter.AttributeValueCache.ItemType.EntityRef, name);
				break __step0__;
		}
	}
};
$asm07.System.Xml.XmlWellFormedWriter.AttributeValueCache.prototype.WriteCharEntity = function (ch) {
	if (this.singleStringValue !== null) {
		this.StartComplexValue();
	}
	this.stringValue.Append$7(ch);
	this.AddItem($asm07.System.Xml.XmlWellFormedWriter.AttributeValueCache.ItemType.CharEntity, ch);
};
$asm07.System.Xml.XmlWellFormedWriter.AttributeValueCache.prototype.WriteSurrogateCharEntity = function (lowChar, highChar) {
	if (this.singleStringValue !== null) {
		this.StartComplexValue();
	}
	this.stringValue.Append$7(highChar);
	this.stringValue.Append$7(lowChar);
	this.AddItem($asm07.System.Xml.XmlWellFormedWriter.AttributeValueCache.ItemType.SurrogateCharEntity, JSIL.Array.New(System.Char, [lowChar, highChar]));
};
$asm07.System.Xml.XmlWellFormedWriter.AttributeValueCache.prototype.WriteWhitespace = function (ws) {
	if (this.singleStringValue !== null) {
		this.StartComplexValue();
	}
	this.stringValue.Append$2(ws);
	this.AddItem($asm07.System.Xml.XmlWellFormedWriter.AttributeValueCache.ItemType.Whitespace, ws);
};
$asm07.System.Xml.XmlWellFormedWriter.AttributeValueCache.prototype.WriteString = function (text) {
	if (this.singleStringValue !== null) {
		this.StartComplexValue();
	} else if (this.lastItem === -1) {
		this.singleStringValue = text;
		return;
	}
	this.stringValue.Append$2(text);
	this.AddItem($asm07.System.Xml.XmlWellFormedWriter.AttributeValueCache.ItemType.String, text);
};
$asm07.System.Xml.XmlWellFormedWriter.AttributeValueCache.prototype.WriteChars = function (buffer, index, count) {
	if (this.singleStringValue !== null) {
		this.StartComplexValue();
	}
	this.stringValue.Append$1(buffer, index, count);
	this.AddItem($asm07.System.Xml.XmlWellFormedWriter.AttributeValueCache.ItemType.StringChars, new $asm07.System.Xml.XmlWellFormedWriter.AttributeValueCache.BufferChunk(buffer, index, count));
};
$asm07.System.Xml.XmlWellFormedWriter.AttributeValueCache.prototype.WriteRaw$0 = function (buffer, index, count) {
	if (this.singleStringValue !== null) {
		this.StartComplexValue();
	}
	this.stringValue.Append$1(buffer, index, count);
	this.AddItem($asm07.System.Xml.XmlWellFormedWriter.AttributeValueCache.ItemType.RawChars, new $asm07.System.Xml.XmlWellFormedWriter.AttributeValueCache.BufferChunk(buffer, index, count));
};
$asm07.System.Xml.XmlWellFormedWriter.AttributeValueCache.prototype.WriteRaw$1 = function (data) {
	if (this.singleStringValue !== null) {
		this.StartComplexValue();
	}
	this.stringValue.Append$2(data);
	this.AddItem($asm07.System.Xml.XmlWellFormedWriter.AttributeValueCache.ItemType.Raw, data);
};
$asm07.System.Xml.XmlWellFormedWriter.AttributeValueCache.prototype.WriteValue = function (value) {
	if (this.singleStringValue !== null) {
		this.StartComplexValue();
	}
	this.stringValue.Append$2(value);
	this.AddItem($asm07.System.Xml.XmlWellFormedWriter.AttributeValueCache.ItemType.ValueString, value);
};
$asm07.System.Xml.XmlWellFormedWriter.AttributeValueCache.prototype.Replay = function (writer) {
	if (this.singleStringValue !== null) {
		writer.WriteString(this.singleStringValue);
		return;
	}
__loop0__: 
	for (var i = this.firstItem; i <= this.lastItem; ++i) {
		var item = this.items[i];
		switch (Number(item.type)) {
			case 0: 
				writer.WriteEntityRef(JSIL.Cast(item.data, System.String));
				break;
			case 1: 
				writer.WriteCharEntity(String.fromCharCode(item.data));
				break;
			case 2: 
				var array = JSIL.Cast(item.data, System.Array.Of(System.Char));
				writer.WriteSurrogateCharEntity(array[0], array[1]);
				break;
			case 3: 
				writer.WriteWhitespace(JSIL.Cast(item.data, System.String));
				break;
			case 4: 
				writer.WriteString(JSIL.Cast(item.data, System.String));
				break;
			case 5: 
				var bufferChunk = JSIL.Cast(item.data, $asm07.System.Xml.XmlWellFormedWriter.AttributeValueCache.BufferChunk);
				writer.WriteChars(bufferChunk.buffer, bufferChunk.index, bufferChunk.count);
				break;
			case 6: 
				writer.WriteRaw$1(JSIL.Cast(item.data, System.String));
				break;
			case 7: 
				bufferChunk = JSIL.Cast(item.data, $asm07.System.Xml.XmlWellFormedWriter.AttributeValueCache.BufferChunk);
				writer.WriteChars(bufferChunk.buffer, bufferChunk.index, bufferChunk.count);
				break;
			case 8: 
				writer.WriteValue$1(JSIL.Cast(item.data, System.String));
				break;
		}
	}
};
$asm07.System.Xml.XmlWellFormedWriter.AttributeValueCache.prototype.Trim = function () {
	if (this.singleStringValue !== null) {
		this.singleStringValue = System.Xml.XmlConvert.TrimString(this.singleStringValue);
		return;
	}
	var text = this.stringValue.toString();
	var text2 = System.Xml.XmlConvert.TrimString(text);
	if (text != text2) {
		this.stringValue = JSIL.New(System.Text.StringBuilder, "_ctor$2", [text2]);
	}
	var instance = $asm07.System.Xml.XmlCharType.Instance.MemberwiseClone();
__loop0__: 
	for (var num = this.firstItem; (num === this.firstItem) && (num <= this.lastItem); ++num) {
		var item = this.items[num];
		switch (Number(item.type)) {
			case 3: 
				++this.firstItem;
				break;
			case 4: 
			case 6: 
			case 8: 
				item.data = System.Xml.XmlConvert.TrimStringStart(JSIL.Cast(item.data, System.String));
				if (JSIL.Cast(item.data, System.String).length === 0) {
					++this.firstItem;
				}
				break;
			case 5: 
			case 7: 
				var bufferChunk = JSIL.Cast(item.data, $asm07.System.Xml.XmlWellFormedWriter.AttributeValueCache.BufferChunk);
			__loop1__: 
				for (var num2 = (bufferChunk.index + bufferChunk.count); (bufferChunk.index < num2) && instance.IsWhiteSpace(bufferChunk.buffer[bufferChunk.index]); ) {
					bufferChunk.index += 1;
					bufferChunk.count -= 1;
				}
				if (bufferChunk.index === num2) {
					++this.firstItem;
				}
				break;
		}
	}
__loop2__: 
	for (num = this.lastItem; (num === this.lastItem) && (num >= this.firstItem); --num) {
		var item2 = this.items[num];
		switch (Number(item2.type)) {
			case 3: 
				--this.lastItem;
				break;
			case 4: 
			case 6: 
			case 8: 
				item2.data = System.Xml.XmlConvert.TrimStringEnd(JSIL.Cast(item2.data, System.String));
				if (JSIL.Cast(item2.data, System.String).length === 0) {
					--this.lastItem;
				}
				break;
			case 5: 
			case 7: 
			__loop3__: 
				for (var bufferChunk2 = JSIL.Cast(item2.data, $asm07.System.Xml.XmlWellFormedWriter.AttributeValueCache.BufferChunk); (bufferChunk2.count > 0) && instance.IsWhiteSpace(bufferChunk2.buffer[((bufferChunk2.index + bufferChunk2.count) - 1)]); ) {
					bufferChunk2.count -= 1;
				}
				if (bufferChunk2.count === 0) {
					--this.lastItem;
				}
				break;
		}
	}
};
$asm07.System.Xml.XmlWellFormedWriter.AttributeValueCache.prototype.Clear = function () {
	this.singleStringValue = null;
	this.lastItem = -1;
	this.firstItem = 0;
	this.stringValue.Length = 0;
};
$asm07.System.Xml.XmlWellFormedWriter.AttributeValueCache.prototype.StartComplexValue = function () {
	this.stringValue.Append$2(this.singleStringValue);
	this.AddItem($asm07.System.Xml.XmlWellFormedWriter.AttributeValueCache.ItemType.String, this.singleStringValue);
	this.singleStringValue = null;
};
$asm07.System.Xml.XmlWellFormedWriter.AttributeValueCache.prototype.AddItem = function (type, data) {
	var num = (this.lastItem + 1);
	if (this.items === null) {
		this.items = JSIL.Array.New($asm07.System.Xml.XmlWellFormedWriter.AttributeValueCache.Item, 4);
	} else if (this.items.length === num) {
		var destinationArray = JSIL.Array.New($asm07.System.Xml.XmlWellFormedWriter.AttributeValueCache.Item, (num * 2));
		System.Array.Copy$0(this.items, destinationArray, num);
		this.items = destinationArray;
	}
	if (!this.items[num]) {
		this.items[num] = new $asm07.System.Xml.XmlWellFormedWriter.AttributeValueCache.Item();
	}
	this.items[num].Set(type, data);
	this.lastItem = num;
};
$asm07.System.Xml.XmlWellFormedWriter.AttributeValueCache.prototype._ctor = function () {
	this.stringValue = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
	this.lastItem = -1;
	System.Object.prototype._ctor.call(this);
};
JSIL.OverloadedMethod($asm07.System.Xml.XmlWellFormedWriter.AttributeValueCache.prototype, "WriteRaw", [
		["WriteRaw$0", [System.Array.Of(System.Char), System.Int32, System.Int32]], 
		["WriteRaw$1", [System.String]]
	]);
JSIL.MakeProperty($asm07.System.Xml.XmlWellFormedWriter.AttributeValueCache.prototype, "StringValue", 
	$asm07.System.Xml.XmlWellFormedWriter.AttributeValueCache.prototype.get_StringValue, null);
$asm07.System.Xml.XmlWellFormedWriter.AttributeValueCache.prototype.stringValue = null;
$asm07.System.Xml.XmlWellFormedWriter.AttributeValueCache.prototype.singleStringValue = null;
$asm07.System.Xml.XmlWellFormedWriter.AttributeValueCache.prototype.items = null;
$asm07.System.Xml.XmlWellFormedWriter.AttributeValueCache.prototype.firstItem = 0;
$asm07.System.Xml.XmlWellFormedWriter.AttributeValueCache.prototype.lastItem = 0;

$asm07.System.Xml.XmlWellFormedWriter.AttributeValueCache.Item.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm07.System.Xml.XmlWellFormedWriter.AttributeValueCache.Item.prototype.Set = function (type, data) {
	this.type = type;
	this.data = data;
};
$asm07.System.Xml.XmlWellFormedWriter.AttributeValueCache.Item.prototype.type = 0;
$asm07.System.Xml.XmlWellFormedWriter.AttributeValueCache.Item.prototype.data = null;

$asm07.System.Xml.XmlWellFormedWriter.AttributeValueCache.BufferChunk.prototype._ctor = function (buffer, index, count) {
	System.Object.prototype._ctor.call(this);
	this.buffer = buffer;
	this.index = index;
	this.count = count;
};
$asm07.System.Xml.XmlWellFormedWriter.AttributeValueCache.BufferChunk.prototype.buffer = null;
$asm07.System.Xml.XmlWellFormedWriter.AttributeValueCache.BufferChunk.prototype.index = 0;
$asm07.System.Xml.XmlWellFormedWriter.AttributeValueCache.BufferChunk.prototype.count = 0;

System.Xml.XmlWriterSettings.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
	this.Initialize();
};
System.Xml.XmlWriterSettings.prototype.get_Encoding = function () {
	return this.encoding;
};
System.Xml.XmlWriterSettings.prototype.set_Encoding = function (value) {
	this.CheckReadOnly("Encoding");
	this.encoding = value;
};
System.Xml.XmlWriterSettings.prototype.get_OmitXmlDeclaration = function () {
	return this.omitXmlDecl;
};
System.Xml.XmlWriterSettings.prototype.set_OmitXmlDeclaration = function (value) {
	this.CheckReadOnly("OmitXmlDeclaration");
	this.omitXmlDecl = value;
};
System.Xml.XmlWriterSettings.prototype.get_NewLineHandling = function () {
	return this.newLineHandling;
};
System.Xml.XmlWriterSettings.prototype.set_NewLineHandling = function (value) {
	this.CheckReadOnly("NewLineHandling");
	if (value > System.Xml.NewLineHandling.None) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["value"]);
	}
	this.newLineHandling = value;
};
System.Xml.XmlWriterSettings.prototype.get_NewLineChars = function () {
	return this.newLineChars;
};
System.Xml.XmlWriterSettings.prototype.set_NewLineChars = function (value) {
	this.CheckReadOnly("NewLineChars");
	if (value === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["value"]);
	}
	this.newLineChars = value;
};
System.Xml.XmlWriterSettings.prototype.get_Indent = function () {
	return (this.indent === System.Xml.TriState.True);
};
System.Xml.XmlWriterSettings.prototype.set_Indent = function (value) {
	this.CheckReadOnly("Indent");
	this.indent = value ? System.Xml.TriState.True : System.Xml.TriState.False;
};
System.Xml.XmlWriterSettings.prototype.get_IndentChars = function () {
	return this.indentChars;
};
System.Xml.XmlWriterSettings.prototype.set_IndentChars = function (value) {
	this.CheckReadOnly("IndentChars");
	if (value === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["value"]);
	}
	this.indentChars = value;
};
System.Xml.XmlWriterSettings.prototype.get_NewLineOnAttributes = function () {
	return this.newLineOnAttributes;
};
System.Xml.XmlWriterSettings.prototype.set_NewLineOnAttributes = function (value) {
	this.CheckReadOnly("NewLineOnAttributes");
	this.newLineOnAttributes = value;
};
System.Xml.XmlWriterSettings.prototype.get_CloseOutput = function () {
	return this.closeOutput;
};
System.Xml.XmlWriterSettings.prototype.set_CloseOutput = function (value) {
	this.CheckReadOnly("CloseOutput");
	this.closeOutput = value;
};
System.Xml.XmlWriterSettings.prototype.get_ConformanceLevel = function () {
	return this.conformanceLevel;
};
System.Xml.XmlWriterSettings.prototype.set_ConformanceLevel = function (value) {
	this.CheckReadOnly("ConformanceLevel");
	if (value > System.Xml.ConformanceLevel.Document) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["value"]);
	}
	this.conformanceLevel = value;
};
System.Xml.XmlWriterSettings.prototype.get_CheckCharacters = function () {
	return this.checkCharacters;
};
System.Xml.XmlWriterSettings.prototype.set_CheckCharacters = function (value) {
	this.CheckReadOnly("CheckCharacters");
	this.checkCharacters = value;
};
System.Xml.XmlWriterSettings.prototype.get_NamespaceHandling = function () {
	return this.namespaceHandling;
};
System.Xml.XmlWriterSettings.prototype.set_NamespaceHandling = function (value) {
	this.CheckReadOnly("NamespaceHandling");
	if (value > System.Xml.NamespaceHandling.OmitDuplicates) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["value"]);
	}
	this.namespaceHandling = value;
};
System.Xml.XmlWriterSettings.prototype.Reset = function () {
	this.CheckReadOnly("Reset");
	this.Initialize();
};
System.Xml.XmlWriterSettings.prototype.Clone = function () {
	var xmlWriterSettings = JSIL.TryCast(System.Object.prototype.MemberwiseClone.call(this), System.Xml.XmlWriterSettings);
	xmlWriterSettings.isReadOnly = false;
	return xmlWriterSettings;
};
System.Xml.XmlWriterSettings.prototype.CreateWriter$0 = function (output) {
	if (output === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["output"]);
	}
	if (this.Encoding.WebName == "utf-8") {
		if (this.Indent) {
			var xmlWriter = new $asm07.System.Xml.XmlUtf8RawTextWriterIndent(output, this);
		} else {
			xmlWriter = JSIL.New($asm07.System.Xml.XmlUtf8RawTextWriter, "_ctor$1", [output, this]);
		}
	} else if (this.Indent) {
		xmlWriter = JSIL.New($asm07.System.Xml.XmlEncodedRawTextWriterIndent, "_ctor$1", [output, this]);
	} else {
		xmlWriter = JSIL.New($asm07.System.Xml.XmlEncodedRawTextWriter, "_ctor$2", [output, this]);
	}
	xmlWriter = new $asm07.System.Xml.XmlWellFormedWriter(xmlWriter, this);
	return xmlWriter;
};
System.Xml.XmlWriterSettings.prototype.CreateWriter$1 = function (output) {
	if (output === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["output"]);
	}
	if (this.Indent) {
		var xmlWriter = JSIL.New($asm07.System.Xml.XmlEncodedRawTextWriterIndent, "_ctor$0", [output, this]);
	} else {
		xmlWriter = JSIL.New($asm07.System.Xml.XmlEncodedRawTextWriter, "_ctor$1", [output, this]);
	}
	xmlWriter = new $asm07.System.Xml.XmlWellFormedWriter(xmlWriter, this);
	return xmlWriter;
};
System.Xml.XmlWriterSettings.prototype.CreateWriter$2 = function (output) {
	if (output === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["output"]);
	}
	return this.AddConformanceWrapper(output);
};
System.Xml.XmlWriterSettings.prototype.get_ReadOnly = function () {
	return this.isReadOnly;
};
System.Xml.XmlWriterSettings.prototype.set_ReadOnly = function (value) {
	this.isReadOnly = value;
};
System.Xml.XmlWriterSettings.prototype.CheckReadOnly = function (propertyName) {
	if (this.isReadOnly) {
		throw JSIL.New(System.Xml.XmlException, "_ctor$7", ["Xml_ReadOnlyProperty", JSIL.ConcatString(JSIL.GetType(this).Name, ".", propertyName)]);
	}
};
System.Xml.XmlWriterSettings.prototype.Initialize = function () {
	this.encoding = System.Text.Encoding.UTF8;
	this.omitXmlDecl = false;
	this.newLineHandling = System.Xml.NewLineHandling.Replace;
	this.newLineChars = System.Environment.NewLine;
	this.indent = System.Xml.TriState.Unknown;
	this.indentChars = "  ";
	this.newLineOnAttributes = false;
	this.closeOutput = false;
	this.namespaceHandling = System.Xml.NamespaceHandling.Default;
	this.conformanceLevel = System.Xml.ConformanceLevel.Document;
	this.checkCharacters = true;
	this.isReadOnly = false;
};
System.Xml.XmlWriterSettings.prototype.AddConformanceWrapper = function (baseWriter) {
	var conformanceLevel = System.Xml.ConformanceLevel.Auto;
	var settings = baseWriter.Settings;
	var flag = false;
	var checkNames = false;
	var flag2 = false;
	var flag3 = false;
	if (settings === null) {
		if (this.newLineHandling === 0) {
			flag2 = true;
			flag3 = true;
		}
		if (this.checkCharacters) {
			flag = true;
			flag3 = true;
		}
	} else {
		if (this.conformanceLevel !== settings.ConformanceLevel) {
			conformanceLevel = this.ConformanceLevel;
			flag3 = true;
		}
		if (!(!this.checkCharacters || settings.CheckCharacters)) {
			flag = true;
			checkNames = (conformanceLevel === System.Xml.ConformanceLevel.Auto);
			flag3 = true;
		}
		if (!(this.newLineHandling || (settings.NewLineHandling !== System.Xml.NewLineHandling.None))) {
			flag2 = true;
			flag3 = true;
		}
	}
	var xmlWriter = baseWriter;
	if (flag3) {
		if (JSIL.Cast(conformanceLevel, System.Boolean)) {
			xmlWriter = new $asm07.System.Xml.XmlWellFormedWriter(xmlWriter, this);
		}
		if (!(!flag && !flag2)) {
			xmlWriter = new $asm07.System.Xml.XmlCharCheckingWriter(xmlWriter, flag, checkNames, flag2, this.NewLineChars);
		}
	}
	return xmlWriter;
};
JSIL.OverloadedMethod(System.Xml.XmlWriterSettings.prototype, "CreateWriter", [
		["CreateWriter$0", [System.IO.Stream]], 
		["CreateWriter$1", [System.IO.TextWriter]], 
		["CreateWriter$2", [System.Xml.XmlWriter]]
	]);
JSIL.MakeProperty(System.Xml.XmlWriterSettings.prototype, "Encoding", 
	System.Xml.XmlWriterSettings.prototype.get_Encoding, System.Xml.XmlWriterSettings.prototype.set_Encoding);
JSIL.MakeProperty(System.Xml.XmlWriterSettings.prototype, "OmitXmlDeclaration", 
	System.Xml.XmlWriterSettings.prototype.get_OmitXmlDeclaration, System.Xml.XmlWriterSettings.prototype.set_OmitXmlDeclaration);
JSIL.MakeProperty(System.Xml.XmlWriterSettings.prototype, "NewLineHandling", 
	System.Xml.XmlWriterSettings.prototype.get_NewLineHandling, System.Xml.XmlWriterSettings.prototype.set_NewLineHandling);
JSIL.MakeProperty(System.Xml.XmlWriterSettings.prototype, "NewLineChars", 
	System.Xml.XmlWriterSettings.prototype.get_NewLineChars, System.Xml.XmlWriterSettings.prototype.set_NewLineChars);
JSIL.MakeProperty(System.Xml.XmlWriterSettings.prototype, "Indent", 
	System.Xml.XmlWriterSettings.prototype.get_Indent, System.Xml.XmlWriterSettings.prototype.set_Indent);
JSIL.MakeProperty(System.Xml.XmlWriterSettings.prototype, "IndentChars", 
	System.Xml.XmlWriterSettings.prototype.get_IndentChars, System.Xml.XmlWriterSettings.prototype.set_IndentChars);
JSIL.MakeProperty(System.Xml.XmlWriterSettings.prototype, "NewLineOnAttributes", 
	System.Xml.XmlWriterSettings.prototype.get_NewLineOnAttributes, System.Xml.XmlWriterSettings.prototype.set_NewLineOnAttributes);
JSIL.MakeProperty(System.Xml.XmlWriterSettings.prototype, "CloseOutput", 
	System.Xml.XmlWriterSettings.prototype.get_CloseOutput, System.Xml.XmlWriterSettings.prototype.set_CloseOutput);
JSIL.MakeProperty(System.Xml.XmlWriterSettings.prototype, "ConformanceLevel", 
	System.Xml.XmlWriterSettings.prototype.get_ConformanceLevel, System.Xml.XmlWriterSettings.prototype.set_ConformanceLevel);
JSIL.MakeProperty(System.Xml.XmlWriterSettings.prototype, "CheckCharacters", 
	System.Xml.XmlWriterSettings.prototype.get_CheckCharacters, System.Xml.XmlWriterSettings.prototype.set_CheckCharacters);
JSIL.MakeProperty(System.Xml.XmlWriterSettings.prototype, "NamespaceHandling", 
	System.Xml.XmlWriterSettings.prototype.get_NamespaceHandling, System.Xml.XmlWriterSettings.prototype.set_NamespaceHandling);
JSIL.MakeProperty(System.Xml.XmlWriterSettings.prototype, "ReadOnly", 
	System.Xml.XmlWriterSettings.prototype.get_ReadOnly, System.Xml.XmlWriterSettings.prototype.set_ReadOnly);
System.Xml.XmlWriterSettings.prototype.encoding = null;
System.Xml.XmlWriterSettings.prototype.omitXmlDecl = false;
System.Xml.XmlWriterSettings.prototype.newLineHandling = 0;
System.Xml.XmlWriterSettings.prototype.newLineChars = null;
System.Xml.XmlWriterSettings.prototype.indent = 0;
System.Xml.XmlWriterSettings.prototype.indentChars = null;
System.Xml.XmlWriterSettings.prototype.newLineOnAttributes = false;
System.Xml.XmlWriterSettings.prototype.closeOutput = false;
System.Xml.XmlWriterSettings.prototype.namespaceHandling = 0;
System.Xml.XmlWriterSettings.prototype.conformanceLevel = 0;
System.Xml.XmlWriterSettings.prototype.checkCharacters = false;
System.Xml.XmlWriterSettings.prototype.isReadOnly = false;

System.Xml.XmlXapResolver.RegisterApplicationResourceStreamResolver = function (appStreamResolver) {
	if (appStreamResolver === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["appStreamResolver"]);
	}
	System.Xml.XmlXapResolver.s_appStreamResolver = appStreamResolver;
};
System.Xml.XmlXapResolver.prototype._ctor = function () {
	System.Xml.XmlResolver.prototype._ctor.call(this);
};
System.Xml.XmlXapResolver.prototype.GetEntity = function (absoluteUri, role, ofObjectToReturn) {
	if (System.Uri.op_Equality(absoluteUri, null)) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["absoluteUri"]);
	}
	if (System.Xml.XmlXapResolver.s_appStreamResolver === null) {
		throw JSIL.New(System.Xml.XmlException, "_ctor$7", ["Xml_InternalError", System.String.Empty]);
	}
	if (!((ofObjectToReturn === null) || (ofObjectToReturn === System.IO.Stream))) {
		if (ofObjectToReturn !== System.Object) {
			throw JSIL.New(System.Xml.XmlException, "_ctor$7", ["Xml_UnsupportedClass", System.String.Empty]);
		}
	}
	try {
		var applicationResourceStream = System.Xml.XmlXapResolver.s_appStreamResolver.IApplicationResourceStreamResolver_GetApplicationResourceStream(absoluteUri);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.ArgumentException)) {
			var arg_56_0 = $exception;
			throw JSIL.New(System.Xml.XmlException, "_ctor$10", ["Xml_XapResolverCannotOpenUri", absoluteUri.toString(), arg_56_0, null]);
		} else {
			throw $exception;
		}
	}
	if (applicationResourceStream === null) {
		throw JSIL.New(System.Xml.XmlException, "_ctor$7", ["Xml_CannotFindFileInXapPackage", absoluteUri.toString()]);
	}
	return applicationResourceStream;
};
System.Xml.XmlXapResolver.s_appStreamResolver = null;

System.Xml.Serialization.XmlAnyElementAttribute.prototype._ctor$0 = function () {
	this.order = -1;
	System.Attribute.prototype._ctor.call(this);
};
System.Xml.Serialization.XmlAnyElementAttribute.prototype._ctor$1 = function (name) {
	this.order = -1;
	System.Attribute.prototype._ctor.call(this);
	this.name = name;
};
System.Xml.Serialization.XmlAnyElementAttribute.prototype._ctor$2 = function (name, ns) {
	this.order = -1;
	System.Attribute.prototype._ctor.call(this);
	this.name = name;
	this.ns = ns;
	this.nsSpecified = true;
};
System.Xml.Serialization.XmlAnyElementAttribute.prototype.get_Name = function () {
	if (this.name !== null) {
		return this.name;
	}
	return System.String.Empty;
};
System.Xml.Serialization.XmlAnyElementAttribute.prototype.set_Name = function (value) {
	this.name = value;
};
System.Xml.Serialization.XmlAnyElementAttribute.prototype.get_Namespace = function () {
	return this.ns;
};
System.Xml.Serialization.XmlAnyElementAttribute.prototype.set_Namespace = function (value) {
	this.ns = value;
	this.nsSpecified = true;
};
System.Xml.Serialization.XmlAnyElementAttribute.prototype.get_Order = function () {
	return this.order;
};
System.Xml.Serialization.XmlAnyElementAttribute.prototype.set_Order = function (value) {
	if (value < 0) {
		throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm07.System.Xml.Res.GetString$2("XmlDisallowNegativeValues"), "Order"]);
	}
	this.order = value;
};
System.Xml.Serialization.XmlAnyElementAttribute.prototype.get_NamespaceSpecified = function () {
	return this.nsSpecified;
};
JSIL.OverloadedMethod(System.Xml.Serialization.XmlAnyElementAttribute.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.String]], 
		["_ctor$2", [System.String, System.String]]
	]);
JSIL.MakeProperty(System.Xml.Serialization.XmlAnyElementAttribute.prototype, "Name", 
	System.Xml.Serialization.XmlAnyElementAttribute.prototype.get_Name, System.Xml.Serialization.XmlAnyElementAttribute.prototype.set_Name);
JSIL.MakeProperty(System.Xml.Serialization.XmlAnyElementAttribute.prototype, "Namespace", 
	System.Xml.Serialization.XmlAnyElementAttribute.prototype.get_Namespace, System.Xml.Serialization.XmlAnyElementAttribute.prototype.set_Namespace);
JSIL.MakeProperty(System.Xml.Serialization.XmlAnyElementAttribute.prototype, "Order", 
	System.Xml.Serialization.XmlAnyElementAttribute.prototype.get_Order, System.Xml.Serialization.XmlAnyElementAttribute.prototype.set_Order);
JSIL.MakeProperty(System.Xml.Serialization.XmlAnyElementAttribute.prototype, "NamespaceSpecified", 
	System.Xml.Serialization.XmlAnyElementAttribute.prototype.get_NamespaceSpecified, null);
System.Xml.Serialization.XmlAnyElementAttribute.prototype.name = null;
System.Xml.Serialization.XmlAnyElementAttribute.prototype.ns = null;
System.Xml.Serialization.XmlAnyElementAttribute.prototype.order = 0;
System.Xml.Serialization.XmlAnyElementAttribute.prototype.nsSpecified = false;

System.Xml.Serialization.XmlArrayAttribute.prototype._ctor$0 = function () {
	this.order = -1;
	System.Attribute.prototype._ctor.call(this);
};
System.Xml.Serialization.XmlArrayAttribute.prototype._ctor$1 = function (elementName) {
	this.order = -1;
	System.Attribute.prototype._ctor.call(this);
	this.elementName = elementName;
};
System.Xml.Serialization.XmlArrayAttribute.prototype.get_ElementName = function () {
	if (this.elementName !== null) {
		return this.elementName;
	}
	return System.String.Empty;
};
System.Xml.Serialization.XmlArrayAttribute.prototype.set_ElementName = function (value) {
	this.elementName = value;
};
System.Xml.Serialization.XmlArrayAttribute.prototype.get_Namespace = function () {
	return this.ns;
};
System.Xml.Serialization.XmlArrayAttribute.prototype.set_Namespace = function (value) {
	this.ns = value;
};
System.Xml.Serialization.XmlArrayAttribute.prototype.get_IsNullable = function () {
	return this.nullable;
};
System.Xml.Serialization.XmlArrayAttribute.prototype.set_IsNullable = function (value) {
	this.nullable = value;
};
System.Xml.Serialization.XmlArrayAttribute.prototype.get_Form = function () {
	return this.form;
};
System.Xml.Serialization.XmlArrayAttribute.prototype.set_Form = function (value) {
	this.form = value;
};
System.Xml.Serialization.XmlArrayAttribute.prototype.get_Order = function () {
	return this.order;
};
System.Xml.Serialization.XmlArrayAttribute.prototype.set_Order = function (value) {
	if (value < 0) {
		throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm07.System.Xml.Res.GetString$2("XmlDisallowNegativeValues"), "Order"]);
	}
	this.order = value;
};
JSIL.OverloadedMethod(System.Xml.Serialization.XmlArrayAttribute.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.String]]
	]);
JSIL.MakeProperty(System.Xml.Serialization.XmlArrayAttribute.prototype, "ElementName", 
	System.Xml.Serialization.XmlArrayAttribute.prototype.get_ElementName, System.Xml.Serialization.XmlArrayAttribute.prototype.set_ElementName);
JSIL.MakeProperty(System.Xml.Serialization.XmlArrayAttribute.prototype, "Namespace", 
	System.Xml.Serialization.XmlArrayAttribute.prototype.get_Namespace, System.Xml.Serialization.XmlArrayAttribute.prototype.set_Namespace);
JSIL.MakeProperty(System.Xml.Serialization.XmlArrayAttribute.prototype, "IsNullable", 
	System.Xml.Serialization.XmlArrayAttribute.prototype.get_IsNullable, System.Xml.Serialization.XmlArrayAttribute.prototype.set_IsNullable);
JSIL.MakeProperty(System.Xml.Serialization.XmlArrayAttribute.prototype, "Form", 
	System.Xml.Serialization.XmlArrayAttribute.prototype.get_Form, System.Xml.Serialization.XmlArrayAttribute.prototype.set_Form);
JSIL.MakeProperty(System.Xml.Serialization.XmlArrayAttribute.prototype, "Order", 
	System.Xml.Serialization.XmlArrayAttribute.prototype.get_Order, System.Xml.Serialization.XmlArrayAttribute.prototype.set_Order);
System.Xml.Serialization.XmlArrayAttribute.prototype.elementName = null;
System.Xml.Serialization.XmlArrayAttribute.prototype.ns = null;
System.Xml.Serialization.XmlArrayAttribute.prototype.nullable = false;
System.Xml.Serialization.XmlArrayAttribute.prototype.form = 0;
System.Xml.Serialization.XmlArrayAttribute.prototype.order = 0;

System.Xml.Serialization.XmlArrayItemAttribute.prototype._ctor$0 = function () {
	System.Attribute.prototype._ctor.call(this);
};
System.Xml.Serialization.XmlArrayItemAttribute.prototype._ctor$1 = function (elementName) {
	System.Attribute.prototype._ctor.call(this);
	this.elementName = elementName;
};
System.Xml.Serialization.XmlArrayItemAttribute.prototype._ctor$2 = function (type) {
	System.Attribute.prototype._ctor.call(this);
	this.type = type;
};
System.Xml.Serialization.XmlArrayItemAttribute.prototype._ctor$3 = function (elementName, type) {
	System.Attribute.prototype._ctor.call(this);
	this.elementName = elementName;
	this.type = type;
};
System.Xml.Serialization.XmlArrayItemAttribute.prototype.get_Type = function () {
	return this.type;
};
System.Xml.Serialization.XmlArrayItemAttribute.prototype.set_Type = function (value) {
	this.type = value;
};
System.Xml.Serialization.XmlArrayItemAttribute.prototype.get_ElementName = function () {
	if (this.elementName !== null) {
		return this.elementName;
	}
	return System.String.Empty;
};
System.Xml.Serialization.XmlArrayItemAttribute.prototype.set_ElementName = function (value) {
	this.elementName = value;
};
System.Xml.Serialization.XmlArrayItemAttribute.prototype.get_Namespace = function () {
	return this.ns;
};
System.Xml.Serialization.XmlArrayItemAttribute.prototype.set_Namespace = function (value) {
	this.ns = value;
};
System.Xml.Serialization.XmlArrayItemAttribute.prototype.get_NestingLevel = function () {
	return this.nestingLevel;
};
System.Xml.Serialization.XmlArrayItemAttribute.prototype.set_NestingLevel = function (value) {
	this.nestingLevel = value;
};
System.Xml.Serialization.XmlArrayItemAttribute.prototype.get_DataType = function () {
	if (this.dataType !== null) {
		return this.dataType;
	}
	return System.String.Empty;
};
System.Xml.Serialization.XmlArrayItemAttribute.prototype.set_DataType = function (value) {
	this.dataType = value;
};
System.Xml.Serialization.XmlArrayItemAttribute.prototype.get_IsNullable = function () {
	return this.nullable;
};
System.Xml.Serialization.XmlArrayItemAttribute.prototype.set_IsNullable = function (value) {
	this.nullable = value;
	this.nullableSpecified = true;
};
System.Xml.Serialization.XmlArrayItemAttribute.prototype.get_IsNullableSpecified = function () {
	return this.nullableSpecified;
};
System.Xml.Serialization.XmlArrayItemAttribute.prototype.get_Form = function () {
	return this.form;
};
System.Xml.Serialization.XmlArrayItemAttribute.prototype.set_Form = function (value) {
	this.form = value;
};
JSIL.OverloadedMethod(System.Xml.Serialization.XmlArrayItemAttribute.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.String]], 
		["_ctor$2", [System.Type]], 
		["_ctor$3", [System.String, System.Type]]
	]);
JSIL.MakeProperty(System.Xml.Serialization.XmlArrayItemAttribute.prototype, "Type", 
	System.Xml.Serialization.XmlArrayItemAttribute.prototype.get_Type, System.Xml.Serialization.XmlArrayItemAttribute.prototype.set_Type);
JSIL.MakeProperty(System.Xml.Serialization.XmlArrayItemAttribute.prototype, "ElementName", 
	System.Xml.Serialization.XmlArrayItemAttribute.prototype.get_ElementName, System.Xml.Serialization.XmlArrayItemAttribute.prototype.set_ElementName);
JSIL.MakeProperty(System.Xml.Serialization.XmlArrayItemAttribute.prototype, "Namespace", 
	System.Xml.Serialization.XmlArrayItemAttribute.prototype.get_Namespace, System.Xml.Serialization.XmlArrayItemAttribute.prototype.set_Namespace);
JSIL.MakeProperty(System.Xml.Serialization.XmlArrayItemAttribute.prototype, "NestingLevel", 
	System.Xml.Serialization.XmlArrayItemAttribute.prototype.get_NestingLevel, System.Xml.Serialization.XmlArrayItemAttribute.prototype.set_NestingLevel);
JSIL.MakeProperty(System.Xml.Serialization.XmlArrayItemAttribute.prototype, "DataType", 
	System.Xml.Serialization.XmlArrayItemAttribute.prototype.get_DataType, System.Xml.Serialization.XmlArrayItemAttribute.prototype.set_DataType);
JSIL.MakeProperty(System.Xml.Serialization.XmlArrayItemAttribute.prototype, "IsNullable", 
	System.Xml.Serialization.XmlArrayItemAttribute.prototype.get_IsNullable, System.Xml.Serialization.XmlArrayItemAttribute.prototype.set_IsNullable);
JSIL.MakeProperty(System.Xml.Serialization.XmlArrayItemAttribute.prototype, "IsNullableSpecified", 
	System.Xml.Serialization.XmlArrayItemAttribute.prototype.get_IsNullableSpecified, null);
JSIL.MakeProperty(System.Xml.Serialization.XmlArrayItemAttribute.prototype, "Form", 
	System.Xml.Serialization.XmlArrayItemAttribute.prototype.get_Form, System.Xml.Serialization.XmlArrayItemAttribute.prototype.set_Form);
System.Xml.Serialization.XmlArrayItemAttribute.prototype.elementName = null;
System.Xml.Serialization.XmlArrayItemAttribute.prototype.type = null;
System.Xml.Serialization.XmlArrayItemAttribute.prototype.ns = null;
System.Xml.Serialization.XmlArrayItemAttribute.prototype.dataType = null;
System.Xml.Serialization.XmlArrayItemAttribute.prototype.nullable = false;
System.Xml.Serialization.XmlArrayItemAttribute.prototype.nullableSpecified = false;
System.Xml.Serialization.XmlArrayItemAttribute.prototype.form = 0;
System.Xml.Serialization.XmlArrayItemAttribute.prototype.nestingLevel = 0;

System.Xml.Serialization.XmlAttributeAttribute.prototype._ctor$0 = function () {
	System.Attribute.prototype._ctor.call(this);
};
System.Xml.Serialization.XmlAttributeAttribute.prototype._ctor$1 = function (attributeName) {
	System.Attribute.prototype._ctor.call(this);
	this.attributeName = attributeName;
};
System.Xml.Serialization.XmlAttributeAttribute.prototype._ctor$2 = function (type) {
	System.Attribute.prototype._ctor.call(this);
	this.type = type;
};
System.Xml.Serialization.XmlAttributeAttribute.prototype._ctor$3 = function (attributeName, type) {
	System.Attribute.prototype._ctor.call(this);
	this.attributeName = attributeName;
	this.type = type;
};
System.Xml.Serialization.XmlAttributeAttribute.prototype.get_Type = function () {
	return this.type;
};
System.Xml.Serialization.XmlAttributeAttribute.prototype.set_Type = function (value) {
	this.type = value;
};
System.Xml.Serialization.XmlAttributeAttribute.prototype.get_AttributeName = function () {
	if (this.attributeName !== null) {
		return this.attributeName;
	}
	return System.String.Empty;
};
System.Xml.Serialization.XmlAttributeAttribute.prototype.set_AttributeName = function (value) {
	this.attributeName = value;
};
System.Xml.Serialization.XmlAttributeAttribute.prototype.get_Namespace = function () {
	return this.ns;
};
System.Xml.Serialization.XmlAttributeAttribute.prototype.set_Namespace = function (value) {
	this.ns = value;
};
System.Xml.Serialization.XmlAttributeAttribute.prototype.get_DataType = function () {
	if (this.dataType !== null) {
		return this.dataType;
	}
	return System.String.Empty;
};
System.Xml.Serialization.XmlAttributeAttribute.prototype.set_DataType = function (value) {
	this.dataType = value;
};
System.Xml.Serialization.XmlAttributeAttribute.prototype.get_Form = function () {
	return this.form;
};
System.Xml.Serialization.XmlAttributeAttribute.prototype.set_Form = function (value) {
	this.form = value;
};
JSIL.OverloadedMethod(System.Xml.Serialization.XmlAttributeAttribute.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.String]], 
		["_ctor$2", [System.Type]], 
		["_ctor$3", [System.String, System.Type]]
	]);
JSIL.MakeProperty(System.Xml.Serialization.XmlAttributeAttribute.prototype, "Type", 
	System.Xml.Serialization.XmlAttributeAttribute.prototype.get_Type, System.Xml.Serialization.XmlAttributeAttribute.prototype.set_Type);
JSIL.MakeProperty(System.Xml.Serialization.XmlAttributeAttribute.prototype, "AttributeName", 
	System.Xml.Serialization.XmlAttributeAttribute.prototype.get_AttributeName, System.Xml.Serialization.XmlAttributeAttribute.prototype.set_AttributeName);
JSIL.MakeProperty(System.Xml.Serialization.XmlAttributeAttribute.prototype, "Namespace", 
	System.Xml.Serialization.XmlAttributeAttribute.prototype.get_Namespace, System.Xml.Serialization.XmlAttributeAttribute.prototype.set_Namespace);
JSIL.MakeProperty(System.Xml.Serialization.XmlAttributeAttribute.prototype, "DataType", 
	System.Xml.Serialization.XmlAttributeAttribute.prototype.get_DataType, System.Xml.Serialization.XmlAttributeAttribute.prototype.set_DataType);
JSIL.MakeProperty(System.Xml.Serialization.XmlAttributeAttribute.prototype, "Form", 
	System.Xml.Serialization.XmlAttributeAttribute.prototype.get_Form, System.Xml.Serialization.XmlAttributeAttribute.prototype.set_Form);
System.Xml.Serialization.XmlAttributeAttribute.prototype.attributeName = null;
System.Xml.Serialization.XmlAttributeAttribute.prototype.type = null;
System.Xml.Serialization.XmlAttributeAttribute.prototype.ns = null;
System.Xml.Serialization.XmlAttributeAttribute.prototype.dataType = null;
System.Xml.Serialization.XmlAttributeAttribute.prototype.form = 0;

System.Xml.Serialization.XmlChoiceIdentifierAttribute.prototype._ctor$0 = function () {
	System.Attribute.prototype._ctor.call(this);
};
System.Xml.Serialization.XmlChoiceIdentifierAttribute.prototype._ctor$1 = function (name) {
	System.Attribute.prototype._ctor.call(this);
	this.name = name;
};
System.Xml.Serialization.XmlChoiceIdentifierAttribute.prototype.get_MemberName = function () {
	if (this.name !== null) {
		return this.name;
	}
	return System.String.Empty;
};
System.Xml.Serialization.XmlChoiceIdentifierAttribute.prototype.set_MemberName = function (value) {
	this.name = value;
};
System.Xml.Serialization.XmlChoiceIdentifierAttribute.prototype.get_MemberInfo = function () {
	return this.memberInfo;
};
System.Xml.Serialization.XmlChoiceIdentifierAttribute.prototype.set_MemberInfo = function (value) {
	this.memberInfo = value;
};
JSIL.OverloadedMethod(System.Xml.Serialization.XmlChoiceIdentifierAttribute.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.String]]
	]);
JSIL.MakeProperty(System.Xml.Serialization.XmlChoiceIdentifierAttribute.prototype, "MemberName", 
	System.Xml.Serialization.XmlChoiceIdentifierAttribute.prototype.get_MemberName, System.Xml.Serialization.XmlChoiceIdentifierAttribute.prototype.set_MemberName);
JSIL.MakeProperty(System.Xml.Serialization.XmlChoiceIdentifierAttribute.prototype, "MemberInfo", 
	System.Xml.Serialization.XmlChoiceIdentifierAttribute.prototype.get_MemberInfo, System.Xml.Serialization.XmlChoiceIdentifierAttribute.prototype.set_MemberInfo);
System.Xml.Serialization.XmlChoiceIdentifierAttribute.prototype.name = null;
System.Xml.Serialization.XmlChoiceIdentifierAttribute.prototype.memberInfo = null;

System.Xml.Serialization.XmlElementAttribute.prototype._ctor$0 = function () {
	this.order = -1;
	System.Attribute.prototype._ctor.call(this);
};
System.Xml.Serialization.XmlElementAttribute.prototype._ctor$1 = function (elementName) {
	this.order = -1;
	System.Attribute.prototype._ctor.call(this);
	this.elementName = elementName;
};
System.Xml.Serialization.XmlElementAttribute.prototype._ctor$2 = function (type) {
	this.order = -1;
	System.Attribute.prototype._ctor.call(this);
	this.type = type;
};
System.Xml.Serialization.XmlElementAttribute.prototype._ctor$3 = function (elementName, type) {
	this.order = -1;
	System.Attribute.prototype._ctor.call(this);
	this.elementName = elementName;
	this.type = type;
};
System.Xml.Serialization.XmlElementAttribute.prototype.get_Type = function () {
	return this.type;
};
System.Xml.Serialization.XmlElementAttribute.prototype.set_Type = function (value) {
	this.type = value;
};
System.Xml.Serialization.XmlElementAttribute.prototype.get_ElementName = function () {
	if (this.elementName !== null) {
		return this.elementName;
	}
	return System.String.Empty;
};
System.Xml.Serialization.XmlElementAttribute.prototype.set_ElementName = function (value) {
	this.elementName = value;
};
System.Xml.Serialization.XmlElementAttribute.prototype.get_Namespace = function () {
	return this.ns;
};
System.Xml.Serialization.XmlElementAttribute.prototype.set_Namespace = function (value) {
	this.ns = value;
};
System.Xml.Serialization.XmlElementAttribute.prototype.get_DataType = function () {
	if (this.dataType !== null) {
		return this.dataType;
	}
	return System.String.Empty;
};
System.Xml.Serialization.XmlElementAttribute.prototype.set_DataType = function (value) {
	this.dataType = value;
};
System.Xml.Serialization.XmlElementAttribute.prototype.get_IsNullable = function () {
	return this.nullable;
};
System.Xml.Serialization.XmlElementAttribute.prototype.set_IsNullable = function (value) {
	this.nullable = value;
	this.nullableSpecified = true;
};
System.Xml.Serialization.XmlElementAttribute.prototype.get_IsNullableSpecified = function () {
	return this.nullableSpecified;
};
System.Xml.Serialization.XmlElementAttribute.prototype.get_Form = function () {
	return this.form;
};
System.Xml.Serialization.XmlElementAttribute.prototype.set_Form = function (value) {
	this.form = value;
};
System.Xml.Serialization.XmlElementAttribute.prototype.get_Order = function () {
	return this.order;
};
System.Xml.Serialization.XmlElementAttribute.prototype.set_Order = function (value) {
	if (value < 0) {
		throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm07.System.Xml.Res.GetString$2("XmlDisallowNegativeValues"), "Order"]);
	}
	this.order = value;
};
JSIL.OverloadedMethod(System.Xml.Serialization.XmlElementAttribute.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.String]], 
		["_ctor$2", [System.Type]], 
		["_ctor$3", [System.String, System.Type]]
	]);
JSIL.MakeProperty(System.Xml.Serialization.XmlElementAttribute.prototype, "Type", 
	System.Xml.Serialization.XmlElementAttribute.prototype.get_Type, System.Xml.Serialization.XmlElementAttribute.prototype.set_Type);
JSIL.MakeProperty(System.Xml.Serialization.XmlElementAttribute.prototype, "ElementName", 
	System.Xml.Serialization.XmlElementAttribute.prototype.get_ElementName, System.Xml.Serialization.XmlElementAttribute.prototype.set_ElementName);
JSIL.MakeProperty(System.Xml.Serialization.XmlElementAttribute.prototype, "Namespace", 
	System.Xml.Serialization.XmlElementAttribute.prototype.get_Namespace, System.Xml.Serialization.XmlElementAttribute.prototype.set_Namespace);
JSIL.MakeProperty(System.Xml.Serialization.XmlElementAttribute.prototype, "DataType", 
	System.Xml.Serialization.XmlElementAttribute.prototype.get_DataType, System.Xml.Serialization.XmlElementAttribute.prototype.set_DataType);
JSIL.MakeProperty(System.Xml.Serialization.XmlElementAttribute.prototype, "IsNullable", 
	System.Xml.Serialization.XmlElementAttribute.prototype.get_IsNullable, System.Xml.Serialization.XmlElementAttribute.prototype.set_IsNullable);
JSIL.MakeProperty(System.Xml.Serialization.XmlElementAttribute.prototype, "IsNullableSpecified", 
	System.Xml.Serialization.XmlElementAttribute.prototype.get_IsNullableSpecified, null);
JSIL.MakeProperty(System.Xml.Serialization.XmlElementAttribute.prototype, "Form", 
	System.Xml.Serialization.XmlElementAttribute.prototype.get_Form, System.Xml.Serialization.XmlElementAttribute.prototype.set_Form);
JSIL.MakeProperty(System.Xml.Serialization.XmlElementAttribute.prototype, "Order", 
	System.Xml.Serialization.XmlElementAttribute.prototype.get_Order, System.Xml.Serialization.XmlElementAttribute.prototype.set_Order);
System.Xml.Serialization.XmlElementAttribute.prototype.elementName = null;
System.Xml.Serialization.XmlElementAttribute.prototype.type = null;
System.Xml.Serialization.XmlElementAttribute.prototype.ns = null;
System.Xml.Serialization.XmlElementAttribute.prototype.dataType = null;
System.Xml.Serialization.XmlElementAttribute.prototype.nullable = false;
System.Xml.Serialization.XmlElementAttribute.prototype.nullableSpecified = false;
System.Xml.Serialization.XmlElementAttribute.prototype.form = 0;
System.Xml.Serialization.XmlElementAttribute.prototype.order = 0;

System.Xml.Serialization.XmlEnumAttribute.prototype._ctor$0 = function () {
	System.Attribute.prototype._ctor.call(this);
};
System.Xml.Serialization.XmlEnumAttribute.prototype._ctor$1 = function (name) {
	System.Attribute.prototype._ctor.call(this);
	this.name = name;
};
System.Xml.Serialization.XmlEnumAttribute.prototype.get_Name = function () {
	return this.name;
};
System.Xml.Serialization.XmlEnumAttribute.prototype.set_Name = function (value) {
	this.name = value;
};
JSIL.OverloadedMethod(System.Xml.Serialization.XmlEnumAttribute.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.String]]
	]);
JSIL.MakeProperty(System.Xml.Serialization.XmlEnumAttribute.prototype, "Name", 
	System.Xml.Serialization.XmlEnumAttribute.prototype.get_Name, System.Xml.Serialization.XmlEnumAttribute.prototype.set_Name);
System.Xml.Serialization.XmlEnumAttribute.prototype.name = null;

System.Xml.Serialization.XmlIgnoreAttribute.prototype._ctor = function () {
	System.Attribute.prototype._ctor.call(this);
};

System.Xml.Serialization.XmlIncludeAttribute.prototype._ctor = function (type) {
	System.Attribute.prototype._ctor.call(this);
	this.type = type;
};
System.Xml.Serialization.XmlIncludeAttribute.prototype.get_Type = function () {
	return this.type;
};
System.Xml.Serialization.XmlIncludeAttribute.prototype.set_Type = function (value) {
	this.type = value;
};
JSIL.MakeProperty(System.Xml.Serialization.XmlIncludeAttribute.prototype, "Type", 
	System.Xml.Serialization.XmlIncludeAttribute.prototype.get_Type, System.Xml.Serialization.XmlIncludeAttribute.prototype.set_Type);
System.Xml.Serialization.XmlIncludeAttribute.prototype.type = null;

System.Xml.Serialization.XmlNamespaceDeclarationsAttribute.prototype._ctor = function () {
	System.Attribute.prototype._ctor.call(this);
};

System.Xml.Serialization.XmlRootAttribute.prototype._ctor$0 = function () {
	this.nullable = true;
	System.Attribute.prototype._ctor.call(this);
};
System.Xml.Serialization.XmlRootAttribute.prototype._ctor$1 = function (elementName) {
	this.nullable = true;
	System.Attribute.prototype._ctor.call(this);
	this.elementName = elementName;
};
System.Xml.Serialization.XmlRootAttribute.prototype.get_ElementName = function () {
	if (this.elementName !== null) {
		return this.elementName;
	}
	return System.String.Empty;
};
System.Xml.Serialization.XmlRootAttribute.prototype.set_ElementName = function (value) {
	this.elementName = value;
};
System.Xml.Serialization.XmlRootAttribute.prototype.get_Namespace = function () {
	return this.ns;
};
System.Xml.Serialization.XmlRootAttribute.prototype.set_Namespace = function (value) {
	this.ns = value;
};
System.Xml.Serialization.XmlRootAttribute.prototype.get_DataType = function () {
	if (this.dataType !== null) {
		return this.dataType;
	}
	return System.String.Empty;
};
System.Xml.Serialization.XmlRootAttribute.prototype.set_DataType = function (value) {
	this.dataType = value;
};
System.Xml.Serialization.XmlRootAttribute.prototype.get_IsNullable = function () {
	return this.nullable;
};
System.Xml.Serialization.XmlRootAttribute.prototype.set_IsNullable = function (value) {
	this.nullable = value;
	this.nullableSpecified = true;
};
System.Xml.Serialization.XmlRootAttribute.prototype.get_IsNullableSpecified = function () {
	return this.nullableSpecified;
};
System.Xml.Serialization.XmlRootAttribute.prototype.get_Key = function () {
	return JSIL.ConcatString.apply(null, JSIL.Array.New(System.String, [(this.ns === null) ? System.String.Empty : this.ns, ":", this.ElementName, ":", this.nullable.toString()]));
};
JSIL.OverloadedMethod(System.Xml.Serialization.XmlRootAttribute.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.String]]
	]);
JSIL.MakeProperty(System.Xml.Serialization.XmlRootAttribute.prototype, "ElementName", 
	System.Xml.Serialization.XmlRootAttribute.prototype.get_ElementName, System.Xml.Serialization.XmlRootAttribute.prototype.set_ElementName);
JSIL.MakeProperty(System.Xml.Serialization.XmlRootAttribute.prototype, "Namespace", 
	System.Xml.Serialization.XmlRootAttribute.prototype.get_Namespace, System.Xml.Serialization.XmlRootAttribute.prototype.set_Namespace);
JSIL.MakeProperty(System.Xml.Serialization.XmlRootAttribute.prototype, "DataType", 
	System.Xml.Serialization.XmlRootAttribute.prototype.get_DataType, System.Xml.Serialization.XmlRootAttribute.prototype.set_DataType);
JSIL.MakeProperty(System.Xml.Serialization.XmlRootAttribute.prototype, "IsNullable", 
	System.Xml.Serialization.XmlRootAttribute.prototype.get_IsNullable, System.Xml.Serialization.XmlRootAttribute.prototype.set_IsNullable);
JSIL.MakeProperty(System.Xml.Serialization.XmlRootAttribute.prototype, "IsNullableSpecified", 
	System.Xml.Serialization.XmlRootAttribute.prototype.get_IsNullableSpecified, null);
JSIL.MakeProperty(System.Xml.Serialization.XmlRootAttribute.prototype, "Key", 
	System.Xml.Serialization.XmlRootAttribute.prototype.get_Key, null);
System.Xml.Serialization.XmlRootAttribute.prototype.elementName = null;
System.Xml.Serialization.XmlRootAttribute.prototype.ns = null;
System.Xml.Serialization.XmlRootAttribute.prototype.dataType = null;
System.Xml.Serialization.XmlRootAttribute.prototype.nullable = false;
System.Xml.Serialization.XmlRootAttribute.prototype.nullableSpecified = false;

System.Xml.Serialization.XmlSchemaProviderAttribute.prototype._ctor = function (methodName) {
	System.Attribute.prototype._ctor.call(this);
	this.methodName = methodName;
};
System.Xml.Serialization.XmlSchemaProviderAttribute.prototype.get_MethodName = function () {
	return this.methodName;
};
System.Xml.Serialization.XmlSchemaProviderAttribute.prototype.get_IsAny = function () {
	return this.any;
};
System.Xml.Serialization.XmlSchemaProviderAttribute.prototype.set_IsAny = function (value) {
	this.any = value;
};
JSIL.MakeProperty(System.Xml.Serialization.XmlSchemaProviderAttribute.prototype, "MethodName", 
	System.Xml.Serialization.XmlSchemaProviderAttribute.prototype.get_MethodName, null);
JSIL.MakeProperty(System.Xml.Serialization.XmlSchemaProviderAttribute.prototype, "IsAny", 
	System.Xml.Serialization.XmlSchemaProviderAttribute.prototype.get_IsAny, System.Xml.Serialization.XmlSchemaProviderAttribute.prototype.set_IsAny);
System.Xml.Serialization.XmlSchemaProviderAttribute.prototype.methodName = null;
System.Xml.Serialization.XmlSchemaProviderAttribute.prototype.any = false;

System.Xml.Serialization.XmlTextAttribute.prototype._ctor$0 = function () {
	System.Attribute.prototype._ctor.call(this);
};
System.Xml.Serialization.XmlTextAttribute.prototype._ctor$1 = function (type) {
	System.Attribute.prototype._ctor.call(this);
	this.type = type;
};
System.Xml.Serialization.XmlTextAttribute.prototype.get_Type = function () {
	return this.type;
};
System.Xml.Serialization.XmlTextAttribute.prototype.set_Type = function (value) {
	this.type = value;
};
System.Xml.Serialization.XmlTextAttribute.prototype.get_DataType = function () {
	if (this.dataType !== null) {
		return this.dataType;
	}
	return System.String.Empty;
};
System.Xml.Serialization.XmlTextAttribute.prototype.set_DataType = function (value) {
	this.dataType = value;
};
JSIL.OverloadedMethod(System.Xml.Serialization.XmlTextAttribute.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Type]]
	]);
JSIL.MakeProperty(System.Xml.Serialization.XmlTextAttribute.prototype, "Type", 
	System.Xml.Serialization.XmlTextAttribute.prototype.get_Type, System.Xml.Serialization.XmlTextAttribute.prototype.set_Type);
JSIL.MakeProperty(System.Xml.Serialization.XmlTextAttribute.prototype, "DataType", 
	System.Xml.Serialization.XmlTextAttribute.prototype.get_DataType, System.Xml.Serialization.XmlTextAttribute.prototype.set_DataType);
System.Xml.Serialization.XmlTextAttribute.prototype.type = null;
System.Xml.Serialization.XmlTextAttribute.prototype.dataType = null;

System.Xml.Serialization.XmlTypeAttribute.prototype._ctor$0 = function () {
	this.includeInSchema = true;
	System.Attribute.prototype._ctor.call(this);
};
System.Xml.Serialization.XmlTypeAttribute.prototype._ctor$1 = function (typeName) {
	this.includeInSchema = true;
	System.Attribute.prototype._ctor.call(this);
	this.typeName = typeName;
};
System.Xml.Serialization.XmlTypeAttribute.prototype.get_AnonymousType = function () {
	return this.anonymousType;
};
System.Xml.Serialization.XmlTypeAttribute.prototype.set_AnonymousType = function (value) {
	this.anonymousType = value;
};
System.Xml.Serialization.XmlTypeAttribute.prototype.get_IncludeInSchema = function () {
	return this.includeInSchema;
};
System.Xml.Serialization.XmlTypeAttribute.prototype.set_IncludeInSchema = function (value) {
	this.includeInSchema = value;
};
System.Xml.Serialization.XmlTypeAttribute.prototype.get_TypeName = function () {
	if (this.typeName !== null) {
		return this.typeName;
	}
	return System.String.Empty;
};
System.Xml.Serialization.XmlTypeAttribute.prototype.set_TypeName = function (value) {
	this.typeName = value;
};
System.Xml.Serialization.XmlTypeAttribute.prototype.get_Namespace = function () {
	return this.ns;
};
System.Xml.Serialization.XmlTypeAttribute.prototype.set_Namespace = function (value) {
	this.ns = value;
};
JSIL.OverloadedMethod(System.Xml.Serialization.XmlTypeAttribute.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.String]]
	]);
JSIL.MakeProperty(System.Xml.Serialization.XmlTypeAttribute.prototype, "AnonymousType", 
	System.Xml.Serialization.XmlTypeAttribute.prototype.get_AnonymousType, System.Xml.Serialization.XmlTypeAttribute.prototype.set_AnonymousType);
JSIL.MakeProperty(System.Xml.Serialization.XmlTypeAttribute.prototype, "IncludeInSchema", 
	System.Xml.Serialization.XmlTypeAttribute.prototype.get_IncludeInSchema, System.Xml.Serialization.XmlTypeAttribute.prototype.set_IncludeInSchema);
JSIL.MakeProperty(System.Xml.Serialization.XmlTypeAttribute.prototype, "TypeName", 
	System.Xml.Serialization.XmlTypeAttribute.prototype.get_TypeName, System.Xml.Serialization.XmlTypeAttribute.prototype.set_TypeName);
JSIL.MakeProperty(System.Xml.Serialization.XmlTypeAttribute.prototype, "Namespace", 
	System.Xml.Serialization.XmlTypeAttribute.prototype.get_Namespace, System.Xml.Serialization.XmlTypeAttribute.prototype.set_Namespace);
System.Xml.Serialization.XmlTypeAttribute.prototype.includeInSchema = false;
System.Xml.Serialization.XmlTypeAttribute.prototype.anonymousType = false;
System.Xml.Serialization.XmlTypeAttribute.prototype.ns = null;
System.Xml.Serialization.XmlTypeAttribute.prototype.typeName = null;

$asm07.System.Xml.DtdParser.prototype._ctor = function () {
	this.xmlCharType = $asm07.System.Xml.XmlCharType.Instance.MemberwiseClone();
	this.systemId = System.String.Empty;
	this.publicId = System.String.Empty;
	this.literalLineInfo = new $asm07.System.Xml.LineInfo(0, 0);
	this.literalQuoteChar = '"';
	this.documentBaseUri = System.String.Empty;
	this.externalDtdBaseUri = System.String.Empty;
	System.Object.prototype._ctor.call(this);
};
$asm07.System.Xml.DtdParser.Create = function () {
	return new $asm07.System.Xml.DtdParser();
};
$asm07.System.Xml.DtdParser.prototype.Initialize = function (readerAdapter) {
	this.readerAdapter = readerAdapter;
	this.nameTable = readerAdapter.IDtdParserAdapter_NameTable;
	this.schemaInfo = new $asm07.System.Xml.Schema.SchemaInfo();
	this.stringBuilder = new $asm07.System.Xml.BufferBuilder();
	var baseUri = readerAdapter.IDtdParserAdapter_BaseUri;
	if (System.Uri.op_Inequality(baseUri, null)) {
		this.documentBaseUri = baseUri.toString();
	}
	this.freeFloatingDtd = false;
};
$asm07.System.Xml.DtdParser.prototype.InitializeFreeFloatingDtd = function (baseUri, docTypeName, publicId, systemId, internalSubset, adapter) {
	var invCharPos = 0;
	this.Initialize(adapter);
	if (!((docTypeName !== null) && (docTypeName.length !== 0))) {
		throw System.Xml.XmlConvert.CreateInvalidNameArgumentException(docTypeName, "docTypeName");
	}
	System.Xml.XmlConvert.VerifyName(docTypeName);
	var num = docTypeName.IndexOf$0(":");
	if (num === -1) {
		this.schemaInfo.DocTypeName = JSIL.New(System.Xml.XmlQualifiedName, "_ctor$1", [this.nameTable.Add$1(docTypeName)]);
	} else {
		this.schemaInfo.DocTypeName = JSIL.New(System.Xml.XmlQualifiedName, "_ctor$2", [this.nameTable.Add$1(docTypeName.Substring$1(0, num)), this.nameTable.Add$1(docTypeName.Substring$0((num + 1)))]);
	}
	if (!((systemId === null) || (systemId.length <= 0))) {
		if ((invCharPos = this.xmlCharType.IsOnlyCharData(systemId)) >= 0) {
			this.ThrowInvalidChar$0(this.curPos, systemId, invCharPos);
		}
		this.systemId = systemId;
	}
	if (!((publicId === null) || (publicId.length <= 0))) {
		if ((invCharPos = this.xmlCharType.IsPublicId(publicId)) >= 0) {
			this.ThrowInvalidChar$0(this.curPos, publicId, invCharPos);
		}
		this.publicId = publicId;
	}
	if (!((internalSubset === null) || (internalSubset.length <= 0))) {
		this.readerAdapter.IDtdParserAdapter_PushInternalDtd(baseUri, internalSubset);
		this.hasFreeFloatingInternalSubset = true;
	}
	var baseUri2 = this.readerAdapter.IDtdParserAdapter_BaseUri;
	if (System.Uri.op_Inequality(baseUri2, null)) {
		this.documentBaseUri = baseUri2.toString();
	}
	this.freeFloatingDtd = true;
};
$asm07.System.Xml.DtdParser.prototype.IDtdParser_ParseInternalDtd = function (adapter, saveInternalSubset) {
	this.Initialize(adapter);
	this.Parse(saveInternalSubset);
	return this.schemaInfo;
};
$asm07.System.Xml.DtdParser.prototype.IDtdParser_ParseFreeFloatingDtd = function (baseUri, docTypeName, publicId, systemId, internalSubset, adapter) {
	this.InitializeFreeFloatingDtd(
		baseUri, 
		docTypeName, 
		publicId, 
		systemId, 
		internalSubset, 
		adapter
	);
	this.Parse(false);
	return this.schemaInfo;
};
$asm07.System.Xml.DtdParser.prototype.get_ParsingInternalSubset = function () {
	return (this.externalEntitiesDepth === 0);
};
$asm07.System.Xml.DtdParser.prototype.get_IgnoreEntityReferences = function () {
	return (this.scanningFunction === $asm07.System.Xml.DtdParser.ScanningFunction.CondSection3);
};
$asm07.System.Xml.DtdParser.prototype.get_SaveInternalSubsetValue = function () {
	return ((this.readerAdapter.IDtdParserAdapter_EntityStackLength === 0) && (this.internalSubsetValueSb !== null));
};
$asm07.System.Xml.DtdParser.prototype.get_ParsingTopLevelMarkup = function () {
	return ((this.scanningFunction === 0) || ((this.scanningFunction === $asm07.System.Xml.DtdParser.ScanningFunction.ParamEntitySpace) && 
			(this.savedScanningFunction === $asm07.System.Xml.DtdParser.ScanningFunction.SubsetContent)));
};
$asm07.System.Xml.DtdParser.prototype.get_SupportNamespaces = function () {
	return true;
};
$asm07.System.Xml.DtdParser.prototype.get_Normalize = function () {
	return true;
};
$asm07.System.Xml.DtdParser.prototype.Parse = function (saveInternalSubset) {
	if (this.freeFloatingDtd) {
		this.ParseFreeFloatingDtd();
	} else {
		this.ParseInDocumentDtd(saveInternalSubset);
	}
	this.schemaInfo.Finish();
};
$asm07.System.Xml.DtdParser.prototype.ParseInDocumentDtd = function (saveInternalSubset) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				this.LoadParsingBuffer();
				this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.QName;
				this.nextScaningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.Doctype1;
				if (this.GetToken(false) !== $asm07.System.Xml.DtdParser.Token.QName) {
					this.OnUnexpectedError();
				}
				this.schemaInfo.DocTypeName = this.GetNameQualified(true);
				var token = this.GetToken(false);
				if (!((token !== $asm07.System.Xml.DtdParser.Token.SYSTEM) && (token !== $asm07.System.Xml.DtdParser.Token.PUBLIC))) {
					this.ParseExternalId(token, $asm07.System.Xml.DtdParser.Token.DOCTYPE, /* ref */ new JSIL.MemberReference(this, "publicId"), /* ref */ new JSIL.MemberReference(this, "systemId"));
					token = this.GetToken(false);
				}
				switch (Number(token)) {
					case 29: 
						__label0__ = "IL_A1";
						continue __step0__;
					case 31: 
						if (saveInternalSubset) {
							this.SaveParsingBuffer$0();
							this.internalSubsetValueSb = new $asm07.System.Xml.BufferBuilder();
						}
						this.ParseInternalSubset();
						__label0__ = "IL_A1";
						continue __step0__;
				}
				this.OnUnexpectedError();
				__label0__ = "IL_A1";
				continue __step0__;
				break;
			case "IL_A1":
				this.SaveParsingBuffer$0();
				if (!((this.systemId === null) || (this.systemId.length <= 0))) {
					this.ParseExternalSubset();
				}
				break __step0__;
		}
	}
};
$asm07.System.Xml.DtdParser.prototype.ParseFreeFloatingDtd = function () {
	if (this.hasFreeFloatingInternalSubset) {
		this.LoadParsingBuffer();
		this.ParseInternalSubset();
		this.SaveParsingBuffer$0();
	}
	if (!((this.systemId === null) || (this.systemId.length <= 0))) {
		this.ParseExternalSubset();
	}
};
$asm07.System.Xml.DtdParser.prototype.ParseInternalSubset = function () {
	this.ParseSubset();
};
$asm07.System.Xml.DtdParser.prototype.ParseExternalSubset = function () {
	if (!this.readerAdapter.IDtdParserAdapter_PushExternalSubset(this.systemId, this.publicId)) {
		return;
	}
	var baseUri = this.readerAdapter.IDtdParserAdapter_BaseUri;
	if (System.Uri.op_Inequality(baseUri, null)) {
		this.externalDtdBaseUri = baseUri.toString();
	}
	++this.externalEntitiesDepth;
	this.LoadParsingBuffer();
	this.ParseSubset();
};
$asm07.System.Xml.DtdParser.prototype.ParseSubset = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
			__loop0__: 
				while (true) {
					var token = this.GetToken(false);
					var num = this.currentEntityId;
					var token2 = token;
					switch (Number(token2)) {
						case 11: 
							this.ParseAttlistDecl();
							break;
						case 12: 
							this.ParseElementDecl();
							break;
						case 13: 
							this.ParseEntityDecl();
							break;
						case 14: 
							this.ParseNotationDecl();
							break;
						case 15: 
							this.ParseComment();
							break;
						case 16: 
							this.ParsePI();
							break;
						case 17: 
							if (this.ParsingInternalSubset) {
								this.Throw$0((this.curPos - 3), "Xml_InvalidConditionalSection");
							}
							this.ParseCondSection();
							num = this.currentEntityId;
							break;
						case 18: 
							if (this.condSectionDepth > 0) {
								--this.condSectionDepth;
							} else {
								this.Throw$0((this.curPos - 3), "Xml_UnexpectedCDataEnd");
							}
							break;
						case 19: 
							__label0__ = "IL_171";
							continue __step0__;
						default: 
							if (token2 === $asm07.System.Xml.DtdParser.Token.RightBracket) {
								__label0__ = "IL_EE";
								continue __step0__;
							}
							break;
					}
					if (this.currentEntityId !== num) {
						this.Throw$0(this.curPos, "Sch_ParEntityRefNesting");
					}
				}
				__label0__ = "IL_EE";
				continue __step0__;
				break;
			case "IL_EE":
				if (!this.ParsingInternalSubset) {
					this.Throw$0(this.curPos, "Xml_ExpectDtdMarkup");
					return;
				}
				if (this.condSectionDepth !== 0) {
					this.Throw$0(this.curPos, "Xml_UnclosedConditionalSection");
				}
				if (this.internalSubsetValueSb !== null) {
					this.SaveParsingBuffer$1((this.curPos - 1));
					this.schemaInfo.InternalDtdSubset = this.internalSubsetValueSb.toString();
					this.internalSubsetValueSb = null;
				}
				if (this.GetToken(false) !== $asm07.System.Xml.DtdParser.Token.GreaterThan) {
					this.ThrowUnexpectedToken$0(this.curPos, ">");
					return;
				}
				return;
				__label0__ = "IL_171";
				continue __step0__;
				break;
			case "IL_171":
				if (!(!this.ParsingInternalSubset || this.freeFloatingDtd)) {
					this.Throw$0(this.curPos, "Xml_IncompleteDtdContent");
				}
				if (this.condSectionDepth !== 0) {
					this.Throw$0(this.curPos, "Xml_UnclosedConditionalSection");
					return;
				}
				break __step0__;
		}
	}
};
$asm07.System.Xml.DtdParser.prototype.ParseAttlistDecl = function () {
	if (this.GetToken(true) === $asm07.System.Xml.DtdParser.Token.QName) {
		var nameQualified = this.GetNameQualified(true);
		if (!(this.schemaInfo.ElementDecls.TryGetValue(nameQualified, /* ref */ schemaElementDecl) || this.schemaInfo.UndeclaredElementDecls.TryGetValue(nameQualified, /* ref */ schemaElementDecl))) {
			var schemaElementDecl = new JSIL.Variable(new $asm07.System.Xml.Schema.SchemaElementDecl(nameQualified, nameQualified.Namespace));
			this.schemaInfo.UndeclaredElementDecls.Add(nameQualified, schemaElementDecl.value);
		}
	__loop0__: 
		while (true) {
			var token = this.GetToken(false);
			if (token !== $asm07.System.Xml.DtdParser.Token.QName) {
				break __loop0__;
			}
			var nameQualified2 = this.GetNameQualified(true);
			var schemaAttDef = new $asm07.System.Xml.Schema.SchemaAttDef(nameQualified2, nameQualified2.Namespace);
			schemaAttDef.IsDeclaredInExternal = !this.ParsingInternalSubset;
			schemaAttDef.LineNumber = this.LineNo;
			schemaAttDef.LinePosition = (this.LinePos - (this.curPos - this.tokenStartPos));
			var flag = (schemaElementDecl.value.GetAttDef(schemaAttDef.Name) !== null);
			this.ParseAttlistType(schemaAttDef, schemaElementDecl.value, flag);
			this.ParseAttlistDefault(schemaAttDef, flag);
			if (!((schemaAttDef.Prefix.length <= 0) || !schemaAttDef.Prefix.Equals$1("xml"))) {
				if (schemaAttDef.Name.Name == "space") {
					schemaAttDef.Reserved = $asm07.System.Xml.Schema.SchemaAttDef.Reserve.XmlSpace;
					if (schemaAttDef.TokenizedType !== System.Xml.XmlTokenizedType.ENUMERATION) {
						this.Throw$3("Xml_EnumerationRequired", System.String.Empty, schemaAttDef.LineNumber, schemaAttDef.LinePosition);
					}
				} else if (schemaAttDef.Name.Name == "lang") {
					schemaAttDef.Reserved = $asm07.System.Xml.Schema.SchemaAttDef.Reserve.XmlLang;
				}
			}
			if (!flag) {
				schemaElementDecl.value.AddAttDef(schemaAttDef);
			}
		}
		if (token === $asm07.System.Xml.DtdParser.Token.GreaterThan) {
			return;
		}
	}
	this.OnUnexpectedError();
};
$asm07.System.Xml.DtdParser.prototype.ParseAttlistType = function (attrDef, elementDecl, ignoreErrors) {
	var token = this.GetToken(true);
	if (JSIL.Cast(token, System.Boolean)) {
		elementDecl.HasNonCDataAttribute = true;
	}
	if (this.IsAttributeValueType(token)) {
		attrDef.TokenizedType = token;
		var token2 = token;
		if (token2 === $asm07.System.Xml.DtdParser.Token.ID) {
			elementDecl.IsIdDeclared = true;
			return;
		}
		if (token2 !== $asm07.System.Xml.DtdParser.Token.NOTATION) {
			return;
		}
		if (!((this.GetToken(true) !== $asm07.System.Xml.DtdParser.Token.LeftParen) || (this.GetToken(false) !== $asm07.System.Xml.DtdParser.Token.Name))) {
		__loop1__: 
			while (true) {
				this.GetNameString();
				switch (Number(this.GetToken(false))) {
					case 28: 
						return;
					case 30: 
						if (this.GetToken(false) === $asm07.System.Xml.DtdParser.Token.Name) {
							continue;
						}
						break;
				}
				break __loop1__;
			}
		}
	} else if (token === $asm07.System.Xml.DtdParser.Token.LeftParen) {
		attrDef.TokenizedType = System.Xml.XmlTokenizedType.ENUMERATION;
		if (this.GetToken(false) === $asm07.System.Xml.DtdParser.Token.Nmtoken) {
		__loop0__: 
			while (true) {
				switch (Number(this.GetToken(false))) {
					case 28: 
						return;
					case 30: 
						if (this.GetToken(false) === $asm07.System.Xml.DtdParser.Token.Nmtoken) {
							this.GetNmtokenString();
							continue;
						}
						break;
				}
				break __loop0__;
			}
		}
	}
	this.OnUnexpectedError();
};
$asm07.System.Xml.DtdParser.prototype.ParseAttlistDefault = function (attrDef, ignoreErrors) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				var token = this.GetToken(true);
				switch (Number(token)) {
					case 20: 
						attrDef.Presence = $asm07.System.Xml.Schema.SchemaDeclBase.Use.Required;
						return;
					case 21: 
						attrDef.Presence = $asm07.System.Xml.Schema.SchemaDeclBase.Use.Implied;
						return;
					case 22: 
						attrDef.Presence = $asm07.System.Xml.Schema.SchemaDeclBase.Use.Fixed;
						if (this.GetToken(true) !== $asm07.System.Xml.DtdParser.Token.Literal) {
							__label0__ = "IL_8D";
							continue __step0__;
						}
						break;
					default: 
						if (token !== $asm07.System.Xml.DtdParser.Token.Literal) {
							__label0__ = "IL_8D";
							continue __step0__;
						}
						break;
				}
				if (JSIL.Cast(attrDef.TokenizedType, System.Boolean)) {
					attrDef.DefaultValueExpanded = this.GetValueWithStrippedSpaces();
				} else {
					attrDef.DefaultValueExpanded = this.GetValue();
				}
				attrDef.ValueLineNumber = this.literalLineInfo.lineNo;
				attrDef.ValueLinePosition = (this.literalLineInfo.linePos + 1);
				return;
				__label0__ = "IL_8D";
				continue __step0__;
				break;
			case "IL_8D":
				this.OnUnexpectedError();
				break __step0__;
		}
	}
};
$asm07.System.Xml.DtdParser.prototype.ParseElementDecl = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				if (this.GetToken(true) === $asm07.System.Xml.DtdParser.Token.QName) {
					var schemaElementDecl = new JSIL.Variable(null);
					var nameQualified = this.GetNameQualified(true);
					if (!this.schemaInfo.ElementDecls.TryGetValue(nameQualified, /* ref */ schemaElementDecl)) {
						if (this.schemaInfo.UndeclaredElementDecls.TryGetValue(nameQualified, /* ref */ schemaElementDecl)) {
							this.schemaInfo.UndeclaredElementDecls.Remove(nameQualified);
						} else {
							schemaElementDecl.value = new $asm07.System.Xml.Schema.SchemaElementDecl(nameQualified, nameQualified.Namespace);
						}
						this.schemaInfo.ElementDecls.Add(nameQualified, schemaElementDecl.value);
					}
					schemaElementDecl.value.IsDeclaredInExternal = !this.ParsingInternalSubset;
					var token = this.GetToken(true);
					if (token !== $asm07.System.Xml.DtdParser.Token.LeftParen) {
						switch (Number(token)) {
							case 44: 
							case 45: 
								break;
							default: 
								__label0__ = "IL_E1";
								continue __step0__;
						}
					} else {
						var token2 = this.GetToken(false);
						if (token2 !== $asm07.System.Xml.DtdParser.Token.None) {
							if (token2 !== $asm07.System.Xml.DtdParser.Token.PCDATA) {
								__label0__ = "IL_E1";
								continue __step0__;
							}
							this.ParseElementMixedContentNoValidation();
						} else {
							this.ParseElementOnlyContentNoValidation();
						}
					}
					if (this.GetToken(false) !== $asm07.System.Xml.DtdParser.Token.GreaterThan) {
						this.ThrowUnexpectedToken$0(this.curPos, ">");
					}
					return;
				}
				__label0__ = "IL_E1";
				continue __step0__;
				break;
			case "IL_E1":
				this.OnUnexpectedError();
				break __step0__;
		}
	}
};
$asm07.System.Xml.DtdParser.prototype.ParseElementOnlyContentNoValidation = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				var stack = JSIL.New(System.Collections.Generic.Stack$b1.Of($asm07.System.Xml.DtdParser.ParseElementOnlyContentNoValidation_LocalFrame), "_ctor$0", []);
				var parseElementOnlyContentNoValidation_LocalFrame = new $asm07.System.Xml.DtdParser.ParseElementOnlyContentNoValidation_LocalFrame();
				stack.Push(parseElementOnlyContentNoValidation_LocalFrame);
			__loop0__: 
				while (true) {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								var token = this.GetToken(false);
								if (token !== $asm07.System.Xml.DtdParser.Token.QName) {
									switch (Number(token)) {
										case 27: 
											parseElementOnlyContentNoValidation_LocalFrame = new $asm07.System.Xml.DtdParser.ParseElementOnlyContentNoValidation_LocalFrame();
											stack.Push(parseElementOnlyContentNoValidation_LocalFrame);
											continue __step1__;
											;
										case 28: 
											__label1__ = "IL_FC";
											continue __step1__;
										case 29: 
											this.Throw$0(this.curPos, "Xml_InvalidContentModel");
											__label1__ = "IL_102";
											continue __step1__;
										default: 
											__label1__ = "IL_FC";
											continue __step1__;
									}
								} else {
									this.GetNameQualified(true);
									this.ParseHowManyNoValidation();
								}
								__label1__ = "IL_6F";
								continue __step1__;
								break;
							case "IL_6F":
								var token2 = this.GetToken(false);
								switch (Number(token2)) {
									case 28: 
										this.ParseHowManyNoValidation();
										break;
									case 29: 
										this.Throw$0(this.curPos, "Xml_InvalidContentModel");
										break;
									case 30: 
										if (parseElementOnlyContentNoValidation_LocalFrame.parsingSchema === $asm07.System.Xml.DtdParser.Token.Comma) {
											this.Throw$0(this.curPos, "Xml_InvalidContentModel");
										}
										parseElementOnlyContentNoValidation_LocalFrame.parsingSchema = $asm07.System.Xml.DtdParser.Token.Or;
										continue __step1__;
										;
									default: 
										if (token2 === $asm07.System.Xml.DtdParser.Token.Comma) {
											if (parseElementOnlyContentNoValidation_LocalFrame.parsingSchema === $asm07.System.Xml.DtdParser.Token.Or) {
												this.Throw$0(this.curPos, "Xml_InvalidContentModel");
											}
											parseElementOnlyContentNoValidation_LocalFrame.parsingSchema = $asm07.System.Xml.DtdParser.Token.Comma;
											continue __step1__;
											;
										}
										__label1__ = "IL_FC";
										continue __step1__;
								}
								__label1__ = "IL_102";
								continue __step1__;
								break;
							case "IL_102":
								stack.Pop();
								if (stack.Count > 0) {
									parseElementOnlyContentNoValidation_LocalFrame = stack.Peek();
									__label1__ = "IL_6F";
									continue __step1__;
								}
								break __loop0__;
								__label1__ = "IL_FC";
								continue __step1__;
								break;
							case "IL_FC":
								this.OnUnexpectedError();
								__label1__ = "IL_102";
								continue __step1__;
								break __step1__;
						}
					}
				}
				break __step0__;
		}
	}
};
$asm07.System.Xml.DtdParser.prototype.ParseHowManyNoValidation = function () {
	this.GetToken(false);
};
$asm07.System.Xml.DtdParser.prototype.ParseElementMixedContentNoValidation = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				var flag = false;
			__loop0__: 
				while (true) {
					switch (Number(this.GetToken(false))) {
						case 28: 
							__label0__ = "IL_21";
							continue __step0__;
						case 30: 
							if (!flag) {
								flag = true;
							}
							if (this.GetToken(false) === $asm07.System.Xml.DtdParser.Token.QName) {
								this.GetNameQualified(true);
								continue __step0__;
								;
							}
							break;
					}
					this.OnUnexpectedError();
				}
				__label0__ = "IL_21";
				continue __step0__;
				break;
			case "IL_21":
				if (!((this.GetToken(false) === $asm07.System.Xml.DtdParser.Token.Star) || !flag)) {
					this.ThrowUnexpectedToken$0(this.curPos, "*");
				}
				break __step0__;
		}
	}
};
$asm07.System.Xml.DtdParser.prototype.ParseEntityDecl = function () {
	var __label0__ = null;
__step0__: 
	while (true) {
		switch (__label0__) {
			case null:
				var pubid = new JSIL.Variable(null), url = new JSIL.Variable(null);
				__label0__ = "__entry0__";
				continue __step0__;
				break;
			case "__entry0__":
				var flag = false;
				var token = this.GetToken(true);
				if (token !== $asm07.System.Xml.DtdParser.Token.Name) {
					if (token !== $asm07.System.Xml.DtdParser.Token.Percent) {
						__label0__ = "IL_1B4";
						continue __step0__;
					}
					flag = true;
					if (this.GetToken(true) !== $asm07.System.Xml.DtdParser.Token.Name) {
						__label0__ = "IL_1B4";
						continue __step0__;
					}
				}
				var nameQualified = this.GetNameQualified(false);
				var schemaEntity = new $asm07.System.Xml.Schema.SchemaEntity(nameQualified, flag);
				schemaEntity.BaseURI = this.BaseUriStr;
				schemaEntity.DeclaredURI = (this.externalDtdBaseUri.length === 0) ? this.documentBaseUri : this.externalDtdBaseUri;
				if (flag) {
					if (!this.schemaInfo.ParameterEntities.ContainsKey(nameQualified)) {
						this.schemaInfo.ParameterEntities.Add(nameQualified, schemaEntity);
						__label0__ = "IL_B8";
						continue __step0__;
					}
					__label0__ = "IL_B8";
					continue __step0__;
				} else {
					if (!this.schemaInfo.GeneralEntities.ContainsKey(nameQualified)) {
						this.schemaInfo.GeneralEntities.Add(nameQualified, schemaEntity);
						__label0__ = "IL_B8";
						continue __step0__;
					}
					__label0__ = "IL_B8";
					continue __step0__;
				}
				__label0__ = "IL_1B4";
				continue __step0__;
				break;
			case "IL_1B4":
				this.OnUnexpectedError();
				return;
				__label0__ = "IL_B8";
				continue __step0__;
				break;
			case "IL_B8":
				schemaEntity.DeclaredInExternal = !this.ParsingInternalSubset;
				schemaEntity.ParsingInProgress = true;
				var token2 = this.GetToken(true);
				switch (Number(token2)) {
					case 33: 
					case 34: 
						this.ParseExternalId(token2, $asm07.System.Xml.DtdParser.Token.EntityDecl, /* ref */ pubid, /* ref */ url);
						schemaEntity.IsExternal = true;
						schemaEntity.Url = url.value;
						schemaEntity.Pubid = pubid.value;
						if (this.GetToken(false) === $asm07.System.Xml.DtdParser.Token.NData) {
							if (flag) {
								this.ThrowUnexpectedToken$0((this.curPos - 5), ">");
							}
							if (!this.whitespaceSeen) {
								this.Throw$1((this.curPos - 5), "Xml_ExpectingWhiteSpace", "NDATA");
							}
							if (this.GetToken(true) !== $asm07.System.Xml.DtdParser.Token.Name) {
								__label0__ = "IL_1B4";
								continue __step0__;
							}
							schemaEntity.NData = this.GetNameQualified(false);
						}
						break;
					case 35: 
						schemaEntity.Text = this.GetValue();
						schemaEntity.Line = this.literalLineInfo.lineNo;
						schemaEntity.Pos = this.literalLineInfo.linePos;
						break;
					default: 
						__label0__ = "IL_1B4";
						continue __step0__;
				}
				if (this.GetToken(false) === $asm07.System.Xml.DtdParser.Token.GreaterThan) {
					schemaEntity.ParsingInProgress = false;
					return;
				}
				__label0__ = "IL_1B4";
				continue __step0__;
				break __step0__;
		}
	}
};
$asm07.System.Xml.DtdParser.prototype.ParseNotationDecl = function () {
	var text = new JSIL.Variable(null), text2 = new JSIL.Variable(null);
	if (this.GetToken(true) !== $asm07.System.Xml.DtdParser.Token.Name) {
		this.OnUnexpectedError();
	}
	this.GetNameQualified(false);
	var token = this.GetToken(true);
	if (!((token !== $asm07.System.Xml.DtdParser.Token.SYSTEM) && (token !== $asm07.System.Xml.DtdParser.Token.PUBLIC))) {
		this.ParseExternalId(token, $asm07.System.Xml.DtdParser.Token.NOTATION, /* ref */ text, /* ref */ text2);
	} else {
		this.OnUnexpectedError();
	}
	if (this.GetToken(false) !== $asm07.System.Xml.DtdParser.Token.GreaterThan) {
		this.OnUnexpectedError();
	}
};
$asm07.System.Xml.DtdParser.prototype.ParseComment = function () {
	this.SaveParsingBuffer$0();
	if (this.SaveInternalSubsetValue) {
		this.readerAdapter.IDtdParserAdapter_ParseComment(this.internalSubsetValueSb);
		this.internalSubsetValueSb.Append$2("-->");
	} else {
		this.readerAdapter.IDtdParserAdapter_ParseComment(null);
	}
	this.LoadParsingBuffer();
};
$asm07.System.Xml.DtdParser.prototype.ParsePI = function () {
	this.SaveParsingBuffer$0();
	if (this.SaveInternalSubsetValue) {
		this.readerAdapter.IDtdParserAdapter_ParsePI(this.internalSubsetValueSb);
		this.internalSubsetValueSb.Append$2("?>");
	} else {
		this.readerAdapter.IDtdParserAdapter_ParsePI(null);
	}
	this.LoadParsingBuffer();
};
$asm07.System.Xml.DtdParser.prototype.ParseCondSection = function () {
	switch (Number(this.GetToken(false))) {
		case 46: 
			if ((this.GetToken(false) === $asm07.System.Xml.DtdParser.Token.LeftBracket) && (this.GetToken(false) === $asm07.System.Xml.DtdParser.Token.CondSectionEnd)) {
				return;
			}
			break;
		case 47: 
			if (this.GetToken(false) === $asm07.System.Xml.DtdParser.Token.LeftBracket) {
				++this.condSectionDepth;
				return;
			}
			break;
	}
	this.OnUnexpectedError();
};
$asm07.System.Xml.DtdParser.prototype.ParseExternalId = function (idTokenType, declType, /* ref */ publicId, /* ref */ systemId) {
	var keywordLineInfo = new $asm07.System.Xml.LineInfo(), num = 0;
	keywordLineInfo._ctor(this.LineNo, (this.LinePos - 6));
	publicId.value = null;
	systemId.value = null;
	if (this.GetToken(true) !== $asm07.System.Xml.DtdParser.Token.Literal) {
		this.ThrowUnexpectedToken$1(this.curPos, '"', "'");
	}
	if (idTokenType === $asm07.System.Xml.DtdParser.Token.SYSTEM) {
		systemId.value = this.GetValue();
		if (systemId.value.IndexOf$0("#") >= 0) {
			this.Throw$2(((this.curPos - systemId.value.length) - 1), "Xml_FragmentId", JSIL.Array.New(System.String, [systemId.value.Substring$0(systemId.value.IndexOf$0("#")), systemId.value]));
		}
		if (!((declType !== $asm07.System.Xml.DtdParser.Token.DOCTYPE) || this.freeFloatingDtd)) {
			++this.literalLineInfo.linePos;
			this.readerAdapter.IDtdParserAdapter_OnSystemId(systemId.value, keywordLineInfo.MemberwiseClone(), this.literalLineInfo.MemberwiseClone());
			return;
		}
	} else {
		publicId.value = this.GetValue();
		if ((num = this.xmlCharType.IsPublicId(publicId.value)) >= 0) {
			this.ThrowInvalidChar$0((((this.curPos - 1) - publicId.value.length) + num), publicId.value, num);
		}
		if (!((declType !== $asm07.System.Xml.DtdParser.Token.DOCTYPE) || this.freeFloatingDtd)) {
			++this.literalLineInfo.linePos;
			this.readerAdapter.IDtdParserAdapter_OnPublicId(publicId.value, keywordLineInfo.MemberwiseClone(), this.literalLineInfo.MemberwiseClone());
			if (this.GetToken(false) === $asm07.System.Xml.DtdParser.Token.Literal) {
				if (!this.whitespaceSeen) {
					this.Throw$3("Xml_ExpectingWhiteSpace", JSIL.New(System.String, "_ctor$2", [this.literalQuoteChar, 1]), this.literalLineInfo.lineNo, this.literalLineInfo.linePos);
				}
				systemId.value = this.GetValue();
				++this.literalLineInfo.linePos;
				this.readerAdapter.IDtdParserAdapter_OnSystemId(systemId.value, keywordLineInfo.MemberwiseClone(), this.literalLineInfo.MemberwiseClone());
				return;
			}
			this.ThrowUnexpectedToken$1(this.curPos, '"', "'");
			return;
		} else {
			if (this.GetToken(false) === $asm07.System.Xml.DtdParser.Token.Literal) {
				if (!this.whitespaceSeen) {
					this.Throw$3("Xml_ExpectingWhiteSpace", JSIL.New(System.String, "_ctor$2", [this.literalQuoteChar, 1]), this.literalLineInfo.lineNo, this.literalLineInfo.linePos);
				}
				systemId.value = this.GetValue();
				return;
			}
			if (declType !== $asm07.System.Xml.DtdParser.Token.NOTATION) {
				this.ThrowUnexpectedToken$1(this.curPos, '"', "'");
			}
		}
	}
};
$asm07.System.Xml.DtdParser.prototype.GetToken = function (needWhiteSpace) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				this.whitespaceSeen = false;
			__loop0__: 
				while (true) {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								var c = this.chars[this.curPos];
								if (c <= "\r") {
									if (c !== "\0") {
										switch (c) {
											case "\t": 
												__label1__ = "IL_14C";
												continue __step1__;
											case "\n": 
												this.whitespaceSeen = true;
												++this.curPos;
												this.readerAdapter.IDtdParserAdapter_OnNewLine(this.curPos);
												continue __step1__;
												;
											case "\r": 
												this.whitespaceSeen = true;
												if (this.chars[(this.curPos + 1)] === "\n") {
													if (this.Normalize) {
														this.SaveParsingBuffer$0();
														this.readerAdapter.IDtdParserAdapter_CurrentPosition += 1;
													}
													this.curPos += 2;
												} else {
													if (((this.curPos + 1) >= this.charsUsed) && !this.readerAdapter.IDtdParserAdapter_IsEof) {
														__label1__ = "IL_387";
														continue __step1__;
													}
													this.chars[this.curPos] = "\n";
													++this.curPos;
												}
												this.readerAdapter.IDtdParserAdapter_OnNewLine(this.curPos);
												continue __step1__;
												;
										}
										break __loop0__;
									}
									if (this.curPos !== this.charsUsed) {
										this.ThrowInvalidChar$1(this.chars, this.charsUsed, this.curPos);
										__label1__ = "IL_387";
										continue __step1__;
									}
									__label1__ = "IL_387";
									continue __step1__;
								} else if (c !== " ") {
									if (c !== "%") {
										break __loop0__;
									}
									if ((this.charsUsed - this.curPos) < 2) {
										__label1__ = "IL_387";
										continue __step1__;
									}
									if (this.xmlCharType.IsWhiteSpace(this.chars[(this.curPos + 1)])) {
										break __loop0__;
									}
									if (this.IgnoreEntityReferences) {
										++this.curPos;
										continue __loop0__;
									}
									this.HandleEntityReference$0(true, false, false);
									continue __loop0__;
								}
								__label1__ = "IL_14C";
								continue __step1__;
								break;
							case "IL_14C":
								this.whitespaceSeen = true;
								++this.curPos;
								continue __loop0__;
								__label1__ = "IL_387";
								continue __step1__;
								break;
							case "IL_387":
								if (!((!this.readerAdapter.IDtdParserAdapter_IsEof && 
											(this.ReadData() !== 0)) || this.HandleEntityEnd(false))) {
									if (this.scanningFunction === 0) {
										return $asm07.System.Xml.DtdParser.Token.Eof;
									}
									this.Throw$0(this.curPos, "Xml_IncompleteDtdContent");
								}
								break __step1__;
						}
					}
				}
				if (!(!needWhiteSpace || 
						this.whitespaceSeen || (this.scanningFunction === $asm07.System.Xml.DtdParser.ScanningFunction.ParamEntitySpace))) {
					this.Throw$1(this.curPos, "Xml_ExpectingWhiteSpace", this.ParseUnexpectedToken(this.curPos));
				}
				this.tokenStartPos = this.curPos;
			__loop1__: 
				while (true) {
					switch (Number(this.scanningFunction)) {
						case 0: 
							__label0__ = "IL_2A8";
							continue __step0__;
						case 1: 
							__label0__ = "IL_293";
							continue __step0__;
						case 2: 
							__label0__ = "IL_29A";
							continue __step0__;
						case 3: 
							__label0__ = "IL_2A1";
							continue __step0__;
						case 4: 
							__label0__ = "IL_2AF";
							continue __step0__;
						case 5: 
							__label0__ = "IL_2B6";
							continue __step0__;
						case 6: 
							__label0__ = "IL_2BD";
							continue __step0__;
						case 7: 
							__label0__ = "IL_2C4";
							continue __step0__;
						case 8: 
							__label0__ = "IL_2CB";
							continue __step0__;
						case 9: 
							__label0__ = "IL_2D2";
							continue __step0__;
						case 10: 
							__label0__ = "IL_2D9";
							continue __step0__;
						case 11: 
							__label0__ = "IL_2E0";
							continue __step0__;
						case 12: 
							__label0__ = "IL_2E7";
							continue __step0__;
						case 13: 
							__label0__ = "IL_2EE";
							continue __step0__;
						case 14: 
							__label0__ = "IL_2F5";
							continue __step0__;
						case 15: 
							__label0__ = "IL_2FC";
							continue __step0__;
						case 16: 
							__label0__ = "IL_303";
							continue __step0__;
						case 17: 
							__label0__ = "IL_30A";
							continue __step0__;
						case 18: 
							__label0__ = "IL_311";
							continue __step0__;
						case 19: 
							__label0__ = "IL_318";
							continue __step0__;
						case 20: 
							__label0__ = "IL_33B";
							continue __step0__;
						case 21: 
							__label0__ = "IL_342";
							continue __step0__;
						case 22: 
							__label0__ = "IL_349";
							continue __step0__;
						case 23: 
							__label0__ = "IL_31F";
							continue __step0__;
						case 24: 
							__label0__ = "IL_350";
							continue __step0__;
						case 25: 
							__label0__ = "IL_357";
							continue __step0__;
						case 26: 
							__label0__ = "IL_35E";
							continue __step0__;
						case 28: 
							__label0__ = "IL_326";
							continue __step0__;
						case 29: 
							__label0__ = "IL_32D";
							continue __step0__;
						case 30: 
							__label0__ = "IL_334";
							continue __step0__;
						case 31: 
							__label0__ = "IL_365";
							continue __step0__;
						case 32: 
							this.whitespaceSeen = true;
							this.scanningFunction = this.savedScanningFunction;
							continue __step0__;
							;
					}
					__label0__ = "Block_16";
					continue __step0__;
				}
				__label0__ = "IL_293";
				continue __step0__;
				break;
			case "IL_293":
				return this.ScanNameExpected();
				__label0__ = "Block_16";
				continue __step0__;
				break;
			case "Block_16":
				return $asm07.System.Xml.DtdParser.Token.None;
				__label0__ = "IL_29A";
				continue __step0__;
				break;
			case "IL_29A":
				return this.ScanQNameExpected();
				__label0__ = "IL_2A1";
				continue __step0__;
				break;
			case "IL_2A1":
				return this.ScanNmtokenExpected();
				__label0__ = "IL_2A8";
				continue __step0__;
				break;
			case "IL_2A8":
				return this.ScanSubsetContent();
				__label0__ = "IL_2AF";
				continue __step0__;
				break;
			case "IL_2AF":
				return this.ScanDoctype1();
				__label0__ = "IL_2B6";
				continue __step0__;
				break;
			case "IL_2B6":
				return this.ScanDoctype2();
				__label0__ = "IL_2BD";
				continue __step0__;
				break;
			case "IL_2BD":
				return this.ScanElement1();
				__label0__ = "IL_2C4";
				continue __step0__;
				break;
			case "IL_2C4":
				return this.ScanElement2();
				__label0__ = "IL_2CB";
				continue __step0__;
				break;
			case "IL_2CB":
				return this.ScanElement3();
				__label0__ = "IL_2D2";
				continue __step0__;
				break;
			case "IL_2D2":
				return this.ScanElement4();
				__label0__ = "IL_2D9";
				continue __step0__;
				break;
			case "IL_2D9":
				return this.ScanElement5();
				__label0__ = "IL_2E0";
				continue __step0__;
				break;
			case "IL_2E0":
				return this.ScanElement6();
				__label0__ = "IL_2E7";
				continue __step0__;
				break;
			case "IL_2E7":
				return this.ScanElement7();
				__label0__ = "IL_2EE";
				continue __step0__;
				break;
			case "IL_2EE":
				return this.ScanAttlist1();
				__label0__ = "IL_2F5";
				continue __step0__;
				break;
			case "IL_2F5":
				return this.ScanAttlist2();
				__label0__ = "IL_2FC";
				continue __step0__;
				break;
			case "IL_2FC":
				return this.ScanAttlist3();
				__label0__ = "IL_303";
				continue __step0__;
				break;
			case "IL_303":
				return this.ScanAttlist4();
				__label0__ = "IL_30A";
				continue __step0__;
				break;
			case "IL_30A":
				return this.ScanAttlist5();
				__label0__ = "IL_311";
				continue __step0__;
				break;
			case "IL_311":
				return this.ScanAttlist6();
				__label0__ = "IL_318";
				continue __step0__;
				break;
			case "IL_318":
				return this.ScanAttlist7();
				__label0__ = "IL_31F";
				continue __step0__;
				break;
			case "IL_31F":
				return this.ScanNotation1();
				__label0__ = "IL_326";
				continue __step0__;
				break;
			case "IL_326":
				return this.ScanSystemId();
				__label0__ = "IL_32D";
				continue __step0__;
				break;
			case "IL_32D":
				return this.ScanPublicId1();
				__label0__ = "IL_334";
				continue __step0__;
				break;
			case "IL_334":
				return this.ScanPublicId2();
				__label0__ = "IL_33B";
				continue __step0__;
				break;
			case "IL_33B":
				return this.ScanEntity1();
				__label0__ = "IL_342";
				continue __step0__;
				break;
			case "IL_342":
				return this.ScanEntity2();
				__label0__ = "IL_349";
				continue __step0__;
				break;
			case "IL_349":
				return this.ScanEntity3();
				__label0__ = "IL_350";
				continue __step0__;
				break;
			case "IL_350":
				return this.ScanCondSection1();
				__label0__ = "IL_357";
				continue __step0__;
				break;
			case "IL_357":
				return this.ScanCondSection2();
				__label0__ = "IL_35E";
				continue __step0__;
				break;
			case "IL_35E":
				return this.ScanCondSection3();
				__label0__ = "IL_365";
				continue __step0__;
				break;
			case "IL_365":
				return this.ScanClosingTag();
				break __step0__;
		}
	}
};
$asm07.System.Xml.DtdParser.prototype.ScanSubsetContent = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
			__loop0__: 
				while (true) {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								var c = this.chars[this.curPos];
								if (c !== "<") {
									if (c === "]") {
										if (((this.charsUsed - this.curPos) < 2) && !this.readerAdapter.IDtdParserAdapter_IsEof) {
											__label1__ = "IL_513";
											continue __step1__;
										}
										if (this.chars[(this.curPos + 1)] !== "]") {
											__label0__ = "Block_40";
											continue __step0__;
										}
										if (((this.charsUsed - this.curPos) < 3) && !this.readerAdapter.IDtdParserAdapter_IsEof) {
											__label1__ = "IL_513";
											continue __step1__;
										}
										if (!((this.chars[(this.curPos + 1)] !== "]") || (this.chars[(this.curPos + 2)] !== ">"))) {
											__label0__ = "Block_43";
											continue __step0__;
										}
									}
									if (this.charsUsed - this.curPos) {
										this.Throw$0(this.curPos, "Xml_ExpectDtdMarkup");
									}
								} else {
									var c2 = this.chars[(this.curPos + 1)];
									if (c2 !== "!") {
										if (c2 === "?") {
											__label0__ = "IL_41B";
											continue __step0__;
										}
										if ((this.charsUsed - this.curPos) >= 2) {
											__label0__ = "Block_38";
											continue __step0__;
										}
									} else {
										var c3 = this.chars[(this.curPos + 2)];
										if (c3 <= "A") {
											if (c3 !== "-") {
												if (c3 === "A") {
													if ((this.charsUsed - this.curPos) >= 9) {
														__label0__ = "Block_22";
														continue __step0__;
													}
													__label1__ = "IL_513";
													continue __step1__;
												}
											} else {
												if (this.chars[(this.curPos + 3)] === "-") {
													__label0__ = "Block_35";
													continue __step0__;
												}
												if ((this.charsUsed - this.curPos) >= 4) {
													this.Throw$0(this.curPos, "Xml_ExpectDtdMarkup");
													__label1__ = "IL_513";
													continue __step1__;
												}
												__label1__ = "IL_513";
												continue __step1__;
											}
										} else if (c3 !== "E") {
											if (c3 !== "N") {
												if (c3 === "[") {
													__label0__ = "IL_38A";
													continue __step0__;
												}
											} else {
												if ((this.charsUsed - this.curPos) >= 10) {
													__label0__ = "Block_28";
													continue __step0__;
												}
												__label1__ = "IL_513";
												continue __step1__;
											}
										} else if (this.chars[(this.curPos + 3)] === "L") {
											if ((this.charsUsed - this.curPos) >= 9) {
												break __loop0__;
											}
											__label1__ = "IL_513";
											continue __step1__;
										} else if (this.chars[(this.curPos + 3)] === "N") {
											if ((this.charsUsed - this.curPos) >= 8) {
												__label0__ = "Block_17";
												continue __step0__;
											}
											__label1__ = "IL_513";
											continue __step1__;
										} else {
											if ((this.charsUsed - this.curPos) >= 4) {
												__label0__ = "Block_21";
												continue __step0__;
											}
											__label1__ = "IL_513";
											continue __step1__;
										}
										if ((this.charsUsed - this.curPos) >= 3) {
											this.Throw$0((this.curPos + 2), "Xml_ExpectDtdMarkup");
										}
									}
								}
								__label1__ = "IL_513";
								continue __step1__;
								break;
							case "IL_513":
								if (this.ReadData() === 0) {
									this.Throw$0(this.charsUsed, "Xml_IncompleteDtdContent");
								}
								break __step1__;
						}
					}
				}
				if (!((this.chars[(this.curPos + 4)] === "E") && 
						(this.chars[(this.curPos + 5)] === "M") && 
						(this.chars[(this.curPos + 6)] === "E") && 
						(this.chars[(this.curPos + 7)] === "N") && (this.chars[(this.curPos + 8)] === "T"))) {
					this.Throw$0(this.curPos, "Xml_ExpectDtdMarkup");
					__label0__ = "IL_120";
					continue __step0__;
				}
				__label0__ = "IL_120";
				continue __step0__;
				__label0__ = "Block_17";
				continue __step0__;
				break;
			case "Block_17":
				if (!((this.chars[(this.curPos + 4)] === "T") && 
						(this.chars[(this.curPos + 5)] === "I") && 
						(this.chars[(this.curPos + 6)] === "T") && (this.chars[(this.curPos + 7)] === "Y"))) {
					this.Throw$0(this.curPos, "Xml_ExpectDtdMarkup");
				}
				this.curPos += 8;
				this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.Entity1;
				return $asm07.System.Xml.DtdParser.Token.EntityDecl;
				__label0__ = "Block_21";
				continue __step0__;
				break;
			case "Block_21":
				this.Throw$0(this.curPos, "Xml_ExpectDtdMarkup");
				return $asm07.System.Xml.DtdParser.Token.None;
				__label0__ = "Block_22";
				continue __step0__;
				break;
			case "Block_22":
				if (!((this.chars[(this.curPos + 3)] === "T") && 
						(this.chars[(this.curPos + 4)] === "T") && 
						(this.chars[(this.curPos + 5)] === "L") && 
						(this.chars[(this.curPos + 6)] === "I") && 
						(this.chars[(this.curPos + 7)] === "S") && (this.chars[(this.curPos + 8)] === "T"))) {
					this.Throw$0(this.curPos, "Xml_ExpectDtdMarkup");
				}
				this.curPos += 9;
				this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.QName;
				this.nextScaningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.Attlist1;
				return $asm07.System.Xml.DtdParser.Token.AttlistDecl;
				__label0__ = "Block_28";
				continue __step0__;
				break;
			case "Block_28":
				if (!((this.chars[(this.curPos + 3)] === "O") && 
						(this.chars[(this.curPos + 4)] === "T") && 
						(this.chars[(this.curPos + 5)] === "A") && 
						(this.chars[(this.curPos + 6)] === "T") && 
						(this.chars[(this.curPos + 7)] === "I") && 
						(this.chars[(this.curPos + 8)] === "O") && (this.chars[(this.curPos + 9)] === "N"))) {
					this.Throw$0(this.curPos, "Xml_ExpectDtdMarkup");
				}
				this.curPos += 10;
				this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.Name;
				this.nextScaningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.Notation1;
				return $asm07.System.Xml.DtdParser.Token.NotationDecl;
				__label0__ = "IL_38A";
				continue __step0__;
				break;
			case "IL_38A":
				this.curPos += 3;
				this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.CondSection1;
				return $asm07.System.Xml.DtdParser.Token.CondSectionStart;
				__label0__ = "Block_35";
				continue __step0__;
				break;
			case "Block_35":
				this.curPos += 4;
				return $asm07.System.Xml.DtdParser.Token.Comment;
				__label0__ = "IL_41B";
				continue __step0__;
				break;
			case "IL_41B":
				this.curPos += 2;
				return $asm07.System.Xml.DtdParser.Token.PI;
				__label0__ = "Block_38";
				continue __step0__;
				break;
			case "Block_38":
				this.Throw$0(this.curPos, "Xml_ExpectDtdMarkup");
				return $asm07.System.Xml.DtdParser.Token.None;
				__label0__ = "Block_40";
				continue __step0__;
				break;
			case "Block_40":
				++this.curPos;
				this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.ClosingTag;
				return $asm07.System.Xml.DtdParser.Token.RightBracket;
				__label0__ = "Block_43";
				continue __step0__;
				break;
			case "Block_43":
				this.curPos += 3;
				return $asm07.System.Xml.DtdParser.Token.CondSectionEnd;
				__label0__ = "IL_120";
				continue __step0__;
				break;
			case "IL_120":
				this.curPos += 9;
				this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.QName;
				this.nextScaningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.Element1;
				return $asm07.System.Xml.DtdParser.Token.ElementDecl;
				break __step0__;
		}
	}
};
$asm07.System.Xml.DtdParser.prototype.ScanNameExpected = function () {
	this.ScanName();
	this.scanningFunction = this.nextScaningFunction;
	return $asm07.System.Xml.DtdParser.Token.Name;
};
$asm07.System.Xml.DtdParser.prototype.ScanQNameExpected = function () {
	this.ScanQName$0();
	this.scanningFunction = this.nextScaningFunction;
	return $asm07.System.Xml.DtdParser.Token.QName;
};
$asm07.System.Xml.DtdParser.prototype.ScanNmtokenExpected = function () {
	this.ScanNmtoken();
	this.scanningFunction = this.nextScaningFunction;
	return $asm07.System.Xml.DtdParser.Token.Nmtoken;
};
$asm07.System.Xml.DtdParser.prototype.ScanDoctype1 = function () {
	var c = this.chars[this.curPos];
	if (c <= "P") {
		if (c === ">") {
			++this.curPos;
			this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.SubsetContent;
			return $asm07.System.Xml.DtdParser.Token.GreaterThan;
		}
		if (c === "P") {
			if (!this.EatPublicKeyword()) {
				this.Throw$0(this.curPos, "Xml_ExpectExternalOrClose");
			}
			this.nextScaningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.Doctype2;
			this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.PublicId1;
			return $asm07.System.Xml.DtdParser.Token.PUBLIC;
		}
	} else {
		if (c === "S") {
			if (!this.EatSystemKeyword()) {
				this.Throw$0(this.curPos, "Xml_ExpectExternalOrClose");
			}
			this.nextScaningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.Doctype2;
			this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.SystemId;
			return $asm07.System.Xml.DtdParser.Token.SYSTEM;
		}
		if (c === "[") {
			++this.curPos;
			this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.SubsetContent;
			return $asm07.System.Xml.DtdParser.Token.LeftBracket;
		}
	}
	this.Throw$0(this.curPos, "Xml_ExpectExternalOrClose");
	return $asm07.System.Xml.DtdParser.Token.None;
};
$asm07.System.Xml.DtdParser.prototype.ScanDoctype2 = function () {
	var c = this.chars[this.curPos];
	if (c === ">") {
		++this.curPos;
		this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.SubsetContent;
		return $asm07.System.Xml.DtdParser.Token.GreaterThan;
	}
	if (c === "[") {
		++this.curPos;
		this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.SubsetContent;
		return $asm07.System.Xml.DtdParser.Token.LeftBracket;
	}
	this.Throw$0(this.curPos, "Xml_ExpectSubOrClose");
	return $asm07.System.Xml.DtdParser.Token.None;
};
$asm07.System.Xml.DtdParser.prototype.ScanClosingTag = function () {
	if (this.chars[this.curPos] !== ">") {
		this.ThrowUnexpectedToken$0(this.curPos, ">");
	}
	++this.curPos;
	this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.SubsetContent;
	return $asm07.System.Xml.DtdParser.Token.GreaterThan;
};
$asm07.System.Xml.DtdParser.prototype.ScanElement1 = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
			__loop0__: 
				while (true) {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								var c = this.chars[this.curPos];
								if (c !== "(") {
									var __label2__ = "__entry2__";
								__step2__: 
									while (true) {
										switch (__label2__) {
											case "__entry2__":
												if (c !== "A") {
													if (c !== "E") {
														__label2__ = "IL_10A";
														continue __step2__;
													}
													if ((this.charsUsed - this.curPos) >= 5) {
														if (!((this.chars[(this.curPos + 1)] !== "M") || 
																(this.chars[(this.curPos + 2)] !== "P") || 
																(this.chars[(this.curPos + 3)] !== "T") || (this.chars[(this.curPos + 4)] !== "Y"))) {
															__label0__ = "Block_7";
															continue __step0__;
														}
														__label2__ = "IL_10A";
														continue __step2__;
													}
												} else if ((this.charsUsed - this.curPos) >= 3) {
													if (!((this.chars[(this.curPos + 1)] !== "N") || (this.chars[(this.curPos + 2)] !== "Y"))) {
														__label0__ = "Block_10";
														continue __step0__;
													}
													__label2__ = "IL_10A";
													continue __step2__;
												}
												__label2__ = "IL_11B";
												continue __step2__;
												break;
											case "IL_11B":
												if (this.ReadData() === 0) {
													this.Throw$0(this.curPos, "Xml_IncompleteDtdContent");
													continue __loop0__;
												}
												continue __loop0__;
												__label2__ = "IL_10A";
												continue __step2__;
												break;
											case "IL_10A":
												this.Throw$0(this.curPos, "Xml_InvalidContentModel");
												__label2__ = "IL_11B";
												continue __step2__;
												break __step2__;
										}
									}
								}
								break __loop0__;
								break __step1__;
						}
					}
				}
				this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.Element2;
				++this.curPos;
				return $asm07.System.Xml.DtdParser.Token.LeftParen;
				__label0__ = "Block_7";
				continue __step0__;
				break;
			case "Block_7":
				this.curPos += 5;
				this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.ClosingTag;
				return $asm07.System.Xml.DtdParser.Token.EMPTY;
				__label0__ = "Block_10";
				continue __step0__;
				break;
			case "Block_10":
				this.curPos += 3;
				this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.ClosingTag;
				return $asm07.System.Xml.DtdParser.Token.ANY;
				break __step0__;
		}
	}
};
$asm07.System.Xml.DtdParser.prototype.ScanElement2 = function () {
	if (this.chars[this.curPos] === "#") {
	__loop0__: 
		while ((this.charsUsed - this.curPos) < 7) {
			if (this.ReadData() === 0) {
				this.Throw$0(this.curPos, "Xml_IncompleteDtdContent");
			}
		}
		if (!((this.chars[(this.curPos + 1)] !== "P") || 
				(this.chars[(this.curPos + 2)] !== "C") || 
				(this.chars[(this.curPos + 3)] !== "D") || 
				(this.chars[(this.curPos + 4)] !== "A") || 
				(this.chars[(this.curPos + 5)] !== "T") || (this.chars[(this.curPos + 6)] !== "A"))) {
			this.curPos += 7;
			this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.Element6;
			return $asm07.System.Xml.DtdParser.Token.PCDATA;
		}
		this.Throw$0((this.curPos + 1), "Xml_ExpectPcData");
	}
	this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.Element3;
	return $asm07.System.Xml.DtdParser.Token.None;
};
$asm07.System.Xml.DtdParser.prototype.ScanElement3 = function () {
	var c = this.chars[this.curPos];
	if (c === "(") {
		++this.curPos;
		return $asm07.System.Xml.DtdParser.Token.LeftParen;
	}
	if (c !== ">") {
		this.ScanQName$0();
		this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.Element4;
		return $asm07.System.Xml.DtdParser.Token.QName;
	}
	++this.curPos;
	this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.SubsetContent;
	return $asm07.System.Xml.DtdParser.Token.GreaterThan;
};
$asm07.System.Xml.DtdParser.prototype.ScanElement4 = function () {
	this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.Element5;
	var c = this.chars[this.curPos];
	switch (c) {
		case "*": 
			var result = $asm07.System.Xml.DtdParser.Token.Star;
			break;
		case "+": 
			result = $asm07.System.Xml.DtdParser.Token.Plus;
			break;
		default: 
			if (c !== "?") {
				return $asm07.System.Xml.DtdParser.Token.None;
			}
			result = $asm07.System.Xml.DtdParser.Token.QMark;
			break;
	}
	if (this.whitespaceSeen) {
		this.Throw$0(this.curPos, "Xml_ExpectNoWhitespace");
	}
	++this.curPos;
	return result;
};
$asm07.System.Xml.DtdParser.prototype.ScanElement5 = function () {
	var c = this.chars[this.curPos];
	if (c <= ",") {
		if (c === ")") {
			++this.curPos;
			this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.Element4;
			return $asm07.System.Xml.DtdParser.Token.RightParen;
		}
		if (c === ",") {
			++this.curPos;
			this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.Element3;
			return $asm07.System.Xml.DtdParser.Token.Comma;
		}
	} else {
		if (c === ">") {
			++this.curPos;
			this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.SubsetContent;
			return $asm07.System.Xml.DtdParser.Token.GreaterThan;
		}
		if (c === "|") {
			++this.curPos;
			this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.Element3;
			return $asm07.System.Xml.DtdParser.Token.Or;
		}
	}
	this.Throw$0(this.curPos, "Xml_ExpectOp");
	return $asm07.System.Xml.DtdParser.Token.None;
};
$asm07.System.Xml.DtdParser.prototype.ScanElement6 = function () {
	var c = this.chars[this.curPos];
	if (c === ")") {
		++this.curPos;
		this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.Element7;
		return $asm07.System.Xml.DtdParser.Token.RightParen;
	}
	if (c !== "|") {
		this.ThrowUnexpectedToken$1(this.curPos, ")", "|");
		return $asm07.System.Xml.DtdParser.Token.None;
	}
	++this.curPos;
	this.nextScaningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.Element6;
	this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.QName;
	return $asm07.System.Xml.DtdParser.Token.Or;
};
$asm07.System.Xml.DtdParser.prototype.ScanElement7 = function () {
	this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.ClosingTag;
	if (!((this.chars[this.curPos] !== "*") || this.whitespaceSeen)) {
		++this.curPos;
		return $asm07.System.Xml.DtdParser.Token.Star;
	}
	return $asm07.System.Xml.DtdParser.Token.None;
};
$asm07.System.Xml.DtdParser.prototype.ScanAttlist1 = function () {
	var c = this.chars[this.curPos];
	if (c === ">") {
		++this.curPos;
		this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.SubsetContent;
		return $asm07.System.Xml.DtdParser.Token.GreaterThan;
	}
	if (!this.whitespaceSeen) {
		this.Throw$1(this.curPos, "Xml_ExpectingWhiteSpace", this.ParseUnexpectedToken(this.curPos));
	}
	this.ScanQName$0();
	this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.Attlist2;
	return $asm07.System.Xml.DtdParser.Token.QName;
};
$asm07.System.Xml.DtdParser.prototype.ScanAttlist2 = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
			__loop0__: 
				while (true) {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								var c = this.chars[this.curPos];
								if (c <= "E") {
									if (c === "(") {
										break __loop0__;
									}
									switch (c) {
										case "C": 
											if ((this.charsUsed - this.curPos) >= 5) {
												__label0__ = "Block_5";
												continue __step0__;
											}
											break;
										case "D": 
											__label1__ = "IL_460";
											continue __step1__;
										case "E": 
											if ((this.charsUsed - this.curPos) >= 9) {
												this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.Attlist6;
												if (!((this.chars[(this.curPos + 1)] === "N") && 
														(this.chars[(this.curPos + 2)] === "T") && 
														(this.chars[(this.curPos + 3)] === "I") && (this.chars[(this.curPos + 4)] === "T"))) {
													this.Throw$0(this.curPos, "Xml_InvalidAttributeType");
												}
												var c2 = this.chars[(this.curPos + 5)];
												if (c2 === "I") {
													__label0__ = "IL_184";
													continue __step0__;
												}
												if (c2 === "Y") {
													__label0__ = "IL_1CB";
													continue __step0__;
												}
												this.Throw$0(this.curPos, "Xml_InvalidAttributeType");
											}
											break;
										default: 
											__label1__ = "IL_460";
											continue __step1__;
									}
								} else if (c !== "I") {
									if (c !== "N") {
										__label1__ = "IL_460";
										continue __step1__;
									}
									if (!(((this.charsUsed - this.curPos) < 8) && !this.readerAdapter.IDtdParserAdapter_IsEof)) {
										switch (this.chars[(this.curPos + 1)]) {
											case "M": 
												__label0__ = "IL_3A2";
												continue __step0__;
											case "O": 
												__label0__ = "IL_307";
												continue __step0__;
										}
										this.Throw$0(this.curPos, "Xml_InvalidAttributeType");
									}
								} else if ((this.charsUsed - this.curPos) >= 6) {
									__label0__ = "Block_16";
									continue __step0__;
								}
								__label1__ = "IL_471";
								continue __step1__;
								break;
							case "IL_471":
								if (this.ReadData() === 0) {
									this.Throw$0(this.curPos, "Xml_IncompleteDtdContent");
									continue __loop0__;
								}
								continue __loop0__;
								__label1__ = "IL_460";
								continue __step1__;
								break;
							case "IL_460":
								this.Throw$0(this.curPos, "Xml_InvalidAttributeType");
								__label1__ = "IL_471";
								continue __step1__;
								break __step1__;
						}
					}
				}
				++this.curPos;
				this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.Nmtoken;
				this.nextScaningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.Attlist5;
				return $asm07.System.Xml.DtdParser.Token.LeftParen;
				__label0__ = "Block_5";
				continue __step0__;
				break;
			case "Block_5":
				if (!((this.chars[(this.curPos + 1)] === "D") && 
						(this.chars[(this.curPos + 2)] === "A") && 
						(this.chars[(this.curPos + 3)] === "T") && (this.chars[(this.curPos + 4)] === "A"))) {
					this.Throw$0(this.curPos, "Xml_InvalidAttributeType1");
				}
				this.curPos += 5;
				this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.Attlist6;
				return $asm07.System.Xml.DtdParser.Token.CDATA;
				__label0__ = "IL_184";
				continue __step0__;
				break;
			case "IL_184":
				if (!((this.chars[(this.curPos + 6)] === "E") && (this.chars[(this.curPos + 7)] === "S"))) {
					this.Throw$0(this.curPos, "Xml_InvalidAttributeType");
				}
				this.curPos += 8;
				return $asm07.System.Xml.DtdParser.Token.ENTITIES;
				__label0__ = "IL_1CB";
				continue __step0__;
				break;
			case "IL_1CB":
				this.curPos += 6;
				return $asm07.System.Xml.DtdParser.Token.ENTITY;
				__label0__ = "Block_16";
				continue __step0__;
				break;
			case "Block_16":
				this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.Attlist6;
				if (this.chars[(this.curPos + 1)] !== "D") {
					this.Throw$0(this.curPos, "Xml_InvalidAttributeType");
				}
				if (this.chars[(this.curPos + 2)] !== "R") {
					this.curPos += 2;
					return $asm07.System.Xml.DtdParser.Token.ID;
				}
				if (!((this.chars[(this.curPos + 3)] === "E") && (this.chars[(this.curPos + 4)] === "F"))) {
					this.Throw$0(this.curPos, "Xml_InvalidAttributeType");
				}
				if (this.chars[(this.curPos + 5)] !== "S") {
					this.curPos += 5;
					return $asm07.System.Xml.DtdParser.Token.IDREF;
				}
				this.curPos += 6;
				return $asm07.System.Xml.DtdParser.Token.IDREFS;
				__label0__ = "IL_307";
				continue __step0__;
				break;
			case "IL_307":
				if (!((this.chars[(this.curPos + 2)] === "T") && 
						(this.chars[(this.curPos + 3)] === "A") && 
						(this.chars[(this.curPos + 4)] === "T") && 
						(this.chars[(this.curPos + 5)] === "I") && 
						(this.chars[(this.curPos + 6)] === "O") && (this.chars[(this.curPos + 7)] === "N"))) {
					this.Throw$0(this.curPos, "Xml_InvalidAttributeType");
				}
				this.curPos += 8;
				this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.Attlist3;
				return $asm07.System.Xml.DtdParser.Token.NOTATION;
				__label0__ = "IL_3A2";
				continue __step0__;
				break;
			case "IL_3A2":
				if (!((this.chars[(this.curPos + 2)] === "T") && 
						(this.chars[(this.curPos + 3)] === "O") && 
						(this.chars[(this.curPos + 4)] === "K") && 
						(this.chars[(this.curPos + 5)] === "E") && (this.chars[(this.curPos + 6)] === "N"))) {
					this.Throw$0(this.curPos, "Xml_InvalidAttributeType");
				}
				this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.Attlist6;
				if (this.chars[(this.curPos + 7)] === "S") {
					this.curPos += 8;
					return $asm07.System.Xml.DtdParser.Token.NMTOKENS;
				}
				this.curPos += 7;
				return $asm07.System.Xml.DtdParser.Token.NMTOKEN;
				break __step0__;
		}
	}
};
$asm07.System.Xml.DtdParser.prototype.ScanAttlist3 = function () {
	if (this.chars[this.curPos] === "(") {
		++this.curPos;
		this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.Name;
		this.nextScaningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.Attlist4;
		return $asm07.System.Xml.DtdParser.Token.LeftParen;
	}
	this.ThrowUnexpectedToken$0(this.curPos, "(");
	return $asm07.System.Xml.DtdParser.Token.None;
};
$asm07.System.Xml.DtdParser.prototype.ScanAttlist4 = function () {
	var c = this.chars[this.curPos];
	if (c === ")") {
		++this.curPos;
		this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.Attlist6;
		return $asm07.System.Xml.DtdParser.Token.RightParen;
	}
	if (c !== "|") {
		this.ThrowUnexpectedToken$1(this.curPos, ")", "|");
		return $asm07.System.Xml.DtdParser.Token.None;
	}
	++this.curPos;
	this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.Name;
	this.nextScaningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.Attlist4;
	return $asm07.System.Xml.DtdParser.Token.Or;
};
$asm07.System.Xml.DtdParser.prototype.ScanAttlist5 = function () {
	var c = this.chars[this.curPos];
	if (c === ")") {
		++this.curPos;
		this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.Attlist6;
		return $asm07.System.Xml.DtdParser.Token.RightParen;
	}
	if (c !== "|") {
		this.ThrowUnexpectedToken$1(this.curPos, ")", "|");
		return $asm07.System.Xml.DtdParser.Token.None;
	}
	++this.curPos;
	this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.Nmtoken;
	this.nextScaningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.Attlist5;
	return $asm07.System.Xml.DtdParser.Token.Or;
};
$asm07.System.Xml.DtdParser.prototype.ScanAttlist6 = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
			__loop0__: 
				while (true) {
					var c = this.chars[this.curPos];
					switch (c) {
						case '"': 
							__label0__ = "IL_27";
							continue __step0__;
						case "#": 
							if ((this.charsUsed - this.curPos) >= 6) {
								var c2 = this.chars[(this.curPos + 1)];
								if (c2 === "F") {
									__label0__ = "IL_1E8";
									continue __step0__;
								}
								if (c2 !== "I") {
									if (c2 === "R") {
										if ((this.charsUsed - this.curPos) >= 9) {
											__label0__ = "Block_5";
											continue __step0__;
										}
									} else {
										this.Throw$0(this.curPos, "Xml_ExpectAttType");
									}
								} else if ((this.charsUsed - this.curPos) >= 8) {
									__label0__ = "Block_12";
									continue __step0__;
								}
							}
							break;
						default: 
							if (c === "'") {
								__label0__ = "IL_27";
								continue __step0__;
							}
							this.Throw$0(this.curPos, "Xml_ExpectAttType");
							break;
					}
					if (this.ReadData() === 0) {
						this.Throw$0(this.curPos, "Xml_IncompleteDtdContent");
					}
				}
				__label0__ = "IL_27";
				continue __step0__;
				break;
			case "IL_27":
				this.ScanLiteral($asm07.System.Xml.DtdParser.LiteralType.AttributeValue);
				this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.Attlist1;
				return $asm07.System.Xml.DtdParser.Token.Literal;
				__label0__ = "Block_5";
				continue __step0__;
				break;
			case "Block_5":
				if (!((this.chars[(this.curPos + 2)] === "E") && 
						(this.chars[(this.curPos + 3)] === "Q") && 
						(this.chars[(this.curPos + 4)] === "U") && 
						(this.chars[(this.curPos + 5)] === "I") && 
						(this.chars[(this.curPos + 6)] === "R") && 
						(this.chars[(this.curPos + 7)] === "E") && (this.chars[(this.curPos + 8)] === "D"))) {
					this.Throw$0(this.curPos, "Xml_ExpectAttType");
				}
				this.curPos += 9;
				this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.Attlist1;
				return $asm07.System.Xml.DtdParser.Token.REQUIRED;
				__label0__ = "Block_12";
				continue __step0__;
				break;
			case "Block_12":
				if (!((this.chars[(this.curPos + 2)] === "M") && 
						(this.chars[(this.curPos + 3)] === "P") && 
						(this.chars[(this.curPos + 4)] === "L") && 
						(this.chars[(this.curPos + 5)] === "I") && 
						(this.chars[(this.curPos + 6)] === "E") && (this.chars[(this.curPos + 7)] === "D"))) {
					this.Throw$0(this.curPos, "Xml_ExpectAttType");
				}
				this.curPos += 8;
				this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.Attlist1;
				return $asm07.System.Xml.DtdParser.Token.IMPLIED;
				__label0__ = "IL_1E8";
				continue __step0__;
				break;
			case "IL_1E8":
				if (!((this.chars[(this.curPos + 2)] === "I") && 
						(this.chars[(this.curPos + 3)] === "X") && 
						(this.chars[(this.curPos + 4)] === "E") && (this.chars[(this.curPos + 5)] === "D"))) {
					this.Throw$0(this.curPos, "Xml_ExpectAttType");
				}
				this.curPos += 6;
				this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.Attlist7;
				return $asm07.System.Xml.DtdParser.Token.FIXED;
				break __step0__;
		}
	}
};
$asm07.System.Xml.DtdParser.prototype.ScanAttlist7 = function () {
	var c = this.chars[this.curPos];
	if (!((c !== '"') && (c !== "'"))) {
		this.ScanLiteral($asm07.System.Xml.DtdParser.LiteralType.AttributeValue);
		this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.Attlist1;
		return $asm07.System.Xml.DtdParser.Token.Literal;
	}
	this.ThrowUnexpectedToken$1(this.curPos, '"', "'");
	return $asm07.System.Xml.DtdParser.Token.None;
};
$asm07.System.Xml.DtdParser.prototype.ScanLiteral = function (literalType) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				var c = this.chars[this.curPos];
				var value = !JSIL.Cast(literalType, System.Boolean) ? " " : "\n";
				var num = this.currentEntityId;
				this.literalLineInfo.Set(this.LineNo, this.LinePos);
				++this.curPos;
				this.tokenStartPos = this.curPos;
				this.stringBuilder.Clear();
			__loop0__: 
				while (true) {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								if (!(this.xmlCharType.IsAttributeValueChar(this.chars[this.curPos]) && (this.chars[this.curPos] !== "%"))) {
									var __label2__ = "__entry2__";
								__step2__: 
									while (true) {
										switch (__label2__) {
											case "__entry2__":
												if (!((this.chars[this.curPos] !== c) || (this.currentEntityId !== num))) {
													break __loop0__;
												}
												var num2 = (this.curPos - this.tokenStartPos);
												if (num2 > 0) {
													this.stringBuilder.Append$1(this.chars, this.tokenStartPos, num2);
													this.tokenStartPos = this.curPos;
												}
												var c2 = this.chars[this.curPos];
												switch (c2) {
													case "\t": 
														if (!(JSIL.Cast(literalType, System.Boolean) || !this.Normalize)) {
															this.stringBuilder.Append$0(" ");
															++this.tokenStartPos;
														}
														++this.curPos;
														continue __step2__;
														;
													case "\n": 
														++this.curPos;
														if (this.Normalize) {
															this.stringBuilder.Append$0(value);
															this.tokenStartPos = this.curPos;
														}
														this.readerAdapter.IDtdParserAdapter_OnNewLine(this.curPos);
														continue __step2__;
														;
													case "\x0b": 
													case "\x0c": 
														break;
													case "\r": 
														if (this.chars[(this.curPos + 1)] === "\n") {
															if (this.Normalize) {
																if (!JSIL.Cast(literalType, System.Boolean)) {
																	this.stringBuilder.Append$2(this.readerAdapter.IDtdParserAdapter_IsEntityEolNormalized ? "  " : " ");
																} else {
																	this.stringBuilder.Append$2(this.readerAdapter.IDtdParserAdapter_IsEntityEolNormalized ? "\r\n" : "\n");
																}
																this.tokenStartPos = (this.curPos + 2);
																this.SaveParsingBuffer$0();
																this.readerAdapter.IDtdParserAdapter_CurrentPosition += 1;
															}
															this.curPos += 2;
														} else {
															if ((this.curPos + 1) === this.charsUsed) {
																__label2__ = "IL_5BB";
																continue __step2__;
															}
															++this.curPos;
															if (this.Normalize) {
																this.stringBuilder.Append$0(value);
																this.tokenStartPos = this.curPos;
															}
														}
														this.readerAdapter.IDtdParserAdapter_OnNewLine(this.curPos);
														continue __step2__;
														;
													default: 
														switch (c2) {
															case '"': 
															case "'": 
																break;
															case "#": 
															case "$": 
																__label2__ = "IL_535";
																continue __step2__;
															case "%": 
																if (literalType !== $asm07.System.Xml.DtdParser.LiteralType.EntityReplText) {
																	++this.curPos;
																	continue __step2__;
																	;
																}
																this.HandleEntityReference$0(true, true, (literalType === $asm07.System.Xml.DtdParser.LiteralType.AttributeValue));
																this.tokenStartPos = this.curPos;
																continue __step2__;
																;
															case "&": 
																if (literalType === $asm07.System.Xml.DtdParser.LiteralType.SystemOrPublicID) {
																	++this.curPos;
																	continue __step2__;
																	;
																}
																if ((this.curPos + 1) === this.charsUsed) {
																	__label2__ = "IL_5BB";
																	continue __step2__;
																}
																if (this.chars[(this.curPos + 1)] === "#") {
																	this.SaveParsingBuffer$0();
																	var num3 = this.readerAdapter.IDtdParserAdapter_ParseNumericCharRef(this.SaveInternalSubsetValue ? this.internalSubsetValueSb : null);
																	this.LoadParsingBuffer();
																	this.stringBuilder.Append$1(this.chars, this.curPos, (num3 - this.curPos));
																	this.readerAdapter.IDtdParserAdapter_CurrentPosition = num3;
																	this.tokenStartPos = num3;
																	this.curPos = num3;
																	continue __step2__;
																	;
																}
																this.SaveParsingBuffer$0();
																if (!JSIL.Cast(literalType, System.Boolean)) {
																	var num4 = this.readerAdapter.IDtdParserAdapter_ParseNamedCharRef(true, this.SaveInternalSubsetValue ? this.internalSubsetValueSb : null);
																	this.LoadParsingBuffer();
																	if (num4 >= 0) {
																		this.stringBuilder.Append$1(this.chars, this.curPos, (num4 - this.curPos));
																		this.readerAdapter.IDtdParserAdapter_CurrentPosition = num4;
																		this.tokenStartPos = num4;
																		this.curPos = num4;
																		continue __step2__;
																		;
																	}
																	this.HandleEntityReference$0(false, true, true);
																	this.tokenStartPos = this.curPos;
																	continue __step2__;
																	;
																} else {
																	var num5 = this.readerAdapter.IDtdParserAdapter_ParseNamedCharRef(false, null);
																	this.LoadParsingBuffer();
																	if (num5 >= 0) {
																		this.tokenStartPos = this.curPos;
																		this.curPos = num5;
																		continue __step2__;
																		;
																	}
																	this.stringBuilder.Append$0("&");
																	++this.curPos;
																	this.tokenStartPos = this.curPos;
																	var entityName = this.ScanEntityName();
																	this.VerifyEntityReference(entityName, false, false, false);
																	continue __step2__;
																	;
																}
																break;
															default: 
																switch (c2) {
																	case "<": 
																		if (!JSIL.Cast(literalType, System.Boolean)) {
																			this.Throw$2(this.curPos, "Xml_BadAttributeChar", System.Xml.XmlException.BuildCharExceptionArgs$3("<", "\0"));
																		}
																		++this.curPos;
																		continue __step2__;
																		;
																	case "=": 
																		__label2__ = "IL_535";
																		continue __step2__;
																	case ">": 
																		break;
																	default: 
																		__label2__ = "IL_535";
																		continue __step2__;
																}
																break;
														}
														++this.curPos;
														continue __step2__;
														;
												}
												__label2__ = "IL_535";
												continue __step2__;
												break;
											case "IL_535":
												if (this.curPos !== this.charsUsed) {
													var ch = this.chars[this.curPos];
													if (!$asm07.System.Xml.XmlCharType.IsHighSurrogate(ch.charCodeAt(0))) {
														__label0__ = "IL_5A0";
														continue __step0__;
													}
													if ((this.curPos + 1) !== this.charsUsed) {
														++this.curPos;
														if ($asm07.System.Xml.XmlCharType.IsLowSurrogate(this.chars[this.curPos])) {
															++this.curPos;
															continue __loop0__;
														}
														__label0__ = "IL_5A0";
														continue __step0__;
													}
												}
												__label2__ = "IL_5BB";
												continue __step2__;
												break;
											case "IL_5BB":
												if (!((!this.readerAdapter.IDtdParserAdapter_IsEof && 
															(this.ReadData() !== 0)) || ((literalType !== $asm07.System.Xml.DtdParser.LiteralType.SystemOrPublicID) && 
															this.HandleEntityEnd(true)))) {
													this.Throw$0(this.curPos, "Xml_UnclosedQuote");
												}
												this.tokenStartPos = this.curPos;
												break __step2__;
										}
									}
								} else {
									++this.curPos;
								}
								break __step1__;
						}
					}
				}
				if (this.stringBuilder.Length > 0) {
					this.stringBuilder.Append$1(this.chars, this.tokenStartPos, (this.curPos - this.tokenStartPos));
					__label0__ = "IL_E1";
					continue __step0__;
				}
				__label0__ = "IL_E1";
				continue __step0__;
				__label0__ = "IL_5A0";
				continue __step0__;
				break;
			case "IL_5A0":
				this.ThrowInvalidChar$1(this.chars, this.charsUsed, this.curPos);
				return $asm07.System.Xml.DtdParser.Token.None;
				__label0__ = "IL_E1";
				continue __step0__;
				break;
			case "IL_E1":
				++this.curPos;
				this.literalQuoteChar = c;
				return $asm07.System.Xml.DtdParser.Token.Literal;
				break __step0__;
		}
	}
};
$asm07.System.Xml.DtdParser.prototype.ScanEntityName = function () {
	try {
		this.ScanName();
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.Xml.XmlException)) {
			var xmlException = $exception;
			this.Throw$3("Xml_ErrorParsingEntityName", System.String.Empty, xmlException.LineNumber, xmlException.LinePosition);
		} else {
			throw $exception;
		}
	}
	if (this.chars[this.curPos] !== ";") {
		this.ThrowUnexpectedToken$0(this.curPos, ";");
	}
	var nameQualified = this.GetNameQualified(false);
	++this.curPos;
	return nameQualified;
};
$asm07.System.Xml.DtdParser.prototype.ScanNotation1 = function () {
	var c = this.chars[this.curPos];
	if (c === "P") {
		if (!this.EatPublicKeyword()) {
			this.Throw$0(this.curPos, "Xml_ExpectExternalOrClose");
		}
		this.nextScaningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.ClosingTag;
		this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.PublicId1;
		return $asm07.System.Xml.DtdParser.Token.PUBLIC;
	}
	if (c !== "S") {
		this.Throw$0(this.curPos, "Xml_ExpectExternalOrPublicId");
		return $asm07.System.Xml.DtdParser.Token.None;
	}
	if (!this.EatSystemKeyword()) {
		this.Throw$0(this.curPos, "Xml_ExpectExternalOrClose");
	}
	this.nextScaningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.ClosingTag;
	this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.SystemId;
	return $asm07.System.Xml.DtdParser.Token.SYSTEM;
};
$asm07.System.Xml.DtdParser.prototype.ScanSystemId = function () {
	if (!((this.chars[this.curPos] === '"') || (this.chars[this.curPos] === "'"))) {
		this.ThrowUnexpectedToken$1(this.curPos, '"', "'");
	}
	this.ScanLiteral($asm07.System.Xml.DtdParser.LiteralType.SystemOrPublicID);
	this.scanningFunction = this.nextScaningFunction;
	return $asm07.System.Xml.DtdParser.Token.Literal;
};
$asm07.System.Xml.DtdParser.prototype.ScanEntity1 = function () {
	if (this.chars[this.curPos] === "%") {
		++this.curPos;
		this.nextScaningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.Entity2;
		this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.Name;
		return $asm07.System.Xml.DtdParser.Token.Percent;
	}
	this.ScanName();
	this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.Entity2;
	return $asm07.System.Xml.DtdParser.Token.Name;
};
$asm07.System.Xml.DtdParser.prototype.ScanEntity2 = function () {
	var c = this.chars[this.curPos];
	if (c <= "'") {
		if ((c === '"') || (c === "'")) {
			this.ScanLiteral($asm07.System.Xml.DtdParser.LiteralType.EntityReplText);
			this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.ClosingTag;
			return $asm07.System.Xml.DtdParser.Token.Literal;
		}
	} else {
		if (c === "P") {
			if (!this.EatPublicKeyword()) {
				this.Throw$0(this.curPos, "Xml_ExpectExternalOrClose");
			}
			this.nextScaningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.Entity3;
			this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.PublicId1;
			return $asm07.System.Xml.DtdParser.Token.PUBLIC;
		}
		if (c === "S") {
			if (!this.EatSystemKeyword()) {
				this.Throw$0(this.curPos, "Xml_ExpectExternalOrClose");
			}
			this.nextScaningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.Entity3;
			this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.SystemId;
			return $asm07.System.Xml.DtdParser.Token.SYSTEM;
		}
	}
	this.Throw$0(this.curPos, "Xml_ExpectExternalIdOrEntityValue");
	return $asm07.System.Xml.DtdParser.Token.None;
};
$asm07.System.Xml.DtdParser.prototype.ScanEntity3 = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				if (this.chars[this.curPos] === "N") {
				__loop0__: 
					while ((this.charsUsed - this.curPos) < 5) {
						if (this.ReadData() === 0) {
							__label0__ = "IL_9A";
							continue __step0__;
						}
					}
					if (!((this.chars[(this.curPos + 1)] !== "D") || 
							(this.chars[(this.curPos + 2)] !== "A") || 
							(this.chars[(this.curPos + 3)] !== "T") || (this.chars[(this.curPos + 4)] !== "A"))) {
						this.curPos += 5;
						this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.Name;
						this.nextScaningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.ClosingTag;
						return $asm07.System.Xml.DtdParser.Token.NData;
					}
				}
				__label0__ = "IL_9A";
				continue __step0__;
				break;
			case "IL_9A":
				this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.ClosingTag;
				return $asm07.System.Xml.DtdParser.Token.None;
				break __step0__;
		}
	}
};
$asm07.System.Xml.DtdParser.prototype.ScanPublicId1 = function () {
	if (!((this.chars[this.curPos] === '"') || (this.chars[this.curPos] === "'"))) {
		this.ThrowUnexpectedToken$1(this.curPos, '"', "'");
	}
	this.ScanLiteral($asm07.System.Xml.DtdParser.LiteralType.SystemOrPublicID);
	this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.PublicId2;
	return $asm07.System.Xml.DtdParser.Token.Literal;
};
$asm07.System.Xml.DtdParser.prototype.ScanPublicId2 = function () {
	if (!((this.chars[this.curPos] === '"') || (this.chars[this.curPos] === "'"))) {
		this.scanningFunction = this.nextScaningFunction;
		return $asm07.System.Xml.DtdParser.Token.None;
	}
	this.ScanLiteral($asm07.System.Xml.DtdParser.LiteralType.SystemOrPublicID);
	this.scanningFunction = this.nextScaningFunction;
	return $asm07.System.Xml.DtdParser.Token.Literal;
};
$asm07.System.Xml.DtdParser.prototype.ScanCondSection1 = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				if (this.chars[this.curPos] !== "I") {
					this.Throw$0(this.curPos, "Xml_ExpectIgnoreOrInclude");
				}
				++this.curPos;
			__loop0__: 
				while (true) {
					if ((this.charsUsed - this.curPos) >= 5) {
						var c = this.chars[this.curPos];
						if (c === "G") {
							__label0__ = "IL_121";
							continue __step0__;
						}
						if (c !== "N") {
							__label0__ = "IL_1AA";
							continue __step0__;
						}
						if ((this.charsUsed - this.curPos) >= 6) {
							break __loop0__;
						}
					}
					if (this.ReadData() === 0) {
						this.Throw$0(this.curPos, "Xml_IncompleteDtdContent");
					}
				}
				if (!((this.chars[(this.curPos + 1)] !== "C") || 
						(this.chars[(this.curPos + 2)] !== "L") || 
						(this.chars[(this.curPos + 3)] !== "U") || 
						(this.chars[(this.curPos + 4)] !== "D") || 
						(this.chars[(this.curPos + 5)] !== "E") || this.xmlCharType.IsNameSingleChar(this.chars[(this.curPos + 6)]))) {
					this.nextScaningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.SubsetContent;
					this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.CondSection2;
					this.curPos += 6;
					return $asm07.System.Xml.DtdParser.Token.INCLUDE;
				}
				__label0__ = "IL_1AA";
				continue __step0__;
				break;
			case "IL_1AA":
				this.Throw$0((this.curPos - 1), "Xml_ExpectIgnoreOrInclude");
				return $asm07.System.Xml.DtdParser.Token.None;
				__label0__ = "IL_121";
				continue __step0__;
				break;
			case "IL_121":
				if (!((this.chars[(this.curPos + 1)] !== "N") || 
						(this.chars[(this.curPos + 2)] !== "O") || 
						(this.chars[(this.curPos + 3)] !== "R") || 
						(this.chars[(this.curPos + 4)] !== "E") || this.xmlCharType.IsNameSingleChar(this.chars[(this.curPos + 5)]))) {
					this.nextScaningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.CondSection3;
					this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.CondSection2;
					this.curPos += 5;
					return $asm07.System.Xml.DtdParser.Token.IGNORE;
				}
				__label0__ = "IL_1AA";
				continue __step0__;
				break __step0__;
		}
	}
};
$asm07.System.Xml.DtdParser.prototype.ScanCondSection2 = function () {
	if (this.chars[this.curPos] !== "[") {
		this.ThrowUnexpectedToken$0(this.curPos, "[");
	}
	++this.curPos;
	this.scanningFunction = this.nextScaningFunction;
	return $asm07.System.Xml.DtdParser.Token.LeftBracket;
};
$asm07.System.Xml.DtdParser.prototype.ScanCondSection3 = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				var num = 0;
			__loop0__: 
				while (true) {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								if (!(this.xmlCharType.IsTextChar(this.chars[this.curPos]) && (this.chars[this.curPos] !== "]"))) {
									var __label2__ = "__entry2__";
								__step2__: 
									while (true) {
										switch (__label2__) {
											case "__entry2__":
												var c = this.chars[this.curPos];
												if (c <= '"') {
													switch (c) {
														case "\t": 
															break;
														case "\n": 
															++this.curPos;
															this.readerAdapter.IDtdParserAdapter_OnNewLine(this.curPos);
															continue __step2__;
															;
														case "\x0b": 
														case "\x0c": 
															__label2__ = "IL_21D";
															continue __step2__;
														case "\r": 
															if (this.chars[(this.curPos + 1)] === "\n") {
																this.curPos += 2;
															} else {
																if (((this.curPos + 1) >= this.charsUsed) && !this.readerAdapter.IDtdParserAdapter_IsEof) {
																	__label2__ = "IL_2A1";
																	continue __step2__;
																}
																++this.curPos;
															}
															this.readerAdapter.IDtdParserAdapter_OnNewLine(this.curPos);
															continue __step2__;
															;
														default: 
															if (c !== '"') {
																__label2__ = "IL_21D";
																continue __step2__;
															}
															break;
													}
												} else {
													switch (c) {
														case "&": 
														case "'": 
															break;
														default: 
															if (c !== "<") {
																if (c !== "]") {
																	__label2__ = "IL_21D";
																	continue __step2__;
																}
																if ((this.charsUsed - this.curPos) < 3) {
																	__label2__ = "IL_2A1";
																	continue __step2__;
																}
																if (!((this.chars[(this.curPos + 1)] === "]") && (this.chars[(this.curPos + 2)] === ">"))) {
																	++this.curPos;
																	continue __step2__;
																	;
																}
																if (num > 0) {
																	--num;
																	this.curPos += 3;
																	continue __step2__;
																	;
																}
																__label0__ = "IL_205";
																continue __step0__;
															} else {
																if ((this.charsUsed - this.curPos) < 3) {
																	__label2__ = "IL_2A1";
																	continue __step2__;
																}
																if (!((this.chars[(this.curPos + 1)] === "!") && (this.chars[(this.curPos + 2)] === "["))) {
																	++this.curPos;
																	continue __step2__;
																	;
																}
																++num;
																this.curPos += 3;
																continue __step2__;
																;
															}
															break;
													}
												}
												++this.curPos;
												continue __loop0__;
												__label2__ = "IL_21D";
												continue __step2__;
												break;
											case "IL_21D":
												if (this.curPos !== this.charsUsed) {
													var ch = this.chars[this.curPos];
													if (!$asm07.System.Xml.XmlCharType.IsHighSurrogate(ch.charCodeAt(0))) {
														__label0__ = "IL_286";
														continue __step0__;
													}
													if ((this.curPos + 1) !== this.charsUsed) {
														++this.curPos;
														if ($asm07.System.Xml.XmlCharType.IsLowSurrogate(this.chars[this.curPos])) {
															++this.curPos;
															continue __loop0__;
														}
														__label0__ = "IL_286";
														continue __step0__;
													}
												}
												__label2__ = "IL_2A1";
												continue __step2__;
												break;
											case "IL_2A1":
												if (!(!this.readerAdapter.IDtdParserAdapter_IsEof && (this.ReadData() !== 0))) {
													if (this.HandleEntityEnd(false)) {
														continue __loop0__;
													}
													this.Throw$0(this.curPos, "Xml_UnclosedConditionalSection");
												}
												this.tokenStartPos = this.curPos;
												break __step2__;
										}
									}
								} else {
									++this.curPos;
								}
								break __step1__;
						}
					}
				}
				__label0__ = "IL_205";
				continue __step0__;
				break;
			case "IL_205":
				this.curPos += 3;
				this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.SubsetContent;
				return $asm07.System.Xml.DtdParser.Token.CondSectionEnd;
				__label0__ = "IL_286";
				continue __step0__;
				break;
			case "IL_286":
				this.ThrowInvalidChar$1(this.chars, this.charsUsed, this.curPos);
				return $asm07.System.Xml.DtdParser.Token.None;
				break __step0__;
		}
	}
};
$asm07.System.Xml.DtdParser.prototype.ScanName = function () {
	this.ScanQName$1(false);
};
$asm07.System.Xml.DtdParser.prototype.ScanQName$0 = function () {
	this.ScanQName$1(this.SupportNamespaces);
};
$asm07.System.Xml.DtdParser.prototype.ScanQName$1 = function (isQName) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				this.tokenStartPos = this.curPos;
				var num = -1;
			__loop0__: 
				while (true) {
					if (!(!this.xmlCharType.IsStartNCNameSingleChar(this.chars[this.curPos]) && (this.chars[this.curPos] !== ":"))) {
						++this.curPos;
					} else if ((this.curPos + 1) >= this.charsUsed) {
						if (this.ReadDataInName()) {
							continue __loop0__;
						}
						this.Throw$1(this.curPos, "Xml_UnexpectedEOF", "Name");
					} else {
						this.Throw$2(this.curPos, "Xml_BadStartNameChar", System.Xml.XmlException.BuildCharExceptionArgs$2(this.chars, this.charsUsed, this.curPos));
					}
				__loop1__: 
					while (true) {
						if (this.xmlCharType.IsNCNameSingleChar(this.chars[this.curPos])) {
							++this.curPos;
						} else if (this.chars[this.curPos] === ":") {
							if (isQName) {
								break __loop1__;
							}
							++this.curPos;
						} else {
							if (this.curPos !== this.charsUsed) {
								__label0__ = "IL_16D";
								continue __step0__;
							}
							if (!this.ReadDataInName()) {
								__label0__ = "Block_9";
								continue __step0__;
							}
						}
					}
					if (num !== -1) {
						this.Throw$2(this.curPos, "Xml_BadNameChar", System.Xml.XmlException.BuildCharExceptionArgs$3(":", "\0"));
					}
					num = (this.curPos - this.tokenStartPos);
					++this.curPos;
				}
				__label0__ = "Block_9";
				continue __step0__;
				break;
			case "Block_9":
				if (this.tokenStartPos === this.curPos) {
					this.Throw$1(this.curPos, "Xml_UnexpectedEOF", "Name");
				}
				__label0__ = "IL_16D";
				continue __step0__;
				break;
			case "IL_16D":
				this.colonPos = (num === -1) ? -1 : (this.tokenStartPos + num);
				break __step0__;
		}
	}
};
$asm07.System.Xml.DtdParser.prototype.ReadDataInName = function () {
	this.curPos = this.tokenStartPos;
	var result = (this.ReadData() !== 0);
	this.tokenStartPos = this.curPos;
	this.curPos += (this.curPos - this.tokenStartPos);
	return result;
};
$asm07.System.Xml.DtdParser.prototype.ScanNmtoken = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				this.tokenStartPos = this.curPos;
			__loop0__: 
				while (true) {
					if (!(!this.xmlCharType.IsNCNameSingleChar(this.chars[this.curPos]) && (this.chars[this.curPos] !== ":"))) {
						++this.curPos;
					} else {
						if (this.curPos < this.charsUsed) {
							break __loop0__;
						}
						var num = (this.curPos - this.tokenStartPos);
						this.curPos = this.tokenStartPos;
						if (this.ReadData() === 0) {
							if (num > 0) {
								__label0__ = "Block_5";
								continue __step0__;
							}
							this.Throw$1(this.curPos, "Xml_UnexpectedEOF", "NmToken");
						}
						this.tokenStartPos = this.curPos;
						this.curPos += num;
					}
				}
				if (!(this.curPos - this.tokenStartPos)) {
					this.Throw$2(this.curPos, "Xml_BadNameChar", System.Xml.XmlException.BuildCharExceptionArgs$2(this.chars, this.charsUsed, this.curPos));
					return;
				}
				return;
				__label0__ = "Block_5";
				continue __step0__;
				break;
			case "Block_5":
				this.tokenStartPos = this.curPos;
				this.curPos += num;
				break __step0__;
		}
	}
};
$asm07.System.Xml.DtdParser.prototype.EatPublicKeyword = function () {
__loop0__: 
	while ((this.charsUsed - this.curPos) < 6) {
		if (this.ReadData() === 0) {
			return false;
		}
	}
	if (!((this.chars[(this.curPos + 1)] === "U") && 
			(this.chars[(this.curPos + 2)] === "B") && 
			(this.chars[(this.curPos + 3)] === "L") && 
			(this.chars[(this.curPos + 4)] === "I") && (this.chars[(this.curPos + 5)] === "C"))) {
		return false;
	}
	this.curPos += 6;
	return true;
};
$asm07.System.Xml.DtdParser.prototype.EatSystemKeyword = function () {
__loop0__: 
	while ((this.charsUsed - this.curPos) < 6) {
		if (this.ReadData() === 0) {
			return false;
		}
	}
	if (!((this.chars[(this.curPos + 1)] === "Y") && 
			(this.chars[(this.curPos + 2)] === "S") && 
			(this.chars[(this.curPos + 3)] === "T") && 
			(this.chars[(this.curPos + 4)] === "E") && (this.chars[(this.curPos + 5)] === "M"))) {
		return false;
	}
	this.curPos += 6;
	return true;
};
$asm07.System.Xml.DtdParser.prototype.GetNameQualified = function (canHavePrefix) {
	if (this.colonPos === -1) {
		return JSIL.New(System.Xml.XmlQualifiedName, "_ctor$1", [this.nameTable.Add$0(this.chars, this.tokenStartPos, (this.curPos - this.tokenStartPos))]);
	}
	if (canHavePrefix) {
		return JSIL.New(System.Xml.XmlQualifiedName, "_ctor$2", [this.nameTable.Add$0(this.chars, (this.colonPos + 1), ((this.curPos - this.colonPos) - 1)), this.nameTable.Add$0(this.chars, this.tokenStartPos, (this.colonPos - this.tokenStartPos))]);
	}
	this.Throw$1(this.tokenStartPos, "Xml_ColonInLocalName", this.GetNameString());
	return null;
};
$asm07.System.Xml.DtdParser.prototype.GetNameString = function () {
	return JSIL.New(System.String, "_ctor$0", [this.chars, this.tokenStartPos, (this.curPos - this.tokenStartPos)]);
};
$asm07.System.Xml.DtdParser.prototype.GetNmtokenString = function () {
	return this.GetNameString();
};
$asm07.System.Xml.DtdParser.prototype.GetValue = function () {
	if (this.stringBuilder.Length === 0) {
		return JSIL.New(System.String, "_ctor$0", [this.chars, this.tokenStartPos, ((this.curPos - this.tokenStartPos) - 1)]);
	}
	return this.stringBuilder.toString();
};
$asm07.System.Xml.DtdParser.prototype.GetValueWithStrippedSpaces = function () {
	var value = (this.stringBuilder.Length === 0) ? JSIL.New(System.String, "_ctor$0", [this.chars, this.tokenStartPos, ((this.curPos - this.tokenStartPos) - 1)]) : this.stringBuilder.toString();
	return $asm07.System.Xml.DtdParser.StripSpaces(value);
};
$asm07.System.Xml.DtdParser.prototype.ReadData = function () {
	this.SaveParsingBuffer$0();
	var result = this.readerAdapter.IDtdParserAdapter_ReadData();
	this.LoadParsingBuffer();
	return result;
};
$asm07.System.Xml.DtdParser.prototype.LoadParsingBuffer = function () {
	this.chars = this.readerAdapter.IDtdParserAdapter_ParsingBuffer;
	this.charsUsed = this.readerAdapter.IDtdParserAdapter_ParsingBufferLength;
	this.curPos = this.readerAdapter.IDtdParserAdapter_CurrentPosition;
};
$asm07.System.Xml.DtdParser.prototype.SaveParsingBuffer$0 = function () {
	this.SaveParsingBuffer$1(this.curPos);
};
$asm07.System.Xml.DtdParser.prototype.SaveParsingBuffer$1 = function (internalSubsetValueEndPos) {
	if (this.SaveInternalSubsetValue) {
		var currentPosition = this.readerAdapter.IDtdParserAdapter_CurrentPosition;
		if ((internalSubsetValueEndPos - currentPosition) > 0) {
			this.internalSubsetValueSb.Append$1(this.chars, currentPosition, (internalSubsetValueEndPos - currentPosition));
		}
	}
	this.readerAdapter.IDtdParserAdapter_CurrentPosition = this.curPos;
};
$asm07.System.Xml.DtdParser.prototype.HandleEntityReference$0 = function (paramEntity, inLiteral, inAttribute) {
	++this.curPos;
	return this.HandleEntityReference$1(this.ScanEntityName(), paramEntity, inLiteral, inAttribute);
};
$asm07.System.Xml.DtdParser.prototype.HandleEntityReference$1 = function (entityName, paramEntity, inLiteral, inAttribute) {
	var num = new JSIL.Variable(0);
	this.SaveParsingBuffer$0();
	if (!(!paramEntity || 
			!this.ParsingInternalSubset || this.ParsingTopLevelMarkup)) {
		this.Throw$0(((this.curPos - entityName.Name.length) - 1), "Xml_InvalidParEntityRef");
	}
	var schemaEntity = this.VerifyEntityReference(entityName, paramEntity, true, inAttribute);
	if (schemaEntity === null) {
		return false;
	}
	if (schemaEntity.ParsingInProgress) {
		this.Throw$1(((this.curPos - entityName.Name.length) - 1), paramEntity ? "Xml_RecursiveParEntity" : "Xml_RecursiveGenEntity", entityName.Name);
	}
	if (schemaEntity.IsExternal) {
		if (!this.readerAdapter.IDtdParserAdapter_PushEntity(schemaEntity, /* ref */ num)) {
			return false;
		}
		++this.externalEntitiesDepth;
	} else {
		if (schemaEntity.Text.length === 0) {
			return false;
		}
		if (!this.readerAdapter.IDtdParserAdapter_PushEntity(schemaEntity, /* ref */ num)) {
			return false;
		}
	}
	this.currentEntityId = num.value;
	if (!(!paramEntity || 
			inLiteral || (this.scanningFunction === $asm07.System.Xml.DtdParser.ScanningFunction.ParamEntitySpace))) {
		this.savedScanningFunction = this.scanningFunction;
		this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.ParamEntitySpace;
	}
	this.LoadParsingBuffer();
	return true;
};
$asm07.System.Xml.DtdParser.prototype.HandleEntityEnd = function (inLiteral) {
	var dtdEntityInfo = new JSIL.Variable(null);
	this.SaveParsingBuffer$0();
	if (!this.readerAdapter.IDtdParserAdapter_PopEntity(/* ref */ dtdEntityInfo, /* ref */ new JSIL.MemberReference(this, "currentEntityId"))) {
		return false;
	}
	this.LoadParsingBuffer();
	if (dtdEntityInfo.value === null) {
		if (this.scanningFunction === $asm07.System.Xml.DtdParser.ScanningFunction.ParamEntitySpace) {
			this.scanningFunction = this.savedScanningFunction;
		}
		return false;
	}
	if (dtdEntityInfo.value.IDtdEntityInfo_IsExternal) {
		--this.externalEntitiesDepth;
	}
	if (!(inLiteral || (this.scanningFunction === $asm07.System.Xml.DtdParser.ScanningFunction.ParamEntitySpace))) {
		this.savedScanningFunction = this.scanningFunction;
		this.scanningFunction = $asm07.System.Xml.DtdParser.ScanningFunction.ParamEntitySpace;
	}
	return true;
};
$asm07.System.Xml.DtdParser.prototype.VerifyEntityReference = function (entityName, paramEntity, mustBeDeclared, inAttribute) {
	var schemaEntity = new JSIL.Variable(null);
	if (paramEntity) {
		this.schemaInfo.ParameterEntities.TryGetValue(entityName, /* ref */ schemaEntity);
	} else {
		this.schemaInfo.GeneralEntities.TryGetValue(entityName, /* ref */ schemaEntity);
	}
	if (schemaEntity.value === null) {
		if (!(paramEntity || 
				!mustBeDeclared || !this.ParsingInternalSubset)) {
			this.Throw$1(((this.curPos - entityName.Name.length) - 1), "Xml_UndeclaredEntity", entityName.Name);
		}
		return null;
	}
	if (!schemaEntity.value.NData.IsEmpty) {
		this.Throw$1(((this.curPos - entityName.Name.length) - 1), "Xml_UnparsedEntityRef", entityName.Name);
	}
	if (!(!inAttribute || !schemaEntity.value.IsExternal)) {
		this.Throw$1(((this.curPos - entityName.Name.length) - 1), "Xml_ExternalEntityInAttValue", entityName.Name);
	}
	return schemaEntity.value;
};
$asm07.System.Xml.DtdParser.prototype.IsAttributeValueType = function (token) {
	return ((token >= $asm07.System.Xml.DtdParser.Token.CDATA) && (token <= $asm07.System.Xml.DtdParser.Token.NOTATION));
};
$asm07.System.Xml.DtdParser.prototype.get_LineNo = function () {
	return this.readerAdapter.IDtdParserAdapter_LineNo;
};
$asm07.System.Xml.DtdParser.prototype.get_LinePos = function () {
	return (this.curPos - this.readerAdapter.IDtdParserAdapter_LineStartPosition);
};
$asm07.System.Xml.DtdParser.prototype.get_BaseUriStr = function () {
	var baseUri = this.readerAdapter.IDtdParserAdapter_BaseUri;
	if (!System.Uri.op_Inequality(baseUri, null)) {
		return System.String.Empty;
	}
	return baseUri.toString();
};
$asm07.System.Xml.DtdParser.prototype.OnUnexpectedError = function () {
	this.Throw$0(this.curPos, "Xml_InternalError");
};
$asm07.System.Xml.DtdParser.prototype.Throw$0 = function (curPos, res) {
	this.Throw$1(curPos, res, System.String.Empty);
};
$asm07.System.Xml.DtdParser.prototype.Throw$1 = function (curPos, res, arg) {
	this.curPos = curPos;
	var baseUri = this.readerAdapter.IDtdParserAdapter_BaseUri;
	this.readerAdapter.IDtdParserAdapter_Throw(JSIL.New(System.Xml.XmlException, "_ctor$16", [res, arg, this.LineNo, this.LinePos, System.Uri.op_Equality(baseUri, null) ? null : baseUri.toString()]));
};
$asm07.System.Xml.DtdParser.prototype.Throw$2 = function (curPos, res, args) {
	this.curPos = curPos;
	var baseUri = this.readerAdapter.IDtdParserAdapter_BaseUri;
	this.readerAdapter.IDtdParserAdapter_Throw(JSIL.New(System.Xml.XmlException, "_ctor$18", [res, args, this.LineNo, this.LinePos, System.Uri.op_Equality(baseUri, null) ? null : baseUri.toString()]));
};
$asm07.System.Xml.DtdParser.prototype.Throw$3 = function (res, arg, lineNo, linePos) {
	var baseUri = this.readerAdapter.IDtdParserAdapter_BaseUri;
	this.readerAdapter.IDtdParserAdapter_Throw(JSIL.New(System.Xml.XmlException, "_ctor$16", [res, arg, lineNo, linePos, System.Uri.op_Equality(baseUri, null) ? null : baseUri.toString()]));
};
$asm07.System.Xml.DtdParser.prototype.ThrowInvalidChar$0 = function (pos, data, invCharPos) {
	this.Throw$2(pos, "Xml_InvalidCharacter", System.Xml.XmlException.BuildCharExceptionArgs$0(data, invCharPos));
};
$asm07.System.Xml.DtdParser.prototype.ThrowInvalidChar$1 = function (data, length, invCharPos) {
	this.Throw$2(invCharPos, "Xml_InvalidCharacter", System.Xml.XmlException.BuildCharExceptionArgs$2(data, length, invCharPos));
};
$asm07.System.Xml.DtdParser.prototype.ThrowUnexpectedToken$0 = function (pos, expectedToken) {
	this.ThrowUnexpectedToken$1(pos, expectedToken, null);
};
$asm07.System.Xml.DtdParser.prototype.ThrowUnexpectedToken$1 = function (pos, expectedToken1, expectedToken2) {
	var text = this.ParseUnexpectedToken(pos);
	if (expectedToken2 !== null) {
		this.Throw$2(this.curPos, "Xml_UnexpectedTokens2", JSIL.Array.New(System.String, [text, expectedToken1, expectedToken2]));
		return;
	}
	this.Throw$2(this.curPos, "Xml_UnexpectedTokenEx", JSIL.Array.New(System.String, [text, expectedToken1]));
};
$asm07.System.Xml.DtdParser.prototype.ParseUnexpectedToken = function (startPos) {
	if (this.xmlCharType.IsNCNameSingleChar(this.chars[startPos])) {
	__loop0__: 
		for (var num = startPos; this.xmlCharType.IsNCNameSingleChar(this.chars[num]); ++num) {
		}
		var num2 = (num - startPos);
		return JSIL.New(System.String, "_ctor$0", [this.chars, startPos, (num2 > 0) ? num2 : 1]);
	}
	return JSIL.New(System.String, "_ctor$0", [this.chars, startPos, 1]);
};
$asm07.System.Xml.DtdParser.StripSpaces = function (value) {
	var length = value.length;
	if (length <= 0) {
		return System.String.Empty;
	}
	var num = 0;
	var stringBuilder = null;
__loop0__: 
	while ((value[num]) === " ") {
		++num;
		if (num === length) {
			return " ";
		}
	}
__loop1__: 
	for (var i = num; i < length; ++i) {
		if ((value[i]) === " ") {
		__loop2__: 
			for (var num2 = (i + 1); (num2 < length) && ((value[num2]) === " "); ++num2) {
			}
			if (num2 === length) {
				if (stringBuilder === null) {
					return value.Substring$1(num, (i - num));
				}
				stringBuilder.Append$3(value, num, (i - num));
				return stringBuilder.toString();
			} else if (num2 > (i + 1)) {
				if (stringBuilder === null) {
					stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$1", [length]);
				}
				stringBuilder.Append$3(value, num, ((i - num) + 1));
				num = num2;
				i = (num2 - 1);
			}
		}
	}
	if (stringBuilder !== null) {
		if (i > num) {
			stringBuilder.Append$3(value, num, (i - num));
		}
		return stringBuilder.toString();
	}
	if (num !== 0) {
		return value.Substring$1(num, (length - num));
	}
	return value;
};
JSIL.OverloadedMethod($asm07.System.Xml.DtdParser.prototype, "ScanQName", [
		["ScanQName$0", []], 
		["ScanQName$1", [System.Boolean]]
	]);
JSIL.OverloadedMethod($asm07.System.Xml.DtdParser.prototype, "SaveParsingBuffer", [
		["SaveParsingBuffer$0", []], 
		["SaveParsingBuffer$1", [System.Int32]]
	]);
JSIL.OverloadedMethod($asm07.System.Xml.DtdParser.prototype, "HandleEntityReference", [
		["HandleEntityReference$0", [System.Boolean, System.Boolean, System.Boolean]], 
		["HandleEntityReference$1", [System.Xml.XmlQualifiedName, System.Boolean, System.Boolean, System.Boolean]]
	]);
JSIL.OverloadedMethod($asm07.System.Xml.DtdParser.prototype, "Throw", [
		["Throw$0", [System.Int32, System.String]], 
		["Throw$1", [System.Int32, System.String, System.String]], 
		["Throw$2", [System.Int32, System.String, System.Array.Of(System.String)]], 
		["Throw$3", [System.String, System.String, System.Int32, System.Int32]]
	]);
JSIL.OverloadedMethod($asm07.System.Xml.DtdParser.prototype, "ThrowInvalidChar", [
		["ThrowInvalidChar$0", [System.Int32, System.String, System.Int32]], 
		["ThrowInvalidChar$1", [System.Array.Of(System.Char), System.Int32, System.Int32]]
	]);
JSIL.OverloadedMethod($asm07.System.Xml.DtdParser.prototype, "ThrowUnexpectedToken", [
		["ThrowUnexpectedToken$0", [System.Int32, System.String]], 
		["ThrowUnexpectedToken$1", [System.Int32, System.String, System.String]]
	]);
JSIL.MakeProperty($asm07.System.Xml.DtdParser.prototype, "ParsingInternalSubset", 
	$asm07.System.Xml.DtdParser.prototype.get_ParsingInternalSubset, null);
JSIL.MakeProperty($asm07.System.Xml.DtdParser.prototype, "IgnoreEntityReferences", 
	$asm07.System.Xml.DtdParser.prototype.get_IgnoreEntityReferences, null);
JSIL.MakeProperty($asm07.System.Xml.DtdParser.prototype, "SaveInternalSubsetValue", 
	$asm07.System.Xml.DtdParser.prototype.get_SaveInternalSubsetValue, null);
JSIL.MakeProperty($asm07.System.Xml.DtdParser.prototype, "ParsingTopLevelMarkup", 
	$asm07.System.Xml.DtdParser.prototype.get_ParsingTopLevelMarkup, null);
JSIL.MakeProperty($asm07.System.Xml.DtdParser.prototype, "SupportNamespaces", 
	$asm07.System.Xml.DtdParser.prototype.get_SupportNamespaces, null);
JSIL.MakeProperty($asm07.System.Xml.DtdParser.prototype, "Normalize", 
	$asm07.System.Xml.DtdParser.prototype.get_Normalize, null);
JSIL.MakeProperty($asm07.System.Xml.DtdParser.prototype, "LineNo", 
	$asm07.System.Xml.DtdParser.prototype.get_LineNo, null);
JSIL.MakeProperty($asm07.System.Xml.DtdParser.prototype, "LinePos", 
	$asm07.System.Xml.DtdParser.prototype.get_LinePos, null);
JSIL.MakeProperty($asm07.System.Xml.DtdParser.prototype, "BaseUriStr", 
	$asm07.System.Xml.DtdParser.prototype.get_BaseUriStr, null);
Object.defineProperty($asm07.System.Xml.DtdParser, "CondSectionEntityIdsInitialSize", {
		"value": 2}
);
$asm07.System.Xml.DtdParser.prototype.readerAdapter = null;
$asm07.System.Xml.DtdParser.prototype.nameTable = null;
$asm07.System.Xml.DtdParser.prototype.schemaInfo = null;
$asm07.System.Xml.DtdParser.prototype.systemId = null;
$asm07.System.Xml.DtdParser.prototype.publicId = null;
$asm07.System.Xml.DtdParser.prototype.chars = null;
$asm07.System.Xml.DtdParser.prototype.charsUsed = 0;
$asm07.System.Xml.DtdParser.prototype.curPos = 0;
$asm07.System.Xml.DtdParser.prototype.scanningFunction = 0;
$asm07.System.Xml.DtdParser.prototype.nextScaningFunction = 0;
$asm07.System.Xml.DtdParser.prototype.savedScanningFunction = 0;
$asm07.System.Xml.DtdParser.prototype.whitespaceSeen = false;
$asm07.System.Xml.DtdParser.prototype.tokenStartPos = 0;
$asm07.System.Xml.DtdParser.prototype.colonPos = 0;
$asm07.System.Xml.DtdParser.prototype.internalSubsetValueSb = null;
$asm07.System.Xml.DtdParser.prototype.externalEntitiesDepth = 0;
$asm07.System.Xml.DtdParser.prototype.currentEntityId = 0;
$asm07.System.Xml.DtdParser.prototype.freeFloatingDtd = false;
$asm07.System.Xml.DtdParser.prototype.hasFreeFloatingInternalSubset = false;
$asm07.System.Xml.DtdParser.prototype.stringBuilder = null;
$asm07.System.Xml.DtdParser.prototype.condSectionDepth = 0;
$asm07.System.Xml.DtdParser.prototype.literalQuoteChar = 0;
$asm07.System.Xml.DtdParser.prototype.documentBaseUri = null;
$asm07.System.Xml.DtdParser.prototype.externalDtdBaseUri = null;
$asm07.System.Xml.DtdParser._cctor = function () {
};

$asm07.System.Xml.DtdParser.ParseElementOnlyContentNoValidation_LocalFrame.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
	this.parsingSchema = $asm07.System.Xml.DtdParser.Token.None;
};
$asm07.System.Xml.DtdParser.ParseElementOnlyContentNoValidation_LocalFrame.prototype.parsingSchema = 0;

$asm07.System.Xml.Schema.SchemaDeclBase.prototype._ctor = function (name, prefix) {
	this.name = System.Xml.XmlQualifiedName.Empty;
	System.Object.prototype._ctor.call(this);
	this.name = name;
	this.prefix = prefix;
};
$asm07.System.Xml.Schema.SchemaDeclBase.prototype.get_Name = function () {
	return this.name;
};
$asm07.System.Xml.Schema.SchemaDeclBase.prototype.set_Name = function (value) {
	this.name = value;
};
$asm07.System.Xml.Schema.SchemaDeclBase.prototype.get_Prefix = function () {
	if (this.prefix !== null) {
		return this.prefix;
	}
	return System.String.Empty;
};
$asm07.System.Xml.Schema.SchemaDeclBase.prototype.set_Prefix = function (value) {
	this.prefix = value;
};
$asm07.System.Xml.Schema.SchemaDeclBase.prototype.get_IsDeclaredInExternal = function () {
	return this.isDeclaredInExternal;
};
$asm07.System.Xml.Schema.SchemaDeclBase.prototype.set_IsDeclaredInExternal = function (value) {
	this.isDeclaredInExternal = value;
};
$asm07.System.Xml.Schema.SchemaDeclBase.prototype.get_Presence = function () {
	return this.presence;
};
$asm07.System.Xml.Schema.SchemaDeclBase.prototype.set_Presence = function (value) {
	this.presence = value;
};
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaDeclBase.prototype, "Name", 
	$asm07.System.Xml.Schema.SchemaDeclBase.prototype.get_Name, $asm07.System.Xml.Schema.SchemaDeclBase.prototype.set_Name);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaDeclBase.prototype, "Prefix", 
	$asm07.System.Xml.Schema.SchemaDeclBase.prototype.get_Prefix, $asm07.System.Xml.Schema.SchemaDeclBase.prototype.set_Prefix);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaDeclBase.prototype, "IsDeclaredInExternal", 
	$asm07.System.Xml.Schema.SchemaDeclBase.prototype.get_IsDeclaredInExternal, $asm07.System.Xml.Schema.SchemaDeclBase.prototype.set_IsDeclaredInExternal);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaDeclBase.prototype, "Presence", 
	$asm07.System.Xml.Schema.SchemaDeclBase.prototype.get_Presence, $asm07.System.Xml.Schema.SchemaDeclBase.prototype.set_Presence);
$asm07.System.Xml.Schema.SchemaDeclBase.prototype.name = null;
$asm07.System.Xml.Schema.SchemaDeclBase.prototype.prefix = null;
$asm07.System.Xml.Schema.SchemaDeclBase.prototype.isDeclaredInExternal = false;
$asm07.System.Xml.Schema.SchemaDeclBase.prototype.presence = 0;

$asm07.System.Xml.Schema.SchemaAttDef.prototype._ctor = function (name, prefix) {
	$asm07.System.Xml.Schema.SchemaDeclBase.prototype._ctor.call(this, name, prefix);
};
$asm07.System.Xml.Schema.SchemaAttDef.prototype.IDtdAttributeInfo_get_Prefix = function () {
	return $asm07.System.Xml.Schema.SchemaDeclBase.prototype.get_Prefix.call(this);
};
$asm07.System.Xml.Schema.SchemaAttDef.prototype.IDtdAttributeInfo_get_LocalName = function () {
	return $asm07.System.Xml.Schema.SchemaDeclBase.prototype.get_Name.call(this).Name;
};
$asm07.System.Xml.Schema.SchemaAttDef.prototype.IDtdAttributeInfo_get_LineNumber = function () {
	return this.LineNumber;
};
$asm07.System.Xml.Schema.SchemaAttDef.prototype.IDtdAttributeInfo_get_LinePosition = function () {
	return this.LinePosition;
};
$asm07.System.Xml.Schema.SchemaAttDef.prototype.IDtdAttributeInfo_get_IsNonCDataType = function () {
	return (this.TokenizedType !== System.Xml.XmlTokenizedType.CDATA);
};
$asm07.System.Xml.Schema.SchemaAttDef.prototype.IDtdAttributeInfo_get_IsDeclaredInExternal = function () {
	return $asm07.System.Xml.Schema.SchemaDeclBase.prototype.get_IsDeclaredInExternal.call(this);
};
$asm07.System.Xml.Schema.SchemaAttDef.prototype.IDtdAttributeInfo_get_IsXmlAttribute = function () {
	return (this.Reserved !== $asm07.System.Xml.Schema.SchemaAttDef.Reserve.None);
};
$asm07.System.Xml.Schema.SchemaAttDef.prototype.IDtdDefaultAttributeInfo_get_DefaultValueExpanded = function () {
	return this.DefaultValueExpanded;
};
$asm07.System.Xml.Schema.SchemaAttDef.prototype.IDtdDefaultAttributeInfo_get_DefaultValueTyped = function () {
	return null;
};
$asm07.System.Xml.Schema.SchemaAttDef.prototype.IDtdDefaultAttributeInfo_get_ValueLineNumber = function () {
	return this.ValueLineNumber;
};
$asm07.System.Xml.Schema.SchemaAttDef.prototype.IDtdDefaultAttributeInfo_get_ValueLinePosition = function () {
	return this.ValueLinePosition;
};
$asm07.System.Xml.Schema.SchemaAttDef.prototype.get_LinePosition = function () {
	return this.linePos;
};
$asm07.System.Xml.Schema.SchemaAttDef.prototype.set_LinePosition = function (value) {
	this.linePos = value;
};
$asm07.System.Xml.Schema.SchemaAttDef.prototype.get_LineNumber = function () {
	return this.lineNum;
};
$asm07.System.Xml.Schema.SchemaAttDef.prototype.set_LineNumber = function (value) {
	this.lineNum = value;
};
$asm07.System.Xml.Schema.SchemaAttDef.prototype.get_ValueLinePosition = function () {
	return this.valueLinePos;
};
$asm07.System.Xml.Schema.SchemaAttDef.prototype.set_ValueLinePosition = function (value) {
	this.valueLinePos = value;
};
$asm07.System.Xml.Schema.SchemaAttDef.prototype.get_ValueLineNumber = function () {
	return this.valueLineNum;
};
$asm07.System.Xml.Schema.SchemaAttDef.prototype.set_ValueLineNumber = function (value) {
	this.valueLineNum = value;
};
$asm07.System.Xml.Schema.SchemaAttDef.prototype.get_DefaultValueExpanded = function () {
	if (this.defExpanded === null) {
		return System.String.Empty;
	}
	return this.defExpanded;
};
$asm07.System.Xml.Schema.SchemaAttDef.prototype.set_DefaultValueExpanded = function (value) {
	this.defExpanded = value;
};
$asm07.System.Xml.Schema.SchemaAttDef.prototype.get_TokenizedType = function () {
	return this.tokenizedType;
};
$asm07.System.Xml.Schema.SchemaAttDef.prototype.set_TokenizedType = function (value) {
	this.tokenizedType = value;
};
$asm07.System.Xml.Schema.SchemaAttDef.prototype.get_Reserved = function () {
	return this.reserved;
};
$asm07.System.Xml.Schema.SchemaAttDef.prototype.set_Reserved = function (value) {
	this.reserved = value;
};
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaAttDef.prototype, "IDtdAttributeInfo_Prefix", 
	$asm07.System.Xml.Schema.SchemaAttDef.prototype.IDtdAttributeInfo_get_Prefix, null);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaAttDef.prototype, "IDtdAttributeInfo_LocalName", 
	$asm07.System.Xml.Schema.SchemaAttDef.prototype.IDtdAttributeInfo_get_LocalName, null);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaAttDef.prototype, "IDtdAttributeInfo_LineNumber", 
	$asm07.System.Xml.Schema.SchemaAttDef.prototype.IDtdAttributeInfo_get_LineNumber, null);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaAttDef.prototype, "IDtdAttributeInfo_LinePosition", 
	$asm07.System.Xml.Schema.SchemaAttDef.prototype.IDtdAttributeInfo_get_LinePosition, null);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaAttDef.prototype, "IDtdAttributeInfo_IsNonCDataType", 
	$asm07.System.Xml.Schema.SchemaAttDef.prototype.IDtdAttributeInfo_get_IsNonCDataType, null);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaAttDef.prototype, "IDtdAttributeInfo_IsDeclaredInExternal", 
	$asm07.System.Xml.Schema.SchemaAttDef.prototype.IDtdAttributeInfo_get_IsDeclaredInExternal, null);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaAttDef.prototype, "IDtdAttributeInfo_IsXmlAttribute", 
	$asm07.System.Xml.Schema.SchemaAttDef.prototype.IDtdAttributeInfo_get_IsXmlAttribute, null);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaAttDef.prototype, "IDtdDefaultAttributeInfo_DefaultValueExpanded", 
	$asm07.System.Xml.Schema.SchemaAttDef.prototype.IDtdDefaultAttributeInfo_get_DefaultValueExpanded, null);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaAttDef.prototype, "IDtdDefaultAttributeInfo_DefaultValueTyped", 
	$asm07.System.Xml.Schema.SchemaAttDef.prototype.IDtdDefaultAttributeInfo_get_DefaultValueTyped, null);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaAttDef.prototype, "IDtdDefaultAttributeInfo_ValueLineNumber", 
	$asm07.System.Xml.Schema.SchemaAttDef.prototype.IDtdDefaultAttributeInfo_get_ValueLineNumber, null);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaAttDef.prototype, "IDtdDefaultAttributeInfo_ValueLinePosition", 
	$asm07.System.Xml.Schema.SchemaAttDef.prototype.IDtdDefaultAttributeInfo_get_ValueLinePosition, null);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaAttDef.prototype, "LinePosition", 
	$asm07.System.Xml.Schema.SchemaAttDef.prototype.get_LinePosition, $asm07.System.Xml.Schema.SchemaAttDef.prototype.set_LinePosition);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaAttDef.prototype, "LineNumber", 
	$asm07.System.Xml.Schema.SchemaAttDef.prototype.get_LineNumber, $asm07.System.Xml.Schema.SchemaAttDef.prototype.set_LineNumber);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaAttDef.prototype, "ValueLinePosition", 
	$asm07.System.Xml.Schema.SchemaAttDef.prototype.get_ValueLinePosition, $asm07.System.Xml.Schema.SchemaAttDef.prototype.set_ValueLinePosition);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaAttDef.prototype, "ValueLineNumber", 
	$asm07.System.Xml.Schema.SchemaAttDef.prototype.get_ValueLineNumber, $asm07.System.Xml.Schema.SchemaAttDef.prototype.set_ValueLineNumber);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaAttDef.prototype, "DefaultValueExpanded", 
	$asm07.System.Xml.Schema.SchemaAttDef.prototype.get_DefaultValueExpanded, $asm07.System.Xml.Schema.SchemaAttDef.prototype.set_DefaultValueExpanded);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaAttDef.prototype, "TokenizedType", 
	$asm07.System.Xml.Schema.SchemaAttDef.prototype.get_TokenizedType, $asm07.System.Xml.Schema.SchemaAttDef.prototype.set_TokenizedType);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaAttDef.prototype, "Reserved", 
	$asm07.System.Xml.Schema.SchemaAttDef.prototype.get_Reserved, $asm07.System.Xml.Schema.SchemaAttDef.prototype.set_Reserved);
$asm07.System.Xml.Schema.SchemaAttDef.prototype.defExpanded = null;
$asm07.System.Xml.Schema.SchemaAttDef.prototype.lineNum = 0;
$asm07.System.Xml.Schema.SchemaAttDef.prototype.linePos = 0;
$asm07.System.Xml.Schema.SchemaAttDef.prototype.valueLineNum = 0;
$asm07.System.Xml.Schema.SchemaAttDef.prototype.valueLinePos = 0;
$asm07.System.Xml.Schema.SchemaAttDef.prototype.reserved = 0;
$asm07.System.Xml.Schema.SchemaAttDef.prototype.tokenizedType = 0;

$asm07.System.Xml.Schema.SchemaElementDecl.prototype._ctor = function (name, prefix) {
	this.attdefs = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.Xml.XmlQualifiedName, $asm07.System.Xml.Schema.SchemaAttDef), "_ctor$0", []);
	$asm07.System.Xml.Schema.SchemaDeclBase.prototype._ctor.call(this, name, prefix);
};
$asm07.System.Xml.Schema.SchemaElementDecl.prototype.IDtdAttributeListInfo_get_Prefix = function () {
	return $asm07.System.Xml.Schema.SchemaDeclBase.prototype.get_Prefix.call(this);
};
$asm07.System.Xml.Schema.SchemaElementDecl.prototype.IDtdAttributeListInfo_get_LocalName = function () {
	return $asm07.System.Xml.Schema.SchemaDeclBase.prototype.get_Name.call(this).Name;
};
$asm07.System.Xml.Schema.SchemaElementDecl.prototype.IDtdAttributeListInfo_get_HasNonCDataAttributes = function () {
	return this.hasNonCDataAttribute;
};
$asm07.System.Xml.Schema.SchemaElementDecl.prototype.IDtdAttributeListInfo_LookupAttribute = function (prefix, localName) {
	var result = new JSIL.Variable(null);
	var key = JSIL.New(System.Xml.XmlQualifiedName, "_ctor$2", [localName, prefix]);
	if (this.attdefs.TryGetValue(key, /* ref */ result)) {
		return result.value;
	}
	return null;
};
$asm07.System.Xml.Schema.SchemaElementDecl.prototype.IDtdAttributeListInfo_LookupDefaultAttributes = function () {
	return this.defaultAttdefs;
};
$asm07.System.Xml.Schema.SchemaElementDecl.prototype.IDtdAttributeListInfo_LookupIdAttribute = function () {
	var enumerator = JSIL.Cast(this.attdefs.Values, System.Collections.Generic.Dictionary$b2.ValueCollection.Of(System.Xml.XmlQualifiedName, $asm07.System.Xml.Schema.SchemaAttDef)).GetEnumerator().MemberwiseClone();
	try {
	__loop0__: 
		while (enumerator.MoveNext()) {
			var current = enumerator.Current;
			if (current.TokenizedType === System.Xml.XmlTokenizedType.ID) {
				return current;
			}
		}
	} finally {
		enumerator.IDisposable_Dispose();
	}
	return null;
};
$asm07.System.Xml.Schema.SchemaElementDecl.prototype.get_IsIdDeclared = function () {
	return this.isIdDeclared;
};
$asm07.System.Xml.Schema.SchemaElementDecl.prototype.set_IsIdDeclared = function (value) {
	this.isIdDeclared = value;
};
$asm07.System.Xml.Schema.SchemaElementDecl.prototype.get_HasNonCDataAttribute = function () {
	return this.hasNonCDataAttribute;
};
$asm07.System.Xml.Schema.SchemaElementDecl.prototype.set_HasNonCDataAttribute = function (value) {
	this.hasNonCDataAttribute = value;
};
$asm07.System.Xml.Schema.SchemaElementDecl.prototype.AddAttDef = function (attdef) {
	this.attdefs.Add(attdef.Name, attdef);
	if (!(JSIL.Cast(attdef.Presence, System.Boolean) && (attdef.Presence !== $asm07.System.Xml.Schema.SchemaDeclBase.Use.Fixed))) {
		if (this.defaultAttdefs === null) {
			this.defaultAttdefs = new (System.Collections.Generic.List$b1.Of($asm07.System.Xml.IDtdDefaultAttributeInfo)) ();
		}
		this.defaultAttdefs.Add(attdef);
	}
};
$asm07.System.Xml.Schema.SchemaElementDecl.prototype.GetAttDef = function (qname) {
	var result = new JSIL.Variable(null);
	if (this.attdefs.TryGetValue(qname, /* ref */ result)) {
		return result.value;
	}
	return null;
};
$asm07.System.Xml.Schema.SchemaElementDecl.prototype.get_DefaultAttDefs = function () {
	return this.defaultAttdefs;
};
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaElementDecl.prototype, "IDtdAttributeListInfo_Prefix", 
	$asm07.System.Xml.Schema.SchemaElementDecl.prototype.IDtdAttributeListInfo_get_Prefix, null);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaElementDecl.prototype, "IDtdAttributeListInfo_LocalName", 
	$asm07.System.Xml.Schema.SchemaElementDecl.prototype.IDtdAttributeListInfo_get_LocalName, null);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaElementDecl.prototype, "IDtdAttributeListInfo_HasNonCDataAttributes", 
	$asm07.System.Xml.Schema.SchemaElementDecl.prototype.IDtdAttributeListInfo_get_HasNonCDataAttributes, null);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaElementDecl.prototype, "IsIdDeclared", 
	$asm07.System.Xml.Schema.SchemaElementDecl.prototype.get_IsIdDeclared, $asm07.System.Xml.Schema.SchemaElementDecl.prototype.set_IsIdDeclared);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaElementDecl.prototype, "HasNonCDataAttribute", 
	$asm07.System.Xml.Schema.SchemaElementDecl.prototype.get_HasNonCDataAttribute, $asm07.System.Xml.Schema.SchemaElementDecl.prototype.set_HasNonCDataAttribute);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaElementDecl.prototype, "DefaultAttDefs", 
	$asm07.System.Xml.Schema.SchemaElementDecl.prototype.get_DefaultAttDefs, null);
$asm07.System.Xml.Schema.SchemaElementDecl.prototype.attdefs = null;
$asm07.System.Xml.Schema.SchemaElementDecl.prototype.defaultAttdefs = null;
$asm07.System.Xml.Schema.SchemaElementDecl.prototype.isIdDeclared = false;
$asm07.System.Xml.Schema.SchemaElementDecl.prototype.hasNonCDataAttribute = false;

$asm07.System.Xml.Schema.SchemaEntity.prototype._ctor = function (qname, isParameter) {
	this.ndata = System.Xml.XmlQualifiedName.Empty;
	System.Object.prototype._ctor.call(this);
	this.qname = qname;
	this.isParameter = isParameter;
};
$asm07.System.Xml.Schema.SchemaEntity.prototype.IDtdEntityInfo_get_Name = function () {
	return this.Name.Name;
};
$asm07.System.Xml.Schema.SchemaEntity.prototype.IDtdEntityInfo_get_IsExternal = function () {
	return this.IsExternal;
};
$asm07.System.Xml.Schema.SchemaEntity.prototype.IDtdEntityInfo_get_IsDeclaredInExternal = function () {
	return this.DeclaredInExternal;
};
$asm07.System.Xml.Schema.SchemaEntity.prototype.IDtdEntityInfo_get_IsUnparsedEntity = function () {
	return !this.NData.IsEmpty;
};
$asm07.System.Xml.Schema.SchemaEntity.prototype.IDtdEntityInfo_get_IsParameterEntity = function () {
	return this.isParameter;
};
$asm07.System.Xml.Schema.SchemaEntity.prototype.IDtdEntityInfo_get_BaseUriString = function () {
	return this.BaseURI;
};
$asm07.System.Xml.Schema.SchemaEntity.prototype.IDtdEntityInfo_get_DeclaredUriString = function () {
	return this.DeclaredURI;
};
$asm07.System.Xml.Schema.SchemaEntity.prototype.IDtdEntityInfo_get_SystemId = function () {
	return this.Url;
};
$asm07.System.Xml.Schema.SchemaEntity.prototype.IDtdEntityInfo_get_PublicId = function () {
	return this.Pubid;
};
$asm07.System.Xml.Schema.SchemaEntity.prototype.IDtdEntityInfo_get_Text = function () {
	return this.Text;
};
$asm07.System.Xml.Schema.SchemaEntity.prototype.IDtdEntityInfo_get_LineNumber = function () {
	return this.Line;
};
$asm07.System.Xml.Schema.SchemaEntity.prototype.IDtdEntityInfo_get_LinePosition = function () {
	return this.Pos;
};
$asm07.System.Xml.Schema.SchemaEntity.prototype.get_Name = function () {
	return this.qname;
};
$asm07.System.Xml.Schema.SchemaEntity.prototype.get_Url = function () {
	return this.url;
};
$asm07.System.Xml.Schema.SchemaEntity.prototype.set_Url = function (value) {
	this.url = value;
	this.isExternal = true;
};
$asm07.System.Xml.Schema.SchemaEntity.prototype.get_Pubid = function () {
	return this.pubid;
};
$asm07.System.Xml.Schema.SchemaEntity.prototype.set_Pubid = function (value) {
	this.pubid = value;
};
$asm07.System.Xml.Schema.SchemaEntity.prototype.get_IsExternal = function () {
	return this.isExternal;
};
$asm07.System.Xml.Schema.SchemaEntity.prototype.set_IsExternal = function (value) {
	this.isExternal = value;
};
$asm07.System.Xml.Schema.SchemaEntity.prototype.get_DeclaredInExternal = function () {
	return this.isDeclaredInExternal;
};
$asm07.System.Xml.Schema.SchemaEntity.prototype.set_DeclaredInExternal = function (value) {
	this.isDeclaredInExternal = value;
};
$asm07.System.Xml.Schema.SchemaEntity.prototype.get_NData = function () {
	return this.ndata;
};
$asm07.System.Xml.Schema.SchemaEntity.prototype.set_NData = function (value) {
	this.ndata = value;
};
$asm07.System.Xml.Schema.SchemaEntity.prototype.get_Text = function () {
	return this.text;
};
$asm07.System.Xml.Schema.SchemaEntity.prototype.set_Text = function (value) {
	this.text = value;
	this.isExternal = false;
};
$asm07.System.Xml.Schema.SchemaEntity.prototype.get_Line = function () {
	return this.lineNumber;
};
$asm07.System.Xml.Schema.SchemaEntity.prototype.set_Line = function (value) {
	this.lineNumber = value;
};
$asm07.System.Xml.Schema.SchemaEntity.prototype.get_Pos = function () {
	return this.linePosition;
};
$asm07.System.Xml.Schema.SchemaEntity.prototype.set_Pos = function (value) {
	this.linePosition = value;
};
$asm07.System.Xml.Schema.SchemaEntity.prototype.get_BaseURI = function () {
	if (this.baseURI !== null) {
		return this.baseURI;
	}
	return System.String.Empty;
};
$asm07.System.Xml.Schema.SchemaEntity.prototype.set_BaseURI = function (value) {
	this.baseURI = value;
};
$asm07.System.Xml.Schema.SchemaEntity.prototype.get_ParsingInProgress = function () {
	return this.parsingInProgress;
};
$asm07.System.Xml.Schema.SchemaEntity.prototype.set_ParsingInProgress = function (value) {
	this.parsingInProgress = value;
};
$asm07.System.Xml.Schema.SchemaEntity.prototype.get_DeclaredURI = function () {
	if (this.declaredURI !== null) {
		return this.declaredURI;
	}
	return System.String.Empty;
};
$asm07.System.Xml.Schema.SchemaEntity.prototype.set_DeclaredURI = function (value) {
	this.declaredURI = value;
};
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaEntity.prototype, "IDtdEntityInfo_Name", 
	$asm07.System.Xml.Schema.SchemaEntity.prototype.IDtdEntityInfo_get_Name, null);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaEntity.prototype, "IDtdEntityInfo_IsExternal", 
	$asm07.System.Xml.Schema.SchemaEntity.prototype.IDtdEntityInfo_get_IsExternal, null);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaEntity.prototype, "IDtdEntityInfo_IsDeclaredInExternal", 
	$asm07.System.Xml.Schema.SchemaEntity.prototype.IDtdEntityInfo_get_IsDeclaredInExternal, null);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaEntity.prototype, "IDtdEntityInfo_IsUnparsedEntity", 
	$asm07.System.Xml.Schema.SchemaEntity.prototype.IDtdEntityInfo_get_IsUnparsedEntity, null);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaEntity.prototype, "IDtdEntityInfo_IsParameterEntity", 
	$asm07.System.Xml.Schema.SchemaEntity.prototype.IDtdEntityInfo_get_IsParameterEntity, null);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaEntity.prototype, "IDtdEntityInfo_BaseUriString", 
	$asm07.System.Xml.Schema.SchemaEntity.prototype.IDtdEntityInfo_get_BaseUriString, null);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaEntity.prototype, "IDtdEntityInfo_DeclaredUriString", 
	$asm07.System.Xml.Schema.SchemaEntity.prototype.IDtdEntityInfo_get_DeclaredUriString, null);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaEntity.prototype, "IDtdEntityInfo_SystemId", 
	$asm07.System.Xml.Schema.SchemaEntity.prototype.IDtdEntityInfo_get_SystemId, null);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaEntity.prototype, "IDtdEntityInfo_PublicId", 
	$asm07.System.Xml.Schema.SchemaEntity.prototype.IDtdEntityInfo_get_PublicId, null);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaEntity.prototype, "IDtdEntityInfo_Text", 
	$asm07.System.Xml.Schema.SchemaEntity.prototype.IDtdEntityInfo_get_Text, null);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaEntity.prototype, "IDtdEntityInfo_LineNumber", 
	$asm07.System.Xml.Schema.SchemaEntity.prototype.IDtdEntityInfo_get_LineNumber, null);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaEntity.prototype, "IDtdEntityInfo_LinePosition", 
	$asm07.System.Xml.Schema.SchemaEntity.prototype.IDtdEntityInfo_get_LinePosition, null);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaEntity.prototype, "Name", 
	$asm07.System.Xml.Schema.SchemaEntity.prototype.get_Name, null);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaEntity.prototype, "Url", 
	$asm07.System.Xml.Schema.SchemaEntity.prototype.get_Url, $asm07.System.Xml.Schema.SchemaEntity.prototype.set_Url);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaEntity.prototype, "Pubid", 
	$asm07.System.Xml.Schema.SchemaEntity.prototype.get_Pubid, $asm07.System.Xml.Schema.SchemaEntity.prototype.set_Pubid);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaEntity.prototype, "IsExternal", 
	$asm07.System.Xml.Schema.SchemaEntity.prototype.get_IsExternal, $asm07.System.Xml.Schema.SchemaEntity.prototype.set_IsExternal);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaEntity.prototype, "DeclaredInExternal", 
	$asm07.System.Xml.Schema.SchemaEntity.prototype.get_DeclaredInExternal, $asm07.System.Xml.Schema.SchemaEntity.prototype.set_DeclaredInExternal);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaEntity.prototype, "NData", 
	$asm07.System.Xml.Schema.SchemaEntity.prototype.get_NData, $asm07.System.Xml.Schema.SchemaEntity.prototype.set_NData);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaEntity.prototype, "Text", 
	$asm07.System.Xml.Schema.SchemaEntity.prototype.get_Text, $asm07.System.Xml.Schema.SchemaEntity.prototype.set_Text);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaEntity.prototype, "Line", 
	$asm07.System.Xml.Schema.SchemaEntity.prototype.get_Line, $asm07.System.Xml.Schema.SchemaEntity.prototype.set_Line);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaEntity.prototype, "Pos", 
	$asm07.System.Xml.Schema.SchemaEntity.prototype.get_Pos, $asm07.System.Xml.Schema.SchemaEntity.prototype.set_Pos);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaEntity.prototype, "BaseURI", 
	$asm07.System.Xml.Schema.SchemaEntity.prototype.get_BaseURI, $asm07.System.Xml.Schema.SchemaEntity.prototype.set_BaseURI);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaEntity.prototype, "ParsingInProgress", 
	$asm07.System.Xml.Schema.SchemaEntity.prototype.get_ParsingInProgress, $asm07.System.Xml.Schema.SchemaEntity.prototype.set_ParsingInProgress);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaEntity.prototype, "DeclaredURI", 
	$asm07.System.Xml.Schema.SchemaEntity.prototype.get_DeclaredURI, $asm07.System.Xml.Schema.SchemaEntity.prototype.set_DeclaredURI);
$asm07.System.Xml.Schema.SchemaEntity.prototype.qname = null;
$asm07.System.Xml.Schema.SchemaEntity.prototype.url = null;
$asm07.System.Xml.Schema.SchemaEntity.prototype.pubid = null;
$asm07.System.Xml.Schema.SchemaEntity.prototype.text = null;
$asm07.System.Xml.Schema.SchemaEntity.prototype.ndata = null;
$asm07.System.Xml.Schema.SchemaEntity.prototype.lineNumber = 0;
$asm07.System.Xml.Schema.SchemaEntity.prototype.linePosition = 0;
$asm07.System.Xml.Schema.SchemaEntity.prototype.isParameter = false;
$asm07.System.Xml.Schema.SchemaEntity.prototype.isExternal = false;
$asm07.System.Xml.Schema.SchemaEntity.prototype.parsingInProgress = false;
$asm07.System.Xml.Schema.SchemaEntity.prototype.isDeclaredInExternal = false;
$asm07.System.Xml.Schema.SchemaEntity.prototype.baseURI = null;
$asm07.System.Xml.Schema.SchemaEntity.prototype.declaredURI = null;

$asm07.System.Xml.Schema.SchemaInfo.prototype._ctor = function () {
	this.elementDecls = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.Xml.XmlQualifiedName, $asm07.System.Xml.Schema.SchemaElementDecl), "_ctor$0", []);
	this.undeclaredElementDecls = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.Xml.XmlQualifiedName, $asm07.System.Xml.Schema.SchemaElementDecl), "_ctor$0", []);
	this.docTypeName = System.Xml.XmlQualifiedName.Empty;
	this.internalDtdSubset = System.String.Empty;
	System.Object.prototype._ctor.call(this);
};
$asm07.System.Xml.Schema.SchemaInfo.prototype.get_DocTypeName = function () {
	return this.docTypeName;
};
$asm07.System.Xml.Schema.SchemaInfo.prototype.set_DocTypeName = function (value) {
	this.docTypeName = value;
};
$asm07.System.Xml.Schema.SchemaInfo.prototype.get_InternalDtdSubset = function () {
	return this.internalDtdSubset;
};
$asm07.System.Xml.Schema.SchemaInfo.prototype.set_InternalDtdSubset = function (value) {
	this.internalDtdSubset = value;
};
$asm07.System.Xml.Schema.SchemaInfo.prototype.get_ElementDecls = function () {
	return this.elementDecls;
};
$asm07.System.Xml.Schema.SchemaInfo.prototype.get_UndeclaredElementDecls = function () {
	return this.undeclaredElementDecls;
};
$asm07.System.Xml.Schema.SchemaInfo.prototype.get_GeneralEntities = function () {
	if (this.generalEntities === null) {
		this.generalEntities = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.Xml.XmlQualifiedName, $asm07.System.Xml.Schema.SchemaEntity), "_ctor$0", []);
	}
	return this.generalEntities;
};
$asm07.System.Xml.Schema.SchemaInfo.prototype.get_ParameterEntities = function () {
	if (this.parameterEntities === null) {
		this.parameterEntities = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.Xml.XmlQualifiedName, $asm07.System.Xml.Schema.SchemaEntity), "_ctor$0", []);
	}
	return this.parameterEntities;
};
$asm07.System.Xml.Schema.SchemaInfo.prototype.Finish = function () {
	var dictionary = this.elementDecls;
__loop0__: 
	for (var i = 0; i < 2; ++i) {
		var enumerator = JSIL.Cast(dictionary.Values, System.Collections.Generic.Dictionary$b2.ValueCollection.Of(System.Xml.XmlQualifiedName, $asm07.System.Xml.Schema.SchemaElementDecl)).GetEnumerator().MemberwiseClone();
		try {
		__loop1__: 
			while (enumerator.MoveNext()) {
				var current = enumerator.Current;
				if (current.HasNonCDataAttribute) {
					this.hasNonCDataAttributes = true;
				}
				if (current.DefaultAttDefs !== null) {
					this.hasDefaultAttributes = true;
				}
			}
		} finally {
			enumerator.IDisposable_Dispose();
		}
		dictionary = this.undeclaredElementDecls;
	}
};
$asm07.System.Xml.Schema.SchemaInfo.prototype.IDtdInfo_get_HasDefaultAttributes = function () {
	return this.hasDefaultAttributes;
};
$asm07.System.Xml.Schema.SchemaInfo.prototype.IDtdInfo_get_HasNonCDataAttributes = function () {
	return this.hasNonCDataAttributes;
};
$asm07.System.Xml.Schema.SchemaInfo.prototype.IDtdInfo_LookupAttributeList = function (prefix, localName) {
	var result = new JSIL.Variable(null);
	var key = JSIL.New(System.Xml.XmlQualifiedName, "_ctor$2", [prefix, localName]);
	if (!this.elementDecls.TryGetValue(key, /* ref */ result)) {
		this.undeclaredElementDecls.TryGetValue(key, /* ref */ result);
	}
	return result.value;
};
$asm07.System.Xml.Schema.SchemaInfo.prototype.IDtdInfo_GetAttributeLists = function () {
	var getAttributeLists$gd__ = new $asm07.System.Xml.Schema.SchemaInfo.GetAttributeLists$gd__0(-2);
	getAttributeLists$gd__.$this = this;
	return getAttributeLists$gd__;
};
$asm07.System.Xml.Schema.SchemaInfo.prototype.IDtdInfo_LookupEntity = function (name) {
	var result = new JSIL.Variable(null);
	if (this.generalEntities === null) {
		return null;
	}
	var key = JSIL.New(System.Xml.XmlQualifiedName, "_ctor$1", [name]);
	if (this.generalEntities.TryGetValue(key, /* ref */ result)) {
		return result.value;
	}
	return null;
};
$asm07.System.Xml.Schema.SchemaInfo.prototype.IDtdInfo_get_Name = function () {
	return this.docTypeName;
};
$asm07.System.Xml.Schema.SchemaInfo.prototype.IDtdInfo_get_InternalDtdSubset = function () {
	return this.internalDtdSubset;
};
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaInfo.prototype, "DocTypeName", 
	$asm07.System.Xml.Schema.SchemaInfo.prototype.get_DocTypeName, $asm07.System.Xml.Schema.SchemaInfo.prototype.set_DocTypeName);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaInfo.prototype, "InternalDtdSubset", 
	$asm07.System.Xml.Schema.SchemaInfo.prototype.get_InternalDtdSubset, $asm07.System.Xml.Schema.SchemaInfo.prototype.set_InternalDtdSubset);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaInfo.prototype, "ElementDecls", 
	$asm07.System.Xml.Schema.SchemaInfo.prototype.get_ElementDecls, null);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaInfo.prototype, "UndeclaredElementDecls", 
	$asm07.System.Xml.Schema.SchemaInfo.prototype.get_UndeclaredElementDecls, null);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaInfo.prototype, "GeneralEntities", 
	$asm07.System.Xml.Schema.SchemaInfo.prototype.get_GeneralEntities, null);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaInfo.prototype, "ParameterEntities", 
	$asm07.System.Xml.Schema.SchemaInfo.prototype.get_ParameterEntities, null);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaInfo.prototype, "IDtdInfo_HasDefaultAttributes", 
	$asm07.System.Xml.Schema.SchemaInfo.prototype.IDtdInfo_get_HasDefaultAttributes, null);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaInfo.prototype, "IDtdInfo_HasNonCDataAttributes", 
	$asm07.System.Xml.Schema.SchemaInfo.prototype.IDtdInfo_get_HasNonCDataAttributes, null);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaInfo.prototype, "IDtdInfo_Name", 
	$asm07.System.Xml.Schema.SchemaInfo.prototype.IDtdInfo_get_Name, null);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaInfo.prototype, "IDtdInfo_InternalDtdSubset", 
	$asm07.System.Xml.Schema.SchemaInfo.prototype.IDtdInfo_get_InternalDtdSubset, null);
$asm07.System.Xml.Schema.SchemaInfo.prototype.elementDecls = null;
$asm07.System.Xml.Schema.SchemaInfo.prototype.undeclaredElementDecls = null;
$asm07.System.Xml.Schema.SchemaInfo.prototype.generalEntities = null;
$asm07.System.Xml.Schema.SchemaInfo.prototype.parameterEntities = null;
$asm07.System.Xml.Schema.SchemaInfo.prototype.docTypeName = null;
$asm07.System.Xml.Schema.SchemaInfo.prototype.internalDtdSubset = null;
$asm07.System.Xml.Schema.SchemaInfo.prototype.hasNonCDataAttributes = false;
$asm07.System.Xml.Schema.SchemaInfo.prototype.hasDefaultAttributes = false;

$asm07.System.Xml.Schema.SchemaInfo.GetAttributeLists$gd__0.prototype.IEnumerable$b1_GetEnumerator = function () {
	if (!((System.Threading.Thread.CurrentThread.ManagedThreadId !== this.$initialThreadId) || (this.$state !== -2))) {
		this.$state = 0;
		var getAttributeLists$gd__ = this;
	} else {
		getAttributeLists$gd__ = new $asm07.System.Xml.Schema.SchemaInfo.GetAttributeLists$gd__0(0);
		getAttributeLists$gd__.$this = this.$this;
	}
	return getAttributeLists$gd__;
};
$asm07.System.Xml.Schema.SchemaInfo.GetAttributeLists$gd__0.prototype.IEnumerable_GetEnumerator = function () {
	return this.IEnumerable$b1_GetEnumerator();
};
$asm07.System.Xml.Schema.SchemaInfo.GetAttributeLists$gd__0.prototype.IEnumerator_MoveNext = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				try {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								switch (this.$state) {
									case 0: 
										this.$state = -1;
										this.$wrap3 = JSIL.Cast(this.$this.elementDecls.Values, System.Collections.Generic.Dictionary$b2.ValueCollection.Of(System.Xml.XmlQualifiedName, $asm07.System.Xml.Schema.SchemaElementDecl)).GetEnumerator().MemberwiseClone();
										this.$state = 1;
										break;
									case 1: 
										__label1__ = "IL_94";
										continue __step1__;
									case 2: 
										this.$state = 1;
										break;
									default: 
										__label1__ = "IL_94";
										continue __step1__;
								}
								if (this.$wrap3.MoveNext()) {
									this.elemDecl = this.$wrap3.Current;
									this.eleDeclAsAttList = this.elemDecl;
									this.$current = this.eleDeclAsAttList;
									this.$state = 2;
									var result = true;
									return result;
								}
								this.$l$gm__Finally4();
								__label1__ = "IL_94";
								continue __step1__;
								break;
							case "IL_94":
								result = false;
								break __step1__;
						}
					}
				} catch ($exception) {
					this.IDisposable_Dispose();
					throw $exception;
				}
				return result;
				break __step0__;
		}
	}
};
$asm07.System.Xml.Schema.SchemaInfo.GetAttributeLists$gd__0.prototype.IEnumerator$b1_get_Current = function () {
	return this.$current;
};
$asm07.System.Xml.Schema.SchemaInfo.GetAttributeLists$gd__0.prototype.IEnumerator_Reset = function () {
	throw JSIL.New(System.NotSupportedException, "_ctor$0", []);
};
$asm07.System.Xml.Schema.SchemaInfo.GetAttributeLists$gd__0.prototype.IDisposable_Dispose = function () {
	switch (this.$state) {
		case 1: 
		case 2: 
			try {
			} finally {
				this.$l$gm__Finally4();
			}
			return;
		default: 
			return;
	}
};
$asm07.System.Xml.Schema.SchemaInfo.GetAttributeLists$gd__0.prototype.IEnumerator_get_Current = function () {
	return this.$current;
};
$asm07.System.Xml.Schema.SchemaInfo.GetAttributeLists$gd__0.prototype._ctor = function ($l$g1__state) {
	System.Object.prototype._ctor.call(this);
	this.$state = $l$g1__state;
	this.$initialThreadId = System.Threading.Thread.CurrentThread.ManagedThreadId;
};
$asm07.System.Xml.Schema.SchemaInfo.GetAttributeLists$gd__0.prototype.$l$gm__Finally4 = function () {
	this.$state = -1;
	this.$wrap3.IDisposable_Dispose();
};
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaInfo.GetAttributeLists$gd__0.prototype, "IEnumerator$b1_Current", 
	$asm07.System.Xml.Schema.SchemaInfo.GetAttributeLists$gd__0.prototype.IEnumerator$b1_get_Current, null);
JSIL.MakeProperty($asm07.System.Xml.Schema.SchemaInfo.GetAttributeLists$gd__0.prototype, "IEnumerator_Current", 
	$asm07.System.Xml.Schema.SchemaInfo.GetAttributeLists$gd__0.prototype.IEnumerator_get_Current, null);
$asm07.System.Xml.Schema.SchemaInfo.GetAttributeLists$gd__0.prototype.$current = null;
$asm07.System.Xml.Schema.SchemaInfo.GetAttributeLists$gd__0.prototype.$state = 0;
$asm07.System.Xml.Schema.SchemaInfo.GetAttributeLists$gd__0.prototype.$initialThreadId = 0;
$asm07.System.Xml.Schema.SchemaInfo.GetAttributeLists$gd__0.prototype.$this = null;
$asm07.System.Xml.Schema.SchemaInfo.GetAttributeLists$gd__0.prototype.elemDecl = null;
$asm07.System.Xml.Schema.SchemaInfo.GetAttributeLists$gd__0.prototype.eleDeclAsAttList = null;

System.Xml.Schema.XmlSchemaObject.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};

System.Xml.Schema.XmlSchema.prototype._ctor = function () {
	System.Xml.Schema.XmlSchemaObject.prototype._ctor.call(this);
};

System.Xml.Schema.XmlSchemaSet.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};

$asm07.System.Xml.Schema.XmlUntypedStringConverter.prototype._ctor = function (listsAllowed) {
	System.Object.prototype._ctor.call(this);
	this.listsAllowed = listsAllowed;
	if (listsAllowed) {
		this.listItemConverter = new $asm07.System.Xml.Schema.XmlUntypedStringConverter(false);
	}
};
$asm07.System.Xml.Schema.XmlUntypedStringConverter.prototype.ToString = function (value, nsResolver) {
	if (value === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["value"]);
	}
	var type = (JSIL.GetType(value));
	if (type === $asm07.System.Xml.Schema.XmlUntypedStringConverter.BooleanType) {
		return System.Xml.XmlConvert.ToString$0(JSIL.Cast(value, System.Boolean));
	}
	if (type === $asm07.System.Xml.Schema.XmlUntypedStringConverter.ByteType) {
		return System.Xml.XmlConvert.ToString$4(JSIL.Cast(value, System.Byte));
	}
	if (type === $asm07.System.Xml.Schema.XmlUntypedStringConverter.ByteArrayType) {
		return this.Base64BinaryToString(JSIL.Cast(value, System.Array.Of(System.Byte)));
	}
	if (type === $asm07.System.Xml.Schema.XmlUntypedStringConverter.DateTimeType) {
		return this.DateTimeToString(JSIL.Cast(value, System.DateTime).MemberwiseClone());
	}
	if (type === $asm07.System.Xml.Schema.XmlUntypedStringConverter.DateTimeOffsetType) {
		return $asm07.System.Xml.Schema.XmlUntypedStringConverter.DateTimeOffsetToString(JSIL.Cast(value, System.DateTimeOffset).MemberwiseClone());
	}
	if (type === $asm07.System.Xml.Schema.XmlUntypedStringConverter.DecimalType) {
		return System.Xml.XmlConvert.ToString$2(JSIL.Cast(value, System.Decimal).MemberwiseClone());
	}
	if (type === $asm07.System.Xml.Schema.XmlUntypedStringConverter.DoubleType) {
		return System.Xml.XmlConvert.ToString$10(JSIL.Cast(value, System.Double));
	}
	if (type === $asm07.System.Xml.Schema.XmlUntypedStringConverter.Int16Type) {
		return System.Xml.XmlConvert.ToString$4(JSIL.Cast(value, System.Int16));
	}
	if (type === $asm07.System.Xml.Schema.XmlUntypedStringConverter.Int32Type) {
		return System.Xml.XmlConvert.ToString$5(JSIL.Cast(value, System.Int32));
	}
	if (type === $asm07.System.Xml.Schema.XmlUntypedStringConverter.Int64Type) {
		return System.Xml.XmlConvert.ToString$6(JSIL.Cast(value, System.Int64));
	}
	if (type === $asm07.System.Xml.Schema.XmlUntypedStringConverter.SByteType) {
		return System.Xml.XmlConvert.ToString$3(JSIL.Cast(value, System.SByte));
	}
	if (type === $asm07.System.Xml.Schema.XmlUntypedStringConverter.SingleType) {
		return System.Xml.XmlConvert.ToString$9(JSIL.Cast(value, System.Single));
	}
	if (type === $asm07.System.Xml.Schema.XmlUntypedStringConverter.StringType) {
		return JSIL.Cast(value, System.String);
	}
	if (type === $asm07.System.Xml.Schema.XmlUntypedStringConverter.TimeSpanType) {
		return this.DurationToString(JSIL.Cast(value, System.TimeSpan).MemberwiseClone());
	}
	if (type === $asm07.System.Xml.Schema.XmlUntypedStringConverter.UInt16Type) {
		return System.Xml.XmlConvert.ToString$5(JSIL.Cast(value, System.UInt16));
	}
	if (type === $asm07.System.Xml.Schema.XmlUntypedStringConverter.UInt32Type) {
		return System.Xml.XmlConvert.ToString$7(JSIL.Cast(value, System.UInt32));
	}
	if (type === $asm07.System.Xml.Schema.XmlUntypedStringConverter.UInt64Type) {
		return System.Xml.XmlConvert.ToString$8(JSIL.Cast(value, System.UInt64));
	}
	if ($asm07.System.Xml.Schema.XmlUntypedStringConverter.IsDerivedFrom(type, $asm07.System.Xml.Schema.XmlUntypedStringConverter.UriType)) {
		return this.AnyUriToString(JSIL.Cast(value, System.Uri));
	}
	if ($asm07.System.Xml.Schema.XmlUntypedStringConverter.IsDerivedFrom(type, $asm07.System.Xml.Schema.XmlUntypedStringConverter.XmlQualifiedNameType)) {
		return $asm07.System.Xml.Schema.XmlUntypedStringConverter.QNameToString(JSIL.Cast(value, System.Xml.XmlQualifiedName), nsResolver);
	}
	return this.ListTypeToString(value, nsResolver);
};
$asm07.System.Xml.Schema.XmlUntypedStringConverter.prototype.FromString = function (value, destinationType, nsResolver) {
	if (value === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["value"]);
	}
	if (destinationType === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["destinationType"]);
	}
	if (destinationType === $asm07.System.Xml.Schema.XmlUntypedStringConverter.ObjectType) {
		destinationType = System.String;
	}
	if (destinationType === $asm07.System.Xml.Schema.XmlUntypedStringConverter.BooleanType) {
		return System.Xml.XmlConvert.ToBoolean(value);
	}
	if (destinationType === $asm07.System.Xml.Schema.XmlUntypedStringConverter.ByteType) {
		return this.Int32ToByte(System.Xml.XmlConvert.ToInt32(value));
	}
	if (destinationType === $asm07.System.Xml.Schema.XmlUntypedStringConverter.ByteArrayType) {
		return this.StringToBase64Binary(value);
	}
	if (destinationType === $asm07.System.Xml.Schema.XmlUntypedStringConverter.DateTimeType) {
		return $asm07.System.Xml.Schema.XmlUntypedStringConverter.StringToDateTime(value);
	}
	if (destinationType === $asm07.System.Xml.Schema.XmlUntypedStringConverter.DateTimeOffsetType) {
		return $asm07.System.Xml.Schema.XmlUntypedStringConverter.StringToDateTimeOffset(value);
	}
	if (destinationType === $asm07.System.Xml.Schema.XmlUntypedStringConverter.DecimalType) {
		return System.Xml.XmlConvert.ToDecimal(value);
	}
	if (destinationType === $asm07.System.Xml.Schema.XmlUntypedStringConverter.DoubleType) {
		return System.Xml.XmlConvert.ToDouble(value);
	}
	if (destinationType === $asm07.System.Xml.Schema.XmlUntypedStringConverter.Int16Type) {
		return this.Int32ToInt16(System.Xml.XmlConvert.ToInt32(value));
	}
	if (destinationType === $asm07.System.Xml.Schema.XmlUntypedStringConverter.Int32Type) {
		return System.Xml.XmlConvert.ToInt32(value);
	}
	if (destinationType === $asm07.System.Xml.Schema.XmlUntypedStringConverter.Int64Type) {
		return System.Xml.XmlConvert.ToInt64(value);
	}
	if (destinationType === $asm07.System.Xml.Schema.XmlUntypedStringConverter.SByteType) {
		return this.Int32ToSByte(System.Xml.XmlConvert.ToInt32(value));
	}
	if (destinationType === $asm07.System.Xml.Schema.XmlUntypedStringConverter.SingleType) {
		return System.Xml.XmlConvert.ToSingle(value);
	}
	if (destinationType === $asm07.System.Xml.Schema.XmlUntypedStringConverter.TimeSpanType) {
		return this.StringToDuration(value);
	}
	if (destinationType === $asm07.System.Xml.Schema.XmlUntypedStringConverter.UInt16Type) {
		return this.Int32ToUInt16(System.Xml.XmlConvert.ToInt32(value));
	}
	if (destinationType === $asm07.System.Xml.Schema.XmlUntypedStringConverter.UInt32Type) {
		return this.Int64ToUInt32(System.Xml.XmlConvert.ToInt64(value));
	}
	if (destinationType === $asm07.System.Xml.Schema.XmlUntypedStringConverter.UInt64Type) {
		return this.DecimalToUInt64(System.Xml.XmlConvert.ToDecimal(value).MemberwiseClone());
	}
	if (destinationType === $asm07.System.Xml.Schema.XmlUntypedStringConverter.UriType) {
		return System.Xml.XmlConvert.ToUri(value);
	}
	if (destinationType === $asm07.System.Xml.Schema.XmlUntypedStringConverter.XmlQualifiedNameType) {
		return $asm07.System.Xml.Schema.XmlUntypedStringConverter.StringToQName(value, nsResolver);
	}
	if (destinationType === $asm07.System.Xml.Schema.XmlUntypedStringConverter.StringType) {
		return value;
	}
	return this.StringToListType(value, destinationType, nsResolver);
};
$asm07.System.Xml.Schema.XmlUntypedStringConverter.prototype.Int32ToByte = function (value) {
	if (!((value >= 0) && (value <= 255))) {
		throw JSIL.New(System.OverflowException, "_ctor$1", [$asm07.System.Xml.Res.GetString$0("XmlConvert_Overflow", JSIL.Array.New(System.String, [System.Xml.XmlConvert.ToString$5(value), "Byte"]))]);
	}
	return value;
};
$asm07.System.Xml.Schema.XmlUntypedStringConverter.prototype.Int32ToInt16 = function (value) {
	if (!((value >= -32768) && (value <= 32767))) {
		throw JSIL.New(System.OverflowException, "_ctor$1", [$asm07.System.Xml.Res.GetString$0("XmlConvert_Overflow", JSIL.Array.New(System.String, [System.Xml.XmlConvert.ToString$5(value), "Int16"]))]);
	}
	return value;
};
$asm07.System.Xml.Schema.XmlUntypedStringConverter.prototype.Int32ToSByte = function (value) {
	if (!((value >= -128) && (value <= 127))) {
		throw JSIL.New(System.OverflowException, "_ctor$1", [$asm07.System.Xml.Res.GetString$0("XmlConvert_Overflow", JSIL.Array.New(System.String, [System.Xml.XmlConvert.ToString$5(value), "SByte"]))]);
	}
	return value;
};
$asm07.System.Xml.Schema.XmlUntypedStringConverter.prototype.Int32ToUInt16 = function (value) {
	if (!((value >= 0) && (value <= 65535))) {
		throw JSIL.New(System.OverflowException, "_ctor$1", [$asm07.System.Xml.Res.GetString$0("XmlConvert_Overflow", JSIL.Array.New(System.String, [System.Xml.XmlConvert.ToString$5(value), "UInt16"]))]);
	}
	return value;
};
$asm07.System.Xml.Schema.XmlUntypedStringConverter.prototype.Int64ToUInt32 = function (value) {
	if (!((value >= 0) && (value <= -1))) {
		throw JSIL.New(System.OverflowException, "_ctor$1", [$asm07.System.Xml.Res.GetString$0("XmlConvert_Overflow", JSIL.Array.New(System.String, [System.Xml.XmlConvert.ToString$6(value), "UInt32"]))]);
	}
	return value;
};
$asm07.System.Xml.Schema.XmlUntypedStringConverter.prototype.DecimalToUInt64 = function (value) {
	if (!(!System.Decimal.op_LessThan(value.MemberwiseClone(), 0) && !System.Decimal.op_GreaterThan(value.MemberwiseClone(), 1.8446744073709552E+19))) {
		throw JSIL.New(System.OverflowException, "_ctor$1", [$asm07.System.Xml.Res.GetString$0("XmlConvert_Overflow", JSIL.Array.New(System.String, [System.Xml.XmlConvert.ToString$2(value.MemberwiseClone()), "UInt64"]))]);
	}
	return System.Decimal.op_Explicit$9(value.MemberwiseClone());
};
$asm07.System.Xml.Schema.XmlUntypedStringConverter.prototype.Base64BinaryToString = function (value) {
	return System.Convert.ToBase64String$0(value);
};
$asm07.System.Xml.Schema.XmlUntypedStringConverter.prototype.StringToBase64Binary = function (value) {
	return System.Convert.FromBase64String(System.Xml.XmlConvert.TrimString(value));
};
$asm07.System.Xml.Schema.XmlUntypedStringConverter.prototype.DateTimeToString = function (value) {
	return (JSIL.New($asm07.System.Xml.Schema.XsdDateTime, "_ctor$1", [value, $asm07.System.Xml.Schema.XsdDateTimeFlags.DateTime])).toString();
};
$asm07.System.Xml.Schema.XmlUntypedStringConverter.StringToDateTime = function (value) {
	return $asm07.System.Xml.Schema.XsdDateTime.op_Implicit$0(JSIL.New($asm07.System.Xml.Schema.XsdDateTime, "_ctor$0", [value, ($asm07.System.Xml.Schema.XsdDateTimeFlags.AllXsd | $asm07.System.Xml.Schema.XsdDateTimeFlags.Date | $asm07.System.Xml.Schema.XsdDateTimeFlags.DateTime | $asm07.System.Xml.Schema.XsdDateTimeFlags.GDay | $asm07.System.Xml.Schema.XsdDateTimeFlags.GMonth | $asm07.System.Xml.Schema.XsdDateTimeFlags.GMonthDay | $asm07.System.Xml.Schema.XsdDateTimeFlags.GYear | $asm07.System.Xml.Schema.XsdDateTimeFlags.GYearMonth | $asm07.System.Xml.Schema.XsdDateTimeFlags.Time)]));
};
$asm07.System.Xml.Schema.XmlUntypedStringConverter.DateTimeOffsetToString = function (value) {
	return (JSIL.New($asm07.System.Xml.Schema.XsdDateTime, "_ctor$3", [value, $asm07.System.Xml.Schema.XsdDateTimeFlags.DateTime])).toString();
};
$asm07.System.Xml.Schema.XmlUntypedStringConverter.StringToDateTimeOffset = function (value) {
	return $asm07.System.Xml.Schema.XsdDateTime.op_Implicit$1(JSIL.New($asm07.System.Xml.Schema.XsdDateTime, "_ctor$0", [value, ($asm07.System.Xml.Schema.XsdDateTimeFlags.AllXsd | $asm07.System.Xml.Schema.XsdDateTimeFlags.Date | $asm07.System.Xml.Schema.XsdDateTimeFlags.DateTime | $asm07.System.Xml.Schema.XsdDateTimeFlags.GDay | $asm07.System.Xml.Schema.XsdDateTimeFlags.GMonth | $asm07.System.Xml.Schema.XsdDateTimeFlags.GMonthDay | $asm07.System.Xml.Schema.XsdDateTimeFlags.GYear | $asm07.System.Xml.Schema.XsdDateTimeFlags.GYearMonth | $asm07.System.Xml.Schema.XsdDateTimeFlags.Time)]));
};
$asm07.System.Xml.Schema.XmlUntypedStringConverter.prototype.DurationToString = function (value) {
	return (JSIL.New($asm07.System.Xml.Schema.XsdDuration, "_ctor$2", [value, $asm07.System.Xml.Schema.XsdDuration.DurationType.Duration])).ToString($asm07.System.Xml.Schema.XsdDuration.DurationType.Duration);
};
$asm07.System.Xml.Schema.XmlUntypedStringConverter.prototype.StringToDuration = function (value) {
	return (JSIL.New($asm07.System.Xml.Schema.XsdDuration, "_ctor$4", [value, $asm07.System.Xml.Schema.XsdDuration.DurationType.Duration])).ToTimeSpan$1($asm07.System.Xml.Schema.XsdDuration.DurationType.Duration);
};
$asm07.System.Xml.Schema.XmlUntypedStringConverter.prototype.AnyUriToString = function (value) {
	return value.OriginalString;
};
$asm07.System.Xml.Schema.XmlUntypedStringConverter.QNameToString = function (qname, nsResolver) {
	if (nsResolver === null) {
		return ("{" + qname.Namespace + "}" + qname.Name);
	}
	var text = nsResolver.IXmlNamespaceResolver_LookupPrefix(qname.Namespace);
	if (text === null) {
		throw JSIL.New(System.InvalidCastException, "_ctor$1", [$asm07.System.Xml.Res.GetString$0("XmlConvert_TypeNoPrefix", [qname.toString(), qname.Namespace])]);
	}
	if (text.length === 0) {
		return qname.Name;
	}
	return (text + ":" + qname.Name);
};
$asm07.System.Xml.Schema.XmlUntypedStringConverter.StringToQName = function (value, nsResolver) {
	var text = new JSIL.Variable(null), name = new JSIL.Variable(null);
	value = value.Trim$1();
	try {
		$asm07.System.Xml.ValidateNames.ParseQNameThrow(value, /* ref */ text, /* ref */ name);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.Xml.XmlException)) {
			var arg_14_0 = $exception;
			throw JSIL.New(System.FormatException, "_ctor$1", [arg_14_0.Message]);
		} else {
			throw $exception;
		}
	}
	if (nsResolver === null) {
		throw JSIL.New(System.InvalidCastException, "_ctor$1", [$asm07.System.Xml.Res.GetString$0("XmlConvert_TypeNoNamespace", [value, text.value])]);
	}
	var text2 = nsResolver.IXmlNamespaceResolver_LookupNamespace(text.value);
	if (text2 === null) {
		throw JSIL.New(System.InvalidCastException, "_ctor$1", [$asm07.System.Xml.Res.GetString$0("XmlConvert_TypeNoNamespace", [value, text.value])]);
	}
	return JSIL.New(System.Xml.XmlQualifiedName, "_ctor$2", [name.value, text2]);
};
$asm07.System.Xml.Schema.XmlUntypedStringConverter.prototype.ListTypeToString = function (value, nsResolver) {
	if (!(this.listsAllowed && JSIL.TryCast(value, System.Collections.IEnumerable))) {
		throw this.CreateInvalidClrMappingException(JSIL.GetType(value), System.String);
	}
	var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
	var enumerator = JSIL.Cast(value, System.Collections.IEnumerable).IEnumerable_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator_Current;
			if (current !== null) {
				if (stringBuilder.Length !== 0) {
					stringBuilder.Append$7(" ");
				}
				stringBuilder.Append$2(this.listItemConverter.ToString(current, nsResolver));
			}
		}
	} finally {
		var disposable = JSIL.TryCast(enumerator, System.IDisposable);
		if (disposable !== null) {
			disposable.IDisposable_Dispose();
		}
	}
	return stringBuilder.toString();
};
$asm07.System.Xml.Schema.XmlUntypedStringConverter.prototype.StringToListType = function (value, destinationType, nsResolver) {
	if (!(!this.listsAllowed || !destinationType.IsArray)) {
		var elementType = destinationType.GetElementType();
		if (elementType === $asm07.System.Xml.Schema.XmlUntypedStringConverter.ObjectType) {
			return this.ToArray$b1(System.Object)(System.Xml.XmlConvert.SplitString$1(value, System.StringSplitOptions.None), nsResolver);
		}
		if (elementType === $asm07.System.Xml.Schema.XmlUntypedStringConverter.BooleanType) {
			return this.ToArray$b1(System.Boolean)(System.Xml.XmlConvert.SplitString$1(value, System.StringSplitOptions.RemoveEmptyEntries), nsResolver);
		}
		if (elementType === $asm07.System.Xml.Schema.XmlUntypedStringConverter.ByteType) {
			return this.ToArray$b1(System.Byte)(System.Xml.XmlConvert.SplitString$1(value, System.StringSplitOptions.RemoveEmptyEntries), nsResolver);
		}
		if (elementType === $asm07.System.Xml.Schema.XmlUntypedStringConverter.ByteArrayType) {
			return this.ToArray$b1(System.Array.Of(System.Byte))(System.Xml.XmlConvert.SplitString$1(value, System.StringSplitOptions.None), nsResolver);
		}
		if (elementType === $asm07.System.Xml.Schema.XmlUntypedStringConverter.DateTimeType) {
			return this.ToArray$b1(System.DateTime)(System.Xml.XmlConvert.SplitString$1(value, System.StringSplitOptions.RemoveEmptyEntries), nsResolver);
		}
		if (elementType === $asm07.System.Xml.Schema.XmlUntypedStringConverter.DateTimeOffsetType) {
			return this.ToArray$b1(System.DateTimeOffset)(System.Xml.XmlConvert.SplitString$1(value, System.StringSplitOptions.RemoveEmptyEntries), nsResolver);
		}
		if (elementType === $asm07.System.Xml.Schema.XmlUntypedStringConverter.DecimalType) {
			return this.ToArray$b1(System.Decimal)(System.Xml.XmlConvert.SplitString$1(value, System.StringSplitOptions.RemoveEmptyEntries), nsResolver);
		}
		if (elementType === $asm07.System.Xml.Schema.XmlUntypedStringConverter.DoubleType) {
			return this.ToArray$b1(System.Double)(System.Xml.XmlConvert.SplitString$1(value, System.StringSplitOptions.RemoveEmptyEntries), nsResolver);
		}
		if (elementType === $asm07.System.Xml.Schema.XmlUntypedStringConverter.Int16Type) {
			return this.ToArray$b1(System.Int16)(System.Xml.XmlConvert.SplitString$1(value, System.StringSplitOptions.RemoveEmptyEntries), nsResolver);
		}
		if (elementType === $asm07.System.Xml.Schema.XmlUntypedStringConverter.Int32Type) {
			return this.ToArray$b1(System.Int32)(System.Xml.XmlConvert.SplitString$1(value, System.StringSplitOptions.RemoveEmptyEntries), nsResolver);
		}
		if (elementType === $asm07.System.Xml.Schema.XmlUntypedStringConverter.Int64Type) {
			return this.ToArray$b1(System.Int64)(System.Xml.XmlConvert.SplitString$1(value, System.StringSplitOptions.RemoveEmptyEntries), nsResolver);
		}
		if (elementType === $asm07.System.Xml.Schema.XmlUntypedStringConverter.SByteType) {
			return this.ToArray$b1(System.SByte)(System.Xml.XmlConvert.SplitString$1(value, System.StringSplitOptions.RemoveEmptyEntries), nsResolver);
		}
		if (elementType === $asm07.System.Xml.Schema.XmlUntypedStringConverter.SingleType) {
			return this.ToArray$b1(System.Single)(System.Xml.XmlConvert.SplitString$1(value, System.StringSplitOptions.RemoveEmptyEntries), nsResolver);
		}
		if (elementType === $asm07.System.Xml.Schema.XmlUntypedStringConverter.StringType) {
			return this.ToArray$b1(System.String)(System.Xml.XmlConvert.SplitString$1(value, System.StringSplitOptions.None), nsResolver);
		}
		if (elementType === $asm07.System.Xml.Schema.XmlUntypedStringConverter.TimeSpanType) {
			return this.ToArray$b1(System.TimeSpan)(System.Xml.XmlConvert.SplitString$1(value, System.StringSplitOptions.RemoveEmptyEntries), nsResolver);
		}
		if (elementType === $asm07.System.Xml.Schema.XmlUntypedStringConverter.UInt16Type) {
			return this.ToArray$b1(System.UInt16)(System.Xml.XmlConvert.SplitString$1(value, System.StringSplitOptions.RemoveEmptyEntries), nsResolver);
		}
		if (elementType === $asm07.System.Xml.Schema.XmlUntypedStringConverter.UInt32Type) {
			return this.ToArray$b1(System.UInt32)(System.Xml.XmlConvert.SplitString$1(value, System.StringSplitOptions.RemoveEmptyEntries), nsResolver);
		}
		if (elementType === $asm07.System.Xml.Schema.XmlUntypedStringConverter.UInt64Type) {
			return this.ToArray$b1(System.UInt64)(System.Xml.XmlConvert.SplitString$1(value, System.StringSplitOptions.RemoveEmptyEntries), nsResolver);
		}
		if (elementType === $asm07.System.Xml.Schema.XmlUntypedStringConverter.UriType) {
			return this.ToArray$b1(System.Uri)(System.Xml.XmlConvert.SplitString$1(value, System.StringSplitOptions.None), nsResolver);
		}
		if (elementType === $asm07.System.Xml.Schema.XmlUntypedStringConverter.XmlQualifiedNameType) {
			return this.ToArray$b1(System.Xml.XmlQualifiedName)(System.Xml.XmlConvert.SplitString$1(value, System.StringSplitOptions.RemoveEmptyEntries), nsResolver);
		}
	}
	throw this.CreateInvalidClrMappingException(System.String, destinationType);
};
$asm07.System.Xml.Schema.XmlUntypedStringConverter.prototype.ToArray$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, stringArray, nsResolver) {
		var array = JSIL.Array.New(T, stringArray.length);
	__loop0__: 
		for (var i = 0; i < stringArray.length; ++i) {
			array[i] = JSIL.Cast(this.listItemConverter.FromString(stringArray[i], T, nsResolver), T);
		}
		return array;
	}
);
$asm07.System.Xml.Schema.XmlUntypedStringConverter.IsDerivedFrom = function (derivedType, baseType) {
__loop0__: 
	while (derivedType) {
		if (derivedType === baseType) {
			return true;
		}
		derivedType = derivedType.BaseType;
	}
	return false;
};
$asm07.System.Xml.Schema.XmlUntypedStringConverter.prototype.CreateInvalidClrMappingException = function (sourceType, destinationType) {
	return JSIL.New(System.InvalidCastException, "_ctor$1", [$asm07.System.Xml.Res.GetString$0("XmlConvert_TypeListBadMapping2", [$asm07.System.Xml.Schema.XmlUntypedStringConverter.UntypedStringTypeName, sourceType.Name, destinationType.Name])]);
};
$asm07.System.Xml.Schema.XmlUntypedStringConverter.prototype.listsAllowed = false;
$asm07.System.Xml.Schema.XmlUntypedStringConverter.prototype.listItemConverter = null;
$asm07.System.Xml.Schema.XmlUntypedStringConverter.DecimalType = null;
$asm07.System.Xml.Schema.XmlUntypedStringConverter.Int32Type = null;
$asm07.System.Xml.Schema.XmlUntypedStringConverter.Int64Type = null;
$asm07.System.Xml.Schema.XmlUntypedStringConverter.StringType = null;
$asm07.System.Xml.Schema.XmlUntypedStringConverter.ObjectType = null;
$asm07.System.Xml.Schema.XmlUntypedStringConverter.ByteType = null;
$asm07.System.Xml.Schema.XmlUntypedStringConverter.Int16Type = null;
$asm07.System.Xml.Schema.XmlUntypedStringConverter.SByteType = null;
$asm07.System.Xml.Schema.XmlUntypedStringConverter.UInt16Type = null;
$asm07.System.Xml.Schema.XmlUntypedStringConverter.UInt32Type = null;
$asm07.System.Xml.Schema.XmlUntypedStringConverter.UInt64Type = null;
$asm07.System.Xml.Schema.XmlUntypedStringConverter.DoubleType = null;
$asm07.System.Xml.Schema.XmlUntypedStringConverter.SingleType = null;
$asm07.System.Xml.Schema.XmlUntypedStringConverter.DateTimeType = null;
$asm07.System.Xml.Schema.XmlUntypedStringConverter.DateTimeOffsetType = null;
$asm07.System.Xml.Schema.XmlUntypedStringConverter.BooleanType = null;
$asm07.System.Xml.Schema.XmlUntypedStringConverter.ByteArrayType = null;
$asm07.System.Xml.Schema.XmlUntypedStringConverter.XmlQualifiedNameType = null;
$asm07.System.Xml.Schema.XmlUntypedStringConverter.UriType = null;
$asm07.System.Xml.Schema.XmlUntypedStringConverter.TimeSpanType = null;
$asm07.System.Xml.Schema.XmlUntypedStringConverter.UntypedStringTypeName = null;
$asm07.System.Xml.Schema.XmlUntypedStringConverter.Instance = null;
$asm07.System.Xml.Schema.XmlUntypedStringConverter._cctor = function () {
	$asm07.System.Xml.Schema.XmlUntypedStringConverter.DecimalType = System.Decimal;
	$asm07.System.Xml.Schema.XmlUntypedStringConverter.Int32Type = System.Int32;
	$asm07.System.Xml.Schema.XmlUntypedStringConverter.Int64Type = System.Int64;
	$asm07.System.Xml.Schema.XmlUntypedStringConverter.StringType = System.String;
	$asm07.System.Xml.Schema.XmlUntypedStringConverter.ObjectType = System.Object;
	$asm07.System.Xml.Schema.XmlUntypedStringConverter.ByteType = System.Byte;
	$asm07.System.Xml.Schema.XmlUntypedStringConverter.Int16Type = System.Int16;
	$asm07.System.Xml.Schema.XmlUntypedStringConverter.SByteType = System.SByte;
	$asm07.System.Xml.Schema.XmlUntypedStringConverter.UInt16Type = System.UInt16;
	$asm07.System.Xml.Schema.XmlUntypedStringConverter.UInt32Type = System.UInt32;
	$asm07.System.Xml.Schema.XmlUntypedStringConverter.UInt64Type = System.UInt64;
	$asm07.System.Xml.Schema.XmlUntypedStringConverter.DoubleType = System.Double;
	$asm07.System.Xml.Schema.XmlUntypedStringConverter.SingleType = System.Single;
	$asm07.System.Xml.Schema.XmlUntypedStringConverter.DateTimeType = System.DateTime;
	$asm07.System.Xml.Schema.XmlUntypedStringConverter.DateTimeOffsetType = System.DateTimeOffset;
	$asm07.System.Xml.Schema.XmlUntypedStringConverter.BooleanType = System.Boolean;
	$asm07.System.Xml.Schema.XmlUntypedStringConverter.ByteArrayType = System.Array.Of(System.Byte);
	$asm07.System.Xml.Schema.XmlUntypedStringConverter.XmlQualifiedNameType = System.Xml.XmlQualifiedName;
	$asm07.System.Xml.Schema.XmlUntypedStringConverter.UriType = System.Uri;
	$asm07.System.Xml.Schema.XmlUntypedStringConverter.TimeSpanType = System.TimeSpan;
	$asm07.System.Xml.Schema.XmlUntypedStringConverter.UntypedStringTypeName = "xdt:untypedAtomic";
	$asm07.System.Xml.Schema.XmlUntypedStringConverter.Instance = new $asm07.System.Xml.Schema.XmlUntypedStringConverter(true);
};

$asm07.System.Xml.Schema.XsdDateTime.prototype._ctor$0 = function (text, kinds) {
	JSIL.CopyMembers(new $asm07.System.Xml.Schema.XsdDateTime(), this);
	var parser = new $asm07.System.Xml.Schema.XsdDateTime.Parser();
	if (!parser.Parse(text, kinds)) {
		throw JSIL.New(System.FormatException, "_ctor$1", [$asm07.System.Xml.Res.GetString$0("XmlConvert_BadFormat", [text, kinds])]);
	}
	this.InitiateXsdDateTime(parser.MemberwiseClone());
};
$asm07.System.Xml.Schema.XsdDateTime.prototype.InitiateXsdDateTime = function (parser) {
	this.dt = JSIL.New(System.DateTime, "_ctor$6", [parser.year, parser.month, parser.day, parser.hour, parser.minute, parser.second]);
	if (parser.fraction !== 0) {
		this.dt = this.dt.AddTicks(parser.fraction).MemberwiseClone();
	}
	this.extra = ((((parser.typeCode << 24) | (parser.kind << 16)) | (parser.zoneHour << 8)) | parser.zoneMinute);
};
$asm07.System.Xml.Schema.XsdDateTime.prototype._ctor$1 = function (dateTime, kinds) {
	this.dt = dateTime.MemberwiseClone();
	var dateTimeTypeCode = ($asm07.System.Xml.Bits.LeastPosition(Math.floor(kinds)) - 1);
	var num = 0;
	var num2 = 0;
	switch (Number(dateTime.Kind)) {
		case 0: 
			var xsdDateTimeKind = $asm07.System.Xml.Schema.XsdDateTime.XsdDateTimeKind.Unspecified;
			break;
		case 1: 
			xsdDateTimeKind = $asm07.System.Xml.Schema.XsdDateTime.XsdDateTimeKind.Zulu;
			break;
		default: 
			var utcOffset = System.TimeZoneInfo.Local.GetUtcOffset$1(dateTime.MemberwiseClone()).MemberwiseClone();
			if (utcOffset.Ticks < 0) {
				xsdDateTimeKind = $asm07.System.Xml.Schema.XsdDateTime.XsdDateTimeKind.LocalWestOfZulu;
				num = -utcOffset.Hours;
				num2 = -utcOffset.Minutes;
			} else {
				xsdDateTimeKind = $asm07.System.Xml.Schema.XsdDateTime.XsdDateTimeKind.LocalEastOfZulu;
				num = utcOffset.Hours;
				num2 = utcOffset.Minutes;
			}
			break;
	}
	this.extra = ((((Math.floor(dateTimeTypeCode) << 24) | (Math.floor(xsdDateTimeKind) << 16)) | (num << 8)) | num2);
};
$asm07.System.Xml.Schema.XsdDateTime.prototype._ctor$2 = function (dateTimeOffset) {
	this._ctor$3(dateTimeOffset, $asm07.System.Xml.Schema.XsdDateTimeFlags.DateTime);
};
$asm07.System.Xml.Schema.XsdDateTime.prototype._ctor$3 = function (dateTimeOffset, kinds) {
	this.dt = dateTimeOffset.DateTime.MemberwiseClone();
	var timeSpan = dateTimeOffset.Offset.MemberwiseClone();
	var dateTimeTypeCode = ($asm07.System.Xml.Bits.LeastPosition(Math.floor(kinds)) - 1);
	if (timeSpan.TotalMinutes < 0) {
		timeSpan = timeSpan.Negate().MemberwiseClone();
		var xsdDateTimeKind = $asm07.System.Xml.Schema.XsdDateTime.XsdDateTimeKind.LocalWestOfZulu;
	} else if (timeSpan.TotalMinutes > 0) {
		xsdDateTimeKind = $asm07.System.Xml.Schema.XsdDateTime.XsdDateTimeKind.LocalEastOfZulu;
	} else {
		xsdDateTimeKind = $asm07.System.Xml.Schema.XsdDateTime.XsdDateTimeKind.Zulu;
	}
	this.extra = ((((Math.floor(dateTimeTypeCode) << 24) | (Math.floor(xsdDateTimeKind) << 16)) | (timeSpan.Hours << 8)) | timeSpan.Minutes);
};
$asm07.System.Xml.Schema.XsdDateTime.prototype.get_InternalTypeCode = function () {
	return ((this.extra & -16777216) >>> 24);
};
$asm07.System.Xml.Schema.XsdDateTime.prototype.get_InternalKind = function () {
	return ((this.extra & 16711680) >>> 16);
};
$asm07.System.Xml.Schema.XsdDateTime.prototype.get_Year = function () {
	return this.dt.Year;
};
$asm07.System.Xml.Schema.XsdDateTime.prototype.get_Month = function () {
	return this.dt.Month;
};
$asm07.System.Xml.Schema.XsdDateTime.prototype.get_Day = function () {
	return this.dt.Day;
};
$asm07.System.Xml.Schema.XsdDateTime.prototype.get_Hour = function () {
	return this.dt.Hour;
};
$asm07.System.Xml.Schema.XsdDateTime.prototype.get_Minute = function () {
	return this.dt.Minute;
};
$asm07.System.Xml.Schema.XsdDateTime.prototype.get_Second = function () {
	return this.dt.Second;
};
$asm07.System.Xml.Schema.XsdDateTime.prototype.get_Fraction = function () {
	return (this.dt.Ticks - JSIL.New(System.DateTime, "_ctor$6", [this.dt.Year, this.dt.Month, this.dt.Day, this.dt.Hour, this.dt.Minute, this.dt.Second]).Ticks);
};
$asm07.System.Xml.Schema.XsdDateTime.prototype.get_ZoneHour = function () {
	return ((this.extra & 65280) >>> 8);
};
$asm07.System.Xml.Schema.XsdDateTime.prototype.get_ZoneMinute = function () {
	return (this.extra & 255);
};
$asm07.System.Xml.Schema.XsdDateTime.op_Implicit$0 = function (xdt) {
	var internalTypeCode = xdt.InternalTypeCode;
	if (internalTypeCode !== $asm07.System.Xml.Schema.XsdDateTime.DateTimeTypeCode.Time) {
		switch (Number(internalTypeCode)) {
			case 6: 
			case 7: 
				result._ctor$4(System.DateTime.Now.Year, xdt.Month, xdt.Day);
				break;
			default: 
				var result = xdt.dt.MemberwiseClone();
				break;
		}
	} else {
		var now = System.DateTime.Now.MemberwiseClone();
		var value = System.DateTime.op_Subtraction$1(JSIL.New(System.DateTime, "_ctor$4", [now.Year, now.Month, now.Day]), JSIL.New(System.DateTime, "_ctor$4", [xdt.Year, xdt.Month, xdt.Day])).MemberwiseClone();
		result = xdt.dt.Add$0(value.MemberwiseClone()).MemberwiseClone();
	}
	switch (Number(xdt.InternalKind)) {
		case 1: 
			result._ctor$2(result.Ticks, System.DateTimeKind.Utc);
			break;
		case 2: 
			try {
				result = result.Add$0(JSIL.New(System.TimeSpan, "_ctor$1", [xdt.ZoneHour, xdt.ZoneMinute, 0])).MemberwiseClone();
			} catch ($exception) {
				if (JSIL.CheckType($exception, System.ArgumentOutOfRangeException)) {
					var result2 = JSIL.New(System.DateTime, "_ctor$2", [System.DateTime.MaxValue.Ticks, System.DateTimeKind.Local]);
					return result2;
				} else {
					throw $exception;
				}
			}
			result = (JSIL.New(System.DateTime, "_ctor$2", [result.Ticks, System.DateTimeKind.Utc])).ToLocalTime().MemberwiseClone();
			break;
		case 3: 
			try {
				result = result.Subtract$1(JSIL.New(System.TimeSpan, "_ctor$1", [xdt.ZoneHour, xdt.ZoneMinute, 0])).MemberwiseClone();
			} catch ($exception) {
				if (JSIL.CheckType($exception, System.ArgumentOutOfRangeException)) {
					result2 = JSIL.New(System.DateTime, "_ctor$2", [System.DateTime.MinValue.Ticks, System.DateTimeKind.Local]);
					return result2;
				} else {
					throw $exception;
				}
			}
			result = (JSIL.New(System.DateTime, "_ctor$2", [result.Ticks, System.DateTimeKind.Utc])).ToLocalTime().MemberwiseClone();
			break;
	}
	return result;
};
$asm07.System.Xml.Schema.XsdDateTime.op_Implicit$1 = function (xdt) {
	var result = new System.DateTimeOffset();
	var internalTypeCode = xdt.InternalTypeCode;
	if (internalTypeCode !== $asm07.System.Xml.Schema.XsdDateTime.DateTimeTypeCode.Time) {
		switch (Number(internalTypeCode)) {
			case 6: 
			case 7: 
				dateTime._ctor$4(System.DateTime.Now.Year, xdt.Month, xdt.Day);
				break;
			default: 
				var dateTime = xdt.dt.MemberwiseClone();
				break;
		}
	} else {
		var now = System.DateTime.Now.MemberwiseClone();
		var value = System.DateTime.op_Subtraction$1(JSIL.New(System.DateTime, "_ctor$4", [now.Year, now.Month, now.Day]), JSIL.New(System.DateTime, "_ctor$4", [xdt.Year, xdt.Month, xdt.Day])).MemberwiseClone();
		dateTime = xdt.dt.Add$0(value.MemberwiseClone()).MemberwiseClone();
	}
	switch (Number(xdt.InternalKind)) {
		case 1: 
			result._ctor$2(dateTime.MemberwiseClone(), JSIL.New(System.TimeSpan, "_ctor$0", [0]));
			return result;
		case 2: 
			result._ctor$2(dateTime.MemberwiseClone(), JSIL.New(System.TimeSpan, "_ctor$1", [-xdt.ZoneHour, -xdt.ZoneMinute, 0]));
			return result;
		case 3: 
			result._ctor$2(dateTime.MemberwiseClone(), JSIL.New(System.TimeSpan, "_ctor$1", [xdt.ZoneHour, xdt.ZoneMinute, 0]));
			return result;
	}
	result._ctor$2(dateTime.MemberwiseClone(), System.TimeZoneInfo.Local.GetUtcOffset$1(dateTime.MemberwiseClone()).MemberwiseClone());
	return result;
};
$asm07.System.Xml.Schema.XsdDateTime.prototype.toString = function () {
	var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$1", [64]);
	switch (Number(this.InternalTypeCode)) {
		case 0: 
			this.PrintDate(stringBuilder);
			stringBuilder.Append$7("T");
			this.PrintTime(stringBuilder);
			break;
		case 1: 
			this.PrintTime(stringBuilder);
			break;
		case 2: 
			this.PrintDate(stringBuilder);
			break;
		case 3: 
			var array = JSIL.Array.New(System.Char, $asm07.System.Xml.Schema.XsdDateTime.Lzyyyy_MM);
			this.IntToCharArray(array, 0, this.Year, 4);
			array[$asm07.System.Xml.Schema.XsdDateTime.Lzyyyy] = "-";
			this.ShortToCharArray(array, $asm07.System.Xml.Schema.XsdDateTime.Lzyyyy_, this.Month);
			stringBuilder.Append$17(array);
			break;
		case 4: 
			array = JSIL.Array.New(System.Char, $asm07.System.Xml.Schema.XsdDateTime.Lzyyyy);
			this.IntToCharArray(array, 0, this.Year, 4);
			stringBuilder.Append$17(array);
			break;
		case 5: 
			array = JSIL.Array.New(System.Char, $asm07.System.Xml.Schema.XsdDateTime.Lz__mm_dd);
			array[0] = "-";
			array[$asm07.System.Xml.Schema.XsdDateTime.Lz_] = "-";
			this.ShortToCharArray(array, $asm07.System.Xml.Schema.XsdDateTime.Lz__, this.Month);
			array[$asm07.System.Xml.Schema.XsdDateTime.Lz__mm] = "-";
			this.ShortToCharArray(array, $asm07.System.Xml.Schema.XsdDateTime.Lz__mm_, this.Day);
			stringBuilder.Append$17(array);
			break;
		case 6: 
			array = JSIL.Array.New(System.Char, $asm07.System.Xml.Schema.XsdDateTime.Lz___dd);
			array[0] = "-";
			array[$asm07.System.Xml.Schema.XsdDateTime.Lz_] = "-";
			array[$asm07.System.Xml.Schema.XsdDateTime.Lz__] = "-";
			this.ShortToCharArray(array, $asm07.System.Xml.Schema.XsdDateTime.Lz___, this.Day);
			stringBuilder.Append$17(array);
			break;
		case 7: 
			array = JSIL.Array.New(System.Char, $asm07.System.Xml.Schema.XsdDateTime.Lz__mm__);
			array[0] = "-";
			array[$asm07.System.Xml.Schema.XsdDateTime.Lz_] = "-";
			this.ShortToCharArray(array, $asm07.System.Xml.Schema.XsdDateTime.Lz__, this.Month);
			array[$asm07.System.Xml.Schema.XsdDateTime.Lz__mm] = "-";
			array[$asm07.System.Xml.Schema.XsdDateTime.Lz__mm_] = "-";
			stringBuilder.Append$17(array);
			break;
	}
	this.PrintZone(stringBuilder);
	return stringBuilder.toString();
};
$asm07.System.Xml.Schema.XsdDateTime.prototype.PrintDate = function (sb) {
	var array = JSIL.Array.New(System.Char, $asm07.System.Xml.Schema.XsdDateTime.Lzyyyy_MM_dd);
	this.IntToCharArray(array, 0, this.Year, 4);
	array[$asm07.System.Xml.Schema.XsdDateTime.Lzyyyy] = "-";
	this.ShortToCharArray(array, $asm07.System.Xml.Schema.XsdDateTime.Lzyyyy_, this.Month);
	array[$asm07.System.Xml.Schema.XsdDateTime.Lzyyyy_MM] = "-";
	this.ShortToCharArray(array, $asm07.System.Xml.Schema.XsdDateTime.Lzyyyy_MM_, this.Day);
	sb.Append$17(array);
};
$asm07.System.Xml.Schema.XsdDateTime.prototype.PrintTime = function (sb) {
	var array = JSIL.Array.New(System.Char, $asm07.System.Xml.Schema.XsdDateTime.LzHH_mm_ss);
	this.ShortToCharArray(array, 0, this.Hour);
	array[$asm07.System.Xml.Schema.XsdDateTime.LzHH] = ":";
	this.ShortToCharArray(array, $asm07.System.Xml.Schema.XsdDateTime.LzHH_, this.Minute);
	array[$asm07.System.Xml.Schema.XsdDateTime.LzHH_mm] = ":";
	this.ShortToCharArray(array, $asm07.System.Xml.Schema.XsdDateTime.LzHH_mm_, this.Second);
	sb.Append$17(array);
	var num = this.Fraction;
	if (num !== 0) {
		var num2 = 7;
	__loop0__: 
		while (!(num % 10)) {
			--num2;
			num = Math.floor(num / 10);
		}
		array = JSIL.Array.New(System.Char, (num2 + 1));
		array[0] = ".";
		this.IntToCharArray(array, 1, num, num2);
		sb.Append$17(array);
	}
};
$asm07.System.Xml.Schema.XsdDateTime.prototype.PrintZone = function (sb) {
	switch (Number(this.InternalKind)) {
		case 1: 
			sb.Append$7("Z");
			return;
		case 2: 
			var array = JSIL.Array.New(System.Char, $asm07.System.Xml.Schema.XsdDateTime.Lz_zz_zz);
			array[0] = "-";
			this.ShortToCharArray(array, $asm07.System.Xml.Schema.XsdDateTime.Lz_, this.ZoneHour);
			array[$asm07.System.Xml.Schema.XsdDateTime.Lz_zz] = ":";
			this.ShortToCharArray(array, $asm07.System.Xml.Schema.XsdDateTime.Lz_zz_, this.ZoneMinute);
			sb.Append$17(array);
			return;
		case 3: 
			array = JSIL.Array.New(System.Char, $asm07.System.Xml.Schema.XsdDateTime.Lz_zz_zz);
			array[0] = "+";
			this.ShortToCharArray(array, $asm07.System.Xml.Schema.XsdDateTime.Lz_, this.ZoneHour);
			array[$asm07.System.Xml.Schema.XsdDateTime.Lz_zz] = ":";
			this.ShortToCharArray(array, $asm07.System.Xml.Schema.XsdDateTime.Lz_zz_, this.ZoneMinute);
			sb.Append$17(array);
			return;
		default: 
			return;
	}
};
$asm07.System.Xml.Schema.XsdDateTime.prototype.IntToCharArray = function (text, start, value, digits) {
__loop0__: 
	while (digits--) {
		text[(start + digits)] = ((value % 10) + 48);
		value = Math.floor(value / 10);
	}
};
$asm07.System.Xml.Schema.XsdDateTime.prototype.ShortToCharArray = function (text, start, value) {
	text[start] = (Math.floor(value / 10) + 48);
	text[(start + 1)] = ((value % 10) + 48);
};
JSIL.OverloadedMethod($asm07.System.Xml.Schema.XsdDateTime.prototype, "_ctor", [
		["_ctor$0", [System.String, $asm07.System.Xml.Schema.XsdDateTimeFlags]], 
		["_ctor$1", [System.DateTime, $asm07.System.Xml.Schema.XsdDateTimeFlags]], 
		["_ctor$2", [System.DateTimeOffset]], 
		["_ctor$3", [System.DateTimeOffset, $asm07.System.Xml.Schema.XsdDateTimeFlags]]
	]);
JSIL.OverloadedMethod($asm07.System.Xml.Schema.XsdDateTime, "op_Implicit", [
		["op_Implicit$0", [$asm07.System.Xml.Schema.XsdDateTime]], 
		["op_Implicit$1", [$asm07.System.Xml.Schema.XsdDateTime]]
	]);
JSIL.MakeProperty($asm07.System.Xml.Schema.XsdDateTime.prototype, "InternalTypeCode", 
	$asm07.System.Xml.Schema.XsdDateTime.prototype.get_InternalTypeCode, null);
JSIL.MakeProperty($asm07.System.Xml.Schema.XsdDateTime.prototype, "InternalKind", 
	$asm07.System.Xml.Schema.XsdDateTime.prototype.get_InternalKind, null);
JSIL.MakeProperty($asm07.System.Xml.Schema.XsdDateTime.prototype, "Year", 
	$asm07.System.Xml.Schema.XsdDateTime.prototype.get_Year, null);
JSIL.MakeProperty($asm07.System.Xml.Schema.XsdDateTime.prototype, "Month", 
	$asm07.System.Xml.Schema.XsdDateTime.prototype.get_Month, null);
JSIL.MakeProperty($asm07.System.Xml.Schema.XsdDateTime.prototype, "Day", 
	$asm07.System.Xml.Schema.XsdDateTime.prototype.get_Day, null);
JSIL.MakeProperty($asm07.System.Xml.Schema.XsdDateTime.prototype, "Hour", 
	$asm07.System.Xml.Schema.XsdDateTime.prototype.get_Hour, null);
JSIL.MakeProperty($asm07.System.Xml.Schema.XsdDateTime.prototype, "Minute", 
	$asm07.System.Xml.Schema.XsdDateTime.prototype.get_Minute, null);
JSIL.MakeProperty($asm07.System.Xml.Schema.XsdDateTime.prototype, "Second", 
	$asm07.System.Xml.Schema.XsdDateTime.prototype.get_Second, null);
JSIL.MakeProperty($asm07.System.Xml.Schema.XsdDateTime.prototype, "Fraction", 
	$asm07.System.Xml.Schema.XsdDateTime.prototype.get_Fraction, null);
JSIL.MakeProperty($asm07.System.Xml.Schema.XsdDateTime.prototype, "ZoneHour", 
	$asm07.System.Xml.Schema.XsdDateTime.prototype.get_ZoneHour, null);
JSIL.MakeProperty($asm07.System.Xml.Schema.XsdDateTime.prototype, "ZoneMinute", 
	$asm07.System.Xml.Schema.XsdDateTime.prototype.get_ZoneMinute, null);
Object.defineProperty($asm07.System.Xml.Schema.XsdDateTime, "TypeMask", {
		"value": 4278190080}
);
Object.defineProperty($asm07.System.Xml.Schema.XsdDateTime, "KindMask", {
		"value": 16711680}
);
Object.defineProperty($asm07.System.Xml.Schema.XsdDateTime, "ZoneHourMask", {
		"value": 65280}
);
Object.defineProperty($asm07.System.Xml.Schema.XsdDateTime, "ZoneMinuteMask", {
		"value": 255}
);
Object.defineProperty($asm07.System.Xml.Schema.XsdDateTime, "TypeShift", {
		"value": 24}
);
Object.defineProperty($asm07.System.Xml.Schema.XsdDateTime, "KindShift", {
		"value": 16}
);
Object.defineProperty($asm07.System.Xml.Schema.XsdDateTime, "ZoneHourShift", {
		"value": 8}
);
Object.defineProperty($asm07.System.Xml.Schema.XsdDateTime, "maxFractionDigits", {
		"value": 7}
);
$asm07.System.Xml.Schema.XsdDateTime.prototype.extra = 0;
$asm07.System.Xml.Schema.XsdDateTime.Lzyyyy = 0;
$asm07.System.Xml.Schema.XsdDateTime.Lzyyyy_ = 0;
$asm07.System.Xml.Schema.XsdDateTime.Lzyyyy_MM = 0;
$asm07.System.Xml.Schema.XsdDateTime.Lzyyyy_MM_ = 0;
$asm07.System.Xml.Schema.XsdDateTime.Lzyyyy_MM_dd = 0;
$asm07.System.Xml.Schema.XsdDateTime.Lzyyyy_MM_ddT = 0;
$asm07.System.Xml.Schema.XsdDateTime.LzHH = 0;
$asm07.System.Xml.Schema.XsdDateTime.LzHH_ = 0;
$asm07.System.Xml.Schema.XsdDateTime.LzHH_mm = 0;
$asm07.System.Xml.Schema.XsdDateTime.LzHH_mm_ = 0;
$asm07.System.Xml.Schema.XsdDateTime.LzHH_mm_ss = 0;
$asm07.System.Xml.Schema.XsdDateTime.Lz_ = 0;
$asm07.System.Xml.Schema.XsdDateTime.Lz_zz = 0;
$asm07.System.Xml.Schema.XsdDateTime.Lz_zz_ = 0;
$asm07.System.Xml.Schema.XsdDateTime.Lz_zz_zz = 0;
$asm07.System.Xml.Schema.XsdDateTime.Lz__ = 0;
$asm07.System.Xml.Schema.XsdDateTime.Lz__mm = 0;
$asm07.System.Xml.Schema.XsdDateTime.Lz__mm_ = 0;
$asm07.System.Xml.Schema.XsdDateTime.Lz__mm__ = 0;
$asm07.System.Xml.Schema.XsdDateTime.Lz__mm_dd = 0;
$asm07.System.Xml.Schema.XsdDateTime.Lz___ = 0;
$asm07.System.Xml.Schema.XsdDateTime.Lz___dd = 0;
$asm07.System.Xml.Schema.XsdDateTime.typeCodes = 0;
$asm07.System.Xml.Schema.XsdDateTime._cctor = function () {
	$asm07.System.Xml.Schema.XsdDateTime.Lzyyyy = "yyyy".length;
	$asm07.System.Xml.Schema.XsdDateTime.Lzyyyy_ = "yyyy-".length;
	$asm07.System.Xml.Schema.XsdDateTime.Lzyyyy_MM = "yyyy-MM".length;
	$asm07.System.Xml.Schema.XsdDateTime.Lzyyyy_MM_ = "yyyy-MM-".length;
	$asm07.System.Xml.Schema.XsdDateTime.Lzyyyy_MM_dd = "yyyy-MM-dd".length;
	$asm07.System.Xml.Schema.XsdDateTime.Lzyyyy_MM_ddT = "yyyy-MM-ddT".length;
	$asm07.System.Xml.Schema.XsdDateTime.LzHH = "HH".length;
	$asm07.System.Xml.Schema.XsdDateTime.LzHH_ = "HH:".length;
	$asm07.System.Xml.Schema.XsdDateTime.LzHH_mm = "HH:mm".length;
	$asm07.System.Xml.Schema.XsdDateTime.LzHH_mm_ = "HH:mm:".length;
	$asm07.System.Xml.Schema.XsdDateTime.LzHH_mm_ss = "HH:mm:ss".length;
	$asm07.System.Xml.Schema.XsdDateTime.Lz_ = "-".length;
	$asm07.System.Xml.Schema.XsdDateTime.Lz_zz = "-zz".length;
	$asm07.System.Xml.Schema.XsdDateTime.Lz_zz_ = "-zz:".length;
	$asm07.System.Xml.Schema.XsdDateTime.Lz_zz_zz = "-zz:zz".length;
	$asm07.System.Xml.Schema.XsdDateTime.Lz__ = "--".length;
	$asm07.System.Xml.Schema.XsdDateTime.Lz__mm = "--MM".length;
	$asm07.System.Xml.Schema.XsdDateTime.Lz__mm_ = "--MM-".length;
	$asm07.System.Xml.Schema.XsdDateTime.Lz__mm__ = "--MM--".length;
	$asm07.System.Xml.Schema.XsdDateTime.Lz__mm_dd = "--MM-dd".length;
	$asm07.System.Xml.Schema.XsdDateTime.Lz___ = "---".length;
	$asm07.System.Xml.Schema.XsdDateTime.Lz___dd = "---dd".length;
	$asm07.System.Xml.Schema.XsdDateTime.typeCodes = JSIL.Array.New(System.Xml.Schema.XmlTypeCode, [System.Xml.Schema.XmlTypeCode.DateTime, System.Xml.Schema.XmlTypeCode.Time, System.Xml.Schema.XmlTypeCode.Date, System.Xml.Schema.XmlTypeCode.GYearMonth, System.Xml.Schema.XmlTypeCode.GYear, System.Xml.Schema.XmlTypeCode.GMonthDay, System.Xml.Schema.XmlTypeCode.GDay, System.Xml.Schema.XmlTypeCode.GMonth]);
};

$asm07.System.Xml.Schema.XsdDateTime.Parser.prototype.Parse = function (text, kinds) {
	this.text = text;
	this.length = text.length;
__loop0__: 
	for (var num = 0; (num < this.length) && System.Char.IsWhiteSpace$0(text[num]); ++num) {
	}
	if (!(!$asm07.System.Xml.Schema.XsdDateTime.Parser.Test(kinds, ($asm07.System.Xml.Schema.XsdDateTimeFlags.Date | $asm07.System.Xml.Schema.XsdDateTimeFlags.DateTime)) || !this.ParseDate(num))) {
		if (!(!$asm07.System.Xml.Schema.XsdDateTime.Parser.Test(kinds, $asm07.System.Xml.Schema.XsdDateTimeFlags.DateTime) || 
				!this.ParseChar((num + $asm07.System.Xml.Schema.XsdDateTime.Lzyyyy_MM_dd), "T") || !this.ParseTimeAndZoneAndWhitespace((num + $asm07.System.Xml.Schema.XsdDateTime.Lzyyyy_MM_ddT)))) {
			this.typeCode = $asm07.System.Xml.Schema.XsdDateTime.DateTimeTypeCode.DateTime;
			return true;
		}
		if (!(!$asm07.System.Xml.Schema.XsdDateTime.Parser.Test(kinds, $asm07.System.Xml.Schema.XsdDateTimeFlags.Date) || !this.ParseZoneAndWhitespace((num + $asm07.System.Xml.Schema.XsdDateTime.Lzyyyy_MM_dd)))) {
			this.typeCode = $asm07.System.Xml.Schema.XsdDateTime.DateTimeTypeCode.Date;
			return true;
		}
	}
	if (!(!$asm07.System.Xml.Schema.XsdDateTime.Parser.Test(kinds, $asm07.System.Xml.Schema.XsdDateTimeFlags.Time) || !this.ParseTimeAndZoneAndWhitespace(num))) {
		this.year = 1904;
		this.month = 1;
		this.day = 1;
		this.typeCode = $asm07.System.Xml.Schema.XsdDateTime.DateTimeTypeCode.Time;
		return true;
	}
	if (!(!$asm07.System.Xml.Schema.XsdDateTime.Parser.Test(kinds, ($asm07.System.Xml.Schema.XsdDateTimeFlags.GYear | $asm07.System.Xml.Schema.XsdDateTimeFlags.GYearMonth)) || 
			!this.Parse4Dig(num, /* ref */ new JSIL.MemberReference(this, "year")) || (1 > this.year))) {
		if (!(!$asm07.System.Xml.Schema.XsdDateTime.Parser.Test(kinds, $asm07.System.Xml.Schema.XsdDateTimeFlags.GYearMonth) || 
				!this.ParseChar((num + $asm07.System.Xml.Schema.XsdDateTime.Lzyyyy), "-") || 
				!this.Parse2Dig((num + $asm07.System.Xml.Schema.XsdDateTime.Lzyyyy_), /* ref */ new JSIL.MemberReference(this, "month")) || 
				(1 > this.month) || 
				(this.month > 12) || !this.ParseZoneAndWhitespace((num + $asm07.System.Xml.Schema.XsdDateTime.Lzyyyy_MM)))) {
			this.day = 1;
			this.typeCode = $asm07.System.Xml.Schema.XsdDateTime.DateTimeTypeCode.GYearMonth;
			return true;
		}
		if (!(!$asm07.System.Xml.Schema.XsdDateTime.Parser.Test(kinds, $asm07.System.Xml.Schema.XsdDateTimeFlags.GYear) || !this.ParseZoneAndWhitespace((num + $asm07.System.Xml.Schema.XsdDateTime.Lzyyyy)))) {
			this.month = 1;
			this.day = 1;
			this.typeCode = $asm07.System.Xml.Schema.XsdDateTime.DateTimeTypeCode.GYear;
			return true;
		}
	}
	if (!(!$asm07.System.Xml.Schema.XsdDateTime.Parser.Test(kinds, ($asm07.System.Xml.Schema.XsdDateTimeFlags.GMonth | $asm07.System.Xml.Schema.XsdDateTimeFlags.GMonthDay)) || 
			!this.ParseChar(num, "-") || 
			!this.ParseChar((num + $asm07.System.Xml.Schema.XsdDateTime.Lz_), "-") || 
			!this.Parse2Dig((num + $asm07.System.Xml.Schema.XsdDateTime.Lz__), /* ref */ new JSIL.MemberReference(this, "month")) || 
			(1 > this.month) || (this.month > 12))) {
		if (!(!$asm07.System.Xml.Schema.XsdDateTime.Parser.Test(kinds, $asm07.System.Xml.Schema.XsdDateTimeFlags.GMonthDay) || 
				!this.ParseChar((num + $asm07.System.Xml.Schema.XsdDateTime.Lz__mm), "-") || 
				!this.Parse2Dig((num + $asm07.System.Xml.Schema.XsdDateTime.Lz__mm_), /* ref */ new JSIL.MemberReference(this, "day")) || 
				(1 > this.day) || 
				(this.day > System.DateTime.DaysInMonth(1904, this.month)) || !this.ParseZoneAndWhitespace((num + $asm07.System.Xml.Schema.XsdDateTime.Lz__mm_dd)))) {
			this.year = 1904;
			this.typeCode = $asm07.System.Xml.Schema.XsdDateTime.DateTimeTypeCode.GMonthDay;
			return true;
		}
		if (!(!$asm07.System.Xml.Schema.XsdDateTime.Parser.Test(kinds, $asm07.System.Xml.Schema.XsdDateTimeFlags.GMonth) || (!this.ParseZoneAndWhitespace((num + $asm07.System.Xml.Schema.XsdDateTime.Lz__mm)) && 
					(!this.ParseChar((num + $asm07.System.Xml.Schema.XsdDateTime.Lz__mm), "-") || 
						!this.ParseChar((num + $asm07.System.Xml.Schema.XsdDateTime.Lz__mm_), "-") || 
						!this.ParseZoneAndWhitespace((num + $asm07.System.Xml.Schema.XsdDateTime.Lz__mm__)))))) {
			this.year = 1904;
			this.day = 1;
			this.typeCode = $asm07.System.Xml.Schema.XsdDateTime.DateTimeTypeCode.GMonth;
			return true;
		}
	}
	if (!(!$asm07.System.Xml.Schema.XsdDateTime.Parser.Test(kinds, $asm07.System.Xml.Schema.XsdDateTimeFlags.GDay) || 
			!this.ParseChar(num, "-") || 
			!this.ParseChar((num + $asm07.System.Xml.Schema.XsdDateTime.Lz_), "-") || 
			!this.ParseChar((num + $asm07.System.Xml.Schema.XsdDateTime.Lz__), "-") || 
			!this.Parse2Dig((num + $asm07.System.Xml.Schema.XsdDateTime.Lz___), /* ref */ new JSIL.MemberReference(this, "day")) || 
			(1 > this.day) || 
			(this.day > System.DateTime.DaysInMonth(1904, 1)) || !this.ParseZoneAndWhitespace((num + $asm07.System.Xml.Schema.XsdDateTime.Lz___dd)))) {
		this.year = 1904;
		this.month = 1;
		this.typeCode = $asm07.System.Xml.Schema.XsdDateTime.DateTimeTypeCode.GDay;
		return true;
	}
	return false;
};
$asm07.System.Xml.Schema.XsdDateTime.Parser.prototype.ParseDate = function (start) {
	return (!(!this.Parse4Dig(start, /* ref */ new JSIL.MemberReference(this, "year")) || 
			(1 > this.year) || 
			!this.ParseChar((start + $asm07.System.Xml.Schema.XsdDateTime.Lzyyyy), "-") || 
			!this.Parse2Dig((start + $asm07.System.Xml.Schema.XsdDateTime.Lzyyyy_), /* ref */ new JSIL.MemberReference(this, "month")) || 
			(1 > this.month) || 
			(this.month > 12) || 
			!this.ParseChar((start + $asm07.System.Xml.Schema.XsdDateTime.Lzyyyy_MM), "-") || 
			!this.Parse2Dig((start + $asm07.System.Xml.Schema.XsdDateTime.Lzyyyy_MM_), /* ref */ new JSIL.MemberReference(this, "day")) || 
			(1 > this.day)) && (this.day <= System.DateTime.DaysInMonth(this.year, this.month)));
};
$asm07.System.Xml.Schema.XsdDateTime.Parser.prototype.ParseTimeAndZoneAndWhitespace = function ($start) {
	var start = new JSIL.Variable($start);
	return !(!this.ParseTime(/* ref */ start) || !this.ParseZoneAndWhitespace(start.value));
};
$asm07.System.Xml.Schema.XsdDateTime.Parser.prototype.ParseTime = function (/* ref */ start) {
	if (!(!this.Parse2Dig(start.value, /* ref */ new JSIL.MemberReference(this, "hour")) || 
			(this.hour >= 24) || 
			!this.ParseChar((start.value + $asm07.System.Xml.Schema.XsdDateTime.LzHH), ":") || 
			!this.Parse2Dig((start.value + $asm07.System.Xml.Schema.XsdDateTime.LzHH_), /* ref */ new JSIL.MemberReference(this, "minute")) || 
			(this.minute >= 60) || 
			!this.ParseChar((start.value + $asm07.System.Xml.Schema.XsdDateTime.LzHH_mm), ":") || 
			!this.Parse2Dig((start.value + $asm07.System.Xml.Schema.XsdDateTime.LzHH_mm_), /* ref */ new JSIL.MemberReference(this, "second")) || (this.second >= 60))) {
		start.value += $asm07.System.Xml.Schema.XsdDateTime.LzHH_mm_ss;
		if (this.ParseChar(start.value, ".")) {
			this.fraction = 0;
			var num = 0;
			var num2 = 0;
		__loop0__: 
			while (++start.value < this.length) {
				var num3 = ((this.text[start.value]) - "0");
				if (9 < num3) {
					break __loop0__;
				}
				if (num < 7) {
					this.fraction = ((this.fraction * 10) + num3);
				} else if (num === 7) {
					if (5 < num3) {
						num2 = 1;
					} else if (num3 === 5) {
						num2 = -1;
					}
				} else if (!((num2 >= 0) || (num3 === 0))) {
					num2 = 1;
				}
				++num;
			}
			if (num < 7) {
				if (num === 0) {
					return false;
				}
				this.fraction *= $asm07.System.Xml.Schema.XsdDateTime.Parser.Power10[(7 - num)];
			} else {
				if (num2 < 0) {
					num2 = (this.fraction & 1);
				}
				this.fraction += num2;
			}
		}
		return true;
	}
	this.hour = 0;
	return false;
};
$asm07.System.Xml.Schema.XsdDateTime.Parser.prototype.ParseZoneAndWhitespace = function (start) {
	if (start < this.length) {
		var c = (this.text[start]);
		if (!((c !== "Z") && (c !== "z"))) {
			this.kind = $asm07.System.Xml.Schema.XsdDateTime.XsdDateTimeKind.Zulu;
			++start;
		} else if (!(((start + 5) >= this.length) || 
				!this.Parse2Dig((start + $asm07.System.Xml.Schema.XsdDateTime.Lz_), /* ref */ new JSIL.MemberReference(this, "zoneHour")) || 
				(this.zoneHour > 99) || 
				!this.ParseChar((start + $asm07.System.Xml.Schema.XsdDateTime.Lz_zz), ":") || 
				!this.Parse2Dig((start + $asm07.System.Xml.Schema.XsdDateTime.Lz_zz_), /* ref */ new JSIL.MemberReference(this, "zoneMinute")) || (this.zoneMinute > 99))) {
			if (c === "-") {
				this.kind = $asm07.System.Xml.Schema.XsdDateTime.XsdDateTimeKind.LocalWestOfZulu;
				start += $asm07.System.Xml.Schema.XsdDateTime.Lz_zz_zz;
			} else if (c === "+") {
				this.kind = $asm07.System.Xml.Schema.XsdDateTime.XsdDateTimeKind.LocalEastOfZulu;
				start += $asm07.System.Xml.Schema.XsdDateTime.Lz_zz_zz;
			}
		}
	}
__loop0__: 
	for (; (start < this.length) && System.Char.IsWhiteSpace$0(this.text[start]); ++start) {
	}
	return (start === this.length);
};
$asm07.System.Xml.Schema.XsdDateTime.Parser.prototype.Parse4Dig = function (start, /* ref */ num) {
	if ((start + 3) < this.length) {
		var num2 = ((this.text[start]) - "0");
		var num3 = ((this.text[(start + 1)]) - "0");
		var num4 = ((this.text[(start + 2)]) - "0");
		var num5 = ((this.text[(start + 3)]) - "0");
		if (!((0 > num2) || 
				(num2 >= 10) || 
				(0 > num3) || 
				(num3 >= 10) || 
				(0 > num4) || 
				(num4 >= 10) || 
				(0 > num5) || (num5 >= 10))) {
			num.value = ((((((num2 * 10) + num3) * 10) + num4) * 10) + num5);
			return true;
		}
	}
	return false;
};
$asm07.System.Xml.Schema.XsdDateTime.Parser.prototype.Parse2Dig = function (start, /* ref */ num) {
	if ((start + 1) < this.length) {
		var num2 = ((this.text[start]) - "0");
		var num3 = ((this.text[(start + 1)]) - "0");
		if (!((0 > num2) || 
				(num2 >= 10) || 
				(0 > num3) || (num3 >= 10))) {
			num.value = ((num2 * 10) + num3);
			return true;
		}
	}
	return false;
};
$asm07.System.Xml.Schema.XsdDateTime.Parser.prototype.ParseChar = function (start, ch) {
	return ((start < this.length) && ((this.text[start]) === ch));
};
$asm07.System.Xml.Schema.XsdDateTime.Parser.Test = function (left, right) {
	return ((left & right) !== 0);
};
Object.defineProperty($asm07.System.Xml.Schema.XsdDateTime.Parser, "leapYear", {
		"value": 1904}
);
Object.defineProperty($asm07.System.Xml.Schema.XsdDateTime.Parser, "firstMonth", {
		"value": 1}
);
Object.defineProperty($asm07.System.Xml.Schema.XsdDateTime.Parser, "firstDay", {
		"value": 1}
);
$asm07.System.Xml.Schema.XsdDateTime.Parser.prototype.typeCode = 0;
$asm07.System.Xml.Schema.XsdDateTime.Parser.prototype.year = 0;
$asm07.System.Xml.Schema.XsdDateTime.Parser.prototype.month = 0;
$asm07.System.Xml.Schema.XsdDateTime.Parser.prototype.day = 0;
$asm07.System.Xml.Schema.XsdDateTime.Parser.prototype.hour = 0;
$asm07.System.Xml.Schema.XsdDateTime.Parser.prototype.minute = 0;
$asm07.System.Xml.Schema.XsdDateTime.Parser.prototype.second = 0;
$asm07.System.Xml.Schema.XsdDateTime.Parser.prototype.fraction = 0;
$asm07.System.Xml.Schema.XsdDateTime.Parser.prototype.kind = 0;
$asm07.System.Xml.Schema.XsdDateTime.Parser.prototype.zoneHour = 0;
$asm07.System.Xml.Schema.XsdDateTime.Parser.prototype.zoneMinute = 0;
$asm07.System.Xml.Schema.XsdDateTime.Parser.prototype.text = null;
$asm07.System.Xml.Schema.XsdDateTime.Parser.prototype.length = 0;
$asm07.System.Xml.Schema.XsdDateTime.Parser.Power10 = null;
$asm07.System.Xml.Schema.XsdDateTime.Parser._cctor = function () {
	$asm07.System.Xml.Schema.XsdDateTime.Parser.Power10 = JSIL.Array.New(System.Int32, [-1, 10, 100, 1000, 10000, 100000, 1000000]);
};

$asm07.System.Xml.Schema.XsdDuration.prototype._ctor$0 = function (isNegative, years, months, days, hours, minutes, seconds, nanoseconds) {
	if (years < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["years"]);
	}
	if (months < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["months"]);
	}
	if (days < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["days"]);
	}
	if (hours < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["hours"]);
	}
	if (minutes < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["minutes"]);
	}
	if (seconds < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["seconds"]);
	}
	if (!((nanoseconds >= 0) && (nanoseconds <= 999999999))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["nanoseconds"]);
	}
	this.years = years;
	this.months = months;
	this.days = days;
	this.hours = hours;
	this.minutes = minutes;
	this.seconds = seconds;
	this.nanoseconds = nanoseconds;
	if (isNegative) {
		this.nanoseconds = (this.nanoseconds | -2147483648);
	}
};
$asm07.System.Xml.Schema.XsdDuration.prototype._ctor$1 = function (timeSpan) {
	this._ctor$2(timeSpan, $asm07.System.Xml.Schema.XsdDuration.DurationType.Duration);
};
$asm07.System.Xml.Schema.XsdDuration.prototype._ctor$2 = function (timeSpan, durationType) {
	var ticks = timeSpan.Ticks;
	if (ticks < 0) {
		var flag = true;
		var num = -ticks;
	} else {
		flag = false;
		num = ticks;
	}
	if (durationType === $asm07.System.Xml.Schema.XsdDuration.DurationType.YearMonthDuration) {
		var num2 = Math.floor(num / 315360000000000);
		var num3 = Math.floor((num % 315360000000000) / 25920000000000);
		if (num3 === 12) {
			++num2;
			num3 = 0;
		}
		JSIL.CopyMembers(JSIL.New($asm07.System.Xml.Schema.XsdDuration, "_ctor$0", [flag, num2, num3, 0, 0, 0, 0, 0]), this);
		return;
	}
	this.nanoseconds = ((num % 10000000) * 100);
	if (flag) {
		this.nanoseconds = (this.nanoseconds | -2147483648);
	}
	this.years = 0;
	this.months = 0;
	this.days = Math.floor(num / 864000000000);
	this.hours = (Math.floor(num / 36000000000) % 24);
	this.minutes = (Math.floor(num / 600000000) % 60);
	this.seconds = (Math.floor(num / 10000000) % 60);
};
$asm07.System.Xml.Schema.XsdDuration.prototype._ctor$3 = function (s) {
	this._ctor$4(s, $asm07.System.Xml.Schema.XsdDuration.DurationType.Duration);
};
$asm07.System.Xml.Schema.XsdDuration.prototype._ctor$4 = function (s, durationType) {
	var xsdDuration = new JSIL.Variable(new $asm07.System.Xml.Schema.XsdDuration());
	var exception = $asm07.System.Xml.Schema.XsdDuration.TryParse(s, durationType, /* ref */ xsdDuration);
	if (exception !== null) {
		throw exception;
	}
	this.years = xsdDuration.value.Years;
	this.months = xsdDuration.value.Months;
	this.days = xsdDuration.value.Days;
	this.hours = xsdDuration.value.Hours;
	this.minutes = xsdDuration.value.Minutes;
	this.seconds = xsdDuration.value.Seconds;
	this.nanoseconds = xsdDuration.value.Nanoseconds;
	if (xsdDuration.value.IsNegative) {
		this.nanoseconds = (this.nanoseconds | -2147483648);
	}
};
$asm07.System.Xml.Schema.XsdDuration.prototype.get_IsNegative = function () {
	return ((this.nanoseconds & -2147483648) !== 0);
};
$asm07.System.Xml.Schema.XsdDuration.prototype.get_Years = function () {
	return this.years;
};
$asm07.System.Xml.Schema.XsdDuration.prototype.get_Months = function () {
	return this.months;
};
$asm07.System.Xml.Schema.XsdDuration.prototype.get_Days = function () {
	return this.days;
};
$asm07.System.Xml.Schema.XsdDuration.prototype.get_Hours = function () {
	return this.hours;
};
$asm07.System.Xml.Schema.XsdDuration.prototype.get_Minutes = function () {
	return this.minutes;
};
$asm07.System.Xml.Schema.XsdDuration.prototype.get_Seconds = function () {
	return this.seconds;
};
$asm07.System.Xml.Schema.XsdDuration.prototype.get_Nanoseconds = function () {
	return (this.nanoseconds & 2147483647);
};
$asm07.System.Xml.Schema.XsdDuration.prototype.ToTimeSpan$0 = function () {
	return this.ToTimeSpan$1($asm07.System.Xml.Schema.XsdDuration.DurationType.Duration);
};
$asm07.System.Xml.Schema.XsdDuration.prototype.ToTimeSpan$1 = function (durationType) {
	var result = new JSIL.Variable(new System.TimeSpan());
	var exception = this.TryToTimeSpan(durationType, /* ref */ result);
	if (exception !== null) {
		throw exception;
	}
	return result.value;
};
$asm07.System.Xml.Schema.XsdDuration.prototype.TryToTimeSpan = function (durationType, /* ref */ result) {
	var result2 = null;
	var num = 0;
	try {
		if (durationType !== $asm07.System.Xml.Schema.XsdDuration.DurationType.DayTimeDuration) {
			num = JSIL.Cast(JSIL.UntranslatableInstruction("add.ovf.un:UInt64(ldloc:UInt64(num), mul.ovf.un:UInt64(add.ovf.un:UInt64(conv.ovf.u8:UInt64(ldfld:Int32[exp:UInt64](XsdDuration::years, ldloc:valuetype System.Xml.Schema.XsdDuration&[exp:XsdDuration](this))), div.un:UInt64(conv.ovf.u8:UInt64(ldfld:Int32[exp:UInt64](XsdDuration::months, ldloc:valuetype System.Xml.Schema.XsdDuration&[exp:XsdDuration](this))), ldc.i8:UInt64(12))), ldc.i8:UInt64(365)))"), System.UInt64);
			num = JSIL.Cast(JSIL.UntranslatableInstruction("add.ovf.un:UInt64(ldloc:UInt64(num), mul.ovf.un:UInt64(rem.un:UInt64(conv.ovf.u8:UInt64(ldfld:Int32[exp:UInt64](XsdDuration::months, ldloc:valuetype System.Xml.Schema.XsdDuration&[exp:XsdDuration](this))), ldc.i8:UInt64(12)), ldc.i8:UInt64(30)))"), System.UInt64);
		}
		if (durationType !== $asm07.System.Xml.Schema.XsdDuration.DurationType.YearMonthDuration) {
			num = JSIL.Cast(JSIL.UntranslatableInstruction("add.ovf.un:UInt64(ldloc:UInt64(num), conv.ovf.u8:UInt64(ldfld:Int32[exp:UInt64](XsdDuration::days, ldloc:valuetype System.Xml.Schema.XsdDuration&[exp:XsdDuration](this))))"), System.UInt64);
			num = JSIL.Cast(JSIL.UntranslatableInstruction("mul.ovf.un:UInt64(ldloc:UInt64(num), ldc.i8:UInt64(24))"), System.UInt64);
			num = JSIL.Cast(JSIL.UntranslatableInstruction("add.ovf.un:UInt64(ldloc:UInt64(num), conv.ovf.u8:UInt64(ldfld:Int32[exp:UInt64](XsdDuration::hours, ldloc:valuetype System.Xml.Schema.XsdDuration&[exp:XsdDuration](this))))"), System.UInt64);
			num = JSIL.Cast(JSIL.UntranslatableInstruction("mul.ovf.un:UInt64(ldloc:UInt64(num), ldc.i8:UInt64(60))"), System.UInt64);
			num = JSIL.Cast(JSIL.UntranslatableInstruction("add.ovf.un:UInt64(ldloc:UInt64(num), conv.ovf.u8:UInt64(ldfld:Int32[exp:UInt64](XsdDuration::minutes, ldloc:valuetype System.Xml.Schema.XsdDuration&[exp:XsdDuration](this))))"), System.UInt64);
			num = JSIL.Cast(JSIL.UntranslatableInstruction("mul.ovf.un:UInt64(ldloc:UInt64(num), ldc.i8:UInt64(60))"), System.UInt64);
			num = JSIL.Cast(JSIL.UntranslatableInstruction("add.ovf.un:UInt64(ldloc:UInt64(num), conv.ovf.u8:UInt64(ldfld:Int32[exp:UInt64](XsdDuration::seconds, ldloc:valuetype System.Xml.Schema.XsdDuration&[exp:XsdDuration](this))))"), System.UInt64);
			num = JSIL.Cast(JSIL.UntranslatableInstruction("mul.ovf.un:UInt64(ldloc:UInt64(num), ldc.i8:UInt64(10000000))"), System.UInt64);
			num = JSIL.Cast(JSIL.UntranslatableInstruction("add.ovf.un:UInt64(ldloc:UInt64(num), div.un:UInt64(conv.ovf.u8:UInt64(callgetter:Int32[exp:UInt64](XsdDuration::get_Nanoseconds, ldloc:valuetype System.Xml.Schema.XsdDuration&(this))), ldc.i8:UInt64(100)))"), System.UInt64);
		} else {
			num = JSIL.Cast(JSIL.UntranslatableInstruction("mul.ovf.un:UInt64(ldloc:UInt64(num), ldc.i8:UInt64(864000000000))"), System.UInt64);
		}
		if (this.IsNegative) {
			if (num === -9223372036854775808) {
				result.value = JSIL.New(System.TimeSpan, "_ctor$0", [-9223372036854775808]);
			} else {
				result.value = JSIL.New(System.TimeSpan, "_ctor$0", [(0 - num)]);
			}
		} else {
			result.value = JSIL.New(System.TimeSpan, "_ctor$0", [num]);
		}
		return null;
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.OverflowException)) {
			result.value = System.TimeSpan.MinValue.MemberwiseClone();
			result2 = JSIL.New(System.OverflowException, "_ctor$1", [$asm07.System.Xml.Res.GetString$0("XmlConvert_Overflow", [durationType, "TimeSpan"])]);
		} else {
			throw $exception;
		}
	}
	return result2;
};
$asm07.System.Xml.Schema.XsdDuration.prototype.toString = function () {
	return this.ToString($asm07.System.Xml.Schema.XsdDuration.DurationType.Duration);
};
$asm07.System.Xml.Schema.XsdDuration.prototype.ToString = function (durationType) {
	var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$1", [20]);
	if (this.IsNegative) {
		stringBuilder.Append$7("-");
	}
	stringBuilder.Append$7("P");
	if (durationType !== $asm07.System.Xml.Schema.XsdDuration.DurationType.DayTimeDuration) {
		if (this.years !== 0) {
			stringBuilder.Append$2(System.Xml.XmlConvert.ToString$5(this.years));
			stringBuilder.Append$7("Y");
		}
		if (this.months !== 0) {
			stringBuilder.Append$2(System.Xml.XmlConvert.ToString$5(this.months));
			stringBuilder.Append$7("M");
		}
	}
	if (durationType !== $asm07.System.Xml.Schema.XsdDuration.DurationType.YearMonthDuration) {
		if (this.days !== 0) {
			stringBuilder.Append$2(System.Xml.XmlConvert.ToString$5(this.days));
			stringBuilder.Append$7("D");
		}
		if (!((this.hours === 0) && 
				(this.minutes === 0) && 
				(this.seconds === 0) && (this.Nanoseconds === 0))) {
			stringBuilder.Append$7("T");
			if (this.hours !== 0) {
				stringBuilder.Append$2(System.Xml.XmlConvert.ToString$5(this.hours));
				stringBuilder.Append$7("H");
			}
			if (this.minutes !== 0) {
				stringBuilder.Append$2(System.Xml.XmlConvert.ToString$5(this.minutes));
				stringBuilder.Append$7("M");
			}
			var num = this.Nanoseconds;
			if (!((this.seconds === 0) && (num === 0))) {
				stringBuilder.Append$2(System.Xml.XmlConvert.ToString$5(this.seconds));
				if (num !== 0) {
					stringBuilder.Append$7(".");
					var length = stringBuilder.Length;
					stringBuilder.Length += 9;
					var num2 = (stringBuilder.Length - 1);
				__loop0__: 
					for (var i = num2; i >= length; --i) {
						var num3 = (num % 10);
						stringBuilder.set_Chars(i, (num3 + 48));
						if (!((num2 !== i) || (num3 !== 0))) {
							--num2;
						}
						num = Math.floor(num / 10);
					}
					stringBuilder.Length = (num2 + 1);
				}
				stringBuilder.Append$7("S");
			}
		}
		if (stringBuilder.get_Chars((stringBuilder.Length - 1)) === "P") {
			stringBuilder.Append$2("T0S");
		}
	} else if (stringBuilder.get_Chars((stringBuilder.Length - 1)) === "P") {
		stringBuilder.Append$2("0M");
	}
	return stringBuilder.toString();
};
$asm07.System.Xml.Schema.XsdDuration.TryParse = function (s, durationType, /* ref */ result) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				var parts = $asm07.System.Xml.Schema.XsdDuration.Parts.HasNone;
				result.value = new $asm07.System.Xml.Schema.XsdDuration();
				s = s.Trim$1();
				var length = s.length;
				var num = new JSIL.Variable(0);
				var i = new JSIL.Variable(0);
				if (num.value < length) {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								if ((s[num.value]) === "-") {
									++num.value;
									result.value.nanoseconds = -2147483648;
								} else {
									result.value.nanoseconds = 0;
								}
								if (!((num.value >= length) || ((s[num.value++]) !== "P"))) {
									var __label2__ = "__entry2__";
								__step2__: 
									while (true) {
										switch (__label2__) {
											case "__entry2__":
												if ($asm07.System.Xml.Schema.XsdDuration.TryParseDigits(
														s, 
														/* ref */ num, 
														false, 
														/* ref */ num2, 
														/* ref */ i
													) === null) {
													var __label3__ = "__entry3__";
												__step3__: 
													while (true) {
														switch (__label3__) {
															case "__entry3__":
																if (num.value >= length) {
																	__label0__ = "IL_2D8";
																	continue __step0__;
																}
																if ((s[num.value]) === "Y") {
																	if (i.value === 0) {
																		__label0__ = "IL_2D8";
																		continue __step0__;
																	}
																	parts = (parts | $asm07.System.Xml.Schema.XsdDuration.Parts.HasYears);
																	result.value.years = num2.value;
																	if (++num.value === length) {
																		__label3__ = "IL_2BB";
																		continue __step3__;
																	}
																	if ($asm07.System.Xml.Schema.XsdDuration.TryParseDigits(
																			s, 
																			/* ref */ num, 
																			false, 
																			/* ref */ num2, 
																			/* ref */ i
																		) !== null) {
																		__label2__ = "IL_301";
																		continue __step2__;
																	}
																	if (num.value >= length) {
																		__label0__ = "IL_2D8";
																		continue __step0__;
																	}
																}
																if ((s[num.value]) === "M") {
																	if (i.value === 0) {
																		__label0__ = "IL_2D8";
																		continue __step0__;
																	}
																	parts = (parts | $asm07.System.Xml.Schema.XsdDuration.Parts.HasMonths);
																	result.value.months = num2.value;
																	if (++num.value === length) {
																		__label3__ = "IL_2BB";
																		continue __step3__;
																	}
																	if ($asm07.System.Xml.Schema.XsdDuration.TryParseDigits(
																			s, 
																			/* ref */ num, 
																			false, 
																			/* ref */ num2, 
																			/* ref */ i
																		) !== null) {
																		__label2__ = "IL_301";
																		continue __step2__;
																	}
																	if (num.value >= length) {
																		__label0__ = "IL_2D8";
																		continue __step0__;
																	}
																}
																if ((s[num.value]) !== "D") {
																	__label3__ = "IL_14B";
																	continue __step3__;
																}
																if (i.value === 0) {
																	__label0__ = "IL_2D8";
																	continue __step0__;
																}
																parts = (parts | $asm07.System.Xml.Schema.XsdDuration.Parts.HasDays);
																result.value.days = num2.value;
																if (++num.value !== length) {
																	if ($asm07.System.Xml.Schema.XsdDuration.TryParseDigits(
																			s, 
																			/* ref */ num, 
																			false, 
																			/* ref */ num2, 
																			/* ref */ i
																		) !== null) {
																		__label2__ = "IL_301";
																		continue __step2__;
																	}
																	if (num.value < length) {
																		__label3__ = "IL_14B";
																		continue __step3__;
																	}
																	__label0__ = "IL_2D8";
																	continue __step0__;
																}
																__label3__ = "IL_2BB";
																continue __step3__;
																break;
															case "IL_2BB":
																if (JSIL.Cast(parts, System.Boolean)) {
																	if (durationType === $asm07.System.Xml.Schema.XsdDuration.DurationType.DayTimeDuration) {
																		if (parts & 3) {
																			__label0__ = "IL_2D8";
																			continue __step0__;
																		}
																	} else if ((durationType === $asm07.System.Xml.Schema.XsdDuration.DurationType.YearMonthDuration) && (parts & -4)) {
																		__label0__ = "IL_2D8";
																		continue __step0__;
																	}
																	return null;
																}
																__label0__ = "IL_2D8";
																continue __step0__;
																__label3__ = "IL_14B";
																continue __step3__;
																break;
															case "IL_14B":
																if ((s[num.value]) === "T") {
																	if (i.value !== 0) {
																		__label0__ = "IL_2D8";
																		continue __step0__;
																	}
																	++num.value;
																	if ($asm07.System.Xml.Schema.XsdDuration.TryParseDigits(
																			s, 
																			/* ref */ num, 
																			false, 
																			/* ref */ num2, 
																			/* ref */ i
																		) !== null) {
																		__label2__ = "IL_301";
																		continue __step2__;
																	}
																	if (num.value >= length) {
																		__label0__ = "IL_2D8";
																		continue __step0__;
																	}
																	if ((s[num.value]) === "H") {
																		if (i.value === 0) {
																			__label0__ = "IL_2D8";
																			continue __step0__;
																		}
																		parts = (parts | $asm07.System.Xml.Schema.XsdDuration.Parts.HasHours);
																		result.value.hours = num2.value;
																		if (++num.value === length) {
																			__label3__ = "IL_2BB";
																			continue __step3__;
																		}
																		if ($asm07.System.Xml.Schema.XsdDuration.TryParseDigits(
																				s, 
																				/* ref */ num, 
																				false, 
																				/* ref */ num2, 
																				/* ref */ i
																			) !== null) {
																			__label2__ = "IL_301";
																			continue __step2__;
																		}
																		if (num.value >= length) {
																			__label0__ = "IL_2D8";
																			continue __step0__;
																		}
																	}
																	if ((s[num.value]) === "M") {
																		if (i.value === 0) {
																			__label0__ = "IL_2D8";
																			continue __step0__;
																		}
																		parts = (parts | $asm07.System.Xml.Schema.XsdDuration.Parts.HasMinutes);
																		result.value.minutes = num2.value;
																		if (++num.value === length) {
																			__label3__ = "IL_2BB";
																			continue __step3__;
																		}
																		if ($asm07.System.Xml.Schema.XsdDuration.TryParseDigits(
																				s, 
																				/* ref */ num, 
																				false, 
																				/* ref */ num2, 
																				/* ref */ i
																			) !== null) {
																			__label2__ = "IL_301";
																			continue __step2__;
																		}
																		if (num.value >= length) {
																			__label0__ = "IL_2D8";
																			continue __step0__;
																		}
																	}
																	if ((s[num.value]) === ".") {
																		++num.value;
																		parts = (parts | $asm07.System.Xml.Schema.XsdDuration.Parts.HasSeconds);
																		result.value.seconds = num2.value;
																		if ($asm07.System.Xml.Schema.XsdDuration.TryParseDigits(
																				s, 
																				/* ref */ num, 
																				true, 
																				/* ref */ num2, 
																				/* ref */ i
																			) !== null) {
																			__label2__ = "IL_301";
																			continue __step2__;
																		}
																		if (i.value === 0) {
																			var num2 = new JSIL.Variable(0);
																		}
																	__loop0__: 
																		for (; i.value > 9; --i.value) {
																			num2.value = Math.floor(num2.value / 10);
																		}
																	__loop1__: 
																		for (; i.value < 9; ++i.value) {
																			num2.value *= 10;
																		}
																		result.value.nanoseconds = (result.value.nanoseconds | num2.value);
																		if ((num.value >= length) || ((s[num.value]) !== "S")) {
																			__label0__ = "IL_2D8";
																			continue __step0__;
																		}
																		if (++num.value === length) {
																			__label3__ = "IL_2BB";
																			continue __step3__;
																		}
																	} else if ((s[num.value]) === "S") {
																		if (i.value === 0) {
																			__label0__ = "IL_2D8";
																			continue __step0__;
																		}
																		parts = (parts | $asm07.System.Xml.Schema.XsdDuration.Parts.HasSeconds);
																		result.value.seconds = num2.value;
																		if (++num.value === length) {
																			__label3__ = "IL_2BB";
																			continue __step3__;
																		}
																	}
																}
																if (!((i.value !== 0) || (num.value !== length))) {
																	__label3__ = "IL_2BB";
																	continue __step3__;
																}
																__label0__ = "IL_2D8";
																continue __step0__;
																break __step3__;
														}
													}
												}
												__label2__ = "IL_301";
												continue __step2__;
												break;
											case "IL_301":
												return JSIL.New(System.OverflowException, "_ctor$1", [$asm07.System.Xml.Res.GetString$0("XmlConvert_Overflow", [s, durationType])]);
												break __step2__;
										}
									}
								}
								break __step1__;
						}
					}
				}
				__label0__ = "IL_2D8";
				continue __step0__;
				break;
			case "IL_2D8":
				return JSIL.New(System.FormatException, "_ctor$1", [$asm07.System.Xml.Res.GetString$0("XmlConvert_BadFormat", [s, durationType])]);
				break __step0__;
		}
	}
};
$asm07.System.Xml.Schema.XsdDuration.TryParseDigits = function (s, /* ref */ offset, eatDigits, /* ref */ result, /* ref */ numDigits) {
	var num = offset.value;
	var length = s.length;
	result.value = 0;
	numDigits.value = 0;
__loop0__: 
	while ((offset.value < length) && 
		((s[offset.value]) >= "0") && ((s[offset.value]) <= "9")) {
		var num2 = ((s[offset.value]) - "0");
		if (result.value > Math.floor((2147483647 - num2) / 10)) {
			if (!eatDigits) {
				return "XmlConvert_Overflow";
			}
			numDigits.value = (offset.value - num);
		__loop1__: 
			while ((offset.value < length) && 
				((s[offset.value]) >= "0") && ((s[offset.value]) <= "9")) {
				++offset.value;
			}
			return null;
		} else {
			result.value = ((result.value * 10) + num2);
			++offset.value;
		}
	}
	numDigits.value = (offset.value - num);
	return null;
};
JSIL.OverloadedMethod($asm07.System.Xml.Schema.XsdDuration.prototype, "_ctor", [
		["_ctor$0", [System.Boolean, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32, System.Int32]], 
		["_ctor$1", [System.TimeSpan]], 
		["_ctor$2", [System.TimeSpan, $asm07.System.Xml.Schema.XsdDuration.DurationType]], 
		["_ctor$3", [System.String]], 
		["_ctor$4", [System.String, $asm07.System.Xml.Schema.XsdDuration.DurationType]]
	]);
JSIL.OverloadedMethod($asm07.System.Xml.Schema.XsdDuration.prototype, "ToTimeSpan", [
		["ToTimeSpan$0", []], 
		["ToTimeSpan$1", [$asm07.System.Xml.Schema.XsdDuration.DurationType]]
	]);
JSIL.MakeProperty($asm07.System.Xml.Schema.XsdDuration.prototype, "IsNegative", 
	$asm07.System.Xml.Schema.XsdDuration.prototype.get_IsNegative, null);
JSIL.MakeProperty($asm07.System.Xml.Schema.XsdDuration.prototype, "Years", 
	$asm07.System.Xml.Schema.XsdDuration.prototype.get_Years, null);
JSIL.MakeProperty($asm07.System.Xml.Schema.XsdDuration.prototype, "Months", 
	$asm07.System.Xml.Schema.XsdDuration.prototype.get_Months, null);
JSIL.MakeProperty($asm07.System.Xml.Schema.XsdDuration.prototype, "Days", 
	$asm07.System.Xml.Schema.XsdDuration.prototype.get_Days, null);
JSIL.MakeProperty($asm07.System.Xml.Schema.XsdDuration.prototype, "Hours", 
	$asm07.System.Xml.Schema.XsdDuration.prototype.get_Hours, null);
JSIL.MakeProperty($asm07.System.Xml.Schema.XsdDuration.prototype, "Minutes", 
	$asm07.System.Xml.Schema.XsdDuration.prototype.get_Minutes, null);
JSIL.MakeProperty($asm07.System.Xml.Schema.XsdDuration.prototype, "Seconds", 
	$asm07.System.Xml.Schema.XsdDuration.prototype.get_Seconds, null);
JSIL.MakeProperty($asm07.System.Xml.Schema.XsdDuration.prototype, "Nanoseconds", 
	$asm07.System.Xml.Schema.XsdDuration.prototype.get_Nanoseconds, null);
Object.defineProperty($asm07.System.Xml.Schema.XsdDuration, "NegativeBit", {
		"value": 2147483648}
);
$asm07.System.Xml.Schema.XsdDuration.prototype.years = 0;
$asm07.System.Xml.Schema.XsdDuration.prototype.months = 0;
$asm07.System.Xml.Schema.XsdDuration.prototype.days = 0;
$asm07.System.Xml.Schema.XsdDuration.prototype.hours = 0;
$asm07.System.Xml.Schema.XsdDuration.prototype.minutes = 0;
$asm07.System.Xml.Schema.XsdDuration.prototype.seconds = 0;
$asm07.System.Xml.Schema.XsdDuration.prototype.nanoseconds = 0;

JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Xml.XmlNamespaceManager, [
				"System.Xml.IXmlNamespaceResolver", "System.Collections.IEnumerable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm07.System.Xml.SecureStringHasher, [
				"System.Collections.Generic.IEqualityComparer$b1"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Xml.XmlReader, [
				"System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm07.System.Xml.XmlWrappingReader, [
				"System.Xml.IXmlLineInfo"
			]);
	});
JSIL.QueueInitializer(function () {
		$asm07.System.Xml.XmlCharCheckingReader.prototype.__StructFields__ = [
			["xmlCharType", $asm07.System.Xml.XmlCharType]
		];
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm07.System.Xml.XmlCharCheckingReaderWithNS, [
				"System.Xml.IXmlNamespaceResolver"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Xml.XmlWriter, [
				"System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		$asm07.System.Xml.XmlCharCheckingWriter.prototype.__StructFields__ = [
			["xmlCharType", $asm07.System.Xml.XmlCharType]
		];
	});
JSIL.QueueInitializer(function () {
		$asm07.System.Xml.XmlEncodedRawTextWriter.prototype.__StructFields__ = [
			["xmlCharType", $asm07.System.Xml.XmlCharType]
		];
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm07.System.Xml.XmlSubtreeReader, [
				"System.Xml.IXmlLineInfo", "System.Xml.IXmlNamespaceResolver"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm07.System.Xml.XmlTextReaderImpl, [
				"System.Xml.IXmlLineInfo", "System.Xml.IXmlNamespaceResolver"
			]);
	});
JSIL.QueueInitializer(function () {
		$asm07.System.Xml.XmlTextReaderImpl.prototype.__StructFields__ = [
			["xmlCharType", $asm07.System.Xml.XmlCharType], 
			["ps", $asm07.System.Xml.XmlTextReaderImpl.ParsingState], 
			["incReadLineInfo", $asm07.System.Xml.LineInfo]
		];
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm07.System.Xml.XmlTextReaderImpl.DtdParserProxy, [
				"System.Xml.IDtdParserAdapter"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm07.System.Xml.XmlTextReaderImpl.NodeData, [
				"System.IComparable"
			]);
	});
JSIL.QueueInitializer(function () {
		$asm07.System.Xml.XmlTextReaderImpl.NodeData.prototype.__StructFields__ = [
			["lineInfo", $asm07.System.Xml.LineInfo], 
			["lineInfo2", $asm07.System.Xml.LineInfo]
		];
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm07.System.Xml.XmlTextReaderImpl.DtdDefaultAttributeInfoToNodeDataComparer, [
				"System.Collections.Generic.IComparer$b1"
			]);
	});
JSIL.QueueInitializer(function () {
		$asm07.System.Xml.XmlUtf8RawTextWriter.prototype.__StructFields__ = [
			["xmlCharType", $asm07.System.Xml.XmlCharType]
		];
	});
JSIL.QueueInitializer(function () {
		$asm07.System.Xml.XmlWellFormedWriter.prototype.__StructFields__ = [
			["xmlCharType", $asm07.System.Xml.XmlCharType]
		];
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm07.System.Xml.XmlWellFormedWriter.NamespaceResolverProxy, [
				"System.Xml.IXmlNamespaceResolver"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm07.System.Xml.DtdParser, [
				"System.Xml.IDtdParser"
			]);
	});
JSIL.QueueInitializer(function () {
		$asm07.System.Xml.DtdParser.prototype.__StructFields__ = [
			["xmlCharType", $asm07.System.Xml.XmlCharType], 
			["literalLineInfo", $asm07.System.Xml.LineInfo]
		];
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm07.System.Xml.Schema.SchemaAttDef, [
				"System.Xml.IDtdDefaultAttributeInfo", "System.Xml.IDtdAttributeInfo"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm07.System.Xml.Schema.SchemaElementDecl, [
				"System.Xml.IDtdAttributeListInfo"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm07.System.Xml.Schema.SchemaEntity, [
				"System.Xml.IDtdEntityInfo"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm07.System.Xml.Schema.SchemaInfo, [
				"System.Xml.IDtdInfo"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm07.System.Xml.Schema.SchemaInfo.GetAttributeLists$gd__0, [
				"System.Collections.Generic.IEnumerable$b1", "System.Collections.IEnumerable", "System.Collections.Generic.IEnumerator$b1", "System.Collections.IEnumerator", "System.IDisposable"
			]);
	});
JSIL.QueueInitializer(function () {
		$asm07.System.Xml.Schema.SchemaInfo.GetAttributeLists$gd__0.prototype.__StructFields__ = [
			["<>7__wrap3", System.Collections.Generic.Dictionary$b2.ValueCollection.Enumerator.Of(System.Xml.XmlQualifiedName, $asm07.System.Xml.Schema.SchemaElementDecl)]
		];
	});
JSIL.QueueInitializer(function () {
		$asm07.System.Xml.Schema.XsdDateTime.prototype.__StructFields__ = [
			["dt", System.DateTime]
		];
	});
JSIL.QueueInitializer(function () {
		JSIL.SealTypes($asm07, "System.Xml", 
			"Res", "Base64Decoder", "Bits", "ValidateNames", "XmlConvert", "XmlQualifiedName", "XmlReader", "XmlWellFormedWriter", "DtdParser"
		);
		JSIL.SealTypes($asm07, "System.Xml.XmlTextReaderImpl", 
			"DtdDefaultAttributeInfoToNodeDataComparer"
		);
		JSIL.SealTypes($asm07, "System.Xml.Schema", 
			"XmlUntypedStringConverter", "XsdDateTime"
		);
		JSIL.SealTypes($asm07, "System.Xml.Schema.XsdDateTime", 
			"Parser"
		);
	});
