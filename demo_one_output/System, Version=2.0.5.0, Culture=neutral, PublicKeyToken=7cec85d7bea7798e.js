/* Generated by JSIL v0.2 build 28582. See http://jsil.org/ for more information. */ 
var $asm04 = JSIL.DeclareAssembly("System, Version=2.0.5.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e");
JSIL.DeclareNamespace("System");
JSIL.DeclareNamespace("System.ComponentModel");
JSIL.MakeClass("System.Attribute", "System.ComponentModel.DescriptionAttribute", true);

JSIL.MakeClass("System.ComponentModel.DescriptionAttribute", "System.SRDescriptionAttribute", false);

JSIL.MakeClass("System.Attribute", "System.ComponentModel.CategoryAttribute", true);

JSIL.MakeClass("System.ComponentModel.CategoryAttribute", "System.SRCategoryAttribute", false);

JSIL.MakeClass("System.Object", "System.SR", false);

JSIL.DeclareNamespace("System.Text");
JSIL.DeclareNamespace("System.Text.RegularExpressions");
JSIL.MakeClass("System.Object", "System.Text.RegularExpressions.Regex", true);

JSIL.MakeDelegate("System.Text.RegularExpressions.MatchEvaluator");

JSIL.MakeClass("System.Object", "System.Text.RegularExpressions.CachedCodeEntry", false);

JSIL.MakeClass("System.Object", "System.Text.RegularExpressions.ExclusiveReference", false);

JSIL.MakeClass("System.Object", "System.Text.RegularExpressions.SharedReference", false);

JSIL.MakeClass("System.Object", "System.Text.RegularExpressions.RegexBoyerMoore", false);

JSIL.MakeClass("System.Object", "System.Text.RegularExpressions.Capture", true);

JSIL.MakeClass("System.Object", "System.Text.RegularExpressions.CaptureCollection", true);

JSIL.MakeClass("System.Object", "System.Text.RegularExpressions.CaptureEnumerator", false);

JSIL.MakeClass("System.Object", "System.Text.RegularExpressions.RegexCharClass", false);
JSIL.MakeStruct("System.Text.RegularExpressions.RegexCharClass/LowerCaseMapping", false);

JSIL.MakeClass("System.Object", "System.Text.RegularExpressions.RegexCharClass/SingleRangeComparer", false);

JSIL.MakeClass("System.Object", "System.Text.RegularExpressions.RegexCharClass/SingleRange", false);


JSIL.MakeClass("System.Object", "System.Text.RegularExpressions.RegexCode", false);

JSIL.MakeClass("System.Object", "System.Text.RegularExpressions.RegexFCD", false);

JSIL.MakeClass("System.Object", "System.Text.RegularExpressions.RegexFC", false);

JSIL.MakeClass("System.Object", "System.Text.RegularExpressions.RegexPrefix", false);

JSIL.MakeClass("System.Text.RegularExpressions.Capture", "System.Text.RegularExpressions.Group", true);

JSIL.MakeClass("System.Object", "System.Text.RegularExpressions.GroupCollection", true);

JSIL.MakeClass("System.Object", "System.Text.RegularExpressions.GroupEnumerator", false);

JSIL.MakeClass("System.Object", "System.Text.RegularExpressions.RegexRunner", false);

JSIL.MakeClass("System.Text.RegularExpressions.RegexRunner", "System.Text.RegularExpressions.RegexInterpreter", false);

JSIL.MakeClass("System.Text.RegularExpressions.Group", "System.Text.RegularExpressions.Match", true);

JSIL.MakeClass("System.Text.RegularExpressions.Match", "System.Text.RegularExpressions.MatchSparse", false);

JSIL.MakeClass("System.Object", "System.Text.RegularExpressions.MatchCollection", true);

JSIL.MakeClass("System.Object", "System.Text.RegularExpressions.MatchEnumerator", false);

JSIL.MakeClass("System.Object", "System.Text.RegularExpressions.RegexNode", false);

JSIL.MakeEnum(
	"System.Text.RegularExpressions.RegexOptions", {
		None: 0, 
		IgnoreCase: 1, 
		Multiline: 2, 
		ExplicitCapture: 4, 
		Singleline: 16, 
		IgnorePatternWhitespace: 32, 
		RightToLeft: 64, 
		ECMAScript: 256, 
		CultureInvariant: 512
	}, true
);

JSIL.MakeClass("System.Object", "System.Text.RegularExpressions.RegexParser", false);

JSIL.MakeClass("System.Object", "System.Text.RegularExpressions.RegexReplacement", false);

JSIL.MakeClass("System.Object", "System.Text.RegularExpressions.RegexRunnerFactory", false);

JSIL.MakeClass("System.Object", "System.Text.RegularExpressions.RegexTree", false);

JSIL.MakeClass("System.Object", "System.Text.RegularExpressions.RegexWriter", false);

JSIL.DeclareNamespace("System.Diagnostics");
JSIL.MakeStaticClass("System.Diagnostics.Debug", true);

JSIL.MakeStaticClass("System.Diagnostics.AssertWrapper", false);

JSIL.MakeClass("System.Object", "System.Diagnostics.MessageBoxPopup", false);

JSIL.DeclareNamespace("Microsoft");
JSIL.DeclareNamespace("Microsoft.Win32");
JSIL.MakeStaticClass("Microsoft.Win32.SafeNativeMethods", false);

JSIL.MakeStaticClass("Microsoft.Win32.UnsafeNativeMethods", false);

JSIL.MakeStaticClass("Microsoft.Win32.NativeMethods", false);
JSIL.MakeClass("System.Object", "Microsoft.Win32.NativeMethods/TEXTMETRIC", false);


JSIL.DeclareNamespace("System.Collections");
JSIL.DeclareNamespace("System.Collections.Generic");
JSIL.MakeClass("System.Object", "System.Collections.Generic.System_CollectionDebugView$b1", false, ["T"]);

JSIL.MakeClass("System.Object", "System.Collections.Generic.System_QueueDebugView$b1", false, ["T"]);

JSIL.MakeClass("System.Object", "System.Collections.Generic.System_StackDebugView$b1", false, ["T"]);

JSIL.MakeInterface(
	"System.Collections.Generic.ISet$b1", ["T"], {
		"Add": Function, 
		"UnionWith": Function, 
		"IntersectWith": Function, 
		"ExceptWith": Function, 
		"SymmetricExceptWith": Function, 
		"IsSubsetOf": Function, 
		"IsSupersetOf": Function, 
		"IsProperSupersetOf": Function, 
		"IsProperSubsetOf": Function, 
		"Overlaps": Function, 
		"SetEquals": Function
	});

JSIL.MakeClass("System.Object", "System.Collections.Generic.LinkedList$b1", true, ["T"]);
JSIL.MakeStruct("System.Collections.Generic.LinkedList$b1/Enumerator", false, ["T"]);


JSIL.MakeClass("System.Object", "System.Collections.Generic.LinkedListNode$b1", true, ["T"]);

JSIL.MakeClass("System.Object", "System.Collections.Generic.Queue$b1", true, ["T"]);
JSIL.MakeStruct("System.Collections.Generic.Queue$b1/Enumerator", false, ["T"]);


JSIL.MakeClass("System.Object", "System.Collections.Generic.Stack$b1", true, ["T"]);
JSIL.MakeStruct("System.Collections.Generic.Stack$b1/Enumerator", false, ["T"]);


JSIL.MakeStaticClass("System.ThrowHelper", false);

JSIL.MakeEnum(
	"System.ExceptionArgument", {
		obj: 0, 
		dictionary: 1, 
		dictionaryCreationThreshold: 2, 
		array: 3, 
		info: 4, 
		key: 5, 
		collection: 6, 
		list: 7, 
		match: 8, 
		converter: 9, 
		queue: 10, 
		stack: 11, 
		capacity: 12, 
		index: 13, 
		startIndex: 14, 
		value: 15, 
		count: 16, 
		arrayIndex: 17, 
		name: 18, 
		mode: 19, 
		item: 20, 
		options: 21, 
		view: 22
	}, false
);

JSIL.MakeEnum(
	"System.ExceptionResource", {
		Argument_ImplementIComparable: 0, 
		Argument_InvalidType: 1, 
		Argument_InvalidArgumentForComparison: 2, 
		Argument_InvalidRegistryKeyPermissionCheck: 3, 
		ArgumentOutOfRange_NeedNonNegNum: 4, 
		Arg_ArrayPlusOffTooSmall: 5, 
		Arg_NonZeroLowerBound: 6, 
		Arg_RankMultiDimNotSupported: 7, 
		Arg_RegKeyDelHive: 8, 
		Arg_RegKeyStrLenBug: 9, 
		Arg_RegSetStrArrNull: 10, 
		Arg_RegSetMismatchedKind: 11, 
		Arg_RegSubKeyAbsent: 12, 
		Arg_RegSubKeyValueAbsent: 13, 
		Argument_AddingDuplicate: 14, 
		Serialization_InvalidOnDeser: 15, 
		Serialization_MissingKeys: 16, 
		Serialization_NullKey: 17, 
		Argument_InvalidArrayType: 18, 
		NotSupported_KeyCollectionSet: 19, 
		NotSupported_ValueCollectionSet: 20, 
		ArgumentOutOfRange_SmallCapacity: 21, 
		ArgumentOutOfRange_Index: 22, 
		Argument_InvalidOffLen: 23, 
		Argument_ItemNotExist: 24, 
		ArgumentOutOfRange_Count: 25, 
		ArgumentOutOfRange_InvalidThreshold: 26, 
		ArgumentOutOfRange_ListInsert: 27, 
		NotSupported_ReadOnlyCollection: 28, 
		InvalidOperation_CannotRemoveFromStackOrQueue: 29, 
		InvalidOperation_EmptyQueue: 30, 
		InvalidOperation_EnumOpCantHappen: 31, 
		InvalidOperation_EnumFailedVersion: 32, 
		InvalidOperation_EmptyStack: 33, 
		ArgumentOutOfRange_BiggerThanCollection: 34, 
		InvalidOperation_EnumNotStarted: 35, 
		InvalidOperation_EnumEnded: 36, 
		NotSupported_SortedListNestedWrite: 37, 
		InvalidOperation_NoValue: 38, 
		InvalidOperation_RegRemoveSubKey: 39, 
		Security_RegistryPermission: 40, 
		UnauthorizedAccess_RegistryNoWrite: 41, 
		ObjectDisposed_RegKeyClosed: 42, 
		NotSupported_InComparableType: 43, 
		Argument_InvalidRegistryOptionsCheck: 44, 
		Argument_InvalidRegistryViewCheck: 45
	}, false
);

JSIL.MakeClass("System.Attribute", "System.ComponentModel.EditorBrowsableAttribute", true);

JSIL.MakeEnum(
	"System.ComponentModel.EditorBrowsableState", {
		Always: 0, 
		Never: 1, 
		Advanced: 2
	}, false
);

JSIL.DeclareNamespace("System.CodeDom");
JSIL.DeclareNamespace("System.CodeDom.Compiler");
JSIL.MakeClass("System.Attribute", "System.CodeDom.Compiler.GeneratedCodeAttribute", true);

JSIL.MakeInterface(
	"System.ComponentModel.IContainer", [], {
		"Add": Function, 
		"Add": Function, 
		"get_Components": Function, 
		"Remove": Function, 
		"Components": Property
	});

JSIL.MakeInterface(
	"System.ComponentModel.ISite", [], {
		"get_Component": Function, 
		"get_Container": Function, 
		"get_DesignMode": Function, 
		"get_Name": Function, 
		"set_Name": Function, 
		"Component": Property, 
		"Container": Property, 
		"DesignMode": Property, 
		"Name": Property
	});

JSIL.MakeClass("System.Attribute", "System.ComponentModel.ComplexBindingPropertiesAttribute", true);

JSIL.MakeClass("System.Attribute", "System.ComponentModel.DefaultBindingPropertyAttribute", true);

JSIL.MakeClass("System.Attribute", "System.ComponentModel.DefaultEventAttribute", true);

JSIL.MakeClass("System.Attribute", "System.ComponentModel.DefaultPropertyAttribute", true);

JSIL.MakeClass("System.Attribute", "System.ComponentModel.DefaultValueAttribute", true);

JSIL.MakeClass("System.Attribute", "System.ComponentModel.LookupBindingPropertiesAttribute", true);

JSIL.MakeStaticClass("System.ExternDll", false);

JSIL.MakeClass("System.Object", "System.UriParser", true);
JSIL.MakeClass("System.UriParser", "System.UriParser/BuiltInUriParser", false);


JSIL.MakeClass("System.Object", "System.Uri", true);
JSIL.MakeEnum(
	"System.Uri/Flags", {
		Zero: 0, 
		SchemeNotCanonical: 1, 
		UserNotCanonical: 2, 
		HostNotCanonical: 4, 
		PortNotCanonical: 8, 
		PathNotCanonical: 16, 
		QueryNotCanonical: 32, 
		FragmentNotCanonical: 64, 
		CannotDisplayCanonical: 127, 
		E_UserNotCanonical: 128, 
		E_HostNotCanonical: 256, 
		E_PortNotCanonical: 512, 
		E_PathNotCanonical: 1024, 
		E_QueryNotCanonical: 2048, 
		E_FragmentNotCanonical: 4096, 
		E_CannotDisplayCanonical: 8064, 
		ShouldBeCompressed: 8192, 
		FirstSlashAbsent: 16384, 
		BackslashInPath: 32768, 
		IndexMask: 65535, 
		HostTypeMask: 458752, 
		HostNotParsed: 0, 
		IPv6HostType: 65536, 
		IPv4HostType: 131072, 
		DnsHostType: 196608, 
		UncHostType: 262144, 
		BasicHostType: 327680, 
		UnusedHostType: 393216, 
		UnknownHostType: 458752, 
		UserEscaped: 524288, 
		AuthorityFound: 1048576, 
		HasUserInfo: 2097152, 
		LoopbackHost: 4194304, 
		NotDefaultPort: 8388608, 
		UserDrivenParsing: 16777216, 
		CanonicalDnsHost: 33554432, 
		ErrorOrParsingRecursion: 67108864, 
		DosPath: 134217728, 
		UncPath: 268435456, 
		ImplicitFile: 536870912, 
		MinimalUriInfoSet: 1073741824, 
		AllUriInfoSet: 2147483648, 
		IdnHost: 4294967296, 
		HasUnicode: 8589934592, 
		HostUnicodeNormalized: 17179869184, 
		RestUnicodeNormalized: 34359738368, 
		UnicodeHost: 68719476736, 
		IntranetUri: 137438953472, 
		UseOrigUncdStrOffset: 274877906944, 
		UserIriCanonical: 549755813888, 
		PathIriCanonical: 1099511627776, 
		QueryIriCanonical: 2199023255552, 
		FragmentIriCanonical: 4398046511104, 
		IriCanonical: 8246337208320
	}, true
);

JSIL.MakeClass("System.Object", "System.Uri/UriInfo", false);

JSIL.MakeStruct("System.Uri/Offset", false);

JSIL.MakeClass("System.Object", "System.Uri/MoreInfo", false);

JSIL.MakeEnum(
	"System.Uri/Check", {
		None: 0, 
		EscapedCanonical: 1, 
		DisplayCanonical: 2, 
		DotSlashAttn: 4, 
		DotSlashEscaped: 128, 
		BackslashInPath: 16, 
		ReservedFound: 32, 
		NotIriCanonical: 64, 
		FoundNonAscii: 8
	}, true
);


JSIL.MakeClass("System.Object", "System.UriBuilder", true);

JSIL.MakeClass("System.FormatException", "System.UriFormatException", true);

JSIL.MakeClass("System.Object", "System.DomainNameHelper", false);

JSIL.MakeClass("System.Object", "System.IdnMapping", false);

JSIL.MakeClass("System.Object", "System.IPv4AddressHelper", false);

JSIL.MakeClass("System.Object", "System.IPv6AddressHelper", false);

JSIL.MakeClass("System.Object", "System.UncNameHelper", false);

JSIL.MakeEnum(
	"System.UriSyntaxFlags", {
		MustHaveAuthority: 1, 
		OptionalAuthority: 2, 
		MayHaveUserInfo: 4, 
		MayHavePort: 8, 
		MayHavePath: 16, 
		MayHaveQuery: 32, 
		MayHaveFragment: 64, 
		AllowEmptyHost: 128, 
		AllowUncHost: 256, 
		AllowDnsHost: 512, 
		AllowIPv4Host: 1024, 
		AllowIPv6Host: 2048, 
		AllowAnInternetHost: 3584, 
		AllowAnyOtherHost: 4096, 
		FileLikeUri: 8192, 
		MailToLikeUri: 16384, 
		V1_UnknownUri: 65536, 
		SimpleUserSyntax: 131072, 
		BuiltInSyntax: 262144, 
		ParserSchemeOnly: 524288, 
		AllowDOSPath: 1048576, 
		PathIsRooted: 2097152, 
		ConvertPathSlashes: 4194304, 
		CompressPath: 8388608, 
		CanonicalizeAsFilePath: 16777216, 
		UnEscapeDotsAndSlashes: 33554432, 
		AllowIdn: 67108864, 
		AllowIriParsing: 268435456
	}, true
);

JSIL.MakeEnum(
	"System.UriKind", {
		RelativeOrAbsolute: 0, 
		Absolute: 1, 
		Relative: 2
	}, false
);

JSIL.MakeEnum(
	"System.UriComponents", {
		Scheme: 1, 
		UserInfo: 2, 
		Host: 4, 
		Port: 8, 
		Path: 16, 
		Query: 32, 
		Fragment: 64, 
		StrongPort: 128, 
		KeepDelimiter: 1073741824, 
		SerializationInfoString: -2147483648, 
		AbsoluteUri: 127, 
		HostAndPort: 132, 
		StrongAuthority: 134, 
		SchemeAndServer: 13, 
		HttpRequestUrl: 61, 
		PathAndQuery: 48
	}, true
);

JSIL.MakeEnum(
	"System.UriFormat", {
		UriEscaped: 1, 
		Unescaped: 2, 
		SafeUnescaped: 3
	}, false
);

JSIL.MakeEnum(
	"System.UriIdnScope", {
		None: 0, 
		AllExceptIntranet: 1, 
		All: 2
	}, false
);

JSIL.MakeStaticClass("System.UriHelper", false);
JSIL.MakeEnum(
	"System.UriHelper/UnescapeMode", {
		CopyOnly: 0, 
		Escape: 1, 
		Unescape: 2, 
		EscapeUnescape: 3, 
		V1ToStringFlag: 4, 
		UnescapeAll: 8, 
		UnescapeAllOrThrow: 24
	}, true
);


JSIL.MakeStaticClass("System.UriExceptionHelper", false);
JSIL.MakeEnum(
	"System.UriExceptionHelper/ParsingError", {
		None: 0, 
		BadFormat: 1, 
		BadScheme: 2, 
		BadAuthority: 3, 
		EmptyUriString: 4, 
		LastRelativeUriOkErrIndex: 4, 
		SchemeLimit: 5, 
		SizeLimit: 6, 
		MustRootedPath: 7, 
		BadHostName: 8, 
		NonEmptyHost: 9, 
		BadPort: 10, 
		BadAuthorityTerminator: 11, 
		CannotCreateRelative: 12
	}, false
);


JSIL.MakeEnum(
	"System.UnescapeMode", {
		CopyOnly: 0, 
		Escape: 1, 
		Unescape: 2, 
		EscapeUnescape: 3, 
		V1ToStringFlag: 4, 
		UnescapeAll: 8, 
		UnescapeAllOrThrow: 24
	}, true
);

JSIL.MakeEnum(
	"System.ParsingError", {
		None: 0, 
		BadFormat: 1, 
		BadScheme: 2, 
		BadAuthority: 3, 
		EmptyUriString: 4, 
		LastRelativeUriOkErrIndex: 4, 
		SchemeLimit: 5, 
		SizeLimit: 6, 
		MustRootedPath: 7, 
		LastFatalErrIndex: 7, 
		BadHostName: 8, 
		NonEmptyHost: 9, 
		BadPort: 10, 
		BadAuthorityTerminator: 11, 
		CannotCreateRelative: 12
	}, false
);

JSIL.MakeEnum(
	"System.GenericUriParserOptions", {
		Default: 0, 
		GenericAuthority: 1, 
		AllowEmptyAuthority: 2, 
		NoUserInfo: 4, 
		NoPort: 8, 
		NoQuery: 16, 
		NoFragment: 32, 
		DontConvertPathBackslashes: 64, 
		DontCompressPath: 128, 
		DontUnescapePathDotsAndSlashes: 256, 
		Idn: 512, 
		IriParsing: 1024
	}, true
);

JSIL.MakeClass("System.UriParser", "System.GenericUriParser", true);

JSIL.MakeClass("System.UriParser", "System.HttpStyleUriParser", true);

JSIL.MakeClass("System.UriParser", "System.FtpStyleUriParser", true);

JSIL.MakeClass("System.UriParser", "System.FileStyleUriParser", true);

JSIL.MakeClass("System.Object", "System.ComponentModel.TypeConverter", true);

JSIL.MakeClass("System.ComponentModel.TypeConverter", "System.UriTypeConverter", true);

JSIL.MakeClass("System.Attribute", "System.ComponentModel.BindableAttribute", true);

JSIL.MakeEnum(
	"System.ComponentModel.BindingDirection", {
		OneWay: 0, 
		TwoWay: 1
	}, false
);

JSIL.MakeEnum(
	"System.ComponentModel.BindableSupport", {
		No: 0, 
		Yes: 1, 
		Default: 2
	}, false
);

JSIL.MakeClass("System.Attribute", "System.ComponentModel.BrowsableAttribute", true);

JSIL.MakeClass("System.EventArgs", "System.ComponentModel.CancelEventArgs", true);

JSIL.MakeClass("System.Object", "System.ComponentModel.ComponentCollection", true);

JSIL.MakeClass("System.Attribute", "System.ComponentModel.DesignTimeVisibleAttribute", true);

JSIL.MakeInterface(
	"System.ComponentModel.IChangeTracking", [], {
		"get_IsChanged": Function, 
		"AcceptChanges": Function, 
		"IsChanged": Property
	});

JSIL.MakeInterface(
	"System.ComponentModel.IComponent", [], {
		"get_Site": Function, 
		"set_Site": Function, 
		"add_Disposed": Function, 
		"remove_Disposed": Function, 
		"Site": Property
	});

JSIL.MakeInterface(
	"System.ComponentModel.IDataErrorInfo", [], {
		"get_Item": Function, 
		"get_Error": Function, 
		"Item": Property, 
		"Error": Property
	});

JSIL.MakeInterface(
	"System.ComponentModel.IEditableObject", [], {
		"BeginEdit": Function, 
		"EndEdit": Function, 
		"CancelEdit": Function
	});

JSIL.MakeInterface(
	"System.ComponentModel.INotifyPropertyChanged", [], {
		"add_PropertyChanged": Function, 
		"remove_PropertyChanged": Function
	});

JSIL.MakeInterface(
	"System.ComponentModel.IRevertibleChangeTracking", [], {
		"RejectChanges": Function
	});

JSIL.MakeInterface(
	"System.ComponentModel.ISupportInitialize", [], {
		"BeginInit": Function, 
		"EndInit": Function
	});

JSIL.MakeInterface(
	"System.ComponentModel.ITypeDescriptorContext", [], {
		"get_Container": Function, 
		"get_Instance": Function, 
		"get_PropertyDescriptor": Function, 
		"OnComponentChanging": Function, 
		"OnComponentChanged": Function, 
		"Container": Property, 
		"Instance": Property, 
		"PropertyDescriptor": Property
	});

JSIL.MakeClass("System.EventArgs", "System.ComponentModel.PropertyChangedEventArgs", true);

JSIL.MakeDelegate("System.ComponentModel.PropertyChangedEventHandler");

JSIL.MakeClass("System.EventArgs", "System.ComponentModel.ProgressChangedEventArgs", true);

JSIL.MakeDelegate("System.ComponentModel.ProgressChangedEventHandler");

JSIL.MakeClass("System.Object", "System.ComponentModel.PropertyDescriptor", true);

JSIL.MakeClass("System.Attribute", "System.ComponentModel.ReadOnlyAttribute", true);

JSIL.MakeClass("System.EventArgs", "System.ComponentModel.AsyncCompletedEventArgs", true);

JSIL.MakeDelegate("System.ComponentModel.AsyncCompletedEventHandler");

JSIL.MakeClass("System.Object", "System.ComponentModel.AsyncOperation", true);

JSIL.MakeStaticClass("System.ComponentModel.AsyncOperationManager", true);

JSIL.MakeClass("System.Attribute", "System.ComponentModel.TypeConverterAttribute", true);

JSIL.MakeDelegate("System.ComponentModel.DoWorkEventHandler");

JSIL.MakeClass("System.EventArgs", "System.ComponentModel.DoWorkEventArgs", true);

JSIL.MakeDelegate("System.ComponentModel.RunWorkerCompletedEventHandler");

JSIL.MakeClass("System.ComponentModel.AsyncCompletedEventArgs", "System.ComponentModel.RunWorkerCompletedEventArgs", true);

JSIL.MakeClass("System.Object", "System.ComponentModel.BackgroundWorker", true);

JSIL.MakeEnum(
	"System.ComponentModel.ListSortDirection", {
		Ascending: 0, 
		Descending: 1
	}, false
);

System.ComponentModel.DescriptionAttribute.prototype._ctor$0 = function () {
	this._ctor$1(System.String.Empty);
};
System.ComponentModel.DescriptionAttribute.prototype._ctor$1 = function (description) {
	System.Attribute.prototype._ctor.call(this);
	this.description = description;
};
System.ComponentModel.DescriptionAttribute.prototype.get_Description = function () {
	return this.DescriptionValue;
};
System.ComponentModel.DescriptionAttribute.prototype.get_DescriptionValue = function () {
	return this.description;
};
System.ComponentModel.DescriptionAttribute.prototype.set_DescriptionValue = function (value) {
	this.description = value;
};
System.ComponentModel.DescriptionAttribute.prototype.Equals = function (obj) {
	if (obj === this) {
		return true;
	}
	var descriptionAttribute = JSIL.TryCast(obj, System.ComponentModel.DescriptionAttribute);
	return ((descriptionAttribute !== null) && (descriptionAttribute.Description == this.Description));
};
System.ComponentModel.DescriptionAttribute.prototype.GetHashCode = function () {
	return this.Description.GetHashCode();
};
JSIL.OverloadedMethod(System.ComponentModel.DescriptionAttribute.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.String]]
	]);
JSIL.MakeProperty(System.ComponentModel.DescriptionAttribute.prototype, "Description", 
	System.ComponentModel.DescriptionAttribute.prototype.get_Description, null);
JSIL.MakeProperty(System.ComponentModel.DescriptionAttribute.prototype, "DescriptionValue", 
	System.ComponentModel.DescriptionAttribute.prototype.get_DescriptionValue, System.ComponentModel.DescriptionAttribute.prototype.set_DescriptionValue);
System.ComponentModel.DescriptionAttribute.Default = null;
System.ComponentModel.DescriptionAttribute.prototype.description = null;
System.ComponentModel.DescriptionAttribute._cctor = function () {
	System.ComponentModel.DescriptionAttribute.Default = JSIL.New(System.ComponentModel.DescriptionAttribute, "_ctor$0", []);
};

$asm04.System.SRDescriptionAttribute.prototype._ctor = function (description) {
	System.ComponentModel.DescriptionAttribute.prototype._ctor$1.call(this, description);
};
$asm04.System.SRDescriptionAttribute.prototype.get_Description = function () {
	if (!this.replaced) {
		this.replaced = true;
		System.ComponentModel.DescriptionAttribute.prototype.set_DescriptionValue.call(this, $asm04.System.SR.GetString$2(System.ComponentModel.DescriptionAttribute.prototype.get_Description.call(this)));
	}
	return System.ComponentModel.DescriptionAttribute.prototype.get_Description.call(this);
};
JSIL.MakeProperty($asm04.System.SRDescriptionAttribute.prototype, "Description", 
	$asm04.System.SRDescriptionAttribute.prototype.get_Description, null);
$asm04.System.SRDescriptionAttribute.prototype.replaced = false;

System.ComponentModel.CategoryAttribute.get_Action = function () {
	if (System.ComponentModel.CategoryAttribute.action === null) {
		System.ComponentModel.CategoryAttribute.action = JSIL.New(System.ComponentModel.CategoryAttribute, "_ctor$1", ["Action"]);
	}
	return System.ComponentModel.CategoryAttribute.action;
};
System.ComponentModel.CategoryAttribute.get_Appearance = function () {
	if (System.ComponentModel.CategoryAttribute.appearance === null) {
		System.ComponentModel.CategoryAttribute.appearance = JSIL.New(System.ComponentModel.CategoryAttribute, "_ctor$1", ["Appearance"]);
	}
	return System.ComponentModel.CategoryAttribute.appearance;
};
System.ComponentModel.CategoryAttribute.get_Asynchronous = function () {
	if (System.ComponentModel.CategoryAttribute.asynchronous === null) {
		System.ComponentModel.CategoryAttribute.asynchronous = JSIL.New(System.ComponentModel.CategoryAttribute, "_ctor$1", ["Asynchronous"]);
	}
	return System.ComponentModel.CategoryAttribute.asynchronous;
};
System.ComponentModel.CategoryAttribute.get_Behavior = function () {
	if (System.ComponentModel.CategoryAttribute.behavior === null) {
		System.ComponentModel.CategoryAttribute.behavior = JSIL.New(System.ComponentModel.CategoryAttribute, "_ctor$1", ["Behavior"]);
	}
	return System.ComponentModel.CategoryAttribute.behavior;
};
System.ComponentModel.CategoryAttribute.get_Data = function () {
	if (System.ComponentModel.CategoryAttribute.data === null) {
		System.ComponentModel.CategoryAttribute.data = JSIL.New(System.ComponentModel.CategoryAttribute, "_ctor$1", ["Data"]);
	}
	return System.ComponentModel.CategoryAttribute.data;
};
System.ComponentModel.CategoryAttribute.get_Default = function () {
	if (System.ComponentModel.CategoryAttribute.defAttr === null) {
		System.ComponentModel.CategoryAttribute.defAttr = JSIL.New(System.ComponentModel.CategoryAttribute, "_ctor$0", []);
	}
	return System.ComponentModel.CategoryAttribute.defAttr;
};
System.ComponentModel.CategoryAttribute.get_Design = function () {
	if (System.ComponentModel.CategoryAttribute.design === null) {
		System.ComponentModel.CategoryAttribute.design = JSIL.New(System.ComponentModel.CategoryAttribute, "_ctor$1", ["Design"]);
	}
	return System.ComponentModel.CategoryAttribute.design;
};
System.ComponentModel.CategoryAttribute.get_DragDrop = function () {
	if (System.ComponentModel.CategoryAttribute.dragDrop === null) {
		System.ComponentModel.CategoryAttribute.dragDrop = JSIL.New(System.ComponentModel.CategoryAttribute, "_ctor$1", ["DragDrop"]);
	}
	return System.ComponentModel.CategoryAttribute.dragDrop;
};
System.ComponentModel.CategoryAttribute.get_Focus = function () {
	if (System.ComponentModel.CategoryAttribute.focus === null) {
		System.ComponentModel.CategoryAttribute.focus = JSIL.New(System.ComponentModel.CategoryAttribute, "_ctor$1", ["Focus"]);
	}
	return System.ComponentModel.CategoryAttribute.focus;
};
System.ComponentModel.CategoryAttribute.get_Format = function () {
	if (System.ComponentModel.CategoryAttribute.format === null) {
		System.ComponentModel.CategoryAttribute.format = JSIL.New(System.ComponentModel.CategoryAttribute, "_ctor$1", ["Format"]);
	}
	return System.ComponentModel.CategoryAttribute.format;
};
System.ComponentModel.CategoryAttribute.get_Key = function () {
	if (System.ComponentModel.CategoryAttribute.key === null) {
		System.ComponentModel.CategoryAttribute.key = JSIL.New(System.ComponentModel.CategoryAttribute, "_ctor$1", ["Key"]);
	}
	return System.ComponentModel.CategoryAttribute.key;
};
System.ComponentModel.CategoryAttribute.get_Layout = function () {
	if (System.ComponentModel.CategoryAttribute.layout === null) {
		System.ComponentModel.CategoryAttribute.layout = JSIL.New(System.ComponentModel.CategoryAttribute, "_ctor$1", ["Layout"]);
	}
	return System.ComponentModel.CategoryAttribute.layout;
};
System.ComponentModel.CategoryAttribute.get_Mouse = function () {
	if (System.ComponentModel.CategoryAttribute.mouse === null) {
		System.ComponentModel.CategoryAttribute.mouse = JSIL.New(System.ComponentModel.CategoryAttribute, "_ctor$1", ["Mouse"]);
	}
	return System.ComponentModel.CategoryAttribute.mouse;
};
System.ComponentModel.CategoryAttribute.get_WindowStyle = function () {
	if (System.ComponentModel.CategoryAttribute.windowStyle === null) {
		System.ComponentModel.CategoryAttribute.windowStyle = JSIL.New(System.ComponentModel.CategoryAttribute, "_ctor$1", ["WindowStyle"]);
	}
	return System.ComponentModel.CategoryAttribute.windowStyle;
};
System.ComponentModel.CategoryAttribute.prototype._ctor$0 = function () {
	this._ctor$1("Default");
};
System.ComponentModel.CategoryAttribute.prototype._ctor$1 = function (category) {
	System.Attribute.prototype._ctor.call(this);
	this.categoryValue = category;
	this.localized = false;
};
System.ComponentModel.CategoryAttribute.prototype.get_Category = function () {
	if (!this.localized) {
		this.localized = true;
		var localizedString = this.GetLocalizedString(this.categoryValue);
		if (localizedString !== null) {
			this.categoryValue = localizedString;
		}
	}
	return this.categoryValue;
};
System.ComponentModel.CategoryAttribute.prototype.Equals = function (obj) {
	return ((obj === this) || ((JSIL.TryCast(obj, System.ComponentModel.CategoryAttribute) !== null) && 
			this.Category.Equals$1(JSIL.Cast(obj, System.ComponentModel.CategoryAttribute).Category)));
};
System.ComponentModel.CategoryAttribute.prototype.GetHashCode = function () {
	return this.Category.GetHashCode();
};
System.ComponentModel.CategoryAttribute.prototype.GetLocalizedString = function (value) {
	var flag = new JSIL.Variable(false);
	var string = $asm04.System.SR.GetString$3(("PropertyCategory" + value), /* ref */ flag);
	if (flag.value) {
		return null;
	}
	return string;
};
JSIL.OverloadedMethod(System.ComponentModel.CategoryAttribute.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.String]]
	]);
JSIL.MakeProperty(System.ComponentModel.CategoryAttribute, "Action", 
	System.ComponentModel.CategoryAttribute.get_Action, null);
JSIL.MakeProperty(System.ComponentModel.CategoryAttribute, "Appearance", 
	System.ComponentModel.CategoryAttribute.get_Appearance, null);
JSIL.MakeProperty(System.ComponentModel.CategoryAttribute, "Asynchronous", 
	System.ComponentModel.CategoryAttribute.get_Asynchronous, null);
JSIL.MakeProperty(System.ComponentModel.CategoryAttribute, "Behavior", 
	System.ComponentModel.CategoryAttribute.get_Behavior, null);
JSIL.MakeProperty(System.ComponentModel.CategoryAttribute, "Data", 
	System.ComponentModel.CategoryAttribute.get_Data, null);
JSIL.MakeProperty(System.ComponentModel.CategoryAttribute, "Default", 
	System.ComponentModel.CategoryAttribute.get_Default, null);
JSIL.MakeProperty(System.ComponentModel.CategoryAttribute, "Design", 
	System.ComponentModel.CategoryAttribute.get_Design, null);
JSIL.MakeProperty(System.ComponentModel.CategoryAttribute, "DragDrop", 
	System.ComponentModel.CategoryAttribute.get_DragDrop, null);
JSIL.MakeProperty(System.ComponentModel.CategoryAttribute, "Focus", 
	System.ComponentModel.CategoryAttribute.get_Focus, null);
JSIL.MakeProperty(System.ComponentModel.CategoryAttribute, "Format", 
	System.ComponentModel.CategoryAttribute.get_Format, null);
JSIL.MakeProperty(System.ComponentModel.CategoryAttribute, "Key", 
	System.ComponentModel.CategoryAttribute.get_Key, null);
JSIL.MakeProperty(System.ComponentModel.CategoryAttribute, "Layout", 
	System.ComponentModel.CategoryAttribute.get_Layout, null);
JSIL.MakeProperty(System.ComponentModel.CategoryAttribute, "Mouse", 
	System.ComponentModel.CategoryAttribute.get_Mouse, null);
JSIL.MakeProperty(System.ComponentModel.CategoryAttribute, "WindowStyle", 
	System.ComponentModel.CategoryAttribute.get_WindowStyle, null);
JSIL.MakeProperty(System.ComponentModel.CategoryAttribute.prototype, "Category", 
	System.ComponentModel.CategoryAttribute.prototype.get_Category, null);
System.ComponentModel.CategoryAttribute.appearance = null;
System.ComponentModel.CategoryAttribute.asynchronous = null;
System.ComponentModel.CategoryAttribute.behavior = null;
System.ComponentModel.CategoryAttribute.data = null;
System.ComponentModel.CategoryAttribute.design = null;
System.ComponentModel.CategoryAttribute.action = null;
System.ComponentModel.CategoryAttribute.format = null;
System.ComponentModel.CategoryAttribute.layout = null;
System.ComponentModel.CategoryAttribute.mouse = null;
System.ComponentModel.CategoryAttribute.key = null;
System.ComponentModel.CategoryAttribute.focus = null;
System.ComponentModel.CategoryAttribute.windowStyle = null;
System.ComponentModel.CategoryAttribute.dragDrop = null;
System.ComponentModel.CategoryAttribute.defAttr = null;
System.ComponentModel.CategoryAttribute.prototype.localized = false;
System.ComponentModel.CategoryAttribute.prototype.categoryValue = null;

$asm04.System.SRCategoryAttribute.prototype._ctor = function (category) {
	System.ComponentModel.CategoryAttribute.prototype._ctor$1.call(this, category);
};
$asm04.System.SRCategoryAttribute.prototype.GetLocalizedString = function (value) {
	return $asm04.System.SR.GetString$2(value);
};

$asm04.System.SR.get_InternalSyncObject = function () {
	if ($asm04.System.SR.s_InternalSyncObject === null) {
		var value = new System.Object();
		System.Threading.Interlocked.CompareExchange$b1(System.Object)(/* ref */ new JSIL.MemberReference($asm04.System.SR, "s_InternalSyncObject"), value, null);
	}
	return $asm04.System.SR.s_InternalSyncObject;
};
$asm04.System.SR.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
	var assembly = JSIL.GetType(this).Assembly;
	this.resources = JSIL.New(System.Resources.ResourceManager, "_ctor$1", ["System", assembly]);
	try {
		var assembly2 = System.Reflection.Assembly.Load$0("System.debug.resources, Version=2.0.5.0, Culture=en-US, PublicKeyToken=7cec85d7bea7798e");
		this.debugResources = JSIL.New(System.Resources.ResourceManager, "_ctor$1", ["System.debug", assembly2]);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.IO.FileNotFoundException)) {
		} else {
			throw $exception;
		}
	}
	this.fallbackResources = JSIL.New(System.Resources.ResourceManager, "_ctor$1", ["mscorlib", System.Object.Assembly]);
};
$asm04.System.SR.GetLoader = function () {
	var internalSyncObject = null;
	if ($asm04.System.SR.loader === null) {
		System.Threading.Monitor.Enter((internalSyncObject = $asm04.System.SR.InternalSyncObject));
		try {
			if ($asm04.System.SR.loader === null) {
				$asm04.System.SR.loader = new $asm04.System.SR();
			}
		} finally {
			System.Threading.Monitor.Exit(internalSyncObject);
		}
	}
	return $asm04.System.SR.loader;
};
$asm04.System.SR.get_Culture = function () {
	return null;
};
$asm04.System.SR.GetString$0 = function (name, args) {
	var flag = new JSIL.Variable(false);
	return $asm04.System.SR.GetString$1(name, /* ref */ flag, args);
};
$asm04.System.SR.GetString$1 = function (name, /* ref */ fallbackUsed, args) {
	var sR = $asm04.System.SR.GetLoader();
	var text = null;
	fallbackUsed.value = false;
	if (sR !== null) {
		text = sR.resources.GetString$1(name, $asm04.System.SR.Culture);
		if (!(text || (sR.debugResources === null))) {
			text = sR.debugResources.GetString$1(name, $asm04.System.SR.Culture);
		}
		if (text !== null) {
			if (!((args === null) || (args.length <= 0))) {
			__loop0__: 
				for (var i = 0; i < args.length; ++i) {
					if (args[i]) {
						var text2 = args[i].toString();
						if (!((text2 === null) || (text2.length <= 1024))) {
							args[i] = ((text2.Substring$1(0, 1021) + "..."));
						}
					}
				}
				return System.String.Format(System.Globalization.CultureInfo.CurrentCulture, text, args);
			}
			return text;
		}
	}
	fallbackUsed.value = true;
	text = $asm04.System.SR.GetFallbackMessage(name, args);
	return text;
};
$asm04.System.SR.GetString$2 = function (name) {
	var text = $asm04.System.SR.GetStringHelper(name);
	if (text === null) {
		text = $asm04.System.SR.GetFallbackMessage(name, null);
	}
	return text;
};
$asm04.System.SR.GetString$3 = function (name, /* ref */ usedFallback) {
	var text = $asm04.System.SR.GetStringHelper(name);
	if (text === null) {
		text = $asm04.System.SR.GetFallbackMessage(name, null);
		usedFallback.value = true;
	} else {
		usedFallback.value = false;
	}
	return text;
};
$asm04.System.SR.GetObject = function (name) {
	var sR = $asm04.System.SR.GetLoader();
	var obj = null;
	if (sR !== null) {
		obj = sR.resources.GetObject$1(name, $asm04.System.SR.Culture);
		if (!(obj || (sR.debugResources === null))) {
			obj = sR.debugResources.GetObject$1(name, $asm04.System.SR.Culture);
		}
	}
	if (obj === null) {
		obj = $asm04.System.SR.GetFallbackMessage(name, null);
	}
	return obj;
};
$asm04.System.SR.GetStringHelper = function (name) {
	var sR = $asm04.System.SR.GetLoader();
	var text = null;
	if (sR !== null) {
		text = sR.resources.GetString$1(name, $asm04.System.SR.Culture);
		if (!(text || (sR.debugResources === null))) {
			text = sR.debugResources.GetString$1(name, $asm04.System.SR.Culture);
		}
	}
	return text;
};
$asm04.System.SR.GetFallbackMessage = function (name, args) {
	var sR = $asm04.System.SR.GetLoader();
	var text = null;
	if (!((sR === null) || (sR.fallbackResources === null))) {
		var string = sR.fallbackResources.GetString$1("NoDebugResources", $asm04.System.SR.Culture);
		if (string !== null) {
			var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
			if (args !== null) {
			__loop0__: 
				for (var i = 0; i < args.length; ++i) {
					if (args[i]) {
						var text2 = args[i].toString();
						if (text2 !== null) {
							if (text2.length <= 1024) {
								stringBuilder.Append$2(text2);
							} else {
								stringBuilder.Append$2((text2.Substring$1(0, 1021) + "..."));
							}
							if (i < (args.length - 1)) {
								stringBuilder.Append$2(System.Globalization.CultureInfo.CurrentCulture.TextInfo.ListSeparator);
							}
						}
					}
				}
			}
			var text3 = stringBuilder.toString();
			if (text3 === null) {
				text3 = "";
			}
			text = System.String.Format(System.Globalization.CultureInfo.CurrentCulture, string, [name, text3, "4.0.60310.0", "System.dll", $asm04.System.SR.UriEncode(name)]);
		}
	}
	if (text === null) {
		text = name;
	}
	return text;
};
$asm04.System.SR.UriEncode = function (url) {
	if (url === null) {
		return null;
	}
	var array = System.Text.Encoding.UTF8.GetBytes$3(url);
	var num = 0;
	var num2 = 0;
	var num3 = array.length;
__loop0__: 
	for (var i = 0; i < num3; ++i) {
		var c = array[i];
		if (c === " ") {
			++num;
		} else if (!$asm04.System.SR.IsSafe(c)) {
			++num2;
		}
	}
	if (!((num === 0) && (num2 === 0))) {
		var array2 = JSIL.Array.New(System.Byte, (num3 + (num2 * 2)));
		var num4 = 0;
	__loop1__: 
		for (var j = 0; j < num3; ++j) {
			var b = array[j];
			var c2 = String.fromCharCode(b);
			if ($asm04.System.SR.IsSafe(c2)) {
				array2[num4++] = b;
			} else if (c2 === " ") {
				array2[num4++] = 43;
			} else {
				array2[num4++] = 37;
				array2[num4++] = ($asm04.System.SR.IntToHex(((b >> 4) & 15))).charCodeAt(0);
				array2[num4++] = ($asm04.System.SR.IntToHex((b & 15))).charCodeAt(0);
			}
		}
		array = array2;
	}
	return System.Text.Encoding.UTF8.GetString$1(array, 0, array.length);
};
$asm04.System.SR.IntToHex = function (n) {
	if (n <= 9) {
		return (n + 48);
	}
	return ((n - 10) + 97);
};
$asm04.System.SR.IsSafe = function (ch) {
	if (!(!((ch >= "a") && 
				(ch <= "z")) && 
			!((ch >= "A") && 
				(ch <= "Z")) && ((ch < "0") || 
				(ch > "9")))) {
		return true;
	}
	if (ch !== "!") {
		switch (ch) {
			case "'": 
			case "(": 
			case ")": 
			case "*": 
			case "-": 
			case ".": 
				return true;
			case "+": 
			case ",": 
				break;
			default: 
				if (ch === "_") {
					return true;
				}
				break;
		}
		return false;
	}
	return true;
};
JSIL.OverloadedMethod($asm04.System.SR, "GetString", [
		["GetString$0", [System.String, System.Array.Of(System.Object)]], 
		["GetString$1", [System.String, JSIL.Reference.Of(System.Boolean), System.Array.Of(System.Object)]], 
		["GetString$2", [System.String]], 
		["GetString$3", [System.String, JSIL.Reference.Of(System.Boolean)]]
	]);
JSIL.MakeProperty($asm04.System.SR, "InternalSyncObject", 
	$asm04.System.SR.get_InternalSyncObject, null);
JSIL.MakeProperty($asm04.System.SR, "Culture", 
	$asm04.System.SR.get_Culture, null);
Object.defineProperty($asm04.System.SR, "RTL", {
		"value": "RTL"}
);
Object.defineProperty($asm04.System.SR, "ContinueButtonText", {
		"value": "ContinueButtonText"}
);
Object.defineProperty($asm04.System.SR, "DebugAssertBanner", {
		"value": "DebugAssertBanner"}
);
Object.defineProperty($asm04.System.SR, "DebugAssertShortMessage", {
		"value": "DebugAssertShortMessage"}
);
Object.defineProperty($asm04.System.SR, "DebugAssertLongMessage", {
		"value": "DebugAssertLongMessage"}
);
Object.defineProperty($asm04.System.SR, "DebugMessageTruncated", {
		"value": "DebugMessageTruncated"}
);
Object.defineProperty($asm04.System.SR, "DebugAssertTitleShort", {
		"value": "DebugAssertTitleShort"}
);
Object.defineProperty($asm04.System.SR, "DebugAssertTitle", {
		"value": "DebugAssertTitle"}
);
Object.defineProperty($asm04.System.SR, "ArgumentNull_Key", {
		"value": "ArgumentNull_Key"}
);
Object.defineProperty($asm04.System.SR, "Argument_AddingDuplicate", {
		"value": "Argument_AddingDuplicate"}
);
Object.defineProperty($asm04.System.SR, "Argument_InvalidValue", {
		"value": "Argument_InvalidValue"}
);
Object.defineProperty($asm04.System.SR, "ArgumentOutOfRange_NeedNonNegNum", {
		"value": "ArgumentOutOfRange_NeedNonNegNum"}
);
Object.defineProperty($asm04.System.SR, "ArgumentOutOfRange_InvalidThreshold", {
		"value": "ArgumentOutOfRange_InvalidThreshold"}
);
Object.defineProperty($asm04.System.SR, "InvalidOperation_EnumFailedVersion", {
		"value": "InvalidOperation_EnumFailedVersion"}
);
Object.defineProperty($asm04.System.SR, "InvalidOperation_EnumOpCantHappen", {
		"value": "InvalidOperation_EnumOpCantHappen"}
);
Object.defineProperty($asm04.System.SR, "Arg_MultiRank", {
		"value": "Arg_MultiRank"}
);
Object.defineProperty($asm04.System.SR, "Arg_NonZeroLowerBound", {
		"value": "Arg_NonZeroLowerBound"}
);
Object.defineProperty($asm04.System.SR, "Arg_InsufficientSpace", {
		"value": "Arg_InsufficientSpace"}
);
Object.defineProperty($asm04.System.SR, "NotSupported_EnumeratorReset", {
		"value": "NotSupported_EnumeratorReset"}
);
Object.defineProperty($asm04.System.SR, "Invalid_Array_Type", {
		"value": "Invalid_Array_Type"}
);
Object.defineProperty($asm04.System.SR, "Serialization_InvalidOnDeser", {
		"value": "Serialization_InvalidOnDeser"}
);
Object.defineProperty($asm04.System.SR, "Serialization_MissingValues", {
		"value": "Serialization_MissingValues"}
);
Object.defineProperty($asm04.System.SR, "Serialization_MismatchedCount", {
		"value": "Serialization_MismatchedCount"}
);
Object.defineProperty($asm04.System.SR, "ExternalLinkedListNode", {
		"value": "ExternalLinkedListNode"}
);
Object.defineProperty($asm04.System.SR, "LinkedListNodeIsAttached", {
		"value": "LinkedListNodeIsAttached"}
);
Object.defineProperty($asm04.System.SR, "LinkedListEmpty", {
		"value": "LinkedListEmpty"}
);
Object.defineProperty($asm04.System.SR, "Arg_WrongType", {
		"value": "Arg_WrongType"}
);
Object.defineProperty($asm04.System.SR, "Argument_ItemNotExist", {
		"value": "Argument_ItemNotExist"}
);
Object.defineProperty($asm04.System.SR, "Argument_ImplementIComparable", {
		"value": "Argument_ImplementIComparable"}
);
Object.defineProperty($asm04.System.SR, "InvalidOperation_EmptyCollection", {
		"value": "InvalidOperation_EmptyCollection"}
);
Object.defineProperty($asm04.System.SR, "InvalidOperation_EmptyQueue", {
		"value": "InvalidOperation_EmptyQueue"}
);
Object.defineProperty($asm04.System.SR, "InvalidOperation_EmptyStack", {
		"value": "InvalidOperation_EmptyStack"}
);
Object.defineProperty($asm04.System.SR, "InvalidOperation_CannotRemoveFromStackOrQueue", {
		"value": "InvalidOperation_CannotRemoveFromStackOrQueue"}
);
Object.defineProperty($asm04.System.SR, "ArgumentOutOfRange_Index", {
		"value": "ArgumentOutOfRange_Index"}
);
Object.defineProperty($asm04.System.SR, "ArgumentOutOfRange_SmallCapacity", {
		"value": "ArgumentOutOfRange_SmallCapacity"}
);
Object.defineProperty($asm04.System.SR, "Arg_ArrayPlusOffTooSmall", {
		"value": "Arg_ArrayPlusOffTooSmall"}
);
Object.defineProperty($asm04.System.SR, "NotSupported_KeyCollectionSet", {
		"value": "NotSupported_KeyCollectionSet"}
);
Object.defineProperty($asm04.System.SR, "NotSupported_ValueCollectionSet", {
		"value": "NotSupported_ValueCollectionSet"}
);
Object.defineProperty($asm04.System.SR, "NotSupported_ReadOnlyCollection", {
		"value": "NotSupported_ReadOnlyCollection"}
);
Object.defineProperty($asm04.System.SR, "NotSupported_SortedListNestedWrite", {
		"value": "NotSupported_SortedListNestedWrite"}
);
Object.defineProperty($asm04.System.SR, "UriTypeConverter_ConvertFrom_CannotConvert", {
		"value": "UriTypeConverter_ConvertFrom_CannotConvert"}
);
Object.defineProperty($asm04.System.SR, "UriTypeConverter_ConvertTo_CannotConvert", {
		"value": "UriTypeConverter_ConvertTo_CannotConvert"}
);
Object.defineProperty($asm04.System.SR, "InvalidLowBoundArgument", {
		"value": "InvalidLowBoundArgument"}
);
Object.defineProperty($asm04.System.SR, "DuplicateComponentName", {
		"value": "DuplicateComponentName"}
);
Object.defineProperty($asm04.System.SR, "NotImplemented", {
		"value": "NotImplemented"}
);
Object.defineProperty($asm04.System.SR, "OutOfMemory", {
		"value": "OutOfMemory"}
);
Object.defineProperty($asm04.System.SR, "EOF", {
		"value": "EOF"}
);
Object.defineProperty($asm04.System.SR, "IOError", {
		"value": "IOError"}
);
Object.defineProperty($asm04.System.SR, "BadChar", {
		"value": "BadChar"}
);
Object.defineProperty($asm04.System.SR, "toStringNone", {
		"value": "toStringNone"}
);
Object.defineProperty($asm04.System.SR, "toStringUnknown", {
		"value": "toStringUnknown"}
);
Object.defineProperty($asm04.System.SR, "InvalidEnum", {
		"value": "InvalidEnum"}
);
Object.defineProperty($asm04.System.SR, "IndexOutOfRange", {
		"value": "IndexOutOfRange"}
);
Object.defineProperty($asm04.System.SR, "ErrorPropertyAccessorException", {
		"value": "ErrorPropertyAccessorException"}
);
Object.defineProperty($asm04.System.SR, "InvalidOperation", {
		"value": "InvalidOperation"}
);
Object.defineProperty($asm04.System.SR, "EmptyStack", {
		"value": "EmptyStack"}
);
Object.defineProperty($asm04.System.SR, "OnlyAllowedOnce", {
		"value": "OnlyAllowedOnce"}
);
Object.defineProperty($asm04.System.SR, "BeginIndexNotNegative", {
		"value": "BeginIndexNotNegative"}
);
Object.defineProperty($asm04.System.SR, "LengthNotNegative", {
		"value": "LengthNotNegative"}
);
Object.defineProperty($asm04.System.SR, "UnimplementedState", {
		"value": "UnimplementedState"}
);
Object.defineProperty($asm04.System.SR, "UnexpectedOpcode", {
		"value": "UnexpectedOpcode"}
);
Object.defineProperty($asm04.System.SR, "NoResultOnFailed", {
		"value": "NoResultOnFailed"}
);
Object.defineProperty($asm04.System.SR, "UnterminatedBracket", {
		"value": "UnterminatedBracket"}
);
Object.defineProperty($asm04.System.SR, "TooManyParens", {
		"value": "TooManyParens"}
);
Object.defineProperty($asm04.System.SR, "NestedQuantify", {
		"value": "NestedQuantify"}
);
Object.defineProperty($asm04.System.SR, "QuantifyAfterNothing", {
		"value": "QuantifyAfterNothing"}
);
Object.defineProperty($asm04.System.SR, "InternalError", {
		"value": "InternalError"}
);
Object.defineProperty($asm04.System.SR, "IllegalRange", {
		"value": "IllegalRange"}
);
Object.defineProperty($asm04.System.SR, "NotEnoughParens", {
		"value": "NotEnoughParens"}
);
Object.defineProperty($asm04.System.SR, "BadClassInCharRange", {
		"value": "BadClassInCharRange"}
);
Object.defineProperty($asm04.System.SR, "ReversedCharRange", {
		"value": "ReversedCharRange"}
);
Object.defineProperty($asm04.System.SR, "UndefinedReference", {
		"value": "UndefinedReference"}
);
Object.defineProperty($asm04.System.SR, "MalformedReference", {
		"value": "MalformedReference"}
);
Object.defineProperty($asm04.System.SR, "UnrecognizedGrouping", {
		"value": "UnrecognizedGrouping"}
);
Object.defineProperty($asm04.System.SR, "UnterminatedComment", {
		"value": "UnterminatedComment"}
);
Object.defineProperty($asm04.System.SR, "IllegalEndEscape", {
		"value": "IllegalEndEscape"}
);
Object.defineProperty($asm04.System.SR, "MalformedNameRef", {
		"value": "MalformedNameRef"}
);
Object.defineProperty($asm04.System.SR, "UndefinedBackref", {
		"value": "UndefinedBackref"}
);
Object.defineProperty($asm04.System.SR, "UndefinedNameRef", {
		"value": "UndefinedNameRef"}
);
Object.defineProperty($asm04.System.SR, "TooFewHex", {
		"value": "TooFewHex"}
);
Object.defineProperty($asm04.System.SR, "MissingControl", {
		"value": "MissingControl"}
);
Object.defineProperty($asm04.System.SR, "UnrecognizedControl", {
		"value": "UnrecognizedControl"}
);
Object.defineProperty($asm04.System.SR, "UnrecognizedEscape", {
		"value": "UnrecognizedEscape"}
);
Object.defineProperty($asm04.System.SR, "IllegalCondition", {
		"value": "IllegalCondition"}
);
Object.defineProperty($asm04.System.SR, "TooManyAlternates", {
		"value": "TooManyAlternates"}
);
Object.defineProperty($asm04.System.SR, "MakeException", {
		"value": "MakeException"}
);
Object.defineProperty($asm04.System.SR, "IncompleteSlashP", {
		"value": "IncompleteSlashP"}
);
Object.defineProperty($asm04.System.SR, "MalformedSlashP", {
		"value": "MalformedSlashP"}
);
Object.defineProperty($asm04.System.SR, "InvalidGroupName", {
		"value": "InvalidGroupName"}
);
Object.defineProperty($asm04.System.SR, "CapnumNotZero", {
		"value": "CapnumNotZero"}
);
Object.defineProperty($asm04.System.SR, "AlternationCantCapture", {
		"value": "AlternationCantCapture"}
);
Object.defineProperty($asm04.System.SR, "AlternationCantHaveComment", {
		"value": "AlternationCantHaveComment"}
);
Object.defineProperty($asm04.System.SR, "CaptureGroupOutOfRange", {
		"value": "CaptureGroupOutOfRange"}
);
Object.defineProperty($asm04.System.SR, "SubtractionMustBeLast", {
		"value": "SubtractionMustBeLast"}
);
Object.defineProperty($asm04.System.SR, "UnknownProperty", {
		"value": "UnknownProperty"}
);
Object.defineProperty($asm04.System.SR, "ReplacementError", {
		"value": "ReplacementError"}
);
Object.defineProperty($asm04.System.SR, "CountTooSmall", {
		"value": "CountTooSmall"}
);
Object.defineProperty($asm04.System.SR, "EnumNotStarted", {
		"value": "EnumNotStarted"}
);
Object.defineProperty($asm04.System.SR, "Arg_InvalidArrayType", {
		"value": "Arg_InvalidArrayType"}
);
Object.defineProperty($asm04.System.SR, "Arg_RankMultiDimNotSupported", {
		"value": "Arg_RankMultiDimNotSupported"}
);
Object.defineProperty($asm04.System.SR, "InvalidOperation_EnumNotStarted", {
		"value": "InvalidOperation_EnumNotStarted"}
);
Object.defineProperty($asm04.System.SR, "net_uri_BadScheme", {
		"value": "net_uri_BadScheme"}
);
Object.defineProperty($asm04.System.SR, "net_uri_BadFormat", {
		"value": "net_uri_BadFormat"}
);
Object.defineProperty($asm04.System.SR, "net_uri_BadUserPassword", {
		"value": "net_uri_BadUserPassword"}
);
Object.defineProperty($asm04.System.SR, "net_uri_BadHostName", {
		"value": "net_uri_BadHostName"}
);
Object.defineProperty($asm04.System.SR, "net_uri_BadAuthority", {
		"value": "net_uri_BadAuthority"}
);
Object.defineProperty($asm04.System.SR, "net_uri_BadAuthorityTerminator", {
		"value": "net_uri_BadAuthorityTerminator"}
);
Object.defineProperty($asm04.System.SR, "net_uri_BadFileName", {
		"value": "net_uri_BadFileName"}
);
Object.defineProperty($asm04.System.SR, "net_uri_EmptyUri", {
		"value": "net_uri_EmptyUri"}
);
Object.defineProperty($asm04.System.SR, "net_uri_BadString", {
		"value": "net_uri_BadString"}
);
Object.defineProperty($asm04.System.SR, "net_uri_MustRootedPath", {
		"value": "net_uri_MustRootedPath"}
);
Object.defineProperty($asm04.System.SR, "net_uri_BadPort", {
		"value": "net_uri_BadPort"}
);
Object.defineProperty($asm04.System.SR, "net_uri_SizeLimit", {
		"value": "net_uri_SizeLimit"}
);
Object.defineProperty($asm04.System.SR, "net_uri_SchemeLimit", {
		"value": "net_uri_SchemeLimit"}
);
Object.defineProperty($asm04.System.SR, "net_uri_NotAbsolute", {
		"value": "net_uri_NotAbsolute"}
);
Object.defineProperty($asm04.System.SR, "net_uri_SpecialUriComponent", {
		"value": "net_uri_SpecialUriComponent"}
);
Object.defineProperty($asm04.System.SR, "net_uri_CustomValidationFailed", {
		"value": "net_uri_CustomValidationFailed"}
);
Object.defineProperty($asm04.System.SR, "net_uri_PortOutOfRange", {
		"value": "net_uri_PortOutOfRange"}
);
Object.defineProperty($asm04.System.SR, "net_uri_UserDrivenParsing", {
		"value": "net_uri_UserDrivenParsing"}
);
Object.defineProperty($asm04.System.SR, "net_uri_AlreadyRegistered", {
		"value": "net_uri_AlreadyRegistered"}
);
Object.defineProperty($asm04.System.SR, "net_uri_NeedFreshParser", {
		"value": "net_uri_NeedFreshParser"}
);
Object.defineProperty($asm04.System.SR, "net_uri_CannotCreateRelative", {
		"value": "net_uri_CannotCreateRelative"}
);
Object.defineProperty($asm04.System.SR, "net_uri_InvalidUriKind", {
		"value": "net_uri_InvalidUriKind"}
);
Object.defineProperty($asm04.System.SR, "Argument_InvalidOffLen", {
		"value": "Argument_InvalidOffLen"}
);
Object.defineProperty($asm04.System.SR, "ArgumentOutOfRange_NeedNonNegNumRequired", {
		"value": "ArgumentOutOfRange_NeedNonNegNumRequired"}
);
Object.defineProperty($asm04.System.SR, "InvalidOperation_EnumEnded", {
		"value": "InvalidOperation_EnumEnded"}
);
Object.defineProperty($asm04.System.SR, "Async_ExceptionOccurred", {
		"value": "Async_ExceptionOccurred"}
);
Object.defineProperty($asm04.System.SR, "Async_OperationCancelled", {
		"value": "Async_OperationCancelled"}
);
Object.defineProperty($asm04.System.SR, "Async_OperationAlreadyCompleted", {
		"value": "Async_OperationAlreadyCompleted"}
);
Object.defineProperty($asm04.System.SR, "Async_NullDelegate", {
		"value": "Async_NullDelegate"}
);
Object.defineProperty($asm04.System.SR, "BackgroundWorker_AlreadyRunning", {
		"value": "BackgroundWorker_AlreadyRunning"}
);
Object.defineProperty($asm04.System.SR, "BackgroundWorker_CancellationNotSupported", {
		"value": "BackgroundWorker_CancellationNotSupported"}
);
Object.defineProperty($asm04.System.SR, "BackgroundWorker_OperationCompleted", {
		"value": "BackgroundWorker_OperationCompleted"}
);
Object.defineProperty($asm04.System.SR, "BackgroundWorker_ProgressNotSupported", {
		"value": "BackgroundWorker_ProgressNotSupported"}
);
$asm04.System.SR.loader = null;
$asm04.System.SR.prototype.resources = null;
$asm04.System.SR.prototype.debugResources = null;
$asm04.System.SR.prototype.fallbackResources = null;
$asm04.System.SR.s_InternalSyncObject = null;
$asm04.System.SR._cctor = function () {
	$asm04.System.SR.loader = null;
};

System.Text.RegularExpressions.Regex.prototype._ctor$0 = function () {
	System.Object.prototype._ctor.call(this);
};
System.Text.RegularExpressions.Regex.prototype._ctor$1 = function (pattern) {
	this._ctor$3(pattern, System.Text.RegularExpressions.RegexOptions.None, false);
};
System.Text.RegularExpressions.Regex.prototype._ctor$2 = function (pattern, options) {
	this._ctor$3(pattern, options, false);
};
System.Text.RegularExpressions.Regex.prototype._ctor$3 = function (pattern, options, useCache) {
	System.Object.prototype._ctor.call(this);
	var text = null;
	if (pattern === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["pattern"]);
	}
	if (!((options >= System.Text.RegularExpressions.RegexOptions.None) && !(Math.floor(options) >> 10))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["options"]);
	}
	if (!(!(options & System.Text.RegularExpressions.RegexOptions.ECMAScript) || !(options & (System.Text.RegularExpressions.RegexOptions.ExplicitCapture | System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace | System.Text.RegularExpressions.RegexOptions.RightToLeft | System.Text.RegularExpressions.RegexOptions.Singleline)))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["options"]);
	}
	if (options & System.Text.RegularExpressions.RegexOptions.CultureInvariant) {
		text = System.Globalization.CultureInfo.InvariantCulture.toString();
	} else {
		text = System.Globalization.CultureInfo.CurrentCulture.toString();
	}
	var array = JSIL.Array.New(System.String, 5);
	var num = Math.floor(options);
	array[0] = ((num).toString());
	array[1] = ":";
	array[2] = text;
	array[3] = ":";
	array[4] = pattern;
	var key = (JSIL.ConcatString.apply(null, array));
	var cachedCodeEntry = System.Text.RegularExpressions.Regex.LookupCachedAndUpdate(key);
	this.pattern = pattern;
	this.roptions = options;
	if (cachedCodeEntry === null) {
		var regexTree = $asm04.System.Text.RegularExpressions.RegexParser.Parse(pattern, this.roptions);
		this.capnames = regexTree._capnames;
		this.capslist = regexTree._capslist;
		this.code = $asm04.System.Text.RegularExpressions.RegexWriter.Write(regexTree);
		this.caps = this.code._caps;
		this.capsize = this.code._capsize;
		this.InitializeReferences();
		if (useCache) {
			cachedCodeEntry = this.CacheCode(key);
			return;
		}
	} else {
		this.caps = cachedCodeEntry._caps;
		this.capnames = cachedCodeEntry._capnames;
		this.capslist = cachedCodeEntry._capslist;
		this.capsize = cachedCodeEntry._capsize;
		this.code = cachedCodeEntry._code;
		this.factory = cachedCodeEntry._factory;
		this.runnerref = cachedCodeEntry._runnerref;
		this.replref = cachedCodeEntry._replref;
		this.refsInitialized = true;
	}
};
System.Text.RegularExpressions.Regex.Escape = function (str) {
	if (str === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["str"]);
	}
	return $asm04.System.Text.RegularExpressions.RegexParser.Escape(str);
};
System.Text.RegularExpressions.Regex.Unescape = function (str) {
	if (str === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["str"]);
	}
	return $asm04.System.Text.RegularExpressions.RegexParser.Unescape(str);
};
System.Text.RegularExpressions.Regex.get_CacheSize = function () {
	return System.Text.RegularExpressions.Regex.cacheSize;
};
System.Text.RegularExpressions.Regex.set_CacheSize = function (value) {
	var obj = null;
	if (value < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["value"]);
	}
	System.Text.RegularExpressions.Regex.cacheSize = value;
	if (System.Text.RegularExpressions.Regex.livecode.Count > System.Text.RegularExpressions.Regex.cacheSize) {
		System.Threading.Monitor.Enter((obj = System.Text.RegularExpressions.Regex.livecode));
		try {
		__loop0__: 
			while (System.Text.RegularExpressions.Regex.livecode.Count > System.Text.RegularExpressions.Regex.cacheSize) {
				System.Text.RegularExpressions.Regex.livecode.RemoveLast();
			}
		} finally {
			System.Threading.Monitor.Exit(obj);
		}
	}
};
System.Text.RegularExpressions.Regex.prototype.get_Options = function () {
	return this.roptions;
};
System.Text.RegularExpressions.Regex.prototype.get_RightToLeft = function () {
	return this.UseOptionR();
};
System.Text.RegularExpressions.Regex.prototype.toString = function () {
	return this.pattern;
};
System.Text.RegularExpressions.Regex.prototype.GetGroupNames = function () {
	if (this.capslist === null) {
		var num = this.capsize;
		var array = JSIL.Array.New(System.String, num);
	__loop0__: 
		for (var i = 0; i < num; ++i) {
			array[i] = System.Convert.ToString$15(i, System.Globalization.CultureInfo.InvariantCulture);
		}
	} else {
		array = JSIL.Array.New(System.String, this.capslist.length);
		System.Array.Copy$1(
			this.capslist, 
			0, 
			array, 
			0, 
			this.capslist.length
		);
	}
	return array;
};
System.Text.RegularExpressions.Regex.prototype.GetGroupNumbers = function () {
	if (this.caps === null) {
		var num = this.capsize;
		var array = JSIL.Array.New(System.Int32, num);
	__loop1__: 
		for (var i = 0; i < num; ++i) {
			array[i] = i;
		}
	} else {
		array = JSIL.Array.New(System.Int32, this.caps.Count);
	__loop0__: 
		for (var dictionaryEnumerator = this.caps.GetEnumerator(); dictionaryEnumerator.IEnumerator_MoveNext(); ) {
			array[JSIL.Cast(dictionaryEnumerator.IDictionaryEnumerator_Value, System.Int32)] = JSIL.Cast(dictionaryEnumerator.IDictionaryEnumerator_Key, System.Int32);
		}
	}
	return array;
};
System.Text.RegularExpressions.Regex.prototype.GroupNameFromNumber = function (i) {
	if (this.capslist === null) {
		if (!((i < 0) || (i >= this.capsize))) {
			return (i).toString();
		}
		return System.String.Empty;
	} else {
		if (this.caps !== null) {
			if (!this.caps.ContainsKey(i)) {
				return System.String.Empty;
			}
			i = this.caps.get_Item(i);
		}
		if (!((i < 0) || (i >= this.capslist.length))) {
			return this.capslist[i];
		}
		return System.String.Empty;
	}
};
System.Text.RegularExpressions.Regex.prototype.GroupNumberFromName = function (name) {
	var num = -1;
	if (name === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["name"]);
	}
	if (this.capnames !== null) {
		if (!this.capnames.ContainsKey(name)) {
			return -1;
		}
		return this.capnames.get_Item(name);
	} else {
		num = 0;
	__loop0__: 
		for (var i = 0; i < name.length; ++i) {
			var c = (name[i]);
			if (!((c <= "9") && (c >= "0"))) {
				return -1;
			}
			num *= 10;
			num += (c - "0");
		}
		if (!((num < 0) || (num >= this.capsize))) {
			return num;
		}
		return -1;
	}
};
System.Text.RegularExpressions.Regex.IsMatch$0 = function (input, pattern) {
	return (JSIL.New(System.Text.RegularExpressions.Regex, "_ctor$3", [pattern, System.Text.RegularExpressions.RegexOptions.None, true])).IsMatch$0(input);
};
System.Text.RegularExpressions.Regex.IsMatch$1 = function (input, pattern, options) {
	return (JSIL.New(System.Text.RegularExpressions.Regex, "_ctor$3", [pattern, options, true])).IsMatch$0(input);
};
System.Text.RegularExpressions.Regex.prototype.IsMatch$0 = function (input) {
	if (input === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["input"]);
	}
	return (null === this.Run(
			true, 
			-1, 
			input, 
			0, 
			input.length, 
			this.UseOptionR() ? input.length : 0
		));
};
System.Text.RegularExpressions.Regex.prototype.IsMatch$1 = function (input, startat) {
	if (input === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["input"]);
	}
	return (null === this.Run(
			true, 
			-1, 
			input, 
			0, 
			input.length, 
			startat
		));
};
System.Text.RegularExpressions.Regex.Match$0 = function (input, pattern) {
	return (JSIL.New(System.Text.RegularExpressions.Regex, "_ctor$3", [pattern, System.Text.RegularExpressions.RegexOptions.None, true])).Match$0(input);
};
System.Text.RegularExpressions.Regex.Match$1 = function (input, pattern, options) {
	return (JSIL.New(System.Text.RegularExpressions.Regex, "_ctor$3", [pattern, options, true])).Match$0(input);
};
System.Text.RegularExpressions.Regex.prototype.Match$0 = function (input) {
	if (input === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["input"]);
	}
	return this.Run(
		false, 
		-1, 
		input, 
		0, 
		input.length, 
		this.UseOptionR() ? input.length : 0
	);
};
System.Text.RegularExpressions.Regex.prototype.Match$1 = function (input, startat) {
	if (input === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["input"]);
	}
	return this.Run(
		false, 
		-1, 
		input, 
		0, 
		input.length, 
		startat
	);
};
System.Text.RegularExpressions.Regex.prototype.Match$2 = function (input, beginning, length) {
	if (input === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["input"]);
	}
	return this.Run(
		false, 
		-1, 
		input, 
		beginning, 
		length, 
		this.UseOptionR() ? (beginning + length) : beginning
	);
};
System.Text.RegularExpressions.Regex.Matches$0 = function (input, pattern) {
	return (JSIL.New(System.Text.RegularExpressions.Regex, "_ctor$3", [pattern, System.Text.RegularExpressions.RegexOptions.None, true])).Matches$0(input);
};
System.Text.RegularExpressions.Regex.Matches$1 = function (input, pattern, options) {
	return (JSIL.New(System.Text.RegularExpressions.Regex, "_ctor$3", [pattern, options, true])).Matches$0(input);
};
System.Text.RegularExpressions.Regex.prototype.Matches$0 = function (input) {
	if (input === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["input"]);
	}
	return new System.Text.RegularExpressions.MatchCollection(this, input, 0, input.length, this.UseOptionR() ? input.length : 0);
};
System.Text.RegularExpressions.Regex.prototype.Matches$1 = function (input, startat) {
	if (input === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["input"]);
	}
	return new System.Text.RegularExpressions.MatchCollection(this, input, 0, input.length, startat);
};
System.Text.RegularExpressions.Regex.Replace$0 = function (input, pattern, replacement) {
	return (JSIL.New(System.Text.RegularExpressions.Regex, "_ctor$3", [pattern, System.Text.RegularExpressions.RegexOptions.None, true])).Replace$0(input, replacement);
};
System.Text.RegularExpressions.Regex.Replace$1 = function (input, pattern, replacement, options) {
	return (JSIL.New(System.Text.RegularExpressions.Regex, "_ctor$3", [pattern, options, true])).Replace$0(input, replacement);
};
System.Text.RegularExpressions.Regex.prototype.Replace$0 = function (input, replacement) {
	if (input === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["input"]);
	}
	return this.Replace$2(input, replacement, -1, this.UseOptionR() ? input.length : 0);
};
System.Text.RegularExpressions.Regex.prototype.Replace$1 = function (input, replacement, count) {
	if (input === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["input"]);
	}
	return this.Replace$2(input, replacement, count, this.UseOptionR() ? input.length : 0);
};
System.Text.RegularExpressions.Regex.prototype.Replace$2 = function (input, replacement, count, startat) {
	if (input === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["input"]);
	}
	if (replacement === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["replacement"]);
	}
	var regexReplacement = JSIL.Cast(this.replref.Get(), $asm04.System.Text.RegularExpressions.RegexReplacement);
	if (!((regexReplacement !== null) && regexReplacement.Pattern.Equals$1(replacement))) {
		regexReplacement = $asm04.System.Text.RegularExpressions.RegexParser.ParseReplacement(
			replacement, 
			this.caps, 
			this.capsize, 
			this.capnames, 
			this.roptions
		);
		this.replref.Cache(regexReplacement);
	}
	return regexReplacement.Replace(this, input, count, startat);
};
System.Text.RegularExpressions.Regex.Replace$2 = function (input, pattern, evaluator) {
	return (JSIL.New(System.Text.RegularExpressions.Regex, "_ctor$3", [pattern, System.Text.RegularExpressions.RegexOptions.None, true])).Replace$3(input, evaluator);
};
System.Text.RegularExpressions.Regex.Replace$3 = function (input, pattern, evaluator, options) {
	return (JSIL.New(System.Text.RegularExpressions.Regex, "_ctor$3", [pattern, options, true])).Replace$3(input, evaluator);
};
System.Text.RegularExpressions.Regex.prototype.Replace$3 = function (input, evaluator) {
	if (input === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["input"]);
	}
	return this.Replace$5(input, evaluator, -1, this.UseOptionR() ? input.length : 0);
};
System.Text.RegularExpressions.Regex.prototype.Replace$4 = function (input, evaluator, count) {
	if (input === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["input"]);
	}
	return this.Replace$5(input, evaluator, count, this.UseOptionR() ? input.length : 0);
};
System.Text.RegularExpressions.Regex.prototype.Replace$5 = function (input, evaluator, count, startat) {
	if (input === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["input"]);
	}
	return $asm04.System.Text.RegularExpressions.RegexReplacement.Replace(
		evaluator, 
		this, 
		input, 
		count, 
		startat
	);
};
System.Text.RegularExpressions.Regex.Split$0 = function (input, pattern) {
	return (JSIL.New(System.Text.RegularExpressions.Regex, "_ctor$3", [pattern, System.Text.RegularExpressions.RegexOptions.None, true])).Split$0(input);
};
System.Text.RegularExpressions.Regex.Split$1 = function (input, pattern, options) {
	return (JSIL.New(System.Text.RegularExpressions.Regex, "_ctor$3", [pattern, options, true])).Split$0(input);
};
System.Text.RegularExpressions.Regex.prototype.Split$0 = function (input) {
	if (input === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["input"]);
	}
	return this.Split$2(input, 0, this.UseOptionR() ? input.length : 0);
};
System.Text.RegularExpressions.Regex.prototype.Split$1 = function (input, count) {
	if (input === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["input"]);
	}
	return $asm04.System.Text.RegularExpressions.RegexReplacement.Split(this, input, count, this.UseOptionR() ? input.length : 0);
};
System.Text.RegularExpressions.Regex.prototype.Split$2 = function (input, count, startat) {
	if (input === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["input"]);
	}
	return $asm04.System.Text.RegularExpressions.RegexReplacement.Split(this, input, count, startat);
};
System.Text.RegularExpressions.Regex.prototype.InitializeReferences = function () {
	if (this.refsInitialized) {
		throw JSIL.New(System.NotSupportedException, "_ctor$1", [$asm04.System.SR.GetString$2("OnlyAllowedOnce")]);
	}
	this.refsInitialized = true;
	this.runnerref = new $asm04.System.Text.RegularExpressions.ExclusiveReference();
	this.replref = new $asm04.System.Text.RegularExpressions.SharedReference();
};
System.Text.RegularExpressions.Regex.prototype.Run = function (quick, prevlen, input, beginning, length, startat) {
	var regexRunner = null;
	if (!((startat >= 0) && (startat <= input.length))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["start", $asm04.System.SR.GetString$2("BeginIndexNotNegative")]);
	}
	if (!((length >= 0) && (length <= input.length))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["length", $asm04.System.SR.GetString$2("LengthNotNegative")]);
	}
	regexRunner = JSIL.Cast(this.runnerref.Get(), $asm04.System.Text.RegularExpressions.RegexRunner);
	if (regexRunner === null) {
		if (this.factory !== null) {
			regexRunner = this.factory.CreateInstance();
		} else {
			regexRunner = new $asm04.System.Text.RegularExpressions.RegexInterpreter(this.code, this.UseOptionInvariant() ? System.Globalization.CultureInfo.InvariantCulture : System.Globalization.CultureInfo.CurrentCulture);
		}
	}
	var result = regexRunner.Scan(
		this, 
		input, 
		beginning, 
		(beginning + length), 
		startat, 
		prevlen, 
		quick
	);
	this.runnerref.Release(regexRunner);
	return result;
};
System.Text.RegularExpressions.Regex.LookupCachedAndUpdate = function (key) {
	var obj = null;
	System.Threading.Monitor.Enter((obj = System.Text.RegularExpressions.Regex.livecode));
	try {
		var linkedListNode = JSIL.Cast(System.Text.RegularExpressions.Regex.livecode.First, System.Collections.Generic.LinkedListNode$b1.Of($asm04.System.Text.RegularExpressions.CachedCodeEntry));
	__loop0__: 
		while (linkedListNode) {
			if (linkedListNode.Value._key == key) {
				System.Text.RegularExpressions.Regex.livecode.Remove$1(linkedListNode);
				System.Text.RegularExpressions.Regex.livecode.AddFirst$1(linkedListNode);
				return linkedListNode.Value;
			}
			linkedListNode = JSIL.Cast(linkedListNode.Next, System.Collections.Generic.LinkedListNode$b1.Of($asm04.System.Text.RegularExpressions.CachedCodeEntry));
		}
	} finally {
		System.Threading.Monitor.Exit(obj);
	}
	return null;
};
System.Text.RegularExpressions.Regex.prototype.CacheCode = function (key) {
	var obj = null;
	var cachedCodeEntry = null;
	System.Threading.Monitor.Enter((obj = System.Text.RegularExpressions.Regex.livecode));
	try {
		var linkedListNode = JSIL.Cast(System.Text.RegularExpressions.Regex.livecode.First, System.Collections.Generic.LinkedListNode$b1.Of($asm04.System.Text.RegularExpressions.CachedCodeEntry));
	__loop0__: 
		while (linkedListNode) {
			if (linkedListNode.Value._key == key) {
				System.Text.RegularExpressions.Regex.livecode.Remove$1(linkedListNode);
				System.Text.RegularExpressions.Regex.livecode.AddFirst$1(linkedListNode);
				return linkedListNode.Value;
			}
			linkedListNode = JSIL.Cast(linkedListNode.Next, System.Collections.Generic.LinkedListNode$b1.Of($asm04.System.Text.RegularExpressions.CachedCodeEntry));
		}
		if (System.Text.RegularExpressions.Regex.cacheSize !== 0) {
			cachedCodeEntry = new $asm04.System.Text.RegularExpressions.CachedCodeEntry(key, this.capnames, this.capslist, this.code, this.caps, this.capsize, this.runnerref, this.replref);
			System.Text.RegularExpressions.Regex.livecode.AddFirst$0(cachedCodeEntry);
			if (System.Text.RegularExpressions.Regex.livecode.Count > System.Text.RegularExpressions.Regex.cacheSize) {
				System.Text.RegularExpressions.Regex.livecode.RemoveLast();
			}
		}
	} finally {
		System.Threading.Monitor.Exit(obj);
	}
	return cachedCodeEntry;
};
System.Text.RegularExpressions.Regex.prototype.UseOptionR = function () {
	return ((this.roptions & System.Text.RegularExpressions.RegexOptions.RightToLeft) !== System.Text.RegularExpressions.RegexOptions.None);
};
System.Text.RegularExpressions.Regex.prototype.UseOptionInvariant = function () {
	return ((this.roptions & System.Text.RegularExpressions.RegexOptions.CultureInvariant) !== System.Text.RegularExpressions.RegexOptions.None);
};
JSIL.OverloadedMethod(System.Text.RegularExpressions.Regex.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.String]], 
		["_ctor$2", [System.String, System.Text.RegularExpressions.RegexOptions]], 
		["_ctor$3", [System.String, System.Text.RegularExpressions.RegexOptions, System.Boolean]]
	]);
JSIL.OverloadedMethod(System.Text.RegularExpressions.Regex, "IsMatch", [
		["IsMatch$0", [System.String, System.String]], 
		["IsMatch$1", [System.String, System.String, System.Text.RegularExpressions.RegexOptions]]
	]);
JSIL.OverloadedMethod(System.Text.RegularExpressions.Regex.prototype, "IsMatch", [
		["IsMatch$0", [System.String]], 
		["IsMatch$1", [System.String, System.Int32]]
	]);
JSIL.OverloadedMethod(System.Text.RegularExpressions.Regex, "Match", [
		["Match$0", [System.String, System.String]], 
		["Match$1", [System.String, System.String, System.Text.RegularExpressions.RegexOptions]]
	]);
JSIL.OverloadedMethod(System.Text.RegularExpressions.Regex.prototype, "Match", [
		["Match$0", [System.String]], 
		["Match$1", [System.String, System.Int32]], 
		["Match$2", [System.String, System.Int32, System.Int32]]
	]);
JSIL.OverloadedMethod(System.Text.RegularExpressions.Regex, "Matches", [
		["Matches$0", [System.String, System.String]], 
		["Matches$1", [System.String, System.String, System.Text.RegularExpressions.RegexOptions]]
	]);
JSIL.OverloadedMethod(System.Text.RegularExpressions.Regex.prototype, "Matches", [
		["Matches$0", [System.String]], 
		["Matches$1", [System.String, System.Int32]]
	]);
JSIL.OverloadedMethod(System.Text.RegularExpressions.Regex, "Replace", [
		["Replace$0", [System.String, System.String, System.String]], 
		["Replace$1", [System.String, System.String, System.String, System.Text.RegularExpressions.RegexOptions]], 
		["Replace$2", [System.String, System.String, System.Text.RegularExpressions.MatchEvaluator]], 
		["Replace$3", [System.String, System.String, System.Text.RegularExpressions.MatchEvaluator, System.Text.RegularExpressions.RegexOptions]]
	]);
JSIL.OverloadedMethod(System.Text.RegularExpressions.Regex.prototype, "Replace", [
		["Replace$0", [System.String, System.String]], 
		["Replace$1", [System.String, System.String, System.Int32]], 
		["Replace$2", [System.String, System.String, System.Int32, System.Int32]], 
		["Replace$3", [System.String, System.Text.RegularExpressions.MatchEvaluator]], 
		["Replace$4", [System.String, System.Text.RegularExpressions.MatchEvaluator, System.Int32]], 
		["Replace$5", [System.String, System.Text.RegularExpressions.MatchEvaluator, System.Int32, System.Int32]]
	]);
JSIL.OverloadedMethod(System.Text.RegularExpressions.Regex, "Split", [
		["Split$0", [System.String, System.String]], 
		["Split$1", [System.String, System.String, System.Text.RegularExpressions.RegexOptions]]
	]);
JSIL.OverloadedMethod(System.Text.RegularExpressions.Regex.prototype, "Split", [
		["Split$0", [System.String]], 
		["Split$1", [System.String, System.Int32]], 
		["Split$2", [System.String, System.Int32, System.Int32]]
	]);
JSIL.MakeProperty(System.Text.RegularExpressions.Regex, "CacheSize", 
	System.Text.RegularExpressions.Regex.get_CacheSize, System.Text.RegularExpressions.Regex.set_CacheSize);
JSIL.MakeProperty(System.Text.RegularExpressions.Regex.prototype, "Options", 
	System.Text.RegularExpressions.Regex.prototype.get_Options, null);
JSIL.MakeProperty(System.Text.RegularExpressions.Regex.prototype, "RightToLeft", 
	System.Text.RegularExpressions.Regex.prototype.get_RightToLeft, null);
Object.defineProperty(System.Text.RegularExpressions.Regex, "MaxOptionShift", {
		"value": 10}
);
System.Text.RegularExpressions.Regex.prototype.pattern = null;
System.Text.RegularExpressions.Regex.prototype.factory = null;
System.Text.RegularExpressions.Regex.prototype.roptions = 0;
System.Text.RegularExpressions.Regex.prototype.caps = null;
System.Text.RegularExpressions.Regex.prototype.capnames = null;
System.Text.RegularExpressions.Regex.prototype.capslist = null;
System.Text.RegularExpressions.Regex.prototype.capsize = 0;
System.Text.RegularExpressions.Regex.prototype.runnerref = null;
System.Text.RegularExpressions.Regex.prototype.replref = null;
System.Text.RegularExpressions.Regex.prototype.code = null;
System.Text.RegularExpressions.Regex.prototype.refsInitialized = false;
System.Text.RegularExpressions.Regex.livecode = null;
System.Text.RegularExpressions.Regex.cacheSize = 0;
System.Text.RegularExpressions.Regex._cctor = function () {
	System.Text.RegularExpressions.Regex.livecode = JSIL.New(System.Collections.Generic.LinkedList$b1.Of($asm04.System.Text.RegularExpressions.CachedCodeEntry), "_ctor$0", []);
	System.Text.RegularExpressions.Regex.cacheSize = 15;
};

$asm04.System.Text.RegularExpressions.CachedCodeEntry.prototype._ctor = function (key, capnames, capslist, code, caps, capsize, runner, repl) {
	System.Object.prototype._ctor.call(this);
	this._key = key;
	this._capnames = capnames;
	this._capslist = capslist;
	this._code = code;
	this._caps = caps;
	this._capsize = capsize;
	this._runnerref = runner;
	this._replref = repl;
};
$asm04.System.Text.RegularExpressions.CachedCodeEntry.prototype._key = null;
$asm04.System.Text.RegularExpressions.CachedCodeEntry.prototype._code = null;
$asm04.System.Text.RegularExpressions.CachedCodeEntry.prototype._caps = null;
$asm04.System.Text.RegularExpressions.CachedCodeEntry.prototype._capnames = null;
$asm04.System.Text.RegularExpressions.CachedCodeEntry.prototype._capslist = null;
$asm04.System.Text.RegularExpressions.CachedCodeEntry.prototype._capsize = 0;
$asm04.System.Text.RegularExpressions.CachedCodeEntry.prototype._factory = null;
$asm04.System.Text.RegularExpressions.CachedCodeEntry.prototype._runnerref = null;
$asm04.System.Text.RegularExpressions.CachedCodeEntry.prototype._replref = null;

$asm04.System.Text.RegularExpressions.ExclusiveReference.prototype.Get = function () {
	if (System.Threading.Interlocked.Exchange$0(/* ref */ new JSIL.MemberReference(this, "_locked"), 1) !== 0) {
		return null;
	}
	var ref = this._ref;
	if (ref === null) {
		this._locked = 0;
		return null;
	}
	this._obj = ref;
	return ref;
};
$asm04.System.Text.RegularExpressions.ExclusiveReference.prototype.Release = function (obj) {
	if (obj === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["obj"]);
	}
	if (this._obj === obj) {
		this._obj = null;
		this._locked = 0;
		return;
	}
	if (!(this._obj || (System.Threading.Interlocked.Exchange$0(/* ref */ new JSIL.MemberReference(this, "_locked"), 1) !== 0))) {
		if (this._ref === null) {
			this._ref = JSIL.Cast(obj, $asm04.System.Text.RegularExpressions.RegexRunner);
		}
		this._locked = 0;
	}
};
$asm04.System.Text.RegularExpressions.ExclusiveReference.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm04.System.Text.RegularExpressions.ExclusiveReference.prototype._ref = null;
$asm04.System.Text.RegularExpressions.ExclusiveReference.prototype._obj = null;
$asm04.System.Text.RegularExpressions.ExclusiveReference.prototype._locked = 0;

$asm04.System.Text.RegularExpressions.SharedReference.prototype.Get = function () {
	if (System.Threading.Interlocked.Exchange$0(/* ref */ new JSIL.MemberReference(this, "_locked"), 1) === 0) {
		var target = this._ref.Target;
		this._locked = 0;
		return target;
	}
	return null;
};
$asm04.System.Text.RegularExpressions.SharedReference.prototype.Cache = function (obj) {
	if (System.Threading.Interlocked.Exchange$0(/* ref */ new JSIL.MemberReference(this, "_locked"), 1) === 0) {
		this._ref.Target = obj;
		this._locked = 0;
	}
};
$asm04.System.Text.RegularExpressions.SharedReference.prototype._ctor = function () {
	this._ref = JSIL.New(System.WeakReference, "_ctor$1", [null]);
	System.Object.prototype._ctor.call(this);
};
$asm04.System.Text.RegularExpressions.SharedReference.prototype._ref = null;
$asm04.System.Text.RegularExpressions.SharedReference.prototype._locked = 0;

$asm04.System.Text.RegularExpressions.RegexBoyerMoore.prototype._ctor = function (pattern, caseInsensitive, rightToLeft, culture) {
	System.Object.prototype._ctor.call(this);
	if (caseInsensitive) {
		var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$1", [pattern.length]);
	__loop0__: 
		for (var i = 0; i < pattern.length; ++i) {
			stringBuilder.Append$7(System.Char.ToLower$0(pattern[i], culture));
		}
		pattern = stringBuilder.toString();
	}
	this._pattern = pattern;
	this._rightToLeft = rightToLeft;
	this._caseInsensitive = caseInsensitive;
	this._culture = culture;
	if (!rightToLeft) {
		var num = -1;
		var num2 = (pattern.length - 1);
		var num3 = 1;
	} else {
		num = pattern.length;
		num2 = 0;
		num3 = -1;
	}
	this._positive = JSIL.Array.New(System.Int32, pattern.length);
	var num4 = num2;
	var c = (pattern[num4]);
	this._positive[num4] = num3;
__loop1__: 
	for (num4 -= num3; num4 !== num; ) {
		if ((pattern[num4]) !== c) {
			num4 -= num3;
		} else {
			var num5 = num2;
			var num6 = num4;
		__loop2__: 
			while ((num6 !== num) && ((pattern[num5]) === (pattern[num6]))) {
				num6 -= num3;
				num5 -= num3;
			}
			if (!this._positive[num5]) {
				this._positive[num5] = (num5 - num6);
			}
			num4 -= num3;
		}
	}
__loop3__: 
	for (num5 = (num2 - num3); num5 !== num; num5 -= num3) {
		if (!this._positive[num5]) {
			this._positive[num5] = num3;
		}
	}
	this._negativeASCII = JSIL.Array.New(System.Int32, 128);
__loop4__: 
	for (var j = 0; j < 128; ++j) {
		this._negativeASCII[j] = (num2 - num);
	}
	this._lowASCII = 127;
	this._highASCII = 0;
__loop5__: 
	for (num4 = num2; num4 !== num; num4 -= num3) {
		c = (pattern[num4]);
		if (c < "\x80") {
			if (this._lowASCII > c.charCodeAt(0)) {
				this._lowASCII = c.charCodeAt(0);
			}
			if (this._highASCII < c.charCodeAt(0)) {
				this._highASCII = c.charCodeAt(0);
			}
			if (this._negativeASCII[c.charCodeAt(0)] === (num2 - num)) {
				this._negativeASCII[c.charCodeAt(0)] = (num2 - num4);
			}
		} else {
			var num7 = (c.charCodeAt(0) >> 8);
			var num8 = (c & "\xff");
			if (this._negativeUnicode === null) {
				this._negativeUnicode = JSIL.Array.New(System.Array.Of(System.Int32), 256);
			}
			if (!this._negativeUnicode[num7]) {
				var array = JSIL.Array.New(System.Int32, 256);
			__loop6__: 
				for (var k = 0; k < 256; ++k) {
					array[k] = (num2 - num);
				}
				if (num7 === 0) {
					System.Array.Copy$0(this._negativeASCII, array, 128);
					this._negativeASCII = array;
				}
				this._negativeUnicode[num7] = array;
			}
			if (this._negativeUnicode[num7][num8] === (num2 - num)) {
				this._negativeUnicode[num7][num8] = (num2 - num4);
			}
		}
	}
};
$asm04.System.Text.RegularExpressions.RegexBoyerMoore.prototype.MatchPattern = function (text, index) {
	if (!this._caseInsensitive) {
		return (0 === System.String.CompareOrdinal$1(
				this._pattern, 
				0, 
				text, 
				index, 
				this._pattern.length
			));
	}
	if ((text.length - index) < this._pattern.length) {
		return false;
	}
	var textInfo = this._culture.TextInfo;
__loop0__: 
	for (var i = 0; i < this._pattern.length; ++i) {
		if (textInfo.ToLower$0(text[(index + i)]) !== (this._pattern[i])) {
			return false;
		}
	}
	return true;
};
$asm04.System.Text.RegularExpressions.RegexBoyerMoore.prototype.IsMatch = function (text, index, beglimit, endlimit) {
	if (!this._rightToLeft) {
		return ((index >= beglimit) && 
			((endlimit - index) >= this._pattern.length) && this.MatchPattern(text, index));
	}
	return ((index <= endlimit) && 
		((index - beglimit) >= this._pattern.length) && this.MatchPattern(text, (index - this._pattern.length)));
};
$asm04.System.Text.RegularExpressions.RegexBoyerMoore.prototype.Scan = function (text, index, beglimit, endlimit) {
	var __label0__ = null;
__step0__: 
	while (true) {
		switch (__label0__) {
			case null:
				var array = null;
				__label0__ = "__entry0__";
				continue __step0__;
				break;
			case "__entry0__":
				if (!this._rightToLeft) {
					var num = this._pattern.length;
					var num2 = (this._pattern.length - 1);
					var num3 = 0;
					var num4 = ((index + num) - 1);
					var num5 = 1;
				} else {
					num = -this._pattern.length;
					num2 = 0;
					num3 = (-num - 1);
					num4 = (index + num);
					num5 = -1;
				}
				var c = (this._pattern[num2]);
				__label0__ = "IL_5F";
				continue __step0__;
				break;
			case "IL_5F":
			__loop0__: 
				while ((num4 < endlimit) && (num4 >= beglimit)) {
					var c2 = (text[num4]);
					if (this._caseInsensitive) {
						c2 = System.Char.ToLower$0(c2, this._culture);
					}
					if (c2 !== c) {
						if (c2 < "\x80") {
							var num6 = this._negativeASCII[c2.charCodeAt(0)];
						} else if (!((this._negativeUnicode === null) || ((array = this._negativeUnicode[(c2.charCodeAt(0) >> 8)]) === null))) {
							num6 = array[(c2 & "\xff")];
						} else {
							num6 = num;
						}
						num4 += num6;
					} else {
						var num7 = num4;
					__loop1__: 
						for (var num8 = num2; num8 !== num3; ) {
							num8 -= num5;
							num7 -= num5;
							c2 = (text[num7]);
							if (this._caseInsensitive) {
								c2 = System.Char.ToLower$0(c2, this._culture);
							}
							if (c2 !== (this._pattern[num8])) {
								num6 = this._positive[num8];
								if (!(c2 & "\uff80")) {
									num7 = ((num8 - num2) + this._negativeASCII[c2.charCodeAt(0)]);
								} else {
									if ((this._negativeUnicode === null) || ((array = this._negativeUnicode[(c2.charCodeAt(0) >> 8)]) === null)) {
										num4 += num6;
										__label0__ = "IL_5F";
										continue __step0__;
									}
									num7 = ((num8 - num2) + array[(c2 & "\xff")]);
								}
								if (this._rightToLeft ? (num7 < num6) : (num7 > num6)) {
									num6 = num7;
								}
								num4 += num6;
								__label0__ = "IL_5F";
								continue __step0__;
							}
						}
						if (!this._rightToLeft) {
							return num7;
						}
						return (num7 + 1);
					}
				}
				return -1;
				break __step0__;
		}
	}
};
$asm04.System.Text.RegularExpressions.RegexBoyerMoore.prototype.toString = function () {
	return this._pattern;
};
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexBoyerMoore, "infinite", {
		"value": 2147483647}
);
$asm04.System.Text.RegularExpressions.RegexBoyerMoore.prototype._positive = null;
$asm04.System.Text.RegularExpressions.RegexBoyerMoore.prototype._negativeASCII = null;
$asm04.System.Text.RegularExpressions.RegexBoyerMoore.prototype._negativeUnicode = null;
$asm04.System.Text.RegularExpressions.RegexBoyerMoore.prototype._pattern = null;
$asm04.System.Text.RegularExpressions.RegexBoyerMoore.prototype._lowASCII = 0;
$asm04.System.Text.RegularExpressions.RegexBoyerMoore.prototype._highASCII = 0;
$asm04.System.Text.RegularExpressions.RegexBoyerMoore.prototype._rightToLeft = false;
$asm04.System.Text.RegularExpressions.RegexBoyerMoore.prototype._caseInsensitive = false;
$asm04.System.Text.RegularExpressions.RegexBoyerMoore.prototype._culture = null;

System.Text.RegularExpressions.Capture.prototype._ctor = function (text, i, l) {
	System.Object.prototype._ctor.call(this);
	this._text = text;
	this._index = i;
	this._length = l;
};
System.Text.RegularExpressions.Capture.prototype.get_Index = function () {
	return this._index;
};
System.Text.RegularExpressions.Capture.prototype.get_Length = function () {
	return this._length;
};
System.Text.RegularExpressions.Capture.prototype.get_Value = function () {
	return this._text.Substring$1(this._index, this._length);
};
System.Text.RegularExpressions.Capture.prototype.toString = function () {
	return this.Value;
};
System.Text.RegularExpressions.Capture.prototype.GetOriginalString = function () {
	return this._text;
};
System.Text.RegularExpressions.Capture.prototype.GetLeftSubstring = function () {
	return this._text.Substring$1(0, this._index);
};
System.Text.RegularExpressions.Capture.prototype.GetRightSubstring = function () {
	return this._text.Substring$1((this._index + this._length), ((this._text.length - this._index) - this._length));
};
JSIL.MakeProperty(System.Text.RegularExpressions.Capture.prototype, "Index", 
	System.Text.RegularExpressions.Capture.prototype.get_Index, null);
JSIL.MakeProperty(System.Text.RegularExpressions.Capture.prototype, "Length", 
	System.Text.RegularExpressions.Capture.prototype.get_Length, null);
JSIL.MakeProperty(System.Text.RegularExpressions.Capture.prototype, "Value", 
	System.Text.RegularExpressions.Capture.prototype.get_Value, null);
System.Text.RegularExpressions.Capture.prototype._text = null;
System.Text.RegularExpressions.Capture.prototype._index = 0;
System.Text.RegularExpressions.Capture.prototype._length = 0;

System.Text.RegularExpressions.CaptureCollection.prototype._ctor = function (group) {
	System.Object.prototype._ctor.call(this);
	this._group = group;
	this._capcount = this._group._capcount;
};
System.Text.RegularExpressions.CaptureCollection.prototype.get_SyncRoot = function () {
	return this._group;
};
System.Text.RegularExpressions.CaptureCollection.prototype.get_IsSynchronized = function () {
	return false;
};
System.Text.RegularExpressions.CaptureCollection.prototype.get_IsReadOnly = function () {
	return true;
};
System.Text.RegularExpressions.CaptureCollection.prototype.get_Count = function () {
	return this._capcount;
};
System.Text.RegularExpressions.CaptureCollection.prototype.get_Item = function (i) {
	return this.GetCapture(i);
};
System.Text.RegularExpressions.CaptureCollection.prototype.CopyTo = function (array, arrayIndex) {
	if (array === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["array"]);
	}
	var num = arrayIndex;
__loop0__: 
	for (var i = 0; i < this.Count; ++i) {
		array.SetValue(this.get_Item(i), num);
		++num;
	}
};
System.Text.RegularExpressions.CaptureCollection.prototype.GetEnumerator = function () {
	return new $asm04.System.Text.RegularExpressions.CaptureEnumerator(this);
};
System.Text.RegularExpressions.CaptureCollection.prototype.GetCapture = function (i) {
	if (!((i !== (this._capcount - 1)) || (i < 0))) {
		return this._group;
	}
	if (!((i < this._capcount) && (i >= 0))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["i"]);
	}
	if (this._captures === null) {
		this._captures = JSIL.Array.New(System.Text.RegularExpressions.Capture, this._capcount);
	__loop0__: 
		for (var j = 0; j < (this._capcount - 1); ++j) {
			this._captures[j] = new System.Text.RegularExpressions.Capture(this._group._text, this._group._caps[(j * 2)], this._group._caps[((j * 2) + 1)]);
		}
	}
	return this._captures[i];
};
JSIL.MakeProperty(System.Text.RegularExpressions.CaptureCollection.prototype, "SyncRoot", 
	System.Text.RegularExpressions.CaptureCollection.prototype.get_SyncRoot, null);
JSIL.MakeProperty(System.Text.RegularExpressions.CaptureCollection.prototype, "IsSynchronized", 
	System.Text.RegularExpressions.CaptureCollection.prototype.get_IsSynchronized, null);
JSIL.MakeProperty(System.Text.RegularExpressions.CaptureCollection.prototype, "IsReadOnly", 
	System.Text.RegularExpressions.CaptureCollection.prototype.get_IsReadOnly, null);
JSIL.MakeProperty(System.Text.RegularExpressions.CaptureCollection.prototype, "Count", 
	System.Text.RegularExpressions.CaptureCollection.prototype.get_Count, null);
JSIL.MakeProperty(System.Text.RegularExpressions.CaptureCollection.prototype, "Item", 
	System.Text.RegularExpressions.CaptureCollection.prototype.get_Item, null);
System.Text.RegularExpressions.CaptureCollection.prototype._group = null;
System.Text.RegularExpressions.CaptureCollection.prototype._capcount = 0;
System.Text.RegularExpressions.CaptureCollection.prototype._captures = null;

$asm04.System.Text.RegularExpressions.CaptureEnumerator.prototype._ctor = function (rcc) {
	System.Object.prototype._ctor.call(this);
	this._curindex = -1;
	this._rcc = rcc;
};
$asm04.System.Text.RegularExpressions.CaptureEnumerator.prototype.MoveNext = function () {
	var count = this._rcc.Count;
	if (this._curindex >= count) {
		return false;
	}
	++this._curindex;
	return (this._curindex < count);
};
$asm04.System.Text.RegularExpressions.CaptureEnumerator.prototype.get_Current = function () {
	return this.Capture;
};
$asm04.System.Text.RegularExpressions.CaptureEnumerator.prototype.get_Capture = function () {
	if (!((this._curindex >= 0) && (this._curindex < this._rcc.Count))) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm04.System.SR.GetString$2("EnumNotStarted")]);
	}
	return this._rcc.get_Item(this._curindex);
};
$asm04.System.Text.RegularExpressions.CaptureEnumerator.prototype.Reset = function () {
	this._curindex = -1;
};
JSIL.MakeProperty($asm04.System.Text.RegularExpressions.CaptureEnumerator.prototype, "Current", 
	$asm04.System.Text.RegularExpressions.CaptureEnumerator.prototype.get_Current, null);
JSIL.MakeProperty($asm04.System.Text.RegularExpressions.CaptureEnumerator.prototype, "Capture", 
	$asm04.System.Text.RegularExpressions.CaptureEnumerator.prototype.get_Capture, null);
$asm04.System.Text.RegularExpressions.CaptureEnumerator.prototype._rcc = null;
$asm04.System.Text.RegularExpressions.CaptureEnumerator.prototype._curindex = 0;

$asm04.System.Text.RegularExpressions.RegexCharClass.prototype._ctor$0 = function () {
	System.Object.prototype._ctor.call(this);
	this._rangelist = new (System.Collections.Generic.List$b1.Of($asm04.System.Text.RegularExpressions.RegexCharClass.SingleRange)) (6);
	this._canonical = true;
	this._categories = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
};
$asm04.System.Text.RegularExpressions.RegexCharClass.prototype._ctor$1 = function (negate, ranges, categories, subtraction) {
	System.Object.prototype._ctor.call(this);
	this._rangelist = ranges;
	this._categories = categories;
	this._canonical = true;
	this._negate = negate;
	this._subtractor = subtraction;
};
$asm04.System.Text.RegularExpressions.RegexCharClass.prototype.get_CanMerge = function () {
	return (!this._negate && (this._subtractor === null));
};
$asm04.System.Text.RegularExpressions.RegexCharClass.prototype.set_Negate = function (value) {
	this._negate = value;
};
$asm04.System.Text.RegularExpressions.RegexCharClass.prototype.AddChar = function (c) {
	this.AddRange(c, c);
};
$asm04.System.Text.RegularExpressions.RegexCharClass.prototype.AddCharClass = function (cc) {
	if (!cc._canonical) {
		this._canonical = false;
	} else if (!(!this._canonical || 
			(this.RangeCount() <= 0) || 
			(cc.RangeCount() <= 0) || (cc.GetRangeAt(0)._first > this.GetRangeAt((this.RangeCount() - 1))._last))) {
		this._canonical = false;
	}
__loop0__: 
	for (var i = 0; i < cc.RangeCount(); ++i) {
		this._rangelist.Add(cc.GetRangeAt(i));
	}
	this._categories.Append$2(cc._categories.toString());
};
$asm04.System.Text.RegularExpressions.RegexCharClass.prototype.AddSet = function (set) {
	if (!(!this._canonical || 
			(this.RangeCount() <= 0) || 
			(set.length <= 0) || ((set[0]) > this.GetRangeAt((this.RangeCount() - 1))._last))) {
		this._canonical = false;
	}
__loop0__: 
	for (var i = 0; i < (set.length - 1); i += 2) {
		this._rangelist.Add(new $asm04.System.Text.RegularExpressions.RegexCharClass.SingleRange(set[i], ((set[(i + 1)]) - "\x01")));
	}
	if (i < set.length) {
		this._rangelist.Add(new $asm04.System.Text.RegularExpressions.RegexCharClass.SingleRange(set[i], "\uffff"));
	}
};
$asm04.System.Text.RegularExpressions.RegexCharClass.prototype.AddSubtraction = function (sub) {
	this._subtractor = sub;
};
$asm04.System.Text.RegularExpressions.RegexCharClass.prototype.AddRange = function (first, last) {
	this._rangelist.Add(new $asm04.System.Text.RegularExpressions.RegexCharClass.SingleRange(first, last));
	if (!(!this._canonical || 
			(this._rangelist.Count <= 0) || (first > this._rangelist.get_Item((this._rangelist.Count - 1))._last))) {
		this._canonical = false;
	}
};
$asm04.System.Text.RegularExpressions.RegexCharClass.prototype.AddCategoryFromName = function (categoryName, invert, caseInsensitive, pattern) {
	var text = new JSIL.Variable(null);
	$asm04.System.Text.RegularExpressions.RegexCharClass._definedCategories.TryGetValue(categoryName, /* ref */ text);
	if (!((text.value === null) || categoryName.Equals$1($asm04.System.Text.RegularExpressions.RegexCharClass.InternalRegexIgnoreCase))) {
		var text2 = text.value;
		if (!(!caseInsensitive || (!categoryName.Equals$1("Ll") && 
					!categoryName.Equals$1("Lu") && 
					!categoryName.Equals$1("Lt")))) {
			text2 = $asm04.System.Text.RegularExpressions.RegexCharClass._definedCategories.get_Item($asm04.System.Text.RegularExpressions.RegexCharClass.InternalRegexIgnoreCase);
		}
		if (invert) {
			text2 = $asm04.System.Text.RegularExpressions.RegexCharClass.NegateCategory(text2);
		}
		this._categories.Append$2(text2);
		return;
	}
	this.AddSet($asm04.System.Text.RegularExpressions.RegexCharClass.SetFromProperty(categoryName, invert, pattern));
};
$asm04.System.Text.RegularExpressions.RegexCharClass.prototype.AddCategory = function (category) {
	this._categories.Append$2(category);
};
$asm04.System.Text.RegularExpressions.RegexCharClass.prototype.AddLowercase = function (culture) {
	this._canonical = false;
	var i = 0;
	var count = this._rangelist.Count;
__loop0__: 
	while (i < count) {
		var singleRange = this._rangelist.get_Item(i);
		if (singleRange._first === singleRange._last) {
			singleRange._first = (singleRange._last = System.Char.ToLower$0(singleRange._first, culture));
		} else {
			this.AddLowercaseRange(singleRange._first, singleRange._last, culture);
		}
		++i;
	}
};
$asm04.System.Text.RegularExpressions.RegexCharClass.prototype.AddLowercaseRange = function (chMin, chMax, culture) {
	var lowerCaseMapping = new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping(), c = 0, c2 = 0;
	var i = 0;
__loop0__: 
	for (var num = $asm04.System.Text.RegularExpressions.RegexCharClass._lcTable.length; i < num; ) {
		var num2 = Math.floor((i + num) / 2);
		if ($asm04.System.Text.RegularExpressions.RegexCharClass._lcTable[num2]._chMax < chMin) {
			i = (num2 + 1);
		} else {
			num = num2;
		}
	}
	if (i >= $asm04.System.Text.RegularExpressions.RegexCharClass._lcTable.length) {
		return;
	}
__loop1__: 
	for (; (i < $asm04.System.Text.RegularExpressions.RegexCharClass._lcTable.length) && ($asm04.System.Text.RegularExpressions.RegexCharClass._lcTable[i]._chMin <= chMax); ++i) {
		if ((c = lowerCaseMapping._chMin) < chMin) {
			c = chMin;
		}
		if ((c2 = lowerCaseMapping._chMax) > chMax) {
			c2 = chMax;
		}
		switch (lowerCaseMapping._lcOp) {
			case 0: 
				c = String.fromCharCode(lowerCaseMapping._data);
				c2 = String.fromCharCode(lowerCaseMapping._data);
				break;
			case 1: 
				c += String.fromCharCode(lowerCaseMapping._data);
				c2 += String.fromCharCode(lowerCaseMapping._data);
				break;
			case 2: 
				c = (c | "\x01");
				c2 = (c2 | "\x01");
				break;
			case 3: 
				c += (c & "\x01");
				c2 += (c2 & "\x01");
				break;
		}
		if (!((c >= chMin) && (c2 <= chMax))) {
			this.AddRange(c, c2);
		}
	}
};
$asm04.System.Text.RegularExpressions.RegexCharClass.prototype.AddWord = function (ecma, negate) {
	if (negate) {
		if (ecma) {
			this.AddSet("\00:A[_`a{\u0130\u0131");
			return;
		}
		this.AddCategory($asm04.System.Text.RegularExpressions.RegexCharClass.NotWord);
		return;
	} else {
		if (ecma) {
			this.AddSet("0:A[_`a{\u0130\u0131");
			return;
		}
		this.AddCategory($asm04.System.Text.RegularExpressions.RegexCharClass.Word);
		return;
	}
};
$asm04.System.Text.RegularExpressions.RegexCharClass.prototype.AddSpace = function (ecma, negate) {
	if (negate) {
		if (ecma) {
			this.AddSet("\0\t\x0e !");
			return;
		}
		this.AddCategory($asm04.System.Text.RegularExpressions.RegexCharClass.NotSpace);
		return;
	} else {
		if (ecma) {
			this.AddSet("\t\x0e !");
			return;
		}
		this.AddCategory($asm04.System.Text.RegularExpressions.RegexCharClass.Space);
		return;
	}
};
$asm04.System.Text.RegularExpressions.RegexCharClass.prototype.AddDigit = function (ecma, negate, pattern) {
	if (!ecma) {
		this.AddCategoryFromName("Nd", negate, false, pattern);
		return;
	}
	if (negate) {
		this.AddSet("\00:");
		return;
	}
	this.AddSet("0:");
};
$asm04.System.Text.RegularExpressions.RegexCharClass.ConvertOldStringsToClass = function (set, category) {
	var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$1", [((set.length + category.length) + 3)]);
	if (!((set.length < 2) || 
			JSIL.Cast(set[0], System.Boolean) || JSIL.Cast(set[1], System.Boolean))) {
		stringBuilder.Append$7("\x01");
		stringBuilder.Append$7((set.length - 2));
		stringBuilder.Append$7(String.fromCharCode(category.length));
		stringBuilder.Append$2(set.Substring$0(2));
	} else {
		stringBuilder.Append$7("\0");
		stringBuilder.Append$7(String.fromCharCode(set.length));
		stringBuilder.Append$7(String.fromCharCode(category.length));
		stringBuilder.Append$2(set);
	}
	stringBuilder.Append$2(category);
	return stringBuilder.toString();
};
$asm04.System.Text.RegularExpressions.RegexCharClass.SingletonChar = function (set) {
	return set[3];
};
$asm04.System.Text.RegularExpressions.RegexCharClass.IsMergeable = function (charClass) {
	return (!$asm04.System.Text.RegularExpressions.RegexCharClass.IsNegated(charClass) && !$asm04.System.Text.RegularExpressions.RegexCharClass.IsSubtraction(charClass));
};
$asm04.System.Text.RegularExpressions.RegexCharClass.IsEmpty = function (charClass) {
	return !(JSIL.Cast(charClass[2], System.Boolean) || 
		JSIL.Cast(charClass[0], System.Boolean) || 
		JSIL.Cast(charClass[1], System.Boolean) || $asm04.System.Text.RegularExpressions.RegexCharClass.IsSubtraction(charClass));
};
$asm04.System.Text.RegularExpressions.RegexCharClass.IsSingleton = function (set) {
	return !(JSIL.Cast(set[0], System.Boolean) || 
		JSIL.Cast(set[2], System.Boolean) || 
		((set[1]) !== "\x02") || 
		$asm04.System.Text.RegularExpressions.RegexCharClass.IsSubtraction(set) || (((set[3]) !== "\uffff") && 
			(((set[3]) + "\x01") !== (set[4]))));
};
$asm04.System.Text.RegularExpressions.RegexCharClass.IsSingletonInverse = function (set) {
	return !(((set[0]) !== "\x01") || 
		JSIL.Cast(set[2], System.Boolean) || 
		((set[1]) !== "\x02") || 
		$asm04.System.Text.RegularExpressions.RegexCharClass.IsSubtraction(set) || (((set[3]) !== "\uffff") && 
			(((set[3]) + "\x01") !== (set[4]))));
};
$asm04.System.Text.RegularExpressions.RegexCharClass.IsSubtraction = function (charClass) {
	return (charClass.length > (("\x03" + (charClass[1])) + (charClass[2])));
};
$asm04.System.Text.RegularExpressions.RegexCharClass.IsNegated = function (set) {
	return ((set !== null) && ((set[0]) === "\x01"));
};
$asm04.System.Text.RegularExpressions.RegexCharClass.IsECMAWordChar = function (ch) {
	return $asm04.System.Text.RegularExpressions.RegexCharClass.CharInClass(ch, "\0\n\00:A[_`a{\u0130\u0131");
};
$asm04.System.Text.RegularExpressions.RegexCharClass.IsWordChar = function (ch) {
	return ($asm04.System.Text.RegularExpressions.RegexCharClass.CharInClass(ch, $asm04.System.Text.RegularExpressions.RegexCharClass.WordClass) || 
		(ch === "\u200d") || (ch === "\u200c"));
};
$asm04.System.Text.RegularExpressions.RegexCharClass.CharInClass = function (ch, set) {
	return $asm04.System.Text.RegularExpressions.RegexCharClass.CharInClassRecursive(ch, set, 0);
};
$asm04.System.Text.RegularExpressions.RegexCharClass.CharInClassRecursive = function (ch, set, start) {
	var num = (set[(start + 1)]).charCodeAt(0);
	var num2 = (set[(start + 2)]).charCodeAt(0);
	var num3 = (((start + 3) + num) + num2);
	var flag = false;
	if (set.length > num3) {
		flag = $asm04.System.Text.RegularExpressions.RegexCharClass.CharInClassRecursive(ch, set, num3);
	}
	var flag2 = $asm04.System.Text.RegularExpressions.RegexCharClass.CharInClassInternal(
		ch, 
		set, 
		start, 
		num, 
		num2
	);
	if ((set[start]) === "\x01") {
		flag2 = !flag2;
	}
	return (flag2 && !flag);
};
$asm04.System.Text.RegularExpressions.RegexCharClass.CharInClassInternal = function (ch, set, start, mySetLength, myCategoryLength) {
	var num = (start + 3);
__loop0__: 
	for (var num2 = (num + mySetLength); num !== num2; ) {
		var num3 = Math.floor((num + num2) / 2);
		if (ch < (set[num3])) {
			num2 = num3;
		} else {
			num = (num3 + 1);
		}
	}
	return (((num & 1) === (start & 1)) || ((myCategoryLength !== 0) && 
			$asm04.System.Text.RegularExpressions.RegexCharClass.CharInCategory(
				ch, 
				set, 
				start, 
				mySetLength, 
				myCategoryLength
			)));
};
$asm04.System.Text.RegularExpressions.RegexCharClass.CharInCategory = function (ch, set, start, mySetLength, myCategoryLength) {
	var unicodeCategory = System.Char.GetUnicodeCategory$0(ch);
	var i = new JSIL.Variable(((start + 3) + mySetLength));
	var num = (i.value + myCategoryLength);
__loop0__: 
	while (i.value < num) {
		var num2 = set[i.value].charCodeAt(0);
		if (num2 === 0) {
			if ($asm04.System.Text.RegularExpressions.RegexCharClass.CharInCategoryGroup(ch, unicodeCategory, set, /* ref */ i)) {
				return true;
			}
		} else if (num2 > 0) {
			if (num2 === 100) {
				if (System.Char.IsWhiteSpace$0(ch)) {
					return true;
				}
				++i.value;
				continue __loop0__;
			} else {
				--num2;
				if (unicodeCategory === num2) {
					return true;
				}
			}
		} else if (num2 === -100) {
			if (!System.Char.IsWhiteSpace$0(ch)) {
				return true;
			}
			++i.value;
			continue __loop0__;
		} else {
			num2 = (-1 - num2);
			if (unicodeCategory !== num2) {
				return true;
			}
		}
		++i.value;
	}
	return false;
};
$asm04.System.Text.RegularExpressions.RegexCharClass.CharInCategoryGroup = function (ch, chcategory, category, /* ref */ i) {
	++i.value;
	var num = category[i.value].charCodeAt(0);
	if (num > 0) {
		var flag = false;
	__loop0__: 
		while (num !== 0) {
			if (!flag) {
				--num;
				if (chcategory === num) {
					flag = true;
				}
			}
			++i.value;
			num = category[i.value].charCodeAt(0);
		}
		return flag;
	}
	var flag2 = true;
__loop1__: 
	while (num !== 0) {
		if (flag2) {
			num = (-1 - num);
			if (chcategory === num) {
				flag2 = false;
			}
		}
		++i.value;
		num = category[i.value].charCodeAt(0);
	}
	return flag2;
};
$asm04.System.Text.RegularExpressions.RegexCharClass.NegateCategory = function (category) {
	if (category === null) {
		return null;
	}
	var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$1", [category.length]);
__loop0__: 
	for (var i = 0; i < category.length; ++i) {
		var num = category[i].charCodeAt(0);
		stringBuilder.Append$7(-String.fromCharCode(num));
	}
	return stringBuilder.toString();
};
$asm04.System.Text.RegularExpressions.RegexCharClass.Parse = function (charClass) {
	return $asm04.System.Text.RegularExpressions.RegexCharClass.ParseRecursive(charClass, 0);
};
$asm04.System.Text.RegularExpressions.RegexCharClass.ParseRecursive = function (charClass, start) {
	var num = (charClass[(start + 1)]).charCodeAt(0);
	var num2 = (charClass[(start + 2)]).charCodeAt(0);
	var num3 = (((start + 3) + num) + num2);
	var list = new (System.Collections.Generic.List$b1.Of($asm04.System.Text.RegularExpressions.RegexCharClass.SingleRange)) (num);
	var i = (start + 3);
__loop0__: 
	for (var num4 = (i + num); i < num4; ) {
		var first = (charClass[i]);
		++i;
		if (i < num4) {
			var last = ((charClass[i]) - "\x01");
		} else {
			last = "\uffff";
		}
		++i;
		list.Add(new $asm04.System.Text.RegularExpressions.RegexCharClass.SingleRange(first, last));
	}
	var subtraction = null;
	if (charClass.length > num3) {
		subtraction = $asm04.System.Text.RegularExpressions.RegexCharClass.ParseRecursive(charClass, num3);
	}
	return JSIL.New($asm04.System.Text.RegularExpressions.RegexCharClass, "_ctor$1", [((charClass[start]) === "\x01"), list, JSIL.New(System.Text.StringBuilder, "_ctor$2", [charClass.Substring$1(num4, num2)]), subtraction]);
};
$asm04.System.Text.RegularExpressions.RegexCharClass.prototype.RangeCount = function () {
	return this._rangelist.Count;
};
$asm04.System.Text.RegularExpressions.RegexCharClass.prototype.ToStringClass = function () {
	if (!this._canonical) {
		this.Canonicalize();
	}
	var num = (this._rangelist.Count * 2);
	var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$1", [((num + this._categories.Length) + 3)]);
	if (this._negate) {
		var num2 = 1;
	} else {
		num2 = 0;
	}
	stringBuilder.Append$7(String.fromCharCode(num2));
	stringBuilder.Append$7(String.fromCharCode(num));
	stringBuilder.Append$7(String.fromCharCode(this._categories.Length));
__loop0__: 
	for (var i = 0; i < this._rangelist.Count; ++i) {
		var singleRange = this._rangelist.get_Item(i);
		stringBuilder.Append$7(singleRange._first);
		if (singleRange._last !== "\uffff") {
			stringBuilder.Append$7((singleRange._last + "\x01"));
		}
	}
	stringBuilder.set_Chars(1, (stringBuilder.Length - 3));
	stringBuilder.Append$16(this._categories);
	if (this._subtractor !== null) {
		stringBuilder.Append$2(this._subtractor.ToStringClass());
	}
	return stringBuilder.toString();
};
$asm04.System.Text.RegularExpressions.RegexCharClass.prototype.GetRangeAt = function (i) {
	return this._rangelist.get_Item(i);
};
$asm04.System.Text.RegularExpressions.RegexCharClass.prototype.Canonicalize = function () {
	var __label0__ = null;
__step0__: 
	while (true) {
		switch (__label0__) {
			case null:
				var singleRange = null;
				__label0__ = "__entry0__";
				continue __step0__;
				break;
			case "__entry0__":
				this._canonical = true;
				this._rangelist.Sort$2(0, this._rangelist.Count, new $asm04.System.Text.RegularExpressions.RegexCharClass.SingleRangeComparer());
				if (this._rangelist.Count > 1) {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								var flag = false;
								var num = 1;
								var num2 = 0;
							__loop0__: 
								while (true) {
									var __label2__ = "__entry2__";
								__step2__: 
									while (true) {
										switch (__label2__) {
											case "__entry2__":
												__label2__ = "IL_3B";
												continue __step2__;
												break;
											case "IL_3B":
											__loop1__: 
												for (var last = this._rangelist.get_Item(num2)._last; (num !== this._rangelist.Count) && (last !== "\uffff"); ) {
													var __label3__ = "__entry3__";
												__step3__: 
													while (true) {
														switch (__label3__) {
															case "__entry3__":
																if ((singleRange = this._rangelist.get_Item(num))._first <= (last + "\x01")) {
																	if (last < singleRange._last) {
																		last = singleRange._last;
																	}
																	++num;
																} else {
																	var __label4__ = "__entry4__";
																__step4__: 
																	while (true) {
																		switch (__label4__) {
																			case "__entry4__":
																				__label4__ = "IL_96";
																				continue __step4__;
																				break;
																			case "IL_96":
																				this._rangelist.get_Item(num2)._last = last;
																				++num2;
																				if (!flag) {
																					if (num2 < num) {
																						this._rangelist.set_Item(num2, this._rangelist.get_Item(num));
																					}
																					++num;
																					__label2__ = "IL_3B";
																					continue __step2__;
																				}
																				__label1__ = "IL_D5";
																				continue __step1__;
																				break __step4__;
																		}
																	}
																}
																break __step3__;
														}
													}
												}
												flag = true;
												JSIL.UntranslatableInstruction("goto", "IL_96");
												break __step2__;
										}
									}
								}
								__label1__ = "IL_D5";
								continue __step1__;
								break;
							case "IL_D5":
								this._rangelist.RemoveRange(num2, (this._rangelist.Count - num2));
								break __step1__;
						}
					}
				}
				break __step0__;
		}
	}
};
$asm04.System.Text.RegularExpressions.RegexCharClass.SetFromProperty = function (capname, invert, pattern) {
	var num = 0;
__loop0__: 
	for (var num2 = $asm04.System.Text.RegularExpressions.RegexCharClass._propTable.length0; num !== num2; ) {
		var num3 = Math.floor((num + num2) / 2);
		var num4 = System.String.Compare$1(capname, $asm04.System.Text.RegularExpressions.RegexCharClass._propTable.Get(num3, 0), System.StringComparison.Ordinal);
		if (num4 < 0) {
			num2 = num3;
		} else if (num4 > 0) {
			num = (num3 + 1);
		} else {
			var text = $asm04.System.Text.RegularExpressions.RegexCharClass._propTable.Get(num3, 1);
			if (!invert) {
				return text;
			}
			if (!JSIL.Cast(text[0], System.Boolean)) {
				return text.Substring$0(1);
			}
			return JSIL.ConcatString("\0", text);
		}
	}
	throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm04.System.SR.GetString$0("MakeException", [pattern, $asm04.System.SR.GetString$0("UnknownProperty", [capname])])]);
};
JSIL.OverloadedMethod($asm04.System.Text.RegularExpressions.RegexCharClass.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Boolean, System.Collections.Generic.List$b1.Of($asm04.System.Text.RegularExpressions.RegexCharClass.SingleRange), System.Text.StringBuilder, $asm04.System.Text.RegularExpressions.RegexCharClass]]
	]);
JSIL.MakeProperty($asm04.System.Text.RegularExpressions.RegexCharClass.prototype, "CanMerge", 
	$asm04.System.Text.RegularExpressions.RegexCharClass.prototype.get_CanMerge, null);
JSIL.MakeProperty($asm04.System.Text.RegularExpressions.RegexCharClass.prototype, "Negate", 
	null, $asm04.System.Text.RegularExpressions.RegexCharClass.prototype.set_Negate);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCharClass, "FLAGS", {
		"value": 0}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCharClass, "SETLENGTH", {
		"value": 1}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCharClass, "CATEGORYLENGTH", {
		"value": 2}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCharClass, "SETSTART", {
		"value": 3}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCharClass, "Nullchar", {
		"value": "\0"}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCharClass, "Lastchar", {
		"value": "\uffff"}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCharClass, "GroupChar", {
		"value": "\0"}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCharClass, "SpaceConst", {
		"value": 100}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCharClass, "NotSpaceConst", {
		"value": -100}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCharClass, "ZeroWidthJoiner", {
		"value": "\u200d"}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCharClass, "ZeroWidthNonJoiner", {
		"value": "\u200c"}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCharClass, "ECMASpaceSet", {
		"value": "\t\x0e !"}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCharClass, "NotECMASpaceSet", {
		"value": "\0\t\x0e !"}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCharClass, "ECMAWordSet", {
		"value": "0:A[_`a{\u0130\u0131"}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCharClass, "NotECMAWordSet", {
		"value": "\00:A[_`a{\u0130\u0131"}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCharClass, "ECMADigitSet", {
		"value": "0:"}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCharClass, "NotECMADigitSet", {
		"value": "\00:"}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCharClass, "ECMASpaceClass", {
		"value": "\0\x04\0\t\x0e !"}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCharClass, "NotECMASpaceClass", {
		"value": "\x01\x04\0\t\x0e !"}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCharClass, "ECMAWordClass", {
		"value": "\0\n\00:A[_`a{\u0130\u0131"}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCharClass, "NotECMAWordClass", {
		"value": "\x01\n\00:A[_`a{\u0130\u0131"}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCharClass, "ECMADigitClass", {
		"value": "\0\x02\00:"}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCharClass, "NotECMADigitClass", {
		"value": "\x01\x02\00:"}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCharClass, "AnyClass", {
		"value": "\0\x01\0\0"}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCharClass, "EmptyClass", {
		"value": "\0\0\0"}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCharClass, "LowercaseSet", {
		"value": 0}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCharClass, "LowercaseAdd", {
		"value": 1}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCharClass, "LowercaseBor", {
		"value": 2}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCharClass, "LowercaseBad", {
		"value": 3}
);
$asm04.System.Text.RegularExpressions.RegexCharClass.prototype._rangelist = null;
$asm04.System.Text.RegularExpressions.RegexCharClass.prototype._categories = null;
$asm04.System.Text.RegularExpressions.RegexCharClass.prototype._canonical = false;
$asm04.System.Text.RegularExpressions.RegexCharClass.prototype._negate = false;
$asm04.System.Text.RegularExpressions.RegexCharClass.prototype._subtractor = null;
$asm04.System.Text.RegularExpressions.RegexCharClass.InternalRegexIgnoreCase = null;
$asm04.System.Text.RegularExpressions.RegexCharClass.Space = null;
$asm04.System.Text.RegularExpressions.RegexCharClass.NotSpace = null;
$asm04.System.Text.RegularExpressions.RegexCharClass.Word = null;
$asm04.System.Text.RegularExpressions.RegexCharClass.NotWord = null;
$asm04.System.Text.RegularExpressions.RegexCharClass.SpaceClass = null;
$asm04.System.Text.RegularExpressions.RegexCharClass.NotSpaceClass = null;
$asm04.System.Text.RegularExpressions.RegexCharClass.WordClass = null;
$asm04.System.Text.RegularExpressions.RegexCharClass.NotWordClass = null;
$asm04.System.Text.RegularExpressions.RegexCharClass.DigitClass = null;
$asm04.System.Text.RegularExpressions.RegexCharClass.NotDigitClass = null;
$asm04.System.Text.RegularExpressions.RegexCharClass._definedCategories = null;
$asm04.System.Text.RegularExpressions.RegexCharClass._propTable = null;
$asm04.System.Text.RegularExpressions.RegexCharClass._lcTable = null;
$asm04.System.Text.RegularExpressions.RegexCharClass._cctor = function () {
	$asm04.System.Text.RegularExpressions.RegexCharClass.InternalRegexIgnoreCase = "__InternalRegexIgnoreCase__";
	$asm04.System.Text.RegularExpressions.RegexCharClass.Space = "d";
	$asm04.System.Text.RegularExpressions.RegexCharClass.NotSpace = $asm04.System.Text.RegularExpressions.RegexCharClass.NegateCategory($asm04.System.Text.RegularExpressions.RegexCharClass.Space);
	var array = JSIL.MultidimensionalArray.New(System.String, 112, 2);
	array.Set(0, 0, "IsAlphabeticPresentationForms");
	array.Set(0, 1, "\ufb00\ufb50");
	array.Set(1, 0, "IsArabic");
	array.Set(1, 1, "\u0600\u0700");
	array.Set(2, 0, "IsArabicPresentationForms-A");
	array.Set(2, 1, "\ufb50\ufe00");
	array.Set(3, 0, "IsArabicPresentationForms-B");
	array.Set(3, 1, "\ufe70\uff00");
	array.Set(4, 0, "IsArmenian");
	array.Set(4, 1, "\u0530\u0590");
	array.Set(5, 0, "IsArrows");
	array.Set(5, 1, "\u2190\u2200");
	array.Set(6, 0, "IsBasicLatin");
	array.Set(6, 1, "\0\x80");
	array.Set(7, 0, "IsBengali");
	array.Set(7, 1, "\u0980\u0a00");
	array.Set(8, 0, "IsBlockElements");
	array.Set(8, 1, "\u2580\u25a0");
	array.Set(9, 0, "IsBopomofo");
	array.Set(9, 1, "\u3100\u3130");
	array.Set(10, 0, "IsBopomofoExtended");
	array.Set(10, 1, "\u31a0\u31c0");
	array.Set(11, 0, "IsBoxDrawing");
	array.Set(11, 1, "\u2500\u2580");
	array.Set(12, 0, "IsBraillePatterns");
	array.Set(12, 1, "\u2800\u2900");
	array.Set(13, 0, "IsBuhid");
	array.Set(13, 1, "\u1740\u1760");
	array.Set(14, 0, "IsCJKCompatibility");
	array.Set(14, 1, "\u3300\u3400");
	array.Set(15, 0, "IsCJKCompatibilityForms");
	array.Set(15, 1, "\ufe30\ufe50");
	array.Set(16, 0, "IsCJKCompatibilityIdeographs");
	array.Set(16, 1, "\uf900\ufb00");
	array.Set(17, 0, "IsCJKRadicalsSupplement");
	array.Set(17, 1, "\u2e80\u2f00");
	array.Set(18, 0, "IsCJKSymbolsandPunctuation");
	array.Set(18, 1, "\u3000\u3040");
	array.Set(19, 0, "IsCJKUnifiedIdeographs");
	array.Set(19, 1, "\u4e00\ua000");
	array.Set(20, 0, "IsCJKUnifiedIdeographsExtensionA");
	array.Set(20, 1, "\u3400\u4dc0");
	array.Set(21, 0, "IsCherokee");
	array.Set(21, 1, "\u13a0\u1400");
	array.Set(22, 0, "IsCombiningDiacriticalMarks");
	array.Set(22, 1, "\u0300\u0370");
	array.Set(23, 0, "IsCombiningDiacriticalMarksforSymbols");
	array.Set(23, 1, "\u20d0\u2100");
	array.Set(24, 0, "IsCombiningHalfMarks");
	array.Set(24, 1, "\ufe20\ufe30");
	array.Set(25, 0, "IsCombiningMarksforSymbols");
	array.Set(25, 1, "\u20d0\u2100");
	array.Set(26, 0, "IsControlPictures");
	array.Set(26, 1, "\u2400\u2440");
	array.Set(27, 0, "IsCurrencySymbols");
	array.Set(27, 1, "\u20a0\u20d0");
	array.Set(28, 0, "IsCyrillic");
	array.Set(28, 1, "\u0400\u0500");
	array.Set(29, 0, "IsCyrillicSupplement");
	array.Set(29, 1, "\u0500\u0530");
	array.Set(30, 0, "IsDevanagari");
	array.Set(30, 1, "\u0900\u0980");
	array.Set(31, 0, "IsDingbats");
	array.Set(31, 1, "\u2700\u27c0");
	array.Set(32, 0, "IsEnclosedAlphanumerics");
	array.Set(32, 1, "\u2460\u2500");
	array.Set(33, 0, "IsEnclosedCJKLettersandMonths");
	array.Set(33, 1, "\u3200\u3300");
	array.Set(34, 0, "IsEthiopic");
	array.Set(34, 1, "\u1200\u1380");
	array.Set(35, 0, "IsGeneralPunctuation");
	array.Set(35, 1, "\u2000\u2070");
	array.Set(36, 0, "IsGeometricShapes");
	array.Set(36, 1, "\u25a0\u2600");
	array.Set(37, 0, "IsGeorgian");
	array.Set(37, 1, "\u10a0\u1100");
	array.Set(38, 0, "IsGreek");
	array.Set(38, 1, "\u0370\u0400");
	array.Set(39, 0, "IsGreekExtended");
	array.Set(39, 1, "\u1f00\u2000");
	array.Set(40, 0, "IsGreekandCoptic");
	array.Set(40, 1, "\u0370\u0400");
	array.Set(41, 0, "IsGujarati");
	array.Set(41, 1, "\u0a80\u0b00");
	array.Set(42, 0, "IsGurmukhi");
	array.Set(42, 1, "\u0a00\u0a80");
	array.Set(43, 0, "IsHalfwidthandFullwidthForms");
	array.Set(43, 1, "\uff00\ufff0");
	array.Set(44, 0, "IsHangulCompatibilityJamo");
	array.Set(44, 1, "\u3130\u3190");
	array.Set(45, 0, "IsHangulJamo");
	array.Set(45, 1, "\u1100\u1200");
	array.Set(46, 0, "IsHangulSyllables");
	array.Set(46, 1, "\uac00\ud7b0");
	array.Set(47, 0, "IsHanunoo");
	array.Set(47, 1, "\u1720\u1740");
	array.Set(48, 0, "IsHebrew");
	array.Set(48, 1, "\u0590\u0600");
	array.Set(49, 0, "IsHighPrivateUseSurrogates");
	array.Set(49, 1, "\udb80\udc00");
	array.Set(50, 0, "IsHighSurrogates");
	array.Set(50, 1, "\ud800\udb80");
	array.Set(51, 0, "IsHiragana");
	array.Set(51, 1, "\u3040\u30a0");
	array.Set(52, 0, "IsIPAExtensions");
	array.Set(52, 1, "\u0250\u02b0");
	array.Set(53, 0, "IsIdeographicDescriptionCharacters");
	array.Set(53, 1, "\u2ff0\u3000");
	array.Set(54, 0, "IsKanbun");
	array.Set(54, 1, "\u3190\u31a0");
	array.Set(55, 0, "IsKangxiRadicals");
	array.Set(55, 1, "\u2f00\u2fe0");
	array.Set(56, 0, "IsKannada");
	array.Set(56, 1, "\u0c80\u0d00");
	array.Set(57, 0, "IsKatakana");
	array.Set(57, 1, "\u30a0\u3100");
	array.Set(58, 0, "IsKatakanaPhoneticExtensions");
	array.Set(58, 1, "\u31f0\u3200");
	array.Set(59, 0, "IsKhmer");
	array.Set(59, 1, "\u1780\u1800");
	array.Set(60, 0, "IsKhmerSymbols");
	array.Set(60, 1, "\u19e0\u1a00");
	array.Set(61, 0, "IsLao");
	array.Set(61, 1, "\u0e80\u0f00");
	array.Set(62, 0, "IsLatin-1Supplement");
	array.Set(62, 1, "\x80\u0100");
	array.Set(63, 0, "IsLatinExtended-A");
	array.Set(63, 1, "\u0100\u0180");
	array.Set(64, 0, "IsLatinExtended-B");
	array.Set(64, 1, "\u0180\u0250");
	array.Set(65, 0, "IsLatinExtendedAdditional");
	array.Set(65, 1, "\u1e00\u1f00");
	array.Set(66, 0, "IsLetterlikeSymbols");
	array.Set(66, 1, "\u2100\u2150");
	array.Set(67, 0, "IsLimbu");
	array.Set(67, 1, "\u1900\u1950");
	array.Set(68, 0, "IsLowSurrogates");
	array.Set(68, 1, "\udc00\ue000");
	array.Set(69, 0, "IsMalayalam");
	array.Set(69, 1, "\u0d00\u0d80");
	array.Set(70, 0, "IsMathematicalOperators");
	array.Set(70, 1, "\u2200\u2300");
	array.Set(71, 0, "IsMiscellaneousMathematicalSymbols-A");
	array.Set(71, 1, "\u27c0\u27f0");
	array.Set(72, 0, "IsMiscellaneousMathematicalSymbols-B");
	array.Set(72, 1, "\u2980\u2a00");
	array.Set(73, 0, "IsMiscellaneousSymbols");
	array.Set(73, 1, "\u2600\u2700");
	array.Set(74, 0, "IsMiscellaneousSymbolsandArrows");
	array.Set(74, 1, "\u2b00\u2c00");
	array.Set(75, 0, "IsMiscellaneousTechnical");
	array.Set(75, 1, "\u2300\u2400");
	array.Set(76, 0, "IsMongolian");
	array.Set(76, 1, "\u1800\u18b0");
	array.Set(77, 0, "IsMyanmar");
	array.Set(77, 1, "\u1000\u10a0");
	array.Set(78, 0, "IsNumberForms");
	array.Set(78, 1, "\u2150\u2190");
	array.Set(79, 0, "IsOgham");
	array.Set(79, 1, "\u1680\u16a0");
	array.Set(80, 0, "IsOpticalCharacterRecognition");
	array.Set(80, 1, "\u2440\u2460");
	array.Set(81, 0, "IsOriya");
	array.Set(81, 1, "\u0b00\u0b80");
	array.Set(82, 0, "IsPhoneticExtensions");
	array.Set(82, 1, "\u1d00\u1d80");
	array.Set(83, 0, "IsPrivateUse");
	array.Set(83, 1, "\ue000\uf900");
	array.Set(84, 0, "IsPrivateUseArea");
	array.Set(84, 1, "\ue000\uf900");
	array.Set(85, 0, "IsRunic");
	array.Set(85, 1, "\u16a0\u1700");
	array.Set(86, 0, "IsSinhala");
	array.Set(86, 1, "\u0d80\u0e00");
	array.Set(87, 0, "IsSmallFormVariants");
	array.Set(87, 1, "\ufe50\ufe70");
	array.Set(88, 0, "IsSpacingModifierLetters");
	array.Set(88, 1, "\u02b0\u0300");
	array.Set(89, 0, "IsSpecials");
	array.Set(89, 1, "\ufff0");
	array.Set(90, 0, "IsSuperscriptsandSubscripts");
	array.Set(90, 1, "\u2070\u20a0");
	array.Set(91, 0, "IsSupplementalArrows-A");
	array.Set(91, 1, "\u27f0\u2800");
	array.Set(92, 0, "IsSupplementalArrows-B");
	array.Set(92, 1, "\u2900\u2980");
	array.Set(93, 0, "IsSupplementalMathematicalOperators");
	array.Set(93, 1, "\u2a00\u2b00");
	array.Set(94, 0, "IsSyriac");
	array.Set(94, 1, "\u0700\u0750");
	array.Set(95, 0, "IsTagalog");
	array.Set(95, 1, "\u1700\u1720");
	array.Set(96, 0, "IsTagbanwa");
	array.Set(96, 1, "\u1760\u1780");
	array.Set(97, 0, "IsTaiLe");
	array.Set(97, 1, "\u1950\u1980");
	array.Set(98, 0, "IsTamil");
	array.Set(98, 1, "\u0b80\u0c00");
	array.Set(99, 0, "IsTelugu");
	array.Set(99, 1, "\u0c00\u0c80");
	array.Set(100, 0, "IsThaana");
	array.Set(100, 1, "\u0780\u07c0");
	array.Set(101, 0, "IsThai");
	array.Set(101, 1, "\u0e00\u0e80");
	array.Set(102, 0, "IsTibetan");
	array.Set(102, 1, "\u0f00\u1000");
	array.Set(103, 0, "IsUnifiedCanadianAboriginalSyllabics");
	array.Set(103, 1, "\u1400\u1680");
	array.Set(104, 0, "IsVariationSelectors");
	array.Set(104, 1, "\ufe00\ufe10");
	array.Set(105, 0, "IsYiRadicals");
	array.Set(105, 1, "\ua490\ua4d0");
	array.Set(106, 0, "IsYiSyllables");
	array.Set(106, 1, "\ua000\ua490");
	array.Set(107, 0, "IsYijingHexagramSymbols");
	array.Set(107, 1, "\u4dc0\u4e00");
	array.Set(108, 0, "_xmlC");
	array.Set(108, 1, "-/0;A[_`a{\xb7\xb8\xc0\xd7\xd8\xf7\xf8\u0132\u0134\u013f\u0141\u0149\u014a\u017f\u0180\u01c4\u01cd\u01f1\u01f4\u01f6\u01fa\u0218\u0250\u02a9\u02bb\u02c2\u02d0\u02d2\u0300\u0346\u0360\u0362\u0386\u038b\u038c\u038d\u038e\u03a2\u03a3\u03cf\u03d0\u03d7\u03da\u03db\u03dc\u03dd\u03de\u03df\u03e0\u03e1\u03e2\u03f4\u0401\u040d\u040e\u0450\u0451\u045d\u045e\u0482\u0483\u0487\u0490\u04c5\u04c7\u04c9\u04cb\u04cd\u04d0\u04ec\u04ee\u04f6\u04f8\u04fa\u0531\u0557\u0559\u055a\u0561\u0587\u0591\u05a2\u05a3\u05ba\u05bb\u05be\u05bf\u05c0\u05c1\u05c3\u05c4\u05c5\u05d0\u05eb\u05f0\u05f3\u0621\u063b\u0640\u0653\u0660\u066a\u0670\u06b8\u06ba\u06bf\u06c0\u06cf\u06d0\u06d4\u06d5\u06e9\u06ea\u06ee\u06f0\u06fa\u0901\u0904\u0905\u093a\u093c\u094e\u0951\u0955\u0958\u0964\u0966\u0970\u0981\u0984\u0985\u098d\u098f\u0991\u0993\u09a9\u09aa\u09b1\u09b2\u09b3\u09b6\u09ba\u09bc\u09bd\u09be\u09c5\u09c7\u09c9\u09cb\u09ce\u09d7\u09d8\u09dc\u09de\u09df\u09e4\u09e6\u09f2\u0a02\u0a03\u0a05\u0a0b\u0a0f\u0a11\u0a13\u0a29\u0a2a\u0a31\u0a32\u0a34\u0a35\u0a37\u0a38\u0a3a\u0a3c\u0a3d\u0a3e\u0a43\u0a47\u0a49\u0a4b\u0a4e\u0a59\u0a5d\u0a5e\u0a5f\u0a66\u0a75\u0a81\u0a84\u0a85\u0a8c\u0a8d\u0a8e\u0a8f\u0a92\u0a93\u0aa9\u0aaa\u0ab1\u0ab2\u0ab4\u0ab5\u0aba\u0abc\u0ac6\u0ac7\u0aca\u0acb\u0ace\u0ae0\u0ae1\u0ae6\u0af0\u0b01\u0b04\u0b05\u0b0d\u0b0f\u0b11\u0b13\u0b29\u0b2a\u0b31\u0b32\u0b34\u0b36\u0b3a\u0b3c\u0b44\u0b47\u0b49\u0b4b\u0b4e\u0b56\u0b58\u0b5c\u0b5e\u0b5f\u0b62\u0b66\u0b70\u0b82\u0b84\u0b85\u0b8b\u0b8e\u0b91\u0b92\u0b96\u0b99\u0b9b\u0b9c\u0b9d\u0b9e\u0ba0\u0ba3\u0ba5\u0ba8\u0bab\u0bae\u0bb6\u0bb7\u0bba\u0bbe\u0bc3\u0bc6\u0bc9\u0bca\u0bce\u0bd7\u0bd8\u0be7\u0bf0\u0c01\u0c04\u0c05\u0c0d\u0c0e\u0c11\u0c12\u0c29\u0c2a\u0c34\u0c35\u0c3a\u0c3e\u0c45\u0c46\u0c49\u0c4a\u0c4e\u0c55\u0c57\u0c60\u0c62\u0c66\u0c70\u0c82\u0c84\u0c85\u0c8d\u0c8e\u0c91\u0c92\u0ca9\u0caa\u0cb4\u0cb5\u0cba\u0cbe\u0cc5\u0cc6\u0cc9\u0cca\u0cce\u0cd5\u0cd7\u0cde\u0cdf\u0ce0\u0ce2\u0ce6\u0cf0\u0d02\u0d04\u0d05\u0d0d\u0d0e\u0d11\u0d12\u0d29\u0d2a\u0d3a\u0d3e\u0d44\u0d46\u0d49\u0d4a\u0d4e\u0d57\u0d58\u0d60\u0d62\u0d66\u0d70\u0e01\u0e2f\u0e30\u0e3b\u0e40\u0e4f\u0e50\u0e5a\u0e81\u0e83\u0e84\u0e85\u0e87\u0e89\u0e8a\u0e8b\u0e8d\u0e8e\u0e94\u0e98\u0e99\u0ea0\u0ea1\u0ea4\u0ea5\u0ea6\u0ea7\u0ea8\u0eaa\u0eac\u0ead\u0eaf\u0eb0\u0eba\u0ebb\u0ebe\u0ec0\u0ec5\u0ec6\u0ec7\u0ec8\u0ece\u0ed0\u0eda\u0f18\u0f1a\u0f20\u0f2a\u0f35\u0f36\u0f37\u0f38\u0f39\u0f3a\u0f3e\u0f48\u0f49\u0f6a\u0f71\u0f85\u0f86\u0f8c\u0f90\u0f96\u0f97\u0f98\u0f99\u0fae\u0fb1\u0fb8\u0fb9\u0fba\u10a0\u10c6\u10d0\u10f7\u1100\u1101\u1102\u1104\u1105\u1108\u1109\u110a\u110b\u110d\u110e\u1113\u113c\u113d\u113e\u113f\u1140\u1141\u114c\u114d\u114e\u114f\u1150\u1151\u1154\u1156\u1159\u115a\u115f\u1162\u1163\u1164\u1165\u1166\u1167\u1168\u1169\u116a\u116d\u116f\u1172\u1174\u1175\u1176\u119e\u119f\u11a8\u11a9\u11ab\u11ac\u11ae\u11b0\u11b7\u11b9\u11ba\u11bb\u11bc\u11c3\u11eb\u11ec\u11f0\u11f1\u11f9\u11fa\u1e00\u1e9c\u1ea0\u1efa\u1f00\u1f16\u1f18\u1f1e\u1f20\u1f46\u1f48\u1f4e\u1f50\u1f58\u1f59\u1f5a\u1f5b\u1f5c\u1f5d\u1f5e\u1f5f\u1f7e\u1f80\u1fb5\u1fb6\u1fbd\u1fbe\u1fbf\u1fc2\u1fc5\u1fc6\u1fcd\u1fd0\u1fd4\u1fd6\u1fdc\u1fe0\u1fed\u1ff2\u1ff5\u1ff6\u1ffd\u20d0\u20dd\u20e1\u20e2\u2126\u2127\u212a\u212c\u212e\u212f\u2180\u2183\u3005\u3006\u3007\u3008\u3021\u3030\u3031\u3036\u3041\u3095\u3099\u309b\u309d\u309f\u30a1\u30fb\u30fc\u30ff\u3105\u312d\u4e00\u9fa6\uac00\ud7a4");
	array.Set(109, 0, "_xmlD");
	array.Set(109, 1, "0:\u0660\u066a\u06f0\u06fa\u0966\u0970\u09e6\u09f0\u0a66\u0a70\u0ae6\u0af0\u0b66\u0b70\u0be7\u0bf0\u0c66\u0c70\u0ce6\u0cf0\u0d66\u0d70\u0e50\u0e5a\u0ed0\u0eda\u0f20\u0f2a\u1040\u104a\u1369\u1372\u17e0\u17ea\u1810\u181a\uff10\uff1a");
	array.Set(110, 0, "_xmlI");
	array.Set(110, 1, ":;A[_`a{\xc0\xd7\xd8\xf7\xf8\u0132\u0134\u013f\u0141\u0149\u014a\u017f\u0180\u01c4\u01cd\u01f1\u01f4\u01f6\u01fa\u0218\u0250\u02a9\u02bb\u02c2\u0386\u0387\u0388\u038b\u038c\u038d\u038e\u03a2\u03a3\u03cf\u03d0\u03d7\u03da\u03db\u03dc\u03dd\u03de\u03df\u03e0\u03e1\u03e2\u03f4\u0401\u040d\u040e\u0450\u0451\u045d\u045e\u0482\u0490\u04c5\u04c7\u04c9\u04cb\u04cd\u04d0\u04ec\u04ee\u04f6\u04f8\u04fa\u0531\u0557\u0559\u055a\u0561\u0587\u05d0\u05eb\u05f0\u05f3\u0621\u063b\u0641\u064b\u0671\u06b8\u06ba\u06bf\u06c0\u06cf\u06d0\u06d4\u06d5\u06d6\u06e5\u06e7\u0905\u093a\u093d\u093e\u0958\u0962\u0985\u098d\u098f\u0991\u0993\u09a9\u09aa\u09b1\u09b2\u09b3\u09b6\u09ba\u09dc\u09de\u09df\u09e2\u09f0\u09f2\u0a05\u0a0b\u0a0f\u0a11\u0a13\u0a29\u0a2a\u0a31\u0a32\u0a34\u0a35\u0a37\u0a38\u0a3a\u0a59\u0a5d\u0a5e\u0a5f\u0a72\u0a75\u0a85\u0a8c\u0a8d\u0a8e\u0a8f\u0a92\u0a93\u0aa9\u0aaa\u0ab1\u0ab2\u0ab4\u0ab5\u0aba\u0abd\u0abe\u0ae0\u0ae1\u0b05\u0b0d\u0b0f\u0b11\u0b13\u0b29\u0b2a\u0b31\u0b32\u0b34\u0b36\u0b3a\u0b3d\u0b3e\u0b5c\u0b5e\u0b5f\u0b62\u0b85\u0b8b\u0b8e\u0b91\u0b92\u0b96\u0b99\u0b9b\u0b9c\u0b9d\u0b9e\u0ba0\u0ba3\u0ba5\u0ba8\u0bab\u0bae\u0bb6\u0bb7\u0bba\u0c05\u0c0d\u0c0e\u0c11\u0c12\u0c29\u0c2a\u0c34\u0c35\u0c3a\u0c60\u0c62\u0c85\u0c8d\u0c8e\u0c91\u0c92\u0ca9\u0caa\u0cb4\u0cb5\u0cba\u0cde\u0cdf\u0ce0\u0ce2\u0d05\u0d0d\u0d0e\u0d11\u0d12\u0d29\u0d2a\u0d3a\u0d60\u0d62\u0e01\u0e2f\u0e30\u0e31\u0e32\u0e34\u0e40\u0e46\u0e81\u0e83\u0e84\u0e85\u0e87\u0e89\u0e8a\u0e8b\u0e8d\u0e8e\u0e94\u0e98\u0e99\u0ea0\u0ea1\u0ea4\u0ea5\u0ea6\u0ea7\u0ea8\u0eaa\u0eac\u0ead\u0eaf\u0eb0\u0eb1\u0eb2\u0eb4\u0ebd\u0ebe\u0ec0\u0ec5\u0f40\u0f48\u0f49\u0f6a\u10a0\u10c6\u10d0\u10f7\u1100\u1101\u1102\u1104\u1105\u1108\u1109\u110a\u110b\u110d\u110e\u1113\u113c\u113d\u113e\u113f\u1140\u1141\u114c\u114d\u114e\u114f\u1150\u1151\u1154\u1156\u1159\u115a\u115f\u1162\u1163\u1164\u1165\u1166\u1167\u1168\u1169\u116a\u116d\u116f\u1172\u1174\u1175\u1176\u119e\u119f\u11a8\u11a9\u11ab\u11ac\u11ae\u11b0\u11b7\u11b9\u11ba\u11bb\u11bc\u11c3\u11eb\u11ec\u11f0\u11f1\u11f9\u11fa\u1e00\u1e9c\u1ea0\u1efa\u1f00\u1f16\u1f18\u1f1e\u1f20\u1f46\u1f48\u1f4e\u1f50\u1f58\u1f59\u1f5a\u1f5b\u1f5c\u1f5d\u1f5e\u1f5f\u1f7e\u1f80\u1fb5\u1fb6\u1fbd\u1fbe\u1fbf\u1fc2\u1fc5\u1fc6\u1fcd\u1fd0\u1fd4\u1fd6\u1fdc\u1fe0\u1fed\u1ff2\u1ff5\u1ff6\u1ffd\u2126\u2127\u212a\u212c\u212e\u212f\u2180\u2183\u3007\u3008\u3021\u302a\u3041\u3095\u30a1\u30fb\u3105\u312d\u4e00\u9fa6\uac00\ud7a4");
	array.Set(111, 0, "_xmlW");
	array.Set(111, 1, "$%+,0:<?A[^_`{|}~\xa2\xab\xac\xad\xae\xb7\xb8\xbb\xbc\xbf\xc0\u0221\u0222\u0234\u0250\u02ae\u02b0\u02ef\u0300\u0350\u0360\u0370\u0374\u0376\u037a\u037b\u0384\u0387\u0388\u038b\u038c\u038d\u038e\u03a2\u03a3\u03cf\u03d0\u03f7\u0400\u0487\u0488\u04cf\u04d0\u04f6\u04f8\u04fa\u0500\u0510\u0531\u0557\u0559\u055a\u0561\u0588\u0591\u05a2\u05a3\u05ba\u05bb\u05be\u05bf\u05c0\u05c1\u05c3\u05c4\u05c5\u05d0\u05eb\u05f0\u05f3\u0621\u063b\u0640\u0656\u0660\u066a\u066e\u06d4\u06d5\u06dd\u06de\u06ee\u06f0\u06ff\u0710\u072d\u0730\u074b\u0780\u07b2\u0901\u0904\u0905\u093a\u093c\u094e\u0950\u0955\u0958\u0964\u0966\u0970\u0981\u0984\u0985\u098d\u098f\u0991\u0993\u09a9\u09aa\u09b1\u09b2\u09b3\u09b6\u09ba\u09bc\u09bd\u09be\u09c5\u09c7\u09c9\u09cb\u09ce\u09d7\u09d8\u09dc\u09de\u09df\u09e4\u09e6\u09fb\u0a02\u0a03\u0a05\u0a0b\u0a0f\u0a11\u0a13\u0a29\u0a2a\u0a31\u0a32\u0a34\u0a35\u0a37\u0a38\u0a3a\u0a3c\u0a3d\u0a3e\u0a43\u0a47\u0a49\u0a4b\u0a4e\u0a59\u0a5d\u0a5e\u0a5f\u0a66\u0a75\u0a81\u0a84\u0a85\u0a8c\u0a8d\u0a8e\u0a8f\u0a92\u0a93\u0aa9\u0aaa\u0ab1\u0ab2\u0ab4\u0ab5\u0aba\u0abc\u0ac6\u0ac7\u0aca\u0acb\u0ace\u0ad0\u0ad1\u0ae0\u0ae1\u0ae6\u0af0\u0b01\u0b04\u0b05\u0b0d\u0b0f\u0b11\u0b13\u0b29\u0b2a\u0b31\u0b32\u0b34\u0b36\u0b3a\u0b3c\u0b44\u0b47\u0b49\u0b4b\u0b4e\u0b56\u0b58\u0b5c\u0b5e\u0b5f\u0b62\u0b66\u0b71\u0b82\u0b84\u0b85\u0b8b\u0b8e\u0b91\u0b92\u0b96\u0b99\u0b9b\u0b9c\u0b9d\u0b9e\u0ba0\u0ba3\u0ba5\u0ba8\u0bab\u0bae\u0bb6\u0bb7\u0bba\u0bbe\u0bc3\u0bc6\u0bc9\u0bca\u0bce\u0bd7\u0bd8\u0be7\u0bf3\u0c01\u0c04\u0c05\u0c0d\u0c0e\u0c11\u0c12\u0c29\u0c2a\u0c34\u0c35\u0c3a\u0c3e\u0c45\u0c46\u0c49\u0c4a\u0c4e\u0c55\u0c57\u0c60\u0c62\u0c66\u0c70\u0c82\u0c84\u0c85\u0c8d\u0c8e\u0c91\u0c92\u0ca9\u0caa\u0cb4\u0cb5\u0cba\u0cbe\u0cc5\u0cc6\u0cc9\u0cca\u0cce\u0cd5\u0cd7\u0cde\u0cdf\u0ce0\u0ce2\u0ce6\u0cf0\u0d02\u0d04\u0d05\u0d0d\u0d0e\u0d11\u0d12\u0d29\u0d2a\u0d3a\u0d3e\u0d44\u0d46\u0d49\u0d4a\u0d4e\u0d57\u0d58\u0d60\u0d62\u0d66\u0d70\u0d82\u0d84\u0d85\u0d97\u0d9a\u0db2\u0db3\u0dbc\u0dbd\u0dbe\u0dc0\u0dc7\u0dca\u0dcb\u0dcf\u0dd5\u0dd6\u0dd7\u0dd8\u0de0\u0df2\u0df4\u0e01\u0e3b\u0e3f\u0e4f\u0e50\u0e5a\u0e81\u0e83\u0e84\u0e85\u0e87\u0e89\u0e8a\u0e8b\u0e8d\u0e8e\u0e94\u0e98\u0e99\u0ea0\u0ea1\u0ea4\u0ea5\u0ea6\u0ea7\u0ea8\u0eaa\u0eac\u0ead\u0eba\u0ebb\u0ebe\u0ec0\u0ec5\u0ec6\u0ec7\u0ec8\u0ece\u0ed0\u0eda\u0edc\u0ede\u0f00\u0f04\u0f13\u0f3a\u0f3e\u0f48\u0f49\u0f6b\u0f71\u0f85\u0f86\u0f8c\u0f90\u0f98\u0f99\u0fbd\u0fbe\u0fcd\u0fcf\u0fd0\u1000\u1022\u1023\u1028\u1029\u102b\u102c\u1033\u1036\u103a\u1040\u104a\u1050\u105a\u10a0\u10c6\u10d0\u10f9\u1100\u115a\u115f\u11a3\u11a8\u11fa\u1200\u1207\u1208\u1247\u1248\u1249\u124a\u124e\u1250\u1257\u1258\u1259\u125a\u125e\u1260\u1287\u1288\u1289\u128a\u128e\u1290\u12af\u12b0\u12b1\u12b2\u12b6\u12b8\u12bf\u12c0\u12c1\u12c2\u12c6\u12c8\u12cf\u12d0\u12d7\u12d8\u12ef\u12f0\u130f\u1310\u1311\u1312\u1316\u1318\u131f\u1320\u1347\u1348\u135b\u1369\u137d\u13a0\u13f5\u1401\u166d\u166f\u1677\u1681\u169b\u16a0\u16eb\u16ee\u16f1\u1700\u170d\u170e\u1715\u1720\u1735\u1740\u1754\u1760\u176d\u176e\u1771\u1772\u1774\u1780\u17d4\u17d7\u17d8\u17db\u17dd\u17e0\u17ea\u180b\u180e\u1810\u181a\u1820\u1878\u1880\u18aa\u1e00\u1e9c\u1ea0\u1efa\u1f00\u1f16\u1f18\u1f1e\u1f20\u1f46\u1f48\u1f4e\u1f50\u1f58\u1f59\u1f5a\u1f5b\u1f5c\u1f5d\u1f5e\u1f5f\u1f7e\u1f80\u1fb5\u1fb6\u1fc5\u1fc6\u1fd4\u1fd6\u1fdc\u1fdd\u1ff0\u1ff2\u1ff5\u1ff6\u1fff\u2044\u2045\u2052\u2053\u2070\u2072\u2074\u207d\u207f\u208d\u20a0\u20b2\u20d0\u20eb\u2100\u213b\u213d\u214c\u2153\u2184\u2190\u2329\u232b\u23b4\u23b7\u23cf\u2400\u2427\u2440\u244b\u2460\u24ff\u2500\u2614\u2616\u2618\u2619\u267e\u2680\u268a\u2701\u2705\u2706\u270a\u270c\u2728\u2729\u274c\u274d\u274e\u274f\u2753\u2756\u2757\u2758\u275f\u2761\u2768\u2776\u2795\u2798\u27b0\u27b1\u27bf\u27d0\u27e6\u27f0\u2983\u2999\u29d8\u29dc\u29fc\u29fe\u2b00\u2e80\u2e9a\u2e9b\u2ef4\u2f00\u2fd6\u2ff0\u2ffc\u3004\u3008\u3012\u3014\u3020\u3030\u3031\u303d\u303e\u3040\u3041\u3097\u3099\u30a0\u30a1\u30fb\u30fc\u3100\u3105\u312d\u3131\u318f\u3190\u31b8\u31f0\u321d\u3220\u3244\u3251\u327c\u327f\u32cc\u32d0\u32ff\u3300\u3377\u337b\u33de\u33e0\u33ff\u3400\u4db6\u4e00\u9fa6\ua000\ua48d\ua490\ua4c7\uac00\ud7a4\uf900\ufa2e\ufa30\ufa6b\ufb00\ufb07\ufb13\ufb18\ufb1d\ufb37\ufb38\ufb3d\ufb3e\ufb3f\ufb40\ufb42\ufb43\ufb45\ufb46\ufbb2\ufbd3\ufd3e\ufd50\ufd90\ufd92\ufdc8\ufdf0\ufdfd\ufe00\ufe10\ufe20\ufe24\ufe62\ufe63\ufe64\ufe67\ufe69\ufe6a\ufe70\ufe75\ufe76\ufefd\uff04\uff05\uff0b\uff0c\uff10\uff1a\uff1c\uff1f\uff21\uff3b\uff3e\uff3f\uff40\uff5b\uff5c\uff5d\uff5e\uff5f\uff66\uffbf\uffc2\uffc8\uffca\uffd0\uffd2\uffd8\uffda\uffdd\uffe0\uffe7\uffe8\uffef\ufffc\ufffe");
	$asm04.System.Text.RegularExpressions.RegexCharClass._propTable = array;
	$asm04.System.Text.RegularExpressions.RegexCharClass._lcTable = JSIL.Array.New($asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping, [new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("A", "Z", 1, 32), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\xc0", "\xde", 1, 32), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u0100", "\u012e", 2, 0), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u0130", "\u0130", 0, 105), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u0132", "\u0136", 2, 0), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u0139", "\u0147", 3, 0), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u014a", "\u0176", 2, 0), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u0178", "\u0178", 0, 255), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u0179", "\u017d", 3, 0), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u0181", "\u0181", 0, 595), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u0182", "\u0184", 2, 0), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u0186", "\u0186", 0, 596), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u0187", "\u0187", 0, 392), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u0189", "\u018a", 1, 205), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u018b", "\u018b", 0, 396), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u018e", "\u018e", 0, 477), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u018f", "\u018f", 0, 601), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u0190", "\u0190", 0, 603), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u0191", "\u0191", 0, 402), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u0193", "\u0193", 0, 608), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u0194", "\u0194", 0, 611), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u0196", "\u0196", 0, 617), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u0197", "\u0197", 0, 616), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u0198", "\u0198", 0, 409), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u019c", "\u019c", 0, 623), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u019d", "\u019d", 0, 626), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u019f", "\u019f", 0, 629), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u01a0", "\u01a4", 2, 0), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u01a7", "\u01a7", 0, 424), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u01a9", "\u01a9", 0, 643), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u01ac", "\u01ac", 0, 429), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u01ae", "\u01ae", 0, 648), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u01af", "\u01af", 0, 432), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u01b1", "\u01b2", 1, 217), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u01b3", "\u01b5", 3, 0), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u01b7", "\u01b7", 0, 658), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u01b8", "\u01b8", 0, 441), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u01bc", "\u01bc", 0, 445), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u01c4", "\u01c5", 0, 454), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u01c7", "\u01c8", 0, 457), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u01ca", "\u01cb", 0, 460), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u01cd", "\u01db", 3, 0), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u01de", "\u01ee", 2, 0), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u01f1", "\u01f2", 0, 499), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u01f4", "\u01f4", 0, 501), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u01fa", "\u0216", 2, 0), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u0386", "\u0386", 0, 940), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u0388", "\u038a", 1, 37), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u038c", "\u038c", 0, 972), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u038e", "\u038f", 1, 63), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u0391", "\u03ab", 1, 32), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u03e2", "\u03ee", 2, 0), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u0401", "\u040f", 1, 80), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u0410", "\u042f", 1, 32), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u0460", "\u0480", 2, 0), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u0490", "\u04be", 2, 0), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u04c1", "\u04c3", 3, 0), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u04c7", "\u04c7", 0, 1224), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u04cb", "\u04cb", 0, 1228), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u04d0", "\u04ea", 2, 0), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u04ee", "\u04f4", 2, 0), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u04f8", "\u04f8", 0, 1273), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u0531", "\u0556", 1, 48), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u10a0", "\u10c5", 1, 48), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u1e00", "\u1ef8", 2, 0), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u1f08", "\u1f0f", 1, -8), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u1f18", "\u1f1f", 1, -8), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u1f28", "\u1f2f", 1, -8), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u1f38", "\u1f3f", 1, -8), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u1f48", "\u1f4d", 1, -8), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u1f59", "\u1f59", 0, 8017), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u1f5b", "\u1f5b", 0, 8019), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u1f5d", "\u1f5d", 0, 8021), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u1f5f", "\u1f5f", 0, 8023), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u1f68", "\u1f6f", 1, -8), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u1f88", "\u1f8f", 1, -8), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u1f98", "\u1f9f", 1, -8), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u1fa8", "\u1faf", 1, -8), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u1fb8", "\u1fb9", 1, -8), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u1fba", "\u1fbb", 1, -74), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u1fbc", "\u1fbc", 0, 8115), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u1fc8", "\u1fcb", 1, -86), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u1fcc", "\u1fcc", 0, 8131), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u1fd8", "\u1fd9", 1, -8), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u1fda", "\u1fdb", 1, -100), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u1fe8", "\u1fe9", 1, -8), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u1fea", "\u1feb", 1, -112), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u1fec", "\u1fec", 0, 8165), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u1ff8", "\u1ff9", 1, -128), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u1ffa", "\u1ffb", 1, -126), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u1ffc", "\u1ffc", 0, 8179), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u2160", "\u216f", 1, 16), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\u24b6", "\u24d0", 1, 26), new $asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping("\uff21", "\uff3a", 1, 32)]);
	var dictionary = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.String, System.String), "_ctor$1", [32]);
	var array2 = JSIL.Array.New(System.Char, 9);
	var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$1", [11]);
	stringBuilder.Append$7("\0");
	array2[0] = "\0";
	array2[1] = "\x0f";
	dictionary.set_Item("Cc", (array2[1]).toString());
	array2[2] = "\x10";
	dictionary.set_Item("Cf", (array2[2]).toString());
	array2[3] = "\x1e";
	dictionary.set_Item("Cn", (array2[3]).toString());
	array2[4] = "\x12";
	dictionary.set_Item("Co", (array2[4]).toString());
	array2[5] = "\x11";
	dictionary.set_Item("Cs", (array2[5]).toString());
	array2[6] = "\0";
	dictionary.set_Item("C", JSIL.New(System.String, "_ctor$0", [array2, 0, 7]));
	array2[1] = "\x02";
	dictionary.set_Item("Ll", (array2[1]).toString());
	array2[2] = "\x04";
	dictionary.set_Item("Lm", (array2[2]).toString());
	array2[3] = "\x05";
	dictionary.set_Item("Lo", (array2[3]).toString());
	array2[4] = "\x03";
	dictionary.set_Item("Lt", (array2[4]).toString());
	array2[5] = "\x01";
	dictionary.set_Item("Lu", (array2[5]).toString());
	dictionary.set_Item("L", JSIL.New(System.String, "_ctor$0", [array2, 0, 7]));
	stringBuilder.Append$2(JSIL.New(System.String, "_ctor$0", [array2, 1, 5]));
	dictionary.set_Item($asm04.System.Text.RegularExpressions.RegexCharClass.InternalRegexIgnoreCase, System.String.Format(System.Globalization.CultureInfo.InvariantCulture, "{0}{1}{2}{3}{4}", ["\0", array2[1], array2[4], array2[5], array2[6]]));
	array2[1] = "\x07";
	dictionary.set_Item("Mc", (array2[1]).toString());
	array2[2] = "\x08";
	dictionary.set_Item("Me", (array2[2]).toString());
	array2[3] = "\x06";
	dictionary.set_Item("Mn", (array2[3]).toString());
	array2[4] = "\0";
	dictionary.set_Item("M", JSIL.New(System.String, "_ctor$0", [array2, 0, 5]));
	stringBuilder.Append$7(array2[3]);
	array2[1] = "\t";
	dictionary.set_Item("Nd", (array2[1]).toString());
	array2[2] = "\n";
	dictionary.set_Item("Nl", (array2[2]).toString());
	array2[3] = "\x0b";
	dictionary.set_Item("No", (array2[3]).toString());
	dictionary.set_Item("N", JSIL.New(System.String, "_ctor$0", [array2, 0, 5]));
	stringBuilder.Append$7(array2[1]);
	array2[1] = "\x13";
	dictionary.set_Item("Pc", (array2[1]).toString());
	array2[2] = "\x14";
	dictionary.set_Item("Pd", (array2[2]).toString());
	array2[3] = "\x16";
	dictionary.set_Item("Pe", (array2[3]).toString());
	array2[4] = "\x19";
	dictionary.set_Item("Po", (array2[4]).toString());
	array2[5] = "\x15";
	dictionary.set_Item("Ps", (array2[5]).toString());
	array2[6] = "\x18";
	dictionary.set_Item("Pf", (array2[6]).toString());
	array2[7] = "\x17";
	dictionary.set_Item("Pi", (array2[7]).toString());
	array2[8] = "\0";
	dictionary.set_Item("P", JSIL.New(System.String, "_ctor$0", [array2, 0, 9]));
	stringBuilder.Append$7(array2[1]);
	array2[1] = "\x1b";
	dictionary.set_Item("Sc", (array2[1]).toString());
	array2[2] = "\x1c";
	dictionary.set_Item("Sk", (array2[2]).toString());
	array2[3] = "\x1a";
	dictionary.set_Item("Sm", (array2[3]).toString());
	array2[4] = "\x1d";
	dictionary.set_Item("So", (array2[4]).toString());
	array2[5] = "\0";
	dictionary.set_Item("S", JSIL.New(System.String, "_ctor$0", [array2, 0, 6]));
	array2[1] = "\r";
	dictionary.set_Item("Zl", (array2[1]).toString());
	array2[2] = "\x0e";
	dictionary.set_Item("Zp", (array2[2]).toString());
	array2[3] = "\x0c";
	dictionary.set_Item("Zs", (array2[3]).toString());
	array2[4] = "\0";
	dictionary.set_Item("Z", JSIL.New(System.String, "_ctor$0", [array2, 0, 5]));
	stringBuilder.Append$7("\0");
	$asm04.System.Text.RegularExpressions.RegexCharClass.Word = stringBuilder.toString();
	$asm04.System.Text.RegularExpressions.RegexCharClass.NotWord = $asm04.System.Text.RegularExpressions.RegexCharClass.NegateCategory($asm04.System.Text.RegularExpressions.RegexCharClass.Word);
	$asm04.System.Text.RegularExpressions.RegexCharClass.SpaceClass = (("\0\0\x01" + $asm04.System.Text.RegularExpressions.RegexCharClass.Space));
	$asm04.System.Text.RegularExpressions.RegexCharClass.NotSpaceClass = (("\x01\0\x01" + $asm04.System.Text.RegularExpressions.RegexCharClass.Space));
	$asm04.System.Text.RegularExpressions.RegexCharClass.WordClass = (JSIL.ConcatString("\0\0", String.fromCharCode($asm04.System.Text.RegularExpressions.RegexCharClass.Word.length), $asm04.System.Text.RegularExpressions.RegexCharClass.Word));
	$asm04.System.Text.RegularExpressions.RegexCharClass.NotWordClass = (JSIL.ConcatString("\x01\0", String.fromCharCode($asm04.System.Text.RegularExpressions.RegexCharClass.Word.length), $asm04.System.Text.RegularExpressions.RegexCharClass.Word));
	$asm04.System.Text.RegularExpressions.RegexCharClass.DigitClass = (JSIL.ConcatString("\0\0\x01", "\t"));
	$asm04.System.Text.RegularExpressions.RegexCharClass.NotDigitClass = (JSIL.ConcatString("\0\0\x01", "\ufff7"));
	$asm04.System.Text.RegularExpressions.RegexCharClass._definedCategories = dictionary;
};

$asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping.prototype._ctor = function (chMin, chMax, lcOp, data) {
	this._chMin = chMin;
	this._chMax = chMax;
	this._lcOp = lcOp;
	this._data = data;
};
$asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping.prototype._chMin = 0;
$asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping.prototype._chMax = 0;
$asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping.prototype._lcOp = 0;
$asm04.System.Text.RegularExpressions.RegexCharClass.LowerCaseMapping.prototype._data = 0;

$asm04.System.Text.RegularExpressions.RegexCharClass.SingleRangeComparer.prototype.Compare = function (x, y) {
	if (x._first < y._first) {
		return -1;
	}
	if (x._first <= y._first) {
		return 0;
	}
	return 1;
};
$asm04.System.Text.RegularExpressions.RegexCharClass.SingleRangeComparer.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};

$asm04.System.Text.RegularExpressions.RegexCharClass.SingleRange.prototype._ctor = function (first, last) {
	System.Object.prototype._ctor.call(this);
	this._first = first;
	this._last = last;
};
$asm04.System.Text.RegularExpressions.RegexCharClass.SingleRange.prototype._first = 0;
$asm04.System.Text.RegularExpressions.RegexCharClass.SingleRange.prototype._last = 0;

$asm04.System.Text.RegularExpressions.RegexCode.prototype._ctor = function (codes, stringlist, trackcount, caps, capsize, bmPrefix, fcPrefix, anchors, rightToLeft) {
	System.Object.prototype._ctor.call(this);
	this._codes = codes;
	this._strings = JSIL.Array.New(System.String, stringlist.Count);
	this._trackcount = trackcount;
	this._caps = caps;
	this._capsize = capsize;
	this._bmPrefix = bmPrefix;
	this._fcPrefix = fcPrefix;
	this._anchors = anchors;
	this._rightToLeft = rightToLeft;
	stringlist.CopyTo$1(0, this._strings, 0, stringlist.Count);
};
$asm04.System.Text.RegularExpressions.RegexCode.OpcodeBacktracks = function (Op) {
	Op = (Op & 63);
	switch (Op) {
		case 3: 
		case 4: 
		case 5: 
		case 6: 
		case 7: 
		case 8: 
		case 23: 
		case 24: 
		case 25: 
		case 26: 
		case 27: 
		case 28: 
		case 29: 
		case 31: 
		case 32: 
		case 33: 
		case 34: 
		case 35: 
		case 36: 
		case 38: 
			return true;
	}
	return false;
};
$asm04.System.Text.RegularExpressions.RegexCode.OpcodeSize = function (Opcode) {
	Opcode = (Opcode & 63);
	switch (Opcode) {
		case 0: 
		case 1: 
		case 2: 
		case 3: 
		case 4: 
		case 5: 
		case 6: 
		case 7: 
		case 8: 
		case 28: 
		case 29: 
		case 32: 
			return 3;
		case 9: 
		case 10: 
		case 11: 
		case 12: 
		case 13: 
		case 23: 
		case 24: 
		case 25: 
		case 26: 
		case 27: 
		case 37: 
		case 38: 
		case 39: 
			return 2;
		case 14: 
		case 15: 
		case 16: 
		case 17: 
		case 18: 
		case 19: 
		case 20: 
		case 21: 
		case 22: 
		case 30: 
		case 31: 
		case 33: 
		case 34: 
		case 35: 
		case 36: 
		case 40: 
		case 41: 
		case 42: 
			return 1;
		default: 
			throw $asm04.System.Text.RegularExpressions.RegexCode.MakeException($asm04.System.SR.GetString$0("UnexpectedOpcode", [(Opcode).toString()]));
	}
};
$asm04.System.Text.RegularExpressions.RegexCode.MakeException = function (message) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [message]);
};
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCode, "Onerep", {
		"value": 0}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCode, "Notonerep", {
		"value": 1}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCode, "Setrep", {
		"value": 2}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCode, "Oneloop", {
		"value": 3}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCode, "Notoneloop", {
		"value": 4}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCode, "Setloop", {
		"value": 5}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCode, "Onelazy", {
		"value": 6}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCode, "Notonelazy", {
		"value": 7}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCode, "Setlazy", {
		"value": 8}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCode, "One", {
		"value": 9}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCode, "Notone", {
		"value": 10}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCode, "Set", {
		"value": 11}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCode, "Multi", {
		"value": 12}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCode, "Ref", {
		"value": 13}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCode, "Bol", {
		"value": 14}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCode, "Eol", {
		"value": 15}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCode, "Boundary", {
		"value": 16}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCode, "Nonboundary", {
		"value": 17}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCode, "Beginning", {
		"value": 18}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCode, "Start", {
		"value": 19}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCode, "EndZ", {
		"value": 20}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCode, "End", {
		"value": 21}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCode, "Nothing", {
		"value": 22}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCode, "Lazybranch", {
		"value": 23}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCode, "Branchmark", {
		"value": 24}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCode, "Lazybranchmark", {
		"value": 25}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCode, "Nullcount", {
		"value": 26}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCode, "Setcount", {
		"value": 27}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCode, "Branchcount", {
		"value": 28}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCode, "Lazybranchcount", {
		"value": 29}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCode, "Nullmark", {
		"value": 30}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCode, "Setmark", {
		"value": 31}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCode, "Capturemark", {
		"value": 32}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCode, "Getmark", {
		"value": 33}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCode, "Setjump", {
		"value": 34}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCode, "Backjump", {
		"value": 35}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCode, "Forejump", {
		"value": 36}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCode, "Testref", {
		"value": 37}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCode, "Goto", {
		"value": 38}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCode, "Prune", {
		"value": 39}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCode, "Stop", {
		"value": 40}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCode, "ECMABoundary", {
		"value": 41}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCode, "NonECMABoundary", {
		"value": 42}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCode, "Mask", {
		"value": 63}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCode, "Rtl", {
		"value": 64}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCode, "Back", {
		"value": 128}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCode, "Back2", {
		"value": 256}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexCode, "Ci", {
		"value": 512}
);
$asm04.System.Text.RegularExpressions.RegexCode.prototype._codes = null;
$asm04.System.Text.RegularExpressions.RegexCode.prototype._strings = null;
$asm04.System.Text.RegularExpressions.RegexCode.prototype._trackcount = 0;
$asm04.System.Text.RegularExpressions.RegexCode.prototype._caps = null;
$asm04.System.Text.RegularExpressions.RegexCode.prototype._capsize = 0;
$asm04.System.Text.RegularExpressions.RegexCode.prototype._fcPrefix = null;
$asm04.System.Text.RegularExpressions.RegexCode.prototype._bmPrefix = null;
$asm04.System.Text.RegularExpressions.RegexCode.prototype._anchors = 0;
$asm04.System.Text.RegularExpressions.RegexCode.prototype._rightToLeft = false;

$asm04.System.Text.RegularExpressions.RegexFCD.FirstChars = function (t) {
	var regexFCD = new $asm04.System.Text.RegularExpressions.RegexFCD();
	var regexFC = regexFCD.RegexFCFromRegexTree(t);
	if (!((regexFC !== null) && !regexFC._nullable)) {
		return null;
	}
	var culture = (t._options & System.Text.RegularExpressions.RegexOptions.CultureInvariant) ? System.Globalization.CultureInfo.InvariantCulture : System.Globalization.CultureInfo.CurrentCulture;
	return new $asm04.System.Text.RegularExpressions.RegexPrefix(regexFC.GetFirstChars(culture), regexFC.IsCaseInsensitive());
};
$asm04.System.Text.RegularExpressions.RegexFCD.Prefix = function (tree) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				var regexNode = null;
				var num = 0;
				var regexNode2 = tree._root;
			__loop0__: 
				while (true) {
					var type = regexNode2._type;
					switch (type) {
						case 3: 
						case 6: 
							__label0__ = "IL_C6";
							continue __step0__;
						case 4: 
						case 5: 
						case 7: 
						case 8: 
						case 10: 
						case 11: 
						case 13: 
						case 17: 
						case 22: 
						case 24: 
						case 26: 
						case 27: 
						case 29: 
							__label0__ = "IL_13F";
							continue __step0__;
						case 9: 
							__label0__ = "IL_101";
							continue __step0__;
						case 12: 
							__label0__ = "IL_125";
							continue __step0__;
						case 14: 
						case 15: 
						case 16: 
						case 18: 
						case 19: 
						case 20: 
						case 21: 
						case 23: 
						case 30: 
						case 31: 
							break;
						case 25: 
							if (regexNode2.ChildCount() > 0) {
								regexNode = regexNode2;
								num = 0;
							}
							break;
						case 28: 
						case 32: 
							regexNode2 = regexNode2.Child(0);
							regexNode = null;
							continue __step0__;
							;
						default: 
							if (type !== 41) {
								__label0__ = "Block_2";
								continue __step0__;
							}
							break;
					}
					if (!((regexNode !== null) && (num < regexNode.ChildCount()))) {
						__label0__ = "IL_151";
						continue __step0__;
					}
					regexNode2 = regexNode.Child(num++);
				}
				__label0__ = "Block_2";
				continue __step0__;
				break;
			case "Block_2":
				__label0__ = "IL_13F";
				continue __step0__;
				__label0__ = "IL_C6";
				continue __step0__;
				break;
			case "IL_C6":
				if (regexNode2._m > 0) {
					var prefix = System.String.Empty.PadRight$1(regexNode2._m, regexNode2._ch);
					return new $asm04.System.Text.RegularExpressions.RegexPrefix(prefix, (System.Text.RegularExpressions.RegexOptions.None !== (regexNode2._options & System.Text.RegularExpressions.RegexOptions.IgnoreCase)));
				}
				return $asm04.System.Text.RegularExpressions.RegexPrefix.Empty;
				__label0__ = "IL_101";
				continue __step0__;
				break;
			case "IL_101":
				return new $asm04.System.Text.RegularExpressions.RegexPrefix(regexNode2._ch.ToString(System.Globalization.CultureInfo.InvariantCulture), (System.Text.RegularExpressions.RegexOptions.None !== (regexNode2._options & System.Text.RegularExpressions.RegexOptions.IgnoreCase)));
				__label0__ = "IL_125";
				continue __step0__;
				break;
			case "IL_125":
				return new $asm04.System.Text.RegularExpressions.RegexPrefix(regexNode2._str, (System.Text.RegularExpressions.RegexOptions.None !== (regexNode2._options & System.Text.RegularExpressions.RegexOptions.IgnoreCase)));
				__label0__ = "IL_13F";
				continue __step0__;
				break;
			case "IL_13F":
				return $asm04.System.Text.RegularExpressions.RegexPrefix.Empty;
				__label0__ = "IL_151";
				continue __step0__;
				break;
			case "IL_151":
				return $asm04.System.Text.RegularExpressions.RegexPrefix.Empty;
				break __step0__;
		}
	}
};
$asm04.System.Text.RegularExpressions.RegexFCD.Anchors = function (tree) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				var regexNode = null;
				var num = 0;
				var num2 = 0;
				var regexNode2 = tree._root;
			__loop0__: 
				while (true) {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								var type = regexNode2._type;
								switch (type) {
									case 14: 
									case 15: 
									case 16: 
									case 18: 
									case 19: 
									case 20: 
									case 21: 
										JSIL.UntranslatableInstruction("goto", "IL_91");
									case 17: 
									case 22: 
									case 24: 
									case 26: 
									case 27: 
									case 29: 
										return num2;
									case 23: 
									case 30: 
									case 31: 
										__label1__ = "IL_A1";
										continue __step1__;
									case 25: 
										if (regexNode2.ChildCount() > 0) {
											regexNode = regexNode2;
											num = 0;
											__label1__ = "IL_A1";
											continue __step1__;
										}
										__label1__ = "IL_A1";
										continue __step1__;
									case 28: 
									case 32: 
										regexNode2 = regexNode2.Child(0);
										regexNode = null;
										continue __step1__;
										;
								}
								break __loop0__;
								__label1__ = "IL_A1";
								continue __step1__;
								break;
							case "IL_A1":
								if (!((regexNode !== null) && (num < regexNode.ChildCount()))) {
									return num2;
								}
								regexNode2 = regexNode.Child(num++);
								break __step1__;
						}
					}
				}
				if (type === 41) {
					var __label2__ = "__entry2__";
				__step2__: 
					while (true) {
						switch (__label2__) {
							case "__entry2__":
								__label2__ = "IL_91";
								continue __step2__;
								break;
							case "IL_91":
								return (num2 | $asm04.System.Text.RegularExpressions.RegexFCD.AnchorFromType(regexNode2._type));
								break __step2__;
						}
					}
				}
				return num2;
				break __step0__;
		}
	}
};
$asm04.System.Text.RegularExpressions.RegexFCD.AnchorFromType = function (type) {
	switch (type) {
		case 14: 
			return 2;
		case 15: 
			return 8;
		case 16: 
			return 64;
		case 17: 
			break;
		case 18: 
			return 1;
		case 19: 
			return 4;
		case 20: 
			return 16;
		case 21: 
			return 32;
		default: 
			if (type === 41) {
				return 128;
			}
			break;
	}
	return 0;
};
$asm04.System.Text.RegularExpressions.RegexFCD.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
	this._fcStack = JSIL.Array.New($asm04.System.Text.RegularExpressions.RegexFC, 32);
	this._intStack = JSIL.Array.New(System.Int32, 32);
};
$asm04.System.Text.RegularExpressions.RegexFCD.prototype.PushInt = function (I) {
	if (this._intDepth >= this._intStack.length) {
		var array = JSIL.Array.New(System.Int32, (this._intDepth * 2));
		System.Array.Copy$1(
			this._intStack, 
			0, 
			array, 
			0, 
			this._intDepth
		);
		this._intStack = array;
	}
	this._intStack[this._intDepth++] = I;
};
$asm04.System.Text.RegularExpressions.RegexFCD.prototype.IntIsEmpty = function () {
	return (this._intDepth === 0);
};
$asm04.System.Text.RegularExpressions.RegexFCD.prototype.PopInt = function () {
	return this._intStack[--this._intDepth];
};
$asm04.System.Text.RegularExpressions.RegexFCD.prototype.PushFC = function (fc) {
	if (this._fcDepth >= this._fcStack.length) {
		var array = JSIL.Array.New($asm04.System.Text.RegularExpressions.RegexFC, (this._fcDepth * 2));
		System.Array.Copy$1(
			this._fcStack, 
			0, 
			array, 
			0, 
			this._fcDepth
		);
		this._fcStack = array;
	}
	this._fcStack[this._fcDepth++] = fc;
};
$asm04.System.Text.RegularExpressions.RegexFCD.prototype.FCIsEmpty = function () {
	return (this._fcDepth === 0);
};
$asm04.System.Text.RegularExpressions.RegexFCD.prototype.PopFC = function () {
	return this._fcStack[--this._fcDepth];
};
$asm04.System.Text.RegularExpressions.RegexFCD.prototype.TopFC = function () {
	return this._fcStack[(this._fcDepth - 1)];
};
$asm04.System.Text.RegularExpressions.RegexFCD.prototype.RegexFCFromRegexTree = function (tree) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				var regexNode = tree._root;
				var num = 0;
			__loop0__: 
				while (true) {
					if (regexNode._children === null) {
						this.CalculateFC(regexNode._type, regexNode, 0);
					} else if (!((num >= regexNode._children.Count) || this._skipAllChildren)) {
						this.CalculateFC((regexNode._type | 64), regexNode, num);
						if (!this._skipchild) {
							regexNode = regexNode._children.get_Item(num);
							this.PushInt(num);
							num = 0;
							continue __loop0__;
						}
						++num;
						this._skipchild = false;
						continue __loop0__;
					}
					this._skipAllChildren = false;
					if (this.IntIsEmpty()) {
						__label0__ = "IL_B9";
						continue __step0__;
					}
					num = this.PopInt();
					regexNode = regexNode._next;
					this.CalculateFC((regexNode._type | 128), regexNode, num);
					if (this._failed) {
						break __loop0__;
					}
					++num;
				}
				return null;
				__label0__ = "IL_B9";
				continue __step0__;
				break;
			case "IL_B9":
				if (this.FCIsEmpty()) {
					return null;
				}
				return this.PopFC();
				break __step0__;
		}
	}
};
$asm04.System.Text.RegularExpressions.RegexFCD.prototype.SkipChild = function () {
	this._skipchild = true;
};
$asm04.System.Text.RegularExpressions.RegexFCD.prototype.CalculateFC = function (NodeType, node, CurIndex) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				var caseInsensitive = false;
				var flag = false;
				if (NodeType <= 13) {
					if (node._options & System.Text.RegularExpressions.RegexOptions.IgnoreCase) {
						caseInsensitive = true;
					}
					if (node._options & System.Text.RegularExpressions.RegexOptions.RightToLeft) {
						flag = true;
					}
				}
				var num = NodeType;
				switch (num) {
					case 3: 
					case 6: 
						this.PushFC(JSIL.New($asm04.System.Text.RegularExpressions.RegexFC, "_ctor$1", [node._ch, false, (node._m === 0), caseInsensitive]));
						return;
					case 4: 
					case 7: 
						this.PushFC(JSIL.New($asm04.System.Text.RegularExpressions.RegexFC, "_ctor$1", [node._ch, true, (node._m === 0), caseInsensitive]));
						return;
					case 5: 
					case 8: 
						this.PushFC(JSIL.New($asm04.System.Text.RegularExpressions.RegexFC, "_ctor$2", [node._str, (node._m === 0), caseInsensitive]));
						return;
					case 9: 
					case 10: 
						this.PushFC(JSIL.New($asm04.System.Text.RegularExpressions.RegexFC, "_ctor$1", [node._ch, (NodeType === 10), false, caseInsensitive]));
						return;
					case 11: 
						this.PushFC(JSIL.New($asm04.System.Text.RegularExpressions.RegexFC, "_ctor$2", [node._str, false, caseInsensitive]));
						return;
					case 12: 
						if (node._str.length === 0) {
							this.PushFC(JSIL.New($asm04.System.Text.RegularExpressions.RegexFC, "_ctor$0", [true]));
							return;
						}
						if (!flag) {
							this.PushFC(JSIL.New($asm04.System.Text.RegularExpressions.RegexFC, "_ctor$1", [node._str[0], false, false, caseInsensitive]));
							return;
						}
						this.PushFC(JSIL.New($asm04.System.Text.RegularExpressions.RegexFC, "_ctor$1", [node._str[(node._str.length - 1)], false, false, caseInsensitive]));
						return;
					case 13: 
						this.PushFC(JSIL.New($asm04.System.Text.RegularExpressions.RegexFC, "_ctor$2", ["\0\x01\0\0", true, false]));
						return;
					case 14: 
					case 15: 
					case 16: 
					case 17: 
					case 18: 
					case 19: 
					case 20: 
					case 21: 
					case 22: 
					case 41: 
					case 42: 
						this.PushFC(JSIL.New($asm04.System.Text.RegularExpressions.RegexFC, "_ctor$0", [true]));
						return;
					case 23: 
						this.PushFC(JSIL.New($asm04.System.Text.RegularExpressions.RegexFC, "_ctor$0", [true]));
						return;
					case 24: 
					case 25: 
					case 26: 
					case 27: 
					case 28: 
					case 29: 
					case 30: 
					case 31: 
					case 32: 
					case 33: 
					case 34: 
					case 35: 
					case 36: 
					case 37: 
					case 38: 
					case 39: 
					case 40: 
						break;
					default: 
						switch (num) {
							case 88: 
							case 89: 
							case 90: 
							case 91: 
							case 92: 
							case 93: 
							case 96: 
							case 97: 
								break;
							case 94: 
							case 95: 
								this.SkipChild();
								this.PushFC(JSIL.New($asm04.System.Text.RegularExpressions.RegexFC, "_ctor$0", [true]));
								return;
							case 98: 
								if (CurIndex === 0) {
									this.SkipChild();
									return;
								}
								break;
							default: 
								switch (num) {
									case 152: 
									case 161: 
										if (CurIndex !== 0) {
											var fc = this.PopFC();
											var regexFC = this.TopFC();
											this._failed = !regexFC.AddFC(fc, false);
											return;
										}
										break;
									case 153: 
										if (CurIndex !== 0) {
											var fc2 = this.PopFC();
											var regexFC2 = this.TopFC();
											this._failed = !regexFC2.AddFC(fc2, true);
										}
										if (!this.TopFC()._nullable) {
											this._skipAllChildren = true;
											return;
										}
										break;
									case 154: 
									case 155: 
										if (node._m === 0) {
											this.TopFC()._nullable = true;
											return;
										}
										break;
									case 156: 
									case 157: 
									case 158: 
									case 159: 
									case 160: 
										break;
									case 162: 
										if (CurIndex > 1) {
											var fc3 = this.PopFC();
											var regexFC3 = this.TopFC();
											this._failed = !regexFC3.AddFC(fc3, false);
											return;
										}
										break;
									default: 
										__label0__ = "IL_318";
										continue __step0__;
								}
								break;
						}
						return;
				}
				__label0__ = "IL_318";
				continue __step0__;
				break;
			case "IL_318":
				throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm04.System.SR.GetString$0("UnexpectedOpcode", [(NodeType).toString()])]);
				break __step0__;
		}
	}
};
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexFCD, "BeforeChild", {
		"value": 64}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexFCD, "AfterChild", {
		"value": 128}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexFCD, "Beginning", {
		"value": 1}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexFCD, "Bol", {
		"value": 2}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexFCD, "Start", {
		"value": 4}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexFCD, "Eol", {
		"value": 8}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexFCD, "EndZ", {
		"value": 16}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexFCD, "End", {
		"value": 32}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexFCD, "Boundary", {
		"value": 64}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexFCD, "ECMABoundary", {
		"value": 128}
);
$asm04.System.Text.RegularExpressions.RegexFCD.prototype._intStack = null;
$asm04.System.Text.RegularExpressions.RegexFCD.prototype._intDepth = 0;
$asm04.System.Text.RegularExpressions.RegexFCD.prototype._fcStack = null;
$asm04.System.Text.RegularExpressions.RegexFCD.prototype._fcDepth = 0;
$asm04.System.Text.RegularExpressions.RegexFCD.prototype._skipAllChildren = false;
$asm04.System.Text.RegularExpressions.RegexFCD.prototype._skipchild = false;
$asm04.System.Text.RegularExpressions.RegexFCD.prototype._failed = false;

$asm04.System.Text.RegularExpressions.RegexFC.prototype._ctor$0 = function (nullable) {
	System.Object.prototype._ctor.call(this);
	this._cc = JSIL.New($asm04.System.Text.RegularExpressions.RegexCharClass, "_ctor$0", []);
	this._nullable = nullable;
};
$asm04.System.Text.RegularExpressions.RegexFC.prototype._ctor$1 = function (ch, not, nullable, caseInsensitive) {
	System.Object.prototype._ctor.call(this);
	this._cc = JSIL.New($asm04.System.Text.RegularExpressions.RegexCharClass, "_ctor$0", []);
	if (not) {
		if (ch > "\0") {
			this._cc.AddRange("\0", (ch - "\x01"));
		}
		if (ch < "\uffff") {
			this._cc.AddRange((ch + "\x01"), "\uffff");
		}
	} else {
		this._cc.AddRange(ch, ch);
	}
	this._caseInsensitive = caseInsensitive;
	this._nullable = nullable;
};
$asm04.System.Text.RegularExpressions.RegexFC.prototype._ctor$2 = function (charClass, nullable, caseInsensitive) {
	System.Object.prototype._ctor.call(this);
	this._cc = $asm04.System.Text.RegularExpressions.RegexCharClass.Parse(charClass);
	this._nullable = nullable;
	this._caseInsensitive = caseInsensitive;
};
$asm04.System.Text.RegularExpressions.RegexFC.prototype.AddFC = function (fc, concatenate) {
	if (!(this._cc.CanMerge && fc._cc.CanMerge)) {
		return false;
	}
	if (concatenate) {
		if (!this._nullable) {
			return true;
		}
		if (!fc._nullable) {
			this._nullable = false;
		}
	} else if (fc._nullable) {
		this._nullable = true;
	}
	this._caseInsensitive = (this._caseInsensitive | fc._caseInsensitive);
	this._cc.AddCharClass(fc._cc);
	return true;
};
$asm04.System.Text.RegularExpressions.RegexFC.prototype.GetFirstChars = function (culture) {
	if (this._caseInsensitive) {
		this._cc.AddLowercase(culture);
	}
	return this._cc.ToStringClass();
};
$asm04.System.Text.RegularExpressions.RegexFC.prototype.IsCaseInsensitive = function () {
	return this._caseInsensitive;
};
JSIL.OverloadedMethod($asm04.System.Text.RegularExpressions.RegexFC.prototype, "_ctor", [
		["_ctor$0", [System.Boolean]], 
		["_ctor$1", [System.Char, System.Boolean, System.Boolean, System.Boolean]], 
		["_ctor$2", [System.String, System.Boolean, System.Boolean]]
	]);
$asm04.System.Text.RegularExpressions.RegexFC.prototype._cc = null;
$asm04.System.Text.RegularExpressions.RegexFC.prototype._nullable = false;
$asm04.System.Text.RegularExpressions.RegexFC.prototype._caseInsensitive = false;

$asm04.System.Text.RegularExpressions.RegexPrefix.prototype._ctor = function (prefix, ci) {
	System.Object.prototype._ctor.call(this);
	this._prefix = prefix;
	this._caseInsensitive = ci;
};
$asm04.System.Text.RegularExpressions.RegexPrefix.prototype.get_Prefix = function () {
	return this._prefix;
};
$asm04.System.Text.RegularExpressions.RegexPrefix.prototype.get_CaseInsensitive = function () {
	return this._caseInsensitive;
};
$asm04.System.Text.RegularExpressions.RegexPrefix.get_Empty = function () {
	return $asm04.System.Text.RegularExpressions.RegexPrefix._empty;
};
JSIL.MakeProperty($asm04.System.Text.RegularExpressions.RegexPrefix.prototype, "Prefix", 
	$asm04.System.Text.RegularExpressions.RegexPrefix.prototype.get_Prefix, null);
JSIL.MakeProperty($asm04.System.Text.RegularExpressions.RegexPrefix.prototype, "CaseInsensitive", 
	$asm04.System.Text.RegularExpressions.RegexPrefix.prototype.get_CaseInsensitive, null);
JSIL.MakeProperty($asm04.System.Text.RegularExpressions.RegexPrefix, "Empty", 
	$asm04.System.Text.RegularExpressions.RegexPrefix.get_Empty, null);
$asm04.System.Text.RegularExpressions.RegexPrefix.prototype._prefix = null;
$asm04.System.Text.RegularExpressions.RegexPrefix.prototype._caseInsensitive = false;
$asm04.System.Text.RegularExpressions.RegexPrefix._empty = null;
$asm04.System.Text.RegularExpressions.RegexPrefix._cctor = function () {
	$asm04.System.Text.RegularExpressions.RegexPrefix._empty = new $asm04.System.Text.RegularExpressions.RegexPrefix(System.String.Empty, false);
};

System.Text.RegularExpressions.Group.prototype._ctor = function (text, caps, capcount) {
	System.Text.RegularExpressions.Capture.prototype._ctor.call(this, text, (capcount === 0) ? 0 : caps[((capcount - 1) * 2)], (capcount === 0) ? 0 : caps[((capcount * 2) - 1)]);
	this._caps = caps;
	this._capcount = capcount;
};
System.Text.RegularExpressions.Group.prototype.get_Success = function () {
	return (this._capcount !== 0);
};
System.Text.RegularExpressions.Group.prototype.get_Captures = function () {
	if (this._capcoll === null) {
		this._capcoll = new System.Text.RegularExpressions.CaptureCollection(this);
	}
	return this._capcoll;
};
System.Text.RegularExpressions.Group.Synchronized = function (inner) {
	if (inner === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["inner"]);
	}
	var captures = inner.Captures;
	if (inner._capcount > 0) {
		var arg_25_0 = captures.get_Item(0);
	}
	return inner;
};
JSIL.MakeProperty(System.Text.RegularExpressions.Group.prototype, "Success", 
	System.Text.RegularExpressions.Group.prototype.get_Success, null);
JSIL.MakeProperty(System.Text.RegularExpressions.Group.prototype, "Captures", 
	System.Text.RegularExpressions.Group.prototype.get_Captures, null);
System.Text.RegularExpressions.Group._emptygroup = null;
System.Text.RegularExpressions.Group.prototype._caps = null;
System.Text.RegularExpressions.Group.prototype._capcount = 0;
System.Text.RegularExpressions.Group.prototype._capcoll = null;
System.Text.RegularExpressions.Group._cctor = function () {
	System.Text.RegularExpressions.Group._emptygroup = new System.Text.RegularExpressions.Group(System.String.Empty, JSIL.Array.New(System.Int32, 0), 0);
};

System.Text.RegularExpressions.GroupCollection.prototype._ctor = function (match, caps) {
	System.Object.prototype._ctor.call(this);
	this._match = match;
	this._captureMap = caps;
};
System.Text.RegularExpressions.GroupCollection.prototype.get_SyncRoot = function () {
	return this._match;
};
System.Text.RegularExpressions.GroupCollection.prototype.get_IsSynchronized = function () {
	return false;
};
System.Text.RegularExpressions.GroupCollection.prototype.get_IsReadOnly = function () {
	return true;
};
System.Text.RegularExpressions.GroupCollection.prototype.get_Count = function () {
	return this._match._matchcount.length;
};
System.Text.RegularExpressions.GroupCollection.prototype.get_Item$0 = function (groupnum) {
	return this.GetGroup(groupnum);
};
System.Text.RegularExpressions.GroupCollection.prototype.get_Item$1 = function (groupname) {
	if (this._match._regex === null) {
		return System.Text.RegularExpressions.Group._emptygroup;
	}
	return this.GetGroup(this._match._regex.GroupNumberFromName(groupname));
};
System.Text.RegularExpressions.GroupCollection.prototype.GetGroup = function (groupnum) {
	if (this._captureMap !== null) {
		var obj = this._captureMap.get_Item(groupnum);
		if (obj === null) {
			return System.Text.RegularExpressions.Group._emptygroup;
		}
		return this.GetGroupImpl(JSIL.Cast(obj, System.Int32));
	} else {
		if (!((groupnum < this._match._matchcount.length) && (groupnum >= 0))) {
			return System.Text.RegularExpressions.Group._emptygroup;
		}
		return this.GetGroupImpl(groupnum);
	}
};
System.Text.RegularExpressions.GroupCollection.prototype.GetGroupImpl = function (groupnum) {
	if (groupnum === 0) {
		return this._match;
	}
	if (this._groups === null) {
		this._groups = JSIL.Array.New(System.Text.RegularExpressions.Group, (this._match._matchcount.length - 1));
	__loop0__: 
		for (var i = 0; i < this._groups.length; ++i) {
			this._groups[i] = new System.Text.RegularExpressions.Group(this._match._text, this._match._matches[(i + 1)], this._match._matchcount[(i + 1)]);
		}
	}
	return this._groups[(groupnum - 1)];
};
System.Text.RegularExpressions.GroupCollection.prototype.CopyTo = function (array, arrayIndex) {
	if (array === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["array"]);
	}
	var num = arrayIndex;
__loop0__: 
	for (var i = 0; i < this.Count; ++i) {
		array.SetValue(this.get_Item$0(i), num);
		++num;
	}
};
System.Text.RegularExpressions.GroupCollection.prototype.GetEnumerator = function () {
	return new $asm04.System.Text.RegularExpressions.GroupEnumerator(this);
};
JSIL.OverloadedMethod(System.Text.RegularExpressions.GroupCollection.prototype, "get_Item", [
		["get_Item$0", [System.Int32]], 
		["get_Item$1", [System.String]]
	]);
JSIL.MakeProperty(System.Text.RegularExpressions.GroupCollection.prototype, "SyncRoot", 
	System.Text.RegularExpressions.GroupCollection.prototype.get_SyncRoot, null);
JSIL.MakeProperty(System.Text.RegularExpressions.GroupCollection.prototype, "IsSynchronized", 
	System.Text.RegularExpressions.GroupCollection.prototype.get_IsSynchronized, null);
JSIL.MakeProperty(System.Text.RegularExpressions.GroupCollection.prototype, "IsReadOnly", 
	System.Text.RegularExpressions.GroupCollection.prototype.get_IsReadOnly, null);
JSIL.MakeProperty(System.Text.RegularExpressions.GroupCollection.prototype, "Count", 
	System.Text.RegularExpressions.GroupCollection.prototype.get_Count, null);
JSIL.MakeProperty(System.Text.RegularExpressions.GroupCollection.prototype, "Item", 
	System.Text.RegularExpressions.GroupCollection.prototype.get_Item$0, null);
JSIL.MakeProperty(System.Text.RegularExpressions.GroupCollection.prototype, "Item", 
	System.Text.RegularExpressions.GroupCollection.prototype.get_Item$1, null);
System.Text.RegularExpressions.GroupCollection.prototype._match = null;
System.Text.RegularExpressions.GroupCollection.prototype._captureMap = null;
System.Text.RegularExpressions.GroupCollection.prototype._groups = null;

$asm04.System.Text.RegularExpressions.GroupEnumerator.prototype._ctor = function (rgc) {
	System.Object.prototype._ctor.call(this);
	this._curindex = -1;
	this._rgc = rgc;
};
$asm04.System.Text.RegularExpressions.GroupEnumerator.prototype.MoveNext = function () {
	var count = this._rgc.Count;
	if (this._curindex >= count) {
		return false;
	}
	++this._curindex;
	return (this._curindex < count);
};
$asm04.System.Text.RegularExpressions.GroupEnumerator.prototype.get_Current = function () {
	return this.Capture;
};
$asm04.System.Text.RegularExpressions.GroupEnumerator.prototype.get_Capture = function () {
	if (!((this._curindex >= 0) && (this._curindex < this._rgc.Count))) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm04.System.SR.GetString$2("EnumNotStarted")]);
	}
	return this._rgc.get_Item$0(this._curindex);
};
$asm04.System.Text.RegularExpressions.GroupEnumerator.prototype.Reset = function () {
	this._curindex = -1;
};
JSIL.MakeProperty($asm04.System.Text.RegularExpressions.GroupEnumerator.prototype, "Current", 
	$asm04.System.Text.RegularExpressions.GroupEnumerator.prototype.get_Current, null);
JSIL.MakeProperty($asm04.System.Text.RegularExpressions.GroupEnumerator.prototype, "Capture", 
	$asm04.System.Text.RegularExpressions.GroupEnumerator.prototype.get_Capture, null);
$asm04.System.Text.RegularExpressions.GroupEnumerator.prototype._rgc = null;
$asm04.System.Text.RegularExpressions.GroupEnumerator.prototype._curindex = 0;

$asm04.System.Text.RegularExpressions.RegexRunner.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm04.System.Text.RegularExpressions.RegexRunner.prototype.Scan = function (regex, text, textbeg, textend, textstart, prevlen, quick) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				var flag = false;
				this.runregex = regex;
				this.runtext = text;
				this.runtextbeg = textbeg;
				this.runtextend = textend;
				this.runtextstart = textstart;
				var num = this.runregex.RightToLeft ? -1 : 1;
				var num2 = this.runregex.RightToLeft ? this.runtextbeg : this.runtextend;
				this.runtextpos = textstart;
				if (prevlen === 0) {
					if (this.runtextpos === num2) {
						return System.Text.RegularExpressions.Match.Empty;
					}
					this.runtextpos += num;
				}
			__loop0__: 
				while (true) {
					if (this.FindFirstChar()) {
						if (!flag) {
							this.InitMatch();
							flag = true;
						}
						this.Go();
						if (this.runmatch._matchcount[0] > 0) {
							break __loop0__;
						}
						this.runtrackpos = this.runtrack.length;
						this.runstackpos = this.runstack.length;
						this.runcrawlpos = this.runcrawl.length;
					}
					if (this.runtextpos === num2) {
						__label0__ = "Block_8";
						continue __step0__;
					}
					this.runtextpos += num;
				}
				return this.TidyMatch(quick);
				__label0__ = "Block_8";
				continue __step0__;
				break;
			case "Block_8":
				this.TidyMatch(true);
				return System.Text.RegularExpressions.Match.Empty;
				break __step0__;
		}
	}
};
$asm04.System.Text.RegularExpressions.RegexRunner.prototype.InitMatch = function () {
	if (this.runmatch === null) {
		if (this.runregex.caps !== null) {
			this.runmatch = new $asm04.System.Text.RegularExpressions.MatchSparse(this.runregex, this.runregex.caps, this.runregex.capsize, this.runtext, this.runtextbeg, (this.runtextend - this.runtextbeg), this.runtextstart);
		} else {
			this.runmatch = new System.Text.RegularExpressions.Match(this.runregex, this.runregex.capsize, this.runtext, this.runtextbeg, (this.runtextend - this.runtextbeg), this.runtextstart);
		}
	} else {
		this.runmatch.Reset(
			this.runregex, 
			this.runtext, 
			this.runtextbeg, 
			this.runtextend, 
			this.runtextstart
		);
	}
	if (this.runcrawl !== null) {
		this.runtrackpos = this.runtrack.length;
		this.runstackpos = this.runstack.length;
		this.runcrawlpos = this.runcrawl.length;
		return;
	}
	this.InitTrackCount();
	var num = (this.runtrackcount * 8);
	var num2 = (this.runtrackcount * 8);
	if (num < 32) {
		num = 32;
	}
	if (num2 < 16) {
		num2 = 16;
	}
	this.runtrack = JSIL.Array.New(System.Int32, num);
	this.runtrackpos = num;
	this.runstack = JSIL.Array.New(System.Int32, num2);
	this.runstackpos = num2;
	this.runcrawl = JSIL.Array.New(System.Int32, 32);
	this.runcrawlpos = 32;
};
$asm04.System.Text.RegularExpressions.RegexRunner.prototype.TidyMatch = function (quick) {
	if (!quick) {
		var match = this.runmatch;
		this.runmatch = null;
		match.Tidy(this.runtextpos);
		return match;
	}
	return null;
};
$asm04.System.Text.RegularExpressions.RegexRunner.prototype.EnsureStorage = function () {
	if (this.runstackpos < (this.runtrackcount * 4)) {
		this.DoubleStack();
	}
	if (this.runtrackpos < (this.runtrackcount * 4)) {
		this.DoubleTrack();
	}
};
$asm04.System.Text.RegularExpressions.RegexRunner.prototype.IsBoundary = function (index, startpos, endpos) {
	return ((index <= startpos) ? 0 : JSIL.Cast($asm04.System.Text.RegularExpressions.RegexCharClass.IsWordChar(this.runtext[(index - 1)]), System.Int32) !== (index >= endpos) ? 0 : JSIL.Cast($asm04.System.Text.RegularExpressions.RegexCharClass.IsWordChar(this.runtext[index]), System.Int32));
};
$asm04.System.Text.RegularExpressions.RegexRunner.prototype.IsECMABoundary = function (index, startpos, endpos) {
	return ((index <= startpos) ? 0 : JSIL.Cast($asm04.System.Text.RegularExpressions.RegexCharClass.IsECMAWordChar(this.runtext[(index - 1)]), System.Int32) !== (index >= endpos) ? 0 : JSIL.Cast($asm04.System.Text.RegularExpressions.RegexCharClass.IsECMAWordChar(this.runtext[index]), System.Int32));
};
$asm04.System.Text.RegularExpressions.RegexRunner.CharInSet = function (ch, set, category) {
	var set2 = $asm04.System.Text.RegularExpressions.RegexCharClass.ConvertOldStringsToClass(set, category);
	return $asm04.System.Text.RegularExpressions.RegexCharClass.CharInClass(ch, set2);
};
$asm04.System.Text.RegularExpressions.RegexRunner.CharInClass = function (ch, charClass) {
	return $asm04.System.Text.RegularExpressions.RegexCharClass.CharInClass(ch, charClass);
};
$asm04.System.Text.RegularExpressions.RegexRunner.prototype.DoubleTrack = function () {
	var destinationArray = JSIL.Array.New(System.Int32, (this.runtrack.length * 2));
	System.Array.Copy$1(
		this.runtrack, 
		0, 
		destinationArray, 
		this.runtrack.length, 
		this.runtrack.length
	);
	this.runtrackpos += this.runtrack.length;
	this.runtrack = destinationArray;
};
$asm04.System.Text.RegularExpressions.RegexRunner.prototype.DoubleStack = function () {
	var destinationArray = JSIL.Array.New(System.Int32, (this.runstack.length * 2));
	System.Array.Copy$1(
		this.runstack, 
		0, 
		destinationArray, 
		this.runstack.length, 
		this.runstack.length
	);
	this.runstackpos += this.runstack.length;
	this.runstack = destinationArray;
};
$asm04.System.Text.RegularExpressions.RegexRunner.prototype.DoubleCrawl = function () {
	var destinationArray = JSIL.Array.New(System.Int32, (this.runcrawl.length * 2));
	System.Array.Copy$1(
		this.runcrawl, 
		0, 
		destinationArray, 
		this.runcrawl.length, 
		this.runcrawl.length
	);
	this.runcrawlpos += this.runcrawl.length;
	this.runcrawl = destinationArray;
};
$asm04.System.Text.RegularExpressions.RegexRunner.prototype.Crawl = function (i) {
	if (this.runcrawlpos === 0) {
		this.DoubleCrawl();
	}
	this.runcrawl[--this.runcrawlpos] = i;
};
$asm04.System.Text.RegularExpressions.RegexRunner.prototype.Popcrawl = function () {
	return this.runcrawl[this.runcrawlpos++];
};
$asm04.System.Text.RegularExpressions.RegexRunner.prototype.Crawlpos = function () {
	return (this.runcrawl.length - this.runcrawlpos);
};
$asm04.System.Text.RegularExpressions.RegexRunner.prototype.Capture = function (capnum, start, end) {
	if (end < start) {
		var num = end;
		end = start;
		start = num;
	}
	this.Crawl(capnum);
	this.runmatch.AddMatch(capnum, start, (end - start));
};
$asm04.System.Text.RegularExpressions.RegexRunner.prototype.TransferCapture = function (capnum, uncapnum, start, end) {
	if (end < start) {
		var num = end;
		end = start;
		start = num;
	}
	var num2 = this.MatchIndex(uncapnum);
	var num3 = (num2 + this.MatchLength(uncapnum));
	if (start >= num3) {
		end = start;
		start = num3;
	} else if (end <= num2) {
		start = num2;
	} else {
		if (end > num3) {
			end = num3;
		}
		if (num2 > start) {
			start = num2;
		}
	}
	this.Crawl(uncapnum);
	this.runmatch.BalanceMatch(uncapnum);
	if (capnum !== -1) {
		this.Crawl(capnum);
		this.runmatch.AddMatch(capnum, start, (end - start));
	}
};
$asm04.System.Text.RegularExpressions.RegexRunner.prototype.Uncapture = function () {
	var cap = this.Popcrawl();
	this.runmatch.RemoveMatch(cap);
};
$asm04.System.Text.RegularExpressions.RegexRunner.prototype.IsMatched = function (cap) {
	return this.runmatch.IsMatched(cap);
};
$asm04.System.Text.RegularExpressions.RegexRunner.prototype.MatchIndex = function (cap) {
	return this.runmatch.MatchIndex(cap);
};
$asm04.System.Text.RegularExpressions.RegexRunner.prototype.MatchLength = function (cap) {
	return this.runmatch.MatchLength(cap);
};
$asm04.System.Text.RegularExpressions.RegexRunner.prototype.runtextbeg = 0;
$asm04.System.Text.RegularExpressions.RegexRunner.prototype.runtextend = 0;
$asm04.System.Text.RegularExpressions.RegexRunner.prototype.runtextstart = 0;
$asm04.System.Text.RegularExpressions.RegexRunner.prototype.runtext = null;
$asm04.System.Text.RegularExpressions.RegexRunner.prototype.runtextpos = 0;
$asm04.System.Text.RegularExpressions.RegexRunner.prototype.runtrack = null;
$asm04.System.Text.RegularExpressions.RegexRunner.prototype.runtrackpos = 0;
$asm04.System.Text.RegularExpressions.RegexRunner.prototype.runstack = null;
$asm04.System.Text.RegularExpressions.RegexRunner.prototype.runstackpos = 0;
$asm04.System.Text.RegularExpressions.RegexRunner.prototype.runcrawl = null;
$asm04.System.Text.RegularExpressions.RegexRunner.prototype.runcrawlpos = 0;
$asm04.System.Text.RegularExpressions.RegexRunner.prototype.runtrackcount = 0;
$asm04.System.Text.RegularExpressions.RegexRunner.prototype.runmatch = null;
$asm04.System.Text.RegularExpressions.RegexRunner.prototype.runregex = null;

$asm04.System.Text.RegularExpressions.RegexInterpreter.prototype._ctor = function (code, culture) {
	$asm04.System.Text.RegularExpressions.RegexRunner.prototype._ctor.call(this);
	this.runcode = code;
	this.runcodes = code._codes;
	this.runstrings = code._strings;
	this.runfcPrefix = code._fcPrefix;
	this.runbmPrefix = code._bmPrefix;
	this.runanchors = code._anchors;
	this.runculture = culture;
};
$asm04.System.Text.RegularExpressions.RegexInterpreter.prototype.InitTrackCount = function () {
	this.runtrackcount = this.runcode._trackcount;
};
$asm04.System.Text.RegularExpressions.RegexInterpreter.prototype.Advance$0 = function () {
	this.Advance$1(0);
};
$asm04.System.Text.RegularExpressions.RegexInterpreter.prototype.Advance$1 = function (i) {
	this.runcodepos += (i + 1);
	this.SetOperator(this.runcodes[this.runcodepos]);
};
$asm04.System.Text.RegularExpressions.RegexInterpreter.prototype.Goto = function (newpos) {
	if (newpos < this.runcodepos) {
		$asm04.System.Text.RegularExpressions.RegexRunner.prototype.EnsureStorage.call(this);
	}
	this.SetOperator(this.runcodes[newpos]);
	this.runcodepos = newpos;
};
$asm04.System.Text.RegularExpressions.RegexInterpreter.prototype.Textto = function (newpos) {
	this.runtextpos = newpos;
};
$asm04.System.Text.RegularExpressions.RegexInterpreter.prototype.Trackto = function (newpos) {
	this.runtrackpos = (this.runtrack.length - newpos);
};
$asm04.System.Text.RegularExpressions.RegexInterpreter.prototype.Textstart = function () {
	return this.runtextstart;
};
$asm04.System.Text.RegularExpressions.RegexInterpreter.prototype.Textpos = function () {
	return this.runtextpos;
};
$asm04.System.Text.RegularExpressions.RegexInterpreter.prototype.Trackpos = function () {
	return (this.runtrack.length - this.runtrackpos);
};
$asm04.System.Text.RegularExpressions.RegexInterpreter.prototype.TrackPush$0 = function () {
	this.runtrack[--this.runtrackpos] = this.runcodepos;
};
$asm04.System.Text.RegularExpressions.RegexInterpreter.prototype.TrackPush$1 = function (I1) {
	this.runtrack[--this.runtrackpos] = I1;
	this.runtrack[--this.runtrackpos] = this.runcodepos;
};
$asm04.System.Text.RegularExpressions.RegexInterpreter.prototype.TrackPush$2 = function (I1, I2) {
	this.runtrack[--this.runtrackpos] = I1;
	this.runtrack[--this.runtrackpos] = I2;
	this.runtrack[--this.runtrackpos] = this.runcodepos;
};
$asm04.System.Text.RegularExpressions.RegexInterpreter.prototype.TrackPush$3 = function (I1, I2, I3) {
	this.runtrack[--this.runtrackpos] = I1;
	this.runtrack[--this.runtrackpos] = I2;
	this.runtrack[--this.runtrackpos] = I3;
	this.runtrack[--this.runtrackpos] = this.runcodepos;
};
$asm04.System.Text.RegularExpressions.RegexInterpreter.prototype.TrackPush2$0 = function (I1) {
	this.runtrack[--this.runtrackpos] = I1;
	this.runtrack[--this.runtrackpos] = -this.runcodepos;
};
$asm04.System.Text.RegularExpressions.RegexInterpreter.prototype.TrackPush2$1 = function (I1, I2) {
	this.runtrack[--this.runtrackpos] = I1;
	this.runtrack[--this.runtrackpos] = I2;
	this.runtrack[--this.runtrackpos] = -this.runcodepos;
};
$asm04.System.Text.RegularExpressions.RegexInterpreter.prototype.Backtrack = function () {
	var num = this.runtrack[this.runtrackpos++];
	if (num < 0) {
		num = -num;
		this.SetOperator((this.runcodes[num] | 256));
	} else {
		this.SetOperator((this.runcodes[num] | 128));
	}
	if (num < this.runcodepos) {
		$asm04.System.Text.RegularExpressions.RegexRunner.prototype.EnsureStorage.call(this);
	}
	this.runcodepos = num;
};
$asm04.System.Text.RegularExpressions.RegexInterpreter.prototype.SetOperator = function (op) {
	this.runci = (0 !== (op & 512));
	this.runrtl = (0 !== (op & 64));
	this.runoperator = (op & -577);
};
$asm04.System.Text.RegularExpressions.RegexInterpreter.prototype.TrackPop$0 = function () {
	++this.runtrackpos;
};
$asm04.System.Text.RegularExpressions.RegexInterpreter.prototype.TrackPop$1 = function (framesize) {
	this.runtrackpos += framesize;
};
$asm04.System.Text.RegularExpressions.RegexInterpreter.prototype.TrackPeek$0 = function () {
	return this.runtrack[(this.runtrackpos - 1)];
};
$asm04.System.Text.RegularExpressions.RegexInterpreter.prototype.TrackPeek$1 = function (i) {
	return this.runtrack[((this.runtrackpos - i) - 1)];
};
$asm04.System.Text.RegularExpressions.RegexInterpreter.prototype.StackPush$0 = function (I1) {
	this.runstack[--this.runstackpos] = I1;
};
$asm04.System.Text.RegularExpressions.RegexInterpreter.prototype.StackPush$1 = function (I1, I2) {
	this.runstack[--this.runstackpos] = I1;
	this.runstack[--this.runstackpos] = I2;
};
$asm04.System.Text.RegularExpressions.RegexInterpreter.prototype.StackPop$0 = function () {
	++this.runstackpos;
};
$asm04.System.Text.RegularExpressions.RegexInterpreter.prototype.StackPop$1 = function (framesize) {
	this.runstackpos += framesize;
};
$asm04.System.Text.RegularExpressions.RegexInterpreter.prototype.StackPeek$0 = function () {
	return this.runstack[(this.runstackpos - 1)];
};
$asm04.System.Text.RegularExpressions.RegexInterpreter.prototype.StackPeek$1 = function (i) {
	return this.runstack[((this.runstackpos - i) - 1)];
};
$asm04.System.Text.RegularExpressions.RegexInterpreter.prototype.Operator = function () {
	return this.runoperator;
};
$asm04.System.Text.RegularExpressions.RegexInterpreter.prototype.Operand = function (i) {
	return this.runcodes[((this.runcodepos + i) + 1)];
};
$asm04.System.Text.RegularExpressions.RegexInterpreter.prototype.Leftchars = function () {
	return (this.runtextpos - this.runtextbeg);
};
$asm04.System.Text.RegularExpressions.RegexInterpreter.prototype.Rightchars = function () {
	return (this.runtextend - this.runtextpos);
};
$asm04.System.Text.RegularExpressions.RegexInterpreter.prototype.Bump = function () {
	if (!this.runrtl) {
		return 1;
	}
	return -1;
};
$asm04.System.Text.RegularExpressions.RegexInterpreter.prototype.Forwardchars = function () {
	if (!this.runrtl) {
		return (this.runtextend - this.runtextpos);
	}
	return (this.runtextpos - this.runtextbeg);
};
$asm04.System.Text.RegularExpressions.RegexInterpreter.prototype.Forwardcharnext = function () {
	var c = this.runrtl ? this.runtext[--this.runtextpos] : this.runtext[this.runtextpos++];
	if (!this.runci) {
		return c;
	}
	return System.Char.ToLower$0(c, this.runculture);
};
$asm04.System.Text.RegularExpressions.RegexInterpreter.prototype.Stringmatch = function (str) {
	var num = 0;
	if (!this.runrtl) {
		if ((this.runtextend - this.runtextpos) < (num = str.length)) {
			return false;
		}
		var num2 = (this.runtextpos + num);
	} else {
		if ((this.runtextpos - this.runtextbeg) < (num = str.length)) {
			return false;
		}
		num2 = this.runtextpos;
	}
	if (!this.runci) {
	__loop1__: 
		while (num !== 0) {
			if ((str[--num]) !== (this.runtext[--num2])) {
				return false;
			}
		}
	} else {
	__loop0__: 
		while (num !== 0) {
			if ((str[--num]) !== System.Char.ToLower$0(this.runtext[--num2], this.runculture)) {
				return false;
			}
		}
	}
	if (!this.runrtl) {
		num2 += str.length;
	}
	this.runtextpos = num2;
	return true;
};
$asm04.System.Text.RegularExpressions.RegexInterpreter.prototype.Refmatch = function (index, len) {
	if (!this.runrtl) {
		if ((this.runtextend - this.runtextpos) < len) {
			return false;
		}
		var num = (this.runtextpos + len);
	} else {
		if ((this.runtextpos - this.runtextbeg) < len) {
			return false;
		}
		num = this.runtextpos;
	}
	var num2 = (index + len);
	var num3 = len;
	if (!this.runci) {
	__loop1__: 
		while (num3--) {
			if ((this.runtext[--num2]) !== (this.runtext[--num])) {
				return false;
			}
		}
	} else {
	__loop0__: 
		while (num3--) {
			if (System.Char.ToLower$0(this.runtext[--num2], this.runculture) !== System.Char.ToLower$0(this.runtext[--num], this.runculture)) {
				return false;
			}
		}
	}
	if (!this.runrtl) {
		num += len;
	}
	this.runtextpos = num;
	return true;
};
$asm04.System.Text.RegularExpressions.RegexInterpreter.prototype.Backwardnext = function () {
	this.runtextpos += this.runrtl ? 1 : -1;
};
$asm04.System.Text.RegularExpressions.RegexInterpreter.prototype.CharAt = function (j) {
	return this.runtext[j];
};
$asm04.System.Text.RegularExpressions.RegexInterpreter.prototype.FindFirstChar = function () {
	if (this.runanchors & 53) {
		if (!this.runcode._rightToLeft) {
			if (!(!((this.runanchors & 1) && 
						(this.runtextpos > this.runtextbeg)) && (!(this.runanchors & 4) || 
						(this.runtextpos <= this.runtextstart)))) {
				this.runtextpos = this.runtextend;
				return false;
			}
			if (!(!(this.runanchors & 16) || (this.runtextpos >= (this.runtextend - 1)))) {
				this.runtextpos = (this.runtextend - 1);
			} else if (!(!(this.runanchors & 32) || (this.runtextpos >= this.runtextend))) {
				this.runtextpos = this.runtextend;
			}
		} else {
			if (!(!((this.runanchors & 32) && 
						(this.runtextpos < this.runtextend)) && 
					!((this.runanchors & 16) && 
						((this.runtextpos < (this.runtextend - 1)) || 
							((this.runtextpos === (this.runtextend - 1)) && 
								(this.CharAt(this.runtextpos) !== "\n")))) && (!(this.runanchors & 4) || 
						(this.runtextpos >= this.runtextstart)))) {
				this.runtextpos = this.runtextbeg;
				return false;
			}
			if (!(!(this.runanchors & 1) || (this.runtextpos <= this.runtextbeg))) {
				this.runtextpos = this.runtextbeg;
			}
		}
		return ((this.runbmPrefix === null) || this.runbmPrefix.IsMatch(this.runtext, this.runtextpos, this.runtextbeg, this.runtextend));
	}
	if (this.runbmPrefix !== null) {
		this.runtextpos = this.runbmPrefix.Scan(this.runtext, this.runtextpos, this.runtextbeg, this.runtextend);
		if (this.runtextpos === -1) {
			this.runtextpos = this.runcode._rightToLeft ? this.runtextbeg : this.runtextend;
			return false;
		}
		return true;
	} else {
		if (this.runfcPrefix === null) {
			return true;
		}
		this.runrtl = this.runcode._rightToLeft;
		this.runci = this.runfcPrefix.CaseInsensitive;
		var prefix = this.runfcPrefix.Prefix;
		if ($asm04.System.Text.RegularExpressions.RegexCharClass.IsSingleton(prefix)) {
			var c = $asm04.System.Text.RegularExpressions.RegexCharClass.SingletonChar(prefix);
		__loop1__: 
			for (var i = this.Forwardchars(); i > 0; --i) {
				if (c === this.Forwardcharnext()) {
					this.Backwardnext();
					return true;
				}
			}
		} else {
		__loop0__: 
			for (i = this.Forwardchars(); i > 0; --i) {
				if ($asm04.System.Text.RegularExpressions.RegexCharClass.CharInClass(this.Forwardcharnext(), prefix)) {
					this.Backwardnext();
					return true;
				}
			}
		}
		return false;
	}
};
$asm04.System.Text.RegularExpressions.RegexInterpreter.prototype.Go = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				this.Goto(0);
			__loop0__: 
				while (true) {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								var num = this.Operator();
								switch (num) {
									case 0: 
										var num2 = this.Operand(1);
										if (this.Forwardchars() >= num2) {
											var c = String.fromCharCode(this.Operand(0));
										__loop1__: 
											while (num2-- > 0) {
												if (this.Forwardcharnext() !== c) {
													__label1__ = "IL_E4E";
													continue __step1__;
												}
											}
											this.Advance$1(2);
											continue __step1__;
											;
										}
										break;
									case 1: 
										var num3 = this.Operand(1);
										if (this.Forwardchars() >= num3) {
											var c2 = String.fromCharCode(this.Operand(0));
										__loop2__: 
											while (num3-- > 0) {
												if (this.Forwardcharnext() === c2) {
													__label1__ = "IL_E4E";
													continue __step1__;
												}
											}
											this.Advance$1(2);
											continue __step1__;
											;
										}
										break;
									case 2: 
										var num4 = this.Operand(1);
										if (this.Forwardchars() >= num4) {
											var set = this.runstrings[this.Operand(0)];
										__loop3__: 
											while (num4-- > 0) {
												if (!$asm04.System.Text.RegularExpressions.RegexCharClass.CharInClass(this.Forwardcharnext(), set)) {
													__label1__ = "IL_E4E";
													continue __step1__;
												}
											}
											this.Advance$1(2);
											continue __step1__;
											;
										}
										break;
									case 3: 
										var num5 = this.Operand(1);
										if (num5 > this.Forwardchars()) {
											num5 = this.Forwardchars();
										}
										var c3 = String.fromCharCode(this.Operand(0));
									__loop4__: 
										for (var i = num5; i > 0; --i) {
											if (this.Forwardcharnext() !== c3) {
												this.Backwardnext();
												break __loop4__;
											}
										}
										if (num5 > i) {
											this.TrackPush$2(((num5 - i) - 1), (this.Textpos() - this.Bump()));
										}
										this.Advance$1(2);
										continue __step1__;
										;
									case 4: 
										var num6 = this.Operand(1);
										if (num6 > this.Forwardchars()) {
											num6 = this.Forwardchars();
										}
										var c4 = String.fromCharCode(this.Operand(0));
									__loop5__: 
										for (var j = num6; j > 0; --j) {
											if (this.Forwardcharnext() === c4) {
												this.Backwardnext();
												break __loop5__;
											}
										}
										if (num6 > j) {
											this.TrackPush$2(((num6 - j) - 1), (this.Textpos() - this.Bump()));
										}
										this.Advance$1(2);
										continue __step1__;
										;
									case 5: 
										var num7 = this.Operand(1);
										if (num7 > this.Forwardchars()) {
											num7 = this.Forwardchars();
										}
										var set2 = this.runstrings[this.Operand(0)];
									__loop6__: 
										for (var k = num7; k > 0; --k) {
											if (!$asm04.System.Text.RegularExpressions.RegexCharClass.CharInClass(this.Forwardcharnext(), set2)) {
												this.Backwardnext();
												break __loop6__;
											}
										}
										if (num7 > k) {
											this.TrackPush$2(((num7 - k) - 1), (this.Textpos() - this.Bump()));
										}
										this.Advance$1(2);
										continue __step1__;
										;
									case 6: 
									case 7: 
										var num8 = this.Operand(1);
										if (num8 > this.Forwardchars()) {
											num8 = this.Forwardchars();
										}
										if (num8 > 0) {
											this.TrackPush$2((num8 - 1), this.Textpos());
										}
										this.Advance$1(2);
										continue __step1__;
										;
									case 8: 
										var num9 = this.Operand(1);
										if (num9 > this.Forwardchars()) {
											num9 = this.Forwardchars();
										}
										if (num9 > 0) {
											this.TrackPush$2((num9 - 1), this.Textpos());
										}
										this.Advance$1(2);
										continue __step1__;
										;
									case 9: 
										if (!((this.Forwardchars() < 1) || (this.Forwardcharnext() !== String.fromCharCode(this.Operand(0))))) {
											this.Advance$1(1);
											continue __step1__;
											;
										}
										break;
									case 10: 
										if (!((this.Forwardchars() < 1) || (this.Forwardcharnext() === String.fromCharCode(this.Operand(0))))) {
											this.Advance$1(1);
											continue __step1__;
											;
										}
										break;
									case 11: 
										if (!((this.Forwardchars() < 1) || !$asm04.System.Text.RegularExpressions.RegexCharClass.CharInClass(this.Forwardcharnext(), this.runstrings[this.Operand(0)]))) {
											this.Advance$1(1);
											continue __step1__;
											;
										}
										break;
									case 12: 
										if (this.Stringmatch(this.runstrings[this.Operand(0)])) {
											this.Advance$1(1);
											continue __step1__;
											;
										}
										break;
									case 13: 
										var cap = this.Operand(0);
										if ($asm04.System.Text.RegularExpressions.RegexRunner.prototype.IsMatched.call(this, cap)) {
											if (!this.Refmatch($asm04.System.Text.RegularExpressions.RegexRunner.prototype.MatchIndex.call(this, cap), $asm04.System.Text.RegularExpressions.RegexRunner.prototype.MatchLength.call(this, cap))) {
												break;
											}
										} else if (!(this.runregex.roptions & System.Text.RegularExpressions.RegexOptions.ECMAScript)) {
											break;
										}
										this.Advance$1(1);
										continue __step1__;
										;
									case 14: 
										if (!((this.Leftchars() > 0) && (this.CharAt((this.Textpos() - 1)) !== "\n"))) {
											this.Advance$0();
											continue __step1__;
											;
										}
										break;
									case 15: 
										if (!((this.Rightchars() > 0) && (this.CharAt(this.Textpos()) !== "\n"))) {
											this.Advance$0();
											continue __step1__;
											;
										}
										break;
									case 16: 
										if ($asm04.System.Text.RegularExpressions.RegexRunner.prototype.IsBoundary.call(this, this.Textpos(), this.runtextbeg, this.runtextend)) {
											this.Advance$0();
											continue __step1__;
											;
										}
										break;
									case 17: 
										if (!$asm04.System.Text.RegularExpressions.RegexRunner.prototype.IsBoundary.call(this, this.Textpos(), this.runtextbeg, this.runtextend)) {
											this.Advance$0();
											continue __step1__;
											;
										}
										break;
									case 18: 
										if (this.Leftchars() <= 0) {
											this.Advance$0();
											continue __step1__;
											;
										}
										break;
									case 19: 
										if (this.Textpos() === this.Textstart()) {
											this.Advance$0();
											continue __step1__;
											;
										}
										break;
									case 20: 
										if (!((this.Rightchars() > 1) || ((this.Rightchars() === 1) && 
													(this.CharAt(this.Textpos()) !== "\n")))) {
											this.Advance$0();
											continue __step1__;
											;
										}
										break;
									case 21: 
										if (this.Rightchars() <= 0) {
											this.Advance$0();
											continue __step1__;
											;
										}
										break;
									case 22: 
										break;
									case 23: 
										this.TrackPush$1(this.Textpos());
										this.Advance$1(1);
										continue __step1__;
										;
									case 24: 
										this.StackPop$0();
										var num10 = (this.Textpos() - this.StackPeek$0());
										if (num10 !== 0) {
											this.TrackPush$2(this.StackPeek$0(), this.Textpos());
											this.StackPush$0(this.Textpos());
											this.Goto(this.Operand(0));
											continue __step1__;
											;
										}
										this.TrackPush2$0(this.StackPeek$0());
										this.Advance$1(1);
										continue __step1__;
										;
									case 25: 
										this.StackPop$0();
										var num11 = this.StackPeek$0();
										if (this.Textpos() !== num11) {
											if (num11 !== -1) {
												this.TrackPush$2(num11, this.Textpos());
											} else {
												this.TrackPush$2(this.Textpos(), this.Textpos());
											}
										} else {
											this.StackPush$0(num11);
											this.TrackPush2$0(this.StackPeek$0());
										}
										this.Advance$1(1);
										continue __step1__;
										;
									case 26: 
										this.StackPush$1(-1, this.Operand(0));
										this.TrackPush$0();
										this.Advance$1(1);
										continue __step1__;
										;
									case 27: 
										this.StackPush$1(this.Textpos(), this.Operand(0));
										this.TrackPush$0();
										this.Advance$1(1);
										continue __step1__;
										;
									case 28: 
										this.StackPop$1(2);
										var num12 = this.StackPeek$0();
										var num13 = this.StackPeek$1(1);
										var num14 = (this.Textpos() - num12);
										if (!((num13 < this.Operand(1)) && ((num14 !== 0) || 
													(num13 < 0)))) {
											this.TrackPush2$1(num12, num13);
											this.Advance$1(2);
											continue __step1__;
											;
										}
										this.TrackPush$1(num12);
										this.StackPush$1(this.Textpos(), (num13 + 1));
										this.Goto(this.Operand(0));
										continue __step1__;
										;
									case 29: 
										this.StackPop$1(2);
										var i2 = this.StackPeek$0();
										var num15 = this.StackPeek$1(1);
										if (num15 < 0) {
											this.TrackPush2$0(i2);
											this.StackPush$1(this.Textpos(), (num15 + 1));
											this.Goto(this.Operand(0));
											continue __step1__;
											;
										}
										this.TrackPush$3(i2, num15, this.Textpos());
										this.Advance$1(2);
										continue __step1__;
										;
									case 30: 
										this.StackPush$0(-1);
										this.TrackPush$0();
										this.Advance$0();
										continue __step1__;
										;
									case 31: 
										this.StackPush$0(this.Textpos());
										this.TrackPush$0();
										this.Advance$0();
										continue __step1__;
										;
									case 32: 
										if (!((this.Operand(1) !== -1) && !$asm04.System.Text.RegularExpressions.RegexRunner.prototype.IsMatched.call(this, this.Operand(1)))) {
											this.StackPop$0();
											if (this.Operand(1) !== -1) {
												$asm04.System.Text.RegularExpressions.RegexRunner.prototype.TransferCapture.call(this, this.Operand(0), this.Operand(1), this.StackPeek$0(), this.Textpos());
											} else {
												$asm04.System.Text.RegularExpressions.RegexRunner.prototype.Capture.call(this, this.Operand(0), this.StackPeek$0(), this.Textpos());
											}
											this.TrackPush$1(this.StackPeek$0());
											this.Advance$1(2);
											continue __step1__;
											;
										}
										break;
									case 33: 
										this.StackPop$0();
										this.TrackPush$1(this.StackPeek$0());
										this.Textto(this.StackPeek$0());
										this.Advance$0();
										continue __step1__;
										;
									case 34: 
										this.StackPush$1(this.Trackpos(), $asm04.System.Text.RegularExpressions.RegexRunner.prototype.Crawlpos.call(this));
										this.TrackPush$0();
										this.Advance$0();
										continue __step1__;
										;
									case 35: 
										this.StackPop$1(2);
										this.Trackto(this.StackPeek$0());
									__loop7__: 
										while ($asm04.System.Text.RegularExpressions.RegexRunner.prototype.Crawlpos.call(this) !== this.StackPeek$1(1)) {
											$asm04.System.Text.RegularExpressions.RegexRunner.prototype.Uncapture.call(this);
										}
										break;
									case 36: 
										this.StackPop$1(2);
										this.Trackto(this.StackPeek$0());
										this.TrackPush$1(this.StackPeek$1(1));
										this.Advance$0();
										continue __step1__;
										;
									case 37: 
										if ($asm04.System.Text.RegularExpressions.RegexRunner.prototype.IsMatched.call(this, this.Operand(0))) {
											this.Advance$1(1);
											continue __step1__;
											;
										}
										break;
									case 38: 
										this.Goto(this.Operand(0));
										continue __step1__;
										;
									case 39: 
										__label0__ = "IL_E3E";
										continue __step0__;
									case 40: 
										return;
									case 41: 
										if ($asm04.System.Text.RegularExpressions.RegexRunner.prototype.IsECMABoundary.call(this, this.Textpos(), this.runtextbeg, this.runtextend)) {
											this.Advance$0();
											continue __step1__;
											;
										}
										break;
									case 42: 
										if (!$asm04.System.Text.RegularExpressions.RegexRunner.prototype.IsECMABoundary.call(this, this.Textpos(), this.runtextbeg, this.runtextend)) {
											this.Advance$0();
											continue __step1__;
											;
										}
										break;
									default: 
										switch (num) {
											case 131: 
											case 132: 
												this.TrackPop$1(2);
												var num16 = this.TrackPeek$0();
												var num17 = this.TrackPeek$1(1);
												this.Textto(num17);
												if (num16 > 0) {
													this.TrackPush$2((num16 - 1), (num17 - this.Bump()));
												}
												this.Advance$1(2);
												continue __step1__;
												;
											case 133: 
												this.TrackPop$1(2);
												var num18 = this.TrackPeek$0();
												var num19 = this.TrackPeek$1(1);
												this.Textto(num19);
												if (num18 > 0) {
													this.TrackPush$2((num18 - 1), (num19 - this.Bump()));
												}
												this.Advance$1(2);
												continue __step1__;
												;
											case 134: 
												this.TrackPop$1(2);
												var num20 = this.TrackPeek$1(1);
												this.Textto(num20);
												if (this.Forwardcharnext() === String.fromCharCode(this.Operand(0))) {
													var num21 = this.TrackPeek$0();
													if (num21 > 0) {
														this.TrackPush$2((num21 - 1), (num20 + this.Bump()));
													}
													this.Advance$1(2);
													continue __step1__;
													;
												}
												break;
											case 135: 
												this.TrackPop$1(2);
												var num22 = this.TrackPeek$1(1);
												this.Textto(num22);
												if (this.Forwardcharnext() !== String.fromCharCode(this.Operand(0))) {
													var num23 = this.TrackPeek$0();
													if (num23 > 0) {
														this.TrackPush$2((num23 - 1), (num22 + this.Bump()));
													}
													this.Advance$1(2);
													continue __step1__;
													;
												}
												break;
											case 136: 
												this.TrackPop$1(2);
												var num24 = this.TrackPeek$1(1);
												this.Textto(num24);
												if ($asm04.System.Text.RegularExpressions.RegexCharClass.CharInClass(this.Forwardcharnext(), this.runstrings[this.Operand(0)])) {
													var num25 = this.TrackPeek$0();
													if (num25 > 0) {
														this.TrackPush$2((num25 - 1), (num24 + this.Bump()));
													}
													this.Advance$1(2);
													continue __step1__;
													;
												}
												break;
											case 137: 
											case 138: 
											case 139: 
											case 140: 
											case 141: 
											case 142: 
											case 143: 
											case 144: 
											case 145: 
											case 146: 
											case 147: 
											case 148: 
											case 149: 
											case 150: 
											case 163: 
												__label0__ = "IL_E3E";
												continue __step0__;
											case 151: 
												this.TrackPop$0();
												this.Textto(this.TrackPeek$0());
												this.Goto(this.Operand(0));
												continue __step1__;
												;
											case 152: 
												this.TrackPop$1(2);
												this.StackPop$0();
												this.Textto(this.TrackPeek$1(1));
												this.TrackPush2$0(this.TrackPeek$0());
												this.Advance$1(1);
												continue __step1__;
												;
											case 153: 
												this.TrackPop$1(2);
												var num26 = this.TrackPeek$1(1);
												this.TrackPush2$0(this.TrackPeek$0());
												this.StackPush$0(num26);
												this.Textto(num26);
												this.Goto(this.Operand(0));
												continue __step1__;
												;
											case 154: 
												this.StackPop$1(2);
												break;
											case 155: 
												this.StackPop$1(2);
												break;
											case 156: 
												this.TrackPop$0();
												this.StackPop$1(2);
												if (this.StackPeek$1(1) > 0) {
													this.Textto(this.StackPeek$0());
													this.TrackPush2$1(this.TrackPeek$0(), (this.StackPeek$1(1) - 1));
													this.Advance$1(2);
													continue __step1__;
													;
												}
												this.StackPush$1(this.TrackPeek$0(), (this.StackPeek$1(1) - 1));
												break;
											case 157: 
												this.TrackPop$1(3);
												var num27 = this.TrackPeek$0();
												var num28 = this.TrackPeek$1(2);
												if (!((this.TrackPeek$1(1) >= this.Operand(1)) || (num28 === num27))) {
													this.Textto(num28);
													this.StackPush$1(num28, (this.TrackPeek$1(1) + 1));
													this.TrackPush2$0(num27);
													this.Goto(this.Operand(0));
													continue __step1__;
													;
												}
												this.StackPush$1(this.TrackPeek$0(), this.TrackPeek$1(1));
												break;
											case 158: 
											case 159: 
												this.StackPop$0();
												break;
											case 160: 
												this.TrackPop$0();
												this.StackPush$0(this.TrackPeek$0());
												$asm04.System.Text.RegularExpressions.RegexRunner.prototype.Uncapture.call(this);
												if (!((this.Operand(0) === -1) || (this.Operand(1) === -1))) {
													$asm04.System.Text.RegularExpressions.RegexRunner.prototype.Uncapture.call(this);
												}
												break;
											case 161: 
												this.TrackPop$0();
												this.StackPush$0(this.TrackPeek$0());
												break;
											case 162: 
												this.StackPop$1(2);
												break;
											case 164: 
												this.TrackPop$0();
											__loop8__: 
												while ($asm04.System.Text.RegularExpressions.RegexRunner.prototype.Crawlpos.call(this) !== this.TrackPeek$0()) {
													$asm04.System.Text.RegularExpressions.RegexRunner.prototype.Uncapture.call(this);
												}
												break;
											default: 
												switch (num) {
													case 280: 
														this.TrackPop$0();
														this.StackPush$0(this.TrackPeek$0());
														__label1__ = "IL_E4E";
														continue __step1__;
													case 281: 
														this.StackPop$0();
														this.TrackPop$0();
														this.StackPush$0(this.TrackPeek$0());
														__label1__ = "IL_E4E";
														continue __step1__;
													case 284: 
														this.TrackPop$1(2);
														this.StackPush$1(this.TrackPeek$0(), this.TrackPeek$1(1));
														__label1__ = "IL_E4E";
														continue __step1__;
													case 285: 
														this.TrackPop$0();
														this.StackPop$1(2);
														this.StackPush$1(this.TrackPeek$0(), (this.StackPeek$1(1) - 1));
														__label1__ = "IL_E4E";
														continue __step1__;
												}
												__label0__ = "Block_3";
												continue __step0__;
										}
										break;
								}
								__label1__ = "IL_E4E";
								continue __step1__;
								break;
							case "IL_E4E":
								this.Backtrack();
								break __step1__;
						}
					}
				}
				__label0__ = "Block_3";
				continue __step0__;
				break;
			case "Block_3":
				__label0__ = "IL_E3E";
				continue __step0__;
				break;
			case "IL_E3E":
				throw JSIL.New(System.NotImplementedException, "_ctor$1", [$asm04.System.SR.GetString$2("UnimplementedState")]);
				break __step0__;
		}
	}
};
JSIL.OverloadedMethod($asm04.System.Text.RegularExpressions.RegexInterpreter.prototype, "Advance", [
		["Advance$0", []], 
		["Advance$1", [System.Int32]]
	]);
JSIL.OverloadedMethod($asm04.System.Text.RegularExpressions.RegexInterpreter.prototype, "TrackPush", [
		["TrackPush$0", []], 
		["TrackPush$1", [System.Int32]], 
		["TrackPush$2", [System.Int32, System.Int32]], 
		["TrackPush$3", [System.Int32, System.Int32, System.Int32]]
	]);
JSIL.OverloadedMethod($asm04.System.Text.RegularExpressions.RegexInterpreter.prototype, "TrackPush2", [
		["TrackPush2$0", [System.Int32]], 
		["TrackPush2$1", [System.Int32, System.Int32]]
	]);
JSIL.OverloadedMethod($asm04.System.Text.RegularExpressions.RegexInterpreter.prototype, "TrackPop", [
		["TrackPop$0", []], 
		["TrackPop$1", [System.Int32]]
	]);
JSIL.OverloadedMethod($asm04.System.Text.RegularExpressions.RegexInterpreter.prototype, "TrackPeek", [
		["TrackPeek$0", []], 
		["TrackPeek$1", [System.Int32]]
	]);
JSIL.OverloadedMethod($asm04.System.Text.RegularExpressions.RegexInterpreter.prototype, "StackPush", [
		["StackPush$0", [System.Int32]], 
		["StackPush$1", [System.Int32, System.Int32]]
	]);
JSIL.OverloadedMethod($asm04.System.Text.RegularExpressions.RegexInterpreter.prototype, "StackPop", [
		["StackPop$0", []], 
		["StackPop$1", [System.Int32]]
	]);
JSIL.OverloadedMethod($asm04.System.Text.RegularExpressions.RegexInterpreter.prototype, "StackPeek", [
		["StackPeek$0", []], 
		["StackPeek$1", [System.Int32]]
	]);
$asm04.System.Text.RegularExpressions.RegexInterpreter.prototype.runoperator = 0;
$asm04.System.Text.RegularExpressions.RegexInterpreter.prototype.runcodes = null;
$asm04.System.Text.RegularExpressions.RegexInterpreter.prototype.runcodepos = 0;
$asm04.System.Text.RegularExpressions.RegexInterpreter.prototype.runstrings = null;
$asm04.System.Text.RegularExpressions.RegexInterpreter.prototype.runcode = null;
$asm04.System.Text.RegularExpressions.RegexInterpreter.prototype.runfcPrefix = null;
$asm04.System.Text.RegularExpressions.RegexInterpreter.prototype.runbmPrefix = null;
$asm04.System.Text.RegularExpressions.RegexInterpreter.prototype.runanchors = 0;
$asm04.System.Text.RegularExpressions.RegexInterpreter.prototype.runrtl = false;
$asm04.System.Text.RegularExpressions.RegexInterpreter.prototype.runci = false;
$asm04.System.Text.RegularExpressions.RegexInterpreter.prototype.runculture = null;

System.Text.RegularExpressions.Match.get_Empty = function () {
	return System.Text.RegularExpressions.Match._empty;
};
System.Text.RegularExpressions.Match.prototype._ctor = function (regex, capcount, text, begpos, len, startpos) {
	System.Text.RegularExpressions.Group.prototype._ctor.call(this, text, JSIL.Array.New(System.Int32, 2), 0);
	this._regex = regex;
	this._matchcount = JSIL.Array.New(System.Int32, capcount);
	this._matches = JSIL.Array.New(System.Array.Of(System.Int32), capcount);
	this._matches[0] = this._caps;
	this._textbeg = begpos;
	this._textend = (begpos + len);
	this._textstart = startpos;
	this._balancing = false;
};
System.Text.RegularExpressions.Match.prototype.Reset = function (regex, text, textbeg, textend, textstart) {
	this._regex = regex;
	this._text = text;
	this._textbeg = textbeg;
	this._textend = textend;
	this._textstart = textstart;
__loop0__: 
	for (var i = 0; i < this._matchcount.length; ++i) {
		this._matchcount[i] = 0;
	}
	this._balancing = false;
};
System.Text.RegularExpressions.Match.prototype.get_Groups = function () {
	if (this._groupcoll === null) {
		this._groupcoll = new System.Text.RegularExpressions.GroupCollection(this, null);
	}
	return this._groupcoll;
};
System.Text.RegularExpressions.Match.prototype.NextMatch = function () {
	if (this._regex === null) {
		return this;
	}
	return this._regex.Run(
		false, 
		this._length, 
		this._text, 
		this._textbeg, 
		(this._textend - this._textbeg), 
		this._textpos
	);
};
System.Text.RegularExpressions.Match.prototype.Result = function (replacement) {
	if (replacement === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["replacement"]);
	}
	if (this._regex === null) {
		throw JSIL.New(System.NotSupportedException, "_ctor$1", [$asm04.System.SR.GetString$2("NoResultOnFailed")]);
	}
	var regexReplacement = JSIL.Cast(this._regex.replref.Get(), $asm04.System.Text.RegularExpressions.RegexReplacement);
	if (!((regexReplacement !== null) && regexReplacement.Pattern.Equals$1(replacement))) {
		regexReplacement = $asm04.System.Text.RegularExpressions.RegexParser.ParseReplacement(
			replacement, 
			this._regex.caps, 
			this._regex.capsize, 
			this._regex.capnames, 
			this._regex.roptions
		);
		this._regex.replref.Cache(regexReplacement);
	}
	return regexReplacement.Replacement(this);
};
System.Text.RegularExpressions.Match.prototype.GroupToStringImpl = function (groupnum) {
	var num = this._matchcount[groupnum];
	if (num === 0) {
		return System.String.Empty;
	}
	var array = this._matches[groupnum];
	return this._text.Substring$1(array[((num - 1) * 2)], array[((num * 2) - 1)]);
};
System.Text.RegularExpressions.Match.prototype.LastGroupToStringImpl = function () {
	return this.GroupToStringImpl((this._matchcount.length - 1));
};
System.Text.RegularExpressions.Match.Synchronized = function (inner) {
	if (inner === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["inner"]);
	}
	var num = inner._matchcount.length;
__loop0__: 
	for (var i = 0; i < num; ++i) {
		var inner2 = inner.Groups.get_Item$0(i);
		System.Text.RegularExpressions.Group.Synchronized(inner2);
	}
	return inner;
};
System.Text.RegularExpressions.Match.prototype.AddMatch = function (cap, start, len) {
	if (!this._matches[cap]) {
		this._matches[cap] = JSIL.Array.New(System.Int32, 2);
	}
	var num = this._matchcount[cap];
	if (((num * 2) + 2) > this._matches[cap].length) {
		var array2 = JSIL.Array.New(System.Int32, (num * 8));
	__loop0__: 
		for (var i = 0; i < (num * 2); ++i) {
			array2[i] = this._matches[cap][i];
		}
		this._matches[cap] = array2;
	}
	this._matches[cap][(num * 2)] = start;
	this._matches[cap][((num * 2) + 1)] = len;
	this._matchcount[cap] = (num + 1);
};
System.Text.RegularExpressions.Match.prototype.BalanceMatch = function (cap) {
	this._balancing = true;
	var num2 = ((this._matchcount[cap] * 2) - 2);
	if (this._matches[cap][num2] < 0) {
		num2 = (-3 - this._matches[cap][num2]);
	}
	num2 -= 2;
	if (!((num2 < 0) || (this._matches[cap][num2] >= 0))) {
		this.AddMatch(cap, this._matches[cap][num2], this._matches[cap][(num2 + 1)]);
		return;
	}
	this.AddMatch(cap, (-3 - num2), (-4 - num2));
};
System.Text.RegularExpressions.Match.prototype.RemoveMatch = function (cap) {
	this._matchcount[cap] -= 1;
};
System.Text.RegularExpressions.Match.prototype.IsMatched = function (cap) {
	return (!((cap >= this._matchcount.length) || 
			(this._matchcount[cap] <= 0)) && (this._matches[cap][((this._matchcount[cap] * 2) - 1)] !== -2));
};
System.Text.RegularExpressions.Match.prototype.MatchIndex = function (cap) {
	var num = this._matches[cap][((this._matchcount[cap] * 2) - 2)];
	if (num >= 0) {
		return num;
	}
	return this._matches[cap][(-3 - num)];
};
System.Text.RegularExpressions.Match.prototype.MatchLength = function (cap) {
	var num = this._matches[cap][((this._matchcount[cap] * 2) - 1)];
	if (num >= 0) {
		return num;
	}
	return this._matches[cap][(-3 - num)];
};
System.Text.RegularExpressions.Match.prototype.Tidy = function (textpos) {
	var array = this._matches[0];
	this._index = array[0];
	this._length = array[1];
	this._textpos = textpos;
	this._capcount = this._matchcount[0];
	if (this._balancing) {
	__loop0__: 
		for (var i = 0; i < this._matchcount.length; ++i) {
			var num = (this._matchcount[i] * 2);
			var array2 = this._matches[i];
			var j = 0;
		__loop1__: 
			for (j = 0; !((j >= num) || (array2[j] < 0)); ++j) {
			}
			var num2 = j;
		__loop2__: 
			while (j < num) {
				if (array2[j] < 0) {
					--num2;
				} else {
					if (j !== num2) {
						array2[num2] = array2[j];
					}
					++num2;
				}
				++j;
			}
			this._matchcount[i] = Math.floor(num2 / 2);
		}
		this._balancing = false;
	}
};
JSIL.MakeProperty(System.Text.RegularExpressions.Match, "Empty", 
	System.Text.RegularExpressions.Match.get_Empty, null);
JSIL.MakeProperty(System.Text.RegularExpressions.Match.prototype, "Groups", 
	System.Text.RegularExpressions.Match.prototype.get_Groups, null);
System.Text.RegularExpressions.Match._empty = null;
System.Text.RegularExpressions.Match.prototype._groupcoll = null;
System.Text.RegularExpressions.Match.prototype._regex = null;
System.Text.RegularExpressions.Match.prototype._textbeg = 0;
System.Text.RegularExpressions.Match.prototype._textpos = 0;
System.Text.RegularExpressions.Match.prototype._textend = 0;
System.Text.RegularExpressions.Match.prototype._textstart = 0;
System.Text.RegularExpressions.Match.prototype._matches = null;
System.Text.RegularExpressions.Match.prototype._matchcount = null;
System.Text.RegularExpressions.Match.prototype._balancing = false;
System.Text.RegularExpressions.Match._cctor = function () {
	System.Text.RegularExpressions.Match._empty = new System.Text.RegularExpressions.Match(null, 1, System.String.Empty, 0, 0, 0);
};

$asm04.System.Text.RegularExpressions.MatchSparse.prototype._ctor = function (regex, caps, capcount, text, begpos, len, startpos) {
	System.Text.RegularExpressions.Match.prototype._ctor.call(
		this, regex, 
		capcount, 
		text, 
		begpos, 
		len, 
		startpos
	);
	this._caps = caps;
};
$asm04.System.Text.RegularExpressions.MatchSparse.prototype.get_Groups = function () {
	if (this._groupcoll === null) {
		this._groupcoll = new System.Text.RegularExpressions.GroupCollection(this, this._caps);
	}
	return this._groupcoll;
};
JSIL.MakeProperty($asm04.System.Text.RegularExpressions.MatchSparse.prototype, "Groups", 
	$asm04.System.Text.RegularExpressions.MatchSparse.prototype.get_Groups, null);
$asm04.System.Text.RegularExpressions.MatchSparse.prototype._caps = null;

System.Text.RegularExpressions.MatchCollection.prototype._ctor = function (regex, input, beginning, length, startat) {
	System.Object.prototype._ctor.call(this);
	if (!((startat >= 0) && (startat <= input.length))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["startat", $asm04.System.SR.GetString$2("BeginIndexNotNegative")]);
	}
	this._regex = regex;
	this._input = input;
	this._beginning = beginning;
	this._length = length;
	this._startat = startat;
	this._prevlen = -1;
	this._matches = new (System.Collections.Generic.List$b1.Of(System.Text.RegularExpressions.Match)) ();
	this._done = false;
};
System.Text.RegularExpressions.MatchCollection.prototype.GetMatch = function (i) {
	if (i < 0) {
		return null;
	}
	if (this._matches.Count > i) {
		return this._matches.get_Item(i);
	}
	if (this._done) {
		return null;
	}
__loop0__: 
	while (true) {
		var match = this._regex.Run(
			false, 
			this._prevlen, 
			this._input, 
			this._beginning, 
			this._length, 
			this._startat
		);
		if (!match.Success) {
			break __loop0__;
		}
		this._matches.Add(match);
		this._prevlen = match._length;
		this._startat = match._textpos;
		if (this._matches.Count > i) {
			return match;
		}
	}
	this._done = true;
	return null;
};
System.Text.RegularExpressions.MatchCollection.prototype.get_Count = function () {
	if (this._done) {
		return this._matches.Count;
	}
	this.GetMatch(System.Text.RegularExpressions.MatchCollection.infinite);
	return this._matches.Count;
};
System.Text.RegularExpressions.MatchCollection.prototype.get_SyncRoot = function () {
	return this;
};
System.Text.RegularExpressions.MatchCollection.prototype.get_IsSynchronized = function () {
	return false;
};
System.Text.RegularExpressions.MatchCollection.prototype.get_IsReadOnly = function () {
	return true;
};
System.Text.RegularExpressions.MatchCollection.prototype.get_Item = function (i) {
	var match = this.GetMatch(i);
	if (match === null) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["i"]);
	}
	return match;
};
System.Text.RegularExpressions.MatchCollection.prototype.CopyTo = function (array, arrayIndex) {
	if (!((array === null) || (array.Rank === 1))) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm04.System.SR.GetString$2("Arg_RankMultiDimNotSupported")]);
	}
	var count = this.Count;
	try {
		System.Array.Copy$1(
			this._matches.ToArray(), 
			0, 
			array, 
			arrayIndex, 
			count
		);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.ArrayTypeMismatchException)) {
			throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm04.System.SR.GetString$2("Arg_InvalidArrayType")]);
		} else {
			throw $exception;
		}
	}
};
System.Text.RegularExpressions.MatchCollection.prototype.GetEnumerator = function () {
	return new $asm04.System.Text.RegularExpressions.MatchEnumerator(this);
};
JSIL.MakeProperty(System.Text.RegularExpressions.MatchCollection.prototype, "Count", 
	System.Text.RegularExpressions.MatchCollection.prototype.get_Count, null);
JSIL.MakeProperty(System.Text.RegularExpressions.MatchCollection.prototype, "SyncRoot", 
	System.Text.RegularExpressions.MatchCollection.prototype.get_SyncRoot, null);
JSIL.MakeProperty(System.Text.RegularExpressions.MatchCollection.prototype, "IsSynchronized", 
	System.Text.RegularExpressions.MatchCollection.prototype.get_IsSynchronized, null);
JSIL.MakeProperty(System.Text.RegularExpressions.MatchCollection.prototype, "IsReadOnly", 
	System.Text.RegularExpressions.MatchCollection.prototype.get_IsReadOnly, null);
JSIL.MakeProperty(System.Text.RegularExpressions.MatchCollection.prototype, "Item", 
	System.Text.RegularExpressions.MatchCollection.prototype.get_Item, null);
System.Text.RegularExpressions.MatchCollection.prototype._regex = null;
System.Text.RegularExpressions.MatchCollection.prototype._matches = null;
System.Text.RegularExpressions.MatchCollection.prototype._done = false;
System.Text.RegularExpressions.MatchCollection.prototype._input = null;
System.Text.RegularExpressions.MatchCollection.prototype._beginning = 0;
System.Text.RegularExpressions.MatchCollection.prototype._length = 0;
System.Text.RegularExpressions.MatchCollection.prototype._startat = 0;
System.Text.RegularExpressions.MatchCollection.prototype._prevlen = 0;
System.Text.RegularExpressions.MatchCollection.infinite = 0;
System.Text.RegularExpressions.MatchCollection._cctor = function () {
	System.Text.RegularExpressions.MatchCollection.infinite = 2147483647;
};

$asm04.System.Text.RegularExpressions.MatchEnumerator.prototype._ctor = function (matchcoll) {
	System.Object.prototype._ctor.call(this);
	this._matchcoll = matchcoll;
};
$asm04.System.Text.RegularExpressions.MatchEnumerator.prototype.MoveNext = function () {
	if (this._done) {
		return false;
	}
	this._match = this._matchcoll.GetMatch(this._curindex++);
	if (this._match === null) {
		this._done = true;
		return false;
	}
	return true;
};
$asm04.System.Text.RegularExpressions.MatchEnumerator.prototype.get_Current = function () {
	if (this._match === null) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm04.System.SR.GetString$2("EnumNotStarted")]);
	}
	return this._match;
};
$asm04.System.Text.RegularExpressions.MatchEnumerator.prototype.Reset = function () {
	this._curindex = 0;
	this._done = false;
	this._match = null;
};
JSIL.MakeProperty($asm04.System.Text.RegularExpressions.MatchEnumerator.prototype, "Current", 
	$asm04.System.Text.RegularExpressions.MatchEnumerator.prototype.get_Current, null);
$asm04.System.Text.RegularExpressions.MatchEnumerator.prototype._matchcoll = null;
$asm04.System.Text.RegularExpressions.MatchEnumerator.prototype._match = null;
$asm04.System.Text.RegularExpressions.MatchEnumerator.prototype._curindex = 0;
$asm04.System.Text.RegularExpressions.MatchEnumerator.prototype._done = false;

$asm04.System.Text.RegularExpressions.RegexNode.prototype._ctor$0 = function (type, options) {
	System.Object.prototype._ctor.call(this);
	this._type = type;
	this._options = options;
};
$asm04.System.Text.RegularExpressions.RegexNode.prototype._ctor$1 = function (type, options, ch) {
	System.Object.prototype._ctor.call(this);
	this._type = type;
	this._options = options;
	this._ch = ch;
};
$asm04.System.Text.RegularExpressions.RegexNode.prototype._ctor$2 = function (type, options, str) {
	System.Object.prototype._ctor.call(this);
	this._type = type;
	this._options = options;
	this._str = str;
};
$asm04.System.Text.RegularExpressions.RegexNode.prototype._ctor$3 = function (type, options, m) {
	System.Object.prototype._ctor.call(this);
	this._type = type;
	this._options = options;
	this._m = m;
};
$asm04.System.Text.RegularExpressions.RegexNode.prototype._ctor$4 = function (type, options, m, n) {
	System.Object.prototype._ctor.call(this);
	this._type = type;
	this._options = options;
	this._m = m;
	this._n = n;
};
$asm04.System.Text.RegularExpressions.RegexNode.prototype.UseOptionR = function () {
	return ((this._options & System.Text.RegularExpressions.RegexOptions.RightToLeft) !== System.Text.RegularExpressions.RegexOptions.None);
};
$asm04.System.Text.RegularExpressions.RegexNode.prototype.ReverseLeft = function () {
	if (!(!this.UseOptionR() || 
			(this._type !== 25) || (this._children === null))) {
		this._children.Reverse$1(0, this._children.Count);
	}
	return this;
};
$asm04.System.Text.RegularExpressions.RegexNode.prototype.MakeRep = function (type, min, max) {
	this._type += (type - 9);
	this._m = min;
	this._n = max;
};
$asm04.System.Text.RegularExpressions.RegexNode.prototype.Reduce = function () {
	var num = this.Type();
	if (!((num === 5) || (num === 11))) {
		switch (num) {
			case 24: 
				var result = this.ReduceAlternation();
				return result;
			case 25: 
				result = this.ReduceConcatenation();
				return result;
			case 26: 
			case 27: 
				result = this.ReduceRep();
				return result;
			case 29: 
				result = this.ReduceGroup();
				return result;
		}
		result = this;
	} else {
		result = this.ReduceSet();
	}
	return result;
};
$asm04.System.Text.RegularExpressions.RegexNode.prototype.StripEnation = function (emptyType) {
	switch (this.ChildCount()) {
		case 0: 
			return JSIL.New($asm04.System.Text.RegularExpressions.RegexNode, "_ctor$0", [emptyType, this._options]);
		case 1: 
			return this.Child(0);
		default: 
			return this;
	}
};
$asm04.System.Text.RegularExpressions.RegexNode.prototype.ReduceGroup = function () {
__loop0__: 
	for (var regexNode = this; regexNode.Type() === 29; regexNode = regexNode.Child(0)) {
	}
	return regexNode;
};
$asm04.System.Text.RegularExpressions.RegexNode.prototype.ReduceRep = function () {
	var regexNode = this;
	var num = this.Type();
	var num2 = this._m;
	var num3 = this._n;
__loop0__: 
	while (regexNode.ChildCount() !== 0) {
		var regexNode2 = regexNode.Child(0);
		if (regexNode2.Type() !== num) {
			var num4 = regexNode2.Type();
			if (!((num4 >= 3) && 
					(num4 <= 5) && 
					(num === 26)) && ((num4 < 6) || 
					(num4 > 8) || 
					(num !== 27))) {
				break __loop0__;
			}
		}
		if (((regexNode._m === 0) && 
				(regexNode2._m > 1)) || (regexNode2._n < (regexNode2._m * 2))) {
			break __loop0__;
		}
		regexNode = regexNode2;
		if (regexNode._m > 0) {
			num2 = (regexNode._m = (Math.floor(2147483646 / regexNode._m) < num2) ? 2147483647 : (regexNode._m * num2));
		}
		if (regexNode._n > 0) {
			num3 = (regexNode._n = (Math.floor(2147483646 / regexNode._n) < num3) ? 2147483647 : (regexNode._n * num3));
		}
	}
	if (num2 !== 2147483647) {
		return regexNode;
	}
	return JSIL.New($asm04.System.Text.RegularExpressions.RegexNode, "_ctor$0", [22, this._options]);
};
$asm04.System.Text.RegularExpressions.RegexNode.prototype.ReduceSet = function () {
	if ($asm04.System.Text.RegularExpressions.RegexCharClass.IsEmpty(this._str)) {
		this._type = 22;
		this._str = null;
	} else if ($asm04.System.Text.RegularExpressions.RegexCharClass.IsSingleton(this._str)) {
		this._ch = $asm04.System.Text.RegularExpressions.RegexCharClass.SingletonChar(this._str);
		this._str = null;
		this._type += -2;
	} else if ($asm04.System.Text.RegularExpressions.RegexCharClass.IsSingletonInverse(this._str)) {
		this._ch = $asm04.System.Text.RegularExpressions.RegexCharClass.SingletonChar(this._str);
		this._str = null;
		this._type += -1;
	}
	return this;
};
$asm04.System.Text.RegularExpressions.RegexNode.prototype.ReduceAlternation = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				if (this._children === null) {
					return JSIL.New($asm04.System.Text.RegularExpressions.RegexNode, "_ctor$0", [22, this._options]);
				}
				var flag = false;
				var flag2 = false;
				var regexOptions = System.Text.RegularExpressions.RegexOptions.None;
				var i = 0;
				var num = 0;
			__loop0__: 
				while (i < this._children.Count) {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								var regexNode = this._children.get_Item(i);
								if (num < i) {
									this._children.set_Item(num, regexNode);
								}
								if (regexNode._type === 24) {
								__loop1__: 
									for (var j = 0; j < regexNode._children.Count; ++j) {
										regexNode._children.get_Item(j)._next = this;
									}
									this._children.InsertRange((i + 1), regexNode._children);
									--num;
								} else if (!((regexNode._type !== 11) && (regexNode._type !== 9))) {
									var regexOptions2 = (regexNode._options & (System.Text.RegularExpressions.RegexOptions.IgnoreCase | System.Text.RegularExpressions.RegexOptions.RightToLeft));
									if (regexNode._type === 11) {
										if (!(flag && 
												(regexOptions === regexOptions2) && 
												!flag2 && $asm04.System.Text.RegularExpressions.RegexCharClass.IsMergeable(regexNode._str))) {
											flag = true;
											flag2 = !$asm04.System.Text.RegularExpressions.RegexCharClass.IsMergeable(regexNode._str);
											regexOptions = regexOptions2;
											__label1__ = "IL_1C2";
											continue __step1__;
										}
									} else if (!(flag && 
											(regexOptions === regexOptions2) && !flag2)) {
										flag = true;
										flag2 = false;
										regexOptions = regexOptions2;
										__label1__ = "IL_1C2";
										continue __step1__;
									}
									--num;
									var regexNode2 = this._children.get_Item(num);
									if (regexNode2._type === 9) {
										var regexCharClass = JSIL.New($asm04.System.Text.RegularExpressions.RegexCharClass, "_ctor$0", []);
										regexCharClass.AddChar(regexNode2._ch);
									} else {
										regexCharClass = $asm04.System.Text.RegularExpressions.RegexCharClass.Parse(regexNode2._str);
									}
									if (regexNode._type === 9) {
										regexCharClass.AddChar(regexNode._ch);
									} else {
										var cc = $asm04.System.Text.RegularExpressions.RegexCharClass.Parse(regexNode._str);
										regexCharClass.AddCharClass(cc);
									}
									regexNode2._type = 11;
									regexNode2._str = regexCharClass.ToStringClass();
								} else if (regexNode._type === 22) {
									--num;
								} else {
									flag = false;
									flag2 = false;
								}
								__label1__ = "IL_1C2";
								continue __step1__;
								break;
							case "IL_1C2":
								++i;
								++num;
								break __step1__;
						}
					}
				}
				if (num < i) {
					this._children.RemoveRange(num, (i - num));
				}
				return this.StripEnation(22);
				break __step0__;
		}
	}
};
$asm04.System.Text.RegularExpressions.RegexNode.prototype.ReduceConcatenation = function () {
	if (this._children === null) {
		return JSIL.New($asm04.System.Text.RegularExpressions.RegexNode, "_ctor$0", [23, this._options]);
	}
	var flag = false;
	var regexOptions = System.Text.RegularExpressions.RegexOptions.None;
	var i = 0;
	var num = 0;
__loop0__: 
	while (i < this._children.Count) {
		var regexNode = this._children.get_Item(i);
		if (num < i) {
			this._children.set_Item(num, regexNode);
		}
		if (!((regexNode._type !== 25) || ((regexNode._options & System.Text.RegularExpressions.RegexOptions.RightToLeft) !== (this._options & System.Text.RegularExpressions.RegexOptions.RightToLeft)))) {
		__loop1__: 
			for (var j = 0; j < regexNode._children.Count; ++j) {
				regexNode._children.get_Item(j)._next = this;
			}
			this._children.InsertRange((i + 1), regexNode._children);
			--num;
		} else if (!((regexNode._type !== 12) && (regexNode._type !== 9))) {
			var regexOptions2 = (regexNode._options & (System.Text.RegularExpressions.RegexOptions.IgnoreCase | System.Text.RegularExpressions.RegexOptions.RightToLeft));
			if (!(flag && (regexOptions === regexOptions2))) {
				flag = true;
				regexOptions = regexOptions2;
			} else {
				var regexNode2 = this._children.get_Item(--num);
				if (regexNode2._type === 9) {
					regexNode2._type = 12;
					regexNode2._str = System.Convert.ToString$5(regexNode2._ch, System.Globalization.CultureInfo.InvariantCulture);
				}
				if (!(regexOptions2 & System.Text.RegularExpressions.RegexOptions.RightToLeft)) {
					if (regexNode._type === 9) {
						var expr_13C = regexNode2;
						expr_13C._str = ((expr_13C._str + regexNode._ch.toString()));
					} else {
						var expr_15C = regexNode2;
						expr_15C._str = ((expr_15C._str + regexNode._str));
					}
				} else if (regexNode._type === 9) {
					regexNode2._str = ((regexNode._ch.toString() + regexNode2._str));
				} else {
					regexNode2._str = ((regexNode._str + regexNode2._str));
				}
			}
		} else if (regexNode._type === 23) {
			--num;
		} else {
			flag = false;
		}
		++i;
		++num;
	}
	if (num < i) {
		this._children.RemoveRange(num, (i - num));
	}
	return this.StripEnation(23);
};
$asm04.System.Text.RegularExpressions.RegexNode.prototype.MakeQuantifier = function (lazy, min, max) {
	if (!((min !== 0) || (max !== 0))) {
		return JSIL.New($asm04.System.Text.RegularExpressions.RegexNode, "_ctor$0", [23, this._options]);
	}
	if (!((min !== 1) || (max !== 1))) {
		return this;
	}
	switch (this._type) {
		case 9: 
		case 10: 
		case 11: 
			this.MakeRep(lazy ? 6 : 3, min, max);
			return this;
		default: 
			var regexNode = JSIL.New($asm04.System.Text.RegularExpressions.RegexNode, "_ctor$4", [lazy ? 27 : 26, this._options, min, max]);
			regexNode.AddChild(this);
			return regexNode;
	}
};
$asm04.System.Text.RegularExpressions.RegexNode.prototype.AddChild = function (newChild) {
	if (this._children === null) {
		this._children = new (System.Collections.Generic.List$b1.Of($asm04.System.Text.RegularExpressions.RegexNode)) (4);
	}
	var regexNode = newChild.Reduce();
	this._children.Add(regexNode);
	regexNode._next = this;
};
$asm04.System.Text.RegularExpressions.RegexNode.prototype.Child = function (i) {
	return this._children.get_Item(i);
};
$asm04.System.Text.RegularExpressions.RegexNode.prototype.ChildCount = function () {
	if (this._children !== null) {
		return this._children.Count;
	}
	return 0;
};
$asm04.System.Text.RegularExpressions.RegexNode.prototype.Type = function () {
	return this._type;
};
JSIL.OverloadedMethod($asm04.System.Text.RegularExpressions.RegexNode.prototype, "_ctor", [
		["_ctor$0", [System.Int32, System.Text.RegularExpressions.RegexOptions]], 
		["_ctor$1", [System.Int32, System.Text.RegularExpressions.RegexOptions, System.Char]], 
		["_ctor$2", [System.Int32, System.Text.RegularExpressions.RegexOptions, System.String]], 
		["_ctor$3", [System.Int32, System.Text.RegularExpressions.RegexOptions, System.Int32]], 
		["_ctor$4", [System.Int32, System.Text.RegularExpressions.RegexOptions, System.Int32, System.Int32]]
	]);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexNode, "Oneloop", {
		"value": 3}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexNode, "Notoneloop", {
		"value": 4}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexNode, "Setloop", {
		"value": 5}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexNode, "Onelazy", {
		"value": 6}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexNode, "Notonelazy", {
		"value": 7}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexNode, "Setlazy", {
		"value": 8}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexNode, "One", {
		"value": 9}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexNode, "Notone", {
		"value": 10}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexNode, "Set", {
		"value": 11}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexNode, "Multi", {
		"value": 12}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexNode, "Ref", {
		"value": 13}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexNode, "Bol", {
		"value": 14}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexNode, "Eol", {
		"value": 15}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexNode, "Boundary", {
		"value": 16}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexNode, "Nonboundary", {
		"value": 17}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexNode, "ECMABoundary", {
		"value": 41}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexNode, "NonECMABoundary", {
		"value": 42}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexNode, "Beginning", {
		"value": 18}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexNode, "Start", {
		"value": 19}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexNode, "EndZ", {
		"value": 20}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexNode, "End", {
		"value": 21}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexNode, "Nothing", {
		"value": 22}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexNode, "Empty", {
		"value": 23}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexNode, "Alternate", {
		"value": 24}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexNode, "Concatenate", {
		"value": 25}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexNode, "Loop", {
		"value": 26}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexNode, "Lazyloop", {
		"value": 27}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexNode, "Capture", {
		"value": 28}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexNode, "Group", {
		"value": 29}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexNode, "Require", {
		"value": 30}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexNode, "Prevent", {
		"value": 31}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexNode, "Greedy", {
		"value": 32}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexNode, "Testref", {
		"value": 33}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexNode, "Testgroup", {
		"value": 34}
);
$asm04.System.Text.RegularExpressions.RegexNode.prototype._type = 0;
$asm04.System.Text.RegularExpressions.RegexNode.prototype._children = null;
$asm04.System.Text.RegularExpressions.RegexNode.prototype._str = null;
$asm04.System.Text.RegularExpressions.RegexNode.prototype._ch = 0;
$asm04.System.Text.RegularExpressions.RegexNode.prototype._m = 0;
$asm04.System.Text.RegularExpressions.RegexNode.prototype._n = 0;
$asm04.System.Text.RegularExpressions.RegexNode.prototype._options = 0;
$asm04.System.Text.RegularExpressions.RegexNode.prototype._next = null;

$asm04.System.Text.RegularExpressions.RegexParser.Parse = function (re, op) {
	var regexParser = new $asm04.System.Text.RegularExpressions.RegexParser((op & System.Text.RegularExpressions.RegexOptions.CultureInvariant) ? System.Globalization.CultureInfo.InvariantCulture : System.Globalization.CultureInfo.CurrentCulture);
	regexParser._options = op;
	regexParser.SetPattern(re);
	regexParser.CountCaptures();
	regexParser.Reset(op);
	var root = regexParser.ScanRegex();
	if (regexParser._capnamelist === null) {
		var capslist = null;
	} else {
		capslist = regexParser._capnamelist.ToArray();
	}
	return new $asm04.System.Text.RegularExpressions.RegexTree(root, regexParser._caps, regexParser._capnumlist, regexParser._captop, regexParser._capnames, capslist, op);
};
$asm04.System.Text.RegularExpressions.RegexParser.ParseReplacement = function (rep, caps, capsize, capnames, op) {
	var regexParser = new $asm04.System.Text.RegularExpressions.RegexParser((op & System.Text.RegularExpressions.RegexOptions.CultureInvariant) ? System.Globalization.CultureInfo.InvariantCulture : System.Globalization.CultureInfo.CurrentCulture);
	regexParser._options = op;
	regexParser.NoteCaptures(caps, capsize, capnames);
	regexParser.SetPattern(rep);
	var concat = regexParser.ScanReplacement();
	return new $asm04.System.Text.RegularExpressions.RegexReplacement(rep, concat, caps);
};
$asm04.System.Text.RegularExpressions.RegexParser.Escape = function (input) {
__loop0__: 
	for (var i = 0; i < input.length; ++i) {
		if ($asm04.System.Text.RegularExpressions.RegexParser.IsMetachar(input[i])) {
			var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
			var c = (input[i]);
			stringBuilder.Append$3(input, 0, i);
		__loop1__: 
			do {
				stringBuilder.Append$7("\\");
				switch (c) {
					case "\t": 
						c = "t";
						break;
					case "\n": 
						c = "n";
						break;
					case "\x0c": 
						c = "f";
						break;
					case "\r": 
						c = "r";
						break;
				}
				stringBuilder.Append$7(c);
				++i;
				var num = i;
			__loop2__: 
				while (i < input.length) {
					c = (input[i]);
					if ($asm04.System.Text.RegularExpressions.RegexParser.IsMetachar(c)) {
						break __loop2__;
					}
					++i;
				}
				stringBuilder.Append$3(input, num, (i - num));
			} while (i < input.length);
			return stringBuilder.toString();
		}
	}
	return input;
};
$asm04.System.Text.RegularExpressions.RegexParser.Unescape = function (input) {
__loop0__: 
	for (var i = 0; i < input.length; ++i) {
		if ((input[i]) === "\\") {
			var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
			var regexParser = new $asm04.System.Text.RegularExpressions.RegexParser(System.Globalization.CultureInfo.InvariantCulture);
			regexParser.SetPattern(input);
			stringBuilder.Append$3(input, 0, i);
		__loop1__: 
			do {
				++i;
				regexParser.Textto(i);
				if (i < input.length) {
					stringBuilder.Append$7(regexParser.ScanCharEscape());
				}
				i = regexParser.Textpos();
				var num = i;
			__loop2__: 
				while ((i < input.length) && ((input[i]) !== "\\")) {
					++i;
				}
				stringBuilder.Append$3(input, num, (i - num));
			} while (i < input.length);
			return stringBuilder.toString();
		}
	}
	return input;
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype._ctor = function (culture) {
	System.Object.prototype._ctor.call(this);
	this._culture = culture;
	this._optionsStack = new (System.Collections.Generic.List$b1.Of(System.Text.RegularExpressions.RegexOptions)) ();
	this._caps = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.Int32, System.Int32), "_ctor$0", []);
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.SetPattern = function (Re) {
	if (Re === null) {
		Re = System.String.Empty;
	}
	this._pattern = Re;
	this._currentPos = 0;
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.Reset = function (topopts) {
	this._currentPos = 0;
	this._autocap = 1;
	this._ignoreNextParen = false;
	if (this._optionsStack.Count > 0) {
		this._optionsStack.RemoveRange(0, (this._optionsStack.Count - 1));
	}
	this._options = topopts;
	this._stack = null;
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.ScanRegex = function () {
	var __label0__ = null;
__step0__: 
	while (true) {
		switch (__label0__) {
			case null:
				var openGroup = null;
				__label0__ = "__entry0__";
				continue __step0__;
				break;
			case "__entry0__":
				var c = "@";
				var flag = false;
				this.StartGroup(JSIL.New($asm04.System.Text.RegularExpressions.RegexNode, "_ctor$4", [28, this._options, 0, -1]));
				__label0__ = "IL_43F";
				continue __step0__;
				break;
			case "IL_43F":
			__loop0__: 
				while (this.CharsRight() > 0) {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								var flag2 = flag;
								flag = false;
								this.ScanBlank();
								var num = this.Textpos();
								if (this.UseOptionX()) {
								__loop2__: 
									while (this.CharsRight() > 0) {
										if ($asm04.System.Text.RegularExpressions.RegexParser.IsStopperX((c = this.RightChar$0()))) {
											if (c !== "{") {
												break __loop2__;
											}
											if (this.IsTrueQuantifier()) {
												break __loop2__;
											}
										}
										this.MoveRight$0();
									}
								} else {
								__loop1__: 
									while ((this.CharsRight() > 0) && (!$asm04.System.Text.RegularExpressions.RegexParser.IsSpecial((c = this.RightChar$0())) || 
											((c === "{") && 
												!this.IsTrueQuantifier()))) {
										this.MoveRight$0();
									}
								}
								var num2 = this.Textpos();
								this.ScanBlank();
								if (this.CharsRight() === 0) {
									c = "!";
								} else if ($asm04.System.Text.RegularExpressions.RegexParser.IsSpecial((c = this.RightChar$0()))) {
									flag = $asm04.System.Text.RegularExpressions.RegexParser.IsQuantifier(c);
									this.MoveRight$0();
								} else {
									c = " ";
								}
								if (num < num2) {
									var num3 = ((num2 - num) - flag ? 1 : 0);
									flag2 = false;
									if (num3 > 0) {
										this.AddConcatenate$0(num, num3, false);
									}
									if (flag) {
										this.AddUnitOne(this.CharAt((num2 - 1)));
									}
								}
								var c2 = c;
								if (c2 <= "?") {
									switch (c2) {
										case " ": 
											continue __step1__;
											;
										case "!": 
											__label0__ = "IL_44B";
											continue __step0__;
										case '"': 
										case "#": 
										case "%": 
										case "&": 
										case "'": 
										case ",": 
										case "-": 
											__label1__ = "IL_2C8";
											continue __step1__;
										case "$": 
											this.AddUnitType(this.UseOptionM() ? 15 : 20);
											break;
										case "(": 
											this.PushOptions();
											if ((openGroup = this.ScanGroupOpen()) === null) {
												this.PopKeepOptions();
												continue __step1__;
												;
											}
											this.PushGroup();
											this.StartGroup(openGroup);
											continue __step1__;
											;
										case ")": 
											if (this.EmptyStack()) {
												throw this.MakeException($asm04.System.SR.GetString$2("TooManyParens"));
											}
											this.AddGroup();
											this.PopGroup();
											this.PopOptions();
											if (this.Unit() === null) {
												continue __step1__;
												;
											}
											break;
										case "*": 
										case "+": 
											__label1__ = "IL_283";
											continue __step1__;
										case ".": 
											if (this.UseOptionS()) {
												this.AddUnitSet("\0\x01\0\0");
											} else {
												this.AddUnitNotone("\n");
											}
											break;
										default: 
											if (c2 !== "?") {
												__label1__ = "IL_2C8";
												continue __step1__;
											}
											__label1__ = "IL_283";
											continue __step1__;
									}
								} else {
									switch (c2) {
										case "[": 
											this.AddUnitSet(this.ScanCharClass$0(this.UseOptionI()).ToStringClass());
											break;
										case "\\": 
											this.AddUnitNode(this.ScanBackslash());
											break;
										case "]": 
											__label1__ = "IL_2C8";
											continue __step1__;
										case "^": 
											this.AddUnitType(this.UseOptionM() ? 14 : 18);
											break;
										default: 
											switch (c2) {
												case "{": 
													__label1__ = "IL_283";
													continue __step1__;
												case "|": 
													this.AddAlternate();
													continue __step1__;
													;
												default: 
													__label1__ = "IL_2C8";
													continue __step1__;
											}
											break;
									}
								}
								__label1__ = "IL_2D9";
								continue __step1__;
								break;
							case "IL_2D9":
								this.ScanBlank();
								if (!((this.CharsRight() !== 0) && (flag = this.IsTrueQuantifier()))) {
									this.AddConcatenate$1();
									continue __loop0__;
								}
								c = this.MoveRightGetChar();
							__loop3__: 
								while (this.Unit()) {
									var c3 = c;
									switch (c3) {
										case "*": 
											var num4 = 0;
											var num5 = 2147483647;
											break;
										case "+": 
											num4 = 1;
											num5 = 2147483647;
											break;
										default: 
											if (c3 !== "?") {
												if (c3 !== "{") {
													throw this.MakeException($asm04.System.SR.GetString$2("InternalError"));
												}
												num = this.Textpos();
												num4 = (num5 = this.ScanDecimal());
												if (!((num >= this.Textpos()) || 
														(this.CharsRight() <= 0) || (this.RightChar$0() !== ","))) {
													this.MoveRight$0();
													if (!((this.CharsRight() !== 0) && (this.RightChar$0() !== "}"))) {
														num5 = 2147483647;
													} else {
														num5 = this.ScanDecimal();
													}
												}
												if (!((num !== this.Textpos()) && 
														(this.CharsRight() !== 0) && (this.MoveRightGetChar() === "}"))) {
													this.AddConcatenate$1();
													this.Textto((num - 1));
													__label0__ = "IL_43F";
													continue __step0__;
												}
											} else {
												num4 = 0;
												num5 = 1;
											}
											break;
									}
									this.ScanBlank();
									if (!((this.CharsRight() !== 0) && (this.RightChar$0() === "?"))) {
										var lazy = false;
									} else {
										this.MoveRight$0();
										lazy = true;
									}
									if (num4 > num5) {
										throw this.MakeException($asm04.System.SR.GetString$2("IllegalRange"));
									}
									this.AddConcatenate$2(lazy, num4, num5);
								}
								continue __loop0__;
								__label1__ = "IL_283";
								continue __step1__;
								break;
							case "IL_283":
								if (this.Unit() === null) {
									throw this.MakeException(flag2 ? $asm04.System.SR.GetString$0("NestedQuantify", [c.toString()]) : $asm04.System.SR.GetString$2("QuantifyAfterNothing"));
								}
								this.MoveLeft();
								__label1__ = "IL_2D9";
								continue __step1__;
								__label1__ = "IL_2C8";
								continue __step1__;
								break;
							case "IL_2C8":
								throw this.MakeException($asm04.System.SR.GetString$2("InternalError"));
								break __step1__;
						}
					}
				}
				__label0__ = "IL_44B";
				continue __step0__;
				break;
			case "IL_44B":
				if (!this.EmptyStack()) {
					throw this.MakeException($asm04.System.SR.GetString$2("NotEnoughParens"));
				}
				this.AddGroup();
				return this.Unit();
				break __step0__;
		}
	}
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.ScanReplacement = function () {
	this._concatenation = JSIL.New($asm04.System.Text.RegularExpressions.RegexNode, "_ctor$0", [25, this._options]);
__loop0__: 
	while (true) {
		var num = this.CharsRight();
		if (num === 0) {
			break __loop0__;
		}
		var num2 = this.Textpos();
	__loop1__: 
		while ((num > 0) && (this.RightChar$0() !== "$")) {
			this.MoveRight$0();
			--num;
		}
		this.AddConcatenate$0(num2, (this.Textpos() - num2), true);
		if (num > 0) {
			if (this.MoveRightGetChar() === "$") {
				this.AddUnitNode(this.ScanDollar());
			}
			this.AddConcatenate$1();
		}
	}
	return this._concatenation;
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.ScanCharClass$0 = function (caseInsensitive) {
	return this.ScanCharClass$1(caseInsensitive, false);
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.ScanCharClass$1 = function (caseInsensitive, scanOnly) {
	var __label0__ = null;
__step0__: 
	while (true) {
		switch (__label0__) {
			case null:
				var c3 = 0;
				__label0__ = "__entry0__";
				continue __step0__;
				break;
			case "__entry0__":
				var c = "\0";
				var c2 = "\0";
				var flag = false;
				var flag2 = true;
				var flag3 = false;
				var regexCharClass = scanOnly ? null : JSIL.New($asm04.System.Text.RegularExpressions.RegexCharClass, "_ctor$0", []);
				if (!((this.CharsRight() <= 0) || (this.RightChar$0() !== "^"))) {
					this.MoveRight$0();
					if (!scanOnly) {
						regexCharClass.Negate = true;
					}
				}
			__loop0__: 
				while (this.CharsRight() > 0) {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								var flag4 = false;
								c = this.MoveRightGetChar();
								if (c === "]") {
									if (!flag2) {
										flag3 = true;
										break __loop0__;
									}
									__label1__ = "IL_29F";
									continue __step1__;
								} else {
									var __label2__ = "__entry2__";
								__step2__: 
									while (true) {
										switch (__label2__) {
											case "__entry2__":
												if (!((c !== "\\") || (this.CharsRight() <= 0))) {
													var __label3__ = "__entry3__";
												__step3__: 
													while (true) {
														switch (__label3__) {
															case "__entry3__":
																c = (c3 = this.MoveRightGetChar());
																if (c3 <= "S") {
																	if (c3 <= "D") {
																		if (c3 !== "-") {
																			if (c3 !== "D") {
																				__label3__ = "IL_238";
																				continue __step3__;
																			}
																		} else {
																			if (!scanOnly) {
																				regexCharClass.AddRange(c, c);
																				__label1__ = "IL_3BE";
																				continue __step1__;
																			}
																			__label1__ = "IL_3BE";
																			continue __step1__;
																		}
																	} else {
																		if (c3 === "P") {
																			__label3__ = "IL_1CB";
																			continue __step3__;
																		}
																		if (c3 !== "S") {
																			__label3__ = "IL_238";
																			continue __step3__;
																		}
																		__label3__ = "IL_13F";
																		continue __step3__;
																	}
																} else {
																	if (c3 <= "d") {
																		if (c3 !== "W") {
																			if (c3 !== "d") {
																				__label3__ = "IL_238";
																				continue __step3__;
																			}
																			__label3__ = "IL_F3";
																			continue __step3__;
																		}
																	} else {
																		if (c3 === "p") {
																			__label3__ = "IL_1CB";
																			continue __step3__;
																		}
																		if (c3 === "s") {
																			__label3__ = "IL_13F";
																			continue __step3__;
																		}
																		if (c3 !== "w") {
																			__label3__ = "IL_238";
																			continue __step3__;
																		}
																	}
																	if (scanOnly) {
																		__label1__ = "IL_3BE";
																		continue __step1__;
																	}
																	if (flag) {
																		throw this.MakeException($asm04.System.SR.GetString$0("BadClassInCharRange", [c.toString()]));
																	}
																	regexCharClass.AddWord(this.UseOptionE(), (c === "W"));
																	__label1__ = "IL_3BE";
																	continue __step1__;
																}
																__label3__ = "IL_F3";
																continue __step3__;
																break;
															case "IL_F3":
																if (scanOnly) {
																	__label1__ = "IL_3BE";
																	continue __step1__;
																}
																if (flag) {
																	throw this.MakeException($asm04.System.SR.GetString$0("BadClassInCharRange", [c.toString()]));
																}
																regexCharClass.AddDigit(this.UseOptionE(), (c === "D"), this._pattern);
																__label1__ = "IL_3BE";
																continue __step1__;
																__label3__ = "IL_13F";
																continue __step3__;
																break;
															case "IL_13F":
																if (scanOnly) {
																	__label1__ = "IL_3BE";
																	continue __step1__;
																}
																if (flag) {
																	throw this.MakeException($asm04.System.SR.GetString$0("BadClassInCharRange", [c.toString()]));
																}
																regexCharClass.AddSpace(this.UseOptionE(), (c === "S"));
																__label1__ = "IL_3BE";
																continue __step1__;
																__label3__ = "IL_1CB";
																continue __step3__;
																break;
															case "IL_1CB":
																if (scanOnly) {
																	this.ParseProperty();
																	__label1__ = "IL_3BE";
																	continue __step1__;
																}
																if (flag) {
																	throw this.MakeException($asm04.System.SR.GetString$0("BadClassInCharRange", [c.toString()]));
																}
																regexCharClass.AddCategoryFromName(this.ParseProperty(), (c !== "p"), caseInsensitive, this._pattern);
																__label1__ = "IL_3BE";
																continue __step1__;
																__label3__ = "IL_238";
																continue __step3__;
																break;
															case "IL_238":
																this.MoveLeft();
																c = this.ScanCharEscape();
																flag4 = true;
																__label1__ = "IL_29F";
																continue __step1__;
																break __step3__;
														}
													}
												}
												if ((c !== "[") || 
													(this.CharsRight() <= 0) || 
													(this.RightChar$0() !== ":") || flag) {
													__label1__ = "IL_29F";
													continue __step1__;
												}
												var pos = this.Textpos();
												this.MoveRight$0();
												this.ScanCapname();
												if (!((this.CharsRight() >= 2) && 
														(this.MoveRightGetChar() === ":") && (this.MoveRightGetChar() === "]"))) {
													this.Textto(pos);
													__label1__ = "IL_29F";
													continue __step1__;
												}
												__label1__ = "IL_29F";
												continue __step1__;
												break __step2__;
										}
									}
								}
								__label1__ = "IL_3BE";
								continue __step1__;
								break;
							case "IL_3BE":
								flag2 = false;
								continue __loop0__;
								__label1__ = "IL_29F";
								continue __step1__;
								break;
							case "IL_29F":
								if (flag) {
									flag = false;
									if (scanOnly) {
										__label1__ = "IL_3BE";
										continue __step1__;
									}
									if (!((c !== "[") || 
											flag4 || flag2)) {
										regexCharClass.AddChar(c2);
										regexCharClass.AddSubtraction(this.ScanCharClass$1(caseInsensitive, false));
										if (!((this.CharsRight() <= 0) || (this.RightChar$0() === "]"))) {
											throw this.MakeException($asm04.System.SR.GetString$2("SubtractionMustBeLast"));
										}
										__label1__ = "IL_3BE";
										continue __step1__;
									} else {
										if (c2 > c) {
											throw this.MakeException($asm04.System.SR.GetString$2("ReversedCharRange"));
										}
										regexCharClass.AddRange(c2, c);
										__label1__ = "IL_3BE";
										continue __step1__;
									}
								} else {
									if (!((this.CharsRight() < 2) || 
											(this.RightChar$0() !== "-") || (this.RightChar$1(1) === "]"))) {
										c2 = c;
										flag = true;
										this.MoveRight$0();
										__label1__ = "IL_3BE";
										continue __step1__;
									}
									if (!((this.CharsRight() < 1) || 
											(c !== "-") || 
											flag4 || 
											(this.RightChar$0() !== "[") || flag2)) {
										if (scanOnly) {
											this.MoveRight$1(1);
											this.ScanCharClass$1(caseInsensitive, true);
											__label1__ = "IL_3BE";
											continue __step1__;
										}
										this.MoveRight$1(1);
										regexCharClass.AddSubtraction(this.ScanCharClass$1(caseInsensitive, false));
										if (!((this.CharsRight() <= 0) || (this.RightChar$0() === "]"))) {
											throw this.MakeException($asm04.System.SR.GetString$2("SubtractionMustBeLast"));
										}
										__label1__ = "IL_3BE";
										continue __step1__;
									} else {
										if (!scanOnly) {
											regexCharClass.AddRange(c, c);
											__label1__ = "IL_3BE";
											continue __step1__;
										}
										__label1__ = "IL_3BE";
										continue __step1__;
									}
								}
								break __step1__;
						}
					}
				}
				if (!flag3) {
					throw this.MakeException($asm04.System.SR.GetString$2("UnterminatedBracket"));
				}
				if (!(scanOnly || !caseInsensitive)) {
					regexCharClass.AddLowercase(this._culture);
				}
				return regexCharClass;
				break __step0__;
		}
	}
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.ScanGroupOpen = function () {
	var __label0__ = null;
__step0__: 
	while (true) {
		switch (__label0__) {
			case null:
				var c5 = 0;
				__label0__ = "__entry0__";
				continue __step0__;
				break;
			case "__entry0__":
				var c = ">";
				if ((this.CharsRight() !== 0) && 
					(this.RightChar$0() === "?") && ((this.RightChar$0() !== "?") || 
						(this.CharsRight() <= 1) || 
						(this.RightChar$1(1) !== ")"))) {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								this.MoveRight$0();
								if (this.CharsRight() !== 0) {
									var __label2__ = "__entry2__";
								__step2__: 
									while (true) {
										switch (__label2__) {
											case "__entry2__":
												var c2 = this.MoveRightGetChar();
												if (c2 !== "!") {
													var __label3__ = "__entry3__";
												__step3__: 
													while (true) {
														switch (__label3__) {
															case "__entry3__":
																switch (c2) {
																	case "'": 
																		c = "'";
																		break;
																	case "(": 
																		var num = this.Textpos();
																		if (this.CharsRight() > 0) {
																			var c3 = this.RightChar$0();
																			if (!((c3 < "0") || (c3 > "9"))) {
																				var num2 = this.ScanDecimal();
																				if ((this.CharsRight() <= 0) || (this.MoveRightGetChar() !== ")")) {
																					throw this.MakeException($asm04.System.SR.GetString$0("MalformedReference", [(num2).toString()]));
																				}
																				if (this.IsCaptureSlot(num2)) {
																					return JSIL.New($asm04.System.Text.RegularExpressions.RegexNode, "_ctor$3", [33, this._options, num2]);
																				}
																				throw this.MakeException($asm04.System.SR.GetString$0("UndefinedReference", [(num2).toString()]));
																			} else if ($asm04.System.Text.RegularExpressions.RegexCharClass.IsWordChar(c3)) {
																				var capname = this.ScanCapname();
																				if (!(!this.IsCaptureName(capname) || 
																						(this.CharsRight() <= 0) || (this.MoveRightGetChar() !== ")"))) {
																					return JSIL.New($asm04.System.Text.RegularExpressions.RegexNode, "_ctor$3", [33, this._options, this.CaptureSlotFromName(capname)]);
																				}
																			}
																		}
																		var type = 34;
																		this.Textto((num - 1));
																		this._ignoreNextParen = true;
																		var num3 = this.CharsRight();
																		if ((num3 < 3) || (this.RightChar$1(1) !== "?")) {
																			__label2__ = "IL_552";
																			continue __step2__;
																		}
																		var c4 = this.RightChar$1(2);
																		if (c4 === "#") {
																			throw this.MakeException($asm04.System.SR.GetString$2("AlternationCantHaveComment"));
																		}
																		if (c4 === "'") {
																			throw this.MakeException($asm04.System.SR.GetString$2("AlternationCantCapture"));
																		}
																		if (!((num3 < 4) || 
																				(c4 !== "<") || 
																				(this.RightChar$1(3) === "!") || (this.RightChar$1(3) === "="))) {
																			throw this.MakeException($asm04.System.SR.GetString$2("AlternationCantCapture"));
																		}
																		__label2__ = "IL_552";
																		continue __step2__;
																	default: 
																		switch (c2) {
																			case ":": 
																				type = 29;
																				__label2__ = "IL_552";
																				continue __step2__;
																			case "<": 
																				__label3__ = "IL_113";
																				continue __step3__;
																			case "=": 
																				this._options = (this._options & (System.Text.RegularExpressions.RegexOptions.CultureInvariant | System.Text.RegularExpressions.RegexOptions.ECMAScript | System.Text.RegularExpressions.RegexOptions.ExplicitCapture | System.Text.RegularExpressions.RegexOptions.IgnoreCase | System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace | System.Text.RegularExpressions.RegexOptions.Multiline | System.Text.RegularExpressions.RegexOptions.Singleline));
																				type = 30;
																				__label2__ = "IL_552";
																				continue __step2__;
																			case ">": 
																				type = 32;
																				__label2__ = "IL_552";
																				continue __step2__;
																		}
																		this.MoveLeft();
																		type = 29;
																		this.ScanOptions();
																		if (this.CharsRight() === 0) {
																			__label1__ = "IL_55F";
																			continue __step1__;
																		}
																		if ((c3 = this.MoveRightGetChar()) === ")") {
																			return null;
																		}
																		if (c3 === ":") {
																			__label2__ = "IL_552";
																			continue __step2__;
																		}
																		__label1__ = "IL_55F";
																		continue __step1__;
																}
																__label3__ = "IL_113";
																continue __step3__;
																break;
															case "IL_113":
																if (this.CharsRight() === 0) {
																	__label1__ = "IL_55F";
																	continue __step1__;
																}
																c3 = (c5 = this.MoveRightGetChar());
																if (c5 !== "!") {
																	if (c5 === "=") {
																		if (c === "'") {
																			__label1__ = "IL_55F";
																			continue __step1__;
																		}
																		this._options = (this._options | System.Text.RegularExpressions.RegexOptions.RightToLeft);
																		type = 30;
																	} else {
																		this.MoveLeft();
																		var num4 = -1;
																		var num5 = -1;
																		var flag = false;
																		if (!((c3 < "0") || (c3 > "9"))) {
																			num4 = this.ScanDecimal();
																			if (!this.IsCaptureSlot(num4)) {
																				num4 = -1;
																			}
																			if (!((this.CharsRight() <= 0) || 
																					(this.RightChar$0() === c) || (this.RightChar$0() === "-"))) {
																				throw this.MakeException($asm04.System.SR.GetString$2("InvalidGroupName"));
																			}
																			if (num4 === 0) {
																				throw this.MakeException($asm04.System.SR.GetString$2("CapnumNotZero"));
																			}
																		} else if ($asm04.System.Text.RegularExpressions.RegexCharClass.IsWordChar(c3)) {
																			var capname2 = this.ScanCapname();
																			if (this.IsCaptureName(capname2)) {
																				num4 = this.CaptureSlotFromName(capname2);
																			}
																			if (!((this.CharsRight() <= 0) || 
																					(this.RightChar$0() === c) || (this.RightChar$0() === "-"))) {
																				throw this.MakeException($asm04.System.SR.GetString$2("InvalidGroupName"));
																			}
																		} else {
																			if (c3 !== "-") {
																				throw this.MakeException($asm04.System.SR.GetString$2("InvalidGroupName"));
																			}
																			flag = true;
																		}
																		if (!(((num4 === -1) && 
																					!flag) || 
																				(this.CharsRight() <= 0) || (this.RightChar$0() !== "-"))) {
																			this.MoveRight$0();
																			c3 = this.RightChar$0();
																			if (!((c3 < "0") || (c3 > "9"))) {
																				num5 = this.ScanDecimal();
																				if (!this.IsCaptureSlot(num5)) {
																					throw this.MakeException($asm04.System.SR.GetString$0("UndefinedBackref", [num5]));
																				}
																				if (!((this.CharsRight() <= 0) || (this.RightChar$0() === c))) {
																					throw this.MakeException($asm04.System.SR.GetString$2("InvalidGroupName"));
																				}
																			} else {
																				if (!$asm04.System.Text.RegularExpressions.RegexCharClass.IsWordChar(c3)) {
																					throw this.MakeException($asm04.System.SR.GetString$2("InvalidGroupName"));
																				}
																				var text = this.ScanCapname();
																				if (!this.IsCaptureName(text)) {
																					throw this.MakeException($asm04.System.SR.GetString$0("UndefinedNameRef", [text]));
																				}
																				num5 = this.CaptureSlotFromName(text);
																				if (!((this.CharsRight() <= 0) || (this.RightChar$0() === c))) {
																					throw this.MakeException($asm04.System.SR.GetString$2("InvalidGroupName"));
																				}
																			}
																		}
																		if (!(((num4 === -1) && 
																					(num5 === -1)) || 
																				(this.CharsRight() <= 0) || (this.MoveRightGetChar() !== c))) {
																			return JSIL.New($asm04.System.Text.RegularExpressions.RegexNode, "_ctor$4", [28, this._options, num4, num5]);
																		}
																		__label1__ = "IL_55F";
																		continue __step1__;
																	}
																} else {
																	if (c === "'") {
																		__label1__ = "IL_55F";
																		continue __step1__;
																	}
																	this._options = (this._options | System.Text.RegularExpressions.RegexOptions.RightToLeft);
																	type = 31;
																}
																break __step3__;
														}
													}
												} else {
													this._options = (this._options & (System.Text.RegularExpressions.RegexOptions.CultureInvariant | System.Text.RegularExpressions.RegexOptions.ECMAScript | System.Text.RegularExpressions.RegexOptions.ExplicitCapture | System.Text.RegularExpressions.RegexOptions.IgnoreCase | System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace | System.Text.RegularExpressions.RegexOptions.Multiline | System.Text.RegularExpressions.RegexOptions.Singleline));
													type = 31;
												}
												__label2__ = "IL_552";
												continue __step2__;
												break;
											case "IL_552":
												return JSIL.New($asm04.System.Text.RegularExpressions.RegexNode, "_ctor$0", [type, this._options]);
												break __step2__;
										}
									}
								}
								__label1__ = "IL_55F";
								continue __step1__;
								break;
							case "IL_55F":
								throw this.MakeException($asm04.System.SR.GetString$2("UnrecognizedGrouping"));
								break __step1__;
						}
					}
				}
				if (!(!this.UseOptionN() && !this._ignoreNextParen)) {
					this._ignoreNextParen = false;
					return JSIL.New($asm04.System.Text.RegularExpressions.RegexNode, "_ctor$0", [29, this._options]);
				}
				return JSIL.New($asm04.System.Text.RegularExpressions.RegexNode, "_ctor$4", [28, this._options, this._autocap++, -1]);
				break __step0__;
		}
	}
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.ScanBlank = function () {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				if (this.UseOptionX()) {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
							__loop0__: 
								while (true) {
									if (!((this.CharsRight() > 0) && $asm04.System.Text.RegularExpressions.RegexParser.IsSpace(this.RightChar$0()))) {
										if (this.CharsRight() === 0) {
											break __loop0__;
										}
										if (this.RightChar$0() === "#") {
										__loop2__: 
											while (this.CharsRight() > 0) {
												if (this.RightChar$0() === "\n") {
													break __loop2__;
												}
												this.MoveRight$0();
											}
										} else {
											if ((this.CharsRight() < 3) || 
												(this.RightChar$1(2) !== "#") || 
												(this.RightChar$1(1) !== "?") || (this.RightChar$0() !== "(")) {
												return;
											}
										__loop1__: 
											while ((this.CharsRight() > 0) && (this.RightChar$0() !== ")")) {
												this.MoveRight$0();
											}
											if (this.CharsRight() === 0) {
												__label1__ = "Block_12";
												continue __step1__;
											}
											this.MoveRight$0();
										}
									} else {
										this.MoveRight$0();
									}
								}
								return;
								__label1__ = "Block_12";
								continue __step1__;
								break;
							case "Block_12":
								throw this.MakeException($asm04.System.SR.GetString$2("UnterminatedComment"));
								break __step1__;
						}
					}
				}
			__loop3__: 
				while ((this.CharsRight() >= 3) && 
					(this.RightChar$1(2) === "#") && 
					(this.RightChar$1(1) === "?") && (this.RightChar$0() === "(")) {
				__loop4__: 
					while ((this.CharsRight() > 0) && (this.RightChar$0() !== ")")) {
						this.MoveRight$0();
					}
					if (this.CharsRight() === 0) {
						throw this.MakeException($asm04.System.SR.GetString$2("UnterminatedComment"));
					}
					this.MoveRight$0();
				}
				break __step0__;
		}
	}
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.ScanBackslash = function () {
	var __label0__ = null;
__step0__: 
	while (true) {
		switch (__label0__) {
			case null:
				var c2 = 0;
				__label0__ = "__entry0__";
				continue __step0__;
				break;
			case "__entry0__":
				if (this.CharsRight() === 0) {
					throw this.MakeException($asm04.System.SR.GetString$2("IllegalEndEscape"));
				}
				var c = (c2 = this.RightChar$0());
				if (c2 <= "Z") {
					if (c2 <= "P") {
						switch (c2) {
							case "A": 
							case "B": 
							case "G": 
								break;
							case "C": 
							case "E": 
							case "F": 
								__label0__ = "IL_259";
								continue __step0__;
							case "D": 
								this.MoveRight$0();
								if (this.UseOptionE()) {
									return JSIL.New($asm04.System.Text.RegularExpressions.RegexNode, "_ctor$2", [11, this._options, "\x01\x02\00:"]);
								}
								return JSIL.New($asm04.System.Text.RegularExpressions.RegexNode, "_ctor$2", [11, this._options, $asm04.System.Text.RegularExpressions.RegexCharClass.NotDigitClass]);
							default: 
								if (c2 !== "P") {
									__label0__ = "IL_259";
									continue __step0__;
								}
								__label0__ = "IL_205";
								continue __step0__;
						}
					} else if (c2 !== "S") {
						if (c2 !== "W") {
							if (c2 !== "Z") {
								__label0__ = "IL_259";
								continue __step0__;
							}
						} else {
							this.MoveRight$0();
							if (this.UseOptionE()) {
								return JSIL.New($asm04.System.Text.RegularExpressions.RegexNode, "_ctor$2", [11, this._options, "\x01\n\00:A[_`a{\u0130\u0131"]);
							}
							return JSIL.New($asm04.System.Text.RegularExpressions.RegexNode, "_ctor$2", [11, this._options, $asm04.System.Text.RegularExpressions.RegexCharClass.NotWordClass]);
						}
					} else {
						this.MoveRight$0();
						if (this.UseOptionE()) {
							return JSIL.New($asm04.System.Text.RegularExpressions.RegexNode, "_ctor$2", [11, this._options, "\x01\x04\0\t\x0e !"]);
						}
						return JSIL.New($asm04.System.Text.RegularExpressions.RegexNode, "_ctor$2", [11, this._options, $asm04.System.Text.RegularExpressions.RegexCharClass.NotSpaceClass]);
					}
				} else if (c2 <= "p") {
					switch (c2) {
						case "b": 
							break;
						case "c": 
							__label0__ = "IL_259";
							continue __step0__;
						case "d": 
							this.MoveRight$0();
							if (this.UseOptionE()) {
								return JSIL.New($asm04.System.Text.RegularExpressions.RegexNode, "_ctor$2", [11, this._options, "\0\x02\00:"]);
							}
							return JSIL.New($asm04.System.Text.RegularExpressions.RegexNode, "_ctor$2", [11, this._options, $asm04.System.Text.RegularExpressions.RegexCharClass.DigitClass]);
						default: 
							if (c2 !== "p") {
								__label0__ = "IL_259";
								continue __step0__;
							}
							__label0__ = "IL_205";
							continue __step0__;
					}
				} else if (c2 !== "s") {
					if (c2 !== "w") {
						if (c2 !== "z") {
							__label0__ = "IL_259";
							continue __step0__;
						}
					} else {
						this.MoveRight$0();
						if (this.UseOptionE()) {
							return JSIL.New($asm04.System.Text.RegularExpressions.RegexNode, "_ctor$2", [11, this._options, "\0\n\00:A[_`a{\u0130\u0131"]);
						}
						return JSIL.New($asm04.System.Text.RegularExpressions.RegexNode, "_ctor$2", [11, this._options, $asm04.System.Text.RegularExpressions.RegexCharClass.WordClass]);
					}
				} else {
					this.MoveRight$0();
					if (this.UseOptionE()) {
						return JSIL.New($asm04.System.Text.RegularExpressions.RegexNode, "_ctor$2", [11, this._options, "\0\x04\0\t\x0e !"]);
					}
					return JSIL.New($asm04.System.Text.RegularExpressions.RegexNode, "_ctor$2", [11, this._options, $asm04.System.Text.RegularExpressions.RegexCharClass.SpaceClass]);
				}
				this.MoveRight$0();
				return JSIL.New($asm04.System.Text.RegularExpressions.RegexNode, "_ctor$0", [this.TypeFromCode(c), this._options]);
				__label0__ = "IL_205";
				continue __step0__;
				break;
			case "IL_205":
				this.MoveRight$0();
				var regexCharClass = JSIL.New($asm04.System.Text.RegularExpressions.RegexCharClass, "_ctor$0", []);
				regexCharClass.AddCategoryFromName(this.ParseProperty(), (c !== "p"), this.UseOptionI(), this._pattern);
				if (this.UseOptionI()) {
					regexCharClass.AddLowercase(this._culture);
				}
				return JSIL.New($asm04.System.Text.RegularExpressions.RegexNode, "_ctor$2", [11, this._options, regexCharClass.ToStringClass()]);
				__label0__ = "IL_259";
				continue __step0__;
				break;
			case "IL_259":
				return this.ScanBasicBackslash();
				break __step0__;
		}
	}
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.ScanBasicBackslash = function () {
	if (this.CharsRight() === 0) {
		throw this.MakeException($asm04.System.SR.GetString$2("IllegalEndEscape"));
	}
	var flag = false;
	var c = "\0";
	var pos = this.Textpos();
	var c2 = this.RightChar$0();
	if (c2 === "k") {
		if (this.CharsRight() >= 2) {
			this.MoveRight$0();
			c2 = this.MoveRightGetChar();
			if (!((c2 !== "<") && (c2 !== "'"))) {
				flag = true;
				c = (c2 === "'") ? "'" : ">";
			}
		}
		if (!(flag && (this.CharsRight() > 0))) {
			throw this.MakeException($asm04.System.SR.GetString$2("MalformedNameRef"));
		}
		c2 = this.RightChar$0();
	} else if (!(((c2 !== "<") && 
				(c2 !== "'")) || (this.CharsRight() <= 1))) {
		flag = true;
		c = (c2 === "'") ? "'" : ">";
		this.MoveRight$0();
		c2 = this.RightChar$0();
	}
	if (!(!flag || 
			(c2 < "0") || (c2 > "9"))) {
		var num = this.ScanDecimal();
		if (!((this.CharsRight() <= 0) || (this.MoveRightGetChar() !== c))) {
			if (this.IsCaptureSlot(num)) {
				return JSIL.New($asm04.System.Text.RegularExpressions.RegexNode, "_ctor$3", [13, this._options, num]);
			}
			throw this.MakeException($asm04.System.SR.GetString$0("UndefinedBackref", [(num).toString()]));
		}
	} else if (!(flag || 
			(c2 < "1") || (c2 > "9"))) {
		if (this.UseOptionE()) {
			var num2 = -1;
			var i = (c2 - "0");
			var num3 = (this.Textpos() - 1);
		__loop0__: 
			while (i <= this._captop) {
				if (!(!this.IsCaptureSlot(i) || ((this._caps !== null) && 
							(this._caps.get_Item(i) >= num3)))) {
					num2 = i;
				}
				this.MoveRight$0();
				if ((this.CharsRight() === 0) || 
					((c2 = this.RightChar$0()) < "0") || (c2 > "9")) {
					break __loop0__;
				}
				i = ((i * 10) + (c2 - "0"));
			}
			if (num2 >= 0) {
				return JSIL.New($asm04.System.Text.RegularExpressions.RegexNode, "_ctor$3", [13, this._options, num2]);
			}
		} else {
			var num4 = this.ScanDecimal();
			if (this.IsCaptureSlot(num4)) {
				return JSIL.New($asm04.System.Text.RegularExpressions.RegexNode, "_ctor$3", [13, this._options, num4]);
			}
			if (num4 <= 9) {
				throw this.MakeException($asm04.System.SR.GetString$0("UndefinedBackref", [(num4).toString()]));
			}
		}
	} else if (!(!flag || !$asm04.System.Text.RegularExpressions.RegexCharClass.IsWordChar(c2))) {
		var text = this.ScanCapname();
		if (!((this.CharsRight() <= 0) || (this.MoveRightGetChar() !== c))) {
			if (this.IsCaptureName(text)) {
				return JSIL.New($asm04.System.Text.RegularExpressions.RegexNode, "_ctor$3", [13, this._options, this.CaptureSlotFromName(text)]);
			}
			throw this.MakeException($asm04.System.SR.GetString$0("UndefinedNameRef", [text]));
		}
	}
	this.Textto(pos);
	c2 = this.ScanCharEscape();
	if (this.UseOptionI()) {
		c2 = System.Char.ToLower$0(c2, this._culture);
	}
	return JSIL.New($asm04.System.Text.RegularExpressions.RegexNode, "_ctor$1", [9, this._options, c2]);
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.ScanDollar = function () {
	if (this.CharsRight() === 0) {
		return JSIL.New($asm04.System.Text.RegularExpressions.RegexNode, "_ctor$1", [9, this._options, "$"]);
	}
	var c = this.RightChar$0();
	var num = this.Textpos();
	var pos = num;
	if (!((c !== "{") || (this.CharsRight() <= 1))) {
		var flag = true;
		this.MoveRight$0();
		c = this.RightChar$0();
	} else {
		flag = false;
	}
	if (!((c < "0") || (c > "9"))) {
		if (!(flag || !this.UseOptionE())) {
			var num2 = -1;
			var num3 = (c - "0");
			this.MoveRight$0();
			if (this.IsCaptureSlot(num3)) {
				num2 = num3;
				pos = this.Textpos();
			}
		__loop0__: 
			while ((this.CharsRight() > 0) && 
				((c = this.RightChar$0()) >= "0") && (c <= "9")) {
				var num4 = (c - "0");
				if (!((num3 <= 214748364) && ((num3 !== 214748364) || 
							(num4 <= 7)))) {
					throw this.MakeException($asm04.System.SR.GetString$2("CaptureGroupOutOfRange"));
				}
				num3 = ((num3 * 10) + num4);
				this.MoveRight$0();
				if (this.IsCaptureSlot(num3)) {
					num2 = num3;
					pos = this.Textpos();
				}
			}
			this.Textto(pos);
			if (num2 >= 0) {
				return JSIL.New($asm04.System.Text.RegularExpressions.RegexNode, "_ctor$3", [13, this._options, num2]);
			}
		} else {
			var num5 = this.ScanDecimal();
			if (!((flag && 
						((this.CharsRight() <= 0) || 
							(this.MoveRightGetChar() !== "}"))) || !this.IsCaptureSlot(num5))) {
				return JSIL.New($asm04.System.Text.RegularExpressions.RegexNode, "_ctor$3", [13, this._options, num5]);
			}
		}
	} else if (!(!flag || !$asm04.System.Text.RegularExpressions.RegexCharClass.IsWordChar(c))) {
		var capname = this.ScanCapname();
		if (!((this.CharsRight() <= 0) || 
				(this.MoveRightGetChar() !== "}") || !this.IsCaptureName(capname))) {
			return JSIL.New($asm04.System.Text.RegularExpressions.RegexNode, "_ctor$3", [13, this._options, this.CaptureSlotFromName(capname)]);
		}
	} else if (!flag) {
		var num6 = 1;
		var c2 = c;
		switch (c2) {
			case "$": 
				this.MoveRight$0();
				return JSIL.New($asm04.System.Text.RegularExpressions.RegexNode, "_ctor$1", [9, this._options, "$"]);
			case "%": 
				break;
			case "&": 
				num6 = 0;
				break;
			case "'": 
				num6 = -2;
				break;
			default: 
				if (c2 !== "+") {
					switch (c2) {
						case "_": 
							num6 = -4;
							break;
						case "`": 
							num6 = -1;
							break;
					}
				} else {
					num6 = -3;
				}
				break;
		}
		if (num6 !== 1) {
			this.MoveRight$0();
			return JSIL.New($asm04.System.Text.RegularExpressions.RegexNode, "_ctor$3", [13, this._options, num6]);
		}
	}
	this.Textto(num);
	return JSIL.New($asm04.System.Text.RegularExpressions.RegexNode, "_ctor$1", [9, this._options, "$"]);
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.ScanCapname = function () {
	var num = this.Textpos();
__loop0__: 
	while (this.CharsRight() > 0) {
		if (!$asm04.System.Text.RegularExpressions.RegexCharClass.IsWordChar(this.MoveRightGetChar())) {
			this.MoveLeft();
			break __loop0__;
		}
	}
	return this._pattern.Substring$1(num, (this.Textpos() - num));
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.ScanOctal = function () {
	var num3 = 0;
	var num = 3;
	if (num > this.CharsRight()) {
		num = this.CharsRight();
	}
	var num2 = 0;
__loop0__: 
	while ((num > 0) && ((num3 = (this.RightChar$0() - "0")) <= 7)) {
		this.MoveRight$0();
		num2 *= 8;
		num2 += num3;
		if (this.UseOptionE() && (num2 >= 32)) {
			break __loop0__;
		}
		--num;
	}
	num2 = (num2 & 255);
	return String.fromCharCode(num2);
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.ScanDecimal = function () {
	var num2 = 0;
	var num = 0;
__loop0__: 
	while ((this.CharsRight() > 0) && ((num2 = (this.RightChar$0() - "0")) <= 9)) {
		this.MoveRight$0();
		if (!((num <= 214748364) && ((num !== 214748364) || 
					(num2 <= 7)))) {
			throw this.MakeException($asm04.System.SR.GetString$2("CaptureGroupOutOfRange"));
		}
		num *= 10;
		num += num2;
	}
	return num;
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.ScanHex = function (c) {
	var num2 = 0;
	var num = 0;
	if (this.CharsRight() >= c) {
	__loop0__: 
		for (; (c > 0) && ((num2 = $asm04.System.Text.RegularExpressions.RegexParser.HexDigit(this.MoveRightGetChar())) >= 0); --c) {
			num *= 16;
			num += num2;
		}
	}
	if (c > 0) {
		throw this.MakeException($asm04.System.SR.GetString$2("TooFewHex"));
	}
	return String.fromCharCode(num);
};
$asm04.System.Text.RegularExpressions.RegexParser.HexDigit = function (ch) {
	var num = 0;
	if ((num = (ch - "0")) <= 9) {
		return num;
	}
	if ((num = (ch - "a")) <= 5) {
		return (num + 10);
	}
	if ((num = (ch - "A")) <= 5) {
		return (num + 10);
	}
	return -1;
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.ScanControl = function () {
	if (this.CharsRight() <= 0) {
		throw this.MakeException($asm04.System.SR.GetString$2("MissingControl"));
	}
	var c = this.MoveRightGetChar();
	if (!((c < "a") || (c > "z"))) {
		c -= " ";
	}
	if ((c -= "@") < " ") {
		return c;
	}
	throw this.MakeException($asm04.System.SR.GetString$2("UnrecognizedControl"));
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.IsOnlyTopOption = function (option) {
	return ((option === System.Text.RegularExpressions.RegexOptions.RightToLeft) || 
		(option === System.Text.RegularExpressions.RegexOptions.CultureInvariant) || (option === System.Text.RegularExpressions.RegexOptions.ECMAScript));
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.ScanOptions = function () {
	var flag = false;
__loop0__: 
	while (this.CharsRight() > 0) {
		var c = this.RightChar$0();
		if (c === "-") {
			flag = true;
		} else if (c === "+") {
			flag = false;
		} else {
			var regexOptions = $asm04.System.Text.RegularExpressions.RegexParser.OptionFromCode(c);
			if (!(JSIL.Cast(regexOptions, System.Boolean) && !this.IsOnlyTopOption(regexOptions))) {
				return;
			}
			if (flag) {
				this._options = (this._options & ~regexOptions);
			} else {
				this._options = (this._options | regexOptions);
			}
		}
		this.MoveRight$0();
	}
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.ScanCharEscape = function () {
	var c = this.MoveRightGetChar();
	if (!((c < "0") || (c > "7"))) {
		this.MoveLeft();
		return this.ScanOctal();
	}
	var c2 = c;
	switch (c2) {
		case "a": 
			return "\x07";
		case "b": 
			return "\x08";
		case "c": 
			return this.ScanControl();
		case "d": 
			break;
		case "e": 
			return "\x1b";
		case "f": 
			return "\x0c";
		default: 
			switch (c2) {
				case "n": 
					return "\n";
				case "r": 
					return "\r";
				case "t": 
					return "\t";
				case "u": 
					return this.ScanHex(4);
				case "v": 
					return "\x0b";
				case "x": 
					return this.ScanHex(2);
			}
			break;
	}
	if (!(this.UseOptionE() || !$asm04.System.Text.RegularExpressions.RegexCharClass.IsWordChar(c))) {
		throw this.MakeException($asm04.System.SR.GetString$0("UnrecognizedEscape", [c.toString()]));
	}
	return c;
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.ParseProperty = function () {
	if (this.CharsRight() < 3) {
		throw this.MakeException($asm04.System.SR.GetString$2("IncompleteSlashP"));
	}
	var c = this.MoveRightGetChar();
	if (c !== "{") {
		throw this.MakeException($asm04.System.SR.GetString$2("MalformedSlashP"));
	}
	var num = this.Textpos();
__loop0__: 
	while (this.CharsRight() > 0) {
		c = this.MoveRightGetChar();
		if (!($asm04.System.Text.RegularExpressions.RegexCharClass.IsWordChar(c) || (c === "-"))) {
			this.MoveLeft();
			break __loop0__;
		}
	}
	var result = this._pattern.Substring$1(num, (this.Textpos() - num));
	if (!((this.CharsRight() !== 0) && (this.MoveRightGetChar() === "}"))) {
		throw this.MakeException($asm04.System.SR.GetString$2("IncompleteSlashP"));
	}
	return result;
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.TypeFromCode = function (ch) {
	if (ch <= "G") {
		switch (ch) {
			case "A": 
				return 18;
			case "B": 
				if (!this.UseOptionE()) {
					return 17;
				}
				return 42;
			default: 
				if (ch === "G") {
					return 19;
				}
				break;
		}
	} else {
		if (ch === "Z") {
			return 20;
		}
		if (ch !== "b") {
			if (ch === "z") {
				return 21;
			}
		} else {
			if (!this.UseOptionE()) {
				return 16;
			}
			return 41;
		}
	}
	return 22;
};
$asm04.System.Text.RegularExpressions.RegexParser.OptionFromCode = function (ch) {
	if (!((ch < "A") || (ch > "Z"))) {
		ch += " ";
	}
	var c = ch;
	if (c <= "i") {
		if (c === "e") {
			return System.Text.RegularExpressions.RegexOptions.ECMAScript;
		}
		if (c === "i") {
			return System.Text.RegularExpressions.RegexOptions.IgnoreCase;
		}
	} else {
		switch (c) {
			case "m": 
				return System.Text.RegularExpressions.RegexOptions.Multiline;
			case "n": 
				return System.Text.RegularExpressions.RegexOptions.ExplicitCapture;
			case "o": 
			case "p": 
			case "q": 
				break;
			case "r": 
				return System.Text.RegularExpressions.RegexOptions.RightToLeft;
			case "s": 
				return System.Text.RegularExpressions.RegexOptions.Singleline;
			default: 
				if (c === "x") {
					return System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace;
				}
				break;
		}
	}
	return System.Text.RegularExpressions.RegexOptions.None;
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.CountCaptures = function () {
	this.NoteCaptureSlot(0, 0);
	this._autocap = 1;
__loop0__: 
	while (this.CharsRight() > 0) {
		var pos = this.Textpos();
		var c = this.MoveRightGetChar();
		var c2 = c;
		if (c2 !== "#") {
			switch (c2) {
				case "(": 
					if (!((this.CharsRight() < 2) || 
							(this.RightChar$1(1) !== "#") || (this.RightChar$0() !== "?"))) {
						this.MoveLeft();
						this.ScanBlank();
					} else {
						this.PushOptions();
						if (!((this.CharsRight() <= 0) || (this.RightChar$0() !== "?"))) {
							this.MoveRight$0();
							if (!((this.CharsRight() <= 1) || ((this.RightChar$0() !== "<") && 
										(this.RightChar$0() !== "'")))) {
								this.MoveRight$0();
								c = this.RightChar$0();
								if (!((c === "0") || !$asm04.System.Text.RegularExpressions.RegexCharClass.IsWordChar(c))) {
									if (!((c < "1") || (c > "9"))) {
										this.NoteCaptureSlot(this.ScanDecimal(), pos);
									} else {
										this.NoteCaptureName(this.ScanCapname(), pos);
									}
								}
							} else {
								this.ScanOptions();
								if (this.CharsRight() > 0) {
									if (this.RightChar$0() === ")") {
										this.MoveRight$0();
										this.PopKeepOptions();
									} else if (this.RightChar$0() === "(") {
										this._ignoreNextParen = true;
										break;
									}
								}
							}
						} else if (!(this.UseOptionN() || this._ignoreNextParen)) {
							this.NoteCaptureSlot(this._autocap++, pos);
						}
					}
					this._ignoreNextParen = false;
					break;
				case ")": 
					if (!this.EmptyOptionsStack()) {
						this.PopOptions();
					}
					break;
				default: 
					switch (c2) {
						case "[": 
							this.ScanCharClass$1(false, true);
							break;
						case "\\": 
							if (this.CharsRight() > 0) {
								this.MoveRight$0();
							}
							break;
					}
					break;
			}
		} else if (this.UseOptionX()) {
			this.MoveLeft();
			this.ScanBlank();
		}
	}
	this.AssignNameSlots();
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.NoteCaptureSlot = function (i, pos) {
	if (!this._caps.ContainsKey(i)) {
		this._caps.Add(i, pos);
		++this._capcount;
		if (this._captop <= i) {
			if (i === 2147483647) {
				this._captop = i;
				return;
			}
			this._captop = (i + 1);
		}
	}
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.NoteCaptureName = function (name, pos) {
	if (this._capnames === null) {
		this._capnames = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.String, System.Int32), "_ctor$0", []);
		this._capnamelist = new (System.Collections.Generic.List$b1.Of(System.String)) ();
	}
	if (!this._capnames.ContainsKey(name)) {
		this._capnames.Add(name, pos);
		this._capnamelist.Add(name);
	}
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.NoteCaptures = function (caps, capsize, capnames) {
	this._caps = caps;
	this._capsize = capsize;
	this._capnames = capnames;
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.AssignNameSlots = function () {
	if (this._capnames !== null) {
	__loop0__: 
		for (var i = 0; i < this._capnamelist.Count; ++i) {
		__loop1__: 
			while (this.IsCaptureSlot(this._autocap)) {
				++this._autocap;
			}
			var key = this._capnamelist.get_Item(i);
			var pos = this._capnames.get_Item(key);
			this._capnames.set_Item(key, this._autocap);
			this.NoteCaptureSlot(this._autocap, pos);
			++this._autocap;
		}
	}
	if (this._capcount < this._captop) {
		this._capnumlist = JSIL.Array.New(System.Int32, this._capcount);
		var num = 0;
	__loop2__: 
		for (var dictionaryEnumerator = this._caps.GetEnumerator(); dictionaryEnumerator.IEnumerator_MoveNext(); ) {
			this._capnumlist[num++] = JSIL.Cast(dictionaryEnumerator.IDictionaryEnumerator_Key, System.Int32);
		}
		System.Array.Sort$b1$2(System.Int32)(this._capnumlist, JSIL.Cast(System.Collections.Generic.Comparer$b1.Of(System.Int32).Default, System.Collections.Generic.IComparer$b1.Of(System.Int32)));
	}
	if (!((this._capnames === null) && (this._capnumlist === null))) {
		var num2 = 0;
		if (this._capnames === null) {
			var list = null;
			this._capnames = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.String, System.Int32), "_ctor$0", []);
			this._capnamelist = new (System.Collections.Generic.List$b1.Of(System.String)) ();
			var num3 = -1;
		} else {
			list = this._capnamelist;
			this._capnamelist = new (System.Collections.Generic.List$b1.Of(System.String)) ();
			num3 = this._capnames.get_Item(list.get_Item(0));
		}
	__loop3__: 
		for (var j = 0; j < this._capcount; ++j) {
			var num4 = (this._capnumlist === null) ? j : this._capnumlist[j];
			if (num3 === num4) {
				this._capnamelist.Add(list.get_Item(num2++));
				num3 = (num2 === list.Count) ? -1 : this._capnames.get_Item(list.get_Item(num2));
			} else {
				var text = System.Convert.ToString$15(num4, this._culture);
				this._capnamelist.Add(text);
				this._capnames.set_Item(text, num4);
			}
		}
	}
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.CaptureSlotFromName = function (capname) {
	return this._capnames.get_Item(capname);
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.IsCaptureSlot = function (i) {
	if (this._caps !== null) {
		return this._caps.ContainsKey(i);
	}
	return ((i >= 0) && (i < this._capsize));
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.IsCaptureName = function (capname) {
	return (this._capnames && this._capnames.ContainsKey(capname));
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.UseOptionN = function () {
	return ((this._options & System.Text.RegularExpressions.RegexOptions.ExplicitCapture) !== System.Text.RegularExpressions.RegexOptions.None);
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.UseOptionI = function () {
	return ((this._options & System.Text.RegularExpressions.RegexOptions.IgnoreCase) !== System.Text.RegularExpressions.RegexOptions.None);
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.UseOptionM = function () {
	return ((this._options & System.Text.RegularExpressions.RegexOptions.Multiline) !== System.Text.RegularExpressions.RegexOptions.None);
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.UseOptionS = function () {
	return ((this._options & System.Text.RegularExpressions.RegexOptions.Singleline) !== System.Text.RegularExpressions.RegexOptions.None);
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.UseOptionX = function () {
	return ((this._options & System.Text.RegularExpressions.RegexOptions.IgnorePatternWhitespace) !== System.Text.RegularExpressions.RegexOptions.None);
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.UseOptionE = function () {
	return ((this._options & System.Text.RegularExpressions.RegexOptions.ECMAScript) !== System.Text.RegularExpressions.RegexOptions.None);
};
$asm04.System.Text.RegularExpressions.RegexParser.IsSpecial = function (ch) {
	return ((ch <= "|") && ($asm04.System.Text.RegularExpressions.RegexParser._category[ch.charCodeAt(0)] >= 4));
};
$asm04.System.Text.RegularExpressions.RegexParser.IsStopperX = function (ch) {
	return ((ch <= "|") && ($asm04.System.Text.RegularExpressions.RegexParser._category[ch.charCodeAt(0)] >= 2));
};
$asm04.System.Text.RegularExpressions.RegexParser.IsQuantifier = function (ch) {
	return ((ch <= "{") && ($asm04.System.Text.RegularExpressions.RegexParser._category[ch.charCodeAt(0)] >= 5));
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.IsTrueQuantifier = function () {
	var num = this.CharsRight();
	if (num === 0) {
		return false;
	}
	var num2 = this.Textpos();
	var c = this.CharAt(num2);
	if (c !== "{") {
		return ((c <= "{") && ($asm04.System.Text.RegularExpressions.RegexParser._category[c.charCodeAt(0)] >= 5));
	}
__loop0__: 
	for (var num3 = num2; (--num > 0) && 
		((c = this.CharAt(++num3)) >= "0") && (c <= "9"); ) {
	}
	if (!((num !== 0) && ((num3 - num2) !== 1))) {
		return false;
	}
	if (c === "}") {
		return true;
	}
	if (c !== ",") {
		return false;
	}
__loop1__: 
	while ((--num > 0) && 
		((c = this.CharAt(++num3)) >= "0") && (c <= "9")) {
	}
	return ((num > 0) && (c === "}"));
};
$asm04.System.Text.RegularExpressions.RegexParser.IsSpace = function (ch) {
	return ((ch <= " ") && ($asm04.System.Text.RegularExpressions.RegexParser._category[ch.charCodeAt(0)] === 2));
};
$asm04.System.Text.RegularExpressions.RegexParser.IsMetachar = function (ch) {
	return ((ch <= "|") && ($asm04.System.Text.RegularExpressions.RegexParser._category[ch.charCodeAt(0)] >= 1));
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.AddConcatenate$0 = function (pos, cch, isReplacement) {
	if (cch === 0) {
		return;
	}
	if (cch > 1) {
		var text = this._pattern.Substring$1(pos, cch);
		if (!(!this.UseOptionI() || isReplacement)) {
			var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$1", [text.length]);
		__loop0__: 
			for (var i = 0; i < text.length; ++i) {
				stringBuilder.Append$7(System.Char.ToLower$0(text[i], this._culture));
			}
			text = stringBuilder.toString();
		}
		var newChild = JSIL.New($asm04.System.Text.RegularExpressions.RegexNode, "_ctor$2", [12, this._options, text]);
	} else {
		var c = (this._pattern[pos]);
		if (!(!this.UseOptionI() || isReplacement)) {
			c = System.Char.ToLower$0(c, this._culture);
		}
		newChild = JSIL.New($asm04.System.Text.RegularExpressions.RegexNode, "_ctor$1", [9, this._options, c]);
	}
	this._concatenation.AddChild(newChild);
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.PushGroup = function () {
	this._group._next = this._stack;
	this._alternation._next = this._group;
	this._concatenation._next = this._alternation;
	this._stack = this._concatenation;
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.PopGroup = function () {
	this._concatenation = this._stack;
	this._alternation = this._concatenation._next;
	this._group = this._alternation._next;
	this._stack = this._group._next;
	if (!((this._group.Type() !== 34) || (this._group.ChildCount() !== 0))) {
		if (this._unit === null) {
			throw this.MakeException($asm04.System.SR.GetString$2("IllegalCondition"));
		}
		this._group.AddChild(this._unit);
		this._unit = null;
	}
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.EmptyStack = function () {
	return (this._stack === null);
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.StartGroup = function (openGroup) {
	this._group = openGroup;
	this._alternation = JSIL.New($asm04.System.Text.RegularExpressions.RegexNode, "_ctor$0", [24, this._options]);
	this._concatenation = JSIL.New($asm04.System.Text.RegularExpressions.RegexNode, "_ctor$0", [25, this._options]);
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.AddAlternate = function () {
	if (!((this._group.Type() !== 34) && (this._group.Type() !== 33))) {
		this._group.AddChild(this._concatenation.ReverseLeft());
	} else {
		this._alternation.AddChild(this._concatenation.ReverseLeft());
	}
	this._concatenation = JSIL.New($asm04.System.Text.RegularExpressions.RegexNode, "_ctor$0", [25, this._options]);
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.AddConcatenate$1 = function () {
	this._concatenation.AddChild(this._unit);
	this._unit = null;
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.AddConcatenate$2 = function (lazy, min, max) {
	this._concatenation.AddChild(this._unit.MakeQuantifier(lazy, min, max));
	this._unit = null;
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.Unit = function () {
	return this._unit;
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.AddUnitOne = function (ch) {
	if (this.UseOptionI()) {
		ch = System.Char.ToLower$0(ch, this._culture);
	}
	this._unit = JSIL.New($asm04.System.Text.RegularExpressions.RegexNode, "_ctor$1", [9, this._options, ch]);
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.AddUnitNotone = function (ch) {
	if (this.UseOptionI()) {
		ch = System.Char.ToLower$0(ch, this._culture);
	}
	this._unit = JSIL.New($asm04.System.Text.RegularExpressions.RegexNode, "_ctor$1", [10, this._options, ch]);
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.AddUnitSet = function (cc) {
	this._unit = JSIL.New($asm04.System.Text.RegularExpressions.RegexNode, "_ctor$2", [11, this._options, cc]);
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.AddUnitNode = function (node) {
	this._unit = node;
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.AddUnitType = function (type) {
	this._unit = JSIL.New($asm04.System.Text.RegularExpressions.RegexNode, "_ctor$0", [type, this._options]);
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.AddGroup = function () {
	if (!((this._group.Type() !== 34) && (this._group.Type() !== 33))) {
		this._group.AddChild(this._concatenation.ReverseLeft());
		if (!(!((this._group.Type() === 33) && 
					(this._group.ChildCount() > 2)) && (this._group.ChildCount() <= 3))) {
			throw this.MakeException($asm04.System.SR.GetString$2("TooManyAlternates"));
		}
	} else {
		this._alternation.AddChild(this._concatenation.ReverseLeft());
		this._group.AddChild(this._alternation);
	}
	this._unit = this._group;
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.PushOptions = function () {
	this._optionsStack.Add(this._options);
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.PopOptions = function () {
	this._options = this._optionsStack.get_Item((this._optionsStack.Count - 1));
	this._optionsStack.RemoveAt((this._optionsStack.Count - 1));
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.EmptyOptionsStack = function () {
	return (this._optionsStack.Count === 0);
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.PopKeepOptions = function () {
	this._optionsStack.RemoveAt((this._optionsStack.Count - 1));
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.MakeException = function (message) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [$asm04.System.SR.GetString$0("MakeException", [this._pattern, message])]);
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.Textpos = function () {
	return this._currentPos;
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.Textto = function (pos) {
	this._currentPos = pos;
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.MoveRightGetChar = function () {
	return this._pattern[this._currentPos++];
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.MoveRight$0 = function () {
	this.MoveRight$1(1);
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.MoveRight$1 = function (i) {
	this._currentPos += i;
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.MoveLeft = function () {
	--this._currentPos;
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.CharAt = function (i) {
	return this._pattern[i];
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.RightChar$0 = function () {
	return this._pattern[this._currentPos];
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.RightChar$1 = function (i) {
	return this._pattern[(this._currentPos + i)];
};
$asm04.System.Text.RegularExpressions.RegexParser.prototype.CharsRight = function () {
	return (this._pattern.length - this._currentPos);
};
JSIL.OverloadedMethod($asm04.System.Text.RegularExpressions.RegexParser.prototype, "ScanCharClass", [
		["ScanCharClass$0", [System.Boolean]], 
		["ScanCharClass$1", [System.Boolean, System.Boolean]]
	]);
JSIL.OverloadedMethod($asm04.System.Text.RegularExpressions.RegexParser.prototype, "AddConcatenate", [
		["AddConcatenate$0", [System.Int32, System.Int32, System.Boolean]], 
		["AddConcatenate$1", []], 
		["AddConcatenate$2", [System.Boolean, System.Int32, System.Int32]]
	]);
JSIL.OverloadedMethod($asm04.System.Text.RegularExpressions.RegexParser.prototype, "MoveRight", [
		["MoveRight$0", []], 
		["MoveRight$1", [System.Int32]]
	]);
JSIL.OverloadedMethod($asm04.System.Text.RegularExpressions.RegexParser.prototype, "RightChar", [
		["RightChar$0", []], 
		["RightChar$1", [System.Int32]]
	]);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexParser, "MaxValueDiv10", {
		"value": 214748364}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexParser, "MaxValueMod10", {
		"value": 7}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexParser, "Q", {
		"value": 5}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexParser, "S", {
		"value": 4}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexParser, "Z", {
		"value": 3}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexParser, "X", {
		"value": 2}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexParser, "E", {
		"value": 1}
);
$asm04.System.Text.RegularExpressions.RegexParser.prototype._stack = null;
$asm04.System.Text.RegularExpressions.RegexParser.prototype._group = null;
$asm04.System.Text.RegularExpressions.RegexParser.prototype._alternation = null;
$asm04.System.Text.RegularExpressions.RegexParser.prototype._concatenation = null;
$asm04.System.Text.RegularExpressions.RegexParser.prototype._unit = null;
$asm04.System.Text.RegularExpressions.RegexParser.prototype._pattern = null;
$asm04.System.Text.RegularExpressions.RegexParser.prototype._currentPos = 0;
$asm04.System.Text.RegularExpressions.RegexParser.prototype._culture = null;
$asm04.System.Text.RegularExpressions.RegexParser.prototype._autocap = 0;
$asm04.System.Text.RegularExpressions.RegexParser.prototype._capcount = 0;
$asm04.System.Text.RegularExpressions.RegexParser.prototype._captop = 0;
$asm04.System.Text.RegularExpressions.RegexParser.prototype._capsize = 0;
$asm04.System.Text.RegularExpressions.RegexParser.prototype._caps = null;
$asm04.System.Text.RegularExpressions.RegexParser.prototype._capnames = null;
$asm04.System.Text.RegularExpressions.RegexParser.prototype._capnumlist = null;
$asm04.System.Text.RegularExpressions.RegexParser.prototype._capnamelist = null;
$asm04.System.Text.RegularExpressions.RegexParser.prototype._options = 0;
$asm04.System.Text.RegularExpressions.RegexParser.prototype._optionsStack = null;
$asm04.System.Text.RegularExpressions.RegexParser.prototype._ignoreNextParen = false;
$asm04.System.Text.RegularExpressions.RegexParser._category = null;
$asm04.System.Text.RegularExpressions.RegexParser._cctor = function () {
	$asm04.System.Text.RegularExpressions.RegexParser._category = JSIL.Array.New(System.Byte, [0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 0, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 3, 4, 0, 0, 0, 4, 4, 5, 5, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 4, 0, 0, 0]);
};

$asm04.System.Text.RegularExpressions.RegexReplacement.prototype._ctor = function (rep, concat, _caps) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				System.Object.prototype._ctor.call(this);
				this._rep = rep;
				if (concat.Type() !== 25) {
					throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm04.System.SR.GetString$2("ReplacementError")]);
				}
				var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
				var list = new (System.Collections.Generic.List$b1.Of(System.String)) ();
				var list2 = new (System.Collections.Generic.List$b1.Of(System.Int32)) ();
			__loop0__: 
				for (var i = 0; i < concat.ChildCount(); ) {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								var regexNode = concat.Child(i);
								switch (regexNode.Type()) {
									case 9: 
										stringBuilder.Append$7(regexNode._ch);
										break;
									case 10: 
									case 11: 
										__label1__ = "IL_DF";
										continue __step1__;
									case 12: 
										stringBuilder.Append$2(regexNode._str);
										break;
									case 13: 
										if (stringBuilder.Length > 0) {
											list2.Add(list.Count);
											list.Add(stringBuilder.toString());
											stringBuilder.Length = 0;
										}
										var num = regexNode._m;
										if (!((_caps === null) || (num < 0))) {
											num = _caps.get_Item(num);
										}
										list2.Add((-5 - num));
										break;
									default: 
										__label1__ = "IL_DF";
										continue __step1__;
								}
								++i;
								continue __loop0__;
								__label1__ = "IL_DF";
								continue __step1__;
								break;
							case "IL_DF":
								throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm04.System.SR.GetString$2("ReplacementError")]);
								break __step1__;
						}
					}
				}
				if (stringBuilder.Length > 0) {
					list2.Add(list.Count);
					list.Add(stringBuilder.toString());
				}
				this._strings = list;
				this._rules = list2;
				break __step0__;
		}
	}
};
$asm04.System.Text.RegularExpressions.RegexReplacement.prototype.ReplacementImpl = function (sb, match) {
__loop0__: 
	for (var i = 0; i < this._rules.Count; ++i) {
		var num = this._rules.get_Item(i);
		if (num >= 0) {
			sb.Append$2(this._strings.get_Item(num));
		} else if (num < -4) {
			sb.Append$2(match.GroupToStringImpl((-5 - num)));
		} else {
			switch (-5 - num) {
				case -4: 
					sb.Append$2(match.GetOriginalString());
					break;
				case -3: 
					sb.Append$2(match.LastGroupToStringImpl());
					break;
				case -2: 
					sb.Append$2(match.GetRightSubstring());
					break;
				case -1: 
					sb.Append$2(match.GetLeftSubstring());
					break;
			}
		}
	}
};
$asm04.System.Text.RegularExpressions.RegexReplacement.prototype.ReplacementImplRTL = function (al, match) {
__loop0__: 
	for (var i = (this._rules.Count - 1); i >= 0; --i) {
		var num = this._rules.get_Item(i);
		if (num >= 0) {
			al.Add(this._strings.get_Item(num));
		} else if (num < -4) {
			al.Add(match.GroupToStringImpl((-5 - num)));
		} else {
			switch (-5 - num) {
				case -4: 
					al.Add(match.GetOriginalString());
					break;
				case -3: 
					al.Add(match.LastGroupToStringImpl());
					break;
				case -2: 
					al.Add(match.GetRightSubstring());
					break;
				case -1: 
					al.Add(match.GetLeftSubstring());
					break;
			}
		}
	}
};
$asm04.System.Text.RegularExpressions.RegexReplacement.prototype.get_Pattern = function () {
	return this._rep;
};
$asm04.System.Text.RegularExpressions.RegexReplacement.prototype.Replacement = function (match) {
	var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
	this.ReplacementImpl(stringBuilder, match);
	return stringBuilder.toString();
};
$asm04.System.Text.RegularExpressions.RegexReplacement.prototype.Replace = function (regex, input, count, startat) {
	if (count < -1) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["count", $asm04.System.SR.GetString$2("CountTooSmall")]);
	}
	if (!((startat >= 0) && (startat <= input.length))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["startat", $asm04.System.SR.GetString$2("BeginIndexNotNegative")]);
	}
	if (count === 0) {
		return input;
	}
	var match = regex.Match$1(input, startat);
	if (!match.Success) {
		return input;
	}
	if (!regex.RightToLeft) {
		var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
		var num = 0;
	__loop2__: 
		do {
			if (match.Index !== num) {
				stringBuilder.Append$3(input, num, (match.Index - num));
			}
			num = (match.Index + match.Length);
			this.ReplacementImpl(stringBuilder, match);
			if (!(count = ((count - 1) !== 0))) {
				break __loop2__;
			}
			match = match.NextMatch();
		} while (match.Success);
		if (num < input.length) {
			stringBuilder.Append$3(input, num, (input.length - num));
		}
	} else {
		var list = new (System.Collections.Generic.List$b1.Of(System.String)) ();
		var num2 = input.length;
	__loop0__: 
		do {
			if ((match.Index + match.Length) !== num2) {
				list.Add(input.Substring$1((match.Index + match.Length), ((num2 - match.Index) - match.Length)));
			}
			num2 = match.Index;
			this.ReplacementImplRTL(list, match);
			if (!(count = ((count - 1) !== 0))) {
				break __loop0__;
			}
			match = match.NextMatch();
		} while (match.Success);
		stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
		if (num2 > 0) {
			stringBuilder.Append$3(input, 0, num2);
		}
	__loop1__: 
		for (var i = (list.Count - 1); i >= 0; --i) {
			stringBuilder.Append$2(list.get_Item(i));
		}
	}
	return stringBuilder.toString();
};
$asm04.System.Text.RegularExpressions.RegexReplacement.Replace = function (evaluator, regex, input, count, startat) {
	if (evaluator === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["evaluator"]);
	}
	if (count < -1) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["count", $asm04.System.SR.GetString$2("CountTooSmall")]);
	}
	if (!((startat >= 0) && (startat <= input.length))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["startat", $asm04.System.SR.GetString$2("BeginIndexNotNegative")]);
	}
	if (count === 0) {
		return input;
	}
	var match = regex.Match$1(input, startat);
	if (!match.Success) {
		return input;
	}
	if (!regex.RightToLeft) {
		var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
		var num = 0;
	__loop2__: 
		do {
			if (match.Index !== num) {
				stringBuilder.Append$3(input, num, (match.Index - num));
			}
			num = (match.Index + match.Length);
			stringBuilder.Append$2(evaluator(match));
			if (!(count = ((count - 1) !== 0))) {
				break __loop2__;
			}
			match = match.NextMatch();
		} while (match.Success);
		if (num < input.length) {
			stringBuilder.Append$3(input, num, (input.length - num));
		}
	} else {
		var list = new (System.Collections.Generic.List$b1.Of(System.String)) ();
		var num2 = input.length;
	__loop0__: 
		do {
			if ((match.Index + match.Length) !== num2) {
				list.Add(input.Substring$1((match.Index + match.Length), ((num2 - match.Index) - match.Length)));
			}
			num2 = match.Index;
			list.Add(evaluator(match));
			if (!(count = ((count - 1) !== 0))) {
				break __loop0__;
			}
			match = match.NextMatch();
		} while (match.Success);
		stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
		if (num2 > 0) {
			stringBuilder.Append$3(input, 0, num2);
		}
	__loop1__: 
		for (var i = (list.Count - 1); i >= 0; --i) {
			stringBuilder.Append$2(list.get_Item(i));
		}
	}
	return stringBuilder.toString();
};
$asm04.System.Text.RegularExpressions.RegexReplacement.Split = function (regex, input, count, startat) {
	if (count < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["count", $asm04.System.SR.GetString$2("CountTooSmall")]);
	}
	if (!((startat >= 0) && (startat <= input.length))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["startat", $asm04.System.SR.GetString$2("BeginIndexNotNegative")]);
	}
	if (count === 1) {
		return JSIL.Array.New(System.String, [input]);
	}
	--count;
	var match = regex.Match$1(input, startat);
	if (!match.Success) {
		return JSIL.Array.New(System.String, [input]);
	}
	var list = new (System.Collections.Generic.List$b1.Of(System.String)) ();
	if (!regex.RightToLeft) {
		var num = 0;
	__loop2__: 
		do {
			list.Add(input.Substring$1(num, (match.Index - num)));
			num = (match.Index + match.Length);
		__loop3__: 
			for (var i = 1; i < match.Groups.Count; ++i) {
				if (match.IsMatched(i)) {
					list.Add(match.Groups.get_Item$0(i).toString());
				}
			}
			if (!(count = ((count - 1) !== 0))) {
				break __loop2__;
			}
			match = match.NextMatch();
		} while (match.Success);
		list.Add(input.Substring$1(num, (input.length - num)));
	} else {
		var num2 = input.length;
	__loop0__: 
		do {
			list.Add(input.Substring$1((match.Index + match.Length), ((num2 - match.Index) - match.Length)));
			num2 = match.Index;
		__loop1__: 
			for (var j = 1; j < match.Groups.Count; ++j) {
				if (match.IsMatched(j)) {
					list.Add(match.Groups.get_Item$0(j).toString());
				}
			}
			if (!(count = ((count - 1) !== 0))) {
				break __loop0__;
			}
			match = match.NextMatch();
		} while (match.Success);
		list.Add(input.Substring$1(0, num2));
		list.Reverse$1(0, list.Count);
	}
	return list.ToArray();
};
JSIL.MakeProperty($asm04.System.Text.RegularExpressions.RegexReplacement.prototype, "Pattern", 
	$asm04.System.Text.RegularExpressions.RegexReplacement.prototype.get_Pattern, null);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexReplacement, "Specials", {
		"value": 4}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexReplacement, "LeftPortion", {
		"value": -1}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexReplacement, "RightPortion", {
		"value": -2}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexReplacement, "LastGroup", {
		"value": -3}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexReplacement, "WholeString", {
		"value": -4}
);
$asm04.System.Text.RegularExpressions.RegexReplacement.prototype._rep = null;
$asm04.System.Text.RegularExpressions.RegexReplacement.prototype._strings = null;
$asm04.System.Text.RegularExpressions.RegexReplacement.prototype._rules = null;

$asm04.System.Text.RegularExpressions.RegexRunnerFactory.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};

$asm04.System.Text.RegularExpressions.RegexTree.prototype._ctor = function (root, caps, capnumlist, captop, capnames, capslist, opts) {
	System.Object.prototype._ctor.call(this);
	this._root = root;
	this._caps = caps;
	this._capnumlist = capnumlist;
	this._capnames = capnames;
	this._capslist = capslist;
	this._captop = captop;
	this._options = opts;
};
$asm04.System.Text.RegularExpressions.RegexTree.prototype._root = null;
$asm04.System.Text.RegularExpressions.RegexTree.prototype._caps = null;
$asm04.System.Text.RegularExpressions.RegexTree.prototype._capnumlist = null;
$asm04.System.Text.RegularExpressions.RegexTree.prototype._capnames = null;
$asm04.System.Text.RegularExpressions.RegexTree.prototype._capslist = null;
$asm04.System.Text.RegularExpressions.RegexTree.prototype._options = 0;
$asm04.System.Text.RegularExpressions.RegexTree.prototype._captop = 0;

$asm04.System.Text.RegularExpressions.RegexWriter.Write = function (t) {
	var regexWriter = new $asm04.System.Text.RegularExpressions.RegexWriter();
	return regexWriter.RegexCodeFromRegexTree(t);
};
$asm04.System.Text.RegularExpressions.RegexWriter.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
	this._intStack = JSIL.Array.New(System.Int32, 32);
	this._emitted = JSIL.Array.New(System.Int32, 32);
	this._stringhash = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.String, System.Int32), "_ctor$0", []);
	this._stringtable = new (System.Collections.Generic.List$b1.Of(System.String)) ();
};
$asm04.System.Text.RegularExpressions.RegexWriter.prototype.PushInt = function (I) {
	if (this._depth >= this._intStack.length) {
		var array = JSIL.Array.New(System.Int32, (this._depth * 2));
		System.Array.Copy$1(
			this._intStack, 
			0, 
			array, 
			0, 
			this._depth
		);
		this._intStack = array;
	}
	this._intStack[this._depth++] = I;
};
$asm04.System.Text.RegularExpressions.RegexWriter.prototype.EmptyStack = function () {
	return (this._depth === 0);
};
$asm04.System.Text.RegularExpressions.RegexWriter.prototype.PopInt = function () {
	return this._intStack[--this._depth];
};
$asm04.System.Text.RegularExpressions.RegexWriter.prototype.CurPos = function () {
	return this._curpos;
};
$asm04.System.Text.RegularExpressions.RegexWriter.prototype.PatchJump = function (Offset, jumpDest) {
	this._emitted[(Offset + 1)] = jumpDest;
};
$asm04.System.Text.RegularExpressions.RegexWriter.prototype.Emit$0 = function (op) {
	if (this._counting) {
		++this._count;
		if ($asm04.System.Text.RegularExpressions.RegexCode.OpcodeBacktracks(op)) {
			++this._trackcount;
		}
		return;
	}
	this._emitted[this._curpos++] = op;
};
$asm04.System.Text.RegularExpressions.RegexWriter.prototype.Emit$1 = function (op, opd1) {
	if (this._counting) {
		this._count += 2;
		if ($asm04.System.Text.RegularExpressions.RegexCode.OpcodeBacktracks(op)) {
			++this._trackcount;
		}
		return;
	}
	this._emitted[this._curpos++] = op;
	this._emitted[this._curpos++] = opd1;
};
$asm04.System.Text.RegularExpressions.RegexWriter.prototype.Emit$2 = function (op, opd1, opd2) {
	if (this._counting) {
		this._count += 3;
		if ($asm04.System.Text.RegularExpressions.RegexCode.OpcodeBacktracks(op)) {
			++this._trackcount;
		}
		return;
	}
	this._emitted[this._curpos++] = op;
	this._emitted[this._curpos++] = opd1;
	this._emitted[this._curpos++] = opd2;
};
$asm04.System.Text.RegularExpressions.RegexWriter.prototype.StringCode = function (str) {
	if (this._counting) {
		return 0;
	}
	if (str === null) {
		str = System.String.Empty;
	}
	if (this._stringhash.ContainsKey(str)) {
		var num = this._stringhash.get_Item(str);
	} else {
		num = this._stringtable.Count;
		this._stringhash.set_Item(str, num);
		this._stringtable.Add(str);
	}
	return num;
};
$asm04.System.Text.RegularExpressions.RegexWriter.prototype.MakeException = function (message) {
	return JSIL.New(System.ArgumentException, "_ctor$1", [message]);
};
$asm04.System.Text.RegularExpressions.RegexWriter.prototype.MapCapnum = function (capnum) {
	if (capnum === -1) {
		return -1;
	}
	if (this._caps !== null) {
		return this._caps.get_Item(capnum);
	}
	return capnum;
};
$asm04.System.Text.RegularExpressions.RegexWriter.prototype.RegexCodeFromRegexTree = function (tree) {
	if (!((tree._capnumlist !== null) && (tree._captop !== tree._capnumlist.length))) {
		var capsize = tree._captop;
		this._caps = null;
	} else {
		capsize = tree._capnumlist.length;
		this._caps = tree._caps;
	__loop0__: 
		for (var i = 0; i < tree._capnumlist.length; ++i) {
			this._caps.set_Item(tree._capnumlist[i], i);
		}
	}
	this._counting = true;
__loop1__: 
	while (true) {
		if (!this._counting) {
			this._emitted = JSIL.Array.New(System.Int32, this._count);
		}
		var regexNode = tree._root;
		var num = 0;
		this.Emit$1(23, 0);
	__loop2__: 
		while (true) {
			if (regexNode._children === null) {
				this.EmitFragment(regexNode._type, regexNode, 0);
			} else if (num < regexNode._children.Count) {
				this.EmitFragment((regexNode._type | 64), regexNode, num);
				regexNode = regexNode._children.get_Item(num);
				this.PushInt(num);
				num = 0;
				continue __loop2__;
			}
			if (this.EmptyStack()) {
				break __loop2__;
			}
			num = this.PopInt();
			regexNode = regexNode._next;
			this.EmitFragment((regexNode._type | 128), regexNode, num);
			++num;
		}
		this.PatchJump(0, this.CurPos());
		this.Emit$0(40);
		if (!this._counting) {
			break __loop1__;
		}
		this._counting = false;
	}
	var fcPrefix = $asm04.System.Text.RegularExpressions.RegexFCD.FirstChars(tree);
	var regexPrefix = $asm04.System.Text.RegularExpressions.RegexFCD.Prefix(tree);
	var rightToLeft = ((tree._options & System.Text.RegularExpressions.RegexOptions.RightToLeft) !== System.Text.RegularExpressions.RegexOptions.None);
	var culture = (tree._options & System.Text.RegularExpressions.RegexOptions.CultureInvariant) ? System.Globalization.CultureInfo.InvariantCulture : System.Globalization.CultureInfo.CurrentCulture;
	if (!((regexPrefix === null) || (regexPrefix.Prefix.length <= 0))) {
		var bmPrefix = new $asm04.System.Text.RegularExpressions.RegexBoyerMoore(regexPrefix.Prefix, regexPrefix.CaseInsensitive, rightToLeft, culture);
	} else {
		bmPrefix = null;
	}
	var anchors = $asm04.System.Text.RegularExpressions.RegexFCD.Anchors(tree);
	return new $asm04.System.Text.RegularExpressions.RegexCode(this._emitted, this._stringtable, this._trackcount, this._caps, capsize, bmPrefix, fcPrefix, anchors, rightToLeft);
};
$asm04.System.Text.RegularExpressions.RegexWriter.prototype.EmitFragment = function (nodetype, node, CurIndex) {
	var num = 0;
	if (nodetype <= 13) {
		if (node.UseOptionR()) {
			num = (num | 64);
		}
		if (node._options & System.Text.RegularExpressions.RegexOptions.IgnoreCase) {
			num = (num | 512);
		}
	}
	var num2 = nodetype;
	switch (num2) {
		case 3: 
		case 4: 
		case 6: 
		case 7: 
			if (node._m > 0) {
				this.Emit$2((((node._type === 3) || 
							(node._type === 6)) ? 0 : 1 | num), node._ch, node._m);
			}
			if (node._n > node._m) {
				this.Emit$2((node._type | num), node._ch, (node._n === 2147483647) ? 2147483647 : (node._n - node._m));
				return;
			}
			return;
		case 5: 
		case 8: 
			if (node._m > 0) {
				this.Emit$2((2 | num), this.StringCode(node._str), node._m);
			}
			if (node._n > node._m) {
				this.Emit$2((node._type | num), this.StringCode(node._str), (node._n === 2147483647) ? 2147483647 : (node._n - node._m));
				return;
			}
			return;
		case 9: 
		case 10: 
			this.Emit$1((node._type | num), node._ch);
			return;
		case 11: 
			this.Emit$1((node._type | num), this.StringCode(node._str));
			return;
		case 12: 
			this.Emit$1((node._type | num), this.StringCode(node._str));
			return;
		case 13: 
			this.Emit$1((node._type | num), this.MapCapnum(node._m));
			return;
		case 14: 
		case 15: 
		case 16: 
		case 17: 
		case 18: 
		case 19: 
		case 20: 
		case 21: 
		case 22: 
		case 41: 
		case 42: 
			this.Emit$0(node._type);
			return;
		case 23: 
			return;
		case 24: 
		case 25: 
		case 26: 
		case 27: 
		case 28: 
		case 29: 
		case 30: 
		case 31: 
		case 32: 
		case 33: 
		case 34: 
		case 35: 
		case 36: 
		case 37: 
		case 38: 
		case 39: 
		case 40: 
			break;
		default: 
			switch (num2) {
				case 88: 
					if (CurIndex < (node._children.Count - 1)) {
						this.PushInt(this.CurPos());
						this.Emit$1(23, 0);
						return;
					}
					return;
				case 89: 
				case 93: 
					return;
				case 90: 
				case 91: 
					if (!((node._n >= 2147483647) && (node._m <= 1))) {
						this.Emit$1((node._m === 0) ? 26 : 27, (node._m === 0) ? 0 : (1 - node._m));
					} else {
						this.Emit$0((node._m === 0) ? 30 : 31);
					}
					if (node._m === 0) {
						this.PushInt(this.CurPos());
						this.Emit$1(38, 0);
					}
					this.PushInt(this.CurPos());
					return;
				case 92: 
					this.Emit$0(31);
					return;
				case 94: 
					this.Emit$0(34);
					this.Emit$0(31);
					return;
				case 95: 
					this.Emit$0(34);
					this.PushInt(this.CurPos());
					this.Emit$1(23, 0);
					return;
				case 96: 
					this.Emit$0(34);
					return;
				case 97: 
					if (CurIndex !== 0) {
						return;
					}
					this.Emit$0(34);
					this.PushInt(this.CurPos());
					this.Emit$1(23, 0);
					this.Emit$1(37, this.MapCapnum(node._m));
					this.Emit$0(36);
					return;
				case 98: 
					if (CurIndex !== 0) {
						return;
					}
					this.Emit$0(34);
					this.Emit$0(31);
					this.PushInt(this.CurPos());
					this.Emit$1(23, 0);
					return;
				default: 
					switch (num2) {
						case 152: 
							if (CurIndex < (node._children.Count - 1)) {
								var offset = this.PopInt();
								this.PushInt(this.CurPos());
								this.Emit$1(38, 0);
								this.PatchJump(offset, this.CurPos());
								return;
							}
						__loop0__: 
							for (var i = 0; i < CurIndex; ++i) {
								this.PatchJump(this.PopInt(), this.CurPos());
							}
							return;
						case 153: 
						case 157: 
							return;
						case 154: 
						case 155: 
							var jumpDest = this.CurPos();
							var num3 = (nodetype - 154);
							if (!((node._n >= 2147483647) && (node._m <= 1))) {
								this.Emit$2((28 + num3), this.PopInt(), (node._n === 2147483647) ? 2147483647 : (node._n - node._m));
							} else {
								this.Emit$1((24 + num3), this.PopInt());
							}
							if (node._m === 0) {
								this.PatchJump(this.PopInt(), jumpDest);
								return;
							}
							return;
						case 156: 
							this.Emit$2(32, this.MapCapnum(node._m), this.MapCapnum(node._n));
							return;
						case 158: 
							this.Emit$0(33);
							this.Emit$0(36);
							return;
						case 159: 
							this.Emit$0(35);
							this.PatchJump(this.PopInt(), this.CurPos());
							this.Emit$0(36);
							return;
						case 160: 
							this.Emit$0(36);
							return;
						case 161: 
							switch (CurIndex) {
								case 0: 
									var offset2 = this.PopInt();
									this.PushInt(this.CurPos());
									this.Emit$1(38, 0);
									this.PatchJump(offset2, this.CurPos());
									this.Emit$0(36);
									if (node._children.Count > 1) {
										return;
									}
									break;
								case 1: 
									break;
								default: 
									return;
							}
							this.PatchJump(this.PopInt(), this.CurPos());
							return;
						case 162: 
							switch (CurIndex) {
								case 0: 
									this.Emit$0(33);
									this.Emit$0(36);
									return;
								case 1: 
									var offset3 = this.PopInt();
									this.PushInt(this.CurPos());
									this.Emit$1(38, 0);
									this.PatchJump(offset3, this.CurPos());
									this.Emit$0(33);
									this.Emit$0(36);
									if (node._children.Count > 2) {
										return;
									}
									break;
								case 2: 
									break;
								default: 
									return;
							}
							this.PatchJump(this.PopInt(), this.CurPos());
							return;
					}
					break;
			}
			break;
	}
	throw this.MakeException($asm04.System.SR.GetString$0("UnexpectedOpcode", [(nodetype).toString()]));
};
JSIL.OverloadedMethod($asm04.System.Text.RegularExpressions.RegexWriter.prototype, "Emit", [
		["Emit$0", [System.Int32]], 
		["Emit$1", [System.Int32, System.Int32]], 
		["Emit$2", [System.Int32, System.Int32, System.Int32]]
	]);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexWriter, "BeforeChild", {
		"value": 64}
);
Object.defineProperty($asm04.System.Text.RegularExpressions.RegexWriter, "AfterChild", {
		"value": 128}
);
$asm04.System.Text.RegularExpressions.RegexWriter.prototype._intStack = null;
$asm04.System.Text.RegularExpressions.RegexWriter.prototype._depth = 0;
$asm04.System.Text.RegularExpressions.RegexWriter.prototype._emitted = null;
$asm04.System.Text.RegularExpressions.RegexWriter.prototype._curpos = 0;
$asm04.System.Text.RegularExpressions.RegexWriter.prototype._stringhash = null;
$asm04.System.Text.RegularExpressions.RegexWriter.prototype._stringtable = null;
$asm04.System.Text.RegularExpressions.RegexWriter.prototype._counting = false;
$asm04.System.Text.RegularExpressions.RegexWriter.prototype._count = 0;
$asm04.System.Text.RegularExpressions.RegexWriter.prototype._trackcount = 0;
$asm04.System.Text.RegularExpressions.RegexWriter.prototype._caps = null;

System.Diagnostics.Debug.Assert$0 = function (condition) {
	System.Diagnostics.Debug.Assert$2(condition, System.String.Empty, System.String.Empty);
};
System.Diagnostics.Debug.Assert$1 = function (condition, message) {
	System.Diagnostics.Debug.Assert$2(condition, message, System.String.Empty);
};
System.Diagnostics.Debug.Assert$2 = function (condition, message, detailMessage) {
	if (!condition) {
		var stackTrace = JSIL.New(System.Diagnostics.StackTrace, "_ctor$1", [true]);
		var num = 0;
		try {
			var stackTrace2 = System.Diagnostics.Debug.StackTraceToString(stackTrace, num, (stackTrace.FrameCount - 1));
		} catch ($exception) {
			stackTrace2 = "";
		}
		System.Diagnostics.Debug.WriteAssert(stackTrace2, message, detailMessage);
		$asm04.System.Diagnostics.AssertWrapper.ShowAssert(stackTrace2, stackTrace.GetFrame(num), message, detailMessage);
	}
};
System.Diagnostics.Debug.StackTraceToString = function (trace, startFrameIndex, endFrameIndex) {
	var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$1", [512]);
__loop0__: 
	for (var i = startFrameIndex; i <= endFrameIndex; ++i) {
		var frame = trace.GetFrame(i);
		var method = frame.GetMethod();
		stringBuilder.Append$2(System.Environment.NewLine);
		stringBuilder.Append$2("    at ");
		if (method.ReflectedType !== null) {
			stringBuilder.Append$2(method.ReflectedType.Name);
		} else {
			stringBuilder.Append$2("<Module>");
		}
		stringBuilder.Append$2(".");
		stringBuilder.Append$2(method.Name);
		stringBuilder.Append$2("(");
		var parameters = method.GetParameters();
	__loop1__: 
		for (var j = 0; j < parameters.length; ++j) {
			var parameterInfo = parameters[j];
			if (j > 0) {
				stringBuilder.Append$2(", ");
			}
			stringBuilder.Append$2(parameterInfo.ParameterType.Name);
			stringBuilder.Append$2(" ");
			stringBuilder.Append$2(parameterInfo.Name);
		}
		stringBuilder.Append$2(")  ");
		stringBuilder.Append$2(frame.GetFileName());
		var fileLineNumber = frame.GetFileLineNumber();
		if (fileLineNumber > 0) {
			stringBuilder.Append$2("(");
			stringBuilder.Append$2((fileLineNumber).toString());
			stringBuilder.Append$2(")");
		}
	}
	stringBuilder.Append$2(System.Environment.NewLine);
	return stringBuilder.toString();
};
System.Diagnostics.Debug.WriteAssert = function (stackTrace, message, detailMessage) {
	var message2 = (JSIL.ConcatString.apply(null, JSIL.Array.New(System.String, [$asm04.System.SR.GetString$2("DebugAssertBanner"), System.Environment.NewLine, $asm04.System.SR.GetString$2("DebugAssertShortMessage"), System.Environment.NewLine, message, System.Environment.NewLine, $asm04.System.SR.GetString$2("DebugAssertLongMessage"), System.Environment.NewLine, detailMessage, System.Environment.NewLine, stackTrace])));
	System.Diagnostics.Debug.WriteLine$0(message2);
};
System.Diagnostics.Debug.Assert$3 = function (condition, message, detailMessageFormat, args) {
	System.Diagnostics.Debug.Assert$2(condition, message, System.String.Format(detailMessageFormat, args));
};
System.Diagnostics.Debug.WriteLine$0 = function (message) {
	var obj = null;
	System.Threading.Monitor.Enter((obj = System.Diagnostics.Debug.s_ForLock));
	try {
		message = ((message + "\r\n"));
		if (!((message !== null) && (message.length > 4091))) {
			System.Diagnostics.Debug.internalWrite(message);
		} else {
		__loop0__: 
			for (var i = 0; i < (message.length - 4091); i += 4091) {
				System.Diagnostics.Debug.internalWrite(message.Substring$1(i, 4091));
			}
			System.Diagnostics.Debug.internalWrite(message.Substring$0(i));
		}
	} finally {
		System.Threading.Monitor.Exit(obj);
	}
};
System.Diagnostics.Debug.internalWrite = function (message) {
	if (System.Diagnostics.Debugger.IsLogging()) {
		System.Diagnostics.Debugger.Log(0, null, message);
		return;
	}
	if (message === null) {
		$asm04.Microsoft.Win32.SafeNativeMethods.OutputDebugString(System.String.Empty);
		return;
	}
	$asm04.Microsoft.Win32.SafeNativeMethods.OutputDebugString(message);
};
System.Diagnostics.Debug.WriteLine$1 = function (value) {
	System.Diagnostics.Debug.WriteLine$0((value === null) ? System.String.Empty : value.toString());
};
System.Diagnostics.Debug.WriteLine$2 = function (format, args) {
	System.Diagnostics.Debug.WriteLine$0(System.String.Format(null, format, args));
};
JSIL.OverloadedMethod(System.Diagnostics.Debug, "Assert", [
		["Assert$0", [System.Boolean]], 
		["Assert$1", [System.Boolean, System.String]], 
		["Assert$2", [System.Boolean, System.String, System.String]], 
		["Assert$3", [System.Boolean, System.String, System.String, System.Array.Of(System.Object)]]
	]);
JSIL.OverloadedMethod(System.Diagnostics.Debug, "WriteLine", [
		["WriteLine$0", [System.String]], 
		["WriteLine$1", [System.Object]], 
		["WriteLine$2", [System.String, System.Array.Of(System.Object)]]
	]);
Object.defineProperty(System.Diagnostics.Debug, "internalWriteSize", {
		"value": 4091}
);
System.Diagnostics.Debug.s_ForLock = null;
System.Diagnostics.Debug._cctor = function () {
	System.Diagnostics.Debug.s_ForLock = new System.Object();
};

$asm04.System.Diagnostics.AssertWrapper.ShowAssert = function (stackTrace, frame, message, detailMessage) {
	$asm04.System.Diagnostics.AssertWrapper.ShowMessageBoxAssert(stackTrace, message, detailMessage);
};
$asm04.System.Diagnostics.AssertWrapper.ShowMessageBoxAssert = function (stackTrace, message, detailMessage) {
	var text = (JSIL.ConcatString.apply(null, JSIL.Array.New(System.String, [message, System.Environment.NewLine, detailMessage, System.Environment.NewLine, stackTrace])));
	text = $asm04.System.Diagnostics.AssertWrapper.TruncateMessageToFitScreen(text);
	var num = 262161;
	if ($asm04.System.Diagnostics.AssertWrapper.IsRTLResources) {
		num = ((num | 524288) | 1048576);
	}
	var num2 = (new $asm04.System.Diagnostics.MessageBoxPopup(text, $asm04.System.SR.GetString$2("DebugAssertTitle"), num)).ShowMessageBox();
	var num3 = num2;
	if (num3 !== 2) {
		return;
	}
	if (!System.Diagnostics.Debugger.IsAttached) {
		System.Diagnostics.Debugger.Launch();
	}
	System.Diagnostics.Debugger.Break();
};
$asm04.System.Diagnostics.AssertWrapper.get_IsRTLResources = function () {
	return $asm04.System.SR.GetString$2("RTL") != "RTL_False";
};
$asm04.System.Diagnostics.AssertWrapper.TruncateMessageToFitScreen = function (message) {
	var hObject = $asm04.Microsoft.Win32.SafeNativeMethods.GetStockObject(17);
	var hDC = JSIL.Cast(JSIL.IgnoredMember("System.IntPtr Microsoft.Win32.UnsafeNativeMethods::GetDC(System.IntPtr)"), System.IntPtr);
	var tEXTMETRIC = new $asm04.Microsoft.Win32.NativeMethods.TEXTMETRIC();
	hObject = JSIL.Cast(JSIL.IgnoredMember("System.IntPtr Microsoft.Win32.UnsafeNativeMethods::SelectObject(System.IntPtr,System.IntPtr)"), System.IntPtr);
	$asm04.Microsoft.Win32.SafeNativeMethods.GetTextMetrics(hDC, tEXTMETRIC);
	JSIL.IgnoredMember("System.IntPtr Microsoft.Win32.UnsafeNativeMethods::SelectObject(System.IntPtr,System.IntPtr)");
	JSIL.IgnoredMember("System.Int32 Microsoft.Win32.UnsafeNativeMethods::ReleaseDC(System.IntPtr,System.IntPtr)");
	hDC = System.IntPtr.Zero;
	var num = (Math.floor(JSIL.Cast(JSIL.IgnoredMember("System.Int32 Microsoft.Win32.UnsafeNativeMethods::GetSystemMetrics(System.Int32)"), System.Int32) / tEXTMETRIC.tmHeight) - 15);
	var num2 = 0;
	var num3 = 0;
__loop0__: 
	for (var num4 = 0; (num2 < num) && (num4 < (message.length - 1)); ) {
		var c = (message[num4]);
		++num3;
		if (!((c !== "\n") && 
				(c !== "\r") && (num3 <= 80))) {
			++num2;
			num3 = 0;
		}
		if (!((c !== "\r") || ((message[(num4 + 1)]) !== "\n"))) {
			num4 += 2;
		} else if (!((c !== "\n") || ((message[(num4 + 1)]) !== "\r"))) {
			num4 += 2;
		} else {
			++num4;
		}
	}
	if (num4 < (message.length - 1)) {
		message = $asm04.System.SR.GetString$0("DebugMessageTruncated", [message.Substring$1(0, num4)]);
	}
	return message;
};
JSIL.MakeProperty($asm04.System.Diagnostics.AssertWrapper, "IsRTLResources", 
	$asm04.System.Diagnostics.AssertWrapper.get_IsRTLResources, null);

$asm04.System.Diagnostics.MessageBoxPopup.prototype.get_ReturnValue = function () {
	return this.ReturnValue$value;
};
$asm04.System.Diagnostics.MessageBoxPopup.prototype.set_ReturnValue = function (value) {
	this.ReturnValue$value = value;
};
$asm04.System.Diagnostics.MessageBoxPopup.prototype._ctor = function (body, title, flags) {
	System.Object.prototype._ctor.call(this);
	this.m_Event = new System.Threading.AutoResetEvent(false);
	this.m_Body = body;
	this.m_Title = title;
	this.m_Flags = flags;
};
$asm04.System.Diagnostics.MessageBoxPopup.prototype.ShowMessageBox = function () {
	var thread = new System.Threading.Thread(JSIL.Delegate.New("System.Threading.ThreadStart", this, $asm04.System.Diagnostics.MessageBoxPopup.prototype.DoPopup));
	thread.Start$0();
	this.m_Event.WaitOne$2();
	return this.ReturnValue;
};
$asm04.System.Diagnostics.MessageBoxPopup.prototype.DoPopup = function () {
	this.ReturnValue = $asm04.Microsoft.Win32.SafeNativeMethods.MessageBox(System.IntPtr.Zero, this.m_Body, this.m_Title, this.m_Flags);
	this.m_Event.Set();
};
JSIL.MakeProperty($asm04.System.Diagnostics.MessageBoxPopup.prototype, "ReturnValue", 
	$asm04.System.Diagnostics.MessageBoxPopup.prototype.get_ReturnValue, $asm04.System.Diagnostics.MessageBoxPopup.prototype.set_ReturnValue);
$asm04.System.Diagnostics.MessageBoxPopup.prototype.m_Event = null;
$asm04.System.Diagnostics.MessageBoxPopup.prototype.m_Body = null;
$asm04.System.Diagnostics.MessageBoxPopup.prototype.m_Title = null;
$asm04.System.Diagnostics.MessageBoxPopup.prototype.m_Flags = 0;
$asm04.System.Diagnostics.MessageBoxPopup.prototype.ReturnValue$value = 0;

Object.defineProperty($asm04.Microsoft.Win32.SafeNativeMethods, "MB_RIGHT", {
		"value": 524288}
);
Object.defineProperty($asm04.Microsoft.Win32.SafeNativeMethods, "MB_RTLREADING", {
		"value": 1048576}
);


Object.defineProperty($asm04.Microsoft.Win32.NativeMethods, "DEFAULT_GUI_FONT", {
		"value": 17}
);
Object.defineProperty($asm04.Microsoft.Win32.NativeMethods, "SM_CYSCREEN", {
		"value": 1}
);

$asm04.Microsoft.Win32.NativeMethods.TEXTMETRIC.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm04.Microsoft.Win32.NativeMethods.TEXTMETRIC.prototype.tmHeight = 0;
$asm04.Microsoft.Win32.NativeMethods.TEXTMETRIC.prototype.tmAscent = 0;
$asm04.Microsoft.Win32.NativeMethods.TEXTMETRIC.prototype.tmDescent = 0;
$asm04.Microsoft.Win32.NativeMethods.TEXTMETRIC.prototype.tmInternalLeading = 0;
$asm04.Microsoft.Win32.NativeMethods.TEXTMETRIC.prototype.tmExternalLeading = 0;
$asm04.Microsoft.Win32.NativeMethods.TEXTMETRIC.prototype.tmAveCharWidth = 0;
$asm04.Microsoft.Win32.NativeMethods.TEXTMETRIC.prototype.tmMaxCharWidth = 0;
$asm04.Microsoft.Win32.NativeMethods.TEXTMETRIC.prototype.tmWeight = 0;
$asm04.Microsoft.Win32.NativeMethods.TEXTMETRIC.prototype.tmOverhang = 0;
$asm04.Microsoft.Win32.NativeMethods.TEXTMETRIC.prototype.tmDigitizedAspectX = 0;
$asm04.Microsoft.Win32.NativeMethods.TEXTMETRIC.prototype.tmDigitizedAspectY = 0;
$asm04.Microsoft.Win32.NativeMethods.TEXTMETRIC.prototype.tmFirstChar = 0;
$asm04.Microsoft.Win32.NativeMethods.TEXTMETRIC.prototype.tmLastChar = 0;
$asm04.Microsoft.Win32.NativeMethods.TEXTMETRIC.prototype.tmDefaultChar = 0;
$asm04.Microsoft.Win32.NativeMethods.TEXTMETRIC.prototype.tmBreakChar = 0;
$asm04.Microsoft.Win32.NativeMethods.TEXTMETRIC.prototype.tmItalic = 0;
$asm04.Microsoft.Win32.NativeMethods.TEXTMETRIC.prototype.tmUnderlined = 0;
$asm04.Microsoft.Win32.NativeMethods.TEXTMETRIC.prototype.tmStruckOut = 0;
$asm04.Microsoft.Win32.NativeMethods.TEXTMETRIC.prototype.tmPitchAndFamily = 0;
$asm04.Microsoft.Win32.NativeMethods.TEXTMETRIC.prototype.tmCharSet = 0;

$asm04.System.Collections.Generic.System_CollectionDebugView$b1.prototype._ctor = function (collection) {
	System.Object.prototype._ctor.call(this);
	if (collection === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["collection"]);
	}
	this.collection = collection;
};
$asm04.System.Collections.Generic.System_CollectionDebugView$b1.prototype.get_Items = function () {
	var array = JSIL.Array.New(this.T, this.collection.ICollection$b1_Count);
	this.collection.ICollection$b1_CopyTo(array, 0);
	return array;
};
JSIL.MakeProperty($asm04.System.Collections.Generic.System_CollectionDebugView$b1.prototype, "Items", 
	$asm04.System.Collections.Generic.System_CollectionDebugView$b1.prototype.get_Items, null);
$asm04.System.Collections.Generic.System_CollectionDebugView$b1.prototype.collection = null;

$asm04.System.Collections.Generic.System_QueueDebugView$b1.prototype._ctor = function (queue) {
	System.Object.prototype._ctor.call(this);
	if (queue === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["queue"]);
	}
	this.queue = queue;
};
$asm04.System.Collections.Generic.System_QueueDebugView$b1.prototype.get_Items = function () {
	return this.queue.ToArray();
};
JSIL.MakeProperty($asm04.System.Collections.Generic.System_QueueDebugView$b1.prototype, "Items", 
	$asm04.System.Collections.Generic.System_QueueDebugView$b1.prototype.get_Items, null);
$asm04.System.Collections.Generic.System_QueueDebugView$b1.prototype.queue = null;

$asm04.System.Collections.Generic.System_StackDebugView$b1.prototype._ctor = function (stack) {
	System.Object.prototype._ctor.call(this);
	if (stack === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["stack"]);
	}
	this.stack = stack;
};
$asm04.System.Collections.Generic.System_StackDebugView$b1.prototype.get_Items = function () {
	return this.stack.ToArray();
};
JSIL.MakeProperty($asm04.System.Collections.Generic.System_StackDebugView$b1.prototype, "Items", 
	$asm04.System.Collections.Generic.System_StackDebugView$b1.prototype.get_Items, null);
$asm04.System.Collections.Generic.System_StackDebugView$b1.prototype.stack = null;

System.Collections.Generic.LinkedList$b1.prototype._ctor$0 = function () {
	System.Object.prototype._ctor.call(this);
};
System.Collections.Generic.LinkedList$b1.prototype._ctor$1 = function (collection) {
	System.Object.prototype._ctor.call(this);
	if (collection === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["collection"]);
	}
	var enumerator = collection.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			var current = enumerator.IEnumerator$b1_Current;
			this.AddLast$0(current);
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
};
System.Collections.Generic.LinkedList$b1.prototype.get_Count = function () {
	return this.count;
};
System.Collections.Generic.LinkedList$b1.prototype.get_First = function () {
	return this.head;
};
System.Collections.Generic.LinkedList$b1.prototype.get_Last = function () {
	if (this.head !== null) {
		return this.head.prev;
	}
	return null;
};
System.Collections.Generic.LinkedList$b1.prototype.ICollection$b1_get_IsReadOnly = function () {
	return false;
};
System.Collections.Generic.LinkedList$b1.prototype.ICollection$b1_Add = function (value) {
	this.AddLast$0(value);
};
System.Collections.Generic.LinkedList$b1.prototype.AddAfter$0 = function (node, value) {
	this.ValidateNode(node);
	var linkedListNode = JSIL.New(System.Collections.Generic.LinkedListNode$b1.Of(this.T), "_ctor$1", [node.list, value]);
	this.InternalInsertNodeBefore(node.next, linkedListNode);
	return linkedListNode;
};
System.Collections.Generic.LinkedList$b1.prototype.AddAfter$1 = function (node, newNode) {
	this.ValidateNode(node);
	this.ValidateNewNode(newNode);
	this.InternalInsertNodeBefore(node.next, newNode);
	newNode.list = this;
};
System.Collections.Generic.LinkedList$b1.prototype.AddBefore$0 = function (node, value) {
	this.ValidateNode(node);
	var linkedListNode = JSIL.New(System.Collections.Generic.LinkedListNode$b1.Of(this.T), "_ctor$1", [node.list, value]);
	this.InternalInsertNodeBefore(node, linkedListNode);
	if (node === this.head) {
		this.head = linkedListNode;
	}
	return linkedListNode;
};
System.Collections.Generic.LinkedList$b1.prototype.AddBefore$1 = function (node, newNode) {
	this.ValidateNode(node);
	this.ValidateNewNode(newNode);
	this.InternalInsertNodeBefore(node, newNode);
	newNode.list = this;
	if (node === this.head) {
		this.head = newNode;
	}
};
System.Collections.Generic.LinkedList$b1.prototype.AddFirst$0 = function (value) {
	var linkedListNode = JSIL.New(System.Collections.Generic.LinkedListNode$b1.Of(this.T), "_ctor$1", [this, value]);
	if (this.head === null) {
		this.InternalInsertNodeToEmptyList(linkedListNode);
	} else {
		this.InternalInsertNodeBefore(this.head, linkedListNode);
		this.head = linkedListNode;
	}
	return linkedListNode;
};
System.Collections.Generic.LinkedList$b1.prototype.AddFirst$1 = function (node) {
	this.ValidateNewNode(node);
	if (this.head === null) {
		this.InternalInsertNodeToEmptyList(node);
	} else {
		this.InternalInsertNodeBefore(this.head, node);
		this.head = node;
	}
	node.list = this;
};
System.Collections.Generic.LinkedList$b1.prototype.AddLast$0 = function (value) {
	var linkedListNode = JSIL.New(System.Collections.Generic.LinkedListNode$b1.Of(this.T), "_ctor$1", [this, value]);
	if (this.head === null) {
		this.InternalInsertNodeToEmptyList(linkedListNode);
	} else {
		this.InternalInsertNodeBefore(this.head, linkedListNode);
	}
	return linkedListNode;
};
System.Collections.Generic.LinkedList$b1.prototype.AddLast$1 = function (node) {
	this.ValidateNewNode(node);
	if (this.head === null) {
		this.InternalInsertNodeToEmptyList(node);
	} else {
		this.InternalInsertNodeBefore(this.head, node);
	}
	node.list = this;
};
System.Collections.Generic.LinkedList$b1.prototype.Clear = function () {
	var next = this.head;
__loop0__: 
	while (next) {
		var linkedListNode = next;
		next = next.Next;
		linkedListNode.Invalidate();
	}
	this.head = null;
	this.count = 0;
	++this.version;
};
System.Collections.Generic.LinkedList$b1.prototype.Contains = function (value) {
	return (this.Find(value) !== null);
};
System.Collections.Generic.LinkedList$b1.prototype.CopyTo = function (array, index) {
	if (array === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["array"]);
	}
	if (!((index >= 0) && (index <= array.length))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["index", $asm04.System.SR.GetString$0("IndexOutOfRange", [index])]);
	}
	if ((array.length - index) < this.Count) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm04.System.SR.GetString$2("Arg_InsufficientSpace")]);
	}
	var next = this.head;
	if (next !== null) {
	__loop0__: 
		do {
			array[index++] = next.item;
			next = next.next;
		} while (next !== this.head);
	}
};
System.Collections.Generic.LinkedList$b1.prototype.Find = function (value) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				var next = this.head;
				var $default = System.Collections.Generic.EqualityComparer$b1.Of(this.T).Default;
				if (next !== null) {
					if (value !== null) {
					__loop0__: 
						while (!$default.Equals(next.item, value)) {
							next = next.next;
							if (next === this.head) {
								__label0__ = "IL_5A";
								continue __step0__;
							}
						}
						return next;
					}
				__loop1__: 
					while (next.item) {
						next = next.next;
						if (next === this.head) {
							__label0__ = "IL_5A";
							continue __step0__;
						}
					}
					return next;
				}
				__label0__ = "IL_5A";
				continue __step0__;
				break;
			case "IL_5A":
				return null;
				break __step0__;
		}
	}
};
System.Collections.Generic.LinkedList$b1.prototype.FindLast = function (value) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				if (this.head === null) {
					return null;
				}
				var prev = this.head.prev;
				var linkedListNode = prev;
				var $default = System.Collections.Generic.EqualityComparer$b1.Of(this.T).Default;
				if (linkedListNode !== null) {
					if (value !== null) {
					__loop0__: 
						while (!$default.Equals(linkedListNode.item, value)) {
							linkedListNode = linkedListNode.prev;
							if (linkedListNode === prev) {
								__label0__ = "IL_61";
								continue __step0__;
							}
						}
						return linkedListNode;
					}
				__loop1__: 
					while (linkedListNode.item) {
						linkedListNode = linkedListNode.prev;
						if (linkedListNode === prev) {
							__label0__ = "IL_61";
							continue __step0__;
						}
					}
					return linkedListNode;
				}
				__label0__ = "IL_61";
				continue __step0__;
				break;
			case "IL_61":
				return null;
				break __step0__;
		}
	}
};
System.Collections.Generic.LinkedList$b1.prototype.GetEnumerator = function () {
	return new ($asm04.System.Collections.Generic.LinkedList$b1.Enumerator.Of(this.T)) (this);
};
System.Collections.Generic.LinkedList$b1.prototype.IEnumerable$b1_GetEnumerator = function () {
	return this.GetEnumerator();
};
System.Collections.Generic.LinkedList$b1.prototype.Remove$0 = function (value) {
	var linkedListNode = this.Find(value);
	if (linkedListNode !== null) {
		this.InternalRemoveNode(linkedListNode);
		return true;
	}
	return false;
};
System.Collections.Generic.LinkedList$b1.prototype.Remove$1 = function (node) {
	this.ValidateNode(node);
	this.InternalRemoveNode(node);
};
System.Collections.Generic.LinkedList$b1.prototype.RemoveFirst = function () {
	if (this.head === null) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm04.System.SR.GetString$2("LinkedListEmpty")]);
	}
	this.InternalRemoveNode(this.head);
};
System.Collections.Generic.LinkedList$b1.prototype.RemoveLast = function () {
	if (this.head === null) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm04.System.SR.GetString$2("LinkedListEmpty")]);
	}
	this.InternalRemoveNode(this.head.prev);
};
System.Collections.Generic.LinkedList$b1.prototype.InternalInsertNodeBefore = function (node, newNode) {
	newNode.next = node;
	newNode.prev = node.prev;
	node.prev.next = newNode;
	node.prev = newNode;
	++this.version;
	++this.count;
};
System.Collections.Generic.LinkedList$b1.prototype.InternalInsertNodeToEmptyList = function (newNode) {
	newNode.next = newNode;
	newNode.prev = newNode;
	this.head = newNode;
	++this.version;
	++this.count;
};
System.Collections.Generic.LinkedList$b1.prototype.InternalRemoveNode = function (node) {
	if (node.next === node) {
		this.head = null;
	} else {
		node.next.prev = node.prev;
		node.prev.next = node.next;
		if (this.head === node) {
			this.head = node.next;
		}
	}
	node.Invalidate();
	--this.count;
	++this.version;
};
System.Collections.Generic.LinkedList$b1.prototype.ValidateNewNode = function (node) {
	if (node === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["node"]);
	}
	if (node.list !== null) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm04.System.SR.GetString$2("LinkedListNodeIsAttached")]);
	}
};
System.Collections.Generic.LinkedList$b1.prototype.ValidateNode = function (node) {
	if (node === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["node"]);
	}
	if (node.list !== this) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm04.System.SR.GetString$2("ExternalLinkedListNode")]);
	}
};
System.Collections.Generic.LinkedList$b1.prototype.ICollection_get_IsSynchronized = function () {
	return false;
};
System.Collections.Generic.LinkedList$b1.prototype.ICollection_get_SyncRoot = function () {
	if (this._syncRoot === null) {
		System.Threading.Interlocked.CompareExchange$b1(System.Object)(/* ref */ new JSIL.MemberReference(this, "_syncRoot"), new System.Object(), null);
	}
	return this._syncRoot;
};
System.Collections.Generic.LinkedList$b1.prototype.ICollection_CopyTo = function (array, index) {
	if (array === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["array"]);
	}
	if (array.Rank !== 1) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm04.System.SR.GetString$2("Arg_MultiRank")]);
	}
	if (0 !== 0) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm04.System.SR.GetString$2("Arg_NonZeroLowerBound")]);
	}
	if (index < 0) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", ["index", $asm04.System.SR.GetString$0("IndexOutOfRange", [index])]);
	}
	if ((array.length - index) < this.Count) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm04.System.SR.GetString$2("Arg_InsufficientSpace")]);
	}
	var array2 = JSIL.TryCast(array, System.Array.Of(this.T));
	if (array2 !== null) {
		this.CopyTo(array2, index);
		return;
	}
	var elementType = JSIL.GetType(array).GetElementType();
	var typeFromHandle = this.T;
	if (!(elementType.IsAssignableFrom(typeFromHandle) || typeFromHandle.IsAssignableFrom(elementType))) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm04.System.SR.GetString$2("Invalid_Array_Type")]);
	}
	var array3 = JSIL.TryCast(array, System.Array.Of(System.Object));
	if (array3 === null) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm04.System.SR.GetString$2("Invalid_Array_Type")]);
	}
	var next = this.head;
	try {
		if (next !== null) {
		__loop0__: 
			do {
				array3[index++] = next.item;
				next = next.next;
			} while (next !== this.head);
		}
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.ArrayTypeMismatchException)) {
			throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm04.System.SR.GetString$2("Invalid_Array_Type")]);
		} else {
			throw $exception;
		}
	}
};
System.Collections.Generic.LinkedList$b1.prototype.IEnumerable_GetEnumerator = function () {
	return this.GetEnumerator();
};
JSIL.OverloadedMethod(System.Collections.Generic.LinkedList$b1.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType)]]
	]);
JSIL.OverloadedMethod(System.Collections.Generic.LinkedList$b1.prototype, "AddAfter", [
		["AddAfter$0", [System.Collections.Generic.LinkedListNode$b1.Of(JSIL.AnyType), JSIL.AnyType]], 
		["AddAfter$1", [System.Collections.Generic.LinkedListNode$b1.Of(JSIL.AnyType), System.Collections.Generic.LinkedListNode$b1.Of(JSIL.AnyType)]]
	]);
JSIL.OverloadedMethod(System.Collections.Generic.LinkedList$b1.prototype, "AddBefore", [
		["AddBefore$0", [System.Collections.Generic.LinkedListNode$b1.Of(JSIL.AnyType), JSIL.AnyType]], 
		["AddBefore$1", [System.Collections.Generic.LinkedListNode$b1.Of(JSIL.AnyType), System.Collections.Generic.LinkedListNode$b1.Of(JSIL.AnyType)]]
	]);
JSIL.OverloadedMethod(System.Collections.Generic.LinkedList$b1.prototype, "AddFirst", [
		["AddFirst$0", [JSIL.AnyType]], 
		["AddFirst$1", [System.Collections.Generic.LinkedListNode$b1.Of(JSIL.AnyType)]]
	]);
JSIL.OverloadedMethod(System.Collections.Generic.LinkedList$b1.prototype, "AddLast", [
		["AddLast$0", [JSIL.AnyType]], 
		["AddLast$1", [System.Collections.Generic.LinkedListNode$b1.Of(JSIL.AnyType)]]
	]);
JSIL.OverloadedMethod(System.Collections.Generic.LinkedList$b1.prototype, "Remove", [
		["Remove$0", [JSIL.AnyType]], 
		["Remove$1", [System.Collections.Generic.LinkedListNode$b1.Of(JSIL.AnyType)]]
	]);
JSIL.MakeProperty(System.Collections.Generic.LinkedList$b1.prototype, "Count", 
	System.Collections.Generic.LinkedList$b1.prototype.get_Count, null);
JSIL.MakeProperty(System.Collections.Generic.LinkedList$b1.prototype, "First", 
	System.Collections.Generic.LinkedList$b1.prototype.get_First, null);
JSIL.MakeProperty(System.Collections.Generic.LinkedList$b1.prototype, "Last", 
	System.Collections.Generic.LinkedList$b1.prototype.get_Last, null);
JSIL.MakeProperty(System.Collections.Generic.LinkedList$b1.prototype, "ICollection$b1_IsReadOnly", 
	System.Collections.Generic.LinkedList$b1.prototype.ICollection$b1_get_IsReadOnly, null);
JSIL.MakeProperty(System.Collections.Generic.LinkedList$b1.prototype, "ICollection_IsSynchronized", 
	System.Collections.Generic.LinkedList$b1.prototype.ICollection_get_IsSynchronized, null);
JSIL.MakeProperty(System.Collections.Generic.LinkedList$b1.prototype, "ICollection_SyncRoot", 
	System.Collections.Generic.LinkedList$b1.prototype.ICollection_get_SyncRoot, null);
Object.defineProperty(System.Collections.Generic.LinkedList$b1, "VersionName", {
		"value": "Version"}
);
Object.defineProperty(System.Collections.Generic.LinkedList$b1, "CountName", {
		"value": "Count"}
);
Object.defineProperty(System.Collections.Generic.LinkedList$b1, "ValuesName", {
		"value": "Data"}
);
System.Collections.Generic.LinkedList$b1.prototype.head = null;
System.Collections.Generic.LinkedList$b1.prototype.count = 0;
System.Collections.Generic.LinkedList$b1.prototype.version = 0;
System.Collections.Generic.LinkedList$b1.prototype._syncRoot = null;

$asm04.System.Collections.Generic.LinkedList$b1.Enumerator.prototype._ctor = function (list) {
	this.list = list;
	this.version = list.version;
	this.node = list.head;
	this.current = null;
	this.index = 0;
};
$asm04.System.Collections.Generic.LinkedList$b1.Enumerator.prototype.get_Current = function () {
	return this.current;
};
$asm04.System.Collections.Generic.LinkedList$b1.Enumerator.prototype.IEnumerator_get_Current = function () {
	if (!((this.index !== 0) && (this.index !== (this.list.Count + 1)))) {
		$asm04.System.ThrowHelper.ThrowInvalidOperationException(System.ExceptionResource.NotSupported_KeyCollectionSet);
	}
	return this.current;
};
$asm04.System.Collections.Generic.LinkedList$b1.Enumerator.prototype.MoveNext = function () {
	if (this.version !== this.list.version) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm04.System.SR.GetString$2("InvalidOperation_EnumFailedVersion")]);
	}
	if (this.node === null) {
		this.index = (this.list.Count + 1);
		return false;
	}
	++this.index;
	this.current = this.node.item;
	this.node = this.node.next;
	if (this.node === this.list.head) {
		this.node = null;
	}
	return true;
};
$asm04.System.Collections.Generic.LinkedList$b1.Enumerator.prototype.IEnumerator_Reset = function () {
	if (this.version !== this.list.version) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm04.System.SR.GetString$2("InvalidOperation_EnumFailedVersion")]);
	}
	this.current = null;
	this.node = this.list.head;
	this.index = 0;
};
$asm04.System.Collections.Generic.LinkedList$b1.Enumerator.prototype.Dispose = function () {
};
JSIL.MakeProperty($asm04.System.Collections.Generic.LinkedList$b1.Enumerator.prototype, "Current", 
	$asm04.System.Collections.Generic.LinkedList$b1.Enumerator.prototype.get_Current, null);
JSIL.MakeProperty($asm04.System.Collections.Generic.LinkedList$b1.Enumerator.prototype, "IEnumerator_Current", 
	$asm04.System.Collections.Generic.LinkedList$b1.Enumerator.prototype.IEnumerator_get_Current, null);
Object.defineProperty($asm04.System.Collections.Generic.LinkedList$b1.Enumerator, "LinkedListName", {
		"value": "LinkedList"}
);
Object.defineProperty($asm04.System.Collections.Generic.LinkedList$b1.Enumerator, "CurrentValueName", {
		"value": "Current"}
);
Object.defineProperty($asm04.System.Collections.Generic.LinkedList$b1.Enumerator, "VersionName", {
		"value": "Version"}
);
Object.defineProperty($asm04.System.Collections.Generic.LinkedList$b1.Enumerator, "IndexName", {
		"value": "Index"}
);
$asm04.System.Collections.Generic.LinkedList$b1.Enumerator.prototype.list = null;
$asm04.System.Collections.Generic.LinkedList$b1.Enumerator.prototype.node = null;
$asm04.System.Collections.Generic.LinkedList$b1.Enumerator.prototype.version = 0;
$asm04.System.Collections.Generic.LinkedList$b1.Enumerator.prototype.current = null;
$asm04.System.Collections.Generic.LinkedList$b1.Enumerator.prototype.index = 0;

System.Collections.Generic.LinkedListNode$b1.prototype._ctor$0 = function (value) {
	System.Object.prototype._ctor.call(this);
	this.item = value;
};
System.Collections.Generic.LinkedListNode$b1.prototype._ctor$1 = function (list, value) {
	System.Object.prototype._ctor.call(this);
	this.list = list;
	this.item = value;
};
System.Collections.Generic.LinkedListNode$b1.prototype.get_List = function () {
	return this.list;
};
System.Collections.Generic.LinkedListNode$b1.prototype.get_Next = function () {
	if (!((this.next === null) || (this.next === this.list.head))) {
		return this.next;
	}
	return null;
};
System.Collections.Generic.LinkedListNode$b1.prototype.get_Previous = function () {
	if (!((this.prev === null) || (this === this.list.head))) {
		return this.prev;
	}
	return null;
};
System.Collections.Generic.LinkedListNode$b1.prototype.get_Value = function () {
	return this.item;
};
System.Collections.Generic.LinkedListNode$b1.prototype.set_Value = function (value) {
	this.item = value;
};
System.Collections.Generic.LinkedListNode$b1.prototype.Invalidate = function () {
	this.list = null;
	this.next = null;
	this.prev = null;
};
JSIL.OverloadedMethod(System.Collections.Generic.LinkedListNode$b1.prototype, "_ctor", [
		["_ctor$0", [JSIL.AnyType]], 
		["_ctor$1", [System.Collections.Generic.LinkedList$b1.Of(JSIL.AnyType), JSIL.AnyType]]
	]);
JSIL.MakeProperty(System.Collections.Generic.LinkedListNode$b1.prototype, "List", 
	System.Collections.Generic.LinkedListNode$b1.prototype.get_List, null);
JSIL.MakeProperty(System.Collections.Generic.LinkedListNode$b1.prototype, "Next", 
	System.Collections.Generic.LinkedListNode$b1.prototype.get_Next, null);
JSIL.MakeProperty(System.Collections.Generic.LinkedListNode$b1.prototype, "Previous", 
	System.Collections.Generic.LinkedListNode$b1.prototype.get_Previous, null);
JSIL.MakeProperty(System.Collections.Generic.LinkedListNode$b1.prototype, "Value", 
	System.Collections.Generic.LinkedListNode$b1.prototype.get_Value, System.Collections.Generic.LinkedListNode$b1.prototype.set_Value);
System.Collections.Generic.LinkedListNode$b1.prototype.list = null;
System.Collections.Generic.LinkedListNode$b1.prototype.next = null;
System.Collections.Generic.LinkedListNode$b1.prototype.prev = null;
System.Collections.Generic.LinkedListNode$b1.prototype.item = null;

System.Collections.Generic.Queue$b1.prototype._ctor$0 = function () {
	System.Object.prototype._ctor.call(this);
	this._array = System.Collections.Generic.Queue$b1.Of(this.T)._emptyArray;
};
System.Collections.Generic.Queue$b1.prototype._ctor$1 = function (capacity) {
	System.Object.prototype._ctor.call(this);
	if (capacity < 0) {
		$asm04.System.ThrowHelper.ThrowArgumentOutOfRangeException$2(System.ExceptionArgument.queue, System.ExceptionResource.Argument_InvalidArgumentForComparison);
	}
	this._array = JSIL.Array.New(this.T, capacity);
	this._head = 0;
	this._tail = 0;
	this._size = 0;
};
System.Collections.Generic.Queue$b1.prototype._ctor$2 = function (collection) {
	System.Object.prototype._ctor.call(this);
	if (collection === null) {
		$asm04.System.ThrowHelper.ThrowArgumentNullException(System.ExceptionArgument.key);
	}
	this._array = JSIL.Array.New(this.T, 4);
	this._size = 0;
	this._version = 0;
	var enumerator = collection.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			this.Enqueue(enumerator.IEnumerator$b1_Current);
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
};
System.Collections.Generic.Queue$b1.prototype.get_Count = function () {
	return this._size;
};
System.Collections.Generic.Queue$b1.prototype.ICollection_get_IsSynchronized = function () {
	return false;
};
System.Collections.Generic.Queue$b1.prototype.ICollection_get_SyncRoot = function () {
	if (this._syncRoot === null) {
		System.Threading.Interlocked.CompareExchange$b1(System.Object)(/* ref */ new JSIL.MemberReference(this, "_syncRoot"), new System.Object(), null);
	}
	return this._syncRoot;
};
System.Collections.Generic.Queue$b1.prototype.Clear = function () {
	if (this._head < this._tail) {
		System.Array.Clear(this._array, this._head, this._size);
	} else {
		System.Array.Clear(this._array, this._head, (this._array.length - this._head));
		System.Array.Clear(this._array, 0, this._tail);
	}
	this._head = 0;
	this._tail = 0;
	this._size = 0;
	++this._version;
};
System.Collections.Generic.Queue$b1.prototype.CopyTo = function (array, arrayIndex) {
	if (array === null) {
		$asm04.System.ThrowHelper.ThrowArgumentNullException(System.ExceptionArgument.dictionaryCreationThreshold);
	}
	if (!((arrayIndex >= 0) && (arrayIndex <= array.length))) {
		$asm04.System.ThrowHelper.ThrowArgumentOutOfRangeException$2(System.ExceptionArgument.value, System.ExceptionResource.Arg_RegSubKeyValueAbsent);
	}
	var num = array.length;
	if ((num - arrayIndex) < this._size) {
		$asm04.System.ThrowHelper.ThrowArgumentException$0(System.ExceptionResource.Argument_AddingDuplicate);
	}
	var num2 = ((num - arrayIndex) < this._size) ? (num - arrayIndex) : this._size;
	if (num2 === 0) {
		return;
	}
	var num3 = ((this._array.length - this._head) < num2) ? (this._array.length - this._head) : num2;
	System.Array.Copy$1(
		this._array, 
		this._head, 
		array, 
		arrayIndex, 
		num3
	);
	num2 -= num3;
	if (num2 > 0) {
		System.Array.Copy$1(
			this._array, 
			0, 
			array, 
			((arrayIndex + this._array.length) - this._head), 
			num2
		);
	}
};
System.Collections.Generic.Queue$b1.prototype.ICollection_CopyTo = function (array, index) {
	if (array === null) {
		$asm04.System.ThrowHelper.ThrowArgumentNullException(System.ExceptionArgument.dictionaryCreationThreshold);
	}
	if (array.Rank !== 1) {
		$asm04.System.ThrowHelper.ThrowArgumentException$0(System.ExceptionResource.Arg_RegKeyDelHive);
	}
	if (0 !== 0) {
		$asm04.System.ThrowHelper.ThrowArgumentException$0(System.ExceptionResource.Arg_RegKeyStrLenBug);
	}
	var length = array.length;
	if (!((index >= 0) && (index <= length))) {
		$asm04.System.ThrowHelper.ThrowArgumentOutOfRangeException$2(System.ExceptionArgument.stack, System.ExceptionResource.Arg_RegSubKeyValueAbsent);
	}
	if ((length - index) < this._size) {
		$asm04.System.ThrowHelper.ThrowArgumentException$0(System.ExceptionResource.Argument_AddingDuplicate);
	}
	var num = ((length - index) < this._size) ? (length - index) : this._size;
	if (num === 0) {
		return;
	}
	try {
		var num2 = ((this._array.length - this._head) < num) ? (this._array.length - this._head) : num;
		System.Array.Copy$1(
			this._array, 
			this._head, 
			array, 
			index, 
			num2
		);
		num -= num2;
		if (num > 0) {
			System.Array.Copy$1(
				this._array, 
				0, 
				array, 
				((index + this._array.length) - this._head), 
				num
			);
		}
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.ArrayTypeMismatchException)) {
			$asm04.System.ThrowHelper.ThrowArgumentException$0(System.ExceptionResource.Arg_RegSetStrArrNull);
		} else {
			throw $exception;
		}
	}
};
System.Collections.Generic.Queue$b1.prototype.Enqueue = function (item) {
	if (this._size === this._array.length) {
		var num = Math.floor((this._array.length * 200) / 100);
		if (num < (this._array.length + 4)) {
			num = (this._array.length + 4);
		}
		this.SetCapacity(num);
	}
	this._array[this._tail] = item;
	this._tail = ((this._tail + 1) % this._array.length);
	++this._size;
	++this._version;
};
System.Collections.Generic.Queue$b1.prototype.GetEnumerator = function () {
	return new ($asm04.System.Collections.Generic.Queue$b1.Enumerator.Of(this.T)) (this);
};
System.Collections.Generic.Queue$b1.prototype.IEnumerable$b1_GetEnumerator = function () {
	return new ($asm04.System.Collections.Generic.Queue$b1.Enumerator.Of(this.T)) (this);
};
System.Collections.Generic.Queue$b1.prototype.IEnumerable_GetEnumerator = function () {
	return new ($asm04.System.Collections.Generic.Queue$b1.Enumerator.Of(this.T)) (this);
};
System.Collections.Generic.Queue$b1.prototype.Dequeue = function () {
	if (this._size === 0) {
		$asm04.System.ThrowHelper.ThrowInvalidOperationException(System.ExceptionResource.Argument_InvalidArrayType);
	}
	this._array[this._head] = null;
	this._head = ((this._head + 1) % this._array.length);
	--this._size;
	++this._version;
	return this._array[this._head];
};
System.Collections.Generic.Queue$b1.prototype.Peek = function () {
	if (this._size === 0) {
		$asm04.System.ThrowHelper.ThrowInvalidOperationException(System.ExceptionResource.Argument_InvalidArrayType);
	}
	return this._array[this._head];
};
System.Collections.Generic.Queue$b1.prototype.Contains = function (item) {
	var num = this._head;
	var size = this._size;
	var $default = System.Collections.Generic.EqualityComparer$b1.Of(this.T).Default;
__loop0__: 
	while (size-- > 0) {
		if (item === null) {
			if (this._array[num] === null) {
				return true;
			}
		} else if (!((this._array[num] === null) || !$default.Equals(this._array[num], item))) {
			return true;
		}
		num = ((num + 1) % this._array.length);
	}
	return false;
};
System.Collections.Generic.Queue$b1.prototype.GetElement = function (i) {
	return this._array[((this._head + i) % this._array.length)];
};
System.Collections.Generic.Queue$b1.prototype.ToArray = function () {
	var array = JSIL.Array.New(this.T, this._size);
	if (this._size === 0) {
		return array;
	}
	if (this._head < this._tail) {
		System.Array.Copy$1(
			this._array, 
			this._head, 
			array, 
			0, 
			this._size
		);
	} else {
		System.Array.Copy$1(
			this._array, 
			this._head, 
			array, 
			0, 
			(this._array.length - this._head)
		);
		System.Array.Copy$1(
			this._array, 
			0, 
			array, 
			(this._array.length - this._head), 
			this._tail
		);
	}
	return array;
};
System.Collections.Generic.Queue$b1.prototype.SetCapacity = function (capacity) {
	var array = JSIL.Array.New(this.T, capacity);
	if (this._size > 0) {
		if (this._head < this._tail) {
			System.Array.Copy$1(
				this._array, 
				this._head, 
				array, 
				0, 
				this._size
			);
		} else {
			System.Array.Copy$1(
				this._array, 
				this._head, 
				array, 
				0, 
				(this._array.length - this._head)
			);
			System.Array.Copy$1(
				this._array, 
				0, 
				array, 
				(this._array.length - this._head), 
				this._tail
			);
		}
	}
	this._array = array;
	this._head = 0;
	this._tail = (this._size === capacity) ? 0 : this._size;
	++this._version;
};
System.Collections.Generic.Queue$b1.prototype.TrimExcess = function () {
	var num = (this._array.length * 0.9);
	if (this._size < num) {
		this.SetCapacity(this._size);
	}
};
JSIL.OverloadedMethod(System.Collections.Generic.Queue$b1.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Int32]], 
		["_ctor$2", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType)]]
	]);
JSIL.MakeProperty(System.Collections.Generic.Queue$b1.prototype, "Count", 
	System.Collections.Generic.Queue$b1.prototype.get_Count, null);
JSIL.MakeProperty(System.Collections.Generic.Queue$b1.prototype, "ICollection_IsSynchronized", 
	System.Collections.Generic.Queue$b1.prototype.ICollection_get_IsSynchronized, null);
JSIL.MakeProperty(System.Collections.Generic.Queue$b1.prototype, "ICollection_SyncRoot", 
	System.Collections.Generic.Queue$b1.prototype.ICollection_get_SyncRoot, null);
Object.defineProperty(System.Collections.Generic.Queue$b1, "_MinimumGrow", {
		"value": 4}
);
Object.defineProperty(System.Collections.Generic.Queue$b1, "_ShrinkThreshold", {
		"value": 32}
);
Object.defineProperty(System.Collections.Generic.Queue$b1, "_GrowFactor", {
		"value": 200}
);
Object.defineProperty(System.Collections.Generic.Queue$b1, "_DefaultCapacity", {
		"value": 4}
);
System.Collections.Generic.Queue$b1.prototype._array = null;
System.Collections.Generic.Queue$b1.prototype._head = 0;
System.Collections.Generic.Queue$b1.prototype._tail = 0;
System.Collections.Generic.Queue$b1.prototype._size = 0;
System.Collections.Generic.Queue$b1.prototype._version = 0;
System.Collections.Generic.Queue$b1.prototype._syncRoot = null;
System.Collections.Generic.Queue$b1._emptyArray = null;
System.Collections.Generic.Queue$b1._cctor = function () {
	System.Collections.Generic.Queue$b1.Of(this.T)._emptyArray = JSIL.Array.New(this.T, 0);
};

$asm04.System.Collections.Generic.Queue$b1.Enumerator.prototype._ctor = function (q) {
	this._q = q;
	this._version = this._q._version;
	this._index = -1;
	this._currentElement = null;
};
$asm04.System.Collections.Generic.Queue$b1.Enumerator.prototype.Dispose = function () {
	this._index = -2;
	this._currentElement = null;
};
$asm04.System.Collections.Generic.Queue$b1.Enumerator.prototype.MoveNext = function () {
	if (this._version !== this._q._version) {
		$asm04.System.ThrowHelper.ThrowInvalidOperationException(System.ExceptionResource.NotSupported_ValueCollectionSet);
	}
	if (this._index === -2) {
		return false;
	}
	++this._index;
	if (this._index === this._q._size) {
		this._index = -2;
		this._currentElement = null;
		return false;
	}
	this._currentElement = this._q.GetElement(this._index);
	return true;
};
$asm04.System.Collections.Generic.Queue$b1.Enumerator.prototype.get_Current = function () {
	if (this._index < 0) {
		if (this._index === -1) {
			$asm04.System.ThrowHelper.ThrowInvalidOperationException(System.ExceptionResource.ArgumentOutOfRange_Index);
		} else {
			$asm04.System.ThrowHelper.ThrowInvalidOperationException(System.ExceptionResource.Argument_InvalidOffLen);
		}
	}
	return this._currentElement;
};
$asm04.System.Collections.Generic.Queue$b1.Enumerator.prototype.IEnumerator_get_Current = function () {
	if (this._index < 0) {
		if (this._index === -1) {
			$asm04.System.ThrowHelper.ThrowInvalidOperationException(System.ExceptionResource.ArgumentOutOfRange_Index);
		} else {
			$asm04.System.ThrowHelper.ThrowInvalidOperationException(System.ExceptionResource.Argument_InvalidOffLen);
		}
	}
	return this._currentElement;
};
$asm04.System.Collections.Generic.Queue$b1.Enumerator.prototype.IEnumerator_Reset = function () {
	if (this._version !== this._q._version) {
		$asm04.System.ThrowHelper.ThrowInvalidOperationException(System.ExceptionResource.NotSupported_ValueCollectionSet);
	}
	this._index = -1;
	this._currentElement = null;
};
JSIL.MakeProperty($asm04.System.Collections.Generic.Queue$b1.Enumerator.prototype, "Current", 
	$asm04.System.Collections.Generic.Queue$b1.Enumerator.prototype.get_Current, null);
JSIL.MakeProperty($asm04.System.Collections.Generic.Queue$b1.Enumerator.prototype, "IEnumerator_Current", 
	$asm04.System.Collections.Generic.Queue$b1.Enumerator.prototype.IEnumerator_get_Current, null);
$asm04.System.Collections.Generic.Queue$b1.Enumerator.prototype._q = null;
$asm04.System.Collections.Generic.Queue$b1.Enumerator.prototype._index = 0;
$asm04.System.Collections.Generic.Queue$b1.Enumerator.prototype._version = 0;
$asm04.System.Collections.Generic.Queue$b1.Enumerator.prototype._currentElement = null;

System.Collections.Generic.Stack$b1.prototype._ctor$0 = function () {
	System.Object.prototype._ctor.call(this);
	this._array = System.Collections.Generic.Stack$b1.Of(this.T)._emptyArray;
	this._size = 0;
	this._version = 0;
};
System.Collections.Generic.Stack$b1.prototype._ctor$1 = function (capacity) {
	System.Object.prototype._ctor.call(this);
	if (capacity < 0) {
		$asm04.System.ThrowHelper.ThrowArgumentOutOfRangeException$2(System.ExceptionArgument.queue, System.ExceptionResource.Argument_InvalidArgumentForComparison);
	}
	this._array = JSIL.Array.New(this.T, capacity);
	this._size = 0;
	this._version = 0;
};
System.Collections.Generic.Stack$b1.prototype._ctor$2 = function (collection) {
	System.Object.prototype._ctor.call(this);
	if (collection === null) {
		$asm04.System.ThrowHelper.ThrowArgumentNullException(System.ExceptionArgument.key);
	}
	var collection2 = JSIL.TryCast(collection, System.Collections.Generic.ICollection$b1.Of(this.T));
	if (collection2 !== null) {
		var count = collection2.ICollection$b1_Count;
		this._array = JSIL.Array.New(this.T, count);
		collection2.ICollection$b1_CopyTo(this._array, 0);
		this._size = count;
		return;
	}
	this._size = 0;
	this._array = JSIL.Array.New(this.T, 4);
	var enumerator = collection.IEnumerable$b1_GetEnumerator();
	try {
	__loop0__: 
		while (enumerator.IEnumerator_MoveNext()) {
			this.Push(enumerator.IEnumerator$b1_Current);
		}
	} finally {
		if (enumerator !== null) {
			enumerator.IDisposable_Dispose();
		}
	}
};
System.Collections.Generic.Stack$b1.prototype.get_Count = function () {
	return this._size;
};
System.Collections.Generic.Stack$b1.prototype.ICollection_get_IsSynchronized = function () {
	return false;
};
System.Collections.Generic.Stack$b1.prototype.ICollection_get_SyncRoot = function () {
	if (this._syncRoot === null) {
		System.Threading.Interlocked.CompareExchange$b1(System.Object)(/* ref */ new JSIL.MemberReference(this, "_syncRoot"), new System.Object(), null);
	}
	return this._syncRoot;
};
System.Collections.Generic.Stack$b1.prototype.Clear = function () {
	System.Array.Clear(this._array, 0, this._size);
	this._size = 0;
	++this._version;
};
System.Collections.Generic.Stack$b1.prototype.Contains = function (item) {
	var size = this._size;
	var $default = System.Collections.Generic.EqualityComparer$b1.Of(this.T).Default;
__loop0__: 
	while (size-- > 0) {
		if (item === null) {
			if (this._array[size] === null) {
				return true;
			}
		} else if (!((this._array[size] === null) || !$default.Equals(this._array[size], item))) {
			return true;
		}
	}
	return false;
};
System.Collections.Generic.Stack$b1.prototype.CopyTo = function (array, arrayIndex) {
	if (array === null) {
		$asm04.System.ThrowHelper.ThrowArgumentNullException(System.ExceptionArgument.dictionaryCreationThreshold);
	}
	if (!((arrayIndex >= 0) && (arrayIndex <= array.length))) {
		$asm04.System.ThrowHelper.ThrowArgumentOutOfRangeException$2(System.ExceptionArgument.value, System.ExceptionResource.Argument_InvalidType);
	}
	if ((array.length - arrayIndex) < this._size) {
		$asm04.System.ThrowHelper.ThrowArgumentException$0(System.ExceptionResource.Argument_AddingDuplicate);
	}
	System.Array.Copy$1(
		this._array, 
		0, 
		array, 
		arrayIndex, 
		this._size
	);
	System.Array.Reverse$1(array, arrayIndex, this._size);
};
System.Collections.Generic.Stack$b1.prototype.ICollection_CopyTo = function (array, arrayIndex) {
	if (array === null) {
		$asm04.System.ThrowHelper.ThrowArgumentNullException(System.ExceptionArgument.dictionaryCreationThreshold);
	}
	if (array.Rank !== 1) {
		$asm04.System.ThrowHelper.ThrowArgumentException$0(System.ExceptionResource.Arg_RegKeyDelHive);
	}
	if (0 !== 0) {
		$asm04.System.ThrowHelper.ThrowArgumentException$0(System.ExceptionResource.Arg_RegKeyStrLenBug);
	}
	if (!((arrayIndex >= 0) && (arrayIndex <= array.length))) {
		$asm04.System.ThrowHelper.ThrowArgumentOutOfRangeException$2(System.ExceptionArgument.value, System.ExceptionResource.Argument_InvalidType);
	}
	if ((array.length - arrayIndex) < this._size) {
		$asm04.System.ThrowHelper.ThrowArgumentException$0(System.ExceptionResource.Argument_AddingDuplicate);
	}
	try {
		System.Array.Copy$1(
			this._array, 
			0, 
			array, 
			arrayIndex, 
			this._size
		);
		System.Array.Reverse$1(array, arrayIndex, this._size);
	} catch ($exception) {
		if (JSIL.CheckType($exception, System.ArrayTypeMismatchException)) {
			$asm04.System.ThrowHelper.ThrowArgumentException$0(System.ExceptionResource.Arg_RegSetStrArrNull);
		} else {
			throw $exception;
		}
	}
};
System.Collections.Generic.Stack$b1.prototype.GetEnumerator = function () {
	return new ($asm04.System.Collections.Generic.Stack$b1.Enumerator.Of(this.T)) (this);
};
System.Collections.Generic.Stack$b1.prototype.IEnumerable$b1_GetEnumerator = function () {
	return new ($asm04.System.Collections.Generic.Stack$b1.Enumerator.Of(this.T)) (this);
};
System.Collections.Generic.Stack$b1.prototype.IEnumerable_GetEnumerator = function () {
	return new ($asm04.System.Collections.Generic.Stack$b1.Enumerator.Of(this.T)) (this);
};
System.Collections.Generic.Stack$b1.prototype.TrimExcess = function () {
	var num = (this._array.length * 0.9);
	if (this._size < num) {
		var array = JSIL.Array.New(this.T, this._size);
		System.Array.Copy$1(
			this._array, 
			0, 
			array, 
			0, 
			this._size
		);
		this._array = array;
		++this._version;
	}
};
System.Collections.Generic.Stack$b1.prototype.Peek = function () {
	if (this._size === 0) {
		$asm04.System.ThrowHelper.ThrowInvalidOperationException(System.ExceptionResource.ArgumentOutOfRange_SmallCapacity);
	}
	return this._array[(this._size - 1)];
};
System.Collections.Generic.Stack$b1.prototype.Pop = function () {
	if (this._size === 0) {
		$asm04.System.ThrowHelper.ThrowInvalidOperationException(System.ExceptionResource.ArgumentOutOfRange_SmallCapacity);
	}
	++this._version;
	this._array[this._size] = null;
	return this._array[--this._size];
};
System.Collections.Generic.Stack$b1.prototype.Push = function (item) {
	if (this._size === this._array.length) {
		var array = JSIL.Array.New(this.T, (this._array.length === 0) ? 4 : (2 * this._array.length));
		System.Array.Copy$1(
			this._array, 
			0, 
			array, 
			0, 
			this._size
		);
		this._array = array;
	}
	this._array[this._size++] = item;
	++this._version;
};
System.Collections.Generic.Stack$b1.prototype.ToArray = function () {
	var array = JSIL.Array.New(this.T, this._size);
__loop0__: 
	for (var i = 0; i < this._size; ++i) {
		array[i] = this._array[((this._size - i) - 1)];
	}
	return array;
};
JSIL.OverloadedMethod(System.Collections.Generic.Stack$b1.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Int32]], 
		["_ctor$2", [System.Collections.Generic.IEnumerable$b1.Of(JSIL.AnyType)]]
	]);
JSIL.MakeProperty(System.Collections.Generic.Stack$b1.prototype, "Count", 
	System.Collections.Generic.Stack$b1.prototype.get_Count, null);
JSIL.MakeProperty(System.Collections.Generic.Stack$b1.prototype, "ICollection_IsSynchronized", 
	System.Collections.Generic.Stack$b1.prototype.ICollection_get_IsSynchronized, null);
JSIL.MakeProperty(System.Collections.Generic.Stack$b1.prototype, "ICollection_SyncRoot", 
	System.Collections.Generic.Stack$b1.prototype.ICollection_get_SyncRoot, null);
Object.defineProperty(System.Collections.Generic.Stack$b1, "_defaultCapacity", {
		"value": 4}
);
System.Collections.Generic.Stack$b1.prototype._array = null;
System.Collections.Generic.Stack$b1.prototype._size = 0;
System.Collections.Generic.Stack$b1.prototype._version = 0;
System.Collections.Generic.Stack$b1.prototype._syncRoot = null;
System.Collections.Generic.Stack$b1._emptyArray = null;
System.Collections.Generic.Stack$b1._cctor = function () {
	System.Collections.Generic.Stack$b1.Of(this.T)._emptyArray = JSIL.Array.New(this.T, 0);
};

$asm04.System.Collections.Generic.Stack$b1.Enumerator.prototype._ctor = function (stack) {
	this._stack = stack;
	this._version = this._stack._version;
	this._index = -2;
	this.currentElement = null;
};
$asm04.System.Collections.Generic.Stack$b1.Enumerator.prototype.Dispose = function () {
	this._index = -1;
};
$asm04.System.Collections.Generic.Stack$b1.Enumerator.prototype.MoveNext = function () {
	if (this._version !== this._stack._version) {
		$asm04.System.ThrowHelper.ThrowInvalidOperationException(System.ExceptionResource.NotSupported_ValueCollectionSet);
	}
	if (this._index === -2) {
		this._index = (this._stack._size - 1);
		var flag = (this._index >= 0);
		if (flag) {
			this.currentElement = this._stack._array[this._index];
		}
		return flag;
	}
	if (this._index === -1) {
		return false;
	}
	flag = (--this._index >= 0);
	if (flag) {
		this.currentElement = this._stack._array[this._index];
	} else {
		this.currentElement = null;
	}
	return flag;
};
$asm04.System.Collections.Generic.Stack$b1.Enumerator.prototype.get_Current = function () {
	if (this._index === -2) {
		$asm04.System.ThrowHelper.ThrowInvalidOperationException(System.ExceptionResource.ArgumentOutOfRange_Index);
	}
	if (this._index === -1) {
		$asm04.System.ThrowHelper.ThrowInvalidOperationException(System.ExceptionResource.Argument_InvalidOffLen);
	}
	return this.currentElement;
};
$asm04.System.Collections.Generic.Stack$b1.Enumerator.prototype.IEnumerator_get_Current = function () {
	if (this._index === -2) {
		$asm04.System.ThrowHelper.ThrowInvalidOperationException(System.ExceptionResource.ArgumentOutOfRange_Index);
	}
	if (this._index === -1) {
		$asm04.System.ThrowHelper.ThrowInvalidOperationException(System.ExceptionResource.Argument_InvalidOffLen);
	}
	return this.currentElement;
};
$asm04.System.Collections.Generic.Stack$b1.Enumerator.prototype.IEnumerator_Reset = function () {
	if (this._version !== this._stack._version) {
		$asm04.System.ThrowHelper.ThrowInvalidOperationException(System.ExceptionResource.NotSupported_ValueCollectionSet);
	}
	this._index = -2;
	this.currentElement = null;
};
JSIL.MakeProperty($asm04.System.Collections.Generic.Stack$b1.Enumerator.prototype, "Current", 
	$asm04.System.Collections.Generic.Stack$b1.Enumerator.prototype.get_Current, null);
JSIL.MakeProperty($asm04.System.Collections.Generic.Stack$b1.Enumerator.prototype, "IEnumerator_Current", 
	$asm04.System.Collections.Generic.Stack$b1.Enumerator.prototype.IEnumerator_get_Current, null);
$asm04.System.Collections.Generic.Stack$b1.Enumerator.prototype._stack = null;
$asm04.System.Collections.Generic.Stack$b1.Enumerator.prototype._index = 0;
$asm04.System.Collections.Generic.Stack$b1.Enumerator.prototype._version = 0;
$asm04.System.Collections.Generic.Stack$b1.Enumerator.prototype.currentElement = null;

$asm04.System.ThrowHelper.ThrowWrongKeyTypeArgumentException = function (key, targetType) {
	throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm04.System.SR.GetString$0("Arg_WrongType", [key, targetType]), "key"]);
};
$asm04.System.ThrowHelper.ThrowWrongValueTypeArgumentException = function (value, targetType) {
	throw JSIL.New(System.ArgumentException, "_ctor$4", [$asm04.System.SR.GetString$0("Arg_WrongType", [value, targetType]), "value"]);
};
$asm04.System.ThrowHelper.ThrowKeyNotFoundException = function () {
	throw JSIL.New(System.Collections.Generic.KeyNotFoundException, "_ctor$0", []);
};
$asm04.System.ThrowHelper.ThrowArgumentException$0 = function (resource) {
	throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm04.System.SR.GetString$2($asm04.System.ThrowHelper.GetResourceName(resource))]);
};
$asm04.System.ThrowHelper.ThrowArgumentNullException = function (argument) {
	throw JSIL.New(System.ArgumentNullException, "_ctor$1", [$asm04.System.ThrowHelper.GetArgumentName(argument)]);
};
$asm04.System.ThrowHelper.ThrowArgumentOutOfRangeException$1 = function (argument) {
	throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", [$asm04.System.ThrowHelper.GetArgumentName(argument)]);
};
$asm04.System.ThrowHelper.ThrowArgumentOutOfRangeException$2 = function (argument, resource) {
	throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$2", [$asm04.System.ThrowHelper.GetArgumentName(argument), $asm04.System.SR.GetString$2($asm04.System.ThrowHelper.GetResourceName(resource))]);
};
$asm04.System.ThrowHelper.ThrowInvalidOperationException = function (resource) {
	throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm04.System.SR.GetString$2($asm04.System.ThrowHelper.GetResourceName(resource))]);
};
$asm04.System.ThrowHelper.ThrowNotSupportedException = function (resource) {
	throw JSIL.New(System.NotSupportedException, "_ctor$1", [$asm04.System.SR.GetString$2($asm04.System.ThrowHelper.GetResourceName(resource))]);
};
$asm04.System.ThrowHelper.IfNullAndNullsAreIllegalThenThrow$b1 = JSIL.GenericMethod(
	["T"], 
	function (T, value, argName) {
		if (!(value || (null === null))) {
			$asm04.System.ThrowHelper.ThrowArgumentNullException(argName);
		}
	}
);
$asm04.System.ThrowHelper.GetArgumentName = function (argument) {
	var result = null;
	switch (Number(argument)) {
		case 0: 
			result = "obj";
			break;
		case 1: 
			result = "dictionary";
			break;
		case 2: 
			result = "array";
			break;
		case 3: 
			result = "info";
			break;
		case 4: 
			result = "key";
			break;
		case 5: 
			result = "collection";
			break;
		case 6: 
			result = "match";
			break;
		case 7: 
			result = "converter";
			break;
		case 8: 
			result = "queue";
			break;
		case 9: 
			result = "stack";
			break;
		case 10: 
			result = "capacity";
			break;
		case 11: 
			result = "index";
			break;
		case 12: 
			result = "startIndex";
			break;
		case 13: 
			result = "value";
			break;
		case 14: 
			result = "count";
			break;
		case 15: 
			result = "arrayIndex";
			break;
		case 16: 
			result = "item";
			break;
		default: 
			return System.String.Empty;
	}
	return result;
};
$asm04.System.ThrowHelper.GetResourceName = function (resource) {
	var result = null;
	switch (Number(resource)) {
		case 0: 
			result = "Argument_ImplementIComparable";
			return result;
		case 1: 
			result = "ArgumentOutOfRange_NeedNonNegNum";
			return result;
		case 2: 
			result = "ArgumentOutOfRange_NeedNonNegNumRequired";
			return result;
		case 3: 
			result = "Arg_ArrayPlusOffTooSmall";
			return result;
		case 4: 
			result = "Argument_AddingDuplicate";
			return result;
		case 8: 
			result = "Arg_MultiRank";
			return result;
		case 9: 
			result = "Arg_NonZeroLowerBound";
			return result;
		case 10: 
			result = "Invalid_Array_Type";
			return result;
		case 11: 
			result = "NotSupported_KeyCollectionSet";
			return result;
		case 12: 
			result = "ArgumentOutOfRange_SmallCapacity";
			return result;
		case 13: 
			result = "ArgumentOutOfRange_Index";
			return result;
		case 14: 
			result = "Argument_InvalidOffLen";
			return result;
		case 16: 
			result = "InvalidOperation_CannotRemoveFromStackOrQueue";
			return result;
		case 17: 
			result = "InvalidOperation_EmptyCollection";
			return result;
		case 18: 
			result = "InvalidOperation_EmptyQueue";
			return result;
		case 19: 
			result = "InvalidOperation_EnumOpCantHappen";
			return result;
		case 20: 
			result = "InvalidOperation_EnumFailedVersion";
			return result;
		case 21: 
			result = "InvalidOperation_EmptyStack";
			return result;
		case 22: 
			result = "InvalidOperation_EnumNotStarted";
			return result;
		case 23: 
			result = "InvalidOperation_EnumEnded";
			return result;
		case 24: 
			result = "NotSupported_SortedListNestedWrite";
			return result;
		case 25: 
			result = "NotSupported_ValueCollectionSet";
			return result;
	}
	return System.String.Empty;
};
JSIL.OverloadedMethod(System.ThrowHelper, "ThrowArgumentOutOfRangeException", [
		["ThrowArgumentOutOfRangeException$0", []], 
		["ThrowArgumentOutOfRangeException$1", [System.ExceptionArgument]], 
		["ThrowArgumentOutOfRangeException$2", [System.ExceptionArgument, System.ExceptionResource]]
	]);
JSIL.OverloadedMethod(System.ThrowHelper, "ThrowArgumentException", [
		["ThrowArgumentException$0", [System.ExceptionResource]], 
		["ThrowArgumentException$1", [System.ExceptionResource, System.ExceptionArgument]]
	]);

System.ComponentModel.EditorBrowsableAttribute.prototype._ctor$0 = function (state) {
	System.Attribute.prototype._ctor.call(this);
	this.browsableState = state;
};
System.ComponentModel.EditorBrowsableAttribute.prototype._ctor$1 = function () {
	this._ctor$0(System.ComponentModel.EditorBrowsableState.Always);
};
System.ComponentModel.EditorBrowsableAttribute.prototype.get_State = function () {
	return this.browsableState;
};
System.ComponentModel.EditorBrowsableAttribute.prototype.Equals = function (obj) {
	if (obj === this) {
		return true;
	}
	var editorBrowsableAttribute = JSIL.TryCast(obj, System.ComponentModel.EditorBrowsableAttribute);
	return ((editorBrowsableAttribute !== null) && (editorBrowsableAttribute.browsableState === this.browsableState));
};
System.ComponentModel.EditorBrowsableAttribute.prototype.GetHashCode = function () {
	return System.Attribute.prototype.GetHashCode.call(this);
};
JSIL.OverloadedMethod(System.ComponentModel.EditorBrowsableAttribute.prototype, "_ctor", [
		["_ctor$0", [System.ComponentModel.EditorBrowsableState]], 
		["_ctor$1", []]
	]);
JSIL.MakeProperty(System.ComponentModel.EditorBrowsableAttribute.prototype, "State", 
	System.ComponentModel.EditorBrowsableAttribute.prototype.get_State, null);
System.ComponentModel.EditorBrowsableAttribute.prototype.browsableState = 0;

System.CodeDom.Compiler.GeneratedCodeAttribute.prototype._ctor = function (tool, version) {
	System.Attribute.prototype._ctor.call(this);
	this.tool = tool;
	this.version = version;
};
System.CodeDom.Compiler.GeneratedCodeAttribute.prototype.get_Tool = function () {
	return this.tool;
};
System.CodeDom.Compiler.GeneratedCodeAttribute.prototype.get_Version = function () {
	return this.version;
};
JSIL.MakeProperty(System.CodeDom.Compiler.GeneratedCodeAttribute.prototype, "Tool", 
	System.CodeDom.Compiler.GeneratedCodeAttribute.prototype.get_Tool, null);
JSIL.MakeProperty(System.CodeDom.Compiler.GeneratedCodeAttribute.prototype, "Version", 
	System.CodeDom.Compiler.GeneratedCodeAttribute.prototype.get_Version, null);
System.CodeDom.Compiler.GeneratedCodeAttribute.prototype.tool = null;
System.CodeDom.Compiler.GeneratedCodeAttribute.prototype.version = null;

System.ComponentModel.ComplexBindingPropertiesAttribute.prototype._ctor$0 = function () {
	System.Attribute.prototype._ctor.call(this);
	this.dataSource = null;
	this.dataMember = null;
};
System.ComponentModel.ComplexBindingPropertiesAttribute.prototype._ctor$1 = function (dataSource) {
	System.Attribute.prototype._ctor.call(this);
	this.dataSource = dataSource;
	this.dataMember = null;
};
System.ComponentModel.ComplexBindingPropertiesAttribute.prototype._ctor$2 = function (dataSource, dataMember) {
	System.Attribute.prototype._ctor.call(this);
	this.dataSource = dataSource;
	this.dataMember = dataMember;
};
System.ComponentModel.ComplexBindingPropertiesAttribute.prototype.get_DataSource = function () {
	return this.dataSource;
};
System.ComponentModel.ComplexBindingPropertiesAttribute.prototype.get_DataMember = function () {
	return this.dataMember;
};
System.ComponentModel.ComplexBindingPropertiesAttribute.prototype.Equals = function (obj) {
	var complexBindingPropertiesAttribute = JSIL.TryCast(obj, System.ComponentModel.ComplexBindingPropertiesAttribute);
	return (!((complexBindingPropertiesAttribute === null) || 
			!(complexBindingPropertiesAttribute.DataSource == this.dataSource)) && (complexBindingPropertiesAttribute.DataMember == this.dataMember));
};
System.ComponentModel.ComplexBindingPropertiesAttribute.prototype.GetHashCode = function () {
	return System.Attribute.prototype.GetHashCode.call(this);
};
JSIL.OverloadedMethod(System.ComponentModel.ComplexBindingPropertiesAttribute.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.String]], 
		["_ctor$2", [System.String, System.String]]
	]);
JSIL.MakeProperty(System.ComponentModel.ComplexBindingPropertiesAttribute.prototype, "DataSource", 
	System.ComponentModel.ComplexBindingPropertiesAttribute.prototype.get_DataSource, null);
JSIL.MakeProperty(System.ComponentModel.ComplexBindingPropertiesAttribute.prototype, "DataMember", 
	System.ComponentModel.ComplexBindingPropertiesAttribute.prototype.get_DataMember, null);
System.ComponentModel.ComplexBindingPropertiesAttribute.prototype.dataSource = null;
System.ComponentModel.ComplexBindingPropertiesAttribute.prototype.dataMember = null;
System.ComponentModel.ComplexBindingPropertiesAttribute.Default = null;
System.ComponentModel.ComplexBindingPropertiesAttribute._cctor = function () {
	System.ComponentModel.ComplexBindingPropertiesAttribute.Default = JSIL.New(System.ComponentModel.ComplexBindingPropertiesAttribute, "_ctor$0", []);
};

System.ComponentModel.DefaultBindingPropertyAttribute.prototype._ctor$0 = function () {
	System.Attribute.prototype._ctor.call(this);
	this.name = null;
};
System.ComponentModel.DefaultBindingPropertyAttribute.prototype._ctor$1 = function (name) {
	System.Attribute.prototype._ctor.call(this);
	this.name = name;
};
System.ComponentModel.DefaultBindingPropertyAttribute.prototype.get_Name = function () {
	return this.name;
};
System.ComponentModel.DefaultBindingPropertyAttribute.prototype.Equals = function (obj) {
	var defaultBindingPropertyAttribute = JSIL.TryCast(obj, System.ComponentModel.DefaultBindingPropertyAttribute);
	return ((defaultBindingPropertyAttribute !== null) && (defaultBindingPropertyAttribute.Name == this.name));
};
System.ComponentModel.DefaultBindingPropertyAttribute.prototype.GetHashCode = function () {
	return System.Attribute.prototype.GetHashCode.call(this);
};
JSIL.OverloadedMethod(System.ComponentModel.DefaultBindingPropertyAttribute.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.String]]
	]);
JSIL.MakeProperty(System.ComponentModel.DefaultBindingPropertyAttribute.prototype, "Name", 
	System.ComponentModel.DefaultBindingPropertyAttribute.prototype.get_Name, null);
System.ComponentModel.DefaultBindingPropertyAttribute.prototype.name = null;
System.ComponentModel.DefaultBindingPropertyAttribute.Default = null;
System.ComponentModel.DefaultBindingPropertyAttribute._cctor = function () {
	System.ComponentModel.DefaultBindingPropertyAttribute.Default = JSIL.New(System.ComponentModel.DefaultBindingPropertyAttribute, "_ctor$0", []);
};

System.ComponentModel.DefaultEventAttribute.prototype._ctor = function (name) {
	System.Attribute.prototype._ctor.call(this);
	this.name = name;
};
System.ComponentModel.DefaultEventAttribute.prototype.get_Name = function () {
	return this.name;
};
System.ComponentModel.DefaultEventAttribute.prototype.Equals = function (obj) {
	var defaultEventAttribute = JSIL.TryCast(obj, System.ComponentModel.DefaultEventAttribute);
	return ((defaultEventAttribute !== null) && (defaultEventAttribute.Name == this.name));
};
System.ComponentModel.DefaultEventAttribute.prototype.GetHashCode = function () {
	return System.Attribute.prototype.GetHashCode.call(this);
};
JSIL.MakeProperty(System.ComponentModel.DefaultEventAttribute.prototype, "Name", 
	System.ComponentModel.DefaultEventAttribute.prototype.get_Name, null);
System.ComponentModel.DefaultEventAttribute.prototype.name = null;
System.ComponentModel.DefaultEventAttribute.Default = null;
System.ComponentModel.DefaultEventAttribute._cctor = function () {
	System.ComponentModel.DefaultEventAttribute.Default = new System.ComponentModel.DefaultEventAttribute(null);
};

System.ComponentModel.DefaultPropertyAttribute.prototype._ctor = function (name) {
	System.Attribute.prototype._ctor.call(this);
	this.name = name;
};
System.ComponentModel.DefaultPropertyAttribute.prototype.get_Name = function () {
	return this.name;
};
System.ComponentModel.DefaultPropertyAttribute.prototype.Equals = function (obj) {
	var defaultPropertyAttribute = JSIL.TryCast(obj, System.ComponentModel.DefaultPropertyAttribute);
	return ((defaultPropertyAttribute !== null) && (defaultPropertyAttribute.Name == this.name));
};
System.ComponentModel.DefaultPropertyAttribute.prototype.GetHashCode = function () {
	return System.Attribute.prototype.GetHashCode.call(this);
};
JSIL.MakeProperty(System.ComponentModel.DefaultPropertyAttribute.prototype, "Name", 
	System.ComponentModel.DefaultPropertyAttribute.prototype.get_Name, null);
System.ComponentModel.DefaultPropertyAttribute.prototype.name = null;
System.ComponentModel.DefaultPropertyAttribute.Default = null;
System.ComponentModel.DefaultPropertyAttribute._cctor = function () {
	System.ComponentModel.DefaultPropertyAttribute.Default = new System.ComponentModel.DefaultPropertyAttribute(null);
};

System.ComponentModel.DefaultValueAttribute.prototype._ctor$0 = function (type, value) {
	System.Attribute.prototype._ctor.call(this);
	try {
		if (type.IsEnum) {
			this.value = System.Enum.Parse(type, value, true);
		} else if (type === System.TimeSpan) {
			this.value = System.TimeSpan.Parse$0(value);
		} else if (type.Module === System.String.Module) {
			this.value = System.Convert.ChangeType$1(value, type, System.Globalization.CultureInfo.InvariantCulture);
		}
	} catch ($exception) {
	}
};
System.ComponentModel.DefaultValueAttribute.prototype._ctor$1 = function (value) {
	System.Attribute.prototype._ctor.call(this);
	this.value = value;
};
System.ComponentModel.DefaultValueAttribute.prototype._ctor$2 = function (value) {
	System.Attribute.prototype._ctor.call(this);
	this.value = value;
};
System.ComponentModel.DefaultValueAttribute.prototype._ctor$3 = function (value) {
	System.Attribute.prototype._ctor.call(this);
	this.value = value;
};
System.ComponentModel.DefaultValueAttribute.prototype._ctor$4 = function (value) {
	System.Attribute.prototype._ctor.call(this);
	this.value = value;
};
System.ComponentModel.DefaultValueAttribute.prototype._ctor$5 = function (value) {
	System.Attribute.prototype._ctor.call(this);
	this.value = value;
};
System.ComponentModel.DefaultValueAttribute.prototype._ctor$6 = function (value) {
	System.Attribute.prototype._ctor.call(this);
	this.value = value;
};
System.ComponentModel.DefaultValueAttribute.prototype._ctor$7 = function (value) {
	System.Attribute.prototype._ctor.call(this);
	this.value = value;
};
System.ComponentModel.DefaultValueAttribute.prototype._ctor$8 = function (value) {
	System.Attribute.prototype._ctor.call(this);
	this.value = value;
};
System.ComponentModel.DefaultValueAttribute.prototype._ctor$9 = function (value) {
	System.Attribute.prototype._ctor.call(this);
	this.value = value;
};
System.ComponentModel.DefaultValueAttribute.prototype._ctor$10 = function (value) {
	System.Attribute.prototype._ctor.call(this);
	this.value = value;
};
System.ComponentModel.DefaultValueAttribute.prototype.get_Value = function () {
	return this.value;
};
System.ComponentModel.DefaultValueAttribute.prototype.Equals = function (obj) {
	if (obj === this) {
		return true;
	}
	var defaultValueAttribute = JSIL.TryCast(obj, System.ComponentModel.DefaultValueAttribute);
	if (defaultValueAttribute === null) {
		return false;
	}
	if (this.Value !== null) {
		return this.Value.Equals(defaultValueAttribute.Value);
	}
	return (defaultValueAttribute.Value === null);
};
System.ComponentModel.DefaultValueAttribute.prototype.GetHashCode = function () {
	return System.Attribute.prototype.GetHashCode.call(this);
};
System.ComponentModel.DefaultValueAttribute.prototype.SetValue = function (value) {
	this.value = value;
};
JSIL.OverloadedMethod(System.ComponentModel.DefaultValueAttribute.prototype, "_ctor", [
		["_ctor$0", [System.Type, System.String]], 
		["_ctor$1", [System.Char]], 
		["_ctor$2", [System.Byte]], 
		["_ctor$3", [System.Int16]], 
		["_ctor$4", [System.Int32]], 
		["_ctor$5", [System.Int64]], 
		["_ctor$6", [System.Single]], 
		["_ctor$7", [System.Double]], 
		["_ctor$8", [System.Boolean]], 
		["_ctor$9", [System.String]], 
		["_ctor$10", [System.Object]]
	]);
JSIL.MakeProperty(System.ComponentModel.DefaultValueAttribute.prototype, "Value", 
	System.ComponentModel.DefaultValueAttribute.prototype.get_Value, null);
System.ComponentModel.DefaultValueAttribute.prototype.value = null;

System.ComponentModel.LookupBindingPropertiesAttribute.prototype._ctor$0 = function () {
	System.Attribute.prototype._ctor.call(this);
	this.dataSource = null;
	this.displayMember = null;
	this.valueMember = null;
	this.lookupMember = null;
};
System.ComponentModel.LookupBindingPropertiesAttribute.prototype._ctor$1 = function (dataSource, displayMember, valueMember, lookupMember) {
	System.Attribute.prototype._ctor.call(this);
	this.dataSource = dataSource;
	this.displayMember = displayMember;
	this.valueMember = valueMember;
	this.lookupMember = lookupMember;
};
System.ComponentModel.LookupBindingPropertiesAttribute.prototype.get_DataSource = function () {
	return this.dataSource;
};
System.ComponentModel.LookupBindingPropertiesAttribute.prototype.get_DisplayMember = function () {
	return this.displayMember;
};
System.ComponentModel.LookupBindingPropertiesAttribute.prototype.get_ValueMember = function () {
	return this.valueMember;
};
System.ComponentModel.LookupBindingPropertiesAttribute.prototype.get_LookupMember = function () {
	return this.lookupMember;
};
System.ComponentModel.LookupBindingPropertiesAttribute.prototype.Equals = function (obj) {
	var lookupBindingPropertiesAttribute = JSIL.TryCast(obj, System.ComponentModel.LookupBindingPropertiesAttribute);
	return (!((lookupBindingPropertiesAttribute === null) || 
			!(lookupBindingPropertiesAttribute.DataSource == this.dataSource) || 
			!(lookupBindingPropertiesAttribute.displayMember == this.displayMember) || 
			!(lookupBindingPropertiesAttribute.valueMember == this.valueMember)) && (lookupBindingPropertiesAttribute.lookupMember == this.lookupMember));
};
System.ComponentModel.LookupBindingPropertiesAttribute.prototype.GetHashCode = function () {
	return System.Attribute.prototype.GetHashCode.call(this);
};
JSIL.OverloadedMethod(System.ComponentModel.LookupBindingPropertiesAttribute.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.String, System.String, System.String, System.String]]
	]);
JSIL.MakeProperty(System.ComponentModel.LookupBindingPropertiesAttribute.prototype, "DataSource", 
	System.ComponentModel.LookupBindingPropertiesAttribute.prototype.get_DataSource, null);
JSIL.MakeProperty(System.ComponentModel.LookupBindingPropertiesAttribute.prototype, "DisplayMember", 
	System.ComponentModel.LookupBindingPropertiesAttribute.prototype.get_DisplayMember, null);
JSIL.MakeProperty(System.ComponentModel.LookupBindingPropertiesAttribute.prototype, "ValueMember", 
	System.ComponentModel.LookupBindingPropertiesAttribute.prototype.get_ValueMember, null);
JSIL.MakeProperty(System.ComponentModel.LookupBindingPropertiesAttribute.prototype, "LookupMember", 
	System.ComponentModel.LookupBindingPropertiesAttribute.prototype.get_LookupMember, null);
System.ComponentModel.LookupBindingPropertiesAttribute.prototype.dataSource = null;
System.ComponentModel.LookupBindingPropertiesAttribute.prototype.displayMember = null;
System.ComponentModel.LookupBindingPropertiesAttribute.prototype.valueMember = null;
System.ComponentModel.LookupBindingPropertiesAttribute.prototype.lookupMember = null;
System.ComponentModel.LookupBindingPropertiesAttribute.Default = null;
System.ComponentModel.LookupBindingPropertiesAttribute._cctor = function () {
	System.ComponentModel.LookupBindingPropertiesAttribute.Default = JSIL.New(System.ComponentModel.LookupBindingPropertiesAttribute, "_ctor$0", []);
};

Object.defineProperty($asm04.System.ExternDll, "Activeds", {
		"value": "activeds.dll"}
);
Object.defineProperty($asm04.System.ExternDll, "Advapi32", {
		"value": "advapi32.dll"}
);
Object.defineProperty($asm04.System.ExternDll, "Comctl32", {
		"value": "comctl32.dll"}
);
Object.defineProperty($asm04.System.ExternDll, "Comdlg32", {
		"value": "comdlg32.dll"}
);
Object.defineProperty($asm04.System.ExternDll, "Gdi32", {
		"value": "gdi32.dll"}
);
Object.defineProperty($asm04.System.ExternDll, "Gdiplus", {
		"value": "gdiplus.dll"}
);
Object.defineProperty($asm04.System.ExternDll, "Hhctrl", {
		"value": "hhctrl.ocx"}
);
Object.defineProperty($asm04.System.ExternDll, "Imm32", {
		"value": "imm32.dll"}
);
Object.defineProperty($asm04.System.ExternDll, "Kernel32", {
		"value": "kernel32.dll"}
);
Object.defineProperty($asm04.System.ExternDll, "Loadperf", {
		"value": "Loadperf.dll"}
);
Object.defineProperty($asm04.System.ExternDll, "Mscoree", {
		"value": "mscoree.dll"}
);
Object.defineProperty($asm04.System.ExternDll, "Mscorwks", {
		"value": "mscorwks.dll"}
);
Object.defineProperty($asm04.System.ExternDll, "Msi", {
		"value": "msi.dll"}
);
Object.defineProperty($asm04.System.ExternDll, "Mqrt", {
		"value": "mqrt.dll"}
);
Object.defineProperty($asm04.System.ExternDll, "Ntdll", {
		"value": "ntdll.dll"}
);
Object.defineProperty($asm04.System.ExternDll, "Ole32", {
		"value": "ole32.dll"}
);
Object.defineProperty($asm04.System.ExternDll, "Oleacc", {
		"value": "oleacc.dll"}
);
Object.defineProperty($asm04.System.ExternDll, "Oleaut32", {
		"value": "oleaut32.dll"}
);
Object.defineProperty($asm04.System.ExternDll, "Olepro32", {
		"value": "olepro32.dll"}
);
Object.defineProperty($asm04.System.ExternDll, "PerfCounter", {
		"value": "perfcounter.dll"}
);
Object.defineProperty($asm04.System.ExternDll, "Powrprof", {
		"value": "Powrprof.dll"}
);
Object.defineProperty($asm04.System.ExternDll, "Psapi", {
		"value": "psapi.dll"}
);
Object.defineProperty($asm04.System.ExternDll, "Shell32", {
		"value": "shell32.dll"}
);
Object.defineProperty($asm04.System.ExternDll, "Shfolder", {
		"value": "shfolder.dll"}
);
Object.defineProperty($asm04.System.ExternDll, "User32", {
		"value": "user32.dll"}
);
Object.defineProperty($asm04.System.ExternDll, "Uxtheme", {
		"value": "uxtheme.dll"}
);
Object.defineProperty($asm04.System.ExternDll, "WinMM", {
		"value": "winmm.dll"}
);
Object.defineProperty($asm04.System.ExternDll, "Winspool", {
		"value": "winspool.drv"}
);
Object.defineProperty($asm04.System.ExternDll, "Wtsapi32", {
		"value": "wtsapi32.dll"}
);
Object.defineProperty($asm04.System.ExternDll, "Version", {
		"value": "version.dll"}
);
Object.defineProperty($asm04.System.ExternDll, "Vsassert", {
		"value": "vsassert.dll"}
);
Object.defineProperty($asm04.System.ExternDll, "Shlwapi", {
		"value": "shlwapi.dll"}
);
Object.defineProperty($asm04.System.ExternDll, "Crypt32", {
		"value": "crypt32.dll"}
);
Object.defineProperty($asm04.System.ExternDll, "Odbc32", {
		"value": "odbc32.dll"}
);
Object.defineProperty($asm04.System.ExternDll, "SNI", {
		"value": "System.Data.dll"}
);
Object.defineProperty($asm04.System.ExternDll, "OciDll", {
		"value": "oci.dll"}
);
Object.defineProperty($asm04.System.ExternDll, "OraMtsDll", {
		"value": "oramts.dll"}
);

System.UriParser.prototype.get_SchemeName = function () {
	return this.m_Scheme;
};
System.UriParser.prototype.get_DefaultPort = function () {
	return this.m_Port;
};
System.UriParser.prototype._ctor$0 = function () {
	this._ctor$1(System.UriSyntaxFlags.MayHavePath);
};
System.UriParser.prototype.OnNewUri = function () {
	return this;
};
System.UriParser.prototype.OnRegister = function (schemeName, defaultPort) {
};
System.UriParser.prototype.InitializeAndValidate = function (uri, /* ref */ parsingError) {
	parsingError.value = uri.ParseMinimal();
};
System.UriParser.prototype.Resolve = function (baseUri, relativeUri, /* ref */ parsingError) {
	if (baseUri.UserDrivenParsing) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm04.System.SR.GetString$0("net_uri_UserDrivenParsing", [JSIL.GetType(this).FullName])]);
	}
	if (!baseUri.IsAbsoluteUri) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm04.System.SR.GetString$2("net_uri_NotAbsolute")]);
	}
	var result = new JSIL.Variable(null);
	var flag = new JSIL.Variable(false);
	var uri = System.Uri.ResolveHelper(
		baseUri, 
		relativeUri, 
		/* ref */ result, 
		/* ref */ flag, 
		/* ref */ parsingError
	);
	if (parsingError.value !== null) {
		return null;
	}
	if (System.Uri.op_Inequality(uri, null)) {
		return uri.OriginalString;
	}
	return result.value;
};
System.UriParser.prototype.IsBaseOf = function (baseUri, relativeUri) {
	return baseUri.IsBaseOfHelper(relativeUri);
};
System.UriParser.prototype.IsWellFormedOriginalString = function (uri) {
	return uri.InternalIsWellFormedOriginalString();
};
System.UriParser.prototype.GetComponents = function (uri, components, format) {
	if (!(!(components & System.UriComponents.SerializationInfoString) || (components === System.UriComponents.SerializationInfoString))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["UriComponents.SerializationInfoString"]);
	}
	if (format & -4) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["format"]);
	}
	if (uri.UserDrivenParsing) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm04.System.SR.GetString$0("net_uri_UserDrivenParsing", [JSIL.GetType(this).FullName])]);
	}
	if (!uri.IsAbsoluteUri) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm04.System.SR.GetString$2("net_uri_NotAbsolute")]);
	}
	return uri.GetComponentsHelper(components, format);
};
System.UriParser.Register = function (uriParser, schemeName, defaultPort) {
	if (uriParser === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["uriParser"]);
	}
	if (schemeName === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["schemeName"]);
	}
	if (schemeName.length === 1) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["uriParser.SchemeName"]);
	}
	if (!System.Uri.CheckSchemeName(schemeName)) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["schemeName"]);
	}
	if (!(((defaultPort < 65535) && 
				(defaultPort >= 0)) || (defaultPort === -1))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["defaultPort"]);
	}
	schemeName = schemeName.ToLower$1(System.Globalization.CultureInfo.InvariantCulture);
	System.UriParser.FetchSyntax(uriParser, schemeName, defaultPort);
};
System.UriParser.IsKnownScheme = function (schemeName) {
	if (schemeName === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["schemeName"]);
	}
	if (!System.Uri.CheckSchemeName(schemeName)) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["schemeName"]);
	}
	var syntax = System.UriParser.GetSyntax(schemeName.ToLower$1(System.Globalization.CultureInfo.InvariantCulture));
	return ((syntax !== null) && syntax.NotAny(System.UriSyntaxFlags.V1_UnknownUri));
};
System.UriParser.prototype.get_Flags = function () {
	return this.m_Flags;
};
System.UriParser.prototype.NotAny = function (flags) {
	return ((this.m_Flags & flags) === 0);
};
System.UriParser.prototype.InFact = function (flags) {
	return ((this.m_Flags & flags) !== 0);
};
System.UriParser.prototype.IsAllSet = function (flags) {
	return ((this.m_Flags & flags) === flags);
};
System.UriParser.prototype._ctor$1 = function (flags) {
	System.Object.prototype._ctor.call(this);
	this.m_Flags = flags;
	this.m_Scheme = System.String.Empty;
};
System.UriParser.FetchSyntax = function (syntax, lwrCaseSchemeName, defaultPort) {
	var table = null;
	if (syntax.SchemeName.length !== 0) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm04.System.SR.GetString$0("net_uri_NeedFreshParser", [syntax.SchemeName])]);
	}
	System.Threading.Monitor.Enter((table = System.UriParser.m_Table));
	try {
		syntax.m_Flags = (syntax.m_Flags & (System.UriSyntaxFlags.AllowAnInternetHost | System.UriSyntaxFlags.AllowAnyOtherHost | System.UriSyntaxFlags.AllowDnsHost | System.UriSyntaxFlags.AllowDOSPath | System.UriSyntaxFlags.AllowEmptyHost | System.UriSyntaxFlags.AllowIdn | System.UriSyntaxFlags.AllowIPv4Host | System.UriSyntaxFlags.AllowIPv6Host | System.UriSyntaxFlags.AllowIriParsing | System.UriSyntaxFlags.AllowUncHost | System.UriSyntaxFlags.BuiltInSyntax | System.UriSyntaxFlags.CanonicalizeAsFilePath | System.UriSyntaxFlags.CompressPath | System.UriSyntaxFlags.ConvertPathSlashes | System.UriSyntaxFlags.FileLikeUri | System.UriSyntaxFlags.MailToLikeUri | System.UriSyntaxFlags.MayHaveFragment | System.UriSyntaxFlags.MayHavePath | System.UriSyntaxFlags.MayHavePort | System.UriSyntaxFlags.MayHaveQuery | System.UriSyntaxFlags.MayHaveUserInfo | System.UriSyntaxFlags.MustHaveAuthority | System.UriSyntaxFlags.OptionalAuthority | System.UriSyntaxFlags.ParserSchemeOnly | System.UriSyntaxFlags.PathIsRooted | System.UriSyntaxFlags.SimpleUserSyntax | System.UriSyntaxFlags.UnEscapeDotsAndSlashes));
		var uriParser = new JSIL.Variable(null);
		System.UriParser.m_Table.TryGetValue(lwrCaseSchemeName, /* ref */ uriParser);
		if (uriParser.value !== null) {
			throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm04.System.SR.GetString$0("net_uri_AlreadyRegistered", [uriParser.value.SchemeName])]);
		}
		System.UriParser.m_TempTable.TryGetValue(syntax.SchemeName, /* ref */ uriParser);
		if (uriParser.value !== null) {
			lwrCaseSchemeName = uriParser.value.m_Scheme;
			System.UriParser.m_TempTable.Remove(lwrCaseSchemeName);
		}
		syntax.OnRegister(lwrCaseSchemeName, defaultPort);
		syntax.m_Scheme = lwrCaseSchemeName;
		syntax.CheckSetIsSimpleFlag();
		syntax.m_Port = defaultPort;
		System.UriParser.m_Table.set_Item(syntax.SchemeName, syntax);
	} finally {
		System.Threading.Monitor.Exit(table);
	}
};
System.UriParser.FindOrFetchAsUnknownV1Syntax = function (lwrCaseScheme) {
	var table = null;
	var uriParser = new JSIL.Variable(null);
	System.UriParser.m_Table.TryGetValue(lwrCaseScheme, /* ref */ uriParser);
	if (uriParser.value !== null) {
		return uriParser.value;
	}
	System.UriParser.m_TempTable.TryGetValue(lwrCaseScheme, /* ref */ uriParser);
	if (uriParser.value !== null) {
		return uriParser.value;
	}
	System.Threading.Monitor.Enter((table = System.UriParser.m_Table));
	try {
		if (System.UriParser.m_TempTable.Count >= 512) {
			System.UriParser.m_TempTable = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.String, System.UriParser), "_ctor$1", [25]);
		}
		uriParser.value = new $asm04.System.UriParser.BuiltInUriParser(lwrCaseScheme, -1, (System.UriSyntaxFlags.AllowAnInternetHost | System.UriSyntaxFlags.AllowDnsHost | System.UriSyntaxFlags.AllowDOSPath | System.UriSyntaxFlags.AllowEmptyHost | System.UriSyntaxFlags.AllowIdn | System.UriSyntaxFlags.AllowIPv4Host | System.UriSyntaxFlags.AllowIPv6Host | System.UriSyntaxFlags.AllowIriParsing | System.UriSyntaxFlags.AllowUncHost | System.UriSyntaxFlags.CompressPath | System.UriSyntaxFlags.ConvertPathSlashes | System.UriSyntaxFlags.MayHaveFragment | System.UriSyntaxFlags.MayHavePath | System.UriSyntaxFlags.MayHavePort | System.UriSyntaxFlags.MayHaveQuery | System.UriSyntaxFlags.MayHaveUserInfo | System.UriSyntaxFlags.OptionalAuthority | System.UriSyntaxFlags.PathIsRooted | System.UriSyntaxFlags.V1_UnknownUri));
		System.UriParser.m_TempTable.set_Item(lwrCaseScheme, uriParser.value);
		var result = uriParser.value;
	} finally {
		System.Threading.Monitor.Exit(table);
	}
	return result;
};
System.UriParser.GetSyntax = function (lwrCaseScheme) {
	var uriParser = new JSIL.Variable(null);
	System.UriParser.m_Table.TryGetValue(lwrCaseScheme, /* ref */ uriParser);
	if (uriParser.value === null) {
		System.UriParser.m_TempTable.TryGetValue(lwrCaseScheme, /* ref */ uriParser);
	}
	return uriParser.value;
};
System.UriParser.prototype.get_IsSimple = function () {
	return this.InFact(System.UriSyntaxFlags.SimpleUserSyntax);
};
System.UriParser.prototype.CheckSetIsSimpleFlag = function () {
	var type = (JSIL.GetType(this));
	if (!((type !== System.GenericUriParser) && 
			(type !== System.HttpStyleUriParser) && (type !== System.FtpStyleUriParser))) {
		this.m_Flags = (this.m_Flags | System.UriSyntaxFlags.SimpleUserSyntax);
	}
};
System.UriParser.prototype.InternalOnNewUri = function () {
	var uriParser = this.OnNewUri();
	if (this !== uriParser) {
		uriParser.m_Scheme = this.m_Scheme;
		uriParser.m_Port = this.m_Port;
		uriParser.m_Flags = this.m_Flags;
	}
	return uriParser;
};
System.UriParser.prototype.InternalValidate = function (thisUri, /* ref */ parsingError) {
	this.InitializeAndValidate(thisUri, /* ref */ parsingError);
};
System.UriParser.prototype.InternalResolve = function (thisBaseUri, uriLink, /* ref */ parsingError) {
	return this.Resolve(thisBaseUri, uriLink, /* ref */ parsingError);
};
System.UriParser.prototype.InternalIsBaseOf = function (thisBaseUri, uriLink) {
	return this.IsBaseOf(thisBaseUri, uriLink);
};
System.UriParser.prototype.InternalIsWellFormedOriginalString = function (thisUri) {
	return this.IsWellFormedOriginalString(thisUri);
};
System.UriParser.prototype.InternalGetComponents = function (thisUri, uriComponents, uriFormat) {
	return this.GetComponents(thisUri, uriComponents, uriFormat);
};
JSIL.OverloadedMethod(System.UriParser.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.UriSyntaxFlags]]
	]);
JSIL.MakeProperty(System.UriParser.prototype, "SchemeName", 
	System.UriParser.prototype.get_SchemeName, null);
JSIL.MakeProperty(System.UriParser.prototype, "DefaultPort", 
	System.UriParser.prototype.get_DefaultPort, null);
JSIL.MakeProperty(System.UriParser.prototype, "Flags", 
	System.UriParser.prototype.get_Flags, null);
JSIL.MakeProperty(System.UriParser.prototype, "IsSimple", 
	System.UriParser.prototype.get_IsSimple, null);
Object.defineProperty(System.UriParser, "SchemeOnlyFlags", {
		"value": 16}
);
Object.defineProperty(System.UriParser, "NoDefaultPort", {
		"value": -1}
);
Object.defineProperty(System.UriParser, "c_InitialTableSize", {
		"value": 25}
);
Object.defineProperty(System.UriParser, "c_MaxCapacity", {
		"value": 512}
);
Object.defineProperty(System.UriParser, "UnknownV1SyntaxFlags", {
		"value": 351342590}
);
Object.defineProperty(System.UriParser, "HttpSyntaxFlags", {
		"value": 400559997}
);
Object.defineProperty(System.UriParser, "FtpSyntaxFlags", {
		"value": 367005533}
);
Object.defineProperty(System.UriParser, "FileSyntaxFlags", {
		"value": 401616849}
);
Object.defineProperty(System.UriParser, "VsmacrosSyntaxFlags", {
		"value": 399519697}
);
Object.defineProperty(System.UriParser, "GopherSyntaxFlags", {
		"value": 337645405}
);
Object.defineProperty(System.UriParser, "NewsSyntaxFlags", {
		"value": 268435536}
);
Object.defineProperty(System.UriParser, "NntpSyntaxFlags", {
		"value": 337645405}
);
Object.defineProperty(System.UriParser, "TelnetSyntaxFlags", {
		"value": 337645405}
);
Object.defineProperty(System.UriParser, "LdapSyntaxFlags", {
		"value": 337645565}
);
Object.defineProperty(System.UriParser, "MailtoSyntaxFlags", {
		"value": 335564796}
);
Object.defineProperty(System.UriParser, "NetPipeSyntaxFlags", {
		"value": 400559729}
);
Object.defineProperty(System.UriParser, "NetTcpSyntaxFlags", {
		"value": 400559737}
);
System.UriParser.m_Table = null;
System.UriParser.m_TempTable = null;
System.UriParser.prototype.m_Flags = 0;
System.UriParser.prototype.m_Port = 0;
System.UriParser.prototype.m_Scheme = null;
System.UriParser.HttpUri = null;
System.UriParser.HttpsUri = null;
System.UriParser.FtpUri = null;
System.UriParser.FileUri = null;
System.UriParser.GopherUri = null;
System.UriParser.NntpUri = null;
System.UriParser.NewsUri = null;
System.UriParser.MailToUri = null;
System.UriParser.UuidUri = null;
System.UriParser.TelnetUri = null;
System.UriParser.LdapUri = null;
System.UriParser.NetTcpUri = null;
System.UriParser.NetPipeUri = null;
System.UriParser.VsMacrosUri = null;
System.UriParser._cctor = function () {
	System.UriParser.m_Table = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.String, System.UriParser), "_ctor$1", [25]);
	System.UriParser.m_TempTable = JSIL.New(System.Collections.Generic.Dictionary$b2.Of(System.String, System.UriParser), "_ctor$1", [25]);
	System.UriParser.HttpUri = new System.UriParser.BuiltInUriParser("http", 80, (System.UriSyntaxFlags.AllowAnInternetHost | System.UriSyntaxFlags.AllowDnsHost | System.UriSyntaxFlags.AllowIdn | System.UriSyntaxFlags.AllowIPv4Host | System.UriSyntaxFlags.AllowIPv6Host | System.UriSyntaxFlags.AllowIriParsing | System.UriSyntaxFlags.AllowUncHost | System.UriSyntaxFlags.CanonicalizeAsFilePath | System.UriSyntaxFlags.CompressPath | System.UriSyntaxFlags.ConvertPathSlashes | System.UriSyntaxFlags.MayHaveFragment | System.UriSyntaxFlags.MayHavePath | System.UriSyntaxFlags.MayHavePort | System.UriSyntaxFlags.MayHaveQuery | System.UriSyntaxFlags.MayHaveUserInfo | System.UriSyntaxFlags.MustHaveAuthority | System.UriSyntaxFlags.PathIsRooted | System.UriSyntaxFlags.UnEscapeDotsAndSlashes));
	System.UriParser.m_Table.set_Item(System.UriParser.HttpUri.SchemeName, System.UriParser.HttpUri);
	System.UriParser.HttpsUri = new System.UriParser.BuiltInUriParser("https", 443, System.UriParser.HttpUri.m_Flags);
	System.UriParser.m_Table.set_Item(System.UriParser.HttpsUri.SchemeName, System.UriParser.HttpsUri);
	System.UriParser.FtpUri = new System.UriParser.BuiltInUriParser("ftp", 21, (System.UriSyntaxFlags.AllowAnInternetHost | System.UriSyntaxFlags.AllowDnsHost | System.UriSyntaxFlags.AllowIdn | System.UriSyntaxFlags.AllowIPv4Host | System.UriSyntaxFlags.AllowIPv6Host | System.UriSyntaxFlags.AllowIriParsing | System.UriSyntaxFlags.AllowUncHost | System.UriSyntaxFlags.CanonicalizeAsFilePath | System.UriSyntaxFlags.CompressPath | System.UriSyntaxFlags.ConvertPathSlashes | System.UriSyntaxFlags.MayHaveFragment | System.UriSyntaxFlags.MayHavePath | System.UriSyntaxFlags.MayHavePort | System.UriSyntaxFlags.MayHaveUserInfo | System.UriSyntaxFlags.MustHaveAuthority | System.UriSyntaxFlags.PathIsRooted));
	System.UriParser.m_Table.set_Item(System.UriParser.FtpUri.SchemeName, System.UriParser.FtpUri);
	System.UriParser.FileUri = new System.UriParser.BuiltInUriParser("file", -1, (System.UriSyntaxFlags.AllowAnInternetHost | System.UriSyntaxFlags.AllowDnsHost | System.UriSyntaxFlags.AllowDOSPath | System.UriSyntaxFlags.AllowEmptyHost | System.UriSyntaxFlags.AllowIdn | System.UriSyntaxFlags.AllowIPv4Host | System.UriSyntaxFlags.AllowIPv6Host | System.UriSyntaxFlags.AllowIriParsing | System.UriSyntaxFlags.AllowUncHost | System.UriSyntaxFlags.CanonicalizeAsFilePath | System.UriSyntaxFlags.CompressPath | System.UriSyntaxFlags.ConvertPathSlashes | System.UriSyntaxFlags.FileLikeUri | System.UriSyntaxFlags.MayHaveFragment | System.UriSyntaxFlags.MayHavePath | System.UriSyntaxFlags.MustHaveAuthority | System.UriSyntaxFlags.PathIsRooted | System.UriSyntaxFlags.UnEscapeDotsAndSlashes));
	System.UriParser.m_Table.set_Item(System.UriParser.FileUri.SchemeName, System.UriParser.FileUri);
	System.UriParser.GopherUri = new System.UriParser.BuiltInUriParser("gopher", 70, (System.UriSyntaxFlags.AllowAnInternetHost | System.UriSyntaxFlags.AllowDnsHost | System.UriSyntaxFlags.AllowIdn | System.UriSyntaxFlags.AllowIPv4Host | System.UriSyntaxFlags.AllowIPv6Host | System.UriSyntaxFlags.AllowIriParsing | System.UriSyntaxFlags.AllowUncHost | System.UriSyntaxFlags.MayHaveFragment | System.UriSyntaxFlags.MayHavePath | System.UriSyntaxFlags.MayHavePort | System.UriSyntaxFlags.MayHaveUserInfo | System.UriSyntaxFlags.MustHaveAuthority | System.UriSyntaxFlags.PathIsRooted));
	System.UriParser.m_Table.set_Item(System.UriParser.GopherUri.SchemeName, System.UriParser.GopherUri);
	System.UriParser.NntpUri = new System.UriParser.BuiltInUriParser("nntp", 119, (System.UriSyntaxFlags.AllowAnInternetHost | System.UriSyntaxFlags.AllowDnsHost | System.UriSyntaxFlags.AllowIdn | System.UriSyntaxFlags.AllowIPv4Host | System.UriSyntaxFlags.AllowIPv6Host | System.UriSyntaxFlags.AllowIriParsing | System.UriSyntaxFlags.AllowUncHost | System.UriSyntaxFlags.MayHaveFragment | System.UriSyntaxFlags.MayHavePath | System.UriSyntaxFlags.MayHavePort | System.UriSyntaxFlags.MayHaveUserInfo | System.UriSyntaxFlags.MustHaveAuthority | System.UriSyntaxFlags.PathIsRooted));
	System.UriParser.m_Table.set_Item(System.UriParser.NntpUri.SchemeName, System.UriParser.NntpUri);
	System.UriParser.NewsUri = new System.UriParser.BuiltInUriParser("news", -1, (System.UriSyntaxFlags.AllowIriParsing | System.UriSyntaxFlags.MayHaveFragment | System.UriSyntaxFlags.MayHavePath));
	System.UriParser.m_Table.set_Item(System.UriParser.NewsUri.SchemeName, System.UriParser.NewsUri);
	System.UriParser.MailToUri = new System.UriParser.BuiltInUriParser("mailto", 25, (System.UriSyntaxFlags.AllowAnInternetHost | System.UriSyntaxFlags.AllowDnsHost | System.UriSyntaxFlags.AllowEmptyHost | System.UriSyntaxFlags.AllowIdn | System.UriSyntaxFlags.AllowIPv4Host | System.UriSyntaxFlags.AllowIPv6Host | System.UriSyntaxFlags.AllowIriParsing | System.UriSyntaxFlags.AllowUncHost | System.UriSyntaxFlags.MailToLikeUri | System.UriSyntaxFlags.MayHaveFragment | System.UriSyntaxFlags.MayHavePath | System.UriSyntaxFlags.MayHavePort | System.UriSyntaxFlags.MayHaveQuery | System.UriSyntaxFlags.MayHaveUserInfo));
	System.UriParser.m_Table.set_Item(System.UriParser.MailToUri.SchemeName, System.UriParser.MailToUri);
	System.UriParser.UuidUri = new System.UriParser.BuiltInUriParser("uuid", -1, System.UriParser.NewsUri.m_Flags);
	System.UriParser.m_Table.set_Item(System.UriParser.UuidUri.SchemeName, System.UriParser.UuidUri);
	System.UriParser.TelnetUri = new System.UriParser.BuiltInUriParser("telnet", 23, (System.UriSyntaxFlags.AllowAnInternetHost | System.UriSyntaxFlags.AllowDnsHost | System.UriSyntaxFlags.AllowIdn | System.UriSyntaxFlags.AllowIPv4Host | System.UriSyntaxFlags.AllowIPv6Host | System.UriSyntaxFlags.AllowIriParsing | System.UriSyntaxFlags.AllowUncHost | System.UriSyntaxFlags.MayHaveFragment | System.UriSyntaxFlags.MayHavePath | System.UriSyntaxFlags.MayHavePort | System.UriSyntaxFlags.MayHaveUserInfo | System.UriSyntaxFlags.MustHaveAuthority | System.UriSyntaxFlags.PathIsRooted));
	System.UriParser.m_Table.set_Item(System.UriParser.TelnetUri.SchemeName, System.UriParser.TelnetUri);
	System.UriParser.LdapUri = new System.UriParser.BuiltInUriParser("ldap", 389, (System.UriSyntaxFlags.AllowAnInternetHost | System.UriSyntaxFlags.AllowDnsHost | System.UriSyntaxFlags.AllowEmptyHost | System.UriSyntaxFlags.AllowIdn | System.UriSyntaxFlags.AllowIPv4Host | System.UriSyntaxFlags.AllowIPv6Host | System.UriSyntaxFlags.AllowIriParsing | System.UriSyntaxFlags.AllowUncHost | System.UriSyntaxFlags.MayHaveFragment | System.UriSyntaxFlags.MayHavePath | System.UriSyntaxFlags.MayHavePort | System.UriSyntaxFlags.MayHaveQuery | System.UriSyntaxFlags.MayHaveUserInfo | System.UriSyntaxFlags.MustHaveAuthority | System.UriSyntaxFlags.PathIsRooted));
	System.UriParser.m_Table.set_Item(System.UriParser.LdapUri.SchemeName, System.UriParser.LdapUri);
	System.UriParser.NetTcpUri = new System.UriParser.BuiltInUriParser("net.tcp", 808, (System.UriSyntaxFlags.AllowAnInternetHost | System.UriSyntaxFlags.AllowDnsHost | System.UriSyntaxFlags.AllowIdn | System.UriSyntaxFlags.AllowIPv4Host | System.UriSyntaxFlags.AllowIPv6Host | System.UriSyntaxFlags.AllowIriParsing | System.UriSyntaxFlags.CanonicalizeAsFilePath | System.UriSyntaxFlags.CompressPath | System.UriSyntaxFlags.ConvertPathSlashes | System.UriSyntaxFlags.MayHaveFragment | System.UriSyntaxFlags.MayHavePath | System.UriSyntaxFlags.MayHavePort | System.UriSyntaxFlags.MayHaveQuery | System.UriSyntaxFlags.MustHaveAuthority | System.UriSyntaxFlags.PathIsRooted | System.UriSyntaxFlags.UnEscapeDotsAndSlashes));
	System.UriParser.m_Table.set_Item(System.UriParser.NetTcpUri.SchemeName, System.UriParser.NetTcpUri);
	System.UriParser.NetPipeUri = new System.UriParser.BuiltInUriParser("net.pipe", -1, (System.UriSyntaxFlags.AllowAnInternetHost | System.UriSyntaxFlags.AllowDnsHost | System.UriSyntaxFlags.AllowIdn | System.UriSyntaxFlags.AllowIPv4Host | System.UriSyntaxFlags.AllowIPv6Host | System.UriSyntaxFlags.AllowIriParsing | System.UriSyntaxFlags.CanonicalizeAsFilePath | System.UriSyntaxFlags.CompressPath | System.UriSyntaxFlags.ConvertPathSlashes | System.UriSyntaxFlags.MayHaveFragment | System.UriSyntaxFlags.MayHavePath | System.UriSyntaxFlags.MayHaveQuery | System.UriSyntaxFlags.MustHaveAuthority | System.UriSyntaxFlags.PathIsRooted | System.UriSyntaxFlags.UnEscapeDotsAndSlashes));
	System.UriParser.m_Table.set_Item(System.UriParser.NetPipeUri.SchemeName, System.UriParser.NetPipeUri);
	System.UriParser.VsMacrosUri = new System.UriParser.BuiltInUriParser("vsmacros", -1, (System.UriSyntaxFlags.AllowAnInternetHost | System.UriSyntaxFlags.AllowDnsHost | System.UriSyntaxFlags.AllowDOSPath | System.UriSyntaxFlags.AllowEmptyHost | System.UriSyntaxFlags.AllowIdn | System.UriSyntaxFlags.AllowIPv4Host | System.UriSyntaxFlags.AllowIPv6Host | System.UriSyntaxFlags.AllowIriParsing | System.UriSyntaxFlags.AllowUncHost | System.UriSyntaxFlags.CanonicalizeAsFilePath | System.UriSyntaxFlags.CompressPath | System.UriSyntaxFlags.ConvertPathSlashes | System.UriSyntaxFlags.FileLikeUri | System.UriSyntaxFlags.MayHaveFragment | System.UriSyntaxFlags.MayHavePath | System.UriSyntaxFlags.MustHaveAuthority | System.UriSyntaxFlags.UnEscapeDotsAndSlashes));
	System.UriParser.m_Table.set_Item(System.UriParser.VsMacrosUri.SchemeName, System.UriParser.VsMacrosUri);
};

$asm04.System.UriParser.BuiltInUriParser.prototype._ctor = function (lwrCaseScheme, defaultPort, syntaxFlags) {
	System.UriParser.prototype._ctor$1.call(this, ((syntaxFlags | System.UriSyntaxFlags.SimpleUserSyntax) | System.UriSyntaxFlags.BuiltInSyntax));
	this.m_Scheme = lwrCaseScheme;
	this.m_Port = defaultPort;
};

System.Uri.prototype.get_IsImplicitFile = function () {
	return ((this.m_Flags & System.Uri.Flags.ImplicitFile) !== System.Uri.Flags.Zero);
};
System.Uri.prototype.get_IsUncOrDosPath = function () {
	return ((this.m_Flags & (System.Uri.Flags.DosPath | System.Uri.Flags.UncPath)) !== System.Uri.Flags.Zero);
};
System.Uri.prototype.get_IsDosPath = function () {
	return ((this.m_Flags & System.Uri.Flags.DosPath) !== System.Uri.Flags.Zero);
};
System.Uri.prototype.get_IsUncPath = function () {
	return ((this.m_Flags & System.Uri.Flags.UncPath) !== System.Uri.Flags.Zero);
};
System.Uri.prototype.get_HostType = function () {
	return (this.m_Flags & (System.Uri.Flags.BasicHostType | System.Uri.Flags.DnsHostType | System.Uri.Flags.HostTypeMask | System.Uri.Flags.IPv4HostType | System.Uri.Flags.IPv6HostType | System.Uri.Flags.UncHostType | System.Uri.Flags.UnknownHostType | System.Uri.Flags.UnusedHostType));
};
System.Uri.prototype.get_Syntax = function () {
	return this.m_Syntax;
};
System.Uri.prototype.get_IsNotAbsoluteUri = function () {
	return (this.m_Syntax === null);
};
System.Uri.prototype.get_AllowIdn = function () {
	return (!((this.m_Syntax === null) || 
			!(this.m_Syntax.Flags & System.UriSyntaxFlags.AllowIdn)) && ((System.Uri.s_IdnScope === System.UriIdnScope.All) || 
			((System.Uri.s_IdnScope === System.UriIdnScope.AllExceptIntranet) && 
				this.NotAny(System.Uri.Flags.IntranetUri))));
};
System.Uri.prototype.AllowIdnStatic = function (syntax, flags) {
	return (!((syntax === null) || 
			!(syntax.Flags & System.UriSyntaxFlags.AllowIdn)) && ((System.Uri.s_IdnScope === System.UriIdnScope.All) || 
			((System.Uri.s_IdnScope === System.UriIdnScope.AllExceptIntranet) && 
				System.Uri.StaticNotAny(flags, System.Uri.Flags.IntranetUri))));
};
System.Uri.prototype.IsIntranet = function (schemeHost) {
__loop0__: 
	for (var i = 0; i < schemeHost.length; ++i) {
		if ((schemeHost[i]) === ".") {
			return false;
		}
	}
	return true;
};
System.Uri.prototype.get_UserDrivenParsing = function () {
	return ((this.m_Flags & System.Uri.Flags.UserDrivenParsing) !== System.Uri.Flags.Zero);
};
System.Uri.prototype.SetUserDrivenParsing = function () {
	this.m_Flags = (System.Uri.Flags.UserDrivenParsing | (this.m_Flags & System.Uri.Flags.UserEscaped));
};
System.Uri.prototype.get_SecuredPathIndex = function () {
	if (this.IsDosPath) {
		var c = (this.m_String[this.m_Info.Offset.Path]);
		return ((c === "/") || (c === "\\")) ? 3 : 2;
	}
	return 0;
};
System.Uri.prototype.NotAny = function (flags) {
	return ((this.m_Flags & flags) === System.Uri.Flags.Zero);
};
System.Uri.prototype.InFact = function (flags) {
	return ((this.m_Flags & flags) !== System.Uri.Flags.Zero);
};
System.Uri.StaticNotAny = function (allFlags, checkFlags) {
	return ((allFlags & checkFlags) === System.Uri.Flags.Zero);
};
System.Uri.StaticInFact = function (allFlags, checkFlags) {
	return ((allFlags & checkFlags) !== System.Uri.Flags.Zero);
};
System.Uri.prototype.EnsureUriInfo = function () {
	if ((this.m_Flags & System.Uri.Flags.MinimalUriInfoSet) === System.Uri.Flags.Zero) {
		this.CreateUriInfo(this.m_Flags);
	}
	return this.m_Info;
};
System.Uri.prototype.EnsureParseRemaining = function () {
	if ((this.m_Flags & (System.Uri.Flags.AllUriInfoSet | System.Uri.Flags.FragmentIriCanonical | System.Uri.Flags.HasUnicode | System.Uri.Flags.HostUnicodeNormalized | System.Uri.Flags.IdnHost | System.Uri.Flags.IntranetUri | System.Uri.Flags.IriCanonical | System.Uri.Flags.PathIriCanonical | System.Uri.Flags.QueryIriCanonical | System.Uri.Flags.RestUnicodeNormalized | System.Uri.Flags.UnicodeHost | System.Uri.Flags.UseOrigUncdStrOffset | System.Uri.Flags.UserIriCanonical)) === System.Uri.Flags.Zero) {
		this.ParseRemaining();
	}
};
System.Uri.prototype.EnsureHostString = function (allowDnsOptimization) {
	this.EnsureUriInfo();
	if (this.m_Info.Host === null) {
		if (!(!allowDnsOptimization || !this.InFact(System.Uri.Flags.CanonicalDnsHost))) {
			return;
		}
		this.CreateHostString();
	}
};
System.Uri.prototype._ctor$0 = function (uriString) {
	System.Object.prototype._ctor.call(this);
	if (uriString === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["uriString"]);
	}
	this.CreateThis(uriString, false, System.UriKind.Absolute);
};
System.Uri.prototype._ctor$1 = function (uriString, uriKind) {
	System.Object.prototype._ctor.call(this);
	if (uriString === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["uriString"]);
	}
	this.CreateThis(uriString, false, uriKind);
};
System.Uri.prototype._ctor$2 = function (baseUri, relativeUri) {
	System.Object.prototype._ctor.call(this);
	if (baseUri === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["baseUri"]);
	}
	if (!baseUri.IsAbsoluteUri) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["baseUri"]);
	}
	this.CreateUri(baseUri, relativeUri, false);
};
System.Uri.prototype.CreateUri = function (baseUri, $relativeUri, $dontEscape) {
	var dontEscape = new JSIL.Variable($dontEscape);
	var relativeUri = new JSIL.Variable($relativeUri);
	var uriFormatException = new JSIL.Variable(null);
	this.CreateThis(relativeUri.value, dontEscape.value, System.UriKind.RelativeOrAbsolute);
	if (baseUri.Syntax.IsSimple) {
		var uri = System.Uri.ResolveHelper(
			baseUri, 
			this, 
			/* ref */ relativeUri, 
			/* ref */ dontEscape, 
			/* ref */ uriFormatException
		);
		if (uriFormatException.value !== null) {
			throw uriFormatException.value;
		}
		if (System.Uri.op_Inequality(uri, null)) {
			if (uri !== this) {
				this.CreateThisFromUri(uri);
			}
			return;
		}
	} else {
		dontEscape.value = false;
		relativeUri.value = baseUri.Syntax.InternalResolve(baseUri, this, /* ref */ uriFormatException);
		if (uriFormatException.value !== null) {
			throw uriFormatException.value;
		}
	}
	this.m_Flags = System.Uri.Flags.Zero;
	this.m_Info = null;
	this.m_Syntax = null;
	this.CreateThis(relativeUri.value, dontEscape.value, System.UriKind.Absolute);
};
System.Uri.prototype._ctor$3 = function (baseUri, relativeUri) {
	var uriFormatException = new JSIL.Variable(null);
	System.Object.prototype._ctor.call(this);
	if (baseUri === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["baseUri"]);
	}
	if (!baseUri.IsAbsoluteUri) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["baseUri"]);
	}
	this.CreateThisFromUri(relativeUri);
	var uri = new JSIL.Variable(null);
	if (baseUri.Syntax.IsSimple) {
		var dontEscape = new JSIL.Variable(this.InFact(System.Uri.Flags.UserEscaped));
		relativeUri = System.Uri.ResolveHelper(
			baseUri, 
			this, 
			/* ref */ uri, 
			/* ref */ dontEscape, 
			/* ref */ uriFormatException
		);
		if (uriFormatException.value !== null) {
			throw uriFormatException.value;
		}
		if (System.Uri.op_Inequality(relativeUri, null)) {
			if (relativeUri !== this) {
				this.CreateThisFromUri(relativeUri);
			}
			return;
		}
	} else {
		dontEscape.value = false;
		uri.value = baseUri.Syntax.InternalResolve(baseUri, this, /* ref */ uriFormatException);
		if (uriFormatException.value !== null) {
			throw uriFormatException.value;
		}
	}
	this.m_Flags = System.Uri.Flags.Zero;
	this.m_Info = null;
	this.m_Syntax = null;
	this.CreateThis(uri.value, dontEscape.value, System.UriKind.Absolute);
};
System.Uri.GetCombinedString = JSIL.UntranslatableFunction("System.UriExceptionHelper/ParsingError System.Uri::GetCombinedString(System.Uri,System.String,System.Boolean,System.String&)");
System.Uri.prototype.get_AbsolutePath = function () {
	if (this.IsNotAbsoluteUri) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm04.System.SR.GetString$2("net_uri_NotAbsolute")]);
	}
	var text = this.PrivateAbsolutePath;
	if (!(!this.IsDosPath || ((text[0]) !== "/"))) {
		text = text.Substring$0(1);
	}
	return text;
};
System.Uri.prototype.get_PrivateAbsolutePath = function () {
	var uriInfo = this.EnsureUriInfo();
	if (uriInfo.MoreInfo === null) {
		uriInfo.MoreInfo = new $asm04.System.Uri.MoreInfo();
	}
	var text = uriInfo.MoreInfo.Path;
	if (text === null) {
		text = this.GetParts((System.UriComponents.KeepDelimiter | System.UriComponents.Path), System.UriFormat.UriEscaped);
		uriInfo.MoreInfo.Path = text;
	}
	return text;
};
System.Uri.prototype.get_AbsoluteUri = function () {
	if (this.m_Syntax === null) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm04.System.SR.GetString$2("net_uri_NotAbsolute")]);
	}
	var uriInfo = this.EnsureUriInfo();
	if (uriInfo.MoreInfo === null) {
		uriInfo.MoreInfo = new $asm04.System.Uri.MoreInfo();
	}
	var text = uriInfo.MoreInfo.AbsoluteUri;
	if (text === null) {
		text = this.GetParts((System.UriComponents.AbsoluteUri | System.UriComponents.Fragment | System.UriComponents.Host | System.UriComponents.HttpRequestUrl | System.UriComponents.Path | System.UriComponents.PathAndQuery | System.UriComponents.Port | System.UriComponents.Query | System.UriComponents.Scheme | System.UriComponents.SchemeAndServer | System.UriComponents.UserInfo), System.UriFormat.UriEscaped);
		uriInfo.MoreInfo.AbsoluteUri = text;
	}
	return text;
};
System.Uri.prototype.get_LocalPath = function () {
	if (this.IsNotAbsoluteUri) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm04.System.SR.GetString$2("net_uri_NotAbsolute")]);
	}
	return this.GetLocalPath();
};
System.Uri.prototype.get_IsUnc = function () {
	if (this.IsNotAbsoluteUri) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm04.System.SR.GetString$2("net_uri_NotAbsolute")]);
	}
	return this.IsUncPath;
};
System.Uri.prototype.get_UserEscaped = function () {
	return this.InFact(System.Uri.Flags.UserEscaped);
};
System.Uri.prototype.get_Host = function () {
	if (this.IsNotAbsoluteUri) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm04.System.SR.GetString$2("net_uri_NotAbsolute")]);
	}
	return this.GetParts(System.UriComponents.Host, System.UriFormat.UriEscaped);
};
System.Uri.StaticIsFile = function (syntax) {
	return syntax.InFact(System.UriSyntaxFlags.FileLikeUri);
};
System.Uri.prototype.GetLocalPath = function () {
	this.EnsureParseRemaining();
	if (!this.IsUncOrDosPath) {
		return this.GetUnescapedParts((System.UriComponents.KeepDelimiter | System.UriComponents.Path), System.UriFormat.Unescaped);
	}
	this.EnsureHostString(false);
	if (this.NotAny((System.Uri.Flags.HostNotCanonical | System.Uri.Flags.PathNotCanonical | System.Uri.Flags.ShouldBeCompressed))) {
		var num = this.IsUncPath ? (this.m_Info.Offset.Host - 2) : this.m_Info.Offset.Path;
		var text = (this.IsImplicitFile && 
			(this.m_Info.Offset.Host === this.IsDosPath ? 0 : 2) && 
			(this.m_Info.Offset.Query === this.m_Info.Offset.End)) ? this.m_String : (this.IsDosPath && 
			(((this.m_String[num]) === "/") || 
				((this.m_String[num]) === "\\"))) ? this.m_String.Substring$1((num + 1), ((this.m_Info.Offset.Query - num) - 1)) : this.m_String.Substring$1(num, (this.m_Info.Offset.Query - num));
		if (!(!this.IsDosPath || ((text[1]) !== "|"))) {
			text = text.Remove$0(1, 1);
			text = text.Insert(1, ":");
		}
	__loop0__: 
		for (var i = 0; i < text.length; ++i) {
			if ((text[i]) === "/") {
				text = text.Replace$0("/", "\\");
				break __loop0__;
			}
		}
		return text;
	}
	var num2 = new JSIL.Variable(0);
	num = this.m_Info.Offset.Path;
	var host = this.m_Info.Host;
	var array = JSIL.Array.New(System.Char, (((host.length + 3) + this.m_Info.Offset.Fragment) - this.m_Info.Offset.Path));
	if (this.IsUncPath) {
		array[0] = "\\";
		array[1] = "\\";
		num2.value = 2;
		$asm04.System.UriHelper.UnescapeString(
			host, 
			0, 
			host.length, 
			array, 
			/* ref */ num2, 
			"\uffff", 
			"\uffff", 
			"\uffff", 
			$asm04.System.UriHelper.UnescapeMode.CopyOnly, 
			this.m_Syntax, 
			false, 
			false
		);
	} else if (!(((this.m_String[num]) !== "/") && ((this.m_String[num]) !== "\\"))) {
		++num;
	}
	var num3 = num2.value;
	var unescapeMode = (this.InFact(System.Uri.Flags.PathNotCanonical) && 
		!this.IsImplicitFile) ? ($asm04.System.UriHelper.UnescapeMode.Unescape | $asm04.System.UriHelper.UnescapeMode.UnescapeAll) : $asm04.System.UriHelper.UnescapeMode.CopyOnly;
	$asm04.System.UriHelper.UnescapeString(
		this.m_String, 
		num, 
		this.m_Info.Offset.Query, 
		array, 
		/* ref */ num2, 
		"\uffff", 
		"\uffff", 
		"\uffff", 
		unescapeMode, 
		this.m_Syntax, 
		true, 
		false
	);
	if (array[1] === "|") {
		array[1] = ":";
	}
	if (this.InFact(System.Uri.Flags.ShouldBeCompressed)) {
		array = System.Uri.Compress(array, this.IsDosPath ? (num3 + 2) : num3, /* ref */ num2, this.m_Syntax);
	}
__loop1__: 
	for (var num4 = 0; num4 < num2.value; ++num4) {
		if (array[num4] === "/") {
			array[num4] = "\\";
		}
	}
	return JSIL.New(System.String, "_ctor$0", [array, 0, num2.value]);
};
System.Uri.prototype.get_Port = function () {
	if (this.IsNotAbsoluteUri) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm04.System.SR.GetString$2("net_uri_NotAbsolute")]);
	}
	if (this.m_Syntax.IsSimple) {
		this.EnsureUriInfo();
	} else {
		this.EnsureHostString(false);
	}
	if (this.InFact(System.Uri.Flags.NotDefaultPort)) {
		return this.m_Info.Offset.PortValue;
	}
	return this.m_Syntax.DefaultPort;
};
System.Uri.prototype.get_Query = function () {
	if (this.IsNotAbsoluteUri) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm04.System.SR.GetString$2("net_uri_NotAbsolute")]);
	}
	var uriInfo = this.EnsureUriInfo();
	if (uriInfo.MoreInfo === null) {
		uriInfo.MoreInfo = new $asm04.System.Uri.MoreInfo();
	}
	var text = uriInfo.MoreInfo.Query;
	if (text === null) {
		text = this.GetParts((System.UriComponents.KeepDelimiter | System.UriComponents.Query), System.UriFormat.UriEscaped);
		uriInfo.MoreInfo.Query = text;
	}
	return text;
};
System.Uri.prototype.get_Fragment = function () {
	if (this.IsNotAbsoluteUri) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm04.System.SR.GetString$2("net_uri_NotAbsolute")]);
	}
	var uriInfo = this.EnsureUriInfo();
	if (uriInfo.MoreInfo === null) {
		uriInfo.MoreInfo = new $asm04.System.Uri.MoreInfo();
	}
	var text = uriInfo.MoreInfo.Fragment;
	if (text === null) {
		text = this.GetParts((System.UriComponents.Fragment | System.UriComponents.KeepDelimiter), System.UriFormat.UriEscaped);
		uriInfo.MoreInfo.Fragment = text;
	}
	return text;
};
System.Uri.prototype.get_Scheme = function () {
	if (this.IsNotAbsoluteUri) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm04.System.SR.GetString$2("net_uri_NotAbsolute")]);
	}
	return this.m_Syntax.SchemeName;
};
System.Uri.prototype.get_OriginalStringSwitched = function () {
	return ((this.m_iriParsing && 
			this.InFact(System.Uri.Flags.HasUnicode)) || (this.AllowIdn && 
			(this.InFact(System.Uri.Flags.IdnHost) || 
				this.InFact(System.Uri.Flags.UnicodeHost))));
};
System.Uri.prototype.get_OriginalString = function () {
	if (!this.OriginalStringSwitched) {
		return this.m_String;
	}
	return this.m_originalUnicodeString;
};
System.Uri.prototype.get_DnsSafeHost = function () {
	if (this.IsNotAbsoluteUri) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm04.System.SR.GetString$2("net_uri_NotAbsolute")]);
	}
	if (!(!this.AllowIdn || (((this.m_Flags & System.Uri.Flags.IdnHost) === System.Uri.Flags.Zero) && 
				((this.m_Flags & System.Uri.Flags.UnicodeHost) === System.Uri.Flags.Zero)))) {
		this.EnsureUriInfo();
		return this.m_Info.DnsSafeHost;
	}
	this.EnsureHostString(false);
	var text = this.m_Info.Host;
	if (this.HostType === System.Uri.Flags.IPv6HostType) {
		text = text.Substring$1(1, (text.length - 2));
		if (this.m_Info.ScopeId !== null) {
			text = ((text + this.m_Info.ScopeId));
		}
	} else if (!((this.HostType !== (System.Uri.Flags.BasicHostType | System.Uri.Flags.IPv6HostType | System.Uri.Flags.UncHostType)) || !this.InFact((System.Uri.Flags.E_HostNotCanonical | System.Uri.Flags.HostNotCanonical)))) {
		var array = JSIL.Array.New(System.Char, text.length);
		var length = new JSIL.Variable(0);
		$asm04.System.UriHelper.UnescapeString(
			text, 
			0, 
			text.length, 
			array, 
			/* ref */ length, 
			"\uffff", 
			"\uffff", 
			"\uffff", 
			$asm04.System.UriHelper.UnescapeMode.CopyOnly, 
			this.m_Syntax, 
			false, 
			false
		);
		text = JSIL.New(System.String, "_ctor$0", [array, 0, length.value]);
	}
	return text;
};
System.Uri.prototype.get_IsAbsoluteUri = function () {
	return (this.m_Syntax !== null);
};
System.Uri.prototype.get_UserInfo = function () {
	if (this.IsNotAbsoluteUri) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm04.System.SR.GetString$2("net_uri_NotAbsolute")]);
	}
	return this.GetParts(System.UriComponents.UserInfo, System.UriFormat.UriEscaped);
};
System.Uri.CheckSchemeName = function (schemeName) {
	if (!((schemeName !== null) && 
			(schemeName.length !== 0) && System.Uri.IsAsciiLetter(schemeName[0]))) {
		return false;
	}
__loop0__: 
	for (var i = (schemeName.length - 1); i > 0; --i) {
		if (!(System.Uri.IsAsciiLetterOrDigit(schemeName[i]) || 
				((schemeName[i]) === "+") || 
				((schemeName[i]) === "-") || ((schemeName[i]) === "."))) {
			return false;
		}
	}
	return true;
};
System.Uri.IsHexDigit = function (character) {
	return (((character >= "0") && 
			(character <= "9")) || 
		((character >= "A") && 
			(character <= "F")) || ((character >= "a") && 
			(character <= "f")));
};
System.Uri.FromHex = function (digit) {
	if (!((digit >= "0") && 
			(digit <= "9")) && 
		!((digit >= "A") && 
			(digit <= "F")) && ((digit < "a") || 
			(digit > "f"))) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", ["digit"]);
	}
	if (digit > "9") {
		return ((digit <= "F") ? (digit - "A") : (digit - "a") + "\n");
	}
	return (digit - "0");
};
System.Uri.prototype.GetHashCode = function () {
	if (this.IsNotAbsoluteUri) {
		return System.Uri.CalculateCaseInsensitiveHashCode(this.OriginalString);
	}
	var uriInfo = this.EnsureUriInfo();
	if (uriInfo.MoreInfo === null) {
		uriInfo.MoreInfo = new $asm04.System.Uri.MoreInfo();
	}
	var num = uriInfo.MoreInfo.Hash;
	if (num === 0) {
		var text = uriInfo.MoreInfo.RemoteUrl;
		if (text === null) {
			text = this.GetParts((System.UriComponents.Host | System.UriComponents.HttpRequestUrl | System.UriComponents.Path | System.UriComponents.PathAndQuery | System.UriComponents.Port | System.UriComponents.Query | System.UriComponents.Scheme | System.UriComponents.SchemeAndServer), System.UriFormat.SafeUnescaped);
		}
		num = System.Uri.CalculateCaseInsensitiveHashCode(text);
		if (num === 0) {
			num = 16777216;
		}
		uriInfo.MoreInfo.Hash = num;
	}
	return num;
};
System.Uri.prototype.toString = function () {
	if (this.m_Syntax !== null) {
		this.EnsureUriInfo();
		if (this.m_Info.String === null) {
			if (this.Syntax.IsSimple) {
				this.m_Info.String = this.GetComponentsHelper((System.UriComponents.AbsoluteUri | System.UriComponents.Fragment | System.UriComponents.Host | System.UriComponents.HttpRequestUrl | System.UriComponents.Path | System.UriComponents.PathAndQuery | System.UriComponents.Port | System.UriComponents.Query | System.UriComponents.Scheme | System.UriComponents.SchemeAndServer | System.UriComponents.UserInfo), 32767);
			} else {
				this.m_Info.String = this.GetParts((System.UriComponents.AbsoluteUri | System.UriComponents.Fragment | System.UriComponents.Host | System.UriComponents.HttpRequestUrl | System.UriComponents.Path | System.UriComponents.PathAndQuery | System.UriComponents.Port | System.UriComponents.Query | System.UriComponents.Scheme | System.UriComponents.SchemeAndServer | System.UriComponents.UserInfo), System.UriFormat.SafeUnescaped);
			}
		}
		return this.m_Info.String;
	}
	if (!(this.m_iriParsing && this.InFact(System.Uri.Flags.HasUnicode))) {
		return this.OriginalString;
	}
	return this.m_String;
};
System.Uri.op_Equality = function (uri1, uri2) {
	return ((uri1 === uri2) || ((uri1 !== null) && 
			uri2 && 
			uri2.Equals(uri1)));
};
System.Uri.op_Inequality = function (uri1, uri2) {
	return ((uri1 !== uri2) && (!((uri1 !== null) && 
				uri2) || 
			!uri2.Equals(uri1)));
};
System.Uri.prototype.Equals = JSIL.UntranslatableFunction("System.Boolean System.Uri::Equals(System.Object)");
System.Uri.prototype.MakeRelativeUri = function (uri) {
	if (uri === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["uri"]);
	}
	if (!(!this.IsNotAbsoluteUri && !uri.IsNotAbsoluteUri)) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm04.System.SR.GetString$2("net_uri_NotAbsolute")]);
	}
	if (!(!(this.Scheme == uri.Scheme) || 
			!(this.Host == uri.Host) || (this.Port !== uri.Port))) {
		var absolutePath = uri.AbsolutePath;
		var text = System.Uri.PathDifference(this.AbsolutePath, absolutePath, !this.IsUncOrDosPath);
		if (!(!System.Uri.CheckForColonInFirstPathSegment(text) || (uri.IsDosPath && 
					absolutePath.Equals$2(text, System.StringComparison.Ordinal)))) {
			text = (("./" + text));
		}
		text = ((text + uri.GetParts((System.UriComponents.Fragment | System.UriComponents.Query), System.UriFormat.UriEscaped)));
		return JSIL.New(System.Uri, "_ctor$1", [text, System.UriKind.Relative]);
	}
	return uri;
};
System.Uri.CheckForColonInFirstPathSegment = function (uriString) {
	var anyOf = JSIL.Array.New(System.Char, [":", "\\", "/", "?", "#"]);
	var num = uriString.IndexOfAny$0(anyOf);
	return ((num >= 0) && ((uriString[num]) === ":"));
};
System.Uri.InternalEscapeString = function (rawString) {
	if (rawString === null) {
		return System.String.Empty;
	}
	var length = new JSIL.Variable(0);
	var array = $asm04.System.UriHelper.EscapeString(
		rawString, 
		0, 
		rawString.length, 
		null, 
		/* ref */ length, 
		true, 
		"?", 
		"#", 
		"%"
	);
	if (array === null) {
		return rawString;
	}
	return JSIL.New(System.String, "_ctor$0", [array, 0, length.value]);
};
System.Uri.ParseScheme = JSIL.UntranslatableFunction("System.UriExceptionHelper/ParsingError System.Uri::ParseScheme(System.String,System.Uri/Flags&,System.UriParser&)");
System.Uri.prototype.ParseMinimal = function () {
	var parsingError = this.PrivateParseMinimal();
	if (!JSIL.Cast(parsingError, System.Boolean)) {
		return null;
	}
	this.m_Flags = (this.m_Flags | System.Uri.Flags.ErrorOrParsingRecursion);
	return $asm04.System.UriExceptionHelper.GetException(parsingError);
};
System.Uri.prototype.PrivateParseMinimal = JSIL.UntranslatableFunction("System.UriExceptionHelper/ParsingError System.Uri::PrivateParseMinimal()");
System.Uri.prototype.PrivateParseMinimalIri = function (newHost, idx) {
	if (newHost !== null) {
		this.m_String = newHost;
	}
	if (!(!(!this.m_iriParsing && 
				this.AllowIdn && 
				(((this.m_Flags & System.Uri.Flags.IdnHost) !== System.Uri.Flags.Zero) || 
					((this.m_Flags & System.Uri.Flags.UnicodeHost) !== System.Uri.Flags.Zero))) && (!this.m_iriParsing || 
				((this.m_Flags & System.Uri.Flags.HasUnicode) !== System.Uri.Flags.Zero) || 
				!this.AllowIdn || 
				((this.m_Flags & System.Uri.Flags.IdnHost) === System.Uri.Flags.Zero)))) {
		this.m_Flags = (this.m_Flags & (System.Uri.Flags.AllUriInfoSet | System.Uri.Flags.AuthorityFound | System.Uri.Flags.BasicHostType | System.Uri.Flags.CanonicalDnsHost | System.Uri.Flags.DnsHostType | System.Uri.Flags.DosPath | System.Uri.Flags.ErrorOrParsingRecursion | System.Uri.Flags.FragmentIriCanonical | System.Uri.Flags.HasUnicode | System.Uri.Flags.HasUserInfo | System.Uri.Flags.HostTypeMask | System.Uri.Flags.HostUnicodeNormalized | System.Uri.Flags.IdnHost | System.Uri.Flags.ImplicitFile | System.Uri.Flags.IntranetUri | System.Uri.Flags.IPv4HostType | System.Uri.Flags.IPv6HostType | System.Uri.Flags.IriCanonical | System.Uri.Flags.LoopbackHost | System.Uri.Flags.MinimalUriInfoSet | System.Uri.Flags.NotDefaultPort | System.Uri.Flags.PathIriCanonical | System.Uri.Flags.QueryIriCanonical | System.Uri.Flags.RestUnicodeNormalized | System.Uri.Flags.UncHostType | System.Uri.Flags.UncPath | System.Uri.Flags.UnicodeHost | System.Uri.Flags.UnknownHostType | System.Uri.Flags.UnusedHostType | System.Uri.Flags.UseOrigUncdStrOffset | System.Uri.Flags.UserDrivenParsing | System.Uri.Flags.UserEscaped | System.Uri.Flags.UserIriCanonical));
		this.m_Flags = (this.m_Flags | this.m_String.length);
		this.m_String = ((this.m_String + this.m_originalUnicodeString.Substring$1(idx, (this.m_originalUnicodeString.length - idx))));
	}
};
System.Uri.prototype.CreateUriInfo = JSIL.UntranslatableFunction("System.Void System.Uri::CreateUriInfo(System.Uri/Flags)");
System.Uri.prototype.CreateHostString = JSIL.UntranslatableFunction("System.Void System.Uri::CreateHostString()");
System.Uri.CreateHostStringHelper = function (str, idx, end, /* ref */ flags, /* ref */ scopeId) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				var flag = new JSIL.Variable(false);
				var flags2 = (flags.value & (System.Uri.Flags.BasicHostType | System.Uri.Flags.DnsHostType | System.Uri.Flags.HostTypeMask | System.Uri.Flags.IPv4HostType | System.Uri.Flags.IPv6HostType | System.Uri.Flags.UncHostType | System.Uri.Flags.UnknownHostType | System.Uri.Flags.UnusedHostType));
				if (flags2 <= (System.Uri.Flags.DnsHostType | System.Uri.Flags.IPv4HostType | System.Uri.Flags.IPv6HostType)) {
					if (flags2 === System.Uri.Flags.IPv6HostType) {
						var text = $asm04.System.IPv6AddressHelper.ParseCanonicalName(str, idx, /* ref */ flag, /* ref */ scopeId);
						__label0__ = "IL_C4";
						continue __step0__;
					}
					if (flags2 === System.Uri.Flags.IPv4HostType) {
						text = $asm04.System.IPv4AddressHelper.ParseCanonicalName(str, idx, end, /* ref */ flag);
						__label0__ = "IL_C4";
						continue __step0__;
					}
					if (flags2 === (System.Uri.Flags.DnsHostType | System.Uri.Flags.IPv4HostType | System.Uri.Flags.IPv6HostType)) {
						text = $asm04.System.DomainNameHelper.ParseCanonicalName(str, idx, end, /* ref */ flag);
						__label0__ = "IL_C4";
						continue __step0__;
					}
				} else {
					if (flags2 === System.Uri.Flags.UncHostType) {
						text = $asm04.System.UncNameHelper.ParseCanonicalName(str, idx, end, /* ref */ flag);
						__label0__ = "IL_C4";
						continue __step0__;
					}
					if (flags2 !== (System.Uri.Flags.BasicHostType | System.Uri.Flags.IPv6HostType | System.Uri.Flags.UncHostType)) {
						if (flags2 === (System.Uri.Flags.BasicHostType | System.Uri.Flags.DnsHostType | System.Uri.Flags.HostTypeMask | System.Uri.Flags.IPv4HostType | System.Uri.Flags.IPv6HostType | System.Uri.Flags.UncHostType | System.Uri.Flags.UnknownHostType | System.Uri.Flags.UnusedHostType)) {
							text = System.String.Empty;
							__label0__ = "IL_C4";
							continue __step0__;
						}
					} else {
						if (System.Uri.StaticInFact(flags.value, System.Uri.Flags.DosPath)) {
							text = System.String.Empty;
						} else {
							text = str.Substring$1(idx, (end - idx));
						}
						if (text.length === 0) {
							flag.value = true;
							__label0__ = "IL_C4";
							continue __step0__;
						}
						__label0__ = "IL_C4";
						continue __step0__;
					}
				}
				throw $asm04.System.UriExceptionHelper.GetException(System.UriExceptionHelper.ParsingError.BadHostName);
				__label0__ = "IL_C4";
				continue __step0__;
				break;
			case "IL_C4":
				if (flag.value) {
					flags.value = (flags.value | System.Uri.Flags.LoopbackHost);
				}
				return text;
				break __step0__;
		}
	}
};
System.Uri.prototype.GetHostViaCustomSyntax = JSIL.UntranslatableFunction("System.Void System.Uri::GetHostViaCustomSyntax()");
System.Uri.prototype.GetParts = function (uriParts, formatAs) {
	return this.GetComponents(uriParts, formatAs);
};
System.Uri.prototype.GetEscapedParts = function (uriParts) {
	var num = ((Math.floor(this.m_Flags) & 16256) >> 6);
	if (this.InFact(System.Uri.Flags.SchemeNotCanonical)) {
		num = (num | 1);
	}
	if (uriParts & System.UriComponents.Path) {
		if (this.InFact((System.Uri.Flags.BackslashInPath | System.Uri.Flags.FirstSlashAbsent | System.Uri.Flags.ShouldBeCompressed))) {
			num = (num | 16);
		} else if (!(!this.IsDosPath || ((this.m_String[((this.m_Info.Offset.Path + this.SecuredPathIndex) - 1)]) !== "|"))) {
			num = (num | 16);
		}
	}
	if (!(Math.floor(uriParts) & num)) {
		var uriPartsFromUserString = this.GetUriPartsFromUserString(uriParts);
		if (uriPartsFromUserString !== null) {
			return uriPartsFromUserString;
		}
	}
	return this.ReCreateParts(uriParts, num, System.UriFormat.UriEscaped);
};
System.Uri.prototype.GetUnescapedParts = function (uriParts, formatAs) {
	var num = (Math.floor(this.m_Flags) & 127);
	if (uriParts & System.UriComponents.Path) {
		if ((this.m_Flags & (System.Uri.Flags.BackslashInPath | System.Uri.Flags.FirstSlashAbsent | System.Uri.Flags.ShouldBeCompressed)) !== System.Uri.Flags.Zero) {
			num = (num | 16);
		} else if (!(!this.IsDosPath || ((this.m_String[((this.m_Info.Offset.Path + this.SecuredPathIndex) - 1)]) !== "|"))) {
			num = (num | 16);
		}
	}
	if (!(Math.floor(uriParts) & num)) {
		var uriPartsFromUserString = this.GetUriPartsFromUserString(uriParts);
		if (uriPartsFromUserString !== null) {
			return uriPartsFromUserString;
		}
	}
	return this.ReCreateParts(uriParts, num, formatAs);
};
System.Uri.prototype.ReCreateParts = function (parts, nonCanonical, formatAs) {
	this.EnsureHostString(false);
	var text = !(parts & System.UriComponents.Host) ? System.String.Empty : this.m_Info.Host;
	var num = new JSIL.Variable(((this.m_Info.Offset.End - this.m_Info.Offset.User) * (formatAs === System.UriFormat.UriEscaped) ? 12 : 1));
	var array = JSIL.Array.New(System.Char, ((((text.length + num.value) + this.m_Syntax.SchemeName.length) + 3) + 1));
	num.value = 0;
	if (parts & System.UriComponents.Scheme) {
		this.m_Syntax.SchemeName.CopyTo(0, array, num.value, this.m_Syntax.SchemeName.length);
		num.value += this.m_Syntax.SchemeName.length;
		if (parts !== System.UriComponents.Scheme) {
			array[num.value++] = ":";
			if (this.InFact(System.Uri.Flags.AuthorityFound)) {
				array[num.value++] = "/";
				array[num.value++] = "/";
			}
		}
	}
	if (!(!(parts & System.UriComponents.UserInfo) || !this.InFact(System.Uri.Flags.HasUserInfo))) {
		if (nonCanonical & 2) {
			switch (Number(formatAs)) {
				case 1: 
					if (this.NotAny(System.Uri.Flags.UserEscaped)) {
						array = $asm04.System.UriHelper.EscapeString(
							this.m_String, 
							this.m_Info.Offset.User, 
							this.m_Info.Offset.Host, 
							array, 
							/* ref */ num, 
							true, 
							"?", 
							"#", 
							"%"
						);
					}
					break;
				case 2: 
					array = $asm04.System.UriHelper.UnescapeString(
						this.m_String, 
						this.m_Info.Offset.User, 
						this.m_Info.Offset.Host, 
						array, 
						/* ref */ num, 
						"\uffff", 
						"\uffff", 
						"\uffff", 
						($asm04.System.UriHelper.UnescapeMode.Unescape | $asm04.System.UriHelper.UnescapeMode.UnescapeAll), 
						this.m_Syntax, 
						false, 
						false
					);
					break;
				case 3: 
					array = $asm04.System.UriHelper.UnescapeString(
						this.m_String, 
						this.m_Info.Offset.User, 
						(this.m_Info.Offset.Host - 1), 
						array, 
						/* ref */ num, 
						"@", 
						"/", 
						"\\", 
						this.InFact(System.Uri.Flags.UserEscaped) ? $asm04.System.UriHelper.UnescapeMode.Unescape : ($asm04.System.UriHelper.UnescapeMode.Escape | $asm04.System.UriHelper.UnescapeMode.EscapeUnescape | $asm04.System.UriHelper.UnescapeMode.Unescape), 
						this.m_Syntax, 
						false, 
						false
					);
					array[num.value++] = "@";
					break;
				default: 
					array = $asm04.System.UriHelper.UnescapeString(
						this.m_String, 
						this.m_Info.Offset.User, 
						this.m_Info.Offset.Host, 
						array, 
						/* ref */ num, 
						"\uffff", 
						"\uffff", 
						"\uffff", 
						$asm04.System.UriHelper.UnescapeMode.CopyOnly, 
						this.m_Syntax, 
						false, 
						false
					);
					break;
			}
		} else {
			$asm04.System.UriHelper.UnescapeString(
				this.m_String, 
				this.m_Info.Offset.User, 
				this.m_Info.Offset.Host, 
				array, 
				/* ref */ num, 
				"\uffff", 
				"\uffff", 
				"\uffff", 
				$asm04.System.UriHelper.UnescapeMode.CopyOnly, 
				this.m_Syntax, 
				false, 
				false
			);
		}
		if (parts === System.UriComponents.UserInfo) {
			--num.value;
		}
	}
	if (!(!(parts & System.UriComponents.Host) || (text.length === 0))) {
		if (!((formatAs === System.UriFormat.UriEscaped) || 
				(this.HostType !== (System.Uri.Flags.BasicHostType | System.Uri.Flags.IPv6HostType | System.Uri.Flags.UncHostType)) || !(nonCanonical & 4))) {
			var unescapeMode = (formatAs === System.UriFormat.Unescaped) ? ($asm04.System.UriHelper.UnescapeMode.Unescape | $asm04.System.UriHelper.UnescapeMode.UnescapeAll) : this.InFact(System.Uri.Flags.UserEscaped) ? $asm04.System.UriHelper.UnescapeMode.Unescape : ($asm04.System.UriHelper.UnescapeMode.Escape | $asm04.System.UriHelper.UnescapeMode.EscapeUnescape | $asm04.System.UriHelper.UnescapeMode.Unescape);
		} else {
			unescapeMode = $asm04.System.UriHelper.UnescapeMode.CopyOnly;
		}
		array = $asm04.System.UriHelper.UnescapeString(
			text, 
			0, 
			text.length, 
			array, 
			/* ref */ num, 
			"/", 
			"?", 
			"#", 
			unescapeMode, 
			this.m_Syntax, 
			false, 
			false
		);
		if (!(!(parts & System.UriComponents.SerializationInfoString) || 
				(this.HostType !== System.Uri.Flags.IPv6HostType) || (this.m_Info.ScopeId === null))) {
			this.m_Info.ScopeId.CopyTo(0, array, (num.value - 1), this.m_Info.ScopeId.length);
			num.value += this.m_Info.ScopeId.length;
			array[(num.value - 1)] = "]";
		}
	}
	if (parts & System.UriComponents.Port) {
		if (!(nonCanonical & 8)) {
			if (this.InFact(System.Uri.Flags.NotDefaultPort)) {
			__loop0__: 
				for (var num2 = this.m_Info.Offset.Path; (this.m_String[--num2]) !== ":"; ) {
				}
				this.m_String.CopyTo(num2, array, num.value, (this.m_Info.Offset.Path - num2));
				num.value += (this.m_Info.Offset.Path - num2);
			} else if (!(!(parts & System.UriComponents.StrongPort) || (this.m_Syntax.DefaultPort === -1))) {
				array[num.value++] = ":";
				text = ((this.m_Info.Offset.PortValue).toString());
				text.CopyTo(0, array, num.value, text.length);
				num.value += text.length;
			}
		} else if (!(!this.InFact(System.Uri.Flags.NotDefaultPort) && (!(parts & System.UriComponents.StrongPort) || 
					(this.m_Syntax.DefaultPort === -1)))) {
			array[num.value++] = ":";
			text = ((this.m_Info.Offset.PortValue).toString());
			text.CopyTo(0, array, num.value, text.length);
			num.value += text.length;
		}
	}
	if (parts & System.UriComponents.Path) {
		array = this.GetCanonicalPath(array, /* ref */ num, formatAs);
		if (parts === System.UriComponents.Path) {
			if (!(!this.InFact(System.Uri.Flags.AuthorityFound) || 
					(num.value === 0) || (array[0] !== "/"))) {
				var num3 = 1;
				--num.value;
			} else {
				num3 = 0;
			}
			if (num.value !== 0) {
				return JSIL.New(System.String, "_ctor$0", [array, num3, num.value]);
			}
			return System.String.Empty;
		}
	}
	if (!(!(parts & System.UriComponents.Query) || (this.m_Info.Offset.Query >= this.m_Info.Offset.Fragment))) {
		num3 = (this.m_Info.Offset.Query + 1);
		if (parts !== System.UriComponents.Query) {
			array[num.value++] = "?";
		}
		if (nonCanonical & 32) {
			switch (Number(formatAs)) {
				case 1: 
					if (this.NotAny(System.Uri.Flags.UserEscaped)) {
						array = $asm04.System.UriHelper.EscapeString(
							this.m_String, 
							num3, 
							this.m_Info.Offset.Fragment, 
							array, 
							/* ref */ num, 
							true, 
							"#", 
							"\uffff", 
							"%"
						);
					}
					break;
				case 2: 
					array = $asm04.System.UriHelper.UnescapeString(
						this.m_String, 
						num3, 
						this.m_Info.Offset.Fragment, 
						array, 
						/* ref */ num, 
						"#", 
						"\uffff", 
						"\uffff", 
						($asm04.System.UriHelper.UnescapeMode.Unescape | $asm04.System.UriHelper.UnescapeMode.UnescapeAll), 
						this.m_Syntax, 
						true, 
						false
					);
					break;
				default: 
					if (formatAs !== 32767) {
						array = $asm04.System.UriHelper.UnescapeString(
							this.m_String, 
							num3, 
							this.m_Info.Offset.Fragment, 
							array, 
							/* ref */ num, 
							"#", 
							"\uffff", 
							"\uffff", 
							this.InFact(System.Uri.Flags.UserEscaped) ? $asm04.System.UriHelper.UnescapeMode.Unescape : ($asm04.System.UriHelper.UnescapeMode.Escape | $asm04.System.UriHelper.UnescapeMode.EscapeUnescape | $asm04.System.UriHelper.UnescapeMode.Unescape), 
							this.m_Syntax, 
							true, 
							false
						);
					} else {
						array = $asm04.System.UriHelper.UnescapeString(
							this.m_String, 
							num3, 
							this.m_Info.Offset.Fragment, 
							array, 
							/* ref */ num, 
							"#", 
							"\uffff", 
							"\uffff", 
							(this.InFact(System.Uri.Flags.UserEscaped) ? $asm04.System.UriHelper.UnescapeMode.Unescape : ($asm04.System.UriHelper.UnescapeMode.Escape | $asm04.System.UriHelper.UnescapeMode.EscapeUnescape | $asm04.System.UriHelper.UnescapeMode.Unescape) | $asm04.System.UriHelper.UnescapeMode.V1ToStringFlag), 
							this.m_Syntax, 
							true, 
							false
						);
					}
					break;
			}
		} else {
			$asm04.System.UriHelper.UnescapeString(
				this.m_String, 
				num3, 
				this.m_Info.Offset.Fragment, 
				array, 
				/* ref */ num, 
				"\uffff", 
				"\uffff", 
				"\uffff", 
				$asm04.System.UriHelper.UnescapeMode.CopyOnly, 
				this.m_Syntax, 
				true, 
				false
			);
		}
	}
	if (!(!(parts & System.UriComponents.Fragment) || (this.m_Info.Offset.Fragment >= this.m_Info.Offset.End))) {
		num3 = (this.m_Info.Offset.Fragment + 1);
		if (parts !== System.UriComponents.Fragment) {
			array[num.value++] = "#";
		}
		if (nonCanonical & 64) {
			switch (Number(formatAs)) {
				case 1: 
					if (this.NotAny(System.Uri.Flags.UserEscaped)) {
						array = $asm04.System.UriHelper.EscapeString(
							this.m_String, 
							num3, 
							this.m_Info.Offset.End, 
							array, 
							/* ref */ num, 
							true, 
							"#", 
							"\uffff", 
							"%"
						);
					}
					break;
				case 2: 
					array = $asm04.System.UriHelper.UnescapeString(
						this.m_String, 
						num3, 
						this.m_Info.Offset.End, 
						array, 
						/* ref */ num, 
						"#", 
						"\uffff", 
						"\uffff", 
						($asm04.System.UriHelper.UnescapeMode.Unescape | $asm04.System.UriHelper.UnescapeMode.UnescapeAll), 
						this.m_Syntax, 
						false, 
						false
					);
					break;
				default: 
					if (formatAs !== 32767) {
						array = $asm04.System.UriHelper.UnescapeString(
							this.m_String, 
							num3, 
							this.m_Info.Offset.End, 
							array, 
							/* ref */ num, 
							"#", 
							"\uffff", 
							"\uffff", 
							this.InFact(System.Uri.Flags.UserEscaped) ? $asm04.System.UriHelper.UnescapeMode.Unescape : ($asm04.System.UriHelper.UnescapeMode.Escape | $asm04.System.UriHelper.UnescapeMode.EscapeUnescape | $asm04.System.UriHelper.UnescapeMode.Unescape), 
							this.m_Syntax, 
							false, 
							false
						);
					} else {
						array = $asm04.System.UriHelper.UnescapeString(
							this.m_String, 
							num3, 
							this.m_Info.Offset.End, 
							array, 
							/* ref */ num, 
							"#", 
							"\uffff", 
							"\uffff", 
							(this.InFact(System.Uri.Flags.UserEscaped) ? $asm04.System.UriHelper.UnescapeMode.Unescape : ($asm04.System.UriHelper.UnescapeMode.Escape | $asm04.System.UriHelper.UnescapeMode.EscapeUnescape | $asm04.System.UriHelper.UnescapeMode.Unescape) | $asm04.System.UriHelper.UnescapeMode.V1ToStringFlag), 
							this.m_Syntax, 
							false, 
							false
						);
					}
					break;
			}
		} else {
			$asm04.System.UriHelper.UnescapeString(
				this.m_String, 
				num3, 
				this.m_Info.Offset.End, 
				array, 
				/* ref */ num, 
				"\uffff", 
				"\uffff", 
				"\uffff", 
				$asm04.System.UriHelper.UnescapeMode.CopyOnly, 
				this.m_Syntax, 
				false, 
				false
			);
		}
	}
	return JSIL.New(System.String, "_ctor$0", [array, 0, num.value]);
};
System.Uri.prototype.GetUriPartsFromUserString = function (uriParts) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				var uriComponents = (uriParts & (System.UriComponents.AbsoluteUri | System.UriComponents.Fragment | System.UriComponents.Host | System.UriComponents.HostAndPort | System.UriComponents.HttpRequestUrl | System.UriComponents.Path | System.UriComponents.PathAndQuery | System.UriComponents.Port | System.UriComponents.Query | System.UriComponents.Scheme | System.UriComponents.SchemeAndServer | System.UriComponents.SerializationInfoString | System.UriComponents.StrongAuthority | System.UriComponents.StrongPort | System.UriComponents.UserInfo));
				if (uriComponents <= (System.UriComponents.Path | System.UriComponents.PathAndQuery | System.UriComponents.Query)) {
					if (uriComponents <= System.UriComponents.Path) {
						switch (Number(uriComponents)) {
							case 1: 
								if (uriParts !== System.UriComponents.Scheme) {
									return this.m_String.Substring$1(this.m_Info.Offset.Scheme, (this.m_Info.Offset.User - this.m_Info.Offset.Scheme));
								}
								return this.m_Syntax.SchemeName;
							case 2: 
								if (this.NotAny(System.Uri.Flags.HasUserInfo)) {
									return System.String.Empty;
								}
								if (uriParts === System.UriComponents.UserInfo) {
									var num = (this.m_Info.Offset.Host - 1);
								} else {
									num = this.m_Info.Offset.Host;
								}
								if (this.m_Info.Offset.User >= num) {
									return System.String.Empty;
								}
								return this.m_String.Substring$1(this.m_Info.Offset.User, (num - this.m_Info.Offset.User));
							case 3: 
								__label0__ = "IL_99D";
								continue __step0__;
							case 4: 
								var num2 = this.m_Info.Offset.Path;
								if (this.InFact((System.Uri.Flags.NotDefaultPort | System.Uri.Flags.PortNotCanonical))) {
								__loop0__: 
									while ((this.m_String[--num2]) !== ":") {
									}
								}
								if (num2 - this.m_Info.Offset.Host) {
									return this.m_String.Substring$1(this.m_Info.Offset.Host, (num2 - this.m_Info.Offset.Host));
								}
								return System.String.Empty;
							default: 
								switch (Number(uriComponents)) {
									case 13: 
										if (!this.InFact(System.Uri.Flags.HasUserInfo)) {
											return this.m_String.Substring$1(this.m_Info.Offset.Scheme, (this.m_Info.Offset.Path - this.m_Info.Offset.Scheme));
										}
										return (this.m_String.Substring$1(this.m_Info.Offset.Scheme, (this.m_Info.Offset.User - this.m_Info.Offset.Scheme)) + this.m_String.Substring$1(this.m_Info.Offset.Host, (this.m_Info.Offset.Path - this.m_Info.Offset.Host)));
									case 14: 
										break;
									case 15: 
										return this.m_String.Substring$1(this.m_Info.Offset.Scheme, (this.m_Info.Offset.Path - this.m_Info.Offset.Scheme));
									case 16: 
										if (!((uriParts !== System.UriComponents.Path) || 
												!this.InFact(System.Uri.Flags.AuthorityFound) || 
												(this.m_Info.Offset.End <= this.m_Info.Offset.Path) || ((this.m_String[this.m_Info.Offset.Path]) !== "/"))) {
											num = (this.m_Info.Offset.Path + 1);
										} else {
											num = this.m_Info.Offset.Path;
										}
										if (num >= this.m_Info.Offset.Query) {
											return System.String.Empty;
										}
										return this.m_String.Substring$1(num, (this.m_Info.Offset.Query - num));
									default: 
										__label0__ = "IL_99D";
										continue __step0__;
								}
								break;
						}
					} else if (uriComponents !== System.UriComponents.Query) {
						if (uriComponents !== (System.UriComponents.Path | System.UriComponents.PathAndQuery | System.UriComponents.Query)) {
							__label0__ = "IL_99D";
							continue __step0__;
						}
						return this.m_String.Substring$1(this.m_Info.Offset.Path, (this.m_Info.Offset.Fragment - this.m_Info.Offset.Path));
					} else {
						if (uriParts === System.UriComponents.Query) {
							num = (this.m_Info.Offset.Query + 1);
						} else {
							num = this.m_Info.Offset.Query;
						}
						if (num >= this.m_Info.Offset.Fragment) {
							return System.String.Empty;
						}
						return this.m_String.Substring$1(num, (this.m_Info.Offset.Fragment - num));
					}
				} else if (uriComponents <= (System.UriComponents.Fragment | System.UriComponents.Path | System.UriComponents.PathAndQuery | System.UriComponents.Query)) {
					switch (Number(uriComponents)) {
						case 61: 
							if (this.InFact(System.Uri.Flags.HasUserInfo)) {
								return (this.m_String.Substring$1(this.m_Info.Offset.Scheme, (this.m_Info.Offset.User - this.m_Info.Offset.Scheme)) + this.m_String.Substring$1(this.m_Info.Offset.Host, (this.m_Info.Offset.Fragment - this.m_Info.Offset.Host)));
							}
							if (!(this.m_Info.Offset.Scheme || (this.m_Info.Offset.Fragment !== this.m_String.length))) {
								return this.m_String;
							}
							return this.m_String.Substring$1(this.m_Info.Offset.Scheme, (this.m_Info.Offset.Fragment - this.m_Info.Offset.Scheme));
						case 62: 
							__label0__ = "IL_99D";
							continue __step0__;
						case 63: 
							if (!(this.m_Info.Offset.Scheme || (this.m_Info.Offset.Fragment !== this.m_String.length))) {
								return this.m_String;
							}
							return this.m_String.Substring$1(this.m_Info.Offset.Scheme, (this.m_Info.Offset.Fragment - this.m_Info.Offset.Scheme));
						case 64: 
							if (uriParts === System.UriComponents.Fragment) {
								num = (this.m_Info.Offset.Fragment + 1);
							} else {
								num = this.m_Info.Offset.Fragment;
							}
							if (num >= this.m_Info.Offset.End) {
								return System.String.Empty;
							}
							return this.m_String.Substring$1(num, (this.m_Info.Offset.End - num));
						default: 
							if (uriComponents !== (System.UriComponents.Fragment | System.UriComponents.Path | System.UriComponents.PathAndQuery | System.UriComponents.Query)) {
								__label0__ = "IL_99D";
								continue __step0__;
							}
							return this.m_String.Substring$1(this.m_Info.Offset.Path, (this.m_Info.Offset.End - this.m_Info.Offset.Path));
					}
				} else {
					switch (Number(uriComponents)) {
						case 125: 
							if (this.InFact(System.Uri.Flags.HasUserInfo)) {
								return (this.m_String.Substring$1(this.m_Info.Offset.Scheme, (this.m_Info.Offset.User - this.m_Info.Offset.Scheme)) + this.m_String.Substring$1(this.m_Info.Offset.Host, (this.m_Info.Offset.End - this.m_Info.Offset.Host)));
							}
							if (!(this.m_Info.Offset.Scheme || (this.m_Info.Offset.End !== this.m_String.length))) {
								return this.m_String;
							}
							return this.m_String.Substring$1(this.m_Info.Offset.Scheme, (this.m_Info.Offset.End - this.m_Info.Offset.Scheme));
						case 126: 
							__label0__ = "IL_99D";
							continue __step0__;
						case 127: 
							if (!(this.m_Info.Offset.Scheme || (this.m_Info.Offset.End !== this.m_String.length))) {
								return this.m_String;
							}
							return this.m_String.Substring$1(this.m_Info.Offset.Scheme, (this.m_Info.Offset.End - this.m_Info.Offset.Scheme));
						default: 
							switch (Number(uriComponents)) {
								case 132: 
									if (this.InFact(System.Uri.Flags.HasUserInfo)) {
										if (!(!this.InFact(System.Uri.Flags.NotDefaultPort) && (this.m_Syntax.DefaultPort !== -1))) {
											return this.m_String.Substring$1(this.m_Info.Offset.Host, (this.m_Info.Offset.Path - this.m_Info.Offset.Host));
										}
										return JSIL.ConcatString(this.m_String.Substring$1(this.m_Info.Offset.Host, (this.m_Info.Offset.Path - this.m_Info.Offset.Host)), ":", (this.m_Info.Offset.PortValue).toString());
									}
									break;
								case 133: 
									__label0__ = "IL_99D";
									continue __step0__;
								case 134: 
									break;
								default: 
									__label0__ = "IL_99D";
									continue __step0__;
							}
							if (!(this.InFact(System.Uri.Flags.NotDefaultPort) || (this.m_Syntax.DefaultPort === -1))) {
								return JSIL.ConcatString(this.m_String.Substring$1(this.m_Info.Offset.User, (this.m_Info.Offset.Path - this.m_Info.Offset.User)), ":", (this.m_Info.Offset.PortValue).toString());
							}
							break;
					}
				}
				if (this.m_Info.Offset.Path - this.m_Info.Offset.User) {
					return this.m_String.Substring$1(this.m_Info.Offset.User, (this.m_Info.Offset.Path - this.m_Info.Offset.User));
				}
				return System.String.Empty;
				__label0__ = "IL_99D";
				continue __step0__;
				break;
			case "IL_99D":
				return null;
				break __step0__;
		}
	}
};
System.Uri.prototype.ParseRemaining = JSIL.UntranslatableFunction("System.Void System.Uri::ParseRemaining()");
System.Uri.prototype.GetCanonicalPath = JSIL.UntranslatableFunction("System.Char[] System.Uri::GetCanonicalPath(System.Char[],System.Int32&,System.UriFormat)");
System.Uri.Compress = function (dest, start, /* ref */ destLength, syntax) {
	var __label0__ = "__entry0__";
__step0__: 
	while (true) {
		switch (__label0__) {
			case "__entry0__":
				var num = 0;
				var num2 = 0;
				var num3 = 0;
				var num4 = 0;
				var num5 = (destLength.value - 1);
			__loop0__: 
				for (--start; num5 !== start; ) {
					var __label1__ = "__entry1__";
				__step1__: 
					while (true) {
						switch (__label1__) {
							case "__entry1__":
								var c = dest[num5];
								if (!((c !== "\\") || !syntax.InFact(System.UriSyntaxFlags.ConvertPathSlashes))) {
									c = (dest[num5] = "/");
								}
								if (c === "/") {
									++num;
								} else {
									if (num > 1) {
										num2 = (num5 + 1);
									}
									num = 0;
								}
								if (c === ".") {
									++num3;
								} else {
									if (num3 !== 0) {
										var flag = (syntax.NotAny(System.UriSyntaxFlags.CanonicalizeAsFilePath) && 
											((num3 > 2) || 
												(c !== "/") || 
												(num5 === start)));
										if (!(flag || (c !== "/"))) {
											if (!((num2 !== ((num5 + num3) + 1)) && ((num2 !== 0) || 
														(((num5 + num3) + 1) !== destLength.value)))) {
												num2 = (((num5 + 1) + num3) + (num2 === 0) ? 0 : 1);
												System.Buffer.BlockCopy(
													dest, 
													(num2 << 1), 
													dest, 
													((num5 + 1) << 1), 
													((destLength.value - num2) << 1)
												);
												destLength.value -= ((num2 - num5) - 1);
												num2 = num5;
												if (num3 === 2) {
													++num4;
												}
												num3 = 0;
												__label1__ = "IL_17F";
												continue __step1__;
											}
										} else if (!(flag || 
												(num4 !== 0) || ((num2 !== ((num5 + num3) + 1)) && 
													((num2 !== 0) || 
														(((num5 + num3) + 1) !== destLength.value))))) {
											num3 = ((num5 + 1) + num3);
											System.Buffer.BlockCopy(
												dest, 
												(num3 << 1), 
												dest, 
												((num5 + 1) << 1), 
												((destLength.value - num3) << 1)
											);
											destLength.value -= ((num3 - num5) - 1);
											num2 = 0;
											num3 = 0;
											__label1__ = "IL_17F";
											continue __step1__;
										}
										num3 = 0;
									}
									if (c === "/") {
										if (num4 !== 0) {
											--num4;
											++num2;
											System.Buffer.BlockCopy(
												dest, 
												(num2 << 1), 
												dest, 
												((num5 + 1) << 1), 
												((destLength.value - num2) << 1)
											);
											destLength.value -= ((num2 - num5) - 1);
										}
										num2 = num5;
									}
								}
								__label1__ = "IL_17F";
								continue __step1__;
								break;
							case "IL_17F":
								--num5;
								break __step1__;
						}
					}
				}
				++start;
				if (!((destLength.value <= start) || 
						!syntax.InFact(System.UriSyntaxFlags.CanonicalizeAsFilePath) || (num > 1))) {
					if (!((num4 === 0) || (dest[start] === "/"))) {
						++num2;
						System.Buffer.BlockCopy(
							dest, 
							(num2 << 1), 
							dest, 
							(start << 1), 
							((destLength.value - num2) << 1)
						);
						destLength.value -= num2;
					} else if (!((num3 === 0) || ((num2 !== (num3 + 1)) && 
								((num2 !== 0) || 
									((num3 + 1) !== destLength.value))))) {
						num3 += (num2 === 0) ? 0 : 1;
						System.Buffer.BlockCopy(
							dest, 
							(num3 << 1), 
							dest, 
							(start << 1), 
							((destLength.value - num3) << 1)
						);
						destLength.value -= num3;
					}
				}
				return dest;
				break __step0__;
		}
	}
};
System.Uri.CalculateCaseInsensitiveHashCode = function (text) {
	return System.StringComparer.InvariantCultureIgnoreCase.GetHashCode$1(text);
};
System.Uri.CombineUri = function (basePart, relativePart, uriFormat) {
	var c = (relativePart[0]);
	if (!(!basePart.IsDosPath || 
			((c !== "/") && 
				(c !== "\\")) || ((relativePart.length !== 1) && 
				(((relativePart[1]) === "/") || 
					((relativePart[1]) === "\\"))))) {
		var num = basePart.OriginalString.IndexOf$0(":");
		if (basePart.IsImplicitFile) {
			return (basePart.OriginalString.Substring$1(0, (num + 1)) + relativePart);
		}
		num = basePart.OriginalString.IndexOf$1(":", (num + 1));
		return (basePart.OriginalString.Substring$1(0, (num + 1)) + relativePart);
	} else if (!(!System.Uri.StaticIsFile(basePart.Syntax) || ((c !== "\\") && 
				(c !== "/")))) {
		if (!((relativePart.length < 2) || (((relativePart[1]) !== "\\") && 
					((relativePart[1]) !== "/")))) {
			if (!basePart.IsImplicitFile) {
				return ("file:" + relativePart);
			}
			return relativePart;
		} else {
			if (!basePart.IsUnc) {
				return ("file://" + relativePart);
			}
			var text = basePart.GetParts((System.UriComponents.KeepDelimiter | System.UriComponents.Path), System.UriFormat.Unescaped);
		__loop2__: 
			for (var i = 1; i < text.length; ++i) {
				if ((text[i]) === "/") {
					text = text.Substring$1(0, i);
					break __loop2__;
				}
			}
			if (basePart.IsImplicitFile) {
				return ("\\\\" + basePart.GetParts(System.UriComponents.Host, System.UriFormat.Unescaped) + text + relativePart);
			}
			return ("file://" + basePart.GetParts(System.UriComponents.Host, uriFormat) + text + relativePart);
		}
	} else {
		var flag = basePart.Syntax.InFact(System.UriSyntaxFlags.ConvertPathSlashes);
		var text2 = null;
		if ((c !== "/") && ((c !== "\\") || 
				!flag)) {
			text2 = basePart.GetParts((System.UriComponents.KeepDelimiter | System.UriComponents.Path), basePart.IsImplicitFile ? System.UriFormat.Unescaped : uriFormat);
			var j = new JSIL.Variable(text2.length);
			var array = JSIL.Array.New(System.Char, (j.value + relativePart.length));
			if (j.value > 0) {
				text2.CopyTo(0, array, 0, j.value);
			__loop0__: 
				while (j.value > 0) {
					if (array[--j.value] === "/") {
						++j.value;
						break __loop0__;
					}
				}
			}
			relativePart.CopyTo(0, array, j.value, relativePart.length);
			c = basePart.Syntax.InFact(System.UriSyntaxFlags.MayHaveQuery) ? "?" : "\uffff";
			var c2 = (!basePart.IsImplicitFile && 
				basePart.Syntax.InFact(System.UriSyntaxFlags.MayHaveFragment)) ? "#" : "\uffff";
			var text3 = System.String.Empty;
			if (!((c === "\uffff") && (c2 === "\uffff"))) {
			__loop1__: 
				for (var num2 = 0; !((num2 >= relativePart.length) || 
						(array[(j.value + num2)] === c) || (array[(j.value + num2)] === c2)); ++num2) {
				}
				if (num2 === 0) {
					text3 = relativePart;
				} else if (num2 < relativePart.length) {
					text3 = relativePart.Substring$0(num2);
				}
				j.value += num2;
			} else {
				j.value += relativePart.length;
			}
			if (basePart.HostType === System.Uri.Flags.IPv6HostType) {
				if (basePart.IsImplicitFile) {
					text2 = (JSIL.ConcatString("\\\\[", basePart.DnsSafeHost, "]"));
				} else {
					text2 = (JSIL.ConcatString.apply(null, [basePart.GetParts((System.UriComponents.Scheme | System.UriComponents.UserInfo), uriFormat), "[", basePart.DnsSafeHost, "]", basePart.GetParts((System.UriComponents.KeepDelimiter | System.UriComponents.Port), uriFormat)]));
				}
			} else if (basePart.IsImplicitFile) {
				if (basePart.IsDosPath) {
					array = System.Uri.Compress(array, 3, /* ref */ j, basePart.Syntax);
					return (JSIL.New(System.String, "_ctor$0", [array, 1, (j.value - 1)]) + text3);
				}
				text2 = (("\\\\" + basePart.GetParts(System.UriComponents.Host, System.UriFormat.Unescaped)));
			} else {
				text2 = basePart.GetParts((System.UriComponents.Host | System.UriComponents.Port | System.UriComponents.Scheme | System.UriComponents.SchemeAndServer | System.UriComponents.UserInfo), uriFormat);
			}
			array = System.Uri.Compress(array, basePart.SecuredPathIndex, /* ref */ j, basePart.Syntax);
			return (text2 + JSIL.New(System.String, "_ctor$0", [array, 0, j.value]) + text3);
		}
		if (!((relativePart.length < 2) || ((relativePart[1]) !== "/"))) {
			return JSIL.ConcatString(basePart.Scheme, ":", relativePart);
		}
		if (basePart.HostType === System.Uri.Flags.IPv6HostType) {
			text2 = (JSIL.ConcatString.apply(null, [basePart.GetParts((System.UriComponents.Scheme | System.UriComponents.UserInfo), uriFormat), "[", basePart.DnsSafeHost, "]", basePart.GetParts((System.UriComponents.KeepDelimiter | System.UriComponents.Port), uriFormat)]));
		} else {
			text2 = basePart.GetParts((System.UriComponents.Host | System.UriComponents.Port | System.UriComponents.Scheme | System.UriComponents.SchemeAndServer | System.UriComponents.UserInfo), uriFormat);
		}
		if (!(!flag || (c !== "\\"))) {
			relativePart = (JSIL.ConcatString("/", relativePart.Substring$0(1)));
		}
		return (text2 + relativePart);
	}
};
System.Uri.PathDifference = function (path1, path2, compareCase) {
	var num = -1;
__loop0__: 
	for (var i = 0; !(!((i < path1.length) && 
				(i < path2.length)) || (((path1[i]) !== (path2[i])) && 
				(compareCase || 
					(System.Char.ToLower$0(path1[i], System.Globalization.CultureInfo.InvariantCulture) !== System.Char.ToLower$0(path2[i], System.Globalization.CultureInfo.InvariantCulture))))); ++i) {
		if ((path1[i]) === "/") {
			num = i;
		}
	}
	if (i === 0) {
		return path2;
	}
	if (!((i !== path1.length) || (i !== path2.length))) {
		return System.String.Empty;
	}
	var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$0", []);
__loop1__: 
	while (i < path1.length) {
		if ((path1[i]) === "/") {
			stringBuilder.Append$2("../");
		}
		++i;
	}
	if (!((stringBuilder.Length !== 0) || ((path2.length - 1) !== num))) {
		return "./";
	}
	return (stringBuilder.toString() + path2.Substring$0((num + 1)));
};
System.Uri.prototype.get_HasAuthority = function () {
	return this.InFact(System.Uri.Flags.AuthorityFound);
};
System.Uri.IsLWS = function (ch) {
	return ((ch <= " ") && ((ch === " ") || 
			(ch === "\n") || 
			(ch === "\r") || 
			(ch === "\t")));
};
System.Uri.IsAsciiLetter = function (character) {
	return (((character >= "a") && 
			(character <= "z")) || ((character >= "A") && 
			(character <= "Z")));
};
System.Uri.IsAsciiLetterOrDigit = function (character) {
	return (System.Uri.IsAsciiLetter(character) || ((character >= "0") && 
			(character <= "9")));
};
System.Uri.IsBidiControlCharacter = function (ch) {
	return ((ch === "\u200e") || 
		(ch === "\u200f") || 
		(ch === "\u202a") || 
		(ch === "\u202b") || 
		(ch === "\u202c") || 
		(ch === "\u202d") || (ch === "\u202e"));
};
System.Uri.prototype.CreateThis = function (uri, dontEscape, uriKind) {
	var uriFormatException = new JSIL.Variable(null);
	if (!((uriKind >= System.UriKind.RelativeOrAbsolute) && (uriKind <= System.UriKind.Relative))) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm04.System.SR.GetString$0("net_uri_InvalidUriKind", [uriKind])]);
	}
	this.m_String = (uri === null) ? System.String.Empty : uri;
	if (dontEscape) {
		this.m_Flags = (this.m_Flags | System.Uri.Flags.UserEscaped);
	}
	var err = System.Uri.ParseScheme(this.m_String, /* ref */ new JSIL.MemberReference(this, "m_Flags"), /* ref */ new JSIL.MemberReference(this, "m_Syntax"));
	this.m_iriParsing = false;
	this.InitializeUri(err, uriKind, /* ref */ uriFormatException);
	if (uriFormatException.value !== null) {
		throw uriFormatException.value;
	}
};
System.Uri.prototype.InitializeUri = function (err, uriKind, /* ref */ e) {
	if (!JSIL.Cast(err, System.Boolean)) {
		if (this.IsImplicitFile) {
			if (!(!this.NotAny(System.Uri.Flags.DosPath) || 
					(uriKind === System.UriKind.Absolute) || ((uriKind !== System.UriKind.Relative) && 
						((this.m_String.length < 2) || 
							(((this.m_String[0]) === "\\") && 
								((this.m_String[1]) === "\\")))))) {
				this.m_Syntax = null;
				this.m_Flags = (this.m_Flags & System.Uri.Flags.UserEscaped);
				e.value = null;
				return;
			}
			if (!((uriKind !== System.UriKind.Relative) || !this.InFact(System.Uri.Flags.DosPath))) {
				this.m_Syntax = null;
				this.m_Flags = (this.m_Flags & System.Uri.Flags.UserEscaped);
				e.value = null;
				return;
			}
		}
	} else if (err > System.UriExceptionHelper.ParsingError.LastRelativeUriOkErrIndex) {
		this.m_String = null;
		e.value = $asm04.System.UriExceptionHelper.GetException(err);
		return;
	}
	if (this.m_Syntax !== null) {
		if (this.m_Syntax.IsSimple) {
			if (err = JSIL.Cast(this.PrivateParseMinimal(), System.Boolean)) {
				if (!((uriKind === System.UriKind.Absolute) || (err > System.UriExceptionHelper.ParsingError.LastRelativeUriOkErrIndex))) {
					this.m_Syntax = null;
					e.value = null;
					this.m_Flags = (this.m_Flags & System.Uri.Flags.UserEscaped);
					return;
				}
				e.value = $asm04.System.UriExceptionHelper.GetException(err);
				return;
			} else {
				if (uriKind === System.UriKind.Relative) {
					e.value = $asm04.System.UriExceptionHelper.GetException(System.UriExceptionHelper.ParsingError.CannotCreateRelative);
					return;
				}
				e.value = null;
				return;
			}
		} else {
			this.m_Syntax = this.m_Syntax.InternalOnNewUri();
			this.m_Flags = (this.m_Flags | System.Uri.Flags.UserDrivenParsing);
			this.m_Syntax.InternalValidate(this, /* ref */ e);
			if (e.value !== null) {
				if (!((uriKind === System.UriKind.Absolute) || 
						!JSIL.Cast(err, System.Boolean) || (err > System.UriExceptionHelper.ParsingError.LastRelativeUriOkErrIndex))) {
					this.m_Syntax = null;
					e.value = null;
					this.m_Flags = (this.m_Flags & System.Uri.Flags.UserEscaped);
					return;
				}
			} else {
				if (!(!JSIL.Cast(err, System.Boolean) && !this.InFact(System.Uri.Flags.ErrorOrParsingRecursion))) {
					this.SetUserDrivenParsing();
					return;
				}
				if (uriKind === System.UriKind.Relative) {
					e.value = $asm04.System.UriExceptionHelper.GetException(System.UriExceptionHelper.ParsingError.CannotCreateRelative);
					return;
				}
			}
		}
	} else {
		if (!(!JSIL.Cast(err, System.Boolean) || 
				(uriKind === System.UriKind.Absolute) || (err > System.UriExceptionHelper.ParsingError.LastRelativeUriOkErrIndex))) {
			e.value = null;
			this.m_Flags = (this.m_Flags & (System.Uri.Flags.HasUnicode | System.Uri.Flags.UserEscaped));
			return;
		}
		this.m_String = null;
		e.value = $asm04.System.UriExceptionHelper.GetException(err);
	}
};
System.Uri.TryCreate$0 = function (uriString, uriKind, /* ref */ result) {
	if (uriString === null) {
		result.value = null;
		return false;
	}
	var uriFormatException = new JSIL.Variable(null);
	result.value = System.Uri.CreateHelper(uriString, false, uriKind, /* ref */ uriFormatException);
	return ((uriFormatException.value === null) && System.Uri.op_Inequality(result.value, null));
};
System.Uri.TryCreate$1 = function (baseUri, relativeUri, /* ref */ result) {
	var uri = new JSIL.Variable(null);
	if (!System.Uri.TryCreate$0(relativeUri, System.UriKind.RelativeOrAbsolute, /* ref */ uri)) {
		result.value = null;
		return false;
	}
	if (!uri.value.IsAbsoluteUri) {
		return System.Uri.TryCreate$2(baseUri, uri.value, /* ref */ result);
	}
	result.value = uri.value;
	return true;
};
System.Uri.TryCreate$2 = function (baseUri, relativeUri, /* ref */ result) {
	var uriFormatException = new JSIL.Variable(null);
	result.value = null;
	if (!((baseUri !== null) && relativeUri)) {
		return false;
	}
	if (baseUri.IsNotAbsoluteUri) {
		return false;
	}
	var uriString = new JSIL.Variable(null);
	if (baseUri.Syntax.IsSimple) {
		var dontEscape = new JSIL.Variable(relativeUri.UserEscaped);
		result.value = System.Uri.ResolveHelper(
			baseUri, 
			relativeUri, 
			/* ref */ uriString, 
			/* ref */ dontEscape, 
			/* ref */ uriFormatException
		);
	} else {
		dontEscape.value = false;
		uriString.value = baseUri.Syntax.InternalResolve(baseUri, relativeUri, /* ref */ uriFormatException);
	}
	if (uriFormatException.value !== null) {
		return false;
	}
	if (result.value === null) {
		result.value = System.Uri.CreateHelper(uriString.value, dontEscape.value, System.UriKind.Absolute, /* ref */ uriFormatException);
	}
	return (!(uriFormatException.value || 
			!System.Uri.op_Inequality(result.value, null)) && result.value.IsAbsoluteUri);
};
System.Uri.prototype.GetComponents = function (components, format) {
	if (!(!(components & System.UriComponents.SerializationInfoString) || (components === System.UriComponents.SerializationInfoString))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["UriComponents.SerializationInfoString"]);
	}
	if (format & -4) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["format"]);
	}
	if (this.IsNotAbsoluteUri) {
		if (components === System.UriComponents.SerializationInfoString) {
			return this.GetRelativeSerializationString(format);
		}
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm04.System.SR.GetString$2("net_uri_NotAbsolute")]);
	} else {
		if (this.Syntax.IsSimple) {
			return this.GetComponentsHelper(components, format);
		}
		return this.Syntax.InternalGetComponents(this, components, format);
	}
};
System.Uri.Compare = function (uri1, uri2, partsToCompare, compareFormat, comparisonType) {
	if (uri1 === null) {
		if (System.Uri.op_Equality(uri2, null)) {
			return 0;
		}
		return -1;
	} else {
		if (uri2 === null) {
			return 1;
		}
		if (uri1.IsAbsoluteUri && uri2.IsAbsoluteUri) {
			return System.String.Compare$1(uri1.GetParts(partsToCompare, compareFormat), uri2.GetParts(partsToCompare, compareFormat), comparisonType);
		}
		if (uri1.IsAbsoluteUri) {
			return 1;
		}
		if (!uri2.IsAbsoluteUri) {
			return System.String.Compare$1(uri1.OriginalString, uri2.OriginalString, comparisonType);
		}
		return -1;
	}
};
System.Uri.prototype.IsBaseOf = function (uri) {
	if (uri === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["uri"]);
	}
	if (!this.IsAbsoluteUri) {
		return false;
	}
	if (this.Syntax.IsSimple) {
		return this.IsBaseOfHelper(uri);
	}
	return this.Syntax.InternalIsBaseOf(this, uri);
};
System.Uri.prototype.IsBaseOfHelper = JSIL.UntranslatableFunction("System.Boolean System.Uri::IsBaseOfHelper(System.Uri)");
System.Uri.prototype.IsWellFormedOriginalString = function () {
	if (!(!this.IsNotAbsoluteUri && !this.Syntax.IsSimple)) {
		return this.InternalIsWellFormedOriginalString();
	}
	return this.Syntax.InternalIsWellFormedOriginalString(this);
};
System.Uri.IsWellFormedUriString = function (uriString, uriKind) {
	var uri = new JSIL.Variable(null);
	return (System.Uri.TryCreate$0(uriString, uriKind, /* ref */ uri) && uri.value.IsWellFormedOriginalString());
};
System.Uri.prototype.InternalIsWellFormedOriginalString = JSIL.UntranslatableFunction("System.Boolean System.Uri::InternalIsWellFormedOriginalString()");
System.Uri.EscapeUriString = function (stringToEscape) {
	if (stringToEscape === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["stringToUnescape"]);
	}
	if (stringToEscape.length === 0) {
		return System.String.Empty;
	}
	var length = new JSIL.Variable(0);
	var array = $asm04.System.UriHelper.EscapeString(
		stringToEscape, 
		0, 
		stringToEscape.length, 
		null, 
		/* ref */ length, 
		true, 
		"\uffff", 
		"\uffff", 
		"\uffff"
	);
	if (array === null) {
		return stringToEscape;
	}
	return JSIL.New(System.String, "_ctor$0", [array, 0, length.value]);
};
System.Uri.EscapeDataString = function (stringToEscape) {
	if (stringToEscape === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["stringToUnescape"]);
	}
	if (stringToEscape.length === 0) {
		return System.String.Empty;
	}
	var length = new JSIL.Variable(0);
	var array = $asm04.System.UriHelper.EscapeString(
		stringToEscape, 
		0, 
		stringToEscape.length, 
		null, 
		/* ref */ length, 
		false, 
		"\uffff", 
		"\uffff", 
		"\uffff"
	);
	if (array === null) {
		return stringToEscape;
	}
	return JSIL.New(System.String, "_ctor$0", [array, 0, length.value]);
};
System.Uri.UnescapeDataString = JSIL.UntranslatableFunction("System.String System.Uri::UnescapeDataString(System.String)");
System.Uri.prototype._ctor$4 = function (flags, uriParser, uri) {
	System.Object.prototype._ctor.call(this);
	this.m_Flags = flags;
	this.m_Syntax = uriParser;
	this.m_String = uri;
};
System.Uri.CreateHelper = function (uriString, dontEscape, uriKind, /* ref */ e) {
	if (!((uriKind >= System.UriKind.RelativeOrAbsolute) && (uriKind <= System.UriKind.Relative))) {
		throw JSIL.New(System.ArgumentException, "_ctor$1", [$asm04.System.SR.GetString$0("net_uri_InvalidUriKind", [uriKind])]);
	}
	var uriParser = new JSIL.Variable(null);
	var flags = new JSIL.Variable(System.Uri.Flags.Zero);
	var parsingError = System.Uri.ParseScheme(uriString, /* ref */ flags, /* ref */ uriParser);
	if (dontEscape) {
		flags.value = (flags.value | System.Uri.Flags.UserEscaped);
	}
	if (!JSIL.Cast(parsingError, System.Boolean)) {
		var uri = JSIL.New(System.Uri, "_ctor$4", [flags.value, uriParser.value, uriString]);
		try {
			uri.InitializeUri(parsingError, uriKind, /* ref */ e);
			if (e.value === null) {
				var result = uri;
			} else {
				result = null;
			}
		} catch ($exception) {
			if (JSIL.CheckType($exception, System.UriFormatException)) {
				e.value = $exception;
				result = null;
			} else {
				throw $exception;
			}
		}
		return result;
	}
	if (!((uriKind === System.UriKind.Absolute) || (parsingError > System.UriExceptionHelper.ParsingError.LastRelativeUriOkErrIndex))) {
		return JSIL.New(System.Uri, "_ctor$4", [(flags.value & System.Uri.Flags.UserEscaped), null, uriString]);
	}
	return null;
};
System.Uri.ResolveHelper = function (baseUri, relativeUri, /* ref */ newUriString, /* ref */ userEscaped, /* ref */ e) {
	e.value = null;
	var text = System.String.Empty;
	if (relativeUri !== null) {
		if (relativeUri.IsAbsoluteUri) {
			return relativeUri;
		}
		text = relativeUri.OriginalString;
		userEscaped.value = relativeUri.UserEscaped;
	} else {
		text = System.String.Empty;
	}
	if (!((text.length <= 0) || (!System.Uri.IsLWS(text[0]) && 
				!System.Uri.IsLWS(text[(text.length - 1)])))) {
		text = text.Trim$0(System.Uri._WSchars);
	}
	if (text.length === 0) {
		newUriString.value = baseUri.GetParts((System.UriComponents.AbsoluteUri | System.UriComponents.Fragment | System.UriComponents.Host | System.UriComponents.HttpRequestUrl | System.UriComponents.Path | System.UriComponents.PathAndQuery | System.UriComponents.Port | System.UriComponents.Query | System.UriComponents.Scheme | System.UriComponents.SchemeAndServer | System.UriComponents.UserInfo), baseUri.UserEscaped ? System.UriFormat.UriEscaped : System.UriFormat.SafeUnescaped);
		return null;
	}
	if (!(((text[0]) !== "#") || 
			baseUri.IsImplicitFile || !baseUri.Syntax.InFact(System.UriSyntaxFlags.MayHaveFragment))) {
		newUriString.value = ((baseUri.GetParts((System.UriComponents.Host | System.UriComponents.HttpRequestUrl | System.UriComponents.Path | System.UriComponents.PathAndQuery | System.UriComponents.Port | System.UriComponents.Query | System.UriComponents.Scheme | System.UriComponents.SchemeAndServer | System.UriComponents.UserInfo), System.UriFormat.UriEscaped) + text));
		return null;
	}
	if (!(((text[0]) !== "?") || 
			baseUri.IsImplicitFile || !baseUri.Syntax.InFact(System.UriSyntaxFlags.MayHaveQuery))) {
		newUriString.value = ((baseUri.GetParts((System.UriComponents.Host | System.UriComponents.Path | System.UriComponents.Port | System.UriComponents.Scheme | System.UriComponents.SchemeAndServer | System.UriComponents.UserInfo), System.UriFormat.UriEscaped) + text));
		return null;
	}
	if (!((text.length < 3) || 
			(((text[1]) !== ":") && 
				((text[1]) !== "|")) || 
			!System.Uri.IsAsciiLetter(text[0]) || (((text[2]) !== "\\") && 
				((text[2]) !== "/")))) {
		if (baseUri.IsImplicitFile) {
			newUriString.value = text;
			return null;
		}
		if (baseUri.Syntax.InFact(System.UriSyntaxFlags.AllowDOSPath)) {
			if (baseUri.InFact(System.Uri.Flags.AuthorityFound)) {
				var str = baseUri.Syntax.InFact(System.UriSyntaxFlags.PathIsRooted) ? ":///" : "://";
			} else {
				str = baseUri.Syntax.InFact(System.UriSyntaxFlags.PathIsRooted) ? ":/" : ":";
			}
			newUriString.value = ((baseUri.Scheme + str + text));
			return null;
		}
	}
	var combinedString = System.Uri.GetCombinedString(baseUri, text, userEscaped.value, /* ref */ newUriString);
	if (JSIL.Cast(combinedString, System.Boolean)) {
		e.value = $asm04.System.UriExceptionHelper.GetException(combinedString);
		return null;
	}
	if (newUriString.value === baseUri.m_String) {
		return baseUri;
	}
	return null;
};
System.Uri.prototype.GetRelativeSerializationString = function (format) {
	if (format === System.UriFormat.UriEscaped) {
		if (this.m_String.length === 0) {
			return System.String.Empty;
		}
		var length = new JSIL.Variable(0);
		var array = $asm04.System.UriHelper.EscapeString(
			this.m_String, 
			0, 
			this.m_String.length, 
			null, 
			/* ref */ length, 
			true, 
			"\uffff", 
			"\uffff", 
			"%"
		);
		if (array === null) {
			return this.m_String;
		}
		return JSIL.New(System.String, "_ctor$0", [array, 0, length.value]);
	} else {
		if (format === System.UriFormat.Unescaped) {
			return System.Uri.UnescapeDataString(this.m_String);
		}
		if (format !== System.UriFormat.SafeUnescaped) {
			throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["format"]);
		}
		if (this.m_String.length === 0) {
			return System.String.Empty;
		}
		var array2 = JSIL.Array.New(System.Char, this.m_String.length);
		var length2 = new JSIL.Variable(0);
		array2 = $asm04.System.UriHelper.UnescapeString(
			this.m_String, 
			0, 
			this.m_String.length, 
			array2, 
			/* ref */ length2, 
			"\uffff", 
			"\uffff", 
			"\uffff", 
			($asm04.System.UriHelper.UnescapeMode.Escape | $asm04.System.UriHelper.UnescapeMode.EscapeUnescape | $asm04.System.UriHelper.UnescapeMode.Unescape), 
			null, 
			false, 
			true
		);
		return JSIL.New(System.String, "_ctor$0", [array2, 0, length2.value]);
	}
};
System.Uri.prototype.GetComponentsHelper = function (uriComponents, uriFormat) {
	if (uriComponents === System.UriComponents.Scheme) {
		return this.m_Syntax.SchemeName;
	}
	if (uriComponents & System.UriComponents.SerializationInfoString) {
		uriComponents = (uriComponents | (System.UriComponents.AbsoluteUri | System.UriComponents.Fragment | System.UriComponents.Host | System.UriComponents.HttpRequestUrl | System.UriComponents.Path | System.UriComponents.PathAndQuery | System.UriComponents.Port | System.UriComponents.Query | System.UriComponents.Scheme | System.UriComponents.SchemeAndServer | System.UriComponents.UserInfo));
	}
	this.EnsureParseRemaining();
	if (uriComponents & System.UriComponents.Host) {
		this.EnsureHostString(true);
	}
	if (!((uriComponents !== System.UriComponents.Port) && (uriComponents !== System.UriComponents.StrongPort))) {
		if (!(((this.m_Flags & System.Uri.Flags.NotDefaultPort) === System.Uri.Flags.Zero) && ((uriComponents !== System.UriComponents.StrongPort) || 
					(this.m_Syntax.DefaultPort === -1)))) {
			return (this.m_Info.Offset.PortValue).toString();
		}
		return System.String.Empty;
	} else {
		if (uriComponents & System.UriComponents.StrongPort) {
			uriComponents = (uriComponents | System.UriComponents.Port);
		}
		if (!((uriComponents !== System.UriComponents.Host) || ((uriFormat !== System.UriFormat.UriEscaped) && 
					((this.m_Flags & (System.Uri.Flags.E_HostNotCanonical | System.Uri.Flags.HostNotCanonical)) !== System.Uri.Flags.Zero)))) {
			this.EnsureHostString(false);
			return this.m_Info.Host;
		}
		switch (Number(uriFormat)) {
			case 1: 
				return this.GetEscapedParts(uriComponents);
			case 2: 
			case 3: 
				break;
			default: 
				if (uriFormat !== 32767) {
					throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["uriFormat"]);
				}
				break;
		}
		return this.GetUnescapedParts(uriComponents, uriFormat);
	}
};
System.Uri.prototype.CreateThisFromUri = function (otherUri) {
	this.m_Info = null;
	this.m_Flags = otherUri.m_Flags;
	if (this.InFact(System.Uri.Flags.MinimalUriInfoSet)) {
		this.m_Flags = (this.m_Flags & (System.Uri.Flags.AuthorityFound | System.Uri.Flags.BasicHostType | System.Uri.Flags.CanonicalDnsHost | System.Uri.Flags.DnsHostType | System.Uri.Flags.DosPath | System.Uri.Flags.ErrorOrParsingRecursion | System.Uri.Flags.FragmentIriCanonical | System.Uri.Flags.HasUnicode | System.Uri.Flags.HasUserInfo | System.Uri.Flags.HostTypeMask | System.Uri.Flags.HostUnicodeNormalized | System.Uri.Flags.IdnHost | System.Uri.Flags.ImplicitFile | System.Uri.Flags.IntranetUri | System.Uri.Flags.IPv4HostType | System.Uri.Flags.IPv6HostType | System.Uri.Flags.IriCanonical | System.Uri.Flags.LoopbackHost | System.Uri.Flags.NotDefaultPort | System.Uri.Flags.PathIriCanonical | System.Uri.Flags.QueryIriCanonical | System.Uri.Flags.RestUnicodeNormalized | System.Uri.Flags.UncHostType | System.Uri.Flags.UncPath | System.Uri.Flags.UnicodeHost | System.Uri.Flags.UnknownHostType | System.Uri.Flags.UnusedHostType | System.Uri.Flags.UseOrigUncdStrOffset | System.Uri.Flags.UserDrivenParsing | System.Uri.Flags.UserEscaped | System.Uri.Flags.UserIriCanonical));
		var num = otherUri.m_Info.Offset.Path;
		if (this.InFact(System.Uri.Flags.NotDefaultPort)) {
		__loop0__: 
			for (; ((otherUri.m_String[num]) !== ":") && (num > otherUri.m_Info.Offset.Host); --num) {
			}
			if ((otherUri.m_String[num]) !== ":") {
				num = otherUri.m_Info.Offset.Path;
			}
		}
		this.m_Flags = (this.m_Flags | num);
	}
	this.m_Syntax = otherUri.m_Syntax;
	this.m_String = otherUri.m_String;
	this.m_iriParsing = otherUri.m_iriParsing;
	if (otherUri.OriginalStringSwitched) {
		this.m_originalUnicodeString = otherUri.m_originalUnicodeString;
	}
	if (!(!otherUri.AllowIdn || (!otherUri.InFact(System.Uri.Flags.IdnHost) && 
				!otherUri.InFact(System.Uri.Flags.UnicodeHost)))) {
		this.m_DnsSafeHost = otherUri.m_DnsSafeHost;
	}
};
JSIL.OverloadedMethod(System.Uri.prototype, "_ctor", [
		["_ctor$0", [System.String]], 
		["_ctor$1", [System.String, System.UriKind]], 
		["_ctor$2", [System.Uri, System.String]], 
		["_ctor$3", [System.Uri, System.Uri]], 
		["_ctor$4", [System.Uri.Flags, System.UriParser, System.String]]
	]);
JSIL.OverloadedMethod(System.Uri, "TryCreate", [
		["TryCreate$0", [System.String, System.UriKind, JSIL.Reference.Of(System.Uri)]], 
		["TryCreate$1", [System.Uri, System.String, JSIL.Reference.Of(System.Uri)]], 
		["TryCreate$2", [System.Uri, System.Uri, JSIL.Reference.Of(System.Uri)]]
	]);
JSIL.MakeProperty(System.Uri.prototype, "IsImplicitFile", 
	System.Uri.prototype.get_IsImplicitFile, null);
JSIL.MakeProperty(System.Uri.prototype, "IsUncOrDosPath", 
	System.Uri.prototype.get_IsUncOrDosPath, null);
JSIL.MakeProperty(System.Uri.prototype, "IsDosPath", 
	System.Uri.prototype.get_IsDosPath, null);
JSIL.MakeProperty(System.Uri.prototype, "IsUncPath", 
	System.Uri.prototype.get_IsUncPath, null);
JSIL.MakeProperty(System.Uri.prototype, "HostType", 
	System.Uri.prototype.get_HostType, null);
JSIL.MakeProperty(System.Uri.prototype, "Syntax", 
	System.Uri.prototype.get_Syntax, null);
JSIL.MakeProperty(System.Uri.prototype, "IsNotAbsoluteUri", 
	System.Uri.prototype.get_IsNotAbsoluteUri, null);
JSIL.MakeProperty(System.Uri.prototype, "AllowIdn", 
	System.Uri.prototype.get_AllowIdn, null);
JSIL.MakeProperty(System.Uri.prototype, "UserDrivenParsing", 
	System.Uri.prototype.get_UserDrivenParsing, null);
JSIL.MakeProperty(System.Uri.prototype, "SecuredPathIndex", 
	System.Uri.prototype.get_SecuredPathIndex, null);
JSIL.MakeProperty(System.Uri.prototype, "AbsolutePath", 
	System.Uri.prototype.get_AbsolutePath, null);
JSIL.MakeProperty(System.Uri.prototype, "PrivateAbsolutePath", 
	System.Uri.prototype.get_PrivateAbsolutePath, null);
JSIL.MakeProperty(System.Uri.prototype, "AbsoluteUri", 
	System.Uri.prototype.get_AbsoluteUri, null);
JSIL.MakeProperty(System.Uri.prototype, "LocalPath", 
	System.Uri.prototype.get_LocalPath, null);
JSIL.MakeProperty(System.Uri.prototype, "IsUnc", 
	System.Uri.prototype.get_IsUnc, null);
JSIL.MakeProperty(System.Uri.prototype, "UserEscaped", 
	System.Uri.prototype.get_UserEscaped, null);
JSIL.MakeProperty(System.Uri.prototype, "Host", 
	System.Uri.prototype.get_Host, null);
JSIL.MakeProperty(System.Uri.prototype, "Port", 
	System.Uri.prototype.get_Port, null);
JSIL.MakeProperty(System.Uri.prototype, "Query", 
	System.Uri.prototype.get_Query, null);
JSIL.MakeProperty(System.Uri.prototype, "Fragment", 
	System.Uri.prototype.get_Fragment, null);
JSIL.MakeProperty(System.Uri.prototype, "Scheme", 
	System.Uri.prototype.get_Scheme, null);
JSIL.MakeProperty(System.Uri.prototype, "OriginalStringSwitched", 
	System.Uri.prototype.get_OriginalStringSwitched, null);
JSIL.MakeProperty(System.Uri.prototype, "OriginalString", 
	System.Uri.prototype.get_OriginalString, null);
JSIL.MakeProperty(System.Uri.prototype, "DnsSafeHost", 
	System.Uri.prototype.get_DnsSafeHost, null);
JSIL.MakeProperty(System.Uri.prototype, "IsAbsoluteUri", 
	System.Uri.prototype.get_IsAbsoluteUri, null);
JSIL.MakeProperty(System.Uri.prototype, "UserInfo", 
	System.Uri.prototype.get_UserInfo, null);
JSIL.MakeProperty(System.Uri.prototype, "HasAuthority", 
	System.Uri.prototype.get_HasAuthority, null);
Object.defineProperty(System.Uri, "c_Max16BitUtf8SequenceLength", {
		"value": 12}
);
Object.defineProperty(System.Uri, "c_MaxUriSchemeName", {
		"value": 1024}
);
Object.defineProperty(System.Uri, "V1ToStringUnescape", {
		"value": 32767}
);
System.Uri.UriSchemeFile = null;
System.Uri.UriSchemeFtp = null;
System.Uri.UriSchemeGopher = null;
System.Uri.UriSchemeHttp = null;
System.Uri.UriSchemeHttps = null;
System.Uri.UriSchemeMailto = null;
System.Uri.UriSchemeNews = null;
System.Uri.UriSchemeNntp = null;
System.Uri.UriSchemeNetTcp = null;
System.Uri.UriSchemeNetPipe = null;
System.Uri.SchemeDelimiter = null;
System.Uri.prototype.m_String = null;
System.Uri.prototype.m_originalUnicodeString = null;
System.Uri.prototype.m_Syntax = null;
System.Uri.prototype.m_DnsSafeHost = null;
System.Uri.prototype.m_Flags = 0;
System.Uri.prototype.m_Info = null;
System.Uri.prototype.m_iriParsing = false;
System.Uri.s_IdnScope = 0;
System.Uri.HexLowerChars = null;
System.Uri._WSchars = null;
System.Uri._cctor = function () {
	System.Uri.UriSchemeFile = System.UriParser.FileUri.SchemeName;
	System.Uri.UriSchemeFtp = System.UriParser.FtpUri.SchemeName;
	System.Uri.UriSchemeGopher = System.UriParser.GopherUri.SchemeName;
	System.Uri.UriSchemeHttp = System.UriParser.HttpUri.SchemeName;
	System.Uri.UriSchemeHttps = System.UriParser.HttpsUri.SchemeName;
	System.Uri.UriSchemeMailto = System.UriParser.MailToUri.SchemeName;
	System.Uri.UriSchemeNews = System.UriParser.NewsUri.SchemeName;
	System.Uri.UriSchemeNntp = System.UriParser.NntpUri.SchemeName;
	System.Uri.UriSchemeNetTcp = System.UriParser.NetTcpUri.SchemeName;
	System.Uri.UriSchemeNetPipe = System.UriParser.NetPipeUri.SchemeName;
	System.Uri.SchemeDelimiter = "://";
	System.Uri.s_IdnScope = System.UriIdnScope.AllExceptIntranet;
	System.Uri.HexLowerChars = JSIL.Array.New(System.Char, ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "a", "b", "c", "d", "e", "f"]);
	System.Uri._WSchars = JSIL.Array.New(System.Char, [" ", "\n", "\r", "\t"]);
};

$asm04.System.Uri.UriInfo.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm04.System.Uri.UriInfo.prototype.Host = null;
$asm04.System.Uri.UriInfo.prototype.ScopeId = null;
$asm04.System.Uri.UriInfo.prototype.String = null;
$asm04.System.Uri.UriInfo.prototype.DnsSafeHost = null;
$asm04.System.Uri.UriInfo.prototype.MoreInfo = null;

$asm04.System.Uri.Offset.prototype.Scheme = 0;
$asm04.System.Uri.Offset.prototype.User = 0;
$asm04.System.Uri.Offset.prototype.Host = 0;
$asm04.System.Uri.Offset.prototype.PortValue = 0;
$asm04.System.Uri.Offset.prototype.Path = 0;
$asm04.System.Uri.Offset.prototype.Query = 0;
$asm04.System.Uri.Offset.prototype.Fragment = 0;
$asm04.System.Uri.Offset.prototype.End = 0;

$asm04.System.Uri.MoreInfo.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm04.System.Uri.MoreInfo.prototype.Path = null;
$asm04.System.Uri.MoreInfo.prototype.Query = null;
$asm04.System.Uri.MoreInfo.prototype.Fragment = null;
$asm04.System.Uri.MoreInfo.prototype.AbsoluteUri = null;
$asm04.System.Uri.MoreInfo.prototype.Hash = 0;
$asm04.System.Uri.MoreInfo.prototype.RemoteUrl = null;

System.UriBuilder.prototype._ctor$0 = function () {
	this.m_changed = true;
	this.m_fragment = System.String.Empty;
	this.m_host = "localhost";
	this.m_password = System.String.Empty;
	this.m_path = "/";
	this.m_port = -1;
	this.m_query = System.String.Empty;
	this.m_scheme = "http";
	this.m_schemeDelimiter = System.Uri.SchemeDelimiter;
	this.m_username = System.String.Empty;
	System.Object.prototype._ctor.call(this);
};
System.UriBuilder.prototype._ctor$1 = function (uri) {
	this.m_changed = true;
	this.m_fragment = System.String.Empty;
	this.m_host = "localhost";
	this.m_password = System.String.Empty;
	this.m_path = "/";
	this.m_port = -1;
	this.m_query = System.String.Empty;
	this.m_scheme = "http";
	this.m_schemeDelimiter = System.Uri.SchemeDelimiter;
	this.m_username = System.String.Empty;
	System.Object.prototype._ctor.call(this);
	var uri2 = JSIL.New(System.Uri, "_ctor$1", [uri, System.UriKind.RelativeOrAbsolute]);
	if (uri2.IsAbsoluteUri) {
		this.Init(uri2);
		return;
	}
	uri = ((System.Uri.UriSchemeHttp + System.Uri.SchemeDelimiter + uri));
	this.Init(JSIL.New(System.Uri, "_ctor$0", [uri]));
};
System.UriBuilder.prototype._ctor$2 = function (uri) {
	this.m_changed = true;
	this.m_fragment = System.String.Empty;
	this.m_host = "localhost";
	this.m_password = System.String.Empty;
	this.m_path = "/";
	this.m_port = -1;
	this.m_query = System.String.Empty;
	this.m_scheme = "http";
	this.m_schemeDelimiter = System.Uri.SchemeDelimiter;
	this.m_username = System.String.Empty;
	System.Object.prototype._ctor.call(this);
	if (uri === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["uri"]);
	}
	this.Init(uri);
};
System.UriBuilder.prototype.Init = function (uri) {
	this.m_fragment = uri.Fragment;
	this.m_query = uri.Query;
	this.m_host = uri.Host;
	this.m_path = uri.AbsolutePath;
	this.m_port = uri.Port;
	this.m_scheme = uri.Scheme;
	this.m_schemeDelimiter = uri.HasAuthority ? System.Uri.SchemeDelimiter : ":";
	var userInfo = uri.UserInfo;
	if (!((userInfo === null) || (userInfo.length === 0))) {
		var num = userInfo.IndexOf$0(":");
		if (num !== -1) {
			this.m_password = userInfo.Substring$0((num + 1));
			this.m_username = userInfo.Substring$1(0, num);
		} else {
			this.m_username = userInfo;
		}
	}
	this.SetFieldsFromUri(uri);
};
System.UriBuilder.prototype._ctor$3 = function (schemeName, hostName) {
	this.m_changed = true;
	this.m_fragment = System.String.Empty;
	this.m_host = "localhost";
	this.m_password = System.String.Empty;
	this.m_path = "/";
	this.m_port = -1;
	this.m_query = System.String.Empty;
	this.m_scheme = "http";
	this.m_schemeDelimiter = System.Uri.SchemeDelimiter;
	this.m_username = System.String.Empty;
	System.Object.prototype._ctor.call(this);
	this.Scheme = schemeName;
	this.Host = hostName;
};
System.UriBuilder.prototype._ctor$4 = function (scheme, host, portNumber) {
	this._ctor$3(scheme, host);
	this.Port = portNumber;
};
System.UriBuilder.prototype._ctor$5 = function (scheme, host, port, pathValue) {
	this._ctor$4(scheme, host, port);
	this.Path = pathValue;
};
System.UriBuilder.prototype._ctor$6 = function (scheme, host, port, path, extraValue) {
	this._ctor$5(scheme, host, port, path);
	try {
		this.Extra = extraValue;
	} catch ($exception) {
		var exception = $exception;
		if (!((JSIL.TryCast(exception, System.StackOverflowException) === null) && (JSIL.TryCast(exception, System.OutOfMemoryException) === null))) {
			throw $exception;
		}
		throw JSIL.New(System.ArgumentException, "_ctor$1", ["extraValue"]);
	}
};
System.UriBuilder.prototype.set_Extra = function (value) {
	if (value === null) {
		value = System.String.Empty;
	}
	if (value.length <= 0) {
		this.Fragment = System.String.Empty;
		this.Query = System.String.Empty;
		return;
	}
	if ((value[0]) === "#") {
		this.Fragment = value.Substring$0(1);
		return;
	}
	if ((value[0]) === "?") {
		var num = value.IndexOf$0("#");
		if (num === -1) {
			num = value.length;
		} else {
			this.Fragment = value.Substring$0((num + 1));
		}
		this.Query = value.Substring$1(1, (num - 1));
		return;
	}
	throw JSIL.New(System.ArgumentException, "_ctor$1", ["value"]);
};
System.UriBuilder.prototype.get_Fragment = function () {
	return this.m_fragment;
};
System.UriBuilder.prototype.set_Fragment = function (value) {
	if (value === null) {
		value = System.String.Empty;
	}
	if (value.length > 0) {
		value = (JSIL.ConcatString("#", value));
	}
	this.m_fragment = value;
	this.m_changed = true;
};
System.UriBuilder.prototype.get_Host = function () {
	return this.m_host;
};
System.UriBuilder.prototype.set_Host = function (value) {
	if (value === null) {
		value = System.String.Empty;
	}
	this.m_host = value;
	if (!((this.m_host.IndexOf$0(":") < 0) || ((this.m_host[0]) === "["))) {
		this.m_host = (("[" + this.m_host + "]"));
	}
	this.m_changed = true;
};
System.UriBuilder.prototype.get_Password = function () {
	return this.m_password;
};
System.UriBuilder.prototype.set_Password = function (value) {
	if (value === null) {
		value = System.String.Empty;
	}
	this.m_password = value;
};
System.UriBuilder.prototype.get_Path = function () {
	return this.m_path;
};
System.UriBuilder.prototype.set_Path = function (value) {
	if (!((value !== null) && (value.length !== 0))) {
		value = "/";
	}
	this.m_path = System.Uri.InternalEscapeString(this.ConvertSlashes(value));
	this.m_changed = true;
};
System.UriBuilder.prototype.get_Port = function () {
	return this.m_port;
};
System.UriBuilder.prototype.set_Port = function (value) {
	if (!((value >= -1) && (value <= 65535))) {
		throw JSIL.New(System.ArgumentOutOfRangeException, "_ctor$1", ["value"]);
	}
	this.m_port = value;
	this.m_changed = true;
};
System.UriBuilder.prototype.get_Query = function () {
	return this.m_query;
};
System.UriBuilder.prototype.set_Query = function (value) {
	if (value === null) {
		value = System.String.Empty;
	}
	if (value.length > 0) {
		value = (JSIL.ConcatString("?", value));
	}
	this.m_query = value;
	this.m_changed = true;
};
System.UriBuilder.prototype.get_Scheme = function () {
	return this.m_scheme;
};
System.UriBuilder.prototype.set_Scheme = function (value) {
	if (value === null) {
		value = System.String.Empty;
	}
	var num = value.IndexOf$0(":");
	if (num !== -1) {
		value = value.Substring$1(0, num);
	}
	if (value.length !== 0) {
		if (!System.Uri.CheckSchemeName(value)) {
			throw JSIL.New(System.ArgumentException, "_ctor$1", ["value"]);
		}
		value = value.ToLower$1(System.Globalization.CultureInfo.InvariantCulture);
	}
	this.m_scheme = value;
	this.m_changed = true;
};
System.UriBuilder.prototype.get_Uri = function () {
	if (this.m_changed) {
		this.m_uri = JSIL.New(System.Uri, "_ctor$0", [this.toString()]);
		this.SetFieldsFromUri(this.m_uri);
		this.m_changed = false;
	}
	return this.m_uri;
};
System.UriBuilder.prototype.get_UserName = function () {
	return this.m_username;
};
System.UriBuilder.prototype.set_UserName = function (value) {
	if (value === null) {
		value = System.String.Empty;
	}
	this.m_username = value;
};
System.UriBuilder.prototype.ConvertSlashes = function (path) {
	var stringBuilder = JSIL.New(System.Text.StringBuilder, "_ctor$1", [path.length]);
__loop0__: 
	for (var i = 0; i < path.length; ++i) {
		var c = (path[i]);
		if (c === "\\") {
			c = "/";
		}
		stringBuilder.Append$7(c);
	}
	return stringBuilder.toString();
};
System.UriBuilder.prototype.Equals = function (rparam) {
	return (rparam && this.Uri.Equals(rparam.toString()));
};
System.UriBuilder.prototype.GetHashCode = function () {
	return this.Uri.GetHashCode();
};
System.UriBuilder.prototype.SetFieldsFromUri = function (uri) {
	this.m_fragment = uri.Fragment;
	this.m_query = uri.Query;
	this.m_host = uri.Host;
	this.m_path = uri.AbsolutePath;
	this.m_port = uri.Port;
	this.m_scheme = uri.Scheme;
	this.m_schemeDelimiter = uri.HasAuthority ? System.Uri.SchemeDelimiter : ":";
	var userInfo = uri.UserInfo;
	if (userInfo.length > 0) {
		var num = userInfo.IndexOf$0(":");
		if (num !== -1) {
			this.m_password = userInfo.Substring$0((num + 1));
			this.m_username = userInfo.Substring$1(0, num);
			return;
		}
		this.m_username = userInfo;
	}
};
System.UriBuilder.prototype.toString = function () {
	if (!((this.m_username.length !== 0) || (this.m_password.length <= 0))) {
		throw JSIL.New(System.UriFormatException, "_ctor$1", [$asm04.System.SR.GetString$2("net_uri_BadUserPassword")]);
	}
	if (this.m_scheme.length !== 0) {
		var syntax = System.UriParser.GetSyntax(this.m_scheme);
		if (syntax !== null) {
			this.m_schemeDelimiter = (syntax.InFact(System.UriSyntaxFlags.MustHaveAuthority) || 
				((this.m_host.length !== 0) && 
					syntax.NotAny(System.UriSyntaxFlags.MailToLikeUri) && 
					syntax.InFact(System.UriSyntaxFlags.OptionalAuthority))) ? System.Uri.SchemeDelimiter : ":";
		} else {
			this.m_schemeDelimiter = (this.m_host.length !== 0) ? System.Uri.SchemeDelimiter : ":";
		}
	}
	var text = (this.m_scheme.length !== 0) ? (this.m_scheme + this.m_schemeDelimiter) : System.String.Empty;
	return JSIL.ConcatString.apply(null, JSIL.Array.New(System.String, [text, this.m_username, (this.m_password.length > 0) ? (":" + this.m_password) : System.String.Empty, (this.m_username.length > 0) ? "@" : System.String.Empty, this.m_host, ((this.m_port !== -1) && (this.m_host.length > 0)) ? JSIL.ConcatString(":", this.m_port) : System.String.Empty, ((this.m_host.length > 0) && 
			(this.m_path.length !== 0) && ((this.m_path[0]) !== "/")) ? "/" : System.String.Empty, this.m_path, this.m_query, this.m_fragment]));
};
JSIL.OverloadedMethod(System.UriBuilder.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.String]], 
		["_ctor$2", [System.Uri]], 
		["_ctor$3", [System.String, System.String]], 
		["_ctor$4", [System.String, System.String, System.Int32]], 
		["_ctor$5", [System.String, System.String, System.Int32, System.String]], 
		["_ctor$6", [System.String, System.String, System.Int32, System.String, System.String]]
	]);
JSIL.MakeProperty(System.UriBuilder.prototype, "Extra", 
	null, System.UriBuilder.prototype.set_Extra);
JSIL.MakeProperty(System.UriBuilder.prototype, "Fragment", 
	System.UriBuilder.prototype.get_Fragment, System.UriBuilder.prototype.set_Fragment);
JSIL.MakeProperty(System.UriBuilder.prototype, "Host", 
	System.UriBuilder.prototype.get_Host, System.UriBuilder.prototype.set_Host);
JSIL.MakeProperty(System.UriBuilder.prototype, "Password", 
	System.UriBuilder.prototype.get_Password, System.UriBuilder.prototype.set_Password);
JSIL.MakeProperty(System.UriBuilder.prototype, "Path", 
	System.UriBuilder.prototype.get_Path, System.UriBuilder.prototype.set_Path);
JSIL.MakeProperty(System.UriBuilder.prototype, "Port", 
	System.UriBuilder.prototype.get_Port, System.UriBuilder.prototype.set_Port);
JSIL.MakeProperty(System.UriBuilder.prototype, "Query", 
	System.UriBuilder.prototype.get_Query, System.UriBuilder.prototype.set_Query);
JSIL.MakeProperty(System.UriBuilder.prototype, "Scheme", 
	System.UriBuilder.prototype.get_Scheme, System.UriBuilder.prototype.set_Scheme);
JSIL.MakeProperty(System.UriBuilder.prototype, "Uri", 
	System.UriBuilder.prototype.get_Uri, null);
JSIL.MakeProperty(System.UriBuilder.prototype, "UserName", 
	System.UriBuilder.prototype.get_UserName, System.UriBuilder.prototype.set_UserName);
System.UriBuilder.prototype.m_changed = false;
System.UriBuilder.prototype.m_fragment = null;
System.UriBuilder.prototype.m_host = null;
System.UriBuilder.prototype.m_password = null;
System.UriBuilder.prototype.m_path = null;
System.UriBuilder.prototype.m_port = 0;
System.UriBuilder.prototype.m_query = null;
System.UriBuilder.prototype.m_scheme = null;
System.UriBuilder.prototype.m_schemeDelimiter = null;
System.UriBuilder.prototype.m_uri = null;
System.UriBuilder.prototype.m_username = null;

System.UriFormatException.prototype._ctor$0 = function () {
	System.FormatException.prototype._ctor$0.call(this);
};
System.UriFormatException.prototype._ctor$1 = function (textString) {
	System.FormatException.prototype._ctor$1.call(this, textString);
};
System.UriFormatException.prototype._ctor$2 = function (textString, e) {
	System.FormatException.prototype._ctor$2.call(this, textString, e);
};
JSIL.OverloadedMethod(System.UriFormatException.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.String]], 
		["_ctor$2", [System.String, System.Exception]]
	]);

$asm04.System.DomainNameHelper.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm04.System.DomainNameHelper.ParseCanonicalName = function (str, start, end, /* ref */ loopback) {
	var text = null;
__loop0__: 
	for (var i = (end - 1); i >= start; --i) {
		if (!(((str[i]) < "A") || ((str[i]) > "Z"))) {
			text = str.Substring$1(start, (end - start)).ToLower$1(System.Globalization.CultureInfo.InvariantCulture);
			break __loop0__;
		}
		if ((str[i]) === ":") {
			end = i;
		}
	}
	if (text === null) {
		text = str.Substring$1(start, (end - start));
	}
	if (!(!(text == "localhost") && !(text == "loopback"))) {
		loopback.value = true;
		return "localhost";
	}
	return text;
};
$asm04.System.DomainNameHelper.IsIdnAce = function (input, index) {
	return !(((input[index]) !== "x") || 
		((input[(index + 1)]) !== "n") || 
		((input[(index + 2)]) !== "-") || ((input[(index + 3)]) !== "-"));
};
$asm04.System.DomainNameHelper.IsASCIILetterOrDigit = function (character, /* ref */ notCanonical) {
	if (!(!((character >= "a") && 
				(character <= "z")) && ((character < "0") || 
				(character > "9")))) {
		return true;
	}
	if (!((character < "A") || (character > "Z"))) {
		notCanonical.value = true;
		return true;
	}
	return false;
};
$asm04.System.DomainNameHelper.IsValidDomainLabelCharacter = function (character, /* ref */ notCanonical) {
	if (!(!((character >= "a") && 
				(character <= "z")) && 
			!((character >= "0") && 
				(character <= "9")) && 
			(character !== "-") && (character !== "_"))) {
		return true;
	}
	if (!((character < "A") || (character > "Z"))) {
		notCanonical.value = true;
		return true;
	}
	return false;
};
Object.defineProperty($asm04.System.DomainNameHelper, "c_DummyChar", {
		"value": "\uffff"}
);
Object.defineProperty($asm04.System.DomainNameHelper, "Localhost", {
		"value": "localhost"}
);
Object.defineProperty($asm04.System.DomainNameHelper, "Loopback", {
		"value": "loopback"}
);

$asm04.System.IdnMapping.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm04.System.IdnMapping.prototype.GetUnicode = function (input) {
	return input;
};
$asm04.System.IdnMapping.prototype.GetAscii = function (input) {
	return input;
};

$asm04.System.IPv4AddressHelper.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm04.System.IPv4AddressHelper.ParseCanonicalName = JSIL.UntranslatableFunction("System.String System.IPv4AddressHelper::ParseCanonicalName(System.String,System.Int32,System.Int32,System.Boolean&)");
$asm04.System.IPv4AddressHelper.ParseHostNumber = JSIL.UntranslatableFunction("System.Int32 System.IPv4AddressHelper::ParseHostNumber(System.String,System.Int32,System.Int32)");
Object.defineProperty($asm04.System.IPv4AddressHelper, "NumberOfLabels", {
		"value": 4}
);

$asm04.System.IPv6AddressHelper.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm04.System.IPv6AddressHelper.ParseCanonicalName = JSIL.UntranslatableFunction("System.String System.IPv6AddressHelper::ParseCanonicalName(System.String,System.Int32,System.Boolean&,System.String&)");
Object.defineProperty($asm04.System.IPv6AddressHelper, "NumberOfLabels", {
		"value": 8}
);
Object.defineProperty($asm04.System.IPv6AddressHelper, "CanonicalNumberFormat", {
		"value": "{0:X4}"}
);

$asm04.System.UncNameHelper.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
$asm04.System.UncNameHelper.ParseCanonicalName = function (str, start, end, /* ref */ loopback) {
	return $asm04.System.DomainNameHelper.ParseCanonicalName(str, start, end, /* ref */ loopback);
};
Object.defineProperty($asm04.System.UncNameHelper, "MaximumInternetNameLength", {
		"value": 256}
);

$asm04.System.UriHelper.EscapeString = JSIL.UntranslatableFunction("System.Char[] System.UriHelper::EscapeString(System.String,System.Int32,System.Int32,System.Char[],System.Int32&,System.Boolean,System.Char,System.Char,System.Char)");
$asm04.System.UriHelper.UnescapeString = JSIL.UntranslatableFunction("System.Char[] System.UriHelper::UnescapeString(System.String,System.Int32,System.Int32,System.Char[],System.Int32&,System.Char,System.Char,System.Char,System.UriHelper/UnescapeMode,System.UriParser,System.Boolean,System.Boolean)");
$asm04.System.UriHelper.IsHighSurrogate = function (c) {
	return ((c >= "\ud800") && (c <= "\udbff"));
};
$asm04.System.UriHelper.EscapeAsciiChar = function (ch, to, /* ref */ pos) {
	to[pos.value++] = "%";
	to[pos.value++] = $asm04.System.UriHelper.HexUpperChars[((ch & "\xf0") >> 4)];
	to[pos.value++] = $asm04.System.UriHelper.HexUpperChars[(ch & "\x0f")];
};
$asm04.System.UriHelper.EscapedAscii = function (digit, next) {
	if (!(((digit >= "0") && 
				(digit <= "9")) || 
			((digit >= "A") && 
				(digit <= "F")) || ((digit >= "a") && 
				(digit <= "f")))) {
		return "\uffff";
	}
	var num = (digit <= "9") ? (digit - "0") : ((digit <= "F") ? (digit - "A") : (digit - "a") + "\n");
	if (!(((next >= "0") && 
				(next <= "9")) || 
			((next >= "A") && 
				(next <= "F")) || ((next >= "a") && 
				(next <= "f")))) {
		return "\uffff";
	}
	return ((num << 4) + (next <= "9") ? (next - "0") : ((next <= "F") ? (next - "A") : (next - "a") + "\n"));
};
$asm04.System.UriHelper.IsNotSafeForUnescape = function (ch) {
	return (!((ch > "\x1f") && 
			((ch < "") || 
				(ch > "\x9f"))) || !(!((ch >= ";") && 
				(ch <= "@") && 
				((ch | "\x02") !== ">")) && 
			!((ch >= "#") && 
				(ch <= "&")) && 
			(ch !== "+") && 
			(ch !== ",") && 
			(ch !== "/") && 
			(ch !== "\\")));
};
$asm04.System.UriHelper.IsNotReservedNotUnreservedNotHash = function (c) {
	return (!((c <= "z") || 
			(c === "~")) || 
		!((c <= "Z") || 
			(c >= "a") || 
			(c === "_")) || 
		(c < "!") || !((c !== ">") && 
			(c !== "<") && 
			(c !== "%") && 
			(c !== '"') && 
			(c !== "`")));
};
$asm04.System.UriHelper.IsNotUnreserved = function (c) {
	return (!((c <= "z") || 
			(c === "~")) || 
		!(!((c > "9") && 
				(c < "A")) && 
			((c <= "Z") || 
				(c >= "a") || 
				(c === "_"))) || 
		!((c >= "'") || 
			(c === "!")) || !((c !== "+") && 
			(c !== ",") && 
			(c !== "/")));
};
Object.defineProperty($asm04.System.UriHelper, "MaxUriBufferSize", {
		"value": 65520}
);
Object.defineProperty($asm04.System.UriHelper, "DummyChar", {
		"value": "\uffff"}
);
Object.defineProperty($asm04.System.UriHelper, "Eol", {
		"value": "\ufffe"}
);
Object.defineProperty($asm04.System.UriHelper, "c_MaxAsciiCharsReallocate", {
		"value": 40}
);
Object.defineProperty($asm04.System.UriHelper, "c_MaxUnicodeCharsReallocate", {
		"value": 40}
);
Object.defineProperty($asm04.System.UriHelper, "c_MaxUTF_8BytesPerUnicodeChar", {
		"value": 4}
);
Object.defineProperty($asm04.System.UriHelper, "c_EncodedCharsPerByte", {
		"value": 3}
);
$asm04.System.UriHelper.HexUpperChars = null;
$asm04.System.UriHelper._cctor = function () {
	$asm04.System.UriHelper.HexUpperChars = JSIL.Array.New(System.Char, ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9", "A", "B", "C", "D", "E", "F"]);
};

$asm04.System.UriExceptionHelper.GetException = function (err) {
	switch (Number(err)) {
		case 0: 
			return null;
		case 1: 
			return JSIL.New(System.UriFormatException, "_ctor$1", [$asm04.System.SR.GetString$2("net_uri_BadFormat")]);
		case 2: 
			return JSIL.New(System.UriFormatException, "_ctor$1", [$asm04.System.SR.GetString$2("net_uri_BadScheme")]);
		case 3: 
			return JSIL.New(System.UriFormatException, "_ctor$1", [$asm04.System.SR.GetString$2("net_uri_BadAuthority")]);
		case 4: 
			return JSIL.New(System.UriFormatException, "_ctor$1", [$asm04.System.SR.GetString$2("net_uri_EmptyUri")]);
		case 5: 
			return JSIL.New(System.UriFormatException, "_ctor$1", [$asm04.System.SR.GetString$2("net_uri_SchemeLimit")]);
		case 6: 
			return JSIL.New(System.UriFormatException, "_ctor$1", [$asm04.System.SR.GetString$2("net_uri_SizeLimit")]);
		case 7: 
			return JSIL.New(System.UriFormatException, "_ctor$1", [$asm04.System.SR.GetString$2("net_uri_MustRootedPath")]);
		case 8: 
			return JSIL.New(System.UriFormatException, "_ctor$1", [$asm04.System.SR.GetString$2("net_uri_BadHostName")]);
		case 9: 
			return JSIL.New(System.UriFormatException, "_ctor$1", [$asm04.System.SR.GetString$2("net_uri_BadFormat")]);
		case 10: 
			return JSIL.New(System.UriFormatException, "_ctor$1", [$asm04.System.SR.GetString$2("net_uri_BadPort")]);
		case 11: 
			return JSIL.New(System.UriFormatException, "_ctor$1", [$asm04.System.SR.GetString$2("net_uri_BadAuthorityTerminator")]);
		case 12: 
			return JSIL.New(System.UriFormatException, "_ctor$1", [$asm04.System.SR.GetString$2("net_uri_CannotCreateRelative")]);
		default: 
			return JSIL.New(System.UriFormatException, "_ctor$1", [$asm04.System.SR.GetString$2("net_uri_BadFormat")]);
	}
};

System.GenericUriParser.prototype._ctor = function (options) {
	System.UriParser.prototype._ctor$1.call(this, System.GenericUriParser.MapGenericParserOptions(options));
};
System.GenericUriParser.MapGenericParserOptions = function (options) {
	var uriSyntaxFlags = (System.UriSyntaxFlags.AllowAnInternetHost | System.UriSyntaxFlags.AllowDnsHost | System.UriSyntaxFlags.AllowIPv4Host | System.UriSyntaxFlags.AllowIPv6Host | System.UriSyntaxFlags.AllowUncHost | System.UriSyntaxFlags.CanonicalizeAsFilePath | System.UriSyntaxFlags.CompressPath | System.UriSyntaxFlags.ConvertPathSlashes | System.UriSyntaxFlags.MayHaveFragment | System.UriSyntaxFlags.MayHavePath | System.UriSyntaxFlags.MayHavePort | System.UriSyntaxFlags.MayHaveQuery | System.UriSyntaxFlags.MayHaveUserInfo | System.UriSyntaxFlags.MustHaveAuthority | System.UriSyntaxFlags.PathIsRooted | System.UriSyntaxFlags.UnEscapeDotsAndSlashes);
	if (options & System.GenericUriParserOptions.GenericAuthority) {
		uriSyntaxFlags = (uriSyntaxFlags & (System.UriSyntaxFlags.AllowAnyOtherHost | System.UriSyntaxFlags.AllowDOSPath | System.UriSyntaxFlags.AllowEmptyHost | System.UriSyntaxFlags.AllowIdn | System.UriSyntaxFlags.AllowIriParsing | System.UriSyntaxFlags.BuiltInSyntax | System.UriSyntaxFlags.CanonicalizeAsFilePath | System.UriSyntaxFlags.CompressPath | System.UriSyntaxFlags.ConvertPathSlashes | System.UriSyntaxFlags.FileLikeUri | System.UriSyntaxFlags.MailToLikeUri | System.UriSyntaxFlags.MayHaveFragment | System.UriSyntaxFlags.MayHavePath | System.UriSyntaxFlags.MayHaveQuery | System.UriSyntaxFlags.MustHaveAuthority | System.UriSyntaxFlags.OptionalAuthority | System.UriSyntaxFlags.ParserSchemeOnly | System.UriSyntaxFlags.PathIsRooted | System.UriSyntaxFlags.SimpleUserSyntax | System.UriSyntaxFlags.UnEscapeDotsAndSlashes | System.UriSyntaxFlags.V1_UnknownUri));
		uriSyntaxFlags = (uriSyntaxFlags | System.UriSyntaxFlags.AllowAnyOtherHost);
	}
	if (options & System.GenericUriParserOptions.AllowEmptyAuthority) {
		uriSyntaxFlags = (uriSyntaxFlags | System.UriSyntaxFlags.AllowEmptyHost);
	}
	if (options & System.GenericUriParserOptions.NoUserInfo) {
		uriSyntaxFlags = (uriSyntaxFlags & (System.UriSyntaxFlags.AllowAnInternetHost | System.UriSyntaxFlags.AllowAnyOtherHost | System.UriSyntaxFlags.AllowDnsHost | System.UriSyntaxFlags.AllowDOSPath | System.UriSyntaxFlags.AllowEmptyHost | System.UriSyntaxFlags.AllowIdn | System.UriSyntaxFlags.AllowIPv4Host | System.UriSyntaxFlags.AllowIPv6Host | System.UriSyntaxFlags.AllowIriParsing | System.UriSyntaxFlags.AllowUncHost | System.UriSyntaxFlags.BuiltInSyntax | System.UriSyntaxFlags.CanonicalizeAsFilePath | System.UriSyntaxFlags.CompressPath | System.UriSyntaxFlags.ConvertPathSlashes | System.UriSyntaxFlags.FileLikeUri | System.UriSyntaxFlags.MailToLikeUri | System.UriSyntaxFlags.MayHaveFragment | System.UriSyntaxFlags.MayHavePath | System.UriSyntaxFlags.MayHavePort | System.UriSyntaxFlags.MayHaveQuery | System.UriSyntaxFlags.MustHaveAuthority | System.UriSyntaxFlags.OptionalAuthority | System.UriSyntaxFlags.ParserSchemeOnly | System.UriSyntaxFlags.PathIsRooted | System.UriSyntaxFlags.SimpleUserSyntax | System.UriSyntaxFlags.UnEscapeDotsAndSlashes | System.UriSyntaxFlags.V1_UnknownUri));
	}
	if (options & System.GenericUriParserOptions.NoPort) {
		uriSyntaxFlags = (uriSyntaxFlags & (System.UriSyntaxFlags.AllowAnInternetHost | System.UriSyntaxFlags.AllowAnyOtherHost | System.UriSyntaxFlags.AllowDnsHost | System.UriSyntaxFlags.AllowDOSPath | System.UriSyntaxFlags.AllowEmptyHost | System.UriSyntaxFlags.AllowIdn | System.UriSyntaxFlags.AllowIPv4Host | System.UriSyntaxFlags.AllowIPv6Host | System.UriSyntaxFlags.AllowIriParsing | System.UriSyntaxFlags.AllowUncHost | System.UriSyntaxFlags.BuiltInSyntax | System.UriSyntaxFlags.CanonicalizeAsFilePath | System.UriSyntaxFlags.CompressPath | System.UriSyntaxFlags.ConvertPathSlashes | System.UriSyntaxFlags.FileLikeUri | System.UriSyntaxFlags.MailToLikeUri | System.UriSyntaxFlags.MayHaveFragment | System.UriSyntaxFlags.MayHavePath | System.UriSyntaxFlags.MayHaveQuery | System.UriSyntaxFlags.MayHaveUserInfo | System.UriSyntaxFlags.MustHaveAuthority | System.UriSyntaxFlags.OptionalAuthority | System.UriSyntaxFlags.ParserSchemeOnly | System.UriSyntaxFlags.PathIsRooted | System.UriSyntaxFlags.SimpleUserSyntax | System.UriSyntaxFlags.UnEscapeDotsAndSlashes | System.UriSyntaxFlags.V1_UnknownUri));
	}
	if (options & System.GenericUriParserOptions.NoQuery) {
		uriSyntaxFlags = (uriSyntaxFlags & (System.UriSyntaxFlags.AllowAnInternetHost | System.UriSyntaxFlags.AllowAnyOtherHost | System.UriSyntaxFlags.AllowDnsHost | System.UriSyntaxFlags.AllowDOSPath | System.UriSyntaxFlags.AllowEmptyHost | System.UriSyntaxFlags.AllowIdn | System.UriSyntaxFlags.AllowIPv4Host | System.UriSyntaxFlags.AllowIPv6Host | System.UriSyntaxFlags.AllowIriParsing | System.UriSyntaxFlags.AllowUncHost | System.UriSyntaxFlags.BuiltInSyntax | System.UriSyntaxFlags.CanonicalizeAsFilePath | System.UriSyntaxFlags.CompressPath | System.UriSyntaxFlags.ConvertPathSlashes | System.UriSyntaxFlags.FileLikeUri | System.UriSyntaxFlags.MailToLikeUri | System.UriSyntaxFlags.MayHaveFragment | System.UriSyntaxFlags.MayHavePath | System.UriSyntaxFlags.MayHavePort | System.UriSyntaxFlags.MayHaveUserInfo | System.UriSyntaxFlags.MustHaveAuthority | System.UriSyntaxFlags.OptionalAuthority | System.UriSyntaxFlags.ParserSchemeOnly | System.UriSyntaxFlags.PathIsRooted | System.UriSyntaxFlags.SimpleUserSyntax | System.UriSyntaxFlags.UnEscapeDotsAndSlashes | System.UriSyntaxFlags.V1_UnknownUri));
	}
	if (options & System.GenericUriParserOptions.NoFragment) {
		uriSyntaxFlags = (uriSyntaxFlags & (System.UriSyntaxFlags.AllowAnInternetHost | System.UriSyntaxFlags.AllowAnyOtherHost | System.UriSyntaxFlags.AllowDnsHost | System.UriSyntaxFlags.AllowDOSPath | System.UriSyntaxFlags.AllowEmptyHost | System.UriSyntaxFlags.AllowIdn | System.UriSyntaxFlags.AllowIPv4Host | System.UriSyntaxFlags.AllowIPv6Host | System.UriSyntaxFlags.AllowIriParsing | System.UriSyntaxFlags.AllowUncHost | System.UriSyntaxFlags.BuiltInSyntax | System.UriSyntaxFlags.CanonicalizeAsFilePath | System.UriSyntaxFlags.CompressPath | System.UriSyntaxFlags.ConvertPathSlashes | System.UriSyntaxFlags.FileLikeUri | System.UriSyntaxFlags.MailToLikeUri | System.UriSyntaxFlags.MayHavePath | System.UriSyntaxFlags.MayHavePort | System.UriSyntaxFlags.MayHaveQuery | System.UriSyntaxFlags.MayHaveUserInfo | System.UriSyntaxFlags.MustHaveAuthority | System.UriSyntaxFlags.OptionalAuthority | System.UriSyntaxFlags.ParserSchemeOnly | System.UriSyntaxFlags.PathIsRooted | System.UriSyntaxFlags.SimpleUserSyntax | System.UriSyntaxFlags.UnEscapeDotsAndSlashes | System.UriSyntaxFlags.V1_UnknownUri));
	}
	if (options & System.GenericUriParserOptions.DontConvertPathBackslashes) {
		uriSyntaxFlags = (uriSyntaxFlags & (System.UriSyntaxFlags.AllowAnInternetHost | System.UriSyntaxFlags.AllowAnyOtherHost | System.UriSyntaxFlags.AllowDnsHost | System.UriSyntaxFlags.AllowDOSPath | System.UriSyntaxFlags.AllowEmptyHost | System.UriSyntaxFlags.AllowIdn | System.UriSyntaxFlags.AllowIPv4Host | System.UriSyntaxFlags.AllowIPv6Host | System.UriSyntaxFlags.AllowIriParsing | System.UriSyntaxFlags.AllowUncHost | System.UriSyntaxFlags.BuiltInSyntax | System.UriSyntaxFlags.CanonicalizeAsFilePath | System.UriSyntaxFlags.CompressPath | System.UriSyntaxFlags.FileLikeUri | System.UriSyntaxFlags.MailToLikeUri | System.UriSyntaxFlags.MayHaveFragment | System.UriSyntaxFlags.MayHavePath | System.UriSyntaxFlags.MayHavePort | System.UriSyntaxFlags.MayHaveQuery | System.UriSyntaxFlags.MayHaveUserInfo | System.UriSyntaxFlags.MustHaveAuthority | System.UriSyntaxFlags.OptionalAuthority | System.UriSyntaxFlags.ParserSchemeOnly | System.UriSyntaxFlags.PathIsRooted | System.UriSyntaxFlags.SimpleUserSyntax | System.UriSyntaxFlags.UnEscapeDotsAndSlashes | System.UriSyntaxFlags.V1_UnknownUri));
	}
	if (options & System.GenericUriParserOptions.DontCompressPath) {
		uriSyntaxFlags = (uriSyntaxFlags & (System.UriSyntaxFlags.AllowAnInternetHost | System.UriSyntaxFlags.AllowAnyOtherHost | System.UriSyntaxFlags.AllowDnsHost | System.UriSyntaxFlags.AllowDOSPath | System.UriSyntaxFlags.AllowEmptyHost | System.UriSyntaxFlags.AllowIdn | System.UriSyntaxFlags.AllowIPv4Host | System.UriSyntaxFlags.AllowIPv6Host | System.UriSyntaxFlags.AllowIriParsing | System.UriSyntaxFlags.AllowUncHost | System.UriSyntaxFlags.BuiltInSyntax | System.UriSyntaxFlags.ConvertPathSlashes | System.UriSyntaxFlags.FileLikeUri | System.UriSyntaxFlags.MailToLikeUri | System.UriSyntaxFlags.MayHaveFragment | System.UriSyntaxFlags.MayHavePath | System.UriSyntaxFlags.MayHavePort | System.UriSyntaxFlags.MayHaveQuery | System.UriSyntaxFlags.MayHaveUserInfo | System.UriSyntaxFlags.MustHaveAuthority | System.UriSyntaxFlags.OptionalAuthority | System.UriSyntaxFlags.ParserSchemeOnly | System.UriSyntaxFlags.PathIsRooted | System.UriSyntaxFlags.SimpleUserSyntax | System.UriSyntaxFlags.UnEscapeDotsAndSlashes | System.UriSyntaxFlags.V1_UnknownUri));
	}
	if (options & System.GenericUriParserOptions.DontUnescapePathDotsAndSlashes) {
		uriSyntaxFlags = (uriSyntaxFlags & (System.UriSyntaxFlags.AllowAnInternetHost | System.UriSyntaxFlags.AllowAnyOtherHost | System.UriSyntaxFlags.AllowDnsHost | System.UriSyntaxFlags.AllowDOSPath | System.UriSyntaxFlags.AllowEmptyHost | System.UriSyntaxFlags.AllowIdn | System.UriSyntaxFlags.AllowIPv4Host | System.UriSyntaxFlags.AllowIPv6Host | System.UriSyntaxFlags.AllowIriParsing | System.UriSyntaxFlags.AllowUncHost | System.UriSyntaxFlags.BuiltInSyntax | System.UriSyntaxFlags.CanonicalizeAsFilePath | System.UriSyntaxFlags.CompressPath | System.UriSyntaxFlags.ConvertPathSlashes | System.UriSyntaxFlags.FileLikeUri | System.UriSyntaxFlags.MailToLikeUri | System.UriSyntaxFlags.MayHaveFragment | System.UriSyntaxFlags.MayHavePath | System.UriSyntaxFlags.MayHavePort | System.UriSyntaxFlags.MayHaveQuery | System.UriSyntaxFlags.MayHaveUserInfo | System.UriSyntaxFlags.MustHaveAuthority | System.UriSyntaxFlags.OptionalAuthority | System.UriSyntaxFlags.ParserSchemeOnly | System.UriSyntaxFlags.PathIsRooted | System.UriSyntaxFlags.SimpleUserSyntax | System.UriSyntaxFlags.V1_UnknownUri));
	}
	if (options & System.GenericUriParserOptions.Idn) {
		uriSyntaxFlags = (uriSyntaxFlags | System.UriSyntaxFlags.AllowIdn);
	}
	if (options & System.GenericUriParserOptions.IriParsing) {
		uriSyntaxFlags = (uriSyntaxFlags | System.UriSyntaxFlags.AllowIriParsing);
	}
	return uriSyntaxFlags;
};
Object.defineProperty(System.GenericUriParser, "DefaultGenericUriParserFlags", {
		"value": 65015677}
);

System.HttpStyleUriParser.prototype._ctor = function () {
	System.UriParser.prototype._ctor$1.call(this, System.UriParser.HttpUri.Flags);
};

System.FtpStyleUriParser.prototype._ctor = function () {
	System.UriParser.prototype._ctor$1.call(this, System.UriParser.FtpUri.Flags);
};

System.FileStyleUriParser.prototype._ctor = function () {
	System.UriParser.prototype._ctor$1.call(this, System.UriParser.FileUri.Flags);
};

System.ComponentModel.TypeConverter.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
System.ComponentModel.TypeConverter.prototype.CanConvertFrom$0 = function (sourceType) {
	return this.CanConvertFrom$1(null, sourceType);
};
System.ComponentModel.TypeConverter.prototype.CanConvertFrom$1 = function (context, sourceType) {
	return false;
};
System.ComponentModel.TypeConverter.prototype.CanConvertTo$0 = function (destinationType) {
	return this.CanConvertTo$1(null, destinationType);
};
System.ComponentModel.TypeConverter.prototype.CanConvertTo$1 = function (context, destinationType) {
	return false;
};
System.ComponentModel.TypeConverter.prototype.ConvertFrom$0 = function (value) {
	return this.ConvertFrom$1(null, System.Globalization.CultureInfo.CurrentCulture, value);
};
System.ComponentModel.TypeConverter.prototype.ConvertFrom$1 = function (context, culture, value) {
	throw JSIL.New(System.NotImplementedException, "_ctor$1", ["ConvertFrom not implemented in base TypeConverter."]);
};
System.ComponentModel.TypeConverter.prototype.ConvertFromString = function (text) {
	return this.ConvertFrom$1(null, null, text);
};
System.ComponentModel.TypeConverter.prototype.ConvertTo$0 = function (context, culture, value, destinationType) {
	throw JSIL.New(System.NotImplementedException, "_ctor$1", ["ConvertTo not implemented in base TypeConverter."]);
};
System.ComponentModel.TypeConverter.prototype.ConvertTo$1 = function (value, destinationType) {
	return this.ConvertTo$0(null, System.Globalization.CultureInfo.CurrentCulture, value, destinationType);
};
System.ComponentModel.TypeConverter.prototype.ConvertToString = function (value) {
	return JSIL.Cast(this.ConvertTo$0(null, System.Globalization.CultureInfo.CurrentCulture, value, System.String), System.String);
};
JSIL.OverloadedMethod(System.ComponentModel.TypeConverter.prototype, "CanConvertFrom", [
		["CanConvertFrom$0", [System.Type]], 
		["CanConvertFrom$1", [System.ComponentModel.ITypeDescriptorContext, System.Type]]
	]);
JSIL.OverloadedMethod(System.ComponentModel.TypeConverter.prototype, "CanConvertTo", [
		["CanConvertTo$0", [System.Type]], 
		["CanConvertTo$1", [System.ComponentModel.ITypeDescriptorContext, System.Type]]
	]);
JSIL.OverloadedMethod(System.ComponentModel.TypeConverter.prototype, "ConvertFrom", [
		["ConvertFrom$0", [System.Object]], 
		["ConvertFrom$1", [System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object]]
	]);
JSIL.OverloadedMethod(System.ComponentModel.TypeConverter.prototype, "ConvertTo", [
		["ConvertTo$0", [System.ComponentModel.ITypeDescriptorContext, System.Globalization.CultureInfo, System.Object, System.Type]], 
		["ConvertTo$1", [System.Object, System.Type]]
	]);

System.UriTypeConverter.prototype._ctor = function () {
	System.ComponentModel.TypeConverter.prototype._ctor.call(this);
};
System.UriTypeConverter.prototype.CanConvertFrom = function (context, sourceType) {
	if (sourceType === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$1", ["sourceType"]);
	}
	return ((sourceType === System.String) || System.Uri.IsAssignableFrom(sourceType));
};
System.UriTypeConverter.prototype.CanConvertTo = function (context, destinationType) {
	return ((destinationType === System.String) || (destinationType === System.Uri));
};
System.UriTypeConverter.prototype.ConvertFrom = function (context, culture, value) {
	var text = JSIL.TryCast(value, System.String);
	if (text !== null) {
		if (System.String.IsNullOrEmpty(text)) {
			return null;
		}
		return JSIL.New(System.Uri, "_ctor$1", [text, System.UriKind.RelativeOrAbsolute]);
	} else {
		var uri = JSIL.TryCast(value, System.Uri);
		if (System.Uri.op_Inequality(uri, null)) {
			return JSIL.New(System.Uri, "_ctor$0", [uri.OriginalString]);
		}
		throw JSIL.New(System.NotSupportedException, "_ctor$1", [System.String.Format(System.Globalization.CultureInfo.CurrentCulture, $asm04.System.SR.GetString$2("UriTypeConverter_ConvertFrom_CannotConvert"), [System.UriTypeConverter.Name, value ? JSIL.GetType(value).FullName : "null"])]);
	}
};
System.UriTypeConverter.prototype.ConvertTo = function (context, culture, value, destinationType) {
	var uri = JSIL.TryCast(value, System.Uri);
	if (System.Uri.op_Inequality(uri, null)) {
		if (destinationType === System.String) {
			return uri.OriginalString;
		}
		if (destinationType === System.Uri) {
			return JSIL.New(System.Uri, "_ctor$1", [uri.OriginalString, System.UriKind.RelativeOrAbsolute]);
		}
	}
	throw JSIL.New(System.NotSupportedException, "_ctor$1", [System.String.Format(System.Globalization.CultureInfo.CurrentCulture, $asm04.System.SR.GetString$2("UriTypeConverter_ConvertTo_CannotConvert"), [System.UriTypeConverter.Name, value ? JSIL.GetType(value).FullName : "null", destinationType ? destinationType.FullName : "null"])]);
};

System.ComponentModel.BindableAttribute.prototype._ctor$0 = function (bindable) {
	this._ctor$1(bindable, System.ComponentModel.BindingDirection.OneWay);
};
System.ComponentModel.BindableAttribute.prototype._ctor$1 = function (bindable, direction) {
	System.Attribute.prototype._ctor.call(this);
	this.bindable = bindable;
	this.direction = direction;
};
System.ComponentModel.BindableAttribute.prototype._ctor$2 = function (flags) {
	this._ctor$3(flags, System.ComponentModel.BindingDirection.OneWay);
};
System.ComponentModel.BindableAttribute.prototype._ctor$3 = function (flags, direction) {
	System.Attribute.prototype._ctor.call(this);
	this.bindable = (flags !== System.ComponentModel.BindableSupport.No);
	this.direction = direction;
};
System.ComponentModel.BindableAttribute.prototype.get_Bindable = function () {
	return this.bindable;
};
System.ComponentModel.BindableAttribute.prototype.get_Direction = function () {
	return this.direction;
};
System.ComponentModel.BindableAttribute.prototype.Equals = function (obj) {
	return ((obj === this) || (!((obj === null) || 
				(JSIL.TryCast(obj, System.ComponentModel.BindableAttribute) === null)) && 
			(JSIL.Cast(obj, System.ComponentModel.BindableAttribute).Bindable === this.bindable)));
};
System.ComponentModel.BindableAttribute.prototype.GetHashCode = function () {
	return this.bindable.GetHashCode();
};
JSIL.OverloadedMethod(System.ComponentModel.BindableAttribute.prototype, "_ctor", [
		["_ctor$0", [System.Boolean]], 
		["_ctor$1", [System.Boolean, System.ComponentModel.BindingDirection]], 
		["_ctor$2", [System.ComponentModel.BindableSupport]], 
		["_ctor$3", [System.ComponentModel.BindableSupport, System.ComponentModel.BindingDirection]]
	]);
JSIL.MakeProperty(System.ComponentModel.BindableAttribute.prototype, "Bindable", 
	System.ComponentModel.BindableAttribute.prototype.get_Bindable, null);
JSIL.MakeProperty(System.ComponentModel.BindableAttribute.prototype, "Direction", 
	System.ComponentModel.BindableAttribute.prototype.get_Direction, null);
System.ComponentModel.BindableAttribute.Yes = null;
System.ComponentModel.BindableAttribute.No = null;
System.ComponentModel.BindableAttribute.Default = null;
System.ComponentModel.BindableAttribute.prototype.bindable = false;
System.ComponentModel.BindableAttribute.prototype.direction = 0;
System.ComponentModel.BindableAttribute._cctor = function () {
	System.ComponentModel.BindableAttribute.Yes = JSIL.New(System.ComponentModel.BindableAttribute, "_ctor$0", [true]);
	System.ComponentModel.BindableAttribute.No = JSIL.New(System.ComponentModel.BindableAttribute, "_ctor$0", [false]);
	System.ComponentModel.BindableAttribute.Default = System.ComponentModel.BindableAttribute.No;
};

System.ComponentModel.BrowsableAttribute.prototype._ctor = function (browsable) {
	this.browsable = true;
	System.Attribute.prototype._ctor.call(this);
	this.browsable = browsable;
};
System.ComponentModel.BrowsableAttribute.prototype.get_Browsable = function () {
	return this.browsable;
};
System.ComponentModel.BrowsableAttribute.prototype.Equals = function (obj) {
	if (obj === this) {
		return true;
	}
	var browsableAttribute = JSIL.TryCast(obj, System.ComponentModel.BrowsableAttribute);
	return ((browsableAttribute !== null) && (browsableAttribute.Browsable === this.browsable));
};
System.ComponentModel.BrowsableAttribute.prototype.GetHashCode = function () {
	return this.browsable.GetHashCode();
};
JSIL.MakeProperty(System.ComponentModel.BrowsableAttribute.prototype, "Browsable", 
	System.ComponentModel.BrowsableAttribute.prototype.get_Browsable, null);
System.ComponentModel.BrowsableAttribute.Yes = null;
System.ComponentModel.BrowsableAttribute.No = null;
System.ComponentModel.BrowsableAttribute.Default = null;
System.ComponentModel.BrowsableAttribute.prototype.browsable = false;
System.ComponentModel.BrowsableAttribute._cctor = function () {
	System.ComponentModel.BrowsableAttribute.Yes = new System.ComponentModel.BrowsableAttribute(true);
	System.ComponentModel.BrowsableAttribute.No = new System.ComponentModel.BrowsableAttribute(false);
	System.ComponentModel.BrowsableAttribute.Default = System.ComponentModel.BrowsableAttribute.Yes;
};

System.ComponentModel.CancelEventArgs.prototype.get_Cancel = function () {
	return this.Cancel$value;
};
System.ComponentModel.CancelEventArgs.prototype.set_Cancel = function (value) {
	this.Cancel$value = value;
};
System.ComponentModel.CancelEventArgs.prototype._ctor$0 = function () {
	System.EventArgs.prototype._ctor.call(this);
};
System.ComponentModel.CancelEventArgs.prototype._ctor$1 = function (cancel) {
	System.EventArgs.prototype._ctor.call(this);
	this.Cancel = cancel;
};
JSIL.OverloadedMethod(System.ComponentModel.CancelEventArgs.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.Boolean]]
	]);
JSIL.MakeProperty(System.ComponentModel.CancelEventArgs.prototype, "Cancel", 
	System.ComponentModel.CancelEventArgs.prototype.get_Cancel, System.ComponentModel.CancelEventArgs.prototype.set_Cancel);
System.ComponentModel.CancelEventArgs.prototype.Cancel$value = false;

System.ComponentModel.ComponentCollection.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};

System.ComponentModel.DesignTimeVisibleAttribute.prototype._ctor$0 = function (visible) {
	System.Attribute.prototype._ctor.call(this);
	this.visible = visible;
};
System.ComponentModel.DesignTimeVisibleAttribute.prototype._ctor$1 = function () {
	System.Attribute.prototype._ctor.call(this);
};
System.ComponentModel.DesignTimeVisibleAttribute.prototype.get_Visible = function () {
	return this.visible;
};
System.ComponentModel.DesignTimeVisibleAttribute.prototype.Equals = function (obj) {
	if (obj === this) {
		return true;
	}
	var designTimeVisibleAttribute = JSIL.TryCast(obj, System.ComponentModel.DesignTimeVisibleAttribute);
	return ((designTimeVisibleAttribute !== null) && (designTimeVisibleAttribute.Visible === this.visible));
};
System.ComponentModel.DesignTimeVisibleAttribute.prototype.GetHashCode = function () {
	return (System.ComponentModel.DesignTimeVisibleAttribute.GetHashCode() ^ this.visible ? -1 : 0);
};
JSIL.OverloadedMethod(System.ComponentModel.DesignTimeVisibleAttribute.prototype, "_ctor", [
		["_ctor$0", [System.Boolean]], 
		["_ctor$1", []]
	]);
JSIL.MakeProperty(System.ComponentModel.DesignTimeVisibleAttribute.prototype, "Visible", 
	System.ComponentModel.DesignTimeVisibleAttribute.prototype.get_Visible, null);
System.ComponentModel.DesignTimeVisibleAttribute.prototype.visible = false;
System.ComponentModel.DesignTimeVisibleAttribute.Yes = null;
System.ComponentModel.DesignTimeVisibleAttribute.No = null;
System.ComponentModel.DesignTimeVisibleAttribute.Default = null;
System.ComponentModel.DesignTimeVisibleAttribute._cctor = function () {
	System.ComponentModel.DesignTimeVisibleAttribute.Yes = JSIL.New(System.ComponentModel.DesignTimeVisibleAttribute, "_ctor$0", [true]);
	System.ComponentModel.DesignTimeVisibleAttribute.No = JSIL.New(System.ComponentModel.DesignTimeVisibleAttribute, "_ctor$0", [false]);
	System.ComponentModel.DesignTimeVisibleAttribute.Default = System.ComponentModel.DesignTimeVisibleAttribute.Yes;
};

System.ComponentModel.PropertyChangedEventArgs.prototype._ctor = function (propertyName) {
	System.EventArgs.prototype._ctor.call(this);
	this.propertyName = propertyName;
};
System.ComponentModel.PropertyChangedEventArgs.prototype.get_PropertyName = function () {
	return this.propertyName;
};
JSIL.MakeProperty(System.ComponentModel.PropertyChangedEventArgs.prototype, "PropertyName", 
	System.ComponentModel.PropertyChangedEventArgs.prototype.get_PropertyName, null);
System.ComponentModel.PropertyChangedEventArgs.prototype.propertyName = null;

System.ComponentModel.ProgressChangedEventArgs.prototype._ctor = function (progressPercentage, userState) {
	System.EventArgs.prototype._ctor.call(this);
	this.progressPercentage = progressPercentage;
	this.userState = userState;
};
System.ComponentModel.ProgressChangedEventArgs.prototype.get_ProgressPercentage = function () {
	return this.progressPercentage;
};
System.ComponentModel.ProgressChangedEventArgs.prototype.get_UserState = function () {
	return this.userState;
};
JSIL.MakeProperty(System.ComponentModel.ProgressChangedEventArgs.prototype, "ProgressPercentage", 
	System.ComponentModel.ProgressChangedEventArgs.prototype.get_ProgressPercentage, null);
JSIL.MakeProperty(System.ComponentModel.ProgressChangedEventArgs.prototype, "UserState", 
	System.ComponentModel.ProgressChangedEventArgs.prototype.get_UserState, null);
System.ComponentModel.ProgressChangedEventArgs.prototype.progressPercentage = 0;
System.ComponentModel.ProgressChangedEventArgs.prototype.userState = null;

System.ComponentModel.PropertyDescriptor.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};

System.ComponentModel.ReadOnlyAttribute.prototype._ctor = function (isReadOnly) {
	System.Attribute.prototype._ctor.call(this);
	this.isReadOnly = isReadOnly;
};
System.ComponentModel.ReadOnlyAttribute.prototype.Equals = function (obj) {
	if (this === JSIL.Cast(obj, System.ComponentModel.ReadOnlyAttribute)) {
		return true;
	}
	var readOnlyAttribute = JSIL.TryCast(obj, System.ComponentModel.ReadOnlyAttribute);
	return ((readOnlyAttribute !== null) && (readOnlyAttribute.IsReadOnly === this.IsReadOnly));
};
System.ComponentModel.ReadOnlyAttribute.prototype.GetHashCode = function () {
	return System.Attribute.prototype.GetHashCode.call(this);
};
System.ComponentModel.ReadOnlyAttribute.prototype.get_IsReadOnly = function () {
	return this.isReadOnly;
};
JSIL.MakeProperty(System.ComponentModel.ReadOnlyAttribute.prototype, "IsReadOnly", 
	System.ComponentModel.ReadOnlyAttribute.prototype.get_IsReadOnly, null);
System.ComponentModel.ReadOnlyAttribute.prototype.isReadOnly = false;

System.ComponentModel.AsyncCompletedEventArgs.prototype._ctor = function (error, cancelled, userState) {
	System.EventArgs.prototype._ctor.call(this);
	this._cancelled = cancelled;
	this._error = error;
	this._state = userState;
};
System.ComponentModel.AsyncCompletedEventArgs.prototype.RaiseExceptionIfNecessary = function () {
	if (this.Error !== null) {
		throw JSIL.New(System.Reflection.TargetInvocationException, "_ctor$3", [$asm04.System.SR.GetString$2("Async_ExceptionOccurred"), this.Error]);
	}
	if (this.Cancelled) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm04.System.SR.GetString$2("Async_OperationCancelled")]);
	}
};
System.ComponentModel.AsyncCompletedEventArgs.prototype.get_Cancelled = function () {
	return this._cancelled;
};
System.ComponentModel.AsyncCompletedEventArgs.prototype.get_Error = function () {
	return this._error;
};
System.ComponentModel.AsyncCompletedEventArgs.prototype.get_UserState = function () {
	return this._state;
};
JSIL.MakeProperty(System.ComponentModel.AsyncCompletedEventArgs.prototype, "Cancelled", 
	System.ComponentModel.AsyncCompletedEventArgs.prototype.get_Cancelled, null);
JSIL.MakeProperty(System.ComponentModel.AsyncCompletedEventArgs.prototype, "Error", 
	System.ComponentModel.AsyncCompletedEventArgs.prototype.get_Error, null);
JSIL.MakeProperty(System.ComponentModel.AsyncCompletedEventArgs.prototype, "UserState", 
	System.ComponentModel.AsyncCompletedEventArgs.prototype.get_UserState, null);
System.ComponentModel.AsyncCompletedEventArgs.prototype._cancelled = false;
System.ComponentModel.AsyncCompletedEventArgs.prototype._error = null;
System.ComponentModel.AsyncCompletedEventArgs.prototype._state = null;

System.ComponentModel.AsyncOperation.prototype._ctor = function (userSuppliedState, syncContext) {
	System.Object.prototype._ctor.call(this);
	this.userSuppliedState = userSuppliedState;
	this.syncContext = syncContext;
	this.alreadyCompleted = false;
	this.syncContext.OperationStarted();
};
System.ComponentModel.AsyncOperation.CreateOperation = function (userSuppliedState, syncContext) {
	return new System.ComponentModel.AsyncOperation(userSuppliedState, syncContext);
};
System.ComponentModel.AsyncOperation.prototype.Finalize = function () {
	try {
		if (!(this.alreadyCompleted || (this.syncContext === null))) {
			this.syncContext.OperationCompleted();
		}
	} finally {
		System.Object.prototype.Finalize.call(this);
	}
};
System.ComponentModel.AsyncOperation.prototype.OperationCompleted = function () {
	this.VerifyNotCompleted();
	this.OperationCompletedCore();
};
System.ComponentModel.AsyncOperation.prototype.OperationCompletedCore = function () {
	try {
		this.syncContext.OperationCompleted();
	} finally {
		this.alreadyCompleted = true;
		System.GC.SuppressFinalize(this);
	}
};
System.ComponentModel.AsyncOperation.prototype.Post = function (d, arg) {
	this.VerifyNotCompleted();
	this.VerifyDelegateNotNull(d);
	this.syncContext.Post(d, arg);
};
System.ComponentModel.AsyncOperation.prototype.PostOperationCompleted = function (d, arg) {
	this.Post(d, arg);
	this.OperationCompletedCore();
};
System.ComponentModel.AsyncOperation.prototype.VerifyDelegateNotNull = function (d) {
	if (d === null) {
		throw JSIL.New(System.ArgumentNullException, "_ctor$3", [$asm04.System.SR.GetString$2("Async_NullDelegate"), "d"]);
	}
};
System.ComponentModel.AsyncOperation.prototype.VerifyNotCompleted = function () {
	if (this.alreadyCompleted) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm04.System.SR.GetString$2("Async_OperationAlreadyCompleted")]);
	}
};
System.ComponentModel.AsyncOperation.prototype.get_SynchronizationContext = function () {
	return this.syncContext;
};
System.ComponentModel.AsyncOperation.prototype.get_UserSuppliedState = function () {
	return this.userSuppliedState;
};
JSIL.MakeProperty(System.ComponentModel.AsyncOperation.prototype, "SynchronizationContext", 
	System.ComponentModel.AsyncOperation.prototype.get_SynchronizationContext, null);
JSIL.MakeProperty(System.ComponentModel.AsyncOperation.prototype, "UserSuppliedState", 
	System.ComponentModel.AsyncOperation.prototype.get_UserSuppliedState, null);
System.ComponentModel.AsyncOperation.prototype.alreadyCompleted = false;
System.ComponentModel.AsyncOperation.prototype.syncContext = null;
System.ComponentModel.AsyncOperation.prototype.userSuppliedState = null;

System.ComponentModel.AsyncOperationManager.CreateOperation = function (userSuppliedState) {
	return System.ComponentModel.AsyncOperation.CreateOperation(userSuppliedState, System.ComponentModel.AsyncOperationManager.SynchronizationContext);
};
System.ComponentModel.AsyncOperationManager.get_SynchronizationContext = function () {
	if (System.Threading.SynchronizationContext.Current === null) {
		System.Threading.SynchronizationContext.SetSynchronizationContext$0(new System.Threading.SynchronizationContext());
	}
	return System.Threading.SynchronizationContext.Current;
};
System.ComponentModel.AsyncOperationManager.set_SynchronizationContext = function (value) {
	System.Threading.SynchronizationContext.SetSynchronizationContext$0(value);
};
JSIL.MakeProperty(System.ComponentModel.AsyncOperationManager, "SynchronizationContext", 
	System.ComponentModel.AsyncOperationManager.get_SynchronizationContext, System.ComponentModel.AsyncOperationManager.set_SynchronizationContext);

System.ComponentModel.TypeConverterAttribute.prototype._ctor$0 = function () {
	System.Attribute.prototype._ctor.call(this);
};
System.ComponentModel.TypeConverterAttribute.prototype._ctor$1 = function (typeName) {
	System.Attribute.prototype._ctor.call(this);
	this._typeName = typeName;
};
System.ComponentModel.TypeConverterAttribute.prototype._ctor$2 = function (type) {
	System.Attribute.prototype._ctor.call(this);
	this._typeName = type.AssemblyQualifiedName;
};
System.ComponentModel.TypeConverterAttribute.prototype.get_ConverterTypeName = function () {
	return this._typeName;
};
JSIL.OverloadedMethod(System.ComponentModel.TypeConverterAttribute.prototype, "_ctor", [
		["_ctor$0", []], 
		["_ctor$1", [System.String]], 
		["_ctor$2", [System.Type]]
	]);
JSIL.MakeProperty(System.ComponentModel.TypeConverterAttribute.prototype, "ConverterTypeName", 
	System.ComponentModel.TypeConverterAttribute.prototype.get_ConverterTypeName, null);
System.ComponentModel.TypeConverterAttribute.prototype._typeName = null;
System.ComponentModel.TypeConverterAttribute._cctor = function () {
};

System.ComponentModel.DoWorkEventArgs.prototype.get_Argument = function () {
	return this._argument;
};
System.ComponentModel.DoWorkEventArgs.prototype.get_Result = function () {
	return this._result;
};
System.ComponentModel.DoWorkEventArgs.prototype.set_Result = function (value) {
	this._result = value;
};
System.ComponentModel.DoWorkEventArgs.prototype.get_Cancel = function () {
	return this._cancel;
};
System.ComponentModel.DoWorkEventArgs.prototype.set_Cancel = function (value) {
	this._cancel = value;
};
System.ComponentModel.DoWorkEventArgs.prototype._ctor = function (argument) {
	System.EventArgs.prototype._ctor.call(this);
	this._argument = argument;
};
JSIL.MakeProperty(System.ComponentModel.DoWorkEventArgs.prototype, "Argument", 
	System.ComponentModel.DoWorkEventArgs.prototype.get_Argument, null);
JSIL.MakeProperty(System.ComponentModel.DoWorkEventArgs.prototype, "Result", 
	System.ComponentModel.DoWorkEventArgs.prototype.get_Result, System.ComponentModel.DoWorkEventArgs.prototype.set_Result);
JSIL.MakeProperty(System.ComponentModel.DoWorkEventArgs.prototype, "Cancel", 
	System.ComponentModel.DoWorkEventArgs.prototype.get_Cancel, System.ComponentModel.DoWorkEventArgs.prototype.set_Cancel);
System.ComponentModel.DoWorkEventArgs.prototype._argument = null;
System.ComponentModel.DoWorkEventArgs.prototype._result = null;
System.ComponentModel.DoWorkEventArgs.prototype._cancel = false;

System.ComponentModel.RunWorkerCompletedEventArgs.prototype.get_Result = function () {
	System.ComponentModel.AsyncCompletedEventArgs.prototype.RaiseExceptionIfNecessary.call(this);
	return this._result;
};
System.ComponentModel.RunWorkerCompletedEventArgs.prototype._ctor = function (result, error, cancelled) {
	System.ComponentModel.AsyncCompletedEventArgs.prototype._ctor.call(this, error, cancelled, null);
	this._result = result;
};
JSIL.MakeProperty(System.ComponentModel.RunWorkerCompletedEventArgs.prototype, "Result", 
	System.ComponentModel.RunWorkerCompletedEventArgs.prototype.get_Result, null);
System.ComponentModel.RunWorkerCompletedEventArgs.prototype._result = null;

System.ComponentModel.BackgroundWorker.prototype.get_CancellationPending = function () {
	return this._cancellationPending;
};
System.ComponentModel.BackgroundWorker.prototype.get_IsBusy = function () {
	return this._isRunning;
};
System.ComponentModel.BackgroundWorker.prototype.get_WorkerReportsProgress = function () {
	return this._workerReportsProgress;
};
System.ComponentModel.BackgroundWorker.prototype.set_WorkerReportsProgress = function (value) {
	this._workerReportsProgress = value;
};
System.ComponentModel.BackgroundWorker.prototype.get_WorkerSupportsCancellation = function () {
	return this._workerSupportsCancellation;
};
System.ComponentModel.BackgroundWorker.prototype.set_WorkerSupportsCancellation = function (value) {
	this._workerSupportsCancellation = value;
};
System.ComponentModel.BackgroundWorker.prototype.add_DoWork = function (value) {
	this.DoWork = System.Delegate.Combine(this.DoWork, value);
};
System.ComponentModel.BackgroundWorker.prototype.remove_DoWork = function (value) {
	this.DoWork = System.Delegate.Remove(this.DoWork, value);
};
System.ComponentModel.BackgroundWorker.prototype.add_ProgressChanged = function (value) {
	this.ProgressChanged = System.Delegate.Combine(this.ProgressChanged, value);
};
System.ComponentModel.BackgroundWorker.prototype.remove_ProgressChanged = function (value) {
	this.ProgressChanged = System.Delegate.Remove(this.ProgressChanged, value);
};
System.ComponentModel.BackgroundWorker.prototype.add_RunWorkerCompleted = function (value) {
	this.RunWorkerCompleted = System.Delegate.Combine(this.RunWorkerCompleted, value);
};
System.ComponentModel.BackgroundWorker.prototype.remove_RunWorkerCompleted = function (value) {
	this.RunWorkerCompleted = System.Delegate.Remove(this.RunWorkerCompleted, value);
};
System.ComponentModel.BackgroundWorker.prototype._ctor = function () {
	System.Object.prototype._ctor.call(this);
};
System.ComponentModel.BackgroundWorker.prototype.CancelAsync = function () {
	if (!this._workerSupportsCancellation) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm04.System.SR.GetString$2("BackgroundWorker_CancellationNotSupported")]);
	}
	this._cancellationPending = true;
};
System.ComponentModel.BackgroundWorker.prototype.OnDoWork = function (e) {
	var doWork = this.DoWork;
	if (doWork !== null) {
		doWork(this, e);
	}
};
System.ComponentModel.BackgroundWorker.prototype.OnProgressChanged = function (e) {
	var progressChanged = this.ProgressChanged;
	if (progressChanged !== null) {
		progressChanged(this, e);
	}
};
System.ComponentModel.BackgroundWorker.prototype.OnRunWorkerCompleted = function (e) {
	var runWorkerCompleted = this.RunWorkerCompleted;
	if (runWorkerCompleted !== null) {
		runWorkerCompleted(this, e);
	}
};
System.ComponentModel.BackgroundWorker.prototype.ReportProgress$0 = function (percentProgress) {
	this.ReportProgress$1(percentProgress, null);
};
System.ComponentModel.BackgroundWorker.prototype.ReportProgress$1 = function (percentProgress, userState) {
	if (!this._workerReportsProgress) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm04.System.SR.GetString$2("BackgroundWorker_ProgressNotSupported")]);
	}
	if (this._completed) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm04.System.SR.GetString$2("BackgroundWorker_OperationCompleted")]);
	}
	var progressChangedEventArgs = new System.ComponentModel.ProgressChangedEventArgs(percentProgress, userState);
	var sendOrPostCallback = function (state) {
		this.OnProgressChanged(JSIL.Cast(state, System.ComponentModel.ProgressChangedEventArgs));
	};
	if (this._asyncOperation !== null) {
		this._asyncOperation.Post(sendOrPostCallback, progressChangedEventArgs);
		return;
	}
	sendOrPostCallback(progressChangedEventArgs);
};
System.ComponentModel.BackgroundWorker.prototype.RunWorkerAsync$0 = function () {
	this.RunWorkerAsync$1(null);
};
System.ComponentModel.BackgroundWorker.prototype.RunWorkerAsync$1 = function (argument) {
	if (this._isRunning) {
		throw JSIL.New(System.InvalidOperationException, "_ctor$1", [$asm04.System.SR.GetString$2("BackgroundWorker_AlreadyRunning")]);
	}
	this._isRunning = true;
	this._cancellationPending = false;
	this._asyncOperation = System.ComponentModel.AsyncOperationManager.CreateOperation(null);
	this._completed = false;
	System.Threading.ThreadPool.QueueUserWorkItem$0(JSIL.Delegate.New("System.Threading.WaitCallback", this, System.ComponentModel.BackgroundWorker.prototype.OnRun), argument);
};
System.ComponentModel.BackgroundWorker.prototype.OnRun = function (argument) {
	var cancelled = false;
	var error = null;
	var doWorkEventArgs = new System.ComponentModel.DoWorkEventArgs(argument);
	try {
		this.OnDoWork(doWorkEventArgs);
		cancelled = doWorkEventArgs.Cancel;
	} catch ($exception) {
		error = $exception;
	}
	var runWorkerCompletedEventArgs = new System.ComponentModel.RunWorkerCompletedEventArgs(doWorkEventArgs.Result, error, cancelled);
	var sendOrPostCallback = function (state) {
		this.OnRunWorkerCompleted(JSIL.Cast(state, System.ComponentModel.RunWorkerCompletedEventArgs));
	};
	if (this._asyncOperation !== null) {
		this._asyncOperation.PostOperationCompleted(sendOrPostCallback, runWorkerCompletedEventArgs);
	} else {
		sendOrPostCallback(runWorkerCompletedEventArgs);
	}
	this._isRunning = false;
	this._cancellationPending = false;
	this._completed = true;
};
JSIL.OverloadedMethod(System.ComponentModel.BackgroundWorker.prototype, "ReportProgress", [
		["ReportProgress$0", [System.Int32]], 
		["ReportProgress$1", [System.Int32, System.Object]]
	]);
JSIL.OverloadedMethod(System.ComponentModel.BackgroundWorker.prototype, "RunWorkerAsync", [
		["RunWorkerAsync$0", []], 
		["RunWorkerAsync$1", [System.Object]]
	]);
JSIL.MakeProperty(System.ComponentModel.BackgroundWorker.prototype, "CancellationPending", 
	System.ComponentModel.BackgroundWorker.prototype.get_CancellationPending, null);
JSIL.MakeProperty(System.ComponentModel.BackgroundWorker.prototype, "IsBusy", 
	System.ComponentModel.BackgroundWorker.prototype.get_IsBusy, null);
JSIL.MakeProperty(System.ComponentModel.BackgroundWorker.prototype, "WorkerReportsProgress", 
	System.ComponentModel.BackgroundWorker.prototype.get_WorkerReportsProgress, System.ComponentModel.BackgroundWorker.prototype.set_WorkerReportsProgress);
JSIL.MakeProperty(System.ComponentModel.BackgroundWorker.prototype, "WorkerSupportsCancellation", 
	System.ComponentModel.BackgroundWorker.prototype.get_WorkerSupportsCancellation, System.ComponentModel.BackgroundWorker.prototype.set_WorkerSupportsCancellation);
System.ComponentModel.BackgroundWorker.prototype._cancellationPending = false;
System.ComponentModel.BackgroundWorker.prototype._completed = false;
System.ComponentModel.BackgroundWorker.prototype._isRunning = false;
System.ComponentModel.BackgroundWorker.prototype._workerReportsProgress = false;
System.ComponentModel.BackgroundWorker.prototype._workerSupportsCancellation = false;
System.ComponentModel.BackgroundWorker.prototype._asyncOperation = null;
System.ComponentModel.BackgroundWorker.prototype.DoWork = null;
System.ComponentModel.BackgroundWorker.prototype.ProgressChanged = null;
System.ComponentModel.BackgroundWorker.prototype.RunWorkerCompleted = null;

JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Text.RegularExpressions.CaptureCollection, [
				"System.Collections.ICollection", "System.Collections.IEnumerable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm04.System.Text.RegularExpressions.CaptureEnumerator, [
				"System.Collections.IEnumerator"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm04.System.Text.RegularExpressions.RegexCharClass.SingleRangeComparer, [
				"System.Collections.Generic.IComparer$b1"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Text.RegularExpressions.GroupCollection, [
				"System.Collections.ICollection", "System.Collections.IEnumerable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm04.System.Text.RegularExpressions.GroupEnumerator, [
				"System.Collections.IEnumerator"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Text.RegularExpressions.MatchCollection, [
				"System.Collections.ICollection", "System.Collections.IEnumerable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm04.System.Text.RegularExpressions.MatchEnumerator, [
				"System.Collections.IEnumerator"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ExternalMembers($asm04.Microsoft.Win32.SafeNativeMethods, 
			"CFStringCreateWithCharacters", "CFRelease", "CFUserNotificationDisplayAlert", "GetTextMetrics", "GetStockObject", "OutputDebugString", "MessageBox"
		);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Collections.Generic.LinkedList$b1, [
				"System.Collections.Generic.ICollection$b1", "System.Collections.Generic.IEnumerable$b1", "System.Collections.ICollection", "System.Collections.IEnumerable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm04.System.Collections.Generic.LinkedList$b1.Enumerator, [
				"System.Collections.Generic.IEnumerator$b1", "System.IDisposable", "System.Collections.IEnumerator"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Collections.Generic.Queue$b1, [
				"System.Collections.Generic.IEnumerable$b1", "System.Collections.ICollection", "System.Collections.IEnumerable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm04.System.Collections.Generic.Queue$b1.Enumerator, [
				"System.Collections.Generic.IEnumerator$b1", "System.IDisposable", "System.Collections.IEnumerator"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces(System.Collections.Generic.Stack$b1, [
				"System.Collections.Generic.IEnumerable$b1", "System.Collections.ICollection", "System.Collections.IEnumerable"
			]);
	});
JSIL.QueueInitializer(function () {
		JSIL.ImplementInterfaces($asm04.System.Collections.Generic.Stack$b1.Enumerator, [
				"System.Collections.Generic.IEnumerator$b1", "System.IDisposable", "System.Collections.IEnumerator"
			]);
	});
JSIL.QueueInitializer(function () {
		$asm04.System.Uri.UriInfo.prototype.__StructFields__ = [
			["Offset", $asm04.System.Uri.Offset]
		];
	});
JSIL.QueueInitializer(function () {
		JSIL.SealTypes($asm04, "System.ComponentModel", 
			"DescriptionAttribute", "ComplexBindingPropertiesAttribute", "DefaultBindingPropertyAttribute", "DefaultEventAttribute", "DefaultPropertyAttribute", "LookupBindingPropertiesAttribute", "BindableAttribute", "BrowsableAttribute", "DesignTimeVisibleAttribute", "TypeConverterAttribute"
		);
		JSIL.SealTypes($asm04, "System", 
			"SR", "UriParser", "Uri", "UriHelper"
		);
		JSIL.SealTypes($asm04, "System.Text.RegularExpressions", 
			"Regex", "RegexCharClass", "RegexPrefix", "Group", "Match", "MatchCollection", "RegexParser"
		);
		JSIL.SealTypes($asm04, "System.Diagnostics", 
			"Debug"
		);
		JSIL.SealTypes($asm04, "System.Collections.Generic", 
			"Queue`1", "Stack`1"
		);
	});
