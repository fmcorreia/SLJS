//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SLJS.Compiler.Includes {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class Scripts {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Scripts() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SLJS.Compiler.Includes.Scripts", typeof(Scripts).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /*!
        /// * jQuery JavaScript Library v1.6.1
        /// * http://jquery.com/
        /// *
        /// * Copyright 2011, John Resig
        /// * Dual licensed under the MIT or GPL Version 2 licenses.
        /// * http://jquery.org/license
        /// *
        /// * Includes Sizzle.js
        /// * http://sizzlejs.com/
        /// * Copyright 2011, The Dojo Foundation
        /// * Released under the MIT, BSD, and GPL Licenses.
        /// *
        /// * Date: Thu May 12 15:04:36 2011 -0400
        /// */
        ///(function( window, undefined ) {
        ///
        ///// Use the correct document accordingly with window argument (sandbox)
        ///var document = window.document,
        ///	navigat [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string jquery_1_6_1 {
            get {
                return ResourceManager.GetString("jquery_1_6_1", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /*jslint browser: true, eqeqeq: true, bitwise: true, newcap: true, immed: true, regexp: false */
        ///
        ////**
        ///LazyLoad makes it easy and painless to lazily load one or more external
        ///JavaScript or CSS files on demand either during or after the rendering of a web
        ///page.
        ///
        ///Supported browsers include Firefox 2+, IE6+, Safari 3+ (including Mobile
        ///Safari), Google Chrome, and Opera 9+. Other browsers may or may not work and
        ///are not officially supported.
        ///
        ///Visit https://github.com/rgrove/lazyload/ for more info.
        ///        /// [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string lazyload {
            get {
                return ResourceManager.GetString("lazyload", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to .
        /// </summary>
        internal static string Patches {
            get {
                return ResourceManager.GetString("Patches", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to initializeApplication = function(){
        ///    $(&apos;.code&apos;).show();
        ///};
        ///
        ///$(document).ready(function () {
        ///    $(&apos;.code&apos;).hide();
        ///    LazyLoad.js([
        ///        &quot;JSIL.Core.js&quot;,
        ///        &quot;JSIL.Bootstrap.js&quot;,
        ///        &quot;mscorlib, Version=2.0.5.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e.js&quot;,
        ///        &quot;System, Version=2.0.5.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e.js&quot;,
        ///        &quot;System.Core, Version=2.0.5.0, Culture=neutral, PublicKeyToken=7cec85d7bea7798e.js&quot;,
        ///        &quot;System.Net, Version=2.0.5.0, Cul [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string sljs {
            get {
                return ResourceManager.GetString("sljs", resourceCulture);
            }
        }
    }
}
